
nereo_fc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001e2cc  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000265c  0801e490  0801e490  0001f490  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08020aec  08020aec  0002537c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08020aec  08020aec  00021aec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08020af4  08020af4  0002537c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000018  08020af4  08020af4  00021af4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08020b0c  08020b0c  00021b0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000337c  20000000  08020b10  00022000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002537c  2**0
                  CONTENTS
 10 .bss          00016a0c  20003380  20003380  00025380  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20019d8c  20019d8c  00025380  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002537c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000232bd  00000000  00000000  000253ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000056f5  00000000  00000000  00048669  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001950  00000000  00000000  0004dd60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000131a  00000000  00000000  0004f6b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000346c3  00000000  00000000  000509ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00023dde  00000000  00000000  0008508d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0011a121  00000000  00000000  000a8e6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000e2  00000000  00000000  001c2f8c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000077f4  00000000  00000000  001c3070  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000071  00000000  00000000  001ca864  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    00000959  00000000  00000000  001ca8d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_ranges 00000020  00000000  00000000  001cb22e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20003380 	.word	0x20003380
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0801e474 	.word	0x0801e474

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20003384 	.word	0x20003384
 80001fc:	0801e474 	.word	0x0801e474

08000200 <strcmp>:
 8000200:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000204:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000208:	2a01      	cmp	r2, #1
 800020a:	bf28      	it	cs
 800020c:	429a      	cmpcs	r2, r3
 800020e:	d0f7      	beq.n	8000200 <strcmp>
 8000210:	1ad0      	subs	r0, r2, r3
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2f>:
 8000b7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b80:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b84:	bf24      	itt	cs
 8000b86:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b8a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b8e:	d90d      	bls.n	8000bac <__aeabi_d2f+0x30>
 8000b90:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b94:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b98:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b9c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ba0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ba4:	bf08      	it	eq
 8000ba6:	f020 0001 	biceq.w	r0, r0, #1
 8000baa:	4770      	bx	lr
 8000bac:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bb0:	d121      	bne.n	8000bf6 <__aeabi_d2f+0x7a>
 8000bb2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bb6:	bfbc      	itt	lt
 8000bb8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bbc:	4770      	bxlt	lr
 8000bbe:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bc2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bc6:	f1c2 0218 	rsb	r2, r2, #24
 8000bca:	f1c2 0c20 	rsb	ip, r2, #32
 8000bce:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bd2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bd6:	bf18      	it	ne
 8000bd8:	f040 0001 	orrne.w	r0, r0, #1
 8000bdc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000be4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000be8:	ea40 000c 	orr.w	r0, r0, ip
 8000bec:	fa23 f302 	lsr.w	r3, r3, r2
 8000bf0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bf4:	e7cc      	b.n	8000b90 <__aeabi_d2f+0x14>
 8000bf6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bfa:	d107      	bne.n	8000c0c <__aeabi_d2f+0x90>
 8000bfc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c00:	bf1e      	ittt	ne
 8000c02:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c06:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c0a:	4770      	bxne	lr
 8000c0c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c10:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c14:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop

08000c1c <__aeabi_ldivmod>:
 8000c1c:	b97b      	cbnz	r3, 8000c3e <__aeabi_ldivmod+0x22>
 8000c1e:	b972      	cbnz	r2, 8000c3e <__aeabi_ldivmod+0x22>
 8000c20:	2900      	cmp	r1, #0
 8000c22:	bfbe      	ittt	lt
 8000c24:	2000      	movlt	r0, #0
 8000c26:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000c2a:	e006      	blt.n	8000c3a <__aeabi_ldivmod+0x1e>
 8000c2c:	bf08      	it	eq
 8000c2e:	2800      	cmpeq	r0, #0
 8000c30:	bf1c      	itt	ne
 8000c32:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000c36:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c3a:	f000 b9d3 	b.w	8000fe4 <__aeabi_idiv0>
 8000c3e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c42:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c46:	2900      	cmp	r1, #0
 8000c48:	db09      	blt.n	8000c5e <__aeabi_ldivmod+0x42>
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	db1a      	blt.n	8000c84 <__aeabi_ldivmod+0x68>
 8000c4e:	f000 f84d 	bl	8000cec <__udivmoddi4>
 8000c52:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c5a:	b004      	add	sp, #16
 8000c5c:	4770      	bx	lr
 8000c5e:	4240      	negs	r0, r0
 8000c60:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	db1b      	blt.n	8000ca0 <__aeabi_ldivmod+0x84>
 8000c68:	f000 f840 	bl	8000cec <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4240      	negs	r0, r0
 8000c78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c7c:	4252      	negs	r2, r2
 8000c7e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c82:	4770      	bx	lr
 8000c84:	4252      	negs	r2, r2
 8000c86:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c8a:	f000 f82f 	bl	8000cec <__udivmoddi4>
 8000c8e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c96:	b004      	add	sp, #16
 8000c98:	4240      	negs	r0, r0
 8000c9a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c9e:	4770      	bx	lr
 8000ca0:	4252      	negs	r2, r2
 8000ca2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ca6:	f000 f821 	bl	8000cec <__udivmoddi4>
 8000caa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb2:	b004      	add	sp, #16
 8000cb4:	4252      	negs	r2, r2
 8000cb6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cba:	4770      	bx	lr

08000cbc <__aeabi_uldivmod>:
 8000cbc:	b953      	cbnz	r3, 8000cd4 <__aeabi_uldivmod+0x18>
 8000cbe:	b94a      	cbnz	r2, 8000cd4 <__aeabi_uldivmod+0x18>
 8000cc0:	2900      	cmp	r1, #0
 8000cc2:	bf08      	it	eq
 8000cc4:	2800      	cmpeq	r0, #0
 8000cc6:	bf1c      	itt	ne
 8000cc8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000ccc:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cd0:	f000 b988 	b.w	8000fe4 <__aeabi_idiv0>
 8000cd4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cdc:	f000 f806 	bl	8000cec <__udivmoddi4>
 8000ce0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce8:	b004      	add	sp, #16
 8000cea:	4770      	bx	lr

08000cec <__udivmoddi4>:
 8000cec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cf0:	9d08      	ldr	r5, [sp, #32]
 8000cf2:	468e      	mov	lr, r1
 8000cf4:	4604      	mov	r4, r0
 8000cf6:	4688      	mov	r8, r1
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d14a      	bne.n	8000d92 <__udivmoddi4+0xa6>
 8000cfc:	428a      	cmp	r2, r1
 8000cfe:	4617      	mov	r7, r2
 8000d00:	d962      	bls.n	8000dc8 <__udivmoddi4+0xdc>
 8000d02:	fab2 f682 	clz	r6, r2
 8000d06:	b14e      	cbz	r6, 8000d1c <__udivmoddi4+0x30>
 8000d08:	f1c6 0320 	rsb	r3, r6, #32
 8000d0c:	fa01 f806 	lsl.w	r8, r1, r6
 8000d10:	fa20 f303 	lsr.w	r3, r0, r3
 8000d14:	40b7      	lsls	r7, r6
 8000d16:	ea43 0808 	orr.w	r8, r3, r8
 8000d1a:	40b4      	lsls	r4, r6
 8000d1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d20:	fa1f fc87 	uxth.w	ip, r7
 8000d24:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d28:	0c23      	lsrs	r3, r4, #16
 8000d2a:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d2e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d32:	fb01 f20c 	mul.w	r2, r1, ip
 8000d36:	429a      	cmp	r2, r3
 8000d38:	d909      	bls.n	8000d4e <__udivmoddi4+0x62>
 8000d3a:	18fb      	adds	r3, r7, r3
 8000d3c:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000d40:	f080 80ea 	bcs.w	8000f18 <__udivmoddi4+0x22c>
 8000d44:	429a      	cmp	r2, r3
 8000d46:	f240 80e7 	bls.w	8000f18 <__udivmoddi4+0x22c>
 8000d4a:	3902      	subs	r1, #2
 8000d4c:	443b      	add	r3, r7
 8000d4e:	1a9a      	subs	r2, r3, r2
 8000d50:	b2a3      	uxth	r3, r4
 8000d52:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d56:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d5a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d5e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d62:	459c      	cmp	ip, r3
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0x8e>
 8000d66:	18fb      	adds	r3, r7, r3
 8000d68:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000d6c:	f080 80d6 	bcs.w	8000f1c <__udivmoddi4+0x230>
 8000d70:	459c      	cmp	ip, r3
 8000d72:	f240 80d3 	bls.w	8000f1c <__udivmoddi4+0x230>
 8000d76:	443b      	add	r3, r7
 8000d78:	3802      	subs	r0, #2
 8000d7a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d7e:	eba3 030c 	sub.w	r3, r3, ip
 8000d82:	2100      	movs	r1, #0
 8000d84:	b11d      	cbz	r5, 8000d8e <__udivmoddi4+0xa2>
 8000d86:	40f3      	lsrs	r3, r6
 8000d88:	2200      	movs	r2, #0
 8000d8a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d905      	bls.n	8000da2 <__udivmoddi4+0xb6>
 8000d96:	b10d      	cbz	r5, 8000d9c <__udivmoddi4+0xb0>
 8000d98:	e9c5 0100 	strd	r0, r1, [r5]
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	4608      	mov	r0, r1
 8000da0:	e7f5      	b.n	8000d8e <__udivmoddi4+0xa2>
 8000da2:	fab3 f183 	clz	r1, r3
 8000da6:	2900      	cmp	r1, #0
 8000da8:	d146      	bne.n	8000e38 <__udivmoddi4+0x14c>
 8000daa:	4573      	cmp	r3, lr
 8000dac:	d302      	bcc.n	8000db4 <__udivmoddi4+0xc8>
 8000dae:	4282      	cmp	r2, r0
 8000db0:	f200 8105 	bhi.w	8000fbe <__udivmoddi4+0x2d2>
 8000db4:	1a84      	subs	r4, r0, r2
 8000db6:	eb6e 0203 	sbc.w	r2, lr, r3
 8000dba:	2001      	movs	r0, #1
 8000dbc:	4690      	mov	r8, r2
 8000dbe:	2d00      	cmp	r5, #0
 8000dc0:	d0e5      	beq.n	8000d8e <__udivmoddi4+0xa2>
 8000dc2:	e9c5 4800 	strd	r4, r8, [r5]
 8000dc6:	e7e2      	b.n	8000d8e <__udivmoddi4+0xa2>
 8000dc8:	2a00      	cmp	r2, #0
 8000dca:	f000 8090 	beq.w	8000eee <__udivmoddi4+0x202>
 8000dce:	fab2 f682 	clz	r6, r2
 8000dd2:	2e00      	cmp	r6, #0
 8000dd4:	f040 80a4 	bne.w	8000f20 <__udivmoddi4+0x234>
 8000dd8:	1a8a      	subs	r2, r1, r2
 8000dda:	0c03      	lsrs	r3, r0, #16
 8000ddc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000de0:	b280      	uxth	r0, r0
 8000de2:	b2bc      	uxth	r4, r7
 8000de4:	2101      	movs	r1, #1
 8000de6:	fbb2 fcfe 	udiv	ip, r2, lr
 8000dea:	fb0e 221c 	mls	r2, lr, ip, r2
 8000dee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000df2:	fb04 f20c 	mul.w	r2, r4, ip
 8000df6:	429a      	cmp	r2, r3
 8000df8:	d907      	bls.n	8000e0a <__udivmoddi4+0x11e>
 8000dfa:	18fb      	adds	r3, r7, r3
 8000dfc:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000e00:	d202      	bcs.n	8000e08 <__udivmoddi4+0x11c>
 8000e02:	429a      	cmp	r2, r3
 8000e04:	f200 80e0 	bhi.w	8000fc8 <__udivmoddi4+0x2dc>
 8000e08:	46c4      	mov	ip, r8
 8000e0a:	1a9b      	subs	r3, r3, r2
 8000e0c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e10:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e14:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e18:	fb02 f404 	mul.w	r4, r2, r4
 8000e1c:	429c      	cmp	r4, r3
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x144>
 8000e20:	18fb      	adds	r3, r7, r3
 8000e22:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x142>
 8000e28:	429c      	cmp	r4, r3
 8000e2a:	f200 80ca 	bhi.w	8000fc2 <__udivmoddi4+0x2d6>
 8000e2e:	4602      	mov	r2, r0
 8000e30:	1b1b      	subs	r3, r3, r4
 8000e32:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e36:	e7a5      	b.n	8000d84 <__udivmoddi4+0x98>
 8000e38:	f1c1 0620 	rsb	r6, r1, #32
 8000e3c:	408b      	lsls	r3, r1
 8000e3e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e42:	431f      	orrs	r7, r3
 8000e44:	fa0e f401 	lsl.w	r4, lr, r1
 8000e48:	fa20 f306 	lsr.w	r3, r0, r6
 8000e4c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e50:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e54:	4323      	orrs	r3, r4
 8000e56:	fa00 f801 	lsl.w	r8, r0, r1
 8000e5a:	fa1f fc87 	uxth.w	ip, r7
 8000e5e:	fbbe f0f9 	udiv	r0, lr, r9
 8000e62:	0c1c      	lsrs	r4, r3, #16
 8000e64:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e68:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e6c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e70:	45a6      	cmp	lr, r4
 8000e72:	fa02 f201 	lsl.w	r2, r2, r1
 8000e76:	d909      	bls.n	8000e8c <__udivmoddi4+0x1a0>
 8000e78:	193c      	adds	r4, r7, r4
 8000e7a:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000e7e:	f080 809c 	bcs.w	8000fba <__udivmoddi4+0x2ce>
 8000e82:	45a6      	cmp	lr, r4
 8000e84:	f240 8099 	bls.w	8000fba <__udivmoddi4+0x2ce>
 8000e88:	3802      	subs	r0, #2
 8000e8a:	443c      	add	r4, r7
 8000e8c:	eba4 040e 	sub.w	r4, r4, lr
 8000e90:	fa1f fe83 	uxth.w	lr, r3
 8000e94:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e98:	fb09 4413 	mls	r4, r9, r3, r4
 8000e9c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ea0:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ea4:	45a4      	cmp	ip, r4
 8000ea6:	d908      	bls.n	8000eba <__udivmoddi4+0x1ce>
 8000ea8:	193c      	adds	r4, r7, r4
 8000eaa:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000eae:	f080 8082 	bcs.w	8000fb6 <__udivmoddi4+0x2ca>
 8000eb2:	45a4      	cmp	ip, r4
 8000eb4:	d97f      	bls.n	8000fb6 <__udivmoddi4+0x2ca>
 8000eb6:	3b02      	subs	r3, #2
 8000eb8:	443c      	add	r4, r7
 8000eba:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ebe:	eba4 040c 	sub.w	r4, r4, ip
 8000ec2:	fba0 ec02 	umull	lr, ip, r0, r2
 8000ec6:	4564      	cmp	r4, ip
 8000ec8:	4673      	mov	r3, lr
 8000eca:	46e1      	mov	r9, ip
 8000ecc:	d362      	bcc.n	8000f94 <__udivmoddi4+0x2a8>
 8000ece:	d05f      	beq.n	8000f90 <__udivmoddi4+0x2a4>
 8000ed0:	b15d      	cbz	r5, 8000eea <__udivmoddi4+0x1fe>
 8000ed2:	ebb8 0203 	subs.w	r2, r8, r3
 8000ed6:	eb64 0409 	sbc.w	r4, r4, r9
 8000eda:	fa04 f606 	lsl.w	r6, r4, r6
 8000ede:	fa22 f301 	lsr.w	r3, r2, r1
 8000ee2:	431e      	orrs	r6, r3
 8000ee4:	40cc      	lsrs	r4, r1
 8000ee6:	e9c5 6400 	strd	r6, r4, [r5]
 8000eea:	2100      	movs	r1, #0
 8000eec:	e74f      	b.n	8000d8e <__udivmoddi4+0xa2>
 8000eee:	fbb1 fcf2 	udiv	ip, r1, r2
 8000ef2:	0c01      	lsrs	r1, r0, #16
 8000ef4:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ef8:	b280      	uxth	r0, r0
 8000efa:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000efe:	463b      	mov	r3, r7
 8000f00:	4638      	mov	r0, r7
 8000f02:	463c      	mov	r4, r7
 8000f04:	46b8      	mov	r8, r7
 8000f06:	46be      	mov	lr, r7
 8000f08:	2620      	movs	r6, #32
 8000f0a:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f0e:	eba2 0208 	sub.w	r2, r2, r8
 8000f12:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f16:	e766      	b.n	8000de6 <__udivmoddi4+0xfa>
 8000f18:	4601      	mov	r1, r0
 8000f1a:	e718      	b.n	8000d4e <__udivmoddi4+0x62>
 8000f1c:	4610      	mov	r0, r2
 8000f1e:	e72c      	b.n	8000d7a <__udivmoddi4+0x8e>
 8000f20:	f1c6 0220 	rsb	r2, r6, #32
 8000f24:	fa2e f302 	lsr.w	r3, lr, r2
 8000f28:	40b7      	lsls	r7, r6
 8000f2a:	40b1      	lsls	r1, r6
 8000f2c:	fa20 f202 	lsr.w	r2, r0, r2
 8000f30:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f34:	430a      	orrs	r2, r1
 8000f36:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f3a:	b2bc      	uxth	r4, r7
 8000f3c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f40:	0c11      	lsrs	r1, r2, #16
 8000f42:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f46:	fb08 f904 	mul.w	r9, r8, r4
 8000f4a:	40b0      	lsls	r0, r6
 8000f4c:	4589      	cmp	r9, r1
 8000f4e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f52:	b280      	uxth	r0, r0
 8000f54:	d93e      	bls.n	8000fd4 <__udivmoddi4+0x2e8>
 8000f56:	1879      	adds	r1, r7, r1
 8000f58:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000f5c:	d201      	bcs.n	8000f62 <__udivmoddi4+0x276>
 8000f5e:	4589      	cmp	r9, r1
 8000f60:	d81f      	bhi.n	8000fa2 <__udivmoddi4+0x2b6>
 8000f62:	eba1 0109 	sub.w	r1, r1, r9
 8000f66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f6a:	fb09 f804 	mul.w	r8, r9, r4
 8000f6e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f72:	b292      	uxth	r2, r2
 8000f74:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f78:	4542      	cmp	r2, r8
 8000f7a:	d229      	bcs.n	8000fd0 <__udivmoddi4+0x2e4>
 8000f7c:	18ba      	adds	r2, r7, r2
 8000f7e:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000f82:	d2c4      	bcs.n	8000f0e <__udivmoddi4+0x222>
 8000f84:	4542      	cmp	r2, r8
 8000f86:	d2c2      	bcs.n	8000f0e <__udivmoddi4+0x222>
 8000f88:	f1a9 0102 	sub.w	r1, r9, #2
 8000f8c:	443a      	add	r2, r7
 8000f8e:	e7be      	b.n	8000f0e <__udivmoddi4+0x222>
 8000f90:	45f0      	cmp	r8, lr
 8000f92:	d29d      	bcs.n	8000ed0 <__udivmoddi4+0x1e4>
 8000f94:	ebbe 0302 	subs.w	r3, lr, r2
 8000f98:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f9c:	3801      	subs	r0, #1
 8000f9e:	46e1      	mov	r9, ip
 8000fa0:	e796      	b.n	8000ed0 <__udivmoddi4+0x1e4>
 8000fa2:	eba7 0909 	sub.w	r9, r7, r9
 8000fa6:	4449      	add	r1, r9
 8000fa8:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fac:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fb0:	fb09 f804 	mul.w	r8, r9, r4
 8000fb4:	e7db      	b.n	8000f6e <__udivmoddi4+0x282>
 8000fb6:	4673      	mov	r3, lr
 8000fb8:	e77f      	b.n	8000eba <__udivmoddi4+0x1ce>
 8000fba:	4650      	mov	r0, sl
 8000fbc:	e766      	b.n	8000e8c <__udivmoddi4+0x1a0>
 8000fbe:	4608      	mov	r0, r1
 8000fc0:	e6fd      	b.n	8000dbe <__udivmoddi4+0xd2>
 8000fc2:	443b      	add	r3, r7
 8000fc4:	3a02      	subs	r2, #2
 8000fc6:	e733      	b.n	8000e30 <__udivmoddi4+0x144>
 8000fc8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fcc:	443b      	add	r3, r7
 8000fce:	e71c      	b.n	8000e0a <__udivmoddi4+0x11e>
 8000fd0:	4649      	mov	r1, r9
 8000fd2:	e79c      	b.n	8000f0e <__udivmoddi4+0x222>
 8000fd4:	eba1 0109 	sub.w	r1, r1, r9
 8000fd8:	46c4      	mov	ip, r8
 8000fda:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fde:	fb09 f804 	mul.w	r8, r9, r4
 8000fe2:	e7c4      	b.n	8000f6e <__udivmoddi4+0x282>

08000fe4 <__aeabi_idiv0>:
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop

08000fe8 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b08a      	sub	sp, #40	@ 0x28
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8000ff4:	f007 fec6 	bl	8008d84 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8000ff8:	4b5a      	ldr	r3, [pc, #360]	@ (8001164 <pvPortMallocMicroROS+0x17c>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d101      	bne.n	8001004 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8001000:	f000 f986 	bl	8001310 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001004:	4b58      	ldr	r3, [pc, #352]	@ (8001168 <pvPortMallocMicroROS+0x180>)
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	4013      	ands	r3, r2
 800100c:	2b00      	cmp	r3, #0
 800100e:	f040 8090 	bne.w	8001132 <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d01e      	beq.n	8001056 <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8001018:	2208      	movs	r2, #8
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4413      	add	r3, r2
 800101e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	f003 0307 	and.w	r3, r3, #7
 8001026:	2b00      	cmp	r3, #0
 8001028:	d015      	beq.n	8001056 <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	f023 0307 	bic.w	r3, r3, #7
 8001030:	3308      	adds	r3, #8
 8001032:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	f003 0307 	and.w	r3, r3, #7
 800103a:	2b00      	cmp	r3, #0
 800103c:	d00b      	beq.n	8001056 <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800103e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001042:	f383 8811 	msr	BASEPRI, r3
 8001046:	f3bf 8f6f 	isb	sy
 800104a:	f3bf 8f4f 	dsb	sy
 800104e:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001050:	bf00      	nop
 8001052:	bf00      	nop
 8001054:	e7fd      	b.n	8001052 <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d06a      	beq.n	8001132 <pvPortMallocMicroROS+0x14a>
 800105c:	4b43      	ldr	r3, [pc, #268]	@ (800116c <pvPortMallocMicroROS+0x184>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	687a      	ldr	r2, [r7, #4]
 8001062:	429a      	cmp	r2, r3
 8001064:	d865      	bhi.n	8001132 <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8001066:	4b42      	ldr	r3, [pc, #264]	@ (8001170 <pvPortMallocMicroROS+0x188>)
 8001068:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800106a:	4b41      	ldr	r3, [pc, #260]	@ (8001170 <pvPortMallocMicroROS+0x188>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001070:	e004      	b.n	800107c <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 8001072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001074:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8001076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800107c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	687a      	ldr	r2, [r7, #4]
 8001082:	429a      	cmp	r2, r3
 8001084:	d903      	bls.n	800108e <pvPortMallocMicroROS+0xa6>
 8001086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d1f1      	bne.n	8001072 <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800108e:	4b35      	ldr	r3, [pc, #212]	@ (8001164 <pvPortMallocMicroROS+0x17c>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001094:	429a      	cmp	r2, r3
 8001096:	d04c      	beq.n	8001132 <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001098:	6a3b      	ldr	r3, [r7, #32]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	2208      	movs	r2, #8
 800109e:	4413      	add	r3, r2
 80010a0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80010a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	6a3b      	ldr	r3, [r7, #32]
 80010a8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80010aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010ac:	685a      	ldr	r2, [r3, #4]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	1ad2      	subs	r2, r2, r3
 80010b2:	2308      	movs	r3, #8
 80010b4:	005b      	lsls	r3, r3, #1
 80010b6:	429a      	cmp	r2, r3
 80010b8:	d920      	bls.n	80010fc <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80010ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	4413      	add	r3, r2
 80010c0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80010c2:	69bb      	ldr	r3, [r7, #24]
 80010c4:	f003 0307 	and.w	r3, r3, #7
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d00b      	beq.n	80010e4 <pvPortMallocMicroROS+0xfc>
	__asm volatile
 80010cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80010d0:	f383 8811 	msr	BASEPRI, r3
 80010d4:	f3bf 8f6f 	isb	sy
 80010d8:	f3bf 8f4f 	dsb	sy
 80010dc:	613b      	str	r3, [r7, #16]
}
 80010de:	bf00      	nop
 80010e0:	bf00      	nop
 80010e2:	e7fd      	b.n	80010e0 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80010e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010e6:	685a      	ldr	r2, [r3, #4]
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	1ad2      	subs	r2, r2, r3
 80010ec:	69bb      	ldr	r3, [r7, #24]
 80010ee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80010f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010f2:	687a      	ldr	r2, [r7, #4]
 80010f4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80010f6:	69b8      	ldr	r0, [r7, #24]
 80010f8:	f000 f96c 	bl	80013d4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80010fc:	4b1b      	ldr	r3, [pc, #108]	@ (800116c <pvPortMallocMicroROS+0x184>)
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	1ad3      	subs	r3, r2, r3
 8001106:	4a19      	ldr	r2, [pc, #100]	@ (800116c <pvPortMallocMicroROS+0x184>)
 8001108:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800110a:	4b18      	ldr	r3, [pc, #96]	@ (800116c <pvPortMallocMicroROS+0x184>)
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	4b19      	ldr	r3, [pc, #100]	@ (8001174 <pvPortMallocMicroROS+0x18c>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	429a      	cmp	r2, r3
 8001114:	d203      	bcs.n	800111e <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001116:	4b15      	ldr	r3, [pc, #84]	@ (800116c <pvPortMallocMicroROS+0x184>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4a16      	ldr	r2, [pc, #88]	@ (8001174 <pvPortMallocMicroROS+0x18c>)
 800111c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800111e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001120:	685a      	ldr	r2, [r3, #4]
 8001122:	4b11      	ldr	r3, [pc, #68]	@ (8001168 <pvPortMallocMicroROS+0x180>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	431a      	orrs	r2, r3
 8001128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800112a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800112c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800112e:	2200      	movs	r2, #0
 8001130:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8001132:	f007 fe35 	bl	8008da0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	f003 0307 	and.w	r3, r3, #7
 800113c:	2b00      	cmp	r3, #0
 800113e:	d00b      	beq.n	8001158 <pvPortMallocMicroROS+0x170>
	__asm volatile
 8001140:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001144:	f383 8811 	msr	BASEPRI, r3
 8001148:	f3bf 8f6f 	isb	sy
 800114c:	f3bf 8f4f 	dsb	sy
 8001150:	60fb      	str	r3, [r7, #12]
}
 8001152:	bf00      	nop
 8001154:	bf00      	nop
 8001156:	e7fd      	b.n	8001154 <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 8001158:	69fb      	ldr	r3, [r7, #28]
}
 800115a:	4618      	mov	r0, r3
 800115c:	3728      	adds	r7, #40	@ 0x28
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	2000a8d4 	.word	0x2000a8d4
 8001168:	2000a8e0 	.word	0x2000a8e0
 800116c:	2000a8d8 	.word	0x2000a8d8
 8001170:	2000a8cc 	.word	0x2000a8cc
 8001174:	2000a8dc 	.word	0x2000a8dc

08001178 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b086      	sub	sp, #24
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d04a      	beq.n	8001220 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800118a:	2308      	movs	r3, #8
 800118c:	425b      	negs	r3, r3
 800118e:	697a      	ldr	r2, [r7, #20]
 8001190:	4413      	add	r3, r2
 8001192:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	685a      	ldr	r2, [r3, #4]
 800119c:	4b22      	ldr	r3, [pc, #136]	@ (8001228 <vPortFreeMicroROS+0xb0>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4013      	ands	r3, r2
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d10b      	bne.n	80011be <vPortFreeMicroROS+0x46>
	__asm volatile
 80011a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80011aa:	f383 8811 	msr	BASEPRI, r3
 80011ae:	f3bf 8f6f 	isb	sy
 80011b2:	f3bf 8f4f 	dsb	sy
 80011b6:	60fb      	str	r3, [r7, #12]
}
 80011b8:	bf00      	nop
 80011ba:	bf00      	nop
 80011bc:	e7fd      	b.n	80011ba <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d00b      	beq.n	80011de <vPortFreeMicroROS+0x66>
	__asm volatile
 80011c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80011ca:	f383 8811 	msr	BASEPRI, r3
 80011ce:	f3bf 8f6f 	isb	sy
 80011d2:	f3bf 8f4f 	dsb	sy
 80011d6:	60bb      	str	r3, [r7, #8]
}
 80011d8:	bf00      	nop
 80011da:	bf00      	nop
 80011dc:	e7fd      	b.n	80011da <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	685a      	ldr	r2, [r3, #4]
 80011e2:	4b11      	ldr	r3, [pc, #68]	@ (8001228 <vPortFreeMicroROS+0xb0>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4013      	ands	r3, r2
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d019      	beq.n	8001220 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80011ec:	693b      	ldr	r3, [r7, #16]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d115      	bne.n	8001220 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	685a      	ldr	r2, [r3, #4]
 80011f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001228 <vPortFreeMicroROS+0xb0>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	43db      	mvns	r3, r3
 80011fe:	401a      	ands	r2, r3
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8001204:	f007 fdbe 	bl	8008d84 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	685a      	ldr	r2, [r3, #4]
 800120c:	4b07      	ldr	r3, [pc, #28]	@ (800122c <vPortFreeMicroROS+0xb4>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4413      	add	r3, r2
 8001212:	4a06      	ldr	r2, [pc, #24]	@ (800122c <vPortFreeMicroROS+0xb4>)
 8001214:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001216:	6938      	ldr	r0, [r7, #16]
 8001218:	f000 f8dc 	bl	80013d4 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800121c:	f007 fdc0 	bl	8008da0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8001220:	bf00      	nop
 8001222:	3718      	adds	r7, #24
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	2000a8e0 	.word	0x2000a8e0
 800122c:	2000a8d8 	.word	0x2000a8d8

08001230 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8001230:	b480      	push	{r7}
 8001232:	b087      	sub	sp, #28
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 800123c:	2308      	movs	r3, #8
 800123e:	425b      	negs	r3, r3
 8001240:	697a      	ldr	r2, [r7, #20]
 8001242:	4413      	add	r3, r2
 8001244:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	685a      	ldr	r2, [r3, #4]
 800124e:	4b06      	ldr	r3, [pc, #24]	@ (8001268 <getBlockSize+0x38>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	43db      	mvns	r3, r3
 8001254:	4013      	ands	r3, r2
 8001256:	60fb      	str	r3, [r7, #12]

	return count;
 8001258:	68fb      	ldr	r3, [r7, #12]
}
 800125a:	4618      	mov	r0, r3
 800125c:	371c      	adds	r7, #28
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	2000a8e0 	.word	0x2000a8e0

0800126c <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001276:	f007 fd85 	bl	8008d84 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 800127a:	6838      	ldr	r0, [r7, #0]
 800127c:	f7ff feb4 	bl	8000fe8 <pvPortMallocMicroROS>
 8001280:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8001282:	68bb      	ldr	r3, [r7, #8]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d017      	beq.n	80012b8 <pvPortReallocMicroROS+0x4c>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d014      	beq.n	80012b8 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	f7ff ffce 	bl	8001230 <getBlockSize>
 8001294:	4603      	mov	r3, r0
 8001296:	2208      	movs	r2, #8
 8001298:	1a9b      	subs	r3, r3, r2
 800129a:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 800129c:	683a      	ldr	r2, [r7, #0]
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	429a      	cmp	r2, r3
 80012a2:	d201      	bcs.n	80012a8 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 80012a8:	68fa      	ldr	r2, [r7, #12]
 80012aa:	6879      	ldr	r1, [r7, #4]
 80012ac:	68b8      	ldr	r0, [r7, #8]
 80012ae:	f01c f984 	bl	801d5ba <memcpy>

		vPortFreeMicroROS(pv);
 80012b2:	6878      	ldr	r0, [r7, #4]
 80012b4:	f7ff ff60 	bl	8001178 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 80012b8:	f007 fd72 	bl	8008da0 <xTaskResumeAll>

	return newmem;
 80012bc:	68bb      	ldr	r3, [r7, #8]
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3710      	adds	r7, #16
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b086      	sub	sp, #24
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
 80012ce:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 80012d0:	f007 fd58 	bl	8008d84 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	687a      	ldr	r2, [r7, #4]
 80012d8:	fb02 f303 	mul.w	r3, r2, r3
 80012dc:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 80012de:	6978      	ldr	r0, [r7, #20]
 80012e0:	f7ff fe82 	bl	8000fe8 <pvPortMallocMicroROS>
 80012e4:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	613b      	str	r3, [r7, #16]

  	while(count--)
 80012ea:	e004      	b.n	80012f6 <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	1c5a      	adds	r2, r3, #1
 80012f0:	613a      	str	r2, [r7, #16]
 80012f2:	2200      	movs	r2, #0
 80012f4:	701a      	strb	r2, [r3, #0]
  	while(count--)
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	1e5a      	subs	r2, r3, #1
 80012fa:	617a      	str	r2, [r7, #20]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d1f5      	bne.n	80012ec <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8001300:	f007 fd4e 	bl	8008da0 <xTaskResumeAll>
  	return mem;
 8001304:	68fb      	ldr	r3, [r7, #12]
}
 8001306:	4618      	mov	r0, r3
 8001308:	3718      	adds	r7, #24
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
	...

08001310 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8001310:	b480      	push	{r7}
 8001312:	b085      	sub	sp, #20
 8001314:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001316:	f247 5330 	movw	r3, #30000	@ 0x7530
 800131a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800131c:	4b27      	ldr	r3, [pc, #156]	@ (80013bc <prvHeapInit+0xac>)
 800131e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	f003 0307 	and.w	r3, r3, #7
 8001326:	2b00      	cmp	r3, #0
 8001328:	d00c      	beq.n	8001344 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	3307      	adds	r3, #7
 800132e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	f023 0307 	bic.w	r3, r3, #7
 8001336:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001338:	68ba      	ldr	r2, [r7, #8]
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	4a1f      	ldr	r2, [pc, #124]	@ (80013bc <prvHeapInit+0xac>)
 8001340:	4413      	add	r3, r2
 8001342:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001348:	4a1d      	ldr	r2, [pc, #116]	@ (80013c0 <prvHeapInit+0xb0>)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800134e:	4b1c      	ldr	r3, [pc, #112]	@ (80013c0 <prvHeapInit+0xb0>)
 8001350:	2200      	movs	r2, #0
 8001352:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	68ba      	ldr	r2, [r7, #8]
 8001358:	4413      	add	r3, r2
 800135a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800135c:	2208      	movs	r2, #8
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	1a9b      	subs	r3, r3, r2
 8001362:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	f023 0307 	bic.w	r3, r3, #7
 800136a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	4a15      	ldr	r2, [pc, #84]	@ (80013c4 <prvHeapInit+0xb4>)
 8001370:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8001372:	4b14      	ldr	r3, [pc, #80]	@ (80013c4 <prvHeapInit+0xb4>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	2200      	movs	r2, #0
 8001378:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800137a:	4b12      	ldr	r3, [pc, #72]	@ (80013c4 <prvHeapInit+0xb4>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	2200      	movs	r2, #0
 8001380:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	68fa      	ldr	r2, [r7, #12]
 800138a:	1ad2      	subs	r2, r2, r3
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001390:	4b0c      	ldr	r3, [pc, #48]	@ (80013c4 <prvHeapInit+0xb4>)
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	4a0a      	ldr	r2, [pc, #40]	@ (80013c8 <prvHeapInit+0xb8>)
 800139e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	4a09      	ldr	r2, [pc, #36]	@ (80013cc <prvHeapInit+0xbc>)
 80013a6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80013a8:	4b09      	ldr	r3, [pc, #36]	@ (80013d0 <prvHeapInit+0xc0>)
 80013aa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80013ae:	601a      	str	r2, [r3, #0]
}
 80013b0:	bf00      	nop
 80013b2:	3714      	adds	r7, #20
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr
 80013bc:	2000339c 	.word	0x2000339c
 80013c0:	2000a8cc 	.word	0x2000a8cc
 80013c4:	2000a8d4 	.word	0x2000a8d4
 80013c8:	2000a8dc 	.word	0x2000a8dc
 80013cc:	2000a8d8 	.word	0x2000a8d8
 80013d0:	2000a8e0 	.word	0x2000a8e0

080013d4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80013d4:	b480      	push	{r7}
 80013d6:	b085      	sub	sp, #20
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80013dc:	4b28      	ldr	r3, [pc, #160]	@ (8001480 <prvInsertBlockIntoFreeList+0xac>)
 80013de:	60fb      	str	r3, [r7, #12]
 80013e0:	e002      	b.n	80013e8 <prvInsertBlockIntoFreeList+0x14>
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	60fb      	str	r3, [r7, #12]
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	687a      	ldr	r2, [r7, #4]
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d8f7      	bhi.n	80013e2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	68ba      	ldr	r2, [r7, #8]
 80013fc:	4413      	add	r3, r2
 80013fe:	687a      	ldr	r2, [r7, #4]
 8001400:	429a      	cmp	r2, r3
 8001402:	d108      	bne.n	8001416 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	685a      	ldr	r2, [r3, #4]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	441a      	add	r2, r3
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	68ba      	ldr	r2, [r7, #8]
 8001420:	441a      	add	r2, r3
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	429a      	cmp	r2, r3
 8001428:	d118      	bne.n	800145c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	4b15      	ldr	r3, [pc, #84]	@ (8001484 <prvInsertBlockIntoFreeList+0xb0>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	429a      	cmp	r2, r3
 8001434:	d00d      	beq.n	8001452 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	685a      	ldr	r2, [r3, #4]
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	441a      	add	r2, r3
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	601a      	str	r2, [r3, #0]
 8001450:	e008      	b.n	8001464 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001452:	4b0c      	ldr	r3, [pc, #48]	@ (8001484 <prvInsertBlockIntoFreeList+0xb0>)
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	601a      	str	r2, [r3, #0]
 800145a:	e003      	b.n	8001464 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001464:	68fa      	ldr	r2, [r7, #12]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	429a      	cmp	r2, r3
 800146a:	d002      	beq.n	8001472 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	687a      	ldr	r2, [r7, #4]
 8001470:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001472:	bf00      	nop
 8001474:	3714      	adds	r7, #20
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	2000a8cc 	.word	0x2000a8cc
 8001484:	2000a8d4 	.word	0x2000a8d4

08001488 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800148e:	2300      	movs	r3, #0
 8001490:	607b      	str	r3, [r7, #4]
 8001492:	4b10      	ldr	r3, [pc, #64]	@ (80014d4 <MX_DMA_Init+0x4c>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001496:	4a0f      	ldr	r2, [pc, #60]	@ (80014d4 <MX_DMA_Init+0x4c>)
 8001498:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800149c:	6313      	str	r3, [r2, #48]	@ 0x30
 800149e:	4b0d      	ldr	r3, [pc, #52]	@ (80014d4 <MX_DMA_Init+0x4c>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014a6:	607b      	str	r3, [r7, #4]
 80014a8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80014aa:	2200      	movs	r2, #0
 80014ac:	2105      	movs	r1, #5
 80014ae:	203a      	movs	r0, #58	@ 0x3a
 80014b0:	f002 fc9a 	bl	8003de8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80014b4:	203a      	movs	r0, #58	@ 0x3a
 80014b6:	f002 fcb3 	bl	8003e20 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 80014ba:	2200      	movs	r2, #0
 80014bc:	2105      	movs	r1, #5
 80014be:	2046      	movs	r0, #70	@ 0x46
 80014c0:	f002 fc92 	bl	8003de8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80014c4:	2046      	movs	r0, #70	@ 0x46
 80014c6:	f002 fcab 	bl	8003e20 <HAL_NVIC_EnableIRQ>

}
 80014ca:	bf00      	nop
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	40023800 	.word	0x40023800

080014d8 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80014e6:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 80014e8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80014ec:	4904      	ldr	r1, [pc, #16]	@ (8001500 <cubemx_transport_open+0x28>)
 80014ee:	68f8      	ldr	r0, [r7, #12]
 80014f0:	f005 f924 	bl	800673c <HAL_UART_Receive_DMA>
    return true;
 80014f4:	2301      	movs	r3, #1
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3710      	adds	r7, #16
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	2000a8e4 	.word	0x2000a8e4

08001504 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8001512:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8001514:	68f8      	ldr	r0, [r7, #12]
 8001516:	f005 f936 	bl	8006786 <HAL_UART_DMAStop>
    return true;
 800151a:	2301      	movs	r3, #1
}
 800151c:	4618      	mov	r0, r3
 800151e:	3710      	adds	r7, #16
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}

08001524 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8001524:	b580      	push	{r7, lr}
 8001526:	b086      	sub	sp, #24
 8001528:	af00      	add	r7, sp, #0
 800152a:	60f8      	str	r0, [r7, #12]
 800152c:	60b9      	str	r1, [r7, #8]
 800152e:	607a      	str	r2, [r7, #4]
 8001530:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8001538:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001540:	b2db      	uxtb	r3, r3
 8001542:	2b20      	cmp	r3, #32
 8001544:	d11c      	bne.n	8001580 <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	b29b      	uxth	r3, r3
 800154a:	461a      	mov	r2, r3
 800154c:	68b9      	ldr	r1, [r7, #8]
 800154e:	6978      	ldr	r0, [r7, #20]
 8001550:	f005 f878 	bl	8006644 <HAL_UART_Transmit_DMA>
 8001554:	4603      	mov	r3, r0
 8001556:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001558:	e002      	b.n	8001560 <cubemx_transport_write+0x3c>
            osDelay(1);
 800155a:	2001      	movs	r0, #1
 800155c:	f006 fbd0 	bl	8007d00 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001560:	7cfb      	ldrb	r3, [r7, #19]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d105      	bne.n	8001572 <cubemx_transport_write+0x4e>
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800156c:	b2db      	uxtb	r3, r3
 800156e:	2b20      	cmp	r3, #32
 8001570:	d1f3      	bne.n	800155a <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 8001572:	7cfb      	ldrb	r3, [r7, #19]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d101      	bne.n	800157c <cubemx_transport_write+0x58>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	e002      	b.n	8001582 <cubemx_transport_write+0x5e>
 800157c:	2300      	movs	r3, #0
 800157e:	e000      	b.n	8001582 <cubemx_transport_write+0x5e>
    }else{
        return 0;
 8001580:	2300      	movs	r3, #0
    }
}
 8001582:	4618      	mov	r0, r3
 8001584:	3718      	adds	r7, #24
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
	...

0800158c <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 800158c:	b580      	push	{r7, lr}
 800158e:	b088      	sub	sp, #32
 8001590:	af00      	add	r7, sp, #0
 8001592:	60f8      	str	r0, [r7, #12]
 8001594:	60b9      	str	r1, [r7, #8]
 8001596:	607a      	str	r2, [r7, #4]
 8001598:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80015a0:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 80015a2:	2300      	movs	r3, #0
 80015a4:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015a6:	b672      	cpsid	i
}
 80015a8:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 80015b6:	4a1c      	ldr	r2, [pc, #112]	@ (8001628 <cubemx_transport_read+0x9c>)
 80015b8:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80015ba:	b662      	cpsie	i
}
 80015bc:	bf00      	nop
        __enable_irq();
        ms_used++;
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	3301      	adds	r3, #1
 80015c2:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 80015c4:	2001      	movs	r0, #1
 80015c6:	f006 fb9b 	bl	8007d00 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 80015ca:	4b18      	ldr	r3, [pc, #96]	@ (800162c <cubemx_transport_read+0xa0>)
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	4b16      	ldr	r3, [pc, #88]	@ (8001628 <cubemx_transport_read+0x9c>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	429a      	cmp	r2, r3
 80015d4:	d103      	bne.n	80015de <cubemx_transport_read+0x52>
 80015d6:	69fa      	ldr	r2, [r7, #28]
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	429a      	cmp	r2, r3
 80015dc:	dbe3      	blt.n	80015a6 <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 80015de:	2300      	movs	r3, #0
 80015e0:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80015e2:	e011      	b.n	8001608 <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 80015e4:	4b11      	ldr	r3, [pc, #68]	@ (800162c <cubemx_transport_read+0xa0>)
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	68b9      	ldr	r1, [r7, #8]
 80015ea:	69bb      	ldr	r3, [r7, #24]
 80015ec:	440b      	add	r3, r1
 80015ee:	4910      	ldr	r1, [pc, #64]	@ (8001630 <cubemx_transport_read+0xa4>)
 80015f0:	5c8a      	ldrb	r2, [r1, r2]
 80015f2:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 80015f4:	4b0d      	ldr	r3, [pc, #52]	@ (800162c <cubemx_transport_read+0xa0>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	3301      	adds	r3, #1
 80015fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80015fe:	4a0b      	ldr	r2, [pc, #44]	@ (800162c <cubemx_transport_read+0xa0>)
 8001600:	6013      	str	r3, [r2, #0]
        wrote++;
 8001602:	69bb      	ldr	r3, [r7, #24]
 8001604:	3301      	adds	r3, #1
 8001606:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8001608:	4b08      	ldr	r3, [pc, #32]	@ (800162c <cubemx_transport_read+0xa0>)
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	4b06      	ldr	r3, [pc, #24]	@ (8001628 <cubemx_transport_read+0x9c>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	429a      	cmp	r2, r3
 8001612:	d003      	beq.n	800161c <cubemx_transport_read+0x90>
 8001614:	69ba      	ldr	r2, [r7, #24]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	429a      	cmp	r2, r3
 800161a:	d3e3      	bcc.n	80015e4 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 800161c:	69bb      	ldr	r3, [r7, #24]
}
 800161e:	4618      	mov	r0, r3
 8001620:	3720      	adds	r7, #32
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	2000b0e8 	.word	0x2000b0e8
 800162c:	2000b0e4 	.word	0x2000b0e4
 8001630:	2000a8e4 	.word	0x2000a8e4

08001634 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
extern "C" void MX_FREERTOS_Init(void) {
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001638:	4a04      	ldr	r2, [pc, #16]	@ (800164c <MX_FREERTOS_Init+0x18>)
 800163a:	2100      	movs	r1, #0
 800163c:	4804      	ldr	r0, [pc, #16]	@ (8001650 <MX_FREERTOS_Init+0x1c>)
 800163e:	f006 facd 	bl	8007bdc <osThreadNew>
 8001642:	4603      	mov	r3, r0
 8001644:	4a03      	ldr	r2, [pc, #12]	@ (8001654 <MX_FREERTOS_Init+0x20>)
 8001646:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001648:	bf00      	nop
 800164a:	bd80      	pop	{r7, pc}
 800164c:	0801e708 	.word	0x0801e708
 8001650:	08001659 	.word	0x08001659
 8001654:	2000b0f4 	.word	0x2000b0f4

08001658 <_Z16StartDefaultTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001658:	b5f0      	push	{r4, r5, r6, r7, lr}
 800165a:	f2ad 4d14 	subw	sp, sp, #1044	@ 0x414
 800165e:	af04      	add	r7, sp, #16
 8001660:	f507 6380 	add.w	r3, r7, #1024	@ 0x400
 8001664:	f5a3 7355 	sub.w	r3, r3, #852	@ 0x354
 8001668:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
	// micro-ROS configuration
	  rcl_ret_t rc;
	  HAL_IWDG_Refresh(&hiwdg);
 800166a:	4849      	ldr	r0, [pc, #292]	@ (8001790 <_Z16StartDefaultTaskPv+0x138>)
 800166c:	f003 f9f1 	bl	8004a52 <HAL_IWDG_Refresh>
	  rmw_uros_set_custom_transport(
 8001670:	4b48      	ldr	r3, [pc, #288]	@ (8001794 <_Z16StartDefaultTaskPv+0x13c>)
 8001672:	9301      	str	r3, [sp, #4]
 8001674:	4b48      	ldr	r3, [pc, #288]	@ (8001798 <_Z16StartDefaultTaskPv+0x140>)
 8001676:	9300      	str	r3, [sp, #0]
 8001678:	4b48      	ldr	r3, [pc, #288]	@ (800179c <_Z16StartDefaultTaskPv+0x144>)
 800167a:	4a49      	ldr	r2, [pc, #292]	@ (80017a0 <_Z16StartDefaultTaskPv+0x148>)
 800167c:	4949      	ldr	r1, [pc, #292]	@ (80017a4 <_Z16StartDefaultTaskPv+0x14c>)
 800167e:	2001      	movs	r0, #1
 8001680:	f00b fe86 	bl	800d390 <rmw_uros_set_custom_transport>
	    (void *) &huart1,
	    cubemx_transport_open,
	    cubemx_transport_close,
	    cubemx_transport_write,
	    cubemx_transport_read);
	  HAL_IWDG_Refresh(&hiwdg);
 8001684:	4842      	ldr	r0, [pc, #264]	@ (8001790 <_Z16StartDefaultTaskPv+0x138>)
 8001686:	f003 f9e4 	bl	8004a52 <HAL_IWDG_Refresh>
	  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 800168a:	f507 7376 	add.w	r3, r7, #984	@ 0x3d8
 800168e:	4618      	mov	r0, r3
 8001690:	f00b fdaa 	bl	800d1e8 <rcutils_get_zero_initialized_allocator>
	  freeRTOS_allocator.allocate = microros_allocate;
 8001694:	4b44      	ldr	r3, [pc, #272]	@ (80017a8 <_Z16StartDefaultTaskPv+0x150>)
 8001696:	f8c7 33d8 	str.w	r3, [r7, #984]	@ 0x3d8
	  freeRTOS_allocator.deallocate = microros_deallocate;
 800169a:	4b44      	ldr	r3, [pc, #272]	@ (80017ac <_Z16StartDefaultTaskPv+0x154>)
 800169c:	f8c7 33dc 	str.w	r3, [r7, #988]	@ 0x3dc
	  freeRTOS_allocator.reallocate = microros_reallocate;
 80016a0:	4b43      	ldr	r3, [pc, #268]	@ (80017b0 <_Z16StartDefaultTaskPv+0x158>)
 80016a2:	f8c7 33e0 	str.w	r3, [r7, #992]	@ 0x3e0
	  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 80016a6:	4b43      	ldr	r3, [pc, #268]	@ (80017b4 <_Z16StartDefaultTaskPv+0x15c>)
 80016a8:	f8c7 33e4 	str.w	r3, [r7, #996]	@ 0x3e4

	  if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 80016ac:	f507 7376 	add.w	r3, r7, #984	@ 0x3d8
 80016b0:	4618      	mov	r0, r3
 80016b2:	f00b fdb5 	bl	800d220 <rcutils_set_default_allocator>
 80016b6:	4603      	mov	r3, r0
 80016b8:	f083 0301 	eor.w	r3, r3, #1
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d004      	beq.n	80016cc <_Z16StartDefaultTaskPv+0x74>
	      printf("Error on default allocators (line %d)\n", __LINE__);
 80016c2:	218b      	movs	r1, #139	@ 0x8b
 80016c4:	483c      	ldr	r0, [pc, #240]	@ (80017b8 <_Z16StartDefaultTaskPv+0x160>)
 80016c6:	f01b fe49 	bl	801d35c <iprintf>
 80016ca:	e002      	b.n	80016d2 <_Z16StartDefaultTaskPv+0x7a>
	  } else HAL_IWDG_Refresh(&hiwdg);
 80016cc:	4830      	ldr	r0, [pc, #192]	@ (8001790 <_Z16StartDefaultTaskPv+0x138>)
 80016ce:	f003 f9c0 	bl	8004a52 <HAL_IWDG_Refresh>
	  nereo_interfaces__msg__CommandVelocity cmd_vel_msg;
	  sensor_msgs__msg__Imu imu_data_msg;
	  sensor_msgs__msg__FluidPressure fluid_pressure;
	  sensor_msgs__msg__Temperature water_temperature;

	  allocator = rcl_get_default_allocator();
 80016d2:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80016d6:	4618      	mov	r0, r3
 80016d8:	f00b fd94 	bl	800d204 <rcutils_get_default_allocator>
 80016dc:	f507 6380 	add.w	r3, r7, #1024	@ 0x400
 80016e0:	f5a3 735c 	sub.w	r3, r3, #880	@ 0x370
 80016e4:	f507 7464 	add.w	r4, r7, #912	@ 0x390
 80016e8:	461d      	mov	r5, r3
 80016ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016ee:	682b      	ldr	r3, [r5, #0]
 80016f0:	6023      	str	r3, [r4, #0]

	  //create init_options
	  rc = rclc_support_init(&support, 0, NULL, &allocator);
 80016f2:	f507 7364 	add.w	r3, r7, #912	@ 0x390
 80016f6:	f507 7069 	add.w	r0, r7, #932	@ 0x3a4
 80016fa:	2200      	movs	r2, #0
 80016fc:	2100      	movs	r1, #0
 80016fe:	f00b fc49 	bl	800cf94 <rclc_support_init>
 8001702:	f8c7 03f8 	str.w	r0, [r7, #1016]	@ 0x3f8
	  if (rc != RCL_RET_OK) printf("Error support init.\n");
 8001706:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 800170a:	2b00      	cmp	r3, #0
 800170c:	d003      	beq.n	8001716 <_Z16StartDefaultTaskPv+0xbe>
 800170e:	482b      	ldr	r0, [pc, #172]	@ (80017bc <_Z16StartDefaultTaskPv+0x164>)
 8001710:	f01b fe8c 	bl	801d42c <puts>
 8001714:	e002      	b.n	800171c <_Z16StartDefaultTaskPv+0xc4>
	  else HAL_IWDG_Refresh(&hiwdg);
 8001716:	481e      	ldr	r0, [pc, #120]	@ (8001790 <_Z16StartDefaultTaskPv+0x138>)
 8001718:	f003 f99b 	bl	8004a52 <HAL_IWDG_Refresh>

	  // create node
	  rc = rclc_node_init_default(&node, "fc_node", "", &support);
 800171c:	f507 7369 	add.w	r3, r7, #932	@ 0x3a4
 8001720:	f507 7062 	add.w	r0, r7, #904	@ 0x388
 8001724:	4a26      	ldr	r2, [pc, #152]	@ (80017c0 <_Z16StartDefaultTaskPv+0x168>)
 8001726:	4927      	ldr	r1, [pc, #156]	@ (80017c4 <_Z16StartDefaultTaskPv+0x16c>)
 8001728:	f00b fc7e 	bl	800d028 <rclc_node_init_default>
 800172c:	f8c7 03f8 	str.w	r0, [r7, #1016]	@ 0x3f8
	  if (rc != RCL_RET_OK) printf("Error node init\n");
 8001730:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 8001734:	2b00      	cmp	r3, #0
 8001736:	d003      	beq.n	8001740 <_Z16StartDefaultTaskPv+0xe8>
 8001738:	4823      	ldr	r0, [pc, #140]	@ (80017c8 <_Z16StartDefaultTaskPv+0x170>)
 800173a:	f01b fe77 	bl	801d42c <puts>
 800173e:	e002      	b.n	8001746 <_Z16StartDefaultTaskPv+0xee>
	  else HAL_IWDG_Refresh(&hiwdg);
 8001740:	4813      	ldr	r0, [pc, #76]	@ (8001790 <_Z16StartDefaultTaskPv+0x138>)
 8001742:	f003 f986 	bl	8004a52 <HAL_IWDG_Refresh>

	  executor = rclc_executor_get_zero_initialized_executor();
 8001746:	f507 6380 	add.w	r3, r7, #1024	@ 0x400
 800174a:	f5a3 7484 	sub.w	r4, r3, #264	@ 0x108
 800174e:	463b      	mov	r3, r7
 8001750:	4618      	mov	r0, r3
 8001752:	f00b f98b 	bl	800ca6c <rclc_executor_get_zero_initialized_executor>
 8001756:	f507 6380 	add.w	r3, r7, #1024	@ 0x400
 800175a:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 800175e:	4620      	mov	r0, r4
 8001760:	4619      	mov	r1, r3
 8001762:	2390      	movs	r3, #144	@ 0x90
 8001764:	461a      	mov	r2, r3
 8001766:	f01b ff28 	bl	801d5ba <memcpy>
	  rc = rclc_executor_init(&executor, &support.context, NUMBER_SUBS_TIMS_SRVS, &allocator);
 800176a:	f507 7364 	add.w	r3, r7, #912	@ 0x390
 800176e:	f507 7169 	add.w	r1, r7, #932	@ 0x3a4
 8001772:	f507 703e 	add.w	r0, r7, #760	@ 0x2f8
 8001776:	220a      	movs	r2, #10
 8001778:	f00b f982 	bl	800ca80 <rclc_executor_init>
 800177c:	f8c7 03f8 	str.w	r0, [r7, #1016]	@ 0x3f8
	  if (rc != RCL_RET_OK) printf("Error executor init.\n");
 8001780:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 8001784:	2b00      	cmp	r3, #0
 8001786:	d023      	beq.n	80017d0 <_Z16StartDefaultTaskPv+0x178>
 8001788:	4810      	ldr	r0, [pc, #64]	@ (80017cc <_Z16StartDefaultTaskPv+0x174>)
 800178a:	f01b fe4f 	bl	801d42c <puts>
 800178e:	e022      	b.n	80017d6 <_Z16StartDefaultTaskPv+0x17e>
 8001790:	2000b110 	.word	0x2000b110
 8001794:	0800158d 	.word	0x0800158d
 8001798:	08001525 	.word	0x08001525
 800179c:	08001505 	.word	0x08001505
 80017a0:	080014d9 	.word	0x080014d9
 80017a4:	2000b204 	.word	0x2000b204
 80017a8:	0800225d 	.word	0x0800225d
 80017ac:	080022a1 	.word	0x080022a1
 80017b0:	080022d9 	.word	0x080022d9
 80017b4:	08002345 	.word	0x08002345
 80017b8:	0801e49c 	.word	0x0801e49c
 80017bc:	0801e4c4 	.word	0x0801e4c4
 80017c0:	0801e4d8 	.word	0x0801e4d8
 80017c4:	0801e4dc 	.word	0x0801e4dc
 80017c8:	0801e4e4 	.word	0x0801e4e4
 80017cc:	0801e4f4 	.word	0x0801e4f4
	  else HAL_IWDG_Refresh(&hiwdg);
 80017d0:	48bc      	ldr	r0, [pc, #752]	@ (8001ac4 <_Z16StartDefaultTaskPv+0x46c>)
 80017d2:	f003 f93e 	bl	8004a52 <HAL_IWDG_Refresh>

	  // PUBLISHERS
	  rclc_publisher_init_best_effort(
 80017d6:	f00a f98f 	bl	800baf8 <rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses>
 80017da:	4602      	mov	r2, r0
 80017dc:	f507 7162 	add.w	r1, r7, #904	@ 0x388
 80017e0:	f507 703d 	add.w	r0, r7, #756	@ 0x2f4
 80017e4:	4bb8      	ldr	r3, [pc, #736]	@ (8001ac8 <_Z16StartDefaultTaskPv+0x470>)
 80017e6:	f00b fc5b 	bl	800d0a0 <rclc_publisher_init_best_effort>

	  // SUBSCRIBERS
	  static micro_ros_utilities_memory_conf_t default_conf = {0};

	  // IMU sub
	  rc = rclc_subscription_init_default(
 80017ea:	f00c fc0d 	bl	800e008 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>
 80017ee:	4602      	mov	r2, r0
 80017f0:	f507 7162 	add.w	r1, r7, #904	@ 0x388
 80017f4:	f507 7037 	add.w	r0, r7, #732	@ 0x2dc
 80017f8:	4bb4      	ldr	r3, [pc, #720]	@ (8001acc <_Z16StartDefaultTaskPv+0x474>)
 80017fa:	f00b fcb9 	bl	800d170 <rclc_subscription_init_default>
 80017fe:	f8c7 03f8 	str.w	r0, [r7, #1016]	@ 0x3f8
			  &imu_subscriber,
			  &node,
			  ROSIDL_GET_MSG_TYPE_SUPPORT(sensor_msgs, msg, Imu),
			  "/imu_data");
	  if (rc != RCL_RET_OK) printf("Error imu sub init.\n");
 8001802:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 8001806:	2b00      	cmp	r3, #0
 8001808:	d002      	beq.n	8001810 <_Z16StartDefaultTaskPv+0x1b8>
 800180a:	48b1      	ldr	r0, [pc, #708]	@ (8001ad0 <_Z16StartDefaultTaskPv+0x478>)
 800180c:	f01b fe0e 	bl	801d42c <puts>
	  // initialize message memory
	  rc = !micro_ros_utilities_create_message_memory(ROSIDL_GET_MSG_TYPE_SUPPORT(sensor_msgs, msg, Imu), &imu_data_msg, default_conf);
 8001810:	f00c fbfa 	bl	800e008 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>
 8001814:	4684      	mov	ip, r0
 8001816:	4caf      	ldr	r4, [pc, #700]	@ (8001ad4 <_Z16StartDefaultTaskPv+0x47c>)
 8001818:	f507 76bc 	add.w	r6, r7, #376	@ 0x178
 800181c:	466d      	mov	r5, sp
 800181e:	f104 0308 	add.w	r3, r4, #8
 8001822:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001824:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001828:	e894 000c 	ldmia.w	r4, {r2, r3}
 800182c:	4631      	mov	r1, r6
 800182e:	4660      	mov	r0, ip
 8001830:	f009 fffc 	bl	800b82c <micro_ros_utilities_create_message_memory>
 8001834:	4603      	mov	r3, r0
 8001836:	f083 0301 	eor.w	r3, r3, #1
 800183a:	b2db      	uxtb	r3, r3
 800183c:	f8c7 33f8 	str.w	r3, [r7, #1016]	@ 0x3f8

	  rc = rclc_executor_add_subscription(
 8001840:	f507 72bc 	add.w	r2, r7, #376	@ 0x178
 8001844:	f507 7137 	add.w	r1, r7, #732	@ 0x2dc
 8001848:	f507 703e 	add.w	r0, r7, #760	@ 0x2f8
 800184c:	2300      	movs	r3, #0
 800184e:	9300      	str	r3, [sp, #0]
 8001850:	4ba1      	ldr	r3, [pc, #644]	@ (8001ad8 <_Z16StartDefaultTaskPv+0x480>)
 8001852:	f00b f981 	bl	800cb58 <rclc_executor_add_subscription>
 8001856:	f8c7 03f8 	str.w	r0, [r7, #1016]	@ 0x3f8
			  &executor, &imu_subscriber,
			  &imu_data_msg, &imu_subscription_callback, ON_NEW_DATA);
	  if (rc != RCL_RET_OK) printf("Error executor add imu sub.\n");
 800185a:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 800185e:	2b00      	cmp	r3, #0
 8001860:	d002      	beq.n	8001868 <_Z16StartDefaultTaskPv+0x210>
 8001862:	489e      	ldr	r0, [pc, #632]	@ (8001adc <_Z16StartDefaultTaskPv+0x484>)
 8001864:	f01b fde2 	bl	801d42c <puts>

	  // CMD Vel sub
	  rc = rclc_subscription_init_default(
 8001868:	f00a f908 	bl	800ba7c <rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity>
 800186c:	4602      	mov	r2, r0
 800186e:	f507 7162 	add.w	r1, r7, #904	@ 0x388
 8001872:	f507 7038 	add.w	r0, r7, #736	@ 0x2e0
 8001876:	4b9a      	ldr	r3, [pc, #616]	@ (8001ae0 <_Z16StartDefaultTaskPv+0x488>)
 8001878:	f00b fc7a 	bl	800d170 <rclc_subscription_init_default>
 800187c:	f8c7 03f8 	str.w	r0, [r7, #1016]	@ 0x3f8
			  &cmd_vel_subscriber,
			  &node,
			  ROSIDL_GET_MSG_TYPE_SUPPORT(nereo_interfaces, msg, CommandVelocity),
			  "/nereo_cmd_vel");
	  if (rc != RCL_RET_OK) printf("Error cmdvel sub init.\n");
 8001880:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 8001884:	2b00      	cmp	r3, #0
 8001886:	d002      	beq.n	800188e <_Z16StartDefaultTaskPv+0x236>
 8001888:	4896      	ldr	r0, [pc, #600]	@ (8001ae4 <_Z16StartDefaultTaskPv+0x48c>)
 800188a:	f01b fdcf 	bl	801d42c <puts>
	  // initialize message memory
	  rc = !micro_ros_utilities_create_message_memory(ROSIDL_GET_MSG_TYPE_SUPPORT(nereo_interfaces, msg, CommandVelocity), &cmd_vel_msg, default_conf);
 800188e:	f00a f8f5 	bl	800ba7c <rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity>
 8001892:	4684      	mov	ip, r0
 8001894:	4c8f      	ldr	r4, [pc, #572]	@ (8001ad4 <_Z16StartDefaultTaskPv+0x47c>)
 8001896:	f507 762f 	add.w	r6, r7, #700	@ 0x2bc
 800189a:	466d      	mov	r5, sp
 800189c:	f104 0308 	add.w	r3, r4, #8
 80018a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018a2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80018a6:	e894 000c 	ldmia.w	r4, {r2, r3}
 80018aa:	4631      	mov	r1, r6
 80018ac:	4660      	mov	r0, ip
 80018ae:	f009 ffbd 	bl	800b82c <micro_ros_utilities_create_message_memory>
 80018b2:	4603      	mov	r3, r0
 80018b4:	f083 0301 	eor.w	r3, r3, #1
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	f8c7 33f8 	str.w	r3, [r7, #1016]	@ 0x3f8

	  rc = rclc_executor_add_subscription(
 80018be:	f507 722f 	add.w	r2, r7, #700	@ 0x2bc
 80018c2:	f507 7138 	add.w	r1, r7, #736	@ 0x2e0
 80018c6:	f507 703e 	add.w	r0, r7, #760	@ 0x2f8
 80018ca:	2300      	movs	r3, #0
 80018cc:	9300      	str	r3, [sp, #0]
 80018ce:	4b86      	ldr	r3, [pc, #536]	@ (8001ae8 <_Z16StartDefaultTaskPv+0x490>)
 80018d0:	f00b f942 	bl	800cb58 <rclc_executor_add_subscription>
 80018d4:	f8c7 03f8 	str.w	r0, [r7, #1016]	@ 0x3f8
			  &executor, &cmd_vel_subscriber,
			  &cmd_vel_msg, &cmd_vel_subscription_callback, ON_NEW_DATA);
	  if (rc != RCL_RET_OK) printf("Error executor add cmdvel sub.\n");
 80018d8:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d002      	beq.n	80018e6 <_Z16StartDefaultTaskPv+0x28e>
 80018e0:	4882      	ldr	r0, [pc, #520]	@ (8001aec <_Z16StartDefaultTaskPv+0x494>)
 80018e2:	f01b fda3 	bl	801d42c <puts>

	  // SERVICES
	  rcl_service_t arm_disarm_srv_server;
	  std_srvs__srv__SetBool_Request set_arm_mode_reqin;
	  std_srvs__srv__SetBool_Response set_arm_mode_resout;
	  rc = rclc_service_init_default(
 80018e6:	f00c fe91 	bl	800e60c <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__SetBool>
 80018ea:	4602      	mov	r2, r0
 80018ec:	f507 7162 	add.w	r1, r7, #904	@ 0x388
 80018f0:	f507 7092 	add.w	r0, r7, #292	@ 0x124
 80018f4:	4b7e      	ldr	r3, [pc, #504]	@ (8001af0 <_Z16StartDefaultTaskPv+0x498>)
 80018f6:	f00b fc07 	bl	800d108 <rclc_service_init_default>
 80018fa:	f8c7 03f8 	str.w	r0, [r7, #1016]	@ 0x3f8
			  &arm_disarm_srv_server, &node,
			  ROSIDL_GET_SRV_TYPE_SUPPORT(std_srvs, srv, SetBool), "/set_rov_arm_mode");
	  if (rc != RCL_RET_OK) printf("Error armmode srv init.\n");
 80018fe:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 8001902:	2b00      	cmp	r3, #0
 8001904:	d002      	beq.n	800190c <_Z16StartDefaultTaskPv+0x2b4>
 8001906:	487b      	ldr	r0, [pc, #492]	@ (8001af4 <_Z16StartDefaultTaskPv+0x49c>)
 8001908:	f01b fd90 	bl	801d42c <puts>
	  rc = rclc_executor_add_service(
 800190c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001910:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8001914:	f507 7192 	add.w	r1, r7, #292	@ 0x124
 8001918:	f507 703e 	add.w	r0, r7, #760	@ 0x2f8
 800191c:	4c76      	ldr	r4, [pc, #472]	@ (8001af8 <_Z16StartDefaultTaskPv+0x4a0>)
 800191e:	9400      	str	r4, [sp, #0]
 8001920:	f00b f94e 	bl	800cbc0 <rclc_executor_add_service>
 8001924:	f8c7 03f8 	str.w	r0, [r7, #1016]	@ 0x3f8
			  &executor, &arm_disarm_srv_server, &set_arm_mode_reqin,
			  &set_arm_mode_resout, &arm_disarm_service_callback);
	  if (rc != RCL_RET_OK) printf("Error exec add armmode srv.\n");
 8001928:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 800192c:	2b00      	cmp	r3, #0
 800192e:	d002      	beq.n	8001936 <_Z16StartDefaultTaskPv+0x2de>
 8001930:	4872      	ldr	r0, [pc, #456]	@ (8001afc <_Z16StartDefaultTaskPv+0x4a4>)
 8001932:	f01b fd7b 	bl	801d42c <puts>

	  rcl_service_t nav_mode_srv_server;
	  nereo_interfaces__srv__SetNavigationMode_Request set_navigation_mode_reqin;
	  nereo_interfaces__srv__SetNavigationMode_Response set_navigation_mode_resout;
	  rc = rclc_service_init_default(
 8001936:	f00a f8b9 	bl	800baac <rosidl_typesupport_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode>
 800193a:	4602      	mov	r2, r0
 800193c:	f507 7162 	add.w	r1, r7, #904	@ 0x388
 8001940:	f507 7086 	add.w	r0, r7, #268	@ 0x10c
 8001944:	4b6e      	ldr	r3, [pc, #440]	@ (8001b00 <_Z16StartDefaultTaskPv+0x4a8>)
 8001946:	f00b fbdf 	bl	800d108 <rclc_service_init_default>
 800194a:	f8c7 03f8 	str.w	r0, [r7, #1016]	@ 0x3f8
			  &nav_mode_srv_server, &node,
			  ROSIDL_GET_SRV_TYPE_SUPPORT(nereo_interfaces, srv, SetNavigationMode), "/set_rov_navigation_mode");
	  if (rc != RCL_RET_OK) printf("Error navmode srv init.\n");
 800194e:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 8001952:	2b00      	cmp	r3, #0
 8001954:	d002      	beq.n	800195c <_Z16StartDefaultTaskPv+0x304>
 8001956:	486b      	ldr	r0, [pc, #428]	@ (8001b04 <_Z16StartDefaultTaskPv+0x4ac>)
 8001958:	f01b fd68 	bl	801d42c <puts>
	  rc = rclc_executor_add_service(
 800195c:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8001960:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 8001964:	f507 7186 	add.w	r1, r7, #268	@ 0x10c
 8001968:	f507 703e 	add.w	r0, r7, #760	@ 0x2f8
 800196c:	4c66      	ldr	r4, [pc, #408]	@ (8001b08 <_Z16StartDefaultTaskPv+0x4b0>)
 800196e:	9400      	str	r4, [sp, #0]
 8001970:	f00b f926 	bl	800cbc0 <rclc_executor_add_service>
 8001974:	f8c7 03f8 	str.w	r0, [r7, #1016]	@ 0x3f8
			  &executor, &nav_mode_srv_server, &set_navigation_mode_reqin,
			  &set_navigation_mode_resout, &set_nav_mode_service_callback);
	  if (rc != RCL_RET_OK) printf("Error exec addset_nav_mode srv.\n");
 8001978:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 800197c:	2b00      	cmp	r3, #0
 800197e:	d002      	beq.n	8001986 <_Z16StartDefaultTaskPv+0x32e>
 8001980:	4862      	ldr	r0, [pc, #392]	@ (8001b0c <_Z16StartDefaultTaskPv+0x4b4>)
 8001982:	f01b fd53 	bl	801d42c <puts>

	  // END MICRO ROS INIT
	  printf("Micro ROS initialization done.\n");
 8001986:	4862      	ldr	r0, [pc, #392]	@ (8001b10 <_Z16StartDefaultTaskPv+0x4b8>)
 8001988:	f01b fd50 	bl	801d42c <puts>

	  uint32_t pwm_output[8] = {1500};
 800198c:	f507 6380 	add.w	r3, r7, #1024	@ 0x400
 8001990:	f5a3 7347 	sub.w	r3, r3, #796	@ 0x31c
 8001994:	4618      	mov	r0, r3
 8001996:	2320      	movs	r3, #32
 8001998:	461a      	mov	r2, r3
 800199a:	2100      	movs	r1, #0
 800199c:	f01b fd78 	bl	801d490 <memset>
 80019a0:	f507 6380 	add.w	r3, r7, #1024	@ 0x400
 80019a4:	f5a3 7347 	sub.w	r3, r3, #796	@ 0x31c
 80019a8:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80019ac:	601a      	str	r2, [r3, #0]
	  arm_status pwm_computation_error = ARM_MATH_SUCCESS;
 80019ae:	2300      	movs	r3, #0
 80019b0:	f887 33f7 	strb.w	r3, [r7, #1015]	@ 0x3f7

	  // PID INIT

	  float kps[PID_NUMBER] = {0, 0, 0, 0};
 80019b4:	f507 6380 	add.w	r3, r7, #1024	@ 0x400
 80019b8:	f5a3 734b 	sub.w	r3, r3, #812	@ 0x32c
 80019bc:	461a      	mov	r2, r3
 80019be:	2300      	movs	r3, #0
 80019c0:	6013      	str	r3, [r2, #0]
 80019c2:	6053      	str	r3, [r2, #4]
 80019c4:	6093      	str	r3, [r2, #8]
 80019c6:	60d3      	str	r3, [r2, #12]
	  float kis[PID_NUMBER] = {0, 0, 0, 0};
 80019c8:	f507 6380 	add.w	r3, r7, #1024	@ 0x400
 80019cc:	f5a3 734f 	sub.w	r3, r3, #828	@ 0x33c
 80019d0:	461a      	mov	r2, r3
 80019d2:	2300      	movs	r3, #0
 80019d4:	6013      	str	r3, [r2, #0]
 80019d6:	6053      	str	r3, [r2, #4]
 80019d8:	6093      	str	r3, [r2, #8]
 80019da:	60d3      	str	r3, [r2, #12]
	  float kds[PID_NUMBER] = {0, 0, 0, 0};
 80019dc:	f507 6380 	add.w	r3, r7, #1024	@ 0x400
 80019e0:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 80019e4:	461a      	mov	r2, r3
 80019e6:	2300      	movs	r3, #0
 80019e8:	6013      	str	r3, [r2, #0]
 80019ea:	6053      	str	r3, [r2, #4]
 80019ec:	6093      	str	r3, [r2, #8]
 80019ee:	60d3      	str	r3, [r2, #12]
	  //init_pids(kps, kis, kds); // sw pids
	  //controllers_init(); // cs controllers

	  while(1)
	  {
		uint32_t time_ms = HAL_GetTick();
 80019f0:	f002 f936 	bl	8003c60 <HAL_GetTick>
 80019f4:	f8c7 03f0 	str.w	r0, [r7, #1008]	@ 0x3f0
		//printf("Free heap: %d.\n", xPortGetFreeHeapSize());
		// Spin executor once to receive requests and update messages
		rc = rclc_executor_spin_some(&executor, 10000000);
 80019f8:	f507 713e 	add.w	r1, r7, #760	@ 0x2f8
 80019fc:	4a45      	ldr	r2, [pc, #276]	@ (8001b14 <_Z16StartDefaultTaskPv+0x4bc>)
 80019fe:	f04f 0300 	mov.w	r3, #0
 8001a02:	4608      	mov	r0, r1
 8001a04:	f00b f960 	bl	800ccc8 <rclc_executor_spin_some>
 8001a08:	f8c7 03f8 	str.w	r0, [r7, #1016]	@ 0x3f8

	    if (rov_arm_mode == ROV_ARMED)
 8001a0c:	4b42      	ldr	r3, [pc, #264]	@ (8001b18 <_Z16StartDefaultTaskPv+0x4c0>)
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	bf0c      	ite	eq
 8001a16:	2301      	moveq	r3, #1
 8001a18:	2300      	movne	r3, #0
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d04a      	beq.n	8001ab6 <_Z16StartDefaultTaskPv+0x45e>
	    {
	    	switch (navigation_mode) {
 8001a20:	4b3e      	ldr	r3, [pc, #248]	@ (8001b1c <_Z16StartDefaultTaskPv+0x4c4>)
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d002      	beq.n	8001a30 <_Z16StartDefaultTaskPv+0x3d8>
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d00c      	beq.n	8001a48 <_Z16StartDefaultTaskPv+0x3f0>
 8001a2e:	e01e      	b.n	8001a6e <_Z16StartDefaultTaskPv+0x416>
	    		case NAVIGATION_MODE_MANUAL:
	    			pwm_computation_error = calculate_pwm(cmd_vel_msg.cmd_vel, pwm_output);
 8001a30:	f107 02e4 	add.w	r2, r7, #228	@ 0xe4
 8001a34:	f507 732f 	add.w	r3, r7, #700	@ 0x2bc
 8001a38:	4611      	mov	r1, r2
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f001 f9e8 	bl	8002e10 <calculate_pwm>
 8001a40:	4603      	mov	r3, r0
 8001a42:	f887 33f7 	strb.w	r3, [r7, #1015]	@ 0x3f7
	    			break;
 8001a46:	e02a      	b.n	8001a9e <_Z16StartDefaultTaskPv+0x446>
	    		case NAVIGATION_MODE_STABILIZE_FULL:
	    			pwm_computation_error = calculate_pwm_with_pid(cmd_vel_msg.cmd_vel, pwm_output,
 8001a48:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8001a4c:	f103 0418 	add.w	r4, r3, #24
 8001a50:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001a54:	f103 0218 	add.w	r2, r3, #24
 8001a58:	f107 01e4 	add.w	r1, r7, #228	@ 0xe4
 8001a5c:	f507 702f 	add.w	r0, r7, #700	@ 0x2bc
 8001a60:	4623      	mov	r3, r4
 8001a62:	f001 fdf1 	bl	8003648 <calculate_pwm_with_pid>
 8001a66:	4603      	mov	r3, r0
 8001a68:	f887 33f7 	strb.w	r3, [r7, #1015]	@ 0x3f7
	    					(Quaternion *)&imu_data_msg.orientation,
							(float *)&fluid_pressure.fluid_pressure);
	    			break;
 8001a6c:	e017      	b.n	8001a9e <_Z16StartDefaultTaskPv+0x446>
	    			//pwm_computation_error = calculate_pwm_cs_controller(cmd_vel_msg.cmd_vel, pwm_output,
	    			//		(Quaternion *)&imu_data_msg.orientation,
					//		(float *)&fluid_pressure.fluid_pressure);
	    			//break;
	    		default:
	    			for(uint8_t i = 0; i < 8; i++) pwm_output[i] = 1500;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	f887 33ff 	strb.w	r3, [r7, #1023]	@ 0x3ff
 8001a74:	e00e      	b.n	8001a94 <_Z16StartDefaultTaskPv+0x43c>
 8001a76:	f897 23ff 	ldrb.w	r2, [r7, #1023]	@ 0x3ff
 8001a7a:	f507 6380 	add.w	r3, r7, #1024	@ 0x400
 8001a7e:	f5a3 7347 	sub.w	r3, r3, #796	@ 0x31c
 8001a82:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 8001a86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001a8a:	f897 33ff 	ldrb.w	r3, [r7, #1023]	@ 0x3ff
 8001a8e:	3301      	adds	r3, #1
 8001a90:	f887 33ff 	strb.w	r3, [r7, #1023]	@ 0x3ff
 8001a94:	f897 33ff 	ldrb.w	r3, [r7, #1023]	@ 0x3ff
 8001a98:	2b07      	cmp	r3, #7
 8001a9a:	d9ec      	bls.n	8001a76 <_Z16StartDefaultTaskPv+0x41e>
	    			break;
 8001a9c:	bf00      	nop
	    	}
	    	clamp_pwm_output(pwm_output, 8);
 8001a9e:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001aa2:	2108      	movs	r1, #8
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f000 f8f3 	bl	8001c90 <clamp_pwm_output>
	    	set_pwms(pwm_output);
 8001aaa:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f000 f880 	bl	8001bb4 <set_pwms>
 8001ab4:	e001      	b.n	8001aba <_Z16StartDefaultTaskPv+0x462>
	    } else set_pwm_idle();
 8001ab6:	f000 f8bd 	bl	8001c34 <set_pwm_idle>

	    for(uint8_t i = 0; i < 8; i++) thruster_status_msg.thruster_pwms[i] = pwm_output[i];
 8001aba:	2300      	movs	r3, #0
 8001abc:	f887 33fe 	strb.w	r3, [r7, #1022]	@ 0x3fe
 8001ac0:	e044      	b.n	8001b4c <_Z16StartDefaultTaskPv+0x4f4>
 8001ac2:	bf00      	nop
 8001ac4:	2000b110 	.word	0x2000b110
 8001ac8:	0801e50c 	.word	0x0801e50c
 8001acc:	0801e520 	.word	0x0801e520
 8001ad0:	0801e52c 	.word	0x0801e52c
 8001ad4:	2000b0f8 	.word	0x2000b0f8
 8001ad8:	08001d01 	.word	0x08001d01
 8001adc:	0801e540 	.word	0x0801e540
 8001ae0:	0801e55c 	.word	0x0801e55c
 8001ae4:	0801e56c 	.word	0x0801e56c
 8001ae8:	08001d1d 	.word	0x08001d1d
 8001aec:	0801e584 	.word	0x0801e584
 8001af0:	0801e5a4 	.word	0x0801e5a4
 8001af4:	0801e5b8 	.word	0x0801e5b8
 8001af8:	08001d39 	.word	0x08001d39
 8001afc:	0801e5d0 	.word	0x0801e5d0
 8001b00:	0801e5ec 	.word	0x0801e5ec
 8001b04:	0801e608 	.word	0x0801e608
 8001b08:	08001d99 	.word	0x08001d99
 8001b0c:	0801e620 	.word	0x0801e620
 8001b10:	0801e640 	.word	0x0801e640
 8001b14:	00989680 	.word	0x00989680
 8001b18:	2000b0ec 	.word	0x2000b0ec
 8001b1c:	2000b0ed 	.word	0x2000b0ed
 8001b20:	f897 23fe 	ldrb.w	r2, [r7, #1022]	@ 0x3fe
 8001b24:	f507 6380 	add.w	r3, r7, #1024	@ 0x400
 8001b28:	f5a3 7347 	sub.w	r3, r3, #796	@ 0x31c
 8001b2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b30:	f897 23fe 	ldrb.w	r2, [r7, #1022]	@ 0x3fe
 8001b34:	b299      	uxth	r1, r3
 8001b36:	f507 6380 	add.w	r3, r7, #1024	@ 0x400
 8001b3a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001b3e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8001b42:	f897 33fe 	ldrb.w	r3, [r7, #1022]	@ 0x3fe
 8001b46:	3301      	adds	r3, #1
 8001b48:	f887 33fe 	strb.w	r3, [r7, #1022]	@ 0x3fe
 8001b4c:	f897 33fe 	ldrb.w	r3, [r7, #1022]	@ 0x3fe
 8001b50:	2b07      	cmp	r3, #7
 8001b52:	d9e5      	bls.n	8001b20 <_Z16StartDefaultTaskPv+0x4c8>
	    rc = rcl_publish(&thruster_status_publisher, &thruster_status_msg, NULL);
 8001b54:	f507 7139 	add.w	r1, r7, #740	@ 0x2e4
 8001b58:	f507 733d 	add.w	r3, r7, #756	@ 0x2f4
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f00a fbdc 	bl	800c31c <rcl_publish>
 8001b64:	f8c7 03f8 	str.w	r0, [r7, #1016]	@ 0x3f8
	    if(rc!=RCL_RET_OK) printf("Error publishing (line %d)\n", __LINE__);
 8001b68:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d005      	beq.n	8001b7c <_Z16StartDefaultTaskPv+0x524>
 8001b70:	f240 1127 	movw	r1, #295	@ 0x127
 8001b74:	480d      	ldr	r0, [pc, #52]	@ (8001bac <_Z16StartDefaultTaskPv+0x554>)
 8001b76:	f01b fbf1 	bl	801d35c <iprintf>
 8001b7a:	e002      	b.n	8001b82 <_Z16StartDefaultTaskPv+0x52a>
	    else HAL_IWDG_Refresh(&hiwdg);
 8001b7c:	480c      	ldr	r0, [pc, #48]	@ (8001bb0 <_Z16StartDefaultTaskPv+0x558>)
 8001b7e:	f002 ff68 	bl	8004a52 <HAL_IWDG_Refresh>

	    uint32_t elapsed_time = HAL_GetTick() - time_ms;
 8001b82:	f002 f86d 	bl	8003c60 <HAL_GetTick>
 8001b86:	4602      	mov	r2, r0
 8001b88:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	@ 0x3f0
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec
	    if (elapsed_time < TS_DEFAULT_TASK_MS) osDelay(TS_DEFAULT_TASK_MS - elapsed_time);
 8001b92:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	@ 0x3ec
 8001b96:	2b18      	cmp	r3, #24
 8001b98:	f63f af2a 	bhi.w	80019f0 <_Z16StartDefaultTaskPv+0x398>
 8001b9c:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	@ 0x3ec
 8001ba0:	f1c3 0319 	rsb	r3, r3, #25
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f006 f8ab 	bl	8007d00 <osDelay>
	  }
 8001baa:	e721      	b.n	80019f0 <_Z16StartDefaultTaskPv+0x398>
 8001bac:	0801e660 	.word	0x0801e660
 8001bb0:	2000b110 	.word	0x2000b110

08001bb4 <set_pwms>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void inline set_pwms(uint32_t pwms[8])
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
	// HERE THE PWM Channel - Thruster relation is defined
	TIM2 -> CCR2 = pwms[3] + 50;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	330c      	adds	r3, #12
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001bc6:	3332      	adds	r3, #50	@ 0x32
 8001bc8:	6393      	str	r3, [r2, #56]	@ 0x38
	TIM2 -> CCR4 = pwms[0] - 5;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001bd2:	3b05      	subs	r3, #5
 8001bd4:	6413      	str	r3, [r2, #64]	@ 0x40
	TIM2 -> CCR1 = pwms[4] + 50;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	3310      	adds	r3, #16
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001be0:	3332      	adds	r3, #50	@ 0x32
 8001be2:	6353      	str	r3, [r2, #52]	@ 0x34
	TIM3 -> CCR2 = pwms[5] + 50;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	3314      	adds	r3, #20
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a11      	ldr	r2, [pc, #68]	@ (8001c30 <set_pwms+0x7c>)
 8001bec:	3332      	adds	r3, #50	@ 0x32
 8001bee:	6393      	str	r3, [r2, #56]	@ 0x38
	// VERTICAL THRUSTERS
	TIM2 -> CCR3 = pwms[1] + 50;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	3304      	adds	r3, #4
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001bfa:	3332      	adds	r3, #50	@ 0x32
 8001bfc:	63d3      	str	r3, [r2, #60]	@ 0x3c
	TIM3 -> CCR3 = pwms[2] + 50;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	3308      	adds	r3, #8
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a0a      	ldr	r2, [pc, #40]	@ (8001c30 <set_pwms+0x7c>)
 8001c06:	3332      	adds	r3, #50	@ 0x32
 8001c08:	63d3      	str	r3, [r2, #60]	@ 0x3c
	TIM3 -> CCR4 = pwms[6] + 47;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	3318      	adds	r3, #24
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a07      	ldr	r2, [pc, #28]	@ (8001c30 <set_pwms+0x7c>)
 8001c12:	332f      	adds	r3, #47	@ 0x2f
 8001c14:	6413      	str	r3, [r2, #64]	@ 0x40
	TIM3 -> CCR1 = pwms[7] + 50;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	331c      	adds	r3, #28
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a04      	ldr	r2, [pc, #16]	@ (8001c30 <set_pwms+0x7c>)
 8001c1e:	3332      	adds	r3, #50	@ 0x32
 8001c20:	6353      	str	r3, [r2, #52]	@ 0x34
}
 8001c22:	bf00      	nop
 8001c24:	370c      	adds	r7, #12
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	40000400 	.word	0x40000400

08001c34 <set_pwm_idle>:
void inline set_pwm_idle()
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
	TIM2 -> CCR1 = PWM_IDLE + 50;
 8001c38:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001c3c:	f240 620e 	movw	r2, #1550	@ 0x60e
 8001c40:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM2 -> CCR2 = PWM_IDLE + 50;
 8001c42:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001c46:	f240 620e 	movw	r2, #1550	@ 0x60e
 8001c4a:	639a      	str	r2, [r3, #56]	@ 0x38
	TIM2 -> CCR3 = PWM_IDLE + 50;
 8001c4c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001c50:	f240 620e 	movw	r2, #1550	@ 0x60e
 8001c54:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM2 -> CCR4 = PWM_IDLE - 5;
 8001c56:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001c5a:	f240 52d7 	movw	r2, #1495	@ 0x5d7
 8001c5e:	641a      	str	r2, [r3, #64]	@ 0x40
	TIM3 -> CCR1 = PWM_IDLE + 50;
 8001c60:	4b0a      	ldr	r3, [pc, #40]	@ (8001c8c <set_pwm_idle+0x58>)
 8001c62:	f240 620e 	movw	r2, #1550	@ 0x60e
 8001c66:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM3 -> CCR2 = PWM_IDLE + 50;
 8001c68:	4b08      	ldr	r3, [pc, #32]	@ (8001c8c <set_pwm_idle+0x58>)
 8001c6a:	f240 620e 	movw	r2, #1550	@ 0x60e
 8001c6e:	639a      	str	r2, [r3, #56]	@ 0x38
	TIM3 -> CCR3 = PWM_IDLE + 50;
 8001c70:	4b06      	ldr	r3, [pc, #24]	@ (8001c8c <set_pwm_idle+0x58>)
 8001c72:	f240 620e 	movw	r2, #1550	@ 0x60e
 8001c76:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM3 -> CCR4 = PWM_IDLE + 47;
 8001c78:	4b04      	ldr	r3, [pc, #16]	@ (8001c8c <set_pwm_idle+0x58>)
 8001c7a:	f240 620b 	movw	r2, #1547	@ 0x60b
 8001c7e:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001c80:	bf00      	nop
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	40000400 	.word	0x40000400

08001c90 <clamp_pwm_output>:
void clamp_pwm_output(uint32_t pwms[], int N) {
 8001c90:	b480      	push	{r7}
 8001c92:	b085      	sub	sp, #20
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	6039      	str	r1, [r7, #0]
	for(uint16_t i = 0; i < N; i++) {
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	81fb      	strh	r3, [r7, #14]
 8001c9e:	e023      	b.n	8001ce8 <clamp_pwm_output+0x58>
		if (pwms[i] < PWM_MIN)
 8001ca0:	89fb      	ldrh	r3, [r7, #14]
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	687a      	ldr	r2, [r7, #4]
 8001ca6:	4413      	add	r3, r2
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f240 5231 	movw	r2, #1329	@ 0x531
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d807      	bhi.n	8001cc2 <clamp_pwm_output+0x32>
			pwms[i] = PWM_MIN;
 8001cb2:	89fb      	ldrh	r3, [r7, #14]
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	687a      	ldr	r2, [r7, #4]
 8001cb8:	4413      	add	r3, r2
 8001cba:	f240 5232 	movw	r2, #1330	@ 0x532
 8001cbe:	601a      	str	r2, [r3, #0]
 8001cc0:	e00f      	b.n	8001ce2 <clamp_pwm_output+0x52>
		else if (pwms[i] > PWM_MAX)
 8001cc2:	89fb      	ldrh	r3, [r7, #14]
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	687a      	ldr	r2, [r7, #4]
 8001cc8:	4413      	add	r3, r2
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f240 6286 	movw	r2, #1670	@ 0x686
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d906      	bls.n	8001ce2 <clamp_pwm_output+0x52>
			pwms[i] = PWM_MAX;
 8001cd4:	89fb      	ldrh	r3, [r7, #14]
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	687a      	ldr	r2, [r7, #4]
 8001cda:	4413      	add	r3, r2
 8001cdc:	f240 6286 	movw	r2, #1670	@ 0x686
 8001ce0:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < N; i++) {
 8001ce2:	89fb      	ldrh	r3, [r7, #14]
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	81fb      	strh	r3, [r7, #14]
 8001ce8:	89fb      	ldrh	r3, [r7, #14]
 8001cea:	683a      	ldr	r2, [r7, #0]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	dcd7      	bgt.n	8001ca0 <clamp_pwm_output+0x10>
	}
}
 8001cf0:	bf00      	nop
 8001cf2:	bf00      	nop
 8001cf4:	3714      	adds	r7, #20
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
	...

08001d00 <imu_subscription_callback>:

    pid->A0 = pid->Kp + pid->Ki + pid->Kd;
    pid->A1 = -pid->Kp - 2 * pid->Kd;
    pid->A2 = pid->Kd;
}
void imu_subscription_callback(const void * msgin) {
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
	HAL_IWDG_Refresh(&hiwdg);
 8001d08:	4803      	ldr	r0, [pc, #12]	@ (8001d18 <imu_subscription_callback+0x18>)
 8001d0a:	f002 fea2 	bl	8004a52 <HAL_IWDG_Refresh>
}
 8001d0e:	bf00      	nop
 8001d10:	3708      	adds	r7, #8
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	2000b110 	.word	0x2000b110

08001d1c <cmd_vel_subscription_callback>:
void cmd_vel_subscription_callback (const void * msgin) {
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
	HAL_IWDG_Refresh(&hiwdg);
 8001d24:	4803      	ldr	r0, [pc, #12]	@ (8001d34 <cmd_vel_subscription_callback+0x18>)
 8001d26:	f002 fe94 	bl	8004a52 <HAL_IWDG_Refresh>
}
 8001d2a:	bf00      	nop
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	2000b110 	.word	0x2000b110

08001d38 <arm_disarm_service_callback>:
void arm_disarm_service_callback(const void * request_msg, void * response_msg) {
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	6039      	str	r1, [r7, #0]
	//HAL_IWDG_Refresh(&hiwdg);
	std_srvs__srv__SetBool_Request * req_in = (std_srvs__srv__SetBool_Request *) request_msg;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	60fb      	str	r3, [r7, #12]
	std_srvs__srv__SetBool_Response * res_in = (std_srvs__srv__SetBool_Response *) response_msg;
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	60bb      	str	r3, [r7, #8]
	rov_arm_mode = req_in->data ? ROV_ARMED : ROV_DISARMED;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <arm_disarm_service_callback+0x1e>
 8001d52:	2201      	movs	r2, #1
 8001d54:	e000      	b.n	8001d58 <arm_disarm_service_callback+0x20>
 8001d56:	2200      	movs	r2, #0
 8001d58:	4b0c      	ldr	r3, [pc, #48]	@ (8001d8c <arm_disarm_service_callback+0x54>)
 8001d5a:	701a      	strb	r2, [r3, #0]
	printf("%d: arm mode.\n", (int)rov_arm_mode);
 8001d5c:	4b0b      	ldr	r3, [pc, #44]	@ (8001d8c <arm_disarm_service_callback+0x54>)
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	4619      	mov	r1, r3
 8001d64:	480a      	ldr	r0, [pc, #40]	@ (8001d90 <arm_disarm_service_callback+0x58>)
 8001d66:	f01b faf9 	bl	801d35c <iprintf>
	res_in->success = true;
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	701a      	strb	r2, [r3, #0]
	res_in->message.capacity = 2;
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	2202      	movs	r2, #2
 8001d74:	60da      	str	r2, [r3, #12]
	res_in->message.size = strlen(empty_string);
 8001d76:	2200      	movs	r2, #0
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	609a      	str	r2, [r3, #8]
	res_in->message.data = empty_string;
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	4a05      	ldr	r2, [pc, #20]	@ (8001d94 <arm_disarm_service_callback+0x5c>)
 8001d80:	605a      	str	r2, [r3, #4]
}
 8001d82:	bf00      	nop
 8001d84:	3710      	adds	r7, #16
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	2000b0ec 	.word	0x2000b0ec
 8001d90:	0801e67c 	.word	0x0801e67c
 8001d94:	2000b0f0 	.word	0x2000b0f0

08001d98 <set_nav_mode_service_callback>:
void set_nav_mode_service_callback(const void * request_msg, void * response_msg) {
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b084      	sub	sp, #16
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	6039      	str	r1, [r7, #0]
	HAL_IWDG_Refresh(&hiwdg);
 8001da2:	480b      	ldr	r0, [pc, #44]	@ (8001dd0 <set_nav_mode_service_callback+0x38>)
 8001da4:	f002 fe55 	bl	8004a52 <HAL_IWDG_Refresh>
	nereo_interfaces__srv__SetNavigationMode_Request * req_in = (nereo_interfaces__srv__SetNavigationMode_Request *) request_msg;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	60fb      	str	r3, [r7, #12]
	nereo_interfaces__srv__SetNavigationMode_Response * res_in = (nereo_interfaces__srv__SetNavigationMode_Response *) response_msg;
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	60bb      	str	r3, [r7, #8]
	navigation_mode = (NavigationModes)req_in->navigation_mode;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	781a      	ldrb	r2, [r3, #0]
 8001db4:	4b07      	ldr	r3, [pc, #28]	@ (8001dd4 <set_nav_mode_service_callback+0x3c>)
 8001db6:	701a      	strb	r2, [r3, #0]
	res_in->mode_after_set = navigation_mode;
 8001db8:	4b06      	ldr	r3, [pc, #24]	@ (8001dd4 <set_nav_mode_service_callback+0x3c>)
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	b2da      	uxtb	r2, r3
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	705a      	strb	r2, [r3, #1]
	res_in->success = true;
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	701a      	strb	r2, [r3, #0]
}
 8001dc8:	bf00      	nop
 8001dca:	3710      	adds	r7, #16
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	2000b110 	.word	0x2000b110
 8001dd4:	2000b0ed 	.word	0x2000b0ed

08001dd8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b08a      	sub	sp, #40	@ 0x28
 8001ddc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dde:	f107 0314 	add.w	r3, r7, #20
 8001de2:	2200      	movs	r2, #0
 8001de4:	601a      	str	r2, [r3, #0]
 8001de6:	605a      	str	r2, [r3, #4]
 8001de8:	609a      	str	r2, [r3, #8]
 8001dea:	60da      	str	r2, [r3, #12]
 8001dec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001dee:	2300      	movs	r3, #0
 8001df0:	613b      	str	r3, [r7, #16]
 8001df2:	4b2d      	ldr	r3, [pc, #180]	@ (8001ea8 <MX_GPIO_Init+0xd0>)
 8001df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001df6:	4a2c      	ldr	r2, [pc, #176]	@ (8001ea8 <MX_GPIO_Init+0xd0>)
 8001df8:	f043 0310 	orr.w	r3, r3, #16
 8001dfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dfe:	4b2a      	ldr	r3, [pc, #168]	@ (8001ea8 <MX_GPIO_Init+0xd0>)
 8001e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e02:	f003 0310 	and.w	r3, r3, #16
 8001e06:	613b      	str	r3, [r7, #16]
 8001e08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	60fb      	str	r3, [r7, #12]
 8001e0e:	4b26      	ldr	r3, [pc, #152]	@ (8001ea8 <MX_GPIO_Init+0xd0>)
 8001e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e12:	4a25      	ldr	r2, [pc, #148]	@ (8001ea8 <MX_GPIO_Init+0xd0>)
 8001e14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e18:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e1a:	4b23      	ldr	r3, [pc, #140]	@ (8001ea8 <MX_GPIO_Init+0xd0>)
 8001e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e22:	60fb      	str	r3, [r7, #12]
 8001e24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e26:	2300      	movs	r3, #0
 8001e28:	60bb      	str	r3, [r7, #8]
 8001e2a:	4b1f      	ldr	r3, [pc, #124]	@ (8001ea8 <MX_GPIO_Init+0xd0>)
 8001e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e2e:	4a1e      	ldr	r2, [pc, #120]	@ (8001ea8 <MX_GPIO_Init+0xd0>)
 8001e30:	f043 0301 	orr.w	r3, r3, #1
 8001e34:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e36:	4b1c      	ldr	r3, [pc, #112]	@ (8001ea8 <MX_GPIO_Init+0xd0>)
 8001e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e3a:	f003 0301 	and.w	r3, r3, #1
 8001e3e:	60bb      	str	r3, [r7, #8]
 8001e40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e42:	2300      	movs	r3, #0
 8001e44:	607b      	str	r3, [r7, #4]
 8001e46:	4b18      	ldr	r3, [pc, #96]	@ (8001ea8 <MX_GPIO_Init+0xd0>)
 8001e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e4a:	4a17      	ldr	r2, [pc, #92]	@ (8001ea8 <MX_GPIO_Init+0xd0>)
 8001e4c:	f043 0302 	orr.w	r3, r3, #2
 8001e50:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e52:	4b15      	ldr	r3, [pc, #84]	@ (8001ea8 <MX_GPIO_Init+0xd0>)
 8001e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e56:	f003 0302 	and.w	r3, r3, #2
 8001e5a:	607b      	str	r3, [r7, #4]
 8001e5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e5e:	2300      	movs	r3, #0
 8001e60:	603b      	str	r3, [r7, #0]
 8001e62:	4b11      	ldr	r3, [pc, #68]	@ (8001ea8 <MX_GPIO_Init+0xd0>)
 8001e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e66:	4a10      	ldr	r2, [pc, #64]	@ (8001ea8 <MX_GPIO_Init+0xd0>)
 8001e68:	f043 0304 	orr.w	r3, r3, #4
 8001e6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e6e:	4b0e      	ldr	r3, [pc, #56]	@ (8001ea8 <MX_GPIO_Init+0xd0>)
 8001e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e72:	f003 0304 	and.w	r3, r3, #4
 8001e76:	603b      	str	r3, [r7, #0]
 8001e78:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_RESET);
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	2104      	movs	r1, #4
 8001e7e:	480b      	ldr	r0, [pc, #44]	@ (8001eac <MX_GPIO_Init+0xd4>)
 8001e80:	f002 fd8a 	bl	8004998 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001e84:	2304      	movs	r3, #4
 8001e86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e90:	2300      	movs	r3, #0
 8001e92:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e94:	f107 0314 	add.w	r3, r7, #20
 8001e98:	4619      	mov	r1, r3
 8001e9a:	4804      	ldr	r0, [pc, #16]	@ (8001eac <MX_GPIO_Init+0xd4>)
 8001e9c:	f002 fbd0 	bl	8004640 <HAL_GPIO_Init>

}
 8001ea0:	bf00      	nop
 8001ea2:	3728      	adds	r7, #40	@ 0x28
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	40023800 	.word	0x40023800
 8001eac:	40021000 	.word	0x40021000

08001eb0 <linear_interpolation>:
 * @param output_min The minimum value of the output range.
 * @param output_max The maximum value of the output range.
 * @return The interpolated output value.
 */
float linear_interpolation(float input_value, float input_min, float input_max, float output_min, float output_max)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b087      	sub	sp, #28
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	ed87 0a05 	vstr	s0, [r7, #20]
 8001eba:	edc7 0a04 	vstr	s1, [r7, #16]
 8001ebe:	ed87 1a03 	vstr	s2, [r7, #12]
 8001ec2:	edc7 1a02 	vstr	s3, [r7, #8]
 8001ec6:	ed87 2a01 	vstr	s4, [r7, #4]
    return ((output_max - output_min) / (input_max - input_min)) * (input_value - input_min) + output_min;
 8001eca:	ed97 7a01 	vldr	s14, [r7, #4]
 8001ece:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ed2:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001ed6:	ed97 7a03 	vldr	s14, [r7, #12]
 8001eda:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ede:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ee2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001ee6:	edd7 6a05 	vldr	s13, [r7, #20]
 8001eea:	edd7 7a04 	vldr	s15, [r7, #16]
 8001eee:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001ef2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ef6:	edd7 7a02 	vldr	s15, [r7, #8]
 8001efa:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8001efe:	eeb0 0a67 	vmov.f32	s0, s15
 8001f02:	371c      	adds	r7, #28
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <normalize_vector>:
 * @param input_array The input array of floating-point values to be normalized.
 * @param output_array The output array where the normalized values will be stored.
 * @param size The number of elements in the input and output arrays.
 */
void normalize_vector(const float *input_array, float *output_array, uint8_t size)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b089      	sub	sp, #36	@ 0x24
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	60f8      	str	r0, [r7, #12]
 8001f14:	60b9      	str	r1, [r7, #8]
 8001f16:	4613      	mov	r3, r2
 8001f18:	71fb      	strb	r3, [r7, #7]
    float max_abs_value = 0.0f;
 8001f1a:	f04f 0300 	mov.w	r3, #0
 8001f1e:	61fb      	str	r3, [r7, #28]
    for (uint8_t i = 0; i < size; i++)
 8001f20:	2300      	movs	r3, #0
 8001f22:	76fb      	strb	r3, [r7, #27]
 8001f24:	e017      	b.n	8001f56 <normalize_vector+0x4a>
    {
        float abs_value = fabsf(input_array[i]);
 8001f26:	7efb      	ldrb	r3, [r7, #27]
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	68fa      	ldr	r2, [r7, #12]
 8001f2c:	4413      	add	r3, r2
 8001f2e:	edd3 7a00 	vldr	s15, [r3]
 8001f32:	eef0 7ae7 	vabs.f32	s15, s15
 8001f36:	edc7 7a05 	vstr	s15, [r7, #20]
        if (abs_value > max_abs_value)
 8001f3a:	ed97 7a05 	vldr	s14, [r7, #20]
 8001f3e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001f42:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f4a:	dd01      	ble.n	8001f50 <normalize_vector+0x44>
        {
            max_abs_value = abs_value;
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	61fb      	str	r3, [r7, #28]
    for (uint8_t i = 0; i < size; i++)
 8001f50:	7efb      	ldrb	r3, [r7, #27]
 8001f52:	3301      	adds	r3, #1
 8001f54:	76fb      	strb	r3, [r7, #27]
 8001f56:	7efa      	ldrb	r2, [r7, #27]
 8001f58:	79fb      	ldrb	r3, [r7, #7]
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d3e3      	bcc.n	8001f26 <normalize_vector+0x1a>
        }
    }
    for (uint8_t i = 0; i < size; i++) output_array[i] = input_array[i];
 8001f5e:	2300      	movs	r3, #0
 8001f60:	76bb      	strb	r3, [r7, #26]
 8001f62:	e00c      	b.n	8001f7e <normalize_vector+0x72>
 8001f64:	7ebb      	ldrb	r3, [r7, #26]
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	68fa      	ldr	r2, [r7, #12]
 8001f6a:	441a      	add	r2, r3
 8001f6c:	7ebb      	ldrb	r3, [r7, #26]
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	68b9      	ldr	r1, [r7, #8]
 8001f72:	440b      	add	r3, r1
 8001f74:	6812      	ldr	r2, [r2, #0]
 8001f76:	601a      	str	r2, [r3, #0]
 8001f78:	7ebb      	ldrb	r3, [r7, #26]
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	76bb      	strb	r3, [r7, #26]
 8001f7e:	7eba      	ldrb	r2, [r7, #26]
 8001f80:	79fb      	ldrb	r3, [r7, #7]
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d3ee      	bcc.n	8001f64 <normalize_vector+0x58>
	if (max_abs_value > 1) {
 8001f86:	edd7 7a07 	vldr	s15, [r7, #28]
 8001f8a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001f8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f96:	dc00      	bgt.n	8001f9a <normalize_vector+0x8e>
		for (uint8_t i = 0; i < size; i++) {
			output_array[i] = input_array[i] / max_abs_value;
		}
	}
}
 8001f98:	e019      	b.n	8001fce <normalize_vector+0xc2>
		for (uint8_t i = 0; i < size; i++) {
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	767b      	strb	r3, [r7, #25]
 8001f9e:	e012      	b.n	8001fc6 <normalize_vector+0xba>
			output_array[i] = input_array[i] / max_abs_value;
 8001fa0:	7e7b      	ldrb	r3, [r7, #25]
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	68fa      	ldr	r2, [r7, #12]
 8001fa6:	4413      	add	r3, r2
 8001fa8:	edd3 6a00 	vldr	s13, [r3]
 8001fac:	7e7b      	ldrb	r3, [r7, #25]
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	68ba      	ldr	r2, [r7, #8]
 8001fb2:	4413      	add	r3, r2
 8001fb4:	ed97 7a07 	vldr	s14, [r7, #28]
 8001fb8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fbc:	edc3 7a00 	vstr	s15, [r3]
		for (uint8_t i = 0; i < size; i++) {
 8001fc0:	7e7b      	ldrb	r3, [r7, #25]
 8001fc2:	3301      	adds	r3, #1
 8001fc4:	767b      	strb	r3, [r7, #25]
 8001fc6:	7e7a      	ldrb	r2, [r7, #25]
 8001fc8:	79fb      	ldrb	r3, [r7, #7]
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	d3e8      	bcc.n	8001fa0 <normalize_vector+0x94>
}
 8001fce:	bf00      	nop
 8001fd0:	3724      	adds	r7, #36	@ 0x24
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
	...

08001fdc <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8001fe0:	4b09      	ldr	r3, [pc, #36]	@ (8002008 <MX_IWDG_Init+0x2c>)
 8001fe2:	4a0a      	ldr	r2, [pc, #40]	@ (800200c <MX_IWDG_Init+0x30>)
 8001fe4:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 8001fe6:	4b08      	ldr	r3, [pc, #32]	@ (8002008 <MX_IWDG_Init+0x2c>)
 8001fe8:	2204      	movs	r2, #4
 8001fea:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 2500-1;
 8001fec:	4b06      	ldr	r3, [pc, #24]	@ (8002008 <MX_IWDG_Init+0x2c>)
 8001fee:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 8001ff2:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8001ff4:	4804      	ldr	r0, [pc, #16]	@ (8002008 <MX_IWDG_Init+0x2c>)
 8001ff6:	f002 fce8 	bl	80049ca <HAL_IWDG_Init>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d001      	beq.n	8002004 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8002000:	f000 f926 	bl	8002250 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8002004:	bf00      	nop
 8002006:	bd80      	pop	{r7, pc}
 8002008:	2000b110 	.word	0x2000b110
 800200c:	40003000 	.word	0x40003000

08002010 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002018:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800201c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8002020:	f003 0301 	and.w	r3, r3, #1
 8002024:	2b00      	cmp	r3, #0
 8002026:	d013      	beq.n	8002050 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8002028:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800202c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8002030:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002034:	2b00      	cmp	r3, #0
 8002036:	d00b      	beq.n	8002050 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8002038:	e000      	b.n	800203c <ITM_SendChar+0x2c>
    {
      __NOP();
 800203a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800203c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d0f9      	beq.n	800203a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8002046:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	b2d2      	uxtb	r2, r2
 800204e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8002050:	687b      	ldr	r3, [r7, #4]
}
 8002052:	4618      	mov	r0, r3
 8002054:	370c      	adds	r7, #12
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
	...

08002060 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002064:	f001 fdc6 	bl	8003bf4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002068:	f000 f850 	bl	800210c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800206c:	f7ff feb4 	bl	8001dd8 <MX_GPIO_Init>
  MX_DMA_Init();
 8002070:	f7ff fa0a 	bl	8001488 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8002074:	f000 fdea 	bl	8002c4c <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8002078:	f000 fbf6 	bl	8002868 <MX_TIM2_Init>
  MX_TIM3_Init();
 800207c:	f000 fc6e 	bl	800295c <MX_TIM3_Init>
  MX_IWDG_Init();
 8002080:	f7ff ffac 	bl	8001fdc <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */
  printf("Printf debugging is working! Yay!\n");
 8002084:	481c      	ldr	r0, [pc, #112]	@ (80020f8 <main+0x98>)
 8002086:	f01b f9d1 	bl	801d42c <puts>
  HAL_TIM_Base_Start(&htim2);
 800208a:	481c      	ldr	r0, [pc, #112]	@ (80020fc <main+0x9c>)
 800208c:	f003 fa52 	bl	8005534 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8002090:	2100      	movs	r1, #0
 8002092:	481a      	ldr	r0, [pc, #104]	@ (80020fc <main+0x9c>)
 8002094:	f003 fb76 	bl	8005784 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8002098:	2104      	movs	r1, #4
 800209a:	4818      	ldr	r0, [pc, #96]	@ (80020fc <main+0x9c>)
 800209c:	f003 fb72 	bl	8005784 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80020a0:	2108      	movs	r1, #8
 80020a2:	4816      	ldr	r0, [pc, #88]	@ (80020fc <main+0x9c>)
 80020a4:	f003 fb6e 	bl	8005784 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80020a8:	210c      	movs	r1, #12
 80020aa:	4814      	ldr	r0, [pc, #80]	@ (80020fc <main+0x9c>)
 80020ac:	f003 fb6a 	bl	8005784 <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start(&htim3);
 80020b0:	4813      	ldr	r0, [pc, #76]	@ (8002100 <main+0xa0>)
 80020b2:	f003 fa3f 	bl	8005534 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80020b6:	2100      	movs	r1, #0
 80020b8:	4811      	ldr	r0, [pc, #68]	@ (8002100 <main+0xa0>)
 80020ba:	f003 fb63 	bl	8005784 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80020be:	2104      	movs	r1, #4
 80020c0:	480f      	ldr	r0, [pc, #60]	@ (8002100 <main+0xa0>)
 80020c2:	f003 fb5f 	bl	8005784 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80020c6:	2108      	movs	r1, #8
 80020c8:	480d      	ldr	r0, [pc, #52]	@ (8002100 <main+0xa0>)
 80020ca:	f003 fb5b 	bl	8005784 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80020ce:	210c      	movs	r1, #12
 80020d0:	480b      	ldr	r0, [pc, #44]	@ (8002100 <main+0xa0>)
 80020d2:	f003 fb57 	bl	8005784 <HAL_TIM_PWM_Start>

  HAL_IWDG_Init(&hiwdg);
 80020d6:	480b      	ldr	r0, [pc, #44]	@ (8002104 <main+0xa4>)
 80020d8:	f002 fc77 	bl	80049ca <HAL_IWDG_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80020dc:	f005 fd34 	bl	8007b48 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80020e0:	f7ff faa8 	bl	8001634 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80020e4:	f005 fd54 	bl	8007b90 <osKernelStart>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  printf("Error starting freeRTOS Scheduler.\n");
 80020e8:	4807      	ldr	r0, [pc, #28]	@ (8002108 <main+0xa8>)
 80020ea:	f01b f99f 	bl	801d42c <puts>
	  Error_Handler();
 80020ee:	f000 f8af 	bl	8002250 <Error_Handler>
	  printf("Error starting freeRTOS Scheduler.\n");
 80020f2:	bf00      	nop
 80020f4:	e7f8      	b.n	80020e8 <main+0x88>
 80020f6:	bf00      	nop
 80020f8:	0801e68c 	.word	0x0801e68c
 80020fc:	2000b174 	.word	0x2000b174
 8002100:	2000b1bc 	.word	0x2000b1bc
 8002104:	2000b110 	.word	0x2000b110
 8002108:	0801e6b0 	.word	0x0801e6b0

0800210c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b094      	sub	sp, #80	@ 0x50
 8002110:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002112:	f107 031c 	add.w	r3, r7, #28
 8002116:	2234      	movs	r2, #52	@ 0x34
 8002118:	2100      	movs	r1, #0
 800211a:	4618      	mov	r0, r3
 800211c:	f01b f9b8 	bl	801d490 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002120:	f107 0308 	add.w	r3, r7, #8
 8002124:	2200      	movs	r2, #0
 8002126:	601a      	str	r2, [r3, #0]
 8002128:	605a      	str	r2, [r3, #4]
 800212a:	609a      	str	r2, [r3, #8]
 800212c:	60da      	str	r2, [r3, #12]
 800212e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002130:	2300      	movs	r3, #0
 8002132:	607b      	str	r3, [r7, #4]
 8002134:	4b2d      	ldr	r3, [pc, #180]	@ (80021ec <SystemClock_Config+0xe0>)
 8002136:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002138:	4a2c      	ldr	r2, [pc, #176]	@ (80021ec <SystemClock_Config+0xe0>)
 800213a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800213e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002140:	4b2a      	ldr	r3, [pc, #168]	@ (80021ec <SystemClock_Config+0xe0>)
 8002142:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002144:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002148:	607b      	str	r3, [r7, #4]
 800214a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800214c:	2300      	movs	r3, #0
 800214e:	603b      	str	r3, [r7, #0]
 8002150:	4b27      	ldr	r3, [pc, #156]	@ (80021f0 <SystemClock_Config+0xe4>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a26      	ldr	r2, [pc, #152]	@ (80021f0 <SystemClock_Config+0xe4>)
 8002156:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800215a:	6013      	str	r3, [r2, #0]
 800215c:	4b24      	ldr	r3, [pc, #144]	@ (80021f0 <SystemClock_Config+0xe4>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002164:	603b      	str	r3, [r7, #0]
 8002166:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8002168:	2309      	movs	r3, #9
 800216a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800216c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002170:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002172:	2301      	movs	r3, #1
 8002174:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002176:	2302      	movs	r3, #2
 8002178:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800217a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800217e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002180:	2308      	movs	r3, #8
 8002182:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 195;
 8002184:	23c3      	movs	r3, #195	@ 0xc3
 8002186:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002188:	2302      	movs	r3, #2
 800218a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800218c:	2304      	movs	r3, #4
 800218e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002190:	2302      	movs	r3, #2
 8002192:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002194:	f107 031c 	add.w	r3, r7, #28
 8002198:	4618      	mov	r0, r3
 800219a:	f002 fef7 	bl	8004f8c <HAL_RCC_OscConfig>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d001      	beq.n	80021a8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80021a4:	f000 f854 	bl	8002250 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80021a8:	f002 fc64 	bl	8004a74 <HAL_PWREx_EnableOverDrive>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d001      	beq.n	80021b6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80021b2:	f000 f84d 	bl	8002250 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021b6:	230f      	movs	r3, #15
 80021b8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021ba:	2302      	movs	r3, #2
 80021bc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021be:	2300      	movs	r3, #0
 80021c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80021c2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80021c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80021c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021cc:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80021ce:	f107 0308 	add.w	r3, r7, #8
 80021d2:	2105      	movs	r1, #5
 80021d4:	4618      	mov	r0, r3
 80021d6:	f002 fc9d 	bl	8004b14 <HAL_RCC_ClockConfig>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d001      	beq.n	80021e4 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 80021e0:	f000 f836 	bl	8002250 <Error_Handler>
  }
}
 80021e4:	bf00      	nop
 80021e6:	3750      	adds	r7, #80	@ 0x50
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	40023800 	.word	0x40023800
 80021f0:	40007000 	.word	0x40007000

080021f4 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b086      	sub	sp, #24
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	60f8      	str	r0, [r7, #12]
 80021fc:	60b9      	str	r1, [r7, #8]
 80021fe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002200:	2300      	movs	r3, #0
 8002202:	617b      	str	r3, [r7, #20]
 8002204:	e009      	b.n	800221a <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	1c5a      	adds	r2, r3, #1
 800220a:	60ba      	str	r2, [r7, #8]
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	4618      	mov	r0, r3
 8002210:	f7ff fefe 	bl	8002010 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	3301      	adds	r3, #1
 8002218:	617b      	str	r3, [r7, #20]
 800221a:	697a      	ldr	r2, [r7, #20]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	429a      	cmp	r2, r3
 8002220:	dbf1      	blt.n	8002206 <_write+0x12>
  }
  return len;
 8002222:	687b      	ldr	r3, [r7, #4]
}
 8002224:	4618      	mov	r0, r3
 8002226:	3718      	adds	r7, #24
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}

0800222c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a04      	ldr	r2, [pc, #16]	@ (800224c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d101      	bne.n	8002242 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800223e:	f001 fcfb 	bl	8003c38 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002242:	bf00      	nop
 8002244:	3708      	adds	r7, #8
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	40010000 	.word	0x40010000

08002250 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002254:	b672      	cpsid	i
}
 8002256:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002258:	bf00      	nop
 800225a:	e7fd      	b.n	8002258 <Error_Handler+0x8>

0800225c <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8002266:	4b0c      	ldr	r3, [pc, #48]	@ (8002298 <microros_allocate+0x3c>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	461a      	mov	r2, r3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	4413      	add	r3, r2
 8002270:	461a      	mov	r2, r3
 8002272:	4b09      	ldr	r3, [pc, #36]	@ (8002298 <microros_allocate+0x3c>)
 8002274:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8002276:	4b09      	ldr	r3, [pc, #36]	@ (800229c <microros_allocate+0x40>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	461a      	mov	r2, r3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	4413      	add	r3, r2
 8002280:	461a      	mov	r2, r3
 8002282:	4b06      	ldr	r3, [pc, #24]	@ (800229c <microros_allocate+0x40>)
 8002284:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f7fe feae 	bl	8000fe8 <pvPortMallocMicroROS>
 800228c:	4603      	mov	r3, r0
}
 800228e:	4618      	mov	r0, r3
 8002290:	3708      	adds	r7, #8
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	2000b11c 	.word	0x2000b11c
 800229c:	2000b120 	.word	0x2000b120

080022a0 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d00c      	beq.n	80022ca <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f7fe ffbd 	bl	8001230 <getBlockSize>
 80022b6:	4603      	mov	r3, r0
 80022b8:	4a06      	ldr	r2, [pc, #24]	@ (80022d4 <microros_deallocate+0x34>)
 80022ba:	6812      	ldr	r2, [r2, #0]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	461a      	mov	r2, r3
 80022c0:	4b04      	ldr	r3, [pc, #16]	@ (80022d4 <microros_deallocate+0x34>)
 80022c2:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	f7fe ff57 	bl	8001178 <vPortFreeMicroROS>
  }
}
 80022ca:	bf00      	nop
 80022cc:	3708      	adds	r7, #8
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	2000b120 	.word	0x2000b120

080022d8 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 80022d8:	b580      	push	{r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0
 80022de:	60f8      	str	r0, [r7, #12]
 80022e0:	60b9      	str	r1, [r7, #8]
 80022e2:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 80022e4:	4b15      	ldr	r3, [pc, #84]	@ (800233c <microros_reallocate+0x64>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	461a      	mov	r2, r3
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	4413      	add	r3, r2
 80022ee:	461a      	mov	r2, r3
 80022f0:	4b12      	ldr	r3, [pc, #72]	@ (800233c <microros_reallocate+0x64>)
 80022f2:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80022f4:	4b12      	ldr	r3, [pc, #72]	@ (8002340 <microros_reallocate+0x68>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	461a      	mov	r2, r3
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	4413      	add	r3, r2
 80022fe:	461a      	mov	r2, r3
 8002300:	4b0f      	ldr	r3, [pc, #60]	@ (8002340 <microros_reallocate+0x68>)
 8002302:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d104      	bne.n	8002314 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 800230a:	68b8      	ldr	r0, [r7, #8]
 800230c:	f7fe fe6c 	bl	8000fe8 <pvPortMallocMicroROS>
 8002310:	4603      	mov	r3, r0
 8002312:	e00e      	b.n	8002332 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8002314:	68f8      	ldr	r0, [r7, #12]
 8002316:	f7fe ff8b 	bl	8001230 <getBlockSize>
 800231a:	4603      	mov	r3, r0
 800231c:	4a08      	ldr	r2, [pc, #32]	@ (8002340 <microros_reallocate+0x68>)
 800231e:	6812      	ldr	r2, [r2, #0]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	461a      	mov	r2, r3
 8002324:	4b06      	ldr	r3, [pc, #24]	@ (8002340 <microros_reallocate+0x68>)
 8002326:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8002328:	68b9      	ldr	r1, [r7, #8]
 800232a:	68f8      	ldr	r0, [r7, #12]
 800232c:	f7fe ff9e 	bl	800126c <pvPortReallocMicroROS>
 8002330:	4603      	mov	r3, r0
  }
}
 8002332:	4618      	mov	r0, r3
 8002334:	3710      	adds	r7, #16
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	2000b11c 	.word	0x2000b11c
 8002340:	2000b120 	.word	0x2000b120

08002344 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8002344:	b580      	push	{r7, lr}
 8002346:	b084      	sub	sp, #16
 8002348:	af00      	add	r7, sp, #0
 800234a:	60f8      	str	r0, [r7, #12]
 800234c:	60b9      	str	r1, [r7, #8]
 800234e:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	68ba      	ldr	r2, [r7, #8]
 8002354:	fb02 f303 	mul.w	r3, r2, r3
 8002358:	4a0c      	ldr	r2, [pc, #48]	@ (800238c <microros_zero_allocate+0x48>)
 800235a:	6812      	ldr	r2, [r2, #0]
 800235c:	4413      	add	r3, r2
 800235e:	461a      	mov	r2, r3
 8002360:	4b0a      	ldr	r3, [pc, #40]	@ (800238c <microros_zero_allocate+0x48>)
 8002362:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	68ba      	ldr	r2, [r7, #8]
 8002368:	fb02 f303 	mul.w	r3, r2, r3
 800236c:	4a08      	ldr	r2, [pc, #32]	@ (8002390 <microros_zero_allocate+0x4c>)
 800236e:	6812      	ldr	r2, [r2, #0]
 8002370:	4413      	add	r3, r2
 8002372:	461a      	mov	r2, r3
 8002374:	4b06      	ldr	r3, [pc, #24]	@ (8002390 <microros_zero_allocate+0x4c>)
 8002376:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8002378:	68b9      	ldr	r1, [r7, #8]
 800237a:	68f8      	ldr	r0, [r7, #12]
 800237c:	f7fe ffa3 	bl	80012c6 <pvPortCallocMicroROS>
 8002380:	4603      	mov	r3, r0
 8002382:	4618      	mov	r0, r3
 8002384:	3710      	adds	r7, #16
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	2000b11c 	.word	0x2000b11c
 8002390:	2000b120 	.word	0x2000b120
 8002394:	00000000 	.word	0x00000000

08002398 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8002398:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800239c:	b086      	sub	sp, #24
 800239e:	af00      	add	r7, sp, #0
 80023a0:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80023a4:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 80023a6:	2300      	movs	r3, #0
 80023a8:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 80023aa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80023ae:	a320      	add	r3, pc, #128	@ (adr r3, 8002430 <UTILS_NanosecondsToTimespec+0x98>)
 80023b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023b4:	f7fe fc32 	bl	8000c1c <__aeabi_ldivmod>
 80023b8:	4602      	mov	r2, r0
 80023ba:	460b      	mov	r3, r1
 80023bc:	6879      	ldr	r1, [r7, #4]
 80023be:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 80023c2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80023c6:	a31a      	add	r3, pc, #104	@ (adr r3, 8002430 <UTILS_NanosecondsToTimespec+0x98>)
 80023c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023cc:	f7fe fc26 	bl	8000c1c <__aeabi_ldivmod>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	da20      	bge.n	800241e <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	4a11      	ldr	r2, [pc, #68]	@ (8002428 <UTILS_NanosecondsToTimespec+0x90>)
 80023e2:	fb82 1203 	smull	r1, r2, r2, r3
 80023e6:	1712      	asrs	r2, r2, #28
 80023e8:	17db      	asrs	r3, r3, #31
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	3301      	adds	r3, #1
 80023ee:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023f6:	6979      	ldr	r1, [r7, #20]
 80023f8:	17c8      	asrs	r0, r1, #31
 80023fa:	460c      	mov	r4, r1
 80023fc:	4605      	mov	r5, r0
 80023fe:	ebb2 0804 	subs.w	r8, r2, r4
 8002402:	eb63 0905 	sbc.w	r9, r3, r5
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	689a      	ldr	r2, [r3, #8]
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	4906      	ldr	r1, [pc, #24]	@ (800242c <UTILS_NanosecondsToTimespec+0x94>)
 8002414:	fb01 f303 	mul.w	r3, r1, r3
 8002418:	441a      	add	r2, r3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	609a      	str	r2, [r3, #8]
    }
}
 800241e:	bf00      	nop
 8002420:	3718      	adds	r7, #24
 8002422:	46bd      	mov	sp, r7
 8002424:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002428:	44b82fa1 	.word	0x44b82fa1
 800242c:	3b9aca00 	.word	0x3b9aca00
 8002430:	3b9aca00 	.word	0x3b9aca00
 8002434:	00000000 	.word	0x00000000

08002438 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8002438:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800243c:	b08e      	sub	sp, #56	@ 0x38
 800243e:	af00      	add	r7, sp, #0
 8002440:	6278      	str	r0, [r7, #36]	@ 0x24
 8002442:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 8002444:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8002448:	2300      	movs	r3, #0
 800244a:	6013      	str	r3, [r2, #0]
 800244c:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 800244e:	f04f 0200 	mov.w	r2, #0
 8002452:	f04f 0300 	mov.w	r3, #0
 8002456:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 800245a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800245e:	4618      	mov	r0, r3
 8002460:	f006 ff1a 	bl	8009298 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8002464:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002466:	17da      	asrs	r2, r3, #31
 8002468:	61bb      	str	r3, [r7, #24]
 800246a:	61fa      	str	r2, [r7, #28]
 800246c:	f04f 0200 	mov.w	r2, #0
 8002470:	f04f 0300 	mov.w	r3, #0
 8002474:	69b9      	ldr	r1, [r7, #24]
 8002476:	000b      	movs	r3, r1
 8002478:	2200      	movs	r2, #0
 800247a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 800247e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002480:	2200      	movs	r2, #0
 8002482:	461c      	mov	r4, r3
 8002484:	4615      	mov	r5, r2
 8002486:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800248a:	1911      	adds	r1, r2, r4
 800248c:	60b9      	str	r1, [r7, #8]
 800248e:	416b      	adcs	r3, r5
 8002490:	60fb      	str	r3, [r7, #12]
 8002492:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002496:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 800249a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800249e:	4602      	mov	r2, r0
 80024a0:	460b      	mov	r3, r1
 80024a2:	f04f 0400 	mov.w	r4, #0
 80024a6:	f04f 0500 	mov.w	r5, #0
 80024aa:	015d      	lsls	r5, r3, #5
 80024ac:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 80024b0:	0154      	lsls	r4, r2, #5
 80024b2:	4622      	mov	r2, r4
 80024b4:	462b      	mov	r3, r5
 80024b6:	ebb2 0800 	subs.w	r8, r2, r0
 80024ba:	eb63 0901 	sbc.w	r9, r3, r1
 80024be:	f04f 0200 	mov.w	r2, #0
 80024c2:	f04f 0300 	mov.w	r3, #0
 80024c6:	ea4f 2349 	mov.w	r3, r9, lsl #9
 80024ca:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 80024ce:	ea4f 2248 	mov.w	r2, r8, lsl #9
 80024d2:	4690      	mov	r8, r2
 80024d4:	4699      	mov	r9, r3
 80024d6:	eb18 0a00 	adds.w	sl, r8, r0
 80024da:	eb49 0b01 	adc.w	fp, r9, r1
 80024de:	f04f 0200 	mov.w	r2, #0
 80024e2:	f04f 0300 	mov.w	r3, #0
 80024e6:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80024ea:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80024ee:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80024f2:	ebb2 040a 	subs.w	r4, r2, sl
 80024f6:	603c      	str	r4, [r7, #0]
 80024f8:	eb63 030b 	sbc.w	r3, r3, fp
 80024fc:	607b      	str	r3, [r7, #4]
 80024fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002502:	4623      	mov	r3, r4
 8002504:	181b      	adds	r3, r3, r0
 8002506:	613b      	str	r3, [r7, #16]
 8002508:	462b      	mov	r3, r5
 800250a:	eb41 0303 	adc.w	r3, r1, r3
 800250e:	617b      	str	r3, [r7, #20]
 8002510:	6a3a      	ldr	r2, [r7, #32]
 8002512:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002516:	f7ff ff3f 	bl	8002398 <UTILS_NanosecondsToTimespec>

    return 0;
 800251a:	2300      	movs	r3, #0
 800251c:	4618      	mov	r0, r3
 800251e:	3738      	adds	r7, #56	@ 0x38
 8002520:	46bd      	mov	sp, r7
 8002522:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08002528 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800252e:	2300      	movs	r3, #0
 8002530:	607b      	str	r3, [r7, #4]
 8002532:	4b12      	ldr	r3, [pc, #72]	@ (800257c <HAL_MspInit+0x54>)
 8002534:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002536:	4a11      	ldr	r2, [pc, #68]	@ (800257c <HAL_MspInit+0x54>)
 8002538:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800253c:	6453      	str	r3, [r2, #68]	@ 0x44
 800253e:	4b0f      	ldr	r3, [pc, #60]	@ (800257c <HAL_MspInit+0x54>)
 8002540:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002542:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002546:	607b      	str	r3, [r7, #4]
 8002548:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800254a:	2300      	movs	r3, #0
 800254c:	603b      	str	r3, [r7, #0]
 800254e:	4b0b      	ldr	r3, [pc, #44]	@ (800257c <HAL_MspInit+0x54>)
 8002550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002552:	4a0a      	ldr	r2, [pc, #40]	@ (800257c <HAL_MspInit+0x54>)
 8002554:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002558:	6413      	str	r3, [r2, #64]	@ 0x40
 800255a:	4b08      	ldr	r3, [pc, #32]	@ (800257c <HAL_MspInit+0x54>)
 800255c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800255e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002562:	603b      	str	r3, [r7, #0]
 8002564:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002566:	2200      	movs	r2, #0
 8002568:	210f      	movs	r1, #15
 800256a:	f06f 0001 	mvn.w	r0, #1
 800256e:	f001 fc3b 	bl	8003de8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002572:	bf00      	nop
 8002574:	3708      	adds	r7, #8
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	40023800 	.word	0x40023800

08002580 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b08c      	sub	sp, #48	@ 0x30
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002588:	2300      	movs	r3, #0
 800258a:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 800258c:	2300      	movs	r3, #0
 800258e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002590:	2300      	movs	r3, #0
 8002592:	60bb      	str	r3, [r7, #8]
 8002594:	4b2f      	ldr	r3, [pc, #188]	@ (8002654 <HAL_InitTick+0xd4>)
 8002596:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002598:	4a2e      	ldr	r2, [pc, #184]	@ (8002654 <HAL_InitTick+0xd4>)
 800259a:	f043 0301 	orr.w	r3, r3, #1
 800259e:	6453      	str	r3, [r2, #68]	@ 0x44
 80025a0:	4b2c      	ldr	r3, [pc, #176]	@ (8002654 <HAL_InitTick+0xd4>)
 80025a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025a4:	f003 0301 	and.w	r3, r3, #1
 80025a8:	60bb      	str	r3, [r7, #8]
 80025aa:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80025ac:	f107 020c 	add.w	r2, r7, #12
 80025b0:	f107 0310 	add.w	r3, r7, #16
 80025b4:	4611      	mov	r1, r2
 80025b6:	4618      	mov	r0, r3
 80025b8:	f002 fcb6 	bl	8004f28 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80025bc:	f002 fca0 	bl	8004f00 <HAL_RCC_GetPCLK2Freq>
 80025c0:	4603      	mov	r3, r0
 80025c2:	005b      	lsls	r3, r3, #1
 80025c4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80025c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025c8:	4a23      	ldr	r2, [pc, #140]	@ (8002658 <HAL_InitTick+0xd8>)
 80025ca:	fba2 2303 	umull	r2, r3, r2, r3
 80025ce:	0c9b      	lsrs	r3, r3, #18
 80025d0:	3b01      	subs	r3, #1
 80025d2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80025d4:	4b21      	ldr	r3, [pc, #132]	@ (800265c <HAL_InitTick+0xdc>)
 80025d6:	4a22      	ldr	r2, [pc, #136]	@ (8002660 <HAL_InitTick+0xe0>)
 80025d8:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80025da:	4b20      	ldr	r3, [pc, #128]	@ (800265c <HAL_InitTick+0xdc>)
 80025dc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80025e0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80025e2:	4a1e      	ldr	r2, [pc, #120]	@ (800265c <HAL_InitTick+0xdc>)
 80025e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025e6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80025e8:	4b1c      	ldr	r3, [pc, #112]	@ (800265c <HAL_InitTick+0xdc>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025ee:	4b1b      	ldr	r3, [pc, #108]	@ (800265c <HAL_InitTick+0xdc>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025f4:	4b19      	ldr	r3, [pc, #100]	@ (800265c <HAL_InitTick+0xdc>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80025fa:	4818      	ldr	r0, [pc, #96]	@ (800265c <HAL_InitTick+0xdc>)
 80025fc:	f002 ff4a 	bl	8005494 <HAL_TIM_Base_Init>
 8002600:	4603      	mov	r3, r0
 8002602:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8002606:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800260a:	2b00      	cmp	r3, #0
 800260c:	d11b      	bne.n	8002646 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800260e:	4813      	ldr	r0, [pc, #76]	@ (800265c <HAL_InitTick+0xdc>)
 8002610:	f002 fff8 	bl	8005604 <HAL_TIM_Base_Start_IT>
 8002614:	4603      	mov	r3, r0
 8002616:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800261a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800261e:	2b00      	cmp	r3, #0
 8002620:	d111      	bne.n	8002646 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002622:	2019      	movs	r0, #25
 8002624:	f001 fbfc 	bl	8003e20 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2b0f      	cmp	r3, #15
 800262c:	d808      	bhi.n	8002640 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800262e:	2200      	movs	r2, #0
 8002630:	6879      	ldr	r1, [r7, #4]
 8002632:	2019      	movs	r0, #25
 8002634:	f001 fbd8 	bl	8003de8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002638:	4a0a      	ldr	r2, [pc, #40]	@ (8002664 <HAL_InitTick+0xe4>)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6013      	str	r3, [r2, #0]
 800263e:	e002      	b.n	8002646 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002646:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800264a:	4618      	mov	r0, r3
 800264c:	3730      	adds	r7, #48	@ 0x30
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	40023800 	.word	0x40023800
 8002658:	431bde83 	.word	0x431bde83
 800265c:	2000b124 	.word	0x2000b124
 8002660:	40010000 	.word	0x40010000
 8002664:	200000d0 	.word	0x200000d0

08002668 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002668:	b480      	push	{r7}
 800266a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800266c:	bf00      	nop
 800266e:	e7fd      	b.n	800266c <NMI_Handler+0x4>

08002670 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002670:	b480      	push	{r7}
 8002672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002674:	bf00      	nop
 8002676:	e7fd      	b.n	8002674 <HardFault_Handler+0x4>

08002678 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002678:	b480      	push	{r7}
 800267a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800267c:	bf00      	nop
 800267e:	e7fd      	b.n	800267c <MemManage_Handler+0x4>

08002680 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002684:	bf00      	nop
 8002686:	e7fd      	b.n	8002684 <BusFault_Handler+0x4>

08002688 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002688:	b480      	push	{r7}
 800268a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800268c:	bf00      	nop
 800268e:	e7fd      	b.n	800268c <UsageFault_Handler+0x4>

08002690 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002690:	b480      	push	{r7}
 8002692:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002694:	bf00      	nop
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
	...

080026a0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80026a4:	4802      	ldr	r0, [pc, #8]	@ (80026b0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80026a6:	f003 f935 	bl	8005914 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80026aa:	bf00      	nop
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	2000b124 	.word	0x2000b124

080026b4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80026b8:	4802      	ldr	r0, [pc, #8]	@ (80026c4 <USART1_IRQHandler+0x10>)
 80026ba:	f004 f8e3 	bl	8006884 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80026be:	bf00      	nop
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	2000b204 	.word	0x2000b204

080026c8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80026cc:	4802      	ldr	r0, [pc, #8]	@ (80026d8 <DMA2_Stream2_IRQHandler+0x10>)
 80026ce:	f001 fd4d 	bl	800416c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80026d2:	bf00      	nop
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	2000b24c 	.word	0x2000b24c

080026dc <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80026e0:	4802      	ldr	r0, [pc, #8]	@ (80026ec <DMA2_Stream7_IRQHandler+0x10>)
 80026e2:	f001 fd43 	bl	800416c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80026e6:	bf00      	nop
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	2000b2ac 	.word	0x2000b2ac

080026f0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80026f0:	b480      	push	{r7}
 80026f2:	af00      	add	r7, sp, #0
  return 1;
 80026f4:	2301      	movs	r3, #1
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr

08002700 <_kill>:

int _kill(int pid, int sig)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b082      	sub	sp, #8
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800270a:	f01a ff21 	bl	801d550 <__errno>
 800270e:	4603      	mov	r3, r0
 8002710:	2216      	movs	r2, #22
 8002712:	601a      	str	r2, [r3, #0]
  return -1;
 8002714:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002718:	4618      	mov	r0, r3
 800271a:	3708      	adds	r7, #8
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}

08002720 <_exit>:

void _exit (int status)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b082      	sub	sp, #8
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002728:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	f7ff ffe7 	bl	8002700 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002732:	bf00      	nop
 8002734:	e7fd      	b.n	8002732 <_exit+0x12>

08002736 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002736:	b580      	push	{r7, lr}
 8002738:	b086      	sub	sp, #24
 800273a:	af00      	add	r7, sp, #0
 800273c:	60f8      	str	r0, [r7, #12]
 800273e:	60b9      	str	r1, [r7, #8]
 8002740:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002742:	2300      	movs	r3, #0
 8002744:	617b      	str	r3, [r7, #20]
 8002746:	e00a      	b.n	800275e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002748:	f3af 8000 	nop.w
 800274c:	4601      	mov	r1, r0
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	1c5a      	adds	r2, r3, #1
 8002752:	60ba      	str	r2, [r7, #8]
 8002754:	b2ca      	uxtb	r2, r1
 8002756:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	3301      	adds	r3, #1
 800275c:	617b      	str	r3, [r7, #20]
 800275e:	697a      	ldr	r2, [r7, #20]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	429a      	cmp	r2, r3
 8002764:	dbf0      	blt.n	8002748 <_read+0x12>
  }

  return len;
 8002766:	687b      	ldr	r3, [r7, #4]
}
 8002768:	4618      	mov	r0, r3
 800276a:	3718      	adds	r7, #24
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}

08002770 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002778:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800277c:	4618      	mov	r0, r3
 800277e:	370c      	adds	r7, #12
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr

08002788 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002798:	605a      	str	r2, [r3, #4]
  return 0;
 800279a:	2300      	movs	r3, #0
}
 800279c:	4618      	mov	r0, r3
 800279e:	370c      	adds	r7, #12
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr

080027a8 <_isatty>:

int _isatty(int file)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b083      	sub	sp, #12
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80027b0:	2301      	movs	r3, #1
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	370c      	adds	r7, #12
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr

080027be <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80027be:	b480      	push	{r7}
 80027c0:	b085      	sub	sp, #20
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	60f8      	str	r0, [r7, #12]
 80027c6:	60b9      	str	r1, [r7, #8]
 80027c8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80027ca:	2300      	movs	r3, #0
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3714      	adds	r7, #20
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr

080027d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b086      	sub	sp, #24
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027e0:	4a14      	ldr	r2, [pc, #80]	@ (8002834 <_sbrk+0x5c>)
 80027e2:	4b15      	ldr	r3, [pc, #84]	@ (8002838 <_sbrk+0x60>)
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027ec:	4b13      	ldr	r3, [pc, #76]	@ (800283c <_sbrk+0x64>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d102      	bne.n	80027fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027f4:	4b11      	ldr	r3, [pc, #68]	@ (800283c <_sbrk+0x64>)
 80027f6:	4a12      	ldr	r2, [pc, #72]	@ (8002840 <_sbrk+0x68>)
 80027f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027fa:	4b10      	ldr	r3, [pc, #64]	@ (800283c <_sbrk+0x64>)
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4413      	add	r3, r2
 8002802:	693a      	ldr	r2, [r7, #16]
 8002804:	429a      	cmp	r2, r3
 8002806:	d207      	bcs.n	8002818 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002808:	f01a fea2 	bl	801d550 <__errno>
 800280c:	4603      	mov	r3, r0
 800280e:	220c      	movs	r2, #12
 8002810:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002812:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002816:	e009      	b.n	800282c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002818:	4b08      	ldr	r3, [pc, #32]	@ (800283c <_sbrk+0x64>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800281e:	4b07      	ldr	r3, [pc, #28]	@ (800283c <_sbrk+0x64>)
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	4413      	add	r3, r2
 8002826:	4a05      	ldr	r2, [pc, #20]	@ (800283c <_sbrk+0x64>)
 8002828:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800282a:	68fb      	ldr	r3, [r7, #12]
}
 800282c:	4618      	mov	r0, r3
 800282e:	3718      	adds	r7, #24
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}
 8002834:	20050000 	.word	0x20050000
 8002838:	00000400 	.word	0x00000400
 800283c:	2000b170 	.word	0x2000b170
 8002840:	20019d90 	.word	0x20019d90

08002844 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002844:	b480      	push	{r7}
 8002846:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002848:	4b06      	ldr	r3, [pc, #24]	@ (8002864 <SystemInit+0x20>)
 800284a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800284e:	4a05      	ldr	r2, [pc, #20]	@ (8002864 <SystemInit+0x20>)
 8002850:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002854:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002858:	bf00      	nop
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr
 8002862:	bf00      	nop
 8002864:	e000ed00 	.word	0xe000ed00

08002868 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b08a      	sub	sp, #40	@ 0x28
 800286c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800286e:	f107 0320 	add.w	r3, r7, #32
 8002872:	2200      	movs	r2, #0
 8002874:	601a      	str	r2, [r3, #0]
 8002876:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002878:	1d3b      	adds	r3, r7, #4
 800287a:	2200      	movs	r2, #0
 800287c:	601a      	str	r2, [r3, #0]
 800287e:	605a      	str	r2, [r3, #4]
 8002880:	609a      	str	r2, [r3, #8]
 8002882:	60da      	str	r2, [r3, #12]
 8002884:	611a      	str	r2, [r3, #16]
 8002886:	615a      	str	r2, [r3, #20]
 8002888:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800288a:	4b33      	ldr	r3, [pc, #204]	@ (8002958 <MX_TIM2_Init+0xf0>)
 800288c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002890:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 8002892:	4b31      	ldr	r3, [pc, #196]	@ (8002958 <MX_TIM2_Init+0xf0>)
 8002894:	2259      	movs	r2, #89	@ 0x59
 8002896:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002898:	4b2f      	ldr	r3, [pc, #188]	@ (8002958 <MX_TIM2_Init+0xf0>)
 800289a:	2200      	movs	r2, #0
 800289c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000-1;
 800289e:	4b2e      	ldr	r3, [pc, #184]	@ (8002958 <MX_TIM2_Init+0xf0>)
 80028a0:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80028a4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028a6:	4b2c      	ldr	r3, [pc, #176]	@ (8002958 <MX_TIM2_Init+0xf0>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028ac:	4b2a      	ldr	r3, [pc, #168]	@ (8002958 <MX_TIM2_Init+0xf0>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80028b2:	4829      	ldr	r0, [pc, #164]	@ (8002958 <MX_TIM2_Init+0xf0>)
 80028b4:	f002 ff16 	bl	80056e4 <HAL_TIM_PWM_Init>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d001      	beq.n	80028c2 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80028be:	f7ff fcc7 	bl	8002250 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028c2:	2300      	movs	r3, #0
 80028c4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028c6:	2300      	movs	r3, #0
 80028c8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80028ca:	f107 0320 	add.w	r3, r7, #32
 80028ce:	4619      	mov	r1, r3
 80028d0:	4821      	ldr	r0, [pc, #132]	@ (8002958 <MX_TIM2_Init+0xf0>)
 80028d2:	f003 fdd7 	bl	8006484 <HAL_TIMEx_MasterConfigSynchronization>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d001      	beq.n	80028e0 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80028dc:	f7ff fcb8 	bl	8002250 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80028e0:	2360      	movs	r3, #96	@ 0x60
 80028e2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1500-1;
 80028e4:	f240 53db 	movw	r3, #1499	@ 0x5db
 80028e8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80028ea:	2300      	movs	r3, #0
 80028ec:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80028ee:	2300      	movs	r3, #0
 80028f0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80028f2:	1d3b      	adds	r3, r7, #4
 80028f4:	2200      	movs	r2, #0
 80028f6:	4619      	mov	r1, r3
 80028f8:	4817      	ldr	r0, [pc, #92]	@ (8002958 <MX_TIM2_Init+0xf0>)
 80028fa:	f003 f8fb 	bl	8005af4 <HAL_TIM_PWM_ConfigChannel>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d001      	beq.n	8002908 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8002904:	f7ff fca4 	bl	8002250 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002908:	1d3b      	adds	r3, r7, #4
 800290a:	2204      	movs	r2, #4
 800290c:	4619      	mov	r1, r3
 800290e:	4812      	ldr	r0, [pc, #72]	@ (8002958 <MX_TIM2_Init+0xf0>)
 8002910:	f003 f8f0 	bl	8005af4 <HAL_TIM_PWM_ConfigChannel>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d001      	beq.n	800291e <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 800291a:	f7ff fc99 	bl	8002250 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800291e:	1d3b      	adds	r3, r7, #4
 8002920:	2208      	movs	r2, #8
 8002922:	4619      	mov	r1, r3
 8002924:	480c      	ldr	r0, [pc, #48]	@ (8002958 <MX_TIM2_Init+0xf0>)
 8002926:	f003 f8e5 	bl	8005af4 <HAL_TIM_PWM_ConfigChannel>
 800292a:	4603      	mov	r3, r0
 800292c:	2b00      	cmp	r3, #0
 800292e:	d001      	beq.n	8002934 <MX_TIM2_Init+0xcc>
  {
    Error_Handler();
 8002930:	f7ff fc8e 	bl	8002250 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002934:	1d3b      	adds	r3, r7, #4
 8002936:	220c      	movs	r2, #12
 8002938:	4619      	mov	r1, r3
 800293a:	4807      	ldr	r0, [pc, #28]	@ (8002958 <MX_TIM2_Init+0xf0>)
 800293c:	f003 f8da 	bl	8005af4 <HAL_TIM_PWM_ConfigChannel>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d001      	beq.n	800294a <MX_TIM2_Init+0xe2>
  {
    Error_Handler();
 8002946:	f7ff fc83 	bl	8002250 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800294a:	4803      	ldr	r0, [pc, #12]	@ (8002958 <MX_TIM2_Init+0xf0>)
 800294c:	f000 f8e0 	bl	8002b10 <HAL_TIM_MspPostInit>

}
 8002950:	bf00      	nop
 8002952:	3728      	adds	r7, #40	@ 0x28
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}
 8002958:	2000b174 	.word	0x2000b174

0800295c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b08e      	sub	sp, #56	@ 0x38
 8002960:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002962:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002966:	2200      	movs	r2, #0
 8002968:	601a      	str	r2, [r3, #0]
 800296a:	605a      	str	r2, [r3, #4]
 800296c:	609a      	str	r2, [r3, #8]
 800296e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002970:	f107 0320 	add.w	r3, r7, #32
 8002974:	2200      	movs	r2, #0
 8002976:	601a      	str	r2, [r3, #0]
 8002978:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800297a:	1d3b      	adds	r3, r7, #4
 800297c:	2200      	movs	r2, #0
 800297e:	601a      	str	r2, [r3, #0]
 8002980:	605a      	str	r2, [r3, #4]
 8002982:	609a      	str	r2, [r3, #8]
 8002984:	60da      	str	r2, [r3, #12]
 8002986:	611a      	str	r2, [r3, #16]
 8002988:	615a      	str	r2, [r3, #20]
 800298a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800298c:	4b3d      	ldr	r3, [pc, #244]	@ (8002a84 <MX_TIM3_Init+0x128>)
 800298e:	4a3e      	ldr	r2, [pc, #248]	@ (8002a88 <MX_TIM3_Init+0x12c>)
 8002990:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 90-1;
 8002992:	4b3c      	ldr	r3, [pc, #240]	@ (8002a84 <MX_TIM3_Init+0x128>)
 8002994:	2259      	movs	r2, #89	@ 0x59
 8002996:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002998:	4b3a      	ldr	r3, [pc, #232]	@ (8002a84 <MX_TIM3_Init+0x128>)
 800299a:	2200      	movs	r2, #0
 800299c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 800299e:	4b39      	ldr	r3, [pc, #228]	@ (8002a84 <MX_TIM3_Init+0x128>)
 80029a0:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80029a4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029a6:	4b37      	ldr	r3, [pc, #220]	@ (8002a84 <MX_TIM3_Init+0x128>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029ac:	4b35      	ldr	r3, [pc, #212]	@ (8002a84 <MX_TIM3_Init+0x128>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80029b2:	4834      	ldr	r0, [pc, #208]	@ (8002a84 <MX_TIM3_Init+0x128>)
 80029b4:	f002 fd6e 	bl	8005494 <HAL_TIM_Base_Init>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d001      	beq.n	80029c2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80029be:	f7ff fc47 	bl	8002250 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80029c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80029c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80029c8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80029cc:	4619      	mov	r1, r3
 80029ce:	482d      	ldr	r0, [pc, #180]	@ (8002a84 <MX_TIM3_Init+0x128>)
 80029d0:	f003 f952 	bl	8005c78 <HAL_TIM_ConfigClockSource>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d001      	beq.n	80029de <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80029da:	f7ff fc39 	bl	8002250 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80029de:	4829      	ldr	r0, [pc, #164]	@ (8002a84 <MX_TIM3_Init+0x128>)
 80029e0:	f002 fe80 	bl	80056e4 <HAL_TIM_PWM_Init>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d001      	beq.n	80029ee <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80029ea:	f7ff fc31 	bl	8002250 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029ee:	2300      	movs	r3, #0
 80029f0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029f2:	2300      	movs	r3, #0
 80029f4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80029f6:	f107 0320 	add.w	r3, r7, #32
 80029fa:	4619      	mov	r1, r3
 80029fc:	4821      	ldr	r0, [pc, #132]	@ (8002a84 <MX_TIM3_Init+0x128>)
 80029fe:	f003 fd41 	bl	8006484 <HAL_TIMEx_MasterConfigSynchronization>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d001      	beq.n	8002a0c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002a08:	f7ff fc22 	bl	8002250 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a0c:	2360      	movs	r3, #96	@ 0x60
 8002a0e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1500-1;
 8002a10:	f240 53db 	movw	r3, #1499	@ 0x5db
 8002a14:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a16:	2300      	movs	r3, #0
 8002a18:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a1e:	1d3b      	adds	r3, r7, #4
 8002a20:	2200      	movs	r2, #0
 8002a22:	4619      	mov	r1, r3
 8002a24:	4817      	ldr	r0, [pc, #92]	@ (8002a84 <MX_TIM3_Init+0x128>)
 8002a26:	f003 f865 	bl	8005af4 <HAL_TIM_PWM_ConfigChannel>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d001      	beq.n	8002a34 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8002a30:	f7ff fc0e 	bl	8002250 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002a34:	1d3b      	adds	r3, r7, #4
 8002a36:	2204      	movs	r2, #4
 8002a38:	4619      	mov	r1, r3
 8002a3a:	4812      	ldr	r0, [pc, #72]	@ (8002a84 <MX_TIM3_Init+0x128>)
 8002a3c:	f003 f85a 	bl	8005af4 <HAL_TIM_PWM_ConfigChannel>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d001      	beq.n	8002a4a <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8002a46:	f7ff fc03 	bl	8002250 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002a4a:	1d3b      	adds	r3, r7, #4
 8002a4c:	2208      	movs	r2, #8
 8002a4e:	4619      	mov	r1, r3
 8002a50:	480c      	ldr	r0, [pc, #48]	@ (8002a84 <MX_TIM3_Init+0x128>)
 8002a52:	f003 f84f 	bl	8005af4 <HAL_TIM_PWM_ConfigChannel>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d001      	beq.n	8002a60 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8002a5c:	f7ff fbf8 	bl	8002250 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002a60:	1d3b      	adds	r3, r7, #4
 8002a62:	220c      	movs	r2, #12
 8002a64:	4619      	mov	r1, r3
 8002a66:	4807      	ldr	r0, [pc, #28]	@ (8002a84 <MX_TIM3_Init+0x128>)
 8002a68:	f003 f844 	bl	8005af4 <HAL_TIM_PWM_ConfigChannel>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d001      	beq.n	8002a76 <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 8002a72:	f7ff fbed 	bl	8002250 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002a76:	4803      	ldr	r0, [pc, #12]	@ (8002a84 <MX_TIM3_Init+0x128>)
 8002a78:	f000 f84a 	bl	8002b10 <HAL_TIM_MspPostInit>

}
 8002a7c:	bf00      	nop
 8002a7e:	3738      	adds	r7, #56	@ 0x38
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	2000b1bc 	.word	0x2000b1bc
 8002a88:	40000400 	.word	0x40000400

08002a8c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b085      	sub	sp, #20
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a9c:	d10d      	bne.n	8002aba <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	60fb      	str	r3, [r7, #12]
 8002aa2:	4b09      	ldr	r3, [pc, #36]	@ (8002ac8 <HAL_TIM_PWM_MspInit+0x3c>)
 8002aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aa6:	4a08      	ldr	r2, [pc, #32]	@ (8002ac8 <HAL_TIM_PWM_MspInit+0x3c>)
 8002aa8:	f043 0301 	orr.w	r3, r3, #1
 8002aac:	6413      	str	r3, [r2, #64]	@ 0x40
 8002aae:	4b06      	ldr	r3, [pc, #24]	@ (8002ac8 <HAL_TIM_PWM_MspInit+0x3c>)
 8002ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ab2:	f003 0301 	and.w	r3, r3, #1
 8002ab6:	60fb      	str	r3, [r7, #12]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002aba:	bf00      	nop
 8002abc:	3714      	adds	r7, #20
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr
 8002ac6:	bf00      	nop
 8002ac8:	40023800 	.word	0x40023800

08002acc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b085      	sub	sp, #20
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a0b      	ldr	r2, [pc, #44]	@ (8002b08 <HAL_TIM_Base_MspInit+0x3c>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d10d      	bne.n	8002afa <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002ade:	2300      	movs	r3, #0
 8002ae0:	60fb      	str	r3, [r7, #12]
 8002ae2:	4b0a      	ldr	r3, [pc, #40]	@ (8002b0c <HAL_TIM_Base_MspInit+0x40>)
 8002ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ae6:	4a09      	ldr	r2, [pc, #36]	@ (8002b0c <HAL_TIM_Base_MspInit+0x40>)
 8002ae8:	f043 0302 	orr.w	r3, r3, #2
 8002aec:	6413      	str	r3, [r2, #64]	@ 0x40
 8002aee:	4b07      	ldr	r3, [pc, #28]	@ (8002b0c <HAL_TIM_Base_MspInit+0x40>)
 8002af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002af2:	f003 0302 	and.w	r3, r3, #2
 8002af6:	60fb      	str	r3, [r7, #12]
 8002af8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002afa:	bf00      	nop
 8002afc:	3714      	adds	r7, #20
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr
 8002b06:	bf00      	nop
 8002b08:	40000400 	.word	0x40000400
 8002b0c:	40023800 	.word	0x40023800

08002b10 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b08c      	sub	sp, #48	@ 0x30
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b18:	f107 031c 	add.w	r3, r7, #28
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	601a      	str	r2, [r3, #0]
 8002b20:	605a      	str	r2, [r3, #4]
 8002b22:	609a      	str	r2, [r3, #8]
 8002b24:	60da      	str	r2, [r3, #12]
 8002b26:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b30:	d11e      	bne.n	8002b70 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b32:	2300      	movs	r3, #0
 8002b34:	61bb      	str	r3, [r7, #24]
 8002b36:	4b40      	ldr	r3, [pc, #256]	@ (8002c38 <HAL_TIM_MspPostInit+0x128>)
 8002b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b3a:	4a3f      	ldr	r2, [pc, #252]	@ (8002c38 <HAL_TIM_MspPostInit+0x128>)
 8002b3c:	f043 0301 	orr.w	r3, r3, #1
 8002b40:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b42:	4b3d      	ldr	r3, [pc, #244]	@ (8002c38 <HAL_TIM_MspPostInit+0x128>)
 8002b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b46:	f003 0301 	and.w	r3, r3, #1
 8002b4a:	61bb      	str	r3, [r7, #24]
 8002b4c:	69bb      	ldr	r3, [r7, #24]
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5;
 8002b4e:	232e      	movs	r3, #46	@ 0x2e
 8002b50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b52:	2302      	movs	r3, #2
 8002b54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b56:	2300      	movs	r3, #0
 8002b58:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b62:	f107 031c 	add.w	r3, r7, #28
 8002b66:	4619      	mov	r1, r3
 8002b68:	4834      	ldr	r0, [pc, #208]	@ (8002c3c <HAL_TIM_MspPostInit+0x12c>)
 8002b6a:	f001 fd69 	bl	8004640 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002b6e:	e05e      	b.n	8002c2e <HAL_TIM_MspPostInit+0x11e>
  else if(timHandle->Instance==TIM3)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a32      	ldr	r2, [pc, #200]	@ (8002c40 <HAL_TIM_MspPostInit+0x130>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d159      	bne.n	8002c2e <HAL_TIM_MspPostInit+0x11e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	617b      	str	r3, [r7, #20]
 8002b7e:	4b2e      	ldr	r3, [pc, #184]	@ (8002c38 <HAL_TIM_MspPostInit+0x128>)
 8002b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b82:	4a2d      	ldr	r2, [pc, #180]	@ (8002c38 <HAL_TIM_MspPostInit+0x128>)
 8002b84:	f043 0301 	orr.w	r3, r3, #1
 8002b88:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b8a:	4b2b      	ldr	r3, [pc, #172]	@ (8002c38 <HAL_TIM_MspPostInit+0x128>)
 8002b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b8e:	f003 0301 	and.w	r3, r3, #1
 8002b92:	617b      	str	r3, [r7, #20]
 8002b94:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b96:	2300      	movs	r3, #0
 8002b98:	613b      	str	r3, [r7, #16]
 8002b9a:	4b27      	ldr	r3, [pc, #156]	@ (8002c38 <HAL_TIM_MspPostInit+0x128>)
 8002b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b9e:	4a26      	ldr	r2, [pc, #152]	@ (8002c38 <HAL_TIM_MspPostInit+0x128>)
 8002ba0:	f043 0302 	orr.w	r3, r3, #2
 8002ba4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ba6:	4b24      	ldr	r3, [pc, #144]	@ (8002c38 <HAL_TIM_MspPostInit+0x128>)
 8002ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002baa:	f003 0302 	and.w	r3, r3, #2
 8002bae:	613b      	str	r3, [r7, #16]
 8002bb0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	60fb      	str	r3, [r7, #12]
 8002bb6:	4b20      	ldr	r3, [pc, #128]	@ (8002c38 <HAL_TIM_MspPostInit+0x128>)
 8002bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bba:	4a1f      	ldr	r2, [pc, #124]	@ (8002c38 <HAL_TIM_MspPostInit+0x128>)
 8002bbc:	f043 0304 	orr.w	r3, r3, #4
 8002bc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bc2:	4b1d      	ldr	r3, [pc, #116]	@ (8002c38 <HAL_TIM_MspPostInit+0x128>)
 8002bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bc6:	f003 0304 	and.w	r3, r3, #4
 8002bca:	60fb      	str	r3, [r7, #12]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002bce:	2340      	movs	r3, #64	@ 0x40
 8002bd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bd2:	2302      	movs	r3, #2
 8002bd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002bde:	2302      	movs	r3, #2
 8002be0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002be2:	f107 031c 	add.w	r3, r7, #28
 8002be6:	4619      	mov	r1, r3
 8002be8:	4814      	ldr	r0, [pc, #80]	@ (8002c3c <HAL_TIM_MspPostInit+0x12c>)
 8002bea:	f001 fd29 	bl	8004640 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bf2:	2302      	movs	r3, #2
 8002bf4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002bfe:	2302      	movs	r3, #2
 8002c00:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c02:	f107 031c 	add.w	r3, r7, #28
 8002c06:	4619      	mov	r1, r3
 8002c08:	480e      	ldr	r0, [pc, #56]	@ (8002c44 <HAL_TIM_MspPostInit+0x134>)
 8002c0a:	f001 fd19 	bl	8004640 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002c0e:	2380      	movs	r3, #128	@ 0x80
 8002c10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c12:	2302      	movs	r3, #2
 8002c14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c16:	2300      	movs	r3, #0
 8002c18:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002c1e:	2302      	movs	r3, #2
 8002c20:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c22:	f107 031c 	add.w	r3, r7, #28
 8002c26:	4619      	mov	r1, r3
 8002c28:	4807      	ldr	r0, [pc, #28]	@ (8002c48 <HAL_TIM_MspPostInit+0x138>)
 8002c2a:	f001 fd09 	bl	8004640 <HAL_GPIO_Init>
}
 8002c2e:	bf00      	nop
 8002c30:	3730      	adds	r7, #48	@ 0x30
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	40023800 	.word	0x40023800
 8002c3c:	40020000 	.word	0x40020000
 8002c40:	40000400 	.word	0x40000400
 8002c44:	40020400 	.word	0x40020400
 8002c48:	40020800 	.word	0x40020800

08002c4c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002c50:	4b11      	ldr	r3, [pc, #68]	@ (8002c98 <MX_USART1_UART_Init+0x4c>)
 8002c52:	4a12      	ldr	r2, [pc, #72]	@ (8002c9c <MX_USART1_UART_Init+0x50>)
 8002c54:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002c56:	4b10      	ldr	r3, [pc, #64]	@ (8002c98 <MX_USART1_UART_Init+0x4c>)
 8002c58:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002c5c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002c5e:	4b0e      	ldr	r3, [pc, #56]	@ (8002c98 <MX_USART1_UART_Init+0x4c>)
 8002c60:	2200      	movs	r2, #0
 8002c62:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002c64:	4b0c      	ldr	r3, [pc, #48]	@ (8002c98 <MX_USART1_UART_Init+0x4c>)
 8002c66:	2200      	movs	r2, #0
 8002c68:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002c6a:	4b0b      	ldr	r3, [pc, #44]	@ (8002c98 <MX_USART1_UART_Init+0x4c>)
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002c70:	4b09      	ldr	r3, [pc, #36]	@ (8002c98 <MX_USART1_UART_Init+0x4c>)
 8002c72:	220c      	movs	r2, #12
 8002c74:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c76:	4b08      	ldr	r3, [pc, #32]	@ (8002c98 <MX_USART1_UART_Init+0x4c>)
 8002c78:	2200      	movs	r2, #0
 8002c7a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c7c:	4b06      	ldr	r3, [pc, #24]	@ (8002c98 <MX_USART1_UART_Init+0x4c>)
 8002c7e:	2200      	movs	r2, #0
 8002c80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002c82:	4805      	ldr	r0, [pc, #20]	@ (8002c98 <MX_USART1_UART_Init+0x4c>)
 8002c84:	f003 fc8e 	bl	80065a4 <HAL_UART_Init>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d001      	beq.n	8002c92 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002c8e:	f7ff fadf 	bl	8002250 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002c92:	bf00      	nop
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	2000b204 	.word	0x2000b204
 8002c9c:	40011000 	.word	0x40011000

08002ca0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b08a      	sub	sp, #40	@ 0x28
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ca8:	f107 0314 	add.w	r3, r7, #20
 8002cac:	2200      	movs	r2, #0
 8002cae:	601a      	str	r2, [r3, #0]
 8002cb0:	605a      	str	r2, [r3, #4]
 8002cb2:	609a      	str	r2, [r3, #8]
 8002cb4:	60da      	str	r2, [r3, #12]
 8002cb6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a4d      	ldr	r2, [pc, #308]	@ (8002df4 <HAL_UART_MspInit+0x154>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	f040 8094 	bne.w	8002dec <HAL_UART_MspInit+0x14c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	613b      	str	r3, [r7, #16]
 8002cc8:	4b4b      	ldr	r3, [pc, #300]	@ (8002df8 <HAL_UART_MspInit+0x158>)
 8002cca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ccc:	4a4a      	ldr	r2, [pc, #296]	@ (8002df8 <HAL_UART_MspInit+0x158>)
 8002cce:	f043 0310 	orr.w	r3, r3, #16
 8002cd2:	6453      	str	r3, [r2, #68]	@ 0x44
 8002cd4:	4b48      	ldr	r3, [pc, #288]	@ (8002df8 <HAL_UART_MspInit+0x158>)
 8002cd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cd8:	f003 0310 	and.w	r3, r3, #16
 8002cdc:	613b      	str	r3, [r7, #16]
 8002cde:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	60fb      	str	r3, [r7, #12]
 8002ce4:	4b44      	ldr	r3, [pc, #272]	@ (8002df8 <HAL_UART_MspInit+0x158>)
 8002ce6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ce8:	4a43      	ldr	r2, [pc, #268]	@ (8002df8 <HAL_UART_MspInit+0x158>)
 8002cea:	f043 0301 	orr.w	r3, r3, #1
 8002cee:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cf0:	4b41      	ldr	r3, [pc, #260]	@ (8002df8 <HAL_UART_MspInit+0x158>)
 8002cf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cf4:	f003 0301 	and.w	r3, r3, #1
 8002cf8:	60fb      	str	r3, [r7, #12]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002cfc:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002d00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d02:	2302      	movs	r3, #2
 8002d04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d06:	2300      	movs	r3, #0
 8002d08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002d0e:	2307      	movs	r3, #7
 8002d10:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d12:	f107 0314 	add.w	r3, r7, #20
 8002d16:	4619      	mov	r1, r3
 8002d18:	4838      	ldr	r0, [pc, #224]	@ (8002dfc <HAL_UART_MspInit+0x15c>)
 8002d1a:	f001 fc91 	bl	8004640 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002d1e:	4b38      	ldr	r3, [pc, #224]	@ (8002e00 <HAL_UART_MspInit+0x160>)
 8002d20:	4a38      	ldr	r2, [pc, #224]	@ (8002e04 <HAL_UART_MspInit+0x164>)
 8002d22:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002d24:	4b36      	ldr	r3, [pc, #216]	@ (8002e00 <HAL_UART_MspInit+0x160>)
 8002d26:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002d2a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d2c:	4b34      	ldr	r3, [pc, #208]	@ (8002e00 <HAL_UART_MspInit+0x160>)
 8002d2e:	2200      	movs	r2, #0
 8002d30:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d32:	4b33      	ldr	r3, [pc, #204]	@ (8002e00 <HAL_UART_MspInit+0x160>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002d38:	4b31      	ldr	r3, [pc, #196]	@ (8002e00 <HAL_UART_MspInit+0x160>)
 8002d3a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002d3e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d40:	4b2f      	ldr	r3, [pc, #188]	@ (8002e00 <HAL_UART_MspInit+0x160>)
 8002d42:	2200      	movs	r2, #0
 8002d44:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d46:	4b2e      	ldr	r3, [pc, #184]	@ (8002e00 <HAL_UART_MspInit+0x160>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002d4c:	4b2c      	ldr	r3, [pc, #176]	@ (8002e00 <HAL_UART_MspInit+0x160>)
 8002d4e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002d52:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002d54:	4b2a      	ldr	r3, [pc, #168]	@ (8002e00 <HAL_UART_MspInit+0x160>)
 8002d56:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002d5a:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d5c:	4b28      	ldr	r3, [pc, #160]	@ (8002e00 <HAL_UART_MspInit+0x160>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002d62:	4827      	ldr	r0, [pc, #156]	@ (8002e00 <HAL_UART_MspInit+0x160>)
 8002d64:	f001 f86a 	bl	8003e3c <HAL_DMA_Init>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d001      	beq.n	8002d72 <HAL_UART_MspInit+0xd2>
    {
      Error_Handler();
 8002d6e:	f7ff fa6f 	bl	8002250 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4a22      	ldr	r2, [pc, #136]	@ (8002e00 <HAL_UART_MspInit+0x160>)
 8002d76:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002d78:	4a21      	ldr	r2, [pc, #132]	@ (8002e00 <HAL_UART_MspInit+0x160>)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8002d7e:	4b22      	ldr	r3, [pc, #136]	@ (8002e08 <HAL_UART_MspInit+0x168>)
 8002d80:	4a22      	ldr	r2, [pc, #136]	@ (8002e0c <HAL_UART_MspInit+0x16c>)
 8002d82:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8002d84:	4b20      	ldr	r3, [pc, #128]	@ (8002e08 <HAL_UART_MspInit+0x168>)
 8002d86:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002d8a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002d8c:	4b1e      	ldr	r3, [pc, #120]	@ (8002e08 <HAL_UART_MspInit+0x168>)
 8002d8e:	2240      	movs	r2, #64	@ 0x40
 8002d90:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d92:	4b1d      	ldr	r3, [pc, #116]	@ (8002e08 <HAL_UART_MspInit+0x168>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002d98:	4b1b      	ldr	r3, [pc, #108]	@ (8002e08 <HAL_UART_MspInit+0x168>)
 8002d9a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002d9e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002da0:	4b19      	ldr	r3, [pc, #100]	@ (8002e08 <HAL_UART_MspInit+0x168>)
 8002da2:	2200      	movs	r2, #0
 8002da4:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002da6:	4b18      	ldr	r3, [pc, #96]	@ (8002e08 <HAL_UART_MspInit+0x168>)
 8002da8:	2200      	movs	r2, #0
 8002daa:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002dac:	4b16      	ldr	r3, [pc, #88]	@ (8002e08 <HAL_UART_MspInit+0x168>)
 8002dae:	2200      	movs	r2, #0
 8002db0:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002db2:	4b15      	ldr	r3, [pc, #84]	@ (8002e08 <HAL_UART_MspInit+0x168>)
 8002db4:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002db8:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002dba:	4b13      	ldr	r3, [pc, #76]	@ (8002e08 <HAL_UART_MspInit+0x168>)
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002dc0:	4811      	ldr	r0, [pc, #68]	@ (8002e08 <HAL_UART_MspInit+0x168>)
 8002dc2:	f001 f83b 	bl	8003e3c <HAL_DMA_Init>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d001      	beq.n	8002dd0 <HAL_UART_MspInit+0x130>
    {
      Error_Handler();
 8002dcc:	f7ff fa40 	bl	8002250 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	4a0d      	ldr	r2, [pc, #52]	@ (8002e08 <HAL_UART_MspInit+0x168>)
 8002dd4:	639a      	str	r2, [r3, #56]	@ 0x38
 8002dd6:	4a0c      	ldr	r2, [pc, #48]	@ (8002e08 <HAL_UART_MspInit+0x168>)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002ddc:	2200      	movs	r2, #0
 8002dde:	2105      	movs	r1, #5
 8002de0:	2025      	movs	r0, #37	@ 0x25
 8002de2:	f001 f801 	bl	8003de8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002de6:	2025      	movs	r0, #37	@ 0x25
 8002de8:	f001 f81a 	bl	8003e20 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002dec:	bf00      	nop
 8002dee:	3728      	adds	r7, #40	@ 0x28
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}
 8002df4:	40011000 	.word	0x40011000
 8002df8:	40023800 	.word	0x40023800
 8002dfc:	40020000 	.word	0x40020000
 8002e00:	2000b24c 	.word	0x2000b24c
 8002e04:	40026440 	.word	0x40026440
 8002e08:	2000b2ac 	.word	0x2000b2ac
 8002e0c:	400264b8 	.word	0x400264b8

08002e10 <calculate_pwm>:
#endif

static uint8_t tcm_initialized = 0;
static arm_matrix_instance_f32 fixed_mixing_matrix_instance;

arm_status calculate_pwm(const float in_joystick_input[6], uint32_t pwm_output[8]) {
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b09e      	sub	sp, #120	@ 0x78
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
 8002e18:	6039      	str	r1, [r7, #0]
	float joystick_input[6];
	for(uint8_t i = 0; i < 6; i++)
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8002e20:	e011      	b.n	8002e46 <calculate_pwm+0x36>
	{
		joystick_input[i] = in_joystick_input[i];
 8002e22:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	441a      	add	r2, r3
 8002e2c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8002e30:	6812      	ldr	r2, [r2, #0]
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	3378      	adds	r3, #120	@ 0x78
 8002e36:	443b      	add	r3, r7
 8002e38:	3b1c      	subs	r3, #28
 8002e3a:	601a      	str	r2, [r3, #0]
	for(uint8_t i = 0; i < 6; i++)
 8002e3c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8002e40:	3301      	adds	r3, #1
 8002e42:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8002e46:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8002e4a:	2b05      	cmp	r3, #5
 8002e4c:	d9e9      	bls.n	8002e22 <calculate_pwm+0x12>
	}

    normalize_vector(in_joystick_input, joystick_input, 6);
 8002e4e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002e52:	2206      	movs	r2, #6
 8002e54:	4619      	mov	r1, r3
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f7ff f858 	bl	8001f0c <normalize_vector>

    float f_pwm_output[8];

    __attribute__((aligned(4))) float pwm_output_8_1[8] = {0};
 8002e5c:	f107 031c 	add.w	r3, r7, #28
 8002e60:	2220      	movs	r2, #32
 8002e62:	2100      	movs	r1, #0
 8002e64:	4618      	mov	r0, r3
 8002e66:	f01a fb13 	bl	801d490 <memset>

    arm_matrix_instance_f32 joystick_input_instance;
    arm_matrix_instance_f32 pwm_output_instance;

    if(tcm_initialized == 0) {
 8002e6a:	4b41      	ldr	r3, [pc, #260]	@ (8002f70 <calculate_pwm+0x160>)
 8002e6c:	781b      	ldrb	r3, [r3, #0]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d108      	bne.n	8002e84 <calculate_pwm+0x74>
    	arm_mat_init_f32(&fixed_mixing_matrix_instance, 8, 6, (float *)FIXED_MIXING_MATRIX);
 8002e72:	4b40      	ldr	r3, [pc, #256]	@ (8002f74 <calculate_pwm+0x164>)
 8002e74:	2206      	movs	r2, #6
 8002e76:	2108      	movs	r1, #8
 8002e78:	483f      	ldr	r0, [pc, #252]	@ (8002f78 <calculate_pwm+0x168>)
 8002e7a:	f007 fd1d 	bl	800a8b8 <arm_mat_init_f32>
    	tcm_initialized = 1;
 8002e7e:	4b3c      	ldr	r3, [pc, #240]	@ (8002f70 <calculate_pwm+0x160>)
 8002e80:	2201      	movs	r2, #1
 8002e82:	701a      	strb	r2, [r3, #0]
    }
    arm_mat_init_f32(&joystick_input_instance, 6, 1, (float *)joystick_input);
 8002e84:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002e88:	f107 0014 	add.w	r0, r7, #20
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	2106      	movs	r1, #6
 8002e90:	f007 fd12 	bl	800a8b8 <arm_mat_init_f32>
    arm_mat_init_f32(&pwm_output_instance, 8, 1, (float *)pwm_output_8_1);
 8002e94:	f107 031c 	add.w	r3, r7, #28
 8002e98:	f107 000c 	add.w	r0, r7, #12
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	2108      	movs	r1, #8
 8002ea0:	f007 fd0a 	bl	800a8b8 <arm_mat_init_f32>
    arm_status code = arm_mat_mult_f32(&fixed_mixing_matrix_instance, &joystick_input_instance, &pwm_output_instance);
 8002ea4:	f107 020c 	add.w	r2, r7, #12
 8002ea8:	f107 0314 	add.w	r3, r7, #20
 8002eac:	4619      	mov	r1, r3
 8002eae:	4832      	ldr	r0, [pc, #200]	@ (8002f78 <calculate_pwm+0x168>)
 8002eb0:	f007 fbf2 	bl	800a698 <arm_mat_mult_f32>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
    if (code != ARM_MATH_SUCCESS) return code;
 8002eba:	f997 3074 	ldrsb.w	r3, [r7, #116]	@ 0x74
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d002      	beq.n	8002ec8 <calculate_pwm+0xb8>
 8002ec2:	f997 3074 	ldrsb.w	r3, [r7, #116]	@ 0x74
 8002ec6:	e04f      	b.n	8002f68 <calculate_pwm+0x158>

    for (uint8_t i = 0; i < 8; i++) {
 8002ec8:	2300      	movs	r3, #0
 8002eca:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 8002ece:	e011      	b.n	8002ef4 <calculate_pwm+0xe4>
        f_pwm_output[i] = pwm_output_instance.pData[i];
 8002ed0:	693a      	ldr	r2, [r7, #16]
 8002ed2:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	441a      	add	r2, r3
 8002eda:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8002ede:	6812      	ldr	r2, [r2, #0]
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	3378      	adds	r3, #120	@ 0x78
 8002ee4:	443b      	add	r3, r7
 8002ee6:	3b3c      	subs	r3, #60	@ 0x3c
 8002ee8:	601a      	str	r2, [r3, #0]
    for (uint8_t i = 0; i < 8; i++) {
 8002eea:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8002eee:	3301      	adds	r3, #1
 8002ef0:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 8002ef4:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8002ef8:	2b07      	cmp	r3, #7
 8002efa:	d9e9      	bls.n	8002ed0 <calculate_pwm+0xc0>
    }

    // normalize pwm_output and map to 1100 ~ 1900
    normalize_vector(f_pwm_output, f_pwm_output, 8);
 8002efc:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8002f00:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002f04:	2208      	movs	r2, #8
 8002f06:	4618      	mov	r0, r3
 8002f08:	f7ff f800 	bl	8001f0c <normalize_vector>
    for (uint8_t i = 0; i < 8; i++) {
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75
 8002f12:	e024      	b.n	8002f5e <calculate_pwm+0x14e>
        // pwm_output[i][0] = symmetric_quadratic_interpolation(pwm_output[i][0], 1, PWM_MAX);
        pwm_output[i] = (int)linear_interpolation(f_pwm_output[i], -1, 1, PWM_MIN, PWM_MAX);
 8002f14:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 8002f18:	009b      	lsls	r3, r3, #2
 8002f1a:	3378      	adds	r3, #120	@ 0x78
 8002f1c:	443b      	add	r3, r7
 8002f1e:	3b3c      	subs	r3, #60	@ 0x3c
 8002f20:	edd3 7a00 	vldr	s15, [r3]
 8002f24:	ed9f 2a15 	vldr	s4, [pc, #84]	@ 8002f7c <calculate_pwm+0x16c>
 8002f28:	eddf 1a15 	vldr	s3, [pc, #84]	@ 8002f80 <calculate_pwm+0x170>
 8002f2c:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 8002f30:	eeff 0a00 	vmov.f32	s1, #240	@ 0xbf800000 -1.0
 8002f34:	eeb0 0a67 	vmov.f32	s0, s15
 8002f38:	f7fe ffba 	bl	8001eb0 <linear_interpolation>
 8002f3c:	eef0 7a40 	vmov.f32	s15, s0
 8002f40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f44:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	683a      	ldr	r2, [r7, #0]
 8002f4c:	4413      	add	r3, r2
 8002f4e:	ee17 2a90 	vmov	r2, s15
 8002f52:	601a      	str	r2, [r3, #0]
    for (uint8_t i = 0; i < 8; i++) {
 8002f54:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 8002f58:	3301      	adds	r3, #1
 8002f5a:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75
 8002f5e:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 8002f62:	2b07      	cmp	r3, #7
 8002f64:	d9d6      	bls.n	8002f14 <calculate_pwm+0x104>
    }
    return ARM_MATH_SUCCESS;
 8002f66:	2300      	movs	r3, #0
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	3778      	adds	r7, #120	@ 0x78
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	2000b30c 	.word	0x2000b30c
 8002f74:	20000008 	.word	0x20000008
 8002f78:	2000b310 	.word	0x2000b310
 8002f7c:	44d0c000 	.word	0x44d0c000
 8002f80:	44a64000 	.word	0x44a64000

08002f84 <invert_quaternion>:

void invert_quaternion(const Quaternion * q, Quaternion * q_inv) {
 8002f84:	b480      	push	{r7}
 8002f86:	b085      	sub	sp, #20
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	6039      	str	r1, [r7, #0]
	float norm_squared = q->w * q->w + q->x * q->x + q->y * q->y + q->z * q->z;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	ed93 7a00 	vldr	s14, [r3]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	edd3 7a00 	vldr	s15, [r3]
 8002f9a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	edd3 6a01 	vldr	s13, [r3, #4]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	edd3 7a01 	vldr	s15, [r3, #4]
 8002faa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002fae:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	edd3 6a02 	vldr	s13, [r3, #8]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	edd3 7a02 	vldr	s15, [r3, #8]
 8002fbe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002fc2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	edd3 6a03 	vldr	s13, [r3, #12]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	edd3 7a03 	vldr	s15, [r3, #12]
 8002fd2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002fd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fda:	edc7 7a03 	vstr	s15, [r7, #12]

	if (norm_squared == 0.0f) {
 8002fde:	edd7 7a03 	vldr	s15, [r7, #12]
 8002fe2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002fe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fea:	d110      	bne.n	800300e <invert_quaternion+0x8a>
		// Handle the case of zero norm if needed (for example, return a specific error)
		q_inv->w = q_inv->x = q_inv->y = q_inv->z = 0.0f;
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	f04f 0200 	mov.w	r2, #0
 8002ff2:	60da      	str	r2, [r3, #12]
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	68da      	ldr	r2, [r3, #12]
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	609a      	str	r2, [r3, #8]
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	689a      	ldr	r2, [r3, #8]
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	605a      	str	r2, [r3, #4]
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	685a      	ldr	r2, [r3, #4]
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	601a      	str	r2, [r3, #0]
		return;
 800300c:	e02d      	b.n	800306a <invert_quaternion+0xe6>
	}
	// Compute the inverse as the conjugate divided by the norm squared
	q_inv->w = q->w / norm_squared;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	edd3 6a00 	vldr	s13, [r3]
 8003014:	ed97 7a03 	vldr	s14, [r7, #12]
 8003018:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	edc3 7a00 	vstr	s15, [r3]
	q_inv->x = -q->x / norm_squared;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	edd3 7a01 	vldr	s15, [r3, #4]
 8003028:	eef1 6a67 	vneg.f32	s13, s15
 800302c:	ed97 7a03 	vldr	s14, [r7, #12]
 8003030:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	edc3 7a01 	vstr	s15, [r3, #4]
	q_inv->y = -q->y / norm_squared;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	edd3 7a02 	vldr	s15, [r3, #8]
 8003040:	eef1 6a67 	vneg.f32	s13, s15
 8003044:	ed97 7a03 	vldr	s14, [r7, #12]
 8003048:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	edc3 7a02 	vstr	s15, [r3, #8]
	q_inv->z = -q->z / norm_squared;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	edd3 7a03 	vldr	s15, [r3, #12]
 8003058:	eef1 6a67 	vneg.f32	s13, s15
 800305c:	ed97 7a03 	vldr	s14, [r7, #12]
 8003060:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	edc3 7a03 	vstr	s15, [r3, #12]
}
 800306a:	3714      	adds	r7, #20
 800306c:	46bd      	mov	sp, r7
 800306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003072:	4770      	bx	lr

08003074 <multiply_quaternions>:

void multiply_quaternions(const Quaternion* q1, const Quaternion* q2, Quaternion* qResult) {
 8003074:	b480      	push	{r7}
 8003076:	b085      	sub	sp, #20
 8003078:	af00      	add	r7, sp, #0
 800307a:	60f8      	str	r0, [r7, #12]
 800307c:	60b9      	str	r1, [r7, #8]
 800307e:	607a      	str	r2, [r7, #4]
	qResult->w = q1->w * q2->w - q1->x * q2->x - q1->y * q2->y - q1->z * q2->z;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	ed93 7a00 	vldr	s14, [r3]
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	edd3 7a00 	vldr	s15, [r3]
 800308c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	edd3 6a01 	vldr	s13, [r3, #4]
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	edd3 7a01 	vldr	s15, [r3, #4]
 800309c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030a0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	edd3 6a02 	vldr	s13, [r3, #8]
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	edd3 7a02 	vldr	s15, [r3, #8]
 80030b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030b4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	edd3 6a03 	vldr	s13, [r3, #12]
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	edd3 7a03 	vldr	s15, [r3, #12]
 80030c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	edc3 7a00 	vstr	s15, [r3]
	qResult->x = q1->w * q2->x + q1->x * q2->w + q1->y * q2->z - q1->z * q2->y;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	ed93 7a00 	vldr	s14, [r3]
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	edd3 7a01 	vldr	s15, [r3, #4]
 80030de:	ee27 7a27 	vmul.f32	s14, s14, s15
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	edd3 6a01 	vldr	s13, [r3, #4]
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	edd3 7a00 	vldr	s15, [r3]
 80030ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030f2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	edd3 6a02 	vldr	s13, [r3, #8]
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	edd3 7a03 	vldr	s15, [r3, #12]
 8003102:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003106:	ee37 7a27 	vadd.f32	s14, s14, s15
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	edd3 6a03 	vldr	s13, [r3, #12]
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	edd3 7a02 	vldr	s15, [r3, #8]
 8003116:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800311a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	edc3 7a01 	vstr	s15, [r3, #4]
	qResult->y = q1->w * q2->y - q1->x * q2->z + q1->y * q2->w + q1->z * q2->x;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	ed93 7a00 	vldr	s14, [r3]
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	edd3 7a02 	vldr	s15, [r3, #8]
 8003130:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	edd3 6a01 	vldr	s13, [r3, #4]
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	edd3 7a03 	vldr	s15, [r3, #12]
 8003140:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003144:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	edd3 6a02 	vldr	s13, [r3, #8]
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	edd3 7a00 	vldr	s15, [r3]
 8003154:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003158:	ee37 7a27 	vadd.f32	s14, s14, s15
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	edd3 6a03 	vldr	s13, [r3, #12]
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	edd3 7a01 	vldr	s15, [r3, #4]
 8003168:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800316c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	edc3 7a02 	vstr	s15, [r3, #8]
	qResult->z = q1->w * q2->z + q1->x * q2->y - q1->y * q2->x + q1->z * q2->w;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	ed93 7a00 	vldr	s14, [r3]
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	edd3 7a03 	vldr	s15, [r3, #12]
 8003182:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	edd3 6a01 	vldr	s13, [r3, #4]
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	edd3 7a02 	vldr	s15, [r3, #8]
 8003192:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003196:	ee37 7a27 	vadd.f32	s14, s14, s15
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	edd3 6a02 	vldr	s13, [r3, #8]
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	edd3 7a01 	vldr	s15, [r3, #4]
 80031a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80031aa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	edd3 6a03 	vldr	s13, [r3, #12]
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	edd3 7a00 	vldr	s15, [r3]
 80031ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80031be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	edc3 7a03 	vstr	s15, [r3, #12]
}
 80031c8:	bf00      	nop
 80031ca:	3714      	adds	r7, #20
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr

080031d4 <calculate_rpy_from_quaternion>:
	if (value < min) return min;
	return value;
}

void calculate_rpy_from_quaternion(const Quaternion *quaternion, float roll_pitch_yaw_radians[3])
{
 80031d4:	b5b0      	push	{r4, r5, r7, lr}
 80031d6:	b086      	sub	sp, #24
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	6039      	str	r1, [r7, #0]
	// roll (x-axis rotation)
	float sinr_cosp = 2 * (quaternion->w * quaternion->x + quaternion->y * quaternion->z);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	ed93 7a00 	vldr	s14, [r3]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	edd3 7a01 	vldr	s15, [r3, #4]
 80031ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	edd3 6a02 	vldr	s13, [r3, #8]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	edd3 7a03 	vldr	s15, [r3, #12]
 80031fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80031fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003202:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003206:	edc7 7a05 	vstr	s15, [r7, #20]
	float cosr_cosp = 1 - 2 * (quaternion->x * quaternion->x + quaternion->y * quaternion->y);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	ed93 7a01 	vldr	s14, [r3, #4]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	edd3 7a01 	vldr	s15, [r3, #4]
 8003216:	ee27 7a27 	vmul.f32	s14, s14, s15
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	edd3 6a02 	vldr	s13, [r3, #8]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	edd3 7a02 	vldr	s15, [r3, #8]
 8003226:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800322a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800322e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003232:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003236:	ee77 7a67 	vsub.f32	s15, s14, s15
 800323a:	edc7 7a04 	vstr	s15, [r7, #16]
	roll_pitch_yaw_radians[0] = atan2(sinr_cosp, cosr_cosp);
 800323e:	6978      	ldr	r0, [r7, #20]
 8003240:	f7fd f9aa 	bl	8000598 <__aeabi_f2d>
 8003244:	4604      	mov	r4, r0
 8003246:	460d      	mov	r5, r1
 8003248:	6938      	ldr	r0, [r7, #16]
 800324a:	f7fd f9a5 	bl	8000598 <__aeabi_f2d>
 800324e:	4602      	mov	r2, r0
 8003250:	460b      	mov	r3, r1
 8003252:	ec43 2b11 	vmov	d1, r2, r3
 8003256:	ec45 4b10 	vmov	d0, r4, r5
 800325a:	f019 f941 	bl	801c4e0 <atan2>
 800325e:	ec53 2b10 	vmov	r2, r3, d0
 8003262:	4610      	mov	r0, r2
 8003264:	4619      	mov	r1, r3
 8003266:	f7fd fc89 	bl	8000b7c <__aeabi_d2f>
 800326a:	4602      	mov	r2, r0
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	601a      	str	r2, [r3, #0]

	// pitch (y-axis rotation)
	float sinp, cosp;
	roll_pitch_yaw_radians[1] = asinf(2 * (quaternion->w * quaternion->y - quaternion->x * quaternion->z));
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	ed93 7a00 	vldr	s14, [r3]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	edd3 7a02 	vldr	s15, [r3, #8]
 800327c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	edd3 6a01 	vldr	s13, [r3, #4]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	edd3 7a03 	vldr	s15, [r3, #12]
 800328c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003290:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003294:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	1d1c      	adds	r4, r3, #4
 800329c:	eeb0 0a67 	vmov.f32	s0, s15
 80032a0:	f019 f8f2 	bl	801c488 <asinf>
 80032a4:	eef0 7a40 	vmov.f32	s15, s0
 80032a8:	edc4 7a00 	vstr	s15, [r4]

	// yaw (z-axis rotation)
	float siny_cosp = 2 * (quaternion->w * quaternion->z + quaternion->x * quaternion->y);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	ed93 7a00 	vldr	s14, [r3]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	edd3 7a03 	vldr	s15, [r3, #12]
 80032b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	edd3 6a01 	vldr	s13, [r3, #4]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	edd3 7a02 	vldr	s15, [r3, #8]
 80032c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032d0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80032d4:	edc7 7a03 	vstr	s15, [r7, #12]
	float cosy_cosp = 1 - 2 * (quaternion->y * quaternion->y + quaternion->z * quaternion->z);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	ed93 7a02 	vldr	s14, [r3, #8]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	edd3 7a02 	vldr	s15, [r3, #8]
 80032e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	edd3 6a03 	vldr	s13, [r3, #12]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	edd3 7a03 	vldr	s15, [r3, #12]
 80032f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032fc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003300:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003304:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003308:	edc7 7a02 	vstr	s15, [r7, #8]
	roll_pitch_yaw_radians[2] = atan2(siny_cosp, cosy_cosp);
 800330c:	68f8      	ldr	r0, [r7, #12]
 800330e:	f7fd f943 	bl	8000598 <__aeabi_f2d>
 8003312:	4604      	mov	r4, r0
 8003314:	460d      	mov	r5, r1
 8003316:	68b8      	ldr	r0, [r7, #8]
 8003318:	f7fd f93e 	bl	8000598 <__aeabi_f2d>
 800331c:	4602      	mov	r2, r0
 800331e:	460b      	mov	r3, r1
 8003320:	ec43 2b11 	vmov	d1, r2, r3
 8003324:	ec45 4b10 	vmov	d0, r4, r5
 8003328:	f019 f8da 	bl	801c4e0 <atan2>
 800332c:	ec51 0b10 	vmov	r0, r1, d0
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	f103 0408 	add.w	r4, r3, #8
 8003336:	f7fd fc21 	bl	8000b7c <__aeabi_d2f>
 800333a:	4603      	mov	r3, r0
 800333c:	6023      	str	r3, [r4, #0]
}
 800333e:	bf00      	nop
 8003340:	3718      	adds	r7, #24
 8003342:	46bd      	mov	sp, r7
 8003344:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003348 <update_setpoints>:

// input_values: surge, sway, heave, roll, pitch, yaw
uint8_t update_setpoints(const float cmd_vel[6], const Quaternion * quat, const float * water_pressure) {
 8003348:	b580      	push	{r7, lr}
 800334a:	b09e      	sub	sp, #120	@ 0x78
 800334c:	af00      	add	r7, sp, #0
 800334e:	60f8      	str	r0, [r7, #12]
 8003350:	60b9      	str	r1, [r7, #8]
 8003352:	607a      	str	r2, [r7, #4]
	uint8_t count = 0;
 8003354:	2300      	movs	r3, #0
 8003356:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	float rpy_rads[3];
	calculate_rpy_from_quaternion(quat, rpy_rads);
 800335a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800335e:	4619      	mov	r1, r3
 8003360:	68b8      	ldr	r0, [r7, #8]
 8003362:	f7ff ff37 	bl	80031d4 <calculate_rpy_from_quaternion>
	// updates setpoints for angles
	for(uint8_t i = 0; i < 3; i++) {
 8003366:	2300      	movs	r3, #0
 8003368:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 800336c:	e041      	b.n	80033f2 <update_setpoints+0xaa>
		if(fabsf(cmd_vel[i+3]) < TOLERANCE) {
 800336e:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8003372:	3303      	adds	r3, #3
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	68fa      	ldr	r2, [r7, #12]
 8003378:	4413      	add	r3, r2
 800337a:	edd3 7a00 	vldr	s15, [r3]
 800337e:	eef0 7ae7 	vabs.f32	s15, s15
 8003382:	ee17 0a90 	vmov	r0, s15
 8003386:	f7fd f907 	bl	8000598 <__aeabi_f2d>
 800338a:	a3a9      	add	r3, pc, #676	@ (adr r3, 8003630 <update_setpoints+0x2e8>)
 800338c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003390:	f7fd fbcc 	bl	8000b2c <__aeabi_dcmplt>
 8003394:	4603      	mov	r3, r0
 8003396:	2b00      	cmp	r3, #0
 8003398:	d020      	beq.n	80033dc <update_setpoints+0x94>
			if(last_cmd_vel_neq_0[i+1]) {
 800339a:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 800339e:	3301      	adds	r3, #1
 80033a0:	4aa5      	ldr	r2, [pc, #660]	@ (8003638 <update_setpoints+0x2f0>)
 80033a2:	5cd3      	ldrb	r3, [r2, r3]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d012      	beq.n	80033ce <update_setpoints+0x86>
				setpoints[i+1] = rpy_rads[i];
 80033a8:	f897 2076 	ldrb.w	r2, [r7, #118]	@ 0x76
 80033ac:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 80033b0:	3301      	adds	r3, #1
 80033b2:	0092      	lsls	r2, r2, #2
 80033b4:	3278      	adds	r2, #120	@ 0x78
 80033b6:	443a      	add	r2, r7
 80033b8:	3a14      	subs	r2, #20
 80033ba:	6812      	ldr	r2, [r2, #0]
 80033bc:	499f      	ldr	r1, [pc, #636]	@ (800363c <update_setpoints+0x2f4>)
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	440b      	add	r3, r1
 80033c2:	601a      	str	r2, [r3, #0]
				count++;
 80033c4:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80033c8:	3301      	adds	r3, #1
 80033ca:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
			}
			last_cmd_vel_neq_0[i+1] = 0;
 80033ce:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 80033d2:	3301      	adds	r3, #1
 80033d4:	4a98      	ldr	r2, [pc, #608]	@ (8003638 <update_setpoints+0x2f0>)
 80033d6:	2100      	movs	r1, #0
 80033d8:	54d1      	strb	r1, [r2, r3]
 80033da:	e005      	b.n	80033e8 <update_setpoints+0xa0>
		} else last_cmd_vel_neq_0[i+1] = 1;
 80033dc:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 80033e0:	3301      	adds	r3, #1
 80033e2:	4a95      	ldr	r2, [pc, #596]	@ (8003638 <update_setpoints+0x2f0>)
 80033e4:	2101      	movs	r1, #1
 80033e6:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < 3; i++) {
 80033e8:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 80033ec:	3301      	adds	r3, #1
 80033ee:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 80033f2:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 80033f6:	2b02      	cmp	r3, #2
 80033f8:	d9b9      	bls.n	800336e <update_setpoints+0x26>
	 * Updates depth setpoint
	 * In order for the setpoint to be update, I have to check the role each axis plays in changing the depth,
	 * and updating the setpoint only if all of the corresponding input values are 0
	 */
	Quaternion z_out_q;
	z_out_q.w = z_out_q.x = z_out_q.y = 0;
 80033fa:	f04f 0300 	mov.w	r3, #0
 80033fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003400:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003402:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003404:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003406:	657b      	str	r3, [r7, #84]	@ 0x54
	z_out_q.z = 1;
 8003408:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800340c:	663b      	str	r3, [r7, #96]	@ 0x60
	Quaternion q_inv = {0};
 800340e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8003412:	2200      	movs	r2, #0
 8003414:	601a      	str	r2, [r3, #0]
 8003416:	605a      	str	r2, [r3, #4]
 8003418:	609a      	str	r2, [r3, #8]
 800341a:	60da      	str	r2, [r3, #12]
	invert_quaternion(quat, &q_inv);
 800341c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8003420:	4619      	mov	r1, r3
 8003422:	68b8      	ldr	r0, [r7, #8]
 8003424:	f7ff fdae 	bl	8002f84 <invert_quaternion>
	// applies the inverse rotation to the z_out_q vector
	Quaternion intermediate_result = {0};
 8003428:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800342c:	2200      	movs	r2, #0
 800342e:	601a      	str	r2, [r3, #0]
 8003430:	605a      	str	r2, [r3, #4]
 8003432:	609a      	str	r2, [r3, #8]
 8003434:	60da      	str	r2, [r3, #12]
	Quaternion z_out_RBF = {0};
 8003436:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800343a:	2200      	movs	r2, #0
 800343c:	601a      	str	r2, [r3, #0]
 800343e:	605a      	str	r2, [r3, #4]
 8003440:	609a      	str	r2, [r3, #8]
 8003442:	60da      	str	r2, [r3, #12]
	// rotating a vector v by q_inv = q_inv * v * q_inv_inv = q_inv * v * q
	multiply_quaternions(&q_inv, &z_out_q, &intermediate_result);
 8003444:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8003448:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 800344c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8003450:	4618      	mov	r0, r3
 8003452:	f7ff fe0f 	bl	8003074 <multiply_quaternions>
	multiply_quaternions(&intermediate_result, quat, &z_out_RBF);
 8003456:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800345a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800345e:	68b9      	ldr	r1, [r7, #8]
 8003460:	4618      	mov	r0, r3
 8003462:	f7ff fe07 	bl	8003074 <multiply_quaternions>

	uint8_t x_condition = fabsf(z_out_RBF.x) < TOLERANCE || fabsf(cmd_vel[0]) < TOLERANCE;
 8003466:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800346a:	eef0 7ae7 	vabs.f32	s15, s15
 800346e:	ee17 0a90 	vmov	r0, s15
 8003472:	f7fd f891 	bl	8000598 <__aeabi_f2d>
 8003476:	a36e      	add	r3, pc, #440	@ (adr r3, 8003630 <update_setpoints+0x2e8>)
 8003478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800347c:	f7fd fb56 	bl	8000b2c <__aeabi_dcmplt>
 8003480:	4603      	mov	r3, r0
 8003482:	2b00      	cmp	r3, #0
 8003484:	d110      	bne.n	80034a8 <update_setpoints+0x160>
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	edd3 7a00 	vldr	s15, [r3]
 800348c:	eef0 7ae7 	vabs.f32	s15, s15
 8003490:	ee17 0a90 	vmov	r0, s15
 8003494:	f7fd f880 	bl	8000598 <__aeabi_f2d>
 8003498:	a365      	add	r3, pc, #404	@ (adr r3, 8003630 <update_setpoints+0x2e8>)
 800349a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800349e:	f7fd fb45 	bl	8000b2c <__aeabi_dcmplt>
 80034a2:	4603      	mov	r3, r0
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d001      	beq.n	80034ac <update_setpoints+0x164>
 80034a8:	2301      	movs	r3, #1
 80034aa:	e000      	b.n	80034ae <update_setpoints+0x166>
 80034ac:	2300      	movs	r3, #0
 80034ae:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75
	uint8_t y_condition = fabsf(z_out_RBF.y) < TOLERANCE || fabsf(cmd_vel[1]) < TOLERANCE;
 80034b2:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80034b6:	eef0 7ae7 	vabs.f32	s15, s15
 80034ba:	ee17 0a90 	vmov	r0, s15
 80034be:	f7fd f86b 	bl	8000598 <__aeabi_f2d>
 80034c2:	a35b      	add	r3, pc, #364	@ (adr r3, 8003630 <update_setpoints+0x2e8>)
 80034c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034c8:	f7fd fb30 	bl	8000b2c <__aeabi_dcmplt>
 80034cc:	4603      	mov	r3, r0
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d111      	bne.n	80034f6 <update_setpoints+0x1ae>
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	3304      	adds	r3, #4
 80034d6:	edd3 7a00 	vldr	s15, [r3]
 80034da:	eef0 7ae7 	vabs.f32	s15, s15
 80034de:	ee17 0a90 	vmov	r0, s15
 80034e2:	f7fd f859 	bl	8000598 <__aeabi_f2d>
 80034e6:	a352      	add	r3, pc, #328	@ (adr r3, 8003630 <update_setpoints+0x2e8>)
 80034e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ec:	f7fd fb1e 	bl	8000b2c <__aeabi_dcmplt>
 80034f0:	4603      	mov	r3, r0
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d001      	beq.n	80034fa <update_setpoints+0x1b2>
 80034f6:	2301      	movs	r3, #1
 80034f8:	e000      	b.n	80034fc <update_setpoints+0x1b4>
 80034fa:	2300      	movs	r3, #0
 80034fc:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
	uint8_t z_condition = fabsf(z_out_RBF.z) < TOLERANCE || fabsf(cmd_vel[2]) < TOLERANCE;
 8003500:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8003504:	eef0 7ae7 	vabs.f32	s15, s15
 8003508:	ee17 0a90 	vmov	r0, s15
 800350c:	f7fd f844 	bl	8000598 <__aeabi_f2d>
 8003510:	a347      	add	r3, pc, #284	@ (adr r3, 8003630 <update_setpoints+0x2e8>)
 8003512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003516:	f7fd fb09 	bl	8000b2c <__aeabi_dcmplt>
 800351a:	4603      	mov	r3, r0
 800351c:	2b00      	cmp	r3, #0
 800351e:	d111      	bne.n	8003544 <update_setpoints+0x1fc>
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	3308      	adds	r3, #8
 8003524:	edd3 7a00 	vldr	s15, [r3]
 8003528:	eef0 7ae7 	vabs.f32	s15, s15
 800352c:	ee17 0a90 	vmov	r0, s15
 8003530:	f7fd f832 	bl	8000598 <__aeabi_f2d>
 8003534:	a33e      	add	r3, pc, #248	@ (adr r3, 8003630 <update_setpoints+0x2e8>)
 8003536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800353a:	f7fd faf7 	bl	8000b2c <__aeabi_dcmplt>
 800353e:	4603      	mov	r3, r0
 8003540:	2b00      	cmp	r3, #0
 8003542:	d001      	beq.n	8003548 <update_setpoints+0x200>
 8003544:	2301      	movs	r3, #1
 8003546:	e000      	b.n	800354a <update_setpoints+0x202>
 8003548:	2300      	movs	r3, #0
 800354a:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73

	if (x_condition && y_condition && z_condition) {
 800354e:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 8003552:	2b00      	cmp	r3, #0
 8003554:	d014      	beq.n	8003580 <update_setpoints+0x238>
 8003556:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 800355a:	2b00      	cmp	r3, #0
 800355c:	d010      	beq.n	8003580 <update_setpoints+0x238>
 800355e:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8003562:	2b00      	cmp	r3, #0
 8003564:	d00c      	beq.n	8003580 <update_setpoints+0x238>
		if(last_cmd_vel_neq_0[0]) {
 8003566:	4b34      	ldr	r3, [pc, #208]	@ (8003638 <update_setpoints+0x2f0>)
 8003568:	781b      	ldrb	r3, [r3, #0]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d008      	beq.n	8003580 <update_setpoints+0x238>
			setpoints[0] = * water_pressure;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a32      	ldr	r2, [pc, #200]	@ (800363c <update_setpoints+0x2f4>)
 8003574:	6013      	str	r3, [r2, #0]
			count++;
 8003576:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800357a:	3301      	adds	r3, #1
 800357c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	}

	// dentro last_cmd_vel_neq_0[0] ci devo mettere 0 se il vettore (cmd_vel[0], cmd_vel[1], cmd_vel[2])
	// ha componente nulla lungo l'asse z del EFBF
	// riuso le variabili dichiarate in precedenza visto che non mi servono più
	Quaternion cmd_vel_EFBF = {0};
 8003580:	f107 0314 	add.w	r3, r7, #20
 8003584:	2200      	movs	r2, #0
 8003586:	601a      	str	r2, [r3, #0]
 8003588:	605a      	str	r2, [r3, #4]
 800358a:	609a      	str	r2, [r3, #8]
 800358c:	60da      	str	r2, [r3, #12]
	z_out_q.w = 0;
 800358e:	f04f 0300 	mov.w	r3, #0
 8003592:	657b      	str	r3, [r7, #84]	@ 0x54
	z_out_q.x = cmd_vel[0];
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	65bb      	str	r3, [r7, #88]	@ 0x58
	z_out_q.y = cmd_vel[1];
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	3304      	adds	r3, #4
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
	z_out_q.z = cmd_vel[2];
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	3308      	adds	r3, #8
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	663b      	str	r3, [r7, #96]	@ 0x60
	multiply_quaternions(quat, &z_out_q, &intermediate_result);
 80035aa:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 80035ae:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80035b2:	4619      	mov	r1, r3
 80035b4:	68b8      	ldr	r0, [r7, #8]
 80035b6:	f7ff fd5d 	bl	8003074 <multiply_quaternions>
	multiply_quaternions(&intermediate_result, &q_inv, &cmd_vel_EFBF);
 80035ba:	f107 0214 	add.w	r2, r7, #20
 80035be:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 80035c2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80035c6:	4618      	mov	r0, r3
 80035c8:	f7ff fd54 	bl	8003074 <multiply_quaternions>
	if(fabsf(cmd_vel_EFBF.z) < TOLERANCE) last_cmd_vel_neq_0[0] = 0;
 80035cc:	edd7 7a08 	vldr	s15, [r7, #32]
 80035d0:	eef0 7ae7 	vabs.f32	s15, s15
 80035d4:	ee17 0a90 	vmov	r0, s15
 80035d8:	f7fc ffde 	bl	8000598 <__aeabi_f2d>
 80035dc:	a314      	add	r3, pc, #80	@ (adr r3, 8003630 <update_setpoints+0x2e8>)
 80035de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035e2:	f7fd faa3 	bl	8000b2c <__aeabi_dcmplt>
 80035e6:	4603      	mov	r3, r0
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d003      	beq.n	80035f4 <update_setpoints+0x2ac>
 80035ec:	4b12      	ldr	r3, [pc, #72]	@ (8003638 <update_setpoints+0x2f0>)
 80035ee:	2200      	movs	r2, #0
 80035f0:	701a      	strb	r2, [r3, #0]
 80035f2:	e002      	b.n	80035fa <update_setpoints+0x2b2>
	else last_cmd_vel_neq_0[0] = 1;
 80035f4:	4b10      	ldr	r3, [pc, #64]	@ (8003638 <update_setpoints+0x2f0>)
 80035f6:	2201      	movs	r2, #1
 80035f8:	701a      	strb	r2, [r3, #0]

	if(first_update) {
 80035fa:	4b11      	ldr	r3, [pc, #68]	@ (8003640 <update_setpoints+0x2f8>)
 80035fc:	781b      	ldrb	r3, [r3, #0]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d00f      	beq.n	8003622 <update_setpoints+0x2da>
		setpoints[0] = * water_pressure;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a0d      	ldr	r2, [pc, #52]	@ (800363c <update_setpoints+0x2f4>)
 8003608:	6013      	str	r3, [r2, #0]
		setpoints[1] = rpy_rads[0];
 800360a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800360c:	4a0b      	ldr	r2, [pc, #44]	@ (800363c <update_setpoints+0x2f4>)
 800360e:	6053      	str	r3, [r2, #4]
		setpoints[2] = rpy_rads[1];
 8003610:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003612:	4a0a      	ldr	r2, [pc, #40]	@ (800363c <update_setpoints+0x2f4>)
 8003614:	6093      	str	r3, [r2, #8]
		setpoints[3] = rpy_rads[2];
 8003616:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003618:	4a08      	ldr	r2, [pc, #32]	@ (800363c <update_setpoints+0x2f4>)
 800361a:	60d3      	str	r3, [r2, #12]
		first_update = 0;
 800361c:	4b08      	ldr	r3, [pc, #32]	@ (8003640 <update_setpoints+0x2f8>)
 800361e:	2200      	movs	r2, #0
 8003620:	701a      	strb	r2, [r3, #0]
	}

	return count;
 8003622:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8003626:	4618      	mov	r0, r3
 8003628:	3778      	adds	r7, #120	@ 0x78
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	9999999a 	.word	0x9999999a
 8003634:	3fa99999 	.word	0x3fa99999
 8003638:	200000c8 	.word	0x200000c8
 800363c:	2000b318 	.word	0x2000b318
 8003640:	200000cc 	.word	0x200000cc
 8003644:	00000000 	.word	0x00000000

08003648 <calculate_pwm_with_pid>:
        arm_pid_init_f32(&pids[i], 0);
    }
}

arm_status calculate_pwm_with_pid(const float joystick_input[6], uint32_t pwm_output[8], const Quaternion *orientation_quaternion,
		const float *water_pressure) {
 8003648:	b580      	push	{r7, lr}
 800364a:	b0b0      	sub	sp, #192	@ 0xc0
 800364c:	af00      	add	r7, sp, #0
 800364e:	60f8      	str	r0, [r7, #12]
 8003650:	60b9      	str	r1, [r7, #8]
 8003652:	607a      	str	r2, [r7, #4]
 8003654:	603b      	str	r3, [r7, #0]
	// The order for 4-elements arrays is: z, roll, pitch, yaw
	// calculate current values
	float current_values[4];
	calculate_rpy_from_quaternion(orientation_quaternion, &current_values[1]);
 8003656:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800365a:	3304      	adds	r3, #4
 800365c:	4619      	mov	r1, r3
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f7ff fdb8 	bl	80031d4 <calculate_rpy_from_quaternion>

	// TODO conversion from water pressure to depth
	current_values[0] = *water_pressure;
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	66fb      	str	r3, [r7, #108]	@ 0x6c

	update_setpoints(joystick_input, orientation_quaternion, water_pressure);
 800366a:	683a      	ldr	r2, [r7, #0]
 800366c:	6879      	ldr	r1, [r7, #4]
 800366e:	68f8      	ldr	r0, [r7, #12]
 8003670:	f7ff fe6a 	bl	8003348 <update_setpoints>
	float input_values[6];
	for(uint8_t i = 0; i < 6; i++) input_values[i] = joystick_input[i];
 8003674:	2300      	movs	r3, #0
 8003676:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
 800367a:	e011      	b.n	80036a0 <calculate_pwm_with_pid+0x58>
 800367c:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 8003680:	009b      	lsls	r3, r3, #2
 8003682:	68fa      	ldr	r2, [r7, #12]
 8003684:	441a      	add	r2, r3
 8003686:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 800368a:	6812      	ldr	r2, [r2, #0]
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	33c0      	adds	r3, #192	@ 0xc0
 8003690:	443b      	add	r3, r7
 8003692:	3b6c      	subs	r3, #108	@ 0x6c
 8003694:	601a      	str	r2, [r3, #0]
 8003696:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 800369a:	3301      	adds	r3, #1
 800369c:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
 80036a0:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 80036a4:	2b05      	cmp	r3, #5
 80036a6:	d9e9      	bls.n	800367c <calculate_pwm_with_pid+0x34>

	float roll_pid_feedback = arm_pid_f32(&pids[1], setpoints[1] - current_values[1]);
 80036a8:	4bcd      	ldr	r3, [pc, #820]	@ (80039e0 <calculate_pwm_with_pid+0x398>)
 80036aa:	ed93 7a01 	vldr	s14, [r3, #4]
 80036ae:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 80036b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036b6:	4bcb      	ldr	r3, [pc, #812]	@ (80039e4 <calculate_pwm_with_pid+0x39c>)
 80036b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80036bc:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 80036c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80036c4:	ed93 7a00 	vldr	s14, [r3]
 80036c8:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 80036cc:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80036d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80036d4:	edd3 6a01 	vldr	s13, [r3, #4]
 80036d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80036dc:	edd3 7a03 	vldr	s15, [r3, #12]
 80036e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 80036e4:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80036e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80036ec:	edd3 6a02 	vldr	s13, [r3, #8]
 80036f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80036f4:	edd3 7a04 	vldr	s15, [r3, #16]
 80036f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80036fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003700:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003704:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8003708:	ee77 7a27 	vadd.f32	s15, s14, s15
 800370c:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c

    /* Update state */
    S->state[1] = S->state[0];
 8003710:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003714:	68da      	ldr	r2, [r3, #12]
 8003716:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800371a:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 800371c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003720:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003724:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8003726:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800372a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800372c:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 800372e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003730:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
	float pitch_pid_feedback = arm_pid_f32(&pids[2], setpoints[2] - current_values[2]);
 8003734:	4baa      	ldr	r3, [pc, #680]	@ (80039e0 <calculate_pwm_with_pid+0x398>)
 8003736:	ed93 7a02 	vldr	s14, [r3, #8]
 800373a:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 800373e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003742:	4ba9      	ldr	r3, [pc, #676]	@ (80039e8 <calculate_pwm_with_pid+0x3a0>)
 8003744:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003748:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
    out = (S->A0 * in) +
 800374c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003750:	ed93 7a00 	vldr	s14, [r3]
 8003754:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8003758:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 800375c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003760:	edd3 6a01 	vldr	s13, [r3, #4]
 8003764:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003768:	edd3 7a03 	vldr	s15, [r3, #12]
 800376c:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8003770:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8003774:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003778:	edd3 6a02 	vldr	s13, [r3, #8]
 800377c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003780:	edd3 7a04 	vldr	s15, [r3, #16]
 8003784:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003788:	ee37 7a27 	vadd.f32	s14, s14, s15
 800378c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003790:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8003794:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003798:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88
    S->state[1] = S->state[0];
 800379c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80037a0:	68da      	ldr	r2, [r3, #12]
 80037a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80037a6:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 80037a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80037ac:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80037b0:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 80037b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80037b6:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80037ba:	615a      	str	r2, [r3, #20]
    return (out);
 80037bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80037c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
	float yaw_pid_feedback = arm_pid_f32(&pids[3], setpoints[3] - current_values[3]);
 80037c4:	4b86      	ldr	r3, [pc, #536]	@ (80039e0 <calculate_pwm_with_pid+0x398>)
 80037c6:	ed93 7a03 	vldr	s14, [r3, #12]
 80037ca:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 80037ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80037d2:	4b86      	ldr	r3, [pc, #536]	@ (80039ec <calculate_pwm_with_pid+0x3a4>)
 80037d4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80037d8:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
    out = (S->A0 * in) +
 80037dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80037e0:	ed93 7a00 	vldr	s14, [r3]
 80037e4:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 80037e8:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80037ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80037f0:	edd3 6a01 	vldr	s13, [r3, #4]
 80037f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80037f8:	edd3 7a03 	vldr	s15, [r3, #12]
 80037fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8003800:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8003804:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003808:	edd3 6a02 	vldr	s13, [r3, #8]
 800380c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003810:	edd3 7a04 	vldr	s15, [r3, #16]
 8003814:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003818:	ee37 7a27 	vadd.f32	s14, s14, s15
 800381c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003820:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8003824:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003828:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
    S->state[1] = S->state[0];
 800382c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003830:	68da      	ldr	r2, [r3, #12]
 8003832:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003836:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8003838:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800383c:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8003840:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8003842:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003846:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800384a:	615a      	str	r2, [r3, #20]
    return (out);
 800384c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003850:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
	 * we need to convert the output of the PID to the body frame in order to modify the input, in order to achieve the desired depth hold.
	*/
	// Applies the inverse rotation of the rov-body-frame (RBF) from the earth-fixed-body-frame (EFBF) ( described by the orientation quaternion ),
	// in order to compute the coordinates of the z_out vector with respect to the RBF.
	Quaternion z_out_q;
	z_out_q.w = z_out_q.x = z_out_q.y = 0;
 8003854:	f04f 0300 	mov.w	r3, #0
 8003858:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800385a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800385c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800385e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003860:	647b      	str	r3, [r7, #68]	@ 0x44
	z_out_q.z = arm_pid_f32(&pids[0], setpoints[0] - current_values[0]);
 8003862:	4b5f      	ldr	r3, [pc, #380]	@ (80039e0 <calculate_pwm_with_pid+0x398>)
 8003864:	ed93 7a00 	vldr	s14, [r3]
 8003868:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 800386c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003870:	4b5f      	ldr	r3, [pc, #380]	@ (80039f0 <calculate_pwm_with_pid+0x3a8>)
 8003872:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003876:	edc7 7a29 	vstr	s15, [r7, #164]	@ 0xa4
    out = (S->A0 * in) +
 800387a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800387e:	ed93 7a00 	vldr	s14, [r3]
 8003882:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 8003886:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 800388a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800388e:	edd3 6a01 	vldr	s13, [r3, #4]
 8003892:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003896:	edd3 7a03 	vldr	s15, [r3, #12]
 800389a:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 800389e:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80038a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80038a6:	edd3 6a02 	vldr	s13, [r3, #8]
 80038aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80038ae:	edd3 7a04 	vldr	s15, [r3, #16]
 80038b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80038b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80038ba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80038be:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 80038c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038c6:	edc7 7a28 	vstr	s15, [r7, #160]	@ 0xa0
    S->state[1] = S->state[0];
 80038ca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80038ce:	68da      	ldr	r2, [r3, #12]
 80038d0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80038d4:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 80038d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80038da:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 80038de:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 80038e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80038e4:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 80038e8:	615a      	str	r2, [r3, #20]
    return (out);
 80038ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80038ee:	653b      	str	r3, [r7, #80]	@ 0x50
	Quaternion q_inv = {0};
 80038f0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80038f4:	2200      	movs	r2, #0
 80038f6:	601a      	str	r2, [r3, #0]
 80038f8:	605a      	str	r2, [r3, #4]
 80038fa:	609a      	str	r2, [r3, #8]
 80038fc:	60da      	str	r2, [r3, #12]
	invert_quaternion(orientation_quaternion, &q_inv);
 80038fe:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003902:	4619      	mov	r1, r3
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f7ff fb3d 	bl	8002f84 <invert_quaternion>
	
	// applies the inverse rotation to the z_out_q vector
	Quaternion intermediate_result = {0};
 800390a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800390e:	2200      	movs	r2, #0
 8003910:	601a      	str	r2, [r3, #0]
 8003912:	605a      	str	r2, [r3, #4]
 8003914:	609a      	str	r2, [r3, #8]
 8003916:	60da      	str	r2, [r3, #12]
	Quaternion z_out_RBF = {0};
 8003918:	f107 0314 	add.w	r3, r7, #20
 800391c:	2200      	movs	r2, #0
 800391e:	601a      	str	r2, [r3, #0]
 8003920:	605a      	str	r2, [r3, #4]
 8003922:	609a      	str	r2, [r3, #8]
 8003924:	60da      	str	r2, [r3, #12]
	// rotating a vector v by q_inv = q_inv * v * q_inv_inv = q_inv * v * q
	multiply_quaternions(&q_inv, &z_out_q, &intermediate_result);
 8003926:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800392a:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 800392e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003932:	4618      	mov	r0, r3
 8003934:	f7ff fb9e 	bl	8003074 <multiply_quaternions>
	multiply_quaternions(&intermediate_result, orientation_quaternion, &z_out_RBF);
 8003938:	f107 0214 	add.w	r2, r7, #20
 800393c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003940:	6879      	ldr	r1, [r7, #4]
 8003942:	4618      	mov	r0, r3
 8003944:	f7ff fb96 	bl	8003074 <multiply_quaternions>

	// apply the feedback on x y z axis if and only if either the feedback is approx 0, or the input value by the user is approx 0.
	// This condition must be met for every axis value
	uint8_t x_condition = fabsf(z_out_RBF.x) < TOLERANCE || fabsf(input_values[0]) < TOLERANCE;
 8003948:	edd7 7a06 	vldr	s15, [r7, #24]
 800394c:	eef0 7ae7 	vabs.f32	s15, s15
 8003950:	ee17 0a90 	vmov	r0, s15
 8003954:	f7fc fe20 	bl	8000598 <__aeabi_f2d>
 8003958:	a31f      	add	r3, pc, #124	@ (adr r3, 80039d8 <calculate_pwm_with_pid+0x390>)
 800395a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800395e:	f7fd f8e5 	bl	8000b2c <__aeabi_dcmplt>
 8003962:	4603      	mov	r3, r0
 8003964:	2b00      	cmp	r3, #0
 8003966:	d10f      	bne.n	8003988 <calculate_pwm_with_pid+0x340>
 8003968:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800396c:	eef0 7ae7 	vabs.f32	s15, s15
 8003970:	ee17 0a90 	vmov	r0, s15
 8003974:	f7fc fe10 	bl	8000598 <__aeabi_f2d>
 8003978:	a317      	add	r3, pc, #92	@ (adr r3, 80039d8 <calculate_pwm_with_pid+0x390>)
 800397a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800397e:	f7fd f8d5 	bl	8000b2c <__aeabi_dcmplt>
 8003982:	4603      	mov	r3, r0
 8003984:	2b00      	cmp	r3, #0
 8003986:	d001      	beq.n	800398c <calculate_pwm_with_pid+0x344>
 8003988:	2301      	movs	r3, #1
 800398a:	e000      	b.n	800398e <calculate_pwm_with_pid+0x346>
 800398c:	2300      	movs	r3, #0
 800398e:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
	uint8_t y_condition = fabsf(z_out_RBF.y) < TOLERANCE || fabsf(input_values[1]) < TOLERANCE;
 8003992:	edd7 7a07 	vldr	s15, [r7, #28]
 8003996:	eef0 7ae7 	vabs.f32	s15, s15
 800399a:	ee17 0a90 	vmov	r0, s15
 800399e:	f7fc fdfb 	bl	8000598 <__aeabi_f2d>
 80039a2:	a30d      	add	r3, pc, #52	@ (adr r3, 80039d8 <calculate_pwm_with_pid+0x390>)
 80039a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039a8:	f7fd f8c0 	bl	8000b2c <__aeabi_dcmplt>
 80039ac:	4603      	mov	r3, r0
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d10f      	bne.n	80039d2 <calculate_pwm_with_pid+0x38a>
 80039b2:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 80039b6:	eef0 7ae7 	vabs.f32	s15, s15
 80039ba:	ee17 0a90 	vmov	r0, s15
 80039be:	f7fc fdeb 	bl	8000598 <__aeabi_f2d>
 80039c2:	a305      	add	r3, pc, #20	@ (adr r3, 80039d8 <calculate_pwm_with_pid+0x390>)
 80039c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039c8:	f7fd f8b0 	bl	8000b2c <__aeabi_dcmplt>
 80039cc:	4603      	mov	r3, r0
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d010      	beq.n	80039f4 <calculate_pwm_with_pid+0x3ac>
 80039d2:	2301      	movs	r3, #1
 80039d4:	e00f      	b.n	80039f6 <calculate_pwm_with_pid+0x3ae>
 80039d6:	bf00      	nop
 80039d8:	9999999a 	.word	0x9999999a
 80039dc:	3fa99999 	.word	0x3fa99999
 80039e0:	2000b318 	.word	0x2000b318
 80039e4:	2000b34c 	.word	0x2000b34c
 80039e8:	2000b370 	.word	0x2000b370
 80039ec:	2000b394 	.word	0x2000b394
 80039f0:	2000b328 	.word	0x2000b328
 80039f4:	2300      	movs	r3, #0
 80039f6:	f887 30ae 	strb.w	r3, [r7, #174]	@ 0xae
	uint8_t z_condition = fabsf(z_out_RBF.z) < TOLERANCE || fabsf(input_values[2]) < TOLERANCE;
 80039fa:	edd7 7a08 	vldr	s15, [r7, #32]
 80039fe:	eef0 7ae7 	vabs.f32	s15, s15
 8003a02:	ee17 0a90 	vmov	r0, s15
 8003a06:	f7fc fdc7 	bl	8000598 <__aeabi_f2d>
 8003a0a:	a363      	add	r3, pc, #396	@ (adr r3, 8003b98 <calculate_pwm_with_pid+0x550>)
 8003a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a10:	f7fd f88c 	bl	8000b2c <__aeabi_dcmplt>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d10f      	bne.n	8003a3a <calculate_pwm_with_pid+0x3f2>
 8003a1a:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8003a1e:	eef0 7ae7 	vabs.f32	s15, s15
 8003a22:	ee17 0a90 	vmov	r0, s15
 8003a26:	f7fc fdb7 	bl	8000598 <__aeabi_f2d>
 8003a2a:	a35b      	add	r3, pc, #364	@ (adr r3, 8003b98 <calculate_pwm_with_pid+0x550>)
 8003a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a30:	f7fd f87c 	bl	8000b2c <__aeabi_dcmplt>
 8003a34:	4603      	mov	r3, r0
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d001      	beq.n	8003a3e <calculate_pwm_with_pid+0x3f6>
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e000      	b.n	8003a40 <calculate_pwm_with_pid+0x3f8>
 8003a3e:	2300      	movs	r3, #0
 8003a40:	f887 30ad 	strb.w	r3, [r7, #173]	@ 0xad

	if (x_condition && y_condition && z_condition) {
 8003a44:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d01f      	beq.n	8003a8c <calculate_pwm_with_pid+0x444>
 8003a4c:	f897 30ae 	ldrb.w	r3, [r7, #174]	@ 0xae
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d01b      	beq.n	8003a8c <calculate_pwm_with_pid+0x444>
 8003a54:	f897 30ad 	ldrb.w	r3, [r7, #173]	@ 0xad
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d017      	beq.n	8003a8c <calculate_pwm_with_pid+0x444>
		input_values[0] += z_out_RBF.x;
 8003a5c:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8003a60:	edd7 7a06 	vldr	s15, [r7, #24]
 8003a64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a68:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
		input_values[1] += z_out_RBF.y;
 8003a6c:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8003a70:	edd7 7a07 	vldr	s15, [r7, #28]
 8003a74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a78:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
		input_values[2] += z_out_RBF.z;
 8003a7c:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8003a80:	edd7 7a08 	vldr	s15, [r7, #32]
 8003a84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a88:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
	}

	// roll
	if (fabsf(pitch_pid_feedback) < TOLERANCE || fabsf(input_values[3]) < TOLERANCE) {
 8003a8c:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 8003a90:	eef0 7ae7 	vabs.f32	s15, s15
 8003a94:	ee17 0a90 	vmov	r0, s15
 8003a98:	f7fc fd7e 	bl	8000598 <__aeabi_f2d>
 8003a9c:	a33e      	add	r3, pc, #248	@ (adr r3, 8003b98 <calculate_pwm_with_pid+0x550>)
 8003a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aa2:	f7fd f843 	bl	8000b2c <__aeabi_dcmplt>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d10f      	bne.n	8003acc <calculate_pwm_with_pid+0x484>
 8003aac:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8003ab0:	eef0 7ae7 	vabs.f32	s15, s15
 8003ab4:	ee17 0a90 	vmov	r0, s15
 8003ab8:	f7fc fd6e 	bl	8000598 <__aeabi_f2d>
 8003abc:	a336      	add	r3, pc, #216	@ (adr r3, 8003b98 <calculate_pwm_with_pid+0x550>)
 8003abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ac2:	f7fd f833 	bl	8000b2c <__aeabi_dcmplt>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d007      	beq.n	8003adc <calculate_pwm_with_pid+0x494>
		input_values[3] += roll_pid_feedback;
 8003acc:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8003ad0:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 8003ad4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ad8:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
	}
	// pitch
	if (fabsf(roll_pid_feedback) < TOLERANCE || fabsf(input_values[4]) < TOLERANCE) {
 8003adc:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 8003ae0:	eef0 7ae7 	vabs.f32	s15, s15
 8003ae4:	ee17 0a90 	vmov	r0, s15
 8003ae8:	f7fc fd56 	bl	8000598 <__aeabi_f2d>
 8003aec:	a32a      	add	r3, pc, #168	@ (adr r3, 8003b98 <calculate_pwm_with_pid+0x550>)
 8003aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003af2:	f7fd f81b 	bl	8000b2c <__aeabi_dcmplt>
 8003af6:	4603      	mov	r3, r0
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d10f      	bne.n	8003b1c <calculate_pwm_with_pid+0x4d4>
 8003afc:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8003b00:	eef0 7ae7 	vabs.f32	s15, s15
 8003b04:	ee17 0a90 	vmov	r0, s15
 8003b08:	f7fc fd46 	bl	8000598 <__aeabi_f2d>
 8003b0c:	a322      	add	r3, pc, #136	@ (adr r3, 8003b98 <calculate_pwm_with_pid+0x550>)
 8003b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b12:	f7fd f80b 	bl	8000b2c <__aeabi_dcmplt>
 8003b16:	4603      	mov	r3, r0
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d007      	beq.n	8003b2c <calculate_pwm_with_pid+0x4e4>
		input_values[4] += pitch_pid_feedback;
 8003b1c:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 8003b20:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 8003b24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b28:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
	}
	// yaw
	if (fabsf(yaw_pid_feedback) < TOLERANCE || fabsf(input_values[5]) < TOLERANCE) {
 8003b2c:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8003b30:	eef0 7ae7 	vabs.f32	s15, s15
 8003b34:	ee17 0a90 	vmov	r0, s15
 8003b38:	f7fc fd2e 	bl	8000598 <__aeabi_f2d>
 8003b3c:	a316      	add	r3, pc, #88	@ (adr r3, 8003b98 <calculate_pwm_with_pid+0x550>)
 8003b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b42:	f7fc fff3 	bl	8000b2c <__aeabi_dcmplt>
 8003b46:	4603      	mov	r3, r0
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d10f      	bne.n	8003b6c <calculate_pwm_with_pid+0x524>
 8003b4c:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8003b50:	eef0 7ae7 	vabs.f32	s15, s15
 8003b54:	ee17 0a90 	vmov	r0, s15
 8003b58:	f7fc fd1e 	bl	8000598 <__aeabi_f2d>
 8003b5c:	a30e      	add	r3, pc, #56	@ (adr r3, 8003b98 <calculate_pwm_with_pid+0x550>)
 8003b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b62:	f7fc ffe3 	bl	8000b2c <__aeabi_dcmplt>
 8003b66:	4603      	mov	r3, r0
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d007      	beq.n	8003b7c <calculate_pwm_with_pid+0x534>
		input_values[5] += yaw_pid_feedback;
 8003b6c:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 8003b70:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8003b74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b78:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68
	}

	return calculate_pwm(&input_values, pwm_output);
 8003b7c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003b80:	68b9      	ldr	r1, [r7, #8]
 8003b82:	4618      	mov	r0, r3
 8003b84:	f7ff f944 	bl	8002e10 <calculate_pwm>
 8003b88:	4603      	mov	r3, r0
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	37c0      	adds	r7, #192	@ 0xc0
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	f3af 8000 	nop.w
 8003b98:	9999999a 	.word	0x9999999a
 8003b9c:	3fa99999 	.word	0x3fa99999

08003ba0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003ba0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003bd8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003ba4:	f7fe fe4e 	bl	8002844 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003ba8:	480c      	ldr	r0, [pc, #48]	@ (8003bdc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003baa:	490d      	ldr	r1, [pc, #52]	@ (8003be0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003bac:	4a0d      	ldr	r2, [pc, #52]	@ (8003be4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003bae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003bb0:	e002      	b.n	8003bb8 <LoopCopyDataInit>

08003bb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003bb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003bb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003bb6:	3304      	adds	r3, #4

08003bb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003bb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003bba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003bbc:	d3f9      	bcc.n	8003bb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003bbe:	4a0a      	ldr	r2, [pc, #40]	@ (8003be8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003bc0:	4c0a      	ldr	r4, [pc, #40]	@ (8003bec <LoopFillZerobss+0x22>)
  movs r3, #0
 8003bc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003bc4:	e001      	b.n	8003bca <LoopFillZerobss>

08003bc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003bc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003bc8:	3204      	adds	r2, #4

08003bca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003bca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003bcc:	d3fb      	bcc.n	8003bc6 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8003bce:	f019 fcc5 	bl	801d55c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003bd2:	f7fe fa45 	bl	8002060 <main>
  bx  lr    
 8003bd6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003bd8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8003bdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003be0:	2000337c 	.word	0x2000337c
  ldr r2, =_sidata
 8003be4:	08020b10 	.word	0x08020b10
  ldr r2, =_sbss
 8003be8:	20003380 	.word	0x20003380
  ldr r4, =_ebss
 8003bec:	20019d8c 	.word	0x20019d8c

08003bf0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003bf0:	e7fe      	b.n	8003bf0 <ADC_IRQHandler>
	...

08003bf4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003bf8:	4b0e      	ldr	r3, [pc, #56]	@ (8003c34 <HAL_Init+0x40>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a0d      	ldr	r2, [pc, #52]	@ (8003c34 <HAL_Init+0x40>)
 8003bfe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003c02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003c04:	4b0b      	ldr	r3, [pc, #44]	@ (8003c34 <HAL_Init+0x40>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a0a      	ldr	r2, [pc, #40]	@ (8003c34 <HAL_Init+0x40>)
 8003c0a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003c0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003c10:	4b08      	ldr	r3, [pc, #32]	@ (8003c34 <HAL_Init+0x40>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a07      	ldr	r2, [pc, #28]	@ (8003c34 <HAL_Init+0x40>)
 8003c16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c1c:	2003      	movs	r0, #3
 8003c1e:	f000 f8d8 	bl	8003dd2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003c22:	200f      	movs	r0, #15
 8003c24:	f7fe fcac 	bl	8002580 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003c28:	f7fe fc7e 	bl	8002528 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003c2c:	2300      	movs	r3, #0
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	bf00      	nop
 8003c34:	40023c00 	.word	0x40023c00

08003c38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003c3c:	4b06      	ldr	r3, [pc, #24]	@ (8003c58 <HAL_IncTick+0x20>)
 8003c3e:	781b      	ldrb	r3, [r3, #0]
 8003c40:	461a      	mov	r2, r3
 8003c42:	4b06      	ldr	r3, [pc, #24]	@ (8003c5c <HAL_IncTick+0x24>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4413      	add	r3, r2
 8003c48:	4a04      	ldr	r2, [pc, #16]	@ (8003c5c <HAL_IncTick+0x24>)
 8003c4a:	6013      	str	r3, [r2, #0]
}
 8003c4c:	bf00      	nop
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr
 8003c56:	bf00      	nop
 8003c58:	200000d4 	.word	0x200000d4
 8003c5c:	2000b3b8 	.word	0x2000b3b8

08003c60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c60:	b480      	push	{r7}
 8003c62:	af00      	add	r7, sp, #0
  return uwTick;
 8003c64:	4b03      	ldr	r3, [pc, #12]	@ (8003c74 <HAL_GetTick+0x14>)
 8003c66:	681b      	ldr	r3, [r3, #0]
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr
 8003c72:	bf00      	nop
 8003c74:	2000b3b8 	.word	0x2000b3b8

08003c78 <__NVIC_SetPriorityGrouping>:
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b085      	sub	sp, #20
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	f003 0307 	and.w	r3, r3, #7
 8003c86:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c88:	4b0c      	ldr	r3, [pc, #48]	@ (8003cbc <__NVIC_SetPriorityGrouping+0x44>)
 8003c8a:	68db      	ldr	r3, [r3, #12]
 8003c8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c8e:	68ba      	ldr	r2, [r7, #8]
 8003c90:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003c94:	4013      	ands	r3, r2
 8003c96:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ca0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003ca4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ca8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003caa:	4a04      	ldr	r2, [pc, #16]	@ (8003cbc <__NVIC_SetPriorityGrouping+0x44>)
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	60d3      	str	r3, [r2, #12]
}
 8003cb0:	bf00      	nop
 8003cb2:	3714      	adds	r7, #20
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr
 8003cbc:	e000ed00 	.word	0xe000ed00

08003cc0 <__NVIC_GetPriorityGrouping>:
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003cc4:	4b04      	ldr	r3, [pc, #16]	@ (8003cd8 <__NVIC_GetPriorityGrouping+0x18>)
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	0a1b      	lsrs	r3, r3, #8
 8003cca:	f003 0307 	and.w	r3, r3, #7
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr
 8003cd8:	e000ed00 	.word	0xe000ed00

08003cdc <__NVIC_EnableIRQ>:
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b083      	sub	sp, #12
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	db0b      	blt.n	8003d06 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003cee:	79fb      	ldrb	r3, [r7, #7]
 8003cf0:	f003 021f 	and.w	r2, r3, #31
 8003cf4:	4907      	ldr	r1, [pc, #28]	@ (8003d14 <__NVIC_EnableIRQ+0x38>)
 8003cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cfa:	095b      	lsrs	r3, r3, #5
 8003cfc:	2001      	movs	r0, #1
 8003cfe:	fa00 f202 	lsl.w	r2, r0, r2
 8003d02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003d06:	bf00      	nop
 8003d08:	370c      	adds	r7, #12
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr
 8003d12:	bf00      	nop
 8003d14:	e000e100 	.word	0xe000e100

08003d18 <__NVIC_SetPriority>:
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b083      	sub	sp, #12
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	4603      	mov	r3, r0
 8003d20:	6039      	str	r1, [r7, #0]
 8003d22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	db0a      	blt.n	8003d42 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	b2da      	uxtb	r2, r3
 8003d30:	490c      	ldr	r1, [pc, #48]	@ (8003d64 <__NVIC_SetPriority+0x4c>)
 8003d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d36:	0112      	lsls	r2, r2, #4
 8003d38:	b2d2      	uxtb	r2, r2
 8003d3a:	440b      	add	r3, r1
 8003d3c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003d40:	e00a      	b.n	8003d58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	b2da      	uxtb	r2, r3
 8003d46:	4908      	ldr	r1, [pc, #32]	@ (8003d68 <__NVIC_SetPriority+0x50>)
 8003d48:	79fb      	ldrb	r3, [r7, #7]
 8003d4a:	f003 030f 	and.w	r3, r3, #15
 8003d4e:	3b04      	subs	r3, #4
 8003d50:	0112      	lsls	r2, r2, #4
 8003d52:	b2d2      	uxtb	r2, r2
 8003d54:	440b      	add	r3, r1
 8003d56:	761a      	strb	r2, [r3, #24]
}
 8003d58:	bf00      	nop
 8003d5a:	370c      	adds	r7, #12
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr
 8003d64:	e000e100 	.word	0xe000e100
 8003d68:	e000ed00 	.word	0xe000ed00

08003d6c <NVIC_EncodePriority>:
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b089      	sub	sp, #36	@ 0x24
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	60f8      	str	r0, [r7, #12]
 8003d74:	60b9      	str	r1, [r7, #8]
 8003d76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	f003 0307 	and.w	r3, r3, #7
 8003d7e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d80:	69fb      	ldr	r3, [r7, #28]
 8003d82:	f1c3 0307 	rsb	r3, r3, #7
 8003d86:	2b04      	cmp	r3, #4
 8003d88:	bf28      	it	cs
 8003d8a:	2304      	movcs	r3, #4
 8003d8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d8e:	69fb      	ldr	r3, [r7, #28]
 8003d90:	3304      	adds	r3, #4
 8003d92:	2b06      	cmp	r3, #6
 8003d94:	d902      	bls.n	8003d9c <NVIC_EncodePriority+0x30>
 8003d96:	69fb      	ldr	r3, [r7, #28]
 8003d98:	3b03      	subs	r3, #3
 8003d9a:	e000      	b.n	8003d9e <NVIC_EncodePriority+0x32>
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003da0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003da4:	69bb      	ldr	r3, [r7, #24]
 8003da6:	fa02 f303 	lsl.w	r3, r2, r3
 8003daa:	43da      	mvns	r2, r3
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	401a      	ands	r2, r3
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003db4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	fa01 f303 	lsl.w	r3, r1, r3
 8003dbe:	43d9      	mvns	r1, r3
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003dc4:	4313      	orrs	r3, r2
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3724      	adds	r7, #36	@ 0x24
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr

08003dd2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003dd2:	b580      	push	{r7, lr}
 8003dd4:	b082      	sub	sp, #8
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f7ff ff4c 	bl	8003c78 <__NVIC_SetPriorityGrouping>
}
 8003de0:	bf00      	nop
 8003de2:	3708      	adds	r7, #8
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}

08003de8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b086      	sub	sp, #24
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	4603      	mov	r3, r0
 8003df0:	60b9      	str	r1, [r7, #8]
 8003df2:	607a      	str	r2, [r7, #4]
 8003df4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003df6:	2300      	movs	r3, #0
 8003df8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003dfa:	f7ff ff61 	bl	8003cc0 <__NVIC_GetPriorityGrouping>
 8003dfe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e00:	687a      	ldr	r2, [r7, #4]
 8003e02:	68b9      	ldr	r1, [r7, #8]
 8003e04:	6978      	ldr	r0, [r7, #20]
 8003e06:	f7ff ffb1 	bl	8003d6c <NVIC_EncodePriority>
 8003e0a:	4602      	mov	r2, r0
 8003e0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e10:	4611      	mov	r1, r2
 8003e12:	4618      	mov	r0, r3
 8003e14:	f7ff ff80 	bl	8003d18 <__NVIC_SetPriority>
}
 8003e18:	bf00      	nop
 8003e1a:	3718      	adds	r7, #24
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}

08003e20 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b082      	sub	sp, #8
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	4603      	mov	r3, r0
 8003e28:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f7ff ff54 	bl	8003cdc <__NVIC_EnableIRQ>
}
 8003e34:	bf00      	nop
 8003e36:	3708      	adds	r7, #8
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}

08003e3c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b086      	sub	sp, #24
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003e44:	2300      	movs	r3, #0
 8003e46:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003e48:	f7ff ff0a 	bl	8003c60 <HAL_GetTick>
 8003e4c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d101      	bne.n	8003e58 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	e099      	b.n	8003f8c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2202      	movs	r2, #2
 8003e5c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2200      	movs	r2, #0
 8003e64:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f022 0201 	bic.w	r2, r2, #1
 8003e76:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e78:	e00f      	b.n	8003e9a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003e7a:	f7ff fef1 	bl	8003c60 <HAL_GetTick>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	1ad3      	subs	r3, r2, r3
 8003e84:	2b05      	cmp	r3, #5
 8003e86:	d908      	bls.n	8003e9a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2220      	movs	r2, #32
 8003e8c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2203      	movs	r2, #3
 8003e92:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003e96:	2303      	movs	r3, #3
 8003e98:	e078      	b.n	8003f8c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 0301 	and.w	r3, r3, #1
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d1e8      	bne.n	8003e7a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003eb0:	697a      	ldr	r2, [r7, #20]
 8003eb2:	4b38      	ldr	r3, [pc, #224]	@ (8003f94 <HAL_DMA_Init+0x158>)
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	685a      	ldr	r2, [r3, #4]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ec6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	691b      	ldr	r3, [r3, #16]
 8003ecc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ed2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	699b      	ldr	r3, [r3, #24]
 8003ed8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ede:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6a1b      	ldr	r3, [r3, #32]
 8003ee4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ee6:	697a      	ldr	r2, [r7, #20]
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ef0:	2b04      	cmp	r3, #4
 8003ef2:	d107      	bne.n	8003f04 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003efc:	4313      	orrs	r3, r2
 8003efe:	697a      	ldr	r2, [r7, #20]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	697a      	ldr	r2, [r7, #20]
 8003f0a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	695b      	ldr	r3, [r3, #20]
 8003f12:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	f023 0307 	bic.w	r3, r3, #7
 8003f1a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f20:	697a      	ldr	r2, [r7, #20]
 8003f22:	4313      	orrs	r3, r2
 8003f24:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f2a:	2b04      	cmp	r3, #4
 8003f2c:	d117      	bne.n	8003f5e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f32:	697a      	ldr	r2, [r7, #20]
 8003f34:	4313      	orrs	r3, r2
 8003f36:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d00e      	beq.n	8003f5e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	f000 fb01 	bl	8004548 <DMA_CheckFifoParam>
 8003f46:	4603      	mov	r3, r0
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d008      	beq.n	8003f5e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2240      	movs	r2, #64	@ 0x40
 8003f50:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2201      	movs	r2, #1
 8003f56:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e016      	b.n	8003f8c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	697a      	ldr	r2, [r7, #20]
 8003f64:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f000 fab8 	bl	80044dc <DMA_CalcBaseAndBitshift>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f74:	223f      	movs	r2, #63	@ 0x3f
 8003f76:	409a      	lsls	r2, r3
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2201      	movs	r2, #1
 8003f86:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003f8a:	2300      	movs	r3, #0
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3718      	adds	r7, #24
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}
 8003f94:	f010803f 	.word	0xf010803f

08003f98 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b086      	sub	sp, #24
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	60f8      	str	r0, [r7, #12]
 8003fa0:	60b9      	str	r1, [r7, #8]
 8003fa2:	607a      	str	r2, [r7, #4]
 8003fa4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fae:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d101      	bne.n	8003fbe <HAL_DMA_Start_IT+0x26>
 8003fba:	2302      	movs	r3, #2
 8003fbc:	e040      	b.n	8004040 <HAL_DMA_Start_IT+0xa8>
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d12f      	bne.n	8004032 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2202      	movs	r2, #2
 8003fd6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	687a      	ldr	r2, [r7, #4]
 8003fe4:	68b9      	ldr	r1, [r7, #8]
 8003fe6:	68f8      	ldr	r0, [r7, #12]
 8003fe8:	f000 fa4a 	bl	8004480 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ff0:	223f      	movs	r2, #63	@ 0x3f
 8003ff2:	409a      	lsls	r2, r3
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f042 0216 	orr.w	r2, r2, #22
 8004006:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800400c:	2b00      	cmp	r3, #0
 800400e:	d007      	beq.n	8004020 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f042 0208 	orr.w	r2, r2, #8
 800401e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f042 0201 	orr.w	r2, r2, #1
 800402e:	601a      	str	r2, [r3, #0]
 8004030:	e005      	b.n	800403e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2200      	movs	r2, #0
 8004036:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800403a:	2302      	movs	r3, #2
 800403c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800403e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004040:	4618      	mov	r0, r3
 8004042:	3718      	adds	r7, #24
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}

08004048 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b084      	sub	sp, #16
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004054:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004056:	f7ff fe03 	bl	8003c60 <HAL_GetTick>
 800405a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004062:	b2db      	uxtb	r3, r3
 8004064:	2b02      	cmp	r3, #2
 8004066:	d008      	beq.n	800407a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2280      	movs	r2, #128	@ 0x80
 800406c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2200      	movs	r2, #0
 8004072:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	e052      	b.n	8004120 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f022 0216 	bic.w	r2, r2, #22
 8004088:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	695a      	ldr	r2, [r3, #20]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004098:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d103      	bne.n	80040aa <HAL_DMA_Abort+0x62>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d007      	beq.n	80040ba <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f022 0208 	bic.w	r2, r2, #8
 80040b8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f022 0201 	bic.w	r2, r2, #1
 80040c8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80040ca:	e013      	b.n	80040f4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80040cc:	f7ff fdc8 	bl	8003c60 <HAL_GetTick>
 80040d0:	4602      	mov	r2, r0
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	1ad3      	subs	r3, r2, r3
 80040d6:	2b05      	cmp	r3, #5
 80040d8:	d90c      	bls.n	80040f4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2220      	movs	r2, #32
 80040de:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2203      	movs	r2, #3
 80040e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2200      	movs	r2, #0
 80040ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80040f0:	2303      	movs	r3, #3
 80040f2:	e015      	b.n	8004120 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 0301 	and.w	r3, r3, #1
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d1e4      	bne.n	80040cc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004106:	223f      	movs	r2, #63	@ 0x3f
 8004108:	409a      	lsls	r2, r3
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2201      	movs	r2, #1
 8004112:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2200      	movs	r2, #0
 800411a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800411e:	2300      	movs	r3, #0
}
 8004120:	4618      	mov	r0, r3
 8004122:	3710      	adds	r7, #16
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}

08004128 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004128:	b480      	push	{r7}
 800412a:	b083      	sub	sp, #12
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004136:	b2db      	uxtb	r3, r3
 8004138:	2b02      	cmp	r3, #2
 800413a:	d004      	beq.n	8004146 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2280      	movs	r2, #128	@ 0x80
 8004140:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e00c      	b.n	8004160 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2205      	movs	r2, #5
 800414a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f022 0201 	bic.w	r2, r2, #1
 800415c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800415e:	2300      	movs	r3, #0
}
 8004160:	4618      	mov	r0, r3
 8004162:	370c      	adds	r7, #12
 8004164:	46bd      	mov	sp, r7
 8004166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416a:	4770      	bx	lr

0800416c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b086      	sub	sp, #24
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004174:	2300      	movs	r3, #0
 8004176:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004178:	4b8e      	ldr	r3, [pc, #568]	@ (80043b4 <HAL_DMA_IRQHandler+0x248>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a8e      	ldr	r2, [pc, #568]	@ (80043b8 <HAL_DMA_IRQHandler+0x24c>)
 800417e:	fba2 2303 	umull	r2, r3, r2, r3
 8004182:	0a9b      	lsrs	r3, r3, #10
 8004184:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800418a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004196:	2208      	movs	r2, #8
 8004198:	409a      	lsls	r2, r3
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	4013      	ands	r3, r2
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d01a      	beq.n	80041d8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 0304 	and.w	r3, r3, #4
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d013      	beq.n	80041d8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f022 0204 	bic.w	r2, r2, #4
 80041be:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041c4:	2208      	movs	r2, #8
 80041c6:	409a      	lsls	r2, r3
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041d0:	f043 0201 	orr.w	r2, r3, #1
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041dc:	2201      	movs	r2, #1
 80041de:	409a      	lsls	r2, r3
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	4013      	ands	r3, r2
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d012      	beq.n	800420e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	695b      	ldr	r3, [r3, #20]
 80041ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d00b      	beq.n	800420e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041fa:	2201      	movs	r2, #1
 80041fc:	409a      	lsls	r2, r3
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004206:	f043 0202 	orr.w	r2, r3, #2
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004212:	2204      	movs	r2, #4
 8004214:	409a      	lsls	r2, r3
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	4013      	ands	r3, r2
 800421a:	2b00      	cmp	r3, #0
 800421c:	d012      	beq.n	8004244 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 0302 	and.w	r3, r3, #2
 8004228:	2b00      	cmp	r3, #0
 800422a:	d00b      	beq.n	8004244 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004230:	2204      	movs	r2, #4
 8004232:	409a      	lsls	r2, r3
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800423c:	f043 0204 	orr.w	r2, r3, #4
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004248:	2210      	movs	r2, #16
 800424a:	409a      	lsls	r2, r3
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	4013      	ands	r3, r2
 8004250:	2b00      	cmp	r3, #0
 8004252:	d043      	beq.n	80042dc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 0308 	and.w	r3, r3, #8
 800425e:	2b00      	cmp	r3, #0
 8004260:	d03c      	beq.n	80042dc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004266:	2210      	movs	r2, #16
 8004268:	409a      	lsls	r2, r3
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004278:	2b00      	cmp	r3, #0
 800427a:	d018      	beq.n	80042ae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004286:	2b00      	cmp	r3, #0
 8004288:	d108      	bne.n	800429c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800428e:	2b00      	cmp	r3, #0
 8004290:	d024      	beq.n	80042dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	4798      	blx	r3
 800429a:	e01f      	b.n	80042dc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d01b      	beq.n	80042dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	4798      	blx	r3
 80042ac:	e016      	b.n	80042dc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d107      	bne.n	80042cc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f022 0208 	bic.w	r2, r2, #8
 80042ca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d003      	beq.n	80042dc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042d8:	6878      	ldr	r0, [r7, #4]
 80042da:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042e0:	2220      	movs	r2, #32
 80042e2:	409a      	lsls	r2, r3
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	4013      	ands	r3, r2
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	f000 808f 	beq.w	800440c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f003 0310 	and.w	r3, r3, #16
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	f000 8087 	beq.w	800440c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004302:	2220      	movs	r2, #32
 8004304:	409a      	lsls	r2, r3
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004310:	b2db      	uxtb	r3, r3
 8004312:	2b05      	cmp	r3, #5
 8004314:	d136      	bne.n	8004384 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f022 0216 	bic.w	r2, r2, #22
 8004324:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	695a      	ldr	r2, [r3, #20]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004334:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800433a:	2b00      	cmp	r3, #0
 800433c:	d103      	bne.n	8004346 <HAL_DMA_IRQHandler+0x1da>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004342:	2b00      	cmp	r3, #0
 8004344:	d007      	beq.n	8004356 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f022 0208 	bic.w	r2, r2, #8
 8004354:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800435a:	223f      	movs	r2, #63	@ 0x3f
 800435c:	409a      	lsls	r2, r3
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2201      	movs	r2, #1
 8004366:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2200      	movs	r2, #0
 800436e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004376:	2b00      	cmp	r3, #0
 8004378:	d07e      	beq.n	8004478 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	4798      	blx	r3
        }
        return;
 8004382:	e079      	b.n	8004478 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800438e:	2b00      	cmp	r3, #0
 8004390:	d01d      	beq.n	80043ce <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800439c:	2b00      	cmp	r3, #0
 800439e:	d10d      	bne.n	80043bc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d031      	beq.n	800440c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	4798      	blx	r3
 80043b0:	e02c      	b.n	800440c <HAL_DMA_IRQHandler+0x2a0>
 80043b2:	bf00      	nop
 80043b4:	20000004 	.word	0x20000004
 80043b8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d023      	beq.n	800440c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	4798      	blx	r3
 80043cc:	e01e      	b.n	800440c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d10f      	bne.n	80043fc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f022 0210 	bic.w	r2, r2, #16
 80043ea:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2201      	movs	r2, #1
 80043f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2200      	movs	r2, #0
 80043f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004400:	2b00      	cmp	r3, #0
 8004402:	d003      	beq.n	800440c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004410:	2b00      	cmp	r3, #0
 8004412:	d032      	beq.n	800447a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004418:	f003 0301 	and.w	r3, r3, #1
 800441c:	2b00      	cmp	r3, #0
 800441e:	d022      	beq.n	8004466 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2205      	movs	r2, #5
 8004424:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f022 0201 	bic.w	r2, r2, #1
 8004436:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	3301      	adds	r3, #1
 800443c:	60bb      	str	r3, [r7, #8]
 800443e:	697a      	ldr	r2, [r7, #20]
 8004440:	429a      	cmp	r2, r3
 8004442:	d307      	bcc.n	8004454 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f003 0301 	and.w	r3, r3, #1
 800444e:	2b00      	cmp	r3, #0
 8004450:	d1f2      	bne.n	8004438 <HAL_DMA_IRQHandler+0x2cc>
 8004452:	e000      	b.n	8004456 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004454:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2201      	movs	r2, #1
 800445a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2200      	movs	r2, #0
 8004462:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800446a:	2b00      	cmp	r3, #0
 800446c:	d005      	beq.n	800447a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	4798      	blx	r3
 8004476:	e000      	b.n	800447a <HAL_DMA_IRQHandler+0x30e>
        return;
 8004478:	bf00      	nop
    }
  }
}
 800447a:	3718      	adds	r7, #24
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}

08004480 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004480:	b480      	push	{r7}
 8004482:	b085      	sub	sp, #20
 8004484:	af00      	add	r7, sp, #0
 8004486:	60f8      	str	r0, [r7, #12]
 8004488:	60b9      	str	r1, [r7, #8]
 800448a:	607a      	str	r2, [r7, #4]
 800448c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800449c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	683a      	ldr	r2, [r7, #0]
 80044a4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	2b40      	cmp	r3, #64	@ 0x40
 80044ac:	d108      	bne.n	80044c0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	68ba      	ldr	r2, [r7, #8]
 80044bc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80044be:	e007      	b.n	80044d0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	68ba      	ldr	r2, [r7, #8]
 80044c6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	687a      	ldr	r2, [r7, #4]
 80044ce:	60da      	str	r2, [r3, #12]
}
 80044d0:	bf00      	nop
 80044d2:	3714      	adds	r7, #20
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr

080044dc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80044dc:	b480      	push	{r7}
 80044de:	b085      	sub	sp, #20
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	3b10      	subs	r3, #16
 80044ec:	4a14      	ldr	r2, [pc, #80]	@ (8004540 <DMA_CalcBaseAndBitshift+0x64>)
 80044ee:	fba2 2303 	umull	r2, r3, r2, r3
 80044f2:	091b      	lsrs	r3, r3, #4
 80044f4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80044f6:	4a13      	ldr	r2, [pc, #76]	@ (8004544 <DMA_CalcBaseAndBitshift+0x68>)
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	4413      	add	r3, r2
 80044fc:	781b      	ldrb	r3, [r3, #0]
 80044fe:	461a      	mov	r2, r3
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2b03      	cmp	r3, #3
 8004508:	d909      	bls.n	800451e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004512:	f023 0303 	bic.w	r3, r3, #3
 8004516:	1d1a      	adds	r2, r3, #4
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	659a      	str	r2, [r3, #88]	@ 0x58
 800451c:	e007      	b.n	800452e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004526:	f023 0303 	bic.w	r3, r3, #3
 800452a:	687a      	ldr	r2, [r7, #4]
 800452c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004532:	4618      	mov	r0, r3
 8004534:	3714      	adds	r7, #20
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr
 800453e:	bf00      	nop
 8004540:	aaaaaaab 	.word	0xaaaaaaab
 8004544:	0801e744 	.word	0x0801e744

08004548 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004548:	b480      	push	{r7}
 800454a:	b085      	sub	sp, #20
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004550:	2300      	movs	r3, #0
 8004552:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004558:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	699b      	ldr	r3, [r3, #24]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d11f      	bne.n	80045a2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	2b03      	cmp	r3, #3
 8004566:	d856      	bhi.n	8004616 <DMA_CheckFifoParam+0xce>
 8004568:	a201      	add	r2, pc, #4	@ (adr r2, 8004570 <DMA_CheckFifoParam+0x28>)
 800456a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800456e:	bf00      	nop
 8004570:	08004581 	.word	0x08004581
 8004574:	08004593 	.word	0x08004593
 8004578:	08004581 	.word	0x08004581
 800457c:	08004617 	.word	0x08004617
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004584:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004588:	2b00      	cmp	r3, #0
 800458a:	d046      	beq.n	800461a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004590:	e043      	b.n	800461a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004596:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800459a:	d140      	bne.n	800461e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045a0:	e03d      	b.n	800461e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	699b      	ldr	r3, [r3, #24]
 80045a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80045aa:	d121      	bne.n	80045f0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	2b03      	cmp	r3, #3
 80045b0:	d837      	bhi.n	8004622 <DMA_CheckFifoParam+0xda>
 80045b2:	a201      	add	r2, pc, #4	@ (adr r2, 80045b8 <DMA_CheckFifoParam+0x70>)
 80045b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045b8:	080045c9 	.word	0x080045c9
 80045bc:	080045cf 	.word	0x080045cf
 80045c0:	080045c9 	.word	0x080045c9
 80045c4:	080045e1 	.word	0x080045e1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	73fb      	strb	r3, [r7, #15]
      break;
 80045cc:	e030      	b.n	8004630 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045d2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d025      	beq.n	8004626 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045de:	e022      	b.n	8004626 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045e4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80045e8:	d11f      	bne.n	800462a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80045ee:	e01c      	b.n	800462a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	2b02      	cmp	r3, #2
 80045f4:	d903      	bls.n	80045fe <DMA_CheckFifoParam+0xb6>
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	2b03      	cmp	r3, #3
 80045fa:	d003      	beq.n	8004604 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80045fc:	e018      	b.n	8004630 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	73fb      	strb	r3, [r7, #15]
      break;
 8004602:	e015      	b.n	8004630 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004608:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800460c:	2b00      	cmp	r3, #0
 800460e:	d00e      	beq.n	800462e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	73fb      	strb	r3, [r7, #15]
      break;
 8004614:	e00b      	b.n	800462e <DMA_CheckFifoParam+0xe6>
      break;
 8004616:	bf00      	nop
 8004618:	e00a      	b.n	8004630 <DMA_CheckFifoParam+0xe8>
      break;
 800461a:	bf00      	nop
 800461c:	e008      	b.n	8004630 <DMA_CheckFifoParam+0xe8>
      break;
 800461e:	bf00      	nop
 8004620:	e006      	b.n	8004630 <DMA_CheckFifoParam+0xe8>
      break;
 8004622:	bf00      	nop
 8004624:	e004      	b.n	8004630 <DMA_CheckFifoParam+0xe8>
      break;
 8004626:	bf00      	nop
 8004628:	e002      	b.n	8004630 <DMA_CheckFifoParam+0xe8>
      break;   
 800462a:	bf00      	nop
 800462c:	e000      	b.n	8004630 <DMA_CheckFifoParam+0xe8>
      break;
 800462e:	bf00      	nop
    }
  } 
  
  return status; 
 8004630:	7bfb      	ldrb	r3, [r7, #15]
}
 8004632:	4618      	mov	r0, r3
 8004634:	3714      	adds	r7, #20
 8004636:	46bd      	mov	sp, r7
 8004638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463c:	4770      	bx	lr
 800463e:	bf00      	nop

08004640 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004640:	b480      	push	{r7}
 8004642:	b089      	sub	sp, #36	@ 0x24
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
 8004648:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800464a:	2300      	movs	r3, #0
 800464c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800464e:	2300      	movs	r3, #0
 8004650:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004652:	2300      	movs	r3, #0
 8004654:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004656:	2300      	movs	r3, #0
 8004658:	61fb      	str	r3, [r7, #28]
 800465a:	e177      	b.n	800494c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800465c:	2201      	movs	r2, #1
 800465e:	69fb      	ldr	r3, [r7, #28]
 8004660:	fa02 f303 	lsl.w	r3, r2, r3
 8004664:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	697a      	ldr	r2, [r7, #20]
 800466c:	4013      	ands	r3, r2
 800466e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004670:	693a      	ldr	r2, [r7, #16]
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	429a      	cmp	r2, r3
 8004676:	f040 8166 	bne.w	8004946 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	f003 0303 	and.w	r3, r3, #3
 8004682:	2b01      	cmp	r3, #1
 8004684:	d005      	beq.n	8004692 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800468e:	2b02      	cmp	r3, #2
 8004690:	d130      	bne.n	80046f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004698:	69fb      	ldr	r3, [r7, #28]
 800469a:	005b      	lsls	r3, r3, #1
 800469c:	2203      	movs	r2, #3
 800469e:	fa02 f303 	lsl.w	r3, r2, r3
 80046a2:	43db      	mvns	r3, r3
 80046a4:	69ba      	ldr	r2, [r7, #24]
 80046a6:	4013      	ands	r3, r2
 80046a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	68da      	ldr	r2, [r3, #12]
 80046ae:	69fb      	ldr	r3, [r7, #28]
 80046b0:	005b      	lsls	r3, r3, #1
 80046b2:	fa02 f303 	lsl.w	r3, r2, r3
 80046b6:	69ba      	ldr	r2, [r7, #24]
 80046b8:	4313      	orrs	r3, r2
 80046ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	69ba      	ldr	r2, [r7, #24]
 80046c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80046c8:	2201      	movs	r2, #1
 80046ca:	69fb      	ldr	r3, [r7, #28]
 80046cc:	fa02 f303 	lsl.w	r3, r2, r3
 80046d0:	43db      	mvns	r3, r3
 80046d2:	69ba      	ldr	r2, [r7, #24]
 80046d4:	4013      	ands	r3, r2
 80046d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	091b      	lsrs	r3, r3, #4
 80046de:	f003 0201 	and.w	r2, r3, #1
 80046e2:	69fb      	ldr	r3, [r7, #28]
 80046e4:	fa02 f303 	lsl.w	r3, r2, r3
 80046e8:	69ba      	ldr	r2, [r7, #24]
 80046ea:	4313      	orrs	r3, r2
 80046ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	69ba      	ldr	r2, [r7, #24]
 80046f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	f003 0303 	and.w	r3, r3, #3
 80046fc:	2b03      	cmp	r3, #3
 80046fe:	d017      	beq.n	8004730 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	68db      	ldr	r3, [r3, #12]
 8004704:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004706:	69fb      	ldr	r3, [r7, #28]
 8004708:	005b      	lsls	r3, r3, #1
 800470a:	2203      	movs	r2, #3
 800470c:	fa02 f303 	lsl.w	r3, r2, r3
 8004710:	43db      	mvns	r3, r3
 8004712:	69ba      	ldr	r2, [r7, #24]
 8004714:	4013      	ands	r3, r2
 8004716:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	689a      	ldr	r2, [r3, #8]
 800471c:	69fb      	ldr	r3, [r7, #28]
 800471e:	005b      	lsls	r3, r3, #1
 8004720:	fa02 f303 	lsl.w	r3, r2, r3
 8004724:	69ba      	ldr	r2, [r7, #24]
 8004726:	4313      	orrs	r3, r2
 8004728:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	69ba      	ldr	r2, [r7, #24]
 800472e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	f003 0303 	and.w	r3, r3, #3
 8004738:	2b02      	cmp	r3, #2
 800473a:	d123      	bne.n	8004784 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800473c:	69fb      	ldr	r3, [r7, #28]
 800473e:	08da      	lsrs	r2, r3, #3
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	3208      	adds	r2, #8
 8004744:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004748:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800474a:	69fb      	ldr	r3, [r7, #28]
 800474c:	f003 0307 	and.w	r3, r3, #7
 8004750:	009b      	lsls	r3, r3, #2
 8004752:	220f      	movs	r2, #15
 8004754:	fa02 f303 	lsl.w	r3, r2, r3
 8004758:	43db      	mvns	r3, r3
 800475a:	69ba      	ldr	r2, [r7, #24]
 800475c:	4013      	ands	r3, r2
 800475e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	691a      	ldr	r2, [r3, #16]
 8004764:	69fb      	ldr	r3, [r7, #28]
 8004766:	f003 0307 	and.w	r3, r3, #7
 800476a:	009b      	lsls	r3, r3, #2
 800476c:	fa02 f303 	lsl.w	r3, r2, r3
 8004770:	69ba      	ldr	r2, [r7, #24]
 8004772:	4313      	orrs	r3, r2
 8004774:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004776:	69fb      	ldr	r3, [r7, #28]
 8004778:	08da      	lsrs	r2, r3, #3
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	3208      	adds	r2, #8
 800477e:	69b9      	ldr	r1, [r7, #24]
 8004780:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800478a:	69fb      	ldr	r3, [r7, #28]
 800478c:	005b      	lsls	r3, r3, #1
 800478e:	2203      	movs	r2, #3
 8004790:	fa02 f303 	lsl.w	r3, r2, r3
 8004794:	43db      	mvns	r3, r3
 8004796:	69ba      	ldr	r2, [r7, #24]
 8004798:	4013      	ands	r3, r2
 800479a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	f003 0203 	and.w	r2, r3, #3
 80047a4:	69fb      	ldr	r3, [r7, #28]
 80047a6:	005b      	lsls	r3, r3, #1
 80047a8:	fa02 f303 	lsl.w	r3, r2, r3
 80047ac:	69ba      	ldr	r2, [r7, #24]
 80047ae:	4313      	orrs	r3, r2
 80047b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	69ba      	ldr	r2, [r7, #24]
 80047b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	f000 80c0 	beq.w	8004946 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047c6:	2300      	movs	r3, #0
 80047c8:	60fb      	str	r3, [r7, #12]
 80047ca:	4b66      	ldr	r3, [pc, #408]	@ (8004964 <HAL_GPIO_Init+0x324>)
 80047cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047ce:	4a65      	ldr	r2, [pc, #404]	@ (8004964 <HAL_GPIO_Init+0x324>)
 80047d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80047d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80047d6:	4b63      	ldr	r3, [pc, #396]	@ (8004964 <HAL_GPIO_Init+0x324>)
 80047d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80047de:	60fb      	str	r3, [r7, #12]
 80047e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80047e2:	4a61      	ldr	r2, [pc, #388]	@ (8004968 <HAL_GPIO_Init+0x328>)
 80047e4:	69fb      	ldr	r3, [r7, #28]
 80047e6:	089b      	lsrs	r3, r3, #2
 80047e8:	3302      	adds	r3, #2
 80047ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80047f0:	69fb      	ldr	r3, [r7, #28]
 80047f2:	f003 0303 	and.w	r3, r3, #3
 80047f6:	009b      	lsls	r3, r3, #2
 80047f8:	220f      	movs	r2, #15
 80047fa:	fa02 f303 	lsl.w	r3, r2, r3
 80047fe:	43db      	mvns	r3, r3
 8004800:	69ba      	ldr	r2, [r7, #24]
 8004802:	4013      	ands	r3, r2
 8004804:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	4a58      	ldr	r2, [pc, #352]	@ (800496c <HAL_GPIO_Init+0x32c>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d037      	beq.n	800487e <HAL_GPIO_Init+0x23e>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	4a57      	ldr	r2, [pc, #348]	@ (8004970 <HAL_GPIO_Init+0x330>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d031      	beq.n	800487a <HAL_GPIO_Init+0x23a>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	4a56      	ldr	r2, [pc, #344]	@ (8004974 <HAL_GPIO_Init+0x334>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d02b      	beq.n	8004876 <HAL_GPIO_Init+0x236>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	4a55      	ldr	r2, [pc, #340]	@ (8004978 <HAL_GPIO_Init+0x338>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d025      	beq.n	8004872 <HAL_GPIO_Init+0x232>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	4a54      	ldr	r2, [pc, #336]	@ (800497c <HAL_GPIO_Init+0x33c>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d01f      	beq.n	800486e <HAL_GPIO_Init+0x22e>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	4a53      	ldr	r2, [pc, #332]	@ (8004980 <HAL_GPIO_Init+0x340>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d019      	beq.n	800486a <HAL_GPIO_Init+0x22a>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	4a52      	ldr	r2, [pc, #328]	@ (8004984 <HAL_GPIO_Init+0x344>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d013      	beq.n	8004866 <HAL_GPIO_Init+0x226>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	4a51      	ldr	r2, [pc, #324]	@ (8004988 <HAL_GPIO_Init+0x348>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d00d      	beq.n	8004862 <HAL_GPIO_Init+0x222>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	4a50      	ldr	r2, [pc, #320]	@ (800498c <HAL_GPIO_Init+0x34c>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d007      	beq.n	800485e <HAL_GPIO_Init+0x21e>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	4a4f      	ldr	r2, [pc, #316]	@ (8004990 <HAL_GPIO_Init+0x350>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d101      	bne.n	800485a <HAL_GPIO_Init+0x21a>
 8004856:	2309      	movs	r3, #9
 8004858:	e012      	b.n	8004880 <HAL_GPIO_Init+0x240>
 800485a:	230a      	movs	r3, #10
 800485c:	e010      	b.n	8004880 <HAL_GPIO_Init+0x240>
 800485e:	2308      	movs	r3, #8
 8004860:	e00e      	b.n	8004880 <HAL_GPIO_Init+0x240>
 8004862:	2307      	movs	r3, #7
 8004864:	e00c      	b.n	8004880 <HAL_GPIO_Init+0x240>
 8004866:	2306      	movs	r3, #6
 8004868:	e00a      	b.n	8004880 <HAL_GPIO_Init+0x240>
 800486a:	2305      	movs	r3, #5
 800486c:	e008      	b.n	8004880 <HAL_GPIO_Init+0x240>
 800486e:	2304      	movs	r3, #4
 8004870:	e006      	b.n	8004880 <HAL_GPIO_Init+0x240>
 8004872:	2303      	movs	r3, #3
 8004874:	e004      	b.n	8004880 <HAL_GPIO_Init+0x240>
 8004876:	2302      	movs	r3, #2
 8004878:	e002      	b.n	8004880 <HAL_GPIO_Init+0x240>
 800487a:	2301      	movs	r3, #1
 800487c:	e000      	b.n	8004880 <HAL_GPIO_Init+0x240>
 800487e:	2300      	movs	r3, #0
 8004880:	69fa      	ldr	r2, [r7, #28]
 8004882:	f002 0203 	and.w	r2, r2, #3
 8004886:	0092      	lsls	r2, r2, #2
 8004888:	4093      	lsls	r3, r2
 800488a:	69ba      	ldr	r2, [r7, #24]
 800488c:	4313      	orrs	r3, r2
 800488e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004890:	4935      	ldr	r1, [pc, #212]	@ (8004968 <HAL_GPIO_Init+0x328>)
 8004892:	69fb      	ldr	r3, [r7, #28]
 8004894:	089b      	lsrs	r3, r3, #2
 8004896:	3302      	adds	r3, #2
 8004898:	69ba      	ldr	r2, [r7, #24]
 800489a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800489e:	4b3d      	ldr	r3, [pc, #244]	@ (8004994 <HAL_GPIO_Init+0x354>)
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	43db      	mvns	r3, r3
 80048a8:	69ba      	ldr	r2, [r7, #24]
 80048aa:	4013      	ands	r3, r2
 80048ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d003      	beq.n	80048c2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80048ba:	69ba      	ldr	r2, [r7, #24]
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	4313      	orrs	r3, r2
 80048c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80048c2:	4a34      	ldr	r2, [pc, #208]	@ (8004994 <HAL_GPIO_Init+0x354>)
 80048c4:	69bb      	ldr	r3, [r7, #24]
 80048c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80048c8:	4b32      	ldr	r3, [pc, #200]	@ (8004994 <HAL_GPIO_Init+0x354>)
 80048ca:	68db      	ldr	r3, [r3, #12]
 80048cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	43db      	mvns	r3, r3
 80048d2:	69ba      	ldr	r2, [r7, #24]
 80048d4:	4013      	ands	r3, r2
 80048d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d003      	beq.n	80048ec <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80048e4:	69ba      	ldr	r2, [r7, #24]
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	4313      	orrs	r3, r2
 80048ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80048ec:	4a29      	ldr	r2, [pc, #164]	@ (8004994 <HAL_GPIO_Init+0x354>)
 80048ee:	69bb      	ldr	r3, [r7, #24]
 80048f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80048f2:	4b28      	ldr	r3, [pc, #160]	@ (8004994 <HAL_GPIO_Init+0x354>)
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	43db      	mvns	r3, r3
 80048fc:	69ba      	ldr	r2, [r7, #24]
 80048fe:	4013      	ands	r3, r2
 8004900:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800490a:	2b00      	cmp	r3, #0
 800490c:	d003      	beq.n	8004916 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800490e:	69ba      	ldr	r2, [r7, #24]
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	4313      	orrs	r3, r2
 8004914:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004916:	4a1f      	ldr	r2, [pc, #124]	@ (8004994 <HAL_GPIO_Init+0x354>)
 8004918:	69bb      	ldr	r3, [r7, #24]
 800491a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800491c:	4b1d      	ldr	r3, [pc, #116]	@ (8004994 <HAL_GPIO_Init+0x354>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	43db      	mvns	r3, r3
 8004926:	69ba      	ldr	r2, [r7, #24]
 8004928:	4013      	ands	r3, r2
 800492a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004934:	2b00      	cmp	r3, #0
 8004936:	d003      	beq.n	8004940 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004938:	69ba      	ldr	r2, [r7, #24]
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	4313      	orrs	r3, r2
 800493e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004940:	4a14      	ldr	r2, [pc, #80]	@ (8004994 <HAL_GPIO_Init+0x354>)
 8004942:	69bb      	ldr	r3, [r7, #24]
 8004944:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004946:	69fb      	ldr	r3, [r7, #28]
 8004948:	3301      	adds	r3, #1
 800494a:	61fb      	str	r3, [r7, #28]
 800494c:	69fb      	ldr	r3, [r7, #28]
 800494e:	2b0f      	cmp	r3, #15
 8004950:	f67f ae84 	bls.w	800465c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004954:	bf00      	nop
 8004956:	bf00      	nop
 8004958:	3724      	adds	r7, #36	@ 0x24
 800495a:	46bd      	mov	sp, r7
 800495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004960:	4770      	bx	lr
 8004962:	bf00      	nop
 8004964:	40023800 	.word	0x40023800
 8004968:	40013800 	.word	0x40013800
 800496c:	40020000 	.word	0x40020000
 8004970:	40020400 	.word	0x40020400
 8004974:	40020800 	.word	0x40020800
 8004978:	40020c00 	.word	0x40020c00
 800497c:	40021000 	.word	0x40021000
 8004980:	40021400 	.word	0x40021400
 8004984:	40021800 	.word	0x40021800
 8004988:	40021c00 	.word	0x40021c00
 800498c:	40022000 	.word	0x40022000
 8004990:	40022400 	.word	0x40022400
 8004994:	40013c00 	.word	0x40013c00

08004998 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004998:	b480      	push	{r7}
 800499a:	b083      	sub	sp, #12
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
 80049a0:	460b      	mov	r3, r1
 80049a2:	807b      	strh	r3, [r7, #2]
 80049a4:	4613      	mov	r3, r2
 80049a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80049a8:	787b      	ldrb	r3, [r7, #1]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d003      	beq.n	80049b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80049ae:	887a      	ldrh	r2, [r7, #2]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80049b4:	e003      	b.n	80049be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80049b6:	887b      	ldrh	r3, [r7, #2]
 80049b8:	041a      	lsls	r2, r3, #16
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	619a      	str	r2, [r3, #24]
}
 80049be:	bf00      	nop
 80049c0:	370c      	adds	r7, #12
 80049c2:	46bd      	mov	sp, r7
 80049c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c8:	4770      	bx	lr

080049ca <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80049ca:	b580      	push	{r7, lr}
 80049cc:	b084      	sub	sp, #16
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d101      	bne.n	80049dc <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	e036      	b.n	8004a4a <HAL_IWDG_Init+0x80>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 80049e4:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f245 5255 	movw	r2, #21845	@ 0x5555
 80049ee:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	687a      	ldr	r2, [r7, #4]
 80049f6:	6852      	ldr	r2, [r2, #4]
 80049f8:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	687a      	ldr	r2, [r7, #4]
 8004a00:	6892      	ldr	r2, [r2, #8]
 8004a02:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8004a04:	f7ff f92c 	bl	8003c60 <HAL_GetTick>
 8004a08:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8004a0a:	e011      	b.n	8004a30 <HAL_IWDG_Init+0x66>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8004a0c:	f7ff f928 	bl	8003c60 <HAL_GetTick>
 8004a10:	4602      	mov	r2, r0
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	1ad3      	subs	r3, r2, r3
 8004a16:	f641 0201 	movw	r2, #6145	@ 0x1801
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d908      	bls.n	8004a30 <HAL_IWDG_Init+0x66>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	68db      	ldr	r3, [r3, #12]
 8004a24:	f003 0303 	and.w	r3, r3, #3
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d001      	beq.n	8004a30 <HAL_IWDG_Init+0x66>
      {
        return HAL_TIMEOUT;
 8004a2c:	2303      	movs	r3, #3
 8004a2e:	e00c      	b.n	8004a4a <HAL_IWDG_Init+0x80>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	68db      	ldr	r3, [r3, #12]
 8004a36:	f003 0303 	and.w	r3, r3, #3
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d1e6      	bne.n	8004a0c <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8004a46:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004a48:	2300      	movs	r3, #0
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3710      	adds	r7, #16
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}

08004a52 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8004a52:	b480      	push	{r7}
 8004a54:	b083      	sub	sp, #12
 8004a56:	af00      	add	r7, sp, #0
 8004a58:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8004a62:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004a64:	2300      	movs	r3, #0
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	370c      	adds	r7, #12
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a70:	4770      	bx	lr
	...

08004a74 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b082      	sub	sp, #8
 8004a78:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004a7e:	2300      	movs	r3, #0
 8004a80:	603b      	str	r3, [r7, #0]
 8004a82:	4b20      	ldr	r3, [pc, #128]	@ (8004b04 <HAL_PWREx_EnableOverDrive+0x90>)
 8004a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a86:	4a1f      	ldr	r2, [pc, #124]	@ (8004b04 <HAL_PWREx_EnableOverDrive+0x90>)
 8004a88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8004a8e:	4b1d      	ldr	r3, [pc, #116]	@ (8004b04 <HAL_PWREx_EnableOverDrive+0x90>)
 8004a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a96:	603b      	str	r3, [r7, #0]
 8004a98:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004a9a:	4b1b      	ldr	r3, [pc, #108]	@ (8004b08 <HAL_PWREx_EnableOverDrive+0x94>)
 8004a9c:	2201      	movs	r2, #1
 8004a9e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004aa0:	f7ff f8de 	bl	8003c60 <HAL_GetTick>
 8004aa4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004aa6:	e009      	b.n	8004abc <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004aa8:	f7ff f8da 	bl	8003c60 <HAL_GetTick>
 8004aac:	4602      	mov	r2, r0
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	1ad3      	subs	r3, r2, r3
 8004ab2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004ab6:	d901      	bls.n	8004abc <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8004ab8:	2303      	movs	r3, #3
 8004aba:	e01f      	b.n	8004afc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004abc:	4b13      	ldr	r3, [pc, #76]	@ (8004b0c <HAL_PWREx_EnableOverDrive+0x98>)
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ac4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ac8:	d1ee      	bne.n	8004aa8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004aca:	4b11      	ldr	r3, [pc, #68]	@ (8004b10 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004acc:	2201      	movs	r2, #1
 8004ace:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004ad0:	f7ff f8c6 	bl	8003c60 <HAL_GetTick>
 8004ad4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004ad6:	e009      	b.n	8004aec <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004ad8:	f7ff f8c2 	bl	8003c60 <HAL_GetTick>
 8004adc:	4602      	mov	r2, r0
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	1ad3      	subs	r3, r2, r3
 8004ae2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004ae6:	d901      	bls.n	8004aec <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004ae8:	2303      	movs	r3, #3
 8004aea:	e007      	b.n	8004afc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004aec:	4b07      	ldr	r3, [pc, #28]	@ (8004b0c <HAL_PWREx_EnableOverDrive+0x98>)
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004af4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004af8:	d1ee      	bne.n	8004ad8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8004afa:	2300      	movs	r3, #0
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	3708      	adds	r7, #8
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}
 8004b04:	40023800 	.word	0x40023800
 8004b08:	420e0040 	.word	0x420e0040
 8004b0c:	40007000 	.word	0x40007000
 8004b10:	420e0044 	.word	0x420e0044

08004b14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b084      	sub	sp, #16
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
 8004b1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d101      	bne.n	8004b28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	e0cc      	b.n	8004cc2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004b28:	4b68      	ldr	r3, [pc, #416]	@ (8004ccc <HAL_RCC_ClockConfig+0x1b8>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 030f 	and.w	r3, r3, #15
 8004b30:	683a      	ldr	r2, [r7, #0]
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d90c      	bls.n	8004b50 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b36:	4b65      	ldr	r3, [pc, #404]	@ (8004ccc <HAL_RCC_ClockConfig+0x1b8>)
 8004b38:	683a      	ldr	r2, [r7, #0]
 8004b3a:	b2d2      	uxtb	r2, r2
 8004b3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b3e:	4b63      	ldr	r3, [pc, #396]	@ (8004ccc <HAL_RCC_ClockConfig+0x1b8>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f003 030f 	and.w	r3, r3, #15
 8004b46:	683a      	ldr	r2, [r7, #0]
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d001      	beq.n	8004b50 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	e0b8      	b.n	8004cc2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f003 0302 	and.w	r3, r3, #2
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d020      	beq.n	8004b9e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f003 0304 	and.w	r3, r3, #4
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d005      	beq.n	8004b74 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b68:	4b59      	ldr	r3, [pc, #356]	@ (8004cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	4a58      	ldr	r2, [pc, #352]	@ (8004cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b6e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004b72:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f003 0308 	and.w	r3, r3, #8
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d005      	beq.n	8004b8c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b80:	4b53      	ldr	r3, [pc, #332]	@ (8004cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	4a52      	ldr	r2, [pc, #328]	@ (8004cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b86:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004b8a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b8c:	4b50      	ldr	r3, [pc, #320]	@ (8004cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	494d      	ldr	r1, [pc, #308]	@ (8004cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f003 0301 	and.w	r3, r3, #1
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d044      	beq.n	8004c34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	2b01      	cmp	r3, #1
 8004bb0:	d107      	bne.n	8004bc2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bb2:	4b47      	ldr	r3, [pc, #284]	@ (8004cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d119      	bne.n	8004bf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e07f      	b.n	8004cc2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	2b02      	cmp	r3, #2
 8004bc8:	d003      	beq.n	8004bd2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004bce:	2b03      	cmp	r3, #3
 8004bd0:	d107      	bne.n	8004be2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bd2:	4b3f      	ldr	r3, [pc, #252]	@ (8004cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d109      	bne.n	8004bf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	e06f      	b.n	8004cc2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004be2:	4b3b      	ldr	r3, [pc, #236]	@ (8004cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f003 0302 	and.w	r3, r3, #2
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d101      	bne.n	8004bf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	e067      	b.n	8004cc2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004bf2:	4b37      	ldr	r3, [pc, #220]	@ (8004cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	f023 0203 	bic.w	r2, r3, #3
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	4934      	ldr	r1, [pc, #208]	@ (8004cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c00:	4313      	orrs	r3, r2
 8004c02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c04:	f7ff f82c 	bl	8003c60 <HAL_GetTick>
 8004c08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c0a:	e00a      	b.n	8004c22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c0c:	f7ff f828 	bl	8003c60 <HAL_GetTick>
 8004c10:	4602      	mov	r2, r0
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	1ad3      	subs	r3, r2, r3
 8004c16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d901      	bls.n	8004c22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c1e:	2303      	movs	r3, #3
 8004c20:	e04f      	b.n	8004cc2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c22:	4b2b      	ldr	r3, [pc, #172]	@ (8004cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	f003 020c 	and.w	r2, r3, #12
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	009b      	lsls	r3, r3, #2
 8004c30:	429a      	cmp	r2, r3
 8004c32:	d1eb      	bne.n	8004c0c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004c34:	4b25      	ldr	r3, [pc, #148]	@ (8004ccc <HAL_RCC_ClockConfig+0x1b8>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f003 030f 	and.w	r3, r3, #15
 8004c3c:	683a      	ldr	r2, [r7, #0]
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	d20c      	bcs.n	8004c5c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c42:	4b22      	ldr	r3, [pc, #136]	@ (8004ccc <HAL_RCC_ClockConfig+0x1b8>)
 8004c44:	683a      	ldr	r2, [r7, #0]
 8004c46:	b2d2      	uxtb	r2, r2
 8004c48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c4a:	4b20      	ldr	r3, [pc, #128]	@ (8004ccc <HAL_RCC_ClockConfig+0x1b8>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f003 030f 	and.w	r3, r3, #15
 8004c52:	683a      	ldr	r2, [r7, #0]
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d001      	beq.n	8004c5c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	e032      	b.n	8004cc2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f003 0304 	and.w	r3, r3, #4
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d008      	beq.n	8004c7a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c68:	4b19      	ldr	r3, [pc, #100]	@ (8004cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c6a:	689b      	ldr	r3, [r3, #8]
 8004c6c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	68db      	ldr	r3, [r3, #12]
 8004c74:	4916      	ldr	r1, [pc, #88]	@ (8004cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c76:	4313      	orrs	r3, r2
 8004c78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f003 0308 	and.w	r3, r3, #8
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d009      	beq.n	8004c9a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c86:	4b12      	ldr	r3, [pc, #72]	@ (8004cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	691b      	ldr	r3, [r3, #16]
 8004c92:	00db      	lsls	r3, r3, #3
 8004c94:	490e      	ldr	r1, [pc, #56]	@ (8004cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c96:	4313      	orrs	r3, r2
 8004c98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004c9a:	f000 f821 	bl	8004ce0 <HAL_RCC_GetSysClockFreq>
 8004c9e:	4602      	mov	r2, r0
 8004ca0:	4b0b      	ldr	r3, [pc, #44]	@ (8004cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	091b      	lsrs	r3, r3, #4
 8004ca6:	f003 030f 	and.w	r3, r3, #15
 8004caa:	490a      	ldr	r1, [pc, #40]	@ (8004cd4 <HAL_RCC_ClockConfig+0x1c0>)
 8004cac:	5ccb      	ldrb	r3, [r1, r3]
 8004cae:	fa22 f303 	lsr.w	r3, r2, r3
 8004cb2:	4a09      	ldr	r2, [pc, #36]	@ (8004cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8004cb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004cb6:	4b09      	ldr	r3, [pc, #36]	@ (8004cdc <HAL_RCC_ClockConfig+0x1c8>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f7fd fc60 	bl	8002580 <HAL_InitTick>

  return HAL_OK;
 8004cc0:	2300      	movs	r3, #0
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3710      	adds	r7, #16
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}
 8004cca:	bf00      	nop
 8004ccc:	40023c00 	.word	0x40023c00
 8004cd0:	40023800 	.word	0x40023800
 8004cd4:	0801e72c 	.word	0x0801e72c
 8004cd8:	20000004 	.word	0x20000004
 8004cdc:	200000d0 	.word	0x200000d0

08004ce0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ce0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ce4:	b092      	sub	sp, #72	@ 0x48
 8004ce6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllvco = 0U;
 8004cec:	2300      	movs	r3, #0
 8004cee:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllp = 0U;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t sysclockfreq = 0U;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	643b      	str	r3, [r7, #64]	@ 0x40

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004cf8:	4b6f      	ldr	r3, [pc, #444]	@ (8004eb8 <HAL_RCC_GetSysClockFreq+0x1d8>)
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	f003 030c 	and.w	r3, r3, #12
 8004d00:	2b08      	cmp	r3, #8
 8004d02:	d00e      	beq.n	8004d22 <HAL_RCC_GetSysClockFreq+0x42>
 8004d04:	2b08      	cmp	r3, #8
 8004d06:	f200 80cd 	bhi.w	8004ea4 <HAL_RCC_GetSysClockFreq+0x1c4>
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d002      	beq.n	8004d14 <HAL_RCC_GetSysClockFreq+0x34>
 8004d0e:	2b04      	cmp	r3, #4
 8004d10:	d003      	beq.n	8004d1a <HAL_RCC_GetSysClockFreq+0x3a>
 8004d12:	e0c7      	b.n	8004ea4 <HAL_RCC_GetSysClockFreq+0x1c4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d14:	4b69      	ldr	r3, [pc, #420]	@ (8004ebc <HAL_RCC_GetSysClockFreq+0x1dc>)
 8004d16:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8004d18:	e0c7      	b.n	8004eaa <HAL_RCC_GetSysClockFreq+0x1ca>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004d1a:	f44f 0361 	mov.w	r3, #14745600	@ 0xe10000
 8004d1e:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8004d20:	e0c3      	b.n	8004eaa <HAL_RCC_GetSysClockFreq+0x1ca>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d22:	4b65      	ldr	r3, [pc, #404]	@ (8004eb8 <HAL_RCC_GetSysClockFreq+0x1d8>)
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004d2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d2c:	4b62      	ldr	r3, [pc, #392]	@ (8004eb8 <HAL_RCC_GetSysClockFreq+0x1d8>)
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d04a      	beq.n	8004dce <HAL_RCC_GetSysClockFreq+0xee>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d38:	4b5f      	ldr	r3, [pc, #380]	@ (8004eb8 <HAL_RCC_GetSysClockFreq+0x1d8>)
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	099b      	lsrs	r3, r3, #6
 8004d3e:	2200      	movs	r2, #0
 8004d40:	4618      	mov	r0, r3
 8004d42:	4611      	mov	r1, r2
 8004d44:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004d48:	633b      	str	r3, [r7, #48]	@ 0x30
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d4e:	e9d7 890c 	ldrd	r8, r9, [r7, #48]	@ 0x30
 8004d52:	4642      	mov	r2, r8
 8004d54:	464b      	mov	r3, r9
 8004d56:	f04f 0000 	mov.w	r0, #0
 8004d5a:	f04f 0100 	mov.w	r1, #0
 8004d5e:	00d9      	lsls	r1, r3, #3
 8004d60:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004d64:	00d0      	lsls	r0, r2, #3
 8004d66:	4602      	mov	r2, r0
 8004d68:	460b      	mov	r3, r1
 8004d6a:	4641      	mov	r1, r8
 8004d6c:	1a54      	subs	r4, r2, r1
 8004d6e:	4649      	mov	r1, r9
 8004d70:	eb63 0501 	sbc.w	r5, r3, r1
 8004d74:	f04f 0200 	mov.w	r2, #0
 8004d78:	f04f 0300 	mov.w	r3, #0
 8004d7c:	016b      	lsls	r3, r5, #5
 8004d7e:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8004d82:	0162      	lsls	r2, r4, #5
 8004d84:	4614      	mov	r4, r2
 8004d86:	461d      	mov	r5, r3
 8004d88:	4643      	mov	r3, r8
 8004d8a:	18e3      	adds	r3, r4, r3
 8004d8c:	60bb      	str	r3, [r7, #8]
 8004d8e:	464b      	mov	r3, r9
 8004d90:	eb45 0303 	adc.w	r3, r5, r3
 8004d94:	60fb      	str	r3, [r7, #12]
 8004d96:	f04f 0200 	mov.w	r2, #0
 8004d9a:	f04f 0300 	mov.w	r3, #0
 8004d9e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004da2:	4629      	mov	r1, r5
 8004da4:	040b      	lsls	r3, r1, #16
 8004da6:	4621      	mov	r1, r4
 8004da8:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 8004dac:	4621      	mov	r1, r4
 8004dae:	040a      	lsls	r2, r1, #16
 8004db0:	4610      	mov	r0, r2
 8004db2:	4619      	mov	r1, r3
 8004db4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004db6:	2200      	movs	r2, #0
 8004db8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004dba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004dbc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004dc0:	f7fb ff7c 	bl	8000cbc <__aeabi_uldivmod>
 8004dc4:	4602      	mov	r2, r0
 8004dc6:	460b      	mov	r3, r1
 8004dc8:	4613      	mov	r3, r2
 8004dca:	647b      	str	r3, [r7, #68]	@ 0x44
 8004dcc:	e05c      	b.n	8004e88 <HAL_RCC_GetSysClockFreq+0x1a8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004dce:	4b3a      	ldr	r3, [pc, #232]	@ (8004eb8 <HAL_RCC_GetSysClockFreq+0x1d8>)
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	099b      	lsrs	r3, r3, #6
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	623b      	str	r3, [r7, #32]
 8004dd8:	627a      	str	r2, [r7, #36]	@ 0x24
 8004dda:	6a3b      	ldr	r3, [r7, #32]
 8004ddc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004de0:	61bb      	str	r3, [r7, #24]
 8004de2:	2300      	movs	r3, #0
 8004de4:	61fb      	str	r3, [r7, #28]
 8004de6:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8004dea:	4622      	mov	r2, r4
 8004dec:	462b      	mov	r3, r5
 8004dee:	f04f 0000 	mov.w	r0, #0
 8004df2:	f04f 0100 	mov.w	r1, #0
 8004df6:	0159      	lsls	r1, r3, #5
 8004df8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004dfc:	0150      	lsls	r0, r2, #5
 8004dfe:	4602      	mov	r2, r0
 8004e00:	460b      	mov	r3, r1
 8004e02:	4621      	mov	r1, r4
 8004e04:	ebb2 0a01 	subs.w	sl, r2, r1
 8004e08:	4629      	mov	r1, r5
 8004e0a:	eb63 0b01 	sbc.w	fp, r3, r1
 8004e0e:	f04f 0200 	mov.w	r2, #0
 8004e12:	f04f 0300 	mov.w	r3, #0
 8004e16:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004e1a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004e1e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004e22:	ebb2 080a 	subs.w	r8, r2, sl
 8004e26:	eb63 090b 	sbc.w	r9, r3, fp
 8004e2a:	f04f 0200 	mov.w	r2, #0
 8004e2e:	f04f 0300 	mov.w	r3, #0
 8004e32:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e36:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e3a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e3e:	4690      	mov	r8, r2
 8004e40:	4699      	mov	r9, r3
 8004e42:	4623      	mov	r3, r4
 8004e44:	eb18 0303 	adds.w	r3, r8, r3
 8004e48:	603b      	str	r3, [r7, #0]
 8004e4a:	462b      	mov	r3, r5
 8004e4c:	eb49 0303 	adc.w	r3, r9, r3
 8004e50:	607b      	str	r3, [r7, #4]
 8004e52:	f04f 0200 	mov.w	r2, #0
 8004e56:	f04f 0300 	mov.w	r3, #0
 8004e5a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004e5e:	4629      	mov	r1, r5
 8004e60:	028b      	lsls	r3, r1, #10
 8004e62:	4621      	mov	r1, r4
 8004e64:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004e68:	4621      	mov	r1, r4
 8004e6a:	028a      	lsls	r2, r1, #10
 8004e6c:	4610      	mov	r0, r2
 8004e6e:	4619      	mov	r1, r3
 8004e70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e72:	2200      	movs	r2, #0
 8004e74:	613b      	str	r3, [r7, #16]
 8004e76:	617a      	str	r2, [r7, #20]
 8004e78:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004e7c:	f7fb ff1e 	bl	8000cbc <__aeabi_uldivmod>
 8004e80:	4602      	mov	r2, r0
 8004e82:	460b      	mov	r3, r1
 8004e84:	4613      	mov	r3, r2
 8004e86:	647b      	str	r3, [r7, #68]	@ 0x44
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004e88:	4b0b      	ldr	r3, [pc, #44]	@ (8004eb8 <HAL_RCC_GetSysClockFreq+0x1d8>)
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	0c1b      	lsrs	r3, r3, #16
 8004e8e:	f003 0303 	and.w	r3, r3, #3
 8004e92:	3301      	adds	r3, #1
 8004e94:	005b      	lsls	r3, r3, #1
 8004e96:	63bb      	str	r3, [r7, #56]	@ 0x38

      sysclockfreq = pllvco / pllp;
 8004e98:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004e9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ea0:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8004ea2:	e002      	b.n	8004eaa <HAL_RCC_GetSysClockFreq+0x1ca>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004ea4:	4b05      	ldr	r3, [pc, #20]	@ (8004ebc <HAL_RCC_GetSysClockFreq+0x1dc>)
 8004ea6:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8004ea8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004eaa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	3748      	adds	r7, #72	@ 0x48
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004eb6:	bf00      	nop
 8004eb8:	40023800 	.word	0x40023800
 8004ebc:	00f42400 	.word	0x00f42400

08004ec0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ec4:	4b03      	ldr	r3, [pc, #12]	@ (8004ed4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed0:	4770      	bx	lr
 8004ed2:	bf00      	nop
 8004ed4:	20000004 	.word	0x20000004

08004ed8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004edc:	f7ff fff0 	bl	8004ec0 <HAL_RCC_GetHCLKFreq>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	4b05      	ldr	r3, [pc, #20]	@ (8004ef8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	0a9b      	lsrs	r3, r3, #10
 8004ee8:	f003 0307 	and.w	r3, r3, #7
 8004eec:	4903      	ldr	r1, [pc, #12]	@ (8004efc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004eee:	5ccb      	ldrb	r3, [r1, r3]
 8004ef0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	bd80      	pop	{r7, pc}
 8004ef8:	40023800 	.word	0x40023800
 8004efc:	0801e73c 	.word	0x0801e73c

08004f00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004f04:	f7ff ffdc 	bl	8004ec0 <HAL_RCC_GetHCLKFreq>
 8004f08:	4602      	mov	r2, r0
 8004f0a:	4b05      	ldr	r3, [pc, #20]	@ (8004f20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	0b5b      	lsrs	r3, r3, #13
 8004f10:	f003 0307 	and.w	r3, r3, #7
 8004f14:	4903      	ldr	r1, [pc, #12]	@ (8004f24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f16:	5ccb      	ldrb	r3, [r1, r3]
 8004f18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	bd80      	pop	{r7, pc}
 8004f20:	40023800 	.word	0x40023800
 8004f24:	0801e73c 	.word	0x0801e73c

08004f28 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b083      	sub	sp, #12
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
 8004f30:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	220f      	movs	r2, #15
 8004f36:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004f38:	4b12      	ldr	r3, [pc, #72]	@ (8004f84 <HAL_RCC_GetClockConfig+0x5c>)
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	f003 0203 	and.w	r2, r3, #3
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004f44:	4b0f      	ldr	r3, [pc, #60]	@ (8004f84 <HAL_RCC_GetClockConfig+0x5c>)
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004f50:	4b0c      	ldr	r3, [pc, #48]	@ (8004f84 <HAL_RCC_GetClockConfig+0x5c>)
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004f5c:	4b09      	ldr	r3, [pc, #36]	@ (8004f84 <HAL_RCC_GetClockConfig+0x5c>)
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	08db      	lsrs	r3, r3, #3
 8004f62:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004f6a:	4b07      	ldr	r3, [pc, #28]	@ (8004f88 <HAL_RCC_GetClockConfig+0x60>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f003 020f 	and.w	r2, r3, #15
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	601a      	str	r2, [r3, #0]
}
 8004f76:	bf00      	nop
 8004f78:	370c      	adds	r7, #12
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f80:	4770      	bx	lr
 8004f82:	bf00      	nop
 8004f84:	40023800 	.word	0x40023800
 8004f88:	40023c00 	.word	0x40023c00

08004f8c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b086      	sub	sp, #24
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d101      	bne.n	8004f9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e273      	b.n	8005486 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f003 0301 	and.w	r3, r3, #1
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d075      	beq.n	8005096 <HAL_RCC_OscConfig+0x10a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004faa:	4b88      	ldr	r3, [pc, #544]	@ (80051cc <HAL_RCC_OscConfig+0x240>)
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	f003 030c 	and.w	r3, r3, #12
 8004fb2:	2b04      	cmp	r3, #4
 8004fb4:	d00c      	beq.n	8004fd0 <HAL_RCC_OscConfig+0x44>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004fb6:	4b85      	ldr	r3, [pc, #532]	@ (80051cc <HAL_RCC_OscConfig+0x240>)
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	f003 030c 	and.w	r3, r3, #12
        || \
 8004fbe:	2b08      	cmp	r3, #8
 8004fc0:	d112      	bne.n	8004fe8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004fc2:	4b82      	ldr	r3, [pc, #520]	@ (80051cc <HAL_RCC_OscConfig+0x240>)
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004fca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004fce:	d10b      	bne.n	8004fe8 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fd0:	4b7e      	ldr	r3, [pc, #504]	@ (80051cc <HAL_RCC_OscConfig+0x240>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d05b      	beq.n	8005094 <HAL_RCC_OscConfig+0x108>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d157      	bne.n	8005094 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	e24e      	b.n	8005486 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ff0:	d106      	bne.n	8005000 <HAL_RCC_OscConfig+0x74>
 8004ff2:	4b76      	ldr	r3, [pc, #472]	@ (80051cc <HAL_RCC_OscConfig+0x240>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a75      	ldr	r2, [pc, #468]	@ (80051cc <HAL_RCC_OscConfig+0x240>)
 8004ff8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ffc:	6013      	str	r3, [r2, #0]
 8004ffe:	e01d      	b.n	800503c <HAL_RCC_OscConfig+0xb0>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005008:	d10c      	bne.n	8005024 <HAL_RCC_OscConfig+0x98>
 800500a:	4b70      	ldr	r3, [pc, #448]	@ (80051cc <HAL_RCC_OscConfig+0x240>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a6f      	ldr	r2, [pc, #444]	@ (80051cc <HAL_RCC_OscConfig+0x240>)
 8005010:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005014:	6013      	str	r3, [r2, #0]
 8005016:	4b6d      	ldr	r3, [pc, #436]	@ (80051cc <HAL_RCC_OscConfig+0x240>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a6c      	ldr	r2, [pc, #432]	@ (80051cc <HAL_RCC_OscConfig+0x240>)
 800501c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005020:	6013      	str	r3, [r2, #0]
 8005022:	e00b      	b.n	800503c <HAL_RCC_OscConfig+0xb0>
 8005024:	4b69      	ldr	r3, [pc, #420]	@ (80051cc <HAL_RCC_OscConfig+0x240>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a68      	ldr	r2, [pc, #416]	@ (80051cc <HAL_RCC_OscConfig+0x240>)
 800502a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800502e:	6013      	str	r3, [r2, #0]
 8005030:	4b66      	ldr	r3, [pc, #408]	@ (80051cc <HAL_RCC_OscConfig+0x240>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a65      	ldr	r2, [pc, #404]	@ (80051cc <HAL_RCC_OscConfig+0x240>)
 8005036:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800503a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d013      	beq.n	800506c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005044:	f7fe fe0c 	bl	8003c60 <HAL_GetTick>
 8005048:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800504a:	e008      	b.n	800505e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800504c:	f7fe fe08 	bl	8003c60 <HAL_GetTick>
 8005050:	4602      	mov	r2, r0
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	1ad3      	subs	r3, r2, r3
 8005056:	2b64      	cmp	r3, #100	@ 0x64
 8005058:	d901      	bls.n	800505e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800505a:	2303      	movs	r3, #3
 800505c:	e213      	b.n	8005486 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800505e:	4b5b      	ldr	r3, [pc, #364]	@ (80051cc <HAL_RCC_OscConfig+0x240>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005066:	2b00      	cmp	r3, #0
 8005068:	d0f0      	beq.n	800504c <HAL_RCC_OscConfig+0xc0>
 800506a:	e014      	b.n	8005096 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800506c:	f7fe fdf8 	bl	8003c60 <HAL_GetTick>
 8005070:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005072:	e008      	b.n	8005086 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005074:	f7fe fdf4 	bl	8003c60 <HAL_GetTick>
 8005078:	4602      	mov	r2, r0
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	1ad3      	subs	r3, r2, r3
 800507e:	2b64      	cmp	r3, #100	@ 0x64
 8005080:	d901      	bls.n	8005086 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005082:	2303      	movs	r3, #3
 8005084:	e1ff      	b.n	8005486 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005086:	4b51      	ldr	r3, [pc, #324]	@ (80051cc <HAL_RCC_OscConfig+0x240>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800508e:	2b00      	cmp	r3, #0
 8005090:	d1f0      	bne.n	8005074 <HAL_RCC_OscConfig+0xe8>
 8005092:	e000      	b.n	8005096 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005094:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f003 0302 	and.w	r3, r3, #2
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d063      	beq.n	800516a <HAL_RCC_OscConfig+0x1de>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80050a2:	4b4a      	ldr	r3, [pc, #296]	@ (80051cc <HAL_RCC_OscConfig+0x240>)
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	f003 030c 	and.w	r3, r3, #12
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d00b      	beq.n	80050c6 <HAL_RCC_OscConfig+0x13a>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80050ae:	4b47      	ldr	r3, [pc, #284]	@ (80051cc <HAL_RCC_OscConfig+0x240>)
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	f003 030c 	and.w	r3, r3, #12
        || \
 80050b6:	2b08      	cmp	r3, #8
 80050b8:	d11c      	bne.n	80050f4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80050ba:	4b44      	ldr	r3, [pc, #272]	@ (80051cc <HAL_RCC_OscConfig+0x240>)
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d116      	bne.n	80050f4 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050c6:	4b41      	ldr	r3, [pc, #260]	@ (80051cc <HAL_RCC_OscConfig+0x240>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f003 0302 	and.w	r3, r3, #2
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d005      	beq.n	80050de <HAL_RCC_OscConfig+0x152>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	68db      	ldr	r3, [r3, #12]
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	d001      	beq.n	80050de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	e1d3      	b.n	8005486 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050de:	4b3b      	ldr	r3, [pc, #236]	@ (80051cc <HAL_RCC_OscConfig+0x240>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	691b      	ldr	r3, [r3, #16]
 80050ea:	00db      	lsls	r3, r3, #3
 80050ec:	4937      	ldr	r1, [pc, #220]	@ (80051cc <HAL_RCC_OscConfig+0x240>)
 80050ee:	4313      	orrs	r3, r2
 80050f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050f2:	e03a      	b.n	800516a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	68db      	ldr	r3, [r3, #12]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d020      	beq.n	800513e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80050fc:	4b34      	ldr	r3, [pc, #208]	@ (80051d0 <HAL_RCC_OscConfig+0x244>)
 80050fe:	2201      	movs	r2, #1
 8005100:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005102:	f7fe fdad 	bl	8003c60 <HAL_GetTick>
 8005106:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005108:	e008      	b.n	800511c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800510a:	f7fe fda9 	bl	8003c60 <HAL_GetTick>
 800510e:	4602      	mov	r2, r0
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	1ad3      	subs	r3, r2, r3
 8005114:	2b02      	cmp	r3, #2
 8005116:	d901      	bls.n	800511c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005118:	2303      	movs	r3, #3
 800511a:	e1b4      	b.n	8005486 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800511c:	4b2b      	ldr	r3, [pc, #172]	@ (80051cc <HAL_RCC_OscConfig+0x240>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f003 0302 	and.w	r3, r3, #2
 8005124:	2b00      	cmp	r3, #0
 8005126:	d0f0      	beq.n	800510a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005128:	4b28      	ldr	r3, [pc, #160]	@ (80051cc <HAL_RCC_OscConfig+0x240>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	691b      	ldr	r3, [r3, #16]
 8005134:	00db      	lsls	r3, r3, #3
 8005136:	4925      	ldr	r1, [pc, #148]	@ (80051cc <HAL_RCC_OscConfig+0x240>)
 8005138:	4313      	orrs	r3, r2
 800513a:	600b      	str	r3, [r1, #0]
 800513c:	e015      	b.n	800516a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800513e:	4b24      	ldr	r3, [pc, #144]	@ (80051d0 <HAL_RCC_OscConfig+0x244>)
 8005140:	2200      	movs	r2, #0
 8005142:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005144:	f7fe fd8c 	bl	8003c60 <HAL_GetTick>
 8005148:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800514a:	e008      	b.n	800515e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800514c:	f7fe fd88 	bl	8003c60 <HAL_GetTick>
 8005150:	4602      	mov	r2, r0
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	1ad3      	subs	r3, r2, r3
 8005156:	2b02      	cmp	r3, #2
 8005158:	d901      	bls.n	800515e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800515a:	2303      	movs	r3, #3
 800515c:	e193      	b.n	8005486 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800515e:	4b1b      	ldr	r3, [pc, #108]	@ (80051cc <HAL_RCC_OscConfig+0x240>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f003 0302 	and.w	r3, r3, #2
 8005166:	2b00      	cmp	r3, #0
 8005168:	d1f0      	bne.n	800514c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f003 0308 	and.w	r3, r3, #8
 8005172:	2b00      	cmp	r3, #0
 8005174:	d036      	beq.n	80051e4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	695b      	ldr	r3, [r3, #20]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d016      	beq.n	80051ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800517e:	4b15      	ldr	r3, [pc, #84]	@ (80051d4 <HAL_RCC_OscConfig+0x248>)
 8005180:	2201      	movs	r2, #1
 8005182:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005184:	f7fe fd6c 	bl	8003c60 <HAL_GetTick>
 8005188:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800518a:	e008      	b.n	800519e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800518c:	f7fe fd68 	bl	8003c60 <HAL_GetTick>
 8005190:	4602      	mov	r2, r0
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	1ad3      	subs	r3, r2, r3
 8005196:	2b02      	cmp	r3, #2
 8005198:	d901      	bls.n	800519e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800519a:	2303      	movs	r3, #3
 800519c:	e173      	b.n	8005486 <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800519e:	4b0b      	ldr	r3, [pc, #44]	@ (80051cc <HAL_RCC_OscConfig+0x240>)
 80051a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051a2:	f003 0302 	and.w	r3, r3, #2
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d0f0      	beq.n	800518c <HAL_RCC_OscConfig+0x200>
 80051aa:	e01b      	b.n	80051e4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80051ac:	4b09      	ldr	r3, [pc, #36]	@ (80051d4 <HAL_RCC_OscConfig+0x248>)
 80051ae:	2200      	movs	r2, #0
 80051b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051b2:	f7fe fd55 	bl	8003c60 <HAL_GetTick>
 80051b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051b8:	e00e      	b.n	80051d8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051ba:	f7fe fd51 	bl	8003c60 <HAL_GetTick>
 80051be:	4602      	mov	r2, r0
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	1ad3      	subs	r3, r2, r3
 80051c4:	2b02      	cmp	r3, #2
 80051c6:	d907      	bls.n	80051d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80051c8:	2303      	movs	r3, #3
 80051ca:	e15c      	b.n	8005486 <HAL_RCC_OscConfig+0x4fa>
 80051cc:	40023800 	.word	0x40023800
 80051d0:	42470000 	.word	0x42470000
 80051d4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051d8:	4b8a      	ldr	r3, [pc, #552]	@ (8005404 <HAL_RCC_OscConfig+0x478>)
 80051da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051dc:	f003 0302 	and.w	r3, r3, #2
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d1ea      	bne.n	80051ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f003 0304 	and.w	r3, r3, #4
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	f000 8097 	beq.w	8005320 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051f2:	2300      	movs	r3, #0
 80051f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051f6:	4b83      	ldr	r3, [pc, #524]	@ (8005404 <HAL_RCC_OscConfig+0x478>)
 80051f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d10f      	bne.n	8005222 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005202:	2300      	movs	r3, #0
 8005204:	60bb      	str	r3, [r7, #8]
 8005206:	4b7f      	ldr	r3, [pc, #508]	@ (8005404 <HAL_RCC_OscConfig+0x478>)
 8005208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800520a:	4a7e      	ldr	r2, [pc, #504]	@ (8005404 <HAL_RCC_OscConfig+0x478>)
 800520c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005210:	6413      	str	r3, [r2, #64]	@ 0x40
 8005212:	4b7c      	ldr	r3, [pc, #496]	@ (8005404 <HAL_RCC_OscConfig+0x478>)
 8005214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005216:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800521a:	60bb      	str	r3, [r7, #8]
 800521c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800521e:	2301      	movs	r3, #1
 8005220:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005222:	4b79      	ldr	r3, [pc, #484]	@ (8005408 <HAL_RCC_OscConfig+0x47c>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800522a:	2b00      	cmp	r3, #0
 800522c:	d118      	bne.n	8005260 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800522e:	4b76      	ldr	r3, [pc, #472]	@ (8005408 <HAL_RCC_OscConfig+0x47c>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a75      	ldr	r2, [pc, #468]	@ (8005408 <HAL_RCC_OscConfig+0x47c>)
 8005234:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005238:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800523a:	f7fe fd11 	bl	8003c60 <HAL_GetTick>
 800523e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005240:	e008      	b.n	8005254 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005242:	f7fe fd0d 	bl	8003c60 <HAL_GetTick>
 8005246:	4602      	mov	r2, r0
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	1ad3      	subs	r3, r2, r3
 800524c:	2b02      	cmp	r3, #2
 800524e:	d901      	bls.n	8005254 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005250:	2303      	movs	r3, #3
 8005252:	e118      	b.n	8005486 <HAL_RCC_OscConfig+0x4fa>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005254:	4b6c      	ldr	r3, [pc, #432]	@ (8005408 <HAL_RCC_OscConfig+0x47c>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800525c:	2b00      	cmp	r3, #0
 800525e:	d0f0      	beq.n	8005242 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	689b      	ldr	r3, [r3, #8]
 8005264:	2b01      	cmp	r3, #1
 8005266:	d106      	bne.n	8005276 <HAL_RCC_OscConfig+0x2ea>
 8005268:	4b66      	ldr	r3, [pc, #408]	@ (8005404 <HAL_RCC_OscConfig+0x478>)
 800526a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800526c:	4a65      	ldr	r2, [pc, #404]	@ (8005404 <HAL_RCC_OscConfig+0x478>)
 800526e:	f043 0301 	orr.w	r3, r3, #1
 8005272:	6713      	str	r3, [r2, #112]	@ 0x70
 8005274:	e01c      	b.n	80052b0 <HAL_RCC_OscConfig+0x324>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	2b05      	cmp	r3, #5
 800527c:	d10c      	bne.n	8005298 <HAL_RCC_OscConfig+0x30c>
 800527e:	4b61      	ldr	r3, [pc, #388]	@ (8005404 <HAL_RCC_OscConfig+0x478>)
 8005280:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005282:	4a60      	ldr	r2, [pc, #384]	@ (8005404 <HAL_RCC_OscConfig+0x478>)
 8005284:	f043 0304 	orr.w	r3, r3, #4
 8005288:	6713      	str	r3, [r2, #112]	@ 0x70
 800528a:	4b5e      	ldr	r3, [pc, #376]	@ (8005404 <HAL_RCC_OscConfig+0x478>)
 800528c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800528e:	4a5d      	ldr	r2, [pc, #372]	@ (8005404 <HAL_RCC_OscConfig+0x478>)
 8005290:	f043 0301 	orr.w	r3, r3, #1
 8005294:	6713      	str	r3, [r2, #112]	@ 0x70
 8005296:	e00b      	b.n	80052b0 <HAL_RCC_OscConfig+0x324>
 8005298:	4b5a      	ldr	r3, [pc, #360]	@ (8005404 <HAL_RCC_OscConfig+0x478>)
 800529a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800529c:	4a59      	ldr	r2, [pc, #356]	@ (8005404 <HAL_RCC_OscConfig+0x478>)
 800529e:	f023 0301 	bic.w	r3, r3, #1
 80052a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80052a4:	4b57      	ldr	r3, [pc, #348]	@ (8005404 <HAL_RCC_OscConfig+0x478>)
 80052a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052a8:	4a56      	ldr	r2, [pc, #344]	@ (8005404 <HAL_RCC_OscConfig+0x478>)
 80052aa:	f023 0304 	bic.w	r3, r3, #4
 80052ae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	689b      	ldr	r3, [r3, #8]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d015      	beq.n	80052e4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052b8:	f7fe fcd2 	bl	8003c60 <HAL_GetTick>
 80052bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052be:	e00a      	b.n	80052d6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052c0:	f7fe fcce 	bl	8003c60 <HAL_GetTick>
 80052c4:	4602      	mov	r2, r0
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	1ad3      	subs	r3, r2, r3
 80052ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d901      	bls.n	80052d6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80052d2:	2303      	movs	r3, #3
 80052d4:	e0d7      	b.n	8005486 <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052d6:	4b4b      	ldr	r3, [pc, #300]	@ (8005404 <HAL_RCC_OscConfig+0x478>)
 80052d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052da:	f003 0302 	and.w	r3, r3, #2
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d0ee      	beq.n	80052c0 <HAL_RCC_OscConfig+0x334>
 80052e2:	e014      	b.n	800530e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052e4:	f7fe fcbc 	bl	8003c60 <HAL_GetTick>
 80052e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052ea:	e00a      	b.n	8005302 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052ec:	f7fe fcb8 	bl	8003c60 <HAL_GetTick>
 80052f0:	4602      	mov	r2, r0
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	1ad3      	subs	r3, r2, r3
 80052f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d901      	bls.n	8005302 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80052fe:	2303      	movs	r3, #3
 8005300:	e0c1      	b.n	8005486 <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005302:	4b40      	ldr	r3, [pc, #256]	@ (8005404 <HAL_RCC_OscConfig+0x478>)
 8005304:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005306:	f003 0302 	and.w	r3, r3, #2
 800530a:	2b00      	cmp	r3, #0
 800530c:	d1ee      	bne.n	80052ec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800530e:	7dfb      	ldrb	r3, [r7, #23]
 8005310:	2b01      	cmp	r3, #1
 8005312:	d105      	bne.n	8005320 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005314:	4b3b      	ldr	r3, [pc, #236]	@ (8005404 <HAL_RCC_OscConfig+0x478>)
 8005316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005318:	4a3a      	ldr	r2, [pc, #232]	@ (8005404 <HAL_RCC_OscConfig+0x478>)
 800531a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800531e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	699b      	ldr	r3, [r3, #24]
 8005324:	2b00      	cmp	r3, #0
 8005326:	f000 80ad 	beq.w	8005484 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800532a:	4b36      	ldr	r3, [pc, #216]	@ (8005404 <HAL_RCC_OscConfig+0x478>)
 800532c:	689b      	ldr	r3, [r3, #8]
 800532e:	f003 030c 	and.w	r3, r3, #12
 8005332:	2b08      	cmp	r3, #8
 8005334:	d060      	beq.n	80053f8 <HAL_RCC_OscConfig+0x46c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	699b      	ldr	r3, [r3, #24]
 800533a:	2b02      	cmp	r3, #2
 800533c:	d145      	bne.n	80053ca <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800533e:	4b33      	ldr	r3, [pc, #204]	@ (800540c <HAL_RCC_OscConfig+0x480>)
 8005340:	2200      	movs	r2, #0
 8005342:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005344:	f7fe fc8c 	bl	8003c60 <HAL_GetTick>
 8005348:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800534a:	e008      	b.n	800535e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800534c:	f7fe fc88 	bl	8003c60 <HAL_GetTick>
 8005350:	4602      	mov	r2, r0
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	1ad3      	subs	r3, r2, r3
 8005356:	2b02      	cmp	r3, #2
 8005358:	d901      	bls.n	800535e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800535a:	2303      	movs	r3, #3
 800535c:	e093      	b.n	8005486 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800535e:	4b29      	ldr	r3, [pc, #164]	@ (8005404 <HAL_RCC_OscConfig+0x478>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005366:	2b00      	cmp	r3, #0
 8005368:	d1f0      	bne.n	800534c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	69da      	ldr	r2, [r3, #28]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6a1b      	ldr	r3, [r3, #32]
 8005372:	431a      	orrs	r2, r3
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005378:	019b      	lsls	r3, r3, #6
 800537a:	431a      	orrs	r2, r3
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005380:	085b      	lsrs	r3, r3, #1
 8005382:	3b01      	subs	r3, #1
 8005384:	041b      	lsls	r3, r3, #16
 8005386:	431a      	orrs	r2, r3
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800538c:	061b      	lsls	r3, r3, #24
 800538e:	431a      	orrs	r2, r3
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005394:	071b      	lsls	r3, r3, #28
 8005396:	491b      	ldr	r1, [pc, #108]	@ (8005404 <HAL_RCC_OscConfig+0x478>)
 8005398:	4313      	orrs	r3, r2
 800539a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800539c:	4b1b      	ldr	r3, [pc, #108]	@ (800540c <HAL_RCC_OscConfig+0x480>)
 800539e:	2201      	movs	r2, #1
 80053a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053a2:	f7fe fc5d 	bl	8003c60 <HAL_GetTick>
 80053a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053a8:	e008      	b.n	80053bc <HAL_RCC_OscConfig+0x430>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053aa:	f7fe fc59 	bl	8003c60 <HAL_GetTick>
 80053ae:	4602      	mov	r2, r0
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	1ad3      	subs	r3, r2, r3
 80053b4:	2b02      	cmp	r3, #2
 80053b6:	d901      	bls.n	80053bc <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 80053b8:	2303      	movs	r3, #3
 80053ba:	e064      	b.n	8005486 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053bc:	4b11      	ldr	r3, [pc, #68]	@ (8005404 <HAL_RCC_OscConfig+0x478>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d0f0      	beq.n	80053aa <HAL_RCC_OscConfig+0x41e>
 80053c8:	e05c      	b.n	8005484 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053ca:	4b10      	ldr	r3, [pc, #64]	@ (800540c <HAL_RCC_OscConfig+0x480>)
 80053cc:	2200      	movs	r2, #0
 80053ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053d0:	f7fe fc46 	bl	8003c60 <HAL_GetTick>
 80053d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053d6:	e008      	b.n	80053ea <HAL_RCC_OscConfig+0x45e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053d8:	f7fe fc42 	bl	8003c60 <HAL_GetTick>
 80053dc:	4602      	mov	r2, r0
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	1ad3      	subs	r3, r2, r3
 80053e2:	2b02      	cmp	r3, #2
 80053e4:	d901      	bls.n	80053ea <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80053e6:	2303      	movs	r3, #3
 80053e8:	e04d      	b.n	8005486 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053ea:	4b06      	ldr	r3, [pc, #24]	@ (8005404 <HAL_RCC_OscConfig+0x478>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d1f0      	bne.n	80053d8 <HAL_RCC_OscConfig+0x44c>
 80053f6:	e045      	b.n	8005484 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	699b      	ldr	r3, [r3, #24]
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d107      	bne.n	8005410 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8005400:	2301      	movs	r3, #1
 8005402:	e040      	b.n	8005486 <HAL_RCC_OscConfig+0x4fa>
 8005404:	40023800 	.word	0x40023800
 8005408:	40007000 	.word	0x40007000
 800540c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005410:	4b1f      	ldr	r3, [pc, #124]	@ (8005490 <HAL_RCC_OscConfig+0x504>)
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	699b      	ldr	r3, [r3, #24]
 800541a:	2b01      	cmp	r3, #1
 800541c:	d030      	beq.n	8005480 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005428:	429a      	cmp	r2, r3
 800542a:	d129      	bne.n	8005480 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005436:	429a      	cmp	r2, r3
 8005438:	d122      	bne.n	8005480 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800543a:	68fa      	ldr	r2, [r7, #12]
 800543c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005440:	4013      	ands	r3, r2
 8005442:	687a      	ldr	r2, [r7, #4]
 8005444:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005446:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005448:	4293      	cmp	r3, r2
 800544a:	d119      	bne.n	8005480 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005456:	085b      	lsrs	r3, r3, #1
 8005458:	3b01      	subs	r3, #1
 800545a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800545c:	429a      	cmp	r2, r3
 800545e:	d10f      	bne.n	8005480 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800546a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800546c:	429a      	cmp	r2, r3
 800546e:	d107      	bne.n	8005480 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800547a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800547c:	429a      	cmp	r2, r3
 800547e:	d001      	beq.n	8005484 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005480:	2301      	movs	r3, #1
 8005482:	e000      	b.n	8005486 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8005484:	2300      	movs	r3, #0
}
 8005486:	4618      	mov	r0, r3
 8005488:	3718      	adds	r7, #24
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}
 800548e:	bf00      	nop
 8005490:	40023800 	.word	0x40023800

08005494 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b082      	sub	sp, #8
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d101      	bne.n	80054a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80054a2:	2301      	movs	r3, #1
 80054a4:	e041      	b.n	800552a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054ac:	b2db      	uxtb	r3, r3
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d106      	bne.n	80054c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2200      	movs	r2, #0
 80054b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f7fd fb06 	bl	8002acc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2202      	movs	r2, #2
 80054c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681a      	ldr	r2, [r3, #0]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	3304      	adds	r3, #4
 80054d0:	4619      	mov	r1, r3
 80054d2:	4610      	mov	r0, r2
 80054d4:	f000 fcc0 	bl	8005e58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2201      	movs	r2, #1
 80054dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2201      	movs	r2, #1
 80054e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2201      	movs	r2, #1
 80054ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2201      	movs	r2, #1
 80054f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2201      	movs	r2, #1
 80054fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2201      	movs	r2, #1
 8005504:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2201      	movs	r2, #1
 800550c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2201      	movs	r2, #1
 8005514:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2201      	movs	r2, #1
 800551c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2201      	movs	r2, #1
 8005524:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005528:	2300      	movs	r3, #0
}
 800552a:	4618      	mov	r0, r3
 800552c:	3708      	adds	r7, #8
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}
	...

08005534 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005534:	b480      	push	{r7}
 8005536:	b085      	sub	sp, #20
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005542:	b2db      	uxtb	r3, r3
 8005544:	2b01      	cmp	r3, #1
 8005546:	d001      	beq.n	800554c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005548:	2301      	movs	r3, #1
 800554a:	e046      	b.n	80055da <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2202      	movs	r2, #2
 8005550:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a23      	ldr	r2, [pc, #140]	@ (80055e8 <HAL_TIM_Base_Start+0xb4>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d022      	beq.n	80055a4 <HAL_TIM_Base_Start+0x70>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005566:	d01d      	beq.n	80055a4 <HAL_TIM_Base_Start+0x70>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a1f      	ldr	r2, [pc, #124]	@ (80055ec <HAL_TIM_Base_Start+0xb8>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d018      	beq.n	80055a4 <HAL_TIM_Base_Start+0x70>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a1e      	ldr	r2, [pc, #120]	@ (80055f0 <HAL_TIM_Base_Start+0xbc>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d013      	beq.n	80055a4 <HAL_TIM_Base_Start+0x70>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a1c      	ldr	r2, [pc, #112]	@ (80055f4 <HAL_TIM_Base_Start+0xc0>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d00e      	beq.n	80055a4 <HAL_TIM_Base_Start+0x70>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a1b      	ldr	r2, [pc, #108]	@ (80055f8 <HAL_TIM_Base_Start+0xc4>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d009      	beq.n	80055a4 <HAL_TIM_Base_Start+0x70>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a19      	ldr	r2, [pc, #100]	@ (80055fc <HAL_TIM_Base_Start+0xc8>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d004      	beq.n	80055a4 <HAL_TIM_Base_Start+0x70>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a18      	ldr	r2, [pc, #96]	@ (8005600 <HAL_TIM_Base_Start+0xcc>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d111      	bne.n	80055c8 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	689b      	ldr	r3, [r3, #8]
 80055aa:	f003 0307 	and.w	r3, r3, #7
 80055ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2b06      	cmp	r3, #6
 80055b4:	d010      	beq.n	80055d8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f042 0201 	orr.w	r2, r2, #1
 80055c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055c6:	e007      	b.n	80055d8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	681a      	ldr	r2, [r3, #0]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f042 0201 	orr.w	r2, r2, #1
 80055d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80055d8:	2300      	movs	r3, #0
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3714      	adds	r7, #20
 80055de:	46bd      	mov	sp, r7
 80055e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e4:	4770      	bx	lr
 80055e6:	bf00      	nop
 80055e8:	40010000 	.word	0x40010000
 80055ec:	40000400 	.word	0x40000400
 80055f0:	40000800 	.word	0x40000800
 80055f4:	40000c00 	.word	0x40000c00
 80055f8:	40010400 	.word	0x40010400
 80055fc:	40014000 	.word	0x40014000
 8005600:	40001800 	.word	0x40001800

08005604 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005604:	b480      	push	{r7}
 8005606:	b085      	sub	sp, #20
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005612:	b2db      	uxtb	r3, r3
 8005614:	2b01      	cmp	r3, #1
 8005616:	d001      	beq.n	800561c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005618:	2301      	movs	r3, #1
 800561a:	e04e      	b.n	80056ba <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2202      	movs	r2, #2
 8005620:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	68da      	ldr	r2, [r3, #12]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f042 0201 	orr.w	r2, r2, #1
 8005632:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a23      	ldr	r2, [pc, #140]	@ (80056c8 <HAL_TIM_Base_Start_IT+0xc4>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d022      	beq.n	8005684 <HAL_TIM_Base_Start_IT+0x80>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005646:	d01d      	beq.n	8005684 <HAL_TIM_Base_Start_IT+0x80>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a1f      	ldr	r2, [pc, #124]	@ (80056cc <HAL_TIM_Base_Start_IT+0xc8>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d018      	beq.n	8005684 <HAL_TIM_Base_Start_IT+0x80>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a1e      	ldr	r2, [pc, #120]	@ (80056d0 <HAL_TIM_Base_Start_IT+0xcc>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d013      	beq.n	8005684 <HAL_TIM_Base_Start_IT+0x80>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a1c      	ldr	r2, [pc, #112]	@ (80056d4 <HAL_TIM_Base_Start_IT+0xd0>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d00e      	beq.n	8005684 <HAL_TIM_Base_Start_IT+0x80>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a1b      	ldr	r2, [pc, #108]	@ (80056d8 <HAL_TIM_Base_Start_IT+0xd4>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d009      	beq.n	8005684 <HAL_TIM_Base_Start_IT+0x80>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a19      	ldr	r2, [pc, #100]	@ (80056dc <HAL_TIM_Base_Start_IT+0xd8>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d004      	beq.n	8005684 <HAL_TIM_Base_Start_IT+0x80>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a18      	ldr	r2, [pc, #96]	@ (80056e0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d111      	bne.n	80056a8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	f003 0307 	and.w	r3, r3, #7
 800568e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2b06      	cmp	r3, #6
 8005694:	d010      	beq.n	80056b8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	681a      	ldr	r2, [r3, #0]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f042 0201 	orr.w	r2, r2, #1
 80056a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056a6:	e007      	b.n	80056b8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	681a      	ldr	r2, [r3, #0]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f042 0201 	orr.w	r2, r2, #1
 80056b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80056b8:	2300      	movs	r3, #0
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3714      	adds	r7, #20
 80056be:	46bd      	mov	sp, r7
 80056c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c4:	4770      	bx	lr
 80056c6:	bf00      	nop
 80056c8:	40010000 	.word	0x40010000
 80056cc:	40000400 	.word	0x40000400
 80056d0:	40000800 	.word	0x40000800
 80056d4:	40000c00 	.word	0x40000c00
 80056d8:	40010400 	.word	0x40010400
 80056dc:	40014000 	.word	0x40014000
 80056e0:	40001800 	.word	0x40001800

080056e4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b082      	sub	sp, #8
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d101      	bne.n	80056f6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	e041      	b.n	800577a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80056fc:	b2db      	uxtb	r3, r3
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d106      	bne.n	8005710 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2200      	movs	r2, #0
 8005706:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f7fd f9be 	bl	8002a8c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2202      	movs	r2, #2
 8005714:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681a      	ldr	r2, [r3, #0]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	3304      	adds	r3, #4
 8005720:	4619      	mov	r1, r3
 8005722:	4610      	mov	r0, r2
 8005724:	f000 fb98 	bl	8005e58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2201      	movs	r2, #1
 800572c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2201      	movs	r2, #1
 8005734:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2201      	movs	r2, #1
 800573c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2201      	movs	r2, #1
 8005744:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2201      	movs	r2, #1
 800574c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2201      	movs	r2, #1
 8005754:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2201      	movs	r2, #1
 800575c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2201      	movs	r2, #1
 8005764:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2201      	movs	r2, #1
 800576c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2201      	movs	r2, #1
 8005774:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005778:	2300      	movs	r3, #0
}
 800577a:	4618      	mov	r0, r3
 800577c:	3708      	adds	r7, #8
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}
	...

08005784 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b084      	sub	sp, #16
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
 800578c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d109      	bne.n	80057a8 <HAL_TIM_PWM_Start+0x24>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800579a:	b2db      	uxtb	r3, r3
 800579c:	2b01      	cmp	r3, #1
 800579e:	bf14      	ite	ne
 80057a0:	2301      	movne	r3, #1
 80057a2:	2300      	moveq	r3, #0
 80057a4:	b2db      	uxtb	r3, r3
 80057a6:	e022      	b.n	80057ee <HAL_TIM_PWM_Start+0x6a>
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	2b04      	cmp	r3, #4
 80057ac:	d109      	bne.n	80057c2 <HAL_TIM_PWM_Start+0x3e>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80057b4:	b2db      	uxtb	r3, r3
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	bf14      	ite	ne
 80057ba:	2301      	movne	r3, #1
 80057bc:	2300      	moveq	r3, #0
 80057be:	b2db      	uxtb	r3, r3
 80057c0:	e015      	b.n	80057ee <HAL_TIM_PWM_Start+0x6a>
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	2b08      	cmp	r3, #8
 80057c6:	d109      	bne.n	80057dc <HAL_TIM_PWM_Start+0x58>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80057ce:	b2db      	uxtb	r3, r3
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	bf14      	ite	ne
 80057d4:	2301      	movne	r3, #1
 80057d6:	2300      	moveq	r3, #0
 80057d8:	b2db      	uxtb	r3, r3
 80057da:	e008      	b.n	80057ee <HAL_TIM_PWM_Start+0x6a>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80057e2:	b2db      	uxtb	r3, r3
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	bf14      	ite	ne
 80057e8:	2301      	movne	r3, #1
 80057ea:	2300      	moveq	r3, #0
 80057ec:	b2db      	uxtb	r3, r3
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d001      	beq.n	80057f6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	e07c      	b.n	80058f0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d104      	bne.n	8005806 <HAL_TIM_PWM_Start+0x82>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2202      	movs	r2, #2
 8005800:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005804:	e013      	b.n	800582e <HAL_TIM_PWM_Start+0xaa>
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	2b04      	cmp	r3, #4
 800580a:	d104      	bne.n	8005816 <HAL_TIM_PWM_Start+0x92>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2202      	movs	r2, #2
 8005810:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005814:	e00b      	b.n	800582e <HAL_TIM_PWM_Start+0xaa>
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	2b08      	cmp	r3, #8
 800581a:	d104      	bne.n	8005826 <HAL_TIM_PWM_Start+0xa2>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2202      	movs	r2, #2
 8005820:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005824:	e003      	b.n	800582e <HAL_TIM_PWM_Start+0xaa>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2202      	movs	r2, #2
 800582a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	2201      	movs	r2, #1
 8005834:	6839      	ldr	r1, [r7, #0]
 8005836:	4618      	mov	r0, r3
 8005838:	f000 fdfe 	bl	8006438 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a2d      	ldr	r2, [pc, #180]	@ (80058f8 <HAL_TIM_PWM_Start+0x174>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d004      	beq.n	8005850 <HAL_TIM_PWM_Start+0xcc>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a2c      	ldr	r2, [pc, #176]	@ (80058fc <HAL_TIM_PWM_Start+0x178>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d101      	bne.n	8005854 <HAL_TIM_PWM_Start+0xd0>
 8005850:	2301      	movs	r3, #1
 8005852:	e000      	b.n	8005856 <HAL_TIM_PWM_Start+0xd2>
 8005854:	2300      	movs	r3, #0
 8005856:	2b00      	cmp	r3, #0
 8005858:	d007      	beq.n	800586a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005868:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a22      	ldr	r2, [pc, #136]	@ (80058f8 <HAL_TIM_PWM_Start+0x174>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d022      	beq.n	80058ba <HAL_TIM_PWM_Start+0x136>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800587c:	d01d      	beq.n	80058ba <HAL_TIM_PWM_Start+0x136>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a1f      	ldr	r2, [pc, #124]	@ (8005900 <HAL_TIM_PWM_Start+0x17c>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d018      	beq.n	80058ba <HAL_TIM_PWM_Start+0x136>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a1d      	ldr	r2, [pc, #116]	@ (8005904 <HAL_TIM_PWM_Start+0x180>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d013      	beq.n	80058ba <HAL_TIM_PWM_Start+0x136>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a1c      	ldr	r2, [pc, #112]	@ (8005908 <HAL_TIM_PWM_Start+0x184>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d00e      	beq.n	80058ba <HAL_TIM_PWM_Start+0x136>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a16      	ldr	r2, [pc, #88]	@ (80058fc <HAL_TIM_PWM_Start+0x178>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d009      	beq.n	80058ba <HAL_TIM_PWM_Start+0x136>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a18      	ldr	r2, [pc, #96]	@ (800590c <HAL_TIM_PWM_Start+0x188>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d004      	beq.n	80058ba <HAL_TIM_PWM_Start+0x136>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a16      	ldr	r2, [pc, #88]	@ (8005910 <HAL_TIM_PWM_Start+0x18c>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d111      	bne.n	80058de <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	689b      	ldr	r3, [r3, #8]
 80058c0:	f003 0307 	and.w	r3, r3, #7
 80058c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2b06      	cmp	r3, #6
 80058ca:	d010      	beq.n	80058ee <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	681a      	ldr	r2, [r3, #0]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f042 0201 	orr.w	r2, r2, #1
 80058da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058dc:	e007      	b.n	80058ee <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	681a      	ldr	r2, [r3, #0]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f042 0201 	orr.w	r2, r2, #1
 80058ec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80058ee:	2300      	movs	r3, #0
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3710      	adds	r7, #16
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}
 80058f8:	40010000 	.word	0x40010000
 80058fc:	40010400 	.word	0x40010400
 8005900:	40000400 	.word	0x40000400
 8005904:	40000800 	.word	0x40000800
 8005908:	40000c00 	.word	0x40000c00
 800590c:	40014000 	.word	0x40014000
 8005910:	40001800 	.word	0x40001800

08005914 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b084      	sub	sp, #16
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	68db      	ldr	r3, [r3, #12]
 8005922:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	691b      	ldr	r3, [r3, #16]
 800592a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	f003 0302 	and.w	r3, r3, #2
 8005932:	2b00      	cmp	r3, #0
 8005934:	d020      	beq.n	8005978 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	f003 0302 	and.w	r3, r3, #2
 800593c:	2b00      	cmp	r3, #0
 800593e:	d01b      	beq.n	8005978 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f06f 0202 	mvn.w	r2, #2
 8005948:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2201      	movs	r2, #1
 800594e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	699b      	ldr	r3, [r3, #24]
 8005956:	f003 0303 	and.w	r3, r3, #3
 800595a:	2b00      	cmp	r3, #0
 800595c:	d003      	beq.n	8005966 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f000 fa5b 	bl	8005e1a <HAL_TIM_IC_CaptureCallback>
 8005964:	e005      	b.n	8005972 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f000 fa4d 	bl	8005e06 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	f000 fa5e 	bl	8005e2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2200      	movs	r2, #0
 8005976:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	f003 0304 	and.w	r3, r3, #4
 800597e:	2b00      	cmp	r3, #0
 8005980:	d020      	beq.n	80059c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	f003 0304 	and.w	r3, r3, #4
 8005988:	2b00      	cmp	r3, #0
 800598a:	d01b      	beq.n	80059c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f06f 0204 	mvn.w	r2, #4
 8005994:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2202      	movs	r2, #2
 800599a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	699b      	ldr	r3, [r3, #24]
 80059a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d003      	beq.n	80059b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f000 fa35 	bl	8005e1a <HAL_TIM_IC_CaptureCallback>
 80059b0:	e005      	b.n	80059be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	f000 fa27 	bl	8005e06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	f000 fa38 	bl	8005e2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2200      	movs	r2, #0
 80059c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	f003 0308 	and.w	r3, r3, #8
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d020      	beq.n	8005a10 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	f003 0308 	and.w	r3, r3, #8
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d01b      	beq.n	8005a10 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f06f 0208 	mvn.w	r2, #8
 80059e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2204      	movs	r2, #4
 80059e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	69db      	ldr	r3, [r3, #28]
 80059ee:	f003 0303 	and.w	r3, r3, #3
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d003      	beq.n	80059fe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f000 fa0f 	bl	8005e1a <HAL_TIM_IC_CaptureCallback>
 80059fc:	e005      	b.n	8005a0a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f000 fa01 	bl	8005e06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	f000 fa12 	bl	8005e2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	f003 0310 	and.w	r3, r3, #16
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d020      	beq.n	8005a5c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	f003 0310 	and.w	r3, r3, #16
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d01b      	beq.n	8005a5c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f06f 0210 	mvn.w	r2, #16
 8005a2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2208      	movs	r2, #8
 8005a32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	69db      	ldr	r3, [r3, #28]
 8005a3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d003      	beq.n	8005a4a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f000 f9e9 	bl	8005e1a <HAL_TIM_IC_CaptureCallback>
 8005a48:	e005      	b.n	8005a56 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f000 f9db 	bl	8005e06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f000 f9ec 	bl	8005e2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	f003 0301 	and.w	r3, r3, #1
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d00c      	beq.n	8005a80 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	f003 0301 	and.w	r3, r3, #1
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d007      	beq.n	8005a80 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f06f 0201 	mvn.w	r2, #1
 8005a78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f7fc fbd6 	bl	800222c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d00c      	beq.n	8005aa4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d007      	beq.n	8005aa4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005a9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f000 fd76 	bl	8006590 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d00c      	beq.n	8005ac8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d007      	beq.n	8005ac8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005ac0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f000 f9bd 	bl	8005e42 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	f003 0320 	and.w	r3, r3, #32
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d00c      	beq.n	8005aec <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	f003 0320 	and.w	r3, r3, #32
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d007      	beq.n	8005aec <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f06f 0220 	mvn.w	r2, #32
 8005ae4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f000 fd48 	bl	800657c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005aec:	bf00      	nop
 8005aee:	3710      	adds	r7, #16
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}

08005af4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b086      	sub	sp, #24
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	60f8      	str	r0, [r7, #12]
 8005afc:	60b9      	str	r1, [r7, #8]
 8005afe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b00:	2300      	movs	r3, #0
 8005b02:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b0a:	2b01      	cmp	r3, #1
 8005b0c:	d101      	bne.n	8005b12 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005b0e:	2302      	movs	r3, #2
 8005b10:	e0ae      	b.n	8005c70 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2201      	movs	r2, #1
 8005b16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2b0c      	cmp	r3, #12
 8005b1e:	f200 809f 	bhi.w	8005c60 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005b22:	a201      	add	r2, pc, #4	@ (adr r2, 8005b28 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b28:	08005b5d 	.word	0x08005b5d
 8005b2c:	08005c61 	.word	0x08005c61
 8005b30:	08005c61 	.word	0x08005c61
 8005b34:	08005c61 	.word	0x08005c61
 8005b38:	08005b9d 	.word	0x08005b9d
 8005b3c:	08005c61 	.word	0x08005c61
 8005b40:	08005c61 	.word	0x08005c61
 8005b44:	08005c61 	.word	0x08005c61
 8005b48:	08005bdf 	.word	0x08005bdf
 8005b4c:	08005c61 	.word	0x08005c61
 8005b50:	08005c61 	.word	0x08005c61
 8005b54:	08005c61 	.word	0x08005c61
 8005b58:	08005c1f 	.word	0x08005c1f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	68b9      	ldr	r1, [r7, #8]
 8005b62:	4618      	mov	r0, r3
 8005b64:	f000 fa1e 	bl	8005fa4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	699a      	ldr	r2, [r3, #24]
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f042 0208 	orr.w	r2, r2, #8
 8005b76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	699a      	ldr	r2, [r3, #24]
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f022 0204 	bic.w	r2, r2, #4
 8005b86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	6999      	ldr	r1, [r3, #24]
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	691a      	ldr	r2, [r3, #16]
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	430a      	orrs	r2, r1
 8005b98:	619a      	str	r2, [r3, #24]
      break;
 8005b9a:	e064      	b.n	8005c66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	68b9      	ldr	r1, [r7, #8]
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f000 fa6e 	bl	8006084 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	699a      	ldr	r2, [r3, #24]
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005bb6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	699a      	ldr	r2, [r3, #24]
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005bc6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	6999      	ldr	r1, [r3, #24]
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	691b      	ldr	r3, [r3, #16]
 8005bd2:	021a      	lsls	r2, r3, #8
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	430a      	orrs	r2, r1
 8005bda:	619a      	str	r2, [r3, #24]
      break;
 8005bdc:	e043      	b.n	8005c66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	68b9      	ldr	r1, [r7, #8]
 8005be4:	4618      	mov	r0, r3
 8005be6:	f000 fac3 	bl	8006170 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	69da      	ldr	r2, [r3, #28]
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f042 0208 	orr.w	r2, r2, #8
 8005bf8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	69da      	ldr	r2, [r3, #28]
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f022 0204 	bic.w	r2, r2, #4
 8005c08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	69d9      	ldr	r1, [r3, #28]
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	691a      	ldr	r2, [r3, #16]
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	430a      	orrs	r2, r1
 8005c1a:	61da      	str	r2, [r3, #28]
      break;
 8005c1c:	e023      	b.n	8005c66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	68b9      	ldr	r1, [r7, #8]
 8005c24:	4618      	mov	r0, r3
 8005c26:	f000 fb17 	bl	8006258 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	69da      	ldr	r2, [r3, #28]
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005c38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	69da      	ldr	r2, [r3, #28]
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	69d9      	ldr	r1, [r3, #28]
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	691b      	ldr	r3, [r3, #16]
 8005c54:	021a      	lsls	r2, r3, #8
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	430a      	orrs	r2, r1
 8005c5c:	61da      	str	r2, [r3, #28]
      break;
 8005c5e:	e002      	b.n	8005c66 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005c60:	2301      	movs	r3, #1
 8005c62:	75fb      	strb	r3, [r7, #23]
      break;
 8005c64:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005c6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	3718      	adds	r7, #24
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}

08005c78 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b084      	sub	sp, #16
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c82:	2300      	movs	r3, #0
 8005c84:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c8c:	2b01      	cmp	r3, #1
 8005c8e:	d101      	bne.n	8005c94 <HAL_TIM_ConfigClockSource+0x1c>
 8005c90:	2302      	movs	r3, #2
 8005c92:	e0b4      	b.n	8005dfe <HAL_TIM_ConfigClockSource+0x186>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2201      	movs	r2, #1
 8005c98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2202      	movs	r2, #2
 8005ca0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	689b      	ldr	r3, [r3, #8]
 8005caa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005cb2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005cba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	68ba      	ldr	r2, [r7, #8]
 8005cc2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ccc:	d03e      	beq.n	8005d4c <HAL_TIM_ConfigClockSource+0xd4>
 8005cce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005cd2:	f200 8087 	bhi.w	8005de4 <HAL_TIM_ConfigClockSource+0x16c>
 8005cd6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005cda:	f000 8086 	beq.w	8005dea <HAL_TIM_ConfigClockSource+0x172>
 8005cde:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ce2:	d87f      	bhi.n	8005de4 <HAL_TIM_ConfigClockSource+0x16c>
 8005ce4:	2b70      	cmp	r3, #112	@ 0x70
 8005ce6:	d01a      	beq.n	8005d1e <HAL_TIM_ConfigClockSource+0xa6>
 8005ce8:	2b70      	cmp	r3, #112	@ 0x70
 8005cea:	d87b      	bhi.n	8005de4 <HAL_TIM_ConfigClockSource+0x16c>
 8005cec:	2b60      	cmp	r3, #96	@ 0x60
 8005cee:	d050      	beq.n	8005d92 <HAL_TIM_ConfigClockSource+0x11a>
 8005cf0:	2b60      	cmp	r3, #96	@ 0x60
 8005cf2:	d877      	bhi.n	8005de4 <HAL_TIM_ConfigClockSource+0x16c>
 8005cf4:	2b50      	cmp	r3, #80	@ 0x50
 8005cf6:	d03c      	beq.n	8005d72 <HAL_TIM_ConfigClockSource+0xfa>
 8005cf8:	2b50      	cmp	r3, #80	@ 0x50
 8005cfa:	d873      	bhi.n	8005de4 <HAL_TIM_ConfigClockSource+0x16c>
 8005cfc:	2b40      	cmp	r3, #64	@ 0x40
 8005cfe:	d058      	beq.n	8005db2 <HAL_TIM_ConfigClockSource+0x13a>
 8005d00:	2b40      	cmp	r3, #64	@ 0x40
 8005d02:	d86f      	bhi.n	8005de4 <HAL_TIM_ConfigClockSource+0x16c>
 8005d04:	2b30      	cmp	r3, #48	@ 0x30
 8005d06:	d064      	beq.n	8005dd2 <HAL_TIM_ConfigClockSource+0x15a>
 8005d08:	2b30      	cmp	r3, #48	@ 0x30
 8005d0a:	d86b      	bhi.n	8005de4 <HAL_TIM_ConfigClockSource+0x16c>
 8005d0c:	2b20      	cmp	r3, #32
 8005d0e:	d060      	beq.n	8005dd2 <HAL_TIM_ConfigClockSource+0x15a>
 8005d10:	2b20      	cmp	r3, #32
 8005d12:	d867      	bhi.n	8005de4 <HAL_TIM_ConfigClockSource+0x16c>
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d05c      	beq.n	8005dd2 <HAL_TIM_ConfigClockSource+0x15a>
 8005d18:	2b10      	cmp	r3, #16
 8005d1a:	d05a      	beq.n	8005dd2 <HAL_TIM_ConfigClockSource+0x15a>
 8005d1c:	e062      	b.n	8005de4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005d2e:	f000 fb63 	bl	80063f8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	689b      	ldr	r3, [r3, #8]
 8005d38:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005d40:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	68ba      	ldr	r2, [r7, #8]
 8005d48:	609a      	str	r2, [r3, #8]
      break;
 8005d4a:	e04f      	b.n	8005dec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005d5c:	f000 fb4c 	bl	80063f8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	689a      	ldr	r2, [r3, #8]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005d6e:	609a      	str	r2, [r3, #8]
      break;
 8005d70:	e03c      	b.n	8005dec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d7e:	461a      	mov	r2, r3
 8005d80:	f000 fac0 	bl	8006304 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	2150      	movs	r1, #80	@ 0x50
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f000 fb19 	bl	80063c2 <TIM_ITRx_SetConfig>
      break;
 8005d90:	e02c      	b.n	8005dec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d9e:	461a      	mov	r2, r3
 8005da0:	f000 fadf 	bl	8006362 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	2160      	movs	r1, #96	@ 0x60
 8005daa:	4618      	mov	r0, r3
 8005dac:	f000 fb09 	bl	80063c2 <TIM_ITRx_SetConfig>
      break;
 8005db0:	e01c      	b.n	8005dec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005dbe:	461a      	mov	r2, r3
 8005dc0:	f000 faa0 	bl	8006304 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	2140      	movs	r1, #64	@ 0x40
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f000 faf9 	bl	80063c2 <TIM_ITRx_SetConfig>
      break;
 8005dd0:	e00c      	b.n	8005dec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681a      	ldr	r2, [r3, #0]
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4619      	mov	r1, r3
 8005ddc:	4610      	mov	r0, r2
 8005dde:	f000 faf0 	bl	80063c2 <TIM_ITRx_SetConfig>
      break;
 8005de2:	e003      	b.n	8005dec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005de4:	2301      	movs	r3, #1
 8005de6:	73fb      	strb	r3, [r7, #15]
      break;
 8005de8:	e000      	b.n	8005dec <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005dea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2201      	movs	r2, #1
 8005df0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2200      	movs	r2, #0
 8005df8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005dfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	3710      	adds	r7, #16
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}

08005e06 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e06:	b480      	push	{r7}
 8005e08:	b083      	sub	sp, #12
 8005e0a:	af00      	add	r7, sp, #0
 8005e0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005e0e:	bf00      	nop
 8005e10:	370c      	adds	r7, #12
 8005e12:	46bd      	mov	sp, r7
 8005e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e18:	4770      	bx	lr

08005e1a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005e1a:	b480      	push	{r7}
 8005e1c:	b083      	sub	sp, #12
 8005e1e:	af00      	add	r7, sp, #0
 8005e20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005e22:	bf00      	nop
 8005e24:	370c      	adds	r7, #12
 8005e26:	46bd      	mov	sp, r7
 8005e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2c:	4770      	bx	lr

08005e2e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005e2e:	b480      	push	{r7}
 8005e30:	b083      	sub	sp, #12
 8005e32:	af00      	add	r7, sp, #0
 8005e34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005e36:	bf00      	nop
 8005e38:	370c      	adds	r7, #12
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e40:	4770      	bx	lr

08005e42 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005e42:	b480      	push	{r7}
 8005e44:	b083      	sub	sp, #12
 8005e46:	af00      	add	r7, sp, #0
 8005e48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005e4a:	bf00      	nop
 8005e4c:	370c      	adds	r7, #12
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e54:	4770      	bx	lr
	...

08005e58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b085      	sub	sp, #20
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
 8005e60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	4a43      	ldr	r2, [pc, #268]	@ (8005f78 <TIM_Base_SetConfig+0x120>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d013      	beq.n	8005e98 <TIM_Base_SetConfig+0x40>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e76:	d00f      	beq.n	8005e98 <TIM_Base_SetConfig+0x40>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	4a40      	ldr	r2, [pc, #256]	@ (8005f7c <TIM_Base_SetConfig+0x124>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d00b      	beq.n	8005e98 <TIM_Base_SetConfig+0x40>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	4a3f      	ldr	r2, [pc, #252]	@ (8005f80 <TIM_Base_SetConfig+0x128>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d007      	beq.n	8005e98 <TIM_Base_SetConfig+0x40>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	4a3e      	ldr	r2, [pc, #248]	@ (8005f84 <TIM_Base_SetConfig+0x12c>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d003      	beq.n	8005e98 <TIM_Base_SetConfig+0x40>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	4a3d      	ldr	r2, [pc, #244]	@ (8005f88 <TIM_Base_SetConfig+0x130>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d108      	bne.n	8005eaa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	68fa      	ldr	r2, [r7, #12]
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	4a32      	ldr	r2, [pc, #200]	@ (8005f78 <TIM_Base_SetConfig+0x120>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d02b      	beq.n	8005f0a <TIM_Base_SetConfig+0xb2>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005eb8:	d027      	beq.n	8005f0a <TIM_Base_SetConfig+0xb2>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	4a2f      	ldr	r2, [pc, #188]	@ (8005f7c <TIM_Base_SetConfig+0x124>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d023      	beq.n	8005f0a <TIM_Base_SetConfig+0xb2>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	4a2e      	ldr	r2, [pc, #184]	@ (8005f80 <TIM_Base_SetConfig+0x128>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d01f      	beq.n	8005f0a <TIM_Base_SetConfig+0xb2>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	4a2d      	ldr	r2, [pc, #180]	@ (8005f84 <TIM_Base_SetConfig+0x12c>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d01b      	beq.n	8005f0a <TIM_Base_SetConfig+0xb2>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	4a2c      	ldr	r2, [pc, #176]	@ (8005f88 <TIM_Base_SetConfig+0x130>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d017      	beq.n	8005f0a <TIM_Base_SetConfig+0xb2>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	4a2b      	ldr	r2, [pc, #172]	@ (8005f8c <TIM_Base_SetConfig+0x134>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d013      	beq.n	8005f0a <TIM_Base_SetConfig+0xb2>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	4a2a      	ldr	r2, [pc, #168]	@ (8005f90 <TIM_Base_SetConfig+0x138>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d00f      	beq.n	8005f0a <TIM_Base_SetConfig+0xb2>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	4a29      	ldr	r2, [pc, #164]	@ (8005f94 <TIM_Base_SetConfig+0x13c>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d00b      	beq.n	8005f0a <TIM_Base_SetConfig+0xb2>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	4a28      	ldr	r2, [pc, #160]	@ (8005f98 <TIM_Base_SetConfig+0x140>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d007      	beq.n	8005f0a <TIM_Base_SetConfig+0xb2>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	4a27      	ldr	r2, [pc, #156]	@ (8005f9c <TIM_Base_SetConfig+0x144>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d003      	beq.n	8005f0a <TIM_Base_SetConfig+0xb2>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	4a26      	ldr	r2, [pc, #152]	@ (8005fa0 <TIM_Base_SetConfig+0x148>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d108      	bne.n	8005f1c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	68db      	ldr	r3, [r3, #12]
 8005f16:	68fa      	ldr	r2, [r7, #12]
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	695b      	ldr	r3, [r3, #20]
 8005f26:	4313      	orrs	r3, r2
 8005f28:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	689a      	ldr	r2, [r3, #8]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	681a      	ldr	r2, [r3, #0]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	4a0e      	ldr	r2, [pc, #56]	@ (8005f78 <TIM_Base_SetConfig+0x120>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d003      	beq.n	8005f4a <TIM_Base_SetConfig+0xf2>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	4a10      	ldr	r2, [pc, #64]	@ (8005f88 <TIM_Base_SetConfig+0x130>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d103      	bne.n	8005f52 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	691a      	ldr	r2, [r3, #16]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f043 0204 	orr.w	r2, r3, #4
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2201      	movs	r2, #1
 8005f62:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	68fa      	ldr	r2, [r7, #12]
 8005f68:	601a      	str	r2, [r3, #0]
}
 8005f6a:	bf00      	nop
 8005f6c:	3714      	adds	r7, #20
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f74:	4770      	bx	lr
 8005f76:	bf00      	nop
 8005f78:	40010000 	.word	0x40010000
 8005f7c:	40000400 	.word	0x40000400
 8005f80:	40000800 	.word	0x40000800
 8005f84:	40000c00 	.word	0x40000c00
 8005f88:	40010400 	.word	0x40010400
 8005f8c:	40014000 	.word	0x40014000
 8005f90:	40014400 	.word	0x40014400
 8005f94:	40014800 	.word	0x40014800
 8005f98:	40001800 	.word	0x40001800
 8005f9c:	40001c00 	.word	0x40001c00
 8005fa0:	40002000 	.word	0x40002000

08005fa4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b087      	sub	sp, #28
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
 8005fac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6a1b      	ldr	r3, [r3, #32]
 8005fb2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6a1b      	ldr	r3, [r3, #32]
 8005fb8:	f023 0201 	bic.w	r2, r3, #1
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	699b      	ldr	r3, [r3, #24]
 8005fca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	f023 0303 	bic.w	r3, r3, #3
 8005fda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	68fa      	ldr	r2, [r7, #12]
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	f023 0302 	bic.w	r3, r3, #2
 8005fec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	689b      	ldr	r3, [r3, #8]
 8005ff2:	697a      	ldr	r2, [r7, #20]
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	4a20      	ldr	r2, [pc, #128]	@ (800607c <TIM_OC1_SetConfig+0xd8>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d003      	beq.n	8006008 <TIM_OC1_SetConfig+0x64>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	4a1f      	ldr	r2, [pc, #124]	@ (8006080 <TIM_OC1_SetConfig+0xdc>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d10c      	bne.n	8006022 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	f023 0308 	bic.w	r3, r3, #8
 800600e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	68db      	ldr	r3, [r3, #12]
 8006014:	697a      	ldr	r2, [r7, #20]
 8006016:	4313      	orrs	r3, r2
 8006018:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	f023 0304 	bic.w	r3, r3, #4
 8006020:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	4a15      	ldr	r2, [pc, #84]	@ (800607c <TIM_OC1_SetConfig+0xd8>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d003      	beq.n	8006032 <TIM_OC1_SetConfig+0x8e>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	4a14      	ldr	r2, [pc, #80]	@ (8006080 <TIM_OC1_SetConfig+0xdc>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d111      	bne.n	8006056 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006038:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006040:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	695b      	ldr	r3, [r3, #20]
 8006046:	693a      	ldr	r2, [r7, #16]
 8006048:	4313      	orrs	r3, r2
 800604a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	699b      	ldr	r3, [r3, #24]
 8006050:	693a      	ldr	r2, [r7, #16]
 8006052:	4313      	orrs	r3, r2
 8006054:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	693a      	ldr	r2, [r7, #16]
 800605a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	68fa      	ldr	r2, [r7, #12]
 8006060:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	685a      	ldr	r2, [r3, #4]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	697a      	ldr	r2, [r7, #20]
 800606e:	621a      	str	r2, [r3, #32]
}
 8006070:	bf00      	nop
 8006072:	371c      	adds	r7, #28
 8006074:	46bd      	mov	sp, r7
 8006076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607a:	4770      	bx	lr
 800607c:	40010000 	.word	0x40010000
 8006080:	40010400 	.word	0x40010400

08006084 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006084:	b480      	push	{r7}
 8006086:	b087      	sub	sp, #28
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
 800608c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6a1b      	ldr	r3, [r3, #32]
 8006092:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6a1b      	ldr	r3, [r3, #32]
 8006098:	f023 0210 	bic.w	r2, r3, #16
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	699b      	ldr	r3, [r3, #24]
 80060aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80060b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80060ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	021b      	lsls	r3, r3, #8
 80060c2:	68fa      	ldr	r2, [r7, #12]
 80060c4:	4313      	orrs	r3, r2
 80060c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	f023 0320 	bic.w	r3, r3, #32
 80060ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	689b      	ldr	r3, [r3, #8]
 80060d4:	011b      	lsls	r3, r3, #4
 80060d6:	697a      	ldr	r2, [r7, #20]
 80060d8:	4313      	orrs	r3, r2
 80060da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	4a22      	ldr	r2, [pc, #136]	@ (8006168 <TIM_OC2_SetConfig+0xe4>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d003      	beq.n	80060ec <TIM_OC2_SetConfig+0x68>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	4a21      	ldr	r2, [pc, #132]	@ (800616c <TIM_OC2_SetConfig+0xe8>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d10d      	bne.n	8006108 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80060f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	68db      	ldr	r3, [r3, #12]
 80060f8:	011b      	lsls	r3, r3, #4
 80060fa:	697a      	ldr	r2, [r7, #20]
 80060fc:	4313      	orrs	r3, r2
 80060fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006100:	697b      	ldr	r3, [r7, #20]
 8006102:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006106:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	4a17      	ldr	r2, [pc, #92]	@ (8006168 <TIM_OC2_SetConfig+0xe4>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d003      	beq.n	8006118 <TIM_OC2_SetConfig+0x94>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	4a16      	ldr	r2, [pc, #88]	@ (800616c <TIM_OC2_SetConfig+0xe8>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d113      	bne.n	8006140 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006118:	693b      	ldr	r3, [r7, #16]
 800611a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800611e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006126:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	695b      	ldr	r3, [r3, #20]
 800612c:	009b      	lsls	r3, r3, #2
 800612e:	693a      	ldr	r2, [r7, #16]
 8006130:	4313      	orrs	r3, r2
 8006132:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	699b      	ldr	r3, [r3, #24]
 8006138:	009b      	lsls	r3, r3, #2
 800613a:	693a      	ldr	r2, [r7, #16]
 800613c:	4313      	orrs	r3, r2
 800613e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	693a      	ldr	r2, [r7, #16]
 8006144:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	68fa      	ldr	r2, [r7, #12]
 800614a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	685a      	ldr	r2, [r3, #4]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	697a      	ldr	r2, [r7, #20]
 8006158:	621a      	str	r2, [r3, #32]
}
 800615a:	bf00      	nop
 800615c:	371c      	adds	r7, #28
 800615e:	46bd      	mov	sp, r7
 8006160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006164:	4770      	bx	lr
 8006166:	bf00      	nop
 8006168:	40010000 	.word	0x40010000
 800616c:	40010400 	.word	0x40010400

08006170 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006170:	b480      	push	{r7}
 8006172:	b087      	sub	sp, #28
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
 8006178:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6a1b      	ldr	r3, [r3, #32]
 800617e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6a1b      	ldr	r3, [r3, #32]
 8006184:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	69db      	ldr	r3, [r3, #28]
 8006196:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800619e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	f023 0303 	bic.w	r3, r3, #3
 80061a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	68fa      	ldr	r2, [r7, #12]
 80061ae:	4313      	orrs	r3, r2
 80061b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80061b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	689b      	ldr	r3, [r3, #8]
 80061be:	021b      	lsls	r3, r3, #8
 80061c0:	697a      	ldr	r2, [r7, #20]
 80061c2:	4313      	orrs	r3, r2
 80061c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	4a21      	ldr	r2, [pc, #132]	@ (8006250 <TIM_OC3_SetConfig+0xe0>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d003      	beq.n	80061d6 <TIM_OC3_SetConfig+0x66>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	4a20      	ldr	r2, [pc, #128]	@ (8006254 <TIM_OC3_SetConfig+0xe4>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d10d      	bne.n	80061f2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80061dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	68db      	ldr	r3, [r3, #12]
 80061e2:	021b      	lsls	r3, r3, #8
 80061e4:	697a      	ldr	r2, [r7, #20]
 80061e6:	4313      	orrs	r3, r2
 80061e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80061f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	4a16      	ldr	r2, [pc, #88]	@ (8006250 <TIM_OC3_SetConfig+0xe0>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d003      	beq.n	8006202 <TIM_OC3_SetConfig+0x92>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	4a15      	ldr	r2, [pc, #84]	@ (8006254 <TIM_OC3_SetConfig+0xe4>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d113      	bne.n	800622a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006208:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006210:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	695b      	ldr	r3, [r3, #20]
 8006216:	011b      	lsls	r3, r3, #4
 8006218:	693a      	ldr	r2, [r7, #16]
 800621a:	4313      	orrs	r3, r2
 800621c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	699b      	ldr	r3, [r3, #24]
 8006222:	011b      	lsls	r3, r3, #4
 8006224:	693a      	ldr	r2, [r7, #16]
 8006226:	4313      	orrs	r3, r2
 8006228:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	693a      	ldr	r2, [r7, #16]
 800622e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	68fa      	ldr	r2, [r7, #12]
 8006234:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	685a      	ldr	r2, [r3, #4]
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	697a      	ldr	r2, [r7, #20]
 8006242:	621a      	str	r2, [r3, #32]
}
 8006244:	bf00      	nop
 8006246:	371c      	adds	r7, #28
 8006248:	46bd      	mov	sp, r7
 800624a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624e:	4770      	bx	lr
 8006250:	40010000 	.word	0x40010000
 8006254:	40010400 	.word	0x40010400

08006258 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006258:	b480      	push	{r7}
 800625a:	b087      	sub	sp, #28
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
 8006260:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6a1b      	ldr	r3, [r3, #32]
 8006266:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6a1b      	ldr	r3, [r3, #32]
 800626c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	69db      	ldr	r3, [r3, #28]
 800627e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006286:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800628e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	021b      	lsls	r3, r3, #8
 8006296:	68fa      	ldr	r2, [r7, #12]
 8006298:	4313      	orrs	r3, r2
 800629a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800629c:	693b      	ldr	r3, [r7, #16]
 800629e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80062a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	689b      	ldr	r3, [r3, #8]
 80062a8:	031b      	lsls	r3, r3, #12
 80062aa:	693a      	ldr	r2, [r7, #16]
 80062ac:	4313      	orrs	r3, r2
 80062ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	4a12      	ldr	r2, [pc, #72]	@ (80062fc <TIM_OC4_SetConfig+0xa4>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d003      	beq.n	80062c0 <TIM_OC4_SetConfig+0x68>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	4a11      	ldr	r2, [pc, #68]	@ (8006300 <TIM_OC4_SetConfig+0xa8>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d109      	bne.n	80062d4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80062c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	695b      	ldr	r3, [r3, #20]
 80062cc:	019b      	lsls	r3, r3, #6
 80062ce:	697a      	ldr	r2, [r7, #20]
 80062d0:	4313      	orrs	r3, r2
 80062d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	697a      	ldr	r2, [r7, #20]
 80062d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	68fa      	ldr	r2, [r7, #12]
 80062de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	685a      	ldr	r2, [r3, #4]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	693a      	ldr	r2, [r7, #16]
 80062ec:	621a      	str	r2, [r3, #32]
}
 80062ee:	bf00      	nop
 80062f0:	371c      	adds	r7, #28
 80062f2:	46bd      	mov	sp, r7
 80062f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f8:	4770      	bx	lr
 80062fa:	bf00      	nop
 80062fc:	40010000 	.word	0x40010000
 8006300:	40010400 	.word	0x40010400

08006304 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006304:	b480      	push	{r7}
 8006306:	b087      	sub	sp, #28
 8006308:	af00      	add	r7, sp, #0
 800630a:	60f8      	str	r0, [r7, #12]
 800630c:	60b9      	str	r1, [r7, #8]
 800630e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	6a1b      	ldr	r3, [r3, #32]
 8006314:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	6a1b      	ldr	r3, [r3, #32]
 800631a:	f023 0201 	bic.w	r2, r3, #1
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	699b      	ldr	r3, [r3, #24]
 8006326:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006328:	693b      	ldr	r3, [r7, #16]
 800632a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800632e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	011b      	lsls	r3, r3, #4
 8006334:	693a      	ldr	r2, [r7, #16]
 8006336:	4313      	orrs	r3, r2
 8006338:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	f023 030a 	bic.w	r3, r3, #10
 8006340:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006342:	697a      	ldr	r2, [r7, #20]
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	4313      	orrs	r3, r2
 8006348:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	693a      	ldr	r2, [r7, #16]
 800634e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	697a      	ldr	r2, [r7, #20]
 8006354:	621a      	str	r2, [r3, #32]
}
 8006356:	bf00      	nop
 8006358:	371c      	adds	r7, #28
 800635a:	46bd      	mov	sp, r7
 800635c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006360:	4770      	bx	lr

08006362 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006362:	b480      	push	{r7}
 8006364:	b087      	sub	sp, #28
 8006366:	af00      	add	r7, sp, #0
 8006368:	60f8      	str	r0, [r7, #12]
 800636a:	60b9      	str	r1, [r7, #8]
 800636c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	6a1b      	ldr	r3, [r3, #32]
 8006372:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	6a1b      	ldr	r3, [r3, #32]
 8006378:	f023 0210 	bic.w	r2, r3, #16
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	699b      	ldr	r3, [r3, #24]
 8006384:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800638c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	031b      	lsls	r3, r3, #12
 8006392:	693a      	ldr	r2, [r7, #16]
 8006394:	4313      	orrs	r3, r2
 8006396:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800639e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	011b      	lsls	r3, r3, #4
 80063a4:	697a      	ldr	r2, [r7, #20]
 80063a6:	4313      	orrs	r3, r2
 80063a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	693a      	ldr	r2, [r7, #16]
 80063ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	697a      	ldr	r2, [r7, #20]
 80063b4:	621a      	str	r2, [r3, #32]
}
 80063b6:	bf00      	nop
 80063b8:	371c      	adds	r7, #28
 80063ba:	46bd      	mov	sp, r7
 80063bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c0:	4770      	bx	lr

080063c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80063c2:	b480      	push	{r7}
 80063c4:	b085      	sub	sp, #20
 80063c6:	af00      	add	r7, sp, #0
 80063c8:	6078      	str	r0, [r7, #4]
 80063ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	689b      	ldr	r3, [r3, #8]
 80063d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80063da:	683a      	ldr	r2, [r7, #0]
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	4313      	orrs	r3, r2
 80063e0:	f043 0307 	orr.w	r3, r3, #7
 80063e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	68fa      	ldr	r2, [r7, #12]
 80063ea:	609a      	str	r2, [r3, #8]
}
 80063ec:	bf00      	nop
 80063ee:	3714      	adds	r7, #20
 80063f0:	46bd      	mov	sp, r7
 80063f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f6:	4770      	bx	lr

080063f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80063f8:	b480      	push	{r7}
 80063fa:	b087      	sub	sp, #28
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	60f8      	str	r0, [r7, #12]
 8006400:	60b9      	str	r1, [r7, #8]
 8006402:	607a      	str	r2, [r7, #4]
 8006404:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	689b      	ldr	r3, [r3, #8]
 800640a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800640c:	697b      	ldr	r3, [r7, #20]
 800640e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006412:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	021a      	lsls	r2, r3, #8
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	431a      	orrs	r2, r3
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	4313      	orrs	r3, r2
 8006420:	697a      	ldr	r2, [r7, #20]
 8006422:	4313      	orrs	r3, r2
 8006424:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	697a      	ldr	r2, [r7, #20]
 800642a:	609a      	str	r2, [r3, #8]
}
 800642c:	bf00      	nop
 800642e:	371c      	adds	r7, #28
 8006430:	46bd      	mov	sp, r7
 8006432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006436:	4770      	bx	lr

08006438 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006438:	b480      	push	{r7}
 800643a:	b087      	sub	sp, #28
 800643c:	af00      	add	r7, sp, #0
 800643e:	60f8      	str	r0, [r7, #12]
 8006440:	60b9      	str	r1, [r7, #8]
 8006442:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	f003 031f 	and.w	r3, r3, #31
 800644a:	2201      	movs	r2, #1
 800644c:	fa02 f303 	lsl.w	r3, r2, r3
 8006450:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	6a1a      	ldr	r2, [r3, #32]
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	43db      	mvns	r3, r3
 800645a:	401a      	ands	r2, r3
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	6a1a      	ldr	r2, [r3, #32]
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	f003 031f 	and.w	r3, r3, #31
 800646a:	6879      	ldr	r1, [r7, #4]
 800646c:	fa01 f303 	lsl.w	r3, r1, r3
 8006470:	431a      	orrs	r2, r3
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	621a      	str	r2, [r3, #32]
}
 8006476:	bf00      	nop
 8006478:	371c      	adds	r7, #28
 800647a:	46bd      	mov	sp, r7
 800647c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006480:	4770      	bx	lr
	...

08006484 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006484:	b480      	push	{r7}
 8006486:	b085      	sub	sp, #20
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
 800648c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006494:	2b01      	cmp	r3, #1
 8006496:	d101      	bne.n	800649c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006498:	2302      	movs	r3, #2
 800649a:	e05a      	b.n	8006552 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2201      	movs	r2, #1
 80064a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2202      	movs	r2, #2
 80064a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	689b      	ldr	r3, [r3, #8]
 80064ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	68fa      	ldr	r2, [r7, #12]
 80064ca:	4313      	orrs	r3, r2
 80064cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	68fa      	ldr	r2, [r7, #12]
 80064d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a21      	ldr	r2, [pc, #132]	@ (8006560 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d022      	beq.n	8006526 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064e8:	d01d      	beq.n	8006526 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4a1d      	ldr	r2, [pc, #116]	@ (8006564 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d018      	beq.n	8006526 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a1b      	ldr	r2, [pc, #108]	@ (8006568 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d013      	beq.n	8006526 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4a1a      	ldr	r2, [pc, #104]	@ (800656c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d00e      	beq.n	8006526 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a18      	ldr	r2, [pc, #96]	@ (8006570 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d009      	beq.n	8006526 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a17      	ldr	r2, [pc, #92]	@ (8006574 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d004      	beq.n	8006526 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a15      	ldr	r2, [pc, #84]	@ (8006578 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d10c      	bne.n	8006540 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800652c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	68ba      	ldr	r2, [r7, #8]
 8006534:	4313      	orrs	r3, r2
 8006536:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	68ba      	ldr	r2, [r7, #8]
 800653e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2201      	movs	r2, #1
 8006544:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2200      	movs	r2, #0
 800654c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006550:	2300      	movs	r3, #0
}
 8006552:	4618      	mov	r0, r3
 8006554:	3714      	adds	r7, #20
 8006556:	46bd      	mov	sp, r7
 8006558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655c:	4770      	bx	lr
 800655e:	bf00      	nop
 8006560:	40010000 	.word	0x40010000
 8006564:	40000400 	.word	0x40000400
 8006568:	40000800 	.word	0x40000800
 800656c:	40000c00 	.word	0x40000c00
 8006570:	40010400 	.word	0x40010400
 8006574:	40014000 	.word	0x40014000
 8006578:	40001800 	.word	0x40001800

0800657c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800657c:	b480      	push	{r7}
 800657e:	b083      	sub	sp, #12
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006584:	bf00      	nop
 8006586:	370c      	adds	r7, #12
 8006588:	46bd      	mov	sp, r7
 800658a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658e:	4770      	bx	lr

08006590 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006590:	b480      	push	{r7}
 8006592:	b083      	sub	sp, #12
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006598:	bf00      	nop
 800659a:	370c      	adds	r7, #12
 800659c:	46bd      	mov	sp, r7
 800659e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a2:	4770      	bx	lr

080065a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b082      	sub	sp, #8
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d101      	bne.n	80065b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80065b2:	2301      	movs	r3, #1
 80065b4:	e042      	b.n	800663c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80065bc:	b2db      	uxtb	r3, r3
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d106      	bne.n	80065d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2200      	movs	r2, #0
 80065c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f7fc fb68 	bl	8002ca0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2224      	movs	r2, #36	@ 0x24
 80065d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	68da      	ldr	r2, [r3, #12]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80065e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	f000 fff5 	bl	80075d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	691a      	ldr	r2, [r3, #16]
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80065fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	695a      	ldr	r2, [r3, #20]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800660c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	68da      	ldr	r2, [r3, #12]
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800661c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2200      	movs	r2, #0
 8006622:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2220      	movs	r2, #32
 8006628:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2220      	movs	r2, #32
 8006630:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2200      	movs	r2, #0
 8006638:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800663a:	2300      	movs	r3, #0
}
 800663c:	4618      	mov	r0, r3
 800663e:	3708      	adds	r7, #8
 8006640:	46bd      	mov	sp, r7
 8006642:	bd80      	pop	{r7, pc}

08006644 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b08c      	sub	sp, #48	@ 0x30
 8006648:	af00      	add	r7, sp, #0
 800664a:	60f8      	str	r0, [r7, #12]
 800664c:	60b9      	str	r1, [r7, #8]
 800664e:	4613      	mov	r3, r2
 8006650:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006658:	b2db      	uxtb	r3, r3
 800665a:	2b20      	cmp	r3, #32
 800665c:	d162      	bne.n	8006724 <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d002      	beq.n	800666a <HAL_UART_Transmit_DMA+0x26>
 8006664:	88fb      	ldrh	r3, [r7, #6]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d101      	bne.n	800666e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800666a:	2301      	movs	r3, #1
 800666c:	e05b      	b.n	8006726 <HAL_UART_Transmit_DMA+0xe2>
    }

    huart->pTxBuffPtr = pData;
 800666e:	68ba      	ldr	r2, [r7, #8]
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	88fa      	ldrh	r2, [r7, #6]
 8006678:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	88fa      	ldrh	r2, [r7, #6]
 800667e:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	2200      	movs	r2, #0
 8006684:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	2221      	movs	r2, #33	@ 0x21
 800668a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006692:	4a27      	ldr	r2, [pc, #156]	@ (8006730 <HAL_UART_Transmit_DMA+0xec>)
 8006694:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800669a:	4a26      	ldr	r2, [pc, #152]	@ (8006734 <HAL_UART_Transmit_DMA+0xf0>)
 800669c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066a2:	4a25      	ldr	r2, [pc, #148]	@ (8006738 <HAL_UART_Transmit_DMA+0xf4>)
 80066a4:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066aa:	2200      	movs	r2, #0
 80066ac:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80066ae:	f107 0308 	add.w	r3, r7, #8
 80066b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size) != HAL_OK)
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80066b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066ba:	6819      	ldr	r1, [r3, #0]
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	3304      	adds	r3, #4
 80066c2:	461a      	mov	r2, r3
 80066c4:	88fb      	ldrh	r3, [r7, #6]
 80066c6:	f7fd fc67 	bl	8003f98 <HAL_DMA_Start_IT>
 80066ca:	4603      	mov	r3, r0
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d008      	beq.n	80066e2 <HAL_UART_Transmit_DMA+0x9e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	2210      	movs	r2, #16
 80066d4:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	2220      	movs	r2, #32
 80066da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_ERROR;
 80066de:	2301      	movs	r3, #1
 80066e0:	e021      	b.n	8006726 <HAL_UART_Transmit_DMA+0xe2>
    }
    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80066ea:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	3314      	adds	r3, #20
 80066f2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066f4:	69bb      	ldr	r3, [r7, #24]
 80066f6:	e853 3f00 	ldrex	r3, [r3]
 80066fa:	617b      	str	r3, [r7, #20]
   return(result);
 80066fc:	697b      	ldr	r3, [r7, #20]
 80066fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006702:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	3314      	adds	r3, #20
 800670a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800670c:	627a      	str	r2, [r7, #36]	@ 0x24
 800670e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006710:	6a39      	ldr	r1, [r7, #32]
 8006712:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006714:	e841 2300 	strex	r3, r2, [r1]
 8006718:	61fb      	str	r3, [r7, #28]
   return(result);
 800671a:	69fb      	ldr	r3, [r7, #28]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d1e5      	bne.n	80066ec <HAL_UART_Transmit_DMA+0xa8>

    return HAL_OK;
 8006720:	2300      	movs	r3, #0
 8006722:	e000      	b.n	8006726 <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 8006724:	2302      	movs	r3, #2
  }
}
 8006726:	4618      	mov	r0, r3
 8006728:	3730      	adds	r7, #48	@ 0x30
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}
 800672e:	bf00      	nop
 8006730:	08006e55 	.word	0x08006e55
 8006734:	08006eef 	.word	0x08006eef
 8006738:	08007073 	.word	0x08007073

0800673c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b084      	sub	sp, #16
 8006740:	af00      	add	r7, sp, #0
 8006742:	60f8      	str	r0, [r7, #12]
 8006744:	60b9      	str	r1, [r7, #8]
 8006746:	4613      	mov	r3, r2
 8006748:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006750:	b2db      	uxtb	r3, r3
 8006752:	2b20      	cmp	r3, #32
 8006754:	d112      	bne.n	800677c <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d002      	beq.n	8006762 <HAL_UART_Receive_DMA+0x26>
 800675c:	88fb      	ldrh	r3, [r7, #6]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d101      	bne.n	8006766 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006762:	2301      	movs	r3, #1
 8006764:	e00b      	b.n	800677e <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	2200      	movs	r2, #0
 800676a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800676c:	88fb      	ldrh	r3, [r7, #6]
 800676e:	461a      	mov	r2, r3
 8006770:	68b9      	ldr	r1, [r7, #8]
 8006772:	68f8      	ldr	r0, [r7, #12]
 8006774:	f000 fcc8 	bl	8007108 <UART_Start_Receive_DMA>
 8006778:	4603      	mov	r3, r0
 800677a:	e000      	b.n	800677e <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800677c:	2302      	movs	r3, #2
  }
}
 800677e:	4618      	mov	r0, r3
 8006780:	3710      	adds	r7, #16
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}

08006786 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8006786:	b580      	push	{r7, lr}
 8006788:	b090      	sub	sp, #64	@ 0x40
 800678a:	af00      	add	r7, sp, #0
 800678c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800678e:	2300      	movs	r3, #0
 8006790:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	695b      	ldr	r3, [r3, #20]
 8006798:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800679c:	2b80      	cmp	r3, #128	@ 0x80
 800679e:	bf0c      	ite	eq
 80067a0:	2301      	moveq	r3, #1
 80067a2:	2300      	movne	r3, #0
 80067a4:	b2db      	uxtb	r3, r3
 80067a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80067ae:	b2db      	uxtb	r3, r3
 80067b0:	2b21      	cmp	r3, #33	@ 0x21
 80067b2:	d128      	bne.n	8006806 <HAL_UART_DMAStop+0x80>
 80067b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d025      	beq.n	8006806 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	3314      	adds	r3, #20
 80067c0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067c4:	e853 3f00 	ldrex	r3, [r3]
 80067c8:	623b      	str	r3, [r7, #32]
   return(result);
 80067ca:	6a3b      	ldr	r3, [r7, #32]
 80067cc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80067d0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	3314      	adds	r3, #20
 80067d8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80067da:	633a      	str	r2, [r7, #48]	@ 0x30
 80067dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80067e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80067e2:	e841 2300 	strex	r3, r2, [r1]
 80067e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80067e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d1e5      	bne.n	80067ba <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d004      	beq.n	8006800 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067fa:	4618      	mov	r0, r3
 80067fc:	f7fd fc24 	bl	8004048 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	f000 fd27 	bl	8007254 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	695b      	ldr	r3, [r3, #20]
 800680c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006810:	2b40      	cmp	r3, #64	@ 0x40
 8006812:	bf0c      	ite	eq
 8006814:	2301      	moveq	r3, #1
 8006816:	2300      	movne	r3, #0
 8006818:	b2db      	uxtb	r3, r3
 800681a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006822:	b2db      	uxtb	r3, r3
 8006824:	2b22      	cmp	r3, #34	@ 0x22
 8006826:	d128      	bne.n	800687a <HAL_UART_DMAStop+0xf4>
 8006828:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800682a:	2b00      	cmp	r3, #0
 800682c:	d025      	beq.n	800687a <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	3314      	adds	r3, #20
 8006834:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006836:	693b      	ldr	r3, [r7, #16]
 8006838:	e853 3f00 	ldrex	r3, [r3]
 800683c:	60fb      	str	r3, [r7, #12]
   return(result);
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006844:	637b      	str	r3, [r7, #52]	@ 0x34
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	3314      	adds	r3, #20
 800684c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800684e:	61fa      	str	r2, [r7, #28]
 8006850:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006852:	69b9      	ldr	r1, [r7, #24]
 8006854:	69fa      	ldr	r2, [r7, #28]
 8006856:	e841 2300 	strex	r3, r2, [r1]
 800685a:	617b      	str	r3, [r7, #20]
   return(result);
 800685c:	697b      	ldr	r3, [r7, #20]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d1e5      	bne.n	800682e <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006866:	2b00      	cmp	r3, #0
 8006868:	d004      	beq.n	8006874 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800686e:	4618      	mov	r0, r3
 8006870:	f7fd fbea 	bl	8004048 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8006874:	6878      	ldr	r0, [r7, #4]
 8006876:	f000 fd15 	bl	80072a4 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800687a:	2300      	movs	r3, #0
}
 800687c:	4618      	mov	r0, r3
 800687e:	3740      	adds	r7, #64	@ 0x40
 8006880:	46bd      	mov	sp, r7
 8006882:	bd80      	pop	{r7, pc}

08006884 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b0ba      	sub	sp, #232	@ 0xe8
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	68db      	ldr	r3, [r3, #12]
 800689c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	695b      	ldr	r3, [r3, #20]
 80068a6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80068aa:	2300      	movs	r3, #0
 80068ac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80068b0:	2300      	movs	r3, #0
 80068b2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80068b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068ba:	f003 030f 	and.w	r3, r3, #15
 80068be:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80068c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d10f      	bne.n	80068ea <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80068ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068ce:	f003 0320 	and.w	r3, r3, #32
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d009      	beq.n	80068ea <HAL_UART_IRQHandler+0x66>
 80068d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068da:	f003 0320 	and.w	r3, r3, #32
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d003      	beq.n	80068ea <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f000 fdba 	bl	800745c <UART_Receive_IT>
      return;
 80068e8:	e273      	b.n	8006dd2 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80068ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	f000 80de 	beq.w	8006ab0 <HAL_UART_IRQHandler+0x22c>
 80068f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80068f8:	f003 0301 	and.w	r3, r3, #1
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d106      	bne.n	800690e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006900:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006904:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006908:	2b00      	cmp	r3, #0
 800690a:	f000 80d1 	beq.w	8006ab0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800690e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006912:	f003 0301 	and.w	r3, r3, #1
 8006916:	2b00      	cmp	r3, #0
 8006918:	d00b      	beq.n	8006932 <HAL_UART_IRQHandler+0xae>
 800691a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800691e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006922:	2b00      	cmp	r3, #0
 8006924:	d005      	beq.n	8006932 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800692a:	f043 0201 	orr.w	r2, r3, #1
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006932:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006936:	f003 0304 	and.w	r3, r3, #4
 800693a:	2b00      	cmp	r3, #0
 800693c:	d00b      	beq.n	8006956 <HAL_UART_IRQHandler+0xd2>
 800693e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006942:	f003 0301 	and.w	r3, r3, #1
 8006946:	2b00      	cmp	r3, #0
 8006948:	d005      	beq.n	8006956 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800694e:	f043 0202 	orr.w	r2, r3, #2
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006956:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800695a:	f003 0302 	and.w	r3, r3, #2
 800695e:	2b00      	cmp	r3, #0
 8006960:	d00b      	beq.n	800697a <HAL_UART_IRQHandler+0xf6>
 8006962:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006966:	f003 0301 	and.w	r3, r3, #1
 800696a:	2b00      	cmp	r3, #0
 800696c:	d005      	beq.n	800697a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006972:	f043 0204 	orr.w	r2, r3, #4
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800697a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800697e:	f003 0308 	and.w	r3, r3, #8
 8006982:	2b00      	cmp	r3, #0
 8006984:	d011      	beq.n	80069aa <HAL_UART_IRQHandler+0x126>
 8006986:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800698a:	f003 0320 	and.w	r3, r3, #32
 800698e:	2b00      	cmp	r3, #0
 8006990:	d105      	bne.n	800699e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006992:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006996:	f003 0301 	and.w	r3, r3, #1
 800699a:	2b00      	cmp	r3, #0
 800699c:	d005      	beq.n	80069aa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069a2:	f043 0208 	orr.w	r2, r3, #8
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	f000 820a 	beq.w	8006dc8 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80069b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069b8:	f003 0320 	and.w	r3, r3, #32
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d008      	beq.n	80069d2 <HAL_UART_IRQHandler+0x14e>
 80069c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80069c4:	f003 0320 	and.w	r3, r3, #32
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d002      	beq.n	80069d2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	f000 fd45 	bl	800745c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	695b      	ldr	r3, [r3, #20]
 80069d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069dc:	2b40      	cmp	r3, #64	@ 0x40
 80069de:	bf0c      	ite	eq
 80069e0:	2301      	moveq	r3, #1
 80069e2:	2300      	movne	r3, #0
 80069e4:	b2db      	uxtb	r3, r3
 80069e6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069ee:	f003 0308 	and.w	r3, r3, #8
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d103      	bne.n	80069fe <HAL_UART_IRQHandler+0x17a>
 80069f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d04f      	beq.n	8006a9e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f000 fc50 	bl	80072a4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	695b      	ldr	r3, [r3, #20]
 8006a0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a0e:	2b40      	cmp	r3, #64	@ 0x40
 8006a10:	d141      	bne.n	8006a96 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	3314      	adds	r3, #20
 8006a18:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006a20:	e853 3f00 	ldrex	r3, [r3]
 8006a24:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006a28:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006a2c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a30:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	3314      	adds	r3, #20
 8006a3a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006a3e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006a42:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a46:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006a4a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006a4e:	e841 2300 	strex	r3, r2, [r1]
 8006a52:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006a56:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d1d9      	bne.n	8006a12 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d013      	beq.n	8006a8e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a6a:	4a8a      	ldr	r2, [pc, #552]	@ (8006c94 <HAL_UART_IRQHandler+0x410>)
 8006a6c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a72:	4618      	mov	r0, r3
 8006a74:	f7fd fb58 	bl	8004128 <HAL_DMA_Abort_IT>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d016      	beq.n	8006aac <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a84:	687a      	ldr	r2, [r7, #4]
 8006a86:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006a88:	4610      	mov	r0, r2
 8006a8a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a8c:	e00e      	b.n	8006aac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f000 f9ca 	bl	8006e28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a94:	e00a      	b.n	8006aac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	f000 f9c6 	bl	8006e28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a9c:	e006      	b.n	8006aac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f000 f9c2 	bl	8006e28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006aaa:	e18d      	b.n	8006dc8 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006aac:	bf00      	nop
    return;
 8006aae:	e18b      	b.n	8006dc8 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ab4:	2b01      	cmp	r3, #1
 8006ab6:	f040 8167 	bne.w	8006d88 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006aba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006abe:	f003 0310 	and.w	r3, r3, #16
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	f000 8160 	beq.w	8006d88 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8006ac8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006acc:	f003 0310 	and.w	r3, r3, #16
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	f000 8159 	beq.w	8006d88 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	60bb      	str	r3, [r7, #8]
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	60bb      	str	r3, [r7, #8]
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	685b      	ldr	r3, [r3, #4]
 8006ae8:	60bb      	str	r3, [r7, #8]
 8006aea:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	695b      	ldr	r3, [r3, #20]
 8006af2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006af6:	2b40      	cmp	r3, #64	@ 0x40
 8006af8:	f040 80ce 	bne.w	8006c98 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	685b      	ldr	r3, [r3, #4]
 8006b04:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006b08:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	f000 80a9 	beq.w	8006c64 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006b16:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006b1a:	429a      	cmp	r2, r3
 8006b1c:	f080 80a2 	bcs.w	8006c64 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006b26:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b2c:	69db      	ldr	r3, [r3, #28]
 8006b2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b32:	f000 8088 	beq.w	8006c46 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	330c      	adds	r3, #12
 8006b3c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b40:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006b44:	e853 3f00 	ldrex	r3, [r3]
 8006b48:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006b4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006b50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006b54:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	330c      	adds	r3, #12
 8006b5e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006b62:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006b66:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b6a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006b6e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006b72:	e841 2300 	strex	r3, r2, [r1]
 8006b76:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006b7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d1d9      	bne.n	8006b36 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	3314      	adds	r3, #20
 8006b88:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b8a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006b8c:	e853 3f00 	ldrex	r3, [r3]
 8006b90:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006b92:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006b94:	f023 0301 	bic.w	r3, r3, #1
 8006b98:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	3314      	adds	r3, #20
 8006ba2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006ba6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006baa:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bac:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006bae:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006bb2:	e841 2300 	strex	r3, r2, [r1]
 8006bb6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006bb8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d1e1      	bne.n	8006b82 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	3314      	adds	r3, #20
 8006bc4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bc6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006bc8:	e853 3f00 	ldrex	r3, [r3]
 8006bcc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006bce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006bd0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006bd4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	3314      	adds	r3, #20
 8006bde:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006be2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006be4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006be6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006be8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006bea:	e841 2300 	strex	r3, r2, [r1]
 8006bee:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006bf0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d1e3      	bne.n	8006bbe <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2220      	movs	r2, #32
 8006bfa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2200      	movs	r2, #0
 8006c02:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	330c      	adds	r3, #12
 8006c0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c0e:	e853 3f00 	ldrex	r3, [r3]
 8006c12:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006c14:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c16:	f023 0310 	bic.w	r3, r3, #16
 8006c1a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	330c      	adds	r3, #12
 8006c24:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006c28:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006c2a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c2c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006c2e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006c30:	e841 2300 	strex	r3, r2, [r1]
 8006c34:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006c36:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d1e3      	bne.n	8006c04 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c40:	4618      	mov	r0, r3
 8006c42:	f7fd fa01 	bl	8004048 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2202      	movs	r2, #2
 8006c4a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006c54:	b29b      	uxth	r3, r3
 8006c56:	1ad3      	subs	r3, r2, r3
 8006c58:	b29b      	uxth	r3, r3
 8006c5a:	4619      	mov	r1, r3
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	f000 f8ed 	bl	8006e3c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8006c62:	e0b3      	b.n	8006dcc <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006c68:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006c6c:	429a      	cmp	r2, r3
 8006c6e:	f040 80ad 	bne.w	8006dcc <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c76:	69db      	ldr	r3, [r3, #28]
 8006c78:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c7c:	f040 80a6 	bne.w	8006dcc <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2202      	movs	r2, #2
 8006c84:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006c8a:	4619      	mov	r1, r3
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f000 f8d5 	bl	8006e3c <HAL_UARTEx_RxEventCallback>
      return;
 8006c92:	e09b      	b.n	8006dcc <HAL_UART_IRQHandler+0x548>
 8006c94:	0800736b 	.word	0x0800736b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006ca0:	b29b      	uxth	r3, r3
 8006ca2:	1ad3      	subs	r3, r2, r3
 8006ca4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006cac:	b29b      	uxth	r3, r3
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	f000 808e 	beq.w	8006dd0 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8006cb4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	f000 8089 	beq.w	8006dd0 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	330c      	adds	r3, #12
 8006cc4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cc8:	e853 3f00 	ldrex	r3, [r3]
 8006ccc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006cce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006cd0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006cd4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	330c      	adds	r3, #12
 8006cde:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006ce2:	647a      	str	r2, [r7, #68]	@ 0x44
 8006ce4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ce6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006ce8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006cea:	e841 2300 	strex	r3, r2, [r1]
 8006cee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006cf0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d1e3      	bne.n	8006cbe <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	3314      	adds	r3, #20
 8006cfc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d00:	e853 3f00 	ldrex	r3, [r3]
 8006d04:	623b      	str	r3, [r7, #32]
   return(result);
 8006d06:	6a3b      	ldr	r3, [r7, #32]
 8006d08:	f023 0301 	bic.w	r3, r3, #1
 8006d0c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	3314      	adds	r3, #20
 8006d16:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006d1a:	633a      	str	r2, [r7, #48]	@ 0x30
 8006d1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d1e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006d20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d22:	e841 2300 	strex	r3, r2, [r1]
 8006d26:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006d28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d1e3      	bne.n	8006cf6 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2220      	movs	r2, #32
 8006d32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2200      	movs	r2, #0
 8006d3a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	330c      	adds	r3, #12
 8006d42:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d44:	693b      	ldr	r3, [r7, #16]
 8006d46:	e853 3f00 	ldrex	r3, [r3]
 8006d4a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	f023 0310 	bic.w	r3, r3, #16
 8006d52:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	330c      	adds	r3, #12
 8006d5c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006d60:	61fa      	str	r2, [r7, #28]
 8006d62:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d64:	69b9      	ldr	r1, [r7, #24]
 8006d66:	69fa      	ldr	r2, [r7, #28]
 8006d68:	e841 2300 	strex	r3, r2, [r1]
 8006d6c:	617b      	str	r3, [r7, #20]
   return(result);
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d1e3      	bne.n	8006d3c <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2202      	movs	r2, #2
 8006d78:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006d7a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006d7e:	4619      	mov	r1, r3
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	f000 f85b 	bl	8006e3c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006d86:	e023      	b.n	8006dd0 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006d88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d009      	beq.n	8006da8 <HAL_UART_IRQHandler+0x524>
 8006d94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d003      	beq.n	8006da8 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8006da0:	6878      	ldr	r0, [r7, #4]
 8006da2:	f000 faf3 	bl	800738c <UART_Transmit_IT>
    return;
 8006da6:	e014      	b.n	8006dd2 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006da8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006dac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d00e      	beq.n	8006dd2 <HAL_UART_IRQHandler+0x54e>
 8006db4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006db8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d008      	beq.n	8006dd2 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f000 fb33 	bl	800742c <UART_EndTransmit_IT>
    return;
 8006dc6:	e004      	b.n	8006dd2 <HAL_UART_IRQHandler+0x54e>
    return;
 8006dc8:	bf00      	nop
 8006dca:	e002      	b.n	8006dd2 <HAL_UART_IRQHandler+0x54e>
      return;
 8006dcc:	bf00      	nop
 8006dce:	e000      	b.n	8006dd2 <HAL_UART_IRQHandler+0x54e>
      return;
 8006dd0:	bf00      	nop
  }
}
 8006dd2:	37e8      	adds	r7, #232	@ 0xe8
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bd80      	pop	{r7, pc}

08006dd8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b083      	sub	sp, #12
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006de0:	bf00      	nop
 8006de2:	370c      	adds	r7, #12
 8006de4:	46bd      	mov	sp, r7
 8006de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dea:	4770      	bx	lr

08006dec <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006dec:	b480      	push	{r7}
 8006dee:	b083      	sub	sp, #12
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006df4:	bf00      	nop
 8006df6:	370c      	adds	r7, #12
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfe:	4770      	bx	lr

08006e00 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b083      	sub	sp, #12
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006e08:	bf00      	nop
 8006e0a:	370c      	adds	r7, #12
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e12:	4770      	bx	lr

08006e14 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006e14:	b480      	push	{r7}
 8006e16:	b083      	sub	sp, #12
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006e1c:	bf00      	nop
 8006e1e:	370c      	adds	r7, #12
 8006e20:	46bd      	mov	sp, r7
 8006e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e26:	4770      	bx	lr

08006e28 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b083      	sub	sp, #12
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006e30:	bf00      	nop
 8006e32:	370c      	adds	r7, #12
 8006e34:	46bd      	mov	sp, r7
 8006e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3a:	4770      	bx	lr

08006e3c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b083      	sub	sp, #12
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
 8006e44:	460b      	mov	r3, r1
 8006e46:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006e48:	bf00      	nop
 8006e4a:	370c      	adds	r7, #12
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e52:	4770      	bx	lr

08006e54 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b090      	sub	sp, #64	@ 0x40
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e60:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d137      	bne.n	8006ee0 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8006e70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e72:	2200      	movs	r2, #0
 8006e74:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006e76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	3314      	adds	r3, #20
 8006e7c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e80:	e853 3f00 	ldrex	r3, [r3]
 8006e84:	623b      	str	r3, [r7, #32]
   return(result);
 8006e86:	6a3b      	ldr	r3, [r7, #32]
 8006e88:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006e8c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006e8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	3314      	adds	r3, #20
 8006e94:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006e96:	633a      	str	r2, [r7, #48]	@ 0x30
 8006e98:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e9a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006e9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e9e:	e841 2300 	strex	r3, r2, [r1]
 8006ea2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006ea4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d1e5      	bne.n	8006e76 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006eaa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	330c      	adds	r3, #12
 8006eb0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eb2:	693b      	ldr	r3, [r7, #16]
 8006eb4:	e853 3f00 	ldrex	r3, [r3]
 8006eb8:	60fb      	str	r3, [r7, #12]
   return(result);
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006ec0:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ec2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	330c      	adds	r3, #12
 8006ec8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006eca:	61fa      	str	r2, [r7, #28]
 8006ecc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ece:	69b9      	ldr	r1, [r7, #24]
 8006ed0:	69fa      	ldr	r2, [r7, #28]
 8006ed2:	e841 2300 	strex	r3, r2, [r1]
 8006ed6:	617b      	str	r3, [r7, #20]
   return(result);
 8006ed8:	697b      	ldr	r3, [r7, #20]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d1e5      	bne.n	8006eaa <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006ede:	e002      	b.n	8006ee6 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006ee0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8006ee2:	f7ff ff79 	bl	8006dd8 <HAL_UART_TxCpltCallback>
}
 8006ee6:	bf00      	nop
 8006ee8:	3740      	adds	r7, #64	@ 0x40
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}

08006eee <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006eee:	b580      	push	{r7, lr}
 8006ef0:	b084      	sub	sp, #16
 8006ef2:	af00      	add	r7, sp, #0
 8006ef4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006efa:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006efc:	68f8      	ldr	r0, [r7, #12]
 8006efe:	f7ff ff75 	bl	8006dec <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f02:	bf00      	nop
 8006f04:	3710      	adds	r7, #16
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bd80      	pop	{r7, pc}

08006f0a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006f0a:	b580      	push	{r7, lr}
 8006f0c:	b09c      	sub	sp, #112	@ 0x70
 8006f0e:	af00      	add	r7, sp, #0
 8006f10:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f16:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d172      	bne.n	800700c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006f26:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f28:	2200      	movs	r2, #0
 8006f2a:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f2c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	330c      	adds	r3, #12
 8006f32:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f36:	e853 3f00 	ldrex	r3, [r3]
 8006f3a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006f3c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006f3e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006f42:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006f44:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	330c      	adds	r3, #12
 8006f4a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006f4c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006f4e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f50:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006f52:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006f54:	e841 2300 	strex	r3, r2, [r1]
 8006f58:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006f5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d1e5      	bne.n	8006f2c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f60:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	3314      	adds	r3, #20
 8006f66:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f6a:	e853 3f00 	ldrex	r3, [r3]
 8006f6e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006f70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f72:	f023 0301 	bic.w	r3, r3, #1
 8006f76:	667b      	str	r3, [r7, #100]	@ 0x64
 8006f78:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	3314      	adds	r3, #20
 8006f7e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006f80:	647a      	str	r2, [r7, #68]	@ 0x44
 8006f82:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f84:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006f86:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006f88:	e841 2300 	strex	r3, r2, [r1]
 8006f8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006f8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d1e5      	bne.n	8006f60 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f94:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	3314      	adds	r3, #20
 8006f9a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f9e:	e853 3f00 	ldrex	r3, [r3]
 8006fa2:	623b      	str	r3, [r7, #32]
   return(result);
 8006fa4:	6a3b      	ldr	r3, [r7, #32]
 8006fa6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006faa:	663b      	str	r3, [r7, #96]	@ 0x60
 8006fac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	3314      	adds	r3, #20
 8006fb2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006fb4:	633a      	str	r2, [r7, #48]	@ 0x30
 8006fb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fb8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006fba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006fbc:	e841 2300 	strex	r3, r2, [r1]
 8006fc0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006fc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d1e5      	bne.n	8006f94 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006fc8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006fca:	2220      	movs	r2, #32
 8006fcc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fd0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006fd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fd4:	2b01      	cmp	r3, #1
 8006fd6:	d119      	bne.n	800700c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fd8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	330c      	adds	r3, #12
 8006fde:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fe0:	693b      	ldr	r3, [r7, #16]
 8006fe2:	e853 3f00 	ldrex	r3, [r3]
 8006fe6:	60fb      	str	r3, [r7, #12]
   return(result);
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	f023 0310 	bic.w	r3, r3, #16
 8006fee:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006ff0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	330c      	adds	r3, #12
 8006ff6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006ff8:	61fa      	str	r2, [r7, #28]
 8006ffa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ffc:	69b9      	ldr	r1, [r7, #24]
 8006ffe:	69fa      	ldr	r2, [r7, #28]
 8007000:	e841 2300 	strex	r3, r2, [r1]
 8007004:	617b      	str	r3, [r7, #20]
   return(result);
 8007006:	697b      	ldr	r3, [r7, #20]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d1e5      	bne.n	8006fd8 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800700c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800700e:	2200      	movs	r2, #0
 8007010:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007012:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007016:	2b01      	cmp	r3, #1
 8007018:	d106      	bne.n	8007028 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800701a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800701c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800701e:	4619      	mov	r1, r3
 8007020:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007022:	f7ff ff0b 	bl	8006e3c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007026:	e002      	b.n	800702e <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8007028:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800702a:	f7ff fee9 	bl	8006e00 <HAL_UART_RxCpltCallback>
}
 800702e:	bf00      	nop
 8007030:	3770      	adds	r7, #112	@ 0x70
 8007032:	46bd      	mov	sp, r7
 8007034:	bd80      	pop	{r7, pc}

08007036 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007036:	b580      	push	{r7, lr}
 8007038:	b084      	sub	sp, #16
 800703a:	af00      	add	r7, sp, #0
 800703c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007042:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	2201      	movs	r2, #1
 8007048:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800704e:	2b01      	cmp	r3, #1
 8007050:	d108      	bne.n	8007064 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007056:	085b      	lsrs	r3, r3, #1
 8007058:	b29b      	uxth	r3, r3
 800705a:	4619      	mov	r1, r3
 800705c:	68f8      	ldr	r0, [r7, #12]
 800705e:	f7ff feed 	bl	8006e3c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007062:	e002      	b.n	800706a <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8007064:	68f8      	ldr	r0, [r7, #12]
 8007066:	f7ff fed5 	bl	8006e14 <HAL_UART_RxHalfCpltCallback>
}
 800706a:	bf00      	nop
 800706c:	3710      	adds	r7, #16
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}

08007072 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007072:	b580      	push	{r7, lr}
 8007074:	b084      	sub	sp, #16
 8007076:	af00      	add	r7, sp, #0
 8007078:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800707a:	2300      	movs	r3, #0
 800707c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007082:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	695b      	ldr	r3, [r3, #20]
 800708a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800708e:	2b80      	cmp	r3, #128	@ 0x80
 8007090:	bf0c      	ite	eq
 8007092:	2301      	moveq	r3, #1
 8007094:	2300      	movne	r3, #0
 8007096:	b2db      	uxtb	r3, r3
 8007098:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80070a0:	b2db      	uxtb	r3, r3
 80070a2:	2b21      	cmp	r3, #33	@ 0x21
 80070a4:	d108      	bne.n	80070b8 <UART_DMAError+0x46>
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d005      	beq.n	80070b8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	2200      	movs	r2, #0
 80070b0:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80070b2:	68b8      	ldr	r0, [r7, #8]
 80070b4:	f000 f8ce 	bl	8007254 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	695b      	ldr	r3, [r3, #20]
 80070be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070c2:	2b40      	cmp	r3, #64	@ 0x40
 80070c4:	bf0c      	ite	eq
 80070c6:	2301      	moveq	r3, #1
 80070c8:	2300      	movne	r3, #0
 80070ca:	b2db      	uxtb	r3, r3
 80070cc:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80070d4:	b2db      	uxtb	r3, r3
 80070d6:	2b22      	cmp	r3, #34	@ 0x22
 80070d8:	d108      	bne.n	80070ec <UART_DMAError+0x7a>
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d005      	beq.n	80070ec <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	2200      	movs	r2, #0
 80070e4:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80070e6:	68b8      	ldr	r0, [r7, #8]
 80070e8:	f000 f8dc 	bl	80072a4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070f0:	f043 0210 	orr.w	r2, r3, #16
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80070f8:	68b8      	ldr	r0, [r7, #8]
 80070fa:	f7ff fe95 	bl	8006e28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80070fe:	bf00      	nop
 8007100:	3710      	adds	r7, #16
 8007102:	46bd      	mov	sp, r7
 8007104:	bd80      	pop	{r7, pc}
	...

08007108 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b098      	sub	sp, #96	@ 0x60
 800710c:	af00      	add	r7, sp, #0
 800710e:	60f8      	str	r0, [r7, #12]
 8007110:	60b9      	str	r1, [r7, #8]
 8007112:	4613      	mov	r3, r2
 8007114:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8007116:	68ba      	ldr	r2, [r7, #8]
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	88fa      	ldrh	r2, [r7, #6]
 8007120:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	2200      	movs	r2, #0
 8007126:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	2222      	movs	r2, #34	@ 0x22
 800712c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007134:	4a44      	ldr	r2, [pc, #272]	@ (8007248 <UART_Start_Receive_DMA+0x140>)
 8007136:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800713c:	4a43      	ldr	r2, [pc, #268]	@ (800724c <UART_Start_Receive_DMA+0x144>)
 800713e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007144:	4a42      	ldr	r2, [pc, #264]	@ (8007250 <UART_Start_Receive_DMA+0x148>)
 8007146:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800714c:	2200      	movs	r2, #0
 800714e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007150:	f107 0308 	add.w	r3, r7, #8
 8007154:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size) != HAL_OK)
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	3304      	adds	r3, #4
 8007160:	4619      	mov	r1, r3
 8007162:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007164:	681a      	ldr	r2, [r3, #0]
 8007166:	88fb      	ldrh	r3, [r7, #6]
 8007168:	f7fc ff16 	bl	8003f98 <HAL_DMA_Start_IT>
 800716c:	4603      	mov	r3, r0
 800716e:	2b00      	cmp	r3, #0
 8007170:	d008      	beq.n	8007184 <UART_Start_Receive_DMA+0x7c>
  {
    /* Set error code to DMA */
    huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	2210      	movs	r2, #16
 8007176:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->RxState to ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	2220      	movs	r2, #32
 800717c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_ERROR;
 8007180:	2301      	movs	r3, #1
 8007182:	e05d      	b.n	8007240 <UART_Start_Receive_DMA+0x138>
  }
  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007184:	2300      	movs	r3, #0
 8007186:	613b      	str	r3, [r7, #16]
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	613b      	str	r3, [r7, #16]
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	685b      	ldr	r3, [r3, #4]
 8007196:	613b      	str	r3, [r7, #16]
 8007198:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	691b      	ldr	r3, [r3, #16]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d019      	beq.n	80071d6 <UART_Start_Receive_DMA+0xce>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	330c      	adds	r3, #12
 80071a8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80071ac:	e853 3f00 	ldrex	r3, [r3]
 80071b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80071b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80071b8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	330c      	adds	r3, #12
 80071c0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80071c2:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80071c4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071c6:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80071c8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80071ca:	e841 2300 	strex	r3, r2, [r1]
 80071ce:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80071d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d1e5      	bne.n	80071a2 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	3314      	adds	r3, #20
 80071dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071e0:	e853 3f00 	ldrex	r3, [r3]
 80071e4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80071e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071e8:	f043 0301 	orr.w	r3, r3, #1
 80071ec:	657b      	str	r3, [r7, #84]	@ 0x54
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	3314      	adds	r3, #20
 80071f4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80071f6:	63ba      	str	r2, [r7, #56]	@ 0x38
 80071f8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071fa:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80071fc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80071fe:	e841 2300 	strex	r3, r2, [r1]
 8007202:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007204:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007206:	2b00      	cmp	r3, #0
 8007208:	d1e5      	bne.n	80071d6 <UART_Start_Receive_DMA+0xce>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	3314      	adds	r3, #20
 8007210:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007212:	69bb      	ldr	r3, [r7, #24]
 8007214:	e853 3f00 	ldrex	r3, [r3]
 8007218:	617b      	str	r3, [r7, #20]
   return(result);
 800721a:	697b      	ldr	r3, [r7, #20]
 800721c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007220:	653b      	str	r3, [r7, #80]	@ 0x50
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	3314      	adds	r3, #20
 8007228:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800722a:	627a      	str	r2, [r7, #36]	@ 0x24
 800722c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800722e:	6a39      	ldr	r1, [r7, #32]
 8007230:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007232:	e841 2300 	strex	r3, r2, [r1]
 8007236:	61fb      	str	r3, [r7, #28]
   return(result);
 8007238:	69fb      	ldr	r3, [r7, #28]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d1e5      	bne.n	800720a <UART_Start_Receive_DMA+0x102>

  return HAL_OK;
 800723e:	2300      	movs	r3, #0
}
 8007240:	4618      	mov	r0, r3
 8007242:	3760      	adds	r7, #96	@ 0x60
 8007244:	46bd      	mov	sp, r7
 8007246:	bd80      	pop	{r7, pc}
 8007248:	08006f0b 	.word	0x08006f0b
 800724c:	08007037 	.word	0x08007037
 8007250:	08007073 	.word	0x08007073

08007254 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007254:	b480      	push	{r7}
 8007256:	b089      	sub	sp, #36	@ 0x24
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	330c      	adds	r3, #12
 8007262:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	e853 3f00 	ldrex	r3, [r3]
 800726a:	60bb      	str	r3, [r7, #8]
   return(result);
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007272:	61fb      	str	r3, [r7, #28]
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	330c      	adds	r3, #12
 800727a:	69fa      	ldr	r2, [r7, #28]
 800727c:	61ba      	str	r2, [r7, #24]
 800727e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007280:	6979      	ldr	r1, [r7, #20]
 8007282:	69ba      	ldr	r2, [r7, #24]
 8007284:	e841 2300 	strex	r3, r2, [r1]
 8007288:	613b      	str	r3, [r7, #16]
   return(result);
 800728a:	693b      	ldr	r3, [r7, #16]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d1e5      	bne.n	800725c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2220      	movs	r2, #32
 8007294:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8007298:	bf00      	nop
 800729a:	3724      	adds	r7, #36	@ 0x24
 800729c:	46bd      	mov	sp, r7
 800729e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a2:	4770      	bx	lr

080072a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80072a4:	b480      	push	{r7}
 80072a6:	b095      	sub	sp, #84	@ 0x54
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	330c      	adds	r3, #12
 80072b2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072b6:	e853 3f00 	ldrex	r3, [r3]
 80072ba:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80072bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072be:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80072c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	330c      	adds	r3, #12
 80072ca:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80072cc:	643a      	str	r2, [r7, #64]	@ 0x40
 80072ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072d0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80072d2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80072d4:	e841 2300 	strex	r3, r2, [r1]
 80072d8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80072da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d1e5      	bne.n	80072ac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	3314      	adds	r3, #20
 80072e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072e8:	6a3b      	ldr	r3, [r7, #32]
 80072ea:	e853 3f00 	ldrex	r3, [r3]
 80072ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80072f0:	69fb      	ldr	r3, [r7, #28]
 80072f2:	f023 0301 	bic.w	r3, r3, #1
 80072f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	3314      	adds	r3, #20
 80072fe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007300:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007302:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007304:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007306:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007308:	e841 2300 	strex	r3, r2, [r1]
 800730c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800730e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007310:	2b00      	cmp	r3, #0
 8007312:	d1e5      	bne.n	80072e0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007318:	2b01      	cmp	r3, #1
 800731a:	d119      	bne.n	8007350 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	330c      	adds	r3, #12
 8007322:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	e853 3f00 	ldrex	r3, [r3]
 800732a:	60bb      	str	r3, [r7, #8]
   return(result);
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	f023 0310 	bic.w	r3, r3, #16
 8007332:	647b      	str	r3, [r7, #68]	@ 0x44
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	330c      	adds	r3, #12
 800733a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800733c:	61ba      	str	r2, [r7, #24]
 800733e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007340:	6979      	ldr	r1, [r7, #20]
 8007342:	69ba      	ldr	r2, [r7, #24]
 8007344:	e841 2300 	strex	r3, r2, [r1]
 8007348:	613b      	str	r3, [r7, #16]
   return(result);
 800734a:	693b      	ldr	r3, [r7, #16]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d1e5      	bne.n	800731c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2220      	movs	r2, #32
 8007354:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2200      	movs	r2, #0
 800735c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800735e:	bf00      	nop
 8007360:	3754      	adds	r7, #84	@ 0x54
 8007362:	46bd      	mov	sp, r7
 8007364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007368:	4770      	bx	lr

0800736a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800736a:	b580      	push	{r7, lr}
 800736c:	b084      	sub	sp, #16
 800736e:	af00      	add	r7, sp, #0
 8007370:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007376:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	2200      	movs	r2, #0
 800737c:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800737e:	68f8      	ldr	r0, [r7, #12]
 8007380:	f7ff fd52 	bl	8006e28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007384:	bf00      	nop
 8007386:	3710      	adds	r7, #16
 8007388:	46bd      	mov	sp, r7
 800738a:	bd80      	pop	{r7, pc}

0800738c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800738c:	b480      	push	{r7}
 800738e:	b085      	sub	sp, #20
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800739a:	b2db      	uxtb	r3, r3
 800739c:	2b21      	cmp	r3, #33	@ 0x21
 800739e:	d13e      	bne.n	800741e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	689b      	ldr	r3, [r3, #8]
 80073a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80073a8:	d114      	bne.n	80073d4 <UART_Transmit_IT+0x48>
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	691b      	ldr	r3, [r3, #16]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d110      	bne.n	80073d4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6a1b      	ldr	r3, [r3, #32]
 80073b6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	881b      	ldrh	r3, [r3, #0]
 80073bc:	461a      	mov	r2, r3
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80073c6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6a1b      	ldr	r3, [r3, #32]
 80073cc:	1c9a      	adds	r2, r3, #2
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	621a      	str	r2, [r3, #32]
 80073d2:	e008      	b.n	80073e6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6a1b      	ldr	r3, [r3, #32]
 80073d8:	1c59      	adds	r1, r3, #1
 80073da:	687a      	ldr	r2, [r7, #4]
 80073dc:	6211      	str	r1, [r2, #32]
 80073de:	781a      	ldrb	r2, [r3, #0]
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80073ea:	b29b      	uxth	r3, r3
 80073ec:	3b01      	subs	r3, #1
 80073ee:	b29b      	uxth	r3, r3
 80073f0:	687a      	ldr	r2, [r7, #4]
 80073f2:	4619      	mov	r1, r3
 80073f4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d10f      	bne.n	800741a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	68da      	ldr	r2, [r3, #12]
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007408:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	68da      	ldr	r2, [r3, #12]
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007418:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800741a:	2300      	movs	r3, #0
 800741c:	e000      	b.n	8007420 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800741e:	2302      	movs	r3, #2
  }
}
 8007420:	4618      	mov	r0, r3
 8007422:	3714      	adds	r7, #20
 8007424:	46bd      	mov	sp, r7
 8007426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742a:	4770      	bx	lr

0800742c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b082      	sub	sp, #8
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	68da      	ldr	r2, [r3, #12]
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007442:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2220      	movs	r2, #32
 8007448:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800744c:	6878      	ldr	r0, [r7, #4]
 800744e:	f7ff fcc3 	bl	8006dd8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007452:	2300      	movs	r3, #0
}
 8007454:	4618      	mov	r0, r3
 8007456:	3708      	adds	r7, #8
 8007458:	46bd      	mov	sp, r7
 800745a:	bd80      	pop	{r7, pc}

0800745c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b08c      	sub	sp, #48	@ 0x30
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8007464:	2300      	movs	r3, #0
 8007466:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8007468:	2300      	movs	r3, #0
 800746a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007472:	b2db      	uxtb	r3, r3
 8007474:	2b22      	cmp	r3, #34	@ 0x22
 8007476:	f040 80aa 	bne.w	80075ce <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	689b      	ldr	r3, [r3, #8]
 800747e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007482:	d115      	bne.n	80074b0 <UART_Receive_IT+0x54>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	691b      	ldr	r3, [r3, #16]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d111      	bne.n	80074b0 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007490:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	685b      	ldr	r3, [r3, #4]
 8007498:	b29b      	uxth	r3, r3
 800749a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800749e:	b29a      	uxth	r2, r3
 80074a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074a2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074a8:	1c9a      	adds	r2, r3, #2
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	629a      	str	r2, [r3, #40]	@ 0x28
 80074ae:	e024      	b.n	80074fa <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	689b      	ldr	r3, [r3, #8]
 80074ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80074be:	d007      	beq.n	80074d0 <UART_Receive_IT+0x74>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	689b      	ldr	r3, [r3, #8]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d10a      	bne.n	80074de <UART_Receive_IT+0x82>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	691b      	ldr	r3, [r3, #16]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d106      	bne.n	80074de <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	685b      	ldr	r3, [r3, #4]
 80074d6:	b2da      	uxtb	r2, r3
 80074d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074da:	701a      	strb	r2, [r3, #0]
 80074dc:	e008      	b.n	80074f0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	685b      	ldr	r3, [r3, #4]
 80074e4:	b2db      	uxtb	r3, r3
 80074e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80074ea:	b2da      	uxtb	r2, r3
 80074ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074ee:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074f4:	1c5a      	adds	r2, r3, #1
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80074fe:	b29b      	uxth	r3, r3
 8007500:	3b01      	subs	r3, #1
 8007502:	b29b      	uxth	r3, r3
 8007504:	687a      	ldr	r2, [r7, #4]
 8007506:	4619      	mov	r1, r3
 8007508:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800750a:	2b00      	cmp	r3, #0
 800750c:	d15d      	bne.n	80075ca <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	68da      	ldr	r2, [r3, #12]
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f022 0220 	bic.w	r2, r2, #32
 800751c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	68da      	ldr	r2, [r3, #12]
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800752c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	695a      	ldr	r2, [r3, #20]
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f022 0201 	bic.w	r2, r2, #1
 800753c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2220      	movs	r2, #32
 8007542:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2200      	movs	r2, #0
 800754a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007550:	2b01      	cmp	r3, #1
 8007552:	d135      	bne.n	80075c0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2200      	movs	r2, #0
 8007558:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	330c      	adds	r3, #12
 8007560:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007562:	697b      	ldr	r3, [r7, #20]
 8007564:	e853 3f00 	ldrex	r3, [r3]
 8007568:	613b      	str	r3, [r7, #16]
   return(result);
 800756a:	693b      	ldr	r3, [r7, #16]
 800756c:	f023 0310 	bic.w	r3, r3, #16
 8007570:	627b      	str	r3, [r7, #36]	@ 0x24
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	330c      	adds	r3, #12
 8007578:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800757a:	623a      	str	r2, [r7, #32]
 800757c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800757e:	69f9      	ldr	r1, [r7, #28]
 8007580:	6a3a      	ldr	r2, [r7, #32]
 8007582:	e841 2300 	strex	r3, r2, [r1]
 8007586:	61bb      	str	r3, [r7, #24]
   return(result);
 8007588:	69bb      	ldr	r3, [r7, #24]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d1e5      	bne.n	800755a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f003 0310 	and.w	r3, r3, #16
 8007598:	2b10      	cmp	r3, #16
 800759a:	d10a      	bne.n	80075b2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800759c:	2300      	movs	r3, #0
 800759e:	60fb      	str	r3, [r7, #12]
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	60fb      	str	r3, [r7, #12]
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	685b      	ldr	r3, [r3, #4]
 80075ae:	60fb      	str	r3, [r7, #12]
 80075b0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80075b6:	4619      	mov	r1, r3
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	f7ff fc3f 	bl	8006e3c <HAL_UARTEx_RxEventCallback>
 80075be:	e002      	b.n	80075c6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f7ff fc1d 	bl	8006e00 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80075c6:	2300      	movs	r3, #0
 80075c8:	e002      	b.n	80075d0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80075ca:	2300      	movs	r3, #0
 80075cc:	e000      	b.n	80075d0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80075ce:	2302      	movs	r3, #2
  }
}
 80075d0:	4618      	mov	r0, r3
 80075d2:	3730      	adds	r7, #48	@ 0x30
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd80      	pop	{r7, pc}

080075d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80075d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80075dc:	b0c0      	sub	sp, #256	@ 0x100
 80075de:	af00      	add	r7, sp, #0
 80075e0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80075e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	691b      	ldr	r3, [r3, #16]
 80075ec:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80075f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075f4:	68d9      	ldr	r1, [r3, #12]
 80075f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075fa:	681a      	ldr	r2, [r3, #0]
 80075fc:	ea40 0301 	orr.w	r3, r0, r1
 8007600:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007602:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007606:	689a      	ldr	r2, [r3, #8]
 8007608:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800760c:	691b      	ldr	r3, [r3, #16]
 800760e:	431a      	orrs	r2, r3
 8007610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007614:	695b      	ldr	r3, [r3, #20]
 8007616:	431a      	orrs	r2, r3
 8007618:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800761c:	69db      	ldr	r3, [r3, #28]
 800761e:	4313      	orrs	r3, r2
 8007620:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007624:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	68db      	ldr	r3, [r3, #12]
 800762c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007630:	f021 010c 	bic.w	r1, r1, #12
 8007634:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007638:	681a      	ldr	r2, [r3, #0]
 800763a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800763e:	430b      	orrs	r3, r1
 8007640:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007642:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	695b      	ldr	r3, [r3, #20]
 800764a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800764e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007652:	6999      	ldr	r1, [r3, #24]
 8007654:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007658:	681a      	ldr	r2, [r3, #0]
 800765a:	ea40 0301 	orr.w	r3, r0, r1
 800765e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007660:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007664:	681a      	ldr	r2, [r3, #0]
 8007666:	4b8f      	ldr	r3, [pc, #572]	@ (80078a4 <UART_SetConfig+0x2cc>)
 8007668:	429a      	cmp	r2, r3
 800766a:	d005      	beq.n	8007678 <UART_SetConfig+0xa0>
 800766c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007670:	681a      	ldr	r2, [r3, #0]
 8007672:	4b8d      	ldr	r3, [pc, #564]	@ (80078a8 <UART_SetConfig+0x2d0>)
 8007674:	429a      	cmp	r2, r3
 8007676:	d104      	bne.n	8007682 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007678:	f7fd fc42 	bl	8004f00 <HAL_RCC_GetPCLK2Freq>
 800767c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007680:	e003      	b.n	800768a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007682:	f7fd fc29 	bl	8004ed8 <HAL_RCC_GetPCLK1Freq>
 8007686:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800768a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800768e:	69db      	ldr	r3, [r3, #28]
 8007690:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007694:	f040 810c 	bne.w	80078b0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007698:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800769c:	2200      	movs	r2, #0
 800769e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80076a2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80076a6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80076aa:	4622      	mov	r2, r4
 80076ac:	462b      	mov	r3, r5
 80076ae:	1891      	adds	r1, r2, r2
 80076b0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80076b2:	415b      	adcs	r3, r3
 80076b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80076b6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80076ba:	4621      	mov	r1, r4
 80076bc:	eb12 0801 	adds.w	r8, r2, r1
 80076c0:	4629      	mov	r1, r5
 80076c2:	eb43 0901 	adc.w	r9, r3, r1
 80076c6:	f04f 0200 	mov.w	r2, #0
 80076ca:	f04f 0300 	mov.w	r3, #0
 80076ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80076d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80076d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80076da:	4690      	mov	r8, r2
 80076dc:	4699      	mov	r9, r3
 80076de:	4623      	mov	r3, r4
 80076e0:	eb18 0303 	adds.w	r3, r8, r3
 80076e4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80076e8:	462b      	mov	r3, r5
 80076ea:	eb49 0303 	adc.w	r3, r9, r3
 80076ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80076f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076f6:	685b      	ldr	r3, [r3, #4]
 80076f8:	2200      	movs	r2, #0
 80076fa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80076fe:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007702:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007706:	460b      	mov	r3, r1
 8007708:	18db      	adds	r3, r3, r3
 800770a:	653b      	str	r3, [r7, #80]	@ 0x50
 800770c:	4613      	mov	r3, r2
 800770e:	eb42 0303 	adc.w	r3, r2, r3
 8007712:	657b      	str	r3, [r7, #84]	@ 0x54
 8007714:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007718:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800771c:	f7f9 face 	bl	8000cbc <__aeabi_uldivmod>
 8007720:	4602      	mov	r2, r0
 8007722:	460b      	mov	r3, r1
 8007724:	4b61      	ldr	r3, [pc, #388]	@ (80078ac <UART_SetConfig+0x2d4>)
 8007726:	fba3 2302 	umull	r2, r3, r3, r2
 800772a:	095b      	lsrs	r3, r3, #5
 800772c:	011c      	lsls	r4, r3, #4
 800772e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007732:	2200      	movs	r2, #0
 8007734:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007738:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800773c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007740:	4642      	mov	r2, r8
 8007742:	464b      	mov	r3, r9
 8007744:	1891      	adds	r1, r2, r2
 8007746:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007748:	415b      	adcs	r3, r3
 800774a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800774c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007750:	4641      	mov	r1, r8
 8007752:	eb12 0a01 	adds.w	sl, r2, r1
 8007756:	4649      	mov	r1, r9
 8007758:	eb43 0b01 	adc.w	fp, r3, r1
 800775c:	f04f 0200 	mov.w	r2, #0
 8007760:	f04f 0300 	mov.w	r3, #0
 8007764:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007768:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800776c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007770:	4692      	mov	sl, r2
 8007772:	469b      	mov	fp, r3
 8007774:	4643      	mov	r3, r8
 8007776:	eb1a 0303 	adds.w	r3, sl, r3
 800777a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800777e:	464b      	mov	r3, r9
 8007780:	eb4b 0303 	adc.w	r3, fp, r3
 8007784:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007788:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800778c:	685b      	ldr	r3, [r3, #4]
 800778e:	2200      	movs	r2, #0
 8007790:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007794:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007798:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800779c:	460b      	mov	r3, r1
 800779e:	18db      	adds	r3, r3, r3
 80077a0:	643b      	str	r3, [r7, #64]	@ 0x40
 80077a2:	4613      	mov	r3, r2
 80077a4:	eb42 0303 	adc.w	r3, r2, r3
 80077a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80077aa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80077ae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80077b2:	f7f9 fa83 	bl	8000cbc <__aeabi_uldivmod>
 80077b6:	4602      	mov	r2, r0
 80077b8:	460b      	mov	r3, r1
 80077ba:	4611      	mov	r1, r2
 80077bc:	4b3b      	ldr	r3, [pc, #236]	@ (80078ac <UART_SetConfig+0x2d4>)
 80077be:	fba3 2301 	umull	r2, r3, r3, r1
 80077c2:	095b      	lsrs	r3, r3, #5
 80077c4:	2264      	movs	r2, #100	@ 0x64
 80077c6:	fb02 f303 	mul.w	r3, r2, r3
 80077ca:	1acb      	subs	r3, r1, r3
 80077cc:	00db      	lsls	r3, r3, #3
 80077ce:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80077d2:	4b36      	ldr	r3, [pc, #216]	@ (80078ac <UART_SetConfig+0x2d4>)
 80077d4:	fba3 2302 	umull	r2, r3, r3, r2
 80077d8:	095b      	lsrs	r3, r3, #5
 80077da:	005b      	lsls	r3, r3, #1
 80077dc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80077e0:	441c      	add	r4, r3
 80077e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80077e6:	2200      	movs	r2, #0
 80077e8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80077ec:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80077f0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80077f4:	4642      	mov	r2, r8
 80077f6:	464b      	mov	r3, r9
 80077f8:	1891      	adds	r1, r2, r2
 80077fa:	63b9      	str	r1, [r7, #56]	@ 0x38
 80077fc:	415b      	adcs	r3, r3
 80077fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007800:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007804:	4641      	mov	r1, r8
 8007806:	1851      	adds	r1, r2, r1
 8007808:	6339      	str	r1, [r7, #48]	@ 0x30
 800780a:	4649      	mov	r1, r9
 800780c:	414b      	adcs	r3, r1
 800780e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007810:	f04f 0200 	mov.w	r2, #0
 8007814:	f04f 0300 	mov.w	r3, #0
 8007818:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800781c:	4659      	mov	r1, fp
 800781e:	00cb      	lsls	r3, r1, #3
 8007820:	4651      	mov	r1, sl
 8007822:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007826:	4651      	mov	r1, sl
 8007828:	00ca      	lsls	r2, r1, #3
 800782a:	4610      	mov	r0, r2
 800782c:	4619      	mov	r1, r3
 800782e:	4603      	mov	r3, r0
 8007830:	4642      	mov	r2, r8
 8007832:	189b      	adds	r3, r3, r2
 8007834:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007838:	464b      	mov	r3, r9
 800783a:	460a      	mov	r2, r1
 800783c:	eb42 0303 	adc.w	r3, r2, r3
 8007840:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007844:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007848:	685b      	ldr	r3, [r3, #4]
 800784a:	2200      	movs	r2, #0
 800784c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007850:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007854:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007858:	460b      	mov	r3, r1
 800785a:	18db      	adds	r3, r3, r3
 800785c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800785e:	4613      	mov	r3, r2
 8007860:	eb42 0303 	adc.w	r3, r2, r3
 8007864:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007866:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800786a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800786e:	f7f9 fa25 	bl	8000cbc <__aeabi_uldivmod>
 8007872:	4602      	mov	r2, r0
 8007874:	460b      	mov	r3, r1
 8007876:	4b0d      	ldr	r3, [pc, #52]	@ (80078ac <UART_SetConfig+0x2d4>)
 8007878:	fba3 1302 	umull	r1, r3, r3, r2
 800787c:	095b      	lsrs	r3, r3, #5
 800787e:	2164      	movs	r1, #100	@ 0x64
 8007880:	fb01 f303 	mul.w	r3, r1, r3
 8007884:	1ad3      	subs	r3, r2, r3
 8007886:	00db      	lsls	r3, r3, #3
 8007888:	3332      	adds	r3, #50	@ 0x32
 800788a:	4a08      	ldr	r2, [pc, #32]	@ (80078ac <UART_SetConfig+0x2d4>)
 800788c:	fba2 2303 	umull	r2, r3, r2, r3
 8007890:	095b      	lsrs	r3, r3, #5
 8007892:	f003 0207 	and.w	r2, r3, #7
 8007896:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	4422      	add	r2, r4
 800789e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80078a0:	e106      	b.n	8007ab0 <UART_SetConfig+0x4d8>
 80078a2:	bf00      	nop
 80078a4:	40011000 	.word	0x40011000
 80078a8:	40011400 	.word	0x40011400
 80078ac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80078b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80078b4:	2200      	movs	r2, #0
 80078b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80078ba:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80078be:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80078c2:	4642      	mov	r2, r8
 80078c4:	464b      	mov	r3, r9
 80078c6:	1891      	adds	r1, r2, r2
 80078c8:	6239      	str	r1, [r7, #32]
 80078ca:	415b      	adcs	r3, r3
 80078cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80078ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80078d2:	4641      	mov	r1, r8
 80078d4:	1854      	adds	r4, r2, r1
 80078d6:	4649      	mov	r1, r9
 80078d8:	eb43 0501 	adc.w	r5, r3, r1
 80078dc:	f04f 0200 	mov.w	r2, #0
 80078e0:	f04f 0300 	mov.w	r3, #0
 80078e4:	00eb      	lsls	r3, r5, #3
 80078e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80078ea:	00e2      	lsls	r2, r4, #3
 80078ec:	4614      	mov	r4, r2
 80078ee:	461d      	mov	r5, r3
 80078f0:	4643      	mov	r3, r8
 80078f2:	18e3      	adds	r3, r4, r3
 80078f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80078f8:	464b      	mov	r3, r9
 80078fa:	eb45 0303 	adc.w	r3, r5, r3
 80078fe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007902:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007906:	685b      	ldr	r3, [r3, #4]
 8007908:	2200      	movs	r2, #0
 800790a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800790e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007912:	f04f 0200 	mov.w	r2, #0
 8007916:	f04f 0300 	mov.w	r3, #0
 800791a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800791e:	4629      	mov	r1, r5
 8007920:	008b      	lsls	r3, r1, #2
 8007922:	4621      	mov	r1, r4
 8007924:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007928:	4621      	mov	r1, r4
 800792a:	008a      	lsls	r2, r1, #2
 800792c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007930:	f7f9 f9c4 	bl	8000cbc <__aeabi_uldivmod>
 8007934:	4602      	mov	r2, r0
 8007936:	460b      	mov	r3, r1
 8007938:	4b60      	ldr	r3, [pc, #384]	@ (8007abc <UART_SetConfig+0x4e4>)
 800793a:	fba3 2302 	umull	r2, r3, r3, r2
 800793e:	095b      	lsrs	r3, r3, #5
 8007940:	011c      	lsls	r4, r3, #4
 8007942:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007946:	2200      	movs	r2, #0
 8007948:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800794c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007950:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007954:	4642      	mov	r2, r8
 8007956:	464b      	mov	r3, r9
 8007958:	1891      	adds	r1, r2, r2
 800795a:	61b9      	str	r1, [r7, #24]
 800795c:	415b      	adcs	r3, r3
 800795e:	61fb      	str	r3, [r7, #28]
 8007960:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007964:	4641      	mov	r1, r8
 8007966:	1851      	adds	r1, r2, r1
 8007968:	6139      	str	r1, [r7, #16]
 800796a:	4649      	mov	r1, r9
 800796c:	414b      	adcs	r3, r1
 800796e:	617b      	str	r3, [r7, #20]
 8007970:	f04f 0200 	mov.w	r2, #0
 8007974:	f04f 0300 	mov.w	r3, #0
 8007978:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800797c:	4659      	mov	r1, fp
 800797e:	00cb      	lsls	r3, r1, #3
 8007980:	4651      	mov	r1, sl
 8007982:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007986:	4651      	mov	r1, sl
 8007988:	00ca      	lsls	r2, r1, #3
 800798a:	4610      	mov	r0, r2
 800798c:	4619      	mov	r1, r3
 800798e:	4603      	mov	r3, r0
 8007990:	4642      	mov	r2, r8
 8007992:	189b      	adds	r3, r3, r2
 8007994:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007998:	464b      	mov	r3, r9
 800799a:	460a      	mov	r2, r1
 800799c:	eb42 0303 	adc.w	r3, r2, r3
 80079a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80079a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079a8:	685b      	ldr	r3, [r3, #4]
 80079aa:	2200      	movs	r2, #0
 80079ac:	67bb      	str	r3, [r7, #120]	@ 0x78
 80079ae:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80079b0:	f04f 0200 	mov.w	r2, #0
 80079b4:	f04f 0300 	mov.w	r3, #0
 80079b8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80079bc:	4649      	mov	r1, r9
 80079be:	008b      	lsls	r3, r1, #2
 80079c0:	4641      	mov	r1, r8
 80079c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80079c6:	4641      	mov	r1, r8
 80079c8:	008a      	lsls	r2, r1, #2
 80079ca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80079ce:	f7f9 f975 	bl	8000cbc <__aeabi_uldivmod>
 80079d2:	4602      	mov	r2, r0
 80079d4:	460b      	mov	r3, r1
 80079d6:	4611      	mov	r1, r2
 80079d8:	4b38      	ldr	r3, [pc, #224]	@ (8007abc <UART_SetConfig+0x4e4>)
 80079da:	fba3 2301 	umull	r2, r3, r3, r1
 80079de:	095b      	lsrs	r3, r3, #5
 80079e0:	2264      	movs	r2, #100	@ 0x64
 80079e2:	fb02 f303 	mul.w	r3, r2, r3
 80079e6:	1acb      	subs	r3, r1, r3
 80079e8:	011b      	lsls	r3, r3, #4
 80079ea:	3332      	adds	r3, #50	@ 0x32
 80079ec:	4a33      	ldr	r2, [pc, #204]	@ (8007abc <UART_SetConfig+0x4e4>)
 80079ee:	fba2 2303 	umull	r2, r3, r2, r3
 80079f2:	095b      	lsrs	r3, r3, #5
 80079f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80079f8:	441c      	add	r4, r3
 80079fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80079fe:	2200      	movs	r2, #0
 8007a00:	673b      	str	r3, [r7, #112]	@ 0x70
 8007a02:	677a      	str	r2, [r7, #116]	@ 0x74
 8007a04:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007a08:	4642      	mov	r2, r8
 8007a0a:	464b      	mov	r3, r9
 8007a0c:	1891      	adds	r1, r2, r2
 8007a0e:	60b9      	str	r1, [r7, #8]
 8007a10:	415b      	adcs	r3, r3
 8007a12:	60fb      	str	r3, [r7, #12]
 8007a14:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007a18:	4641      	mov	r1, r8
 8007a1a:	1851      	adds	r1, r2, r1
 8007a1c:	6039      	str	r1, [r7, #0]
 8007a1e:	4649      	mov	r1, r9
 8007a20:	414b      	adcs	r3, r1
 8007a22:	607b      	str	r3, [r7, #4]
 8007a24:	f04f 0200 	mov.w	r2, #0
 8007a28:	f04f 0300 	mov.w	r3, #0
 8007a2c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007a30:	4659      	mov	r1, fp
 8007a32:	00cb      	lsls	r3, r1, #3
 8007a34:	4651      	mov	r1, sl
 8007a36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007a3a:	4651      	mov	r1, sl
 8007a3c:	00ca      	lsls	r2, r1, #3
 8007a3e:	4610      	mov	r0, r2
 8007a40:	4619      	mov	r1, r3
 8007a42:	4603      	mov	r3, r0
 8007a44:	4642      	mov	r2, r8
 8007a46:	189b      	adds	r3, r3, r2
 8007a48:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007a4a:	464b      	mov	r3, r9
 8007a4c:	460a      	mov	r2, r1
 8007a4e:	eb42 0303 	adc.w	r3, r2, r3
 8007a52:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a58:	685b      	ldr	r3, [r3, #4]
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	663b      	str	r3, [r7, #96]	@ 0x60
 8007a5e:	667a      	str	r2, [r7, #100]	@ 0x64
 8007a60:	f04f 0200 	mov.w	r2, #0
 8007a64:	f04f 0300 	mov.w	r3, #0
 8007a68:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007a6c:	4649      	mov	r1, r9
 8007a6e:	008b      	lsls	r3, r1, #2
 8007a70:	4641      	mov	r1, r8
 8007a72:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007a76:	4641      	mov	r1, r8
 8007a78:	008a      	lsls	r2, r1, #2
 8007a7a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007a7e:	f7f9 f91d 	bl	8000cbc <__aeabi_uldivmod>
 8007a82:	4602      	mov	r2, r0
 8007a84:	460b      	mov	r3, r1
 8007a86:	4b0d      	ldr	r3, [pc, #52]	@ (8007abc <UART_SetConfig+0x4e4>)
 8007a88:	fba3 1302 	umull	r1, r3, r3, r2
 8007a8c:	095b      	lsrs	r3, r3, #5
 8007a8e:	2164      	movs	r1, #100	@ 0x64
 8007a90:	fb01 f303 	mul.w	r3, r1, r3
 8007a94:	1ad3      	subs	r3, r2, r3
 8007a96:	011b      	lsls	r3, r3, #4
 8007a98:	3332      	adds	r3, #50	@ 0x32
 8007a9a:	4a08      	ldr	r2, [pc, #32]	@ (8007abc <UART_SetConfig+0x4e4>)
 8007a9c:	fba2 2303 	umull	r2, r3, r2, r3
 8007aa0:	095b      	lsrs	r3, r3, #5
 8007aa2:	f003 020f 	and.w	r2, r3, #15
 8007aa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	4422      	add	r2, r4
 8007aae:	609a      	str	r2, [r3, #8]
}
 8007ab0:	bf00      	nop
 8007ab2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007abc:	51eb851f 	.word	0x51eb851f

08007ac0 <__NVIC_SetPriority>:
{
 8007ac0:	b480      	push	{r7}
 8007ac2:	b083      	sub	sp, #12
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	6039      	str	r1, [r7, #0]
 8007aca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007acc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	db0a      	blt.n	8007aea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	b2da      	uxtb	r2, r3
 8007ad8:	490c      	ldr	r1, [pc, #48]	@ (8007b0c <__NVIC_SetPriority+0x4c>)
 8007ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ade:	0112      	lsls	r2, r2, #4
 8007ae0:	b2d2      	uxtb	r2, r2
 8007ae2:	440b      	add	r3, r1
 8007ae4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007ae8:	e00a      	b.n	8007b00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	b2da      	uxtb	r2, r3
 8007aee:	4908      	ldr	r1, [pc, #32]	@ (8007b10 <__NVIC_SetPriority+0x50>)
 8007af0:	79fb      	ldrb	r3, [r7, #7]
 8007af2:	f003 030f 	and.w	r3, r3, #15
 8007af6:	3b04      	subs	r3, #4
 8007af8:	0112      	lsls	r2, r2, #4
 8007afa:	b2d2      	uxtb	r2, r2
 8007afc:	440b      	add	r3, r1
 8007afe:	761a      	strb	r2, [r3, #24]
}
 8007b00:	bf00      	nop
 8007b02:	370c      	adds	r7, #12
 8007b04:	46bd      	mov	sp, r7
 8007b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0a:	4770      	bx	lr
 8007b0c:	e000e100 	.word	0xe000e100
 8007b10:	e000ed00 	.word	0xe000ed00

08007b14 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007b14:	b580      	push	{r7, lr}
 8007b16:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007b18:	4b05      	ldr	r3, [pc, #20]	@ (8007b30 <SysTick_Handler+0x1c>)
 8007b1a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007b1c:	f001 fd40 	bl	80095a0 <xTaskGetSchedulerState>
 8007b20:	4603      	mov	r3, r0
 8007b22:	2b01      	cmp	r3, #1
 8007b24:	d001      	beq.n	8007b2a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007b26:	f002 fb37 	bl	800a198 <xPortSysTickHandler>
  }
}
 8007b2a:	bf00      	nop
 8007b2c:	bd80      	pop	{r7, pc}
 8007b2e:	bf00      	nop
 8007b30:	e000e010 	.word	0xe000e010

08007b34 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007b34:	b580      	push	{r7, lr}
 8007b36:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007b38:	2100      	movs	r1, #0
 8007b3a:	f06f 0004 	mvn.w	r0, #4
 8007b3e:	f7ff ffbf 	bl	8007ac0 <__NVIC_SetPriority>
#endif
}
 8007b42:	bf00      	nop
 8007b44:	bd80      	pop	{r7, pc}
	...

08007b48 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007b48:	b480      	push	{r7}
 8007b4a:	b083      	sub	sp, #12
 8007b4c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007b4e:	f3ef 8305 	mrs	r3, IPSR
 8007b52:	603b      	str	r3, [r7, #0]
  return(result);
 8007b54:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d003      	beq.n	8007b62 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007b5a:	f06f 0305 	mvn.w	r3, #5
 8007b5e:	607b      	str	r3, [r7, #4]
 8007b60:	e00c      	b.n	8007b7c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007b62:	4b0a      	ldr	r3, [pc, #40]	@ (8007b8c <osKernelInitialize+0x44>)
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d105      	bne.n	8007b76 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007b6a:	4b08      	ldr	r3, [pc, #32]	@ (8007b8c <osKernelInitialize+0x44>)
 8007b6c:	2201      	movs	r2, #1
 8007b6e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007b70:	2300      	movs	r3, #0
 8007b72:	607b      	str	r3, [r7, #4]
 8007b74:	e002      	b.n	8007b7c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007b76:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007b7a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007b7c:	687b      	ldr	r3, [r7, #4]
}
 8007b7e:	4618      	mov	r0, r3
 8007b80:	370c      	adds	r7, #12
 8007b82:	46bd      	mov	sp, r7
 8007b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b88:	4770      	bx	lr
 8007b8a:	bf00      	nop
 8007b8c:	2000b3bc 	.word	0x2000b3bc

08007b90 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b082      	sub	sp, #8
 8007b94:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007b96:	f3ef 8305 	mrs	r3, IPSR
 8007b9a:	603b      	str	r3, [r7, #0]
  return(result);
 8007b9c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d003      	beq.n	8007baa <osKernelStart+0x1a>
    stat = osErrorISR;
 8007ba2:	f06f 0305 	mvn.w	r3, #5
 8007ba6:	607b      	str	r3, [r7, #4]
 8007ba8:	e010      	b.n	8007bcc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007baa:	4b0b      	ldr	r3, [pc, #44]	@ (8007bd8 <osKernelStart+0x48>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	2b01      	cmp	r3, #1
 8007bb0:	d109      	bne.n	8007bc6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007bb2:	f7ff ffbf 	bl	8007b34 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007bb6:	4b08      	ldr	r3, [pc, #32]	@ (8007bd8 <osKernelStart+0x48>)
 8007bb8:	2202      	movs	r2, #2
 8007bba:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007bbc:	f001 f87a 	bl	8008cb4 <vTaskStartScheduler>
      stat = osOK;
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	607b      	str	r3, [r7, #4]
 8007bc4:	e002      	b.n	8007bcc <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007bc6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007bca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007bcc:	687b      	ldr	r3, [r7, #4]
}
 8007bce:	4618      	mov	r0, r3
 8007bd0:	3708      	adds	r7, #8
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bd80      	pop	{r7, pc}
 8007bd6:	bf00      	nop
 8007bd8:	2000b3bc 	.word	0x2000b3bc

08007bdc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b08e      	sub	sp, #56	@ 0x38
 8007be0:	af04      	add	r7, sp, #16
 8007be2:	60f8      	str	r0, [r7, #12]
 8007be4:	60b9      	str	r1, [r7, #8]
 8007be6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007be8:	2300      	movs	r3, #0
 8007bea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007bec:	f3ef 8305 	mrs	r3, IPSR
 8007bf0:	617b      	str	r3, [r7, #20]
  return(result);
 8007bf2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d17e      	bne.n	8007cf6 <osThreadNew+0x11a>
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d07b      	beq.n	8007cf6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007bfe:	2380      	movs	r3, #128	@ 0x80
 8007c00:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007c02:	2318      	movs	r3, #24
 8007c04:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007c06:	2300      	movs	r3, #0
 8007c08:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8007c0a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007c0e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d045      	beq.n	8007ca2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d002      	beq.n	8007c24 <osThreadNew+0x48>
        name = attr->name;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	699b      	ldr	r3, [r3, #24]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d002      	beq.n	8007c32 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	699b      	ldr	r3, [r3, #24]
 8007c30:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007c32:	69fb      	ldr	r3, [r7, #28]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d008      	beq.n	8007c4a <osThreadNew+0x6e>
 8007c38:	69fb      	ldr	r3, [r7, #28]
 8007c3a:	2b38      	cmp	r3, #56	@ 0x38
 8007c3c:	d805      	bhi.n	8007c4a <osThreadNew+0x6e>
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	685b      	ldr	r3, [r3, #4]
 8007c42:	f003 0301 	and.w	r3, r3, #1
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d001      	beq.n	8007c4e <osThreadNew+0x72>
        return (NULL);
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	e054      	b.n	8007cf8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	695b      	ldr	r3, [r3, #20]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d003      	beq.n	8007c5e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	695b      	ldr	r3, [r3, #20]
 8007c5a:	089b      	lsrs	r3, r3, #2
 8007c5c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	689b      	ldr	r3, [r3, #8]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d00e      	beq.n	8007c84 <osThreadNew+0xa8>
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	68db      	ldr	r3, [r3, #12]
 8007c6a:	2b5b      	cmp	r3, #91	@ 0x5b
 8007c6c:	d90a      	bls.n	8007c84 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d006      	beq.n	8007c84 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	695b      	ldr	r3, [r3, #20]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d002      	beq.n	8007c84 <osThreadNew+0xa8>
        mem = 1;
 8007c7e:	2301      	movs	r3, #1
 8007c80:	61bb      	str	r3, [r7, #24]
 8007c82:	e010      	b.n	8007ca6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	689b      	ldr	r3, [r3, #8]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d10c      	bne.n	8007ca6 <osThreadNew+0xca>
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	68db      	ldr	r3, [r3, #12]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d108      	bne.n	8007ca6 <osThreadNew+0xca>
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	691b      	ldr	r3, [r3, #16]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d104      	bne.n	8007ca6 <osThreadNew+0xca>
          mem = 0;
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	61bb      	str	r3, [r7, #24]
 8007ca0:	e001      	b.n	8007ca6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007ca6:	69bb      	ldr	r3, [r7, #24]
 8007ca8:	2b01      	cmp	r3, #1
 8007caa:	d110      	bne.n	8007cce <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007cb0:	687a      	ldr	r2, [r7, #4]
 8007cb2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007cb4:	9202      	str	r2, [sp, #8]
 8007cb6:	9301      	str	r3, [sp, #4]
 8007cb8:	69fb      	ldr	r3, [r7, #28]
 8007cba:	9300      	str	r3, [sp, #0]
 8007cbc:	68bb      	ldr	r3, [r7, #8]
 8007cbe:	6a3a      	ldr	r2, [r7, #32]
 8007cc0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007cc2:	68f8      	ldr	r0, [r7, #12]
 8007cc4:	f000 fe1a 	bl	80088fc <xTaskCreateStatic>
 8007cc8:	4603      	mov	r3, r0
 8007cca:	613b      	str	r3, [r7, #16]
 8007ccc:	e013      	b.n	8007cf6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007cce:	69bb      	ldr	r3, [r7, #24]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d110      	bne.n	8007cf6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007cd4:	6a3b      	ldr	r3, [r7, #32]
 8007cd6:	b29a      	uxth	r2, r3
 8007cd8:	f107 0310 	add.w	r3, r7, #16
 8007cdc:	9301      	str	r3, [sp, #4]
 8007cde:	69fb      	ldr	r3, [r7, #28]
 8007ce0:	9300      	str	r3, [sp, #0]
 8007ce2:	68bb      	ldr	r3, [r7, #8]
 8007ce4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007ce6:	68f8      	ldr	r0, [r7, #12]
 8007ce8:	f000 fe68 	bl	80089bc <xTaskCreate>
 8007cec:	4603      	mov	r3, r0
 8007cee:	2b01      	cmp	r3, #1
 8007cf0:	d001      	beq.n	8007cf6 <osThreadNew+0x11a>
            hTask = NULL;
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007cf6:	693b      	ldr	r3, [r7, #16]
}
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	3728      	adds	r7, #40	@ 0x28
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	bd80      	pop	{r7, pc}

08007d00 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b084      	sub	sp, #16
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007d08:	f3ef 8305 	mrs	r3, IPSR
 8007d0c:	60bb      	str	r3, [r7, #8]
  return(result);
 8007d0e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d003      	beq.n	8007d1c <osDelay+0x1c>
    stat = osErrorISR;
 8007d14:	f06f 0305 	mvn.w	r3, #5
 8007d18:	60fb      	str	r3, [r7, #12]
 8007d1a:	e007      	b.n	8007d2c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d002      	beq.n	8007d2c <osDelay+0x2c>
      vTaskDelay(ticks);
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	f000 ff8e 	bl	8008c48 <vTaskDelay>
    }
  }

  return (stat);
 8007d2c:	68fb      	ldr	r3, [r7, #12]
}
 8007d2e:	4618      	mov	r0, r3
 8007d30:	3710      	adds	r7, #16
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd80      	pop	{r7, pc}
	...

08007d38 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007d38:	b480      	push	{r7}
 8007d3a:	b085      	sub	sp, #20
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	60f8      	str	r0, [r7, #12]
 8007d40:	60b9      	str	r1, [r7, #8]
 8007d42:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	4a07      	ldr	r2, [pc, #28]	@ (8007d64 <vApplicationGetIdleTaskMemory+0x2c>)
 8007d48:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007d4a:	68bb      	ldr	r3, [r7, #8]
 8007d4c:	4a06      	ldr	r2, [pc, #24]	@ (8007d68 <vApplicationGetIdleTaskMemory+0x30>)
 8007d4e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2280      	movs	r2, #128	@ 0x80
 8007d54:	601a      	str	r2, [r3, #0]
}
 8007d56:	bf00      	nop
 8007d58:	3714      	adds	r7, #20
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d60:	4770      	bx	lr
 8007d62:	bf00      	nop
 8007d64:	2000b3c0 	.word	0x2000b3c0
 8007d68:	2000b41c 	.word	0x2000b41c

08007d6c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007d6c:	b480      	push	{r7}
 8007d6e:	b085      	sub	sp, #20
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	60f8      	str	r0, [r7, #12]
 8007d74:	60b9      	str	r1, [r7, #8]
 8007d76:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	4a07      	ldr	r2, [pc, #28]	@ (8007d98 <vApplicationGetTimerTaskMemory+0x2c>)
 8007d7c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007d7e:	68bb      	ldr	r3, [r7, #8]
 8007d80:	4a06      	ldr	r2, [pc, #24]	@ (8007d9c <vApplicationGetTimerTaskMemory+0x30>)
 8007d82:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007d8a:	601a      	str	r2, [r3, #0]
}
 8007d8c:	bf00      	nop
 8007d8e:	3714      	adds	r7, #20
 8007d90:	46bd      	mov	sp, r7
 8007d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d96:	4770      	bx	lr
 8007d98:	2000b61c 	.word	0x2000b61c
 8007d9c:	2000b678 	.word	0x2000b678

08007da0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007da0:	b480      	push	{r7}
 8007da2:	b083      	sub	sp, #12
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	f103 0208 	add.w	r2, r3, #8
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007db8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	f103 0208 	add.w	r2, r3, #8
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	f103 0208 	add.w	r2, r3, #8
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007dd4:	bf00      	nop
 8007dd6:	370c      	adds	r7, #12
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dde:	4770      	bx	lr

08007de0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007de0:	b480      	push	{r7}
 8007de2:	b083      	sub	sp, #12
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2200      	movs	r2, #0
 8007dec:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007dee:	bf00      	nop
 8007df0:	370c      	adds	r7, #12
 8007df2:	46bd      	mov	sp, r7
 8007df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df8:	4770      	bx	lr

08007dfa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007dfa:	b480      	push	{r7}
 8007dfc:	b085      	sub	sp, #20
 8007dfe:	af00      	add	r7, sp, #0
 8007e00:	6078      	str	r0, [r7, #4]
 8007e02:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	685b      	ldr	r3, [r3, #4]
 8007e08:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	68fa      	ldr	r2, [r7, #12]
 8007e0e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	689a      	ldr	r2, [r3, #8]
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	689b      	ldr	r3, [r3, #8]
 8007e1c:	683a      	ldr	r2, [r7, #0]
 8007e1e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	683a      	ldr	r2, [r7, #0]
 8007e24:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	687a      	ldr	r2, [r7, #4]
 8007e2a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	1c5a      	adds	r2, r3, #1
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	601a      	str	r2, [r3, #0]
}
 8007e36:	bf00      	nop
 8007e38:	3714      	adds	r7, #20
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e40:	4770      	bx	lr

08007e42 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007e42:	b480      	push	{r7}
 8007e44:	b085      	sub	sp, #20
 8007e46:	af00      	add	r7, sp, #0
 8007e48:	6078      	str	r0, [r7, #4]
 8007e4a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007e58:	d103      	bne.n	8007e62 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	691b      	ldr	r3, [r3, #16]
 8007e5e:	60fb      	str	r3, [r7, #12]
 8007e60:	e00c      	b.n	8007e7c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	3308      	adds	r3, #8
 8007e66:	60fb      	str	r3, [r7, #12]
 8007e68:	e002      	b.n	8007e70 <vListInsert+0x2e>
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	685b      	ldr	r3, [r3, #4]
 8007e6e:	60fb      	str	r3, [r7, #12]
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	685b      	ldr	r3, [r3, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	68ba      	ldr	r2, [r7, #8]
 8007e78:	429a      	cmp	r2, r3
 8007e7a:	d2f6      	bcs.n	8007e6a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	685a      	ldr	r2, [r3, #4]
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	685b      	ldr	r3, [r3, #4]
 8007e88:	683a      	ldr	r2, [r7, #0]
 8007e8a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	68fa      	ldr	r2, [r7, #12]
 8007e90:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	683a      	ldr	r2, [r7, #0]
 8007e96:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	687a      	ldr	r2, [r7, #4]
 8007e9c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	1c5a      	adds	r2, r3, #1
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	601a      	str	r2, [r3, #0]
}
 8007ea8:	bf00      	nop
 8007eaa:	3714      	adds	r7, #20
 8007eac:	46bd      	mov	sp, r7
 8007eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb2:	4770      	bx	lr

08007eb4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	b085      	sub	sp, #20
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	691b      	ldr	r3, [r3, #16]
 8007ec0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	685b      	ldr	r3, [r3, #4]
 8007ec6:	687a      	ldr	r2, [r7, #4]
 8007ec8:	6892      	ldr	r2, [r2, #8]
 8007eca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	689b      	ldr	r3, [r3, #8]
 8007ed0:	687a      	ldr	r2, [r7, #4]
 8007ed2:	6852      	ldr	r2, [r2, #4]
 8007ed4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	685b      	ldr	r3, [r3, #4]
 8007eda:	687a      	ldr	r2, [r7, #4]
 8007edc:	429a      	cmp	r2, r3
 8007ede:	d103      	bne.n	8007ee8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	689a      	ldr	r2, [r3, #8]
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2200      	movs	r2, #0
 8007eec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	1e5a      	subs	r2, r3, #1
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	681b      	ldr	r3, [r3, #0]
}
 8007efc:	4618      	mov	r0, r3
 8007efe:	3714      	adds	r7, #20
 8007f00:	46bd      	mov	sp, r7
 8007f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f06:	4770      	bx	lr

08007f08 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b084      	sub	sp, #16
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
 8007f10:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d10b      	bne.n	8007f34 <xQueueGenericReset+0x2c>
	__asm volatile
 8007f1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f20:	f383 8811 	msr	BASEPRI, r3
 8007f24:	f3bf 8f6f 	isb	sy
 8007f28:	f3bf 8f4f 	dsb	sy
 8007f2c:	60bb      	str	r3, [r7, #8]
}
 8007f2e:	bf00      	nop
 8007f30:	bf00      	nop
 8007f32:	e7fd      	b.n	8007f30 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007f34:	f002 f8a0 	bl	800a078 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	681a      	ldr	r2, [r3, #0]
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f40:	68f9      	ldr	r1, [r7, #12]
 8007f42:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007f44:	fb01 f303 	mul.w	r3, r1, r3
 8007f48:	441a      	add	r2, r3
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	2200      	movs	r2, #0
 8007f52:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681a      	ldr	r2, [r3, #0]
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	681a      	ldr	r2, [r3, #0]
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f64:	3b01      	subs	r3, #1
 8007f66:	68f9      	ldr	r1, [r7, #12]
 8007f68:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007f6a:	fb01 f303 	mul.w	r3, r1, r3
 8007f6e:	441a      	add	r2, r3
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	22ff      	movs	r2, #255	@ 0xff
 8007f78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	22ff      	movs	r2, #255	@ 0xff
 8007f80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d114      	bne.n	8007fb4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	691b      	ldr	r3, [r3, #16]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d01a      	beq.n	8007fc8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	3310      	adds	r3, #16
 8007f96:	4618      	mov	r0, r3
 8007f98:	f001 f91a 	bl	80091d0 <xTaskRemoveFromEventList>
 8007f9c:	4603      	mov	r3, r0
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d012      	beq.n	8007fc8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007fa2:	4b0d      	ldr	r3, [pc, #52]	@ (8007fd8 <xQueueGenericReset+0xd0>)
 8007fa4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007fa8:	601a      	str	r2, [r3, #0]
 8007faa:	f3bf 8f4f 	dsb	sy
 8007fae:	f3bf 8f6f 	isb	sy
 8007fb2:	e009      	b.n	8007fc8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	3310      	adds	r3, #16
 8007fb8:	4618      	mov	r0, r3
 8007fba:	f7ff fef1 	bl	8007da0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	3324      	adds	r3, #36	@ 0x24
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	f7ff feec 	bl	8007da0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007fc8:	f002 f888 	bl	800a0dc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007fcc:	2301      	movs	r3, #1
}
 8007fce:	4618      	mov	r0, r3
 8007fd0:	3710      	adds	r7, #16
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	bd80      	pop	{r7, pc}
 8007fd6:	bf00      	nop
 8007fd8:	e000ed04 	.word	0xe000ed04

08007fdc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b08e      	sub	sp, #56	@ 0x38
 8007fe0:	af02      	add	r7, sp, #8
 8007fe2:	60f8      	str	r0, [r7, #12]
 8007fe4:	60b9      	str	r1, [r7, #8]
 8007fe6:	607a      	str	r2, [r7, #4]
 8007fe8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d10b      	bne.n	8008008 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8007ff0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ff4:	f383 8811 	msr	BASEPRI, r3
 8007ff8:	f3bf 8f6f 	isb	sy
 8007ffc:	f3bf 8f4f 	dsb	sy
 8008000:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008002:	bf00      	nop
 8008004:	bf00      	nop
 8008006:	e7fd      	b.n	8008004 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d10b      	bne.n	8008026 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800800e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008012:	f383 8811 	msr	BASEPRI, r3
 8008016:	f3bf 8f6f 	isb	sy
 800801a:	f3bf 8f4f 	dsb	sy
 800801e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008020:	bf00      	nop
 8008022:	bf00      	nop
 8008024:	e7fd      	b.n	8008022 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d002      	beq.n	8008032 <xQueueGenericCreateStatic+0x56>
 800802c:	68bb      	ldr	r3, [r7, #8]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d001      	beq.n	8008036 <xQueueGenericCreateStatic+0x5a>
 8008032:	2301      	movs	r3, #1
 8008034:	e000      	b.n	8008038 <xQueueGenericCreateStatic+0x5c>
 8008036:	2300      	movs	r3, #0
 8008038:	2b00      	cmp	r3, #0
 800803a:	d10b      	bne.n	8008054 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800803c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008040:	f383 8811 	msr	BASEPRI, r3
 8008044:	f3bf 8f6f 	isb	sy
 8008048:	f3bf 8f4f 	dsb	sy
 800804c:	623b      	str	r3, [r7, #32]
}
 800804e:	bf00      	nop
 8008050:	bf00      	nop
 8008052:	e7fd      	b.n	8008050 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d102      	bne.n	8008060 <xQueueGenericCreateStatic+0x84>
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d101      	bne.n	8008064 <xQueueGenericCreateStatic+0x88>
 8008060:	2301      	movs	r3, #1
 8008062:	e000      	b.n	8008066 <xQueueGenericCreateStatic+0x8a>
 8008064:	2300      	movs	r3, #0
 8008066:	2b00      	cmp	r3, #0
 8008068:	d10b      	bne.n	8008082 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800806a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800806e:	f383 8811 	msr	BASEPRI, r3
 8008072:	f3bf 8f6f 	isb	sy
 8008076:	f3bf 8f4f 	dsb	sy
 800807a:	61fb      	str	r3, [r7, #28]
}
 800807c:	bf00      	nop
 800807e:	bf00      	nop
 8008080:	e7fd      	b.n	800807e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008082:	2350      	movs	r3, #80	@ 0x50
 8008084:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008086:	697b      	ldr	r3, [r7, #20]
 8008088:	2b50      	cmp	r3, #80	@ 0x50
 800808a:	d00b      	beq.n	80080a4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800808c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008090:	f383 8811 	msr	BASEPRI, r3
 8008094:	f3bf 8f6f 	isb	sy
 8008098:	f3bf 8f4f 	dsb	sy
 800809c:	61bb      	str	r3, [r7, #24]
}
 800809e:	bf00      	nop
 80080a0:	bf00      	nop
 80080a2:	e7fd      	b.n	80080a0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80080a4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80080aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d00d      	beq.n	80080cc <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80080b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080b2:	2201      	movs	r2, #1
 80080b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80080b8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80080bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080be:	9300      	str	r3, [sp, #0]
 80080c0:	4613      	mov	r3, r2
 80080c2:	687a      	ldr	r2, [r7, #4]
 80080c4:	68b9      	ldr	r1, [r7, #8]
 80080c6:	68f8      	ldr	r0, [r7, #12]
 80080c8:	f000 f805 	bl	80080d6 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80080cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80080ce:	4618      	mov	r0, r3
 80080d0:	3730      	adds	r7, #48	@ 0x30
 80080d2:	46bd      	mov	sp, r7
 80080d4:	bd80      	pop	{r7, pc}

080080d6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80080d6:	b580      	push	{r7, lr}
 80080d8:	b084      	sub	sp, #16
 80080da:	af00      	add	r7, sp, #0
 80080dc:	60f8      	str	r0, [r7, #12]
 80080de:	60b9      	str	r1, [r7, #8]
 80080e0:	607a      	str	r2, [r7, #4]
 80080e2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80080e4:	68bb      	ldr	r3, [r7, #8]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d103      	bne.n	80080f2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80080ea:	69bb      	ldr	r3, [r7, #24]
 80080ec:	69ba      	ldr	r2, [r7, #24]
 80080ee:	601a      	str	r2, [r3, #0]
 80080f0:	e002      	b.n	80080f8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80080f2:	69bb      	ldr	r3, [r7, #24]
 80080f4:	687a      	ldr	r2, [r7, #4]
 80080f6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80080f8:	69bb      	ldr	r3, [r7, #24]
 80080fa:	68fa      	ldr	r2, [r7, #12]
 80080fc:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80080fe:	69bb      	ldr	r3, [r7, #24]
 8008100:	68ba      	ldr	r2, [r7, #8]
 8008102:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008104:	2101      	movs	r1, #1
 8008106:	69b8      	ldr	r0, [r7, #24]
 8008108:	f7ff fefe 	bl	8007f08 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800810c:	69bb      	ldr	r3, [r7, #24]
 800810e:	78fa      	ldrb	r2, [r7, #3]
 8008110:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008114:	bf00      	nop
 8008116:	3710      	adds	r7, #16
 8008118:	46bd      	mov	sp, r7
 800811a:	bd80      	pop	{r7, pc}

0800811c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b08e      	sub	sp, #56	@ 0x38
 8008120:	af00      	add	r7, sp, #0
 8008122:	60f8      	str	r0, [r7, #12]
 8008124:	60b9      	str	r1, [r7, #8]
 8008126:	607a      	str	r2, [r7, #4]
 8008128:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800812a:	2300      	movs	r3, #0
 800812c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008134:	2b00      	cmp	r3, #0
 8008136:	d10b      	bne.n	8008150 <xQueueGenericSend+0x34>
	__asm volatile
 8008138:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800813c:	f383 8811 	msr	BASEPRI, r3
 8008140:	f3bf 8f6f 	isb	sy
 8008144:	f3bf 8f4f 	dsb	sy
 8008148:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800814a:	bf00      	nop
 800814c:	bf00      	nop
 800814e:	e7fd      	b.n	800814c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008150:	68bb      	ldr	r3, [r7, #8]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d103      	bne.n	800815e <xQueueGenericSend+0x42>
 8008156:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800815a:	2b00      	cmp	r3, #0
 800815c:	d101      	bne.n	8008162 <xQueueGenericSend+0x46>
 800815e:	2301      	movs	r3, #1
 8008160:	e000      	b.n	8008164 <xQueueGenericSend+0x48>
 8008162:	2300      	movs	r3, #0
 8008164:	2b00      	cmp	r3, #0
 8008166:	d10b      	bne.n	8008180 <xQueueGenericSend+0x64>
	__asm volatile
 8008168:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800816c:	f383 8811 	msr	BASEPRI, r3
 8008170:	f3bf 8f6f 	isb	sy
 8008174:	f3bf 8f4f 	dsb	sy
 8008178:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800817a:	bf00      	nop
 800817c:	bf00      	nop
 800817e:	e7fd      	b.n	800817c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	2b02      	cmp	r3, #2
 8008184:	d103      	bne.n	800818e <xQueueGenericSend+0x72>
 8008186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008188:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800818a:	2b01      	cmp	r3, #1
 800818c:	d101      	bne.n	8008192 <xQueueGenericSend+0x76>
 800818e:	2301      	movs	r3, #1
 8008190:	e000      	b.n	8008194 <xQueueGenericSend+0x78>
 8008192:	2300      	movs	r3, #0
 8008194:	2b00      	cmp	r3, #0
 8008196:	d10b      	bne.n	80081b0 <xQueueGenericSend+0x94>
	__asm volatile
 8008198:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800819c:	f383 8811 	msr	BASEPRI, r3
 80081a0:	f3bf 8f6f 	isb	sy
 80081a4:	f3bf 8f4f 	dsb	sy
 80081a8:	623b      	str	r3, [r7, #32]
}
 80081aa:	bf00      	nop
 80081ac:	bf00      	nop
 80081ae:	e7fd      	b.n	80081ac <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80081b0:	f001 f9f6 	bl	80095a0 <xTaskGetSchedulerState>
 80081b4:	4603      	mov	r3, r0
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d102      	bne.n	80081c0 <xQueueGenericSend+0xa4>
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d101      	bne.n	80081c4 <xQueueGenericSend+0xa8>
 80081c0:	2301      	movs	r3, #1
 80081c2:	e000      	b.n	80081c6 <xQueueGenericSend+0xaa>
 80081c4:	2300      	movs	r3, #0
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d10b      	bne.n	80081e2 <xQueueGenericSend+0xc6>
	__asm volatile
 80081ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081ce:	f383 8811 	msr	BASEPRI, r3
 80081d2:	f3bf 8f6f 	isb	sy
 80081d6:	f3bf 8f4f 	dsb	sy
 80081da:	61fb      	str	r3, [r7, #28]
}
 80081dc:	bf00      	nop
 80081de:	bf00      	nop
 80081e0:	e7fd      	b.n	80081de <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80081e2:	f001 ff49 	bl	800a078 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80081e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80081ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081ee:	429a      	cmp	r2, r3
 80081f0:	d302      	bcc.n	80081f8 <xQueueGenericSend+0xdc>
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	2b02      	cmp	r3, #2
 80081f6:	d129      	bne.n	800824c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80081f8:	683a      	ldr	r2, [r7, #0]
 80081fa:	68b9      	ldr	r1, [r7, #8]
 80081fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80081fe:	f000 fa0f 	bl	8008620 <prvCopyDataToQueue>
 8008202:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008204:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008208:	2b00      	cmp	r3, #0
 800820a:	d010      	beq.n	800822e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800820c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800820e:	3324      	adds	r3, #36	@ 0x24
 8008210:	4618      	mov	r0, r3
 8008212:	f000 ffdd 	bl	80091d0 <xTaskRemoveFromEventList>
 8008216:	4603      	mov	r3, r0
 8008218:	2b00      	cmp	r3, #0
 800821a:	d013      	beq.n	8008244 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800821c:	4b3f      	ldr	r3, [pc, #252]	@ (800831c <xQueueGenericSend+0x200>)
 800821e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008222:	601a      	str	r2, [r3, #0]
 8008224:	f3bf 8f4f 	dsb	sy
 8008228:	f3bf 8f6f 	isb	sy
 800822c:	e00a      	b.n	8008244 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800822e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008230:	2b00      	cmp	r3, #0
 8008232:	d007      	beq.n	8008244 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008234:	4b39      	ldr	r3, [pc, #228]	@ (800831c <xQueueGenericSend+0x200>)
 8008236:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800823a:	601a      	str	r2, [r3, #0]
 800823c:	f3bf 8f4f 	dsb	sy
 8008240:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008244:	f001 ff4a 	bl	800a0dc <vPortExitCritical>
				return pdPASS;
 8008248:	2301      	movs	r3, #1
 800824a:	e063      	b.n	8008314 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d103      	bne.n	800825a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008252:	f001 ff43 	bl	800a0dc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008256:	2300      	movs	r3, #0
 8008258:	e05c      	b.n	8008314 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800825a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800825c:	2b00      	cmp	r3, #0
 800825e:	d106      	bne.n	800826e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008260:	f107 0314 	add.w	r3, r7, #20
 8008264:	4618      	mov	r0, r3
 8008266:	f001 f83f 	bl	80092e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800826a:	2301      	movs	r3, #1
 800826c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800826e:	f001 ff35 	bl	800a0dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008272:	f000 fd87 	bl	8008d84 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008276:	f001 feff 	bl	800a078 <vPortEnterCritical>
 800827a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800827c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008280:	b25b      	sxtb	r3, r3
 8008282:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008286:	d103      	bne.n	8008290 <xQueueGenericSend+0x174>
 8008288:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800828a:	2200      	movs	r2, #0
 800828c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008290:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008292:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008296:	b25b      	sxtb	r3, r3
 8008298:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800829c:	d103      	bne.n	80082a6 <xQueueGenericSend+0x18a>
 800829e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082a0:	2200      	movs	r2, #0
 80082a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80082a6:	f001 ff19 	bl	800a0dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80082aa:	1d3a      	adds	r2, r7, #4
 80082ac:	f107 0314 	add.w	r3, r7, #20
 80082b0:	4611      	mov	r1, r2
 80082b2:	4618      	mov	r0, r3
 80082b4:	f001 f82e 	bl	8009314 <xTaskCheckForTimeOut>
 80082b8:	4603      	mov	r3, r0
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d124      	bne.n	8008308 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80082be:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80082c0:	f000 faa6 	bl	8008810 <prvIsQueueFull>
 80082c4:	4603      	mov	r3, r0
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d018      	beq.n	80082fc <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80082ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082cc:	3310      	adds	r3, #16
 80082ce:	687a      	ldr	r2, [r7, #4]
 80082d0:	4611      	mov	r1, r2
 80082d2:	4618      	mov	r0, r3
 80082d4:	f000 ff2a 	bl	800912c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80082d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80082da:	f000 fa31 	bl	8008740 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80082de:	f000 fd5f 	bl	8008da0 <xTaskResumeAll>
 80082e2:	4603      	mov	r3, r0
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	f47f af7c 	bne.w	80081e2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80082ea:	4b0c      	ldr	r3, [pc, #48]	@ (800831c <xQueueGenericSend+0x200>)
 80082ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80082f0:	601a      	str	r2, [r3, #0]
 80082f2:	f3bf 8f4f 	dsb	sy
 80082f6:	f3bf 8f6f 	isb	sy
 80082fa:	e772      	b.n	80081e2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80082fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80082fe:	f000 fa1f 	bl	8008740 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008302:	f000 fd4d 	bl	8008da0 <xTaskResumeAll>
 8008306:	e76c      	b.n	80081e2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008308:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800830a:	f000 fa19 	bl	8008740 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800830e:	f000 fd47 	bl	8008da0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008312:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008314:	4618      	mov	r0, r3
 8008316:	3738      	adds	r7, #56	@ 0x38
 8008318:	46bd      	mov	sp, r7
 800831a:	bd80      	pop	{r7, pc}
 800831c:	e000ed04 	.word	0xe000ed04

08008320 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b090      	sub	sp, #64	@ 0x40
 8008324:	af00      	add	r7, sp, #0
 8008326:	60f8      	str	r0, [r7, #12]
 8008328:	60b9      	str	r1, [r7, #8]
 800832a:	607a      	str	r2, [r7, #4]
 800832c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8008332:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008334:	2b00      	cmp	r3, #0
 8008336:	d10b      	bne.n	8008350 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8008338:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800833c:	f383 8811 	msr	BASEPRI, r3
 8008340:	f3bf 8f6f 	isb	sy
 8008344:	f3bf 8f4f 	dsb	sy
 8008348:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800834a:	bf00      	nop
 800834c:	bf00      	nop
 800834e:	e7fd      	b.n	800834c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d103      	bne.n	800835e <xQueueGenericSendFromISR+0x3e>
 8008356:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800835a:	2b00      	cmp	r3, #0
 800835c:	d101      	bne.n	8008362 <xQueueGenericSendFromISR+0x42>
 800835e:	2301      	movs	r3, #1
 8008360:	e000      	b.n	8008364 <xQueueGenericSendFromISR+0x44>
 8008362:	2300      	movs	r3, #0
 8008364:	2b00      	cmp	r3, #0
 8008366:	d10b      	bne.n	8008380 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8008368:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800836c:	f383 8811 	msr	BASEPRI, r3
 8008370:	f3bf 8f6f 	isb	sy
 8008374:	f3bf 8f4f 	dsb	sy
 8008378:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800837a:	bf00      	nop
 800837c:	bf00      	nop
 800837e:	e7fd      	b.n	800837c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	2b02      	cmp	r3, #2
 8008384:	d103      	bne.n	800838e <xQueueGenericSendFromISR+0x6e>
 8008386:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008388:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800838a:	2b01      	cmp	r3, #1
 800838c:	d101      	bne.n	8008392 <xQueueGenericSendFromISR+0x72>
 800838e:	2301      	movs	r3, #1
 8008390:	e000      	b.n	8008394 <xQueueGenericSendFromISR+0x74>
 8008392:	2300      	movs	r3, #0
 8008394:	2b00      	cmp	r3, #0
 8008396:	d10b      	bne.n	80083b0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8008398:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800839c:	f383 8811 	msr	BASEPRI, r3
 80083a0:	f3bf 8f6f 	isb	sy
 80083a4:	f3bf 8f4f 	dsb	sy
 80083a8:	623b      	str	r3, [r7, #32]
}
 80083aa:	bf00      	nop
 80083ac:	bf00      	nop
 80083ae:	e7fd      	b.n	80083ac <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80083b0:	f001 ff42 	bl	800a238 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80083b4:	f3ef 8211 	mrs	r2, BASEPRI
 80083b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083bc:	f383 8811 	msr	BASEPRI, r3
 80083c0:	f3bf 8f6f 	isb	sy
 80083c4:	f3bf 8f4f 	dsb	sy
 80083c8:	61fa      	str	r2, [r7, #28]
 80083ca:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80083cc:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80083ce:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80083d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80083d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083d8:	429a      	cmp	r2, r3
 80083da:	d302      	bcc.n	80083e2 <xQueueGenericSendFromISR+0xc2>
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	2b02      	cmp	r3, #2
 80083e0:	d12f      	bne.n	8008442 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80083e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083e4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80083e8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80083ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80083f2:	683a      	ldr	r2, [r7, #0]
 80083f4:	68b9      	ldr	r1, [r7, #8]
 80083f6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80083f8:	f000 f912 	bl	8008620 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80083fc:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8008400:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008404:	d112      	bne.n	800842c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008406:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800840a:	2b00      	cmp	r3, #0
 800840c:	d016      	beq.n	800843c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800840e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008410:	3324      	adds	r3, #36	@ 0x24
 8008412:	4618      	mov	r0, r3
 8008414:	f000 fedc 	bl	80091d0 <xTaskRemoveFromEventList>
 8008418:	4603      	mov	r3, r0
 800841a:	2b00      	cmp	r3, #0
 800841c:	d00e      	beq.n	800843c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d00b      	beq.n	800843c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2201      	movs	r2, #1
 8008428:	601a      	str	r2, [r3, #0]
 800842a:	e007      	b.n	800843c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800842c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008430:	3301      	adds	r3, #1
 8008432:	b2db      	uxtb	r3, r3
 8008434:	b25a      	sxtb	r2, r3
 8008436:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008438:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800843c:	2301      	movs	r3, #1
 800843e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8008440:	e001      	b.n	8008446 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008442:	2300      	movs	r3, #0
 8008444:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008446:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008448:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800844a:	697b      	ldr	r3, [r7, #20]
 800844c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008450:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008452:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008454:	4618      	mov	r0, r3
 8008456:	3740      	adds	r7, #64	@ 0x40
 8008458:	46bd      	mov	sp, r7
 800845a:	bd80      	pop	{r7, pc}

0800845c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b08c      	sub	sp, #48	@ 0x30
 8008460:	af00      	add	r7, sp, #0
 8008462:	60f8      	str	r0, [r7, #12]
 8008464:	60b9      	str	r1, [r7, #8]
 8008466:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008468:	2300      	movs	r3, #0
 800846a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008470:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008472:	2b00      	cmp	r3, #0
 8008474:	d10b      	bne.n	800848e <xQueueReceive+0x32>
	__asm volatile
 8008476:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800847a:	f383 8811 	msr	BASEPRI, r3
 800847e:	f3bf 8f6f 	isb	sy
 8008482:	f3bf 8f4f 	dsb	sy
 8008486:	623b      	str	r3, [r7, #32]
}
 8008488:	bf00      	nop
 800848a:	bf00      	nop
 800848c:	e7fd      	b.n	800848a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800848e:	68bb      	ldr	r3, [r7, #8]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d103      	bne.n	800849c <xQueueReceive+0x40>
 8008494:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008496:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008498:	2b00      	cmp	r3, #0
 800849a:	d101      	bne.n	80084a0 <xQueueReceive+0x44>
 800849c:	2301      	movs	r3, #1
 800849e:	e000      	b.n	80084a2 <xQueueReceive+0x46>
 80084a0:	2300      	movs	r3, #0
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d10b      	bne.n	80084be <xQueueReceive+0x62>
	__asm volatile
 80084a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084aa:	f383 8811 	msr	BASEPRI, r3
 80084ae:	f3bf 8f6f 	isb	sy
 80084b2:	f3bf 8f4f 	dsb	sy
 80084b6:	61fb      	str	r3, [r7, #28]
}
 80084b8:	bf00      	nop
 80084ba:	bf00      	nop
 80084bc:	e7fd      	b.n	80084ba <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80084be:	f001 f86f 	bl	80095a0 <xTaskGetSchedulerState>
 80084c2:	4603      	mov	r3, r0
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d102      	bne.n	80084ce <xQueueReceive+0x72>
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d101      	bne.n	80084d2 <xQueueReceive+0x76>
 80084ce:	2301      	movs	r3, #1
 80084d0:	e000      	b.n	80084d4 <xQueueReceive+0x78>
 80084d2:	2300      	movs	r3, #0
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d10b      	bne.n	80084f0 <xQueueReceive+0x94>
	__asm volatile
 80084d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084dc:	f383 8811 	msr	BASEPRI, r3
 80084e0:	f3bf 8f6f 	isb	sy
 80084e4:	f3bf 8f4f 	dsb	sy
 80084e8:	61bb      	str	r3, [r7, #24]
}
 80084ea:	bf00      	nop
 80084ec:	bf00      	nop
 80084ee:	e7fd      	b.n	80084ec <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80084f0:	f001 fdc2 	bl	800a078 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80084f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084f8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80084fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d01f      	beq.n	8008540 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008500:	68b9      	ldr	r1, [r7, #8]
 8008502:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008504:	f000 f8f6 	bl	80086f4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800850a:	1e5a      	subs	r2, r3, #1
 800850c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800850e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008510:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008512:	691b      	ldr	r3, [r3, #16]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d00f      	beq.n	8008538 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008518:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800851a:	3310      	adds	r3, #16
 800851c:	4618      	mov	r0, r3
 800851e:	f000 fe57 	bl	80091d0 <xTaskRemoveFromEventList>
 8008522:	4603      	mov	r3, r0
 8008524:	2b00      	cmp	r3, #0
 8008526:	d007      	beq.n	8008538 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008528:	4b3c      	ldr	r3, [pc, #240]	@ (800861c <xQueueReceive+0x1c0>)
 800852a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800852e:	601a      	str	r2, [r3, #0]
 8008530:	f3bf 8f4f 	dsb	sy
 8008534:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008538:	f001 fdd0 	bl	800a0dc <vPortExitCritical>
				return pdPASS;
 800853c:	2301      	movs	r3, #1
 800853e:	e069      	b.n	8008614 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d103      	bne.n	800854e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008546:	f001 fdc9 	bl	800a0dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800854a:	2300      	movs	r3, #0
 800854c:	e062      	b.n	8008614 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800854e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008550:	2b00      	cmp	r3, #0
 8008552:	d106      	bne.n	8008562 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008554:	f107 0310 	add.w	r3, r7, #16
 8008558:	4618      	mov	r0, r3
 800855a:	f000 fec5 	bl	80092e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800855e:	2301      	movs	r3, #1
 8008560:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008562:	f001 fdbb 	bl	800a0dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008566:	f000 fc0d 	bl	8008d84 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800856a:	f001 fd85 	bl	800a078 <vPortEnterCritical>
 800856e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008570:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008574:	b25b      	sxtb	r3, r3
 8008576:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800857a:	d103      	bne.n	8008584 <xQueueReceive+0x128>
 800857c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800857e:	2200      	movs	r2, #0
 8008580:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008584:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008586:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800858a:	b25b      	sxtb	r3, r3
 800858c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008590:	d103      	bne.n	800859a <xQueueReceive+0x13e>
 8008592:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008594:	2200      	movs	r2, #0
 8008596:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800859a:	f001 fd9f 	bl	800a0dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800859e:	1d3a      	adds	r2, r7, #4
 80085a0:	f107 0310 	add.w	r3, r7, #16
 80085a4:	4611      	mov	r1, r2
 80085a6:	4618      	mov	r0, r3
 80085a8:	f000 feb4 	bl	8009314 <xTaskCheckForTimeOut>
 80085ac:	4603      	mov	r3, r0
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d123      	bne.n	80085fa <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80085b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80085b4:	f000 f916 	bl	80087e4 <prvIsQueueEmpty>
 80085b8:	4603      	mov	r3, r0
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d017      	beq.n	80085ee <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80085be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085c0:	3324      	adds	r3, #36	@ 0x24
 80085c2:	687a      	ldr	r2, [r7, #4]
 80085c4:	4611      	mov	r1, r2
 80085c6:	4618      	mov	r0, r3
 80085c8:	f000 fdb0 	bl	800912c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80085cc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80085ce:	f000 f8b7 	bl	8008740 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80085d2:	f000 fbe5 	bl	8008da0 <xTaskResumeAll>
 80085d6:	4603      	mov	r3, r0
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d189      	bne.n	80084f0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80085dc:	4b0f      	ldr	r3, [pc, #60]	@ (800861c <xQueueReceive+0x1c0>)
 80085de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80085e2:	601a      	str	r2, [r3, #0]
 80085e4:	f3bf 8f4f 	dsb	sy
 80085e8:	f3bf 8f6f 	isb	sy
 80085ec:	e780      	b.n	80084f0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80085ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80085f0:	f000 f8a6 	bl	8008740 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80085f4:	f000 fbd4 	bl	8008da0 <xTaskResumeAll>
 80085f8:	e77a      	b.n	80084f0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80085fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80085fc:	f000 f8a0 	bl	8008740 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008600:	f000 fbce 	bl	8008da0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008604:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008606:	f000 f8ed 	bl	80087e4 <prvIsQueueEmpty>
 800860a:	4603      	mov	r3, r0
 800860c:	2b00      	cmp	r3, #0
 800860e:	f43f af6f 	beq.w	80084f0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008612:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008614:	4618      	mov	r0, r3
 8008616:	3730      	adds	r7, #48	@ 0x30
 8008618:	46bd      	mov	sp, r7
 800861a:	bd80      	pop	{r7, pc}
 800861c:	e000ed04 	.word	0xe000ed04

08008620 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b086      	sub	sp, #24
 8008624:	af00      	add	r7, sp, #0
 8008626:	60f8      	str	r0, [r7, #12]
 8008628:	60b9      	str	r1, [r7, #8]
 800862a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800862c:	2300      	movs	r3, #0
 800862e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008634:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800863a:	2b00      	cmp	r3, #0
 800863c:	d10d      	bne.n	800865a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d14d      	bne.n	80086e2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	689b      	ldr	r3, [r3, #8]
 800864a:	4618      	mov	r0, r3
 800864c:	f000 ffc6 	bl	80095dc <xTaskPriorityDisinherit>
 8008650:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	2200      	movs	r2, #0
 8008656:	609a      	str	r2, [r3, #8]
 8008658:	e043      	b.n	80086e2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d119      	bne.n	8008694 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	6858      	ldr	r0, [r3, #4]
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008668:	461a      	mov	r2, r3
 800866a:	68b9      	ldr	r1, [r7, #8]
 800866c:	f014 ffa5 	bl	801d5ba <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	685a      	ldr	r2, [r3, #4]
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008678:	441a      	add	r2, r3
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	685a      	ldr	r2, [r3, #4]
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	689b      	ldr	r3, [r3, #8]
 8008686:	429a      	cmp	r2, r3
 8008688:	d32b      	bcc.n	80086e2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	681a      	ldr	r2, [r3, #0]
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	605a      	str	r2, [r3, #4]
 8008692:	e026      	b.n	80086e2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	68d8      	ldr	r0, [r3, #12]
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800869c:	461a      	mov	r2, r3
 800869e:	68b9      	ldr	r1, [r7, #8]
 80086a0:	f014 ff8b 	bl	801d5ba <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	68da      	ldr	r2, [r3, #12]
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086ac:	425b      	negs	r3, r3
 80086ae:	441a      	add	r2, r3
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	68da      	ldr	r2, [r3, #12]
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	429a      	cmp	r2, r3
 80086be:	d207      	bcs.n	80086d0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	689a      	ldr	r2, [r3, #8]
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086c8:	425b      	negs	r3, r3
 80086ca:	441a      	add	r2, r3
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2b02      	cmp	r3, #2
 80086d4:	d105      	bne.n	80086e2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80086d6:	693b      	ldr	r3, [r7, #16]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d002      	beq.n	80086e2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80086dc:	693b      	ldr	r3, [r7, #16]
 80086de:	3b01      	subs	r3, #1
 80086e0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80086e2:	693b      	ldr	r3, [r7, #16]
 80086e4:	1c5a      	adds	r2, r3, #1
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80086ea:	697b      	ldr	r3, [r7, #20]
}
 80086ec:	4618      	mov	r0, r3
 80086ee:	3718      	adds	r7, #24
 80086f0:	46bd      	mov	sp, r7
 80086f2:	bd80      	pop	{r7, pc}

080086f4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b082      	sub	sp, #8
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
 80086fc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008702:	2b00      	cmp	r3, #0
 8008704:	d018      	beq.n	8008738 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	68da      	ldr	r2, [r3, #12]
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800870e:	441a      	add	r2, r3
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	68da      	ldr	r2, [r3, #12]
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	689b      	ldr	r3, [r3, #8]
 800871c:	429a      	cmp	r2, r3
 800871e:	d303      	bcc.n	8008728 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681a      	ldr	r2, [r3, #0]
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	68d9      	ldr	r1, [r3, #12]
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008730:	461a      	mov	r2, r3
 8008732:	6838      	ldr	r0, [r7, #0]
 8008734:	f014 ff41 	bl	801d5ba <memcpy>
	}
}
 8008738:	bf00      	nop
 800873a:	3708      	adds	r7, #8
 800873c:	46bd      	mov	sp, r7
 800873e:	bd80      	pop	{r7, pc}

08008740 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b084      	sub	sp, #16
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008748:	f001 fc96 	bl	800a078 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008752:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008754:	e011      	b.n	800877a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800875a:	2b00      	cmp	r3, #0
 800875c:	d012      	beq.n	8008784 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	3324      	adds	r3, #36	@ 0x24
 8008762:	4618      	mov	r0, r3
 8008764:	f000 fd34 	bl	80091d0 <xTaskRemoveFromEventList>
 8008768:	4603      	mov	r3, r0
 800876a:	2b00      	cmp	r3, #0
 800876c:	d001      	beq.n	8008772 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800876e:	f000 fe35 	bl	80093dc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008772:	7bfb      	ldrb	r3, [r7, #15]
 8008774:	3b01      	subs	r3, #1
 8008776:	b2db      	uxtb	r3, r3
 8008778:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800877a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800877e:	2b00      	cmp	r3, #0
 8008780:	dce9      	bgt.n	8008756 <prvUnlockQueue+0x16>
 8008782:	e000      	b.n	8008786 <prvUnlockQueue+0x46>
					break;
 8008784:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	22ff      	movs	r2, #255	@ 0xff
 800878a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800878e:	f001 fca5 	bl	800a0dc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008792:	f001 fc71 	bl	800a078 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800879c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800879e:	e011      	b.n	80087c4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	691b      	ldr	r3, [r3, #16]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d012      	beq.n	80087ce <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	3310      	adds	r3, #16
 80087ac:	4618      	mov	r0, r3
 80087ae:	f000 fd0f 	bl	80091d0 <xTaskRemoveFromEventList>
 80087b2:	4603      	mov	r3, r0
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d001      	beq.n	80087bc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80087b8:	f000 fe10 	bl	80093dc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80087bc:	7bbb      	ldrb	r3, [r7, #14]
 80087be:	3b01      	subs	r3, #1
 80087c0:	b2db      	uxtb	r3, r3
 80087c2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80087c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	dce9      	bgt.n	80087a0 <prvUnlockQueue+0x60>
 80087cc:	e000      	b.n	80087d0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80087ce:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	22ff      	movs	r2, #255	@ 0xff
 80087d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80087d8:	f001 fc80 	bl	800a0dc <vPortExitCritical>
}
 80087dc:	bf00      	nop
 80087de:	3710      	adds	r7, #16
 80087e0:	46bd      	mov	sp, r7
 80087e2:	bd80      	pop	{r7, pc}

080087e4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b084      	sub	sp, #16
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80087ec:	f001 fc44 	bl	800a078 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d102      	bne.n	80087fe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80087f8:	2301      	movs	r3, #1
 80087fa:	60fb      	str	r3, [r7, #12]
 80087fc:	e001      	b.n	8008802 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80087fe:	2300      	movs	r3, #0
 8008800:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008802:	f001 fc6b 	bl	800a0dc <vPortExitCritical>

	return xReturn;
 8008806:	68fb      	ldr	r3, [r7, #12]
}
 8008808:	4618      	mov	r0, r3
 800880a:	3710      	adds	r7, #16
 800880c:	46bd      	mov	sp, r7
 800880e:	bd80      	pop	{r7, pc}

08008810 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b084      	sub	sp, #16
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008818:	f001 fc2e 	bl	800a078 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008824:	429a      	cmp	r2, r3
 8008826:	d102      	bne.n	800882e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008828:	2301      	movs	r3, #1
 800882a:	60fb      	str	r3, [r7, #12]
 800882c:	e001      	b.n	8008832 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800882e:	2300      	movs	r3, #0
 8008830:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008832:	f001 fc53 	bl	800a0dc <vPortExitCritical>

	return xReturn;
 8008836:	68fb      	ldr	r3, [r7, #12]
}
 8008838:	4618      	mov	r0, r3
 800883a:	3710      	adds	r7, #16
 800883c:	46bd      	mov	sp, r7
 800883e:	bd80      	pop	{r7, pc}

08008840 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008840:	b480      	push	{r7}
 8008842:	b085      	sub	sp, #20
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
 8008848:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800884a:	2300      	movs	r3, #0
 800884c:	60fb      	str	r3, [r7, #12]
 800884e:	e014      	b.n	800887a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008850:	4a0f      	ldr	r2, [pc, #60]	@ (8008890 <vQueueAddToRegistry+0x50>)
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d10b      	bne.n	8008874 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800885c:	490c      	ldr	r1, [pc, #48]	@ (8008890 <vQueueAddToRegistry+0x50>)
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	683a      	ldr	r2, [r7, #0]
 8008862:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008866:	4a0a      	ldr	r2, [pc, #40]	@ (8008890 <vQueueAddToRegistry+0x50>)
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	00db      	lsls	r3, r3, #3
 800886c:	4413      	add	r3, r2
 800886e:	687a      	ldr	r2, [r7, #4]
 8008870:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008872:	e006      	b.n	8008882 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	3301      	adds	r3, #1
 8008878:	60fb      	str	r3, [r7, #12]
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	2b07      	cmp	r3, #7
 800887e:	d9e7      	bls.n	8008850 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008880:	bf00      	nop
 8008882:	bf00      	nop
 8008884:	3714      	adds	r7, #20
 8008886:	46bd      	mov	sp, r7
 8008888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888c:	4770      	bx	lr
 800888e:	bf00      	nop
 8008890:	2000ba78 	.word	0x2000ba78

08008894 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008894:	b580      	push	{r7, lr}
 8008896:	b086      	sub	sp, #24
 8008898:	af00      	add	r7, sp, #0
 800889a:	60f8      	str	r0, [r7, #12]
 800889c:	60b9      	str	r1, [r7, #8]
 800889e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80088a4:	f001 fbe8 	bl	800a078 <vPortEnterCritical>
 80088a8:	697b      	ldr	r3, [r7, #20]
 80088aa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80088ae:	b25b      	sxtb	r3, r3
 80088b0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80088b4:	d103      	bne.n	80088be <vQueueWaitForMessageRestricted+0x2a>
 80088b6:	697b      	ldr	r3, [r7, #20]
 80088b8:	2200      	movs	r2, #0
 80088ba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80088be:	697b      	ldr	r3, [r7, #20]
 80088c0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80088c4:	b25b      	sxtb	r3, r3
 80088c6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80088ca:	d103      	bne.n	80088d4 <vQueueWaitForMessageRestricted+0x40>
 80088cc:	697b      	ldr	r3, [r7, #20]
 80088ce:	2200      	movs	r2, #0
 80088d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80088d4:	f001 fc02 	bl	800a0dc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80088d8:	697b      	ldr	r3, [r7, #20]
 80088da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d106      	bne.n	80088ee <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80088e0:	697b      	ldr	r3, [r7, #20]
 80088e2:	3324      	adds	r3, #36	@ 0x24
 80088e4:	687a      	ldr	r2, [r7, #4]
 80088e6:	68b9      	ldr	r1, [r7, #8]
 80088e8:	4618      	mov	r0, r3
 80088ea:	f000 fc45 	bl	8009178 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80088ee:	6978      	ldr	r0, [r7, #20]
 80088f0:	f7ff ff26 	bl	8008740 <prvUnlockQueue>
	}
 80088f4:	bf00      	nop
 80088f6:	3718      	adds	r7, #24
 80088f8:	46bd      	mov	sp, r7
 80088fa:	bd80      	pop	{r7, pc}

080088fc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b08e      	sub	sp, #56	@ 0x38
 8008900:	af04      	add	r7, sp, #16
 8008902:	60f8      	str	r0, [r7, #12]
 8008904:	60b9      	str	r1, [r7, #8]
 8008906:	607a      	str	r2, [r7, #4]
 8008908:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800890a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800890c:	2b00      	cmp	r3, #0
 800890e:	d10b      	bne.n	8008928 <xTaskCreateStatic+0x2c>
	__asm volatile
 8008910:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008914:	f383 8811 	msr	BASEPRI, r3
 8008918:	f3bf 8f6f 	isb	sy
 800891c:	f3bf 8f4f 	dsb	sy
 8008920:	623b      	str	r3, [r7, #32]
}
 8008922:	bf00      	nop
 8008924:	bf00      	nop
 8008926:	e7fd      	b.n	8008924 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008928:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800892a:	2b00      	cmp	r3, #0
 800892c:	d10b      	bne.n	8008946 <xTaskCreateStatic+0x4a>
	__asm volatile
 800892e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008932:	f383 8811 	msr	BASEPRI, r3
 8008936:	f3bf 8f6f 	isb	sy
 800893a:	f3bf 8f4f 	dsb	sy
 800893e:	61fb      	str	r3, [r7, #28]
}
 8008940:	bf00      	nop
 8008942:	bf00      	nop
 8008944:	e7fd      	b.n	8008942 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008946:	235c      	movs	r3, #92	@ 0x5c
 8008948:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800894a:	693b      	ldr	r3, [r7, #16]
 800894c:	2b5c      	cmp	r3, #92	@ 0x5c
 800894e:	d00b      	beq.n	8008968 <xTaskCreateStatic+0x6c>
	__asm volatile
 8008950:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008954:	f383 8811 	msr	BASEPRI, r3
 8008958:	f3bf 8f6f 	isb	sy
 800895c:	f3bf 8f4f 	dsb	sy
 8008960:	61bb      	str	r3, [r7, #24]
}
 8008962:	bf00      	nop
 8008964:	bf00      	nop
 8008966:	e7fd      	b.n	8008964 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008968:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800896a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800896c:	2b00      	cmp	r3, #0
 800896e:	d01e      	beq.n	80089ae <xTaskCreateStatic+0xb2>
 8008970:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008972:	2b00      	cmp	r3, #0
 8008974:	d01b      	beq.n	80089ae <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008976:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008978:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800897a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800897c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800897e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008982:	2202      	movs	r2, #2
 8008984:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008988:	2300      	movs	r3, #0
 800898a:	9303      	str	r3, [sp, #12]
 800898c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800898e:	9302      	str	r3, [sp, #8]
 8008990:	f107 0314 	add.w	r3, r7, #20
 8008994:	9301      	str	r3, [sp, #4]
 8008996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008998:	9300      	str	r3, [sp, #0]
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	687a      	ldr	r2, [r7, #4]
 800899e:	68b9      	ldr	r1, [r7, #8]
 80089a0:	68f8      	ldr	r0, [r7, #12]
 80089a2:	f000 f850 	bl	8008a46 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80089a6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80089a8:	f000 f8de 	bl	8008b68 <prvAddNewTaskToReadyList>
 80089ac:	e001      	b.n	80089b2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80089ae:	2300      	movs	r3, #0
 80089b0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80089b2:	697b      	ldr	r3, [r7, #20]
	}
 80089b4:	4618      	mov	r0, r3
 80089b6:	3728      	adds	r7, #40	@ 0x28
 80089b8:	46bd      	mov	sp, r7
 80089ba:	bd80      	pop	{r7, pc}

080089bc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80089bc:	b580      	push	{r7, lr}
 80089be:	b08c      	sub	sp, #48	@ 0x30
 80089c0:	af04      	add	r7, sp, #16
 80089c2:	60f8      	str	r0, [r7, #12]
 80089c4:	60b9      	str	r1, [r7, #8]
 80089c6:	603b      	str	r3, [r7, #0]
 80089c8:	4613      	mov	r3, r2
 80089ca:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80089cc:	88fb      	ldrh	r3, [r7, #6]
 80089ce:	009b      	lsls	r3, r3, #2
 80089d0:	4618      	mov	r0, r3
 80089d2:	f001 fc73 	bl	800a2bc <pvPortMalloc>
 80089d6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80089d8:	697b      	ldr	r3, [r7, #20]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d00e      	beq.n	80089fc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80089de:	205c      	movs	r0, #92	@ 0x5c
 80089e0:	f001 fc6c 	bl	800a2bc <pvPortMalloc>
 80089e4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80089e6:	69fb      	ldr	r3, [r7, #28]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d003      	beq.n	80089f4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80089ec:	69fb      	ldr	r3, [r7, #28]
 80089ee:	697a      	ldr	r2, [r7, #20]
 80089f0:	631a      	str	r2, [r3, #48]	@ 0x30
 80089f2:	e005      	b.n	8008a00 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80089f4:	6978      	ldr	r0, [r7, #20]
 80089f6:	f001 fd2f 	bl	800a458 <vPortFree>
 80089fa:	e001      	b.n	8008a00 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80089fc:	2300      	movs	r3, #0
 80089fe:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008a00:	69fb      	ldr	r3, [r7, #28]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d017      	beq.n	8008a36 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008a06:	69fb      	ldr	r3, [r7, #28]
 8008a08:	2200      	movs	r2, #0
 8008a0a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008a0e:	88fa      	ldrh	r2, [r7, #6]
 8008a10:	2300      	movs	r3, #0
 8008a12:	9303      	str	r3, [sp, #12]
 8008a14:	69fb      	ldr	r3, [r7, #28]
 8008a16:	9302      	str	r3, [sp, #8]
 8008a18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a1a:	9301      	str	r3, [sp, #4]
 8008a1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a1e:	9300      	str	r3, [sp, #0]
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	68b9      	ldr	r1, [r7, #8]
 8008a24:	68f8      	ldr	r0, [r7, #12]
 8008a26:	f000 f80e 	bl	8008a46 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008a2a:	69f8      	ldr	r0, [r7, #28]
 8008a2c:	f000 f89c 	bl	8008b68 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008a30:	2301      	movs	r3, #1
 8008a32:	61bb      	str	r3, [r7, #24]
 8008a34:	e002      	b.n	8008a3c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008a36:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008a3a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008a3c:	69bb      	ldr	r3, [r7, #24]
	}
 8008a3e:	4618      	mov	r0, r3
 8008a40:	3720      	adds	r7, #32
 8008a42:	46bd      	mov	sp, r7
 8008a44:	bd80      	pop	{r7, pc}

08008a46 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008a46:	b580      	push	{r7, lr}
 8008a48:	b088      	sub	sp, #32
 8008a4a:	af00      	add	r7, sp, #0
 8008a4c:	60f8      	str	r0, [r7, #12]
 8008a4e:	60b9      	str	r1, [r7, #8]
 8008a50:	607a      	str	r2, [r7, #4]
 8008a52:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008a54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a56:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	009b      	lsls	r3, r3, #2
 8008a5c:	461a      	mov	r2, r3
 8008a5e:	21a5      	movs	r1, #165	@ 0xa5
 8008a60:	f014 fd16 	bl	801d490 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008a64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a66:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008a6e:	3b01      	subs	r3, #1
 8008a70:	009b      	lsls	r3, r3, #2
 8008a72:	4413      	add	r3, r2
 8008a74:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008a76:	69bb      	ldr	r3, [r7, #24]
 8008a78:	f023 0307 	bic.w	r3, r3, #7
 8008a7c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008a7e:	69bb      	ldr	r3, [r7, #24]
 8008a80:	f003 0307 	and.w	r3, r3, #7
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d00b      	beq.n	8008aa0 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8008a88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a8c:	f383 8811 	msr	BASEPRI, r3
 8008a90:	f3bf 8f6f 	isb	sy
 8008a94:	f3bf 8f4f 	dsb	sy
 8008a98:	617b      	str	r3, [r7, #20]
}
 8008a9a:	bf00      	nop
 8008a9c:	bf00      	nop
 8008a9e:	e7fd      	b.n	8008a9c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008aa0:	68bb      	ldr	r3, [r7, #8]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d01f      	beq.n	8008ae6 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	61fb      	str	r3, [r7, #28]
 8008aaa:	e012      	b.n	8008ad2 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008aac:	68ba      	ldr	r2, [r7, #8]
 8008aae:	69fb      	ldr	r3, [r7, #28]
 8008ab0:	4413      	add	r3, r2
 8008ab2:	7819      	ldrb	r1, [r3, #0]
 8008ab4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008ab6:	69fb      	ldr	r3, [r7, #28]
 8008ab8:	4413      	add	r3, r2
 8008aba:	3334      	adds	r3, #52	@ 0x34
 8008abc:	460a      	mov	r2, r1
 8008abe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008ac0:	68ba      	ldr	r2, [r7, #8]
 8008ac2:	69fb      	ldr	r3, [r7, #28]
 8008ac4:	4413      	add	r3, r2
 8008ac6:	781b      	ldrb	r3, [r3, #0]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d006      	beq.n	8008ada <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008acc:	69fb      	ldr	r3, [r7, #28]
 8008ace:	3301      	adds	r3, #1
 8008ad0:	61fb      	str	r3, [r7, #28]
 8008ad2:	69fb      	ldr	r3, [r7, #28]
 8008ad4:	2b0f      	cmp	r3, #15
 8008ad6:	d9e9      	bls.n	8008aac <prvInitialiseNewTask+0x66>
 8008ad8:	e000      	b.n	8008adc <prvInitialiseNewTask+0x96>
			{
				break;
 8008ada:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008adc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ade:	2200      	movs	r2, #0
 8008ae0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008ae4:	e003      	b.n	8008aee <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008ae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ae8:	2200      	movs	r2, #0
 8008aea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008aee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008af0:	2b37      	cmp	r3, #55	@ 0x37
 8008af2:	d901      	bls.n	8008af8 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008af4:	2337      	movs	r3, #55	@ 0x37
 8008af6:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008af8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008afa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008afc:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008afe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b00:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008b02:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008b04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b06:	2200      	movs	r2, #0
 8008b08:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008b0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b0c:	3304      	adds	r3, #4
 8008b0e:	4618      	mov	r0, r3
 8008b10:	f7ff f966 	bl	8007de0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008b14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b16:	3318      	adds	r3, #24
 8008b18:	4618      	mov	r0, r3
 8008b1a:	f7ff f961 	bl	8007de0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008b1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008b22:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b26:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008b2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b2c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008b2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b30:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008b32:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008b34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b36:	2200      	movs	r2, #0
 8008b38:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008b3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008b42:	683a      	ldr	r2, [r7, #0]
 8008b44:	68f9      	ldr	r1, [r7, #12]
 8008b46:	69b8      	ldr	r0, [r7, #24]
 8008b48:	f001 f966 	bl	8009e18 <pxPortInitialiseStack>
 8008b4c:	4602      	mov	r2, r0
 8008b4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b50:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008b52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d002      	beq.n	8008b5e <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008b58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008b5c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008b5e:	bf00      	nop
 8008b60:	3720      	adds	r7, #32
 8008b62:	46bd      	mov	sp, r7
 8008b64:	bd80      	pop	{r7, pc}
	...

08008b68 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b082      	sub	sp, #8
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008b70:	f001 fa82 	bl	800a078 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008b74:	4b2d      	ldr	r3, [pc, #180]	@ (8008c2c <prvAddNewTaskToReadyList+0xc4>)
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	3301      	adds	r3, #1
 8008b7a:	4a2c      	ldr	r2, [pc, #176]	@ (8008c2c <prvAddNewTaskToReadyList+0xc4>)
 8008b7c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008b7e:	4b2c      	ldr	r3, [pc, #176]	@ (8008c30 <prvAddNewTaskToReadyList+0xc8>)
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d109      	bne.n	8008b9a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008b86:	4a2a      	ldr	r2, [pc, #168]	@ (8008c30 <prvAddNewTaskToReadyList+0xc8>)
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008b8c:	4b27      	ldr	r3, [pc, #156]	@ (8008c2c <prvAddNewTaskToReadyList+0xc4>)
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	2b01      	cmp	r3, #1
 8008b92:	d110      	bne.n	8008bb6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008b94:	f000 fc46 	bl	8009424 <prvInitialiseTaskLists>
 8008b98:	e00d      	b.n	8008bb6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008b9a:	4b26      	ldr	r3, [pc, #152]	@ (8008c34 <prvAddNewTaskToReadyList+0xcc>)
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d109      	bne.n	8008bb6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008ba2:	4b23      	ldr	r3, [pc, #140]	@ (8008c30 <prvAddNewTaskToReadyList+0xc8>)
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bac:	429a      	cmp	r2, r3
 8008bae:	d802      	bhi.n	8008bb6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008bb0:	4a1f      	ldr	r2, [pc, #124]	@ (8008c30 <prvAddNewTaskToReadyList+0xc8>)
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008bb6:	4b20      	ldr	r3, [pc, #128]	@ (8008c38 <prvAddNewTaskToReadyList+0xd0>)
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	3301      	adds	r3, #1
 8008bbc:	4a1e      	ldr	r2, [pc, #120]	@ (8008c38 <prvAddNewTaskToReadyList+0xd0>)
 8008bbe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008bc0:	4b1d      	ldr	r3, [pc, #116]	@ (8008c38 <prvAddNewTaskToReadyList+0xd0>)
 8008bc2:	681a      	ldr	r2, [r3, #0]
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008bcc:	4b1b      	ldr	r3, [pc, #108]	@ (8008c3c <prvAddNewTaskToReadyList+0xd4>)
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	429a      	cmp	r2, r3
 8008bd2:	d903      	bls.n	8008bdc <prvAddNewTaskToReadyList+0x74>
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bd8:	4a18      	ldr	r2, [pc, #96]	@ (8008c3c <prvAddNewTaskToReadyList+0xd4>)
 8008bda:	6013      	str	r3, [r2, #0]
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008be0:	4613      	mov	r3, r2
 8008be2:	009b      	lsls	r3, r3, #2
 8008be4:	4413      	add	r3, r2
 8008be6:	009b      	lsls	r3, r3, #2
 8008be8:	4a15      	ldr	r2, [pc, #84]	@ (8008c40 <prvAddNewTaskToReadyList+0xd8>)
 8008bea:	441a      	add	r2, r3
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	3304      	adds	r3, #4
 8008bf0:	4619      	mov	r1, r3
 8008bf2:	4610      	mov	r0, r2
 8008bf4:	f7ff f901 	bl	8007dfa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008bf8:	f001 fa70 	bl	800a0dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008bfc:	4b0d      	ldr	r3, [pc, #52]	@ (8008c34 <prvAddNewTaskToReadyList+0xcc>)
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d00e      	beq.n	8008c22 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008c04:	4b0a      	ldr	r3, [pc, #40]	@ (8008c30 <prvAddNewTaskToReadyList+0xc8>)
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c0e:	429a      	cmp	r2, r3
 8008c10:	d207      	bcs.n	8008c22 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008c12:	4b0c      	ldr	r3, [pc, #48]	@ (8008c44 <prvAddNewTaskToReadyList+0xdc>)
 8008c14:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c18:	601a      	str	r2, [r3, #0]
 8008c1a:	f3bf 8f4f 	dsb	sy
 8008c1e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008c22:	bf00      	nop
 8008c24:	3708      	adds	r7, #8
 8008c26:	46bd      	mov	sp, r7
 8008c28:	bd80      	pop	{r7, pc}
 8008c2a:	bf00      	nop
 8008c2c:	2000bf8c 	.word	0x2000bf8c
 8008c30:	2000bab8 	.word	0x2000bab8
 8008c34:	2000bf98 	.word	0x2000bf98
 8008c38:	2000bfa8 	.word	0x2000bfa8
 8008c3c:	2000bf94 	.word	0x2000bf94
 8008c40:	2000babc 	.word	0x2000babc
 8008c44:	e000ed04 	.word	0xe000ed04

08008c48 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b084      	sub	sp, #16
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008c50:	2300      	movs	r3, #0
 8008c52:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d018      	beq.n	8008c8c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008c5a:	4b14      	ldr	r3, [pc, #80]	@ (8008cac <vTaskDelay+0x64>)
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d00b      	beq.n	8008c7a <vTaskDelay+0x32>
	__asm volatile
 8008c62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c66:	f383 8811 	msr	BASEPRI, r3
 8008c6a:	f3bf 8f6f 	isb	sy
 8008c6e:	f3bf 8f4f 	dsb	sy
 8008c72:	60bb      	str	r3, [r7, #8]
}
 8008c74:	bf00      	nop
 8008c76:	bf00      	nop
 8008c78:	e7fd      	b.n	8008c76 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008c7a:	f000 f883 	bl	8008d84 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008c7e:	2100      	movs	r1, #0
 8008c80:	6878      	ldr	r0, [r7, #4]
 8008c82:	f000 fd1b 	bl	80096bc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008c86:	f000 f88b 	bl	8008da0 <xTaskResumeAll>
 8008c8a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d107      	bne.n	8008ca2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8008c92:	4b07      	ldr	r3, [pc, #28]	@ (8008cb0 <vTaskDelay+0x68>)
 8008c94:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c98:	601a      	str	r2, [r3, #0]
 8008c9a:	f3bf 8f4f 	dsb	sy
 8008c9e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008ca2:	bf00      	nop
 8008ca4:	3710      	adds	r7, #16
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	bd80      	pop	{r7, pc}
 8008caa:	bf00      	nop
 8008cac:	2000bfb4 	.word	0x2000bfb4
 8008cb0:	e000ed04 	.word	0xe000ed04

08008cb4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b08a      	sub	sp, #40	@ 0x28
 8008cb8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008cba:	2300      	movs	r3, #0
 8008cbc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008cc2:	463a      	mov	r2, r7
 8008cc4:	1d39      	adds	r1, r7, #4
 8008cc6:	f107 0308 	add.w	r3, r7, #8
 8008cca:	4618      	mov	r0, r3
 8008ccc:	f7ff f834 	bl	8007d38 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008cd0:	6839      	ldr	r1, [r7, #0]
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	68ba      	ldr	r2, [r7, #8]
 8008cd6:	9202      	str	r2, [sp, #8]
 8008cd8:	9301      	str	r3, [sp, #4]
 8008cda:	2300      	movs	r3, #0
 8008cdc:	9300      	str	r3, [sp, #0]
 8008cde:	2300      	movs	r3, #0
 8008ce0:	460a      	mov	r2, r1
 8008ce2:	4922      	ldr	r1, [pc, #136]	@ (8008d6c <vTaskStartScheduler+0xb8>)
 8008ce4:	4822      	ldr	r0, [pc, #136]	@ (8008d70 <vTaskStartScheduler+0xbc>)
 8008ce6:	f7ff fe09 	bl	80088fc <xTaskCreateStatic>
 8008cea:	4603      	mov	r3, r0
 8008cec:	4a21      	ldr	r2, [pc, #132]	@ (8008d74 <vTaskStartScheduler+0xc0>)
 8008cee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008cf0:	4b20      	ldr	r3, [pc, #128]	@ (8008d74 <vTaskStartScheduler+0xc0>)
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d002      	beq.n	8008cfe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008cf8:	2301      	movs	r3, #1
 8008cfa:	617b      	str	r3, [r7, #20]
 8008cfc:	e001      	b.n	8008d02 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008cfe:	2300      	movs	r3, #0
 8008d00:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008d02:	697b      	ldr	r3, [r7, #20]
 8008d04:	2b01      	cmp	r3, #1
 8008d06:	d102      	bne.n	8008d0e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008d08:	f000 fd2c 	bl	8009764 <xTimerCreateTimerTask>
 8008d0c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008d0e:	697b      	ldr	r3, [r7, #20]
 8008d10:	2b01      	cmp	r3, #1
 8008d12:	d116      	bne.n	8008d42 <vTaskStartScheduler+0x8e>
	__asm volatile
 8008d14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d18:	f383 8811 	msr	BASEPRI, r3
 8008d1c:	f3bf 8f6f 	isb	sy
 8008d20:	f3bf 8f4f 	dsb	sy
 8008d24:	613b      	str	r3, [r7, #16]
}
 8008d26:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008d28:	4b13      	ldr	r3, [pc, #76]	@ (8008d78 <vTaskStartScheduler+0xc4>)
 8008d2a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008d2e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008d30:	4b12      	ldr	r3, [pc, #72]	@ (8008d7c <vTaskStartScheduler+0xc8>)
 8008d32:	2201      	movs	r2, #1
 8008d34:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008d36:	4b12      	ldr	r3, [pc, #72]	@ (8008d80 <vTaskStartScheduler+0xcc>)
 8008d38:	2200      	movs	r2, #0
 8008d3a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008d3c:	f001 f8f8 	bl	8009f30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008d40:	e00f      	b.n	8008d62 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008d42:	697b      	ldr	r3, [r7, #20]
 8008d44:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008d48:	d10b      	bne.n	8008d62 <vTaskStartScheduler+0xae>
	__asm volatile
 8008d4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d4e:	f383 8811 	msr	BASEPRI, r3
 8008d52:	f3bf 8f6f 	isb	sy
 8008d56:	f3bf 8f4f 	dsb	sy
 8008d5a:	60fb      	str	r3, [r7, #12]
}
 8008d5c:	bf00      	nop
 8008d5e:	bf00      	nop
 8008d60:	e7fd      	b.n	8008d5e <vTaskStartScheduler+0xaa>
}
 8008d62:	bf00      	nop
 8008d64:	3718      	adds	r7, #24
 8008d66:	46bd      	mov	sp, r7
 8008d68:	bd80      	pop	{r7, pc}
 8008d6a:	bf00      	nop
 8008d6c:	0801e6d4 	.word	0x0801e6d4
 8008d70:	080093f5 	.word	0x080093f5
 8008d74:	2000bfb0 	.word	0x2000bfb0
 8008d78:	2000bfac 	.word	0x2000bfac
 8008d7c:	2000bf98 	.word	0x2000bf98
 8008d80:	2000bf90 	.word	0x2000bf90

08008d84 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008d84:	b480      	push	{r7}
 8008d86:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008d88:	4b04      	ldr	r3, [pc, #16]	@ (8008d9c <vTaskSuspendAll+0x18>)
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	3301      	adds	r3, #1
 8008d8e:	4a03      	ldr	r2, [pc, #12]	@ (8008d9c <vTaskSuspendAll+0x18>)
 8008d90:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008d92:	bf00      	nop
 8008d94:	46bd      	mov	sp, r7
 8008d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9a:	4770      	bx	lr
 8008d9c:	2000bfb4 	.word	0x2000bfb4

08008da0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b084      	sub	sp, #16
 8008da4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008da6:	2300      	movs	r3, #0
 8008da8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008daa:	2300      	movs	r3, #0
 8008dac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008dae:	4b42      	ldr	r3, [pc, #264]	@ (8008eb8 <xTaskResumeAll+0x118>)
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d10b      	bne.n	8008dce <xTaskResumeAll+0x2e>
	__asm volatile
 8008db6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dba:	f383 8811 	msr	BASEPRI, r3
 8008dbe:	f3bf 8f6f 	isb	sy
 8008dc2:	f3bf 8f4f 	dsb	sy
 8008dc6:	603b      	str	r3, [r7, #0]
}
 8008dc8:	bf00      	nop
 8008dca:	bf00      	nop
 8008dcc:	e7fd      	b.n	8008dca <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008dce:	f001 f953 	bl	800a078 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008dd2:	4b39      	ldr	r3, [pc, #228]	@ (8008eb8 <xTaskResumeAll+0x118>)
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	3b01      	subs	r3, #1
 8008dd8:	4a37      	ldr	r2, [pc, #220]	@ (8008eb8 <xTaskResumeAll+0x118>)
 8008dda:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008ddc:	4b36      	ldr	r3, [pc, #216]	@ (8008eb8 <xTaskResumeAll+0x118>)
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d162      	bne.n	8008eaa <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008de4:	4b35      	ldr	r3, [pc, #212]	@ (8008ebc <xTaskResumeAll+0x11c>)
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d05e      	beq.n	8008eaa <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008dec:	e02f      	b.n	8008e4e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008dee:	4b34      	ldr	r3, [pc, #208]	@ (8008ec0 <xTaskResumeAll+0x120>)
 8008df0:	68db      	ldr	r3, [r3, #12]
 8008df2:	68db      	ldr	r3, [r3, #12]
 8008df4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	3318      	adds	r3, #24
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	f7ff f85a 	bl	8007eb4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	3304      	adds	r3, #4
 8008e04:	4618      	mov	r0, r3
 8008e06:	f7ff f855 	bl	8007eb4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e0e:	4b2d      	ldr	r3, [pc, #180]	@ (8008ec4 <xTaskResumeAll+0x124>)
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	429a      	cmp	r2, r3
 8008e14:	d903      	bls.n	8008e1e <xTaskResumeAll+0x7e>
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e1a:	4a2a      	ldr	r2, [pc, #168]	@ (8008ec4 <xTaskResumeAll+0x124>)
 8008e1c:	6013      	str	r3, [r2, #0]
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e22:	4613      	mov	r3, r2
 8008e24:	009b      	lsls	r3, r3, #2
 8008e26:	4413      	add	r3, r2
 8008e28:	009b      	lsls	r3, r3, #2
 8008e2a:	4a27      	ldr	r2, [pc, #156]	@ (8008ec8 <xTaskResumeAll+0x128>)
 8008e2c:	441a      	add	r2, r3
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	3304      	adds	r3, #4
 8008e32:	4619      	mov	r1, r3
 8008e34:	4610      	mov	r0, r2
 8008e36:	f7fe ffe0 	bl	8007dfa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e3e:	4b23      	ldr	r3, [pc, #140]	@ (8008ecc <xTaskResumeAll+0x12c>)
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e44:	429a      	cmp	r2, r3
 8008e46:	d302      	bcc.n	8008e4e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8008e48:	4b21      	ldr	r3, [pc, #132]	@ (8008ed0 <xTaskResumeAll+0x130>)
 8008e4a:	2201      	movs	r2, #1
 8008e4c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008e4e:	4b1c      	ldr	r3, [pc, #112]	@ (8008ec0 <xTaskResumeAll+0x120>)
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d1cb      	bne.n	8008dee <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d001      	beq.n	8008e60 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008e5c:	f000 fb80 	bl	8009560 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008e60:	4b1c      	ldr	r3, [pc, #112]	@ (8008ed4 <xTaskResumeAll+0x134>)
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d010      	beq.n	8008e8e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008e6c:	f000 f846 	bl	8008efc <xTaskIncrementTick>
 8008e70:	4603      	mov	r3, r0
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d002      	beq.n	8008e7c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8008e76:	4b16      	ldr	r3, [pc, #88]	@ (8008ed0 <xTaskResumeAll+0x130>)
 8008e78:	2201      	movs	r2, #1
 8008e7a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	3b01      	subs	r3, #1
 8008e80:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d1f1      	bne.n	8008e6c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8008e88:	4b12      	ldr	r3, [pc, #72]	@ (8008ed4 <xTaskResumeAll+0x134>)
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008e8e:	4b10      	ldr	r3, [pc, #64]	@ (8008ed0 <xTaskResumeAll+0x130>)
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d009      	beq.n	8008eaa <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008e96:	2301      	movs	r3, #1
 8008e98:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008e9a:	4b0f      	ldr	r3, [pc, #60]	@ (8008ed8 <xTaskResumeAll+0x138>)
 8008e9c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008ea0:	601a      	str	r2, [r3, #0]
 8008ea2:	f3bf 8f4f 	dsb	sy
 8008ea6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008eaa:	f001 f917 	bl	800a0dc <vPortExitCritical>

	return xAlreadyYielded;
 8008eae:	68bb      	ldr	r3, [r7, #8]
}
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	3710      	adds	r7, #16
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	bd80      	pop	{r7, pc}
 8008eb8:	2000bfb4 	.word	0x2000bfb4
 8008ebc:	2000bf8c 	.word	0x2000bf8c
 8008ec0:	2000bf4c 	.word	0x2000bf4c
 8008ec4:	2000bf94 	.word	0x2000bf94
 8008ec8:	2000babc 	.word	0x2000babc
 8008ecc:	2000bab8 	.word	0x2000bab8
 8008ed0:	2000bfa0 	.word	0x2000bfa0
 8008ed4:	2000bf9c 	.word	0x2000bf9c
 8008ed8:	e000ed04 	.word	0xe000ed04

08008edc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008edc:	b480      	push	{r7}
 8008ede:	b083      	sub	sp, #12
 8008ee0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008ee2:	4b05      	ldr	r3, [pc, #20]	@ (8008ef8 <xTaskGetTickCount+0x1c>)
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008ee8:	687b      	ldr	r3, [r7, #4]
}
 8008eea:	4618      	mov	r0, r3
 8008eec:	370c      	adds	r7, #12
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef4:	4770      	bx	lr
 8008ef6:	bf00      	nop
 8008ef8:	2000bf90 	.word	0x2000bf90

08008efc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b086      	sub	sp, #24
 8008f00:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008f02:	2300      	movs	r3, #0
 8008f04:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008f06:	4b4f      	ldr	r3, [pc, #316]	@ (8009044 <xTaskIncrementTick+0x148>)
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	f040 8090 	bne.w	8009030 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008f10:	4b4d      	ldr	r3, [pc, #308]	@ (8009048 <xTaskIncrementTick+0x14c>)
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	3301      	adds	r3, #1
 8008f16:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008f18:	4a4b      	ldr	r2, [pc, #300]	@ (8009048 <xTaskIncrementTick+0x14c>)
 8008f1a:	693b      	ldr	r3, [r7, #16]
 8008f1c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008f1e:	693b      	ldr	r3, [r7, #16]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d121      	bne.n	8008f68 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008f24:	4b49      	ldr	r3, [pc, #292]	@ (800904c <xTaskIncrementTick+0x150>)
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d00b      	beq.n	8008f46 <xTaskIncrementTick+0x4a>
	__asm volatile
 8008f2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f32:	f383 8811 	msr	BASEPRI, r3
 8008f36:	f3bf 8f6f 	isb	sy
 8008f3a:	f3bf 8f4f 	dsb	sy
 8008f3e:	603b      	str	r3, [r7, #0]
}
 8008f40:	bf00      	nop
 8008f42:	bf00      	nop
 8008f44:	e7fd      	b.n	8008f42 <xTaskIncrementTick+0x46>
 8008f46:	4b41      	ldr	r3, [pc, #260]	@ (800904c <xTaskIncrementTick+0x150>)
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	60fb      	str	r3, [r7, #12]
 8008f4c:	4b40      	ldr	r3, [pc, #256]	@ (8009050 <xTaskIncrementTick+0x154>)
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	4a3e      	ldr	r2, [pc, #248]	@ (800904c <xTaskIncrementTick+0x150>)
 8008f52:	6013      	str	r3, [r2, #0]
 8008f54:	4a3e      	ldr	r2, [pc, #248]	@ (8009050 <xTaskIncrementTick+0x154>)
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	6013      	str	r3, [r2, #0]
 8008f5a:	4b3e      	ldr	r3, [pc, #248]	@ (8009054 <xTaskIncrementTick+0x158>)
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	3301      	adds	r3, #1
 8008f60:	4a3c      	ldr	r2, [pc, #240]	@ (8009054 <xTaskIncrementTick+0x158>)
 8008f62:	6013      	str	r3, [r2, #0]
 8008f64:	f000 fafc 	bl	8009560 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008f68:	4b3b      	ldr	r3, [pc, #236]	@ (8009058 <xTaskIncrementTick+0x15c>)
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	693a      	ldr	r2, [r7, #16]
 8008f6e:	429a      	cmp	r2, r3
 8008f70:	d349      	bcc.n	8009006 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008f72:	4b36      	ldr	r3, [pc, #216]	@ (800904c <xTaskIncrementTick+0x150>)
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d104      	bne.n	8008f86 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f7c:	4b36      	ldr	r3, [pc, #216]	@ (8009058 <xTaskIncrementTick+0x15c>)
 8008f7e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008f82:	601a      	str	r2, [r3, #0]
					break;
 8008f84:	e03f      	b.n	8009006 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f86:	4b31      	ldr	r3, [pc, #196]	@ (800904c <xTaskIncrementTick+0x150>)
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	68db      	ldr	r3, [r3, #12]
 8008f8c:	68db      	ldr	r3, [r3, #12]
 8008f8e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008f90:	68bb      	ldr	r3, [r7, #8]
 8008f92:	685b      	ldr	r3, [r3, #4]
 8008f94:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008f96:	693a      	ldr	r2, [r7, #16]
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	429a      	cmp	r2, r3
 8008f9c:	d203      	bcs.n	8008fa6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008f9e:	4a2e      	ldr	r2, [pc, #184]	@ (8009058 <xTaskIncrementTick+0x15c>)
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008fa4:	e02f      	b.n	8009006 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008fa6:	68bb      	ldr	r3, [r7, #8]
 8008fa8:	3304      	adds	r3, #4
 8008faa:	4618      	mov	r0, r3
 8008fac:	f7fe ff82 	bl	8007eb4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008fb0:	68bb      	ldr	r3, [r7, #8]
 8008fb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d004      	beq.n	8008fc2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008fb8:	68bb      	ldr	r3, [r7, #8]
 8008fba:	3318      	adds	r3, #24
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	f7fe ff79 	bl	8007eb4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008fc2:	68bb      	ldr	r3, [r7, #8]
 8008fc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008fc6:	4b25      	ldr	r3, [pc, #148]	@ (800905c <xTaskIncrementTick+0x160>)
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	429a      	cmp	r2, r3
 8008fcc:	d903      	bls.n	8008fd6 <xTaskIncrementTick+0xda>
 8008fce:	68bb      	ldr	r3, [r7, #8]
 8008fd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fd2:	4a22      	ldr	r2, [pc, #136]	@ (800905c <xTaskIncrementTick+0x160>)
 8008fd4:	6013      	str	r3, [r2, #0]
 8008fd6:	68bb      	ldr	r3, [r7, #8]
 8008fd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008fda:	4613      	mov	r3, r2
 8008fdc:	009b      	lsls	r3, r3, #2
 8008fde:	4413      	add	r3, r2
 8008fe0:	009b      	lsls	r3, r3, #2
 8008fe2:	4a1f      	ldr	r2, [pc, #124]	@ (8009060 <xTaskIncrementTick+0x164>)
 8008fe4:	441a      	add	r2, r3
 8008fe6:	68bb      	ldr	r3, [r7, #8]
 8008fe8:	3304      	adds	r3, #4
 8008fea:	4619      	mov	r1, r3
 8008fec:	4610      	mov	r0, r2
 8008fee:	f7fe ff04 	bl	8007dfa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008ff2:	68bb      	ldr	r3, [r7, #8]
 8008ff4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ff6:	4b1b      	ldr	r3, [pc, #108]	@ (8009064 <xTaskIncrementTick+0x168>)
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ffc:	429a      	cmp	r2, r3
 8008ffe:	d3b8      	bcc.n	8008f72 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8009000:	2301      	movs	r3, #1
 8009002:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009004:	e7b5      	b.n	8008f72 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009006:	4b17      	ldr	r3, [pc, #92]	@ (8009064 <xTaskIncrementTick+0x168>)
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800900c:	4914      	ldr	r1, [pc, #80]	@ (8009060 <xTaskIncrementTick+0x164>)
 800900e:	4613      	mov	r3, r2
 8009010:	009b      	lsls	r3, r3, #2
 8009012:	4413      	add	r3, r2
 8009014:	009b      	lsls	r3, r3, #2
 8009016:	440b      	add	r3, r1
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	2b01      	cmp	r3, #1
 800901c:	d901      	bls.n	8009022 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800901e:	2301      	movs	r3, #1
 8009020:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009022:	4b11      	ldr	r3, [pc, #68]	@ (8009068 <xTaskIncrementTick+0x16c>)
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d007      	beq.n	800903a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800902a:	2301      	movs	r3, #1
 800902c:	617b      	str	r3, [r7, #20]
 800902e:	e004      	b.n	800903a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009030:	4b0e      	ldr	r3, [pc, #56]	@ (800906c <xTaskIncrementTick+0x170>)
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	3301      	adds	r3, #1
 8009036:	4a0d      	ldr	r2, [pc, #52]	@ (800906c <xTaskIncrementTick+0x170>)
 8009038:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800903a:	697b      	ldr	r3, [r7, #20]
}
 800903c:	4618      	mov	r0, r3
 800903e:	3718      	adds	r7, #24
 8009040:	46bd      	mov	sp, r7
 8009042:	bd80      	pop	{r7, pc}
 8009044:	2000bfb4 	.word	0x2000bfb4
 8009048:	2000bf90 	.word	0x2000bf90
 800904c:	2000bf44 	.word	0x2000bf44
 8009050:	2000bf48 	.word	0x2000bf48
 8009054:	2000bfa4 	.word	0x2000bfa4
 8009058:	2000bfac 	.word	0x2000bfac
 800905c:	2000bf94 	.word	0x2000bf94
 8009060:	2000babc 	.word	0x2000babc
 8009064:	2000bab8 	.word	0x2000bab8
 8009068:	2000bfa0 	.word	0x2000bfa0
 800906c:	2000bf9c 	.word	0x2000bf9c

08009070 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009070:	b480      	push	{r7}
 8009072:	b085      	sub	sp, #20
 8009074:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009076:	4b28      	ldr	r3, [pc, #160]	@ (8009118 <vTaskSwitchContext+0xa8>)
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d003      	beq.n	8009086 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800907e:	4b27      	ldr	r3, [pc, #156]	@ (800911c <vTaskSwitchContext+0xac>)
 8009080:	2201      	movs	r2, #1
 8009082:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009084:	e042      	b.n	800910c <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8009086:	4b25      	ldr	r3, [pc, #148]	@ (800911c <vTaskSwitchContext+0xac>)
 8009088:	2200      	movs	r2, #0
 800908a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800908c:	4b24      	ldr	r3, [pc, #144]	@ (8009120 <vTaskSwitchContext+0xb0>)
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	60fb      	str	r3, [r7, #12]
 8009092:	e011      	b.n	80090b8 <vTaskSwitchContext+0x48>
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d10b      	bne.n	80090b2 <vTaskSwitchContext+0x42>
	__asm volatile
 800909a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800909e:	f383 8811 	msr	BASEPRI, r3
 80090a2:	f3bf 8f6f 	isb	sy
 80090a6:	f3bf 8f4f 	dsb	sy
 80090aa:	607b      	str	r3, [r7, #4]
}
 80090ac:	bf00      	nop
 80090ae:	bf00      	nop
 80090b0:	e7fd      	b.n	80090ae <vTaskSwitchContext+0x3e>
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	3b01      	subs	r3, #1
 80090b6:	60fb      	str	r3, [r7, #12]
 80090b8:	491a      	ldr	r1, [pc, #104]	@ (8009124 <vTaskSwitchContext+0xb4>)
 80090ba:	68fa      	ldr	r2, [r7, #12]
 80090bc:	4613      	mov	r3, r2
 80090be:	009b      	lsls	r3, r3, #2
 80090c0:	4413      	add	r3, r2
 80090c2:	009b      	lsls	r3, r3, #2
 80090c4:	440b      	add	r3, r1
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d0e3      	beq.n	8009094 <vTaskSwitchContext+0x24>
 80090cc:	68fa      	ldr	r2, [r7, #12]
 80090ce:	4613      	mov	r3, r2
 80090d0:	009b      	lsls	r3, r3, #2
 80090d2:	4413      	add	r3, r2
 80090d4:	009b      	lsls	r3, r3, #2
 80090d6:	4a13      	ldr	r2, [pc, #76]	@ (8009124 <vTaskSwitchContext+0xb4>)
 80090d8:	4413      	add	r3, r2
 80090da:	60bb      	str	r3, [r7, #8]
 80090dc:	68bb      	ldr	r3, [r7, #8]
 80090de:	685b      	ldr	r3, [r3, #4]
 80090e0:	685a      	ldr	r2, [r3, #4]
 80090e2:	68bb      	ldr	r3, [r7, #8]
 80090e4:	605a      	str	r2, [r3, #4]
 80090e6:	68bb      	ldr	r3, [r7, #8]
 80090e8:	685a      	ldr	r2, [r3, #4]
 80090ea:	68bb      	ldr	r3, [r7, #8]
 80090ec:	3308      	adds	r3, #8
 80090ee:	429a      	cmp	r2, r3
 80090f0:	d104      	bne.n	80090fc <vTaskSwitchContext+0x8c>
 80090f2:	68bb      	ldr	r3, [r7, #8]
 80090f4:	685b      	ldr	r3, [r3, #4]
 80090f6:	685a      	ldr	r2, [r3, #4]
 80090f8:	68bb      	ldr	r3, [r7, #8]
 80090fa:	605a      	str	r2, [r3, #4]
 80090fc:	68bb      	ldr	r3, [r7, #8]
 80090fe:	685b      	ldr	r3, [r3, #4]
 8009100:	68db      	ldr	r3, [r3, #12]
 8009102:	4a09      	ldr	r2, [pc, #36]	@ (8009128 <vTaskSwitchContext+0xb8>)
 8009104:	6013      	str	r3, [r2, #0]
 8009106:	4a06      	ldr	r2, [pc, #24]	@ (8009120 <vTaskSwitchContext+0xb0>)
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	6013      	str	r3, [r2, #0]
}
 800910c:	bf00      	nop
 800910e:	3714      	adds	r7, #20
 8009110:	46bd      	mov	sp, r7
 8009112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009116:	4770      	bx	lr
 8009118:	2000bfb4 	.word	0x2000bfb4
 800911c:	2000bfa0 	.word	0x2000bfa0
 8009120:	2000bf94 	.word	0x2000bf94
 8009124:	2000babc 	.word	0x2000babc
 8009128:	2000bab8 	.word	0x2000bab8

0800912c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b084      	sub	sp, #16
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
 8009134:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d10b      	bne.n	8009154 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800913c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009140:	f383 8811 	msr	BASEPRI, r3
 8009144:	f3bf 8f6f 	isb	sy
 8009148:	f3bf 8f4f 	dsb	sy
 800914c:	60fb      	str	r3, [r7, #12]
}
 800914e:	bf00      	nop
 8009150:	bf00      	nop
 8009152:	e7fd      	b.n	8009150 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009154:	4b07      	ldr	r3, [pc, #28]	@ (8009174 <vTaskPlaceOnEventList+0x48>)
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	3318      	adds	r3, #24
 800915a:	4619      	mov	r1, r3
 800915c:	6878      	ldr	r0, [r7, #4]
 800915e:	f7fe fe70 	bl	8007e42 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009162:	2101      	movs	r1, #1
 8009164:	6838      	ldr	r0, [r7, #0]
 8009166:	f000 faa9 	bl	80096bc <prvAddCurrentTaskToDelayedList>
}
 800916a:	bf00      	nop
 800916c:	3710      	adds	r7, #16
 800916e:	46bd      	mov	sp, r7
 8009170:	bd80      	pop	{r7, pc}
 8009172:	bf00      	nop
 8009174:	2000bab8 	.word	0x2000bab8

08009178 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009178:	b580      	push	{r7, lr}
 800917a:	b086      	sub	sp, #24
 800917c:	af00      	add	r7, sp, #0
 800917e:	60f8      	str	r0, [r7, #12]
 8009180:	60b9      	str	r1, [r7, #8]
 8009182:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d10b      	bne.n	80091a2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800918a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800918e:	f383 8811 	msr	BASEPRI, r3
 8009192:	f3bf 8f6f 	isb	sy
 8009196:	f3bf 8f4f 	dsb	sy
 800919a:	617b      	str	r3, [r7, #20]
}
 800919c:	bf00      	nop
 800919e:	bf00      	nop
 80091a0:	e7fd      	b.n	800919e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80091a2:	4b0a      	ldr	r3, [pc, #40]	@ (80091cc <vTaskPlaceOnEventListRestricted+0x54>)
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	3318      	adds	r3, #24
 80091a8:	4619      	mov	r1, r3
 80091aa:	68f8      	ldr	r0, [r7, #12]
 80091ac:	f7fe fe25 	bl	8007dfa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d002      	beq.n	80091bc <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80091b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80091ba:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80091bc:	6879      	ldr	r1, [r7, #4]
 80091be:	68b8      	ldr	r0, [r7, #8]
 80091c0:	f000 fa7c 	bl	80096bc <prvAddCurrentTaskToDelayedList>
	}
 80091c4:	bf00      	nop
 80091c6:	3718      	adds	r7, #24
 80091c8:	46bd      	mov	sp, r7
 80091ca:	bd80      	pop	{r7, pc}
 80091cc:	2000bab8 	.word	0x2000bab8

080091d0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b086      	sub	sp, #24
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	68db      	ldr	r3, [r3, #12]
 80091dc:	68db      	ldr	r3, [r3, #12]
 80091de:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80091e0:	693b      	ldr	r3, [r7, #16]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d10b      	bne.n	80091fe <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80091e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091ea:	f383 8811 	msr	BASEPRI, r3
 80091ee:	f3bf 8f6f 	isb	sy
 80091f2:	f3bf 8f4f 	dsb	sy
 80091f6:	60fb      	str	r3, [r7, #12]
}
 80091f8:	bf00      	nop
 80091fa:	bf00      	nop
 80091fc:	e7fd      	b.n	80091fa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80091fe:	693b      	ldr	r3, [r7, #16]
 8009200:	3318      	adds	r3, #24
 8009202:	4618      	mov	r0, r3
 8009204:	f7fe fe56 	bl	8007eb4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009208:	4b1d      	ldr	r3, [pc, #116]	@ (8009280 <xTaskRemoveFromEventList+0xb0>)
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d11d      	bne.n	800924c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009210:	693b      	ldr	r3, [r7, #16]
 8009212:	3304      	adds	r3, #4
 8009214:	4618      	mov	r0, r3
 8009216:	f7fe fe4d 	bl	8007eb4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800921a:	693b      	ldr	r3, [r7, #16]
 800921c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800921e:	4b19      	ldr	r3, [pc, #100]	@ (8009284 <xTaskRemoveFromEventList+0xb4>)
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	429a      	cmp	r2, r3
 8009224:	d903      	bls.n	800922e <xTaskRemoveFromEventList+0x5e>
 8009226:	693b      	ldr	r3, [r7, #16]
 8009228:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800922a:	4a16      	ldr	r2, [pc, #88]	@ (8009284 <xTaskRemoveFromEventList+0xb4>)
 800922c:	6013      	str	r3, [r2, #0]
 800922e:	693b      	ldr	r3, [r7, #16]
 8009230:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009232:	4613      	mov	r3, r2
 8009234:	009b      	lsls	r3, r3, #2
 8009236:	4413      	add	r3, r2
 8009238:	009b      	lsls	r3, r3, #2
 800923a:	4a13      	ldr	r2, [pc, #76]	@ (8009288 <xTaskRemoveFromEventList+0xb8>)
 800923c:	441a      	add	r2, r3
 800923e:	693b      	ldr	r3, [r7, #16]
 8009240:	3304      	adds	r3, #4
 8009242:	4619      	mov	r1, r3
 8009244:	4610      	mov	r0, r2
 8009246:	f7fe fdd8 	bl	8007dfa <vListInsertEnd>
 800924a:	e005      	b.n	8009258 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800924c:	693b      	ldr	r3, [r7, #16]
 800924e:	3318      	adds	r3, #24
 8009250:	4619      	mov	r1, r3
 8009252:	480e      	ldr	r0, [pc, #56]	@ (800928c <xTaskRemoveFromEventList+0xbc>)
 8009254:	f7fe fdd1 	bl	8007dfa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009258:	693b      	ldr	r3, [r7, #16]
 800925a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800925c:	4b0c      	ldr	r3, [pc, #48]	@ (8009290 <xTaskRemoveFromEventList+0xc0>)
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009262:	429a      	cmp	r2, r3
 8009264:	d905      	bls.n	8009272 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009266:	2301      	movs	r3, #1
 8009268:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800926a:	4b0a      	ldr	r3, [pc, #40]	@ (8009294 <xTaskRemoveFromEventList+0xc4>)
 800926c:	2201      	movs	r2, #1
 800926e:	601a      	str	r2, [r3, #0]
 8009270:	e001      	b.n	8009276 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8009272:	2300      	movs	r3, #0
 8009274:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009276:	697b      	ldr	r3, [r7, #20]
}
 8009278:	4618      	mov	r0, r3
 800927a:	3718      	adds	r7, #24
 800927c:	46bd      	mov	sp, r7
 800927e:	bd80      	pop	{r7, pc}
 8009280:	2000bfb4 	.word	0x2000bfb4
 8009284:	2000bf94 	.word	0x2000bf94
 8009288:	2000babc 	.word	0x2000babc
 800928c:	2000bf4c 	.word	0x2000bf4c
 8009290:	2000bab8 	.word	0x2000bab8
 8009294:	2000bfa0 	.word	0x2000bfa0

08009298 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009298:	b580      	push	{r7, lr}
 800929a:	b084      	sub	sp, #16
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d10b      	bne.n	80092be <vTaskSetTimeOutState+0x26>
	__asm volatile
 80092a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092aa:	f383 8811 	msr	BASEPRI, r3
 80092ae:	f3bf 8f6f 	isb	sy
 80092b2:	f3bf 8f4f 	dsb	sy
 80092b6:	60fb      	str	r3, [r7, #12]
}
 80092b8:	bf00      	nop
 80092ba:	bf00      	nop
 80092bc:	e7fd      	b.n	80092ba <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 80092be:	f000 fedb 	bl	800a078 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 80092c2:	4b07      	ldr	r3, [pc, #28]	@ (80092e0 <vTaskSetTimeOutState+0x48>)
 80092c4:	681a      	ldr	r2, [r3, #0]
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 80092ca:	4b06      	ldr	r3, [pc, #24]	@ (80092e4 <vTaskSetTimeOutState+0x4c>)
 80092cc:	681a      	ldr	r2, [r3, #0]
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 80092d2:	f000 ff03 	bl	800a0dc <vPortExitCritical>
}
 80092d6:	bf00      	nop
 80092d8:	3710      	adds	r7, #16
 80092da:	46bd      	mov	sp, r7
 80092dc:	bd80      	pop	{r7, pc}
 80092de:	bf00      	nop
 80092e0:	2000bfa4 	.word	0x2000bfa4
 80092e4:	2000bf90 	.word	0x2000bf90

080092e8 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80092e8:	b480      	push	{r7}
 80092ea:	b083      	sub	sp, #12
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80092f0:	4b06      	ldr	r3, [pc, #24]	@ (800930c <vTaskInternalSetTimeOutState+0x24>)
 80092f2:	681a      	ldr	r2, [r3, #0]
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80092f8:	4b05      	ldr	r3, [pc, #20]	@ (8009310 <vTaskInternalSetTimeOutState+0x28>)
 80092fa:	681a      	ldr	r2, [r3, #0]
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	605a      	str	r2, [r3, #4]
}
 8009300:	bf00      	nop
 8009302:	370c      	adds	r7, #12
 8009304:	46bd      	mov	sp, r7
 8009306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930a:	4770      	bx	lr
 800930c:	2000bfa4 	.word	0x2000bfa4
 8009310:	2000bf90 	.word	0x2000bf90

08009314 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009314:	b580      	push	{r7, lr}
 8009316:	b088      	sub	sp, #32
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
 800931c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d10b      	bne.n	800933c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8009324:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009328:	f383 8811 	msr	BASEPRI, r3
 800932c:	f3bf 8f6f 	isb	sy
 8009330:	f3bf 8f4f 	dsb	sy
 8009334:	613b      	str	r3, [r7, #16]
}
 8009336:	bf00      	nop
 8009338:	bf00      	nop
 800933a:	e7fd      	b.n	8009338 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800933c:	683b      	ldr	r3, [r7, #0]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d10b      	bne.n	800935a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8009342:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009346:	f383 8811 	msr	BASEPRI, r3
 800934a:	f3bf 8f6f 	isb	sy
 800934e:	f3bf 8f4f 	dsb	sy
 8009352:	60fb      	str	r3, [r7, #12]
}
 8009354:	bf00      	nop
 8009356:	bf00      	nop
 8009358:	e7fd      	b.n	8009356 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800935a:	f000 fe8d 	bl	800a078 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800935e:	4b1d      	ldr	r3, [pc, #116]	@ (80093d4 <xTaskCheckForTimeOut+0xc0>)
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	685b      	ldr	r3, [r3, #4]
 8009368:	69ba      	ldr	r2, [r7, #24]
 800936a:	1ad3      	subs	r3, r2, r3
 800936c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009376:	d102      	bne.n	800937e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009378:	2300      	movs	r3, #0
 800937a:	61fb      	str	r3, [r7, #28]
 800937c:	e023      	b.n	80093c6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681a      	ldr	r2, [r3, #0]
 8009382:	4b15      	ldr	r3, [pc, #84]	@ (80093d8 <xTaskCheckForTimeOut+0xc4>)
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	429a      	cmp	r2, r3
 8009388:	d007      	beq.n	800939a <xTaskCheckForTimeOut+0x86>
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	685b      	ldr	r3, [r3, #4]
 800938e:	69ba      	ldr	r2, [r7, #24]
 8009390:	429a      	cmp	r2, r3
 8009392:	d302      	bcc.n	800939a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009394:	2301      	movs	r3, #1
 8009396:	61fb      	str	r3, [r7, #28]
 8009398:	e015      	b.n	80093c6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800939a:	683b      	ldr	r3, [r7, #0]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	697a      	ldr	r2, [r7, #20]
 80093a0:	429a      	cmp	r2, r3
 80093a2:	d20b      	bcs.n	80093bc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	681a      	ldr	r2, [r3, #0]
 80093a8:	697b      	ldr	r3, [r7, #20]
 80093aa:	1ad2      	subs	r2, r2, r3
 80093ac:	683b      	ldr	r3, [r7, #0]
 80093ae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80093b0:	6878      	ldr	r0, [r7, #4]
 80093b2:	f7ff ff99 	bl	80092e8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80093b6:	2300      	movs	r3, #0
 80093b8:	61fb      	str	r3, [r7, #28]
 80093ba:	e004      	b.n	80093c6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80093bc:	683b      	ldr	r3, [r7, #0]
 80093be:	2200      	movs	r2, #0
 80093c0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80093c2:	2301      	movs	r3, #1
 80093c4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80093c6:	f000 fe89 	bl	800a0dc <vPortExitCritical>

	return xReturn;
 80093ca:	69fb      	ldr	r3, [r7, #28]
}
 80093cc:	4618      	mov	r0, r3
 80093ce:	3720      	adds	r7, #32
 80093d0:	46bd      	mov	sp, r7
 80093d2:	bd80      	pop	{r7, pc}
 80093d4:	2000bf90 	.word	0x2000bf90
 80093d8:	2000bfa4 	.word	0x2000bfa4

080093dc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80093dc:	b480      	push	{r7}
 80093de:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80093e0:	4b03      	ldr	r3, [pc, #12]	@ (80093f0 <vTaskMissedYield+0x14>)
 80093e2:	2201      	movs	r2, #1
 80093e4:	601a      	str	r2, [r3, #0]
}
 80093e6:	bf00      	nop
 80093e8:	46bd      	mov	sp, r7
 80093ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ee:	4770      	bx	lr
 80093f0:	2000bfa0 	.word	0x2000bfa0

080093f4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b082      	sub	sp, #8
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80093fc:	f000 f852 	bl	80094a4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009400:	4b06      	ldr	r3, [pc, #24]	@ (800941c <prvIdleTask+0x28>)
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	2b01      	cmp	r3, #1
 8009406:	d9f9      	bls.n	80093fc <prvIdleTask+0x8>
			{
				taskYIELD();
 8009408:	4b05      	ldr	r3, [pc, #20]	@ (8009420 <prvIdleTask+0x2c>)
 800940a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800940e:	601a      	str	r2, [r3, #0]
 8009410:	f3bf 8f4f 	dsb	sy
 8009414:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009418:	e7f0      	b.n	80093fc <prvIdleTask+0x8>
 800941a:	bf00      	nop
 800941c:	2000babc 	.word	0x2000babc
 8009420:	e000ed04 	.word	0xe000ed04

08009424 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b082      	sub	sp, #8
 8009428:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800942a:	2300      	movs	r3, #0
 800942c:	607b      	str	r3, [r7, #4]
 800942e:	e00c      	b.n	800944a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009430:	687a      	ldr	r2, [r7, #4]
 8009432:	4613      	mov	r3, r2
 8009434:	009b      	lsls	r3, r3, #2
 8009436:	4413      	add	r3, r2
 8009438:	009b      	lsls	r3, r3, #2
 800943a:	4a12      	ldr	r2, [pc, #72]	@ (8009484 <prvInitialiseTaskLists+0x60>)
 800943c:	4413      	add	r3, r2
 800943e:	4618      	mov	r0, r3
 8009440:	f7fe fcae 	bl	8007da0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	3301      	adds	r3, #1
 8009448:	607b      	str	r3, [r7, #4]
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	2b37      	cmp	r3, #55	@ 0x37
 800944e:	d9ef      	bls.n	8009430 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009450:	480d      	ldr	r0, [pc, #52]	@ (8009488 <prvInitialiseTaskLists+0x64>)
 8009452:	f7fe fca5 	bl	8007da0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009456:	480d      	ldr	r0, [pc, #52]	@ (800948c <prvInitialiseTaskLists+0x68>)
 8009458:	f7fe fca2 	bl	8007da0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800945c:	480c      	ldr	r0, [pc, #48]	@ (8009490 <prvInitialiseTaskLists+0x6c>)
 800945e:	f7fe fc9f 	bl	8007da0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009462:	480c      	ldr	r0, [pc, #48]	@ (8009494 <prvInitialiseTaskLists+0x70>)
 8009464:	f7fe fc9c 	bl	8007da0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009468:	480b      	ldr	r0, [pc, #44]	@ (8009498 <prvInitialiseTaskLists+0x74>)
 800946a:	f7fe fc99 	bl	8007da0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800946e:	4b0b      	ldr	r3, [pc, #44]	@ (800949c <prvInitialiseTaskLists+0x78>)
 8009470:	4a05      	ldr	r2, [pc, #20]	@ (8009488 <prvInitialiseTaskLists+0x64>)
 8009472:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009474:	4b0a      	ldr	r3, [pc, #40]	@ (80094a0 <prvInitialiseTaskLists+0x7c>)
 8009476:	4a05      	ldr	r2, [pc, #20]	@ (800948c <prvInitialiseTaskLists+0x68>)
 8009478:	601a      	str	r2, [r3, #0]
}
 800947a:	bf00      	nop
 800947c:	3708      	adds	r7, #8
 800947e:	46bd      	mov	sp, r7
 8009480:	bd80      	pop	{r7, pc}
 8009482:	bf00      	nop
 8009484:	2000babc 	.word	0x2000babc
 8009488:	2000bf1c 	.word	0x2000bf1c
 800948c:	2000bf30 	.word	0x2000bf30
 8009490:	2000bf4c 	.word	0x2000bf4c
 8009494:	2000bf60 	.word	0x2000bf60
 8009498:	2000bf78 	.word	0x2000bf78
 800949c:	2000bf44 	.word	0x2000bf44
 80094a0:	2000bf48 	.word	0x2000bf48

080094a4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b082      	sub	sp, #8
 80094a8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80094aa:	e019      	b.n	80094e0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80094ac:	f000 fde4 	bl	800a078 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80094b0:	4b10      	ldr	r3, [pc, #64]	@ (80094f4 <prvCheckTasksWaitingTermination+0x50>)
 80094b2:	68db      	ldr	r3, [r3, #12]
 80094b4:	68db      	ldr	r3, [r3, #12]
 80094b6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	3304      	adds	r3, #4
 80094bc:	4618      	mov	r0, r3
 80094be:	f7fe fcf9 	bl	8007eb4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80094c2:	4b0d      	ldr	r3, [pc, #52]	@ (80094f8 <prvCheckTasksWaitingTermination+0x54>)
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	3b01      	subs	r3, #1
 80094c8:	4a0b      	ldr	r2, [pc, #44]	@ (80094f8 <prvCheckTasksWaitingTermination+0x54>)
 80094ca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80094cc:	4b0b      	ldr	r3, [pc, #44]	@ (80094fc <prvCheckTasksWaitingTermination+0x58>)
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	3b01      	subs	r3, #1
 80094d2:	4a0a      	ldr	r2, [pc, #40]	@ (80094fc <prvCheckTasksWaitingTermination+0x58>)
 80094d4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80094d6:	f000 fe01 	bl	800a0dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80094da:	6878      	ldr	r0, [r7, #4]
 80094dc:	f000 f810 	bl	8009500 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80094e0:	4b06      	ldr	r3, [pc, #24]	@ (80094fc <prvCheckTasksWaitingTermination+0x58>)
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d1e1      	bne.n	80094ac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80094e8:	bf00      	nop
 80094ea:	bf00      	nop
 80094ec:	3708      	adds	r7, #8
 80094ee:	46bd      	mov	sp, r7
 80094f0:	bd80      	pop	{r7, pc}
 80094f2:	bf00      	nop
 80094f4:	2000bf60 	.word	0x2000bf60
 80094f8:	2000bf8c 	.word	0x2000bf8c
 80094fc:	2000bf74 	.word	0x2000bf74

08009500 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009500:	b580      	push	{r7, lr}
 8009502:	b084      	sub	sp, #16
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800950e:	2b00      	cmp	r3, #0
 8009510:	d108      	bne.n	8009524 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009516:	4618      	mov	r0, r3
 8009518:	f000 ff9e 	bl	800a458 <vPortFree>
				vPortFree( pxTCB );
 800951c:	6878      	ldr	r0, [r7, #4]
 800951e:	f000 ff9b 	bl	800a458 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009522:	e019      	b.n	8009558 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800952a:	2b01      	cmp	r3, #1
 800952c:	d103      	bne.n	8009536 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800952e:	6878      	ldr	r0, [r7, #4]
 8009530:	f000 ff92 	bl	800a458 <vPortFree>
	}
 8009534:	e010      	b.n	8009558 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800953c:	2b02      	cmp	r3, #2
 800953e:	d00b      	beq.n	8009558 <prvDeleteTCB+0x58>
	__asm volatile
 8009540:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009544:	f383 8811 	msr	BASEPRI, r3
 8009548:	f3bf 8f6f 	isb	sy
 800954c:	f3bf 8f4f 	dsb	sy
 8009550:	60fb      	str	r3, [r7, #12]
}
 8009552:	bf00      	nop
 8009554:	bf00      	nop
 8009556:	e7fd      	b.n	8009554 <prvDeleteTCB+0x54>
	}
 8009558:	bf00      	nop
 800955a:	3710      	adds	r7, #16
 800955c:	46bd      	mov	sp, r7
 800955e:	bd80      	pop	{r7, pc}

08009560 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009560:	b480      	push	{r7}
 8009562:	b083      	sub	sp, #12
 8009564:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009566:	4b0c      	ldr	r3, [pc, #48]	@ (8009598 <prvResetNextTaskUnblockTime+0x38>)
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d104      	bne.n	800957a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009570:	4b0a      	ldr	r3, [pc, #40]	@ (800959c <prvResetNextTaskUnblockTime+0x3c>)
 8009572:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009576:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009578:	e008      	b.n	800958c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800957a:	4b07      	ldr	r3, [pc, #28]	@ (8009598 <prvResetNextTaskUnblockTime+0x38>)
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	68db      	ldr	r3, [r3, #12]
 8009580:	68db      	ldr	r3, [r3, #12]
 8009582:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	685b      	ldr	r3, [r3, #4]
 8009588:	4a04      	ldr	r2, [pc, #16]	@ (800959c <prvResetNextTaskUnblockTime+0x3c>)
 800958a:	6013      	str	r3, [r2, #0]
}
 800958c:	bf00      	nop
 800958e:	370c      	adds	r7, #12
 8009590:	46bd      	mov	sp, r7
 8009592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009596:	4770      	bx	lr
 8009598:	2000bf44 	.word	0x2000bf44
 800959c:	2000bfac 	.word	0x2000bfac

080095a0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80095a0:	b480      	push	{r7}
 80095a2:	b083      	sub	sp, #12
 80095a4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80095a6:	4b0b      	ldr	r3, [pc, #44]	@ (80095d4 <xTaskGetSchedulerState+0x34>)
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d102      	bne.n	80095b4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80095ae:	2301      	movs	r3, #1
 80095b0:	607b      	str	r3, [r7, #4]
 80095b2:	e008      	b.n	80095c6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80095b4:	4b08      	ldr	r3, [pc, #32]	@ (80095d8 <xTaskGetSchedulerState+0x38>)
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d102      	bne.n	80095c2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80095bc:	2302      	movs	r3, #2
 80095be:	607b      	str	r3, [r7, #4]
 80095c0:	e001      	b.n	80095c6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80095c2:	2300      	movs	r3, #0
 80095c4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80095c6:	687b      	ldr	r3, [r7, #4]
	}
 80095c8:	4618      	mov	r0, r3
 80095ca:	370c      	adds	r7, #12
 80095cc:	46bd      	mov	sp, r7
 80095ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d2:	4770      	bx	lr
 80095d4:	2000bf98 	.word	0x2000bf98
 80095d8:	2000bfb4 	.word	0x2000bfb4

080095dc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b086      	sub	sp, #24
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80095e8:	2300      	movs	r3, #0
 80095ea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d058      	beq.n	80096a4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80095f2:	4b2f      	ldr	r3, [pc, #188]	@ (80096b0 <xTaskPriorityDisinherit+0xd4>)
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	693a      	ldr	r2, [r7, #16]
 80095f8:	429a      	cmp	r2, r3
 80095fa:	d00b      	beq.n	8009614 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80095fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009600:	f383 8811 	msr	BASEPRI, r3
 8009604:	f3bf 8f6f 	isb	sy
 8009608:	f3bf 8f4f 	dsb	sy
 800960c:	60fb      	str	r3, [r7, #12]
}
 800960e:	bf00      	nop
 8009610:	bf00      	nop
 8009612:	e7fd      	b.n	8009610 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009614:	693b      	ldr	r3, [r7, #16]
 8009616:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009618:	2b00      	cmp	r3, #0
 800961a:	d10b      	bne.n	8009634 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800961c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009620:	f383 8811 	msr	BASEPRI, r3
 8009624:	f3bf 8f6f 	isb	sy
 8009628:	f3bf 8f4f 	dsb	sy
 800962c:	60bb      	str	r3, [r7, #8]
}
 800962e:	bf00      	nop
 8009630:	bf00      	nop
 8009632:	e7fd      	b.n	8009630 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8009634:	693b      	ldr	r3, [r7, #16]
 8009636:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009638:	1e5a      	subs	r2, r3, #1
 800963a:	693b      	ldr	r3, [r7, #16]
 800963c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800963e:	693b      	ldr	r3, [r7, #16]
 8009640:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009642:	693b      	ldr	r3, [r7, #16]
 8009644:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009646:	429a      	cmp	r2, r3
 8009648:	d02c      	beq.n	80096a4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800964a:	693b      	ldr	r3, [r7, #16]
 800964c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800964e:	2b00      	cmp	r3, #0
 8009650:	d128      	bne.n	80096a4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009652:	693b      	ldr	r3, [r7, #16]
 8009654:	3304      	adds	r3, #4
 8009656:	4618      	mov	r0, r3
 8009658:	f7fe fc2c 	bl	8007eb4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800965c:	693b      	ldr	r3, [r7, #16]
 800965e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009660:	693b      	ldr	r3, [r7, #16]
 8009662:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009664:	693b      	ldr	r3, [r7, #16]
 8009666:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009668:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800966c:	693b      	ldr	r3, [r7, #16]
 800966e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009670:	693b      	ldr	r3, [r7, #16]
 8009672:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009674:	4b0f      	ldr	r3, [pc, #60]	@ (80096b4 <xTaskPriorityDisinherit+0xd8>)
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	429a      	cmp	r2, r3
 800967a:	d903      	bls.n	8009684 <xTaskPriorityDisinherit+0xa8>
 800967c:	693b      	ldr	r3, [r7, #16]
 800967e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009680:	4a0c      	ldr	r2, [pc, #48]	@ (80096b4 <xTaskPriorityDisinherit+0xd8>)
 8009682:	6013      	str	r3, [r2, #0]
 8009684:	693b      	ldr	r3, [r7, #16]
 8009686:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009688:	4613      	mov	r3, r2
 800968a:	009b      	lsls	r3, r3, #2
 800968c:	4413      	add	r3, r2
 800968e:	009b      	lsls	r3, r3, #2
 8009690:	4a09      	ldr	r2, [pc, #36]	@ (80096b8 <xTaskPriorityDisinherit+0xdc>)
 8009692:	441a      	add	r2, r3
 8009694:	693b      	ldr	r3, [r7, #16]
 8009696:	3304      	adds	r3, #4
 8009698:	4619      	mov	r1, r3
 800969a:	4610      	mov	r0, r2
 800969c:	f7fe fbad 	bl	8007dfa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80096a0:	2301      	movs	r3, #1
 80096a2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80096a4:	697b      	ldr	r3, [r7, #20]
	}
 80096a6:	4618      	mov	r0, r3
 80096a8:	3718      	adds	r7, #24
 80096aa:	46bd      	mov	sp, r7
 80096ac:	bd80      	pop	{r7, pc}
 80096ae:	bf00      	nop
 80096b0:	2000bab8 	.word	0x2000bab8
 80096b4:	2000bf94 	.word	0x2000bf94
 80096b8:	2000babc 	.word	0x2000babc

080096bc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b084      	sub	sp, #16
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
 80096c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80096c6:	4b21      	ldr	r3, [pc, #132]	@ (800974c <prvAddCurrentTaskToDelayedList+0x90>)
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80096cc:	4b20      	ldr	r3, [pc, #128]	@ (8009750 <prvAddCurrentTaskToDelayedList+0x94>)
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	3304      	adds	r3, #4
 80096d2:	4618      	mov	r0, r3
 80096d4:	f7fe fbee 	bl	8007eb4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80096de:	d10a      	bne.n	80096f6 <prvAddCurrentTaskToDelayedList+0x3a>
 80096e0:	683b      	ldr	r3, [r7, #0]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d007      	beq.n	80096f6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80096e6:	4b1a      	ldr	r3, [pc, #104]	@ (8009750 <prvAddCurrentTaskToDelayedList+0x94>)
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	3304      	adds	r3, #4
 80096ec:	4619      	mov	r1, r3
 80096ee:	4819      	ldr	r0, [pc, #100]	@ (8009754 <prvAddCurrentTaskToDelayedList+0x98>)
 80096f0:	f7fe fb83 	bl	8007dfa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80096f4:	e026      	b.n	8009744 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80096f6:	68fa      	ldr	r2, [r7, #12]
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	4413      	add	r3, r2
 80096fc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80096fe:	4b14      	ldr	r3, [pc, #80]	@ (8009750 <prvAddCurrentTaskToDelayedList+0x94>)
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	68ba      	ldr	r2, [r7, #8]
 8009704:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009706:	68ba      	ldr	r2, [r7, #8]
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	429a      	cmp	r2, r3
 800970c:	d209      	bcs.n	8009722 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800970e:	4b12      	ldr	r3, [pc, #72]	@ (8009758 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009710:	681a      	ldr	r2, [r3, #0]
 8009712:	4b0f      	ldr	r3, [pc, #60]	@ (8009750 <prvAddCurrentTaskToDelayedList+0x94>)
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	3304      	adds	r3, #4
 8009718:	4619      	mov	r1, r3
 800971a:	4610      	mov	r0, r2
 800971c:	f7fe fb91 	bl	8007e42 <vListInsert>
}
 8009720:	e010      	b.n	8009744 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009722:	4b0e      	ldr	r3, [pc, #56]	@ (800975c <prvAddCurrentTaskToDelayedList+0xa0>)
 8009724:	681a      	ldr	r2, [r3, #0]
 8009726:	4b0a      	ldr	r3, [pc, #40]	@ (8009750 <prvAddCurrentTaskToDelayedList+0x94>)
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	3304      	adds	r3, #4
 800972c:	4619      	mov	r1, r3
 800972e:	4610      	mov	r0, r2
 8009730:	f7fe fb87 	bl	8007e42 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009734:	4b0a      	ldr	r3, [pc, #40]	@ (8009760 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	68ba      	ldr	r2, [r7, #8]
 800973a:	429a      	cmp	r2, r3
 800973c:	d202      	bcs.n	8009744 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800973e:	4a08      	ldr	r2, [pc, #32]	@ (8009760 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009740:	68bb      	ldr	r3, [r7, #8]
 8009742:	6013      	str	r3, [r2, #0]
}
 8009744:	bf00      	nop
 8009746:	3710      	adds	r7, #16
 8009748:	46bd      	mov	sp, r7
 800974a:	bd80      	pop	{r7, pc}
 800974c:	2000bf90 	.word	0x2000bf90
 8009750:	2000bab8 	.word	0x2000bab8
 8009754:	2000bf78 	.word	0x2000bf78
 8009758:	2000bf48 	.word	0x2000bf48
 800975c:	2000bf44 	.word	0x2000bf44
 8009760:	2000bfac 	.word	0x2000bfac

08009764 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b08a      	sub	sp, #40	@ 0x28
 8009768:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800976a:	2300      	movs	r3, #0
 800976c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800976e:	f000 fb13 	bl	8009d98 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009772:	4b1d      	ldr	r3, [pc, #116]	@ (80097e8 <xTimerCreateTimerTask+0x84>)
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d021      	beq.n	80097be <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800977a:	2300      	movs	r3, #0
 800977c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800977e:	2300      	movs	r3, #0
 8009780:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009782:	1d3a      	adds	r2, r7, #4
 8009784:	f107 0108 	add.w	r1, r7, #8
 8009788:	f107 030c 	add.w	r3, r7, #12
 800978c:	4618      	mov	r0, r3
 800978e:	f7fe faed 	bl	8007d6c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009792:	6879      	ldr	r1, [r7, #4]
 8009794:	68bb      	ldr	r3, [r7, #8]
 8009796:	68fa      	ldr	r2, [r7, #12]
 8009798:	9202      	str	r2, [sp, #8]
 800979a:	9301      	str	r3, [sp, #4]
 800979c:	2302      	movs	r3, #2
 800979e:	9300      	str	r3, [sp, #0]
 80097a0:	2300      	movs	r3, #0
 80097a2:	460a      	mov	r2, r1
 80097a4:	4911      	ldr	r1, [pc, #68]	@ (80097ec <xTimerCreateTimerTask+0x88>)
 80097a6:	4812      	ldr	r0, [pc, #72]	@ (80097f0 <xTimerCreateTimerTask+0x8c>)
 80097a8:	f7ff f8a8 	bl	80088fc <xTaskCreateStatic>
 80097ac:	4603      	mov	r3, r0
 80097ae:	4a11      	ldr	r2, [pc, #68]	@ (80097f4 <xTimerCreateTimerTask+0x90>)
 80097b0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80097b2:	4b10      	ldr	r3, [pc, #64]	@ (80097f4 <xTimerCreateTimerTask+0x90>)
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d001      	beq.n	80097be <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80097ba:	2301      	movs	r3, #1
 80097bc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80097be:	697b      	ldr	r3, [r7, #20]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d10b      	bne.n	80097dc <xTimerCreateTimerTask+0x78>
	__asm volatile
 80097c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097c8:	f383 8811 	msr	BASEPRI, r3
 80097cc:	f3bf 8f6f 	isb	sy
 80097d0:	f3bf 8f4f 	dsb	sy
 80097d4:	613b      	str	r3, [r7, #16]
}
 80097d6:	bf00      	nop
 80097d8:	bf00      	nop
 80097da:	e7fd      	b.n	80097d8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80097dc:	697b      	ldr	r3, [r7, #20]
}
 80097de:	4618      	mov	r0, r3
 80097e0:	3718      	adds	r7, #24
 80097e2:	46bd      	mov	sp, r7
 80097e4:	bd80      	pop	{r7, pc}
 80097e6:	bf00      	nop
 80097e8:	2000bfe8 	.word	0x2000bfe8
 80097ec:	0801e6dc 	.word	0x0801e6dc
 80097f0:	08009931 	.word	0x08009931
 80097f4:	2000bfec 	.word	0x2000bfec

080097f8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b08a      	sub	sp, #40	@ 0x28
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	60f8      	str	r0, [r7, #12]
 8009800:	60b9      	str	r1, [r7, #8]
 8009802:	607a      	str	r2, [r7, #4]
 8009804:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009806:	2300      	movs	r3, #0
 8009808:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d10b      	bne.n	8009828 <xTimerGenericCommand+0x30>
	__asm volatile
 8009810:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009814:	f383 8811 	msr	BASEPRI, r3
 8009818:	f3bf 8f6f 	isb	sy
 800981c:	f3bf 8f4f 	dsb	sy
 8009820:	623b      	str	r3, [r7, #32]
}
 8009822:	bf00      	nop
 8009824:	bf00      	nop
 8009826:	e7fd      	b.n	8009824 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009828:	4b19      	ldr	r3, [pc, #100]	@ (8009890 <xTimerGenericCommand+0x98>)
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d02a      	beq.n	8009886 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009830:	68bb      	ldr	r3, [r7, #8]
 8009832:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800983c:	68bb      	ldr	r3, [r7, #8]
 800983e:	2b05      	cmp	r3, #5
 8009840:	dc18      	bgt.n	8009874 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009842:	f7ff fead 	bl	80095a0 <xTaskGetSchedulerState>
 8009846:	4603      	mov	r3, r0
 8009848:	2b02      	cmp	r3, #2
 800984a:	d109      	bne.n	8009860 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800984c:	4b10      	ldr	r3, [pc, #64]	@ (8009890 <xTimerGenericCommand+0x98>)
 800984e:	6818      	ldr	r0, [r3, #0]
 8009850:	f107 0110 	add.w	r1, r7, #16
 8009854:	2300      	movs	r3, #0
 8009856:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009858:	f7fe fc60 	bl	800811c <xQueueGenericSend>
 800985c:	6278      	str	r0, [r7, #36]	@ 0x24
 800985e:	e012      	b.n	8009886 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009860:	4b0b      	ldr	r3, [pc, #44]	@ (8009890 <xTimerGenericCommand+0x98>)
 8009862:	6818      	ldr	r0, [r3, #0]
 8009864:	f107 0110 	add.w	r1, r7, #16
 8009868:	2300      	movs	r3, #0
 800986a:	2200      	movs	r2, #0
 800986c:	f7fe fc56 	bl	800811c <xQueueGenericSend>
 8009870:	6278      	str	r0, [r7, #36]	@ 0x24
 8009872:	e008      	b.n	8009886 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009874:	4b06      	ldr	r3, [pc, #24]	@ (8009890 <xTimerGenericCommand+0x98>)
 8009876:	6818      	ldr	r0, [r3, #0]
 8009878:	f107 0110 	add.w	r1, r7, #16
 800987c:	2300      	movs	r3, #0
 800987e:	683a      	ldr	r2, [r7, #0]
 8009880:	f7fe fd4e 	bl	8008320 <xQueueGenericSendFromISR>
 8009884:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009888:	4618      	mov	r0, r3
 800988a:	3728      	adds	r7, #40	@ 0x28
 800988c:	46bd      	mov	sp, r7
 800988e:	bd80      	pop	{r7, pc}
 8009890:	2000bfe8 	.word	0x2000bfe8

08009894 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b088      	sub	sp, #32
 8009898:	af02      	add	r7, sp, #8
 800989a:	6078      	str	r0, [r7, #4]
 800989c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800989e:	4b23      	ldr	r3, [pc, #140]	@ (800992c <prvProcessExpiredTimer+0x98>)
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	68db      	ldr	r3, [r3, #12]
 80098a4:	68db      	ldr	r3, [r3, #12]
 80098a6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80098a8:	697b      	ldr	r3, [r7, #20]
 80098aa:	3304      	adds	r3, #4
 80098ac:	4618      	mov	r0, r3
 80098ae:	f7fe fb01 	bl	8007eb4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80098b2:	697b      	ldr	r3, [r7, #20]
 80098b4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80098b8:	f003 0304 	and.w	r3, r3, #4
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d023      	beq.n	8009908 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80098c0:	697b      	ldr	r3, [r7, #20]
 80098c2:	699a      	ldr	r2, [r3, #24]
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	18d1      	adds	r1, r2, r3
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	683a      	ldr	r2, [r7, #0]
 80098cc:	6978      	ldr	r0, [r7, #20]
 80098ce:	f000 f8d5 	bl	8009a7c <prvInsertTimerInActiveList>
 80098d2:	4603      	mov	r3, r0
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d020      	beq.n	800991a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80098d8:	2300      	movs	r3, #0
 80098da:	9300      	str	r3, [sp, #0]
 80098dc:	2300      	movs	r3, #0
 80098de:	687a      	ldr	r2, [r7, #4]
 80098e0:	2100      	movs	r1, #0
 80098e2:	6978      	ldr	r0, [r7, #20]
 80098e4:	f7ff ff88 	bl	80097f8 <xTimerGenericCommand>
 80098e8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80098ea:	693b      	ldr	r3, [r7, #16]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d114      	bne.n	800991a <prvProcessExpiredTimer+0x86>
	__asm volatile
 80098f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098f4:	f383 8811 	msr	BASEPRI, r3
 80098f8:	f3bf 8f6f 	isb	sy
 80098fc:	f3bf 8f4f 	dsb	sy
 8009900:	60fb      	str	r3, [r7, #12]
}
 8009902:	bf00      	nop
 8009904:	bf00      	nop
 8009906:	e7fd      	b.n	8009904 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009908:	697b      	ldr	r3, [r7, #20]
 800990a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800990e:	f023 0301 	bic.w	r3, r3, #1
 8009912:	b2da      	uxtb	r2, r3
 8009914:	697b      	ldr	r3, [r7, #20]
 8009916:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800991a:	697b      	ldr	r3, [r7, #20]
 800991c:	6a1b      	ldr	r3, [r3, #32]
 800991e:	6978      	ldr	r0, [r7, #20]
 8009920:	4798      	blx	r3
}
 8009922:	bf00      	nop
 8009924:	3718      	adds	r7, #24
 8009926:	46bd      	mov	sp, r7
 8009928:	bd80      	pop	{r7, pc}
 800992a:	bf00      	nop
 800992c:	2000bfe0 	.word	0x2000bfe0

08009930 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009930:	b580      	push	{r7, lr}
 8009932:	b084      	sub	sp, #16
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009938:	f107 0308 	add.w	r3, r7, #8
 800993c:	4618      	mov	r0, r3
 800993e:	f000 f859 	bl	80099f4 <prvGetNextExpireTime>
 8009942:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009944:	68bb      	ldr	r3, [r7, #8]
 8009946:	4619      	mov	r1, r3
 8009948:	68f8      	ldr	r0, [r7, #12]
 800994a:	f000 f805 	bl	8009958 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800994e:	f000 f8d7 	bl	8009b00 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009952:	bf00      	nop
 8009954:	e7f0      	b.n	8009938 <prvTimerTask+0x8>
	...

08009958 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b084      	sub	sp, #16
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
 8009960:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009962:	f7ff fa0f 	bl	8008d84 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009966:	f107 0308 	add.w	r3, r7, #8
 800996a:	4618      	mov	r0, r3
 800996c:	f000 f866 	bl	8009a3c <prvSampleTimeNow>
 8009970:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009972:	68bb      	ldr	r3, [r7, #8]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d130      	bne.n	80099da <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009978:	683b      	ldr	r3, [r7, #0]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d10a      	bne.n	8009994 <prvProcessTimerOrBlockTask+0x3c>
 800997e:	687a      	ldr	r2, [r7, #4]
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	429a      	cmp	r2, r3
 8009984:	d806      	bhi.n	8009994 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009986:	f7ff fa0b 	bl	8008da0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800998a:	68f9      	ldr	r1, [r7, #12]
 800998c:	6878      	ldr	r0, [r7, #4]
 800998e:	f7ff ff81 	bl	8009894 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009992:	e024      	b.n	80099de <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009994:	683b      	ldr	r3, [r7, #0]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d008      	beq.n	80099ac <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800999a:	4b13      	ldr	r3, [pc, #76]	@ (80099e8 <prvProcessTimerOrBlockTask+0x90>)
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d101      	bne.n	80099a8 <prvProcessTimerOrBlockTask+0x50>
 80099a4:	2301      	movs	r3, #1
 80099a6:	e000      	b.n	80099aa <prvProcessTimerOrBlockTask+0x52>
 80099a8:	2300      	movs	r3, #0
 80099aa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80099ac:	4b0f      	ldr	r3, [pc, #60]	@ (80099ec <prvProcessTimerOrBlockTask+0x94>)
 80099ae:	6818      	ldr	r0, [r3, #0]
 80099b0:	687a      	ldr	r2, [r7, #4]
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	1ad3      	subs	r3, r2, r3
 80099b6:	683a      	ldr	r2, [r7, #0]
 80099b8:	4619      	mov	r1, r3
 80099ba:	f7fe ff6b 	bl	8008894 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80099be:	f7ff f9ef 	bl	8008da0 <xTaskResumeAll>
 80099c2:	4603      	mov	r3, r0
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d10a      	bne.n	80099de <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80099c8:	4b09      	ldr	r3, [pc, #36]	@ (80099f0 <prvProcessTimerOrBlockTask+0x98>)
 80099ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80099ce:	601a      	str	r2, [r3, #0]
 80099d0:	f3bf 8f4f 	dsb	sy
 80099d4:	f3bf 8f6f 	isb	sy
}
 80099d8:	e001      	b.n	80099de <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80099da:	f7ff f9e1 	bl	8008da0 <xTaskResumeAll>
}
 80099de:	bf00      	nop
 80099e0:	3710      	adds	r7, #16
 80099e2:	46bd      	mov	sp, r7
 80099e4:	bd80      	pop	{r7, pc}
 80099e6:	bf00      	nop
 80099e8:	2000bfe4 	.word	0x2000bfe4
 80099ec:	2000bfe8 	.word	0x2000bfe8
 80099f0:	e000ed04 	.word	0xe000ed04

080099f4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80099f4:	b480      	push	{r7}
 80099f6:	b085      	sub	sp, #20
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80099fc:	4b0e      	ldr	r3, [pc, #56]	@ (8009a38 <prvGetNextExpireTime+0x44>)
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d101      	bne.n	8009a0a <prvGetNextExpireTime+0x16>
 8009a06:	2201      	movs	r2, #1
 8009a08:	e000      	b.n	8009a0c <prvGetNextExpireTime+0x18>
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d105      	bne.n	8009a24 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009a18:	4b07      	ldr	r3, [pc, #28]	@ (8009a38 <prvGetNextExpireTime+0x44>)
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	68db      	ldr	r3, [r3, #12]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	60fb      	str	r3, [r7, #12]
 8009a22:	e001      	b.n	8009a28 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009a24:	2300      	movs	r3, #0
 8009a26:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009a28:	68fb      	ldr	r3, [r7, #12]
}
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	3714      	adds	r7, #20
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a34:	4770      	bx	lr
 8009a36:	bf00      	nop
 8009a38:	2000bfe0 	.word	0x2000bfe0

08009a3c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	b084      	sub	sp, #16
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009a44:	f7ff fa4a 	bl	8008edc <xTaskGetTickCount>
 8009a48:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009a4a:	4b0b      	ldr	r3, [pc, #44]	@ (8009a78 <prvSampleTimeNow+0x3c>)
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	68fa      	ldr	r2, [r7, #12]
 8009a50:	429a      	cmp	r2, r3
 8009a52:	d205      	bcs.n	8009a60 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009a54:	f000 f93a 	bl	8009ccc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2201      	movs	r2, #1
 8009a5c:	601a      	str	r2, [r3, #0]
 8009a5e:	e002      	b.n	8009a66 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	2200      	movs	r2, #0
 8009a64:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009a66:	4a04      	ldr	r2, [pc, #16]	@ (8009a78 <prvSampleTimeNow+0x3c>)
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009a6c:	68fb      	ldr	r3, [r7, #12]
}
 8009a6e:	4618      	mov	r0, r3
 8009a70:	3710      	adds	r7, #16
 8009a72:	46bd      	mov	sp, r7
 8009a74:	bd80      	pop	{r7, pc}
 8009a76:	bf00      	nop
 8009a78:	2000bff0 	.word	0x2000bff0

08009a7c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	b086      	sub	sp, #24
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	60f8      	str	r0, [r7, #12]
 8009a84:	60b9      	str	r1, [r7, #8]
 8009a86:	607a      	str	r2, [r7, #4]
 8009a88:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	68ba      	ldr	r2, [r7, #8]
 8009a92:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	68fa      	ldr	r2, [r7, #12]
 8009a98:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009a9a:	68ba      	ldr	r2, [r7, #8]
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	429a      	cmp	r2, r3
 8009aa0:	d812      	bhi.n	8009ac8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009aa2:	687a      	ldr	r2, [r7, #4]
 8009aa4:	683b      	ldr	r3, [r7, #0]
 8009aa6:	1ad2      	subs	r2, r2, r3
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	699b      	ldr	r3, [r3, #24]
 8009aac:	429a      	cmp	r2, r3
 8009aae:	d302      	bcc.n	8009ab6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009ab0:	2301      	movs	r3, #1
 8009ab2:	617b      	str	r3, [r7, #20]
 8009ab4:	e01b      	b.n	8009aee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009ab6:	4b10      	ldr	r3, [pc, #64]	@ (8009af8 <prvInsertTimerInActiveList+0x7c>)
 8009ab8:	681a      	ldr	r2, [r3, #0]
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	3304      	adds	r3, #4
 8009abe:	4619      	mov	r1, r3
 8009ac0:	4610      	mov	r0, r2
 8009ac2:	f7fe f9be 	bl	8007e42 <vListInsert>
 8009ac6:	e012      	b.n	8009aee <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009ac8:	687a      	ldr	r2, [r7, #4]
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	429a      	cmp	r2, r3
 8009ace:	d206      	bcs.n	8009ade <prvInsertTimerInActiveList+0x62>
 8009ad0:	68ba      	ldr	r2, [r7, #8]
 8009ad2:	683b      	ldr	r3, [r7, #0]
 8009ad4:	429a      	cmp	r2, r3
 8009ad6:	d302      	bcc.n	8009ade <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009ad8:	2301      	movs	r3, #1
 8009ada:	617b      	str	r3, [r7, #20]
 8009adc:	e007      	b.n	8009aee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009ade:	4b07      	ldr	r3, [pc, #28]	@ (8009afc <prvInsertTimerInActiveList+0x80>)
 8009ae0:	681a      	ldr	r2, [r3, #0]
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	3304      	adds	r3, #4
 8009ae6:	4619      	mov	r1, r3
 8009ae8:	4610      	mov	r0, r2
 8009aea:	f7fe f9aa 	bl	8007e42 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009aee:	697b      	ldr	r3, [r7, #20]
}
 8009af0:	4618      	mov	r0, r3
 8009af2:	3718      	adds	r7, #24
 8009af4:	46bd      	mov	sp, r7
 8009af6:	bd80      	pop	{r7, pc}
 8009af8:	2000bfe4 	.word	0x2000bfe4
 8009afc:	2000bfe0 	.word	0x2000bfe0

08009b00 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b08e      	sub	sp, #56	@ 0x38
 8009b04:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009b06:	e0ce      	b.n	8009ca6 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	da19      	bge.n	8009b42 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009b0e:	1d3b      	adds	r3, r7, #4
 8009b10:	3304      	adds	r3, #4
 8009b12:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009b14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d10b      	bne.n	8009b32 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8009b1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b1e:	f383 8811 	msr	BASEPRI, r3
 8009b22:	f3bf 8f6f 	isb	sy
 8009b26:	f3bf 8f4f 	dsb	sy
 8009b2a:	61fb      	str	r3, [r7, #28]
}
 8009b2c:	bf00      	nop
 8009b2e:	bf00      	nop
 8009b30:	e7fd      	b.n	8009b2e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009b32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009b38:	6850      	ldr	r0, [r2, #4]
 8009b3a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009b3c:	6892      	ldr	r2, [r2, #8]
 8009b3e:	4611      	mov	r1, r2
 8009b40:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	f2c0 80ae 	blt.w	8009ca6 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009b4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b50:	695b      	ldr	r3, [r3, #20]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d004      	beq.n	8009b60 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009b56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b58:	3304      	adds	r3, #4
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	f7fe f9aa 	bl	8007eb4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009b60:	463b      	mov	r3, r7
 8009b62:	4618      	mov	r0, r3
 8009b64:	f7ff ff6a 	bl	8009a3c <prvSampleTimeNow>
 8009b68:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	2b09      	cmp	r3, #9
 8009b6e:	f200 8097 	bhi.w	8009ca0 <prvProcessReceivedCommands+0x1a0>
 8009b72:	a201      	add	r2, pc, #4	@ (adr r2, 8009b78 <prvProcessReceivedCommands+0x78>)
 8009b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b78:	08009ba1 	.word	0x08009ba1
 8009b7c:	08009ba1 	.word	0x08009ba1
 8009b80:	08009ba1 	.word	0x08009ba1
 8009b84:	08009c17 	.word	0x08009c17
 8009b88:	08009c2b 	.word	0x08009c2b
 8009b8c:	08009c77 	.word	0x08009c77
 8009b90:	08009ba1 	.word	0x08009ba1
 8009b94:	08009ba1 	.word	0x08009ba1
 8009b98:	08009c17 	.word	0x08009c17
 8009b9c:	08009c2b 	.word	0x08009c2b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009ba0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ba2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009ba6:	f043 0301 	orr.w	r3, r3, #1
 8009baa:	b2da      	uxtb	r2, r3
 8009bac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bae:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009bb2:	68ba      	ldr	r2, [r7, #8]
 8009bb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bb6:	699b      	ldr	r3, [r3, #24]
 8009bb8:	18d1      	adds	r1, r2, r3
 8009bba:	68bb      	ldr	r3, [r7, #8]
 8009bbc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009bbe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009bc0:	f7ff ff5c 	bl	8009a7c <prvInsertTimerInActiveList>
 8009bc4:	4603      	mov	r3, r0
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d06c      	beq.n	8009ca4 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009bca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bcc:	6a1b      	ldr	r3, [r3, #32]
 8009bce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009bd0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009bd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bd4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009bd8:	f003 0304 	and.w	r3, r3, #4
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d061      	beq.n	8009ca4 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009be0:	68ba      	ldr	r2, [r7, #8]
 8009be2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009be4:	699b      	ldr	r3, [r3, #24]
 8009be6:	441a      	add	r2, r3
 8009be8:	2300      	movs	r3, #0
 8009bea:	9300      	str	r3, [sp, #0]
 8009bec:	2300      	movs	r3, #0
 8009bee:	2100      	movs	r1, #0
 8009bf0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009bf2:	f7ff fe01 	bl	80097f8 <xTimerGenericCommand>
 8009bf6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009bf8:	6a3b      	ldr	r3, [r7, #32]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d152      	bne.n	8009ca4 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8009bfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c02:	f383 8811 	msr	BASEPRI, r3
 8009c06:	f3bf 8f6f 	isb	sy
 8009c0a:	f3bf 8f4f 	dsb	sy
 8009c0e:	61bb      	str	r3, [r7, #24]
}
 8009c10:	bf00      	nop
 8009c12:	bf00      	nop
 8009c14:	e7fd      	b.n	8009c12 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009c16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c18:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009c1c:	f023 0301 	bic.w	r3, r3, #1
 8009c20:	b2da      	uxtb	r2, r3
 8009c22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c24:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009c28:	e03d      	b.n	8009ca6 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009c2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c2c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009c30:	f043 0301 	orr.w	r3, r3, #1
 8009c34:	b2da      	uxtb	r2, r3
 8009c36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c38:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009c3c:	68ba      	ldr	r2, [r7, #8]
 8009c3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c40:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009c42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c44:	699b      	ldr	r3, [r3, #24]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d10b      	bne.n	8009c62 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8009c4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c4e:	f383 8811 	msr	BASEPRI, r3
 8009c52:	f3bf 8f6f 	isb	sy
 8009c56:	f3bf 8f4f 	dsb	sy
 8009c5a:	617b      	str	r3, [r7, #20]
}
 8009c5c:	bf00      	nop
 8009c5e:	bf00      	nop
 8009c60:	e7fd      	b.n	8009c5e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009c62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c64:	699a      	ldr	r2, [r3, #24]
 8009c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c68:	18d1      	adds	r1, r2, r3
 8009c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009c6e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009c70:	f7ff ff04 	bl	8009a7c <prvInsertTimerInActiveList>
					break;
 8009c74:	e017      	b.n	8009ca6 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009c76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c78:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009c7c:	f003 0302 	and.w	r3, r3, #2
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d103      	bne.n	8009c8c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8009c84:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009c86:	f000 fbe7 	bl	800a458 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009c8a:	e00c      	b.n	8009ca6 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009c8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c8e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009c92:	f023 0301 	bic.w	r3, r3, #1
 8009c96:	b2da      	uxtb	r2, r3
 8009c98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c9a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009c9e:	e002      	b.n	8009ca6 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8009ca0:	bf00      	nop
 8009ca2:	e000      	b.n	8009ca6 <prvProcessReceivedCommands+0x1a6>
					break;
 8009ca4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009ca6:	4b08      	ldr	r3, [pc, #32]	@ (8009cc8 <prvProcessReceivedCommands+0x1c8>)
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	1d39      	adds	r1, r7, #4
 8009cac:	2200      	movs	r2, #0
 8009cae:	4618      	mov	r0, r3
 8009cb0:	f7fe fbd4 	bl	800845c <xQueueReceive>
 8009cb4:	4603      	mov	r3, r0
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	f47f af26 	bne.w	8009b08 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009cbc:	bf00      	nop
 8009cbe:	bf00      	nop
 8009cc0:	3730      	adds	r7, #48	@ 0x30
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	bd80      	pop	{r7, pc}
 8009cc6:	bf00      	nop
 8009cc8:	2000bfe8 	.word	0x2000bfe8

08009ccc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b088      	sub	sp, #32
 8009cd0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009cd2:	e049      	b.n	8009d68 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009cd4:	4b2e      	ldr	r3, [pc, #184]	@ (8009d90 <prvSwitchTimerLists+0xc4>)
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	68db      	ldr	r3, [r3, #12]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009cde:	4b2c      	ldr	r3, [pc, #176]	@ (8009d90 <prvSwitchTimerLists+0xc4>)
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	68db      	ldr	r3, [r3, #12]
 8009ce4:	68db      	ldr	r3, [r3, #12]
 8009ce6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	3304      	adds	r3, #4
 8009cec:	4618      	mov	r0, r3
 8009cee:	f7fe f8e1 	bl	8007eb4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	6a1b      	ldr	r3, [r3, #32]
 8009cf6:	68f8      	ldr	r0, [r7, #12]
 8009cf8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009d00:	f003 0304 	and.w	r3, r3, #4
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d02f      	beq.n	8009d68 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	699b      	ldr	r3, [r3, #24]
 8009d0c:	693a      	ldr	r2, [r7, #16]
 8009d0e:	4413      	add	r3, r2
 8009d10:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009d12:	68ba      	ldr	r2, [r7, #8]
 8009d14:	693b      	ldr	r3, [r7, #16]
 8009d16:	429a      	cmp	r2, r3
 8009d18:	d90e      	bls.n	8009d38 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	68ba      	ldr	r2, [r7, #8]
 8009d1e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	68fa      	ldr	r2, [r7, #12]
 8009d24:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009d26:	4b1a      	ldr	r3, [pc, #104]	@ (8009d90 <prvSwitchTimerLists+0xc4>)
 8009d28:	681a      	ldr	r2, [r3, #0]
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	3304      	adds	r3, #4
 8009d2e:	4619      	mov	r1, r3
 8009d30:	4610      	mov	r0, r2
 8009d32:	f7fe f886 	bl	8007e42 <vListInsert>
 8009d36:	e017      	b.n	8009d68 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009d38:	2300      	movs	r3, #0
 8009d3a:	9300      	str	r3, [sp, #0]
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	693a      	ldr	r2, [r7, #16]
 8009d40:	2100      	movs	r1, #0
 8009d42:	68f8      	ldr	r0, [r7, #12]
 8009d44:	f7ff fd58 	bl	80097f8 <xTimerGenericCommand>
 8009d48:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d10b      	bne.n	8009d68 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8009d50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d54:	f383 8811 	msr	BASEPRI, r3
 8009d58:	f3bf 8f6f 	isb	sy
 8009d5c:	f3bf 8f4f 	dsb	sy
 8009d60:	603b      	str	r3, [r7, #0]
}
 8009d62:	bf00      	nop
 8009d64:	bf00      	nop
 8009d66:	e7fd      	b.n	8009d64 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009d68:	4b09      	ldr	r3, [pc, #36]	@ (8009d90 <prvSwitchTimerLists+0xc4>)
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d1b0      	bne.n	8009cd4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009d72:	4b07      	ldr	r3, [pc, #28]	@ (8009d90 <prvSwitchTimerLists+0xc4>)
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009d78:	4b06      	ldr	r3, [pc, #24]	@ (8009d94 <prvSwitchTimerLists+0xc8>)
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	4a04      	ldr	r2, [pc, #16]	@ (8009d90 <prvSwitchTimerLists+0xc4>)
 8009d7e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009d80:	4a04      	ldr	r2, [pc, #16]	@ (8009d94 <prvSwitchTimerLists+0xc8>)
 8009d82:	697b      	ldr	r3, [r7, #20]
 8009d84:	6013      	str	r3, [r2, #0]
}
 8009d86:	bf00      	nop
 8009d88:	3718      	adds	r7, #24
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	bd80      	pop	{r7, pc}
 8009d8e:	bf00      	nop
 8009d90:	2000bfe0 	.word	0x2000bfe0
 8009d94:	2000bfe4 	.word	0x2000bfe4

08009d98 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b082      	sub	sp, #8
 8009d9c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009d9e:	f000 f96b 	bl	800a078 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009da2:	4b15      	ldr	r3, [pc, #84]	@ (8009df8 <prvCheckForValidListAndQueue+0x60>)
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d120      	bne.n	8009dec <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009daa:	4814      	ldr	r0, [pc, #80]	@ (8009dfc <prvCheckForValidListAndQueue+0x64>)
 8009dac:	f7fd fff8 	bl	8007da0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009db0:	4813      	ldr	r0, [pc, #76]	@ (8009e00 <prvCheckForValidListAndQueue+0x68>)
 8009db2:	f7fd fff5 	bl	8007da0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009db6:	4b13      	ldr	r3, [pc, #76]	@ (8009e04 <prvCheckForValidListAndQueue+0x6c>)
 8009db8:	4a10      	ldr	r2, [pc, #64]	@ (8009dfc <prvCheckForValidListAndQueue+0x64>)
 8009dba:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009dbc:	4b12      	ldr	r3, [pc, #72]	@ (8009e08 <prvCheckForValidListAndQueue+0x70>)
 8009dbe:	4a10      	ldr	r2, [pc, #64]	@ (8009e00 <prvCheckForValidListAndQueue+0x68>)
 8009dc0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	9300      	str	r3, [sp, #0]
 8009dc6:	4b11      	ldr	r3, [pc, #68]	@ (8009e0c <prvCheckForValidListAndQueue+0x74>)
 8009dc8:	4a11      	ldr	r2, [pc, #68]	@ (8009e10 <prvCheckForValidListAndQueue+0x78>)
 8009dca:	2110      	movs	r1, #16
 8009dcc:	200a      	movs	r0, #10
 8009dce:	f7fe f905 	bl	8007fdc <xQueueGenericCreateStatic>
 8009dd2:	4603      	mov	r3, r0
 8009dd4:	4a08      	ldr	r2, [pc, #32]	@ (8009df8 <prvCheckForValidListAndQueue+0x60>)
 8009dd6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009dd8:	4b07      	ldr	r3, [pc, #28]	@ (8009df8 <prvCheckForValidListAndQueue+0x60>)
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d005      	beq.n	8009dec <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009de0:	4b05      	ldr	r3, [pc, #20]	@ (8009df8 <prvCheckForValidListAndQueue+0x60>)
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	490b      	ldr	r1, [pc, #44]	@ (8009e14 <prvCheckForValidListAndQueue+0x7c>)
 8009de6:	4618      	mov	r0, r3
 8009de8:	f7fe fd2a 	bl	8008840 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009dec:	f000 f976 	bl	800a0dc <vPortExitCritical>
}
 8009df0:	bf00      	nop
 8009df2:	46bd      	mov	sp, r7
 8009df4:	bd80      	pop	{r7, pc}
 8009df6:	bf00      	nop
 8009df8:	2000bfe8 	.word	0x2000bfe8
 8009dfc:	2000bfb8 	.word	0x2000bfb8
 8009e00:	2000bfcc 	.word	0x2000bfcc
 8009e04:	2000bfe0 	.word	0x2000bfe0
 8009e08:	2000bfe4 	.word	0x2000bfe4
 8009e0c:	2000c094 	.word	0x2000c094
 8009e10:	2000bff4 	.word	0x2000bff4
 8009e14:	0801e6e4 	.word	0x0801e6e4

08009e18 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009e18:	b480      	push	{r7}
 8009e1a:	b085      	sub	sp, #20
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	60f8      	str	r0, [r7, #12]
 8009e20:	60b9      	str	r1, [r7, #8]
 8009e22:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	3b04      	subs	r3, #4
 8009e28:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009e30:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	3b04      	subs	r3, #4
 8009e36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009e38:	68bb      	ldr	r3, [r7, #8]
 8009e3a:	f023 0201 	bic.w	r2, r3, #1
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	3b04      	subs	r3, #4
 8009e46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009e48:	4a0c      	ldr	r2, [pc, #48]	@ (8009e7c <pxPortInitialiseStack+0x64>)
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	3b14      	subs	r3, #20
 8009e52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009e54:	687a      	ldr	r2, [r7, #4]
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	3b04      	subs	r3, #4
 8009e5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	f06f 0202 	mvn.w	r2, #2
 8009e66:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	3b20      	subs	r3, #32
 8009e6c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009e6e:	68fb      	ldr	r3, [r7, #12]
}
 8009e70:	4618      	mov	r0, r3
 8009e72:	3714      	adds	r7, #20
 8009e74:	46bd      	mov	sp, r7
 8009e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7a:	4770      	bx	lr
 8009e7c:	08009e81 	.word	0x08009e81

08009e80 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009e80:	b480      	push	{r7}
 8009e82:	b085      	sub	sp, #20
 8009e84:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009e86:	2300      	movs	r3, #0
 8009e88:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009e8a:	4b13      	ldr	r3, [pc, #76]	@ (8009ed8 <prvTaskExitError+0x58>)
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009e92:	d00b      	beq.n	8009eac <prvTaskExitError+0x2c>
	__asm volatile
 8009e94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e98:	f383 8811 	msr	BASEPRI, r3
 8009e9c:	f3bf 8f6f 	isb	sy
 8009ea0:	f3bf 8f4f 	dsb	sy
 8009ea4:	60fb      	str	r3, [r7, #12]
}
 8009ea6:	bf00      	nop
 8009ea8:	bf00      	nop
 8009eaa:	e7fd      	b.n	8009ea8 <prvTaskExitError+0x28>
	__asm volatile
 8009eac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009eb0:	f383 8811 	msr	BASEPRI, r3
 8009eb4:	f3bf 8f6f 	isb	sy
 8009eb8:	f3bf 8f4f 	dsb	sy
 8009ebc:	60bb      	str	r3, [r7, #8]
}
 8009ebe:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009ec0:	bf00      	nop
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d0fc      	beq.n	8009ec2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009ec8:	bf00      	nop
 8009eca:	bf00      	nop
 8009ecc:	3714      	adds	r7, #20
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed4:	4770      	bx	lr
 8009ed6:	bf00      	nop
 8009ed8:	200000d8 	.word	0x200000d8
 8009edc:	00000000 	.word	0x00000000

08009ee0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009ee0:	4b07      	ldr	r3, [pc, #28]	@ (8009f00 <pxCurrentTCBConst2>)
 8009ee2:	6819      	ldr	r1, [r3, #0]
 8009ee4:	6808      	ldr	r0, [r1, #0]
 8009ee6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009eea:	f380 8809 	msr	PSP, r0
 8009eee:	f3bf 8f6f 	isb	sy
 8009ef2:	f04f 0000 	mov.w	r0, #0
 8009ef6:	f380 8811 	msr	BASEPRI, r0
 8009efa:	4770      	bx	lr
 8009efc:	f3af 8000 	nop.w

08009f00 <pxCurrentTCBConst2>:
 8009f00:	2000bab8 	.word	0x2000bab8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009f04:	bf00      	nop
 8009f06:	bf00      	nop

08009f08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009f08:	4808      	ldr	r0, [pc, #32]	@ (8009f2c <prvPortStartFirstTask+0x24>)
 8009f0a:	6800      	ldr	r0, [r0, #0]
 8009f0c:	6800      	ldr	r0, [r0, #0]
 8009f0e:	f380 8808 	msr	MSP, r0
 8009f12:	f04f 0000 	mov.w	r0, #0
 8009f16:	f380 8814 	msr	CONTROL, r0
 8009f1a:	b662      	cpsie	i
 8009f1c:	b661      	cpsie	f
 8009f1e:	f3bf 8f4f 	dsb	sy
 8009f22:	f3bf 8f6f 	isb	sy
 8009f26:	df00      	svc	0
 8009f28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009f2a:	bf00      	nop
 8009f2c:	e000ed08 	.word	0xe000ed08

08009f30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b086      	sub	sp, #24
 8009f34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009f36:	4b47      	ldr	r3, [pc, #284]	@ (800a054 <xPortStartScheduler+0x124>)
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	4a47      	ldr	r2, [pc, #284]	@ (800a058 <xPortStartScheduler+0x128>)
 8009f3c:	4293      	cmp	r3, r2
 8009f3e:	d10b      	bne.n	8009f58 <xPortStartScheduler+0x28>
	__asm volatile
 8009f40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f44:	f383 8811 	msr	BASEPRI, r3
 8009f48:	f3bf 8f6f 	isb	sy
 8009f4c:	f3bf 8f4f 	dsb	sy
 8009f50:	60fb      	str	r3, [r7, #12]
}
 8009f52:	bf00      	nop
 8009f54:	bf00      	nop
 8009f56:	e7fd      	b.n	8009f54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009f58:	4b3e      	ldr	r3, [pc, #248]	@ (800a054 <xPortStartScheduler+0x124>)
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	4a3f      	ldr	r2, [pc, #252]	@ (800a05c <xPortStartScheduler+0x12c>)
 8009f5e:	4293      	cmp	r3, r2
 8009f60:	d10b      	bne.n	8009f7a <xPortStartScheduler+0x4a>
	__asm volatile
 8009f62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f66:	f383 8811 	msr	BASEPRI, r3
 8009f6a:	f3bf 8f6f 	isb	sy
 8009f6e:	f3bf 8f4f 	dsb	sy
 8009f72:	613b      	str	r3, [r7, #16]
}
 8009f74:	bf00      	nop
 8009f76:	bf00      	nop
 8009f78:	e7fd      	b.n	8009f76 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009f7a:	4b39      	ldr	r3, [pc, #228]	@ (800a060 <xPortStartScheduler+0x130>)
 8009f7c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009f7e:	697b      	ldr	r3, [r7, #20]
 8009f80:	781b      	ldrb	r3, [r3, #0]
 8009f82:	b2db      	uxtb	r3, r3
 8009f84:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009f86:	697b      	ldr	r3, [r7, #20]
 8009f88:	22ff      	movs	r2, #255	@ 0xff
 8009f8a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009f8c:	697b      	ldr	r3, [r7, #20]
 8009f8e:	781b      	ldrb	r3, [r3, #0]
 8009f90:	b2db      	uxtb	r3, r3
 8009f92:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009f94:	78fb      	ldrb	r3, [r7, #3]
 8009f96:	b2db      	uxtb	r3, r3
 8009f98:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8009f9c:	b2da      	uxtb	r2, r3
 8009f9e:	4b31      	ldr	r3, [pc, #196]	@ (800a064 <xPortStartScheduler+0x134>)
 8009fa0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009fa2:	4b31      	ldr	r3, [pc, #196]	@ (800a068 <xPortStartScheduler+0x138>)
 8009fa4:	2207      	movs	r2, #7
 8009fa6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009fa8:	e009      	b.n	8009fbe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8009faa:	4b2f      	ldr	r3, [pc, #188]	@ (800a068 <xPortStartScheduler+0x138>)
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	3b01      	subs	r3, #1
 8009fb0:	4a2d      	ldr	r2, [pc, #180]	@ (800a068 <xPortStartScheduler+0x138>)
 8009fb2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009fb4:	78fb      	ldrb	r3, [r7, #3]
 8009fb6:	b2db      	uxtb	r3, r3
 8009fb8:	005b      	lsls	r3, r3, #1
 8009fba:	b2db      	uxtb	r3, r3
 8009fbc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009fbe:	78fb      	ldrb	r3, [r7, #3]
 8009fc0:	b2db      	uxtb	r3, r3
 8009fc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009fc6:	2b80      	cmp	r3, #128	@ 0x80
 8009fc8:	d0ef      	beq.n	8009faa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009fca:	4b27      	ldr	r3, [pc, #156]	@ (800a068 <xPortStartScheduler+0x138>)
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	f1c3 0307 	rsb	r3, r3, #7
 8009fd2:	2b04      	cmp	r3, #4
 8009fd4:	d00b      	beq.n	8009fee <xPortStartScheduler+0xbe>
	__asm volatile
 8009fd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fda:	f383 8811 	msr	BASEPRI, r3
 8009fde:	f3bf 8f6f 	isb	sy
 8009fe2:	f3bf 8f4f 	dsb	sy
 8009fe6:	60bb      	str	r3, [r7, #8]
}
 8009fe8:	bf00      	nop
 8009fea:	bf00      	nop
 8009fec:	e7fd      	b.n	8009fea <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009fee:	4b1e      	ldr	r3, [pc, #120]	@ (800a068 <xPortStartScheduler+0x138>)
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	021b      	lsls	r3, r3, #8
 8009ff4:	4a1c      	ldr	r2, [pc, #112]	@ (800a068 <xPortStartScheduler+0x138>)
 8009ff6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009ff8:	4b1b      	ldr	r3, [pc, #108]	@ (800a068 <xPortStartScheduler+0x138>)
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a000:	4a19      	ldr	r2, [pc, #100]	@ (800a068 <xPortStartScheduler+0x138>)
 800a002:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	b2da      	uxtb	r2, r3
 800a008:	697b      	ldr	r3, [r7, #20]
 800a00a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a00c:	4b17      	ldr	r3, [pc, #92]	@ (800a06c <xPortStartScheduler+0x13c>)
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	4a16      	ldr	r2, [pc, #88]	@ (800a06c <xPortStartScheduler+0x13c>)
 800a012:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a016:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a018:	4b14      	ldr	r3, [pc, #80]	@ (800a06c <xPortStartScheduler+0x13c>)
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	4a13      	ldr	r2, [pc, #76]	@ (800a06c <xPortStartScheduler+0x13c>)
 800a01e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a022:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a024:	f000 f8da 	bl	800a1dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a028:	4b11      	ldr	r3, [pc, #68]	@ (800a070 <xPortStartScheduler+0x140>)
 800a02a:	2200      	movs	r2, #0
 800a02c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a02e:	f000 f8f9 	bl	800a224 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a032:	4b10      	ldr	r3, [pc, #64]	@ (800a074 <xPortStartScheduler+0x144>)
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	4a0f      	ldr	r2, [pc, #60]	@ (800a074 <xPortStartScheduler+0x144>)
 800a038:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a03c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a03e:	f7ff ff63 	bl	8009f08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a042:	f7ff f815 	bl	8009070 <vTaskSwitchContext>
	prvTaskExitError();
 800a046:	f7ff ff1b 	bl	8009e80 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a04a:	2300      	movs	r3, #0
}
 800a04c:	4618      	mov	r0, r3
 800a04e:	3718      	adds	r7, #24
 800a050:	46bd      	mov	sp, r7
 800a052:	bd80      	pop	{r7, pc}
 800a054:	e000ed00 	.word	0xe000ed00
 800a058:	410fc271 	.word	0x410fc271
 800a05c:	410fc270 	.word	0x410fc270
 800a060:	e000e400 	.word	0xe000e400
 800a064:	2000c0e4 	.word	0x2000c0e4
 800a068:	2000c0e8 	.word	0x2000c0e8
 800a06c:	e000ed20 	.word	0xe000ed20
 800a070:	200000d8 	.word	0x200000d8
 800a074:	e000ef34 	.word	0xe000ef34

0800a078 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a078:	b480      	push	{r7}
 800a07a:	b083      	sub	sp, #12
 800a07c:	af00      	add	r7, sp, #0
	__asm volatile
 800a07e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a082:	f383 8811 	msr	BASEPRI, r3
 800a086:	f3bf 8f6f 	isb	sy
 800a08a:	f3bf 8f4f 	dsb	sy
 800a08e:	607b      	str	r3, [r7, #4]
}
 800a090:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a092:	4b10      	ldr	r3, [pc, #64]	@ (800a0d4 <vPortEnterCritical+0x5c>)
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	3301      	adds	r3, #1
 800a098:	4a0e      	ldr	r2, [pc, #56]	@ (800a0d4 <vPortEnterCritical+0x5c>)
 800a09a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a09c:	4b0d      	ldr	r3, [pc, #52]	@ (800a0d4 <vPortEnterCritical+0x5c>)
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	2b01      	cmp	r3, #1
 800a0a2:	d110      	bne.n	800a0c6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a0a4:	4b0c      	ldr	r3, [pc, #48]	@ (800a0d8 <vPortEnterCritical+0x60>)
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	b2db      	uxtb	r3, r3
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d00b      	beq.n	800a0c6 <vPortEnterCritical+0x4e>
	__asm volatile
 800a0ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0b2:	f383 8811 	msr	BASEPRI, r3
 800a0b6:	f3bf 8f6f 	isb	sy
 800a0ba:	f3bf 8f4f 	dsb	sy
 800a0be:	603b      	str	r3, [r7, #0]
}
 800a0c0:	bf00      	nop
 800a0c2:	bf00      	nop
 800a0c4:	e7fd      	b.n	800a0c2 <vPortEnterCritical+0x4a>
	}
}
 800a0c6:	bf00      	nop
 800a0c8:	370c      	adds	r7, #12
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d0:	4770      	bx	lr
 800a0d2:	bf00      	nop
 800a0d4:	200000d8 	.word	0x200000d8
 800a0d8:	e000ed04 	.word	0xe000ed04

0800a0dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a0dc:	b480      	push	{r7}
 800a0de:	b083      	sub	sp, #12
 800a0e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a0e2:	4b12      	ldr	r3, [pc, #72]	@ (800a12c <vPortExitCritical+0x50>)
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d10b      	bne.n	800a102 <vPortExitCritical+0x26>
	__asm volatile
 800a0ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0ee:	f383 8811 	msr	BASEPRI, r3
 800a0f2:	f3bf 8f6f 	isb	sy
 800a0f6:	f3bf 8f4f 	dsb	sy
 800a0fa:	607b      	str	r3, [r7, #4]
}
 800a0fc:	bf00      	nop
 800a0fe:	bf00      	nop
 800a100:	e7fd      	b.n	800a0fe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a102:	4b0a      	ldr	r3, [pc, #40]	@ (800a12c <vPortExitCritical+0x50>)
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	3b01      	subs	r3, #1
 800a108:	4a08      	ldr	r2, [pc, #32]	@ (800a12c <vPortExitCritical+0x50>)
 800a10a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a10c:	4b07      	ldr	r3, [pc, #28]	@ (800a12c <vPortExitCritical+0x50>)
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	2b00      	cmp	r3, #0
 800a112:	d105      	bne.n	800a120 <vPortExitCritical+0x44>
 800a114:	2300      	movs	r3, #0
 800a116:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a118:	683b      	ldr	r3, [r7, #0]
 800a11a:	f383 8811 	msr	BASEPRI, r3
}
 800a11e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a120:	bf00      	nop
 800a122:	370c      	adds	r7, #12
 800a124:	46bd      	mov	sp, r7
 800a126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12a:	4770      	bx	lr
 800a12c:	200000d8 	.word	0x200000d8

0800a130 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a130:	f3ef 8009 	mrs	r0, PSP
 800a134:	f3bf 8f6f 	isb	sy
 800a138:	4b15      	ldr	r3, [pc, #84]	@ (800a190 <pxCurrentTCBConst>)
 800a13a:	681a      	ldr	r2, [r3, #0]
 800a13c:	f01e 0f10 	tst.w	lr, #16
 800a140:	bf08      	it	eq
 800a142:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a146:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a14a:	6010      	str	r0, [r2, #0]
 800a14c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a150:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a154:	f380 8811 	msr	BASEPRI, r0
 800a158:	f3bf 8f4f 	dsb	sy
 800a15c:	f3bf 8f6f 	isb	sy
 800a160:	f7fe ff86 	bl	8009070 <vTaskSwitchContext>
 800a164:	f04f 0000 	mov.w	r0, #0
 800a168:	f380 8811 	msr	BASEPRI, r0
 800a16c:	bc09      	pop	{r0, r3}
 800a16e:	6819      	ldr	r1, [r3, #0]
 800a170:	6808      	ldr	r0, [r1, #0]
 800a172:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a176:	f01e 0f10 	tst.w	lr, #16
 800a17a:	bf08      	it	eq
 800a17c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a180:	f380 8809 	msr	PSP, r0
 800a184:	f3bf 8f6f 	isb	sy
 800a188:	4770      	bx	lr
 800a18a:	bf00      	nop
 800a18c:	f3af 8000 	nop.w

0800a190 <pxCurrentTCBConst>:
 800a190:	2000bab8 	.word	0x2000bab8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a194:	bf00      	nop
 800a196:	bf00      	nop

0800a198 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a198:	b580      	push	{r7, lr}
 800a19a:	b082      	sub	sp, #8
 800a19c:	af00      	add	r7, sp, #0
	__asm volatile
 800a19e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1a2:	f383 8811 	msr	BASEPRI, r3
 800a1a6:	f3bf 8f6f 	isb	sy
 800a1aa:	f3bf 8f4f 	dsb	sy
 800a1ae:	607b      	str	r3, [r7, #4]
}
 800a1b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a1b2:	f7fe fea3 	bl	8008efc <xTaskIncrementTick>
 800a1b6:	4603      	mov	r3, r0
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d003      	beq.n	800a1c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a1bc:	4b06      	ldr	r3, [pc, #24]	@ (800a1d8 <xPortSysTickHandler+0x40>)
 800a1be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a1c2:	601a      	str	r2, [r3, #0]
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a1c8:	683b      	ldr	r3, [r7, #0]
 800a1ca:	f383 8811 	msr	BASEPRI, r3
}
 800a1ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a1d0:	bf00      	nop
 800a1d2:	3708      	adds	r7, #8
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	bd80      	pop	{r7, pc}
 800a1d8:	e000ed04 	.word	0xe000ed04

0800a1dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a1dc:	b480      	push	{r7}
 800a1de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a1e0:	4b0b      	ldr	r3, [pc, #44]	@ (800a210 <vPortSetupTimerInterrupt+0x34>)
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a1e6:	4b0b      	ldr	r3, [pc, #44]	@ (800a214 <vPortSetupTimerInterrupt+0x38>)
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a1ec:	4b0a      	ldr	r3, [pc, #40]	@ (800a218 <vPortSetupTimerInterrupt+0x3c>)
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	4a0a      	ldr	r2, [pc, #40]	@ (800a21c <vPortSetupTimerInterrupt+0x40>)
 800a1f2:	fba2 2303 	umull	r2, r3, r2, r3
 800a1f6:	099b      	lsrs	r3, r3, #6
 800a1f8:	4a09      	ldr	r2, [pc, #36]	@ (800a220 <vPortSetupTimerInterrupt+0x44>)
 800a1fa:	3b01      	subs	r3, #1
 800a1fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a1fe:	4b04      	ldr	r3, [pc, #16]	@ (800a210 <vPortSetupTimerInterrupt+0x34>)
 800a200:	2207      	movs	r2, #7
 800a202:	601a      	str	r2, [r3, #0]
}
 800a204:	bf00      	nop
 800a206:	46bd      	mov	sp, r7
 800a208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20c:	4770      	bx	lr
 800a20e:	bf00      	nop
 800a210:	e000e010 	.word	0xe000e010
 800a214:	e000e018 	.word	0xe000e018
 800a218:	20000004 	.word	0x20000004
 800a21c:	10624dd3 	.word	0x10624dd3
 800a220:	e000e014 	.word	0xe000e014

0800a224 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a224:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a234 <vPortEnableVFP+0x10>
 800a228:	6801      	ldr	r1, [r0, #0]
 800a22a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a22e:	6001      	str	r1, [r0, #0]
 800a230:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a232:	bf00      	nop
 800a234:	e000ed88 	.word	0xe000ed88

0800a238 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a238:	b480      	push	{r7}
 800a23a:	b085      	sub	sp, #20
 800a23c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a23e:	f3ef 8305 	mrs	r3, IPSR
 800a242:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	2b0f      	cmp	r3, #15
 800a248:	d915      	bls.n	800a276 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a24a:	4a18      	ldr	r2, [pc, #96]	@ (800a2ac <vPortValidateInterruptPriority+0x74>)
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	4413      	add	r3, r2
 800a250:	781b      	ldrb	r3, [r3, #0]
 800a252:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a254:	4b16      	ldr	r3, [pc, #88]	@ (800a2b0 <vPortValidateInterruptPriority+0x78>)
 800a256:	781b      	ldrb	r3, [r3, #0]
 800a258:	7afa      	ldrb	r2, [r7, #11]
 800a25a:	429a      	cmp	r2, r3
 800a25c:	d20b      	bcs.n	800a276 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800a25e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a262:	f383 8811 	msr	BASEPRI, r3
 800a266:	f3bf 8f6f 	isb	sy
 800a26a:	f3bf 8f4f 	dsb	sy
 800a26e:	607b      	str	r3, [r7, #4]
}
 800a270:	bf00      	nop
 800a272:	bf00      	nop
 800a274:	e7fd      	b.n	800a272 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a276:	4b0f      	ldr	r3, [pc, #60]	@ (800a2b4 <vPortValidateInterruptPriority+0x7c>)
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a27e:	4b0e      	ldr	r3, [pc, #56]	@ (800a2b8 <vPortValidateInterruptPriority+0x80>)
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	429a      	cmp	r2, r3
 800a284:	d90b      	bls.n	800a29e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800a286:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a28a:	f383 8811 	msr	BASEPRI, r3
 800a28e:	f3bf 8f6f 	isb	sy
 800a292:	f3bf 8f4f 	dsb	sy
 800a296:	603b      	str	r3, [r7, #0]
}
 800a298:	bf00      	nop
 800a29a:	bf00      	nop
 800a29c:	e7fd      	b.n	800a29a <vPortValidateInterruptPriority+0x62>
	}
 800a29e:	bf00      	nop
 800a2a0:	3714      	adds	r7, #20
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a8:	4770      	bx	lr
 800a2aa:	bf00      	nop
 800a2ac:	e000e3f0 	.word	0xe000e3f0
 800a2b0:	2000c0e4 	.word	0x2000c0e4
 800a2b4:	e000ed0c 	.word	0xe000ed0c
 800a2b8:	2000c0e8 	.word	0x2000c0e8

0800a2bc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b08a      	sub	sp, #40	@ 0x28
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a2c8:	f7fe fd5c 	bl	8008d84 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a2cc:	4b5c      	ldr	r3, [pc, #368]	@ (800a440 <pvPortMalloc+0x184>)
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d101      	bne.n	800a2d8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a2d4:	f000 f924 	bl	800a520 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a2d8:	4b5a      	ldr	r3, [pc, #360]	@ (800a444 <pvPortMalloc+0x188>)
 800a2da:	681a      	ldr	r2, [r3, #0]
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	4013      	ands	r3, r2
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	f040 8095 	bne.w	800a410 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d01e      	beq.n	800a32a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a2ec:	2208      	movs	r2, #8
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	4413      	add	r3, r2
 800a2f2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	f003 0307 	and.w	r3, r3, #7
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d015      	beq.n	800a32a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	f023 0307 	bic.w	r3, r3, #7
 800a304:	3308      	adds	r3, #8
 800a306:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	f003 0307 	and.w	r3, r3, #7
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d00b      	beq.n	800a32a <pvPortMalloc+0x6e>
	__asm volatile
 800a312:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a316:	f383 8811 	msr	BASEPRI, r3
 800a31a:	f3bf 8f6f 	isb	sy
 800a31e:	f3bf 8f4f 	dsb	sy
 800a322:	617b      	str	r3, [r7, #20]
}
 800a324:	bf00      	nop
 800a326:	bf00      	nop
 800a328:	e7fd      	b.n	800a326 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d06f      	beq.n	800a410 <pvPortMalloc+0x154>
 800a330:	4b45      	ldr	r3, [pc, #276]	@ (800a448 <pvPortMalloc+0x18c>)
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	687a      	ldr	r2, [r7, #4]
 800a336:	429a      	cmp	r2, r3
 800a338:	d86a      	bhi.n	800a410 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a33a:	4b44      	ldr	r3, [pc, #272]	@ (800a44c <pvPortMalloc+0x190>)
 800a33c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a33e:	4b43      	ldr	r3, [pc, #268]	@ (800a44c <pvPortMalloc+0x190>)
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a344:	e004      	b.n	800a350 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a348:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a34a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a352:	685b      	ldr	r3, [r3, #4]
 800a354:	687a      	ldr	r2, [r7, #4]
 800a356:	429a      	cmp	r2, r3
 800a358:	d903      	bls.n	800a362 <pvPortMalloc+0xa6>
 800a35a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d1f1      	bne.n	800a346 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a362:	4b37      	ldr	r3, [pc, #220]	@ (800a440 <pvPortMalloc+0x184>)
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a368:	429a      	cmp	r2, r3
 800a36a:	d051      	beq.n	800a410 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a36c:	6a3b      	ldr	r3, [r7, #32]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	2208      	movs	r2, #8
 800a372:	4413      	add	r3, r2
 800a374:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a378:	681a      	ldr	r2, [r3, #0]
 800a37a:	6a3b      	ldr	r3, [r7, #32]
 800a37c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a37e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a380:	685a      	ldr	r2, [r3, #4]
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	1ad2      	subs	r2, r2, r3
 800a386:	2308      	movs	r3, #8
 800a388:	005b      	lsls	r3, r3, #1
 800a38a:	429a      	cmp	r2, r3
 800a38c:	d920      	bls.n	800a3d0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a38e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	4413      	add	r3, r2
 800a394:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a396:	69bb      	ldr	r3, [r7, #24]
 800a398:	f003 0307 	and.w	r3, r3, #7
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d00b      	beq.n	800a3b8 <pvPortMalloc+0xfc>
	__asm volatile
 800a3a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3a4:	f383 8811 	msr	BASEPRI, r3
 800a3a8:	f3bf 8f6f 	isb	sy
 800a3ac:	f3bf 8f4f 	dsb	sy
 800a3b0:	613b      	str	r3, [r7, #16]
}
 800a3b2:	bf00      	nop
 800a3b4:	bf00      	nop
 800a3b6:	e7fd      	b.n	800a3b4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a3b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3ba:	685a      	ldr	r2, [r3, #4]
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	1ad2      	subs	r2, r2, r3
 800a3c0:	69bb      	ldr	r3, [r7, #24]
 800a3c2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a3c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3c6:	687a      	ldr	r2, [r7, #4]
 800a3c8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a3ca:	69b8      	ldr	r0, [r7, #24]
 800a3cc:	f000 f90a 	bl	800a5e4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a3d0:	4b1d      	ldr	r3, [pc, #116]	@ (800a448 <pvPortMalloc+0x18c>)
 800a3d2:	681a      	ldr	r2, [r3, #0]
 800a3d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3d6:	685b      	ldr	r3, [r3, #4]
 800a3d8:	1ad3      	subs	r3, r2, r3
 800a3da:	4a1b      	ldr	r2, [pc, #108]	@ (800a448 <pvPortMalloc+0x18c>)
 800a3dc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a3de:	4b1a      	ldr	r3, [pc, #104]	@ (800a448 <pvPortMalloc+0x18c>)
 800a3e0:	681a      	ldr	r2, [r3, #0]
 800a3e2:	4b1b      	ldr	r3, [pc, #108]	@ (800a450 <pvPortMalloc+0x194>)
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	429a      	cmp	r2, r3
 800a3e8:	d203      	bcs.n	800a3f2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a3ea:	4b17      	ldr	r3, [pc, #92]	@ (800a448 <pvPortMalloc+0x18c>)
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	4a18      	ldr	r2, [pc, #96]	@ (800a450 <pvPortMalloc+0x194>)
 800a3f0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a3f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3f4:	685a      	ldr	r2, [r3, #4]
 800a3f6:	4b13      	ldr	r3, [pc, #76]	@ (800a444 <pvPortMalloc+0x188>)
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	431a      	orrs	r2, r3
 800a3fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3fe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a402:	2200      	movs	r2, #0
 800a404:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a406:	4b13      	ldr	r3, [pc, #76]	@ (800a454 <pvPortMalloc+0x198>)
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	3301      	adds	r3, #1
 800a40c:	4a11      	ldr	r2, [pc, #68]	@ (800a454 <pvPortMalloc+0x198>)
 800a40e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a410:	f7fe fcc6 	bl	8008da0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a414:	69fb      	ldr	r3, [r7, #28]
 800a416:	f003 0307 	and.w	r3, r3, #7
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d00b      	beq.n	800a436 <pvPortMalloc+0x17a>
	__asm volatile
 800a41e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a422:	f383 8811 	msr	BASEPRI, r3
 800a426:	f3bf 8f6f 	isb	sy
 800a42a:	f3bf 8f4f 	dsb	sy
 800a42e:	60fb      	str	r3, [r7, #12]
}
 800a430:	bf00      	nop
 800a432:	bf00      	nop
 800a434:	e7fd      	b.n	800a432 <pvPortMalloc+0x176>
	return pvReturn;
 800a436:	69fb      	ldr	r3, [r7, #28]
}
 800a438:	4618      	mov	r0, r3
 800a43a:	3728      	adds	r7, #40	@ 0x28
 800a43c:	46bd      	mov	sp, r7
 800a43e:	bd80      	pop	{r7, pc}
 800a440:	20013624 	.word	0x20013624
 800a444:	20013638 	.word	0x20013638
 800a448:	20013628 	.word	0x20013628
 800a44c:	2001361c 	.word	0x2001361c
 800a450:	2001362c 	.word	0x2001362c
 800a454:	20013630 	.word	0x20013630

0800a458 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a458:	b580      	push	{r7, lr}
 800a45a:	b086      	sub	sp, #24
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d04f      	beq.n	800a50a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a46a:	2308      	movs	r3, #8
 800a46c:	425b      	negs	r3, r3
 800a46e:	697a      	ldr	r2, [r7, #20]
 800a470:	4413      	add	r3, r2
 800a472:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a474:	697b      	ldr	r3, [r7, #20]
 800a476:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a478:	693b      	ldr	r3, [r7, #16]
 800a47a:	685a      	ldr	r2, [r3, #4]
 800a47c:	4b25      	ldr	r3, [pc, #148]	@ (800a514 <vPortFree+0xbc>)
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	4013      	ands	r3, r2
 800a482:	2b00      	cmp	r3, #0
 800a484:	d10b      	bne.n	800a49e <vPortFree+0x46>
	__asm volatile
 800a486:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a48a:	f383 8811 	msr	BASEPRI, r3
 800a48e:	f3bf 8f6f 	isb	sy
 800a492:	f3bf 8f4f 	dsb	sy
 800a496:	60fb      	str	r3, [r7, #12]
}
 800a498:	bf00      	nop
 800a49a:	bf00      	nop
 800a49c:	e7fd      	b.n	800a49a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a49e:	693b      	ldr	r3, [r7, #16]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d00b      	beq.n	800a4be <vPortFree+0x66>
	__asm volatile
 800a4a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4aa:	f383 8811 	msr	BASEPRI, r3
 800a4ae:	f3bf 8f6f 	isb	sy
 800a4b2:	f3bf 8f4f 	dsb	sy
 800a4b6:	60bb      	str	r3, [r7, #8]
}
 800a4b8:	bf00      	nop
 800a4ba:	bf00      	nop
 800a4bc:	e7fd      	b.n	800a4ba <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a4be:	693b      	ldr	r3, [r7, #16]
 800a4c0:	685a      	ldr	r2, [r3, #4]
 800a4c2:	4b14      	ldr	r3, [pc, #80]	@ (800a514 <vPortFree+0xbc>)
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	4013      	ands	r3, r2
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d01e      	beq.n	800a50a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a4cc:	693b      	ldr	r3, [r7, #16]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d11a      	bne.n	800a50a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a4d4:	693b      	ldr	r3, [r7, #16]
 800a4d6:	685a      	ldr	r2, [r3, #4]
 800a4d8:	4b0e      	ldr	r3, [pc, #56]	@ (800a514 <vPortFree+0xbc>)
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	43db      	mvns	r3, r3
 800a4de:	401a      	ands	r2, r3
 800a4e0:	693b      	ldr	r3, [r7, #16]
 800a4e2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a4e4:	f7fe fc4e 	bl	8008d84 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a4e8:	693b      	ldr	r3, [r7, #16]
 800a4ea:	685a      	ldr	r2, [r3, #4]
 800a4ec:	4b0a      	ldr	r3, [pc, #40]	@ (800a518 <vPortFree+0xc0>)
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	4413      	add	r3, r2
 800a4f2:	4a09      	ldr	r2, [pc, #36]	@ (800a518 <vPortFree+0xc0>)
 800a4f4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a4f6:	6938      	ldr	r0, [r7, #16]
 800a4f8:	f000 f874 	bl	800a5e4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a4fc:	4b07      	ldr	r3, [pc, #28]	@ (800a51c <vPortFree+0xc4>)
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	3301      	adds	r3, #1
 800a502:	4a06      	ldr	r2, [pc, #24]	@ (800a51c <vPortFree+0xc4>)
 800a504:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a506:	f7fe fc4b 	bl	8008da0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a50a:	bf00      	nop
 800a50c:	3718      	adds	r7, #24
 800a50e:	46bd      	mov	sp, r7
 800a510:	bd80      	pop	{r7, pc}
 800a512:	bf00      	nop
 800a514:	20013638 	.word	0x20013638
 800a518:	20013628 	.word	0x20013628
 800a51c:	20013634 	.word	0x20013634

0800a520 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a520:	b480      	push	{r7}
 800a522:	b085      	sub	sp, #20
 800a524:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a526:	f247 5330 	movw	r3, #30000	@ 0x7530
 800a52a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a52c:	4b27      	ldr	r3, [pc, #156]	@ (800a5cc <prvHeapInit+0xac>)
 800a52e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	f003 0307 	and.w	r3, r3, #7
 800a536:	2b00      	cmp	r3, #0
 800a538:	d00c      	beq.n	800a554 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	3307      	adds	r3, #7
 800a53e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	f023 0307 	bic.w	r3, r3, #7
 800a546:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a548:	68ba      	ldr	r2, [r7, #8]
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	1ad3      	subs	r3, r2, r3
 800a54e:	4a1f      	ldr	r2, [pc, #124]	@ (800a5cc <prvHeapInit+0xac>)
 800a550:	4413      	add	r3, r2
 800a552:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a558:	4a1d      	ldr	r2, [pc, #116]	@ (800a5d0 <prvHeapInit+0xb0>)
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a55e:	4b1c      	ldr	r3, [pc, #112]	@ (800a5d0 <prvHeapInit+0xb0>)
 800a560:	2200      	movs	r2, #0
 800a562:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	68ba      	ldr	r2, [r7, #8]
 800a568:	4413      	add	r3, r2
 800a56a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a56c:	2208      	movs	r2, #8
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	1a9b      	subs	r3, r3, r2
 800a572:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	f023 0307 	bic.w	r3, r3, #7
 800a57a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	4a15      	ldr	r2, [pc, #84]	@ (800a5d4 <prvHeapInit+0xb4>)
 800a580:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a582:	4b14      	ldr	r3, [pc, #80]	@ (800a5d4 <prvHeapInit+0xb4>)
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	2200      	movs	r2, #0
 800a588:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a58a:	4b12      	ldr	r3, [pc, #72]	@ (800a5d4 <prvHeapInit+0xb4>)
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	2200      	movs	r2, #0
 800a590:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a596:	683b      	ldr	r3, [r7, #0]
 800a598:	68fa      	ldr	r2, [r7, #12]
 800a59a:	1ad2      	subs	r2, r2, r3
 800a59c:	683b      	ldr	r3, [r7, #0]
 800a59e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a5a0:	4b0c      	ldr	r3, [pc, #48]	@ (800a5d4 <prvHeapInit+0xb4>)
 800a5a2:	681a      	ldr	r2, [r3, #0]
 800a5a4:	683b      	ldr	r3, [r7, #0]
 800a5a6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a5a8:	683b      	ldr	r3, [r7, #0]
 800a5aa:	685b      	ldr	r3, [r3, #4]
 800a5ac:	4a0a      	ldr	r2, [pc, #40]	@ (800a5d8 <prvHeapInit+0xb8>)
 800a5ae:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a5b0:	683b      	ldr	r3, [r7, #0]
 800a5b2:	685b      	ldr	r3, [r3, #4]
 800a5b4:	4a09      	ldr	r2, [pc, #36]	@ (800a5dc <prvHeapInit+0xbc>)
 800a5b6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a5b8:	4b09      	ldr	r3, [pc, #36]	@ (800a5e0 <prvHeapInit+0xc0>)
 800a5ba:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a5be:	601a      	str	r2, [r3, #0]
}
 800a5c0:	bf00      	nop
 800a5c2:	3714      	adds	r7, #20
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ca:	4770      	bx	lr
 800a5cc:	2000c0ec 	.word	0x2000c0ec
 800a5d0:	2001361c 	.word	0x2001361c
 800a5d4:	20013624 	.word	0x20013624
 800a5d8:	2001362c 	.word	0x2001362c
 800a5dc:	20013628 	.word	0x20013628
 800a5e0:	20013638 	.word	0x20013638

0800a5e4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a5e4:	b480      	push	{r7}
 800a5e6:	b085      	sub	sp, #20
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a5ec:	4b28      	ldr	r3, [pc, #160]	@ (800a690 <prvInsertBlockIntoFreeList+0xac>)
 800a5ee:	60fb      	str	r3, [r7, #12]
 800a5f0:	e002      	b.n	800a5f8 <prvInsertBlockIntoFreeList+0x14>
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	60fb      	str	r3, [r7, #12]
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	687a      	ldr	r2, [r7, #4]
 800a5fe:	429a      	cmp	r2, r3
 800a600:	d8f7      	bhi.n	800a5f2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	685b      	ldr	r3, [r3, #4]
 800a60a:	68ba      	ldr	r2, [r7, #8]
 800a60c:	4413      	add	r3, r2
 800a60e:	687a      	ldr	r2, [r7, #4]
 800a610:	429a      	cmp	r2, r3
 800a612:	d108      	bne.n	800a626 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	685a      	ldr	r2, [r3, #4]
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	685b      	ldr	r3, [r3, #4]
 800a61c:	441a      	add	r2, r3
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	685b      	ldr	r3, [r3, #4]
 800a62e:	68ba      	ldr	r2, [r7, #8]
 800a630:	441a      	add	r2, r3
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	429a      	cmp	r2, r3
 800a638:	d118      	bne.n	800a66c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	681a      	ldr	r2, [r3, #0]
 800a63e:	4b15      	ldr	r3, [pc, #84]	@ (800a694 <prvInsertBlockIntoFreeList+0xb0>)
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	429a      	cmp	r2, r3
 800a644:	d00d      	beq.n	800a662 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	685a      	ldr	r2, [r3, #4]
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	685b      	ldr	r3, [r3, #4]
 800a650:	441a      	add	r2, r3
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	681a      	ldr	r2, [r3, #0]
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	601a      	str	r2, [r3, #0]
 800a660:	e008      	b.n	800a674 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a662:	4b0c      	ldr	r3, [pc, #48]	@ (800a694 <prvInsertBlockIntoFreeList+0xb0>)
 800a664:	681a      	ldr	r2, [r3, #0]
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	601a      	str	r2, [r3, #0]
 800a66a:	e003      	b.n	800a674 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	681a      	ldr	r2, [r3, #0]
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a674:	68fa      	ldr	r2, [r7, #12]
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	429a      	cmp	r2, r3
 800a67a:	d002      	beq.n	800a682 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	687a      	ldr	r2, [r7, #4]
 800a680:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a682:	bf00      	nop
 800a684:	3714      	adds	r7, #20
 800a686:	46bd      	mov	sp, r7
 800a688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68c:	4770      	bx	lr
 800a68e:	bf00      	nop
 800a690:	2001361c 	.word	0x2001361c
 800a694:	20013624 	.word	0x20013624

0800a698 <arm_mat_mult_f32>:
 800a698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a69c:	460c      	mov	r4, r1
 800a69e:	b08b      	sub	sp, #44	@ 0x2c
 800a6a0:	8825      	ldrh	r5, [r4, #0]
 800a6a2:	9107      	str	r1, [sp, #28]
 800a6a4:	8841      	ldrh	r1, [r0, #2]
 800a6a6:	8806      	ldrh	r6, [r0, #0]
 800a6a8:	6843      	ldr	r3, [r0, #4]
 800a6aa:	6857      	ldr	r7, [r2, #4]
 800a6ac:	6860      	ldr	r0, [r4, #4]
 800a6ae:	9602      	str	r6, [sp, #8]
 800a6b0:	428d      	cmp	r5, r1
 800a6b2:	8864      	ldrh	r4, [r4, #2]
 800a6b4:	f040 80f9 	bne.w	800a8aa <arm_mat_mult_f32+0x212>
 800a6b8:	8811      	ldrh	r1, [r2, #0]
 800a6ba:	42b1      	cmp	r1, r6
 800a6bc:	f040 80f5 	bne.w	800a8aa <arm_mat_mult_f32+0x212>
 800a6c0:	8851      	ldrh	r1, [r2, #2]
 800a6c2:	42a1      	cmp	r1, r4
 800a6c4:	f040 80f1 	bne.w	800a8aa <arm_mat_mult_f32+0x212>
 800a6c8:	00aa      	lsls	r2, r5, #2
 800a6ca:	2901      	cmp	r1, #1
 800a6cc:	ea4f 0c95 	mov.w	ip, r5, lsr #2
 800a6d0:	ea4f 0481 	mov.w	r4, r1, lsl #2
 800a6d4:	f005 0e03 	and.w	lr, r5, #3
 800a6d8:	9206      	str	r2, [sp, #24]
 800a6da:	d170      	bne.n	800a7be <arm_mat_mult_f32+0x126>
 800a6dc:	1d01      	adds	r1, r0, #4
 800a6de:	9105      	str	r1, [sp, #20]
 800a6e0:	ea4f 110c 	mov.w	r1, ip, lsl #4
 800a6e4:	4602      	mov	r2, r0
 800a6e6:	f107 0904 	add.w	r9, r7, #4
 800a6ea:	9101      	str	r1, [sp, #4]
 800a6ec:	eb03 1b0c 	add.w	fp, r3, ip, lsl #4
 800a6f0:	f103 0a10 	add.w	sl, r3, #16
 800a6f4:	f1aa 0310 	sub.w	r3, sl, #16
 800a6f8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800a6fc:	9303      	str	r3, [sp, #12]
 800a6fe:	f1a9 0704 	sub.w	r7, r9, #4
 800a702:	eddf 7a6c 	vldr	s15, [pc, #432]	@ 800a8b4 <arm_mat_mult_f32+0x21c>
 800a706:	f1bc 0f00 	cmp.w	ip, #0
 800a70a:	d052      	beq.n	800a7b2 <arm_mat_mult_f32+0x11a>
 800a70c:	f102 0008 	add.w	r0, r2, #8
 800a710:	4653      	mov	r3, sl
 800a712:	4665      	mov	r5, ip
 800a714:	4611      	mov	r1, r2
 800a716:	ed13 6a04 	vldr	s12, [r3, #-16]
 800a71a:	ed91 7a00 	vldr	s14, [r1]
 800a71e:	ed53 4a03 	vldr	s9, [r3, #-12]
 800a722:	edd0 6a00 	vldr	s13, [r0]
 800a726:	ed13 5a02 	vldr	s10, [r3, #-8]
 800a72a:	ed53 5a01 	vldr	s11, [r3, #-4]
 800a72e:	190e      	adds	r6, r1, r4
 800a730:	ee27 7a06 	vmul.f32	s14, s14, s12
 800a734:	ed96 6a00 	vldr	s12, [r6]
 800a738:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a73c:	ee26 6a24 	vmul.f32	s12, s12, s9
 800a740:	1906      	adds	r6, r0, r4
 800a742:	ee36 6a27 	vadd.f32	s12, s12, s15
 800a746:	ee26 7a85 	vmul.f32	s14, s13, s10
 800a74a:	edd6 7a00 	vldr	s15, [r6]
 800a74e:	ee37 7a06 	vadd.f32	s14, s14, s12
 800a752:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800a756:	3d01      	subs	r5, #1
 800a758:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a75c:	f101 0110 	add.w	r1, r1, #16
 800a760:	f100 0010 	add.w	r0, r0, #16
 800a764:	f103 0310 	add.w	r3, r3, #16
 800a768:	d1d5      	bne.n	800a716 <arm_mat_mult_f32+0x7e>
 800a76a:	9b01      	ldr	r3, [sp, #4]
 800a76c:	4659      	mov	r1, fp
 800a76e:	441a      	add	r2, r3
 800a770:	f1be 0f00 	cmp.w	lr, #0
 800a774:	d00b      	beq.n	800a78e <arm_mat_mult_f32+0xf6>
 800a776:	4673      	mov	r3, lr
 800a778:	ed92 7a00 	vldr	s14, [r2]
 800a77c:	ecf1 6a01 	vldmia	r1!, {s13}
 800a780:	ee27 7a26 	vmul.f32	s14, s14, s13
 800a784:	3b01      	subs	r3, #1
 800a786:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a78a:	4422      	add	r2, r4
 800a78c:	d1f4      	bne.n	800a778 <arm_mat_mult_f32+0xe0>
 800a78e:	ece7 7a01 	vstmia	r7!, {s15}
 800a792:	454f      	cmp	r7, r9
 800a794:	4642      	mov	r2, r8
 800a796:	f108 0804 	add.w	r8, r8, #4
 800a79a:	d1b2      	bne.n	800a702 <arm_mat_mult_f32+0x6a>
 800a79c:	9b06      	ldr	r3, [sp, #24]
 800a79e:	449b      	add	fp, r3
 800a7a0:	449a      	add	sl, r3
 800a7a2:	9b02      	ldr	r3, [sp, #8]
 800a7a4:	3b01      	subs	r3, #1
 800a7a6:	44a1      	add	r9, r4
 800a7a8:	9302      	str	r3, [sp, #8]
 800a7aa:	d004      	beq.n	800a7b6 <arm_mat_mult_f32+0x11e>
 800a7ac:	9b07      	ldr	r3, [sp, #28]
 800a7ae:	685a      	ldr	r2, [r3, #4]
 800a7b0:	e7a0      	b.n	800a6f4 <arm_mat_mult_f32+0x5c>
 800a7b2:	9903      	ldr	r1, [sp, #12]
 800a7b4:	e7dc      	b.n	800a770 <arm_mat_mult_f32+0xd8>
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	b00b      	add	sp, #44	@ 0x2c
 800a7ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7be:	ebc1 7281 	rsb	r2, r1, r1, lsl #30
 800a7c2:	0092      	lsls	r2, r2, #2
 800a7c4:	010e      	lsls	r6, r1, #4
 800a7c6:	9209      	str	r2, [sp, #36]	@ 0x24
 800a7c8:	00ca      	lsls	r2, r1, #3
 800a7ca:	9204      	str	r2, [sp, #16]
 800a7cc:	fb06 f20c 	mul.w	r2, r6, ip
 800a7d0:	1d05      	adds	r5, r0, #4
 800a7d2:	9203      	str	r2, [sp, #12]
 800a7d4:	eb03 120c 	add.w	r2, r3, ip, lsl #4
 800a7d8:	eb07 0b04 	add.w	fp, r7, r4
 800a7dc:	9505      	str	r5, [sp, #20]
 800a7de:	9201      	str	r2, [sp, #4]
 800a7e0:	f103 0a10 	add.w	sl, r3, #16
 800a7e4:	f1aa 0310 	sub.w	r3, sl, #16
 800a7e8:	9308      	str	r3, [sp, #32]
 800a7ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a7ec:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800a7f0:	eb0b 0803 	add.w	r8, fp, r3
 800a7f4:	eddf 7a2f 	vldr	s15, [pc, #188]	@ 800a8b4 <arm_mat_mult_f32+0x21c>
 800a7f8:	f1bc 0f00 	cmp.w	ip, #0
 800a7fc:	d053      	beq.n	800a8a6 <arm_mat_mult_f32+0x20e>
 800a7fe:	9b04      	ldr	r3, [sp, #16]
 800a800:	4665      	mov	r5, ip
 800a802:	18c1      	adds	r1, r0, r3
 800a804:	4602      	mov	r2, r0
 800a806:	4653      	mov	r3, sl
 800a808:	ed92 6a00 	vldr	s12, [r2]
 800a80c:	ed13 7a04 	vldr	s14, [r3, #-16]
 800a810:	ed53 4a03 	vldr	s9, [r3, #-12]
 800a814:	ed53 6a02 	vldr	s13, [r3, #-8]
 800a818:	ed91 5a00 	vldr	s10, [r1]
 800a81c:	ed53 5a01 	vldr	s11, [r3, #-4]
 800a820:	1917      	adds	r7, r2, r4
 800a822:	ee27 7a06 	vmul.f32	s14, s14, s12
 800a826:	ed97 6a00 	vldr	s12, [r7]
 800a82a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a82e:	ee26 6a24 	vmul.f32	s12, s12, s9
 800a832:	190f      	adds	r7, r1, r4
 800a834:	ee36 6a27 	vadd.f32	s12, s12, s15
 800a838:	ee26 7a85 	vmul.f32	s14, s13, s10
 800a83c:	edd7 7a00 	vldr	s15, [r7]
 800a840:	ee37 7a06 	vadd.f32	s14, s14, s12
 800a844:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800a848:	3d01      	subs	r5, #1
 800a84a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a84e:	4432      	add	r2, r6
 800a850:	4431      	add	r1, r6
 800a852:	f103 0310 	add.w	r3, r3, #16
 800a856:	d1d7      	bne.n	800a808 <arm_mat_mult_f32+0x170>
 800a858:	9b03      	ldr	r3, [sp, #12]
 800a85a:	9a01      	ldr	r2, [sp, #4]
 800a85c:	4418      	add	r0, r3
 800a85e:	f1be 0f00 	cmp.w	lr, #0
 800a862:	d00b      	beq.n	800a87c <arm_mat_mult_f32+0x1e4>
 800a864:	4673      	mov	r3, lr
 800a866:	edd0 6a00 	vldr	s13, [r0]
 800a86a:	ecb2 7a01 	vldmia	r2!, {s14}
 800a86e:	ee27 7a26 	vmul.f32	s14, s14, s13
 800a872:	3b01      	subs	r3, #1
 800a874:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a878:	4420      	add	r0, r4
 800a87a:	d1f4      	bne.n	800a866 <arm_mat_mult_f32+0x1ce>
 800a87c:	ece8 7a01 	vstmia	r8!, {s15}
 800a880:	45d8      	cmp	r8, fp
 800a882:	4648      	mov	r0, r9
 800a884:	f109 0904 	add.w	r9, r9, #4
 800a888:	d1b4      	bne.n	800a7f4 <arm_mat_mult_f32+0x15c>
 800a88a:	9a01      	ldr	r2, [sp, #4]
 800a88c:	9b06      	ldr	r3, [sp, #24]
 800a88e:	4611      	mov	r1, r2
 800a890:	4419      	add	r1, r3
 800a892:	449a      	add	sl, r3
 800a894:	9b02      	ldr	r3, [sp, #8]
 800a896:	9101      	str	r1, [sp, #4]
 800a898:	3b01      	subs	r3, #1
 800a89a:	44a3      	add	fp, r4
 800a89c:	9302      	str	r3, [sp, #8]
 800a89e:	d08a      	beq.n	800a7b6 <arm_mat_mult_f32+0x11e>
 800a8a0:	9b07      	ldr	r3, [sp, #28]
 800a8a2:	6858      	ldr	r0, [r3, #4]
 800a8a4:	e79e      	b.n	800a7e4 <arm_mat_mult_f32+0x14c>
 800a8a6:	9a08      	ldr	r2, [sp, #32]
 800a8a8:	e7d9      	b.n	800a85e <arm_mat_mult_f32+0x1c6>
 800a8aa:	f06f 0002 	mvn.w	r0, #2
 800a8ae:	b00b      	add	sp, #44	@ 0x2c
 800a8b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8b4:	00000000 	.word	0x00000000

0800a8b8 <arm_mat_init_f32>:
 800a8b8:	8001      	strh	r1, [r0, #0]
 800a8ba:	8042      	strh	r2, [r0, #2]
 800a8bc:	6043      	str	r3, [r0, #4]
 800a8be:	4770      	bx	lr

0800a8c0 <handle_message_memory.constprop.4>:
 800a8c0:	b082      	sub	sp, #8
 800a8c2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8c6:	b0a7      	sub	sp, #156	@ 0x9c
 800a8c8:	ac30      	add	r4, sp, #192	@ 0xc0
 800a8ca:	e884 000c 	stmia.w	r4, {r2, r3}
 800a8ce:	e9dd 8336 	ldrd	r8, r3, [sp, #216]	@ 0xd8
 800a8d2:	9115      	str	r1, [sp, #84]	@ 0x54
 800a8d4:	9935      	ldr	r1, [sp, #212]	@ 0xd4
 800a8d6:	930c      	str	r3, [sp, #48]	@ 0x30
 800a8d8:	e9dd 9b33 	ldrd	r9, fp, [sp, #204]	@ 0xcc
 800a8dc:	4604      	mov	r4, r0
 800a8de:	9213      	str	r2, [sp, #76]	@ 0x4c
 800a8e0:	2900      	cmp	r1, #0
 800a8e2:	f000 8230 	beq.w	800ad46 <handle_message_memory.constprop.4+0x486>
 800a8e6:	f8d4 c008 	ldr.w	ip, [r4, #8]
 800a8ea:	46e6      	mov	lr, ip
 800a8ec:	f1bc 0f00 	cmp.w	ip, #0
 800a8f0:	d03e      	beq.n	800a970 <handle_message_memory.constprop.4+0xb0>
 800a8f2:	f04f 0e00 	mov.w	lr, #0
 800a8f6:	465e      	mov	r6, fp
 800a8f8:	4645      	mov	r5, r8
 800a8fa:	46f2      	mov	sl, lr
 800a8fc:	46cb      	mov	fp, r9
 800a8fe:	9114      	str	r1, [sp, #80]	@ 0x50
 800a900:	f8cd e028 	str.w	lr, [sp, #40]	@ 0x28
 800a904:	46a0      	mov	r8, r4
 800a906:	f8d8 2014 	ldr.w	r2, [r8, #20]
 800a90a:	ebca 110a 	rsb	r1, sl, sl, lsl #4
 800a90e:	eb02 0381 	add.w	r3, r2, r1, lsl #2
 800a912:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800a916:	920d      	str	r2, [sp, #52]	@ 0x34
 800a918:	689a      	ldr	r2, [r3, #8]
 800a91a:	f893 9011 	ldrb.w	r9, [r3, #17]
 800a91e:	920e      	str	r2, [sp, #56]	@ 0x38
 800a920:	68da      	ldr	r2, [r3, #12]
 800a922:	7e19      	ldrb	r1, [r3, #24]
 800a924:	791f      	ldrb	r7, [r3, #4]
 800a926:	920f      	str	r2, [sp, #60]	@ 0x3c
 800a928:	695a      	ldr	r2, [r3, #20]
 800a92a:	69db      	ldr	r3, [r3, #28]
 800a92c:	9209      	str	r2, [sp, #36]	@ 0x24
 800a92e:	910b      	str	r1, [sp, #44]	@ 0x2c
 800a930:	9310      	str	r3, [sp, #64]	@ 0x40
 800a932:	f1b9 0f00 	cmp.w	r9, #0
 800a936:	d044      	beq.n	800a9c2 <handle_message_memory.constprop.4+0x102>
 800a938:	2a00      	cmp	r2, #0
 800a93a:	d060      	beq.n	800a9fe <handle_message_memory.constprop.4+0x13e>
 800a93c:	2900      	cmp	r1, #0
 800a93e:	d15e      	bne.n	800a9fe <handle_message_memory.constprop.4+0x13e>
 800a940:	2f10      	cmp	r7, #16
 800a942:	f000 81bf 	beq.w	800acc4 <handle_message_memory.constprop.4+0x404>
 800a946:	2e00      	cmp	r6, #0
 800a948:	f040 81d4 	bne.w	800acf4 <handle_message_memory.constprop.4+0x434>
 800a94c:	2f12      	cmp	r7, #18
 800a94e:	f000 817a 	beq.w	800ac46 <handle_message_memory.constprop.4+0x386>
 800a952:	2300      	movs	r3, #0
 800a954:	9309      	str	r3, [sp, #36]	@ 0x24
 800a956:	2f64      	cmp	r7, #100	@ 0x64
 800a958:	d01e      	beq.n	800a998 <handle_message_memory.constprop.4+0xd8>
 800a95a:	2e00      	cmp	r6, #0
 800a95c:	f040 808a 	bne.w	800aa74 <handle_message_memory.constprop.4+0x1b4>
 800a960:	f8d8 c008 	ldr.w	ip, [r8, #8]
 800a964:	f10a 0a01 	add.w	sl, sl, #1
 800a968:	45e2      	cmp	sl, ip
 800a96a:	d3cc      	bcc.n	800a906 <handle_message_memory.constprop.4+0x46>
 800a96c:	f8dd e028 	ldr.w	lr, [sp, #40]	@ 0x28
 800a970:	4670      	mov	r0, lr
 800a972:	b027      	add	sp, #156	@ 0x9c
 800a974:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a978:	b002      	add	sp, #8
 800a97a:	4770      	bx	lr
 800a97c:	2e00      	cmp	r6, #0
 800a97e:	f040 8176 	bne.w	800ac6e <handle_message_memory.constprop.4+0x3ae>
 800a982:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a984:	2b00      	cmp	r3, #0
 800a986:	f000 816f 	beq.w	800ac68 <handle_message_memory.constprop.4+0x3a8>
 800a98a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a98c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a98e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800a992:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a996:	930a      	str	r3, [sp, #40]	@ 0x28
 800a998:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	f000 81a6 	beq.w	800acec <handle_message_memory.constprop.4+0x42c>
 800a9a0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a9a2:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800a9a4:	4613      	mov	r3, r2
 800a9a6:	2a00      	cmp	r2, #0
 800a9a8:	bf08      	it	eq
 800a9aa:	460b      	moveq	r3, r1
 800a9ac:	930e      	str	r3, [sp, #56]	@ 0x38
 800a9ae:	2e00      	cmp	r6, #0
 800a9b0:	d141      	bne.n	800aa36 <handle_message_memory.constprop.4+0x176>
 800a9b2:	e9dd 1209 	ldrd	r1, r2, [sp, #36]	@ 0x24
 800a9b6:	fb01 2303 	mla	r3, r1, r3, r2
 800a9ba:	f8d8 c008 	ldr.w	ip, [r8, #8]
 800a9be:	930a      	str	r3, [sp, #40]	@ 0x28
 800a9c0:	e7d0      	b.n	800a964 <handle_message_memory.constprop.4+0xa4>
 800a9c2:	2e00      	cmp	r6, #0
 800a9c4:	f040 80be 	bne.w	800ab44 <handle_message_memory.constprop.4+0x284>
 800a9c8:	2f10      	cmp	r7, #16
 800a9ca:	d1bf      	bne.n	800a94c <handle_message_memory.constprop.4+0x8c>
 800a9cc:	2900      	cmp	r1, #0
 800a9ce:	f040 8136 	bne.w	800ac3e <handle_message_memory.constprop.4+0x37e>
 800a9d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a9d4:	b14b      	cbz	r3, 800a9ea <handle_message_memory.constprop.4+0x12a>
 800a9d6:	2e00      	cmp	r6, #0
 800a9d8:	f040 81af 	bne.w	800ad3a <handle_message_memory.constprop.4+0x47a>
 800a9dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a9de:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a9e0:	f8d8 c008 	ldr.w	ip, [r8, #8]
 800a9e4:	4413      	add	r3, r2
 800a9e6:	930a      	str	r3, [sp, #40]	@ 0x28
 800a9e8:	e7bc      	b.n	800a964 <handle_message_memory.constprop.4+0xa4>
 800a9ea:	2e00      	cmp	r6, #0
 800a9ec:	f040 8163 	bne.w	800acb6 <handle_message_memory.constprop.4+0x3f6>
 800a9f0:	f8d8 c008 	ldr.w	ip, [r8, #8]
 800a9f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a9f6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a9f8:	4413      	add	r3, r2
 800a9fa:	930a      	str	r3, [sp, #40]	@ 0x28
 800a9fc:	e7b2      	b.n	800a964 <handle_message_memory.constprop.4+0xa4>
 800a9fe:	2f10      	cmp	r7, #16
 800aa00:	d0bc      	beq.n	800a97c <handle_message_memory.constprop.4+0xbc>
 800aa02:	2e00      	cmp	r6, #0
 800aa04:	f040 8134 	bne.w	800ac70 <handle_message_memory.constprop.4+0x3b0>
 800aa08:	2f12      	cmp	r7, #18
 800aa0a:	d04b      	beq.n	800aaa4 <handle_message_memory.constprop.4+0x1e4>
 800aa0c:	2f64      	cmp	r7, #100	@ 0x64
 800aa0e:	f000 810d 	beq.w	800ac2c <handle_message_memory.constprop.4+0x36c>
 800aa12:	4bb2      	ldr	r3, [pc, #712]	@ (800acdc <handle_message_memory.constprop.4+0x41c>)
 800aa14:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 800aa18:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	f040 810a 	bne.w	800ac34 <handle_message_memory.constprop.4+0x374>
 800aa20:	9b32      	ldr	r3, [sp, #200]	@ 0xc8
 800aa22:	9309      	str	r3, [sp, #36]	@ 0x24
 800aa24:	2e00      	cmp	r6, #0
 800aa26:	f040 8143 	bne.w	800acb0 <handle_message_memory.constprop.4+0x3f0>
 800aa2a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	@ 0x24
 800aa2e:	fb04 3302 	mla	r3, r4, r2, r3
 800aa32:	930a      	str	r3, [sp, #40]	@ 0x28
 800aa34:	e794      	b.n	800a960 <handle_message_memory.constprop.4+0xa0>
 800aa36:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800aa38:	1e5f      	subs	r7, r3, #1
 800aa3a:	2400      	movs	r4, #0
 800aa3c:	46b9      	mov	r9, r7
 800aa3e:	f85b 7034 	ldr.w	r7, [fp, r4, lsl #3]
 800aa42:	464a      	mov	r2, r9
 800aa44:	4629      	mov	r1, r5
 800aa46:	4638      	mov	r0, r7
 800aa48:	f012 fcf8 	bl	801d43c <memcmp>
 800aa4c:	4603      	mov	r3, r0
 800aa4e:	49a4      	ldr	r1, [pc, #656]	@ (800ace0 <handle_message_memory.constprop.4+0x420>)
 800aa50:	2205      	movs	r2, #5
 800aa52:	eb07 0009 	add.w	r0, r7, r9
 800aa56:	b923      	cbnz	r3, 800aa62 <handle_message_memory.constprop.4+0x1a2>
 800aa58:	f012 fcf0 	bl	801d43c <memcmp>
 800aa5c:	2800      	cmp	r0, #0
 800aa5e:	f000 8163 	beq.w	800ad28 <handle_message_memory.constprop.4+0x468>
 800aa62:	3401      	adds	r4, #1
 800aa64:	42a6      	cmp	r6, r4
 800aa66:	d1ea      	bne.n	800aa3e <handle_message_memory.constprop.4+0x17e>
 800aa68:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aa6a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800aa6c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800aa6e:	fb01 3302 	mla	r3, r1, r2, r3
 800aa72:	930a      	str	r3, [sp, #40]	@ 0x28
 800aa74:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800aa76:	f7f5 fc23 	bl	80002c0 <strlen>
 800aa7a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800aa7c:	9536      	str	r5, [sp, #216]	@ 0xd8
 800aa7e:	3001      	adds	r0, #1
 800aa80:	9000      	str	r0, [sp, #0]
 800aa82:	ad16      	add	r5, sp, #88	@ 0x58
 800aa84:	9337      	str	r3, [sp, #220]	@ 0xdc
 800aa86:	ac36      	add	r4, sp, #216	@ 0xd8
 800aa88:	4628      	mov	r0, r5
 800aa8a:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800aa8e:	f004 fabd 	bl	800f00c <micro_ros_string_utilities_remove_tail_chars>
 800aa92:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800aa96:	f8d8 c008 	ldr.w	ip, [r8, #8]
 800aa9a:	910c      	str	r1, [sp, #48]	@ 0x30
 800aa9c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800aaa0:	4605      	mov	r5, r0
 800aaa2:	e75f      	b.n	800a964 <handle_message_memory.constprop.4+0xa4>
 800aaa4:	4b8f      	ldr	r3, [pc, #572]	@ (800ace4 <handle_message_memory.constprop.4+0x424>)
 800aaa6:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 800aaa8:	6819      	ldr	r1, [r3, #0]
 800aaaa:	f003 fa35 	bl	800df18 <get_message_typesupport_handle>
 800aaae:	6843      	ldr	r3, [r0, #4]
 800aab0:	68dc      	ldr	r4, [r3, #12]
 800aab2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	f040 80bd 	bne.w	800ac34 <handle_message_memory.constprop.4+0x374>
 800aaba:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 800aabc:	9309      	str	r3, [sp, #36]	@ 0x24
 800aabe:	2e00      	cmp	r6, #0
 800aac0:	f040 80f6 	bne.w	800acb0 <handle_message_memory.constprop.4+0x3f0>
 800aac4:	461a      	mov	r2, r3
 800aac6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aac8:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 800aaca:	fb02 3304 	mla	r3, r2, r4, r3
 800aace:	930a      	str	r3, [sp, #40]	@ 0x28
 800aad0:	4b84      	ldr	r3, [pc, #528]	@ (800ace4 <handle_message_memory.constprop.4+0x424>)
 800aad2:	6819      	ldr	r1, [r3, #0]
 800aad4:	f003 fa20 	bl	800df18 <get_message_typesupport_handle>
 800aad8:	f8d0 c004 	ldr.w	ip, [r0, #4]
 800aadc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aade:	2a00      	cmp	r2, #0
 800aae0:	f43f af3b 	beq.w	800a95a <handle_message_memory.constprop.4+0x9a>
 800aae4:	ab04      	add	r3, sp, #16
 800aae6:	f8cd 803c 	str.w	r8, [sp, #60]	@ 0x3c
 800aaea:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
 800aaee:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800aaf2:	960b      	str	r6, [sp, #44]	@ 0x2c
 800aaf4:	f8cd a038 	str.w	sl, [sp, #56]	@ 0x38
 800aaf8:	2700      	movs	r7, #0
 800aafa:	ac36      	add	r4, sp, #216	@ 0xd8
 800aafc:	f10d 09c8 	add.w	r9, sp, #200	@ 0xc8
 800ab00:	46e3      	mov	fp, ip
 800ab02:	4692      	mov	sl, r2
 800ab04:	461e      	mov	r6, r3
 800ab06:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ab08:	9337      	str	r3, [sp, #220]	@ 0xdc
 800ab0a:	9536      	str	r5, [sp, #216]	@ 0xd8
 800ab0c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800ab10:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 800ab14:	e899 000f 	ldmia.w	r9, {r0, r1, r2, r3}
 800ab18:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800ab1c:	ab30      	add	r3, sp, #192	@ 0xc0
 800ab1e:	cb0c      	ldmia	r3, {r2, r3}
 800ab20:	2100      	movs	r1, #0
 800ab22:	4658      	mov	r0, fp
 800ab24:	f7ff fecc 	bl	800a8c0 <handle_message_memory.constprop.4>
 800ab28:	3701      	adds	r7, #1
 800ab2a:	4557      	cmp	r7, sl
 800ab2c:	4480      	add	r8, r0
 800ab2e:	d1ea      	bne.n	800ab06 <handle_message_memory.constprop.4+0x246>
 800ab30:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800ab34:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 800ab38:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800ab3a:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800ab3e:	f8dd 803c 	ldr.w	r8, [sp, #60]	@ 0x3c
 800ab42:	e70a      	b.n	800a95a <handle_message_memory.constprop.4+0x9a>
 800ab44:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ab46:	9337      	str	r3, [sp, #220]	@ 0xdc
 800ab48:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ab4a:	9536      	str	r5, [sp, #216]	@ 0xd8
 800ab4c:	ac36      	add	r4, sp, #216	@ 0xd8
 800ab4e:	9300      	str	r3, [sp, #0]
 800ab50:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800ab54:	4620      	mov	r0, r4
 800ab56:	f004 fa2d 	bl	800efb4 <micro_ros_string_utilities_append>
 800ab5a:	4b63      	ldr	r3, [pc, #396]	@ (800ace8 <handle_message_memory.constprop.4+0x428>)
 800ab5c:	9300      	str	r3, [sp, #0]
 800ab5e:	ad16      	add	r5, sp, #88	@ 0x58
 800ab60:	4628      	mov	r0, r5
 800ab62:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800ab66:	f004 fa25 	bl	800efb4 <micro_ros_string_utilities_append>
 800ab6a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800ab6e:	2f10      	cmp	r7, #16
 800ab70:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ab74:	4605      	mov	r5, r0
 800ab76:	910c      	str	r1, [sp, #48]	@ 0x30
 800ab78:	f47f aee8 	bne.w	800a94c <handle_message_memory.constprop.4+0x8c>
 800ab7c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	f43f af27 	beq.w	800a9d2 <handle_message_memory.constprop.4+0x112>
 800ab84:	f8cd 902c 	str.w	r9, [sp, #44]	@ 0x2c
 800ab88:	2401      	movs	r4, #1
 800ab8a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ab8c:	9711      	str	r7, [sp, #68]	@ 0x44
 800ab8e:	f04f 0900 	mov.w	r9, #0
 800ab92:	3b01      	subs	r3, #1
 800ab94:	464f      	mov	r7, r9
 800ab96:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800ab9a:	46a1      	mov	r9, r4
 800ab9c:	4698      	mov	r8, r3
 800ab9e:	f85b 4037 	ldr.w	r4, [fp, r7, lsl #3]
 800aba2:	4620      	mov	r0, r4
 800aba4:	f7f5 fb8c 	bl	80002c0 <strlen>
 800aba8:	4629      	mov	r1, r5
 800abaa:	4602      	mov	r2, r0
 800abac:	4620      	mov	r0, r4
 800abae:	f012 fc45 	bl	801d43c <memcmp>
 800abb2:	b930      	cbnz	r0, 800abc2 <handle_message_memory.constprop.4+0x302>
 800abb4:	4642      	mov	r2, r8
 800abb6:	4629      	mov	r1, r5
 800abb8:	4620      	mov	r0, r4
 800abba:	f012 fc3f 	bl	801d43c <memcmp>
 800abbe:	2800      	cmp	r0, #0
 800abc0:	d049      	beq.n	800ac56 <handle_message_memory.constprop.4+0x396>
 800abc2:	3701      	adds	r7, #1
 800abc4:	42be      	cmp	r6, r7
 800abc6:	d8ea      	bhi.n	800ab9e <handle_message_memory.constprop.4+0x2de>
 800abc8:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 800abca:	f8dd 8048 	ldr.w	r8, [sp, #72]	@ 0x48
 800abce:	464c      	mov	r4, r9
 800abd0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	@ 0x24
 800abd4:	2f12      	cmp	r7, #18
 800abd6:	fb04 3302 	mla	r3, r4, r2, r3
 800abda:	930a      	str	r3, [sp, #40]	@ 0x28
 800abdc:	f47f aebb 	bne.w	800a956 <handle_message_memory.constprop.4+0x96>
 800abe0:	4b40      	ldr	r3, [pc, #256]	@ (800ace4 <handle_message_memory.constprop.4+0x424>)
 800abe2:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 800abe4:	6819      	ldr	r1, [r3, #0]
 800abe6:	f003 f997 	bl	800df18 <get_message_typesupport_handle>
 800abea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800abec:	f8d0 c004 	ldr.w	ip, [r0, #4]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	f47f af73 	bne.w	800aadc <handle_message_memory.constprop.4+0x21c>
 800abf6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800abf8:	9337      	str	r3, [sp, #220]	@ 0xdc
 800abfa:	9536      	str	r5, [sp, #216]	@ 0xd8
 800abfc:	ac36      	add	r4, sp, #216	@ 0xd8
 800abfe:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800ac02:	ab04      	add	r3, sp, #16
 800ac04:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800ac08:	f10d 09c8 	add.w	r9, sp, #200	@ 0xc8
 800ac0c:	e899 000f 	ldmia.w	r9, {r0, r1, r2, r3}
 800ac10:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800ac14:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800ac16:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800ac18:	4419      	add	r1, r3
 800ac1a:	ab30      	add	r3, sp, #192	@ 0xc0
 800ac1c:	cb0c      	ldmia	r3, {r2, r3}
 800ac1e:	4660      	mov	r0, ip
 800ac20:	f7ff fe4e 	bl	800a8c0 <handle_message_memory.constprop.4>
 800ac24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ac26:	4403      	add	r3, r0
 800ac28:	930a      	str	r3, [sp, #40]	@ 0x28
 800ac2a:	e696      	b.n	800a95a <handle_message_memory.constprop.4+0x9a>
 800ac2c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d038      	beq.n	800aca4 <handle_message_memory.constprop.4+0x3e4>
 800ac32:	240c      	movs	r4, #12
 800ac34:	2301      	movs	r3, #1
 800ac36:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ac38:	2e00      	cmp	r6, #0
 800ac3a:	d0c9      	beq.n	800abd0 <handle_message_memory.constprop.4+0x310>
 800ac3c:	e7a5      	b.n	800ab8a <handle_message_memory.constprop.4+0x2ca>
 800ac3e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ac40:	4413      	add	r3, r2
 800ac42:	930a      	str	r3, [sp, #40]	@ 0x28
 800ac44:	e68e      	b.n	800a964 <handle_message_memory.constprop.4+0xa4>
 800ac46:	4b27      	ldr	r3, [pc, #156]	@ (800ace4 <handle_message_memory.constprop.4+0x424>)
 800ac48:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 800ac4a:	6819      	ldr	r1, [r3, #0]
 800ac4c:	f003 f964 	bl	800df18 <get_message_typesupport_handle>
 800ac50:	f8d0 c004 	ldr.w	ip, [r0, #4]
 800ac54:	e7cf      	b.n	800abf6 <handle_message_memory.constprop.4+0x336>
 800ac56:	464c      	mov	r4, r9
 800ac58:	46b9      	mov	r9, r7
 800ac5a:	eb0b 03c9 	add.w	r3, fp, r9, lsl #3
 800ac5e:	e9dd 7811 	ldrd	r7, r8, [sp, #68]	@ 0x44
 800ac62:	685b      	ldr	r3, [r3, #4]
 800ac64:	9309      	str	r3, [sp, #36]	@ 0x24
 800ac66:	e7b3      	b.n	800abd0 <handle_message_memory.constprop.4+0x310>
 800ac68:	9b32      	ldr	r3, [sp, #200]	@ 0xc8
 800ac6a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ac6c:	e68e      	b.n	800a98c <handle_message_memory.constprop.4+0xcc>
 800ac6e:	2764      	movs	r7, #100	@ 0x64
 800ac70:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ac72:	9337      	str	r3, [sp, #220]	@ 0xdc
 800ac74:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ac76:	9536      	str	r5, [sp, #216]	@ 0xd8
 800ac78:	ac36      	add	r4, sp, #216	@ 0xd8
 800ac7a:	9300      	str	r3, [sp, #0]
 800ac7c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800ac80:	4620      	mov	r0, r4
 800ac82:	f004 f997 	bl	800efb4 <micro_ros_string_utilities_append>
 800ac86:	4b18      	ldr	r3, [pc, #96]	@ (800ace8 <handle_message_memory.constprop.4+0x428>)
 800ac88:	9300      	str	r3, [sp, #0]
 800ac8a:	ad16      	add	r5, sp, #88	@ 0x58
 800ac8c:	4628      	mov	r0, r5
 800ac8e:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800ac92:	f004 f98f 	bl	800efb4 <micro_ros_string_utilities_append>
 800ac96:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800ac9a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ac9e:	4605      	mov	r5, r0
 800aca0:	910c      	str	r1, [sp, #48]	@ 0x30
 800aca2:	e6b1      	b.n	800aa08 <handle_message_memory.constprop.4+0x148>
 800aca4:	9b32      	ldr	r3, [sp, #200]	@ 0xc8
 800aca6:	9309      	str	r3, [sp, #36]	@ 0x24
 800aca8:	240c      	movs	r4, #12
 800acaa:	2e00      	cmp	r6, #0
 800acac:	f43f ae6e 	beq.w	800a98c <handle_message_memory.constprop.4+0xcc>
 800acb0:	2301      	movs	r3, #1
 800acb2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800acb4:	e769      	b.n	800ab8a <handle_message_memory.constprop.4+0x2ca>
 800acb6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800acb8:	9309      	str	r3, [sp, #36]	@ 0x24
 800acba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800acbc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800acbe:	2401      	movs	r4, #1
 800acc0:	2710      	movs	r7, #16
 800acc2:	e762      	b.n	800ab8a <handle_message_memory.constprop.4+0x2ca>
 800acc4:	2e00      	cmp	r6, #0
 800acc6:	d144      	bne.n	800ad52 <handle_message_memory.constprop.4+0x492>
 800acc8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800acca:	2b00      	cmp	r3, #0
 800accc:	f43f ae92 	beq.w	800a9f4 <handle_message_memory.constprop.4+0x134>
 800acd0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800acd2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800acd4:	4413      	add	r3, r2
 800acd6:	930a      	str	r3, [sp, #40]	@ 0x28
 800acd8:	e644      	b.n	800a964 <handle_message_memory.constprop.4+0xa4>
 800acda:	bf00      	nop
 800acdc:	0801f9c8 	.word	0x0801f9c8
 800ace0:	0801e74c 	.word	0x0801e74c
 800ace4:	200005a0 	.word	0x200005a0
 800ace8:	0801e754 	.word	0x0801e754
 800acec:	a81a      	add	r0, sp, #104	@ 0x68
 800acee:	f002 fa89 	bl	800d204 <rcutils_get_default_allocator>
 800acf2:	e655      	b.n	800a9a0 <handle_message_memory.constprop.4+0xe0>
 800acf4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800acf6:	9337      	str	r3, [sp, #220]	@ 0xdc
 800acf8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800acfa:	9536      	str	r5, [sp, #216]	@ 0xd8
 800acfc:	ac36      	add	r4, sp, #216	@ 0xd8
 800acfe:	9300      	str	r3, [sp, #0]
 800ad00:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800ad04:	4620      	mov	r0, r4
 800ad06:	f004 f955 	bl	800efb4 <micro_ros_string_utilities_append>
 800ad0a:	4b1f      	ldr	r3, [pc, #124]	@ (800ad88 <handle_message_memory.constprop.4+0x4c8>)
 800ad0c:	9300      	str	r3, [sp, #0]
 800ad0e:	ad16      	add	r5, sp, #88	@ 0x58
 800ad10:	4628      	mov	r0, r5
 800ad12:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800ad16:	f004 f94d 	bl	800efb4 <micro_ros_string_utilities_append>
 800ad1a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800ad1e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ad22:	4605      	mov	r5, r0
 800ad24:	910c      	str	r1, [sp, #48]	@ 0x30
 800ad26:	e611      	b.n	800a94c <handle_message_memory.constprop.4+0x8c>
 800ad28:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 800ad2c:	e9dd 1209 	ldrd	r1, r2, [sp, #36]	@ 0x24
 800ad30:	6863      	ldr	r3, [r4, #4]
 800ad32:	fb03 2301 	mla	r3, r3, r1, r2
 800ad36:	930a      	str	r3, [sp, #40]	@ 0x28
 800ad38:	e69c      	b.n	800aa74 <handle_message_memory.constprop.4+0x1b4>
 800ad3a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	2401      	movs	r4, #1
 800ad40:	2710      	movs	r7, #16
 800ad42:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ad44:	e721      	b.n	800ab8a <handle_message_memory.constprop.4+0x2ca>
 800ad46:	a821      	add	r0, sp, #132	@ 0x84
 800ad48:	9109      	str	r1, [sp, #36]	@ 0x24
 800ad4a:	f002 fa5b 	bl	800d204 <rcutils_get_default_allocator>
 800ad4e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ad50:	e5c9      	b.n	800a8e6 <handle_message_memory.constprop.4+0x26>
 800ad52:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ad54:	9337      	str	r3, [sp, #220]	@ 0xdc
 800ad56:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ad58:	9536      	str	r5, [sp, #216]	@ 0xd8
 800ad5a:	ac36      	add	r4, sp, #216	@ 0xd8
 800ad5c:	9300      	str	r3, [sp, #0]
 800ad5e:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800ad62:	4620      	mov	r0, r4
 800ad64:	f004 f926 	bl	800efb4 <micro_ros_string_utilities_append>
 800ad68:	4b07      	ldr	r3, [pc, #28]	@ (800ad88 <handle_message_memory.constprop.4+0x4c8>)
 800ad6a:	9300      	str	r3, [sp, #0]
 800ad6c:	ad16      	add	r5, sp, #88	@ 0x58
 800ad6e:	4628      	mov	r0, r5
 800ad70:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800ad74:	f004 f91e 	bl	800efb4 <micro_ros_string_utilities_append>
 800ad78:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800ad7c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ad80:	4605      	mov	r5, r0
 800ad82:	910c      	str	r1, [sp, #48]	@ 0x30
 800ad84:	e625      	b.n	800a9d2 <handle_message_memory.constprop.4+0x112>
 800ad86:	bf00      	nop
 800ad88:	0801e754 	.word	0x0801e754

0800ad8c <handle_message_memory.constprop.2>:
 800ad8c:	b082      	sub	sp, #8
 800ad8e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad92:	b0a9      	sub	sp, #164	@ 0xa4
 800ad94:	ac32      	add	r4, sp, #200	@ 0xc8
 800ad96:	e884 000c 	stmia.w	r4, {r2, r3}
 800ad9a:	e9dd 8338 	ldrd	r8, r3, [sp, #224]	@ 0xe0
 800ad9e:	910f      	str	r1, [sp, #60]	@ 0x3c
 800ada0:	9937      	ldr	r1, [sp, #220]	@ 0xdc
 800ada2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ada4:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 800ada6:	f8dd a0d8 	ldr.w	sl, [sp, #216]	@ 0xd8
 800adaa:	9008      	str	r0, [sp, #32]
 800adac:	9218      	str	r2, [sp, #96]	@ 0x60
 800adae:	9313      	str	r3, [sp, #76]	@ 0x4c
 800adb0:	2900      	cmp	r1, #0
 800adb2:	f000 8290 	beq.w	800b2d6 <handle_message_memory.constprop.2+0x54a>
 800adb6:	680b      	ldr	r3, [r1, #0]
 800adb8:	9311      	str	r3, [sp, #68]	@ 0x44
 800adba:	690b      	ldr	r3, [r1, #16]
 800adbc:	9312      	str	r3, [sp, #72]	@ 0x48
 800adbe:	4603      	mov	r3, r0
 800adc0:	689b      	ldr	r3, [r3, #8]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	f000 8207 	beq.w	800b1d6 <handle_message_memory.constprop.2+0x44a>
 800adc8:	2300      	movs	r3, #0
 800adca:	9309      	str	r3, [sp, #36]	@ 0x24
 800adcc:	469b      	mov	fp, r3
 800adce:	4654      	mov	r4, sl
 800add0:	9114      	str	r1, [sp, #80]	@ 0x50
 800add2:	f8cd 8030 	str.w	r8, [sp, #48]	@ 0x30
 800add6:	9b08      	ldr	r3, [sp, #32]
 800add8:	695a      	ldr	r2, [r3, #20]
 800adda:	ebcb 110b 	rsb	r1, fp, fp, lsl #4
 800adde:	eb02 0381 	add.w	r3, r2, r1, lsl #2
 800ade2:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800ade6:	920d      	str	r2, [sp, #52]	@ 0x34
 800ade8:	e9d3 5102 	ldrd	r5, r1, [r3, #8]
 800adec:	7c5a      	ldrb	r2, [r3, #17]
 800adee:	f893 8004 	ldrb.w	r8, [r3, #4]
 800adf2:	695e      	ldr	r6, [r3, #20]
 800adf4:	f893 a018 	ldrb.w	sl, [r3, #24]
 800adf8:	69db      	ldr	r3, [r3, #28]
 800adfa:	910e      	str	r1, [sp, #56]	@ 0x38
 800adfc:	930a      	str	r3, [sp, #40]	@ 0x28
 800adfe:	2a00      	cmp	r2, #0
 800ae00:	d07c      	beq.n	800aefc <handle_message_memory.constprop.2+0x170>
 800ae02:	2e00      	cmp	r6, #0
 800ae04:	f000 80c8 	beq.w	800af98 <handle_message_memory.constprop.2+0x20c>
 800ae08:	f1ba 0f00 	cmp.w	sl, #0
 800ae0c:	f040 80c4 	bne.w	800af98 <handle_message_memory.constprop.2+0x20c>
 800ae10:	f1b8 0f10 	cmp.w	r8, #16
 800ae14:	f000 821c 	beq.w	800b250 <handle_message_memory.constprop.2+0x4c4>
 800ae18:	2c00      	cmp	r4, #0
 800ae1a:	f040 81c1 	bne.w	800b1a0 <handle_message_memory.constprop.2+0x414>
 800ae1e:	f1b8 0f12 	cmp.w	r8, #18
 800ae22:	f000 8155 	beq.w	800b0d0 <handle_message_memory.constprop.2+0x344>
 800ae26:	2600      	movs	r6, #0
 800ae28:	f1b8 0f64 	cmp.w	r8, #100	@ 0x64
 800ae2c:	d00d      	beq.n	800ae4a <handle_message_memory.constprop.2+0xbe>
 800ae2e:	2c00      	cmp	r4, #0
 800ae30:	d14d      	bne.n	800aece <handle_message_memory.constprop.2+0x142>
 800ae32:	9b08      	ldr	r3, [sp, #32]
 800ae34:	689b      	ldr	r3, [r3, #8]
 800ae36:	f10b 0b01 	add.w	fp, fp, #1
 800ae3a:	459b      	cmp	fp, r3
 800ae3c:	d3cb      	bcc.n	800add6 <handle_message_memory.constprop.2+0x4a>
 800ae3e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ae40:	b029      	add	sp, #164	@ 0xa4
 800ae42:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae46:	b002      	add	sp, #8
 800ae48:	4770      	bx	lr
 800ae4a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	f000 820a 	beq.w	800b266 <handle_message_memory.constprop.2+0x4da>
 800ae52:	f8d3 9000 	ldr.w	r9, [r3]
 800ae56:	f8d3 a010 	ldr.w	sl, [r3, #16]
 800ae5a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ae5c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ae5e:	589a      	ldr	r2, [r3, r2]
 800ae60:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 800ae62:	2d00      	cmp	r5, #0
 800ae64:	bf08      	it	eq
 800ae66:	461d      	moveq	r5, r3
 800ae68:	2c00      	cmp	r4, #0
 800ae6a:	f000 813d 	beq.w	800b0e8 <handle_message_memory.constprop.2+0x35c>
 800ae6e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ae70:	960a      	str	r6, [sp, #40]	@ 0x28
 800ae72:	9515      	str	r5, [sp, #84]	@ 0x54
 800ae74:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ae76:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 800ae78:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800ae7c:	f103 38ff 	add.w	r8, r3, #4294967295	@ 0xffffffff
 800ae80:	2700      	movs	r7, #0
 800ae82:	f8cd 9040 	str.w	r9, [sp, #64]	@ 0x40
 800ae86:	4693      	mov	fp, r2
 800ae88:	f855 9037 	ldr.w	r9, [r5, r7, lsl #3]
 800ae8c:	4642      	mov	r2, r8
 800ae8e:	4631      	mov	r1, r6
 800ae90:	4648      	mov	r0, r9
 800ae92:	f012 fad3 	bl	801d43c <memcmp>
 800ae96:	4684      	mov	ip, r0
 800ae98:	49a5      	ldr	r1, [pc, #660]	@ (800b130 <handle_message_memory.constprop.2+0x3a4>)
 800ae9a:	2205      	movs	r2, #5
 800ae9c:	eb09 0008 	add.w	r0, r9, r8
 800aea0:	f1bc 0f00 	cmp.w	ip, #0
 800aea4:	d104      	bne.n	800aeb0 <handle_message_memory.constprop.2+0x124>
 800aea6:	f012 fac9 	bl	801d43c <memcmp>
 800aeaa:	2800      	cmp	r0, #0
 800aeac:	f000 8208 	beq.w	800b2c0 <handle_message_memory.constprop.2+0x534>
 800aeb0:	3701      	adds	r7, #1
 800aeb2:	42bc      	cmp	r4, r7
 800aeb4:	d1e8      	bne.n	800ae88 <handle_message_memory.constprop.2+0xfc>
 800aeb6:	465a      	mov	r2, fp
 800aeb8:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800aeba:	f8dd 9040 	ldr.w	r9, [sp, #64]	@ 0x40
 800aebe:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 800aec0:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 800aec4:	fb05 f306 	mul.w	r3, r5, r6
 800aec8:	2e00      	cmp	r6, #0
 800aeca:	f040 8112 	bne.w	800b0f2 <handle_message_memory.constprop.2+0x366>
 800aece:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800aed0:	f7f5 f9f6 	bl	80002c0 <strlen>
 800aed4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800aed6:	9338      	str	r3, [sp, #224]	@ 0xe0
 800aed8:	3001      	adds	r0, #1
 800aeda:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aedc:	9000      	str	r0, [sp, #0]
 800aede:	9339      	str	r3, [sp, #228]	@ 0xe4
 800aee0:	ad1a      	add	r5, sp, #104	@ 0x68
 800aee2:	af38      	add	r7, sp, #224	@ 0xe0
 800aee4:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800aee8:	4628      	mov	r0, r5
 800aeea:	f004 f88f 	bl	800f00c <micro_ros_string_utilities_remove_tail_chars>
 800aeee:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800aef2:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 800aef6:	900c      	str	r0, [sp, #48]	@ 0x30
 800aef8:	910b      	str	r1, [sp, #44]	@ 0x2c
 800aefa:	e79a      	b.n	800ae32 <handle_message_memory.constprop.2+0xa6>
 800aefc:	2c00      	cmp	r4, #0
 800aefe:	f040 80b0 	bne.w	800b062 <handle_message_memory.constprop.2+0x2d6>
 800af02:	f1b8 0f10 	cmp.w	r8, #16
 800af06:	d18a      	bne.n	800ae1e <handle_message_memory.constprop.2+0x92>
 800af08:	461a      	mov	r2, r3
 800af0a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800af0c:	eb03 0902 	add.w	r9, r3, r2
 800af10:	f1ba 0f00 	cmp.w	sl, #0
 800af14:	f000 8189 	beq.w	800b22a <handle_message_memory.constprop.2+0x49e>
 800af18:	9410      	str	r4, [sp, #64]	@ 0x40
 800af1a:	2701      	movs	r7, #1
 800af1c:	fb06 f707 	mul.w	r7, r6, r7
 800af20:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800af22:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800af24:	4638      	mov	r0, r7
 800af26:	4798      	blx	r3
 800af28:	f8c9 0000 	str.w	r0, [r9]
 800af2c:	2800      	cmp	r0, #0
 800af2e:	f000 8152 	beq.w	800b1d6 <handle_message_memory.constprop.2+0x44a>
 800af32:	463a      	mov	r2, r7
 800af34:	2100      	movs	r1, #0
 800af36:	f012 faab 	bl	801d490 <memset>
 800af3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af3c:	443b      	add	r3, r7
 800af3e:	9309      	str	r3, [sp, #36]	@ 0x24
 800af40:	f1b8 0f12 	cmp.w	r8, #18
 800af44:	f04f 0300 	mov.w	r3, #0
 800af48:	e9c9 3601 	strd	r3, r6, [r9, #4]
 800af4c:	f47f af6c 	bne.w	800ae28 <handle_message_memory.constprop.2+0x9c>
 800af50:	4b78      	ldr	r3, [pc, #480]	@ (800b134 <handle_message_memory.constprop.2+0x3a8>)
 800af52:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800af54:	6819      	ldr	r1, [r3, #0]
 800af56:	f002 ffdf 	bl	800df18 <get_message_typesupport_handle>
 800af5a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800af5c:	f8d0 a004 	ldr.w	sl, [r0, #4]
 800af60:	2b00      	cmp	r3, #0
 800af62:	f040 80ed 	bne.w	800b140 <handle_message_memory.constprop.2+0x3b4>
 800af66:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800af68:	9338      	str	r3, [sp, #224]	@ 0xe0
 800af6a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800af6c:	9339      	str	r3, [sp, #228]	@ 0xe4
 800af6e:	af38      	add	r7, sp, #224	@ 0xe0
 800af70:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800af74:	ab04      	add	r3, sp, #16
 800af76:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800af7a:	ad34      	add	r5, sp, #208	@ 0xd0
 800af7c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800af80:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800af84:	ab32      	add	r3, sp, #200	@ 0xc8
 800af86:	cb0c      	ldmia	r3, {r2, r3}
 800af88:	4649      	mov	r1, r9
 800af8a:	4650      	mov	r0, sl
 800af8c:	f7ff fefe 	bl	800ad8c <handle_message_memory.constprop.2>
 800af90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af92:	4403      	add	r3, r0
 800af94:	9309      	str	r3, [sp, #36]	@ 0x24
 800af96:	e74a      	b.n	800ae2e <handle_message_memory.constprop.2+0xa2>
 800af98:	f1b8 0f10 	cmp.w	r8, #16
 800af9c:	d051      	beq.n	800b042 <handle_message_memory.constprop.2+0x2b6>
 800af9e:	2c00      	cmp	r4, #0
 800afa0:	f040 8127 	bne.w	800b1f2 <handle_message_memory.constprop.2+0x466>
 800afa4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800afa6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800afa8:	f1b8 0f12 	cmp.w	r8, #18
 800afac:	eb03 0902 	add.w	r9, r3, r2
 800afb0:	d036      	beq.n	800b020 <handle_message_memory.constprop.2+0x294>
 800afb2:	f1b8 0f64 	cmp.w	r8, #100	@ 0x64
 800afb6:	f000 8143 	beq.w	800b240 <handle_message_memory.constprop.2+0x4b4>
 800afba:	4b5f      	ldr	r3, [pc, #380]	@ (800b138 <handle_message_memory.constprop.2+0x3ac>)
 800afbc:	f853 7028 	ldr.w	r7, [r3, r8, lsl #2]
 800afc0:	f1ba 0f00 	cmp.w	sl, #0
 800afc4:	d07d      	beq.n	800b0c2 <handle_message_memory.constprop.2+0x336>
 800afc6:	2301      	movs	r3, #1
 800afc8:	9310      	str	r3, [sp, #64]	@ 0x40
 800afca:	2c00      	cmp	r4, #0
 800afcc:	d0a6      	beq.n	800af1c <handle_message_memory.constprop.2+0x190>
 800afce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800afd0:	9517      	str	r5, [sp, #92]	@ 0x5c
 800afd2:	f04f 0a00 	mov.w	sl, #0
 800afd6:	e9cd 9715 	strd	r9, r7, [sp, #84]	@ 0x54
 800afda:	3b01      	subs	r3, #1
 800afdc:	4655      	mov	r5, sl
 800afde:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
 800afe2:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800afe6:	9619      	str	r6, [sp, #100]	@ 0x64
 800afe8:	461f      	mov	r7, r3
 800afea:	f85a 6035 	ldr.w	r6, [sl, r5, lsl #3]
 800afee:	4630      	mov	r0, r6
 800aff0:	f7f5 f966 	bl	80002c0 <strlen>
 800aff4:	4649      	mov	r1, r9
 800aff6:	4602      	mov	r2, r0
 800aff8:	4630      	mov	r0, r6
 800affa:	f012 fa1f 	bl	801d43c <memcmp>
 800affe:	b938      	cbnz	r0, 800b010 <handle_message_memory.constprop.2+0x284>
 800b000:	463a      	mov	r2, r7
 800b002:	4649      	mov	r1, r9
 800b004:	4630      	mov	r0, r6
 800b006:	f012 fa19 	bl	801d43c <memcmp>
 800b00a:	2800      	cmp	r0, #0
 800b00c:	f000 80e6 	beq.w	800b1dc <handle_message_memory.constprop.2+0x450>
 800b010:	3501      	adds	r5, #1
 800b012:	42ac      	cmp	r4, r5
 800b014:	d1e9      	bne.n	800afea <handle_message_memory.constprop.2+0x25e>
 800b016:	e9dd 9715 	ldrd	r9, r7, [sp, #84]	@ 0x54
 800b01a:	9e19      	ldr	r6, [sp, #100]	@ 0x64
 800b01c:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 800b01e:	e77d      	b.n	800af1c <handle_message_memory.constprop.2+0x190>
 800b020:	4b44      	ldr	r3, [pc, #272]	@ (800b134 <handle_message_memory.constprop.2+0x3a8>)
 800b022:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800b024:	6819      	ldr	r1, [r3, #0]
 800b026:	f002 ff77 	bl	800df18 <get_message_typesupport_handle>
 800b02a:	6843      	ldr	r3, [r0, #4]
 800b02c:	68df      	ldr	r7, [r3, #12]
 800b02e:	f1ba 0f00 	cmp.w	sl, #0
 800b032:	d1c8      	bne.n	800afc6 <handle_message_memory.constprop.2+0x23a>
 800b034:	2301      	movs	r3, #1
 800b036:	9e33      	ldr	r6, [sp, #204]	@ 0xcc
 800b038:	9310      	str	r3, [sp, #64]	@ 0x40
 800b03a:	2c00      	cmp	r4, #0
 800b03c:	f43f af6e 	beq.w	800af1c <handle_message_memory.constprop.2+0x190>
 800b040:	e7c5      	b.n	800afce <handle_message_memory.constprop.2+0x242>
 800b042:	2c00      	cmp	r4, #0
 800b044:	f040 80d3 	bne.w	800b1ee <handle_message_memory.constprop.2+0x462>
 800b048:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b04a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b04c:	eb03 0902 	add.w	r9, r3, r2
 800b050:	f1ba 0f00 	cmp.w	sl, #0
 800b054:	d032      	beq.n	800b0bc <handle_message_memory.constprop.2+0x330>
 800b056:	2301      	movs	r3, #1
 800b058:	9310      	str	r3, [sp, #64]	@ 0x40
 800b05a:	f04f 0864 	mov.w	r8, #100	@ 0x64
 800b05e:	270c      	movs	r7, #12
 800b060:	e75c      	b.n	800af1c <handle_message_memory.constprop.2+0x190>
 800b062:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b064:	9338      	str	r3, [sp, #224]	@ 0xe0
 800b066:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b068:	9339      	str	r3, [sp, #228]	@ 0xe4
 800b06a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b06c:	9300      	str	r3, [sp, #0]
 800b06e:	af38      	add	r7, sp, #224	@ 0xe0
 800b070:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800b074:	4638      	mov	r0, r7
 800b076:	f003 ff9d 	bl	800efb4 <micro_ros_string_utilities_append>
 800b07a:	4b30      	ldr	r3, [pc, #192]	@ (800b13c <handle_message_memory.constprop.2+0x3b0>)
 800b07c:	9300      	str	r3, [sp, #0]
 800b07e:	f10d 0968 	add.w	r9, sp, #104	@ 0x68
 800b082:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800b086:	4648      	mov	r0, r9
 800b088:	f003 ff94 	bl	800efb4 <micro_ros_string_utilities_append>
 800b08c:	e899 0007 	ldmia.w	r9, {r0, r1, r2}
 800b090:	f1b8 0f10 	cmp.w	r8, #16
 800b094:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 800b098:	900c      	str	r0, [sp, #48]	@ 0x30
 800b09a:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b09c:	f47f aebf 	bne.w	800ae1e <handle_message_memory.constprop.2+0x92>
 800b0a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b0a2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b0a4:	eb03 0902 	add.w	r9, r3, r2
 800b0a8:	f1ba 0f00 	cmp.w	sl, #0
 800b0ac:	f000 80bd 	beq.w	800b22a <handle_message_memory.constprop.2+0x49e>
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	9310      	str	r3, [sp, #64]	@ 0x40
 800b0b4:	f04f 0810 	mov.w	r8, #16
 800b0b8:	2701      	movs	r7, #1
 800b0ba:	e788      	b.n	800afce <handle_message_memory.constprop.2+0x242>
 800b0bc:	270c      	movs	r7, #12
 800b0be:	f04f 0864 	mov.w	r8, #100	@ 0x64
 800b0c2:	2301      	movs	r3, #1
 800b0c4:	9e34      	ldr	r6, [sp, #208]	@ 0xd0
 800b0c6:	9310      	str	r3, [sp, #64]	@ 0x40
 800b0c8:	2c00      	cmp	r4, #0
 800b0ca:	f43f af27 	beq.w	800af1c <handle_message_memory.constprop.2+0x190>
 800b0ce:	e77e      	b.n	800afce <handle_message_memory.constprop.2+0x242>
 800b0d0:	4b18      	ldr	r3, [pc, #96]	@ (800b134 <handle_message_memory.constprop.2+0x3a8>)
 800b0d2:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800b0d4:	6819      	ldr	r1, [r3, #0]
 800b0d6:	f002 ff1f 	bl	800df18 <get_message_typesupport_handle>
 800b0da:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b0dc:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b0de:	f8d0 a004 	ldr.w	sl, [r0, #4]
 800b0e2:	4413      	add	r3, r2
 800b0e4:	4699      	mov	r9, r3
 800b0e6:	e73e      	b.n	800af66 <handle_message_memory.constprop.2+0x1da>
 800b0e8:	fb05 f306 	mul.w	r3, r5, r6
 800b0ec:	2e00      	cmp	r6, #0
 800b0ee:	f43f aea0 	beq.w	800ae32 <handle_message_memory.constprop.2+0xa6>
 800b0f2:	930a      	str	r3, [sp, #40]	@ 0x28
 800b0f4:	464b      	mov	r3, r9
 800b0f6:	4617      	mov	r7, r2
 800b0f8:	46a1      	mov	r9, r4
 800b0fa:	f04f 0800 	mov.w	r8, #0
 800b0fe:	461c      	mov	r4, r3
 800b100:	4651      	mov	r1, sl
 800b102:	4628      	mov	r0, r5
 800b104:	47a0      	blx	r4
 800b106:	2300      	movs	r3, #0
 800b108:	6038      	str	r0, [r7, #0]
 800b10a:	60bd      	str	r5, [r7, #8]
 800b10c:	607b      	str	r3, [r7, #4]
 800b10e:	462a      	mov	r2, r5
 800b110:	4619      	mov	r1, r3
 800b112:	f108 0801 	add.w	r8, r8, #1
 800b116:	f012 f9bb 	bl	801d490 <memset>
 800b11a:	4546      	cmp	r6, r8
 800b11c:	f107 070c 	add.w	r7, r7, #12
 800b120:	d8ee      	bhi.n	800b100 <handle_message_memory.constprop.2+0x374>
 800b122:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	@ 0x24
 800b126:	441a      	add	r2, r3
 800b128:	464c      	mov	r4, r9
 800b12a:	9209      	str	r2, [sp, #36]	@ 0x24
 800b12c:	e67f      	b.n	800ae2e <handle_message_memory.constprop.2+0xa2>
 800b12e:	bf00      	nop
 800b130:	0801e74c 	.word	0x0801e74c
 800b134:	200005a0 	.word	0x200005a0
 800b138:	0801f9c8 	.word	0x0801f9c8
 800b13c:	0801e754 	.word	0x0801e754
 800b140:	2e00      	cmp	r6, #0
 800b142:	f43f ae74 	beq.w	800ae2e <handle_message_memory.constprop.2+0xa2>
 800b146:	ab04      	add	r3, sp, #16
 800b148:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800b14c:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 800b150:	940a      	str	r4, [sp, #40]	@ 0x28
 800b152:	f04f 0800 	mov.w	r8, #0
 800b156:	af38      	add	r7, sp, #224	@ 0xe0
 800b158:	ad34      	add	r5, sp, #208	@ 0xd0
 800b15a:	461c      	mov	r4, r3
 800b15c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b15e:	9338      	str	r3, [sp, #224]	@ 0xe0
 800b160:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b162:	9339      	str	r3, [sp, #228]	@ 0xe4
 800b164:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800b168:	f8da e00c 	ldr.w	lr, [sl, #12]
 800b16c:	f8d9 c000 	ldr.w	ip, [r9]
 800b170:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b174:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800b178:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800b17c:	ab32      	add	r3, sp, #200	@ 0xc8
 800b17e:	fb0e c108 	mla	r1, lr, r8, ip
 800b182:	cb0c      	ldmia	r3, {r2, r3}
 800b184:	4650      	mov	r0, sl
 800b186:	f7ff fe01 	bl	800ad8c <handle_message_memory.constprop.2>
 800b18a:	f108 0801 	add.w	r8, r8, #1
 800b18e:	4546      	cmp	r6, r8
 800b190:	4483      	add	fp, r0
 800b192:	d1e3      	bne.n	800b15c <handle_message_memory.constprop.2+0x3d0>
 800b194:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800b198:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b19a:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 800b19e:	e646      	b.n	800ae2e <handle_message_memory.constprop.2+0xa2>
 800b1a0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b1a2:	9338      	str	r3, [sp, #224]	@ 0xe0
 800b1a4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b1a6:	9339      	str	r3, [sp, #228]	@ 0xe4
 800b1a8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b1aa:	9300      	str	r3, [sp, #0]
 800b1ac:	af38      	add	r7, sp, #224	@ 0xe0
 800b1ae:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800b1b2:	4638      	mov	r0, r7
 800b1b4:	f003 fefe 	bl	800efb4 <micro_ros_string_utilities_append>
 800b1b8:	4b4e      	ldr	r3, [pc, #312]	@ (800b2f4 <handle_message_memory.constprop.2+0x568>)
 800b1ba:	9300      	str	r3, [sp, #0]
 800b1bc:	ae1a      	add	r6, sp, #104	@ 0x68
 800b1be:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800b1c2:	4630      	mov	r0, r6
 800b1c4:	f003 fef6 	bl	800efb4 <micro_ros_string_utilities_append>
 800b1c8:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800b1cc:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 800b1d0:	900c      	str	r0, [sp, #48]	@ 0x30
 800b1d2:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b1d4:	e623      	b.n	800ae1e <handle_message_memory.constprop.2+0x92>
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	9309      	str	r3, [sp, #36]	@ 0x24
 800b1da:	e630      	b.n	800ae3e <handle_message_memory.constprop.2+0xb2>
 800b1dc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b1de:	46aa      	mov	sl, r5
 800b1e0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b1e4:	e9dd 9715 	ldrd	r9, r7, [sp, #84]	@ 0x54
 800b1e8:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 800b1ea:	685e      	ldr	r6, [r3, #4]
 800b1ec:	e696      	b.n	800af1c <handle_message_memory.constprop.2+0x190>
 800b1ee:	f04f 0864 	mov.w	r8, #100	@ 0x64
 800b1f2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b1f4:	9338      	str	r3, [sp, #224]	@ 0xe0
 800b1f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b1f8:	9339      	str	r3, [sp, #228]	@ 0xe4
 800b1fa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b1fc:	9300      	str	r3, [sp, #0]
 800b1fe:	af38      	add	r7, sp, #224	@ 0xe0
 800b200:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800b204:	4638      	mov	r0, r7
 800b206:	f003 fed5 	bl	800efb4 <micro_ros_string_utilities_append>
 800b20a:	4b3a      	ldr	r3, [pc, #232]	@ (800b2f4 <handle_message_memory.constprop.2+0x568>)
 800b20c:	9300      	str	r3, [sp, #0]
 800b20e:	f10d 0968 	add.w	r9, sp, #104	@ 0x68
 800b212:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800b216:	4648      	mov	r0, r9
 800b218:	f003 fecc 	bl	800efb4 <micro_ros_string_utilities_append>
 800b21c:	e899 0007 	ldmia.w	r9, {r0, r1, r2}
 800b220:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 800b224:	900c      	str	r0, [sp, #48]	@ 0x30
 800b226:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b228:	e6bc      	b.n	800afa4 <handle_message_memory.constprop.2+0x218>
 800b22a:	b325      	cbz	r5, 800b276 <handle_message_memory.constprop.2+0x4ea>
 800b22c:	2300      	movs	r3, #0
 800b22e:	462e      	mov	r6, r5
 800b230:	2701      	movs	r7, #1
 800b232:	f04f 0810 	mov.w	r8, #16
 800b236:	9310      	str	r3, [sp, #64]	@ 0x40
 800b238:	2c00      	cmp	r4, #0
 800b23a:	f43f ae6f 	beq.w	800af1c <handle_message_memory.constprop.2+0x190>
 800b23e:	e6c6      	b.n	800afce <handle_message_memory.constprop.2+0x242>
 800b240:	270c      	movs	r7, #12
 800b242:	f1ba 0f00 	cmp.w	sl, #0
 800b246:	f43f af3c 	beq.w	800b0c2 <handle_message_memory.constprop.2+0x336>
 800b24a:	2301      	movs	r3, #1
 800b24c:	9310      	str	r3, [sp, #64]	@ 0x40
 800b24e:	e6bc      	b.n	800afca <handle_message_memory.constprop.2+0x23e>
 800b250:	b9d4      	cbnz	r4, 800b288 <handle_message_memory.constprop.2+0x4fc>
 800b252:	461a      	mov	r2, r3
 800b254:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b256:	eb03 0902 	add.w	r9, r3, r2
 800b25a:	2d00      	cmp	r5, #0
 800b25c:	d146      	bne.n	800b2ec <handle_message_memory.constprop.2+0x560>
 800b25e:	9e18      	ldr	r6, [sp, #96]	@ 0x60
 800b260:	9410      	str	r4, [sp, #64]	@ 0x40
 800b262:	2701      	movs	r7, #1
 800b264:	e65a      	b.n	800af1c <handle_message_memory.constprop.2+0x190>
 800b266:	a823      	add	r0, sp, #140	@ 0x8c
 800b268:	f001 ffcc 	bl	800d204 <rcutils_get_default_allocator>
 800b26c:	f8dd 908c 	ldr.w	r9, [sp, #140]	@ 0x8c
 800b270:	f8dd a09c 	ldr.w	sl, [sp, #156]	@ 0x9c
 800b274:	e5f1      	b.n	800ae5a <handle_message_memory.constprop.2+0xce>
 800b276:	9e18      	ldr	r6, [sp, #96]	@ 0x60
 800b278:	9510      	str	r5, [sp, #64]	@ 0x40
 800b27a:	2701      	movs	r7, #1
 800b27c:	f04f 0810 	mov.w	r8, #16
 800b280:	2c00      	cmp	r4, #0
 800b282:	f43f ae4b 	beq.w	800af1c <handle_message_memory.constprop.2+0x190>
 800b286:	e6a2      	b.n	800afce <handle_message_memory.constprop.2+0x242>
 800b288:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b28a:	9338      	str	r3, [sp, #224]	@ 0xe0
 800b28c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b28e:	9339      	str	r3, [sp, #228]	@ 0xe4
 800b290:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b292:	9300      	str	r3, [sp, #0]
 800b294:	af38      	add	r7, sp, #224	@ 0xe0
 800b296:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800b29a:	4638      	mov	r0, r7
 800b29c:	f003 fe8a 	bl	800efb4 <micro_ros_string_utilities_append>
 800b2a0:	4b14      	ldr	r3, [pc, #80]	@ (800b2f4 <handle_message_memory.constprop.2+0x568>)
 800b2a2:	9300      	str	r3, [sp, #0]
 800b2a4:	f10d 0868 	add.w	r8, sp, #104	@ 0x68
 800b2a8:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800b2ac:	4640      	mov	r0, r8
 800b2ae:	f003 fe81 	bl	800efb4 <micro_ros_string_utilities_append>
 800b2b2:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 800b2b6:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 800b2ba:	900c      	str	r0, [sp, #48]	@ 0x30
 800b2bc:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b2be:	e6ef      	b.n	800b0a0 <handle_message_memory.constprop.2+0x314>
 800b2c0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b2c2:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800b2c4:	f8dd 9040 	ldr.w	r9, [sp, #64]	@ 0x40
 800b2c8:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b2cc:	465a      	mov	r2, fp
 800b2ce:	685d      	ldr	r5, [r3, #4]
 800b2d0:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 800b2d4:	e5f6      	b.n	800aec4 <handle_message_memory.constprop.2+0x138>
 800b2d6:	a81e      	add	r0, sp, #120	@ 0x78
 800b2d8:	9109      	str	r1, [sp, #36]	@ 0x24
 800b2da:	f001 ff93 	bl	800d204 <rcutils_get_default_allocator>
 800b2de:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800b2e0:	9311      	str	r3, [sp, #68]	@ 0x44
 800b2e2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800b2e4:	9312      	str	r3, [sp, #72]	@ 0x48
 800b2e6:	e9dd 3108 	ldrd	r3, r1, [sp, #32]
 800b2ea:	e569      	b.n	800adc0 <handle_message_memory.constprop.2+0x34>
 800b2ec:	462e      	mov	r6, r5
 800b2ee:	9410      	str	r4, [sp, #64]	@ 0x40
 800b2f0:	2701      	movs	r7, #1
 800b2f2:	e613      	b.n	800af1c <handle_message_memory.constprop.2+0x190>
 800b2f4:	0801e754 	.word	0x0801e754

0800b2f8 <get_longest_member_name>:
 800b2f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2fc:	6884      	ldr	r4, [r0, #8]
 800b2fe:	b097      	sub	sp, #92	@ 0x5c
 800b300:	2c00      	cmp	r4, #0
 800b302:	f000 80f9 	beq.w	800b4f8 <get_longest_member_name+0x200>
 800b306:	f04f 0800 	mov.w	r8, #0
 800b30a:	4625      	mov	r5, r4
 800b30c:	4646      	mov	r6, r8
 800b30e:	4607      	mov	r7, r0
 800b310:	697b      	ldr	r3, [r7, #20]
 800b312:	ebc8 1208 	rsb	r2, r8, r8, lsl #4
 800b316:	eb03 0182 	add.w	r1, r3, r2, lsl #2
 800b31a:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 800b31e:	790b      	ldrb	r3, [r1, #4]
 800b320:	2b12      	cmp	r3, #18
 800b322:	d012      	beq.n	800b34a <get_longest_member_name+0x52>
 800b324:	f04f 0b00 	mov.w	fp, #0
 800b328:	4620      	mov	r0, r4
 800b32a:	f7f4 ffc9 	bl	80002c0 <strlen>
 800b32e:	4458      	add	r0, fp
 800b330:	3001      	adds	r0, #1
 800b332:	4286      	cmp	r6, r0
 800b334:	f108 0801 	add.w	r8, r8, #1
 800b338:	bf38      	it	cc
 800b33a:	4606      	movcc	r6, r0
 800b33c:	45a8      	cmp	r8, r5
 800b33e:	d3e7      	bcc.n	800b310 <get_longest_member_name+0x18>
 800b340:	46b3      	mov	fp, r6
 800b342:	4658      	mov	r0, fp
 800b344:	b017      	add	sp, #92	@ 0x5c
 800b346:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b34a:	4bb6      	ldr	r3, [pc, #728]	@ (800b624 <get_longest_member_name+0x32c>)
 800b34c:	68c8      	ldr	r0, [r1, #12]
 800b34e:	6819      	ldr	r1, [r3, #0]
 800b350:	f002 fde2 	bl	800df18 <get_message_typesupport_handle>
 800b354:	6843      	ldr	r3, [r0, #4]
 800b356:	f8d3 a008 	ldr.w	sl, [r3, #8]
 800b35a:	f1ba 0f00 	cmp.w	sl, #0
 800b35e:	f000 8109 	beq.w	800b574 <get_longest_member_name+0x27c>
 800b362:	f04f 0b00 	mov.w	fp, #0
 800b366:	e9cd 4800 	strd	r4, r8, [sp]
 800b36a:	4635      	mov	r5, r6
 800b36c:	46d9      	mov	r9, fp
 800b36e:	465c      	mov	r4, fp
 800b370:	46d0      	mov	r8, sl
 800b372:	461e      	mov	r6, r3
 800b374:	6972      	ldr	r2, [r6, #20]
 800b376:	ebc9 1309 	rsb	r3, r9, r9, lsl #4
 800b37a:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800b37e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800b382:	790b      	ldrb	r3, [r1, #4]
 800b384:	2b12      	cmp	r3, #18
 800b386:	d014      	beq.n	800b3b2 <get_longest_member_name+0xba>
 800b388:	f04f 0b00 	mov.w	fp, #0
 800b38c:	4610      	mov	r0, r2
 800b38e:	f7f4 ff97 	bl	80002c0 <strlen>
 800b392:	4458      	add	r0, fp
 800b394:	3001      	adds	r0, #1
 800b396:	4284      	cmp	r4, r0
 800b398:	f109 0901 	add.w	r9, r9, #1
 800b39c:	bf38      	it	cc
 800b39e:	4604      	movcc	r4, r0
 800b3a0:	45c1      	cmp	r9, r8
 800b3a2:	d3e7      	bcc.n	800b374 <get_longest_member_name+0x7c>
 800b3a4:	46a3      	mov	fp, r4
 800b3a6:	462e      	mov	r6, r5
 800b3a8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b3ac:	9c00      	ldr	r4, [sp, #0]
 800b3ae:	68bd      	ldr	r5, [r7, #8]
 800b3b0:	e7ba      	b.n	800b328 <get_longest_member_name+0x30>
 800b3b2:	4b9c      	ldr	r3, [pc, #624]	@ (800b624 <get_longest_member_name+0x32c>)
 800b3b4:	68c8      	ldr	r0, [r1, #12]
 800b3b6:	6819      	ldr	r1, [r3, #0]
 800b3b8:	9202      	str	r2, [sp, #8]
 800b3ba:	f002 fdad 	bl	800df18 <get_message_typesupport_handle>
 800b3be:	6843      	ldr	r3, [r0, #4]
 800b3c0:	9a02      	ldr	r2, [sp, #8]
 800b3c2:	f8d3 a008 	ldr.w	sl, [r3, #8]
 800b3c6:	f1ba 0f00 	cmp.w	sl, #0
 800b3ca:	f000 809a 	beq.w	800b502 <get_longest_member_name+0x20a>
 800b3ce:	e9cd 6202 	strd	r6, r2, [sp, #8]
 800b3d2:	f04f 0b00 	mov.w	fp, #0
 800b3d6:	e9cd 9505 	strd	r9, r5, [sp, #20]
 800b3da:	9404      	str	r4, [sp, #16]
 800b3dc:	463d      	mov	r5, r7
 800b3de:	46d8      	mov	r8, fp
 800b3e0:	461c      	mov	r4, r3
 800b3e2:	4657      	mov	r7, sl
 800b3e4:	6963      	ldr	r3, [r4, #20]
 800b3e6:	ebc8 1208 	rsb	r2, r8, r8, lsl #4
 800b3ea:	eb03 0182 	add.w	r1, r3, r2, lsl #2
 800b3ee:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 800b3f2:	790b      	ldrb	r3, [r1, #4]
 800b3f4:	2b12      	cmp	r3, #18
 800b3f6:	d016      	beq.n	800b426 <get_longest_member_name+0x12e>
 800b3f8:	f04f 0a00 	mov.w	sl, #0
 800b3fc:	4630      	mov	r0, r6
 800b3fe:	f7f4 ff5f 	bl	80002c0 <strlen>
 800b402:	4450      	add	r0, sl
 800b404:	3001      	adds	r0, #1
 800b406:	4583      	cmp	fp, r0
 800b408:	f108 0801 	add.w	r8, r8, #1
 800b40c:	bf38      	it	cc
 800b40e:	4683      	movcc	fp, r0
 800b410:	45b8      	cmp	r8, r7
 800b412:	d3e7      	bcc.n	800b3e4 <get_longest_member_name+0xec>
 800b414:	e9dd 6202 	ldrd	r6, r2, [sp, #8]
 800b418:	462f      	mov	r7, r5
 800b41a:	e9dd 4904 	ldrd	r4, r9, [sp, #16]
 800b41e:	9d06      	ldr	r5, [sp, #24]
 800b420:	f8d6 8008 	ldr.w	r8, [r6, #8]
 800b424:	e7b2      	b.n	800b38c <get_longest_member_name+0x94>
 800b426:	4b7f      	ldr	r3, [pc, #508]	@ (800b624 <get_longest_member_name+0x32c>)
 800b428:	68c8      	ldr	r0, [r1, #12]
 800b42a:	6819      	ldr	r1, [r3, #0]
 800b42c:	f002 fd74 	bl	800df18 <get_message_typesupport_handle>
 800b430:	6847      	ldr	r7, [r0, #4]
 800b432:	68bb      	ldr	r3, [r7, #8]
 800b434:	2b00      	cmp	r3, #0
 800b436:	f000 80e6 	beq.w	800b606 <get_longest_member_name+0x30e>
 800b43a:	e9cd b809 	strd	fp, r8, [sp, #36]	@ 0x24
 800b43e:	f04f 0a00 	mov.w	sl, #0
 800b442:	e9cd 4607 	strd	r4, r6, [sp, #28]
 800b446:	46d1      	mov	r9, sl
 800b448:	463e      	mov	r6, r7
 800b44a:	4654      	mov	r4, sl
 800b44c:	461f      	mov	r7, r3
 800b44e:	6973      	ldr	r3, [r6, #20]
 800b450:	ebc9 1209 	rsb	r2, r9, r9, lsl #4
 800b454:	eb03 0182 	add.w	r1, r3, r2, lsl #2
 800b458:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
 800b45c:	790b      	ldrb	r3, [r1, #4]
 800b45e:	2b12      	cmp	r3, #18
 800b460:	d015      	beq.n	800b48e <get_longest_member_name+0x196>
 800b462:	f04f 0a00 	mov.w	sl, #0
 800b466:	4640      	mov	r0, r8
 800b468:	f7f4 ff2a 	bl	80002c0 <strlen>
 800b46c:	4450      	add	r0, sl
 800b46e:	3001      	adds	r0, #1
 800b470:	4284      	cmp	r4, r0
 800b472:	f109 0901 	add.w	r9, r9, #1
 800b476:	bf38      	it	cc
 800b478:	4604      	movcc	r4, r0
 800b47a:	45b9      	cmp	r9, r7
 800b47c:	d3e7      	bcc.n	800b44e <get_longest_member_name+0x156>
 800b47e:	46a2      	mov	sl, r4
 800b480:	9c07      	ldr	r4, [sp, #28]
 800b482:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
 800b486:	68a7      	ldr	r7, [r4, #8]
 800b488:	e9dd 6b08 	ldrd	r6, fp, [sp, #32]
 800b48c:	e7b6      	b.n	800b3fc <get_longest_member_name+0x104>
 800b48e:	4b65      	ldr	r3, [pc, #404]	@ (800b624 <get_longest_member_name+0x32c>)
 800b490:	68c8      	ldr	r0, [r1, #12]
 800b492:	6819      	ldr	r1, [r3, #0]
 800b494:	f002 fd40 	bl	800df18 <get_message_typesupport_handle>
 800b498:	f8d0 b004 	ldr.w	fp, [r0, #4]
 800b49c:	f8db 3008 	ldr.w	r3, [fp, #8]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	f000 80b3 	beq.w	800b60c <get_longest_member_name+0x314>
 800b4a6:	f04f 0a00 	mov.w	sl, #0
 800b4aa:	e9cd 680c 	strd	r6, r8, [sp, #48]	@ 0x30
 800b4ae:	e9cd 490e 	strd	r4, r9, [sp, #56]	@ 0x38
 800b4b2:	4657      	mov	r7, sl
 800b4b4:	461c      	mov	r4, r3
 800b4b6:	46a8      	mov	r8, r5
 800b4b8:	f8db 3014 	ldr.w	r3, [fp, #20]
 800b4bc:	ebc7 1207 	rsb	r2, r7, r7, lsl #4
 800b4c0:	eb03 0182 	add.w	r1, r3, r2, lsl #2
 800b4c4:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 800b4c8:	790b      	ldrb	r3, [r1, #4]
 800b4ca:	2b12      	cmp	r3, #18
 800b4cc:	d01d      	beq.n	800b50a <get_longest_member_name+0x212>
 800b4ce:	2500      	movs	r5, #0
 800b4d0:	4630      	mov	r0, r6
 800b4d2:	f7f4 fef5 	bl	80002c0 <strlen>
 800b4d6:	4428      	add	r0, r5
 800b4d8:	3001      	adds	r0, #1
 800b4da:	4582      	cmp	sl, r0
 800b4dc:	f107 0701 	add.w	r7, r7, #1
 800b4e0:	bf38      	it	cc
 800b4e2:	4682      	movcc	sl, r0
 800b4e4:	42a7      	cmp	r7, r4
 800b4e6:	d3e7      	bcc.n	800b4b8 <get_longest_member_name+0x1c0>
 800b4e8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b4ea:	4645      	mov	r5, r8
 800b4ec:	e9dd 490e 	ldrd	r4, r9, [sp, #56]	@ 0x38
 800b4f0:	f8dd 8034 	ldr.w	r8, [sp, #52]	@ 0x34
 800b4f4:	68b7      	ldr	r7, [r6, #8]
 800b4f6:	e7b6      	b.n	800b466 <get_longest_member_name+0x16e>
 800b4f8:	46a3      	mov	fp, r4
 800b4fa:	4658      	mov	r0, fp
 800b4fc:	b017      	add	sp, #92	@ 0x5c
 800b4fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b502:	f8d6 8008 	ldr.w	r8, [r6, #8]
 800b506:	46d3      	mov	fp, sl
 800b508:	e740      	b.n	800b38c <get_longest_member_name+0x94>
 800b50a:	4b46      	ldr	r3, [pc, #280]	@ (800b624 <get_longest_member_name+0x32c>)
 800b50c:	68c8      	ldr	r0, [r1, #12]
 800b50e:	6819      	ldr	r1, [r3, #0]
 800b510:	f002 fd02 	bl	800df18 <get_message_typesupport_handle>
 800b514:	f8d0 9004 	ldr.w	r9, [r0, #4]
 800b518:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d078      	beq.n	800b612 <get_longest_member_name+0x31a>
 800b520:	e9cd a712 	strd	sl, r7, [sp, #72]	@ 0x48
 800b524:	2500      	movs	r5, #0
 800b526:	e9cd b610 	strd	fp, r6, [sp, #64]	@ 0x40
 800b52a:	462c      	mov	r4, r5
 800b52c:	461e      	mov	r6, r3
 800b52e:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800b532:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800b536:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
 800b53a:	eb03 0182 	add.w	r1, r3, r2, lsl #2
 800b53e:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
 800b542:	790a      	ldrb	r2, [r1, #4]
 800b544:	2a12      	cmp	r2, #18
 800b546:	d018      	beq.n	800b57a <get_longest_member_name+0x282>
 800b548:	2700      	movs	r7, #0
 800b54a:	4640      	mov	r0, r8
 800b54c:	f7f4 feb8 	bl	80002c0 <strlen>
 800b550:	4438      	add	r0, r7
 800b552:	3001      	adds	r0, #1
 800b554:	4285      	cmp	r5, r0
 800b556:	f104 0401 	add.w	r4, r4, #1
 800b55a:	bf38      	it	cc
 800b55c:	4605      	movcc	r5, r0
 800b55e:	42b4      	cmp	r4, r6
 800b560:	d3e7      	bcc.n	800b532 <get_longest_member_name+0x23a>
 800b562:	e9dd b610 	ldrd	fp, r6, [sp, #64]	@ 0x40
 800b566:	e9dd a712 	ldrd	sl, r7, [sp, #72]	@ 0x48
 800b56a:	f8dd 8050 	ldr.w	r8, [sp, #80]	@ 0x50
 800b56e:	f8db 4008 	ldr.w	r4, [fp, #8]
 800b572:	e7ad      	b.n	800b4d0 <get_longest_member_name+0x1d8>
 800b574:	68bd      	ldr	r5, [r7, #8]
 800b576:	46d3      	mov	fp, sl
 800b578:	e6d6      	b.n	800b328 <get_longest_member_name+0x30>
 800b57a:	4b2a      	ldr	r3, [pc, #168]	@ (800b624 <get_longest_member_name+0x32c>)
 800b57c:	68c8      	ldr	r0, [r1, #12]
 800b57e:	6819      	ldr	r1, [r3, #0]
 800b580:	f002 fcca 	bl	800df18 <get_message_typesupport_handle>
 800b584:	6843      	ldr	r3, [r0, #4]
 800b586:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b588:	f8d3 a008 	ldr.w	sl, [r3, #8]
 800b58c:	f1ba 0f00 	cmp.w	sl, #0
 800b590:	d043      	beq.n	800b61a <get_longest_member_name+0x322>
 800b592:	2700      	movs	r7, #0
 800b594:	f8d3 b014 	ldr.w	fp, [r3, #20]
 800b598:	463e      	mov	r6, r7
 800b59a:	ebc6 1306 	rsb	r3, r6, r6, lsl #4
 800b59e:	eb0b 0283 	add.w	r2, fp, r3, lsl #2
 800b5a2:	f85b 3023 	ldr.w	r3, [fp, r3, lsl #2]
 800b5a6:	7911      	ldrb	r1, [r2, #4]
 800b5a8:	2912      	cmp	r1, #18
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	d00c      	beq.n	800b5c8 <get_longest_member_name+0x2d0>
 800b5ae:	f7f4 fe87 	bl	80002c0 <strlen>
 800b5b2:	3001      	adds	r0, #1
 800b5b4:	4287      	cmp	r7, r0
 800b5b6:	f106 0601 	add.w	r6, r6, #1
 800b5ba:	bf38      	it	cc
 800b5bc:	4607      	movcc	r7, r0
 800b5be:	4556      	cmp	r6, sl
 800b5c0:	d3eb      	bcc.n	800b59a <get_longest_member_name+0x2a2>
 800b5c2:	f8d9 6008 	ldr.w	r6, [r9, #8]
 800b5c6:	e7c0      	b.n	800b54a <get_longest_member_name+0x252>
 800b5c8:	9315      	str	r3, [sp, #84]	@ 0x54
 800b5ca:	4b16      	ldr	r3, [pc, #88]	@ (800b624 <get_longest_member_name+0x32c>)
 800b5cc:	68d0      	ldr	r0, [r2, #12]
 800b5ce:	6819      	ldr	r1, [r3, #0]
 800b5d0:	f002 fca2 	bl	800df18 <get_message_typesupport_handle>
 800b5d4:	6840      	ldr	r0, [r0, #4]
 800b5d6:	f7ff fe8f 	bl	800b2f8 <get_longest_member_name>
 800b5da:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800b5dc:	4683      	mov	fp, r0
 800b5de:	4618      	mov	r0, r3
 800b5e0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b5e2:	f8d3 a008 	ldr.w	sl, [r3, #8]
 800b5e6:	f7f4 fe6b 	bl	80002c0 <strlen>
 800b5ea:	4483      	add	fp, r0
 800b5ec:	f10b 0b01 	add.w	fp, fp, #1
 800b5f0:	455f      	cmp	r7, fp
 800b5f2:	f106 0601 	add.w	r6, r6, #1
 800b5f6:	bf38      	it	cc
 800b5f8:	465f      	movcc	r7, fp
 800b5fa:	45b2      	cmp	sl, r6
 800b5fc:	d9e1      	bls.n	800b5c2 <get_longest_member_name+0x2ca>
 800b5fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b600:	f8d3 b014 	ldr.w	fp, [r3, #20]
 800b604:	e7c9      	b.n	800b59a <get_longest_member_name+0x2a2>
 800b606:	68a7      	ldr	r7, [r4, #8]
 800b608:	469a      	mov	sl, r3
 800b60a:	e6f7      	b.n	800b3fc <get_longest_member_name+0x104>
 800b60c:	68b7      	ldr	r7, [r6, #8]
 800b60e:	469a      	mov	sl, r3
 800b610:	e729      	b.n	800b466 <get_longest_member_name+0x16e>
 800b612:	f8db 4008 	ldr.w	r4, [fp, #8]
 800b616:	461d      	mov	r5, r3
 800b618:	e75a      	b.n	800b4d0 <get_longest_member_name+0x1d8>
 800b61a:	f8d9 6008 	ldr.w	r6, [r9, #8]
 800b61e:	4657      	mov	r7, sl
 800b620:	e793      	b.n	800b54a <get_longest_member_name+0x252>
 800b622:	bf00      	nop
 800b624:	200005a0 	.word	0x200005a0

0800b628 <micro_ros_utilities_get_dynamic_size>:
 800b628:	b084      	sub	sp, #16
 800b62a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b62e:	b09f      	sub	sp, #124	@ 0x7c
 800b630:	ac29      	add	r4, sp, #164	@ 0xa4
 800b632:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 800b636:	4619      	mov	r1, r3
 800b638:	2900      	cmp	r1, #0
 800b63a:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 800b63c:	9c2d      	ldr	r4, [sp, #180]	@ 0xb4
 800b63e:	941c      	str	r4, [sp, #112]	@ 0x70
 800b640:	bf08      	it	eq
 800b642:	2105      	moveq	r1, #5
 800b644:	2a00      	cmp	r2, #0
 800b646:	bf08      	it	eq
 800b648:	2205      	moveq	r2, #5
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	bf08      	it	eq
 800b64e:	2314      	moveq	r3, #20
 800b650:	9318      	str	r3, [sp, #96]	@ 0x60
 800b652:	4b75      	ldr	r3, [pc, #468]	@ (800b828 <micro_ros_utilities_get_dynamic_size+0x200>)
 800b654:	911a      	str	r1, [sp, #104]	@ 0x68
 800b656:	6819      	ldr	r1, [r3, #0]
 800b658:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 800b65a:	931b      	str	r3, [sp, #108]	@ 0x6c
 800b65c:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 800b65e:	931d      	str	r3, [sp, #116]	@ 0x74
 800b660:	9219      	str	r2, [sp, #100]	@ 0x64
 800b662:	f002 fc59 	bl	800df18 <get_message_typesupport_handle>
 800b666:	f10d 0854 	add.w	r8, sp, #84	@ 0x54
 800b66a:	2300      	movs	r3, #0
 800b66c:	f8d0 a004 	ldr.w	sl, [r0, #4]
 800b670:	9315      	str	r3, [sp, #84]	@ 0x54
 800b672:	e9c8 3301 	strd	r3, r3, [r8, #4]
 800b676:	b9b4      	cbnz	r4, 800b6a6 <micro_ros_utilities_get_dynamic_size+0x7e>
 800b678:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 800b67c:	ab04      	add	r3, sp, #16
 800b67e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800b682:	ab1e      	add	r3, sp, #120	@ 0x78
 800b684:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 800b688:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800b68c:	ab18      	add	r3, sp, #96	@ 0x60
 800b68e:	4621      	mov	r1, r4
 800b690:	cb0c      	ldmia	r3, {r2, r3}
 800b692:	4650      	mov	r0, sl
 800b694:	f7ff f914 	bl	800a8c0 <handle_message_memory.constprop.4>
 800b698:	4604      	mov	r4, r0
 800b69a:	4620      	mov	r0, r4
 800b69c:	b01f      	add	sp, #124	@ 0x7c
 800b69e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6a2:	b004      	add	sp, #16
 800b6a4:	4770      	bx	lr
 800b6a6:	f8da 4008 	ldr.w	r4, [sl, #8]
 800b6aa:	2c00      	cmp	r4, #0
 800b6ac:	f000 80b5 	beq.w	800b81a <micro_ros_utilities_get_dynamic_size+0x1f2>
 800b6b0:	469b      	mov	fp, r3
 800b6b2:	461f      	mov	r7, r3
 800b6b4:	4656      	mov	r6, sl
 800b6b6:	6972      	ldr	r2, [r6, #20]
 800b6b8:	ebc7 1307 	rsb	r3, r7, r7, lsl #4
 800b6bc:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800b6c0:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 800b6c4:	790b      	ldrb	r3, [r1, #4]
 800b6c6:	2b12      	cmp	r3, #18
 800b6c8:	d02a      	beq.n	800b720 <micro_ros_utilities_get_dynamic_size+0xf8>
 800b6ca:	2500      	movs	r5, #0
 800b6cc:	4648      	mov	r0, r9
 800b6ce:	f7f4 fdf7 	bl	80002c0 <strlen>
 800b6d2:	4428      	add	r0, r5
 800b6d4:	3001      	adds	r0, #1
 800b6d6:	4583      	cmp	fp, r0
 800b6d8:	f107 0701 	add.w	r7, r7, #1
 800b6dc:	bf38      	it	cc
 800b6de:	4683      	movcc	fp, r0
 800b6e0:	42a7      	cmp	r7, r4
 800b6e2:	d3e8      	bcc.n	800b6b6 <micro_ros_utilities_get_dynamic_size+0x8e>
 800b6e4:	46b2      	mov	sl, r6
 800b6e6:	ac10      	add	r4, sp, #64	@ 0x40
 800b6e8:	4659      	mov	r1, fp
 800b6ea:	4620      	mov	r0, r4
 800b6ec:	f003 fc4a 	bl	800ef84 <micro_ros_string_utilities_init_with_size>
 800b6f0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800b6f4:	ab04      	add	r3, sp, #16
 800b6f6:	e888 0007 	stmia.w	r8, {r0, r1, r2}
 800b6fa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800b6fe:	ab1e      	add	r3, sp, #120	@ 0x78
 800b700:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 800b704:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800b708:	ac18      	add	r4, sp, #96	@ 0x60
 800b70a:	e894 000c 	ldmia.w	r4, {r2, r3}
 800b70e:	2100      	movs	r1, #0
 800b710:	4650      	mov	r0, sl
 800b712:	f7ff f8d5 	bl	800a8c0 <handle_message_memory.constprop.4>
 800b716:	4604      	mov	r4, r0
 800b718:	4640      	mov	r0, r8
 800b71a:	f003 fc8f 	bl	800f03c <micro_ros_string_utilities_destroy>
 800b71e:	e7bc      	b.n	800b69a <micro_ros_utilities_get_dynamic_size+0x72>
 800b720:	4b41      	ldr	r3, [pc, #260]	@ (800b828 <micro_ros_utilities_get_dynamic_size+0x200>)
 800b722:	68c8      	ldr	r0, [r1, #12]
 800b724:	6819      	ldr	r1, [r3, #0]
 800b726:	f002 fbf7 	bl	800df18 <get_message_typesupport_handle>
 800b72a:	6843      	ldr	r3, [r0, #4]
 800b72c:	f8d3 a008 	ldr.w	sl, [r3, #8]
 800b730:	f1ba 0f00 	cmp.w	sl, #0
 800b734:	d027      	beq.n	800b786 <micro_ros_utilities_get_dynamic_size+0x15e>
 800b736:	2500      	movs	r5, #0
 800b738:	e9cd 690a 	strd	r6, r9, [sp, #40]	@ 0x28
 800b73c:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800b740:	462c      	mov	r4, r5
 800b742:	469b      	mov	fp, r3
 800b744:	970d      	str	r7, [sp, #52]	@ 0x34
 800b746:	4656      	mov	r6, sl
 800b748:	f8db 3014 	ldr.w	r3, [fp, #20]
 800b74c:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
 800b750:	eb03 0182 	add.w	r1, r3, r2, lsl #2
 800b754:	f853 a022 	ldr.w	sl, [r3, r2, lsl #2]
 800b758:	790a      	ldrb	r2, [r1, #4]
 800b75a:	2a12      	cmp	r2, #18
 800b75c:	d016      	beq.n	800b78c <micro_ros_utilities_get_dynamic_size+0x164>
 800b75e:	f04f 0900 	mov.w	r9, #0
 800b762:	4650      	mov	r0, sl
 800b764:	f7f4 fdac 	bl	80002c0 <strlen>
 800b768:	4448      	add	r0, r9
 800b76a:	3001      	adds	r0, #1
 800b76c:	4285      	cmp	r5, r0
 800b76e:	f104 0401 	add.w	r4, r4, #1
 800b772:	bf38      	it	cc
 800b774:	4605      	movcc	r5, r0
 800b776:	42b4      	cmp	r4, r6
 800b778:	d3e6      	bcc.n	800b748 <micro_ros_utilities_get_dynamic_size+0x120>
 800b77a:	e9dd 690a 	ldrd	r6, r9, [sp, #40]	@ 0x28
 800b77e:	e9dd b70c 	ldrd	fp, r7, [sp, #48]	@ 0x30
 800b782:	68b4      	ldr	r4, [r6, #8]
 800b784:	e7a2      	b.n	800b6cc <micro_ros_utilities_get_dynamic_size+0xa4>
 800b786:	68b4      	ldr	r4, [r6, #8]
 800b788:	4655      	mov	r5, sl
 800b78a:	e79f      	b.n	800b6cc <micro_ros_utilities_get_dynamic_size+0xa4>
 800b78c:	4b26      	ldr	r3, [pc, #152]	@ (800b828 <micro_ros_utilities_get_dynamic_size+0x200>)
 800b78e:	68c8      	ldr	r0, [r1, #12]
 800b790:	6819      	ldr	r1, [r3, #0]
 800b792:	f002 fbc1 	bl	800df18 <get_message_typesupport_handle>
 800b796:	6843      	ldr	r3, [r0, #4]
 800b798:	9309      	str	r3, [sp, #36]	@ 0x24
 800b79a:	689f      	ldr	r7, [r3, #8]
 800b79c:	2f00      	cmp	r7, #0
 800b79e:	d03e      	beq.n	800b81e <micro_ros_utilities_get_dynamic_size+0x1f6>
 800b7a0:	6959      	ldr	r1, [r3, #20]
 800b7a2:	940e      	str	r4, [sp, #56]	@ 0x38
 800b7a4:	f04f 0900 	mov.w	r9, #0
 800b7a8:	463c      	mov	r4, r7
 800b7aa:	464e      	mov	r6, r9
 800b7ac:	460f      	mov	r7, r1
 800b7ae:	ebc6 1206 	rsb	r2, r6, r6, lsl #4
 800b7b2:	eb07 0182 	add.w	r1, r7, r2, lsl #2
 800b7b6:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 800b7ba:	f891 c004 	ldrb.w	ip, [r1, #4]
 800b7be:	f1bc 0f12 	cmp.w	ip, #18
 800b7c2:	4610      	mov	r0, r2
 800b7c4:	d00d      	beq.n	800b7e2 <micro_ros_utilities_get_dynamic_size+0x1ba>
 800b7c6:	f7f4 fd7b 	bl	80002c0 <strlen>
 800b7ca:	3001      	adds	r0, #1
 800b7cc:	4581      	cmp	r9, r0
 800b7ce:	f106 0601 	add.w	r6, r6, #1
 800b7d2:	bf38      	it	cc
 800b7d4:	4681      	movcc	r9, r0
 800b7d6:	42a6      	cmp	r6, r4
 800b7d8:	d3e9      	bcc.n	800b7ae <micro_ros_utilities_get_dynamic_size+0x186>
 800b7da:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 800b7dc:	f8db 6008 	ldr.w	r6, [fp, #8]
 800b7e0:	e7bf      	b.n	800b762 <micro_ros_utilities_get_dynamic_size+0x13a>
 800b7e2:	4b11      	ldr	r3, [pc, #68]	@ (800b828 <micro_ros_utilities_get_dynamic_size+0x200>)
 800b7e4:	68c8      	ldr	r0, [r1, #12]
 800b7e6:	6819      	ldr	r1, [r3, #0]
 800b7e8:	920f      	str	r2, [sp, #60]	@ 0x3c
 800b7ea:	f002 fb95 	bl	800df18 <get_message_typesupport_handle>
 800b7ee:	6840      	ldr	r0, [r0, #4]
 800b7f0:	f7ff fd82 	bl	800b2f8 <get_longest_member_name>
 800b7f4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b7f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b7f8:	4607      	mov	r7, r0
 800b7fa:	4610      	mov	r0, r2
 800b7fc:	689c      	ldr	r4, [r3, #8]
 800b7fe:	f7f4 fd5f 	bl	80002c0 <strlen>
 800b802:	4407      	add	r7, r0
 800b804:	3701      	adds	r7, #1
 800b806:	45b9      	cmp	r9, r7
 800b808:	f106 0601 	add.w	r6, r6, #1
 800b80c:	bf38      	it	cc
 800b80e:	46b9      	movcc	r9, r7
 800b810:	42a6      	cmp	r6, r4
 800b812:	d2e2      	bcs.n	800b7da <micro_ros_utilities_get_dynamic_size+0x1b2>
 800b814:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b816:	695f      	ldr	r7, [r3, #20]
 800b818:	e7c9      	b.n	800b7ae <micro_ros_utilities_get_dynamic_size+0x186>
 800b81a:	46a3      	mov	fp, r4
 800b81c:	e763      	b.n	800b6e6 <micro_ros_utilities_get_dynamic_size+0xbe>
 800b81e:	f8db 6008 	ldr.w	r6, [fp, #8]
 800b822:	46b9      	mov	r9, r7
 800b824:	e79d      	b.n	800b762 <micro_ros_utilities_get_dynamic_size+0x13a>
 800b826:	bf00      	nop
 800b828:	200005a0 	.word	0x200005a0

0800b82c <micro_ros_utilities_create_message_memory>:
 800b82c:	b082      	sub	sp, #8
 800b82e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b832:	b0a1      	sub	sp, #132	@ 0x84
 800b834:	ae2d      	add	r6, sp, #180	@ 0xb4
 800b836:	ac2a      	add	r4, sp, #168	@ 0xa8
 800b838:	e884 000c 	stmia.w	r4, {r2, r3}
 800b83c:	4607      	mov	r7, r0
 800b83e:	460c      	mov	r4, r1
 800b840:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800b844:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800b848:	ab2a      	add	r3, sp, #168	@ 0xa8
 800b84a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b84c:	4638      	mov	r0, r7
 800b84e:	9d2e      	ldr	r5, [sp, #184]	@ 0xb8
 800b850:	f7ff feea 	bl	800b628 <micro_ros_utilities_get_dynamic_size>
 800b854:	9a2c      	ldr	r2, [sp, #176]	@ 0xb0
 800b856:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 800b858:	951e      	str	r5, [sp, #120]	@ 0x78
 800b85a:	2a00      	cmp	r2, #0
 800b85c:	bf08      	it	eq
 800b85e:	2205      	moveq	r2, #5
 800b860:	921c      	str	r2, [sp, #112]	@ 0x70
 800b862:	9a2b      	ldr	r2, [sp, #172]	@ 0xac
 800b864:	2a00      	cmp	r2, #0
 800b866:	bf08      	it	eq
 800b868:	2205      	moveq	r2, #5
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	bf08      	it	eq
 800b86e:	2314      	moveq	r3, #20
 800b870:	931a      	str	r3, [sp, #104]	@ 0x68
 800b872:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 800b874:	931d      	str	r3, [sp, #116]	@ 0x74
 800b876:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
 800b878:	931f      	str	r3, [sp, #124]	@ 0x7c
 800b87a:	4b7f      	ldr	r3, [pc, #508]	@ (800ba78 <micro_ros_utilities_create_message_memory+0x24c>)
 800b87c:	921b      	str	r2, [sp, #108]	@ 0x6c
 800b87e:	6819      	ldr	r1, [r3, #0]
 800b880:	4606      	mov	r6, r0
 800b882:	4638      	mov	r0, r7
 800b884:	f002 fb48 	bl	800df18 <get_message_typesupport_handle>
 800b888:	f10d 095c 	add.w	r9, sp, #92	@ 0x5c
 800b88c:	2300      	movs	r3, #0
 800b88e:	f8d0 a004 	ldr.w	sl, [r0, #4]
 800b892:	9317      	str	r3, [sp, #92]	@ 0x5c
 800b894:	e9c9 3301 	strd	r3, r3, [r9, #4]
 800b898:	bb05      	cbnz	r5, 800b8dc <micro_ros_utilities_create_message_memory+0xb0>
 800b89a:	4629      	mov	r1, r5
 800b89c:	f8da 200c 	ldr.w	r2, [sl, #12]
 800b8a0:	4620      	mov	r0, r4
 800b8a2:	f011 fdf5 	bl	801d490 <memset>
 800b8a6:	e899 0007 	ldmia.w	r9, {r0, r1, r2}
 800b8aa:	ab04      	add	r3, sp, #16
 800b8ac:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800b8b0:	ab20      	add	r3, sp, #128	@ 0x80
 800b8b2:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 800b8b6:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800b8ba:	ad1a      	add	r5, sp, #104	@ 0x68
 800b8bc:	4621      	mov	r1, r4
 800b8be:	e895 000c 	ldmia.w	r5, {r2, r3}
 800b8c2:	4650      	mov	r0, sl
 800b8c4:	f7ff fa62 	bl	800ad8c <handle_message_memory.constprop.2>
 800b8c8:	4604      	mov	r4, r0
 800b8ca:	1b30      	subs	r0, r6, r4
 800b8cc:	fab0 f080 	clz	r0, r0
 800b8d0:	0940      	lsrs	r0, r0, #5
 800b8d2:	b021      	add	sp, #132	@ 0x84
 800b8d4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8d8:	b002      	add	sp, #8
 800b8da:	4770      	bx	lr
 800b8dc:	f8da 8008 	ldr.w	r8, [sl, #8]
 800b8e0:	f1b8 0f00 	cmp.w	r8, #0
 800b8e4:	f000 80c1 	beq.w	800ba6a <micro_ros_utilities_create_message_memory+0x23e>
 800b8e8:	960a      	str	r6, [sp, #40]	@ 0x28
 800b8ea:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b8ec:	469b      	mov	fp, r3
 800b8ee:	461f      	mov	r7, r3
 800b8f0:	4656      	mov	r6, sl
 800b8f2:	4644      	mov	r4, r8
 800b8f4:	6973      	ldr	r3, [r6, #20]
 800b8f6:	ebc7 1207 	rsb	r2, r7, r7, lsl #4
 800b8fa:	eb03 0182 	add.w	r1, r3, r2, lsl #2
 800b8fe:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
 800b902:	790b      	ldrb	r3, [r1, #4]
 800b904:	2b12      	cmp	r3, #18
 800b906:	d034      	beq.n	800b972 <micro_ros_utilities_create_message_memory+0x146>
 800b908:	2500      	movs	r5, #0
 800b90a:	4640      	mov	r0, r8
 800b90c:	f7f4 fcd8 	bl	80002c0 <strlen>
 800b910:	4428      	add	r0, r5
 800b912:	3001      	adds	r0, #1
 800b914:	4583      	cmp	fp, r0
 800b916:	f107 0701 	add.w	r7, r7, #1
 800b91a:	bf38      	it	cc
 800b91c:	4683      	movcc	fp, r0
 800b91e:	42a7      	cmp	r7, r4
 800b920:	d3e8      	bcc.n	800b8f4 <micro_ros_utilities_create_message_memory+0xc8>
 800b922:	46b2      	mov	sl, r6
 800b924:	e9dd 640a 	ldrd	r6, r4, [sp, #40]	@ 0x28
 800b928:	ad12      	add	r5, sp, #72	@ 0x48
 800b92a:	4659      	mov	r1, fp
 800b92c:	4628      	mov	r0, r5
 800b92e:	f003 fb29 	bl	800ef84 <micro_ros_string_utilities_init_with_size>
 800b932:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b936:	e889 0007 	stmia.w	r9, {r0, r1, r2}
 800b93a:	f8da 200c 	ldr.w	r2, [sl, #12]
 800b93e:	2100      	movs	r1, #0
 800b940:	4620      	mov	r0, r4
 800b942:	f011 fda5 	bl	801d490 <memset>
 800b946:	e899 0007 	ldmia.w	r9, {r0, r1, r2}
 800b94a:	ab04      	add	r3, sp, #16
 800b94c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800b950:	ab20      	add	r3, sp, #128	@ 0x80
 800b952:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 800b956:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800b95a:	ad1a      	add	r5, sp, #104	@ 0x68
 800b95c:	4621      	mov	r1, r4
 800b95e:	e895 000c 	ldmia.w	r5, {r2, r3}
 800b962:	4650      	mov	r0, sl
 800b964:	f7ff fa12 	bl	800ad8c <handle_message_memory.constprop.2>
 800b968:	4604      	mov	r4, r0
 800b96a:	4648      	mov	r0, r9
 800b96c:	f003 fb66 	bl	800f03c <micro_ros_string_utilities_destroy>
 800b970:	e7ab      	b.n	800b8ca <micro_ros_utilities_create_message_memory+0x9e>
 800b972:	4b41      	ldr	r3, [pc, #260]	@ (800ba78 <micro_ros_utilities_create_message_memory+0x24c>)
 800b974:	68c8      	ldr	r0, [r1, #12]
 800b976:	6819      	ldr	r1, [r3, #0]
 800b978:	f002 face 	bl	800df18 <get_message_typesupport_handle>
 800b97c:	f8d0 a004 	ldr.w	sl, [r0, #4]
 800b980:	f8da 3008 	ldr.w	r3, [sl, #8]
 800b984:	b323      	cbz	r3, 800b9d0 <micro_ros_utilities_create_message_memory+0x1a4>
 800b986:	e9cd b70e 	strd	fp, r7, [sp, #56]	@ 0x38
 800b98a:	2500      	movs	r5, #0
 800b98c:	e9cd 680c 	strd	r6, r8, [sp, #48]	@ 0x30
 800b990:	462c      	mov	r4, r5
 800b992:	461e      	mov	r6, r3
 800b994:	f8da 3014 	ldr.w	r3, [sl, #20]
 800b998:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
 800b99c:	eb03 0182 	add.w	r1, r3, r2, lsl #2
 800b9a0:	f853 b022 	ldr.w	fp, [r3, r2, lsl #2]
 800b9a4:	790a      	ldrb	r2, [r1, #4]
 800b9a6:	2a12      	cmp	r2, #18
 800b9a8:	d015      	beq.n	800b9d6 <micro_ros_utilities_create_message_memory+0x1aa>
 800b9aa:	2700      	movs	r7, #0
 800b9ac:	4658      	mov	r0, fp
 800b9ae:	f7f4 fc87 	bl	80002c0 <strlen>
 800b9b2:	4438      	add	r0, r7
 800b9b4:	3001      	adds	r0, #1
 800b9b6:	4285      	cmp	r5, r0
 800b9b8:	f104 0401 	add.w	r4, r4, #1
 800b9bc:	bf38      	it	cc
 800b9be:	4605      	movcc	r5, r0
 800b9c0:	42b4      	cmp	r4, r6
 800b9c2:	d3e7      	bcc.n	800b994 <micro_ros_utilities_create_message_memory+0x168>
 800b9c4:	e9dd 680c 	ldrd	r6, r8, [sp, #48]	@ 0x30
 800b9c8:	e9dd b70e 	ldrd	fp, r7, [sp, #56]	@ 0x38
 800b9cc:	68b4      	ldr	r4, [r6, #8]
 800b9ce:	e79c      	b.n	800b90a <micro_ros_utilities_create_message_memory+0xde>
 800b9d0:	68b4      	ldr	r4, [r6, #8]
 800b9d2:	461d      	mov	r5, r3
 800b9d4:	e799      	b.n	800b90a <micro_ros_utilities_create_message_memory+0xde>
 800b9d6:	4b28      	ldr	r3, [pc, #160]	@ (800ba78 <micro_ros_utilities_create_message_memory+0x24c>)
 800b9d8:	68c8      	ldr	r0, [r1, #12]
 800b9da:	6819      	ldr	r1, [r3, #0]
 800b9dc:	f002 fa9c 	bl	800df18 <get_message_typesupport_handle>
 800b9e0:	6843      	ldr	r3, [r0, #4]
 800b9e2:	9309      	str	r3, [sp, #36]	@ 0x24
 800b9e4:	f8d3 8008 	ldr.w	r8, [r3, #8]
 800b9e8:	f1b8 0f00 	cmp.w	r8, #0
 800b9ec:	d03f      	beq.n	800ba6e <micro_ros_utilities_create_message_memory+0x242>
 800b9ee:	6959      	ldr	r1, [r3, #20]
 800b9f0:	9410      	str	r4, [sp, #64]	@ 0x40
 800b9f2:	2700      	movs	r7, #0
 800b9f4:	4644      	mov	r4, r8
 800b9f6:	463e      	mov	r6, r7
 800b9f8:	4688      	mov	r8, r1
 800b9fa:	ebc6 1206 	rsb	r2, r6, r6, lsl #4
 800b9fe:	eb08 0182 	add.w	r1, r8, r2, lsl #2
 800ba02:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 800ba06:	f891 c004 	ldrb.w	ip, [r1, #4]
 800ba0a:	f1bc 0f12 	cmp.w	ip, #18
 800ba0e:	4610      	mov	r0, r2
 800ba10:	d00d      	beq.n	800ba2e <micro_ros_utilities_create_message_memory+0x202>
 800ba12:	f7f4 fc55 	bl	80002c0 <strlen>
 800ba16:	3001      	adds	r0, #1
 800ba18:	4287      	cmp	r7, r0
 800ba1a:	f106 0601 	add.w	r6, r6, #1
 800ba1e:	bf38      	it	cc
 800ba20:	4607      	movcc	r7, r0
 800ba22:	42a6      	cmp	r6, r4
 800ba24:	d3e9      	bcc.n	800b9fa <micro_ros_utilities_create_message_memory+0x1ce>
 800ba26:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 800ba28:	f8da 6008 	ldr.w	r6, [sl, #8]
 800ba2c:	e7be      	b.n	800b9ac <micro_ros_utilities_create_message_memory+0x180>
 800ba2e:	4b12      	ldr	r3, [pc, #72]	@ (800ba78 <micro_ros_utilities_create_message_memory+0x24c>)
 800ba30:	68c8      	ldr	r0, [r1, #12]
 800ba32:	6819      	ldr	r1, [r3, #0]
 800ba34:	9211      	str	r2, [sp, #68]	@ 0x44
 800ba36:	f002 fa6f 	bl	800df18 <get_message_typesupport_handle>
 800ba3a:	6840      	ldr	r0, [r0, #4]
 800ba3c:	f7ff fc5c 	bl	800b2f8 <get_longest_member_name>
 800ba40:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800ba42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba44:	4680      	mov	r8, r0
 800ba46:	4610      	mov	r0, r2
 800ba48:	689c      	ldr	r4, [r3, #8]
 800ba4a:	f7f4 fc39 	bl	80002c0 <strlen>
 800ba4e:	4480      	add	r8, r0
 800ba50:	f108 0801 	add.w	r8, r8, #1
 800ba54:	4547      	cmp	r7, r8
 800ba56:	f106 0601 	add.w	r6, r6, #1
 800ba5a:	bf38      	it	cc
 800ba5c:	4647      	movcc	r7, r8
 800ba5e:	42a6      	cmp	r6, r4
 800ba60:	d2e1      	bcs.n	800ba26 <micro_ros_utilities_create_message_memory+0x1fa>
 800ba62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba64:	f8d3 8014 	ldr.w	r8, [r3, #20]
 800ba68:	e7c7      	b.n	800b9fa <micro_ros_utilities_create_message_memory+0x1ce>
 800ba6a:	46c3      	mov	fp, r8
 800ba6c:	e75c      	b.n	800b928 <micro_ros_utilities_create_message_memory+0xfc>
 800ba6e:	f8da 6008 	ldr.w	r6, [sl, #8]
 800ba72:	4647      	mov	r7, r8
 800ba74:	e79a      	b.n	800b9ac <micro_ros_utilities_create_message_memory+0x180>
 800ba76:	bf00      	nop
 800ba78:	200005a0 	.word	0x200005a0

0800ba7c <rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity>:
 800ba7c:	4b04      	ldr	r3, [pc, #16]	@ (800ba90 <rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity+0x14>)
 800ba7e:	681a      	ldr	r2, [r3, #0]
 800ba80:	b10a      	cbz	r2, 800ba86 <rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity+0xa>
 800ba82:	4803      	ldr	r0, [pc, #12]	@ (800ba90 <rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity+0x14>)
 800ba84:	4770      	bx	lr
 800ba86:	4a03      	ldr	r2, [pc, #12]	@ (800ba94 <rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity+0x18>)
 800ba88:	4801      	ldr	r0, [pc, #4]	@ (800ba90 <rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity+0x14>)
 800ba8a:	6812      	ldr	r2, [r2, #0]
 800ba8c:	601a      	str	r2, [r3, #0]
 800ba8e:	4770      	bx	lr
 800ba90:	200000dc 	.word	0x200000dc
 800ba94:	2000059c 	.word	0x2000059c

0800ba98 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity>:
 800ba98:	4a02      	ldr	r2, [pc, #8]	@ (800baa4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity+0xc>)
 800ba9a:	4b03      	ldr	r3, [pc, #12]	@ (800baa8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity+0x10>)
 800ba9c:	6812      	ldr	r2, [r2, #0]
 800ba9e:	601a      	str	r2, [r3, #0]
 800baa0:	4770      	bx	lr
 800baa2:	bf00      	nop
 800baa4:	2000059c 	.word	0x2000059c
 800baa8:	200000dc 	.word	0x200000dc

0800baac <rosidl_typesupport_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode>:
 800baac:	4b04      	ldr	r3, [pc, #16]	@ (800bac0 <rosidl_typesupport_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x14>)
 800baae:	681a      	ldr	r2, [r3, #0]
 800bab0:	b10a      	cbz	r2, 800bab6 <rosidl_typesupport_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0xa>
 800bab2:	4803      	ldr	r0, [pc, #12]	@ (800bac0 <rosidl_typesupport_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x14>)
 800bab4:	4770      	bx	lr
 800bab6:	4a03      	ldr	r2, [pc, #12]	@ (800bac4 <rosidl_typesupport_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x18>)
 800bab8:	4801      	ldr	r0, [pc, #4]	@ (800bac0 <rosidl_typesupport_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x14>)
 800baba:	6812      	ldr	r2, [r2, #0]
 800babc:	601a      	str	r2, [r3, #0]
 800babe:	4770      	bx	lr
 800bac0:	200000fc 	.word	0x200000fc
 800bac4:	2000059c 	.word	0x2000059c

0800bac8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Request>:
 800bac8:	4b06      	ldr	r3, [pc, #24]	@ (800bae4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Request+0x1c>)
 800baca:	4807      	ldr	r0, [pc, #28]	@ (800bae8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Request+0x20>)
 800bacc:	4907      	ldr	r1, [pc, #28]	@ (800baec <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Request+0x24>)
 800bace:	4a08      	ldr	r2, [pc, #32]	@ (800baf0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Request+0x28>)
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	b410      	push	{r4}
 800bad4:	4c07      	ldr	r4, [pc, #28]	@ (800baf4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Request+0x2c>)
 800bad6:	6003      	str	r3, [r0, #0]
 800bad8:	6023      	str	r3, [r4, #0]
 800bada:	600b      	str	r3, [r1, #0]
 800badc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bae0:	6013      	str	r3, [r2, #0]
 800bae2:	4770      	bx	lr
 800bae4:	2000059c 	.word	0x2000059c
 800bae8:	20000150 	.word	0x20000150
 800baec:	20000130 	.word	0x20000130
 800baf0:	200000fc 	.word	0x200000fc
 800baf4:	20000170 	.word	0x20000170

0800baf8 <rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses>:
 800baf8:	4b04      	ldr	r3, [pc, #16]	@ (800bb0c <rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses+0x14>)
 800bafa:	681a      	ldr	r2, [r3, #0]
 800bafc:	b10a      	cbz	r2, 800bb02 <rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses+0xa>
 800bafe:	4803      	ldr	r0, [pc, #12]	@ (800bb0c <rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses+0x14>)
 800bb00:	4770      	bx	lr
 800bb02:	4a03      	ldr	r2, [pc, #12]	@ (800bb10 <rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses+0x18>)
 800bb04:	4801      	ldr	r0, [pc, #4]	@ (800bb0c <rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses+0x14>)
 800bb06:	6812      	ldr	r2, [r2, #0]
 800bb08:	601a      	str	r2, [r3, #0]
 800bb0a:	4770      	bx	lr
 800bb0c:	20000190 	.word	0x20000190
 800bb10:	2000059c 	.word	0x2000059c

0800bb14 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses>:
 800bb14:	4a02      	ldr	r2, [pc, #8]	@ (800bb20 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses+0xc>)
 800bb16:	4b03      	ldr	r3, [pc, #12]	@ (800bb24 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses+0x10>)
 800bb18:	6812      	ldr	r2, [r2, #0]
 800bb1a:	601a      	str	r2, [r3, #0]
 800bb1c:	4770      	bx	lr
 800bb1e:	bf00      	nop
 800bb20:	2000059c 	.word	0x2000059c
 800bb24:	20000190 	.word	0x20000190

0800bb28 <nereo_interfaces__msg__CommandVelocity__rosidl_typesupport_introspection_c__size_function__CommandVelocity__cmd_vel>:
 800bb28:	2006      	movs	r0, #6
 800bb2a:	4770      	bx	lr

0800bb2c <nereo_interfaces__msg__CommandVelocity__rosidl_typesupport_introspection_c__get_const_function__CommandVelocity__cmd_vel>:
 800bb2c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800bb30:	4770      	bx	lr
 800bb32:	bf00      	nop

0800bb34 <nereo_interfaces__msg__CommandVelocity__rosidl_typesupport_introspection_c__fetch_function__CommandVelocity__cmd_vel>:
 800bb34:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800bb38:	6803      	ldr	r3, [r0, #0]
 800bb3a:	6013      	str	r3, [r2, #0]
 800bb3c:	4770      	bx	lr
 800bb3e:	bf00      	nop

0800bb40 <nereo_interfaces__msg__CommandVelocity__rosidl_typesupport_introspection_c__assign_function__CommandVelocity__cmd_vel>:
 800bb40:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800bb44:	6813      	ldr	r3, [r2, #0]
 800bb46:	6003      	str	r3, [r0, #0]
 800bb48:	4770      	bx	lr
 800bb4a:	bf00      	nop

0800bb4c <nereo_interfaces__msg__CommandVelocity__rosidl_typesupport_introspection_c__CommandVelocity_init_function>:
 800bb4c:	f008 ba86 	b.w	801405c <nereo_interfaces__msg__CommandVelocity__init>

0800bb50 <nereo_interfaces__msg__CommandVelocity__rosidl_typesupport_introspection_c__CommandVelocity_fini_function>:
 800bb50:	f008 ba88 	b.w	8014064 <nereo_interfaces__msg__CommandVelocity__fini>

0800bb54 <nereo_interfaces__msg__CommandVelocity__rosidl_typesupport_introspection_c__get_function__CommandVelocity__cmd_vel>:
 800bb54:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800bb58:	4770      	bx	lr
 800bb5a:	bf00      	nop

0800bb5c <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity>:
 800bb5c:	4b04      	ldr	r3, [pc, #16]	@ (800bb70 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity+0x14>)
 800bb5e:	681a      	ldr	r2, [r3, #0]
 800bb60:	b10a      	cbz	r2, 800bb66 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity+0xa>
 800bb62:	4803      	ldr	r0, [pc, #12]	@ (800bb70 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity+0x14>)
 800bb64:	4770      	bx	lr
 800bb66:	4a03      	ldr	r2, [pc, #12]	@ (800bb74 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity+0x18>)
 800bb68:	4801      	ldr	r0, [pc, #4]	@ (800bb70 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity+0x14>)
 800bb6a:	6812      	ldr	r2, [r2, #0]
 800bb6c:	601a      	str	r2, [r3, #0]
 800bb6e:	4770      	bx	lr
 800bb70:	200001b0 	.word	0x200001b0
 800bb74:	200005a0 	.word	0x200005a0

0800bb78 <nereo_interfaces__srv__SetNavigationMode_Event__rosidl_typesupport_introspection_c__size_function__SetNavigationMode_Event__request>:
 800bb78:	6840      	ldr	r0, [r0, #4]
 800bb7a:	4770      	bx	lr

0800bb7c <nereo_interfaces__srv__SetNavigationMode_Event__rosidl_typesupport_introspection_c__get_const_function__SetNavigationMode_Event__request>:
 800bb7c:	6800      	ldr	r0, [r0, #0]
 800bb7e:	4408      	add	r0, r1
 800bb80:	4770      	bx	lr
 800bb82:	bf00      	nop

0800bb84 <nereo_interfaces__srv__SetNavigationMode_Event__rosidl_typesupport_introspection_c__fetch_function__SetNavigationMode_Event__request>:
 800bb84:	6803      	ldr	r3, [r0, #0]
 800bb86:	5c5b      	ldrb	r3, [r3, r1]
 800bb88:	7013      	strb	r3, [r2, #0]
 800bb8a:	4770      	bx	lr

0800bb8c <nereo_interfaces__srv__SetNavigationMode_Event__rosidl_typesupport_introspection_c__assign_function__SetNavigationMode_Event__request>:
 800bb8c:	6803      	ldr	r3, [r0, #0]
 800bb8e:	7812      	ldrb	r2, [r2, #0]
 800bb90:	545a      	strb	r2, [r3, r1]
 800bb92:	4770      	bx	lr

0800bb94 <nereo_interfaces__srv__SetNavigationMode_Event__rosidl_typesupport_introspection_c__size_function__SetNavigationMode_Event__response>:
 800bb94:	6840      	ldr	r0, [r0, #4]
 800bb96:	4770      	bx	lr

0800bb98 <nereo_interfaces__srv__SetNavigationMode_Event__rosidl_typesupport_introspection_c__get_const_function__SetNavigationMode_Event__response>:
 800bb98:	6800      	ldr	r0, [r0, #0]
 800bb9a:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 800bb9e:	4770      	bx	lr

0800bba0 <nereo_interfaces__srv__SetNavigationMode_Event__rosidl_typesupport_introspection_c__fetch_function__SetNavigationMode_Event__response>:
 800bba0:	6803      	ldr	r3, [r0, #0]
 800bba2:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800bba6:	8013      	strh	r3, [r2, #0]
 800bba8:	4770      	bx	lr
 800bbaa:	bf00      	nop

0800bbac <nereo_interfaces__srv__SetNavigationMode_Event__rosidl_typesupport_introspection_c__assign_function__SetNavigationMode_Event__response>:
 800bbac:	6803      	ldr	r3, [r0, #0]
 800bbae:	8812      	ldrh	r2, [r2, #0]
 800bbb0:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
 800bbb4:	4770      	bx	lr
 800bbb6:	bf00      	nop

0800bbb8 <nereo_interfaces__srv__SetNavigationMode_Request__rosidl_typesupport_introspection_c__SetNavigationMode_Request_init_function>:
 800bbb8:	f008 bc1c 	b.w	80143f4 <nereo_interfaces__srv__SetNavigationMode_Request__init>

0800bbbc <nereo_interfaces__srv__SetNavigationMode_Request__rosidl_typesupport_introspection_c__SetNavigationMode_Request_fini_function>:
 800bbbc:	f008 bc1e 	b.w	80143fc <nereo_interfaces__srv__SetNavigationMode_Request__fini>

0800bbc0 <nereo_interfaces__srv__SetNavigationMode_Response__rosidl_typesupport_introspection_c__SetNavigationMode_Response_init_function>:
 800bbc0:	f008 bc56 	b.w	8014470 <nereo_interfaces__srv__SetNavigationMode_Response__init>

0800bbc4 <nereo_interfaces__srv__SetNavigationMode_Response__rosidl_typesupport_introspection_c__SetNavigationMode_Response_fini_function>:
 800bbc4:	f008 bc58 	b.w	8014478 <nereo_interfaces__srv__SetNavigationMode_Response__fini>

0800bbc8 <nereo_interfaces__srv__SetNavigationMode_Event__rosidl_typesupport_introspection_c__SetNavigationMode_Event_init_function>:
 800bbc8:	f008 bc92 	b.w	80144f0 <nereo_interfaces__srv__SetNavigationMode_Event__init>

0800bbcc <nereo_interfaces__srv__SetNavigationMode_Event__rosidl_typesupport_introspection_c__SetNavigationMode_Event_fini_function>:
 800bbcc:	f008 bcc6 	b.w	801455c <nereo_interfaces__srv__SetNavigationMode_Event__fini>

0800bbd0 <nereo_interfaces__srv__SetNavigationMode_Event__rosidl_typesupport_introspection_c__resize_function__SetNavigationMode_Event__request>:
 800bbd0:	b538      	push	{r3, r4, r5, lr}
 800bbd2:	4604      	mov	r4, r0
 800bbd4:	460d      	mov	r5, r1
 800bbd6:	f008 fc37 	bl	8014448 <nereo_interfaces__srv__SetNavigationMode_Request__Sequence__fini>
 800bbda:	4629      	mov	r1, r5
 800bbdc:	4620      	mov	r0, r4
 800bbde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bbe2:	f008 bc15 	b.w	8014410 <nereo_interfaces__srv__SetNavigationMode_Request__Sequence__init>
 800bbe6:	bf00      	nop

0800bbe8 <nereo_interfaces__srv__SetNavigationMode_Event__rosidl_typesupport_introspection_c__resize_function__SetNavigationMode_Event__response>:
 800bbe8:	b538      	push	{r3, r4, r5, lr}
 800bbea:	4604      	mov	r4, r0
 800bbec:	460d      	mov	r5, r1
 800bbee:	f008 fc6b 	bl	80144c8 <nereo_interfaces__srv__SetNavigationMode_Response__Sequence__fini>
 800bbf2:	4629      	mov	r1, r5
 800bbf4:	4620      	mov	r0, r4
 800bbf6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bbfa:	f008 bc49 	b.w	8014490 <nereo_interfaces__srv__SetNavigationMode_Response__Sequence__init>
 800bbfe:	bf00      	nop

0800bc00 <nereo_interfaces__srv__SetNavigationMode_Event__rosidl_typesupport_introspection_c__get_function__SetNavigationMode_Event__request>:
 800bc00:	6800      	ldr	r0, [r0, #0]
 800bc02:	4408      	add	r0, r1
 800bc04:	4770      	bx	lr
 800bc06:	bf00      	nop

0800bc08 <nereo_interfaces__srv__SetNavigationMode_Event__rosidl_typesupport_introspection_c__get_function__SetNavigationMode_Event__response>:
 800bc08:	6800      	ldr	r0, [r0, #0]
 800bc0a:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 800bc0e:	4770      	bx	lr

0800bc10 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Request>:
 800bc10:	4b04      	ldr	r3, [pc, #16]	@ (800bc24 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Request+0x14>)
 800bc12:	681a      	ldr	r2, [r3, #0]
 800bc14:	b10a      	cbz	r2, 800bc1a <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Request+0xa>
 800bc16:	4803      	ldr	r0, [pc, #12]	@ (800bc24 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Request+0x14>)
 800bc18:	4770      	bx	lr
 800bc1a:	4a03      	ldr	r2, [pc, #12]	@ (800bc28 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Request+0x18>)
 800bc1c:	4801      	ldr	r0, [pc, #4]	@ (800bc24 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Request+0x14>)
 800bc1e:	6812      	ldr	r2, [r2, #0]
 800bc20:	601a      	str	r2, [r3, #0]
 800bc22:	4770      	bx	lr
 800bc24:	200003a0 	.word	0x200003a0
 800bc28:	200005a0 	.word	0x200005a0

0800bc2c <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Response>:
 800bc2c:	4b04      	ldr	r3, [pc, #16]	@ (800bc40 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Response+0x14>)
 800bc2e:	681a      	ldr	r2, [r3, #0]
 800bc30:	b10a      	cbz	r2, 800bc36 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Response+0xa>
 800bc32:	4803      	ldr	r0, [pc, #12]	@ (800bc40 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Response+0x14>)
 800bc34:	4770      	bx	lr
 800bc36:	4a03      	ldr	r2, [pc, #12]	@ (800bc44 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Response+0x18>)
 800bc38:	4801      	ldr	r0, [pc, #4]	@ (800bc40 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Response+0x14>)
 800bc3a:	6812      	ldr	r2, [r2, #0]
 800bc3c:	601a      	str	r2, [r3, #0]
 800bc3e:	4770      	bx	lr
 800bc40:	20000310 	.word	0x20000310
 800bc44:	200005a0 	.word	0x200005a0

0800bc48 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Event>:
 800bc48:	b508      	push	{r3, lr}
 800bc4a:	f002 fb63 	bl	800e314 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 800bc4e:	4913      	ldr	r1, [pc, #76]	@ (800bc9c <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Event+0x54>)
 800bc50:	4b13      	ldr	r3, [pc, #76]	@ (800bca0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Event+0x58>)
 800bc52:	680a      	ldr	r2, [r1, #0]
 800bc54:	60d8      	str	r0, [r3, #12]
 800bc56:	b152      	cbz	r2, 800bc6e <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Event+0x26>
 800bc58:	4a12      	ldr	r2, [pc, #72]	@ (800bca4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Event+0x5c>)
 800bc5a:	6499      	str	r1, [r3, #72]	@ 0x48
 800bc5c:	6811      	ldr	r1, [r2, #0]
 800bc5e:	b171      	cbz	r1, 800bc7e <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Event+0x36>
 800bc60:	4911      	ldr	r1, [pc, #68]	@ (800bca8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Event+0x60>)
 800bc62:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 800bc66:	680b      	ldr	r3, [r1, #0]
 800bc68:	b193      	cbz	r3, 800bc90 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Event+0x48>
 800bc6a:	480f      	ldr	r0, [pc, #60]	@ (800bca8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Event+0x60>)
 800bc6c:	bd08      	pop	{r3, pc}
 800bc6e:	4a0f      	ldr	r2, [pc, #60]	@ (800bcac <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Event+0x64>)
 800bc70:	6499      	str	r1, [r3, #72]	@ 0x48
 800bc72:	6812      	ldr	r2, [r2, #0]
 800bc74:	600a      	str	r2, [r1, #0]
 800bc76:	4a0b      	ldr	r2, [pc, #44]	@ (800bca4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Event+0x5c>)
 800bc78:	6811      	ldr	r1, [r2, #0]
 800bc7a:	2900      	cmp	r1, #0
 800bc7c:	d1f0      	bne.n	800bc60 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Event+0x18>
 800bc7e:	490b      	ldr	r1, [pc, #44]	@ (800bcac <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Event+0x64>)
 800bc80:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 800bc84:	6809      	ldr	r1, [r1, #0]
 800bc86:	6011      	str	r1, [r2, #0]
 800bc88:	4907      	ldr	r1, [pc, #28]	@ (800bca8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Event+0x60>)
 800bc8a:	680b      	ldr	r3, [r1, #0]
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d1ec      	bne.n	800bc6a <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Event+0x22>
 800bc90:	4b06      	ldr	r3, [pc, #24]	@ (800bcac <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Event+0x64>)
 800bc92:	4805      	ldr	r0, [pc, #20]	@ (800bca8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Event+0x60>)
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	600b      	str	r3, [r1, #0]
 800bc98:	bd08      	pop	{r3, pc}
 800bc9a:	bf00      	nop
 800bc9c:	200003a0 	.word	0x200003a0
 800bca0:	2000025c 	.word	0x2000025c
 800bca4:	20000310 	.word	0x20000310
 800bca8:	20000244 	.word	0x20000244
 800bcac:	200005a0 	.word	0x200005a0

0800bcb0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode>:
 800bcb0:	4b25      	ldr	r3, [pc, #148]	@ (800bd48 <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x98>)
 800bcb2:	681a      	ldr	r2, [r3, #0]
 800bcb4:	b510      	push	{r4, lr}
 800bcb6:	b142      	cbz	r2, 800bcca <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x1a>
 800bcb8:	685c      	ldr	r4, [r3, #4]
 800bcba:	68a3      	ldr	r3, [r4, #8]
 800bcbc:	b163      	cbz	r3, 800bcd8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x28>
 800bcbe:	68e3      	ldr	r3, [r4, #12]
 800bcc0:	b193      	cbz	r3, 800bce8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x38>
 800bcc2:	6923      	ldr	r3, [r4, #16]
 800bcc4:	b1c3      	cbz	r3, 800bcf8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x48>
 800bcc6:	4820      	ldr	r0, [pc, #128]	@ (800bd48 <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x98>)
 800bcc8:	bd10      	pop	{r4, pc}
 800bcca:	4a20      	ldr	r2, [pc, #128]	@ (800bd4c <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x9c>)
 800bccc:	685c      	ldr	r4, [r3, #4]
 800bcce:	6812      	ldr	r2, [r2, #0]
 800bcd0:	601a      	str	r2, [r3, #0]
 800bcd2:	68a3      	ldr	r3, [r4, #8]
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d1f2      	bne.n	800bcbe <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0xe>
 800bcd8:	4a1d      	ldr	r2, [pc, #116]	@ (800bd50 <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0xa0>)
 800bcda:	6813      	ldr	r3, [r2, #0]
 800bcdc:	b303      	cbz	r3, 800bd20 <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x70>
 800bcde:	6853      	ldr	r3, [r2, #4]
 800bce0:	60a3      	str	r3, [r4, #8]
 800bce2:	68e3      	ldr	r3, [r4, #12]
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d1ec      	bne.n	800bcc2 <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x12>
 800bce8:	4b1a      	ldr	r3, [pc, #104]	@ (800bd54 <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0xa4>)
 800bcea:	681a      	ldr	r2, [r3, #0]
 800bcec:	b1e2      	cbz	r2, 800bd28 <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x78>
 800bcee:	685b      	ldr	r3, [r3, #4]
 800bcf0:	60e3      	str	r3, [r4, #12]
 800bcf2:	6923      	ldr	r3, [r4, #16]
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d1e6      	bne.n	800bcc6 <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x16>
 800bcf8:	f002 fb0c 	bl	800e314 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 800bcfc:	4a14      	ldr	r2, [pc, #80]	@ (800bd50 <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0xa0>)
 800bcfe:	4916      	ldr	r1, [pc, #88]	@ (800bd58 <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0xa8>)
 800bd00:	6813      	ldr	r3, [r2, #0]
 800bd02:	60c8      	str	r0, [r1, #12]
 800bd04:	b1e3      	cbz	r3, 800bd40 <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x90>
 800bd06:	4b13      	ldr	r3, [pc, #76]	@ (800bd54 <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0xa4>)
 800bd08:	648a      	str	r2, [r1, #72]	@ 0x48
 800bd0a:	681a      	ldr	r2, [r3, #0]
 800bd0c:	b1a2      	cbz	r2, 800bd38 <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x88>
 800bd0e:	4a13      	ldr	r2, [pc, #76]	@ (800bd5c <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0xac>)
 800bd10:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
 800bd14:	6813      	ldr	r3, [r2, #0]
 800bd16:	b15b      	cbz	r3, 800bd30 <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x80>
 800bd18:	6853      	ldr	r3, [r2, #4]
 800bd1a:	480b      	ldr	r0, [pc, #44]	@ (800bd48 <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x98>)
 800bd1c:	6123      	str	r3, [r4, #16]
 800bd1e:	bd10      	pop	{r4, pc}
 800bd20:	4b0a      	ldr	r3, [pc, #40]	@ (800bd4c <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x9c>)
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	6013      	str	r3, [r2, #0]
 800bd26:	e7da      	b.n	800bcde <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x2e>
 800bd28:	4a08      	ldr	r2, [pc, #32]	@ (800bd4c <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x9c>)
 800bd2a:	6812      	ldr	r2, [r2, #0]
 800bd2c:	601a      	str	r2, [r3, #0]
 800bd2e:	e7de      	b.n	800bcee <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x3e>
 800bd30:	4b06      	ldr	r3, [pc, #24]	@ (800bd4c <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x9c>)
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	6013      	str	r3, [r2, #0]
 800bd36:	e7ef      	b.n	800bd18 <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x68>
 800bd38:	4a04      	ldr	r2, [pc, #16]	@ (800bd4c <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x9c>)
 800bd3a:	6812      	ldr	r2, [r2, #0]
 800bd3c:	601a      	str	r2, [r3, #0]
 800bd3e:	e7e6      	b.n	800bd0e <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x5e>
 800bd40:	4b02      	ldr	r3, [pc, #8]	@ (800bd4c <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x9c>)
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	6013      	str	r3, [r2, #0]
 800bd46:	e7de      	b.n	800bd06 <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x56>
 800bd48:	20000204 	.word	0x20000204
 800bd4c:	200005a0 	.word	0x200005a0
 800bd50:	200003a0 	.word	0x200003a0
 800bd54:	20000310 	.word	0x20000310
 800bd58:	2000025c 	.word	0x2000025c
 800bd5c:	20000244 	.word	0x20000244

0800bd60 <nereo_interfaces__msg__ThrusterStatuses__rosidl_typesupport_introspection_c__size_function__ThrusterStatuses__thruster_pwms>:
 800bd60:	2008      	movs	r0, #8
 800bd62:	4770      	bx	lr

0800bd64 <nereo_interfaces__msg__ThrusterStatuses__rosidl_typesupport_introspection_c__get_const_function__ThrusterStatuses__thruster_pwms>:
 800bd64:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 800bd68:	4770      	bx	lr
 800bd6a:	bf00      	nop

0800bd6c <nereo_interfaces__msg__ThrusterStatuses__rosidl_typesupport_introspection_c__fetch_function__ThrusterStatuses__thruster_pwms>:
 800bd6c:	f830 3011 	ldrh.w	r3, [r0, r1, lsl #1]
 800bd70:	8013      	strh	r3, [r2, #0]
 800bd72:	4770      	bx	lr

0800bd74 <nereo_interfaces__msg__ThrusterStatuses__rosidl_typesupport_introspection_c__assign_function__ThrusterStatuses__thruster_pwms>:
 800bd74:	8813      	ldrh	r3, [r2, #0]
 800bd76:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 800bd7a:	4770      	bx	lr

0800bd7c <nereo_interfaces__msg__ThrusterStatuses__rosidl_typesupport_introspection_c__ThrusterStatuses_init_function>:
 800bd7c:	f008 bc9e 	b.w	80146bc <nereo_interfaces__msg__ThrusterStatuses__init>

0800bd80 <nereo_interfaces__msg__ThrusterStatuses__rosidl_typesupport_introspection_c__ThrusterStatuses_fini_function>:
 800bd80:	f008 bca0 	b.w	80146c4 <nereo_interfaces__msg__ThrusterStatuses__fini>

0800bd84 <nereo_interfaces__msg__ThrusterStatuses__rosidl_typesupport_introspection_c__get_function__ThrusterStatuses__thruster_pwms>:
 800bd84:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 800bd88:	4770      	bx	lr
 800bd8a:	bf00      	nop

0800bd8c <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses>:
 800bd8c:	4b04      	ldr	r3, [pc, #16]	@ (800bda0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses+0x14>)
 800bd8e:	681a      	ldr	r2, [r3, #0]
 800bd90:	b10a      	cbz	r2, 800bd96 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses+0xa>
 800bd92:	4803      	ldr	r0, [pc, #12]	@ (800bda0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses+0x14>)
 800bd94:	4770      	bx	lr
 800bd96:	4a03      	ldr	r2, [pc, #12]	@ (800bda4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses+0x18>)
 800bd98:	4801      	ldr	r0, [pc, #4]	@ (800bda0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses+0x14>)
 800bd9a:	6812      	ldr	r2, [r2, #0]
 800bd9c:	601a      	str	r2, [r3, #0]
 800bd9e:	4770      	bx	lr
 800bda0:	200003f4 	.word	0x200003f4
 800bda4:	200005a0 	.word	0x200005a0

0800bda8 <_CommandVelocity__max_serialized_size>:
 800bda8:	b508      	push	{r3, lr}
 800bdaa:	2104      	movs	r1, #4
 800bdac:	2000      	movs	r0, #0
 800bdae:	f005 fa17 	bl	80111e0 <ucdr_alignment>
 800bdb2:	3018      	adds	r0, #24
 800bdb4:	bd08      	pop	{r3, pc}
 800bdb6:	bf00      	nop

0800bdb8 <get_serialized_size_nereo_interfaces__msg__CommandVelocity>:
 800bdb8:	b508      	push	{r3, lr}
 800bdba:	b120      	cbz	r0, 800bdc6 <get_serialized_size_nereo_interfaces__msg__CommandVelocity+0xe>
 800bdbc:	4608      	mov	r0, r1
 800bdbe:	2104      	movs	r1, #4
 800bdc0:	f005 fa0e 	bl	80111e0 <ucdr_alignment>
 800bdc4:	3018      	adds	r0, #24
 800bdc6:	bd08      	pop	{r3, pc}

0800bdc8 <_CommandVelocity__cdr_deserialize>:
 800bdc8:	b111      	cbz	r1, 800bdd0 <_CommandVelocity__cdr_deserialize+0x8>
 800bdca:	2206      	movs	r2, #6
 800bdcc:	f003 bb72 	b.w	800f4b4 <ucdr_deserialize_array_float>
 800bdd0:	4608      	mov	r0, r1
 800bdd2:	4770      	bx	lr

0800bdd4 <_CommandVelocity__cdr_serialize>:
 800bdd4:	460b      	mov	r3, r1
 800bdd6:	4601      	mov	r1, r0
 800bdd8:	b118      	cbz	r0, 800bde2 <_CommandVelocity__cdr_serialize+0xe>
 800bdda:	2206      	movs	r2, #6
 800bddc:	4618      	mov	r0, r3
 800bdde:	f003 bb15 	b.w	800f40c <ucdr_serialize_array_float>
 800bde2:	4770      	bx	lr

0800bde4 <_CommandVelocity__get_serialized_size>:
 800bde4:	b130      	cbz	r0, 800bdf4 <_CommandVelocity__get_serialized_size+0x10>
 800bde6:	b508      	push	{r3, lr}
 800bde8:	2104      	movs	r1, #4
 800bdea:	2000      	movs	r0, #0
 800bdec:	f005 f9f8 	bl	80111e0 <ucdr_alignment>
 800bdf0:	3018      	adds	r0, #24
 800bdf2:	bd08      	pop	{r3, pc}
 800bdf4:	4770      	bx	lr
 800bdf6:	bf00      	nop

0800bdf8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity>:
 800bdf8:	4800      	ldr	r0, [pc, #0]	@ (800bdfc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity+0x4>)
 800bdfa:	4770      	bx	lr
 800bdfc:	20000448 	.word	0x20000448

0800be00 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Request>:
 800be00:	4800      	ldr	r0, [pc, #0]	@ (800be04 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Request+0x4>)
 800be02:	4770      	bx	lr
 800be04:	20000520 	.word	0x20000520

0800be08 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Response>:
 800be08:	4800      	ldr	r0, [pc, #0]	@ (800be0c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Response+0x4>)
 800be0a:	4770      	bx	lr
 800be0c:	200004ec 	.word	0x200004ec

0800be10 <_SetNavigationMode_Request__max_serialized_size>:
 800be10:	b508      	push	{r3, lr}
 800be12:	2101      	movs	r1, #1
 800be14:	2000      	movs	r0, #0
 800be16:	f005 f9e3 	bl	80111e0 <ucdr_alignment>
 800be1a:	3001      	adds	r0, #1
 800be1c:	bd08      	pop	{r3, pc}
 800be1e:	bf00      	nop

0800be20 <_SetNavigationMode_Request__cdr_deserialize>:
 800be20:	b109      	cbz	r1, 800be26 <_SetNavigationMode_Request__cdr_deserialize+0x6>
 800be22:	f003 bc8b 	b.w	800f73c <ucdr_deserialize_uint8_t>
 800be26:	4608      	mov	r0, r1
 800be28:	4770      	bx	lr
 800be2a:	bf00      	nop

0800be2c <_SetNavigationMode_Event__max_serialized_size>:
 800be2c:	b500      	push	{lr}
 800be2e:	b083      	sub	sp, #12
 800be30:	2301      	movs	r3, #1
 800be32:	2100      	movs	r1, #0
 800be34:	f10d 0007 	add.w	r0, sp, #7
 800be38:	f88d 3007 	strb.w	r3, [sp, #7]
 800be3c:	f002 fb14 	bl	800e468 <max_serialized_size_service_msgs__msg__ServiceEventInfo>
 800be40:	b003      	add	sp, #12
 800be42:	f85d fb04 	ldr.w	pc, [sp], #4
 800be46:	bf00      	nop

0800be48 <_SetNavigationMode_Event__cdr_deserialize>:
 800be48:	2900      	cmp	r1, #0
 800be4a:	d042      	beq.n	800bed2 <_SetNavigationMode_Event__cdr_deserialize+0x8a>
 800be4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800be4e:	b083      	sub	sp, #12
 800be50:	4606      	mov	r6, r0
 800be52:	460d      	mov	r5, r1
 800be54:	f002 fb28 	bl	800e4a8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 800be58:	6843      	ldr	r3, [r0, #4]
 800be5a:	4629      	mov	r1, r5
 800be5c:	68db      	ldr	r3, [r3, #12]
 800be5e:	4630      	mov	r0, r6
 800be60:	4798      	blx	r3
 800be62:	a901      	add	r1, sp, #4
 800be64:	4630      	mov	r0, r6
 800be66:	f003 ff99 	bl	800fd9c <ucdr_deserialize_uint32_t>
 800be6a:	9b01      	ldr	r3, [sp, #4]
 800be6c:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 800be6e:	429a      	cmp	r2, r3
 800be70:	d32c      	bcc.n	800becc <_SetNavigationMode_Event__cdr_deserialize+0x84>
 800be72:	62eb      	str	r3, [r5, #44]	@ 0x2c
 800be74:	b173      	cbz	r3, 800be94 <_SetNavigationMode_Event__cdr_deserialize+0x4c>
 800be76:	4f18      	ldr	r7, [pc, #96]	@ (800bed8 <_SetNavigationMode_Event__cdr_deserialize+0x90>)
 800be78:	2400      	movs	r4, #0
 800be7a:	e003      	b.n	800be84 <_SetNavigationMode_Event__cdr_deserialize+0x3c>
 800be7c:	9b01      	ldr	r3, [sp, #4]
 800be7e:	3401      	adds	r4, #1
 800be80:	42a3      	cmp	r3, r4
 800be82:	d907      	bls.n	800be94 <_SetNavigationMode_Event__cdr_deserialize+0x4c>
 800be84:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	4421      	add	r1, r4
 800be8a:	68db      	ldr	r3, [r3, #12]
 800be8c:	4630      	mov	r0, r6
 800be8e:	4798      	blx	r3
 800be90:	2800      	cmp	r0, #0
 800be92:	d1f3      	bne.n	800be7c <_SetNavigationMode_Event__cdr_deserialize+0x34>
 800be94:	a901      	add	r1, sp, #4
 800be96:	4630      	mov	r0, r6
 800be98:	f003 ff80 	bl	800fd9c <ucdr_deserialize_uint32_t>
 800be9c:	9b01      	ldr	r3, [sp, #4]
 800be9e:	6bea      	ldr	r2, [r5, #60]	@ 0x3c
 800bea0:	429a      	cmp	r2, r3
 800bea2:	d313      	bcc.n	800becc <_SetNavigationMode_Event__cdr_deserialize+0x84>
 800bea4:	63ab      	str	r3, [r5, #56]	@ 0x38
 800bea6:	b17b      	cbz	r3, 800bec8 <_SetNavigationMode_Event__cdr_deserialize+0x80>
 800bea8:	4f0c      	ldr	r7, [pc, #48]	@ (800bedc <_SetNavigationMode_Event__cdr_deserialize+0x94>)
 800beaa:	2400      	movs	r4, #0
 800beac:	e002      	b.n	800beb4 <_SetNavigationMode_Event__cdr_deserialize+0x6c>
 800beae:	9b01      	ldr	r3, [sp, #4]
 800beb0:	42a3      	cmp	r3, r4
 800beb2:	d909      	bls.n	800bec8 <_SetNavigationMode_Event__cdr_deserialize+0x80>
 800beb4:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	eb01 0144 	add.w	r1, r1, r4, lsl #1
 800bebc:	68db      	ldr	r3, [r3, #12]
 800bebe:	4630      	mov	r0, r6
 800bec0:	4798      	blx	r3
 800bec2:	3401      	adds	r4, #1
 800bec4:	2800      	cmp	r0, #0
 800bec6:	d1f2      	bne.n	800beae <_SetNavigationMode_Event__cdr_deserialize+0x66>
 800bec8:	b003      	add	sp, #12
 800beca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800becc:	2000      	movs	r0, #0
 800bece:	b003      	add	sp, #12
 800bed0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bed2:	2000      	movs	r0, #0
 800bed4:	4770      	bx	lr
 800bed6:	bf00      	nop
 800bed8:	20000520 	.word	0x20000520
 800bedc:	200004ec 	.word	0x200004ec

0800bee0 <_SetNavigationMode_Event__cdr_serialize>:
 800bee0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bee4:	2800      	cmp	r0, #0
 800bee6:	d038      	beq.n	800bf5a <_SetNavigationMode_Event__cdr_serialize+0x7a>
 800bee8:	460e      	mov	r6, r1
 800beea:	4604      	mov	r4, r0
 800beec:	f002 fadc 	bl	800e4a8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 800bef0:	6843      	ldr	r3, [r0, #4]
 800bef2:	4631      	mov	r1, r6
 800bef4:	689b      	ldr	r3, [r3, #8]
 800bef6:	4620      	mov	r0, r4
 800bef8:	4798      	blx	r3
 800befa:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800befc:	4630      	mov	r0, r6
 800befe:	4639      	mov	r1, r7
 800bf00:	f003 fe22 	bl	800fb48 <ucdr_serialize_uint32_t>
 800bf04:	b180      	cbz	r0, 800bf28 <_SetNavigationMode_Event__cdr_serialize+0x48>
 800bf06:	b17f      	cbz	r7, 800bf28 <_SetNavigationMode_Event__cdr_serialize+0x48>
 800bf08:	f8df 8058 	ldr.w	r8, [pc, #88]	@ 800bf64 <_SetNavigationMode_Event__cdr_serialize+0x84>
 800bf0c:	2500      	movs	r5, #0
 800bf0e:	e002      	b.n	800bf16 <_SetNavigationMode_Event__cdr_serialize+0x36>
 800bf10:	3501      	adds	r5, #1
 800bf12:	42af      	cmp	r7, r5
 800bf14:	d008      	beq.n	800bf28 <_SetNavigationMode_Event__cdr_serialize+0x48>
 800bf16:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800bf18:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800bf1c:	4631      	mov	r1, r6
 800bf1e:	689b      	ldr	r3, [r3, #8]
 800bf20:	4428      	add	r0, r5
 800bf22:	4798      	blx	r3
 800bf24:	2800      	cmp	r0, #0
 800bf26:	d1f3      	bne.n	800bf10 <_SetNavigationMode_Event__cdr_serialize+0x30>
 800bf28:	6ba7      	ldr	r7, [r4, #56]	@ 0x38
 800bf2a:	4630      	mov	r0, r6
 800bf2c:	4639      	mov	r1, r7
 800bf2e:	f003 fe0b 	bl	800fb48 <ucdr_serialize_uint32_t>
 800bf32:	4680      	mov	r8, r0
 800bf34:	b188      	cbz	r0, 800bf5a <_SetNavigationMode_Event__cdr_serialize+0x7a>
 800bf36:	b197      	cbz	r7, 800bf5e <_SetNavigationMode_Event__cdr_serialize+0x7e>
 800bf38:	f8df 902c 	ldr.w	r9, [pc, #44]	@ 800bf68 <_SetNavigationMode_Event__cdr_serialize+0x88>
 800bf3c:	2500      	movs	r5, #0
 800bf3e:	e002      	b.n	800bf46 <_SetNavigationMode_Event__cdr_serialize+0x66>
 800bf40:	3501      	adds	r5, #1
 800bf42:	42af      	cmp	r7, r5
 800bf44:	d00b      	beq.n	800bf5e <_SetNavigationMode_Event__cdr_serialize+0x7e>
 800bf46:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 800bf48:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800bf4c:	4631      	mov	r1, r6
 800bf4e:	689b      	ldr	r3, [r3, #8]
 800bf50:	eb00 0045 	add.w	r0, r0, r5, lsl #1
 800bf54:	4798      	blx	r3
 800bf56:	2800      	cmp	r0, #0
 800bf58:	d1f2      	bne.n	800bf40 <_SetNavigationMode_Event__cdr_serialize+0x60>
 800bf5a:	f04f 0800 	mov.w	r8, #0
 800bf5e:	4640      	mov	r0, r8
 800bf60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf64:	20000520 	.word	0x20000520
 800bf68:	200004ec 	.word	0x200004ec

0800bf6c <get_serialized_size_nereo_interfaces__srv__SetNavigationMode_Request>:
 800bf6c:	b508      	push	{r3, lr}
 800bf6e:	b120      	cbz	r0, 800bf7a <get_serialized_size_nereo_interfaces__srv__SetNavigationMode_Request+0xe>
 800bf70:	4608      	mov	r0, r1
 800bf72:	2101      	movs	r1, #1
 800bf74:	f005 f934 	bl	80111e0 <ucdr_alignment>
 800bf78:	3001      	adds	r0, #1
 800bf7a:	bd08      	pop	{r3, pc}

0800bf7c <get_serialized_size_nereo_interfaces__srv__SetNavigationMode_Response>:
 800bf7c:	b180      	cbz	r0, 800bfa0 <get_serialized_size_nereo_interfaces__srv__SetNavigationMode_Response+0x24>
 800bf7e:	b538      	push	{r3, r4, r5, lr}
 800bf80:	460d      	mov	r5, r1
 800bf82:	4628      	mov	r0, r5
 800bf84:	2101      	movs	r1, #1
 800bf86:	f005 f92b 	bl	80111e0 <ucdr_alignment>
 800bf8a:	2101      	movs	r1, #1
 800bf8c:	186c      	adds	r4, r5, r1
 800bf8e:	4404      	add	r4, r0
 800bf90:	4620      	mov	r0, r4
 800bf92:	f005 f925 	bl	80111e0 <ucdr_alignment>
 800bf96:	f1c5 0501 	rsb	r5, r5, #1
 800bf9a:	4405      	add	r5, r0
 800bf9c:	1928      	adds	r0, r5, r4
 800bf9e:	bd38      	pop	{r3, r4, r5, pc}
 800bfa0:	4770      	bx	lr
 800bfa2:	bf00      	nop

0800bfa4 <_SetNavigationMode_Request__cdr_serialize>:
 800bfa4:	460a      	mov	r2, r1
 800bfa6:	b118      	cbz	r0, 800bfb0 <_SetNavigationMode_Request__cdr_serialize+0xc>
 800bfa8:	7801      	ldrb	r1, [r0, #0]
 800bfaa:	4610      	mov	r0, r2
 800bfac:	f003 bbb0 	b.w	800f710 <ucdr_serialize_uint8_t>
 800bfb0:	4770      	bx	lr
 800bfb2:	bf00      	nop

0800bfb4 <_SetNavigationMode_Response__cdr_deserialize>:
 800bfb4:	b538      	push	{r3, r4, r5, lr}
 800bfb6:	460c      	mov	r4, r1
 800bfb8:	b141      	cbz	r1, 800bfcc <_SetNavigationMode_Response__cdr_deserialize+0x18>
 800bfba:	4605      	mov	r5, r0
 800bfbc:	f003 fb90 	bl	800f6e0 <ucdr_deserialize_bool>
 800bfc0:	1c61      	adds	r1, r4, #1
 800bfc2:	4628      	mov	r0, r5
 800bfc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bfc8:	f003 bbb8 	b.w	800f73c <ucdr_deserialize_uint8_t>
 800bfcc:	4608      	mov	r0, r1
 800bfce:	bd38      	pop	{r3, r4, r5, pc}

0800bfd0 <_SetNavigationMode_Response__cdr_serialize>:
 800bfd0:	b160      	cbz	r0, 800bfec <_SetNavigationMode_Response__cdr_serialize+0x1c>
 800bfd2:	b538      	push	{r3, r4, r5, lr}
 800bfd4:	460d      	mov	r5, r1
 800bfd6:	4604      	mov	r4, r0
 800bfd8:	7801      	ldrb	r1, [r0, #0]
 800bfda:	4628      	mov	r0, r5
 800bfdc:	f003 fb6a 	bl	800f6b4 <ucdr_serialize_bool>
 800bfe0:	7861      	ldrb	r1, [r4, #1]
 800bfe2:	4628      	mov	r0, r5
 800bfe4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bfe8:	f003 bb92 	b.w	800f710 <ucdr_serialize_uint8_t>
 800bfec:	4770      	bx	lr
 800bfee:	bf00      	nop

0800bff0 <get_serialized_size_nereo_interfaces__srv__SetNavigationMode_Event.part.0>:
 800bff0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bff4:	4689      	mov	r9, r1
 800bff6:	4607      	mov	r7, r0
 800bff8:	f002 f9a2 	bl	800e340 <get_serialized_size_service_msgs__msg__ServiceEventInfo>
 800bffc:	eb09 0400 	add.w	r4, r9, r0
 800c000:	2104      	movs	r1, #4
 800c002:	4620      	mov	r0, r4
 800c004:	f8d7 802c 	ldr.w	r8, [r7, #44]	@ 0x2c
 800c008:	f005 f8ea 	bl	80111e0 <ucdr_alignment>
 800c00c:	1d06      	adds	r6, r0, #4
 800c00e:	4426      	add	r6, r4
 800c010:	f1b8 0f00 	cmp.w	r8, #0
 800c014:	d017      	beq.n	800c046 <get_serialized_size_nereo_interfaces__srv__SetNavigationMode_Event.part.0+0x56>
 800c016:	f8df a080 	ldr.w	sl, [pc, #128]	@ 800c098 <get_serialized_size_nereo_interfaces__srv__SetNavigationMode_Event.part.0+0xa8>
 800c01a:	2500      	movs	r5, #0
 800c01c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c01e:	f8da 3004 	ldr.w	r3, [sl, #4]
 800c022:	4631      	mov	r1, r6
 800c024:	695b      	ldr	r3, [r3, #20]
 800c026:	4428      	add	r0, r5
 800c028:	4798      	blx	r3
 800c02a:	2804      	cmp	r0, #4
 800c02c:	4601      	mov	r1, r0
 800c02e:	4604      	mov	r4, r0
 800c030:	bf28      	it	cs
 800c032:	2104      	movcs	r1, #4
 800c034:	4630      	mov	r0, r6
 800c036:	f005 f8d3 	bl	80111e0 <ucdr_alignment>
 800c03a:	3501      	adds	r5, #1
 800c03c:	4434      	add	r4, r6
 800c03e:	45a8      	cmp	r8, r5
 800c040:	eb00 0604 	add.w	r6, r0, r4
 800c044:	d1ea      	bne.n	800c01c <get_serialized_size_nereo_interfaces__srv__SetNavigationMode_Event.part.0+0x2c>
 800c046:	2104      	movs	r1, #4
 800c048:	4630      	mov	r0, r6
 800c04a:	f8d7 8038 	ldr.w	r8, [r7, #56]	@ 0x38
 800c04e:	f005 f8c7 	bl	80111e0 <ucdr_alignment>
 800c052:	1985      	adds	r5, r0, r6
 800c054:	3504      	adds	r5, #4
 800c056:	f1b8 0f00 	cmp.w	r8, #0
 800c05a:	d018      	beq.n	800c08e <get_serialized_size_nereo_interfaces__srv__SetNavigationMode_Event.part.0+0x9e>
 800c05c:	f8df a03c 	ldr.w	sl, [pc, #60]	@ 800c09c <get_serialized_size_nereo_interfaces__srv__SetNavigationMode_Event.part.0+0xac>
 800c060:	2600      	movs	r6, #0
 800c062:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800c064:	f8da 3004 	ldr.w	r3, [sl, #4]
 800c068:	4629      	mov	r1, r5
 800c06a:	695b      	ldr	r3, [r3, #20]
 800c06c:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 800c070:	4798      	blx	r3
 800c072:	2804      	cmp	r0, #4
 800c074:	4601      	mov	r1, r0
 800c076:	4604      	mov	r4, r0
 800c078:	bf28      	it	cs
 800c07a:	2104      	movcs	r1, #4
 800c07c:	4628      	mov	r0, r5
 800c07e:	f005 f8af 	bl	80111e0 <ucdr_alignment>
 800c082:	3601      	adds	r6, #1
 800c084:	442c      	add	r4, r5
 800c086:	45b0      	cmp	r8, r6
 800c088:	eb00 0504 	add.w	r5, r0, r4
 800c08c:	d1e9      	bne.n	800c062 <get_serialized_size_nereo_interfaces__srv__SetNavigationMode_Event.part.0+0x72>
 800c08e:	eba5 0009 	sub.w	r0, r5, r9
 800c092:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c096:	bf00      	nop
 800c098:	20000520 	.word	0x20000520
 800c09c:	200004ec 	.word	0x200004ec

0800c0a0 <get_serialized_size_nereo_interfaces__srv__SetNavigationMode_Event>:
 800c0a0:	b108      	cbz	r0, 800c0a6 <get_serialized_size_nereo_interfaces__srv__SetNavigationMode_Event+0x6>
 800c0a2:	f7ff bfa5 	b.w	800bff0 <get_serialized_size_nereo_interfaces__srv__SetNavigationMode_Event.part.0>
 800c0a6:	4770      	bx	lr

0800c0a8 <_SetNavigationMode_Event__get_serialized_size>:
 800c0a8:	b110      	cbz	r0, 800c0b0 <_SetNavigationMode_Event__get_serialized_size+0x8>
 800c0aa:	2100      	movs	r1, #0
 800c0ac:	f7ff bfa0 	b.w	800bff0 <get_serialized_size_nereo_interfaces__srv__SetNavigationMode_Event.part.0>
 800c0b0:	4770      	bx	lr
 800c0b2:	bf00      	nop

0800c0b4 <_SetNavigationMode_Request__get_serialized_size>:
 800c0b4:	b130      	cbz	r0, 800c0c4 <_SetNavigationMode_Request__get_serialized_size+0x10>
 800c0b6:	b508      	push	{r3, lr}
 800c0b8:	2101      	movs	r1, #1
 800c0ba:	2000      	movs	r0, #0
 800c0bc:	f005 f890 	bl	80111e0 <ucdr_alignment>
 800c0c0:	3001      	adds	r0, #1
 800c0c2:	bd08      	pop	{r3, pc}
 800c0c4:	4770      	bx	lr
 800c0c6:	bf00      	nop

0800c0c8 <_SetNavigationMode_Response__get_serialized_size>:
 800c0c8:	b160      	cbz	r0, 800c0e4 <_SetNavigationMode_Response__get_serialized_size+0x1c>
 800c0ca:	b510      	push	{r4, lr}
 800c0cc:	2101      	movs	r1, #1
 800c0ce:	2000      	movs	r0, #0
 800c0d0:	f005 f886 	bl	80111e0 <ucdr_alignment>
 800c0d4:	1c44      	adds	r4, r0, #1
 800c0d6:	2101      	movs	r1, #1
 800c0d8:	4620      	mov	r0, r4
 800c0da:	f005 f881 	bl	80111e0 <ucdr_alignment>
 800c0de:	3001      	adds	r0, #1
 800c0e0:	4420      	add	r0, r4
 800c0e2:	bd10      	pop	{r4, pc}
 800c0e4:	4770      	bx	lr
 800c0e6:	bf00      	nop

0800c0e8 <_SetNavigationMode_Response__max_serialized_size>:
 800c0e8:	b510      	push	{r4, lr}
 800c0ea:	2101      	movs	r1, #1
 800c0ec:	2000      	movs	r0, #0
 800c0ee:	f005 f877 	bl	80111e0 <ucdr_alignment>
 800c0f2:	1c44      	adds	r4, r0, #1
 800c0f4:	2101      	movs	r1, #1
 800c0f6:	4620      	mov	r0, r4
 800c0f8:	f005 f872 	bl	80111e0 <ucdr_alignment>
 800c0fc:	3001      	adds	r0, #1
 800c0fe:	4420      	add	r0, r4
 800c100:	bd10      	pop	{r4, pc}
 800c102:	bf00      	nop

0800c104 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Event>:
 800c104:	4800      	ldr	r0, [pc, #0]	@ (800c108 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Event+0x4>)
 800c106:	4770      	bx	lr
 800c108:	200004b8 	.word	0x200004b8

0800c10c <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode>:
 800c10c:	4800      	ldr	r0, [pc, #0]	@ (800c110 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x4>)
 800c10e:	4770      	bx	lr
 800c110:	2000047c 	.word	0x2000047c

0800c114 <_ThrusterStatuses__max_serialized_size>:
 800c114:	b508      	push	{r3, lr}
 800c116:	2102      	movs	r1, #2
 800c118:	2000      	movs	r0, #0
 800c11a:	f005 f861 	bl	80111e0 <ucdr_alignment>
 800c11e:	3010      	adds	r0, #16
 800c120:	bd08      	pop	{r3, pc}
 800c122:	bf00      	nop

0800c124 <get_serialized_size_nereo_interfaces__msg__ThrusterStatuses>:
 800c124:	b508      	push	{r3, lr}
 800c126:	b120      	cbz	r0, 800c132 <get_serialized_size_nereo_interfaces__msg__ThrusterStatuses+0xe>
 800c128:	4608      	mov	r0, r1
 800c12a:	2102      	movs	r1, #2
 800c12c:	f005 f858 	bl	80111e0 <ucdr_alignment>
 800c130:	3010      	adds	r0, #16
 800c132:	bd08      	pop	{r3, pc}

0800c134 <_ThrusterStatuses__cdr_deserialize>:
 800c134:	b111      	cbz	r1, 800c13c <_ThrusterStatuses__cdr_deserialize+0x8>
 800c136:	2208      	movs	r2, #8
 800c138:	f003 b912 	b.w	800f360 <ucdr_deserialize_array_uint16_t>
 800c13c:	4608      	mov	r0, r1
 800c13e:	4770      	bx	lr

0800c140 <_ThrusterStatuses__cdr_serialize>:
 800c140:	460b      	mov	r3, r1
 800c142:	4601      	mov	r1, r0
 800c144:	b118      	cbz	r0, 800c14e <_ThrusterStatuses__cdr_serialize+0xe>
 800c146:	2208      	movs	r2, #8
 800c148:	4618      	mov	r0, r3
 800c14a:	f003 b8b3 	b.w	800f2b4 <ucdr_serialize_array_uint16_t>
 800c14e:	4770      	bx	lr

0800c150 <_ThrusterStatuses__get_serialized_size>:
 800c150:	b130      	cbz	r0, 800c160 <_ThrusterStatuses__get_serialized_size+0x10>
 800c152:	b508      	push	{r3, lr}
 800c154:	2102      	movs	r1, #2
 800c156:	2000      	movs	r0, #0
 800c158:	f005 f842 	bl	80111e0 <ucdr_alignment>
 800c15c:	3010      	adds	r0, #16
 800c15e:	bd08      	pop	{r3, pc}
 800c160:	4770      	bx	lr
 800c162:	bf00      	nop

0800c164 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses>:
 800c164:	4800      	ldr	r0, [pc, #0]	@ (800c168 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses+0x4>)
 800c166:	4770      	bx	lr
 800c168:	20000554 	.word	0x20000554

0800c16c <rcl_get_zero_initialized_publisher>:
 800c16c:	4b01      	ldr	r3, [pc, #4]	@ (800c174 <rcl_get_zero_initialized_publisher+0x8>)
 800c16e:	6818      	ldr	r0, [r3, #0]
 800c170:	4770      	bx	lr
 800c172:	bf00      	nop
 800c174:	0801fb8c 	.word	0x0801fb8c

0800c178 <rcl_publisher_init>:
 800c178:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c17c:	b088      	sub	sp, #32
 800c17e:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800c180:	2d00      	cmp	r5, #0
 800c182:	d06a      	beq.n	800c25a <rcl_publisher_init+0xe2>
 800c184:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 800c188:	4604      	mov	r4, r0
 800c18a:	4648      	mov	r0, r9
 800c18c:	460e      	mov	r6, r1
 800c18e:	4690      	mov	r8, r2
 800c190:	461f      	mov	r7, r3
 800c192:	f001 f863 	bl	800d25c <rcutils_allocator_is_valid>
 800c196:	2800      	cmp	r0, #0
 800c198:	d05f      	beq.n	800c25a <rcl_publisher_init+0xe2>
 800c19a:	2c00      	cmp	r4, #0
 800c19c:	d05d      	beq.n	800c25a <rcl_publisher_init+0xe2>
 800c19e:	f8d4 a000 	ldr.w	sl, [r4]
 800c1a2:	f1ba 0f00 	cmp.w	sl, #0
 800c1a6:	d004      	beq.n	800c1b2 <rcl_publisher_init+0x3a>
 800c1a8:	2764      	movs	r7, #100	@ 0x64
 800c1aa:	4638      	mov	r0, r7
 800c1ac:	b008      	add	sp, #32
 800c1ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1b2:	4630      	mov	r0, r6
 800c1b4:	f008 ff5e 	bl	8015074 <rcl_node_is_valid>
 800c1b8:	2800      	cmp	r0, #0
 800c1ba:	d053      	beq.n	800c264 <rcl_publisher_init+0xec>
 800c1bc:	f1b8 0f00 	cmp.w	r8, #0
 800c1c0:	d04b      	beq.n	800c25a <rcl_publisher_init+0xe2>
 800c1c2:	2f00      	cmp	r7, #0
 800c1c4:	d049      	beq.n	800c25a <rcl_publisher_init+0xe2>
 800c1c6:	e9cd aa03 	strd	sl, sl, [sp, #12]
 800c1ca:	aa07      	add	r2, sp, #28
 800c1cc:	9205      	str	r2, [sp, #20]
 800c1ce:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 800c1d2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c1d6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800c1da:	f8cd a01c 	str.w	sl, [sp, #28]
 800c1de:	4639      	mov	r1, r7
 800c1e0:	e899 000c 	ldmia.w	r9, {r2, r3}
 800c1e4:	4630      	mov	r0, r6
 800c1e6:	f008 ffd5 	bl	8015194 <rcl_node_resolve_name>
 800c1ea:	4607      	mov	r7, r0
 800c1ec:	2800      	cmp	r0, #0
 800c1ee:	d150      	bne.n	800c292 <rcl_publisher_init+0x11a>
 800c1f0:	e9d5 3217 	ldrd	r3, r2, [r5, #92]	@ 0x5c
 800c1f4:	21c8      	movs	r1, #200	@ 0xc8
 800c1f6:	2001      	movs	r0, #1
 800c1f8:	4798      	blx	r3
 800c1fa:	6020      	str	r0, [r4, #0]
 800c1fc:	2800      	cmp	r0, #0
 800c1fe:	d04e      	beq.n	800c29e <rcl_publisher_init+0x126>
 800c200:	4630      	mov	r0, r6
 800c202:	f008 ff59 	bl	80150b8 <rcl_node_get_rmw_handle>
 800c206:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800c20a:	9300      	str	r3, [sp, #0]
 800c20c:	9a07      	ldr	r2, [sp, #28]
 800c20e:	6827      	ldr	r7, [r4, #0]
 800c210:	462b      	mov	r3, r5
 800c212:	4641      	mov	r1, r8
 800c214:	f001 f936 	bl	800d484 <rmw_create_publisher>
 800c218:	6823      	ldr	r3, [r4, #0]
 800c21a:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
 800c21e:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800c222:	b370      	cbz	r0, 800c282 <rcl_publisher_init+0x10a>
 800c224:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 800c228:	f001 fa08 	bl	800d63c <rmw_publisher_get_actual_qos>
 800c22c:	6823      	ldr	r3, [r4, #0]
 800c22e:	4607      	mov	r7, r0
 800c230:	b9d0      	cbnz	r0, 800c268 <rcl_publisher_init+0xf0>
 800c232:	f895 2048 	ldrb.w	r2, [r5, #72]	@ 0x48
 800c236:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800c23a:	4629      	mov	r1, r5
 800c23c:	2270      	movs	r2, #112	@ 0x70
 800c23e:	4618      	mov	r0, r3
 800c240:	f011 f9bb 	bl	801d5ba <memcpy>
 800c244:	6832      	ldr	r2, [r6, #0]
 800c246:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 800c24a:	9807      	ldr	r0, [sp, #28]
 800c24c:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 800c24e:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800c250:	4798      	blx	r3
 800c252:	4638      	mov	r0, r7
 800c254:	b008      	add	sp, #32
 800c256:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c25a:	270b      	movs	r7, #11
 800c25c:	4638      	mov	r0, r7
 800c25e:	b008      	add	sp, #32
 800c260:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c264:	27c8      	movs	r7, #200	@ 0xc8
 800c266:	e7a0      	b.n	800c1aa <rcl_publisher_init+0x32>
 800c268:	b18b      	cbz	r3, 800c28e <rcl_publisher_init+0x116>
 800c26a:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800c26e:	b142      	cbz	r2, 800c282 <rcl_publisher_init+0x10a>
 800c270:	4630      	mov	r0, r6
 800c272:	f008 ff21 	bl	80150b8 <rcl_node_get_rmw_handle>
 800c276:	6823      	ldr	r3, [r4, #0]
 800c278:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 800c27c:	f001 f9ec 	bl	800d658 <rmw_destroy_publisher>
 800c280:	6823      	ldr	r3, [r4, #0]
 800c282:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 800c284:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800c286:	4618      	mov	r0, r3
 800c288:	4790      	blx	r2
 800c28a:	2300      	movs	r3, #0
 800c28c:	6023      	str	r3, [r4, #0]
 800c28e:	2701      	movs	r7, #1
 800c290:	e7db      	b.n	800c24a <rcl_publisher_init+0xd2>
 800c292:	2867      	cmp	r0, #103	@ 0x67
 800c294:	d0d9      	beq.n	800c24a <rcl_publisher_init+0xd2>
 800c296:	2869      	cmp	r0, #105	@ 0x69
 800c298:	d003      	beq.n	800c2a2 <rcl_publisher_init+0x12a>
 800c29a:	280a      	cmp	r0, #10
 800c29c:	d1f7      	bne.n	800c28e <rcl_publisher_init+0x116>
 800c29e:	270a      	movs	r7, #10
 800c2a0:	e7d3      	b.n	800c24a <rcl_publisher_init+0xd2>
 800c2a2:	2767      	movs	r7, #103	@ 0x67
 800c2a4:	e7d1      	b.n	800c24a <rcl_publisher_init+0xd2>
 800c2a6:	bf00      	nop

0800c2a8 <rcl_publisher_get_default_options>:
 800c2a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c2aa:	4919      	ldr	r1, [pc, #100]	@ (800c310 <rcl_publisher_get_default_options+0x68>)
 800c2ac:	4c19      	ldr	r4, [pc, #100]	@ (800c314 <rcl_publisher_get_default_options+0x6c>)
 800c2ae:	b08b      	sub	sp, #44	@ 0x2c
 800c2b0:	2250      	movs	r2, #80	@ 0x50
 800c2b2:	4605      	mov	r5, r0
 800c2b4:	4818      	ldr	r0, [pc, #96]	@ (800c318 <rcl_publisher_get_default_options+0x70>)
 800c2b6:	f011 f980 	bl	801d5ba <memcpy>
 800c2ba:	a802      	add	r0, sp, #8
 800c2bc:	f000 ffa2 	bl	800d204 <rcutils_get_default_allocator>
 800c2c0:	f10d 0c08 	add.w	ip, sp, #8
 800c2c4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c2c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c2ca:	466f      	mov	r7, sp
 800c2cc:	f8dc 3000 	ldr.w	r3, [ip]
 800c2d0:	f844 3b04 	str.w	r3, [r4], #4
 800c2d4:	4638      	mov	r0, r7
 800c2d6:	f001 f857 	bl	800d388 <rmw_get_default_publisher_options>
 800c2da:	e897 0003 	ldmia.w	r7, {r0, r1}
 800c2de:	2600      	movs	r6, #0
 800c2e0:	e884 0003 	stmia.w	r4, {r0, r1}
 800c2e4:	f10d 0027 	add.w	r0, sp, #39	@ 0x27
 800c2e8:	f88d 6027 	strb.w	r6, [sp, #39]	@ 0x27
 800c2ec:	f008 feea 	bl	80150c4 <rcl_get_disable_loaned_message>
 800c2f0:	b958      	cbnz	r0, 800c30a <rcl_publisher_get_default_options+0x62>
 800c2f2:	f89d 6027 	ldrb.w	r6, [sp, #39]	@ 0x27
 800c2f6:	4908      	ldr	r1, [pc, #32]	@ (800c318 <rcl_publisher_get_default_options+0x70>)
 800c2f8:	2270      	movs	r2, #112	@ 0x70
 800c2fa:	4628      	mov	r0, r5
 800c2fc:	f881 606c 	strb.w	r6, [r1, #108]	@ 0x6c
 800c300:	f011 f95b 	bl	801d5ba <memcpy>
 800c304:	4628      	mov	r0, r5
 800c306:	b00b      	add	sp, #44	@ 0x2c
 800c308:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c30a:	f000 ffcd 	bl	800d2a8 <rcutils_reset_error>
 800c30e:	e7f2      	b.n	800c2f6 <rcl_publisher_get_default_options+0x4e>
 800c310:	0801fb90 	.word	0x0801fb90
 800c314:	20013690 	.word	0x20013690
 800c318:	20013640 	.word	0x20013640

0800c31c <rcl_publish>:
 800c31c:	b1f8      	cbz	r0, 800c35e <rcl_publish+0x42>
 800c31e:	6803      	ldr	r3, [r0, #0]
 800c320:	b570      	push	{r4, r5, r6, lr}
 800c322:	4604      	mov	r4, r0
 800c324:	b1b3      	cbz	r3, 800c354 <rcl_publish+0x38>
 800c326:	4616      	mov	r6, r2
 800c328:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800c32c:	b192      	cbz	r2, 800c354 <rcl_publish+0x38>
 800c32e:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800c332:	460d      	mov	r5, r1
 800c334:	f008 fab6 	bl	80148a4 <rcl_context_is_valid>
 800c338:	b160      	cbz	r0, 800c354 <rcl_publish+0x38>
 800c33a:	6823      	ldr	r3, [r4, #0]
 800c33c:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800c340:	b140      	cbz	r0, 800c354 <rcl_publish+0x38>
 800c342:	b155      	cbz	r5, 800c35a <rcl_publish+0x3e>
 800c344:	4632      	mov	r2, r6
 800c346:	4629      	mov	r1, r5
 800c348:	f001 f83c 	bl	800d3c4 <rmw_publish>
 800c34c:	3800      	subs	r0, #0
 800c34e:	bf18      	it	ne
 800c350:	2001      	movne	r0, #1
 800c352:	bd70      	pop	{r4, r5, r6, pc}
 800c354:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800c358:	bd70      	pop	{r4, r5, r6, pc}
 800c35a:	200b      	movs	r0, #11
 800c35c:	bd70      	pop	{r4, r5, r6, pc}
 800c35e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800c362:	4770      	bx	lr

0800c364 <rcl_publisher_is_valid>:
 800c364:	b1a0      	cbz	r0, 800c390 <rcl_publisher_is_valid+0x2c>
 800c366:	6803      	ldr	r3, [r0, #0]
 800c368:	b510      	push	{r4, lr}
 800c36a:	4604      	mov	r4, r0
 800c36c:	b173      	cbz	r3, 800c38c <rcl_publisher_is_valid+0x28>
 800c36e:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800c372:	b15a      	cbz	r2, 800c38c <rcl_publisher_is_valid+0x28>
 800c374:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800c378:	f008 fa94 	bl	80148a4 <rcl_context_is_valid>
 800c37c:	b130      	cbz	r0, 800c38c <rcl_publisher_is_valid+0x28>
 800c37e:	6823      	ldr	r3, [r4, #0]
 800c380:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800c384:	3800      	subs	r0, #0
 800c386:	bf18      	it	ne
 800c388:	2001      	movne	r0, #1
 800c38a:	bd10      	pop	{r4, pc}
 800c38c:	2000      	movs	r0, #0
 800c38e:	bd10      	pop	{r4, pc}
 800c390:	2000      	movs	r0, #0
 800c392:	4770      	bx	lr

0800c394 <rcl_publisher_is_valid_except_context>:
 800c394:	b130      	cbz	r0, 800c3a4 <rcl_publisher_is_valid_except_context+0x10>
 800c396:	6800      	ldr	r0, [r0, #0]
 800c398:	b120      	cbz	r0, 800c3a4 <rcl_publisher_is_valid_except_context+0x10>
 800c39a:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 800c39e:	3800      	subs	r0, #0
 800c3a0:	bf18      	it	ne
 800c3a2:	2001      	movne	r0, #1
 800c3a4:	4770      	bx	lr
 800c3a6:	bf00      	nop

0800c3a8 <_rclc_check_for_new_data>:
 800c3a8:	2800      	cmp	r0, #0
 800c3aa:	d046      	beq.n	800c43a <_rclc_check_for_new_data+0x92>
 800c3ac:	b510      	push	{r4, lr}
 800c3ae:	7802      	ldrb	r2, [r0, #0]
 800c3b0:	b084      	sub	sp, #16
 800c3b2:	4603      	mov	r3, r0
 800c3b4:	2a0a      	cmp	r2, #10
 800c3b6:	d842      	bhi.n	800c43e <_rclc_check_for_new_data+0x96>
 800c3b8:	e8df f002 	tbb	[pc, r2]
 800c3bc:	14181212 	.word	0x14181212
 800c3c0:	06060614 	.word	0x06060614
 800c3c4:	2e1a      	.short	0x2e1a
 800c3c6:	16          	.byte	0x16
 800c3c7:	00          	.byte	0x00
 800c3c8:	6a0a      	ldr	r2, [r1, #32]
 800c3ca:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800c3cc:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800c3d0:	3a00      	subs	r2, #0
 800c3d2:	bf18      	it	ne
 800c3d4:	2201      	movne	r2, #1
 800c3d6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800c3da:	2000      	movs	r0, #0
 800c3dc:	b004      	add	sp, #16
 800c3de:	bd10      	pop	{r4, pc}
 800c3e0:	680a      	ldr	r2, [r1, #0]
 800c3e2:	e7f2      	b.n	800c3ca <_rclc_check_for_new_data+0x22>
 800c3e4:	698a      	ldr	r2, [r1, #24]
 800c3e6:	e7f0      	b.n	800c3ca <_rclc_check_for_new_data+0x22>
 800c3e8:	688a      	ldr	r2, [r1, #8]
 800c3ea:	e7ee      	b.n	800c3ca <_rclc_check_for_new_data+0x22>
 800c3ec:	690a      	ldr	r2, [r1, #16]
 800c3ee:	e7ec      	b.n	800c3ca <_rclc_check_for_new_data+0x22>
 800c3f0:	685c      	ldr	r4, [r3, #4]
 800c3f2:	4608      	mov	r0, r1
 800c3f4:	f104 0244 	add.w	r2, r4, #68	@ 0x44
 800c3f8:	f104 0143 	add.w	r1, r4, #67	@ 0x43
 800c3fc:	f104 0342 	add.w	r3, r4, #66	@ 0x42
 800c400:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800c404:	9300      	str	r3, [sp, #0]
 800c406:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 800c40a:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 800c40e:	f104 0110 	add.w	r1, r4, #16
 800c412:	f00a fc21 	bl	8016c58 <rcl_action_client_wait_set_get_entities_ready>
 800c416:	e7e1      	b.n	800c3dc <_rclc_check_for_new_data+0x34>
 800c418:	685c      	ldr	r4, [r3, #4]
 800c41a:	f104 0223 	add.w	r2, r4, #35	@ 0x23
 800c41e:	f104 0322 	add.w	r3, r4, #34	@ 0x22
 800c422:	e9cd 3200 	strd	r3, r2, [sp]
 800c426:	4608      	mov	r0, r1
 800c428:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 800c42c:	f104 0220 	add.w	r2, r4, #32
 800c430:	f104 0110 	add.w	r1, r4, #16
 800c434:	f00a fe16 	bl	8017064 <rcl_action_server_wait_set_get_entities_ready>
 800c438:	e7d0      	b.n	800c3dc <_rclc_check_for_new_data+0x34>
 800c43a:	200b      	movs	r0, #11
 800c43c:	4770      	bx	lr
 800c43e:	2001      	movs	r0, #1
 800c440:	e7cc      	b.n	800c3dc <_rclc_check_for_new_data+0x34>
 800c442:	bf00      	nop

0800c444 <_rclc_take_new_data>:
 800c444:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c446:	b099      	sub	sp, #100	@ 0x64
 800c448:	2800      	cmp	r0, #0
 800c44a:	f000 8082 	beq.w	800c552 <_rclc_take_new_data+0x10e>
 800c44e:	7803      	ldrb	r3, [r0, #0]
 800c450:	4604      	mov	r4, r0
 800c452:	2b0a      	cmp	r3, #10
 800c454:	f200 815d 	bhi.w	800c712 <_rclc_take_new_data+0x2ce>
 800c458:	e8df f003 	tbb	[pc, r3]
 800c45c:	31531f1f 	.word	0x31531f1f
 800c460:	06060631 	.word	0x06060631
 800c464:	4555      	.short	0x4555
 800c466:	53          	.byte	0x53
 800c467:	00          	.byte	0x00
 800c468:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800c46a:	6a0b      	ldr	r3, [r1, #32]
 800c46c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c470:	2b00      	cmp	r3, #0
 800c472:	d046      	beq.n	800c502 <_rclc_take_new_data+0xbe>
 800c474:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800c478:	f104 0110 	add.w	r1, r4, #16
 800c47c:	f009 f806 	bl	801548c <rcl_take_request>
 800c480:	4605      	mov	r5, r0
 800c482:	2800      	cmp	r0, #0
 800c484:	d03d      	beq.n	800c502 <_rclc_take_new_data+0xbe>
 800c486:	f240 2359 	movw	r3, #601	@ 0x259
 800c48a:	4298      	cmp	r0, r3
 800c48c:	d128      	bne.n	800c4e0 <_rclc_take_new_data+0x9c>
 800c48e:	2300      	movs	r3, #0
 800c490:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 800c494:	4628      	mov	r0, r5
 800c496:	b019      	add	sp, #100	@ 0x64
 800c498:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c49a:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800c49c:	680b      	ldr	r3, [r1, #0]
 800c49e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c4a2:	b373      	cbz	r3, 800c502 <_rclc_take_new_data+0xbe>
 800c4a4:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800c4a8:	2300      	movs	r3, #0
 800c4aa:	aa0a      	add	r2, sp, #40	@ 0x28
 800c4ac:	f009 f9dc 	bl	8015868 <rcl_take>
 800c4b0:	4605      	mov	r5, r0
 800c4b2:	b330      	cbz	r0, 800c502 <_rclc_take_new_data+0xbe>
 800c4b4:	f240 1391 	movw	r3, #401	@ 0x191
 800c4b8:	4298      	cmp	r0, r3
 800c4ba:	d0e8      	beq.n	800c48e <_rclc_take_new_data+0x4a>
 800c4bc:	e010      	b.n	800c4e0 <_rclc_take_new_data+0x9c>
 800c4be:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800c4c0:	698b      	ldr	r3, [r1, #24]
 800c4c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c4c6:	b1e3      	cbz	r3, 800c502 <_rclc_take_new_data+0xbe>
 800c4c8:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800c4cc:	f104 0110 	add.w	r1, r4, #16
 800c4d0:	f008 f952 	bl	8014778 <rcl_take_response>
 800c4d4:	4605      	mov	r5, r0
 800c4d6:	b1a0      	cbz	r0, 800c502 <_rclc_take_new_data+0xbe>
 800c4d8:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800c4dc:	4298      	cmp	r0, r3
 800c4de:	d0d9      	beq.n	800c494 <_rclc_take_new_data+0x50>
 800c4e0:	f000 fee2 	bl	800d2a8 <rcutils_reset_error>
 800c4e4:	e7d6      	b.n	800c494 <_rclc_take_new_data+0x50>
 800c4e6:	6840      	ldr	r0, [r0, #4]
 800c4e8:	f890 3020 	ldrb.w	r3, [r0, #32]
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d15f      	bne.n	800c5b0 <_rclc_take_new_data+0x16c>
 800c4f0:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d179      	bne.n	800c5ec <_rclc_take_new_data+0x1a8>
 800c4f8:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	f040 8096 	bne.w	800c62e <_rclc_take_new_data+0x1ea>
 800c502:	2500      	movs	r5, #0
 800c504:	e7c6      	b.n	800c494 <_rclc_take_new_data+0x50>
 800c506:	6840      	ldr	r0, [r0, #4]
 800c508:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d138      	bne.n	800c582 <_rclc_take_new_data+0x13e>
 800c510:	69c3      	ldr	r3, [r0, #28]
 800c512:	b113      	cbz	r3, 800c51a <_rclc_take_new_data+0xd6>
 800c514:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800c518:	b9fb      	cbnz	r3, 800c55a <_rclc_take_new_data+0x116>
 800c51a:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800c51e:	2b00      	cmp	r3, #0
 800c520:	f040 80a8 	bne.w	800c674 <_rclc_take_new_data+0x230>
 800c524:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d0ea      	beq.n	800c502 <_rclc_take_new_data+0xbe>
 800c52c:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800c52e:	a90a      	add	r1, sp, #40	@ 0x28
 800c530:	3010      	adds	r0, #16
 800c532:	f00a fa75 	bl	8016a20 <rcl_action_take_result_response>
 800c536:	4605      	mov	r5, r0
 800c538:	2800      	cmp	r0, #0
 800c53a:	d1d1      	bne.n	800c4e0 <_rclc_take_new_data+0x9c>
 800c53c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c540:	6860      	ldr	r0, [r4, #4]
 800c542:	f00a feb5 	bl	80172b0 <rclc_action_find_handle_by_result_request_sequence_number>
 800c546:	2800      	cmp	r0, #0
 800c548:	d0db      	beq.n	800c502 <_rclc_take_new_data+0xbe>
 800c54a:	2301      	movs	r3, #1
 800c54c:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 800c550:	e7d7      	b.n	800c502 <_rclc_take_new_data+0xbe>
 800c552:	250b      	movs	r5, #11
 800c554:	4628      	mov	r0, r5
 800c556:	b019      	add	sp, #100	@ 0x64
 800c558:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c55a:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800c55c:	3010      	adds	r0, #16
 800c55e:	f00a fadb 	bl	8016b18 <rcl_action_take_feedback>
 800c562:	4605      	mov	r5, r0
 800c564:	2800      	cmp	r0, #0
 800c566:	d1bb      	bne.n	800c4e0 <_rclc_take_new_data+0x9c>
 800c568:	6860      	ldr	r0, [r4, #4]
 800c56a:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800c56c:	f00a fe5e 	bl	801722c <rclc_action_find_goal_handle_by_uuid>
 800c570:	4603      	mov	r3, r0
 800c572:	2800      	cmp	r0, #0
 800c574:	f000 80c4 	beq.w	800c700 <_rclc_take_new_data+0x2bc>
 800c578:	2201      	movs	r2, #1
 800c57a:	6860      	ldr	r0, [r4, #4]
 800c57c:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 800c580:	e7cb      	b.n	800c51a <_rclc_take_new_data+0xd6>
 800c582:	aa04      	add	r2, sp, #16
 800c584:	a90a      	add	r1, sp, #40	@ 0x28
 800c586:	3010      	adds	r0, #16
 800c588:	f00a f9da 	bl	8016940 <rcl_action_take_goal_response>
 800c58c:	4605      	mov	r5, r0
 800c58e:	2800      	cmp	r0, #0
 800c590:	d1a6      	bne.n	800c4e0 <_rclc_take_new_data+0x9c>
 800c592:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c596:	6860      	ldr	r0, [r4, #4]
 800c598:	f00a fe78 	bl	801728c <rclc_action_find_handle_by_goal_request_sequence_number>
 800c59c:	b130      	cbz	r0, 800c5ac <_rclc_take_new_data+0x168>
 800c59e:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800c5a2:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800c5a6:	2201      	movs	r2, #1
 800c5a8:	f880 2020 	strb.w	r2, [r0, #32]
 800c5ac:	6860      	ldr	r0, [r4, #4]
 800c5ae:	e7af      	b.n	800c510 <_rclc_take_new_data+0xcc>
 800c5b0:	f00a fe16 	bl	80171e0 <rclc_action_take_goal_handle>
 800c5b4:	4606      	mov	r6, r0
 800c5b6:	6860      	ldr	r0, [r4, #4]
 800c5b8:	2e00      	cmp	r6, #0
 800c5ba:	d099      	beq.n	800c4f0 <_rclc_take_new_data+0xac>
 800c5bc:	6070      	str	r0, [r6, #4]
 800c5be:	69f2      	ldr	r2, [r6, #28]
 800c5c0:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 800c5c4:	3010      	adds	r0, #16
 800c5c6:	f00a fbd7 	bl	8016d78 <rcl_action_take_goal_request>
 800c5ca:	4605      	mov	r5, r0
 800c5cc:	2800      	cmp	r0, #0
 800c5ce:	f040 8099 	bne.w	800c704 <_rclc_take_new_data+0x2c0>
 800c5d2:	69f7      	ldr	r7, [r6, #28]
 800c5d4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800c5d6:	7235      	strb	r5, [r6, #8]
 800c5d8:	f8c6 0009 	str.w	r0, [r6, #9]
 800c5dc:	f8c6 100d 	str.w	r1, [r6, #13]
 800c5e0:	6860      	ldr	r0, [r4, #4]
 800c5e2:	f8c6 2011 	str.w	r2, [r6, #17]
 800c5e6:	f8c6 3015 	str.w	r3, [r6, #21]
 800c5ea:	e781      	b.n	800c4f0 <_rclc_take_new_data+0xac>
 800c5ec:	aa04      	add	r2, sp, #16
 800c5ee:	3010      	adds	r0, #16
 800c5f0:	a90a      	add	r1, sp, #40	@ 0x28
 800c5f2:	f00a fc31 	bl	8016e58 <rcl_action_take_result_request>
 800c5f6:	4605      	mov	r5, r0
 800c5f8:	2800      	cmp	r0, #0
 800c5fa:	f47f af71 	bne.w	800c4e0 <_rclc_take_new_data+0x9c>
 800c5fe:	6860      	ldr	r0, [r4, #4]
 800c600:	a904      	add	r1, sp, #16
 800c602:	f00a fe13 	bl	801722c <rclc_action_find_goal_handle_by_uuid>
 800c606:	4607      	mov	r7, r0
 800c608:	b160      	cbz	r0, 800c624 <_rclc_take_new_data+0x1e0>
 800c60a:	ad0a      	add	r5, sp, #40	@ 0x28
 800c60c:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 800c610:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c612:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800c614:	e895 0003 	ldmia.w	r5, {r0, r1}
 800c618:	f04f 0c02 	mov.w	ip, #2
 800c61c:	e886 0003 	stmia.w	r6, {r0, r1}
 800c620:	f887 c008 	strb.w	ip, [r7, #8]
 800c624:	6860      	ldr	r0, [r4, #4]
 800c626:	2300      	movs	r3, #0
 800c628:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 800c62c:	e764      	b.n	800c4f8 <_rclc_take_new_data+0xb4>
 800c62e:	ae04      	add	r6, sp, #16
 800c630:	aa0a      	add	r2, sp, #40	@ 0x28
 800c632:	3010      	adds	r0, #16
 800c634:	4631      	mov	r1, r6
 800c636:	f00a fc4d 	bl	8016ed4 <rcl_action_take_cancel_request>
 800c63a:	4605      	mov	r5, r0
 800c63c:	2800      	cmp	r0, #0
 800c63e:	f47f af4f 	bne.w	800c4e0 <_rclc_take_new_data+0x9c>
 800c642:	6860      	ldr	r0, [r4, #4]
 800c644:	a90a      	add	r1, sp, #40	@ 0x28
 800c646:	f00a fdf1 	bl	801722c <rclc_action_find_goal_handle_by_uuid>
 800c64a:	4605      	mov	r5, r0
 800c64c:	2800      	cmp	r0, #0
 800c64e:	d04c      	beq.n	800c6ea <_rclc_take_new_data+0x2a6>
 800c650:	f990 0008 	ldrsb.w	r0, [r0, #8]
 800c654:	2101      	movs	r1, #1
 800c656:	f00a fd71 	bl	801713c <rcl_action_transition_goal_state>
 800c65a:	2803      	cmp	r0, #3
 800c65c:	4607      	mov	r7, r0
 800c65e:	d139      	bne.n	800c6d4 <_rclc_take_new_data+0x290>
 800c660:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800c662:	f105 0458 	add.w	r4, r5, #88	@ 0x58
 800c666:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c668:	e896 0003 	ldmia.w	r6, {r0, r1}
 800c66c:	e884 0003 	stmia.w	r4, {r0, r1}
 800c670:	722f      	strb	r7, [r5, #8]
 800c672:	e746      	b.n	800c502 <_rclc_take_new_data+0xbe>
 800c674:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 800c678:	a90a      	add	r1, sp, #40	@ 0x28
 800c67a:	3010      	adds	r0, #16
 800c67c:	f00a fa0e 	bl	8016a9c <rcl_action_take_cancel_response>
 800c680:	4605      	mov	r5, r0
 800c682:	2800      	cmp	r0, #0
 800c684:	f47f af2c 	bne.w	800c4e0 <_rclc_take_new_data+0x9c>
 800c688:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c68c:	6860      	ldr	r0, [r4, #4]
 800c68e:	f00a fe21 	bl	80172d4 <rclc_action_find_handle_by_cancel_request_sequence_number>
 800c692:	4606      	mov	r6, r0
 800c694:	6860      	ldr	r0, [r4, #4]
 800c696:	2e00      	cmp	r6, #0
 800c698:	f43f af44 	beq.w	800c524 <_rclc_take_new_data+0xe0>
 800c69c:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800c69e:	2701      	movs	r7, #1
 800c6a0:	84b7      	strh	r7, [r6, #36]	@ 0x24
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	f43f af3e 	beq.w	800c524 <_rclc_take_new_data+0xe0>
 800c6a8:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800c6aa:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800c6ae:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800c6b2:	f00a fdbb 	bl	801722c <rclc_action_find_goal_handle_by_uuid>
 800c6b6:	b138      	cbz	r0, 800c6c8 <_rclc_take_new_data+0x284>
 800c6b8:	6860      	ldr	r0, [r4, #4]
 800c6ba:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800c6bc:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 800c6c0:	3501      	adds	r5, #1
 800c6c2:	42ab      	cmp	r3, r5
 800c6c4:	d8f0      	bhi.n	800c6a8 <_rclc_take_new_data+0x264>
 800c6c6:	e72d      	b.n	800c524 <_rclc_take_new_data+0xe0>
 800c6c8:	6860      	ldr	r0, [r4, #4]
 800c6ca:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800c6cc:	3501      	adds	r5, #1
 800c6ce:	42ab      	cmp	r3, r5
 800c6d0:	d8ea      	bhi.n	800c6a8 <_rclc_take_new_data+0x264>
 800c6d2:	e727      	b.n	800c524 <_rclc_take_new_data+0xe0>
 800c6d4:	ab06      	add	r3, sp, #24
 800c6d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c6d8:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800c6dc:	2103      	movs	r1, #3
 800c6de:	e896 000c 	ldmia.w	r6, {r2, r3}
 800c6e2:	6860      	ldr	r0, [r4, #4]
 800c6e4:	f00a fe6c 	bl	80173c0 <rclc_action_server_goal_cancel_reject>
 800c6e8:	e70b      	b.n	800c502 <_rclc_take_new_data+0xbe>
 800c6ea:	ab06      	add	r3, sp, #24
 800c6ec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c6ee:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800c6f2:	2102      	movs	r1, #2
 800c6f4:	e896 000c 	ldmia.w	r6, {r2, r3}
 800c6f8:	6860      	ldr	r0, [r4, #4]
 800c6fa:	f00a fe61 	bl	80173c0 <rclc_action_server_goal_cancel_reject>
 800c6fe:	e700      	b.n	800c502 <_rclc_take_new_data+0xbe>
 800c700:	6860      	ldr	r0, [r4, #4]
 800c702:	e70a      	b.n	800c51a <_rclc_take_new_data+0xd6>
 800c704:	6860      	ldr	r0, [r4, #4]
 800c706:	4631      	mov	r1, r6
 800c708:	f00a fd7a 	bl	8017200 <rclc_action_remove_used_goal_handle>
 800c70c:	f000 fdcc 	bl	800d2a8 <rcutils_reset_error>
 800c710:	e6c0      	b.n	800c494 <_rclc_take_new_data+0x50>
 800c712:	2501      	movs	r5, #1
 800c714:	e6be      	b.n	800c494 <_rclc_take_new_data+0x50>
 800c716:	bf00      	nop

0800c718 <rclc_executor_trigger_any>:
 800c718:	4603      	mov	r3, r0
 800c71a:	b370      	cbz	r0, 800c77a <rclc_executor_trigger_any+0x62>
 800c71c:	b379      	cbz	r1, 800c77e <rclc_executor_trigger_any+0x66>
 800c71e:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 800c722:	2200      	movs	r2, #0
 800c724:	b350      	cbz	r0, 800c77c <rclc_executor_trigger_any+0x64>
 800c726:	b430      	push	{r4, r5}
 800c728:	f893 c000 	ldrb.w	ip, [r3]
 800c72c:	f1bc 0f08 	cmp.w	ip, #8
 800c730:	d017      	beq.n	800c762 <rclc_executor_trigger_any+0x4a>
 800c732:	f1bc 0f09 	cmp.w	ip, #9
 800c736:	d00d      	beq.n	800c754 <rclc_executor_trigger_any+0x3c>
 800c738:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 800c73c:	b940      	cbnz	r0, 800c750 <rclc_executor_trigger_any+0x38>
 800c73e:	3201      	adds	r2, #1
 800c740:	4291      	cmp	r1, r2
 800c742:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800c746:	d003      	beq.n	800c750 <rclc_executor_trigger_any+0x38>
 800c748:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 800c74c:	2800      	cmp	r0, #0
 800c74e:	d1eb      	bne.n	800c728 <rclc_executor_trigger_any+0x10>
 800c750:	bc30      	pop	{r4, r5}
 800c752:	4770      	bx	lr
 800c754:	685c      	ldr	r4, [r3, #4]
 800c756:	6a25      	ldr	r5, [r4, #32]
 800c758:	2d00      	cmp	r5, #0
 800c75a:	d1f9      	bne.n	800c750 <rclc_executor_trigger_any+0x38>
 800c75c:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 800c760:	e7ec      	b.n	800c73c <rclc_executor_trigger_any+0x24>
 800c762:	685c      	ldr	r4, [r3, #4]
 800c764:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 800c766:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 800c76a:	d1f1      	bne.n	800c750 <rclc_executor_trigger_any+0x38>
 800c76c:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 800c770:	2800      	cmp	r0, #0
 800c772:	d1ed      	bne.n	800c750 <rclc_executor_trigger_any+0x38>
 800c774:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 800c778:	e7e0      	b.n	800c73c <rclc_executor_trigger_any+0x24>
 800c77a:	4770      	bx	lr
 800c77c:	4770      	bx	lr
 800c77e:	4608      	mov	r0, r1
 800c780:	4770      	bx	lr
 800c782:	bf00      	nop

0800c784 <_rclc_execute>:
 800c784:	2800      	cmp	r0, #0
 800c786:	f000 80da 	beq.w	800c93e <_rclc_execute+0x1ba>
 800c78a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c78c:	7843      	ldrb	r3, [r0, #1]
 800c78e:	b087      	sub	sp, #28
 800c790:	4604      	mov	r4, r0
 800c792:	b123      	cbz	r3, 800c79e <_rclc_execute+0x1a>
 800c794:	2b01      	cmp	r3, #1
 800c796:	d01c      	beq.n	800c7d2 <_rclc_execute+0x4e>
 800c798:	2000      	movs	r0, #0
 800c79a:	b007      	add	sp, #28
 800c79c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c79e:	7803      	ldrb	r3, [r0, #0]
 800c7a0:	2b08      	cmp	r3, #8
 800c7a2:	f000 809e 	beq.w	800c8e2 <_rclc_execute+0x15e>
 800c7a6:	2b09      	cmp	r3, #9
 800c7a8:	d024      	beq.n	800c7f4 <_rclc_execute+0x70>
 800c7aa:	f890 0039 	ldrb.w	r0, [r0, #57]	@ 0x39
 800c7ae:	2800      	cmp	r0, #0
 800c7b0:	d0f2      	beq.n	800c798 <_rclc_execute+0x14>
 800c7b2:	2b0a      	cmp	r3, #10
 800c7b4:	f200 8158 	bhi.w	800ca68 <_rclc_execute+0x2e4>
 800c7b8:	e8df f013 	tbh	[pc, r3, lsl #1]
 800c7bc:	008c0071 	.word	0x008c0071
 800c7c0:	0071007e 	.word	0x0071007e
 800c7c4:	00590075 	.word	0x00590075
 800c7c8:	00590059 	.word	0x00590059
 800c7cc:	01560156 	.word	0x01560156
 800c7d0:	007b      	.short	0x007b
 800c7d2:	7803      	ldrb	r3, [r0, #0]
 800c7d4:	2b0a      	cmp	r3, #10
 800c7d6:	f200 8147 	bhi.w	800ca68 <_rclc_execute+0x2e4>
 800c7da:	e8df f013 	tbh	[pc, r3, lsl #1]
 800c7de:	00f7      	.short	0x00f7
 800c7e0:	006d0079 	.word	0x006d0079
 800c7e4:	00640060 	.word	0x00640060
 800c7e8:	00480048 	.word	0x00480048
 800c7ec:	00fe0048 	.word	0x00fe0048
 800c7f0:	006a0100 	.word	0x006a0100
 800c7f4:	6840      	ldr	r0, [r0, #4]
 800c7f6:	6a02      	ldr	r2, [r0, #32]
 800c7f8:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800c7fc:	2a00      	cmp	r2, #0
 800c7fe:	f040 80f1 	bne.w	800c9e4 <_rclc_execute+0x260>
 800c802:	2b00      	cmp	r3, #0
 800c804:	d0c8      	beq.n	800c798 <_rclc_execute+0x14>
 800c806:	e003      	b.n	800c810 <_rclc_execute+0x8c>
 800c808:	6858      	ldr	r0, [r3, #4]
 800c80a:	f00a fcf9 	bl	8017200 <rclc_action_remove_used_goal_handle>
 800c80e:	6860      	ldr	r0, [r4, #4]
 800c810:	f00a fd30 	bl	8017274 <rclc_action_find_first_terminated_handle>
 800c814:	4603      	mov	r3, r0
 800c816:	4601      	mov	r1, r0
 800c818:	2800      	cmp	r0, #0
 800c81a:	d1f5      	bne.n	800c808 <_rclc_execute+0x84>
 800c81c:	6860      	ldr	r0, [r4, #4]
 800c81e:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
 800c822:	f890 3020 	ldrb.w	r3, [r0, #32]
 800c826:	2b00      	cmp	r3, #0
 800c828:	f000 80e9 	beq.w	800c9fe <_rclc_execute+0x27a>
 800c82c:	f640 0634 	movw	r6, #2100	@ 0x834
 800c830:	2701      	movs	r7, #1
 800c832:	e007      	b.n	800c844 <_rclc_execute+0xc0>
 800c834:	4628      	mov	r0, r5
 800c836:	f00a fd77 	bl	8017328 <rclc_action_server_response_goal_request>
 800c83a:	6860      	ldr	r0, [r4, #4]
 800c83c:	4629      	mov	r1, r5
 800c83e:	f00a fcdf 	bl	8017200 <rclc_action_remove_used_goal_handle>
 800c842:	6860      	ldr	r0, [r4, #4]
 800c844:	2100      	movs	r1, #0
 800c846:	f00a fd09 	bl	801725c <rclc_action_find_first_handle_by_status>
 800c84a:	4605      	mov	r5, r0
 800c84c:	2800      	cmp	r0, #0
 800c84e:	f000 80d3 	beq.w	800c9f8 <_rclc_execute+0x274>
 800c852:	6863      	ldr	r3, [r4, #4]
 800c854:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800c856:	699b      	ldr	r3, [r3, #24]
 800c858:	4798      	blx	r3
 800c85a:	42b0      	cmp	r0, r6
 800c85c:	f04f 0100 	mov.w	r1, #0
 800c860:	d1e8      	bne.n	800c834 <_rclc_execute+0xb0>
 800c862:	2101      	movs	r1, #1
 800c864:	4628      	mov	r0, r5
 800c866:	f00a fd5f 	bl	8017328 <rclc_action_server_response_goal_request>
 800c86a:	722f      	strb	r7, [r5, #8]
 800c86c:	e7e9      	b.n	800c842 <_rclc_execute+0xbe>
 800c86e:	2b06      	cmp	r3, #6
 800c870:	68a0      	ldr	r0, [r4, #8]
 800c872:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800c874:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 800c876:	f000 80b9 	beq.w	800c9ec <_rclc_execute+0x268>
 800c87a:	2b07      	cmp	r3, #7
 800c87c:	f000 80ef 	beq.w	800ca5e <_rclc_execute+0x2da>
 800c880:	47b0      	blx	r6
 800c882:	f104 0510 	add.w	r5, r4, #16
 800c886:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800c888:	6860      	ldr	r0, [r4, #4]
 800c88a:	4629      	mov	r1, r5
 800c88c:	f008 fe4e 	bl	801552c <rcl_send_response>
 800c890:	2800      	cmp	r0, #0
 800c892:	d082      	beq.n	800c79a <_rclc_execute+0x16>
 800c894:	9005      	str	r0, [sp, #20]
 800c896:	f000 fd07 	bl	800d2a8 <rcutils_reset_error>
 800c89a:	9805      	ldr	r0, [sp, #20]
 800c89c:	e77d      	b.n	800c79a <_rclc_execute+0x16>
 800c89e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800c8a0:	68a0      	ldr	r0, [r4, #8]
 800c8a2:	4798      	blx	r3
 800c8a4:	e778      	b.n	800c798 <_rclc_execute+0x14>
 800c8a6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800c8a8:	68a0      	ldr	r0, [r4, #8]
 800c8aa:	f104 0110 	add.w	r1, r4, #16
 800c8ae:	4798      	blx	r3
 800c8b0:	e772      	b.n	800c798 <_rclc_execute+0x14>
 800c8b2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800c8b4:	4798      	blx	r3
 800c8b6:	e76f      	b.n	800c798 <_rclc_execute+0x14>
 800c8b8:	6860      	ldr	r0, [r4, #4]
 800c8ba:	f009 f8f9 	bl	8015ab0 <rcl_timer_call>
 800c8be:	f240 3321 	movw	r3, #801	@ 0x321
 800c8c2:	4298      	cmp	r0, r3
 800c8c4:	f43f af68 	beq.w	800c798 <_rclc_execute+0x14>
 800c8c8:	2800      	cmp	r0, #0
 800c8ca:	f43f af66 	beq.w	800c79a <_rclc_execute+0x16>
 800c8ce:	e7e1      	b.n	800c894 <_rclc_execute+0x110>
 800c8d0:	f890 0039 	ldrb.w	r0, [r0, #57]	@ 0x39
 800c8d4:	e9d4 130b 	ldrd	r1, r3, [r4, #44]	@ 0x2c
 800c8d8:	2800      	cmp	r0, #0
 800c8da:	d0e8      	beq.n	800c8ae <_rclc_execute+0x12a>
 800c8dc:	68a0      	ldr	r0, [r4, #8]
 800c8de:	4798      	blx	r3
 800c8e0:	e75a      	b.n	800c798 <_rclc_execute+0x14>
 800c8e2:	6840      	ldr	r0, [r0, #4]
 800c8e4:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800c8e6:	f033 437f 	bics.w	r3, r3, #4278190080	@ 0xff000000
 800c8ea:	d107      	bne.n	800c8fc <_rclc_execute+0x178>
 800c8ec:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800c8f0:	b923      	cbnz	r3, 800c8fc <_rclc_execute+0x178>
 800c8f2:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	f43f af4e 	beq.w	800c798 <_rclc_execute+0x14>
 800c8fc:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800c900:	b303      	cbz	r3, 800c944 <_rclc_execute+0x1c0>
 800c902:	2600      	movs	r6, #0
 800c904:	2701      	movs	r7, #1
 800c906:	e004      	b.n	800c912 <_rclc_execute+0x18e>
 800c908:	f00a fc44 	bl	8017194 <rclc_action_send_result_request>
 800c90c:	b990      	cbnz	r0, 800c934 <_rclc_execute+0x1b0>
 800c90e:	722f      	strb	r7, [r5, #8]
 800c910:	6860      	ldr	r0, [r4, #4]
 800c912:	f00a fcf1 	bl	80172f8 <rclc_action_find_first_handle_with_goal_response>
 800c916:	4605      	mov	r5, r0
 800c918:	b198      	cbz	r0, 800c942 <_rclc_execute+0x1be>
 800c91a:	6863      	ldr	r3, [r4, #4]
 800c91c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800c91e:	699b      	ldr	r3, [r3, #24]
 800c920:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 800c924:	f885 6020 	strb.w	r6, [r5, #32]
 800c928:	4798      	blx	r3
 800c92a:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 800c92e:	4628      	mov	r0, r5
 800c930:	2b00      	cmp	r3, #0
 800c932:	d1e9      	bne.n	800c908 <_rclc_execute+0x184>
 800c934:	6860      	ldr	r0, [r4, #4]
 800c936:	4629      	mov	r1, r5
 800c938:	f00a fc62 	bl	8017200 <rclc_action_remove_used_goal_handle>
 800c93c:	e7e8      	b.n	800c910 <_rclc_execute+0x18c>
 800c93e:	200b      	movs	r0, #11
 800c940:	4770      	bx	lr
 800c942:	6860      	ldr	r0, [r4, #4]
 800c944:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800c948:	b18b      	cbz	r3, 800c96e <_rclc_execute+0x1ea>
 800c94a:	68c5      	ldr	r5, [r0, #12]
 800c94c:	b32d      	cbz	r5, 800c99a <_rclc_execute+0x216>
 800c94e:	2600      	movs	r6, #0
 800c950:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 800c954:	b143      	cbz	r3, 800c968 <_rclc_execute+0x1e4>
 800c956:	69c3      	ldr	r3, [r0, #28]
 800c958:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 800c95c:	b123      	cbz	r3, 800c968 <_rclc_execute+0x1e4>
 800c95e:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800c960:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800c962:	4628      	mov	r0, r5
 800c964:	4798      	blx	r3
 800c966:	6860      	ldr	r0, [r4, #4]
 800c968:	682d      	ldr	r5, [r5, #0]
 800c96a:	2d00      	cmp	r5, #0
 800c96c:	d1f0      	bne.n	800c950 <_rclc_execute+0x1cc>
 800c96e:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800c972:	b193      	cbz	r3, 800c99a <_rclc_execute+0x216>
 800c974:	68c5      	ldr	r5, [r0, #12]
 800c976:	b185      	cbz	r5, 800c99a <_rclc_execute+0x216>
 800c978:	2600      	movs	r6, #0
 800c97a:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 800c97e:	b14b      	cbz	r3, 800c994 <_rclc_execute+0x210>
 800c980:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800c982:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 800c986:	b12b      	cbz	r3, 800c994 <_rclc_execute+0x210>
 800c988:	4628      	mov	r0, r5
 800c98a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800c98c:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 800c990:	4798      	blx	r3
 800c992:	6860      	ldr	r0, [r4, #4]
 800c994:	682d      	ldr	r5, [r5, #0]
 800c996:	2d00      	cmp	r5, #0
 800c998:	d1ef      	bne.n	800c97a <_rclc_execute+0x1f6>
 800c99a:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	f43f aefa 	beq.w	800c798 <_rclc_execute+0x14>
 800c9a4:	2700      	movs	r7, #0
 800c9a6:	e00b      	b.n	800c9c0 <_rclc_execute+0x23c>
 800c9a8:	6863      	ldr	r3, [r4, #4]
 800c9aa:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800c9ac:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800c9ae:	6a1e      	ldr	r6, [r3, #32]
 800c9b0:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 800c9b4:	47b0      	blx	r6
 800c9b6:	6860      	ldr	r0, [r4, #4]
 800c9b8:	4629      	mov	r1, r5
 800c9ba:	f00a fc21 	bl	8017200 <rclc_action_remove_used_goal_handle>
 800c9be:	6860      	ldr	r0, [r4, #4]
 800c9c0:	f00a fca6 	bl	8017310 <rclc_action_find_first_handle_with_result_response>
 800c9c4:	4605      	mov	r5, r0
 800c9c6:	2800      	cmp	r0, #0
 800c9c8:	d1ee      	bne.n	800c9a8 <_rclc_execute+0x224>
 800c9ca:	e6e5      	b.n	800c798 <_rclc_execute+0x14>
 800c9cc:	f890 0039 	ldrb.w	r0, [r0, #57]	@ 0x39
 800c9d0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800c9d2:	2800      	cmp	r0, #0
 800c9d4:	f43f af65 	beq.w	800c8a2 <_rclc_execute+0x11e>
 800c9d8:	e762      	b.n	800c8a0 <_rclc_execute+0x11c>
 800c9da:	6840      	ldr	r0, [r0, #4]
 800c9dc:	e78e      	b.n	800c8fc <_rclc_execute+0x178>
 800c9de:	6840      	ldr	r0, [r0, #4]
 800c9e0:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	f43f af1c 	beq.w	800c822 <_rclc_execute+0x9e>
 800c9ea:	e711      	b.n	800c810 <_rclc_execute+0x8c>
 800c9ec:	f104 0510 	add.w	r5, r4, #16
 800c9f0:	460a      	mov	r2, r1
 800c9f2:	4629      	mov	r1, r5
 800c9f4:	47b0      	blx	r6
 800c9f6:	e746      	b.n	800c886 <_rclc_execute+0x102>
 800c9f8:	6860      	ldr	r0, [r4, #4]
 800c9fa:	f880 5020 	strb.w	r5, [r0, #32]
 800c9fe:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	f43f aec8 	beq.w	800c798 <_rclc_execute+0x14>
 800ca08:	68c5      	ldr	r5, [r0, #12]
 800ca0a:	b325      	cbz	r5, 800ca56 <_rclc_execute+0x2d2>
 800ca0c:	2602      	movs	r6, #2
 800ca0e:	e001      	b.n	800ca14 <_rclc_execute+0x290>
 800ca10:	682d      	ldr	r5, [r5, #0]
 800ca12:	b305      	cbz	r5, 800ca56 <_rclc_execute+0x2d2>
 800ca14:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800ca18:	2b03      	cmp	r3, #3
 800ca1a:	d1f9      	bne.n	800ca10 <_rclc_execute+0x28c>
 800ca1c:	69c3      	ldr	r3, [r0, #28]
 800ca1e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800ca20:	4628      	mov	r0, r5
 800ca22:	4798      	blx	r3
 800ca24:	4603      	mov	r3, r0
 800ca26:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 800ca2a:	4628      	mov	r0, r5
 800ca2c:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 800ca30:	b11b      	cbz	r3, 800ca3a <_rclc_execute+0x2b6>
 800ca32:	f00a fc99 	bl	8017368 <rclc_action_server_goal_cancel_accept>
 800ca36:	6860      	ldr	r0, [r4, #4]
 800ca38:	e7ea      	b.n	800ca10 <_rclc_execute+0x28c>
 800ca3a:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800ca3c:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800ca40:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 800ca44:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ca48:	6860      	ldr	r0, [r4, #4]
 800ca4a:	2101      	movs	r1, #1
 800ca4c:	f00a fcb8 	bl	80173c0 <rclc_action_server_goal_cancel_reject>
 800ca50:	722e      	strb	r6, [r5, #8]
 800ca52:	6860      	ldr	r0, [r4, #4]
 800ca54:	e7dc      	b.n	800ca10 <_rclc_execute+0x28c>
 800ca56:	2300      	movs	r3, #0
 800ca58:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800ca5c:	e69c      	b.n	800c798 <_rclc_execute+0x14>
 800ca5e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800ca60:	47b0      	blx	r6
 800ca62:	f104 0510 	add.w	r5, r4, #16
 800ca66:	e70e      	b.n	800c886 <_rclc_execute+0x102>
 800ca68:	2001      	movs	r0, #1
 800ca6a:	e696      	b.n	800c79a <_rclc_execute+0x16>

0800ca6c <rclc_executor_get_zero_initialized_executor>:
 800ca6c:	b510      	push	{r4, lr}
 800ca6e:	4903      	ldr	r1, [pc, #12]	@ (800ca7c <rclc_executor_get_zero_initialized_executor+0x10>)
 800ca70:	4604      	mov	r4, r0
 800ca72:	2290      	movs	r2, #144	@ 0x90
 800ca74:	f010 fda1 	bl	801d5ba <memcpy>
 800ca78:	4620      	mov	r0, r4
 800ca7a:	bd10      	pop	{r4, pc}
 800ca7c:	0801fbe0 	.word	0x0801fbe0

0800ca80 <rclc_executor_init>:
 800ca80:	2800      	cmp	r0, #0
 800ca82:	d05a      	beq.n	800cb3a <rclc_executor_init+0xba>
 800ca84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca88:	460d      	mov	r5, r1
 800ca8a:	b0b2      	sub	sp, #200	@ 0xc8
 800ca8c:	2900      	cmp	r1, #0
 800ca8e:	d050      	beq.n	800cb32 <rclc_executor_init+0xb2>
 800ca90:	4604      	mov	r4, r0
 800ca92:	4618      	mov	r0, r3
 800ca94:	4616      	mov	r6, r2
 800ca96:	461f      	mov	r7, r3
 800ca98:	f000 fbe0 	bl	800d25c <rcutils_allocator_is_valid>
 800ca9c:	2800      	cmp	r0, #0
 800ca9e:	d048      	beq.n	800cb32 <rclc_executor_init+0xb2>
 800caa0:	2e00      	cmp	r6, #0
 800caa2:	d046      	beq.n	800cb32 <rclc_executor_init+0xb2>
 800caa4:	492a      	ldr	r1, [pc, #168]	@ (800cb50 <rclc_executor_init+0xd0>)
 800caa6:	2290      	movs	r2, #144	@ 0x90
 800caa8:	a80e      	add	r0, sp, #56	@ 0x38
 800caaa:	f010 fd86 	bl	801d5ba <memcpy>
 800caae:	a90e      	add	r1, sp, #56	@ 0x38
 800cab0:	2290      	movs	r2, #144	@ 0x90
 800cab2:	4620      	mov	r0, r4
 800cab4:	f010 fd81 	bl	801d5ba <memcpy>
 800cab8:	6065      	str	r5, [r4, #4]
 800caba:	4668      	mov	r0, sp
 800cabc:	60e6      	str	r6, [r4, #12]
 800cabe:	466d      	mov	r5, sp
 800cac0:	f009 f8e8 	bl	8015c94 <rcl_get_zero_initialized_wait_set>
 800cac4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cac6:	f104 0c18 	add.w	ip, r4, #24
 800caca:	f8d7 8000 	ldr.w	r8, [r7]
 800cace:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cad2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cad4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cad8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cada:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cade:	ed9f 7b1a 	vldr	d7, [pc, #104]	@ 800cb48 <rclc_executor_init+0xc8>
 800cae2:	682b      	ldr	r3, [r5, #0]
 800cae4:	f8cc 3000 	str.w	r3, [ip]
 800cae8:	6939      	ldr	r1, [r7, #16]
 800caea:	6167      	str	r7, [r4, #20]
 800caec:	ed84 7b1c 	vstr	d7, [r4, #112]	@ 0x70
 800caf0:	01b0      	lsls	r0, r6, #6
 800caf2:	47c0      	blx	r8
 800caf4:	60a0      	str	r0, [r4, #8]
 800caf6:	b310      	cbz	r0, 800cb3e <rclc_executor_init+0xbe>
 800caf8:	2500      	movs	r5, #0
 800cafa:	e000      	b.n	800cafe <rclc_executor_init+0x7e>
 800cafc:	68a0      	ldr	r0, [r4, #8]
 800cafe:	eb00 1085 	add.w	r0, r0, r5, lsl #6
 800cb02:	4631      	mov	r1, r6
 800cb04:	3501      	adds	r5, #1
 800cb06:	f000 fa35 	bl	800cf74 <rclc_executor_handle_init>
 800cb0a:	42ae      	cmp	r6, r5
 800cb0c:	d1f6      	bne.n	800cafc <rclc_executor_init+0x7c>
 800cb0e:	f104 004c 	add.w	r0, r4, #76	@ 0x4c
 800cb12:	f000 fa25 	bl	800cf60 <rclc_executor_handle_counters_zero_init>
 800cb16:	490f      	ldr	r1, [pc, #60]	@ (800cb54 <rclc_executor_init+0xd4>)
 800cb18:	68a2      	ldr	r2, [r4, #8]
 800cb1a:	2300      	movs	r3, #0
 800cb1c:	e9c4 1320 	strd	r1, r3, [r4, #128]	@ 0x80
 800cb20:	b12a      	cbz	r2, 800cb2e <rclc_executor_init+0xae>
 800cb22:	6962      	ldr	r2, [r4, #20]
 800cb24:	b11a      	cbz	r2, 800cb2e <rclc_executor_init+0xae>
 800cb26:	68e2      	ldr	r2, [r4, #12]
 800cb28:	b10a      	cbz	r2, 800cb2e <rclc_executor_init+0xae>
 800cb2a:	f884 3088 	strb.w	r3, [r4, #136]	@ 0x88
 800cb2e:	2000      	movs	r0, #0
 800cb30:	e000      	b.n	800cb34 <rclc_executor_init+0xb4>
 800cb32:	200b      	movs	r0, #11
 800cb34:	b032      	add	sp, #200	@ 0xc8
 800cb36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb3a:	200b      	movs	r0, #11
 800cb3c:	4770      	bx	lr
 800cb3e:	200a      	movs	r0, #10
 800cb40:	e7f8      	b.n	800cb34 <rclc_executor_init+0xb4>
 800cb42:	bf00      	nop
 800cb44:	f3af 8000 	nop.w
 800cb48:	3b9aca00 	.word	0x3b9aca00
 800cb4c:	00000000 	.word	0x00000000
 800cb50:	0801fbe0 	.word	0x0801fbe0
 800cb54:	0800c719 	.word	0x0800c719

0800cb58 <rclc_executor_add_subscription>:
 800cb58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb5a:	f89d e018 	ldrb.w	lr, [sp, #24]
 800cb5e:	b338      	cbz	r0, 800cbb0 <rclc_executor_add_subscription+0x58>
 800cb60:	b331      	cbz	r1, 800cbb0 <rclc_executor_add_subscription+0x58>
 800cb62:	b32a      	cbz	r2, 800cbb0 <rclc_executor_add_subscription+0x58>
 800cb64:	b323      	cbz	r3, 800cbb0 <rclc_executor_add_subscription+0x58>
 800cb66:	4604      	mov	r4, r0
 800cb68:	e9d0 5003 	ldrd	r5, r0, [r0, #12]
 800cb6c:	42a8      	cmp	r0, r5
 800cb6e:	d301      	bcc.n	800cb74 <rclc_executor_add_subscription+0x1c>
 800cb70:	2001      	movs	r0, #1
 800cb72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cb74:	68a6      	ldr	r6, [r4, #8]
 800cb76:	0187      	lsls	r7, r0, #6
 800cb78:	eb06 1c80 	add.w	ip, r6, r0, lsl #6
 800cb7c:	2500      	movs	r5, #0
 800cb7e:	55f5      	strb	r5, [r6, r7]
 800cb80:	3001      	adds	r0, #1
 800cb82:	f8cc 3030 	str.w	r3, [ip, #48]	@ 0x30
 800cb86:	f8cc 502c 	str.w	r5, [ip, #44]	@ 0x2c
 800cb8a:	2301      	movs	r3, #1
 800cb8c:	f104 0518 	add.w	r5, r4, #24
 800cb90:	e9cc 1201 	strd	r1, r2, [ip, #4]
 800cb94:	f88c e001 	strb.w	lr, [ip, #1]
 800cb98:	f8ac 3038 	strh.w	r3, [ip, #56]	@ 0x38
 800cb9c:	6120      	str	r0, [r4, #16]
 800cb9e:	4628      	mov	r0, r5
 800cba0:	f009 f88c 	bl	8015cbc <rcl_wait_set_is_valid>
 800cba4:	b930      	cbnz	r0, 800cbb4 <rclc_executor_add_subscription+0x5c>
 800cba6:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800cba8:	3301      	adds	r3, #1
 800cbaa:	2000      	movs	r0, #0
 800cbac:	64e3      	str	r3, [r4, #76]	@ 0x4c
 800cbae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cbb0:	200b      	movs	r0, #11
 800cbb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cbb4:	4628      	mov	r0, r5
 800cbb6:	f009 f887 	bl	8015cc8 <rcl_wait_set_fini>
 800cbba:	2800      	cmp	r0, #0
 800cbbc:	d0f3      	beq.n	800cba6 <rclc_executor_add_subscription+0x4e>
 800cbbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800cbc0 <rclc_executor_add_service>:
 800cbc0:	b370      	cbz	r0, 800cc20 <rclc_executor_add_service+0x60>
 800cbc2:	b369      	cbz	r1, 800cc20 <rclc_executor_add_service+0x60>
 800cbc4:	b362      	cbz	r2, 800cc20 <rclc_executor_add_service+0x60>
 800cbc6:	b35b      	cbz	r3, 800cc20 <rclc_executor_add_service+0x60>
 800cbc8:	b538      	push	{r3, r4, r5, lr}
 800cbca:	4604      	mov	r4, r0
 800cbcc:	9804      	ldr	r0, [sp, #16]
 800cbce:	b378      	cbz	r0, 800cc30 <rclc_executor_add_service+0x70>
 800cbd0:	e9d4 5003 	ldrd	r5, r0, [r4, #12]
 800cbd4:	42a8      	cmp	r0, r5
 800cbd6:	d301      	bcc.n	800cbdc <rclc_executor_add_service+0x1c>
 800cbd8:	2001      	movs	r0, #1
 800cbda:	bd38      	pop	{r3, r4, r5, pc}
 800cbdc:	68a5      	ldr	r5, [r4, #8]
 800cbde:	eb05 1c80 	add.w	ip, r5, r0, lsl #6
 800cbe2:	ea4f 1e80 	mov.w	lr, r0, lsl #6
 800cbe6:	f8cc 3028 	str.w	r3, [ip, #40]	@ 0x28
 800cbea:	9b04      	ldr	r3, [sp, #16]
 800cbec:	f8cc 3030 	str.w	r3, [ip, #48]	@ 0x30
 800cbf0:	2305      	movs	r3, #5
 800cbf2:	e9cc 1201 	strd	r1, r2, [ip, #4]
 800cbf6:	3001      	adds	r0, #1
 800cbf8:	f825 300e 	strh.w	r3, [r5, lr]
 800cbfc:	2201      	movs	r2, #1
 800cbfe:	2300      	movs	r3, #0
 800cc00:	f104 0518 	add.w	r5, r4, #24
 800cc04:	f88c 2038 	strb.w	r2, [ip, #56]	@ 0x38
 800cc08:	f8cc 302c 	str.w	r3, [ip, #44]	@ 0x2c
 800cc0c:	6120      	str	r0, [r4, #16]
 800cc0e:	4628      	mov	r0, r5
 800cc10:	f009 f854 	bl	8015cbc <rcl_wait_set_is_valid>
 800cc14:	b930      	cbnz	r0, 800cc24 <rclc_executor_add_service+0x64>
 800cc16:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800cc18:	3301      	adds	r3, #1
 800cc1a:	2000      	movs	r0, #0
 800cc1c:	65a3      	str	r3, [r4, #88]	@ 0x58
 800cc1e:	bd38      	pop	{r3, r4, r5, pc}
 800cc20:	200b      	movs	r0, #11
 800cc22:	4770      	bx	lr
 800cc24:	4628      	mov	r0, r5
 800cc26:	f009 f84f 	bl	8015cc8 <rcl_wait_set_fini>
 800cc2a:	2800      	cmp	r0, #0
 800cc2c:	d0f3      	beq.n	800cc16 <rclc_executor_add_service+0x56>
 800cc2e:	e7d4      	b.n	800cbda <rclc_executor_add_service+0x1a>
 800cc30:	200b      	movs	r0, #11
 800cc32:	bd38      	pop	{r3, r4, r5, pc}

0800cc34 <rclc_executor_prepare>:
 800cc34:	2800      	cmp	r0, #0
 800cc36:	d044      	beq.n	800ccc2 <rclc_executor_prepare+0x8e>
 800cc38:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc3a:	f100 0518 	add.w	r5, r0, #24
 800cc3e:	b09b      	sub	sp, #108	@ 0x6c
 800cc40:	4604      	mov	r4, r0
 800cc42:	4628      	mov	r0, r5
 800cc44:	f009 f83a 	bl	8015cbc <rcl_wait_set_is_valid>
 800cc48:	b110      	cbz	r0, 800cc50 <rclc_executor_prepare+0x1c>
 800cc4a:	2000      	movs	r0, #0
 800cc4c:	b01b      	add	sp, #108	@ 0x6c
 800cc4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc50:	4628      	mov	r0, r5
 800cc52:	f009 f839 	bl	8015cc8 <rcl_wait_set_fini>
 800cc56:	2800      	cmp	r0, #0
 800cc58:	d130      	bne.n	800ccbc <rclc_executor_prepare+0x88>
 800cc5a:	a80c      	add	r0, sp, #48	@ 0x30
 800cc5c:	f009 f81a 	bl	8015c94 <rcl_get_zero_initialized_wait_set>
 800cc60:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800cc64:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800cc68:	46ae      	mov	lr, r5
 800cc6a:	6967      	ldr	r7, [r4, #20]
 800cc6c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800cc70:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800cc74:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800cc78:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800cc7c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800cc80:	f8dc 3000 	ldr.w	r3, [ip]
 800cc84:	f8ce 3000 	str.w	r3, [lr]
 800cc88:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800cc8a:	ae04      	add	r6, sp, #16
 800cc8c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800cc8e:	683b      	ldr	r3, [r7, #0]
 800cc90:	6862      	ldr	r2, [r4, #4]
 800cc92:	6033      	str	r3, [r6, #0]
 800cc94:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 800cc96:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 800cc98:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800cc9c:	e9d4 3214 	ldrd	r3, r2, [r4, #80]	@ 0x50
 800cca0:	e9cd 2100 	strd	r2, r1, [sp]
 800cca4:	4628      	mov	r0, r5
 800cca6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800cca8:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 800ccaa:	f009 fb29 	bl	8016300 <rcl_wait_set_init>
 800ccae:	2800      	cmp	r0, #0
 800ccb0:	d0cc      	beq.n	800cc4c <rclc_executor_prepare+0x18>
 800ccb2:	900b      	str	r0, [sp, #44]	@ 0x2c
 800ccb4:	f000 faf8 	bl	800d2a8 <rcutils_reset_error>
 800ccb8:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800ccba:	e7c7      	b.n	800cc4c <rclc_executor_prepare+0x18>
 800ccbc:	f000 faf4 	bl	800d2a8 <rcutils_reset_error>
 800ccc0:	e7cb      	b.n	800cc5a <rclc_executor_prepare+0x26>
 800ccc2:	200b      	movs	r0, #11
 800ccc4:	4770      	bx	lr
 800ccc6:	bf00      	nop

0800ccc8 <rclc_executor_spin_some>:
 800ccc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cccc:	b083      	sub	sp, #12
 800ccce:	2800      	cmp	r0, #0
 800ccd0:	f000 8091 	beq.w	800cdf6 <rclc_executor_spin_some+0x12e>
 800ccd4:	4604      	mov	r4, r0
 800ccd6:	6840      	ldr	r0, [r0, #4]
 800ccd8:	4690      	mov	r8, r2
 800ccda:	4699      	mov	r9, r3
 800ccdc:	f007 fde2 	bl	80148a4 <rcl_context_is_valid>
 800cce0:	2800      	cmp	r0, #0
 800cce2:	d037      	beq.n	800cd54 <rclc_executor_spin_some+0x8c>
 800cce4:	4620      	mov	r0, r4
 800cce6:	f104 0718 	add.w	r7, r4, #24
 800ccea:	f7ff ffa3 	bl	800cc34 <rclc_executor_prepare>
 800ccee:	4638      	mov	r0, r7
 800ccf0:	f009 f8ba 	bl	8015e68 <rcl_wait_set_clear>
 800ccf4:	4606      	mov	r6, r0
 800ccf6:	2800      	cmp	r0, #0
 800ccf8:	d177      	bne.n	800cdea <rclc_executor_spin_some+0x122>
 800ccfa:	68e3      	ldr	r3, [r4, #12]
 800ccfc:	4605      	mov	r5, r0
 800ccfe:	b1eb      	cbz	r3, 800cd3c <rclc_executor_spin_some+0x74>
 800cd00:	68a1      	ldr	r1, [r4, #8]
 800cd02:	eb01 1c85 	add.w	ip, r1, r5, lsl #6
 800cd06:	01aa      	lsls	r2, r5, #6
 800cd08:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 800cd0c:	b1b3      	cbz	r3, 800cd3c <rclc_executor_spin_some+0x74>
 800cd0e:	5c8b      	ldrb	r3, [r1, r2]
 800cd10:	2b0a      	cmp	r3, #10
 800cd12:	d81f      	bhi.n	800cd54 <rclc_executor_spin_some+0x8c>
 800cd14:	e8df f003 	tbb	[pc, r3]
 800cd18:	253e3434 	.word	0x253e3434
 800cd1c:	06060625 	.word	0x06060625
 800cd20:	525d      	.short	0x525d
 800cd22:	48          	.byte	0x48
 800cd23:	00          	.byte	0x00
 800cd24:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800cd28:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800cd2c:	4638      	mov	r0, r7
 800cd2e:	f009 fbfb 	bl	8016528 <rcl_wait_set_add_service>
 800cd32:	b9f8      	cbnz	r0, 800cd74 <rclc_executor_spin_some+0xac>
 800cd34:	68e3      	ldr	r3, [r4, #12]
 800cd36:	3501      	adds	r5, #1
 800cd38:	42ab      	cmp	r3, r5
 800cd3a:	d8e1      	bhi.n	800cd00 <rclc_executor_spin_some+0x38>
 800cd3c:	4642      	mov	r2, r8
 800cd3e:	464b      	mov	r3, r9
 800cd40:	4638      	mov	r0, r7
 800cd42:	f009 fc1d 	bl	8016580 <rcl_wait>
 800cd46:	f894 5088 	ldrb.w	r5, [r4, #136]	@ 0x88
 800cd4a:	2d00      	cmp	r5, #0
 800cd4c:	f000 80ab 	beq.w	800cea6 <rclc_executor_spin_some+0x1de>
 800cd50:	2d01      	cmp	r5, #1
 800cd52:	d055      	beq.n	800ce00 <rclc_executor_spin_some+0x138>
 800cd54:	f000 faa8 	bl	800d2a8 <rcutils_reset_error>
 800cd58:	2601      	movs	r6, #1
 800cd5a:	4630      	mov	r0, r6
 800cd5c:	b003      	add	sp, #12
 800cd5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd62:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800cd66:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800cd6a:	4638      	mov	r0, r7
 800cd6c:	f009 fbb0 	bl	80164d0 <rcl_wait_set_add_client>
 800cd70:	2800      	cmp	r0, #0
 800cd72:	d0df      	beq.n	800cd34 <rclc_executor_spin_some+0x6c>
 800cd74:	9001      	str	r0, [sp, #4]
 800cd76:	f000 fa97 	bl	800d2a8 <rcutils_reset_error>
 800cd7a:	9801      	ldr	r0, [sp, #4]
 800cd7c:	4606      	mov	r6, r0
 800cd7e:	e7ec      	b.n	800cd5a <rclc_executor_spin_some+0x92>
 800cd80:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800cd84:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800cd88:	4638      	mov	r0, r7
 800cd8a:	f009 f841 	bl	8015e10 <rcl_wait_set_add_subscription>
 800cd8e:	2800      	cmp	r0, #0
 800cd90:	d0d0      	beq.n	800cd34 <rclc_executor_spin_some+0x6c>
 800cd92:	e7ef      	b.n	800cd74 <rclc_executor_spin_some+0xac>
 800cd94:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800cd98:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800cd9c:	4638      	mov	r0, r7
 800cd9e:	f009 fb67 	bl	8016470 <rcl_wait_set_add_timer>
 800cda2:	2800      	cmp	r0, #0
 800cda4:	d0c6      	beq.n	800cd34 <rclc_executor_spin_some+0x6c>
 800cda6:	e7e5      	b.n	800cd74 <rclc_executor_spin_some+0xac>
 800cda8:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800cdac:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800cdb0:	4638      	mov	r0, r7
 800cdb2:	f009 fb31 	bl	8016418 <rcl_wait_set_add_guard_condition>
 800cdb6:	2800      	cmp	r0, #0
 800cdb8:	d0bc      	beq.n	800cd34 <rclc_executor_spin_some+0x6c>
 800cdba:	e7db      	b.n	800cd74 <rclc_executor_spin_some+0xac>
 800cdbc:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800cdc0:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800cdc4:	3110      	adds	r1, #16
 800cdc6:	4638      	mov	r0, r7
 800cdc8:	f00a f8f8 	bl	8016fbc <rcl_action_wait_set_add_action_server>
 800cdcc:	2800      	cmp	r0, #0
 800cdce:	d0b1      	beq.n	800cd34 <rclc_executor_spin_some+0x6c>
 800cdd0:	e7d0      	b.n	800cd74 <rclc_executor_spin_some+0xac>
 800cdd2:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800cdd6:	2300      	movs	r3, #0
 800cdd8:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800cddc:	3110      	adds	r1, #16
 800cdde:	4638      	mov	r0, r7
 800cde0:	f009 feda 	bl	8016b98 <rcl_action_wait_set_add_action_client>
 800cde4:	2800      	cmp	r0, #0
 800cde6:	d0a5      	beq.n	800cd34 <rclc_executor_spin_some+0x6c>
 800cde8:	e7c4      	b.n	800cd74 <rclc_executor_spin_some+0xac>
 800cdea:	f000 fa5d 	bl	800d2a8 <rcutils_reset_error>
 800cdee:	4630      	mov	r0, r6
 800cdf0:	b003      	add	sp, #12
 800cdf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdf6:	260b      	movs	r6, #11
 800cdf8:	4630      	mov	r0, r6
 800cdfa:	b003      	add	sp, #12
 800cdfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce00:	e9d4 c202 	ldrd	ip, r2, [r4, #8]
 800ce04:	4663      	mov	r3, ip
 800ce06:	4615      	mov	r5, r2
 800ce08:	b1ca      	cbz	r2, 800ce3e <rclc_executor_spin_some+0x176>
 800ce0a:	2500      	movs	r5, #0
 800ce0c:	46a8      	mov	r8, r5
 800ce0e:	f240 1991 	movw	r9, #401	@ 0x191
 800ce12:	e00c      	b.n	800ce2e <rclc_executor_spin_some+0x166>
 800ce14:	f7ff fac8 	bl	800c3a8 <_rclc_check_for_new_data>
 800ce18:	f108 0801 	add.w	r8, r8, #1
 800ce1c:	4605      	mov	r5, r0
 800ce1e:	b108      	cbz	r0, 800ce24 <rclc_executor_spin_some+0x15c>
 800ce20:	4548      	cmp	r0, r9
 800ce22:	d13e      	bne.n	800cea2 <rclc_executor_spin_some+0x1da>
 800ce24:	68e2      	ldr	r2, [r4, #12]
 800ce26:	4590      	cmp	r8, r2
 800ce28:	f080 808b 	bcs.w	800cf42 <rclc_executor_spin_some+0x27a>
 800ce2c:	68a3      	ldr	r3, [r4, #8]
 800ce2e:	eb03 1088 	add.w	r0, r3, r8, lsl #6
 800ce32:	469c      	mov	ip, r3
 800ce34:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800ce38:	4639      	mov	r1, r7
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d1ea      	bne.n	800ce14 <rclc_executor_spin_some+0x14c>
 800ce3e:	4611      	mov	r1, r2
 800ce40:	4660      	mov	r0, ip
 800ce42:	e9d4 3220 	ldrd	r3, r2, [r4, #128]	@ 0x80
 800ce46:	4798      	blx	r3
 800ce48:	b358      	cbz	r0, 800cea2 <rclc_executor_spin_some+0x1da>
 800ce4a:	68e3      	ldr	r3, [r4, #12]
 800ce4c:	b34b      	cbz	r3, 800cea2 <rclc_executor_spin_some+0x1da>
 800ce4e:	f04f 0800 	mov.w	r8, #0
 800ce52:	f240 1991 	movw	r9, #401	@ 0x191
 800ce56:	e00a      	b.n	800ce6e <rclc_executor_spin_some+0x1a6>
 800ce58:	f7ff faf4 	bl	800c444 <_rclc_take_new_data>
 800ce5c:	f108 0801 	add.w	r8, r8, #1
 800ce60:	4605      	mov	r5, r0
 800ce62:	b108      	cbz	r0, 800ce68 <rclc_executor_spin_some+0x1a0>
 800ce64:	4548      	cmp	r0, r9
 800ce66:	d11c      	bne.n	800cea2 <rclc_executor_spin_some+0x1da>
 800ce68:	68e3      	ldr	r3, [r4, #12]
 800ce6a:	4598      	cmp	r8, r3
 800ce6c:	d26f      	bcs.n	800cf4e <rclc_executor_spin_some+0x286>
 800ce6e:	68a3      	ldr	r3, [r4, #8]
 800ce70:	eb03 1088 	add.w	r0, r3, r8, lsl #6
 800ce74:	4639      	mov	r1, r7
 800ce76:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 800ce7a:	2a00      	cmp	r2, #0
 800ce7c:	d1ec      	bne.n	800ce58 <rclc_executor_spin_some+0x190>
 800ce7e:	2700      	movs	r7, #0
 800ce80:	e009      	b.n	800ce96 <rclc_executor_spin_some+0x1ce>
 800ce82:	f7ff fc7f 	bl	800c784 <_rclc_execute>
 800ce86:	3701      	adds	r7, #1
 800ce88:	4605      	mov	r5, r0
 800ce8a:	b950      	cbnz	r0, 800cea2 <rclc_executor_spin_some+0x1da>
 800ce8c:	68e3      	ldr	r3, [r4, #12]
 800ce8e:	429f      	cmp	r7, r3
 800ce90:	f4bf af63 	bcs.w	800cd5a <rclc_executor_spin_some+0x92>
 800ce94:	68a3      	ldr	r3, [r4, #8]
 800ce96:	eb03 1087 	add.w	r0, r3, r7, lsl #6
 800ce9a:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d1ef      	bne.n	800ce82 <rclc_executor_spin_some+0x1ba>
 800cea2:	462e      	mov	r6, r5
 800cea4:	e759      	b.n	800cd5a <rclc_executor_spin_some+0x92>
 800cea6:	e9d4 c202 	ldrd	ip, r2, [r4, #8]
 800ceaa:	4663      	mov	r3, ip
 800ceac:	2a00      	cmp	r2, #0
 800ceae:	d054      	beq.n	800cf5a <rclc_executor_spin_some+0x292>
 800ceb0:	46a8      	mov	r8, r5
 800ceb2:	f240 1991 	movw	r9, #401	@ 0x191
 800ceb6:	e00b      	b.n	800ced0 <rclc_executor_spin_some+0x208>
 800ceb8:	f7ff fa76 	bl	800c3a8 <_rclc_check_for_new_data>
 800cebc:	f108 0801 	add.w	r8, r8, #1
 800cec0:	4605      	mov	r5, r0
 800cec2:	b108      	cbz	r0, 800cec8 <rclc_executor_spin_some+0x200>
 800cec4:	4548      	cmp	r0, r9
 800cec6:	d1ec      	bne.n	800cea2 <rclc_executor_spin_some+0x1da>
 800cec8:	68e2      	ldr	r2, [r4, #12]
 800ceca:	4590      	cmp	r8, r2
 800cecc:	d23c      	bcs.n	800cf48 <rclc_executor_spin_some+0x280>
 800cece:	68a3      	ldr	r3, [r4, #8]
 800ced0:	eb03 1088 	add.w	r0, r3, r8, lsl #6
 800ced4:	469c      	mov	ip, r3
 800ced6:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800ceda:	4639      	mov	r1, r7
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d1eb      	bne.n	800ceb8 <rclc_executor_spin_some+0x1f0>
 800cee0:	4611      	mov	r1, r2
 800cee2:	4660      	mov	r0, ip
 800cee4:	e9d4 3220 	ldrd	r3, r2, [r4, #128]	@ 0x80
 800cee8:	4798      	blx	r3
 800ceea:	2800      	cmp	r0, #0
 800ceec:	d0d9      	beq.n	800cea2 <rclc_executor_spin_some+0x1da>
 800ceee:	68e3      	ldr	r3, [r4, #12]
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d0d6      	beq.n	800cea2 <rclc_executor_spin_some+0x1da>
 800cef4:	f04f 0a00 	mov.w	sl, #0
 800cef8:	f240 1891 	movw	r8, #401	@ 0x191
 800cefc:	f240 2959 	movw	r9, #601	@ 0x259
 800cf00:	e013      	b.n	800cf2a <rclc_executor_spin_some+0x262>
 800cf02:	f7ff fa9f 	bl	800c444 <_rclc_take_new_data>
 800cf06:	b118      	cbz	r0, 800cf10 <rclc_executor_spin_some+0x248>
 800cf08:	4540      	cmp	r0, r8
 800cf0a:	d001      	beq.n	800cf10 <rclc_executor_spin_some+0x248>
 800cf0c:	4548      	cmp	r0, r9
 800cf0e:	d122      	bne.n	800cf56 <rclc_executor_spin_some+0x28e>
 800cf10:	68a0      	ldr	r0, [r4, #8]
 800cf12:	4458      	add	r0, fp
 800cf14:	f7ff fc36 	bl	800c784 <_rclc_execute>
 800cf18:	f10a 0a01 	add.w	sl, sl, #1
 800cf1c:	4605      	mov	r5, r0
 800cf1e:	2800      	cmp	r0, #0
 800cf20:	d1bf      	bne.n	800cea2 <rclc_executor_spin_some+0x1da>
 800cf22:	68e3      	ldr	r3, [r4, #12]
 800cf24:	459a      	cmp	sl, r3
 800cf26:	f4bf af18 	bcs.w	800cd5a <rclc_executor_spin_some+0x92>
 800cf2a:	68a0      	ldr	r0, [r4, #8]
 800cf2c:	eb00 108a 	add.w	r0, r0, sl, lsl #6
 800cf30:	4639      	mov	r1, r7
 800cf32:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800cf36:	ea4f 1b8a 	mov.w	fp, sl, lsl #6
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d1e1      	bne.n	800cf02 <rclc_executor_spin_some+0x23a>
 800cf3e:	462e      	mov	r6, r5
 800cf40:	e70b      	b.n	800cd5a <rclc_executor_spin_some+0x92>
 800cf42:	f8d4 c008 	ldr.w	ip, [r4, #8]
 800cf46:	e77a      	b.n	800ce3e <rclc_executor_spin_some+0x176>
 800cf48:	f8d4 c008 	ldr.w	ip, [r4, #8]
 800cf4c:	e7c8      	b.n	800cee0 <rclc_executor_spin_some+0x218>
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d0a7      	beq.n	800cea2 <rclc_executor_spin_some+0x1da>
 800cf52:	68a3      	ldr	r3, [r4, #8]
 800cf54:	e793      	b.n	800ce7e <rclc_executor_spin_some+0x1b6>
 800cf56:	4606      	mov	r6, r0
 800cf58:	e6ff      	b.n	800cd5a <rclc_executor_spin_some+0x92>
 800cf5a:	4615      	mov	r5, r2
 800cf5c:	e7c0      	b.n	800cee0 <rclc_executor_spin_some+0x218>
 800cf5e:	bf00      	nop

0800cf60 <rclc_executor_handle_counters_zero_init>:
 800cf60:	b130      	cbz	r0, 800cf70 <rclc_executor_handle_counters_zero_init+0x10>
 800cf62:	b508      	push	{r3, lr}
 800cf64:	2220      	movs	r2, #32
 800cf66:	2100      	movs	r1, #0
 800cf68:	f010 fa92 	bl	801d490 <memset>
 800cf6c:	2000      	movs	r0, #0
 800cf6e:	bd08      	pop	{r3, pc}
 800cf70:	200b      	movs	r0, #11
 800cf72:	4770      	bx	lr

0800cf74 <rclc_executor_handle_init>:
 800cf74:	b158      	cbz	r0, 800cf8e <rclc_executor_handle_init+0x1a>
 800cf76:	2300      	movs	r3, #0
 800cf78:	220b      	movs	r2, #11
 800cf7a:	e9c0 3301 	strd	r3, r3, [r0, #4]
 800cf7e:	e9c0 330a 	strd	r3, r3, [r0, #40]	@ 0x28
 800cf82:	e9c0 310c 	strd	r3, r1, [r0, #48]	@ 0x30
 800cf86:	8002      	strh	r2, [r0, #0]
 800cf88:	8703      	strh	r3, [r0, #56]	@ 0x38
 800cf8a:	4618      	mov	r0, r3
 800cf8c:	4770      	bx	lr
 800cf8e:	200b      	movs	r0, #11
 800cf90:	4770      	bx	lr
 800cf92:	bf00      	nop

0800cf94 <rclc_support_init>:
 800cf94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf98:	b086      	sub	sp, #24
 800cf9a:	b3b8      	cbz	r0, 800d00c <rclc_support_init+0x78>
 800cf9c:	461c      	mov	r4, r3
 800cf9e:	b3ab      	cbz	r3, 800d00c <rclc_support_init+0x78>
 800cfa0:	460f      	mov	r7, r1
 800cfa2:	4690      	mov	r8, r2
 800cfa4:	4606      	mov	r6, r0
 800cfa6:	f007 fdff 	bl	8014ba8 <rcl_get_zero_initialized_init_options>
 800cfaa:	f104 030c 	add.w	r3, r4, #12
 800cfae:	9005      	str	r0, [sp, #20]
 800cfb0:	e893 0003 	ldmia.w	r3, {r0, r1}
 800cfb4:	e88d 0003 	stmia.w	sp, {r0, r1}
 800cfb8:	a805      	add	r0, sp, #20
 800cfba:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800cfbe:	f007 fdf5 	bl	8014bac <rcl_init_options_init>
 800cfc2:	4605      	mov	r5, r0
 800cfc4:	b9e0      	cbnz	r0, 800d000 <rclc_support_init+0x6c>
 800cfc6:	ad02      	add	r5, sp, #8
 800cfc8:	4628      	mov	r0, r5
 800cfca:	f007 fc61 	bl	8014890 <rcl_get_zero_initialized_context>
 800cfce:	e895 0003 	ldmia.w	r5, {r0, r1}
 800cfd2:	4633      	mov	r3, r6
 800cfd4:	e886 0003 	stmia.w	r6, {r0, r1}
 800cfd8:	aa05      	add	r2, sp, #20
 800cfda:	4641      	mov	r1, r8
 800cfdc:	4638      	mov	r0, r7
 800cfde:	f007 fcc7 	bl	8014970 <rcl_init>
 800cfe2:	4605      	mov	r5, r0
 800cfe4:	b9b8      	cbnz	r0, 800d016 <rclc_support_init+0x82>
 800cfe6:	60b4      	str	r4, [r6, #8]
 800cfe8:	4622      	mov	r2, r4
 800cfea:	f106 010c 	add.w	r1, r6, #12
 800cfee:	2003      	movs	r0, #3
 800cff0:	f008 fcc6 	bl	8015980 <rcl_clock_init>
 800cff4:	4605      	mov	r5, r0
 800cff6:	b970      	cbnz	r0, 800d016 <rclc_support_init+0x82>
 800cff8:	a805      	add	r0, sp, #20
 800cffa:	f007 fe33 	bl	8014c64 <rcl_init_options_fini>
 800cffe:	b108      	cbz	r0, 800d004 <rclc_support_init+0x70>
 800d000:	f000 f952 	bl	800d2a8 <rcutils_reset_error>
 800d004:	4628      	mov	r0, r5
 800d006:	b006      	add	sp, #24
 800d008:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d00c:	250b      	movs	r5, #11
 800d00e:	4628      	mov	r0, r5
 800d010:	b006      	add	sp, #24
 800d012:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d016:	f000 f947 	bl	800d2a8 <rcutils_reset_error>
 800d01a:	a805      	add	r0, sp, #20
 800d01c:	f007 fe22 	bl	8014c64 <rcl_init_options_fini>
 800d020:	2800      	cmp	r0, #0
 800d022:	d0ef      	beq.n	800d004 <rclc_support_init+0x70>
 800d024:	e7ec      	b.n	800d000 <rclc_support_init+0x6c>
 800d026:	bf00      	nop

0800d028 <rclc_node_init_default>:
 800d028:	b3b8      	cbz	r0, 800d09a <rclc_node_init_default+0x72>
 800d02a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d02e:	460d      	mov	r5, r1
 800d030:	b0a1      	sub	sp, #132	@ 0x84
 800d032:	b329      	cbz	r1, 800d080 <rclc_node_init_default+0x58>
 800d034:	4616      	mov	r6, r2
 800d036:	b31a      	cbz	r2, 800d080 <rclc_node_init_default+0x58>
 800d038:	461f      	mov	r7, r3
 800d03a:	b30b      	cbz	r3, 800d080 <rclc_node_init_default+0x58>
 800d03c:	f10d 0810 	add.w	r8, sp, #16
 800d040:	4604      	mov	r4, r0
 800d042:	4640      	mov	r0, r8
 800d044:	f007 feb6 	bl	8014db4 <rcl_get_zero_initialized_node>
 800d048:	e898 0003 	ldmia.w	r8, {r0, r1}
 800d04c:	f10d 0918 	add.w	r9, sp, #24
 800d050:	e884 0003 	stmia.w	r4, {r0, r1}
 800d054:	4648      	mov	r0, r9
 800d056:	f008 f855 	bl	8015104 <rcl_node_get_default_options>
 800d05a:	4640      	mov	r0, r8
 800d05c:	f007 feaa 	bl	8014db4 <rcl_get_zero_initialized_node>
 800d060:	f8cd 9000 	str.w	r9, [sp]
 800d064:	e898 0003 	ldmia.w	r8, {r0, r1}
 800d068:	463b      	mov	r3, r7
 800d06a:	e884 0003 	stmia.w	r4, {r0, r1}
 800d06e:	4632      	mov	r2, r6
 800d070:	4629      	mov	r1, r5
 800d072:	4620      	mov	r0, r4
 800d074:	f007 fea8 	bl	8014dc8 <rcl_node_init>
 800d078:	b930      	cbnz	r0, 800d088 <rclc_node_init_default+0x60>
 800d07a:	b021      	add	sp, #132	@ 0x84
 800d07c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d080:	200b      	movs	r0, #11
 800d082:	b021      	add	sp, #132	@ 0x84
 800d084:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d088:	9003      	str	r0, [sp, #12]
 800d08a:	f000 f90d 	bl	800d2a8 <rcutils_reset_error>
 800d08e:	f000 f90b 	bl	800d2a8 <rcutils_reset_error>
 800d092:	9803      	ldr	r0, [sp, #12]
 800d094:	b021      	add	sp, #132	@ 0x84
 800d096:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d09a:	200b      	movs	r0, #11
 800d09c:	4770      	bx	lr
 800d09e:	bf00      	nop

0800d0a0 <rclc_publisher_init_best_effort>:
 800d0a0:	b368      	cbz	r0, 800d0fe <rclc_publisher_init_best_effort+0x5e>
 800d0a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0a6:	460d      	mov	r5, r1
 800d0a8:	b0a0      	sub	sp, #128	@ 0x80
 800d0aa:	b321      	cbz	r1, 800d0f6 <rclc_publisher_init_best_effort+0x56>
 800d0ac:	4616      	mov	r6, r2
 800d0ae:	b312      	cbz	r2, 800d0f6 <rclc_publisher_init_best_effort+0x56>
 800d0b0:	461f      	mov	r7, r3
 800d0b2:	b303      	cbz	r3, 800d0f6 <rclc_publisher_init_best_effort+0x56>
 800d0b4:	4604      	mov	r4, r0
 800d0b6:	f7ff f859 	bl	800c16c <rcl_get_zero_initialized_publisher>
 800d0ba:	f10d 0810 	add.w	r8, sp, #16
 800d0be:	6020      	str	r0, [r4, #0]
 800d0c0:	4640      	mov	r0, r8
 800d0c2:	f7ff f8f1 	bl	800c2a8 <rcl_publisher_get_default_options>
 800d0c6:	490f      	ldr	r1, [pc, #60]	@ (800d104 <rclc_publisher_init_best_effort+0x64>)
 800d0c8:	2250      	movs	r2, #80	@ 0x50
 800d0ca:	4640      	mov	r0, r8
 800d0cc:	f010 fa75 	bl	801d5ba <memcpy>
 800d0d0:	f8cd 8000 	str.w	r8, [sp]
 800d0d4:	463b      	mov	r3, r7
 800d0d6:	4632      	mov	r2, r6
 800d0d8:	4629      	mov	r1, r5
 800d0da:	4620      	mov	r0, r4
 800d0dc:	f7ff f84c 	bl	800c178 <rcl_publisher_init>
 800d0e0:	b910      	cbnz	r0, 800d0e8 <rclc_publisher_init_best_effort+0x48>
 800d0e2:	b020      	add	sp, #128	@ 0x80
 800d0e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0e8:	9003      	str	r0, [sp, #12]
 800d0ea:	f000 f8dd 	bl	800d2a8 <rcutils_reset_error>
 800d0ee:	9803      	ldr	r0, [sp, #12]
 800d0f0:	b020      	add	sp, #128	@ 0x80
 800d0f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0f6:	200b      	movs	r0, #11
 800d0f8:	b020      	add	sp, #128	@ 0x80
 800d0fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0fe:	200b      	movs	r0, #11
 800d100:	4770      	bx	lr
 800d102:	bf00      	nop
 800d104:	0801fc70 	.word	0x0801fc70

0800d108 <rclc_service_init_default>:
 800d108:	b368      	cbz	r0, 800d166 <rclc_service_init_default+0x5e>
 800d10a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d10e:	460d      	mov	r5, r1
 800d110:	b09e      	sub	sp, #120	@ 0x78
 800d112:	b321      	cbz	r1, 800d15e <rclc_service_init_default+0x56>
 800d114:	4616      	mov	r6, r2
 800d116:	b312      	cbz	r2, 800d15e <rclc_service_init_default+0x56>
 800d118:	461f      	mov	r7, r3
 800d11a:	b303      	cbz	r3, 800d15e <rclc_service_init_default+0x56>
 800d11c:	4604      	mov	r4, r0
 800d11e:	f008 f8e1 	bl	80152e4 <rcl_get_zero_initialized_service>
 800d122:	f10d 0810 	add.w	r8, sp, #16
 800d126:	6020      	str	r0, [r4, #0]
 800d128:	4640      	mov	r0, r8
 800d12a:	f008 f985 	bl	8015438 <rcl_service_get_default_options>
 800d12e:	490f      	ldr	r1, [pc, #60]	@ (800d16c <rclc_service_init_default+0x64>)
 800d130:	2250      	movs	r2, #80	@ 0x50
 800d132:	4640      	mov	r0, r8
 800d134:	f010 fa41 	bl	801d5ba <memcpy>
 800d138:	f8cd 8000 	str.w	r8, [sp]
 800d13c:	463b      	mov	r3, r7
 800d13e:	4632      	mov	r2, r6
 800d140:	4629      	mov	r1, r5
 800d142:	4620      	mov	r0, r4
 800d144:	f008 f8d4 	bl	80152f0 <rcl_service_init>
 800d148:	b910      	cbnz	r0, 800d150 <rclc_service_init_default+0x48>
 800d14a:	b01e      	add	sp, #120	@ 0x78
 800d14c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d150:	9003      	str	r0, [sp, #12]
 800d152:	f000 f8a9 	bl	800d2a8 <rcutils_reset_error>
 800d156:	9803      	ldr	r0, [sp, #12]
 800d158:	b01e      	add	sp, #120	@ 0x78
 800d15a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d15e:	200b      	movs	r0, #11
 800d160:	b01e      	add	sp, #120	@ 0x78
 800d162:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d166:	200b      	movs	r0, #11
 800d168:	4770      	bx	lr
 800d16a:	bf00      	nop
 800d16c:	0801fcc0 	.word	0x0801fcc0

0800d170 <rclc_subscription_init_default>:
 800d170:	b368      	cbz	r0, 800d1ce <rclc_subscription_init_default+0x5e>
 800d172:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d176:	460d      	mov	r5, r1
 800d178:	b0a2      	sub	sp, #136	@ 0x88
 800d17a:	b321      	cbz	r1, 800d1c6 <rclc_subscription_init_default+0x56>
 800d17c:	4616      	mov	r6, r2
 800d17e:	b312      	cbz	r2, 800d1c6 <rclc_subscription_init_default+0x56>
 800d180:	461f      	mov	r7, r3
 800d182:	b303      	cbz	r3, 800d1c6 <rclc_subscription_init_default+0x56>
 800d184:	4604      	mov	r4, r0
 800d186:	f008 fa93 	bl	80156b0 <rcl_get_zero_initialized_subscription>
 800d18a:	f10d 0810 	add.w	r8, sp, #16
 800d18e:	6020      	str	r0, [r4, #0]
 800d190:	4640      	mov	r0, r8
 800d192:	f008 fb3b 	bl	801580c <rcl_subscription_get_default_options>
 800d196:	490f      	ldr	r1, [pc, #60]	@ (800d1d4 <rclc_subscription_init_default+0x64>)
 800d198:	2250      	movs	r2, #80	@ 0x50
 800d19a:	4640      	mov	r0, r8
 800d19c:	f010 fa0d 	bl	801d5ba <memcpy>
 800d1a0:	f8cd 8000 	str.w	r8, [sp]
 800d1a4:	463b      	mov	r3, r7
 800d1a6:	4632      	mov	r2, r6
 800d1a8:	4629      	mov	r1, r5
 800d1aa:	4620      	mov	r0, r4
 800d1ac:	f008 fa86 	bl	80156bc <rcl_subscription_init>
 800d1b0:	b910      	cbnz	r0, 800d1b8 <rclc_subscription_init_default+0x48>
 800d1b2:	b022      	add	sp, #136	@ 0x88
 800d1b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d1b8:	9003      	str	r0, [sp, #12]
 800d1ba:	f000 f875 	bl	800d2a8 <rcutils_reset_error>
 800d1be:	9803      	ldr	r0, [sp, #12]
 800d1c0:	b022      	add	sp, #136	@ 0x88
 800d1c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d1c6:	200b      	movs	r0, #11
 800d1c8:	b022      	add	sp, #136	@ 0x88
 800d1ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d1ce:	200b      	movs	r0, #11
 800d1d0:	4770      	bx	lr
 800d1d2:	bf00      	nop
 800d1d4:	0801fd10 	.word	0x0801fd10

0800d1d8 <__default_zero_allocate>:
 800d1d8:	f00f bce4 	b.w	801cba4 <calloc>

0800d1dc <__default_reallocate>:
 800d1dc:	f00f beb8 	b.w	801cf50 <realloc>

0800d1e0 <__default_deallocate>:
 800d1e0:	f00f bd5e 	b.w	801cca0 <free>

0800d1e4 <__default_allocate>:
 800d1e4:	f00f bd54 	b.w	801cc90 <malloc>

0800d1e8 <rcutils_get_zero_initialized_allocator>:
 800d1e8:	b510      	push	{r4, lr}
 800d1ea:	4c05      	ldr	r4, [pc, #20]	@ (800d200 <rcutils_get_zero_initialized_allocator+0x18>)
 800d1ec:	4686      	mov	lr, r0
 800d1ee:	4684      	mov	ip, r0
 800d1f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d1f2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d1f6:	6823      	ldr	r3, [r4, #0]
 800d1f8:	f8cc 3000 	str.w	r3, [ip]
 800d1fc:	4670      	mov	r0, lr
 800d1fe:	bd10      	pop	{r4, pc}
 800d200:	0801fd60 	.word	0x0801fd60

0800d204 <rcutils_get_default_allocator>:
 800d204:	b510      	push	{r4, lr}
 800d206:	4c05      	ldr	r4, [pc, #20]	@ (800d21c <rcutils_get_default_allocator+0x18>)
 800d208:	4686      	mov	lr, r0
 800d20a:	4684      	mov	ip, r0
 800d20c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d20e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d212:	6823      	ldr	r3, [r4, #0]
 800d214:	f8cc 3000 	str.w	r3, [ip]
 800d218:	4670      	mov	r0, lr
 800d21a:	bd10      	pop	{r4, pc}
 800d21c:	20000588 	.word	0x20000588

0800d220 <rcutils_set_default_allocator>:
 800d220:	b1a8      	cbz	r0, 800d24e <rcutils_set_default_allocator+0x2e>
 800d222:	6802      	ldr	r2, [r0, #0]
 800d224:	b1a2      	cbz	r2, 800d250 <rcutils_set_default_allocator+0x30>
 800d226:	6841      	ldr	r1, [r0, #4]
 800d228:	b1a1      	cbz	r1, 800d254 <rcutils_set_default_allocator+0x34>
 800d22a:	b410      	push	{r4}
 800d22c:	68c4      	ldr	r4, [r0, #12]
 800d22e:	b164      	cbz	r4, 800d24a <rcutils_set_default_allocator+0x2a>
 800d230:	6880      	ldr	r0, [r0, #8]
 800d232:	b138      	cbz	r0, 800d244 <rcutils_set_default_allocator+0x24>
 800d234:	4b08      	ldr	r3, [pc, #32]	@ (800d258 <rcutils_set_default_allocator+0x38>)
 800d236:	601a      	str	r2, [r3, #0]
 800d238:	2200      	movs	r2, #0
 800d23a:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800d23e:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800d242:	2001      	movs	r0, #1
 800d244:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d248:	4770      	bx	lr
 800d24a:	4620      	mov	r0, r4
 800d24c:	e7fa      	b.n	800d244 <rcutils_set_default_allocator+0x24>
 800d24e:	4770      	bx	lr
 800d250:	4610      	mov	r0, r2
 800d252:	4770      	bx	lr
 800d254:	4608      	mov	r0, r1
 800d256:	4770      	bx	lr
 800d258:	20000588 	.word	0x20000588

0800d25c <rcutils_allocator_is_valid>:
 800d25c:	b158      	cbz	r0, 800d276 <rcutils_allocator_is_valid+0x1a>
 800d25e:	6803      	ldr	r3, [r0, #0]
 800d260:	b143      	cbz	r3, 800d274 <rcutils_allocator_is_valid+0x18>
 800d262:	6843      	ldr	r3, [r0, #4]
 800d264:	b133      	cbz	r3, 800d274 <rcutils_allocator_is_valid+0x18>
 800d266:	68c3      	ldr	r3, [r0, #12]
 800d268:	b123      	cbz	r3, 800d274 <rcutils_allocator_is_valid+0x18>
 800d26a:	6880      	ldr	r0, [r0, #8]
 800d26c:	3800      	subs	r0, #0
 800d26e:	bf18      	it	ne
 800d270:	2001      	movne	r0, #1
 800d272:	4770      	bx	lr
 800d274:	4618      	mov	r0, r3
 800d276:	4770      	bx	lr

0800d278 <rcutils_get_error_string>:
 800d278:	4b06      	ldr	r3, [pc, #24]	@ (800d294 <rcutils_get_error_string+0x1c>)
 800d27a:	781b      	ldrb	r3, [r3, #0]
 800d27c:	b13b      	cbz	r3, 800d28e <rcutils_get_error_string+0x16>
 800d27e:	4b06      	ldr	r3, [pc, #24]	@ (800d298 <rcutils_get_error_string+0x20>)
 800d280:	781a      	ldrb	r2, [r3, #0]
 800d282:	b90a      	cbnz	r2, 800d288 <rcutils_get_error_string+0x10>
 800d284:	2201      	movs	r2, #1
 800d286:	701a      	strb	r2, [r3, #0]
 800d288:	4b04      	ldr	r3, [pc, #16]	@ (800d29c <rcutils_get_error_string+0x24>)
 800d28a:	7818      	ldrb	r0, [r3, #0]
 800d28c:	4770      	bx	lr
 800d28e:	4b04      	ldr	r3, [pc, #16]	@ (800d2a0 <rcutils_get_error_string+0x28>)
 800d290:	7818      	ldrb	r0, [r3, #0]
 800d292:	4770      	bx	lr
 800d294:	200136b0 	.word	0x200136b0
 800d298:	200136b5 	.word	0x200136b5
 800d29c:	200136b4 	.word	0x200136b4
 800d2a0:	0801e8f8 	.word	0x0801e8f8
 800d2a4:	00000000 	.word	0x00000000

0800d2a8 <rcutils_reset_error>:
 800d2a8:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 800d2c8 <rcutils_reset_error+0x20>
 800d2ac:	4a08      	ldr	r2, [pc, #32]	@ (800d2d0 <rcutils_reset_error+0x28>)
 800d2ae:	4809      	ldr	r0, [pc, #36]	@ (800d2d4 <rcutils_reset_error+0x2c>)
 800d2b0:	4909      	ldr	r1, [pc, #36]	@ (800d2d8 <rcutils_reset_error+0x30>)
 800d2b2:	2300      	movs	r3, #0
 800d2b4:	8013      	strh	r3, [r2, #0]
 800d2b6:	ed82 7b02 	vstr	d7, [r2, #8]
 800d2ba:	4a08      	ldr	r2, [pc, #32]	@ (800d2dc <rcutils_reset_error+0x34>)
 800d2bc:	7003      	strb	r3, [r0, #0]
 800d2be:	700b      	strb	r3, [r1, #0]
 800d2c0:	7013      	strb	r3, [r2, #0]
 800d2c2:	4770      	bx	lr
 800d2c4:	f3af 8000 	nop.w
	...
 800d2d0:	200136b8 	.word	0x200136b8
 800d2d4:	200136b5 	.word	0x200136b5
 800d2d8:	200136b4 	.word	0x200136b4
 800d2dc:	200136b0 	.word	0x200136b0

0800d2e0 <rcutils_system_time_now>:
 800d2e0:	b318      	cbz	r0, 800d32a <rcutils_system_time_now+0x4a>
 800d2e2:	b570      	push	{r4, r5, r6, lr}
 800d2e4:	b084      	sub	sp, #16
 800d2e6:	4604      	mov	r4, r0
 800d2e8:	4669      	mov	r1, sp
 800d2ea:	2001      	movs	r0, #1
 800d2ec:	f7f5 f8a4 	bl	8002438 <clock_gettime>
 800d2f0:	2800      	cmp	r0, #0
 800d2f2:	db17      	blt.n	800d324 <rcutils_system_time_now+0x44>
 800d2f4:	e9dd 3100 	ldrd	r3, r1, [sp]
 800d2f8:	2900      	cmp	r1, #0
 800d2fa:	db13      	blt.n	800d324 <rcutils_system_time_now+0x44>
 800d2fc:	9d02      	ldr	r5, [sp, #8]
 800d2fe:	2d00      	cmp	r5, #0
 800d300:	db0d      	blt.n	800d31e <rcutils_system_time_now+0x3e>
 800d302:	4e0b      	ldr	r6, [pc, #44]	@ (800d330 <rcutils_system_time_now+0x50>)
 800d304:	fba3 3206 	umull	r3, r2, r3, r6
 800d308:	195b      	adds	r3, r3, r5
 800d30a:	fb06 2201 	mla	r2, r6, r1, r2
 800d30e:	f04f 0000 	mov.w	r0, #0
 800d312:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 800d316:	e9c4 3200 	strd	r3, r2, [r4]
 800d31a:	b004      	add	sp, #16
 800d31c:	bd70      	pop	{r4, r5, r6, pc}
 800d31e:	ea53 0201 	orrs.w	r2, r3, r1
 800d322:	d1ee      	bne.n	800d302 <rcutils_system_time_now+0x22>
 800d324:	2002      	movs	r0, #2
 800d326:	b004      	add	sp, #16
 800d328:	bd70      	pop	{r4, r5, r6, pc}
 800d32a:	200b      	movs	r0, #11
 800d32c:	4770      	bx	lr
 800d32e:	bf00      	nop
 800d330:	3b9aca00 	.word	0x3b9aca00

0800d334 <rcutils_steady_time_now>:
 800d334:	b318      	cbz	r0, 800d37e <rcutils_steady_time_now+0x4a>
 800d336:	b570      	push	{r4, r5, r6, lr}
 800d338:	b084      	sub	sp, #16
 800d33a:	4604      	mov	r4, r0
 800d33c:	4669      	mov	r1, sp
 800d33e:	2000      	movs	r0, #0
 800d340:	f7f5 f87a 	bl	8002438 <clock_gettime>
 800d344:	2800      	cmp	r0, #0
 800d346:	db17      	blt.n	800d378 <rcutils_steady_time_now+0x44>
 800d348:	e9dd 3100 	ldrd	r3, r1, [sp]
 800d34c:	2900      	cmp	r1, #0
 800d34e:	db13      	blt.n	800d378 <rcutils_steady_time_now+0x44>
 800d350:	9d02      	ldr	r5, [sp, #8]
 800d352:	2d00      	cmp	r5, #0
 800d354:	db0d      	blt.n	800d372 <rcutils_steady_time_now+0x3e>
 800d356:	4e0b      	ldr	r6, [pc, #44]	@ (800d384 <rcutils_steady_time_now+0x50>)
 800d358:	fba3 3206 	umull	r3, r2, r3, r6
 800d35c:	195b      	adds	r3, r3, r5
 800d35e:	fb06 2201 	mla	r2, r6, r1, r2
 800d362:	f04f 0000 	mov.w	r0, #0
 800d366:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 800d36a:	e9c4 3200 	strd	r3, r2, [r4]
 800d36e:	b004      	add	sp, #16
 800d370:	bd70      	pop	{r4, r5, r6, pc}
 800d372:	ea53 0201 	orrs.w	r2, r3, r1
 800d376:	d1ee      	bne.n	800d356 <rcutils_steady_time_now+0x22>
 800d378:	2002      	movs	r0, #2
 800d37a:	b004      	add	sp, #16
 800d37c:	bd70      	pop	{r4, r5, r6, pc}
 800d37e:	200b      	movs	r0, #11
 800d380:	4770      	bx	lr
 800d382:	bf00      	nop
 800d384:	3b9aca00 	.word	0x3b9aca00

0800d388 <rmw_get_default_publisher_options>:
 800d388:	2200      	movs	r2, #0
 800d38a:	6002      	str	r2, [r0, #0]
 800d38c:	7102      	strb	r2, [r0, #4]
 800d38e:	4770      	bx	lr

0800d390 <rmw_uros_set_custom_transport>:
 800d390:	b470      	push	{r4, r5, r6}
 800d392:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800d396:	b162      	cbz	r2, 800d3b2 <rmw_uros_set_custom_transport+0x22>
 800d398:	b15b      	cbz	r3, 800d3b2 <rmw_uros_set_custom_transport+0x22>
 800d39a:	b155      	cbz	r5, 800d3b2 <rmw_uros_set_custom_transport+0x22>
 800d39c:	b14e      	cbz	r6, 800d3b2 <rmw_uros_set_custom_transport+0x22>
 800d39e:	4c06      	ldr	r4, [pc, #24]	@ (800d3b8 <rmw_uros_set_custom_transport+0x28>)
 800d3a0:	7020      	strb	r0, [r4, #0]
 800d3a2:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800d3a6:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800d3aa:	6166      	str	r6, [r4, #20]
 800d3ac:	2000      	movs	r0, #0
 800d3ae:	bc70      	pop	{r4, r5, r6}
 800d3b0:	4770      	bx	lr
 800d3b2:	200b      	movs	r0, #11
 800d3b4:	bc70      	pop	{r4, r5, r6}
 800d3b6:	4770      	bx	lr
 800d3b8:	200136c8 	.word	0x200136c8

0800d3bc <flush_session>:
 800d3bc:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 800d3be:	f004 beaf 	b.w	8012120 <uxr_run_session_until_confirm_delivery>
 800d3c2:	bf00      	nop

0800d3c4 <rmw_publish>:
 800d3c4:	2800      	cmp	r0, #0
 800d3c6:	d053      	beq.n	800d470 <rmw_publish+0xac>
 800d3c8:	b570      	push	{r4, r5, r6, lr}
 800d3ca:	460d      	mov	r5, r1
 800d3cc:	b08e      	sub	sp, #56	@ 0x38
 800d3ce:	2900      	cmp	r1, #0
 800d3d0:	d04b      	beq.n	800d46a <rmw_publish+0xa6>
 800d3d2:	4604      	mov	r4, r0
 800d3d4:	6800      	ldr	r0, [r0, #0]
 800d3d6:	f000 fd91 	bl	800defc <is_uxrce_rmw_identifier_valid>
 800d3da:	2800      	cmp	r0, #0
 800d3dc:	d045      	beq.n	800d46a <rmw_publish+0xa6>
 800d3de:	6866      	ldr	r6, [r4, #4]
 800d3e0:	2e00      	cmp	r6, #0
 800d3e2:	d042      	beq.n	800d46a <rmw_publish+0xa6>
 800d3e4:	69b4      	ldr	r4, [r6, #24]
 800d3e6:	4628      	mov	r0, r5
 800d3e8:	6923      	ldr	r3, [r4, #16]
 800d3ea:	4798      	blx	r3
 800d3ec:	69f3      	ldr	r3, [r6, #28]
 800d3ee:	9005      	str	r0, [sp, #20]
 800d3f0:	b113      	cbz	r3, 800d3f8 <rmw_publish+0x34>
 800d3f2:	a805      	add	r0, sp, #20
 800d3f4:	4798      	blx	r3
 800d3f6:	9805      	ldr	r0, [sp, #20]
 800d3f8:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800d3fc:	691b      	ldr	r3, [r3, #16]
 800d3fe:	9000      	str	r0, [sp, #0]
 800d400:	6972      	ldr	r2, [r6, #20]
 800d402:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800d404:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800d408:	ab06      	add	r3, sp, #24
 800d40a:	f005 fc6b 	bl	8012ce4 <uxr_prepare_output_stream>
 800d40e:	b1d8      	cbz	r0, 800d448 <rmw_publish+0x84>
 800d410:	68a3      	ldr	r3, [r4, #8]
 800d412:	a906      	add	r1, sp, #24
 800d414:	4628      	mov	r0, r5
 800d416:	4798      	blx	r3
 800d418:	6a33      	ldr	r3, [r6, #32]
 800d41a:	4604      	mov	r4, r0
 800d41c:	b10b      	cbz	r3, 800d422 <rmw_publish+0x5e>
 800d41e:	a806      	add	r0, sp, #24
 800d420:	4798      	blx	r3
 800d422:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 800d426:	f8d6 2080 	ldr.w	r2, [r6, #128]	@ 0x80
 800d42a:	2b01      	cmp	r3, #1
 800d42c:	6910      	ldr	r0, [r2, #16]
 800d42e:	d021      	beq.n	800d474 <rmw_publish+0xb0>
 800d430:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 800d432:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800d436:	f004 fe73 	bl	8012120 <uxr_run_session_until_confirm_delivery>
 800d43a:	4004      	ands	r4, r0
 800d43c:	b2e4      	uxtb	r4, r4
 800d43e:	f084 0001 	eor.w	r0, r4, #1
 800d442:	b2c0      	uxtb	r0, r0
 800d444:	b00e      	add	sp, #56	@ 0x38
 800d446:	bd70      	pop	{r4, r5, r6, pc}
 800d448:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800d44c:	6918      	ldr	r0, [r3, #16]
 800d44e:	4b0c      	ldr	r3, [pc, #48]	@ (800d480 <rmw_publish+0xbc>)
 800d450:	9301      	str	r3, [sp, #4]
 800d452:	9b05      	ldr	r3, [sp, #20]
 800d454:	9300      	str	r3, [sp, #0]
 800d456:	9602      	str	r6, [sp, #8]
 800d458:	6972      	ldr	r2, [r6, #20]
 800d45a:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800d45c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800d460:	ab06      	add	r3, sp, #24
 800d462:	f005 fc6f 	bl	8012d44 <uxr_prepare_output_stream_fragmented>
 800d466:	2800      	cmp	r0, #0
 800d468:	d1d2      	bne.n	800d410 <rmw_publish+0x4c>
 800d46a:	2001      	movs	r0, #1
 800d46c:	b00e      	add	sp, #56	@ 0x38
 800d46e:	bd70      	pop	{r4, r5, r6, pc}
 800d470:	2001      	movs	r0, #1
 800d472:	4770      	bx	lr
 800d474:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800d478:	f004 faba 	bl	80119f0 <uxr_flash_output_streams>
 800d47c:	e7df      	b.n	800d43e <rmw_publish+0x7a>
 800d47e:	bf00      	nop
 800d480:	0800d3bd 	.word	0x0800d3bd

0800d484 <rmw_create_publisher>:
 800d484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d488:	b087      	sub	sp, #28
 800d48a:	2800      	cmp	r0, #0
 800d48c:	f000 80c9 	beq.w	800d622 <rmw_create_publisher+0x19e>
 800d490:	460f      	mov	r7, r1
 800d492:	2900      	cmp	r1, #0
 800d494:	f000 80c5 	beq.w	800d622 <rmw_create_publisher+0x19e>
 800d498:	4604      	mov	r4, r0
 800d49a:	6800      	ldr	r0, [r0, #0]
 800d49c:	4615      	mov	r5, r2
 800d49e:	461e      	mov	r6, r3
 800d4a0:	f000 fd2c 	bl	800defc <is_uxrce_rmw_identifier_valid>
 800d4a4:	2800      	cmp	r0, #0
 800d4a6:	f000 80bc 	beq.w	800d622 <rmw_create_publisher+0x19e>
 800d4aa:	2d00      	cmp	r5, #0
 800d4ac:	f000 80b9 	beq.w	800d622 <rmw_create_publisher+0x19e>
 800d4b0:	782b      	ldrb	r3, [r5, #0]
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	f000 80b5 	beq.w	800d622 <rmw_create_publisher+0x19e>
 800d4b8:	2e00      	cmp	r6, #0
 800d4ba:	f000 80b2 	beq.w	800d622 <rmw_create_publisher+0x19e>
 800d4be:	485c      	ldr	r0, [pc, #368]	@ (800d630 <rmw_create_publisher+0x1ac>)
 800d4c0:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800d4c4:	f00a fd14 	bl	8017ef0 <get_memory>
 800d4c8:	2800      	cmp	r0, #0
 800d4ca:	f000 80aa 	beq.w	800d622 <rmw_create_publisher+0x19e>
 800d4ce:	6884      	ldr	r4, [r0, #8]
 800d4d0:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 800d4d4:	f00a fd92 	bl	8017ffc <rmw_get_implementation_identifier>
 800d4d8:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 800d4dc:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 800d4e0:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 800d4e4:	4628      	mov	r0, r5
 800d4e6:	f7f2 feeb 	bl	80002c0 <strlen>
 800d4ea:	3001      	adds	r0, #1
 800d4ec:	283c      	cmp	r0, #60	@ 0x3c
 800d4ee:	f104 0884 	add.w	r8, r4, #132	@ 0x84
 800d4f2:	f200 808f 	bhi.w	800d614 <rmw_create_publisher+0x190>
 800d4f6:	4a4f      	ldr	r2, [pc, #316]	@ (800d634 <rmw_create_publisher+0x1b0>)
 800d4f8:	462b      	mov	r3, r5
 800d4fa:	213c      	movs	r1, #60	@ 0x3c
 800d4fc:	4650      	mov	r0, sl
 800d4fe:	f00f fc79 	bl	801cdf4 <sniprintf>
 800d502:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800d506:	67e3      	str	r3, [r4, #124]	@ 0x7c
 800d508:	4631      	mov	r1, r6
 800d50a:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 800d50e:	2250      	movs	r2, #80	@ 0x50
 800d510:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800d514:	f010 f851 	bl	801d5ba <memcpy>
 800d518:	7a33      	ldrb	r3, [r6, #8]
 800d51a:	4947      	ldr	r1, [pc, #284]	@ (800d638 <rmw_create_publisher+0x1b4>)
 800d51c:	2b02      	cmp	r3, #2
 800d51e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d522:	bf0c      	ite	eq
 800d524:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 800d528:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 800d52c:	67a3      	str	r3, [r4, #120]	@ 0x78
 800d52e:	2300      	movs	r3, #0
 800d530:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800d534:	4638      	mov	r0, r7
 800d536:	f000 fcef 	bl	800df18 <get_message_typesupport_handle>
 800d53a:	2800      	cmp	r0, #0
 800d53c:	d06a      	beq.n	800d614 <rmw_create_publisher+0x190>
 800d53e:	6842      	ldr	r2, [r0, #4]
 800d540:	61a2      	str	r2, [r4, #24]
 800d542:	2a00      	cmp	r2, #0
 800d544:	d066      	beq.n	800d614 <rmw_create_publisher+0x190>
 800d546:	4629      	mov	r1, r5
 800d548:	4633      	mov	r3, r6
 800d54a:	4648      	mov	r0, r9
 800d54c:	f00a ffbe 	bl	80184cc <create_topic>
 800d550:	6260      	str	r0, [r4, #36]	@ 0x24
 800d552:	2800      	cmp	r0, #0
 800d554:	d062      	beq.n	800d61c <rmw_create_publisher+0x198>
 800d556:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d55a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d55e:	2103      	movs	r1, #3
 800d560:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 800d564:	1c42      	adds	r2, r0, #1
 800d566:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 800d56a:	f004 f913 	bl	8011794 <uxr_object_id>
 800d56e:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 800d572:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d576:	6120      	str	r0, [r4, #16]
 800d578:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 800d57c:	6910      	ldr	r0, [r2, #16]
 800d57e:	2506      	movs	r5, #6
 800d580:	9500      	str	r5, [sp, #0]
 800d582:	6819      	ldr	r1, [r3, #0]
 800d584:	6922      	ldr	r2, [r4, #16]
 800d586:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800d58a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800d58e:	f003 ff9f 	bl	80114d0 <uxr_buffer_create_publisher_bin>
 800d592:	4602      	mov	r2, r0
 800d594:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800d598:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800d59c:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800d5a0:	f000 fb8c 	bl	800dcbc <run_xrce_session>
 800d5a4:	b3b0      	cbz	r0, 800d614 <rmw_create_publisher+0x190>
 800d5a6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d5aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d5ae:	2105      	movs	r1, #5
 800d5b0:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 800d5b4:	1c42      	adds	r2, r0, #1
 800d5b6:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 800d5ba:	f004 f8eb 	bl	8011794 <uxr_object_id>
 800d5be:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800d5c2:	6160      	str	r0, [r4, #20]
 800d5c4:	4631      	mov	r1, r6
 800d5c6:	af04      	add	r7, sp, #16
 800d5c8:	691e      	ldr	r6, [r3, #16]
 800d5ca:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d5ce:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 800d5d2:	f8d3 a384 	ldr.w	sl, [r3, #900]	@ 0x384
 800d5d6:	4638      	mov	r0, r7
 800d5d8:	f000 fb90 	bl	800dcfc <convert_qos_profile>
 800d5dc:	9503      	str	r5, [sp, #12]
 800d5de:	e897 0003 	ldmia.w	r7, {r0, r1}
 800d5e2:	9001      	str	r0, [sp, #4]
 800d5e4:	f8ad 1008 	strh.w	r1, [sp, #8]
 800d5e8:	f8db 3010 	ldr.w	r3, [fp, #16]
 800d5ec:	9300      	str	r3, [sp, #0]
 800d5ee:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 800d5f2:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800d5f6:	f8da 1000 	ldr.w	r1, [sl]
 800d5fa:	4630      	mov	r0, r6
 800d5fc:	f003 ffc6 	bl	801158c <uxr_buffer_create_datawriter_bin>
 800d600:	4602      	mov	r2, r0
 800d602:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800d606:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800d60a:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800d60e:	f000 fb55 	bl	800dcbc <run_xrce_session>
 800d612:	b940      	cbnz	r0, 800d626 <rmw_create_publisher+0x1a2>
 800d614:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800d616:	b108      	cbz	r0, 800d61c <rmw_create_publisher+0x198>
 800d618:	f000 fa46 	bl	800daa8 <rmw_uxrce_fini_topic_memory>
 800d61c:	4640      	mov	r0, r8
 800d61e:	f000 f9eb 	bl	800d9f8 <rmw_uxrce_fini_publisher_memory>
 800d622:	f04f 0800 	mov.w	r8, #0
 800d626:	4640      	mov	r0, r8
 800d628:	b007      	add	sp, #28
 800d62a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d62e:	bf00      	nop
 800d630:	20017c88 	.word	0x20017c88
 800d634:	0801eddc 	.word	0x0801eddc
 800d638:	0801e868 	.word	0x0801e868

0800d63c <rmw_publisher_get_actual_qos>:
 800d63c:	b508      	push	{r3, lr}
 800d63e:	4603      	mov	r3, r0
 800d640:	b140      	cbz	r0, 800d654 <rmw_publisher_get_actual_qos+0x18>
 800d642:	4608      	mov	r0, r1
 800d644:	b131      	cbz	r1, 800d654 <rmw_publisher_get_actual_qos+0x18>
 800d646:	6859      	ldr	r1, [r3, #4]
 800d648:	2250      	movs	r2, #80	@ 0x50
 800d64a:	3128      	adds	r1, #40	@ 0x28
 800d64c:	f00f ffb5 	bl	801d5ba <memcpy>
 800d650:	2000      	movs	r0, #0
 800d652:	bd08      	pop	{r3, pc}
 800d654:	200b      	movs	r0, #11
 800d656:	bd08      	pop	{r3, pc}

0800d658 <rmw_destroy_publisher>:
 800d658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d65c:	b128      	cbz	r0, 800d66a <rmw_destroy_publisher+0x12>
 800d65e:	4604      	mov	r4, r0
 800d660:	6800      	ldr	r0, [r0, #0]
 800d662:	460d      	mov	r5, r1
 800d664:	f000 fc4a 	bl	800defc <is_uxrce_rmw_identifier_valid>
 800d668:	b918      	cbnz	r0, 800d672 <rmw_destroy_publisher+0x1a>
 800d66a:	2401      	movs	r4, #1
 800d66c:	4620      	mov	r0, r4
 800d66e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d672:	6863      	ldr	r3, [r4, #4]
 800d674:	2b00      	cmp	r3, #0
 800d676:	d0f8      	beq.n	800d66a <rmw_destroy_publisher+0x12>
 800d678:	2d00      	cmp	r5, #0
 800d67a:	d0f6      	beq.n	800d66a <rmw_destroy_publisher+0x12>
 800d67c:	6828      	ldr	r0, [r5, #0]
 800d67e:	f000 fc3d 	bl	800defc <is_uxrce_rmw_identifier_valid>
 800d682:	2800      	cmp	r0, #0
 800d684:	d0f1      	beq.n	800d66a <rmw_destroy_publisher+0x12>
 800d686:	686c      	ldr	r4, [r5, #4]
 800d688:	2c00      	cmp	r4, #0
 800d68a:	d0ee      	beq.n	800d66a <rmw_destroy_publisher+0x12>
 800d68c:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800d68e:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 800d692:	f00a ff6f 	bl	8018574 <destroy_topic>
 800d696:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800d69a:	6962      	ldr	r2, [r4, #20]
 800d69c:	6918      	ldr	r0, [r3, #16]
 800d69e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800d6a2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800d6a6:	6819      	ldr	r1, [r3, #0]
 800d6a8:	f003 fe62 	bl	8011370 <uxr_buffer_delete_entity>
 800d6ac:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800d6b0:	6922      	ldr	r2, [r4, #16]
 800d6b2:	4680      	mov	r8, r0
 800d6b4:	6918      	ldr	r0, [r3, #16]
 800d6b6:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800d6ba:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800d6be:	6819      	ldr	r1, [r3, #0]
 800d6c0:	f003 fe56 	bl	8011370 <uxr_buffer_delete_entity>
 800d6c4:	4606      	mov	r6, r0
 800d6c6:	6938      	ldr	r0, [r7, #16]
 800d6c8:	4642      	mov	r2, r8
 800d6ca:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800d6ce:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800d6d2:	f000 faf3 	bl	800dcbc <run_xrce_session>
 800d6d6:	4604      	mov	r4, r0
 800d6d8:	6938      	ldr	r0, [r7, #16]
 800d6da:	4632      	mov	r2, r6
 800d6dc:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800d6e0:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800d6e4:	f000 faea 	bl	800dcbc <run_xrce_session>
 800d6e8:	4004      	ands	r4, r0
 800d6ea:	f084 0401 	eor.w	r4, r4, #1
 800d6ee:	b2e4      	uxtb	r4, r4
 800d6f0:	4628      	mov	r0, r5
 800d6f2:	0064      	lsls	r4, r4, #1
 800d6f4:	f000 f980 	bl	800d9f8 <rmw_uxrce_fini_publisher_memory>
 800d6f8:	e7b8      	b.n	800d66c <rmw_destroy_publisher+0x14>
 800d6fa:	bf00      	nop

0800d6fc <rmw_uxrce_init_service_memory>:
 800d6fc:	b1e2      	cbz	r2, 800d738 <rmw_uxrce_init_service_memory+0x3c>
 800d6fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d702:	7b05      	ldrb	r5, [r0, #12]
 800d704:	4606      	mov	r6, r0
 800d706:	b9ad      	cbnz	r5, 800d734 <rmw_uxrce_init_service_memory+0x38>
 800d708:	23c8      	movs	r3, #200	@ 0xc8
 800d70a:	e9c0 5500 	strd	r5, r5, [r0]
 800d70e:	6083      	str	r3, [r0, #8]
 800d710:	f240 1301 	movw	r3, #257	@ 0x101
 800d714:	4617      	mov	r7, r2
 800d716:	8183      	strh	r3, [r0, #12]
 800d718:	460c      	mov	r4, r1
 800d71a:	46a8      	mov	r8, r5
 800d71c:	4621      	mov	r1, r4
 800d71e:	4630      	mov	r0, r6
 800d720:	3501      	adds	r5, #1
 800d722:	f00a fbf5 	bl	8017f10 <put_memory>
 800d726:	42af      	cmp	r7, r5
 800d728:	60a4      	str	r4, [r4, #8]
 800d72a:	f884 800c 	strb.w	r8, [r4, #12]
 800d72e:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800d732:	d1f3      	bne.n	800d71c <rmw_uxrce_init_service_memory+0x20>
 800d734:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d738:	4770      	bx	lr
 800d73a:	bf00      	nop

0800d73c <rmw_uxrce_init_client_memory>:
 800d73c:	b1e2      	cbz	r2, 800d778 <rmw_uxrce_init_client_memory+0x3c>
 800d73e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d742:	7b05      	ldrb	r5, [r0, #12]
 800d744:	4606      	mov	r6, r0
 800d746:	b9ad      	cbnz	r5, 800d774 <rmw_uxrce_init_client_memory+0x38>
 800d748:	23c8      	movs	r3, #200	@ 0xc8
 800d74a:	e9c0 5500 	strd	r5, r5, [r0]
 800d74e:	6083      	str	r3, [r0, #8]
 800d750:	f240 1301 	movw	r3, #257	@ 0x101
 800d754:	4617      	mov	r7, r2
 800d756:	8183      	strh	r3, [r0, #12]
 800d758:	460c      	mov	r4, r1
 800d75a:	46a8      	mov	r8, r5
 800d75c:	4621      	mov	r1, r4
 800d75e:	4630      	mov	r0, r6
 800d760:	3501      	adds	r5, #1
 800d762:	f00a fbd5 	bl	8017f10 <put_memory>
 800d766:	42af      	cmp	r7, r5
 800d768:	60a4      	str	r4, [r4, #8]
 800d76a:	f884 800c 	strb.w	r8, [r4, #12]
 800d76e:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800d772:	d1f3      	bne.n	800d75c <rmw_uxrce_init_client_memory+0x20>
 800d774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d778:	4770      	bx	lr
 800d77a:	bf00      	nop

0800d77c <rmw_uxrce_init_publisher_memory>:
 800d77c:	b1e2      	cbz	r2, 800d7b8 <rmw_uxrce_init_publisher_memory+0x3c>
 800d77e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d782:	7b05      	ldrb	r5, [r0, #12]
 800d784:	4606      	mov	r6, r0
 800d786:	b9ad      	cbnz	r5, 800d7b4 <rmw_uxrce_init_publisher_memory+0x38>
 800d788:	23d8      	movs	r3, #216	@ 0xd8
 800d78a:	e9c0 5500 	strd	r5, r5, [r0]
 800d78e:	6083      	str	r3, [r0, #8]
 800d790:	f240 1301 	movw	r3, #257	@ 0x101
 800d794:	4617      	mov	r7, r2
 800d796:	8183      	strh	r3, [r0, #12]
 800d798:	460c      	mov	r4, r1
 800d79a:	46a8      	mov	r8, r5
 800d79c:	4621      	mov	r1, r4
 800d79e:	4630      	mov	r0, r6
 800d7a0:	3501      	adds	r5, #1
 800d7a2:	f00a fbb5 	bl	8017f10 <put_memory>
 800d7a6:	42af      	cmp	r7, r5
 800d7a8:	60a4      	str	r4, [r4, #8]
 800d7aa:	f884 800c 	strb.w	r8, [r4, #12]
 800d7ae:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800d7b2:	d1f3      	bne.n	800d79c <rmw_uxrce_init_publisher_memory+0x20>
 800d7b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d7b8:	4770      	bx	lr
 800d7ba:	bf00      	nop

0800d7bc <rmw_uxrce_init_subscription_memory>:
 800d7bc:	b1e2      	cbz	r2, 800d7f8 <rmw_uxrce_init_subscription_memory+0x3c>
 800d7be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7c2:	7b05      	ldrb	r5, [r0, #12]
 800d7c4:	4606      	mov	r6, r0
 800d7c6:	b9ad      	cbnz	r5, 800d7f4 <rmw_uxrce_init_subscription_memory+0x38>
 800d7c8:	23d8      	movs	r3, #216	@ 0xd8
 800d7ca:	e9c0 5500 	strd	r5, r5, [r0]
 800d7ce:	6083      	str	r3, [r0, #8]
 800d7d0:	f240 1301 	movw	r3, #257	@ 0x101
 800d7d4:	4617      	mov	r7, r2
 800d7d6:	8183      	strh	r3, [r0, #12]
 800d7d8:	460c      	mov	r4, r1
 800d7da:	46a8      	mov	r8, r5
 800d7dc:	4621      	mov	r1, r4
 800d7de:	4630      	mov	r0, r6
 800d7e0:	3501      	adds	r5, #1
 800d7e2:	f00a fb95 	bl	8017f10 <put_memory>
 800d7e6:	42af      	cmp	r7, r5
 800d7e8:	60a4      	str	r4, [r4, #8]
 800d7ea:	f884 800c 	strb.w	r8, [r4, #12]
 800d7ee:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800d7f2:	d1f3      	bne.n	800d7dc <rmw_uxrce_init_subscription_memory+0x20>
 800d7f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d7f8:	4770      	bx	lr
 800d7fa:	bf00      	nop

0800d7fc <rmw_uxrce_init_node_memory>:
 800d7fc:	b1e2      	cbz	r2, 800d838 <rmw_uxrce_init_node_memory+0x3c>
 800d7fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d802:	7b05      	ldrb	r5, [r0, #12]
 800d804:	4606      	mov	r6, r0
 800d806:	b9ad      	cbnz	r5, 800d834 <rmw_uxrce_init_node_memory+0x38>
 800d808:	23a4      	movs	r3, #164	@ 0xa4
 800d80a:	e9c0 5500 	strd	r5, r5, [r0]
 800d80e:	6083      	str	r3, [r0, #8]
 800d810:	f240 1301 	movw	r3, #257	@ 0x101
 800d814:	4617      	mov	r7, r2
 800d816:	8183      	strh	r3, [r0, #12]
 800d818:	460c      	mov	r4, r1
 800d81a:	46a8      	mov	r8, r5
 800d81c:	4621      	mov	r1, r4
 800d81e:	4630      	mov	r0, r6
 800d820:	3501      	adds	r5, #1
 800d822:	f00a fb75 	bl	8017f10 <put_memory>
 800d826:	42af      	cmp	r7, r5
 800d828:	60a4      	str	r4, [r4, #8]
 800d82a:	f884 800c 	strb.w	r8, [r4, #12]
 800d82e:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 800d832:	d1f3      	bne.n	800d81c <rmw_uxrce_init_node_memory+0x20>
 800d834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d838:	4770      	bx	lr
 800d83a:	bf00      	nop

0800d83c <rmw_uxrce_init_session_memory>:
 800d83c:	b1ea      	cbz	r2, 800d87a <rmw_uxrce_init_session_memory+0x3e>
 800d83e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d842:	7b05      	ldrb	r5, [r0, #12]
 800d844:	4606      	mov	r6, r0
 800d846:	b9b5      	cbnz	r5, 800d876 <rmw_uxrce_init_session_memory+0x3a>
 800d848:	e9c0 5500 	strd	r5, r5, [r0]
 800d84c:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 800d850:	f240 1301 	movw	r3, #257	@ 0x101
 800d854:	4617      	mov	r7, r2
 800d856:	f8c0 8008 	str.w	r8, [r0, #8]
 800d85a:	460c      	mov	r4, r1
 800d85c:	8183      	strh	r3, [r0, #12]
 800d85e:	46a9      	mov	r9, r5
 800d860:	4621      	mov	r1, r4
 800d862:	4630      	mov	r0, r6
 800d864:	3501      	adds	r5, #1
 800d866:	f00a fb53 	bl	8017f10 <put_memory>
 800d86a:	42af      	cmp	r7, r5
 800d86c:	60a4      	str	r4, [r4, #8]
 800d86e:	f884 900c 	strb.w	r9, [r4, #12]
 800d872:	4444      	add	r4, r8
 800d874:	d1f4      	bne.n	800d860 <rmw_uxrce_init_session_memory+0x24>
 800d876:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d87a:	4770      	bx	lr

0800d87c <rmw_uxrce_init_topic_memory>:
 800d87c:	b1e2      	cbz	r2, 800d8b8 <rmw_uxrce_init_topic_memory+0x3c>
 800d87e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d882:	7b05      	ldrb	r5, [r0, #12]
 800d884:	4606      	mov	r6, r0
 800d886:	b9ad      	cbnz	r5, 800d8b4 <rmw_uxrce_init_topic_memory+0x38>
 800d888:	231c      	movs	r3, #28
 800d88a:	e9c0 5500 	strd	r5, r5, [r0]
 800d88e:	6083      	str	r3, [r0, #8]
 800d890:	f240 1301 	movw	r3, #257	@ 0x101
 800d894:	4617      	mov	r7, r2
 800d896:	8183      	strh	r3, [r0, #12]
 800d898:	460c      	mov	r4, r1
 800d89a:	46a8      	mov	r8, r5
 800d89c:	4621      	mov	r1, r4
 800d89e:	4630      	mov	r0, r6
 800d8a0:	3501      	adds	r5, #1
 800d8a2:	f00a fb35 	bl	8017f10 <put_memory>
 800d8a6:	42af      	cmp	r7, r5
 800d8a8:	60a4      	str	r4, [r4, #8]
 800d8aa:	f884 800c 	strb.w	r8, [r4, #12]
 800d8ae:	f104 041c 	add.w	r4, r4, #28
 800d8b2:	d1f3      	bne.n	800d89c <rmw_uxrce_init_topic_memory+0x20>
 800d8b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d8b8:	4770      	bx	lr
 800d8ba:	bf00      	nop

0800d8bc <rmw_uxrce_init_static_input_buffer_memory>:
 800d8bc:	b1ea      	cbz	r2, 800d8fa <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800d8be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d8c2:	7b05      	ldrb	r5, [r0, #12]
 800d8c4:	4606      	mov	r6, r0
 800d8c6:	b9b5      	cbnz	r5, 800d8f6 <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800d8c8:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 800d8cc:	e9c0 5500 	strd	r5, r5, [r0]
 800d8d0:	6083      	str	r3, [r0, #8]
 800d8d2:	f240 1301 	movw	r3, #257	@ 0x101
 800d8d6:	4617      	mov	r7, r2
 800d8d8:	8183      	strh	r3, [r0, #12]
 800d8da:	460c      	mov	r4, r1
 800d8dc:	46a8      	mov	r8, r5
 800d8de:	4621      	mov	r1, r4
 800d8e0:	4630      	mov	r0, r6
 800d8e2:	3501      	adds	r5, #1
 800d8e4:	f00a fb14 	bl	8017f10 <put_memory>
 800d8e8:	42af      	cmp	r7, r5
 800d8ea:	60a4      	str	r4, [r4, #8]
 800d8ec:	f884 800c 	strb.w	r8, [r4, #12]
 800d8f0:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 800d8f4:	d1f3      	bne.n	800d8de <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800d8f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d8fa:	4770      	bx	lr

0800d8fc <rmw_uxrce_init_init_options_impl_memory>:
 800d8fc:	b1e2      	cbz	r2, 800d938 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800d8fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d902:	7b05      	ldrb	r5, [r0, #12]
 800d904:	4606      	mov	r6, r0
 800d906:	b9ad      	cbnz	r5, 800d934 <rmw_uxrce_init_init_options_impl_memory+0x38>
 800d908:	232c      	movs	r3, #44	@ 0x2c
 800d90a:	e9c0 5500 	strd	r5, r5, [r0]
 800d90e:	6083      	str	r3, [r0, #8]
 800d910:	f240 1301 	movw	r3, #257	@ 0x101
 800d914:	4617      	mov	r7, r2
 800d916:	8183      	strh	r3, [r0, #12]
 800d918:	460c      	mov	r4, r1
 800d91a:	46a8      	mov	r8, r5
 800d91c:	4621      	mov	r1, r4
 800d91e:	4630      	mov	r0, r6
 800d920:	3501      	adds	r5, #1
 800d922:	f00a faf5 	bl	8017f10 <put_memory>
 800d926:	42af      	cmp	r7, r5
 800d928:	60a4      	str	r4, [r4, #8]
 800d92a:	f884 800c 	strb.w	r8, [r4, #12]
 800d92e:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 800d932:	d1f3      	bne.n	800d91c <rmw_uxrce_init_init_options_impl_memory+0x20>
 800d934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d938:	4770      	bx	lr
 800d93a:	bf00      	nop

0800d93c <rmw_uxrce_init_wait_set_memory>:
 800d93c:	b1e2      	cbz	r2, 800d978 <rmw_uxrce_init_wait_set_memory+0x3c>
 800d93e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d942:	7b05      	ldrb	r5, [r0, #12]
 800d944:	4606      	mov	r6, r0
 800d946:	b9ad      	cbnz	r5, 800d974 <rmw_uxrce_init_wait_set_memory+0x38>
 800d948:	231c      	movs	r3, #28
 800d94a:	e9c0 5500 	strd	r5, r5, [r0]
 800d94e:	6083      	str	r3, [r0, #8]
 800d950:	f240 1301 	movw	r3, #257	@ 0x101
 800d954:	4617      	mov	r7, r2
 800d956:	8183      	strh	r3, [r0, #12]
 800d958:	460c      	mov	r4, r1
 800d95a:	46a8      	mov	r8, r5
 800d95c:	4621      	mov	r1, r4
 800d95e:	4630      	mov	r0, r6
 800d960:	3501      	adds	r5, #1
 800d962:	f00a fad5 	bl	8017f10 <put_memory>
 800d966:	42af      	cmp	r7, r5
 800d968:	60a4      	str	r4, [r4, #8]
 800d96a:	f884 800c 	strb.w	r8, [r4, #12]
 800d96e:	f104 041c 	add.w	r4, r4, #28
 800d972:	d1f3      	bne.n	800d95c <rmw_uxrce_init_wait_set_memory+0x20>
 800d974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d978:	4770      	bx	lr
 800d97a:	bf00      	nop

0800d97c <rmw_uxrce_init_guard_condition_memory>:
 800d97c:	b1e2      	cbz	r2, 800d9b8 <rmw_uxrce_init_guard_condition_memory+0x3c>
 800d97e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d982:	7b05      	ldrb	r5, [r0, #12]
 800d984:	4606      	mov	r6, r0
 800d986:	b9ad      	cbnz	r5, 800d9b4 <rmw_uxrce_init_guard_condition_memory+0x38>
 800d988:	2320      	movs	r3, #32
 800d98a:	e9c0 5500 	strd	r5, r5, [r0]
 800d98e:	6083      	str	r3, [r0, #8]
 800d990:	f240 1301 	movw	r3, #257	@ 0x101
 800d994:	4617      	mov	r7, r2
 800d996:	8183      	strh	r3, [r0, #12]
 800d998:	460c      	mov	r4, r1
 800d99a:	46a8      	mov	r8, r5
 800d99c:	4621      	mov	r1, r4
 800d99e:	4630      	mov	r0, r6
 800d9a0:	3501      	adds	r5, #1
 800d9a2:	f00a fab5 	bl	8017f10 <put_memory>
 800d9a6:	42af      	cmp	r7, r5
 800d9a8:	60a4      	str	r4, [r4, #8]
 800d9aa:	f884 800c 	strb.w	r8, [r4, #12]
 800d9ae:	f104 0420 	add.w	r4, r4, #32
 800d9b2:	d1f3      	bne.n	800d99c <rmw_uxrce_init_guard_condition_memory+0x20>
 800d9b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d9b8:	4770      	bx	lr
 800d9ba:	bf00      	nop

0800d9bc <rmw_uxrce_fini_session_memory>:
 800d9bc:	4601      	mov	r1, r0
 800d9be:	4801      	ldr	r0, [pc, #4]	@ (800d9c4 <rmw_uxrce_fini_session_memory+0x8>)
 800d9c0:	f00a baa6 	b.w	8017f10 <put_memory>
 800d9c4:	200192f8 	.word	0x200192f8

0800d9c8 <rmw_uxrce_fini_node_memory>:
 800d9c8:	b538      	push	{r3, r4, r5, lr}
 800d9ca:	4604      	mov	r4, r0
 800d9cc:	6800      	ldr	r0, [r0, #0]
 800d9ce:	b128      	cbz	r0, 800d9dc <rmw_uxrce_fini_node_memory+0x14>
 800d9d0:	4b07      	ldr	r3, [pc, #28]	@ (800d9f0 <rmw_uxrce_fini_node_memory+0x28>)
 800d9d2:	6819      	ldr	r1, [r3, #0]
 800d9d4:	f7f2 fc14 	bl	8000200 <strcmp>
 800d9d8:	b940      	cbnz	r0, 800d9ec <rmw_uxrce_fini_node_memory+0x24>
 800d9da:	6020      	str	r0, [r4, #0]
 800d9dc:	6861      	ldr	r1, [r4, #4]
 800d9de:	b129      	cbz	r1, 800d9ec <rmw_uxrce_fini_node_memory+0x24>
 800d9e0:	2500      	movs	r5, #0
 800d9e2:	4804      	ldr	r0, [pc, #16]	@ (800d9f4 <rmw_uxrce_fini_node_memory+0x2c>)
 800d9e4:	610d      	str	r5, [r1, #16]
 800d9e6:	f00a fa93 	bl	8017f10 <put_memory>
 800d9ea:	6065      	str	r5, [r4, #4]
 800d9ec:	bd38      	pop	{r3, r4, r5, pc}
 800d9ee:	bf00      	nop
 800d9f0:	08020330 	.word	0x08020330
 800d9f4:	20017d3c 	.word	0x20017d3c

0800d9f8 <rmw_uxrce_fini_publisher_memory>:
 800d9f8:	b510      	push	{r4, lr}
 800d9fa:	4604      	mov	r4, r0
 800d9fc:	6800      	ldr	r0, [r0, #0]
 800d9fe:	b128      	cbz	r0, 800da0c <rmw_uxrce_fini_publisher_memory+0x14>
 800da00:	4b06      	ldr	r3, [pc, #24]	@ (800da1c <rmw_uxrce_fini_publisher_memory+0x24>)
 800da02:	6819      	ldr	r1, [r3, #0]
 800da04:	f7f2 fbfc 	bl	8000200 <strcmp>
 800da08:	b938      	cbnz	r0, 800da1a <rmw_uxrce_fini_publisher_memory+0x22>
 800da0a:	6020      	str	r0, [r4, #0]
 800da0c:	6861      	ldr	r1, [r4, #4]
 800da0e:	b121      	cbz	r1, 800da1a <rmw_uxrce_fini_publisher_memory+0x22>
 800da10:	4803      	ldr	r0, [pc, #12]	@ (800da20 <rmw_uxrce_fini_publisher_memory+0x28>)
 800da12:	f00a fa7d 	bl	8017f10 <put_memory>
 800da16:	2300      	movs	r3, #0
 800da18:	6063      	str	r3, [r4, #4]
 800da1a:	bd10      	pop	{r4, pc}
 800da1c:	08020330 	.word	0x08020330
 800da20:	20017c88 	.word	0x20017c88

0800da24 <rmw_uxrce_fini_subscription_memory>:
 800da24:	b510      	push	{r4, lr}
 800da26:	4604      	mov	r4, r0
 800da28:	6800      	ldr	r0, [r0, #0]
 800da2a:	b128      	cbz	r0, 800da38 <rmw_uxrce_fini_subscription_memory+0x14>
 800da2c:	4b06      	ldr	r3, [pc, #24]	@ (800da48 <rmw_uxrce_fini_subscription_memory+0x24>)
 800da2e:	6819      	ldr	r1, [r3, #0]
 800da30:	f7f2 fbe6 	bl	8000200 <strcmp>
 800da34:	b938      	cbnz	r0, 800da46 <rmw_uxrce_fini_subscription_memory+0x22>
 800da36:	6020      	str	r0, [r4, #0]
 800da38:	6861      	ldr	r1, [r4, #4]
 800da3a:	b121      	cbz	r1, 800da46 <rmw_uxrce_fini_subscription_memory+0x22>
 800da3c:	4803      	ldr	r0, [pc, #12]	@ (800da4c <rmw_uxrce_fini_subscription_memory+0x28>)
 800da3e:	f00a fa67 	bl	8017f10 <put_memory>
 800da42:	2300      	movs	r3, #0
 800da44:	6063      	str	r3, [r4, #4]
 800da46:	bd10      	pop	{r4, pc}
 800da48:	08020330 	.word	0x08020330
 800da4c:	20017408 	.word	0x20017408

0800da50 <rmw_uxrce_fini_service_memory>:
 800da50:	b510      	push	{r4, lr}
 800da52:	4604      	mov	r4, r0
 800da54:	6800      	ldr	r0, [r0, #0]
 800da56:	b128      	cbz	r0, 800da64 <rmw_uxrce_fini_service_memory+0x14>
 800da58:	4b06      	ldr	r3, [pc, #24]	@ (800da74 <rmw_uxrce_fini_service_memory+0x24>)
 800da5a:	6819      	ldr	r1, [r3, #0]
 800da5c:	f7f2 fbd0 	bl	8000200 <strcmp>
 800da60:	b938      	cbnz	r0, 800da72 <rmw_uxrce_fini_service_memory+0x22>
 800da62:	6020      	str	r0, [r4, #0]
 800da64:	6861      	ldr	r1, [r4, #4]
 800da66:	b121      	cbz	r1, 800da72 <rmw_uxrce_fini_service_memory+0x22>
 800da68:	4803      	ldr	r0, [pc, #12]	@ (800da78 <rmw_uxrce_fini_service_memory+0x28>)
 800da6a:	f00a fa51 	bl	8017f10 <put_memory>
 800da6e:	2300      	movs	r3, #0
 800da70:	6063      	str	r3, [r4, #4]
 800da72:	bd10      	pop	{r4, pc}
 800da74:	08020330 	.word	0x08020330
 800da78:	20016b88 	.word	0x20016b88

0800da7c <rmw_uxrce_fini_client_memory>:
 800da7c:	b510      	push	{r4, lr}
 800da7e:	4604      	mov	r4, r0
 800da80:	6800      	ldr	r0, [r0, #0]
 800da82:	b128      	cbz	r0, 800da90 <rmw_uxrce_fini_client_memory+0x14>
 800da84:	4b06      	ldr	r3, [pc, #24]	@ (800daa0 <rmw_uxrce_fini_client_memory+0x24>)
 800da86:	6819      	ldr	r1, [r3, #0]
 800da88:	f7f2 fbba 	bl	8000200 <strcmp>
 800da8c:	b938      	cbnz	r0, 800da9e <rmw_uxrce_fini_client_memory+0x22>
 800da8e:	6020      	str	r0, [r4, #0]
 800da90:	6861      	ldr	r1, [r4, #4]
 800da92:	b121      	cbz	r1, 800da9e <rmw_uxrce_fini_client_memory+0x22>
 800da94:	4803      	ldr	r0, [pc, #12]	@ (800daa4 <rmw_uxrce_fini_client_memory+0x28>)
 800da96:	f00a fa3b 	bl	8017f10 <put_memory>
 800da9a:	2300      	movs	r3, #0
 800da9c:	6063      	str	r3, [r4, #4]
 800da9e:	bd10      	pop	{r4, pc}
 800daa0:	08020330 	.word	0x08020330
 800daa4:	200163a8 	.word	0x200163a8

0800daa8 <rmw_uxrce_fini_topic_memory>:
 800daa8:	b510      	push	{r4, lr}
 800daaa:	4604      	mov	r4, r0
 800daac:	4621      	mov	r1, r4
 800daae:	4803      	ldr	r0, [pc, #12]	@ (800dabc <rmw_uxrce_fini_topic_memory+0x14>)
 800dab0:	f00a fa2e 	bl	8017f10 <put_memory>
 800dab4:	2300      	movs	r3, #0
 800dab6:	61a3      	str	r3, [r4, #24]
 800dab8:	bd10      	pop	{r4, pc}
 800daba:	bf00      	nop
 800dabc:	20015bc8 	.word	0x20015bc8

0800dac0 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800dac0:	b082      	sub	sp, #8
 800dac2:	b530      	push	{r4, r5, lr}
 800dac4:	4929      	ldr	r1, [pc, #164]	@ (800db6c <rmw_uxrce_get_static_input_buffer_for_entity+0xac>)
 800dac6:	ac03      	add	r4, sp, #12
 800dac8:	e884 000c 	stmia.w	r4, {r2, r3}
 800dacc:	680c      	ldr	r4, [r1, #0]
 800dace:	461d      	mov	r5, r3
 800dad0:	4602      	mov	r2, r0
 800dad2:	2c00      	cmp	r4, #0
 800dad4:	d043      	beq.n	800db5e <rmw_uxrce_get_static_input_buffer_for_entity+0x9e>
 800dad6:	4620      	mov	r0, r4
 800dad8:	2100      	movs	r1, #0
 800dada:	6883      	ldr	r3, [r0, #8]
 800dadc:	6840      	ldr	r0, [r0, #4]
 800dade:	f8d3 3814 	ldr.w	r3, [r3, #2068]	@ 0x814
 800dae2:	429a      	cmp	r2, r3
 800dae4:	bf08      	it	eq
 800dae6:	3101      	addeq	r1, #1
 800dae8:	2800      	cmp	r0, #0
 800daea:	d1f6      	bne.n	800dada <rmw_uxrce_get_static_input_buffer_for_entity+0x1a>
 800daec:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800daf0:	2b02      	cmp	r3, #2
 800daf2:	d027      	beq.n	800db44 <rmw_uxrce_get_static_input_buffer_for_entity+0x84>
 800daf4:	d906      	bls.n	800db04 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800daf6:	2b03      	cmp	r3, #3
 800daf8:	d004      	beq.n	800db04 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800dafa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dafe:	2000      	movs	r0, #0
 800db00:	b002      	add	sp, #8
 800db02:	4770      	bx	lr
 800db04:	b1fd      	cbz	r5, 800db46 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800db06:	428d      	cmp	r5, r1
 800db08:	d81d      	bhi.n	800db46 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800db0a:	2c00      	cmp	r4, #0
 800db0c:	d0f5      	beq.n	800dafa <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800db0e:	2000      	movs	r0, #0
 800db10:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 800db14:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 800db18:	e001      	b.n	800db1e <rmw_uxrce_get_static_input_buffer_for_entity+0x5e>
 800db1a:	6864      	ldr	r4, [r4, #4]
 800db1c:	b1dc      	cbz	r4, 800db56 <rmw_uxrce_get_static_input_buffer_for_entity+0x96>
 800db1e:	68a3      	ldr	r3, [r4, #8]
 800db20:	f8d3 1814 	ldr.w	r1, [r3, #2068]	@ 0x814
 800db24:	428a      	cmp	r2, r1
 800db26:	d1f8      	bne.n	800db1a <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800db28:	f8d3 1818 	ldr.w	r1, [r3, #2072]	@ 0x818
 800db2c:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 800db30:	4561      	cmp	r1, ip
 800db32:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800db36:	eb73 0e05 	sbcs.w	lr, r3, r5
 800db3a:	daee      	bge.n	800db1a <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800db3c:	468c      	mov	ip, r1
 800db3e:	461d      	mov	r5, r3
 800db40:	4620      	mov	r0, r4
 800db42:	e7ea      	b.n	800db1a <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800db44:	b92d      	cbnz	r5, 800db52 <rmw_uxrce_get_static_input_buffer_for_entity+0x92>
 800db46:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800db4a:	4808      	ldr	r0, [pc, #32]	@ (800db6c <rmw_uxrce_get_static_input_buffer_for_entity+0xac>)
 800db4c:	b002      	add	sp, #8
 800db4e:	f00a b9cf 	b.w	8017ef0 <get_memory>
 800db52:	428d      	cmp	r5, r1
 800db54:	d8f7      	bhi.n	800db46 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800db56:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800db5a:	b002      	add	sp, #8
 800db5c:	4770      	bx	lr
 800db5e:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800db62:	2b02      	cmp	r3, #2
 800db64:	d0ef      	beq.n	800db46 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800db66:	d9ee      	bls.n	800db46 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800db68:	4621      	mov	r1, r4
 800db6a:	e7c4      	b.n	800daf6 <rmw_uxrce_get_static_input_buffer_for_entity+0x36>
 800db6c:	20015988 	.word	0x20015988

0800db70 <rmw_uxrce_find_static_input_buffer_by_owner>:
 800db70:	4b11      	ldr	r3, [pc, #68]	@ (800dbb8 <rmw_uxrce_find_static_input_buffer_by_owner+0x48>)
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	b1eb      	cbz	r3, 800dbb2 <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 800db76:	b530      	push	{r4, r5, lr}
 800db78:	4684      	mov	ip, r0
 800db7a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800db7e:	f06f 4e00 	mvn.w	lr, #2147483648	@ 0x80000000
 800db82:	2000      	movs	r0, #0
 800db84:	e001      	b.n	800db8a <rmw_uxrce_find_static_input_buffer_by_owner+0x1a>
 800db86:	685b      	ldr	r3, [r3, #4]
 800db88:	b193      	cbz	r3, 800dbb0 <rmw_uxrce_find_static_input_buffer_by_owner+0x40>
 800db8a:	689a      	ldr	r2, [r3, #8]
 800db8c:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 800db90:	458c      	cmp	ip, r1
 800db92:	d1f8      	bne.n	800db86 <rmw_uxrce_find_static_input_buffer_by_owner+0x16>
 800db94:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 800db98:	f8d2 281c 	ldr.w	r2, [r2, #2076]	@ 0x81c
 800db9c:	42a1      	cmp	r1, r4
 800db9e:	eb72 050e 	sbcs.w	r5, r2, lr
 800dba2:	daf0      	bge.n	800db86 <rmw_uxrce_find_static_input_buffer_by_owner+0x16>
 800dba4:	4618      	mov	r0, r3
 800dba6:	685b      	ldr	r3, [r3, #4]
 800dba8:	460c      	mov	r4, r1
 800dbaa:	4696      	mov	lr, r2
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d1ec      	bne.n	800db8a <rmw_uxrce_find_static_input_buffer_by_owner+0x1a>
 800dbb0:	bd30      	pop	{r4, r5, pc}
 800dbb2:	4618      	mov	r0, r3
 800dbb4:	4770      	bx	lr
 800dbb6:	bf00      	nop
 800dbb8:	20015988 	.word	0x20015988
 800dbbc:	00000000 	.word	0x00000000

0800dbc0 <rmw_uxrce_clean_expired_static_input_buffer>:
 800dbc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbc4:	4b3c      	ldr	r3, [pc, #240]	@ (800dcb8 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800dbc6:	ed2d 8b06 	vpush	{d8-d10}
 800dbca:	f8d3 8000 	ldr.w	r8, [r3]
 800dbce:	b08d      	sub	sp, #52	@ 0x34
 800dbd0:	f00b fbda 	bl	8019388 <rmw_uros_epoch_nanos>
 800dbd4:	f1b8 0f00 	cmp.w	r8, #0
 800dbd8:	d05c      	beq.n	800dc94 <rmw_uxrce_clean_expired_static_input_buffer+0xd4>
 800dbda:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800dbde:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800dbe2:	2b04      	cmp	r3, #4
 800dbe4:	ed9f 8b2e 	vldr	d8, [pc, #184]	@ 800dca0 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 800dbe8:	ed9f ab2f 	vldr	d10, [pc, #188]	@ 800dca8 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 800dbec:	ed9f 9b30 	vldr	d9, [pc, #192]	@ 800dcb0 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 800dbf0:	4683      	mov	fp, r0
 800dbf2:	ac04      	add	r4, sp, #16
 800dbf4:	468a      	mov	sl, r1
 800dbf6:	d03f      	beq.n	800dc78 <rmw_uxrce_clean_expired_static_input_buffer+0xb8>
 800dbf8:	2b05      	cmp	r3, #5
 800dbfa:	d044      	beq.n	800dc86 <rmw_uxrce_clean_expired_static_input_buffer+0xc6>
 800dbfc:	2b03      	cmp	r3, #3
 800dbfe:	d03b      	beq.n	800dc78 <rmw_uxrce_clean_expired_static_input_buffer+0xb8>
 800dc00:	ed8d 8b04 	vstr	d8, [sp, #16]
 800dc04:	ed8d ab06 	vstr	d10, [sp, #24]
 800dc08:	ed8d 8b08 	vstr	d8, [sp, #32]
 800dc0c:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 800dc10:	ab08      	add	r3, sp, #32
 800dc12:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dc14:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800dc18:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800dc1c:	f009 ffac 	bl	8017b78 <rmw_time_equal>
 800dc20:	b118      	cbz	r0, 800dc2a <rmw_uxrce_clean_expired_static_input_buffer+0x6a>
 800dc22:	ed8d 9b04 	vstr	d9, [sp, #16]
 800dc26:	ed8d 8b06 	vstr	d8, [sp, #24]
 800dc2a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800dc2e:	f8d5 7818 	ldr.w	r7, [r5, #2072]	@ 0x818
 800dc32:	f8d5 681c 	ldr.w	r6, [r5, #2076]	@ 0x81c
 800dc36:	f8d8 9004 	ldr.w	r9, [r8, #4]
 800dc3a:	f009 fff1 	bl	8017c20 <rmw_time_total_nsec>
 800dc3e:	183f      	adds	r7, r7, r0
 800dc40:	eb46 0601 	adc.w	r6, r6, r1
 800dc44:	455f      	cmp	r7, fp
 800dc46:	eb76 060a 	sbcs.w	r6, r6, sl
 800dc4a:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 800dc4e:	db05      	blt.n	800dc5c <rmw_uxrce_clean_expired_static_input_buffer+0x9c>
 800dc50:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 800dc54:	4593      	cmp	fp, r2
 800dc56:	eb7a 0303 	sbcs.w	r3, sl, r3
 800dc5a:	da03      	bge.n	800dc64 <rmw_uxrce_clean_expired_static_input_buffer+0xa4>
 800dc5c:	4816      	ldr	r0, [pc, #88]	@ (800dcb8 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800dc5e:	4641      	mov	r1, r8
 800dc60:	f00a f956 	bl	8017f10 <put_memory>
 800dc64:	f1b9 0f00 	cmp.w	r9, #0
 800dc68:	d014      	beq.n	800dc94 <rmw_uxrce_clean_expired_static_input_buffer+0xd4>
 800dc6a:	46c8      	mov	r8, r9
 800dc6c:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800dc70:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800dc74:	2b04      	cmp	r3, #4
 800dc76:	d1bf      	bne.n	800dbf8 <rmw_uxrce_clean_expired_static_input_buffer+0x38>
 800dc78:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800dc7c:	3340      	adds	r3, #64	@ 0x40
 800dc7e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dc80:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800dc84:	e7c0      	b.n	800dc08 <rmw_uxrce_clean_expired_static_input_buffer+0x48>
 800dc86:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800dc8a:	3348      	adds	r3, #72	@ 0x48
 800dc8c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dc8e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800dc92:	e7b9      	b.n	800dc08 <rmw_uxrce_clean_expired_static_input_buffer+0x48>
 800dc94:	b00d      	add	sp, #52	@ 0x34
 800dc96:	ecbd 8b06 	vpop	{d8-d10}
 800dc9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc9e:	bf00      	nop
	...
 800dca8:	00000001 	.word	0x00000001
 800dcac:	00000000 	.word	0x00000000
 800dcb0:	0000001e 	.word	0x0000001e
 800dcb4:	00000000 	.word	0x00000000
 800dcb8:	20015988 	.word	0x20015988

0800dcbc <run_xrce_session>:
 800dcbc:	b500      	push	{lr}
 800dcbe:	f891 c002 	ldrb.w	ip, [r1, #2]
 800dcc2:	b087      	sub	sp, #28
 800dcc4:	f1bc 0f01 	cmp.w	ip, #1
 800dcc8:	f8ad 200e 	strh.w	r2, [sp, #14]
 800dccc:	d00f      	beq.n	800dcee <run_xrce_session+0x32>
 800dcce:	4619      	mov	r1, r3
 800dcd0:	2301      	movs	r3, #1
 800dcd2:	9300      	str	r3, [sp, #0]
 800dcd4:	f10d 020e 	add.w	r2, sp, #14
 800dcd8:	f10d 0317 	add.w	r3, sp, #23
 800dcdc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800dce0:	f004 fa44 	bl	801216c <uxr_run_session_until_all_status>
 800dce4:	b100      	cbz	r0, 800dce8 <run_xrce_session+0x2c>
 800dce6:	2001      	movs	r0, #1
 800dce8:	b007      	add	sp, #28
 800dcea:	f85d fb04 	ldr.w	pc, [sp], #4
 800dcee:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800dcf2:	f003 fe7d 	bl	80119f0 <uxr_flash_output_streams>
 800dcf6:	2001      	movs	r0, #1
 800dcf8:	e7f6      	b.n	800dce8 <run_xrce_session+0x2c>
 800dcfa:	bf00      	nop

0800dcfc <convert_qos_profile>:
 800dcfc:	780a      	ldrb	r2, [r1, #0]
 800dcfe:	f891 c008 	ldrb.w	ip, [r1, #8]
 800dd02:	f1a2 0202 	sub.w	r2, r2, #2
 800dd06:	fab2 f282 	clz	r2, r2
 800dd0a:	0952      	lsrs	r2, r2, #5
 800dd0c:	7082      	strb	r2, [r0, #2]
 800dd0e:	7a4a      	ldrb	r2, [r1, #9]
 800dd10:	8889      	ldrh	r1, [r1, #4]
 800dd12:	8081      	strh	r1, [r0, #4]
 800dd14:	f1a2 0202 	sub.w	r2, r2, #2
 800dd18:	f1ac 0c02 	sub.w	ip, ip, #2
 800dd1c:	fab2 f282 	clz	r2, r2
 800dd20:	fabc fc8c 	clz	ip, ip
 800dd24:	0952      	lsrs	r2, r2, #5
 800dd26:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800dd2a:	0052      	lsls	r2, r2, #1
 800dd2c:	f880 c001 	strb.w	ip, [r0, #1]
 800dd30:	7002      	strb	r2, [r0, #0]
 800dd32:	4770      	bx	lr

0800dd34 <generate_service_topics>:
 800dd34:	b570      	push	{r4, r5, r6, lr}
 800dd36:	b082      	sub	sp, #8
 800dd38:	461c      	mov	r4, r3
 800dd3a:	4e12      	ldr	r6, [pc, #72]	@ (800dd84 <generate_service_topics+0x50>)
 800dd3c:	4b12      	ldr	r3, [pc, #72]	@ (800dd88 <generate_service_topics+0x54>)
 800dd3e:	9601      	str	r6, [sp, #4]
 800dd40:	4605      	mov	r5, r0
 800dd42:	9000      	str	r0, [sp, #0]
 800dd44:	4616      	mov	r6, r2
 800dd46:	4608      	mov	r0, r1
 800dd48:	4a10      	ldr	r2, [pc, #64]	@ (800dd8c <generate_service_topics+0x58>)
 800dd4a:	4621      	mov	r1, r4
 800dd4c:	f00f f852 	bl	801cdf4 <sniprintf>
 800dd50:	4b0f      	ldr	r3, [pc, #60]	@ (800dd90 <generate_service_topics+0x5c>)
 800dd52:	9301      	str	r3, [sp, #4]
 800dd54:	4601      	mov	r1, r0
 800dd56:	9500      	str	r5, [sp, #0]
 800dd58:	4b0e      	ldr	r3, [pc, #56]	@ (800dd94 <generate_service_topics+0x60>)
 800dd5a:	4a0c      	ldr	r2, [pc, #48]	@ (800dd8c <generate_service_topics+0x58>)
 800dd5c:	460d      	mov	r5, r1
 800dd5e:	4630      	mov	r0, r6
 800dd60:	4621      	mov	r1, r4
 800dd62:	f00f f847 	bl	801cdf4 <sniprintf>
 800dd66:	2d00      	cmp	r5, #0
 800dd68:	db01      	blt.n	800dd6e <generate_service_topics+0x3a>
 800dd6a:	42ac      	cmp	r4, r5
 800dd6c:	dc02      	bgt.n	800dd74 <generate_service_topics+0x40>
 800dd6e:	2000      	movs	r0, #0
 800dd70:	b002      	add	sp, #8
 800dd72:	bd70      	pop	{r4, r5, r6, pc}
 800dd74:	2800      	cmp	r0, #0
 800dd76:	dbfa      	blt.n	800dd6e <generate_service_topics+0x3a>
 800dd78:	4284      	cmp	r4, r0
 800dd7a:	bfd4      	ite	le
 800dd7c:	2000      	movle	r0, #0
 800dd7e:	2001      	movgt	r0, #1
 800dd80:	b002      	add	sp, #8
 800dd82:	bd70      	pop	{r4, r5, r6, pc}
 800dd84:	0801fd7c 	.word	0x0801fd7c
 800dd88:	0801fd88 	.word	0x0801fd88
 800dd8c:	0801edd8 	.word	0x0801edd8
 800dd90:	0801fd74 	.word	0x0801fd74
 800dd94:	0801fd84 	.word	0x0801fd84

0800dd98 <generate_service_types>:
 800dd98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dd9c:	4605      	mov	r5, r0
 800dd9e:	b086      	sub	sp, #24
 800dda0:	6880      	ldr	r0, [r0, #8]
 800dda2:	460c      	mov	r4, r1
 800dda4:	4617      	mov	r7, r2
 800dda6:	461e      	mov	r6, r3
 800dda8:	4780      	blx	r0
 800ddaa:	68eb      	ldr	r3, [r5, #12]
 800ddac:	4680      	mov	r8, r0
 800ddae:	4798      	blx	r3
 800ddb0:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800ddb4:	f8d0 9004 	ldr.w	r9, [r0, #4]
 800ddb8:	2300      	movs	r3, #0
 800ddba:	7023      	strb	r3, [r4, #0]
 800ddbc:	6813      	ldr	r3, [r2, #0]
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d043      	beq.n	800de4a <generate_service_types+0xb2>
 800ddc2:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 800de5c <generate_service_types+0xc4>
 800ddc6:	4641      	mov	r1, r8
 800ddc8:	4620      	mov	r0, r4
 800ddca:	4c22      	ldr	r4, [pc, #136]	@ (800de54 <generate_service_types+0xbc>)
 800ddcc:	9405      	str	r4, [sp, #20]
 800ddce:	6852      	ldr	r2, [r2, #4]
 800ddd0:	f8df a090 	ldr.w	sl, [pc, #144]	@ 800de64 <generate_service_types+0xcc>
 800ddd4:	9204      	str	r2, [sp, #16]
 800ddd6:	9100      	str	r1, [sp, #0]
 800ddd8:	e9cd 4802 	strd	r4, r8, [sp, #8]
 800dddc:	4a1e      	ldr	r2, [pc, #120]	@ (800de58 <generate_service_types+0xc0>)
 800ddde:	f8cd a004 	str.w	sl, [sp, #4]
 800dde2:	4631      	mov	r1, r6
 800dde4:	f00f f806 	bl	801cdf4 <sniprintf>
 800dde8:	2800      	cmp	r0, #0
 800ddea:	db20      	blt.n	800de2e <generate_service_types+0x96>
 800ddec:	2300      	movs	r3, #0
 800ddee:	703b      	strb	r3, [r7, #0]
 800ddf0:	f8d9 3000 	ldr.w	r3, [r9]
 800ddf4:	42b0      	cmp	r0, r6
 800ddf6:	bfac      	ite	ge
 800ddf8:	2500      	movge	r5, #0
 800ddfa:	2501      	movlt	r5, #1
 800ddfc:	b1f3      	cbz	r3, 800de3c <generate_service_types+0xa4>
 800ddfe:	4a17      	ldr	r2, [pc, #92]	@ (800de5c <generate_service_types+0xc4>)
 800de00:	9405      	str	r4, [sp, #20]
 800de02:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800de06:	9200      	str	r2, [sp, #0]
 800de08:	e9cd 8103 	strd	r8, r1, [sp, #12]
 800de0c:	4a12      	ldr	r2, [pc, #72]	@ (800de58 <generate_service_types+0xc0>)
 800de0e:	e9cd a401 	strd	sl, r4, [sp, #4]
 800de12:	4638      	mov	r0, r7
 800de14:	4631      	mov	r1, r6
 800de16:	f00e ffed 	bl	801cdf4 <sniprintf>
 800de1a:	1e02      	subs	r2, r0, #0
 800de1c:	db11      	blt.n	800de42 <generate_service_types+0xaa>
 800de1e:	42b2      	cmp	r2, r6
 800de20:	bfac      	ite	ge
 800de22:	2000      	movge	r0, #0
 800de24:	f005 0001 	andlt.w	r0, r5, #1
 800de28:	b006      	add	sp, #24
 800de2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de2e:	2300      	movs	r3, #0
 800de30:	703b      	strb	r3, [r7, #0]
 800de32:	f8d9 3000 	ldr.w	r3, [r9]
 800de36:	2500      	movs	r5, #0
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d1e0      	bne.n	800ddfe <generate_service_types+0x66>
 800de3c:	4b08      	ldr	r3, [pc, #32]	@ (800de60 <generate_service_types+0xc8>)
 800de3e:	461a      	mov	r2, r3
 800de40:	e7de      	b.n	800de00 <generate_service_types+0x68>
 800de42:	2000      	movs	r0, #0
 800de44:	b006      	add	sp, #24
 800de46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de4a:	4b05      	ldr	r3, [pc, #20]	@ (800de60 <generate_service_types+0xc8>)
 800de4c:	f8df 800c 	ldr.w	r8, [pc, #12]	@ 800de5c <generate_service_types+0xc4>
 800de50:	4619      	mov	r1, r3
 800de52:	e7b9      	b.n	800ddc8 <generate_service_types+0x30>
 800de54:	0801ede0 	.word	0x0801ede0
 800de58:	0801edd0 	.word	0x0801edd0
 800de5c:	0801edcc 	.word	0x0801edcc
 800de60:	0801f920 	.word	0x0801f920
 800de64:	0801ede4 	.word	0x0801ede4

0800de68 <generate_type_name>:
 800de68:	b530      	push	{r4, r5, lr}
 800de6a:	2300      	movs	r3, #0
 800de6c:	700b      	strb	r3, [r1, #0]
 800de6e:	6803      	ldr	r3, [r0, #0]
 800de70:	b087      	sub	sp, #28
 800de72:	4614      	mov	r4, r2
 800de74:	b1d3      	cbz	r3, 800deac <generate_type_name+0x44>
 800de76:	4a0f      	ldr	r2, [pc, #60]	@ (800deb4 <generate_type_name+0x4c>)
 800de78:	4615      	mov	r5, r2
 800de7a:	9203      	str	r2, [sp, #12]
 800de7c:	9500      	str	r5, [sp, #0]
 800de7e:	6842      	ldr	r2, [r0, #4]
 800de80:	480d      	ldr	r0, [pc, #52]	@ (800deb8 <generate_type_name+0x50>)
 800de82:	9001      	str	r0, [sp, #4]
 800de84:	4608      	mov	r0, r1
 800de86:	490d      	ldr	r1, [pc, #52]	@ (800debc <generate_type_name+0x54>)
 800de88:	9204      	str	r2, [sp, #16]
 800de8a:	9105      	str	r1, [sp, #20]
 800de8c:	9102      	str	r1, [sp, #8]
 800de8e:	4a0c      	ldr	r2, [pc, #48]	@ (800dec0 <generate_type_name+0x58>)
 800de90:	4621      	mov	r1, r4
 800de92:	f00e ffaf 	bl	801cdf4 <sniprintf>
 800de96:	2800      	cmp	r0, #0
 800de98:	db05      	blt.n	800dea6 <generate_type_name+0x3e>
 800de9a:	4284      	cmp	r4, r0
 800de9c:	bfd4      	ite	le
 800de9e:	2000      	movle	r0, #0
 800dea0:	2001      	movgt	r0, #1
 800dea2:	b007      	add	sp, #28
 800dea4:	bd30      	pop	{r4, r5, pc}
 800dea6:	2000      	movs	r0, #0
 800dea8:	b007      	add	sp, #28
 800deaa:	bd30      	pop	{r4, r5, pc}
 800deac:	4b05      	ldr	r3, [pc, #20]	@ (800dec4 <generate_type_name+0x5c>)
 800deae:	4a01      	ldr	r2, [pc, #4]	@ (800deb4 <generate_type_name+0x4c>)
 800deb0:	461d      	mov	r5, r3
 800deb2:	e7e2      	b.n	800de7a <generate_type_name+0x12>
 800deb4:	0801edcc 	.word	0x0801edcc
 800deb8:	0801ede4 	.word	0x0801ede4
 800debc:	0801ede0 	.word	0x0801ede0
 800dec0:	0801edd0 	.word	0x0801edd0
 800dec4:	0801f920 	.word	0x0801f920

0800dec8 <generate_topic_name>:
 800dec8:	b510      	push	{r4, lr}
 800deca:	b082      	sub	sp, #8
 800decc:	4614      	mov	r4, r2
 800dece:	9000      	str	r0, [sp, #0]
 800ded0:	4b08      	ldr	r3, [pc, #32]	@ (800def4 <generate_topic_name+0x2c>)
 800ded2:	4a09      	ldr	r2, [pc, #36]	@ (800def8 <generate_topic_name+0x30>)
 800ded4:	4608      	mov	r0, r1
 800ded6:	4621      	mov	r1, r4
 800ded8:	f00e ff8c 	bl	801cdf4 <sniprintf>
 800dedc:	2800      	cmp	r0, #0
 800dede:	db05      	blt.n	800deec <generate_topic_name+0x24>
 800dee0:	4284      	cmp	r4, r0
 800dee2:	bfd4      	ite	le
 800dee4:	2000      	movle	r0, #0
 800dee6:	2001      	movgt	r0, #1
 800dee8:	b002      	add	sp, #8
 800deea:	bd10      	pop	{r4, pc}
 800deec:	2000      	movs	r0, #0
 800deee:	b002      	add	sp, #8
 800def0:	bd10      	pop	{r4, pc}
 800def2:	bf00      	nop
 800def4:	0801fd8c 	.word	0x0801fd8c
 800def8:	0801ede8 	.word	0x0801ede8

0800defc <is_uxrce_rmw_identifier_valid>:
 800defc:	b510      	push	{r4, lr}
 800defe:	4604      	mov	r4, r0
 800df00:	b140      	cbz	r0, 800df14 <is_uxrce_rmw_identifier_valid+0x18>
 800df02:	f00a f87b 	bl	8017ffc <rmw_get_implementation_identifier>
 800df06:	4601      	mov	r1, r0
 800df08:	4620      	mov	r0, r4
 800df0a:	f7f2 f979 	bl	8000200 <strcmp>
 800df0e:	fab0 f080 	clz	r0, r0
 800df12:	0940      	lsrs	r0, r0, #5
 800df14:	bd10      	pop	{r4, pc}
 800df16:	bf00      	nop

0800df18 <get_message_typesupport_handle>:
 800df18:	6883      	ldr	r3, [r0, #8]
 800df1a:	4718      	bx	r3

0800df1c <get_message_typesupport_handle_function>:
 800df1c:	b510      	push	{r4, lr}
 800df1e:	4604      	mov	r4, r0
 800df20:	6800      	ldr	r0, [r0, #0]
 800df22:	f7f2 f96d 	bl	8000200 <strcmp>
 800df26:	2800      	cmp	r0, #0
 800df28:	bf0c      	ite	eq
 800df2a:	4620      	moveq	r0, r4
 800df2c:	2000      	movne	r0, #0
 800df2e:	bd10      	pop	{r4, pc}

0800df30 <get_service_typesupport_handle>:
 800df30:	6883      	ldr	r3, [r0, #8]
 800df32:	4718      	bx	r3

0800df34 <get_service_typesupport_handle_function>:
 800df34:	b510      	push	{r4, lr}
 800df36:	4604      	mov	r4, r0
 800df38:	6800      	ldr	r0, [r0, #0]
 800df3a:	f7f2 f961 	bl	8000200 <strcmp>
 800df3e:	2800      	cmp	r0, #0
 800df40:	bf0c      	ite	eq
 800df42:	4620      	moveq	r0, r4
 800df44:	2000      	movne	r0, #0
 800df46:	bd10      	pop	{r4, pc}

0800df48 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 800df48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df4c:	6805      	ldr	r5, [r0, #0]
 800df4e:	4604      	mov	r4, r0
 800df50:	4628      	mov	r0, r5
 800df52:	460e      	mov	r6, r1
 800df54:	f7f2 f954 	bl	8000200 <strcmp>
 800df58:	b308      	cbz	r0, 800df9e <rosidl_typesupport_c__get_message_typesupport_handle_function+0x56>
 800df5a:	4b12      	ldr	r3, [pc, #72]	@ (800dfa4 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x5c>)
 800df5c:	4628      	mov	r0, r5
 800df5e:	6819      	ldr	r1, [r3, #0]
 800df60:	f7f2 f94e 	bl	8000200 <strcmp>
 800df64:	4605      	mov	r5, r0
 800df66:	b980      	cbnz	r0, 800df8a <rosidl_typesupport_c__get_message_typesupport_handle_function+0x42>
 800df68:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800df6c:	f8d8 4000 	ldr.w	r4, [r8]
 800df70:	b1ac      	cbz	r4, 800df9e <rosidl_typesupport_c__get_message_typesupport_handle_function+0x56>
 800df72:	f8d8 7008 	ldr.w	r7, [r8, #8]
 800df76:	3f04      	subs	r7, #4
 800df78:	f857 0f04 	ldr.w	r0, [r7, #4]!
 800df7c:	4631      	mov	r1, r6
 800df7e:	f7f2 f93f 	bl	8000200 <strcmp>
 800df82:	b128      	cbz	r0, 800df90 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x48>
 800df84:	3501      	adds	r5, #1
 800df86:	42a5      	cmp	r5, r4
 800df88:	d1f6      	bne.n	800df78 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x30>
 800df8a:	2000      	movs	r0, #0
 800df8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df90:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800df94:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800df98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800df9c:	4718      	bx	r3
 800df9e:	4620      	mov	r0, r4
 800dfa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dfa4:	2000059c 	.word	0x2000059c

0800dfa8 <rosidl_typesupport_c__get_service_typesupport_handle_function>:
 800dfa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dfac:	6805      	ldr	r5, [r0, #0]
 800dfae:	4604      	mov	r4, r0
 800dfb0:	4628      	mov	r0, r5
 800dfb2:	460e      	mov	r6, r1
 800dfb4:	f7f2 f924 	bl	8000200 <strcmp>
 800dfb8:	b308      	cbz	r0, 800dffe <rosidl_typesupport_c__get_service_typesupport_handle_function+0x56>
 800dfba:	4b12      	ldr	r3, [pc, #72]	@ (800e004 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x5c>)
 800dfbc:	4628      	mov	r0, r5
 800dfbe:	6819      	ldr	r1, [r3, #0]
 800dfc0:	f7f2 f91e 	bl	8000200 <strcmp>
 800dfc4:	4605      	mov	r5, r0
 800dfc6:	b980      	cbnz	r0, 800dfea <rosidl_typesupport_c__get_service_typesupport_handle_function+0x42>
 800dfc8:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800dfcc:	f8d8 4000 	ldr.w	r4, [r8]
 800dfd0:	b1ac      	cbz	r4, 800dffe <rosidl_typesupport_c__get_service_typesupport_handle_function+0x56>
 800dfd2:	f8d8 7008 	ldr.w	r7, [r8, #8]
 800dfd6:	3f04      	subs	r7, #4
 800dfd8:	f857 0f04 	ldr.w	r0, [r7, #4]!
 800dfdc:	4631      	mov	r1, r6
 800dfde:	f7f2 f90f 	bl	8000200 <strcmp>
 800dfe2:	b128      	cbz	r0, 800dff0 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x48>
 800dfe4:	3501      	adds	r5, #1
 800dfe6:	42a5      	cmp	r5, r4
 800dfe8:	d1f6      	bne.n	800dfd8 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x30>
 800dfea:	2000      	movs	r0, #0
 800dfec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dff0:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800dff4:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800dff8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dffc:	4718      	bx	r3
 800dffe:	4620      	mov	r0, r4
 800e000:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e004:	2000059c 	.word	0x2000059c

0800e008 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 800e008:	4b04      	ldr	r3, [pc, #16]	@ (800e01c <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x14>)
 800e00a:	681a      	ldr	r2, [r3, #0]
 800e00c:	b10a      	cbz	r2, 800e012 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0xa>
 800e00e:	4803      	ldr	r0, [pc, #12]	@ (800e01c <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x14>)
 800e010:	4770      	bx	lr
 800e012:	4a03      	ldr	r2, [pc, #12]	@ (800e020 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x18>)
 800e014:	4801      	ldr	r0, [pc, #4]	@ (800e01c <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x14>)
 800e016:	6812      	ldr	r2, [r2, #0]
 800e018:	601a      	str	r2, [r3, #0]
 800e01a:	4770      	bx	lr
 800e01c:	200005a4 	.word	0x200005a4
 800e020:	2000059c 	.word	0x2000059c

0800e024 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 800e024:	4a02      	ldr	r2, [pc, #8]	@ (800e030 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0xc>)
 800e026:	4b03      	ldr	r3, [pc, #12]	@ (800e034 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x10>)
 800e028:	6812      	ldr	r2, [r2, #0]
 800e02a:	601a      	str	r2, [r3, #0]
 800e02c:	4770      	bx	lr
 800e02e:	bf00      	nop
 800e030:	2000059c 	.word	0x2000059c
 800e034:	200005a4 	.word	0x200005a4

0800e038 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__size_function__Imu__orientation_covariance>:
 800e038:	2009      	movs	r0, #9
 800e03a:	4770      	bx	lr

0800e03c <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_const_function__Imu__orientation_covariance>:
 800e03c:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800e040:	4770      	bx	lr
 800e042:	bf00      	nop

0800e044 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__fetch_function__Imu__orientation_covariance>:
 800e044:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800e048:	e9d0 0100 	ldrd	r0, r1, [r0]
 800e04c:	e9c2 0100 	strd	r0, r1, [r2]
 800e050:	4770      	bx	lr
 800e052:	bf00      	nop

0800e054 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__assign_function__Imu__orientation_covariance>:
 800e054:	e9d2 2300 	ldrd	r2, r3, [r2]
 800e058:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800e05c:	e9c0 2300 	strd	r2, r3, [r0]
 800e060:	4770      	bx	lr
 800e062:	bf00      	nop

0800e064 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__Imu_init_function>:
 800e064:	f00b ba2a 	b.w	80194bc <sensor_msgs__msg__Imu__init>

0800e068 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__Imu_fini_function>:
 800e068:	f00b ba74 	b.w	8019554 <sensor_msgs__msg__Imu__fini>

0800e06c <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__size_function__Imu__angular_velocity_covariance>:
 800e06c:	2009      	movs	r0, #9
 800e06e:	4770      	bx	lr

0800e070 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__size_function__Imu__linear_acceleration_covariance>:
 800e070:	2009      	movs	r0, #9
 800e072:	4770      	bx	lr

0800e074 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_function__Imu__orientation_covariance>:
 800e074:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800e078:	4770      	bx	lr
 800e07a:	bf00      	nop

0800e07c <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_const_function__Imu__linear_acceleration_covariance>:
 800e07c:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800e080:	4770      	bx	lr
 800e082:	bf00      	nop

0800e084 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_function__Imu__linear_acceleration_covariance>:
 800e084:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800e088:	4770      	bx	lr
 800e08a:	bf00      	nop

0800e08c <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_const_function__Imu__angular_velocity_covariance>:
 800e08c:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800e090:	4770      	bx	lr
 800e092:	bf00      	nop

0800e094 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_function__Imu__angular_velocity_covariance>:
 800e094:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800e098:	4770      	bx	lr
 800e09a:	bf00      	nop

0800e09c <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__fetch_function__Imu__linear_acceleration_covariance>:
 800e09c:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800e0a0:	e9d0 0100 	ldrd	r0, r1, [r0]
 800e0a4:	e9c2 0100 	strd	r0, r1, [r2]
 800e0a8:	4770      	bx	lr
 800e0aa:	bf00      	nop

0800e0ac <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__assign_function__Imu__linear_acceleration_covariance>:
 800e0ac:	e9d2 2300 	ldrd	r2, r3, [r2]
 800e0b0:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800e0b4:	e9c0 2300 	strd	r2, r3, [r0]
 800e0b8:	4770      	bx	lr
 800e0ba:	bf00      	nop

0800e0bc <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__fetch_function__Imu__angular_velocity_covariance>:
 800e0bc:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800e0c0:	e9d0 0100 	ldrd	r0, r1, [r0]
 800e0c4:	e9c2 0100 	strd	r0, r1, [r2]
 800e0c8:	4770      	bx	lr
 800e0ca:	bf00      	nop

0800e0cc <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__assign_function__Imu__angular_velocity_covariance>:
 800e0cc:	e9d2 2300 	ldrd	r2, r3, [r2]
 800e0d0:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800e0d4:	e9c0 2300 	strd	r2, r3, [r0]
 800e0d8:	4770      	bx	lr
 800e0da:	bf00      	nop

0800e0dc <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 800e0dc:	b510      	push	{r4, lr}
 800e0de:	f000 f9eb 	bl	800e4b8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 800e0e2:	4c0b      	ldr	r4, [pc, #44]	@ (800e110 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x34>)
 800e0e4:	60e0      	str	r0, [r4, #12]
 800e0e6:	f000 fde5 	bl	800ecb4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 800e0ea:	64a0      	str	r0, [r4, #72]	@ 0x48
 800e0ec:	f000 fdf4 	bl	800ecd8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800e0f0:	f8c4 00c0 	str.w	r0, [r4, #192]	@ 0xc0
 800e0f4:	f000 fdf0 	bl	800ecd8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800e0f8:	4b06      	ldr	r3, [pc, #24]	@ (800e114 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x38>)
 800e0fa:	f8c4 0138 	str.w	r0, [r4, #312]	@ 0x138
 800e0fe:	681a      	ldr	r2, [r3, #0]
 800e100:	b10a      	cbz	r2, 800e106 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x2a>
 800e102:	4804      	ldr	r0, [pc, #16]	@ (800e114 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x38>)
 800e104:	bd10      	pop	{r4, pc}
 800e106:	4a04      	ldr	r2, [pc, #16]	@ (800e118 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x3c>)
 800e108:	4802      	ldr	r0, [pc, #8]	@ (800e114 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x38>)
 800e10a:	6812      	ldr	r2, [r2, #0]
 800e10c:	601a      	str	r2, [r3, #0]
 800e10e:	bd10      	pop	{r4, pc}
 800e110:	200005dc 	.word	0x200005dc
 800e114:	200005c4 	.word	0x200005c4
 800e118:	200005a0 	.word	0x200005a0

0800e11c <get_serialized_size_sensor_msgs__msg__Imu.part.0>:
 800e11c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e11e:	4607      	mov	r7, r0
 800e120:	460e      	mov	r6, r1
 800e122:	f000 f9ed 	bl	800e500 <get_serialized_size_std_msgs__msg__Header>
 800e126:	1834      	adds	r4, r6, r0
 800e128:	4621      	mov	r1, r4
 800e12a:	f107 0018 	add.w	r0, r7, #24
 800e12e:	f000 fde1 	bl	800ecf4 <get_serialized_size_geometry_msgs__msg__Quaternion>
 800e132:	4404      	add	r4, r0
 800e134:	2108      	movs	r1, #8
 800e136:	4620      	mov	r0, r4
 800e138:	f003 f852 	bl	80111e0 <ucdr_alignment>
 800e13c:	f100 0548 	add.w	r5, r0, #72	@ 0x48
 800e140:	4425      	add	r5, r4
 800e142:	4629      	mov	r1, r5
 800e144:	f107 0080 	add.w	r0, r7, #128	@ 0x80
 800e148:	f000 fe8c 	bl	800ee64 <get_serialized_size_geometry_msgs__msg__Vector3>
 800e14c:	4405      	add	r5, r0
 800e14e:	2108      	movs	r1, #8
 800e150:	4628      	mov	r0, r5
 800e152:	f003 f845 	bl	80111e0 <ucdr_alignment>
 800e156:	f100 0448 	add.w	r4, r0, #72	@ 0x48
 800e15a:	442c      	add	r4, r5
 800e15c:	4621      	mov	r1, r4
 800e15e:	f107 00e0 	add.w	r0, r7, #224	@ 0xe0
 800e162:	f000 fe7f 	bl	800ee64 <get_serialized_size_geometry_msgs__msg__Vector3>
 800e166:	4404      	add	r4, r0
 800e168:	2108      	movs	r1, #8
 800e16a:	4620      	mov	r0, r4
 800e16c:	f003 f838 	bl	80111e0 <ucdr_alignment>
 800e170:	f1c6 0648 	rsb	r6, r6, #72	@ 0x48
 800e174:	4430      	add	r0, r6
 800e176:	4420      	add	r0, r4
 800e178:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e17a:	bf00      	nop

0800e17c <get_serialized_size_sensor_msgs__msg__Imu>:
 800e17c:	b108      	cbz	r0, 800e182 <get_serialized_size_sensor_msgs__msg__Imu+0x6>
 800e17e:	f7ff bfcd 	b.w	800e11c <get_serialized_size_sensor_msgs__msg__Imu.part.0>
 800e182:	4770      	bx	lr

0800e184 <_Imu__get_serialized_size>:
 800e184:	b110      	cbz	r0, 800e18c <_Imu__get_serialized_size+0x8>
 800e186:	2100      	movs	r1, #0
 800e188:	f7ff bfc8 	b.w	800e11c <get_serialized_size_sensor_msgs__msg__Imu.part.0>
 800e18c:	4770      	bx	lr
 800e18e:	bf00      	nop

0800e190 <_Imu__cdr_deserialize>:
 800e190:	b538      	push	{r3, r4, r5, lr}
 800e192:	460c      	mov	r4, r1
 800e194:	b399      	cbz	r1, 800e1fe <_Imu__cdr_deserialize+0x6e>
 800e196:	4605      	mov	r5, r0
 800e198:	f000 fa34 	bl	800e604 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800e19c:	6843      	ldr	r3, [r0, #4]
 800e19e:	4621      	mov	r1, r4
 800e1a0:	68db      	ldr	r3, [r3, #12]
 800e1a2:	4628      	mov	r0, r5
 800e1a4:	4798      	blx	r3
 800e1a6:	f000 fe59 	bl	800ee5c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 800e1aa:	6843      	ldr	r3, [r0, #4]
 800e1ac:	f104 0118 	add.w	r1, r4, #24
 800e1b0:	68db      	ldr	r3, [r3, #12]
 800e1b2:	4628      	mov	r0, r5
 800e1b4:	4798      	blx	r3
 800e1b6:	2209      	movs	r2, #9
 800e1b8:	f104 0138 	add.w	r1, r4, #56	@ 0x38
 800e1bc:	4628      	mov	r0, r5
 800e1be:	f001 fa23 	bl	800f608 <ucdr_deserialize_array_double>
 800e1c2:	f000 fedb 	bl	800ef7c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800e1c6:	6843      	ldr	r3, [r0, #4]
 800e1c8:	f104 0180 	add.w	r1, r4, #128	@ 0x80
 800e1cc:	68db      	ldr	r3, [r3, #12]
 800e1ce:	4628      	mov	r0, r5
 800e1d0:	4798      	blx	r3
 800e1d2:	2209      	movs	r2, #9
 800e1d4:	f104 0198 	add.w	r1, r4, #152	@ 0x98
 800e1d8:	4628      	mov	r0, r5
 800e1da:	f001 fa15 	bl	800f608 <ucdr_deserialize_array_double>
 800e1de:	f000 fecd 	bl	800ef7c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800e1e2:	6843      	ldr	r3, [r0, #4]
 800e1e4:	f104 01e0 	add.w	r1, r4, #224	@ 0xe0
 800e1e8:	68db      	ldr	r3, [r3, #12]
 800e1ea:	4628      	mov	r0, r5
 800e1ec:	4798      	blx	r3
 800e1ee:	f104 01f8 	add.w	r1, r4, #248	@ 0xf8
 800e1f2:	4628      	mov	r0, r5
 800e1f4:	2209      	movs	r2, #9
 800e1f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e1fa:	f001 ba05 	b.w	800f608 <ucdr_deserialize_array_double>
 800e1fe:	4608      	mov	r0, r1
 800e200:	bd38      	pop	{r3, r4, r5, pc}
 800e202:	bf00      	nop

0800e204 <_Imu__cdr_serialize>:
 800e204:	2800      	cmp	r0, #0
 800e206:	d035      	beq.n	800e274 <_Imu__cdr_serialize+0x70>
 800e208:	b538      	push	{r3, r4, r5, lr}
 800e20a:	4604      	mov	r4, r0
 800e20c:	460d      	mov	r5, r1
 800e20e:	f000 f9f9 	bl	800e604 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800e212:	6843      	ldr	r3, [r0, #4]
 800e214:	4629      	mov	r1, r5
 800e216:	689b      	ldr	r3, [r3, #8]
 800e218:	4620      	mov	r0, r4
 800e21a:	4798      	blx	r3
 800e21c:	f000 fe1e 	bl	800ee5c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 800e220:	6843      	ldr	r3, [r0, #4]
 800e222:	4629      	mov	r1, r5
 800e224:	689b      	ldr	r3, [r3, #8]
 800e226:	f104 0018 	add.w	r0, r4, #24
 800e22a:	4798      	blx	r3
 800e22c:	2209      	movs	r2, #9
 800e22e:	f104 0138 	add.w	r1, r4, #56	@ 0x38
 800e232:	4628      	mov	r0, r5
 800e234:	f001 f994 	bl	800f560 <ucdr_serialize_array_double>
 800e238:	f000 fea0 	bl	800ef7c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800e23c:	6843      	ldr	r3, [r0, #4]
 800e23e:	4629      	mov	r1, r5
 800e240:	689b      	ldr	r3, [r3, #8]
 800e242:	f104 0080 	add.w	r0, r4, #128	@ 0x80
 800e246:	4798      	blx	r3
 800e248:	2209      	movs	r2, #9
 800e24a:	f104 0198 	add.w	r1, r4, #152	@ 0x98
 800e24e:	4628      	mov	r0, r5
 800e250:	f001 f986 	bl	800f560 <ucdr_serialize_array_double>
 800e254:	f000 fe92 	bl	800ef7c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800e258:	6843      	ldr	r3, [r0, #4]
 800e25a:	4629      	mov	r1, r5
 800e25c:	689b      	ldr	r3, [r3, #8]
 800e25e:	f104 00e0 	add.w	r0, r4, #224	@ 0xe0
 800e262:	4798      	blx	r3
 800e264:	f104 01f8 	add.w	r1, r4, #248	@ 0xf8
 800e268:	4628      	mov	r0, r5
 800e26a:	2209      	movs	r2, #9
 800e26c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e270:	f001 b976 	b.w	800f560 <ucdr_serialize_array_double>
 800e274:	4770      	bx	lr
 800e276:	bf00      	nop

0800e278 <max_serialized_size_sensor_msgs__msg__Imu>:
 800e278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e27a:	2301      	movs	r3, #1
 800e27c:	7003      	strb	r3, [r0, #0]
 800e27e:	4607      	mov	r7, r0
 800e280:	460e      	mov	r6, r1
 800e282:	f000 f9b5 	bl	800e5f0 <max_serialized_size_std_msgs__msg__Header>
 800e286:	1834      	adds	r4, r6, r0
 800e288:	4621      	mov	r1, r4
 800e28a:	4638      	mov	r0, r7
 800e28c:	f000 fdc4 	bl	800ee18 <max_serialized_size_geometry_msgs__msg__Quaternion>
 800e290:	4404      	add	r4, r0
 800e292:	2108      	movs	r1, #8
 800e294:	4620      	mov	r0, r4
 800e296:	f002 ffa3 	bl	80111e0 <ucdr_alignment>
 800e29a:	f100 0548 	add.w	r5, r0, #72	@ 0x48
 800e29e:	4425      	add	r5, r4
 800e2a0:	4629      	mov	r1, r5
 800e2a2:	4638      	mov	r0, r7
 800e2a4:	f000 fe50 	bl	800ef48 <max_serialized_size_geometry_msgs__msg__Vector3>
 800e2a8:	4405      	add	r5, r0
 800e2aa:	2108      	movs	r1, #8
 800e2ac:	4628      	mov	r0, r5
 800e2ae:	f002 ff97 	bl	80111e0 <ucdr_alignment>
 800e2b2:	f100 0448 	add.w	r4, r0, #72	@ 0x48
 800e2b6:	442c      	add	r4, r5
 800e2b8:	4621      	mov	r1, r4
 800e2ba:	4638      	mov	r0, r7
 800e2bc:	f000 fe44 	bl	800ef48 <max_serialized_size_geometry_msgs__msg__Vector3>
 800e2c0:	4404      	add	r4, r0
 800e2c2:	2108      	movs	r1, #8
 800e2c4:	4620      	mov	r0, r4
 800e2c6:	f002 ff8b 	bl	80111e0 <ucdr_alignment>
 800e2ca:	f1c6 0648 	rsb	r6, r6, #72	@ 0x48
 800e2ce:	4430      	add	r0, r6
 800e2d0:	4420      	add	r0, r4
 800e2d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e2d4 <_Imu__max_serialized_size>:
 800e2d4:	b500      	push	{lr}
 800e2d6:	b083      	sub	sp, #12
 800e2d8:	2100      	movs	r1, #0
 800e2da:	f10d 0007 	add.w	r0, sp, #7
 800e2de:	f7ff ffcb 	bl	800e278 <max_serialized_size_sensor_msgs__msg__Imu>
 800e2e2:	b003      	add	sp, #12
 800e2e4:	f85d fb04 	ldr.w	pc, [sp], #4

0800e2e8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 800e2e8:	4800      	ldr	r0, [pc, #0]	@ (800e2ec <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x4>)
 800e2ea:	4770      	bx	lr
 800e2ec:	20000780 	.word	0x20000780

0800e2f0 <service_msgs__msg__ServiceEventInfo__rosidl_typesupport_introspection_c__size_function__ServiceEventInfo__client_gid>:
 800e2f0:	2010      	movs	r0, #16
 800e2f2:	4770      	bx	lr

0800e2f4 <service_msgs__msg__ServiceEventInfo__rosidl_typesupport_introspection_c__get_const_function__ServiceEventInfo__client_gid>:
 800e2f4:	4408      	add	r0, r1
 800e2f6:	4770      	bx	lr

0800e2f8 <service_msgs__msg__ServiceEventInfo__rosidl_typesupport_introspection_c__fetch_function__ServiceEventInfo__client_gid>:
 800e2f8:	5c43      	ldrb	r3, [r0, r1]
 800e2fa:	7013      	strb	r3, [r2, #0]
 800e2fc:	4770      	bx	lr
 800e2fe:	bf00      	nop

0800e300 <service_msgs__msg__ServiceEventInfo__rosidl_typesupport_introspection_c__assign_function__ServiceEventInfo__client_gid>:
 800e300:	7813      	ldrb	r3, [r2, #0]
 800e302:	5443      	strb	r3, [r0, r1]
 800e304:	4770      	bx	lr
 800e306:	bf00      	nop

0800e308 <service_msgs__msg__ServiceEventInfo__rosidl_typesupport_introspection_c__ServiceEventInfo_init_function>:
 800e308:	f00b b980 	b.w	801960c <service_msgs__msg__ServiceEventInfo__init>

0800e30c <service_msgs__msg__ServiceEventInfo__rosidl_typesupport_introspection_c__ServiceEventInfo_fini_function>:
 800e30c:	f00b b98e 	b.w	801962c <service_msgs__msg__ServiceEventInfo__fini>

0800e310 <service_msgs__msg__ServiceEventInfo__rosidl_typesupport_introspection_c__get_function__ServiceEventInfo__client_gid>:
 800e310:	4408      	add	r0, r1
 800e312:	4770      	bx	lr

0800e314 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>:
 800e314:	b508      	push	{r3, lr}
 800e316:	f000 fc53 	bl	800ebc0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800e31a:	4b06      	ldr	r3, [pc, #24]	@ (800e334 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo+0x20>)
 800e31c:	4906      	ldr	r1, [pc, #24]	@ (800e338 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo+0x24>)
 800e31e:	681a      	ldr	r2, [r3, #0]
 800e320:	6488      	str	r0, [r1, #72]	@ 0x48
 800e322:	b10a      	cbz	r2, 800e328 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo+0x14>
 800e324:	4803      	ldr	r0, [pc, #12]	@ (800e334 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo+0x20>)
 800e326:	bd08      	pop	{r3, pc}
 800e328:	4a04      	ldr	r2, [pc, #16]	@ (800e33c <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo+0x28>)
 800e32a:	4802      	ldr	r0, [pc, #8]	@ (800e334 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo+0x20>)
 800e32c:	6812      	ldr	r2, [r2, #0]
 800e32e:	601a      	str	r2, [r3, #0]
 800e330:	bd08      	pop	{r3, pc}
 800e332:	bf00      	nop
 800e334:	200007b4 	.word	0x200007b4
 800e338:	200007cc 	.word	0x200007cc
 800e33c:	200005a0 	.word	0x200005a0

0800e340 <get_serialized_size_service_msgs__msg__ServiceEventInfo>:
 800e340:	b570      	push	{r4, r5, r6, lr}
 800e342:	4604      	mov	r4, r0
 800e344:	b1d0      	cbz	r0, 800e37c <get_serialized_size_service_msgs__msg__ServiceEventInfo+0x3c>
 800e346:	460d      	mov	r5, r1
 800e348:	4628      	mov	r0, r5
 800e34a:	2101      	movs	r1, #1
 800e34c:	f002 ff48 	bl	80111e0 <ucdr_alignment>
 800e350:	1c6e      	adds	r6, r5, #1
 800e352:	4406      	add	r6, r0
 800e354:	4631      	mov	r1, r6
 800e356:	1d20      	adds	r0, r4, #4
 800e358:	f000 fc40 	bl	800ebdc <get_serialized_size_builtin_interfaces__msg__Time>
 800e35c:	4406      	add	r6, r0
 800e35e:	2101      	movs	r1, #1
 800e360:	4630      	mov	r0, r6
 800e362:	f002 ff3d 	bl	80111e0 <ucdr_alignment>
 800e366:	f100 0410 	add.w	r4, r0, #16
 800e36a:	4434      	add	r4, r6
 800e36c:	2108      	movs	r1, #8
 800e36e:	4620      	mov	r0, r4
 800e370:	f002 ff36 	bl	80111e0 <ucdr_alignment>
 800e374:	f1c5 0508 	rsb	r5, r5, #8
 800e378:	4405      	add	r5, r0
 800e37a:	1928      	adds	r0, r5, r4
 800e37c:	bd70      	pop	{r4, r5, r6, pc}
 800e37e:	bf00      	nop

0800e380 <_ServiceEventInfo__cdr_deserialize>:
 800e380:	b538      	push	{r3, r4, r5, lr}
 800e382:	460c      	mov	r4, r1
 800e384:	b1b1      	cbz	r1, 800e3b4 <_ServiceEventInfo__cdr_deserialize+0x34>
 800e386:	4605      	mov	r5, r0
 800e388:	f001 f9d8 	bl	800f73c <ucdr_deserialize_uint8_t>
 800e38c:	f000 fc8a 	bl	800eca4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800e390:	6843      	ldr	r3, [r0, #4]
 800e392:	1d21      	adds	r1, r4, #4
 800e394:	68db      	ldr	r3, [r3, #12]
 800e396:	4628      	mov	r0, r5
 800e398:	4798      	blx	r3
 800e39a:	f104 010c 	add.w	r1, r4, #12
 800e39e:	4628      	mov	r0, r5
 800e3a0:	2210      	movs	r2, #16
 800e3a2:	f000 ff23 	bl	800f1ec <ucdr_deserialize_array_uint8_t>
 800e3a6:	f104 0120 	add.w	r1, r4, #32
 800e3aa:	4628      	mov	r0, r5
 800e3ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e3b0:	f002 b9cc 	b.w	801074c <ucdr_deserialize_int64_t>
 800e3b4:	4608      	mov	r0, r1
 800e3b6:	bd38      	pop	{r3, r4, r5, pc}

0800e3b8 <_ServiceEventInfo__cdr_serialize>:
 800e3b8:	b1e0      	cbz	r0, 800e3f4 <_ServiceEventInfo__cdr_serialize+0x3c>
 800e3ba:	b570      	push	{r4, r5, r6, lr}
 800e3bc:	4606      	mov	r6, r0
 800e3be:	460d      	mov	r5, r1
 800e3c0:	4604      	mov	r4, r0
 800e3c2:	4608      	mov	r0, r1
 800e3c4:	f816 1b04 	ldrb.w	r1, [r6], #4
 800e3c8:	f001 f9a2 	bl	800f710 <ucdr_serialize_uint8_t>
 800e3cc:	f000 fc6a 	bl	800eca4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800e3d0:	6843      	ldr	r3, [r0, #4]
 800e3d2:	4629      	mov	r1, r5
 800e3d4:	689b      	ldr	r3, [r3, #8]
 800e3d6:	4630      	mov	r0, r6
 800e3d8:	4798      	blx	r3
 800e3da:	2210      	movs	r2, #16
 800e3dc:	f104 010c 	add.w	r1, r4, #12
 800e3e0:	4628      	mov	r0, r5
 800e3e2:	f000 fe9f 	bl	800f124 <ucdr_serialize_array_uint8_t>
 800e3e6:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 800e3ea:	4628      	mov	r0, r5
 800e3ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e3f0:	f002 b8e4 	b.w	80105bc <ucdr_serialize_int64_t>
 800e3f4:	4770      	bx	lr
 800e3f6:	bf00      	nop

0800e3f8 <_ServiceEventInfo__get_serialized_size>:
 800e3f8:	b538      	push	{r3, r4, r5, lr}
 800e3fa:	4604      	mov	r4, r0
 800e3fc:	b1a8      	cbz	r0, 800e42a <_ServiceEventInfo__get_serialized_size+0x32>
 800e3fe:	2101      	movs	r1, #1
 800e400:	2000      	movs	r0, #0
 800e402:	f002 feed 	bl	80111e0 <ucdr_alignment>
 800e406:	1c45      	adds	r5, r0, #1
 800e408:	4629      	mov	r1, r5
 800e40a:	1d20      	adds	r0, r4, #4
 800e40c:	f000 fbe6 	bl	800ebdc <get_serialized_size_builtin_interfaces__msg__Time>
 800e410:	182c      	adds	r4, r5, r0
 800e412:	2101      	movs	r1, #1
 800e414:	4620      	mov	r0, r4
 800e416:	f002 fee3 	bl	80111e0 <ucdr_alignment>
 800e41a:	3010      	adds	r0, #16
 800e41c:	4404      	add	r4, r0
 800e41e:	2108      	movs	r1, #8
 800e420:	4620      	mov	r0, r4
 800e422:	f002 fedd 	bl	80111e0 <ucdr_alignment>
 800e426:	3008      	adds	r0, #8
 800e428:	4420      	add	r0, r4
 800e42a:	bd38      	pop	{r3, r4, r5, pc}

0800e42c <_ServiceEventInfo__max_serialized_size>:
 800e42c:	b530      	push	{r4, r5, lr}
 800e42e:	2501      	movs	r5, #1
 800e430:	b083      	sub	sp, #12
 800e432:	4629      	mov	r1, r5
 800e434:	2000      	movs	r0, #0
 800e436:	f88d 5007 	strb.w	r5, [sp, #7]
 800e43a:	f002 fed1 	bl	80111e0 <ucdr_alignment>
 800e43e:	1944      	adds	r4, r0, r5
 800e440:	4621      	mov	r1, r4
 800e442:	f10d 0007 	add.w	r0, sp, #7
 800e446:	f000 fc19 	bl	800ec7c <max_serialized_size_builtin_interfaces__msg__Time>
 800e44a:	4404      	add	r4, r0
 800e44c:	4629      	mov	r1, r5
 800e44e:	4620      	mov	r0, r4
 800e450:	f002 fec6 	bl	80111e0 <ucdr_alignment>
 800e454:	3010      	adds	r0, #16
 800e456:	4404      	add	r4, r0
 800e458:	2108      	movs	r1, #8
 800e45a:	4620      	mov	r0, r4
 800e45c:	f002 fec0 	bl	80111e0 <ucdr_alignment>
 800e460:	3008      	adds	r0, #8
 800e462:	4420      	add	r0, r4
 800e464:	b003      	add	sp, #12
 800e466:	bd30      	pop	{r4, r5, pc}

0800e468 <max_serialized_size_service_msgs__msg__ServiceEventInfo>:
 800e468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e46a:	2701      	movs	r7, #1
 800e46c:	460c      	mov	r4, r1
 800e46e:	4606      	mov	r6, r0
 800e470:	7007      	strb	r7, [r0, #0]
 800e472:	4639      	mov	r1, r7
 800e474:	4620      	mov	r0, r4
 800e476:	f002 feb3 	bl	80111e0 <ucdr_alignment>
 800e47a:	19e3      	adds	r3, r4, r7
 800e47c:	18c5      	adds	r5, r0, r3
 800e47e:	4629      	mov	r1, r5
 800e480:	4630      	mov	r0, r6
 800e482:	f000 fbfb 	bl	800ec7c <max_serialized_size_builtin_interfaces__msg__Time>
 800e486:	4405      	add	r5, r0
 800e488:	4639      	mov	r1, r7
 800e48a:	4628      	mov	r0, r5
 800e48c:	f002 fea8 	bl	80111e0 <ucdr_alignment>
 800e490:	3010      	adds	r0, #16
 800e492:	4405      	add	r5, r0
 800e494:	2108      	movs	r1, #8
 800e496:	4628      	mov	r0, r5
 800e498:	f002 fea2 	bl	80111e0 <ucdr_alignment>
 800e49c:	f1c4 0408 	rsb	r4, r4, #8
 800e4a0:	4420      	add	r0, r4
 800e4a2:	4428      	add	r0, r5
 800e4a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e4a6:	bf00      	nop

0800e4a8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>:
 800e4a8:	4800      	ldr	r0, [pc, #0]	@ (800e4ac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo+0x4>)
 800e4aa:	4770      	bx	lr
 800e4ac:	200008bc 	.word	0x200008bc

0800e4b0 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_init_function>:
 800e4b0:	f00b b90a 	b.w	80196c8 <std_msgs__msg__Header__init>

0800e4b4 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_fini_function>:
 800e4b4:	f00b b928 	b.w	8019708 <std_msgs__msg__Header__fini>

0800e4b8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>:
 800e4b8:	b508      	push	{r3, lr}
 800e4ba:	f000 fb81 	bl	800ebc0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800e4be:	4b06      	ldr	r3, [pc, #24]	@ (800e4d8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 800e4c0:	4906      	ldr	r1, [pc, #24]	@ (800e4dc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x24>)
 800e4c2:	681a      	ldr	r2, [r3, #0]
 800e4c4:	60c8      	str	r0, [r1, #12]
 800e4c6:	b10a      	cbz	r2, 800e4cc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x14>
 800e4c8:	4803      	ldr	r0, [pc, #12]	@ (800e4d8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 800e4ca:	bd08      	pop	{r3, pc}
 800e4cc:	4a04      	ldr	r2, [pc, #16]	@ (800e4e0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x28>)
 800e4ce:	4802      	ldr	r0, [pc, #8]	@ (800e4d8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 800e4d0:	6812      	ldr	r2, [r2, #0]
 800e4d2:	601a      	str	r2, [r3, #0]
 800e4d4:	bd08      	pop	{r3, pc}
 800e4d6:	bf00      	nop
 800e4d8:	200008f0 	.word	0x200008f0
 800e4dc:	20000908 	.word	0x20000908
 800e4e0:	200005a0 	.word	0x200005a0

0800e4e4 <_Header__max_serialized_size>:
 800e4e4:	b500      	push	{lr}
 800e4e6:	b083      	sub	sp, #12
 800e4e8:	2301      	movs	r3, #1
 800e4ea:	2100      	movs	r1, #0
 800e4ec:	f10d 0007 	add.w	r0, sp, #7
 800e4f0:	f88d 3007 	strb.w	r3, [sp, #7]
 800e4f4:	f000 fbc2 	bl	800ec7c <max_serialized_size_builtin_interfaces__msg__Time>
 800e4f8:	b003      	add	sp, #12
 800e4fa:	f85d fb04 	ldr.w	pc, [sp], #4
 800e4fe:	bf00      	nop

0800e500 <get_serialized_size_std_msgs__msg__Header>:
 800e500:	b570      	push	{r4, r5, r6, lr}
 800e502:	4605      	mov	r5, r0
 800e504:	b168      	cbz	r0, 800e522 <get_serialized_size_std_msgs__msg__Header+0x22>
 800e506:	460c      	mov	r4, r1
 800e508:	f000 fb68 	bl	800ebdc <get_serialized_size_builtin_interfaces__msg__Time>
 800e50c:	1826      	adds	r6, r4, r0
 800e50e:	2104      	movs	r1, #4
 800e510:	4630      	mov	r0, r6
 800e512:	f002 fe65 	bl	80111e0 <ucdr_alignment>
 800e516:	68eb      	ldr	r3, [r5, #12]
 800e518:	f1c4 0405 	rsb	r4, r4, #5
 800e51c:	441c      	add	r4, r3
 800e51e:	4404      	add	r4, r0
 800e520:	19a0      	adds	r0, r4, r6
 800e522:	bd70      	pop	{r4, r5, r6, pc}

0800e524 <_Header__cdr_deserialize>:
 800e524:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e526:	460c      	mov	r4, r1
 800e528:	b083      	sub	sp, #12
 800e52a:	b1e1      	cbz	r1, 800e566 <_Header__cdr_deserialize+0x42>
 800e52c:	4606      	mov	r6, r0
 800e52e:	f000 fbb9 	bl	800eca4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800e532:	6843      	ldr	r3, [r0, #4]
 800e534:	4621      	mov	r1, r4
 800e536:	68db      	ldr	r3, [r3, #12]
 800e538:	4630      	mov	r0, r6
 800e53a:	4798      	blx	r3
 800e53c:	6927      	ldr	r7, [r4, #16]
 800e53e:	68a1      	ldr	r1, [r4, #8]
 800e540:	ab01      	add	r3, sp, #4
 800e542:	463a      	mov	r2, r7
 800e544:	4630      	mov	r0, r6
 800e546:	f002 fec9 	bl	80112dc <ucdr_deserialize_sequence_char>
 800e54a:	9b01      	ldr	r3, [sp, #4]
 800e54c:	4605      	mov	r5, r0
 800e54e:	b920      	cbnz	r0, 800e55a <_Header__cdr_deserialize+0x36>
 800e550:	429f      	cmp	r7, r3
 800e552:	d30c      	bcc.n	800e56e <_Header__cdr_deserialize+0x4a>
 800e554:	4628      	mov	r0, r5
 800e556:	b003      	add	sp, #12
 800e558:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e55a:	b103      	cbz	r3, 800e55e <_Header__cdr_deserialize+0x3a>
 800e55c:	3b01      	subs	r3, #1
 800e55e:	4628      	mov	r0, r5
 800e560:	60e3      	str	r3, [r4, #12]
 800e562:	b003      	add	sp, #12
 800e564:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e566:	460d      	mov	r5, r1
 800e568:	4628      	mov	r0, r5
 800e56a:	b003      	add	sp, #12
 800e56c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e56e:	2101      	movs	r1, #1
 800e570:	75b0      	strb	r0, [r6, #22]
 800e572:	7571      	strb	r1, [r6, #21]
 800e574:	60e0      	str	r0, [r4, #12]
 800e576:	4630      	mov	r0, r6
 800e578:	f002 fe48 	bl	801120c <ucdr_align_to>
 800e57c:	4630      	mov	r0, r6
 800e57e:	9901      	ldr	r1, [sp, #4]
 800e580:	f002 fe7a 	bl	8011278 <ucdr_advance_buffer>
 800e584:	4628      	mov	r0, r5
 800e586:	b003      	add	sp, #12
 800e588:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e58a:	bf00      	nop

0800e58c <_Header__cdr_serialize>:
 800e58c:	b1f8      	cbz	r0, 800e5ce <_Header__cdr_serialize+0x42>
 800e58e:	b570      	push	{r4, r5, r6, lr}
 800e590:	4604      	mov	r4, r0
 800e592:	460d      	mov	r5, r1
 800e594:	f000 fb86 	bl	800eca4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800e598:	6843      	ldr	r3, [r0, #4]
 800e59a:	4629      	mov	r1, r5
 800e59c:	689b      	ldr	r3, [r3, #8]
 800e59e:	4620      	mov	r0, r4
 800e5a0:	4798      	blx	r3
 800e5a2:	68a6      	ldr	r6, [r4, #8]
 800e5a4:	b156      	cbz	r6, 800e5bc <_Header__cdr_serialize+0x30>
 800e5a6:	4630      	mov	r0, r6
 800e5a8:	f7f1 fe8a 	bl	80002c0 <strlen>
 800e5ac:	4631      	mov	r1, r6
 800e5ae:	60e0      	str	r0, [r4, #12]
 800e5b0:	1c42      	adds	r2, r0, #1
 800e5b2:	4628      	mov	r0, r5
 800e5b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e5b8:	f002 be7e 	b.w	80112b8 <ucdr_serialize_sequence_char>
 800e5bc:	4630      	mov	r0, r6
 800e5be:	60e0      	str	r0, [r4, #12]
 800e5c0:	4632      	mov	r2, r6
 800e5c2:	4631      	mov	r1, r6
 800e5c4:	4628      	mov	r0, r5
 800e5c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e5ca:	f002 be75 	b.w	80112b8 <ucdr_serialize_sequence_char>
 800e5ce:	4770      	bx	lr

0800e5d0 <_Header__get_serialized_size>:
 800e5d0:	b538      	push	{r3, r4, r5, lr}
 800e5d2:	4604      	mov	r4, r0
 800e5d4:	b150      	cbz	r0, 800e5ec <_Header__get_serialized_size+0x1c>
 800e5d6:	2100      	movs	r1, #0
 800e5d8:	f000 fb00 	bl	800ebdc <get_serialized_size_builtin_interfaces__msg__Time>
 800e5dc:	2104      	movs	r1, #4
 800e5de:	4605      	mov	r5, r0
 800e5e0:	f002 fdfe 	bl	80111e0 <ucdr_alignment>
 800e5e4:	68e4      	ldr	r4, [r4, #12]
 800e5e6:	3405      	adds	r4, #5
 800e5e8:	442c      	add	r4, r5
 800e5ea:	4420      	add	r0, r4
 800e5ec:	bd38      	pop	{r3, r4, r5, pc}
 800e5ee:	bf00      	nop

0800e5f0 <max_serialized_size_std_msgs__msg__Header>:
 800e5f0:	b510      	push	{r4, lr}
 800e5f2:	2301      	movs	r3, #1
 800e5f4:	4604      	mov	r4, r0
 800e5f6:	7003      	strb	r3, [r0, #0]
 800e5f8:	f000 fb40 	bl	800ec7c <max_serialized_size_builtin_interfaces__msg__Time>
 800e5fc:	2300      	movs	r3, #0
 800e5fe:	7023      	strb	r3, [r4, #0]
 800e600:	bd10      	pop	{r4, pc}
 800e602:	bf00      	nop

0800e604 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>:
 800e604:	4800      	ldr	r0, [pc, #0]	@ (800e608 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header+0x4>)
 800e606:	4770      	bx	lr
 800e608:	20000980 	.word	0x20000980

0800e60c <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__SetBool>:
 800e60c:	4b04      	ldr	r3, [pc, #16]	@ (800e620 <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x14>)
 800e60e:	681a      	ldr	r2, [r3, #0]
 800e610:	b10a      	cbz	r2, 800e616 <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__SetBool+0xa>
 800e612:	4803      	ldr	r0, [pc, #12]	@ (800e620 <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x14>)
 800e614:	4770      	bx	lr
 800e616:	4a03      	ldr	r2, [pc, #12]	@ (800e624 <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x18>)
 800e618:	4801      	ldr	r0, [pc, #4]	@ (800e620 <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x14>)
 800e61a:	6812      	ldr	r2, [r2, #0]
 800e61c:	601a      	str	r2, [r3, #0]
 800e61e:	4770      	bx	lr
 800e620:	200009b4 	.word	0x200009b4
 800e624:	2000059c 	.word	0x2000059c

0800e628 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request>:
 800e628:	4b06      	ldr	r3, [pc, #24]	@ (800e644 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0x1c>)
 800e62a:	4807      	ldr	r0, [pc, #28]	@ (800e648 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0x20>)
 800e62c:	4907      	ldr	r1, [pc, #28]	@ (800e64c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0x24>)
 800e62e:	4a08      	ldr	r2, [pc, #32]	@ (800e650 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0x28>)
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	b410      	push	{r4}
 800e634:	4c07      	ldr	r4, [pc, #28]	@ (800e654 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0x2c>)
 800e636:	6003      	str	r3, [r0, #0]
 800e638:	6023      	str	r3, [r4, #0]
 800e63a:	600b      	str	r3, [r1, #0]
 800e63c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e640:	6013      	str	r3, [r2, #0]
 800e642:	4770      	bx	lr
 800e644:	2000059c 	.word	0x2000059c
 800e648:	20000a08 	.word	0x20000a08
 800e64c:	200009e8 	.word	0x200009e8
 800e650:	200009b4 	.word	0x200009b4
 800e654:	20000a28 	.word	0x20000a28

0800e658 <std_srvs__srv__SetBool_Event__rosidl_typesupport_introspection_c__size_function__SetBool_Event__request>:
 800e658:	6840      	ldr	r0, [r0, #4]
 800e65a:	4770      	bx	lr

0800e65c <std_srvs__srv__SetBool_Event__rosidl_typesupport_introspection_c__get_const_function__SetBool_Event__request>:
 800e65c:	6800      	ldr	r0, [r0, #0]
 800e65e:	4408      	add	r0, r1
 800e660:	4770      	bx	lr
 800e662:	bf00      	nop

0800e664 <std_srvs__srv__SetBool_Event__rosidl_typesupport_introspection_c__fetch_function__SetBool_Event__request>:
 800e664:	6803      	ldr	r3, [r0, #0]
 800e666:	5c5b      	ldrb	r3, [r3, r1]
 800e668:	7013      	strb	r3, [r2, #0]
 800e66a:	4770      	bx	lr

0800e66c <std_srvs__srv__SetBool_Event__rosidl_typesupport_introspection_c__assign_function__SetBool_Event__request>:
 800e66c:	6803      	ldr	r3, [r0, #0]
 800e66e:	7812      	ldrb	r2, [r2, #0]
 800e670:	545a      	strb	r2, [r3, r1]
 800e672:	4770      	bx	lr

0800e674 <std_srvs__srv__SetBool_Event__rosidl_typesupport_introspection_c__size_function__SetBool_Event__response>:
 800e674:	6840      	ldr	r0, [r0, #4]
 800e676:	4770      	bx	lr

0800e678 <std_srvs__srv__SetBool_Event__rosidl_typesupport_introspection_c__get_const_function__SetBool_Event__response>:
 800e678:	6800      	ldr	r0, [r0, #0]
 800e67a:	eb00 1001 	add.w	r0, r0, r1, lsl #4
 800e67e:	4770      	bx	lr

0800e680 <std_srvs__srv__SetBool_Event__rosidl_typesupport_introspection_c__fetch_function__SetBool_Event__response>:
 800e680:	6803      	ldr	r3, [r0, #0]
 800e682:	eb03 1101 	add.w	r1, r3, r1, lsl #4
 800e686:	4694      	mov	ip, r2
 800e688:	c90f      	ldmia	r1, {r0, r1, r2, r3}
 800e68a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 800e68e:	4770      	bx	lr

0800e690 <std_srvs__srv__SetBool_Event__rosidl_typesupport_introspection_c__assign_function__SetBool_Event__response>:
 800e690:	6803      	ldr	r3, [r0, #0]
 800e692:	eb03 1c01 	add.w	ip, r3, r1, lsl #4
 800e696:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800e698:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 800e69c:	4770      	bx	lr
 800e69e:	bf00      	nop

0800e6a0 <std_srvs__srv__SetBool_Request__rosidl_typesupport_introspection_c__SetBool_Request_init_function>:
 800e6a0:	f00b ba30 	b.w	8019b04 <std_srvs__srv__SetBool_Request__init>

0800e6a4 <std_srvs__srv__SetBool_Request__rosidl_typesupport_introspection_c__SetBool_Request_fini_function>:
 800e6a4:	f00b ba32 	b.w	8019b0c <std_srvs__srv__SetBool_Request__fini>

0800e6a8 <std_srvs__srv__SetBool_Response__rosidl_typesupport_introspection_c__SetBool_Response_init_function>:
 800e6a8:	f00b ba6a 	b.w	8019b80 <std_srvs__srv__SetBool_Response__init>

0800e6ac <std_srvs__srv__SetBool_Response__rosidl_typesupport_introspection_c__SetBool_Response_fini_function>:
 800e6ac:	f00b ba78 	b.w	8019ba0 <std_srvs__srv__SetBool_Response__fini>

0800e6b0 <std_srvs__srv__SetBool_Event__rosidl_typesupport_introspection_c__SetBool_Event_init_function>:
 800e6b0:	f00b baf0 	b.w	8019c94 <std_srvs__srv__SetBool_Event__init>

0800e6b4 <std_srvs__srv__SetBool_Event__rosidl_typesupport_introspection_c__SetBool_Event_fini_function>:
 800e6b4:	f00b bb0e 	b.w	8019cd4 <std_srvs__srv__SetBool_Event__fini>

0800e6b8 <std_srvs__srv__SetBool_Event__rosidl_typesupport_introspection_c__resize_function__SetBool_Event__request>:
 800e6b8:	b538      	push	{r3, r4, r5, lr}
 800e6ba:	4604      	mov	r4, r0
 800e6bc:	460d      	mov	r5, r1
 800e6be:	f00b fa4b 	bl	8019b58 <std_srvs__srv__SetBool_Request__Sequence__fini>
 800e6c2:	4629      	mov	r1, r5
 800e6c4:	4620      	mov	r0, r4
 800e6c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e6ca:	f00b ba29 	b.w	8019b20 <std_srvs__srv__SetBool_Request__Sequence__init>
 800e6ce:	bf00      	nop

0800e6d0 <std_srvs__srv__SetBool_Event__rosidl_typesupport_introspection_c__resize_function__SetBool_Event__response>:
 800e6d0:	b538      	push	{r3, r4, r5, lr}
 800e6d2:	4604      	mov	r4, r0
 800e6d4:	460d      	mov	r5, r1
 800e6d6:	f00b fab5 	bl	8019c44 <std_srvs__srv__SetBool_Response__Sequence__fini>
 800e6da:	4629      	mov	r1, r5
 800e6dc:	4620      	mov	r0, r4
 800e6de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e6e2:	f00b ba6d 	b.w	8019bc0 <std_srvs__srv__SetBool_Response__Sequence__init>
 800e6e6:	bf00      	nop

0800e6e8 <std_srvs__srv__SetBool_Event__rosidl_typesupport_introspection_c__get_function__SetBool_Event__request>:
 800e6e8:	6800      	ldr	r0, [r0, #0]
 800e6ea:	4408      	add	r0, r1
 800e6ec:	4770      	bx	lr
 800e6ee:	bf00      	nop

0800e6f0 <std_srvs__srv__SetBool_Event__rosidl_typesupport_introspection_c__get_function__SetBool_Event__response>:
 800e6f0:	6800      	ldr	r0, [r0, #0]
 800e6f2:	eb00 1001 	add.w	r0, r0, r1, lsl #4
 800e6f6:	4770      	bx	lr

0800e6f8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request>:
 800e6f8:	4b04      	ldr	r3, [pc, #16]	@ (800e70c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0x14>)
 800e6fa:	681a      	ldr	r2, [r3, #0]
 800e6fc:	b10a      	cbz	r2, 800e702 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0xa>
 800e6fe:	4803      	ldr	r0, [pc, #12]	@ (800e70c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0x14>)
 800e700:	4770      	bx	lr
 800e702:	4a03      	ldr	r2, [pc, #12]	@ (800e710 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0x18>)
 800e704:	4801      	ldr	r0, [pc, #4]	@ (800e70c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0x14>)
 800e706:	6812      	ldr	r2, [r2, #0]
 800e708:	601a      	str	r2, [r3, #0]
 800e70a:	4770      	bx	lr
 800e70c:	20000be4 	.word	0x20000be4
 800e710:	200005a0 	.word	0x200005a0

0800e714 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Response>:
 800e714:	4b04      	ldr	r3, [pc, #16]	@ (800e728 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Response+0x14>)
 800e716:	681a      	ldr	r2, [r3, #0]
 800e718:	b10a      	cbz	r2, 800e71e <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Response+0xa>
 800e71a:	4803      	ldr	r0, [pc, #12]	@ (800e728 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Response+0x14>)
 800e71c:	4770      	bx	lr
 800e71e:	4a03      	ldr	r2, [pc, #12]	@ (800e72c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Response+0x18>)
 800e720:	4801      	ldr	r0, [pc, #4]	@ (800e728 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Response+0x14>)
 800e722:	6812      	ldr	r2, [r2, #0]
 800e724:	601a      	str	r2, [r3, #0]
 800e726:	4770      	bx	lr
 800e728:	20000b54 	.word	0x20000b54
 800e72c:	200005a0 	.word	0x200005a0

0800e730 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Event>:
 800e730:	b508      	push	{r3, lr}
 800e732:	f7ff fdef 	bl	800e314 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 800e736:	4913      	ldr	r1, [pc, #76]	@ (800e784 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Event+0x54>)
 800e738:	4b13      	ldr	r3, [pc, #76]	@ (800e788 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Event+0x58>)
 800e73a:	680a      	ldr	r2, [r1, #0]
 800e73c:	60d8      	str	r0, [r3, #12]
 800e73e:	b152      	cbz	r2, 800e756 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Event+0x26>
 800e740:	4a12      	ldr	r2, [pc, #72]	@ (800e78c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Event+0x5c>)
 800e742:	6499      	str	r1, [r3, #72]	@ 0x48
 800e744:	6811      	ldr	r1, [r2, #0]
 800e746:	b171      	cbz	r1, 800e766 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Event+0x36>
 800e748:	4911      	ldr	r1, [pc, #68]	@ (800e790 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Event+0x60>)
 800e74a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 800e74e:	680b      	ldr	r3, [r1, #0]
 800e750:	b193      	cbz	r3, 800e778 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Event+0x48>
 800e752:	480f      	ldr	r0, [pc, #60]	@ (800e790 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Event+0x60>)
 800e754:	bd08      	pop	{r3, pc}
 800e756:	4a0f      	ldr	r2, [pc, #60]	@ (800e794 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Event+0x64>)
 800e758:	6499      	str	r1, [r3, #72]	@ 0x48
 800e75a:	6812      	ldr	r2, [r2, #0]
 800e75c:	600a      	str	r2, [r1, #0]
 800e75e:	4a0b      	ldr	r2, [pc, #44]	@ (800e78c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Event+0x5c>)
 800e760:	6811      	ldr	r1, [r2, #0]
 800e762:	2900      	cmp	r1, #0
 800e764:	d1f0      	bne.n	800e748 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Event+0x18>
 800e766:	490b      	ldr	r1, [pc, #44]	@ (800e794 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Event+0x64>)
 800e768:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 800e76c:	6809      	ldr	r1, [r1, #0]
 800e76e:	6011      	str	r1, [r2, #0]
 800e770:	4907      	ldr	r1, [pc, #28]	@ (800e790 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Event+0x60>)
 800e772:	680b      	ldr	r3, [r1, #0]
 800e774:	2b00      	cmp	r3, #0
 800e776:	d1ec      	bne.n	800e752 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Event+0x22>
 800e778:	4b06      	ldr	r3, [pc, #24]	@ (800e794 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Event+0x64>)
 800e77a:	4805      	ldr	r0, [pc, #20]	@ (800e790 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Event+0x60>)
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	600b      	str	r3, [r1, #0]
 800e780:	bd08      	pop	{r3, pc}
 800e782:	bf00      	nop
 800e784:	20000be4 	.word	0x20000be4
 800e788:	20000aa0 	.word	0x20000aa0
 800e78c:	20000b54 	.word	0x20000b54
 800e790:	20000a88 	.word	0x20000a88
 800e794:	200005a0 	.word	0x200005a0

0800e798 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool>:
 800e798:	4b25      	ldr	r3, [pc, #148]	@ (800e830 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x98>)
 800e79a:	681a      	ldr	r2, [r3, #0]
 800e79c:	b510      	push	{r4, lr}
 800e79e:	b142      	cbz	r2, 800e7b2 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x1a>
 800e7a0:	685c      	ldr	r4, [r3, #4]
 800e7a2:	68a3      	ldr	r3, [r4, #8]
 800e7a4:	b163      	cbz	r3, 800e7c0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x28>
 800e7a6:	68e3      	ldr	r3, [r4, #12]
 800e7a8:	b193      	cbz	r3, 800e7d0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x38>
 800e7aa:	6923      	ldr	r3, [r4, #16]
 800e7ac:	b1c3      	cbz	r3, 800e7e0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x48>
 800e7ae:	4820      	ldr	r0, [pc, #128]	@ (800e830 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x98>)
 800e7b0:	bd10      	pop	{r4, pc}
 800e7b2:	4a20      	ldr	r2, [pc, #128]	@ (800e834 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x9c>)
 800e7b4:	685c      	ldr	r4, [r3, #4]
 800e7b6:	6812      	ldr	r2, [r2, #0]
 800e7b8:	601a      	str	r2, [r3, #0]
 800e7ba:	68a3      	ldr	r3, [r4, #8]
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d1f2      	bne.n	800e7a6 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0xe>
 800e7c0:	4a1d      	ldr	r2, [pc, #116]	@ (800e838 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0xa0>)
 800e7c2:	6813      	ldr	r3, [r2, #0]
 800e7c4:	b303      	cbz	r3, 800e808 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x70>
 800e7c6:	6853      	ldr	r3, [r2, #4]
 800e7c8:	60a3      	str	r3, [r4, #8]
 800e7ca:	68e3      	ldr	r3, [r4, #12]
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d1ec      	bne.n	800e7aa <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x12>
 800e7d0:	4b1a      	ldr	r3, [pc, #104]	@ (800e83c <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0xa4>)
 800e7d2:	681a      	ldr	r2, [r3, #0]
 800e7d4:	b1e2      	cbz	r2, 800e810 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x78>
 800e7d6:	685b      	ldr	r3, [r3, #4]
 800e7d8:	60e3      	str	r3, [r4, #12]
 800e7da:	6923      	ldr	r3, [r4, #16]
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d1e6      	bne.n	800e7ae <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x16>
 800e7e0:	f7ff fd98 	bl	800e314 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 800e7e4:	4a14      	ldr	r2, [pc, #80]	@ (800e838 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0xa0>)
 800e7e6:	4916      	ldr	r1, [pc, #88]	@ (800e840 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0xa8>)
 800e7e8:	6813      	ldr	r3, [r2, #0]
 800e7ea:	60c8      	str	r0, [r1, #12]
 800e7ec:	b1e3      	cbz	r3, 800e828 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x90>
 800e7ee:	4b13      	ldr	r3, [pc, #76]	@ (800e83c <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0xa4>)
 800e7f0:	648a      	str	r2, [r1, #72]	@ 0x48
 800e7f2:	681a      	ldr	r2, [r3, #0]
 800e7f4:	b1a2      	cbz	r2, 800e820 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x88>
 800e7f6:	4a13      	ldr	r2, [pc, #76]	@ (800e844 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0xac>)
 800e7f8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
 800e7fc:	6813      	ldr	r3, [r2, #0]
 800e7fe:	b15b      	cbz	r3, 800e818 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x80>
 800e800:	6853      	ldr	r3, [r2, #4]
 800e802:	480b      	ldr	r0, [pc, #44]	@ (800e830 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x98>)
 800e804:	6123      	str	r3, [r4, #16]
 800e806:	bd10      	pop	{r4, pc}
 800e808:	4b0a      	ldr	r3, [pc, #40]	@ (800e834 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x9c>)
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	6013      	str	r3, [r2, #0]
 800e80e:	e7da      	b.n	800e7c6 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x2e>
 800e810:	4a08      	ldr	r2, [pc, #32]	@ (800e834 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x9c>)
 800e812:	6812      	ldr	r2, [r2, #0]
 800e814:	601a      	str	r2, [r3, #0]
 800e816:	e7de      	b.n	800e7d6 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x3e>
 800e818:	4b06      	ldr	r3, [pc, #24]	@ (800e834 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x9c>)
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	6013      	str	r3, [r2, #0]
 800e81e:	e7ef      	b.n	800e800 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x68>
 800e820:	4a04      	ldr	r2, [pc, #16]	@ (800e834 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x9c>)
 800e822:	6812      	ldr	r2, [r2, #0]
 800e824:	601a      	str	r2, [r3, #0]
 800e826:	e7e6      	b.n	800e7f6 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x5e>
 800e828:	4b02      	ldr	r3, [pc, #8]	@ (800e834 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x9c>)
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	6013      	str	r3, [r2, #0]
 800e82e:	e7de      	b.n	800e7ee <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x56>
 800e830:	20000a48 	.word	0x20000a48
 800e834:	200005a0 	.word	0x200005a0
 800e838:	20000be4 	.word	0x20000be4
 800e83c:	20000b54 	.word	0x20000b54
 800e840:	20000aa0 	.word	0x20000aa0
 800e844:	20000a88 	.word	0x20000a88

0800e848 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request>:
 800e848:	4800      	ldr	r0, [pc, #0]	@ (800e84c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0x4>)
 800e84a:	4770      	bx	lr
 800e84c:	20000cdc 	.word	0x20000cdc

0800e850 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_srvs__srv__SetBool_Response>:
 800e850:	4800      	ldr	r0, [pc, #0]	@ (800e854 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_srvs__srv__SetBool_Response+0x4>)
 800e852:	4770      	bx	lr
 800e854:	20000ca8 	.word	0x20000ca8

0800e858 <_SetBool_Request__max_serialized_size>:
 800e858:	b508      	push	{r3, lr}
 800e85a:	2101      	movs	r1, #1
 800e85c:	2000      	movs	r0, #0
 800e85e:	f002 fcbf 	bl	80111e0 <ucdr_alignment>
 800e862:	3001      	adds	r0, #1
 800e864:	bd08      	pop	{r3, pc}
 800e866:	bf00      	nop

0800e868 <_SetBool_Request__cdr_deserialize>:
 800e868:	b109      	cbz	r1, 800e86e <_SetBool_Request__cdr_deserialize+0x6>
 800e86a:	f000 bf39 	b.w	800f6e0 <ucdr_deserialize_bool>
 800e86e:	4608      	mov	r0, r1
 800e870:	4770      	bx	lr
 800e872:	bf00      	nop

0800e874 <_SetBool_Event__max_serialized_size>:
 800e874:	b500      	push	{lr}
 800e876:	b083      	sub	sp, #12
 800e878:	2301      	movs	r3, #1
 800e87a:	2100      	movs	r1, #0
 800e87c:	f10d 0007 	add.w	r0, sp, #7
 800e880:	f88d 3007 	strb.w	r3, [sp, #7]
 800e884:	f7ff fdf0 	bl	800e468 <max_serialized_size_service_msgs__msg__ServiceEventInfo>
 800e888:	b003      	add	sp, #12
 800e88a:	f85d fb04 	ldr.w	pc, [sp], #4
 800e88e:	bf00      	nop

0800e890 <_SetBool_Event__cdr_deserialize>:
 800e890:	2900      	cmp	r1, #0
 800e892:	d042      	beq.n	800e91a <_SetBool_Event__cdr_deserialize+0x8a>
 800e894:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e896:	b083      	sub	sp, #12
 800e898:	4606      	mov	r6, r0
 800e89a:	460d      	mov	r5, r1
 800e89c:	f7ff fe04 	bl	800e4a8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 800e8a0:	6843      	ldr	r3, [r0, #4]
 800e8a2:	4629      	mov	r1, r5
 800e8a4:	68db      	ldr	r3, [r3, #12]
 800e8a6:	4630      	mov	r0, r6
 800e8a8:	4798      	blx	r3
 800e8aa:	a901      	add	r1, sp, #4
 800e8ac:	4630      	mov	r0, r6
 800e8ae:	f001 fa75 	bl	800fd9c <ucdr_deserialize_uint32_t>
 800e8b2:	9b01      	ldr	r3, [sp, #4]
 800e8b4:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 800e8b6:	429a      	cmp	r2, r3
 800e8b8:	d32c      	bcc.n	800e914 <_SetBool_Event__cdr_deserialize+0x84>
 800e8ba:	62eb      	str	r3, [r5, #44]	@ 0x2c
 800e8bc:	b173      	cbz	r3, 800e8dc <_SetBool_Event__cdr_deserialize+0x4c>
 800e8be:	4f18      	ldr	r7, [pc, #96]	@ (800e920 <_SetBool_Event__cdr_deserialize+0x90>)
 800e8c0:	2400      	movs	r4, #0
 800e8c2:	e003      	b.n	800e8cc <_SetBool_Event__cdr_deserialize+0x3c>
 800e8c4:	9b01      	ldr	r3, [sp, #4]
 800e8c6:	3401      	adds	r4, #1
 800e8c8:	42a3      	cmp	r3, r4
 800e8ca:	d907      	bls.n	800e8dc <_SetBool_Event__cdr_deserialize+0x4c>
 800e8cc:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	4421      	add	r1, r4
 800e8d2:	68db      	ldr	r3, [r3, #12]
 800e8d4:	4630      	mov	r0, r6
 800e8d6:	4798      	blx	r3
 800e8d8:	2800      	cmp	r0, #0
 800e8da:	d1f3      	bne.n	800e8c4 <_SetBool_Event__cdr_deserialize+0x34>
 800e8dc:	a901      	add	r1, sp, #4
 800e8de:	4630      	mov	r0, r6
 800e8e0:	f001 fa5c 	bl	800fd9c <ucdr_deserialize_uint32_t>
 800e8e4:	9b01      	ldr	r3, [sp, #4]
 800e8e6:	6bea      	ldr	r2, [r5, #60]	@ 0x3c
 800e8e8:	429a      	cmp	r2, r3
 800e8ea:	d313      	bcc.n	800e914 <_SetBool_Event__cdr_deserialize+0x84>
 800e8ec:	63ab      	str	r3, [r5, #56]	@ 0x38
 800e8ee:	b17b      	cbz	r3, 800e910 <_SetBool_Event__cdr_deserialize+0x80>
 800e8f0:	4f0c      	ldr	r7, [pc, #48]	@ (800e924 <_SetBool_Event__cdr_deserialize+0x94>)
 800e8f2:	2400      	movs	r4, #0
 800e8f4:	e002      	b.n	800e8fc <_SetBool_Event__cdr_deserialize+0x6c>
 800e8f6:	9b01      	ldr	r3, [sp, #4]
 800e8f8:	42a3      	cmp	r3, r4
 800e8fa:	d909      	bls.n	800e910 <_SetBool_Event__cdr_deserialize+0x80>
 800e8fc:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	eb01 1104 	add.w	r1, r1, r4, lsl #4
 800e904:	68db      	ldr	r3, [r3, #12]
 800e906:	4630      	mov	r0, r6
 800e908:	4798      	blx	r3
 800e90a:	3401      	adds	r4, #1
 800e90c:	2800      	cmp	r0, #0
 800e90e:	d1f2      	bne.n	800e8f6 <_SetBool_Event__cdr_deserialize+0x66>
 800e910:	b003      	add	sp, #12
 800e912:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e914:	2000      	movs	r0, #0
 800e916:	b003      	add	sp, #12
 800e918:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e91a:	2000      	movs	r0, #0
 800e91c:	4770      	bx	lr
 800e91e:	bf00      	nop
 800e920:	20000cdc 	.word	0x20000cdc
 800e924:	20000ca8 	.word	0x20000ca8

0800e928 <_SetBool_Event__cdr_serialize>:
 800e928:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e92c:	2800      	cmp	r0, #0
 800e92e:	d038      	beq.n	800e9a2 <_SetBool_Event__cdr_serialize+0x7a>
 800e930:	460e      	mov	r6, r1
 800e932:	4604      	mov	r4, r0
 800e934:	f7ff fdb8 	bl	800e4a8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 800e938:	6843      	ldr	r3, [r0, #4]
 800e93a:	4631      	mov	r1, r6
 800e93c:	689b      	ldr	r3, [r3, #8]
 800e93e:	4620      	mov	r0, r4
 800e940:	4798      	blx	r3
 800e942:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800e944:	4630      	mov	r0, r6
 800e946:	4639      	mov	r1, r7
 800e948:	f001 f8fe 	bl	800fb48 <ucdr_serialize_uint32_t>
 800e94c:	b180      	cbz	r0, 800e970 <_SetBool_Event__cdr_serialize+0x48>
 800e94e:	b17f      	cbz	r7, 800e970 <_SetBool_Event__cdr_serialize+0x48>
 800e950:	f8df 8058 	ldr.w	r8, [pc, #88]	@ 800e9ac <_SetBool_Event__cdr_serialize+0x84>
 800e954:	2500      	movs	r5, #0
 800e956:	e002      	b.n	800e95e <_SetBool_Event__cdr_serialize+0x36>
 800e958:	3501      	adds	r5, #1
 800e95a:	42af      	cmp	r7, r5
 800e95c:	d008      	beq.n	800e970 <_SetBool_Event__cdr_serialize+0x48>
 800e95e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800e960:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e964:	4631      	mov	r1, r6
 800e966:	689b      	ldr	r3, [r3, #8]
 800e968:	4428      	add	r0, r5
 800e96a:	4798      	blx	r3
 800e96c:	2800      	cmp	r0, #0
 800e96e:	d1f3      	bne.n	800e958 <_SetBool_Event__cdr_serialize+0x30>
 800e970:	6ba7      	ldr	r7, [r4, #56]	@ 0x38
 800e972:	4630      	mov	r0, r6
 800e974:	4639      	mov	r1, r7
 800e976:	f001 f8e7 	bl	800fb48 <ucdr_serialize_uint32_t>
 800e97a:	4680      	mov	r8, r0
 800e97c:	b188      	cbz	r0, 800e9a2 <_SetBool_Event__cdr_serialize+0x7a>
 800e97e:	b197      	cbz	r7, 800e9a6 <_SetBool_Event__cdr_serialize+0x7e>
 800e980:	f8df 902c 	ldr.w	r9, [pc, #44]	@ 800e9b0 <_SetBool_Event__cdr_serialize+0x88>
 800e984:	2500      	movs	r5, #0
 800e986:	e002      	b.n	800e98e <_SetBool_Event__cdr_serialize+0x66>
 800e988:	3501      	adds	r5, #1
 800e98a:	42af      	cmp	r7, r5
 800e98c:	d00b      	beq.n	800e9a6 <_SetBool_Event__cdr_serialize+0x7e>
 800e98e:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 800e990:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800e994:	4631      	mov	r1, r6
 800e996:	689b      	ldr	r3, [r3, #8]
 800e998:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 800e99c:	4798      	blx	r3
 800e99e:	2800      	cmp	r0, #0
 800e9a0:	d1f2      	bne.n	800e988 <_SetBool_Event__cdr_serialize+0x60>
 800e9a2:	f04f 0800 	mov.w	r8, #0
 800e9a6:	4640      	mov	r0, r8
 800e9a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e9ac:	20000cdc 	.word	0x20000cdc
 800e9b0:	20000ca8 	.word	0x20000ca8

0800e9b4 <get_serialized_size_std_srvs__srv__SetBool_Request>:
 800e9b4:	b508      	push	{r3, lr}
 800e9b6:	b120      	cbz	r0, 800e9c2 <get_serialized_size_std_srvs__srv__SetBool_Request+0xe>
 800e9b8:	4608      	mov	r0, r1
 800e9ba:	2101      	movs	r1, #1
 800e9bc:	f002 fc10 	bl	80111e0 <ucdr_alignment>
 800e9c0:	3001      	adds	r0, #1
 800e9c2:	bd08      	pop	{r3, pc}

0800e9c4 <get_serialized_size_std_srvs__srv__SetBool_Response>:
 800e9c4:	b570      	push	{r4, r5, r6, lr}
 800e9c6:	4605      	mov	r5, r0
 800e9c8:	b180      	cbz	r0, 800e9ec <get_serialized_size_std_srvs__srv__SetBool_Response+0x28>
 800e9ca:	460c      	mov	r4, r1
 800e9cc:	4620      	mov	r0, r4
 800e9ce:	2101      	movs	r1, #1
 800e9d0:	f002 fc06 	bl	80111e0 <ucdr_alignment>
 800e9d4:	1c66      	adds	r6, r4, #1
 800e9d6:	4406      	add	r6, r0
 800e9d8:	2104      	movs	r1, #4
 800e9da:	4630      	mov	r0, r6
 800e9dc:	f002 fc00 	bl	80111e0 <ucdr_alignment>
 800e9e0:	68ab      	ldr	r3, [r5, #8]
 800e9e2:	f1c4 0405 	rsb	r4, r4, #5
 800e9e6:	441c      	add	r4, r3
 800e9e8:	4404      	add	r4, r0
 800e9ea:	19a0      	adds	r0, r4, r6
 800e9ec:	bd70      	pop	{r4, r5, r6, pc}
 800e9ee:	bf00      	nop

0800e9f0 <_SetBool_Request__cdr_serialize>:
 800e9f0:	460a      	mov	r2, r1
 800e9f2:	b118      	cbz	r0, 800e9fc <_SetBool_Request__cdr_serialize+0xc>
 800e9f4:	7801      	ldrb	r1, [r0, #0]
 800e9f6:	4610      	mov	r0, r2
 800e9f8:	f000 be5c 	b.w	800f6b4 <ucdr_serialize_bool>
 800e9fc:	4770      	bx	lr
 800e9fe:	bf00      	nop

0800ea00 <_SetBool_Response__cdr_deserialize>:
 800ea00:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ea02:	460c      	mov	r4, r1
 800ea04:	b083      	sub	sp, #12
 800ea06:	b1b9      	cbz	r1, 800ea38 <_SetBool_Response__cdr_deserialize+0x38>
 800ea08:	4606      	mov	r6, r0
 800ea0a:	f000 fe69 	bl	800f6e0 <ucdr_deserialize_bool>
 800ea0e:	68e7      	ldr	r7, [r4, #12]
 800ea10:	6861      	ldr	r1, [r4, #4]
 800ea12:	ab01      	add	r3, sp, #4
 800ea14:	463a      	mov	r2, r7
 800ea16:	4630      	mov	r0, r6
 800ea18:	f002 fc60 	bl	80112dc <ucdr_deserialize_sequence_char>
 800ea1c:	9b01      	ldr	r3, [sp, #4]
 800ea1e:	4605      	mov	r5, r0
 800ea20:	b920      	cbnz	r0, 800ea2c <_SetBool_Response__cdr_deserialize+0x2c>
 800ea22:	429f      	cmp	r7, r3
 800ea24:	d30c      	bcc.n	800ea40 <_SetBool_Response__cdr_deserialize+0x40>
 800ea26:	4628      	mov	r0, r5
 800ea28:	b003      	add	sp, #12
 800ea2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ea2c:	b103      	cbz	r3, 800ea30 <_SetBool_Response__cdr_deserialize+0x30>
 800ea2e:	3b01      	subs	r3, #1
 800ea30:	4628      	mov	r0, r5
 800ea32:	60a3      	str	r3, [r4, #8]
 800ea34:	b003      	add	sp, #12
 800ea36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ea38:	460d      	mov	r5, r1
 800ea3a:	4628      	mov	r0, r5
 800ea3c:	b003      	add	sp, #12
 800ea3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ea40:	2101      	movs	r1, #1
 800ea42:	75b0      	strb	r0, [r6, #22]
 800ea44:	7571      	strb	r1, [r6, #21]
 800ea46:	60a0      	str	r0, [r4, #8]
 800ea48:	4630      	mov	r0, r6
 800ea4a:	f002 fbdf 	bl	801120c <ucdr_align_to>
 800ea4e:	4630      	mov	r0, r6
 800ea50:	9901      	ldr	r1, [sp, #4]
 800ea52:	f002 fc11 	bl	8011278 <ucdr_advance_buffer>
 800ea56:	4628      	mov	r0, r5
 800ea58:	b003      	add	sp, #12
 800ea5a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ea5c <_SetBool_Response__cdr_serialize>:
 800ea5c:	b1e0      	cbz	r0, 800ea98 <_SetBool_Response__cdr_serialize+0x3c>
 800ea5e:	b570      	push	{r4, r5, r6, lr}
 800ea60:	460d      	mov	r5, r1
 800ea62:	4604      	mov	r4, r0
 800ea64:	7801      	ldrb	r1, [r0, #0]
 800ea66:	4628      	mov	r0, r5
 800ea68:	f000 fe24 	bl	800f6b4 <ucdr_serialize_bool>
 800ea6c:	6866      	ldr	r6, [r4, #4]
 800ea6e:	b156      	cbz	r6, 800ea86 <_SetBool_Response__cdr_serialize+0x2a>
 800ea70:	4630      	mov	r0, r6
 800ea72:	f7f1 fc25 	bl	80002c0 <strlen>
 800ea76:	4631      	mov	r1, r6
 800ea78:	60a0      	str	r0, [r4, #8]
 800ea7a:	1c42      	adds	r2, r0, #1
 800ea7c:	4628      	mov	r0, r5
 800ea7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ea82:	f002 bc19 	b.w	80112b8 <ucdr_serialize_sequence_char>
 800ea86:	4630      	mov	r0, r6
 800ea88:	60a0      	str	r0, [r4, #8]
 800ea8a:	4632      	mov	r2, r6
 800ea8c:	4631      	mov	r1, r6
 800ea8e:	4628      	mov	r0, r5
 800ea90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ea94:	f002 bc10 	b.w	80112b8 <ucdr_serialize_sequence_char>
 800ea98:	4770      	bx	lr
 800ea9a:	bf00      	nop

0800ea9c <get_serialized_size_std_srvs__srv__SetBool_Event.part.0>:
 800ea9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eaa0:	4689      	mov	r9, r1
 800eaa2:	4607      	mov	r7, r0
 800eaa4:	f7ff fc4c 	bl	800e340 <get_serialized_size_service_msgs__msg__ServiceEventInfo>
 800eaa8:	eb09 0400 	add.w	r4, r9, r0
 800eaac:	2104      	movs	r1, #4
 800eaae:	4620      	mov	r0, r4
 800eab0:	f8d7 802c 	ldr.w	r8, [r7, #44]	@ 0x2c
 800eab4:	f002 fb94 	bl	80111e0 <ucdr_alignment>
 800eab8:	1d06      	adds	r6, r0, #4
 800eaba:	4426      	add	r6, r4
 800eabc:	f1b8 0f00 	cmp.w	r8, #0
 800eac0:	d017      	beq.n	800eaf2 <get_serialized_size_std_srvs__srv__SetBool_Event.part.0+0x56>
 800eac2:	f8df a080 	ldr.w	sl, [pc, #128]	@ 800eb44 <get_serialized_size_std_srvs__srv__SetBool_Event.part.0+0xa8>
 800eac6:	2500      	movs	r5, #0
 800eac8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800eaca:	f8da 3004 	ldr.w	r3, [sl, #4]
 800eace:	4631      	mov	r1, r6
 800ead0:	695b      	ldr	r3, [r3, #20]
 800ead2:	4428      	add	r0, r5
 800ead4:	4798      	blx	r3
 800ead6:	2804      	cmp	r0, #4
 800ead8:	4601      	mov	r1, r0
 800eada:	4604      	mov	r4, r0
 800eadc:	bf28      	it	cs
 800eade:	2104      	movcs	r1, #4
 800eae0:	4630      	mov	r0, r6
 800eae2:	f002 fb7d 	bl	80111e0 <ucdr_alignment>
 800eae6:	3501      	adds	r5, #1
 800eae8:	4434      	add	r4, r6
 800eaea:	45a8      	cmp	r8, r5
 800eaec:	eb00 0604 	add.w	r6, r0, r4
 800eaf0:	d1ea      	bne.n	800eac8 <get_serialized_size_std_srvs__srv__SetBool_Event.part.0+0x2c>
 800eaf2:	2104      	movs	r1, #4
 800eaf4:	4630      	mov	r0, r6
 800eaf6:	f8d7 8038 	ldr.w	r8, [r7, #56]	@ 0x38
 800eafa:	f002 fb71 	bl	80111e0 <ucdr_alignment>
 800eafe:	1985      	adds	r5, r0, r6
 800eb00:	3504      	adds	r5, #4
 800eb02:	f1b8 0f00 	cmp.w	r8, #0
 800eb06:	d018      	beq.n	800eb3a <get_serialized_size_std_srvs__srv__SetBool_Event.part.0+0x9e>
 800eb08:	f8df a03c 	ldr.w	sl, [pc, #60]	@ 800eb48 <get_serialized_size_std_srvs__srv__SetBool_Event.part.0+0xac>
 800eb0c:	2600      	movs	r6, #0
 800eb0e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800eb10:	f8da 3004 	ldr.w	r3, [sl, #4]
 800eb14:	4629      	mov	r1, r5
 800eb16:	695b      	ldr	r3, [r3, #20]
 800eb18:	eb00 1006 	add.w	r0, r0, r6, lsl #4
 800eb1c:	4798      	blx	r3
 800eb1e:	2804      	cmp	r0, #4
 800eb20:	4601      	mov	r1, r0
 800eb22:	4604      	mov	r4, r0
 800eb24:	bf28      	it	cs
 800eb26:	2104      	movcs	r1, #4
 800eb28:	4628      	mov	r0, r5
 800eb2a:	f002 fb59 	bl	80111e0 <ucdr_alignment>
 800eb2e:	3601      	adds	r6, #1
 800eb30:	442c      	add	r4, r5
 800eb32:	45b0      	cmp	r8, r6
 800eb34:	eb00 0504 	add.w	r5, r0, r4
 800eb38:	d1e9      	bne.n	800eb0e <get_serialized_size_std_srvs__srv__SetBool_Event.part.0+0x72>
 800eb3a:	eba5 0009 	sub.w	r0, r5, r9
 800eb3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb42:	bf00      	nop
 800eb44:	20000cdc 	.word	0x20000cdc
 800eb48:	20000ca8 	.word	0x20000ca8

0800eb4c <get_serialized_size_std_srvs__srv__SetBool_Event>:
 800eb4c:	b108      	cbz	r0, 800eb52 <get_serialized_size_std_srvs__srv__SetBool_Event+0x6>
 800eb4e:	f7ff bfa5 	b.w	800ea9c <get_serialized_size_std_srvs__srv__SetBool_Event.part.0>
 800eb52:	4770      	bx	lr

0800eb54 <_SetBool_Event__get_serialized_size>:
 800eb54:	b110      	cbz	r0, 800eb5c <_SetBool_Event__get_serialized_size+0x8>
 800eb56:	2100      	movs	r1, #0
 800eb58:	f7ff bfa0 	b.w	800ea9c <get_serialized_size_std_srvs__srv__SetBool_Event.part.0>
 800eb5c:	4770      	bx	lr
 800eb5e:	bf00      	nop

0800eb60 <_SetBool_Request__get_serialized_size>:
 800eb60:	b130      	cbz	r0, 800eb70 <_SetBool_Request__get_serialized_size+0x10>
 800eb62:	b508      	push	{r3, lr}
 800eb64:	2101      	movs	r1, #1
 800eb66:	2000      	movs	r0, #0
 800eb68:	f002 fb3a 	bl	80111e0 <ucdr_alignment>
 800eb6c:	3001      	adds	r0, #1
 800eb6e:	bd08      	pop	{r3, pc}
 800eb70:	4770      	bx	lr
 800eb72:	bf00      	nop

0800eb74 <_SetBool_Response__max_serialized_size>:
 800eb74:	b508      	push	{r3, lr}
 800eb76:	2101      	movs	r1, #1
 800eb78:	2000      	movs	r0, #0
 800eb7a:	f002 fb31 	bl	80111e0 <ucdr_alignment>
 800eb7e:	3001      	adds	r0, #1
 800eb80:	bd08      	pop	{r3, pc}
 800eb82:	bf00      	nop

0800eb84 <_SetBool_Response__get_serialized_size>:
 800eb84:	b538      	push	{r3, r4, r5, lr}
 800eb86:	4604      	mov	r4, r0
 800eb88:	b160      	cbz	r0, 800eba4 <_SetBool_Response__get_serialized_size+0x20>
 800eb8a:	2101      	movs	r1, #1
 800eb8c:	2000      	movs	r0, #0
 800eb8e:	f002 fb27 	bl	80111e0 <ucdr_alignment>
 800eb92:	1c45      	adds	r5, r0, #1
 800eb94:	2104      	movs	r1, #4
 800eb96:	4628      	mov	r0, r5
 800eb98:	f002 fb22 	bl	80111e0 <ucdr_alignment>
 800eb9c:	68a4      	ldr	r4, [r4, #8]
 800eb9e:	3405      	adds	r4, #5
 800eba0:	4404      	add	r4, r0
 800eba2:	1960      	adds	r0, r4, r5
 800eba4:	bd38      	pop	{r3, r4, r5, pc}
 800eba6:	bf00      	nop

0800eba8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_srvs__srv__SetBool_Event>:
 800eba8:	4800      	ldr	r0, [pc, #0]	@ (800ebac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_srvs__srv__SetBool_Event+0x4>)
 800ebaa:	4770      	bx	lr
 800ebac:	20000c74 	.word	0x20000c74

0800ebb0 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__std_srvs__srv__SetBool>:
 800ebb0:	4800      	ldr	r0, [pc, #0]	@ (800ebb4 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x4>)
 800ebb2:	4770      	bx	lr
 800ebb4:	20000c38 	.word	0x20000c38

0800ebb8 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_init_function>:
 800ebb8:	f00b b954 	b.w	8019e64 <builtin_interfaces__msg__Time__init>

0800ebbc <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_fini_function>:
 800ebbc:	f00b b956 	b.w	8019e6c <builtin_interfaces__msg__Time__fini>

0800ebc0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 800ebc0:	4b04      	ldr	r3, [pc, #16]	@ (800ebd4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800ebc2:	681a      	ldr	r2, [r3, #0]
 800ebc4:	b10a      	cbz	r2, 800ebca <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0xa>
 800ebc6:	4803      	ldr	r0, [pc, #12]	@ (800ebd4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800ebc8:	4770      	bx	lr
 800ebca:	4a03      	ldr	r2, [pc, #12]	@ (800ebd8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x18>)
 800ebcc:	4801      	ldr	r0, [pc, #4]	@ (800ebd4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800ebce:	6812      	ldr	r2, [r2, #0]
 800ebd0:	601a      	str	r2, [r3, #0]
 800ebd2:	4770      	bx	lr
 800ebd4:	20000d10 	.word	0x20000d10
 800ebd8:	200005a0 	.word	0x200005a0

0800ebdc <get_serialized_size_builtin_interfaces__msg__Time>:
 800ebdc:	b180      	cbz	r0, 800ec00 <get_serialized_size_builtin_interfaces__msg__Time+0x24>
 800ebde:	b538      	push	{r3, r4, r5, lr}
 800ebe0:	460d      	mov	r5, r1
 800ebe2:	4628      	mov	r0, r5
 800ebe4:	2104      	movs	r1, #4
 800ebe6:	f002 fafb 	bl	80111e0 <ucdr_alignment>
 800ebea:	2104      	movs	r1, #4
 800ebec:	186c      	adds	r4, r5, r1
 800ebee:	4404      	add	r4, r0
 800ebf0:	4620      	mov	r0, r4
 800ebf2:	f002 faf5 	bl	80111e0 <ucdr_alignment>
 800ebf6:	f1c5 0504 	rsb	r5, r5, #4
 800ebfa:	4405      	add	r5, r0
 800ebfc:	1928      	adds	r0, r5, r4
 800ebfe:	bd38      	pop	{r3, r4, r5, pc}
 800ec00:	4770      	bx	lr
 800ec02:	bf00      	nop

0800ec04 <_Time__cdr_deserialize>:
 800ec04:	b538      	push	{r3, r4, r5, lr}
 800ec06:	460c      	mov	r4, r1
 800ec08:	b141      	cbz	r1, 800ec1c <_Time__cdr_deserialize+0x18>
 800ec0a:	4605      	mov	r5, r0
 800ec0c:	f001 fc48 	bl	80104a0 <ucdr_deserialize_int32_t>
 800ec10:	1d21      	adds	r1, r4, #4
 800ec12:	4628      	mov	r0, r5
 800ec14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ec18:	f001 b8c0 	b.w	800fd9c <ucdr_deserialize_uint32_t>
 800ec1c:	4608      	mov	r0, r1
 800ec1e:	bd38      	pop	{r3, r4, r5, pc}

0800ec20 <_Time__cdr_serialize>:
 800ec20:	b160      	cbz	r0, 800ec3c <_Time__cdr_serialize+0x1c>
 800ec22:	b538      	push	{r3, r4, r5, lr}
 800ec24:	460d      	mov	r5, r1
 800ec26:	4604      	mov	r4, r0
 800ec28:	6801      	ldr	r1, [r0, #0]
 800ec2a:	4628      	mov	r0, r5
 800ec2c:	f001 fb9e 	bl	801036c <ucdr_serialize_int32_t>
 800ec30:	6861      	ldr	r1, [r4, #4]
 800ec32:	4628      	mov	r0, r5
 800ec34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ec38:	f000 bf86 	b.w	800fb48 <ucdr_serialize_uint32_t>
 800ec3c:	4770      	bx	lr
 800ec3e:	bf00      	nop

0800ec40 <_Time__get_serialized_size>:
 800ec40:	b160      	cbz	r0, 800ec5c <_Time__get_serialized_size+0x1c>
 800ec42:	b510      	push	{r4, lr}
 800ec44:	2104      	movs	r1, #4
 800ec46:	2000      	movs	r0, #0
 800ec48:	f002 faca 	bl	80111e0 <ucdr_alignment>
 800ec4c:	1d04      	adds	r4, r0, #4
 800ec4e:	2104      	movs	r1, #4
 800ec50:	4620      	mov	r0, r4
 800ec52:	f002 fac5 	bl	80111e0 <ucdr_alignment>
 800ec56:	3004      	adds	r0, #4
 800ec58:	4420      	add	r0, r4
 800ec5a:	bd10      	pop	{r4, pc}
 800ec5c:	4770      	bx	lr
 800ec5e:	bf00      	nop

0800ec60 <_Time__max_serialized_size>:
 800ec60:	b510      	push	{r4, lr}
 800ec62:	2104      	movs	r1, #4
 800ec64:	2000      	movs	r0, #0
 800ec66:	f002 fabb 	bl	80111e0 <ucdr_alignment>
 800ec6a:	1d04      	adds	r4, r0, #4
 800ec6c:	2104      	movs	r1, #4
 800ec6e:	4620      	mov	r0, r4
 800ec70:	f002 fab6 	bl	80111e0 <ucdr_alignment>
 800ec74:	3004      	adds	r0, #4
 800ec76:	4420      	add	r0, r4
 800ec78:	bd10      	pop	{r4, pc}
 800ec7a:	bf00      	nop

0800ec7c <max_serialized_size_builtin_interfaces__msg__Time>:
 800ec7c:	b538      	push	{r3, r4, r5, lr}
 800ec7e:	460c      	mov	r4, r1
 800ec80:	2301      	movs	r3, #1
 800ec82:	7003      	strb	r3, [r0, #0]
 800ec84:	2104      	movs	r1, #4
 800ec86:	4620      	mov	r0, r4
 800ec88:	f002 faaa 	bl	80111e0 <ucdr_alignment>
 800ec8c:	2104      	movs	r1, #4
 800ec8e:	1863      	adds	r3, r4, r1
 800ec90:	18c5      	adds	r5, r0, r3
 800ec92:	4628      	mov	r0, r5
 800ec94:	f002 faa4 	bl	80111e0 <ucdr_alignment>
 800ec98:	f1c4 0404 	rsb	r4, r4, #4
 800ec9c:	4420      	add	r0, r4
 800ec9e:	4428      	add	r0, r5
 800eca0:	bd38      	pop	{r3, r4, r5, pc}
 800eca2:	bf00      	nop

0800eca4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 800eca4:	4800      	ldr	r0, [pc, #0]	@ (800eca8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x4>)
 800eca6:	4770      	bx	lr
 800eca8:	20000da0 	.word	0x20000da0

0800ecac <geometry_msgs__msg__Quaternion__rosidl_typesupport_introspection_c__Quaternion_init_function>:
 800ecac:	f00b b910 	b.w	8019ed0 <geometry_msgs__msg__Quaternion__init>

0800ecb0 <geometry_msgs__msg__Quaternion__rosidl_typesupport_introspection_c__Quaternion_fini_function>:
 800ecb0:	f00b b922 	b.w	8019ef8 <geometry_msgs__msg__Quaternion__fini>

0800ecb4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>:
 800ecb4:	4b04      	ldr	r3, [pc, #16]	@ (800ecc8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 800ecb6:	681a      	ldr	r2, [r3, #0]
 800ecb8:	b10a      	cbz	r2, 800ecbe <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0xa>
 800ecba:	4803      	ldr	r0, [pc, #12]	@ (800ecc8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 800ecbc:	4770      	bx	lr
 800ecbe:	4a03      	ldr	r2, [pc, #12]	@ (800eccc <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x18>)
 800ecc0:	4801      	ldr	r0, [pc, #4]	@ (800ecc8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 800ecc2:	6812      	ldr	r2, [r2, #0]
 800ecc4:	601a      	str	r2, [r3, #0]
 800ecc6:	4770      	bx	lr
 800ecc8:	20000dd4 	.word	0x20000dd4
 800eccc:	200005a0 	.word	0x200005a0

0800ecd0 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_init_function>:
 800ecd0:	f00b b944 	b.w	8019f5c <geometry_msgs__msg__Vector3__init>

0800ecd4 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_fini_function>:
 800ecd4:	f00b b946 	b.w	8019f64 <geometry_msgs__msg__Vector3__fini>

0800ecd8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800ecd8:	4b04      	ldr	r3, [pc, #16]	@ (800ecec <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800ecda:	681a      	ldr	r2, [r3, #0]
 800ecdc:	b10a      	cbz	r2, 800ece2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0xa>
 800ecde:	4803      	ldr	r0, [pc, #12]	@ (800ecec <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800ece0:	4770      	bx	lr
 800ece2:	4a03      	ldr	r2, [pc, #12]	@ (800ecf0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x18>)
 800ece4:	4801      	ldr	r0, [pc, #4]	@ (800ecec <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800ece6:	6812      	ldr	r2, [r2, #0]
 800ece8:	601a      	str	r2, [r3, #0]
 800ecea:	4770      	bx	lr
 800ecec:	20000edc 	.word	0x20000edc
 800ecf0:	200005a0 	.word	0x200005a0

0800ecf4 <get_serialized_size_geometry_msgs__msg__Quaternion>:
 800ecf4:	b1f0      	cbz	r0, 800ed34 <get_serialized_size_geometry_msgs__msg__Quaternion+0x40>
 800ecf6:	b570      	push	{r4, r5, r6, lr}
 800ecf8:	460d      	mov	r5, r1
 800ecfa:	4628      	mov	r0, r5
 800ecfc:	2108      	movs	r1, #8
 800ecfe:	f002 fa6f 	bl	80111e0 <ucdr_alignment>
 800ed02:	2108      	movs	r1, #8
 800ed04:	186c      	adds	r4, r5, r1
 800ed06:	4404      	add	r4, r0
 800ed08:	4620      	mov	r0, r4
 800ed0a:	f002 fa69 	bl	80111e0 <ucdr_alignment>
 800ed0e:	f100 0608 	add.w	r6, r0, #8
 800ed12:	4426      	add	r6, r4
 800ed14:	2108      	movs	r1, #8
 800ed16:	4630      	mov	r0, r6
 800ed18:	f002 fa62 	bl	80111e0 <ucdr_alignment>
 800ed1c:	f100 0408 	add.w	r4, r0, #8
 800ed20:	4434      	add	r4, r6
 800ed22:	2108      	movs	r1, #8
 800ed24:	4620      	mov	r0, r4
 800ed26:	f002 fa5b 	bl	80111e0 <ucdr_alignment>
 800ed2a:	f1c5 0508 	rsb	r5, r5, #8
 800ed2e:	4405      	add	r5, r0
 800ed30:	1928      	adds	r0, r5, r4
 800ed32:	bd70      	pop	{r4, r5, r6, pc}
 800ed34:	4770      	bx	lr
 800ed36:	bf00      	nop

0800ed38 <_Quaternion__cdr_deserialize>:
 800ed38:	b538      	push	{r3, r4, r5, lr}
 800ed3a:	460c      	mov	r4, r1
 800ed3c:	b199      	cbz	r1, 800ed66 <_Quaternion__cdr_deserialize+0x2e>
 800ed3e:	4605      	mov	r5, r0
 800ed40:	f002 f870 	bl	8010e24 <ucdr_deserialize_double>
 800ed44:	f104 0108 	add.w	r1, r4, #8
 800ed48:	4628      	mov	r0, r5
 800ed4a:	f002 f86b 	bl	8010e24 <ucdr_deserialize_double>
 800ed4e:	f104 0110 	add.w	r1, r4, #16
 800ed52:	4628      	mov	r0, r5
 800ed54:	f002 f866 	bl	8010e24 <ucdr_deserialize_double>
 800ed58:	f104 0118 	add.w	r1, r4, #24
 800ed5c:	4628      	mov	r0, r5
 800ed5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ed62:	f002 b85f 	b.w	8010e24 <ucdr_deserialize_double>
 800ed66:	4608      	mov	r0, r1
 800ed68:	bd38      	pop	{r3, r4, r5, pc}
 800ed6a:	bf00      	nop

0800ed6c <_Quaternion__cdr_serialize>:
 800ed6c:	b1c0      	cbz	r0, 800eda0 <_Quaternion__cdr_serialize+0x34>
 800ed6e:	b538      	push	{r3, r4, r5, lr}
 800ed70:	ed90 0b00 	vldr	d0, [r0]
 800ed74:	460d      	mov	r5, r1
 800ed76:	4604      	mov	r4, r0
 800ed78:	4608      	mov	r0, r1
 800ed7a:	f001 fec3 	bl	8010b04 <ucdr_serialize_double>
 800ed7e:	ed94 0b02 	vldr	d0, [r4, #8]
 800ed82:	4628      	mov	r0, r5
 800ed84:	f001 febe 	bl	8010b04 <ucdr_serialize_double>
 800ed88:	ed94 0b04 	vldr	d0, [r4, #16]
 800ed8c:	4628      	mov	r0, r5
 800ed8e:	f001 feb9 	bl	8010b04 <ucdr_serialize_double>
 800ed92:	ed94 0b06 	vldr	d0, [r4, #24]
 800ed96:	4628      	mov	r0, r5
 800ed98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ed9c:	f001 beb2 	b.w	8010b04 <ucdr_serialize_double>
 800eda0:	4770      	bx	lr
 800eda2:	bf00      	nop

0800eda4 <_Quaternion__get_serialized_size>:
 800eda4:	b1d8      	cbz	r0, 800edde <_Quaternion__get_serialized_size+0x3a>
 800eda6:	b538      	push	{r3, r4, r5, lr}
 800eda8:	2108      	movs	r1, #8
 800edaa:	2000      	movs	r0, #0
 800edac:	f002 fa18 	bl	80111e0 <ucdr_alignment>
 800edb0:	f100 0408 	add.w	r4, r0, #8
 800edb4:	2108      	movs	r1, #8
 800edb6:	4620      	mov	r0, r4
 800edb8:	f002 fa12 	bl	80111e0 <ucdr_alignment>
 800edbc:	f100 0508 	add.w	r5, r0, #8
 800edc0:	4425      	add	r5, r4
 800edc2:	2108      	movs	r1, #8
 800edc4:	4628      	mov	r0, r5
 800edc6:	f002 fa0b 	bl	80111e0 <ucdr_alignment>
 800edca:	f100 0408 	add.w	r4, r0, #8
 800edce:	442c      	add	r4, r5
 800edd0:	2108      	movs	r1, #8
 800edd2:	4620      	mov	r0, r4
 800edd4:	f002 fa04 	bl	80111e0 <ucdr_alignment>
 800edd8:	3008      	adds	r0, #8
 800edda:	4420      	add	r0, r4
 800eddc:	bd38      	pop	{r3, r4, r5, pc}
 800edde:	4770      	bx	lr

0800ede0 <_Quaternion__max_serialized_size>:
 800ede0:	b538      	push	{r3, r4, r5, lr}
 800ede2:	2108      	movs	r1, #8
 800ede4:	2000      	movs	r0, #0
 800ede6:	f002 f9fb 	bl	80111e0 <ucdr_alignment>
 800edea:	f100 0408 	add.w	r4, r0, #8
 800edee:	2108      	movs	r1, #8
 800edf0:	4620      	mov	r0, r4
 800edf2:	f002 f9f5 	bl	80111e0 <ucdr_alignment>
 800edf6:	f100 0508 	add.w	r5, r0, #8
 800edfa:	4425      	add	r5, r4
 800edfc:	2108      	movs	r1, #8
 800edfe:	4628      	mov	r0, r5
 800ee00:	f002 f9ee 	bl	80111e0 <ucdr_alignment>
 800ee04:	f100 0408 	add.w	r4, r0, #8
 800ee08:	442c      	add	r4, r5
 800ee0a:	2108      	movs	r1, #8
 800ee0c:	4620      	mov	r0, r4
 800ee0e:	f002 f9e7 	bl	80111e0 <ucdr_alignment>
 800ee12:	3008      	adds	r0, #8
 800ee14:	4420      	add	r0, r4
 800ee16:	bd38      	pop	{r3, r4, r5, pc}

0800ee18 <max_serialized_size_geometry_msgs__msg__Quaternion>:
 800ee18:	b570      	push	{r4, r5, r6, lr}
 800ee1a:	2301      	movs	r3, #1
 800ee1c:	460c      	mov	r4, r1
 800ee1e:	7003      	strb	r3, [r0, #0]
 800ee20:	2108      	movs	r1, #8
 800ee22:	4620      	mov	r0, r4
 800ee24:	f002 f9dc 	bl	80111e0 <ucdr_alignment>
 800ee28:	2108      	movs	r1, #8
 800ee2a:	1863      	adds	r3, r4, r1
 800ee2c:	18c5      	adds	r5, r0, r3
 800ee2e:	4628      	mov	r0, r5
 800ee30:	f002 f9d6 	bl	80111e0 <ucdr_alignment>
 800ee34:	f100 0608 	add.w	r6, r0, #8
 800ee38:	442e      	add	r6, r5
 800ee3a:	2108      	movs	r1, #8
 800ee3c:	4630      	mov	r0, r6
 800ee3e:	f002 f9cf 	bl	80111e0 <ucdr_alignment>
 800ee42:	f100 0508 	add.w	r5, r0, #8
 800ee46:	4435      	add	r5, r6
 800ee48:	2108      	movs	r1, #8
 800ee4a:	4628      	mov	r0, r5
 800ee4c:	f002 f9c8 	bl	80111e0 <ucdr_alignment>
 800ee50:	f1c4 0408 	rsb	r4, r4, #8
 800ee54:	4420      	add	r0, r4
 800ee56:	4428      	add	r0, r5
 800ee58:	bd70      	pop	{r4, r5, r6, pc}
 800ee5a:	bf00      	nop

0800ee5c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>:
 800ee5c:	4800      	ldr	r0, [pc, #0]	@ (800ee60 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x4>)
 800ee5e:	4770      	bx	lr
 800ee60:	20000fa8 	.word	0x20000fa8

0800ee64 <get_serialized_size_geometry_msgs__msg__Vector3>:
 800ee64:	b1b8      	cbz	r0, 800ee96 <get_serialized_size_geometry_msgs__msg__Vector3+0x32>
 800ee66:	b570      	push	{r4, r5, r6, lr}
 800ee68:	460d      	mov	r5, r1
 800ee6a:	4628      	mov	r0, r5
 800ee6c:	2108      	movs	r1, #8
 800ee6e:	f002 f9b7 	bl	80111e0 <ucdr_alignment>
 800ee72:	2108      	movs	r1, #8
 800ee74:	186e      	adds	r6, r5, r1
 800ee76:	4406      	add	r6, r0
 800ee78:	4630      	mov	r0, r6
 800ee7a:	f002 f9b1 	bl	80111e0 <ucdr_alignment>
 800ee7e:	f100 0408 	add.w	r4, r0, #8
 800ee82:	4434      	add	r4, r6
 800ee84:	2108      	movs	r1, #8
 800ee86:	4620      	mov	r0, r4
 800ee88:	f002 f9aa 	bl	80111e0 <ucdr_alignment>
 800ee8c:	f1c5 0508 	rsb	r5, r5, #8
 800ee90:	4405      	add	r5, r0
 800ee92:	1928      	adds	r0, r5, r4
 800ee94:	bd70      	pop	{r4, r5, r6, pc}
 800ee96:	4770      	bx	lr

0800ee98 <_Vector3__cdr_deserialize>:
 800ee98:	b538      	push	{r3, r4, r5, lr}
 800ee9a:	460c      	mov	r4, r1
 800ee9c:	b171      	cbz	r1, 800eebc <_Vector3__cdr_deserialize+0x24>
 800ee9e:	4605      	mov	r5, r0
 800eea0:	f001 ffc0 	bl	8010e24 <ucdr_deserialize_double>
 800eea4:	f104 0108 	add.w	r1, r4, #8
 800eea8:	4628      	mov	r0, r5
 800eeaa:	f001 ffbb 	bl	8010e24 <ucdr_deserialize_double>
 800eeae:	f104 0110 	add.w	r1, r4, #16
 800eeb2:	4628      	mov	r0, r5
 800eeb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eeb8:	f001 bfb4 	b.w	8010e24 <ucdr_deserialize_double>
 800eebc:	4608      	mov	r0, r1
 800eebe:	bd38      	pop	{r3, r4, r5, pc}

0800eec0 <_Vector3__cdr_serialize>:
 800eec0:	b198      	cbz	r0, 800eeea <_Vector3__cdr_serialize+0x2a>
 800eec2:	b538      	push	{r3, r4, r5, lr}
 800eec4:	ed90 0b00 	vldr	d0, [r0]
 800eec8:	460d      	mov	r5, r1
 800eeca:	4604      	mov	r4, r0
 800eecc:	4608      	mov	r0, r1
 800eece:	f001 fe19 	bl	8010b04 <ucdr_serialize_double>
 800eed2:	ed94 0b02 	vldr	d0, [r4, #8]
 800eed6:	4628      	mov	r0, r5
 800eed8:	f001 fe14 	bl	8010b04 <ucdr_serialize_double>
 800eedc:	ed94 0b04 	vldr	d0, [r4, #16]
 800eee0:	4628      	mov	r0, r5
 800eee2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eee6:	f001 be0d 	b.w	8010b04 <ucdr_serialize_double>
 800eeea:	4770      	bx	lr

0800eeec <_Vector3__get_serialized_size>:
 800eeec:	b1a0      	cbz	r0, 800ef18 <_Vector3__get_serialized_size+0x2c>
 800eeee:	b538      	push	{r3, r4, r5, lr}
 800eef0:	2108      	movs	r1, #8
 800eef2:	2000      	movs	r0, #0
 800eef4:	f002 f974 	bl	80111e0 <ucdr_alignment>
 800eef8:	f100 0508 	add.w	r5, r0, #8
 800eefc:	2108      	movs	r1, #8
 800eefe:	4628      	mov	r0, r5
 800ef00:	f002 f96e 	bl	80111e0 <ucdr_alignment>
 800ef04:	f100 0408 	add.w	r4, r0, #8
 800ef08:	442c      	add	r4, r5
 800ef0a:	2108      	movs	r1, #8
 800ef0c:	4620      	mov	r0, r4
 800ef0e:	f002 f967 	bl	80111e0 <ucdr_alignment>
 800ef12:	3008      	adds	r0, #8
 800ef14:	4420      	add	r0, r4
 800ef16:	bd38      	pop	{r3, r4, r5, pc}
 800ef18:	4770      	bx	lr
 800ef1a:	bf00      	nop

0800ef1c <_Vector3__max_serialized_size>:
 800ef1c:	b538      	push	{r3, r4, r5, lr}
 800ef1e:	2108      	movs	r1, #8
 800ef20:	2000      	movs	r0, #0
 800ef22:	f002 f95d 	bl	80111e0 <ucdr_alignment>
 800ef26:	f100 0508 	add.w	r5, r0, #8
 800ef2a:	2108      	movs	r1, #8
 800ef2c:	4628      	mov	r0, r5
 800ef2e:	f002 f957 	bl	80111e0 <ucdr_alignment>
 800ef32:	f100 0408 	add.w	r4, r0, #8
 800ef36:	442c      	add	r4, r5
 800ef38:	2108      	movs	r1, #8
 800ef3a:	4620      	mov	r0, r4
 800ef3c:	f002 f950 	bl	80111e0 <ucdr_alignment>
 800ef40:	3008      	adds	r0, #8
 800ef42:	4420      	add	r0, r4
 800ef44:	bd38      	pop	{r3, r4, r5, pc}
 800ef46:	bf00      	nop

0800ef48 <max_serialized_size_geometry_msgs__msg__Vector3>:
 800ef48:	b570      	push	{r4, r5, r6, lr}
 800ef4a:	2301      	movs	r3, #1
 800ef4c:	460c      	mov	r4, r1
 800ef4e:	7003      	strb	r3, [r0, #0]
 800ef50:	2108      	movs	r1, #8
 800ef52:	4620      	mov	r0, r4
 800ef54:	f002 f944 	bl	80111e0 <ucdr_alignment>
 800ef58:	2108      	movs	r1, #8
 800ef5a:	1863      	adds	r3, r4, r1
 800ef5c:	18c6      	adds	r6, r0, r3
 800ef5e:	4630      	mov	r0, r6
 800ef60:	f002 f93e 	bl	80111e0 <ucdr_alignment>
 800ef64:	f100 0508 	add.w	r5, r0, #8
 800ef68:	4435      	add	r5, r6
 800ef6a:	2108      	movs	r1, #8
 800ef6c:	4628      	mov	r0, r5
 800ef6e:	f002 f937 	bl	80111e0 <ucdr_alignment>
 800ef72:	f1c4 0408 	rsb	r4, r4, #8
 800ef76:	4420      	add	r0, r4
 800ef78:	4428      	add	r0, r5
 800ef7a:	bd70      	pop	{r4, r5, r6, pc}

0800ef7c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800ef7c:	4800      	ldr	r0, [pc, #0]	@ (800ef80 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x4>)
 800ef7e:	4770      	bx	lr
 800ef80:	20000fdc 	.word	0x20000fdc

0800ef84 <micro_ros_string_utilities_init_with_size>:
 800ef84:	b570      	push	{r4, r5, r6, lr}
 800ef86:	460c      	mov	r4, r1
 800ef88:	b086      	sub	sp, #24
 800ef8a:	4605      	mov	r5, r0
 800ef8c:	3401      	adds	r4, #1
 800ef8e:	a801      	add	r0, sp, #4
 800ef90:	f7fe f938 	bl	800d204 <rcutils_get_default_allocator>
 800ef94:	9b01      	ldr	r3, [sp, #4]
 800ef96:	9905      	ldr	r1, [sp, #20]
 800ef98:	4620      	mov	r0, r4
 800ef9a:	4798      	blx	r3
 800ef9c:	4622      	mov	r2, r4
 800ef9e:	2100      	movs	r1, #0
 800efa0:	4606      	mov	r6, r0
 800efa2:	f00e fa75 	bl	801d490 <memset>
 800efa6:	2300      	movs	r3, #0
 800efa8:	4628      	mov	r0, r5
 800efaa:	e9c5 6300 	strd	r6, r3, [r5]
 800efae:	60ac      	str	r4, [r5, #8]
 800efb0:	b006      	add	sp, #24
 800efb2:	bd70      	pop	{r4, r5, r6, pc}

0800efb4 <micro_ros_string_utilities_append>:
 800efb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800efb8:	b08a      	sub	sp, #40	@ 0x28
 800efba:	4604      	mov	r4, r0
 800efbc:	f8dd 8048 	ldr.w	r8, [sp, #72]	@ 0x48
 800efc0:	a801      	add	r0, sp, #4
 800efc2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800efc6:	a805      	add	r0, sp, #20
 800efc8:	f7fe f91c 	bl	800d204 <rcutils_get_default_allocator>
 800efcc:	4640      	mov	r0, r8
 800efce:	f7f1 f977 	bl	80002c0 <strlen>
 800efd2:	e9dd 5901 	ldrd	r5, r9, [sp, #4]
 800efd6:	9f03      	ldr	r7, [sp, #12]
 800efd8:	eb00 0a09 	add.w	sl, r0, r9
 800efdc:	45ba      	cmp	sl, r7
 800efde:	4606      	mov	r6, r0
 800efe0:	d307      	bcc.n	800eff2 <micro_ros_string_utilities_append+0x3e>
 800efe2:	f10a 0701 	add.w	r7, sl, #1
 800efe6:	4628      	mov	r0, r5
 800efe8:	9b07      	ldr	r3, [sp, #28]
 800efea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800efec:	4639      	mov	r1, r7
 800efee:	4798      	blx	r3
 800eff0:	4605      	mov	r5, r0
 800eff2:	1c72      	adds	r2, r6, #1
 800eff4:	4641      	mov	r1, r8
 800eff6:	eb05 0009 	add.w	r0, r5, r9
 800effa:	f00e fade 	bl	801d5ba <memcpy>
 800effe:	4620      	mov	r0, r4
 800f000:	e9c4 5a00 	strd	r5, sl, [r4]
 800f004:	60a7      	str	r7, [r4, #8]
 800f006:	b00a      	add	sp, #40	@ 0x28
 800f008:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800f00c <micro_ros_string_utilities_remove_tail_chars>:
 800f00c:	b500      	push	{lr}
 800f00e:	b085      	sub	sp, #20
 800f010:	f10d 0e04 	add.w	lr, sp, #4
 800f014:	e88e 000e 	stmia.w	lr, {r1, r2, r3}
 800f018:	4684      	mov	ip, r0
 800f01a:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 800f01e:	e88c 000b 	stmia.w	ip, {r0, r1, r3}
 800f022:	460b      	mov	r3, r1
 800f024:	9906      	ldr	r1, [sp, #24]
 800f026:	1a5b      	subs	r3, r3, r1
 800f028:	9901      	ldr	r1, [sp, #4]
 800f02a:	f8cc 3004 	str.w	r3, [ip, #4]
 800f02e:	2200      	movs	r2, #0
 800f030:	4660      	mov	r0, ip
 800f032:	54ca      	strb	r2, [r1, r3]
 800f034:	b005      	add	sp, #20
 800f036:	f85d fb04 	ldr.w	pc, [sp], #4
 800f03a:	bf00      	nop

0800f03c <micro_ros_string_utilities_destroy>:
 800f03c:	b510      	push	{r4, lr}
 800f03e:	4604      	mov	r4, r0
 800f040:	b086      	sub	sp, #24
 800f042:	a801      	add	r0, sp, #4
 800f044:	f7fe f8de 	bl	800d204 <rcutils_get_default_allocator>
 800f048:	9b02      	ldr	r3, [sp, #8]
 800f04a:	9905      	ldr	r1, [sp, #20]
 800f04c:	6820      	ldr	r0, [r4, #0]
 800f04e:	4798      	blx	r3
 800f050:	2300      	movs	r3, #0
 800f052:	e9c4 3300 	strd	r3, r3, [r4]
 800f056:	60a3      	str	r3, [r4, #8]
 800f058:	b006      	add	sp, #24
 800f05a:	bd10      	pop	{r4, pc}

0800f05c <ucdr_serialize_endian_array_char>:
 800f05c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f060:	4619      	mov	r1, r3
 800f062:	461f      	mov	r7, r3
 800f064:	4605      	mov	r5, r0
 800f066:	4690      	mov	r8, r2
 800f068:	f002 f862 	bl	8011130 <ucdr_check_buffer_available_for>
 800f06c:	b9e0      	cbnz	r0, 800f0a8 <ucdr_serialize_endian_array_char+0x4c>
 800f06e:	463e      	mov	r6, r7
 800f070:	e009      	b.n	800f086 <ucdr_serialize_endian_array_char+0x2a>
 800f072:	68a8      	ldr	r0, [r5, #8]
 800f074:	f00e faa1 	bl	801d5ba <memcpy>
 800f078:	68ab      	ldr	r3, [r5, #8]
 800f07a:	6928      	ldr	r0, [r5, #16]
 800f07c:	4423      	add	r3, r4
 800f07e:	4420      	add	r0, r4
 800f080:	1b36      	subs	r6, r6, r4
 800f082:	60ab      	str	r3, [r5, #8]
 800f084:	6128      	str	r0, [r5, #16]
 800f086:	2201      	movs	r2, #1
 800f088:	4631      	mov	r1, r6
 800f08a:	4628      	mov	r0, r5
 800f08c:	f002 f8d8 	bl	8011240 <ucdr_check_final_buffer_behavior_array>
 800f090:	1bb9      	subs	r1, r7, r6
 800f092:	4604      	mov	r4, r0
 800f094:	4602      	mov	r2, r0
 800f096:	4441      	add	r1, r8
 800f098:	2800      	cmp	r0, #0
 800f09a:	d1ea      	bne.n	800f072 <ucdr_serialize_endian_array_char+0x16>
 800f09c:	2301      	movs	r3, #1
 800f09e:	7da8      	ldrb	r0, [r5, #22]
 800f0a0:	756b      	strb	r3, [r5, #21]
 800f0a2:	4058      	eors	r0, r3
 800f0a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f0a8:	463a      	mov	r2, r7
 800f0aa:	68a8      	ldr	r0, [r5, #8]
 800f0ac:	4641      	mov	r1, r8
 800f0ae:	f00e fa84 	bl	801d5ba <memcpy>
 800f0b2:	68aa      	ldr	r2, [r5, #8]
 800f0b4:	692b      	ldr	r3, [r5, #16]
 800f0b6:	443a      	add	r2, r7
 800f0b8:	443b      	add	r3, r7
 800f0ba:	60aa      	str	r2, [r5, #8]
 800f0bc:	612b      	str	r3, [r5, #16]
 800f0be:	e7ed      	b.n	800f09c <ucdr_serialize_endian_array_char+0x40>

0800f0c0 <ucdr_deserialize_endian_array_char>:
 800f0c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0c4:	4619      	mov	r1, r3
 800f0c6:	461f      	mov	r7, r3
 800f0c8:	4605      	mov	r5, r0
 800f0ca:	4690      	mov	r8, r2
 800f0cc:	f002 f830 	bl	8011130 <ucdr_check_buffer_available_for>
 800f0d0:	b9e0      	cbnz	r0, 800f10c <ucdr_deserialize_endian_array_char+0x4c>
 800f0d2:	463e      	mov	r6, r7
 800f0d4:	e009      	b.n	800f0ea <ucdr_deserialize_endian_array_char+0x2a>
 800f0d6:	68a9      	ldr	r1, [r5, #8]
 800f0d8:	f00e fa6f 	bl	801d5ba <memcpy>
 800f0dc:	68aa      	ldr	r2, [r5, #8]
 800f0de:	692b      	ldr	r3, [r5, #16]
 800f0e0:	4422      	add	r2, r4
 800f0e2:	4423      	add	r3, r4
 800f0e4:	1b36      	subs	r6, r6, r4
 800f0e6:	60aa      	str	r2, [r5, #8]
 800f0e8:	612b      	str	r3, [r5, #16]
 800f0ea:	2201      	movs	r2, #1
 800f0ec:	4631      	mov	r1, r6
 800f0ee:	4628      	mov	r0, r5
 800f0f0:	f002 f8a6 	bl	8011240 <ucdr_check_final_buffer_behavior_array>
 800f0f4:	4604      	mov	r4, r0
 800f0f6:	1bb8      	subs	r0, r7, r6
 800f0f8:	4622      	mov	r2, r4
 800f0fa:	4440      	add	r0, r8
 800f0fc:	2c00      	cmp	r4, #0
 800f0fe:	d1ea      	bne.n	800f0d6 <ucdr_deserialize_endian_array_char+0x16>
 800f100:	2301      	movs	r3, #1
 800f102:	7da8      	ldrb	r0, [r5, #22]
 800f104:	756b      	strb	r3, [r5, #21]
 800f106:	4058      	eors	r0, r3
 800f108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f10c:	463a      	mov	r2, r7
 800f10e:	68a9      	ldr	r1, [r5, #8]
 800f110:	4640      	mov	r0, r8
 800f112:	f00e fa52 	bl	801d5ba <memcpy>
 800f116:	68aa      	ldr	r2, [r5, #8]
 800f118:	692b      	ldr	r3, [r5, #16]
 800f11a:	443a      	add	r2, r7
 800f11c:	443b      	add	r3, r7
 800f11e:	60aa      	str	r2, [r5, #8]
 800f120:	612b      	str	r3, [r5, #16]
 800f122:	e7ed      	b.n	800f100 <ucdr_deserialize_endian_array_char+0x40>

0800f124 <ucdr_serialize_array_uint8_t>:
 800f124:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f128:	4688      	mov	r8, r1
 800f12a:	4611      	mov	r1, r2
 800f12c:	4617      	mov	r7, r2
 800f12e:	4605      	mov	r5, r0
 800f130:	f001 fffe 	bl	8011130 <ucdr_check_buffer_available_for>
 800f134:	b9e0      	cbnz	r0, 800f170 <ucdr_serialize_array_uint8_t+0x4c>
 800f136:	463e      	mov	r6, r7
 800f138:	e009      	b.n	800f14e <ucdr_serialize_array_uint8_t+0x2a>
 800f13a:	68a8      	ldr	r0, [r5, #8]
 800f13c:	f00e fa3d 	bl	801d5ba <memcpy>
 800f140:	68aa      	ldr	r2, [r5, #8]
 800f142:	692b      	ldr	r3, [r5, #16]
 800f144:	4422      	add	r2, r4
 800f146:	4423      	add	r3, r4
 800f148:	1b36      	subs	r6, r6, r4
 800f14a:	60aa      	str	r2, [r5, #8]
 800f14c:	612b      	str	r3, [r5, #16]
 800f14e:	2201      	movs	r2, #1
 800f150:	4631      	mov	r1, r6
 800f152:	4628      	mov	r0, r5
 800f154:	f002 f874 	bl	8011240 <ucdr_check_final_buffer_behavior_array>
 800f158:	1bb9      	subs	r1, r7, r6
 800f15a:	4604      	mov	r4, r0
 800f15c:	4602      	mov	r2, r0
 800f15e:	4441      	add	r1, r8
 800f160:	2800      	cmp	r0, #0
 800f162:	d1ea      	bne.n	800f13a <ucdr_serialize_array_uint8_t+0x16>
 800f164:	2301      	movs	r3, #1
 800f166:	7da8      	ldrb	r0, [r5, #22]
 800f168:	756b      	strb	r3, [r5, #21]
 800f16a:	4058      	eors	r0, r3
 800f16c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f170:	463a      	mov	r2, r7
 800f172:	68a8      	ldr	r0, [r5, #8]
 800f174:	4641      	mov	r1, r8
 800f176:	f00e fa20 	bl	801d5ba <memcpy>
 800f17a:	68aa      	ldr	r2, [r5, #8]
 800f17c:	692b      	ldr	r3, [r5, #16]
 800f17e:	443a      	add	r2, r7
 800f180:	443b      	add	r3, r7
 800f182:	60aa      	str	r2, [r5, #8]
 800f184:	612b      	str	r3, [r5, #16]
 800f186:	e7ed      	b.n	800f164 <ucdr_serialize_array_uint8_t+0x40>

0800f188 <ucdr_serialize_endian_array_uint8_t>:
 800f188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f18c:	4619      	mov	r1, r3
 800f18e:	461f      	mov	r7, r3
 800f190:	4605      	mov	r5, r0
 800f192:	4690      	mov	r8, r2
 800f194:	f001 ffcc 	bl	8011130 <ucdr_check_buffer_available_for>
 800f198:	b9e0      	cbnz	r0, 800f1d4 <ucdr_serialize_endian_array_uint8_t+0x4c>
 800f19a:	463e      	mov	r6, r7
 800f19c:	e009      	b.n	800f1b2 <ucdr_serialize_endian_array_uint8_t+0x2a>
 800f19e:	68a8      	ldr	r0, [r5, #8]
 800f1a0:	f00e fa0b 	bl	801d5ba <memcpy>
 800f1a4:	68ab      	ldr	r3, [r5, #8]
 800f1a6:	6928      	ldr	r0, [r5, #16]
 800f1a8:	4423      	add	r3, r4
 800f1aa:	4420      	add	r0, r4
 800f1ac:	1b36      	subs	r6, r6, r4
 800f1ae:	60ab      	str	r3, [r5, #8]
 800f1b0:	6128      	str	r0, [r5, #16]
 800f1b2:	2201      	movs	r2, #1
 800f1b4:	4631      	mov	r1, r6
 800f1b6:	4628      	mov	r0, r5
 800f1b8:	f002 f842 	bl	8011240 <ucdr_check_final_buffer_behavior_array>
 800f1bc:	1bb9      	subs	r1, r7, r6
 800f1be:	4604      	mov	r4, r0
 800f1c0:	4602      	mov	r2, r0
 800f1c2:	4441      	add	r1, r8
 800f1c4:	2800      	cmp	r0, #0
 800f1c6:	d1ea      	bne.n	800f19e <ucdr_serialize_endian_array_uint8_t+0x16>
 800f1c8:	2301      	movs	r3, #1
 800f1ca:	7da8      	ldrb	r0, [r5, #22]
 800f1cc:	756b      	strb	r3, [r5, #21]
 800f1ce:	4058      	eors	r0, r3
 800f1d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f1d4:	463a      	mov	r2, r7
 800f1d6:	68a8      	ldr	r0, [r5, #8]
 800f1d8:	4641      	mov	r1, r8
 800f1da:	f00e f9ee 	bl	801d5ba <memcpy>
 800f1de:	68aa      	ldr	r2, [r5, #8]
 800f1e0:	692b      	ldr	r3, [r5, #16]
 800f1e2:	443a      	add	r2, r7
 800f1e4:	443b      	add	r3, r7
 800f1e6:	60aa      	str	r2, [r5, #8]
 800f1e8:	612b      	str	r3, [r5, #16]
 800f1ea:	e7ed      	b.n	800f1c8 <ucdr_serialize_endian_array_uint8_t+0x40>

0800f1ec <ucdr_deserialize_array_uint8_t>:
 800f1ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f1f0:	4688      	mov	r8, r1
 800f1f2:	4611      	mov	r1, r2
 800f1f4:	4617      	mov	r7, r2
 800f1f6:	4605      	mov	r5, r0
 800f1f8:	f001 ff9a 	bl	8011130 <ucdr_check_buffer_available_for>
 800f1fc:	b9e0      	cbnz	r0, 800f238 <ucdr_deserialize_array_uint8_t+0x4c>
 800f1fe:	463e      	mov	r6, r7
 800f200:	e009      	b.n	800f216 <ucdr_deserialize_array_uint8_t+0x2a>
 800f202:	68a9      	ldr	r1, [r5, #8]
 800f204:	f00e f9d9 	bl	801d5ba <memcpy>
 800f208:	68aa      	ldr	r2, [r5, #8]
 800f20a:	692b      	ldr	r3, [r5, #16]
 800f20c:	4422      	add	r2, r4
 800f20e:	4423      	add	r3, r4
 800f210:	1b36      	subs	r6, r6, r4
 800f212:	60aa      	str	r2, [r5, #8]
 800f214:	612b      	str	r3, [r5, #16]
 800f216:	2201      	movs	r2, #1
 800f218:	4631      	mov	r1, r6
 800f21a:	4628      	mov	r0, r5
 800f21c:	f002 f810 	bl	8011240 <ucdr_check_final_buffer_behavior_array>
 800f220:	4604      	mov	r4, r0
 800f222:	1bb8      	subs	r0, r7, r6
 800f224:	4622      	mov	r2, r4
 800f226:	4440      	add	r0, r8
 800f228:	2c00      	cmp	r4, #0
 800f22a:	d1ea      	bne.n	800f202 <ucdr_deserialize_array_uint8_t+0x16>
 800f22c:	2301      	movs	r3, #1
 800f22e:	7da8      	ldrb	r0, [r5, #22]
 800f230:	756b      	strb	r3, [r5, #21]
 800f232:	4058      	eors	r0, r3
 800f234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f238:	463a      	mov	r2, r7
 800f23a:	68a9      	ldr	r1, [r5, #8]
 800f23c:	4640      	mov	r0, r8
 800f23e:	f00e f9bc 	bl	801d5ba <memcpy>
 800f242:	68aa      	ldr	r2, [r5, #8]
 800f244:	692b      	ldr	r3, [r5, #16]
 800f246:	443a      	add	r2, r7
 800f248:	443b      	add	r3, r7
 800f24a:	60aa      	str	r2, [r5, #8]
 800f24c:	612b      	str	r3, [r5, #16]
 800f24e:	e7ed      	b.n	800f22c <ucdr_deserialize_array_uint8_t+0x40>

0800f250 <ucdr_deserialize_endian_array_uint8_t>:
 800f250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f254:	4619      	mov	r1, r3
 800f256:	461f      	mov	r7, r3
 800f258:	4605      	mov	r5, r0
 800f25a:	4690      	mov	r8, r2
 800f25c:	f001 ff68 	bl	8011130 <ucdr_check_buffer_available_for>
 800f260:	b9e0      	cbnz	r0, 800f29c <ucdr_deserialize_endian_array_uint8_t+0x4c>
 800f262:	463e      	mov	r6, r7
 800f264:	e009      	b.n	800f27a <ucdr_deserialize_endian_array_uint8_t+0x2a>
 800f266:	68a9      	ldr	r1, [r5, #8]
 800f268:	f00e f9a7 	bl	801d5ba <memcpy>
 800f26c:	68aa      	ldr	r2, [r5, #8]
 800f26e:	692b      	ldr	r3, [r5, #16]
 800f270:	4422      	add	r2, r4
 800f272:	4423      	add	r3, r4
 800f274:	1b36      	subs	r6, r6, r4
 800f276:	60aa      	str	r2, [r5, #8]
 800f278:	612b      	str	r3, [r5, #16]
 800f27a:	2201      	movs	r2, #1
 800f27c:	4631      	mov	r1, r6
 800f27e:	4628      	mov	r0, r5
 800f280:	f001 ffde 	bl	8011240 <ucdr_check_final_buffer_behavior_array>
 800f284:	4604      	mov	r4, r0
 800f286:	1bb8      	subs	r0, r7, r6
 800f288:	4622      	mov	r2, r4
 800f28a:	4440      	add	r0, r8
 800f28c:	2c00      	cmp	r4, #0
 800f28e:	d1ea      	bne.n	800f266 <ucdr_deserialize_endian_array_uint8_t+0x16>
 800f290:	2301      	movs	r3, #1
 800f292:	7da8      	ldrb	r0, [r5, #22]
 800f294:	756b      	strb	r3, [r5, #21]
 800f296:	4058      	eors	r0, r3
 800f298:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f29c:	463a      	mov	r2, r7
 800f29e:	68a9      	ldr	r1, [r5, #8]
 800f2a0:	4640      	mov	r0, r8
 800f2a2:	f00e f98a 	bl	801d5ba <memcpy>
 800f2a6:	68aa      	ldr	r2, [r5, #8]
 800f2a8:	692b      	ldr	r3, [r5, #16]
 800f2aa:	443a      	add	r2, r7
 800f2ac:	443b      	add	r3, r7
 800f2ae:	60aa      	str	r2, [r5, #8]
 800f2b0:	612b      	str	r3, [r5, #16]
 800f2b2:	e7ed      	b.n	800f290 <ucdr_deserialize_endian_array_uint8_t+0x40>

0800f2b4 <ucdr_serialize_array_uint16_t>:
 800f2b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f2b8:	460e      	mov	r6, r1
 800f2ba:	2102      	movs	r1, #2
 800f2bc:	4604      	mov	r4, r0
 800f2be:	4617      	mov	r7, r2
 800f2c0:	f001 ff96 	bl	80111f0 <ucdr_buffer_alignment>
 800f2c4:	4601      	mov	r1, r0
 800f2c6:	4620      	mov	r0, r4
 800f2c8:	7d65      	ldrb	r5, [r4, #21]
 800f2ca:	f001 ffd5 	bl	8011278 <ucdr_advance_buffer>
 800f2ce:	7d21      	ldrb	r1, [r4, #20]
 800f2d0:	7565      	strb	r5, [r4, #21]
 800f2d2:	2901      	cmp	r1, #1
 800f2d4:	d011      	beq.n	800f2fa <ucdr_serialize_array_uint16_t+0x46>
 800f2d6:	b15f      	cbz	r7, 800f2f0 <ucdr_serialize_array_uint16_t+0x3c>
 800f2d8:	3e02      	subs	r6, #2
 800f2da:	2500      	movs	r5, #0
 800f2dc:	e000      	b.n	800f2e0 <ucdr_serialize_array_uint16_t+0x2c>
 800f2de:	7d21      	ldrb	r1, [r4, #20]
 800f2e0:	f836 2f02 	ldrh.w	r2, [r6, #2]!
 800f2e4:	4620      	mov	r0, r4
 800f2e6:	3501      	adds	r5, #1
 800f2e8:	f000 fac8 	bl	800f87c <ucdr_serialize_endian_uint16_t>
 800f2ec:	42af      	cmp	r7, r5
 800f2ee:	d1f6      	bne.n	800f2de <ucdr_serialize_array_uint16_t+0x2a>
 800f2f0:	7da0      	ldrb	r0, [r4, #22]
 800f2f2:	f080 0001 	eor.w	r0, r0, #1
 800f2f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f2fa:	007f      	lsls	r7, r7, #1
 800f2fc:	4639      	mov	r1, r7
 800f2fe:	4620      	mov	r0, r4
 800f300:	f001 ff16 	bl	8011130 <ucdr_check_buffer_available_for>
 800f304:	b9f8      	cbnz	r0, 800f346 <ucdr_serialize_array_uint16_t+0x92>
 800f306:	46b8      	mov	r8, r7
 800f308:	e00a      	b.n	800f320 <ucdr_serialize_array_uint16_t+0x6c>
 800f30a:	68a0      	ldr	r0, [r4, #8]
 800f30c:	f00e f955 	bl	801d5ba <memcpy>
 800f310:	68a2      	ldr	r2, [r4, #8]
 800f312:	6923      	ldr	r3, [r4, #16]
 800f314:	442a      	add	r2, r5
 800f316:	442b      	add	r3, r5
 800f318:	eba8 0805 	sub.w	r8, r8, r5
 800f31c:	60a2      	str	r2, [r4, #8]
 800f31e:	6123      	str	r3, [r4, #16]
 800f320:	2202      	movs	r2, #2
 800f322:	4641      	mov	r1, r8
 800f324:	4620      	mov	r0, r4
 800f326:	f001 ff8b 	bl	8011240 <ucdr_check_final_buffer_behavior_array>
 800f32a:	eba7 0108 	sub.w	r1, r7, r8
 800f32e:	4605      	mov	r5, r0
 800f330:	4602      	mov	r2, r0
 800f332:	4431      	add	r1, r6
 800f334:	2800      	cmp	r0, #0
 800f336:	d1e8      	bne.n	800f30a <ucdr_serialize_array_uint16_t+0x56>
 800f338:	7da0      	ldrb	r0, [r4, #22]
 800f33a:	2302      	movs	r3, #2
 800f33c:	7563      	strb	r3, [r4, #21]
 800f33e:	f080 0001 	eor.w	r0, r0, #1
 800f342:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f346:	463a      	mov	r2, r7
 800f348:	68a0      	ldr	r0, [r4, #8]
 800f34a:	4631      	mov	r1, r6
 800f34c:	f00e f935 	bl	801d5ba <memcpy>
 800f350:	68a2      	ldr	r2, [r4, #8]
 800f352:	6923      	ldr	r3, [r4, #16]
 800f354:	443a      	add	r2, r7
 800f356:	443b      	add	r3, r7
 800f358:	60a2      	str	r2, [r4, #8]
 800f35a:	6123      	str	r3, [r4, #16]
 800f35c:	e7ec      	b.n	800f338 <ucdr_serialize_array_uint16_t+0x84>
 800f35e:	bf00      	nop

0800f360 <ucdr_deserialize_array_uint16_t>:
 800f360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f364:	460e      	mov	r6, r1
 800f366:	2102      	movs	r1, #2
 800f368:	4604      	mov	r4, r0
 800f36a:	4617      	mov	r7, r2
 800f36c:	f001 ff40 	bl	80111f0 <ucdr_buffer_alignment>
 800f370:	4601      	mov	r1, r0
 800f372:	4620      	mov	r0, r4
 800f374:	7d65      	ldrb	r5, [r4, #21]
 800f376:	f001 ff7f 	bl	8011278 <ucdr_advance_buffer>
 800f37a:	7d21      	ldrb	r1, [r4, #20]
 800f37c:	7565      	strb	r5, [r4, #21]
 800f37e:	2901      	cmp	r1, #1
 800f380:	d011      	beq.n	800f3a6 <ucdr_deserialize_array_uint16_t+0x46>
 800f382:	b15f      	cbz	r7, 800f39c <ucdr_deserialize_array_uint16_t+0x3c>
 800f384:	2500      	movs	r5, #0
 800f386:	e000      	b.n	800f38a <ucdr_deserialize_array_uint16_t+0x2a>
 800f388:	7d21      	ldrb	r1, [r4, #20]
 800f38a:	4632      	mov	r2, r6
 800f38c:	4620      	mov	r0, r4
 800f38e:	3501      	adds	r5, #1
 800f390:	f000 fb6a 	bl	800fa68 <ucdr_deserialize_endian_uint16_t>
 800f394:	42af      	cmp	r7, r5
 800f396:	f106 0602 	add.w	r6, r6, #2
 800f39a:	d1f5      	bne.n	800f388 <ucdr_deserialize_array_uint16_t+0x28>
 800f39c:	7da0      	ldrb	r0, [r4, #22]
 800f39e:	f080 0001 	eor.w	r0, r0, #1
 800f3a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f3a6:	007f      	lsls	r7, r7, #1
 800f3a8:	4639      	mov	r1, r7
 800f3aa:	4620      	mov	r0, r4
 800f3ac:	f001 fec0 	bl	8011130 <ucdr_check_buffer_available_for>
 800f3b0:	b9f8      	cbnz	r0, 800f3f2 <ucdr_deserialize_array_uint16_t+0x92>
 800f3b2:	46b8      	mov	r8, r7
 800f3b4:	e00a      	b.n	800f3cc <ucdr_deserialize_array_uint16_t+0x6c>
 800f3b6:	68a1      	ldr	r1, [r4, #8]
 800f3b8:	f00e f8ff 	bl	801d5ba <memcpy>
 800f3bc:	68a2      	ldr	r2, [r4, #8]
 800f3be:	6923      	ldr	r3, [r4, #16]
 800f3c0:	442a      	add	r2, r5
 800f3c2:	442b      	add	r3, r5
 800f3c4:	eba8 0805 	sub.w	r8, r8, r5
 800f3c8:	60a2      	str	r2, [r4, #8]
 800f3ca:	6123      	str	r3, [r4, #16]
 800f3cc:	2202      	movs	r2, #2
 800f3ce:	4641      	mov	r1, r8
 800f3d0:	4620      	mov	r0, r4
 800f3d2:	f001 ff35 	bl	8011240 <ucdr_check_final_buffer_behavior_array>
 800f3d6:	4605      	mov	r5, r0
 800f3d8:	eba7 0008 	sub.w	r0, r7, r8
 800f3dc:	462a      	mov	r2, r5
 800f3de:	4430      	add	r0, r6
 800f3e0:	2d00      	cmp	r5, #0
 800f3e2:	d1e8      	bne.n	800f3b6 <ucdr_deserialize_array_uint16_t+0x56>
 800f3e4:	7da0      	ldrb	r0, [r4, #22]
 800f3e6:	2302      	movs	r3, #2
 800f3e8:	7563      	strb	r3, [r4, #21]
 800f3ea:	f080 0001 	eor.w	r0, r0, #1
 800f3ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f3f2:	463a      	mov	r2, r7
 800f3f4:	68a1      	ldr	r1, [r4, #8]
 800f3f6:	4630      	mov	r0, r6
 800f3f8:	f00e f8df 	bl	801d5ba <memcpy>
 800f3fc:	68a2      	ldr	r2, [r4, #8]
 800f3fe:	6923      	ldr	r3, [r4, #16]
 800f400:	443a      	add	r2, r7
 800f402:	443b      	add	r3, r7
 800f404:	60a2      	str	r2, [r4, #8]
 800f406:	6123      	str	r3, [r4, #16]
 800f408:	e7ec      	b.n	800f3e4 <ucdr_deserialize_array_uint16_t+0x84>
 800f40a:	bf00      	nop

0800f40c <ucdr_serialize_array_float>:
 800f40c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f410:	460e      	mov	r6, r1
 800f412:	2104      	movs	r1, #4
 800f414:	4604      	mov	r4, r0
 800f416:	4617      	mov	r7, r2
 800f418:	f001 feea 	bl	80111f0 <ucdr_buffer_alignment>
 800f41c:	4601      	mov	r1, r0
 800f41e:	4620      	mov	r0, r4
 800f420:	7d65      	ldrb	r5, [r4, #21]
 800f422:	f001 ff29 	bl	8011278 <ucdr_advance_buffer>
 800f426:	7d21      	ldrb	r1, [r4, #20]
 800f428:	7565      	strb	r5, [r4, #21]
 800f42a:	2901      	cmp	r1, #1
 800f42c:	d010      	beq.n	800f450 <ucdr_serialize_array_float+0x44>
 800f42e:	b157      	cbz	r7, 800f446 <ucdr_serialize_array_float+0x3a>
 800f430:	2500      	movs	r5, #0
 800f432:	e000      	b.n	800f436 <ucdr_serialize_array_float+0x2a>
 800f434:	7d21      	ldrb	r1, [r4, #20]
 800f436:	ecb6 0a01 	vldmia	r6!, {s0}
 800f43a:	4620      	mov	r0, r4
 800f43c:	3501      	adds	r5, #1
 800f43e:	f001 fa43 	bl	80108c8 <ucdr_serialize_endian_float>
 800f442:	42af      	cmp	r7, r5
 800f444:	d1f6      	bne.n	800f434 <ucdr_serialize_array_float+0x28>
 800f446:	7da0      	ldrb	r0, [r4, #22]
 800f448:	f080 0001 	eor.w	r0, r0, #1
 800f44c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f450:	00bf      	lsls	r7, r7, #2
 800f452:	4639      	mov	r1, r7
 800f454:	4620      	mov	r0, r4
 800f456:	f001 fe6b 	bl	8011130 <ucdr_check_buffer_available_for>
 800f45a:	b9f8      	cbnz	r0, 800f49c <ucdr_serialize_array_float+0x90>
 800f45c:	46b8      	mov	r8, r7
 800f45e:	e00a      	b.n	800f476 <ucdr_serialize_array_float+0x6a>
 800f460:	68a0      	ldr	r0, [r4, #8]
 800f462:	f00e f8aa 	bl	801d5ba <memcpy>
 800f466:	68a2      	ldr	r2, [r4, #8]
 800f468:	6923      	ldr	r3, [r4, #16]
 800f46a:	442a      	add	r2, r5
 800f46c:	442b      	add	r3, r5
 800f46e:	eba8 0805 	sub.w	r8, r8, r5
 800f472:	60a2      	str	r2, [r4, #8]
 800f474:	6123      	str	r3, [r4, #16]
 800f476:	2204      	movs	r2, #4
 800f478:	4641      	mov	r1, r8
 800f47a:	4620      	mov	r0, r4
 800f47c:	f001 fee0 	bl	8011240 <ucdr_check_final_buffer_behavior_array>
 800f480:	eba7 0108 	sub.w	r1, r7, r8
 800f484:	4605      	mov	r5, r0
 800f486:	4602      	mov	r2, r0
 800f488:	4431      	add	r1, r6
 800f48a:	2800      	cmp	r0, #0
 800f48c:	d1e8      	bne.n	800f460 <ucdr_serialize_array_float+0x54>
 800f48e:	7da0      	ldrb	r0, [r4, #22]
 800f490:	2304      	movs	r3, #4
 800f492:	7563      	strb	r3, [r4, #21]
 800f494:	f080 0001 	eor.w	r0, r0, #1
 800f498:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f49c:	463a      	mov	r2, r7
 800f49e:	68a0      	ldr	r0, [r4, #8]
 800f4a0:	4631      	mov	r1, r6
 800f4a2:	f00e f88a 	bl	801d5ba <memcpy>
 800f4a6:	68a2      	ldr	r2, [r4, #8]
 800f4a8:	6923      	ldr	r3, [r4, #16]
 800f4aa:	443a      	add	r2, r7
 800f4ac:	443b      	add	r3, r7
 800f4ae:	60a2      	str	r2, [r4, #8]
 800f4b0:	6123      	str	r3, [r4, #16]
 800f4b2:	e7ec      	b.n	800f48e <ucdr_serialize_array_float+0x82>

0800f4b4 <ucdr_deserialize_array_float>:
 800f4b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f4b8:	460e      	mov	r6, r1
 800f4ba:	2104      	movs	r1, #4
 800f4bc:	4604      	mov	r4, r0
 800f4be:	4617      	mov	r7, r2
 800f4c0:	f001 fe96 	bl	80111f0 <ucdr_buffer_alignment>
 800f4c4:	4601      	mov	r1, r0
 800f4c6:	4620      	mov	r0, r4
 800f4c8:	7d65      	ldrb	r5, [r4, #21]
 800f4ca:	f001 fed5 	bl	8011278 <ucdr_advance_buffer>
 800f4ce:	7d21      	ldrb	r1, [r4, #20]
 800f4d0:	7565      	strb	r5, [r4, #21]
 800f4d2:	2901      	cmp	r1, #1
 800f4d4:	d011      	beq.n	800f4fa <ucdr_deserialize_array_float+0x46>
 800f4d6:	b15f      	cbz	r7, 800f4f0 <ucdr_deserialize_array_float+0x3c>
 800f4d8:	2500      	movs	r5, #0
 800f4da:	e000      	b.n	800f4de <ucdr_deserialize_array_float+0x2a>
 800f4dc:	7d21      	ldrb	r1, [r4, #20]
 800f4de:	4632      	mov	r2, r6
 800f4e0:	4620      	mov	r0, r4
 800f4e2:	3501      	adds	r5, #1
 800f4e4:	f001 fa82 	bl	80109ec <ucdr_deserialize_endian_float>
 800f4e8:	42af      	cmp	r7, r5
 800f4ea:	f106 0604 	add.w	r6, r6, #4
 800f4ee:	d1f5      	bne.n	800f4dc <ucdr_deserialize_array_float+0x28>
 800f4f0:	7da0      	ldrb	r0, [r4, #22]
 800f4f2:	f080 0001 	eor.w	r0, r0, #1
 800f4f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f4fa:	00bf      	lsls	r7, r7, #2
 800f4fc:	4639      	mov	r1, r7
 800f4fe:	4620      	mov	r0, r4
 800f500:	f001 fe16 	bl	8011130 <ucdr_check_buffer_available_for>
 800f504:	b9f8      	cbnz	r0, 800f546 <ucdr_deserialize_array_float+0x92>
 800f506:	46b8      	mov	r8, r7
 800f508:	e00a      	b.n	800f520 <ucdr_deserialize_array_float+0x6c>
 800f50a:	68a1      	ldr	r1, [r4, #8]
 800f50c:	f00e f855 	bl	801d5ba <memcpy>
 800f510:	68a2      	ldr	r2, [r4, #8]
 800f512:	6923      	ldr	r3, [r4, #16]
 800f514:	442a      	add	r2, r5
 800f516:	442b      	add	r3, r5
 800f518:	eba8 0805 	sub.w	r8, r8, r5
 800f51c:	60a2      	str	r2, [r4, #8]
 800f51e:	6123      	str	r3, [r4, #16]
 800f520:	2204      	movs	r2, #4
 800f522:	4641      	mov	r1, r8
 800f524:	4620      	mov	r0, r4
 800f526:	f001 fe8b 	bl	8011240 <ucdr_check_final_buffer_behavior_array>
 800f52a:	4605      	mov	r5, r0
 800f52c:	eba7 0008 	sub.w	r0, r7, r8
 800f530:	462a      	mov	r2, r5
 800f532:	4430      	add	r0, r6
 800f534:	2d00      	cmp	r5, #0
 800f536:	d1e8      	bne.n	800f50a <ucdr_deserialize_array_float+0x56>
 800f538:	7da0      	ldrb	r0, [r4, #22]
 800f53a:	2304      	movs	r3, #4
 800f53c:	7563      	strb	r3, [r4, #21]
 800f53e:	f080 0001 	eor.w	r0, r0, #1
 800f542:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f546:	463a      	mov	r2, r7
 800f548:	68a1      	ldr	r1, [r4, #8]
 800f54a:	4630      	mov	r0, r6
 800f54c:	f00e f835 	bl	801d5ba <memcpy>
 800f550:	68a2      	ldr	r2, [r4, #8]
 800f552:	6923      	ldr	r3, [r4, #16]
 800f554:	443a      	add	r2, r7
 800f556:	443b      	add	r3, r7
 800f558:	60a2      	str	r2, [r4, #8]
 800f55a:	6123      	str	r3, [r4, #16]
 800f55c:	e7ec      	b.n	800f538 <ucdr_deserialize_array_float+0x84>
 800f55e:	bf00      	nop

0800f560 <ucdr_serialize_array_double>:
 800f560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f564:	460e      	mov	r6, r1
 800f566:	2108      	movs	r1, #8
 800f568:	4604      	mov	r4, r0
 800f56a:	4617      	mov	r7, r2
 800f56c:	f001 fe40 	bl	80111f0 <ucdr_buffer_alignment>
 800f570:	4601      	mov	r1, r0
 800f572:	4620      	mov	r0, r4
 800f574:	7d65      	ldrb	r5, [r4, #21]
 800f576:	f001 fe7f 	bl	8011278 <ucdr_advance_buffer>
 800f57a:	7d21      	ldrb	r1, [r4, #20]
 800f57c:	7565      	strb	r5, [r4, #21]
 800f57e:	2901      	cmp	r1, #1
 800f580:	d010      	beq.n	800f5a4 <ucdr_serialize_array_double+0x44>
 800f582:	b157      	cbz	r7, 800f59a <ucdr_serialize_array_double+0x3a>
 800f584:	2500      	movs	r5, #0
 800f586:	e000      	b.n	800f58a <ucdr_serialize_array_double+0x2a>
 800f588:	7d21      	ldrb	r1, [r4, #20]
 800f58a:	ecb6 0b02 	vldmia	r6!, {d0}
 800f58e:	4620      	mov	r0, r4
 800f590:	3501      	adds	r5, #1
 800f592:	f001 fb7f 	bl	8010c94 <ucdr_serialize_endian_double>
 800f596:	42af      	cmp	r7, r5
 800f598:	d1f6      	bne.n	800f588 <ucdr_serialize_array_double+0x28>
 800f59a:	7da0      	ldrb	r0, [r4, #22]
 800f59c:	f080 0001 	eor.w	r0, r0, #1
 800f5a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f5a4:	00ff      	lsls	r7, r7, #3
 800f5a6:	4639      	mov	r1, r7
 800f5a8:	4620      	mov	r0, r4
 800f5aa:	f001 fdc1 	bl	8011130 <ucdr_check_buffer_available_for>
 800f5ae:	b9f8      	cbnz	r0, 800f5f0 <ucdr_serialize_array_double+0x90>
 800f5b0:	46b8      	mov	r8, r7
 800f5b2:	e00a      	b.n	800f5ca <ucdr_serialize_array_double+0x6a>
 800f5b4:	68a0      	ldr	r0, [r4, #8]
 800f5b6:	f00e f800 	bl	801d5ba <memcpy>
 800f5ba:	68a2      	ldr	r2, [r4, #8]
 800f5bc:	6923      	ldr	r3, [r4, #16]
 800f5be:	442a      	add	r2, r5
 800f5c0:	442b      	add	r3, r5
 800f5c2:	eba8 0805 	sub.w	r8, r8, r5
 800f5c6:	60a2      	str	r2, [r4, #8]
 800f5c8:	6123      	str	r3, [r4, #16]
 800f5ca:	2208      	movs	r2, #8
 800f5cc:	4641      	mov	r1, r8
 800f5ce:	4620      	mov	r0, r4
 800f5d0:	f001 fe36 	bl	8011240 <ucdr_check_final_buffer_behavior_array>
 800f5d4:	eba7 0108 	sub.w	r1, r7, r8
 800f5d8:	4605      	mov	r5, r0
 800f5da:	4602      	mov	r2, r0
 800f5dc:	4431      	add	r1, r6
 800f5de:	2800      	cmp	r0, #0
 800f5e0:	d1e8      	bne.n	800f5b4 <ucdr_serialize_array_double+0x54>
 800f5e2:	7da0      	ldrb	r0, [r4, #22]
 800f5e4:	2308      	movs	r3, #8
 800f5e6:	7563      	strb	r3, [r4, #21]
 800f5e8:	f080 0001 	eor.w	r0, r0, #1
 800f5ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f5f0:	463a      	mov	r2, r7
 800f5f2:	68a0      	ldr	r0, [r4, #8]
 800f5f4:	4631      	mov	r1, r6
 800f5f6:	f00d ffe0 	bl	801d5ba <memcpy>
 800f5fa:	68a2      	ldr	r2, [r4, #8]
 800f5fc:	6923      	ldr	r3, [r4, #16]
 800f5fe:	443a      	add	r2, r7
 800f600:	443b      	add	r3, r7
 800f602:	60a2      	str	r2, [r4, #8]
 800f604:	6123      	str	r3, [r4, #16]
 800f606:	e7ec      	b.n	800f5e2 <ucdr_serialize_array_double+0x82>

0800f608 <ucdr_deserialize_array_double>:
 800f608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f60c:	460e      	mov	r6, r1
 800f60e:	2108      	movs	r1, #8
 800f610:	4604      	mov	r4, r0
 800f612:	4617      	mov	r7, r2
 800f614:	f001 fdec 	bl	80111f0 <ucdr_buffer_alignment>
 800f618:	4601      	mov	r1, r0
 800f61a:	4620      	mov	r0, r4
 800f61c:	7d65      	ldrb	r5, [r4, #21]
 800f61e:	f001 fe2b 	bl	8011278 <ucdr_advance_buffer>
 800f622:	7d21      	ldrb	r1, [r4, #20]
 800f624:	7565      	strb	r5, [r4, #21]
 800f626:	2901      	cmp	r1, #1
 800f628:	d011      	beq.n	800f64e <ucdr_deserialize_array_double+0x46>
 800f62a:	b15f      	cbz	r7, 800f644 <ucdr_deserialize_array_double+0x3c>
 800f62c:	2500      	movs	r5, #0
 800f62e:	e000      	b.n	800f632 <ucdr_deserialize_array_double+0x2a>
 800f630:	7d21      	ldrb	r1, [r4, #20]
 800f632:	4632      	mov	r2, r6
 800f634:	4620      	mov	r0, r4
 800f636:	3501      	adds	r5, #1
 800f638:	f001 fcb2 	bl	8010fa0 <ucdr_deserialize_endian_double>
 800f63c:	42af      	cmp	r7, r5
 800f63e:	f106 0608 	add.w	r6, r6, #8
 800f642:	d1f5      	bne.n	800f630 <ucdr_deserialize_array_double+0x28>
 800f644:	7da0      	ldrb	r0, [r4, #22]
 800f646:	f080 0001 	eor.w	r0, r0, #1
 800f64a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f64e:	00ff      	lsls	r7, r7, #3
 800f650:	4639      	mov	r1, r7
 800f652:	4620      	mov	r0, r4
 800f654:	f001 fd6c 	bl	8011130 <ucdr_check_buffer_available_for>
 800f658:	b9f8      	cbnz	r0, 800f69a <ucdr_deserialize_array_double+0x92>
 800f65a:	46b8      	mov	r8, r7
 800f65c:	e00a      	b.n	800f674 <ucdr_deserialize_array_double+0x6c>
 800f65e:	68a1      	ldr	r1, [r4, #8]
 800f660:	f00d ffab 	bl	801d5ba <memcpy>
 800f664:	68a2      	ldr	r2, [r4, #8]
 800f666:	6923      	ldr	r3, [r4, #16]
 800f668:	442a      	add	r2, r5
 800f66a:	442b      	add	r3, r5
 800f66c:	eba8 0805 	sub.w	r8, r8, r5
 800f670:	60a2      	str	r2, [r4, #8]
 800f672:	6123      	str	r3, [r4, #16]
 800f674:	2208      	movs	r2, #8
 800f676:	4641      	mov	r1, r8
 800f678:	4620      	mov	r0, r4
 800f67a:	f001 fde1 	bl	8011240 <ucdr_check_final_buffer_behavior_array>
 800f67e:	4605      	mov	r5, r0
 800f680:	eba7 0008 	sub.w	r0, r7, r8
 800f684:	462a      	mov	r2, r5
 800f686:	4430      	add	r0, r6
 800f688:	2d00      	cmp	r5, #0
 800f68a:	d1e8      	bne.n	800f65e <ucdr_deserialize_array_double+0x56>
 800f68c:	7da0      	ldrb	r0, [r4, #22]
 800f68e:	2308      	movs	r3, #8
 800f690:	7563      	strb	r3, [r4, #21]
 800f692:	f080 0001 	eor.w	r0, r0, #1
 800f696:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f69a:	463a      	mov	r2, r7
 800f69c:	68a1      	ldr	r1, [r4, #8]
 800f69e:	4630      	mov	r0, r6
 800f6a0:	f00d ff8b 	bl	801d5ba <memcpy>
 800f6a4:	68a2      	ldr	r2, [r4, #8]
 800f6a6:	6923      	ldr	r3, [r4, #16]
 800f6a8:	443a      	add	r2, r7
 800f6aa:	443b      	add	r3, r7
 800f6ac:	60a2      	str	r2, [r4, #8]
 800f6ae:	6123      	str	r3, [r4, #16]
 800f6b0:	e7ec      	b.n	800f68c <ucdr_deserialize_array_double+0x84>
 800f6b2:	bf00      	nop

0800f6b4 <ucdr_serialize_bool>:
 800f6b4:	b538      	push	{r3, r4, r5, lr}
 800f6b6:	460d      	mov	r5, r1
 800f6b8:	2101      	movs	r1, #1
 800f6ba:	4604      	mov	r4, r0
 800f6bc:	f001 fd44 	bl	8011148 <ucdr_check_final_buffer_behavior>
 800f6c0:	b148      	cbz	r0, 800f6d6 <ucdr_serialize_bool+0x22>
 800f6c2:	68a3      	ldr	r3, [r4, #8]
 800f6c4:	701d      	strb	r5, [r3, #0]
 800f6c6:	68a2      	ldr	r2, [r4, #8]
 800f6c8:	6923      	ldr	r3, [r4, #16]
 800f6ca:	2101      	movs	r1, #1
 800f6cc:	440a      	add	r2, r1
 800f6ce:	440b      	add	r3, r1
 800f6d0:	60a2      	str	r2, [r4, #8]
 800f6d2:	6123      	str	r3, [r4, #16]
 800f6d4:	7561      	strb	r1, [r4, #21]
 800f6d6:	7da0      	ldrb	r0, [r4, #22]
 800f6d8:	f080 0001 	eor.w	r0, r0, #1
 800f6dc:	bd38      	pop	{r3, r4, r5, pc}
 800f6de:	bf00      	nop

0800f6e0 <ucdr_deserialize_bool>:
 800f6e0:	b538      	push	{r3, r4, r5, lr}
 800f6e2:	460d      	mov	r5, r1
 800f6e4:	2101      	movs	r1, #1
 800f6e6:	4604      	mov	r4, r0
 800f6e8:	f001 fd2e 	bl	8011148 <ucdr_check_final_buffer_behavior>
 800f6ec:	b160      	cbz	r0, 800f708 <ucdr_deserialize_bool+0x28>
 800f6ee:	68a2      	ldr	r2, [r4, #8]
 800f6f0:	6923      	ldr	r3, [r4, #16]
 800f6f2:	f812 1b01 	ldrb.w	r1, [r2], #1
 800f6f6:	3900      	subs	r1, #0
 800f6f8:	bf18      	it	ne
 800f6fa:	2101      	movne	r1, #1
 800f6fc:	7029      	strb	r1, [r5, #0]
 800f6fe:	3301      	adds	r3, #1
 800f700:	2101      	movs	r1, #1
 800f702:	60a2      	str	r2, [r4, #8]
 800f704:	6123      	str	r3, [r4, #16]
 800f706:	7561      	strb	r1, [r4, #21]
 800f708:	7da0      	ldrb	r0, [r4, #22]
 800f70a:	f080 0001 	eor.w	r0, r0, #1
 800f70e:	bd38      	pop	{r3, r4, r5, pc}

0800f710 <ucdr_serialize_uint8_t>:
 800f710:	b538      	push	{r3, r4, r5, lr}
 800f712:	460d      	mov	r5, r1
 800f714:	2101      	movs	r1, #1
 800f716:	4604      	mov	r4, r0
 800f718:	f001 fd16 	bl	8011148 <ucdr_check_final_buffer_behavior>
 800f71c:	b148      	cbz	r0, 800f732 <ucdr_serialize_uint8_t+0x22>
 800f71e:	68a3      	ldr	r3, [r4, #8]
 800f720:	701d      	strb	r5, [r3, #0]
 800f722:	68a2      	ldr	r2, [r4, #8]
 800f724:	6923      	ldr	r3, [r4, #16]
 800f726:	2101      	movs	r1, #1
 800f728:	440a      	add	r2, r1
 800f72a:	440b      	add	r3, r1
 800f72c:	60a2      	str	r2, [r4, #8]
 800f72e:	6123      	str	r3, [r4, #16]
 800f730:	7561      	strb	r1, [r4, #21]
 800f732:	7da0      	ldrb	r0, [r4, #22]
 800f734:	f080 0001 	eor.w	r0, r0, #1
 800f738:	bd38      	pop	{r3, r4, r5, pc}
 800f73a:	bf00      	nop

0800f73c <ucdr_deserialize_uint8_t>:
 800f73c:	b538      	push	{r3, r4, r5, lr}
 800f73e:	460d      	mov	r5, r1
 800f740:	2101      	movs	r1, #1
 800f742:	4604      	mov	r4, r0
 800f744:	f001 fd00 	bl	8011148 <ucdr_check_final_buffer_behavior>
 800f748:	b150      	cbz	r0, 800f760 <ucdr_deserialize_uint8_t+0x24>
 800f74a:	68a3      	ldr	r3, [r4, #8]
 800f74c:	781b      	ldrb	r3, [r3, #0]
 800f74e:	702b      	strb	r3, [r5, #0]
 800f750:	68a2      	ldr	r2, [r4, #8]
 800f752:	6923      	ldr	r3, [r4, #16]
 800f754:	2101      	movs	r1, #1
 800f756:	440a      	add	r2, r1
 800f758:	440b      	add	r3, r1
 800f75a:	60a2      	str	r2, [r4, #8]
 800f75c:	6123      	str	r3, [r4, #16]
 800f75e:	7561      	strb	r1, [r4, #21]
 800f760:	7da0      	ldrb	r0, [r4, #22]
 800f762:	f080 0001 	eor.w	r0, r0, #1
 800f766:	bd38      	pop	{r3, r4, r5, pc}

0800f768 <ucdr_serialize_uint16_t>:
 800f768:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f76c:	b082      	sub	sp, #8
 800f76e:	460b      	mov	r3, r1
 800f770:	2102      	movs	r1, #2
 800f772:	4604      	mov	r4, r0
 800f774:	f8ad 3006 	strh.w	r3, [sp, #6]
 800f778:	f001 fd3a 	bl	80111f0 <ucdr_buffer_alignment>
 800f77c:	4601      	mov	r1, r0
 800f77e:	4620      	mov	r0, r4
 800f780:	7d67      	ldrb	r7, [r4, #21]
 800f782:	f001 fd79 	bl	8011278 <ucdr_advance_buffer>
 800f786:	2102      	movs	r1, #2
 800f788:	4620      	mov	r0, r4
 800f78a:	f001 fcd1 	bl	8011130 <ucdr_check_buffer_available_for>
 800f78e:	b1c0      	cbz	r0, 800f7c2 <ucdr_serialize_uint16_t+0x5a>
 800f790:	7d22      	ldrb	r2, [r4, #20]
 800f792:	68a3      	ldr	r3, [r4, #8]
 800f794:	2a01      	cmp	r2, #1
 800f796:	d04e      	beq.n	800f836 <ucdr_serialize_uint16_t+0xce>
 800f798:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800f79c:	701a      	strb	r2, [r3, #0]
 800f79e:	68a3      	ldr	r3, [r4, #8]
 800f7a0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f7a4:	705a      	strb	r2, [r3, #1]
 800f7a6:	68a2      	ldr	r2, [r4, #8]
 800f7a8:	6923      	ldr	r3, [r4, #16]
 800f7aa:	3202      	adds	r2, #2
 800f7ac:	3302      	adds	r3, #2
 800f7ae:	2102      	movs	r1, #2
 800f7b0:	60a2      	str	r2, [r4, #8]
 800f7b2:	6123      	str	r3, [r4, #16]
 800f7b4:	7561      	strb	r1, [r4, #21]
 800f7b6:	7da0      	ldrb	r0, [r4, #22]
 800f7b8:	f080 0001 	eor.w	r0, r0, #1
 800f7bc:	b002      	add	sp, #8
 800f7be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f7c2:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800f7c6:	42ab      	cmp	r3, r5
 800f7c8:	d923      	bls.n	800f812 <ucdr_serialize_uint16_t+0xaa>
 800f7ca:	1b5e      	subs	r6, r3, r5
 800f7cc:	60a3      	str	r3, [r4, #8]
 800f7ce:	6923      	ldr	r3, [r4, #16]
 800f7d0:	f1c6 0802 	rsb	r8, r6, #2
 800f7d4:	4433      	add	r3, r6
 800f7d6:	6123      	str	r3, [r4, #16]
 800f7d8:	4641      	mov	r1, r8
 800f7da:	4620      	mov	r0, r4
 800f7dc:	f001 fcb4 	bl	8011148 <ucdr_check_final_buffer_behavior>
 800f7e0:	b368      	cbz	r0, 800f83e <ucdr_serialize_uint16_t+0xd6>
 800f7e2:	7d23      	ldrb	r3, [r4, #20]
 800f7e4:	2b01      	cmp	r3, #1
 800f7e6:	d03b      	beq.n	800f860 <ucdr_serialize_uint16_t+0xf8>
 800f7e8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f7ec:	702b      	strb	r3, [r5, #0]
 800f7ee:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f7f2:	706b      	strb	r3, [r5, #1]
 800f7f4:	6923      	ldr	r3, [r4, #16]
 800f7f6:	68a2      	ldr	r2, [r4, #8]
 800f7f8:	7da0      	ldrb	r0, [r4, #22]
 800f7fa:	3302      	adds	r3, #2
 800f7fc:	4442      	add	r2, r8
 800f7fe:	1b9b      	subs	r3, r3, r6
 800f800:	2102      	movs	r1, #2
 800f802:	f080 0001 	eor.w	r0, r0, #1
 800f806:	60a2      	str	r2, [r4, #8]
 800f808:	6123      	str	r3, [r4, #16]
 800f80a:	7561      	strb	r1, [r4, #21]
 800f80c:	b002      	add	sp, #8
 800f80e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f812:	2102      	movs	r1, #2
 800f814:	4620      	mov	r0, r4
 800f816:	f001 fc97 	bl	8011148 <ucdr_check_final_buffer_behavior>
 800f81a:	2800      	cmp	r0, #0
 800f81c:	d0cb      	beq.n	800f7b6 <ucdr_serialize_uint16_t+0x4e>
 800f81e:	7d23      	ldrb	r3, [r4, #20]
 800f820:	68a2      	ldr	r2, [r4, #8]
 800f822:	2b01      	cmp	r3, #1
 800f824:	d018      	beq.n	800f858 <ucdr_serialize_uint16_t+0xf0>
 800f826:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f82a:	7013      	strb	r3, [r2, #0]
 800f82c:	68a3      	ldr	r3, [r4, #8]
 800f82e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f832:	705a      	strb	r2, [r3, #1]
 800f834:	e7b7      	b.n	800f7a6 <ucdr_serialize_uint16_t+0x3e>
 800f836:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800f83a:	801a      	strh	r2, [r3, #0]
 800f83c:	e7b3      	b.n	800f7a6 <ucdr_serialize_uint16_t+0x3e>
 800f83e:	68a2      	ldr	r2, [r4, #8]
 800f840:	6923      	ldr	r3, [r4, #16]
 800f842:	7da0      	ldrb	r0, [r4, #22]
 800f844:	7567      	strb	r7, [r4, #21]
 800f846:	1b92      	subs	r2, r2, r6
 800f848:	1b9b      	subs	r3, r3, r6
 800f84a:	f080 0001 	eor.w	r0, r0, #1
 800f84e:	60a2      	str	r2, [r4, #8]
 800f850:	6123      	str	r3, [r4, #16]
 800f852:	b002      	add	sp, #8
 800f854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f858:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800f85c:	8013      	strh	r3, [r2, #0]
 800f85e:	e7a2      	b.n	800f7a6 <ucdr_serialize_uint16_t+0x3e>
 800f860:	4628      	mov	r0, r5
 800f862:	f10d 0506 	add.w	r5, sp, #6
 800f866:	4632      	mov	r2, r6
 800f868:	4629      	mov	r1, r5
 800f86a:	f00d fea6 	bl	801d5ba <memcpy>
 800f86e:	68a0      	ldr	r0, [r4, #8]
 800f870:	4642      	mov	r2, r8
 800f872:	19a9      	adds	r1, r5, r6
 800f874:	f00d fea1 	bl	801d5ba <memcpy>
 800f878:	e7bc      	b.n	800f7f4 <ucdr_serialize_uint16_t+0x8c>
 800f87a:	bf00      	nop

0800f87c <ucdr_serialize_endian_uint16_t>:
 800f87c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f880:	b083      	sub	sp, #12
 800f882:	460d      	mov	r5, r1
 800f884:	2102      	movs	r1, #2
 800f886:	4604      	mov	r4, r0
 800f888:	f8ad 2006 	strh.w	r2, [sp, #6]
 800f88c:	f001 fcb0 	bl	80111f0 <ucdr_buffer_alignment>
 800f890:	4601      	mov	r1, r0
 800f892:	4620      	mov	r0, r4
 800f894:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f898:	f001 fcee 	bl	8011278 <ucdr_advance_buffer>
 800f89c:	2102      	movs	r1, #2
 800f89e:	4620      	mov	r0, r4
 800f8a0:	f001 fc46 	bl	8011130 <ucdr_check_buffer_available_for>
 800f8a4:	bb60      	cbnz	r0, 800f900 <ucdr_serialize_endian_uint16_t+0x84>
 800f8a6:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800f8aa:	42be      	cmp	r6, r7
 800f8ac:	d923      	bls.n	800f8f6 <ucdr_serialize_endian_uint16_t+0x7a>
 800f8ae:	6923      	ldr	r3, [r4, #16]
 800f8b0:	60a6      	str	r6, [r4, #8]
 800f8b2:	1bf6      	subs	r6, r6, r7
 800f8b4:	4433      	add	r3, r6
 800f8b6:	f1c6 0902 	rsb	r9, r6, #2
 800f8ba:	6123      	str	r3, [r4, #16]
 800f8bc:	4649      	mov	r1, r9
 800f8be:	4620      	mov	r0, r4
 800f8c0:	f001 fc42 	bl	8011148 <ucdr_check_final_buffer_behavior>
 800f8c4:	2800      	cmp	r0, #0
 800f8c6:	d037      	beq.n	800f938 <ucdr_serialize_endian_uint16_t+0xbc>
 800f8c8:	2d01      	cmp	r5, #1
 800f8ca:	d043      	beq.n	800f954 <ucdr_serialize_endian_uint16_t+0xd8>
 800f8cc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f8d0:	703b      	strb	r3, [r7, #0]
 800f8d2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f8d6:	707b      	strb	r3, [r7, #1]
 800f8d8:	6923      	ldr	r3, [r4, #16]
 800f8da:	68a2      	ldr	r2, [r4, #8]
 800f8dc:	7da0      	ldrb	r0, [r4, #22]
 800f8de:	3302      	adds	r3, #2
 800f8e0:	444a      	add	r2, r9
 800f8e2:	1b9b      	subs	r3, r3, r6
 800f8e4:	2102      	movs	r1, #2
 800f8e6:	f080 0001 	eor.w	r0, r0, #1
 800f8ea:	60a2      	str	r2, [r4, #8]
 800f8ec:	6123      	str	r3, [r4, #16]
 800f8ee:	7561      	strb	r1, [r4, #21]
 800f8f0:	b003      	add	sp, #12
 800f8f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f8f6:	2102      	movs	r1, #2
 800f8f8:	4620      	mov	r0, r4
 800f8fa:	f001 fc25 	bl	8011148 <ucdr_check_final_buffer_behavior>
 800f8fe:	b188      	cbz	r0, 800f924 <ucdr_serialize_endian_uint16_t+0xa8>
 800f900:	2d01      	cmp	r5, #1
 800f902:	68a3      	ldr	r3, [r4, #8]
 800f904:	d014      	beq.n	800f930 <ucdr_serialize_endian_uint16_t+0xb4>
 800f906:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800f90a:	701a      	strb	r2, [r3, #0]
 800f90c:	68a3      	ldr	r3, [r4, #8]
 800f90e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f912:	705a      	strb	r2, [r3, #1]
 800f914:	68a2      	ldr	r2, [r4, #8]
 800f916:	6923      	ldr	r3, [r4, #16]
 800f918:	3202      	adds	r2, #2
 800f91a:	3302      	adds	r3, #2
 800f91c:	2102      	movs	r1, #2
 800f91e:	60a2      	str	r2, [r4, #8]
 800f920:	6123      	str	r3, [r4, #16]
 800f922:	7561      	strb	r1, [r4, #21]
 800f924:	7da0      	ldrb	r0, [r4, #22]
 800f926:	f080 0001 	eor.w	r0, r0, #1
 800f92a:	b003      	add	sp, #12
 800f92c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f930:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800f934:	801a      	strh	r2, [r3, #0]
 800f936:	e7ed      	b.n	800f914 <ucdr_serialize_endian_uint16_t+0x98>
 800f938:	68a2      	ldr	r2, [r4, #8]
 800f93a:	6923      	ldr	r3, [r4, #16]
 800f93c:	7da0      	ldrb	r0, [r4, #22]
 800f93e:	f884 8015 	strb.w	r8, [r4, #21]
 800f942:	1b92      	subs	r2, r2, r6
 800f944:	1b9b      	subs	r3, r3, r6
 800f946:	f080 0001 	eor.w	r0, r0, #1
 800f94a:	60a2      	str	r2, [r4, #8]
 800f94c:	6123      	str	r3, [r4, #16]
 800f94e:	b003      	add	sp, #12
 800f950:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f954:	f10d 0506 	add.w	r5, sp, #6
 800f958:	4632      	mov	r2, r6
 800f95a:	4629      	mov	r1, r5
 800f95c:	4638      	mov	r0, r7
 800f95e:	f00d fe2c 	bl	801d5ba <memcpy>
 800f962:	68a0      	ldr	r0, [r4, #8]
 800f964:	464a      	mov	r2, r9
 800f966:	19a9      	adds	r1, r5, r6
 800f968:	f00d fe27 	bl	801d5ba <memcpy>
 800f96c:	e7b4      	b.n	800f8d8 <ucdr_serialize_endian_uint16_t+0x5c>
 800f96e:	bf00      	nop

0800f970 <ucdr_deserialize_uint16_t>:
 800f970:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f974:	460d      	mov	r5, r1
 800f976:	2102      	movs	r1, #2
 800f978:	4604      	mov	r4, r0
 800f97a:	f001 fc39 	bl	80111f0 <ucdr_buffer_alignment>
 800f97e:	4601      	mov	r1, r0
 800f980:	4620      	mov	r0, r4
 800f982:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f986:	f001 fc77 	bl	8011278 <ucdr_advance_buffer>
 800f98a:	2102      	movs	r1, #2
 800f98c:	4620      	mov	r0, r4
 800f98e:	f001 fbcf 	bl	8011130 <ucdr_check_buffer_available_for>
 800f992:	b1a8      	cbz	r0, 800f9c0 <ucdr_deserialize_uint16_t+0x50>
 800f994:	7d22      	ldrb	r2, [r4, #20]
 800f996:	68a3      	ldr	r3, [r4, #8]
 800f998:	2a01      	cmp	r2, #1
 800f99a:	d046      	beq.n	800fa2a <ucdr_deserialize_uint16_t+0xba>
 800f99c:	785b      	ldrb	r3, [r3, #1]
 800f99e:	702b      	strb	r3, [r5, #0]
 800f9a0:	68a3      	ldr	r3, [r4, #8]
 800f9a2:	781b      	ldrb	r3, [r3, #0]
 800f9a4:	706b      	strb	r3, [r5, #1]
 800f9a6:	68a2      	ldr	r2, [r4, #8]
 800f9a8:	6923      	ldr	r3, [r4, #16]
 800f9aa:	3202      	adds	r2, #2
 800f9ac:	3302      	adds	r3, #2
 800f9ae:	2102      	movs	r1, #2
 800f9b0:	60a2      	str	r2, [r4, #8]
 800f9b2:	6123      	str	r3, [r4, #16]
 800f9b4:	7561      	strb	r1, [r4, #21]
 800f9b6:	7da0      	ldrb	r0, [r4, #22]
 800f9b8:	f080 0001 	eor.w	r0, r0, #1
 800f9bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f9c0:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800f9c4:	42be      	cmp	r6, r7
 800f9c6:	d920      	bls.n	800fa0a <ucdr_deserialize_uint16_t+0x9a>
 800f9c8:	6923      	ldr	r3, [r4, #16]
 800f9ca:	60a6      	str	r6, [r4, #8]
 800f9cc:	1bf6      	subs	r6, r6, r7
 800f9ce:	4433      	add	r3, r6
 800f9d0:	f1c6 0902 	rsb	r9, r6, #2
 800f9d4:	6123      	str	r3, [r4, #16]
 800f9d6:	4649      	mov	r1, r9
 800f9d8:	4620      	mov	r0, r4
 800f9da:	f001 fbb5 	bl	8011148 <ucdr_check_final_buffer_behavior>
 800f9de:	b338      	cbz	r0, 800fa30 <ucdr_deserialize_uint16_t+0xc0>
 800f9e0:	7d23      	ldrb	r3, [r4, #20]
 800f9e2:	2b01      	cmp	r3, #1
 800f9e4:	d034      	beq.n	800fa50 <ucdr_deserialize_uint16_t+0xe0>
 800f9e6:	787b      	ldrb	r3, [r7, #1]
 800f9e8:	702b      	strb	r3, [r5, #0]
 800f9ea:	783b      	ldrb	r3, [r7, #0]
 800f9ec:	706b      	strb	r3, [r5, #1]
 800f9ee:	6923      	ldr	r3, [r4, #16]
 800f9f0:	68a2      	ldr	r2, [r4, #8]
 800f9f2:	7da0      	ldrb	r0, [r4, #22]
 800f9f4:	2102      	movs	r1, #2
 800f9f6:	3302      	adds	r3, #2
 800f9f8:	444a      	add	r2, r9
 800f9fa:	1b9b      	subs	r3, r3, r6
 800f9fc:	7561      	strb	r1, [r4, #21]
 800f9fe:	60a2      	str	r2, [r4, #8]
 800fa00:	6123      	str	r3, [r4, #16]
 800fa02:	f080 0001 	eor.w	r0, r0, #1
 800fa06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fa0a:	2102      	movs	r1, #2
 800fa0c:	4620      	mov	r0, r4
 800fa0e:	f001 fb9b 	bl	8011148 <ucdr_check_final_buffer_behavior>
 800fa12:	2800      	cmp	r0, #0
 800fa14:	d0cf      	beq.n	800f9b6 <ucdr_deserialize_uint16_t+0x46>
 800fa16:	7d23      	ldrb	r3, [r4, #20]
 800fa18:	68a2      	ldr	r2, [r4, #8]
 800fa1a:	2b01      	cmp	r3, #1
 800fa1c:	d015      	beq.n	800fa4a <ucdr_deserialize_uint16_t+0xda>
 800fa1e:	7853      	ldrb	r3, [r2, #1]
 800fa20:	702b      	strb	r3, [r5, #0]
 800fa22:	68a3      	ldr	r3, [r4, #8]
 800fa24:	781b      	ldrb	r3, [r3, #0]
 800fa26:	706b      	strb	r3, [r5, #1]
 800fa28:	e7bd      	b.n	800f9a6 <ucdr_deserialize_uint16_t+0x36>
 800fa2a:	881b      	ldrh	r3, [r3, #0]
 800fa2c:	802b      	strh	r3, [r5, #0]
 800fa2e:	e7ba      	b.n	800f9a6 <ucdr_deserialize_uint16_t+0x36>
 800fa30:	68a2      	ldr	r2, [r4, #8]
 800fa32:	6923      	ldr	r3, [r4, #16]
 800fa34:	7da0      	ldrb	r0, [r4, #22]
 800fa36:	f884 8015 	strb.w	r8, [r4, #21]
 800fa3a:	1b92      	subs	r2, r2, r6
 800fa3c:	1b9b      	subs	r3, r3, r6
 800fa3e:	60a2      	str	r2, [r4, #8]
 800fa40:	6123      	str	r3, [r4, #16]
 800fa42:	f080 0001 	eor.w	r0, r0, #1
 800fa46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fa4a:	8813      	ldrh	r3, [r2, #0]
 800fa4c:	802b      	strh	r3, [r5, #0]
 800fa4e:	e7aa      	b.n	800f9a6 <ucdr_deserialize_uint16_t+0x36>
 800fa50:	4639      	mov	r1, r7
 800fa52:	4632      	mov	r2, r6
 800fa54:	4628      	mov	r0, r5
 800fa56:	f00d fdb0 	bl	801d5ba <memcpy>
 800fa5a:	68a1      	ldr	r1, [r4, #8]
 800fa5c:	464a      	mov	r2, r9
 800fa5e:	19a8      	adds	r0, r5, r6
 800fa60:	f00d fdab 	bl	801d5ba <memcpy>
 800fa64:	e7c3      	b.n	800f9ee <ucdr_deserialize_uint16_t+0x7e>
 800fa66:	bf00      	nop

0800fa68 <ucdr_deserialize_endian_uint16_t>:
 800fa68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fa6c:	460e      	mov	r6, r1
 800fa6e:	2102      	movs	r1, #2
 800fa70:	4604      	mov	r4, r0
 800fa72:	4615      	mov	r5, r2
 800fa74:	f001 fbbc 	bl	80111f0 <ucdr_buffer_alignment>
 800fa78:	4601      	mov	r1, r0
 800fa7a:	4620      	mov	r0, r4
 800fa7c:	f894 9015 	ldrb.w	r9, [r4, #21]
 800fa80:	f001 fbfa 	bl	8011278 <ucdr_advance_buffer>
 800fa84:	2102      	movs	r1, #2
 800fa86:	4620      	mov	r0, r4
 800fa88:	f001 fb52 	bl	8011130 <ucdr_check_buffer_available_for>
 800fa8c:	bb60      	cbnz	r0, 800fae8 <ucdr_deserialize_endian_uint16_t+0x80>
 800fa8e:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 800fa92:	4547      	cmp	r7, r8
 800fa94:	d923      	bls.n	800fade <ucdr_deserialize_endian_uint16_t+0x76>
 800fa96:	6923      	ldr	r3, [r4, #16]
 800fa98:	60a7      	str	r7, [r4, #8]
 800fa9a:	eba7 0708 	sub.w	r7, r7, r8
 800fa9e:	443b      	add	r3, r7
 800faa0:	f1c7 0a02 	rsb	sl, r7, #2
 800faa4:	6123      	str	r3, [r4, #16]
 800faa6:	4651      	mov	r1, sl
 800faa8:	4620      	mov	r0, r4
 800faaa:	f001 fb4d 	bl	8011148 <ucdr_check_final_buffer_behavior>
 800faae:	2800      	cmp	r0, #0
 800fab0:	d032      	beq.n	800fb18 <ucdr_deserialize_endian_uint16_t+0xb0>
 800fab2:	2e01      	cmp	r6, #1
 800fab4:	d03d      	beq.n	800fb32 <ucdr_deserialize_endian_uint16_t+0xca>
 800fab6:	f898 3001 	ldrb.w	r3, [r8, #1]
 800faba:	702b      	strb	r3, [r5, #0]
 800fabc:	f898 3000 	ldrb.w	r3, [r8]
 800fac0:	706b      	strb	r3, [r5, #1]
 800fac2:	6923      	ldr	r3, [r4, #16]
 800fac4:	68a2      	ldr	r2, [r4, #8]
 800fac6:	7da0      	ldrb	r0, [r4, #22]
 800fac8:	2102      	movs	r1, #2
 800faca:	3302      	adds	r3, #2
 800facc:	4452      	add	r2, sl
 800face:	1bdb      	subs	r3, r3, r7
 800fad0:	7561      	strb	r1, [r4, #21]
 800fad2:	60a2      	str	r2, [r4, #8]
 800fad4:	6123      	str	r3, [r4, #16]
 800fad6:	f080 0001 	eor.w	r0, r0, #1
 800fada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fade:	2102      	movs	r1, #2
 800fae0:	4620      	mov	r0, r4
 800fae2:	f001 fb31 	bl	8011148 <ucdr_check_final_buffer_behavior>
 800fae6:	b178      	cbz	r0, 800fb08 <ucdr_deserialize_endian_uint16_t+0xa0>
 800fae8:	2e01      	cmp	r6, #1
 800faea:	68a3      	ldr	r3, [r4, #8]
 800faec:	d011      	beq.n	800fb12 <ucdr_deserialize_endian_uint16_t+0xaa>
 800faee:	785b      	ldrb	r3, [r3, #1]
 800faf0:	702b      	strb	r3, [r5, #0]
 800faf2:	68a3      	ldr	r3, [r4, #8]
 800faf4:	781b      	ldrb	r3, [r3, #0]
 800faf6:	706b      	strb	r3, [r5, #1]
 800faf8:	68a2      	ldr	r2, [r4, #8]
 800fafa:	6923      	ldr	r3, [r4, #16]
 800fafc:	3202      	adds	r2, #2
 800fafe:	3302      	adds	r3, #2
 800fb00:	2102      	movs	r1, #2
 800fb02:	60a2      	str	r2, [r4, #8]
 800fb04:	6123      	str	r3, [r4, #16]
 800fb06:	7561      	strb	r1, [r4, #21]
 800fb08:	7da0      	ldrb	r0, [r4, #22]
 800fb0a:	f080 0001 	eor.w	r0, r0, #1
 800fb0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fb12:	881b      	ldrh	r3, [r3, #0]
 800fb14:	802b      	strh	r3, [r5, #0]
 800fb16:	e7ef      	b.n	800faf8 <ucdr_deserialize_endian_uint16_t+0x90>
 800fb18:	68a2      	ldr	r2, [r4, #8]
 800fb1a:	6923      	ldr	r3, [r4, #16]
 800fb1c:	7da0      	ldrb	r0, [r4, #22]
 800fb1e:	f884 9015 	strb.w	r9, [r4, #21]
 800fb22:	1bd2      	subs	r2, r2, r7
 800fb24:	1bdb      	subs	r3, r3, r7
 800fb26:	60a2      	str	r2, [r4, #8]
 800fb28:	6123      	str	r3, [r4, #16]
 800fb2a:	f080 0001 	eor.w	r0, r0, #1
 800fb2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fb32:	4641      	mov	r1, r8
 800fb34:	463a      	mov	r2, r7
 800fb36:	4628      	mov	r0, r5
 800fb38:	f00d fd3f 	bl	801d5ba <memcpy>
 800fb3c:	68a1      	ldr	r1, [r4, #8]
 800fb3e:	4652      	mov	r2, sl
 800fb40:	19e8      	adds	r0, r5, r7
 800fb42:	f00d fd3a 	bl	801d5ba <memcpy>
 800fb46:	e7bc      	b.n	800fac2 <ucdr_deserialize_endian_uint16_t+0x5a>

0800fb48 <ucdr_serialize_uint32_t>:
 800fb48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb4c:	b082      	sub	sp, #8
 800fb4e:	4604      	mov	r4, r0
 800fb50:	9101      	str	r1, [sp, #4]
 800fb52:	2104      	movs	r1, #4
 800fb54:	f001 fb4c 	bl	80111f0 <ucdr_buffer_alignment>
 800fb58:	4601      	mov	r1, r0
 800fb5a:	4620      	mov	r0, r4
 800fb5c:	7d67      	ldrb	r7, [r4, #21]
 800fb5e:	f001 fb8b 	bl	8011278 <ucdr_advance_buffer>
 800fb62:	2104      	movs	r1, #4
 800fb64:	4620      	mov	r0, r4
 800fb66:	f001 fae3 	bl	8011130 <ucdr_check_buffer_available_for>
 800fb6a:	b300      	cbz	r0, 800fbae <ucdr_serialize_uint32_t+0x66>
 800fb6c:	7d22      	ldrb	r2, [r4, #20]
 800fb6e:	68a3      	ldr	r3, [r4, #8]
 800fb70:	2a01      	cmp	r2, #1
 800fb72:	d05d      	beq.n	800fc30 <ucdr_serialize_uint32_t+0xe8>
 800fb74:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800fb78:	701a      	strb	r2, [r3, #0]
 800fb7a:	68a3      	ldr	r3, [r4, #8]
 800fb7c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800fb80:	705a      	strb	r2, [r3, #1]
 800fb82:	68a3      	ldr	r3, [r4, #8]
 800fb84:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800fb88:	709a      	strb	r2, [r3, #2]
 800fb8a:	68a3      	ldr	r3, [r4, #8]
 800fb8c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800fb90:	70da      	strb	r2, [r3, #3]
 800fb92:	68a2      	ldr	r2, [r4, #8]
 800fb94:	6923      	ldr	r3, [r4, #16]
 800fb96:	3204      	adds	r2, #4
 800fb98:	3304      	adds	r3, #4
 800fb9a:	2104      	movs	r1, #4
 800fb9c:	60a2      	str	r2, [r4, #8]
 800fb9e:	6123      	str	r3, [r4, #16]
 800fba0:	7561      	strb	r1, [r4, #21]
 800fba2:	7da0      	ldrb	r0, [r4, #22]
 800fba4:	f080 0001 	eor.w	r0, r0, #1
 800fba8:	b002      	add	sp, #8
 800fbaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fbae:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800fbb2:	42ab      	cmp	r3, r5
 800fbb4:	d92e      	bls.n	800fc14 <ucdr_serialize_uint32_t+0xcc>
 800fbb6:	1b5e      	subs	r6, r3, r5
 800fbb8:	60a3      	str	r3, [r4, #8]
 800fbba:	6923      	ldr	r3, [r4, #16]
 800fbbc:	f1c6 0804 	rsb	r8, r6, #4
 800fbc0:	4433      	add	r3, r6
 800fbc2:	6123      	str	r3, [r4, #16]
 800fbc4:	4641      	mov	r1, r8
 800fbc6:	4620      	mov	r0, r4
 800fbc8:	f001 fabe 	bl	8011148 <ucdr_check_final_buffer_behavior>
 800fbcc:	b398      	cbz	r0, 800fc36 <ucdr_serialize_uint32_t+0xee>
 800fbce:	7d23      	ldrb	r3, [r4, #20]
 800fbd0:	2b01      	cmp	r3, #1
 800fbd2:	d046      	beq.n	800fc62 <ucdr_serialize_uint32_t+0x11a>
 800fbd4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800fbd8:	702b      	strb	r3, [r5, #0]
 800fbda:	2e01      	cmp	r6, #1
 800fbdc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800fbe0:	706b      	strb	r3, [r5, #1]
 800fbe2:	d035      	beq.n	800fc50 <ucdr_serialize_uint32_t+0x108>
 800fbe4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800fbe8:	70ab      	strb	r3, [r5, #2]
 800fbea:	2e02      	cmp	r6, #2
 800fbec:	d034      	beq.n	800fc58 <ucdr_serialize_uint32_t+0x110>
 800fbee:	3503      	adds	r5, #3
 800fbf0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800fbf4:	702b      	strb	r3, [r5, #0]
 800fbf6:	6923      	ldr	r3, [r4, #16]
 800fbf8:	68a2      	ldr	r2, [r4, #8]
 800fbfa:	7da0      	ldrb	r0, [r4, #22]
 800fbfc:	3304      	adds	r3, #4
 800fbfe:	4442      	add	r2, r8
 800fc00:	1b9b      	subs	r3, r3, r6
 800fc02:	2104      	movs	r1, #4
 800fc04:	f080 0001 	eor.w	r0, r0, #1
 800fc08:	60a2      	str	r2, [r4, #8]
 800fc0a:	6123      	str	r3, [r4, #16]
 800fc0c:	7561      	strb	r1, [r4, #21]
 800fc0e:	b002      	add	sp, #8
 800fc10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc14:	2104      	movs	r1, #4
 800fc16:	4620      	mov	r0, r4
 800fc18:	f001 fa96 	bl	8011148 <ucdr_check_final_buffer_behavior>
 800fc1c:	2800      	cmp	r0, #0
 800fc1e:	d0c0      	beq.n	800fba2 <ucdr_serialize_uint32_t+0x5a>
 800fc20:	7d23      	ldrb	r3, [r4, #20]
 800fc22:	68a2      	ldr	r2, [r4, #8]
 800fc24:	2b01      	cmp	r3, #1
 800fc26:	d019      	beq.n	800fc5c <ucdr_serialize_uint32_t+0x114>
 800fc28:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800fc2c:	7013      	strb	r3, [r2, #0]
 800fc2e:	e7a4      	b.n	800fb7a <ucdr_serialize_uint32_t+0x32>
 800fc30:	9a01      	ldr	r2, [sp, #4]
 800fc32:	601a      	str	r2, [r3, #0]
 800fc34:	e7ad      	b.n	800fb92 <ucdr_serialize_uint32_t+0x4a>
 800fc36:	68a2      	ldr	r2, [r4, #8]
 800fc38:	6923      	ldr	r3, [r4, #16]
 800fc3a:	7da0      	ldrb	r0, [r4, #22]
 800fc3c:	7567      	strb	r7, [r4, #21]
 800fc3e:	1b92      	subs	r2, r2, r6
 800fc40:	1b9b      	subs	r3, r3, r6
 800fc42:	f080 0001 	eor.w	r0, r0, #1
 800fc46:	60a2      	str	r2, [r4, #8]
 800fc48:	6123      	str	r3, [r4, #16]
 800fc4a:	b002      	add	sp, #8
 800fc4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc50:	68a3      	ldr	r3, [r4, #8]
 800fc52:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800fc56:	701a      	strb	r2, [r3, #0]
 800fc58:	68a5      	ldr	r5, [r4, #8]
 800fc5a:	e7c9      	b.n	800fbf0 <ucdr_serialize_uint32_t+0xa8>
 800fc5c:	9b01      	ldr	r3, [sp, #4]
 800fc5e:	6013      	str	r3, [r2, #0]
 800fc60:	e797      	b.n	800fb92 <ucdr_serialize_uint32_t+0x4a>
 800fc62:	4628      	mov	r0, r5
 800fc64:	ad01      	add	r5, sp, #4
 800fc66:	4632      	mov	r2, r6
 800fc68:	4629      	mov	r1, r5
 800fc6a:	f00d fca6 	bl	801d5ba <memcpy>
 800fc6e:	68a0      	ldr	r0, [r4, #8]
 800fc70:	4642      	mov	r2, r8
 800fc72:	19a9      	adds	r1, r5, r6
 800fc74:	f00d fca1 	bl	801d5ba <memcpy>
 800fc78:	e7bd      	b.n	800fbf6 <ucdr_serialize_uint32_t+0xae>
 800fc7a:	bf00      	nop

0800fc7c <ucdr_serialize_endian_uint32_t>:
 800fc7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fc80:	b083      	sub	sp, #12
 800fc82:	460d      	mov	r5, r1
 800fc84:	2104      	movs	r1, #4
 800fc86:	4604      	mov	r4, r0
 800fc88:	9201      	str	r2, [sp, #4]
 800fc8a:	f001 fab1 	bl	80111f0 <ucdr_buffer_alignment>
 800fc8e:	4601      	mov	r1, r0
 800fc90:	4620      	mov	r0, r4
 800fc92:	f894 8015 	ldrb.w	r8, [r4, #21]
 800fc96:	f001 faef 	bl	8011278 <ucdr_advance_buffer>
 800fc9a:	2104      	movs	r1, #4
 800fc9c:	4620      	mov	r0, r4
 800fc9e:	f001 fa47 	bl	8011130 <ucdr_check_buffer_available_for>
 800fca2:	2800      	cmp	r0, #0
 800fca4:	d137      	bne.n	800fd16 <ucdr_serialize_endian_uint32_t+0x9a>
 800fca6:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800fcaa:	42b7      	cmp	r7, r6
 800fcac:	d92e      	bls.n	800fd0c <ucdr_serialize_endian_uint32_t+0x90>
 800fcae:	6923      	ldr	r3, [r4, #16]
 800fcb0:	60a7      	str	r7, [r4, #8]
 800fcb2:	1bbf      	subs	r7, r7, r6
 800fcb4:	443b      	add	r3, r7
 800fcb6:	f1c7 0904 	rsb	r9, r7, #4
 800fcba:	6123      	str	r3, [r4, #16]
 800fcbc:	4649      	mov	r1, r9
 800fcbe:	4620      	mov	r0, r4
 800fcc0:	f001 fa42 	bl	8011148 <ucdr_check_final_buffer_behavior>
 800fcc4:	2800      	cmp	r0, #0
 800fcc6:	d049      	beq.n	800fd5c <ucdr_serialize_endian_uint32_t+0xe0>
 800fcc8:	2d01      	cmp	r5, #1
 800fcca:	d05b      	beq.n	800fd84 <ucdr_serialize_endian_uint32_t+0x108>
 800fccc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800fcd0:	7033      	strb	r3, [r6, #0]
 800fcd2:	2f01      	cmp	r7, #1
 800fcd4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800fcd8:	7073      	strb	r3, [r6, #1]
 800fcda:	d04d      	beq.n	800fd78 <ucdr_serialize_endian_uint32_t+0xfc>
 800fcdc:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800fce0:	70b3      	strb	r3, [r6, #2]
 800fce2:	2f02      	cmp	r7, #2
 800fce4:	d04c      	beq.n	800fd80 <ucdr_serialize_endian_uint32_t+0x104>
 800fce6:	3603      	adds	r6, #3
 800fce8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800fcec:	7033      	strb	r3, [r6, #0]
 800fcee:	6923      	ldr	r3, [r4, #16]
 800fcf0:	68a2      	ldr	r2, [r4, #8]
 800fcf2:	7da0      	ldrb	r0, [r4, #22]
 800fcf4:	3304      	adds	r3, #4
 800fcf6:	444a      	add	r2, r9
 800fcf8:	1bdb      	subs	r3, r3, r7
 800fcfa:	2104      	movs	r1, #4
 800fcfc:	f080 0001 	eor.w	r0, r0, #1
 800fd00:	60a2      	str	r2, [r4, #8]
 800fd02:	6123      	str	r3, [r4, #16]
 800fd04:	7561      	strb	r1, [r4, #21]
 800fd06:	b003      	add	sp, #12
 800fd08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fd0c:	2104      	movs	r1, #4
 800fd0e:	4620      	mov	r0, r4
 800fd10:	f001 fa1a 	bl	8011148 <ucdr_check_final_buffer_behavior>
 800fd14:	b1c8      	cbz	r0, 800fd4a <ucdr_serialize_endian_uint32_t+0xce>
 800fd16:	2d01      	cmp	r5, #1
 800fd18:	68a3      	ldr	r3, [r4, #8]
 800fd1a:	d01c      	beq.n	800fd56 <ucdr_serialize_endian_uint32_t+0xda>
 800fd1c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800fd20:	701a      	strb	r2, [r3, #0]
 800fd22:	68a3      	ldr	r3, [r4, #8]
 800fd24:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800fd28:	705a      	strb	r2, [r3, #1]
 800fd2a:	68a3      	ldr	r3, [r4, #8]
 800fd2c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800fd30:	709a      	strb	r2, [r3, #2]
 800fd32:	68a3      	ldr	r3, [r4, #8]
 800fd34:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800fd38:	70da      	strb	r2, [r3, #3]
 800fd3a:	68a2      	ldr	r2, [r4, #8]
 800fd3c:	6923      	ldr	r3, [r4, #16]
 800fd3e:	3204      	adds	r2, #4
 800fd40:	3304      	adds	r3, #4
 800fd42:	2104      	movs	r1, #4
 800fd44:	60a2      	str	r2, [r4, #8]
 800fd46:	6123      	str	r3, [r4, #16]
 800fd48:	7561      	strb	r1, [r4, #21]
 800fd4a:	7da0      	ldrb	r0, [r4, #22]
 800fd4c:	f080 0001 	eor.w	r0, r0, #1
 800fd50:	b003      	add	sp, #12
 800fd52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fd56:	9a01      	ldr	r2, [sp, #4]
 800fd58:	601a      	str	r2, [r3, #0]
 800fd5a:	e7ee      	b.n	800fd3a <ucdr_serialize_endian_uint32_t+0xbe>
 800fd5c:	68a2      	ldr	r2, [r4, #8]
 800fd5e:	6923      	ldr	r3, [r4, #16]
 800fd60:	7da0      	ldrb	r0, [r4, #22]
 800fd62:	f884 8015 	strb.w	r8, [r4, #21]
 800fd66:	1bd2      	subs	r2, r2, r7
 800fd68:	1bdb      	subs	r3, r3, r7
 800fd6a:	f080 0001 	eor.w	r0, r0, #1
 800fd6e:	60a2      	str	r2, [r4, #8]
 800fd70:	6123      	str	r3, [r4, #16]
 800fd72:	b003      	add	sp, #12
 800fd74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fd78:	68a3      	ldr	r3, [r4, #8]
 800fd7a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800fd7e:	701a      	strb	r2, [r3, #0]
 800fd80:	68a6      	ldr	r6, [r4, #8]
 800fd82:	e7b1      	b.n	800fce8 <ucdr_serialize_endian_uint32_t+0x6c>
 800fd84:	ad01      	add	r5, sp, #4
 800fd86:	463a      	mov	r2, r7
 800fd88:	4629      	mov	r1, r5
 800fd8a:	4630      	mov	r0, r6
 800fd8c:	f00d fc15 	bl	801d5ba <memcpy>
 800fd90:	68a0      	ldr	r0, [r4, #8]
 800fd92:	464a      	mov	r2, r9
 800fd94:	19e9      	adds	r1, r5, r7
 800fd96:	f00d fc10 	bl	801d5ba <memcpy>
 800fd9a:	e7a8      	b.n	800fcee <ucdr_serialize_endian_uint32_t+0x72>

0800fd9c <ucdr_deserialize_uint32_t>:
 800fd9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fda0:	460d      	mov	r5, r1
 800fda2:	2104      	movs	r1, #4
 800fda4:	4604      	mov	r4, r0
 800fda6:	f001 fa23 	bl	80111f0 <ucdr_buffer_alignment>
 800fdaa:	4601      	mov	r1, r0
 800fdac:	4620      	mov	r0, r4
 800fdae:	f894 8015 	ldrb.w	r8, [r4, #21]
 800fdb2:	f001 fa61 	bl	8011278 <ucdr_advance_buffer>
 800fdb6:	2104      	movs	r1, #4
 800fdb8:	4620      	mov	r0, r4
 800fdba:	f001 f9b9 	bl	8011130 <ucdr_check_buffer_available_for>
 800fdbe:	b1d8      	cbz	r0, 800fdf8 <ucdr_deserialize_uint32_t+0x5c>
 800fdc0:	7d22      	ldrb	r2, [r4, #20]
 800fdc2:	68a3      	ldr	r3, [r4, #8]
 800fdc4:	2a01      	cmp	r2, #1
 800fdc6:	d052      	beq.n	800fe6e <ucdr_deserialize_uint32_t+0xd2>
 800fdc8:	78db      	ldrb	r3, [r3, #3]
 800fdca:	702b      	strb	r3, [r5, #0]
 800fdcc:	68a3      	ldr	r3, [r4, #8]
 800fdce:	789b      	ldrb	r3, [r3, #2]
 800fdd0:	706b      	strb	r3, [r5, #1]
 800fdd2:	68a3      	ldr	r3, [r4, #8]
 800fdd4:	785b      	ldrb	r3, [r3, #1]
 800fdd6:	70ab      	strb	r3, [r5, #2]
 800fdd8:	68a3      	ldr	r3, [r4, #8]
 800fdda:	781b      	ldrb	r3, [r3, #0]
 800fddc:	70eb      	strb	r3, [r5, #3]
 800fdde:	68a2      	ldr	r2, [r4, #8]
 800fde0:	6923      	ldr	r3, [r4, #16]
 800fde2:	3204      	adds	r2, #4
 800fde4:	3304      	adds	r3, #4
 800fde6:	2104      	movs	r1, #4
 800fde8:	60a2      	str	r2, [r4, #8]
 800fdea:	6123      	str	r3, [r4, #16]
 800fdec:	7561      	strb	r1, [r4, #21]
 800fdee:	7da0      	ldrb	r0, [r4, #22]
 800fdf0:	f080 0001 	eor.w	r0, r0, #1
 800fdf4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fdf8:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800fdfc:	42b7      	cmp	r7, r6
 800fdfe:	d92a      	bls.n	800fe56 <ucdr_deserialize_uint32_t+0xba>
 800fe00:	6923      	ldr	r3, [r4, #16]
 800fe02:	60a7      	str	r7, [r4, #8]
 800fe04:	1bbf      	subs	r7, r7, r6
 800fe06:	443b      	add	r3, r7
 800fe08:	f1c7 0904 	rsb	r9, r7, #4
 800fe0c:	6123      	str	r3, [r4, #16]
 800fe0e:	4649      	mov	r1, r9
 800fe10:	4620      	mov	r0, r4
 800fe12:	f001 f999 	bl	8011148 <ucdr_check_final_buffer_behavior>
 800fe16:	b368      	cbz	r0, 800fe74 <ucdr_deserialize_uint32_t+0xd8>
 800fe18:	7d23      	ldrb	r3, [r4, #20]
 800fe1a:	2b01      	cmp	r3, #1
 800fe1c:	d040      	beq.n	800fea0 <ucdr_deserialize_uint32_t+0x104>
 800fe1e:	78f3      	ldrb	r3, [r6, #3]
 800fe20:	702b      	strb	r3, [r5, #0]
 800fe22:	78b3      	ldrb	r3, [r6, #2]
 800fe24:	706b      	strb	r3, [r5, #1]
 800fe26:	2f01      	cmp	r7, #1
 800fe28:	d031      	beq.n	800fe8e <ucdr_deserialize_uint32_t+0xf2>
 800fe2a:	7873      	ldrb	r3, [r6, #1]
 800fe2c:	70ab      	strb	r3, [r5, #2]
 800fe2e:	2f02      	cmp	r7, #2
 800fe30:	f105 0503 	add.w	r5, r5, #3
 800fe34:	d02f      	beq.n	800fe96 <ucdr_deserialize_uint32_t+0xfa>
 800fe36:	7833      	ldrb	r3, [r6, #0]
 800fe38:	702b      	strb	r3, [r5, #0]
 800fe3a:	6923      	ldr	r3, [r4, #16]
 800fe3c:	68a2      	ldr	r2, [r4, #8]
 800fe3e:	7da0      	ldrb	r0, [r4, #22]
 800fe40:	2104      	movs	r1, #4
 800fe42:	3304      	adds	r3, #4
 800fe44:	444a      	add	r2, r9
 800fe46:	1bdb      	subs	r3, r3, r7
 800fe48:	7561      	strb	r1, [r4, #21]
 800fe4a:	60a2      	str	r2, [r4, #8]
 800fe4c:	6123      	str	r3, [r4, #16]
 800fe4e:	f080 0001 	eor.w	r0, r0, #1
 800fe52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fe56:	2104      	movs	r1, #4
 800fe58:	4620      	mov	r0, r4
 800fe5a:	f001 f975 	bl	8011148 <ucdr_check_final_buffer_behavior>
 800fe5e:	2800      	cmp	r0, #0
 800fe60:	d0c5      	beq.n	800fdee <ucdr_deserialize_uint32_t+0x52>
 800fe62:	7d23      	ldrb	r3, [r4, #20]
 800fe64:	68a2      	ldr	r2, [r4, #8]
 800fe66:	2b01      	cmp	r3, #1
 800fe68:	d017      	beq.n	800fe9a <ucdr_deserialize_uint32_t+0xfe>
 800fe6a:	78d3      	ldrb	r3, [r2, #3]
 800fe6c:	e7ad      	b.n	800fdca <ucdr_deserialize_uint32_t+0x2e>
 800fe6e:	681b      	ldr	r3, [r3, #0]
 800fe70:	602b      	str	r3, [r5, #0]
 800fe72:	e7b4      	b.n	800fdde <ucdr_deserialize_uint32_t+0x42>
 800fe74:	68a2      	ldr	r2, [r4, #8]
 800fe76:	6923      	ldr	r3, [r4, #16]
 800fe78:	7da0      	ldrb	r0, [r4, #22]
 800fe7a:	f884 8015 	strb.w	r8, [r4, #21]
 800fe7e:	1bd2      	subs	r2, r2, r7
 800fe80:	1bdb      	subs	r3, r3, r7
 800fe82:	60a2      	str	r2, [r4, #8]
 800fe84:	6123      	str	r3, [r4, #16]
 800fe86:	f080 0001 	eor.w	r0, r0, #1
 800fe8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fe8e:	68a3      	ldr	r3, [r4, #8]
 800fe90:	785b      	ldrb	r3, [r3, #1]
 800fe92:	70ab      	strb	r3, [r5, #2]
 800fe94:	3503      	adds	r5, #3
 800fe96:	68a6      	ldr	r6, [r4, #8]
 800fe98:	e7cd      	b.n	800fe36 <ucdr_deserialize_uint32_t+0x9a>
 800fe9a:	6813      	ldr	r3, [r2, #0]
 800fe9c:	602b      	str	r3, [r5, #0]
 800fe9e:	e79e      	b.n	800fdde <ucdr_deserialize_uint32_t+0x42>
 800fea0:	4631      	mov	r1, r6
 800fea2:	463a      	mov	r2, r7
 800fea4:	4628      	mov	r0, r5
 800fea6:	f00d fb88 	bl	801d5ba <memcpy>
 800feaa:	68a1      	ldr	r1, [r4, #8]
 800feac:	464a      	mov	r2, r9
 800feae:	19e8      	adds	r0, r5, r7
 800feb0:	f00d fb83 	bl	801d5ba <memcpy>
 800feb4:	e7c1      	b.n	800fe3a <ucdr_deserialize_uint32_t+0x9e>
 800feb6:	bf00      	nop

0800feb8 <ucdr_deserialize_endian_uint32_t>:
 800feb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800febc:	460e      	mov	r6, r1
 800febe:	2104      	movs	r1, #4
 800fec0:	4604      	mov	r4, r0
 800fec2:	4615      	mov	r5, r2
 800fec4:	f001 f994 	bl	80111f0 <ucdr_buffer_alignment>
 800fec8:	4601      	mov	r1, r0
 800feca:	4620      	mov	r0, r4
 800fecc:	f894 9015 	ldrb.w	r9, [r4, #21]
 800fed0:	f001 f9d2 	bl	8011278 <ucdr_advance_buffer>
 800fed4:	2104      	movs	r1, #4
 800fed6:	4620      	mov	r0, r4
 800fed8:	f001 f92a 	bl	8011130 <ucdr_check_buffer_available_for>
 800fedc:	2800      	cmp	r0, #0
 800fede:	d137      	bne.n	800ff50 <ucdr_deserialize_endian_uint32_t+0x98>
 800fee0:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800fee4:	42bb      	cmp	r3, r7
 800fee6:	d92e      	bls.n	800ff46 <ucdr_deserialize_endian_uint32_t+0x8e>
 800fee8:	eba3 0807 	sub.w	r8, r3, r7
 800feec:	60a3      	str	r3, [r4, #8]
 800feee:	6923      	ldr	r3, [r4, #16]
 800fef0:	f1c8 0a04 	rsb	sl, r8, #4
 800fef4:	4443      	add	r3, r8
 800fef6:	6123      	str	r3, [r4, #16]
 800fef8:	4651      	mov	r1, sl
 800fefa:	4620      	mov	r0, r4
 800fefc:	f001 f924 	bl	8011148 <ucdr_check_final_buffer_behavior>
 800ff00:	2800      	cmp	r0, #0
 800ff02:	d043      	beq.n	800ff8c <ucdr_deserialize_endian_uint32_t+0xd4>
 800ff04:	2e01      	cmp	r6, #1
 800ff06:	d056      	beq.n	800ffb6 <ucdr_deserialize_endian_uint32_t+0xfe>
 800ff08:	78fb      	ldrb	r3, [r7, #3]
 800ff0a:	702b      	strb	r3, [r5, #0]
 800ff0c:	78bb      	ldrb	r3, [r7, #2]
 800ff0e:	706b      	strb	r3, [r5, #1]
 800ff10:	f1b8 0f01 	cmp.w	r8, #1
 800ff14:	d049      	beq.n	800ffaa <ucdr_deserialize_endian_uint32_t+0xf2>
 800ff16:	787b      	ldrb	r3, [r7, #1]
 800ff18:	70ab      	strb	r3, [r5, #2]
 800ff1a:	f1b8 0f02 	cmp.w	r8, #2
 800ff1e:	f105 0503 	add.w	r5, r5, #3
 800ff22:	d046      	beq.n	800ffb2 <ucdr_deserialize_endian_uint32_t+0xfa>
 800ff24:	783b      	ldrb	r3, [r7, #0]
 800ff26:	702b      	strb	r3, [r5, #0]
 800ff28:	6923      	ldr	r3, [r4, #16]
 800ff2a:	68a2      	ldr	r2, [r4, #8]
 800ff2c:	7da0      	ldrb	r0, [r4, #22]
 800ff2e:	2104      	movs	r1, #4
 800ff30:	3304      	adds	r3, #4
 800ff32:	4452      	add	r2, sl
 800ff34:	eba3 0308 	sub.w	r3, r3, r8
 800ff38:	7561      	strb	r1, [r4, #21]
 800ff3a:	60a2      	str	r2, [r4, #8]
 800ff3c:	6123      	str	r3, [r4, #16]
 800ff3e:	f080 0001 	eor.w	r0, r0, #1
 800ff42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff46:	2104      	movs	r1, #4
 800ff48:	4620      	mov	r0, r4
 800ff4a:	f001 f8fd 	bl	8011148 <ucdr_check_final_buffer_behavior>
 800ff4e:	b1a8      	cbz	r0, 800ff7c <ucdr_deserialize_endian_uint32_t+0xc4>
 800ff50:	2e01      	cmp	r6, #1
 800ff52:	68a3      	ldr	r3, [r4, #8]
 800ff54:	d017      	beq.n	800ff86 <ucdr_deserialize_endian_uint32_t+0xce>
 800ff56:	78db      	ldrb	r3, [r3, #3]
 800ff58:	702b      	strb	r3, [r5, #0]
 800ff5a:	68a3      	ldr	r3, [r4, #8]
 800ff5c:	789b      	ldrb	r3, [r3, #2]
 800ff5e:	706b      	strb	r3, [r5, #1]
 800ff60:	68a3      	ldr	r3, [r4, #8]
 800ff62:	785b      	ldrb	r3, [r3, #1]
 800ff64:	70ab      	strb	r3, [r5, #2]
 800ff66:	68a3      	ldr	r3, [r4, #8]
 800ff68:	781b      	ldrb	r3, [r3, #0]
 800ff6a:	70eb      	strb	r3, [r5, #3]
 800ff6c:	68a2      	ldr	r2, [r4, #8]
 800ff6e:	6923      	ldr	r3, [r4, #16]
 800ff70:	3204      	adds	r2, #4
 800ff72:	3304      	adds	r3, #4
 800ff74:	2104      	movs	r1, #4
 800ff76:	60a2      	str	r2, [r4, #8]
 800ff78:	6123      	str	r3, [r4, #16]
 800ff7a:	7561      	strb	r1, [r4, #21]
 800ff7c:	7da0      	ldrb	r0, [r4, #22]
 800ff7e:	f080 0001 	eor.w	r0, r0, #1
 800ff82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff86:	681b      	ldr	r3, [r3, #0]
 800ff88:	602b      	str	r3, [r5, #0]
 800ff8a:	e7ef      	b.n	800ff6c <ucdr_deserialize_endian_uint32_t+0xb4>
 800ff8c:	68a2      	ldr	r2, [r4, #8]
 800ff8e:	6923      	ldr	r3, [r4, #16]
 800ff90:	7da0      	ldrb	r0, [r4, #22]
 800ff92:	f884 9015 	strb.w	r9, [r4, #21]
 800ff96:	eba2 0208 	sub.w	r2, r2, r8
 800ff9a:	eba3 0308 	sub.w	r3, r3, r8
 800ff9e:	60a2      	str	r2, [r4, #8]
 800ffa0:	6123      	str	r3, [r4, #16]
 800ffa2:	f080 0001 	eor.w	r0, r0, #1
 800ffa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ffaa:	68a3      	ldr	r3, [r4, #8]
 800ffac:	785b      	ldrb	r3, [r3, #1]
 800ffae:	70ab      	strb	r3, [r5, #2]
 800ffb0:	3503      	adds	r5, #3
 800ffb2:	68a7      	ldr	r7, [r4, #8]
 800ffb4:	e7b6      	b.n	800ff24 <ucdr_deserialize_endian_uint32_t+0x6c>
 800ffb6:	4639      	mov	r1, r7
 800ffb8:	4642      	mov	r2, r8
 800ffba:	4628      	mov	r0, r5
 800ffbc:	f00d fafd 	bl	801d5ba <memcpy>
 800ffc0:	68a1      	ldr	r1, [r4, #8]
 800ffc2:	4652      	mov	r2, sl
 800ffc4:	eb05 0008 	add.w	r0, r5, r8
 800ffc8:	f00d faf7 	bl	801d5ba <memcpy>
 800ffcc:	e7ac      	b.n	800ff28 <ucdr_deserialize_endian_uint32_t+0x70>
 800ffce:	bf00      	nop

0800ffd0 <ucdr_serialize_uint64_t>:
 800ffd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ffd4:	2108      	movs	r1, #8
 800ffd6:	b082      	sub	sp, #8
 800ffd8:	4604      	mov	r4, r0
 800ffda:	e9cd 2300 	strd	r2, r3, [sp]
 800ffde:	f001 f907 	bl	80111f0 <ucdr_buffer_alignment>
 800ffe2:	4601      	mov	r1, r0
 800ffe4:	4620      	mov	r0, r4
 800ffe6:	7d67      	ldrb	r7, [r4, #21]
 800ffe8:	f001 f946 	bl	8011278 <ucdr_advance_buffer>
 800ffec:	2108      	movs	r1, #8
 800ffee:	4620      	mov	r0, r4
 800fff0:	f001 f89e 	bl	8011130 <ucdr_check_buffer_available_for>
 800fff4:	2800      	cmp	r0, #0
 800fff6:	d14d      	bne.n	8010094 <ucdr_serialize_uint64_t+0xc4>
 800fff8:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800fffc:	42ab      	cmp	r3, r5
 800fffe:	d944      	bls.n	801008a <ucdr_serialize_uint64_t+0xba>
 8010000:	1b5e      	subs	r6, r3, r5
 8010002:	60a3      	str	r3, [r4, #8]
 8010004:	6923      	ldr	r3, [r4, #16]
 8010006:	f1c6 0808 	rsb	r8, r6, #8
 801000a:	4433      	add	r3, r6
 801000c:	6123      	str	r3, [r4, #16]
 801000e:	4641      	mov	r1, r8
 8010010:	4620      	mov	r0, r4
 8010012:	f001 f899 	bl	8011148 <ucdr_check_final_buffer_behavior>
 8010016:	2800      	cmp	r0, #0
 8010018:	d072      	beq.n	8010100 <ucdr_serialize_uint64_t+0x130>
 801001a:	7d23      	ldrb	r3, [r4, #20]
 801001c:	2b01      	cmp	r3, #1
 801001e:	f000 8092 	beq.w	8010146 <ucdr_serialize_uint64_t+0x176>
 8010022:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010026:	702b      	strb	r3, [r5, #0]
 8010028:	2e01      	cmp	r6, #1
 801002a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801002e:	706b      	strb	r3, [r5, #1]
 8010030:	d073      	beq.n	801011a <ucdr_serialize_uint64_t+0x14a>
 8010032:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8010036:	70ab      	strb	r3, [r5, #2]
 8010038:	2e02      	cmp	r6, #2
 801003a:	d072      	beq.n	8010122 <ucdr_serialize_uint64_t+0x152>
 801003c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8010040:	70eb      	strb	r3, [r5, #3]
 8010042:	2e03      	cmp	r6, #3
 8010044:	d071      	beq.n	801012a <ucdr_serialize_uint64_t+0x15a>
 8010046:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801004a:	712b      	strb	r3, [r5, #4]
 801004c:	2e04      	cmp	r6, #4
 801004e:	d070      	beq.n	8010132 <ucdr_serialize_uint64_t+0x162>
 8010050:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8010054:	716b      	strb	r3, [r5, #5]
 8010056:	2e05      	cmp	r6, #5
 8010058:	d06f      	beq.n	801013a <ucdr_serialize_uint64_t+0x16a>
 801005a:	f89d 3001 	ldrb.w	r3, [sp, #1]
 801005e:	71ab      	strb	r3, [r5, #6]
 8010060:	2e06      	cmp	r6, #6
 8010062:	d06e      	beq.n	8010142 <ucdr_serialize_uint64_t+0x172>
 8010064:	3507      	adds	r5, #7
 8010066:	f89d 3000 	ldrb.w	r3, [sp]
 801006a:	702b      	strb	r3, [r5, #0]
 801006c:	6923      	ldr	r3, [r4, #16]
 801006e:	68a2      	ldr	r2, [r4, #8]
 8010070:	7da0      	ldrb	r0, [r4, #22]
 8010072:	3308      	adds	r3, #8
 8010074:	4442      	add	r2, r8
 8010076:	1b9b      	subs	r3, r3, r6
 8010078:	2108      	movs	r1, #8
 801007a:	f080 0001 	eor.w	r0, r0, #1
 801007e:	60a2      	str	r2, [r4, #8]
 8010080:	6123      	str	r3, [r4, #16]
 8010082:	7561      	strb	r1, [r4, #21]
 8010084:	b002      	add	sp, #8
 8010086:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801008a:	2108      	movs	r1, #8
 801008c:	4620      	mov	r0, r4
 801008e:	f001 f85b 	bl	8011148 <ucdr_check_final_buffer_behavior>
 8010092:	b350      	cbz	r0, 80100ea <ucdr_serialize_uint64_t+0x11a>
 8010094:	7d22      	ldrb	r2, [r4, #20]
 8010096:	68a3      	ldr	r3, [r4, #8]
 8010098:	2a01      	cmp	r2, #1
 801009a:	d02c      	beq.n	80100f6 <ucdr_serialize_uint64_t+0x126>
 801009c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80100a0:	701a      	strb	r2, [r3, #0]
 80100a2:	68a3      	ldr	r3, [r4, #8]
 80100a4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80100a8:	705a      	strb	r2, [r3, #1]
 80100aa:	68a3      	ldr	r3, [r4, #8]
 80100ac:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80100b0:	709a      	strb	r2, [r3, #2]
 80100b2:	68a3      	ldr	r3, [r4, #8]
 80100b4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80100b8:	70da      	strb	r2, [r3, #3]
 80100ba:	68a3      	ldr	r3, [r4, #8]
 80100bc:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80100c0:	711a      	strb	r2, [r3, #4]
 80100c2:	68a3      	ldr	r3, [r4, #8]
 80100c4:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80100c8:	715a      	strb	r2, [r3, #5]
 80100ca:	68a3      	ldr	r3, [r4, #8]
 80100cc:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80100d0:	719a      	strb	r2, [r3, #6]
 80100d2:	68a3      	ldr	r3, [r4, #8]
 80100d4:	f89d 2000 	ldrb.w	r2, [sp]
 80100d8:	71da      	strb	r2, [r3, #7]
 80100da:	68a2      	ldr	r2, [r4, #8]
 80100dc:	6923      	ldr	r3, [r4, #16]
 80100de:	3208      	adds	r2, #8
 80100e0:	3308      	adds	r3, #8
 80100e2:	2108      	movs	r1, #8
 80100e4:	60a2      	str	r2, [r4, #8]
 80100e6:	6123      	str	r3, [r4, #16]
 80100e8:	7561      	strb	r1, [r4, #21]
 80100ea:	7da0      	ldrb	r0, [r4, #22]
 80100ec:	f080 0001 	eor.w	r0, r0, #1
 80100f0:	b002      	add	sp, #8
 80100f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80100f6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80100fa:	6019      	str	r1, [r3, #0]
 80100fc:	605a      	str	r2, [r3, #4]
 80100fe:	e7ec      	b.n	80100da <ucdr_serialize_uint64_t+0x10a>
 8010100:	68a2      	ldr	r2, [r4, #8]
 8010102:	6923      	ldr	r3, [r4, #16]
 8010104:	7da0      	ldrb	r0, [r4, #22]
 8010106:	7567      	strb	r7, [r4, #21]
 8010108:	1b92      	subs	r2, r2, r6
 801010a:	1b9b      	subs	r3, r3, r6
 801010c:	f080 0001 	eor.w	r0, r0, #1
 8010110:	60a2      	str	r2, [r4, #8]
 8010112:	6123      	str	r3, [r4, #16]
 8010114:	b002      	add	sp, #8
 8010116:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801011a:	68a3      	ldr	r3, [r4, #8]
 801011c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8010120:	701a      	strb	r2, [r3, #0]
 8010122:	68a3      	ldr	r3, [r4, #8]
 8010124:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8010128:	701a      	strb	r2, [r3, #0]
 801012a:	68a3      	ldr	r3, [r4, #8]
 801012c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8010130:	701a      	strb	r2, [r3, #0]
 8010132:	68a3      	ldr	r3, [r4, #8]
 8010134:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8010138:	701a      	strb	r2, [r3, #0]
 801013a:	68a3      	ldr	r3, [r4, #8]
 801013c:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8010140:	701a      	strb	r2, [r3, #0]
 8010142:	68a5      	ldr	r5, [r4, #8]
 8010144:	e78f      	b.n	8010066 <ucdr_serialize_uint64_t+0x96>
 8010146:	4628      	mov	r0, r5
 8010148:	466d      	mov	r5, sp
 801014a:	4632      	mov	r2, r6
 801014c:	4629      	mov	r1, r5
 801014e:	f00d fa34 	bl	801d5ba <memcpy>
 8010152:	68a0      	ldr	r0, [r4, #8]
 8010154:	4642      	mov	r2, r8
 8010156:	19a9      	adds	r1, r5, r6
 8010158:	f00d fa2f 	bl	801d5ba <memcpy>
 801015c:	e786      	b.n	801006c <ucdr_serialize_uint64_t+0x9c>
 801015e:	bf00      	nop

08010160 <ucdr_serialize_int16_t>:
 8010160:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010164:	b082      	sub	sp, #8
 8010166:	460b      	mov	r3, r1
 8010168:	2102      	movs	r1, #2
 801016a:	4604      	mov	r4, r0
 801016c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8010170:	f001 f83e 	bl	80111f0 <ucdr_buffer_alignment>
 8010174:	4601      	mov	r1, r0
 8010176:	4620      	mov	r0, r4
 8010178:	7d67      	ldrb	r7, [r4, #21]
 801017a:	f001 f87d 	bl	8011278 <ucdr_advance_buffer>
 801017e:	2102      	movs	r1, #2
 8010180:	4620      	mov	r0, r4
 8010182:	f000 ffd5 	bl	8011130 <ucdr_check_buffer_available_for>
 8010186:	b1c0      	cbz	r0, 80101ba <ucdr_serialize_int16_t+0x5a>
 8010188:	7d22      	ldrb	r2, [r4, #20]
 801018a:	68a3      	ldr	r3, [r4, #8]
 801018c:	2a01      	cmp	r2, #1
 801018e:	d04e      	beq.n	801022e <ucdr_serialize_int16_t+0xce>
 8010190:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8010194:	701a      	strb	r2, [r3, #0]
 8010196:	68a3      	ldr	r3, [r4, #8]
 8010198:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801019c:	705a      	strb	r2, [r3, #1]
 801019e:	68a2      	ldr	r2, [r4, #8]
 80101a0:	6923      	ldr	r3, [r4, #16]
 80101a2:	3202      	adds	r2, #2
 80101a4:	3302      	adds	r3, #2
 80101a6:	2102      	movs	r1, #2
 80101a8:	60a2      	str	r2, [r4, #8]
 80101aa:	6123      	str	r3, [r4, #16]
 80101ac:	7561      	strb	r1, [r4, #21]
 80101ae:	7da0      	ldrb	r0, [r4, #22]
 80101b0:	f080 0001 	eor.w	r0, r0, #1
 80101b4:	b002      	add	sp, #8
 80101b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80101ba:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80101be:	42ab      	cmp	r3, r5
 80101c0:	d923      	bls.n	801020a <ucdr_serialize_int16_t+0xaa>
 80101c2:	1b5e      	subs	r6, r3, r5
 80101c4:	60a3      	str	r3, [r4, #8]
 80101c6:	6923      	ldr	r3, [r4, #16]
 80101c8:	f1c6 0802 	rsb	r8, r6, #2
 80101cc:	4433      	add	r3, r6
 80101ce:	6123      	str	r3, [r4, #16]
 80101d0:	4641      	mov	r1, r8
 80101d2:	4620      	mov	r0, r4
 80101d4:	f000 ffb8 	bl	8011148 <ucdr_check_final_buffer_behavior>
 80101d8:	b368      	cbz	r0, 8010236 <ucdr_serialize_int16_t+0xd6>
 80101da:	7d23      	ldrb	r3, [r4, #20]
 80101dc:	2b01      	cmp	r3, #1
 80101de:	d03b      	beq.n	8010258 <ucdr_serialize_int16_t+0xf8>
 80101e0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80101e4:	702b      	strb	r3, [r5, #0]
 80101e6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80101ea:	706b      	strb	r3, [r5, #1]
 80101ec:	6923      	ldr	r3, [r4, #16]
 80101ee:	68a2      	ldr	r2, [r4, #8]
 80101f0:	7da0      	ldrb	r0, [r4, #22]
 80101f2:	3302      	adds	r3, #2
 80101f4:	4442      	add	r2, r8
 80101f6:	1b9b      	subs	r3, r3, r6
 80101f8:	2102      	movs	r1, #2
 80101fa:	f080 0001 	eor.w	r0, r0, #1
 80101fe:	60a2      	str	r2, [r4, #8]
 8010200:	6123      	str	r3, [r4, #16]
 8010202:	7561      	strb	r1, [r4, #21]
 8010204:	b002      	add	sp, #8
 8010206:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801020a:	2102      	movs	r1, #2
 801020c:	4620      	mov	r0, r4
 801020e:	f000 ff9b 	bl	8011148 <ucdr_check_final_buffer_behavior>
 8010212:	2800      	cmp	r0, #0
 8010214:	d0cb      	beq.n	80101ae <ucdr_serialize_int16_t+0x4e>
 8010216:	7d23      	ldrb	r3, [r4, #20]
 8010218:	68a2      	ldr	r2, [r4, #8]
 801021a:	2b01      	cmp	r3, #1
 801021c:	d018      	beq.n	8010250 <ucdr_serialize_int16_t+0xf0>
 801021e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010222:	7013      	strb	r3, [r2, #0]
 8010224:	68a3      	ldr	r3, [r4, #8]
 8010226:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801022a:	705a      	strb	r2, [r3, #1]
 801022c:	e7b7      	b.n	801019e <ucdr_serialize_int16_t+0x3e>
 801022e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8010232:	801a      	strh	r2, [r3, #0]
 8010234:	e7b3      	b.n	801019e <ucdr_serialize_int16_t+0x3e>
 8010236:	68a2      	ldr	r2, [r4, #8]
 8010238:	6923      	ldr	r3, [r4, #16]
 801023a:	7da0      	ldrb	r0, [r4, #22]
 801023c:	7567      	strb	r7, [r4, #21]
 801023e:	1b92      	subs	r2, r2, r6
 8010240:	1b9b      	subs	r3, r3, r6
 8010242:	f080 0001 	eor.w	r0, r0, #1
 8010246:	60a2      	str	r2, [r4, #8]
 8010248:	6123      	str	r3, [r4, #16]
 801024a:	b002      	add	sp, #8
 801024c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010250:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8010254:	8013      	strh	r3, [r2, #0]
 8010256:	e7a2      	b.n	801019e <ucdr_serialize_int16_t+0x3e>
 8010258:	4628      	mov	r0, r5
 801025a:	f10d 0506 	add.w	r5, sp, #6
 801025e:	4632      	mov	r2, r6
 8010260:	4629      	mov	r1, r5
 8010262:	f00d f9aa 	bl	801d5ba <memcpy>
 8010266:	68a0      	ldr	r0, [r4, #8]
 8010268:	4642      	mov	r2, r8
 801026a:	19a9      	adds	r1, r5, r6
 801026c:	f00d f9a5 	bl	801d5ba <memcpy>
 8010270:	e7bc      	b.n	80101ec <ucdr_serialize_int16_t+0x8c>
 8010272:	bf00      	nop

08010274 <ucdr_deserialize_int16_t>:
 8010274:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010278:	460d      	mov	r5, r1
 801027a:	2102      	movs	r1, #2
 801027c:	4604      	mov	r4, r0
 801027e:	f000 ffb7 	bl	80111f0 <ucdr_buffer_alignment>
 8010282:	4601      	mov	r1, r0
 8010284:	4620      	mov	r0, r4
 8010286:	f894 8015 	ldrb.w	r8, [r4, #21]
 801028a:	f000 fff5 	bl	8011278 <ucdr_advance_buffer>
 801028e:	2102      	movs	r1, #2
 8010290:	4620      	mov	r0, r4
 8010292:	f000 ff4d 	bl	8011130 <ucdr_check_buffer_available_for>
 8010296:	b1a8      	cbz	r0, 80102c4 <ucdr_deserialize_int16_t+0x50>
 8010298:	7d22      	ldrb	r2, [r4, #20]
 801029a:	68a3      	ldr	r3, [r4, #8]
 801029c:	2a01      	cmp	r2, #1
 801029e:	d046      	beq.n	801032e <ucdr_deserialize_int16_t+0xba>
 80102a0:	785b      	ldrb	r3, [r3, #1]
 80102a2:	702b      	strb	r3, [r5, #0]
 80102a4:	68a3      	ldr	r3, [r4, #8]
 80102a6:	781b      	ldrb	r3, [r3, #0]
 80102a8:	706b      	strb	r3, [r5, #1]
 80102aa:	68a2      	ldr	r2, [r4, #8]
 80102ac:	6923      	ldr	r3, [r4, #16]
 80102ae:	3202      	adds	r2, #2
 80102b0:	3302      	adds	r3, #2
 80102b2:	2102      	movs	r1, #2
 80102b4:	60a2      	str	r2, [r4, #8]
 80102b6:	6123      	str	r3, [r4, #16]
 80102b8:	7561      	strb	r1, [r4, #21]
 80102ba:	7da0      	ldrb	r0, [r4, #22]
 80102bc:	f080 0001 	eor.w	r0, r0, #1
 80102c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80102c4:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 80102c8:	42be      	cmp	r6, r7
 80102ca:	d920      	bls.n	801030e <ucdr_deserialize_int16_t+0x9a>
 80102cc:	6923      	ldr	r3, [r4, #16]
 80102ce:	60a6      	str	r6, [r4, #8]
 80102d0:	1bf6      	subs	r6, r6, r7
 80102d2:	4433      	add	r3, r6
 80102d4:	f1c6 0902 	rsb	r9, r6, #2
 80102d8:	6123      	str	r3, [r4, #16]
 80102da:	4649      	mov	r1, r9
 80102dc:	4620      	mov	r0, r4
 80102de:	f000 ff33 	bl	8011148 <ucdr_check_final_buffer_behavior>
 80102e2:	b338      	cbz	r0, 8010334 <ucdr_deserialize_int16_t+0xc0>
 80102e4:	7d23      	ldrb	r3, [r4, #20]
 80102e6:	2b01      	cmp	r3, #1
 80102e8:	d034      	beq.n	8010354 <ucdr_deserialize_int16_t+0xe0>
 80102ea:	787b      	ldrb	r3, [r7, #1]
 80102ec:	702b      	strb	r3, [r5, #0]
 80102ee:	783b      	ldrb	r3, [r7, #0]
 80102f0:	706b      	strb	r3, [r5, #1]
 80102f2:	6923      	ldr	r3, [r4, #16]
 80102f4:	68a2      	ldr	r2, [r4, #8]
 80102f6:	7da0      	ldrb	r0, [r4, #22]
 80102f8:	2102      	movs	r1, #2
 80102fa:	3302      	adds	r3, #2
 80102fc:	444a      	add	r2, r9
 80102fe:	1b9b      	subs	r3, r3, r6
 8010300:	7561      	strb	r1, [r4, #21]
 8010302:	60a2      	str	r2, [r4, #8]
 8010304:	6123      	str	r3, [r4, #16]
 8010306:	f080 0001 	eor.w	r0, r0, #1
 801030a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801030e:	2102      	movs	r1, #2
 8010310:	4620      	mov	r0, r4
 8010312:	f000 ff19 	bl	8011148 <ucdr_check_final_buffer_behavior>
 8010316:	2800      	cmp	r0, #0
 8010318:	d0cf      	beq.n	80102ba <ucdr_deserialize_int16_t+0x46>
 801031a:	7d23      	ldrb	r3, [r4, #20]
 801031c:	68a2      	ldr	r2, [r4, #8]
 801031e:	2b01      	cmp	r3, #1
 8010320:	d015      	beq.n	801034e <ucdr_deserialize_int16_t+0xda>
 8010322:	7853      	ldrb	r3, [r2, #1]
 8010324:	702b      	strb	r3, [r5, #0]
 8010326:	68a3      	ldr	r3, [r4, #8]
 8010328:	781b      	ldrb	r3, [r3, #0]
 801032a:	706b      	strb	r3, [r5, #1]
 801032c:	e7bd      	b.n	80102aa <ucdr_deserialize_int16_t+0x36>
 801032e:	881b      	ldrh	r3, [r3, #0]
 8010330:	802b      	strh	r3, [r5, #0]
 8010332:	e7ba      	b.n	80102aa <ucdr_deserialize_int16_t+0x36>
 8010334:	68a2      	ldr	r2, [r4, #8]
 8010336:	6923      	ldr	r3, [r4, #16]
 8010338:	7da0      	ldrb	r0, [r4, #22]
 801033a:	f884 8015 	strb.w	r8, [r4, #21]
 801033e:	1b92      	subs	r2, r2, r6
 8010340:	1b9b      	subs	r3, r3, r6
 8010342:	60a2      	str	r2, [r4, #8]
 8010344:	6123      	str	r3, [r4, #16]
 8010346:	f080 0001 	eor.w	r0, r0, #1
 801034a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801034e:	8813      	ldrh	r3, [r2, #0]
 8010350:	802b      	strh	r3, [r5, #0]
 8010352:	e7aa      	b.n	80102aa <ucdr_deserialize_int16_t+0x36>
 8010354:	4639      	mov	r1, r7
 8010356:	4632      	mov	r2, r6
 8010358:	4628      	mov	r0, r5
 801035a:	f00d f92e 	bl	801d5ba <memcpy>
 801035e:	68a1      	ldr	r1, [r4, #8]
 8010360:	464a      	mov	r2, r9
 8010362:	19a8      	adds	r0, r5, r6
 8010364:	f00d f929 	bl	801d5ba <memcpy>
 8010368:	e7c3      	b.n	80102f2 <ucdr_deserialize_int16_t+0x7e>
 801036a:	bf00      	nop

0801036c <ucdr_serialize_int32_t>:
 801036c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010370:	b082      	sub	sp, #8
 8010372:	4604      	mov	r4, r0
 8010374:	9101      	str	r1, [sp, #4]
 8010376:	2104      	movs	r1, #4
 8010378:	f000 ff3a 	bl	80111f0 <ucdr_buffer_alignment>
 801037c:	4601      	mov	r1, r0
 801037e:	4620      	mov	r0, r4
 8010380:	7d67      	ldrb	r7, [r4, #21]
 8010382:	f000 ff79 	bl	8011278 <ucdr_advance_buffer>
 8010386:	2104      	movs	r1, #4
 8010388:	4620      	mov	r0, r4
 801038a:	f000 fed1 	bl	8011130 <ucdr_check_buffer_available_for>
 801038e:	b300      	cbz	r0, 80103d2 <ucdr_serialize_int32_t+0x66>
 8010390:	7d22      	ldrb	r2, [r4, #20]
 8010392:	68a3      	ldr	r3, [r4, #8]
 8010394:	2a01      	cmp	r2, #1
 8010396:	d05d      	beq.n	8010454 <ucdr_serialize_int32_t+0xe8>
 8010398:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801039c:	701a      	strb	r2, [r3, #0]
 801039e:	68a3      	ldr	r3, [r4, #8]
 80103a0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80103a4:	705a      	strb	r2, [r3, #1]
 80103a6:	68a3      	ldr	r3, [r4, #8]
 80103a8:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80103ac:	709a      	strb	r2, [r3, #2]
 80103ae:	68a3      	ldr	r3, [r4, #8]
 80103b0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80103b4:	70da      	strb	r2, [r3, #3]
 80103b6:	68a2      	ldr	r2, [r4, #8]
 80103b8:	6923      	ldr	r3, [r4, #16]
 80103ba:	3204      	adds	r2, #4
 80103bc:	3304      	adds	r3, #4
 80103be:	2104      	movs	r1, #4
 80103c0:	60a2      	str	r2, [r4, #8]
 80103c2:	6123      	str	r3, [r4, #16]
 80103c4:	7561      	strb	r1, [r4, #21]
 80103c6:	7da0      	ldrb	r0, [r4, #22]
 80103c8:	f080 0001 	eor.w	r0, r0, #1
 80103cc:	b002      	add	sp, #8
 80103ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80103d2:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80103d6:	42ab      	cmp	r3, r5
 80103d8:	d92e      	bls.n	8010438 <ucdr_serialize_int32_t+0xcc>
 80103da:	1b5e      	subs	r6, r3, r5
 80103dc:	60a3      	str	r3, [r4, #8]
 80103de:	6923      	ldr	r3, [r4, #16]
 80103e0:	f1c6 0804 	rsb	r8, r6, #4
 80103e4:	4433      	add	r3, r6
 80103e6:	6123      	str	r3, [r4, #16]
 80103e8:	4641      	mov	r1, r8
 80103ea:	4620      	mov	r0, r4
 80103ec:	f000 feac 	bl	8011148 <ucdr_check_final_buffer_behavior>
 80103f0:	b398      	cbz	r0, 801045a <ucdr_serialize_int32_t+0xee>
 80103f2:	7d23      	ldrb	r3, [r4, #20]
 80103f4:	2b01      	cmp	r3, #1
 80103f6:	d046      	beq.n	8010486 <ucdr_serialize_int32_t+0x11a>
 80103f8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80103fc:	702b      	strb	r3, [r5, #0]
 80103fe:	2e01      	cmp	r6, #1
 8010400:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8010404:	706b      	strb	r3, [r5, #1]
 8010406:	d035      	beq.n	8010474 <ucdr_serialize_int32_t+0x108>
 8010408:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801040c:	70ab      	strb	r3, [r5, #2]
 801040e:	2e02      	cmp	r6, #2
 8010410:	d034      	beq.n	801047c <ucdr_serialize_int32_t+0x110>
 8010412:	3503      	adds	r5, #3
 8010414:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8010418:	702b      	strb	r3, [r5, #0]
 801041a:	6923      	ldr	r3, [r4, #16]
 801041c:	68a2      	ldr	r2, [r4, #8]
 801041e:	7da0      	ldrb	r0, [r4, #22]
 8010420:	3304      	adds	r3, #4
 8010422:	4442      	add	r2, r8
 8010424:	1b9b      	subs	r3, r3, r6
 8010426:	2104      	movs	r1, #4
 8010428:	f080 0001 	eor.w	r0, r0, #1
 801042c:	60a2      	str	r2, [r4, #8]
 801042e:	6123      	str	r3, [r4, #16]
 8010430:	7561      	strb	r1, [r4, #21]
 8010432:	b002      	add	sp, #8
 8010434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010438:	2104      	movs	r1, #4
 801043a:	4620      	mov	r0, r4
 801043c:	f000 fe84 	bl	8011148 <ucdr_check_final_buffer_behavior>
 8010440:	2800      	cmp	r0, #0
 8010442:	d0c0      	beq.n	80103c6 <ucdr_serialize_int32_t+0x5a>
 8010444:	7d23      	ldrb	r3, [r4, #20]
 8010446:	68a2      	ldr	r2, [r4, #8]
 8010448:	2b01      	cmp	r3, #1
 801044a:	d019      	beq.n	8010480 <ucdr_serialize_int32_t+0x114>
 801044c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010450:	7013      	strb	r3, [r2, #0]
 8010452:	e7a4      	b.n	801039e <ucdr_serialize_int32_t+0x32>
 8010454:	9a01      	ldr	r2, [sp, #4]
 8010456:	601a      	str	r2, [r3, #0]
 8010458:	e7ad      	b.n	80103b6 <ucdr_serialize_int32_t+0x4a>
 801045a:	68a2      	ldr	r2, [r4, #8]
 801045c:	6923      	ldr	r3, [r4, #16]
 801045e:	7da0      	ldrb	r0, [r4, #22]
 8010460:	7567      	strb	r7, [r4, #21]
 8010462:	1b92      	subs	r2, r2, r6
 8010464:	1b9b      	subs	r3, r3, r6
 8010466:	f080 0001 	eor.w	r0, r0, #1
 801046a:	60a2      	str	r2, [r4, #8]
 801046c:	6123      	str	r3, [r4, #16]
 801046e:	b002      	add	sp, #8
 8010470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010474:	68a3      	ldr	r3, [r4, #8]
 8010476:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801047a:	701a      	strb	r2, [r3, #0]
 801047c:	68a5      	ldr	r5, [r4, #8]
 801047e:	e7c9      	b.n	8010414 <ucdr_serialize_int32_t+0xa8>
 8010480:	9b01      	ldr	r3, [sp, #4]
 8010482:	6013      	str	r3, [r2, #0]
 8010484:	e797      	b.n	80103b6 <ucdr_serialize_int32_t+0x4a>
 8010486:	4628      	mov	r0, r5
 8010488:	ad01      	add	r5, sp, #4
 801048a:	4632      	mov	r2, r6
 801048c:	4629      	mov	r1, r5
 801048e:	f00d f894 	bl	801d5ba <memcpy>
 8010492:	68a0      	ldr	r0, [r4, #8]
 8010494:	4642      	mov	r2, r8
 8010496:	19a9      	adds	r1, r5, r6
 8010498:	f00d f88f 	bl	801d5ba <memcpy>
 801049c:	e7bd      	b.n	801041a <ucdr_serialize_int32_t+0xae>
 801049e:	bf00      	nop

080104a0 <ucdr_deserialize_int32_t>:
 80104a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80104a4:	460d      	mov	r5, r1
 80104a6:	2104      	movs	r1, #4
 80104a8:	4604      	mov	r4, r0
 80104aa:	f000 fea1 	bl	80111f0 <ucdr_buffer_alignment>
 80104ae:	4601      	mov	r1, r0
 80104b0:	4620      	mov	r0, r4
 80104b2:	f894 8015 	ldrb.w	r8, [r4, #21]
 80104b6:	f000 fedf 	bl	8011278 <ucdr_advance_buffer>
 80104ba:	2104      	movs	r1, #4
 80104bc:	4620      	mov	r0, r4
 80104be:	f000 fe37 	bl	8011130 <ucdr_check_buffer_available_for>
 80104c2:	b1d8      	cbz	r0, 80104fc <ucdr_deserialize_int32_t+0x5c>
 80104c4:	7d22      	ldrb	r2, [r4, #20]
 80104c6:	68a3      	ldr	r3, [r4, #8]
 80104c8:	2a01      	cmp	r2, #1
 80104ca:	d052      	beq.n	8010572 <ucdr_deserialize_int32_t+0xd2>
 80104cc:	78db      	ldrb	r3, [r3, #3]
 80104ce:	702b      	strb	r3, [r5, #0]
 80104d0:	68a3      	ldr	r3, [r4, #8]
 80104d2:	789b      	ldrb	r3, [r3, #2]
 80104d4:	706b      	strb	r3, [r5, #1]
 80104d6:	68a3      	ldr	r3, [r4, #8]
 80104d8:	785b      	ldrb	r3, [r3, #1]
 80104da:	70ab      	strb	r3, [r5, #2]
 80104dc:	68a3      	ldr	r3, [r4, #8]
 80104de:	781b      	ldrb	r3, [r3, #0]
 80104e0:	70eb      	strb	r3, [r5, #3]
 80104e2:	68a2      	ldr	r2, [r4, #8]
 80104e4:	6923      	ldr	r3, [r4, #16]
 80104e6:	3204      	adds	r2, #4
 80104e8:	3304      	adds	r3, #4
 80104ea:	2104      	movs	r1, #4
 80104ec:	60a2      	str	r2, [r4, #8]
 80104ee:	6123      	str	r3, [r4, #16]
 80104f0:	7561      	strb	r1, [r4, #21]
 80104f2:	7da0      	ldrb	r0, [r4, #22]
 80104f4:	f080 0001 	eor.w	r0, r0, #1
 80104f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80104fc:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8010500:	42b7      	cmp	r7, r6
 8010502:	d92a      	bls.n	801055a <ucdr_deserialize_int32_t+0xba>
 8010504:	6923      	ldr	r3, [r4, #16]
 8010506:	60a7      	str	r7, [r4, #8]
 8010508:	1bbf      	subs	r7, r7, r6
 801050a:	443b      	add	r3, r7
 801050c:	f1c7 0904 	rsb	r9, r7, #4
 8010510:	6123      	str	r3, [r4, #16]
 8010512:	4649      	mov	r1, r9
 8010514:	4620      	mov	r0, r4
 8010516:	f000 fe17 	bl	8011148 <ucdr_check_final_buffer_behavior>
 801051a:	b368      	cbz	r0, 8010578 <ucdr_deserialize_int32_t+0xd8>
 801051c:	7d23      	ldrb	r3, [r4, #20]
 801051e:	2b01      	cmp	r3, #1
 8010520:	d040      	beq.n	80105a4 <ucdr_deserialize_int32_t+0x104>
 8010522:	78f3      	ldrb	r3, [r6, #3]
 8010524:	702b      	strb	r3, [r5, #0]
 8010526:	78b3      	ldrb	r3, [r6, #2]
 8010528:	706b      	strb	r3, [r5, #1]
 801052a:	2f01      	cmp	r7, #1
 801052c:	d031      	beq.n	8010592 <ucdr_deserialize_int32_t+0xf2>
 801052e:	7873      	ldrb	r3, [r6, #1]
 8010530:	70ab      	strb	r3, [r5, #2]
 8010532:	2f02      	cmp	r7, #2
 8010534:	f105 0503 	add.w	r5, r5, #3
 8010538:	d02f      	beq.n	801059a <ucdr_deserialize_int32_t+0xfa>
 801053a:	7833      	ldrb	r3, [r6, #0]
 801053c:	702b      	strb	r3, [r5, #0]
 801053e:	6923      	ldr	r3, [r4, #16]
 8010540:	68a2      	ldr	r2, [r4, #8]
 8010542:	7da0      	ldrb	r0, [r4, #22]
 8010544:	2104      	movs	r1, #4
 8010546:	3304      	adds	r3, #4
 8010548:	444a      	add	r2, r9
 801054a:	1bdb      	subs	r3, r3, r7
 801054c:	7561      	strb	r1, [r4, #21]
 801054e:	60a2      	str	r2, [r4, #8]
 8010550:	6123      	str	r3, [r4, #16]
 8010552:	f080 0001 	eor.w	r0, r0, #1
 8010556:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801055a:	2104      	movs	r1, #4
 801055c:	4620      	mov	r0, r4
 801055e:	f000 fdf3 	bl	8011148 <ucdr_check_final_buffer_behavior>
 8010562:	2800      	cmp	r0, #0
 8010564:	d0c5      	beq.n	80104f2 <ucdr_deserialize_int32_t+0x52>
 8010566:	7d23      	ldrb	r3, [r4, #20]
 8010568:	68a2      	ldr	r2, [r4, #8]
 801056a:	2b01      	cmp	r3, #1
 801056c:	d017      	beq.n	801059e <ucdr_deserialize_int32_t+0xfe>
 801056e:	78d3      	ldrb	r3, [r2, #3]
 8010570:	e7ad      	b.n	80104ce <ucdr_deserialize_int32_t+0x2e>
 8010572:	681b      	ldr	r3, [r3, #0]
 8010574:	602b      	str	r3, [r5, #0]
 8010576:	e7b4      	b.n	80104e2 <ucdr_deserialize_int32_t+0x42>
 8010578:	68a2      	ldr	r2, [r4, #8]
 801057a:	6923      	ldr	r3, [r4, #16]
 801057c:	7da0      	ldrb	r0, [r4, #22]
 801057e:	f884 8015 	strb.w	r8, [r4, #21]
 8010582:	1bd2      	subs	r2, r2, r7
 8010584:	1bdb      	subs	r3, r3, r7
 8010586:	60a2      	str	r2, [r4, #8]
 8010588:	6123      	str	r3, [r4, #16]
 801058a:	f080 0001 	eor.w	r0, r0, #1
 801058e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010592:	68a3      	ldr	r3, [r4, #8]
 8010594:	785b      	ldrb	r3, [r3, #1]
 8010596:	70ab      	strb	r3, [r5, #2]
 8010598:	3503      	adds	r5, #3
 801059a:	68a6      	ldr	r6, [r4, #8]
 801059c:	e7cd      	b.n	801053a <ucdr_deserialize_int32_t+0x9a>
 801059e:	6813      	ldr	r3, [r2, #0]
 80105a0:	602b      	str	r3, [r5, #0]
 80105a2:	e79e      	b.n	80104e2 <ucdr_deserialize_int32_t+0x42>
 80105a4:	4631      	mov	r1, r6
 80105a6:	463a      	mov	r2, r7
 80105a8:	4628      	mov	r0, r5
 80105aa:	f00d f806 	bl	801d5ba <memcpy>
 80105ae:	68a1      	ldr	r1, [r4, #8]
 80105b0:	464a      	mov	r2, r9
 80105b2:	19e8      	adds	r0, r5, r7
 80105b4:	f00d f801 	bl	801d5ba <memcpy>
 80105b8:	e7c1      	b.n	801053e <ucdr_deserialize_int32_t+0x9e>
 80105ba:	bf00      	nop

080105bc <ucdr_serialize_int64_t>:
 80105bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80105c0:	2108      	movs	r1, #8
 80105c2:	b082      	sub	sp, #8
 80105c4:	4604      	mov	r4, r0
 80105c6:	e9cd 2300 	strd	r2, r3, [sp]
 80105ca:	f000 fe11 	bl	80111f0 <ucdr_buffer_alignment>
 80105ce:	4601      	mov	r1, r0
 80105d0:	4620      	mov	r0, r4
 80105d2:	7d67      	ldrb	r7, [r4, #21]
 80105d4:	f000 fe50 	bl	8011278 <ucdr_advance_buffer>
 80105d8:	2108      	movs	r1, #8
 80105da:	4620      	mov	r0, r4
 80105dc:	f000 fda8 	bl	8011130 <ucdr_check_buffer_available_for>
 80105e0:	2800      	cmp	r0, #0
 80105e2:	d14d      	bne.n	8010680 <ucdr_serialize_int64_t+0xc4>
 80105e4:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80105e8:	42ab      	cmp	r3, r5
 80105ea:	d944      	bls.n	8010676 <ucdr_serialize_int64_t+0xba>
 80105ec:	1b5e      	subs	r6, r3, r5
 80105ee:	60a3      	str	r3, [r4, #8]
 80105f0:	6923      	ldr	r3, [r4, #16]
 80105f2:	f1c6 0808 	rsb	r8, r6, #8
 80105f6:	4433      	add	r3, r6
 80105f8:	6123      	str	r3, [r4, #16]
 80105fa:	4641      	mov	r1, r8
 80105fc:	4620      	mov	r0, r4
 80105fe:	f000 fda3 	bl	8011148 <ucdr_check_final_buffer_behavior>
 8010602:	2800      	cmp	r0, #0
 8010604:	d072      	beq.n	80106ec <ucdr_serialize_int64_t+0x130>
 8010606:	7d23      	ldrb	r3, [r4, #20]
 8010608:	2b01      	cmp	r3, #1
 801060a:	f000 8092 	beq.w	8010732 <ucdr_serialize_int64_t+0x176>
 801060e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010612:	702b      	strb	r3, [r5, #0]
 8010614:	2e01      	cmp	r6, #1
 8010616:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801061a:	706b      	strb	r3, [r5, #1]
 801061c:	d073      	beq.n	8010706 <ucdr_serialize_int64_t+0x14a>
 801061e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8010622:	70ab      	strb	r3, [r5, #2]
 8010624:	2e02      	cmp	r6, #2
 8010626:	d072      	beq.n	801070e <ucdr_serialize_int64_t+0x152>
 8010628:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801062c:	70eb      	strb	r3, [r5, #3]
 801062e:	2e03      	cmp	r6, #3
 8010630:	d071      	beq.n	8010716 <ucdr_serialize_int64_t+0x15a>
 8010632:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8010636:	712b      	strb	r3, [r5, #4]
 8010638:	2e04      	cmp	r6, #4
 801063a:	d070      	beq.n	801071e <ucdr_serialize_int64_t+0x162>
 801063c:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8010640:	716b      	strb	r3, [r5, #5]
 8010642:	2e05      	cmp	r6, #5
 8010644:	d06f      	beq.n	8010726 <ucdr_serialize_int64_t+0x16a>
 8010646:	f89d 3001 	ldrb.w	r3, [sp, #1]
 801064a:	71ab      	strb	r3, [r5, #6]
 801064c:	2e06      	cmp	r6, #6
 801064e:	d06e      	beq.n	801072e <ucdr_serialize_int64_t+0x172>
 8010650:	3507      	adds	r5, #7
 8010652:	f89d 3000 	ldrb.w	r3, [sp]
 8010656:	702b      	strb	r3, [r5, #0]
 8010658:	6923      	ldr	r3, [r4, #16]
 801065a:	68a2      	ldr	r2, [r4, #8]
 801065c:	7da0      	ldrb	r0, [r4, #22]
 801065e:	3308      	adds	r3, #8
 8010660:	4442      	add	r2, r8
 8010662:	1b9b      	subs	r3, r3, r6
 8010664:	2108      	movs	r1, #8
 8010666:	f080 0001 	eor.w	r0, r0, #1
 801066a:	60a2      	str	r2, [r4, #8]
 801066c:	6123      	str	r3, [r4, #16]
 801066e:	7561      	strb	r1, [r4, #21]
 8010670:	b002      	add	sp, #8
 8010672:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010676:	2108      	movs	r1, #8
 8010678:	4620      	mov	r0, r4
 801067a:	f000 fd65 	bl	8011148 <ucdr_check_final_buffer_behavior>
 801067e:	b350      	cbz	r0, 80106d6 <ucdr_serialize_int64_t+0x11a>
 8010680:	7d22      	ldrb	r2, [r4, #20]
 8010682:	68a3      	ldr	r3, [r4, #8]
 8010684:	2a01      	cmp	r2, #1
 8010686:	d02c      	beq.n	80106e2 <ucdr_serialize_int64_t+0x126>
 8010688:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801068c:	701a      	strb	r2, [r3, #0]
 801068e:	68a3      	ldr	r3, [r4, #8]
 8010690:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010694:	705a      	strb	r2, [r3, #1]
 8010696:	68a3      	ldr	r3, [r4, #8]
 8010698:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801069c:	709a      	strb	r2, [r3, #2]
 801069e:	68a3      	ldr	r3, [r4, #8]
 80106a0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80106a4:	70da      	strb	r2, [r3, #3]
 80106a6:	68a3      	ldr	r3, [r4, #8]
 80106a8:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80106ac:	711a      	strb	r2, [r3, #4]
 80106ae:	68a3      	ldr	r3, [r4, #8]
 80106b0:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80106b4:	715a      	strb	r2, [r3, #5]
 80106b6:	68a3      	ldr	r3, [r4, #8]
 80106b8:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80106bc:	719a      	strb	r2, [r3, #6]
 80106be:	68a3      	ldr	r3, [r4, #8]
 80106c0:	f89d 2000 	ldrb.w	r2, [sp]
 80106c4:	71da      	strb	r2, [r3, #7]
 80106c6:	68a2      	ldr	r2, [r4, #8]
 80106c8:	6923      	ldr	r3, [r4, #16]
 80106ca:	3208      	adds	r2, #8
 80106cc:	3308      	adds	r3, #8
 80106ce:	2108      	movs	r1, #8
 80106d0:	60a2      	str	r2, [r4, #8]
 80106d2:	6123      	str	r3, [r4, #16]
 80106d4:	7561      	strb	r1, [r4, #21]
 80106d6:	7da0      	ldrb	r0, [r4, #22]
 80106d8:	f080 0001 	eor.w	r0, r0, #1
 80106dc:	b002      	add	sp, #8
 80106de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80106e2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80106e6:	6019      	str	r1, [r3, #0]
 80106e8:	605a      	str	r2, [r3, #4]
 80106ea:	e7ec      	b.n	80106c6 <ucdr_serialize_int64_t+0x10a>
 80106ec:	68a2      	ldr	r2, [r4, #8]
 80106ee:	6923      	ldr	r3, [r4, #16]
 80106f0:	7da0      	ldrb	r0, [r4, #22]
 80106f2:	7567      	strb	r7, [r4, #21]
 80106f4:	1b92      	subs	r2, r2, r6
 80106f6:	1b9b      	subs	r3, r3, r6
 80106f8:	f080 0001 	eor.w	r0, r0, #1
 80106fc:	60a2      	str	r2, [r4, #8]
 80106fe:	6123      	str	r3, [r4, #16]
 8010700:	b002      	add	sp, #8
 8010702:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010706:	68a3      	ldr	r3, [r4, #8]
 8010708:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801070c:	701a      	strb	r2, [r3, #0]
 801070e:	68a3      	ldr	r3, [r4, #8]
 8010710:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8010714:	701a      	strb	r2, [r3, #0]
 8010716:	68a3      	ldr	r3, [r4, #8]
 8010718:	f89d 2003 	ldrb.w	r2, [sp, #3]
 801071c:	701a      	strb	r2, [r3, #0]
 801071e:	68a3      	ldr	r3, [r4, #8]
 8010720:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8010724:	701a      	strb	r2, [r3, #0]
 8010726:	68a3      	ldr	r3, [r4, #8]
 8010728:	f89d 2001 	ldrb.w	r2, [sp, #1]
 801072c:	701a      	strb	r2, [r3, #0]
 801072e:	68a5      	ldr	r5, [r4, #8]
 8010730:	e78f      	b.n	8010652 <ucdr_serialize_int64_t+0x96>
 8010732:	4628      	mov	r0, r5
 8010734:	466d      	mov	r5, sp
 8010736:	4632      	mov	r2, r6
 8010738:	4629      	mov	r1, r5
 801073a:	f00c ff3e 	bl	801d5ba <memcpy>
 801073e:	68a0      	ldr	r0, [r4, #8]
 8010740:	4642      	mov	r2, r8
 8010742:	19a9      	adds	r1, r5, r6
 8010744:	f00c ff39 	bl	801d5ba <memcpy>
 8010748:	e786      	b.n	8010658 <ucdr_serialize_int64_t+0x9c>
 801074a:	bf00      	nop

0801074c <ucdr_deserialize_int64_t>:
 801074c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010750:	460d      	mov	r5, r1
 8010752:	2108      	movs	r1, #8
 8010754:	4604      	mov	r4, r0
 8010756:	f000 fd4b 	bl	80111f0 <ucdr_buffer_alignment>
 801075a:	4601      	mov	r1, r0
 801075c:	4620      	mov	r0, r4
 801075e:	f894 8015 	ldrb.w	r8, [r4, #21]
 8010762:	f000 fd89 	bl	8011278 <ucdr_advance_buffer>
 8010766:	2108      	movs	r1, #8
 8010768:	4620      	mov	r0, r4
 801076a:	f000 fce1 	bl	8011130 <ucdr_check_buffer_available_for>
 801076e:	2800      	cmp	r0, #0
 8010770:	d147      	bne.n	8010802 <ucdr_deserialize_int64_t+0xb6>
 8010772:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8010776:	42be      	cmp	r6, r7
 8010778:	d93e      	bls.n	80107f8 <ucdr_deserialize_int64_t+0xac>
 801077a:	6923      	ldr	r3, [r4, #16]
 801077c:	60a6      	str	r6, [r4, #8]
 801077e:	1bf6      	subs	r6, r6, r7
 8010780:	4433      	add	r3, r6
 8010782:	f1c6 0908 	rsb	r9, r6, #8
 8010786:	6123      	str	r3, [r4, #16]
 8010788:	4649      	mov	r1, r9
 801078a:	4620      	mov	r0, r4
 801078c:	f000 fcdc 	bl	8011148 <ucdr_check_final_buffer_behavior>
 8010790:	2800      	cmp	r0, #0
 8010792:	d063      	beq.n	801085c <ucdr_deserialize_int64_t+0x110>
 8010794:	7d23      	ldrb	r3, [r4, #20]
 8010796:	2b01      	cmp	r3, #1
 8010798:	f000 8083 	beq.w	80108a2 <ucdr_deserialize_int64_t+0x156>
 801079c:	79fb      	ldrb	r3, [r7, #7]
 801079e:	702b      	strb	r3, [r5, #0]
 80107a0:	79bb      	ldrb	r3, [r7, #6]
 80107a2:	706b      	strb	r3, [r5, #1]
 80107a4:	2e01      	cmp	r6, #1
 80107a6:	d066      	beq.n	8010876 <ucdr_deserialize_int64_t+0x12a>
 80107a8:	797b      	ldrb	r3, [r7, #5]
 80107aa:	70ab      	strb	r3, [r5, #2]
 80107ac:	2e02      	cmp	r6, #2
 80107ae:	f000 8089 	beq.w	80108c4 <ucdr_deserialize_int64_t+0x178>
 80107b2:	793b      	ldrb	r3, [r7, #4]
 80107b4:	70eb      	strb	r3, [r5, #3]
 80107b6:	2e03      	cmp	r6, #3
 80107b8:	f000 8082 	beq.w	80108c0 <ucdr_deserialize_int64_t+0x174>
 80107bc:	78fb      	ldrb	r3, [r7, #3]
 80107be:	712b      	strb	r3, [r5, #4]
 80107c0:	2e04      	cmp	r6, #4
 80107c2:	d07b      	beq.n	80108bc <ucdr_deserialize_int64_t+0x170>
 80107c4:	78bb      	ldrb	r3, [r7, #2]
 80107c6:	716b      	strb	r3, [r5, #5]
 80107c8:	2e05      	cmp	r6, #5
 80107ca:	d075      	beq.n	80108b8 <ucdr_deserialize_int64_t+0x16c>
 80107cc:	787b      	ldrb	r3, [r7, #1]
 80107ce:	71ab      	strb	r3, [r5, #6]
 80107d0:	2e06      	cmp	r6, #6
 80107d2:	f105 0507 	add.w	r5, r5, #7
 80107d6:	d062      	beq.n	801089e <ucdr_deserialize_int64_t+0x152>
 80107d8:	783b      	ldrb	r3, [r7, #0]
 80107da:	702b      	strb	r3, [r5, #0]
 80107dc:	6923      	ldr	r3, [r4, #16]
 80107de:	68a2      	ldr	r2, [r4, #8]
 80107e0:	7da0      	ldrb	r0, [r4, #22]
 80107e2:	2108      	movs	r1, #8
 80107e4:	3308      	adds	r3, #8
 80107e6:	444a      	add	r2, r9
 80107e8:	1b9b      	subs	r3, r3, r6
 80107ea:	7561      	strb	r1, [r4, #21]
 80107ec:	60a2      	str	r2, [r4, #8]
 80107ee:	6123      	str	r3, [r4, #16]
 80107f0:	f080 0001 	eor.w	r0, r0, #1
 80107f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80107f8:	2108      	movs	r1, #8
 80107fa:	4620      	mov	r0, r4
 80107fc:	f000 fca4 	bl	8011148 <ucdr_check_final_buffer_behavior>
 8010800:	b310      	cbz	r0, 8010848 <ucdr_deserialize_int64_t+0xfc>
 8010802:	7d22      	ldrb	r2, [r4, #20]
 8010804:	68a3      	ldr	r3, [r4, #8]
 8010806:	2a01      	cmp	r2, #1
 8010808:	d023      	beq.n	8010852 <ucdr_deserialize_int64_t+0x106>
 801080a:	79db      	ldrb	r3, [r3, #7]
 801080c:	702b      	strb	r3, [r5, #0]
 801080e:	68a3      	ldr	r3, [r4, #8]
 8010810:	799b      	ldrb	r3, [r3, #6]
 8010812:	706b      	strb	r3, [r5, #1]
 8010814:	68a3      	ldr	r3, [r4, #8]
 8010816:	795b      	ldrb	r3, [r3, #5]
 8010818:	70ab      	strb	r3, [r5, #2]
 801081a:	68a3      	ldr	r3, [r4, #8]
 801081c:	791b      	ldrb	r3, [r3, #4]
 801081e:	70eb      	strb	r3, [r5, #3]
 8010820:	68a3      	ldr	r3, [r4, #8]
 8010822:	78db      	ldrb	r3, [r3, #3]
 8010824:	712b      	strb	r3, [r5, #4]
 8010826:	68a3      	ldr	r3, [r4, #8]
 8010828:	789b      	ldrb	r3, [r3, #2]
 801082a:	716b      	strb	r3, [r5, #5]
 801082c:	68a3      	ldr	r3, [r4, #8]
 801082e:	785b      	ldrb	r3, [r3, #1]
 8010830:	71ab      	strb	r3, [r5, #6]
 8010832:	68a3      	ldr	r3, [r4, #8]
 8010834:	781b      	ldrb	r3, [r3, #0]
 8010836:	71eb      	strb	r3, [r5, #7]
 8010838:	68a2      	ldr	r2, [r4, #8]
 801083a:	6923      	ldr	r3, [r4, #16]
 801083c:	3208      	adds	r2, #8
 801083e:	3308      	adds	r3, #8
 8010840:	2108      	movs	r1, #8
 8010842:	60a2      	str	r2, [r4, #8]
 8010844:	6123      	str	r3, [r4, #16]
 8010846:	7561      	strb	r1, [r4, #21]
 8010848:	7da0      	ldrb	r0, [r4, #22]
 801084a:	f080 0001 	eor.w	r0, r0, #1
 801084e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010852:	681a      	ldr	r2, [r3, #0]
 8010854:	685b      	ldr	r3, [r3, #4]
 8010856:	606b      	str	r3, [r5, #4]
 8010858:	602a      	str	r2, [r5, #0]
 801085a:	e7ed      	b.n	8010838 <ucdr_deserialize_int64_t+0xec>
 801085c:	68a2      	ldr	r2, [r4, #8]
 801085e:	6923      	ldr	r3, [r4, #16]
 8010860:	7da0      	ldrb	r0, [r4, #22]
 8010862:	f884 8015 	strb.w	r8, [r4, #21]
 8010866:	1b92      	subs	r2, r2, r6
 8010868:	1b9b      	subs	r3, r3, r6
 801086a:	60a2      	str	r2, [r4, #8]
 801086c:	6123      	str	r3, [r4, #16]
 801086e:	f080 0001 	eor.w	r0, r0, #1
 8010872:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010876:	68a3      	ldr	r3, [r4, #8]
 8010878:	795b      	ldrb	r3, [r3, #5]
 801087a:	70ab      	strb	r3, [r5, #2]
 801087c:	3503      	adds	r5, #3
 801087e:	68a3      	ldr	r3, [r4, #8]
 8010880:	791b      	ldrb	r3, [r3, #4]
 8010882:	f805 3b01 	strb.w	r3, [r5], #1
 8010886:	68a3      	ldr	r3, [r4, #8]
 8010888:	78db      	ldrb	r3, [r3, #3]
 801088a:	f805 3b01 	strb.w	r3, [r5], #1
 801088e:	68a3      	ldr	r3, [r4, #8]
 8010890:	789b      	ldrb	r3, [r3, #2]
 8010892:	f805 3b01 	strb.w	r3, [r5], #1
 8010896:	68a3      	ldr	r3, [r4, #8]
 8010898:	785b      	ldrb	r3, [r3, #1]
 801089a:	f805 3b01 	strb.w	r3, [r5], #1
 801089e:	68a7      	ldr	r7, [r4, #8]
 80108a0:	e79a      	b.n	80107d8 <ucdr_deserialize_int64_t+0x8c>
 80108a2:	4639      	mov	r1, r7
 80108a4:	4632      	mov	r2, r6
 80108a6:	4628      	mov	r0, r5
 80108a8:	f00c fe87 	bl	801d5ba <memcpy>
 80108ac:	68a1      	ldr	r1, [r4, #8]
 80108ae:	464a      	mov	r2, r9
 80108b0:	19a8      	adds	r0, r5, r6
 80108b2:	f00c fe82 	bl	801d5ba <memcpy>
 80108b6:	e791      	b.n	80107dc <ucdr_deserialize_int64_t+0x90>
 80108b8:	3506      	adds	r5, #6
 80108ba:	e7ec      	b.n	8010896 <ucdr_deserialize_int64_t+0x14a>
 80108bc:	3505      	adds	r5, #5
 80108be:	e7e6      	b.n	801088e <ucdr_deserialize_int64_t+0x142>
 80108c0:	3504      	adds	r5, #4
 80108c2:	e7e0      	b.n	8010886 <ucdr_deserialize_int64_t+0x13a>
 80108c4:	3503      	adds	r5, #3
 80108c6:	e7da      	b.n	801087e <ucdr_deserialize_int64_t+0x132>

080108c8 <ucdr_serialize_endian_float>:
 80108c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80108cc:	460d      	mov	r5, r1
 80108ce:	b083      	sub	sp, #12
 80108d0:	2104      	movs	r1, #4
 80108d2:	4604      	mov	r4, r0
 80108d4:	ed8d 0a01 	vstr	s0, [sp, #4]
 80108d8:	f000 fc8a 	bl	80111f0 <ucdr_buffer_alignment>
 80108dc:	4601      	mov	r1, r0
 80108de:	4620      	mov	r0, r4
 80108e0:	f894 8015 	ldrb.w	r8, [r4, #21]
 80108e4:	f000 fcc8 	bl	8011278 <ucdr_advance_buffer>
 80108e8:	2104      	movs	r1, #4
 80108ea:	4620      	mov	r0, r4
 80108ec:	f000 fc20 	bl	8011130 <ucdr_check_buffer_available_for>
 80108f0:	2800      	cmp	r0, #0
 80108f2:	d137      	bne.n	8010964 <ucdr_serialize_endian_float+0x9c>
 80108f4:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 80108f8:	42b7      	cmp	r7, r6
 80108fa:	d92e      	bls.n	801095a <ucdr_serialize_endian_float+0x92>
 80108fc:	6923      	ldr	r3, [r4, #16]
 80108fe:	60a7      	str	r7, [r4, #8]
 8010900:	1bbf      	subs	r7, r7, r6
 8010902:	443b      	add	r3, r7
 8010904:	f1c7 0904 	rsb	r9, r7, #4
 8010908:	6123      	str	r3, [r4, #16]
 801090a:	4649      	mov	r1, r9
 801090c:	4620      	mov	r0, r4
 801090e:	f000 fc1b 	bl	8011148 <ucdr_check_final_buffer_behavior>
 8010912:	2800      	cmp	r0, #0
 8010914:	d049      	beq.n	80109aa <ucdr_serialize_endian_float+0xe2>
 8010916:	2d01      	cmp	r5, #1
 8010918:	d05b      	beq.n	80109d2 <ucdr_serialize_endian_float+0x10a>
 801091a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801091e:	7033      	strb	r3, [r6, #0]
 8010920:	2f01      	cmp	r7, #1
 8010922:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8010926:	7073      	strb	r3, [r6, #1]
 8010928:	d04d      	beq.n	80109c6 <ucdr_serialize_endian_float+0xfe>
 801092a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801092e:	70b3      	strb	r3, [r6, #2]
 8010930:	2f02      	cmp	r7, #2
 8010932:	d04c      	beq.n	80109ce <ucdr_serialize_endian_float+0x106>
 8010934:	3603      	adds	r6, #3
 8010936:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801093a:	7033      	strb	r3, [r6, #0]
 801093c:	6923      	ldr	r3, [r4, #16]
 801093e:	68a2      	ldr	r2, [r4, #8]
 8010940:	7da0      	ldrb	r0, [r4, #22]
 8010942:	3304      	adds	r3, #4
 8010944:	444a      	add	r2, r9
 8010946:	1bdb      	subs	r3, r3, r7
 8010948:	2104      	movs	r1, #4
 801094a:	f080 0001 	eor.w	r0, r0, #1
 801094e:	60a2      	str	r2, [r4, #8]
 8010950:	6123      	str	r3, [r4, #16]
 8010952:	7561      	strb	r1, [r4, #21]
 8010954:	b003      	add	sp, #12
 8010956:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801095a:	2104      	movs	r1, #4
 801095c:	4620      	mov	r0, r4
 801095e:	f000 fbf3 	bl	8011148 <ucdr_check_final_buffer_behavior>
 8010962:	b1c8      	cbz	r0, 8010998 <ucdr_serialize_endian_float+0xd0>
 8010964:	2d01      	cmp	r5, #1
 8010966:	68a3      	ldr	r3, [r4, #8]
 8010968:	d01c      	beq.n	80109a4 <ucdr_serialize_endian_float+0xdc>
 801096a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801096e:	701a      	strb	r2, [r3, #0]
 8010970:	68a3      	ldr	r3, [r4, #8]
 8010972:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010976:	705a      	strb	r2, [r3, #1]
 8010978:	68a3      	ldr	r3, [r4, #8]
 801097a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801097e:	709a      	strb	r2, [r3, #2]
 8010980:	68a3      	ldr	r3, [r4, #8]
 8010982:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8010986:	70da      	strb	r2, [r3, #3]
 8010988:	68a2      	ldr	r2, [r4, #8]
 801098a:	6923      	ldr	r3, [r4, #16]
 801098c:	3204      	adds	r2, #4
 801098e:	3304      	adds	r3, #4
 8010990:	2104      	movs	r1, #4
 8010992:	60a2      	str	r2, [r4, #8]
 8010994:	6123      	str	r3, [r4, #16]
 8010996:	7561      	strb	r1, [r4, #21]
 8010998:	7da0      	ldrb	r0, [r4, #22]
 801099a:	f080 0001 	eor.w	r0, r0, #1
 801099e:	b003      	add	sp, #12
 80109a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80109a4:	9a01      	ldr	r2, [sp, #4]
 80109a6:	601a      	str	r2, [r3, #0]
 80109a8:	e7ee      	b.n	8010988 <ucdr_serialize_endian_float+0xc0>
 80109aa:	68a2      	ldr	r2, [r4, #8]
 80109ac:	6923      	ldr	r3, [r4, #16]
 80109ae:	7da0      	ldrb	r0, [r4, #22]
 80109b0:	f884 8015 	strb.w	r8, [r4, #21]
 80109b4:	1bd2      	subs	r2, r2, r7
 80109b6:	1bdb      	subs	r3, r3, r7
 80109b8:	f080 0001 	eor.w	r0, r0, #1
 80109bc:	60a2      	str	r2, [r4, #8]
 80109be:	6123      	str	r3, [r4, #16]
 80109c0:	b003      	add	sp, #12
 80109c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80109c6:	68a3      	ldr	r3, [r4, #8]
 80109c8:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80109cc:	701a      	strb	r2, [r3, #0]
 80109ce:	68a6      	ldr	r6, [r4, #8]
 80109d0:	e7b1      	b.n	8010936 <ucdr_serialize_endian_float+0x6e>
 80109d2:	ad01      	add	r5, sp, #4
 80109d4:	463a      	mov	r2, r7
 80109d6:	4629      	mov	r1, r5
 80109d8:	4630      	mov	r0, r6
 80109da:	f00c fdee 	bl	801d5ba <memcpy>
 80109de:	68a0      	ldr	r0, [r4, #8]
 80109e0:	464a      	mov	r2, r9
 80109e2:	19e9      	adds	r1, r5, r7
 80109e4:	f00c fde9 	bl	801d5ba <memcpy>
 80109e8:	e7a8      	b.n	801093c <ucdr_serialize_endian_float+0x74>
 80109ea:	bf00      	nop

080109ec <ucdr_deserialize_endian_float>:
 80109ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80109f0:	460e      	mov	r6, r1
 80109f2:	2104      	movs	r1, #4
 80109f4:	4604      	mov	r4, r0
 80109f6:	4615      	mov	r5, r2
 80109f8:	f000 fbfa 	bl	80111f0 <ucdr_buffer_alignment>
 80109fc:	4601      	mov	r1, r0
 80109fe:	4620      	mov	r0, r4
 8010a00:	f894 9015 	ldrb.w	r9, [r4, #21]
 8010a04:	f000 fc38 	bl	8011278 <ucdr_advance_buffer>
 8010a08:	2104      	movs	r1, #4
 8010a0a:	4620      	mov	r0, r4
 8010a0c:	f000 fb90 	bl	8011130 <ucdr_check_buffer_available_for>
 8010a10:	2800      	cmp	r0, #0
 8010a12:	d137      	bne.n	8010a84 <ucdr_deserialize_endian_float+0x98>
 8010a14:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 8010a18:	42bb      	cmp	r3, r7
 8010a1a:	d92e      	bls.n	8010a7a <ucdr_deserialize_endian_float+0x8e>
 8010a1c:	eba3 0807 	sub.w	r8, r3, r7
 8010a20:	60a3      	str	r3, [r4, #8]
 8010a22:	6923      	ldr	r3, [r4, #16]
 8010a24:	f1c8 0a04 	rsb	sl, r8, #4
 8010a28:	4443      	add	r3, r8
 8010a2a:	6123      	str	r3, [r4, #16]
 8010a2c:	4651      	mov	r1, sl
 8010a2e:	4620      	mov	r0, r4
 8010a30:	f000 fb8a 	bl	8011148 <ucdr_check_final_buffer_behavior>
 8010a34:	2800      	cmp	r0, #0
 8010a36:	d043      	beq.n	8010ac0 <ucdr_deserialize_endian_float+0xd4>
 8010a38:	2e01      	cmp	r6, #1
 8010a3a:	d056      	beq.n	8010aea <ucdr_deserialize_endian_float+0xfe>
 8010a3c:	78fb      	ldrb	r3, [r7, #3]
 8010a3e:	702b      	strb	r3, [r5, #0]
 8010a40:	78bb      	ldrb	r3, [r7, #2]
 8010a42:	706b      	strb	r3, [r5, #1]
 8010a44:	f1b8 0f01 	cmp.w	r8, #1
 8010a48:	d049      	beq.n	8010ade <ucdr_deserialize_endian_float+0xf2>
 8010a4a:	787b      	ldrb	r3, [r7, #1]
 8010a4c:	70ab      	strb	r3, [r5, #2]
 8010a4e:	f1b8 0f02 	cmp.w	r8, #2
 8010a52:	f105 0503 	add.w	r5, r5, #3
 8010a56:	d046      	beq.n	8010ae6 <ucdr_deserialize_endian_float+0xfa>
 8010a58:	783b      	ldrb	r3, [r7, #0]
 8010a5a:	702b      	strb	r3, [r5, #0]
 8010a5c:	6923      	ldr	r3, [r4, #16]
 8010a5e:	68a2      	ldr	r2, [r4, #8]
 8010a60:	7da0      	ldrb	r0, [r4, #22]
 8010a62:	2104      	movs	r1, #4
 8010a64:	3304      	adds	r3, #4
 8010a66:	4452      	add	r2, sl
 8010a68:	eba3 0308 	sub.w	r3, r3, r8
 8010a6c:	7561      	strb	r1, [r4, #21]
 8010a6e:	60a2      	str	r2, [r4, #8]
 8010a70:	6123      	str	r3, [r4, #16]
 8010a72:	f080 0001 	eor.w	r0, r0, #1
 8010a76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010a7a:	2104      	movs	r1, #4
 8010a7c:	4620      	mov	r0, r4
 8010a7e:	f000 fb63 	bl	8011148 <ucdr_check_final_buffer_behavior>
 8010a82:	b1a8      	cbz	r0, 8010ab0 <ucdr_deserialize_endian_float+0xc4>
 8010a84:	2e01      	cmp	r6, #1
 8010a86:	68a3      	ldr	r3, [r4, #8]
 8010a88:	d017      	beq.n	8010aba <ucdr_deserialize_endian_float+0xce>
 8010a8a:	78db      	ldrb	r3, [r3, #3]
 8010a8c:	702b      	strb	r3, [r5, #0]
 8010a8e:	68a3      	ldr	r3, [r4, #8]
 8010a90:	789b      	ldrb	r3, [r3, #2]
 8010a92:	706b      	strb	r3, [r5, #1]
 8010a94:	68a3      	ldr	r3, [r4, #8]
 8010a96:	785b      	ldrb	r3, [r3, #1]
 8010a98:	70ab      	strb	r3, [r5, #2]
 8010a9a:	68a3      	ldr	r3, [r4, #8]
 8010a9c:	781b      	ldrb	r3, [r3, #0]
 8010a9e:	70eb      	strb	r3, [r5, #3]
 8010aa0:	68a2      	ldr	r2, [r4, #8]
 8010aa2:	6923      	ldr	r3, [r4, #16]
 8010aa4:	3204      	adds	r2, #4
 8010aa6:	3304      	adds	r3, #4
 8010aa8:	2104      	movs	r1, #4
 8010aaa:	60a2      	str	r2, [r4, #8]
 8010aac:	6123      	str	r3, [r4, #16]
 8010aae:	7561      	strb	r1, [r4, #21]
 8010ab0:	7da0      	ldrb	r0, [r4, #22]
 8010ab2:	f080 0001 	eor.w	r0, r0, #1
 8010ab6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010aba:	681b      	ldr	r3, [r3, #0]
 8010abc:	602b      	str	r3, [r5, #0]
 8010abe:	e7ef      	b.n	8010aa0 <ucdr_deserialize_endian_float+0xb4>
 8010ac0:	68a2      	ldr	r2, [r4, #8]
 8010ac2:	6923      	ldr	r3, [r4, #16]
 8010ac4:	7da0      	ldrb	r0, [r4, #22]
 8010ac6:	f884 9015 	strb.w	r9, [r4, #21]
 8010aca:	eba2 0208 	sub.w	r2, r2, r8
 8010ace:	eba3 0308 	sub.w	r3, r3, r8
 8010ad2:	60a2      	str	r2, [r4, #8]
 8010ad4:	6123      	str	r3, [r4, #16]
 8010ad6:	f080 0001 	eor.w	r0, r0, #1
 8010ada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ade:	68a3      	ldr	r3, [r4, #8]
 8010ae0:	785b      	ldrb	r3, [r3, #1]
 8010ae2:	70ab      	strb	r3, [r5, #2]
 8010ae4:	3503      	adds	r5, #3
 8010ae6:	68a7      	ldr	r7, [r4, #8]
 8010ae8:	e7b6      	b.n	8010a58 <ucdr_deserialize_endian_float+0x6c>
 8010aea:	4639      	mov	r1, r7
 8010aec:	4642      	mov	r2, r8
 8010aee:	4628      	mov	r0, r5
 8010af0:	f00c fd63 	bl	801d5ba <memcpy>
 8010af4:	68a1      	ldr	r1, [r4, #8]
 8010af6:	4652      	mov	r2, sl
 8010af8:	eb05 0008 	add.w	r0, r5, r8
 8010afc:	f00c fd5d 	bl	801d5ba <memcpy>
 8010b00:	e7ac      	b.n	8010a5c <ucdr_deserialize_endian_float+0x70>
 8010b02:	bf00      	nop

08010b04 <ucdr_serialize_double>:
 8010b04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b08:	2108      	movs	r1, #8
 8010b0a:	b082      	sub	sp, #8
 8010b0c:	4604      	mov	r4, r0
 8010b0e:	ed8d 0b00 	vstr	d0, [sp]
 8010b12:	f000 fb6d 	bl	80111f0 <ucdr_buffer_alignment>
 8010b16:	4601      	mov	r1, r0
 8010b18:	4620      	mov	r0, r4
 8010b1a:	7d67      	ldrb	r7, [r4, #21]
 8010b1c:	f000 fbac 	bl	8011278 <ucdr_advance_buffer>
 8010b20:	2108      	movs	r1, #8
 8010b22:	4620      	mov	r0, r4
 8010b24:	f000 fb04 	bl	8011130 <ucdr_check_buffer_available_for>
 8010b28:	2800      	cmp	r0, #0
 8010b2a:	d14d      	bne.n	8010bc8 <ucdr_serialize_double+0xc4>
 8010b2c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8010b30:	42ab      	cmp	r3, r5
 8010b32:	d944      	bls.n	8010bbe <ucdr_serialize_double+0xba>
 8010b34:	1b5e      	subs	r6, r3, r5
 8010b36:	60a3      	str	r3, [r4, #8]
 8010b38:	6923      	ldr	r3, [r4, #16]
 8010b3a:	f1c6 0808 	rsb	r8, r6, #8
 8010b3e:	4433      	add	r3, r6
 8010b40:	6123      	str	r3, [r4, #16]
 8010b42:	4641      	mov	r1, r8
 8010b44:	4620      	mov	r0, r4
 8010b46:	f000 faff 	bl	8011148 <ucdr_check_final_buffer_behavior>
 8010b4a:	2800      	cmp	r0, #0
 8010b4c:	d072      	beq.n	8010c34 <ucdr_serialize_double+0x130>
 8010b4e:	7d23      	ldrb	r3, [r4, #20]
 8010b50:	2b01      	cmp	r3, #1
 8010b52:	f000 8092 	beq.w	8010c7a <ucdr_serialize_double+0x176>
 8010b56:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010b5a:	702b      	strb	r3, [r5, #0]
 8010b5c:	2e01      	cmp	r6, #1
 8010b5e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8010b62:	706b      	strb	r3, [r5, #1]
 8010b64:	d073      	beq.n	8010c4e <ucdr_serialize_double+0x14a>
 8010b66:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8010b6a:	70ab      	strb	r3, [r5, #2]
 8010b6c:	2e02      	cmp	r6, #2
 8010b6e:	d072      	beq.n	8010c56 <ucdr_serialize_double+0x152>
 8010b70:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8010b74:	70eb      	strb	r3, [r5, #3]
 8010b76:	2e03      	cmp	r6, #3
 8010b78:	d071      	beq.n	8010c5e <ucdr_serialize_double+0x15a>
 8010b7a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8010b7e:	712b      	strb	r3, [r5, #4]
 8010b80:	2e04      	cmp	r6, #4
 8010b82:	d070      	beq.n	8010c66 <ucdr_serialize_double+0x162>
 8010b84:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8010b88:	716b      	strb	r3, [r5, #5]
 8010b8a:	2e05      	cmp	r6, #5
 8010b8c:	d06f      	beq.n	8010c6e <ucdr_serialize_double+0x16a>
 8010b8e:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8010b92:	71ab      	strb	r3, [r5, #6]
 8010b94:	2e06      	cmp	r6, #6
 8010b96:	d06e      	beq.n	8010c76 <ucdr_serialize_double+0x172>
 8010b98:	3507      	adds	r5, #7
 8010b9a:	f89d 3000 	ldrb.w	r3, [sp]
 8010b9e:	702b      	strb	r3, [r5, #0]
 8010ba0:	6923      	ldr	r3, [r4, #16]
 8010ba2:	68a2      	ldr	r2, [r4, #8]
 8010ba4:	7da0      	ldrb	r0, [r4, #22]
 8010ba6:	3308      	adds	r3, #8
 8010ba8:	4442      	add	r2, r8
 8010baa:	1b9b      	subs	r3, r3, r6
 8010bac:	2108      	movs	r1, #8
 8010bae:	f080 0001 	eor.w	r0, r0, #1
 8010bb2:	60a2      	str	r2, [r4, #8]
 8010bb4:	6123      	str	r3, [r4, #16]
 8010bb6:	7561      	strb	r1, [r4, #21]
 8010bb8:	b002      	add	sp, #8
 8010bba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010bbe:	2108      	movs	r1, #8
 8010bc0:	4620      	mov	r0, r4
 8010bc2:	f000 fac1 	bl	8011148 <ucdr_check_final_buffer_behavior>
 8010bc6:	b350      	cbz	r0, 8010c1e <ucdr_serialize_double+0x11a>
 8010bc8:	7d22      	ldrb	r2, [r4, #20]
 8010bca:	68a3      	ldr	r3, [r4, #8]
 8010bcc:	2a01      	cmp	r2, #1
 8010bce:	d02c      	beq.n	8010c2a <ucdr_serialize_double+0x126>
 8010bd0:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8010bd4:	701a      	strb	r2, [r3, #0]
 8010bd6:	68a3      	ldr	r3, [r4, #8]
 8010bd8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010bdc:	705a      	strb	r2, [r3, #1]
 8010bde:	68a3      	ldr	r3, [r4, #8]
 8010be0:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8010be4:	709a      	strb	r2, [r3, #2]
 8010be6:	68a3      	ldr	r3, [r4, #8]
 8010be8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8010bec:	70da      	strb	r2, [r3, #3]
 8010bee:	68a3      	ldr	r3, [r4, #8]
 8010bf0:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8010bf4:	711a      	strb	r2, [r3, #4]
 8010bf6:	68a3      	ldr	r3, [r4, #8]
 8010bf8:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8010bfc:	715a      	strb	r2, [r3, #5]
 8010bfe:	68a3      	ldr	r3, [r4, #8]
 8010c00:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8010c04:	719a      	strb	r2, [r3, #6]
 8010c06:	68a3      	ldr	r3, [r4, #8]
 8010c08:	f89d 2000 	ldrb.w	r2, [sp]
 8010c0c:	71da      	strb	r2, [r3, #7]
 8010c0e:	68a2      	ldr	r2, [r4, #8]
 8010c10:	6923      	ldr	r3, [r4, #16]
 8010c12:	3208      	adds	r2, #8
 8010c14:	3308      	adds	r3, #8
 8010c16:	2108      	movs	r1, #8
 8010c18:	60a2      	str	r2, [r4, #8]
 8010c1a:	6123      	str	r3, [r4, #16]
 8010c1c:	7561      	strb	r1, [r4, #21]
 8010c1e:	7da0      	ldrb	r0, [r4, #22]
 8010c20:	f080 0001 	eor.w	r0, r0, #1
 8010c24:	b002      	add	sp, #8
 8010c26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c2a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8010c2e:	6019      	str	r1, [r3, #0]
 8010c30:	605a      	str	r2, [r3, #4]
 8010c32:	e7ec      	b.n	8010c0e <ucdr_serialize_double+0x10a>
 8010c34:	68a2      	ldr	r2, [r4, #8]
 8010c36:	6923      	ldr	r3, [r4, #16]
 8010c38:	7da0      	ldrb	r0, [r4, #22]
 8010c3a:	7567      	strb	r7, [r4, #21]
 8010c3c:	1b92      	subs	r2, r2, r6
 8010c3e:	1b9b      	subs	r3, r3, r6
 8010c40:	f080 0001 	eor.w	r0, r0, #1
 8010c44:	60a2      	str	r2, [r4, #8]
 8010c46:	6123      	str	r3, [r4, #16]
 8010c48:	b002      	add	sp, #8
 8010c4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c4e:	68a3      	ldr	r3, [r4, #8]
 8010c50:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8010c54:	701a      	strb	r2, [r3, #0]
 8010c56:	68a3      	ldr	r3, [r4, #8]
 8010c58:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8010c5c:	701a      	strb	r2, [r3, #0]
 8010c5e:	68a3      	ldr	r3, [r4, #8]
 8010c60:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8010c64:	701a      	strb	r2, [r3, #0]
 8010c66:	68a3      	ldr	r3, [r4, #8]
 8010c68:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8010c6c:	701a      	strb	r2, [r3, #0]
 8010c6e:	68a3      	ldr	r3, [r4, #8]
 8010c70:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8010c74:	701a      	strb	r2, [r3, #0]
 8010c76:	68a5      	ldr	r5, [r4, #8]
 8010c78:	e78f      	b.n	8010b9a <ucdr_serialize_double+0x96>
 8010c7a:	4628      	mov	r0, r5
 8010c7c:	466d      	mov	r5, sp
 8010c7e:	4632      	mov	r2, r6
 8010c80:	4629      	mov	r1, r5
 8010c82:	f00c fc9a 	bl	801d5ba <memcpy>
 8010c86:	68a0      	ldr	r0, [r4, #8]
 8010c88:	4642      	mov	r2, r8
 8010c8a:	19a9      	adds	r1, r5, r6
 8010c8c:	f00c fc95 	bl	801d5ba <memcpy>
 8010c90:	e786      	b.n	8010ba0 <ucdr_serialize_double+0x9c>
 8010c92:	bf00      	nop

08010c94 <ucdr_serialize_endian_double>:
 8010c94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010c98:	460e      	mov	r6, r1
 8010c9a:	b083      	sub	sp, #12
 8010c9c:	2108      	movs	r1, #8
 8010c9e:	4604      	mov	r4, r0
 8010ca0:	ed8d 0b00 	vstr	d0, [sp]
 8010ca4:	f000 faa4 	bl	80111f0 <ucdr_buffer_alignment>
 8010ca8:	4601      	mov	r1, r0
 8010caa:	4620      	mov	r0, r4
 8010cac:	f894 8015 	ldrb.w	r8, [r4, #21]
 8010cb0:	f000 fae2 	bl	8011278 <ucdr_advance_buffer>
 8010cb4:	2108      	movs	r1, #8
 8010cb6:	4620      	mov	r0, r4
 8010cb8:	f000 fa3a 	bl	8011130 <ucdr_check_buffer_available_for>
 8010cbc:	2800      	cmp	r0, #0
 8010cbe:	d14c      	bne.n	8010d5a <ucdr_serialize_endian_double+0xc6>
 8010cc0:	e9d4 5701 	ldrd	r5, r7, [r4, #4]
 8010cc4:	42bd      	cmp	r5, r7
 8010cc6:	d943      	bls.n	8010d50 <ucdr_serialize_endian_double+0xbc>
 8010cc8:	6923      	ldr	r3, [r4, #16]
 8010cca:	60a5      	str	r5, [r4, #8]
 8010ccc:	1bed      	subs	r5, r5, r7
 8010cce:	442b      	add	r3, r5
 8010cd0:	f1c5 0908 	rsb	r9, r5, #8
 8010cd4:	6123      	str	r3, [r4, #16]
 8010cd6:	4649      	mov	r1, r9
 8010cd8:	4620      	mov	r0, r4
 8010cda:	f000 fa35 	bl	8011148 <ucdr_check_final_buffer_behavior>
 8010cde:	2800      	cmp	r0, #0
 8010ce0:	d070      	beq.n	8010dc4 <ucdr_serialize_endian_double+0x130>
 8010ce2:	2e01      	cmp	r6, #1
 8010ce4:	f000 8092 	beq.w	8010e0c <ucdr_serialize_endian_double+0x178>
 8010ce8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010cec:	703b      	strb	r3, [r7, #0]
 8010cee:	2d01      	cmp	r5, #1
 8010cf0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8010cf4:	707b      	strb	r3, [r7, #1]
 8010cf6:	d073      	beq.n	8010de0 <ucdr_serialize_endian_double+0x14c>
 8010cf8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8010cfc:	70bb      	strb	r3, [r7, #2]
 8010cfe:	2d02      	cmp	r5, #2
 8010d00:	d072      	beq.n	8010de8 <ucdr_serialize_endian_double+0x154>
 8010d02:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8010d06:	70fb      	strb	r3, [r7, #3]
 8010d08:	2d03      	cmp	r5, #3
 8010d0a:	d071      	beq.n	8010df0 <ucdr_serialize_endian_double+0x15c>
 8010d0c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8010d10:	713b      	strb	r3, [r7, #4]
 8010d12:	2d04      	cmp	r5, #4
 8010d14:	d070      	beq.n	8010df8 <ucdr_serialize_endian_double+0x164>
 8010d16:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8010d1a:	717b      	strb	r3, [r7, #5]
 8010d1c:	2d05      	cmp	r5, #5
 8010d1e:	d06f      	beq.n	8010e00 <ucdr_serialize_endian_double+0x16c>
 8010d20:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8010d24:	71bb      	strb	r3, [r7, #6]
 8010d26:	2d06      	cmp	r5, #6
 8010d28:	d06e      	beq.n	8010e08 <ucdr_serialize_endian_double+0x174>
 8010d2a:	3707      	adds	r7, #7
 8010d2c:	f89d 3000 	ldrb.w	r3, [sp]
 8010d30:	703b      	strb	r3, [r7, #0]
 8010d32:	6923      	ldr	r3, [r4, #16]
 8010d34:	68a2      	ldr	r2, [r4, #8]
 8010d36:	7da0      	ldrb	r0, [r4, #22]
 8010d38:	3308      	adds	r3, #8
 8010d3a:	444a      	add	r2, r9
 8010d3c:	1b5b      	subs	r3, r3, r5
 8010d3e:	2108      	movs	r1, #8
 8010d40:	f080 0001 	eor.w	r0, r0, #1
 8010d44:	60a2      	str	r2, [r4, #8]
 8010d46:	6123      	str	r3, [r4, #16]
 8010d48:	7561      	strb	r1, [r4, #21]
 8010d4a:	b003      	add	sp, #12
 8010d4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010d50:	2108      	movs	r1, #8
 8010d52:	4620      	mov	r0, r4
 8010d54:	f000 f9f8 	bl	8011148 <ucdr_check_final_buffer_behavior>
 8010d58:	b348      	cbz	r0, 8010dae <ucdr_serialize_endian_double+0x11a>
 8010d5a:	2e01      	cmp	r6, #1
 8010d5c:	68a3      	ldr	r3, [r4, #8]
 8010d5e:	d02c      	beq.n	8010dba <ucdr_serialize_endian_double+0x126>
 8010d60:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8010d64:	701a      	strb	r2, [r3, #0]
 8010d66:	68a3      	ldr	r3, [r4, #8]
 8010d68:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010d6c:	705a      	strb	r2, [r3, #1]
 8010d6e:	68a3      	ldr	r3, [r4, #8]
 8010d70:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8010d74:	709a      	strb	r2, [r3, #2]
 8010d76:	68a3      	ldr	r3, [r4, #8]
 8010d78:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8010d7c:	70da      	strb	r2, [r3, #3]
 8010d7e:	68a3      	ldr	r3, [r4, #8]
 8010d80:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8010d84:	711a      	strb	r2, [r3, #4]
 8010d86:	68a3      	ldr	r3, [r4, #8]
 8010d88:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8010d8c:	715a      	strb	r2, [r3, #5]
 8010d8e:	68a3      	ldr	r3, [r4, #8]
 8010d90:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8010d94:	719a      	strb	r2, [r3, #6]
 8010d96:	68a3      	ldr	r3, [r4, #8]
 8010d98:	f89d 2000 	ldrb.w	r2, [sp]
 8010d9c:	71da      	strb	r2, [r3, #7]
 8010d9e:	68a2      	ldr	r2, [r4, #8]
 8010da0:	6923      	ldr	r3, [r4, #16]
 8010da2:	3208      	adds	r2, #8
 8010da4:	3308      	adds	r3, #8
 8010da6:	2108      	movs	r1, #8
 8010da8:	60a2      	str	r2, [r4, #8]
 8010daa:	6123      	str	r3, [r4, #16]
 8010dac:	7561      	strb	r1, [r4, #21]
 8010dae:	7da0      	ldrb	r0, [r4, #22]
 8010db0:	f080 0001 	eor.w	r0, r0, #1
 8010db4:	b003      	add	sp, #12
 8010db6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010dba:	e9dd 1200 	ldrd	r1, r2, [sp]
 8010dbe:	6019      	str	r1, [r3, #0]
 8010dc0:	605a      	str	r2, [r3, #4]
 8010dc2:	e7ec      	b.n	8010d9e <ucdr_serialize_endian_double+0x10a>
 8010dc4:	68a2      	ldr	r2, [r4, #8]
 8010dc6:	6923      	ldr	r3, [r4, #16]
 8010dc8:	7da0      	ldrb	r0, [r4, #22]
 8010dca:	f884 8015 	strb.w	r8, [r4, #21]
 8010dce:	1b52      	subs	r2, r2, r5
 8010dd0:	1b5b      	subs	r3, r3, r5
 8010dd2:	f080 0001 	eor.w	r0, r0, #1
 8010dd6:	60a2      	str	r2, [r4, #8]
 8010dd8:	6123      	str	r3, [r4, #16]
 8010dda:	b003      	add	sp, #12
 8010ddc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010de0:	68a3      	ldr	r3, [r4, #8]
 8010de2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8010de6:	701a      	strb	r2, [r3, #0]
 8010de8:	68a3      	ldr	r3, [r4, #8]
 8010dea:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8010dee:	701a      	strb	r2, [r3, #0]
 8010df0:	68a3      	ldr	r3, [r4, #8]
 8010df2:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8010df6:	701a      	strb	r2, [r3, #0]
 8010df8:	68a3      	ldr	r3, [r4, #8]
 8010dfa:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8010dfe:	701a      	strb	r2, [r3, #0]
 8010e00:	68a3      	ldr	r3, [r4, #8]
 8010e02:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8010e06:	701a      	strb	r2, [r3, #0]
 8010e08:	68a7      	ldr	r7, [r4, #8]
 8010e0a:	e78f      	b.n	8010d2c <ucdr_serialize_endian_double+0x98>
 8010e0c:	466e      	mov	r6, sp
 8010e0e:	462a      	mov	r2, r5
 8010e10:	4631      	mov	r1, r6
 8010e12:	4638      	mov	r0, r7
 8010e14:	f00c fbd1 	bl	801d5ba <memcpy>
 8010e18:	68a0      	ldr	r0, [r4, #8]
 8010e1a:	464a      	mov	r2, r9
 8010e1c:	1971      	adds	r1, r6, r5
 8010e1e:	f00c fbcc 	bl	801d5ba <memcpy>
 8010e22:	e786      	b.n	8010d32 <ucdr_serialize_endian_double+0x9e>

08010e24 <ucdr_deserialize_double>:
 8010e24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010e28:	460d      	mov	r5, r1
 8010e2a:	2108      	movs	r1, #8
 8010e2c:	4604      	mov	r4, r0
 8010e2e:	f000 f9df 	bl	80111f0 <ucdr_buffer_alignment>
 8010e32:	4601      	mov	r1, r0
 8010e34:	4620      	mov	r0, r4
 8010e36:	f894 8015 	ldrb.w	r8, [r4, #21]
 8010e3a:	f000 fa1d 	bl	8011278 <ucdr_advance_buffer>
 8010e3e:	2108      	movs	r1, #8
 8010e40:	4620      	mov	r0, r4
 8010e42:	f000 f975 	bl	8011130 <ucdr_check_buffer_available_for>
 8010e46:	2800      	cmp	r0, #0
 8010e48:	d147      	bne.n	8010eda <ucdr_deserialize_double+0xb6>
 8010e4a:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8010e4e:	42be      	cmp	r6, r7
 8010e50:	d93e      	bls.n	8010ed0 <ucdr_deserialize_double+0xac>
 8010e52:	6923      	ldr	r3, [r4, #16]
 8010e54:	60a6      	str	r6, [r4, #8]
 8010e56:	1bf6      	subs	r6, r6, r7
 8010e58:	4433      	add	r3, r6
 8010e5a:	f1c6 0908 	rsb	r9, r6, #8
 8010e5e:	6123      	str	r3, [r4, #16]
 8010e60:	4649      	mov	r1, r9
 8010e62:	4620      	mov	r0, r4
 8010e64:	f000 f970 	bl	8011148 <ucdr_check_final_buffer_behavior>
 8010e68:	2800      	cmp	r0, #0
 8010e6a:	d063      	beq.n	8010f34 <ucdr_deserialize_double+0x110>
 8010e6c:	7d23      	ldrb	r3, [r4, #20]
 8010e6e:	2b01      	cmp	r3, #1
 8010e70:	f000 8083 	beq.w	8010f7a <ucdr_deserialize_double+0x156>
 8010e74:	79fb      	ldrb	r3, [r7, #7]
 8010e76:	702b      	strb	r3, [r5, #0]
 8010e78:	79bb      	ldrb	r3, [r7, #6]
 8010e7a:	706b      	strb	r3, [r5, #1]
 8010e7c:	2e01      	cmp	r6, #1
 8010e7e:	d066      	beq.n	8010f4e <ucdr_deserialize_double+0x12a>
 8010e80:	797b      	ldrb	r3, [r7, #5]
 8010e82:	70ab      	strb	r3, [r5, #2]
 8010e84:	2e02      	cmp	r6, #2
 8010e86:	f000 8089 	beq.w	8010f9c <ucdr_deserialize_double+0x178>
 8010e8a:	793b      	ldrb	r3, [r7, #4]
 8010e8c:	70eb      	strb	r3, [r5, #3]
 8010e8e:	2e03      	cmp	r6, #3
 8010e90:	f000 8082 	beq.w	8010f98 <ucdr_deserialize_double+0x174>
 8010e94:	78fb      	ldrb	r3, [r7, #3]
 8010e96:	712b      	strb	r3, [r5, #4]
 8010e98:	2e04      	cmp	r6, #4
 8010e9a:	d07b      	beq.n	8010f94 <ucdr_deserialize_double+0x170>
 8010e9c:	78bb      	ldrb	r3, [r7, #2]
 8010e9e:	716b      	strb	r3, [r5, #5]
 8010ea0:	2e05      	cmp	r6, #5
 8010ea2:	d075      	beq.n	8010f90 <ucdr_deserialize_double+0x16c>
 8010ea4:	787b      	ldrb	r3, [r7, #1]
 8010ea6:	71ab      	strb	r3, [r5, #6]
 8010ea8:	2e06      	cmp	r6, #6
 8010eaa:	f105 0507 	add.w	r5, r5, #7
 8010eae:	d062      	beq.n	8010f76 <ucdr_deserialize_double+0x152>
 8010eb0:	783b      	ldrb	r3, [r7, #0]
 8010eb2:	702b      	strb	r3, [r5, #0]
 8010eb4:	6923      	ldr	r3, [r4, #16]
 8010eb6:	68a2      	ldr	r2, [r4, #8]
 8010eb8:	7da0      	ldrb	r0, [r4, #22]
 8010eba:	2108      	movs	r1, #8
 8010ebc:	3308      	adds	r3, #8
 8010ebe:	444a      	add	r2, r9
 8010ec0:	1b9b      	subs	r3, r3, r6
 8010ec2:	7561      	strb	r1, [r4, #21]
 8010ec4:	60a2      	str	r2, [r4, #8]
 8010ec6:	6123      	str	r3, [r4, #16]
 8010ec8:	f080 0001 	eor.w	r0, r0, #1
 8010ecc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010ed0:	2108      	movs	r1, #8
 8010ed2:	4620      	mov	r0, r4
 8010ed4:	f000 f938 	bl	8011148 <ucdr_check_final_buffer_behavior>
 8010ed8:	b310      	cbz	r0, 8010f20 <ucdr_deserialize_double+0xfc>
 8010eda:	7d22      	ldrb	r2, [r4, #20]
 8010edc:	68a3      	ldr	r3, [r4, #8]
 8010ede:	2a01      	cmp	r2, #1
 8010ee0:	d023      	beq.n	8010f2a <ucdr_deserialize_double+0x106>
 8010ee2:	79db      	ldrb	r3, [r3, #7]
 8010ee4:	702b      	strb	r3, [r5, #0]
 8010ee6:	68a3      	ldr	r3, [r4, #8]
 8010ee8:	799b      	ldrb	r3, [r3, #6]
 8010eea:	706b      	strb	r3, [r5, #1]
 8010eec:	68a3      	ldr	r3, [r4, #8]
 8010eee:	795b      	ldrb	r3, [r3, #5]
 8010ef0:	70ab      	strb	r3, [r5, #2]
 8010ef2:	68a3      	ldr	r3, [r4, #8]
 8010ef4:	791b      	ldrb	r3, [r3, #4]
 8010ef6:	70eb      	strb	r3, [r5, #3]
 8010ef8:	68a3      	ldr	r3, [r4, #8]
 8010efa:	78db      	ldrb	r3, [r3, #3]
 8010efc:	712b      	strb	r3, [r5, #4]
 8010efe:	68a3      	ldr	r3, [r4, #8]
 8010f00:	789b      	ldrb	r3, [r3, #2]
 8010f02:	716b      	strb	r3, [r5, #5]
 8010f04:	68a3      	ldr	r3, [r4, #8]
 8010f06:	785b      	ldrb	r3, [r3, #1]
 8010f08:	71ab      	strb	r3, [r5, #6]
 8010f0a:	68a3      	ldr	r3, [r4, #8]
 8010f0c:	781b      	ldrb	r3, [r3, #0]
 8010f0e:	71eb      	strb	r3, [r5, #7]
 8010f10:	68a2      	ldr	r2, [r4, #8]
 8010f12:	6923      	ldr	r3, [r4, #16]
 8010f14:	3208      	adds	r2, #8
 8010f16:	3308      	adds	r3, #8
 8010f18:	2108      	movs	r1, #8
 8010f1a:	60a2      	str	r2, [r4, #8]
 8010f1c:	6123      	str	r3, [r4, #16]
 8010f1e:	7561      	strb	r1, [r4, #21]
 8010f20:	7da0      	ldrb	r0, [r4, #22]
 8010f22:	f080 0001 	eor.w	r0, r0, #1
 8010f26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010f2a:	681a      	ldr	r2, [r3, #0]
 8010f2c:	685b      	ldr	r3, [r3, #4]
 8010f2e:	606b      	str	r3, [r5, #4]
 8010f30:	602a      	str	r2, [r5, #0]
 8010f32:	e7ed      	b.n	8010f10 <ucdr_deserialize_double+0xec>
 8010f34:	68a2      	ldr	r2, [r4, #8]
 8010f36:	6923      	ldr	r3, [r4, #16]
 8010f38:	7da0      	ldrb	r0, [r4, #22]
 8010f3a:	f884 8015 	strb.w	r8, [r4, #21]
 8010f3e:	1b92      	subs	r2, r2, r6
 8010f40:	1b9b      	subs	r3, r3, r6
 8010f42:	60a2      	str	r2, [r4, #8]
 8010f44:	6123      	str	r3, [r4, #16]
 8010f46:	f080 0001 	eor.w	r0, r0, #1
 8010f4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010f4e:	68a3      	ldr	r3, [r4, #8]
 8010f50:	795b      	ldrb	r3, [r3, #5]
 8010f52:	70ab      	strb	r3, [r5, #2]
 8010f54:	3503      	adds	r5, #3
 8010f56:	68a3      	ldr	r3, [r4, #8]
 8010f58:	791b      	ldrb	r3, [r3, #4]
 8010f5a:	f805 3b01 	strb.w	r3, [r5], #1
 8010f5e:	68a3      	ldr	r3, [r4, #8]
 8010f60:	78db      	ldrb	r3, [r3, #3]
 8010f62:	f805 3b01 	strb.w	r3, [r5], #1
 8010f66:	68a3      	ldr	r3, [r4, #8]
 8010f68:	789b      	ldrb	r3, [r3, #2]
 8010f6a:	f805 3b01 	strb.w	r3, [r5], #1
 8010f6e:	68a3      	ldr	r3, [r4, #8]
 8010f70:	785b      	ldrb	r3, [r3, #1]
 8010f72:	f805 3b01 	strb.w	r3, [r5], #1
 8010f76:	68a7      	ldr	r7, [r4, #8]
 8010f78:	e79a      	b.n	8010eb0 <ucdr_deserialize_double+0x8c>
 8010f7a:	4639      	mov	r1, r7
 8010f7c:	4632      	mov	r2, r6
 8010f7e:	4628      	mov	r0, r5
 8010f80:	f00c fb1b 	bl	801d5ba <memcpy>
 8010f84:	68a1      	ldr	r1, [r4, #8]
 8010f86:	464a      	mov	r2, r9
 8010f88:	19a8      	adds	r0, r5, r6
 8010f8a:	f00c fb16 	bl	801d5ba <memcpy>
 8010f8e:	e791      	b.n	8010eb4 <ucdr_deserialize_double+0x90>
 8010f90:	3506      	adds	r5, #6
 8010f92:	e7ec      	b.n	8010f6e <ucdr_deserialize_double+0x14a>
 8010f94:	3505      	adds	r5, #5
 8010f96:	e7e6      	b.n	8010f66 <ucdr_deserialize_double+0x142>
 8010f98:	3504      	adds	r5, #4
 8010f9a:	e7e0      	b.n	8010f5e <ucdr_deserialize_double+0x13a>
 8010f9c:	3503      	adds	r5, #3
 8010f9e:	e7da      	b.n	8010f56 <ucdr_deserialize_double+0x132>

08010fa0 <ucdr_deserialize_endian_double>:
 8010fa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010fa4:	460f      	mov	r7, r1
 8010fa6:	2108      	movs	r1, #8
 8010fa8:	4604      	mov	r4, r0
 8010faa:	4615      	mov	r5, r2
 8010fac:	f000 f920 	bl	80111f0 <ucdr_buffer_alignment>
 8010fb0:	4601      	mov	r1, r0
 8010fb2:	4620      	mov	r0, r4
 8010fb4:	f894 9015 	ldrb.w	r9, [r4, #21]
 8010fb8:	f000 f95e 	bl	8011278 <ucdr_advance_buffer>
 8010fbc:	2108      	movs	r1, #8
 8010fbe:	4620      	mov	r0, r4
 8010fc0:	f000 f8b6 	bl	8011130 <ucdr_check_buffer_available_for>
 8010fc4:	2800      	cmp	r0, #0
 8010fc6:	d14f      	bne.n	8011068 <ucdr_deserialize_endian_double+0xc8>
 8010fc8:	e9d4 6801 	ldrd	r6, r8, [r4, #4]
 8010fcc:	4546      	cmp	r6, r8
 8010fce:	d946      	bls.n	801105e <ucdr_deserialize_endian_double+0xbe>
 8010fd0:	6923      	ldr	r3, [r4, #16]
 8010fd2:	60a6      	str	r6, [r4, #8]
 8010fd4:	eba6 0608 	sub.w	r6, r6, r8
 8010fd8:	4433      	add	r3, r6
 8010fda:	f1c6 0a08 	rsb	sl, r6, #8
 8010fde:	6123      	str	r3, [r4, #16]
 8010fe0:	4651      	mov	r1, sl
 8010fe2:	4620      	mov	r0, r4
 8010fe4:	f000 f8b0 	bl	8011148 <ucdr_check_final_buffer_behavior>
 8010fe8:	2800      	cmp	r0, #0
 8010fea:	d069      	beq.n	80110c0 <ucdr_deserialize_endian_double+0x120>
 8010fec:	2f01      	cmp	r7, #1
 8010fee:	f000 808b 	beq.w	8011108 <ucdr_deserialize_endian_double+0x168>
 8010ff2:	f898 3007 	ldrb.w	r3, [r8, #7]
 8010ff6:	702b      	strb	r3, [r5, #0]
 8010ff8:	f898 3006 	ldrb.w	r3, [r8, #6]
 8010ffc:	706b      	strb	r3, [r5, #1]
 8010ffe:	2e01      	cmp	r6, #1
 8011000:	d06b      	beq.n	80110da <ucdr_deserialize_endian_double+0x13a>
 8011002:	f898 3005 	ldrb.w	r3, [r8, #5]
 8011006:	70ab      	strb	r3, [r5, #2]
 8011008:	2e02      	cmp	r6, #2
 801100a:	f000 808e 	beq.w	801112a <ucdr_deserialize_endian_double+0x18a>
 801100e:	f898 3004 	ldrb.w	r3, [r8, #4]
 8011012:	70eb      	strb	r3, [r5, #3]
 8011014:	2e03      	cmp	r6, #3
 8011016:	f000 8086 	beq.w	8011126 <ucdr_deserialize_endian_double+0x186>
 801101a:	f898 3003 	ldrb.w	r3, [r8, #3]
 801101e:	712b      	strb	r3, [r5, #4]
 8011020:	2e04      	cmp	r6, #4
 8011022:	d07e      	beq.n	8011122 <ucdr_deserialize_endian_double+0x182>
 8011024:	f898 3002 	ldrb.w	r3, [r8, #2]
 8011028:	716b      	strb	r3, [r5, #5]
 801102a:	2e05      	cmp	r6, #5
 801102c:	d077      	beq.n	801111e <ucdr_deserialize_endian_double+0x17e>
 801102e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8011032:	71ab      	strb	r3, [r5, #6]
 8011034:	2e06      	cmp	r6, #6
 8011036:	f105 0507 	add.w	r5, r5, #7
 801103a:	d062      	beq.n	8011102 <ucdr_deserialize_endian_double+0x162>
 801103c:	f898 3000 	ldrb.w	r3, [r8]
 8011040:	702b      	strb	r3, [r5, #0]
 8011042:	6923      	ldr	r3, [r4, #16]
 8011044:	68a2      	ldr	r2, [r4, #8]
 8011046:	7da0      	ldrb	r0, [r4, #22]
 8011048:	2108      	movs	r1, #8
 801104a:	3308      	adds	r3, #8
 801104c:	4452      	add	r2, sl
 801104e:	1b9b      	subs	r3, r3, r6
 8011050:	7561      	strb	r1, [r4, #21]
 8011052:	60a2      	str	r2, [r4, #8]
 8011054:	6123      	str	r3, [r4, #16]
 8011056:	f080 0001 	eor.w	r0, r0, #1
 801105a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801105e:	2108      	movs	r1, #8
 8011060:	4620      	mov	r0, r4
 8011062:	f000 f871 	bl	8011148 <ucdr_check_final_buffer_behavior>
 8011066:	b308      	cbz	r0, 80110ac <ucdr_deserialize_endian_double+0x10c>
 8011068:	2f01      	cmp	r7, #1
 801106a:	68a3      	ldr	r3, [r4, #8]
 801106c:	d023      	beq.n	80110b6 <ucdr_deserialize_endian_double+0x116>
 801106e:	79db      	ldrb	r3, [r3, #7]
 8011070:	702b      	strb	r3, [r5, #0]
 8011072:	68a3      	ldr	r3, [r4, #8]
 8011074:	799b      	ldrb	r3, [r3, #6]
 8011076:	706b      	strb	r3, [r5, #1]
 8011078:	68a3      	ldr	r3, [r4, #8]
 801107a:	795b      	ldrb	r3, [r3, #5]
 801107c:	70ab      	strb	r3, [r5, #2]
 801107e:	68a3      	ldr	r3, [r4, #8]
 8011080:	791b      	ldrb	r3, [r3, #4]
 8011082:	70eb      	strb	r3, [r5, #3]
 8011084:	68a3      	ldr	r3, [r4, #8]
 8011086:	78db      	ldrb	r3, [r3, #3]
 8011088:	712b      	strb	r3, [r5, #4]
 801108a:	68a3      	ldr	r3, [r4, #8]
 801108c:	789b      	ldrb	r3, [r3, #2]
 801108e:	716b      	strb	r3, [r5, #5]
 8011090:	68a3      	ldr	r3, [r4, #8]
 8011092:	785b      	ldrb	r3, [r3, #1]
 8011094:	71ab      	strb	r3, [r5, #6]
 8011096:	68a3      	ldr	r3, [r4, #8]
 8011098:	781b      	ldrb	r3, [r3, #0]
 801109a:	71eb      	strb	r3, [r5, #7]
 801109c:	68a2      	ldr	r2, [r4, #8]
 801109e:	6923      	ldr	r3, [r4, #16]
 80110a0:	3208      	adds	r2, #8
 80110a2:	3308      	adds	r3, #8
 80110a4:	2108      	movs	r1, #8
 80110a6:	60a2      	str	r2, [r4, #8]
 80110a8:	6123      	str	r3, [r4, #16]
 80110aa:	7561      	strb	r1, [r4, #21]
 80110ac:	7da0      	ldrb	r0, [r4, #22]
 80110ae:	f080 0001 	eor.w	r0, r0, #1
 80110b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80110b6:	681a      	ldr	r2, [r3, #0]
 80110b8:	685b      	ldr	r3, [r3, #4]
 80110ba:	606b      	str	r3, [r5, #4]
 80110bc:	602a      	str	r2, [r5, #0]
 80110be:	e7ed      	b.n	801109c <ucdr_deserialize_endian_double+0xfc>
 80110c0:	68a2      	ldr	r2, [r4, #8]
 80110c2:	6923      	ldr	r3, [r4, #16]
 80110c4:	7da0      	ldrb	r0, [r4, #22]
 80110c6:	f884 9015 	strb.w	r9, [r4, #21]
 80110ca:	1b92      	subs	r2, r2, r6
 80110cc:	1b9b      	subs	r3, r3, r6
 80110ce:	60a2      	str	r2, [r4, #8]
 80110d0:	6123      	str	r3, [r4, #16]
 80110d2:	f080 0001 	eor.w	r0, r0, #1
 80110d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80110da:	68a3      	ldr	r3, [r4, #8]
 80110dc:	795b      	ldrb	r3, [r3, #5]
 80110de:	70ab      	strb	r3, [r5, #2]
 80110e0:	3503      	adds	r5, #3
 80110e2:	68a3      	ldr	r3, [r4, #8]
 80110e4:	791b      	ldrb	r3, [r3, #4]
 80110e6:	f805 3b01 	strb.w	r3, [r5], #1
 80110ea:	68a3      	ldr	r3, [r4, #8]
 80110ec:	78db      	ldrb	r3, [r3, #3]
 80110ee:	f805 3b01 	strb.w	r3, [r5], #1
 80110f2:	68a3      	ldr	r3, [r4, #8]
 80110f4:	789b      	ldrb	r3, [r3, #2]
 80110f6:	f805 3b01 	strb.w	r3, [r5], #1
 80110fa:	68a3      	ldr	r3, [r4, #8]
 80110fc:	785b      	ldrb	r3, [r3, #1]
 80110fe:	f805 3b01 	strb.w	r3, [r5], #1
 8011102:	f8d4 8008 	ldr.w	r8, [r4, #8]
 8011106:	e799      	b.n	801103c <ucdr_deserialize_endian_double+0x9c>
 8011108:	4641      	mov	r1, r8
 801110a:	4632      	mov	r2, r6
 801110c:	4628      	mov	r0, r5
 801110e:	f00c fa54 	bl	801d5ba <memcpy>
 8011112:	68a1      	ldr	r1, [r4, #8]
 8011114:	4652      	mov	r2, sl
 8011116:	19a8      	adds	r0, r5, r6
 8011118:	f00c fa4f 	bl	801d5ba <memcpy>
 801111c:	e791      	b.n	8011042 <ucdr_deserialize_endian_double+0xa2>
 801111e:	3506      	adds	r5, #6
 8011120:	e7eb      	b.n	80110fa <ucdr_deserialize_endian_double+0x15a>
 8011122:	3505      	adds	r5, #5
 8011124:	e7e5      	b.n	80110f2 <ucdr_deserialize_endian_double+0x152>
 8011126:	3504      	adds	r5, #4
 8011128:	e7df      	b.n	80110ea <ucdr_deserialize_endian_double+0x14a>
 801112a:	3503      	adds	r5, #3
 801112c:	e7d9      	b.n	80110e2 <ucdr_deserialize_endian_double+0x142>
 801112e:	bf00      	nop

08011130 <ucdr_check_buffer_available_for>:
 8011130:	7d83      	ldrb	r3, [r0, #22]
 8011132:	b93b      	cbnz	r3, 8011144 <ucdr_check_buffer_available_for+0x14>
 8011134:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 8011138:	440b      	add	r3, r1
 801113a:	4298      	cmp	r0, r3
 801113c:	bf34      	ite	cc
 801113e:	2000      	movcc	r0, #0
 8011140:	2001      	movcs	r0, #1
 8011142:	4770      	bx	lr
 8011144:	2000      	movs	r0, #0
 8011146:	4770      	bx	lr

08011148 <ucdr_check_final_buffer_behavior>:
 8011148:	7d83      	ldrb	r3, [r0, #22]
 801114a:	b943      	cbnz	r3, 801115e <ucdr_check_final_buffer_behavior+0x16>
 801114c:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 8011150:	4291      	cmp	r1, r2
 8011152:	b510      	push	{r4, lr}
 8011154:	4604      	mov	r4, r0
 8011156:	d205      	bcs.n	8011164 <ucdr_check_final_buffer_behavior+0x1c>
 8011158:	2301      	movs	r3, #1
 801115a:	4618      	mov	r0, r3
 801115c:	bd10      	pop	{r4, pc}
 801115e:	2300      	movs	r3, #0
 8011160:	4618      	mov	r0, r3
 8011162:	4770      	bx	lr
 8011164:	6982      	ldr	r2, [r0, #24]
 8011166:	b13a      	cbz	r2, 8011178 <ucdr_check_final_buffer_behavior+0x30>
 8011168:	69c1      	ldr	r1, [r0, #28]
 801116a:	4790      	blx	r2
 801116c:	f080 0301 	eor.w	r3, r0, #1
 8011170:	b2db      	uxtb	r3, r3
 8011172:	75a0      	strb	r0, [r4, #22]
 8011174:	4618      	mov	r0, r3
 8011176:	bd10      	pop	{r4, pc}
 8011178:	2001      	movs	r0, #1
 801117a:	75a0      	strb	r0, [r4, #22]
 801117c:	e7fa      	b.n	8011174 <ucdr_check_final_buffer_behavior+0x2c>
 801117e:	bf00      	nop

08011180 <ucdr_set_on_full_buffer_callback>:
 8011180:	e9c0 1206 	strd	r1, r2, [r0, #24]
 8011184:	4770      	bx	lr
 8011186:	bf00      	nop

08011188 <ucdr_init_buffer_origin_offset_endian>:
 8011188:	b410      	push	{r4}
 801118a:	9c01      	ldr	r4, [sp, #4]
 801118c:	6001      	str	r1, [r0, #0]
 801118e:	440a      	add	r2, r1
 8011190:	6042      	str	r2, [r0, #4]
 8011192:	190a      	adds	r2, r1, r4
 8011194:	441c      	add	r4, r3
 8011196:	e9c0 3403 	strd	r3, r4, [r0, #12]
 801119a:	6082      	str	r2, [r0, #8]
 801119c:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80111a0:	7503      	strb	r3, [r0, #20]
 80111a2:	2200      	movs	r2, #0
 80111a4:	e9c0 2206 	strd	r2, r2, [r0, #24]
 80111a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80111ac:	7542      	strb	r2, [r0, #21]
 80111ae:	7582      	strb	r2, [r0, #22]
 80111b0:	4770      	bx	lr
 80111b2:	bf00      	nop

080111b4 <ucdr_init_buffer_origin_offset>:
 80111b4:	b510      	push	{r4, lr}
 80111b6:	b082      	sub	sp, #8
 80111b8:	9c04      	ldr	r4, [sp, #16]
 80111ba:	9400      	str	r4, [sp, #0]
 80111bc:	2401      	movs	r4, #1
 80111be:	9401      	str	r4, [sp, #4]
 80111c0:	f7ff ffe2 	bl	8011188 <ucdr_init_buffer_origin_offset_endian>
 80111c4:	b002      	add	sp, #8
 80111c6:	bd10      	pop	{r4, pc}

080111c8 <ucdr_init_buffer_origin>:
 80111c8:	b510      	push	{r4, lr}
 80111ca:	b082      	sub	sp, #8
 80111cc:	2400      	movs	r4, #0
 80111ce:	9400      	str	r4, [sp, #0]
 80111d0:	f7ff fff0 	bl	80111b4 <ucdr_init_buffer_origin_offset>
 80111d4:	b002      	add	sp, #8
 80111d6:	bd10      	pop	{r4, pc}

080111d8 <ucdr_init_buffer>:
 80111d8:	2300      	movs	r3, #0
 80111da:	f7ff bff5 	b.w	80111c8 <ucdr_init_buffer_origin>
 80111de:	bf00      	nop

080111e0 <ucdr_alignment>:
 80111e0:	fbb0 f3f1 	udiv	r3, r0, r1
 80111e4:	fb03 0011 	mls	r0, r3, r1, r0
 80111e8:	1a08      	subs	r0, r1, r0
 80111ea:	3901      	subs	r1, #1
 80111ec:	4008      	ands	r0, r1
 80111ee:	4770      	bx	lr

080111f0 <ucdr_buffer_alignment>:
 80111f0:	7d43      	ldrb	r3, [r0, #21]
 80111f2:	428b      	cmp	r3, r1
 80111f4:	d208      	bcs.n	8011208 <ucdr_buffer_alignment+0x18>
 80111f6:	6900      	ldr	r0, [r0, #16]
 80111f8:	fbb0 f3f1 	udiv	r3, r0, r1
 80111fc:	fb01 0013 	mls	r0, r1, r3, r0
 8011200:	1a08      	subs	r0, r1, r0
 8011202:	3901      	subs	r1, #1
 8011204:	4008      	ands	r0, r1
 8011206:	4770      	bx	lr
 8011208:	2000      	movs	r0, #0
 801120a:	4770      	bx	lr

0801120c <ucdr_align_to>:
 801120c:	b538      	push	{r3, r4, r5, lr}
 801120e:	4604      	mov	r4, r0
 8011210:	460d      	mov	r5, r1
 8011212:	f7ff ffed 	bl	80111f0 <ucdr_buffer_alignment>
 8011216:	68a3      	ldr	r3, [r4, #8]
 8011218:	6861      	ldr	r1, [r4, #4]
 801121a:	6922      	ldr	r2, [r4, #16]
 801121c:	7565      	strb	r5, [r4, #21]
 801121e:	4403      	add	r3, r0
 8011220:	428b      	cmp	r3, r1
 8011222:	bf28      	it	cs
 8011224:	460b      	movcs	r3, r1
 8011226:	4402      	add	r2, r0
 8011228:	60a3      	str	r3, [r4, #8]
 801122a:	6122      	str	r2, [r4, #16]
 801122c:	bd38      	pop	{r3, r4, r5, pc}
 801122e:	bf00      	nop

08011230 <ucdr_buffer_length>:
 8011230:	6882      	ldr	r2, [r0, #8]
 8011232:	6800      	ldr	r0, [r0, #0]
 8011234:	1a10      	subs	r0, r2, r0
 8011236:	4770      	bx	lr

08011238 <ucdr_buffer_remaining>:
 8011238:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 801123c:	1a10      	subs	r0, r2, r0
 801123e:	4770      	bx	lr

08011240 <ucdr_check_final_buffer_behavior_array>:
 8011240:	b538      	push	{r3, r4, r5, lr}
 8011242:	7d83      	ldrb	r3, [r0, #22]
 8011244:	b963      	cbnz	r3, 8011260 <ucdr_check_final_buffer_behavior_array+0x20>
 8011246:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 801124a:	429a      	cmp	r2, r3
 801124c:	4604      	mov	r4, r0
 801124e:	460d      	mov	r5, r1
 8011250:	d308      	bcc.n	8011264 <ucdr_check_final_buffer_behavior_array+0x24>
 8011252:	b139      	cbz	r1, 8011264 <ucdr_check_final_buffer_behavior_array+0x24>
 8011254:	6983      	ldr	r3, [r0, #24]
 8011256:	b163      	cbz	r3, 8011272 <ucdr_check_final_buffer_behavior_array+0x32>
 8011258:	69c1      	ldr	r1, [r0, #28]
 801125a:	4798      	blx	r3
 801125c:	75a0      	strb	r0, [r4, #22]
 801125e:	b108      	cbz	r0, 8011264 <ucdr_check_final_buffer_behavior_array+0x24>
 8011260:	2000      	movs	r0, #0
 8011262:	bd38      	pop	{r3, r4, r5, pc}
 8011264:	4620      	mov	r0, r4
 8011266:	f7ff ffe7 	bl	8011238 <ucdr_buffer_remaining>
 801126a:	42a8      	cmp	r0, r5
 801126c:	bf28      	it	cs
 801126e:	4628      	movcs	r0, r5
 8011270:	bd38      	pop	{r3, r4, r5, pc}
 8011272:	2301      	movs	r3, #1
 8011274:	7583      	strb	r3, [r0, #22]
 8011276:	e7f3      	b.n	8011260 <ucdr_check_final_buffer_behavior_array+0x20>

08011278 <ucdr_advance_buffer>:
 8011278:	b538      	push	{r3, r4, r5, lr}
 801127a:	4604      	mov	r4, r0
 801127c:	460d      	mov	r5, r1
 801127e:	f7ff ff57 	bl	8011130 <ucdr_check_buffer_available_for>
 8011282:	b178      	cbz	r0, 80112a4 <ucdr_advance_buffer+0x2c>
 8011284:	6923      	ldr	r3, [r4, #16]
 8011286:	68a2      	ldr	r2, [r4, #8]
 8011288:	442b      	add	r3, r5
 801128a:	6123      	str	r3, [r4, #16]
 801128c:	2301      	movs	r3, #1
 801128e:	442a      	add	r2, r5
 8011290:	7563      	strb	r3, [r4, #21]
 8011292:	60a2      	str	r2, [r4, #8]
 8011294:	bd38      	pop	{r3, r4, r5, pc}
 8011296:	68a2      	ldr	r2, [r4, #8]
 8011298:	6923      	ldr	r3, [r4, #16]
 801129a:	4402      	add	r2, r0
 801129c:	4403      	add	r3, r0
 801129e:	1a2d      	subs	r5, r5, r0
 80112a0:	60a2      	str	r2, [r4, #8]
 80112a2:	6123      	str	r3, [r4, #16]
 80112a4:	2201      	movs	r2, #1
 80112a6:	4629      	mov	r1, r5
 80112a8:	4620      	mov	r0, r4
 80112aa:	f7ff ffc9 	bl	8011240 <ucdr_check_final_buffer_behavior_array>
 80112ae:	2800      	cmp	r0, #0
 80112b0:	d1f1      	bne.n	8011296 <ucdr_advance_buffer+0x1e>
 80112b2:	2301      	movs	r3, #1
 80112b4:	7563      	strb	r3, [r4, #21]
 80112b6:	bd38      	pop	{r3, r4, r5, pc}

080112b8 <ucdr_serialize_sequence_char>:
 80112b8:	b570      	push	{r4, r5, r6, lr}
 80112ba:	460e      	mov	r6, r1
 80112bc:	4615      	mov	r5, r2
 80112be:	7d01      	ldrb	r1, [r0, #20]
 80112c0:	4604      	mov	r4, r0
 80112c2:	f7fe fcdb 	bl	800fc7c <ucdr_serialize_endian_uint32_t>
 80112c6:	b90d      	cbnz	r5, 80112cc <ucdr_serialize_sequence_char+0x14>
 80112c8:	2001      	movs	r0, #1
 80112ca:	bd70      	pop	{r4, r5, r6, pc}
 80112cc:	7d21      	ldrb	r1, [r4, #20]
 80112ce:	462b      	mov	r3, r5
 80112d0:	4632      	mov	r2, r6
 80112d2:	4620      	mov	r0, r4
 80112d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80112d8:	f7fd bec0 	b.w	800f05c <ucdr_serialize_endian_array_char>

080112dc <ucdr_deserialize_sequence_char>:
 80112dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80112e0:	461d      	mov	r5, r3
 80112e2:	4616      	mov	r6, r2
 80112e4:	460f      	mov	r7, r1
 80112e6:	461a      	mov	r2, r3
 80112e8:	7d01      	ldrb	r1, [r0, #20]
 80112ea:	4604      	mov	r4, r0
 80112ec:	f7fe fde4 	bl	800feb8 <ucdr_deserialize_endian_uint32_t>
 80112f0:	682b      	ldr	r3, [r5, #0]
 80112f2:	429e      	cmp	r6, r3
 80112f4:	d208      	bcs.n	8011308 <ucdr_deserialize_sequence_char+0x2c>
 80112f6:	2201      	movs	r2, #1
 80112f8:	75a2      	strb	r2, [r4, #22]
 80112fa:	7d21      	ldrb	r1, [r4, #20]
 80112fc:	463a      	mov	r2, r7
 80112fe:	4620      	mov	r0, r4
 8011300:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011304:	f7fd bedc 	b.w	800f0c0 <ucdr_deserialize_endian_array_char>
 8011308:	2b00      	cmp	r3, #0
 801130a:	d1f6      	bne.n	80112fa <ucdr_deserialize_sequence_char+0x1e>
 801130c:	2001      	movs	r0, #1
 801130e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011312:	bf00      	nop

08011314 <ucdr_serialize_sequence_uint8_t>:
 8011314:	b570      	push	{r4, r5, r6, lr}
 8011316:	460e      	mov	r6, r1
 8011318:	4615      	mov	r5, r2
 801131a:	7d01      	ldrb	r1, [r0, #20]
 801131c:	4604      	mov	r4, r0
 801131e:	f7fe fcad 	bl	800fc7c <ucdr_serialize_endian_uint32_t>
 8011322:	b90d      	cbnz	r5, 8011328 <ucdr_serialize_sequence_uint8_t+0x14>
 8011324:	2001      	movs	r0, #1
 8011326:	bd70      	pop	{r4, r5, r6, pc}
 8011328:	7d21      	ldrb	r1, [r4, #20]
 801132a:	462b      	mov	r3, r5
 801132c:	4632      	mov	r2, r6
 801132e:	4620      	mov	r0, r4
 8011330:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011334:	f7fd bf28 	b.w	800f188 <ucdr_serialize_endian_array_uint8_t>

08011338 <ucdr_deserialize_sequence_uint8_t>:
 8011338:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801133c:	461d      	mov	r5, r3
 801133e:	4616      	mov	r6, r2
 8011340:	460f      	mov	r7, r1
 8011342:	461a      	mov	r2, r3
 8011344:	7d01      	ldrb	r1, [r0, #20]
 8011346:	4604      	mov	r4, r0
 8011348:	f7fe fdb6 	bl	800feb8 <ucdr_deserialize_endian_uint32_t>
 801134c:	682b      	ldr	r3, [r5, #0]
 801134e:	429e      	cmp	r6, r3
 8011350:	d208      	bcs.n	8011364 <ucdr_deserialize_sequence_uint8_t+0x2c>
 8011352:	2201      	movs	r2, #1
 8011354:	75a2      	strb	r2, [r4, #22]
 8011356:	7d21      	ldrb	r1, [r4, #20]
 8011358:	463a      	mov	r2, r7
 801135a:	4620      	mov	r0, r4
 801135c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011360:	f7fd bf76 	b.w	800f250 <ucdr_deserialize_endian_array_uint8_t>
 8011364:	2b00      	cmp	r3, #0
 8011366:	d1f6      	bne.n	8011356 <ucdr_deserialize_sequence_uint8_t+0x1e>
 8011368:	2001      	movs	r0, #1
 801136a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801136e:	bf00      	nop

08011370 <uxr_buffer_delete_entity>:
 8011370:	b510      	push	{r4, lr}
 8011372:	2300      	movs	r3, #0
 8011374:	b08e      	sub	sp, #56	@ 0x38
 8011376:	e9cd 3201 	strd	r3, r2, [sp, #4]
 801137a:	2303      	movs	r3, #3
 801137c:	9300      	str	r3, [sp, #0]
 801137e:	2204      	movs	r2, #4
 8011380:	ab06      	add	r3, sp, #24
 8011382:	4604      	mov	r4, r0
 8011384:	f001 f928 	bl	80125d8 <uxr_prepare_stream_to_write_submessage>
 8011388:	b918      	cbnz	r0, 8011392 <uxr_buffer_delete_entity+0x22>
 801138a:	4604      	mov	r4, r0
 801138c:	4620      	mov	r0, r4
 801138e:	b00e      	add	sp, #56	@ 0x38
 8011390:	bd10      	pop	{r4, pc}
 8011392:	9902      	ldr	r1, [sp, #8]
 8011394:	aa05      	add	r2, sp, #20
 8011396:	4620      	mov	r0, r4
 8011398:	f001 fa58 	bl	801284c <uxr_init_base_object_request>
 801139c:	a905      	add	r1, sp, #20
 801139e:	4604      	mov	r4, r0
 80113a0:	a806      	add	r0, sp, #24
 80113a2:	f002 fc95 	bl	8013cd0 <uxr_serialize_DELETE_Payload>
 80113a6:	4620      	mov	r0, r4
 80113a8:	b00e      	add	sp, #56	@ 0x38
 80113aa:	bd10      	pop	{r4, pc}

080113ac <uxr_common_create_entity>:
 80113ac:	b510      	push	{r4, lr}
 80113ae:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 80113b2:	b08c      	sub	sp, #48	@ 0x30
 80113b4:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80113b8:	f1bc 0f01 	cmp.w	ip, #1
 80113bc:	bf08      	it	eq
 80113be:	f003 0201 	andeq.w	r2, r3, #1
 80113c2:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 80113c6:	bf18      	it	ne
 80113c8:	2200      	movne	r2, #0
 80113ca:	330e      	adds	r3, #14
 80113cc:	441a      	add	r2, r3
 80113ce:	2301      	movs	r3, #1
 80113d0:	e9cd 3100 	strd	r3, r1, [sp]
 80113d4:	b292      	uxth	r2, r2
 80113d6:	9903      	ldr	r1, [sp, #12]
 80113d8:	ab04      	add	r3, sp, #16
 80113da:	4604      	mov	r4, r0
 80113dc:	f001 f8fc 	bl	80125d8 <uxr_prepare_stream_to_write_submessage>
 80113e0:	b918      	cbnz	r0, 80113ea <uxr_common_create_entity+0x3e>
 80113e2:	4604      	mov	r4, r0
 80113e4:	4620      	mov	r0, r4
 80113e6:	b00c      	add	sp, #48	@ 0x30
 80113e8:	bd10      	pop	{r4, pc}
 80113ea:	9902      	ldr	r1, [sp, #8]
 80113ec:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80113ee:	4620      	mov	r0, r4
 80113f0:	f001 fa2c 	bl	801284c <uxr_init_base_object_request>
 80113f4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80113f6:	4604      	mov	r4, r0
 80113f8:	a804      	add	r0, sp, #16
 80113fa:	f002 fbc7 	bl	8013b8c <uxr_serialize_CREATE_Payload>
 80113fe:	4620      	mov	r0, r4
 8011400:	b00c      	add	sp, #48	@ 0x30
 8011402:	bd10      	pop	{r4, pc}

08011404 <uxr_buffer_create_participant_bin>:
 8011404:	b570      	push	{r4, r5, r6, lr}
 8011406:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 801140a:	ac11      	add	r4, sp, #68	@ 0x44
 801140c:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 8011410:	2303      	movs	r3, #3
 8011412:	7223      	strb	r3, [r4, #8]
 8011414:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 8011416:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 801141a:	e9cd 2102 	strd	r2, r1, [sp, #8]
 801141e:	2201      	movs	r2, #1
 8011420:	2100      	movs	r1, #0
 8011422:	4605      	mov	r5, r0
 8011424:	7122      	strb	r2, [r4, #4]
 8011426:	f88d 1014 	strb.w	r1, [sp, #20]
 801142a:	b1cb      	cbz	r3, 8011460 <uxr_buffer_create_participant_bin+0x5c>
 801142c:	f88d 201c 	strb.w	r2, [sp, #28]
 8011430:	9308      	str	r3, [sp, #32]
 8011432:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011436:	a915      	add	r1, sp, #84	@ 0x54
 8011438:	a809      	add	r0, sp, #36	@ 0x24
 801143a:	f7ff fecd 	bl	80111d8 <ucdr_init_buffer>
 801143e:	a905      	add	r1, sp, #20
 8011440:	a809      	add	r0, sp, #36	@ 0x24
 8011442:	f001 ff7b 	bl	801333c <uxr_serialize_OBJK_DomainParticipant_Binary>
 8011446:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011448:	9600      	str	r6, [sp, #0]
 801144a:	9401      	str	r4, [sp, #4]
 801144c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8011450:	60e3      	str	r3, [r4, #12]
 8011452:	4628      	mov	r0, r5
 8011454:	b29b      	uxth	r3, r3
 8011456:	f7ff ffa9 	bl	80113ac <uxr_common_create_entity>
 801145a:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 801145e:	bd70      	pop	{r4, r5, r6, pc}
 8011460:	f88d 301c 	strb.w	r3, [sp, #28]
 8011464:	e7e5      	b.n	8011432 <uxr_buffer_create_participant_bin+0x2e>
 8011466:	bf00      	nop

08011468 <uxr_buffer_create_topic_bin>:
 8011468:	b570      	push	{r4, r5, r6, lr}
 801146a:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 801146e:	4605      	mov	r5, r0
 8011470:	9105      	str	r1, [sp, #20]
 8011472:	4618      	mov	r0, r3
 8011474:	a997      	add	r1, sp, #604	@ 0x25c
 8011476:	2302      	movs	r3, #2
 8011478:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 801147c:	9204      	str	r2, [sp, #16]
 801147e:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 8011482:	f000 f9a9 	bl	80117d8 <uxr_object_id_to_raw>
 8011486:	2303      	movs	r3, #3
 8011488:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 801148c:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 801148e:	9306      	str	r3, [sp, #24]
 8011490:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 8011492:	930a      	str	r3, [sp, #40]	@ 0x28
 8011494:	2301      	movs	r3, #1
 8011496:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 801149a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801149e:	2300      	movs	r3, #0
 80114a0:	a917      	add	r1, sp, #92	@ 0x5c
 80114a2:	a80b      	add	r0, sp, #44	@ 0x2c
 80114a4:	f88d 301c 	strb.w	r3, [sp, #28]
 80114a8:	f7ff fe96 	bl	80111d8 <ucdr_init_buffer>
 80114ac:	a906      	add	r1, sp, #24
 80114ae:	a80b      	add	r0, sp, #44	@ 0x2c
 80114b0:	f001 ff66 	bl	8013380 <uxr_serialize_OBJK_Topic_Binary>
 80114b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80114b6:	9316      	str	r3, [sp, #88]	@ 0x58
 80114b8:	ac13      	add	r4, sp, #76	@ 0x4c
 80114ba:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80114be:	9600      	str	r6, [sp, #0]
 80114c0:	9401      	str	r4, [sp, #4]
 80114c2:	b29b      	uxth	r3, r3
 80114c4:	4628      	mov	r0, r5
 80114c6:	f7ff ff71 	bl	80113ac <uxr_common_create_entity>
 80114ca:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 80114ce:	bd70      	pop	{r4, r5, r6, pc}

080114d0 <uxr_buffer_create_publisher_bin>:
 80114d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80114d2:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 80114d6:	4605      	mov	r5, r0
 80114d8:	9105      	str	r1, [sp, #20]
 80114da:	4618      	mov	r0, r3
 80114dc:	2603      	movs	r6, #3
 80114de:	a992      	add	r1, sp, #584	@ 0x248
 80114e0:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 80114e4:	9204      	str	r2, [sp, #16]
 80114e6:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 80114ea:	f000 f975 	bl	80117d8 <uxr_object_id_to_raw>
 80114ee:	2300      	movs	r3, #0
 80114f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80114f4:	a912      	add	r1, sp, #72	@ 0x48
 80114f6:	a806      	add	r0, sp, #24
 80114f8:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 80114fc:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 8011500:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 8011504:	f7ff fe68 	bl	80111d8 <ucdr_init_buffer>
 8011508:	a993      	add	r1, sp, #588	@ 0x24c
 801150a:	a806      	add	r0, sp, #24
 801150c:	f001 ffee 	bl	80134ec <uxr_serialize_OBJK_Publisher_Binary>
 8011510:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011512:	9311      	str	r3, [sp, #68]	@ 0x44
 8011514:	ac0e      	add	r4, sp, #56	@ 0x38
 8011516:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 801151a:	9700      	str	r7, [sp, #0]
 801151c:	9401      	str	r4, [sp, #4]
 801151e:	b29b      	uxth	r3, r3
 8011520:	4628      	mov	r0, r5
 8011522:	f7ff ff43 	bl	80113ac <uxr_common_create_entity>
 8011526:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 801152a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801152c <uxr_buffer_create_subscriber_bin>:
 801152c:	b570      	push	{r4, r5, r6, lr}
 801152e:	f5ad 6d91 	sub.w	sp, sp, #1160	@ 0x488
 8011532:	4605      	mov	r5, r0
 8011534:	9105      	str	r1, [sp, #20]
 8011536:	4618      	mov	r0, r3
 8011538:	a992      	add	r1, sp, #584	@ 0x248
 801153a:	2304      	movs	r3, #4
 801153c:	f89d 6498 	ldrb.w	r6, [sp, #1176]	@ 0x498
 8011540:	9204      	str	r2, [sp, #16]
 8011542:	f88d 303c 	strb.w	r3, [sp, #60]	@ 0x3c
 8011546:	f000 f947 	bl	80117d8 <uxr_object_id_to_raw>
 801154a:	2203      	movs	r2, #3
 801154c:	2300      	movs	r3, #0
 801154e:	f88d 2040 	strb.w	r2, [sp, #64]	@ 0x40
 8011552:	a912      	add	r1, sp, #72	@ 0x48
 8011554:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011558:	a806      	add	r0, sp, #24
 801155a:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 801155e:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 8011562:	f7ff fe39 	bl	80111d8 <ucdr_init_buffer>
 8011566:	a993      	add	r1, sp, #588	@ 0x24c
 8011568:	a806      	add	r0, sp, #24
 801156a:	f002 f871 	bl	8013650 <uxr_serialize_OBJK_Subscriber_Binary>
 801156e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011570:	9311      	str	r3, [sp, #68]	@ 0x44
 8011572:	ac0e      	add	r4, sp, #56	@ 0x38
 8011574:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8011578:	9600      	str	r6, [sp, #0]
 801157a:	9401      	str	r4, [sp, #4]
 801157c:	b29b      	uxth	r3, r3
 801157e:	4628      	mov	r0, r5
 8011580:	f7ff ff14 	bl	80113ac <uxr_common_create_entity>
 8011584:	f50d 6d91 	add.w	sp, sp, #1160	@ 0x488
 8011588:	bd70      	pop	{r4, r5, r6, pc}
 801158a:	bf00      	nop

0801158c <uxr_buffer_create_datawriter_bin>:
 801158c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801158e:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 8011592:	ac1d      	add	r4, sp, #116	@ 0x74
 8011594:	9105      	str	r1, [sp, #20]
 8011596:	4605      	mov	r5, r0
 8011598:	a9a1      	add	r1, sp, #644	@ 0x284
 801159a:	4618      	mov	r0, r3
 801159c:	2305      	movs	r3, #5
 801159e:	f8bd 72a8 	ldrh.w	r7, [sp, #680]	@ 0x2a8
 80115a2:	9204      	str	r2, [sp, #16]
 80115a4:	7123      	strb	r3, [r4, #4]
 80115a6:	f89d 62ac 	ldrb.w	r6, [sp, #684]	@ 0x2ac
 80115aa:	f000 f915 	bl	80117d8 <uxr_object_id_to_raw>
 80115ae:	2303      	movs	r3, #3
 80115b0:	a90e      	add	r1, sp, #56	@ 0x38
 80115b2:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 80115b4:	7223      	strb	r3, [r4, #8]
 80115b6:	f000 f90f 	bl	80117d8 <uxr_object_id_to_raw>
 80115ba:	f89d 32a5 	ldrb.w	r3, [sp, #677]	@ 0x2a5
 80115be:	f8ad 7044 	strh.w	r7, [sp, #68]	@ 0x44
 80115c2:	2200      	movs	r2, #0
 80115c4:	3f00      	subs	r7, #0
 80115c6:	fab3 f383 	clz	r3, r3
 80115ca:	f89d 12a6 	ldrb.w	r1, [sp, #678]	@ 0x2a6
 80115ce:	f88d 2064 	strb.w	r2, [sp, #100]	@ 0x64
 80115d2:	bf18      	it	ne
 80115d4:	2701      	movne	r7, #1
 80115d6:	095b      	lsrs	r3, r3, #5
 80115d8:	f88d 2046 	strb.w	r2, [sp, #70]	@ 0x46
 80115dc:	f88d 204c 	strb.w	r2, [sp, #76]	@ 0x4c
 80115e0:	f88d 2054 	strb.w	r2, [sp, #84]	@ 0x54
 80115e4:	2201      	movs	r2, #1
 80115e6:	f88d 7042 	strb.w	r7, [sp, #66]	@ 0x42
 80115ea:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 80115ee:	f88d 203a 	strb.w	r2, [sp, #58]	@ 0x3a
 80115f2:	b919      	cbnz	r1, 80115fc <uxr_buffer_create_datawriter_bin+0x70>
 80115f4:	f043 0302 	orr.w	r3, r3, #2
 80115f8:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 80115fc:	f89d 22a4 	ldrb.w	r2, [sp, #676]	@ 0x2a4
 8011600:	2a01      	cmp	r2, #1
 8011602:	d022      	beq.n	801164a <uxr_buffer_create_datawriter_bin+0xbe>
 8011604:	2a03      	cmp	r2, #3
 8011606:	d01b      	beq.n	8011640 <uxr_buffer_create_datawriter_bin+0xb4>
 8011608:	b91a      	cbnz	r2, 8011612 <uxr_buffer_create_datawriter_bin+0x86>
 801160a:	f043 0308 	orr.w	r3, r3, #8
 801160e:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8011612:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011616:	a921      	add	r1, sp, #132	@ 0x84
 8011618:	a806      	add	r0, sp, #24
 801161a:	f7ff fddd 	bl	80111d8 <ucdr_init_buffer>
 801161e:	a90e      	add	r1, sp, #56	@ 0x38
 8011620:	a806      	add	r0, sp, #24
 8011622:	f002 f8b7 	bl	8013794 <uxr_serialize_OBJK_DataWriter_Binary>
 8011626:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011628:	9600      	str	r6, [sp, #0]
 801162a:	9401      	str	r4, [sp, #4]
 801162c:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8011630:	60e3      	str	r3, [r4, #12]
 8011632:	4628      	mov	r0, r5
 8011634:	b29b      	uxth	r3, r3
 8011636:	f7ff feb9 	bl	80113ac <uxr_common_create_entity>
 801163a:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 801163e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011640:	f043 0320 	orr.w	r3, r3, #32
 8011644:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8011648:	e7e3      	b.n	8011612 <uxr_buffer_create_datawriter_bin+0x86>
 801164a:	f043 0310 	orr.w	r3, r3, #16
 801164e:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8011652:	e7de      	b.n	8011612 <uxr_buffer_create_datawriter_bin+0x86>

08011654 <uxr_buffer_create_datareader_bin>:
 8011654:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011656:	f5ad 7d25 	sub.w	sp, sp, #660	@ 0x294
 801165a:	ac1f      	add	r4, sp, #124	@ 0x7c
 801165c:	9105      	str	r1, [sp, #20]
 801165e:	4605      	mov	r5, r0
 8011660:	a9a3      	add	r1, sp, #652	@ 0x28c
 8011662:	4618      	mov	r0, r3
 8011664:	2306      	movs	r3, #6
 8011666:	f8bd 72b0 	ldrh.w	r7, [sp, #688]	@ 0x2b0
 801166a:	9204      	str	r2, [sp, #16]
 801166c:	7123      	strb	r3, [r4, #4]
 801166e:	f89d 62b4 	ldrb.w	r6, [sp, #692]	@ 0x2b4
 8011672:	f000 f8b1 	bl	80117d8 <uxr_object_id_to_raw>
 8011676:	2303      	movs	r3, #3
 8011678:	a90e      	add	r1, sp, #56	@ 0x38
 801167a:	98aa      	ldr	r0, [sp, #680]	@ 0x2a8
 801167c:	7223      	strb	r3, [r4, #8]
 801167e:	f000 f8ab 	bl	80117d8 <uxr_object_id_to_raw>
 8011682:	f89d 32ad 	ldrb.w	r3, [sp, #685]	@ 0x2ad
 8011686:	f8ad 7044 	strh.w	r7, [sp, #68]	@ 0x44
 801168a:	2200      	movs	r2, #0
 801168c:	3f00      	subs	r7, #0
 801168e:	fab3 f383 	clz	r3, r3
 8011692:	f89d 12ae 	ldrb.w	r1, [sp, #686]	@ 0x2ae
 8011696:	f88d 2070 	strb.w	r2, [sp, #112]	@ 0x70
 801169a:	bf18      	it	ne
 801169c:	2701      	movne	r7, #1
 801169e:	095b      	lsrs	r3, r3, #5
 80116a0:	f88d 2064 	strb.w	r2, [sp, #100]	@ 0x64
 80116a4:	f88d 2046 	strb.w	r2, [sp, #70]	@ 0x46
 80116a8:	f88d 204c 	strb.w	r2, [sp, #76]	@ 0x4c
 80116ac:	f88d 2054 	strb.w	r2, [sp, #84]	@ 0x54
 80116b0:	2201      	movs	r2, #1
 80116b2:	f88d 7042 	strb.w	r7, [sp, #66]	@ 0x42
 80116b6:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 80116ba:	f88d 203a 	strb.w	r2, [sp, #58]	@ 0x3a
 80116be:	b919      	cbnz	r1, 80116c8 <uxr_buffer_create_datareader_bin+0x74>
 80116c0:	f043 0302 	orr.w	r3, r3, #2
 80116c4:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 80116c8:	f89d 22ac 	ldrb.w	r2, [sp, #684]	@ 0x2ac
 80116cc:	2a01      	cmp	r2, #1
 80116ce:	d022      	beq.n	8011716 <uxr_buffer_create_datareader_bin+0xc2>
 80116d0:	2a03      	cmp	r2, #3
 80116d2:	d01b      	beq.n	801170c <uxr_buffer_create_datareader_bin+0xb8>
 80116d4:	b91a      	cbnz	r2, 80116de <uxr_buffer_create_datareader_bin+0x8a>
 80116d6:	f043 0308 	orr.w	r3, r3, #8
 80116da:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 80116de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80116e2:	a923      	add	r1, sp, #140	@ 0x8c
 80116e4:	a806      	add	r0, sp, #24
 80116e6:	f7ff fd77 	bl	80111d8 <ucdr_init_buffer>
 80116ea:	a90e      	add	r1, sp, #56	@ 0x38
 80116ec:	a806      	add	r0, sp, #24
 80116ee:	f002 f815 	bl	801371c <uxr_serialize_OBJK_DataReader_Binary>
 80116f2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80116f4:	9600      	str	r6, [sp, #0]
 80116f6:	9401      	str	r4, [sp, #4]
 80116f8:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80116fc:	60e3      	str	r3, [r4, #12]
 80116fe:	4628      	mov	r0, r5
 8011700:	b29b      	uxth	r3, r3
 8011702:	f7ff fe53 	bl	80113ac <uxr_common_create_entity>
 8011706:	f50d 7d25 	add.w	sp, sp, #660	@ 0x294
 801170a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801170c:	f043 0320 	orr.w	r3, r3, #32
 8011710:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8011714:	e7e3      	b.n	80116de <uxr_buffer_create_datareader_bin+0x8a>
 8011716:	f043 0310 	orr.w	r3, r3, #16
 801171a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 801171e:	e7de      	b.n	80116de <uxr_buffer_create_datareader_bin+0x8a>

08011720 <uxr_buffer_create_replier_bin>:
 8011720:	b570      	push	{r4, r5, r6, lr}
 8011722:	f5ad 7d1a 	sub.w	sp, sp, #616	@ 0x268
 8011726:	4605      	mov	r5, r0
 8011728:	9105      	str	r1, [sp, #20]
 801172a:	4618      	mov	r0, r3
 801172c:	a999      	add	r1, sp, #612	@ 0x264
 801172e:	2308      	movs	r3, #8
 8011730:	f89d 6294 	ldrb.w	r6, [sp, #660]	@ 0x294
 8011734:	9204      	str	r2, [sp, #16]
 8011736:	f88d 3058 	strb.w	r3, [sp, #88]	@ 0x58
 801173a:	f000 f84d 	bl	80117d8 <uxr_object_id_to_raw>
 801173e:	2203      	movs	r2, #3
 8011740:	f88d 205c 	strb.w	r2, [sp, #92]	@ 0x5c
 8011744:	9a9e      	ldr	r2, [sp, #632]	@ 0x278
 8011746:	9206      	str	r2, [sp, #24]
 8011748:	9a9f      	ldr	r2, [sp, #636]	@ 0x27c
 801174a:	9207      	str	r2, [sp, #28]
 801174c:	9aa0      	ldr	r2, [sp, #640]	@ 0x280
 801174e:	9208      	str	r2, [sp, #32]
 8011750:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 8011752:	920c      	str	r2, [sp, #48]	@ 0x30
 8011754:	9aa1      	ldr	r2, [sp, #644]	@ 0x284
 8011756:	920a      	str	r2, [sp, #40]	@ 0x28
 8011758:	2301      	movs	r3, #1
 801175a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801175e:	a919      	add	r1, sp, #100	@ 0x64
 8011760:	a80d      	add	r0, sp, #52	@ 0x34
 8011762:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 8011766:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 801176a:	f7ff fd35 	bl	80111d8 <ucdr_init_buffer>
 801176e:	a906      	add	r1, sp, #24
 8011770:	a80d      	add	r0, sp, #52	@ 0x34
 8011772:	f002 f83b 	bl	80137ec <uxr_serialize_OBJK_Replier_Binary>
 8011776:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8011778:	9318      	str	r3, [sp, #96]	@ 0x60
 801177a:	ac15      	add	r4, sp, #84	@ 0x54
 801177c:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8011780:	9600      	str	r6, [sp, #0]
 8011782:	9401      	str	r4, [sp, #4]
 8011784:	b29b      	uxth	r3, r3
 8011786:	4628      	mov	r0, r5
 8011788:	f7ff fe10 	bl	80113ac <uxr_common_create_entity>
 801178c:	f50d 7d1a 	add.w	sp, sp, #616	@ 0x268
 8011790:	bd70      	pop	{r4, r5, r6, pc}
 8011792:	bf00      	nop

08011794 <uxr_object_id>:
 8011794:	b082      	sub	sp, #8
 8011796:	2300      	movs	r3, #0
 8011798:	f88d 1006 	strb.w	r1, [sp, #6]
 801179c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80117a0:	f360 030f 	bfi	r3, r0, #0, #16
 80117a4:	f362 431f 	bfi	r3, r2, #16, #16
 80117a8:	4618      	mov	r0, r3
 80117aa:	b002      	add	sp, #8
 80117ac:	4770      	bx	lr
 80117ae:	bf00      	nop

080117b0 <uxr_object_id_from_raw>:
 80117b0:	7843      	ldrb	r3, [r0, #1]
 80117b2:	7801      	ldrb	r1, [r0, #0]
 80117b4:	b082      	sub	sp, #8
 80117b6:	f003 020f 	and.w	r2, r3, #15
 80117ba:	f88d 2006 	strb.w	r2, [sp, #6]
 80117be:	091b      	lsrs	r3, r3, #4
 80117c0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80117c4:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80117c8:	2000      	movs	r0, #0
 80117ca:	f363 000f 	bfi	r0, r3, #0, #16
 80117ce:	f362 401f 	bfi	r0, r2, #16, #16
 80117d2:	b002      	add	sp, #8
 80117d4:	4770      	bx	lr
 80117d6:	bf00      	nop

080117d8 <uxr_object_id_to_raw>:
 80117d8:	f3c0 4303 	ubfx	r3, r0, #16, #4
 80117dc:	b082      	sub	sp, #8
 80117de:	f3c0 120b 	ubfx	r2, r0, #4, #12
 80117e2:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 80117e6:	700a      	strb	r2, [r1, #0]
 80117e8:	704b      	strb	r3, [r1, #1]
 80117ea:	b002      	add	sp, #8
 80117ec:	4770      	bx	lr
 80117ee:	bf00      	nop

080117f0 <on_get_fragmentation_info>:
 80117f0:	b500      	push	{lr}
 80117f2:	b08b      	sub	sp, #44	@ 0x2c
 80117f4:	4601      	mov	r1, r0
 80117f6:	2204      	movs	r2, #4
 80117f8:	a802      	add	r0, sp, #8
 80117fa:	f7ff fced 	bl	80111d8 <ucdr_init_buffer>
 80117fe:	f10d 0305 	add.w	r3, sp, #5
 8011802:	f10d 0206 	add.w	r2, sp, #6
 8011806:	a901      	add	r1, sp, #4
 8011808:	a802      	add	r0, sp, #8
 801180a:	f001 f983 	bl	8012b14 <uxr_read_submessage_header>
 801180e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8011812:	2b0d      	cmp	r3, #13
 8011814:	d003      	beq.n	801181e <on_get_fragmentation_info+0x2e>
 8011816:	2000      	movs	r0, #0
 8011818:	b00b      	add	sp, #44	@ 0x2c
 801181a:	f85d fb04 	ldr.w	pc, [sp], #4
 801181e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8011822:	f013 0f02 	tst.w	r3, #2
 8011826:	bf0c      	ite	eq
 8011828:	2001      	moveq	r0, #1
 801182a:	2002      	movne	r0, #2
 801182c:	b00b      	add	sp, #44	@ 0x2c
 801182e:	f85d fb04 	ldr.w	pc, [sp], #4
 8011832:	bf00      	nop

08011834 <read_submessage_get_info>:
 8011834:	b570      	push	{r4, r5, r6, lr}
 8011836:	2500      	movs	r5, #0
 8011838:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 801183c:	4604      	mov	r4, r0
 801183e:	f44f 7224 	mov.w	r2, #656	@ 0x290
 8011842:	460e      	mov	r6, r1
 8011844:	a810      	add	r0, sp, #64	@ 0x40
 8011846:	4629      	mov	r1, r5
 8011848:	e9cd 5503 	strd	r5, r5, [sp, #12]
 801184c:	f00b fe20 	bl	801d490 <memset>
 8011850:	a903      	add	r1, sp, #12
 8011852:	4630      	mov	r0, r6
 8011854:	f002 fa28 	bl	8013ca8 <uxr_deserialize_GET_INFO_Payload>
 8011858:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801185c:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8011860:	4620      	mov	r0, r4
 8011862:	f000 ffeb 	bl	801283c <uxr_session_header_offset>
 8011866:	462b      	mov	r3, r5
 8011868:	9000      	str	r0, [sp, #0]
 801186a:	220c      	movs	r2, #12
 801186c:	a905      	add	r1, sp, #20
 801186e:	a808      	add	r0, sp, #32
 8011870:	f7ff fca0 	bl	80111b4 <ucdr_init_buffer_origin_offset>
 8011874:	a910      	add	r1, sp, #64	@ 0x40
 8011876:	a808      	add	r0, sp, #32
 8011878:	f002 fa88 	bl	8013d8c <uxr_serialize_INFO_Payload>
 801187c:	9b08      	ldr	r3, [sp, #32]
 801187e:	462a      	mov	r2, r5
 8011880:	4629      	mov	r1, r5
 8011882:	4620      	mov	r0, r4
 8011884:	f000 ff86 	bl	8012794 <uxr_stamp_session_header>
 8011888:	a808      	add	r0, sp, #32
 801188a:	f7ff fcd1 	bl	8011230 <ucdr_buffer_length>
 801188e:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8011890:	4602      	mov	r2, r0
 8011892:	a905      	add	r1, sp, #20
 8011894:	e9d3 0400 	ldrd	r0, r4, [r3]
 8011898:	47a0      	blx	r4
 801189a:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 801189e:	bd70      	pop	{r4, r5, r6, pc}

080118a0 <write_submessage_acknack.isra.0>:
 80118a0:	b570      	push	{r4, r5, r6, lr}
 80118a2:	b092      	sub	sp, #72	@ 0x48
 80118a4:	4605      	mov	r5, r0
 80118a6:	460e      	mov	r6, r1
 80118a8:	4614      	mov	r4, r2
 80118aa:	f000 ffc7 	bl	801283c <uxr_session_header_offset>
 80118ae:	a905      	add	r1, sp, #20
 80118b0:	9000      	str	r0, [sp, #0]
 80118b2:	2300      	movs	r3, #0
 80118b4:	a80a      	add	r0, sp, #40	@ 0x28
 80118b6:	2211      	movs	r2, #17
 80118b8:	f7ff fc7c 	bl	80111b4 <ucdr_init_buffer_origin_offset>
 80118bc:	2318      	movs	r3, #24
 80118be:	fb03 5404 	mla	r4, r3, r4, r5
 80118c2:	2205      	movs	r2, #5
 80118c4:	2300      	movs	r3, #0
 80118c6:	3450      	adds	r4, #80	@ 0x50
 80118c8:	210a      	movs	r1, #10
 80118ca:	a80a      	add	r0, sp, #40	@ 0x28
 80118cc:	f001 f908 	bl	8012ae0 <uxr_buffer_submessage_header>
 80118d0:	a903      	add	r1, sp, #12
 80118d2:	4620      	mov	r0, r4
 80118d4:	f008 fdb6 	bl	801a444 <uxr_compute_acknack>
 80118d8:	ba40      	rev16	r0, r0
 80118da:	f8ad 000e 	strh.w	r0, [sp, #14]
 80118de:	a903      	add	r1, sp, #12
 80118e0:	a80a      	add	r0, sp, #40	@ 0x28
 80118e2:	f88d 6010 	strb.w	r6, [sp, #16]
 80118e6:	f002 fac1 	bl	8013e6c <uxr_serialize_ACKNACK_Payload>
 80118ea:	2200      	movs	r2, #0
 80118ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80118ee:	4611      	mov	r1, r2
 80118f0:	4628      	mov	r0, r5
 80118f2:	f000 ff4f 	bl	8012794 <uxr_stamp_session_header>
 80118f6:	a80a      	add	r0, sp, #40	@ 0x28
 80118f8:	f7ff fc9a 	bl	8011230 <ucdr_buffer_length>
 80118fc:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 80118fe:	4602      	mov	r2, r0
 8011900:	a905      	add	r1, sp, #20
 8011902:	e9d3 0400 	ldrd	r0, r4, [r3]
 8011906:	47a0      	blx	r4
 8011908:	b012      	add	sp, #72	@ 0x48
 801190a:	bd70      	pop	{r4, r5, r6, pc}
 801190c:	0000      	movs	r0, r0
	...

08011910 <uxr_init_session>:
 8011910:	b510      	push	{r4, lr}
 8011912:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 8011948 <uxr_init_session+0x38>
 8011916:	2300      	movs	r3, #0
 8011918:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 801191c:	4604      	mov	r4, r0
 801191e:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 8011922:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 8011926:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 801192a:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 801192e:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 8011932:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 8011936:	2181      	movs	r1, #129	@ 0x81
 8011938:	f000 fe90 	bl	801265c <uxr_init_session_info>
 801193c:	f104 0008 	add.w	r0, r4, #8
 8011940:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011944:	f000 bfe8 	b.w	8012918 <uxr_init_stream_storage>
	...

08011950 <uxr_set_status_callback>:
 8011950:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 8011954:	4770      	bx	lr
 8011956:	bf00      	nop

08011958 <uxr_set_topic_callback>:
 8011958:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 801195c:	4770      	bx	lr
 801195e:	bf00      	nop

08011960 <uxr_set_request_callback>:
 8011960:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 8011964:	4770      	bx	lr
 8011966:	bf00      	nop

08011968 <uxr_set_reply_callback>:
 8011968:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 801196c:	4770      	bx	lr
 801196e:	bf00      	nop

08011970 <uxr_create_output_best_effort_stream>:
 8011970:	b570      	push	{r4, r5, r6, lr}
 8011972:	b082      	sub	sp, #8
 8011974:	4604      	mov	r4, r0
 8011976:	460d      	mov	r5, r1
 8011978:	4616      	mov	r6, r2
 801197a:	f000 ff5f 	bl	801283c <uxr_session_header_offset>
 801197e:	4632      	mov	r2, r6
 8011980:	4603      	mov	r3, r0
 8011982:	4629      	mov	r1, r5
 8011984:	f104 0008 	add.w	r0, r4, #8
 8011988:	b002      	add	sp, #8
 801198a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801198e:	f001 b80d 	b.w	80129ac <uxr_add_output_best_effort_buffer>
 8011992:	bf00      	nop

08011994 <uxr_create_output_reliable_stream>:
 8011994:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011996:	b085      	sub	sp, #20
 8011998:	4604      	mov	r4, r0
 801199a:	460d      	mov	r5, r1
 801199c:	4616      	mov	r6, r2
 801199e:	461f      	mov	r7, r3
 80119a0:	f000 ff4c 	bl	801283c <uxr_session_header_offset>
 80119a4:	463b      	mov	r3, r7
 80119a6:	9000      	str	r0, [sp, #0]
 80119a8:	4632      	mov	r2, r6
 80119aa:	4629      	mov	r1, r5
 80119ac:	f104 0008 	add.w	r0, r4, #8
 80119b0:	f001 f810 	bl	80129d4 <uxr_add_output_reliable_buffer>
 80119b4:	b005      	add	sp, #20
 80119b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080119b8 <uxr_create_input_best_effort_stream>:
 80119b8:	b082      	sub	sp, #8
 80119ba:	3008      	adds	r0, #8
 80119bc:	b002      	add	sp, #8
 80119be:	f001 b823 	b.w	8012a08 <uxr_add_input_best_effort_buffer>
 80119c2:	bf00      	nop

080119c4 <uxr_create_input_reliable_stream>:
 80119c4:	b510      	push	{r4, lr}
 80119c6:	b084      	sub	sp, #16
 80119c8:	4c03      	ldr	r4, [pc, #12]	@ (80119d8 <uxr_create_input_reliable_stream+0x14>)
 80119ca:	9400      	str	r4, [sp, #0]
 80119cc:	3008      	adds	r0, #8
 80119ce:	f001 f831 	bl	8012a34 <uxr_add_input_reliable_buffer>
 80119d2:	b004      	add	sp, #16
 80119d4:	bd10      	pop	{r4, pc}
 80119d6:	bf00      	nop
 80119d8:	080117f1 	.word	0x080117f1

080119dc <uxr_epoch_nanos>:
 80119dc:	b510      	push	{r4, lr}
 80119de:	4604      	mov	r4, r0
 80119e0:	f001 f8de 	bl	8012ba0 <uxr_nanos>
 80119e4:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 80119e8:	1ac0      	subs	r0, r0, r3
 80119ea:	eb61 0102 	sbc.w	r1, r1, r2
 80119ee:	bd10      	pop	{r4, pc}

080119f0 <uxr_flash_output_streams>:
 80119f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80119f4:	7e03      	ldrb	r3, [r0, #24]
 80119f6:	b084      	sub	sp, #16
 80119f8:	4604      	mov	r4, r0
 80119fa:	b373      	cbz	r3, 8011a5a <uxr_flash_output_streams+0x6a>
 80119fc:	2500      	movs	r5, #0
 80119fe:	f100 0908 	add.w	r9, r0, #8
 8011a02:	f10d 0802 	add.w	r8, sp, #2
 8011a06:	4628      	mov	r0, r5
 8011a08:	af03      	add	r7, sp, #12
 8011a0a:	ae02      	add	r6, sp, #8
 8011a0c:	e006      	b.n	8011a1c <uxr_flash_output_streams+0x2c>
 8011a0e:	7e23      	ldrb	r3, [r4, #24]
 8011a10:	3501      	adds	r5, #1
 8011a12:	b2e8      	uxtb	r0, r5
 8011a14:	4283      	cmp	r3, r0
 8011a16:	f109 0910 	add.w	r9, r9, #16
 8011a1a:	d91e      	bls.n	8011a5a <uxr_flash_output_streams+0x6a>
 8011a1c:	2201      	movs	r2, #1
 8011a1e:	4611      	mov	r1, r2
 8011a20:	f000 ff42 	bl	80128a8 <uxr_stream_id>
 8011a24:	4643      	mov	r3, r8
 8011a26:	4684      	mov	ip, r0
 8011a28:	463a      	mov	r2, r7
 8011a2a:	4631      	mov	r1, r6
 8011a2c:	4648      	mov	r0, r9
 8011a2e:	f8cd c004 	str.w	ip, [sp, #4]
 8011a32:	f008 fd8b 	bl	801a54c <uxr_prepare_best_effort_buffer_to_send>
 8011a36:	2800      	cmp	r0, #0
 8011a38:	d0e9      	beq.n	8011a0e <uxr_flash_output_streams+0x1e>
 8011a3a:	9b02      	ldr	r3, [sp, #8]
 8011a3c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8011a40:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8011a44:	4620      	mov	r0, r4
 8011a46:	f000 fea5 	bl	8012794 <uxr_stamp_session_header>
 8011a4a:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8011a4c:	9a03      	ldr	r2, [sp, #12]
 8011a4e:	f8d3 a004 	ldr.w	sl, [r3, #4]
 8011a52:	9902      	ldr	r1, [sp, #8]
 8011a54:	6818      	ldr	r0, [r3, #0]
 8011a56:	47d0      	blx	sl
 8011a58:	e7d9      	b.n	8011a0e <uxr_flash_output_streams+0x1e>
 8011a5a:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8011a5e:	b37b      	cbz	r3, 8011ac0 <uxr_flash_output_streams+0xd0>
 8011a60:	f04f 0900 	mov.w	r9, #0
 8011a64:	f104 0520 	add.w	r5, r4, #32
 8011a68:	f10d 0802 	add.w	r8, sp, #2
 8011a6c:	af03      	add	r7, sp, #12
 8011a6e:	ae02      	add	r6, sp, #8
 8011a70:	4648      	mov	r0, r9
 8011a72:	2201      	movs	r2, #1
 8011a74:	2102      	movs	r1, #2
 8011a76:	f000 ff17 	bl	80128a8 <uxr_stream_id>
 8011a7a:	9001      	str	r0, [sp, #4]
 8011a7c:	e00e      	b.n	8011a9c <uxr_flash_output_streams+0xac>
 8011a7e:	9b02      	ldr	r3, [sp, #8]
 8011a80:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8011a84:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8011a88:	4620      	mov	r0, r4
 8011a8a:	f000 fe83 	bl	8012794 <uxr_stamp_session_header>
 8011a8e:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8011a90:	9a03      	ldr	r2, [sp, #12]
 8011a92:	f8d3 a004 	ldr.w	sl, [r3, #4]
 8011a96:	9902      	ldr	r1, [sp, #8]
 8011a98:	6818      	ldr	r0, [r3, #0]
 8011a9a:	47d0      	blx	sl
 8011a9c:	4643      	mov	r3, r8
 8011a9e:	463a      	mov	r2, r7
 8011aa0:	4631      	mov	r1, r6
 8011aa2:	4628      	mov	r0, r5
 8011aa4:	f008 ff66 	bl	801a974 <uxr_prepare_next_reliable_buffer_to_send>
 8011aa8:	2800      	cmp	r0, #0
 8011aaa:	d1e8      	bne.n	8011a7e <uxr_flash_output_streams+0x8e>
 8011aac:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8011ab0:	f109 0901 	add.w	r9, r9, #1
 8011ab4:	fa5f f089 	uxtb.w	r0, r9
 8011ab8:	4283      	cmp	r3, r0
 8011aba:	f105 0528 	add.w	r5, r5, #40	@ 0x28
 8011abe:	d8d8      	bhi.n	8011a72 <uxr_flash_output_streams+0x82>
 8011ac0:	b004      	add	sp, #16
 8011ac2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ac6:	bf00      	nop

08011ac8 <read_submessage_info>:
 8011ac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011acc:	460d      	mov	r5, r1
 8011ace:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 8011ad2:	4669      	mov	r1, sp
 8011ad4:	4607      	mov	r7, r0
 8011ad6:	4628      	mov	r0, r5
 8011ad8:	f001 fff6 	bl	8013ac8 <uxr_deserialize_BaseObjectReply>
 8011adc:	a902      	add	r1, sp, #8
 8011ade:	4604      	mov	r4, r0
 8011ae0:	4628      	mov	r0, r5
 8011ae2:	f89d 8005 	ldrb.w	r8, [sp, #5]
 8011ae6:	f7fd fdfb 	bl	800f6e0 <ucdr_deserialize_bool>
 8011aea:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8011aee:	4004      	ands	r4, r0
 8011af0:	b2e4      	uxtb	r4, r4
 8011af2:	b95b      	cbnz	r3, 8011b0c <read_submessage_info+0x44>
 8011af4:	a987      	add	r1, sp, #540	@ 0x21c
 8011af6:	4628      	mov	r0, r5
 8011af8:	f7fd fdf2 	bl	800f6e0 <ucdr_deserialize_bool>
 8011afc:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 8011b00:	4606      	mov	r6, r0
 8011b02:	b94b      	cbnz	r3, 8011b18 <read_submessage_info+0x50>
 8011b04:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 8011b08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b0c:	a903      	add	r1, sp, #12
 8011b0e:	4628      	mov	r0, r5
 8011b10:	f001 fe9c 	bl	801384c <uxr_deserialize_ObjectVariant>
 8011b14:	4004      	ands	r4, r0
 8011b16:	e7ed      	b.n	8011af4 <read_submessage_info+0x2c>
 8011b18:	a988      	add	r1, sp, #544	@ 0x220
 8011b1a:	4628      	mov	r0, r5
 8011b1c:	f7fd fe0e 	bl	800f73c <ucdr_deserialize_uint8_t>
 8011b20:	4234      	tst	r4, r6
 8011b22:	d0ef      	beq.n	8011b04 <read_submessage_info+0x3c>
 8011b24:	2800      	cmp	r0, #0
 8011b26:	d0ed      	beq.n	8011b04 <read_submessage_info+0x3c>
 8011b28:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 8011b2c:	2b0d      	cmp	r3, #13
 8011b2e:	d1e9      	bne.n	8011b04 <read_submessage_info+0x3c>
 8011b30:	a98a      	add	r1, sp, #552	@ 0x228
 8011b32:	4628      	mov	r0, r5
 8011b34:	f7fe fb9e 	bl	8010274 <ucdr_deserialize_int16_t>
 8011b38:	b140      	cbz	r0, 8011b4c <read_submessage_info+0x84>
 8011b3a:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 8011b3e:	2b00      	cmp	r3, #0
 8011b40:	dd07      	ble.n	8011b52 <read_submessage_info+0x8a>
 8011b42:	f1b8 0f00 	cmp.w	r8, #0
 8011b46:	bf0c      	ite	eq
 8011b48:	2002      	moveq	r0, #2
 8011b4a:	2001      	movne	r0, #1
 8011b4c:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 8011b50:	e7d8      	b.n	8011b04 <read_submessage_info+0x3c>
 8011b52:	2000      	movs	r0, #0
 8011b54:	e7fa      	b.n	8011b4c <read_submessage_info+0x84>
 8011b56:	bf00      	nop

08011b58 <read_submessage_list>:
 8011b58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011b5c:	b097      	sub	sp, #92	@ 0x5c
 8011b5e:	4604      	mov	r4, r0
 8011b60:	460d      	mov	r5, r1
 8011b62:	9209      	str	r2, [sp, #36]	@ 0x24
 8011b64:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 8011b68:	aa0c      	add	r2, sp, #48	@ 0x30
 8011b6a:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 8011b6e:	4628      	mov	r0, r5
 8011b70:	f000 ffd0 	bl	8012b14 <uxr_read_submessage_header>
 8011b74:	2800      	cmp	r0, #0
 8011b76:	f000 812c 	beq.w	8011dd2 <read_submessage_list+0x27a>
 8011b7a:	f89d 102e 	ldrb.w	r1, [sp, #46]	@ 0x2e
 8011b7e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011b80:	f8bd 6030 	ldrh.w	r6, [sp, #48]	@ 0x30
 8011b84:	f89d 702f 	ldrb.w	r7, [sp, #47]	@ 0x2f
 8011b88:	3902      	subs	r1, #2
 8011b8a:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8011b8e:	290d      	cmp	r1, #13
 8011b90:	d8e8      	bhi.n	8011b64 <read_submessage_list+0xc>
 8011b92:	a201      	add	r2, pc, #4	@ (adr r2, 8011b98 <read_submessage_list+0x40>)
 8011b94:	f852 f021 	ldr.w	pc, [r2, r1, lsl #2]
 8011b98:	08011dc9 	.word	0x08011dc9
 8011b9c:	08011b65 	.word	0x08011b65
 8011ba0:	08011db9 	.word	0x08011db9
 8011ba4:	08011d5b 	.word	0x08011d5b
 8011ba8:	08011d51 	.word	0x08011d51
 8011bac:	08011b65 	.word	0x08011b65
 8011bb0:	08011b65 	.word	0x08011b65
 8011bb4:	08011cd5 	.word	0x08011cd5
 8011bb8:	08011c6d 	.word	0x08011c6d
 8011bbc:	08011c2d 	.word	0x08011c2d
 8011bc0:	08011b65 	.word	0x08011b65
 8011bc4:	08011b65 	.word	0x08011b65
 8011bc8:	08011b65 	.word	0x08011b65
 8011bcc:	08011bd1 	.word	0x08011bd1
 8011bd0:	a910      	add	r1, sp, #64	@ 0x40
 8011bd2:	4628      	mov	r0, r5
 8011bd4:	f002 f99a 	bl	8013f0c <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 8011bd8:	f8d4 6090 	ldr.w	r6, [r4, #144]	@ 0x90
 8011bdc:	2e00      	cmp	r6, #0
 8011bde:	f000 8100 	beq.w	8011de2 <read_submessage_list+0x28a>
 8011be2:	f000 ffdd 	bl	8012ba0 <uxr_nanos>
 8011be6:	f04f 0800 	mov.w	r8, #0
 8011bea:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 8011bec:	4602      	mov	r2, r0
 8011bee:	460b      	mov	r3, r1
 8011bf0:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8011bf2:	4990      	ldr	r1, [pc, #576]	@ (8011e34 <read_submessage_list+0x2dc>)
 8011bf4:	46c4      	mov	ip, r8
 8011bf6:	fbc0 7c01 	smlal	r7, ip, r0, r1
 8011bfa:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 8011bfe:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8011c00:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 8011c02:	46c6      	mov	lr, r8
 8011c04:	fbc0 7e01 	smlal	r7, lr, r0, r1
 8011c08:	46bc      	mov	ip, r7
 8011c0a:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	@ 0x48
 8011c0e:	fbc0 7801 	smlal	r7, r8, r0, r1
 8011c12:	e9cd ce02 	strd	ip, lr, [sp, #8]
 8011c16:	e9cd 7800 	strd	r7, r8, [sp]
 8011c1a:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 8011c1e:	9106      	str	r1, [sp, #24]
 8011c20:	4620      	mov	r0, r4
 8011c22:	47b0      	blx	r6
 8011c24:	2301      	movs	r3, #1
 8011c26:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 8011c2a:	e79b      	b.n	8011b64 <read_submessage_list+0xc>
 8011c2c:	a910      	add	r1, sp, #64	@ 0x40
 8011c2e:	4628      	mov	r0, r5
 8011c30:	f002 f95a 	bl	8013ee8 <uxr_deserialize_HEARTBEAT_Payload>
 8011c34:	2100      	movs	r1, #0
 8011c36:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8011c3a:	f000 fe51 	bl	80128e0 <uxr_stream_id_from_raw>
 8011c3e:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8011c42:	900f      	str	r0, [sp, #60]	@ 0x3c
 8011c44:	4631      	mov	r1, r6
 8011c46:	f104 0008 	add.w	r0, r4, #8
 8011c4a:	f000 ff29 	bl	8012aa0 <uxr_get_input_reliable_stream>
 8011c4e:	2800      	cmp	r0, #0
 8011c50:	d088      	beq.n	8011b64 <read_submessage_list+0xc>
 8011c52:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 8011c56:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 8011c5a:	f008 fbe7 	bl	801a42c <uxr_process_heartbeat>
 8011c5e:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 8011c62:	4632      	mov	r2, r6
 8011c64:	4620      	mov	r0, r4
 8011c66:	f7ff fe1b 	bl	80118a0 <write_submessage_acknack.isra.0>
 8011c6a:	e77b      	b.n	8011b64 <read_submessage_list+0xc>
 8011c6c:	a910      	add	r1, sp, #64	@ 0x40
 8011c6e:	4628      	mov	r0, r5
 8011c70:	f002 f912 	bl	8013e98 <uxr_deserialize_ACKNACK_Payload>
 8011c74:	2100      	movs	r1, #0
 8011c76:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8011c7a:	f000 fe31 	bl	80128e0 <uxr_stream_id_from_raw>
 8011c7e:	900d      	str	r0, [sp, #52]	@ 0x34
 8011c80:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8011c84:	f104 0008 	add.w	r0, r4, #8
 8011c88:	f000 fef6 	bl	8012a78 <uxr_get_output_reliable_stream>
 8011c8c:	4606      	mov	r6, r0
 8011c8e:	2800      	cmp	r0, #0
 8011c90:	f43f af68 	beq.w	8011b64 <read_submessage_list+0xc>
 8011c94:	f8bd 1042 	ldrh.w	r1, [sp, #66]	@ 0x42
 8011c98:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 8011c9c:	ba49      	rev16	r1, r1
 8011c9e:	b289      	uxth	r1, r1
 8011ca0:	f008 ff12 	bl	801aac8 <uxr_process_acknack>
 8011ca4:	4630      	mov	r0, r6
 8011ca6:	f008 fed3 	bl	801aa50 <uxr_begin_output_nack_buffer_it>
 8011caa:	f10d 0838 	add.w	r8, sp, #56	@ 0x38
 8011cae:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 8011cb2:	e005      	b.n	8011cc0 <read_submessage_list+0x168>
 8011cb4:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8011cb6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8011cb8:	685f      	ldr	r7, [r3, #4]
 8011cba:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8011cbc:	6818      	ldr	r0, [r3, #0]
 8011cbe:	47b8      	blx	r7
 8011cc0:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 8011cc4:	aa0f      	add	r2, sp, #60	@ 0x3c
 8011cc6:	4641      	mov	r1, r8
 8011cc8:	4630      	mov	r0, r6
 8011cca:	f008 fec3 	bl	801aa54 <uxr_next_reliable_nack_buffer_to_send>
 8011cce:	2800      	cmp	r0, #0
 8011cd0:	d1f0      	bne.n	8011cb4 <read_submessage_list+0x15c>
 8011cd2:	e747      	b.n	8011b64 <read_submessage_list+0xc>
 8011cd4:	f10d 0838 	add.w	r8, sp, #56	@ 0x38
 8011cd8:	4641      	mov	r1, r8
 8011cda:	900d      	str	r0, [sp, #52]	@ 0x34
 8011cdc:	4628      	mov	r0, r5
 8011cde:	f001 fe55 	bl	801398c <uxr_deserialize_BaseObjectRequest>
 8011ce2:	3e04      	subs	r6, #4
 8011ce4:	4640      	mov	r0, r8
 8011ce6:	a90f      	add	r1, sp, #60	@ 0x3c
 8011ce8:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 8011cec:	f000 fdcc 	bl	8012888 <uxr_parse_base_object_request>
 8011cf0:	fa1f f886 	uxth.w	r8, r6
 8011cf4:	f8d4 6080 	ldr.w	r6, [r4, #128]	@ 0x80
 8011cf8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8011cfa:	f8bd 9032 	ldrh.w	r9, [sp, #50]	@ 0x32
 8011cfe:	9110      	str	r1, [sp, #64]	@ 0x40
 8011d00:	f007 070e 	and.w	r7, r7, #14
 8011d04:	b136      	cbz	r6, 8011d14 <read_submessage_list+0x1bc>
 8011d06:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8011d0a:	9300      	str	r3, [sp, #0]
 8011d0c:	464a      	mov	r2, r9
 8011d0e:	2300      	movs	r3, #0
 8011d10:	4620      	mov	r0, r4
 8011d12:	47b0      	blx	r6
 8011d14:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 8011d16:	b16b      	cbz	r3, 8011d34 <read_submessage_list+0x1dc>
 8011d18:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8011d1a:	2100      	movs	r1, #0
 8011d1c:	3802      	subs	r0, #2
 8011d1e:	e002      	b.n	8011d26 <read_submessage_list+0x1ce>
 8011d20:	3101      	adds	r1, #1
 8011d22:	428b      	cmp	r3, r1
 8011d24:	d006      	beq.n	8011d34 <read_submessage_list+0x1dc>
 8011d26:	f830 6f02 	ldrh.w	r6, [r0, #2]!
 8011d2a:	454e      	cmp	r6, r9
 8011d2c:	d1f8      	bne.n	8011d20 <read_submessage_list+0x1c8>
 8011d2e:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8011d30:	2200      	movs	r2, #0
 8011d32:	545a      	strb	r2, [r3, r1]
 8011d34:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 8011d38:	9102      	str	r1, [sp, #8]
 8011d3a:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8011d3c:	9101      	str	r1, [sp, #4]
 8011d3e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8011d40:	9100      	str	r1, [sp, #0]
 8011d42:	463b      	mov	r3, r7
 8011d44:	4642      	mov	r2, r8
 8011d46:	4629      	mov	r1, r5
 8011d48:	4620      	mov	r0, r4
 8011d4a:	f008 ff75 	bl	801ac38 <read_submessage_format>
 8011d4e:	e709      	b.n	8011b64 <read_submessage_list+0xc>
 8011d50:	4629      	mov	r1, r5
 8011d52:	4620      	mov	r0, r4
 8011d54:	f7ff feb8 	bl	8011ac8 <read_submessage_info>
 8011d58:	e704      	b.n	8011b64 <read_submessage_list+0xc>
 8011d5a:	2b00      	cmp	r3, #0
 8011d5c:	d03c      	beq.n	8011dd8 <read_submessage_list+0x280>
 8011d5e:	a910      	add	r1, sp, #64	@ 0x40
 8011d60:	4628      	mov	r0, r5
 8011d62:	f001 fff5 	bl	8013d50 <uxr_deserialize_STATUS_Payload>
 8011d66:	a90e      	add	r1, sp, #56	@ 0x38
 8011d68:	a810      	add	r0, sp, #64	@ 0x40
 8011d6a:	aa0d      	add	r2, sp, #52	@ 0x34
 8011d6c:	f000 fd8c 	bl	8012888 <uxr_parse_base_object_request>
 8011d70:	f8d4 6080 	ldr.w	r6, [r4, #128]	@ 0x80
 8011d74:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8011d76:	f89d 8044 	ldrb.w	r8, [sp, #68]	@ 0x44
 8011d7a:	f8bd 7034 	ldrh.w	r7, [sp, #52]	@ 0x34
 8011d7e:	910f      	str	r1, [sp, #60]	@ 0x3c
 8011d80:	b136      	cbz	r6, 8011d90 <read_submessage_list+0x238>
 8011d82:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8011d86:	9300      	str	r3, [sp, #0]
 8011d88:	463a      	mov	r2, r7
 8011d8a:	4643      	mov	r3, r8
 8011d8c:	4620      	mov	r0, r4
 8011d8e:	47b0      	blx	r6
 8011d90:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8011d92:	2a00      	cmp	r2, #0
 8011d94:	f43f aee6 	beq.w	8011b64 <read_submessage_list+0xc>
 8011d98:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8011d9a:	2100      	movs	r1, #0
 8011d9c:	3802      	subs	r0, #2
 8011d9e:	e003      	b.n	8011da8 <read_submessage_list+0x250>
 8011da0:	3101      	adds	r1, #1
 8011da2:	4291      	cmp	r1, r2
 8011da4:	f43f aede 	beq.w	8011b64 <read_submessage_list+0xc>
 8011da8:	f830 6f02 	ldrh.w	r6, [r0, #2]!
 8011dac:	42be      	cmp	r6, r7
 8011dae:	d1f7      	bne.n	8011da0 <read_submessage_list+0x248>
 8011db0:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8011db2:	f803 8001 	strb.w	r8, [r3, r1]
 8011db6:	e6d5      	b.n	8011b64 <read_submessage_list+0xc>
 8011db8:	2b00      	cmp	r3, #0
 8011dba:	f47f aed3 	bne.w	8011b64 <read_submessage_list+0xc>
 8011dbe:	4629      	mov	r1, r5
 8011dc0:	4620      	mov	r0, r4
 8011dc2:	f000 fca9 	bl	8012718 <uxr_read_create_session_status>
 8011dc6:	e6cd      	b.n	8011b64 <read_submessage_list+0xc>
 8011dc8:	4629      	mov	r1, r5
 8011dca:	4620      	mov	r0, r4
 8011dcc:	f7ff fd32 	bl	8011834 <read_submessage_get_info>
 8011dd0:	e6c8      	b.n	8011b64 <read_submessage_list+0xc>
 8011dd2:	b017      	add	sp, #92	@ 0x5c
 8011dd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011dd8:	4629      	mov	r1, r5
 8011dda:	4620      	mov	r0, r4
 8011ddc:	f000 fcaa 	bl	8012734 <uxr_read_delete_session_status>
 8011de0:	e6c0      	b.n	8011b64 <read_submessage_list+0xc>
 8011de2:	f000 fedd 	bl	8012ba0 <uxr_nanos>
 8011de6:	e9dd 7214 	ldrd	r7, r2, [sp, #80]	@ 0x50
 8011dea:	f8df c048 	ldr.w	ip, [pc, #72]	@ 8011e34 <read_submessage_list+0x2dc>
 8011dee:	4633      	mov	r3, r6
 8011df0:	fbc7 230c 	smlal	r2, r3, r7, ip
 8011df4:	1810      	adds	r0, r2, r0
 8011df6:	eb43 0301 	adc.w	r3, r3, r1
 8011dfa:	e9dd 1212 	ldrd	r1, r2, [sp, #72]	@ 0x48
 8011dfe:	46b6      	mov	lr, r6
 8011e00:	fbc1 2e0c 	smlal	r2, lr, r1, ip
 8011e04:	e9dd 1710 	ldrd	r1, r7, [sp, #64]	@ 0x40
 8011e08:	fbc1 760c 	smlal	r7, r6, r1, ip
 8011e0c:	19d2      	adds	r2, r2, r7
 8011e0e:	eb4e 0106 	adc.w	r1, lr, r6
 8011e12:	1a80      	subs	r0, r0, r2
 8011e14:	eb63 0301 	sbc.w	r3, r3, r1
 8011e18:	0fda      	lsrs	r2, r3, #31
 8011e1a:	1812      	adds	r2, r2, r0
 8011e1c:	f143 0300 	adc.w	r3, r3, #0
 8011e20:	0852      	lsrs	r2, r2, #1
 8011e22:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 8011e26:	105b      	asrs	r3, r3, #1
 8011e28:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 8011e2c:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 8011e30:	e6f8      	b.n	8011c24 <read_submessage_list+0xcc>
 8011e32:	bf00      	nop
 8011e34:	3b9aca00 	.word	0x3b9aca00

08011e38 <listen_message_reliably>:
 8011e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e3c:	f1b1 0b00 	subs.w	fp, r1, #0
 8011e40:	b09f      	sub	sp, #124	@ 0x7c
 8011e42:	4606      	mov	r6, r0
 8011e44:	bfb8      	it	lt
 8011e46:	f06f 4b00 	mvnlt.w	fp, #2147483648	@ 0x80000000
 8011e4a:	f000 fe8f 	bl	8012b6c <uxr_millis>
 8011e4e:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 8011e52:	9003      	str	r0, [sp, #12]
 8011e54:	9104      	str	r1, [sp, #16]
 8011e56:	f10d 0828 	add.w	r8, sp, #40	@ 0x28
 8011e5a:	f10d 0a24 	add.w	sl, sp, #36	@ 0x24
 8011e5e:	2b00      	cmp	r3, #0
 8011e60:	f000 80a4 	beq.w	8011fac <listen_message_reliably+0x174>
 8011e64:	2500      	movs	r5, #0
 8011e66:	e9cd b806 	strd	fp, r8, [sp, #24]
 8011e6a:	f106 0420 	add.w	r4, r6, #32
 8011e6e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8011e72:	f06f 4900 	mvn.w	r9, #2147483648	@ 0x80000000
 8011e76:	4628      	mov	r0, r5
 8011e78:	e011      	b.n	8011e9e <listen_message_reliably+0x66>
 8011e7a:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8011e7e:	42ba      	cmp	r2, r7
 8011e80:	eb73 0109 	sbcs.w	r1, r3, r9
 8011e84:	bfb8      	it	lt
 8011e86:	4699      	movlt	r9, r3
 8011e88:	f105 0501 	add.w	r5, r5, #1
 8011e8c:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 8011e90:	b2e8      	uxtb	r0, r5
 8011e92:	bfb8      	it	lt
 8011e94:	4617      	movlt	r7, r2
 8011e96:	4283      	cmp	r3, r0
 8011e98:	f104 0428 	add.w	r4, r4, #40	@ 0x28
 8011e9c:	d94a      	bls.n	8011f34 <listen_message_reliably+0xfc>
 8011e9e:	2201      	movs	r2, #1
 8011ea0:	2102      	movs	r1, #2
 8011ea2:	f000 fd01 	bl	80128a8 <uxr_stream_id>
 8011ea6:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 8011eaa:	4601      	mov	r1, r0
 8011eac:	4620      	mov	r0, r4
 8011eae:	910b      	str	r1, [sp, #44]	@ 0x2c
 8011eb0:	f008 fd9e 	bl	801a9f0 <uxr_update_output_stream_heartbeat_timestamp>
 8011eb4:	2800      	cmp	r0, #0
 8011eb6:	d0e0      	beq.n	8011e7a <listen_message_reliably+0x42>
 8011eb8:	f89d 302c 	ldrb.w	r3, [sp, #44]	@ 0x2c
 8011ebc:	f89d b02d 	ldrb.w	fp, [sp, #45]	@ 0x2d
 8011ec0:	9305      	str	r3, [sp, #20]
 8011ec2:	4630      	mov	r0, r6
 8011ec4:	f000 fcba 	bl	801283c <uxr_session_header_offset>
 8011ec8:	f10d 0858 	add.w	r8, sp, #88	@ 0x58
 8011ecc:	eb0b 0b8b 	add.w	fp, fp, fp, lsl #2
 8011ed0:	9000      	str	r0, [sp, #0]
 8011ed2:	a90e      	add	r1, sp, #56	@ 0x38
 8011ed4:	4640      	mov	r0, r8
 8011ed6:	eb06 0bcb 	add.w	fp, r6, fp, lsl #3
 8011eda:	2300      	movs	r3, #0
 8011edc:	2211      	movs	r2, #17
 8011ede:	f7ff f969 	bl	80111b4 <ucdr_init_buffer_origin_offset>
 8011ee2:	2300      	movs	r3, #0
 8011ee4:	2205      	movs	r2, #5
 8011ee6:	210b      	movs	r1, #11
 8011ee8:	4640      	mov	r0, r8
 8011eea:	f000 fdf9 	bl	8012ae0 <uxr_buffer_submessage_header>
 8011eee:	f8bb 0032 	ldrh.w	r0, [fp, #50]	@ 0x32
 8011ef2:	2101      	movs	r1, #1
 8011ef4:	f008 ff74 	bl	801ade0 <uxr_seq_num_add>
 8011ef8:	f8bb 3030 	ldrh.w	r3, [fp, #48]	@ 0x30
 8011efc:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8011f00:	4602      	mov	r2, r0
 8011f02:	9b05      	ldr	r3, [sp, #20]
 8011f04:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 8011f08:	a90c      	add	r1, sp, #48	@ 0x30
 8011f0a:	4640      	mov	r0, r8
 8011f0c:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 8011f10:	f001 ffd6 	bl	8013ec0 <uxr_serialize_HEARTBEAT_Payload>
 8011f14:	2200      	movs	r2, #0
 8011f16:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8011f18:	4611      	mov	r1, r2
 8011f1a:	4630      	mov	r0, r6
 8011f1c:	f000 fc3a 	bl	8012794 <uxr_stamp_session_header>
 8011f20:	4640      	mov	r0, r8
 8011f22:	f7ff f985 	bl	8011230 <ucdr_buffer_length>
 8011f26:	4602      	mov	r2, r0
 8011f28:	6f30      	ldr	r0, [r6, #112]	@ 0x70
 8011f2a:	a90e      	add	r1, sp, #56	@ 0x38
 8011f2c:	e9d0 0300 	ldrd	r0, r3, [r0]
 8011f30:	4798      	blx	r3
 8011f32:	e7a2      	b.n	8011e7a <listen_message_reliably+0x42>
 8011f34:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8011f38:	4599      	cmp	r9, r3
 8011f3a:	bf08      	it	eq
 8011f3c:	f1b7 3fff 	cmpeq.w	r7, #4294967295	@ 0xffffffff
 8011f40:	e9dd b806 	ldrd	fp, r8, [sp, #24]
 8011f44:	d032      	beq.n	8011fac <listen_message_reliably+0x174>
 8011f46:	9b03      	ldr	r3, [sp, #12]
 8011f48:	1aff      	subs	r7, r7, r3
 8011f4a:	2f00      	cmp	r7, #0
 8011f4c:	bf08      	it	eq
 8011f4e:	2701      	moveq	r7, #1
 8011f50:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 8011f52:	455f      	cmp	r7, fp
 8011f54:	bfa8      	it	ge
 8011f56:	465f      	movge	r7, fp
 8011f58:	689c      	ldr	r4, [r3, #8]
 8011f5a:	6818      	ldr	r0, [r3, #0]
 8011f5c:	4642      	mov	r2, r8
 8011f5e:	463b      	mov	r3, r7
 8011f60:	4651      	mov	r1, sl
 8011f62:	47a0      	blx	r4
 8011f64:	ebab 0b07 	sub.w	fp, fp, r7
 8011f68:	b958      	cbnz	r0, 8011f82 <listen_message_reliably+0x14a>
 8011f6a:	f1bb 0f00 	cmp.w	fp, #0
 8011f6e:	dd44      	ble.n	8011ffa <listen_message_reliably+0x1c2>
 8011f70:	f000 fdfc 	bl	8012b6c <uxr_millis>
 8011f74:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 8011f78:	2b00      	cmp	r3, #0
 8011f7a:	d03c      	beq.n	8011ff6 <listen_message_reliably+0x1be>
 8011f7c:	e9cd 0103 	strd	r0, r1, [sp, #12]
 8011f80:	e770      	b.n	8011e64 <listen_message_reliably+0x2c>
 8011f82:	e9dd 1209 	ldrd	r1, r2, [sp, #36]	@ 0x24
 8011f86:	4604      	mov	r4, r0
 8011f88:	a80e      	add	r0, sp, #56	@ 0x38
 8011f8a:	f7ff f925 	bl	80111d8 <ucdr_init_buffer>
 8011f8e:	2500      	movs	r5, #0
 8011f90:	f10d 0322 	add.w	r3, sp, #34	@ 0x22
 8011f94:	aa08      	add	r2, sp, #32
 8011f96:	a90e      	add	r1, sp, #56	@ 0x38
 8011f98:	4630      	mov	r0, r6
 8011f9a:	f88d 5020 	strb.w	r5, [sp, #32]
 8011f9e:	f000 fc0f 	bl	80127c0 <uxr_read_session_header>
 8011fa2:	b928      	cbnz	r0, 8011fb0 <listen_message_reliably+0x178>
 8011fa4:	4620      	mov	r0, r4
 8011fa6:	b01f      	add	sp, #124	@ 0x7c
 8011fa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011fac:	465f      	mov	r7, fp
 8011fae:	e7cc      	b.n	8011f4a <listen_message_reliably+0x112>
 8011fb0:	4629      	mov	r1, r5
 8011fb2:	f89d 0020 	ldrb.w	r0, [sp, #32]
 8011fb6:	f000 fc93 	bl	80128e0 <uxr_stream_id_from_raw>
 8011fba:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8011fbe:	2f01      	cmp	r7, #1
 8011fc0:	e9cd 000b 	strd	r0, r0, [sp, #44]	@ 0x2c
 8011fc4:	f8bd a022 	ldrh.w	sl, [sp, #34]	@ 0x22
 8011fc8:	fa5f f880 	uxtb.w	r8, r0
 8011fcc:	f3c0 2507 	ubfx	r5, r0, #8, #8
 8011fd0:	d050      	beq.n	8012074 <listen_message_reliably+0x23c>
 8011fd2:	2f02      	cmp	r7, #2
 8011fd4:	d016      	beq.n	8012004 <listen_message_reliably+0x1cc>
 8011fd6:	2f00      	cmp	r7, #0
 8011fd8:	d1e4      	bne.n	8011fa4 <listen_message_reliably+0x16c>
 8011fda:	4639      	mov	r1, r7
 8011fdc:	4638      	mov	r0, r7
 8011fde:	f000 fc7f 	bl	80128e0 <uxr_stream_id_from_raw>
 8011fe2:	a90e      	add	r1, sp, #56	@ 0x38
 8011fe4:	4602      	mov	r2, r0
 8011fe6:	4630      	mov	r0, r6
 8011fe8:	920c      	str	r2, [sp, #48]	@ 0x30
 8011fea:	f7ff fdb5 	bl	8011b58 <read_submessage_list>
 8011fee:	4620      	mov	r0, r4
 8011ff0:	b01f      	add	sp, #124	@ 0x7c
 8011ff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ff6:	465f      	mov	r7, fp
 8011ff8:	e7aa      	b.n	8011f50 <listen_message_reliably+0x118>
 8011ffa:	4604      	mov	r4, r0
 8011ffc:	4620      	mov	r0, r4
 8011ffe:	b01f      	add	sp, #124	@ 0x7c
 8012000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012004:	4629      	mov	r1, r5
 8012006:	f106 0008 	add.w	r0, r6, #8
 801200a:	f000 fd49 	bl	8012aa0 <uxr_get_input_reliable_stream>
 801200e:	4681      	mov	r9, r0
 8012010:	b338      	cbz	r0, 8012062 <listen_message_reliably+0x22a>
 8012012:	a80e      	add	r0, sp, #56	@ 0x38
 8012014:	f8dd b040 	ldr.w	fp, [sp, #64]	@ 0x40
 8012018:	f7ff f90e 	bl	8011238 <ucdr_buffer_remaining>
 801201c:	4603      	mov	r3, r0
 801201e:	f10d 0021 	add.w	r0, sp, #33	@ 0x21
 8012022:	9000      	str	r0, [sp, #0]
 8012024:	465a      	mov	r2, fp
 8012026:	4651      	mov	r1, sl
 8012028:	4648      	mov	r0, r9
 801202a:	f008 f90d 	bl	801a248 <uxr_receive_reliable_message>
 801202e:	b1c0      	cbz	r0, 8012062 <listen_message_reliably+0x22a>
 8012030:	f89d 3021 	ldrb.w	r3, [sp, #33]	@ 0x21
 8012034:	b393      	cbz	r3, 801209c <listen_message_reliably+0x264>
 8012036:	af16      	add	r7, sp, #88	@ 0x58
 8012038:	f04f 0a02 	mov.w	sl, #2
 801203c:	e00a      	b.n	8012054 <listen_message_reliably+0x21c>
 801203e:	f88d 8030 	strb.w	r8, [sp, #48]	@ 0x30
 8012042:	f88d 5031 	strb.w	r5, [sp, #49]	@ 0x31
 8012046:	f88d a032 	strb.w	sl, [sp, #50]	@ 0x32
 801204a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801204c:	4639      	mov	r1, r7
 801204e:	4630      	mov	r0, r6
 8012050:	f7ff fd82 	bl	8011b58 <read_submessage_list>
 8012054:	2204      	movs	r2, #4
 8012056:	4639      	mov	r1, r7
 8012058:	4648      	mov	r0, r9
 801205a:	f008 f96f 	bl	801a33c <uxr_next_input_reliable_buffer_available>
 801205e:	2800      	cmp	r0, #0
 8012060:	d1ed      	bne.n	801203e <listen_message_reliably+0x206>
 8012062:	4630      	mov	r0, r6
 8012064:	462a      	mov	r2, r5
 8012066:	4641      	mov	r1, r8
 8012068:	f7ff fc1a 	bl	80118a0 <write_submessage_acknack.isra.0>
 801206c:	4620      	mov	r0, r4
 801206e:	b01f      	add	sp, #124	@ 0x7c
 8012070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012074:	4629      	mov	r1, r5
 8012076:	f106 0008 	add.w	r0, r6, #8
 801207a:	f000 fd07 	bl	8012a8c <uxr_get_input_best_effort_stream>
 801207e:	2800      	cmp	r0, #0
 8012080:	d090      	beq.n	8011fa4 <listen_message_reliably+0x16c>
 8012082:	4651      	mov	r1, sl
 8012084:	f008 f850 	bl	801a128 <uxr_receive_best_effort_message>
 8012088:	2800      	cmp	r0, #0
 801208a:	d08b      	beq.n	8011fa4 <listen_message_reliably+0x16c>
 801208c:	f88d 7032 	strb.w	r7, [sp, #50]	@ 0x32
 8012090:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8012092:	a90e      	add	r1, sp, #56	@ 0x38
 8012094:	4630      	mov	r0, r6
 8012096:	f7ff fd5f 	bl	8011b58 <read_submessage_list>
 801209a:	e783      	b.n	8011fa4 <listen_message_reliably+0x16c>
 801209c:	f88d 7032 	strb.w	r7, [sp, #50]	@ 0x32
 80120a0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80120a2:	a90e      	add	r1, sp, #56	@ 0x38
 80120a4:	4630      	mov	r0, r6
 80120a6:	f7ff fd57 	bl	8011b58 <read_submessage_list>
 80120aa:	e7c4      	b.n	8012036 <listen_message_reliably+0x1fe>

080120ac <uxr_run_session_timeout>:
 80120ac:	b570      	push	{r4, r5, r6, lr}
 80120ae:	4604      	mov	r4, r0
 80120b0:	460d      	mov	r5, r1
 80120b2:	f000 fd5b 	bl	8012b6c <uxr_millis>
 80120b6:	4606      	mov	r6, r0
 80120b8:	4620      	mov	r0, r4
 80120ba:	f7ff fc99 	bl	80119f0 <uxr_flash_output_streams>
 80120be:	4629      	mov	r1, r5
 80120c0:	4620      	mov	r0, r4
 80120c2:	f7ff feb9 	bl	8011e38 <listen_message_reliably>
 80120c6:	f000 fd51 	bl	8012b6c <uxr_millis>
 80120ca:	1b81      	subs	r1, r0, r6
 80120cc:	1a69      	subs	r1, r5, r1
 80120ce:	2900      	cmp	r1, #0
 80120d0:	dcf6      	bgt.n	80120c0 <uxr_run_session_timeout+0x14>
 80120d2:	f104 0008 	add.w	r0, r4, #8
 80120d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80120da:	f000 bceb 	b.w	8012ab4 <uxr_output_streams_confirmed>
 80120de:	bf00      	nop

080120e0 <uxr_run_session_until_data>:
 80120e0:	b570      	push	{r4, r5, r6, lr}
 80120e2:	4604      	mov	r4, r0
 80120e4:	460d      	mov	r5, r1
 80120e6:	f000 fd41 	bl	8012b6c <uxr_millis>
 80120ea:	4606      	mov	r6, r0
 80120ec:	4620      	mov	r0, r4
 80120ee:	f7ff fc7f 	bl	80119f0 <uxr_flash_output_streams>
 80120f2:	2300      	movs	r3, #0
 80120f4:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 80120f8:	4629      	mov	r1, r5
 80120fa:	e005      	b.n	8012108 <uxr_run_session_until_data+0x28>
 80120fc:	f000 fd36 	bl	8012b6c <uxr_millis>
 8012100:	1b81      	subs	r1, r0, r6
 8012102:	1a69      	subs	r1, r5, r1
 8012104:	2900      	cmp	r1, #0
 8012106:	dd07      	ble.n	8012118 <uxr_run_session_until_data+0x38>
 8012108:	4620      	mov	r0, r4
 801210a:	f7ff fe95 	bl	8011e38 <listen_message_reliably>
 801210e:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 8012112:	2800      	cmp	r0, #0
 8012114:	d0f2      	beq.n	80120fc <uxr_run_session_until_data+0x1c>
 8012116:	bd70      	pop	{r4, r5, r6, pc}
 8012118:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 801211c:	bd70      	pop	{r4, r5, r6, pc}
 801211e:	bf00      	nop

08012120 <uxr_run_session_until_confirm_delivery>:
 8012120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012124:	4606      	mov	r6, r0
 8012126:	460d      	mov	r5, r1
 8012128:	f000 fd20 	bl	8012b6c <uxr_millis>
 801212c:	4607      	mov	r7, r0
 801212e:	4630      	mov	r0, r6
 8012130:	f7ff fc5e 	bl	80119f0 <uxr_flash_output_streams>
 8012134:	2d00      	cmp	r5, #0
 8012136:	db16      	blt.n	8012166 <uxr_run_session_until_confirm_delivery+0x46>
 8012138:	462c      	mov	r4, r5
 801213a:	f106 0808 	add.w	r8, r6, #8
 801213e:	e008      	b.n	8012152 <uxr_run_session_until_confirm_delivery+0x32>
 8012140:	4621      	mov	r1, r4
 8012142:	4630      	mov	r0, r6
 8012144:	f7ff fe78 	bl	8011e38 <listen_message_reliably>
 8012148:	f000 fd10 	bl	8012b6c <uxr_millis>
 801214c:	1bc1      	subs	r1, r0, r7
 801214e:	1a6c      	subs	r4, r5, r1
 8012150:	d404      	bmi.n	801215c <uxr_run_session_until_confirm_delivery+0x3c>
 8012152:	4640      	mov	r0, r8
 8012154:	f000 fcae 	bl	8012ab4 <uxr_output_streams_confirmed>
 8012158:	2800      	cmp	r0, #0
 801215a:	d0f1      	beq.n	8012140 <uxr_run_session_until_confirm_delivery+0x20>
 801215c:	4640      	mov	r0, r8
 801215e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012162:	f000 bca7 	b.w	8012ab4 <uxr_output_streams_confirmed>
 8012166:	f106 0808 	add.w	r8, r6, #8
 801216a:	e7f7      	b.n	801215c <uxr_run_session_until_confirm_delivery+0x3c>

0801216c <uxr_run_session_until_all_status>:
 801216c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012170:	9c08      	ldr	r4, [sp, #32]
 8012172:	4605      	mov	r5, r0
 8012174:	460f      	mov	r7, r1
 8012176:	4690      	mov	r8, r2
 8012178:	461e      	mov	r6, r3
 801217a:	f7ff fc39 	bl	80119f0 <uxr_flash_output_streams>
 801217e:	b124      	cbz	r4, 801218a <uxr_run_session_until_all_status+0x1e>
 8012180:	4622      	mov	r2, r4
 8012182:	21ff      	movs	r1, #255	@ 0xff
 8012184:	4630      	mov	r0, r6
 8012186:	f00b f983 	bl	801d490 <memset>
 801218a:	e9c5 861d 	strd	r8, r6, [r5, #116]	@ 0x74
 801218e:	67ec      	str	r4, [r5, #124]	@ 0x7c
 8012190:	f000 fcec 	bl	8012b6c <uxr_millis>
 8012194:	4639      	mov	r1, r7
 8012196:	4681      	mov	r9, r0
 8012198:	4628      	mov	r0, r5
 801219a:	f7ff fe4d 	bl	8011e38 <listen_message_reliably>
 801219e:	f000 fce5 	bl	8012b6c <uxr_millis>
 80121a2:	eba0 0109 	sub.w	r1, r0, r9
 80121a6:	1a79      	subs	r1, r7, r1
 80121a8:	b36c      	cbz	r4, 8012206 <uxr_run_session_until_all_status+0x9a>
 80121aa:	1e70      	subs	r0, r6, #1
 80121ac:	46c6      	mov	lr, r8
 80121ae:	1902      	adds	r2, r0, r4
 80121b0:	4684      	mov	ip, r0
 80121b2:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 80121b6:	2bff      	cmp	r3, #255	@ 0xff
 80121b8:	d007      	beq.n	80121ca <uxr_run_session_until_all_status+0x5e>
 80121ba:	4594      	cmp	ip, r2
 80121bc:	d00f      	beq.n	80121de <uxr_run_session_until_all_status+0x72>
 80121be:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 80121c2:	2bff      	cmp	r3, #255	@ 0xff
 80121c4:	f10e 0e02 	add.w	lr, lr, #2
 80121c8:	d1f7      	bne.n	80121ba <uxr_run_session_until_all_status+0x4e>
 80121ca:	4594      	cmp	ip, r2
 80121cc:	f8be 3000 	ldrh.w	r3, [lr]
 80121d0:	d014      	beq.n	80121fc <uxr_run_session_until_all_status+0x90>
 80121d2:	f10e 0e02 	add.w	lr, lr, #2
 80121d6:	2b00      	cmp	r3, #0
 80121d8:	d0eb      	beq.n	80121b2 <uxr_run_session_until_all_status+0x46>
 80121da:	2900      	cmp	r1, #0
 80121dc:	dcdc      	bgt.n	8012198 <uxr_run_session_until_all_status+0x2c>
 80121de:	2300      	movs	r3, #0
 80121e0:	67eb      	str	r3, [r5, #124]	@ 0x7c
 80121e2:	e001      	b.n	80121e8 <uxr_run_session_until_all_status+0x7c>
 80121e4:	2b01      	cmp	r3, #1
 80121e6:	d812      	bhi.n	801220e <uxr_run_session_until_all_status+0xa2>
 80121e8:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 80121ec:	4290      	cmp	r0, r2
 80121ee:	d1f9      	bne.n	80121e4 <uxr_run_session_until_all_status+0x78>
 80121f0:	2b01      	cmp	r3, #1
 80121f2:	bf8c      	ite	hi
 80121f4:	2000      	movhi	r0, #0
 80121f6:	2001      	movls	r0, #1
 80121f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80121fc:	2900      	cmp	r1, #0
 80121fe:	ddee      	ble.n	80121de <uxr_run_session_until_all_status+0x72>
 8012200:	2b00      	cmp	r3, #0
 8012202:	d1c9      	bne.n	8012198 <uxr_run_session_until_all_status+0x2c>
 8012204:	e7eb      	b.n	80121de <uxr_run_session_until_all_status+0x72>
 8012206:	67ec      	str	r4, [r5, #124]	@ 0x7c
 8012208:	2001      	movs	r0, #1
 801220a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801220e:	2000      	movs	r0, #0
 8012210:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08012214 <wait_session_status>:
 8012214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012218:	4604      	mov	r4, r0
 801221a:	20ff      	movs	r0, #255	@ 0xff
 801221c:	b09f      	sub	sp, #124	@ 0x7c
 801221e:	7160      	strb	r0, [r4, #5]
 8012220:	2b00      	cmp	r3, #0
 8012222:	f000 80bb 	beq.w	801239c <wait_session_status+0x188>
 8012226:	4692      	mov	sl, r2
 8012228:	469b      	mov	fp, r3
 801222a:	f04f 0800 	mov.w	r8, #0
 801222e:	9105      	str	r1, [sp, #20]
 8012230:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8012232:	9905      	ldr	r1, [sp, #20]
 8012234:	e9d3 0500 	ldrd	r0, r5, [r3]
 8012238:	4652      	mov	r2, sl
 801223a:	47a8      	blx	r5
 801223c:	f000 fc96 	bl	8012b6c <uxr_millis>
 8012240:	2700      	movs	r7, #0
 8012242:	4605      	mov	r5, r0
 8012244:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8012248:	e009      	b.n	801225e <wait_session_status+0x4a>
 801224a:	f000 fc8f 	bl	8012b6c <uxr_millis>
 801224e:	1b43      	subs	r3, r0, r5
 8012250:	f5c3 737a 	rsb	r3, r3, #1000	@ 0x3e8
 8012254:	2b00      	cmp	r3, #0
 8012256:	7962      	ldrb	r2, [r4, #5]
 8012258:	dd3d      	ble.n	80122d6 <wait_session_status+0xc2>
 801225a:	2aff      	cmp	r2, #255	@ 0xff
 801225c:	d13b      	bne.n	80122d6 <wait_session_status+0xc2>
 801225e:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8012260:	a90a      	add	r1, sp, #40	@ 0x28
 8012262:	6896      	ldr	r6, [r2, #8]
 8012264:	6810      	ldr	r0, [r2, #0]
 8012266:	aa0b      	add	r2, sp, #44	@ 0x2c
 8012268:	47b0      	blx	r6
 801226a:	2800      	cmp	r0, #0
 801226c:	d0ed      	beq.n	801224a <wait_session_status+0x36>
 801226e:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	@ 0x28
 8012272:	a80e      	add	r0, sp, #56	@ 0x38
 8012274:	f7fe ffb0 	bl	80111d8 <ucdr_init_buffer>
 8012278:	f10d 0326 	add.w	r3, sp, #38	@ 0x26
 801227c:	aa09      	add	r2, sp, #36	@ 0x24
 801227e:	a90e      	add	r1, sp, #56	@ 0x38
 8012280:	4620      	mov	r0, r4
 8012282:	f88d 7024 	strb.w	r7, [sp, #36]	@ 0x24
 8012286:	f000 fa9b 	bl	80127c0 <uxr_read_session_header>
 801228a:	2800      	cmp	r0, #0
 801228c:	d0dd      	beq.n	801224a <wait_session_status+0x36>
 801228e:	f89d 0024 	ldrb.w	r0, [sp, #36]	@ 0x24
 8012292:	2100      	movs	r1, #0
 8012294:	f000 fb24 	bl	80128e0 <uxr_stream_id_from_raw>
 8012298:	f8bd 3026 	ldrh.w	r3, [sp, #38]	@ 0x26
 801229c:	9304      	str	r3, [sp, #16]
 801229e:	f3c0 4907 	ubfx	r9, r0, #16, #8
 80122a2:	b2c3      	uxtb	r3, r0
 80122a4:	f1b9 0f01 	cmp.w	r9, #1
 80122a8:	e9cd 000c 	strd	r0, r0, [sp, #48]	@ 0x30
 80122ac:	9303      	str	r3, [sp, #12]
 80122ae:	f3c0 2607 	ubfx	r6, r0, #8, #8
 80122b2:	d05d      	beq.n	8012370 <wait_session_status+0x15c>
 80122b4:	f1b9 0f02 	cmp.w	r9, #2
 80122b8:	d01a      	beq.n	80122f0 <wait_session_status+0xdc>
 80122ba:	f1b9 0f00 	cmp.w	r9, #0
 80122be:	d1c4      	bne.n	801224a <wait_session_status+0x36>
 80122c0:	4649      	mov	r1, r9
 80122c2:	4648      	mov	r0, r9
 80122c4:	f000 fb0c 	bl	80128e0 <uxr_stream_id_from_raw>
 80122c8:	a90e      	add	r1, sp, #56	@ 0x38
 80122ca:	4602      	mov	r2, r0
 80122cc:	900d      	str	r0, [sp, #52]	@ 0x34
 80122ce:	4620      	mov	r0, r4
 80122d0:	f7ff fc42 	bl	8011b58 <read_submessage_list>
 80122d4:	e7b9      	b.n	801224a <wait_session_status+0x36>
 80122d6:	f108 0801 	add.w	r8, r8, #1
 80122da:	45c3      	cmp	fp, r8
 80122dc:	d001      	beq.n	80122e2 <wait_session_status+0xce>
 80122de:	2aff      	cmp	r2, #255	@ 0xff
 80122e0:	d0a6      	beq.n	8012230 <wait_session_status+0x1c>
 80122e2:	f1b2 00ff 	subs.w	r0, r2, #255	@ 0xff
 80122e6:	bf18      	it	ne
 80122e8:	2001      	movne	r0, #1
 80122ea:	b01f      	add	sp, #124	@ 0x7c
 80122ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80122f0:	4631      	mov	r1, r6
 80122f2:	f104 0008 	add.w	r0, r4, #8
 80122f6:	f000 fbd3 	bl	8012aa0 <uxr_get_input_reliable_stream>
 80122fa:	9006      	str	r0, [sp, #24]
 80122fc:	2800      	cmp	r0, #0
 80122fe:	d031      	beq.n	8012364 <wait_session_status+0x150>
 8012300:	aa0e      	add	r2, sp, #56	@ 0x38
 8012302:	4610      	mov	r0, r2
 8012304:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8012306:	9207      	str	r2, [sp, #28]
 8012308:	f7fe ff96 	bl	8011238 <ucdr_buffer_remaining>
 801230c:	4603      	mov	r3, r0
 801230e:	f10d 0025 	add.w	r0, sp, #37	@ 0x25
 8012312:	9000      	str	r0, [sp, #0]
 8012314:	9a07      	ldr	r2, [sp, #28]
 8012316:	9904      	ldr	r1, [sp, #16]
 8012318:	9806      	ldr	r0, [sp, #24]
 801231a:	f007 ff95 	bl	801a248 <uxr_receive_reliable_message>
 801231e:	b308      	cbz	r0, 8012364 <wait_session_status+0x150>
 8012320:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 8012324:	2b00      	cmp	r3, #0
 8012326:	d041      	beq.n	80123ac <wait_session_status+0x198>
 8012328:	f8cd 8010 	str.w	r8, [sp, #16]
 801232c:	9507      	str	r5, [sp, #28]
 801232e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8012332:	9d06      	ldr	r5, [sp, #24]
 8012334:	f04f 0902 	mov.w	r9, #2
 8012338:	e00a      	b.n	8012350 <wait_session_status+0x13c>
 801233a:	f88d 8034 	strb.w	r8, [sp, #52]	@ 0x34
 801233e:	f88d 6035 	strb.w	r6, [sp, #53]	@ 0x35
 8012342:	f88d 9036 	strb.w	r9, [sp, #54]	@ 0x36
 8012346:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8012348:	a916      	add	r1, sp, #88	@ 0x58
 801234a:	4620      	mov	r0, r4
 801234c:	f7ff fc04 	bl	8011b58 <read_submessage_list>
 8012350:	2204      	movs	r2, #4
 8012352:	a916      	add	r1, sp, #88	@ 0x58
 8012354:	4628      	mov	r0, r5
 8012356:	f007 fff1 	bl	801a33c <uxr_next_input_reliable_buffer_available>
 801235a:	2800      	cmp	r0, #0
 801235c:	d1ed      	bne.n	801233a <wait_session_status+0x126>
 801235e:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8012362:	9d07      	ldr	r5, [sp, #28]
 8012364:	9903      	ldr	r1, [sp, #12]
 8012366:	4632      	mov	r2, r6
 8012368:	4620      	mov	r0, r4
 801236a:	f7ff fa99 	bl	80118a0 <write_submessage_acknack.isra.0>
 801236e:	e76c      	b.n	801224a <wait_session_status+0x36>
 8012370:	4631      	mov	r1, r6
 8012372:	f104 0008 	add.w	r0, r4, #8
 8012376:	f000 fb89 	bl	8012a8c <uxr_get_input_best_effort_stream>
 801237a:	2800      	cmp	r0, #0
 801237c:	f43f af65 	beq.w	801224a <wait_session_status+0x36>
 8012380:	9904      	ldr	r1, [sp, #16]
 8012382:	f007 fed1 	bl	801a128 <uxr_receive_best_effort_message>
 8012386:	2800      	cmp	r0, #0
 8012388:	f43f af5f 	beq.w	801224a <wait_session_status+0x36>
 801238c:	f88d 9036 	strb.w	r9, [sp, #54]	@ 0x36
 8012390:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8012392:	a90e      	add	r1, sp, #56	@ 0x38
 8012394:	4620      	mov	r0, r4
 8012396:	f7ff fbdf 	bl	8011b58 <read_submessage_list>
 801239a:	e756      	b.n	801224a <wait_session_status+0x36>
 801239c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801239e:	e9d3 0400 	ldrd	r0, r4, [r3]
 80123a2:	47a0      	blx	r4
 80123a4:	2001      	movs	r0, #1
 80123a6:	b01f      	add	sp, #124	@ 0x7c
 80123a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80123ac:	f88d 9036 	strb.w	r9, [sp, #54]	@ 0x36
 80123b0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80123b2:	a90e      	add	r1, sp, #56	@ 0x38
 80123b4:	4620      	mov	r0, r4
 80123b6:	f7ff fbcf 	bl	8011b58 <read_submessage_list>
 80123ba:	e7b5      	b.n	8012328 <wait_session_status+0x114>

080123bc <uxr_delete_session_retries>:
 80123bc:	b530      	push	{r4, r5, lr}
 80123be:	b08f      	sub	sp, #60	@ 0x3c
 80123c0:	4604      	mov	r4, r0
 80123c2:	460d      	mov	r5, r1
 80123c4:	f000 fa3a 	bl	801283c <uxr_session_header_offset>
 80123c8:	2300      	movs	r3, #0
 80123ca:	2210      	movs	r2, #16
 80123cc:	9000      	str	r0, [sp, #0]
 80123ce:	a902      	add	r1, sp, #8
 80123d0:	a806      	add	r0, sp, #24
 80123d2:	f7fe feef 	bl	80111b4 <ucdr_init_buffer_origin_offset>
 80123d6:	a906      	add	r1, sp, #24
 80123d8:	4620      	mov	r0, r4
 80123da:	f000 f981 	bl	80126e0 <uxr_buffer_delete_session>
 80123de:	2200      	movs	r2, #0
 80123e0:	4611      	mov	r1, r2
 80123e2:	9b06      	ldr	r3, [sp, #24]
 80123e4:	4620      	mov	r0, r4
 80123e6:	f000 f9d5 	bl	8012794 <uxr_stamp_session_header>
 80123ea:	a806      	add	r0, sp, #24
 80123ec:	f7fe ff20 	bl	8011230 <ucdr_buffer_length>
 80123f0:	462b      	mov	r3, r5
 80123f2:	4602      	mov	r2, r0
 80123f4:	a902      	add	r1, sp, #8
 80123f6:	4620      	mov	r0, r4
 80123f8:	f7ff ff0c 	bl	8012214 <wait_session_status>
 80123fc:	b118      	cbz	r0, 8012406 <uxr_delete_session_retries+0x4a>
 80123fe:	7960      	ldrb	r0, [r4, #5]
 8012400:	fab0 f080 	clz	r0, r0
 8012404:	0940      	lsrs	r0, r0, #5
 8012406:	b00f      	add	sp, #60	@ 0x3c
 8012408:	bd30      	pop	{r4, r5, pc}
 801240a:	bf00      	nop

0801240c <uxr_create_session>:
 801240c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012410:	f100 0308 	add.w	r3, r0, #8
 8012414:	b0ab      	sub	sp, #172	@ 0xac
 8012416:	4604      	mov	r4, r0
 8012418:	4618      	mov	r0, r3
 801241a:	9303      	str	r3, [sp, #12]
 801241c:	f000 fa86 	bl	801292c <uxr_reset_stream_storage>
 8012420:	4620      	mov	r0, r4
 8012422:	f000 fa0b 	bl	801283c <uxr_session_header_offset>
 8012426:	2300      	movs	r3, #0
 8012428:	9000      	str	r0, [sp, #0]
 801242a:	221c      	movs	r2, #28
 801242c:	a90b      	add	r1, sp, #44	@ 0x2c
 801242e:	a812      	add	r0, sp, #72	@ 0x48
 8012430:	f7fe fec0 	bl	80111b4 <ucdr_init_buffer_origin_offset>
 8012434:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8012436:	8a1a      	ldrh	r2, [r3, #16]
 8012438:	3a04      	subs	r2, #4
 801243a:	b292      	uxth	r2, r2
 801243c:	a912      	add	r1, sp, #72	@ 0x48
 801243e:	4620      	mov	r0, r4
 8012440:	f000 f924 	bl	801268c <uxr_buffer_create_session>
 8012444:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8012446:	4620      	mov	r0, r4
 8012448:	f000 f990 	bl	801276c <uxr_stamp_create_session_header>
 801244c:	a812      	add	r0, sp, #72	@ 0x48
 801244e:	f7fe feef 	bl	8011230 <ucdr_buffer_length>
 8012452:	23ff      	movs	r3, #255	@ 0xff
 8012454:	4683      	mov	fp, r0
 8012456:	7163      	strb	r3, [r4, #5]
 8012458:	f04f 080a 	mov.w	r8, #10
 801245c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801245e:	465a      	mov	r2, fp
 8012460:	e9d3 0500 	ldrd	r0, r5, [r3]
 8012464:	a90b      	add	r1, sp, #44	@ 0x2c
 8012466:	47a8      	blx	r5
 8012468:	f000 fb80 	bl	8012b6c <uxr_millis>
 801246c:	2700      	movs	r7, #0
 801246e:	4605      	mov	r5, r0
 8012470:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8012474:	e009      	b.n	801248a <uxr_create_session+0x7e>
 8012476:	f000 fb79 	bl	8012b6c <uxr_millis>
 801247a:	1b43      	subs	r3, r0, r5
 801247c:	f5c3 737a 	rsb	r3, r3, #1000	@ 0x3e8
 8012480:	2b00      	cmp	r3, #0
 8012482:	7962      	ldrb	r2, [r4, #5]
 8012484:	dd3d      	ble.n	8012502 <uxr_create_session+0xf6>
 8012486:	2aff      	cmp	r2, #255	@ 0xff
 8012488:	d13b      	bne.n	8012502 <uxr_create_session+0xf6>
 801248a:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 801248c:	a907      	add	r1, sp, #28
 801248e:	6896      	ldr	r6, [r2, #8]
 8012490:	6810      	ldr	r0, [r2, #0]
 8012492:	aa08      	add	r2, sp, #32
 8012494:	47b0      	blx	r6
 8012496:	2800      	cmp	r0, #0
 8012498:	d0ed      	beq.n	8012476 <uxr_create_session+0x6a>
 801249a:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 801249e:	a81a      	add	r0, sp, #104	@ 0x68
 80124a0:	f7fe fe9a 	bl	80111d8 <ucdr_init_buffer>
 80124a4:	f10d 031a 	add.w	r3, sp, #26
 80124a8:	aa06      	add	r2, sp, #24
 80124aa:	a91a      	add	r1, sp, #104	@ 0x68
 80124ac:	4620      	mov	r0, r4
 80124ae:	f88d 7018 	strb.w	r7, [sp, #24]
 80124b2:	f000 f985 	bl	80127c0 <uxr_read_session_header>
 80124b6:	2800      	cmp	r0, #0
 80124b8:	d0dd      	beq.n	8012476 <uxr_create_session+0x6a>
 80124ba:	f89d 0018 	ldrb.w	r0, [sp, #24]
 80124be:	2100      	movs	r1, #0
 80124c0:	f000 fa0e 	bl	80128e0 <uxr_stream_id_from_raw>
 80124c4:	f3c0 4907 	ubfx	r9, r0, #16, #8
 80124c8:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 80124cc:	9302      	str	r3, [sp, #8]
 80124ce:	f1b9 0f01 	cmp.w	r9, #1
 80124d2:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 80124d6:	fa5f fa80 	uxtb.w	sl, r0
 80124da:	f3c0 2607 	ubfx	r6, r0, #8, #8
 80124de:	d056      	beq.n	801258e <uxr_create_session+0x182>
 80124e0:	f1b9 0f02 	cmp.w	r9, #2
 80124e4:	d018      	beq.n	8012518 <uxr_create_session+0x10c>
 80124e6:	f1b9 0f00 	cmp.w	r9, #0
 80124ea:	d1c4      	bne.n	8012476 <uxr_create_session+0x6a>
 80124ec:	4649      	mov	r1, r9
 80124ee:	4648      	mov	r0, r9
 80124f0:	f000 f9f6 	bl	80128e0 <uxr_stream_id_from_raw>
 80124f4:	a91a      	add	r1, sp, #104	@ 0x68
 80124f6:	4602      	mov	r2, r0
 80124f8:	900a      	str	r0, [sp, #40]	@ 0x28
 80124fa:	4620      	mov	r0, r4
 80124fc:	f7ff fb2c 	bl	8011b58 <read_submessage_list>
 8012500:	e7b9      	b.n	8012476 <uxr_create_session+0x6a>
 8012502:	f1b8 0801 	subs.w	r8, r8, #1
 8012506:	d001      	beq.n	801250c <uxr_create_session+0x100>
 8012508:	2aff      	cmp	r2, #255	@ 0xff
 801250a:	d0a7      	beq.n	801245c <uxr_create_session+0x50>
 801250c:	2a00      	cmp	r2, #0
 801250e:	d05b      	beq.n	80125c8 <uxr_create_session+0x1bc>
 8012510:	2000      	movs	r0, #0
 8012512:	b02b      	add	sp, #172	@ 0xac
 8012514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012518:	9803      	ldr	r0, [sp, #12]
 801251a:	4631      	mov	r1, r6
 801251c:	f000 fac0 	bl	8012aa0 <uxr_get_input_reliable_stream>
 8012520:	9004      	str	r0, [sp, #16]
 8012522:	b370      	cbz	r0, 8012582 <uxr_create_session+0x176>
 8012524:	aa1a      	add	r2, sp, #104	@ 0x68
 8012526:	4610      	mov	r0, r2
 8012528:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801252a:	9205      	str	r2, [sp, #20]
 801252c:	f7fe fe84 	bl	8011238 <ucdr_buffer_remaining>
 8012530:	4603      	mov	r3, r0
 8012532:	f10d 0019 	add.w	r0, sp, #25
 8012536:	9000      	str	r0, [sp, #0]
 8012538:	9a05      	ldr	r2, [sp, #20]
 801253a:	9902      	ldr	r1, [sp, #8]
 801253c:	9804      	ldr	r0, [sp, #16]
 801253e:	f007 fe83 	bl	801a248 <uxr_receive_reliable_message>
 8012542:	b1f0      	cbz	r0, 8012582 <uxr_create_session+0x176>
 8012544:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8012548:	2b00      	cmp	r3, #0
 801254a:	d035      	beq.n	80125b8 <uxr_create_session+0x1ac>
 801254c:	f8cd b008 	str.w	fp, [sp, #8]
 8012550:	f04f 0902 	mov.w	r9, #2
 8012554:	f8dd b010 	ldr.w	fp, [sp, #16]
 8012558:	e00a      	b.n	8012570 <uxr_create_session+0x164>
 801255a:	f88d a028 	strb.w	sl, [sp, #40]	@ 0x28
 801255e:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 8012562:	f88d 902a 	strb.w	r9, [sp, #42]	@ 0x2a
 8012566:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012568:	a922      	add	r1, sp, #136	@ 0x88
 801256a:	4620      	mov	r0, r4
 801256c:	f7ff faf4 	bl	8011b58 <read_submessage_list>
 8012570:	2204      	movs	r2, #4
 8012572:	a922      	add	r1, sp, #136	@ 0x88
 8012574:	4658      	mov	r0, fp
 8012576:	f007 fee1 	bl	801a33c <uxr_next_input_reliable_buffer_available>
 801257a:	2800      	cmp	r0, #0
 801257c:	d1ed      	bne.n	801255a <uxr_create_session+0x14e>
 801257e:	f8dd b008 	ldr.w	fp, [sp, #8]
 8012582:	4632      	mov	r2, r6
 8012584:	4651      	mov	r1, sl
 8012586:	4620      	mov	r0, r4
 8012588:	f7ff f98a 	bl	80118a0 <write_submessage_acknack.isra.0>
 801258c:	e773      	b.n	8012476 <uxr_create_session+0x6a>
 801258e:	9803      	ldr	r0, [sp, #12]
 8012590:	4631      	mov	r1, r6
 8012592:	f000 fa7b 	bl	8012a8c <uxr_get_input_best_effort_stream>
 8012596:	2800      	cmp	r0, #0
 8012598:	f43f af6d 	beq.w	8012476 <uxr_create_session+0x6a>
 801259c:	9902      	ldr	r1, [sp, #8]
 801259e:	f007 fdc3 	bl	801a128 <uxr_receive_best_effort_message>
 80125a2:	2800      	cmp	r0, #0
 80125a4:	f43f af67 	beq.w	8012476 <uxr_create_session+0x6a>
 80125a8:	f88d 902a 	strb.w	r9, [sp, #42]	@ 0x2a
 80125ac:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80125ae:	a91a      	add	r1, sp, #104	@ 0x68
 80125b0:	4620      	mov	r0, r4
 80125b2:	f7ff fad1 	bl	8011b58 <read_submessage_list>
 80125b6:	e75e      	b.n	8012476 <uxr_create_session+0x6a>
 80125b8:	f88d 902a 	strb.w	r9, [sp, #42]	@ 0x2a
 80125bc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80125be:	a91a      	add	r1, sp, #104	@ 0x68
 80125c0:	4620      	mov	r0, r4
 80125c2:	f7ff fac9 	bl	8011b58 <read_submessage_list>
 80125c6:	e7c1      	b.n	801254c <uxr_create_session+0x140>
 80125c8:	9803      	ldr	r0, [sp, #12]
 80125ca:	f000 f9af 	bl	801292c <uxr_reset_stream_storage>
 80125ce:	2001      	movs	r0, #1
 80125d0:	b02b      	add	sp, #172	@ 0xac
 80125d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80125d6:	bf00      	nop

080125d8 <uxr_prepare_stream_to_write_submessage>:
 80125d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80125dc:	b082      	sub	sp, #8
 80125de:	4606      	mov	r6, r0
 80125e0:	4610      	mov	r0, r2
 80125e2:	4614      	mov	r4, r2
 80125e4:	9101      	str	r1, [sp, #4]
 80125e6:	461f      	mov	r7, r3
 80125e8:	f3c1 2507 	ubfx	r5, r1, #8, #8
 80125ec:	f89d 8028 	ldrb.w	r8, [sp, #40]	@ 0x28
 80125f0:	f89d 902c 	ldrb.w	r9, [sp, #44]	@ 0x2c
 80125f4:	f000 fab4 	bl	8012b60 <uxr_submessage_padding>
 80125f8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80125fc:	1d21      	adds	r1, r4, #4
 80125fe:	2b01      	cmp	r3, #1
 8012600:	eb01 0a00 	add.w	sl, r1, r0
 8012604:	d012      	beq.n	801262c <uxr_prepare_stream_to_write_submessage+0x54>
 8012606:	2b02      	cmp	r3, #2
 8012608:	d003      	beq.n	8012612 <uxr_prepare_stream_to_write_submessage+0x3a>
 801260a:	2000      	movs	r0, #0
 801260c:	b002      	add	sp, #8
 801260e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012612:	4629      	mov	r1, r5
 8012614:	f106 0008 	add.w	r0, r6, #8
 8012618:	f000 fa2e 	bl	8012a78 <uxr_get_output_reliable_stream>
 801261c:	2800      	cmp	r0, #0
 801261e:	d0f4      	beq.n	801260a <uxr_prepare_stream_to_write_submessage+0x32>
 8012620:	4651      	mov	r1, sl
 8012622:	463a      	mov	r2, r7
 8012624:	f008 f840 	bl	801a6a8 <uxr_prepare_reliable_buffer_to_write>
 8012628:	b968      	cbnz	r0, 8012646 <uxr_prepare_stream_to_write_submessage+0x6e>
 801262a:	e7ee      	b.n	801260a <uxr_prepare_stream_to_write_submessage+0x32>
 801262c:	4629      	mov	r1, r5
 801262e:	f106 0008 	add.w	r0, r6, #8
 8012632:	f000 fa19 	bl	8012a68 <uxr_get_output_best_effort_stream>
 8012636:	2800      	cmp	r0, #0
 8012638:	d0e7      	beq.n	801260a <uxr_prepare_stream_to_write_submessage+0x32>
 801263a:	4651      	mov	r1, sl
 801263c:	463a      	mov	r2, r7
 801263e:	f007 ff65 	bl	801a50c <uxr_prepare_best_effort_buffer_to_write>
 8012642:	2800      	cmp	r0, #0
 8012644:	d0e1      	beq.n	801260a <uxr_prepare_stream_to_write_submessage+0x32>
 8012646:	464b      	mov	r3, r9
 8012648:	b2a2      	uxth	r2, r4
 801264a:	4641      	mov	r1, r8
 801264c:	4638      	mov	r0, r7
 801264e:	f000 fa47 	bl	8012ae0 <uxr_buffer_submessage_header>
 8012652:	2001      	movs	r0, #1
 8012654:	b002      	add	sp, #8
 8012656:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801265a:	bf00      	nop

0801265c <uxr_init_session_info>:
 801265c:	2300      	movs	r3, #0
 801265e:	f361 0307 	bfi	r3, r1, #0, #8
 8012662:	0e11      	lsrs	r1, r2, #24
 8012664:	f361 230f 	bfi	r3, r1, #8, #8
 8012668:	f3c2 4107 	ubfx	r1, r2, #16, #8
 801266c:	f361 4317 	bfi	r3, r1, #16, #8
 8012670:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8012674:	f361 631f 	bfi	r3, r1, #24, #8
 8012678:	f04f 0c09 	mov.w	ip, #9
 801267c:	21ff      	movs	r1, #255	@ 0xff
 801267e:	6003      	str	r3, [r0, #0]
 8012680:	7102      	strb	r2, [r0, #4]
 8012682:	f8a0 c006 	strh.w	ip, [r0, #6]
 8012686:	7141      	strb	r1, [r0, #5]
 8012688:	4770      	bx	lr
 801268a:	bf00      	nop

0801268c <uxr_buffer_create_session>:
 801268c:	b530      	push	{r4, r5, lr}
 801268e:	4d13      	ldr	r5, [pc, #76]	@ (80126dc <uxr_buffer_create_session+0x50>)
 8012690:	b089      	sub	sp, #36	@ 0x24
 8012692:	2300      	movs	r3, #0
 8012694:	9307      	str	r3, [sp, #28]
 8012696:	f8ad 201c 	strh.w	r2, [sp, #28]
 801269a:	682a      	ldr	r2, [r5, #0]
 801269c:	9200      	str	r2, [sp, #0]
 801269e:	460c      	mov	r4, r1
 80126a0:	2201      	movs	r2, #1
 80126a2:	88a9      	ldrh	r1, [r5, #4]
 80126a4:	9301      	str	r3, [sp, #4]
 80126a6:	80c2      	strh	r2, [r0, #6]
 80126a8:	f8ad 1006 	strh.w	r1, [sp, #6]
 80126ac:	f8d0 1001 	ldr.w	r1, [r0, #1]
 80126b0:	7800      	ldrb	r0, [r0, #0]
 80126b2:	9303      	str	r3, [sp, #12]
 80126b4:	f88d 2004 	strb.w	r2, [sp, #4]
 80126b8:	9102      	str	r1, [sp, #8]
 80126ba:	2210      	movs	r2, #16
 80126bc:	4619      	mov	r1, r3
 80126be:	f88d 000c 	strb.w	r0, [sp, #12]
 80126c2:	4620      	mov	r0, r4
 80126c4:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80126c8:	9306      	str	r3, [sp, #24]
 80126ca:	f000 fa09 	bl	8012ae0 <uxr_buffer_submessage_header>
 80126ce:	4669      	mov	r1, sp
 80126d0:	4620      	mov	r0, r4
 80126d2:	f001 fa59 	bl	8013b88 <uxr_serialize_CREATE_CLIENT_Payload>
 80126d6:	b009      	add	sp, #36	@ 0x24
 80126d8:	bd30      	pop	{r4, r5, pc}
 80126da:	bf00      	nop
 80126dc:	0801e6ec 	.word	0x0801e6ec

080126e0 <uxr_buffer_delete_session>:
 80126e0:	b510      	push	{r4, lr}
 80126e2:	4a0c      	ldr	r2, [pc, #48]	@ (8012714 <uxr_buffer_delete_session+0x34>)
 80126e4:	b082      	sub	sp, #8
 80126e6:	460c      	mov	r4, r1
 80126e8:	2302      	movs	r3, #2
 80126ea:	8911      	ldrh	r1, [r2, #8]
 80126ec:	80c3      	strh	r3, [r0, #6]
 80126ee:	f44f 7c00 	mov.w	ip, #512	@ 0x200
 80126f2:	2300      	movs	r3, #0
 80126f4:	2204      	movs	r2, #4
 80126f6:	f8ad 1006 	strh.w	r1, [sp, #6]
 80126fa:	4620      	mov	r0, r4
 80126fc:	2103      	movs	r1, #3
 80126fe:	f8ad c004 	strh.w	ip, [sp, #4]
 8012702:	f000 f9ed 	bl	8012ae0 <uxr_buffer_submessage_header>
 8012706:	a901      	add	r1, sp, #4
 8012708:	4620      	mov	r0, r4
 801270a:	f001 fae1 	bl	8013cd0 <uxr_serialize_DELETE_Payload>
 801270e:	b002      	add	sp, #8
 8012710:	bd10      	pop	{r4, pc}
 8012712:	bf00      	nop
 8012714:	0801e6ec 	.word	0x0801e6ec

08012718 <uxr_read_create_session_status>:
 8012718:	b510      	push	{r4, lr}
 801271a:	460b      	mov	r3, r1
 801271c:	b088      	sub	sp, #32
 801271e:	4604      	mov	r4, r0
 8012720:	a901      	add	r1, sp, #4
 8012722:	4618      	mov	r0, r3
 8012724:	f001 fae4 	bl	8013cf0 <uxr_deserialize_STATUS_AGENT_Payload>
 8012728:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801272c:	7163      	strb	r3, [r4, #5]
 801272e:	b008      	add	sp, #32
 8012730:	bd10      	pop	{r4, pc}
 8012732:	bf00      	nop

08012734 <uxr_read_delete_session_status>:
 8012734:	b510      	push	{r4, lr}
 8012736:	460b      	mov	r3, r1
 8012738:	b082      	sub	sp, #8
 801273a:	4604      	mov	r4, r0
 801273c:	4669      	mov	r1, sp
 801273e:	4618      	mov	r0, r3
 8012740:	f001 fb06 	bl	8013d50 <uxr_deserialize_STATUS_Payload>
 8012744:	88e3      	ldrh	r3, [r4, #6]
 8012746:	2b02      	cmp	r3, #2
 8012748:	d001      	beq.n	801274e <uxr_read_delete_session_status+0x1a>
 801274a:	b002      	add	sp, #8
 801274c:	bd10      	pop	{r4, pc}
 801274e:	f10d 0002 	add.w	r0, sp, #2
 8012752:	f7ff f82d 	bl	80117b0 <uxr_object_id_from_raw>
 8012756:	f8bd 3000 	ldrh.w	r3, [sp]
 801275a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801275e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012762:	bf08      	it	eq
 8012764:	7162      	strbeq	r2, [r4, #5]
 8012766:	b002      	add	sp, #8
 8012768:	bd10      	pop	{r4, pc}
 801276a:	bf00      	nop

0801276c <uxr_stamp_create_session_header>:
 801276c:	b510      	push	{r4, lr}
 801276e:	2208      	movs	r2, #8
 8012770:	b08a      	sub	sp, #40	@ 0x28
 8012772:	4604      	mov	r4, r0
 8012774:	eb0d 0002 	add.w	r0, sp, r2
 8012778:	f7fe fd2e 	bl	80111d8 <ucdr_init_buffer>
 801277c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012780:	9400      	str	r4, [sp, #0]
 8012782:	2300      	movs	r3, #0
 8012784:	461a      	mov	r2, r3
 8012786:	a802      	add	r0, sp, #8
 8012788:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 801278c:	f000 fba6 	bl	8012edc <uxr_serialize_message_header>
 8012790:	b00a      	add	sp, #40	@ 0x28
 8012792:	bd10      	pop	{r4, pc}

08012794 <uxr_stamp_session_header>:
 8012794:	b570      	push	{r4, r5, r6, lr}
 8012796:	4604      	mov	r4, r0
 8012798:	b08a      	sub	sp, #40	@ 0x28
 801279a:	4616      	mov	r6, r2
 801279c:	2208      	movs	r2, #8
 801279e:	eb0d 0002 	add.w	r0, sp, r2
 80127a2:	460d      	mov	r5, r1
 80127a4:	4619      	mov	r1, r3
 80127a6:	f7fe fd17 	bl	80111d8 <ucdr_init_buffer>
 80127aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80127ae:	9400      	str	r4, [sp, #0]
 80127b0:	4633      	mov	r3, r6
 80127b2:	462a      	mov	r2, r5
 80127b4:	a802      	add	r0, sp, #8
 80127b6:	f000 fb91 	bl	8012edc <uxr_serialize_message_header>
 80127ba:	b00a      	add	sp, #40	@ 0x28
 80127bc:	bd70      	pop	{r4, r5, r6, pc}
 80127be:	bf00      	nop

080127c0 <uxr_read_session_header>:
 80127c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80127c2:	4607      	mov	r7, r0
 80127c4:	b085      	sub	sp, #20
 80127c6:	4608      	mov	r0, r1
 80127c8:	460c      	mov	r4, r1
 80127ca:	4615      	mov	r5, r2
 80127cc:	461e      	mov	r6, r3
 80127ce:	f7fe fd33 	bl	8011238 <ucdr_buffer_remaining>
 80127d2:	2808      	cmp	r0, #8
 80127d4:	d802      	bhi.n	80127dc <uxr_read_session_header+0x1c>
 80127d6:	2000      	movs	r0, #0
 80127d8:	b005      	add	sp, #20
 80127da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80127dc:	ab03      	add	r3, sp, #12
 80127de:	9300      	str	r3, [sp, #0]
 80127e0:	462a      	mov	r2, r5
 80127e2:	4633      	mov	r3, r6
 80127e4:	f10d 010b 	add.w	r1, sp, #11
 80127e8:	4620      	mov	r0, r4
 80127ea:	f000 fb95 	bl	8012f18 <uxr_deserialize_message_header>
 80127ee:	783a      	ldrb	r2, [r7, #0]
 80127f0:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80127f4:	4293      	cmp	r3, r2
 80127f6:	d1ee      	bne.n	80127d6 <uxr_read_session_header+0x16>
 80127f8:	061b      	lsls	r3, r3, #24
 80127fa:	d41c      	bmi.n	8012836 <uxr_read_session_header+0x76>
 80127fc:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8012800:	787b      	ldrb	r3, [r7, #1]
 8012802:	429a      	cmp	r2, r3
 8012804:	d003      	beq.n	801280e <uxr_read_session_header+0x4e>
 8012806:	2001      	movs	r0, #1
 8012808:	f080 0001 	eor.w	r0, r0, #1
 801280c:	e7e4      	b.n	80127d8 <uxr_read_session_header+0x18>
 801280e:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8012812:	78bb      	ldrb	r3, [r7, #2]
 8012814:	429a      	cmp	r2, r3
 8012816:	f107 0102 	add.w	r1, r7, #2
 801281a:	d1f4      	bne.n	8012806 <uxr_read_session_header+0x46>
 801281c:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8012820:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8012824:	429a      	cmp	r2, r3
 8012826:	d1ee      	bne.n	8012806 <uxr_read_session_header+0x46>
 8012828:	f89d 200f 	ldrb.w	r2, [sp, #15]
 801282c:	784b      	ldrb	r3, [r1, #1]
 801282e:	429a      	cmp	r2, r3
 8012830:	d1e9      	bne.n	8012806 <uxr_read_session_header+0x46>
 8012832:	2000      	movs	r0, #0
 8012834:	e7e8      	b.n	8012808 <uxr_read_session_header+0x48>
 8012836:	2001      	movs	r0, #1
 8012838:	e7ce      	b.n	80127d8 <uxr_read_session_header+0x18>
 801283a:	bf00      	nop

0801283c <uxr_session_header_offset>:
 801283c:	f990 3000 	ldrsb.w	r3, [r0]
 8012840:	2b00      	cmp	r3, #0
 8012842:	bfb4      	ite	lt
 8012844:	2004      	movlt	r0, #4
 8012846:	2008      	movge	r0, #8
 8012848:	4770      	bx	lr
 801284a:	bf00      	nop

0801284c <uxr_init_base_object_request>:
 801284c:	b510      	push	{r4, lr}
 801284e:	88c3      	ldrh	r3, [r0, #6]
 8012850:	b082      	sub	sp, #8
 8012852:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 8012856:	9101      	str	r1, [sp, #4]
 8012858:	f1a3 010a 	sub.w	r1, r3, #10
 801285c:	b289      	uxth	r1, r1
 801285e:	42a1      	cmp	r1, r4
 8012860:	d80e      	bhi.n	8012880 <uxr_init_base_object_request+0x34>
 8012862:	3301      	adds	r3, #1
 8012864:	b29c      	uxth	r4, r3
 8012866:	f3c3 2107 	ubfx	r1, r3, #8, #8
 801286a:	b2db      	uxtb	r3, r3
 801286c:	80c4      	strh	r4, [r0, #6]
 801286e:	9801      	ldr	r0, [sp, #4]
 8012870:	7011      	strb	r1, [r2, #0]
 8012872:	7053      	strb	r3, [r2, #1]
 8012874:	1c91      	adds	r1, r2, #2
 8012876:	f7fe ffaf 	bl	80117d8 <uxr_object_id_to_raw>
 801287a:	4620      	mov	r0, r4
 801287c:	b002      	add	sp, #8
 801287e:	bd10      	pop	{r4, pc}
 8012880:	230a      	movs	r3, #10
 8012882:	2100      	movs	r1, #0
 8012884:	461c      	mov	r4, r3
 8012886:	e7f1      	b.n	801286c <uxr_init_base_object_request+0x20>

08012888 <uxr_parse_base_object_request>:
 8012888:	b570      	push	{r4, r5, r6, lr}
 801288a:	4604      	mov	r4, r0
 801288c:	3002      	adds	r0, #2
 801288e:	460d      	mov	r5, r1
 8012890:	4616      	mov	r6, r2
 8012892:	f7fe ff8d 	bl	80117b0 <uxr_object_id_from_raw>
 8012896:	f3c0 430f 	ubfx	r3, r0, #16, #16
 801289a:	8028      	strh	r0, [r5, #0]
 801289c:	806b      	strh	r3, [r5, #2]
 801289e:	8823      	ldrh	r3, [r4, #0]
 80128a0:	ba5b      	rev16	r3, r3
 80128a2:	8033      	strh	r3, [r6, #0]
 80128a4:	bd70      	pop	{r4, r5, r6, pc}
 80128a6:	bf00      	nop

080128a8 <uxr_stream_id>:
 80128a8:	2901      	cmp	r1, #1
 80128aa:	b082      	sub	sp, #8
 80128ac:	4603      	mov	r3, r0
 80128ae:	d011      	beq.n	80128d4 <uxr_stream_id+0x2c>
 80128b0:	2902      	cmp	r1, #2
 80128b2:	f04f 0c00 	mov.w	ip, #0
 80128b6:	d00a      	beq.n	80128ce <uxr_stream_id+0x26>
 80128b8:	2000      	movs	r0, #0
 80128ba:	f36c 0007 	bfi	r0, ip, #0, #8
 80128be:	f363 200f 	bfi	r0, r3, #8, #8
 80128c2:	f361 4017 	bfi	r0, r1, #16, #8
 80128c6:	f362 601f 	bfi	r0, r2, #24, #8
 80128ca:	b002      	add	sp, #8
 80128cc:	4770      	bx	lr
 80128ce:	f080 0c80 	eor.w	ip, r0, #128	@ 0x80
 80128d2:	e7f1      	b.n	80128b8 <uxr_stream_id+0x10>
 80128d4:	f100 0c01 	add.w	ip, r0, #1
 80128d8:	fa5f fc8c 	uxtb.w	ip, ip
 80128dc:	e7ec      	b.n	80128b8 <uxr_stream_id+0x10>
 80128de:	bf00      	nop

080128e0 <uxr_stream_id_from_raw>:
 80128e0:	b082      	sub	sp, #8
 80128e2:	4603      	mov	r3, r0
 80128e4:	b130      	cbz	r0, 80128f4 <uxr_stream_id_from_raw+0x14>
 80128e6:	0602      	lsls	r2, r0, #24
 80128e8:	d411      	bmi.n	801290e <uxr_stream_id_from_raw+0x2e>
 80128ea:	1e42      	subs	r2, r0, #1
 80128ec:	b2d2      	uxtb	r2, r2
 80128ee:	f04f 0c01 	mov.w	ip, #1
 80128f2:	e001      	b.n	80128f8 <uxr_stream_id_from_raw+0x18>
 80128f4:	4684      	mov	ip, r0
 80128f6:	4602      	mov	r2, r0
 80128f8:	2000      	movs	r0, #0
 80128fa:	f363 0007 	bfi	r0, r3, #0, #8
 80128fe:	f362 200f 	bfi	r0, r2, #8, #8
 8012902:	f36c 4017 	bfi	r0, ip, #16, #8
 8012906:	f361 601f 	bfi	r0, r1, #24, #8
 801290a:	b002      	add	sp, #8
 801290c:	4770      	bx	lr
 801290e:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 8012912:	f04f 0c02 	mov.w	ip, #2
 8012916:	e7ef      	b.n	80128f8 <uxr_stream_id_from_raw+0x18>

08012918 <uxr_init_stream_storage>:
 8012918:	2300      	movs	r3, #0
 801291a:	7403      	strb	r3, [r0, #16]
 801291c:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 8012920:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 8012924:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 8012928:	4770      	bx	lr
 801292a:	bf00      	nop

0801292c <uxr_reset_stream_storage>:
 801292c:	b570      	push	{r4, r5, r6, lr}
 801292e:	7c03      	ldrb	r3, [r0, #16]
 8012930:	4604      	mov	r4, r0
 8012932:	b153      	cbz	r3, 801294a <uxr_reset_stream_storage+0x1e>
 8012934:	4606      	mov	r6, r0
 8012936:	2500      	movs	r5, #0
 8012938:	4630      	mov	r0, r6
 801293a:	f007 fde1 	bl	801a500 <uxr_reset_output_best_effort_stream>
 801293e:	7c23      	ldrb	r3, [r4, #16]
 8012940:	3501      	adds	r5, #1
 8012942:	42ab      	cmp	r3, r5
 8012944:	f106 0610 	add.w	r6, r6, #16
 8012948:	d8f6      	bhi.n	8012938 <uxr_reset_stream_storage+0xc>
 801294a:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 801294e:	b163      	cbz	r3, 801296a <uxr_reset_stream_storage+0x3e>
 8012950:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012954:	2500      	movs	r5, #0
 8012956:	4630      	mov	r0, r6
 8012958:	f007 fbe2 	bl	801a120 <uxr_reset_input_best_effort_stream>
 801295c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8012960:	3501      	adds	r5, #1
 8012962:	42ab      	cmp	r3, r5
 8012964:	f106 0602 	add.w	r6, r6, #2
 8012968:	d8f5      	bhi.n	8012956 <uxr_reset_stream_storage+0x2a>
 801296a:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 801296e:	b163      	cbz	r3, 801298a <uxr_reset_stream_storage+0x5e>
 8012970:	f104 0618 	add.w	r6, r4, #24
 8012974:	2500      	movs	r5, #0
 8012976:	4630      	mov	r0, r6
 8012978:	f007 fe6c 	bl	801a654 <uxr_reset_output_reliable_stream>
 801297c:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8012980:	3501      	adds	r5, #1
 8012982:	42ab      	cmp	r3, r5
 8012984:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 8012988:	d8f5      	bhi.n	8012976 <uxr_reset_stream_storage+0x4a>
 801298a:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 801298e:	b163      	cbz	r3, 80129aa <uxr_reset_stream_storage+0x7e>
 8012990:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 8012994:	2500      	movs	r5, #0
 8012996:	4630      	mov	r0, r6
 8012998:	f007 fc32 	bl	801a200 <uxr_reset_input_reliable_stream>
 801299c:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 80129a0:	3501      	adds	r5, #1
 80129a2:	42ab      	cmp	r3, r5
 80129a4:	f106 0618 	add.w	r6, r6, #24
 80129a8:	d8f5      	bhi.n	8012996 <uxr_reset_stream_storage+0x6a>
 80129aa:	bd70      	pop	{r4, r5, r6, pc}

080129ac <uxr_add_output_best_effort_buffer>:
 80129ac:	b510      	push	{r4, lr}
 80129ae:	7c04      	ldrb	r4, [r0, #16]
 80129b0:	f104 0c01 	add.w	ip, r4, #1
 80129b4:	b082      	sub	sp, #8
 80129b6:	f880 c010 	strb.w	ip, [r0, #16]
 80129ba:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 80129be:	f007 fd95 	bl	801a4ec <uxr_init_output_best_effort_stream>
 80129c2:	2201      	movs	r2, #1
 80129c4:	4611      	mov	r1, r2
 80129c6:	4620      	mov	r0, r4
 80129c8:	b002      	add	sp, #8
 80129ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80129ce:	f7ff bf6b 	b.w	80128a8 <uxr_stream_id>
 80129d2:	bf00      	nop

080129d4 <uxr_add_output_reliable_buffer>:
 80129d4:	b510      	push	{r4, lr}
 80129d6:	b084      	sub	sp, #16
 80129d8:	4684      	mov	ip, r0
 80129da:	f89d 0018 	ldrb.w	r0, [sp, #24]
 80129de:	9000      	str	r0, [sp, #0]
 80129e0:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 80129e4:	2028      	movs	r0, #40	@ 0x28
 80129e6:	fb00 c004 	mla	r0, r0, r4, ip
 80129ea:	f104 0e01 	add.w	lr, r4, #1
 80129ee:	3018      	adds	r0, #24
 80129f0:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 80129f4:	f007 fdf6 	bl	801a5e4 <uxr_init_output_reliable_stream>
 80129f8:	2201      	movs	r2, #1
 80129fa:	2102      	movs	r1, #2
 80129fc:	4620      	mov	r0, r4
 80129fe:	b004      	add	sp, #16
 8012a00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012a04:	f7ff bf50 	b.w	80128a8 <uxr_stream_id>

08012a08 <uxr_add_input_best_effort_buffer>:
 8012a08:	b510      	push	{r4, lr}
 8012a0a:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 8012a0e:	1c62      	adds	r2, r4, #1
 8012a10:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 8012a14:	b082      	sub	sp, #8
 8012a16:	f880 2044 	strb.w	r2, [r0, #68]	@ 0x44
 8012a1a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8012a1e:	f007 fb7b 	bl	801a118 <uxr_init_input_best_effort_stream>
 8012a22:	2200      	movs	r2, #0
 8012a24:	2101      	movs	r1, #1
 8012a26:	4620      	mov	r0, r4
 8012a28:	b002      	add	sp, #8
 8012a2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012a2e:	f7ff bf3b 	b.w	80128a8 <uxr_stream_id>
 8012a32:	bf00      	nop

08012a34 <uxr_add_input_reliable_buffer>:
 8012a34:	b510      	push	{r4, lr}
 8012a36:	b084      	sub	sp, #16
 8012a38:	4684      	mov	ip, r0
 8012a3a:	9806      	ldr	r0, [sp, #24]
 8012a3c:	9000      	str	r0, [sp, #0]
 8012a3e:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 8012a42:	2018      	movs	r0, #24
 8012a44:	fb00 c004 	mla	r0, r0, r4, ip
 8012a48:	f104 0e01 	add.w	lr, r4, #1
 8012a4c:	3048      	adds	r0, #72	@ 0x48
 8012a4e:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 8012a52:	f007 fba9 	bl	801a1a8 <uxr_init_input_reliable_stream>
 8012a56:	2200      	movs	r2, #0
 8012a58:	2102      	movs	r1, #2
 8012a5a:	4620      	mov	r0, r4
 8012a5c:	b004      	add	sp, #16
 8012a5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012a62:	f7ff bf21 	b.w	80128a8 <uxr_stream_id>
 8012a66:	bf00      	nop

08012a68 <uxr_get_output_best_effort_stream>:
 8012a68:	7c03      	ldrb	r3, [r0, #16]
 8012a6a:	428b      	cmp	r3, r1
 8012a6c:	bf8c      	ite	hi
 8012a6e:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 8012a72:	2000      	movls	r0, #0
 8012a74:	4770      	bx	lr
 8012a76:	bf00      	nop

08012a78 <uxr_get_output_reliable_stream>:
 8012a78:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8012a7c:	428b      	cmp	r3, r1
 8012a7e:	bf83      	ittte	hi
 8012a80:	2328      	movhi	r3, #40	@ 0x28
 8012a82:	fb03 0001 	mlahi	r0, r3, r1, r0
 8012a86:	3018      	addhi	r0, #24
 8012a88:	2000      	movls	r0, #0
 8012a8a:	4770      	bx	lr

08012a8c <uxr_get_input_best_effort_stream>:
 8012a8c:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8012a90:	428b      	cmp	r3, r1
 8012a92:	bf86      	itte	hi
 8012a94:	3121      	addhi	r1, #33	@ 0x21
 8012a96:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 8012a9a:	2000      	movls	r0, #0
 8012a9c:	4770      	bx	lr
 8012a9e:	bf00      	nop

08012aa0 <uxr_get_input_reliable_stream>:
 8012aa0:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 8012aa4:	428b      	cmp	r3, r1
 8012aa6:	bf83      	ittte	hi
 8012aa8:	2318      	movhi	r3, #24
 8012aaa:	fb03 0001 	mlahi	r0, r3, r1, r0
 8012aae:	3048      	addhi	r0, #72	@ 0x48
 8012ab0:	2000      	movls	r0, #0
 8012ab2:	4770      	bx	lr

08012ab4 <uxr_output_streams_confirmed>:
 8012ab4:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8012ab8:	b183      	cbz	r3, 8012adc <uxr_output_streams_confirmed+0x28>
 8012aba:	b570      	push	{r4, r5, r6, lr}
 8012abc:	4606      	mov	r6, r0
 8012abe:	f100 0518 	add.w	r5, r0, #24
 8012ac2:	2400      	movs	r4, #0
 8012ac4:	e001      	b.n	8012aca <uxr_output_streams_confirmed+0x16>
 8012ac6:	3528      	adds	r5, #40	@ 0x28
 8012ac8:	b138      	cbz	r0, 8012ada <uxr_output_streams_confirmed+0x26>
 8012aca:	4628      	mov	r0, r5
 8012acc:	f008 f82a 	bl	801ab24 <uxr_is_output_up_to_date>
 8012ad0:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 8012ad4:	3401      	adds	r4, #1
 8012ad6:	42a3      	cmp	r3, r4
 8012ad8:	d8f5      	bhi.n	8012ac6 <uxr_output_streams_confirmed+0x12>
 8012ada:	bd70      	pop	{r4, r5, r6, pc}
 8012adc:	2001      	movs	r0, #1
 8012ade:	4770      	bx	lr

08012ae0 <uxr_buffer_submessage_header>:
 8012ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012ae2:	4604      	mov	r4, r0
 8012ae4:	460e      	mov	r6, r1
 8012ae6:	2104      	movs	r1, #4
 8012ae8:	4615      	mov	r5, r2
 8012aea:	461f      	mov	r7, r3
 8012aec:	f7fe fb8e 	bl	801120c <ucdr_align_to>
 8012af0:	2301      	movs	r3, #1
 8012af2:	7523      	strb	r3, [r4, #20]
 8012af4:	f047 0201 	orr.w	r2, r7, #1
 8012af8:	462b      	mov	r3, r5
 8012afa:	4631      	mov	r1, r6
 8012afc:	4620      	mov	r0, r4
 8012afe:	f000 fa2b 	bl	8012f58 <uxr_serialize_submessage_header>
 8012b02:	4620      	mov	r0, r4
 8012b04:	f7fe fb98 	bl	8011238 <ucdr_buffer_remaining>
 8012b08:	42a8      	cmp	r0, r5
 8012b0a:	bf34      	ite	cc
 8012b0c:	2000      	movcc	r0, #0
 8012b0e:	2001      	movcs	r0, #1
 8012b10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012b12:	bf00      	nop

08012b14 <uxr_read_submessage_header>:
 8012b14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012b18:	4604      	mov	r4, r0
 8012b1a:	460d      	mov	r5, r1
 8012b1c:	2104      	movs	r1, #4
 8012b1e:	4616      	mov	r6, r2
 8012b20:	4698      	mov	r8, r3
 8012b22:	f7fe fb73 	bl	801120c <ucdr_align_to>
 8012b26:	4620      	mov	r0, r4
 8012b28:	f7fe fb86 	bl	8011238 <ucdr_buffer_remaining>
 8012b2c:	2803      	cmp	r0, #3
 8012b2e:	bf8c      	ite	hi
 8012b30:	2701      	movhi	r7, #1
 8012b32:	2700      	movls	r7, #0
 8012b34:	d802      	bhi.n	8012b3c <uxr_read_submessage_header+0x28>
 8012b36:	4638      	mov	r0, r7
 8012b38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b3c:	4633      	mov	r3, r6
 8012b3e:	4642      	mov	r2, r8
 8012b40:	4620      	mov	r0, r4
 8012b42:	4629      	mov	r1, r5
 8012b44:	f000 fa1a 	bl	8012f7c <uxr_deserialize_submessage_header>
 8012b48:	f898 3000 	ldrb.w	r3, [r8]
 8012b4c:	f003 0201 	and.w	r2, r3, #1
 8012b50:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8012b54:	f888 3000 	strb.w	r3, [r8]
 8012b58:	7522      	strb	r2, [r4, #20]
 8012b5a:	4638      	mov	r0, r7
 8012b5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012b60 <uxr_submessage_padding>:
 8012b60:	f010 0003 	ands.w	r0, r0, #3
 8012b64:	bf18      	it	ne
 8012b66:	f1c0 0004 	rsbne	r0, r0, #4
 8012b6a:	4770      	bx	lr

08012b6c <uxr_millis>:
 8012b6c:	b510      	push	{r4, lr}
 8012b6e:	b084      	sub	sp, #16
 8012b70:	4669      	mov	r1, sp
 8012b72:	2001      	movs	r0, #1
 8012b74:	f7ef fc60 	bl	8002438 <clock_gettime>
 8012b78:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 8012b7c:	4b06      	ldr	r3, [pc, #24]	@ (8012b98 <uxr_millis+0x2c>)
 8012b7e:	fba0 0103 	umull	r0, r1, r0, r3
 8012b82:	1900      	adds	r0, r0, r4
 8012b84:	fb03 1102 	mla	r1, r3, r2, r1
 8012b88:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8012b8c:	4a03      	ldr	r2, [pc, #12]	@ (8012b9c <uxr_millis+0x30>)
 8012b8e:	2300      	movs	r3, #0
 8012b90:	f7ee f844 	bl	8000c1c <__aeabi_ldivmod>
 8012b94:	b004      	add	sp, #16
 8012b96:	bd10      	pop	{r4, pc}
 8012b98:	3b9aca00 	.word	0x3b9aca00
 8012b9c:	000f4240 	.word	0x000f4240

08012ba0 <uxr_nanos>:
 8012ba0:	b510      	push	{r4, lr}
 8012ba2:	b084      	sub	sp, #16
 8012ba4:	4669      	mov	r1, sp
 8012ba6:	2001      	movs	r0, #1
 8012ba8:	f7ef fc46 	bl	8002438 <clock_gettime>
 8012bac:	4a06      	ldr	r2, [pc, #24]	@ (8012bc8 <uxr_nanos+0x28>)
 8012bae:	9800      	ldr	r0, [sp, #0]
 8012bb0:	9902      	ldr	r1, [sp, #8]
 8012bb2:	9c01      	ldr	r4, [sp, #4]
 8012bb4:	fba0 0302 	umull	r0, r3, r0, r2
 8012bb8:	1840      	adds	r0, r0, r1
 8012bba:	fb02 3304 	mla	r3, r2, r4, r3
 8012bbe:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 8012bc2:	b004      	add	sp, #16
 8012bc4:	bd10      	pop	{r4, pc}
 8012bc6:	bf00      	nop
 8012bc8:	3b9aca00 	.word	0x3b9aca00

08012bcc <on_full_output_buffer_fragmented>:
 8012bcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012bd0:	460c      	mov	r4, r1
 8012bd2:	b08a      	sub	sp, #40	@ 0x28
 8012bd4:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 8012bd8:	4606      	mov	r6, r0
 8012bda:	f104 0008 	add.w	r0, r4, #8
 8012bde:	f7ff ff4b 	bl	8012a78 <uxr_get_output_reliable_stream>
 8012be2:	4605      	mov	r5, r0
 8012be4:	f007 ffa8 	bl	801ab38 <get_available_free_slots>
 8012be8:	b968      	cbnz	r0, 8012c06 <on_full_output_buffer_fragmented+0x3a>
 8012bea:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 8012bee:	4620      	mov	r0, r4
 8012bf0:	4798      	blx	r3
 8012bf2:	b918      	cbnz	r0, 8012bfc <on_full_output_buffer_fragmented+0x30>
 8012bf4:	2001      	movs	r0, #1
 8012bf6:	b00a      	add	sp, #40	@ 0x28
 8012bf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012bfc:	4628      	mov	r0, r5
 8012bfe:	f007 ff9b 	bl	801ab38 <get_available_free_slots>
 8012c02:	2800      	cmp	r0, #0
 8012c04:	d0f6      	beq.n	8012bf4 <on_full_output_buffer_fragmented+0x28>
 8012c06:	892a      	ldrh	r2, [r5, #8]
 8012c08:	686b      	ldr	r3, [r5, #4]
 8012c0a:	fbb3 f8f2 	udiv	r8, r3, r2
 8012c0e:	89eb      	ldrh	r3, [r5, #14]
 8012c10:	7b29      	ldrb	r1, [r5, #12]
 8012c12:	fbb3 f0f2 	udiv	r0, r3, r2
 8012c16:	fb02 3310 	mls	r3, r2, r0, r3
 8012c1a:	f5c1 417f 	rsb	r1, r1, #65280	@ 0xff00
 8012c1e:	b29b      	uxth	r3, r3
 8012c20:	fb08 f303 	mul.w	r3, r8, r3
 8012c24:	31fc      	adds	r1, #252	@ 0xfc
 8012c26:	f1a8 0804 	sub.w	r8, r8, #4
 8012c2a:	4441      	add	r1, r8
 8012c2c:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8012c30:	b28f      	uxth	r7, r1
 8012c32:	6829      	ldr	r1, [r5, #0]
 8012c34:	3304      	adds	r3, #4
 8012c36:	1bd2      	subs	r2, r2, r7
 8012c38:	4419      	add	r1, r3
 8012c3a:	f8c4 20c4 	str.w	r2, [r4, #196]	@ 0xc4
 8012c3e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012c42:	9300      	str	r3, [sp, #0]
 8012c44:	4642      	mov	r2, r8
 8012c46:	2300      	movs	r3, #0
 8012c48:	a802      	add	r0, sp, #8
 8012c4a:	f7fe fab3 	bl	80111b4 <ucdr_init_buffer_origin_offset>
 8012c4e:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8012c52:	f102 0308 	add.w	r3, r2, #8
 8012c56:	4543      	cmp	r3, r8
 8012c58:	d928      	bls.n	8012cac <on_full_output_buffer_fragmented+0xe0>
 8012c5a:	463a      	mov	r2, r7
 8012c5c:	2300      	movs	r3, #0
 8012c5e:	210d      	movs	r1, #13
 8012c60:	a802      	add	r0, sp, #8
 8012c62:	f7ff ff3d 	bl	8012ae0 <uxr_buffer_submessage_header>
 8012c66:	8929      	ldrh	r1, [r5, #8]
 8012c68:	89eb      	ldrh	r3, [r5, #14]
 8012c6a:	fbb3 f2f1 	udiv	r2, r3, r1
 8012c6e:	fb01 3312 	mls	r3, r1, r2, r3
 8012c72:	b29b      	uxth	r3, r3
 8012c74:	686a      	ldr	r2, [r5, #4]
 8012c76:	fbb2 f2f1 	udiv	r2, r2, r1
 8012c7a:	fb02 f303 	mul.w	r3, r2, r3
 8012c7e:	682a      	ldr	r2, [r5, #0]
 8012c80:	f842 8003 	str.w	r8, [r2, r3]
 8012c84:	89e8      	ldrh	r0, [r5, #14]
 8012c86:	2101      	movs	r1, #1
 8012c88:	f008 f8aa 	bl	801ade0 <uxr_seq_num_add>
 8012c8c:	9904      	ldr	r1, [sp, #16]
 8012c8e:	9a03      	ldr	r2, [sp, #12]
 8012c90:	81e8      	strh	r0, [r5, #14]
 8012c92:	1a52      	subs	r2, r2, r1
 8012c94:	4630      	mov	r0, r6
 8012c96:	f7fe fa9f 	bl	80111d8 <ucdr_init_buffer>
 8012c9a:	4630      	mov	r0, r6
 8012c9c:	4910      	ldr	r1, [pc, #64]	@ (8012ce0 <on_full_output_buffer_fragmented+0x114>)
 8012c9e:	4622      	mov	r2, r4
 8012ca0:	f7fe fa6e 	bl	8011180 <ucdr_set_on_full_buffer_callback>
 8012ca4:	2000      	movs	r0, #0
 8012ca6:	b00a      	add	sp, #40	@ 0x28
 8012ca8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012cac:	b292      	uxth	r2, r2
 8012cae:	2302      	movs	r3, #2
 8012cb0:	210d      	movs	r1, #13
 8012cb2:	a802      	add	r0, sp, #8
 8012cb4:	f7ff ff14 	bl	8012ae0 <uxr_buffer_submessage_header>
 8012cb8:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 8012cbc:	8928      	ldrh	r0, [r5, #8]
 8012cbe:	f103 0208 	add.w	r2, r3, #8
 8012cc2:	89eb      	ldrh	r3, [r5, #14]
 8012cc4:	fbb3 f1f0 	udiv	r1, r3, r0
 8012cc8:	fb00 3311 	mls	r3, r0, r1, r3
 8012ccc:	b29b      	uxth	r3, r3
 8012cce:	6869      	ldr	r1, [r5, #4]
 8012cd0:	fbb1 f1f0 	udiv	r1, r1, r0
 8012cd4:	fb01 f303 	mul.w	r3, r1, r3
 8012cd8:	6829      	ldr	r1, [r5, #0]
 8012cda:	50ca      	str	r2, [r1, r3]
 8012cdc:	e7d2      	b.n	8012c84 <on_full_output_buffer_fragmented+0xb8>
 8012cde:	bf00      	nop
 8012ce0:	08012bcd 	.word	0x08012bcd

08012ce4 <uxr_prepare_output_stream>:
 8012ce4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012ce6:	b087      	sub	sp, #28
 8012ce8:	2707      	movs	r7, #7
 8012cea:	9202      	str	r2, [sp, #8]
 8012cec:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8012cee:	2500      	movs	r5, #0
 8012cf0:	3204      	adds	r2, #4
 8012cf2:	e9cd 7500 	strd	r7, r5, [sp]
 8012cf6:	461c      	mov	r4, r3
 8012cf8:	4606      	mov	r6, r0
 8012cfa:	f7ff fc6d 	bl	80125d8 <uxr_prepare_stream_to_write_submessage>
 8012cfe:	f080 0201 	eor.w	r2, r0, #1
 8012d02:	b2d2      	uxtb	r2, r2
 8012d04:	75a2      	strb	r2, [r4, #22]
 8012d06:	b112      	cbz	r2, 8012d0e <uxr_prepare_output_stream+0x2a>
 8012d08:	4628      	mov	r0, r5
 8012d0a:	b007      	add	sp, #28
 8012d0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012d0e:	aa05      	add	r2, sp, #20
 8012d10:	9902      	ldr	r1, [sp, #8]
 8012d12:	4630      	mov	r0, r6
 8012d14:	f7ff fd9a 	bl	801284c <uxr_init_base_object_request>
 8012d18:	a905      	add	r1, sp, #20
 8012d1a:	4605      	mov	r5, r0
 8012d1c:	4620      	mov	r0, r4
 8012d1e:	f001 f895 	bl	8013e4c <uxr_serialize_WRITE_DATA_Payload_Data>
 8012d22:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8012d26:	69a6      	ldr	r6, [r4, #24]
 8012d28:	69e7      	ldr	r7, [r4, #28]
 8012d2a:	1a52      	subs	r2, r2, r1
 8012d2c:	4620      	mov	r0, r4
 8012d2e:	f7fe fa53 	bl	80111d8 <ucdr_init_buffer>
 8012d32:	4620      	mov	r0, r4
 8012d34:	463a      	mov	r2, r7
 8012d36:	4631      	mov	r1, r6
 8012d38:	f7fe fa22 	bl	8011180 <ucdr_set_on_full_buffer_callback>
 8012d3c:	4628      	mov	r0, r5
 8012d3e:	b007      	add	sp, #28
 8012d40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012d42:	bf00      	nop

08012d44 <uxr_prepare_output_stream_fragmented>:
 8012d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d48:	b093      	sub	sp, #76	@ 0x4c
 8012d4a:	4605      	mov	r5, r0
 8012d4c:	9107      	str	r1, [sp, #28]
 8012d4e:	3008      	adds	r0, #8
 8012d50:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8012d54:	9303      	str	r3, [sp, #12]
 8012d56:	9206      	str	r2, [sp, #24]
 8012d58:	f7ff fe8e 	bl	8012a78 <uxr_get_output_reliable_stream>
 8012d5c:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8012d60:	2b01      	cmp	r3, #1
 8012d62:	f000 8095 	beq.w	8012e90 <uxr_prepare_output_stream_fragmented+0x14c>
 8012d66:	4604      	mov	r4, r0
 8012d68:	2800      	cmp	r0, #0
 8012d6a:	f000 8091 	beq.w	8012e90 <uxr_prepare_output_stream_fragmented+0x14c>
 8012d6e:	f007 fee3 	bl	801ab38 <get_available_free_slots>
 8012d72:	2800      	cmp	r0, #0
 8012d74:	f000 8087 	beq.w	8012e86 <uxr_prepare_output_stream_fragmented+0x142>
 8012d78:	8922      	ldrh	r2, [r4, #8]
 8012d7a:	89e7      	ldrh	r7, [r4, #14]
 8012d7c:	fbb7 f3f2 	udiv	r3, r7, r2
 8012d80:	fb02 7313 	mls	r3, r2, r3, r7
 8012d84:	b29b      	uxth	r3, r3
 8012d86:	6861      	ldr	r1, [r4, #4]
 8012d88:	fbb1 f1f2 	udiv	r1, r1, r2
 8012d8c:	6822      	ldr	r2, [r4, #0]
 8012d8e:	9105      	str	r1, [sp, #20]
 8012d90:	fb01 f303 	mul.w	r3, r1, r3
 8012d94:	3304      	adds	r3, #4
 8012d96:	eb02 0903 	add.w	r9, r2, r3
 8012d9a:	7b23      	ldrb	r3, [r4, #12]
 8012d9c:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8012da0:	4543      	cmp	r3, r8
 8012da2:	f1a1 0b04 	sub.w	fp, r1, #4
 8012da6:	d37f      	bcc.n	8012ea8 <uxr_prepare_output_stream_fragmented+0x164>
 8012da8:	f1ab 0a04 	sub.w	sl, fp, #4
 8012dac:	ebaa 0a03 	sub.w	sl, sl, r3
 8012db0:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8012db2:	f8cd 8000 	str.w	r8, [sp]
 8012db6:	fa1f f38a 	uxth.w	r3, sl
 8012dba:	9304      	str	r3, [sp, #16]
 8012dbc:	465a      	mov	r2, fp
 8012dbe:	2300      	movs	r3, #0
 8012dc0:	4649      	mov	r1, r9
 8012dc2:	a80a      	add	r0, sp, #40	@ 0x28
 8012dc4:	f7fe f9f6 	bl	80111b4 <ucdr_init_buffer_origin_offset>
 8012dc8:	f106 0a08 	add.w	sl, r6, #8
 8012dcc:	45da      	cmp	sl, fp
 8012dce:	bf2c      	ite	cs
 8012dd0:	2300      	movcs	r3, #0
 8012dd2:	2301      	movcc	r3, #1
 8012dd4:	9a04      	ldr	r2, [sp, #16]
 8012dd6:	005b      	lsls	r3, r3, #1
 8012dd8:	210d      	movs	r1, #13
 8012dda:	a80a      	add	r0, sp, #40	@ 0x28
 8012ddc:	f7ff fe80 	bl	8012ae0 <uxr_buffer_submessage_header>
 8012de0:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8012de4:	fbb7 f2fc 	udiv	r2, r7, ip
 8012de8:	fb0c 7212 	mls	r2, ip, r2, r7
 8012dec:	b292      	uxth	r2, r2
 8012dee:	6863      	ldr	r3, [r4, #4]
 8012df0:	fbb3 f3fc 	udiv	r3, r3, ip
 8012df4:	fb02 f303 	mul.w	r3, r2, r3
 8012df8:	6822      	ldr	r2, [r4, #0]
 8012dfa:	2101      	movs	r1, #1
 8012dfc:	f842 b003 	str.w	fp, [r2, r3]
 8012e00:	4638      	mov	r0, r7
 8012e02:	f007 ffed 	bl	801ade0 <uxr_seq_num_add>
 8012e06:	9b05      	ldr	r3, [sp, #20]
 8012e08:	9e03      	ldr	r6, [sp, #12]
 8012e0a:	f1a3 0208 	sub.w	r2, r3, #8
 8012e0e:	f108 0104 	add.w	r1, r8, #4
 8012e12:	4607      	mov	r7, r0
 8012e14:	eba2 0208 	sub.w	r2, r2, r8
 8012e18:	4449      	add	r1, r9
 8012e1a:	4630      	mov	r0, r6
 8012e1c:	f7fe f9dc 	bl	80111d8 <ucdr_init_buffer>
 8012e20:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8012e22:	81e7      	strh	r7, [r4, #14]
 8012e24:	1d1a      	adds	r2, r3, #4
 8012e26:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8012e2a:	bf28      	it	cs
 8012e2c:	2200      	movcs	r2, #0
 8012e2e:	2300      	movs	r3, #0
 8012e30:	b292      	uxth	r2, r2
 8012e32:	2107      	movs	r1, #7
 8012e34:	4630      	mov	r0, r6
 8012e36:	f7ff fe53 	bl	8012ae0 <uxr_buffer_submessage_header>
 8012e3a:	9906      	ldr	r1, [sp, #24]
 8012e3c:	aa09      	add	r2, sp, #36	@ 0x24
 8012e3e:	4628      	mov	r0, r5
 8012e40:	f7ff fd04 	bl	801284c <uxr_init_base_object_request>
 8012e44:	4604      	mov	r4, r0
 8012e46:	b320      	cbz	r0, 8012e92 <uxr_prepare_output_stream_fragmented+0x14e>
 8012e48:	9e03      	ldr	r6, [sp, #12]
 8012e4a:	a909      	add	r1, sp, #36	@ 0x24
 8012e4c:	4630      	mov	r0, r6
 8012e4e:	f000 fffd 	bl	8013e4c <uxr_serialize_WRITE_DATA_Payload_Data>
 8012e52:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8012e56:	4630      	mov	r0, r6
 8012e58:	1a52      	subs	r2, r2, r1
 8012e5a:	f7fe f9bd 	bl	80111d8 <ucdr_init_buffer>
 8012e5e:	9b07      	ldr	r3, [sp, #28]
 8012e60:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 8012e64:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8012e66:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 8012e6a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8012e6c:	491a      	ldr	r1, [pc, #104]	@ (8012ed8 <uxr_prepare_output_stream_fragmented+0x194>)
 8012e6e:	f8c5 a0c4 	str.w	sl, [r5, #196]	@ 0xc4
 8012e72:	4630      	mov	r0, r6
 8012e74:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 8012e78:	462a      	mov	r2, r5
 8012e7a:	f7fe f981 	bl	8011180 <ucdr_set_on_full_buffer_callback>
 8012e7e:	4620      	mov	r0, r4
 8012e80:	b013      	add	sp, #76	@ 0x4c
 8012e82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e86:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8012e88:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8012e8a:	4628      	mov	r0, r5
 8012e8c:	4798      	blx	r3
 8012e8e:	b920      	cbnz	r0, 8012e9a <uxr_prepare_output_stream_fragmented+0x156>
 8012e90:	2400      	movs	r4, #0
 8012e92:	4620      	mov	r0, r4
 8012e94:	b013      	add	sp, #76	@ 0x4c
 8012e96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e9a:	4620      	mov	r0, r4
 8012e9c:	f007 fe4c 	bl	801ab38 <get_available_free_slots>
 8012ea0:	2800      	cmp	r0, #0
 8012ea2:	f47f af69 	bne.w	8012d78 <uxr_prepare_output_stream_fragmented+0x34>
 8012ea6:	e7f3      	b.n	8012e90 <uxr_prepare_output_stream_fragmented+0x14c>
 8012ea8:	4638      	mov	r0, r7
 8012eaa:	2101      	movs	r1, #1
 8012eac:	f007 ff98 	bl	801ade0 <uxr_seq_num_add>
 8012eb0:	8921      	ldrh	r1, [r4, #8]
 8012eb2:	fbb0 f2f1 	udiv	r2, r0, r1
 8012eb6:	fb01 0212 	mls	r2, r1, r2, r0
 8012eba:	b292      	uxth	r2, r2
 8012ebc:	6863      	ldr	r3, [r4, #4]
 8012ebe:	fbb3 f3f1 	udiv	r3, r3, r1
 8012ec2:	fb02 f303 	mul.w	r3, r2, r3
 8012ec6:	6822      	ldr	r2, [r4, #0]
 8012ec8:	3304      	adds	r3, #4
 8012eca:	eb02 0903 	add.w	r9, r2, r3
 8012ece:	4607      	mov	r7, r0
 8012ed0:	7b23      	ldrb	r3, [r4, #12]
 8012ed2:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8012ed6:	e767      	b.n	8012da8 <uxr_prepare_output_stream_fragmented+0x64>
 8012ed8:	08012bcd 	.word	0x08012bcd

08012edc <uxr_serialize_message_header>:
 8012edc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012ee0:	4617      	mov	r7, r2
 8012ee2:	4604      	mov	r4, r0
 8012ee4:	461e      	mov	r6, r3
 8012ee6:	460d      	mov	r5, r1
 8012ee8:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8012eec:	f7fc fc10 	bl	800f710 <ucdr_serialize_uint8_t>
 8012ef0:	4639      	mov	r1, r7
 8012ef2:	4620      	mov	r0, r4
 8012ef4:	f7fc fc0c 	bl	800f710 <ucdr_serialize_uint8_t>
 8012ef8:	4632      	mov	r2, r6
 8012efa:	2101      	movs	r1, #1
 8012efc:	4620      	mov	r0, r4
 8012efe:	f7fc fcbd 	bl	800f87c <ucdr_serialize_endian_uint16_t>
 8012f02:	062b      	lsls	r3, r5, #24
 8012f04:	d501      	bpl.n	8012f0a <uxr_serialize_message_header+0x2e>
 8012f06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012f0a:	4641      	mov	r1, r8
 8012f0c:	4620      	mov	r0, r4
 8012f0e:	2204      	movs	r2, #4
 8012f10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012f14:	f7fc b906 	b.w	800f124 <ucdr_serialize_array_uint8_t>

08012f18 <uxr_deserialize_message_header>:
 8012f18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f1c:	4617      	mov	r7, r2
 8012f1e:	4604      	mov	r4, r0
 8012f20:	461e      	mov	r6, r3
 8012f22:	460d      	mov	r5, r1
 8012f24:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8012f28:	f7fc fc08 	bl	800f73c <ucdr_deserialize_uint8_t>
 8012f2c:	4639      	mov	r1, r7
 8012f2e:	4620      	mov	r0, r4
 8012f30:	f7fc fc04 	bl	800f73c <ucdr_deserialize_uint8_t>
 8012f34:	4632      	mov	r2, r6
 8012f36:	2101      	movs	r1, #1
 8012f38:	4620      	mov	r0, r4
 8012f3a:	f7fc fd95 	bl	800fa68 <ucdr_deserialize_endian_uint16_t>
 8012f3e:	f995 3000 	ldrsb.w	r3, [r5]
 8012f42:	2b00      	cmp	r3, #0
 8012f44:	da01      	bge.n	8012f4a <uxr_deserialize_message_header+0x32>
 8012f46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012f4a:	4641      	mov	r1, r8
 8012f4c:	4620      	mov	r0, r4
 8012f4e:	2204      	movs	r2, #4
 8012f50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012f54:	f7fc b94a 	b.w	800f1ec <ucdr_deserialize_array_uint8_t>

08012f58 <uxr_serialize_submessage_header>:
 8012f58:	b570      	push	{r4, r5, r6, lr}
 8012f5a:	4616      	mov	r6, r2
 8012f5c:	4604      	mov	r4, r0
 8012f5e:	461d      	mov	r5, r3
 8012f60:	f7fc fbd6 	bl	800f710 <ucdr_serialize_uint8_t>
 8012f64:	4631      	mov	r1, r6
 8012f66:	4620      	mov	r0, r4
 8012f68:	f7fc fbd2 	bl	800f710 <ucdr_serialize_uint8_t>
 8012f6c:	462a      	mov	r2, r5
 8012f6e:	4620      	mov	r0, r4
 8012f70:	2101      	movs	r1, #1
 8012f72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012f76:	f7fc bc81 	b.w	800f87c <ucdr_serialize_endian_uint16_t>
 8012f7a:	bf00      	nop

08012f7c <uxr_deserialize_submessage_header>:
 8012f7c:	b570      	push	{r4, r5, r6, lr}
 8012f7e:	4616      	mov	r6, r2
 8012f80:	4604      	mov	r4, r0
 8012f82:	461d      	mov	r5, r3
 8012f84:	f7fc fbda 	bl	800f73c <ucdr_deserialize_uint8_t>
 8012f88:	4631      	mov	r1, r6
 8012f8a:	4620      	mov	r0, r4
 8012f8c:	f7fc fbd6 	bl	800f73c <ucdr_deserialize_uint8_t>
 8012f90:	462a      	mov	r2, r5
 8012f92:	4620      	mov	r0, r4
 8012f94:	2101      	movs	r1, #1
 8012f96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012f9a:	f7fc bd65 	b.w	800fa68 <ucdr_deserialize_endian_uint16_t>
 8012f9e:	bf00      	nop

08012fa0 <uxr_serialize_CLIENT_Representation>:
 8012fa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012fa4:	2204      	movs	r2, #4
 8012fa6:	460e      	mov	r6, r1
 8012fa8:	4605      	mov	r5, r0
 8012faa:	f7fc f8bb 	bl	800f124 <ucdr_serialize_array_uint8_t>
 8012fae:	2202      	movs	r2, #2
 8012fb0:	1d31      	adds	r1, r6, #4
 8012fb2:	4604      	mov	r4, r0
 8012fb4:	4628      	mov	r0, r5
 8012fb6:	f7fc f8b5 	bl	800f124 <ucdr_serialize_array_uint8_t>
 8012fba:	2202      	movs	r2, #2
 8012fbc:	4004      	ands	r4, r0
 8012fbe:	1db1      	adds	r1, r6, #6
 8012fc0:	4628      	mov	r0, r5
 8012fc2:	f7fc f8af 	bl	800f124 <ucdr_serialize_array_uint8_t>
 8012fc6:	b2e4      	uxtb	r4, r4
 8012fc8:	2204      	movs	r2, #4
 8012fca:	4004      	ands	r4, r0
 8012fcc:	f106 0108 	add.w	r1, r6, #8
 8012fd0:	4628      	mov	r0, r5
 8012fd2:	f7fc f8a7 	bl	800f124 <ucdr_serialize_array_uint8_t>
 8012fd6:	7b31      	ldrb	r1, [r6, #12]
 8012fd8:	ea00 0804 	and.w	r8, r0, r4
 8012fdc:	4628      	mov	r0, r5
 8012fde:	f7fc fb97 	bl	800f710 <ucdr_serialize_uint8_t>
 8012fe2:	7b71      	ldrb	r1, [r6, #13]
 8012fe4:	ea08 0800 	and.w	r8, r8, r0
 8012fe8:	4628      	mov	r0, r5
 8012fea:	f7fc fb63 	bl	800f6b4 <ucdr_serialize_bool>
 8012fee:	7b73      	ldrb	r3, [r6, #13]
 8012ff0:	ea08 0800 	and.w	r8, r8, r0
 8012ff4:	b93b      	cbnz	r3, 8013006 <uxr_serialize_CLIENT_Representation+0x66>
 8012ff6:	8bb1      	ldrh	r1, [r6, #28]
 8012ff8:	4628      	mov	r0, r5
 8012ffa:	f7fc fbb5 	bl	800f768 <ucdr_serialize_uint16_t>
 8012ffe:	ea08 0000 	and.w	r0, r8, r0
 8013002:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013006:	6931      	ldr	r1, [r6, #16]
 8013008:	4628      	mov	r0, r5
 801300a:	f7fc fd9d 	bl	800fb48 <ucdr_serialize_uint32_t>
 801300e:	6933      	ldr	r3, [r6, #16]
 8013010:	b1e3      	cbz	r3, 801304c <uxr_serialize_CLIENT_Representation+0xac>
 8013012:	b1c0      	cbz	r0, 8013046 <uxr_serialize_CLIENT_Representation+0xa6>
 8013014:	4637      	mov	r7, r6
 8013016:	f04f 0900 	mov.w	r9, #0
 801301a:	e001      	b.n	8013020 <uxr_serialize_CLIENT_Representation+0x80>
 801301c:	3708      	adds	r7, #8
 801301e:	b194      	cbz	r4, 8013046 <uxr_serialize_CLIENT_Representation+0xa6>
 8013020:	6979      	ldr	r1, [r7, #20]
 8013022:	4628      	mov	r0, r5
 8013024:	f006 ffa0 	bl	8019f68 <ucdr_serialize_string>
 8013028:	69b9      	ldr	r1, [r7, #24]
 801302a:	4604      	mov	r4, r0
 801302c:	4628      	mov	r0, r5
 801302e:	f006 ff9b 	bl	8019f68 <ucdr_serialize_string>
 8013032:	6933      	ldr	r3, [r6, #16]
 8013034:	f109 0901 	add.w	r9, r9, #1
 8013038:	4004      	ands	r4, r0
 801303a:	4599      	cmp	r9, r3
 801303c:	b2e4      	uxtb	r4, r4
 801303e:	d3ed      	bcc.n	801301c <uxr_serialize_CLIENT_Representation+0x7c>
 8013040:	ea08 0804 	and.w	r8, r8, r4
 8013044:	e7d7      	b.n	8012ff6 <uxr_serialize_CLIENT_Representation+0x56>
 8013046:	f04f 0800 	mov.w	r8, #0
 801304a:	e7d4      	b.n	8012ff6 <uxr_serialize_CLIENT_Representation+0x56>
 801304c:	ea08 0800 	and.w	r8, r8, r0
 8013050:	e7d1      	b.n	8012ff6 <uxr_serialize_CLIENT_Representation+0x56>
 8013052:	bf00      	nop

08013054 <uxr_deserialize_CLIENT_Representation>:
 8013054:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013058:	2204      	movs	r2, #4
 801305a:	460c      	mov	r4, r1
 801305c:	4605      	mov	r5, r0
 801305e:	f7fc f8c5 	bl	800f1ec <ucdr_deserialize_array_uint8_t>
 8013062:	2202      	movs	r2, #2
 8013064:	1d21      	adds	r1, r4, #4
 8013066:	4606      	mov	r6, r0
 8013068:	4628      	mov	r0, r5
 801306a:	f7fc f8bf 	bl	800f1ec <ucdr_deserialize_array_uint8_t>
 801306e:	2202      	movs	r2, #2
 8013070:	4006      	ands	r6, r0
 8013072:	1da1      	adds	r1, r4, #6
 8013074:	4628      	mov	r0, r5
 8013076:	f7fc f8b9 	bl	800f1ec <ucdr_deserialize_array_uint8_t>
 801307a:	b2f6      	uxtb	r6, r6
 801307c:	2204      	movs	r2, #4
 801307e:	4006      	ands	r6, r0
 8013080:	f104 0108 	add.w	r1, r4, #8
 8013084:	4628      	mov	r0, r5
 8013086:	f7fc f8b1 	bl	800f1ec <ucdr_deserialize_array_uint8_t>
 801308a:	f104 010c 	add.w	r1, r4, #12
 801308e:	ea00 0706 	and.w	r7, r0, r6
 8013092:	4628      	mov	r0, r5
 8013094:	f7fc fb52 	bl	800f73c <ucdr_deserialize_uint8_t>
 8013098:	f104 010d 	add.w	r1, r4, #13
 801309c:	4007      	ands	r7, r0
 801309e:	4628      	mov	r0, r5
 80130a0:	f7fc fb1e 	bl	800f6e0 <ucdr_deserialize_bool>
 80130a4:	7b63      	ldrb	r3, [r4, #13]
 80130a6:	4007      	ands	r7, r0
 80130a8:	b93b      	cbnz	r3, 80130ba <uxr_deserialize_CLIENT_Representation+0x66>
 80130aa:	f104 011c 	add.w	r1, r4, #28
 80130ae:	4628      	mov	r0, r5
 80130b0:	f7fc fc5e 	bl	800f970 <ucdr_deserialize_uint16_t>
 80130b4:	4038      	ands	r0, r7
 80130b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80130ba:	f104 0110 	add.w	r1, r4, #16
 80130be:	4628      	mov	r0, r5
 80130c0:	f7fc fe6c 	bl	800fd9c <ucdr_deserialize_uint32_t>
 80130c4:	6923      	ldr	r3, [r4, #16]
 80130c6:	2b01      	cmp	r3, #1
 80130c8:	d903      	bls.n	80130d2 <uxr_deserialize_CLIENT_Representation+0x7e>
 80130ca:	2301      	movs	r3, #1
 80130cc:	75ab      	strb	r3, [r5, #22]
 80130ce:	2700      	movs	r7, #0
 80130d0:	e7eb      	b.n	80130aa <uxr_deserialize_CLIENT_Representation+0x56>
 80130d2:	b30b      	cbz	r3, 8013118 <uxr_deserialize_CLIENT_Representation+0xc4>
 80130d4:	2800      	cmp	r0, #0
 80130d6:	d0fa      	beq.n	80130ce <uxr_deserialize_CLIENT_Representation+0x7a>
 80130d8:	46a0      	mov	r8, r4
 80130da:	f04f 0900 	mov.w	r9, #0
 80130de:	e003      	b.n	80130e8 <uxr_deserialize_CLIENT_Representation+0x94>
 80130e0:	f108 0808 	add.w	r8, r8, #8
 80130e4:	2e00      	cmp	r6, #0
 80130e6:	d0f2      	beq.n	80130ce <uxr_deserialize_CLIENT_Representation+0x7a>
 80130e8:	f8d8 1014 	ldr.w	r1, [r8, #20]
 80130ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80130f0:	4628      	mov	r0, r5
 80130f2:	f006 ff47 	bl	8019f84 <ucdr_deserialize_string>
 80130f6:	f8d8 1018 	ldr.w	r1, [r8, #24]
 80130fa:	4606      	mov	r6, r0
 80130fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013100:	4628      	mov	r0, r5
 8013102:	f006 ff3f 	bl	8019f84 <ucdr_deserialize_string>
 8013106:	6923      	ldr	r3, [r4, #16]
 8013108:	f109 0901 	add.w	r9, r9, #1
 801310c:	4006      	ands	r6, r0
 801310e:	4599      	cmp	r9, r3
 8013110:	b2f6      	uxtb	r6, r6
 8013112:	d3e5      	bcc.n	80130e0 <uxr_deserialize_CLIENT_Representation+0x8c>
 8013114:	4037      	ands	r7, r6
 8013116:	e7c8      	b.n	80130aa <uxr_deserialize_CLIENT_Representation+0x56>
 8013118:	4007      	ands	r7, r0
 801311a:	e7c6      	b.n	80130aa <uxr_deserialize_CLIENT_Representation+0x56>

0801311c <uxr_serialize_AGENT_Representation>:
 801311c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013120:	2204      	movs	r2, #4
 8013122:	460f      	mov	r7, r1
 8013124:	4605      	mov	r5, r0
 8013126:	f7fb fffd 	bl	800f124 <ucdr_serialize_array_uint8_t>
 801312a:	2202      	movs	r2, #2
 801312c:	4604      	mov	r4, r0
 801312e:	1d39      	adds	r1, r7, #4
 8013130:	4628      	mov	r0, r5
 8013132:	f7fb fff7 	bl	800f124 <ucdr_serialize_array_uint8_t>
 8013136:	4020      	ands	r0, r4
 8013138:	2202      	movs	r2, #2
 801313a:	b2c4      	uxtb	r4, r0
 801313c:	1db9      	adds	r1, r7, #6
 801313e:	4628      	mov	r0, r5
 8013140:	f7fb fff0 	bl	800f124 <ucdr_serialize_array_uint8_t>
 8013144:	7a39      	ldrb	r1, [r7, #8]
 8013146:	4004      	ands	r4, r0
 8013148:	4628      	mov	r0, r5
 801314a:	f7fc fab3 	bl	800f6b4 <ucdr_serialize_bool>
 801314e:	7a3b      	ldrb	r3, [r7, #8]
 8013150:	ea00 0804 	and.w	r8, r0, r4
 8013154:	b913      	cbnz	r3, 801315c <uxr_serialize_AGENT_Representation+0x40>
 8013156:	4640      	mov	r0, r8
 8013158:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801315c:	68f9      	ldr	r1, [r7, #12]
 801315e:	4628      	mov	r0, r5
 8013160:	f7fc fcf2 	bl	800fb48 <ucdr_serialize_uint32_t>
 8013164:	68fb      	ldr	r3, [r7, #12]
 8013166:	b303      	cbz	r3, 80131aa <uxr_serialize_AGENT_Representation+0x8e>
 8013168:	b1d0      	cbz	r0, 80131a0 <uxr_serialize_AGENT_Representation+0x84>
 801316a:	463e      	mov	r6, r7
 801316c:	f04f 0900 	mov.w	r9, #0
 8013170:	e001      	b.n	8013176 <uxr_serialize_AGENT_Representation+0x5a>
 8013172:	3608      	adds	r6, #8
 8013174:	b1a4      	cbz	r4, 80131a0 <uxr_serialize_AGENT_Representation+0x84>
 8013176:	6931      	ldr	r1, [r6, #16]
 8013178:	4628      	mov	r0, r5
 801317a:	f006 fef5 	bl	8019f68 <ucdr_serialize_string>
 801317e:	6971      	ldr	r1, [r6, #20]
 8013180:	4604      	mov	r4, r0
 8013182:	4628      	mov	r0, r5
 8013184:	f006 fef0 	bl	8019f68 <ucdr_serialize_string>
 8013188:	68fb      	ldr	r3, [r7, #12]
 801318a:	f109 0901 	add.w	r9, r9, #1
 801318e:	4004      	ands	r4, r0
 8013190:	4599      	cmp	r9, r3
 8013192:	b2e4      	uxtb	r4, r4
 8013194:	d3ed      	bcc.n	8013172 <uxr_serialize_AGENT_Representation+0x56>
 8013196:	ea08 0804 	and.w	r8, r8, r4
 801319a:	4640      	mov	r0, r8
 801319c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80131a0:	f04f 0800 	mov.w	r8, #0
 80131a4:	4640      	mov	r0, r8
 80131a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80131aa:	ea08 0800 	and.w	r8, r8, r0
 80131ae:	e7d2      	b.n	8013156 <uxr_serialize_AGENT_Representation+0x3a>

080131b0 <uxr_serialize_DATAWRITER_Representation>:
 80131b0:	b570      	push	{r4, r5, r6, lr}
 80131b2:	460d      	mov	r5, r1
 80131b4:	7809      	ldrb	r1, [r1, #0]
 80131b6:	4606      	mov	r6, r0
 80131b8:	f7fc faaa 	bl	800f710 <ucdr_serialize_uint8_t>
 80131bc:	4604      	mov	r4, r0
 80131be:	b130      	cbz	r0, 80131ce <uxr_serialize_DATAWRITER_Representation+0x1e>
 80131c0:	782b      	ldrb	r3, [r5, #0]
 80131c2:	2b02      	cmp	r3, #2
 80131c4:	d00c      	beq.n	80131e0 <uxr_serialize_DATAWRITER_Representation+0x30>
 80131c6:	2b03      	cmp	r3, #3
 80131c8:	d010      	beq.n	80131ec <uxr_serialize_DATAWRITER_Representation+0x3c>
 80131ca:	2b01      	cmp	r3, #1
 80131cc:	d008      	beq.n	80131e0 <uxr_serialize_DATAWRITER_Representation+0x30>
 80131ce:	2202      	movs	r2, #2
 80131d0:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 80131d4:	4630      	mov	r0, r6
 80131d6:	f7fb ffa5 	bl	800f124 <ucdr_serialize_array_uint8_t>
 80131da:	4020      	ands	r0, r4
 80131dc:	b2c0      	uxtb	r0, r0
 80131de:	bd70      	pop	{r4, r5, r6, pc}
 80131e0:	6869      	ldr	r1, [r5, #4]
 80131e2:	4630      	mov	r0, r6
 80131e4:	f006 fec0 	bl	8019f68 <ucdr_serialize_string>
 80131e8:	4604      	mov	r4, r0
 80131ea:	e7f0      	b.n	80131ce <uxr_serialize_DATAWRITER_Representation+0x1e>
 80131ec:	4629      	mov	r1, r5
 80131ee:	4630      	mov	r0, r6
 80131f0:	f851 2f04 	ldr.w	r2, [r1, #4]!
 80131f4:	3104      	adds	r1, #4
 80131f6:	f7fe f88d 	bl	8011314 <ucdr_serialize_sequence_uint8_t>
 80131fa:	4604      	mov	r4, r0
 80131fc:	e7e7      	b.n	80131ce <uxr_serialize_DATAWRITER_Representation+0x1e>
 80131fe:	bf00      	nop

08013200 <uxr_serialize_ObjectVariant.part.0>:
 8013200:	b570      	push	{r4, r5, r6, lr}
 8013202:	780b      	ldrb	r3, [r1, #0]
 8013204:	3b01      	subs	r3, #1
 8013206:	460c      	mov	r4, r1
 8013208:	4605      	mov	r5, r0
 801320a:	2b0d      	cmp	r3, #13
 801320c:	d816      	bhi.n	801323c <uxr_serialize_ObjectVariant.part.0+0x3c>
 801320e:	e8df f003 	tbb	[pc, r3]
 8013212:	0733      	.short	0x0733
 8013214:	07071717 	.word	0x07071717
 8013218:	0c150707 	.word	0x0c150707
 801321c:	4c510c0c 	.word	0x4c510c0c
 8013220:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013224:	3104      	adds	r1, #4
 8013226:	f7ff bfc3 	b.w	80131b0 <uxr_serialize_DATAWRITER_Representation>
 801322a:	7909      	ldrb	r1, [r1, #4]
 801322c:	f7fc fa70 	bl	800f710 <ucdr_serialize_uint8_t>
 8013230:	b300      	cbz	r0, 8013274 <uxr_serialize_ObjectVariant.part.0+0x74>
 8013232:	7923      	ldrb	r3, [r4, #4]
 8013234:	2b01      	cmp	r3, #1
 8013236:	d042      	beq.n	80132be <uxr_serialize_ObjectVariant.part.0+0xbe>
 8013238:	2b02      	cmp	r3, #2
 801323a:	d040      	beq.n	80132be <uxr_serialize_ObjectVariant.part.0+0xbe>
 801323c:	2001      	movs	r0, #1
 801323e:	bd70      	pop	{r4, r5, r6, pc}
 8013240:	7909      	ldrb	r1, [r1, #4]
 8013242:	f7fc fa65 	bl	800f710 <ucdr_serialize_uint8_t>
 8013246:	4606      	mov	r6, r0
 8013248:	b158      	cbz	r0, 8013262 <uxr_serialize_ObjectVariant.part.0+0x62>
 801324a:	7923      	ldrb	r3, [r4, #4]
 801324c:	2b02      	cmp	r3, #2
 801324e:	d03c      	beq.n	80132ca <uxr_serialize_ObjectVariant.part.0+0xca>
 8013250:	2b03      	cmp	r3, #3
 8013252:	d106      	bne.n	8013262 <uxr_serialize_ObjectVariant.part.0+0x62>
 8013254:	68a2      	ldr	r2, [r4, #8]
 8013256:	f104 010c 	add.w	r1, r4, #12
 801325a:	4628      	mov	r0, r5
 801325c:	f7fe f85a 	bl	8011314 <ucdr_serialize_sequence_uint8_t>
 8013260:	4606      	mov	r6, r0
 8013262:	2202      	movs	r2, #2
 8013264:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 8013268:	4628      	mov	r0, r5
 801326a:	f7fb ff5b 	bl	800f124 <ucdr_serialize_array_uint8_t>
 801326e:	4030      	ands	r0, r6
 8013270:	b2c0      	uxtb	r0, r0
 8013272:	bd70      	pop	{r4, r5, r6, pc}
 8013274:	2000      	movs	r0, #0
 8013276:	bd70      	pop	{r4, r5, r6, pc}
 8013278:	7909      	ldrb	r1, [r1, #4]
 801327a:	f7fc fa49 	bl	800f710 <ucdr_serialize_uint8_t>
 801327e:	4606      	mov	r6, r0
 8013280:	b158      	cbz	r0, 801329a <uxr_serialize_ObjectVariant.part.0+0x9a>
 8013282:	7923      	ldrb	r3, [r4, #4]
 8013284:	2b02      	cmp	r3, #2
 8013286:	d003      	beq.n	8013290 <uxr_serialize_ObjectVariant.part.0+0x90>
 8013288:	2b03      	cmp	r3, #3
 801328a:	d024      	beq.n	80132d6 <uxr_serialize_ObjectVariant.part.0+0xd6>
 801328c:	2b01      	cmp	r3, #1
 801328e:	d104      	bne.n	801329a <uxr_serialize_ObjectVariant.part.0+0x9a>
 8013290:	68a1      	ldr	r1, [r4, #8]
 8013292:	4628      	mov	r0, r5
 8013294:	f006 fe68 	bl	8019f68 <ucdr_serialize_string>
 8013298:	4606      	mov	r6, r0
 801329a:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 801329e:	4628      	mov	r0, r5
 80132a0:	f7fc ff5e 	bl	8010160 <ucdr_serialize_int16_t>
 80132a4:	4030      	ands	r0, r6
 80132a6:	b2c0      	uxtb	r0, r0
 80132a8:	bd70      	pop	{r4, r5, r6, pc}
 80132aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80132ae:	3104      	adds	r1, #4
 80132b0:	f7ff be76 	b.w	8012fa0 <uxr_serialize_CLIENT_Representation>
 80132b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80132b8:	3104      	adds	r1, #4
 80132ba:	f7ff bf2f 	b.w	801311c <uxr_serialize_AGENT_Representation>
 80132be:	68a1      	ldr	r1, [r4, #8]
 80132c0:	4628      	mov	r0, r5
 80132c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80132c6:	f006 be4f 	b.w	8019f68 <ucdr_serialize_string>
 80132ca:	68a1      	ldr	r1, [r4, #8]
 80132cc:	4628      	mov	r0, r5
 80132ce:	f006 fe4b 	bl	8019f68 <ucdr_serialize_string>
 80132d2:	4606      	mov	r6, r0
 80132d4:	e7c5      	b.n	8013262 <uxr_serialize_ObjectVariant.part.0+0x62>
 80132d6:	68a2      	ldr	r2, [r4, #8]
 80132d8:	f104 010c 	add.w	r1, r4, #12
 80132dc:	4628      	mov	r0, r5
 80132de:	f7fe f819 	bl	8011314 <ucdr_serialize_sequence_uint8_t>
 80132e2:	4606      	mov	r6, r0
 80132e4:	e7d9      	b.n	801329a <uxr_serialize_ObjectVariant.part.0+0x9a>
 80132e6:	bf00      	nop

080132e8 <uxr_deserialize_DATAWRITER_Representation>:
 80132e8:	b570      	push	{r4, r5, r6, lr}
 80132ea:	4606      	mov	r6, r0
 80132ec:	460d      	mov	r5, r1
 80132ee:	f7fc fa25 	bl	800f73c <ucdr_deserialize_uint8_t>
 80132f2:	4604      	mov	r4, r0
 80132f4:	b130      	cbz	r0, 8013304 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 80132f6:	782b      	ldrb	r3, [r5, #0]
 80132f8:	2b02      	cmp	r3, #2
 80132fa:	d00c      	beq.n	8013316 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 80132fc:	2b03      	cmp	r3, #3
 80132fe:	d012      	beq.n	8013326 <uxr_deserialize_DATAWRITER_Representation+0x3e>
 8013300:	2b01      	cmp	r3, #1
 8013302:	d008      	beq.n	8013316 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8013304:	2202      	movs	r2, #2
 8013306:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 801330a:	4630      	mov	r0, r6
 801330c:	f7fb ff6e 	bl	800f1ec <ucdr_deserialize_array_uint8_t>
 8013310:	4020      	ands	r0, r4
 8013312:	b2c0      	uxtb	r0, r0
 8013314:	bd70      	pop	{r4, r5, r6, pc}
 8013316:	6869      	ldr	r1, [r5, #4]
 8013318:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801331c:	4630      	mov	r0, r6
 801331e:	f006 fe31 	bl	8019f84 <ucdr_deserialize_string>
 8013322:	4604      	mov	r4, r0
 8013324:	e7ee      	b.n	8013304 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8013326:	1d2b      	adds	r3, r5, #4
 8013328:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801332c:	f105 0108 	add.w	r1, r5, #8
 8013330:	4630      	mov	r0, r6
 8013332:	f7fe f801 	bl	8011338 <ucdr_deserialize_sequence_uint8_t>
 8013336:	4604      	mov	r4, r0
 8013338:	e7e4      	b.n	8013304 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801333a:	bf00      	nop

0801333c <uxr_serialize_OBJK_DomainParticipant_Binary>:
 801333c:	b570      	push	{r4, r5, r6, lr}
 801333e:	460d      	mov	r5, r1
 8013340:	7809      	ldrb	r1, [r1, #0]
 8013342:	4606      	mov	r6, r0
 8013344:	f7fc f9b6 	bl	800f6b4 <ucdr_serialize_bool>
 8013348:	782b      	ldrb	r3, [r5, #0]
 801334a:	4604      	mov	r4, r0
 801334c:	b94b      	cbnz	r3, 8013362 <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 801334e:	7a29      	ldrb	r1, [r5, #8]
 8013350:	4630      	mov	r0, r6
 8013352:	f7fc f9af 	bl	800f6b4 <ucdr_serialize_bool>
 8013356:	7a2b      	ldrb	r3, [r5, #8]
 8013358:	4004      	ands	r4, r0
 801335a:	b2e4      	uxtb	r4, r4
 801335c:	b943      	cbnz	r3, 8013370 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 801335e:	4620      	mov	r0, r4
 8013360:	bd70      	pop	{r4, r5, r6, pc}
 8013362:	6869      	ldr	r1, [r5, #4]
 8013364:	4630      	mov	r0, r6
 8013366:	f006 fdff 	bl	8019f68 <ucdr_serialize_string>
 801336a:	4004      	ands	r4, r0
 801336c:	b2e4      	uxtb	r4, r4
 801336e:	e7ee      	b.n	801334e <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 8013370:	68e9      	ldr	r1, [r5, #12]
 8013372:	4630      	mov	r0, r6
 8013374:	f006 fdf8 	bl	8019f68 <ucdr_serialize_string>
 8013378:	4004      	ands	r4, r0
 801337a:	4620      	mov	r0, r4
 801337c:	bd70      	pop	{r4, r5, r6, pc}
 801337e:	bf00      	nop

08013380 <uxr_serialize_OBJK_Topic_Binary>:
 8013380:	b570      	push	{r4, r5, r6, lr}
 8013382:	460d      	mov	r5, r1
 8013384:	6809      	ldr	r1, [r1, #0]
 8013386:	4606      	mov	r6, r0
 8013388:	f006 fdee 	bl	8019f68 <ucdr_serialize_string>
 801338c:	7929      	ldrb	r1, [r5, #4]
 801338e:	4604      	mov	r4, r0
 8013390:	4630      	mov	r0, r6
 8013392:	f7fc f98f 	bl	800f6b4 <ucdr_serialize_bool>
 8013396:	792b      	ldrb	r3, [r5, #4]
 8013398:	4004      	ands	r4, r0
 801339a:	b2e4      	uxtb	r4, r4
 801339c:	b943      	cbnz	r3, 80133b0 <uxr_serialize_OBJK_Topic_Binary+0x30>
 801339e:	7b29      	ldrb	r1, [r5, #12]
 80133a0:	4630      	mov	r0, r6
 80133a2:	f7fc f987 	bl	800f6b4 <ucdr_serialize_bool>
 80133a6:	7b2b      	ldrb	r3, [r5, #12]
 80133a8:	4004      	ands	r4, r0
 80133aa:	b93b      	cbnz	r3, 80133bc <uxr_serialize_OBJK_Topic_Binary+0x3c>
 80133ac:	4620      	mov	r0, r4
 80133ae:	bd70      	pop	{r4, r5, r6, pc}
 80133b0:	68a9      	ldr	r1, [r5, #8]
 80133b2:	4630      	mov	r0, r6
 80133b4:	f006 fdd8 	bl	8019f68 <ucdr_serialize_string>
 80133b8:	4004      	ands	r4, r0
 80133ba:	e7f0      	b.n	801339e <uxr_serialize_OBJK_Topic_Binary+0x1e>
 80133bc:	6929      	ldr	r1, [r5, #16]
 80133be:	4630      	mov	r0, r6
 80133c0:	f006 fdd2 	bl	8019f68 <ucdr_serialize_string>
 80133c4:	4004      	ands	r4, r0
 80133c6:	b2e4      	uxtb	r4, r4
 80133c8:	4620      	mov	r0, r4
 80133ca:	bd70      	pop	{r4, r5, r6, pc}

080133cc <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 80133cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80133d0:	460c      	mov	r4, r1
 80133d2:	7809      	ldrb	r1, [r1, #0]
 80133d4:	4606      	mov	r6, r0
 80133d6:	f7fc f96d 	bl	800f6b4 <ucdr_serialize_bool>
 80133da:	7823      	ldrb	r3, [r4, #0]
 80133dc:	4605      	mov	r5, r0
 80133de:	b96b      	cbnz	r3, 80133fc <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 80133e0:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 80133e4:	4630      	mov	r0, r6
 80133e6:	f7fc f965 	bl	800f6b4 <ucdr_serialize_bool>
 80133ea:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80133ee:	4005      	ands	r5, r0
 80133f0:	b2ed      	uxtb	r5, r5
 80133f2:	2b00      	cmp	r3, #0
 80133f4:	d16a      	bne.n	80134cc <uxr_serialize_OBJK_Publisher_Binary_Qos+0x100>
 80133f6:	4628      	mov	r0, r5
 80133f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80133fc:	6861      	ldr	r1, [r4, #4]
 80133fe:	4630      	mov	r0, r6
 8013400:	f7fc fba2 	bl	800fb48 <ucdr_serialize_uint32_t>
 8013404:	6863      	ldr	r3, [r4, #4]
 8013406:	2b00      	cmp	r3, #0
 8013408:	d06c      	beq.n	80134e4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x118>
 801340a:	2800      	cmp	r0, #0
 801340c:	d068      	beq.n	80134e0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 801340e:	68a1      	ldr	r1, [r4, #8]
 8013410:	4630      	mov	r0, r6
 8013412:	f006 fda9 	bl	8019f68 <ucdr_serialize_string>
 8013416:	6862      	ldr	r2, [r4, #4]
 8013418:	2a01      	cmp	r2, #1
 801341a:	d953      	bls.n	80134c4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801341c:	2800      	cmp	r0, #0
 801341e:	d05f      	beq.n	80134e0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 8013420:	68e1      	ldr	r1, [r4, #12]
 8013422:	4630      	mov	r0, r6
 8013424:	f006 fda0 	bl	8019f68 <ucdr_serialize_string>
 8013428:	6862      	ldr	r2, [r4, #4]
 801342a:	2a02      	cmp	r2, #2
 801342c:	d94a      	bls.n	80134c4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801342e:	2800      	cmp	r0, #0
 8013430:	d056      	beq.n	80134e0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 8013432:	6921      	ldr	r1, [r4, #16]
 8013434:	4630      	mov	r0, r6
 8013436:	f006 fd97 	bl	8019f68 <ucdr_serialize_string>
 801343a:	6862      	ldr	r2, [r4, #4]
 801343c:	2a03      	cmp	r2, #3
 801343e:	d941      	bls.n	80134c4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013440:	2800      	cmp	r0, #0
 8013442:	d04d      	beq.n	80134e0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 8013444:	6961      	ldr	r1, [r4, #20]
 8013446:	4630      	mov	r0, r6
 8013448:	f006 fd8e 	bl	8019f68 <ucdr_serialize_string>
 801344c:	6862      	ldr	r2, [r4, #4]
 801344e:	2a04      	cmp	r2, #4
 8013450:	d938      	bls.n	80134c4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013452:	2800      	cmp	r0, #0
 8013454:	d044      	beq.n	80134e0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 8013456:	69a1      	ldr	r1, [r4, #24]
 8013458:	4630      	mov	r0, r6
 801345a:	f006 fd85 	bl	8019f68 <ucdr_serialize_string>
 801345e:	6862      	ldr	r2, [r4, #4]
 8013460:	2a05      	cmp	r2, #5
 8013462:	d92f      	bls.n	80134c4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013464:	2800      	cmp	r0, #0
 8013466:	d03b      	beq.n	80134e0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 8013468:	69e1      	ldr	r1, [r4, #28]
 801346a:	4630      	mov	r0, r6
 801346c:	f006 fd7c 	bl	8019f68 <ucdr_serialize_string>
 8013470:	6862      	ldr	r2, [r4, #4]
 8013472:	2a06      	cmp	r2, #6
 8013474:	d926      	bls.n	80134c4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013476:	b398      	cbz	r0, 80134e0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 8013478:	6a21      	ldr	r1, [r4, #32]
 801347a:	4630      	mov	r0, r6
 801347c:	f006 fd74 	bl	8019f68 <ucdr_serialize_string>
 8013480:	6862      	ldr	r2, [r4, #4]
 8013482:	2a07      	cmp	r2, #7
 8013484:	d91e      	bls.n	80134c4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013486:	b358      	cbz	r0, 80134e0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 8013488:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 801348a:	4630      	mov	r0, r6
 801348c:	f006 fd6c 	bl	8019f68 <ucdr_serialize_string>
 8013490:	6862      	ldr	r2, [r4, #4]
 8013492:	2a08      	cmp	r2, #8
 8013494:	d916      	bls.n	80134c4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013496:	b318      	cbz	r0, 80134e0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 8013498:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 801349a:	4630      	mov	r0, r6
 801349c:	f006 fd64 	bl	8019f68 <ucdr_serialize_string>
 80134a0:	6862      	ldr	r2, [r4, #4]
 80134a2:	2a09      	cmp	r2, #9
 80134a4:	d90e      	bls.n	80134c4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80134a6:	b1d8      	cbz	r0, 80134e0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 80134a8:	f104 0828 	add.w	r8, r4, #40	@ 0x28
 80134ac:	2709      	movs	r7, #9
 80134ae:	e000      	b.n	80134b2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 80134b0:	b1b0      	cbz	r0, 80134e0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 80134b2:	f858 1f04 	ldr.w	r1, [r8, #4]!
 80134b6:	4630      	mov	r0, r6
 80134b8:	f006 fd56 	bl	8019f68 <ucdr_serialize_string>
 80134bc:	6862      	ldr	r2, [r4, #4]
 80134be:	3701      	adds	r7, #1
 80134c0:	4297      	cmp	r7, r2
 80134c2:	d3f5      	bcc.n	80134b0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 80134c4:	ea05 0300 	and.w	r3, r5, r0
 80134c8:	b2dd      	uxtb	r5, r3
 80134ca:	e789      	b.n	80133e0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 80134cc:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80134ce:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 80134d2:	4630      	mov	r0, r6
 80134d4:	f7fd ff1e 	bl	8011314 <ucdr_serialize_sequence_uint8_t>
 80134d8:	4005      	ands	r5, r0
 80134da:	4628      	mov	r0, r5
 80134dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80134e0:	2500      	movs	r5, #0
 80134e2:	e77d      	b.n	80133e0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 80134e4:	4028      	ands	r0, r5
 80134e6:	b2c5      	uxtb	r5, r0
 80134e8:	e77a      	b.n	80133e0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 80134ea:	bf00      	nop

080134ec <uxr_serialize_OBJK_Publisher_Binary>:
 80134ec:	b570      	push	{r4, r5, r6, lr}
 80134ee:	460d      	mov	r5, r1
 80134f0:	7809      	ldrb	r1, [r1, #0]
 80134f2:	4606      	mov	r6, r0
 80134f4:	f7fc f8de 	bl	800f6b4 <ucdr_serialize_bool>
 80134f8:	782b      	ldrb	r3, [r5, #0]
 80134fa:	4604      	mov	r4, r0
 80134fc:	b94b      	cbnz	r3, 8013512 <uxr_serialize_OBJK_Publisher_Binary+0x26>
 80134fe:	7a29      	ldrb	r1, [r5, #8]
 8013500:	4630      	mov	r0, r6
 8013502:	f7fc f8d7 	bl	800f6b4 <ucdr_serialize_bool>
 8013506:	7a2b      	ldrb	r3, [r5, #8]
 8013508:	4004      	ands	r4, r0
 801350a:	b2e4      	uxtb	r4, r4
 801350c:	b943      	cbnz	r3, 8013520 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 801350e:	4620      	mov	r0, r4
 8013510:	bd70      	pop	{r4, r5, r6, pc}
 8013512:	6869      	ldr	r1, [r5, #4]
 8013514:	4630      	mov	r0, r6
 8013516:	f006 fd27 	bl	8019f68 <ucdr_serialize_string>
 801351a:	4004      	ands	r4, r0
 801351c:	b2e4      	uxtb	r4, r4
 801351e:	e7ee      	b.n	80134fe <uxr_serialize_OBJK_Publisher_Binary+0x12>
 8013520:	f105 010c 	add.w	r1, r5, #12
 8013524:	4630      	mov	r0, r6
 8013526:	f7ff ff51 	bl	80133cc <uxr_serialize_OBJK_Publisher_Binary_Qos>
 801352a:	4004      	ands	r4, r0
 801352c:	4620      	mov	r0, r4
 801352e:	bd70      	pop	{r4, r5, r6, pc}

08013530 <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 8013530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013534:	460c      	mov	r4, r1
 8013536:	7809      	ldrb	r1, [r1, #0]
 8013538:	4606      	mov	r6, r0
 801353a:	f7fc f8bb 	bl	800f6b4 <ucdr_serialize_bool>
 801353e:	7823      	ldrb	r3, [r4, #0]
 8013540:	4605      	mov	r5, r0
 8013542:	b96b      	cbnz	r3, 8013560 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 8013544:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 8013548:	4630      	mov	r0, r6
 801354a:	f7fc f8b3 	bl	800f6b4 <ucdr_serialize_bool>
 801354e:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8013552:	4005      	ands	r5, r0
 8013554:	b2ed      	uxtb	r5, r5
 8013556:	2b00      	cmp	r3, #0
 8013558:	d16a      	bne.n	8013630 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x100>
 801355a:	4628      	mov	r0, r5
 801355c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013560:	6861      	ldr	r1, [r4, #4]
 8013562:	4630      	mov	r0, r6
 8013564:	f7fc faf0 	bl	800fb48 <ucdr_serialize_uint32_t>
 8013568:	6863      	ldr	r3, [r4, #4]
 801356a:	2b00      	cmp	r3, #0
 801356c:	d06c      	beq.n	8013648 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x118>
 801356e:	2800      	cmp	r0, #0
 8013570:	d068      	beq.n	8013644 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 8013572:	68a1      	ldr	r1, [r4, #8]
 8013574:	4630      	mov	r0, r6
 8013576:	f006 fcf7 	bl	8019f68 <ucdr_serialize_string>
 801357a:	6862      	ldr	r2, [r4, #4]
 801357c:	2a01      	cmp	r2, #1
 801357e:	d953      	bls.n	8013628 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8013580:	2800      	cmp	r0, #0
 8013582:	d05f      	beq.n	8013644 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 8013584:	68e1      	ldr	r1, [r4, #12]
 8013586:	4630      	mov	r0, r6
 8013588:	f006 fcee 	bl	8019f68 <ucdr_serialize_string>
 801358c:	6862      	ldr	r2, [r4, #4]
 801358e:	2a02      	cmp	r2, #2
 8013590:	d94a      	bls.n	8013628 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8013592:	2800      	cmp	r0, #0
 8013594:	d056      	beq.n	8013644 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 8013596:	6921      	ldr	r1, [r4, #16]
 8013598:	4630      	mov	r0, r6
 801359a:	f006 fce5 	bl	8019f68 <ucdr_serialize_string>
 801359e:	6862      	ldr	r2, [r4, #4]
 80135a0:	2a03      	cmp	r2, #3
 80135a2:	d941      	bls.n	8013628 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80135a4:	2800      	cmp	r0, #0
 80135a6:	d04d      	beq.n	8013644 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 80135a8:	6961      	ldr	r1, [r4, #20]
 80135aa:	4630      	mov	r0, r6
 80135ac:	f006 fcdc 	bl	8019f68 <ucdr_serialize_string>
 80135b0:	6862      	ldr	r2, [r4, #4]
 80135b2:	2a04      	cmp	r2, #4
 80135b4:	d938      	bls.n	8013628 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80135b6:	2800      	cmp	r0, #0
 80135b8:	d044      	beq.n	8013644 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 80135ba:	69a1      	ldr	r1, [r4, #24]
 80135bc:	4630      	mov	r0, r6
 80135be:	f006 fcd3 	bl	8019f68 <ucdr_serialize_string>
 80135c2:	6862      	ldr	r2, [r4, #4]
 80135c4:	2a05      	cmp	r2, #5
 80135c6:	d92f      	bls.n	8013628 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80135c8:	2800      	cmp	r0, #0
 80135ca:	d03b      	beq.n	8013644 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 80135cc:	69e1      	ldr	r1, [r4, #28]
 80135ce:	4630      	mov	r0, r6
 80135d0:	f006 fcca 	bl	8019f68 <ucdr_serialize_string>
 80135d4:	6862      	ldr	r2, [r4, #4]
 80135d6:	2a06      	cmp	r2, #6
 80135d8:	d926      	bls.n	8013628 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80135da:	b398      	cbz	r0, 8013644 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 80135dc:	6a21      	ldr	r1, [r4, #32]
 80135de:	4630      	mov	r0, r6
 80135e0:	f006 fcc2 	bl	8019f68 <ucdr_serialize_string>
 80135e4:	6862      	ldr	r2, [r4, #4]
 80135e6:	2a07      	cmp	r2, #7
 80135e8:	d91e      	bls.n	8013628 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80135ea:	b358      	cbz	r0, 8013644 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 80135ec:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80135ee:	4630      	mov	r0, r6
 80135f0:	f006 fcba 	bl	8019f68 <ucdr_serialize_string>
 80135f4:	6862      	ldr	r2, [r4, #4]
 80135f6:	2a08      	cmp	r2, #8
 80135f8:	d916      	bls.n	8013628 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80135fa:	b318      	cbz	r0, 8013644 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 80135fc:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80135fe:	4630      	mov	r0, r6
 8013600:	f006 fcb2 	bl	8019f68 <ucdr_serialize_string>
 8013604:	6862      	ldr	r2, [r4, #4]
 8013606:	2a09      	cmp	r2, #9
 8013608:	d90e      	bls.n	8013628 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801360a:	b1d8      	cbz	r0, 8013644 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 801360c:	f104 0828 	add.w	r8, r4, #40	@ 0x28
 8013610:	2709      	movs	r7, #9
 8013612:	e000      	b.n	8013616 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 8013614:	b1b0      	cbz	r0, 8013644 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 8013616:	f858 1f04 	ldr.w	r1, [r8, #4]!
 801361a:	4630      	mov	r0, r6
 801361c:	f006 fca4 	bl	8019f68 <ucdr_serialize_string>
 8013620:	6862      	ldr	r2, [r4, #4]
 8013622:	3701      	adds	r7, #1
 8013624:	4297      	cmp	r7, r2
 8013626:	d3f5      	bcc.n	8013614 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 8013628:	ea05 0300 	and.w	r3, r5, r0
 801362c:	b2dd      	uxtb	r5, r3
 801362e:	e789      	b.n	8013544 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8013630:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8013632:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8013636:	4630      	mov	r0, r6
 8013638:	f7fd fe6c 	bl	8011314 <ucdr_serialize_sequence_uint8_t>
 801363c:	4005      	ands	r5, r0
 801363e:	4628      	mov	r0, r5
 8013640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013644:	2500      	movs	r5, #0
 8013646:	e77d      	b.n	8013544 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8013648:	4028      	ands	r0, r5
 801364a:	b2c5      	uxtb	r5, r0
 801364c:	e77a      	b.n	8013544 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 801364e:	bf00      	nop

08013650 <uxr_serialize_OBJK_Subscriber_Binary>:
 8013650:	b570      	push	{r4, r5, r6, lr}
 8013652:	460d      	mov	r5, r1
 8013654:	7809      	ldrb	r1, [r1, #0]
 8013656:	4606      	mov	r6, r0
 8013658:	f7fc f82c 	bl	800f6b4 <ucdr_serialize_bool>
 801365c:	782b      	ldrb	r3, [r5, #0]
 801365e:	4604      	mov	r4, r0
 8013660:	b94b      	cbnz	r3, 8013676 <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 8013662:	7a29      	ldrb	r1, [r5, #8]
 8013664:	4630      	mov	r0, r6
 8013666:	f7fc f825 	bl	800f6b4 <ucdr_serialize_bool>
 801366a:	7a2b      	ldrb	r3, [r5, #8]
 801366c:	4004      	ands	r4, r0
 801366e:	b2e4      	uxtb	r4, r4
 8013670:	b943      	cbnz	r3, 8013684 <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 8013672:	4620      	mov	r0, r4
 8013674:	bd70      	pop	{r4, r5, r6, pc}
 8013676:	6869      	ldr	r1, [r5, #4]
 8013678:	4630      	mov	r0, r6
 801367a:	f006 fc75 	bl	8019f68 <ucdr_serialize_string>
 801367e:	4004      	ands	r4, r0
 8013680:	b2e4      	uxtb	r4, r4
 8013682:	e7ee      	b.n	8013662 <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 8013684:	f105 010c 	add.w	r1, r5, #12
 8013688:	4630      	mov	r0, r6
 801368a:	f7ff ff51 	bl	8013530 <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 801368e:	4004      	ands	r4, r0
 8013690:	4620      	mov	r0, r4
 8013692:	bd70      	pop	{r4, r5, r6, pc}

08013694 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 8013694:	b570      	push	{r4, r5, r6, lr}
 8013696:	460d      	mov	r5, r1
 8013698:	8809      	ldrh	r1, [r1, #0]
 801369a:	4606      	mov	r6, r0
 801369c:	f7fc f864 	bl	800f768 <ucdr_serialize_uint16_t>
 80136a0:	78a9      	ldrb	r1, [r5, #2]
 80136a2:	4604      	mov	r4, r0
 80136a4:	4630      	mov	r0, r6
 80136a6:	f7fc f805 	bl	800f6b4 <ucdr_serialize_bool>
 80136aa:	78ab      	ldrb	r3, [r5, #2]
 80136ac:	4004      	ands	r4, r0
 80136ae:	b2e4      	uxtb	r4, r4
 80136b0:	b9b3      	cbnz	r3, 80136e0 <uxr_serialize_OBJK_Endpoint_QosBinary+0x4c>
 80136b2:	79a9      	ldrb	r1, [r5, #6]
 80136b4:	4630      	mov	r0, r6
 80136b6:	f7fb fffd 	bl	800f6b4 <ucdr_serialize_bool>
 80136ba:	79ab      	ldrb	r3, [r5, #6]
 80136bc:	4004      	ands	r4, r0
 80136be:	bb33      	cbnz	r3, 801370e <uxr_serialize_OBJK_Endpoint_QosBinary+0x7a>
 80136c0:	7b29      	ldrb	r1, [r5, #12]
 80136c2:	4630      	mov	r0, r6
 80136c4:	f7fb fff6 	bl	800f6b4 <ucdr_serialize_bool>
 80136c8:	7b2b      	ldrb	r3, [r5, #12]
 80136ca:	4004      	ands	r4, r0
 80136cc:	b9c3      	cbnz	r3, 8013700 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6c>
 80136ce:	7d29      	ldrb	r1, [r5, #20]
 80136d0:	4630      	mov	r0, r6
 80136d2:	f7fb ffef 	bl	800f6b4 <ucdr_serialize_bool>
 80136d6:	7d2b      	ldrb	r3, [r5, #20]
 80136d8:	4004      	ands	r4, r0
 80136da:	b93b      	cbnz	r3, 80136ec <uxr_serialize_OBJK_Endpoint_QosBinary+0x58>
 80136dc:	4620      	mov	r0, r4
 80136de:	bd70      	pop	{r4, r5, r6, pc}
 80136e0:	88a9      	ldrh	r1, [r5, #4]
 80136e2:	4630      	mov	r0, r6
 80136e4:	f7fc f840 	bl	800f768 <ucdr_serialize_uint16_t>
 80136e8:	4004      	ands	r4, r0
 80136ea:	e7e2      	b.n	80136b2 <uxr_serialize_OBJK_Endpoint_QosBinary+0x1e>
 80136ec:	69aa      	ldr	r2, [r5, #24]
 80136ee:	f105 011c 	add.w	r1, r5, #28
 80136f2:	4630      	mov	r0, r6
 80136f4:	f7fd fe0e 	bl	8011314 <ucdr_serialize_sequence_uint8_t>
 80136f8:	4004      	ands	r4, r0
 80136fa:	b2e4      	uxtb	r4, r4
 80136fc:	4620      	mov	r0, r4
 80136fe:	bd70      	pop	{r4, r5, r6, pc}
 8013700:	6929      	ldr	r1, [r5, #16]
 8013702:	4630      	mov	r0, r6
 8013704:	f7fc fa20 	bl	800fb48 <ucdr_serialize_uint32_t>
 8013708:	4004      	ands	r4, r0
 801370a:	b2e4      	uxtb	r4, r4
 801370c:	e7df      	b.n	80136ce <uxr_serialize_OBJK_Endpoint_QosBinary+0x3a>
 801370e:	68a9      	ldr	r1, [r5, #8]
 8013710:	4630      	mov	r0, r6
 8013712:	f7fc fa19 	bl	800fb48 <ucdr_serialize_uint32_t>
 8013716:	4004      	ands	r4, r0
 8013718:	b2e4      	uxtb	r4, r4
 801371a:	e7d1      	b.n	80136c0 <uxr_serialize_OBJK_Endpoint_QosBinary+0x2c>

0801371c <uxr_serialize_OBJK_DataReader_Binary>:
 801371c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801371e:	2202      	movs	r2, #2
 8013720:	460c      	mov	r4, r1
 8013722:	4606      	mov	r6, r0
 8013724:	f7fb fcfe 	bl	800f124 <ucdr_serialize_array_uint8_t>
 8013728:	78a1      	ldrb	r1, [r4, #2]
 801372a:	4605      	mov	r5, r0
 801372c:	4630      	mov	r0, r6
 801372e:	f7fb ffc1 	bl	800f6b4 <ucdr_serialize_bool>
 8013732:	78a3      	ldrb	r3, [r4, #2]
 8013734:	4005      	ands	r5, r0
 8013736:	b2ed      	uxtb	r5, r5
 8013738:	b90b      	cbnz	r3, 801373e <uxr_serialize_OBJK_DataReader_Binary+0x22>
 801373a:	4628      	mov	r0, r5
 801373c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801373e:	f104 0108 	add.w	r1, r4, #8
 8013742:	4630      	mov	r0, r6
 8013744:	f7ff ffa6 	bl	8013694 <uxr_serialize_OBJK_Endpoint_QosBinary>
 8013748:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801374c:	4607      	mov	r7, r0
 801374e:	4630      	mov	r0, r6
 8013750:	f7fb ffb0 	bl	800f6b4 <ucdr_serialize_bool>
 8013754:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8013758:	4007      	ands	r7, r0
 801375a:	b2ff      	uxtb	r7, r7
 801375c:	b95b      	cbnz	r3, 8013776 <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 801375e:	f894 1038 	ldrb.w	r1, [r4, #56]	@ 0x38
 8013762:	4630      	mov	r0, r6
 8013764:	f7fb ffa6 	bl	800f6b4 <ucdr_serialize_bool>
 8013768:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 801376c:	4007      	ands	r7, r0
 801376e:	b94b      	cbnz	r3, 8013784 <uxr_serialize_OBJK_DataReader_Binary+0x68>
 8013770:	403d      	ands	r5, r7
 8013772:	4628      	mov	r0, r5
 8013774:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013776:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	@ 0x30
 801377a:	4630      	mov	r0, r6
 801377c:	f7fc fc28 	bl	800ffd0 <ucdr_serialize_uint64_t>
 8013780:	4007      	ands	r7, r0
 8013782:	e7ec      	b.n	801375e <uxr_serialize_OBJK_DataReader_Binary+0x42>
 8013784:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8013786:	4630      	mov	r0, r6
 8013788:	f006 fbee 	bl	8019f68 <ucdr_serialize_string>
 801378c:	4007      	ands	r7, r0
 801378e:	b2ff      	uxtb	r7, r7
 8013790:	e7ee      	b.n	8013770 <uxr_serialize_OBJK_DataReader_Binary+0x54>
 8013792:	bf00      	nop

08013794 <uxr_serialize_OBJK_DataWriter_Binary>:
 8013794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013796:	2202      	movs	r2, #2
 8013798:	460d      	mov	r5, r1
 801379a:	4606      	mov	r6, r0
 801379c:	f7fb fcc2 	bl	800f124 <ucdr_serialize_array_uint8_t>
 80137a0:	78a9      	ldrb	r1, [r5, #2]
 80137a2:	4604      	mov	r4, r0
 80137a4:	4630      	mov	r0, r6
 80137a6:	f7fb ff85 	bl	800f6b4 <ucdr_serialize_bool>
 80137aa:	78ab      	ldrb	r3, [r5, #2]
 80137ac:	4004      	ands	r4, r0
 80137ae:	b2e4      	uxtb	r4, r4
 80137b0:	b90b      	cbnz	r3, 80137b6 <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 80137b2:	4620      	mov	r0, r4
 80137b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80137b6:	f105 0108 	add.w	r1, r5, #8
 80137ba:	4630      	mov	r0, r6
 80137bc:	f7ff ff6a 	bl	8013694 <uxr_serialize_OBJK_Endpoint_QosBinary>
 80137c0:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 80137c4:	4607      	mov	r7, r0
 80137c6:	4630      	mov	r0, r6
 80137c8:	f7fb ff74 	bl	800f6b4 <ucdr_serialize_bool>
 80137cc:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 80137d0:	4007      	ands	r7, r0
 80137d2:	b2ff      	uxtb	r7, r7
 80137d4:	b913      	cbnz	r3, 80137dc <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 80137d6:	403c      	ands	r4, r7
 80137d8:	4620      	mov	r0, r4
 80137da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80137dc:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 80137e0:	4630      	mov	r0, r6
 80137e2:	f7fc fbf5 	bl	800ffd0 <ucdr_serialize_uint64_t>
 80137e6:	4007      	ands	r7, r0
 80137e8:	e7f5      	b.n	80137d6 <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 80137ea:	bf00      	nop

080137ec <uxr_serialize_OBJK_Replier_Binary>:
 80137ec:	b570      	push	{r4, r5, r6, lr}
 80137ee:	460d      	mov	r5, r1
 80137f0:	6809      	ldr	r1, [r1, #0]
 80137f2:	4606      	mov	r6, r0
 80137f4:	f006 fbb8 	bl	8019f68 <ucdr_serialize_string>
 80137f8:	6869      	ldr	r1, [r5, #4]
 80137fa:	4604      	mov	r4, r0
 80137fc:	4630      	mov	r0, r6
 80137fe:	f006 fbb3 	bl	8019f68 <ucdr_serialize_string>
 8013802:	68a9      	ldr	r1, [r5, #8]
 8013804:	4004      	ands	r4, r0
 8013806:	4630      	mov	r0, r6
 8013808:	f006 fbae 	bl	8019f68 <ucdr_serialize_string>
 801380c:	b2e4      	uxtb	r4, r4
 801380e:	4004      	ands	r4, r0
 8013810:	7b29      	ldrb	r1, [r5, #12]
 8013812:	4630      	mov	r0, r6
 8013814:	f7fb ff4e 	bl	800f6b4 <ucdr_serialize_bool>
 8013818:	7b2b      	ldrb	r3, [r5, #12]
 801381a:	4004      	ands	r4, r0
 801381c:	b943      	cbnz	r3, 8013830 <uxr_serialize_OBJK_Replier_Binary+0x44>
 801381e:	7d29      	ldrb	r1, [r5, #20]
 8013820:	4630      	mov	r0, r6
 8013822:	f7fb ff47 	bl	800f6b4 <ucdr_serialize_bool>
 8013826:	7d2b      	ldrb	r3, [r5, #20]
 8013828:	4004      	ands	r4, r0
 801382a:	b93b      	cbnz	r3, 801383c <uxr_serialize_OBJK_Replier_Binary+0x50>
 801382c:	4620      	mov	r0, r4
 801382e:	bd70      	pop	{r4, r5, r6, pc}
 8013830:	6929      	ldr	r1, [r5, #16]
 8013832:	4630      	mov	r0, r6
 8013834:	f006 fb98 	bl	8019f68 <ucdr_serialize_string>
 8013838:	4004      	ands	r4, r0
 801383a:	e7f0      	b.n	801381e <uxr_serialize_OBJK_Replier_Binary+0x32>
 801383c:	69a9      	ldr	r1, [r5, #24]
 801383e:	4630      	mov	r0, r6
 8013840:	f006 fb92 	bl	8019f68 <ucdr_serialize_string>
 8013844:	4004      	ands	r4, r0
 8013846:	b2e4      	uxtb	r4, r4
 8013848:	4620      	mov	r0, r4
 801384a:	bd70      	pop	{r4, r5, r6, pc}

0801384c <uxr_deserialize_ObjectVariant>:
 801384c:	b570      	push	{r4, r5, r6, lr}
 801384e:	4605      	mov	r5, r0
 8013850:	460e      	mov	r6, r1
 8013852:	f7fb ff73 	bl	800f73c <ucdr_deserialize_uint8_t>
 8013856:	b168      	cbz	r0, 8013874 <uxr_deserialize_ObjectVariant+0x28>
 8013858:	7833      	ldrb	r3, [r6, #0]
 801385a:	3b01      	subs	r3, #1
 801385c:	4604      	mov	r4, r0
 801385e:	2b0d      	cmp	r3, #13
 8013860:	d809      	bhi.n	8013876 <uxr_deserialize_ObjectVariant+0x2a>
 8013862:	e8df f003 	tbb	[pc, r3]
 8013866:	0a64      	.short	0x0a64
 8013868:	0a0a2323 	.word	0x0a0a2323
 801386c:	10080a0a 	.word	0x10080a0a
 8013870:	5e411010 	.word	0x5e411010
 8013874:	2400      	movs	r4, #0
 8013876:	4620      	mov	r0, r4
 8013878:	bd70      	pop	{r4, r5, r6, pc}
 801387a:	1d31      	adds	r1, r6, #4
 801387c:	4628      	mov	r0, r5
 801387e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013882:	f7ff bd31 	b.w	80132e8 <uxr_deserialize_DATAWRITER_Representation>
 8013886:	1d31      	adds	r1, r6, #4
 8013888:	4628      	mov	r0, r5
 801388a:	f7fb ff57 	bl	800f73c <ucdr_deserialize_uint8_t>
 801388e:	2800      	cmp	r0, #0
 8013890:	d0f0      	beq.n	8013874 <uxr_deserialize_ObjectVariant+0x28>
 8013892:	7933      	ldrb	r3, [r6, #4]
 8013894:	2b01      	cmp	r3, #1
 8013896:	d001      	beq.n	801389c <uxr_deserialize_ObjectVariant+0x50>
 8013898:	2b02      	cmp	r3, #2
 801389a:	d1ec      	bne.n	8013876 <uxr_deserialize_ObjectVariant+0x2a>
 801389c:	68b1      	ldr	r1, [r6, #8]
 801389e:	4628      	mov	r0, r5
 80138a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80138a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80138a8:	f006 bb6c 	b.w	8019f84 <ucdr_deserialize_string>
 80138ac:	1d31      	adds	r1, r6, #4
 80138ae:	4628      	mov	r0, r5
 80138b0:	f7fb ff44 	bl	800f73c <ucdr_deserialize_uint8_t>
 80138b4:	4604      	mov	r4, r0
 80138b6:	b170      	cbz	r0, 80138d6 <uxr_deserialize_ObjectVariant+0x8a>
 80138b8:	7933      	ldrb	r3, [r6, #4]
 80138ba:	2b02      	cmp	r3, #2
 80138bc:	d053      	beq.n	8013966 <uxr_deserialize_ObjectVariant+0x11a>
 80138be:	2b03      	cmp	r3, #3
 80138c0:	d109      	bne.n	80138d6 <uxr_deserialize_ObjectVariant+0x8a>
 80138c2:	f106 0308 	add.w	r3, r6, #8
 80138c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80138ca:	f106 010c 	add.w	r1, r6, #12
 80138ce:	4628      	mov	r0, r5
 80138d0:	f7fd fd32 	bl	8011338 <ucdr_deserialize_sequence_uint8_t>
 80138d4:	4604      	mov	r4, r0
 80138d6:	2202      	movs	r2, #2
 80138d8:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 80138dc:	4628      	mov	r0, r5
 80138de:	f7fb fc85 	bl	800f1ec <ucdr_deserialize_array_uint8_t>
 80138e2:	4004      	ands	r4, r0
 80138e4:	b2e4      	uxtb	r4, r4
 80138e6:	e7c6      	b.n	8013876 <uxr_deserialize_ObjectVariant+0x2a>
 80138e8:	2204      	movs	r2, #4
 80138ea:	18b1      	adds	r1, r6, r2
 80138ec:	4628      	mov	r0, r5
 80138ee:	f7fb fc7d 	bl	800f1ec <ucdr_deserialize_array_uint8_t>
 80138f2:	2202      	movs	r2, #2
 80138f4:	f106 0108 	add.w	r1, r6, #8
 80138f8:	4604      	mov	r4, r0
 80138fa:	4628      	mov	r0, r5
 80138fc:	f7fb fc76 	bl	800f1ec <ucdr_deserialize_array_uint8_t>
 8013900:	2202      	movs	r2, #2
 8013902:	4004      	ands	r4, r0
 8013904:	f106 010a 	add.w	r1, r6, #10
 8013908:	4628      	mov	r0, r5
 801390a:	f7fb fc6f 	bl	800f1ec <ucdr_deserialize_array_uint8_t>
 801390e:	b2e4      	uxtb	r4, r4
 8013910:	4603      	mov	r3, r0
 8013912:	f106 010c 	add.w	r1, r6, #12
 8013916:	4628      	mov	r0, r5
 8013918:	401c      	ands	r4, r3
 801391a:	f7fb fee1 	bl	800f6e0 <ucdr_deserialize_bool>
 801391e:	4004      	ands	r4, r0
 8013920:	e7a9      	b.n	8013876 <uxr_deserialize_ObjectVariant+0x2a>
 8013922:	1d31      	adds	r1, r6, #4
 8013924:	4628      	mov	r0, r5
 8013926:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801392a:	f7ff bb93 	b.w	8013054 <uxr_deserialize_CLIENT_Representation>
 801392e:	1d31      	adds	r1, r6, #4
 8013930:	4628      	mov	r0, r5
 8013932:	f7fb ff03 	bl	800f73c <ucdr_deserialize_uint8_t>
 8013936:	4604      	mov	r4, r0
 8013938:	b168      	cbz	r0, 8013956 <uxr_deserialize_ObjectVariant+0x10a>
 801393a:	7933      	ldrb	r3, [r6, #4]
 801393c:	2b02      	cmp	r3, #2
 801393e:	d003      	beq.n	8013948 <uxr_deserialize_ObjectVariant+0xfc>
 8013940:	2b03      	cmp	r3, #3
 8013942:	d018      	beq.n	8013976 <uxr_deserialize_ObjectVariant+0x12a>
 8013944:	2b01      	cmp	r3, #1
 8013946:	d106      	bne.n	8013956 <uxr_deserialize_ObjectVariant+0x10a>
 8013948:	68b1      	ldr	r1, [r6, #8]
 801394a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801394e:	4628      	mov	r0, r5
 8013950:	f006 fb18 	bl	8019f84 <ucdr_deserialize_string>
 8013954:	4604      	mov	r4, r0
 8013956:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 801395a:	4628      	mov	r0, r5
 801395c:	f7fc fc8a 	bl	8010274 <ucdr_deserialize_int16_t>
 8013960:	4004      	ands	r4, r0
 8013962:	b2e4      	uxtb	r4, r4
 8013964:	e787      	b.n	8013876 <uxr_deserialize_ObjectVariant+0x2a>
 8013966:	68b1      	ldr	r1, [r6, #8]
 8013968:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801396c:	4628      	mov	r0, r5
 801396e:	f006 fb09 	bl	8019f84 <ucdr_deserialize_string>
 8013972:	4604      	mov	r4, r0
 8013974:	e7af      	b.n	80138d6 <uxr_deserialize_ObjectVariant+0x8a>
 8013976:	f106 0308 	add.w	r3, r6, #8
 801397a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801397e:	f106 010c 	add.w	r1, r6, #12
 8013982:	4628      	mov	r0, r5
 8013984:	f7fd fcd8 	bl	8011338 <ucdr_deserialize_sequence_uint8_t>
 8013988:	4604      	mov	r4, r0
 801398a:	e7e4      	b.n	8013956 <uxr_deserialize_ObjectVariant+0x10a>

0801398c <uxr_deserialize_BaseObjectRequest>:
 801398c:	b570      	push	{r4, r5, r6, lr}
 801398e:	2202      	movs	r2, #2
 8013990:	4605      	mov	r5, r0
 8013992:	460e      	mov	r6, r1
 8013994:	f7fb fc2a 	bl	800f1ec <ucdr_deserialize_array_uint8_t>
 8013998:	2202      	movs	r2, #2
 801399a:	4604      	mov	r4, r0
 801399c:	18b1      	adds	r1, r6, r2
 801399e:	4628      	mov	r0, r5
 80139a0:	f7fb fc24 	bl	800f1ec <ucdr_deserialize_array_uint8_t>
 80139a4:	4020      	ands	r0, r4
 80139a6:	b2c0      	uxtb	r0, r0
 80139a8:	bd70      	pop	{r4, r5, r6, pc}
 80139aa:	bf00      	nop

080139ac <uxr_serialize_ActivityInfoVariant>:
 80139ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80139b0:	460d      	mov	r5, r1
 80139b2:	7809      	ldrb	r1, [r1, #0]
 80139b4:	4606      	mov	r6, r0
 80139b6:	f7fb feab 	bl	800f710 <ucdr_serialize_uint8_t>
 80139ba:	b130      	cbz	r0, 80139ca <uxr_serialize_ActivityInfoVariant+0x1e>
 80139bc:	782b      	ldrb	r3, [r5, #0]
 80139be:	2b06      	cmp	r3, #6
 80139c0:	d014      	beq.n	80139ec <uxr_serialize_ActivityInfoVariant+0x40>
 80139c2:	2b0d      	cmp	r3, #13
 80139c4:	d019      	beq.n	80139fa <uxr_serialize_ActivityInfoVariant+0x4e>
 80139c6:	2b05      	cmp	r3, #5
 80139c8:	d001      	beq.n	80139ce <uxr_serialize_ActivityInfoVariant+0x22>
 80139ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80139ce:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 80139d2:	4630      	mov	r0, r6
 80139d4:	f7fc fbc4 	bl	8010160 <ucdr_serialize_int16_t>
 80139d8:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 80139dc:	4604      	mov	r4, r0
 80139de:	4630      	mov	r0, r6
 80139e0:	f7fc faf6 	bl	800ffd0 <ucdr_serialize_uint64_t>
 80139e4:	4020      	ands	r0, r4
 80139e6:	b2c0      	uxtb	r0, r0
 80139e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80139ec:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 80139f0:	4630      	mov	r0, r6
 80139f2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80139f6:	f7fc bbb3 	b.w	8010160 <ucdr_serialize_int16_t>
 80139fa:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 80139fe:	4630      	mov	r0, r6
 8013a00:	f7fc fbae 	bl	8010160 <ucdr_serialize_int16_t>
 8013a04:	68e9      	ldr	r1, [r5, #12]
 8013a06:	4681      	mov	r9, r0
 8013a08:	4630      	mov	r0, r6
 8013a0a:	f7fc f89d 	bl	800fb48 <ucdr_serialize_uint32_t>
 8013a0e:	68eb      	ldr	r3, [r5, #12]
 8013a10:	2b00      	cmp	r3, #0
 8013a12:	d051      	beq.n	8013ab8 <uxr_serialize_ActivityInfoVariant+0x10c>
 8013a14:	b1e8      	cbz	r0, 8013a52 <uxr_serialize_ActivityInfoVariant+0xa6>
 8013a16:	f105 0714 	add.w	r7, r5, #20
 8013a1a:	f04f 0800 	mov.w	r8, #0
 8013a1e:	f817 1c04 	ldrb.w	r1, [r7, #-4]
 8013a22:	4630      	mov	r0, r6
 8013a24:	f7fb fe74 	bl	800f710 <ucdr_serialize_uint8_t>
 8013a28:	b198      	cbz	r0, 8013a52 <uxr_serialize_ActivityInfoVariant+0xa6>
 8013a2a:	f817 3c04 	ldrb.w	r3, [r7, #-4]
 8013a2e:	2b03      	cmp	r3, #3
 8013a30:	d839      	bhi.n	8013aa6 <uxr_serialize_ActivityInfoVariant+0xfa>
 8013a32:	e8df f003 	tbb	[pc, r3]
 8013a36:	1e2b      	.short	0x1e2b
 8013a38:	0211      	.short	0x0211
 8013a3a:	6839      	ldr	r1, [r7, #0]
 8013a3c:	4630      	mov	r0, r6
 8013a3e:	f006 fa93 	bl	8019f68 <ucdr_serialize_string>
 8013a42:	68eb      	ldr	r3, [r5, #12]
 8013a44:	f108 0801 	add.w	r8, r8, #1
 8013a48:	4598      	cmp	r8, r3
 8013a4a:	d231      	bcs.n	8013ab0 <uxr_serialize_ActivityInfoVariant+0x104>
 8013a4c:	3718      	adds	r7, #24
 8013a4e:	2800      	cmp	r0, #0
 8013a50:	d1e5      	bne.n	8013a1e <uxr_serialize_ActivityInfoVariant+0x72>
 8013a52:	2000      	movs	r0, #0
 8013a54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013a58:	2210      	movs	r2, #16
 8013a5a:	4639      	mov	r1, r7
 8013a5c:	4630      	mov	r0, r6
 8013a5e:	f7fb fb61 	bl	800f124 <ucdr_serialize_array_uint8_t>
 8013a62:	6939      	ldr	r1, [r7, #16]
 8013a64:	4604      	mov	r4, r0
 8013a66:	4630      	mov	r0, r6
 8013a68:	f7fc f86e 	bl	800fb48 <ucdr_serialize_uint32_t>
 8013a6c:	4020      	ands	r0, r4
 8013a6e:	b2c0      	uxtb	r0, r0
 8013a70:	e7e7      	b.n	8013a42 <uxr_serialize_ActivityInfoVariant+0x96>
 8013a72:	2204      	movs	r2, #4
 8013a74:	4639      	mov	r1, r7
 8013a76:	4630      	mov	r0, r6
 8013a78:	f7fb fb54 	bl	800f124 <ucdr_serialize_array_uint8_t>
 8013a7c:	88b9      	ldrh	r1, [r7, #4]
 8013a7e:	4604      	mov	r4, r0
 8013a80:	4630      	mov	r0, r6
 8013a82:	f7fb fe71 	bl	800f768 <ucdr_serialize_uint16_t>
 8013a86:	4020      	ands	r0, r4
 8013a88:	b2c0      	uxtb	r0, r0
 8013a8a:	e7da      	b.n	8013a42 <uxr_serialize_ActivityInfoVariant+0x96>
 8013a8c:	2202      	movs	r2, #2
 8013a8e:	4639      	mov	r1, r7
 8013a90:	4630      	mov	r0, r6
 8013a92:	f7fb fb47 	bl	800f124 <ucdr_serialize_array_uint8_t>
 8013a96:	78b9      	ldrb	r1, [r7, #2]
 8013a98:	4604      	mov	r4, r0
 8013a9a:	4630      	mov	r0, r6
 8013a9c:	f7fb fe38 	bl	800f710 <ucdr_serialize_uint8_t>
 8013aa0:	4020      	ands	r0, r4
 8013aa2:	b2c0      	uxtb	r0, r0
 8013aa4:	e7cd      	b.n	8013a42 <uxr_serialize_ActivityInfoVariant+0x96>
 8013aa6:	68eb      	ldr	r3, [r5, #12]
 8013aa8:	f108 0801 	add.w	r8, r8, #1
 8013aac:	4598      	cmp	r8, r3
 8013aae:	d308      	bcc.n	8013ac2 <uxr_serialize_ActivityInfoVariant+0x116>
 8013ab0:	ea09 0000 	and.w	r0, r9, r0
 8013ab4:	b2c0      	uxtb	r0, r0
 8013ab6:	e788      	b.n	80139ca <uxr_serialize_ActivityInfoVariant+0x1e>
 8013ab8:	ea09 0900 	and.w	r9, r9, r0
 8013abc:	fa5f f089 	uxtb.w	r0, r9
 8013ac0:	e783      	b.n	80139ca <uxr_serialize_ActivityInfoVariant+0x1e>
 8013ac2:	3718      	adds	r7, #24
 8013ac4:	e7ab      	b.n	8013a1e <uxr_serialize_ActivityInfoVariant+0x72>
 8013ac6:	bf00      	nop

08013ac8 <uxr_deserialize_BaseObjectReply>:
 8013ac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013acc:	2202      	movs	r2, #2
 8013ace:	4606      	mov	r6, r0
 8013ad0:	460f      	mov	r7, r1
 8013ad2:	f7fb fb8b 	bl	800f1ec <ucdr_deserialize_array_uint8_t>
 8013ad6:	2202      	movs	r2, #2
 8013ad8:	18b9      	adds	r1, r7, r2
 8013ada:	4605      	mov	r5, r0
 8013adc:	4630      	mov	r0, r6
 8013ade:	f7fb fb85 	bl	800f1ec <ucdr_deserialize_array_uint8_t>
 8013ae2:	1d39      	adds	r1, r7, #4
 8013ae4:	4680      	mov	r8, r0
 8013ae6:	4630      	mov	r0, r6
 8013ae8:	f7fb fe28 	bl	800f73c <ucdr_deserialize_uint8_t>
 8013aec:	1d79      	adds	r1, r7, #5
 8013aee:	4604      	mov	r4, r0
 8013af0:	4630      	mov	r0, r6
 8013af2:	f7fb fe23 	bl	800f73c <ucdr_deserialize_uint8_t>
 8013af6:	ea05 0508 	and.w	r5, r5, r8
 8013afa:	402c      	ands	r4, r5
 8013afc:	4020      	ands	r0, r4
 8013afe:	b2c0      	uxtb	r0, r0
 8013b00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013b04 <uxr_serialize_ReadSpecification>:
 8013b04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b08:	460d      	mov	r5, r1
 8013b0a:	7809      	ldrb	r1, [r1, #0]
 8013b0c:	4606      	mov	r6, r0
 8013b0e:	f7fb fdff 	bl	800f710 <ucdr_serialize_uint8_t>
 8013b12:	7869      	ldrb	r1, [r5, #1]
 8013b14:	4604      	mov	r4, r0
 8013b16:	4630      	mov	r0, r6
 8013b18:	f7fb fdfa 	bl	800f710 <ucdr_serialize_uint8_t>
 8013b1c:	78a9      	ldrb	r1, [r5, #2]
 8013b1e:	4004      	ands	r4, r0
 8013b20:	4630      	mov	r0, r6
 8013b22:	f7fb fdc7 	bl	800f6b4 <ucdr_serialize_bool>
 8013b26:	78ab      	ldrb	r3, [r5, #2]
 8013b28:	b2e4      	uxtb	r4, r4
 8013b2a:	4004      	ands	r4, r0
 8013b2c:	b94b      	cbnz	r3, 8013b42 <uxr_serialize_ReadSpecification+0x3e>
 8013b2e:	7a29      	ldrb	r1, [r5, #8]
 8013b30:	4630      	mov	r0, r6
 8013b32:	f7fb fdbf 	bl	800f6b4 <ucdr_serialize_bool>
 8013b36:	7a2b      	ldrb	r3, [r5, #8]
 8013b38:	4004      	ands	r4, r0
 8013b3a:	b943      	cbnz	r3, 8013b4e <uxr_serialize_ReadSpecification+0x4a>
 8013b3c:	4620      	mov	r0, r4
 8013b3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013b42:	6869      	ldr	r1, [r5, #4]
 8013b44:	4630      	mov	r0, r6
 8013b46:	f006 fa0f 	bl	8019f68 <ucdr_serialize_string>
 8013b4a:	4004      	ands	r4, r0
 8013b4c:	e7ef      	b.n	8013b2e <uxr_serialize_ReadSpecification+0x2a>
 8013b4e:	8969      	ldrh	r1, [r5, #10]
 8013b50:	4630      	mov	r0, r6
 8013b52:	f7fb fe09 	bl	800f768 <ucdr_serialize_uint16_t>
 8013b56:	89a9      	ldrh	r1, [r5, #12]
 8013b58:	4607      	mov	r7, r0
 8013b5a:	4630      	mov	r0, r6
 8013b5c:	f7fb fe04 	bl	800f768 <ucdr_serialize_uint16_t>
 8013b60:	89e9      	ldrh	r1, [r5, #14]
 8013b62:	4007      	ands	r7, r0
 8013b64:	4630      	mov	r0, r6
 8013b66:	f7fb fdff 	bl	800f768 <ucdr_serialize_uint16_t>
 8013b6a:	8a29      	ldrh	r1, [r5, #16]
 8013b6c:	4680      	mov	r8, r0
 8013b6e:	4630      	mov	r0, r6
 8013b70:	f7fb fdfa 	bl	800f768 <ucdr_serialize_uint16_t>
 8013b74:	b2ff      	uxtb	r7, r7
 8013b76:	ea04 0507 	and.w	r5, r4, r7
 8013b7a:	ea05 0508 	and.w	r5, r5, r8
 8013b7e:	ea00 0405 	and.w	r4, r0, r5
 8013b82:	4620      	mov	r0, r4
 8013b84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013b88 <uxr_serialize_CREATE_CLIENT_Payload>:
 8013b88:	f7ff ba0a 	b.w	8012fa0 <uxr_serialize_CLIENT_Representation>

08013b8c <uxr_serialize_CREATE_Payload>:
 8013b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013b8e:	2202      	movs	r2, #2
 8013b90:	4606      	mov	r6, r0
 8013b92:	460d      	mov	r5, r1
 8013b94:	f7fb fac6 	bl	800f124 <ucdr_serialize_array_uint8_t>
 8013b98:	2202      	movs	r2, #2
 8013b9a:	18a9      	adds	r1, r5, r2
 8013b9c:	4604      	mov	r4, r0
 8013b9e:	4630      	mov	r0, r6
 8013ba0:	f7fb fac0 	bl	800f124 <ucdr_serialize_array_uint8_t>
 8013ba4:	7929      	ldrb	r1, [r5, #4]
 8013ba6:	4607      	mov	r7, r0
 8013ba8:	4630      	mov	r0, r6
 8013baa:	f7fb fdb1 	bl	800f710 <ucdr_serialize_uint8_t>
 8013bae:	b170      	cbz	r0, 8013bce <uxr_serialize_CREATE_Payload+0x42>
 8013bb0:	792b      	ldrb	r3, [r5, #4]
 8013bb2:	403c      	ands	r4, r7
 8013bb4:	3b01      	subs	r3, #1
 8013bb6:	b2e4      	uxtb	r4, r4
 8013bb8:	2b0d      	cmp	r3, #13
 8013bba:	d809      	bhi.n	8013bd0 <uxr_serialize_CREATE_Payload+0x44>
 8013bbc:	e8df f003 	tbb	[pc, r3]
 8013bc0:	23230a3e 	.word	0x23230a3e
 8013bc4:	0a0a0a0a 	.word	0x0a0a0a0a
 8013bc8:	12121208 	.word	0x12121208
 8013bcc:	5f58      	.short	0x5f58
 8013bce:	2400      	movs	r4, #0
 8013bd0:	4620      	mov	r0, r4
 8013bd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013bd4:	f105 0108 	add.w	r1, r5, #8
 8013bd8:	4630      	mov	r0, r6
 8013bda:	f7ff fae9 	bl	80131b0 <uxr_serialize_DATAWRITER_Representation>
 8013bde:	4004      	ands	r4, r0
 8013be0:	4620      	mov	r0, r4
 8013be2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013be4:	7a29      	ldrb	r1, [r5, #8]
 8013be6:	4630      	mov	r0, r6
 8013be8:	f7fb fd92 	bl	800f710 <ucdr_serialize_uint8_t>
 8013bec:	2800      	cmp	r0, #0
 8013bee:	d0ee      	beq.n	8013bce <uxr_serialize_CREATE_Payload+0x42>
 8013bf0:	7a2b      	ldrb	r3, [r5, #8]
 8013bf2:	2b01      	cmp	r3, #1
 8013bf4:	d001      	beq.n	8013bfa <uxr_serialize_CREATE_Payload+0x6e>
 8013bf6:	2b02      	cmp	r3, #2
 8013bf8:	d1ea      	bne.n	8013bd0 <uxr_serialize_CREATE_Payload+0x44>
 8013bfa:	68e9      	ldr	r1, [r5, #12]
 8013bfc:	4630      	mov	r0, r6
 8013bfe:	f006 f9b3 	bl	8019f68 <ucdr_serialize_string>
 8013c02:	4004      	ands	r4, r0
 8013c04:	e7e4      	b.n	8013bd0 <uxr_serialize_CREATE_Payload+0x44>
 8013c06:	7a29      	ldrb	r1, [r5, #8]
 8013c08:	4630      	mov	r0, r6
 8013c0a:	f7fb fd81 	bl	800f710 <ucdr_serialize_uint8_t>
 8013c0e:	4607      	mov	r7, r0
 8013c10:	b158      	cbz	r0, 8013c2a <uxr_serialize_CREATE_Payload+0x9e>
 8013c12:	7a2b      	ldrb	r3, [r5, #8]
 8013c14:	2b02      	cmp	r3, #2
 8013c16:	d039      	beq.n	8013c8c <uxr_serialize_CREATE_Payload+0x100>
 8013c18:	2b03      	cmp	r3, #3
 8013c1a:	d106      	bne.n	8013c2a <uxr_serialize_CREATE_Payload+0x9e>
 8013c1c:	68ea      	ldr	r2, [r5, #12]
 8013c1e:	f105 0110 	add.w	r1, r5, #16
 8013c22:	4630      	mov	r0, r6
 8013c24:	f7fd fb76 	bl	8011314 <ucdr_serialize_sequence_uint8_t>
 8013c28:	4607      	mov	r7, r0
 8013c2a:	2202      	movs	r2, #2
 8013c2c:	f505 7104 	add.w	r1, r5, #528	@ 0x210
 8013c30:	4630      	mov	r0, r6
 8013c32:	f7fb fa77 	bl	800f124 <ucdr_serialize_array_uint8_t>
 8013c36:	4038      	ands	r0, r7
 8013c38:	4004      	ands	r4, r0
 8013c3a:	e7c9      	b.n	8013bd0 <uxr_serialize_CREATE_Payload+0x44>
 8013c3c:	7a29      	ldrb	r1, [r5, #8]
 8013c3e:	4630      	mov	r0, r6
 8013c40:	f7fb fd66 	bl	800f710 <ucdr_serialize_uint8_t>
 8013c44:	4607      	mov	r7, r0
 8013c46:	b158      	cbz	r0, 8013c60 <uxr_serialize_CREATE_Payload+0xd4>
 8013c48:	7a2b      	ldrb	r3, [r5, #8]
 8013c4a:	2b02      	cmp	r3, #2
 8013c4c:	d003      	beq.n	8013c56 <uxr_serialize_CREATE_Payload+0xca>
 8013c4e:	2b03      	cmp	r3, #3
 8013c50:	d022      	beq.n	8013c98 <uxr_serialize_CREATE_Payload+0x10c>
 8013c52:	2b01      	cmp	r3, #1
 8013c54:	d104      	bne.n	8013c60 <uxr_serialize_CREATE_Payload+0xd4>
 8013c56:	68e9      	ldr	r1, [r5, #12]
 8013c58:	4630      	mov	r0, r6
 8013c5a:	f006 f985 	bl	8019f68 <ucdr_serialize_string>
 8013c5e:	4607      	mov	r7, r0
 8013c60:	f9b5 1210 	ldrsh.w	r1, [r5, #528]	@ 0x210
 8013c64:	4630      	mov	r0, r6
 8013c66:	f7fc fa7b 	bl	8010160 <ucdr_serialize_int16_t>
 8013c6a:	4038      	ands	r0, r7
 8013c6c:	4004      	ands	r4, r0
 8013c6e:	e7af      	b.n	8013bd0 <uxr_serialize_CREATE_Payload+0x44>
 8013c70:	f105 0108 	add.w	r1, r5, #8
 8013c74:	4630      	mov	r0, r6
 8013c76:	f7ff fa51 	bl	801311c <uxr_serialize_AGENT_Representation>
 8013c7a:	4004      	ands	r4, r0
 8013c7c:	e7a8      	b.n	8013bd0 <uxr_serialize_CREATE_Payload+0x44>
 8013c7e:	f105 0108 	add.w	r1, r5, #8
 8013c82:	4630      	mov	r0, r6
 8013c84:	f7ff f98c 	bl	8012fa0 <uxr_serialize_CLIENT_Representation>
 8013c88:	4004      	ands	r4, r0
 8013c8a:	e7a1      	b.n	8013bd0 <uxr_serialize_CREATE_Payload+0x44>
 8013c8c:	68e9      	ldr	r1, [r5, #12]
 8013c8e:	4630      	mov	r0, r6
 8013c90:	f006 f96a 	bl	8019f68 <ucdr_serialize_string>
 8013c94:	4607      	mov	r7, r0
 8013c96:	e7c8      	b.n	8013c2a <uxr_serialize_CREATE_Payload+0x9e>
 8013c98:	68ea      	ldr	r2, [r5, #12]
 8013c9a:	f105 0110 	add.w	r1, r5, #16
 8013c9e:	4630      	mov	r0, r6
 8013ca0:	f7fd fb38 	bl	8011314 <ucdr_serialize_sequence_uint8_t>
 8013ca4:	4607      	mov	r7, r0
 8013ca6:	e7db      	b.n	8013c60 <uxr_serialize_CREATE_Payload+0xd4>

08013ca8 <uxr_deserialize_GET_INFO_Payload>:
 8013ca8:	b570      	push	{r4, r5, r6, lr}
 8013caa:	2202      	movs	r2, #2
 8013cac:	4605      	mov	r5, r0
 8013cae:	460e      	mov	r6, r1
 8013cb0:	f7fb fa9c 	bl	800f1ec <ucdr_deserialize_array_uint8_t>
 8013cb4:	2202      	movs	r2, #2
 8013cb6:	18b1      	adds	r1, r6, r2
 8013cb8:	4604      	mov	r4, r0
 8013cba:	4628      	mov	r0, r5
 8013cbc:	f7fb fa96 	bl	800f1ec <ucdr_deserialize_array_uint8_t>
 8013cc0:	1d31      	adds	r1, r6, #4
 8013cc2:	4004      	ands	r4, r0
 8013cc4:	4628      	mov	r0, r5
 8013cc6:	f7fc f869 	bl	800fd9c <ucdr_deserialize_uint32_t>
 8013cca:	b2e4      	uxtb	r4, r4
 8013ccc:	4020      	ands	r0, r4
 8013cce:	bd70      	pop	{r4, r5, r6, pc}

08013cd0 <uxr_serialize_DELETE_Payload>:
 8013cd0:	b570      	push	{r4, r5, r6, lr}
 8013cd2:	2202      	movs	r2, #2
 8013cd4:	4605      	mov	r5, r0
 8013cd6:	460e      	mov	r6, r1
 8013cd8:	f7fb fa24 	bl	800f124 <ucdr_serialize_array_uint8_t>
 8013cdc:	2202      	movs	r2, #2
 8013cde:	4604      	mov	r4, r0
 8013ce0:	18b1      	adds	r1, r6, r2
 8013ce2:	4628      	mov	r0, r5
 8013ce4:	f7fb fa1e 	bl	800f124 <ucdr_serialize_array_uint8_t>
 8013ce8:	4020      	ands	r0, r4
 8013cea:	b2c0      	uxtb	r0, r0
 8013cec:	bd70      	pop	{r4, r5, r6, pc}
 8013cee:	bf00      	nop

08013cf0 <uxr_deserialize_STATUS_AGENT_Payload>:
 8013cf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013cf4:	4605      	mov	r5, r0
 8013cf6:	460e      	mov	r6, r1
 8013cf8:	f7fb fd20 	bl	800f73c <ucdr_deserialize_uint8_t>
 8013cfc:	1c71      	adds	r1, r6, #1
 8013cfe:	4604      	mov	r4, r0
 8013d00:	4628      	mov	r0, r5
 8013d02:	f7fb fd1b 	bl	800f73c <ucdr_deserialize_uint8_t>
 8013d06:	2204      	movs	r2, #4
 8013d08:	18b1      	adds	r1, r6, r2
 8013d0a:	4681      	mov	r9, r0
 8013d0c:	4628      	mov	r0, r5
 8013d0e:	f7fb fa6d 	bl	800f1ec <ucdr_deserialize_array_uint8_t>
 8013d12:	f106 0108 	add.w	r1, r6, #8
 8013d16:	4680      	mov	r8, r0
 8013d18:	2202      	movs	r2, #2
 8013d1a:	4628      	mov	r0, r5
 8013d1c:	f7fb fa66 	bl	800f1ec <ucdr_deserialize_array_uint8_t>
 8013d20:	2202      	movs	r2, #2
 8013d22:	f106 010a 	add.w	r1, r6, #10
 8013d26:	4607      	mov	r7, r0
 8013d28:	4628      	mov	r0, r5
 8013d2a:	f7fb fa5f 	bl	800f1ec <ucdr_deserialize_array_uint8_t>
 8013d2e:	ea04 0409 	and.w	r4, r4, r9
 8013d32:	4603      	mov	r3, r0
 8013d34:	f106 010c 	add.w	r1, r6, #12
 8013d38:	4628      	mov	r0, r5
 8013d3a:	b2e4      	uxtb	r4, r4
 8013d3c:	461d      	mov	r5, r3
 8013d3e:	ea04 0408 	and.w	r4, r4, r8
 8013d42:	f7fb fccd 	bl	800f6e0 <ucdr_deserialize_bool>
 8013d46:	4027      	ands	r7, r4
 8013d48:	403d      	ands	r5, r7
 8013d4a:	4028      	ands	r0, r5
 8013d4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08013d50 <uxr_deserialize_STATUS_Payload>:
 8013d50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d54:	2202      	movs	r2, #2
 8013d56:	4606      	mov	r6, r0
 8013d58:	460f      	mov	r7, r1
 8013d5a:	f7fb fa47 	bl	800f1ec <ucdr_deserialize_array_uint8_t>
 8013d5e:	2202      	movs	r2, #2
 8013d60:	18b9      	adds	r1, r7, r2
 8013d62:	4605      	mov	r5, r0
 8013d64:	4630      	mov	r0, r6
 8013d66:	f7fb fa41 	bl	800f1ec <ucdr_deserialize_array_uint8_t>
 8013d6a:	1d39      	adds	r1, r7, #4
 8013d6c:	4680      	mov	r8, r0
 8013d6e:	4630      	mov	r0, r6
 8013d70:	f7fb fce4 	bl	800f73c <ucdr_deserialize_uint8_t>
 8013d74:	1d79      	adds	r1, r7, #5
 8013d76:	4604      	mov	r4, r0
 8013d78:	4630      	mov	r0, r6
 8013d7a:	f7fb fcdf 	bl	800f73c <ucdr_deserialize_uint8_t>
 8013d7e:	ea05 0508 	and.w	r5, r5, r8
 8013d82:	402c      	ands	r4, r5
 8013d84:	4020      	ands	r0, r4
 8013d86:	b2c0      	uxtb	r0, r0
 8013d88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013d8c <uxr_serialize_INFO_Payload>:
 8013d8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d90:	2202      	movs	r2, #2
 8013d92:	460c      	mov	r4, r1
 8013d94:	4605      	mov	r5, r0
 8013d96:	f7fb f9c5 	bl	800f124 <ucdr_serialize_array_uint8_t>
 8013d9a:	2202      	movs	r2, #2
 8013d9c:	18a1      	adds	r1, r4, r2
 8013d9e:	4680      	mov	r8, r0
 8013da0:	4628      	mov	r0, r5
 8013da2:	f7fb f9bf 	bl	800f124 <ucdr_serialize_array_uint8_t>
 8013da6:	7921      	ldrb	r1, [r4, #4]
 8013da8:	4607      	mov	r7, r0
 8013daa:	4628      	mov	r0, r5
 8013dac:	f7fb fcb0 	bl	800f710 <ucdr_serialize_uint8_t>
 8013db0:	7961      	ldrb	r1, [r4, #5]
 8013db2:	4606      	mov	r6, r0
 8013db4:	4628      	mov	r0, r5
 8013db6:	f7fb fcab 	bl	800f710 <ucdr_serialize_uint8_t>
 8013dba:	ea08 0807 	and.w	r8, r8, r7
 8013dbe:	ea06 0608 	and.w	r6, r6, r8
 8013dc2:	ea00 0706 	and.w	r7, r0, r6
 8013dc6:	7a21      	ldrb	r1, [r4, #8]
 8013dc8:	4628      	mov	r0, r5
 8013dca:	f7fb fc73 	bl	800f6b4 <ucdr_serialize_bool>
 8013dce:	7a23      	ldrb	r3, [r4, #8]
 8013dd0:	b2ff      	uxtb	r7, r7
 8013dd2:	4606      	mov	r6, r0
 8013dd4:	b96b      	cbnz	r3, 8013df2 <uxr_serialize_INFO_Payload+0x66>
 8013dd6:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 8013dda:	4628      	mov	r0, r5
 8013ddc:	f7fb fc6a 	bl	800f6b4 <ucdr_serialize_bool>
 8013de0:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 8013de4:	4030      	ands	r0, r6
 8013de6:	b2c6      	uxtb	r6, r0
 8013de8:	b983      	cbnz	r3, 8013e0c <uxr_serialize_INFO_Payload+0x80>
 8013dea:	ea06 0007 	and.w	r0, r6, r7
 8013dee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013df2:	7b21      	ldrb	r1, [r4, #12]
 8013df4:	4628      	mov	r0, r5
 8013df6:	f7fb fc8b 	bl	800f710 <ucdr_serialize_uint8_t>
 8013dfa:	b188      	cbz	r0, 8013e20 <uxr_serialize_INFO_Payload+0x94>
 8013dfc:	f104 010c 	add.w	r1, r4, #12
 8013e00:	4628      	mov	r0, r5
 8013e02:	f7ff f9fd 	bl	8013200 <uxr_serialize_ObjectVariant.part.0>
 8013e06:	4030      	ands	r0, r6
 8013e08:	b2c6      	uxtb	r6, r0
 8013e0a:	e7e4      	b.n	8013dd6 <uxr_serialize_INFO_Payload+0x4a>
 8013e0c:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 8013e10:	4628      	mov	r0, r5
 8013e12:	f7ff fdcb 	bl	80139ac <uxr_serialize_ActivityInfoVariant>
 8013e16:	4006      	ands	r6, r0
 8013e18:	ea06 0007 	and.w	r0, r6, r7
 8013e1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e20:	4606      	mov	r6, r0
 8013e22:	e7d8      	b.n	8013dd6 <uxr_serialize_INFO_Payload+0x4a>

08013e24 <uxr_serialize_READ_DATA_Payload>:
 8013e24:	b570      	push	{r4, r5, r6, lr}
 8013e26:	2202      	movs	r2, #2
 8013e28:	4605      	mov	r5, r0
 8013e2a:	460e      	mov	r6, r1
 8013e2c:	f7fb f97a 	bl	800f124 <ucdr_serialize_array_uint8_t>
 8013e30:	2202      	movs	r2, #2
 8013e32:	18b1      	adds	r1, r6, r2
 8013e34:	4604      	mov	r4, r0
 8013e36:	4628      	mov	r0, r5
 8013e38:	f7fb f974 	bl	800f124 <ucdr_serialize_array_uint8_t>
 8013e3c:	1d31      	adds	r1, r6, #4
 8013e3e:	4004      	ands	r4, r0
 8013e40:	4628      	mov	r0, r5
 8013e42:	f7ff fe5f 	bl	8013b04 <uxr_serialize_ReadSpecification>
 8013e46:	b2e4      	uxtb	r4, r4
 8013e48:	4020      	ands	r0, r4
 8013e4a:	bd70      	pop	{r4, r5, r6, pc}

08013e4c <uxr_serialize_WRITE_DATA_Payload_Data>:
 8013e4c:	b570      	push	{r4, r5, r6, lr}
 8013e4e:	2202      	movs	r2, #2
 8013e50:	4605      	mov	r5, r0
 8013e52:	460e      	mov	r6, r1
 8013e54:	f7fb f966 	bl	800f124 <ucdr_serialize_array_uint8_t>
 8013e58:	2202      	movs	r2, #2
 8013e5a:	4604      	mov	r4, r0
 8013e5c:	18b1      	adds	r1, r6, r2
 8013e5e:	4628      	mov	r0, r5
 8013e60:	f7fb f960 	bl	800f124 <ucdr_serialize_array_uint8_t>
 8013e64:	4020      	ands	r0, r4
 8013e66:	b2c0      	uxtb	r0, r0
 8013e68:	bd70      	pop	{r4, r5, r6, pc}
 8013e6a:	bf00      	nop

08013e6c <uxr_serialize_ACKNACK_Payload>:
 8013e6c:	b570      	push	{r4, r5, r6, lr}
 8013e6e:	460c      	mov	r4, r1
 8013e70:	460e      	mov	r6, r1
 8013e72:	f834 1b02 	ldrh.w	r1, [r4], #2
 8013e76:	4605      	mov	r5, r0
 8013e78:	f7fb fc76 	bl	800f768 <ucdr_serialize_uint16_t>
 8013e7c:	2202      	movs	r2, #2
 8013e7e:	4621      	mov	r1, r4
 8013e80:	4604      	mov	r4, r0
 8013e82:	4628      	mov	r0, r5
 8013e84:	f7fb f94e 	bl	800f124 <ucdr_serialize_array_uint8_t>
 8013e88:	7931      	ldrb	r1, [r6, #4]
 8013e8a:	4004      	ands	r4, r0
 8013e8c:	4628      	mov	r0, r5
 8013e8e:	f7fb fc3f 	bl	800f710 <ucdr_serialize_uint8_t>
 8013e92:	b2e4      	uxtb	r4, r4
 8013e94:	4020      	ands	r0, r4
 8013e96:	bd70      	pop	{r4, r5, r6, pc}

08013e98 <uxr_deserialize_ACKNACK_Payload>:
 8013e98:	b570      	push	{r4, r5, r6, lr}
 8013e9a:	4605      	mov	r5, r0
 8013e9c:	460e      	mov	r6, r1
 8013e9e:	f7fb fd67 	bl	800f970 <ucdr_deserialize_uint16_t>
 8013ea2:	2202      	movs	r2, #2
 8013ea4:	18b1      	adds	r1, r6, r2
 8013ea6:	4604      	mov	r4, r0
 8013ea8:	4628      	mov	r0, r5
 8013eaa:	f7fb f99f 	bl	800f1ec <ucdr_deserialize_array_uint8_t>
 8013eae:	1d31      	adds	r1, r6, #4
 8013eb0:	4004      	ands	r4, r0
 8013eb2:	4628      	mov	r0, r5
 8013eb4:	f7fb fc42 	bl	800f73c <ucdr_deserialize_uint8_t>
 8013eb8:	b2e4      	uxtb	r4, r4
 8013eba:	4020      	ands	r0, r4
 8013ebc:	bd70      	pop	{r4, r5, r6, pc}
 8013ebe:	bf00      	nop

08013ec0 <uxr_serialize_HEARTBEAT_Payload>:
 8013ec0:	b570      	push	{r4, r5, r6, lr}
 8013ec2:	460d      	mov	r5, r1
 8013ec4:	8809      	ldrh	r1, [r1, #0]
 8013ec6:	4606      	mov	r6, r0
 8013ec8:	f7fb fc4e 	bl	800f768 <ucdr_serialize_uint16_t>
 8013ecc:	8869      	ldrh	r1, [r5, #2]
 8013ece:	4604      	mov	r4, r0
 8013ed0:	4630      	mov	r0, r6
 8013ed2:	f7fb fc49 	bl	800f768 <ucdr_serialize_uint16_t>
 8013ed6:	7929      	ldrb	r1, [r5, #4]
 8013ed8:	4004      	ands	r4, r0
 8013eda:	4630      	mov	r0, r6
 8013edc:	f7fb fc18 	bl	800f710 <ucdr_serialize_uint8_t>
 8013ee0:	b2e4      	uxtb	r4, r4
 8013ee2:	4020      	ands	r0, r4
 8013ee4:	bd70      	pop	{r4, r5, r6, pc}
 8013ee6:	bf00      	nop

08013ee8 <uxr_deserialize_HEARTBEAT_Payload>:
 8013ee8:	b570      	push	{r4, r5, r6, lr}
 8013eea:	4605      	mov	r5, r0
 8013eec:	460e      	mov	r6, r1
 8013eee:	f7fb fd3f 	bl	800f970 <ucdr_deserialize_uint16_t>
 8013ef2:	1cb1      	adds	r1, r6, #2
 8013ef4:	4604      	mov	r4, r0
 8013ef6:	4628      	mov	r0, r5
 8013ef8:	f7fb fd3a 	bl	800f970 <ucdr_deserialize_uint16_t>
 8013efc:	1d31      	adds	r1, r6, #4
 8013efe:	4004      	ands	r4, r0
 8013f00:	4628      	mov	r0, r5
 8013f02:	f7fb fc1b 	bl	800f73c <ucdr_deserialize_uint8_t>
 8013f06:	b2e4      	uxtb	r4, r4
 8013f08:	4020      	ands	r0, r4
 8013f0a:	bd70      	pop	{r4, r5, r6, pc}

08013f0c <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 8013f0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013f10:	4605      	mov	r5, r0
 8013f12:	460e      	mov	r6, r1
 8013f14:	f7fc fac4 	bl	80104a0 <ucdr_deserialize_int32_t>
 8013f18:	1d31      	adds	r1, r6, #4
 8013f1a:	4607      	mov	r7, r0
 8013f1c:	4628      	mov	r0, r5
 8013f1e:	f7fb ff3d 	bl	800fd9c <ucdr_deserialize_uint32_t>
 8013f22:	f106 0108 	add.w	r1, r6, #8
 8013f26:	4680      	mov	r8, r0
 8013f28:	4628      	mov	r0, r5
 8013f2a:	f7fc fab9 	bl	80104a0 <ucdr_deserialize_int32_t>
 8013f2e:	f106 010c 	add.w	r1, r6, #12
 8013f32:	4604      	mov	r4, r0
 8013f34:	4628      	mov	r0, r5
 8013f36:	f7fb ff31 	bl	800fd9c <ucdr_deserialize_uint32_t>
 8013f3a:	ea07 0708 	and.w	r7, r7, r8
 8013f3e:	403c      	ands	r4, r7
 8013f40:	f106 0110 	add.w	r1, r6, #16
 8013f44:	4004      	ands	r4, r0
 8013f46:	4628      	mov	r0, r5
 8013f48:	f7fc faaa 	bl	80104a0 <ucdr_deserialize_int32_t>
 8013f4c:	f106 0114 	add.w	r1, r6, #20
 8013f50:	4607      	mov	r7, r0
 8013f52:	4628      	mov	r0, r5
 8013f54:	f7fb ff22 	bl	800fd9c <ucdr_deserialize_uint32_t>
 8013f58:	b2e4      	uxtb	r4, r4
 8013f5a:	403c      	ands	r4, r7
 8013f5c:	4020      	ands	r0, r4
 8013f5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013f62:	bf00      	nop

08013f64 <uxr_serialize_SampleIdentity>:
 8013f64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013f68:	220c      	movs	r2, #12
 8013f6a:	4604      	mov	r4, r0
 8013f6c:	460d      	mov	r5, r1
 8013f6e:	f7fb f8d9 	bl	800f124 <ucdr_serialize_array_uint8_t>
 8013f72:	2203      	movs	r2, #3
 8013f74:	f105 010c 	add.w	r1, r5, #12
 8013f78:	4680      	mov	r8, r0
 8013f7a:	4620      	mov	r0, r4
 8013f7c:	f7fb f8d2 	bl	800f124 <ucdr_serialize_array_uint8_t>
 8013f80:	7be9      	ldrb	r1, [r5, #15]
 8013f82:	4681      	mov	r9, r0
 8013f84:	4620      	mov	r0, r4
 8013f86:	f7fb fbc3 	bl	800f710 <ucdr_serialize_uint8_t>
 8013f8a:	6929      	ldr	r1, [r5, #16]
 8013f8c:	4607      	mov	r7, r0
 8013f8e:	4620      	mov	r0, r4
 8013f90:	f7fc f9ec 	bl	801036c <ucdr_serialize_int32_t>
 8013f94:	6969      	ldr	r1, [r5, #20]
 8013f96:	4606      	mov	r6, r0
 8013f98:	4620      	mov	r0, r4
 8013f9a:	f7fb fdd5 	bl	800fb48 <ucdr_serialize_uint32_t>
 8013f9e:	ea08 0809 	and.w	r8, r8, r9
 8013fa2:	ea07 0708 	and.w	r7, r7, r8
 8013fa6:	403e      	ands	r6, r7
 8013fa8:	4030      	ands	r0, r6
 8013faa:	b2c0      	uxtb	r0, r0
 8013fac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08013fb0 <uxr_deserialize_SampleIdentity>:
 8013fb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013fb4:	220c      	movs	r2, #12
 8013fb6:	4604      	mov	r4, r0
 8013fb8:	460d      	mov	r5, r1
 8013fba:	f7fb f917 	bl	800f1ec <ucdr_deserialize_array_uint8_t>
 8013fbe:	2203      	movs	r2, #3
 8013fc0:	f105 010c 	add.w	r1, r5, #12
 8013fc4:	4680      	mov	r8, r0
 8013fc6:	4620      	mov	r0, r4
 8013fc8:	f7fb f910 	bl	800f1ec <ucdr_deserialize_array_uint8_t>
 8013fcc:	f105 010f 	add.w	r1, r5, #15
 8013fd0:	4681      	mov	r9, r0
 8013fd2:	4620      	mov	r0, r4
 8013fd4:	f7fb fbb2 	bl	800f73c <ucdr_deserialize_uint8_t>
 8013fd8:	f105 0110 	add.w	r1, r5, #16
 8013fdc:	4607      	mov	r7, r0
 8013fde:	4620      	mov	r0, r4
 8013fe0:	f7fc fa5e 	bl	80104a0 <ucdr_deserialize_int32_t>
 8013fe4:	f105 0114 	add.w	r1, r5, #20
 8013fe8:	4606      	mov	r6, r0
 8013fea:	4620      	mov	r0, r4
 8013fec:	f7fb fed6 	bl	800fd9c <ucdr_deserialize_uint32_t>
 8013ff0:	ea08 0809 	and.w	r8, r8, r9
 8013ff4:	ea07 0708 	and.w	r7, r7, r8
 8013ff8:	403e      	ands	r6, r7
 8013ffa:	4030      	ands	r0, r6
 8013ffc:	b2c0      	uxtb	r0, r0
 8013ffe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014002:	bf00      	nop

08014004 <nereo_interfaces__msg__CommandVelocity__get_type_hash>:
 8014004:	4800      	ldr	r0, [pc, #0]	@ (8014008 <nereo_interfaces__msg__CommandVelocity__get_type_hash+0x4>)
 8014006:	4770      	bx	lr
 8014008:	20001010 	.word	0x20001010

0801400c <nereo_interfaces__msg__CommandVelocity__get_type_description>:
 801400c:	4b03      	ldr	r3, [pc, #12]	@ (801401c <nereo_interfaces__msg__CommandVelocity__get_type_description+0x10>)
 801400e:	781a      	ldrb	r2, [r3, #0]
 8014010:	b90a      	cbnz	r2, 8014016 <nereo_interfaces__msg__CommandVelocity__get_type_description+0xa>
 8014012:	2201      	movs	r2, #1
 8014014:	701a      	strb	r2, [r3, #0]
 8014016:	4802      	ldr	r0, [pc, #8]	@ (8014020 <nereo_interfaces__msg__CommandVelocity__get_type_description+0x14>)
 8014018:	4770      	bx	lr
 801401a:	bf00      	nop
 801401c:	2001932d 	.word	0x2001932d
 8014020:	0801ff94 	.word	0x0801ff94

08014024 <nereo_interfaces__msg__CommandVelocity__get_type_description_sources>:
 8014024:	4b09      	ldr	r3, [pc, #36]	@ (801404c <nereo_interfaces__msg__CommandVelocity__get_type_description_sources+0x28>)
 8014026:	781a      	ldrb	r2, [r3, #0]
 8014028:	b96a      	cbnz	r2, 8014046 <nereo_interfaces__msg__CommandVelocity__get_type_description_sources+0x22>
 801402a:	b430      	push	{r4, r5}
 801402c:	4d08      	ldr	r5, [pc, #32]	@ (8014050 <nereo_interfaces__msg__CommandVelocity__get_type_description_sources+0x2c>)
 801402e:	4c09      	ldr	r4, [pc, #36]	@ (8014054 <nereo_interfaces__msg__CommandVelocity__get_type_description_sources+0x30>)
 8014030:	2201      	movs	r2, #1
 8014032:	701a      	strb	r2, [r3, #0]
 8014034:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014036:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014038:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801403a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801403c:	682b      	ldr	r3, [r5, #0]
 801403e:	4806      	ldr	r0, [pc, #24]	@ (8014058 <nereo_interfaces__msg__CommandVelocity__get_type_description_sources+0x34>)
 8014040:	6023      	str	r3, [r4, #0]
 8014042:	bc30      	pop	{r4, r5}
 8014044:	4770      	bx	lr
 8014046:	4804      	ldr	r0, [pc, #16]	@ (8014058 <nereo_interfaces__msg__CommandVelocity__get_type_description_sources+0x34>)
 8014048:	4770      	bx	lr
 801404a:	bf00      	nop
 801404c:	2001932c 	.word	0x2001932c
 8014050:	0801ff70 	.word	0x0801ff70
 8014054:	20019308 	.word	0x20019308
 8014058:	0801ff64 	.word	0x0801ff64

0801405c <nereo_interfaces__msg__CommandVelocity__init>:
 801405c:	3800      	subs	r0, #0
 801405e:	bf18      	it	ne
 8014060:	2001      	movne	r0, #1
 8014062:	4770      	bx	lr

08014064 <nereo_interfaces__msg__CommandVelocity__fini>:
 8014064:	4770      	bx	lr
 8014066:	bf00      	nop

08014068 <nereo_interfaces__srv__SetNavigationMode_Event__get_type_description.part.0>:
 8014068:	b510      	push	{r4, lr}
 801406a:	2000      	movs	r0, #0
 801406c:	f005 fece 	bl	8019e0c <builtin_interfaces__msg__Time__get_type_description>
 8014070:	300c      	adds	r0, #12
 8014072:	c807      	ldmia	r0, {r0, r1, r2}
 8014074:	4b12      	ldr	r3, [pc, #72]	@ (80140c0 <nereo_interfaces__srv__SetNavigationMode_Event__get_type_description.part.0+0x58>)
 8014076:	4c13      	ldr	r4, [pc, #76]	@ (80140c4 <nereo_interfaces__srv__SetNavigationMode_Event__get_type_description.part.0+0x5c>)
 8014078:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801407c:	7823      	ldrb	r3, [r4, #0]
 801407e:	b90b      	cbnz	r3, 8014084 <nereo_interfaces__srv__SetNavigationMode_Event__get_type_description.part.0+0x1c>
 8014080:	2301      	movs	r3, #1
 8014082:	7023      	strb	r3, [r4, #0]
 8014084:	4b10      	ldr	r3, [pc, #64]	@ (80140c8 <nereo_interfaces__srv__SetNavigationMode_Event__get_type_description.part.0+0x60>)
 8014086:	4c11      	ldr	r4, [pc, #68]	@ (80140cc <nereo_interfaces__srv__SetNavigationMode_Event__get_type_description.part.0+0x64>)
 8014088:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801408c:	4b10      	ldr	r3, [pc, #64]	@ (80140d0 <nereo_interfaces__srv__SetNavigationMode_Event__get_type_description.part.0+0x68>)
 801408e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8014092:	7823      	ldrb	r3, [r4, #0]
 8014094:	b90b      	cbnz	r3, 801409a <nereo_interfaces__srv__SetNavigationMode_Event__get_type_description.part.0+0x32>
 8014096:	2301      	movs	r3, #1
 8014098:	7023      	strb	r3, [r4, #0]
 801409a:	4b0e      	ldr	r3, [pc, #56]	@ (80140d4 <nereo_interfaces__srv__SetNavigationMode_Event__get_type_description.part.0+0x6c>)
 801409c:	4c0e      	ldr	r4, [pc, #56]	@ (80140d8 <nereo_interfaces__srv__SetNavigationMode_Event__get_type_description.part.0+0x70>)
 801409e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80140a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80140a6:	2000      	movs	r0, #0
 80140a8:	f005 fa6c 	bl	8019584 <service_msgs__msg__ServiceEventInfo__get_type_description>
 80140ac:	300c      	adds	r0, #12
 80140ae:	c807      	ldmia	r0, {r0, r1, r2}
 80140b0:	4b0a      	ldr	r3, [pc, #40]	@ (80140dc <nereo_interfaces__srv__SetNavigationMode_Event__get_type_description.part.0+0x74>)
 80140b2:	3418      	adds	r4, #24
 80140b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80140b8:	2201      	movs	r2, #1
 80140ba:	701a      	strb	r2, [r3, #0]
 80140bc:	bd10      	pop	{r4, pc}
 80140be:	bf00      	nop
 80140c0:	200011dc 	.word	0x200011dc
 80140c4:	20019513 	.word	0x20019513
 80140c8:	080200cc 	.word	0x080200cc
 80140cc:	20019512 	.word	0x20019512
 80140d0:	200011f4 	.word	0x200011f4
 80140d4:	080200a8 	.word	0x080200a8
 80140d8:	2000120c 	.word	0x2000120c
 80140dc:	20019511 	.word	0x20019511

080140e0 <nereo_interfaces__srv__SetNavigationMode__get_type_hash>:
 80140e0:	4800      	ldr	r0, [pc, #0]	@ (80140e4 <nereo_interfaces__srv__SetNavigationMode__get_type_hash+0x4>)
 80140e2:	4770      	bx	lr
 80140e4:	2000115c 	.word	0x2000115c

080140e8 <nereo_interfaces__srv__SetNavigationMode_Request__get_type_hash>:
 80140e8:	4800      	ldr	r0, [pc, #0]	@ (80140ec <nereo_interfaces__srv__SetNavigationMode_Request__get_type_hash+0x4>)
 80140ea:	4770      	bx	lr
 80140ec:	20001138 	.word	0x20001138

080140f0 <nereo_interfaces__srv__SetNavigationMode_Response__get_type_hash>:
 80140f0:	4800      	ldr	r0, [pc, #0]	@ (80140f4 <nereo_interfaces__srv__SetNavigationMode_Response__get_type_hash+0x4>)
 80140f2:	4770      	bx	lr
 80140f4:	20001114 	.word	0x20001114

080140f8 <nereo_interfaces__srv__SetNavigationMode_Event__get_type_hash>:
 80140f8:	4800      	ldr	r0, [pc, #0]	@ (80140fc <nereo_interfaces__srv__SetNavigationMode_Event__get_type_hash+0x4>)
 80140fa:	4770      	bx	lr
 80140fc:	200010f0 	.word	0x200010f0

08014100 <nereo_interfaces__srv__SetNavigationMode__get_type_description>:
 8014100:	b538      	push	{r3, r4, r5, lr}
 8014102:	4d1d      	ldr	r5, [pc, #116]	@ (8014178 <nereo_interfaces__srv__SetNavigationMode__get_type_description+0x78>)
 8014104:	7828      	ldrb	r0, [r5, #0]
 8014106:	b108      	cbz	r0, 801410c <nereo_interfaces__srv__SetNavigationMode__get_type_description+0xc>
 8014108:	481c      	ldr	r0, [pc, #112]	@ (801417c <nereo_interfaces__srv__SetNavigationMode__get_type_description+0x7c>)
 801410a:	bd38      	pop	{r3, r4, r5, pc}
 801410c:	f005 fe7e 	bl	8019e0c <builtin_interfaces__msg__Time__get_type_description>
 8014110:	300c      	adds	r0, #12
 8014112:	c807      	ldmia	r0, {r0, r1, r2}
 8014114:	4b1a      	ldr	r3, [pc, #104]	@ (8014180 <nereo_interfaces__srv__SetNavigationMode__get_type_description+0x80>)
 8014116:	4c1b      	ldr	r4, [pc, #108]	@ (8014184 <nereo_interfaces__srv__SetNavigationMode__get_type_description+0x84>)
 8014118:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801411c:	7823      	ldrb	r3, [r4, #0]
 801411e:	b33b      	cbz	r3, 8014170 <nereo_interfaces__srv__SetNavigationMode__get_type_description+0x70>
 8014120:	4b19      	ldr	r3, [pc, #100]	@ (8014188 <nereo_interfaces__srv__SetNavigationMode__get_type_description+0x88>)
 8014122:	4c1a      	ldr	r4, [pc, #104]	@ (801418c <nereo_interfaces__srv__SetNavigationMode__get_type_description+0x8c>)
 8014124:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8014128:	4b19      	ldr	r3, [pc, #100]	@ (8014190 <nereo_interfaces__srv__SetNavigationMode__get_type_description+0x90>)
 801412a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801412e:	7823      	ldrb	r3, [r4, #0]
 8014130:	b90b      	cbnz	r3, 8014136 <nereo_interfaces__srv__SetNavigationMode__get_type_description+0x36>
 8014132:	2301      	movs	r3, #1
 8014134:	7023      	strb	r3, [r4, #0]
 8014136:	4b17      	ldr	r3, [pc, #92]	@ (8014194 <nereo_interfaces__srv__SetNavigationMode__get_type_description+0x94>)
 8014138:	4c17      	ldr	r4, [pc, #92]	@ (8014198 <nereo_interfaces__srv__SetNavigationMode__get_type_description+0x98>)
 801413a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801413e:	4b17      	ldr	r3, [pc, #92]	@ (801419c <nereo_interfaces__srv__SetNavigationMode__get_type_description+0x9c>)
 8014140:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8014144:	7823      	ldrb	r3, [r4, #0]
 8014146:	b90b      	cbnz	r3, 801414c <nereo_interfaces__srv__SetNavigationMode__get_type_description+0x4c>
 8014148:	2301      	movs	r3, #1
 801414a:	7023      	strb	r3, [r4, #0]
 801414c:	4b14      	ldr	r3, [pc, #80]	@ (80141a0 <nereo_interfaces__srv__SetNavigationMode__get_type_description+0xa0>)
 801414e:	4c15      	ldr	r4, [pc, #84]	@ (80141a4 <nereo_interfaces__srv__SetNavigationMode__get_type_description+0xa4>)
 8014150:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8014154:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8014158:	2000      	movs	r0, #0
 801415a:	f005 fa13 	bl	8019584 <service_msgs__msg__ServiceEventInfo__get_type_description>
 801415e:	300c      	adds	r0, #12
 8014160:	c807      	ldmia	r0, {r0, r1, r2}
 8014162:	3418      	adds	r4, #24
 8014164:	2301      	movs	r3, #1
 8014166:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801416a:	702b      	strb	r3, [r5, #0]
 801416c:	4803      	ldr	r0, [pc, #12]	@ (801417c <nereo_interfaces__srv__SetNavigationMode__get_type_description+0x7c>)
 801416e:	bd38      	pop	{r3, r4, r5, pc}
 8014170:	f7ff ff7a 	bl	8014068 <nereo_interfaces__srv__SetNavigationMode_Event__get_type_description.part.0>
 8014174:	e7d4      	b.n	8014120 <nereo_interfaces__srv__SetNavigationMode__get_type_description+0x20>
 8014176:	bf00      	nop
 8014178:	20019514 	.word	0x20019514
 801417c:	080200e4 	.word	0x080200e4
 8014180:	20001434 	.word	0x20001434
 8014184:	20019511 	.word	0x20019511
 8014188:	08020084 	.word	0x08020084
 801418c:	20019513 	.word	0x20019513
 8014190:	2000144c 	.word	0x2000144c
 8014194:	080200cc 	.word	0x080200cc
 8014198:	20019512 	.word	0x20019512
 801419c:	20001464 	.word	0x20001464
 80141a0:	080200a8 	.word	0x080200a8
 80141a4:	2000147c 	.word	0x2000147c

080141a8 <nereo_interfaces__srv__SetNavigationMode_Request__get_type_description>:
 80141a8:	4b03      	ldr	r3, [pc, #12]	@ (80141b8 <nereo_interfaces__srv__SetNavigationMode_Request__get_type_description+0x10>)
 80141aa:	781a      	ldrb	r2, [r3, #0]
 80141ac:	b90a      	cbnz	r2, 80141b2 <nereo_interfaces__srv__SetNavigationMode_Request__get_type_description+0xa>
 80141ae:	2201      	movs	r2, #1
 80141b0:	701a      	strb	r2, [r3, #0]
 80141b2:	4802      	ldr	r0, [pc, #8]	@ (80141bc <nereo_interfaces__srv__SetNavigationMode_Request__get_type_description+0x14>)
 80141b4:	4770      	bx	lr
 80141b6:	bf00      	nop
 80141b8:	20019513 	.word	0x20019513
 80141bc:	080200c0 	.word	0x080200c0

080141c0 <nereo_interfaces__srv__SetNavigationMode_Response__get_type_description>:
 80141c0:	4b03      	ldr	r3, [pc, #12]	@ (80141d0 <nereo_interfaces__srv__SetNavigationMode_Response__get_type_description+0x10>)
 80141c2:	781a      	ldrb	r2, [r3, #0]
 80141c4:	b90a      	cbnz	r2, 80141ca <nereo_interfaces__srv__SetNavigationMode_Response__get_type_description+0xa>
 80141c6:	2201      	movs	r2, #1
 80141c8:	701a      	strb	r2, [r3, #0]
 80141ca:	4802      	ldr	r0, [pc, #8]	@ (80141d4 <nereo_interfaces__srv__SetNavigationMode_Response__get_type_description+0x14>)
 80141cc:	4770      	bx	lr
 80141ce:	bf00      	nop
 80141d0:	20019512 	.word	0x20019512
 80141d4:	0802009c 	.word	0x0802009c

080141d8 <nereo_interfaces__srv__SetNavigationMode_Event__get_type_description>:
 80141d8:	b508      	push	{r3, lr}
 80141da:	4b04      	ldr	r3, [pc, #16]	@ (80141ec <nereo_interfaces__srv__SetNavigationMode_Event__get_type_description+0x14>)
 80141dc:	781b      	ldrb	r3, [r3, #0]
 80141de:	b10b      	cbz	r3, 80141e4 <nereo_interfaces__srv__SetNavigationMode_Event__get_type_description+0xc>
 80141e0:	4803      	ldr	r0, [pc, #12]	@ (80141f0 <nereo_interfaces__srv__SetNavigationMode_Event__get_type_description+0x18>)
 80141e2:	bd08      	pop	{r3, pc}
 80141e4:	f7ff ff40 	bl	8014068 <nereo_interfaces__srv__SetNavigationMode_Event__get_type_description.part.0>
 80141e8:	4801      	ldr	r0, [pc, #4]	@ (80141f0 <nereo_interfaces__srv__SetNavigationMode_Event__get_type_description+0x18>)
 80141ea:	bd08      	pop	{r3, pc}
 80141ec:	20019511 	.word	0x20019511
 80141f0:	08020078 	.word	0x08020078

080141f4 <nereo_interfaces__srv__SetNavigationMode__get_type_description_sources>:
 80141f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80141f8:	4b2c      	ldr	r3, [pc, #176]	@ (80142ac <nereo_interfaces__srv__SetNavigationMode__get_type_description_sources+0xb8>)
 80141fa:	f893 9000 	ldrb.w	r9, [r3]
 80141fe:	f1b9 0f00 	cmp.w	r9, #0
 8014202:	d002      	beq.n	801420a <nereo_interfaces__srv__SetNavigationMode__get_type_description_sources+0x16>
 8014204:	482a      	ldr	r0, [pc, #168]	@ (80142b0 <nereo_interfaces__srv__SetNavigationMode__get_type_description_sources+0xbc>)
 8014206:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801420a:	4d2a      	ldr	r5, [pc, #168]	@ (80142b4 <nereo_interfaces__srv__SetNavigationMode__get_type_description_sources+0xc0>)
 801420c:	4c2a      	ldr	r4, [pc, #168]	@ (80142b8 <nereo_interfaces__srv__SetNavigationMode__get_type_description_sources+0xc4>)
 801420e:	f8df b0b0 	ldr.w	fp, [pc, #176]	@ 80142c0 <nereo_interfaces__srv__SetNavigationMode__get_type_description_sources+0xcc>
 8014212:	f8df 80b0 	ldr.w	r8, [pc, #176]	@ 80142c4 <nereo_interfaces__srv__SetNavigationMode__get_type_description_sources+0xd0>
 8014216:	4e29      	ldr	r6, [pc, #164]	@ (80142bc <nereo_interfaces__srv__SetNavigationMode__get_type_description_sources+0xc8>)
 8014218:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801421a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801421c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801421e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014220:	682b      	ldr	r3, [r5, #0]
 8014222:	4625      	mov	r5, r4
 8014224:	4648      	mov	r0, r9
 8014226:	f845 3b04 	str.w	r3, [r5], #4
 801422a:	f005 fdfb 	bl	8019e24 <builtin_interfaces__msg__Time__get_individual_type_description_source>
 801422e:	4684      	mov	ip, r0
 8014230:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014234:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014236:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801423a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801423c:	f8dc 3000 	ldr.w	r3, [ip]
 8014240:	602b      	str	r3, [r5, #0]
 8014242:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 8014246:	f104 0a28 	add.w	sl, r4, #40	@ 0x28
 801424a:	e8aa 000f 	stmia.w	sl!, {r0, r1, r2, r3}
 801424e:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 8014252:	e8aa 000f 	stmia.w	sl!, {r0, r1, r2, r3}
 8014256:	f8db 3000 	ldr.w	r3, [fp]
 801425a:	f8ca 3000 	str.w	r3, [sl]
 801425e:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 8014262:	f104 074c 	add.w	r7, r4, #76	@ 0x4c
 8014266:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8014268:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 801426c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801426e:	f8d8 3000 	ldr.w	r3, [r8]
 8014272:	603b      	str	r3, [r7, #0]
 8014274:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8014276:	f104 0e70 	add.w	lr, r4, #112	@ 0x70
 801427a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801427e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8014280:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014284:	6833      	ldr	r3, [r6, #0]
 8014286:	f8ce 3000 	str.w	r3, [lr]
 801428a:	4648      	mov	r0, r9
 801428c:	f005 f992 	bl	80195b4 <service_msgs__msg__ServiceEventInfo__get_individual_type_description_source>
 8014290:	4a06      	ldr	r2, [pc, #24]	@ (80142ac <nereo_interfaces__srv__SetNavigationMode__get_type_description_sources+0xb8>)
 8014292:	2301      	movs	r3, #1
 8014294:	4605      	mov	r5, r0
 8014296:	7013      	strb	r3, [r2, #0]
 8014298:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801429a:	3494      	adds	r4, #148	@ 0x94
 801429c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801429e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80142a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80142a2:	682b      	ldr	r3, [r5, #0]
 80142a4:	4802      	ldr	r0, [pc, #8]	@ (80142b0 <nereo_interfaces__srv__SetNavigationMode__get_type_description_sources+0xbc>)
 80142a6:	6023      	str	r3, [r4, #0]
 80142a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80142ac:	20019510 	.word	0x20019510
 80142b0:	0801ffdc 	.word	0x0801ffdc
 80142b4:	08020054 	.word	0x08020054
 80142b8:	20019438 	.word	0x20019438
 80142bc:	0802000c 	.word	0x0802000c
 80142c0:	0801ffe8 	.word	0x0801ffe8
 80142c4:	08020030 	.word	0x08020030

080142c8 <nereo_interfaces__srv__SetNavigationMode_Request__get_type_description_sources>:
 80142c8:	4b09      	ldr	r3, [pc, #36]	@ (80142f0 <nereo_interfaces__srv__SetNavigationMode_Request__get_type_description_sources+0x28>)
 80142ca:	781a      	ldrb	r2, [r3, #0]
 80142cc:	b96a      	cbnz	r2, 80142ea <nereo_interfaces__srv__SetNavigationMode_Request__get_type_description_sources+0x22>
 80142ce:	b430      	push	{r4, r5}
 80142d0:	4d08      	ldr	r5, [pc, #32]	@ (80142f4 <nereo_interfaces__srv__SetNavigationMode_Request__get_type_description_sources+0x2c>)
 80142d2:	4c09      	ldr	r4, [pc, #36]	@ (80142f8 <nereo_interfaces__srv__SetNavigationMode_Request__get_type_description_sources+0x30>)
 80142d4:	2201      	movs	r2, #1
 80142d6:	701a      	strb	r2, [r3, #0]
 80142d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80142da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80142dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80142de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80142e0:	682b      	ldr	r3, [r5, #0]
 80142e2:	4806      	ldr	r0, [pc, #24]	@ (80142fc <nereo_interfaces__srv__SetNavigationMode_Request__get_type_description_sources+0x34>)
 80142e4:	6023      	str	r3, [r4, #0]
 80142e6:	bc30      	pop	{r4, r5}
 80142e8:	4770      	bx	lr
 80142ea:	4804      	ldr	r0, [pc, #16]	@ (80142fc <nereo_interfaces__srv__SetNavigationMode_Request__get_type_description_sources+0x34>)
 80142ec:	4770      	bx	lr
 80142ee:	bf00      	nop
 80142f0:	20019434 	.word	0x20019434
 80142f4:	08020030 	.word	0x08020030
 80142f8:	20019410 	.word	0x20019410
 80142fc:	0801ffd0 	.word	0x0801ffd0

08014300 <nereo_interfaces__srv__SetNavigationMode_Response__get_type_description_sources>:
 8014300:	4b09      	ldr	r3, [pc, #36]	@ (8014328 <nereo_interfaces__srv__SetNavigationMode_Response__get_type_description_sources+0x28>)
 8014302:	781a      	ldrb	r2, [r3, #0]
 8014304:	b96a      	cbnz	r2, 8014322 <nereo_interfaces__srv__SetNavigationMode_Response__get_type_description_sources+0x22>
 8014306:	b430      	push	{r4, r5}
 8014308:	4d08      	ldr	r5, [pc, #32]	@ (801432c <nereo_interfaces__srv__SetNavigationMode_Response__get_type_description_sources+0x2c>)
 801430a:	4c09      	ldr	r4, [pc, #36]	@ (8014330 <nereo_interfaces__srv__SetNavigationMode_Response__get_type_description_sources+0x30>)
 801430c:	2201      	movs	r2, #1
 801430e:	701a      	strb	r2, [r3, #0]
 8014310:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014312:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014314:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014316:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014318:	682b      	ldr	r3, [r5, #0]
 801431a:	4806      	ldr	r0, [pc, #24]	@ (8014334 <nereo_interfaces__srv__SetNavigationMode_Response__get_type_description_sources+0x34>)
 801431c:	6023      	str	r3, [r4, #0]
 801431e:	bc30      	pop	{r4, r5}
 8014320:	4770      	bx	lr
 8014322:	4804      	ldr	r0, [pc, #16]	@ (8014334 <nereo_interfaces__srv__SetNavigationMode_Response__get_type_description_sources+0x34>)
 8014324:	4770      	bx	lr
 8014326:	bf00      	nop
 8014328:	2001940c 	.word	0x2001940c
 801432c:	0802000c 	.word	0x0802000c
 8014330:	200193e8 	.word	0x200193e8
 8014334:	0801ffc4 	.word	0x0801ffc4

08014338 <nereo_interfaces__srv__SetNavigationMode_Event__get_type_description_sources>:
 8014338:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801433c:	4e27      	ldr	r6, [pc, #156]	@ (80143dc <nereo_interfaces__srv__SetNavigationMode_Event__get_type_description_sources+0xa4>)
 801433e:	f896 8000 	ldrb.w	r8, [r6]
 8014342:	f1b8 0f00 	cmp.w	r8, #0
 8014346:	d002      	beq.n	801434e <nereo_interfaces__srv__SetNavigationMode_Event__get_type_description_sources+0x16>
 8014348:	4825      	ldr	r0, [pc, #148]	@ (80143e0 <nereo_interfaces__srv__SetNavigationMode_Event__get_type_description_sources+0xa8>)
 801434a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801434e:	4d25      	ldr	r5, [pc, #148]	@ (80143e4 <nereo_interfaces__srv__SetNavigationMode_Event__get_type_description_sources+0xac>)
 8014350:	4c25      	ldr	r4, [pc, #148]	@ (80143e8 <nereo_interfaces__srv__SetNavigationMode_Event__get_type_description_sources+0xb0>)
 8014352:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 80143f0 <nereo_interfaces__srv__SetNavigationMode_Event__get_type_description_sources+0xb8>
 8014356:	4f25      	ldr	r7, [pc, #148]	@ (80143ec <nereo_interfaces__srv__SetNavigationMode_Event__get_type_description_sources+0xb4>)
 8014358:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801435a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801435c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801435e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014360:	682b      	ldr	r3, [r5, #0]
 8014362:	4625      	mov	r5, r4
 8014364:	4640      	mov	r0, r8
 8014366:	f845 3b04 	str.w	r3, [r5], #4
 801436a:	f005 fd5b 	bl	8019e24 <builtin_interfaces__msg__Time__get_individual_type_description_source>
 801436e:	4684      	mov	ip, r0
 8014370:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014374:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014376:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801437a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801437c:	f8dc 3000 	ldr.w	r3, [ip]
 8014380:	602b      	str	r3, [r5, #0]
 8014382:	e8ba 000f 	ldmia.w	sl!, {r0, r1, r2, r3}
 8014386:	f104 0928 	add.w	r9, r4, #40	@ 0x28
 801438a:	e8a9 000f 	stmia.w	r9!, {r0, r1, r2, r3}
 801438e:	e8ba 000f 	ldmia.w	sl!, {r0, r1, r2, r3}
 8014392:	e8a9 000f 	stmia.w	r9!, {r0, r1, r2, r3}
 8014396:	f8da 3000 	ldr.w	r3, [sl]
 801439a:	f8c9 3000 	str.w	r3, [r9]
 801439e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80143a0:	f104 0e4c 	add.w	lr, r4, #76	@ 0x4c
 80143a4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80143a8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80143aa:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80143ae:	683b      	ldr	r3, [r7, #0]
 80143b0:	f8ce 3000 	str.w	r3, [lr]
 80143b4:	4640      	mov	r0, r8
 80143b6:	f005 f8fd 	bl	80195b4 <service_msgs__msg__ServiceEventInfo__get_individual_type_description_source>
 80143ba:	2301      	movs	r3, #1
 80143bc:	4684      	mov	ip, r0
 80143be:	7033      	strb	r3, [r6, #0]
 80143c0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80143c4:	3470      	adds	r4, #112	@ 0x70
 80143c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80143c8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80143cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80143ce:	f8dc 3000 	ldr.w	r3, [ip]
 80143d2:	4803      	ldr	r0, [pc, #12]	@ (80143e0 <nereo_interfaces__srv__SetNavigationMode_Event__get_type_description_sources+0xa8>)
 80143d4:	6023      	str	r3, [r4, #0]
 80143d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80143da:	bf00      	nop
 80143dc:	200193e4 	.word	0x200193e4
 80143e0:	0801ffb8 	.word	0x0801ffb8
 80143e4:	0801ffe8 	.word	0x0801ffe8
 80143e8:	20019330 	.word	0x20019330
 80143ec:	0802000c 	.word	0x0802000c
 80143f0:	08020030 	.word	0x08020030

080143f4 <nereo_interfaces__srv__SetNavigationMode_Request__init>:
 80143f4:	3800      	subs	r0, #0
 80143f6:	bf18      	it	ne
 80143f8:	2001      	movne	r0, #1
 80143fa:	4770      	bx	lr

080143fc <nereo_interfaces__srv__SetNavigationMode_Request__fini>:
 80143fc:	4770      	bx	lr
 80143fe:	bf00      	nop

08014400 <nereo_interfaces__srv__SetNavigationMode_Request__copy>:
 8014400:	b128      	cbz	r0, 801440e <nereo_interfaces__srv__SetNavigationMode_Request__copy+0xe>
 8014402:	b119      	cbz	r1, 801440c <nereo_interfaces__srv__SetNavigationMode_Request__copy+0xc>
 8014404:	7803      	ldrb	r3, [r0, #0]
 8014406:	700b      	strb	r3, [r1, #0]
 8014408:	2001      	movs	r0, #1
 801440a:	4770      	bx	lr
 801440c:	4608      	mov	r0, r1
 801440e:	4770      	bx	lr

08014410 <nereo_interfaces__srv__SetNavigationMode_Request__Sequence__init>:
 8014410:	b1c0      	cbz	r0, 8014444 <nereo_interfaces__srv__SetNavigationMode_Request__Sequence__init+0x34>
 8014412:	b530      	push	{r4, r5, lr}
 8014414:	b087      	sub	sp, #28
 8014416:	460d      	mov	r5, r1
 8014418:	4604      	mov	r4, r0
 801441a:	a801      	add	r0, sp, #4
 801441c:	f7f8 fef2 	bl	800d204 <rcutils_get_default_allocator>
 8014420:	9a05      	ldr	r2, [sp, #20]
 8014422:	b935      	cbnz	r5, 8014432 <nereo_interfaces__srv__SetNavigationMode_Request__Sequence__init+0x22>
 8014424:	4628      	mov	r0, r5
 8014426:	e9c4 0500 	strd	r0, r5, [r4]
 801442a:	2001      	movs	r0, #1
 801442c:	60a5      	str	r5, [r4, #8]
 801442e:	b007      	add	sp, #28
 8014430:	bd30      	pop	{r4, r5, pc}
 8014432:	9b04      	ldr	r3, [sp, #16]
 8014434:	2101      	movs	r1, #1
 8014436:	4628      	mov	r0, r5
 8014438:	4798      	blx	r3
 801443a:	2800      	cmp	r0, #0
 801443c:	d1f3      	bne.n	8014426 <nereo_interfaces__srv__SetNavigationMode_Request__Sequence__init+0x16>
 801443e:	2000      	movs	r0, #0
 8014440:	b007      	add	sp, #28
 8014442:	bd30      	pop	{r4, r5, pc}
 8014444:	2000      	movs	r0, #0
 8014446:	4770      	bx	lr

08014448 <nereo_interfaces__srv__SetNavigationMode_Request__Sequence__fini>:
 8014448:	b180      	cbz	r0, 801446c <nereo_interfaces__srv__SetNavigationMode_Request__Sequence__fini+0x24>
 801444a:	b510      	push	{r4, lr}
 801444c:	4604      	mov	r4, r0
 801444e:	b086      	sub	sp, #24
 8014450:	a801      	add	r0, sp, #4
 8014452:	f7f8 fed7 	bl	800d204 <rcutils_get_default_allocator>
 8014456:	6820      	ldr	r0, [r4, #0]
 8014458:	b130      	cbz	r0, 8014468 <nereo_interfaces__srv__SetNavigationMode_Request__Sequence__fini+0x20>
 801445a:	9b02      	ldr	r3, [sp, #8]
 801445c:	9905      	ldr	r1, [sp, #20]
 801445e:	4798      	blx	r3
 8014460:	2300      	movs	r3, #0
 8014462:	e9c4 3300 	strd	r3, r3, [r4]
 8014466:	60a3      	str	r3, [r4, #8]
 8014468:	b006      	add	sp, #24
 801446a:	bd10      	pop	{r4, pc}
 801446c:	4770      	bx	lr
 801446e:	bf00      	nop

08014470 <nereo_interfaces__srv__SetNavigationMode_Response__init>:
 8014470:	3800      	subs	r0, #0
 8014472:	bf18      	it	ne
 8014474:	2001      	movne	r0, #1
 8014476:	4770      	bx	lr

08014478 <nereo_interfaces__srv__SetNavigationMode_Response__fini>:
 8014478:	4770      	bx	lr
 801447a:	bf00      	nop

0801447c <nereo_interfaces__srv__SetNavigationMode_Response__copy>:
 801447c:	b138      	cbz	r0, 801448e <nereo_interfaces__srv__SetNavigationMode_Response__copy+0x12>
 801447e:	b129      	cbz	r1, 801448c <nereo_interfaces__srv__SetNavigationMode_Response__copy+0x10>
 8014480:	7803      	ldrb	r3, [r0, #0]
 8014482:	700b      	strb	r3, [r1, #0]
 8014484:	7843      	ldrb	r3, [r0, #1]
 8014486:	704b      	strb	r3, [r1, #1]
 8014488:	2001      	movs	r0, #1
 801448a:	4770      	bx	lr
 801448c:	4608      	mov	r0, r1
 801448e:	4770      	bx	lr

08014490 <nereo_interfaces__srv__SetNavigationMode_Response__Sequence__init>:
 8014490:	b1c0      	cbz	r0, 80144c4 <nereo_interfaces__srv__SetNavigationMode_Response__Sequence__init+0x34>
 8014492:	b530      	push	{r4, r5, lr}
 8014494:	b087      	sub	sp, #28
 8014496:	460d      	mov	r5, r1
 8014498:	4604      	mov	r4, r0
 801449a:	a801      	add	r0, sp, #4
 801449c:	f7f8 feb2 	bl	800d204 <rcutils_get_default_allocator>
 80144a0:	9a05      	ldr	r2, [sp, #20]
 80144a2:	b935      	cbnz	r5, 80144b2 <nereo_interfaces__srv__SetNavigationMode_Response__Sequence__init+0x22>
 80144a4:	4628      	mov	r0, r5
 80144a6:	e9c4 0500 	strd	r0, r5, [r4]
 80144aa:	2001      	movs	r0, #1
 80144ac:	60a5      	str	r5, [r4, #8]
 80144ae:	b007      	add	sp, #28
 80144b0:	bd30      	pop	{r4, r5, pc}
 80144b2:	9b04      	ldr	r3, [sp, #16]
 80144b4:	2102      	movs	r1, #2
 80144b6:	4628      	mov	r0, r5
 80144b8:	4798      	blx	r3
 80144ba:	2800      	cmp	r0, #0
 80144bc:	d1f3      	bne.n	80144a6 <nereo_interfaces__srv__SetNavigationMode_Response__Sequence__init+0x16>
 80144be:	2000      	movs	r0, #0
 80144c0:	b007      	add	sp, #28
 80144c2:	bd30      	pop	{r4, r5, pc}
 80144c4:	2000      	movs	r0, #0
 80144c6:	4770      	bx	lr

080144c8 <nereo_interfaces__srv__SetNavigationMode_Response__Sequence__fini>:
 80144c8:	b180      	cbz	r0, 80144ec <nereo_interfaces__srv__SetNavigationMode_Response__Sequence__fini+0x24>
 80144ca:	b510      	push	{r4, lr}
 80144cc:	4604      	mov	r4, r0
 80144ce:	b086      	sub	sp, #24
 80144d0:	a801      	add	r0, sp, #4
 80144d2:	f7f8 fe97 	bl	800d204 <rcutils_get_default_allocator>
 80144d6:	6820      	ldr	r0, [r4, #0]
 80144d8:	b130      	cbz	r0, 80144e8 <nereo_interfaces__srv__SetNavigationMode_Response__Sequence__fini+0x20>
 80144da:	9b02      	ldr	r3, [sp, #8]
 80144dc:	9905      	ldr	r1, [sp, #20]
 80144de:	4798      	blx	r3
 80144e0:	2300      	movs	r3, #0
 80144e2:	e9c4 3300 	strd	r3, r3, [r4]
 80144e6:	60a3      	str	r3, [r4, #8]
 80144e8:	b006      	add	sp, #24
 80144ea:	bd10      	pop	{r4, pc}
 80144ec:	4770      	bx	lr
 80144ee:	bf00      	nop

080144f0 <nereo_interfaces__srv__SetNavigationMode_Event__init>:
 80144f0:	b570      	push	{r4, r5, r6, lr}
 80144f2:	b08c      	sub	sp, #48	@ 0x30
 80144f4:	b370      	cbz	r0, 8014554 <nereo_interfaces__srv__SetNavigationMode_Event__init+0x64>
 80144f6:	4604      	mov	r4, r0
 80144f8:	f005 f888 	bl	801960c <service_msgs__msg__ServiceEventInfo__init>
 80144fc:	4605      	mov	r5, r0
 80144fe:	b178      	cbz	r0, 8014520 <nereo_interfaces__srv__SetNavigationMode_Event__init+0x30>
 8014500:	2600      	movs	r6, #0
 8014502:	4668      	mov	r0, sp
 8014504:	f7f8 fe7e 	bl	800d204 <rcutils_get_default_allocator>
 8014508:	4668      	mov	r0, sp
 801450a:	e9c4 660a 	strd	r6, r6, [r4, #40]	@ 0x28
 801450e:	6326      	str	r6, [r4, #48]	@ 0x30
 8014510:	f7f8 fe78 	bl	800d204 <rcutils_get_default_allocator>
 8014514:	4628      	mov	r0, r5
 8014516:	e9c4 660d 	strd	r6, r6, [r4, #52]	@ 0x34
 801451a:	63e6      	str	r6, [r4, #60]	@ 0x3c
 801451c:	b00c      	add	sp, #48	@ 0x30
 801451e:	bd70      	pop	{r4, r5, r6, pc}
 8014520:	4620      	mov	r0, r4
 8014522:	f005 f883 	bl	801962c <service_msgs__msg__ServiceEventInfo__fini>
 8014526:	a807      	add	r0, sp, #28
 8014528:	f7f8 fe6c 	bl	800d204 <rcutils_get_default_allocator>
 801452c:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801452e:	b128      	cbz	r0, 801453c <nereo_interfaces__srv__SetNavigationMode_Event__init+0x4c>
 8014530:	9b08      	ldr	r3, [sp, #32]
 8014532:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8014534:	4798      	blx	r3
 8014536:	e9c4 550a 	strd	r5, r5, [r4, #40]	@ 0x28
 801453a:	6325      	str	r5, [r4, #48]	@ 0x30
 801453c:	a807      	add	r0, sp, #28
 801453e:	f7f8 fe61 	bl	800d204 <rcutils_get_default_allocator>
 8014542:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8014544:	b130      	cbz	r0, 8014554 <nereo_interfaces__srv__SetNavigationMode_Event__init+0x64>
 8014546:	9b08      	ldr	r3, [sp, #32]
 8014548:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801454a:	4798      	blx	r3
 801454c:	2300      	movs	r3, #0
 801454e:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
 8014552:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8014554:	2500      	movs	r5, #0
 8014556:	4628      	mov	r0, r5
 8014558:	b00c      	add	sp, #48	@ 0x30
 801455a:	bd70      	pop	{r4, r5, r6, pc}

0801455c <nereo_interfaces__srv__SetNavigationMode_Event__fini>:
 801455c:	b1f0      	cbz	r0, 801459c <nereo_interfaces__srv__SetNavigationMode_Event__fini+0x40>
 801455e:	b510      	push	{r4, lr}
 8014560:	4604      	mov	r4, r0
 8014562:	b086      	sub	sp, #24
 8014564:	f005 f862 	bl	801962c <service_msgs__msg__ServiceEventInfo__fini>
 8014568:	a801      	add	r0, sp, #4
 801456a:	f7f8 fe4b 	bl	800d204 <rcutils_get_default_allocator>
 801456e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8014570:	b130      	cbz	r0, 8014580 <nereo_interfaces__srv__SetNavigationMode_Event__fini+0x24>
 8014572:	9b02      	ldr	r3, [sp, #8]
 8014574:	9905      	ldr	r1, [sp, #20]
 8014576:	4798      	blx	r3
 8014578:	2300      	movs	r3, #0
 801457a:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 801457e:	6323      	str	r3, [r4, #48]	@ 0x30
 8014580:	a801      	add	r0, sp, #4
 8014582:	f7f8 fe3f 	bl	800d204 <rcutils_get_default_allocator>
 8014586:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8014588:	b130      	cbz	r0, 8014598 <nereo_interfaces__srv__SetNavigationMode_Event__fini+0x3c>
 801458a:	9b02      	ldr	r3, [sp, #8]
 801458c:	9905      	ldr	r1, [sp, #20]
 801458e:	4798      	blx	r3
 8014590:	2300      	movs	r3, #0
 8014592:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
 8014596:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8014598:	b006      	add	sp, #24
 801459a:	bd10      	pop	{r4, pc}
 801459c:	4770      	bx	lr
 801459e:	bf00      	nop

080145a0 <rosidl_typesupport_c__create_service_event_message__nereo_interfaces__srv__SetNavigationMode>:
 80145a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80145a4:	2900      	cmp	r1, #0
 80145a6:	d03e      	beq.n	8014626 <rosidl_typesupport_c__create_service_event_message__nereo_interfaces__srv__SetNavigationMode+0x86>
 80145a8:	4605      	mov	r5, r0
 80145aa:	2800      	cmp	r0, #0
 80145ac:	d03b      	beq.n	8014626 <rosidl_typesupport_c__create_service_event_message__nereo_interfaces__srv__SetNavigationMode+0x86>
 80145ae:	4698      	mov	r8, r3
 80145b0:	460e      	mov	r6, r1
 80145b2:	680b      	ldr	r3, [r1, #0]
 80145b4:	6909      	ldr	r1, [r1, #16]
 80145b6:	2040      	movs	r0, #64	@ 0x40
 80145b8:	4617      	mov	r7, r2
 80145ba:	4798      	blx	r3
 80145bc:	4604      	mov	r4, r0
 80145be:	f7ff ff97 	bl	80144f0 <nereo_interfaces__srv__SetNavigationMode_Event__init>
 80145c2:	b360      	cbz	r0, 801461e <rosidl_typesupport_c__create_service_event_message__nereo_interfaces__srv__SetNavigationMode+0x7e>
 80145c4:	782b      	ldrb	r3, [r5, #0]
 80145c6:	7023      	strb	r3, [r4, #0]
 80145c8:	e9d5 2301 	ldrd	r2, r3, [r5, #4]
 80145cc:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 80145d0:	e9c4 2301 	strd	r2, r3, [r4, #4]
 80145d4:	e9c4 0108 	strd	r0, r1, [r4, #32]
 80145d8:	68e9      	ldr	r1, [r5, #12]
 80145da:	692a      	ldr	r2, [r5, #16]
 80145dc:	696b      	ldr	r3, [r5, #20]
 80145de:	69a8      	ldr	r0, [r5, #24]
 80145e0:	61a0      	str	r0, [r4, #24]
 80145e2:	60e1      	str	r1, [r4, #12]
 80145e4:	6122      	str	r2, [r4, #16]
 80145e6:	6163      	str	r3, [r4, #20]
 80145e8:	b14f      	cbz	r7, 80145fe <rosidl_typesupport_c__create_service_event_message__nereo_interfaces__srv__SetNavigationMode+0x5e>
 80145ea:	2101      	movs	r1, #1
 80145ec:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80145f0:	f7ff ff0e 	bl	8014410 <nereo_interfaces__srv__SetNavigationMode_Request__Sequence__init>
 80145f4:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80145f6:	4638      	mov	r0, r7
 80145f8:	f7ff ff02 	bl	8014400 <nereo_interfaces__srv__SetNavigationMode_Request__copy>
 80145fc:	b178      	cbz	r0, 801461e <rosidl_typesupport_c__create_service_event_message__nereo_interfaces__srv__SetNavigationMode+0x7e>
 80145fe:	f1b8 0f00 	cmp.w	r8, #0
 8014602:	d009      	beq.n	8014618 <rosidl_typesupport_c__create_service_event_message__nereo_interfaces__srv__SetNavigationMode+0x78>
 8014604:	2101      	movs	r1, #1
 8014606:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 801460a:	f7ff ff41 	bl	8014490 <nereo_interfaces__srv__SetNavigationMode_Response__Sequence__init>
 801460e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014610:	4640      	mov	r0, r8
 8014612:	f7ff ff33 	bl	801447c <nereo_interfaces__srv__SetNavigationMode_Response__copy>
 8014616:	b110      	cbz	r0, 801461e <rosidl_typesupport_c__create_service_event_message__nereo_interfaces__srv__SetNavigationMode+0x7e>
 8014618:	4620      	mov	r0, r4
 801461a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801461e:	6873      	ldr	r3, [r6, #4]
 8014620:	6931      	ldr	r1, [r6, #16]
 8014622:	4620      	mov	r0, r4
 8014624:	4798      	blx	r3
 8014626:	2400      	movs	r4, #0
 8014628:	4620      	mov	r0, r4
 801462a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801462e:	bf00      	nop

08014630 <rosidl_typesupport_c__destroy_service_event_message__nereo_interfaces__srv__SetNavigationMode>:
 8014630:	b538      	push	{r3, r4, r5, lr}
 8014632:	460d      	mov	r5, r1
 8014634:	b199      	cbz	r1, 801465e <rosidl_typesupport_c__destroy_service_event_message__nereo_interfaces__srv__SetNavigationMode+0x2e>
 8014636:	4604      	mov	r4, r0
 8014638:	b180      	cbz	r0, 801465c <rosidl_typesupport_c__destroy_service_event_message__nereo_interfaces__srv__SetNavigationMode+0x2c>
 801463a:	f7ff ff8f 	bl	801455c <nereo_interfaces__srv__SetNavigationMode_Event__fini>
 801463e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8014640:	b110      	cbz	r0, 8014648 <rosidl_typesupport_c__destroy_service_event_message__nereo_interfaces__srv__SetNavigationMode+0x18>
 8014642:	686b      	ldr	r3, [r5, #4]
 8014644:	6929      	ldr	r1, [r5, #16]
 8014646:	4798      	blx	r3
 8014648:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 801464a:	b110      	cbz	r0, 8014652 <rosidl_typesupport_c__destroy_service_event_message__nereo_interfaces__srv__SetNavigationMode+0x22>
 801464c:	686b      	ldr	r3, [r5, #4]
 801464e:	6929      	ldr	r1, [r5, #16]
 8014650:	4798      	blx	r3
 8014652:	4620      	mov	r0, r4
 8014654:	686b      	ldr	r3, [r5, #4]
 8014656:	6929      	ldr	r1, [r5, #16]
 8014658:	4798      	blx	r3
 801465a:	2001      	movs	r0, #1
 801465c:	bd38      	pop	{r3, r4, r5, pc}
 801465e:	4608      	mov	r0, r1
 8014660:	bd38      	pop	{r3, r4, r5, pc}
 8014662:	bf00      	nop

08014664 <nereo_interfaces__msg__ThrusterStatuses__get_type_hash>:
 8014664:	4800      	ldr	r0, [pc, #0]	@ (8014668 <nereo_interfaces__msg__ThrusterStatuses__get_type_hash+0x4>)
 8014666:	4770      	bx	lr
 8014668:	200016a4 	.word	0x200016a4

0801466c <nereo_interfaces__msg__ThrusterStatuses__get_type_description>:
 801466c:	4b03      	ldr	r3, [pc, #12]	@ (801467c <nereo_interfaces__msg__ThrusterStatuses__get_type_description+0x10>)
 801466e:	781a      	ldrb	r2, [r3, #0]
 8014670:	b90a      	cbnz	r2, 8014676 <nereo_interfaces__msg__ThrusterStatuses__get_type_description+0xa>
 8014672:	2201      	movs	r2, #1
 8014674:	701a      	strb	r2, [r3, #0]
 8014676:	4802      	ldr	r0, [pc, #8]	@ (8014680 <nereo_interfaces__msg__ThrusterStatuses__get_type_description+0x14>)
 8014678:	4770      	bx	lr
 801467a:	bf00      	nop
 801467c:	2001953d 	.word	0x2001953d
 8014680:	08020138 	.word	0x08020138

08014684 <nereo_interfaces__msg__ThrusterStatuses__get_type_description_sources>:
 8014684:	4b09      	ldr	r3, [pc, #36]	@ (80146ac <nereo_interfaces__msg__ThrusterStatuses__get_type_description_sources+0x28>)
 8014686:	781a      	ldrb	r2, [r3, #0]
 8014688:	b96a      	cbnz	r2, 80146a6 <nereo_interfaces__msg__ThrusterStatuses__get_type_description_sources+0x22>
 801468a:	b430      	push	{r4, r5}
 801468c:	4d08      	ldr	r5, [pc, #32]	@ (80146b0 <nereo_interfaces__msg__ThrusterStatuses__get_type_description_sources+0x2c>)
 801468e:	4c09      	ldr	r4, [pc, #36]	@ (80146b4 <nereo_interfaces__msg__ThrusterStatuses__get_type_description_sources+0x30>)
 8014690:	2201      	movs	r2, #1
 8014692:	701a      	strb	r2, [r3, #0]
 8014694:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014696:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014698:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801469a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801469c:	682b      	ldr	r3, [r5, #0]
 801469e:	4806      	ldr	r0, [pc, #24]	@ (80146b8 <nereo_interfaces__msg__ThrusterStatuses__get_type_description_sources+0x34>)
 80146a0:	6023      	str	r3, [r4, #0]
 80146a2:	bc30      	pop	{r4, r5}
 80146a4:	4770      	bx	lr
 80146a6:	4804      	ldr	r0, [pc, #16]	@ (80146b8 <nereo_interfaces__msg__ThrusterStatuses__get_type_description_sources+0x34>)
 80146a8:	4770      	bx	lr
 80146aa:	bf00      	nop
 80146ac:	2001953c 	.word	0x2001953c
 80146b0:	08020114 	.word	0x08020114
 80146b4:	20019518 	.word	0x20019518
 80146b8:	08020108 	.word	0x08020108

080146bc <nereo_interfaces__msg__ThrusterStatuses__init>:
 80146bc:	3800      	subs	r0, #0
 80146be:	bf18      	it	ne
 80146c0:	2001      	movne	r0, #1
 80146c2:	4770      	bx	lr

080146c4 <nereo_interfaces__msg__ThrusterStatuses__fini>:
 80146c4:	4770      	bx	lr
 80146c6:	bf00      	nop

080146c8 <rcl_client_get_rmw_handle>:
 80146c8:	b118      	cbz	r0, 80146d2 <rcl_client_get_rmw_handle+0xa>
 80146ca:	6800      	ldr	r0, [r0, #0]
 80146cc:	b108      	cbz	r0, 80146d2 <rcl_client_get_rmw_handle+0xa>
 80146ce:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80146d2:	4770      	bx	lr

080146d4 <rcl_send_request>:
 80146d4:	2800      	cmp	r0, #0
 80146d6:	d048      	beq.n	801476a <rcl_send_request+0x96>
 80146d8:	b570      	push	{r4, r5, r6, lr}
 80146da:	4604      	mov	r4, r0
 80146dc:	6800      	ldr	r0, [r0, #0]
 80146de:	b08a      	sub	sp, #40	@ 0x28
 80146e0:	b1c0      	cbz	r0, 8014714 <rcl_send_request+0x40>
 80146e2:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 80146e6:	b1ab      	cbz	r3, 8014714 <rcl_send_request+0x40>
 80146e8:	460e      	mov	r6, r1
 80146ea:	b1b9      	cbz	r1, 801471c <rcl_send_request+0x48>
 80146ec:	4615      	mov	r5, r2
 80146ee:	b1aa      	cbz	r2, 801471c <rcl_send_request+0x48>
 80146f0:	2105      	movs	r1, #5
 80146f2:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 80146f6:	f002 fe83 	bl	8017400 <__atomic_load_8>
 80146fa:	6823      	ldr	r3, [r4, #0]
 80146fc:	e9c5 0100 	strd	r0, r1, [r5]
 8014700:	462a      	mov	r2, r5
 8014702:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8014706:	4631      	mov	r1, r6
 8014708:	f004 f86a 	bl	80187e0 <rmw_send_request>
 801470c:	b148      	cbz	r0, 8014722 <rcl_send_request+0x4e>
 801470e:	2001      	movs	r0, #1
 8014710:	b00a      	add	sp, #40	@ 0x28
 8014712:	bd70      	pop	{r4, r5, r6, pc}
 8014714:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8014718:	b00a      	add	sp, #40	@ 0x28
 801471a:	bd70      	pop	{r4, r5, r6, pc}
 801471c:	200b      	movs	r0, #11
 801471e:	b00a      	add	sp, #40	@ 0x28
 8014720:	bd70      	pop	{r4, r5, r6, pc}
 8014722:	6820      	ldr	r0, [r4, #0]
 8014724:	2305      	movs	r3, #5
 8014726:	9300      	str	r3, [sp, #0]
 8014728:	e9d5 2300 	ldrd	r2, r3, [r5]
 801472c:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8014730:	f002 fed2 	bl	80174d8 <__atomic_exchange_8>
 8014734:	6823      	ldr	r3, [r4, #0]
 8014736:	f8d3 2118 	ldr.w	r2, [r3, #280]	@ 0x118
 801473a:	b1a2      	cbz	r2, 8014766 <rcl_send_request+0x92>
 801473c:	a905      	add	r1, sp, #20
 801473e:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8014742:	f003 fc3d 	bl	8017fc0 <rmw_get_gid_for_client>
 8014746:	4601      	mov	r1, r0
 8014748:	b990      	cbnz	r0, 8014770 <rcl_send_request+0x9c>
 801474a:	6822      	ldr	r2, [r4, #0]
 801474c:	ab06      	add	r3, sp, #24
 801474e:	f8d2 0118 	ldr.w	r0, [r2, #280]	@ 0x118
 8014752:	9302      	str	r3, [sp, #8]
 8014754:	e9d5 4500 	ldrd	r4, r5, [r5]
 8014758:	4632      	mov	r2, r6
 801475a:	e9cd 4500 	strd	r4, r5, [sp]
 801475e:	f000 ff1f 	bl	80155a0 <rcl_send_service_event_message>
 8014762:	2800      	cmp	r0, #0
 8014764:	d1d4      	bne.n	8014710 <rcl_send_request+0x3c>
 8014766:	2000      	movs	r0, #0
 8014768:	e7d2      	b.n	8014710 <rcl_send_request+0x3c>
 801476a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 801476e:	4770      	bx	lr
 8014770:	f000 f878 	bl	8014864 <rcl_convert_rmw_ret_to_rcl_ret>
 8014774:	e7cc      	b.n	8014710 <rcl_send_request+0x3c>
 8014776:	bf00      	nop

08014778 <rcl_take_response>:
 8014778:	b5f0      	push	{r4, r5, r6, r7, lr}
 801477a:	468e      	mov	lr, r1
 801477c:	460c      	mov	r4, r1
 801477e:	4617      	mov	r7, r2
 8014780:	4605      	mov	r5, r0
 8014782:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014786:	b095      	sub	sp, #84	@ 0x54
 8014788:	f10d 0c38 	add.w	ip, sp, #56	@ 0x38
 801478c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014790:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8014794:	e88c 0003 	stmia.w	ip, {r0, r1}
 8014798:	2d00      	cmp	r5, #0
 801479a:	d044      	beq.n	8014826 <rcl_take_response+0xae>
 801479c:	682b      	ldr	r3, [r5, #0]
 801479e:	2b00      	cmp	r3, #0
 80147a0:	d041      	beq.n	8014826 <rcl_take_response+0xae>
 80147a2:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 80147a6:	2800      	cmp	r0, #0
 80147a8:	d03d      	beq.n	8014826 <rcl_take_response+0xae>
 80147aa:	2f00      	cmp	r7, #0
 80147ac:	d03e      	beq.n	801482c <rcl_take_response+0xb4>
 80147ae:	ed9f 7b26 	vldr	d7, [pc, #152]	@ 8014848 <rcl_take_response+0xd0>
 80147b2:	2300      	movs	r3, #0
 80147b4:	f88d 3013 	strb.w	r3, [sp, #19]
 80147b8:	463a      	mov	r2, r7
 80147ba:	f10d 0313 	add.w	r3, sp, #19
 80147be:	a90a      	add	r1, sp, #40	@ 0x28
 80147c0:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80147c4:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80147c8:	f004 f90a 	bl	80189e0 <rmw_take_response>
 80147cc:	4606      	mov	r6, r0
 80147ce:	bb78      	cbnz	r0, 8014830 <rcl_take_response+0xb8>
 80147d0:	f89d 3013 	ldrb.w	r3, [sp, #19]
 80147d4:	b373      	cbz	r3, 8014834 <rcl_take_response+0xbc>
 80147d6:	682b      	ldr	r3, [r5, #0]
 80147d8:	f8d3 2118 	ldr.w	r2, [r3, #280]	@ 0x118
 80147dc:	b1aa      	cbz	r2, 801480a <rcl_take_response+0x92>
 80147de:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 80147e2:	a905      	add	r1, sp, #20
 80147e4:	f003 fbec 	bl	8017fc0 <rmw_get_gid_for_client>
 80147e8:	bb38      	cbnz	r0, 801483a <rcl_take_response+0xc2>
 80147ea:	682b      	ldr	r3, [r5, #0]
 80147ec:	ed9d 7b12 	vldr	d7, [sp, #72]	@ 0x48
 80147f0:	f8d3 0118 	ldr.w	r0, [r3, #280]	@ 0x118
 80147f4:	ab06      	add	r3, sp, #24
 80147f6:	ed8d 7b00 	vstr	d7, [sp]
 80147fa:	463a      	mov	r2, r7
 80147fc:	9302      	str	r3, [sp, #8]
 80147fe:	2103      	movs	r1, #3
 8014800:	f000 fece 	bl	80155a0 <rcl_send_service_event_message>
 8014804:	2800      	cmp	r0, #0
 8014806:	bf18      	it	ne
 8014808:	4606      	movne	r6, r0
 801480a:	f10d 0e38 	add.w	lr, sp, #56	@ 0x38
 801480e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014812:	46a4      	mov	ip, r4
 8014814:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014818:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801481c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8014820:	4630      	mov	r0, r6
 8014822:	b015      	add	sp, #84	@ 0x54
 8014824:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014826:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 801482a:	e7ee      	b.n	801480a <rcl_take_response+0x92>
 801482c:	260b      	movs	r6, #11
 801482e:	e7ec      	b.n	801480a <rcl_take_response+0x92>
 8014830:	2601      	movs	r6, #1
 8014832:	e7ea      	b.n	801480a <rcl_take_response+0x92>
 8014834:	f240 16f5 	movw	r6, #501	@ 0x1f5
 8014838:	e7e7      	b.n	801480a <rcl_take_response+0x92>
 801483a:	f000 f813 	bl	8014864 <rcl_convert_rmw_ret_to_rcl_ret>
 801483e:	4606      	mov	r6, r0
 8014840:	e7e3      	b.n	801480a <rcl_take_response+0x92>
 8014842:	bf00      	nop
 8014844:	f3af 8000 	nop.w
	...

08014850 <rcl_client_is_valid>:
 8014850:	b130      	cbz	r0, 8014860 <rcl_client_is_valid+0x10>
 8014852:	6800      	ldr	r0, [r0, #0]
 8014854:	b120      	cbz	r0, 8014860 <rcl_client_is_valid+0x10>
 8014856:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801485a:	3800      	subs	r0, #0
 801485c:	bf18      	it	ne
 801485e:	2001      	movne	r0, #1
 8014860:	4770      	bx	lr
 8014862:	bf00      	nop

08014864 <rcl_convert_rmw_ret_to_rcl_ret>:
 8014864:	280b      	cmp	r0, #11
 8014866:	dc0d      	bgt.n	8014884 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 8014868:	2800      	cmp	r0, #0
 801486a:	db09      	blt.n	8014880 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 801486c:	280b      	cmp	r0, #11
 801486e:	d807      	bhi.n	8014880 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8014870:	e8df f000 	tbb	[pc, r0]
 8014874:	07060607 	.word	0x07060607
 8014878:	06060606 	.word	0x06060606
 801487c:	07070606 	.word	0x07070606
 8014880:	2001      	movs	r0, #1
 8014882:	4770      	bx	lr
 8014884:	28cb      	cmp	r0, #203	@ 0xcb
 8014886:	bf14      	ite	ne
 8014888:	2001      	movne	r0, #1
 801488a:	20cb      	moveq	r0, #203	@ 0xcb
 801488c:	4770      	bx	lr
 801488e:	bf00      	nop

08014890 <rcl_get_zero_initialized_context>:
 8014890:	4a03      	ldr	r2, [pc, #12]	@ (80148a0 <rcl_get_zero_initialized_context+0x10>)
 8014892:	4603      	mov	r3, r0
 8014894:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014898:	e883 0003 	stmia.w	r3, {r0, r1}
 801489c:	4618      	mov	r0, r3
 801489e:	4770      	bx	lr
 80148a0:	0802015c 	.word	0x0802015c

080148a4 <rcl_context_is_valid>:
 80148a4:	b118      	cbz	r0, 80148ae <rcl_context_is_valid+0xa>
 80148a6:	6840      	ldr	r0, [r0, #4]
 80148a8:	3800      	subs	r0, #0
 80148aa:	bf18      	it	ne
 80148ac:	2001      	movne	r0, #1
 80148ae:	4770      	bx	lr

080148b0 <__cleanup_context>:
 80148b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80148b4:	4606      	mov	r6, r0
 80148b6:	6800      	ldr	r0, [r0, #0]
 80148b8:	2300      	movs	r3, #0
 80148ba:	6073      	str	r3, [r6, #4]
 80148bc:	2800      	cmp	r0, #0
 80148be:	d042      	beq.n	8014946 <__cleanup_context+0x96>
 80148c0:	6943      	ldr	r3, [r0, #20]
 80148c2:	f8d0 9004 	ldr.w	r9, [r0, #4]
 80148c6:	6907      	ldr	r7, [r0, #16]
 80148c8:	b39b      	cbz	r3, 8014932 <__cleanup_context+0x82>
 80148ca:	3014      	adds	r0, #20
 80148cc:	f000 f9ca 	bl	8014c64 <rcl_init_options_fini>
 80148d0:	4680      	mov	r8, r0
 80148d2:	2800      	cmp	r0, #0
 80148d4:	d144      	bne.n	8014960 <__cleanup_context+0xb0>
 80148d6:	6830      	ldr	r0, [r6, #0]
 80148d8:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80148da:	b123      	cbz	r3, 80148e6 <__cleanup_context+0x36>
 80148dc:	3028      	adds	r0, #40	@ 0x28
 80148de:	f003 fdc3 	bl	8018468 <rmw_context_fini>
 80148e2:	bbb8      	cbnz	r0, 8014954 <__cleanup_context+0xa4>
 80148e4:	6830      	ldr	r0, [r6, #0]
 80148e6:	6a03      	ldr	r3, [r0, #32]
 80148e8:	b1db      	cbz	r3, 8014922 <__cleanup_context+0x72>
 80148ea:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 80148ee:	2a01      	cmp	r2, #1
 80148f0:	f17c 0100 	sbcs.w	r1, ip, #0
 80148f4:	db11      	blt.n	801491a <__cleanup_context+0x6a>
 80148f6:	2400      	movs	r4, #0
 80148f8:	4625      	mov	r5, r4
 80148fa:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80148fe:	4639      	mov	r1, r7
 8014900:	b1c8      	cbz	r0, 8014936 <__cleanup_context+0x86>
 8014902:	47c8      	blx	r9
 8014904:	6833      	ldr	r3, [r6, #0]
 8014906:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 801490a:	3401      	adds	r4, #1
 801490c:	f145 0500 	adc.w	r5, r5, #0
 8014910:	4294      	cmp	r4, r2
 8014912:	eb75 010c 	sbcs.w	r1, r5, ip
 8014916:	6a1b      	ldr	r3, [r3, #32]
 8014918:	dbef      	blt.n	80148fa <__cleanup_context+0x4a>
 801491a:	4618      	mov	r0, r3
 801491c:	4639      	mov	r1, r7
 801491e:	47c8      	blx	r9
 8014920:	6830      	ldr	r0, [r6, #0]
 8014922:	4639      	mov	r1, r7
 8014924:	47c8      	blx	r9
 8014926:	2300      	movs	r3, #0
 8014928:	e9c6 3300 	strd	r3, r3, [r6]
 801492c:	4640      	mov	r0, r8
 801492e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014932:	4698      	mov	r8, r3
 8014934:	e7d0      	b.n	80148d8 <__cleanup_context+0x28>
 8014936:	3401      	adds	r4, #1
 8014938:	f145 0500 	adc.w	r5, r5, #0
 801493c:	4294      	cmp	r4, r2
 801493e:	eb75 010c 	sbcs.w	r1, r5, ip
 8014942:	dbda      	blt.n	80148fa <__cleanup_context+0x4a>
 8014944:	e7e9      	b.n	801491a <__cleanup_context+0x6a>
 8014946:	4680      	mov	r8, r0
 8014948:	2300      	movs	r3, #0
 801494a:	e9c6 3300 	strd	r3, r3, [r6]
 801494e:	4640      	mov	r0, r8
 8014950:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014954:	f1b8 0f00 	cmp.w	r8, #0
 8014958:	d005      	beq.n	8014966 <__cleanup_context+0xb6>
 801495a:	f7f8 fca5 	bl	800d2a8 <rcutils_reset_error>
 801495e:	e7c1      	b.n	80148e4 <__cleanup_context+0x34>
 8014960:	f7f8 fca2 	bl	800d2a8 <rcutils_reset_error>
 8014964:	e7b7      	b.n	80148d6 <__cleanup_context+0x26>
 8014966:	f7ff ff7d 	bl	8014864 <rcl_convert_rmw_ret_to_rcl_ret>
 801496a:	4680      	mov	r8, r0
 801496c:	e7f5      	b.n	801495a <__cleanup_context+0xaa>
 801496e:	bf00      	nop

08014970 <rcl_init>:
 8014970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014974:	1e04      	subs	r4, r0, #0
 8014976:	b0a5      	sub	sp, #148	@ 0x94
 8014978:	460d      	mov	r5, r1
 801497a:	4617      	mov	r7, r2
 801497c:	461e      	mov	r6, r3
 801497e:	dd13      	ble.n	80149a8 <rcl_init+0x38>
 8014980:	b161      	cbz	r1, 801499c <rcl_init+0x2c>
 8014982:	f1a1 0e04 	sub.w	lr, r1, #4
 8014986:	f04f 0c00 	mov.w	ip, #0
 801498a:	e001      	b.n	8014990 <rcl_init+0x20>
 801498c:	4564      	cmp	r4, ip
 801498e:	d00d      	beq.n	80149ac <rcl_init+0x3c>
 8014990:	f85e 0f04 	ldr.w	r0, [lr, #4]!
 8014994:	f10c 0c01 	add.w	ip, ip, #1
 8014998:	2800      	cmp	r0, #0
 801499a:	d1f7      	bne.n	801498c <rcl_init+0x1c>
 801499c:	f04f 080b 	mov.w	r8, #11
 80149a0:	4640      	mov	r0, r8
 80149a2:	b025      	add	sp, #148	@ 0x94
 80149a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80149a8:	2900      	cmp	r1, #0
 80149aa:	d1f7      	bne.n	801499c <rcl_init+0x2c>
 80149ac:	2f00      	cmp	r7, #0
 80149ae:	d0f5      	beq.n	801499c <rcl_init+0x2c>
 80149b0:	683b      	ldr	r3, [r7, #0]
 80149b2:	2b00      	cmp	r3, #0
 80149b4:	d0f2      	beq.n	801499c <rcl_init+0x2c>
 80149b6:	469c      	mov	ip, r3
 80149b8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80149bc:	f10d 0e7c 	add.w	lr, sp, #124	@ 0x7c
 80149c0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80149c4:	f8dc 3000 	ldr.w	r3, [ip]
 80149c8:	f8ce 3000 	str.w	r3, [lr]
 80149cc:	a81f      	add	r0, sp, #124	@ 0x7c
 80149ce:	f7f8 fc45 	bl	800d25c <rcutils_allocator_is_valid>
 80149d2:	2800      	cmp	r0, #0
 80149d4:	d0e2      	beq.n	801499c <rcl_init+0x2c>
 80149d6:	2e00      	cmp	r6, #0
 80149d8:	d0e0      	beq.n	801499c <rcl_init+0x2c>
 80149da:	6833      	ldr	r3, [r6, #0]
 80149dc:	2b00      	cmp	r3, #0
 80149de:	d173      	bne.n	8014ac8 <rcl_init+0x158>
 80149e0:	e9dd 3222 	ldrd	r3, r2, [sp, #136]	@ 0x88
 80149e4:	2198      	movs	r1, #152	@ 0x98
 80149e6:	2001      	movs	r0, #1
 80149e8:	4798      	blx	r3
 80149ea:	4680      	mov	r8, r0
 80149ec:	6030      	str	r0, [r6, #0]
 80149ee:	2800      	cmp	r0, #0
 80149f0:	f000 80b2 	beq.w	8014b58 <rcl_init+0x1e8>
 80149f4:	a802      	add	r0, sp, #8
 80149f6:	f003 f85b 	bl	8017ab0 <rmw_get_zero_initialized_context>
 80149fa:	a902      	add	r1, sp, #8
 80149fc:	f108 0028 	add.w	r0, r8, #40	@ 0x28
 8014a00:	2270      	movs	r2, #112	@ 0x70
 8014a02:	f008 fdda 	bl	801d5ba <memcpy>
 8014a06:	f10d 0e7c 	add.w	lr, sp, #124	@ 0x7c
 8014a0a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014a0e:	f8d6 8000 	ldr.w	r8, [r6]
 8014a12:	46c4      	mov	ip, r8
 8014a14:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014a18:	f8de 3000 	ldr.w	r3, [lr]
 8014a1c:	f8cc 3000 	str.w	r3, [ip]
 8014a20:	f108 0114 	add.w	r1, r8, #20
 8014a24:	4638      	mov	r0, r7
 8014a26:	f000 f947 	bl	8014cb8 <rcl_init_options_copy>
 8014a2a:	4680      	mov	r8, r0
 8014a2c:	2800      	cmp	r0, #0
 8014a2e:	d147      	bne.n	8014ac0 <rcl_init+0x150>
 8014a30:	f8d6 9000 	ldr.w	r9, [r6]
 8014a34:	ea4f 7ae4 	mov.w	sl, r4, asr #31
 8014a38:	f8c9 0020 	str.w	r0, [r9, #32]
 8014a3c:	f8c9 4018 	str.w	r4, [r9, #24]
 8014a40:	f8c9 a01c 	str.w	sl, [r9, #28]
 8014a44:	2c00      	cmp	r4, #0
 8014a46:	d047      	beq.n	8014ad8 <rcl_init+0x168>
 8014a48:	2d00      	cmp	r5, #0
 8014a4a:	d045      	beq.n	8014ad8 <rcl_init+0x168>
 8014a4c:	e9dd 3222 	ldrd	r3, r2, [sp, #136]	@ 0x88
 8014a50:	2104      	movs	r1, #4
 8014a52:	4620      	mov	r0, r4
 8014a54:	4798      	blx	r3
 8014a56:	f8c9 0020 	str.w	r0, [r9, #32]
 8014a5a:	f8d6 9000 	ldr.w	r9, [r6]
 8014a5e:	f8d9 b020 	ldr.w	fp, [r9, #32]
 8014a62:	f1bb 0f00 	cmp.w	fp, #0
 8014a66:	d029      	beq.n	8014abc <rcl_init+0x14c>
 8014a68:	2c01      	cmp	r4, #1
 8014a6a:	f17a 0300 	sbcs.w	r3, sl, #0
 8014a6e:	db33      	blt.n	8014ad8 <rcl_init+0x168>
 8014a70:	f04f 0800 	mov.w	r8, #0
 8014a74:	3d04      	subs	r5, #4
 8014a76:	46c1      	mov	r9, r8
 8014a78:	e00d      	b.n	8014a96 <rcl_init+0x126>
 8014a7a:	6829      	ldr	r1, [r5, #0]
 8014a7c:	f008 fd9d 	bl	801d5ba <memcpy>
 8014a80:	f118 0801 	adds.w	r8, r8, #1
 8014a84:	f149 0900 	adc.w	r9, r9, #0
 8014a88:	45ca      	cmp	sl, r9
 8014a8a:	bf08      	it	eq
 8014a8c:	4544      	cmpeq	r4, r8
 8014a8e:	d021      	beq.n	8014ad4 <rcl_init+0x164>
 8014a90:	6833      	ldr	r3, [r6, #0]
 8014a92:	f8d3 b020 	ldr.w	fp, [r3, #32]
 8014a96:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8014a9a:	f7eb fc11 	bl	80002c0 <strlen>
 8014a9e:	1c42      	adds	r2, r0, #1
 8014aa0:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8014aa2:	9923      	ldr	r1, [sp, #140]	@ 0x8c
 8014aa4:	9201      	str	r2, [sp, #4]
 8014aa6:	4610      	mov	r0, r2
 8014aa8:	4798      	blx	r3
 8014aaa:	6833      	ldr	r3, [r6, #0]
 8014aac:	f84b 0028 	str.w	r0, [fp, r8, lsl #2]
 8014ab0:	6a1b      	ldr	r3, [r3, #32]
 8014ab2:	9a01      	ldr	r2, [sp, #4]
 8014ab4:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8014ab8:	2800      	cmp	r0, #0
 8014aba:	d1de      	bne.n	8014a7a <rcl_init+0x10a>
 8014abc:	f04f 080a 	mov.w	r8, #10
 8014ac0:	4630      	mov	r0, r6
 8014ac2:	f7ff fef5 	bl	80148b0 <__cleanup_context>
 8014ac6:	e76b      	b.n	80149a0 <rcl_init+0x30>
 8014ac8:	f04f 0864 	mov.w	r8, #100	@ 0x64
 8014acc:	4640      	mov	r0, r8
 8014ace:	b025      	add	sp, #148	@ 0x94
 8014ad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ad4:	f8d6 9000 	ldr.w	r9, [r6]
 8014ad8:	4a32      	ldr	r2, [pc, #200]	@ (8014ba4 <rcl_init+0x234>)
 8014ada:	6813      	ldr	r3, [r2, #0]
 8014adc:	3301      	adds	r3, #1
 8014ade:	d036      	beq.n	8014b4e <rcl_init+0x1de>
 8014ae0:	461d      	mov	r5, r3
 8014ae2:	2000      	movs	r0, #0
 8014ae4:	4619      	mov	r1, r3
 8014ae6:	f8d9 4014 	ldr.w	r4, [r9, #20]
 8014aea:	6073      	str	r3, [r6, #4]
 8014aec:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8014aee:	6011      	str	r1, [r2, #0]
 8014af0:	3301      	adds	r3, #1
 8014af2:	e9c4 5006 	strd	r5, r0, [r4, #24]
 8014af6:	d044      	beq.n	8014b82 <rcl_init+0x212>
 8014af8:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 8014afc:	b37b      	cbz	r3, 8014b5e <rcl_init+0x1ee>
 8014afe:	683a      	ldr	r2, [r7, #0]
 8014b00:	2b01      	cmp	r3, #1
 8014b02:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8014b06:	d036      	beq.n	8014b76 <rcl_init+0x206>
 8014b08:	f104 0534 	add.w	r5, r4, #52	@ 0x34
 8014b0c:	2a00      	cmp	r2, #0
 8014b0e:	d042      	beq.n	8014b96 <rcl_init+0x226>
 8014b10:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8014b12:	f894 0034 	ldrb.w	r0, [r4, #52]	@ 0x34
 8014b16:	b953      	cbnz	r3, 8014b2e <rcl_init+0x1be>
 8014b18:	2801      	cmp	r0, #1
 8014b1a:	d008      	beq.n	8014b2e <rcl_init+0x1be>
 8014b1c:	a91f      	add	r1, sp, #124	@ 0x7c
 8014b1e:	4628      	mov	r0, r5
 8014b20:	f006 fe2e 	bl	801b780 <rcl_get_discovery_static_peers>
 8014b24:	4680      	mov	r8, r0
 8014b26:	2800      	cmp	r0, #0
 8014b28:	d1ca      	bne.n	8014ac0 <rcl_init+0x150>
 8014b2a:	f894 0034 	ldrb.w	r0, [r4, #52]	@ 0x34
 8014b2e:	f006 fe1d 	bl	801b76c <rcl_automatic_discovery_range_to_string>
 8014b32:	6831      	ldr	r1, [r6, #0]
 8014b34:	6948      	ldr	r0, [r1, #20]
 8014b36:	3128      	adds	r1, #40	@ 0x28
 8014b38:	3018      	adds	r0, #24
 8014b3a:	f003 fb61 	bl	8018200 <rmw_init>
 8014b3e:	4680      	mov	r8, r0
 8014b40:	2800      	cmp	r0, #0
 8014b42:	f43f af2d 	beq.w	80149a0 <rcl_init+0x30>
 8014b46:	f7ff fe8d 	bl	8014864 <rcl_convert_rmw_ret_to_rcl_ret>
 8014b4a:	4680      	mov	r8, r0
 8014b4c:	e7b8      	b.n	8014ac0 <rcl_init+0x150>
 8014b4e:	2101      	movs	r1, #1
 8014b50:	4618      	mov	r0, r3
 8014b52:	460d      	mov	r5, r1
 8014b54:	460b      	mov	r3, r1
 8014b56:	e7c6      	b.n	8014ae6 <rcl_init+0x176>
 8014b58:	f04f 080a 	mov.w	r8, #10
 8014b5c:	e720      	b.n	80149a0 <rcl_init+0x30>
 8014b5e:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8014b62:	f000 f905 	bl	8014d70 <rcl_get_localhost_only>
 8014b66:	4680      	mov	r8, r0
 8014b68:	2800      	cmp	r0, #0
 8014b6a:	d1a9      	bne.n	8014ac0 <rcl_init+0x150>
 8014b6c:	6832      	ldr	r2, [r6, #0]
 8014b6e:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 8014b72:	6954      	ldr	r4, [r2, #20]
 8014b74:	e7c3      	b.n	8014afe <rcl_init+0x18e>
 8014b76:	2002      	movs	r0, #2
 8014b78:	2300      	movs	r3, #0
 8014b7a:	f884 0034 	strb.w	r0, [r4, #52]	@ 0x34
 8014b7e:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8014b80:	e7d5      	b.n	8014b2e <rcl_init+0x1be>
 8014b82:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8014b86:	f006 fe65 	bl	801b854 <rcl_get_default_domain_id>
 8014b8a:	4680      	mov	r8, r0
 8014b8c:	2800      	cmp	r0, #0
 8014b8e:	d197      	bne.n	8014ac0 <rcl_init+0x150>
 8014b90:	6833      	ldr	r3, [r6, #0]
 8014b92:	695c      	ldr	r4, [r3, #20]
 8014b94:	e7b0      	b.n	8014af8 <rcl_init+0x188>
 8014b96:	4628      	mov	r0, r5
 8014b98:	f006 fda6 	bl	801b6e8 <rcl_get_automatic_discovery_range>
 8014b9c:	4680      	mov	r8, r0
 8014b9e:	2800      	cmp	r0, #0
 8014ba0:	d0b6      	beq.n	8014b10 <rcl_init+0x1a0>
 8014ba2:	e78d      	b.n	8014ac0 <rcl_init+0x150>
 8014ba4:	20019540 	.word	0x20019540

08014ba8 <rcl_get_zero_initialized_init_options>:
 8014ba8:	2000      	movs	r0, #0
 8014baa:	4770      	bx	lr

08014bac <rcl_init_options_init>:
 8014bac:	b084      	sub	sp, #16
 8014bae:	b570      	push	{r4, r5, r6, lr}
 8014bb0:	b09e      	sub	sp, #120	@ 0x78
 8014bb2:	ad23      	add	r5, sp, #140	@ 0x8c
 8014bb4:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 8014bb8:	2800      	cmp	r0, #0
 8014bba:	d046      	beq.n	8014c4a <rcl_init_options_init+0x9e>
 8014bbc:	6803      	ldr	r3, [r0, #0]
 8014bbe:	4604      	mov	r4, r0
 8014bc0:	b133      	cbz	r3, 8014bd0 <rcl_init_options_init+0x24>
 8014bc2:	2564      	movs	r5, #100	@ 0x64
 8014bc4:	4628      	mov	r0, r5
 8014bc6:	b01e      	add	sp, #120	@ 0x78
 8014bc8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014bcc:	b004      	add	sp, #16
 8014bce:	4770      	bx	lr
 8014bd0:	4628      	mov	r0, r5
 8014bd2:	f7f8 fb43 	bl	800d25c <rcutils_allocator_is_valid>
 8014bd6:	2800      	cmp	r0, #0
 8014bd8:	d037      	beq.n	8014c4a <rcl_init_options_init+0x9e>
 8014bda:	46ae      	mov	lr, r5
 8014bdc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014be0:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 8014be4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014be8:	f8de 3000 	ldr.w	r3, [lr]
 8014bec:	f8cc 3000 	str.w	r3, [ip]
 8014bf0:	9927      	ldr	r1, [sp, #156]	@ 0x9c
 8014bf2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8014bf4:	2070      	movs	r0, #112	@ 0x70
 8014bf6:	4798      	blx	r3
 8014bf8:	4606      	mov	r6, r0
 8014bfa:	6020      	str	r0, [r4, #0]
 8014bfc:	b338      	cbz	r0, 8014c4e <rcl_init_options_init+0xa2>
 8014bfe:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 8014c02:	4686      	mov	lr, r0
 8014c04:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014c08:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014c0c:	f8dc 3000 	ldr.w	r3, [ip]
 8014c10:	f8ce 3000 	str.w	r3, [lr]
 8014c14:	a802      	add	r0, sp, #8
 8014c16:	f002 ff63 	bl	8017ae0 <rmw_get_zero_initialized_init_options>
 8014c1a:	2258      	movs	r2, #88	@ 0x58
 8014c1c:	a902      	add	r1, sp, #8
 8014c1e:	f106 0018 	add.w	r0, r6, #24
 8014c22:	f008 fcca 	bl	801d5ba <memcpy>
 8014c26:	ab26      	add	r3, sp, #152	@ 0x98
 8014c28:	e893 0003 	ldmia.w	r3, {r0, r1}
 8014c2c:	6826      	ldr	r6, [r4, #0]
 8014c2e:	e88d 0003 	stmia.w	sp, {r0, r1}
 8014c32:	f106 0018 	add.w	r0, r6, #24
 8014c36:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8014c3a:	f003 f9e5 	bl	8018008 <rmw_init_options_init>
 8014c3e:	4605      	mov	r5, r0
 8014c40:	b938      	cbnz	r0, 8014c52 <rcl_init_options_init+0xa6>
 8014c42:	6823      	ldr	r3, [r4, #0]
 8014c44:	f883 0034 	strb.w	r0, [r3, #52]	@ 0x34
 8014c48:	e7bc      	b.n	8014bc4 <rcl_init_options_init+0x18>
 8014c4a:	250b      	movs	r5, #11
 8014c4c:	e7ba      	b.n	8014bc4 <rcl_init_options_init+0x18>
 8014c4e:	250a      	movs	r5, #10
 8014c50:	e7b8      	b.n	8014bc4 <rcl_init_options_init+0x18>
 8014c52:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8014c54:	9927      	ldr	r1, [sp, #156]	@ 0x9c
 8014c56:	6820      	ldr	r0, [r4, #0]
 8014c58:	4798      	blx	r3
 8014c5a:	4628      	mov	r0, r5
 8014c5c:	f7ff fe02 	bl	8014864 <rcl_convert_rmw_ret_to_rcl_ret>
 8014c60:	4605      	mov	r5, r0
 8014c62:	e7af      	b.n	8014bc4 <rcl_init_options_init+0x18>

08014c64 <rcl_init_options_fini>:
 8014c64:	b530      	push	{r4, r5, lr}
 8014c66:	b087      	sub	sp, #28
 8014c68:	b1f0      	cbz	r0, 8014ca8 <rcl_init_options_fini+0x44>
 8014c6a:	6803      	ldr	r3, [r0, #0]
 8014c6c:	4604      	mov	r4, r0
 8014c6e:	b1db      	cbz	r3, 8014ca8 <rcl_init_options_fini+0x44>
 8014c70:	469c      	mov	ip, r3
 8014c72:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014c76:	f10d 0e04 	add.w	lr, sp, #4
 8014c7a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014c7e:	f8dc 3000 	ldr.w	r3, [ip]
 8014c82:	f8ce 3000 	str.w	r3, [lr]
 8014c86:	a801      	add	r0, sp, #4
 8014c88:	f7f8 fae8 	bl	800d25c <rcutils_allocator_is_valid>
 8014c8c:	b160      	cbz	r0, 8014ca8 <rcl_init_options_fini+0x44>
 8014c8e:	6820      	ldr	r0, [r4, #0]
 8014c90:	3018      	adds	r0, #24
 8014c92:	f003 fa7b 	bl	801818c <rmw_init_options_fini>
 8014c96:	4605      	mov	r5, r0
 8014c98:	b950      	cbnz	r0, 8014cb0 <rcl_init_options_fini+0x4c>
 8014c9a:	6820      	ldr	r0, [r4, #0]
 8014c9c:	9b02      	ldr	r3, [sp, #8]
 8014c9e:	9905      	ldr	r1, [sp, #20]
 8014ca0:	4798      	blx	r3
 8014ca2:	4628      	mov	r0, r5
 8014ca4:	b007      	add	sp, #28
 8014ca6:	bd30      	pop	{r4, r5, pc}
 8014ca8:	250b      	movs	r5, #11
 8014caa:	4628      	mov	r0, r5
 8014cac:	b007      	add	sp, #28
 8014cae:	bd30      	pop	{r4, r5, pc}
 8014cb0:	f7ff fdd8 	bl	8014864 <rcl_convert_rmw_ret_to_rcl_ret>
 8014cb4:	4605      	mov	r5, r0
 8014cb6:	e7f8      	b.n	8014caa <rcl_init_options_fini+0x46>

08014cb8 <rcl_init_options_copy>:
 8014cb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014cba:	b09d      	sub	sp, #116	@ 0x74
 8014cbc:	2800      	cmp	r0, #0
 8014cbe:	d04a      	beq.n	8014d56 <rcl_init_options_copy+0x9e>
 8014cc0:	4604      	mov	r4, r0
 8014cc2:	6800      	ldr	r0, [r0, #0]
 8014cc4:	2800      	cmp	r0, #0
 8014cc6:	d046      	beq.n	8014d56 <rcl_init_options_copy+0x9e>
 8014cc8:	460d      	mov	r5, r1
 8014cca:	f7f8 fac7 	bl	800d25c <rcutils_allocator_is_valid>
 8014cce:	2800      	cmp	r0, #0
 8014cd0:	d041      	beq.n	8014d56 <rcl_init_options_copy+0x9e>
 8014cd2:	2d00      	cmp	r5, #0
 8014cd4:	d03f      	beq.n	8014d56 <rcl_init_options_copy+0x9e>
 8014cd6:	682b      	ldr	r3, [r5, #0]
 8014cd8:	b11b      	cbz	r3, 8014ce2 <rcl_init_options_copy+0x2a>
 8014cda:	2464      	movs	r4, #100	@ 0x64
 8014cdc:	4620      	mov	r0, r4
 8014cde:	b01d      	add	sp, #116	@ 0x74
 8014ce0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014ce2:	6826      	ldr	r6, [r4, #0]
 8014ce4:	46b6      	mov	lr, r6
 8014ce6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014cea:	f10d 0c5c 	add.w	ip, sp, #92	@ 0x5c
 8014cee:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014cf2:	f8de 3000 	ldr.w	r3, [lr]
 8014cf6:	6837      	ldr	r7, [r6, #0]
 8014cf8:	f8cc 3000 	str.w	r3, [ip]
 8014cfc:	4619      	mov	r1, r3
 8014cfe:	2070      	movs	r0, #112	@ 0x70
 8014d00:	47b8      	blx	r7
 8014d02:	4606      	mov	r6, r0
 8014d04:	6028      	str	r0, [r5, #0]
 8014d06:	b350      	cbz	r0, 8014d5e <rcl_init_options_copy+0xa6>
 8014d08:	f10d 0c5c 	add.w	ip, sp, #92	@ 0x5c
 8014d0c:	4686      	mov	lr, r0
 8014d0e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014d12:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014d16:	f8dc 3000 	ldr.w	r3, [ip]
 8014d1a:	f8ce 3000 	str.w	r3, [lr]
 8014d1e:	4668      	mov	r0, sp
 8014d20:	f002 fede 	bl	8017ae0 <rmw_get_zero_initialized_init_options>
 8014d24:	2258      	movs	r2, #88	@ 0x58
 8014d26:	4669      	mov	r1, sp
 8014d28:	f106 0018 	add.w	r0, r6, #24
 8014d2c:	f008 fc45 	bl	801d5ba <memcpy>
 8014d30:	6820      	ldr	r0, [r4, #0]
 8014d32:	6829      	ldr	r1, [r5, #0]
 8014d34:	3018      	adds	r0, #24
 8014d36:	3118      	adds	r1, #24
 8014d38:	f003 f9c8 	bl	80180cc <rmw_init_options_copy>
 8014d3c:	4604      	mov	r4, r0
 8014d3e:	2800      	cmp	r0, #0
 8014d40:	d0cc      	beq.n	8014cdc <rcl_init_options_copy+0x24>
 8014d42:	f7f8 fa99 	bl	800d278 <rcutils_get_error_string>
 8014d46:	f7f8 faaf 	bl	800d2a8 <rcutils_reset_error>
 8014d4a:	4628      	mov	r0, r5
 8014d4c:	f7ff ff8a 	bl	8014c64 <rcl_init_options_fini>
 8014d50:	b138      	cbz	r0, 8014d62 <rcl_init_options_copy+0xaa>
 8014d52:	4604      	mov	r4, r0
 8014d54:	e7c2      	b.n	8014cdc <rcl_init_options_copy+0x24>
 8014d56:	240b      	movs	r4, #11
 8014d58:	4620      	mov	r0, r4
 8014d5a:	b01d      	add	sp, #116	@ 0x74
 8014d5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014d5e:	240a      	movs	r4, #10
 8014d60:	e7bc      	b.n	8014cdc <rcl_init_options_copy+0x24>
 8014d62:	4620      	mov	r0, r4
 8014d64:	b01d      	add	sp, #116	@ 0x74
 8014d66:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8014d6a:	f7ff bd7b 	b.w	8014864 <rcl_convert_rmw_ret_to_rcl_ret>
 8014d6e:	bf00      	nop

08014d70 <rcl_get_localhost_only>:
 8014d70:	b510      	push	{r4, lr}
 8014d72:	b082      	sub	sp, #8
 8014d74:	2300      	movs	r3, #0
 8014d76:	9301      	str	r3, [sp, #4]
 8014d78:	b1b8      	cbz	r0, 8014daa <rcl_get_localhost_only+0x3a>
 8014d7a:	4604      	mov	r4, r0
 8014d7c:	a901      	add	r1, sp, #4
 8014d7e:	480c      	ldr	r0, [pc, #48]	@ (8014db0 <rcl_get_localhost_only+0x40>)
 8014d80:	f002 fbe4 	bl	801754c <rcutils_get_env>
 8014d84:	b110      	cbz	r0, 8014d8c <rcl_get_localhost_only+0x1c>
 8014d86:	2001      	movs	r0, #1
 8014d88:	b002      	add	sp, #8
 8014d8a:	bd10      	pop	{r4, pc}
 8014d8c:	9b01      	ldr	r3, [sp, #4]
 8014d8e:	b10b      	cbz	r3, 8014d94 <rcl_get_localhost_only+0x24>
 8014d90:	781b      	ldrb	r3, [r3, #0]
 8014d92:	b923      	cbnz	r3, 8014d9e <rcl_get_localhost_only+0x2e>
 8014d94:	2300      	movs	r3, #0
 8014d96:	7023      	strb	r3, [r4, #0]
 8014d98:	2000      	movs	r0, #0
 8014d9a:	b002      	add	sp, #8
 8014d9c:	bd10      	pop	{r4, pc}
 8014d9e:	2b31      	cmp	r3, #49	@ 0x31
 8014da0:	bf14      	ite	ne
 8014da2:	2302      	movne	r3, #2
 8014da4:	2301      	moveq	r3, #1
 8014da6:	7023      	strb	r3, [r4, #0]
 8014da8:	e7f6      	b.n	8014d98 <rcl_get_localhost_only+0x28>
 8014daa:	200b      	movs	r0, #11
 8014dac:	b002      	add	sp, #8
 8014dae:	bd10      	pop	{r4, pc}
 8014db0:	0801f404 	.word	0x0801f404

08014db4 <rcl_get_zero_initialized_node>:
 8014db4:	4a03      	ldr	r2, [pc, #12]	@ (8014dc4 <rcl_get_zero_initialized_node+0x10>)
 8014db6:	4603      	mov	r3, r0
 8014db8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014dbc:	e883 0003 	stmia.w	r3, {r0, r1}
 8014dc0:	4618      	mov	r0, r3
 8014dc2:	4770      	bx	lr
 8014dc4:	08020164 	.word	0x08020164

08014dc8 <rcl_node_init>:
 8014dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014dcc:	b0ab      	sub	sp, #172	@ 0xac
 8014dce:	4604      	mov	r4, r0
 8014dd0:	9d34      	ldr	r5, [sp, #208]	@ 0xd0
 8014dd2:	a825      	add	r0, sp, #148	@ 0x94
 8014dd4:	4689      	mov	r9, r1
 8014dd6:	4690      	mov	r8, r2
 8014dd8:	461f      	mov	r7, r3
 8014dda:	f006 ff59 	bl	801bc90 <rcl_guard_condition_get_default_options>
 8014dde:	2d00      	cmp	r5, #0
 8014de0:	f000 80d8 	beq.w	8014f94 <rcl_node_init+0x1cc>
 8014de4:	4628      	mov	r0, r5
 8014de6:	f7f8 fa39 	bl	800d25c <rcutils_allocator_is_valid>
 8014dea:	2800      	cmp	r0, #0
 8014dec:	f000 80d2 	beq.w	8014f94 <rcl_node_init+0x1cc>
 8014df0:	f1b9 0f00 	cmp.w	r9, #0
 8014df4:	f000 80ce 	beq.w	8014f94 <rcl_node_init+0x1cc>
 8014df8:	f1b8 0f00 	cmp.w	r8, #0
 8014dfc:	f000 80ca 	beq.w	8014f94 <rcl_node_init+0x1cc>
 8014e00:	2c00      	cmp	r4, #0
 8014e02:	f000 80c7 	beq.w	8014f94 <rcl_node_init+0x1cc>
 8014e06:	6866      	ldr	r6, [r4, #4]
 8014e08:	2e00      	cmp	r6, #0
 8014e0a:	f040 80ca 	bne.w	8014fa2 <rcl_node_init+0x1da>
 8014e0e:	2f00      	cmp	r7, #0
 8014e10:	f000 80c0 	beq.w	8014f94 <rcl_node_init+0x1cc>
 8014e14:	4638      	mov	r0, r7
 8014e16:	f7ff fd45 	bl	80148a4 <rcl_context_is_valid>
 8014e1a:	2800      	cmp	r0, #0
 8014e1c:	f000 80bf 	beq.w	8014f9e <rcl_node_init+0x1d6>
 8014e20:	4632      	mov	r2, r6
 8014e22:	a924      	add	r1, sp, #144	@ 0x90
 8014e24:	4648      	mov	r0, r9
 8014e26:	9624      	str	r6, [sp, #144]	@ 0x90
 8014e28:	f003 f80a 	bl	8017e40 <rmw_validate_node_name>
 8014e2c:	4606      	mov	r6, r0
 8014e2e:	2800      	cmp	r0, #0
 8014e30:	f040 80b1 	bne.w	8014f96 <rcl_node_init+0x1ce>
 8014e34:	9824      	ldr	r0, [sp, #144]	@ 0x90
 8014e36:	2800      	cmp	r0, #0
 8014e38:	f040 8104 	bne.w	8015044 <rcl_node_init+0x27c>
 8014e3c:	f898 3000 	ldrb.w	r3, [r8]
 8014e40:	2b00      	cmp	r3, #0
 8014e42:	f000 80f0 	beq.w	8015026 <rcl_node_init+0x25e>
 8014e46:	2b2f      	cmp	r3, #47	@ 0x2f
 8014e48:	f000 80b0 	beq.w	8014fac <rcl_node_init+0x1e4>
 8014e4c:	4b85      	ldr	r3, [pc, #532]	@ (8015064 <rcl_node_init+0x29c>)
 8014e4e:	f8cd 800c 	str.w	r8, [sp, #12]
 8014e52:	9302      	str	r3, [sp, #8]
 8014e54:	692b      	ldr	r3, [r5, #16]
 8014e56:	9300      	str	r3, [sp, #0]
 8014e58:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8014e5c:	9301      	str	r3, [sp, #4]
 8014e5e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8014e62:	f002 fb8b 	bl	801757c <rcutils_format_string_limit>
 8014e66:	4680      	mov	r8, r0
 8014e68:	f1b8 0f00 	cmp.w	r8, #0
 8014e6c:	f000 80e8 	beq.w	8015040 <rcl_node_init+0x278>
 8014e70:	2200      	movs	r2, #0
 8014e72:	a924      	add	r1, sp, #144	@ 0x90
 8014e74:	4640      	mov	r0, r8
 8014e76:	9224      	str	r2, [sp, #144]	@ 0x90
 8014e78:	f002 ffc4 	bl	8017e04 <rmw_validate_namespace>
 8014e7c:	4606      	mov	r6, r0
 8014e7e:	2800      	cmp	r0, #0
 8014e80:	f040 80a4 	bne.w	8014fcc <rcl_node_init+0x204>
 8014e84:	9824      	ldr	r0, [sp, #144]	@ 0x90
 8014e86:	2800      	cmp	r0, #0
 8014e88:	f040 809d 	bne.w	8014fc6 <rcl_node_init+0x1fe>
 8014e8c:	e9d5 3203 	ldrd	r3, r2, [r5, #12]
 8014e90:	2178      	movs	r1, #120	@ 0x78
 8014e92:	2001      	movs	r0, #1
 8014e94:	4798      	blx	r3
 8014e96:	4606      	mov	r6, r0
 8014e98:	6060      	str	r0, [r4, #4]
 8014e9a:	2800      	cmp	r0, #0
 8014e9c:	f000 80d6 	beq.w	801504c <rcl_node_init+0x284>
 8014ea0:	a80a      	add	r0, sp, #40	@ 0x28
 8014ea2:	f000 f92f 	bl	8015104 <rcl_node_get_default_options>
 8014ea6:	a90a      	add	r1, sp, #40	@ 0x28
 8014ea8:	4630      	mov	r0, r6
 8014eaa:	2268      	movs	r2, #104	@ 0x68
 8014eac:	f008 fb85 	bl	801d5ba <memcpy>
 8014eb0:	6861      	ldr	r1, [r4, #4]
 8014eb2:	6027      	str	r7, [r4, #0]
 8014eb4:	4628      	mov	r0, r5
 8014eb6:	f000 f933 	bl	8015120 <rcl_node_options_copy>
 8014eba:	4606      	mov	r6, r0
 8014ebc:	2800      	cmp	r0, #0
 8014ebe:	f040 8085 	bne.w	8014fcc <rcl_node_init+0x204>
 8014ec2:	4640      	mov	r0, r8
 8014ec4:	f7eb f9fc 	bl	80002c0 <strlen>
 8014ec8:	eb08 0300 	add.w	r3, r8, r0
 8014ecc:	6866      	ldr	r6, [r4, #4]
 8014ece:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8014ed2:	e9cd 8903 	strd	r8, r9, [sp, #12]
 8014ed6:	2b2f      	cmp	r3, #47	@ 0x2f
 8014ed8:	bf0c      	ite	eq
 8014eda:	4b63      	ldreq	r3, [pc, #396]	@ (8015068 <rcl_node_init+0x2a0>)
 8014edc:	4b63      	ldrne	r3, [pc, #396]	@ (801506c <rcl_node_init+0x2a4>)
 8014ede:	9302      	str	r3, [sp, #8]
 8014ee0:	692b      	ldr	r3, [r5, #16]
 8014ee2:	9300      	str	r3, [sp, #0]
 8014ee4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8014ee8:	9301      	str	r3, [sp, #4]
 8014eea:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8014eee:	f002 fb45 	bl	801757c <rcutils_format_string_limit>
 8014ef2:	6863      	ldr	r3, [r4, #4]
 8014ef4:	6770      	str	r0, [r6, #116]	@ 0x74
 8014ef6:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8014ef8:	2a00      	cmp	r2, #0
 8014efa:	f000 80a9 	beq.w	8015050 <rcl_node_init+0x288>
 8014efe:	6822      	ldr	r2, [r4, #0]
 8014f00:	9307      	str	r3, [sp, #28]
 8014f02:	6810      	ldr	r0, [r2, #0]
 8014f04:	4649      	mov	r1, r9
 8014f06:	3028      	adds	r0, #40	@ 0x28
 8014f08:	4642      	mov	r2, r8
 8014f0a:	f003 fbd1 	bl	80186b0 <rmw_create_node>
 8014f0e:	9b07      	ldr	r3, [sp, #28]
 8014f10:	6698      	str	r0, [r3, #104]	@ 0x68
 8014f12:	6863      	ldr	r3, [r4, #4]
 8014f14:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8014f16:	2800      	cmp	r0, #0
 8014f18:	f000 809d 	beq.w	8015056 <rcl_node_init+0x28e>
 8014f1c:	f003 fc5a 	bl	80187d4 <rmw_node_get_graph_guard_condition>
 8014f20:	4681      	mov	r9, r0
 8014f22:	2800      	cmp	r0, #0
 8014f24:	f000 809c 	beq.w	8015060 <rcl_node_init+0x298>
 8014f28:	682b      	ldr	r3, [r5, #0]
 8014f2a:	6929      	ldr	r1, [r5, #16]
 8014f2c:	6866      	ldr	r6, [r4, #4]
 8014f2e:	2008      	movs	r0, #8
 8014f30:	4798      	blx	r3
 8014f32:	6863      	ldr	r3, [r4, #4]
 8014f34:	66f0      	str	r0, [r6, #108]	@ 0x6c
 8014f36:	f8d3 a06c 	ldr.w	sl, [r3, #108]	@ 0x6c
 8014f3a:	f1ba 0f00 	cmp.w	sl, #0
 8014f3e:	f000 808d 	beq.w	801505c <rcl_node_init+0x294>
 8014f42:	f10d 0b20 	add.w	fp, sp, #32
 8014f46:	4658      	mov	r0, fp
 8014f48:	f006 fe16 	bl	801bb78 <rcl_get_zero_initialized_guard_condition>
 8014f4c:	e89b 0003 	ldmia.w	fp, {r0, r1}
 8014f50:	6863      	ldr	r3, [r4, #4]
 8014f52:	46ac      	mov	ip, r5
 8014f54:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 8014f58:	e88a 0003 	stmia.w	sl, {r0, r1}
 8014f5c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014f60:	ae25      	add	r6, sp, #148	@ 0x94
 8014f62:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8014f64:	f8dc 3000 	ldr.w	r3, [ip]
 8014f68:	6033      	str	r3, [r6, #0]
 8014f6a:	ab2a      	add	r3, sp, #168	@ 0xa8
 8014f6c:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 8014f70:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8014f74:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8014f76:	463a      	mov	r2, r7
 8014f78:	4649      	mov	r1, r9
 8014f7a:	4670      	mov	r0, lr
 8014f7c:	f006 fe06 	bl	801bb8c <rcl_guard_condition_init_from_rmw>
 8014f80:	4606      	mov	r6, r0
 8014f82:	bb18      	cbnz	r0, 8014fcc <rcl_node_init+0x204>
 8014f84:	686b      	ldr	r3, [r5, #4]
 8014f86:	6929      	ldr	r1, [r5, #16]
 8014f88:	4798      	blx	r3
 8014f8a:	686b      	ldr	r3, [r5, #4]
 8014f8c:	6929      	ldr	r1, [r5, #16]
 8014f8e:	4640      	mov	r0, r8
 8014f90:	4798      	blx	r3
 8014f92:	e000      	b.n	8014f96 <rcl_node_init+0x1ce>
 8014f94:	260b      	movs	r6, #11
 8014f96:	4630      	mov	r0, r6
 8014f98:	b02b      	add	sp, #172	@ 0xac
 8014f9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f9e:	2665      	movs	r6, #101	@ 0x65
 8014fa0:	e7f9      	b.n	8014f96 <rcl_node_init+0x1ce>
 8014fa2:	2664      	movs	r6, #100	@ 0x64
 8014fa4:	4630      	mov	r0, r6
 8014fa6:	b02b      	add	sp, #172	@ 0xac
 8014fa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014fac:	f105 030c 	add.w	r3, r5, #12
 8014fb0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8014fb4:	e88d 0003 	stmia.w	sp, {r0, r1}
 8014fb8:	4640      	mov	r0, r8
 8014fba:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8014fbe:	f002 fbfb 	bl	80177b8 <rcutils_strdup>
 8014fc2:	4680      	mov	r8, r0
 8014fc4:	e750      	b.n	8014e68 <rcl_node_init+0xa0>
 8014fc6:	f002 ff2f 	bl	8017e28 <rmw_namespace_validation_result_string>
 8014fca:	26ca      	movs	r6, #202	@ 0xca
 8014fcc:	6863      	ldr	r3, [r4, #4]
 8014fce:	b1f3      	cbz	r3, 801500e <rcl_node_init+0x246>
 8014fd0:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8014fd2:	b138      	cbz	r0, 8014fe4 <rcl_node_init+0x21c>
 8014fd4:	f006 fe3a 	bl	801bc4c <rcl_guard_condition_fini>
 8014fd8:	6863      	ldr	r3, [r4, #4]
 8014fda:	6929      	ldr	r1, [r5, #16]
 8014fdc:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8014fde:	686b      	ldr	r3, [r5, #4]
 8014fe0:	4798      	blx	r3
 8014fe2:	6863      	ldr	r3, [r4, #4]
 8014fe4:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8014fe6:	b110      	cbz	r0, 8014fee <rcl_node_init+0x226>
 8014fe8:	f003 fb78 	bl	80186dc <rmw_destroy_node>
 8014fec:	6863      	ldr	r3, [r4, #4]
 8014fee:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8014ff0:	6929      	ldr	r1, [r5, #16]
 8014ff2:	686b      	ldr	r3, [r5, #4]
 8014ff4:	4798      	blx	r3
 8014ff6:	6863      	ldr	r3, [r4, #4]
 8014ff8:	6929      	ldr	r1, [r5, #16]
 8014ffa:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8014ffc:	686b      	ldr	r3, [r5, #4]
 8014ffe:	4798      	blx	r3
 8015000:	6860      	ldr	r0, [r4, #4]
 8015002:	f000 f8ab 	bl	801515c <rcl_node_options_fini>
 8015006:	686b      	ldr	r3, [r5, #4]
 8015008:	6929      	ldr	r1, [r5, #16]
 801500a:	6860      	ldr	r0, [r4, #4]
 801500c:	4798      	blx	r3
 801500e:	686b      	ldr	r3, [r5, #4]
 8015010:	6929      	ldr	r1, [r5, #16]
 8015012:	2000      	movs	r0, #0
 8015014:	4798      	blx	r3
 8015016:	686b      	ldr	r3, [r5, #4]
 8015018:	6929      	ldr	r1, [r5, #16]
 801501a:	4640      	mov	r0, r8
 801501c:	4798      	blx	r3
 801501e:	2300      	movs	r3, #0
 8015020:	e9c4 3300 	strd	r3, r3, [r4]
 8015024:	e7b7      	b.n	8014f96 <rcl_node_init+0x1ce>
 8015026:	f105 030c 	add.w	r3, r5, #12
 801502a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801502e:	e88d 0003 	stmia.w	sp, {r0, r1}
 8015032:	480f      	ldr	r0, [pc, #60]	@ (8015070 <rcl_node_init+0x2a8>)
 8015034:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8015038:	f002 fbbe 	bl	80177b8 <rcutils_strdup>
 801503c:	4680      	mov	r8, r0
 801503e:	e713      	b.n	8014e68 <rcl_node_init+0xa0>
 8015040:	260a      	movs	r6, #10
 8015042:	e7a8      	b.n	8014f96 <rcl_node_init+0x1ce>
 8015044:	f002 ff48 	bl	8017ed8 <rmw_node_name_validation_result_string>
 8015048:	26c9      	movs	r6, #201	@ 0xc9
 801504a:	e7a4      	b.n	8014f96 <rcl_node_init+0x1ce>
 801504c:	260a      	movs	r6, #10
 801504e:	e7de      	b.n	801500e <rcl_node_init+0x246>
 8015050:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8015052:	260a      	movs	r6, #10
 8015054:	e7bd      	b.n	8014fd2 <rcl_node_init+0x20a>
 8015056:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8015058:	2601      	movs	r6, #1
 801505a:	e7ba      	b.n	8014fd2 <rcl_node_init+0x20a>
 801505c:	260a      	movs	r6, #10
 801505e:	e7c1      	b.n	8014fe4 <rcl_node_init+0x21c>
 8015060:	2601      	movs	r6, #1
 8015062:	e7b3      	b.n	8014fcc <rcl_node_init+0x204>
 8015064:	0801f41c 	.word	0x0801f41c
 8015068:	0801ede8 	.word	0x0801ede8
 801506c:	0801f420 	.word	0x0801f420
 8015070:	0801f418 	.word	0x0801f418

08015074 <rcl_node_is_valid>:
 8015074:	b130      	cbz	r0, 8015084 <rcl_node_is_valid+0x10>
 8015076:	6843      	ldr	r3, [r0, #4]
 8015078:	b123      	cbz	r3, 8015084 <rcl_node_is_valid+0x10>
 801507a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801507c:	b113      	cbz	r3, 8015084 <rcl_node_is_valid+0x10>
 801507e:	6800      	ldr	r0, [r0, #0]
 8015080:	f7ff bc10 	b.w	80148a4 <rcl_context_is_valid>
 8015084:	2000      	movs	r0, #0
 8015086:	4770      	bx	lr

08015088 <rcl_node_get_name>:
 8015088:	b120      	cbz	r0, 8015094 <rcl_node_get_name+0xc>
 801508a:	6840      	ldr	r0, [r0, #4]
 801508c:	b110      	cbz	r0, 8015094 <rcl_node_get_name+0xc>
 801508e:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8015090:	b100      	cbz	r0, 8015094 <rcl_node_get_name+0xc>
 8015092:	6880      	ldr	r0, [r0, #8]
 8015094:	4770      	bx	lr
 8015096:	bf00      	nop

08015098 <rcl_node_get_namespace>:
 8015098:	b120      	cbz	r0, 80150a4 <rcl_node_get_namespace+0xc>
 801509a:	6840      	ldr	r0, [r0, #4]
 801509c:	b110      	cbz	r0, 80150a4 <rcl_node_get_namespace+0xc>
 801509e:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 80150a0:	b100      	cbz	r0, 80150a4 <rcl_node_get_namespace+0xc>
 80150a2:	68c0      	ldr	r0, [r0, #12]
 80150a4:	4770      	bx	lr
 80150a6:	bf00      	nop

080150a8 <rcl_node_get_options>:
 80150a8:	b128      	cbz	r0, 80150b6 <rcl_node_get_options+0xe>
 80150aa:	6840      	ldr	r0, [r0, #4]
 80150ac:	b118      	cbz	r0, 80150b6 <rcl_node_get_options+0xe>
 80150ae:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 80150b0:	2b00      	cmp	r3, #0
 80150b2:	bf08      	it	eq
 80150b4:	2000      	moveq	r0, #0
 80150b6:	4770      	bx	lr

080150b8 <rcl_node_get_rmw_handle>:
 80150b8:	b110      	cbz	r0, 80150c0 <rcl_node_get_rmw_handle+0x8>
 80150ba:	6840      	ldr	r0, [r0, #4]
 80150bc:	b100      	cbz	r0, 80150c0 <rcl_node_get_rmw_handle+0x8>
 80150be:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 80150c0:	4770      	bx	lr
 80150c2:	bf00      	nop

080150c4 <rcl_get_disable_loaned_message>:
 80150c4:	b510      	push	{r4, lr}
 80150c6:	b082      	sub	sp, #8
 80150c8:	2300      	movs	r3, #0
 80150ca:	9301      	str	r3, [sp, #4]
 80150cc:	b1a0      	cbz	r0, 80150f8 <rcl_get_disable_loaned_message+0x34>
 80150ce:	4604      	mov	r4, r0
 80150d0:	a901      	add	r1, sp, #4
 80150d2:	480b      	ldr	r0, [pc, #44]	@ (8015100 <rcl_get_disable_loaned_message+0x3c>)
 80150d4:	f002 fa3a 	bl	801754c <rcutils_get_env>
 80150d8:	b110      	cbz	r0, 80150e0 <rcl_get_disable_loaned_message+0x1c>
 80150da:	2001      	movs	r0, #1
 80150dc:	b002      	add	sp, #8
 80150de:	bd10      	pop	{r4, pc}
 80150e0:	9a01      	ldr	r2, [sp, #4]
 80150e2:	7813      	ldrb	r3, [r2, #0]
 80150e4:	3b31      	subs	r3, #49	@ 0x31
 80150e6:	bf08      	it	eq
 80150e8:	7853      	ldrbeq	r3, [r2, #1]
 80150ea:	fab3 f383 	clz	r3, r3
 80150ee:	095b      	lsrs	r3, r3, #5
 80150f0:	2000      	movs	r0, #0
 80150f2:	7023      	strb	r3, [r4, #0]
 80150f4:	b002      	add	sp, #8
 80150f6:	bd10      	pop	{r4, pc}
 80150f8:	200b      	movs	r0, #11
 80150fa:	b002      	add	sp, #8
 80150fc:	bd10      	pop	{r4, pc}
 80150fe:	bf00      	nop
 8015100:	0801f428 	.word	0x0801f428

08015104 <rcl_node_get_default_options>:
 8015104:	b510      	push	{r4, lr}
 8015106:	2253      	movs	r2, #83	@ 0x53
 8015108:	4604      	mov	r4, r0
 801510a:	2100      	movs	r1, #0
 801510c:	3015      	adds	r0, #21
 801510e:	f008 f9bf 	bl	801d490 <memset>
 8015112:	4620      	mov	r0, r4
 8015114:	f7f8 f876 	bl	800d204 <rcutils_get_default_allocator>
 8015118:	2301      	movs	r3, #1
 801511a:	7523      	strb	r3, [r4, #20]
 801511c:	4620      	mov	r0, r4
 801511e:	bd10      	pop	{r4, pc}

08015120 <rcl_node_options_copy>:
 8015120:	b1d0      	cbz	r0, 8015158 <rcl_node_options_copy+0x38>
 8015122:	b570      	push	{r4, r5, r6, lr}
 8015124:	460c      	mov	r4, r1
 8015126:	b1a9      	cbz	r1, 8015154 <rcl_node_options_copy+0x34>
 8015128:	4288      	cmp	r0, r1
 801512a:	4684      	mov	ip, r0
 801512c:	d012      	beq.n	8015154 <rcl_node_options_copy+0x34>
 801512e:	4605      	mov	r5, r0
 8015130:	8a86      	ldrh	r6, [r0, #20]
 8015132:	468e      	mov	lr, r1
 8015134:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015136:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801513a:	682b      	ldr	r3, [r5, #0]
 801513c:	f8ce 3000 	str.w	r3, [lr]
 8015140:	f10c 0118 	add.w	r1, ip, #24
 8015144:	2250      	movs	r2, #80	@ 0x50
 8015146:	82a6      	strh	r6, [r4, #20]
 8015148:	f104 0018 	add.w	r0, r4, #24
 801514c:	f008 fa35 	bl	801d5ba <memcpy>
 8015150:	2000      	movs	r0, #0
 8015152:	bd70      	pop	{r4, r5, r6, pc}
 8015154:	200b      	movs	r0, #11
 8015156:	bd70      	pop	{r4, r5, r6, pc}
 8015158:	200b      	movs	r0, #11
 801515a:	4770      	bx	lr

0801515c <rcl_node_options_fini>:
 801515c:	b1c0      	cbz	r0, 8015190 <rcl_node_options_fini+0x34>
 801515e:	b500      	push	{lr}
 8015160:	4684      	mov	ip, r0
 8015162:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015166:	b087      	sub	sp, #28
 8015168:	f10d 0e04 	add.w	lr, sp, #4
 801516c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8015170:	f8dc 3000 	ldr.w	r3, [ip]
 8015174:	f8ce 3000 	str.w	r3, [lr]
 8015178:	a801      	add	r0, sp, #4
 801517a:	f7f8 f86f 	bl	800d25c <rcutils_allocator_is_valid>
 801517e:	b118      	cbz	r0, 8015188 <rcl_node_options_fini+0x2c>
 8015180:	2000      	movs	r0, #0
 8015182:	b007      	add	sp, #28
 8015184:	f85d fb04 	ldr.w	pc, [sp], #4
 8015188:	200b      	movs	r0, #11
 801518a:	b007      	add	sp, #28
 801518c:	f85d fb04 	ldr.w	pc, [sp], #4
 8015190:	200b      	movs	r0, #11
 8015192:	4770      	bx	lr

08015194 <rcl_node_resolve_name>:
 8015194:	b082      	sub	sp, #8
 8015196:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801519a:	b091      	sub	sp, #68	@ 0x44
 801519c:	ac1a      	add	r4, sp, #104	@ 0x68
 801519e:	e884 000c 	stmia.w	r4, {r2, r3}
 80151a2:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 80151a6:	2800      	cmp	r0, #0
 80151a8:	d03a      	beq.n	8015220 <rcl_node_resolve_name+0x8c>
 80151aa:	460c      	mov	r4, r1
 80151ac:	4605      	mov	r5, r0
 80151ae:	f7ff ff7b 	bl	80150a8 <rcl_node_get_options>
 80151b2:	b370      	cbz	r0, 8015212 <rcl_node_resolve_name+0x7e>
 80151b4:	4628      	mov	r0, r5
 80151b6:	f7ff ff67 	bl	8015088 <rcl_node_get_name>
 80151ba:	4681      	mov	r9, r0
 80151bc:	4628      	mov	r0, r5
 80151be:	f7ff ff6b 	bl	8015098 <rcl_node_get_namespace>
 80151c2:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 80151c6:	4607      	mov	r7, r0
 80151c8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80151cc:	ad0b      	add	r5, sp, #44	@ 0x2c
 80151ce:	46ac      	mov	ip, r5
 80151d0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80151d4:	f8de 3000 	ldr.w	r3, [lr]
 80151d8:	f8cc 3000 	str.w	r3, [ip]
 80151dc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80151de:	b1fb      	cbz	r3, 8015220 <rcl_node_resolve_name+0x8c>
 80151e0:	468a      	mov	sl, r1
 80151e2:	f8dd b078 	ldr.w	fp, [sp, #120]	@ 0x78
 80151e6:	f002 fb47 	bl	8017878 <rcutils_get_zero_initialized_string_map>
 80151ea:	ab10      	add	r3, sp, #64	@ 0x40
 80151ec:	9008      	str	r0, [sp, #32]
 80151ee:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 80151f2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80151f6:	2100      	movs	r1, #0
 80151f8:	e895 000c 	ldmia.w	r5, {r2, r3}
 80151fc:	a808      	add	r0, sp, #32
 80151fe:	f002 fb95 	bl	801792c <rcutils_string_map_init>
 8015202:	4606      	mov	r6, r0
 8015204:	b170      	cbz	r0, 8015224 <rcl_node_resolve_name+0x90>
 8015206:	f7f8 f837 	bl	800d278 <rcutils_get_error_string>
 801520a:	f7f8 f84d 	bl	800d2a8 <rcutils_reset_error>
 801520e:	2e0a      	cmp	r6, #10
 8015210:	d000      	beq.n	8015214 <rcl_node_resolve_name+0x80>
 8015212:	2601      	movs	r6, #1
 8015214:	4630      	mov	r0, r6
 8015216:	b011      	add	sp, #68	@ 0x44
 8015218:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801521c:	b002      	add	sp, #8
 801521e:	4770      	bx	lr
 8015220:	260b      	movs	r6, #11
 8015222:	e7f7      	b.n	8015214 <rcl_node_resolve_name+0x80>
 8015224:	9009      	str	r0, [sp, #36]	@ 0x24
 8015226:	9007      	str	r0, [sp, #28]
 8015228:	a808      	add	r0, sp, #32
 801522a:	f006 fc9f 	bl	801bb6c <rcl_get_default_topic_name_substitutions>
 801522e:	4606      	mov	r6, r0
 8015230:	b1b0      	cbz	r0, 8015260 <rcl_node_resolve_name+0xcc>
 8015232:	280a      	cmp	r0, #10
 8015234:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8015238:	d000      	beq.n	801523c <rcl_node_resolve_name+0xa8>
 801523a:	2601      	movs	r6, #1
 801523c:	a808      	add	r0, sp, #32
 801523e:	f002 fbb3 	bl	80179a8 <rcutils_string_map_fini>
 8015242:	2800      	cmp	r0, #0
 8015244:	d132      	bne.n	80152ac <rcl_node_resolve_name+0x118>
 8015246:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015248:	4659      	mov	r1, fp
 801524a:	47d0      	blx	sl
 801524c:	4659      	mov	r1, fp
 801524e:	4648      	mov	r0, r9
 8015250:	47d0      	blx	sl
 8015252:	f1b8 0f00 	cmp.w	r8, #0
 8015256:	d0dd      	beq.n	8015214 <rcl_node_resolve_name+0x80>
 8015258:	2e67      	cmp	r6, #103	@ 0x67
 801525a:	bf08      	it	eq
 801525c:	2668      	moveq	r6, #104	@ 0x68
 801525e:	e7d9      	b.n	8015214 <rcl_node_resolve_name+0x80>
 8015260:	ab09      	add	r3, sp, #36	@ 0x24
 8015262:	9305      	str	r3, [sp, #20]
 8015264:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015266:	46ec      	mov	ip, sp
 8015268:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801526c:	682b      	ldr	r3, [r5, #0]
 801526e:	f8cc 3000 	str.w	r3, [ip]
 8015272:	463a      	mov	r2, r7
 8015274:	4649      	mov	r1, r9
 8015276:	4620      	mov	r0, r4
 8015278:	ab08      	add	r3, sp, #32
 801527a:	f006 fb19 	bl	801b8b0 <rcl_expand_topic_name>
 801527e:	4606      	mov	r6, r0
 8015280:	b9c8      	cbnz	r0, 80152b6 <rcl_node_resolve_name+0x122>
 8015282:	f8dd 9024 	ldr.w	r9, [sp, #36]	@ 0x24
 8015286:	9009      	str	r0, [sp, #36]	@ 0x24
 8015288:	4602      	mov	r2, r0
 801528a:	a90a      	add	r1, sp, #40	@ 0x28
 801528c:	4648      	mov	r0, r9
 801528e:	f002 fd01 	bl	8017c94 <rmw_validate_full_topic_name>
 8015292:	b998      	cbnz	r0, 80152bc <rcl_node_resolve_name+0x128>
 8015294:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8015296:	bb14      	cbnz	r4, 80152de <rcl_node_resolve_name+0x14a>
 8015298:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801529a:	a808      	add	r0, sp, #32
 801529c:	f8c3 9000 	str.w	r9, [r3]
 80152a0:	f002 fb82 	bl	80179a8 <rcutils_string_map_fini>
 80152a4:	4606      	mov	r6, r0
 80152a6:	b978      	cbnz	r0, 80152c8 <rcl_node_resolve_name+0x134>
 80152a8:	4681      	mov	r9, r0
 80152aa:	e7cc      	b.n	8015246 <rcl_node_resolve_name+0xb2>
 80152ac:	f7f7 ffe4 	bl	800d278 <rcutils_get_error_string>
 80152b0:	f7f7 fffa 	bl	800d2a8 <rcutils_reset_error>
 80152b4:	e7c7      	b.n	8015246 <rcl_node_resolve_name+0xb2>
 80152b6:	f8dd 901c 	ldr.w	r9, [sp, #28]
 80152ba:	e7bf      	b.n	801523c <rcl_node_resolve_name+0xa8>
 80152bc:	f7f7 ffdc 	bl	800d278 <rcutils_get_error_string>
 80152c0:	2601      	movs	r6, #1
 80152c2:	f7f7 fff1 	bl	800d2a8 <rcutils_reset_error>
 80152c6:	e7b9      	b.n	801523c <rcl_node_resolve_name+0xa8>
 80152c8:	f7f7 ffd6 	bl	800d278 <rcutils_get_error_string>
 80152cc:	f7f7 ffec 	bl	800d2a8 <rcutils_reset_error>
 80152d0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80152d2:	4659      	mov	r1, fp
 80152d4:	47d0      	blx	sl
 80152d6:	4659      	mov	r1, fp
 80152d8:	4620      	mov	r0, r4
 80152da:	47d0      	blx	sl
 80152dc:	e799      	b.n	8015212 <rcl_node_resolve_name+0x7e>
 80152de:	2667      	movs	r6, #103	@ 0x67
 80152e0:	e7ac      	b.n	801523c <rcl_node_resolve_name+0xa8>
 80152e2:	bf00      	nop

080152e4 <rcl_get_zero_initialized_service>:
 80152e4:	4b01      	ldr	r3, [pc, #4]	@ (80152ec <rcl_get_zero_initialized_service+0x8>)
 80152e6:	6818      	ldr	r0, [r3, #0]
 80152e8:	4770      	bx	lr
 80152ea:	bf00      	nop
 80152ec:	0802016c 	.word	0x0802016c

080152f0 <rcl_service_init>:
 80152f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80152f4:	b086      	sub	sp, #24
 80152f6:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 80152f8:	2d00      	cmp	r5, #0
 80152fa:	d049      	beq.n	8015390 <rcl_service_init+0xa0>
 80152fc:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 8015300:	4604      	mov	r4, r0
 8015302:	4648      	mov	r0, r9
 8015304:	4688      	mov	r8, r1
 8015306:	4617      	mov	r7, r2
 8015308:	461e      	mov	r6, r3
 801530a:	f7f7 ffa7 	bl	800d25c <rcutils_allocator_is_valid>
 801530e:	2800      	cmp	r0, #0
 8015310:	d03e      	beq.n	8015390 <rcl_service_init+0xa0>
 8015312:	2c00      	cmp	r4, #0
 8015314:	d03c      	beq.n	8015390 <rcl_service_init+0xa0>
 8015316:	4640      	mov	r0, r8
 8015318:	f7ff feac 	bl	8015074 <rcl_node_is_valid>
 801531c:	2800      	cmp	r0, #0
 801531e:	d041      	beq.n	80153a4 <rcl_service_init+0xb4>
 8015320:	2f00      	cmp	r7, #0
 8015322:	d035      	beq.n	8015390 <rcl_service_init+0xa0>
 8015324:	2e00      	cmp	r6, #0
 8015326:	d033      	beq.n	8015390 <rcl_service_init+0xa0>
 8015328:	f8d4 a000 	ldr.w	sl, [r4]
 801532c:	f1ba 0f00 	cmp.w	sl, #0
 8015330:	d133      	bne.n	801539a <rcl_service_init+0xaa>
 8015332:	e9d5 3217 	ldrd	r3, r2, [r5, #92]	@ 0x5c
 8015336:	f44f 718c 	mov.w	r1, #280	@ 0x118
 801533a:	2001      	movs	r0, #1
 801533c:	4798      	blx	r3
 801533e:	6020      	str	r0, [r4, #0]
 8015340:	2800      	cmp	r0, #0
 8015342:	d075      	beq.n	8015430 <rcl_service_init+0x140>
 8015344:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8015348:	2201      	movs	r2, #1
 801534a:	f8cd a010 	str.w	sl, [sp, #16]
 801534e:	9005      	str	r0, [sp, #20]
 8015350:	9203      	str	r2, [sp, #12]
 8015352:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 8015356:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801535a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801535e:	4631      	mov	r1, r6
 8015360:	e899 000c 	ldmia.w	r9, {r2, r3}
 8015364:	4640      	mov	r0, r8
 8015366:	f7ff ff15 	bl	8015194 <rcl_node_resolve_name>
 801536a:	4606      	mov	r6, r0
 801536c:	b1f8      	cbz	r0, 80153ae <rcl_service_init+0xbe>
 801536e:	f1a0 0368 	sub.w	r3, r0, #104	@ 0x68
 8015372:	2b01      	cmp	r3, #1
 8015374:	6820      	ldr	r0, [r4, #0]
 8015376:	d943      	bls.n	8015400 <rcl_service_init+0x110>
 8015378:	2e0a      	cmp	r6, #10
 801537a:	bf18      	it	ne
 801537c:	2601      	movne	r6, #1
 801537e:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 8015380:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 8015382:	4798      	blx	r3
 8015384:	2300      	movs	r3, #0
 8015386:	4630      	mov	r0, r6
 8015388:	6023      	str	r3, [r4, #0]
 801538a:	b006      	add	sp, #24
 801538c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015390:	260b      	movs	r6, #11
 8015392:	4630      	mov	r0, r6
 8015394:	b006      	add	sp, #24
 8015396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801539a:	2664      	movs	r6, #100	@ 0x64
 801539c:	4630      	mov	r0, r6
 801539e:	b006      	add	sp, #24
 80153a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80153a4:	26c8      	movs	r6, #200	@ 0xc8
 80153a6:	4630      	mov	r0, r6
 80153a8:	b006      	add	sp, #24
 80153aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80153ae:	4640      	mov	r0, r8
 80153b0:	f7ff fe82 	bl	80150b8 <rcl_node_get_rmw_handle>
 80153b4:	6826      	ldr	r6, [r4, #0]
 80153b6:	4639      	mov	r1, r7
 80153b8:	f8d6 2110 	ldr.w	r2, [r6, #272]	@ 0x110
 80153bc:	462b      	mov	r3, r5
 80153be:	f003 fb59 	bl	8018a74 <rmw_create_service>
 80153c2:	6821      	ldr	r1, [r4, #0]
 80153c4:	f8c6 0108 	str.w	r0, [r6, #264]	@ 0x108
 80153c8:	f8d1 0108 	ldr.w	r0, [r1, #264]	@ 0x108
 80153cc:	b390      	cbz	r0, 8015434 <rcl_service_init+0x144>
 80153ce:	3168      	adds	r1, #104	@ 0x68
 80153d0:	f003 fc74 	bl	8018cbc <rmw_service_request_subscription_get_actual_qos>
 80153d4:	b9b0      	cbnz	r0, 8015404 <rcl_service_init+0x114>
 80153d6:	6823      	ldr	r3, [r4, #0]
 80153d8:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 80153dc:	f103 01b8 	add.w	r1, r3, #184	@ 0xb8
 80153e0:	f003 fc5e 	bl	8018ca0 <rmw_service_response_publisher_get_actual_qos>
 80153e4:	4606      	mov	r6, r0
 80153e6:	b968      	cbnz	r0, 8015404 <rcl_service_init+0x114>
 80153e8:	6820      	ldr	r0, [r4, #0]
 80153ea:	f895 3048 	ldrb.w	r3, [r5, #72]	@ 0x48
 80153ee:	f880 30b0 	strb.w	r3, [r0, #176]	@ 0xb0
 80153f2:	f880 3100 	strb.w	r3, [r0, #256]	@ 0x100
 80153f6:	2268      	movs	r2, #104	@ 0x68
 80153f8:	4629      	mov	r1, r5
 80153fa:	f008 f8de 	bl	801d5ba <memcpy>
 80153fe:	e7c8      	b.n	8015392 <rcl_service_init+0xa2>
 8015400:	2668      	movs	r6, #104	@ 0x68
 8015402:	e7bc      	b.n	801537e <rcl_service_init+0x8e>
 8015404:	f7ff fa2e 	bl	8014864 <rcl_convert_rmw_ret_to_rcl_ret>
 8015408:	4606      	mov	r6, r0
 801540a:	4640      	mov	r0, r8
 801540c:	f7ff fe54 	bl	80150b8 <rcl_node_get_rmw_handle>
 8015410:	6823      	ldr	r3, [r4, #0]
 8015412:	f8d3 1108 	ldr.w	r1, [r3, #264]	@ 0x108
 8015416:	f003 fbff 	bl	8018c18 <rmw_destroy_service>
 801541a:	6821      	ldr	r1, [r4, #0]
 801541c:	f8d1 0110 	ldr.w	r0, [r1, #272]	@ 0x110
 8015420:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 8015422:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 8015424:	4798      	blx	r3
 8015426:	6820      	ldr	r0, [r4, #0]
 8015428:	2300      	movs	r3, #0
 801542a:	f8c0 3110 	str.w	r3, [r0, #272]	@ 0x110
 801542e:	e7a6      	b.n	801537e <rcl_service_init+0x8e>
 8015430:	260a      	movs	r6, #10
 8015432:	e7ae      	b.n	8015392 <rcl_service_init+0xa2>
 8015434:	2601      	movs	r6, #1
 8015436:	e7f1      	b.n	801541c <rcl_service_init+0x12c>

08015438 <rcl_service_get_default_options>:
 8015438:	b530      	push	{r4, r5, lr}
 801543a:	4d0f      	ldr	r5, [pc, #60]	@ (8015478 <rcl_service_get_default_options+0x40>)
 801543c:	490f      	ldr	r1, [pc, #60]	@ (801547c <rcl_service_get_default_options+0x44>)
 801543e:	b087      	sub	sp, #28
 8015440:	4604      	mov	r4, r0
 8015442:	2250      	movs	r2, #80	@ 0x50
 8015444:	4628      	mov	r0, r5
 8015446:	f008 f8b8 	bl	801d5ba <memcpy>
 801544a:	4668      	mov	r0, sp
 801544c:	f7f7 feda 	bl	800d204 <rcutils_get_default_allocator>
 8015450:	46ec      	mov	ip, sp
 8015452:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015456:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 801545a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801545e:	2268      	movs	r2, #104	@ 0x68
 8015460:	f8dc 3000 	ldr.w	r3, [ip]
 8015464:	f8ce 3000 	str.w	r3, [lr]
 8015468:	4629      	mov	r1, r5
 801546a:	4620      	mov	r0, r4
 801546c:	f008 f8a5 	bl	801d5ba <memcpy>
 8015470:	4620      	mov	r0, r4
 8015472:	b007      	add	sp, #28
 8015474:	bd30      	pop	{r4, r5, pc}
 8015476:	bf00      	nop
 8015478:	20019548 	.word	0x20019548
 801547c:	08020170 	.word	0x08020170

08015480 <rcl_service_get_rmw_handle>:
 8015480:	b118      	cbz	r0, 801548a <rcl_service_get_rmw_handle+0xa>
 8015482:	6800      	ldr	r0, [r0, #0]
 8015484:	b108      	cbz	r0, 801548a <rcl_service_get_rmw_handle+0xa>
 8015486:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801548a:	4770      	bx	lr

0801548c <rcl_take_request>:
 801548c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801548e:	468e      	mov	lr, r1
 8015490:	460c      	mov	r4, r1
 8015492:	4617      	mov	r7, r2
 8015494:	4605      	mov	r5, r0
 8015496:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801549a:	b091      	sub	sp, #68	@ 0x44
 801549c:	f10d 0c28 	add.w	ip, sp, #40	@ 0x28
 80154a0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80154a4:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80154a8:	e88c 0003 	stmia.w	ip, {r0, r1}
 80154ac:	b30d      	cbz	r5, 80154f2 <rcl_take_request+0x66>
 80154ae:	682b      	ldr	r3, [r5, #0]
 80154b0:	b1fb      	cbz	r3, 80154f2 <rcl_take_request+0x66>
 80154b2:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 80154b6:	b1e0      	cbz	r0, 80154f2 <rcl_take_request+0x66>
 80154b8:	b397      	cbz	r7, 8015520 <rcl_take_request+0x94>
 80154ba:	2300      	movs	r3, #0
 80154bc:	f88d 3017 	strb.w	r3, [sp, #23]
 80154c0:	463a      	mov	r2, r7
 80154c2:	f10d 0317 	add.w	r3, sp, #23
 80154c6:	a906      	add	r1, sp, #24
 80154c8:	f003 f9d2 	bl	8018870 <rmw_take_request>
 80154cc:	4606      	mov	r6, r0
 80154ce:	b198      	cbz	r0, 80154f8 <rcl_take_request+0x6c>
 80154d0:	280a      	cmp	r0, #10
 80154d2:	bf18      	it	ne
 80154d4:	2601      	movne	r6, #1
 80154d6:	f10d 0c28 	add.w	ip, sp, #40	@ 0x28
 80154da:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80154de:	46a6      	mov	lr, r4
 80154e0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80154e4:	e89c 0003 	ldmia.w	ip, {r0, r1}
 80154e8:	e88e 0003 	stmia.w	lr, {r0, r1}
 80154ec:	4630      	mov	r0, r6
 80154ee:	b011      	add	sp, #68	@ 0x44
 80154f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80154f2:	f44f 7616 	mov.w	r6, #600	@ 0x258
 80154f6:	e7ee      	b.n	80154d6 <rcl_take_request+0x4a>
 80154f8:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80154fc:	b193      	cbz	r3, 8015524 <rcl_take_request+0x98>
 80154fe:	682b      	ldr	r3, [r5, #0]
 8015500:	f8d3 010c 	ldr.w	r0, [r3, #268]	@ 0x10c
 8015504:	2800      	cmp	r0, #0
 8015506:	d0e6      	beq.n	80154d6 <rcl_take_request+0x4a>
 8015508:	463a      	mov	r2, r7
 801550a:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	@ 0x38
 801550e:	ab0a      	add	r3, sp, #40	@ 0x28
 8015510:	e9cd 6700 	strd	r6, r7, [sp]
 8015514:	9302      	str	r3, [sp, #8]
 8015516:	2101      	movs	r1, #1
 8015518:	f000 f842 	bl	80155a0 <rcl_send_service_event_message>
 801551c:	4606      	mov	r6, r0
 801551e:	e7da      	b.n	80154d6 <rcl_take_request+0x4a>
 8015520:	260b      	movs	r6, #11
 8015522:	e7d8      	b.n	80154d6 <rcl_take_request+0x4a>
 8015524:	f240 2659 	movw	r6, #601	@ 0x259
 8015528:	e7d5      	b.n	80154d6 <rcl_take_request+0x4a>
 801552a:	bf00      	nop

0801552c <rcl_send_response>:
 801552c:	b350      	cbz	r0, 8015584 <rcl_send_response+0x58>
 801552e:	b570      	push	{r4, r5, r6, lr}
 8015530:	6803      	ldr	r3, [r0, #0]
 8015532:	b084      	sub	sp, #16
 8015534:	4604      	mov	r4, r0
 8015536:	b1cb      	cbz	r3, 801556c <rcl_send_response+0x40>
 8015538:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801553c:	b1b0      	cbz	r0, 801556c <rcl_send_response+0x40>
 801553e:	460e      	mov	r6, r1
 8015540:	b1e9      	cbz	r1, 801557e <rcl_send_response+0x52>
 8015542:	4615      	mov	r5, r2
 8015544:	b1da      	cbz	r2, 801557e <rcl_send_response+0x52>
 8015546:	f003 f9f1 	bl	801892c <rmw_send_response>
 801554a:	b998      	cbnz	r0, 8015574 <rcl_send_response+0x48>
 801554c:	6823      	ldr	r3, [r4, #0]
 801554e:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8015552:	b16b      	cbz	r3, 8015570 <rcl_send_response+0x44>
 8015554:	e9d6 0104 	ldrd	r0, r1, [r6, #16]
 8015558:	462a      	mov	r2, r5
 801555a:	e9cd 0100 	strd	r0, r1, [sp]
 801555e:	9602      	str	r6, [sp, #8]
 8015560:	2102      	movs	r1, #2
 8015562:	4618      	mov	r0, r3
 8015564:	f000 f81c 	bl	80155a0 <rcl_send_service_event_message>
 8015568:	b004      	add	sp, #16
 801556a:	bd70      	pop	{r4, r5, r6, pc}
 801556c:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8015570:	b004      	add	sp, #16
 8015572:	bd70      	pop	{r4, r5, r6, pc}
 8015574:	2802      	cmp	r0, #2
 8015576:	bf18      	it	ne
 8015578:	2001      	movne	r0, #1
 801557a:	b004      	add	sp, #16
 801557c:	bd70      	pop	{r4, r5, r6, pc}
 801557e:	200b      	movs	r0, #11
 8015580:	b004      	add	sp, #16
 8015582:	bd70      	pop	{r4, r5, r6, pc}
 8015584:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8015588:	4770      	bx	lr
 801558a:	bf00      	nop

0801558c <rcl_service_is_valid>:
 801558c:	b130      	cbz	r0, 801559c <rcl_service_is_valid+0x10>
 801558e:	6800      	ldr	r0, [r0, #0]
 8015590:	b120      	cbz	r0, 801559c <rcl_service_is_valid+0x10>
 8015592:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8015596:	3800      	subs	r0, #0
 8015598:	bf18      	it	ne
 801559a:	2001      	movne	r0, #1
 801559c:	4770      	bx	lr
 801559e:	bf00      	nop

080155a0 <rcl_send_service_event_message>:
 80155a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80155a2:	b093      	sub	sp, #76	@ 0x4c
 80155a4:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 80155a6:	b17a      	cbz	r2, 80155c8 <rcl_send_service_event_message+0x28>
 80155a8:	b176      	cbz	r6, 80155c8 <rcl_send_service_event_message+0x28>
 80155aa:	4604      	mov	r4, r0
 80155ac:	b150      	cbz	r0, 80155c4 <rcl_send_service_event_message+0x24>
 80155ae:	f8d0 3080 	ldr.w	r3, [r0, #128]	@ 0x80
 80155b2:	b13b      	cbz	r3, 80155c4 <rcl_send_service_event_message+0x24>
 80155b4:	68c0      	ldr	r0, [r0, #12]
 80155b6:	460f      	mov	r7, r1
 80155b8:	4615      	mov	r5, r2
 80155ba:	f000 f9d7 	bl	801596c <rcl_clock_valid>
 80155be:	b108      	cbz	r0, 80155c4 <rcl_send_service_event_message+0x24>
 80155c0:	7a23      	ldrb	r3, [r4, #8]
 80155c2:	b92b      	cbnz	r3, 80155d0 <rcl_send_service_event_message+0x30>
 80155c4:	2501      	movs	r5, #1
 80155c6:	e000      	b.n	80155ca <rcl_send_service_event_message+0x2a>
 80155c8:	250b      	movs	r5, #11
 80155ca:	4628      	mov	r0, r5
 80155cc:	b013      	add	sp, #76	@ 0x4c
 80155ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80155d0:	f104 0e60 	add.w	lr, r4, #96	@ 0x60
 80155d4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80155d8:	f10d 0c0c 	add.w	ip, sp, #12
 80155dc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80155e0:	f8de 3000 	ldr.w	r3, [lr]
 80155e4:	f8cc 3000 	str.w	r3, [ip]
 80155e8:	a803      	add	r0, sp, #12
 80155ea:	f7f7 fe37 	bl	800d25c <rcutils_allocator_is_valid>
 80155ee:	2800      	cmp	r0, #0
 80155f0:	d0ea      	beq.n	80155c8 <rcl_send_service_event_message+0x28>
 80155f2:	6820      	ldr	r0, [r4, #0]
 80155f4:	f7f6 feb6 	bl	800c364 <rcl_publisher_is_valid>
 80155f8:	2800      	cmp	r0, #0
 80155fa:	d045      	beq.n	8015688 <rcl_send_service_event_message+0xe8>
 80155fc:	4669      	mov	r1, sp
 80155fe:	68e0      	ldr	r0, [r4, #12]
 8015600:	f000 fa2c 	bl	8015a5c <rcl_clock_get_now>
 8015604:	4601      	mov	r1, r0
 8015606:	2800      	cmp	r0, #0
 8015608:	d13b      	bne.n	8015682 <rcl_send_service_event_message+0xe2>
 801560a:	2220      	movs	r2, #32
 801560c:	eb0d 0002 	add.w	r0, sp, r2
 8015610:	f007 ff3e 	bl	801d490 <memset>
 8015614:	a324      	add	r3, pc, #144	@ (adr r3, 80156a8 <rcl_send_service_event_message+0x108>)
 8015616:	e9d3 2300 	ldrd	r2, r3, [r3]
 801561a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801561e:	f88d 7020 	strb.w	r7, [sp, #32]
 8015622:	f7eb fafb 	bl	8000c1c <__aeabi_ldivmod>
 8015626:	e9cd 0209 	strd	r0, r2, [sp, #36]	@ 0x24
 801562a:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	@ 0x60
 801562e:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8015632:	7a23      	ldrb	r3, [r4, #8]
 8015634:	6830      	ldr	r0, [r6, #0]
 8015636:	6871      	ldr	r1, [r6, #4]
 8015638:	68b2      	ldr	r2, [r6, #8]
 801563a:	2b01      	cmp	r3, #1
 801563c:	68f3      	ldr	r3, [r6, #12]
 801563e:	bf08      	it	eq
 8015640:	2500      	moveq	r5, #0
 8015642:	ae0b      	add	r6, sp, #44	@ 0x2c
 8015644:	2f01      	cmp	r7, #1
 8015646:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8015648:	d821      	bhi.n	801568e <rcl_send_service_event_message+0xee>
 801564a:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 801564e:	462a      	mov	r2, r5
 8015650:	a808      	add	r0, sp, #32
 8015652:	699d      	ldr	r5, [r3, #24]
 8015654:	a903      	add	r1, sp, #12
 8015656:	2300      	movs	r3, #0
 8015658:	47a8      	blx	r5
 801565a:	4606      	mov	r6, r0
 801565c:	2e00      	cmp	r6, #0
 801565e:	d0b1      	beq.n	80155c4 <rcl_send_service_event_message+0x24>
 8015660:	4631      	mov	r1, r6
 8015662:	6820      	ldr	r0, [r4, #0]
 8015664:	2200      	movs	r2, #0
 8015666:	f7f6 fe59 	bl	800c31c <rcl_publish>
 801566a:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 801566e:	4605      	mov	r5, r0
 8015670:	69db      	ldr	r3, [r3, #28]
 8015672:	a903      	add	r1, sp, #12
 8015674:	4630      	mov	r0, r6
 8015676:	4798      	blx	r3
 8015678:	2d00      	cmp	r5, #0
 801567a:	d0a6      	beq.n	80155ca <rcl_send_service_event_message+0x2a>
 801567c:	f7f7 fe14 	bl	800d2a8 <rcutils_reset_error>
 8015680:	e7a3      	b.n	80155ca <rcl_send_service_event_message+0x2a>
 8015682:	f7f7 fe11 	bl	800d2a8 <rcutils_reset_error>
 8015686:	e79d      	b.n	80155c4 <rcl_send_service_event_message+0x24>
 8015688:	f44f 7596 	mov.w	r5, #300	@ 0x12c
 801568c:	e79d      	b.n	80155ca <rcl_send_service_event_message+0x2a>
 801568e:	1eb9      	subs	r1, r7, #2
 8015690:	2901      	cmp	r1, #1
 8015692:	d8f6      	bhi.n	8015682 <rcl_send_service_event_message+0xe2>
 8015694:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 8015698:	462b      	mov	r3, r5
 801569a:	a808      	add	r0, sp, #32
 801569c:	6995      	ldr	r5, [r2, #24]
 801569e:	a903      	add	r1, sp, #12
 80156a0:	2200      	movs	r2, #0
 80156a2:	47a8      	blx	r5
 80156a4:	4606      	mov	r6, r0
 80156a6:	e7d9      	b.n	801565c <rcl_send_service_event_message+0xbc>
 80156a8:	3b9aca00 	.word	0x3b9aca00
 80156ac:	00000000 	.word	0x00000000

080156b0 <rcl_get_zero_initialized_subscription>:
 80156b0:	4b01      	ldr	r3, [pc, #4]	@ (80156b8 <rcl_get_zero_initialized_subscription+0x8>)
 80156b2:	6818      	ldr	r0, [r3, #0]
 80156b4:	4770      	bx	lr
 80156b6:	bf00      	nop
 80156b8:	080201c0 	.word	0x080201c0

080156bc <rcl_subscription_init>:
 80156bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80156c0:	b089      	sub	sp, #36	@ 0x24
 80156c2:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80156c4:	b1d6      	cbz	r6, 80156fc <rcl_subscription_init+0x40>
 80156c6:	f106 0950 	add.w	r9, r6, #80	@ 0x50
 80156ca:	4604      	mov	r4, r0
 80156cc:	4648      	mov	r0, r9
 80156ce:	460d      	mov	r5, r1
 80156d0:	4690      	mov	r8, r2
 80156d2:	461f      	mov	r7, r3
 80156d4:	f7f7 fdc2 	bl	800d25c <rcutils_allocator_is_valid>
 80156d8:	b180      	cbz	r0, 80156fc <rcl_subscription_init+0x40>
 80156da:	b17c      	cbz	r4, 80156fc <rcl_subscription_init+0x40>
 80156dc:	4628      	mov	r0, r5
 80156de:	f7ff fcc9 	bl	8015074 <rcl_node_is_valid>
 80156e2:	2800      	cmp	r0, #0
 80156e4:	d054      	beq.n	8015790 <rcl_subscription_init+0xd4>
 80156e6:	f1b8 0f00 	cmp.w	r8, #0
 80156ea:	d007      	beq.n	80156fc <rcl_subscription_init+0x40>
 80156ec:	b137      	cbz	r7, 80156fc <rcl_subscription_init+0x40>
 80156ee:	6823      	ldr	r3, [r4, #0]
 80156f0:	b14b      	cbz	r3, 8015706 <rcl_subscription_init+0x4a>
 80156f2:	2764      	movs	r7, #100	@ 0x64
 80156f4:	4638      	mov	r0, r7
 80156f6:	b009      	add	sp, #36	@ 0x24
 80156f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80156fc:	270b      	movs	r7, #11
 80156fe:	4638      	mov	r0, r7
 8015700:	b009      	add	sp, #36	@ 0x24
 8015702:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015706:	e9cd 3303 	strd	r3, r3, [sp, #12]
 801570a:	aa07      	add	r2, sp, #28
 801570c:	9205      	str	r2, [sp, #20]
 801570e:	9307      	str	r3, [sp, #28]
 8015710:	f106 0358 	add.w	r3, r6, #88	@ 0x58
 8015714:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8015718:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801571c:	4639      	mov	r1, r7
 801571e:	e899 000c 	ldmia.w	r9, {r2, r3}
 8015722:	4628      	mov	r0, r5
 8015724:	f7ff fd36 	bl	8015194 <rcl_node_resolve_name>
 8015728:	4607      	mov	r7, r0
 801572a:	2800      	cmp	r0, #0
 801572c:	d15f      	bne.n	80157ee <rcl_subscription_init+0x132>
 801572e:	e9d6 3217 	ldrd	r3, r2, [r6, #92]	@ 0x5c
 8015732:	21d0      	movs	r1, #208	@ 0xd0
 8015734:	2001      	movs	r0, #1
 8015736:	4798      	blx	r3
 8015738:	6020      	str	r0, [r4, #0]
 801573a:	2800      	cmp	r0, #0
 801573c:	d05d      	beq.n	80157fa <rcl_subscription_init+0x13e>
 801573e:	4628      	mov	r0, r5
 8015740:	f7ff fcba 	bl	80150b8 <rcl_node_get_rmw_handle>
 8015744:	f106 0364 	add.w	r3, r6, #100	@ 0x64
 8015748:	9300      	str	r3, [sp, #0]
 801574a:	9a07      	ldr	r2, [sp, #28]
 801574c:	6827      	ldr	r7, [r4, #0]
 801574e:	4641      	mov	r1, r8
 8015750:	4633      	mov	r3, r6
 8015752:	f003 fac1 	bl	8018cd8 <rmw_create_subscription>
 8015756:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
 801575a:	6827      	ldr	r7, [r4, #0]
 801575c:	f8d7 00c8 	ldr.w	r0, [r7, #200]	@ 0xc8
 8015760:	b358      	cbz	r0, 80157ba <rcl_subscription_init+0xfe>
 8015762:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 8015766:	f003 fb97 	bl	8018e98 <rmw_subscription_get_actual_qos>
 801576a:	4607      	mov	r7, r0
 801576c:	b9a8      	cbnz	r0, 801579a <rcl_subscription_init+0xde>
 801576e:	6820      	ldr	r0, [r4, #0]
 8015770:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 8015774:	f880 30c0 	strb.w	r3, [r0, #192]	@ 0xc0
 8015778:	2278      	movs	r2, #120	@ 0x78
 801577a:	4631      	mov	r1, r6
 801577c:	f007 ff1d 	bl	801d5ba <memcpy>
 8015780:	9807      	ldr	r0, [sp, #28]
 8015782:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 8015784:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 8015786:	4798      	blx	r3
 8015788:	4638      	mov	r0, r7
 801578a:	b009      	add	sp, #36	@ 0x24
 801578c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015790:	27c8      	movs	r7, #200	@ 0xc8
 8015792:	4638      	mov	r0, r7
 8015794:	b009      	add	sp, #36	@ 0x24
 8015796:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801579a:	6827      	ldr	r7, [r4, #0]
 801579c:	b32f      	cbz	r7, 80157ea <rcl_subscription_init+0x12e>
 801579e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80157a2:	b153      	cbz	r3, 80157ba <rcl_subscription_init+0xfe>
 80157a4:	4628      	mov	r0, r5
 80157a6:	f7ff fc87 	bl	80150b8 <rcl_node_get_rmw_handle>
 80157aa:	6823      	ldr	r3, [r4, #0]
 80157ac:	f8d3 10c8 	ldr.w	r1, [r3, #200]	@ 0xc8
 80157b0:	f003 fb80 	bl	8018eb4 <rmw_destroy_subscription>
 80157b4:	6827      	ldr	r7, [r4, #0]
 80157b6:	4638      	mov	r0, r7
 80157b8:	b197      	cbz	r7, 80157e0 <rcl_subscription_init+0x124>
 80157ba:	f107 0550 	add.w	r5, r7, #80	@ 0x50
 80157be:	4628      	mov	r0, r5
 80157c0:	f7f7 fd4c 	bl	800d25c <rcutils_allocator_is_valid>
 80157c4:	b1e8      	cbz	r0, 8015802 <rcl_subscription_init+0x146>
 80157c6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80157c8:	b1d8      	cbz	r0, 8015802 <rcl_subscription_init+0x146>
 80157ca:	4629      	mov	r1, r5
 80157cc:	f002 f9b4 	bl	8017b38 <rmw_subscription_content_filter_options_fini>
 80157d0:	4605      	mov	r5, r0
 80157d2:	b9a0      	cbnz	r0, 80157fe <rcl_subscription_init+0x142>
 80157d4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80157d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80157d8:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80157da:	4798      	blx	r3
 80157dc:	6820      	ldr	r0, [r4, #0]
 80157de:	66fd      	str	r5, [r7, #108]	@ 0x6c
 80157e0:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 80157e2:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 80157e4:	4798      	blx	r3
 80157e6:	2300      	movs	r3, #0
 80157e8:	6023      	str	r3, [r4, #0]
 80157ea:	2701      	movs	r7, #1
 80157ec:	e7c8      	b.n	8015780 <rcl_subscription_init+0xc4>
 80157ee:	2867      	cmp	r0, #103	@ 0x67
 80157f0:	d0c6      	beq.n	8015780 <rcl_subscription_init+0xc4>
 80157f2:	2869      	cmp	r0, #105	@ 0x69
 80157f4:	d007      	beq.n	8015806 <rcl_subscription_init+0x14a>
 80157f6:	280a      	cmp	r0, #10
 80157f8:	d1f7      	bne.n	80157ea <rcl_subscription_init+0x12e>
 80157fa:	270a      	movs	r7, #10
 80157fc:	e7c0      	b.n	8015780 <rcl_subscription_init+0xc4>
 80157fe:	f7ff f831 	bl	8014864 <rcl_convert_rmw_ret_to_rcl_ret>
 8015802:	6820      	ldr	r0, [r4, #0]
 8015804:	e7ec      	b.n	80157e0 <rcl_subscription_init+0x124>
 8015806:	2767      	movs	r7, #103	@ 0x67
 8015808:	e7ba      	b.n	8015780 <rcl_subscription_init+0xc4>
 801580a:	bf00      	nop

0801580c <rcl_subscription_get_default_options>:
 801580c:	b570      	push	{r4, r5, r6, lr}
 801580e:	4d14      	ldr	r5, [pc, #80]	@ (8015860 <rcl_subscription_get_default_options+0x54>)
 8015810:	4914      	ldr	r1, [pc, #80]	@ (8015864 <rcl_subscription_get_default_options+0x58>)
 8015812:	b08a      	sub	sp, #40	@ 0x28
 8015814:	4604      	mov	r4, r0
 8015816:	2250      	movs	r2, #80	@ 0x50
 8015818:	4628      	mov	r0, r5
 801581a:	f007 fece 	bl	801d5ba <memcpy>
 801581e:	a804      	add	r0, sp, #16
 8015820:	f7f7 fcf0 	bl	800d204 <rcutils_get_default_allocator>
 8015824:	f10d 0c10 	add.w	ip, sp, #16
 8015828:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801582c:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 8015830:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8015834:	466e      	mov	r6, sp
 8015836:	f8dc 3000 	ldr.w	r3, [ip]
 801583a:	f8ce 3000 	str.w	r3, [lr]
 801583e:	4630      	mov	r0, r6
 8015840:	f002 f994 	bl	8017b6c <rmw_get_default_subscription_options>
 8015844:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8015848:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 801584c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8015850:	2278      	movs	r2, #120	@ 0x78
 8015852:	4629      	mov	r1, r5
 8015854:	4620      	mov	r0, r4
 8015856:	f007 feb0 	bl	801d5ba <memcpy>
 801585a:	4620      	mov	r0, r4
 801585c:	b00a      	add	sp, #40	@ 0x28
 801585e:	bd70      	pop	{r4, r5, r6, pc}
 8015860:	200195b0 	.word	0x200195b0
 8015864:	080201c8 	.word	0x080201c8

08015868 <rcl_take>:
 8015868:	2800      	cmp	r0, #0
 801586a:	d04b      	beq.n	8015904 <rcl_take+0x9c>
 801586c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015870:	4615      	mov	r5, r2
 8015872:	6802      	ldr	r2, [r0, #0]
 8015874:	b0a0      	sub	sp, #128	@ 0x80
 8015876:	4604      	mov	r4, r0
 8015878:	2a00      	cmp	r2, #0
 801587a:	d03b      	beq.n	80158f4 <rcl_take+0x8c>
 801587c:	461f      	mov	r7, r3
 801587e:	f8d2 30c8 	ldr.w	r3, [r2, #200]	@ 0xc8
 8015882:	2b00      	cmp	r3, #0
 8015884:	d036      	beq.n	80158f4 <rcl_take+0x8c>
 8015886:	460e      	mov	r6, r1
 8015888:	2900      	cmp	r1, #0
 801588a:	d039      	beq.n	8015900 <rcl_take+0x98>
 801588c:	2d00      	cmp	r5, #0
 801588e:	d03d      	beq.n	801590c <rcl_take+0xa4>
 8015890:	a802      	add	r0, sp, #8
 8015892:	f002 f9f7 	bl	8017c84 <rmw_get_zero_initialized_message_info>
 8015896:	6823      	ldr	r3, [r4, #0]
 8015898:	f10d 0c08 	add.w	ip, sp, #8
 801589c:	f8d3 40c8 	ldr.w	r4, [r3, #200]	@ 0xc8
 80158a0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80158a4:	46ae      	mov	lr, r5
 80158a6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80158aa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80158ae:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80158b2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80158b6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80158ba:	e89c 0003 	ldmia.w	ip, {r0, r1}
 80158be:	462b      	mov	r3, r5
 80158c0:	e88e 0003 	stmia.w	lr, {r0, r1}
 80158c4:	f04f 0800 	mov.w	r8, #0
 80158c8:	f10d 0247 	add.w	r2, sp, #71	@ 0x47
 80158cc:	4631      	mov	r1, r6
 80158ce:	4620      	mov	r0, r4
 80158d0:	f88d 8047 	strb.w	r8, [sp, #71]	@ 0x47
 80158d4:	9700      	str	r7, [sp, #0]
 80158d6:	f003 fb4d 	bl	8018f74 <rmw_take_with_info>
 80158da:	4603      	mov	r3, r0
 80158dc:	b9c0      	cbnz	r0, 8015910 <rcl_take+0xa8>
 80158de:	f89d 1047 	ldrb.w	r1, [sp, #71]	@ 0x47
 80158e2:	f240 1291 	movw	r2, #401	@ 0x191
 80158e6:	2900      	cmp	r1, #0
 80158e8:	bf08      	it	eq
 80158ea:	4613      	moveq	r3, r2
 80158ec:	4618      	mov	r0, r3
 80158ee:	b020      	add	sp, #128	@ 0x80
 80158f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80158f4:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80158f8:	4618      	mov	r0, r3
 80158fa:	b020      	add	sp, #128	@ 0x80
 80158fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015900:	230b      	movs	r3, #11
 8015902:	e7f3      	b.n	80158ec <rcl_take+0x84>
 8015904:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8015908:	4618      	mov	r0, r3
 801590a:	4770      	bx	lr
 801590c:	ad12      	add	r5, sp, #72	@ 0x48
 801590e:	e7bf      	b.n	8015890 <rcl_take+0x28>
 8015910:	f7fe ffa8 	bl	8014864 <rcl_convert_rmw_ret_to_rcl_ret>
 8015914:	4603      	mov	r3, r0
 8015916:	e7e9      	b.n	80158ec <rcl_take+0x84>

08015918 <rcl_subscription_get_rmw_handle>:
 8015918:	b118      	cbz	r0, 8015922 <rcl_subscription_get_rmw_handle+0xa>
 801591a:	6800      	ldr	r0, [r0, #0]
 801591c:	b108      	cbz	r0, 8015922 <rcl_subscription_get_rmw_handle+0xa>
 801591e:	f8d0 00c8 	ldr.w	r0, [r0, #200]	@ 0xc8
 8015922:	4770      	bx	lr

08015924 <rcl_subscription_is_valid>:
 8015924:	b130      	cbz	r0, 8015934 <rcl_subscription_is_valid+0x10>
 8015926:	6800      	ldr	r0, [r0, #0]
 8015928:	b120      	cbz	r0, 8015934 <rcl_subscription_is_valid+0x10>
 801592a:	f8d0 00c8 	ldr.w	r0, [r0, #200]	@ 0xc8
 801592e:	3800      	subs	r0, #0
 8015930:	bf18      	it	ne
 8015932:	2001      	movne	r0, #1
 8015934:	4770      	bx	lr
 8015936:	bf00      	nop

08015938 <rcl_get_system_time>:
 8015938:	4608      	mov	r0, r1
 801593a:	f7f7 bcd1 	b.w	800d2e0 <rcutils_system_time_now>
 801593e:	bf00      	nop

08015940 <rcl_get_steady_time>:
 8015940:	4608      	mov	r0, r1
 8015942:	f7f7 bcf7 	b.w	800d334 <rcutils_steady_time_now>
 8015946:	bf00      	nop

08015948 <rcl_get_ros_time>:
 8015948:	7a03      	ldrb	r3, [r0, #8]
 801594a:	b510      	push	{r4, lr}
 801594c:	460c      	mov	r4, r1
 801594e:	b143      	cbz	r3, 8015962 <rcl_get_ros_time+0x1a>
 8015950:	2105      	movs	r1, #5
 8015952:	f001 fd55 	bl	8017400 <__atomic_load_8>
 8015956:	4602      	mov	r2, r0
 8015958:	460b      	mov	r3, r1
 801595a:	e9c4 2300 	strd	r2, r3, [r4]
 801595e:	2000      	movs	r0, #0
 8015960:	bd10      	pop	{r4, pc}
 8015962:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015966:	4608      	mov	r0, r1
 8015968:	f7f7 bcba 	b.w	800d2e0 <rcutils_system_time_now>

0801596c <rcl_clock_valid>:
 801596c:	b138      	cbz	r0, 801597e <rcl_clock_valid+0x12>
 801596e:	7803      	ldrb	r3, [r0, #0]
 8015970:	b123      	cbz	r3, 801597c <rcl_clock_valid+0x10>
 8015972:	68c0      	ldr	r0, [r0, #12]
 8015974:	3800      	subs	r0, #0
 8015976:	bf18      	it	ne
 8015978:	2001      	movne	r0, #1
 801597a:	4770      	bx	lr
 801597c:	4618      	mov	r0, r3
 801597e:	4770      	bx	lr

08015980 <rcl_clock_init>:
 8015980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015982:	4605      	mov	r5, r0
 8015984:	4610      	mov	r0, r2
 8015986:	4614      	mov	r4, r2
 8015988:	460e      	mov	r6, r1
 801598a:	f7f7 fc67 	bl	800d25c <rcutils_allocator_is_valid>
 801598e:	b128      	cbz	r0, 801599c <rcl_clock_init+0x1c>
 8015990:	2d03      	cmp	r5, #3
 8015992:	d803      	bhi.n	801599c <rcl_clock_init+0x1c>
 8015994:	e8df f005 	tbb	[pc, r5]
 8015998:	044c291a 	.word	0x044c291a
 801599c:	200b      	movs	r0, #11
 801599e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80159a0:	2e00      	cmp	r6, #0
 80159a2:	d0fb      	beq.n	801599c <rcl_clock_init+0x1c>
 80159a4:	2c00      	cmp	r4, #0
 80159a6:	d0f9      	beq.n	801599c <rcl_clock_init+0x1c>
 80159a8:	2300      	movs	r3, #0
 80159aa:	e9c6 3301 	strd	r3, r3, [r6, #4]
 80159ae:	f8df c0a4 	ldr.w	ip, [pc, #164]	@ 8015a54 <rcl_clock_init+0xd4>
 80159b2:	6133      	str	r3, [r6, #16]
 80159b4:	f106 0514 	add.w	r5, r6, #20
 80159b8:	2703      	movs	r7, #3
 80159ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80159bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80159be:	6823      	ldr	r3, [r4, #0]
 80159c0:	602b      	str	r3, [r5, #0]
 80159c2:	f8c6 c00c 	str.w	ip, [r6, #12]
 80159c6:	7037      	strb	r7, [r6, #0]
 80159c8:	2000      	movs	r0, #0
 80159ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80159cc:	2e00      	cmp	r6, #0
 80159ce:	d0e5      	beq.n	801599c <rcl_clock_init+0x1c>
 80159d0:	2300      	movs	r3, #0
 80159d2:	7033      	strb	r3, [r6, #0]
 80159d4:	e9c6 3301 	strd	r3, r3, [r6, #4]
 80159d8:	e9c6 3303 	strd	r3, r3, [r6, #12]
 80159dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80159de:	f106 0514 	add.w	r5, r6, #20
 80159e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80159e4:	6823      	ldr	r3, [r4, #0]
 80159e6:	602b      	str	r3, [r5, #0]
 80159e8:	e7ee      	b.n	80159c8 <rcl_clock_init+0x48>
 80159ea:	2e00      	cmp	r6, #0
 80159ec:	d0d6      	beq.n	801599c <rcl_clock_init+0x1c>
 80159ee:	2c00      	cmp	r4, #0
 80159f0:	d0d4      	beq.n	801599c <rcl_clock_init+0x1c>
 80159f2:	2700      	movs	r7, #0
 80159f4:	7037      	strb	r7, [r6, #0]
 80159f6:	46a4      	mov	ip, r4
 80159f8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80159fc:	f106 0514 	add.w	r5, r6, #20
 8015a00:	e9c6 7701 	strd	r7, r7, [r6, #4]
 8015a04:	e9c6 7703 	strd	r7, r7, [r6, #12]
 8015a08:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015a0a:	f8dc 3000 	ldr.w	r3, [ip]
 8015a0e:	602b      	str	r3, [r5, #0]
 8015a10:	6921      	ldr	r1, [r4, #16]
 8015a12:	6823      	ldr	r3, [r4, #0]
 8015a14:	2010      	movs	r0, #16
 8015a16:	4798      	blx	r3
 8015a18:	6130      	str	r0, [r6, #16]
 8015a1a:	b1b8      	cbz	r0, 8015a4c <rcl_clock_init+0xcc>
 8015a1c:	2200      	movs	r2, #0
 8015a1e:	2300      	movs	r3, #0
 8015a20:	e9c0 2300 	strd	r2, r3, [r0]
 8015a24:	4a0a      	ldr	r2, [pc, #40]	@ (8015a50 <rcl_clock_init+0xd0>)
 8015a26:	7207      	strb	r7, [r0, #8]
 8015a28:	2301      	movs	r3, #1
 8015a2a:	60f2      	str	r2, [r6, #12]
 8015a2c:	7033      	strb	r3, [r6, #0]
 8015a2e:	e7cb      	b.n	80159c8 <rcl_clock_init+0x48>
 8015a30:	2e00      	cmp	r6, #0
 8015a32:	d0b3      	beq.n	801599c <rcl_clock_init+0x1c>
 8015a34:	2c00      	cmp	r4, #0
 8015a36:	d0b1      	beq.n	801599c <rcl_clock_init+0x1c>
 8015a38:	2300      	movs	r3, #0
 8015a3a:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8015a3e:	f8df c018 	ldr.w	ip, [pc, #24]	@ 8015a58 <rcl_clock_init+0xd8>
 8015a42:	6133      	str	r3, [r6, #16]
 8015a44:	f106 0514 	add.w	r5, r6, #20
 8015a48:	2702      	movs	r7, #2
 8015a4a:	e7b6      	b.n	80159ba <rcl_clock_init+0x3a>
 8015a4c:	200a      	movs	r0, #10
 8015a4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015a50:	08015949 	.word	0x08015949
 8015a54:	08015941 	.word	0x08015941
 8015a58:	08015939 	.word	0x08015939

08015a5c <rcl_clock_get_now>:
 8015a5c:	b140      	cbz	r0, 8015a70 <rcl_clock_get_now+0x14>
 8015a5e:	b139      	cbz	r1, 8015a70 <rcl_clock_get_now+0x14>
 8015a60:	7803      	ldrb	r3, [r0, #0]
 8015a62:	b11b      	cbz	r3, 8015a6c <rcl_clock_get_now+0x10>
 8015a64:	68c3      	ldr	r3, [r0, #12]
 8015a66:	b10b      	cbz	r3, 8015a6c <rcl_clock_get_now+0x10>
 8015a68:	6900      	ldr	r0, [r0, #16]
 8015a6a:	4718      	bx	r3
 8015a6c:	2001      	movs	r0, #1
 8015a6e:	4770      	bx	lr
 8015a70:	200b      	movs	r0, #11
 8015a72:	4770      	bx	lr

08015a74 <rcl_is_enabled_ros_time_override>:
 8015a74:	b158      	cbz	r0, 8015a8e <rcl_is_enabled_ros_time_override+0x1a>
 8015a76:	b151      	cbz	r1, 8015a8e <rcl_is_enabled_ros_time_override+0x1a>
 8015a78:	7803      	ldrb	r3, [r0, #0]
 8015a7a:	2b01      	cmp	r3, #1
 8015a7c:	d105      	bne.n	8015a8a <rcl_is_enabled_ros_time_override+0x16>
 8015a7e:	6902      	ldr	r2, [r0, #16]
 8015a80:	b11a      	cbz	r2, 8015a8a <rcl_is_enabled_ros_time_override+0x16>
 8015a82:	7a13      	ldrb	r3, [r2, #8]
 8015a84:	700b      	strb	r3, [r1, #0]
 8015a86:	2000      	movs	r0, #0
 8015a88:	4770      	bx	lr
 8015a8a:	2001      	movs	r0, #1
 8015a8c:	4770      	bx	lr
 8015a8e:	200b      	movs	r0, #11
 8015a90:	4770      	bx	lr
 8015a92:	bf00      	nop

08015a94 <rcl_timer_clock>:
 8015a94:	b130      	cbz	r0, 8015aa4 <rcl_timer_clock+0x10>
 8015a96:	b129      	cbz	r1, 8015aa4 <rcl_timer_clock+0x10>
 8015a98:	6803      	ldr	r3, [r0, #0]
 8015a9a:	b12b      	cbz	r3, 8015aa8 <rcl_timer_clock+0x14>
 8015a9c:	681b      	ldr	r3, [r3, #0]
 8015a9e:	600b      	str	r3, [r1, #0]
 8015aa0:	2000      	movs	r0, #0
 8015aa2:	4770      	bx	lr
 8015aa4:	200b      	movs	r0, #11
 8015aa6:	4770      	bx	lr
 8015aa8:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8015aac:	4770      	bx	lr
 8015aae:	bf00      	nop

08015ab0 <rcl_timer_call>:
 8015ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ab4:	b087      	sub	sp, #28
 8015ab6:	2800      	cmp	r0, #0
 8015ab8:	d067      	beq.n	8015b8a <rcl_timer_call+0xda>
 8015aba:	6803      	ldr	r3, [r0, #0]
 8015abc:	4604      	mov	r4, r0
 8015abe:	2b00      	cmp	r3, #0
 8015ac0:	d068      	beq.n	8015b94 <rcl_timer_call+0xe4>
 8015ac2:	f3bf 8f5b 	dmb	ish
 8015ac6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8015aca:	f3bf 8f5b 	dmb	ish
 8015ace:	2b00      	cmp	r3, #0
 8015ad0:	d150      	bne.n	8015b74 <rcl_timer_call+0xc4>
 8015ad2:	6803      	ldr	r3, [r0, #0]
 8015ad4:	a904      	add	r1, sp, #16
 8015ad6:	6818      	ldr	r0, [r3, #0]
 8015ad8:	f7ff ffc0 	bl	8015a5c <rcl_clock_get_now>
 8015adc:	4605      	mov	r5, r0
 8015ade:	2800      	cmp	r0, #0
 8015ae0:	d144      	bne.n	8015b6c <rcl_timer_call+0xbc>
 8015ae2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015ae6:	2b00      	cmp	r3, #0
 8015ae8:	db4a      	blt.n	8015b80 <rcl_timer_call+0xd0>
 8015aea:	6820      	ldr	r0, [r4, #0]
 8015aec:	f04f 0a05 	mov.w	sl, #5
 8015af0:	f8cd a000 	str.w	sl, [sp]
 8015af4:	3020      	adds	r0, #32
 8015af6:	f001 fcef 	bl	80174d8 <__atomic_exchange_8>
 8015afa:	6823      	ldr	r3, [r4, #0]
 8015afc:	f3bf 8f5b 	dmb	ish
 8015b00:	4680      	mov	r8, r0
 8015b02:	f8d3 b010 	ldr.w	fp, [r3, #16]
 8015b06:	f3bf 8f5b 	dmb	ish
 8015b0a:	6820      	ldr	r0, [r4, #0]
 8015b0c:	4689      	mov	r9, r1
 8015b0e:	3028      	adds	r0, #40	@ 0x28
 8015b10:	4651      	mov	r1, sl
 8015b12:	f001 fc75 	bl	8017400 <__atomic_load_8>
 8015b16:	4606      	mov	r6, r0
 8015b18:	6820      	ldr	r0, [r4, #0]
 8015b1a:	460f      	mov	r7, r1
 8015b1c:	3018      	adds	r0, #24
 8015b1e:	4651      	mov	r1, sl
 8015b20:	f001 fc6e 	bl	8017400 <__atomic_load_8>
 8015b24:	1836      	adds	r6, r6, r0
 8015b26:	eb41 0707 	adc.w	r7, r1, r7
 8015b2a:	4602      	mov	r2, r0
 8015b2c:	460b      	mov	r3, r1
 8015b2e:	4682      	mov	sl, r0
 8015b30:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015b34:	42b0      	cmp	r0, r6
 8015b36:	eb71 0c07 	sbcs.w	ip, r1, r7
 8015b3a:	db04      	blt.n	8015b46 <rcl_timer_call+0x96>
 8015b3c:	ea53 0c02 	orrs.w	ip, r3, r2
 8015b40:	d12b      	bne.n	8015b9a <rcl_timer_call+0xea>
 8015b42:	4606      	mov	r6, r0
 8015b44:	460f      	mov	r7, r1
 8015b46:	6820      	ldr	r0, [r4, #0]
 8015b48:	2105      	movs	r1, #5
 8015b4a:	4632      	mov	r2, r6
 8015b4c:	463b      	mov	r3, r7
 8015b4e:	3028      	adds	r0, #40	@ 0x28
 8015b50:	9100      	str	r1, [sp, #0]
 8015b52:	f001 fc8b 	bl	801746c <__atomic_store_8>
 8015b56:	f1bb 0f00 	cmp.w	fp, #0
 8015b5a:	d007      	beq.n	8015b6c <rcl_timer_call+0xbc>
 8015b5c:	9a04      	ldr	r2, [sp, #16]
 8015b5e:	9b05      	ldr	r3, [sp, #20]
 8015b60:	ebb2 0208 	subs.w	r2, r2, r8
 8015b64:	4620      	mov	r0, r4
 8015b66:	eb63 0309 	sbc.w	r3, r3, r9
 8015b6a:	47d8      	blx	fp
 8015b6c:	4628      	mov	r0, r5
 8015b6e:	b007      	add	sp, #28
 8015b70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b74:	f240 3521 	movw	r5, #801	@ 0x321
 8015b78:	4628      	mov	r0, r5
 8015b7a:	b007      	add	sp, #28
 8015b7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b80:	2501      	movs	r5, #1
 8015b82:	4628      	mov	r0, r5
 8015b84:	b007      	add	sp, #28
 8015b86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b8a:	250b      	movs	r5, #11
 8015b8c:	4628      	mov	r0, r5
 8015b8e:	b007      	add	sp, #28
 8015b90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b94:	f44f 7548 	mov.w	r5, #800	@ 0x320
 8015b98:	e7e8      	b.n	8015b6c <rcl_timer_call+0xbc>
 8015b9a:	1b80      	subs	r0, r0, r6
 8015b9c:	eb61 0107 	sbc.w	r1, r1, r7
 8015ba0:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8015ba4:	f7eb f83a 	bl	8000c1c <__aeabi_ldivmod>
 8015ba8:	9b02      	ldr	r3, [sp, #8]
 8015baa:	3001      	adds	r0, #1
 8015bac:	f141 0100 	adc.w	r1, r1, #0
 8015bb0:	fb00 f303 	mul.w	r3, r0, r3
 8015bb4:	fb01 330a 	mla	r3, r1, sl, r3
 8015bb8:	fba0 0a0a 	umull	r0, sl, r0, sl
 8015bbc:	1830      	adds	r0, r6, r0
 8015bbe:	4453      	add	r3, sl
 8015bc0:	eb43 0707 	adc.w	r7, r3, r7
 8015bc4:	4606      	mov	r6, r0
 8015bc6:	e7be      	b.n	8015b46 <rcl_timer_call+0x96>

08015bc8 <rcl_timer_is_ready>:
 8015bc8:	b398      	cbz	r0, 8015c32 <rcl_timer_is_ready+0x6a>
 8015bca:	b530      	push	{r4, r5, lr}
 8015bcc:	6803      	ldr	r3, [r0, #0]
 8015bce:	b083      	sub	sp, #12
 8015bd0:	4604      	mov	r4, r0
 8015bd2:	b383      	cbz	r3, 8015c36 <rcl_timer_is_ready+0x6e>
 8015bd4:	460d      	mov	r5, r1
 8015bd6:	b349      	cbz	r1, 8015c2c <rcl_timer_is_ready+0x64>
 8015bd8:	f3bf 8f5b 	dmb	ish
 8015bdc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8015be0:	f3bf 8f5b 	dmb	ish
 8015be4:	b9fb      	cbnz	r3, 8015c26 <rcl_timer_is_ready+0x5e>
 8015be6:	6803      	ldr	r3, [r0, #0]
 8015be8:	4669      	mov	r1, sp
 8015bea:	6818      	ldr	r0, [r3, #0]
 8015bec:	f7ff ff36 	bl	8015a5c <rcl_clock_get_now>
 8015bf0:	b128      	cbz	r0, 8015bfe <rcl_timer_is_ready+0x36>
 8015bf2:	f240 3321 	movw	r3, #801	@ 0x321
 8015bf6:	4298      	cmp	r0, r3
 8015bf8:	d015      	beq.n	8015c26 <rcl_timer_is_ready+0x5e>
 8015bfa:	b003      	add	sp, #12
 8015bfc:	bd30      	pop	{r4, r5, pc}
 8015bfe:	6820      	ldr	r0, [r4, #0]
 8015c00:	2105      	movs	r1, #5
 8015c02:	3028      	adds	r0, #40	@ 0x28
 8015c04:	f001 fbfc 	bl	8017400 <__atomic_load_8>
 8015c08:	e9dd 3200 	ldrd	r3, r2, [sp]
 8015c0c:	1ac0      	subs	r0, r0, r3
 8015c0e:	eb61 0102 	sbc.w	r1, r1, r2
 8015c12:	2801      	cmp	r0, #1
 8015c14:	f171 0100 	sbcs.w	r1, r1, #0
 8015c18:	bfb4      	ite	lt
 8015c1a:	2301      	movlt	r3, #1
 8015c1c:	2300      	movge	r3, #0
 8015c1e:	702b      	strb	r3, [r5, #0]
 8015c20:	2000      	movs	r0, #0
 8015c22:	b003      	add	sp, #12
 8015c24:	bd30      	pop	{r4, r5, pc}
 8015c26:	2300      	movs	r3, #0
 8015c28:	702b      	strb	r3, [r5, #0]
 8015c2a:	e7f9      	b.n	8015c20 <rcl_timer_is_ready+0x58>
 8015c2c:	200b      	movs	r0, #11
 8015c2e:	b003      	add	sp, #12
 8015c30:	bd30      	pop	{r4, r5, pc}
 8015c32:	200b      	movs	r0, #11
 8015c34:	4770      	bx	lr
 8015c36:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8015c3a:	e7de      	b.n	8015bfa <rcl_timer_is_ready+0x32>

08015c3c <rcl_timer_get_next_call_time>:
 8015c3c:	b1d8      	cbz	r0, 8015c76 <rcl_timer_get_next_call_time+0x3a>
 8015c3e:	b538      	push	{r3, r4, r5, lr}
 8015c40:	6803      	ldr	r3, [r0, #0]
 8015c42:	b1d3      	cbz	r3, 8015c7a <rcl_timer_get_next_call_time+0x3e>
 8015c44:	460c      	mov	r4, r1
 8015c46:	b1a1      	cbz	r1, 8015c72 <rcl_timer_get_next_call_time+0x36>
 8015c48:	f3bf 8f5b 	dmb	ish
 8015c4c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8015c50:	f3bf 8f5b 	dmb	ish
 8015c54:	f003 05ff 	and.w	r5, r3, #255	@ 0xff
 8015c58:	b943      	cbnz	r3, 8015c6c <rcl_timer_get_next_call_time+0x30>
 8015c5a:	6800      	ldr	r0, [r0, #0]
 8015c5c:	2105      	movs	r1, #5
 8015c5e:	3028      	adds	r0, #40	@ 0x28
 8015c60:	f001 fbce 	bl	8017400 <__atomic_load_8>
 8015c64:	e9c4 0100 	strd	r0, r1, [r4]
 8015c68:	4628      	mov	r0, r5
 8015c6a:	bd38      	pop	{r3, r4, r5, pc}
 8015c6c:	f240 3021 	movw	r0, #801	@ 0x321
 8015c70:	bd38      	pop	{r3, r4, r5, pc}
 8015c72:	200b      	movs	r0, #11
 8015c74:	bd38      	pop	{r3, r4, r5, pc}
 8015c76:	200b      	movs	r0, #11
 8015c78:	4770      	bx	lr
 8015c7a:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8015c7e:	bd38      	pop	{r3, r4, r5, pc}

08015c80 <rcl_timer_get_guard_condition>:
 8015c80:	b130      	cbz	r0, 8015c90 <rcl_timer_get_guard_condition+0x10>
 8015c82:	6800      	ldr	r0, [r0, #0]
 8015c84:	b120      	cbz	r0, 8015c90 <rcl_timer_get_guard_condition+0x10>
 8015c86:	68c3      	ldr	r3, [r0, #12]
 8015c88:	b10b      	cbz	r3, 8015c8e <rcl_timer_get_guard_condition+0xe>
 8015c8a:	3008      	adds	r0, #8
 8015c8c:	4770      	bx	lr
 8015c8e:	4618      	mov	r0, r3
 8015c90:	4770      	bx	lr
 8015c92:	bf00      	nop

08015c94 <rcl_get_zero_initialized_wait_set>:
 8015c94:	b510      	push	{r4, lr}
 8015c96:	4c08      	ldr	r4, [pc, #32]	@ (8015cb8 <rcl_get_zero_initialized_wait_set+0x24>)
 8015c98:	4686      	mov	lr, r0
 8015c9a:	4684      	mov	ip, r0
 8015c9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015c9e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015ca2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015ca4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015ca8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015caa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015cae:	6823      	ldr	r3, [r4, #0]
 8015cb0:	f8cc 3000 	str.w	r3, [ip]
 8015cb4:	4670      	mov	r0, lr
 8015cb6:	bd10      	pop	{r4, pc}
 8015cb8:	08020218 	.word	0x08020218

08015cbc <rcl_wait_set_is_valid>:
 8015cbc:	b118      	cbz	r0, 8015cc6 <rcl_wait_set_is_valid+0xa>
 8015cbe:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8015cc0:	3800      	subs	r0, #0
 8015cc2:	bf18      	it	ne
 8015cc4:	2001      	movne	r0, #1
 8015cc6:	4770      	bx	lr

08015cc8 <rcl_wait_set_fini>:
 8015cc8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015ccc:	b083      	sub	sp, #12
 8015cce:	2800      	cmp	r0, #0
 8015cd0:	f000 8098 	beq.w	8015e04 <rcl_wait_set_fini+0x13c>
 8015cd4:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8015cd6:	4605      	mov	r5, r0
 8015cd8:	2e00      	cmp	r6, #0
 8015cda:	f000 808f 	beq.w	8015dfc <rcl_wait_set_fini+0x134>
 8015cde:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 8015ce0:	f003 fb3e 	bl	8019360 <rmw_destroy_wait_set>
 8015ce4:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015ce6:	1e06      	subs	r6, r0, #0
 8015ce8:	bf18      	it	ne
 8015cea:	f44f 7661 	movne.w	r6, #900	@ 0x384
 8015cee:	2c00      	cmp	r4, #0
 8015cf0:	f000 8084 	beq.w	8015dfc <rcl_wait_set_fini+0x134>
 8015cf4:	6828      	ldr	r0, [r5, #0]
 8015cf6:	f8d4 804c 	ldr.w	r8, [r4, #76]	@ 0x4c
 8015cfa:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8015cfe:	2700      	movs	r7, #0
 8015d00:	606f      	str	r7, [r5, #4]
 8015d02:	6027      	str	r7, [r4, #0]
 8015d04:	b118      	cbz	r0, 8015d0e <rcl_wait_set_fini+0x46>
 8015d06:	4649      	mov	r1, r9
 8015d08:	47c0      	blx	r8
 8015d0a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015d0c:	602f      	str	r7, [r5, #0]
 8015d0e:	68a0      	ldr	r0, [r4, #8]
 8015d10:	b128      	cbz	r0, 8015d1e <rcl_wait_set_fini+0x56>
 8015d12:	4649      	mov	r1, r9
 8015d14:	47c0      	blx	r8
 8015d16:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015d18:	2300      	movs	r3, #0
 8015d1a:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8015d1e:	68a8      	ldr	r0, [r5, #8]
 8015d20:	6ce7      	ldr	r7, [r4, #76]	@ 0x4c
 8015d22:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8015d24:	f04f 0800 	mov.w	r8, #0
 8015d28:	f8c5 800c 	str.w	r8, [r5, #12]
 8015d2c:	f8c4 800c 	str.w	r8, [r4, #12]
 8015d30:	b128      	cbz	r0, 8015d3e <rcl_wait_set_fini+0x76>
 8015d32:	47b8      	blx	r7
 8015d34:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015d36:	f8c5 8008 	str.w	r8, [r5, #8]
 8015d3a:	6ce7      	ldr	r7, [r4, #76]	@ 0x4c
 8015d3c:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8015d3e:	6960      	ldr	r0, [r4, #20]
 8015d40:	f04f 0800 	mov.w	r8, #0
 8015d44:	f8c4 8010 	str.w	r8, [r4, #16]
 8015d48:	b128      	cbz	r0, 8015d56 <rcl_wait_set_fini+0x8e>
 8015d4a:	47b8      	blx	r7
 8015d4c:	f8c4 8014 	str.w	r8, [r4, #20]
 8015d50:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015d52:	6ce7      	ldr	r7, [r4, #76]	@ 0x4c
 8015d54:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8015d56:	6928      	ldr	r0, [r5, #16]
 8015d58:	f04f 0800 	mov.w	r8, #0
 8015d5c:	f8c5 8014 	str.w	r8, [r5, #20]
 8015d60:	f8c4 8040 	str.w	r8, [r4, #64]	@ 0x40
 8015d64:	b128      	cbz	r0, 8015d72 <rcl_wait_set_fini+0xaa>
 8015d66:	47b8      	blx	r7
 8015d68:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015d6a:	f8c5 8010 	str.w	r8, [r5, #16]
 8015d6e:	6ce7      	ldr	r7, [r4, #76]	@ 0x4c
 8015d70:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8015d72:	69a8      	ldr	r0, [r5, #24]
 8015d74:	f04f 0800 	mov.w	r8, #0
 8015d78:	f8c5 801c 	str.w	r8, [r5, #28]
 8015d7c:	f8c4 8018 	str.w	r8, [r4, #24]
 8015d80:	b128      	cbz	r0, 8015d8e <rcl_wait_set_fini+0xc6>
 8015d82:	9101      	str	r1, [sp, #4]
 8015d84:	47b8      	blx	r7
 8015d86:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015d88:	9901      	ldr	r1, [sp, #4]
 8015d8a:	f8c5 8018 	str.w	r8, [r5, #24]
 8015d8e:	6a20      	ldr	r0, [r4, #32]
 8015d90:	b120      	cbz	r0, 8015d9c <rcl_wait_set_fini+0xd4>
 8015d92:	47b8      	blx	r7
 8015d94:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015d96:	2300      	movs	r3, #0
 8015d98:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8015d9c:	6a28      	ldr	r0, [r5, #32]
 8015d9e:	f8d4 804c 	ldr.w	r8, [r4, #76]	@ 0x4c
 8015da2:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8015da6:	2700      	movs	r7, #0
 8015da8:	626f      	str	r7, [r5, #36]	@ 0x24
 8015daa:	6267      	str	r7, [r4, #36]	@ 0x24
 8015dac:	b118      	cbz	r0, 8015db6 <rcl_wait_set_fini+0xee>
 8015dae:	4649      	mov	r1, r9
 8015db0:	47c0      	blx	r8
 8015db2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015db4:	622f      	str	r7, [r5, #32]
 8015db6:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8015db8:	b128      	cbz	r0, 8015dc6 <rcl_wait_set_fini+0xfe>
 8015dba:	4649      	mov	r1, r9
 8015dbc:	47c0      	blx	r8
 8015dbe:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015dc0:	2300      	movs	r3, #0
 8015dc2:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 8015dc6:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8015dc8:	f8d4 804c 	ldr.w	r8, [r4, #76]	@ 0x4c
 8015dcc:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8015dd0:	2700      	movs	r7, #0
 8015dd2:	62ef      	str	r7, [r5, #44]	@ 0x2c
 8015dd4:	6327      	str	r7, [r4, #48]	@ 0x30
 8015dd6:	b118      	cbz	r0, 8015de0 <rcl_wait_set_fini+0x118>
 8015dd8:	4649      	mov	r1, r9
 8015dda:	47c0      	blx	r8
 8015ddc:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015dde:	62af      	str	r7, [r5, #40]	@ 0x28
 8015de0:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8015de2:	b128      	cbz	r0, 8015df0 <rcl_wait_set_fini+0x128>
 8015de4:	4649      	mov	r1, r9
 8015de6:	47c0      	blx	r8
 8015de8:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015dea:	2300      	movs	r3, #0
 8015dec:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
 8015df0:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8015df2:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8015df4:	4620      	mov	r0, r4
 8015df6:	4798      	blx	r3
 8015df8:	2300      	movs	r3, #0
 8015dfa:	632b      	str	r3, [r5, #48]	@ 0x30
 8015dfc:	4630      	mov	r0, r6
 8015dfe:	b003      	add	sp, #12
 8015e00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015e04:	260b      	movs	r6, #11
 8015e06:	4630      	mov	r0, r6
 8015e08:	b003      	add	sp, #12
 8015e0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015e0e:	bf00      	nop

08015e10 <rcl_wait_set_add_subscription>:
 8015e10:	b318      	cbz	r0, 8015e5a <rcl_wait_set_add_subscription+0x4a>
 8015e12:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8015e14:	b570      	push	{r4, r5, r6, lr}
 8015e16:	4604      	mov	r4, r0
 8015e18:	b30b      	cbz	r3, 8015e5e <rcl_wait_set_add_subscription+0x4e>
 8015e1a:	b319      	cbz	r1, 8015e64 <rcl_wait_set_add_subscription+0x54>
 8015e1c:	681d      	ldr	r5, [r3, #0]
 8015e1e:	6840      	ldr	r0, [r0, #4]
 8015e20:	4285      	cmp	r5, r0
 8015e22:	d217      	bcs.n	8015e54 <rcl_wait_set_add_subscription+0x44>
 8015e24:	6820      	ldr	r0, [r4, #0]
 8015e26:	1c6e      	adds	r6, r5, #1
 8015e28:	601e      	str	r6, [r3, #0]
 8015e2a:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8015e2e:	b102      	cbz	r2, 8015e32 <rcl_wait_set_add_subscription+0x22>
 8015e30:	6015      	str	r5, [r2, #0]
 8015e32:	4608      	mov	r0, r1
 8015e34:	f7ff fd70 	bl	8015918 <rcl_subscription_get_rmw_handle>
 8015e38:	b150      	cbz	r0, 8015e50 <rcl_wait_set_add_subscription+0x40>
 8015e3a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015e3c:	6842      	ldr	r2, [r0, #4]
 8015e3e:	689b      	ldr	r3, [r3, #8]
 8015e40:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015e44:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8015e46:	6853      	ldr	r3, [r2, #4]
 8015e48:	3301      	adds	r3, #1
 8015e4a:	2000      	movs	r0, #0
 8015e4c:	6053      	str	r3, [r2, #4]
 8015e4e:	bd70      	pop	{r4, r5, r6, pc}
 8015e50:	2001      	movs	r0, #1
 8015e52:	bd70      	pop	{r4, r5, r6, pc}
 8015e54:	f240 3086 	movw	r0, #902	@ 0x386
 8015e58:	bd70      	pop	{r4, r5, r6, pc}
 8015e5a:	200b      	movs	r0, #11
 8015e5c:	4770      	bx	lr
 8015e5e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015e62:	bd70      	pop	{r4, r5, r6, pc}
 8015e64:	200b      	movs	r0, #11
 8015e66:	bd70      	pop	{r4, r5, r6, pc}

08015e68 <rcl_wait_set_clear>:
 8015e68:	2800      	cmp	r0, #0
 8015e6a:	d074      	beq.n	8015f56 <rcl_wait_set_clear+0xee>
 8015e6c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8015e6e:	b510      	push	{r4, lr}
 8015e70:	4604      	mov	r4, r0
 8015e72:	2b00      	cmp	r3, #0
 8015e74:	d071      	beq.n	8015f5a <rcl_wait_set_clear+0xf2>
 8015e76:	6800      	ldr	r0, [r0, #0]
 8015e78:	b138      	cbz	r0, 8015e8a <rcl_wait_set_clear+0x22>
 8015e7a:	6862      	ldr	r2, [r4, #4]
 8015e7c:	2100      	movs	r1, #0
 8015e7e:	0092      	lsls	r2, r2, #2
 8015e80:	f007 fb06 	bl	801d490 <memset>
 8015e84:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015e86:	2200      	movs	r2, #0
 8015e88:	601a      	str	r2, [r3, #0]
 8015e8a:	68a0      	ldr	r0, [r4, #8]
 8015e8c:	b138      	cbz	r0, 8015e9e <rcl_wait_set_clear+0x36>
 8015e8e:	68e2      	ldr	r2, [r4, #12]
 8015e90:	2100      	movs	r1, #0
 8015e92:	0092      	lsls	r2, r2, #2
 8015e94:	f007 fafc 	bl	801d490 <memset>
 8015e98:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015e9a:	2200      	movs	r2, #0
 8015e9c:	60da      	str	r2, [r3, #12]
 8015e9e:	69a0      	ldr	r0, [r4, #24]
 8015ea0:	b138      	cbz	r0, 8015eb2 <rcl_wait_set_clear+0x4a>
 8015ea2:	69e2      	ldr	r2, [r4, #28]
 8015ea4:	2100      	movs	r1, #0
 8015ea6:	0092      	lsls	r2, r2, #2
 8015ea8:	f007 faf2 	bl	801d490 <memset>
 8015eac:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015eae:	2200      	movs	r2, #0
 8015eb0:	619a      	str	r2, [r3, #24]
 8015eb2:	6a20      	ldr	r0, [r4, #32]
 8015eb4:	b138      	cbz	r0, 8015ec6 <rcl_wait_set_clear+0x5e>
 8015eb6:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8015eb8:	2100      	movs	r1, #0
 8015eba:	0092      	lsls	r2, r2, #2
 8015ebc:	f007 fae8 	bl	801d490 <memset>
 8015ec0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015ec2:	2200      	movs	r2, #0
 8015ec4:	625a      	str	r2, [r3, #36]	@ 0x24
 8015ec6:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8015ec8:	b138      	cbz	r0, 8015eda <rcl_wait_set_clear+0x72>
 8015eca:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8015ecc:	2100      	movs	r1, #0
 8015ece:	0092      	lsls	r2, r2, #2
 8015ed0:	f007 fade 	bl	801d490 <memset>
 8015ed4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015ed6:	2200      	movs	r2, #0
 8015ed8:	631a      	str	r2, [r3, #48]	@ 0x30
 8015eda:	6920      	ldr	r0, [r4, #16]
 8015edc:	b138      	cbz	r0, 8015eee <rcl_wait_set_clear+0x86>
 8015ede:	6962      	ldr	r2, [r4, #20]
 8015ee0:	2100      	movs	r1, #0
 8015ee2:	0092      	lsls	r2, r2, #2
 8015ee4:	f007 fad4 	bl	801d490 <memset>
 8015ee8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015eea:	2200      	movs	r2, #0
 8015eec:	641a      	str	r2, [r3, #64]	@ 0x40
 8015eee:	6898      	ldr	r0, [r3, #8]
 8015ef0:	b138      	cbz	r0, 8015f02 <rcl_wait_set_clear+0x9a>
 8015ef2:	685a      	ldr	r2, [r3, #4]
 8015ef4:	2100      	movs	r1, #0
 8015ef6:	0092      	lsls	r2, r2, #2
 8015ef8:	f007 faca 	bl	801d490 <memset>
 8015efc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015efe:	2200      	movs	r2, #0
 8015f00:	605a      	str	r2, [r3, #4]
 8015f02:	6958      	ldr	r0, [r3, #20]
 8015f04:	b138      	cbz	r0, 8015f16 <rcl_wait_set_clear+0xae>
 8015f06:	691a      	ldr	r2, [r3, #16]
 8015f08:	2100      	movs	r1, #0
 8015f0a:	0092      	lsls	r2, r2, #2
 8015f0c:	f007 fac0 	bl	801d490 <memset>
 8015f10:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015f12:	2200      	movs	r2, #0
 8015f14:	611a      	str	r2, [r3, #16]
 8015f16:	6a18      	ldr	r0, [r3, #32]
 8015f18:	b138      	cbz	r0, 8015f2a <rcl_wait_set_clear+0xc2>
 8015f1a:	69da      	ldr	r2, [r3, #28]
 8015f1c:	2100      	movs	r1, #0
 8015f1e:	0092      	lsls	r2, r2, #2
 8015f20:	f007 fab6 	bl	801d490 <memset>
 8015f24:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015f26:	2200      	movs	r2, #0
 8015f28:	61da      	str	r2, [r3, #28]
 8015f2a:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8015f2c:	b138      	cbz	r0, 8015f3e <rcl_wait_set_clear+0xd6>
 8015f2e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8015f30:	2100      	movs	r1, #0
 8015f32:	0092      	lsls	r2, r2, #2
 8015f34:	f007 faac 	bl	801d490 <memset>
 8015f38:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015f3a:	2200      	movs	r2, #0
 8015f3c:	629a      	str	r2, [r3, #40]	@ 0x28
 8015f3e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8015f40:	b138      	cbz	r0, 8015f52 <rcl_wait_set_clear+0xea>
 8015f42:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8015f44:	2100      	movs	r1, #0
 8015f46:	0092      	lsls	r2, r2, #2
 8015f48:	f007 faa2 	bl	801d490 <memset>
 8015f4c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015f4e:	2200      	movs	r2, #0
 8015f50:	635a      	str	r2, [r3, #52]	@ 0x34
 8015f52:	2000      	movs	r0, #0
 8015f54:	bd10      	pop	{r4, pc}
 8015f56:	200b      	movs	r0, #11
 8015f58:	4770      	bx	lr
 8015f5a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015f5e:	bd10      	pop	{r4, pc}

08015f60 <rcl_wait_set_resize>:
 8015f60:	2800      	cmp	r0, #0
 8015f62:	f000 81a1 	beq.w	80162a8 <rcl_wait_set_resize+0x348>
 8015f66:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f6a:	f8d0 a030 	ldr.w	sl, [r0, #48]	@ 0x30
 8015f6e:	b083      	sub	sp, #12
 8015f70:	4604      	mov	r4, r0
 8015f72:	f1ba 0f00 	cmp.w	sl, #0
 8015f76:	f000 8199 	beq.w	80162ac <rcl_wait_set_resize+0x34c>
 8015f7a:	f04f 0800 	mov.w	r8, #0
 8015f7e:	f8da 9058 	ldr.w	r9, [sl, #88]	@ 0x58
 8015f82:	461e      	mov	r6, r3
 8015f84:	460f      	mov	r7, r1
 8015f86:	e9da b313 	ldrd	fp, r3, [sl, #76]	@ 0x4c
 8015f8a:	4615      	mov	r5, r2
 8015f8c:	f8c0 8004 	str.w	r8, [r0, #4]
 8015f90:	6800      	ldr	r0, [r0, #0]
 8015f92:	f8ca 8000 	str.w	r8, [sl]
 8015f96:	2900      	cmp	r1, #0
 8015f98:	f000 80cf 	beq.w	801613a <rcl_wait_set_resize+0x1da>
 8015f9c:	ea4f 0a81 	mov.w	sl, r1, lsl #2
 8015fa0:	464a      	mov	r2, r9
 8015fa2:	4651      	mov	r1, sl
 8015fa4:	9301      	str	r3, [sp, #4]
 8015fa6:	4798      	blx	r3
 8015fa8:	9b01      	ldr	r3, [sp, #4]
 8015faa:	6020      	str	r0, [r4, #0]
 8015fac:	2800      	cmp	r0, #0
 8015fae:	f000 8109 	beq.w	80161c4 <rcl_wait_set_resize+0x264>
 8015fb2:	4652      	mov	r2, sl
 8015fb4:	4641      	mov	r1, r8
 8015fb6:	9301      	str	r3, [sp, #4]
 8015fb8:	f007 fa6a 	bl	801d490 <memset>
 8015fbc:	6067      	str	r7, [r4, #4]
 8015fbe:	6b27      	ldr	r7, [r4, #48]	@ 0x30
 8015fc0:	9b01      	ldr	r3, [sp, #4]
 8015fc2:	68b8      	ldr	r0, [r7, #8]
 8015fc4:	f8c7 8004 	str.w	r8, [r7, #4]
 8015fc8:	464a      	mov	r2, r9
 8015fca:	4651      	mov	r1, sl
 8015fcc:	4798      	blx	r3
 8015fce:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015fd0:	60b8      	str	r0, [r7, #8]
 8015fd2:	689f      	ldr	r7, [r3, #8]
 8015fd4:	2f00      	cmp	r7, #0
 8015fd6:	f000 80f0 	beq.w	80161ba <rcl_wait_set_resize+0x25a>
 8015fda:	4652      	mov	r2, sl
 8015fdc:	4641      	mov	r1, r8
 8015fde:	4638      	mov	r0, r7
 8015fe0:	f007 fa56 	bl	801d490 <memset>
 8015fe4:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8015fe8:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 8015fec:	68a0      	ldr	r0, [r4, #8]
 8015fee:	2700      	movs	r7, #0
 8015ff0:	e9da 2313 	ldrd	r2, r3, [sl, #76]	@ 0x4c
 8015ff4:	60e7      	str	r7, [r4, #12]
 8015ff6:	f8ca 700c 	str.w	r7, [sl, #12]
 8015ffa:	2d00      	cmp	r5, #0
 8015ffc:	f040 80b0 	bne.w	8016160 <rcl_wait_set_resize+0x200>
 8016000:	b130      	cbz	r0, 8016010 <rcl_wait_set_resize+0xb0>
 8016002:	4641      	mov	r1, r8
 8016004:	4790      	blx	r2
 8016006:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 801600a:	60a5      	str	r5, [r4, #8]
 801600c:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 8016010:	f8da 0014 	ldr.w	r0, [sl, #20]
 8016014:	2700      	movs	r7, #0
 8016016:	19ad      	adds	r5, r5, r6
 8016018:	f8ca 7010 	str.w	r7, [sl, #16]
 801601c:	f040 80b8 	bne.w	8016190 <rcl_wait_set_resize+0x230>
 8016020:	b148      	cbz	r0, 8016036 <rcl_wait_set_resize+0xd6>
 8016022:	f8da 304c 	ldr.w	r3, [sl, #76]	@ 0x4c
 8016026:	4641      	mov	r1, r8
 8016028:	4798      	blx	r3
 801602a:	f8ca 5014 	str.w	r5, [sl, #20]
 801602e:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8016032:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 8016036:	6920      	ldr	r0, [r4, #16]
 8016038:	2500      	movs	r5, #0
 801603a:	e9da 9713 	ldrd	r9, r7, [sl, #76]	@ 0x4c
 801603e:	6165      	str	r5, [r4, #20]
 8016040:	f8ca 5040 	str.w	r5, [sl, #64]	@ 0x40
 8016044:	2e00      	cmp	r6, #0
 8016046:	f040 80c1 	bne.w	80161cc <rcl_wait_set_resize+0x26c>
 801604a:	b140      	cbz	r0, 801605e <rcl_wait_set_resize+0xfe>
 801604c:	4641      	mov	r1, r8
 801604e:	47c8      	blx	r9
 8016050:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8016054:	6126      	str	r6, [r4, #16]
 8016056:	e9da 9713 	ldrd	r9, r7, [sl, #76]	@ 0x4c
 801605a:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 801605e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016060:	69a0      	ldr	r0, [r4, #24]
 8016062:	2500      	movs	r5, #0
 8016064:	61e5      	str	r5, [r4, #28]
 8016066:	f8ca 5018 	str.w	r5, [sl, #24]
 801606a:	2b00      	cmp	r3, #0
 801606c:	f040 80c2 	bne.w	80161f4 <rcl_wait_set_resize+0x294>
 8016070:	b128      	cbz	r0, 801607e <rcl_wait_set_resize+0x11e>
 8016072:	4641      	mov	r1, r8
 8016074:	47c8      	blx	r9
 8016076:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016078:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 801607c:	61a3      	str	r3, [r4, #24]
 801607e:	f8da 0020 	ldr.w	r0, [sl, #32]
 8016082:	b130      	cbz	r0, 8016092 <rcl_wait_set_resize+0x132>
 8016084:	4641      	mov	r1, r8
 8016086:	47c8      	blx	r9
 8016088:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 801608c:	2300      	movs	r3, #0
 801608e:	e9ca 3307 	strd	r3, r3, [sl, #28]
 8016092:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8016094:	f8da 6058 	ldr.w	r6, [sl, #88]	@ 0x58
 8016098:	6a20      	ldr	r0, [r4, #32]
 801609a:	2500      	movs	r5, #0
 801609c:	e9da 7813 	ldrd	r7, r8, [sl, #76]	@ 0x4c
 80160a0:	6265      	str	r5, [r4, #36]	@ 0x24
 80160a2:	f8ca 5024 	str.w	r5, [sl, #36]	@ 0x24
 80160a6:	2b00      	cmp	r3, #0
 80160a8:	f000 80c8 	beq.w	801623c <rcl_wait_set_resize+0x2dc>
 80160ac:	ea4f 0983 	mov.w	r9, r3, lsl #2
 80160b0:	4632      	mov	r2, r6
 80160b2:	4649      	mov	r1, r9
 80160b4:	47c0      	blx	r8
 80160b6:	6220      	str	r0, [r4, #32]
 80160b8:	2800      	cmp	r0, #0
 80160ba:	f000 8083 	beq.w	80161c4 <rcl_wait_set_resize+0x264>
 80160be:	464a      	mov	r2, r9
 80160c0:	4629      	mov	r1, r5
 80160c2:	f007 f9e5 	bl	801d490 <memset>
 80160c6:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 80160ca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80160cc:	6263      	str	r3, [r4, #36]	@ 0x24
 80160ce:	f8da 002c 	ldr.w	r0, [sl, #44]	@ 0x2c
 80160d2:	f8ca 5028 	str.w	r5, [sl, #40]	@ 0x28
 80160d6:	4632      	mov	r2, r6
 80160d8:	4649      	mov	r1, r9
 80160da:	47c0      	blx	r8
 80160dc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80160de:	f8ca 002c 	str.w	r0, [sl, #44]	@ 0x2c
 80160e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80160e4:	2b00      	cmp	r3, #0
 80160e6:	f000 80fb 	beq.w	80162e0 <rcl_wait_set_resize+0x380>
 80160ea:	464a      	mov	r2, r9
 80160ec:	4629      	mov	r1, r5
 80160ee:	4618      	mov	r0, r3
 80160f0:	f007 f9ce 	bl	801d490 <memset>
 80160f4:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 80160f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80160fa:	f8da 6058 	ldr.w	r6, [sl, #88]	@ 0x58
 80160fe:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8016100:	2500      	movs	r5, #0
 8016102:	e9da 7813 	ldrd	r7, r8, [sl, #76]	@ 0x4c
 8016106:	62e5      	str	r5, [r4, #44]	@ 0x2c
 8016108:	f8ca 5030 	str.w	r5, [sl, #48]	@ 0x30
 801610c:	2b00      	cmp	r3, #0
 801610e:	f040 80a9 	bne.w	8016264 <rcl_wait_set_resize+0x304>
 8016112:	b128      	cbz	r0, 8016120 <rcl_wait_set_resize+0x1c0>
 8016114:	4631      	mov	r1, r6
 8016116:	47b8      	blx	r7
 8016118:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801611a:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 801611e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8016120:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 8016124:	b128      	cbz	r0, 8016132 <rcl_wait_set_resize+0x1d2>
 8016126:	4631      	mov	r1, r6
 8016128:	47b8      	blx	r7
 801612a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801612c:	2200      	movs	r2, #0
 801612e:	e9c3 220d 	strd	r2, r2, [r3, #52]	@ 0x34
 8016132:	2000      	movs	r0, #0
 8016134:	b003      	add	sp, #12
 8016136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801613a:	b120      	cbz	r0, 8016146 <rcl_wait_set_resize+0x1e6>
 801613c:	4649      	mov	r1, r9
 801613e:	47d8      	blx	fp
 8016140:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8016144:	6027      	str	r7, [r4, #0]
 8016146:	f8da 0008 	ldr.w	r0, [sl, #8]
 801614a:	2800      	cmp	r0, #0
 801614c:	f43f af4c 	beq.w	8015fe8 <rcl_wait_set_resize+0x88>
 8016150:	4649      	mov	r1, r9
 8016152:	47d8      	blx	fp
 8016154:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8016158:	2300      	movs	r3, #0
 801615a:	e9ca 3301 	strd	r3, r3, [sl, #4]
 801615e:	e743      	b.n	8015fe8 <rcl_wait_set_resize+0x88>
 8016160:	4642      	mov	r2, r8
 8016162:	ea4f 0885 	mov.w	r8, r5, lsl #2
 8016166:	4641      	mov	r1, r8
 8016168:	4798      	blx	r3
 801616a:	60a0      	str	r0, [r4, #8]
 801616c:	b350      	cbz	r0, 80161c4 <rcl_wait_set_resize+0x264>
 801616e:	4642      	mov	r2, r8
 8016170:	4639      	mov	r1, r7
 8016172:	f007 f98d 	bl	801d490 <memset>
 8016176:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 801617a:	60e5      	str	r5, [r4, #12]
 801617c:	2700      	movs	r7, #0
 801617e:	19ad      	adds	r5, r5, r6
 8016180:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 8016184:	f8da 0014 	ldr.w	r0, [sl, #20]
 8016188:	f8ca 7010 	str.w	r7, [sl, #16]
 801618c:	f43f af48 	beq.w	8016020 <rcl_wait_set_resize+0xc0>
 8016190:	00ad      	lsls	r5, r5, #2
 8016192:	4642      	mov	r2, r8
 8016194:	f8da 3050 	ldr.w	r3, [sl, #80]	@ 0x50
 8016198:	4629      	mov	r1, r5
 801619a:	4798      	blx	r3
 801619c:	4680      	mov	r8, r0
 801619e:	f8ca 0014 	str.w	r0, [sl, #20]
 80161a2:	2800      	cmp	r0, #0
 80161a4:	f000 8085 	beq.w	80162b2 <rcl_wait_set_resize+0x352>
 80161a8:	462a      	mov	r2, r5
 80161aa:	4639      	mov	r1, r7
 80161ac:	f007 f970 	bl	801d490 <memset>
 80161b0:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 80161b4:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 80161b8:	e73d      	b.n	8016036 <rcl_wait_set_resize+0xd6>
 80161ba:	6820      	ldr	r0, [r4, #0]
 80161bc:	4649      	mov	r1, r9
 80161be:	47d8      	blx	fp
 80161c0:	e9c4 7700 	strd	r7, r7, [r4]
 80161c4:	200a      	movs	r0, #10
 80161c6:	b003      	add	sp, #12
 80161c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80161cc:	4642      	mov	r2, r8
 80161ce:	ea4f 0886 	mov.w	r8, r6, lsl #2
 80161d2:	4641      	mov	r1, r8
 80161d4:	47b8      	blx	r7
 80161d6:	6120      	str	r0, [r4, #16]
 80161d8:	2800      	cmp	r0, #0
 80161da:	d0f3      	beq.n	80161c4 <rcl_wait_set_resize+0x264>
 80161dc:	4642      	mov	r2, r8
 80161de:	4629      	mov	r1, r5
 80161e0:	f007 f956 	bl	801d490 <memset>
 80161e4:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 80161e8:	6166      	str	r6, [r4, #20]
 80161ea:	e9da 9713 	ldrd	r9, r7, [sl, #76]	@ 0x4c
 80161ee:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 80161f2:	e734      	b.n	801605e <rcl_wait_set_resize+0xfe>
 80161f4:	009e      	lsls	r6, r3, #2
 80161f6:	4642      	mov	r2, r8
 80161f8:	4631      	mov	r1, r6
 80161fa:	47b8      	blx	r7
 80161fc:	61a0      	str	r0, [r4, #24]
 80161fe:	2800      	cmp	r0, #0
 8016200:	d0e0      	beq.n	80161c4 <rcl_wait_set_resize+0x264>
 8016202:	4632      	mov	r2, r6
 8016204:	4629      	mov	r1, r5
 8016206:	f007 f943 	bl	801d490 <memset>
 801620a:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 801620e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016210:	61e3      	str	r3, [r4, #28]
 8016212:	f8da 0020 	ldr.w	r0, [sl, #32]
 8016216:	f8ca 501c 	str.w	r5, [sl, #28]
 801621a:	4642      	mov	r2, r8
 801621c:	4631      	mov	r1, r6
 801621e:	47b8      	blx	r7
 8016220:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016222:	f8ca 0020 	str.w	r0, [sl, #32]
 8016226:	6a1f      	ldr	r7, [r3, #32]
 8016228:	2f00      	cmp	r7, #0
 801622a:	d053      	beq.n	80162d4 <rcl_wait_set_resize+0x374>
 801622c:	4632      	mov	r2, r6
 801622e:	4629      	mov	r1, r5
 8016230:	4638      	mov	r0, r7
 8016232:	f007 f92d 	bl	801d490 <memset>
 8016236:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 801623a:	e72a      	b.n	8016092 <rcl_wait_set_resize+0x132>
 801623c:	b128      	cbz	r0, 801624a <rcl_wait_set_resize+0x2ea>
 801623e:	4631      	mov	r1, r6
 8016240:	47b8      	blx	r7
 8016242:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8016244:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8016248:	6223      	str	r3, [r4, #32]
 801624a:	f8da 002c 	ldr.w	r0, [sl, #44]	@ 0x2c
 801624e:	2800      	cmp	r0, #0
 8016250:	f43f af52 	beq.w	80160f8 <rcl_wait_set_resize+0x198>
 8016254:	4631      	mov	r1, r6
 8016256:	47b8      	blx	r7
 8016258:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 801625c:	2300      	movs	r3, #0
 801625e:	e9ca 330a 	strd	r3, r3, [sl, #40]	@ 0x28
 8016262:	e749      	b.n	80160f8 <rcl_wait_set_resize+0x198>
 8016264:	ea4f 0983 	mov.w	r9, r3, lsl #2
 8016268:	4632      	mov	r2, r6
 801626a:	4649      	mov	r1, r9
 801626c:	47c0      	blx	r8
 801626e:	62a0      	str	r0, [r4, #40]	@ 0x28
 8016270:	2800      	cmp	r0, #0
 8016272:	d0a7      	beq.n	80161c4 <rcl_wait_set_resize+0x264>
 8016274:	464a      	mov	r2, r9
 8016276:	4629      	mov	r1, r5
 8016278:	f007 f90a 	bl	801d490 <memset>
 801627c:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8016280:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016282:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8016284:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 8016288:	f8ca 5034 	str.w	r5, [sl, #52]	@ 0x34
 801628c:	4632      	mov	r2, r6
 801628e:	4649      	mov	r1, r9
 8016290:	47c0      	blx	r8
 8016292:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016294:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 8016298:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801629a:	b34b      	cbz	r3, 80162f0 <rcl_wait_set_resize+0x390>
 801629c:	464a      	mov	r2, r9
 801629e:	4629      	mov	r1, r5
 80162a0:	4618      	mov	r0, r3
 80162a2:	f007 f8f5 	bl	801d490 <memset>
 80162a6:	e744      	b.n	8016132 <rcl_wait_set_resize+0x1d2>
 80162a8:	200b      	movs	r0, #11
 80162aa:	4770      	bx	lr
 80162ac:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80162b0:	e789      	b.n	80161c6 <rcl_wait_set_resize+0x266>
 80162b2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80162b4:	68a0      	ldr	r0, [r4, #8]
 80162b6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80162b8:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 80162ba:	4790      	blx	r2
 80162bc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80162be:	6920      	ldr	r0, [r4, #16]
 80162c0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80162c2:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 80162c4:	f8c4 800c 	str.w	r8, [r4, #12]
 80162c8:	f8c4 8008 	str.w	r8, [r4, #8]
 80162cc:	4790      	blx	r2
 80162ce:	e9c4 8804 	strd	r8, r8, [r4, #16]
 80162d2:	e777      	b.n	80161c4 <rcl_wait_set_resize+0x264>
 80162d4:	69a0      	ldr	r0, [r4, #24]
 80162d6:	4641      	mov	r1, r8
 80162d8:	47c8      	blx	r9
 80162da:	e9c4 7706 	strd	r7, r7, [r4, #24]
 80162de:	e771      	b.n	80161c4 <rcl_wait_set_resize+0x264>
 80162e0:	6a20      	ldr	r0, [r4, #32]
 80162e2:	9301      	str	r3, [sp, #4]
 80162e4:	4631      	mov	r1, r6
 80162e6:	47b8      	blx	r7
 80162e8:	9b01      	ldr	r3, [sp, #4]
 80162ea:	e9c4 3308 	strd	r3, r3, [r4, #32]
 80162ee:	e769      	b.n	80161c4 <rcl_wait_set_resize+0x264>
 80162f0:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80162f2:	9301      	str	r3, [sp, #4]
 80162f4:	4631      	mov	r1, r6
 80162f6:	47b8      	blx	r7
 80162f8:	9b01      	ldr	r3, [sp, #4]
 80162fa:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 80162fe:	e761      	b.n	80161c4 <rcl_wait_set_resize+0x264>

08016300 <rcl_wait_set_init>:
 8016300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016304:	b084      	sub	sp, #16
 8016306:	4604      	mov	r4, r0
 8016308:	a810      	add	r0, sp, #64	@ 0x40
 801630a:	460d      	mov	r5, r1
 801630c:	4690      	mov	r8, r2
 801630e:	461f      	mov	r7, r3
 8016310:	f7f6 ffa4 	bl	800d25c <rcutils_allocator_is_valid>
 8016314:	2800      	cmp	r0, #0
 8016316:	d06c      	beq.n	80163f2 <rcl_wait_set_init+0xf2>
 8016318:	2c00      	cmp	r4, #0
 801631a:	d06a      	beq.n	80163f2 <rcl_wait_set_init+0xf2>
 801631c:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 801631e:	b126      	cbz	r6, 801632a <rcl_wait_set_init+0x2a>
 8016320:	2564      	movs	r5, #100	@ 0x64
 8016322:	4628      	mov	r0, r5
 8016324:	b004      	add	sp, #16
 8016326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801632a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801632c:	2b00      	cmp	r3, #0
 801632e:	d060      	beq.n	80163f2 <rcl_wait_set_init+0xf2>
 8016330:	4618      	mov	r0, r3
 8016332:	f7fe fab7 	bl	80148a4 <rcl_context_is_valid>
 8016336:	2800      	cmp	r0, #0
 8016338:	d060      	beq.n	80163fc <rcl_wait_set_init+0xfc>
 801633a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801633c:	9914      	ldr	r1, [sp, #80]	@ 0x50
 801633e:	205c      	movs	r0, #92	@ 0x5c
 8016340:	4798      	blx	r3
 8016342:	6320      	str	r0, [r4, #48]	@ 0x30
 8016344:	2800      	cmp	r0, #0
 8016346:	d063      	beq.n	8016410 <rcl_wait_set_init+0x110>
 8016348:	4631      	mov	r1, r6
 801634a:	225c      	movs	r2, #92	@ 0x5c
 801634c:	f007 f8a0 	bl	801d490 <memset>
 8016350:	f8d4 9030 	ldr.w	r9, [r4, #48]	@ 0x30
 8016354:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016356:	f8c9 3044 	str.w	r3, [r9, #68]	@ 0x44
 801635a:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
 801635e:	eb03 0e02 	add.w	lr, r3, r2
 8016362:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016364:	449e      	add	lr, r3
 8016366:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016368:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 801636c:	f8d3 a000 	ldr.w	sl, [r3]
 8016370:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8016374:	e9c9 6601 	strd	r6, r6, [r9, #4]
 8016378:	e9c9 6604 	strd	r6, r6, [r9, #16]
 801637c:	e9c9 6607 	strd	r6, r6, [r9, #28]
 8016380:	e9c9 660a 	strd	r6, r6, [r9, #40]	@ 0x28
 8016384:	e9c9 660d 	strd	r6, r6, [r9, #52]	@ 0x34
 8016388:	f109 0648 	add.w	r6, r9, #72	@ 0x48
 801638c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801638e:	44c6      	add	lr, r8
 8016390:	f8dc 3000 	ldr.w	r3, [ip]
 8016394:	6033      	str	r3, [r6, #0]
 8016396:	eb0e 0145 	add.w	r1, lr, r5, lsl #1
 801639a:	f10a 0028 	add.w	r0, sl, #40	@ 0x28
 801639e:	f002 ffd5 	bl	801934c <rmw_create_wait_set>
 80163a2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80163a4:	f8c9 003c 	str.w	r0, [r9, #60]	@ 0x3c
 80163a8:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80163aa:	b348      	cbz	r0, 8016400 <rcl_wait_set_init+0x100>
 80163ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80163ae:	9302      	str	r3, [sp, #8]
 80163b0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80163b2:	9301      	str	r3, [sp, #4]
 80163b4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80163b6:	9300      	str	r3, [sp, #0]
 80163b8:	4629      	mov	r1, r5
 80163ba:	463b      	mov	r3, r7
 80163bc:	4642      	mov	r2, r8
 80163be:	4620      	mov	r0, r4
 80163c0:	f7ff fdce 	bl	8015f60 <rcl_wait_set_resize>
 80163c4:	4605      	mov	r5, r0
 80163c6:	2800      	cmp	r0, #0
 80163c8:	d0ab      	beq.n	8016322 <rcl_wait_set_init+0x22>
 80163ca:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80163cc:	bb13      	cbnz	r3, 8016414 <rcl_wait_set_init+0x114>
 80163ce:	2600      	movs	r6, #0
 80163d0:	e9cd 6601 	strd	r6, r6, [sp, #4]
 80163d4:	9600      	str	r6, [sp, #0]
 80163d6:	4633      	mov	r3, r6
 80163d8:	4632      	mov	r2, r6
 80163da:	4631      	mov	r1, r6
 80163dc:	4620      	mov	r0, r4
 80163de:	f7ff fdbf 	bl	8015f60 <rcl_wait_set_resize>
 80163e2:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80163e4:	2800      	cmp	r0, #0
 80163e6:	d09c      	beq.n	8016322 <rcl_wait_set_init+0x22>
 80163e8:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 80163ea:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 80163ec:	4798      	blx	r3
 80163ee:	6326      	str	r6, [r4, #48]	@ 0x30
 80163f0:	e797      	b.n	8016322 <rcl_wait_set_init+0x22>
 80163f2:	250b      	movs	r5, #11
 80163f4:	4628      	mov	r0, r5
 80163f6:	b004      	add	sp, #16
 80163f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80163fc:	2565      	movs	r5, #101	@ 0x65
 80163fe:	e790      	b.n	8016322 <rcl_wait_set_init+0x22>
 8016400:	2501      	movs	r5, #1
 8016402:	f002 ffad 	bl	8019360 <rmw_destroy_wait_set>
 8016406:	2800      	cmp	r0, #0
 8016408:	bf18      	it	ne
 801640a:	f44f 7561 	movne.w	r5, #900	@ 0x384
 801640e:	e7de      	b.n	80163ce <rcl_wait_set_init+0xce>
 8016410:	250a      	movs	r5, #10
 8016412:	e786      	b.n	8016322 <rcl_wait_set_init+0x22>
 8016414:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8016416:	e7f4      	b.n	8016402 <rcl_wait_set_init+0x102>

08016418 <rcl_wait_set_add_guard_condition>:
 8016418:	b318      	cbz	r0, 8016462 <rcl_wait_set_add_guard_condition+0x4a>
 801641a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801641c:	b570      	push	{r4, r5, r6, lr}
 801641e:	4604      	mov	r4, r0
 8016420:	b30b      	cbz	r3, 8016466 <rcl_wait_set_add_guard_condition+0x4e>
 8016422:	b319      	cbz	r1, 801646c <rcl_wait_set_add_guard_condition+0x54>
 8016424:	68dd      	ldr	r5, [r3, #12]
 8016426:	68c0      	ldr	r0, [r0, #12]
 8016428:	4285      	cmp	r5, r0
 801642a:	d217      	bcs.n	801645c <rcl_wait_set_add_guard_condition+0x44>
 801642c:	68a0      	ldr	r0, [r4, #8]
 801642e:	1c6e      	adds	r6, r5, #1
 8016430:	60de      	str	r6, [r3, #12]
 8016432:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8016436:	b102      	cbz	r2, 801643a <rcl_wait_set_add_guard_condition+0x22>
 8016438:	6015      	str	r5, [r2, #0]
 801643a:	4608      	mov	r0, r1
 801643c:	f005 fc44 	bl	801bcc8 <rcl_guard_condition_get_rmw_handle>
 8016440:	b150      	cbz	r0, 8016458 <rcl_wait_set_add_guard_condition+0x40>
 8016442:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016444:	6842      	ldr	r2, [r0, #4]
 8016446:	695b      	ldr	r3, [r3, #20]
 8016448:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801644c:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801644e:	6913      	ldr	r3, [r2, #16]
 8016450:	3301      	adds	r3, #1
 8016452:	2000      	movs	r0, #0
 8016454:	6113      	str	r3, [r2, #16]
 8016456:	bd70      	pop	{r4, r5, r6, pc}
 8016458:	2001      	movs	r0, #1
 801645a:	bd70      	pop	{r4, r5, r6, pc}
 801645c:	f240 3086 	movw	r0, #902	@ 0x386
 8016460:	bd70      	pop	{r4, r5, r6, pc}
 8016462:	200b      	movs	r0, #11
 8016464:	4770      	bx	lr
 8016466:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801646a:	bd70      	pop	{r4, r5, r6, pc}
 801646c:	200b      	movs	r0, #11
 801646e:	bd70      	pop	{r4, r5, r6, pc}

08016470 <rcl_wait_set_add_timer>:
 8016470:	b328      	cbz	r0, 80164be <rcl_wait_set_add_timer+0x4e>
 8016472:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8016474:	b570      	push	{r4, r5, r6, lr}
 8016476:	4604      	mov	r4, r0
 8016478:	b31b      	cbz	r3, 80164c2 <rcl_wait_set_add_timer+0x52>
 801647a:	b329      	cbz	r1, 80164c8 <rcl_wait_set_add_timer+0x58>
 801647c:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 801647e:	6965      	ldr	r5, [r4, #20]
 8016480:	42a8      	cmp	r0, r5
 8016482:	d219      	bcs.n	80164b8 <rcl_wait_set_add_timer+0x48>
 8016484:	6925      	ldr	r5, [r4, #16]
 8016486:	1c46      	adds	r6, r0, #1
 8016488:	641e      	str	r6, [r3, #64]	@ 0x40
 801648a:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 801648e:	b102      	cbz	r2, 8016492 <rcl_wait_set_add_timer+0x22>
 8016490:	6010      	str	r0, [r2, #0]
 8016492:	4608      	mov	r0, r1
 8016494:	f7ff fbf4 	bl	8015c80 <rcl_timer_get_guard_condition>
 8016498:	b160      	cbz	r0, 80164b4 <rcl_wait_set_add_timer+0x44>
 801649a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801649c:	68e3      	ldr	r3, [r4, #12]
 801649e:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 80164a0:	3b01      	subs	r3, #1
 80164a2:	441d      	add	r5, r3
 80164a4:	f005 fc10 	bl	801bcc8 <rcl_guard_condition_get_rmw_handle>
 80164a8:	b180      	cbz	r0, 80164cc <rcl_wait_set_add_timer+0x5c>
 80164aa:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80164ac:	6842      	ldr	r2, [r0, #4]
 80164ae:	695b      	ldr	r3, [r3, #20]
 80164b0:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80164b4:	2000      	movs	r0, #0
 80164b6:	bd70      	pop	{r4, r5, r6, pc}
 80164b8:	f240 3086 	movw	r0, #902	@ 0x386
 80164bc:	bd70      	pop	{r4, r5, r6, pc}
 80164be:	200b      	movs	r0, #11
 80164c0:	4770      	bx	lr
 80164c2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80164c6:	bd70      	pop	{r4, r5, r6, pc}
 80164c8:	200b      	movs	r0, #11
 80164ca:	bd70      	pop	{r4, r5, r6, pc}
 80164cc:	2001      	movs	r0, #1
 80164ce:	bd70      	pop	{r4, r5, r6, pc}

080164d0 <rcl_wait_set_add_client>:
 80164d0:	b318      	cbz	r0, 801651a <rcl_wait_set_add_client+0x4a>
 80164d2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80164d4:	b570      	push	{r4, r5, r6, lr}
 80164d6:	4604      	mov	r4, r0
 80164d8:	b30b      	cbz	r3, 801651e <rcl_wait_set_add_client+0x4e>
 80164da:	b319      	cbz	r1, 8016524 <rcl_wait_set_add_client+0x54>
 80164dc:	699d      	ldr	r5, [r3, #24]
 80164de:	69c0      	ldr	r0, [r0, #28]
 80164e0:	4285      	cmp	r5, r0
 80164e2:	d217      	bcs.n	8016514 <rcl_wait_set_add_client+0x44>
 80164e4:	69a0      	ldr	r0, [r4, #24]
 80164e6:	1c6e      	adds	r6, r5, #1
 80164e8:	619e      	str	r6, [r3, #24]
 80164ea:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80164ee:	b102      	cbz	r2, 80164f2 <rcl_wait_set_add_client+0x22>
 80164f0:	6015      	str	r5, [r2, #0]
 80164f2:	4608      	mov	r0, r1
 80164f4:	f7fe f8e8 	bl	80146c8 <rcl_client_get_rmw_handle>
 80164f8:	b150      	cbz	r0, 8016510 <rcl_wait_set_add_client+0x40>
 80164fa:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80164fc:	6842      	ldr	r2, [r0, #4]
 80164fe:	6a1b      	ldr	r3, [r3, #32]
 8016500:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8016504:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8016506:	69d3      	ldr	r3, [r2, #28]
 8016508:	3301      	adds	r3, #1
 801650a:	2000      	movs	r0, #0
 801650c:	61d3      	str	r3, [r2, #28]
 801650e:	bd70      	pop	{r4, r5, r6, pc}
 8016510:	2001      	movs	r0, #1
 8016512:	bd70      	pop	{r4, r5, r6, pc}
 8016514:	f240 3086 	movw	r0, #902	@ 0x386
 8016518:	bd70      	pop	{r4, r5, r6, pc}
 801651a:	200b      	movs	r0, #11
 801651c:	4770      	bx	lr
 801651e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8016522:	bd70      	pop	{r4, r5, r6, pc}
 8016524:	200b      	movs	r0, #11
 8016526:	bd70      	pop	{r4, r5, r6, pc}

08016528 <rcl_wait_set_add_service>:
 8016528:	b318      	cbz	r0, 8016572 <rcl_wait_set_add_service+0x4a>
 801652a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801652c:	b570      	push	{r4, r5, r6, lr}
 801652e:	4604      	mov	r4, r0
 8016530:	b30b      	cbz	r3, 8016576 <rcl_wait_set_add_service+0x4e>
 8016532:	b319      	cbz	r1, 801657c <rcl_wait_set_add_service+0x54>
 8016534:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8016536:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8016538:	4285      	cmp	r5, r0
 801653a:	d217      	bcs.n	801656c <rcl_wait_set_add_service+0x44>
 801653c:	6a20      	ldr	r0, [r4, #32]
 801653e:	1c6e      	adds	r6, r5, #1
 8016540:	625e      	str	r6, [r3, #36]	@ 0x24
 8016542:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8016546:	b102      	cbz	r2, 801654a <rcl_wait_set_add_service+0x22>
 8016548:	6015      	str	r5, [r2, #0]
 801654a:	4608      	mov	r0, r1
 801654c:	f7fe ff98 	bl	8015480 <rcl_service_get_rmw_handle>
 8016550:	b150      	cbz	r0, 8016568 <rcl_wait_set_add_service+0x40>
 8016552:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016554:	6842      	ldr	r2, [r0, #4]
 8016556:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016558:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801655c:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801655e:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8016560:	3301      	adds	r3, #1
 8016562:	2000      	movs	r0, #0
 8016564:	6293      	str	r3, [r2, #40]	@ 0x28
 8016566:	bd70      	pop	{r4, r5, r6, pc}
 8016568:	2001      	movs	r0, #1
 801656a:	bd70      	pop	{r4, r5, r6, pc}
 801656c:	f240 3086 	movw	r0, #902	@ 0x386
 8016570:	bd70      	pop	{r4, r5, r6, pc}
 8016572:	200b      	movs	r0, #11
 8016574:	4770      	bx	lr
 8016576:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801657a:	bd70      	pop	{r4, r5, r6, pc}
 801657c:	200b      	movs	r0, #11
 801657e:	bd70      	pop	{r4, r5, r6, pc}

08016580 <rcl_wait>:
 8016580:	2800      	cmp	r0, #0
 8016582:	f000 81d4 	beq.w	801692e <rcl_wait+0x3ae>
 8016586:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801658a:	ed2d 8b02 	vpush	{d8}
 801658e:	6b05      	ldr	r5, [r0, #48]	@ 0x30
 8016590:	b099      	sub	sp, #100	@ 0x64
 8016592:	4604      	mov	r4, r0
 8016594:	2d00      	cmp	r5, #0
 8016596:	f000 8178 	beq.w	801688a <rcl_wait+0x30a>
 801659a:	461f      	mov	r7, r3
 801659c:	6843      	ldr	r3, [r0, #4]
 801659e:	4690      	mov	r8, r2
 80165a0:	2b00      	cmp	r3, #0
 80165a2:	f000 809b 	beq.w	80166dc <rcl_wait+0x15c>
 80165a6:	6c2e      	ldr	r6, [r5, #64]	@ 0x40
 80165a8:	2e00      	cmp	r6, #0
 80165aa:	f000 80b2 	beq.w	8016712 <rcl_wait+0x192>
 80165ae:	2100      	movs	r1, #0
 80165b0:	468c      	mov	ip, r1
 80165b2:	460a      	mov	r2, r1
 80165b4:	46a6      	mov	lr, r4
 80165b6:	f8de 3010 	ldr.w	r3, [lr, #16]
 80165ba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80165be:	b173      	cbz	r3, 80165de <rcl_wait+0x5e>
 80165c0:	f8de 300c 	ldr.w	r3, [lr, #12]
 80165c4:	6968      	ldr	r0, [r5, #20]
 80165c6:	440b      	add	r3, r1
 80165c8:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
 80165cc:	b13c      	cbz	r4, 80165de <rcl_wait+0x5e>
 80165ce:	692b      	ldr	r3, [r5, #16]
 80165d0:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
 80165d4:	3301      	adds	r3, #1
 80165d6:	612b      	str	r3, [r5, #16]
 80165d8:	f8de 5030 	ldr.w	r5, [lr, #48]	@ 0x30
 80165dc:	6c2e      	ldr	r6, [r5, #64]	@ 0x40
 80165de:	3101      	adds	r1, #1
 80165e0:	f14c 0c00 	adc.w	ip, ip, #0
 80165e4:	42b1      	cmp	r1, r6
 80165e6:	f17c 0300 	sbcs.w	r3, ip, #0
 80165ea:	d3e4      	bcc.n	80165b6 <rcl_wait+0x36>
 80165ec:	ed9f 8baa 	vldr	d8, [pc, #680]	@ 8016898 <rcl_wait+0x318>
 80165f0:	ea58 0307 	orrs.w	r3, r8, r7
 80165f4:	e9cd 220c 	strd	r2, r2, [sp, #48]	@ 0x30
 80165f8:	e9cd 220e 	strd	r2, r2, [sp, #56]	@ 0x38
 80165fc:	ed8d 8b12 	vstr	d8, [sp, #72]	@ 0x48
 8016600:	ed8d 8b14 	vstr	d8, [sp, #80]	@ 0x50
 8016604:	ed8d 8b16 	vstr	d8, [sp, #88]	@ 0x58
 8016608:	4674      	mov	r4, lr
 801660a:	f10d 0a30 	add.w	sl, sp, #48	@ 0x30
 801660e:	f000 8094 	beq.w	801673a <rcl_wait+0x1ba>
 8016612:	2e00      	cmp	r6, #0
 8016614:	f000 8145 	beq.w	80168a2 <rcl_wait+0x322>
 8016618:	2500      	movs	r5, #0
 801661a:	46bb      	mov	fp, r7
 801661c:	e02c      	b.n	8016678 <rcl_wait+0xf8>
 801661e:	6923      	ldr	r3, [r4, #16]
 8016620:	f853 0009 	ldr.w	r0, [r3, r9]
 8016624:	a908      	add	r1, sp, #32
 8016626:	ed8d 8b08 	vstr	d8, [sp, #32]
 801662a:	f7ff fb07 	bl	8015c3c <rcl_timer_get_next_call_time>
 801662e:	f240 3321 	movw	r3, #801	@ 0x321
 8016632:	4298      	cmp	r0, r3
 8016634:	f000 80bb 	beq.w	80167ae <rcl_wait+0x22e>
 8016638:	2800      	cmp	r0, #0
 801663a:	d165      	bne.n	8016708 <rcl_wait+0x188>
 801663c:	e9dd 6707 	ldrd	r6, r7, [sp, #28]
 8016640:	7830      	ldrb	r0, [r6, #0]
 8016642:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8016644:	ab18      	add	r3, sp, #96	@ 0x60
 8016646:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 801664a:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 801664e:	9205      	str	r2, [sp, #20]
 8016650:	f853 2c20 	ldr.w	r2, [r3, #-32]
 8016654:	4297      	cmp	r7, r2
 8016656:	9a05      	ldr	r2, [sp, #20]
 8016658:	eb71 0202 	sbcs.w	r2, r1, r2
 801665c:	da06      	bge.n	801666c <rcl_wait+0xec>
 801665e:	e943 7108 	strd	r7, r1, [r3, #-32]
 8016662:	ab18      	add	r3, sp, #96	@ 0x60
 8016664:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8016668:	f840 6c30 	str.w	r6, [r0, #-48]
 801666c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801666e:	6c1e      	ldr	r6, [r3, #64]	@ 0x40
 8016670:	3501      	adds	r5, #1
 8016672:	42b5      	cmp	r5, r6
 8016674:	f080 8114 	bcs.w	80168a0 <rcl_wait+0x320>
 8016678:	6923      	ldr	r3, [r4, #16]
 801667a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801667e:	ea4f 0985 	mov.w	r9, r5, lsl #2
 8016682:	2800      	cmp	r0, #0
 8016684:	d0f4      	beq.n	8016670 <rcl_wait+0xf0>
 8016686:	a907      	add	r1, sp, #28
 8016688:	f7ff fa04 	bl	8015a94 <rcl_timer_clock>
 801668c:	4603      	mov	r3, r0
 801668e:	2800      	cmp	r0, #0
 8016690:	f040 8141 	bne.w	8016916 <rcl_wait+0x396>
 8016694:	9807      	ldr	r0, [sp, #28]
 8016696:	7802      	ldrb	r2, [r0, #0]
 8016698:	2a01      	cmp	r2, #1
 801669a:	d1c0      	bne.n	801661e <rcl_wait+0x9e>
 801669c:	f10d 011b 	add.w	r1, sp, #27
 80166a0:	f88d 301b 	strb.w	r3, [sp, #27]
 80166a4:	f7ff f9e6 	bl	8015a74 <rcl_is_enabled_ros_time_override>
 80166a8:	4602      	mov	r2, r0
 80166aa:	2800      	cmp	r0, #0
 80166ac:	f040 8133 	bne.w	8016916 <rcl_wait+0x396>
 80166b0:	6923      	ldr	r3, [r4, #16]
 80166b2:	f89d 101b 	ldrb.w	r1, [sp, #27]
 80166b6:	f853 0009 	ldr.w	r0, [r3, r9]
 80166ba:	2900      	cmp	r1, #0
 80166bc:	d0b0      	beq.n	8016620 <rcl_wait+0xa0>
 80166be:	ae08      	add	r6, sp, #32
 80166c0:	4631      	mov	r1, r6
 80166c2:	f88d 2020 	strb.w	r2, [sp, #32]
 80166c6:	f7ff fa7f 	bl	8015bc8 <rcl_timer_is_ready>
 80166ca:	2800      	cmp	r0, #0
 80166cc:	f040 8123 	bne.w	8016916 <rcl_wait+0x396>
 80166d0:	f89d 3020 	ldrb.w	r3, [sp, #32]
 80166d4:	2b00      	cmp	r3, #0
 80166d6:	d0c9      	beq.n	801666c <rcl_wait+0xec>
 80166d8:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80166da:	e02f      	b.n	801673c <rcl_wait+0x1bc>
 80166dc:	68c3      	ldr	r3, [r0, #12]
 80166de:	2b00      	cmp	r3, #0
 80166e0:	f47f af61 	bne.w	80165a6 <rcl_wait+0x26>
 80166e4:	6943      	ldr	r3, [r0, #20]
 80166e6:	2b00      	cmp	r3, #0
 80166e8:	f47f af5d 	bne.w	80165a6 <rcl_wait+0x26>
 80166ec:	69c3      	ldr	r3, [r0, #28]
 80166ee:	2b00      	cmp	r3, #0
 80166f0:	f47f af59 	bne.w	80165a6 <rcl_wait+0x26>
 80166f4:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80166f6:	2b00      	cmp	r3, #0
 80166f8:	f47f af55 	bne.w	80165a6 <rcl_wait+0x26>
 80166fc:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80166fe:	2b00      	cmp	r3, #0
 8016700:	f47f af51 	bne.w	80165a6 <rcl_wait+0x26>
 8016704:	f240 3085 	movw	r0, #901	@ 0x385
 8016708:	b019      	add	sp, #100	@ 0x64
 801670a:	ecbd 8b02 	vpop	{d8}
 801670e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016712:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8016716:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801671a:	e9cd 2312 	strd	r2, r3, [sp, #72]	@ 0x48
 801671e:	e9cd 2314 	strd	r2, r3, [sp, #80]	@ 0x50
 8016722:	e9cd 2316 	strd	r2, r3, [sp, #88]	@ 0x58
 8016726:	ea58 0307 	orrs.w	r3, r8, r7
 801672a:	e9cd 660c 	strd	r6, r6, [sp, #48]	@ 0x30
 801672e:	e9cd 660e 	strd	r6, r6, [sp, #56]	@ 0x38
 8016732:	f10d 0a30 	add.w	sl, sp, #48	@ 0x30
 8016736:	f040 80b4 	bne.w	80168a2 <rcl_wait+0x322>
 801673a:	ae08      	add	r6, sp, #32
 801673c:	2200      	movs	r2, #0
 801673e:	2300      	movs	r3, #0
 8016740:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8016744:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8016748:	9602      	str	r6, [sp, #8]
 801674a:	6bea      	ldr	r2, [r5, #60]	@ 0x3c
 801674c:	f105 0334 	add.w	r3, r5, #52	@ 0x34
 8016750:	e9cd 3200 	strd	r3, r2, [sp]
 8016754:	f105 0110 	add.w	r1, r5, #16
 8016758:	f105 031c 	add.w	r3, r5, #28
 801675c:	f105 0228 	add.w	r2, r5, #40	@ 0x28
 8016760:	1d28      	adds	r0, r5, #4
 8016762:	f002 fc71 	bl	8019048 <rmw_wait>
 8016766:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016768:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801676a:	4680      	mov	r8, r0
 801676c:	b332      	cbz	r2, 80167bc <rcl_wait+0x23c>
 801676e:	2500      	movs	r5, #0
 8016770:	462f      	mov	r7, r5
 8016772:	462e      	mov	r6, r5
 8016774:	e007      	b.n	8016786 <rcl_wait+0x206>
 8016776:	6922      	ldr	r2, [r4, #16]
 8016778:	f842 3009 	str.w	r3, [r2, r9]
 801677c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801677e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8016780:	3501      	adds	r5, #1
 8016782:	4295      	cmp	r5, r2
 8016784:	d21b      	bcs.n	80167be <rcl_wait+0x23e>
 8016786:	6920      	ldr	r0, [r4, #16]
 8016788:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 801678c:	a907      	add	r1, sp, #28
 801678e:	ea4f 0985 	mov.w	r9, r5, lsl #2
 8016792:	2800      	cmp	r0, #0
 8016794:	d0f4      	beq.n	8016780 <rcl_wait+0x200>
 8016796:	f88d 601c 	strb.w	r6, [sp, #28]
 801679a:	f7ff fa15 	bl	8015bc8 <rcl_timer_is_ready>
 801679e:	2800      	cmp	r0, #0
 80167a0:	d1b2      	bne.n	8016708 <rcl_wait+0x188>
 80167a2:	f89d 301c 	ldrb.w	r3, [sp, #28]
 80167a6:	2b00      	cmp	r3, #0
 80167a8:	d0e5      	beq.n	8016776 <rcl_wait+0x1f6>
 80167aa:	461f      	mov	r7, r3
 80167ac:	e7e6      	b.n	801677c <rcl_wait+0x1fc>
 80167ae:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80167b0:	6923      	ldr	r3, [r4, #16]
 80167b2:	6c16      	ldr	r6, [r2, #64]	@ 0x40
 80167b4:	2200      	movs	r2, #0
 80167b6:	f843 2009 	str.w	r2, [r3, r9]
 80167ba:	e759      	b.n	8016670 <rcl_wait+0xf0>
 80167bc:	4617      	mov	r7, r2
 80167be:	f038 0002 	bics.w	r0, r8, #2
 80167c2:	f040 80a8 	bne.w	8016916 <rcl_wait+0x396>
 80167c6:	6866      	ldr	r6, [r4, #4]
 80167c8:	4602      	mov	r2, r0
 80167ca:	b91e      	cbnz	r6, 80167d4 <rcl_wait+0x254>
 80167cc:	e00d      	b.n	80167ea <rcl_wait+0x26a>
 80167ce:	3201      	adds	r2, #1
 80167d0:	4296      	cmp	r6, r2
 80167d2:	d00a      	beq.n	80167ea <rcl_wait+0x26a>
 80167d4:	6899      	ldr	r1, [r3, #8]
 80167d6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80167da:	2900      	cmp	r1, #0
 80167dc:	d1f7      	bne.n	80167ce <rcl_wait+0x24e>
 80167de:	6825      	ldr	r5, [r4, #0]
 80167e0:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 80167e4:	3201      	adds	r2, #1
 80167e6:	4296      	cmp	r6, r2
 80167e8:	d1f4      	bne.n	80167d4 <rcl_wait+0x254>
 80167ea:	68e6      	ldr	r6, [r4, #12]
 80167ec:	2200      	movs	r2, #0
 80167ee:	b91e      	cbnz	r6, 80167f8 <rcl_wait+0x278>
 80167f0:	e00d      	b.n	801680e <rcl_wait+0x28e>
 80167f2:	3201      	adds	r2, #1
 80167f4:	42b2      	cmp	r2, r6
 80167f6:	d00a      	beq.n	801680e <rcl_wait+0x28e>
 80167f8:	6959      	ldr	r1, [r3, #20]
 80167fa:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80167fe:	2900      	cmp	r1, #0
 8016800:	d1f7      	bne.n	80167f2 <rcl_wait+0x272>
 8016802:	68a5      	ldr	r5, [r4, #8]
 8016804:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8016808:	3201      	adds	r2, #1
 801680a:	42b2      	cmp	r2, r6
 801680c:	d1f4      	bne.n	80167f8 <rcl_wait+0x278>
 801680e:	69e6      	ldr	r6, [r4, #28]
 8016810:	2200      	movs	r2, #0
 8016812:	b91e      	cbnz	r6, 801681c <rcl_wait+0x29c>
 8016814:	e00d      	b.n	8016832 <rcl_wait+0x2b2>
 8016816:	3201      	adds	r2, #1
 8016818:	4296      	cmp	r6, r2
 801681a:	d00a      	beq.n	8016832 <rcl_wait+0x2b2>
 801681c:	6a19      	ldr	r1, [r3, #32]
 801681e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8016822:	2900      	cmp	r1, #0
 8016824:	d1f7      	bne.n	8016816 <rcl_wait+0x296>
 8016826:	69a5      	ldr	r5, [r4, #24]
 8016828:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 801682c:	3201      	adds	r2, #1
 801682e:	4296      	cmp	r6, r2
 8016830:	d1f4      	bne.n	801681c <rcl_wait+0x29c>
 8016832:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 8016834:	2200      	movs	r2, #0
 8016836:	b91e      	cbnz	r6, 8016840 <rcl_wait+0x2c0>
 8016838:	e00d      	b.n	8016856 <rcl_wait+0x2d6>
 801683a:	3201      	adds	r2, #1
 801683c:	42b2      	cmp	r2, r6
 801683e:	d00a      	beq.n	8016856 <rcl_wait+0x2d6>
 8016840:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8016842:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8016846:	2900      	cmp	r1, #0
 8016848:	d1f7      	bne.n	801683a <rcl_wait+0x2ba>
 801684a:	6a25      	ldr	r5, [r4, #32]
 801684c:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8016850:	3201      	adds	r2, #1
 8016852:	42b2      	cmp	r2, r6
 8016854:	d1f4      	bne.n	8016840 <rcl_wait+0x2c0>
 8016856:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8016858:	2200      	movs	r2, #0
 801685a:	b91e      	cbnz	r6, 8016864 <rcl_wait+0x2e4>
 801685c:	e00d      	b.n	801687a <rcl_wait+0x2fa>
 801685e:	3201      	adds	r2, #1
 8016860:	42b2      	cmp	r2, r6
 8016862:	d00a      	beq.n	801687a <rcl_wait+0x2fa>
 8016864:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8016866:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801686a:	2900      	cmp	r1, #0
 801686c:	d1f7      	bne.n	801685e <rcl_wait+0x2de>
 801686e:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 8016870:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8016874:	3201      	adds	r2, #1
 8016876:	42b2      	cmp	r2, r6
 8016878:	d1f4      	bne.n	8016864 <rcl_wait+0x2e4>
 801687a:	f1b8 0f02 	cmp.w	r8, #2
 801687e:	f47f af43 	bne.w	8016708 <rcl_wait+0x188>
 8016882:	f087 0701 	eor.w	r7, r7, #1
 8016886:	0078      	lsls	r0, r7, #1
 8016888:	e73e      	b.n	8016708 <rcl_wait+0x188>
 801688a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801688e:	b019      	add	sp, #100	@ 0x64
 8016890:	ecbd 8b02 	vpop	{d8}
 8016894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016898:	ffffffff 	.word	0xffffffff
 801689c:	7fffffff 	.word	0x7fffffff
 80168a0:	465f      	mov	r7, fp
 80168a2:	f1b8 0f01 	cmp.w	r8, #1
 80168a6:	f177 0300 	sbcs.w	r3, r7, #0
 80168aa:	db3a      	blt.n	8016922 <rcl_wait+0x3a2>
 80168ac:	2601      	movs	r6, #1
 80168ae:	ad10      	add	r5, sp, #64	@ 0x40
 80168b0:	f10d 0958 	add.w	r9, sp, #88	@ 0x58
 80168b4:	f85a 0f04 	ldr.w	r0, [sl, #4]!
 80168b8:	a908      	add	r1, sp, #32
 80168ba:	b1a0      	cbz	r0, 80168e6 <rcl_wait+0x366>
 80168bc:	f7ff f8ce 	bl	8015a5c <rcl_clock_get_now>
 80168c0:	2800      	cmp	r0, #0
 80168c2:	f47f af21 	bne.w	8016708 <rcl_wait+0x188>
 80168c6:	9a08      	ldr	r2, [sp, #32]
 80168c8:	68ab      	ldr	r3, [r5, #8]
 80168ca:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80168cc:	1a9b      	subs	r3, r3, r2
 80168ce:	68ea      	ldr	r2, [r5, #12]
 80168d0:	eb62 0201 	sbc.w	r2, r2, r1
 80168d4:	4598      	cmp	r8, r3
 80168d6:	eb77 0102 	sbcs.w	r1, r7, r2
 80168da:	bfba      	itte	lt
 80168dc:	4643      	movlt	r3, r8
 80168de:	463a      	movlt	r2, r7
 80168e0:	2601      	movge	r6, #1
 80168e2:	4698      	mov	r8, r3
 80168e4:	4617      	mov	r7, r2
 80168e6:	3508      	adds	r5, #8
 80168e8:	45a9      	cmp	r9, r5
 80168ea:	d1e3      	bne.n	80168b4 <rcl_wait+0x334>
 80168ec:	2f00      	cmp	r7, #0
 80168ee:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80168f0:	bfab      	itete	ge
 80168f2:	4640      	movge	r0, r8
 80168f4:	2000      	movlt	r0, #0
 80168f6:	4639      	movge	r1, r7
 80168f8:	2100      	movlt	r1, #0
 80168fa:	2e00      	cmp	r6, #0
 80168fc:	f43f af24 	beq.w	8016748 <rcl_wait+0x1c8>
 8016900:	a30d      	add	r3, pc, #52	@ (adr r3, 8016938 <rcl_wait+0x3b8>)
 8016902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016906:	f7ea f989 	bl	8000c1c <__aeabi_ldivmod>
 801690a:	ae08      	add	r6, sp, #32
 801690c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8016910:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8016914:	e718      	b.n	8016748 <rcl_wait+0x1c8>
 8016916:	2001      	movs	r0, #1
 8016918:	b019      	add	sp, #100	@ 0x64
 801691a:	ecbd 8b02 	vpop	{d8}
 801691e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016922:	2600      	movs	r6, #0
 8016924:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8016928:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 801692c:	e7bf      	b.n	80168ae <rcl_wait+0x32e>
 801692e:	200b      	movs	r0, #11
 8016930:	4770      	bx	lr
 8016932:	bf00      	nop
 8016934:	f3af 8000 	nop.w
 8016938:	3b9aca00 	.word	0x3b9aca00
 801693c:	00000000 	.word	0x00000000

08016940 <rcl_action_take_goal_response>:
 8016940:	b3b0      	cbz	r0, 80169b0 <rcl_action_take_goal_response+0x70>
 8016942:	b570      	push	{r4, r5, r6, lr}
 8016944:	4604      	mov	r4, r0
 8016946:	6800      	ldr	r0, [r0, #0]
 8016948:	b368      	cbz	r0, 80169a6 <rcl_action_take_goal_response+0x66>
 801694a:	460d      	mov	r5, r1
 801694c:	4616      	mov	r6, r2
 801694e:	f7fd ff7f 	bl	8014850 <rcl_client_is_valid>
 8016952:	b330      	cbz	r0, 80169a2 <rcl_action_take_goal_response+0x62>
 8016954:	6820      	ldr	r0, [r4, #0]
 8016956:	3004      	adds	r0, #4
 8016958:	f7fd ff7a 	bl	8014850 <rcl_client_is_valid>
 801695c:	b308      	cbz	r0, 80169a2 <rcl_action_take_goal_response+0x62>
 801695e:	6820      	ldr	r0, [r4, #0]
 8016960:	3008      	adds	r0, #8
 8016962:	f7fd ff75 	bl	8014850 <rcl_client_is_valid>
 8016966:	b1e0      	cbz	r0, 80169a2 <rcl_action_take_goal_response+0x62>
 8016968:	6820      	ldr	r0, [r4, #0]
 801696a:	300c      	adds	r0, #12
 801696c:	f7fe ffda 	bl	8015924 <rcl_subscription_is_valid>
 8016970:	b1b8      	cbz	r0, 80169a2 <rcl_action_take_goal_response+0x62>
 8016972:	6820      	ldr	r0, [r4, #0]
 8016974:	3010      	adds	r0, #16
 8016976:	f7fe ffd5 	bl	8015924 <rcl_subscription_is_valid>
 801697a:	b190      	cbz	r0, 80169a2 <rcl_action_take_goal_response+0x62>
 801697c:	b1b5      	cbz	r5, 80169ac <rcl_action_take_goal_response+0x6c>
 801697e:	b1ae      	cbz	r6, 80169ac <rcl_action_take_goal_response+0x6c>
 8016980:	6820      	ldr	r0, [r4, #0]
 8016982:	4632      	mov	r2, r6
 8016984:	4629      	mov	r1, r5
 8016986:	f7fd fef7 	bl	8014778 <rcl_take_response>
 801698a:	b148      	cbz	r0, 80169a0 <rcl_action_take_goal_response+0x60>
 801698c:	280a      	cmp	r0, #10
 801698e:	d007      	beq.n	80169a0 <rcl_action_take_goal_response+0x60>
 8016990:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8016994:	f640 0337 	movw	r3, #2103	@ 0x837
 8016998:	4290      	cmp	r0, r2
 801699a:	bf0c      	ite	eq
 801699c:	4618      	moveq	r0, r3
 801699e:	2001      	movne	r0, #1
 80169a0:	bd70      	pop	{r4, r5, r6, pc}
 80169a2:	f7f6 fc81 	bl	800d2a8 <rcutils_reset_error>
 80169a6:	f640 0036 	movw	r0, #2102	@ 0x836
 80169aa:	bd70      	pop	{r4, r5, r6, pc}
 80169ac:	200b      	movs	r0, #11
 80169ae:	bd70      	pop	{r4, r5, r6, pc}
 80169b0:	f640 0036 	movw	r0, #2102	@ 0x836
 80169b4:	4770      	bx	lr
 80169b6:	bf00      	nop

080169b8 <rcl_action_send_result_request>:
 80169b8:	b378      	cbz	r0, 8016a1a <rcl_action_send_result_request+0x62>
 80169ba:	b570      	push	{r4, r5, r6, lr}
 80169bc:	4604      	mov	r4, r0
 80169be:	6800      	ldr	r0, [r0, #0]
 80169c0:	b330      	cbz	r0, 8016a10 <rcl_action_send_result_request+0x58>
 80169c2:	460d      	mov	r5, r1
 80169c4:	4616      	mov	r6, r2
 80169c6:	f7fd ff43 	bl	8014850 <rcl_client_is_valid>
 80169ca:	b1f8      	cbz	r0, 8016a0c <rcl_action_send_result_request+0x54>
 80169cc:	6820      	ldr	r0, [r4, #0]
 80169ce:	3004      	adds	r0, #4
 80169d0:	f7fd ff3e 	bl	8014850 <rcl_client_is_valid>
 80169d4:	b1d0      	cbz	r0, 8016a0c <rcl_action_send_result_request+0x54>
 80169d6:	6820      	ldr	r0, [r4, #0]
 80169d8:	3008      	adds	r0, #8
 80169da:	f7fd ff39 	bl	8014850 <rcl_client_is_valid>
 80169de:	b1a8      	cbz	r0, 8016a0c <rcl_action_send_result_request+0x54>
 80169e0:	6820      	ldr	r0, [r4, #0]
 80169e2:	300c      	adds	r0, #12
 80169e4:	f7fe ff9e 	bl	8015924 <rcl_subscription_is_valid>
 80169e8:	b180      	cbz	r0, 8016a0c <rcl_action_send_result_request+0x54>
 80169ea:	6820      	ldr	r0, [r4, #0]
 80169ec:	3010      	adds	r0, #16
 80169ee:	f7fe ff99 	bl	8015924 <rcl_subscription_is_valid>
 80169f2:	b158      	cbz	r0, 8016a0c <rcl_action_send_result_request+0x54>
 80169f4:	b17d      	cbz	r5, 8016a16 <rcl_action_send_result_request+0x5e>
 80169f6:	b176      	cbz	r6, 8016a16 <rcl_action_send_result_request+0x5e>
 80169f8:	6820      	ldr	r0, [r4, #0]
 80169fa:	4632      	mov	r2, r6
 80169fc:	4629      	mov	r1, r5
 80169fe:	3008      	adds	r0, #8
 8016a00:	f7fd fe68 	bl	80146d4 <rcl_send_request>
 8016a04:	3800      	subs	r0, #0
 8016a06:	bf18      	it	ne
 8016a08:	2001      	movne	r0, #1
 8016a0a:	bd70      	pop	{r4, r5, r6, pc}
 8016a0c:	f7f6 fc4c 	bl	800d2a8 <rcutils_reset_error>
 8016a10:	f640 0036 	movw	r0, #2102	@ 0x836
 8016a14:	bd70      	pop	{r4, r5, r6, pc}
 8016a16:	200b      	movs	r0, #11
 8016a18:	bd70      	pop	{r4, r5, r6, pc}
 8016a1a:	f640 0036 	movw	r0, #2102	@ 0x836
 8016a1e:	4770      	bx	lr

08016a20 <rcl_action_take_result_response>:
 8016a20:	2800      	cmp	r0, #0
 8016a22:	d037      	beq.n	8016a94 <rcl_action_take_result_response+0x74>
 8016a24:	b570      	push	{r4, r5, r6, lr}
 8016a26:	4604      	mov	r4, r0
 8016a28:	6800      	ldr	r0, [r0, #0]
 8016a2a:	b370      	cbz	r0, 8016a8a <rcl_action_take_result_response+0x6a>
 8016a2c:	460d      	mov	r5, r1
 8016a2e:	4616      	mov	r6, r2
 8016a30:	f7fd ff0e 	bl	8014850 <rcl_client_is_valid>
 8016a34:	b338      	cbz	r0, 8016a86 <rcl_action_take_result_response+0x66>
 8016a36:	6820      	ldr	r0, [r4, #0]
 8016a38:	3004      	adds	r0, #4
 8016a3a:	f7fd ff09 	bl	8014850 <rcl_client_is_valid>
 8016a3e:	b310      	cbz	r0, 8016a86 <rcl_action_take_result_response+0x66>
 8016a40:	6820      	ldr	r0, [r4, #0]
 8016a42:	3008      	adds	r0, #8
 8016a44:	f7fd ff04 	bl	8014850 <rcl_client_is_valid>
 8016a48:	b1e8      	cbz	r0, 8016a86 <rcl_action_take_result_response+0x66>
 8016a4a:	6820      	ldr	r0, [r4, #0]
 8016a4c:	300c      	adds	r0, #12
 8016a4e:	f7fe ff69 	bl	8015924 <rcl_subscription_is_valid>
 8016a52:	b1c0      	cbz	r0, 8016a86 <rcl_action_take_result_response+0x66>
 8016a54:	6820      	ldr	r0, [r4, #0]
 8016a56:	3010      	adds	r0, #16
 8016a58:	f7fe ff64 	bl	8015924 <rcl_subscription_is_valid>
 8016a5c:	b198      	cbz	r0, 8016a86 <rcl_action_take_result_response+0x66>
 8016a5e:	b1bd      	cbz	r5, 8016a90 <rcl_action_take_result_response+0x70>
 8016a60:	b1b6      	cbz	r6, 8016a90 <rcl_action_take_result_response+0x70>
 8016a62:	6820      	ldr	r0, [r4, #0]
 8016a64:	4632      	mov	r2, r6
 8016a66:	4629      	mov	r1, r5
 8016a68:	3008      	adds	r0, #8
 8016a6a:	f7fd fe85 	bl	8014778 <rcl_take_response>
 8016a6e:	b148      	cbz	r0, 8016a84 <rcl_action_take_result_response+0x64>
 8016a70:	280a      	cmp	r0, #10
 8016a72:	d007      	beq.n	8016a84 <rcl_action_take_result_response+0x64>
 8016a74:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8016a78:	f640 0337 	movw	r3, #2103	@ 0x837
 8016a7c:	4290      	cmp	r0, r2
 8016a7e:	bf0c      	ite	eq
 8016a80:	4618      	moveq	r0, r3
 8016a82:	2001      	movne	r0, #1
 8016a84:	bd70      	pop	{r4, r5, r6, pc}
 8016a86:	f7f6 fc0f 	bl	800d2a8 <rcutils_reset_error>
 8016a8a:	f640 0036 	movw	r0, #2102	@ 0x836
 8016a8e:	bd70      	pop	{r4, r5, r6, pc}
 8016a90:	200b      	movs	r0, #11
 8016a92:	bd70      	pop	{r4, r5, r6, pc}
 8016a94:	f640 0036 	movw	r0, #2102	@ 0x836
 8016a98:	4770      	bx	lr
 8016a9a:	bf00      	nop

08016a9c <rcl_action_take_cancel_response>:
 8016a9c:	2800      	cmp	r0, #0
 8016a9e:	d037      	beq.n	8016b10 <rcl_action_take_cancel_response+0x74>
 8016aa0:	b570      	push	{r4, r5, r6, lr}
 8016aa2:	4604      	mov	r4, r0
 8016aa4:	6800      	ldr	r0, [r0, #0]
 8016aa6:	b370      	cbz	r0, 8016b06 <rcl_action_take_cancel_response+0x6a>
 8016aa8:	460d      	mov	r5, r1
 8016aaa:	4616      	mov	r6, r2
 8016aac:	f7fd fed0 	bl	8014850 <rcl_client_is_valid>
 8016ab0:	b338      	cbz	r0, 8016b02 <rcl_action_take_cancel_response+0x66>
 8016ab2:	6820      	ldr	r0, [r4, #0]
 8016ab4:	3004      	adds	r0, #4
 8016ab6:	f7fd fecb 	bl	8014850 <rcl_client_is_valid>
 8016aba:	b310      	cbz	r0, 8016b02 <rcl_action_take_cancel_response+0x66>
 8016abc:	6820      	ldr	r0, [r4, #0]
 8016abe:	3008      	adds	r0, #8
 8016ac0:	f7fd fec6 	bl	8014850 <rcl_client_is_valid>
 8016ac4:	b1e8      	cbz	r0, 8016b02 <rcl_action_take_cancel_response+0x66>
 8016ac6:	6820      	ldr	r0, [r4, #0]
 8016ac8:	300c      	adds	r0, #12
 8016aca:	f7fe ff2b 	bl	8015924 <rcl_subscription_is_valid>
 8016ace:	b1c0      	cbz	r0, 8016b02 <rcl_action_take_cancel_response+0x66>
 8016ad0:	6820      	ldr	r0, [r4, #0]
 8016ad2:	3010      	adds	r0, #16
 8016ad4:	f7fe ff26 	bl	8015924 <rcl_subscription_is_valid>
 8016ad8:	b198      	cbz	r0, 8016b02 <rcl_action_take_cancel_response+0x66>
 8016ada:	b1bd      	cbz	r5, 8016b0c <rcl_action_take_cancel_response+0x70>
 8016adc:	b1b6      	cbz	r6, 8016b0c <rcl_action_take_cancel_response+0x70>
 8016ade:	6820      	ldr	r0, [r4, #0]
 8016ae0:	4632      	mov	r2, r6
 8016ae2:	4629      	mov	r1, r5
 8016ae4:	3004      	adds	r0, #4
 8016ae6:	f7fd fe47 	bl	8014778 <rcl_take_response>
 8016aea:	b148      	cbz	r0, 8016b00 <rcl_action_take_cancel_response+0x64>
 8016aec:	280a      	cmp	r0, #10
 8016aee:	d007      	beq.n	8016b00 <rcl_action_take_cancel_response+0x64>
 8016af0:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8016af4:	f640 0337 	movw	r3, #2103	@ 0x837
 8016af8:	4290      	cmp	r0, r2
 8016afa:	bf0c      	ite	eq
 8016afc:	4618      	moveq	r0, r3
 8016afe:	2001      	movne	r0, #1
 8016b00:	bd70      	pop	{r4, r5, r6, pc}
 8016b02:	f7f6 fbd1 	bl	800d2a8 <rcutils_reset_error>
 8016b06:	f640 0036 	movw	r0, #2102	@ 0x836
 8016b0a:	bd70      	pop	{r4, r5, r6, pc}
 8016b0c:	200b      	movs	r0, #11
 8016b0e:	bd70      	pop	{r4, r5, r6, pc}
 8016b10:	f640 0036 	movw	r0, #2102	@ 0x836
 8016b14:	4770      	bx	lr
 8016b16:	bf00      	nop

08016b18 <rcl_action_take_feedback>:
 8016b18:	2800      	cmp	r0, #0
 8016b1a:	d037      	beq.n	8016b8c <rcl_action_take_feedback+0x74>
 8016b1c:	b530      	push	{r4, r5, lr}
 8016b1e:	4604      	mov	r4, r0
 8016b20:	6800      	ldr	r0, [r0, #0]
 8016b22:	b08f      	sub	sp, #60	@ 0x3c
 8016b24:	b358      	cbz	r0, 8016b7e <rcl_action_take_feedback+0x66>
 8016b26:	460d      	mov	r5, r1
 8016b28:	f7fd fe92 	bl	8014850 <rcl_client_is_valid>
 8016b2c:	b328      	cbz	r0, 8016b7a <rcl_action_take_feedback+0x62>
 8016b2e:	6820      	ldr	r0, [r4, #0]
 8016b30:	3004      	adds	r0, #4
 8016b32:	f7fd fe8d 	bl	8014850 <rcl_client_is_valid>
 8016b36:	b300      	cbz	r0, 8016b7a <rcl_action_take_feedback+0x62>
 8016b38:	6820      	ldr	r0, [r4, #0]
 8016b3a:	3008      	adds	r0, #8
 8016b3c:	f7fd fe88 	bl	8014850 <rcl_client_is_valid>
 8016b40:	b1d8      	cbz	r0, 8016b7a <rcl_action_take_feedback+0x62>
 8016b42:	6820      	ldr	r0, [r4, #0]
 8016b44:	300c      	adds	r0, #12
 8016b46:	f7fe feed 	bl	8015924 <rcl_subscription_is_valid>
 8016b4a:	b1b0      	cbz	r0, 8016b7a <rcl_action_take_feedback+0x62>
 8016b4c:	6820      	ldr	r0, [r4, #0]
 8016b4e:	3010      	adds	r0, #16
 8016b50:	f7fe fee8 	bl	8015924 <rcl_subscription_is_valid>
 8016b54:	b188      	cbz	r0, 8016b7a <rcl_action_take_feedback+0x62>
 8016b56:	b1b5      	cbz	r5, 8016b86 <rcl_action_take_feedback+0x6e>
 8016b58:	6820      	ldr	r0, [r4, #0]
 8016b5a:	2300      	movs	r3, #0
 8016b5c:	466a      	mov	r2, sp
 8016b5e:	4629      	mov	r1, r5
 8016b60:	300c      	adds	r0, #12
 8016b62:	f7fe fe81 	bl	8015868 <rcl_take>
 8016b66:	b160      	cbz	r0, 8016b82 <rcl_action_take_feedback+0x6a>
 8016b68:	f240 1391 	movw	r3, #401	@ 0x191
 8016b6c:	4298      	cmp	r0, r3
 8016b6e:	d010      	beq.n	8016b92 <rcl_action_take_feedback+0x7a>
 8016b70:	280a      	cmp	r0, #10
 8016b72:	bf18      	it	ne
 8016b74:	2001      	movne	r0, #1
 8016b76:	b00f      	add	sp, #60	@ 0x3c
 8016b78:	bd30      	pop	{r4, r5, pc}
 8016b7a:	f7f6 fb95 	bl	800d2a8 <rcutils_reset_error>
 8016b7e:	f640 0036 	movw	r0, #2102	@ 0x836
 8016b82:	b00f      	add	sp, #60	@ 0x3c
 8016b84:	bd30      	pop	{r4, r5, pc}
 8016b86:	200b      	movs	r0, #11
 8016b88:	b00f      	add	sp, #60	@ 0x3c
 8016b8a:	bd30      	pop	{r4, r5, pc}
 8016b8c:	f640 0036 	movw	r0, #2102	@ 0x836
 8016b90:	4770      	bx	lr
 8016b92:	f640 0037 	movw	r0, #2103	@ 0x837
 8016b96:	e7f4      	b.n	8016b82 <rcl_action_take_feedback+0x6a>

08016b98 <rcl_action_wait_set_add_action_client>:
 8016b98:	2800      	cmp	r0, #0
 8016b9a:	d045      	beq.n	8016c28 <rcl_action_wait_set_add_action_client+0x90>
 8016b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016b9e:	460c      	mov	r4, r1
 8016ba0:	2900      	cmp	r1, #0
 8016ba2:	d03e      	beq.n	8016c22 <rcl_action_wait_set_add_action_client+0x8a>
 8016ba4:	4605      	mov	r5, r0
 8016ba6:	6808      	ldr	r0, [r1, #0]
 8016ba8:	2800      	cmp	r0, #0
 8016baa:	d03a      	beq.n	8016c22 <rcl_action_wait_set_add_action_client+0x8a>
 8016bac:	4617      	mov	r7, r2
 8016bae:	461e      	mov	r6, r3
 8016bb0:	f7fd fe4e 	bl	8014850 <rcl_client_is_valid>
 8016bb4:	b398      	cbz	r0, 8016c1e <rcl_action_wait_set_add_action_client+0x86>
 8016bb6:	6820      	ldr	r0, [r4, #0]
 8016bb8:	3004      	adds	r0, #4
 8016bba:	f7fd fe49 	bl	8014850 <rcl_client_is_valid>
 8016bbe:	b370      	cbz	r0, 8016c1e <rcl_action_wait_set_add_action_client+0x86>
 8016bc0:	6820      	ldr	r0, [r4, #0]
 8016bc2:	3008      	adds	r0, #8
 8016bc4:	f7fd fe44 	bl	8014850 <rcl_client_is_valid>
 8016bc8:	b348      	cbz	r0, 8016c1e <rcl_action_wait_set_add_action_client+0x86>
 8016bca:	6820      	ldr	r0, [r4, #0]
 8016bcc:	300c      	adds	r0, #12
 8016bce:	f7fe fea9 	bl	8015924 <rcl_subscription_is_valid>
 8016bd2:	b320      	cbz	r0, 8016c1e <rcl_action_wait_set_add_action_client+0x86>
 8016bd4:	6820      	ldr	r0, [r4, #0]
 8016bd6:	3010      	adds	r0, #16
 8016bd8:	f7fe fea4 	bl	8015924 <rcl_subscription_is_valid>
 8016bdc:	b1f8      	cbz	r0, 8016c1e <rcl_action_wait_set_add_action_client+0x86>
 8016bde:	6821      	ldr	r1, [r4, #0]
 8016be0:	4628      	mov	r0, r5
 8016be2:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 8016be6:	f7ff fc73 	bl	80164d0 <rcl_wait_set_add_client>
 8016bea:	b9b8      	cbnz	r0, 8016c1c <rcl_action_wait_set_add_action_client+0x84>
 8016bec:	6821      	ldr	r1, [r4, #0]
 8016bee:	4628      	mov	r0, r5
 8016bf0:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 8016bf4:	3104      	adds	r1, #4
 8016bf6:	f7ff fc6b 	bl	80164d0 <rcl_wait_set_add_client>
 8016bfa:	b978      	cbnz	r0, 8016c1c <rcl_action_wait_set_add_action_client+0x84>
 8016bfc:	6821      	ldr	r1, [r4, #0]
 8016bfe:	4628      	mov	r0, r5
 8016c00:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 8016c04:	3108      	adds	r1, #8
 8016c06:	f7ff fc63 	bl	80164d0 <rcl_wait_set_add_client>
 8016c0a:	b938      	cbnz	r0, 8016c1c <rcl_action_wait_set_add_action_client+0x84>
 8016c0c:	6821      	ldr	r1, [r4, #0]
 8016c0e:	4628      	mov	r0, r5
 8016c10:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 8016c14:	310c      	adds	r1, #12
 8016c16:	f7ff f8fb 	bl	8015e10 <rcl_wait_set_add_subscription>
 8016c1a:	b140      	cbz	r0, 8016c2e <rcl_action_wait_set_add_action_client+0x96>
 8016c1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016c1e:	f7f6 fb43 	bl	800d2a8 <rcutils_reset_error>
 8016c22:	f640 0036 	movw	r0, #2102	@ 0x836
 8016c26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016c28:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8016c2c:	4770      	bx	lr
 8016c2e:	6821      	ldr	r1, [r4, #0]
 8016c30:	4628      	mov	r0, r5
 8016c32:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 8016c36:	3110      	adds	r1, #16
 8016c38:	f7ff f8ea 	bl	8015e10 <rcl_wait_set_add_subscription>
 8016c3c:	2800      	cmp	r0, #0
 8016c3e:	d1ed      	bne.n	8016c1c <rcl_action_wait_set_add_action_client+0x84>
 8016c40:	b11f      	cbz	r7, 8016c4a <rcl_action_wait_set_add_action_client+0xb2>
 8016c42:	6823      	ldr	r3, [r4, #0]
 8016c44:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 8016c48:	603b      	str	r3, [r7, #0]
 8016c4a:	2e00      	cmp	r6, #0
 8016c4c:	d0e6      	beq.n	8016c1c <rcl_action_wait_set_add_action_client+0x84>
 8016c4e:	6823      	ldr	r3, [r4, #0]
 8016c50:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 8016c54:	6033      	str	r3, [r6, #0]
 8016c56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08016c58 <rcl_action_client_wait_set_get_entities_ready>:
 8016c58:	2800      	cmp	r0, #0
 8016c5a:	f000 8089 	beq.w	8016d70 <rcl_action_client_wait_set_get_entities_ready+0x118>
 8016c5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016c62:	460c      	mov	r4, r1
 8016c64:	2900      	cmp	r1, #0
 8016c66:	d079      	beq.n	8016d5c <rcl_action_client_wait_set_get_entities_ready+0x104>
 8016c68:	4605      	mov	r5, r0
 8016c6a:	6808      	ldr	r0, [r1, #0]
 8016c6c:	2800      	cmp	r0, #0
 8016c6e:	d075      	beq.n	8016d5c <rcl_action_client_wait_set_get_entities_ready+0x104>
 8016c70:	4616      	mov	r6, r2
 8016c72:	461f      	mov	r7, r3
 8016c74:	f7fd fdec 	bl	8014850 <rcl_client_is_valid>
 8016c78:	2800      	cmp	r0, #0
 8016c7a:	d06d      	beq.n	8016d58 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8016c7c:	6820      	ldr	r0, [r4, #0]
 8016c7e:	3004      	adds	r0, #4
 8016c80:	f7fd fde6 	bl	8014850 <rcl_client_is_valid>
 8016c84:	2800      	cmp	r0, #0
 8016c86:	d067      	beq.n	8016d58 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8016c88:	6820      	ldr	r0, [r4, #0]
 8016c8a:	3008      	adds	r0, #8
 8016c8c:	f7fd fde0 	bl	8014850 <rcl_client_is_valid>
 8016c90:	2800      	cmp	r0, #0
 8016c92:	d061      	beq.n	8016d58 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8016c94:	6820      	ldr	r0, [r4, #0]
 8016c96:	300c      	adds	r0, #12
 8016c98:	f7fe fe44 	bl	8015924 <rcl_subscription_is_valid>
 8016c9c:	2800      	cmp	r0, #0
 8016c9e:	d05b      	beq.n	8016d58 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8016ca0:	6820      	ldr	r0, [r4, #0]
 8016ca2:	3010      	adds	r0, #16
 8016ca4:	f7fe fe3e 	bl	8015924 <rcl_subscription_is_valid>
 8016ca8:	2800      	cmp	r0, #0
 8016caa:	d055      	beq.n	8016d58 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8016cac:	2e00      	cmp	r6, #0
 8016cae:	d05c      	beq.n	8016d6a <rcl_action_client_wait_set_get_entities_ready+0x112>
 8016cb0:	2f00      	cmp	r7, #0
 8016cb2:	d05a      	beq.n	8016d6a <rcl_action_client_wait_set_get_entities_ready+0x112>
 8016cb4:	9b06      	ldr	r3, [sp, #24]
 8016cb6:	2b00      	cmp	r3, #0
 8016cb8:	d057      	beq.n	8016d6a <rcl_action_client_wait_set_get_entities_ready+0x112>
 8016cba:	9b07      	ldr	r3, [sp, #28]
 8016cbc:	2b00      	cmp	r3, #0
 8016cbe:	d054      	beq.n	8016d6a <rcl_action_client_wait_set_get_entities_ready+0x112>
 8016cc0:	9b08      	ldr	r3, [sp, #32]
 8016cc2:	2b00      	cmp	r3, #0
 8016cc4:	d051      	beq.n	8016d6a <rcl_action_client_wait_set_get_entities_ready+0x112>
 8016cc6:	6823      	ldr	r3, [r4, #0]
 8016cc8:	686a      	ldr	r2, [r5, #4]
 8016cca:	f8d3 11d0 	ldr.w	r1, [r3, #464]	@ 0x1d0
 8016cce:	428a      	cmp	r2, r1
 8016cd0:	d948      	bls.n	8016d64 <rcl_action_client_wait_set_get_entities_ready+0x10c>
 8016cd2:	f8d3 01d4 	ldr.w	r0, [r3, #468]	@ 0x1d4
 8016cd6:	4282      	cmp	r2, r0
 8016cd8:	d944      	bls.n	8016d64 <rcl_action_client_wait_set_get_entities_ready+0x10c>
 8016cda:	f8d3 41c4 	ldr.w	r4, [r3, #452]	@ 0x1c4
 8016cde:	69ea      	ldr	r2, [r5, #28]
 8016ce0:	42a2      	cmp	r2, r4
 8016ce2:	d93f      	bls.n	8016d64 <rcl_action_client_wait_set_get_entities_ready+0x10c>
 8016ce4:	f8d3 c1c8 	ldr.w	ip, [r3, #456]	@ 0x1c8
 8016ce8:	4562      	cmp	r2, ip
 8016cea:	d93b      	bls.n	8016d64 <rcl_action_client_wait_set_get_entities_ready+0x10c>
 8016cec:	f8d3 e1cc 	ldr.w	lr, [r3, #460]	@ 0x1cc
 8016cf0:	4572      	cmp	r2, lr
 8016cf2:	d937      	bls.n	8016d64 <rcl_action_client_wait_set_get_entities_ready+0x10c>
 8016cf4:	69aa      	ldr	r2, [r5, #24]
 8016cf6:	682d      	ldr	r5, [r5, #0]
 8016cf8:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]
 8016cfc:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 8016d00:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 8016d04:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 8016d08:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 8016d0c:	f103 0c0c 	add.w	ip, r3, #12
 8016d10:	eba5 050c 	sub.w	r5, r5, ip
 8016d14:	fab5 f585 	clz	r5, r5
 8016d18:	096d      	lsrs	r5, r5, #5
 8016d1a:	7035      	strb	r5, [r6, #0]
 8016d1c:	f103 0510 	add.w	r5, r3, #16
 8016d20:	1b64      	subs	r4, r4, r5
 8016d22:	fab4 f484 	clz	r4, r4
 8016d26:	0964      	lsrs	r4, r4, #5
 8016d28:	703c      	strb	r4, [r7, #0]
 8016d2a:	eba3 0008 	sub.w	r0, r3, r8
 8016d2e:	1d1c      	adds	r4, r3, #4
 8016d30:	3308      	adds	r3, #8
 8016d32:	1ad3      	subs	r3, r2, r3
 8016d34:	fab0 f080 	clz	r0, r0
 8016d38:	9a06      	ldr	r2, [sp, #24]
 8016d3a:	0940      	lsrs	r0, r0, #5
 8016d3c:	1b09      	subs	r1, r1, r4
 8016d3e:	7010      	strb	r0, [r2, #0]
 8016d40:	fab1 f181 	clz	r1, r1
 8016d44:	9a07      	ldr	r2, [sp, #28]
 8016d46:	0949      	lsrs	r1, r1, #5
 8016d48:	7011      	strb	r1, [r2, #0]
 8016d4a:	fab3 f383 	clz	r3, r3
 8016d4e:	9a08      	ldr	r2, [sp, #32]
 8016d50:	095b      	lsrs	r3, r3, #5
 8016d52:	2000      	movs	r0, #0
 8016d54:	7013      	strb	r3, [r2, #0]
 8016d56:	e003      	b.n	8016d60 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8016d58:	f7f6 faa6 	bl	800d2a8 <rcutils_reset_error>
 8016d5c:	f640 0036 	movw	r0, #2102	@ 0x836
 8016d60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016d64:	2001      	movs	r0, #1
 8016d66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016d6a:	200b      	movs	r0, #11
 8016d6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016d70:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8016d74:	4770      	bx	lr
 8016d76:	bf00      	nop

08016d78 <rcl_action_take_goal_request>:
 8016d78:	b3b0      	cbz	r0, 8016de8 <rcl_action_take_goal_request+0x70>
 8016d7a:	b570      	push	{r4, r5, r6, lr}
 8016d7c:	4604      	mov	r4, r0
 8016d7e:	6800      	ldr	r0, [r0, #0]
 8016d80:	b368      	cbz	r0, 8016dde <rcl_action_take_goal_request+0x66>
 8016d82:	460d      	mov	r5, r1
 8016d84:	4616      	mov	r6, r2
 8016d86:	f7fe fc01 	bl	801558c <rcl_service_is_valid>
 8016d8a:	b330      	cbz	r0, 8016dda <rcl_action_take_goal_request+0x62>
 8016d8c:	6820      	ldr	r0, [r4, #0]
 8016d8e:	3004      	adds	r0, #4
 8016d90:	f7fe fbfc 	bl	801558c <rcl_service_is_valid>
 8016d94:	b308      	cbz	r0, 8016dda <rcl_action_take_goal_request+0x62>
 8016d96:	6820      	ldr	r0, [r4, #0]
 8016d98:	3008      	adds	r0, #8
 8016d9a:	f7fe fbf7 	bl	801558c <rcl_service_is_valid>
 8016d9e:	b1e0      	cbz	r0, 8016dda <rcl_action_take_goal_request+0x62>
 8016da0:	6820      	ldr	r0, [r4, #0]
 8016da2:	300c      	adds	r0, #12
 8016da4:	f7f5 fade 	bl	800c364 <rcl_publisher_is_valid>
 8016da8:	b1b8      	cbz	r0, 8016dda <rcl_action_take_goal_request+0x62>
 8016daa:	6820      	ldr	r0, [r4, #0]
 8016dac:	3010      	adds	r0, #16
 8016dae:	f7f5 fad9 	bl	800c364 <rcl_publisher_is_valid>
 8016db2:	b190      	cbz	r0, 8016dda <rcl_action_take_goal_request+0x62>
 8016db4:	b1b5      	cbz	r5, 8016de4 <rcl_action_take_goal_request+0x6c>
 8016db6:	b1ae      	cbz	r6, 8016de4 <rcl_action_take_goal_request+0x6c>
 8016db8:	6820      	ldr	r0, [r4, #0]
 8016dba:	4632      	mov	r2, r6
 8016dbc:	4629      	mov	r1, r5
 8016dbe:	f7fe fb65 	bl	801548c <rcl_take_request>
 8016dc2:	b148      	cbz	r0, 8016dd8 <rcl_action_take_goal_request+0x60>
 8016dc4:	280a      	cmp	r0, #10
 8016dc6:	d007      	beq.n	8016dd8 <rcl_action_take_goal_request+0x60>
 8016dc8:	f240 2259 	movw	r2, #601	@ 0x259
 8016dcc:	f640 0399 	movw	r3, #2201	@ 0x899
 8016dd0:	4290      	cmp	r0, r2
 8016dd2:	bf0c      	ite	eq
 8016dd4:	4618      	moveq	r0, r3
 8016dd6:	2001      	movne	r0, #1
 8016dd8:	bd70      	pop	{r4, r5, r6, pc}
 8016dda:	f7f6 fa65 	bl	800d2a8 <rcutils_reset_error>
 8016dde:	f640 0098 	movw	r0, #2200	@ 0x898
 8016de2:	bd70      	pop	{r4, r5, r6, pc}
 8016de4:	200b      	movs	r0, #11
 8016de6:	bd70      	pop	{r4, r5, r6, pc}
 8016de8:	f640 0098 	movw	r0, #2200	@ 0x898
 8016dec:	4770      	bx	lr
 8016dee:	bf00      	nop

08016df0 <rcl_action_send_goal_response>:
 8016df0:	b378      	cbz	r0, 8016e52 <rcl_action_send_goal_response+0x62>
 8016df2:	b570      	push	{r4, r5, r6, lr}
 8016df4:	4604      	mov	r4, r0
 8016df6:	6800      	ldr	r0, [r0, #0]
 8016df8:	b330      	cbz	r0, 8016e48 <rcl_action_send_goal_response+0x58>
 8016dfa:	460d      	mov	r5, r1
 8016dfc:	4616      	mov	r6, r2
 8016dfe:	f7fe fbc5 	bl	801558c <rcl_service_is_valid>
 8016e02:	b1f8      	cbz	r0, 8016e44 <rcl_action_send_goal_response+0x54>
 8016e04:	6820      	ldr	r0, [r4, #0]
 8016e06:	3004      	adds	r0, #4
 8016e08:	f7fe fbc0 	bl	801558c <rcl_service_is_valid>
 8016e0c:	b1d0      	cbz	r0, 8016e44 <rcl_action_send_goal_response+0x54>
 8016e0e:	6820      	ldr	r0, [r4, #0]
 8016e10:	3008      	adds	r0, #8
 8016e12:	f7fe fbbb 	bl	801558c <rcl_service_is_valid>
 8016e16:	b1a8      	cbz	r0, 8016e44 <rcl_action_send_goal_response+0x54>
 8016e18:	6820      	ldr	r0, [r4, #0]
 8016e1a:	300c      	adds	r0, #12
 8016e1c:	f7f5 faa2 	bl	800c364 <rcl_publisher_is_valid>
 8016e20:	b180      	cbz	r0, 8016e44 <rcl_action_send_goal_response+0x54>
 8016e22:	6820      	ldr	r0, [r4, #0]
 8016e24:	3010      	adds	r0, #16
 8016e26:	f7f5 fa9d 	bl	800c364 <rcl_publisher_is_valid>
 8016e2a:	b158      	cbz	r0, 8016e44 <rcl_action_send_goal_response+0x54>
 8016e2c:	b17d      	cbz	r5, 8016e4e <rcl_action_send_goal_response+0x5e>
 8016e2e:	b176      	cbz	r6, 8016e4e <rcl_action_send_goal_response+0x5e>
 8016e30:	6820      	ldr	r0, [r4, #0]
 8016e32:	4632      	mov	r2, r6
 8016e34:	4629      	mov	r1, r5
 8016e36:	f7fe fb79 	bl	801552c <rcl_send_response>
 8016e3a:	b110      	cbz	r0, 8016e42 <rcl_action_send_goal_response+0x52>
 8016e3c:	2802      	cmp	r0, #2
 8016e3e:	bf18      	it	ne
 8016e40:	2001      	movne	r0, #1
 8016e42:	bd70      	pop	{r4, r5, r6, pc}
 8016e44:	f7f6 fa30 	bl	800d2a8 <rcutils_reset_error>
 8016e48:	f640 0098 	movw	r0, #2200	@ 0x898
 8016e4c:	bd70      	pop	{r4, r5, r6, pc}
 8016e4e:	200b      	movs	r0, #11
 8016e50:	bd70      	pop	{r4, r5, r6, pc}
 8016e52:	f640 0098 	movw	r0, #2200	@ 0x898
 8016e56:	4770      	bx	lr

08016e58 <rcl_action_take_result_request>:
 8016e58:	2800      	cmp	r0, #0
 8016e5a:	d037      	beq.n	8016ecc <rcl_action_take_result_request+0x74>
 8016e5c:	b570      	push	{r4, r5, r6, lr}
 8016e5e:	4604      	mov	r4, r0
 8016e60:	6800      	ldr	r0, [r0, #0]
 8016e62:	b370      	cbz	r0, 8016ec2 <rcl_action_take_result_request+0x6a>
 8016e64:	460d      	mov	r5, r1
 8016e66:	4616      	mov	r6, r2
 8016e68:	f7fe fb90 	bl	801558c <rcl_service_is_valid>
 8016e6c:	b338      	cbz	r0, 8016ebe <rcl_action_take_result_request+0x66>
 8016e6e:	6820      	ldr	r0, [r4, #0]
 8016e70:	3004      	adds	r0, #4
 8016e72:	f7fe fb8b 	bl	801558c <rcl_service_is_valid>
 8016e76:	b310      	cbz	r0, 8016ebe <rcl_action_take_result_request+0x66>
 8016e78:	6820      	ldr	r0, [r4, #0]
 8016e7a:	3008      	adds	r0, #8
 8016e7c:	f7fe fb86 	bl	801558c <rcl_service_is_valid>
 8016e80:	b1e8      	cbz	r0, 8016ebe <rcl_action_take_result_request+0x66>
 8016e82:	6820      	ldr	r0, [r4, #0]
 8016e84:	300c      	adds	r0, #12
 8016e86:	f7f5 fa6d 	bl	800c364 <rcl_publisher_is_valid>
 8016e8a:	b1c0      	cbz	r0, 8016ebe <rcl_action_take_result_request+0x66>
 8016e8c:	6820      	ldr	r0, [r4, #0]
 8016e8e:	3010      	adds	r0, #16
 8016e90:	f7f5 fa68 	bl	800c364 <rcl_publisher_is_valid>
 8016e94:	b198      	cbz	r0, 8016ebe <rcl_action_take_result_request+0x66>
 8016e96:	b1bd      	cbz	r5, 8016ec8 <rcl_action_take_result_request+0x70>
 8016e98:	b1b6      	cbz	r6, 8016ec8 <rcl_action_take_result_request+0x70>
 8016e9a:	6820      	ldr	r0, [r4, #0]
 8016e9c:	4632      	mov	r2, r6
 8016e9e:	4629      	mov	r1, r5
 8016ea0:	3008      	adds	r0, #8
 8016ea2:	f7fe faf3 	bl	801548c <rcl_take_request>
 8016ea6:	b148      	cbz	r0, 8016ebc <rcl_action_take_result_request+0x64>
 8016ea8:	280a      	cmp	r0, #10
 8016eaa:	d007      	beq.n	8016ebc <rcl_action_take_result_request+0x64>
 8016eac:	f240 2259 	movw	r2, #601	@ 0x259
 8016eb0:	f640 0399 	movw	r3, #2201	@ 0x899
 8016eb4:	4290      	cmp	r0, r2
 8016eb6:	bf0c      	ite	eq
 8016eb8:	4618      	moveq	r0, r3
 8016eba:	2001      	movne	r0, #1
 8016ebc:	bd70      	pop	{r4, r5, r6, pc}
 8016ebe:	f7f6 f9f3 	bl	800d2a8 <rcutils_reset_error>
 8016ec2:	f640 0098 	movw	r0, #2200	@ 0x898
 8016ec6:	bd70      	pop	{r4, r5, r6, pc}
 8016ec8:	200b      	movs	r0, #11
 8016eca:	bd70      	pop	{r4, r5, r6, pc}
 8016ecc:	f640 0098 	movw	r0, #2200	@ 0x898
 8016ed0:	4770      	bx	lr
 8016ed2:	bf00      	nop

08016ed4 <rcl_action_take_cancel_request>:
 8016ed4:	2800      	cmp	r0, #0
 8016ed6:	d037      	beq.n	8016f48 <rcl_action_take_cancel_request+0x74>
 8016ed8:	b570      	push	{r4, r5, r6, lr}
 8016eda:	4604      	mov	r4, r0
 8016edc:	6800      	ldr	r0, [r0, #0]
 8016ede:	b370      	cbz	r0, 8016f3e <rcl_action_take_cancel_request+0x6a>
 8016ee0:	460d      	mov	r5, r1
 8016ee2:	4616      	mov	r6, r2
 8016ee4:	f7fe fb52 	bl	801558c <rcl_service_is_valid>
 8016ee8:	b338      	cbz	r0, 8016f3a <rcl_action_take_cancel_request+0x66>
 8016eea:	6820      	ldr	r0, [r4, #0]
 8016eec:	3004      	adds	r0, #4
 8016eee:	f7fe fb4d 	bl	801558c <rcl_service_is_valid>
 8016ef2:	b310      	cbz	r0, 8016f3a <rcl_action_take_cancel_request+0x66>
 8016ef4:	6820      	ldr	r0, [r4, #0]
 8016ef6:	3008      	adds	r0, #8
 8016ef8:	f7fe fb48 	bl	801558c <rcl_service_is_valid>
 8016efc:	b1e8      	cbz	r0, 8016f3a <rcl_action_take_cancel_request+0x66>
 8016efe:	6820      	ldr	r0, [r4, #0]
 8016f00:	300c      	adds	r0, #12
 8016f02:	f7f5 fa2f 	bl	800c364 <rcl_publisher_is_valid>
 8016f06:	b1c0      	cbz	r0, 8016f3a <rcl_action_take_cancel_request+0x66>
 8016f08:	6820      	ldr	r0, [r4, #0]
 8016f0a:	3010      	adds	r0, #16
 8016f0c:	f7f5 fa2a 	bl	800c364 <rcl_publisher_is_valid>
 8016f10:	b198      	cbz	r0, 8016f3a <rcl_action_take_cancel_request+0x66>
 8016f12:	b1bd      	cbz	r5, 8016f44 <rcl_action_take_cancel_request+0x70>
 8016f14:	b1b6      	cbz	r6, 8016f44 <rcl_action_take_cancel_request+0x70>
 8016f16:	6820      	ldr	r0, [r4, #0]
 8016f18:	4632      	mov	r2, r6
 8016f1a:	4629      	mov	r1, r5
 8016f1c:	3004      	adds	r0, #4
 8016f1e:	f7fe fab5 	bl	801548c <rcl_take_request>
 8016f22:	b148      	cbz	r0, 8016f38 <rcl_action_take_cancel_request+0x64>
 8016f24:	280a      	cmp	r0, #10
 8016f26:	d007      	beq.n	8016f38 <rcl_action_take_cancel_request+0x64>
 8016f28:	f240 2259 	movw	r2, #601	@ 0x259
 8016f2c:	f640 0399 	movw	r3, #2201	@ 0x899
 8016f30:	4290      	cmp	r0, r2
 8016f32:	bf0c      	ite	eq
 8016f34:	4618      	moveq	r0, r3
 8016f36:	2001      	movne	r0, #1
 8016f38:	bd70      	pop	{r4, r5, r6, pc}
 8016f3a:	f7f6 f9b5 	bl	800d2a8 <rcutils_reset_error>
 8016f3e:	f640 0098 	movw	r0, #2200	@ 0x898
 8016f42:	bd70      	pop	{r4, r5, r6, pc}
 8016f44:	200b      	movs	r0, #11
 8016f46:	bd70      	pop	{r4, r5, r6, pc}
 8016f48:	f640 0098 	movw	r0, #2200	@ 0x898
 8016f4c:	4770      	bx	lr
 8016f4e:	bf00      	nop

08016f50 <rcl_action_send_cancel_response>:
 8016f50:	b380      	cbz	r0, 8016fb4 <rcl_action_send_cancel_response+0x64>
 8016f52:	b570      	push	{r4, r5, r6, lr}
 8016f54:	4604      	mov	r4, r0
 8016f56:	6800      	ldr	r0, [r0, #0]
 8016f58:	b338      	cbz	r0, 8016faa <rcl_action_send_cancel_response+0x5a>
 8016f5a:	460d      	mov	r5, r1
 8016f5c:	4616      	mov	r6, r2
 8016f5e:	f7fe fb15 	bl	801558c <rcl_service_is_valid>
 8016f62:	b300      	cbz	r0, 8016fa6 <rcl_action_send_cancel_response+0x56>
 8016f64:	6820      	ldr	r0, [r4, #0]
 8016f66:	3004      	adds	r0, #4
 8016f68:	f7fe fb10 	bl	801558c <rcl_service_is_valid>
 8016f6c:	b1d8      	cbz	r0, 8016fa6 <rcl_action_send_cancel_response+0x56>
 8016f6e:	6820      	ldr	r0, [r4, #0]
 8016f70:	3008      	adds	r0, #8
 8016f72:	f7fe fb0b 	bl	801558c <rcl_service_is_valid>
 8016f76:	b1b0      	cbz	r0, 8016fa6 <rcl_action_send_cancel_response+0x56>
 8016f78:	6820      	ldr	r0, [r4, #0]
 8016f7a:	300c      	adds	r0, #12
 8016f7c:	f7f5 f9f2 	bl	800c364 <rcl_publisher_is_valid>
 8016f80:	b188      	cbz	r0, 8016fa6 <rcl_action_send_cancel_response+0x56>
 8016f82:	6820      	ldr	r0, [r4, #0]
 8016f84:	3010      	adds	r0, #16
 8016f86:	f7f5 f9ed 	bl	800c364 <rcl_publisher_is_valid>
 8016f8a:	b160      	cbz	r0, 8016fa6 <rcl_action_send_cancel_response+0x56>
 8016f8c:	b185      	cbz	r5, 8016fb0 <rcl_action_send_cancel_response+0x60>
 8016f8e:	b17e      	cbz	r6, 8016fb0 <rcl_action_send_cancel_response+0x60>
 8016f90:	6820      	ldr	r0, [r4, #0]
 8016f92:	4632      	mov	r2, r6
 8016f94:	4629      	mov	r1, r5
 8016f96:	3004      	adds	r0, #4
 8016f98:	f7fe fac8 	bl	801552c <rcl_send_response>
 8016f9c:	b110      	cbz	r0, 8016fa4 <rcl_action_send_cancel_response+0x54>
 8016f9e:	2802      	cmp	r0, #2
 8016fa0:	bf18      	it	ne
 8016fa2:	2001      	movne	r0, #1
 8016fa4:	bd70      	pop	{r4, r5, r6, pc}
 8016fa6:	f7f6 f97f 	bl	800d2a8 <rcutils_reset_error>
 8016faa:	f640 0098 	movw	r0, #2200	@ 0x898
 8016fae:	bd70      	pop	{r4, r5, r6, pc}
 8016fb0:	200b      	movs	r0, #11
 8016fb2:	bd70      	pop	{r4, r5, r6, pc}
 8016fb4:	f640 0098 	movw	r0, #2200	@ 0x898
 8016fb8:	4770      	bx	lr
 8016fba:	bf00      	nop

08016fbc <rcl_action_wait_set_add_action_server>:
 8016fbc:	2800      	cmp	r0, #0
 8016fbe:	d04d      	beq.n	801705c <rcl_action_wait_set_add_action_server+0xa0>
 8016fc0:	b570      	push	{r4, r5, r6, lr}
 8016fc2:	460c      	mov	r4, r1
 8016fc4:	b159      	cbz	r1, 8016fde <rcl_action_wait_set_add_action_server+0x22>
 8016fc6:	4605      	mov	r5, r0
 8016fc8:	6808      	ldr	r0, [r1, #0]
 8016fca:	b140      	cbz	r0, 8016fde <rcl_action_wait_set_add_action_server+0x22>
 8016fcc:	4616      	mov	r6, r2
 8016fce:	f7fe fadd 	bl	801558c <rcl_service_is_valid>
 8016fd2:	b120      	cbz	r0, 8016fde <rcl_action_wait_set_add_action_server+0x22>
 8016fd4:	6820      	ldr	r0, [r4, #0]
 8016fd6:	3004      	adds	r0, #4
 8016fd8:	f7fe fad8 	bl	801558c <rcl_service_is_valid>
 8016fdc:	b910      	cbnz	r0, 8016fe4 <rcl_action_wait_set_add_action_server+0x28>
 8016fde:	f640 0098 	movw	r0, #2200	@ 0x898
 8016fe2:	bd70      	pop	{r4, r5, r6, pc}
 8016fe4:	6820      	ldr	r0, [r4, #0]
 8016fe6:	3008      	adds	r0, #8
 8016fe8:	f7fe fad0 	bl	801558c <rcl_service_is_valid>
 8016fec:	2800      	cmp	r0, #0
 8016fee:	d0f6      	beq.n	8016fde <rcl_action_wait_set_add_action_server+0x22>
 8016ff0:	6820      	ldr	r0, [r4, #0]
 8016ff2:	300c      	adds	r0, #12
 8016ff4:	f7f5 f9ce 	bl	800c394 <rcl_publisher_is_valid_except_context>
 8016ff8:	2800      	cmp	r0, #0
 8016ffa:	d0f0      	beq.n	8016fde <rcl_action_wait_set_add_action_server+0x22>
 8016ffc:	6820      	ldr	r0, [r4, #0]
 8016ffe:	3010      	adds	r0, #16
 8017000:	f7f5 f9c8 	bl	800c394 <rcl_publisher_is_valid_except_context>
 8017004:	2800      	cmp	r0, #0
 8017006:	d0ea      	beq.n	8016fde <rcl_action_wait_set_add_action_server+0x22>
 8017008:	6821      	ldr	r1, [r4, #0]
 801700a:	4628      	mov	r0, r5
 801700c:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 8017010:	f7ff fa8a 	bl	8016528 <rcl_wait_set_add_service>
 8017014:	2800      	cmp	r0, #0
 8017016:	d1e4      	bne.n	8016fe2 <rcl_action_wait_set_add_action_server+0x26>
 8017018:	6821      	ldr	r1, [r4, #0]
 801701a:	4628      	mov	r0, r5
 801701c:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 8017020:	3104      	adds	r1, #4
 8017022:	f7ff fa81 	bl	8016528 <rcl_wait_set_add_service>
 8017026:	2800      	cmp	r0, #0
 8017028:	d1db      	bne.n	8016fe2 <rcl_action_wait_set_add_action_server+0x26>
 801702a:	6821      	ldr	r1, [r4, #0]
 801702c:	4628      	mov	r0, r5
 801702e:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 8017032:	3108      	adds	r1, #8
 8017034:	f7ff fa78 	bl	8016528 <rcl_wait_set_add_service>
 8017038:	2800      	cmp	r0, #0
 801703a:	d1d2      	bne.n	8016fe2 <rcl_action_wait_set_add_action_server+0x26>
 801703c:	6821      	ldr	r1, [r4, #0]
 801703e:	4628      	mov	r0, r5
 8017040:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 8017044:	3114      	adds	r1, #20
 8017046:	f7ff fa13 	bl	8016470 <rcl_wait_set_add_timer>
 801704a:	2800      	cmp	r0, #0
 801704c:	d1c9      	bne.n	8016fe2 <rcl_action_wait_set_add_action_server+0x26>
 801704e:	2e00      	cmp	r6, #0
 8017050:	d0c7      	beq.n	8016fe2 <rcl_action_wait_set_add_action_server+0x26>
 8017052:	6823      	ldr	r3, [r4, #0]
 8017054:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 8017058:	6033      	str	r3, [r6, #0]
 801705a:	bd70      	pop	{r4, r5, r6, pc}
 801705c:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8017060:	4770      	bx	lr
 8017062:	bf00      	nop

08017064 <rcl_action_server_wait_set_get_entities_ready>:
 8017064:	2800      	cmp	r0, #0
 8017066:	d05a      	beq.n	801711e <rcl_action_server_wait_set_get_entities_ready+0xba>
 8017068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801706a:	460c      	mov	r4, r1
 801706c:	b161      	cbz	r1, 8017088 <rcl_action_server_wait_set_get_entities_ready+0x24>
 801706e:	4605      	mov	r5, r0
 8017070:	6808      	ldr	r0, [r1, #0]
 8017072:	b148      	cbz	r0, 8017088 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8017074:	4616      	mov	r6, r2
 8017076:	461f      	mov	r7, r3
 8017078:	f7fe fa88 	bl	801558c <rcl_service_is_valid>
 801707c:	b120      	cbz	r0, 8017088 <rcl_action_server_wait_set_get_entities_ready+0x24>
 801707e:	6820      	ldr	r0, [r4, #0]
 8017080:	3004      	adds	r0, #4
 8017082:	f7fe fa83 	bl	801558c <rcl_service_is_valid>
 8017086:	b910      	cbnz	r0, 801708e <rcl_action_server_wait_set_get_entities_ready+0x2a>
 8017088:	f640 0098 	movw	r0, #2200	@ 0x898
 801708c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801708e:	6820      	ldr	r0, [r4, #0]
 8017090:	3008      	adds	r0, #8
 8017092:	f7fe fa7b 	bl	801558c <rcl_service_is_valid>
 8017096:	2800      	cmp	r0, #0
 8017098:	d0f6      	beq.n	8017088 <rcl_action_server_wait_set_get_entities_ready+0x24>
 801709a:	6820      	ldr	r0, [r4, #0]
 801709c:	300c      	adds	r0, #12
 801709e:	f7f5 f979 	bl	800c394 <rcl_publisher_is_valid_except_context>
 80170a2:	2800      	cmp	r0, #0
 80170a4:	d0f0      	beq.n	8017088 <rcl_action_server_wait_set_get_entities_ready+0x24>
 80170a6:	6820      	ldr	r0, [r4, #0]
 80170a8:	3010      	adds	r0, #16
 80170aa:	f7f5 f973 	bl	800c394 <rcl_publisher_is_valid_except_context>
 80170ae:	2800      	cmp	r0, #0
 80170b0:	d0ea      	beq.n	8017088 <rcl_action_server_wait_set_get_entities_ready+0x24>
 80170b2:	b3be      	cbz	r6, 8017124 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 80170b4:	b3b7      	cbz	r7, 8017124 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 80170b6:	9b06      	ldr	r3, [sp, #24]
 80170b8:	b3a3      	cbz	r3, 8017124 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 80170ba:	9b07      	ldr	r3, [sp, #28]
 80170bc:	b393      	cbz	r3, 8017124 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 80170be:	6821      	ldr	r1, [r4, #0]
 80170c0:	692a      	ldr	r2, [r5, #16]
 80170c2:	6a2c      	ldr	r4, [r5, #32]
 80170c4:	f8d1 51e8 	ldr.w	r5, [r1, #488]	@ 0x1e8
 80170c8:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 80170cc:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 80170d0:	f8d1 01e4 	ldr.w	r0, [r1, #484]	@ 0x1e4
 80170d4:	f8d1 51dc 	ldr.w	r5, [r1, #476]	@ 0x1dc
 80170d8:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 80170dc:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80170e0:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 80170e4:	1a64      	subs	r4, r4, r1
 80170e6:	fab4 f484 	clz	r4, r4
 80170ea:	0964      	lsrs	r4, r4, #5
 80170ec:	7034      	strb	r4, [r6, #0]
 80170ee:	1d0c      	adds	r4, r1, #4
 80170f0:	1b1b      	subs	r3, r3, r4
 80170f2:	fab3 f383 	clz	r3, r3
 80170f6:	095b      	lsrs	r3, r3, #5
 80170f8:	f101 0408 	add.w	r4, r1, #8
 80170fc:	703b      	strb	r3, [r7, #0]
 80170fe:	f101 0314 	add.w	r3, r1, #20
 8017102:	1b01      	subs	r1, r0, r4
 8017104:	1ad3      	subs	r3, r2, r3
 8017106:	fab1 f181 	clz	r1, r1
 801710a:	9a06      	ldr	r2, [sp, #24]
 801710c:	0949      	lsrs	r1, r1, #5
 801710e:	7011      	strb	r1, [r2, #0]
 8017110:	fab3 f383 	clz	r3, r3
 8017114:	9a07      	ldr	r2, [sp, #28]
 8017116:	095b      	lsrs	r3, r3, #5
 8017118:	2000      	movs	r0, #0
 801711a:	7013      	strb	r3, [r2, #0]
 801711c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801711e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8017122:	4770      	bx	lr
 8017124:	200b      	movs	r0, #11
 8017126:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08017128 <_execute_event_handler>:
 8017128:	2002      	movs	r0, #2
 801712a:	4770      	bx	lr

0801712c <_cancel_goal_event_handler>:
 801712c:	2003      	movs	r0, #3
 801712e:	4770      	bx	lr

08017130 <_succeed_event_handler>:
 8017130:	2004      	movs	r0, #4
 8017132:	4770      	bx	lr

08017134 <_abort_event_handler>:
 8017134:	2006      	movs	r0, #6
 8017136:	4770      	bx	lr

08017138 <_canceled_event_handler>:
 8017138:	2005      	movs	r0, #5
 801713a:	4770      	bx	lr

0801713c <rcl_action_transition_goal_state>:
 801713c:	fa5f fc80 	uxtb.w	ip, r0
 8017140:	f1bc 0f06 	cmp.w	ip, #6
 8017144:	d80c      	bhi.n	8017160 <rcl_action_transition_goal_state+0x24>
 8017146:	2904      	cmp	r1, #4
 8017148:	d80a      	bhi.n	8017160 <rcl_action_transition_goal_state+0x24>
 801714a:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 801714e:	b410      	push	{r4}
 8017150:	440b      	add	r3, r1
 8017152:	4c06      	ldr	r4, [pc, #24]	@ (801716c <rcl_action_transition_goal_state+0x30>)
 8017154:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8017158:	b123      	cbz	r3, 8017164 <rcl_action_transition_goal_state+0x28>
 801715a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801715e:	4718      	bx	r3
 8017160:	2000      	movs	r0, #0
 8017162:	4770      	bx	lr
 8017164:	2000      	movs	r0, #0
 8017166:	f85d 4b04 	ldr.w	r4, [sp], #4
 801716a:	4770      	bx	lr
 801716c:	0802024c 	.word	0x0802024c

08017170 <rcl_action_get_zero_initialized_cancel_response>:
 8017170:	b510      	push	{r4, lr}
 8017172:	4c07      	ldr	r4, [pc, #28]	@ (8017190 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 8017174:	4686      	mov	lr, r0
 8017176:	4684      	mov	ip, r0
 8017178:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801717a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801717e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017180:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017184:	6823      	ldr	r3, [r4, #0]
 8017186:	f8cc 3000 	str.w	r3, [ip]
 801718a:	4670      	mov	r0, lr
 801718c:	bd10      	pop	{r4, pc}
 801718e:	bf00      	nop
 8017190:	080202d8 	.word	0x080202d8

08017194 <rclc_action_send_result_request>:
 8017194:	b1d0      	cbz	r0, 80171cc <rclc_action_send_result_request+0x38>
 8017196:	b500      	push	{lr}
 8017198:	4684      	mov	ip, r0
 801719a:	b087      	sub	sp, #28
 801719c:	f8d0 0009 	ldr.w	r0, [r0, #9]
 80171a0:	f8dc 100d 	ldr.w	r1, [ip, #13]
 80171a4:	f8dc 2011 	ldr.w	r2, [ip, #17]
 80171a8:	f8dc 3015 	ldr.w	r3, [ip, #21]
 80171ac:	f10d 0e08 	add.w	lr, sp, #8
 80171b0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80171b4:	f8dc 0004 	ldr.w	r0, [ip, #4]
 80171b8:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 80171bc:	a902      	add	r1, sp, #8
 80171be:	3010      	adds	r0, #16
 80171c0:	f7ff fbfa 	bl	80169b8 <rcl_action_send_result_request>
 80171c4:	b920      	cbnz	r0, 80171d0 <rclc_action_send_result_request+0x3c>
 80171c6:	b007      	add	sp, #28
 80171c8:	f85d fb04 	ldr.w	pc, [sp], #4
 80171cc:	200b      	movs	r0, #11
 80171ce:	4770      	bx	lr
 80171d0:	9001      	str	r0, [sp, #4]
 80171d2:	f7f6 f869 	bl	800d2a8 <rcutils_reset_error>
 80171d6:	9801      	ldr	r0, [sp, #4]
 80171d8:	b007      	add	sp, #28
 80171da:	f85d fb04 	ldr.w	pc, [sp], #4
 80171de:	bf00      	nop

080171e0 <rclc_action_take_goal_handle>:
 80171e0:	4603      	mov	r3, r0
 80171e2:	b158      	cbz	r0, 80171fc <rclc_action_take_goal_handle+0x1c>
 80171e4:	6880      	ldr	r0, [r0, #8]
 80171e6:	b148      	cbz	r0, 80171fc <rclc_action_take_goal_handle+0x1c>
 80171e8:	6801      	ldr	r1, [r0, #0]
 80171ea:	6099      	str	r1, [r3, #8]
 80171ec:	2200      	movs	r2, #0
 80171ee:	7202      	strb	r2, [r0, #8]
 80171f0:	68d9      	ldr	r1, [r3, #12]
 80171f2:	6001      	str	r1, [r0, #0]
 80171f4:	6202      	str	r2, [r0, #32]
 80171f6:	8482      	strh	r2, [r0, #36]	@ 0x24
 80171f8:	60d8      	str	r0, [r3, #12]
 80171fa:	4770      	bx	lr
 80171fc:	4770      	bx	lr
 80171fe:	bf00      	nop

08017200 <rclc_action_remove_used_goal_handle>:
 8017200:	b180      	cbz	r0, 8017224 <rclc_action_remove_used_goal_handle+0x24>
 8017202:	b179      	cbz	r1, 8017224 <rclc_action_remove_used_goal_handle+0x24>
 8017204:	68c3      	ldr	r3, [r0, #12]
 8017206:	4299      	cmp	r1, r3
 8017208:	d00d      	beq.n	8017226 <rclc_action_remove_used_goal_handle+0x26>
 801720a:	b12b      	cbz	r3, 8017218 <rclc_action_remove_used_goal_handle+0x18>
 801720c:	681a      	ldr	r2, [r3, #0]
 801720e:	4291      	cmp	r1, r2
 8017210:	d003      	beq.n	801721a <rclc_action_remove_used_goal_handle+0x1a>
 8017212:	4613      	mov	r3, r2
 8017214:	2b00      	cmp	r3, #0
 8017216:	d1f9      	bne.n	801720c <rclc_action_remove_used_goal_handle+0xc>
 8017218:	4770      	bx	lr
 801721a:	680a      	ldr	r2, [r1, #0]
 801721c:	601a      	str	r2, [r3, #0]
 801721e:	6883      	ldr	r3, [r0, #8]
 8017220:	600b      	str	r3, [r1, #0]
 8017222:	6081      	str	r1, [r0, #8]
 8017224:	4770      	bx	lr
 8017226:	680b      	ldr	r3, [r1, #0]
 8017228:	60c3      	str	r3, [r0, #12]
 801722a:	e7f8      	b.n	801721e <rclc_action_remove_used_goal_handle+0x1e>

0801722c <rclc_action_find_goal_handle_by_uuid>:
 801722c:	b538      	push	{r3, r4, r5, lr}
 801722e:	b180      	cbz	r0, 8017252 <rclc_action_find_goal_handle_by_uuid+0x26>
 8017230:	460d      	mov	r5, r1
 8017232:	b181      	cbz	r1, 8017256 <rclc_action_find_goal_handle_by_uuid+0x2a>
 8017234:	68c4      	ldr	r4, [r0, #12]
 8017236:	b914      	cbnz	r4, 801723e <rclc_action_find_goal_handle_by_uuid+0x12>
 8017238:	e009      	b.n	801724e <rclc_action_find_goal_handle_by_uuid+0x22>
 801723a:	6824      	ldr	r4, [r4, #0]
 801723c:	b13c      	cbz	r4, 801724e <rclc_action_find_goal_handle_by_uuid+0x22>
 801723e:	2210      	movs	r2, #16
 8017240:	4629      	mov	r1, r5
 8017242:	f104 0009 	add.w	r0, r4, #9
 8017246:	f006 f8f9 	bl	801d43c <memcmp>
 801724a:	2800      	cmp	r0, #0
 801724c:	d1f5      	bne.n	801723a <rclc_action_find_goal_handle_by_uuid+0xe>
 801724e:	4620      	mov	r0, r4
 8017250:	bd38      	pop	{r3, r4, r5, pc}
 8017252:	4604      	mov	r4, r0
 8017254:	e7fb      	b.n	801724e <rclc_action_find_goal_handle_by_uuid+0x22>
 8017256:	460c      	mov	r4, r1
 8017258:	e7f9      	b.n	801724e <rclc_action_find_goal_handle_by_uuid+0x22>
 801725a:	bf00      	nop

0801725c <rclc_action_find_first_handle_by_status>:
 801725c:	b140      	cbz	r0, 8017270 <rclc_action_find_first_handle_by_status+0x14>
 801725e:	68c0      	ldr	r0, [r0, #12]
 8017260:	b910      	cbnz	r0, 8017268 <rclc_action_find_first_handle_by_status+0xc>
 8017262:	e005      	b.n	8017270 <rclc_action_find_first_handle_by_status+0x14>
 8017264:	6800      	ldr	r0, [r0, #0]
 8017266:	b118      	cbz	r0, 8017270 <rclc_action_find_first_handle_by_status+0x14>
 8017268:	f990 3008 	ldrsb.w	r3, [r0, #8]
 801726c:	428b      	cmp	r3, r1
 801726e:	d1f9      	bne.n	8017264 <rclc_action_find_first_handle_by_status+0x8>
 8017270:	4770      	bx	lr
 8017272:	bf00      	nop

08017274 <rclc_action_find_first_terminated_handle>:
 8017274:	b140      	cbz	r0, 8017288 <rclc_action_find_first_terminated_handle+0x14>
 8017276:	68c0      	ldr	r0, [r0, #12]
 8017278:	b910      	cbnz	r0, 8017280 <rclc_action_find_first_terminated_handle+0xc>
 801727a:	e005      	b.n	8017288 <rclc_action_find_first_terminated_handle+0x14>
 801727c:	6800      	ldr	r0, [r0, #0]
 801727e:	b118      	cbz	r0, 8017288 <rclc_action_find_first_terminated_handle+0x14>
 8017280:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8017284:	2b03      	cmp	r3, #3
 8017286:	ddf9      	ble.n	801727c <rclc_action_find_first_terminated_handle+0x8>
 8017288:	4770      	bx	lr
 801728a:	bf00      	nop

0801728c <rclc_action_find_handle_by_goal_request_sequence_number>:
 801728c:	b170      	cbz	r0, 80172ac <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 801728e:	68c0      	ldr	r0, [r0, #12]
 8017290:	b160      	cbz	r0, 80172ac <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8017292:	b410      	push	{r4}
 8017294:	e001      	b.n	801729a <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 8017296:	6800      	ldr	r0, [r0, #0]
 8017298:	b128      	cbz	r0, 80172a6 <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 801729a:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 801729e:	4299      	cmp	r1, r3
 80172a0:	bf08      	it	eq
 80172a2:	4294      	cmpeq	r4, r2
 80172a4:	d1f7      	bne.n	8017296 <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 80172a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80172aa:	4770      	bx	lr
 80172ac:	4770      	bx	lr
 80172ae:	bf00      	nop

080172b0 <rclc_action_find_handle_by_result_request_sequence_number>:
 80172b0:	b170      	cbz	r0, 80172d0 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 80172b2:	68c0      	ldr	r0, [r0, #12]
 80172b4:	b160      	cbz	r0, 80172d0 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 80172b6:	b410      	push	{r4}
 80172b8:	e001      	b.n	80172be <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 80172ba:	6800      	ldr	r0, [r0, #0]
 80172bc:	b128      	cbz	r0, 80172ca <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 80172be:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 80172c2:	4299      	cmp	r1, r3
 80172c4:	bf08      	it	eq
 80172c6:	4294      	cmpeq	r4, r2
 80172c8:	d1f7      	bne.n	80172ba <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 80172ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80172ce:	4770      	bx	lr
 80172d0:	4770      	bx	lr
 80172d2:	bf00      	nop

080172d4 <rclc_action_find_handle_by_cancel_request_sequence_number>:
 80172d4:	b170      	cbz	r0, 80172f4 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 80172d6:	68c0      	ldr	r0, [r0, #12]
 80172d8:	b160      	cbz	r0, 80172f4 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 80172da:	b410      	push	{r4}
 80172dc:	e001      	b.n	80172e2 <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 80172de:	6800      	ldr	r0, [r0, #0]
 80172e0:	b128      	cbz	r0, 80172ee <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 80172e2:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 80172e6:	4299      	cmp	r1, r3
 80172e8:	bf08      	it	eq
 80172ea:	4294      	cmpeq	r4, r2
 80172ec:	d1f7      	bne.n	80172de <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 80172ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80172f2:	4770      	bx	lr
 80172f4:	4770      	bx	lr
 80172f6:	bf00      	nop

080172f8 <rclc_action_find_first_handle_with_goal_response>:
 80172f8:	b140      	cbz	r0, 801730c <rclc_action_find_first_handle_with_goal_response+0x14>
 80172fa:	68c0      	ldr	r0, [r0, #12]
 80172fc:	b910      	cbnz	r0, 8017304 <rclc_action_find_first_handle_with_goal_response+0xc>
 80172fe:	e005      	b.n	801730c <rclc_action_find_first_handle_with_goal_response+0x14>
 8017300:	6800      	ldr	r0, [r0, #0]
 8017302:	b118      	cbz	r0, 801730c <rclc_action_find_first_handle_with_goal_response+0x14>
 8017304:	f890 3020 	ldrb.w	r3, [r0, #32]
 8017308:	2b00      	cmp	r3, #0
 801730a:	d0f9      	beq.n	8017300 <rclc_action_find_first_handle_with_goal_response+0x8>
 801730c:	4770      	bx	lr
 801730e:	bf00      	nop

08017310 <rclc_action_find_first_handle_with_result_response>:
 8017310:	b140      	cbz	r0, 8017324 <rclc_action_find_first_handle_with_result_response+0x14>
 8017312:	68c0      	ldr	r0, [r0, #12]
 8017314:	b910      	cbnz	r0, 801731c <rclc_action_find_first_handle_with_result_response+0xc>
 8017316:	e005      	b.n	8017324 <rclc_action_find_first_handle_with_result_response+0x14>
 8017318:	6800      	ldr	r0, [r0, #0]
 801731a:	b118      	cbz	r0, 8017324 <rclc_action_find_first_handle_with_result_response+0x14>
 801731c:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 8017320:	2b00      	cmp	r3, #0
 8017322:	d0f9      	beq.n	8017318 <rclc_action_find_first_handle_with_result_response+0x8>
 8017324:	4770      	bx	lr
 8017326:	bf00      	nop

08017328 <rclc_action_server_response_goal_request>:
 8017328:	b198      	cbz	r0, 8017352 <rclc_action_server_response_goal_request+0x2a>
 801732a:	b510      	push	{r4, lr}
 801732c:	6844      	ldr	r4, [r0, #4]
 801732e:	b086      	sub	sp, #24
 8017330:	2200      	movs	r2, #0
 8017332:	e9cd 2203 	strd	r2, r2, [sp, #12]
 8017336:	460b      	mov	r3, r1
 8017338:	9205      	str	r2, [sp, #20]
 801733a:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 801733e:	aa03      	add	r2, sp, #12
 8017340:	f104 0010 	add.w	r0, r4, #16
 8017344:	f88d 300c 	strb.w	r3, [sp, #12]
 8017348:	f7ff fd52 	bl	8016df0 <rcl_action_send_goal_response>
 801734c:	b918      	cbnz	r0, 8017356 <rclc_action_server_response_goal_request+0x2e>
 801734e:	b006      	add	sp, #24
 8017350:	bd10      	pop	{r4, pc}
 8017352:	200b      	movs	r0, #11
 8017354:	4770      	bx	lr
 8017356:	9001      	str	r0, [sp, #4]
 8017358:	f7f5 ffa6 	bl	800d2a8 <rcutils_reset_error>
 801735c:	9801      	ldr	r0, [sp, #4]
 801735e:	b006      	add	sp, #24
 8017360:	bd10      	pop	{r4, pc}
 8017362:	bf00      	nop
 8017364:	0000      	movs	r0, r0
	...

08017368 <rclc_action_server_goal_cancel_accept>:
 8017368:	b310      	cbz	r0, 80173b0 <rclc_action_server_goal_cancel_accept+0x48>
 801736a:	b510      	push	{r4, lr}
 801736c:	b090      	sub	sp, #64	@ 0x40
 801736e:	4604      	mov	r4, r0
 8017370:	a806      	add	r0, sp, #24
 8017372:	f7ff fefd 	bl	8017170 <rcl_action_get_zero_initialized_cancel_response>
 8017376:	2300      	movs	r3, #0
 8017378:	f8d4 0009 	ldr.w	r0, [r4, #9]
 801737c:	f8d4 100d 	ldr.w	r1, [r4, #13]
 8017380:	f8d4 2011 	ldr.w	r2, [r4, #17]
 8017384:	f88d 3018 	strb.w	r3, [sp, #24]
 8017388:	f8d4 3015 	ldr.w	r3, [r4, #21]
 801738c:	f8cd d01c 	str.w	sp, [sp, #28]
 8017390:	46ec      	mov	ip, sp
 8017392:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017396:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 80173b8 <rclc_action_server_goal_cancel_accept+0x50>
 801739a:	6860      	ldr	r0, [r4, #4]
 801739c:	aa06      	add	r2, sp, #24
 801739e:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 80173a2:	3010      	adds	r0, #16
 80173a4:	ed8d 7b08 	vstr	d7, [sp, #32]
 80173a8:	f7ff fdd2 	bl	8016f50 <rcl_action_send_cancel_response>
 80173ac:	b010      	add	sp, #64	@ 0x40
 80173ae:	bd10      	pop	{r4, pc}
 80173b0:	200b      	movs	r0, #11
 80173b2:	4770      	bx	lr
 80173b4:	f3af 8000 	nop.w
 80173b8:	00000001 	.word	0x00000001
 80173bc:	00000001 	.word	0x00000001

080173c0 <rclc_action_server_goal_cancel_reject>:
 80173c0:	b082      	sub	sp, #8
 80173c2:	b530      	push	{r4, r5, lr}
 80173c4:	b08b      	sub	sp, #44	@ 0x2c
 80173c6:	ac0e      	add	r4, sp, #56	@ 0x38
 80173c8:	e884 000c 	stmia.w	r4, {r2, r3}
 80173cc:	b188      	cbz	r0, 80173f2 <rclc_action_server_goal_cancel_reject+0x32>
 80173ce:	4604      	mov	r4, r0
 80173d0:	a801      	add	r0, sp, #4
 80173d2:	460d      	mov	r5, r1
 80173d4:	f7ff fecc 	bl	8017170 <rcl_action_get_zero_initialized_cancel_response>
 80173d8:	aa01      	add	r2, sp, #4
 80173da:	a90e      	add	r1, sp, #56	@ 0x38
 80173dc:	f104 0010 	add.w	r0, r4, #16
 80173e0:	f88d 5004 	strb.w	r5, [sp, #4]
 80173e4:	f7ff fdb4 	bl	8016f50 <rcl_action_send_cancel_response>
 80173e8:	b00b      	add	sp, #44	@ 0x2c
 80173ea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80173ee:	b002      	add	sp, #8
 80173f0:	4770      	bx	lr
 80173f2:	200b      	movs	r0, #11
 80173f4:	b00b      	add	sp, #44	@ 0x2c
 80173f6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80173fa:	b002      	add	sp, #8
 80173fc:	4770      	bx	lr
 80173fe:	bf00      	nop

08017400 <__atomic_load_8>:
 8017400:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8017404:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8017408:	4a15      	ldr	r2, [pc, #84]	@ (8017460 <__atomic_load_8+0x60>)
 801740a:	4b16      	ldr	r3, [pc, #88]	@ (8017464 <__atomic_load_8+0x64>)
 801740c:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8017410:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8017414:	fb02 f101 	mul.w	r1, r2, r1
 8017418:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 801741c:	fba3 2301 	umull	r2, r3, r3, r1
 8017420:	091b      	lsrs	r3, r3, #4
 8017422:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8017426:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 801742a:	b4f0      	push	{r4, r5, r6, r7}
 801742c:	4d0e      	ldr	r5, [pc, #56]	@ (8017468 <__atomic_load_8+0x68>)
 801742e:	1ac9      	subs	r1, r1, r3
 8017430:	194a      	adds	r2, r1, r5
 8017432:	f04f 0c01 	mov.w	ip, #1
 8017436:	e8d2 3f4f 	ldrexb	r3, [r2]
 801743a:	e8c2 cf44 	strexb	r4, ip, [r2]
 801743e:	2c00      	cmp	r4, #0
 8017440:	d1f9      	bne.n	8017436 <__atomic_load_8+0x36>
 8017442:	f3bf 8f5b 	dmb	ish
 8017446:	b2dc      	uxtb	r4, r3
 8017448:	2c00      	cmp	r4, #0
 801744a:	d1f4      	bne.n	8017436 <__atomic_load_8+0x36>
 801744c:	e9d0 6700 	ldrd	r6, r7, [r0]
 8017450:	f3bf 8f5b 	dmb	ish
 8017454:	546b      	strb	r3, [r5, r1]
 8017456:	4630      	mov	r0, r6
 8017458:	4639      	mov	r1, r7
 801745a:	bcf0      	pop	{r4, r5, r6, r7}
 801745c:	4770      	bx	lr
 801745e:	bf00      	nop
 8017460:	27d4eb2d 	.word	0x27d4eb2d
 8017464:	b21642c9 	.word	0xb21642c9
 8017468:	20019628 	.word	0x20019628

0801746c <__atomic_store_8>:
 801746c:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8017470:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8017474:	b570      	push	{r4, r5, r6, lr}
 8017476:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 801747a:	4c14      	ldr	r4, [pc, #80]	@ (80174cc <__atomic_store_8+0x60>)
 801747c:	4e14      	ldr	r6, [pc, #80]	@ (80174d0 <__atomic_store_8+0x64>)
 801747e:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8017482:	fb04 f101 	mul.w	r1, r4, r1
 8017486:	4c13      	ldr	r4, [pc, #76]	@ (80174d4 <__atomic_store_8+0x68>)
 8017488:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 801748c:	fba4 5401 	umull	r5, r4, r4, r1
 8017490:	0924      	lsrs	r4, r4, #4
 8017492:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8017496:	ebc4 04c5 	rsb	r4, r4, r5, lsl #3
 801749a:	eba1 0e04 	sub.w	lr, r1, r4
 801749e:	f04f 0501 	mov.w	r5, #1
 80174a2:	eb0e 0c06 	add.w	ip, lr, r6
 80174a6:	e8dc 1f4f 	ldrexb	r1, [ip]
 80174aa:	e8cc 5f44 	strexb	r4, r5, [ip]
 80174ae:	2c00      	cmp	r4, #0
 80174b0:	d1f9      	bne.n	80174a6 <__atomic_store_8+0x3a>
 80174b2:	f3bf 8f5b 	dmb	ish
 80174b6:	b2cc      	uxtb	r4, r1
 80174b8:	2c00      	cmp	r4, #0
 80174ba:	d1f4      	bne.n	80174a6 <__atomic_store_8+0x3a>
 80174bc:	e9c0 2300 	strd	r2, r3, [r0]
 80174c0:	f3bf 8f5b 	dmb	ish
 80174c4:	f806 100e 	strb.w	r1, [r6, lr]
 80174c8:	bd70      	pop	{r4, r5, r6, pc}
 80174ca:	bf00      	nop
 80174cc:	27d4eb2d 	.word	0x27d4eb2d
 80174d0:	20019628 	.word	0x20019628
 80174d4:	b21642c9 	.word	0xb21642c9

080174d8 <__atomic_exchange_8>:
 80174d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80174da:	ea80 4e10 	eor.w	lr, r0, r0, lsr #16
 80174de:	f08e 0e3d 	eor.w	lr, lr, #61	@ 0x3d
 80174e2:	4917      	ldr	r1, [pc, #92]	@ (8017540 <__atomic_exchange_8+0x68>)
 80174e4:	4f17      	ldr	r7, [pc, #92]	@ (8017544 <__atomic_exchange_8+0x6c>)
 80174e6:	eb0e 0ece 	add.w	lr, lr, lr, lsl #3
 80174ea:	ea8e 1e1e 	eor.w	lr, lr, lr, lsr #4
 80174ee:	fb01 fe0e 	mul.w	lr, r1, lr
 80174f2:	4915      	ldr	r1, [pc, #84]	@ (8017548 <__atomic_exchange_8+0x70>)
 80174f4:	ea8e 3ede 	eor.w	lr, lr, lr, lsr #15
 80174f8:	4606      	mov	r6, r0
 80174fa:	fba1 010e 	umull	r0, r1, r1, lr
 80174fe:	0909      	lsrs	r1, r1, #4
 8017500:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 8017504:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
 8017508:	ebae 0e01 	sub.w	lr, lr, r1
 801750c:	f04f 0501 	mov.w	r5, #1
 8017510:	eb0e 0107 	add.w	r1, lr, r7
 8017514:	e8d1 cf4f 	ldrexb	ip, [r1]
 8017518:	e8c1 5f40 	strexb	r0, r5, [r1]
 801751c:	2800      	cmp	r0, #0
 801751e:	d1f9      	bne.n	8017514 <__atomic_exchange_8+0x3c>
 8017520:	f3bf 8f5b 	dmb	ish
 8017524:	fa5f f48c 	uxtb.w	r4, ip
 8017528:	2c00      	cmp	r4, #0
 801752a:	d1f3      	bne.n	8017514 <__atomic_exchange_8+0x3c>
 801752c:	e9d6 0100 	ldrd	r0, r1, [r6]
 8017530:	e9c6 2300 	strd	r2, r3, [r6]
 8017534:	f3bf 8f5b 	dmb	ish
 8017538:	f807 c00e 	strb.w	ip, [r7, lr]
 801753c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801753e:	bf00      	nop
 8017540:	27d4eb2d 	.word	0x27d4eb2d
 8017544:	20019628 	.word	0x20019628
 8017548:	b21642c9 	.word	0xb21642c9

0801754c <rcutils_get_env>:
 801754c:	b150      	cbz	r0, 8017564 <rcutils_get_env+0x18>
 801754e:	b510      	push	{r4, lr}
 8017550:	460c      	mov	r4, r1
 8017552:	b909      	cbnz	r1, 8017558 <rcutils_get_env+0xc>
 8017554:	4806      	ldr	r0, [pc, #24]	@ (8017570 <rcutils_get_env+0x24>)
 8017556:	bd10      	pop	{r4, pc}
 8017558:	f005 fb52 	bl	801cc00 <getenv>
 801755c:	b120      	cbz	r0, 8017568 <rcutils_get_env+0x1c>
 801755e:	6020      	str	r0, [r4, #0]
 8017560:	2000      	movs	r0, #0
 8017562:	bd10      	pop	{r4, pc}
 8017564:	4803      	ldr	r0, [pc, #12]	@ (8017574 <rcutils_get_env+0x28>)
 8017566:	4770      	bx	lr
 8017568:	4b03      	ldr	r3, [pc, #12]	@ (8017578 <rcutils_get_env+0x2c>)
 801756a:	6023      	str	r3, [r4, #0]
 801756c:	e7f8      	b.n	8017560 <rcutils_get_env+0x14>
 801756e:	bf00      	nop
 8017570:	0801f460 	.word	0x0801f460
 8017574:	0801f444 	.word	0x0801f444
 8017578:	0801f920 	.word	0x0801f920

0801757c <rcutils_format_string_limit>:
 801757c:	b40f      	push	{r0, r1, r2, r3}
 801757e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017580:	b083      	sub	sp, #12
 8017582:	ac08      	add	r4, sp, #32
 8017584:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8017586:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801758a:	b376      	cbz	r6, 80175ea <rcutils_format_string_limit+0x6e>
 801758c:	4620      	mov	r0, r4
 801758e:	f7f5 fe65 	bl	800d25c <rcutils_allocator_is_valid>
 8017592:	b350      	cbz	r0, 80175ea <rcutils_format_string_limit+0x6e>
 8017594:	2100      	movs	r1, #0
 8017596:	ab0f      	add	r3, sp, #60	@ 0x3c
 8017598:	4632      	mov	r2, r6
 801759a:	4608      	mov	r0, r1
 801759c:	e9cd 3300 	strd	r3, r3, [sp]
 80175a0:	f000 f8f8 	bl	8017794 <rcutils_vsnprintf>
 80175a4:	1c43      	adds	r3, r0, #1
 80175a6:	4605      	mov	r5, r0
 80175a8:	d01f      	beq.n	80175ea <rcutils_format_string_limit+0x6e>
 80175aa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80175ac:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80175ae:	1c47      	adds	r7, r0, #1
 80175b0:	429f      	cmp	r7, r3
 80175b2:	bf84      	itt	hi
 80175b4:	461f      	movhi	r7, r3
 80175b6:	f103 35ff 	addhi.w	r5, r3, #4294967295	@ 0xffffffff
 80175ba:	4638      	mov	r0, r7
 80175bc:	9b08      	ldr	r3, [sp, #32]
 80175be:	4798      	blx	r3
 80175c0:	4604      	mov	r4, r0
 80175c2:	b190      	cbz	r0, 80175ea <rcutils_format_string_limit+0x6e>
 80175c4:	9b01      	ldr	r3, [sp, #4]
 80175c6:	4632      	mov	r2, r6
 80175c8:	4639      	mov	r1, r7
 80175ca:	f000 f8e3 	bl	8017794 <rcutils_vsnprintf>
 80175ce:	2800      	cmp	r0, #0
 80175d0:	db07      	blt.n	80175e2 <rcutils_format_string_limit+0x66>
 80175d2:	2300      	movs	r3, #0
 80175d4:	5563      	strb	r3, [r4, r5]
 80175d6:	4620      	mov	r0, r4
 80175d8:	b003      	add	sp, #12
 80175da:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80175de:	b004      	add	sp, #16
 80175e0:	4770      	bx	lr
 80175e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80175e4:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80175e6:	4620      	mov	r0, r4
 80175e8:	4798      	blx	r3
 80175ea:	2400      	movs	r4, #0
 80175ec:	e7f3      	b.n	80175d6 <rcutils_format_string_limit+0x5a>
 80175ee:	bf00      	nop

080175f0 <rcutils_repl_str>:
 80175f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80175f4:	4699      	mov	r9, r3
 80175f6:	b089      	sub	sp, #36	@ 0x24
 80175f8:	4603      	mov	r3, r0
 80175fa:	4648      	mov	r0, r9
 80175fc:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8017600:	4698      	mov	r8, r3
 8017602:	9300      	str	r3, [sp, #0]
 8017604:	460c      	mov	r4, r1
 8017606:	f7f5 fe29 	bl	800d25c <rcutils_allocator_is_valid>
 801760a:	2800      	cmp	r0, #0
 801760c:	f000 80a3 	beq.w	8017756 <rcutils_repl_str+0x166>
 8017610:	4620      	mov	r0, r4
 8017612:	f7e8 fe55 	bl	80002c0 <strlen>
 8017616:	f04f 0a00 	mov.w	sl, #0
 801761a:	f8d9 b010 	ldr.w	fp, [r9, #16]
 801761e:	9001      	str	r0, [sp, #4]
 8017620:	4657      	mov	r7, sl
 8017622:	4655      	mov	r5, sl
 8017624:	2610      	movs	r6, #16
 8017626:	e01e      	b.n	8017666 <rcutils_repl_str+0x76>
 8017628:	3501      	adds	r5, #1
 801762a:	45aa      	cmp	sl, r5
 801762c:	d212      	bcs.n	8017654 <rcutils_repl_str+0x64>
 801762e:	44b2      	add	sl, r6
 8017630:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8017634:	ea4f 018a 	mov.w	r1, sl, lsl #2
 8017638:	4798      	blx	r3
 801763a:	2800      	cmp	r0, #0
 801763c:	f000 8088 	beq.w	8017750 <rcutils_repl_str+0x160>
 8017640:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8017644:	f5b6 1f80 	cmp.w	r6, #1048576	@ 0x100000
 8017648:	f8d9 b010 	ldr.w	fp, [r9, #16]
 801764c:	4607      	mov	r7, r0
 801764e:	bf28      	it	cs
 8017650:	f44f 1680 	movcs.w	r6, #1048576	@ 0x100000
 8017654:	9a00      	ldr	r2, [sp, #0]
 8017656:	eb07 0385 	add.w	r3, r7, r5, lsl #2
 801765a:	1aa2      	subs	r2, r4, r2
 801765c:	f843 2c04 	str.w	r2, [r3, #-4]
 8017660:	9b01      	ldr	r3, [sp, #4]
 8017662:	eb04 0803 	add.w	r8, r4, r3
 8017666:	9902      	ldr	r1, [sp, #8]
 8017668:	4640      	mov	r0, r8
 801766a:	f005 ff4b 	bl	801d504 <strstr>
 801766e:	4604      	mov	r4, r0
 8017670:	465a      	mov	r2, fp
 8017672:	4638      	mov	r0, r7
 8017674:	2c00      	cmp	r4, #0
 8017676:	d1d7      	bne.n	8017628 <rcutils_repl_str+0x38>
 8017678:	4640      	mov	r0, r8
 801767a:	f7e8 fe21 	bl	80002c0 <strlen>
 801767e:	9b00      	ldr	r3, [sp, #0]
 8017680:	eba8 0803 	sub.w	r8, r8, r3
 8017684:	eb08 0300 	add.w	r3, r8, r0
 8017688:	9304      	str	r3, [sp, #16]
 801768a:	f8d9 8000 	ldr.w	r8, [r9]
 801768e:	2d00      	cmp	r5, #0
 8017690:	d03f      	beq.n	8017712 <rcutils_repl_str+0x122>
 8017692:	9803      	ldr	r0, [sp, #12]
 8017694:	f7e8 fe14 	bl	80002c0 <strlen>
 8017698:	4606      	mov	r6, r0
 801769a:	9801      	ldr	r0, [sp, #4]
 801769c:	9a04      	ldr	r2, [sp, #16]
 801769e:	1a33      	subs	r3, r6, r0
 80176a0:	fb05 2a03 	mla	sl, r5, r3, r2
 80176a4:	4659      	mov	r1, fp
 80176a6:	f10a 0001 	add.w	r0, sl, #1
 80176aa:	47c0      	blx	r8
 80176ac:	4683      	mov	fp, r0
 80176ae:	2800      	cmp	r0, #0
 80176b0:	d04e      	beq.n	8017750 <rcutils_repl_str+0x160>
 80176b2:	683a      	ldr	r2, [r7, #0]
 80176b4:	9900      	ldr	r1, [sp, #0]
 80176b6:	f005 ff80 	bl	801d5ba <memcpy>
 80176ba:	683b      	ldr	r3, [r7, #0]
 80176bc:	9706      	str	r7, [sp, #24]
 80176be:	1e6a      	subs	r2, r5, #1
 80176c0:	445b      	add	r3, fp
 80176c2:	46a8      	mov	r8, r5
 80176c4:	9202      	str	r2, [sp, #8]
 80176c6:	4625      	mov	r5, r4
 80176c8:	f8cd 901c 	str.w	r9, [sp, #28]
 80176cc:	461c      	mov	r4, r3
 80176ce:	9903      	ldr	r1, [sp, #12]
 80176d0:	4632      	mov	r2, r6
 80176d2:	4620      	mov	r0, r4
 80176d4:	f005 ff71 	bl	801d5ba <memcpy>
 80176d8:	9b01      	ldr	r3, [sp, #4]
 80176da:	f857 2b04 	ldr.w	r2, [r7], #4
 80176de:	eb02 0c03 	add.w	ip, r2, r3
 80176e2:	9b00      	ldr	r3, [sp, #0]
 80176e4:	eb03 010c 	add.w	r1, r3, ip
 80176e8:	9b02      	ldr	r3, [sp, #8]
 80176ea:	4434      	add	r4, r6
 80176ec:	429d      	cmp	r5, r3
 80176ee:	4620      	mov	r0, r4
 80176f0:	d022      	beq.n	8017738 <rcutils_repl_str+0x148>
 80176f2:	683a      	ldr	r2, [r7, #0]
 80176f4:	eba2 090c 	sub.w	r9, r2, ip
 80176f8:	464a      	mov	r2, r9
 80176fa:	3501      	adds	r5, #1
 80176fc:	f005 ff5d 	bl	801d5ba <memcpy>
 8017700:	45a8      	cmp	r8, r5
 8017702:	444c      	add	r4, r9
 8017704:	d1e3      	bne.n	80176ce <rcutils_repl_str+0xde>
 8017706:	2300      	movs	r3, #0
 8017708:	e9dd 7906 	ldrd	r7, r9, [sp, #24]
 801770c:	f80b 300a 	strb.w	r3, [fp, sl]
 8017710:	e008      	b.n	8017724 <rcutils_repl_str+0x134>
 8017712:	4618      	mov	r0, r3
 8017714:	4659      	mov	r1, fp
 8017716:	3001      	adds	r0, #1
 8017718:	47c0      	blx	r8
 801771a:	4683      	mov	fp, r0
 801771c:	b110      	cbz	r0, 8017724 <rcutils_repl_str+0x134>
 801771e:	9900      	ldr	r1, [sp, #0]
 8017720:	f005 ff43 	bl	801d5aa <strcpy>
 8017724:	4638      	mov	r0, r7
 8017726:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801772a:	f8d9 1010 	ldr.w	r1, [r9, #16]
 801772e:	4798      	blx	r3
 8017730:	4658      	mov	r0, fp
 8017732:	b009      	add	sp, #36	@ 0x24
 8017734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017738:	9b04      	ldr	r3, [sp, #16]
 801773a:	eba3 020c 	sub.w	r2, r3, ip
 801773e:	9205      	str	r2, [sp, #20]
 8017740:	3501      	adds	r5, #1
 8017742:	f005 ff3a 	bl	801d5ba <memcpy>
 8017746:	9a05      	ldr	r2, [sp, #20]
 8017748:	45a8      	cmp	r8, r5
 801774a:	4414      	add	r4, r2
 801774c:	d1bf      	bne.n	80176ce <rcutils_repl_str+0xde>
 801774e:	e7da      	b.n	8017706 <rcutils_repl_str+0x116>
 8017750:	f04f 0b00 	mov.w	fp, #0
 8017754:	e7e6      	b.n	8017724 <rcutils_repl_str+0x134>
 8017756:	4683      	mov	fp, r0
 8017758:	4658      	mov	r0, fp
 801775a:	b009      	add	sp, #36	@ 0x24
 801775c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017760 <rcutils_snprintf>:
 8017760:	b40c      	push	{r2, r3}
 8017762:	b530      	push	{r4, r5, lr}
 8017764:	b083      	sub	sp, #12
 8017766:	ab06      	add	r3, sp, #24
 8017768:	f853 2b04 	ldr.w	r2, [r3], #4
 801776c:	9301      	str	r3, [sp, #4]
 801776e:	b152      	cbz	r2, 8017786 <rcutils_snprintf+0x26>
 8017770:	b138      	cbz	r0, 8017782 <rcutils_snprintf+0x22>
 8017772:	b141      	cbz	r1, 8017786 <rcutils_snprintf+0x26>
 8017774:	f005 fcc6 	bl	801d104 <vsniprintf>
 8017778:	b003      	add	sp, #12
 801777a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801777e:	b002      	add	sp, #8
 8017780:	4770      	bx	lr
 8017782:	2900      	cmp	r1, #0
 8017784:	d0f6      	beq.n	8017774 <rcutils_snprintf+0x14>
 8017786:	f005 fee3 	bl	801d550 <__errno>
 801778a:	2316      	movs	r3, #22
 801778c:	6003      	str	r3, [r0, #0]
 801778e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017792:	e7f1      	b.n	8017778 <rcutils_snprintf+0x18>

08017794 <rcutils_vsnprintf>:
 8017794:	b570      	push	{r4, r5, r6, lr}
 8017796:	b13a      	cbz	r2, 80177a8 <rcutils_vsnprintf+0x14>
 8017798:	b120      	cbz	r0, 80177a4 <rcutils_vsnprintf+0x10>
 801779a:	b129      	cbz	r1, 80177a8 <rcutils_vsnprintf+0x14>
 801779c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80177a0:	f005 bcb0 	b.w	801d104 <vsniprintf>
 80177a4:	2900      	cmp	r1, #0
 80177a6:	d0f9      	beq.n	801779c <rcutils_vsnprintf+0x8>
 80177a8:	f005 fed2 	bl	801d550 <__errno>
 80177ac:	2316      	movs	r3, #22
 80177ae:	6003      	str	r3, [r0, #0]
 80177b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80177b4:	bd70      	pop	{r4, r5, r6, pc}
 80177b6:	bf00      	nop

080177b8 <rcutils_strdup>:
 80177b8:	b084      	sub	sp, #16
 80177ba:	b570      	push	{r4, r5, r6, lr}
 80177bc:	b086      	sub	sp, #24
 80177be:	f10d 0c2c 	add.w	ip, sp, #44	@ 0x2c
 80177c2:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
 80177c6:	4604      	mov	r4, r0
 80177c8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80177cc:	f10d 0e04 	add.w	lr, sp, #4
 80177d0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80177d4:	f8dc 3000 	ldr.w	r3, [ip]
 80177d8:	f8ce 3000 	str.w	r3, [lr]
 80177dc:	b304      	cbz	r4, 8017820 <rcutils_strdup+0x68>
 80177de:	a801      	add	r0, sp, #4
 80177e0:	f7f5 fd3c 	bl	800d25c <rcutils_allocator_is_valid>
 80177e4:	b1e0      	cbz	r0, 8017820 <rcutils_strdup+0x68>
 80177e6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80177ea:	2100      	movs	r1, #0
 80177ec:	4620      	mov	r0, r4
 80177ee:	f7e8 fd17 	bl	8000220 <memchr>
 80177f2:	b190      	cbz	r0, 801781a <rcutils_strdup+0x62>
 80177f4:	1b06      	subs	r6, r0, r4
 80177f6:	1c70      	adds	r0, r6, #1
 80177f8:	9b01      	ldr	r3, [sp, #4]
 80177fa:	9905      	ldr	r1, [sp, #20]
 80177fc:	4798      	blx	r3
 80177fe:	4605      	mov	r5, r0
 8017800:	b128      	cbz	r0, 801780e <rcutils_strdup+0x56>
 8017802:	4632      	mov	r2, r6
 8017804:	4621      	mov	r1, r4
 8017806:	f005 fed8 	bl	801d5ba <memcpy>
 801780a:	2300      	movs	r3, #0
 801780c:	55ab      	strb	r3, [r5, r6]
 801780e:	4628      	mov	r0, r5
 8017810:	b006      	add	sp, #24
 8017812:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017816:	b004      	add	sp, #16
 8017818:	4770      	bx	lr
 801781a:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 801781e:	e7eb      	b.n	80177f8 <rcutils_strdup+0x40>
 8017820:	2500      	movs	r5, #0
 8017822:	e7f4      	b.n	801780e <rcutils_strdup+0x56>

08017824 <rcutils_strndup>:
 8017824:	b082      	sub	sp, #8
 8017826:	b570      	push	{r4, r5, r6, lr}
 8017828:	ac04      	add	r4, sp, #16
 801782a:	e884 000c 	stmia.w	r4, {r2, r3}
 801782e:	b1e8      	cbz	r0, 801786c <rcutils_strndup+0x48>
 8017830:	4605      	mov	r5, r0
 8017832:	a804      	add	r0, sp, #16
 8017834:	460c      	mov	r4, r1
 8017836:	f7f5 fd11 	bl	800d25c <rcutils_allocator_is_valid>
 801783a:	b1b8      	cbz	r0, 801786c <rcutils_strndup+0x48>
 801783c:	4622      	mov	r2, r4
 801783e:	2100      	movs	r1, #0
 8017840:	4628      	mov	r0, r5
 8017842:	f7e8 fced 	bl	8000220 <memchr>
 8017846:	b100      	cbz	r0, 801784a <rcutils_strndup+0x26>
 8017848:	1b44      	subs	r4, r0, r5
 801784a:	9b04      	ldr	r3, [sp, #16]
 801784c:	9908      	ldr	r1, [sp, #32]
 801784e:	1c60      	adds	r0, r4, #1
 8017850:	4798      	blx	r3
 8017852:	4606      	mov	r6, r0
 8017854:	b128      	cbz	r0, 8017862 <rcutils_strndup+0x3e>
 8017856:	4622      	mov	r2, r4
 8017858:	4629      	mov	r1, r5
 801785a:	f005 feae 	bl	801d5ba <memcpy>
 801785e:	2300      	movs	r3, #0
 8017860:	5533      	strb	r3, [r6, r4]
 8017862:	4630      	mov	r0, r6
 8017864:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017868:	b002      	add	sp, #8
 801786a:	4770      	bx	lr
 801786c:	2600      	movs	r6, #0
 801786e:	4630      	mov	r0, r6
 8017870:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017874:	b002      	add	sp, #8
 8017876:	4770      	bx	lr

08017878 <rcutils_get_zero_initialized_string_map>:
 8017878:	4b01      	ldr	r3, [pc, #4]	@ (8017880 <rcutils_get_zero_initialized_string_map+0x8>)
 801787a:	2000      	movs	r0, #0
 801787c:	6018      	str	r0, [r3, #0]
 801787e:	4770      	bx	lr
 8017880:	20019640 	.word	0x20019640

08017884 <rcutils_string_map_reserve>:
 8017884:	2800      	cmp	r0, #0
 8017886:	d04e      	beq.n	8017926 <rcutils_string_map_reserve+0xa2>
 8017888:	b530      	push	{r4, r5, lr}
 801788a:	6803      	ldr	r3, [r0, #0]
 801788c:	b087      	sub	sp, #28
 801788e:	4604      	mov	r4, r0
 8017890:	2b00      	cmp	r3, #0
 8017892:	d043      	beq.n	801791c <rcutils_string_map_reserve+0x98>
 8017894:	f103 0c0c 	add.w	ip, r3, #12
 8017898:	460d      	mov	r5, r1
 801789a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801789e:	f10d 0e04 	add.w	lr, sp, #4
 80178a2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80178a6:	f8dc 3000 	ldr.w	r3, [ip]
 80178aa:	f8ce 3000 	str.w	r3, [lr]
 80178ae:	a801      	add	r0, sp, #4
 80178b0:	f7f5 fcd4 	bl	800d25c <rcutils_allocator_is_valid>
 80178b4:	b308      	cbz	r0, 80178fa <rcutils_string_map_reserve+0x76>
 80178b6:	6823      	ldr	r3, [r4, #0]
 80178b8:	6899      	ldr	r1, [r3, #8]
 80178ba:	42a9      	cmp	r1, r5
 80178bc:	d829      	bhi.n	8017912 <rcutils_string_map_reserve+0x8e>
 80178be:	685a      	ldr	r2, [r3, #4]
 80178c0:	42aa      	cmp	r2, r5
 80178c2:	d024      	beq.n	801790e <rcutils_string_map_reserve+0x8a>
 80178c4:	b1e5      	cbz	r5, 8017900 <rcutils_string_map_reserve+0x7c>
 80178c6:	f1b5 5f00 	cmp.w	r5, #536870912	@ 0x20000000
 80178ca:	d22a      	bcs.n	8017922 <rcutils_string_map_reserve+0x9e>
 80178cc:	6818      	ldr	r0, [r3, #0]
 80178ce:	9a05      	ldr	r2, [sp, #20]
 80178d0:	9b03      	ldr	r3, [sp, #12]
 80178d2:	00e9      	lsls	r1, r5, #3
 80178d4:	4798      	blx	r3
 80178d6:	b320      	cbz	r0, 8017922 <rcutils_string_map_reserve+0x9e>
 80178d8:	6824      	ldr	r4, [r4, #0]
 80178da:	6861      	ldr	r1, [r4, #4]
 80178dc:	6020      	str	r0, [r4, #0]
 80178de:	42a9      	cmp	r1, r5
 80178e0:	d214      	bcs.n	801790c <rcutils_string_map_reserve+0x88>
 80178e2:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
 80178e6:	1a69      	subs	r1, r5, r1
 80178e8:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80178ec:	2200      	movs	r2, #0
 80178ee:	e9c3 2200 	strd	r2, r2, [r3]
 80178f2:	3308      	adds	r3, #8
 80178f4:	428b      	cmp	r3, r1
 80178f6:	d1fa      	bne.n	80178ee <rcutils_string_map_reserve+0x6a>
 80178f8:	e008      	b.n	801790c <rcutils_string_map_reserve+0x88>
 80178fa:	200b      	movs	r0, #11
 80178fc:	b007      	add	sp, #28
 80178fe:	bd30      	pop	{r4, r5, pc}
 8017900:	9a02      	ldr	r2, [sp, #8]
 8017902:	9905      	ldr	r1, [sp, #20]
 8017904:	6818      	ldr	r0, [r3, #0]
 8017906:	4790      	blx	r2
 8017908:	6824      	ldr	r4, [r4, #0]
 801790a:	6025      	str	r5, [r4, #0]
 801790c:	6065      	str	r5, [r4, #4]
 801790e:	2000      	movs	r0, #0
 8017910:	e7f4      	b.n	80178fc <rcutils_string_map_reserve+0x78>
 8017912:	4620      	mov	r0, r4
 8017914:	f7ff ffb6 	bl	8017884 <rcutils_string_map_reserve>
 8017918:	b007      	add	sp, #28
 801791a:	bd30      	pop	{r4, r5, pc}
 801791c:	201f      	movs	r0, #31
 801791e:	b007      	add	sp, #28
 8017920:	bd30      	pop	{r4, r5, pc}
 8017922:	200a      	movs	r0, #10
 8017924:	e7ea      	b.n	80178fc <rcutils_string_map_reserve+0x78>
 8017926:	200b      	movs	r0, #11
 8017928:	4770      	bx	lr
 801792a:	bf00      	nop

0801792c <rcutils_string_map_init>:
 801792c:	b082      	sub	sp, #8
 801792e:	b570      	push	{r4, r5, r6, lr}
 8017930:	ac04      	add	r4, sp, #16
 8017932:	e884 000c 	stmia.w	r4, {r2, r3}
 8017936:	b378      	cbz	r0, 8017998 <rcutils_string_map_init+0x6c>
 8017938:	6806      	ldr	r6, [r0, #0]
 801793a:	4604      	mov	r4, r0
 801793c:	b12e      	cbz	r6, 801794a <rcutils_string_map_init+0x1e>
 801793e:	251e      	movs	r5, #30
 8017940:	4628      	mov	r0, r5
 8017942:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017946:	b002      	add	sp, #8
 8017948:	4770      	bx	lr
 801794a:	a804      	add	r0, sp, #16
 801794c:	460d      	mov	r5, r1
 801794e:	f7f5 fc85 	bl	800d25c <rcutils_allocator_is_valid>
 8017952:	b308      	cbz	r0, 8017998 <rcutils_string_map_init+0x6c>
 8017954:	9b04      	ldr	r3, [sp, #16]
 8017956:	9908      	ldr	r1, [sp, #32]
 8017958:	2020      	movs	r0, #32
 801795a:	4798      	blx	r3
 801795c:	6020      	str	r0, [r4, #0]
 801795e:	b308      	cbz	r0, 80179a4 <rcutils_string_map_init+0x78>
 8017960:	f10d 0e10 	add.w	lr, sp, #16
 8017964:	e9c0 6600 	strd	r6, r6, [r0]
 8017968:	6086      	str	r6, [r0, #8]
 801796a:	f100 0c0c 	add.w	ip, r0, #12
 801796e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017972:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017976:	f8de 3000 	ldr.w	r3, [lr]
 801797a:	f8cc 3000 	str.w	r3, [ip]
 801797e:	4629      	mov	r1, r5
 8017980:	4620      	mov	r0, r4
 8017982:	f7ff ff7f 	bl	8017884 <rcutils_string_map_reserve>
 8017986:	4605      	mov	r5, r0
 8017988:	2800      	cmp	r0, #0
 801798a:	d0d9      	beq.n	8017940 <rcutils_string_map_init+0x14>
 801798c:	9b05      	ldr	r3, [sp, #20]
 801798e:	9908      	ldr	r1, [sp, #32]
 8017990:	6820      	ldr	r0, [r4, #0]
 8017992:	4798      	blx	r3
 8017994:	6026      	str	r6, [r4, #0]
 8017996:	e7d3      	b.n	8017940 <rcutils_string_map_init+0x14>
 8017998:	250b      	movs	r5, #11
 801799a:	4628      	mov	r0, r5
 801799c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80179a0:	b002      	add	sp, #8
 80179a2:	4770      	bx	lr
 80179a4:	250a      	movs	r5, #10
 80179a6:	e7cb      	b.n	8017940 <rcutils_string_map_init+0x14>

080179a8 <rcutils_string_map_fini>:
 80179a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80179ac:	b086      	sub	sp, #24
 80179ae:	2800      	cmp	r0, #0
 80179b0:	d04f      	beq.n	8017a52 <rcutils_string_map_fini+0xaa>
 80179b2:	6805      	ldr	r5, [r0, #0]
 80179b4:	4606      	mov	r6, r0
 80179b6:	2d00      	cmp	r5, #0
 80179b8:	d046      	beq.n	8017a48 <rcutils_string_map_fini+0xa0>
 80179ba:	686b      	ldr	r3, [r5, #4]
 80179bc:	b353      	cbz	r3, 8017a14 <rcutils_string_map_fini+0x6c>
 80179be:	2400      	movs	r4, #0
 80179c0:	682a      	ldr	r2, [r5, #0]
 80179c2:	4627      	mov	r7, r4
 80179c4:	f852 0034 	ldr.w	r0, [r2, r4, lsl #3]
 80179c8:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 80179cc:	b1f8      	cbz	r0, 8017a0e <rcutils_string_map_fini+0x66>
 80179ce:	f8d5 a01c 	ldr.w	sl, [r5, #28]
 80179d2:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80179d6:	4651      	mov	r1, sl
 80179d8:	47c8      	blx	r9
 80179da:	682b      	ldr	r3, [r5, #0]
 80179dc:	eb03 0208 	add.w	r2, r3, r8
 80179e0:	f843 7034 	str.w	r7, [r3, r4, lsl #3]
 80179e4:	6850      	ldr	r0, [r2, #4]
 80179e6:	4651      	mov	r1, sl
 80179e8:	47c8      	blx	r9
 80179ea:	682a      	ldr	r2, [r5, #0]
 80179ec:	68ab      	ldr	r3, [r5, #8]
 80179ee:	4442      	add	r2, r8
 80179f0:	3b01      	subs	r3, #1
 80179f2:	6057      	str	r7, [r2, #4]
 80179f4:	60ab      	str	r3, [r5, #8]
 80179f6:	6835      	ldr	r5, [r6, #0]
 80179f8:	686b      	ldr	r3, [r5, #4]
 80179fa:	3401      	adds	r4, #1
 80179fc:	429c      	cmp	r4, r3
 80179fe:	d209      	bcs.n	8017a14 <rcutils_string_map_fini+0x6c>
 8017a00:	682a      	ldr	r2, [r5, #0]
 8017a02:	f852 0034 	ldr.w	r0, [r2, r4, lsl #3]
 8017a06:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 8017a0a:	2800      	cmp	r0, #0
 8017a0c:	d1df      	bne.n	80179ce <rcutils_string_map_fini+0x26>
 8017a0e:	3401      	adds	r4, #1
 8017a10:	42a3      	cmp	r3, r4
 8017a12:	d8d7      	bhi.n	80179c4 <rcutils_string_map_fini+0x1c>
 8017a14:	2100      	movs	r1, #0
 8017a16:	4630      	mov	r0, r6
 8017a18:	f7ff ff34 	bl	8017884 <rcutils_string_map_reserve>
 8017a1c:	4604      	mov	r4, r0
 8017a1e:	b118      	cbz	r0, 8017a28 <rcutils_string_map_fini+0x80>
 8017a20:	4620      	mov	r0, r4
 8017a22:	b006      	add	sp, #24
 8017a24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017a28:	6835      	ldr	r5, [r6, #0]
 8017a2a:	350c      	adds	r5, #12
 8017a2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017a2e:	af01      	add	r7, sp, #4
 8017a30:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8017a32:	682b      	ldr	r3, [r5, #0]
 8017a34:	603b      	str	r3, [r7, #0]
 8017a36:	a801      	add	r0, sp, #4
 8017a38:	f7f5 fc10 	bl	800d25c <rcutils_allocator_is_valid>
 8017a3c:	b148      	cbz	r0, 8017a52 <rcutils_string_map_fini+0xaa>
 8017a3e:	9b02      	ldr	r3, [sp, #8]
 8017a40:	9905      	ldr	r1, [sp, #20]
 8017a42:	6830      	ldr	r0, [r6, #0]
 8017a44:	4798      	blx	r3
 8017a46:	6034      	str	r4, [r6, #0]
 8017a48:	2400      	movs	r4, #0
 8017a4a:	4620      	mov	r0, r4
 8017a4c:	b006      	add	sp, #24
 8017a4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017a52:	240b      	movs	r4, #11
 8017a54:	4620      	mov	r0, r4
 8017a56:	b006      	add	sp, #24
 8017a58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08017a5c <rcutils_string_map_getn>:
 8017a5c:	b338      	cbz	r0, 8017aae <rcutils_string_map_getn+0x52>
 8017a5e:	6800      	ldr	r0, [r0, #0]
 8017a60:	b328      	cbz	r0, 8017aae <rcutils_string_map_getn+0x52>
 8017a62:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017a66:	460e      	mov	r6, r1
 8017a68:	b1c1      	cbz	r1, 8017a9c <rcutils_string_map_getn+0x40>
 8017a6a:	e9d0 9800 	ldrd	r9, r8, [r0]
 8017a6e:	f1b8 0f00 	cmp.w	r8, #0
 8017a72:	d013      	beq.n	8017a9c <rcutils_string_map_getn+0x40>
 8017a74:	4617      	mov	r7, r2
 8017a76:	2400      	movs	r4, #0
 8017a78:	f859 5034 	ldr.w	r5, [r9, r4, lsl #3]
 8017a7c:	4628      	mov	r0, r5
 8017a7e:	b155      	cbz	r5, 8017a96 <rcutils_string_map_getn+0x3a>
 8017a80:	f7e8 fc1e 	bl	80002c0 <strlen>
 8017a84:	42b8      	cmp	r0, r7
 8017a86:	4602      	mov	r2, r0
 8017a88:	4629      	mov	r1, r5
 8017a8a:	bf38      	it	cc
 8017a8c:	463a      	movcc	r2, r7
 8017a8e:	4630      	mov	r0, r6
 8017a90:	f005 fd13 	bl	801d4ba <strncmp>
 8017a94:	b128      	cbz	r0, 8017aa2 <rcutils_string_map_getn+0x46>
 8017a96:	3401      	adds	r4, #1
 8017a98:	45a0      	cmp	r8, r4
 8017a9a:	d1ed      	bne.n	8017a78 <rcutils_string_map_getn+0x1c>
 8017a9c:	2000      	movs	r0, #0
 8017a9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017aa2:	eb09 09c4 	add.w	r9, r9, r4, lsl #3
 8017aa6:	f8d9 0004 	ldr.w	r0, [r9, #4]
 8017aaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017aae:	4770      	bx	lr

08017ab0 <rmw_get_zero_initialized_context>:
 8017ab0:	b530      	push	{r4, r5, lr}
 8017ab2:	b097      	sub	sp, #92	@ 0x5c
 8017ab4:	4604      	mov	r4, r0
 8017ab6:	4668      	mov	r0, sp
 8017ab8:	f000 f812 	bl	8017ae0 <rmw_get_zero_initialized_init_options>
 8017abc:	2300      	movs	r3, #0
 8017abe:	2200      	movs	r2, #0
 8017ac0:	e9c4 2300 	strd	r2, r3, [r4]
 8017ac4:	2500      	movs	r5, #0
 8017ac6:	4669      	mov	r1, sp
 8017ac8:	2258      	movs	r2, #88	@ 0x58
 8017aca:	f104 0010 	add.w	r0, r4, #16
 8017ace:	60a5      	str	r5, [r4, #8]
 8017ad0:	f005 fd73 	bl	801d5ba <memcpy>
 8017ad4:	4620      	mov	r0, r4
 8017ad6:	e9c4 551a 	strd	r5, r5, [r4, #104]	@ 0x68
 8017ada:	b017      	add	sp, #92	@ 0x5c
 8017adc:	bd30      	pop	{r4, r5, pc}
 8017ade:	bf00      	nop

08017ae0 <rmw_get_zero_initialized_init_options>:
 8017ae0:	b530      	push	{r4, r5, lr}
 8017ae2:	b08b      	sub	sp, #44	@ 0x2c
 8017ae4:	466d      	mov	r5, sp
 8017ae6:	4604      	mov	r4, r0
 8017ae8:	4628      	mov	r0, r5
 8017aea:	f000 f821 	bl	8017b30 <rmw_get_default_security_options>
 8017aee:	a802      	add	r0, sp, #8
 8017af0:	f004 fafa 	bl	801c0e8 <rmw_get_zero_initialized_discovery_options>
 8017af4:	2258      	movs	r2, #88	@ 0x58
 8017af6:	2100      	movs	r1, #0
 8017af8:	4620      	mov	r0, r4
 8017afa:	f005 fcc9 	bl	801d490 <memset>
 8017afe:	e895 0003 	ldmia.w	r5, {r0, r1}
 8017b02:	f104 0310 	add.w	r3, r4, #16
 8017b06:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8017b0a:	f10d 0c08 	add.w	ip, sp, #8
 8017b0e:	e883 0003 	stmia.w	r3, {r0, r1}
 8017b12:	60e2      	str	r2, [r4, #12]
 8017b14:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8017b18:	f104 0e1c 	add.w	lr, r4, #28
 8017b1c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8017b20:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8017b24:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8017b28:	4620      	mov	r0, r4
 8017b2a:	b00b      	add	sp, #44	@ 0x2c
 8017b2c:	bd30      	pop	{r4, r5, pc}
 8017b2e:	bf00      	nop

08017b30 <rmw_get_default_security_options>:
 8017b30:	2200      	movs	r2, #0
 8017b32:	7002      	strb	r2, [r0, #0]
 8017b34:	6042      	str	r2, [r0, #4]
 8017b36:	4770      	bx	lr

08017b38 <rmw_subscription_content_filter_options_fini>:
 8017b38:	b1b0      	cbz	r0, 8017b68 <rmw_subscription_content_filter_options_fini+0x30>
 8017b3a:	b538      	push	{r3, r4, r5, lr}
 8017b3c:	4604      	mov	r4, r0
 8017b3e:	4608      	mov	r0, r1
 8017b40:	460d      	mov	r5, r1
 8017b42:	f7f5 fb8b 	bl	800d25c <rcutils_allocator_is_valid>
 8017b46:	b168      	cbz	r0, 8017b64 <rmw_subscription_content_filter_options_fini+0x2c>
 8017b48:	6820      	ldr	r0, [r4, #0]
 8017b4a:	b120      	cbz	r0, 8017b56 <rmw_subscription_content_filter_options_fini+0x1e>
 8017b4c:	686b      	ldr	r3, [r5, #4]
 8017b4e:	6929      	ldr	r1, [r5, #16]
 8017b50:	4798      	blx	r3
 8017b52:	2300      	movs	r3, #0
 8017b54:	6023      	str	r3, [r4, #0]
 8017b56:	1d20      	adds	r0, r4, #4
 8017b58:	f004 faa0 	bl	801c09c <rcutils_string_array_fini>
 8017b5c:	3800      	subs	r0, #0
 8017b5e:	bf18      	it	ne
 8017b60:	2001      	movne	r0, #1
 8017b62:	bd38      	pop	{r3, r4, r5, pc}
 8017b64:	200b      	movs	r0, #11
 8017b66:	bd38      	pop	{r3, r4, r5, pc}
 8017b68:	200b      	movs	r0, #11
 8017b6a:	4770      	bx	lr

08017b6c <rmw_get_default_subscription_options>:
 8017b6c:	2200      	movs	r2, #0
 8017b6e:	e9c0 2200 	strd	r2, r2, [r0]
 8017b72:	6082      	str	r2, [r0, #8]
 8017b74:	4770      	bx	lr
 8017b76:	bf00      	nop

08017b78 <rmw_time_equal>:
 8017b78:	b570      	push	{r4, r5, r6, lr}
 8017b7a:	b084      	sub	sp, #16
 8017b7c:	ac04      	add	r4, sp, #16
 8017b7e:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8017b82:	4925      	ldr	r1, [pc, #148]	@ (8017c18 <rmw_time_equal+0xa0>)
 8017b84:	9c01      	ldr	r4, [sp, #4]
 8017b86:	2202      	movs	r2, #2
 8017b88:	4281      	cmp	r1, r0
 8017b8a:	41a2      	sbcs	r2, r4
 8017b8c:	d333      	bcc.n	8017bf6 <rmw_time_equal+0x7e>
 8017b8e:	4603      	mov	r3, r0
 8017b90:	4822      	ldr	r0, [pc, #136]	@ (8017c1c <rmw_time_equal+0xa4>)
 8017b92:	e9dd 1502 	ldrd	r1, r5, [sp, #8]
 8017b96:	fba3 3200 	umull	r3, r2, r3, r0
 8017b9a:	fb00 2204 	mla	r2, r0, r4, r2
 8017b9e:	43de      	mvns	r6, r3
 8017ba0:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8017ba4:	1a84      	subs	r4, r0, r2
 8017ba6:	428e      	cmp	r6, r1
 8017ba8:	41ac      	sbcs	r4, r5
 8017baa:	d332      	bcc.n	8017c12 <rmw_time_equal+0x9a>
 8017bac:	eb11 0e03 	adds.w	lr, r1, r3
 8017bb0:	eb42 0005 	adc.w	r0, r2, r5
 8017bb4:	9b08      	ldr	r3, [sp, #32]
 8017bb6:	4918      	ldr	r1, [pc, #96]	@ (8017c18 <rmw_time_equal+0xa0>)
 8017bb8:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8017bba:	2202      	movs	r2, #2
 8017bbc:	4299      	cmp	r1, r3
 8017bbe:	41aa      	sbcs	r2, r5
 8017bc0:	d31e      	bcc.n	8017c00 <rmw_time_equal+0x88>
 8017bc2:	4c16      	ldr	r4, [pc, #88]	@ (8017c1c <rmw_time_equal+0xa4>)
 8017bc4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8017bc6:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8017bc8:	fba3 3104 	umull	r3, r1, r3, r4
 8017bcc:	fb04 1105 	mla	r1, r4, r5, r1
 8017bd0:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 8017bd4:	43dd      	mvns	r5, r3
 8017bd6:	ebac 0401 	sub.w	r4, ip, r1
 8017bda:	4295      	cmp	r5, r2
 8017bdc:	41b4      	sbcs	r4, r6
 8017bde:	d314      	bcc.n	8017c0a <rmw_time_equal+0x92>
 8017be0:	18d2      	adds	r2, r2, r3
 8017be2:	eb41 0306 	adc.w	r3, r1, r6
 8017be6:	4283      	cmp	r3, r0
 8017be8:	bf08      	it	eq
 8017bea:	4572      	cmpeq	r2, lr
 8017bec:	bf0c      	ite	eq
 8017bee:	2001      	moveq	r0, #1
 8017bf0:	2000      	movne	r0, #0
 8017bf2:	b004      	add	sp, #16
 8017bf4:	bd70      	pop	{r4, r5, r6, pc}
 8017bf6:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 8017bfa:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8017bfe:	e7d9      	b.n	8017bb4 <rmw_time_equal+0x3c>
 8017c00:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8017c04:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8017c08:	e7ed      	b.n	8017be6 <rmw_time_equal+0x6e>
 8017c0a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8017c0e:	4663      	mov	r3, ip
 8017c10:	e7e9      	b.n	8017be6 <rmw_time_equal+0x6e>
 8017c12:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 8017c16:	e7cd      	b.n	8017bb4 <rmw_time_equal+0x3c>
 8017c18:	25c17d04 	.word	0x25c17d04
 8017c1c:	3b9aca00 	.word	0x3b9aca00

08017c20 <rmw_time_total_nsec>:
 8017c20:	b430      	push	{r4, r5}
 8017c22:	b084      	sub	sp, #16
 8017c24:	ac04      	add	r4, sp, #16
 8017c26:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8017c2a:	4914      	ldr	r1, [pc, #80]	@ (8017c7c <rmw_time_total_nsec+0x5c>)
 8017c2c:	9c01      	ldr	r4, [sp, #4]
 8017c2e:	2202      	movs	r2, #2
 8017c30:	4281      	cmp	r1, r0
 8017c32:	41a2      	sbcs	r2, r4
 8017c34:	d315      	bcc.n	8017c62 <rmw_time_total_nsec+0x42>
 8017c36:	4912      	ldr	r1, [pc, #72]	@ (8017c80 <rmw_time_total_nsec+0x60>)
 8017c38:	4603      	mov	r3, r0
 8017c3a:	e9dd 0502 	ldrd	r0, r5, [sp, #8]
 8017c3e:	fba3 3201 	umull	r3, r2, r3, r1
 8017c42:	fb01 2204 	mla	r2, r1, r4, r2
 8017c46:	ea6f 0c03 	mvn.w	ip, r3
 8017c4a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8017c4e:	1a8c      	subs	r4, r1, r2
 8017c50:	4584      	cmp	ip, r0
 8017c52:	41ac      	sbcs	r4, r5
 8017c54:	d30c      	bcc.n	8017c70 <rmw_time_total_nsec+0x50>
 8017c56:	1818      	adds	r0, r3, r0
 8017c58:	eb42 0105 	adc.w	r1, r2, r5
 8017c5c:	b004      	add	sp, #16
 8017c5e:	bc30      	pop	{r4, r5}
 8017c60:	4770      	bx	lr
 8017c62:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017c66:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8017c6a:	b004      	add	sp, #16
 8017c6c:	bc30      	pop	{r4, r5}
 8017c6e:	4770      	bx	lr
 8017c70:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017c74:	b004      	add	sp, #16
 8017c76:	bc30      	pop	{r4, r5}
 8017c78:	4770      	bx	lr
 8017c7a:	bf00      	nop
 8017c7c:	25c17d04 	.word	0x25c17d04
 8017c80:	3b9aca00 	.word	0x3b9aca00

08017c84 <rmw_get_zero_initialized_message_info>:
 8017c84:	b510      	push	{r4, lr}
 8017c86:	2238      	movs	r2, #56	@ 0x38
 8017c88:	4604      	mov	r4, r0
 8017c8a:	2100      	movs	r1, #0
 8017c8c:	f005 fc00 	bl	801d490 <memset>
 8017c90:	4620      	mov	r0, r4
 8017c92:	bd10      	pop	{r4, pc}

08017c94 <rmw_validate_full_topic_name>:
 8017c94:	2800      	cmp	r0, #0
 8017c96:	d049      	beq.n	8017d2c <rmw_validate_full_topic_name+0x98>
 8017c98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017c9c:	460e      	mov	r6, r1
 8017c9e:	2900      	cmp	r1, #0
 8017ca0:	d056      	beq.n	8017d50 <rmw_validate_full_topic_name+0xbc>
 8017ca2:	4615      	mov	r5, r2
 8017ca4:	4604      	mov	r4, r0
 8017ca6:	f7e8 fb0b 	bl	80002c0 <strlen>
 8017caa:	b150      	cbz	r0, 8017cc2 <rmw_validate_full_topic_name+0x2e>
 8017cac:	7823      	ldrb	r3, [r4, #0]
 8017cae:	2b2f      	cmp	r3, #47	@ 0x2f
 8017cb0:	d00c      	beq.n	8017ccc <rmw_validate_full_topic_name+0x38>
 8017cb2:	2302      	movs	r3, #2
 8017cb4:	6033      	str	r3, [r6, #0]
 8017cb6:	b10d      	cbz	r5, 8017cbc <rmw_validate_full_topic_name+0x28>
 8017cb8:	2300      	movs	r3, #0
 8017cba:	602b      	str	r3, [r5, #0]
 8017cbc:	2000      	movs	r0, #0
 8017cbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017cc2:	2301      	movs	r3, #1
 8017cc4:	6033      	str	r3, [r6, #0]
 8017cc6:	2d00      	cmp	r5, #0
 8017cc8:	d1f6      	bne.n	8017cb8 <rmw_validate_full_topic_name+0x24>
 8017cca:	e7f7      	b.n	8017cbc <rmw_validate_full_topic_name+0x28>
 8017ccc:	1e47      	subs	r7, r0, #1
 8017cce:	5de3      	ldrb	r3, [r4, r7]
 8017cd0:	2b2f      	cmp	r3, #47	@ 0x2f
 8017cd2:	d03f      	beq.n	8017d54 <rmw_validate_full_topic_name+0xc0>
 8017cd4:	1e63      	subs	r3, r4, #1
 8017cd6:	4621      	mov	r1, r4
 8017cd8:	eb03 0e00 	add.w	lr, r3, r0
 8017cdc:	469c      	mov	ip, r3
 8017cde:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8017ce2:	2a5f      	cmp	r2, #95	@ 0x5f
 8017ce4:	d006      	beq.n	8017cf4 <rmw_validate_full_topic_name+0x60>
 8017ce6:	d823      	bhi.n	8017d30 <rmw_validate_full_topic_name+0x9c>
 8017ce8:	2a39      	cmp	r2, #57	@ 0x39
 8017cea:	f1a2 0841 	sub.w	r8, r2, #65	@ 0x41
 8017cee:	d82b      	bhi.n	8017d48 <rmw_validate_full_topic_name+0xb4>
 8017cf0:	2a2e      	cmp	r2, #46	@ 0x2e
 8017cf2:	d920      	bls.n	8017d36 <rmw_validate_full_topic_name+0xa2>
 8017cf4:	4573      	cmp	r3, lr
 8017cf6:	d1f1      	bne.n	8017cdc <rmw_validate_full_topic_name+0x48>
 8017cf8:	4c21      	ldr	r4, [pc, #132]	@ (8017d80 <rmw_validate_full_topic_name+0xec>)
 8017cfa:	2300      	movs	r3, #0
 8017cfc:	e003      	b.n	8017d06 <rmw_validate_full_topic_name+0x72>
 8017cfe:	4298      	cmp	r0, r3
 8017d00:	f101 0101 	add.w	r1, r1, #1
 8017d04:	d02c      	beq.n	8017d60 <rmw_validate_full_topic_name+0xcc>
 8017d06:	429f      	cmp	r7, r3
 8017d08:	f103 0301 	add.w	r3, r3, #1
 8017d0c:	d0f7      	beq.n	8017cfe <rmw_validate_full_topic_name+0x6a>
 8017d0e:	780a      	ldrb	r2, [r1, #0]
 8017d10:	2a2f      	cmp	r2, #47	@ 0x2f
 8017d12:	d1f4      	bne.n	8017cfe <rmw_validate_full_topic_name+0x6a>
 8017d14:	784a      	ldrb	r2, [r1, #1]
 8017d16:	2a2f      	cmp	r2, #47	@ 0x2f
 8017d18:	d02d      	beq.n	8017d76 <rmw_validate_full_topic_name+0xe2>
 8017d1a:	5ca2      	ldrb	r2, [r4, r2]
 8017d1c:	0752      	lsls	r2, r2, #29
 8017d1e:	d5ee      	bpl.n	8017cfe <rmw_validate_full_topic_name+0x6a>
 8017d20:	2206      	movs	r2, #6
 8017d22:	6032      	str	r2, [r6, #0]
 8017d24:	2d00      	cmp	r5, #0
 8017d26:	d0c9      	beq.n	8017cbc <rmw_validate_full_topic_name+0x28>
 8017d28:	602b      	str	r3, [r5, #0]
 8017d2a:	e7c7      	b.n	8017cbc <rmw_validate_full_topic_name+0x28>
 8017d2c:	200b      	movs	r0, #11
 8017d2e:	4770      	bx	lr
 8017d30:	3a61      	subs	r2, #97	@ 0x61
 8017d32:	2a19      	cmp	r2, #25
 8017d34:	d9de      	bls.n	8017cf4 <rmw_validate_full_topic_name+0x60>
 8017d36:	2304      	movs	r3, #4
 8017d38:	6033      	str	r3, [r6, #0]
 8017d3a:	2d00      	cmp	r5, #0
 8017d3c:	d0be      	beq.n	8017cbc <rmw_validate_full_topic_name+0x28>
 8017d3e:	f1c4 0401 	rsb	r4, r4, #1
 8017d42:	4464      	add	r4, ip
 8017d44:	602c      	str	r4, [r5, #0]
 8017d46:	e7b9      	b.n	8017cbc <rmw_validate_full_topic_name+0x28>
 8017d48:	f1b8 0f19 	cmp.w	r8, #25
 8017d4c:	d9d2      	bls.n	8017cf4 <rmw_validate_full_topic_name+0x60>
 8017d4e:	e7f2      	b.n	8017d36 <rmw_validate_full_topic_name+0xa2>
 8017d50:	200b      	movs	r0, #11
 8017d52:	e7b4      	b.n	8017cbe <rmw_validate_full_topic_name+0x2a>
 8017d54:	2303      	movs	r3, #3
 8017d56:	6033      	str	r3, [r6, #0]
 8017d58:	2d00      	cmp	r5, #0
 8017d5a:	d0af      	beq.n	8017cbc <rmw_validate_full_topic_name+0x28>
 8017d5c:	602f      	str	r7, [r5, #0]
 8017d5e:	e7ad      	b.n	8017cbc <rmw_validate_full_topic_name+0x28>
 8017d60:	28f7      	cmp	r0, #247	@ 0xf7
 8017d62:	d802      	bhi.n	8017d6a <rmw_validate_full_topic_name+0xd6>
 8017d64:	2300      	movs	r3, #0
 8017d66:	6033      	str	r3, [r6, #0]
 8017d68:	e7a8      	b.n	8017cbc <rmw_validate_full_topic_name+0x28>
 8017d6a:	2307      	movs	r3, #7
 8017d6c:	6033      	str	r3, [r6, #0]
 8017d6e:	2d00      	cmp	r5, #0
 8017d70:	d0a4      	beq.n	8017cbc <rmw_validate_full_topic_name+0x28>
 8017d72:	23f6      	movs	r3, #246	@ 0xf6
 8017d74:	e7d8      	b.n	8017d28 <rmw_validate_full_topic_name+0x94>
 8017d76:	2205      	movs	r2, #5
 8017d78:	6032      	str	r2, [r6, #0]
 8017d7a:	2d00      	cmp	r5, #0
 8017d7c:	d1d4      	bne.n	8017d28 <rmw_validate_full_topic_name+0x94>
 8017d7e:	e79d      	b.n	8017cbc <rmw_validate_full_topic_name+0x28>
 8017d80:	080209e9 	.word	0x080209e9

08017d84 <rmw_validate_namespace_with_size>:
 8017d84:	2800      	cmp	r0, #0
 8017d86:	d031      	beq.n	8017dec <rmw_validate_namespace_with_size+0x68>
 8017d88:	b570      	push	{r4, r5, r6, lr}
 8017d8a:	4614      	mov	r4, r2
 8017d8c:	b0c2      	sub	sp, #264	@ 0x108
 8017d8e:	b1ba      	cbz	r2, 8017dc0 <rmw_validate_namespace_with_size+0x3c>
 8017d90:	2901      	cmp	r1, #1
 8017d92:	460e      	mov	r6, r1
 8017d94:	461d      	mov	r5, r3
 8017d96:	d102      	bne.n	8017d9e <rmw_validate_namespace_with_size+0x1a>
 8017d98:	7803      	ldrb	r3, [r0, #0]
 8017d9a:	2b2f      	cmp	r3, #47	@ 0x2f
 8017d9c:	d015      	beq.n	8017dca <rmw_validate_namespace_with_size+0x46>
 8017d9e:	aa01      	add	r2, sp, #4
 8017da0:	4669      	mov	r1, sp
 8017da2:	f7ff ff77 	bl	8017c94 <rmw_validate_full_topic_name>
 8017da6:	b960      	cbnz	r0, 8017dc2 <rmw_validate_namespace_with_size+0x3e>
 8017da8:	9b00      	ldr	r3, [sp, #0]
 8017daa:	b163      	cbz	r3, 8017dc6 <rmw_validate_namespace_with_size+0x42>
 8017dac:	2b07      	cmp	r3, #7
 8017dae:	d00a      	beq.n	8017dc6 <rmw_validate_namespace_with_size+0x42>
 8017db0:	1e5a      	subs	r2, r3, #1
 8017db2:	2a05      	cmp	r2, #5
 8017db4:	d81c      	bhi.n	8017df0 <rmw_validate_namespace_with_size+0x6c>
 8017db6:	e8df f002 	tbb	[pc, r2]
 8017dba:	0c0c      	.short	0x0c0c
 8017dbc:	0c0c0c0c 	.word	0x0c0c0c0c
 8017dc0:	200b      	movs	r0, #11
 8017dc2:	b042      	add	sp, #264	@ 0x108
 8017dc4:	bd70      	pop	{r4, r5, r6, pc}
 8017dc6:	2ef5      	cmp	r6, #245	@ 0xf5
 8017dc8:	d809      	bhi.n	8017dde <rmw_validate_namespace_with_size+0x5a>
 8017dca:	2300      	movs	r3, #0
 8017dcc:	6023      	str	r3, [r4, #0]
 8017dce:	2000      	movs	r0, #0
 8017dd0:	e7f7      	b.n	8017dc2 <rmw_validate_namespace_with_size+0x3e>
 8017dd2:	6023      	str	r3, [r4, #0]
 8017dd4:	2d00      	cmp	r5, #0
 8017dd6:	d0fa      	beq.n	8017dce <rmw_validate_namespace_with_size+0x4a>
 8017dd8:	9b01      	ldr	r3, [sp, #4]
 8017dda:	602b      	str	r3, [r5, #0]
 8017ddc:	e7f7      	b.n	8017dce <rmw_validate_namespace_with_size+0x4a>
 8017dde:	2307      	movs	r3, #7
 8017de0:	6023      	str	r3, [r4, #0]
 8017de2:	2d00      	cmp	r5, #0
 8017de4:	d0f3      	beq.n	8017dce <rmw_validate_namespace_with_size+0x4a>
 8017de6:	23f4      	movs	r3, #244	@ 0xf4
 8017de8:	602b      	str	r3, [r5, #0]
 8017dea:	e7f0      	b.n	8017dce <rmw_validate_namespace_with_size+0x4a>
 8017dec:	200b      	movs	r0, #11
 8017dee:	4770      	bx	lr
 8017df0:	4a03      	ldr	r2, [pc, #12]	@ (8017e00 <rmw_validate_namespace_with_size+0x7c>)
 8017df2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8017df6:	a802      	add	r0, sp, #8
 8017df8:	f7ff fcb2 	bl	8017760 <rcutils_snprintf>
 8017dfc:	2001      	movs	r0, #1
 8017dfe:	e7e0      	b.n	8017dc2 <rmw_validate_namespace_with_size+0x3e>
 8017e00:	0801f47c 	.word	0x0801f47c

08017e04 <rmw_validate_namespace>:
 8017e04:	b168      	cbz	r0, 8017e22 <rmw_validate_namespace+0x1e>
 8017e06:	b570      	push	{r4, r5, r6, lr}
 8017e08:	460d      	mov	r5, r1
 8017e0a:	4616      	mov	r6, r2
 8017e0c:	4604      	mov	r4, r0
 8017e0e:	f7e8 fa57 	bl	80002c0 <strlen>
 8017e12:	4633      	mov	r3, r6
 8017e14:	4601      	mov	r1, r0
 8017e16:	462a      	mov	r2, r5
 8017e18:	4620      	mov	r0, r4
 8017e1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017e1e:	f7ff bfb1 	b.w	8017d84 <rmw_validate_namespace_with_size>
 8017e22:	200b      	movs	r0, #11
 8017e24:	4770      	bx	lr
 8017e26:	bf00      	nop

08017e28 <rmw_namespace_validation_result_string>:
 8017e28:	2807      	cmp	r0, #7
 8017e2a:	bf9a      	itte	ls
 8017e2c:	4b02      	ldrls	r3, [pc, #8]	@ (8017e38 <rmw_namespace_validation_result_string+0x10>)
 8017e2e:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8017e32:	4802      	ldrhi	r0, [pc, #8]	@ (8017e3c <rmw_namespace_validation_result_string+0x14>)
 8017e34:	4770      	bx	lr
 8017e36:	bf00      	nop
 8017e38:	080202fc 	.word	0x080202fc
 8017e3c:	0801f4cc 	.word	0x0801f4cc

08017e40 <rmw_validate_node_name>:
 8017e40:	2800      	cmp	r0, #0
 8017e42:	d037      	beq.n	8017eb4 <rmw_validate_node_name+0x74>
 8017e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017e46:	460e      	mov	r6, r1
 8017e48:	2900      	cmp	r1, #0
 8017e4a:	d035      	beq.n	8017eb8 <rmw_validate_node_name+0x78>
 8017e4c:	4617      	mov	r7, r2
 8017e4e:	4604      	mov	r4, r0
 8017e50:	f7e8 fa36 	bl	80002c0 <strlen>
 8017e54:	b1d8      	cbz	r0, 8017e8e <rmw_validate_node_name+0x4e>
 8017e56:	1e63      	subs	r3, r4, #1
 8017e58:	1819      	adds	r1, r3, r0
 8017e5a:	461a      	mov	r2, r3
 8017e5c:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 8017e60:	f1ae 0530 	sub.w	r5, lr, #48	@ 0x30
 8017e64:	f02e 0c20 	bic.w	ip, lr, #32
 8017e68:	2d09      	cmp	r5, #9
 8017e6a:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 8017e6e:	d915      	bls.n	8017e9c <rmw_validate_node_name+0x5c>
 8017e70:	f1bc 0f19 	cmp.w	ip, #25
 8017e74:	d912      	bls.n	8017e9c <rmw_validate_node_name+0x5c>
 8017e76:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 8017e7a:	d00f      	beq.n	8017e9c <rmw_validate_node_name+0x5c>
 8017e7c:	2302      	movs	r3, #2
 8017e7e:	6033      	str	r3, [r6, #0]
 8017e80:	b11f      	cbz	r7, 8017e8a <rmw_validate_node_name+0x4a>
 8017e82:	f1c4 0401 	rsb	r4, r4, #1
 8017e86:	4414      	add	r4, r2
 8017e88:	603c      	str	r4, [r7, #0]
 8017e8a:	2000      	movs	r0, #0
 8017e8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017e8e:	2301      	movs	r3, #1
 8017e90:	6033      	str	r3, [r6, #0]
 8017e92:	2f00      	cmp	r7, #0
 8017e94:	d0f9      	beq.n	8017e8a <rmw_validate_node_name+0x4a>
 8017e96:	2300      	movs	r3, #0
 8017e98:	603b      	str	r3, [r7, #0]
 8017e9a:	e7f6      	b.n	8017e8a <rmw_validate_node_name+0x4a>
 8017e9c:	4299      	cmp	r1, r3
 8017e9e:	d1dc      	bne.n	8017e5a <rmw_validate_node_name+0x1a>
 8017ea0:	7823      	ldrb	r3, [r4, #0]
 8017ea2:	4a0c      	ldr	r2, [pc, #48]	@ (8017ed4 <rmw_validate_node_name+0x94>)
 8017ea4:	5cd3      	ldrb	r3, [r2, r3]
 8017ea6:	f013 0304 	ands.w	r3, r3, #4
 8017eaa:	d10e      	bne.n	8017eca <rmw_validate_node_name+0x8a>
 8017eac:	28ff      	cmp	r0, #255	@ 0xff
 8017eae:	d805      	bhi.n	8017ebc <rmw_validate_node_name+0x7c>
 8017eb0:	6033      	str	r3, [r6, #0]
 8017eb2:	e7ea      	b.n	8017e8a <rmw_validate_node_name+0x4a>
 8017eb4:	200b      	movs	r0, #11
 8017eb6:	4770      	bx	lr
 8017eb8:	200b      	movs	r0, #11
 8017eba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017ebc:	2304      	movs	r3, #4
 8017ebe:	6033      	str	r3, [r6, #0]
 8017ec0:	2f00      	cmp	r7, #0
 8017ec2:	d0e2      	beq.n	8017e8a <rmw_validate_node_name+0x4a>
 8017ec4:	23fe      	movs	r3, #254	@ 0xfe
 8017ec6:	603b      	str	r3, [r7, #0]
 8017ec8:	e7df      	b.n	8017e8a <rmw_validate_node_name+0x4a>
 8017eca:	2303      	movs	r3, #3
 8017ecc:	6033      	str	r3, [r6, #0]
 8017ece:	2f00      	cmp	r7, #0
 8017ed0:	d1e1      	bne.n	8017e96 <rmw_validate_node_name+0x56>
 8017ed2:	e7da      	b.n	8017e8a <rmw_validate_node_name+0x4a>
 8017ed4:	080209e9 	.word	0x080209e9

08017ed8 <rmw_node_name_validation_result_string>:
 8017ed8:	2804      	cmp	r0, #4
 8017eda:	bf9a      	itte	ls
 8017edc:	4b02      	ldrls	r3, [pc, #8]	@ (8017ee8 <rmw_node_name_validation_result_string+0x10>)
 8017ede:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8017ee2:	4802      	ldrhi	r0, [pc, #8]	@ (8017eec <rmw_node_name_validation_result_string+0x14>)
 8017ee4:	4770      	bx	lr
 8017ee6:	bf00      	nop
 8017ee8:	0802031c 	.word	0x0802031c
 8017eec:	0801f674 	.word	0x0801f674

08017ef0 <get_memory>:
 8017ef0:	4603      	mov	r3, r0
 8017ef2:	6840      	ldr	r0, [r0, #4]
 8017ef4:	b158      	cbz	r0, 8017f0e <get_memory+0x1e>
 8017ef6:	6842      	ldr	r2, [r0, #4]
 8017ef8:	605a      	str	r2, [r3, #4]
 8017efa:	b10a      	cbz	r2, 8017f00 <get_memory+0x10>
 8017efc:	2100      	movs	r1, #0
 8017efe:	6011      	str	r1, [r2, #0]
 8017f00:	681a      	ldr	r2, [r3, #0]
 8017f02:	6042      	str	r2, [r0, #4]
 8017f04:	b102      	cbz	r2, 8017f08 <get_memory+0x18>
 8017f06:	6010      	str	r0, [r2, #0]
 8017f08:	2200      	movs	r2, #0
 8017f0a:	6002      	str	r2, [r0, #0]
 8017f0c:	6018      	str	r0, [r3, #0]
 8017f0e:	4770      	bx	lr

08017f10 <put_memory>:
 8017f10:	680b      	ldr	r3, [r1, #0]
 8017f12:	b10b      	cbz	r3, 8017f18 <put_memory+0x8>
 8017f14:	684a      	ldr	r2, [r1, #4]
 8017f16:	605a      	str	r2, [r3, #4]
 8017f18:	684a      	ldr	r2, [r1, #4]
 8017f1a:	b102      	cbz	r2, 8017f1e <put_memory+0xe>
 8017f1c:	6013      	str	r3, [r2, #0]
 8017f1e:	6803      	ldr	r3, [r0, #0]
 8017f20:	428b      	cmp	r3, r1
 8017f22:	6843      	ldr	r3, [r0, #4]
 8017f24:	bf08      	it	eq
 8017f26:	6002      	streq	r2, [r0, #0]
 8017f28:	604b      	str	r3, [r1, #4]
 8017f2a:	b103      	cbz	r3, 8017f2e <put_memory+0x1e>
 8017f2c:	6019      	str	r1, [r3, #0]
 8017f2e:	2300      	movs	r3, #0
 8017f30:	600b      	str	r3, [r1, #0]
 8017f32:	6041      	str	r1, [r0, #4]
 8017f34:	4770      	bx	lr
 8017f36:	bf00      	nop

08017f38 <rmw_destroy_client>:
 8017f38:	b570      	push	{r4, r5, r6, lr}
 8017f3a:	b128      	cbz	r0, 8017f48 <rmw_destroy_client+0x10>
 8017f3c:	4604      	mov	r4, r0
 8017f3e:	6800      	ldr	r0, [r0, #0]
 8017f40:	460d      	mov	r5, r1
 8017f42:	f7f5 ffdb 	bl	800defc <is_uxrce_rmw_identifier_valid>
 8017f46:	b910      	cbnz	r0, 8017f4e <rmw_destroy_client+0x16>
 8017f48:	2401      	movs	r4, #1
 8017f4a:	4620      	mov	r0, r4
 8017f4c:	bd70      	pop	{r4, r5, r6, pc}
 8017f4e:	6863      	ldr	r3, [r4, #4]
 8017f50:	2b00      	cmp	r3, #0
 8017f52:	d0f9      	beq.n	8017f48 <rmw_destroy_client+0x10>
 8017f54:	2d00      	cmp	r5, #0
 8017f56:	d0f7      	beq.n	8017f48 <rmw_destroy_client+0x10>
 8017f58:	6828      	ldr	r0, [r5, #0]
 8017f5a:	f7f5 ffcf 	bl	800defc <is_uxrce_rmw_identifier_valid>
 8017f5e:	2800      	cmp	r0, #0
 8017f60:	d0f2      	beq.n	8017f48 <rmw_destroy_client+0x10>
 8017f62:	686e      	ldr	r6, [r5, #4]
 8017f64:	2e00      	cmp	r6, #0
 8017f66:	d0ef      	beq.n	8017f48 <rmw_destroy_client+0x10>
 8017f68:	6864      	ldr	r4, [r4, #4]
 8017f6a:	6932      	ldr	r2, [r6, #16]
 8017f6c:	6920      	ldr	r0, [r4, #16]
 8017f6e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8017f72:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017f76:	6819      	ldr	r1, [r3, #0]
 8017f78:	f002 fe34 	bl	801abe4 <uxr_buffer_cancel_data>
 8017f7c:	4602      	mov	r2, r0
 8017f7e:	6920      	ldr	r0, [r4, #16]
 8017f80:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8017f84:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8017f88:	f7f5 fe98 	bl	800dcbc <run_xrce_session>
 8017f8c:	6920      	ldr	r0, [r4, #16]
 8017f8e:	6932      	ldr	r2, [r6, #16]
 8017f90:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8017f94:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017f98:	6819      	ldr	r1, [r3, #0]
 8017f9a:	f7f9 f9e9 	bl	8011370 <uxr_buffer_delete_entity>
 8017f9e:	4602      	mov	r2, r0
 8017fa0:	6920      	ldr	r0, [r4, #16]
 8017fa2:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8017fa6:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8017faa:	f7f5 fe87 	bl	800dcbc <run_xrce_session>
 8017fae:	f080 0401 	eor.w	r4, r0, #1
 8017fb2:	b2e4      	uxtb	r4, r4
 8017fb4:	4628      	mov	r0, r5
 8017fb6:	0064      	lsls	r4, r4, #1
 8017fb8:	f7f5 fd60 	bl	800da7c <rmw_uxrce_fini_client_memory>
 8017fbc:	e7c5      	b.n	8017f4a <rmw_destroy_client+0x12>
 8017fbe:	bf00      	nop

08017fc0 <rmw_get_gid_for_client>:
 8017fc0:	b1a8      	cbz	r0, 8017fee <rmw_get_gid_for_client+0x2e>
 8017fc2:	b538      	push	{r3, r4, r5, lr}
 8017fc4:	460c      	mov	r4, r1
 8017fc6:	b1a1      	cbz	r1, 8017ff2 <rmw_get_gid_for_client+0x32>
 8017fc8:	4605      	mov	r5, r0
 8017fca:	6800      	ldr	r0, [r0, #0]
 8017fcc:	b120      	cbz	r0, 8017fd8 <rmw_get_gid_for_client+0x18>
 8017fce:	4b0a      	ldr	r3, [pc, #40]	@ (8017ff8 <rmw_get_gid_for_client+0x38>)
 8017fd0:	6819      	ldr	r1, [r3, #0]
 8017fd2:	f7e8 f915 	bl	8000200 <strcmp>
 8017fd6:	b940      	cbnz	r0, 8017fea <rmw_get_gid_for_client+0x2a>
 8017fd8:	686b      	ldr	r3, [r5, #4]
 8017fda:	2000      	movs	r0, #0
 8017fdc:	6060      	str	r0, [r4, #4]
 8017fde:	60a0      	str	r0, [r4, #8]
 8017fe0:	60e0      	str	r0, [r4, #12]
 8017fe2:	6120      	str	r0, [r4, #16]
 8017fe4:	691b      	ldr	r3, [r3, #16]
 8017fe6:	6063      	str	r3, [r4, #4]
 8017fe8:	bd38      	pop	{r3, r4, r5, pc}
 8017fea:	200c      	movs	r0, #12
 8017fec:	bd38      	pop	{r3, r4, r5, pc}
 8017fee:	200b      	movs	r0, #11
 8017ff0:	4770      	bx	lr
 8017ff2:	200b      	movs	r0, #11
 8017ff4:	bd38      	pop	{r3, r4, r5, pc}
 8017ff6:	bf00      	nop
 8017ff8:	08020330 	.word	0x08020330

08017ffc <rmw_get_implementation_identifier>:
 8017ffc:	4b01      	ldr	r3, [pc, #4]	@ (8018004 <rmw_get_implementation_identifier+0x8>)
 8017ffe:	6818      	ldr	r0, [r3, #0]
 8018000:	4770      	bx	lr
 8018002:	bf00      	nop
 8018004:	08020330 	.word	0x08020330

08018008 <rmw_init_options_init>:
 8018008:	b084      	sub	sp, #16
 801800a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801800c:	b083      	sub	sp, #12
 801800e:	ad09      	add	r5, sp, #36	@ 0x24
 8018010:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 8018014:	b130      	cbz	r0, 8018024 <rmw_init_options_init+0x1c>
 8018016:	4604      	mov	r4, r0
 8018018:	4628      	mov	r0, r5
 801801a:	f7f5 f91f 	bl	800d25c <rcutils_allocator_is_valid>
 801801e:	b108      	cbz	r0, 8018024 <rmw_init_options_init+0x1c>
 8018020:	68a6      	ldr	r6, [r4, #8]
 8018022:	b12e      	cbz	r6, 8018030 <rmw_init_options_init+0x28>
 8018024:	200b      	movs	r0, #11
 8018026:	b003      	add	sp, #12
 8018028:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801802c:	b004      	add	sp, #16
 801802e:	4770      	bx	lr
 8018030:	2200      	movs	r2, #0
 8018032:	2300      	movs	r3, #0
 8018034:	e9c4 2300 	strd	r2, r3, [r4]
 8018038:	4b20      	ldr	r3, [pc, #128]	@ (80180bc <rmw_init_options_init+0xb4>)
 801803a:	681b      	ldr	r3, [r3, #0]
 801803c:	60a3      	str	r3, [r4, #8]
 801803e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018040:	f104 0c40 	add.w	ip, r4, #64	@ 0x40
 8018044:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018048:	466f      	mov	r7, sp
 801804a:	682b      	ldr	r3, [r5, #0]
 801804c:	f8cc 3000 	str.w	r3, [ip]
 8018050:	4638      	mov	r0, r7
 8018052:	63e6      	str	r6, [r4, #60]	@ 0x3c
 8018054:	60e6      	str	r6, [r4, #12]
 8018056:	f7ff fd6b 	bl	8017b30 <rmw_get_default_security_options>
 801805a:	e897 0003 	ldmia.w	r7, {r0, r1}
 801805e:	f104 0310 	add.w	r3, r4, #16
 8018062:	e883 0003 	stmia.w	r3, {r0, r1}
 8018066:	2203      	movs	r2, #3
 8018068:	4815      	ldr	r0, [pc, #84]	@ (80180c0 <rmw_init_options_init+0xb8>)
 801806a:	4916      	ldr	r1, [pc, #88]	@ (80180c4 <rmw_init_options_init+0xbc>)
 801806c:	7626      	strb	r6, [r4, #24]
 801806e:	f7f5 fc45 	bl	800d8fc <rmw_uxrce_init_init_options_impl_memory>
 8018072:	4813      	ldr	r0, [pc, #76]	@ (80180c0 <rmw_init_options_init+0xb8>)
 8018074:	f7ff ff3c 	bl	8017ef0 <get_memory>
 8018078:	b1f0      	cbz	r0, 80180b8 <rmw_init_options_init+0xb0>
 801807a:	4a13      	ldr	r2, [pc, #76]	@ (80180c8 <rmw_init_options_init+0xc0>)
 801807c:	6883      	ldr	r3, [r0, #8]
 801807e:	6851      	ldr	r1, [r2, #4]
 8018080:	7810      	ldrb	r0, [r2, #0]
 8018082:	6563      	str	r3, [r4, #84]	@ 0x54
 8018084:	7418      	strb	r0, [r3, #16]
 8018086:	6159      	str	r1, [r3, #20]
 8018088:	68d1      	ldr	r1, [r2, #12]
 801808a:	61d9      	str	r1, [r3, #28]
 801808c:	6911      	ldr	r1, [r2, #16]
 801808e:	6219      	str	r1, [r3, #32]
 8018090:	6951      	ldr	r1, [r2, #20]
 8018092:	6892      	ldr	r2, [r2, #8]
 8018094:	619a      	str	r2, [r3, #24]
 8018096:	6259      	str	r1, [r3, #36]	@ 0x24
 8018098:	f7fa fd82 	bl	8012ba0 <uxr_nanos>
 801809c:	f004 feec 	bl	801ce78 <srand>
 80180a0:	f004 ff18 	bl	801ced4 <rand>
 80180a4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80180a6:	6298      	str	r0, [r3, #40]	@ 0x28
 80180a8:	2800      	cmp	r0, #0
 80180aa:	d0f9      	beq.n	80180a0 <rmw_init_options_init+0x98>
 80180ac:	2000      	movs	r0, #0
 80180ae:	b003      	add	sp, #12
 80180b0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80180b4:	b004      	add	sp, #16
 80180b6:	4770      	bx	lr
 80180b8:	2001      	movs	r0, #1
 80180ba:	e7b4      	b.n	8018026 <rmw_init_options_init+0x1e>
 80180bc:	08020330 	.word	0x08020330
 80180c0:	20013878 	.word	0x20013878
 80180c4:	200137f4 	.word	0x200137f4
 80180c8:	200136c8 	.word	0x200136c8

080180cc <rmw_init_options_copy>:
 80180cc:	b570      	push	{r4, r5, r6, lr}
 80180ce:	b088      	sub	sp, #32
 80180d0:	b160      	cbz	r0, 80180ec <rmw_init_options_copy+0x20>
 80180d2:	460d      	mov	r5, r1
 80180d4:	b151      	cbz	r1, 80180ec <rmw_init_options_copy+0x20>
 80180d6:	4604      	mov	r4, r0
 80180d8:	6880      	ldr	r0, [r0, #8]
 80180da:	b128      	cbz	r0, 80180e8 <rmw_init_options_copy+0x1c>
 80180dc:	4b29      	ldr	r3, [pc, #164]	@ (8018184 <rmw_init_options_copy+0xb8>)
 80180de:	6819      	ldr	r1, [r3, #0]
 80180e0:	f7e8 f88e 	bl	8000200 <strcmp>
 80180e4:	2800      	cmp	r0, #0
 80180e6:	d140      	bne.n	801816a <rmw_init_options_copy+0x9e>
 80180e8:	68ab      	ldr	r3, [r5, #8]
 80180ea:	b11b      	cbz	r3, 80180f4 <rmw_init_options_copy+0x28>
 80180ec:	240b      	movs	r4, #11
 80180ee:	4620      	mov	r0, r4
 80180f0:	b008      	add	sp, #32
 80180f2:	bd70      	pop	{r4, r5, r6, pc}
 80180f4:	2258      	movs	r2, #88	@ 0x58
 80180f6:	4621      	mov	r1, r4
 80180f8:	4628      	mov	r0, r5
 80180fa:	f005 fa5e 	bl	801d5ba <memcpy>
 80180fe:	f104 0e40 	add.w	lr, r4, #64	@ 0x40
 8018102:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018106:	f10d 0c0c 	add.w	ip, sp, #12
 801810a:	4666      	mov	r6, ip
 801810c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018110:	f8de 3000 	ldr.w	r3, [lr]
 8018114:	f8cc 3000 	str.w	r3, [ip]
 8018118:	4630      	mov	r0, r6
 801811a:	f7f5 f89f 	bl	800d25c <rcutils_allocator_is_valid>
 801811e:	2800      	cmp	r0, #0
 8018120:	d0e4      	beq.n	80180ec <rmw_init_options_copy+0x20>
 8018122:	ab08      	add	r3, sp, #32
 8018124:	e913 0003 	ldmdb	r3, {r0, r1}
 8018128:	e88d 0003 	stmia.w	sp, {r0, r1}
 801812c:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8018130:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8018132:	f7ff fb41 	bl	80177b8 <rcutils_strdup>
 8018136:	63e8      	str	r0, [r5, #60]	@ 0x3c
 8018138:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801813a:	b103      	cbz	r3, 801813e <rmw_init_options_copy+0x72>
 801813c:	b1f8      	cbz	r0, 801817e <rmw_init_options_copy+0xb2>
 801813e:	4812      	ldr	r0, [pc, #72]	@ (8018188 <rmw_init_options_copy+0xbc>)
 8018140:	f7ff fed6 	bl	8017ef0 <get_memory>
 8018144:	b1a8      	cbz	r0, 8018172 <rmw_init_options_copy+0xa6>
 8018146:	6883      	ldr	r3, [r0, #8]
 8018148:	656b      	str	r3, [r5, #84]	@ 0x54
 801814a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801814c:	f102 0c10 	add.w	ip, r2, #16
 8018150:	f103 0510 	add.w	r5, r3, #16
 8018154:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8018158:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801815a:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 801815e:	2400      	movs	r4, #0
 8018160:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8018164:	4620      	mov	r0, r4
 8018166:	b008      	add	sp, #32
 8018168:	bd70      	pop	{r4, r5, r6, pc}
 801816a:	240c      	movs	r4, #12
 801816c:	4620      	mov	r0, r4
 801816e:	b008      	add	sp, #32
 8018170:	bd70      	pop	{r4, r5, r6, pc}
 8018172:	9b04      	ldr	r3, [sp, #16]
 8018174:	9907      	ldr	r1, [sp, #28]
 8018176:	6be8      	ldr	r0, [r5, #60]	@ 0x3c
 8018178:	4798      	blx	r3
 801817a:	2401      	movs	r4, #1
 801817c:	e7b7      	b.n	80180ee <rmw_init_options_copy+0x22>
 801817e:	240a      	movs	r4, #10
 8018180:	e7b5      	b.n	80180ee <rmw_init_options_copy+0x22>
 8018182:	bf00      	nop
 8018184:	08020330 	.word	0x08020330
 8018188:	20013878 	.word	0x20013878

0801818c <rmw_init_options_fini>:
 801818c:	2800      	cmp	r0, #0
 801818e:	d031      	beq.n	80181f4 <rmw_init_options_fini+0x68>
 8018190:	b510      	push	{r4, lr}
 8018192:	4604      	mov	r4, r0
 8018194:	b096      	sub	sp, #88	@ 0x58
 8018196:	3040      	adds	r0, #64	@ 0x40
 8018198:	f7f5 f860 	bl	800d25c <rcutils_allocator_is_valid>
 801819c:	b310      	cbz	r0, 80181e4 <rmw_init_options_fini+0x58>
 801819e:	68a0      	ldr	r0, [r4, #8]
 80181a0:	b120      	cbz	r0, 80181ac <rmw_init_options_fini+0x20>
 80181a2:	4b15      	ldr	r3, [pc, #84]	@ (80181f8 <rmw_init_options_fini+0x6c>)
 80181a4:	6819      	ldr	r1, [r3, #0]
 80181a6:	f7e8 f82b 	bl	8000200 <strcmp>
 80181aa:	bb08      	cbnz	r0, 80181f0 <rmw_init_options_fini+0x64>
 80181ac:	4b13      	ldr	r3, [pc, #76]	@ (80181fc <rmw_init_options_fini+0x70>)
 80181ae:	6819      	ldr	r1, [r3, #0]
 80181b0:	b1d9      	cbz	r1, 80181ea <rmw_init_options_fini+0x5e>
 80181b2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80181b4:	e001      	b.n	80181ba <rmw_init_options_fini+0x2e>
 80181b6:	6849      	ldr	r1, [r1, #4]
 80181b8:	b1b9      	cbz	r1, 80181ea <rmw_init_options_fini+0x5e>
 80181ba:	688b      	ldr	r3, [r1, #8]
 80181bc:	429a      	cmp	r2, r3
 80181be:	d1fa      	bne.n	80181b6 <rmw_init_options_fini+0x2a>
 80181c0:	480e      	ldr	r0, [pc, #56]	@ (80181fc <rmw_init_options_fini+0x70>)
 80181c2:	f7ff fea5 	bl	8017f10 <put_memory>
 80181c6:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80181c8:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 80181ca:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80181cc:	4798      	blx	r3
 80181ce:	4668      	mov	r0, sp
 80181d0:	f7ff fc86 	bl	8017ae0 <rmw_get_zero_initialized_init_options>
 80181d4:	2258      	movs	r2, #88	@ 0x58
 80181d6:	4669      	mov	r1, sp
 80181d8:	4620      	mov	r0, r4
 80181da:	f005 f9ee 	bl	801d5ba <memcpy>
 80181de:	2000      	movs	r0, #0
 80181e0:	b016      	add	sp, #88	@ 0x58
 80181e2:	bd10      	pop	{r4, pc}
 80181e4:	200b      	movs	r0, #11
 80181e6:	b016      	add	sp, #88	@ 0x58
 80181e8:	bd10      	pop	{r4, pc}
 80181ea:	2001      	movs	r0, #1
 80181ec:	b016      	add	sp, #88	@ 0x58
 80181ee:	bd10      	pop	{r4, pc}
 80181f0:	200c      	movs	r0, #12
 80181f2:	e7f5      	b.n	80181e0 <rmw_init_options_fini+0x54>
 80181f4:	200b      	movs	r0, #11
 80181f6:	4770      	bx	lr
 80181f8:	08020330 	.word	0x08020330
 80181fc:	20013878 	.word	0x20013878

08018200 <rmw_init>:
 8018200:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018204:	b083      	sub	sp, #12
 8018206:	2800      	cmp	r0, #0
 8018208:	f000 80d4 	beq.w	80183b4 <rmw_init+0x1b4>
 801820c:	460e      	mov	r6, r1
 801820e:	2900      	cmp	r1, #0
 8018210:	f000 80d0 	beq.w	80183b4 <rmw_init+0x1b4>
 8018214:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8018216:	4605      	mov	r5, r0
 8018218:	2b00      	cmp	r3, #0
 801821a:	f000 80cb 	beq.w	80183b4 <rmw_init+0x1b4>
 801821e:	4b77      	ldr	r3, [pc, #476]	@ (80183fc <rmw_init+0x1fc>)
 8018220:	6880      	ldr	r0, [r0, #8]
 8018222:	681f      	ldr	r7, [r3, #0]
 8018224:	b128      	cbz	r0, 8018232 <rmw_init+0x32>
 8018226:	4639      	mov	r1, r7
 8018228:	f7e7 ffea 	bl	8000200 <strcmp>
 801822c:	2800      	cmp	r0, #0
 801822e:	f040 80d3 	bne.w	80183d8 <rmw_init+0x1d8>
 8018232:	e9d5 2300 	ldrd	r2, r3, [r5]
 8018236:	4c72      	ldr	r4, [pc, #456]	@ (8018400 <rmw_init+0x200>)
 8018238:	4972      	ldr	r1, [pc, #456]	@ (8018404 <rmw_init+0x204>)
 801823a:	4873      	ldr	r0, [pc, #460]	@ (8018408 <rmw_init+0x208>)
 801823c:	60b7      	str	r7, [r6, #8]
 801823e:	e9c6 2300 	strd	r2, r3, [r6]
 8018242:	68eb      	ldr	r3, [r5, #12]
 8018244:	66b3      	str	r3, [r6, #104]	@ 0x68
 8018246:	2201      	movs	r2, #1
 8018248:	f7f5 faf8 	bl	800d83c <rmw_uxrce_init_session_memory>
 801824c:	4620      	mov	r0, r4
 801824e:	496f      	ldr	r1, [pc, #444]	@ (801840c <rmw_init+0x20c>)
 8018250:	2204      	movs	r2, #4
 8018252:	f7f5 fb33 	bl	800d8bc <rmw_uxrce_init_static_input_buffer_memory>
 8018256:	f04f 0800 	mov.w	r8, #0
 801825a:	486b      	ldr	r0, [pc, #428]	@ (8018408 <rmw_init+0x208>)
 801825c:	f884 800d 	strb.w	r8, [r4, #13]
 8018260:	f7ff fe46 	bl	8017ef0 <get_memory>
 8018264:	2800      	cmp	r0, #0
 8018266:	f000 80b2 	beq.w	80183ce <rmw_init+0x1ce>
 801826a:	6884      	ldr	r4, [r0, #8]
 801826c:	6d68      	ldr	r0, [r5, #84]	@ 0x54
 801826e:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 8018270:	f890 c010 	ldrb.w	ip, [r0, #16]
 8018274:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 8018278:	9101      	str	r1, [sp, #4]
 801827a:	6a00      	ldr	r0, [r0, #32]
 801827c:	9000      	str	r0, [sp, #0]
 801827e:	f104 0910 	add.w	r9, r4, #16
 8018282:	4661      	mov	r1, ip
 8018284:	4648      	mov	r0, r9
 8018286:	f001 ff01 	bl	801a08c <uxr_set_custom_transport_callbacks>
 801828a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801828e:	e9c4 33e3 	strd	r3, r3, [r4, #908]	@ 0x38c
 8018292:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 8018296:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 801829a:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 801829e:	495c      	ldr	r1, [pc, #368]	@ (8018410 <rmw_init+0x210>)
 80182a0:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 80182a4:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 80182a8:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 80182ac:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 80182b0:	4858      	ldr	r0, [pc, #352]	@ (8018414 <rmw_init+0x214>)
 80182b2:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 80182b6:	2201      	movs	r2, #1
 80182b8:	66f4      	str	r4, [r6, #108]	@ 0x6c
 80182ba:	f7f5 fa9f 	bl	800d7fc <rmw_uxrce_init_node_memory>
 80182be:	4956      	ldr	r1, [pc, #344]	@ (8018418 <rmw_init+0x218>)
 80182c0:	4856      	ldr	r0, [pc, #344]	@ (801841c <rmw_init+0x21c>)
 80182c2:	220a      	movs	r2, #10
 80182c4:	f7f5 fa7a 	bl	800d7bc <rmw_uxrce_init_subscription_memory>
 80182c8:	4955      	ldr	r1, [pc, #340]	@ (8018420 <rmw_init+0x220>)
 80182ca:	4856      	ldr	r0, [pc, #344]	@ (8018424 <rmw_init+0x224>)
 80182cc:	220a      	movs	r2, #10
 80182ce:	f7f5 fa55 	bl	800d77c <rmw_uxrce_init_publisher_memory>
 80182d2:	4955      	ldr	r1, [pc, #340]	@ (8018428 <rmw_init+0x228>)
 80182d4:	4855      	ldr	r0, [pc, #340]	@ (801842c <rmw_init+0x22c>)
 80182d6:	220a      	movs	r2, #10
 80182d8:	f7f5 fa10 	bl	800d6fc <rmw_uxrce_init_service_memory>
 80182dc:	4954      	ldr	r1, [pc, #336]	@ (8018430 <rmw_init+0x230>)
 80182de:	4855      	ldr	r0, [pc, #340]	@ (8018434 <rmw_init+0x234>)
 80182e0:	220a      	movs	r2, #10
 80182e2:	f7f5 fa2b 	bl	800d73c <rmw_uxrce_init_client_memory>
 80182e6:	4954      	ldr	r1, [pc, #336]	@ (8018438 <rmw_init+0x238>)
 80182e8:	4854      	ldr	r0, [pc, #336]	@ (801843c <rmw_init+0x23c>)
 80182ea:	2214      	movs	r2, #20
 80182ec:	f7f5 fac6 	bl	800d87c <rmw_uxrce_init_topic_memory>
 80182f0:	4953      	ldr	r1, [pc, #332]	@ (8018440 <rmw_init+0x240>)
 80182f2:	4854      	ldr	r0, [pc, #336]	@ (8018444 <rmw_init+0x244>)
 80182f4:	2203      	movs	r2, #3
 80182f6:	f7f5 fb01 	bl	800d8fc <rmw_uxrce_init_init_options_impl_memory>
 80182fa:	4953      	ldr	r1, [pc, #332]	@ (8018448 <rmw_init+0x248>)
 80182fc:	4853      	ldr	r0, [pc, #332]	@ (801844c <rmw_init+0x24c>)
 80182fe:	2204      	movs	r2, #4
 8018300:	f7f5 fb1c 	bl	800d93c <rmw_uxrce_init_wait_set_memory>
 8018304:	4952      	ldr	r1, [pc, #328]	@ (8018450 <rmw_init+0x250>)
 8018306:	4853      	ldr	r0, [pc, #332]	@ (8018454 <rmw_init+0x254>)
 8018308:	2204      	movs	r2, #4
 801830a:	f7f5 fb37 	bl	800d97c <rmw_uxrce_init_guard_condition_memory>
 801830e:	6d69      	ldr	r1, [r5, #84]	@ 0x54
 8018310:	6ef0      	ldr	r0, [r6, #108]	@ 0x6c
 8018312:	4642      	mov	r2, r8
 8018314:	f000 fe80 	bl	8019018 <rmw_uxrce_transport_init>
 8018318:	4607      	mov	r7, r0
 801831a:	2800      	cmp	r0, #0
 801831c:	d161      	bne.n	80183e2 <rmw_init+0x1e2>
 801831e:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 8018320:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 8018324:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8018326:	4628      	mov	r0, r5
 8018328:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 801832c:	f7f9 faf0 	bl	8011910 <uxr_init_session>
 8018330:	4628      	mov	r0, r5
 8018332:	4949      	ldr	r1, [pc, #292]	@ (8018458 <rmw_init+0x258>)
 8018334:	4622      	mov	r2, r4
 8018336:	f7f9 fb0f 	bl	8011958 <uxr_set_topic_callback>
 801833a:	4628      	mov	r0, r5
 801833c:	4947      	ldr	r1, [pc, #284]	@ (801845c <rmw_init+0x25c>)
 801833e:	463a      	mov	r2, r7
 8018340:	f7f9 fb06 	bl	8011950 <uxr_set_status_callback>
 8018344:	4628      	mov	r0, r5
 8018346:	4946      	ldr	r1, [pc, #280]	@ (8018460 <rmw_init+0x260>)
 8018348:	463a      	mov	r2, r7
 801834a:	f7f9 fb09 	bl	8011960 <uxr_set_request_callback>
 801834e:	4628      	mov	r0, r5
 8018350:	4944      	ldr	r1, [pc, #272]	@ (8018464 <rmw_init+0x264>)
 8018352:	463a      	mov	r2, r7
 8018354:	f7f9 fb08 	bl	8011968 <uxr_set_reply_callback>
 8018358:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 801835c:	2304      	movs	r3, #4
 801835e:	0092      	lsls	r2, r2, #2
 8018360:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 8018364:	4628      	mov	r0, r5
 8018366:	f7f9 fb2d 	bl	80119c4 <uxr_create_input_reliable_stream>
 801836a:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 801836e:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 8018372:	2304      	movs	r3, #4
 8018374:	0092      	lsls	r2, r2, #2
 8018376:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 801837a:	4628      	mov	r0, r5
 801837c:	f7f9 fb0a 	bl	8011994 <uxr_create_output_reliable_stream>
 8018380:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 8018384:	4628      	mov	r0, r5
 8018386:	f7f9 fb17 	bl	80119b8 <uxr_create_input_best_effort_stream>
 801838a:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 801838e:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8018392:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 8018396:	3114      	adds	r1, #20
 8018398:	4628      	mov	r0, r5
 801839a:	f7f9 fae9 	bl	8011970 <uxr_create_output_best_effort_stream>
 801839e:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 80183a2:	4628      	mov	r0, r5
 80183a4:	f7fa f832 	bl	801240c <uxr_create_session>
 80183a8:	4605      	mov	r5, r0
 80183aa:	b140      	cbz	r0, 80183be <rmw_init+0x1be>
 80183ac:	4638      	mov	r0, r7
 80183ae:	b003      	add	sp, #12
 80183b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80183b4:	270b      	movs	r7, #11
 80183b6:	4638      	mov	r0, r7
 80183b8:	b003      	add	sp, #12
 80183ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80183be:	4648      	mov	r0, r9
 80183c0:	f001 fea6 	bl	801a110 <uxr_close_custom_transport>
 80183c4:	4810      	ldr	r0, [pc, #64]	@ (8018408 <rmw_init+0x208>)
 80183c6:	4621      	mov	r1, r4
 80183c8:	f7ff fda2 	bl	8017f10 <put_memory>
 80183cc:	66f5      	str	r5, [r6, #108]	@ 0x6c
 80183ce:	2701      	movs	r7, #1
 80183d0:	4638      	mov	r0, r7
 80183d2:	b003      	add	sp, #12
 80183d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80183d8:	270c      	movs	r7, #12
 80183da:	4638      	mov	r0, r7
 80183dc:	b003      	add	sp, #12
 80183de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80183e2:	4648      	mov	r0, r9
 80183e4:	f001 fe94 	bl	801a110 <uxr_close_custom_transport>
 80183e8:	4807      	ldr	r0, [pc, #28]	@ (8018408 <rmw_init+0x208>)
 80183ea:	4621      	mov	r1, r4
 80183ec:	f7ff fd90 	bl	8017f10 <put_memory>
 80183f0:	4638      	mov	r0, r7
 80183f2:	f8c6 806c 	str.w	r8, [r6, #108]	@ 0x6c
 80183f6:	b003      	add	sp, #12
 80183f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80183fc:	08020330 	.word	0x08020330
 8018400:	20015988 	.word	0x20015988
 8018404:	20017d50 	.word	0x20017d50
 8018408:	200192f8 	.word	0x200192f8
 801840c:	20013888 	.word	0x20013888
 8018410:	20017c98 	.word	0x20017c98
 8018414:	20017d3c 	.word	0x20017d3c
 8018418:	20016b98 	.word	0x20016b98
 801841c:	20017408 	.word	0x20017408
 8018420:	20017418 	.word	0x20017418
 8018424:	20017c88 	.word	0x20017c88
 8018428:	200163b8 	.word	0x200163b8
 801842c:	20016b88 	.word	0x20016b88
 8018430:	20015bd8 	.word	0x20015bd8
 8018434:	200163a8 	.word	0x200163a8
 8018438:	20015998 	.word	0x20015998
 801843c:	20015bc8 	.word	0x20015bc8
 8018440:	200137f4 	.word	0x200137f4
 8018444:	20013878 	.word	0x20013878
 8018448:	20013774 	.word	0x20013774
 801844c:	200137e4 	.word	0x200137e4
 8018450:	200136e4 	.word	0x200136e4
 8018454:	20013764 	.word	0x20013764
 8018458:	0801c159 	.word	0x0801c159
 801845c:	0801c151 	.word	0x0801c151
 8018460:	0801c1f1 	.word	0x0801c1f1
 8018464:	0801c28d 	.word	0x0801c28d

08018468 <rmw_context_fini>:
 8018468:	4b17      	ldr	r3, [pc, #92]	@ (80184c8 <rmw_context_fini+0x60>)
 801846a:	b570      	push	{r4, r5, r6, lr}
 801846c:	681c      	ldr	r4, [r3, #0]
 801846e:	4605      	mov	r5, r0
 8018470:	6ec0      	ldr	r0, [r0, #108]	@ 0x6c
 8018472:	b33c      	cbz	r4, 80184c4 <rmw_context_fini+0x5c>
 8018474:	2600      	movs	r6, #0
 8018476:	e9d4 4301 	ldrd	r4, r3, [r4, #4]
 801847a:	691a      	ldr	r2, [r3, #16]
 801847c:	4282      	cmp	r2, r0
 801847e:	d018      	beq.n	80184b2 <rmw_context_fini+0x4a>
 8018480:	2c00      	cmp	r4, #0
 8018482:	d1f8      	bne.n	8018476 <rmw_context_fini+0xe>
 8018484:	b188      	cbz	r0, 80184aa <rmw_context_fini+0x42>
 8018486:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801848a:	789b      	ldrb	r3, [r3, #2]
 801848c:	2b01      	cmp	r3, #1
 801848e:	bf14      	ite	ne
 8018490:	210a      	movne	r1, #10
 8018492:	2100      	moveq	r1, #0
 8018494:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8018498:	f7f9 ff90 	bl	80123bc <uxr_delete_session_retries>
 801849c:	6ee8      	ldr	r0, [r5, #108]	@ 0x6c
 801849e:	f7f5 fa8d 	bl	800d9bc <rmw_uxrce_fini_session_memory>
 80184a2:	6ee8      	ldr	r0, [r5, #108]	@ 0x6c
 80184a4:	3010      	adds	r0, #16
 80184a6:	f001 fe33 	bl	801a110 <uxr_close_custom_transport>
 80184aa:	2300      	movs	r3, #0
 80184ac:	66eb      	str	r3, [r5, #108]	@ 0x6c
 80184ae:	4630      	mov	r0, r6
 80184b0:	bd70      	pop	{r4, r5, r6, pc}
 80184b2:	f103 0018 	add.w	r0, r3, #24
 80184b6:	f000 f911 	bl	80186dc <rmw_destroy_node>
 80184ba:	4606      	mov	r6, r0
 80184bc:	6ee8      	ldr	r0, [r5, #108]	@ 0x6c
 80184be:	2c00      	cmp	r4, #0
 80184c0:	d1d9      	bne.n	8018476 <rmw_context_fini+0xe>
 80184c2:	e7df      	b.n	8018484 <rmw_context_fini+0x1c>
 80184c4:	4626      	mov	r6, r4
 80184c6:	e7dd      	b.n	8018484 <rmw_context_fini+0x1c>
 80184c8:	20017d3c 	.word	0x20017d3c

080184cc <create_topic>:
 80184cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80184d0:	4604      	mov	r4, r0
 80184d2:	b084      	sub	sp, #16
 80184d4:	4824      	ldr	r0, [pc, #144]	@ (8018568 <create_topic+0x9c>)
 80184d6:	460f      	mov	r7, r1
 80184d8:	4616      	mov	r6, r2
 80184da:	f7ff fd09 	bl	8017ef0 <get_memory>
 80184de:	2800      	cmp	r0, #0
 80184e0:	d03c      	beq.n	801855c <create_topic+0x90>
 80184e2:	6923      	ldr	r3, [r4, #16]
 80184e4:	6885      	ldr	r5, [r0, #8]
 80184e6:	f8df 8088 	ldr.w	r8, [pc, #136]	@ 8018570 <create_topic+0xa4>
 80184ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80184ee:	e9c5 6405 	strd	r6, r4, [r5, #20]
 80184f2:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 80184f6:	1c42      	adds	r2, r0, #1
 80184f8:	2102      	movs	r1, #2
 80184fa:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 80184fe:	f7f9 f949 	bl	8011794 <uxr_object_id>
 8018502:	223c      	movs	r2, #60	@ 0x3c
 8018504:	6128      	str	r0, [r5, #16]
 8018506:	4641      	mov	r1, r8
 8018508:	4638      	mov	r0, r7
 801850a:	f7f5 fcdd 	bl	800dec8 <generate_topic_name>
 801850e:	b310      	cbz	r0, 8018556 <create_topic+0x8a>
 8018510:	4f16      	ldr	r7, [pc, #88]	@ (801856c <create_topic+0xa0>)
 8018512:	4630      	mov	r0, r6
 8018514:	2264      	movs	r2, #100	@ 0x64
 8018516:	4639      	mov	r1, r7
 8018518:	f7f5 fca6 	bl	800de68 <generate_type_name>
 801851c:	b1d8      	cbz	r0, 8018556 <create_topic+0x8a>
 801851e:	6920      	ldr	r0, [r4, #16]
 8018520:	2306      	movs	r3, #6
 8018522:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8018526:	f8cd 8000 	str.w	r8, [sp]
 801852a:	e9cd 7301 	strd	r7, r3, [sp, #4]
 801852e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8018532:	6811      	ldr	r1, [r2, #0]
 8018534:	6963      	ldr	r3, [r4, #20]
 8018536:	692a      	ldr	r2, [r5, #16]
 8018538:	f7f8 ff96 	bl	8011468 <uxr_buffer_create_topic_bin>
 801853c:	4602      	mov	r2, r0
 801853e:	6920      	ldr	r0, [r4, #16]
 8018540:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8018544:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8018548:	f7f5 fbb8 	bl	800dcbc <run_xrce_session>
 801854c:	b118      	cbz	r0, 8018556 <create_topic+0x8a>
 801854e:	4628      	mov	r0, r5
 8018550:	b004      	add	sp, #16
 8018552:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018556:	4628      	mov	r0, r5
 8018558:	f7f5 faa6 	bl	800daa8 <rmw_uxrce_fini_topic_memory>
 801855c:	2500      	movs	r5, #0
 801855e:	4628      	mov	r0, r5
 8018560:	b004      	add	sp, #16
 8018562:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018566:	bf00      	nop
 8018568:	20015bc8 	.word	0x20015bc8
 801856c:	20019644 	.word	0x20019644
 8018570:	200196a8 	.word	0x200196a8

08018574 <destroy_topic>:
 8018574:	b538      	push	{r3, r4, r5, lr}
 8018576:	6984      	ldr	r4, [r0, #24]
 8018578:	b1d4      	cbz	r4, 80185b0 <destroy_topic+0x3c>
 801857a:	4605      	mov	r5, r0
 801857c:	6920      	ldr	r0, [r4, #16]
 801857e:	692a      	ldr	r2, [r5, #16]
 8018580:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8018584:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8018588:	6819      	ldr	r1, [r3, #0]
 801858a:	f7f8 fef1 	bl	8011370 <uxr_buffer_delete_entity>
 801858e:	4602      	mov	r2, r0
 8018590:	6920      	ldr	r0, [r4, #16]
 8018592:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8018596:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801859a:	f7f5 fb8f 	bl	800dcbc <run_xrce_session>
 801859e:	f080 0401 	eor.w	r4, r0, #1
 80185a2:	b2e4      	uxtb	r4, r4
 80185a4:	4628      	mov	r0, r5
 80185a6:	0064      	lsls	r4, r4, #1
 80185a8:	f7f5 fa7e 	bl	800daa8 <rmw_uxrce_fini_topic_memory>
 80185ac:	4620      	mov	r0, r4
 80185ae:	bd38      	pop	{r3, r4, r5, pc}
 80185b0:	2401      	movs	r4, #1
 80185b2:	4620      	mov	r0, r4
 80185b4:	bd38      	pop	{r3, r4, r5, pc}
 80185b6:	bf00      	nop

080185b8 <create_node>:
 80185b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80185bc:	b083      	sub	sp, #12
 80185be:	2b00      	cmp	r3, #0
 80185c0:	d063      	beq.n	801868a <create_node+0xd2>
 80185c2:	4606      	mov	r6, r0
 80185c4:	4836      	ldr	r0, [pc, #216]	@ (80186a0 <create_node+0xe8>)
 80185c6:	460f      	mov	r7, r1
 80185c8:	4690      	mov	r8, r2
 80185ca:	461d      	mov	r5, r3
 80185cc:	f7ff fc90 	bl	8017ef0 <get_memory>
 80185d0:	2800      	cmp	r0, #0
 80185d2:	d05a      	beq.n	801868a <create_node+0xd2>
 80185d4:	6884      	ldr	r4, [r0, #8]
 80185d6:	6eeb      	ldr	r3, [r5, #108]	@ 0x6c
 80185d8:	6123      	str	r3, [r4, #16]
 80185da:	f7ff fd0f 	bl	8017ffc <rmw_get_implementation_identifier>
 80185de:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 80185e2:	e9c4 0406 	strd	r0, r4, [r4, #24]
 80185e6:	f8c4 9020 	str.w	r9, [r4, #32]
 80185ea:	4630      	mov	r0, r6
 80185ec:	f7e7 fe68 	bl	80002c0 <strlen>
 80185f0:	1c42      	adds	r2, r0, #1
 80185f2:	2a3c      	cmp	r2, #60	@ 0x3c
 80185f4:	f104 0518 	add.w	r5, r4, #24
 80185f8:	d844      	bhi.n	8018684 <create_node+0xcc>
 80185fa:	4648      	mov	r0, r9
 80185fc:	4631      	mov	r1, r6
 80185fe:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 8018602:	f004 ffda 	bl	801d5ba <memcpy>
 8018606:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 801860a:	4638      	mov	r0, r7
 801860c:	f7e7 fe58 	bl	80002c0 <strlen>
 8018610:	1c42      	adds	r2, r0, #1
 8018612:	2a3c      	cmp	r2, #60	@ 0x3c
 8018614:	d836      	bhi.n	8018684 <create_node+0xcc>
 8018616:	4639      	mov	r1, r7
 8018618:	4648      	mov	r0, r9
 801861a:	f004 ffce 	bl	801d5ba <memcpy>
 801861e:	6923      	ldr	r3, [r4, #16]
 8018620:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018624:	2101      	movs	r1, #1
 8018626:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 801862a:	1842      	adds	r2, r0, r1
 801862c:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 8018630:	f7f9 f8b0 	bl	8011794 <uxr_object_id>
 8018634:	6160      	str	r0, [r4, #20]
 8018636:	783b      	ldrb	r3, [r7, #0]
 8018638:	2b2f      	cmp	r3, #47	@ 0x2f
 801863a:	d128      	bne.n	801868e <create_node+0xd6>
 801863c:	787b      	ldrb	r3, [r7, #1]
 801863e:	bb33      	cbnz	r3, 801868e <create_node+0xd6>
 8018640:	4a18      	ldr	r2, [pc, #96]	@ (80186a4 <create_node+0xec>)
 8018642:	4819      	ldr	r0, [pc, #100]	@ (80186a8 <create_node+0xf0>)
 8018644:	4633      	mov	r3, r6
 8018646:	213c      	movs	r1, #60	@ 0x3c
 8018648:	f004 fbd4 	bl	801cdf4 <sniprintf>
 801864c:	6920      	ldr	r0, [r4, #16]
 801864e:	4916      	ldr	r1, [pc, #88]	@ (80186a8 <create_node+0xf0>)
 8018650:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8018654:	9100      	str	r1, [sp, #0]
 8018656:	2106      	movs	r1, #6
 8018658:	9101      	str	r1, [sp, #4]
 801865a:	6811      	ldr	r1, [r2, #0]
 801865c:	6962      	ldr	r2, [r4, #20]
 801865e:	fa1f f388 	uxth.w	r3, r8
 8018662:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8018666:	f7f8 fecd 	bl	8011404 <uxr_buffer_create_participant_bin>
 801866a:	4602      	mov	r2, r0
 801866c:	6920      	ldr	r0, [r4, #16]
 801866e:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8018672:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8018676:	f7f5 fb21 	bl	800dcbc <run_xrce_session>
 801867a:	b118      	cbz	r0, 8018684 <create_node+0xcc>
 801867c:	4628      	mov	r0, r5
 801867e:	b003      	add	sp, #12
 8018680:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018684:	4628      	mov	r0, r5
 8018686:	f7f5 f99f 	bl	800d9c8 <rmw_uxrce_fini_node_memory>
 801868a:	2500      	movs	r5, #0
 801868c:	e7f6      	b.n	801867c <create_node+0xc4>
 801868e:	4a07      	ldr	r2, [pc, #28]	@ (80186ac <create_node+0xf4>)
 8018690:	9600      	str	r6, [sp, #0]
 8018692:	463b      	mov	r3, r7
 8018694:	213c      	movs	r1, #60	@ 0x3c
 8018696:	4804      	ldr	r0, [pc, #16]	@ (80186a8 <create_node+0xf0>)
 8018698:	f004 fbac 	bl	801cdf4 <sniprintf>
 801869c:	e7d6      	b.n	801864c <create_node+0x94>
 801869e:	bf00      	nop
 80186a0:	20017d3c 	.word	0x20017d3c
 80186a4:	0801eddc 	.word	0x0801eddc
 80186a8:	200196e4 	.word	0x200196e4
 80186ac:	0801f420 	.word	0x0801f420

080186b0 <rmw_create_node>:
 80186b0:	b191      	cbz	r1, 80186d8 <rmw_create_node+0x28>
 80186b2:	b410      	push	{r4}
 80186b4:	4614      	mov	r4, r2
 80186b6:	780a      	ldrb	r2, [r1, #0]
 80186b8:	4603      	mov	r3, r0
 80186ba:	4608      	mov	r0, r1
 80186bc:	b142      	cbz	r2, 80186d0 <rmw_create_node+0x20>
 80186be:	b13c      	cbz	r4, 80186d0 <rmw_create_node+0x20>
 80186c0:	7822      	ldrb	r2, [r4, #0]
 80186c2:	b12a      	cbz	r2, 80186d0 <rmw_create_node+0x20>
 80186c4:	4621      	mov	r1, r4
 80186c6:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80186c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80186cc:	f7ff bf74 	b.w	80185b8 <create_node>
 80186d0:	2000      	movs	r0, #0
 80186d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80186d6:	4770      	bx	lr
 80186d8:	2000      	movs	r0, #0
 80186da:	4770      	bx	lr

080186dc <rmw_destroy_node>:
 80186dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80186de:	b328      	cbz	r0, 801872c <rmw_destroy_node+0x50>
 80186e0:	4607      	mov	r7, r0
 80186e2:	6800      	ldr	r0, [r0, #0]
 80186e4:	b120      	cbz	r0, 80186f0 <rmw_destroy_node+0x14>
 80186e6:	4b36      	ldr	r3, [pc, #216]	@ (80187c0 <rmw_destroy_node+0xe4>)
 80186e8:	6819      	ldr	r1, [r3, #0]
 80186ea:	f7e7 fd89 	bl	8000200 <strcmp>
 80186ee:	b9e8      	cbnz	r0, 801872c <rmw_destroy_node+0x50>
 80186f0:	687d      	ldr	r5, [r7, #4]
 80186f2:	b1dd      	cbz	r5, 801872c <rmw_destroy_node+0x50>
 80186f4:	4b33      	ldr	r3, [pc, #204]	@ (80187c4 <rmw_destroy_node+0xe8>)
 80186f6:	681c      	ldr	r4, [r3, #0]
 80186f8:	2c00      	cmp	r4, #0
 80186fa:	d05f      	beq.n	80187bc <rmw_destroy_node+0xe0>
 80186fc:	2600      	movs	r6, #0
 80186fe:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8018702:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 8018706:	429d      	cmp	r5, r3
 8018708:	d013      	beq.n	8018732 <rmw_destroy_node+0x56>
 801870a:	2c00      	cmp	r4, #0
 801870c:	d1f7      	bne.n	80186fe <rmw_destroy_node+0x22>
 801870e:	4b2e      	ldr	r3, [pc, #184]	@ (80187c8 <rmw_destroy_node+0xec>)
 8018710:	681c      	ldr	r4, [r3, #0]
 8018712:	b1c4      	cbz	r4, 8018746 <rmw_destroy_node+0x6a>
 8018714:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8018718:	6a0b      	ldr	r3, [r1, #32]
 801871a:	429d      	cmp	r5, r3
 801871c:	d1f9      	bne.n	8018712 <rmw_destroy_node+0x36>
 801871e:	317c      	adds	r1, #124	@ 0x7c
 8018720:	4638      	mov	r0, r7
 8018722:	f000 fbc7 	bl	8018eb4 <rmw_destroy_subscription>
 8018726:	2801      	cmp	r0, #1
 8018728:	4606      	mov	r6, r0
 801872a:	d1f2      	bne.n	8018712 <rmw_destroy_node+0x36>
 801872c:	2601      	movs	r6, #1
 801872e:	4630      	mov	r0, r6
 8018730:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018732:	3184      	adds	r1, #132	@ 0x84
 8018734:	4638      	mov	r0, r7
 8018736:	f7f4 ff8f 	bl	800d658 <rmw_destroy_publisher>
 801873a:	2801      	cmp	r0, #1
 801873c:	4606      	mov	r6, r0
 801873e:	d0f5      	beq.n	801872c <rmw_destroy_node+0x50>
 8018740:	2c00      	cmp	r4, #0
 8018742:	d1dc      	bne.n	80186fe <rmw_destroy_node+0x22>
 8018744:	e7e3      	b.n	801870e <rmw_destroy_node+0x32>
 8018746:	4b21      	ldr	r3, [pc, #132]	@ (80187cc <rmw_destroy_node+0xf0>)
 8018748:	681c      	ldr	r4, [r3, #0]
 801874a:	b16c      	cbz	r4, 8018768 <rmw_destroy_node+0x8c>
 801874c:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8018750:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 8018752:	429d      	cmp	r5, r3
 8018754:	d1f9      	bne.n	801874a <rmw_destroy_node+0x6e>
 8018756:	317c      	adds	r1, #124	@ 0x7c
 8018758:	4638      	mov	r0, r7
 801875a:	f000 fa5d 	bl	8018c18 <rmw_destroy_service>
 801875e:	2801      	cmp	r0, #1
 8018760:	4606      	mov	r6, r0
 8018762:	d0e3      	beq.n	801872c <rmw_destroy_node+0x50>
 8018764:	2c00      	cmp	r4, #0
 8018766:	d1f1      	bne.n	801874c <rmw_destroy_node+0x70>
 8018768:	4b19      	ldr	r3, [pc, #100]	@ (80187d0 <rmw_destroy_node+0xf4>)
 801876a:	681c      	ldr	r4, [r3, #0]
 801876c:	b16c      	cbz	r4, 801878a <rmw_destroy_node+0xae>
 801876e:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8018772:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 8018774:	429d      	cmp	r5, r3
 8018776:	d1f9      	bne.n	801876c <rmw_destroy_node+0x90>
 8018778:	317c      	adds	r1, #124	@ 0x7c
 801877a:	4638      	mov	r0, r7
 801877c:	f7ff fbdc 	bl	8017f38 <rmw_destroy_client>
 8018780:	2801      	cmp	r0, #1
 8018782:	4606      	mov	r6, r0
 8018784:	d0d2      	beq.n	801872c <rmw_destroy_node+0x50>
 8018786:	2c00      	cmp	r4, #0
 8018788:	d1f1      	bne.n	801876e <rmw_destroy_node+0x92>
 801878a:	6928      	ldr	r0, [r5, #16]
 801878c:	696a      	ldr	r2, [r5, #20]
 801878e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8018792:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8018796:	6819      	ldr	r1, [r3, #0]
 8018798:	f7f8 fdea 	bl	8011370 <uxr_buffer_delete_entity>
 801879c:	4602      	mov	r2, r0
 801879e:	6928      	ldr	r0, [r5, #16]
 80187a0:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80187a4:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80187a8:	f7f5 fa88 	bl	800dcbc <run_xrce_session>
 80187ac:	2800      	cmp	r0, #0
 80187ae:	bf08      	it	eq
 80187b0:	2602      	moveq	r6, #2
 80187b2:	4638      	mov	r0, r7
 80187b4:	f7f5 f908 	bl	800d9c8 <rmw_uxrce_fini_node_memory>
 80187b8:	4630      	mov	r0, r6
 80187ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80187bc:	4626      	mov	r6, r4
 80187be:	e7a6      	b.n	801870e <rmw_destroy_node+0x32>
 80187c0:	08020330 	.word	0x08020330
 80187c4:	20017c88 	.word	0x20017c88
 80187c8:	20017408 	.word	0x20017408
 80187cc:	20016b88 	.word	0x20016b88
 80187d0:	200163a8 	.word	0x200163a8

080187d4 <rmw_node_get_graph_guard_condition>:
 80187d4:	6843      	ldr	r3, [r0, #4]
 80187d6:	6918      	ldr	r0, [r3, #16]
 80187d8:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 80187dc:	4770      	bx	lr
 80187de:	bf00      	nop

080187e0 <rmw_send_request>:
 80187e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80187e4:	4604      	mov	r4, r0
 80187e6:	6800      	ldr	r0, [r0, #0]
 80187e8:	b08a      	sub	sp, #40	@ 0x28
 80187ea:	460e      	mov	r6, r1
 80187ec:	4615      	mov	r5, r2
 80187ee:	b128      	cbz	r0, 80187fc <rmw_send_request+0x1c>
 80187f0:	4b1e      	ldr	r3, [pc, #120]	@ (801886c <rmw_send_request+0x8c>)
 80187f2:	6819      	ldr	r1, [r3, #0]
 80187f4:	f7e7 fd04 	bl	8000200 <strcmp>
 80187f8:	2800      	cmp	r0, #0
 80187fa:	d133      	bne.n	8018864 <rmw_send_request+0x84>
 80187fc:	6864      	ldr	r4, [r4, #4]
 80187fe:	6963      	ldr	r3, [r4, #20]
 8018800:	6fa7      	ldr	r7, [r4, #120]	@ 0x78
 8018802:	689b      	ldr	r3, [r3, #8]
 8018804:	4798      	blx	r3
 8018806:	f8d0 8004 	ldr.w	r8, [r0, #4]
 801880a:	4630      	mov	r0, r6
 801880c:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8018810:	4798      	blx	r3
 8018812:	693b      	ldr	r3, [r7, #16]
 8018814:	9000      	str	r0, [sp, #0]
 8018816:	6922      	ldr	r2, [r4, #16]
 8018818:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 801881a:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 801881e:	ab02      	add	r3, sp, #8
 8018820:	f7fa fa60 	bl	8012ce4 <uxr_prepare_output_stream>
 8018824:	2300      	movs	r3, #0
 8018826:	6028      	str	r0, [r5, #0]
 8018828:	606b      	str	r3, [r5, #4]
 801882a:	b190      	cbz	r0, 8018852 <rmw_send_request+0x72>
 801882c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018830:	a902      	add	r1, sp, #8
 8018832:	4630      	mov	r0, r6
 8018834:	4798      	blx	r3
 8018836:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 801883a:	6938      	ldr	r0, [r7, #16]
 801883c:	2b01      	cmp	r3, #1
 801883e:	d00c      	beq.n	801885a <rmw_send_request+0x7a>
 8018840:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 8018842:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8018846:	f7f9 fc6b 	bl	8012120 <uxr_run_session_until_confirm_delivery>
 801884a:	2000      	movs	r0, #0
 801884c:	b00a      	add	sp, #40	@ 0x28
 801884e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018852:	2001      	movs	r0, #1
 8018854:	b00a      	add	sp, #40	@ 0x28
 8018856:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801885a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801885e:	f7f9 f8c7 	bl	80119f0 <uxr_flash_output_streams>
 8018862:	e7f2      	b.n	801884a <rmw_send_request+0x6a>
 8018864:	200c      	movs	r0, #12
 8018866:	b00a      	add	sp, #40	@ 0x28
 8018868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801886c:	08020330 	.word	0x08020330

08018870 <rmw_take_request>:
 8018870:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018874:	4605      	mov	r5, r0
 8018876:	6800      	ldr	r0, [r0, #0]
 8018878:	b089      	sub	sp, #36	@ 0x24
 801887a:	460c      	mov	r4, r1
 801887c:	4690      	mov	r8, r2
 801887e:	461e      	mov	r6, r3
 8018880:	b128      	cbz	r0, 801888e <rmw_take_request+0x1e>
 8018882:	4b28      	ldr	r3, [pc, #160]	@ (8018924 <rmw_take_request+0xb4>)
 8018884:	6819      	ldr	r1, [r3, #0]
 8018886:	f7e7 fcbb 	bl	8000200 <strcmp>
 801888a:	2800      	cmp	r0, #0
 801888c:	d146      	bne.n	801891c <rmw_take_request+0xac>
 801888e:	b10e      	cbz	r6, 8018894 <rmw_take_request+0x24>
 8018890:	2300      	movs	r3, #0
 8018892:	7033      	strb	r3, [r6, #0]
 8018894:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8018898:	f7f5 f992 	bl	800dbc0 <rmw_uxrce_clean_expired_static_input_buffer>
 801889c:	4648      	mov	r0, r9
 801889e:	f7f5 f967 	bl	800db70 <rmw_uxrce_find_static_input_buffer_by_owner>
 80188a2:	4607      	mov	r7, r0
 80188a4:	b3b0      	cbz	r0, 8018914 <rmw_take_request+0xa4>
 80188a6:	6885      	ldr	r5, [r0, #8]
 80188a8:	f8d5 3838 	ldr.w	r3, [r5, #2104]	@ 0x838
 80188ac:	f8d5 283c 	ldr.w	r2, [r5, #2108]	@ 0x83c
 80188b0:	e9c4 2308 	strd	r2, r3, [r4, #32]
 80188b4:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 80188b8:	7423      	strb	r3, [r4, #16]
 80188ba:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	@ 0x834
 80188be:	f895 2836 	ldrb.w	r2, [r5, #2102]	@ 0x836
 80188c2:	74e2      	strb	r2, [r4, #19]
 80188c4:	f8a4 3011 	strh.w	r3, [r4, #17]
 80188c8:	f8d5 2828 	ldr.w	r2, [r5, #2088]	@ 0x828
 80188cc:	f8d5 382c 	ldr.w	r3, [r5, #2092]	@ 0x82c
 80188d0:	f8d5 1830 	ldr.w	r1, [r5, #2096]	@ 0x830
 80188d4:	61e1      	str	r1, [r4, #28]
 80188d6:	6162      	str	r2, [r4, #20]
 80188d8:	61a3      	str	r3, [r4, #24]
 80188da:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80188de:	689b      	ldr	r3, [r3, #8]
 80188e0:	4798      	blx	r3
 80188e2:	6844      	ldr	r4, [r0, #4]
 80188e4:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 80188e8:	f105 0110 	add.w	r1, r5, #16
 80188ec:	4668      	mov	r0, sp
 80188ee:	f7f8 fc73 	bl	80111d8 <ucdr_init_buffer>
 80188f2:	68e3      	ldr	r3, [r4, #12]
 80188f4:	4641      	mov	r1, r8
 80188f6:	4668      	mov	r0, sp
 80188f8:	4798      	blx	r3
 80188fa:	4639      	mov	r1, r7
 80188fc:	4604      	mov	r4, r0
 80188fe:	480a      	ldr	r0, [pc, #40]	@ (8018928 <rmw_take_request+0xb8>)
 8018900:	f7ff fb06 	bl	8017f10 <put_memory>
 8018904:	b106      	cbz	r6, 8018908 <rmw_take_request+0x98>
 8018906:	7034      	strb	r4, [r6, #0]
 8018908:	f084 0001 	eor.w	r0, r4, #1
 801890c:	b2c0      	uxtb	r0, r0
 801890e:	b009      	add	sp, #36	@ 0x24
 8018910:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018914:	2001      	movs	r0, #1
 8018916:	b009      	add	sp, #36	@ 0x24
 8018918:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801891c:	200c      	movs	r0, #12
 801891e:	b009      	add	sp, #36	@ 0x24
 8018920:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018924:	08020330 	.word	0x08020330
 8018928:	20015988 	.word	0x20015988

0801892c <rmw_send_response>:
 801892c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801892e:	4605      	mov	r5, r0
 8018930:	6800      	ldr	r0, [r0, #0]
 8018932:	b091      	sub	sp, #68	@ 0x44
 8018934:	460c      	mov	r4, r1
 8018936:	4616      	mov	r6, r2
 8018938:	b128      	cbz	r0, 8018946 <rmw_send_response+0x1a>
 801893a:	4b28      	ldr	r3, [pc, #160]	@ (80189dc <rmw_send_response+0xb0>)
 801893c:	6819      	ldr	r1, [r3, #0]
 801893e:	f7e7 fc5f 	bl	8000200 <strcmp>
 8018942:	2800      	cmp	r0, #0
 8018944:	d141      	bne.n	80189ca <rmw_send_response+0x9e>
 8018946:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 801894a:	9306      	str	r3, [sp, #24]
 801894c:	4623      	mov	r3, r4
 801894e:	9207      	str	r2, [sp, #28]
 8018950:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018954:	686d      	ldr	r5, [r5, #4]
 8018956:	789b      	ldrb	r3, [r3, #2]
 8018958:	68a1      	ldr	r1, [r4, #8]
 801895a:	f88d 2017 	strb.w	r2, [sp, #23]
 801895e:	f88d 3016 	strb.w	r3, [sp, #22]
 8018962:	68e2      	ldr	r2, [r4, #12]
 8018964:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 8018968:	6860      	ldr	r0, [r4, #4]
 801896a:	f8ad 3014 	strh.w	r3, [sp, #20]
 801896e:	ab02      	add	r3, sp, #8
 8018970:	c307      	stmia	r3!, {r0, r1, r2}
 8018972:	696b      	ldr	r3, [r5, #20]
 8018974:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 8018976:	68db      	ldr	r3, [r3, #12]
 8018978:	4798      	blx	r3
 801897a:	6844      	ldr	r4, [r0, #4]
 801897c:	4630      	mov	r0, r6
 801897e:	6923      	ldr	r3, [r4, #16]
 8018980:	4798      	blx	r3
 8018982:	f100 0318 	add.w	r3, r0, #24
 8018986:	6938      	ldr	r0, [r7, #16]
 8018988:	9300      	str	r3, [sp, #0]
 801898a:	692a      	ldr	r2, [r5, #16]
 801898c:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 801898e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8018992:	ab08      	add	r3, sp, #32
 8018994:	f7fa f9a6 	bl	8012ce4 <uxr_prepare_output_stream>
 8018998:	b910      	cbnz	r0, 80189a0 <rmw_send_response+0x74>
 801899a:	2001      	movs	r0, #1
 801899c:	b011      	add	sp, #68	@ 0x44
 801899e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80189a0:	a902      	add	r1, sp, #8
 80189a2:	a808      	add	r0, sp, #32
 80189a4:	f7fb fade 	bl	8013f64 <uxr_serialize_SampleIdentity>
 80189a8:	68a3      	ldr	r3, [r4, #8]
 80189aa:	a908      	add	r1, sp, #32
 80189ac:	4630      	mov	r0, r6
 80189ae:	4798      	blx	r3
 80189b0:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 80189b4:	6938      	ldr	r0, [r7, #16]
 80189b6:	2b01      	cmp	r3, #1
 80189b8:	d00a      	beq.n	80189d0 <rmw_send_response+0xa4>
 80189ba:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 80189bc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80189c0:	f7f9 fbae 	bl	8012120 <uxr_run_session_until_confirm_delivery>
 80189c4:	2000      	movs	r0, #0
 80189c6:	b011      	add	sp, #68	@ 0x44
 80189c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80189ca:	200c      	movs	r0, #12
 80189cc:	b011      	add	sp, #68	@ 0x44
 80189ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80189d0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80189d4:	f7f9 f80c 	bl	80119f0 <uxr_flash_output_streams>
 80189d8:	e7f4      	b.n	80189c4 <rmw_send_response+0x98>
 80189da:	bf00      	nop
 80189dc:	08020330 	.word	0x08020330

080189e0 <rmw_take_response>:
 80189e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80189e4:	4604      	mov	r4, r0
 80189e6:	6800      	ldr	r0, [r0, #0]
 80189e8:	b088      	sub	sp, #32
 80189ea:	4688      	mov	r8, r1
 80189ec:	4617      	mov	r7, r2
 80189ee:	461d      	mov	r5, r3
 80189f0:	b120      	cbz	r0, 80189fc <rmw_take_response+0x1c>
 80189f2:	4b1e      	ldr	r3, [pc, #120]	@ (8018a6c <rmw_take_response+0x8c>)
 80189f4:	6819      	ldr	r1, [r3, #0]
 80189f6:	f7e7 fc03 	bl	8000200 <strcmp>
 80189fa:	bb78      	cbnz	r0, 8018a5c <rmw_take_response+0x7c>
 80189fc:	b10d      	cbz	r5, 8018a02 <rmw_take_response+0x22>
 80189fe:	2300      	movs	r3, #0
 8018a00:	702b      	strb	r3, [r5, #0]
 8018a02:	6864      	ldr	r4, [r4, #4]
 8018a04:	f7f5 f8dc 	bl	800dbc0 <rmw_uxrce_clean_expired_static_input_buffer>
 8018a08:	4620      	mov	r0, r4
 8018a0a:	f7f5 f8b1 	bl	800db70 <rmw_uxrce_find_static_input_buffer_by_owner>
 8018a0e:	4606      	mov	r6, r0
 8018a10:	b340      	cbz	r0, 8018a64 <rmw_take_response+0x84>
 8018a12:	6963      	ldr	r3, [r4, #20]
 8018a14:	6884      	ldr	r4, [r0, #8]
 8018a16:	68db      	ldr	r3, [r3, #12]
 8018a18:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 8018a1c:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 8018a20:	e9c8 0108 	strd	r0, r1, [r8, #32]
 8018a24:	4798      	blx	r3
 8018a26:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8018a2a:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 8018a2e:	f104 0110 	add.w	r1, r4, #16
 8018a32:	4668      	mov	r0, sp
 8018a34:	f7f8 fbd0 	bl	80111d8 <ucdr_init_buffer>
 8018a38:	4639      	mov	r1, r7
 8018a3a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8018a3e:	4668      	mov	r0, sp
 8018a40:	4798      	blx	r3
 8018a42:	4631      	mov	r1, r6
 8018a44:	4604      	mov	r4, r0
 8018a46:	480a      	ldr	r0, [pc, #40]	@ (8018a70 <rmw_take_response+0x90>)
 8018a48:	f7ff fa62 	bl	8017f10 <put_memory>
 8018a4c:	b105      	cbz	r5, 8018a50 <rmw_take_response+0x70>
 8018a4e:	702c      	strb	r4, [r5, #0]
 8018a50:	f084 0001 	eor.w	r0, r4, #1
 8018a54:	b2c0      	uxtb	r0, r0
 8018a56:	b008      	add	sp, #32
 8018a58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018a5c:	200c      	movs	r0, #12
 8018a5e:	b008      	add	sp, #32
 8018a60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018a64:	2001      	movs	r0, #1
 8018a66:	b008      	add	sp, #32
 8018a68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018a6c:	08020330 	.word	0x08020330
 8018a70:	20015988 	.word	0x20015988

08018a74 <rmw_create_service>:
 8018a74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018a78:	b091      	sub	sp, #68	@ 0x44
 8018a7a:	2800      	cmp	r0, #0
 8018a7c:	f000 80ba 	beq.w	8018bf4 <rmw_create_service+0x180>
 8018a80:	4689      	mov	r9, r1
 8018a82:	2900      	cmp	r1, #0
 8018a84:	f000 80b6 	beq.w	8018bf4 <rmw_create_service+0x180>
 8018a88:	4606      	mov	r6, r0
 8018a8a:	6800      	ldr	r0, [r0, #0]
 8018a8c:	4614      	mov	r4, r2
 8018a8e:	461d      	mov	r5, r3
 8018a90:	f7f5 fa34 	bl	800defc <is_uxrce_rmw_identifier_valid>
 8018a94:	2800      	cmp	r0, #0
 8018a96:	f000 80ad 	beq.w	8018bf4 <rmw_create_service+0x180>
 8018a9a:	2c00      	cmp	r4, #0
 8018a9c:	f000 80aa 	beq.w	8018bf4 <rmw_create_service+0x180>
 8018aa0:	7823      	ldrb	r3, [r4, #0]
 8018aa2:	2b00      	cmp	r3, #0
 8018aa4:	f000 80a6 	beq.w	8018bf4 <rmw_create_service+0x180>
 8018aa8:	2d00      	cmp	r5, #0
 8018aaa:	f000 80a3 	beq.w	8018bf4 <rmw_create_service+0x180>
 8018aae:	4854      	ldr	r0, [pc, #336]	@ (8018c00 <rmw_create_service+0x18c>)
 8018ab0:	f8d6 8004 	ldr.w	r8, [r6, #4]
 8018ab4:	f7ff fa1c 	bl	8017ef0 <get_memory>
 8018ab8:	2800      	cmp	r0, #0
 8018aba:	f000 809b 	beq.w	8018bf4 <rmw_create_service+0x180>
 8018abe:	6886      	ldr	r6, [r0, #8]
 8018ac0:	f8c6 6080 	str.w	r6, [r6, #128]	@ 0x80
 8018ac4:	f7ff fa9a 	bl	8017ffc <rmw_get_implementation_identifier>
 8018ac8:	f106 0a88 	add.w	sl, r6, #136	@ 0x88
 8018acc:	67f0      	str	r0, [r6, #124]	@ 0x7c
 8018ace:	f8c6 a084 	str.w	sl, [r6, #132]	@ 0x84
 8018ad2:	4620      	mov	r0, r4
 8018ad4:	f7e7 fbf4 	bl	80002c0 <strlen>
 8018ad8:	1c42      	adds	r2, r0, #1
 8018ada:	2a3c      	cmp	r2, #60	@ 0x3c
 8018adc:	f106 077c 	add.w	r7, r6, #124	@ 0x7c
 8018ae0:	f200 8085 	bhi.w	8018bee <rmw_create_service+0x17a>
 8018ae4:	4621      	mov	r1, r4
 8018ae6:	4650      	mov	r0, sl
 8018ae8:	f004 fd67 	bl	801d5ba <memcpy>
 8018aec:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8018af0:	4629      	mov	r1, r5
 8018af2:	f8c6 8078 	str.w	r8, [r6, #120]	@ 0x78
 8018af6:	6773      	str	r3, [r6, #116]	@ 0x74
 8018af8:	2250      	movs	r2, #80	@ 0x50
 8018afa:	f106 0020 	add.w	r0, r6, #32
 8018afe:	f004 fd5c 	bl	801d5ba <memcpy>
 8018b02:	4940      	ldr	r1, [pc, #256]	@ (8018c04 <rmw_create_service+0x190>)
 8018b04:	4648      	mov	r0, r9
 8018b06:	f7f5 fa13 	bl	800df30 <get_service_typesupport_handle>
 8018b0a:	2800      	cmp	r0, #0
 8018b0c:	d06f      	beq.n	8018bee <rmw_create_service+0x17a>
 8018b0e:	6843      	ldr	r3, [r0, #4]
 8018b10:	6173      	str	r3, [r6, #20]
 8018b12:	2b00      	cmp	r3, #0
 8018b14:	d06b      	beq.n	8018bee <rmw_create_service+0x17a>
 8018b16:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8018b1a:	f8df a0f0 	ldr.w	sl, [pc, #240]	@ 8018c0c <rmw_create_service+0x198>
 8018b1e:	f8df 90f0 	ldr.w	r9, [pc, #240]	@ 8018c10 <rmw_create_service+0x19c>
 8018b22:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018b26:	2108      	movs	r1, #8
 8018b28:	f8b3 05a2 	ldrh.w	r0, [r3, #1442]	@ 0x5a2
 8018b2c:	1c42      	adds	r2, r0, #1
 8018b2e:	f8a3 25a2 	strh.w	r2, [r3, #1442]	@ 0x5a2
 8018b32:	f7f8 fe2f 	bl	8011794 <uxr_object_id>
 8018b36:	2364      	movs	r3, #100	@ 0x64
 8018b38:	6130      	str	r0, [r6, #16]
 8018b3a:	4652      	mov	r2, sl
 8018b3c:	6970      	ldr	r0, [r6, #20]
 8018b3e:	4649      	mov	r1, r9
 8018b40:	f7f5 f92a 	bl	800dd98 <generate_service_types>
 8018b44:	2800      	cmp	r0, #0
 8018b46:	d052      	beq.n	8018bee <rmw_create_service+0x17a>
 8018b48:	f8df b0c8 	ldr.w	fp, [pc, #200]	@ 8018c14 <rmw_create_service+0x1a0>
 8018b4c:	492e      	ldr	r1, [pc, #184]	@ (8018c08 <rmw_create_service+0x194>)
 8018b4e:	233c      	movs	r3, #60	@ 0x3c
 8018b50:	465a      	mov	r2, fp
 8018b52:	4620      	mov	r0, r4
 8018b54:	f7f5 f8ee 	bl	800dd34 <generate_service_topics>
 8018b58:	2800      	cmp	r0, #0
 8018b5a:	d048      	beq.n	8018bee <rmw_create_service+0x17a>
 8018b5c:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8018b60:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8018b64:	a80c      	add	r0, sp, #48	@ 0x30
 8018b66:	4629      	mov	r1, r5
 8018b68:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8018b6c:	f7f5 f8c6 	bl	800dcfc <convert_qos_profile>
 8018b70:	4b25      	ldr	r3, [pc, #148]	@ (8018c08 <rmw_create_service+0x194>)
 8018b72:	f8cd b010 	str.w	fp, [sp, #16]
 8018b76:	e9cd a302 	strd	sl, r3, [sp, #8]
 8018b7a:	e9cd 4900 	strd	r4, r9, [sp]
 8018b7e:	a80c      	add	r0, sp, #48	@ 0x30
 8018b80:	c803      	ldmia	r0, {r0, r1}
 8018b82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018b84:	9005      	str	r0, [sp, #20]
 8018b86:	9a08      	ldr	r2, [sp, #32]
 8018b88:	f8ad 1018 	strh.w	r1, [sp, #24]
 8018b8c:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8018b90:	2306      	movs	r3, #6
 8018b92:	9307      	str	r3, [sp, #28]
 8018b94:	6811      	ldr	r1, [r2, #0]
 8018b96:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8018b9a:	6932      	ldr	r2, [r6, #16]
 8018b9c:	f7f8 fdc0 	bl	8011720 <uxr_buffer_create_replier_bin>
 8018ba0:	4602      	mov	r2, r0
 8018ba2:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8018ba6:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8018baa:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8018bae:	f7f5 f885 	bl	800dcbc <run_xrce_session>
 8018bb2:	b1e0      	cbz	r0, 8018bee <rmw_create_service+0x17a>
 8018bb4:	7a2b      	ldrb	r3, [r5, #8]
 8018bb6:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8018bba:	2200      	movs	r2, #0
 8018bbc:	2b02      	cmp	r3, #2
 8018bbe:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8018bc2:	e9cd 120e 	strd	r1, r2, [sp, #56]	@ 0x38
 8018bc6:	bf0c      	ite	eq
 8018bc8:	e9d0 23df 	ldrdeq	r2, r3, [r0, #892]	@ 0x37c
 8018bcc:	e9d0 32dd 	ldrdne	r3, r2, [r0, #884]	@ 0x374
 8018bd0:	6732      	str	r2, [r6, #112]	@ 0x70
 8018bd2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8018bd4:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8018bd8:	ab0e      	add	r3, sp, #56	@ 0x38
 8018bda:	9300      	str	r3, [sp, #0]
 8018bdc:	6811      	ldr	r1, [r2, #0]
 8018bde:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018be0:	6932      	ldr	r2, [r6, #16]
 8018be2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8018be6:	f001 ffc5 	bl	801ab74 <uxr_buffer_request_data>
 8018bea:	8330      	strh	r0, [r6, #24]
 8018bec:	e003      	b.n	8018bf6 <rmw_create_service+0x182>
 8018bee:	4638      	mov	r0, r7
 8018bf0:	f7f4 ff2e 	bl	800da50 <rmw_uxrce_fini_service_memory>
 8018bf4:	2700      	movs	r7, #0
 8018bf6:	4638      	mov	r0, r7
 8018bf8:	b011      	add	sp, #68	@ 0x44
 8018bfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018bfe:	bf00      	nop
 8018c00:	20016b88 	.word	0x20016b88
 8018c04:	0801e868 	.word	0x0801e868
 8018c08:	2001975c 	.word	0x2001975c
 8018c0c:	20019798 	.word	0x20019798
 8018c10:	200197fc 	.word	0x200197fc
 8018c14:	20019720 	.word	0x20019720

08018c18 <rmw_destroy_service>:
 8018c18:	b570      	push	{r4, r5, r6, lr}
 8018c1a:	b128      	cbz	r0, 8018c28 <rmw_destroy_service+0x10>
 8018c1c:	4604      	mov	r4, r0
 8018c1e:	6800      	ldr	r0, [r0, #0]
 8018c20:	460d      	mov	r5, r1
 8018c22:	f7f5 f96b 	bl	800defc <is_uxrce_rmw_identifier_valid>
 8018c26:	b910      	cbnz	r0, 8018c2e <rmw_destroy_service+0x16>
 8018c28:	2401      	movs	r4, #1
 8018c2a:	4620      	mov	r0, r4
 8018c2c:	bd70      	pop	{r4, r5, r6, pc}
 8018c2e:	6863      	ldr	r3, [r4, #4]
 8018c30:	2b00      	cmp	r3, #0
 8018c32:	d0f9      	beq.n	8018c28 <rmw_destroy_service+0x10>
 8018c34:	2d00      	cmp	r5, #0
 8018c36:	d0f7      	beq.n	8018c28 <rmw_destroy_service+0x10>
 8018c38:	6828      	ldr	r0, [r5, #0]
 8018c3a:	f7f5 f95f 	bl	800defc <is_uxrce_rmw_identifier_valid>
 8018c3e:	2800      	cmp	r0, #0
 8018c40:	d0f2      	beq.n	8018c28 <rmw_destroy_service+0x10>
 8018c42:	686e      	ldr	r6, [r5, #4]
 8018c44:	2e00      	cmp	r6, #0
 8018c46:	d0ef      	beq.n	8018c28 <rmw_destroy_service+0x10>
 8018c48:	6864      	ldr	r4, [r4, #4]
 8018c4a:	6932      	ldr	r2, [r6, #16]
 8018c4c:	6920      	ldr	r0, [r4, #16]
 8018c4e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8018c52:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8018c56:	6819      	ldr	r1, [r3, #0]
 8018c58:	f001 ffc4 	bl	801abe4 <uxr_buffer_cancel_data>
 8018c5c:	4602      	mov	r2, r0
 8018c5e:	6920      	ldr	r0, [r4, #16]
 8018c60:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8018c64:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8018c68:	f7f5 f828 	bl	800dcbc <run_xrce_session>
 8018c6c:	6920      	ldr	r0, [r4, #16]
 8018c6e:	6932      	ldr	r2, [r6, #16]
 8018c70:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8018c74:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8018c78:	6819      	ldr	r1, [r3, #0]
 8018c7a:	f7f8 fb79 	bl	8011370 <uxr_buffer_delete_entity>
 8018c7e:	4602      	mov	r2, r0
 8018c80:	6920      	ldr	r0, [r4, #16]
 8018c82:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8018c86:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8018c8a:	f7f5 f817 	bl	800dcbc <run_xrce_session>
 8018c8e:	f080 0401 	eor.w	r4, r0, #1
 8018c92:	b2e4      	uxtb	r4, r4
 8018c94:	4628      	mov	r0, r5
 8018c96:	0064      	lsls	r4, r4, #1
 8018c98:	f7f4 feda 	bl	800da50 <rmw_uxrce_fini_service_memory>
 8018c9c:	e7c5      	b.n	8018c2a <rmw_destroy_service+0x12>
 8018c9e:	bf00      	nop

08018ca0 <rmw_service_response_publisher_get_actual_qos>:
 8018ca0:	b508      	push	{r3, lr}
 8018ca2:	4603      	mov	r3, r0
 8018ca4:	b140      	cbz	r0, 8018cb8 <rmw_service_response_publisher_get_actual_qos+0x18>
 8018ca6:	4608      	mov	r0, r1
 8018ca8:	b131      	cbz	r1, 8018cb8 <rmw_service_response_publisher_get_actual_qos+0x18>
 8018caa:	6859      	ldr	r1, [r3, #4]
 8018cac:	2250      	movs	r2, #80	@ 0x50
 8018cae:	3120      	adds	r1, #32
 8018cb0:	f004 fc83 	bl	801d5ba <memcpy>
 8018cb4:	2000      	movs	r0, #0
 8018cb6:	bd08      	pop	{r3, pc}
 8018cb8:	200b      	movs	r0, #11
 8018cba:	bd08      	pop	{r3, pc}

08018cbc <rmw_service_request_subscription_get_actual_qos>:
 8018cbc:	b508      	push	{r3, lr}
 8018cbe:	4603      	mov	r3, r0
 8018cc0:	b140      	cbz	r0, 8018cd4 <rmw_service_request_subscription_get_actual_qos+0x18>
 8018cc2:	4608      	mov	r0, r1
 8018cc4:	b131      	cbz	r1, 8018cd4 <rmw_service_request_subscription_get_actual_qos+0x18>
 8018cc6:	6859      	ldr	r1, [r3, #4]
 8018cc8:	2250      	movs	r2, #80	@ 0x50
 8018cca:	3120      	adds	r1, #32
 8018ccc:	f004 fc75 	bl	801d5ba <memcpy>
 8018cd0:	2000      	movs	r0, #0
 8018cd2:	bd08      	pop	{r3, pc}
 8018cd4:	200b      	movs	r0, #11
 8018cd6:	bd08      	pop	{r3, pc}

08018cd8 <rmw_create_subscription>:
 8018cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018cdc:	b08d      	sub	sp, #52	@ 0x34
 8018cde:	2800      	cmp	r0, #0
 8018ce0:	f000 80d1 	beq.w	8018e86 <rmw_create_subscription+0x1ae>
 8018ce4:	460f      	mov	r7, r1
 8018ce6:	2900      	cmp	r1, #0
 8018ce8:	f000 80cd 	beq.w	8018e86 <rmw_create_subscription+0x1ae>
 8018cec:	4604      	mov	r4, r0
 8018cee:	6800      	ldr	r0, [r0, #0]
 8018cf0:	4615      	mov	r5, r2
 8018cf2:	461e      	mov	r6, r3
 8018cf4:	f7f5 f902 	bl	800defc <is_uxrce_rmw_identifier_valid>
 8018cf8:	2800      	cmp	r0, #0
 8018cfa:	f000 80c4 	beq.w	8018e86 <rmw_create_subscription+0x1ae>
 8018cfe:	2d00      	cmp	r5, #0
 8018d00:	f000 80c1 	beq.w	8018e86 <rmw_create_subscription+0x1ae>
 8018d04:	782b      	ldrb	r3, [r5, #0]
 8018d06:	2b00      	cmp	r3, #0
 8018d08:	f000 80bd 	beq.w	8018e86 <rmw_create_subscription+0x1ae>
 8018d0c:	2e00      	cmp	r6, #0
 8018d0e:	f000 80ba 	beq.w	8018e86 <rmw_create_subscription+0x1ae>
 8018d12:	485e      	ldr	r0, [pc, #376]	@ (8018e8c <rmw_create_subscription+0x1b4>)
 8018d14:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8018d18:	f7ff f8ea 	bl	8017ef0 <get_memory>
 8018d1c:	2800      	cmp	r0, #0
 8018d1e:	f000 80b2 	beq.w	8018e86 <rmw_create_subscription+0x1ae>
 8018d22:	6884      	ldr	r4, [r0, #8]
 8018d24:	f8c4 4080 	str.w	r4, [r4, #128]	@ 0x80
 8018d28:	f7ff f968 	bl	8017ffc <rmw_get_implementation_identifier>
 8018d2c:	f104 0a98 	add.w	sl, r4, #152	@ 0x98
 8018d30:	67e0      	str	r0, [r4, #124]	@ 0x7c
 8018d32:	f8c4 a084 	str.w	sl, [r4, #132]	@ 0x84
 8018d36:	4628      	mov	r0, r5
 8018d38:	f7e7 fac2 	bl	80002c0 <strlen>
 8018d3c:	3001      	adds	r0, #1
 8018d3e:	283c      	cmp	r0, #60	@ 0x3c
 8018d40:	f104 087c 	add.w	r8, r4, #124	@ 0x7c
 8018d44:	f200 8098 	bhi.w	8018e78 <rmw_create_subscription+0x1a0>
 8018d48:	4a51      	ldr	r2, [pc, #324]	@ (8018e90 <rmw_create_subscription+0x1b8>)
 8018d4a:	462b      	mov	r3, r5
 8018d4c:	213c      	movs	r1, #60	@ 0x3c
 8018d4e:	4650      	mov	r0, sl
 8018d50:	f004 f850 	bl	801cdf4 <sniprintf>
 8018d54:	4631      	mov	r1, r6
 8018d56:	f8c4 9020 	str.w	r9, [r4, #32]
 8018d5a:	2250      	movs	r2, #80	@ 0x50
 8018d5c:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8018d60:	f004 fc2b 	bl	801d5ba <memcpy>
 8018d64:	494b      	ldr	r1, [pc, #300]	@ (8018e94 <rmw_create_subscription+0x1bc>)
 8018d66:	4638      	mov	r0, r7
 8018d68:	f7f5 f8d6 	bl	800df18 <get_message_typesupport_handle>
 8018d6c:	2800      	cmp	r0, #0
 8018d6e:	f000 8083 	beq.w	8018e78 <rmw_create_subscription+0x1a0>
 8018d72:	6842      	ldr	r2, [r0, #4]
 8018d74:	61a2      	str	r2, [r4, #24]
 8018d76:	2a00      	cmp	r2, #0
 8018d78:	d07e      	beq.n	8018e78 <rmw_create_subscription+0x1a0>
 8018d7a:	4629      	mov	r1, r5
 8018d7c:	4633      	mov	r3, r6
 8018d7e:	4648      	mov	r0, r9
 8018d80:	f7ff fba4 	bl	80184cc <create_topic>
 8018d84:	61e0      	str	r0, [r4, #28]
 8018d86:	2800      	cmp	r0, #0
 8018d88:	d07a      	beq.n	8018e80 <rmw_create_subscription+0x1a8>
 8018d8a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8018d8e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018d92:	2104      	movs	r1, #4
 8018d94:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	@ 0x59c
 8018d98:	1c42      	adds	r2, r0, #1
 8018d9a:	f8a3 259c 	strh.w	r2, [r3, #1436]	@ 0x59c
 8018d9e:	f7f8 fcf9 	bl	8011794 <uxr_object_id>
 8018da2:	6120      	str	r0, [r4, #16]
 8018da4:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8018da8:	2506      	movs	r5, #6
 8018daa:	f8d0 3384 	ldr.w	r3, [r0, #900]	@ 0x384
 8018dae:	9500      	str	r5, [sp, #0]
 8018db0:	6819      	ldr	r1, [r3, #0]
 8018db2:	6922      	ldr	r2, [r4, #16]
 8018db4:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8018db8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8018dbc:	f7f8 fbb6 	bl	801152c <uxr_buffer_create_subscriber_bin>
 8018dc0:	4602      	mov	r2, r0
 8018dc2:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8018dc6:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8018dca:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8018dce:	f7f4 ff75 	bl	800dcbc <run_xrce_session>
 8018dd2:	2800      	cmp	r0, #0
 8018dd4:	d050      	beq.n	8018e78 <rmw_create_subscription+0x1a0>
 8018dd6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8018dda:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018dde:	4629      	mov	r1, r5
 8018de0:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	@ 0x59e
 8018de4:	1c42      	adds	r2, r0, #1
 8018de6:	f8a3 259e 	strh.w	r2, [r3, #1438]	@ 0x59e
 8018dea:	f7f8 fcd3 	bl	8011794 <uxr_object_id>
 8018dee:	af08      	add	r7, sp, #32
 8018df0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8018df4:	69e3      	ldr	r3, [r4, #28]
 8018df6:	6160      	str	r0, [r4, #20]
 8018df8:	4631      	mov	r1, r6
 8018dfa:	4638      	mov	r0, r7
 8018dfc:	f8da b384 	ldr.w	fp, [sl, #900]	@ 0x384
 8018e00:	9305      	str	r3, [sp, #20]
 8018e02:	f7f4 ff7b 	bl	800dcfc <convert_qos_profile>
 8018e06:	9503      	str	r5, [sp, #12]
 8018e08:	e897 0003 	ldmia.w	r7, {r0, r1}
 8018e0c:	9b05      	ldr	r3, [sp, #20]
 8018e0e:	9001      	str	r0, [sp, #4]
 8018e10:	f8ad 1008 	strh.w	r1, [sp, #8]
 8018e14:	691b      	ldr	r3, [r3, #16]
 8018e16:	9300      	str	r3, [sp, #0]
 8018e18:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8018e1c:	f8db 1000 	ldr.w	r1, [fp]
 8018e20:	f50a 7028 	add.w	r0, sl, #672	@ 0x2a0
 8018e24:	f7f8 fc16 	bl	8011654 <uxr_buffer_create_datareader_bin>
 8018e28:	4602      	mov	r2, r0
 8018e2a:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8018e2e:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8018e32:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8018e36:	f7f4 ff41 	bl	800dcbc <run_xrce_session>
 8018e3a:	b1e8      	cbz	r0, 8018e78 <rmw_create_subscription+0x1a0>
 8018e3c:	7a33      	ldrb	r3, [r6, #8]
 8018e3e:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8018e42:	2b02      	cmp	r3, #2
 8018e44:	bf0c      	ite	eq
 8018e46:	f8d0 3380 	ldreq.w	r3, [r0, #896]	@ 0x380
 8018e4a:	f8d0 3374 	ldrne.w	r3, [r0, #884]	@ 0x374
 8018e4e:	9307      	str	r3, [sp, #28]
 8018e50:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8018e54:	2200      	movs	r2, #0
 8018e56:	e9cd 120a 	strd	r1, r2, [sp, #40]	@ 0x28
 8018e5a:	ab0a      	add	r3, sp, #40	@ 0x28
 8018e5c:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8018e60:	9300      	str	r3, [sp, #0]
 8018e62:	6962      	ldr	r2, [r4, #20]
 8018e64:	9b07      	ldr	r3, [sp, #28]
 8018e66:	6809      	ldr	r1, [r1, #0]
 8018e68:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8018e6c:	f001 fe82 	bl	801ab74 <uxr_buffer_request_data>
 8018e70:	4640      	mov	r0, r8
 8018e72:	b00d      	add	sp, #52	@ 0x34
 8018e74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018e78:	69e0      	ldr	r0, [r4, #28]
 8018e7a:	b108      	cbz	r0, 8018e80 <rmw_create_subscription+0x1a8>
 8018e7c:	f7f4 fe14 	bl	800daa8 <rmw_uxrce_fini_topic_memory>
 8018e80:	4640      	mov	r0, r8
 8018e82:	f7f4 fdcf 	bl	800da24 <rmw_uxrce_fini_subscription_memory>
 8018e86:	f04f 0800 	mov.w	r8, #0
 8018e8a:	e7f1      	b.n	8018e70 <rmw_create_subscription+0x198>
 8018e8c:	20017408 	.word	0x20017408
 8018e90:	0801eddc 	.word	0x0801eddc
 8018e94:	0801e868 	.word	0x0801e868

08018e98 <rmw_subscription_get_actual_qos>:
 8018e98:	b508      	push	{r3, lr}
 8018e9a:	4603      	mov	r3, r0
 8018e9c:	b140      	cbz	r0, 8018eb0 <rmw_subscription_get_actual_qos+0x18>
 8018e9e:	4608      	mov	r0, r1
 8018ea0:	b131      	cbz	r1, 8018eb0 <rmw_subscription_get_actual_qos+0x18>
 8018ea2:	6859      	ldr	r1, [r3, #4]
 8018ea4:	2250      	movs	r2, #80	@ 0x50
 8018ea6:	3128      	adds	r1, #40	@ 0x28
 8018ea8:	f004 fb87 	bl	801d5ba <memcpy>
 8018eac:	2000      	movs	r0, #0
 8018eae:	bd08      	pop	{r3, pc}
 8018eb0:	200b      	movs	r0, #11
 8018eb2:	bd08      	pop	{r3, pc}

08018eb4 <rmw_destroy_subscription>:
 8018eb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018eb8:	b128      	cbz	r0, 8018ec6 <rmw_destroy_subscription+0x12>
 8018eba:	4604      	mov	r4, r0
 8018ebc:	6800      	ldr	r0, [r0, #0]
 8018ebe:	460d      	mov	r5, r1
 8018ec0:	f7f5 f81c 	bl	800defc <is_uxrce_rmw_identifier_valid>
 8018ec4:	b918      	cbnz	r0, 8018ece <rmw_destroy_subscription+0x1a>
 8018ec6:	2401      	movs	r4, #1
 8018ec8:	4620      	mov	r0, r4
 8018eca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018ece:	6863      	ldr	r3, [r4, #4]
 8018ed0:	2b00      	cmp	r3, #0
 8018ed2:	d0f8      	beq.n	8018ec6 <rmw_destroy_subscription+0x12>
 8018ed4:	2d00      	cmp	r5, #0
 8018ed6:	d0f6      	beq.n	8018ec6 <rmw_destroy_subscription+0x12>
 8018ed8:	6828      	ldr	r0, [r5, #0]
 8018eda:	f7f5 f80f 	bl	800defc <is_uxrce_rmw_identifier_valid>
 8018ede:	2800      	cmp	r0, #0
 8018ee0:	d0f1      	beq.n	8018ec6 <rmw_destroy_subscription+0x12>
 8018ee2:	686c      	ldr	r4, [r5, #4]
 8018ee4:	2c00      	cmp	r4, #0
 8018ee6:	d0ee      	beq.n	8018ec6 <rmw_destroy_subscription+0x12>
 8018ee8:	6a26      	ldr	r6, [r4, #32]
 8018eea:	6962      	ldr	r2, [r4, #20]
 8018eec:	6930      	ldr	r0, [r6, #16]
 8018eee:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8018ef2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8018ef6:	6819      	ldr	r1, [r3, #0]
 8018ef8:	f001 fe74 	bl	801abe4 <uxr_buffer_cancel_data>
 8018efc:	4602      	mov	r2, r0
 8018efe:	6930      	ldr	r0, [r6, #16]
 8018f00:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8018f04:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8018f08:	f7f4 fed8 	bl	800dcbc <run_xrce_session>
 8018f0c:	69e0      	ldr	r0, [r4, #28]
 8018f0e:	f7ff fb31 	bl	8018574 <destroy_topic>
 8018f12:	6a23      	ldr	r3, [r4, #32]
 8018f14:	6962      	ldr	r2, [r4, #20]
 8018f16:	6918      	ldr	r0, [r3, #16]
 8018f18:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8018f1c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8018f20:	6819      	ldr	r1, [r3, #0]
 8018f22:	f7f8 fa25 	bl	8011370 <uxr_buffer_delete_entity>
 8018f26:	6a23      	ldr	r3, [r4, #32]
 8018f28:	6922      	ldr	r2, [r4, #16]
 8018f2a:	4680      	mov	r8, r0
 8018f2c:	6918      	ldr	r0, [r3, #16]
 8018f2e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8018f32:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8018f36:	6819      	ldr	r1, [r3, #0]
 8018f38:	f7f8 fa1a 	bl	8011370 <uxr_buffer_delete_entity>
 8018f3c:	4607      	mov	r7, r0
 8018f3e:	6930      	ldr	r0, [r6, #16]
 8018f40:	4642      	mov	r2, r8
 8018f42:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8018f46:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8018f4a:	f7f4 feb7 	bl	800dcbc <run_xrce_session>
 8018f4e:	4604      	mov	r4, r0
 8018f50:	6930      	ldr	r0, [r6, #16]
 8018f52:	463a      	mov	r2, r7
 8018f54:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8018f58:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8018f5c:	f7f4 feae 	bl	800dcbc <run_xrce_session>
 8018f60:	4004      	ands	r4, r0
 8018f62:	f084 0401 	eor.w	r4, r4, #1
 8018f66:	b2e4      	uxtb	r4, r4
 8018f68:	4628      	mov	r0, r5
 8018f6a:	0064      	lsls	r4, r4, #1
 8018f6c:	f7f4 fd5a 	bl	800da24 <rmw_uxrce_fini_subscription_memory>
 8018f70:	e7aa      	b.n	8018ec8 <rmw_destroy_subscription+0x14>
 8018f72:	bf00      	nop

08018f74 <rmw_take_with_info>:
 8018f74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018f76:	4604      	mov	r4, r0
 8018f78:	6800      	ldr	r0, [r0, #0]
 8018f7a:	b089      	sub	sp, #36	@ 0x24
 8018f7c:	460f      	mov	r7, r1
 8018f7e:	4615      	mov	r5, r2
 8018f80:	b128      	cbz	r0, 8018f8e <rmw_take_with_info+0x1a>
 8018f82:	4b23      	ldr	r3, [pc, #140]	@ (8019010 <rmw_take_with_info+0x9c>)
 8018f84:	6819      	ldr	r1, [r3, #0]
 8018f86:	f7e7 f93b 	bl	8000200 <strcmp>
 8018f8a:	2800      	cmp	r0, #0
 8018f8c:	d13d      	bne.n	801900a <rmw_take_with_info+0x96>
 8018f8e:	6864      	ldr	r4, [r4, #4]
 8018f90:	b1fd      	cbz	r5, 8018fd2 <rmw_take_with_info+0x5e>
 8018f92:	2300      	movs	r3, #0
 8018f94:	702b      	strb	r3, [r5, #0]
 8018f96:	f7f4 fe13 	bl	800dbc0 <rmw_uxrce_clean_expired_static_input_buffer>
 8018f9a:	4620      	mov	r0, r4
 8018f9c:	f7f4 fde8 	bl	800db70 <rmw_uxrce_find_static_input_buffer_by_owner>
 8018fa0:	4606      	mov	r6, r0
 8018fa2:	b1e8      	cbz	r0, 8018fe0 <rmw_take_with_info+0x6c>
 8018fa4:	6881      	ldr	r1, [r0, #8]
 8018fa6:	4668      	mov	r0, sp
 8018fa8:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8018fac:	3110      	adds	r1, #16
 8018fae:	f7f8 f913 	bl	80111d8 <ucdr_init_buffer>
 8018fb2:	69a3      	ldr	r3, [r4, #24]
 8018fb4:	4639      	mov	r1, r7
 8018fb6:	68db      	ldr	r3, [r3, #12]
 8018fb8:	4668      	mov	r0, sp
 8018fba:	4798      	blx	r3
 8018fbc:	4631      	mov	r1, r6
 8018fbe:	4604      	mov	r4, r0
 8018fc0:	4814      	ldr	r0, [pc, #80]	@ (8019014 <rmw_take_with_info+0xa0>)
 8018fc2:	f7fe ffa5 	bl	8017f10 <put_memory>
 8018fc6:	702c      	strb	r4, [r5, #0]
 8018fc8:	f084 0001 	eor.w	r0, r4, #1
 8018fcc:	b2c0      	uxtb	r0, r0
 8018fce:	b009      	add	sp, #36	@ 0x24
 8018fd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018fd2:	f7f4 fdf5 	bl	800dbc0 <rmw_uxrce_clean_expired_static_input_buffer>
 8018fd6:	4620      	mov	r0, r4
 8018fd8:	f7f4 fdca 	bl	800db70 <rmw_uxrce_find_static_input_buffer_by_owner>
 8018fdc:	4605      	mov	r5, r0
 8018fde:	b910      	cbnz	r0, 8018fe6 <rmw_take_with_info+0x72>
 8018fe0:	2001      	movs	r0, #1
 8018fe2:	b009      	add	sp, #36	@ 0x24
 8018fe4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018fe6:	68a9      	ldr	r1, [r5, #8]
 8018fe8:	4668      	mov	r0, sp
 8018fea:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8018fee:	3110      	adds	r1, #16
 8018ff0:	f7f8 f8f2 	bl	80111d8 <ucdr_init_buffer>
 8018ff4:	69a3      	ldr	r3, [r4, #24]
 8018ff6:	4639      	mov	r1, r7
 8018ff8:	68db      	ldr	r3, [r3, #12]
 8018ffa:	4668      	mov	r0, sp
 8018ffc:	4798      	blx	r3
 8018ffe:	4629      	mov	r1, r5
 8019000:	4604      	mov	r4, r0
 8019002:	4804      	ldr	r0, [pc, #16]	@ (8019014 <rmw_take_with_info+0xa0>)
 8019004:	f7fe ff84 	bl	8017f10 <put_memory>
 8019008:	e7de      	b.n	8018fc8 <rmw_take_with_info+0x54>
 801900a:	200c      	movs	r0, #12
 801900c:	b009      	add	sp, #36	@ 0x24
 801900e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019010:	08020330 	.word	0x08020330
 8019014:	20015988 	.word	0x20015988

08019018 <rmw_uxrce_transport_init>:
 8019018:	b508      	push	{r3, lr}
 801901a:	b108      	cbz	r0, 8019020 <rmw_uxrce_transport_init+0x8>
 801901c:	f100 0210 	add.w	r2, r0, #16
 8019020:	b139      	cbz	r1, 8019032 <rmw_uxrce_transport_init+0x1a>
 8019022:	6949      	ldr	r1, [r1, #20]
 8019024:	4610      	mov	r0, r2
 8019026:	f001 f83f 	bl	801a0a8 <uxr_init_custom_transport>
 801902a:	f080 0001 	eor.w	r0, r0, #1
 801902e:	b2c0      	uxtb	r0, r0
 8019030:	bd08      	pop	{r3, pc}
 8019032:	4b04      	ldr	r3, [pc, #16]	@ (8019044 <rmw_uxrce_transport_init+0x2c>)
 8019034:	4610      	mov	r0, r2
 8019036:	6859      	ldr	r1, [r3, #4]
 8019038:	f001 f836 	bl	801a0a8 <uxr_init_custom_transport>
 801903c:	f080 0001 	eor.w	r0, r0, #1
 8019040:	b2c0      	uxtb	r0, r0
 8019042:	bd08      	pop	{r3, pc}
 8019044:	200136c8 	.word	0x200136c8

08019048 <rmw_wait>:
 8019048:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801904c:	b089      	sub	sp, #36	@ 0x24
 801904e:	4607      	mov	r7, r0
 8019050:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8019052:	460e      	mov	r6, r1
 8019054:	4698      	mov	r8, r3
 8019056:	4691      	mov	r9, r2
 8019058:	2a00      	cmp	r2, #0
 801905a:	f000 811e 	beq.w	801929a <rmw_wait+0x252>
 801905e:	2c00      	cmp	r4, #0
 8019060:	f000 80ef 	beq.w	8019242 <rmw_wait+0x1fa>
 8019064:	4bb5      	ldr	r3, [pc, #724]	@ (801933c <rmw_wait+0x2f4>)
 8019066:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8019068:	ad04      	add	r5, sp, #16
 801906a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 801906e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8019072:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8019076:	f7fe fd7f 	bl	8017b78 <rmw_time_equal>
 801907a:	2800      	cmp	r0, #0
 801907c:	f000 811b 	beq.w	80192b6 <rmw_wait+0x26e>
 8019080:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8019084:	f7f4 fd9c 	bl	800dbc0 <rmw_uxrce_clean_expired_static_input_buffer>
 8019088:	4bad      	ldr	r3, [pc, #692]	@ (8019340 <rmw_wait+0x2f8>)
 801908a:	681c      	ldr	r4, [r3, #0]
 801908c:	b14c      	cbz	r4, 80190a2 <rmw_wait+0x5a>
 801908e:	4623      	mov	r3, r4
 8019090:	2100      	movs	r1, #0
 8019092:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 8019096:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801909a:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 801909e:	2b00      	cmp	r3, #0
 80190a0:	d1f7      	bne.n	8019092 <rmw_wait+0x4a>
 80190a2:	f1b9 0f00 	cmp.w	r9, #0
 80190a6:	d011      	beq.n	80190cc <rmw_wait+0x84>
 80190a8:	f8d9 1000 	ldr.w	r1, [r9]
 80190ac:	b171      	cbz	r1, 80190cc <rmw_wait+0x84>
 80190ae:	f8d9 c004 	ldr.w	ip, [r9, #4]
 80190b2:	2300      	movs	r3, #0
 80190b4:	2001      	movs	r0, #1
 80190b6:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80190ba:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 80190bc:	6912      	ldr	r2, [r2, #16]
 80190be:	3301      	adds	r3, #1
 80190c0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80190c4:	4299      	cmp	r1, r3
 80190c6:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 80190ca:	d1f4      	bne.n	80190b6 <rmw_wait+0x6e>
 80190cc:	f1b8 0f00 	cmp.w	r8, #0
 80190d0:	f000 8109 	beq.w	80192e6 <rmw_wait+0x29e>
 80190d4:	f8d8 1000 	ldr.w	r1, [r8]
 80190d8:	2900      	cmp	r1, #0
 80190da:	f000 8116 	beq.w	801930a <rmw_wait+0x2c2>
 80190de:	f8d8 c004 	ldr.w	ip, [r8, #4]
 80190e2:	2300      	movs	r3, #0
 80190e4:	2001      	movs	r0, #1
 80190e6:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80190ea:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 80190ec:	6912      	ldr	r2, [r2, #16]
 80190ee:	3301      	adds	r3, #1
 80190f0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80190f4:	4299      	cmp	r1, r3
 80190f6:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 80190fa:	d1f4      	bne.n	80190e6 <rmw_wait+0x9e>
 80190fc:	2f00      	cmp	r7, #0
 80190fe:	f000 8114 	beq.w	801932a <rmw_wait+0x2e2>
 8019102:	6839      	ldr	r1, [r7, #0]
 8019104:	b171      	cbz	r1, 8019124 <rmw_wait+0xdc>
 8019106:	f8d7 c004 	ldr.w	ip, [r7, #4]
 801910a:	2300      	movs	r3, #0
 801910c:	2001      	movs	r0, #1
 801910e:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8019112:	6a12      	ldr	r2, [r2, #32]
 8019114:	6912      	ldr	r2, [r2, #16]
 8019116:	3301      	adds	r3, #1
 8019118:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801911c:	4299      	cmp	r1, r3
 801911e:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8019122:	d1f4      	bne.n	801910e <rmw_wait+0xc6>
 8019124:	b344      	cbz	r4, 8019178 <rmw_wait+0x130>
 8019126:	4622      	mov	r2, r4
 8019128:	2300      	movs	r3, #0
 801912a:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 801912e:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 8019132:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 8019136:	440b      	add	r3, r1
 8019138:	b2db      	uxtb	r3, r3
 801913a:	2a00      	cmp	r2, #0
 801913c:	d1f5      	bne.n	801912a <rmw_wait+0xe2>
 801913e:	2b00      	cmp	r3, #0
 8019140:	d075      	beq.n	801922e <rmw_wait+0x1e6>
 8019142:	1c6a      	adds	r2, r5, #1
 8019144:	d00d      	beq.n	8019162 <rmw_wait+0x11a>
 8019146:	ee07 5a90 	vmov	s15, r5
 801914a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801914e:	ee07 3a90 	vmov	s15, r3
 8019152:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8019156:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801915a:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 801915e:	ee17 5a90 	vmov	r5, s15
 8019162:	68a0      	ldr	r0, [r4, #8]
 8019164:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 8019168:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 801916c:	2b00      	cmp	r3, #0
 801916e:	f040 808a 	bne.w	8019286 <rmw_wait+0x23e>
 8019172:	6864      	ldr	r4, [r4, #4]
 8019174:	2c00      	cmp	r4, #0
 8019176:	d1f4      	bne.n	8019162 <rmw_wait+0x11a>
 8019178:	f1b9 0f00 	cmp.w	r9, #0
 801917c:	f000 80c3 	beq.w	8019306 <rmw_wait+0x2be>
 8019180:	f8d9 5000 	ldr.w	r5, [r9]
 8019184:	b185      	cbz	r5, 80191a8 <rmw_wait+0x160>
 8019186:	2400      	movs	r4, #0
 8019188:	4625      	mov	r5, r4
 801918a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801918e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8019192:	f7f4 fced 	bl	800db70 <rmw_uxrce_find_static_input_buffer_by_owner>
 8019196:	2800      	cmp	r0, #0
 8019198:	d06d      	beq.n	8019276 <rmw_wait+0x22e>
 801919a:	f8d9 3000 	ldr.w	r3, [r9]
 801919e:	3401      	adds	r4, #1
 80191a0:	42a3      	cmp	r3, r4
 80191a2:	f04f 0501 	mov.w	r5, #1
 80191a6:	d8f0      	bhi.n	801918a <rmw_wait+0x142>
 80191a8:	f1b8 0f00 	cmp.w	r8, #0
 80191ac:	d012      	beq.n	80191d4 <rmw_wait+0x18c>
 80191ae:	f8d8 1000 	ldr.w	r1, [r8]
 80191b2:	2400      	movs	r4, #0
 80191b4:	b171      	cbz	r1, 80191d4 <rmw_wait+0x18c>
 80191b6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80191ba:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80191be:	f7f4 fcd7 	bl	800db70 <rmw_uxrce_find_static_input_buffer_by_owner>
 80191c2:	2800      	cmp	r0, #0
 80191c4:	d047      	beq.n	8019256 <rmw_wait+0x20e>
 80191c6:	f8d8 3000 	ldr.w	r3, [r8]
 80191ca:	3401      	adds	r4, #1
 80191cc:	42a3      	cmp	r3, r4
 80191ce:	f04f 0501 	mov.w	r5, #1
 80191d2:	d8f0      	bhi.n	80191b6 <rmw_wait+0x16e>
 80191d4:	b17f      	cbz	r7, 80191f6 <rmw_wait+0x1ae>
 80191d6:	683b      	ldr	r3, [r7, #0]
 80191d8:	2400      	movs	r4, #0
 80191da:	b163      	cbz	r3, 80191f6 <rmw_wait+0x1ae>
 80191dc:	687b      	ldr	r3, [r7, #4]
 80191de:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80191e2:	f7f4 fcc5 	bl	800db70 <rmw_uxrce_find_static_input_buffer_by_owner>
 80191e6:	2800      	cmp	r0, #0
 80191e8:	d03d      	beq.n	8019266 <rmw_wait+0x21e>
 80191ea:	683b      	ldr	r3, [r7, #0]
 80191ec:	3401      	adds	r4, #1
 80191ee:	42a3      	cmp	r3, r4
 80191f0:	f04f 0501 	mov.w	r5, #1
 80191f4:	d8f2      	bhi.n	80191dc <rmw_wait+0x194>
 80191f6:	b1a6      	cbz	r6, 8019222 <rmw_wait+0x1da>
 80191f8:	6834      	ldr	r4, [r6, #0]
 80191fa:	b194      	cbz	r4, 8019222 <rmw_wait+0x1da>
 80191fc:	2300      	movs	r3, #0
 80191fe:	461f      	mov	r7, r3
 8019200:	e004      	b.n	801920c <rmw_wait+0x1c4>
 8019202:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8019206:	3301      	adds	r3, #1
 8019208:	429c      	cmp	r4, r3
 801920a:	d00a      	beq.n	8019222 <rmw_wait+0x1da>
 801920c:	6870      	ldr	r0, [r6, #4]
 801920e:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8019212:	7c0a      	ldrb	r2, [r1, #16]
 8019214:	2a00      	cmp	r2, #0
 8019216:	d0f4      	beq.n	8019202 <rmw_wait+0x1ba>
 8019218:	3301      	adds	r3, #1
 801921a:	429c      	cmp	r4, r3
 801921c:	740f      	strb	r7, [r1, #16]
 801921e:	4615      	mov	r5, r2
 8019220:	d1f4      	bne.n	801920c <rmw_wait+0x1c4>
 8019222:	f085 0001 	eor.w	r0, r5, #1
 8019226:	0040      	lsls	r0, r0, #1
 8019228:	b009      	add	sp, #36	@ 0x24
 801922a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801922e:	68a0      	ldr	r0, [r4, #8]
 8019230:	2100      	movs	r1, #0
 8019232:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8019236:	f7f8 ff39 	bl	80120ac <uxr_run_session_timeout>
 801923a:	6864      	ldr	r4, [r4, #4]
 801923c:	2c00      	cmp	r4, #0
 801923e:	d1f6      	bne.n	801922e <rmw_wait+0x1e6>
 8019240:	e79a      	b.n	8019178 <rmw_wait+0x130>
 8019242:	f7f4 fcbd 	bl	800dbc0 <rmw_uxrce_clean_expired_static_input_buffer>
 8019246:	4b3e      	ldr	r3, [pc, #248]	@ (8019340 <rmw_wait+0x2f8>)
 8019248:	681c      	ldr	r4, [r3, #0]
 801924a:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 801924e:	2c00      	cmp	r4, #0
 8019250:	f47f af1d 	bne.w	801908e <rmw_wait+0x46>
 8019254:	e728      	b.n	80190a8 <rmw_wait+0x60>
 8019256:	e9d8 3200 	ldrd	r3, r2, [r8]
 801925a:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801925e:	3401      	adds	r4, #1
 8019260:	429c      	cmp	r4, r3
 8019262:	d3a8      	bcc.n	80191b6 <rmw_wait+0x16e>
 8019264:	e7b6      	b.n	80191d4 <rmw_wait+0x18c>
 8019266:	e9d7 3200 	ldrd	r3, r2, [r7]
 801926a:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801926e:	3401      	adds	r4, #1
 8019270:	42a3      	cmp	r3, r4
 8019272:	d8b3      	bhi.n	80191dc <rmw_wait+0x194>
 8019274:	e7bf      	b.n	80191f6 <rmw_wait+0x1ae>
 8019276:	e9d9 3200 	ldrd	r3, r2, [r9]
 801927a:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801927e:	3401      	adds	r4, #1
 8019280:	42a3      	cmp	r3, r4
 8019282:	d882      	bhi.n	801918a <rmw_wait+0x142>
 8019284:	e790      	b.n	80191a8 <rmw_wait+0x160>
 8019286:	4629      	mov	r1, r5
 8019288:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801928c:	f7f8 ff28 	bl	80120e0 <uxr_run_session_until_data>
 8019290:	6864      	ldr	r4, [r4, #4]
 8019292:	2c00      	cmp	r4, #0
 8019294:	f47f af65 	bne.w	8019162 <rmw_wait+0x11a>
 8019298:	e76e      	b.n	8019178 <rmw_wait+0x130>
 801929a:	b1f3      	cbz	r3, 80192da <rmw_wait+0x292>
 801929c:	2c00      	cmp	r4, #0
 801929e:	f47f aee1 	bne.w	8019064 <rmw_wait+0x1c>
 80192a2:	f7f4 fc8d 	bl	800dbc0 <rmw_uxrce_clean_expired_static_input_buffer>
 80192a6:	4b26      	ldr	r3, [pc, #152]	@ (8019340 <rmw_wait+0x2f8>)
 80192a8:	681c      	ldr	r4, [r3, #0]
 80192aa:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80192ae:	2c00      	cmp	r4, #0
 80192b0:	f47f aeed 	bne.w	801908e <rmw_wait+0x46>
 80192b4:	e70a      	b.n	80190cc <rmw_wait+0x84>
 80192b6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80192ba:	f7fe fcb1 	bl	8017c20 <rmw_time_total_nsec>
 80192be:	4a21      	ldr	r2, [pc, #132]	@ (8019344 <rmw_wait+0x2fc>)
 80192c0:	2300      	movs	r3, #0
 80192c2:	f7e7 fcfb 	bl	8000cbc <__aeabi_uldivmod>
 80192c6:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 80192ca:	f171 0100 	sbcs.w	r1, r1, #0
 80192ce:	4605      	mov	r5, r0
 80192d0:	f6ff aed8 	blt.w	8019084 <rmw_wait+0x3c>
 80192d4:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 80192d8:	e6d4      	b.n	8019084 <rmw_wait+0x3c>
 80192da:	2800      	cmp	r0, #0
 80192dc:	d1de      	bne.n	801929c <rmw_wait+0x254>
 80192de:	2900      	cmp	r1, #0
 80192e0:	d1dc      	bne.n	801929c <rmw_wait+0x254>
 80192e2:	4608      	mov	r0, r1
 80192e4:	e7a0      	b.n	8019228 <rmw_wait+0x1e0>
 80192e6:	2f00      	cmp	r7, #0
 80192e8:	f47f af0b 	bne.w	8019102 <rmw_wait+0xba>
 80192ec:	2c00      	cmp	r4, #0
 80192ee:	f47f af1a 	bne.w	8019126 <rmw_wait+0xde>
 80192f2:	f1b9 0f00 	cmp.w	r9, #0
 80192f6:	d027      	beq.n	8019348 <rmw_wait+0x300>
 80192f8:	f8d9 3000 	ldr.w	r3, [r9]
 80192fc:	4625      	mov	r5, r4
 80192fe:	2b00      	cmp	r3, #0
 8019300:	f47f af41 	bne.w	8019186 <rmw_wait+0x13e>
 8019304:	e777      	b.n	80191f6 <rmw_wait+0x1ae>
 8019306:	464d      	mov	r5, r9
 8019308:	e74e      	b.n	80191a8 <rmw_wait+0x160>
 801930a:	2f00      	cmp	r7, #0
 801930c:	f47f aef9 	bne.w	8019102 <rmw_wait+0xba>
 8019310:	2c00      	cmp	r4, #0
 8019312:	f47f af08 	bne.w	8019126 <rmw_wait+0xde>
 8019316:	f1b9 0f00 	cmp.w	r9, #0
 801931a:	d015      	beq.n	8019348 <rmw_wait+0x300>
 801931c:	f8d9 3000 	ldr.w	r3, [r9]
 8019320:	2b00      	cmp	r3, #0
 8019322:	f47f af30 	bne.w	8019186 <rmw_wait+0x13e>
 8019326:	2500      	movs	r5, #0
 8019328:	e743      	b.n	80191b2 <rmw_wait+0x16a>
 801932a:	2c00      	cmp	r4, #0
 801932c:	f47f aefb 	bne.w	8019126 <rmw_wait+0xde>
 8019330:	f1b9 0f00 	cmp.w	r9, #0
 8019334:	f47f af24 	bne.w	8019180 <rmw_wait+0x138>
 8019338:	e7f5      	b.n	8019326 <rmw_wait+0x2de>
 801933a:	bf00      	nop
 801933c:	0801e6f8 	.word	0x0801e6f8
 8019340:	200192f8 	.word	0x200192f8
 8019344:	000f4240 	.word	0x000f4240
 8019348:	464d      	mov	r5, r9
 801934a:	e754      	b.n	80191f6 <rmw_wait+0x1ae>

0801934c <rmw_create_wait_set>:
 801934c:	b508      	push	{r3, lr}
 801934e:	4803      	ldr	r0, [pc, #12]	@ (801935c <rmw_create_wait_set+0x10>)
 8019350:	f7fe fdce 	bl	8017ef0 <get_memory>
 8019354:	b108      	cbz	r0, 801935a <rmw_create_wait_set+0xe>
 8019356:	6880      	ldr	r0, [r0, #8]
 8019358:	3010      	adds	r0, #16
 801935a:	bd08      	pop	{r3, pc}
 801935c:	200137e4 	.word	0x200137e4

08019360 <rmw_destroy_wait_set>:
 8019360:	b508      	push	{r3, lr}
 8019362:	4b08      	ldr	r3, [pc, #32]	@ (8019384 <rmw_destroy_wait_set+0x24>)
 8019364:	6819      	ldr	r1, [r3, #0]
 8019366:	b911      	cbnz	r1, 801936e <rmw_destroy_wait_set+0xe>
 8019368:	e00a      	b.n	8019380 <rmw_destroy_wait_set+0x20>
 801936a:	6849      	ldr	r1, [r1, #4]
 801936c:	b141      	cbz	r1, 8019380 <rmw_destroy_wait_set+0x20>
 801936e:	688b      	ldr	r3, [r1, #8]
 8019370:	3310      	adds	r3, #16
 8019372:	4298      	cmp	r0, r3
 8019374:	d1f9      	bne.n	801936a <rmw_destroy_wait_set+0xa>
 8019376:	4803      	ldr	r0, [pc, #12]	@ (8019384 <rmw_destroy_wait_set+0x24>)
 8019378:	f7fe fdca 	bl	8017f10 <put_memory>
 801937c:	2000      	movs	r0, #0
 801937e:	bd08      	pop	{r3, pc}
 8019380:	2001      	movs	r0, #1
 8019382:	bd08      	pop	{r3, pc}
 8019384:	200137e4 	.word	0x200137e4

08019388 <rmw_uros_epoch_nanos>:
 8019388:	4b05      	ldr	r3, [pc, #20]	@ (80193a0 <rmw_uros_epoch_nanos+0x18>)
 801938a:	681b      	ldr	r3, [r3, #0]
 801938c:	b123      	cbz	r3, 8019398 <rmw_uros_epoch_nanos+0x10>
 801938e:	6898      	ldr	r0, [r3, #8]
 8019390:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8019394:	f7f8 bb22 	b.w	80119dc <uxr_epoch_nanos>
 8019398:	2000      	movs	r0, #0
 801939a:	2100      	movs	r1, #0
 801939c:	4770      	bx	lr
 801939e:	bf00      	nop
 80193a0:	200192f8 	.word	0x200192f8

080193a4 <sensor_msgs__msg__Imu__get_type_hash>:
 80193a4:	4800      	ldr	r0, [pc, #0]	@ (80193a8 <sensor_msgs__msg__Imu__get_type_hash+0x4>)
 80193a6:	4770      	bx	lr
 80193a8:	20001768 	.word	0x20001768

080193ac <sensor_msgs__msg__Imu__get_type_description>:
 80193ac:	b570      	push	{r4, r5, r6, lr}
 80193ae:	4e15      	ldr	r6, [pc, #84]	@ (8019404 <sensor_msgs__msg__Imu__get_type_description+0x58>)
 80193b0:	7835      	ldrb	r5, [r6, #0]
 80193b2:	b10d      	cbz	r5, 80193b8 <sensor_msgs__msg__Imu__get_type_description+0xc>
 80193b4:	4814      	ldr	r0, [pc, #80]	@ (8019408 <sensor_msgs__msg__Imu__get_type_description+0x5c>)
 80193b6:	bd70      	pop	{r4, r5, r6, pc}
 80193b8:	4628      	mov	r0, r5
 80193ba:	f000 fd27 	bl	8019e0c <builtin_interfaces__msg__Time__get_type_description>
 80193be:	300c      	adds	r0, #12
 80193c0:	c807      	ldmia	r0, {r0, r1, r2}
 80193c2:	4c12      	ldr	r4, [pc, #72]	@ (801940c <sensor_msgs__msg__Imu__get_type_description+0x60>)
 80193c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80193c8:	4628      	mov	r0, r5
 80193ca:	f000 fd55 	bl	8019e78 <geometry_msgs__msg__Quaternion__get_type_description>
 80193ce:	300c      	adds	r0, #12
 80193d0:	c807      	ldmia	r0, {r0, r1, r2}
 80193d2:	f104 0318 	add.w	r3, r4, #24
 80193d6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80193da:	4628      	mov	r0, r5
 80193dc:	f000 fd92 	bl	8019f04 <geometry_msgs__msg__Vector3__get_type_description>
 80193e0:	300c      	adds	r0, #12
 80193e2:	c807      	ldmia	r0, {r0, r1, r2}
 80193e4:	f104 0330 	add.w	r3, r4, #48	@ 0x30
 80193e8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80193ec:	4628      	mov	r0, r5
 80193ee:	f000 f927 	bl	8019640 <std_msgs__msg__Header__get_type_description>
 80193f2:	300c      	adds	r0, #12
 80193f4:	c807      	ldmia	r0, {r0, r1, r2}
 80193f6:	3448      	adds	r4, #72	@ 0x48
 80193f8:	2301      	movs	r3, #1
 80193fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80193fe:	7033      	strb	r3, [r6, #0]
 8019400:	4801      	ldr	r0, [pc, #4]	@ (8019408 <sensor_msgs__msg__Imu__get_type_description+0x5c>)
 8019402:	bd70      	pop	{r4, r5, r6, pc}
 8019404:	20019915 	.word	0x20019915
 8019408:	08020364 	.word	0x08020364
 801940c:	20001c58 	.word	0x20001c58

08019410 <sensor_msgs__msg__Imu__get_type_description_sources>:
 8019410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019412:	4d26      	ldr	r5, [pc, #152]	@ (80194ac <sensor_msgs__msg__Imu__get_type_description_sources+0x9c>)
 8019414:	782f      	ldrb	r7, [r5, #0]
 8019416:	b10f      	cbz	r7, 801941c <sensor_msgs__msg__Imu__get_type_description_sources+0xc>
 8019418:	4825      	ldr	r0, [pc, #148]	@ (80194b0 <sensor_msgs__msg__Imu__get_type_description_sources+0xa0>)
 801941a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801941c:	4e25      	ldr	r6, [pc, #148]	@ (80194b4 <sensor_msgs__msg__Imu__get_type_description_sources+0xa4>)
 801941e:	4c26      	ldr	r4, [pc, #152]	@ (80194b8 <sensor_msgs__msg__Imu__get_type_description_sources+0xa8>)
 8019420:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8019422:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019424:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8019426:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019428:	6833      	ldr	r3, [r6, #0]
 801942a:	4626      	mov	r6, r4
 801942c:	4638      	mov	r0, r7
 801942e:	f846 3b04 	str.w	r3, [r6], #4
 8019432:	f000 fcf7 	bl	8019e24 <builtin_interfaces__msg__Time__get_individual_type_description_source>
 8019436:	4684      	mov	ip, r0
 8019438:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801943c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801943e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8019442:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8019444:	4638      	mov	r0, r7
 8019446:	f8dc 3000 	ldr.w	r3, [ip]
 801944a:	6033      	str	r3, [r6, #0]
 801944c:	f000 fd20 	bl	8019e90 <geometry_msgs__msg__Quaternion__get_individual_type_description_source>
 8019450:	4684      	mov	ip, r0
 8019452:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8019456:	f104 0628 	add.w	r6, r4, #40	@ 0x28
 801945a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801945c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8019460:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8019462:	4638      	mov	r0, r7
 8019464:	f8dc 3000 	ldr.w	r3, [ip]
 8019468:	6033      	str	r3, [r6, #0]
 801946a:	f000 fd57 	bl	8019f1c <geometry_msgs__msg__Vector3__get_individual_type_description_source>
 801946e:	4684      	mov	ip, r0
 8019470:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8019474:	f104 064c 	add.w	r6, r4, #76	@ 0x4c
 8019478:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801947a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801947e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8019480:	4638      	mov	r0, r7
 8019482:	f8dc 3000 	ldr.w	r3, [ip]
 8019486:	6033      	str	r3, [r6, #0]
 8019488:	f000 f8f2 	bl	8019670 <std_msgs__msg__Header__get_individual_type_description_source>
 801948c:	2301      	movs	r3, #1
 801948e:	4684      	mov	ip, r0
 8019490:	702b      	strb	r3, [r5, #0]
 8019492:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8019496:	3470      	adds	r4, #112	@ 0x70
 8019498:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801949a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801949e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80194a0:	f8dc 3000 	ldr.w	r3, [ip]
 80194a4:	4802      	ldr	r0, [pc, #8]	@ (80194b0 <sensor_msgs__msg__Imu__get_type_description_sources+0xa0>)
 80194a6:	6023      	str	r3, [r4, #0]
 80194a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80194aa:	bf00      	nop
 80194ac:	20019914 	.word	0x20019914
 80194b0:	08020334 	.word	0x08020334
 80194b4:	08020340 	.word	0x08020340
 80194b8:	20019860 	.word	0x20019860

080194bc <sensor_msgs__msg__Imu__init>:
 80194bc:	b3d8      	cbz	r0, 8019536 <sensor_msgs__msg__Imu__init+0x7a>
 80194be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80194c0:	4604      	mov	r4, r0
 80194c2:	f000 f901 	bl	80196c8 <std_msgs__msg__Header__init>
 80194c6:	b190      	cbz	r0, 80194ee <sensor_msgs__msg__Imu__init+0x32>
 80194c8:	f104 0518 	add.w	r5, r4, #24
 80194cc:	4628      	mov	r0, r5
 80194ce:	f000 fcff 	bl	8019ed0 <geometry_msgs__msg__Quaternion__init>
 80194d2:	b358      	cbz	r0, 801952c <sensor_msgs__msg__Imu__init+0x70>
 80194d4:	f104 0680 	add.w	r6, r4, #128	@ 0x80
 80194d8:	4630      	mov	r0, r6
 80194da:	f000 fd3f 	bl	8019f5c <geometry_msgs__msg__Vector3__init>
 80194de:	b1b8      	cbz	r0, 8019510 <sensor_msgs__msg__Imu__init+0x54>
 80194e0:	f104 07e0 	add.w	r7, r4, #224	@ 0xe0
 80194e4:	4638      	mov	r0, r7
 80194e6:	f000 fd39 	bl	8019f5c <geometry_msgs__msg__Vector3__init>
 80194ea:	b330      	cbz	r0, 801953a <sensor_msgs__msg__Imu__init+0x7e>
 80194ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80194ee:	4620      	mov	r0, r4
 80194f0:	f000 f90a 	bl	8019708 <std_msgs__msg__Header__fini>
 80194f4:	f104 0018 	add.w	r0, r4, #24
 80194f8:	f000 fcfe 	bl	8019ef8 <geometry_msgs__msg__Quaternion__fini>
 80194fc:	f104 0080 	add.w	r0, r4, #128	@ 0x80
 8019500:	f000 fd30 	bl	8019f64 <geometry_msgs__msg__Vector3__fini>
 8019504:	f104 00e0 	add.w	r0, r4, #224	@ 0xe0
 8019508:	f000 fd2c 	bl	8019f64 <geometry_msgs__msg__Vector3__fini>
 801950c:	2000      	movs	r0, #0
 801950e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019510:	4620      	mov	r0, r4
 8019512:	f000 f8f9 	bl	8019708 <std_msgs__msg__Header__fini>
 8019516:	4628      	mov	r0, r5
 8019518:	f000 fcee 	bl	8019ef8 <geometry_msgs__msg__Quaternion__fini>
 801951c:	4630      	mov	r0, r6
 801951e:	f000 fd21 	bl	8019f64 <geometry_msgs__msg__Vector3__fini>
 8019522:	f104 00e0 	add.w	r0, r4, #224	@ 0xe0
 8019526:	f000 fd1d 	bl	8019f64 <geometry_msgs__msg__Vector3__fini>
 801952a:	e7ef      	b.n	801950c <sensor_msgs__msg__Imu__init+0x50>
 801952c:	4620      	mov	r0, r4
 801952e:	f000 f8eb 	bl	8019708 <std_msgs__msg__Header__fini>
 8019532:	4628      	mov	r0, r5
 8019534:	e7e0      	b.n	80194f8 <sensor_msgs__msg__Imu__init+0x3c>
 8019536:	2000      	movs	r0, #0
 8019538:	4770      	bx	lr
 801953a:	4620      	mov	r0, r4
 801953c:	f000 f8e4 	bl	8019708 <std_msgs__msg__Header__fini>
 8019540:	4628      	mov	r0, r5
 8019542:	f000 fcd9 	bl	8019ef8 <geometry_msgs__msg__Quaternion__fini>
 8019546:	4630      	mov	r0, r6
 8019548:	f000 fd0c 	bl	8019f64 <geometry_msgs__msg__Vector3__fini>
 801954c:	4638      	mov	r0, r7
 801954e:	f000 fd09 	bl	8019f64 <geometry_msgs__msg__Vector3__fini>
 8019552:	e7db      	b.n	801950c <sensor_msgs__msg__Imu__init+0x50>

08019554 <sensor_msgs__msg__Imu__fini>:
 8019554:	b188      	cbz	r0, 801957a <sensor_msgs__msg__Imu__fini+0x26>
 8019556:	b510      	push	{r4, lr}
 8019558:	4604      	mov	r4, r0
 801955a:	f000 f8d5 	bl	8019708 <std_msgs__msg__Header__fini>
 801955e:	f104 0018 	add.w	r0, r4, #24
 8019562:	f000 fcc9 	bl	8019ef8 <geometry_msgs__msg__Quaternion__fini>
 8019566:	f104 0080 	add.w	r0, r4, #128	@ 0x80
 801956a:	f000 fcfb 	bl	8019f64 <geometry_msgs__msg__Vector3__fini>
 801956e:	f104 00e0 	add.w	r0, r4, #224	@ 0xe0
 8019572:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019576:	f000 bcf5 	b.w	8019f64 <geometry_msgs__msg__Vector3__fini>
 801957a:	4770      	bx	lr

0801957c <service_msgs__msg__ServiceEventInfo__get_type_hash>:
 801957c:	4800      	ldr	r0, [pc, #0]	@ (8019580 <service_msgs__msg__ServiceEventInfo__get_type_hash+0x4>)
 801957e:	4770      	bx	lr
 8019580:	20001fb8 	.word	0x20001fb8

08019584 <service_msgs__msg__ServiceEventInfo__get_type_description>:
 8019584:	b510      	push	{r4, lr}
 8019586:	4c08      	ldr	r4, [pc, #32]	@ (80195a8 <service_msgs__msg__ServiceEventInfo__get_type_description+0x24>)
 8019588:	7820      	ldrb	r0, [r4, #0]
 801958a:	b108      	cbz	r0, 8019590 <service_msgs__msg__ServiceEventInfo__get_type_description+0xc>
 801958c:	4807      	ldr	r0, [pc, #28]	@ (80195ac <service_msgs__msg__ServiceEventInfo__get_type_description+0x28>)
 801958e:	bd10      	pop	{r4, pc}
 8019590:	f000 fc3c 	bl	8019e0c <builtin_interfaces__msg__Time__get_type_description>
 8019594:	300c      	adds	r0, #12
 8019596:	c807      	ldmia	r0, {r0, r1, r2}
 8019598:	4b05      	ldr	r3, [pc, #20]	@ (80195b0 <service_msgs__msg__ServiceEventInfo__get_type_description+0x2c>)
 801959a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801959e:	2301      	movs	r3, #1
 80195a0:	4802      	ldr	r0, [pc, #8]	@ (80195ac <service_msgs__msg__ServiceEventInfo__get_type_description+0x28>)
 80195a2:	7023      	strb	r3, [r4, #0]
 80195a4:	bd10      	pop	{r4, pc}
 80195a6:	bf00      	nop
 80195a8:	20019961 	.word	0x20019961
 80195ac:	080203b8 	.word	0x080203b8
 80195b0:	200022a0 	.word	0x200022a0

080195b4 <service_msgs__msg__ServiceEventInfo__get_individual_type_description_source>:
 80195b4:	4800      	ldr	r0, [pc, #0]	@ (80195b8 <service_msgs__msg__ServiceEventInfo__get_individual_type_description_source+0x4>)
 80195b6:	4770      	bx	lr
 80195b8:	08020394 	.word	0x08020394

080195bc <service_msgs__msg__ServiceEventInfo__get_type_description_sources>:
 80195bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80195be:	4e0f      	ldr	r6, [pc, #60]	@ (80195fc <service_msgs__msg__ServiceEventInfo__get_type_description_sources+0x40>)
 80195c0:	7837      	ldrb	r7, [r6, #0]
 80195c2:	b10f      	cbz	r7, 80195c8 <service_msgs__msg__ServiceEventInfo__get_type_description_sources+0xc>
 80195c4:	480e      	ldr	r0, [pc, #56]	@ (8019600 <service_msgs__msg__ServiceEventInfo__get_type_description_sources+0x44>)
 80195c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80195c8:	4d0e      	ldr	r5, [pc, #56]	@ (8019604 <service_msgs__msg__ServiceEventInfo__get_type_description_sources+0x48>)
 80195ca:	4c0f      	ldr	r4, [pc, #60]	@ (8019608 <service_msgs__msg__ServiceEventInfo__get_type_description_sources+0x4c>)
 80195cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80195ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80195d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80195d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80195d4:	682b      	ldr	r3, [r5, #0]
 80195d6:	f844 3b04 	str.w	r3, [r4], #4
 80195da:	4638      	mov	r0, r7
 80195dc:	f000 fc22 	bl	8019e24 <builtin_interfaces__msg__Time__get_individual_type_description_source>
 80195e0:	2301      	movs	r3, #1
 80195e2:	4684      	mov	ip, r0
 80195e4:	7033      	strb	r3, [r6, #0]
 80195e6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80195ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80195ec:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80195f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80195f2:	f8dc 3000 	ldr.w	r3, [ip]
 80195f6:	4802      	ldr	r0, [pc, #8]	@ (8019600 <service_msgs__msg__ServiceEventInfo__get_type_description_sources+0x44>)
 80195f8:	6023      	str	r3, [r4, #0]
 80195fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80195fc:	20019960 	.word	0x20019960
 8019600:	08020388 	.word	0x08020388
 8019604:	08020394 	.word	0x08020394
 8019608:	20019918 	.word	0x20019918

0801960c <service_msgs__msg__ServiceEventInfo__init>:
 801960c:	b158      	cbz	r0, 8019626 <service_msgs__msg__ServiceEventInfo__init+0x1a>
 801960e:	b510      	push	{r4, lr}
 8019610:	1d04      	adds	r4, r0, #4
 8019612:	4620      	mov	r0, r4
 8019614:	f000 fc26 	bl	8019e64 <builtin_interfaces__msg__Time__init>
 8019618:	b100      	cbz	r0, 801961c <service_msgs__msg__ServiceEventInfo__init+0x10>
 801961a:	bd10      	pop	{r4, pc}
 801961c:	4620      	mov	r0, r4
 801961e:	f000 fc25 	bl	8019e6c <builtin_interfaces__msg__Time__fini>
 8019622:	2000      	movs	r0, #0
 8019624:	bd10      	pop	{r4, pc}
 8019626:	2000      	movs	r0, #0
 8019628:	4770      	bx	lr
 801962a:	bf00      	nop

0801962c <service_msgs__msg__ServiceEventInfo__fini>:
 801962c:	b110      	cbz	r0, 8019634 <service_msgs__msg__ServiceEventInfo__fini+0x8>
 801962e:	3004      	adds	r0, #4
 8019630:	f000 bc1c 	b.w	8019e6c <builtin_interfaces__msg__Time__fini>
 8019634:	4770      	bx	lr
 8019636:	bf00      	nop

08019638 <std_msgs__msg__Header__get_type_hash>:
 8019638:	4800      	ldr	r0, [pc, #0]	@ (801963c <std_msgs__msg__Header__get_type_hash+0x4>)
 801963a:	4770      	bx	lr
 801963c:	20002440 	.word	0x20002440

08019640 <std_msgs__msg__Header__get_type_description>:
 8019640:	b510      	push	{r4, lr}
 8019642:	4c08      	ldr	r4, [pc, #32]	@ (8019664 <std_msgs__msg__Header__get_type_description+0x24>)
 8019644:	7820      	ldrb	r0, [r4, #0]
 8019646:	b108      	cbz	r0, 801964c <std_msgs__msg__Header__get_type_description+0xc>
 8019648:	4807      	ldr	r0, [pc, #28]	@ (8019668 <std_msgs__msg__Header__get_type_description+0x28>)
 801964a:	bd10      	pop	{r4, pc}
 801964c:	f000 fbde 	bl	8019e0c <builtin_interfaces__msg__Time__get_type_description>
 8019650:	300c      	adds	r0, #12
 8019652:	c807      	ldmia	r0, {r0, r1, r2}
 8019654:	4b05      	ldr	r3, [pc, #20]	@ (801966c <std_msgs__msg__Header__get_type_description+0x2c>)
 8019656:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801965a:	2301      	movs	r3, #1
 801965c:	4802      	ldr	r0, [pc, #8]	@ (8019668 <std_msgs__msg__Header__get_type_description+0x28>)
 801965e:	7023      	strb	r3, [r4, #0]
 8019660:	bd10      	pop	{r4, pc}
 8019662:	bf00      	nop
 8019664:	200199ad 	.word	0x200199ad
 8019668:	0802040c 	.word	0x0802040c
 801966c:	200025b8 	.word	0x200025b8

08019670 <std_msgs__msg__Header__get_individual_type_description_source>:
 8019670:	4800      	ldr	r0, [pc, #0]	@ (8019674 <std_msgs__msg__Header__get_individual_type_description_source+0x4>)
 8019672:	4770      	bx	lr
 8019674:	080203e8 	.word	0x080203e8

08019678 <std_msgs__msg__Header__get_type_description_sources>:
 8019678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801967a:	4e0f      	ldr	r6, [pc, #60]	@ (80196b8 <std_msgs__msg__Header__get_type_description_sources+0x40>)
 801967c:	7837      	ldrb	r7, [r6, #0]
 801967e:	b10f      	cbz	r7, 8019684 <std_msgs__msg__Header__get_type_description_sources+0xc>
 8019680:	480e      	ldr	r0, [pc, #56]	@ (80196bc <std_msgs__msg__Header__get_type_description_sources+0x44>)
 8019682:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019684:	4d0e      	ldr	r5, [pc, #56]	@ (80196c0 <std_msgs__msg__Header__get_type_description_sources+0x48>)
 8019686:	4c0f      	ldr	r4, [pc, #60]	@ (80196c4 <std_msgs__msg__Header__get_type_description_sources+0x4c>)
 8019688:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801968a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801968c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801968e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019690:	682b      	ldr	r3, [r5, #0]
 8019692:	f844 3b04 	str.w	r3, [r4], #4
 8019696:	4638      	mov	r0, r7
 8019698:	f000 fbc4 	bl	8019e24 <builtin_interfaces__msg__Time__get_individual_type_description_source>
 801969c:	2301      	movs	r3, #1
 801969e:	4684      	mov	ip, r0
 80196a0:	7033      	strb	r3, [r6, #0]
 80196a2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80196a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80196a8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80196ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80196ae:	f8dc 3000 	ldr.w	r3, [ip]
 80196b2:	4802      	ldr	r0, [pc, #8]	@ (80196bc <std_msgs__msg__Header__get_type_description_sources+0x44>)
 80196b4:	6023      	str	r3, [r4, #0]
 80196b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80196b8:	200199ac 	.word	0x200199ac
 80196bc:	080203dc 	.word	0x080203dc
 80196c0:	080203e8 	.word	0x080203e8
 80196c4:	20019964 	.word	0x20019964

080196c8 <std_msgs__msg__Header__init>:
 80196c8:	b1d8      	cbz	r0, 8019702 <std_msgs__msg__Header__init+0x3a>
 80196ca:	b538      	push	{r3, r4, r5, lr}
 80196cc:	4604      	mov	r4, r0
 80196ce:	f000 fbc9 	bl	8019e64 <builtin_interfaces__msg__Time__init>
 80196d2:	b130      	cbz	r0, 80196e2 <std_msgs__msg__Header__init+0x1a>
 80196d4:	f104 0508 	add.w	r5, r4, #8
 80196d8:	4628      	mov	r0, r5
 80196da:	f002 fe49 	bl	801c370 <rosidl_runtime_c__String__init>
 80196de:	b148      	cbz	r0, 80196f4 <std_msgs__msg__Header__init+0x2c>
 80196e0:	bd38      	pop	{r3, r4, r5, pc}
 80196e2:	4620      	mov	r0, r4
 80196e4:	f000 fbc2 	bl	8019e6c <builtin_interfaces__msg__Time__fini>
 80196e8:	f104 0008 	add.w	r0, r4, #8
 80196ec:	f002 fe5a 	bl	801c3a4 <rosidl_runtime_c__String__fini>
 80196f0:	2000      	movs	r0, #0
 80196f2:	bd38      	pop	{r3, r4, r5, pc}
 80196f4:	4620      	mov	r0, r4
 80196f6:	f000 fbb9 	bl	8019e6c <builtin_interfaces__msg__Time__fini>
 80196fa:	4628      	mov	r0, r5
 80196fc:	f002 fe52 	bl	801c3a4 <rosidl_runtime_c__String__fini>
 8019700:	e7f6      	b.n	80196f0 <std_msgs__msg__Header__init+0x28>
 8019702:	2000      	movs	r0, #0
 8019704:	4770      	bx	lr
 8019706:	bf00      	nop

08019708 <std_msgs__msg__Header__fini>:
 8019708:	b148      	cbz	r0, 801971e <std_msgs__msg__Header__fini+0x16>
 801970a:	b510      	push	{r4, lr}
 801970c:	4604      	mov	r4, r0
 801970e:	f000 fbad 	bl	8019e6c <builtin_interfaces__msg__Time__fini>
 8019712:	f104 0008 	add.w	r0, r4, #8
 8019716:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801971a:	f002 be43 	b.w	801c3a4 <rosidl_runtime_c__String__fini>
 801971e:	4770      	bx	lr

08019720 <std_srvs__srv__SetBool_Event__get_type_description.part.0>:
 8019720:	b510      	push	{r4, lr}
 8019722:	2000      	movs	r0, #0
 8019724:	f000 fb72 	bl	8019e0c <builtin_interfaces__msg__Time__get_type_description>
 8019728:	300c      	adds	r0, #12
 801972a:	c807      	ldmia	r0, {r0, r1, r2}
 801972c:	4c11      	ldr	r4, [pc, #68]	@ (8019774 <std_srvs__srv__SetBool_Event__get_type_description.part.0+0x54>)
 801972e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8019732:	2000      	movs	r0, #0
 8019734:	f7ff ff26 	bl	8019584 <service_msgs__msg__ServiceEventInfo__get_type_description>
 8019738:	300c      	adds	r0, #12
 801973a:	c807      	ldmia	r0, {r0, r1, r2}
 801973c:	4b0e      	ldr	r3, [pc, #56]	@ (8019778 <std_srvs__srv__SetBool_Event__get_type_description.part.0+0x58>)
 801973e:	3418      	adds	r4, #24
 8019740:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8019744:	781a      	ldrb	r2, [r3, #0]
 8019746:	b90a      	cbnz	r2, 801974c <std_srvs__srv__SetBool_Event__get_type_description.part.0+0x2c>
 8019748:	2201      	movs	r2, #1
 801974a:	701a      	strb	r2, [r3, #0]
 801974c:	4b0b      	ldr	r3, [pc, #44]	@ (801977c <std_srvs__srv__SetBool_Event__get_type_description.part.0+0x5c>)
 801974e:	4c0c      	ldr	r4, [pc, #48]	@ (8019780 <std_srvs__srv__SetBool_Event__get_type_description.part.0+0x60>)
 8019750:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8019754:	4b0b      	ldr	r3, [pc, #44]	@ (8019784 <std_srvs__srv__SetBool_Event__get_type_description.part.0+0x64>)
 8019756:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801975a:	7823      	ldrb	r3, [r4, #0]
 801975c:	b90b      	cbnz	r3, 8019762 <std_srvs__srv__SetBool_Event__get_type_description.part.0+0x42>
 801975e:	2301      	movs	r3, #1
 8019760:	7023      	strb	r3, [r4, #0]
 8019762:	4a09      	ldr	r2, [pc, #36]	@ (8019788 <std_srvs__srv__SetBool_Event__get_type_description.part.0+0x68>)
 8019764:	4b09      	ldr	r3, [pc, #36]	@ (801978c <std_srvs__srv__SetBool_Event__get_type_description.part.0+0x6c>)
 8019766:	4c0a      	ldr	r4, [pc, #40]	@ (8019790 <std_srvs__srv__SetBool_Event__get_type_description.part.0+0x70>)
 8019768:	ca07      	ldmia	r2, {r0, r1, r2}
 801976a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801976e:	2301      	movs	r3, #1
 8019770:	7023      	strb	r3, [r4, #0]
 8019772:	bd10      	pop	{r4, pc}
 8019774:	200027f8 	.word	0x200027f8
 8019778:	20019b93 	.word	0x20019b93
 801977c:	08020544 	.word	0x08020544
 8019780:	20019b92 	.word	0x20019b92
 8019784:	20002828 	.word	0x20002828
 8019788:	08020520 	.word	0x08020520
 801978c:	20002840 	.word	0x20002840
 8019790:	20019b91 	.word	0x20019b91

08019794 <std_srvs__srv__SetBool__get_type_hash>:
 8019794:	4800      	ldr	r0, [pc, #0]	@ (8019798 <std_srvs__srv__SetBool__get_type_hash+0x4>)
 8019796:	4770      	bx	lr
 8019798:	20002708 	.word	0x20002708

0801979c <std_srvs__srv__SetBool_Request__get_type_hash>:
 801979c:	4800      	ldr	r0, [pc, #0]	@ (80197a0 <std_srvs__srv__SetBool_Request__get_type_hash+0x4>)
 801979e:	4770      	bx	lr
 80197a0:	200026e4 	.word	0x200026e4

080197a4 <std_srvs__srv__SetBool_Response__get_type_hash>:
 80197a4:	4800      	ldr	r0, [pc, #0]	@ (80197a8 <std_srvs__srv__SetBool_Response__get_type_hash+0x4>)
 80197a6:	4770      	bx	lr
 80197a8:	200026c0 	.word	0x200026c0

080197ac <std_srvs__srv__SetBool_Event__get_type_hash>:
 80197ac:	4800      	ldr	r0, [pc, #0]	@ (80197b0 <std_srvs__srv__SetBool_Event__get_type_hash+0x4>)
 80197ae:	4770      	bx	lr
 80197b0:	2000269c 	.word	0x2000269c

080197b4 <std_srvs__srv__SetBool__get_type_description>:
 80197b4:	b570      	push	{r4, r5, r6, lr}
 80197b6:	4e1d      	ldr	r6, [pc, #116]	@ (801982c <std_srvs__srv__SetBool__get_type_description+0x78>)
 80197b8:	7835      	ldrb	r5, [r6, #0]
 80197ba:	b10d      	cbz	r5, 80197c0 <std_srvs__srv__SetBool__get_type_description+0xc>
 80197bc:	481c      	ldr	r0, [pc, #112]	@ (8019830 <std_srvs__srv__SetBool__get_type_description+0x7c>)
 80197be:	bd70      	pop	{r4, r5, r6, pc}
 80197c0:	4628      	mov	r0, r5
 80197c2:	f000 fb23 	bl	8019e0c <builtin_interfaces__msg__Time__get_type_description>
 80197c6:	300c      	adds	r0, #12
 80197c8:	c807      	ldmia	r0, {r0, r1, r2}
 80197ca:	4c1a      	ldr	r4, [pc, #104]	@ (8019834 <std_srvs__srv__SetBool__get_type_description+0x80>)
 80197cc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80197d0:	4628      	mov	r0, r5
 80197d2:	f7ff fed7 	bl	8019584 <service_msgs__msg__ServiceEventInfo__get_type_description>
 80197d6:	300c      	adds	r0, #12
 80197d8:	c807      	ldmia	r0, {r0, r1, r2}
 80197da:	4b17      	ldr	r3, [pc, #92]	@ (8019838 <std_srvs__srv__SetBool__get_type_description+0x84>)
 80197dc:	781b      	ldrb	r3, [r3, #0]
 80197de:	3418      	adds	r4, #24
 80197e0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80197e4:	b1f3      	cbz	r3, 8019824 <std_srvs__srv__SetBool__get_type_description+0x70>
 80197e6:	4b15      	ldr	r3, [pc, #84]	@ (801983c <std_srvs__srv__SetBool__get_type_description+0x88>)
 80197e8:	4c15      	ldr	r4, [pc, #84]	@ (8019840 <std_srvs__srv__SetBool__get_type_description+0x8c>)
 80197ea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80197ee:	4b15      	ldr	r3, [pc, #84]	@ (8019844 <std_srvs__srv__SetBool__get_type_description+0x90>)
 80197f0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80197f4:	7823      	ldrb	r3, [r4, #0]
 80197f6:	b90b      	cbnz	r3, 80197fc <std_srvs__srv__SetBool__get_type_description+0x48>
 80197f8:	2301      	movs	r3, #1
 80197fa:	7023      	strb	r3, [r4, #0]
 80197fc:	4b12      	ldr	r3, [pc, #72]	@ (8019848 <std_srvs__srv__SetBool__get_type_description+0x94>)
 80197fe:	4c13      	ldr	r4, [pc, #76]	@ (801984c <std_srvs__srv__SetBool__get_type_description+0x98>)
 8019800:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8019804:	4b12      	ldr	r3, [pc, #72]	@ (8019850 <std_srvs__srv__SetBool__get_type_description+0x9c>)
 8019806:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801980a:	7823      	ldrb	r3, [r4, #0]
 801980c:	b90b      	cbnz	r3, 8019812 <std_srvs__srv__SetBool__get_type_description+0x5e>
 801980e:	2301      	movs	r3, #1
 8019810:	7023      	strb	r3, [r4, #0]
 8019812:	4a10      	ldr	r2, [pc, #64]	@ (8019854 <std_srvs__srv__SetBool__get_type_description+0xa0>)
 8019814:	4b10      	ldr	r3, [pc, #64]	@ (8019858 <std_srvs__srv__SetBool__get_type_description+0xa4>)
 8019816:	ca07      	ldmia	r2, {r0, r1, r2}
 8019818:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801981c:	2301      	movs	r3, #1
 801981e:	4804      	ldr	r0, [pc, #16]	@ (8019830 <std_srvs__srv__SetBool__get_type_description+0x7c>)
 8019820:	7033      	strb	r3, [r6, #0]
 8019822:	bd70      	pop	{r4, r5, r6, pc}
 8019824:	f7ff ff7c 	bl	8019720 <std_srvs__srv__SetBool_Event__get_type_description.part.0>
 8019828:	e7dd      	b.n	80197e6 <std_srvs__srv__SetBool__get_type_description+0x32>
 801982a:	bf00      	nop
 801982c:	20019b94 	.word	0x20019b94
 8019830:	0802055c 	.word	0x0802055c
 8019834:	20002a44 	.word	0x20002a44
 8019838:	20019b91 	.word	0x20019b91
 801983c:	080204fc 	.word	0x080204fc
 8019840:	20019b93 	.word	0x20019b93
 8019844:	20002a74 	.word	0x20002a74
 8019848:	08020544 	.word	0x08020544
 801984c:	20019b92 	.word	0x20019b92
 8019850:	20002a8c 	.word	0x20002a8c
 8019854:	08020520 	.word	0x08020520
 8019858:	20002aa4 	.word	0x20002aa4

0801985c <std_srvs__srv__SetBool_Request__get_type_description>:
 801985c:	4b03      	ldr	r3, [pc, #12]	@ (801986c <std_srvs__srv__SetBool_Request__get_type_description+0x10>)
 801985e:	781a      	ldrb	r2, [r3, #0]
 8019860:	b90a      	cbnz	r2, 8019866 <std_srvs__srv__SetBool_Request__get_type_description+0xa>
 8019862:	2201      	movs	r2, #1
 8019864:	701a      	strb	r2, [r3, #0]
 8019866:	4802      	ldr	r0, [pc, #8]	@ (8019870 <std_srvs__srv__SetBool_Request__get_type_description+0x14>)
 8019868:	4770      	bx	lr
 801986a:	bf00      	nop
 801986c:	20019b93 	.word	0x20019b93
 8019870:	08020538 	.word	0x08020538

08019874 <std_srvs__srv__SetBool_Response__get_type_description>:
 8019874:	4b03      	ldr	r3, [pc, #12]	@ (8019884 <std_srvs__srv__SetBool_Response__get_type_description+0x10>)
 8019876:	781a      	ldrb	r2, [r3, #0]
 8019878:	b90a      	cbnz	r2, 801987e <std_srvs__srv__SetBool_Response__get_type_description+0xa>
 801987a:	2201      	movs	r2, #1
 801987c:	701a      	strb	r2, [r3, #0]
 801987e:	4802      	ldr	r0, [pc, #8]	@ (8019888 <std_srvs__srv__SetBool_Response__get_type_description+0x14>)
 8019880:	4770      	bx	lr
 8019882:	bf00      	nop
 8019884:	20019b92 	.word	0x20019b92
 8019888:	08020514 	.word	0x08020514

0801988c <std_srvs__srv__SetBool_Event__get_type_description>:
 801988c:	b508      	push	{r3, lr}
 801988e:	4b04      	ldr	r3, [pc, #16]	@ (80198a0 <std_srvs__srv__SetBool_Event__get_type_description+0x14>)
 8019890:	781b      	ldrb	r3, [r3, #0]
 8019892:	b10b      	cbz	r3, 8019898 <std_srvs__srv__SetBool_Event__get_type_description+0xc>
 8019894:	4803      	ldr	r0, [pc, #12]	@ (80198a4 <std_srvs__srv__SetBool_Event__get_type_description+0x18>)
 8019896:	bd08      	pop	{r3, pc}
 8019898:	f7ff ff42 	bl	8019720 <std_srvs__srv__SetBool_Event__get_type_description.part.0>
 801989c:	4801      	ldr	r0, [pc, #4]	@ (80198a4 <std_srvs__srv__SetBool_Event__get_type_description+0x18>)
 801989e:	bd08      	pop	{r3, pc}
 80198a0:	20019b91 	.word	0x20019b91
 80198a4:	080204f0 	.word	0x080204f0

080198a8 <std_srvs__srv__SetBool__get_type_description_sources>:
 80198a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80198ac:	4e2c      	ldr	r6, [pc, #176]	@ (8019960 <std_srvs__srv__SetBool__get_type_description_sources+0xb8>)
 80198ae:	7837      	ldrb	r7, [r6, #0]
 80198b0:	b117      	cbz	r7, 80198b8 <std_srvs__srv__SetBool__get_type_description_sources+0x10>
 80198b2:	482c      	ldr	r0, [pc, #176]	@ (8019964 <std_srvs__srv__SetBool__get_type_description_sources+0xbc>)
 80198b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80198b8:	4d2b      	ldr	r5, [pc, #172]	@ (8019968 <std_srvs__srv__SetBool__get_type_description_sources+0xc0>)
 80198ba:	4c2c      	ldr	r4, [pc, #176]	@ (801996c <std_srvs__srv__SetBool__get_type_description_sources+0xc4>)
 80198bc:	f8df 90b8 	ldr.w	r9, [pc, #184]	@ 8019978 <std_srvs__srv__SetBool__get_type_description_sources+0xd0>
 80198c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80198c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80198c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80198c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80198c8:	682b      	ldr	r3, [r5, #0]
 80198ca:	4625      	mov	r5, r4
 80198cc:	4638      	mov	r0, r7
 80198ce:	f845 3b04 	str.w	r3, [r5], #4
 80198d2:	f000 faa7 	bl	8019e24 <builtin_interfaces__msg__Time__get_individual_type_description_source>
 80198d6:	4684      	mov	ip, r0
 80198d8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80198dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80198de:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80198e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80198e4:	4638      	mov	r0, r7
 80198e6:	f8dc 3000 	ldr.w	r3, [ip]
 80198ea:	602b      	str	r3, [r5, #0]
 80198ec:	f7ff fe62 	bl	80195b4 <service_msgs__msg__ServiceEventInfo__get_individual_type_description_source>
 80198f0:	4684      	mov	ip, r0
 80198f2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80198f6:	f104 0a28 	add.w	sl, r4, #40	@ 0x28
 80198fa:	e8aa 000f 	stmia.w	sl!, {r0, r1, r2, r3}
 80198fe:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8019902:	e8aa 000f 	stmia.w	sl!, {r0, r1, r2, r3}
 8019906:	f8dc 3000 	ldr.w	r3, [ip]
 801990a:	f8ca 3000 	str.w	r3, [sl]
 801990e:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 8019912:	f104 084c 	add.w	r8, r4, #76	@ 0x4c
 8019916:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
 801991a:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 801991e:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
 8019922:	4f13      	ldr	r7, [pc, #76]	@ (8019970 <std_srvs__srv__SetBool__get_type_description_sources+0xc8>)
 8019924:	f8d9 3000 	ldr.w	r3, [r9]
 8019928:	f8c8 3000 	str.w	r3, [r8]
 801992c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801992e:	f104 0e70 	add.w	lr, r4, #112	@ 0x70
 8019932:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8019936:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8019938:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801993c:	4d0d      	ldr	r5, [pc, #52]	@ (8019974 <std_srvs__srv__SetBool__get_type_description_sources+0xcc>)
 801993e:	683b      	ldr	r3, [r7, #0]
 8019940:	f8ce 3000 	str.w	r3, [lr]
 8019944:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019946:	3494      	adds	r4, #148	@ 0x94
 8019948:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801994a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801994c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801994e:	f04f 0b01 	mov.w	fp, #1
 8019952:	682b      	ldr	r3, [r5, #0]
 8019954:	4803      	ldr	r0, [pc, #12]	@ (8019964 <std_srvs__srv__SetBool__get_type_description_sources+0xbc>)
 8019956:	f886 b000 	strb.w	fp, [r6]
 801995a:	6023      	str	r3, [r4, #0]
 801995c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019960:	20019b90 	.word	0x20019b90
 8019964:	08020454 	.word	0x08020454
 8019968:	080204cc 	.word	0x080204cc
 801996c:	20019ab8 	.word	0x20019ab8
 8019970:	080204a8 	.word	0x080204a8
 8019974:	08020484 	.word	0x08020484
 8019978:	08020460 	.word	0x08020460

0801997c <std_srvs__srv__SetBool_Request__get_type_description_sources>:
 801997c:	4b09      	ldr	r3, [pc, #36]	@ (80199a4 <std_srvs__srv__SetBool_Request__get_type_description_sources+0x28>)
 801997e:	781a      	ldrb	r2, [r3, #0]
 8019980:	b96a      	cbnz	r2, 801999e <std_srvs__srv__SetBool_Request__get_type_description_sources+0x22>
 8019982:	b430      	push	{r4, r5}
 8019984:	4d08      	ldr	r5, [pc, #32]	@ (80199a8 <std_srvs__srv__SetBool_Request__get_type_description_sources+0x2c>)
 8019986:	4c09      	ldr	r4, [pc, #36]	@ (80199ac <std_srvs__srv__SetBool_Request__get_type_description_sources+0x30>)
 8019988:	2201      	movs	r2, #1
 801998a:	701a      	strb	r2, [r3, #0]
 801998c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801998e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019990:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019992:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019994:	682b      	ldr	r3, [r5, #0]
 8019996:	4806      	ldr	r0, [pc, #24]	@ (80199b0 <std_srvs__srv__SetBool_Request__get_type_description_sources+0x34>)
 8019998:	6023      	str	r3, [r4, #0]
 801999a:	bc30      	pop	{r4, r5}
 801999c:	4770      	bx	lr
 801999e:	4804      	ldr	r0, [pc, #16]	@ (80199b0 <std_srvs__srv__SetBool_Request__get_type_description_sources+0x34>)
 80199a0:	4770      	bx	lr
 80199a2:	bf00      	nop
 80199a4:	20019ab4 	.word	0x20019ab4
 80199a8:	080204a8 	.word	0x080204a8
 80199ac:	20019a90 	.word	0x20019a90
 80199b0:	08020448 	.word	0x08020448

080199b4 <std_srvs__srv__SetBool_Response__get_type_description_sources>:
 80199b4:	4b09      	ldr	r3, [pc, #36]	@ (80199dc <std_srvs__srv__SetBool_Response__get_type_description_sources+0x28>)
 80199b6:	781a      	ldrb	r2, [r3, #0]
 80199b8:	b96a      	cbnz	r2, 80199d6 <std_srvs__srv__SetBool_Response__get_type_description_sources+0x22>
 80199ba:	b430      	push	{r4, r5}
 80199bc:	4d08      	ldr	r5, [pc, #32]	@ (80199e0 <std_srvs__srv__SetBool_Response__get_type_description_sources+0x2c>)
 80199be:	4c09      	ldr	r4, [pc, #36]	@ (80199e4 <std_srvs__srv__SetBool_Response__get_type_description_sources+0x30>)
 80199c0:	2201      	movs	r2, #1
 80199c2:	701a      	strb	r2, [r3, #0]
 80199c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80199c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80199c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80199ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80199cc:	682b      	ldr	r3, [r5, #0]
 80199ce:	4806      	ldr	r0, [pc, #24]	@ (80199e8 <std_srvs__srv__SetBool_Response__get_type_description_sources+0x34>)
 80199d0:	6023      	str	r3, [r4, #0]
 80199d2:	bc30      	pop	{r4, r5}
 80199d4:	4770      	bx	lr
 80199d6:	4804      	ldr	r0, [pc, #16]	@ (80199e8 <std_srvs__srv__SetBool_Response__get_type_description_sources+0x34>)
 80199d8:	4770      	bx	lr
 80199da:	bf00      	nop
 80199dc:	20019a8c 	.word	0x20019a8c
 80199e0:	08020484 	.word	0x08020484
 80199e4:	20019a68 	.word	0x20019a68
 80199e8:	0802043c 	.word	0x0802043c

080199ec <std_srvs__srv__SetBool_Event__get_type_description_sources>:
 80199ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80199f0:	4e24      	ldr	r6, [pc, #144]	@ (8019a84 <std_srvs__srv__SetBool_Event__get_type_description_sources+0x98>)
 80199f2:	7837      	ldrb	r7, [r6, #0]
 80199f4:	b117      	cbz	r7, 80199fc <std_srvs__srv__SetBool_Event__get_type_description_sources+0x10>
 80199f6:	4824      	ldr	r0, [pc, #144]	@ (8019a88 <std_srvs__srv__SetBool_Event__get_type_description_sources+0x9c>)
 80199f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80199fc:	4d23      	ldr	r5, [pc, #140]	@ (8019a8c <std_srvs__srv__SetBool_Event__get_type_description_sources+0xa0>)
 80199fe:	4c24      	ldr	r4, [pc, #144]	@ (8019a90 <std_srvs__srv__SetBool_Event__get_type_description_sources+0xa4>)
 8019a00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019a02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019a04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019a06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019a08:	682b      	ldr	r3, [r5, #0]
 8019a0a:	4625      	mov	r5, r4
 8019a0c:	4638      	mov	r0, r7
 8019a0e:	f845 3b04 	str.w	r3, [r5], #4
 8019a12:	f000 fa07 	bl	8019e24 <builtin_interfaces__msg__Time__get_individual_type_description_source>
 8019a16:	4684      	mov	ip, r0
 8019a18:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8019a1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8019a1e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8019a22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8019a24:	4638      	mov	r0, r7
 8019a26:	f8dc 3000 	ldr.w	r3, [ip]
 8019a2a:	602b      	str	r3, [r5, #0]
 8019a2c:	f7ff fdc2 	bl	80195b4 <service_msgs__msg__ServiceEventInfo__get_individual_type_description_source>
 8019a30:	4684      	mov	ip, r0
 8019a32:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8019a36:	f104 0828 	add.w	r8, r4, #40	@ 0x28
 8019a3a:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
 8019a3e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8019a42:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
 8019a46:	4f13      	ldr	r7, [pc, #76]	@ (8019a94 <std_srvs__srv__SetBool_Event__get_type_description_sources+0xa8>)
 8019a48:	f8dc 3000 	ldr.w	r3, [ip]
 8019a4c:	f8c8 3000 	str.w	r3, [r8]
 8019a50:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8019a52:	f104 0e4c 	add.w	lr, r4, #76	@ 0x4c
 8019a56:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8019a5a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8019a5c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8019a60:	4d0d      	ldr	r5, [pc, #52]	@ (8019a98 <std_srvs__srv__SetBool_Event__get_type_description_sources+0xac>)
 8019a62:	683b      	ldr	r3, [r7, #0]
 8019a64:	f8ce 3000 	str.w	r3, [lr]
 8019a68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019a6a:	3470      	adds	r4, #112	@ 0x70
 8019a6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019a6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019a70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019a72:	f04f 0901 	mov.w	r9, #1
 8019a76:	682b      	ldr	r3, [r5, #0]
 8019a78:	4803      	ldr	r0, [pc, #12]	@ (8019a88 <std_srvs__srv__SetBool_Event__get_type_description_sources+0x9c>)
 8019a7a:	f886 9000 	strb.w	r9, [r6]
 8019a7e:	6023      	str	r3, [r4, #0]
 8019a80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019a84:	20019a64 	.word	0x20019a64
 8019a88:	08020430 	.word	0x08020430
 8019a8c:	08020460 	.word	0x08020460
 8019a90:	200199b0 	.word	0x200199b0
 8019a94:	080204a8 	.word	0x080204a8
 8019a98:	08020484 	.word	0x08020484

08019a9c <std_srvs__srv__SetBool_Event__fini.part.0>:
 8019a9c:	b530      	push	{r4, r5, lr}
 8019a9e:	4605      	mov	r5, r0
 8019aa0:	b087      	sub	sp, #28
 8019aa2:	f7ff fdc3 	bl	801962c <service_msgs__msg__ServiceEventInfo__fini>
 8019aa6:	a801      	add	r0, sp, #4
 8019aa8:	f7f3 fbac 	bl	800d204 <rcutils_get_default_allocator>
 8019aac:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8019aae:	b130      	cbz	r0, 8019abe <std_srvs__srv__SetBool_Event__fini.part.0+0x22>
 8019ab0:	9b02      	ldr	r3, [sp, #8]
 8019ab2:	9905      	ldr	r1, [sp, #20]
 8019ab4:	4798      	blx	r3
 8019ab6:	2300      	movs	r3, #0
 8019ab8:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 8019abc:	632b      	str	r3, [r5, #48]	@ 0x30
 8019abe:	a801      	add	r0, sp, #4
 8019ac0:	f7f3 fba0 	bl	800d204 <rcutils_get_default_allocator>
 8019ac4:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8019ac6:	b1b3      	cbz	r3, 8019af6 <std_srvs__srv__SetBool_Event__fini.part.0+0x5a>
 8019ac8:	6bea      	ldr	r2, [r5, #60]	@ 0x3c
 8019aca:	b162      	cbz	r2, 8019ae6 <std_srvs__srv__SetBool_Event__fini.part.0+0x4a>
 8019acc:	2400      	movs	r4, #0
 8019ace:	eb13 1004 	adds.w	r0, r3, r4, lsl #4
 8019ad2:	f100 0004 	add.w	r0, r0, #4
 8019ad6:	d010      	beq.n	8019afa <std_srvs__srv__SetBool_Event__fini.part.0+0x5e>
 8019ad8:	f002 fc64 	bl	801c3a4 <rosidl_runtime_c__String__fini>
 8019adc:	6bea      	ldr	r2, [r5, #60]	@ 0x3c
 8019ade:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8019ae0:	3401      	adds	r4, #1
 8019ae2:	4294      	cmp	r4, r2
 8019ae4:	d3f3      	bcc.n	8019ace <std_srvs__srv__SetBool_Event__fini.part.0+0x32>
 8019ae6:	4618      	mov	r0, r3
 8019ae8:	9a02      	ldr	r2, [sp, #8]
 8019aea:	9905      	ldr	r1, [sp, #20]
 8019aec:	4790      	blx	r2
 8019aee:	2300      	movs	r3, #0
 8019af0:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 8019af4:	63eb      	str	r3, [r5, #60]	@ 0x3c
 8019af6:	b007      	add	sp, #28
 8019af8:	bd30      	pop	{r4, r5, pc}
 8019afa:	3401      	adds	r4, #1
 8019afc:	4294      	cmp	r4, r2
 8019afe:	d3e6      	bcc.n	8019ace <std_srvs__srv__SetBool_Event__fini.part.0+0x32>
 8019b00:	e7f1      	b.n	8019ae6 <std_srvs__srv__SetBool_Event__fini.part.0+0x4a>
 8019b02:	bf00      	nop

08019b04 <std_srvs__srv__SetBool_Request__init>:
 8019b04:	3800      	subs	r0, #0
 8019b06:	bf18      	it	ne
 8019b08:	2001      	movne	r0, #1
 8019b0a:	4770      	bx	lr

08019b0c <std_srvs__srv__SetBool_Request__fini>:
 8019b0c:	4770      	bx	lr
 8019b0e:	bf00      	nop

08019b10 <std_srvs__srv__SetBool_Request__copy>:
 8019b10:	b128      	cbz	r0, 8019b1e <std_srvs__srv__SetBool_Request__copy+0xe>
 8019b12:	b119      	cbz	r1, 8019b1c <std_srvs__srv__SetBool_Request__copy+0xc>
 8019b14:	7803      	ldrb	r3, [r0, #0]
 8019b16:	700b      	strb	r3, [r1, #0]
 8019b18:	2001      	movs	r0, #1
 8019b1a:	4770      	bx	lr
 8019b1c:	4608      	mov	r0, r1
 8019b1e:	4770      	bx	lr

08019b20 <std_srvs__srv__SetBool_Request__Sequence__init>:
 8019b20:	b1c0      	cbz	r0, 8019b54 <std_srvs__srv__SetBool_Request__Sequence__init+0x34>
 8019b22:	b530      	push	{r4, r5, lr}
 8019b24:	b087      	sub	sp, #28
 8019b26:	460d      	mov	r5, r1
 8019b28:	4604      	mov	r4, r0
 8019b2a:	a801      	add	r0, sp, #4
 8019b2c:	f7f3 fb6a 	bl	800d204 <rcutils_get_default_allocator>
 8019b30:	9a05      	ldr	r2, [sp, #20]
 8019b32:	b935      	cbnz	r5, 8019b42 <std_srvs__srv__SetBool_Request__Sequence__init+0x22>
 8019b34:	4628      	mov	r0, r5
 8019b36:	e9c4 0500 	strd	r0, r5, [r4]
 8019b3a:	2001      	movs	r0, #1
 8019b3c:	60a5      	str	r5, [r4, #8]
 8019b3e:	b007      	add	sp, #28
 8019b40:	bd30      	pop	{r4, r5, pc}
 8019b42:	9b04      	ldr	r3, [sp, #16]
 8019b44:	2101      	movs	r1, #1
 8019b46:	4628      	mov	r0, r5
 8019b48:	4798      	blx	r3
 8019b4a:	2800      	cmp	r0, #0
 8019b4c:	d1f3      	bne.n	8019b36 <std_srvs__srv__SetBool_Request__Sequence__init+0x16>
 8019b4e:	2000      	movs	r0, #0
 8019b50:	b007      	add	sp, #28
 8019b52:	bd30      	pop	{r4, r5, pc}
 8019b54:	2000      	movs	r0, #0
 8019b56:	4770      	bx	lr

08019b58 <std_srvs__srv__SetBool_Request__Sequence__fini>:
 8019b58:	b180      	cbz	r0, 8019b7c <std_srvs__srv__SetBool_Request__Sequence__fini+0x24>
 8019b5a:	b510      	push	{r4, lr}
 8019b5c:	4604      	mov	r4, r0
 8019b5e:	b086      	sub	sp, #24
 8019b60:	a801      	add	r0, sp, #4
 8019b62:	f7f3 fb4f 	bl	800d204 <rcutils_get_default_allocator>
 8019b66:	6820      	ldr	r0, [r4, #0]
 8019b68:	b130      	cbz	r0, 8019b78 <std_srvs__srv__SetBool_Request__Sequence__fini+0x20>
 8019b6a:	9b02      	ldr	r3, [sp, #8]
 8019b6c:	9905      	ldr	r1, [sp, #20]
 8019b6e:	4798      	blx	r3
 8019b70:	2300      	movs	r3, #0
 8019b72:	e9c4 3300 	strd	r3, r3, [r4]
 8019b76:	60a3      	str	r3, [r4, #8]
 8019b78:	b006      	add	sp, #24
 8019b7a:	bd10      	pop	{r4, pc}
 8019b7c:	4770      	bx	lr
 8019b7e:	bf00      	nop

08019b80 <std_srvs__srv__SetBool_Response__init>:
 8019b80:	b158      	cbz	r0, 8019b9a <std_srvs__srv__SetBool_Response__init+0x1a>
 8019b82:	b510      	push	{r4, lr}
 8019b84:	1d04      	adds	r4, r0, #4
 8019b86:	4620      	mov	r0, r4
 8019b88:	f002 fbf2 	bl	801c370 <rosidl_runtime_c__String__init>
 8019b8c:	b100      	cbz	r0, 8019b90 <std_srvs__srv__SetBool_Response__init+0x10>
 8019b8e:	bd10      	pop	{r4, pc}
 8019b90:	4620      	mov	r0, r4
 8019b92:	f002 fc07 	bl	801c3a4 <rosidl_runtime_c__String__fini>
 8019b96:	2000      	movs	r0, #0
 8019b98:	bd10      	pop	{r4, pc}
 8019b9a:	2000      	movs	r0, #0
 8019b9c:	4770      	bx	lr
 8019b9e:	bf00      	nop

08019ba0 <std_srvs__srv__SetBool_Response__fini>:
 8019ba0:	b110      	cbz	r0, 8019ba8 <std_srvs__srv__SetBool_Response__fini+0x8>
 8019ba2:	3004      	adds	r0, #4
 8019ba4:	f002 bbfe 	b.w	801c3a4 <rosidl_runtime_c__String__fini>
 8019ba8:	4770      	bx	lr
 8019baa:	bf00      	nop

08019bac <std_srvs__srv__SetBool_Response__copy>:
 8019bac:	b130      	cbz	r0, 8019bbc <std_srvs__srv__SetBool_Response__copy+0x10>
 8019bae:	b129      	cbz	r1, 8019bbc <std_srvs__srv__SetBool_Response__copy+0x10>
 8019bb0:	f810 3b04 	ldrb.w	r3, [r0], #4
 8019bb4:	f801 3b04 	strb.w	r3, [r1], #4
 8019bb8:	f002 bc3c 	b.w	801c434 <rosidl_runtime_c__String__copy>
 8019bbc:	2000      	movs	r0, #0
 8019bbe:	4770      	bx	lr

08019bc0 <std_srvs__srv__SetBool_Response__Sequence__init>:
 8019bc0:	2800      	cmp	r0, #0
 8019bc2:	d03c      	beq.n	8019c3e <std_srvs__srv__SetBool_Response__Sequence__init+0x7e>
 8019bc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019bc8:	b087      	sub	sp, #28
 8019bca:	460d      	mov	r5, r1
 8019bcc:	4607      	mov	r7, r0
 8019bce:	a801      	add	r0, sp, #4
 8019bd0:	f7f3 fb18 	bl	800d204 <rcutils_get_default_allocator>
 8019bd4:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8019bd8:	b34d      	cbz	r5, 8019c2e <std_srvs__srv__SetBool_Response__Sequence__init+0x6e>
 8019bda:	9b04      	ldr	r3, [sp, #16]
 8019bdc:	464a      	mov	r2, r9
 8019bde:	2110      	movs	r1, #16
 8019be0:	4628      	mov	r0, r5
 8019be2:	4798      	blx	r3
 8019be4:	4680      	mov	r8, r0
 8019be6:	b300      	cbz	r0, 8019c2a <std_srvs__srv__SetBool_Response__Sequence__init+0x6a>
 8019be8:	1d06      	adds	r6, r0, #4
 8019bea:	2400      	movs	r4, #0
 8019bec:	e004      	b.n	8019bf8 <std_srvs__srv__SetBool_Response__Sequence__init+0x38>
 8019bee:	3401      	adds	r4, #1
 8019bf0:	42a5      	cmp	r5, r4
 8019bf2:	f106 0610 	add.w	r6, r6, #16
 8019bf6:	d01b      	beq.n	8019c30 <std_srvs__srv__SetBool_Response__Sequence__init+0x70>
 8019bf8:	4630      	mov	r0, r6
 8019bfa:	f002 fbb9 	bl	801c370 <rosidl_runtime_c__String__init>
 8019bfe:	2800      	cmp	r0, #0
 8019c00:	d1f5      	bne.n	8019bee <std_srvs__srv__SetBool_Response__Sequence__init+0x2e>
 8019c02:	4630      	mov	r0, r6
 8019c04:	f002 fbce 	bl	801c3a4 <rosidl_runtime_c__String__fini>
 8019c08:	42a5      	cmp	r5, r4
 8019c0a:	d911      	bls.n	8019c30 <std_srvs__srv__SetBool_Response__Sequence__init+0x70>
 8019c0c:	b14c      	cbz	r4, 8019c22 <std_srvs__srv__SetBool_Response__Sequence__init+0x62>
 8019c0e:	eb08 1504 	add.w	r5, r8, r4, lsl #4
 8019c12:	3d0c      	subs	r5, #12
 8019c14:	4628      	mov	r0, r5
 8019c16:	f002 fbc5 	bl	801c3a4 <rosidl_runtime_c__String__fini>
 8019c1a:	3c01      	subs	r4, #1
 8019c1c:	f1a5 0510 	sub.w	r5, r5, #16
 8019c20:	d1f8      	bne.n	8019c14 <std_srvs__srv__SetBool_Response__Sequence__init+0x54>
 8019c22:	9b02      	ldr	r3, [sp, #8]
 8019c24:	4649      	mov	r1, r9
 8019c26:	4640      	mov	r0, r8
 8019c28:	4798      	blx	r3
 8019c2a:	2000      	movs	r0, #0
 8019c2c:	e004      	b.n	8019c38 <std_srvs__srv__SetBool_Response__Sequence__init+0x78>
 8019c2e:	46a8      	mov	r8, r5
 8019c30:	e9c7 8500 	strd	r8, r5, [r7]
 8019c34:	60bd      	str	r5, [r7, #8]
 8019c36:	2001      	movs	r0, #1
 8019c38:	b007      	add	sp, #28
 8019c3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019c3e:	2000      	movs	r0, #0
 8019c40:	4770      	bx	lr
 8019c42:	bf00      	nop

08019c44 <std_srvs__srv__SetBool_Response__Sequence__fini>:
 8019c44:	b320      	cbz	r0, 8019c90 <std_srvs__srv__SetBool_Response__Sequence__fini+0x4c>
 8019c46:	b530      	push	{r4, r5, lr}
 8019c48:	4605      	mov	r5, r0
 8019c4a:	b087      	sub	sp, #28
 8019c4c:	a801      	add	r0, sp, #4
 8019c4e:	f7f3 fad9 	bl	800d204 <rcutils_get_default_allocator>
 8019c52:	682b      	ldr	r3, [r5, #0]
 8019c54:	b1b3      	cbz	r3, 8019c84 <std_srvs__srv__SetBool_Response__Sequence__fini+0x40>
 8019c56:	68aa      	ldr	r2, [r5, #8]
 8019c58:	b162      	cbz	r2, 8019c74 <std_srvs__srv__SetBool_Response__Sequence__fini+0x30>
 8019c5a:	2400      	movs	r4, #0
 8019c5c:	eb13 1004 	adds.w	r0, r3, r4, lsl #4
 8019c60:	f100 0004 	add.w	r0, r0, #4
 8019c64:	d010      	beq.n	8019c88 <std_srvs__srv__SetBool_Response__Sequence__fini+0x44>
 8019c66:	f002 fb9d 	bl	801c3a4 <rosidl_runtime_c__String__fini>
 8019c6a:	68aa      	ldr	r2, [r5, #8]
 8019c6c:	682b      	ldr	r3, [r5, #0]
 8019c6e:	3401      	adds	r4, #1
 8019c70:	4294      	cmp	r4, r2
 8019c72:	d3f3      	bcc.n	8019c5c <std_srvs__srv__SetBool_Response__Sequence__fini+0x18>
 8019c74:	4618      	mov	r0, r3
 8019c76:	9a02      	ldr	r2, [sp, #8]
 8019c78:	9905      	ldr	r1, [sp, #20]
 8019c7a:	4790      	blx	r2
 8019c7c:	2300      	movs	r3, #0
 8019c7e:	e9c5 3300 	strd	r3, r3, [r5]
 8019c82:	60ab      	str	r3, [r5, #8]
 8019c84:	b007      	add	sp, #28
 8019c86:	bd30      	pop	{r4, r5, pc}
 8019c88:	3401      	adds	r4, #1
 8019c8a:	4294      	cmp	r4, r2
 8019c8c:	d3e6      	bcc.n	8019c5c <std_srvs__srv__SetBool_Response__Sequence__fini+0x18>
 8019c8e:	e7f1      	b.n	8019c74 <std_srvs__srv__SetBool_Response__Sequence__fini+0x30>
 8019c90:	4770      	bx	lr
 8019c92:	bf00      	nop

08019c94 <std_srvs__srv__SetBool_Event__init>:
 8019c94:	b570      	push	{r4, r5, r6, lr}
 8019c96:	b086      	sub	sp, #24
 8019c98:	b1b8      	cbz	r0, 8019cca <std_srvs__srv__SetBool_Event__init+0x36>
 8019c9a:	4604      	mov	r4, r0
 8019c9c:	f7ff fcb6 	bl	801960c <service_msgs__msg__ServiceEventInfo__init>
 8019ca0:	4605      	mov	r5, r0
 8019ca2:	b178      	cbz	r0, 8019cc4 <std_srvs__srv__SetBool_Event__init+0x30>
 8019ca4:	2600      	movs	r6, #0
 8019ca6:	4668      	mov	r0, sp
 8019ca8:	f7f3 faac 	bl	800d204 <rcutils_get_default_allocator>
 8019cac:	4668      	mov	r0, sp
 8019cae:	e9c4 660a 	strd	r6, r6, [r4, #40]	@ 0x28
 8019cb2:	6326      	str	r6, [r4, #48]	@ 0x30
 8019cb4:	f7f3 faa6 	bl	800d204 <rcutils_get_default_allocator>
 8019cb8:	4628      	mov	r0, r5
 8019cba:	e9c4 660d 	strd	r6, r6, [r4, #52]	@ 0x34
 8019cbe:	63e6      	str	r6, [r4, #60]	@ 0x3c
 8019cc0:	b006      	add	sp, #24
 8019cc2:	bd70      	pop	{r4, r5, r6, pc}
 8019cc4:	4620      	mov	r0, r4
 8019cc6:	f7ff fee9 	bl	8019a9c <std_srvs__srv__SetBool_Event__fini.part.0>
 8019cca:	2500      	movs	r5, #0
 8019ccc:	4628      	mov	r0, r5
 8019cce:	b006      	add	sp, #24
 8019cd0:	bd70      	pop	{r4, r5, r6, pc}
 8019cd2:	bf00      	nop

08019cd4 <std_srvs__srv__SetBool_Event__fini>:
 8019cd4:	2800      	cmp	r0, #0
 8019cd6:	d032      	beq.n	8019d3e <std_srvs__srv__SetBool_Event__fini+0x6a>
 8019cd8:	b530      	push	{r4, r5, lr}
 8019cda:	4605      	mov	r5, r0
 8019cdc:	b087      	sub	sp, #28
 8019cde:	f7ff fca5 	bl	801962c <service_msgs__msg__ServiceEventInfo__fini>
 8019ce2:	a801      	add	r0, sp, #4
 8019ce4:	f7f3 fa8e 	bl	800d204 <rcutils_get_default_allocator>
 8019ce8:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8019cea:	b130      	cbz	r0, 8019cfa <std_srvs__srv__SetBool_Event__fini+0x26>
 8019cec:	9b02      	ldr	r3, [sp, #8]
 8019cee:	9905      	ldr	r1, [sp, #20]
 8019cf0:	4798      	blx	r3
 8019cf2:	2300      	movs	r3, #0
 8019cf4:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 8019cf8:	632b      	str	r3, [r5, #48]	@ 0x30
 8019cfa:	a801      	add	r0, sp, #4
 8019cfc:	f7f3 fa82 	bl	800d204 <rcutils_get_default_allocator>
 8019d00:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8019d02:	b1b3      	cbz	r3, 8019d32 <std_srvs__srv__SetBool_Event__fini+0x5e>
 8019d04:	6bea      	ldr	r2, [r5, #60]	@ 0x3c
 8019d06:	b162      	cbz	r2, 8019d22 <std_srvs__srv__SetBool_Event__fini+0x4e>
 8019d08:	2400      	movs	r4, #0
 8019d0a:	eb13 1004 	adds.w	r0, r3, r4, lsl #4
 8019d0e:	f100 0004 	add.w	r0, r0, #4
 8019d12:	d010      	beq.n	8019d36 <std_srvs__srv__SetBool_Event__fini+0x62>
 8019d14:	f002 fb46 	bl	801c3a4 <rosidl_runtime_c__String__fini>
 8019d18:	6bea      	ldr	r2, [r5, #60]	@ 0x3c
 8019d1a:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8019d1c:	3401      	adds	r4, #1
 8019d1e:	4294      	cmp	r4, r2
 8019d20:	d3f3      	bcc.n	8019d0a <std_srvs__srv__SetBool_Event__fini+0x36>
 8019d22:	4618      	mov	r0, r3
 8019d24:	9a02      	ldr	r2, [sp, #8]
 8019d26:	9905      	ldr	r1, [sp, #20]
 8019d28:	4790      	blx	r2
 8019d2a:	2300      	movs	r3, #0
 8019d2c:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 8019d30:	63eb      	str	r3, [r5, #60]	@ 0x3c
 8019d32:	b007      	add	sp, #28
 8019d34:	bd30      	pop	{r4, r5, pc}
 8019d36:	3401      	adds	r4, #1
 8019d38:	4294      	cmp	r4, r2
 8019d3a:	d3e6      	bcc.n	8019d0a <std_srvs__srv__SetBool_Event__fini+0x36>
 8019d3c:	e7f1      	b.n	8019d22 <std_srvs__srv__SetBool_Event__fini+0x4e>
 8019d3e:	4770      	bx	lr

08019d40 <rosidl_typesupport_c__create_service_event_message__std_srvs__srv__SetBool>:
 8019d40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019d44:	2900      	cmp	r1, #0
 8019d46:	d03e      	beq.n	8019dc6 <rosidl_typesupport_c__create_service_event_message__std_srvs__srv__SetBool+0x86>
 8019d48:	4605      	mov	r5, r0
 8019d4a:	2800      	cmp	r0, #0
 8019d4c:	d03b      	beq.n	8019dc6 <rosidl_typesupport_c__create_service_event_message__std_srvs__srv__SetBool+0x86>
 8019d4e:	4698      	mov	r8, r3
 8019d50:	460e      	mov	r6, r1
 8019d52:	680b      	ldr	r3, [r1, #0]
 8019d54:	6909      	ldr	r1, [r1, #16]
 8019d56:	2040      	movs	r0, #64	@ 0x40
 8019d58:	4617      	mov	r7, r2
 8019d5a:	4798      	blx	r3
 8019d5c:	4604      	mov	r4, r0
 8019d5e:	f7ff ff99 	bl	8019c94 <std_srvs__srv__SetBool_Event__init>
 8019d62:	b360      	cbz	r0, 8019dbe <rosidl_typesupport_c__create_service_event_message__std_srvs__srv__SetBool+0x7e>
 8019d64:	782b      	ldrb	r3, [r5, #0]
 8019d66:	7023      	strb	r3, [r4, #0]
 8019d68:	e9d5 2301 	ldrd	r2, r3, [r5, #4]
 8019d6c:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 8019d70:	e9c4 2301 	strd	r2, r3, [r4, #4]
 8019d74:	e9c4 0108 	strd	r0, r1, [r4, #32]
 8019d78:	68e9      	ldr	r1, [r5, #12]
 8019d7a:	692a      	ldr	r2, [r5, #16]
 8019d7c:	696b      	ldr	r3, [r5, #20]
 8019d7e:	69a8      	ldr	r0, [r5, #24]
 8019d80:	61a0      	str	r0, [r4, #24]
 8019d82:	60e1      	str	r1, [r4, #12]
 8019d84:	6122      	str	r2, [r4, #16]
 8019d86:	6163      	str	r3, [r4, #20]
 8019d88:	b14f      	cbz	r7, 8019d9e <rosidl_typesupport_c__create_service_event_message__std_srvs__srv__SetBool+0x5e>
 8019d8a:	2101      	movs	r1, #1
 8019d8c:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8019d90:	f7ff fec6 	bl	8019b20 <std_srvs__srv__SetBool_Request__Sequence__init>
 8019d94:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8019d96:	4638      	mov	r0, r7
 8019d98:	f7ff feba 	bl	8019b10 <std_srvs__srv__SetBool_Request__copy>
 8019d9c:	b178      	cbz	r0, 8019dbe <rosidl_typesupport_c__create_service_event_message__std_srvs__srv__SetBool+0x7e>
 8019d9e:	f1b8 0f00 	cmp.w	r8, #0
 8019da2:	d009      	beq.n	8019db8 <rosidl_typesupport_c__create_service_event_message__std_srvs__srv__SetBool+0x78>
 8019da4:	2101      	movs	r1, #1
 8019da6:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 8019daa:	f7ff ff09 	bl	8019bc0 <std_srvs__srv__SetBool_Response__Sequence__init>
 8019dae:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8019db0:	4640      	mov	r0, r8
 8019db2:	f7ff fefb 	bl	8019bac <std_srvs__srv__SetBool_Response__copy>
 8019db6:	b110      	cbz	r0, 8019dbe <rosidl_typesupport_c__create_service_event_message__std_srvs__srv__SetBool+0x7e>
 8019db8:	4620      	mov	r0, r4
 8019dba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019dbe:	6873      	ldr	r3, [r6, #4]
 8019dc0:	6931      	ldr	r1, [r6, #16]
 8019dc2:	4620      	mov	r0, r4
 8019dc4:	4798      	blx	r3
 8019dc6:	2400      	movs	r4, #0
 8019dc8:	4620      	mov	r0, r4
 8019dca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019dce:	bf00      	nop

08019dd0 <rosidl_typesupport_c__destroy_service_event_message__std_srvs__srv__SetBool>:
 8019dd0:	b538      	push	{r3, r4, r5, lr}
 8019dd2:	460d      	mov	r5, r1
 8019dd4:	b199      	cbz	r1, 8019dfe <rosidl_typesupport_c__destroy_service_event_message__std_srvs__srv__SetBool+0x2e>
 8019dd6:	4604      	mov	r4, r0
 8019dd8:	b180      	cbz	r0, 8019dfc <rosidl_typesupport_c__destroy_service_event_message__std_srvs__srv__SetBool+0x2c>
 8019dda:	f7ff ff7b 	bl	8019cd4 <std_srvs__srv__SetBool_Event__fini>
 8019dde:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8019de0:	b110      	cbz	r0, 8019de8 <rosidl_typesupport_c__destroy_service_event_message__std_srvs__srv__SetBool+0x18>
 8019de2:	686b      	ldr	r3, [r5, #4]
 8019de4:	6929      	ldr	r1, [r5, #16]
 8019de6:	4798      	blx	r3
 8019de8:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8019dea:	b110      	cbz	r0, 8019df2 <rosidl_typesupport_c__destroy_service_event_message__std_srvs__srv__SetBool+0x22>
 8019dec:	686b      	ldr	r3, [r5, #4]
 8019dee:	6929      	ldr	r1, [r5, #16]
 8019df0:	4798      	blx	r3
 8019df2:	4620      	mov	r0, r4
 8019df4:	686b      	ldr	r3, [r5, #4]
 8019df6:	6929      	ldr	r1, [r5, #16]
 8019df8:	4798      	blx	r3
 8019dfa:	2001      	movs	r0, #1
 8019dfc:	bd38      	pop	{r3, r4, r5, pc}
 8019dfe:	4608      	mov	r0, r1
 8019e00:	bd38      	pop	{r3, r4, r5, pc}
 8019e02:	bf00      	nop

08019e04 <builtin_interfaces__msg__Time__get_type_hash>:
 8019e04:	4800      	ldr	r0, [pc, #0]	@ (8019e08 <builtin_interfaces__msg__Time__get_type_hash+0x4>)
 8019e06:	4770      	bx	lr
 8019e08:	20002c70 	.word	0x20002c70

08019e0c <builtin_interfaces__msg__Time__get_type_description>:
 8019e0c:	4b03      	ldr	r3, [pc, #12]	@ (8019e1c <builtin_interfaces__msg__Time__get_type_description+0x10>)
 8019e0e:	781a      	ldrb	r2, [r3, #0]
 8019e10:	b90a      	cbnz	r2, 8019e16 <builtin_interfaces__msg__Time__get_type_description+0xa>
 8019e12:	2201      	movs	r2, #1
 8019e14:	701a      	strb	r2, [r3, #0]
 8019e16:	4802      	ldr	r0, [pc, #8]	@ (8019e20 <builtin_interfaces__msg__Time__get_type_description+0x14>)
 8019e18:	4770      	bx	lr
 8019e1a:	bf00      	nop
 8019e1c:	20019bbd 	.word	0x20019bbd
 8019e20:	080205b0 	.word	0x080205b0

08019e24 <builtin_interfaces__msg__Time__get_individual_type_description_source>:
 8019e24:	4800      	ldr	r0, [pc, #0]	@ (8019e28 <builtin_interfaces__msg__Time__get_individual_type_description_source+0x4>)
 8019e26:	4770      	bx	lr
 8019e28:	0802058c 	.word	0x0802058c

08019e2c <builtin_interfaces__msg__Time__get_type_description_sources>:
 8019e2c:	4b09      	ldr	r3, [pc, #36]	@ (8019e54 <builtin_interfaces__msg__Time__get_type_description_sources+0x28>)
 8019e2e:	781a      	ldrb	r2, [r3, #0]
 8019e30:	b96a      	cbnz	r2, 8019e4e <builtin_interfaces__msg__Time__get_type_description_sources+0x22>
 8019e32:	b430      	push	{r4, r5}
 8019e34:	4d08      	ldr	r5, [pc, #32]	@ (8019e58 <builtin_interfaces__msg__Time__get_type_description_sources+0x2c>)
 8019e36:	4c09      	ldr	r4, [pc, #36]	@ (8019e5c <builtin_interfaces__msg__Time__get_type_description_sources+0x30>)
 8019e38:	2201      	movs	r2, #1
 8019e3a:	701a      	strb	r2, [r3, #0]
 8019e3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019e3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019e40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019e42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019e44:	682b      	ldr	r3, [r5, #0]
 8019e46:	4806      	ldr	r0, [pc, #24]	@ (8019e60 <builtin_interfaces__msg__Time__get_type_description_sources+0x34>)
 8019e48:	6023      	str	r3, [r4, #0]
 8019e4a:	bc30      	pop	{r4, r5}
 8019e4c:	4770      	bx	lr
 8019e4e:	4804      	ldr	r0, [pc, #16]	@ (8019e60 <builtin_interfaces__msg__Time__get_type_description_sources+0x34>)
 8019e50:	4770      	bx	lr
 8019e52:	bf00      	nop
 8019e54:	20019bbc 	.word	0x20019bbc
 8019e58:	0802058c 	.word	0x0802058c
 8019e5c:	20019b98 	.word	0x20019b98
 8019e60:	08020580 	.word	0x08020580

08019e64 <builtin_interfaces__msg__Time__init>:
 8019e64:	3800      	subs	r0, #0
 8019e66:	bf18      	it	ne
 8019e68:	2001      	movne	r0, #1
 8019e6a:	4770      	bx	lr

08019e6c <builtin_interfaces__msg__Time__fini>:
 8019e6c:	4770      	bx	lr
 8019e6e:	bf00      	nop

08019e70 <geometry_msgs__msg__Quaternion__get_type_hash>:
 8019e70:	4800      	ldr	r0, [pc, #0]	@ (8019e74 <geometry_msgs__msg__Quaternion__get_type_hash+0x4>)
 8019e72:	4770      	bx	lr
 8019e74:	20002ef8 	.word	0x20002ef8

08019e78 <geometry_msgs__msg__Quaternion__get_type_description>:
 8019e78:	4b03      	ldr	r3, [pc, #12]	@ (8019e88 <geometry_msgs__msg__Quaternion__get_type_description+0x10>)
 8019e7a:	781a      	ldrb	r2, [r3, #0]
 8019e7c:	b90a      	cbnz	r2, 8019e82 <geometry_msgs__msg__Quaternion__get_type_description+0xa>
 8019e7e:	2201      	movs	r2, #1
 8019e80:	701a      	strb	r2, [r3, #0]
 8019e82:	4802      	ldr	r0, [pc, #8]	@ (8019e8c <geometry_msgs__msg__Quaternion__get_type_description+0x14>)
 8019e84:	4770      	bx	lr
 8019e86:	bf00      	nop
 8019e88:	20019be5 	.word	0x20019be5
 8019e8c:	08020604 	.word	0x08020604

08019e90 <geometry_msgs__msg__Quaternion__get_individual_type_description_source>:
 8019e90:	4800      	ldr	r0, [pc, #0]	@ (8019e94 <geometry_msgs__msg__Quaternion__get_individual_type_description_source+0x4>)
 8019e92:	4770      	bx	lr
 8019e94:	080205e0 	.word	0x080205e0

08019e98 <geometry_msgs__msg__Quaternion__get_type_description_sources>:
 8019e98:	4b09      	ldr	r3, [pc, #36]	@ (8019ec0 <geometry_msgs__msg__Quaternion__get_type_description_sources+0x28>)
 8019e9a:	781a      	ldrb	r2, [r3, #0]
 8019e9c:	b96a      	cbnz	r2, 8019eba <geometry_msgs__msg__Quaternion__get_type_description_sources+0x22>
 8019e9e:	b430      	push	{r4, r5}
 8019ea0:	4d08      	ldr	r5, [pc, #32]	@ (8019ec4 <geometry_msgs__msg__Quaternion__get_type_description_sources+0x2c>)
 8019ea2:	4c09      	ldr	r4, [pc, #36]	@ (8019ec8 <geometry_msgs__msg__Quaternion__get_type_description_sources+0x30>)
 8019ea4:	2201      	movs	r2, #1
 8019ea6:	701a      	strb	r2, [r3, #0]
 8019ea8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019eaa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019eac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019eae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019eb0:	682b      	ldr	r3, [r5, #0]
 8019eb2:	4806      	ldr	r0, [pc, #24]	@ (8019ecc <geometry_msgs__msg__Quaternion__get_type_description_sources+0x34>)
 8019eb4:	6023      	str	r3, [r4, #0]
 8019eb6:	bc30      	pop	{r4, r5}
 8019eb8:	4770      	bx	lr
 8019eba:	4804      	ldr	r0, [pc, #16]	@ (8019ecc <geometry_msgs__msg__Quaternion__get_type_description_sources+0x34>)
 8019ebc:	4770      	bx	lr
 8019ebe:	bf00      	nop
 8019ec0:	20019be4 	.word	0x20019be4
 8019ec4:	080205e0 	.word	0x080205e0
 8019ec8:	20019bc0 	.word	0x20019bc0
 8019ecc:	080205d4 	.word	0x080205d4

08019ed0 <geometry_msgs__msg__Quaternion__init>:
 8019ed0:	b160      	cbz	r0, 8019eec <geometry_msgs__msg__Quaternion__init+0x1c>
 8019ed2:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 8019ef0 <geometry_msgs__msg__Quaternion__init+0x20>
 8019ed6:	2200      	movs	r2, #0
 8019ed8:	2300      	movs	r3, #0
 8019eda:	e9c0 2300 	strd	r2, r3, [r0]
 8019ede:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8019ee2:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8019ee6:	ed80 7b06 	vstr	d7, [r0, #24]
 8019eea:	2001      	movs	r0, #1
 8019eec:	4770      	bx	lr
 8019eee:	bf00      	nop
 8019ef0:	00000000 	.word	0x00000000
 8019ef4:	3ff00000 	.word	0x3ff00000

08019ef8 <geometry_msgs__msg__Quaternion__fini>:
 8019ef8:	4770      	bx	lr
 8019efa:	bf00      	nop

08019efc <geometry_msgs__msg__Vector3__get_type_hash>:
 8019efc:	4800      	ldr	r0, [pc, #0]	@ (8019f00 <geometry_msgs__msg__Vector3__get_type_hash+0x4>)
 8019efe:	4770      	bx	lr
 8019f00:	200030f8 	.word	0x200030f8

08019f04 <geometry_msgs__msg__Vector3__get_type_description>:
 8019f04:	4b03      	ldr	r3, [pc, #12]	@ (8019f14 <geometry_msgs__msg__Vector3__get_type_description+0x10>)
 8019f06:	781a      	ldrb	r2, [r3, #0]
 8019f08:	b90a      	cbnz	r2, 8019f0e <geometry_msgs__msg__Vector3__get_type_description+0xa>
 8019f0a:	2201      	movs	r2, #1
 8019f0c:	701a      	strb	r2, [r3, #0]
 8019f0e:	4802      	ldr	r0, [pc, #8]	@ (8019f18 <geometry_msgs__msg__Vector3__get_type_description+0x14>)
 8019f10:	4770      	bx	lr
 8019f12:	bf00      	nop
 8019f14:	20019c0d 	.word	0x20019c0d
 8019f18:	08020658 	.word	0x08020658

08019f1c <geometry_msgs__msg__Vector3__get_individual_type_description_source>:
 8019f1c:	4800      	ldr	r0, [pc, #0]	@ (8019f20 <geometry_msgs__msg__Vector3__get_individual_type_description_source+0x4>)
 8019f1e:	4770      	bx	lr
 8019f20:	08020634 	.word	0x08020634

08019f24 <geometry_msgs__msg__Vector3__get_type_description_sources>:
 8019f24:	4b09      	ldr	r3, [pc, #36]	@ (8019f4c <geometry_msgs__msg__Vector3__get_type_description_sources+0x28>)
 8019f26:	781a      	ldrb	r2, [r3, #0]
 8019f28:	b96a      	cbnz	r2, 8019f46 <geometry_msgs__msg__Vector3__get_type_description_sources+0x22>
 8019f2a:	b430      	push	{r4, r5}
 8019f2c:	4d08      	ldr	r5, [pc, #32]	@ (8019f50 <geometry_msgs__msg__Vector3__get_type_description_sources+0x2c>)
 8019f2e:	4c09      	ldr	r4, [pc, #36]	@ (8019f54 <geometry_msgs__msg__Vector3__get_type_description_sources+0x30>)
 8019f30:	2201      	movs	r2, #1
 8019f32:	701a      	strb	r2, [r3, #0]
 8019f34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019f36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019f38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019f3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019f3c:	682b      	ldr	r3, [r5, #0]
 8019f3e:	4806      	ldr	r0, [pc, #24]	@ (8019f58 <geometry_msgs__msg__Vector3__get_type_description_sources+0x34>)
 8019f40:	6023      	str	r3, [r4, #0]
 8019f42:	bc30      	pop	{r4, r5}
 8019f44:	4770      	bx	lr
 8019f46:	4804      	ldr	r0, [pc, #16]	@ (8019f58 <geometry_msgs__msg__Vector3__get_type_description_sources+0x34>)
 8019f48:	4770      	bx	lr
 8019f4a:	bf00      	nop
 8019f4c:	20019c0c 	.word	0x20019c0c
 8019f50:	08020634 	.word	0x08020634
 8019f54:	20019be8 	.word	0x20019be8
 8019f58:	08020628 	.word	0x08020628

08019f5c <geometry_msgs__msg__Vector3__init>:
 8019f5c:	3800      	subs	r0, #0
 8019f5e:	bf18      	it	ne
 8019f60:	2001      	movne	r0, #1
 8019f62:	4770      	bx	lr

08019f64 <geometry_msgs__msg__Vector3__fini>:
 8019f64:	4770      	bx	lr
 8019f66:	bf00      	nop

08019f68 <ucdr_serialize_string>:
 8019f68:	b538      	push	{r3, r4, r5, lr}
 8019f6a:	4605      	mov	r5, r0
 8019f6c:	4608      	mov	r0, r1
 8019f6e:	460c      	mov	r4, r1
 8019f70:	f7e6 f9a6 	bl	80002c0 <strlen>
 8019f74:	4621      	mov	r1, r4
 8019f76:	1c42      	adds	r2, r0, #1
 8019f78:	4628      	mov	r0, r5
 8019f7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019f7e:	f7f7 b99b 	b.w	80112b8 <ucdr_serialize_sequence_char>
 8019f82:	bf00      	nop

08019f84 <ucdr_deserialize_string>:
 8019f84:	b500      	push	{lr}
 8019f86:	b083      	sub	sp, #12
 8019f88:	ab01      	add	r3, sp, #4
 8019f8a:	f7f7 f9a7 	bl	80112dc <ucdr_deserialize_sequence_char>
 8019f8e:	b003      	add	sp, #12
 8019f90:	f85d fb04 	ldr.w	pc, [sp], #4

08019f94 <get_custom_error>:
 8019f94:	4b01      	ldr	r3, [pc, #4]	@ (8019f9c <get_custom_error+0x8>)
 8019f96:	7818      	ldrb	r0, [r3, #0]
 8019f98:	4770      	bx	lr
 8019f9a:	bf00      	nop
 8019f9c:	20019c0e 	.word	0x20019c0e

08019fa0 <recv_custom_msg>:
 8019fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019fa4:	b089      	sub	sp, #36	@ 0x24
 8019fa6:	4693      	mov	fp, r2
 8019fa8:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 8019fac:	9104      	str	r1, [sp, #16]
 8019fae:	2100      	movs	r1, #0
 8019fb0:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 8019fb4:	9305      	str	r3, [sp, #20]
 8019fb6:	4604      	mov	r4, r0
 8019fb8:	f88d 101e 	strb.w	r1, [sp, #30]
 8019fbc:	b332      	cbz	r2, 801a00c <recv_custom_msg+0x6c>
 8019fbe:	f200 2a02 	addw	sl, r0, #514	@ 0x202
 8019fc2:	f10d 091f 	add.w	r9, sp, #31
 8019fc6:	f10d 0814 	add.w	r8, sp, #20
 8019fca:	f10d 071e 	add.w	r7, sp, #30
 8019fce:	f44f 7600 	mov.w	r6, #512	@ 0x200
 8019fd2:	e004      	b.n	8019fde <recv_custom_msg+0x3e>
 8019fd4:	9b05      	ldr	r3, [sp, #20]
 8019fd6:	2b00      	cmp	r3, #0
 8019fd8:	dd10      	ble.n	8019ffc <recv_custom_msg+0x5c>
 8019fda:	f8d4 5274 	ldr.w	r5, [r4, #628]	@ 0x274
 8019fde:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8019fe2:	e9cd 6700 	strd	r6, r7, [sp]
 8019fe6:	4623      	mov	r3, r4
 8019fe8:	4622      	mov	r2, r4
 8019fea:	4629      	mov	r1, r5
 8019fec:	4650      	mov	r0, sl
 8019fee:	f001 f8f9 	bl	801b1e4 <uxr_read_framed_msg>
 8019ff2:	2800      	cmp	r0, #0
 8019ff4:	d0ee      	beq.n	8019fd4 <recv_custom_msg+0x34>
 8019ff6:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8019ffa:	b1a3      	cbz	r3, 801a026 <recv_custom_msg+0x86>
 8019ffc:	4b0e      	ldr	r3, [pc, #56]	@ (801a038 <recv_custom_msg+0x98>)
 8019ffe:	f89d 201f 	ldrb.w	r2, [sp, #31]
 801a002:	701a      	strb	r2, [r3, #0]
 801a004:	2000      	movs	r0, #0
 801a006:	b009      	add	sp, #36	@ 0x24
 801a008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a00c:	f10d 021f 	add.w	r2, sp, #31
 801a010:	9200      	str	r2, [sp, #0]
 801a012:	4601      	mov	r1, r0
 801a014:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801a018:	47a8      	blx	r5
 801a01a:	2800      	cmp	r0, #0
 801a01c:	d0ee      	beq.n	8019ffc <recv_custom_msg+0x5c>
 801a01e:	f89d 301e 	ldrb.w	r3, [sp, #30]
 801a022:	2b00      	cmp	r3, #0
 801a024:	d1ea      	bne.n	8019ffc <recv_custom_msg+0x5c>
 801a026:	9b04      	ldr	r3, [sp, #16]
 801a028:	f8cb 0000 	str.w	r0, [fp]
 801a02c:	2001      	movs	r0, #1
 801a02e:	601c      	str	r4, [r3, #0]
 801a030:	b009      	add	sp, #36	@ 0x24
 801a032:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a036:	bf00      	nop
 801a038:	20019c0e 	.word	0x20019c0e

0801a03c <send_custom_msg>:
 801a03c:	b570      	push	{r4, r5, r6, lr}
 801a03e:	f890 5200 	ldrb.w	r5, [r0, #512]	@ 0x200
 801a042:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 801a046:	b086      	sub	sp, #24
 801a048:	4616      	mov	r6, r2
 801a04a:	b965      	cbnz	r5, 801a066 <send_custom_msg+0x2a>
 801a04c:	f10d 0317 	add.w	r3, sp, #23
 801a050:	47a0      	blx	r4
 801a052:	b108      	cbz	r0, 801a058 <send_custom_msg+0x1c>
 801a054:	42b0      	cmp	r0, r6
 801a056:	d014      	beq.n	801a082 <send_custom_msg+0x46>
 801a058:	4b0b      	ldr	r3, [pc, #44]	@ (801a088 <send_custom_msg+0x4c>)
 801a05a:	f89d 2017 	ldrb.w	r2, [sp, #23]
 801a05e:	701a      	strb	r2, [r3, #0]
 801a060:	2000      	movs	r0, #0
 801a062:	b006      	add	sp, #24
 801a064:	bd70      	pop	{r4, r5, r6, pc}
 801a066:	f10d 0217 	add.w	r2, sp, #23
 801a06a:	9202      	str	r2, [sp, #8]
 801a06c:	2200      	movs	r2, #0
 801a06e:	e9cd 6200 	strd	r6, r2, [sp]
 801a072:	460b      	mov	r3, r1
 801a074:	4602      	mov	r2, r0
 801a076:	4621      	mov	r1, r4
 801a078:	f200 2002 	addw	r0, r0, #514	@ 0x202
 801a07c:	f000 fed4 	bl	801ae28 <uxr_write_framed_msg>
 801a080:	e7e7      	b.n	801a052 <send_custom_msg+0x16>
 801a082:	2001      	movs	r0, #1
 801a084:	b006      	add	sp, #24
 801a086:	bd70      	pop	{r4, r5, r6, pc}
 801a088:	20019c0e 	.word	0x20019c0e

0801a08c <uxr_set_custom_transport_callbacks>:
 801a08c:	b410      	push	{r4}
 801a08e:	9c01      	ldr	r4, [sp, #4]
 801a090:	f8c0 4270 	str.w	r4, [r0, #624]	@ 0x270
 801a094:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 801a098:	9b02      	ldr	r3, [sp, #8]
 801a09a:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 801a09e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a0a2:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
 801a0a6:	4770      	bx	lr

0801a0a8 <uxr_init_custom_transport>:
 801a0a8:	b538      	push	{r3, r4, r5, lr}
 801a0aa:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 801a0ae:	b303      	cbz	r3, 801a0f2 <uxr_init_custom_transport+0x4a>
 801a0b0:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 801a0b4:	4604      	mov	r4, r0
 801a0b6:	b1e2      	cbz	r2, 801a0f2 <uxr_init_custom_transport+0x4a>
 801a0b8:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 801a0bc:	b1ca      	cbz	r2, 801a0f2 <uxr_init_custom_transport+0x4a>
 801a0be:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 801a0c2:	b1b2      	cbz	r2, 801a0f2 <uxr_init_custom_transport+0x4a>
 801a0c4:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 801a0c8:	4798      	blx	r3
 801a0ca:	4605      	mov	r5, r0
 801a0cc:	b188      	cbz	r0, 801a0f2 <uxr_init_custom_transport+0x4a>
 801a0ce:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 801a0d2:	b98b      	cbnz	r3, 801a0f8 <uxr_init_custom_transport+0x50>
 801a0d4:	490b      	ldr	r1, [pc, #44]	@ (801a104 <uxr_init_custom_transport+0x5c>)
 801a0d6:	4b0c      	ldr	r3, [pc, #48]	@ (801a108 <uxr_init_custom_transport+0x60>)
 801a0d8:	4a0c      	ldr	r2, [pc, #48]	@ (801a10c <uxr_init_custom_transport+0x64>)
 801a0da:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 801a0de:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801a0e2:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 801a0e6:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 801a0ea:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 801a0ee:	4628      	mov	r0, r5
 801a0f0:	bd38      	pop	{r3, r4, r5, pc}
 801a0f2:	2500      	movs	r5, #0
 801a0f4:	4628      	mov	r0, r5
 801a0f6:	bd38      	pop	{r3, r4, r5, pc}
 801a0f8:	2100      	movs	r1, #0
 801a0fa:	f204 2002 	addw	r0, r4, #514	@ 0x202
 801a0fe:	f000 fe8d 	bl	801ae1c <uxr_init_framing_io>
 801a102:	e7e7      	b.n	801a0d4 <uxr_init_custom_transport+0x2c>
 801a104:	0801a03d 	.word	0x0801a03d
 801a108:	08019fa1 	.word	0x08019fa1
 801a10c:	08019f95 	.word	0x08019f95

0801a110 <uxr_close_custom_transport>:
 801a110:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 801a114:	4718      	bx	r3
 801a116:	bf00      	nop

0801a118 <uxr_init_input_best_effort_stream>:
 801a118:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801a11c:	8003      	strh	r3, [r0, #0]
 801a11e:	4770      	bx	lr

0801a120 <uxr_reset_input_best_effort_stream>:
 801a120:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801a124:	8003      	strh	r3, [r0, #0]
 801a126:	4770      	bx	lr

0801a128 <uxr_receive_best_effort_message>:
 801a128:	b538      	push	{r3, r4, r5, lr}
 801a12a:	4604      	mov	r4, r0
 801a12c:	8800      	ldrh	r0, [r0, #0]
 801a12e:	460d      	mov	r5, r1
 801a130:	f000 fe5e 	bl	801adf0 <uxr_seq_num_cmp>
 801a134:	4603      	mov	r3, r0
 801a136:	2b00      	cmp	r3, #0
 801a138:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 801a13c:	bfb8      	it	lt
 801a13e:	8025      	strhlt	r5, [r4, #0]
 801a140:	bd38      	pop	{r3, r4, r5, pc}
 801a142:	bf00      	nop

0801a144 <on_full_input_buffer>:
 801a144:	b570      	push	{r4, r5, r6, lr}
 801a146:	4605      	mov	r5, r0
 801a148:	460c      	mov	r4, r1
 801a14a:	682b      	ldr	r3, [r5, #0]
 801a14c:	6809      	ldr	r1, [r1, #0]
 801a14e:	8920      	ldrh	r0, [r4, #8]
 801a150:	6862      	ldr	r2, [r4, #4]
 801a152:	fbb2 f2f0 	udiv	r2, r2, r0
 801a156:	1a5b      	subs	r3, r3, r1
 801a158:	fbb3 f3f2 	udiv	r3, r3, r2
 801a15c:	3301      	adds	r3, #1
 801a15e:	b29b      	uxth	r3, r3
 801a160:	fbb3 f6f0 	udiv	r6, r3, r0
 801a164:	fb00 3316 	mls	r3, r0, r6, r3
 801a168:	b29b      	uxth	r3, r3
 801a16a:	fb02 f303 	mul.w	r3, r2, r3
 801a16e:	1d18      	adds	r0, r3, #4
 801a170:	4408      	add	r0, r1
 801a172:	7d26      	ldrb	r6, [r4, #20]
 801a174:	f850 2c04 	ldr.w	r2, [r0, #-4]
 801a178:	b116      	cbz	r6, 801a180 <on_full_input_buffer+0x3c>
 801a17a:	2600      	movs	r6, #0
 801a17c:	f840 6c04 	str.w	r6, [r0, #-4]
 801a180:	2a03      	cmp	r2, #3
 801a182:	d801      	bhi.n	801a188 <on_full_input_buffer+0x44>
 801a184:	2001      	movs	r0, #1
 801a186:	bd70      	pop	{r4, r5, r6, pc}
 801a188:	3308      	adds	r3, #8
 801a18a:	4419      	add	r1, r3
 801a18c:	4628      	mov	r0, r5
 801a18e:	692b      	ldr	r3, [r5, #16]
 801a190:	3a04      	subs	r2, #4
 801a192:	f7f7 f819 	bl	80111c8 <ucdr_init_buffer_origin>
 801a196:	4628      	mov	r0, r5
 801a198:	4902      	ldr	r1, [pc, #8]	@ (801a1a4 <on_full_input_buffer+0x60>)
 801a19a:	4622      	mov	r2, r4
 801a19c:	f7f6 fff0 	bl	8011180 <ucdr_set_on_full_buffer_callback>
 801a1a0:	2000      	movs	r0, #0
 801a1a2:	bd70      	pop	{r4, r5, r6, pc}
 801a1a4:	0801a145 	.word	0x0801a145

0801a1a8 <uxr_init_input_reliable_stream>:
 801a1a8:	b500      	push	{lr}
 801a1aa:	e9c0 1200 	strd	r1, r2, [r0]
 801a1ae:	f04f 0e00 	mov.w	lr, #0
 801a1b2:	9a01      	ldr	r2, [sp, #4]
 801a1b4:	8103      	strh	r3, [r0, #8]
 801a1b6:	6102      	str	r2, [r0, #16]
 801a1b8:	f880 e014 	strb.w	lr, [r0, #20]
 801a1bc:	b1d3      	cbz	r3, 801a1f4 <uxr_init_input_reliable_stream+0x4c>
 801a1be:	f8c1 e000 	str.w	lr, [r1]
 801a1c2:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801a1c6:	f1bc 0f01 	cmp.w	ip, #1
 801a1ca:	d913      	bls.n	801a1f4 <uxr_init_input_reliable_stream+0x4c>
 801a1cc:	2301      	movs	r3, #1
 801a1ce:	fbb3 f1fc 	udiv	r1, r3, ip
 801a1d2:	fb0c 3111 	mls	r1, ip, r1, r3
 801a1d6:	b289      	uxth	r1, r1
 801a1d8:	6842      	ldr	r2, [r0, #4]
 801a1da:	fbb2 f2fc 	udiv	r2, r2, ip
 801a1de:	fb01 f202 	mul.w	r2, r1, r2
 801a1e2:	6801      	ldr	r1, [r0, #0]
 801a1e4:	f841 e002 	str.w	lr, [r1, r2]
 801a1e8:	3301      	adds	r3, #1
 801a1ea:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801a1ee:	b29b      	uxth	r3, r3
 801a1f0:	459c      	cmp	ip, r3
 801a1f2:	d8ec      	bhi.n	801a1ce <uxr_init_input_reliable_stream+0x26>
 801a1f4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801a1f8:	60c3      	str	r3, [r0, #12]
 801a1fa:	f85d fb04 	ldr.w	pc, [sp], #4
 801a1fe:	bf00      	nop

0801a200 <uxr_reset_input_reliable_stream>:
 801a200:	8901      	ldrh	r1, [r0, #8]
 801a202:	b1e9      	cbz	r1, 801a240 <uxr_reset_input_reliable_stream+0x40>
 801a204:	f04f 0c00 	mov.w	ip, #0
 801a208:	b500      	push	{lr}
 801a20a:	4663      	mov	r3, ip
 801a20c:	46e6      	mov	lr, ip
 801a20e:	fbb3 f2f1 	udiv	r2, r3, r1
 801a212:	fb01 3312 	mls	r3, r1, r2, r3
 801a216:	b29b      	uxth	r3, r3
 801a218:	6842      	ldr	r2, [r0, #4]
 801a21a:	fbb2 f2f1 	udiv	r2, r2, r1
 801a21e:	fb03 f202 	mul.w	r2, r3, r2
 801a222:	6803      	ldr	r3, [r0, #0]
 801a224:	f843 e002 	str.w	lr, [r3, r2]
 801a228:	f10c 0c01 	add.w	ip, ip, #1
 801a22c:	8901      	ldrh	r1, [r0, #8]
 801a22e:	fa1f f38c 	uxth.w	r3, ip
 801a232:	4299      	cmp	r1, r3
 801a234:	d8eb      	bhi.n	801a20e <uxr_reset_input_reliable_stream+0xe>
 801a236:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801a23a:	60c3      	str	r3, [r0, #12]
 801a23c:	f85d fb04 	ldr.w	pc, [sp], #4
 801a240:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801a244:	60c3      	str	r3, [r0, #12]
 801a246:	4770      	bx	lr

0801a248 <uxr_receive_reliable_message>:
 801a248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a24c:	4604      	mov	r4, r0
 801a24e:	460d      	mov	r5, r1
 801a250:	8901      	ldrh	r1, [r0, #8]
 801a252:	8980      	ldrh	r0, [r0, #12]
 801a254:	4690      	mov	r8, r2
 801a256:	461f      	mov	r7, r3
 801a258:	f000 fdc2 	bl	801ade0 <uxr_seq_num_add>
 801a25c:	4629      	mov	r1, r5
 801a25e:	4606      	mov	r6, r0
 801a260:	89a0      	ldrh	r0, [r4, #12]
 801a262:	f000 fdc5 	bl	801adf0 <uxr_seq_num_cmp>
 801a266:	2800      	cmp	r0, #0
 801a268:	db0a      	blt.n	801a280 <uxr_receive_reliable_message+0x38>
 801a26a:	2600      	movs	r6, #0
 801a26c:	89e0      	ldrh	r0, [r4, #14]
 801a26e:	4629      	mov	r1, r5
 801a270:	f000 fdbe 	bl	801adf0 <uxr_seq_num_cmp>
 801a274:	2800      	cmp	r0, #0
 801a276:	bfb8      	it	lt
 801a278:	81e5      	strhlt	r5, [r4, #14]
 801a27a:	4630      	mov	r0, r6
 801a27c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a280:	4630      	mov	r0, r6
 801a282:	4629      	mov	r1, r5
 801a284:	f000 fdb4 	bl	801adf0 <uxr_seq_num_cmp>
 801a288:	2800      	cmp	r0, #0
 801a28a:	dbee      	blt.n	801a26a <uxr_receive_reliable_message+0x22>
 801a28c:	6923      	ldr	r3, [r4, #16]
 801a28e:	4640      	mov	r0, r8
 801a290:	4798      	blx	r3
 801a292:	2101      	movs	r1, #1
 801a294:	4606      	mov	r6, r0
 801a296:	89a0      	ldrh	r0, [r4, #12]
 801a298:	f000 fda2 	bl	801ade0 <uxr_seq_num_add>
 801a29c:	b90e      	cbnz	r6, 801a2a2 <uxr_receive_reliable_message+0x5a>
 801a29e:	4285      	cmp	r5, r0
 801a2a0:	d046      	beq.n	801a330 <uxr_receive_reliable_message+0xe8>
 801a2a2:	8921      	ldrh	r1, [r4, #8]
 801a2a4:	fbb5 f2f1 	udiv	r2, r5, r1
 801a2a8:	fb01 5212 	mls	r2, r1, r2, r5
 801a2ac:	b292      	uxth	r2, r2
 801a2ae:	6863      	ldr	r3, [r4, #4]
 801a2b0:	6820      	ldr	r0, [r4, #0]
 801a2b2:	fbb3 f3f1 	udiv	r3, r3, r1
 801a2b6:	fb02 f303 	mul.w	r3, r2, r3
 801a2ba:	3304      	adds	r3, #4
 801a2bc:	4418      	add	r0, r3
 801a2be:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801a2c2:	2b00      	cmp	r3, #0
 801a2c4:	d1d1      	bne.n	801a26a <uxr_receive_reliable_message+0x22>
 801a2c6:	4641      	mov	r1, r8
 801a2c8:	463a      	mov	r2, r7
 801a2ca:	f003 f976 	bl	801d5ba <memcpy>
 801a2ce:	8921      	ldrh	r1, [r4, #8]
 801a2d0:	fbb5 f2f1 	udiv	r2, r5, r1
 801a2d4:	fb01 5212 	mls	r2, r1, r2, r5
 801a2d8:	b292      	uxth	r2, r2
 801a2da:	6863      	ldr	r3, [r4, #4]
 801a2dc:	fbb3 f3f1 	udiv	r3, r3, r1
 801a2e0:	fb02 f303 	mul.w	r3, r2, r3
 801a2e4:	6822      	ldr	r2, [r4, #0]
 801a2e6:	50d7      	str	r7, [r2, r3]
 801a2e8:	9a06      	ldr	r2, [sp, #24]
 801a2ea:	2301      	movs	r3, #1
 801a2ec:	7013      	strb	r3, [r2, #0]
 801a2ee:	2e00      	cmp	r6, #0
 801a2f0:	d0bb      	beq.n	801a26a <uxr_receive_reliable_message+0x22>
 801a2f2:	89a6      	ldrh	r6, [r4, #12]
 801a2f4:	2101      	movs	r1, #1
 801a2f6:	4630      	mov	r0, r6
 801a2f8:	f000 fd72 	bl	801ade0 <uxr_seq_num_add>
 801a2fc:	8921      	ldrh	r1, [r4, #8]
 801a2fe:	fbb0 f2f1 	udiv	r2, r0, r1
 801a302:	fb01 0212 	mls	r2, r1, r2, r0
 801a306:	b292      	uxth	r2, r2
 801a308:	6863      	ldr	r3, [r4, #4]
 801a30a:	fbb3 f3f1 	udiv	r3, r3, r1
 801a30e:	4606      	mov	r6, r0
 801a310:	fb02 f303 	mul.w	r3, r2, r3
 801a314:	6820      	ldr	r0, [r4, #0]
 801a316:	3304      	adds	r3, #4
 801a318:	4418      	add	r0, r3
 801a31a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801a31e:	2b00      	cmp	r3, #0
 801a320:	d0a3      	beq.n	801a26a <uxr_receive_reliable_message+0x22>
 801a322:	6923      	ldr	r3, [r4, #16]
 801a324:	4798      	blx	r3
 801a326:	2802      	cmp	r0, #2
 801a328:	d005      	beq.n	801a336 <uxr_receive_reliable_message+0xee>
 801a32a:	2801      	cmp	r0, #1
 801a32c:	d0e2      	beq.n	801a2f4 <uxr_receive_reliable_message+0xac>
 801a32e:	e79c      	b.n	801a26a <uxr_receive_reliable_message+0x22>
 801a330:	9b06      	ldr	r3, [sp, #24]
 801a332:	81a5      	strh	r5, [r4, #12]
 801a334:	701e      	strb	r6, [r3, #0]
 801a336:	2601      	movs	r6, #1
 801a338:	e798      	b.n	801a26c <uxr_receive_reliable_message+0x24>
 801a33a:	bf00      	nop

0801a33c <uxr_next_input_reliable_buffer_available>:
 801a33c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a340:	4604      	mov	r4, r0
 801a342:	460f      	mov	r7, r1
 801a344:	8980      	ldrh	r0, [r0, #12]
 801a346:	2101      	movs	r1, #1
 801a348:	4690      	mov	r8, r2
 801a34a:	f000 fd49 	bl	801ade0 <uxr_seq_num_add>
 801a34e:	8921      	ldrh	r1, [r4, #8]
 801a350:	fbb0 f2f1 	udiv	r2, r0, r1
 801a354:	fb01 0212 	mls	r2, r1, r2, r0
 801a358:	b292      	uxth	r2, r2
 801a35a:	6863      	ldr	r3, [r4, #4]
 801a35c:	6826      	ldr	r6, [r4, #0]
 801a35e:	fbb3 f3f1 	udiv	r3, r3, r1
 801a362:	fb02 f303 	mul.w	r3, r2, r3
 801a366:	3304      	adds	r3, #4
 801a368:	441e      	add	r6, r3
 801a36a:	f856 9c04 	ldr.w	r9, [r6, #-4]
 801a36e:	f1b9 0f00 	cmp.w	r9, #0
 801a372:	d023      	beq.n	801a3bc <uxr_next_input_reliable_buffer_available+0x80>
 801a374:	6923      	ldr	r3, [r4, #16]
 801a376:	4605      	mov	r5, r0
 801a378:	4630      	mov	r0, r6
 801a37a:	4798      	blx	r3
 801a37c:	4682      	mov	sl, r0
 801a37e:	b300      	cbz	r0, 801a3c2 <uxr_next_input_reliable_buffer_available+0x86>
 801a380:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 801a384:	2101      	movs	r1, #1
 801a386:	4650      	mov	r0, sl
 801a388:	f000 fd2a 	bl	801ade0 <uxr_seq_num_add>
 801a38c:	8921      	ldrh	r1, [r4, #8]
 801a38e:	fbb0 f2f1 	udiv	r2, r0, r1
 801a392:	4682      	mov	sl, r0
 801a394:	fb01 0212 	mls	r2, r1, r2, r0
 801a398:	e9d4 0300 	ldrd	r0, r3, [r4]
 801a39c:	b292      	uxth	r2, r2
 801a39e:	fbb3 f3f1 	udiv	r3, r3, r1
 801a3a2:	fb02 f303 	mul.w	r3, r2, r3
 801a3a6:	3304      	adds	r3, #4
 801a3a8:	4418      	add	r0, r3
 801a3aa:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801a3ae:	b12b      	cbz	r3, 801a3bc <uxr_next_input_reliable_buffer_available+0x80>
 801a3b0:	6923      	ldr	r3, [r4, #16]
 801a3b2:	4798      	blx	r3
 801a3b4:	2802      	cmp	r0, #2
 801a3b6:	d01b      	beq.n	801a3f0 <uxr_next_input_reliable_buffer_available+0xb4>
 801a3b8:	2801      	cmp	r0, #1
 801a3ba:	d0e3      	beq.n	801a384 <uxr_next_input_reliable_buffer_available+0x48>
 801a3bc:	2000      	movs	r0, #0
 801a3be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a3c2:	464a      	mov	r2, r9
 801a3c4:	4631      	mov	r1, r6
 801a3c6:	4638      	mov	r0, r7
 801a3c8:	f7f6 ff06 	bl	80111d8 <ucdr_init_buffer>
 801a3cc:	8921      	ldrh	r1, [r4, #8]
 801a3ce:	fbb5 f2f1 	udiv	r2, r5, r1
 801a3d2:	fb01 5212 	mls	r2, r1, r2, r5
 801a3d6:	b292      	uxth	r2, r2
 801a3d8:	6863      	ldr	r3, [r4, #4]
 801a3da:	fbb3 f3f1 	udiv	r3, r3, r1
 801a3de:	fb02 f303 	mul.w	r3, r2, r3
 801a3e2:	6822      	ldr	r2, [r4, #0]
 801a3e4:	f842 a003 	str.w	sl, [r2, r3]
 801a3e8:	81a5      	strh	r5, [r4, #12]
 801a3ea:	2001      	movs	r0, #1
 801a3ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a3f0:	eb06 0108 	add.w	r1, r6, r8
 801a3f4:	8926      	ldrh	r6, [r4, #8]
 801a3f6:	fbb5 f0f6 	udiv	r0, r5, r6
 801a3fa:	fb06 5010 	mls	r0, r6, r0, r5
 801a3fe:	b280      	uxth	r0, r0
 801a400:	6863      	ldr	r3, [r4, #4]
 801a402:	fbb3 f3f6 	udiv	r3, r3, r6
 801a406:	fb00 f303 	mul.w	r3, r0, r3
 801a40a:	6820      	ldr	r0, [r4, #0]
 801a40c:	2500      	movs	r5, #0
 801a40e:	50c5      	str	r5, [r0, r3]
 801a410:	eba9 0208 	sub.w	r2, r9, r8
 801a414:	4638      	mov	r0, r7
 801a416:	f7f6 fedf 	bl	80111d8 <ucdr_init_buffer>
 801a41a:	4903      	ldr	r1, [pc, #12]	@ (801a428 <uxr_next_input_reliable_buffer_available+0xec>)
 801a41c:	4622      	mov	r2, r4
 801a41e:	4638      	mov	r0, r7
 801a420:	f7f6 feae 	bl	8011180 <ucdr_set_on_full_buffer_callback>
 801a424:	4655      	mov	r5, sl
 801a426:	e7df      	b.n	801a3e8 <uxr_next_input_reliable_buffer_available+0xac>
 801a428:	0801a145 	.word	0x0801a145

0801a42c <uxr_process_heartbeat>:
 801a42c:	b538      	push	{r3, r4, r5, lr}
 801a42e:	4611      	mov	r1, r2
 801a430:	4604      	mov	r4, r0
 801a432:	89c0      	ldrh	r0, [r0, #14]
 801a434:	4615      	mov	r5, r2
 801a436:	f000 fcdb 	bl	801adf0 <uxr_seq_num_cmp>
 801a43a:	2800      	cmp	r0, #0
 801a43c:	bfb8      	it	lt
 801a43e:	81e5      	strhlt	r5, [r4, #14]
 801a440:	bd38      	pop	{r3, r4, r5, pc}
 801a442:	bf00      	nop

0801a444 <uxr_compute_acknack>:
 801a444:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a448:	8903      	ldrh	r3, [r0, #8]
 801a44a:	8985      	ldrh	r5, [r0, #12]
 801a44c:	4604      	mov	r4, r0
 801a44e:	460e      	mov	r6, r1
 801a450:	2b00      	cmp	r3, #0
 801a452:	d048      	beq.n	801a4e6 <uxr_compute_acknack+0xa2>
 801a454:	4628      	mov	r0, r5
 801a456:	2701      	movs	r7, #1
 801a458:	e003      	b.n	801a462 <uxr_compute_acknack+0x1e>
 801a45a:	4567      	cmp	r7, ip
 801a45c:	d243      	bcs.n	801a4e6 <uxr_compute_acknack+0xa2>
 801a45e:	89a0      	ldrh	r0, [r4, #12]
 801a460:	3701      	adds	r7, #1
 801a462:	b2b9      	uxth	r1, r7
 801a464:	f000 fcbc 	bl	801ade0 <uxr_seq_num_add>
 801a468:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801a46c:	fbb0 f2fc 	udiv	r2, r0, ip
 801a470:	e9d4 1300 	ldrd	r1, r3, [r4]
 801a474:	fb0c 0212 	mls	r2, ip, r2, r0
 801a478:	b292      	uxth	r2, r2
 801a47a:	fbb3 f3fc 	udiv	r3, r3, ip
 801a47e:	fb02 f303 	mul.w	r3, r2, r3
 801a482:	58cb      	ldr	r3, [r1, r3]
 801a484:	2b00      	cmp	r3, #0
 801a486:	d1e8      	bne.n	801a45a <uxr_compute_acknack+0x16>
 801a488:	8030      	strh	r0, [r6, #0]
 801a48a:	2101      	movs	r1, #1
 801a48c:	89e5      	ldrh	r5, [r4, #14]
 801a48e:	f000 fcab 	bl	801ade8 <uxr_seq_num_sub>
 801a492:	4601      	mov	r1, r0
 801a494:	4628      	mov	r0, r5
 801a496:	f000 fca7 	bl	801ade8 <uxr_seq_num_sub>
 801a49a:	4605      	mov	r5, r0
 801a49c:	4607      	mov	r7, r0
 801a49e:	b1f8      	cbz	r0, 801a4e0 <uxr_compute_acknack+0x9c>
 801a4a0:	f04f 0900 	mov.w	r9, #0
 801a4a4:	464d      	mov	r5, r9
 801a4a6:	f04f 0801 	mov.w	r8, #1
 801a4aa:	fa1f f189 	uxth.w	r1, r9
 801a4ae:	8830      	ldrh	r0, [r6, #0]
 801a4b0:	f000 fc96 	bl	801ade0 <uxr_seq_num_add>
 801a4b4:	8921      	ldrh	r1, [r4, #8]
 801a4b6:	fbb0 f3f1 	udiv	r3, r0, r1
 801a4ba:	fb03 0011 	mls	r0, r3, r1, r0
 801a4be:	e9d4 2300 	ldrd	r2, r3, [r4]
 801a4c2:	b280      	uxth	r0, r0
 801a4c4:	fbb3 f3f1 	udiv	r3, r3, r1
 801a4c8:	fb00 f303 	mul.w	r3, r0, r3
 801a4cc:	fa08 f109 	lsl.w	r1, r8, r9
 801a4d0:	58d3      	ldr	r3, [r2, r3]
 801a4d2:	f109 0901 	add.w	r9, r9, #1
 801a4d6:	b90b      	cbnz	r3, 801a4dc <uxr_compute_acknack+0x98>
 801a4d8:	4329      	orrs	r1, r5
 801a4da:	b28d      	uxth	r5, r1
 801a4dc:	454f      	cmp	r7, r9
 801a4de:	d1e4      	bne.n	801a4aa <uxr_compute_acknack+0x66>
 801a4e0:	4628      	mov	r0, r5
 801a4e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a4e6:	4628      	mov	r0, r5
 801a4e8:	e7ce      	b.n	801a488 <uxr_compute_acknack+0x44>
 801a4ea:	bf00      	nop

0801a4ec <uxr_init_output_best_effort_stream>:
 801a4ec:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 801a4f0:	e9c0 3201 	strd	r3, r2, [r0, #4]
 801a4f4:	6001      	str	r1, [r0, #0]
 801a4f6:	7303      	strb	r3, [r0, #12]
 801a4f8:	f8a0 c00e 	strh.w	ip, [r0, #14]
 801a4fc:	4770      	bx	lr
 801a4fe:	bf00      	nop

0801a500 <uxr_reset_output_best_effort_stream>:
 801a500:	7b02      	ldrb	r2, [r0, #12]
 801a502:	6042      	str	r2, [r0, #4]
 801a504:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801a508:	81c3      	strh	r3, [r0, #14]
 801a50a:	4770      	bx	lr

0801a50c <uxr_prepare_best_effort_buffer_to_write>:
 801a50c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a50e:	4604      	mov	r4, r0
 801a510:	b083      	sub	sp, #12
 801a512:	6840      	ldr	r0, [r0, #4]
 801a514:	460d      	mov	r5, r1
 801a516:	4616      	mov	r6, r2
 801a518:	f7f8 fb22 	bl	8012b60 <uxr_submessage_padding>
 801a51c:	6863      	ldr	r3, [r4, #4]
 801a51e:	4418      	add	r0, r3
 801a520:	68a3      	ldr	r3, [r4, #8]
 801a522:	1942      	adds	r2, r0, r5
 801a524:	4293      	cmp	r3, r2
 801a526:	bf2c      	ite	cs
 801a528:	2701      	movcs	r7, #1
 801a52a:	2700      	movcc	r7, #0
 801a52c:	d202      	bcs.n	801a534 <uxr_prepare_best_effort_buffer_to_write+0x28>
 801a52e:	4638      	mov	r0, r7
 801a530:	b003      	add	sp, #12
 801a532:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a534:	9000      	str	r0, [sp, #0]
 801a536:	6821      	ldr	r1, [r4, #0]
 801a538:	4630      	mov	r0, r6
 801a53a:	2300      	movs	r3, #0
 801a53c:	f7f6 fe3a 	bl	80111b4 <ucdr_init_buffer_origin_offset>
 801a540:	6863      	ldr	r3, [r4, #4]
 801a542:	4638      	mov	r0, r7
 801a544:	442b      	add	r3, r5
 801a546:	6063      	str	r3, [r4, #4]
 801a548:	b003      	add	sp, #12
 801a54a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801a54c <uxr_prepare_best_effort_buffer_to_send>:
 801a54c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a550:	4604      	mov	r4, r0
 801a552:	461d      	mov	r5, r3
 801a554:	6840      	ldr	r0, [r0, #4]
 801a556:	7b23      	ldrb	r3, [r4, #12]
 801a558:	4298      	cmp	r0, r3
 801a55a:	bf8c      	ite	hi
 801a55c:	2601      	movhi	r6, #1
 801a55e:	2600      	movls	r6, #0
 801a560:	d802      	bhi.n	801a568 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 801a562:	4630      	mov	r0, r6
 801a564:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a568:	4688      	mov	r8, r1
 801a56a:	89e0      	ldrh	r0, [r4, #14]
 801a56c:	2101      	movs	r1, #1
 801a56e:	4617      	mov	r7, r2
 801a570:	f000 fc36 	bl	801ade0 <uxr_seq_num_add>
 801a574:	6823      	ldr	r3, [r4, #0]
 801a576:	81e0      	strh	r0, [r4, #14]
 801a578:	8028      	strh	r0, [r5, #0]
 801a57a:	f8c8 3000 	str.w	r3, [r8]
 801a57e:	6863      	ldr	r3, [r4, #4]
 801a580:	603b      	str	r3, [r7, #0]
 801a582:	7b23      	ldrb	r3, [r4, #12]
 801a584:	6063      	str	r3, [r4, #4]
 801a586:	4630      	mov	r0, r6
 801a588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a58c <on_full_output_buffer>:
 801a58c:	b538      	push	{r3, r4, r5, lr}
 801a58e:	460c      	mov	r4, r1
 801a590:	6803      	ldr	r3, [r0, #0]
 801a592:	6809      	ldr	r1, [r1, #0]
 801a594:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801a598:	6862      	ldr	r2, [r4, #4]
 801a59a:	fbb2 f2fc 	udiv	r2, r2, ip
 801a59e:	1a5b      	subs	r3, r3, r1
 801a5a0:	fbb3 f3f2 	udiv	r3, r3, r2
 801a5a4:	3301      	adds	r3, #1
 801a5a6:	b29b      	uxth	r3, r3
 801a5a8:	fbb3 fefc 	udiv	lr, r3, ip
 801a5ac:	fb0c 331e 	mls	r3, ip, lr, r3
 801a5b0:	b29b      	uxth	r3, r3
 801a5b2:	fb02 f303 	mul.w	r3, r2, r3
 801a5b6:	f894 c00c 	ldrb.w	ip, [r4, #12]
 801a5ba:	58ca      	ldr	r2, [r1, r3]
 801a5bc:	4463      	add	r3, ip
 801a5be:	eba2 020c 	sub.w	r2, r2, ip
 801a5c2:	3308      	adds	r3, #8
 801a5c4:	4605      	mov	r5, r0
 801a5c6:	4419      	add	r1, r3
 801a5c8:	3a04      	subs	r2, #4
 801a5ca:	6903      	ldr	r3, [r0, #16]
 801a5cc:	f7f6 fdfc 	bl	80111c8 <ucdr_init_buffer_origin>
 801a5d0:	4628      	mov	r0, r5
 801a5d2:	4903      	ldr	r1, [pc, #12]	@ (801a5e0 <on_full_output_buffer+0x54>)
 801a5d4:	4622      	mov	r2, r4
 801a5d6:	f7f6 fdd3 	bl	8011180 <ucdr_set_on_full_buffer_callback>
 801a5da:	2000      	movs	r0, #0
 801a5dc:	bd38      	pop	{r3, r4, r5, pc}
 801a5de:	bf00      	nop
 801a5e0:	0801a58d 	.word	0x0801a58d

0801a5e4 <uxr_init_output_reliable_stream>:
 801a5e4:	b410      	push	{r4}
 801a5e6:	f89d c004 	ldrb.w	ip, [sp, #4]
 801a5ea:	8103      	strh	r3, [r0, #8]
 801a5ec:	e9c0 1200 	strd	r1, r2, [r0]
 801a5f0:	f880 c00c 	strb.w	ip, [r0, #12]
 801a5f4:	b1d3      	cbz	r3, 801a62c <uxr_init_output_reliable_stream+0x48>
 801a5f6:	f8c1 c000 	str.w	ip, [r1]
 801a5fa:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801a5fe:	f1bc 0f01 	cmp.w	ip, #1
 801a602:	d913      	bls.n	801a62c <uxr_init_output_reliable_stream+0x48>
 801a604:	2301      	movs	r3, #1
 801a606:	fbb3 f1fc 	udiv	r1, r3, ip
 801a60a:	fb0c 3111 	mls	r1, ip, r1, r3
 801a60e:	b289      	uxth	r1, r1
 801a610:	6842      	ldr	r2, [r0, #4]
 801a612:	6804      	ldr	r4, [r0, #0]
 801a614:	fbb2 f2fc 	udiv	r2, r2, ip
 801a618:	fb01 f202 	mul.w	r2, r1, r2
 801a61c:	7b01      	ldrb	r1, [r0, #12]
 801a61e:	50a1      	str	r1, [r4, r2]
 801a620:	3301      	adds	r3, #1
 801a622:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801a626:	b29b      	uxth	r3, r3
 801a628:	459c      	cmp	ip, r3
 801a62a:	d8ec      	bhi.n	801a606 <uxr_init_output_reliable_stream+0x22>
 801a62c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801a630:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801a634:	e9c0 2306 	strd	r2, r3, [r0, #24]
 801a638:	4905      	ldr	r1, [pc, #20]	@ (801a650 <uxr_init_output_reliable_stream+0x6c>)
 801a63a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a63e:	f8c0 100e 	str.w	r1, [r0, #14]
 801a642:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801a646:	2300      	movs	r3, #0
 801a648:	8242      	strh	r2, [r0, #18]
 801a64a:	8403      	strh	r3, [r0, #32]
 801a64c:	4770      	bx	lr
 801a64e:	bf00      	nop
 801a650:	ffff0000 	.word	0xffff0000

0801a654 <uxr_reset_output_reliable_stream>:
 801a654:	8901      	ldrh	r1, [r0, #8]
 801a656:	b1b1      	cbz	r1, 801a686 <uxr_reset_output_reliable_stream+0x32>
 801a658:	f04f 0c00 	mov.w	ip, #0
 801a65c:	4663      	mov	r3, ip
 801a65e:	fbb3 f2f1 	udiv	r2, r3, r1
 801a662:	fb01 3312 	mls	r3, r1, r2, r3
 801a666:	b29b      	uxth	r3, r3
 801a668:	6842      	ldr	r2, [r0, #4]
 801a66a:	fbb2 f2f1 	udiv	r2, r2, r1
 801a66e:	6801      	ldr	r1, [r0, #0]
 801a670:	fb03 f202 	mul.w	r2, r3, r2
 801a674:	7b03      	ldrb	r3, [r0, #12]
 801a676:	508b      	str	r3, [r1, r2]
 801a678:	f10c 0c01 	add.w	ip, ip, #1
 801a67c:	8901      	ldrh	r1, [r0, #8]
 801a67e:	fa1f f38c 	uxth.w	r3, ip
 801a682:	4299      	cmp	r1, r3
 801a684:	d8eb      	bhi.n	801a65e <uxr_reset_output_reliable_stream+0xa>
 801a686:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801a68a:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801a68e:	e9c0 2306 	strd	r2, r3, [r0, #24]
 801a692:	4904      	ldr	r1, [pc, #16]	@ (801a6a4 <uxr_reset_output_reliable_stream+0x50>)
 801a694:	f8c0 100e 	str.w	r1, [r0, #14]
 801a698:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801a69c:	2300      	movs	r3, #0
 801a69e:	8242      	strh	r2, [r0, #18]
 801a6a0:	8403      	strh	r3, [r0, #32]
 801a6a2:	4770      	bx	lr
 801a6a4:	ffff0000 	.word	0xffff0000

0801a6a8 <uxr_prepare_reliable_buffer_to_write>:
 801a6a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a6ac:	4604      	mov	r4, r0
 801a6ae:	b091      	sub	sp, #68	@ 0x44
 801a6b0:	8900      	ldrh	r0, [r0, #8]
 801a6b2:	89e7      	ldrh	r7, [r4, #14]
 801a6b4:	6823      	ldr	r3, [r4, #0]
 801a6b6:	9204      	str	r2, [sp, #16]
 801a6b8:	fbb7 f2f0 	udiv	r2, r7, r0
 801a6bc:	fb00 7212 	mls	r2, r0, r2, r7
 801a6c0:	b292      	uxth	r2, r2
 801a6c2:	6865      	ldr	r5, [r4, #4]
 801a6c4:	fbb5 f5f0 	udiv	r5, r5, r0
 801a6c8:	fb05 3202 	mla	r2, r5, r2, r3
 801a6cc:	3204      	adds	r2, #4
 801a6ce:	f852 ac04 	ldr.w	sl, [r2, #-4]
 801a6d2:	f894 b00c 	ldrb.w	fp, [r4, #12]
 801a6d6:	9203      	str	r2, [sp, #12]
 801a6d8:	4688      	mov	r8, r1
 801a6da:	f1a5 0904 	sub.w	r9, r5, #4
 801a6de:	2800      	cmp	r0, #0
 801a6e0:	f000 8143 	beq.w	801a96a <uxr_prepare_reliable_buffer_to_write+0x2c2>
 801a6e4:	2100      	movs	r1, #0
 801a6e6:	460e      	mov	r6, r1
 801a6e8:	b28a      	uxth	r2, r1
 801a6ea:	fbb2 fcf0 	udiv	ip, r2, r0
 801a6ee:	fb00 221c 	mls	r2, r0, ip, r2
 801a6f2:	b292      	uxth	r2, r2
 801a6f4:	fb05 f202 	mul.w	r2, r5, r2
 801a6f8:	3101      	adds	r1, #1
 801a6fa:	589a      	ldr	r2, [r3, r2]
 801a6fc:	455a      	cmp	r2, fp
 801a6fe:	bf04      	itt	eq
 801a700:	3601      	addeq	r6, #1
 801a702:	b2b6      	uxtheq	r6, r6
 801a704:	4281      	cmp	r1, r0
 801a706:	d1ef      	bne.n	801a6e8 <uxr_prepare_reliable_buffer_to_write+0x40>
 801a708:	4650      	mov	r0, sl
 801a70a:	2104      	movs	r1, #4
 801a70c:	9605      	str	r6, [sp, #20]
 801a70e:	f7f6 fd67 	bl	80111e0 <ucdr_alignment>
 801a712:	4482      	add	sl, r0
 801a714:	eb0a 0208 	add.w	r2, sl, r8
 801a718:	454a      	cmp	r2, r9
 801a71a:	f240 80ca 	bls.w	801a8b2 <uxr_prepare_reliable_buffer_to_write+0x20a>
 801a71e:	7b22      	ldrb	r2, [r4, #12]
 801a720:	4442      	add	r2, r8
 801a722:	454a      	cmp	r2, r9
 801a724:	f240 80b2 	bls.w	801a88c <uxr_prepare_reliable_buffer_to_write+0x1e4>
 801a728:	f5cb 427f 	rsb	r2, fp, #65280	@ 0xff00
 801a72c:	32fc      	adds	r2, #252	@ 0xfc
 801a72e:	fa1f f389 	uxth.w	r3, r9
 801a732:	441a      	add	r2, r3
 801a734:	b292      	uxth	r2, r2
 801a736:	fb06 fb02 	mul.w	fp, r6, r2
 801a73a:	45c3      	cmp	fp, r8
 801a73c:	9205      	str	r2, [sp, #20]
 801a73e:	9206      	str	r2, [sp, #24]
 801a740:	f0c0 80b3 	bcc.w	801a8aa <uxr_prepare_reliable_buffer_to_write+0x202>
 801a744:	f10a 0204 	add.w	r2, sl, #4
 801a748:	454a      	cmp	r2, r9
 801a74a:	f080 80db 	bcs.w	801a904 <uxr_prepare_reliable_buffer_to_write+0x25c>
 801a74e:	f1a3 0b04 	sub.w	fp, r3, #4
 801a752:	ebab 0b0a 	sub.w	fp, fp, sl
 801a756:	9b05      	ldr	r3, [sp, #20]
 801a758:	fa1f fb8b 	uxth.w	fp, fp
 801a75c:	eba8 080b 	sub.w	r8, r8, fp
 801a760:	fbb8 fcf3 	udiv	ip, r8, r3
 801a764:	fb03 831c 	mls	r3, r3, ip, r8
 801a768:	fa1f fc8c 	uxth.w	ip, ip
 801a76c:	2b00      	cmp	r3, #0
 801a76e:	f040 80c1 	bne.w	801a8f4 <uxr_prepare_reliable_buffer_to_write+0x24c>
 801a772:	45b4      	cmp	ip, r6
 801a774:	f200 8099 	bhi.w	801a8aa <uxr_prepare_reliable_buffer_to_write+0x202>
 801a778:	f10d 0820 	add.w	r8, sp, #32
 801a77c:	f1bc 0f00 	cmp.w	ip, #0
 801a780:	d040      	beq.n	801a804 <uxr_prepare_reliable_buffer_to_write+0x15c>
 801a782:	f8cd a01c 	str.w	sl, [sp, #28]
 801a786:	2600      	movs	r6, #0
 801a788:	f8dd a014 	ldr.w	sl, [sp, #20]
 801a78c:	9505      	str	r5, [sp, #20]
 801a78e:	f10d 0820 	add.w	r8, sp, #32
 801a792:	4665      	mov	r5, ip
 801a794:	e000      	b.n	801a798 <uxr_prepare_reliable_buffer_to_write+0xf0>
 801a796:	46d3      	mov	fp, sl
 801a798:	8921      	ldrh	r1, [r4, #8]
 801a79a:	fbb7 f2f1 	udiv	r2, r7, r1
 801a79e:	fb01 7212 	mls	r2, r1, r2, r7
 801a7a2:	b292      	uxth	r2, r2
 801a7a4:	6863      	ldr	r3, [r4, #4]
 801a7a6:	fbb3 f3f1 	udiv	r3, r3, r1
 801a7aa:	6821      	ldr	r1, [r4, #0]
 801a7ac:	fb02 f303 	mul.w	r3, r2, r3
 801a7b0:	3304      	adds	r3, #4
 801a7b2:	4419      	add	r1, r3
 801a7b4:	4640      	mov	r0, r8
 801a7b6:	f851 2c04 	ldr.w	r2, [r1, #-4]
 801a7ba:	9200      	str	r2, [sp, #0]
 801a7bc:	2300      	movs	r3, #0
 801a7be:	464a      	mov	r2, r9
 801a7c0:	f7f6 fcf8 	bl	80111b4 <ucdr_init_buffer_origin_offset>
 801a7c4:	465a      	mov	r2, fp
 801a7c6:	2300      	movs	r3, #0
 801a7c8:	210d      	movs	r1, #13
 801a7ca:	4640      	mov	r0, r8
 801a7cc:	f7f8 f988 	bl	8012ae0 <uxr_buffer_submessage_header>
 801a7d0:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801a7d4:	fbb7 f2fc 	udiv	r2, r7, ip
 801a7d8:	fb0c 7212 	mls	r2, ip, r2, r7
 801a7dc:	b292      	uxth	r2, r2
 801a7de:	6863      	ldr	r3, [r4, #4]
 801a7e0:	fbb3 f3fc 	udiv	r3, r3, ip
 801a7e4:	fb02 f303 	mul.w	r3, r2, r3
 801a7e8:	6822      	ldr	r2, [r4, #0]
 801a7ea:	4638      	mov	r0, r7
 801a7ec:	f842 9003 	str.w	r9, [r2, r3]
 801a7f0:	2101      	movs	r1, #1
 801a7f2:	f000 faf5 	bl	801ade0 <uxr_seq_num_add>
 801a7f6:	3601      	adds	r6, #1
 801a7f8:	42ae      	cmp	r6, r5
 801a7fa:	4607      	mov	r7, r0
 801a7fc:	d1cb      	bne.n	801a796 <uxr_prepare_reliable_buffer_to_write+0xee>
 801a7fe:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801a802:	9d05      	ldr	r5, [sp, #20]
 801a804:	8920      	ldrh	r0, [r4, #8]
 801a806:	fbb7 f1f0 	udiv	r1, r7, r0
 801a80a:	fb00 7111 	mls	r1, r0, r1, r7
 801a80e:	b289      	uxth	r1, r1
 801a810:	6863      	ldr	r3, [r4, #4]
 801a812:	fbb3 f3f0 	udiv	r3, r3, r0
 801a816:	fb01 f303 	mul.w	r3, r1, r3
 801a81a:	6821      	ldr	r1, [r4, #0]
 801a81c:	3304      	adds	r3, #4
 801a81e:	4419      	add	r1, r3
 801a820:	464a      	mov	r2, r9
 801a822:	f851 0c04 	ldr.w	r0, [r1, #-4]
 801a826:	9000      	str	r0, [sp, #0]
 801a828:	2300      	movs	r3, #0
 801a82a:	4640      	mov	r0, r8
 801a82c:	f7f6 fcc2 	bl	80111b4 <ucdr_init_buffer_origin_offset>
 801a830:	4640      	mov	r0, r8
 801a832:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801a836:	2302      	movs	r3, #2
 801a838:	fa1f f288 	uxth.w	r2, r8
 801a83c:	210d      	movs	r1, #13
 801a83e:	f7f8 f94f 	bl	8012ae0 <uxr_buffer_submessage_header>
 801a842:	8926      	ldrh	r6, [r4, #8]
 801a844:	9b03      	ldr	r3, [sp, #12]
 801a846:	7b20      	ldrb	r0, [r4, #12]
 801a848:	f1a5 0208 	sub.w	r2, r5, #8
 801a84c:	f10a 0104 	add.w	r1, sl, #4
 801a850:	fbb7 f5f6 	udiv	r5, r7, r6
 801a854:	fb06 7515 	mls	r5, r6, r5, r7
 801a858:	440b      	add	r3, r1
 801a85a:	b2ad      	uxth	r5, r5
 801a85c:	4619      	mov	r1, r3
 801a85e:	3004      	adds	r0, #4
 801a860:	6863      	ldr	r3, [r4, #4]
 801a862:	fbb3 f3f6 	udiv	r3, r3, r6
 801a866:	fb05 f303 	mul.w	r3, r5, r3
 801a86a:	6825      	ldr	r5, [r4, #0]
 801a86c:	4440      	add	r0, r8
 801a86e:	50e8      	str	r0, [r5, r3]
 801a870:	9d04      	ldr	r5, [sp, #16]
 801a872:	eba2 020a 	sub.w	r2, r2, sl
 801a876:	4628      	mov	r0, r5
 801a878:	f7f6 fcae 	bl	80111d8 <ucdr_init_buffer>
 801a87c:	493c      	ldr	r1, [pc, #240]	@ (801a970 <uxr_prepare_reliable_buffer_to_write+0x2c8>)
 801a87e:	4622      	mov	r2, r4
 801a880:	4628      	mov	r0, r5
 801a882:	f7f6 fc7d 	bl	8011180 <ucdr_set_on_full_buffer_callback>
 801a886:	81e7      	strh	r7, [r4, #14]
 801a888:	2001      	movs	r0, #1
 801a88a:	e00f      	b.n	801a8ac <uxr_prepare_reliable_buffer_to_write+0x204>
 801a88c:	2101      	movs	r1, #1
 801a88e:	89e0      	ldrh	r0, [r4, #14]
 801a890:	f000 faa6 	bl	801ade0 <uxr_seq_num_add>
 801a894:	8921      	ldrh	r1, [r4, #8]
 801a896:	4605      	mov	r5, r0
 801a898:	8a60      	ldrh	r0, [r4, #18]
 801a89a:	f000 faa1 	bl	801ade0 <uxr_seq_num_add>
 801a89e:	4601      	mov	r1, r0
 801a8a0:	4628      	mov	r0, r5
 801a8a2:	f000 faa5 	bl	801adf0 <uxr_seq_num_cmp>
 801a8a6:	2800      	cmp	r0, #0
 801a8a8:	dd45      	ble.n	801a936 <uxr_prepare_reliable_buffer_to_write+0x28e>
 801a8aa:	2000      	movs	r0, #0
 801a8ac:	b011      	add	sp, #68	@ 0x44
 801a8ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a8b2:	8921      	ldrh	r1, [r4, #8]
 801a8b4:	8a60      	ldrh	r0, [r4, #18]
 801a8b6:	9205      	str	r2, [sp, #20]
 801a8b8:	f000 fa92 	bl	801ade0 <uxr_seq_num_add>
 801a8bc:	4601      	mov	r1, r0
 801a8be:	4638      	mov	r0, r7
 801a8c0:	f000 fa96 	bl	801adf0 <uxr_seq_num_cmp>
 801a8c4:	2800      	cmp	r0, #0
 801a8c6:	9a05      	ldr	r2, [sp, #20]
 801a8c8:	dcef      	bgt.n	801a8aa <uxr_prepare_reliable_buffer_to_write+0x202>
 801a8ca:	8926      	ldrh	r6, [r4, #8]
 801a8cc:	fbb7 f5f6 	udiv	r5, r7, r6
 801a8d0:	fb06 7515 	mls	r5, r6, r5, r7
 801a8d4:	b2ad      	uxth	r5, r5
 801a8d6:	6863      	ldr	r3, [r4, #4]
 801a8d8:	6824      	ldr	r4, [r4, #0]
 801a8da:	fbb3 f3f6 	udiv	r3, r3, r6
 801a8de:	fb05 f303 	mul.w	r3, r5, r3
 801a8e2:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 801a8e6:	50e2      	str	r2, [r4, r3]
 801a8e8:	2300      	movs	r3, #0
 801a8ea:	f8cd a000 	str.w	sl, [sp]
 801a8ee:	f7f6 fc61 	bl	80111b4 <ucdr_init_buffer_origin_offset>
 801a8f2:	e7c9      	b.n	801a888 <uxr_prepare_reliable_buffer_to_write+0x1e0>
 801a8f4:	f10c 0c01 	add.w	ip, ip, #1
 801a8f8:	fa1f fc8c 	uxth.w	ip, ip
 801a8fc:	45b4      	cmp	ip, r6
 801a8fe:	9306      	str	r3, [sp, #24]
 801a900:	d8d3      	bhi.n	801a8aa <uxr_prepare_reliable_buffer_to_write+0x202>
 801a902:	e739      	b.n	801a778 <uxr_prepare_reliable_buffer_to_write+0xd0>
 801a904:	4638      	mov	r0, r7
 801a906:	2101      	movs	r1, #1
 801a908:	9307      	str	r3, [sp, #28]
 801a90a:	f000 fa69 	bl	801ade0 <uxr_seq_num_add>
 801a90e:	8921      	ldrh	r1, [r4, #8]
 801a910:	6862      	ldr	r2, [r4, #4]
 801a912:	4607      	mov	r7, r0
 801a914:	fbb0 f0f1 	udiv	r0, r0, r1
 801a918:	fb01 7010 	mls	r0, r1, r0, r7
 801a91c:	b280      	uxth	r0, r0
 801a91e:	fbb2 f1f1 	udiv	r1, r2, r1
 801a922:	6822      	ldr	r2, [r4, #0]
 801a924:	fb00 f101 	mul.w	r1, r0, r1
 801a928:	3104      	adds	r1, #4
 801a92a:	1853      	adds	r3, r2, r1
 801a92c:	9303      	str	r3, [sp, #12]
 801a92e:	f853 ac04 	ldr.w	sl, [r3, #-4]
 801a932:	9b07      	ldr	r3, [sp, #28]
 801a934:	e70b      	b.n	801a74e <uxr_prepare_reliable_buffer_to_write+0xa6>
 801a936:	8921      	ldrh	r1, [r4, #8]
 801a938:	fbb5 f2f1 	udiv	r2, r5, r1
 801a93c:	fb01 5212 	mls	r2, r1, r2, r5
 801a940:	b292      	uxth	r2, r2
 801a942:	6863      	ldr	r3, [r4, #4]
 801a944:	fbb3 f3f1 	udiv	r3, r3, r1
 801a948:	6821      	ldr	r1, [r4, #0]
 801a94a:	9804      	ldr	r0, [sp, #16]
 801a94c:	fb02 f303 	mul.w	r3, r2, r3
 801a950:	3304      	adds	r3, #4
 801a952:	7b22      	ldrb	r2, [r4, #12]
 801a954:	4419      	add	r1, r3
 801a956:	4442      	add	r2, r8
 801a958:	f841 2c04 	str.w	r2, [r1, #-4]
 801a95c:	7b23      	ldrb	r3, [r4, #12]
 801a95e:	9300      	str	r3, [sp, #0]
 801a960:	2300      	movs	r3, #0
 801a962:	f7f6 fc27 	bl	80111b4 <ucdr_init_buffer_origin_offset>
 801a966:	81e5      	strh	r5, [r4, #14]
 801a968:	e78e      	b.n	801a888 <uxr_prepare_reliable_buffer_to_write+0x1e0>
 801a96a:	4606      	mov	r6, r0
 801a96c:	e6cc      	b.n	801a708 <uxr_prepare_reliable_buffer_to_write+0x60>
 801a96e:	bf00      	nop
 801a970:	0801a58d 	.word	0x0801a58d

0801a974 <uxr_prepare_next_reliable_buffer_to_send>:
 801a974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a976:	4604      	mov	r4, r0
 801a978:	460f      	mov	r7, r1
 801a97a:	8a00      	ldrh	r0, [r0, #16]
 801a97c:	2101      	movs	r1, #1
 801a97e:	4615      	mov	r5, r2
 801a980:	461e      	mov	r6, r3
 801a982:	f000 fa2d 	bl	801ade0 <uxr_seq_num_add>
 801a986:	8030      	strh	r0, [r6, #0]
 801a988:	8922      	ldrh	r2, [r4, #8]
 801a98a:	fbb0 f3f2 	udiv	r3, r0, r2
 801a98e:	fb02 0c13 	mls	ip, r2, r3, r0
 801a992:	fa1f fc8c 	uxth.w	ip, ip
 801a996:	6863      	ldr	r3, [r4, #4]
 801a998:	fbb3 f3f2 	udiv	r3, r3, r2
 801a99c:	fb0c fc03 	mul.w	ip, ip, r3
 801a9a0:	6823      	ldr	r3, [r4, #0]
 801a9a2:	89e1      	ldrh	r1, [r4, #14]
 801a9a4:	f10c 0c04 	add.w	ip, ip, #4
 801a9a8:	4463      	add	r3, ip
 801a9aa:	603b      	str	r3, [r7, #0]
 801a9ac:	6823      	ldr	r3, [r4, #0]
 801a9ae:	4463      	add	r3, ip
 801a9b0:	f853 3c04 	ldr.w	r3, [r3, #-4]
 801a9b4:	602b      	str	r3, [r5, #0]
 801a9b6:	f000 fa1b 	bl	801adf0 <uxr_seq_num_cmp>
 801a9ba:	2800      	cmp	r0, #0
 801a9bc:	dd01      	ble.n	801a9c2 <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 801a9be:	2000      	movs	r0, #0
 801a9c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a9c2:	7b23      	ldrb	r3, [r4, #12]
 801a9c4:	682a      	ldr	r2, [r5, #0]
 801a9c6:	429a      	cmp	r2, r3
 801a9c8:	d9f9      	bls.n	801a9be <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801a9ca:	8a61      	ldrh	r1, [r4, #18]
 801a9cc:	8a20      	ldrh	r0, [r4, #16]
 801a9ce:	f000 fa0b 	bl	801ade8 <uxr_seq_num_sub>
 801a9d2:	8923      	ldrh	r3, [r4, #8]
 801a9d4:	4283      	cmp	r3, r0
 801a9d6:	d0f2      	beq.n	801a9be <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801a9d8:	8830      	ldrh	r0, [r6, #0]
 801a9da:	89e3      	ldrh	r3, [r4, #14]
 801a9dc:	8220      	strh	r0, [r4, #16]
 801a9de:	4298      	cmp	r0, r3
 801a9e0:	d001      	beq.n	801a9e6 <uxr_prepare_next_reliable_buffer_to_send+0x72>
 801a9e2:	2001      	movs	r0, #1
 801a9e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a9e6:	2101      	movs	r1, #1
 801a9e8:	f000 f9fa 	bl	801ade0 <uxr_seq_num_add>
 801a9ec:	81e0      	strh	r0, [r4, #14]
 801a9ee:	e7f8      	b.n	801a9e2 <uxr_prepare_next_reliable_buffer_to_send+0x6e>

0801a9f0 <uxr_update_output_stream_heartbeat_timestamp>:
 801a9f0:	b570      	push	{r4, r5, r6, lr}
 801a9f2:	8a01      	ldrh	r1, [r0, #16]
 801a9f4:	4604      	mov	r4, r0
 801a9f6:	8a40      	ldrh	r0, [r0, #18]
 801a9f8:	4615      	mov	r5, r2
 801a9fa:	461e      	mov	r6, r3
 801a9fc:	f000 f9f8 	bl	801adf0 <uxr_seq_num_cmp>
 801aa00:	2800      	cmp	r0, #0
 801aa02:	db07      	blt.n	801aa14 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 801aa04:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 801aa08:	f06f 4600 	mvn.w	r6, #2147483648	@ 0x80000000
 801aa0c:	e9c4 5606 	strd	r5, r6, [r4, #24]
 801aa10:	2000      	movs	r0, #0
 801aa12:	bd70      	pop	{r4, r5, r6, pc}
 801aa14:	f894 3020 	ldrb.w	r3, [r4, #32]
 801aa18:	b953      	cbnz	r3, 801aa30 <uxr_update_output_stream_heartbeat_timestamp+0x40>
 801aa1a:	2301      	movs	r3, #1
 801aa1c:	f884 3020 	strb.w	r3, [r4, #32]
 801aa20:	3564      	adds	r5, #100	@ 0x64
 801aa22:	f04f 0000 	mov.w	r0, #0
 801aa26:	f146 0600 	adc.w	r6, r6, #0
 801aa2a:	e9c4 5606 	strd	r5, r6, [r4, #24]
 801aa2e:	bd70      	pop	{r4, r5, r6, pc}
 801aa30:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801aa34:	428d      	cmp	r5, r1
 801aa36:	eb76 0202 	sbcs.w	r2, r6, r2
 801aa3a:	dbf1      	blt.n	801aa20 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 801aa3c:	3301      	adds	r3, #1
 801aa3e:	3564      	adds	r5, #100	@ 0x64
 801aa40:	f884 3020 	strb.w	r3, [r4, #32]
 801aa44:	f04f 0001 	mov.w	r0, #1
 801aa48:	f146 0600 	adc.w	r6, r6, #0
 801aa4c:	e7ed      	b.n	801aa2a <uxr_update_output_stream_heartbeat_timestamp+0x3a>
 801aa4e:	bf00      	nop

0801aa50 <uxr_begin_output_nack_buffer_it>:
 801aa50:	8a40      	ldrh	r0, [r0, #18]
 801aa52:	4770      	bx	lr

0801aa54 <uxr_next_reliable_nack_buffer_to_send>:
 801aa54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801aa58:	f890 8021 	ldrb.w	r8, [r0, #33]	@ 0x21
 801aa5c:	f1b8 0f00 	cmp.w	r8, #0
 801aa60:	d104      	bne.n	801aa6c <uxr_next_reliable_nack_buffer_to_send+0x18>
 801aa62:	f04f 0800 	mov.w	r8, #0
 801aa66:	4640      	mov	r0, r8
 801aa68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801aa6c:	4604      	mov	r4, r0
 801aa6e:	460e      	mov	r6, r1
 801aa70:	8818      	ldrh	r0, [r3, #0]
 801aa72:	4617      	mov	r7, r2
 801aa74:	461d      	mov	r5, r3
 801aa76:	e019      	b.n	801aaac <uxr_next_reliable_nack_buffer_to_send+0x58>
 801aa78:	8921      	ldrh	r1, [r4, #8]
 801aa7a:	8828      	ldrh	r0, [r5, #0]
 801aa7c:	fbb0 fcf1 	udiv	ip, r0, r1
 801aa80:	e9d4 3200 	ldrd	r3, r2, [r4]
 801aa84:	fb01 0c1c 	mls	ip, r1, ip, r0
 801aa88:	fa1f fc8c 	uxth.w	ip, ip
 801aa8c:	fbb2 f2f1 	udiv	r2, r2, r1
 801aa90:	fb02 fc0c 	mul.w	ip, r2, ip
 801aa94:	f10c 0c04 	add.w	ip, ip, #4
 801aa98:	4463      	add	r3, ip
 801aa9a:	6033      	str	r3, [r6, #0]
 801aa9c:	6823      	ldr	r3, [r4, #0]
 801aa9e:	4463      	add	r3, ip
 801aaa0:	f853 3c04 	ldr.w	r3, [r3, #-4]
 801aaa4:	603b      	str	r3, [r7, #0]
 801aaa6:	7b22      	ldrb	r2, [r4, #12]
 801aaa8:	429a      	cmp	r2, r3
 801aaaa:	d1dc      	bne.n	801aa66 <uxr_next_reliable_nack_buffer_to_send+0x12>
 801aaac:	2101      	movs	r1, #1
 801aaae:	f000 f997 	bl	801ade0 <uxr_seq_num_add>
 801aab2:	8028      	strh	r0, [r5, #0]
 801aab4:	8a21      	ldrh	r1, [r4, #16]
 801aab6:	f000 f99b 	bl	801adf0 <uxr_seq_num_cmp>
 801aaba:	2800      	cmp	r0, #0
 801aabc:	dddc      	ble.n	801aa78 <uxr_next_reliable_nack_buffer_to_send+0x24>
 801aabe:	2300      	movs	r3, #0
 801aac0:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
 801aac4:	e7cd      	b.n	801aa62 <uxr_next_reliable_nack_buffer_to_send+0xe>
 801aac6:	bf00      	nop

0801aac8 <uxr_process_acknack>:
 801aac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aaca:	4604      	mov	r4, r0
 801aacc:	460e      	mov	r6, r1
 801aace:	4610      	mov	r0, r2
 801aad0:	2101      	movs	r1, #1
 801aad2:	f000 f989 	bl	801ade8 <uxr_seq_num_sub>
 801aad6:	8a61      	ldrh	r1, [r4, #18]
 801aad8:	f000 f986 	bl	801ade8 <uxr_seq_num_sub>
 801aadc:	b1c0      	cbz	r0, 801ab10 <uxr_process_acknack+0x48>
 801aade:	4605      	mov	r5, r0
 801aae0:	2700      	movs	r7, #0
 801aae2:	2101      	movs	r1, #1
 801aae4:	8a60      	ldrh	r0, [r4, #18]
 801aae6:	f000 f97b 	bl	801ade0 <uxr_seq_num_add>
 801aaea:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801aaee:	fbb0 f1fc 	udiv	r1, r0, ip
 801aaf2:	e9d4 2300 	ldrd	r2, r3, [r4]
 801aaf6:	fb0c 0111 	mls	r1, ip, r1, r0
 801aafa:	b289      	uxth	r1, r1
 801aafc:	3701      	adds	r7, #1
 801aafe:	fbb3 f3fc 	udiv	r3, r3, ip
 801ab02:	fb01 f303 	mul.w	r3, r1, r3
 801ab06:	42bd      	cmp	r5, r7
 801ab08:	7b21      	ldrb	r1, [r4, #12]
 801ab0a:	8260      	strh	r0, [r4, #18]
 801ab0c:	50d1      	str	r1, [r2, r3]
 801ab0e:	d1e8      	bne.n	801aae2 <uxr_process_acknack+0x1a>
 801ab10:	3e00      	subs	r6, #0
 801ab12:	f04f 0300 	mov.w	r3, #0
 801ab16:	bf18      	it	ne
 801ab18:	2601      	movne	r6, #1
 801ab1a:	f884 3020 	strb.w	r3, [r4, #32]
 801ab1e:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 801ab22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801ab24 <uxr_is_output_up_to_date>:
 801ab24:	8a01      	ldrh	r1, [r0, #16]
 801ab26:	8a40      	ldrh	r0, [r0, #18]
 801ab28:	b508      	push	{r3, lr}
 801ab2a:	f000 f961 	bl	801adf0 <uxr_seq_num_cmp>
 801ab2e:	fab0 f080 	clz	r0, r0
 801ab32:	0940      	lsrs	r0, r0, #5
 801ab34:	bd08      	pop	{r3, pc}
 801ab36:	bf00      	nop

0801ab38 <get_available_free_slots>:
 801ab38:	8901      	ldrh	r1, [r0, #8]
 801ab3a:	b1c1      	cbz	r1, 801ab6e <get_available_free_slots+0x36>
 801ab3c:	b530      	push	{r4, r5, lr}
 801ab3e:	2200      	movs	r2, #0
 801ab40:	6843      	ldr	r3, [r0, #4]
 801ab42:	6805      	ldr	r5, [r0, #0]
 801ab44:	7b04      	ldrb	r4, [r0, #12]
 801ab46:	fbb3 fef1 	udiv	lr, r3, r1
 801ab4a:	4610      	mov	r0, r2
 801ab4c:	b293      	uxth	r3, r2
 801ab4e:	fbb3 fcf1 	udiv	ip, r3, r1
 801ab52:	fb01 331c 	mls	r3, r1, ip, r3
 801ab56:	b29b      	uxth	r3, r3
 801ab58:	fb0e f303 	mul.w	r3, lr, r3
 801ab5c:	3201      	adds	r2, #1
 801ab5e:	58eb      	ldr	r3, [r5, r3]
 801ab60:	429c      	cmp	r4, r3
 801ab62:	bf04      	itt	eq
 801ab64:	3001      	addeq	r0, #1
 801ab66:	b280      	uxtheq	r0, r0
 801ab68:	4291      	cmp	r1, r2
 801ab6a:	d1ef      	bne.n	801ab4c <get_available_free_slots+0x14>
 801ab6c:	bd30      	pop	{r4, r5, pc}
 801ab6e:	4608      	mov	r0, r1
 801ab70:	4770      	bx	lr
 801ab72:	bf00      	nop

0801ab74 <uxr_buffer_request_data>:
 801ab74:	b530      	push	{r4, r5, lr}
 801ab76:	b095      	sub	sp, #84	@ 0x54
 801ab78:	e9cd 2104 	strd	r2, r1, [sp, #16]
 801ab7c:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 801ab7e:	f88d 301c 	strb.w	r3, [sp, #28]
 801ab82:	2200      	movs	r2, #0
 801ab84:	2d00      	cmp	r5, #0
 801ab86:	bf14      	ite	ne
 801ab88:	2101      	movne	r1, #1
 801ab8a:	4611      	moveq	r1, r2
 801ab8c:	4604      	mov	r4, r0
 801ab8e:	f88d 201d 	strb.w	r2, [sp, #29]
 801ab92:	f88d 201e 	strb.w	r2, [sp, #30]
 801ab96:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 801ab9a:	d021      	beq.n	801abe0 <uxr_buffer_request_data+0x6c>
 801ab9c:	682a      	ldr	r2, [r5, #0]
 801ab9e:	686b      	ldr	r3, [r5, #4]
 801aba0:	f8cd 2026 	str.w	r2, [sp, #38]	@ 0x26
 801aba4:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 801aba8:	2210      	movs	r2, #16
 801abaa:	2308      	movs	r3, #8
 801abac:	2100      	movs	r1, #0
 801abae:	e9cd 3100 	strd	r3, r1, [sp]
 801abb2:	4620      	mov	r0, r4
 801abb4:	9905      	ldr	r1, [sp, #20]
 801abb6:	ab0c      	add	r3, sp, #48	@ 0x30
 801abb8:	f7f7 fd0e 	bl	80125d8 <uxr_prepare_stream_to_write_submessage>
 801abbc:	b918      	cbnz	r0, 801abc6 <uxr_buffer_request_data+0x52>
 801abbe:	4604      	mov	r4, r0
 801abc0:	4620      	mov	r0, r4
 801abc2:	b015      	add	sp, #84	@ 0x54
 801abc4:	bd30      	pop	{r4, r5, pc}
 801abc6:	9904      	ldr	r1, [sp, #16]
 801abc8:	aa06      	add	r2, sp, #24
 801abca:	4620      	mov	r0, r4
 801abcc:	f7f7 fe3e 	bl	801284c <uxr_init_base_object_request>
 801abd0:	a906      	add	r1, sp, #24
 801abd2:	4604      	mov	r4, r0
 801abd4:	a80c      	add	r0, sp, #48	@ 0x30
 801abd6:	f7f9 f925 	bl	8013e24 <uxr_serialize_READ_DATA_Payload>
 801abda:	4620      	mov	r0, r4
 801abdc:	b015      	add	sp, #84	@ 0x54
 801abde:	bd30      	pop	{r4, r5, pc}
 801abe0:	2208      	movs	r2, #8
 801abe2:	e7e2      	b.n	801abaa <uxr_buffer_request_data+0x36>

0801abe4 <uxr_buffer_cancel_data>:
 801abe4:	b510      	push	{r4, lr}
 801abe6:	b094      	sub	sp, #80	@ 0x50
 801abe8:	2300      	movs	r3, #0
 801abea:	9301      	str	r3, [sp, #4]
 801abec:	9205      	str	r2, [sp, #20]
 801abee:	f8ad 301c 	strh.w	r3, [sp, #28]
 801abf2:	2201      	movs	r2, #1
 801abf4:	f88d 301e 	strb.w	r3, [sp, #30]
 801abf8:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 801abfc:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 801ac00:	2308      	movs	r3, #8
 801ac02:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 801ac06:	9300      	str	r3, [sp, #0]
 801ac08:	2210      	movs	r2, #16
 801ac0a:	ab0c      	add	r3, sp, #48	@ 0x30
 801ac0c:	4604      	mov	r4, r0
 801ac0e:	f7f7 fce3 	bl	80125d8 <uxr_prepare_stream_to_write_submessage>
 801ac12:	b918      	cbnz	r0, 801ac1c <uxr_buffer_cancel_data+0x38>
 801ac14:	4604      	mov	r4, r0
 801ac16:	4620      	mov	r0, r4
 801ac18:	b014      	add	sp, #80	@ 0x50
 801ac1a:	bd10      	pop	{r4, pc}
 801ac1c:	9905      	ldr	r1, [sp, #20]
 801ac1e:	aa06      	add	r2, sp, #24
 801ac20:	4620      	mov	r0, r4
 801ac22:	f7f7 fe13 	bl	801284c <uxr_init_base_object_request>
 801ac26:	a906      	add	r1, sp, #24
 801ac28:	4604      	mov	r4, r0
 801ac2a:	a80c      	add	r0, sp, #48	@ 0x30
 801ac2c:	f7f9 f8fa 	bl	8013e24 <uxr_serialize_READ_DATA_Payload>
 801ac30:	4620      	mov	r0, r4
 801ac32:	b014      	add	sp, #80	@ 0x50
 801ac34:	bd10      	pop	{r4, pc}
 801ac36:	bf00      	nop

0801ac38 <read_submessage_format>:
 801ac38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ac3c:	b095      	sub	sp, #84	@ 0x54
 801ac3e:	f8bd 7078 	ldrh.w	r7, [sp, #120]	@ 0x78
 801ac42:	b113      	cbz	r3, 801ac4a <read_submessage_format+0x12>
 801ac44:	b015      	add	sp, #84	@ 0x54
 801ac46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ac4a:	460c      	mov	r4, r1
 801ac4c:	4616      	mov	r6, r2
 801ac4e:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 801ac52:	461d      	mov	r5, r3
 801ac54:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801ac56:	9304      	str	r3, [sp, #16]
 801ac58:	1a52      	subs	r2, r2, r1
 801ac5a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801ac5c:	9305      	str	r3, [sp, #20]
 801ac5e:	4680      	mov	r8, r0
 801ac60:	a80c      	add	r0, sp, #48	@ 0x30
 801ac62:	f89d 9076 	ldrb.w	r9, [sp, #118]	@ 0x76
 801ac66:	f7f6 fab7 	bl	80111d8 <ucdr_init_buffer>
 801ac6a:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801ac6e:	a80c      	add	r0, sp, #48	@ 0x30
 801ac70:	f7f6 fa86 	bl	8011180 <ucdr_set_on_full_buffer_callback>
 801ac74:	69e3      	ldr	r3, [r4, #28]
 801ac76:	b35b      	cbz	r3, 801acd0 <read_submessage_format+0x98>
 801ac78:	f1b9 0f07 	cmp.w	r9, #7
 801ac7c:	751d      	strb	r5, [r3, #20]
 801ac7e:	d043      	beq.n	801ad08 <read_submessage_format+0xd0>
 801ac80:	f1b9 0f08 	cmp.w	r9, #8
 801ac84:	d032      	beq.n	801acec <read_submessage_format+0xb4>
 801ac86:	f1b9 0f06 	cmp.w	r9, #6
 801ac8a:	d008      	beq.n	801ac9e <read_submessage_format+0x66>
 801ac8c:	2201      	movs	r2, #1
 801ac8e:	751a      	strb	r2, [r3, #20]
 801ac90:	4631      	mov	r1, r6
 801ac92:	4620      	mov	r0, r4
 801ac94:	f7f6 faf0 	bl	8011278 <ucdr_advance_buffer>
 801ac98:	b015      	add	sp, #84	@ 0x54
 801ac9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ac9e:	f8d8 5088 	ldr.w	r5, [r8, #136]	@ 0x88
 801aca2:	2d00      	cmp	r5, #0
 801aca4:	d0f2      	beq.n	801ac8c <read_submessage_format+0x54>
 801aca6:	ab0c      	add	r3, sp, #48	@ 0x30
 801aca8:	e9cd 3600 	strd	r3, r6, [sp]
 801acac:	2306      	movs	r3, #6
 801acae:	f88d 3016 	strb.w	r3, [sp, #22]
 801acb2:	f8d8 308c 	ldr.w	r3, [r8, #140]	@ 0x8c
 801acb6:	9302      	str	r3, [sp, #8]
 801acb8:	463a      	mov	r2, r7
 801acba:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 801acbe:	4640      	mov	r0, r8
 801acc0:	47a8      	blx	r5
 801acc2:	69e3      	ldr	r3, [r4, #28]
 801acc4:	2201      	movs	r2, #1
 801acc6:	f888 20b4 	strb.w	r2, [r8, #180]	@ 0xb4
 801acca:	2b00      	cmp	r3, #0
 801accc:	d1de      	bne.n	801ac8c <read_submessage_format+0x54>
 801acce:	e7df      	b.n	801ac90 <read_submessage_format+0x58>
 801acd0:	f1b9 0f07 	cmp.w	r9, #7
 801acd4:	d032      	beq.n	801ad3c <read_submessage_format+0x104>
 801acd6:	f1b9 0f08 	cmp.w	r9, #8
 801acda:	d02a      	beq.n	801ad32 <read_submessage_format+0xfa>
 801acdc:	f1b9 0f06 	cmp.w	r9, #6
 801ace0:	d1d6      	bne.n	801ac90 <read_submessage_format+0x58>
 801ace2:	f8d8 5088 	ldr.w	r5, [r8, #136]	@ 0x88
 801ace6:	2d00      	cmp	r5, #0
 801ace8:	d1dd      	bne.n	801aca6 <read_submessage_format+0x6e>
 801acea:	e7d1      	b.n	801ac90 <read_submessage_format+0x58>
 801acec:	f8d8 20a4 	ldr.w	r2, [r8, #164]	@ 0xa4
 801acf0:	2a00      	cmp	r2, #0
 801acf2:	d0cb      	beq.n	801ac8c <read_submessage_format+0x54>
 801acf4:	a906      	add	r1, sp, #24
 801acf6:	a80c      	add	r0, sp, #48	@ 0x30
 801acf8:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 801acfa:	f7f9 f959 	bl	8013fb0 <uxr_deserialize_SampleIdentity>
 801acfe:	bb28      	cbnz	r0, 801ad4c <read_submessage_format+0x114>
 801ad00:	69e3      	ldr	r3, [r4, #28]
 801ad02:	2b00      	cmp	r3, #0
 801ad04:	d1c2      	bne.n	801ac8c <read_submessage_format+0x54>
 801ad06:	e7c3      	b.n	801ac90 <read_submessage_format+0x58>
 801ad08:	f8d8 20ac 	ldr.w	r2, [r8, #172]	@ 0xac
 801ad0c:	b16a      	cbz	r2, 801ad2a <read_submessage_format+0xf2>
 801ad0e:	a906      	add	r1, sp, #24
 801ad10:	a80c      	add	r0, sp, #48	@ 0x30
 801ad12:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 801ad14:	f7f8 fe3a 	bl	801398c <uxr_deserialize_BaseObjectRequest>
 801ad18:	2800      	cmp	r0, #0
 801ad1a:	d13a      	bne.n	801ad92 <read_submessage_format+0x15a>
 801ad1c:	68a2      	ldr	r2, [r4, #8]
 801ad1e:	69e3      	ldr	r3, [r4, #28]
 801ad20:	4432      	add	r2, r6
 801ad22:	60a2      	str	r2, [r4, #8]
 801ad24:	2b00      	cmp	r3, #0
 801ad26:	d1b1      	bne.n	801ac8c <read_submessage_format+0x54>
 801ad28:	e7b2      	b.n	801ac90 <read_submessage_format+0x58>
 801ad2a:	68a2      	ldr	r2, [r4, #8]
 801ad2c:	4432      	add	r2, r6
 801ad2e:	60a2      	str	r2, [r4, #8]
 801ad30:	e7ac      	b.n	801ac8c <read_submessage_format+0x54>
 801ad32:	f8d8 30a4 	ldr.w	r3, [r8, #164]	@ 0xa4
 801ad36:	2b00      	cmp	r3, #0
 801ad38:	d1dc      	bne.n	801acf4 <read_submessage_format+0xbc>
 801ad3a:	e7a9      	b.n	801ac90 <read_submessage_format+0x58>
 801ad3c:	f8d8 30ac 	ldr.w	r3, [r8, #172]	@ 0xac
 801ad40:	2b00      	cmp	r3, #0
 801ad42:	d1e4      	bne.n	801ad0e <read_submessage_format+0xd6>
 801ad44:	68a3      	ldr	r3, [r4, #8]
 801ad46:	4433      	add	r3, r6
 801ad48:	60a3      	str	r3, [r4, #8]
 801ad4a:	e7a1      	b.n	801ac90 <read_submessage_format+0x58>
 801ad4c:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 801ad50:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801ad52:	1a52      	subs	r2, r2, r1
 801ad54:	1aed      	subs	r5, r5, r3
 801ad56:	a80c      	add	r0, sp, #48	@ 0x30
 801ad58:	f7f6 fa3e 	bl	80111d8 <ucdr_init_buffer>
 801ad5c:	4435      	add	r5, r6
 801ad5e:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801ad62:	a80c      	add	r0, sp, #48	@ 0x30
 801ad64:	f7f6 fa0c 	bl	8011180 <ucdr_set_on_full_buffer_callback>
 801ad68:	b2ad      	uxth	r5, r5
 801ad6a:	ab0c      	add	r3, sp, #48	@ 0x30
 801ad6c:	9300      	str	r3, [sp, #0]
 801ad6e:	9501      	str	r5, [sp, #4]
 801ad70:	2108      	movs	r1, #8
 801ad72:	f88d 1016 	strb.w	r1, [sp, #22]
 801ad76:	f8d8 10a8 	ldr.w	r1, [r8, #168]	@ 0xa8
 801ad7a:	9102      	str	r1, [sp, #8]
 801ad7c:	ab06      	add	r3, sp, #24
 801ad7e:	f8d8 50a4 	ldr.w	r5, [r8, #164]	@ 0xa4
 801ad82:	9905      	ldr	r1, [sp, #20]
 801ad84:	463a      	mov	r2, r7
 801ad86:	4640      	mov	r0, r8
 801ad88:	47a8      	blx	r5
 801ad8a:	2301      	movs	r3, #1
 801ad8c:	f888 30b4 	strb.w	r3, [r8, #180]	@ 0xb4
 801ad90:	e7b6      	b.n	801ad00 <read_submessage_format+0xc8>
 801ad92:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 801ad96:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801ad98:	1a52      	subs	r2, r2, r1
 801ad9a:	1aed      	subs	r5, r5, r3
 801ad9c:	a80c      	add	r0, sp, #48	@ 0x30
 801ad9e:	f7f6 fa1b 	bl	80111d8 <ucdr_init_buffer>
 801ada2:	4435      	add	r5, r6
 801ada4:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801ada8:	a80c      	add	r0, sp, #48	@ 0x30
 801adaa:	f7f6 f9e9 	bl	8011180 <ucdr_set_on_full_buffer_callback>
 801adae:	b2ad      	uxth	r5, r5
 801adb0:	ab0c      	add	r3, sp, #48	@ 0x30
 801adb2:	9300      	str	r3, [sp, #0]
 801adb4:	9501      	str	r5, [sp, #4]
 801adb6:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 801adba:	2107      	movs	r1, #7
 801adbc:	f88d 1016 	strb.w	r1, [sp, #22]
 801adc0:	f8d8 10b0 	ldr.w	r1, [r8, #176]	@ 0xb0
 801adc4:	9102      	str	r1, [sp, #8]
 801adc6:	ba5b      	rev16	r3, r3
 801adc8:	b29b      	uxth	r3, r3
 801adca:	f8d8 50ac 	ldr.w	r5, [r8, #172]	@ 0xac
 801adce:	9905      	ldr	r1, [sp, #20]
 801add0:	463a      	mov	r2, r7
 801add2:	4640      	mov	r0, r8
 801add4:	47a8      	blx	r5
 801add6:	2301      	movs	r3, #1
 801add8:	f888 30b4 	strb.w	r3, [r8, #180]	@ 0xb4
 801addc:	e79e      	b.n	801ad1c <read_submessage_format+0xe4>
 801adde:	bf00      	nop

0801ade0 <uxr_seq_num_add>:
 801ade0:	4408      	add	r0, r1
 801ade2:	b280      	uxth	r0, r0
 801ade4:	4770      	bx	lr
 801ade6:	bf00      	nop

0801ade8 <uxr_seq_num_sub>:
 801ade8:	1a40      	subs	r0, r0, r1
 801adea:	b280      	uxth	r0, r0
 801adec:	4770      	bx	lr
 801adee:	bf00      	nop

0801adf0 <uxr_seq_num_cmp>:
 801adf0:	4288      	cmp	r0, r1
 801adf2:	d010      	beq.n	801ae16 <uxr_seq_num_cmp+0x26>
 801adf4:	d207      	bcs.n	801ae06 <uxr_seq_num_cmp+0x16>
 801adf6:	1a09      	subs	r1, r1, r0
 801adf8:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 801adfc:	bfb4      	ite	lt
 801adfe:	f04f 30ff 	movlt.w	r0, #4294967295	@ 0xffffffff
 801ae02:	2001      	movge	r0, #1
 801ae04:	4770      	bx	lr
 801ae06:	1a41      	subs	r1, r0, r1
 801ae08:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 801ae0c:	bfcc      	ite	gt
 801ae0e:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 801ae12:	2001      	movle	r0, #1
 801ae14:	4770      	bx	lr
 801ae16:	2000      	movs	r0, #0
 801ae18:	4770      	bx	lr
 801ae1a:	bf00      	nop

0801ae1c <uxr_init_framing_io>:
 801ae1c:	2300      	movs	r3, #0
 801ae1e:	7041      	strb	r1, [r0, #1]
 801ae20:	7003      	strb	r3, [r0, #0]
 801ae22:	8583      	strh	r3, [r0, #44]	@ 0x2c
 801ae24:	4770      	bx	lr
 801ae26:	bf00      	nop

0801ae28 <uxr_write_framed_msg>:
 801ae28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ae2c:	f890 c001 	ldrb.w	ip, [r0, #1]
 801ae30:	4617      	mov	r7, r2
 801ae32:	227e      	movs	r2, #126	@ 0x7e
 801ae34:	b085      	sub	sp, #20
 801ae36:	f880 2038 	strb.w	r2, [r0, #56]	@ 0x38
 801ae3a:	f1ac 027d 	sub.w	r2, ip, #125	@ 0x7d
 801ae3e:	2a01      	cmp	r2, #1
 801ae40:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 801ae44:	f89d 503c 	ldrb.w	r5, [sp, #60]	@ 0x3c
 801ae48:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 801ae4c:	4604      	mov	r4, r0
 801ae4e:	460e      	mov	r6, r1
 801ae50:	469a      	mov	sl, r3
 801ae52:	f240 812e 	bls.w	801b0b2 <uxr_write_framed_msg+0x28a>
 801ae56:	2003      	movs	r0, #3
 801ae58:	2102      	movs	r1, #2
 801ae5a:	f04f 0905 	mov.w	r9, #5
 801ae5e:	2204      	movs	r2, #4
 801ae60:	4686      	mov	lr, r0
 801ae62:	460b      	mov	r3, r1
 801ae64:	f884 c039 	strb.w	ip, [r4, #57]	@ 0x39
 801ae68:	f1a5 0c7d 	sub.w	ip, r5, #125	@ 0x7d
 801ae6c:	f1bc 0f01 	cmp.w	ip, #1
 801ae70:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 801ae74:	4421      	add	r1, r4
 801ae76:	f240 8110 	bls.w	801b09a <uxr_write_framed_msg+0x272>
 801ae7a:	f881 5038 	strb.w	r5, [r1, #56]	@ 0x38
 801ae7e:	fa5f fc8b 	uxtb.w	ip, fp
 801ae82:	f3cb 2107 	ubfx	r1, fp, #8, #8
 801ae86:	f1ac 0e7d 	sub.w	lr, ip, #125	@ 0x7d
 801ae8a:	f1a1 057d 	sub.w	r5, r1, #125	@ 0x7d
 801ae8e:	f1be 0f01 	cmp.w	lr, #1
 801ae92:	f884 0062 	strb.w	r0, [r4, #98]	@ 0x62
 801ae96:	b2ed      	uxtb	r5, r5
 801ae98:	d94c      	bls.n	801af34 <uxr_write_framed_msg+0x10c>
 801ae9a:	4420      	add	r0, r4
 801ae9c:	2d01      	cmp	r5, #1
 801ae9e:	f880 c038 	strb.w	ip, [r0, #56]	@ 0x38
 801aea2:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801aea6:	d95d      	bls.n	801af64 <uxr_write_framed_msg+0x13c>
 801aea8:	18a0      	adds	r0, r4, r2
 801aeaa:	3201      	adds	r2, #1
 801aeac:	b2d2      	uxtb	r2, r2
 801aeae:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 801aeb2:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801aeb6:	f1bb 0f00 	cmp.w	fp, #0
 801aeba:	f000 8108 	beq.w	801b0ce <uxr_write_framed_msg+0x2a6>
 801aebe:	f04f 0c00 	mov.w	ip, #0
 801aec2:	4661      	mov	r1, ip
 801aec4:	46de      	mov	lr, fp
 801aec6:	46e3      	mov	fp, ip
 801aec8:	46d4      	mov	ip, sl
 801aeca:	468a      	mov	sl, r1
 801aecc:	f8df 9208 	ldr.w	r9, [pc, #520]	@ 801b0d8 <uxr_write_framed_msg+0x2b0>
 801aed0:	f81c 300a 	ldrb.w	r3, [ip, sl]
 801aed4:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 801aed8:	2901      	cmp	r1, #1
 801aeda:	d91b      	bls.n	801af14 <uxr_write_framed_msg+0xec>
 801aedc:	2a29      	cmp	r2, #41	@ 0x29
 801aede:	d84e      	bhi.n	801af7e <uxr_write_framed_msg+0x156>
 801aee0:	18a1      	adds	r1, r4, r2
 801aee2:	3201      	adds	r2, #1
 801aee4:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 801aee8:	b2d2      	uxtb	r2, r2
 801aeea:	ea8b 0303 	eor.w	r3, fp, r3
 801aeee:	b2db      	uxtb	r3, r3
 801aef0:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801aef4:	f839 3013 	ldrh.w	r3, [r9, r3, lsl #1]
 801aef8:	f10a 0a01 	add.w	sl, sl, #1
 801aefc:	ea83 2b1b 	eor.w	fp, r3, fp, lsr #8
 801af00:	45d6      	cmp	lr, sl
 801af02:	d95a      	bls.n	801afba <uxr_write_framed_msg+0x192>
 801af04:	f81c 300a 	ldrb.w	r3, [ip, sl]
 801af08:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801af0c:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 801af10:	2901      	cmp	r1, #1
 801af12:	d8e3      	bhi.n	801aedc <uxr_write_framed_msg+0xb4>
 801af14:	1c51      	adds	r1, r2, #1
 801af16:	b2c9      	uxtb	r1, r1
 801af18:	2929      	cmp	r1, #41	@ 0x29
 801af1a:	d830      	bhi.n	801af7e <uxr_write_framed_msg+0x156>
 801af1c:	18a1      	adds	r1, r4, r2
 801af1e:	f04f 007d 	mov.w	r0, #125	@ 0x7d
 801af22:	3202      	adds	r2, #2
 801af24:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 801af28:	f083 0020 	eor.w	r0, r3, #32
 801af2c:	b2d2      	uxtb	r2, r2
 801af2e:	f881 0039 	strb.w	r0, [r1, #57]	@ 0x39
 801af32:	e7da      	b.n	801aeea <uxr_write_framed_msg+0xc2>
 801af34:	eb04 0e00 	add.w	lr, r4, r0
 801af38:	f08c 0c20 	eor.w	ip, ip, #32
 801af3c:	1c82      	adds	r2, r0, #2
 801af3e:	f88e c039 	strb.w	ip, [lr, #57]	@ 0x39
 801af42:	b2d2      	uxtb	r2, r2
 801af44:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 801af48:	2d01      	cmp	r5, #1
 801af4a:	f88e c038 	strb.w	ip, [lr, #56]	@ 0x38
 801af4e:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801af52:	d907      	bls.n	801af64 <uxr_write_framed_msg+0x13c>
 801af54:	4422      	add	r2, r4
 801af56:	3003      	adds	r0, #3
 801af58:	f882 1038 	strb.w	r1, [r2, #56]	@ 0x38
 801af5c:	b2c2      	uxtb	r2, r0
 801af5e:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801af62:	e7ac      	b.n	801aebe <uxr_write_framed_msg+0x96>
 801af64:	18a0      	adds	r0, r4, r2
 801af66:	f081 0120 	eor.w	r1, r1, #32
 801af6a:	3202      	adds	r2, #2
 801af6c:	f880 1039 	strb.w	r1, [r0, #57]	@ 0x39
 801af70:	b2d2      	uxtb	r2, r2
 801af72:	217d      	movs	r1, #125	@ 0x7d
 801af74:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 801af78:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801af7c:	e79f      	b.n	801aebe <uxr_write_framed_msg+0x96>
 801af7e:	e9cd ba00 	strd	fp, sl, [sp]
 801af82:	2500      	movs	r5, #0
 801af84:	46e2      	mov	sl, ip
 801af86:	46f3      	mov	fp, lr
 801af88:	e000      	b.n	801af8c <uxr_write_framed_msg+0x164>
 801af8a:	b190      	cbz	r0, 801afb2 <uxr_write_framed_msg+0x18a>
 801af8c:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 801af90:	1b52      	subs	r2, r2, r5
 801af92:	4643      	mov	r3, r8
 801af94:	4421      	add	r1, r4
 801af96:	4638      	mov	r0, r7
 801af98:	47b0      	blx	r6
 801af9a:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801af9e:	4405      	add	r5, r0
 801afa0:	4295      	cmp	r5, r2
 801afa2:	d3f2      	bcc.n	801af8a <uxr_write_framed_msg+0x162>
 801afa4:	46d4      	mov	ip, sl
 801afa6:	46de      	mov	lr, fp
 801afa8:	f8dd a004 	ldr.w	sl, [sp, #4]
 801afac:	f8dd b000 	ldr.w	fp, [sp]
 801afb0:	d06f      	beq.n	801b092 <uxr_write_framed_msg+0x26a>
 801afb2:	2000      	movs	r0, #0
 801afb4:	b005      	add	sp, #20
 801afb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801afba:	46dc      	mov	ip, fp
 801afbc:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801afc0:	f8ad c00c 	strh.w	ip, [sp, #12]
 801afc4:	46f3      	mov	fp, lr
 801afc6:	fa5f fc8c 	uxtb.w	ip, ip
 801afca:	f1ac 037d 	sub.w	r3, ip, #125	@ 0x7d
 801afce:	2b01      	cmp	r3, #1
 801afd0:	f04f 0900 	mov.w	r9, #0
 801afd4:	f04f 0a7d 	mov.w	sl, #125	@ 0x7d
 801afd8:	d930      	bls.n	801b03c <uxr_write_framed_msg+0x214>
 801afda:	2a29      	cmp	r2, #41	@ 0x29
 801afdc:	d91c      	bls.n	801b018 <uxr_write_framed_msg+0x1f0>
 801afde:	2500      	movs	r5, #0
 801afe0:	e001      	b.n	801afe6 <uxr_write_framed_msg+0x1be>
 801afe2:	2800      	cmp	r0, #0
 801afe4:	d0e5      	beq.n	801afb2 <uxr_write_framed_msg+0x18a>
 801afe6:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 801afea:	1b52      	subs	r2, r2, r5
 801afec:	4643      	mov	r3, r8
 801afee:	4421      	add	r1, r4
 801aff0:	4638      	mov	r0, r7
 801aff2:	47b0      	blx	r6
 801aff4:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801aff8:	4405      	add	r5, r0
 801affa:	4295      	cmp	r5, r2
 801affc:	d3f1      	bcc.n	801afe2 <uxr_write_framed_msg+0x1ba>
 801affe:	d1d8      	bne.n	801afb2 <uxr_write_framed_msg+0x18a>
 801b000:	f109 0310 	add.w	r3, r9, #16
 801b004:	446b      	add	r3, sp
 801b006:	2200      	movs	r2, #0
 801b008:	f813 cc04 	ldrb.w	ip, [r3, #-4]
 801b00c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801b010:	f1ac 037d 	sub.w	r3, ip, #125	@ 0x7d
 801b014:	2b01      	cmp	r3, #1
 801b016:	d911      	bls.n	801b03c <uxr_write_framed_msg+0x214>
 801b018:	18a3      	adds	r3, r4, r2
 801b01a:	3201      	adds	r2, #1
 801b01c:	b2d2      	uxtb	r2, r2
 801b01e:	f883 c038 	strb.w	ip, [r3, #56]	@ 0x38
 801b022:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801b026:	f1b9 0f00 	cmp.w	r9, #0
 801b02a:	d119      	bne.n	801b060 <uxr_write_framed_msg+0x238>
 801b02c:	f89d c00d 	ldrb.w	ip, [sp, #13]
 801b030:	f1ac 037d 	sub.w	r3, ip, #125	@ 0x7d
 801b034:	2b01      	cmp	r3, #1
 801b036:	f04f 0901 	mov.w	r9, #1
 801b03a:	d8ce      	bhi.n	801afda <uxr_write_framed_msg+0x1b2>
 801b03c:	1c53      	adds	r3, r2, #1
 801b03e:	b2db      	uxtb	r3, r3
 801b040:	2b29      	cmp	r3, #41	@ 0x29
 801b042:	d8cc      	bhi.n	801afde <uxr_write_framed_msg+0x1b6>
 801b044:	18a3      	adds	r3, r4, r2
 801b046:	3202      	adds	r2, #2
 801b048:	f08c 0c20 	eor.w	ip, ip, #32
 801b04c:	b2d2      	uxtb	r2, r2
 801b04e:	f883 c039 	strb.w	ip, [r3, #57]	@ 0x39
 801b052:	f883 a038 	strb.w	sl, [r3, #56]	@ 0x38
 801b056:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801b05a:	f1b9 0f00 	cmp.w	r9, #0
 801b05e:	d0e5      	beq.n	801b02c <uxr_write_framed_msg+0x204>
 801b060:	2500      	movs	r5, #0
 801b062:	e001      	b.n	801b068 <uxr_write_framed_msg+0x240>
 801b064:	2800      	cmp	r0, #0
 801b066:	d0a4      	beq.n	801afb2 <uxr_write_framed_msg+0x18a>
 801b068:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 801b06c:	1b52      	subs	r2, r2, r5
 801b06e:	4643      	mov	r3, r8
 801b070:	4421      	add	r1, r4
 801b072:	4638      	mov	r0, r7
 801b074:	47b0      	blx	r6
 801b076:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801b07a:	4405      	add	r5, r0
 801b07c:	4295      	cmp	r5, r2
 801b07e:	d3f1      	bcc.n	801b064 <uxr_write_framed_msg+0x23c>
 801b080:	d197      	bne.n	801afb2 <uxr_write_framed_msg+0x18a>
 801b082:	2300      	movs	r3, #0
 801b084:	fa1f f08b 	uxth.w	r0, fp
 801b088:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 801b08c:	b005      	add	sp, #20
 801b08e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b092:	2300      	movs	r3, #0
 801b094:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 801b098:	e732      	b.n	801af00 <uxr_write_framed_msg+0xd8>
 801b09a:	44a6      	add	lr, r4
 801b09c:	f085 0520 	eor.w	r5, r5, #32
 801b0a0:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 801b0a4:	4610      	mov	r0, r2
 801b0a6:	f881 c038 	strb.w	ip, [r1, #56]	@ 0x38
 801b0aa:	464a      	mov	r2, r9
 801b0ac:	f88e 5038 	strb.w	r5, [lr, #56]	@ 0x38
 801b0b0:	e6e5      	b.n	801ae7e <uxr_write_framed_msg+0x56>
 801b0b2:	f08c 0c20 	eor.w	ip, ip, #32
 801b0b6:	f880 c03a 	strb.w	ip, [r0, #58]	@ 0x3a
 801b0ba:	2103      	movs	r1, #3
 801b0bc:	2004      	movs	r0, #4
 801b0be:	f04f 0906 	mov.w	r9, #6
 801b0c2:	2205      	movs	r2, #5
 801b0c4:	4686      	mov	lr, r0
 801b0c6:	460b      	mov	r3, r1
 801b0c8:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 801b0cc:	e6ca      	b.n	801ae64 <uxr_write_framed_msg+0x3c>
 801b0ce:	f8ad b00c 	strh.w	fp, [sp, #12]
 801b0d2:	46dc      	mov	ip, fp
 801b0d4:	e779      	b.n	801afca <uxr_write_framed_msg+0x1a2>
 801b0d6:	bf00      	nop
 801b0d8:	0802067c 	.word	0x0802067c

0801b0dc <uxr_framing_read_transport>:
 801b0dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b0e0:	4604      	mov	r4, r0
 801b0e2:	b083      	sub	sp, #12
 801b0e4:	461f      	mov	r7, r3
 801b0e6:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 801b0ea:	4689      	mov	r9, r1
 801b0ec:	4692      	mov	sl, r2
 801b0ee:	f7f7 fd3d 	bl	8012b6c <uxr_millis>
 801b0f2:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 801b0f6:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 801b0fa:	42b3      	cmp	r3, r6
 801b0fc:	4680      	mov	r8, r0
 801b0fe:	d062      	beq.n	801b1c6 <uxr_framing_read_transport+0xea>
 801b100:	d81c      	bhi.n	801b13c <uxr_framing_read_transport+0x60>
 801b102:	1e75      	subs	r5, r6, #1
 801b104:	1aed      	subs	r5, r5, r3
 801b106:	b2ed      	uxtb	r5, r5
 801b108:	2600      	movs	r6, #0
 801b10a:	455d      	cmp	r5, fp
 801b10c:	d81f      	bhi.n	801b14e <uxr_framing_read_transport+0x72>
 801b10e:	19ab      	adds	r3, r5, r6
 801b110:	455b      	cmp	r3, fp
 801b112:	bf84      	itt	hi
 801b114:	ebab 0b05 	subhi.w	fp, fp, r5
 801b118:	fa5f f68b 	uxtbhi.w	r6, fp
 801b11c:	b9e5      	cbnz	r5, 801b158 <uxr_framing_read_transport+0x7c>
 801b11e:	f04f 0b00 	mov.w	fp, #0
 801b122:	f7f7 fd23 	bl	8012b6c <uxr_millis>
 801b126:	683b      	ldr	r3, [r7, #0]
 801b128:	eba0 0108 	sub.w	r1, r0, r8
 801b12c:	1a5b      	subs	r3, r3, r1
 801b12e:	4658      	mov	r0, fp
 801b130:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b134:	603b      	str	r3, [r7, #0]
 801b136:	b003      	add	sp, #12
 801b138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b13c:	2e00      	cmp	r6, #0
 801b13e:	d04a      	beq.n	801b1d6 <uxr_framing_read_transport+0xfa>
 801b140:	f1c3 032a 	rsb	r3, r3, #42	@ 0x2a
 801b144:	b2dd      	uxtb	r5, r3
 801b146:	3e01      	subs	r6, #1
 801b148:	455d      	cmp	r5, fp
 801b14a:	b2f6      	uxtb	r6, r6
 801b14c:	d9df      	bls.n	801b10e <uxr_framing_read_transport+0x32>
 801b14e:	fa5f f58b 	uxtb.w	r5, fp
 801b152:	2600      	movs	r6, #0
 801b154:	2d00      	cmp	r5, #0
 801b156:	d0e2      	beq.n	801b11e <uxr_framing_read_transport+0x42>
 801b158:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801b15c:	3102      	adds	r1, #2
 801b15e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b160:	9300      	str	r3, [sp, #0]
 801b162:	683b      	ldr	r3, [r7, #0]
 801b164:	4421      	add	r1, r4
 801b166:	462a      	mov	r2, r5
 801b168:	4650      	mov	r0, sl
 801b16a:	47c8      	blx	r9
 801b16c:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 801b170:	4a1b      	ldr	r2, [pc, #108]	@ (801b1e0 <uxr_framing_read_transport+0x104>)
 801b172:	4403      	add	r3, r0
 801b174:	0859      	lsrs	r1, r3, #1
 801b176:	4683      	mov	fp, r0
 801b178:	fba2 0101 	umull	r0, r1, r2, r1
 801b17c:	0889      	lsrs	r1, r1, #2
 801b17e:	222a      	movs	r2, #42	@ 0x2a
 801b180:	fb02 3111 	mls	r1, r2, r1, r3
 801b184:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 801b188:	f1bb 0f00 	cmp.w	fp, #0
 801b18c:	d0c7      	beq.n	801b11e <uxr_framing_read_transport+0x42>
 801b18e:	45ab      	cmp	fp, r5
 801b190:	d1c7      	bne.n	801b122 <uxr_framing_read_transport+0x46>
 801b192:	2e00      	cmp	r6, #0
 801b194:	d0c5      	beq.n	801b122 <uxr_framing_read_transport+0x46>
 801b196:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b198:	9300      	str	r3, [sp, #0]
 801b19a:	3102      	adds	r1, #2
 801b19c:	4632      	mov	r2, r6
 801b19e:	4421      	add	r1, r4
 801b1a0:	2300      	movs	r3, #0
 801b1a2:	4650      	mov	r0, sl
 801b1a4:	47c8      	blx	r9
 801b1a6:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 801b1aa:	4a0d      	ldr	r2, [pc, #52]	@ (801b1e0 <uxr_framing_read_transport+0x104>)
 801b1ac:	4403      	add	r3, r0
 801b1ae:	0859      	lsrs	r1, r3, #1
 801b1b0:	fba2 2101 	umull	r2, r1, r2, r1
 801b1b4:	0889      	lsrs	r1, r1, #2
 801b1b6:	222a      	movs	r2, #42	@ 0x2a
 801b1b8:	fb02 3311 	mls	r3, r2, r1, r3
 801b1bc:	eb00 0b05 	add.w	fp, r0, r5
 801b1c0:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 801b1c4:	e7ad      	b.n	801b122 <uxr_framing_read_transport+0x46>
 801b1c6:	2600      	movs	r6, #0
 801b1c8:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 801b1cc:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 801b1ce:	d9be      	bls.n	801b14e <uxr_framing_read_transport+0x72>
 801b1d0:	2529      	movs	r5, #41	@ 0x29
 801b1d2:	2102      	movs	r1, #2
 801b1d4:	e7c3      	b.n	801b15e <uxr_framing_read_transport+0x82>
 801b1d6:	f1c3 0329 	rsb	r3, r3, #41	@ 0x29
 801b1da:	b2dd      	uxtb	r5, r3
 801b1dc:	e795      	b.n	801b10a <uxr_framing_read_transport+0x2e>
 801b1de:	bf00      	nop
 801b1e0:	30c30c31 	.word	0x30c30c31

0801b1e4 <uxr_read_framed_msg>:
 801b1e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b1e8:	461d      	mov	r5, r3
 801b1ea:	f890 c02c 	ldrb.w	ip, [r0, #44]	@ 0x2c
 801b1ee:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 801b1f2:	b085      	sub	sp, #20
 801b1f4:	459c      	cmp	ip, r3
 801b1f6:	f8dd b044 	ldr.w	fp, [sp, #68]	@ 0x44
 801b1fa:	4604      	mov	r4, r0
 801b1fc:	460f      	mov	r7, r1
 801b1fe:	4616      	mov	r6, r2
 801b200:	f000 81ae 	beq.w	801b560 <uxr_read_framed_msg+0x37c>
 801b204:	2000      	movs	r0, #0
 801b206:	4639      	mov	r1, r7
 801b208:	2800      	cmp	r0, #0
 801b20a:	d138      	bne.n	801b27e <uxr_read_framed_msg+0x9a>
 801b20c:	468a      	mov	sl, r1
 801b20e:	7823      	ldrb	r3, [r4, #0]
 801b210:	2b07      	cmp	r3, #7
 801b212:	d8fd      	bhi.n	801b210 <uxr_read_framed_msg+0x2c>
 801b214:	e8df f013 	tbh	[pc, r3, lsl #1]
 801b218:	0116013b 	.word	0x0116013b
 801b21c:	00cd00f0 	.word	0x00cd00f0
 801b220:	005a00a0 	.word	0x005a00a0
 801b224:	00080037 	.word	0x00080037
 801b228:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 801b22c:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 801b230:	4290      	cmp	r0, r2
 801b232:	f000 8167 	beq.w	801b504 <uxr_read_framed_msg+0x320>
 801b236:	18a3      	adds	r3, r4, r2
 801b238:	1c57      	adds	r7, r2, #1
 801b23a:	49c7      	ldr	r1, [pc, #796]	@ (801b558 <uxr_read_framed_msg+0x374>)
 801b23c:	f893 c002 	ldrb.w	ip, [r3, #2]
 801b240:	087b      	lsrs	r3, r7, #1
 801b242:	fba1 8303 	umull	r8, r3, r1, r3
 801b246:	089b      	lsrs	r3, r3, #2
 801b248:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 801b24c:	fb08 7313 	mls	r3, r8, r3, r7
 801b250:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 801b254:	b2df      	uxtb	r7, r3
 801b256:	f000 81b2 	beq.w	801b5be <uxr_read_framed_msg+0x3da>
 801b25a:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 801b25e:	f884 702d 	strb.w	r7, [r4, #45]	@ 0x2d
 801b262:	f000 8220 	beq.w	801b6a6 <uxr_read_framed_msg+0x4c2>
 801b266:	4661      	mov	r1, ip
 801b268:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 801b26a:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 801b26c:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 801b270:	b29b      	uxth	r3, r3
 801b272:	2100      	movs	r1, #0
 801b274:	429a      	cmp	r2, r3
 801b276:	86a3      	strh	r3, [r4, #52]	@ 0x34
 801b278:	7021      	strb	r1, [r4, #0]
 801b27a:	f000 8198 	beq.w	801b5ae <uxr_read_framed_msg+0x3ca>
 801b27e:	2000      	movs	r0, #0
 801b280:	b005      	add	sp, #20
 801b282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b286:	f894 702c 	ldrb.w	r7, [r4, #44]	@ 0x2c
 801b28a:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 801b28e:	4297      	cmp	r7, r2
 801b290:	f000 8148 	beq.w	801b524 <uxr_read_framed_msg+0x340>
 801b294:	18a3      	adds	r3, r4, r2
 801b296:	f102 0c01 	add.w	ip, r2, #1
 801b29a:	49af      	ldr	r1, [pc, #700]	@ (801b558 <uxr_read_framed_msg+0x374>)
 801b29c:	7898      	ldrb	r0, [r3, #2]
 801b29e:	ea4f 035c 	mov.w	r3, ip, lsr #1
 801b2a2:	fba1 8303 	umull	r8, r3, r1, r3
 801b2a6:	089b      	lsrs	r3, r3, #2
 801b2a8:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 801b2ac:	fb08 c313 	mls	r3, r8, r3, ip
 801b2b0:	287d      	cmp	r0, #125	@ 0x7d
 801b2b2:	fa5f fc83 	uxtb.w	ip, r3
 801b2b6:	f000 8194 	beq.w	801b5e2 <uxr_read_framed_msg+0x3fe>
 801b2ba:	287e      	cmp	r0, #126	@ 0x7e
 801b2bc:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 801b2c0:	f000 8200 	beq.w	801b6c4 <uxr_read_framed_msg+0x4e0>
 801b2c4:	2307      	movs	r3, #7
 801b2c6:	86a0      	strh	r0, [r4, #52]	@ 0x34
 801b2c8:	7023      	strb	r3, [r4, #0]
 801b2ca:	e7a0      	b.n	801b20e <uxr_read_framed_msg+0x2a>
 801b2cc:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 801b2ce:	8e27      	ldrh	r7, [r4, #48]	@ 0x30
 801b2d0:	429f      	cmp	r7, r3
 801b2d2:	f240 8164 	bls.w	801b59e <uxr_read_framed_msg+0x3ba>
 801b2d6:	f8df 9280 	ldr.w	r9, [pc, #640]	@ 801b558 <uxr_read_framed_msg+0x374>
 801b2da:	f8cd a00c 	str.w	sl, [sp, #12]
 801b2de:	212a      	movs	r1, #42	@ 0x2a
 801b2e0:	e01f      	b.n	801b322 <uxr_read_framed_msg+0x13e>
 801b2e2:	f89a e002 	ldrb.w	lr, [sl, #2]
 801b2e6:	f1be 0f7d 	cmp.w	lr, #125	@ 0x7d
 801b2ea:	f000 80ea 	beq.w	801b4c2 <uxr_read_framed_msg+0x2de>
 801b2ee:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 801b2f2:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 801b2f6:	f000 8142 	beq.w	801b57e <uxr_read_framed_msg+0x39a>
 801b2fa:	f805 e003 	strb.w	lr, [r5, r3]
 801b2fe:	8ee0      	ldrh	r0, [r4, #54]	@ 0x36
 801b300:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 801b302:	4f96      	ldr	r7, [pc, #600]	@ (801b55c <uxr_read_framed_msg+0x378>)
 801b304:	ea80 020e 	eor.w	r2, r0, lr
 801b308:	b2d2      	uxtb	r2, r2
 801b30a:	3301      	adds	r3, #1
 801b30c:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 801b310:	8e27      	ldrh	r7, [r4, #48]	@ 0x30
 801b312:	b29b      	uxth	r3, r3
 801b314:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 801b318:	42bb      	cmp	r3, r7
 801b31a:	8663      	strh	r3, [r4, #50]	@ 0x32
 801b31c:	86e2      	strh	r2, [r4, #54]	@ 0x36
 801b31e:	f080 80e7 	bcs.w	801b4f0 <uxr_read_framed_msg+0x30c>
 801b322:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 801b326:	f894 802c 	ldrb.w	r8, [r4, #44]	@ 0x2c
 801b32a:	f100 0c01 	add.w	ip, r0, #1
 801b32e:	ea4f 0e5c 	mov.w	lr, ip, lsr #1
 801b332:	fba9 e20e 	umull	lr, r2, r9, lr
 801b336:	0892      	lsrs	r2, r2, #2
 801b338:	fb01 c212 	mls	r2, r1, r2, ip
 801b33c:	4580      	cmp	r8, r0
 801b33e:	eb04 0a00 	add.w	sl, r4, r0
 801b342:	fa5f fc82 	uxtb.w	ip, r2
 801b346:	d1cc      	bne.n	801b2e2 <uxr_read_framed_msg+0xfe>
 801b348:	42bb      	cmp	r3, r7
 801b34a:	f8dd a00c 	ldr.w	sl, [sp, #12]
 801b34e:	f040 8128 	bne.w	801b5a2 <uxr_read_framed_msg+0x3be>
 801b352:	2306      	movs	r3, #6
 801b354:	7023      	strb	r3, [r4, #0]
 801b356:	e75a      	b.n	801b20e <uxr_read_framed_msg+0x2a>
 801b358:	f894 702c 	ldrb.w	r7, [r4, #44]	@ 0x2c
 801b35c:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 801b360:	4297      	cmp	r7, r2
 801b362:	f000 80cf 	beq.w	801b504 <uxr_read_framed_msg+0x320>
 801b366:	18a3      	adds	r3, r4, r2
 801b368:	f102 0c01 	add.w	ip, r2, #1
 801b36c:	497a      	ldr	r1, [pc, #488]	@ (801b558 <uxr_read_framed_msg+0x374>)
 801b36e:	7898      	ldrb	r0, [r3, #2]
 801b370:	ea4f 035c 	mov.w	r3, ip, lsr #1
 801b374:	fba1 8303 	umull	r8, r3, r1, r3
 801b378:	089b      	lsrs	r3, r3, #2
 801b37a:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 801b37e:	fb08 c313 	mls	r3, r8, r3, ip
 801b382:	287d      	cmp	r0, #125	@ 0x7d
 801b384:	fa5f fc83 	uxtb.w	ip, r3
 801b388:	f000 813d 	beq.w	801b606 <uxr_read_framed_msg+0x422>
 801b38c:	287e      	cmp	r0, #126	@ 0x7e
 801b38e:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 801b392:	f000 8188 	beq.w	801b6a6 <uxr_read_framed_msg+0x4c2>
 801b396:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 801b398:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801b39a:	eb03 2300 	add.w	r3, r3, r0, lsl #8
 801b39e:	b29b      	uxth	r3, r3
 801b3a0:	2200      	movs	r2, #0
 801b3a2:	428b      	cmp	r3, r1
 801b3a4:	8623      	strh	r3, [r4, #48]	@ 0x30
 801b3a6:	8662      	strh	r2, [r4, #50]	@ 0x32
 801b3a8:	86e2      	strh	r2, [r4, #54]	@ 0x36
 801b3aa:	f240 80f5 	bls.w	801b598 <uxr_read_framed_msg+0x3b4>
 801b3ae:	7022      	strb	r2, [r4, #0]
 801b3b0:	e765      	b.n	801b27e <uxr_read_framed_msg+0x9a>
 801b3b2:	f894 702c 	ldrb.w	r7, [r4, #44]	@ 0x2c
 801b3b6:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 801b3ba:	4297      	cmp	r7, r2
 801b3bc:	f000 80b2 	beq.w	801b524 <uxr_read_framed_msg+0x340>
 801b3c0:	18a3      	adds	r3, r4, r2
 801b3c2:	f102 0c01 	add.w	ip, r2, #1
 801b3c6:	4964      	ldr	r1, [pc, #400]	@ (801b558 <uxr_read_framed_msg+0x374>)
 801b3c8:	7898      	ldrb	r0, [r3, #2]
 801b3ca:	ea4f 035c 	mov.w	r3, ip, lsr #1
 801b3ce:	fba1 8303 	umull	r8, r3, r1, r3
 801b3d2:	089b      	lsrs	r3, r3, #2
 801b3d4:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 801b3d8:	fb08 c313 	mls	r3, r8, r3, ip
 801b3dc:	287d      	cmp	r0, #125	@ 0x7d
 801b3de:	fa5f fc83 	uxtb.w	ip, r3
 801b3e2:	f000 813b 	beq.w	801b65c <uxr_read_framed_msg+0x478>
 801b3e6:	287e      	cmp	r0, #126	@ 0x7e
 801b3e8:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 801b3ec:	f000 816a 	beq.w	801b6c4 <uxr_read_framed_msg+0x4e0>
 801b3f0:	2304      	movs	r3, #4
 801b3f2:	8620      	strh	r0, [r4, #48]	@ 0x30
 801b3f4:	7023      	strb	r3, [r4, #0]
 801b3f6:	e70a      	b.n	801b20e <uxr_read_framed_msg+0x2a>
 801b3f8:	f894 702c 	ldrb.w	r7, [r4, #44]	@ 0x2c
 801b3fc:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 801b400:	4297      	cmp	r7, r2
 801b402:	f000 80c4 	beq.w	801b58e <uxr_read_framed_msg+0x3aa>
 801b406:	18a3      	adds	r3, r4, r2
 801b408:	f102 0c01 	add.w	ip, r2, #1
 801b40c:	4952      	ldr	r1, [pc, #328]	@ (801b558 <uxr_read_framed_msg+0x374>)
 801b40e:	7898      	ldrb	r0, [r3, #2]
 801b410:	ea4f 035c 	mov.w	r3, ip, lsr #1
 801b414:	fba1 8303 	umull	r8, r3, r1, r3
 801b418:	089b      	lsrs	r3, r3, #2
 801b41a:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 801b41e:	fb08 c313 	mls	r3, r8, r3, ip
 801b422:	287d      	cmp	r0, #125	@ 0x7d
 801b424:	fa5f fc83 	uxtb.w	ip, r3
 801b428:	f000 812b 	beq.w	801b682 <uxr_read_framed_msg+0x49e>
 801b42c:	287e      	cmp	r0, #126	@ 0x7e
 801b42e:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 801b432:	f000 8155 	beq.w	801b6e0 <uxr_read_framed_msg+0x4fc>
 801b436:	7863      	ldrb	r3, [r4, #1]
 801b438:	4283      	cmp	r3, r0
 801b43a:	bf0c      	ite	eq
 801b43c:	2303      	moveq	r3, #3
 801b43e:	2300      	movne	r3, #0
 801b440:	7023      	strb	r3, [r4, #0]
 801b442:	e6e4      	b.n	801b20e <uxr_read_framed_msg+0x2a>
 801b444:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 801b448:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 801b44c:	2300      	movs	r3, #0
 801b44e:	4290      	cmp	r0, r2
 801b450:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
 801b454:	d06b      	beq.n	801b52e <uxr_read_framed_msg+0x34a>
 801b456:	18a3      	adds	r3, r4, r2
 801b458:	f102 0c01 	add.w	ip, r2, #1
 801b45c:	493e      	ldr	r1, [pc, #248]	@ (801b558 <uxr_read_framed_msg+0x374>)
 801b45e:	789f      	ldrb	r7, [r3, #2]
 801b460:	ea4f 035c 	mov.w	r3, ip, lsr #1
 801b464:	fba1 8303 	umull	r8, r3, r1, r3
 801b468:	089b      	lsrs	r3, r3, #2
 801b46a:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 801b46e:	fb08 c313 	mls	r3, r8, r3, ip
 801b472:	2f7d      	cmp	r7, #125	@ 0x7d
 801b474:	fa5f fc83 	uxtb.w	ip, r3
 801b478:	f000 80d8 	beq.w	801b62c <uxr_read_framed_msg+0x448>
 801b47c:	2f7e      	cmp	r7, #126	@ 0x7e
 801b47e:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 801b482:	f884 702e 	strb.w	r7, [r4, #46]	@ 0x2e
 801b486:	d052      	beq.n	801b52e <uxr_read_framed_msg+0x34a>
 801b488:	2302      	movs	r3, #2
 801b48a:	7023      	strb	r3, [r4, #0]
 801b48c:	e6bf      	b.n	801b20e <uxr_read_framed_msg+0x2a>
 801b48e:	f894 802c 	ldrb.w	r8, [r4, #44]	@ 0x2c
 801b492:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 801b496:	4930      	ldr	r1, [pc, #192]	@ (801b558 <uxr_read_framed_msg+0x374>)
 801b498:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 801b49c:	e004      	b.n	801b4a8 <uxr_read_framed_msg+0x2c4>
 801b49e:	78bb      	ldrb	r3, [r7, #2]
 801b4a0:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 801b4a4:	2b7e      	cmp	r3, #126	@ 0x7e
 801b4a6:	d02a      	beq.n	801b4fe <uxr_read_framed_msg+0x31a>
 801b4a8:	1c50      	adds	r0, r2, #1
 801b4aa:	0843      	lsrs	r3, r0, #1
 801b4ac:	fba1 e303 	umull	lr, r3, r1, r3
 801b4b0:	089b      	lsrs	r3, r3, #2
 801b4b2:	fb0c 0013 	mls	r0, ip, r3, r0
 801b4b6:	4590      	cmp	r8, r2
 801b4b8:	eb04 0702 	add.w	r7, r4, r2
 801b4bc:	b2c2      	uxtb	r2, r0
 801b4be:	d1ee      	bne.n	801b49e <uxr_read_framed_msg+0x2ba>
 801b4c0:	e6dd      	b.n	801b27e <uxr_read_framed_msg+0x9a>
 801b4c2:	3002      	adds	r0, #2
 801b4c4:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 801b4c8:	eb04 0a02 	add.w	sl, r4, r2
 801b4cc:	fba9 e20e 	umull	lr, r2, r9, lr
 801b4d0:	0892      	lsrs	r2, r2, #2
 801b4d2:	45e0      	cmp	r8, ip
 801b4d4:	fb01 0012 	mls	r0, r1, r2, r0
 801b4d8:	f43f af36 	beq.w	801b348 <uxr_read_framed_msg+0x164>
 801b4dc:	f89a e002 	ldrb.w	lr, [sl, #2]
 801b4e0:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 801b4e4:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 801b4e8:	d049      	beq.n	801b57e <uxr_read_framed_msg+0x39a>
 801b4ea:	f08e 0e20 	eor.w	lr, lr, #32
 801b4ee:	e704      	b.n	801b2fa <uxr_read_framed_msg+0x116>
 801b4f0:	f8dd a00c 	ldr.w	sl, [sp, #12]
 801b4f4:	f43f af2d 	beq.w	801b352 <uxr_read_framed_msg+0x16e>
 801b4f8:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 801b4fc:	d151      	bne.n	801b5a2 <uxr_read_framed_msg+0x3be>
 801b4fe:	2301      	movs	r3, #1
 801b500:	7023      	strb	r3, [r4, #0]
 801b502:	e684      	b.n	801b20e <uxr_read_framed_msg+0x2a>
 801b504:	4651      	mov	r1, sl
 801b506:	f8cd b000 	str.w	fp, [sp]
 801b50a:	2301      	movs	r3, #1
 801b50c:	9301      	str	r3, [sp, #4]
 801b50e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801b510:	9103      	str	r1, [sp, #12]
 801b512:	4632      	mov	r2, r6
 801b514:	4620      	mov	r0, r4
 801b516:	f7ff fde1 	bl	801b0dc <uxr_framing_read_transport>
 801b51a:	fab0 f080 	clz	r0, r0
 801b51e:	9903      	ldr	r1, [sp, #12]
 801b520:	0940      	lsrs	r0, r0, #5
 801b522:	e671      	b.n	801b208 <uxr_read_framed_msg+0x24>
 801b524:	4651      	mov	r1, sl
 801b526:	f8cd b000 	str.w	fp, [sp]
 801b52a:	2302      	movs	r3, #2
 801b52c:	e7ee      	b.n	801b50c <uxr_read_framed_msg+0x328>
 801b52e:	2304      	movs	r3, #4
 801b530:	9301      	str	r3, [sp, #4]
 801b532:	f8cd b000 	str.w	fp, [sp]
 801b536:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801b538:	4632      	mov	r2, r6
 801b53a:	4651      	mov	r1, sl
 801b53c:	4620      	mov	r0, r4
 801b53e:	f7ff fdcd 	bl	801b0dc <uxr_framing_read_transport>
 801b542:	2800      	cmp	r0, #0
 801b544:	f47f ae63 	bne.w	801b20e <uxr_read_framed_msg+0x2a>
 801b548:	f894 002e 	ldrb.w	r0, [r4, #46]	@ 0x2e
 801b54c:	387e      	subs	r0, #126	@ 0x7e
 801b54e:	4651      	mov	r1, sl
 801b550:	bf18      	it	ne
 801b552:	2001      	movne	r0, #1
 801b554:	e658      	b.n	801b208 <uxr_read_framed_msg+0x24>
 801b556:	bf00      	nop
 801b558:	30c30c31 	.word	0x30c30c31
 801b55c:	0802067c 	.word	0x0802067c
 801b560:	2305      	movs	r3, #5
 801b562:	9301      	str	r3, [sp, #4]
 801b564:	f8cd b000 	str.w	fp, [sp]
 801b568:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801b56a:	f7ff fdb7 	bl	801b0dc <uxr_framing_read_transport>
 801b56e:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 801b572:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801b576:	429a      	cmp	r2, r3
 801b578:	f43f ae81 	beq.w	801b27e <uxr_read_framed_msg+0x9a>
 801b57c:	e642      	b.n	801b204 <uxr_read_framed_msg+0x20>
 801b57e:	42bb      	cmp	r3, r7
 801b580:	f8dd a00c 	ldr.w	sl, [sp, #12]
 801b584:	f43f aee5 	beq.w	801b352 <uxr_read_framed_msg+0x16e>
 801b588:	2301      	movs	r3, #1
 801b58a:	7023      	strb	r3, [r4, #0]
 801b58c:	e63f      	b.n	801b20e <uxr_read_framed_msg+0x2a>
 801b58e:	4651      	mov	r1, sl
 801b590:	f8cd b000 	str.w	fp, [sp]
 801b594:	2303      	movs	r3, #3
 801b596:	e7b9      	b.n	801b50c <uxr_read_framed_msg+0x328>
 801b598:	2305      	movs	r3, #5
 801b59a:	7023      	strb	r3, [r4, #0]
 801b59c:	e637      	b.n	801b20e <uxr_read_framed_msg+0x2a>
 801b59e:	f43f aed8 	beq.w	801b352 <uxr_read_framed_msg+0x16e>
 801b5a2:	1afb      	subs	r3, r7, r3
 801b5a4:	3302      	adds	r3, #2
 801b5a6:	e9cd b300 	strd	fp, r3, [sp]
 801b5aa:	4651      	mov	r1, sl
 801b5ac:	e7af      	b.n	801b50e <uxr_read_framed_msg+0x32a>
 801b5ae:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801b5b0:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 801b5b4:	7013      	strb	r3, [r2, #0]
 801b5b6:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 801b5b8:	b005      	add	sp, #20
 801b5ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b5be:	4287      	cmp	r7, r0
 801b5c0:	d0a0      	beq.n	801b504 <uxr_read_framed_msg+0x320>
 801b5c2:	4423      	add	r3, r4
 801b5c4:	3202      	adds	r2, #2
 801b5c6:	7898      	ldrb	r0, [r3, #2]
 801b5c8:	0853      	lsrs	r3, r2, #1
 801b5ca:	fba1 e303 	umull	lr, r3, r1, r3
 801b5ce:	089b      	lsrs	r3, r3, #2
 801b5d0:	fb08 2213 	mls	r2, r8, r3, r2
 801b5d4:	287e      	cmp	r0, #126	@ 0x7e
 801b5d6:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 801b5da:	d064      	beq.n	801b6a6 <uxr_read_framed_msg+0x4c2>
 801b5dc:	f080 0120 	eor.w	r1, r0, #32
 801b5e0:	e642      	b.n	801b268 <uxr_read_framed_msg+0x84>
 801b5e2:	45bc      	cmp	ip, r7
 801b5e4:	d09e      	beq.n	801b524 <uxr_read_framed_msg+0x340>
 801b5e6:	4423      	add	r3, r4
 801b5e8:	3202      	adds	r2, #2
 801b5ea:	7898      	ldrb	r0, [r3, #2]
 801b5ec:	0853      	lsrs	r3, r2, #1
 801b5ee:	fba1 e303 	umull	lr, r3, r1, r3
 801b5f2:	089b      	lsrs	r3, r3, #2
 801b5f4:	fb08 2213 	mls	r2, r8, r3, r2
 801b5f8:	287e      	cmp	r0, #126	@ 0x7e
 801b5fa:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 801b5fe:	d061      	beq.n	801b6c4 <uxr_read_framed_msg+0x4e0>
 801b600:	f080 0020 	eor.w	r0, r0, #32
 801b604:	e65e      	b.n	801b2c4 <uxr_read_framed_msg+0xe0>
 801b606:	4567      	cmp	r7, ip
 801b608:	f43f af7c 	beq.w	801b504 <uxr_read_framed_msg+0x320>
 801b60c:	4423      	add	r3, r4
 801b60e:	3202      	adds	r2, #2
 801b610:	7898      	ldrb	r0, [r3, #2]
 801b612:	0853      	lsrs	r3, r2, #1
 801b614:	fba1 e303 	umull	lr, r3, r1, r3
 801b618:	089b      	lsrs	r3, r3, #2
 801b61a:	fb08 2213 	mls	r2, r8, r3, r2
 801b61e:	287e      	cmp	r0, #126	@ 0x7e
 801b620:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 801b624:	d03f      	beq.n	801b6a6 <uxr_read_framed_msg+0x4c2>
 801b626:	f080 0020 	eor.w	r0, r0, #32
 801b62a:	e6b4      	b.n	801b396 <uxr_read_framed_msg+0x1b2>
 801b62c:	4560      	cmp	r0, ip
 801b62e:	f43f af7e 	beq.w	801b52e <uxr_read_framed_msg+0x34a>
 801b632:	4423      	add	r3, r4
 801b634:	3202      	adds	r2, #2
 801b636:	7898      	ldrb	r0, [r3, #2]
 801b638:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 801b63c:	0853      	lsrs	r3, r2, #1
 801b63e:	fba1 e303 	umull	lr, r3, r1, r3
 801b642:	089b      	lsrs	r3, r3, #2
 801b644:	fb08 2213 	mls	r2, r8, r3, r2
 801b648:	287e      	cmp	r0, #126	@ 0x7e
 801b64a:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 801b64e:	f43f af6e 	beq.w	801b52e <uxr_read_framed_msg+0x34a>
 801b652:	f080 0020 	eor.w	r0, r0, #32
 801b656:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 801b65a:	e715      	b.n	801b488 <uxr_read_framed_msg+0x2a4>
 801b65c:	4567      	cmp	r7, ip
 801b65e:	f43f af61 	beq.w	801b524 <uxr_read_framed_msg+0x340>
 801b662:	4423      	add	r3, r4
 801b664:	3202      	adds	r2, #2
 801b666:	7898      	ldrb	r0, [r3, #2]
 801b668:	0853      	lsrs	r3, r2, #1
 801b66a:	fba1 e303 	umull	lr, r3, r1, r3
 801b66e:	089b      	lsrs	r3, r3, #2
 801b670:	fb08 2213 	mls	r2, r8, r3, r2
 801b674:	287e      	cmp	r0, #126	@ 0x7e
 801b676:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 801b67a:	d023      	beq.n	801b6c4 <uxr_read_framed_msg+0x4e0>
 801b67c:	f080 0020 	eor.w	r0, r0, #32
 801b680:	e6b6      	b.n	801b3f0 <uxr_read_framed_msg+0x20c>
 801b682:	45bc      	cmp	ip, r7
 801b684:	d083      	beq.n	801b58e <uxr_read_framed_msg+0x3aa>
 801b686:	4423      	add	r3, r4
 801b688:	3202      	adds	r2, #2
 801b68a:	7898      	ldrb	r0, [r3, #2]
 801b68c:	0853      	lsrs	r3, r2, #1
 801b68e:	fba1 e303 	umull	lr, r3, r1, r3
 801b692:	089b      	lsrs	r3, r3, #2
 801b694:	fb08 2213 	mls	r2, r8, r3, r2
 801b698:	287e      	cmp	r0, #126	@ 0x7e
 801b69a:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 801b69e:	d01f      	beq.n	801b6e0 <uxr_read_framed_msg+0x4fc>
 801b6a0:	f080 0020 	eor.w	r0, r0, #32
 801b6a4:	e6c7      	b.n	801b436 <uxr_read_framed_msg+0x252>
 801b6a6:	2701      	movs	r7, #1
 801b6a8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801b6aa:	f8cd b000 	str.w	fp, [sp]
 801b6ae:	9701      	str	r7, [sp, #4]
 801b6b0:	4632      	mov	r2, r6
 801b6b2:	4651      	mov	r1, sl
 801b6b4:	4620      	mov	r0, r4
 801b6b6:	f7ff fd11 	bl	801b0dc <uxr_framing_read_transport>
 801b6ba:	2800      	cmp	r0, #0
 801b6bc:	f47f ada7 	bne.w	801b20e <uxr_read_framed_msg+0x2a>
 801b6c0:	7027      	strb	r7, [r4, #0]
 801b6c2:	e5a4      	b.n	801b20e <uxr_read_framed_msg+0x2a>
 801b6c4:	f8cd b000 	str.w	fp, [sp]
 801b6c8:	2302      	movs	r3, #2
 801b6ca:	9301      	str	r3, [sp, #4]
 801b6cc:	4632      	mov	r2, r6
 801b6ce:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801b6d0:	4651      	mov	r1, sl
 801b6d2:	4620      	mov	r0, r4
 801b6d4:	f7ff fd02 	bl	801b0dc <uxr_framing_read_transport>
 801b6d8:	2800      	cmp	r0, #0
 801b6da:	f47f ad98 	bne.w	801b20e <uxr_read_framed_msg+0x2a>
 801b6de:	e70e      	b.n	801b4fe <uxr_read_framed_msg+0x31a>
 801b6e0:	f8cd b000 	str.w	fp, [sp]
 801b6e4:	2303      	movs	r3, #3
 801b6e6:	e7f0      	b.n	801b6ca <uxr_read_framed_msg+0x4e6>

0801b6e8 <rcl_get_automatic_discovery_range>:
 801b6e8:	b530      	push	{r4, r5, lr}
 801b6ea:	b083      	sub	sp, #12
 801b6ec:	2300      	movs	r3, #0
 801b6ee:	9301      	str	r3, [sp, #4]
 801b6f0:	b1c0      	cbz	r0, 801b724 <rcl_get_automatic_discovery_range+0x3c>
 801b6f2:	4604      	mov	r4, r0
 801b6f4:	a901      	add	r1, sp, #4
 801b6f6:	4818      	ldr	r0, [pc, #96]	@ (801b758 <rcl_get_automatic_discovery_range+0x70>)
 801b6f8:	f7fb ff28 	bl	801754c <rcutils_get_env>
 801b6fc:	b110      	cbz	r0, 801b704 <rcl_get_automatic_discovery_range+0x1c>
 801b6fe:	2001      	movs	r0, #1
 801b700:	b003      	add	sp, #12
 801b702:	bd30      	pop	{r4, r5, pc}
 801b704:	9d01      	ldr	r5, [sp, #4]
 801b706:	782b      	ldrb	r3, [r5, #0]
 801b708:	b923      	cbnz	r3, 801b714 <rcl_get_automatic_discovery_range+0x2c>
 801b70a:	2303      	movs	r3, #3
 801b70c:	7023      	strb	r3, [r4, #0]
 801b70e:	2000      	movs	r0, #0
 801b710:	b003      	add	sp, #12
 801b712:	bd30      	pop	{r4, r5, pc}
 801b714:	4911      	ldr	r1, [pc, #68]	@ (801b75c <rcl_get_automatic_discovery_range+0x74>)
 801b716:	4628      	mov	r0, r5
 801b718:	f7e4 fd72 	bl	8000200 <strcmp>
 801b71c:	b928      	cbnz	r0, 801b72a <rcl_get_automatic_discovery_range+0x42>
 801b71e:	2301      	movs	r3, #1
 801b720:	7023      	strb	r3, [r4, #0]
 801b722:	e7f4      	b.n	801b70e <rcl_get_automatic_discovery_range+0x26>
 801b724:	200b      	movs	r0, #11
 801b726:	b003      	add	sp, #12
 801b728:	bd30      	pop	{r4, r5, pc}
 801b72a:	490d      	ldr	r1, [pc, #52]	@ (801b760 <rcl_get_automatic_discovery_range+0x78>)
 801b72c:	4628      	mov	r0, r5
 801b72e:	f7e4 fd67 	bl	8000200 <strcmp>
 801b732:	b168      	cbz	r0, 801b750 <rcl_get_automatic_discovery_range+0x68>
 801b734:	490b      	ldr	r1, [pc, #44]	@ (801b764 <rcl_get_automatic_discovery_range+0x7c>)
 801b736:	4628      	mov	r0, r5
 801b738:	f7e4 fd62 	bl	8000200 <strcmp>
 801b73c:	2800      	cmp	r0, #0
 801b73e:	d0e4      	beq.n	801b70a <rcl_get_automatic_discovery_range+0x22>
 801b740:	4909      	ldr	r1, [pc, #36]	@ (801b768 <rcl_get_automatic_discovery_range+0x80>)
 801b742:	4628      	mov	r0, r5
 801b744:	f7e4 fd5c 	bl	8000200 <strcmp>
 801b748:	b910      	cbnz	r0, 801b750 <rcl_get_automatic_discovery_range+0x68>
 801b74a:	2304      	movs	r3, #4
 801b74c:	7023      	strb	r3, [r4, #0]
 801b74e:	e7de      	b.n	801b70e <rcl_get_automatic_discovery_range+0x26>
 801b750:	2302      	movs	r3, #2
 801b752:	7023      	strb	r3, [r4, #0]
 801b754:	e7db      	b.n	801b70e <rcl_get_automatic_discovery_range+0x26>
 801b756:	bf00      	nop
 801b758:	0801f778 	.word	0x0801f778
 801b75c:	0801f798 	.word	0x0801f798
 801b760:	0801f79c 	.word	0x0801f79c
 801b764:	0801f7a8 	.word	0x0801f7a8
 801b768:	0801f7b0 	.word	0x0801f7b0

0801b76c <rcl_automatic_discovery_range_to_string>:
 801b76c:	2804      	cmp	r0, #4
 801b76e:	bf9a      	itte	ls
 801b770:	4b02      	ldrls	r3, [pc, #8]	@ (801b77c <rcl_automatic_discovery_range_to_string+0x10>)
 801b772:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 801b776:	2000      	movhi	r0, #0
 801b778:	4770      	bx	lr
 801b77a:	bf00      	nop
 801b77c:	0802087c 	.word	0x0802087c

0801b780 <rcl_get_discovery_static_peers>:
 801b780:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b784:	b08c      	sub	sp, #48	@ 0x30
 801b786:	2300      	movs	r3, #0
 801b788:	9304      	str	r3, [sp, #16]
 801b78a:	2800      	cmp	r0, #0
 801b78c:	d04e      	beq.n	801b82c <rcl_get_discovery_static_peers+0xac>
 801b78e:	460d      	mov	r5, r1
 801b790:	2900      	cmp	r1, #0
 801b792:	d04b      	beq.n	801b82c <rcl_get_discovery_static_peers+0xac>
 801b794:	4604      	mov	r4, r0
 801b796:	a904      	add	r1, sp, #16
 801b798:	482d      	ldr	r0, [pc, #180]	@ (801b850 <rcl_get_discovery_static_peers+0xd0>)
 801b79a:	f7fb fed7 	bl	801754c <rcutils_get_env>
 801b79e:	b118      	cbz	r0, 801b7a8 <rcl_get_discovery_static_peers+0x28>
 801b7a0:	2001      	movs	r0, #1
 801b7a2:	b00c      	add	sp, #48	@ 0x30
 801b7a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b7a8:	9b04      	ldr	r3, [sp, #16]
 801b7aa:	2b00      	cmp	r3, #0
 801b7ac:	d0f8      	beq.n	801b7a0 <rcl_get_discovery_static_peers+0x20>
 801b7ae:	af05      	add	r7, sp, #20
 801b7b0:	4638      	mov	r0, r7
 801b7b2:	f000 fc33 	bl	801c01c <rcutils_get_zero_initialized_string_array>
 801b7b6:	f105 0308 	add.w	r3, r5, #8
 801b7ba:	9703      	str	r7, [sp, #12]
 801b7bc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801b7c0:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801b7c4:	9804      	ldr	r0, [sp, #16]
 801b7c6:	e895 000c 	ldmia.w	r5, {r2, r3}
 801b7ca:	213b      	movs	r1, #59	@ 0x3b
 801b7cc:	f000 fb74 	bl	801beb8 <rcutils_split>
 801b7d0:	2800      	cmp	r0, #0
 801b7d2:	d1e5      	bne.n	801b7a0 <rcl_get_discovery_static_peers+0x20>
 801b7d4:	9905      	ldr	r1, [sp, #20]
 801b7d6:	462a      	mov	r2, r5
 801b7d8:	4620      	mov	r0, r4
 801b7da:	f000 fc8d 	bl	801c0f8 <rmw_discovery_options_init>
 801b7de:	4606      	mov	r6, r0
 801b7e0:	bb90      	cbnz	r0, 801b848 <rcl_get_discovery_static_peers+0xc8>
 801b7e2:	f8dd 9014 	ldr.w	r9, [sp, #20]
 801b7e6:	f1b9 0f00 	cmp.w	r9, #0
 801b7ea:	d026      	beq.n	801b83a <rcl_get_discovery_static_peers+0xba>
 801b7ec:	f8dd a018 	ldr.w	sl, [sp, #24]
 801b7f0:	4680      	mov	r8, r0
 801b7f2:	f85a 5026 	ldr.w	r5, [sl, r6, lsl #2]
 801b7f6:	4628      	mov	r0, r5
 801b7f8:	f7e4 fd62 	bl	80002c0 <strlen>
 801b7fc:	28ff      	cmp	r0, #255	@ 0xff
 801b7fe:	4629      	mov	r1, r5
 801b800:	ea4f 2506 	mov.w	r5, r6, lsl #8
 801b804:	d816      	bhi.n	801b834 <rcl_get_discovery_static_peers+0xb4>
 801b806:	6860      	ldr	r0, [r4, #4]
 801b808:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801b80c:	eb00 2006 	add.w	r0, r0, r6, lsl #8
 801b810:	f001 fe65 	bl	801d4de <strncpy>
 801b814:	6863      	ldr	r3, [r4, #4]
 801b816:	f8dd 9014 	ldr.w	r9, [sp, #20]
 801b81a:	3601      	adds	r6, #1
 801b81c:	442b      	add	r3, r5
 801b81e:	454e      	cmp	r6, r9
 801b820:	f883 80ff 	strb.w	r8, [r3, #255]	@ 0xff
 801b824:	d209      	bcs.n	801b83a <rcl_get_discovery_static_peers+0xba>
 801b826:	f8dd a018 	ldr.w	sl, [sp, #24]
 801b82a:	e7e2      	b.n	801b7f2 <rcl_get_discovery_static_peers+0x72>
 801b82c:	200b      	movs	r0, #11
 801b82e:	b00c      	add	sp, #48	@ 0x30
 801b830:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b834:	3601      	adds	r6, #1
 801b836:	454e      	cmp	r6, r9
 801b838:	d3db      	bcc.n	801b7f2 <rcl_get_discovery_static_peers+0x72>
 801b83a:	4638      	mov	r0, r7
 801b83c:	f000 fc2e 	bl	801c09c <rcutils_string_array_fini>
 801b840:	3800      	subs	r0, #0
 801b842:	bf18      	it	ne
 801b844:	2001      	movne	r0, #1
 801b846:	e7ac      	b.n	801b7a2 <rcl_get_discovery_static_peers+0x22>
 801b848:	f7f9 f80c 	bl	8014864 <rcl_convert_rmw_ret_to_rcl_ret>
 801b84c:	e7a9      	b.n	801b7a2 <rcl_get_discovery_static_peers+0x22>
 801b84e:	bf00      	nop
 801b850:	0801f7c0 	.word	0x0801f7c0

0801b854 <rcl_get_default_domain_id>:
 801b854:	b530      	push	{r4, r5, lr}
 801b856:	b083      	sub	sp, #12
 801b858:	2300      	movs	r3, #0
 801b85a:	9300      	str	r3, [sp, #0]
 801b85c:	b1f0      	cbz	r0, 801b89c <rcl_get_default_domain_id+0x48>
 801b85e:	4604      	mov	r4, r0
 801b860:	4669      	mov	r1, sp
 801b862:	4812      	ldr	r0, [pc, #72]	@ (801b8ac <rcl_get_default_domain_id+0x58>)
 801b864:	f7fb fe72 	bl	801754c <rcutils_get_env>
 801b868:	4602      	mov	r2, r0
 801b86a:	b108      	cbz	r0, 801b870 <rcl_get_default_domain_id+0x1c>
 801b86c:	2001      	movs	r0, #1
 801b86e:	e004      	b.n	801b87a <rcl_get_default_domain_id+0x26>
 801b870:	9800      	ldr	r0, [sp, #0]
 801b872:	b108      	cbz	r0, 801b878 <rcl_get_default_domain_id+0x24>
 801b874:	7803      	ldrb	r3, [r0, #0]
 801b876:	b913      	cbnz	r3, 801b87e <rcl_get_default_domain_id+0x2a>
 801b878:	2000      	movs	r0, #0
 801b87a:	b003      	add	sp, #12
 801b87c:	bd30      	pop	{r4, r5, pc}
 801b87e:	a901      	add	r1, sp, #4
 801b880:	9201      	str	r2, [sp, #4]
 801b882:	f001 fce9 	bl	801d258 <strtoul>
 801b886:	4605      	mov	r5, r0
 801b888:	b158      	cbz	r0, 801b8a2 <rcl_get_default_domain_id+0x4e>
 801b88a:	1c43      	adds	r3, r0, #1
 801b88c:	d104      	bne.n	801b898 <rcl_get_default_domain_id+0x44>
 801b88e:	f001 fe5f 	bl	801d550 <__errno>
 801b892:	6803      	ldr	r3, [r0, #0]
 801b894:	2b22      	cmp	r3, #34	@ 0x22
 801b896:	d0e9      	beq.n	801b86c <rcl_get_default_domain_id+0x18>
 801b898:	6025      	str	r5, [r4, #0]
 801b89a:	e7ed      	b.n	801b878 <rcl_get_default_domain_id+0x24>
 801b89c:	200b      	movs	r0, #11
 801b89e:	b003      	add	sp, #12
 801b8a0:	bd30      	pop	{r4, r5, pc}
 801b8a2:	9b01      	ldr	r3, [sp, #4]
 801b8a4:	781b      	ldrb	r3, [r3, #0]
 801b8a6:	2b00      	cmp	r3, #0
 801b8a8:	d0f6      	beq.n	801b898 <rcl_get_default_domain_id+0x44>
 801b8aa:	e7df      	b.n	801b86c <rcl_get_default_domain_id+0x18>
 801b8ac:	0801f8a0 	.word	0x0801f8a0

0801b8b0 <rcl_expand_topic_name>:
 801b8b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b8b4:	b08b      	sub	sp, #44	@ 0x2c
 801b8b6:	9306      	str	r3, [sp, #24]
 801b8b8:	2800      	cmp	r0, #0
 801b8ba:	f000 80ad 	beq.w	801ba18 <rcl_expand_topic_name+0x168>
 801b8be:	460e      	mov	r6, r1
 801b8c0:	2900      	cmp	r1, #0
 801b8c2:	f000 80a9 	beq.w	801ba18 <rcl_expand_topic_name+0x168>
 801b8c6:	4617      	mov	r7, r2
 801b8c8:	2a00      	cmp	r2, #0
 801b8ca:	f000 80a5 	beq.w	801ba18 <rcl_expand_topic_name+0x168>
 801b8ce:	2b00      	cmp	r3, #0
 801b8d0:	f000 80a2 	beq.w	801ba18 <rcl_expand_topic_name+0x168>
 801b8d4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801b8d6:	2b00      	cmp	r3, #0
 801b8d8:	f000 809e 	beq.w	801ba18 <rcl_expand_topic_name+0x168>
 801b8dc:	2200      	movs	r2, #0
 801b8de:	a909      	add	r1, sp, #36	@ 0x24
 801b8e0:	4680      	mov	r8, r0
 801b8e2:	f000 f9f7 	bl	801bcd4 <rcl_validate_topic_name>
 801b8e6:	4605      	mov	r5, r0
 801b8e8:	2800      	cmp	r0, #0
 801b8ea:	f040 8096 	bne.w	801ba1a <rcl_expand_topic_name+0x16a>
 801b8ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b8f0:	2b00      	cmp	r3, #0
 801b8f2:	f040 809a 	bne.w	801ba2a <rcl_expand_topic_name+0x17a>
 801b8f6:	4602      	mov	r2, r0
 801b8f8:	a909      	add	r1, sp, #36	@ 0x24
 801b8fa:	4630      	mov	r0, r6
 801b8fc:	f7fc faa0 	bl	8017e40 <rmw_validate_node_name>
 801b900:	2800      	cmp	r0, #0
 801b902:	f040 808e 	bne.w	801ba22 <rcl_expand_topic_name+0x172>
 801b906:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801b908:	2a00      	cmp	r2, #0
 801b90a:	f040 8093 	bne.w	801ba34 <rcl_expand_topic_name+0x184>
 801b90e:	a909      	add	r1, sp, #36	@ 0x24
 801b910:	4638      	mov	r0, r7
 801b912:	f7fc fa77 	bl	8017e04 <rmw_validate_namespace>
 801b916:	2800      	cmp	r0, #0
 801b918:	f040 8083 	bne.w	801ba22 <rcl_expand_topic_name+0x172>
 801b91c:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 801b91e:	2d00      	cmp	r5, #0
 801b920:	f040 80f4 	bne.w	801bb0c <rcl_expand_topic_name+0x25c>
 801b924:	217b      	movs	r1, #123	@ 0x7b
 801b926:	4640      	mov	r0, r8
 801b928:	f001 fdba 	bl	801d4a0 <strchr>
 801b92c:	f898 3000 	ldrb.w	r3, [r8]
 801b930:	2b2f      	cmp	r3, #47	@ 0x2f
 801b932:	4604      	mov	r4, r0
 801b934:	f000 809f 	beq.w	801ba76 <rcl_expand_topic_name+0x1c6>
 801b938:	2b7e      	cmp	r3, #126	@ 0x7e
 801b93a:	f040 80e9 	bne.w	801bb10 <rcl_expand_topic_name+0x260>
 801b93e:	4638      	mov	r0, r7
 801b940:	f7e4 fcbe 	bl	80002c0 <strlen>
 801b944:	4a82      	ldr	r2, [pc, #520]	@ (801bb50 <rcl_expand_topic_name+0x2a0>)
 801b946:	4b83      	ldr	r3, [pc, #524]	@ (801bb54 <rcl_expand_topic_name+0x2a4>)
 801b948:	2801      	cmp	r0, #1
 801b94a:	bf08      	it	eq
 801b94c:	4613      	moveq	r3, r2
 801b94e:	9302      	str	r3, [sp, #8]
 801b950:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801b952:	9300      	str	r3, [sp, #0]
 801b954:	e9cd 7603 	strd	r7, r6, [sp, #12]
 801b958:	f108 0301 	add.w	r3, r8, #1
 801b95c:	9305      	str	r3, [sp, #20]
 801b95e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801b962:	9301      	str	r3, [sp, #4]
 801b964:	ab14      	add	r3, sp, #80	@ 0x50
 801b966:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801b968:	f7fb fe08 	bl	801757c <rcutils_format_string_limit>
 801b96c:	4682      	mov	sl, r0
 801b96e:	2800      	cmp	r0, #0
 801b970:	f000 80d1 	beq.w	801bb16 <rcl_expand_topic_name+0x266>
 801b974:	2c00      	cmp	r4, #0
 801b976:	f000 8085 	beq.w	801ba84 <rcl_expand_topic_name+0x1d4>
 801b97a:	217b      	movs	r1, #123	@ 0x7b
 801b97c:	f001 fd90 	bl	801d4a0 <strchr>
 801b980:	46d1      	mov	r9, sl
 801b982:	4604      	mov	r4, r0
 801b984:	9507      	str	r5, [sp, #28]
 801b986:	464d      	mov	r5, r9
 801b988:	2c00      	cmp	r4, #0
 801b98a:	f000 80a0 	beq.w	801bace <rcl_expand_topic_name+0x21e>
 801b98e:	217d      	movs	r1, #125	@ 0x7d
 801b990:	4628      	mov	r0, r5
 801b992:	f001 fd85 	bl	801d4a0 <strchr>
 801b996:	eba0 0904 	sub.w	r9, r0, r4
 801b99a:	f109 0b01 	add.w	fp, r9, #1
 801b99e:	486e      	ldr	r0, [pc, #440]	@ (801bb58 <rcl_expand_topic_name+0x2a8>)
 801b9a0:	465a      	mov	r2, fp
 801b9a2:	4621      	mov	r1, r4
 801b9a4:	f001 fd89 	bl	801d4ba <strncmp>
 801b9a8:	2800      	cmp	r0, #0
 801b9aa:	d069      	beq.n	801ba80 <rcl_expand_topic_name+0x1d0>
 801b9ac:	486b      	ldr	r0, [pc, #428]	@ (801bb5c <rcl_expand_topic_name+0x2ac>)
 801b9ae:	465a      	mov	r2, fp
 801b9b0:	4621      	mov	r1, r4
 801b9b2:	f001 fd82 	bl	801d4ba <strncmp>
 801b9b6:	b130      	cbz	r0, 801b9c6 <rcl_expand_topic_name+0x116>
 801b9b8:	4869      	ldr	r0, [pc, #420]	@ (801bb60 <rcl_expand_topic_name+0x2b0>)
 801b9ba:	465a      	mov	r2, fp
 801b9bc:	4621      	mov	r1, r4
 801b9be:	f001 fd7c 	bl	801d4ba <strncmp>
 801b9c2:	2800      	cmp	r0, #0
 801b9c4:	d138      	bne.n	801ba38 <rcl_expand_topic_name+0x188>
 801b9c6:	46b9      	mov	r9, r7
 801b9c8:	ab16      	add	r3, sp, #88	@ 0x58
 801b9ca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801b9ce:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801b9d2:	ab14      	add	r3, sp, #80	@ 0x50
 801b9d4:	4620      	mov	r0, r4
 801b9d6:	cb0c      	ldmia	r3, {r2, r3}
 801b9d8:	4659      	mov	r1, fp
 801b9da:	f7fb ff23 	bl	8017824 <rcutils_strndup>
 801b9de:	4604      	mov	r4, r0
 801b9e0:	2800      	cmp	r0, #0
 801b9e2:	f000 809d 	beq.w	801bb20 <rcl_expand_topic_name+0x270>
 801b9e6:	464a      	mov	r2, r9
 801b9e8:	4628      	mov	r0, r5
 801b9ea:	ab14      	add	r3, sp, #80	@ 0x50
 801b9ec:	4621      	mov	r1, r4
 801b9ee:	f7fb fdff 	bl	80175f0 <rcutils_repl_str>
 801b9f2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801b9f4:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801b9f6:	4605      	mov	r5, r0
 801b9f8:	4620      	mov	r0, r4
 801b9fa:	4798      	blx	r3
 801b9fc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801b9fe:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801ba00:	4650      	mov	r0, sl
 801ba02:	4798      	blx	r3
 801ba04:	2d00      	cmp	r5, #0
 801ba06:	f000 8086 	beq.w	801bb16 <rcl_expand_topic_name+0x266>
 801ba0a:	217b      	movs	r1, #123	@ 0x7b
 801ba0c:	4628      	mov	r0, r5
 801ba0e:	f001 fd47 	bl	801d4a0 <strchr>
 801ba12:	46aa      	mov	sl, r5
 801ba14:	4604      	mov	r4, r0
 801ba16:	e7b7      	b.n	801b988 <rcl_expand_topic_name+0xd8>
 801ba18:	250b      	movs	r5, #11
 801ba1a:	4628      	mov	r0, r5
 801ba1c:	b00b      	add	sp, #44	@ 0x2c
 801ba1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ba22:	f7f8 ff1f 	bl	8014864 <rcl_convert_rmw_ret_to_rcl_ret>
 801ba26:	4605      	mov	r5, r0
 801ba28:	e7f7      	b.n	801ba1a <rcl_expand_topic_name+0x16a>
 801ba2a:	2567      	movs	r5, #103	@ 0x67
 801ba2c:	4628      	mov	r0, r5
 801ba2e:	b00b      	add	sp, #44	@ 0x2c
 801ba30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ba34:	25c9      	movs	r5, #201	@ 0xc9
 801ba36:	e7f0      	b.n	801ba1a <rcl_expand_topic_name+0x16a>
 801ba38:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 801ba3c:	9806      	ldr	r0, [sp, #24]
 801ba3e:	1c61      	adds	r1, r4, #1
 801ba40:	f7fc f80c 	bl	8017a5c <rcutils_string_map_getn>
 801ba44:	4681      	mov	r9, r0
 801ba46:	2800      	cmp	r0, #0
 801ba48:	d1be      	bne.n	801b9c8 <rcl_expand_topic_name+0x118>
 801ba4a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801ba4c:	ab16      	add	r3, sp, #88	@ 0x58
 801ba4e:	6010      	str	r0, [r2, #0]
 801ba50:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801ba54:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801ba58:	ab14      	add	r3, sp, #80	@ 0x50
 801ba5a:	cb0c      	ldmia	r3, {r2, r3}
 801ba5c:	4659      	mov	r1, fp
 801ba5e:	4620      	mov	r0, r4
 801ba60:	f7fb fee0 	bl	8017824 <rcutils_strndup>
 801ba64:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801ba66:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801ba68:	4798      	blx	r3
 801ba6a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801ba6c:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801ba6e:	4650      	mov	r0, sl
 801ba70:	4798      	blx	r3
 801ba72:	2569      	movs	r5, #105	@ 0x69
 801ba74:	e7d1      	b.n	801ba1a <rcl_expand_topic_name+0x16a>
 801ba76:	2800      	cmp	r0, #0
 801ba78:	d059      	beq.n	801bb2e <rcl_expand_topic_name+0x27e>
 801ba7a:	46c1      	mov	r9, r8
 801ba7c:	46aa      	mov	sl, r5
 801ba7e:	e781      	b.n	801b984 <rcl_expand_topic_name+0xd4>
 801ba80:	46b1      	mov	r9, r6
 801ba82:	e7a1      	b.n	801b9c8 <rcl_expand_topic_name+0x118>
 801ba84:	f89a 3000 	ldrb.w	r3, [sl]
 801ba88:	2b2f      	cmp	r3, #47	@ 0x2f
 801ba8a:	d01c      	beq.n	801bac6 <rcl_expand_topic_name+0x216>
 801ba8c:	4638      	mov	r0, r7
 801ba8e:	f7e4 fc17 	bl	80002c0 <strlen>
 801ba92:	4a34      	ldr	r2, [pc, #208]	@ (801bb64 <rcl_expand_topic_name+0x2b4>)
 801ba94:	4b34      	ldr	r3, [pc, #208]	@ (801bb68 <rcl_expand_topic_name+0x2b8>)
 801ba96:	f8cd a010 	str.w	sl, [sp, #16]
 801ba9a:	2801      	cmp	r0, #1
 801ba9c:	bf18      	it	ne
 801ba9e:	4613      	movne	r3, r2
 801baa0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 801baa4:	e9cd 1301 	strd	r1, r3, [sp, #4]
 801baa8:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801baaa:	9703      	str	r7, [sp, #12]
 801baac:	9200      	str	r2, [sp, #0]
 801baae:	ab14      	add	r3, sp, #80	@ 0x50
 801bab0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801bab2:	f7fb fd63 	bl	801757c <rcutils_format_string_limit>
 801bab6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801bab8:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801baba:	4604      	mov	r4, r0
 801babc:	4650      	mov	r0, sl
 801babe:	4798      	blx	r3
 801bac0:	46a2      	mov	sl, r4
 801bac2:	4653      	mov	r3, sl
 801bac4:	b33b      	cbz	r3, 801bb16 <rcl_expand_topic_name+0x266>
 801bac6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801bac8:	f8c3 a000 	str.w	sl, [r3]
 801bacc:	e7a5      	b.n	801ba1a <rcl_expand_topic_name+0x16a>
 801bace:	4653      	mov	r3, sl
 801bad0:	9d07      	ldr	r5, [sp, #28]
 801bad2:	2b00      	cmp	r3, #0
 801bad4:	d1d6      	bne.n	801ba84 <rcl_expand_topic_name+0x1d4>
 801bad6:	f898 3000 	ldrb.w	r3, [r8]
 801bada:	2b2f      	cmp	r3, #47	@ 0x2f
 801badc:	d0f3      	beq.n	801bac6 <rcl_expand_topic_name+0x216>
 801bade:	4638      	mov	r0, r7
 801bae0:	f7e4 fbee 	bl	80002c0 <strlen>
 801bae4:	4a1f      	ldr	r2, [pc, #124]	@ (801bb64 <rcl_expand_topic_name+0x2b4>)
 801bae6:	4b20      	ldr	r3, [pc, #128]	@ (801bb68 <rcl_expand_topic_name+0x2b8>)
 801bae8:	f8cd 8010 	str.w	r8, [sp, #16]
 801baec:	2801      	cmp	r0, #1
 801baee:	bf18      	it	ne
 801baf0:	4613      	movne	r3, r2
 801baf2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 801baf6:	e9cd 1301 	strd	r1, r3, [sp, #4]
 801bafa:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801bafc:	9703      	str	r7, [sp, #12]
 801bafe:	9200      	str	r2, [sp, #0]
 801bb00:	ab14      	add	r3, sp, #80	@ 0x50
 801bb02:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801bb04:	f7fb fd3a 	bl	801757c <rcutils_format_string_limit>
 801bb08:	4682      	mov	sl, r0
 801bb0a:	e7da      	b.n	801bac2 <rcl_expand_topic_name+0x212>
 801bb0c:	25ca      	movs	r5, #202	@ 0xca
 801bb0e:	e784      	b.n	801ba1a <rcl_expand_topic_name+0x16a>
 801bb10:	2800      	cmp	r0, #0
 801bb12:	d1b2      	bne.n	801ba7a <rcl_expand_topic_name+0x1ca>
 801bb14:	e7e3      	b.n	801bade <rcl_expand_topic_name+0x22e>
 801bb16:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801bb18:	2300      	movs	r3, #0
 801bb1a:	6013      	str	r3, [r2, #0]
 801bb1c:	250a      	movs	r5, #10
 801bb1e:	e77c      	b.n	801ba1a <rcl_expand_topic_name+0x16a>
 801bb20:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	@ 0x60
 801bb24:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801bb26:	6014      	str	r4, [r2, #0]
 801bb28:	4650      	mov	r0, sl
 801bb2a:	4798      	blx	r3
 801bb2c:	e7f6      	b.n	801bb1c <rcl_expand_topic_name+0x26c>
 801bb2e:	ab17      	add	r3, sp, #92	@ 0x5c
 801bb30:	e893 0003 	ldmia.w	r3, {r0, r1}
 801bb34:	e88d 0003 	stmia.w	sp, {r0, r1}
 801bb38:	ab14      	add	r3, sp, #80	@ 0x50
 801bb3a:	cb0e      	ldmia	r3, {r1, r2, r3}
 801bb3c:	4640      	mov	r0, r8
 801bb3e:	f7fb fe3b 	bl	80177b8 <rcutils_strdup>
 801bb42:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801bb44:	6018      	str	r0, [r3, #0]
 801bb46:	2800      	cmp	r0, #0
 801bb48:	f47f af67 	bne.w	801ba1a <rcl_expand_topic_name+0x16a>
 801bb4c:	e7e6      	b.n	801bb1c <rcl_expand_topic_name+0x26c>
 801bb4e:	bf00      	nop
 801bb50:	0801edd8 	.word	0x0801edd8
 801bb54:	0801f8b0 	.word	0x0801f8b0
 801bb58:	0801f8b8 	.word	0x0801f8b8
 801bb5c:	0801f8c0 	.word	0x0801f8c0
 801bb60:	0801f8c8 	.word	0x0801f8c8
 801bb64:	0801f420 	.word	0x0801f420
 801bb68:	0801ede8 	.word	0x0801ede8

0801bb6c <rcl_get_default_topic_name_substitutions>:
 801bb6c:	2800      	cmp	r0, #0
 801bb6e:	bf0c      	ite	eq
 801bb70:	200b      	moveq	r0, #11
 801bb72:	2000      	movne	r0, #0
 801bb74:	4770      	bx	lr
 801bb76:	bf00      	nop

0801bb78 <rcl_get_zero_initialized_guard_condition>:
 801bb78:	4a03      	ldr	r2, [pc, #12]	@ (801bb88 <rcl_get_zero_initialized_guard_condition+0x10>)
 801bb7a:	4603      	mov	r3, r0
 801bb7c:	e892 0003 	ldmia.w	r2, {r0, r1}
 801bb80:	e883 0003 	stmia.w	r3, {r0, r1}
 801bb84:	4618      	mov	r0, r3
 801bb86:	4770      	bx	lr
 801bb88:	08020890 	.word	0x08020890

0801bb8c <rcl_guard_condition_init_from_rmw>:
 801bb8c:	b082      	sub	sp, #8
 801bb8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bb92:	b086      	sub	sp, #24
 801bb94:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 801bb98:	4604      	mov	r4, r0
 801bb9a:	f84c 3f04 	str.w	r3, [ip, #4]!
 801bb9e:	460e      	mov	r6, r1
 801bba0:	4617      	mov	r7, r2
 801bba2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801bba6:	f10d 0e04 	add.w	lr, sp, #4
 801bbaa:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801bbae:	f8dc 3000 	ldr.w	r3, [ip]
 801bbb2:	f8ce 3000 	str.w	r3, [lr]
 801bbb6:	a801      	add	r0, sp, #4
 801bbb8:	f7f1 fb50 	bl	800d25c <rcutils_allocator_is_valid>
 801bbbc:	b350      	cbz	r0, 801bc14 <rcl_guard_condition_init_from_rmw+0x88>
 801bbbe:	b34c      	cbz	r4, 801bc14 <rcl_guard_condition_init_from_rmw+0x88>
 801bbc0:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801bbc4:	f1b8 0f00 	cmp.w	r8, #0
 801bbc8:	d11e      	bne.n	801bc08 <rcl_guard_condition_init_from_rmw+0x7c>
 801bbca:	b31f      	cbz	r7, 801bc14 <rcl_guard_condition_init_from_rmw+0x88>
 801bbcc:	4638      	mov	r0, r7
 801bbce:	f7f8 fe69 	bl	80148a4 <rcl_context_is_valid>
 801bbd2:	b328      	cbz	r0, 801bc20 <rcl_guard_condition_init_from_rmw+0x94>
 801bbd4:	9b01      	ldr	r3, [sp, #4]
 801bbd6:	9905      	ldr	r1, [sp, #20]
 801bbd8:	201c      	movs	r0, #28
 801bbda:	4798      	blx	r3
 801bbdc:	4605      	mov	r5, r0
 801bbde:	6060      	str	r0, [r4, #4]
 801bbe0:	b358      	cbz	r0, 801bc3a <rcl_guard_condition_init_from_rmw+0xae>
 801bbe2:	b1fe      	cbz	r6, 801bc24 <rcl_guard_condition_init_from_rmw+0x98>
 801bbe4:	6006      	str	r6, [r0, #0]
 801bbe6:	f880 8004 	strb.w	r8, [r0, #4]
 801bbea:	ac01      	add	r4, sp, #4
 801bbec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801bbee:	f105 0c08 	add.w	ip, r5, #8
 801bbf2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801bbf6:	6823      	ldr	r3, [r4, #0]
 801bbf8:	f8cc 3000 	str.w	r3, [ip]
 801bbfc:	2000      	movs	r0, #0
 801bbfe:	b006      	add	sp, #24
 801bc00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801bc04:	b002      	add	sp, #8
 801bc06:	4770      	bx	lr
 801bc08:	2064      	movs	r0, #100	@ 0x64
 801bc0a:	b006      	add	sp, #24
 801bc0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801bc10:	b002      	add	sp, #8
 801bc12:	4770      	bx	lr
 801bc14:	200b      	movs	r0, #11
 801bc16:	b006      	add	sp, #24
 801bc18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801bc1c:	b002      	add	sp, #8
 801bc1e:	4770      	bx	lr
 801bc20:	2065      	movs	r0, #101	@ 0x65
 801bc22:	e7f2      	b.n	801bc0a <rcl_guard_condition_init_from_rmw+0x7e>
 801bc24:	6838      	ldr	r0, [r7, #0]
 801bc26:	3028      	adds	r0, #40	@ 0x28
 801bc28:	f000 fb7a 	bl	801c320 <rmw_create_guard_condition>
 801bc2c:	6028      	str	r0, [r5, #0]
 801bc2e:	6865      	ldr	r5, [r4, #4]
 801bc30:	682e      	ldr	r6, [r5, #0]
 801bc32:	b126      	cbz	r6, 801bc3e <rcl_guard_condition_init_from_rmw+0xb2>
 801bc34:	2301      	movs	r3, #1
 801bc36:	712b      	strb	r3, [r5, #4]
 801bc38:	e7d7      	b.n	801bbea <rcl_guard_condition_init_from_rmw+0x5e>
 801bc3a:	200a      	movs	r0, #10
 801bc3c:	e7e5      	b.n	801bc0a <rcl_guard_condition_init_from_rmw+0x7e>
 801bc3e:	4628      	mov	r0, r5
 801bc40:	9b02      	ldr	r3, [sp, #8]
 801bc42:	9905      	ldr	r1, [sp, #20]
 801bc44:	4798      	blx	r3
 801bc46:	2001      	movs	r0, #1
 801bc48:	6066      	str	r6, [r4, #4]
 801bc4a:	e7de      	b.n	801bc0a <rcl_guard_condition_init_from_rmw+0x7e>

0801bc4c <rcl_guard_condition_fini>:
 801bc4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bc4e:	b1d8      	cbz	r0, 801bc88 <rcl_guard_condition_fini+0x3c>
 801bc50:	4604      	mov	r4, r0
 801bc52:	6840      	ldr	r0, [r0, #4]
 801bc54:	b158      	cbz	r0, 801bc6e <rcl_guard_condition_fini+0x22>
 801bc56:	6803      	ldr	r3, [r0, #0]
 801bc58:	68c6      	ldr	r6, [r0, #12]
 801bc5a:	6987      	ldr	r7, [r0, #24]
 801bc5c:	b153      	cbz	r3, 801bc74 <rcl_guard_condition_fini+0x28>
 801bc5e:	7905      	ldrb	r5, [r0, #4]
 801bc60:	b955      	cbnz	r5, 801bc78 <rcl_guard_condition_fini+0x2c>
 801bc62:	4639      	mov	r1, r7
 801bc64:	47b0      	blx	r6
 801bc66:	2300      	movs	r3, #0
 801bc68:	6063      	str	r3, [r4, #4]
 801bc6a:	4628      	mov	r0, r5
 801bc6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bc6e:	4605      	mov	r5, r0
 801bc70:	4628      	mov	r0, r5
 801bc72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bc74:	461d      	mov	r5, r3
 801bc76:	e7f4      	b.n	801bc62 <rcl_guard_condition_fini+0x16>
 801bc78:	4618      	mov	r0, r3
 801bc7a:	f000 fb65 	bl	801c348 <rmw_destroy_guard_condition>
 801bc7e:	1e05      	subs	r5, r0, #0
 801bc80:	bf18      	it	ne
 801bc82:	2501      	movne	r5, #1
 801bc84:	6860      	ldr	r0, [r4, #4]
 801bc86:	e7ec      	b.n	801bc62 <rcl_guard_condition_fini+0x16>
 801bc88:	250b      	movs	r5, #11
 801bc8a:	4628      	mov	r0, r5
 801bc8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bc8e:	bf00      	nop

0801bc90 <rcl_guard_condition_get_default_options>:
 801bc90:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bc92:	b087      	sub	sp, #28
 801bc94:	4606      	mov	r6, r0
 801bc96:	4668      	mov	r0, sp
 801bc98:	f7f1 fab4 	bl	800d204 <rcutils_get_default_allocator>
 801bc9c:	46ee      	mov	lr, sp
 801bc9e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801bca2:	4c08      	ldr	r4, [pc, #32]	@ (801bcc4 <rcl_guard_condition_get_default_options+0x34>)
 801bca4:	46a4      	mov	ip, r4
 801bca6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801bcaa:	4625      	mov	r5, r4
 801bcac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801bcae:	4634      	mov	r4, r6
 801bcb0:	f8de 7000 	ldr.w	r7, [lr]
 801bcb4:	f8cc 7000 	str.w	r7, [ip]
 801bcb8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801bcba:	4630      	mov	r0, r6
 801bcbc:	6027      	str	r7, [r4, #0]
 801bcbe:	b007      	add	sp, #28
 801bcc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bcc2:	bf00      	nop
 801bcc4:	20019c10 	.word	0x20019c10

0801bcc8 <rcl_guard_condition_get_rmw_handle>:
 801bcc8:	b110      	cbz	r0, 801bcd0 <rcl_guard_condition_get_rmw_handle+0x8>
 801bcca:	6840      	ldr	r0, [r0, #4]
 801bccc:	b100      	cbz	r0, 801bcd0 <rcl_guard_condition_get_rmw_handle+0x8>
 801bcce:	6800      	ldr	r0, [r0, #0]
 801bcd0:	4770      	bx	lr
 801bcd2:	bf00      	nop

0801bcd4 <rcl_validate_topic_name>:
 801bcd4:	2800      	cmp	r0, #0
 801bcd6:	d06b      	beq.n	801bdb0 <rcl_validate_topic_name+0xdc>
 801bcd8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bcdc:	460d      	mov	r5, r1
 801bcde:	2900      	cmp	r1, #0
 801bce0:	d06d      	beq.n	801bdbe <rcl_validate_topic_name+0xea>
 801bce2:	4616      	mov	r6, r2
 801bce4:	4604      	mov	r4, r0
 801bce6:	f7e4 faeb 	bl	80002c0 <strlen>
 801bcea:	b190      	cbz	r0, 801bd12 <rcl_validate_topic_name+0x3e>
 801bcec:	7821      	ldrb	r1, [r4, #0]
 801bcee:	4a71      	ldr	r2, [pc, #452]	@ (801beb4 <rcl_validate_topic_name+0x1e0>)
 801bcf0:	5c53      	ldrb	r3, [r2, r1]
 801bcf2:	f013 0304 	ands.w	r3, r3, #4
 801bcf6:	d15d      	bne.n	801bdb4 <rcl_validate_topic_name+0xe0>
 801bcf8:	1e47      	subs	r7, r0, #1
 801bcfa:	f814 c007 	ldrb.w	ip, [r4, r7]
 801bcfe:	f1bc 0f2f 	cmp.w	ip, #47	@ 0x2f
 801bd02:	d10d      	bne.n	801bd20 <rcl_validate_topic_name+0x4c>
 801bd04:	2302      	movs	r3, #2
 801bd06:	602b      	str	r3, [r5, #0]
 801bd08:	b146      	cbz	r6, 801bd1c <rcl_validate_topic_name+0x48>
 801bd0a:	6037      	str	r7, [r6, #0]
 801bd0c:	2000      	movs	r0, #0
 801bd0e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bd12:	2301      	movs	r3, #1
 801bd14:	602b      	str	r3, [r5, #0]
 801bd16:	b10e      	cbz	r6, 801bd1c <rcl_validate_topic_name+0x48>
 801bd18:	2300      	movs	r3, #0
 801bd1a:	6033      	str	r3, [r6, #0]
 801bd1c:	2000      	movs	r0, #0
 801bd1e:	e7f6      	b.n	801bd0e <rcl_validate_topic_name+0x3a>
 801bd20:	f104 38ff 	add.w	r8, r4, #4294967295	@ 0xffffffff
 801bd24:	469a      	mov	sl, r3
 801bd26:	469e      	mov	lr, r3
 801bd28:	f818 9f01 	ldrb.w	r9, [r8, #1]!
 801bd2c:	f1a9 0c2f 	sub.w	ip, r9, #47	@ 0x2f
 801bd30:	f1bc 0f4f 	cmp.w	ip, #79	@ 0x4f
 801bd34:	d85b      	bhi.n	801bdee <rcl_validate_topic_name+0x11a>
 801bd36:	e8df f00c 	tbb	[pc, ip]
 801bd3a:	4463      	.short	0x4463
 801bd3c:	44444444 	.word	0x44444444
 801bd40:	44444444 	.word	0x44444444
 801bd44:	5a5a5a44 	.word	0x5a5a5a44
 801bd48:	5a5a5a5a 	.word	0x5a5a5a5a
 801bd4c:	44444444 	.word	0x44444444
 801bd50:	44444444 	.word	0x44444444
 801bd54:	44444444 	.word	0x44444444
 801bd58:	44444444 	.word	0x44444444
 801bd5c:	44444444 	.word	0x44444444
 801bd60:	44444444 	.word	0x44444444
 801bd64:	5a5a4444 	.word	0x5a5a4444
 801bd68:	5a2e5a5a 	.word	0x5a2e5a5a
 801bd6c:	44444444 	.word	0x44444444
 801bd70:	44444444 	.word	0x44444444
 801bd74:	44444444 	.word	0x44444444
 801bd78:	44444444 	.word	0x44444444
 801bd7c:	44444444 	.word	0x44444444
 801bd80:	44444444 	.word	0x44444444
 801bd84:	5a284444 	.word	0x5a284444
 801bd88:	6b73      	.short	0x6b73
 801bd8a:	f1ba 0f00 	cmp.w	sl, #0
 801bd8e:	d13a      	bne.n	801be06 <rcl_validate_topic_name+0x132>
 801bd90:	4673      	mov	r3, lr
 801bd92:	f04f 0a01 	mov.w	sl, #1
 801bd96:	f10e 0e01 	add.w	lr, lr, #1
 801bd9a:	4570      	cmp	r0, lr
 801bd9c:	d1c4      	bne.n	801bd28 <rcl_validate_topic_name+0x54>
 801bd9e:	f1ba 0f00 	cmp.w	sl, #0
 801bda2:	d048      	beq.n	801be36 <rcl_validate_topic_name+0x162>
 801bda4:	2205      	movs	r2, #5
 801bda6:	602a      	str	r2, [r5, #0]
 801bda8:	2e00      	cmp	r6, #0
 801bdaa:	d0b7      	beq.n	801bd1c <rcl_validate_topic_name+0x48>
 801bdac:	6033      	str	r3, [r6, #0]
 801bdae:	e7b5      	b.n	801bd1c <rcl_validate_topic_name+0x48>
 801bdb0:	200b      	movs	r0, #11
 801bdb2:	4770      	bx	lr
 801bdb4:	2304      	movs	r3, #4
 801bdb6:	602b      	str	r3, [r5, #0]
 801bdb8:	2e00      	cmp	r6, #0
 801bdba:	d1ad      	bne.n	801bd18 <rcl_validate_topic_name+0x44>
 801bdbc:	e7ae      	b.n	801bd1c <rcl_validate_topic_name+0x48>
 801bdbe:	200b      	movs	r0, #11
 801bdc0:	e7a5      	b.n	801bd0e <rcl_validate_topic_name+0x3a>
 801bdc2:	f812 c009 	ldrb.w	ip, [r2, r9]
 801bdc6:	f01c 0f04 	tst.w	ip, #4
 801bdca:	d0e4      	beq.n	801bd96 <rcl_validate_topic_name+0xc2>
 801bdcc:	f1ba 0f00 	cmp.w	sl, #0
 801bdd0:	d0e1      	beq.n	801bd96 <rcl_validate_topic_name+0xc2>
 801bdd2:	f1be 0f00 	cmp.w	lr, #0
 801bdd6:	d0de      	beq.n	801bd96 <rcl_validate_topic_name+0xc2>
 801bdd8:	f10e 3cff 	add.w	ip, lr, #4294967295	@ 0xffffffff
 801bddc:	4563      	cmp	r3, ip
 801bdde:	d1da      	bne.n	801bd96 <rcl_validate_topic_name+0xc2>
 801bde0:	2309      	movs	r3, #9
 801bde2:	602b      	str	r3, [r5, #0]
 801bde4:	2e00      	cmp	r6, #0
 801bde6:	d099      	beq.n	801bd1c <rcl_validate_topic_name+0x48>
 801bde8:	f8c6 e000 	str.w	lr, [r6]
 801bdec:	e796      	b.n	801bd1c <rcl_validate_topic_name+0x48>
 801bdee:	f1ba 0f00 	cmp.w	sl, #0
 801bdf2:	bf0c      	ite	eq
 801bdf4:	2303      	moveq	r3, #3
 801bdf6:	2308      	movne	r3, #8
 801bdf8:	602b      	str	r3, [r5, #0]
 801bdfa:	2e00      	cmp	r6, #0
 801bdfc:	d1f4      	bne.n	801bde8 <rcl_validate_topic_name+0x114>
 801bdfe:	e78d      	b.n	801bd1c <rcl_validate_topic_name+0x48>
 801be00:	f1ba 0f00 	cmp.w	sl, #0
 801be04:	d0c7      	beq.n	801bd96 <rcl_validate_topic_name+0xc2>
 801be06:	2308      	movs	r3, #8
 801be08:	602b      	str	r3, [r5, #0]
 801be0a:	2e00      	cmp	r6, #0
 801be0c:	d1ec      	bne.n	801bde8 <rcl_validate_topic_name+0x114>
 801be0e:	e785      	b.n	801bd1c <rcl_validate_topic_name+0x48>
 801be10:	f1be 0f00 	cmp.w	lr, #0
 801be14:	d0bf      	beq.n	801bd96 <rcl_validate_topic_name+0xc2>
 801be16:	2306      	movs	r3, #6
 801be18:	602b      	str	r3, [r5, #0]
 801be1a:	2e00      	cmp	r6, #0
 801be1c:	d1e4      	bne.n	801bde8 <rcl_validate_topic_name+0x114>
 801be1e:	e77d      	b.n	801bd1c <rcl_validate_topic_name+0x48>
 801be20:	f1ba 0f00 	cmp.w	sl, #0
 801be24:	d104      	bne.n	801be30 <rcl_validate_topic_name+0x15c>
 801be26:	2305      	movs	r3, #5
 801be28:	602b      	str	r3, [r5, #0]
 801be2a:	2e00      	cmp	r6, #0
 801be2c:	d1dc      	bne.n	801bde8 <rcl_validate_topic_name+0x114>
 801be2e:	e775      	b.n	801bd1c <rcl_validate_topic_name+0x48>
 801be30:	f04f 0a00 	mov.w	sl, #0
 801be34:	e7af      	b.n	801bd96 <rcl_validate_topic_name+0xc2>
 801be36:	297e      	cmp	r1, #126	@ 0x7e
 801be38:	d01d      	beq.n	801be76 <rcl_validate_topic_name+0x1a2>
 801be3a:	2101      	movs	r1, #1
 801be3c:	e006      	b.n	801be4c <rcl_validate_topic_name+0x178>
 801be3e:	458e      	cmp	lr, r1
 801be40:	f104 0401 	add.w	r4, r4, #1
 801be44:	f101 0301 	add.w	r3, r1, #1
 801be48:	d912      	bls.n	801be70 <rcl_validate_topic_name+0x19c>
 801be4a:	4619      	mov	r1, r3
 801be4c:	4557      	cmp	r7, sl
 801be4e:	f10a 0a01 	add.w	sl, sl, #1
 801be52:	d0f4      	beq.n	801be3e <rcl_validate_topic_name+0x16a>
 801be54:	7823      	ldrb	r3, [r4, #0]
 801be56:	2b2f      	cmp	r3, #47	@ 0x2f
 801be58:	d1f1      	bne.n	801be3e <rcl_validate_topic_name+0x16a>
 801be5a:	7863      	ldrb	r3, [r4, #1]
 801be5c:	5cd3      	ldrb	r3, [r2, r3]
 801be5e:	075b      	lsls	r3, r3, #29
 801be60:	d5ed      	bpl.n	801be3e <rcl_validate_topic_name+0x16a>
 801be62:	2304      	movs	r3, #4
 801be64:	602b      	str	r3, [r5, #0]
 801be66:	2e00      	cmp	r6, #0
 801be68:	f43f af58 	beq.w	801bd1c <rcl_validate_topic_name+0x48>
 801be6c:	6031      	str	r1, [r6, #0]
 801be6e:	e755      	b.n	801bd1c <rcl_validate_topic_name+0x48>
 801be70:	2300      	movs	r3, #0
 801be72:	602b      	str	r3, [r5, #0]
 801be74:	e752      	b.n	801bd1c <rcl_validate_topic_name+0x48>
 801be76:	4653      	mov	r3, sl
 801be78:	2101      	movs	r1, #1
 801be7a:	e00a      	b.n	801be92 <rcl_validate_topic_name+0x1be>
 801be7c:	2b01      	cmp	r3, #1
 801be7e:	d012      	beq.n	801bea6 <rcl_validate_topic_name+0x1d2>
 801be80:	458e      	cmp	lr, r1
 801be82:	f103 0301 	add.w	r3, r3, #1
 801be86:	f104 0401 	add.w	r4, r4, #1
 801be8a:	f101 0001 	add.w	r0, r1, #1
 801be8e:	d9ef      	bls.n	801be70 <rcl_validate_topic_name+0x19c>
 801be90:	4601      	mov	r1, r0
 801be92:	429f      	cmp	r7, r3
 801be94:	d0f4      	beq.n	801be80 <rcl_validate_topic_name+0x1ac>
 801be96:	7820      	ldrb	r0, [r4, #0]
 801be98:	282f      	cmp	r0, #47	@ 0x2f
 801be9a:	d1ef      	bne.n	801be7c <rcl_validate_topic_name+0x1a8>
 801be9c:	7860      	ldrb	r0, [r4, #1]
 801be9e:	5c10      	ldrb	r0, [r2, r0]
 801bea0:	0740      	lsls	r0, r0, #29
 801bea2:	d5ed      	bpl.n	801be80 <rcl_validate_topic_name+0x1ac>
 801bea4:	e7dd      	b.n	801be62 <rcl_validate_topic_name+0x18e>
 801bea6:	2207      	movs	r2, #7
 801bea8:	602a      	str	r2, [r5, #0]
 801beaa:	2e00      	cmp	r6, #0
 801beac:	f47f af7e 	bne.w	801bdac <rcl_validate_topic_name+0xd8>
 801beb0:	e734      	b.n	801bd1c <rcl_validate_topic_name+0x48>
 801beb2:	bf00      	nop
 801beb4:	080209e9 	.word	0x080209e9

0801beb8 <rcutils_split>:
 801beb8:	b082      	sub	sp, #8
 801beba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bebe:	b08b      	sub	sp, #44	@ 0x2c
 801bec0:	ac14      	add	r4, sp, #80	@ 0x50
 801bec2:	9f19      	ldr	r7, [sp, #100]	@ 0x64
 801bec4:	e884 000c 	stmia.w	r4, {r2, r3}
 801bec8:	2f00      	cmp	r7, #0
 801beca:	f000 809f 	beq.w	801c00c <rcutils_split+0x154>
 801bece:	4606      	mov	r6, r0
 801bed0:	2800      	cmp	r0, #0
 801bed2:	d071      	beq.n	801bfb8 <rcutils_split+0x100>
 801bed4:	7804      	ldrb	r4, [r0, #0]
 801bed6:	2c00      	cmp	r4, #0
 801bed8:	d06e      	beq.n	801bfb8 <rcutils_split+0x100>
 801beda:	460d      	mov	r5, r1
 801bedc:	f7e4 f9f0 	bl	80002c0 <strlen>
 801bee0:	1833      	adds	r3, r6, r0
 801bee2:	1b64      	subs	r4, r4, r5
 801bee4:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801bee8:	4680      	mov	r8, r0
 801beea:	fab4 f484 	clz	r4, r4
 801beee:	0964      	lsrs	r4, r4, #5
 801bef0:	42ab      	cmp	r3, r5
 801bef2:	bf08      	it	eq
 801bef4:	f1a8 0801 	subeq.w	r8, r8, #1
 801bef8:	4544      	cmp	r4, r8
 801befa:	d278      	bcs.n	801bfee <rcutils_split+0x136>
 801befc:	1933      	adds	r3, r6, r4
 801befe:	eb06 0008 	add.w	r0, r6, r8
 801bf02:	2101      	movs	r1, #1
 801bf04:	f813 2b01 	ldrb.w	r2, [r3], #1
 801bf08:	42aa      	cmp	r2, r5
 801bf0a:	bf08      	it	eq
 801bf0c:	3101      	addeq	r1, #1
 801bf0e:	4283      	cmp	r3, r0
 801bf10:	d1f8      	bne.n	801bf04 <rcutils_split+0x4c>
 801bf12:	aa14      	add	r2, sp, #80	@ 0x50
 801bf14:	4638      	mov	r0, r7
 801bf16:	f000 f89f 	bl	801c058 <rcutils_string_array_init>
 801bf1a:	4681      	mov	r9, r0
 801bf1c:	2800      	cmp	r0, #0
 801bf1e:	d159      	bne.n	801bfd4 <rcutils_split+0x11c>
 801bf20:	687a      	ldr	r2, [r7, #4]
 801bf22:	46a2      	mov	sl, r4
 801bf24:	e002      	b.n	801bf2c <rcutils_split+0x74>
 801bf26:	3401      	adds	r4, #1
 801bf28:	4544      	cmp	r4, r8
 801bf2a:	d222      	bcs.n	801bf72 <rcutils_split+0xba>
 801bf2c:	5d33      	ldrb	r3, [r6, r4]
 801bf2e:	42ab      	cmp	r3, r5
 801bf30:	d1f9      	bne.n	801bf26 <rcutils_split+0x6e>
 801bf32:	4554      	cmp	r4, sl
 801bf34:	eba4 0b0a 	sub.w	fp, r4, sl
 801bf38:	d037      	beq.n	801bfaa <rcutils_split+0xf2>
 801bf3a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801bf3c:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801bf3e:	9201      	str	r2, [sp, #4]
 801bf40:	f10b 0002 	add.w	r0, fp, #2
 801bf44:	4798      	blx	r3
 801bf46:	9a01      	ldr	r2, [sp, #4]
 801bf48:	f842 0029 	str.w	r0, [r2, r9, lsl #2]
 801bf4c:	687a      	ldr	r2, [r7, #4]
 801bf4e:	f852 0029 	ldr.w	r0, [r2, r9, lsl #2]
 801bf52:	eb06 030a 	add.w	r3, r6, sl
 801bf56:	f10b 0101 	add.w	r1, fp, #1
 801bf5a:	2800      	cmp	r0, #0
 801bf5c:	d038      	beq.n	801bfd0 <rcutils_split+0x118>
 801bf5e:	4a2e      	ldr	r2, [pc, #184]	@ (801c018 <rcutils_split+0x160>)
 801bf60:	f000 ff48 	bl	801cdf4 <sniprintf>
 801bf64:	687a      	ldr	r2, [r7, #4]
 801bf66:	f109 0901 	add.w	r9, r9, #1
 801bf6a:	3401      	adds	r4, #1
 801bf6c:	4544      	cmp	r4, r8
 801bf6e:	46a2      	mov	sl, r4
 801bf70:	d3dc      	bcc.n	801bf2c <rcutils_split+0x74>
 801bf72:	4554      	cmp	r4, sl
 801bf74:	d043      	beq.n	801bffe <rcutils_split+0x146>
 801bf76:	eba4 040a 	sub.w	r4, r4, sl
 801bf7a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801bf7c:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801bf7e:	9201      	str	r2, [sp, #4]
 801bf80:	1ca0      	adds	r0, r4, #2
 801bf82:	4798      	blx	r3
 801bf84:	9a01      	ldr	r2, [sp, #4]
 801bf86:	687b      	ldr	r3, [r7, #4]
 801bf88:	f842 0029 	str.w	r0, [r2, r9, lsl #2]
 801bf8c:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
 801bf90:	b300      	cbz	r0, 801bfd4 <rcutils_split+0x11c>
 801bf92:	4a21      	ldr	r2, [pc, #132]	@ (801c018 <rcutils_split+0x160>)
 801bf94:	eb06 030a 	add.w	r3, r6, sl
 801bf98:	1c61      	adds	r1, r4, #1
 801bf9a:	f000 ff2b 	bl	801cdf4 <sniprintf>
 801bf9e:	2000      	movs	r0, #0
 801bfa0:	b00b      	add	sp, #44	@ 0x2c
 801bfa2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bfa6:	b002      	add	sp, #8
 801bfa8:	4770      	bx	lr
 801bfaa:	683b      	ldr	r3, [r7, #0]
 801bfac:	3b01      	subs	r3, #1
 801bfae:	2100      	movs	r1, #0
 801bfb0:	603b      	str	r3, [r7, #0]
 801bfb2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 801bfb6:	e7d8      	b.n	801bf6a <rcutils_split+0xb2>
 801bfb8:	a802      	add	r0, sp, #8
 801bfba:	ac02      	add	r4, sp, #8
 801bfbc:	f000 f82e 	bl	801c01c <rcutils_get_zero_initialized_string_array>
 801bfc0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801bfc2:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801bfc4:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801bfc8:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 801bfcc:	2000      	movs	r0, #0
 801bfce:	e7e7      	b.n	801bfa0 <rcutils_split+0xe8>
 801bfd0:	f8c7 9000 	str.w	r9, [r7]
 801bfd4:	4638      	mov	r0, r7
 801bfd6:	f000 f861 	bl	801c09c <rcutils_string_array_fini>
 801bfda:	b928      	cbnz	r0, 801bfe8 <rcutils_split+0x130>
 801bfdc:	200a      	movs	r0, #10
 801bfde:	b00b      	add	sp, #44	@ 0x2c
 801bfe0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bfe4:	b002      	add	sp, #8
 801bfe6:	4770      	bx	lr
 801bfe8:	f7f1 f95e 	bl	800d2a8 <rcutils_reset_error>
 801bfec:	e7f6      	b.n	801bfdc <rcutils_split+0x124>
 801bfee:	aa14      	add	r2, sp, #80	@ 0x50
 801bff0:	2101      	movs	r1, #1
 801bff2:	4638      	mov	r0, r7
 801bff4:	f000 f830 	bl	801c058 <rcutils_string_array_init>
 801bff8:	2800      	cmp	r0, #0
 801bffa:	d1eb      	bne.n	801bfd4 <rcutils_split+0x11c>
 801bffc:	687a      	ldr	r2, [r7, #4]
 801bffe:	683b      	ldr	r3, [r7, #0]
 801c000:	3b01      	subs	r3, #1
 801c002:	2100      	movs	r1, #0
 801c004:	603b      	str	r3, [r7, #0]
 801c006:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 801c00a:	e7df      	b.n	801bfcc <rcutils_split+0x114>
 801c00c:	200b      	movs	r0, #11
 801c00e:	b00b      	add	sp, #44	@ 0x2c
 801c010:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c014:	b002      	add	sp, #8
 801c016:	4770      	bx	lr
 801c018:	0801eddc 	.word	0x0801eddc

0801c01c <rcutils_get_zero_initialized_string_array>:
 801c01c:	b570      	push	{r4, r5, r6, lr}
 801c01e:	b086      	sub	sp, #24
 801c020:	4606      	mov	r6, r0
 801c022:	4668      	mov	r0, sp
 801c024:	f7f1 f8e0 	bl	800d1e8 <rcutils_get_zero_initialized_allocator>
 801c028:	46ee      	mov	lr, sp
 801c02a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801c02e:	4c09      	ldr	r4, [pc, #36]	@ (801c054 <rcutils_get_zero_initialized_string_array+0x38>)
 801c030:	f104 0508 	add.w	r5, r4, #8
 801c034:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801c036:	46a4      	mov	ip, r4
 801c038:	f8de 3000 	ldr.w	r3, [lr]
 801c03c:	602b      	str	r3, [r5, #0]
 801c03e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801c042:	4634      	mov	r4, r6
 801c044:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801c046:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 801c04a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801c04e:	4630      	mov	r0, r6
 801c050:	b006      	add	sp, #24
 801c052:	bd70      	pop	{r4, r5, r6, pc}
 801c054:	20019c24 	.word	0x20019c24

0801c058 <rcutils_string_array_init>:
 801c058:	b1da      	cbz	r2, 801c092 <rcutils_string_array_init+0x3a>
 801c05a:	b570      	push	{r4, r5, r6, lr}
 801c05c:	4605      	mov	r5, r0
 801c05e:	b1d0      	cbz	r0, 801c096 <rcutils_string_array_init+0x3e>
 801c060:	460e      	mov	r6, r1
 801c062:	4614      	mov	r4, r2
 801c064:	e9d2 3203 	ldrd	r3, r2, [r2, #12]
 801c068:	6001      	str	r1, [r0, #0]
 801c06a:	2104      	movs	r1, #4
 801c06c:	4630      	mov	r0, r6
 801c06e:	4798      	blx	r3
 801c070:	6068      	str	r0, [r5, #4]
 801c072:	b150      	cbz	r0, 801c08a <rcutils_string_array_init+0x32>
 801c074:	46a4      	mov	ip, r4
 801c076:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801c07a:	f105 0408 	add.w	r4, r5, #8
 801c07e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801c080:	f8dc 3000 	ldr.w	r3, [ip]
 801c084:	6023      	str	r3, [r4, #0]
 801c086:	2000      	movs	r0, #0
 801c088:	bd70      	pop	{r4, r5, r6, pc}
 801c08a:	2e00      	cmp	r6, #0
 801c08c:	d0f2      	beq.n	801c074 <rcutils_string_array_init+0x1c>
 801c08e:	200a      	movs	r0, #10
 801c090:	bd70      	pop	{r4, r5, r6, pc}
 801c092:	200b      	movs	r0, #11
 801c094:	4770      	bx	lr
 801c096:	200b      	movs	r0, #11
 801c098:	bd70      	pop	{r4, r5, r6, pc}
 801c09a:	bf00      	nop

0801c09c <rcutils_string_array_fini>:
 801c09c:	b310      	cbz	r0, 801c0e4 <rcutils_string_array_fini+0x48>
 801c09e:	6843      	ldr	r3, [r0, #4]
 801c0a0:	b570      	push	{r4, r5, r6, lr}
 801c0a2:	4604      	mov	r4, r0
 801c0a4:	b1d3      	cbz	r3, 801c0dc <rcutils_string_array_fini+0x40>
 801c0a6:	3008      	adds	r0, #8
 801c0a8:	f7f1 f8d8 	bl	800d25c <rcutils_allocator_is_valid>
 801c0ac:	b1c0      	cbz	r0, 801c0e0 <rcutils_string_array_fini+0x44>
 801c0ae:	e9d4 3000 	ldrd	r3, r0, [r4]
 801c0b2:	b16b      	cbz	r3, 801c0d0 <rcutils_string_array_fini+0x34>
 801c0b4:	2500      	movs	r5, #0
 801c0b6:	462e      	mov	r6, r5
 801c0b8:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 801c0bc:	68e3      	ldr	r3, [r4, #12]
 801c0be:	69a1      	ldr	r1, [r4, #24]
 801c0c0:	4798      	blx	r3
 801c0c2:	e9d4 3000 	ldrd	r3, r0, [r4]
 801c0c6:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 801c0ca:	3501      	adds	r5, #1
 801c0cc:	42ab      	cmp	r3, r5
 801c0ce:	d8f3      	bhi.n	801c0b8 <rcutils_string_array_fini+0x1c>
 801c0d0:	68e3      	ldr	r3, [r4, #12]
 801c0d2:	69a1      	ldr	r1, [r4, #24]
 801c0d4:	4798      	blx	r3
 801c0d6:	2300      	movs	r3, #0
 801c0d8:	e9c4 3300 	strd	r3, r3, [r4]
 801c0dc:	2000      	movs	r0, #0
 801c0de:	bd70      	pop	{r4, r5, r6, pc}
 801c0e0:	200b      	movs	r0, #11
 801c0e2:	bd70      	pop	{r4, r5, r6, pc}
 801c0e4:	200b      	movs	r0, #11
 801c0e6:	4770      	bx	lr

0801c0e8 <rmw_get_zero_initialized_discovery_options>:
 801c0e8:	b510      	push	{r4, lr}
 801c0ea:	2220      	movs	r2, #32
 801c0ec:	4604      	mov	r4, r0
 801c0ee:	2100      	movs	r1, #0
 801c0f0:	f001 f9ce 	bl	801d490 <memset>
 801c0f4:	4620      	mov	r0, r4
 801c0f6:	bd10      	pop	{r4, pc}

0801c0f8 <rmw_discovery_options_init>:
 801c0f8:	b328      	cbz	r0, 801c146 <rmw_discovery_options_init+0x4e>
 801c0fa:	b570      	push	{r4, r5, r6, lr}
 801c0fc:	4604      	mov	r4, r0
 801c0fe:	4610      	mov	r0, r2
 801c100:	460e      	mov	r6, r1
 801c102:	4615      	mov	r5, r2
 801c104:	f7f1 f8aa 	bl	800d25c <rcutils_allocator_is_valid>
 801c108:	b1d8      	cbz	r0, 801c142 <rmw_discovery_options_init+0x4a>
 801c10a:	68a3      	ldr	r3, [r4, #8]
 801c10c:	b9cb      	cbnz	r3, 801c142 <rmw_discovery_options_init+0x4a>
 801c10e:	6863      	ldr	r3, [r4, #4]
 801c110:	b9bb      	cbnz	r3, 801c142 <rmw_discovery_options_init+0x4a>
 801c112:	7823      	ldrb	r3, [r4, #0]
 801c114:	b90b      	cbnz	r3, 801c11a <rmw_discovery_options_init+0x22>
 801c116:	2302      	movs	r3, #2
 801c118:	7023      	strb	r3, [r4, #0]
 801c11a:	b186      	cbz	r6, 801c13e <rmw_discovery_options_init+0x46>
 801c11c:	e9d5 3203 	ldrd	r3, r2, [r5, #12]
 801c120:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801c124:	4630      	mov	r0, r6
 801c126:	4798      	blx	r3
 801c128:	6060      	str	r0, [r4, #4]
 801c12a:	b170      	cbz	r0, 801c14a <rmw_discovery_options_init+0x52>
 801c12c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801c12e:	f104 0c0c 	add.w	ip, r4, #12
 801c132:	60a6      	str	r6, [r4, #8]
 801c134:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801c138:	682b      	ldr	r3, [r5, #0]
 801c13a:	f8cc 3000 	str.w	r3, [ip]
 801c13e:	2000      	movs	r0, #0
 801c140:	bd70      	pop	{r4, r5, r6, pc}
 801c142:	200b      	movs	r0, #11
 801c144:	bd70      	pop	{r4, r5, r6, pc}
 801c146:	200b      	movs	r0, #11
 801c148:	4770      	bx	lr
 801c14a:	200a      	movs	r0, #10
 801c14c:	bd70      	pop	{r4, r5, r6, pc}
 801c14e:	bf00      	nop

0801c150 <on_status>:
 801c150:	b082      	sub	sp, #8
 801c152:	b002      	add	sp, #8
 801c154:	4770      	bx	lr
 801c156:	bf00      	nop

0801c158 <on_topic>:
 801c158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c15c:	4a22      	ldr	r2, [pc, #136]	@ (801c1e8 <on_topic+0x90>)
 801c15e:	b094      	sub	sp, #80	@ 0x50
 801c160:	6812      	ldr	r2, [r2, #0]
 801c162:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 801c164:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 801c168:	e9cd 3112 	strd	r3, r1, [sp, #72]	@ 0x48
 801c16c:	b3c2      	cbz	r2, 801c1e0 <on_topic+0x88>
 801c16e:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 801c172:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 801c176:	e001      	b.n	801c17c <on_topic+0x24>
 801c178:	6852      	ldr	r2, [r2, #4]
 801c17a:	b38a      	cbz	r2, 801c1e0 <on_topic+0x88>
 801c17c:	6894      	ldr	r4, [r2, #8]
 801c17e:	8aa3      	ldrh	r3, [r4, #20]
 801c180:	428b      	cmp	r3, r1
 801c182:	d1f9      	bne.n	801c178 <on_topic+0x20>
 801c184:	7da3      	ldrb	r3, [r4, #22]
 801c186:	4283      	cmp	r3, r0
 801c188:	d1f6      	bne.n	801c178 <on_topic+0x20>
 801c18a:	2248      	movs	r2, #72	@ 0x48
 801c18c:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 801c190:	4668      	mov	r0, sp
 801c192:	f001 fa12 	bl	801d5ba <memcpy>
 801c196:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 801c19a:	cb0c      	ldmia	r3, {r2, r3}
 801c19c:	4620      	mov	r0, r4
 801c19e:	f7f1 fc8f 	bl	800dac0 <rmw_uxrce_get_static_input_buffer_for_entity>
 801c1a2:	4607      	mov	r7, r0
 801c1a4:	b1e0      	cbz	r0, 801c1e0 <on_topic+0x88>
 801c1a6:	f8d0 8008 	ldr.w	r8, [r0, #8]
 801c1aa:	4632      	mov	r2, r6
 801c1ac:	4628      	mov	r0, r5
 801c1ae:	f108 0110 	add.w	r1, r8, #16
 801c1b2:	f7f3 f81b 	bl	800f1ec <ucdr_deserialize_array_uint8_t>
 801c1b6:	b930      	cbnz	r0, 801c1c6 <on_topic+0x6e>
 801c1b8:	480c      	ldr	r0, [pc, #48]	@ (801c1ec <on_topic+0x94>)
 801c1ba:	4639      	mov	r1, r7
 801c1bc:	b014      	add	sp, #80	@ 0x50
 801c1be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c1c2:	f7fb bea5 	b.w	8017f10 <put_memory>
 801c1c6:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 801c1ca:	f8c8 6810 	str.w	r6, [r8, #2064]	@ 0x810
 801c1ce:	f7fd f8db 	bl	8019388 <rmw_uros_epoch_nanos>
 801c1d2:	2305      	movs	r3, #5
 801c1d4:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 801c1d8:	e942 0102 	strd	r0, r1, [r2, #-8]
 801c1dc:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 801c1e0:	b014      	add	sp, #80	@ 0x50
 801c1e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c1e6:	bf00      	nop
 801c1e8:	20017408 	.word	0x20017408
 801c1ec:	20015988 	.word	0x20015988

0801c1f0 <on_request>:
 801c1f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c1f4:	4823      	ldr	r0, [pc, #140]	@ (801c284 <on_request+0x94>)
 801c1f6:	b094      	sub	sp, #80	@ 0x50
 801c1f8:	6800      	ldr	r0, [r0, #0]
 801c1fa:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 801c1fc:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 801c200:	9113      	str	r1, [sp, #76]	@ 0x4c
 801c202:	2800      	cmp	r0, #0
 801c204:	d03b      	beq.n	801c27e <on_request+0x8e>
 801c206:	461d      	mov	r5, r3
 801c208:	e001      	b.n	801c20e <on_request+0x1e>
 801c20a:	6840      	ldr	r0, [r0, #4]
 801c20c:	b3b8      	cbz	r0, 801c27e <on_request+0x8e>
 801c20e:	6884      	ldr	r4, [r0, #8]
 801c210:	8b21      	ldrh	r1, [r4, #24]
 801c212:	4291      	cmp	r1, r2
 801c214:	d1f9      	bne.n	801c20a <on_request+0x1a>
 801c216:	2248      	movs	r2, #72	@ 0x48
 801c218:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 801c21c:	4668      	mov	r0, sp
 801c21e:	f001 f9cc 	bl	801d5ba <memcpy>
 801c222:	f104 0320 	add.w	r3, r4, #32
 801c226:	cb0c      	ldmia	r3, {r2, r3}
 801c228:	4620      	mov	r0, r4
 801c22a:	f7f1 fc49 	bl	800dac0 <rmw_uxrce_get_static_input_buffer_for_entity>
 801c22e:	4680      	mov	r8, r0
 801c230:	b328      	cbz	r0, 801c27e <on_request+0x8e>
 801c232:	4638      	mov	r0, r7
 801c234:	f8d8 7008 	ldr.w	r7, [r8, #8]
 801c238:	4632      	mov	r2, r6
 801c23a:	f107 0110 	add.w	r1, r7, #16
 801c23e:	f7f2 ffd5 	bl	800f1ec <ucdr_deserialize_array_uint8_t>
 801c242:	b930      	cbnz	r0, 801c252 <on_request+0x62>
 801c244:	4810      	ldr	r0, [pc, #64]	@ (801c288 <on_request+0x98>)
 801c246:	4641      	mov	r1, r8
 801c248:	b014      	add	sp, #80	@ 0x50
 801c24a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c24e:	f7fb be5f 	b.w	8017f10 <put_memory>
 801c252:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801c254:	f607 0c28 	addw	ip, r7, #2088	@ 0x828
 801c258:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 801c25c:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 801c260:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801c264:	e895 0003 	ldmia.w	r5, {r0, r1}
 801c268:	e88c 0003 	stmia.w	ip, {r0, r1}
 801c26c:	f7fd f88c 	bl	8019388 <rmw_uros_epoch_nanos>
 801c270:	2303      	movs	r3, #3
 801c272:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 801c276:	e942 0102 	strd	r0, r1, [r2, #-8]
 801c27a:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 801c27e:	b014      	add	sp, #80	@ 0x50
 801c280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c284:	20016b88 	.word	0x20016b88
 801c288:	20015988 	.word	0x20015988

0801c28c <on_reply>:
 801c28c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c290:	4821      	ldr	r0, [pc, #132]	@ (801c318 <on_reply+0x8c>)
 801c292:	b094      	sub	sp, #80	@ 0x50
 801c294:	6800      	ldr	r0, [r0, #0]
 801c296:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 801c298:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 801c29c:	9113      	str	r1, [sp, #76]	@ 0x4c
 801c29e:	b3b8      	cbz	r0, 801c310 <on_reply+0x84>
 801c2a0:	461d      	mov	r5, r3
 801c2a2:	e001      	b.n	801c2a8 <on_reply+0x1c>
 801c2a4:	6840      	ldr	r0, [r0, #4]
 801c2a6:	b398      	cbz	r0, 801c310 <on_reply+0x84>
 801c2a8:	6884      	ldr	r4, [r0, #8]
 801c2aa:	8b21      	ldrh	r1, [r4, #24]
 801c2ac:	4291      	cmp	r1, r2
 801c2ae:	d1f9      	bne.n	801c2a4 <on_reply+0x18>
 801c2b0:	2248      	movs	r2, #72	@ 0x48
 801c2b2:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 801c2b6:	4668      	mov	r0, sp
 801c2b8:	f001 f97f 	bl	801d5ba <memcpy>
 801c2bc:	f104 0320 	add.w	r3, r4, #32
 801c2c0:	cb0c      	ldmia	r3, {r2, r3}
 801c2c2:	4620      	mov	r0, r4
 801c2c4:	f7f1 fbfc 	bl	800dac0 <rmw_uxrce_get_static_input_buffer_for_entity>
 801c2c8:	4680      	mov	r8, r0
 801c2ca:	b308      	cbz	r0, 801c310 <on_reply+0x84>
 801c2cc:	4638      	mov	r0, r7
 801c2ce:	f8d8 7008 	ldr.w	r7, [r8, #8]
 801c2d2:	4632      	mov	r2, r6
 801c2d4:	f107 0110 	add.w	r1, r7, #16
 801c2d8:	f7f2 ff88 	bl	800f1ec <ucdr_deserialize_array_uint8_t>
 801c2dc:	b930      	cbnz	r0, 801c2ec <on_reply+0x60>
 801c2de:	480f      	ldr	r0, [pc, #60]	@ (801c31c <on_reply+0x90>)
 801c2e0:	4641      	mov	r1, r8
 801c2e2:	b014      	add	sp, #80	@ 0x50
 801c2e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c2e8:	f7fb be12 	b.w	8017f10 <put_memory>
 801c2ec:	2200      	movs	r2, #0
 801c2ee:	f8c7 282c 	str.w	r2, [r7, #2092]	@ 0x82c
 801c2f2:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 801c2f6:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 801c2fa:	f8c7 5828 	str.w	r5, [r7, #2088]	@ 0x828
 801c2fe:	f7fd f843 	bl	8019388 <rmw_uros_epoch_nanos>
 801c302:	2304      	movs	r3, #4
 801c304:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 801c308:	e942 0102 	strd	r0, r1, [r2, #-8]
 801c30c:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 801c310:	b014      	add	sp, #80	@ 0x50
 801c312:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c316:	bf00      	nop
 801c318:	200163a8 	.word	0x200163a8
 801c31c:	20015988 	.word	0x20015988

0801c320 <rmw_create_guard_condition>:
 801c320:	b538      	push	{r3, r4, r5, lr}
 801c322:	4605      	mov	r5, r0
 801c324:	4807      	ldr	r0, [pc, #28]	@ (801c344 <rmw_create_guard_condition+0x24>)
 801c326:	f7fb fde3 	bl	8017ef0 <get_memory>
 801c32a:	b148      	cbz	r0, 801c340 <rmw_create_guard_condition+0x20>
 801c32c:	6884      	ldr	r4, [r0, #8]
 801c32e:	2300      	movs	r3, #0
 801c330:	7423      	strb	r3, [r4, #16]
 801c332:	61e5      	str	r5, [r4, #28]
 801c334:	f7fb fe62 	bl	8017ffc <rmw_get_implementation_identifier>
 801c338:	e9c4 0405 	strd	r0, r4, [r4, #20]
 801c33c:	f104 0014 	add.w	r0, r4, #20
 801c340:	bd38      	pop	{r3, r4, r5, pc}
 801c342:	bf00      	nop
 801c344:	20013764 	.word	0x20013764

0801c348 <rmw_destroy_guard_condition>:
 801c348:	b508      	push	{r3, lr}
 801c34a:	4b08      	ldr	r3, [pc, #32]	@ (801c36c <rmw_destroy_guard_condition+0x24>)
 801c34c:	6819      	ldr	r1, [r3, #0]
 801c34e:	b911      	cbnz	r1, 801c356 <rmw_destroy_guard_condition+0xe>
 801c350:	e00a      	b.n	801c368 <rmw_destroy_guard_condition+0x20>
 801c352:	6849      	ldr	r1, [r1, #4]
 801c354:	b141      	cbz	r1, 801c368 <rmw_destroy_guard_condition+0x20>
 801c356:	688b      	ldr	r3, [r1, #8]
 801c358:	3314      	adds	r3, #20
 801c35a:	4298      	cmp	r0, r3
 801c35c:	d1f9      	bne.n	801c352 <rmw_destroy_guard_condition+0xa>
 801c35e:	4803      	ldr	r0, [pc, #12]	@ (801c36c <rmw_destroy_guard_condition+0x24>)
 801c360:	f7fb fdd6 	bl	8017f10 <put_memory>
 801c364:	2000      	movs	r0, #0
 801c366:	bd08      	pop	{r3, pc}
 801c368:	2001      	movs	r0, #1
 801c36a:	bd08      	pop	{r3, pc}
 801c36c:	20013764 	.word	0x20013764

0801c370 <rosidl_runtime_c__String__init>:
 801c370:	b1b0      	cbz	r0, 801c3a0 <rosidl_runtime_c__String__init+0x30>
 801c372:	b510      	push	{r4, lr}
 801c374:	b086      	sub	sp, #24
 801c376:	4604      	mov	r4, r0
 801c378:	a801      	add	r0, sp, #4
 801c37a:	f7f0 ff43 	bl	800d204 <rcutils_get_default_allocator>
 801c37e:	9b01      	ldr	r3, [sp, #4]
 801c380:	9905      	ldr	r1, [sp, #20]
 801c382:	2001      	movs	r0, #1
 801c384:	4798      	blx	r3
 801c386:	6020      	str	r0, [r4, #0]
 801c388:	b138      	cbz	r0, 801c39a <rosidl_runtime_c__String__init+0x2a>
 801c38a:	2200      	movs	r2, #0
 801c38c:	2301      	movs	r3, #1
 801c38e:	7002      	strb	r2, [r0, #0]
 801c390:	4618      	mov	r0, r3
 801c392:	e9c4 2301 	strd	r2, r3, [r4, #4]
 801c396:	b006      	add	sp, #24
 801c398:	bd10      	pop	{r4, pc}
 801c39a:	2000      	movs	r0, #0
 801c39c:	b006      	add	sp, #24
 801c39e:	bd10      	pop	{r4, pc}
 801c3a0:	2000      	movs	r0, #0
 801c3a2:	4770      	bx	lr

0801c3a4 <rosidl_runtime_c__String__fini>:
 801c3a4:	b320      	cbz	r0, 801c3f0 <rosidl_runtime_c__String__fini+0x4c>
 801c3a6:	b510      	push	{r4, lr}
 801c3a8:	6803      	ldr	r3, [r0, #0]
 801c3aa:	b086      	sub	sp, #24
 801c3ac:	4604      	mov	r4, r0
 801c3ae:	b173      	cbz	r3, 801c3ce <rosidl_runtime_c__String__fini+0x2a>
 801c3b0:	6883      	ldr	r3, [r0, #8]
 801c3b2:	b1f3      	cbz	r3, 801c3f2 <rosidl_runtime_c__String__fini+0x4e>
 801c3b4:	a801      	add	r0, sp, #4
 801c3b6:	f7f0 ff25 	bl	800d204 <rcutils_get_default_allocator>
 801c3ba:	9b02      	ldr	r3, [sp, #8]
 801c3bc:	9905      	ldr	r1, [sp, #20]
 801c3be:	6820      	ldr	r0, [r4, #0]
 801c3c0:	4798      	blx	r3
 801c3c2:	2300      	movs	r3, #0
 801c3c4:	e9c4 3300 	strd	r3, r3, [r4]
 801c3c8:	60a3      	str	r3, [r4, #8]
 801c3ca:	b006      	add	sp, #24
 801c3cc:	bd10      	pop	{r4, pc}
 801c3ce:	6843      	ldr	r3, [r0, #4]
 801c3d0:	b9db      	cbnz	r3, 801c40a <rosidl_runtime_c__String__fini+0x66>
 801c3d2:	6883      	ldr	r3, [r0, #8]
 801c3d4:	2b00      	cmp	r3, #0
 801c3d6:	d0f8      	beq.n	801c3ca <rosidl_runtime_c__String__fini+0x26>
 801c3d8:	4b12      	ldr	r3, [pc, #72]	@ (801c424 <rosidl_runtime_c__String__fini+0x80>)
 801c3da:	4813      	ldr	r0, [pc, #76]	@ (801c428 <rosidl_runtime_c__String__fini+0x84>)
 801c3dc:	681b      	ldr	r3, [r3, #0]
 801c3de:	2251      	movs	r2, #81	@ 0x51
 801c3e0:	68db      	ldr	r3, [r3, #12]
 801c3e2:	2101      	movs	r1, #1
 801c3e4:	f000 ffac 	bl	801d340 <fwrite>
 801c3e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801c3ec:	f000 fbf6 	bl	801cbdc <exit>
 801c3f0:	4770      	bx	lr
 801c3f2:	4b0c      	ldr	r3, [pc, #48]	@ (801c424 <rosidl_runtime_c__String__fini+0x80>)
 801c3f4:	480d      	ldr	r0, [pc, #52]	@ (801c42c <rosidl_runtime_c__String__fini+0x88>)
 801c3f6:	681b      	ldr	r3, [r3, #0]
 801c3f8:	224c      	movs	r2, #76	@ 0x4c
 801c3fa:	68db      	ldr	r3, [r3, #12]
 801c3fc:	2101      	movs	r1, #1
 801c3fe:	f000 ff9f 	bl	801d340 <fwrite>
 801c402:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801c406:	f000 fbe9 	bl	801cbdc <exit>
 801c40a:	4b06      	ldr	r3, [pc, #24]	@ (801c424 <rosidl_runtime_c__String__fini+0x80>)
 801c40c:	4808      	ldr	r0, [pc, #32]	@ (801c430 <rosidl_runtime_c__String__fini+0x8c>)
 801c40e:	681b      	ldr	r3, [r3, #0]
 801c410:	224e      	movs	r2, #78	@ 0x4e
 801c412:	68db      	ldr	r3, [r3, #12]
 801c414:	2101      	movs	r1, #1
 801c416:	f000 ff93 	bl	801d340 <fwrite>
 801c41a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801c41e:	f000 fbdd 	bl	801cbdc <exit>
 801c422:	bf00      	nop
 801c424:	2000332c 	.word	0x2000332c
 801c428:	0801f974 	.word	0x0801f974
 801c42c:	0801f8d4 	.word	0x0801f8d4
 801c430:	0801f924 	.word	0x0801f924

0801c434 <rosidl_runtime_c__String__copy>:
 801c434:	b338      	cbz	r0, 801c486 <rosidl_runtime_c__String__copy+0x52>
 801c436:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c43a:	e9d0 7500 	ldrd	r7, r5, [r0]
 801c43e:	b086      	sub	sp, #24
 801c440:	460c      	mov	r4, r1
 801c442:	b1e1      	cbz	r1, 801c47e <rosidl_runtime_c__String__copy+0x4a>
 801c444:	b1df      	cbz	r7, 801c47e <rosidl_runtime_c__String__copy+0x4a>
 801c446:	1c6b      	adds	r3, r5, #1
 801c448:	d019      	beq.n	801c47e <rosidl_runtime_c__String__copy+0x4a>
 801c44a:	a801      	add	r0, sp, #4
 801c44c:	f105 0801 	add.w	r8, r5, #1
 801c450:	f7f0 fed8 	bl	800d204 <rcutils_get_default_allocator>
 801c454:	9b03      	ldr	r3, [sp, #12]
 801c456:	9a05      	ldr	r2, [sp, #20]
 801c458:	6820      	ldr	r0, [r4, #0]
 801c45a:	4641      	mov	r1, r8
 801c45c:	4798      	blx	r3
 801c45e:	4606      	mov	r6, r0
 801c460:	b168      	cbz	r0, 801c47e <rosidl_runtime_c__String__copy+0x4a>
 801c462:	4639      	mov	r1, r7
 801c464:	462a      	mov	r2, r5
 801c466:	f001 f8a8 	bl	801d5ba <memcpy>
 801c46a:	2300      	movs	r3, #0
 801c46c:	2001      	movs	r0, #1
 801c46e:	5573      	strb	r3, [r6, r5]
 801c470:	e9c4 6500 	strd	r6, r5, [r4]
 801c474:	f8c4 8008 	str.w	r8, [r4, #8]
 801c478:	b006      	add	sp, #24
 801c47a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c47e:	2000      	movs	r0, #0
 801c480:	b006      	add	sp, #24
 801c482:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c486:	4770      	bx	lr

0801c488 <asinf>:
 801c488:	b508      	push	{r3, lr}
 801c48a:	ed2d 8b02 	vpush	{d8}
 801c48e:	eeb0 8a40 	vmov.f32	s16, s0
 801c492:	f000 fa9f 	bl	801c9d4 <__ieee754_asinf>
 801c496:	eeb4 8a48 	vcmp.f32	s16, s16
 801c49a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c49e:	eef0 8a40 	vmov.f32	s17, s0
 801c4a2:	d615      	bvs.n	801c4d0 <asinf+0x48>
 801c4a4:	eeb0 0a48 	vmov.f32	s0, s16
 801c4a8:	f000 f8e4 	bl	801c674 <fabsf>
 801c4ac:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801c4b0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801c4b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c4b8:	dd0a      	ble.n	801c4d0 <asinf+0x48>
 801c4ba:	f001 f849 	bl	801d550 <__errno>
 801c4be:	ecbd 8b02 	vpop	{d8}
 801c4c2:	2321      	movs	r3, #33	@ 0x21
 801c4c4:	6003      	str	r3, [r0, #0]
 801c4c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801c4ca:	4804      	ldr	r0, [pc, #16]	@ (801c4dc <asinf+0x54>)
 801c4cc:	f000 ba7c 	b.w	801c9c8 <nanf>
 801c4d0:	eeb0 0a68 	vmov.f32	s0, s17
 801c4d4:	ecbd 8b02 	vpop	{d8}
 801c4d8:	bd08      	pop	{r3, pc}
 801c4da:	bf00      	nop
 801c4dc:	08020942 	.word	0x08020942

0801c4e0 <atan2>:
 801c4e0:	f000 b802 	b.w	801c4e8 <__ieee754_atan2>
 801c4e4:	0000      	movs	r0, r0
	...

0801c4e8 <__ieee754_atan2>:
 801c4e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c4ec:	ec57 6b11 	vmov	r6, r7, d1
 801c4f0:	4273      	negs	r3, r6
 801c4f2:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 801c670 <__ieee754_atan2+0x188>
 801c4f6:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 801c4fa:	4333      	orrs	r3, r6
 801c4fc:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 801c500:	4543      	cmp	r3, r8
 801c502:	ec51 0b10 	vmov	r0, r1, d0
 801c506:	4635      	mov	r5, r6
 801c508:	d809      	bhi.n	801c51e <__ieee754_atan2+0x36>
 801c50a:	4244      	negs	r4, r0
 801c50c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801c510:	4304      	orrs	r4, r0
 801c512:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 801c516:	4544      	cmp	r4, r8
 801c518:	468e      	mov	lr, r1
 801c51a:	4681      	mov	r9, r0
 801c51c:	d907      	bls.n	801c52e <__ieee754_atan2+0x46>
 801c51e:	4632      	mov	r2, r6
 801c520:	463b      	mov	r3, r7
 801c522:	f7e3 fedb 	bl	80002dc <__adddf3>
 801c526:	ec41 0b10 	vmov	d0, r0, r1
 801c52a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c52e:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 801c532:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 801c536:	4334      	orrs	r4, r6
 801c538:	d103      	bne.n	801c542 <__ieee754_atan2+0x5a>
 801c53a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c53e:	f000 b8a3 	b.w	801c688 <atan>
 801c542:	17bc      	asrs	r4, r7, #30
 801c544:	f004 0402 	and.w	r4, r4, #2
 801c548:	ea53 0909 	orrs.w	r9, r3, r9
 801c54c:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 801c550:	d107      	bne.n	801c562 <__ieee754_atan2+0x7a>
 801c552:	2c02      	cmp	r4, #2
 801c554:	d05f      	beq.n	801c616 <__ieee754_atan2+0x12e>
 801c556:	2c03      	cmp	r4, #3
 801c558:	d1e5      	bne.n	801c526 <__ieee754_atan2+0x3e>
 801c55a:	a143      	add	r1, pc, #268	@ (adr r1, 801c668 <__ieee754_atan2+0x180>)
 801c55c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c560:	e7e1      	b.n	801c526 <__ieee754_atan2+0x3e>
 801c562:	4315      	orrs	r5, r2
 801c564:	d106      	bne.n	801c574 <__ieee754_atan2+0x8c>
 801c566:	f1be 0f00 	cmp.w	lr, #0
 801c56a:	db5f      	blt.n	801c62c <__ieee754_atan2+0x144>
 801c56c:	a136      	add	r1, pc, #216	@ (adr r1, 801c648 <__ieee754_atan2+0x160>)
 801c56e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c572:	e7d8      	b.n	801c526 <__ieee754_atan2+0x3e>
 801c574:	4542      	cmp	r2, r8
 801c576:	d10f      	bne.n	801c598 <__ieee754_atan2+0xb0>
 801c578:	4293      	cmp	r3, r2
 801c57a:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 801c57e:	d107      	bne.n	801c590 <__ieee754_atan2+0xa8>
 801c580:	2c02      	cmp	r4, #2
 801c582:	d84c      	bhi.n	801c61e <__ieee754_atan2+0x136>
 801c584:	4b36      	ldr	r3, [pc, #216]	@ (801c660 <__ieee754_atan2+0x178>)
 801c586:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801c58a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801c58e:	e7ca      	b.n	801c526 <__ieee754_atan2+0x3e>
 801c590:	2c02      	cmp	r4, #2
 801c592:	d848      	bhi.n	801c626 <__ieee754_atan2+0x13e>
 801c594:	4b33      	ldr	r3, [pc, #204]	@ (801c664 <__ieee754_atan2+0x17c>)
 801c596:	e7f6      	b.n	801c586 <__ieee754_atan2+0x9e>
 801c598:	4543      	cmp	r3, r8
 801c59a:	d0e4      	beq.n	801c566 <__ieee754_atan2+0x7e>
 801c59c:	1a9b      	subs	r3, r3, r2
 801c59e:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 801c5a2:	ea4f 5223 	mov.w	r2, r3, asr #20
 801c5a6:	da1e      	bge.n	801c5e6 <__ieee754_atan2+0xfe>
 801c5a8:	2f00      	cmp	r7, #0
 801c5aa:	da01      	bge.n	801c5b0 <__ieee754_atan2+0xc8>
 801c5ac:	323c      	adds	r2, #60	@ 0x3c
 801c5ae:	db1e      	blt.n	801c5ee <__ieee754_atan2+0x106>
 801c5b0:	4632      	mov	r2, r6
 801c5b2:	463b      	mov	r3, r7
 801c5b4:	f7e4 f972 	bl	800089c <__aeabi_ddiv>
 801c5b8:	ec41 0b10 	vmov	d0, r0, r1
 801c5bc:	f000 f9fc 	bl	801c9b8 <fabs>
 801c5c0:	f000 f862 	bl	801c688 <atan>
 801c5c4:	ec51 0b10 	vmov	r0, r1, d0
 801c5c8:	2c01      	cmp	r4, #1
 801c5ca:	d013      	beq.n	801c5f4 <__ieee754_atan2+0x10c>
 801c5cc:	2c02      	cmp	r4, #2
 801c5ce:	d015      	beq.n	801c5fc <__ieee754_atan2+0x114>
 801c5d0:	2c00      	cmp	r4, #0
 801c5d2:	d0a8      	beq.n	801c526 <__ieee754_atan2+0x3e>
 801c5d4:	a318      	add	r3, pc, #96	@ (adr r3, 801c638 <__ieee754_atan2+0x150>)
 801c5d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c5da:	f7e3 fe7d 	bl	80002d8 <__aeabi_dsub>
 801c5de:	a318      	add	r3, pc, #96	@ (adr r3, 801c640 <__ieee754_atan2+0x158>)
 801c5e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c5e4:	e014      	b.n	801c610 <__ieee754_atan2+0x128>
 801c5e6:	a118      	add	r1, pc, #96	@ (adr r1, 801c648 <__ieee754_atan2+0x160>)
 801c5e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c5ec:	e7ec      	b.n	801c5c8 <__ieee754_atan2+0xe0>
 801c5ee:	2000      	movs	r0, #0
 801c5f0:	2100      	movs	r1, #0
 801c5f2:	e7e9      	b.n	801c5c8 <__ieee754_atan2+0xe0>
 801c5f4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801c5f8:	4619      	mov	r1, r3
 801c5fa:	e794      	b.n	801c526 <__ieee754_atan2+0x3e>
 801c5fc:	a30e      	add	r3, pc, #56	@ (adr r3, 801c638 <__ieee754_atan2+0x150>)
 801c5fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c602:	f7e3 fe69 	bl	80002d8 <__aeabi_dsub>
 801c606:	4602      	mov	r2, r0
 801c608:	460b      	mov	r3, r1
 801c60a:	a10d      	add	r1, pc, #52	@ (adr r1, 801c640 <__ieee754_atan2+0x158>)
 801c60c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c610:	f7e3 fe62 	bl	80002d8 <__aeabi_dsub>
 801c614:	e787      	b.n	801c526 <__ieee754_atan2+0x3e>
 801c616:	a10a      	add	r1, pc, #40	@ (adr r1, 801c640 <__ieee754_atan2+0x158>)
 801c618:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c61c:	e783      	b.n	801c526 <__ieee754_atan2+0x3e>
 801c61e:	a10c      	add	r1, pc, #48	@ (adr r1, 801c650 <__ieee754_atan2+0x168>)
 801c620:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c624:	e77f      	b.n	801c526 <__ieee754_atan2+0x3e>
 801c626:	2000      	movs	r0, #0
 801c628:	2100      	movs	r1, #0
 801c62a:	e77c      	b.n	801c526 <__ieee754_atan2+0x3e>
 801c62c:	a10a      	add	r1, pc, #40	@ (adr r1, 801c658 <__ieee754_atan2+0x170>)
 801c62e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c632:	e778      	b.n	801c526 <__ieee754_atan2+0x3e>
 801c634:	f3af 8000 	nop.w
 801c638:	33145c07 	.word	0x33145c07
 801c63c:	3ca1a626 	.word	0x3ca1a626
 801c640:	54442d18 	.word	0x54442d18
 801c644:	400921fb 	.word	0x400921fb
 801c648:	54442d18 	.word	0x54442d18
 801c64c:	3ff921fb 	.word	0x3ff921fb
 801c650:	54442d18 	.word	0x54442d18
 801c654:	3fe921fb 	.word	0x3fe921fb
 801c658:	54442d18 	.word	0x54442d18
 801c65c:	bff921fb 	.word	0xbff921fb
 801c660:	08020990 	.word	0x08020990
 801c664:	08020978 	.word	0x08020978
 801c668:	54442d18 	.word	0x54442d18
 801c66c:	c00921fb 	.word	0xc00921fb
 801c670:	7ff00000 	.word	0x7ff00000

0801c674 <fabsf>:
 801c674:	ee10 3a10 	vmov	r3, s0
 801c678:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801c67c:	ee00 3a10 	vmov	s0, r3
 801c680:	4770      	bx	lr
 801c682:	0000      	movs	r0, r0
 801c684:	0000      	movs	r0, r0
	...

0801c688 <atan>:
 801c688:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c68c:	ec55 4b10 	vmov	r4, r5, d0
 801c690:	4bbf      	ldr	r3, [pc, #764]	@ (801c990 <atan+0x308>)
 801c692:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 801c696:	429e      	cmp	r6, r3
 801c698:	46ab      	mov	fp, r5
 801c69a:	d918      	bls.n	801c6ce <atan+0x46>
 801c69c:	4bbd      	ldr	r3, [pc, #756]	@ (801c994 <atan+0x30c>)
 801c69e:	429e      	cmp	r6, r3
 801c6a0:	d801      	bhi.n	801c6a6 <atan+0x1e>
 801c6a2:	d109      	bne.n	801c6b8 <atan+0x30>
 801c6a4:	b144      	cbz	r4, 801c6b8 <atan+0x30>
 801c6a6:	4622      	mov	r2, r4
 801c6a8:	462b      	mov	r3, r5
 801c6aa:	4620      	mov	r0, r4
 801c6ac:	4629      	mov	r1, r5
 801c6ae:	f7e3 fe15 	bl	80002dc <__adddf3>
 801c6b2:	4604      	mov	r4, r0
 801c6b4:	460d      	mov	r5, r1
 801c6b6:	e006      	b.n	801c6c6 <atan+0x3e>
 801c6b8:	f1bb 0f00 	cmp.w	fp, #0
 801c6bc:	f340 812b 	ble.w	801c916 <atan+0x28e>
 801c6c0:	a597      	add	r5, pc, #604	@ (adr r5, 801c920 <atan+0x298>)
 801c6c2:	e9d5 4500 	ldrd	r4, r5, [r5]
 801c6c6:	ec45 4b10 	vmov	d0, r4, r5
 801c6ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c6ce:	4bb2      	ldr	r3, [pc, #712]	@ (801c998 <atan+0x310>)
 801c6d0:	429e      	cmp	r6, r3
 801c6d2:	d813      	bhi.n	801c6fc <atan+0x74>
 801c6d4:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 801c6d8:	429e      	cmp	r6, r3
 801c6da:	d80c      	bhi.n	801c6f6 <atan+0x6e>
 801c6dc:	a392      	add	r3, pc, #584	@ (adr r3, 801c928 <atan+0x2a0>)
 801c6de:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c6e2:	4620      	mov	r0, r4
 801c6e4:	4629      	mov	r1, r5
 801c6e6:	f7e3 fdf9 	bl	80002dc <__adddf3>
 801c6ea:	4bac      	ldr	r3, [pc, #688]	@ (801c99c <atan+0x314>)
 801c6ec:	2200      	movs	r2, #0
 801c6ee:	f7e4 fa3b 	bl	8000b68 <__aeabi_dcmpgt>
 801c6f2:	2800      	cmp	r0, #0
 801c6f4:	d1e7      	bne.n	801c6c6 <atan+0x3e>
 801c6f6:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 801c6fa:	e029      	b.n	801c750 <atan+0xc8>
 801c6fc:	f000 f95c 	bl	801c9b8 <fabs>
 801c700:	4ba7      	ldr	r3, [pc, #668]	@ (801c9a0 <atan+0x318>)
 801c702:	429e      	cmp	r6, r3
 801c704:	ec55 4b10 	vmov	r4, r5, d0
 801c708:	f200 80bc 	bhi.w	801c884 <atan+0x1fc>
 801c70c:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 801c710:	429e      	cmp	r6, r3
 801c712:	f200 809e 	bhi.w	801c852 <atan+0x1ca>
 801c716:	4622      	mov	r2, r4
 801c718:	462b      	mov	r3, r5
 801c71a:	4620      	mov	r0, r4
 801c71c:	4629      	mov	r1, r5
 801c71e:	f7e3 fddd 	bl	80002dc <__adddf3>
 801c722:	4b9e      	ldr	r3, [pc, #632]	@ (801c99c <atan+0x314>)
 801c724:	2200      	movs	r2, #0
 801c726:	f7e3 fdd7 	bl	80002d8 <__aeabi_dsub>
 801c72a:	2200      	movs	r2, #0
 801c72c:	4606      	mov	r6, r0
 801c72e:	460f      	mov	r7, r1
 801c730:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801c734:	4620      	mov	r0, r4
 801c736:	4629      	mov	r1, r5
 801c738:	f7e3 fdd0 	bl	80002dc <__adddf3>
 801c73c:	4602      	mov	r2, r0
 801c73e:	460b      	mov	r3, r1
 801c740:	4630      	mov	r0, r6
 801c742:	4639      	mov	r1, r7
 801c744:	f7e4 f8aa 	bl	800089c <__aeabi_ddiv>
 801c748:	f04f 0a00 	mov.w	sl, #0
 801c74c:	4604      	mov	r4, r0
 801c74e:	460d      	mov	r5, r1
 801c750:	4622      	mov	r2, r4
 801c752:	462b      	mov	r3, r5
 801c754:	4620      	mov	r0, r4
 801c756:	4629      	mov	r1, r5
 801c758:	f7e3 ff76 	bl	8000648 <__aeabi_dmul>
 801c75c:	4602      	mov	r2, r0
 801c75e:	460b      	mov	r3, r1
 801c760:	4680      	mov	r8, r0
 801c762:	4689      	mov	r9, r1
 801c764:	f7e3 ff70 	bl	8000648 <__aeabi_dmul>
 801c768:	a371      	add	r3, pc, #452	@ (adr r3, 801c930 <atan+0x2a8>)
 801c76a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c76e:	4606      	mov	r6, r0
 801c770:	460f      	mov	r7, r1
 801c772:	f7e3 ff69 	bl	8000648 <__aeabi_dmul>
 801c776:	a370      	add	r3, pc, #448	@ (adr r3, 801c938 <atan+0x2b0>)
 801c778:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c77c:	f7e3 fdae 	bl	80002dc <__adddf3>
 801c780:	4632      	mov	r2, r6
 801c782:	463b      	mov	r3, r7
 801c784:	f7e3 ff60 	bl	8000648 <__aeabi_dmul>
 801c788:	a36d      	add	r3, pc, #436	@ (adr r3, 801c940 <atan+0x2b8>)
 801c78a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c78e:	f7e3 fda5 	bl	80002dc <__adddf3>
 801c792:	4632      	mov	r2, r6
 801c794:	463b      	mov	r3, r7
 801c796:	f7e3 ff57 	bl	8000648 <__aeabi_dmul>
 801c79a:	a36b      	add	r3, pc, #428	@ (adr r3, 801c948 <atan+0x2c0>)
 801c79c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c7a0:	f7e3 fd9c 	bl	80002dc <__adddf3>
 801c7a4:	4632      	mov	r2, r6
 801c7a6:	463b      	mov	r3, r7
 801c7a8:	f7e3 ff4e 	bl	8000648 <__aeabi_dmul>
 801c7ac:	a368      	add	r3, pc, #416	@ (adr r3, 801c950 <atan+0x2c8>)
 801c7ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c7b2:	f7e3 fd93 	bl	80002dc <__adddf3>
 801c7b6:	4632      	mov	r2, r6
 801c7b8:	463b      	mov	r3, r7
 801c7ba:	f7e3 ff45 	bl	8000648 <__aeabi_dmul>
 801c7be:	a366      	add	r3, pc, #408	@ (adr r3, 801c958 <atan+0x2d0>)
 801c7c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c7c4:	f7e3 fd8a 	bl	80002dc <__adddf3>
 801c7c8:	4642      	mov	r2, r8
 801c7ca:	464b      	mov	r3, r9
 801c7cc:	f7e3 ff3c 	bl	8000648 <__aeabi_dmul>
 801c7d0:	a363      	add	r3, pc, #396	@ (adr r3, 801c960 <atan+0x2d8>)
 801c7d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c7d6:	4680      	mov	r8, r0
 801c7d8:	4689      	mov	r9, r1
 801c7da:	4630      	mov	r0, r6
 801c7dc:	4639      	mov	r1, r7
 801c7de:	f7e3 ff33 	bl	8000648 <__aeabi_dmul>
 801c7e2:	a361      	add	r3, pc, #388	@ (adr r3, 801c968 <atan+0x2e0>)
 801c7e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c7e8:	f7e3 fd76 	bl	80002d8 <__aeabi_dsub>
 801c7ec:	4632      	mov	r2, r6
 801c7ee:	463b      	mov	r3, r7
 801c7f0:	f7e3 ff2a 	bl	8000648 <__aeabi_dmul>
 801c7f4:	a35e      	add	r3, pc, #376	@ (adr r3, 801c970 <atan+0x2e8>)
 801c7f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c7fa:	f7e3 fd6d 	bl	80002d8 <__aeabi_dsub>
 801c7fe:	4632      	mov	r2, r6
 801c800:	463b      	mov	r3, r7
 801c802:	f7e3 ff21 	bl	8000648 <__aeabi_dmul>
 801c806:	a35c      	add	r3, pc, #368	@ (adr r3, 801c978 <atan+0x2f0>)
 801c808:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c80c:	f7e3 fd64 	bl	80002d8 <__aeabi_dsub>
 801c810:	4632      	mov	r2, r6
 801c812:	463b      	mov	r3, r7
 801c814:	f7e3 ff18 	bl	8000648 <__aeabi_dmul>
 801c818:	a359      	add	r3, pc, #356	@ (adr r3, 801c980 <atan+0x2f8>)
 801c81a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c81e:	f7e3 fd5b 	bl	80002d8 <__aeabi_dsub>
 801c822:	4632      	mov	r2, r6
 801c824:	463b      	mov	r3, r7
 801c826:	f7e3 ff0f 	bl	8000648 <__aeabi_dmul>
 801c82a:	4602      	mov	r2, r0
 801c82c:	460b      	mov	r3, r1
 801c82e:	4640      	mov	r0, r8
 801c830:	4649      	mov	r1, r9
 801c832:	f7e3 fd53 	bl	80002dc <__adddf3>
 801c836:	4622      	mov	r2, r4
 801c838:	462b      	mov	r3, r5
 801c83a:	f7e3 ff05 	bl	8000648 <__aeabi_dmul>
 801c83e:	f1ba 3fff 	cmp.w	sl, #4294967295	@ 0xffffffff
 801c842:	4602      	mov	r2, r0
 801c844:	460b      	mov	r3, r1
 801c846:	d148      	bne.n	801c8da <atan+0x252>
 801c848:	4620      	mov	r0, r4
 801c84a:	4629      	mov	r1, r5
 801c84c:	f7e3 fd44 	bl	80002d8 <__aeabi_dsub>
 801c850:	e72f      	b.n	801c6b2 <atan+0x2a>
 801c852:	4b52      	ldr	r3, [pc, #328]	@ (801c99c <atan+0x314>)
 801c854:	2200      	movs	r2, #0
 801c856:	4620      	mov	r0, r4
 801c858:	4629      	mov	r1, r5
 801c85a:	f7e3 fd3d 	bl	80002d8 <__aeabi_dsub>
 801c85e:	4b4f      	ldr	r3, [pc, #316]	@ (801c99c <atan+0x314>)
 801c860:	4606      	mov	r6, r0
 801c862:	460f      	mov	r7, r1
 801c864:	2200      	movs	r2, #0
 801c866:	4620      	mov	r0, r4
 801c868:	4629      	mov	r1, r5
 801c86a:	f7e3 fd37 	bl	80002dc <__adddf3>
 801c86e:	4602      	mov	r2, r0
 801c870:	460b      	mov	r3, r1
 801c872:	4630      	mov	r0, r6
 801c874:	4639      	mov	r1, r7
 801c876:	f7e4 f811 	bl	800089c <__aeabi_ddiv>
 801c87a:	f04f 0a01 	mov.w	sl, #1
 801c87e:	4604      	mov	r4, r0
 801c880:	460d      	mov	r5, r1
 801c882:	e765      	b.n	801c750 <atan+0xc8>
 801c884:	4b47      	ldr	r3, [pc, #284]	@ (801c9a4 <atan+0x31c>)
 801c886:	429e      	cmp	r6, r3
 801c888:	d21c      	bcs.n	801c8c4 <atan+0x23c>
 801c88a:	4b47      	ldr	r3, [pc, #284]	@ (801c9a8 <atan+0x320>)
 801c88c:	2200      	movs	r2, #0
 801c88e:	4620      	mov	r0, r4
 801c890:	4629      	mov	r1, r5
 801c892:	f7e3 fd21 	bl	80002d8 <__aeabi_dsub>
 801c896:	4b44      	ldr	r3, [pc, #272]	@ (801c9a8 <atan+0x320>)
 801c898:	4606      	mov	r6, r0
 801c89a:	460f      	mov	r7, r1
 801c89c:	2200      	movs	r2, #0
 801c89e:	4620      	mov	r0, r4
 801c8a0:	4629      	mov	r1, r5
 801c8a2:	f7e3 fed1 	bl	8000648 <__aeabi_dmul>
 801c8a6:	4b3d      	ldr	r3, [pc, #244]	@ (801c99c <atan+0x314>)
 801c8a8:	2200      	movs	r2, #0
 801c8aa:	f7e3 fd17 	bl	80002dc <__adddf3>
 801c8ae:	4602      	mov	r2, r0
 801c8b0:	460b      	mov	r3, r1
 801c8b2:	4630      	mov	r0, r6
 801c8b4:	4639      	mov	r1, r7
 801c8b6:	f7e3 fff1 	bl	800089c <__aeabi_ddiv>
 801c8ba:	f04f 0a02 	mov.w	sl, #2
 801c8be:	4604      	mov	r4, r0
 801c8c0:	460d      	mov	r5, r1
 801c8c2:	e745      	b.n	801c750 <atan+0xc8>
 801c8c4:	4622      	mov	r2, r4
 801c8c6:	462b      	mov	r3, r5
 801c8c8:	4938      	ldr	r1, [pc, #224]	@ (801c9ac <atan+0x324>)
 801c8ca:	2000      	movs	r0, #0
 801c8cc:	f7e3 ffe6 	bl	800089c <__aeabi_ddiv>
 801c8d0:	f04f 0a03 	mov.w	sl, #3
 801c8d4:	4604      	mov	r4, r0
 801c8d6:	460d      	mov	r5, r1
 801c8d8:	e73a      	b.n	801c750 <atan+0xc8>
 801c8da:	4b35      	ldr	r3, [pc, #212]	@ (801c9b0 <atan+0x328>)
 801c8dc:	4e35      	ldr	r6, [pc, #212]	@ (801c9b4 <atan+0x32c>)
 801c8de:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801c8e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c8e6:	f7e3 fcf7 	bl	80002d8 <__aeabi_dsub>
 801c8ea:	4622      	mov	r2, r4
 801c8ec:	462b      	mov	r3, r5
 801c8ee:	f7e3 fcf3 	bl	80002d8 <__aeabi_dsub>
 801c8f2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 801c8f6:	4602      	mov	r2, r0
 801c8f8:	460b      	mov	r3, r1
 801c8fa:	e9d6 0100 	ldrd	r0, r1, [r6]
 801c8fe:	f7e3 fceb 	bl	80002d8 <__aeabi_dsub>
 801c902:	f1bb 0f00 	cmp.w	fp, #0
 801c906:	4604      	mov	r4, r0
 801c908:	460d      	mov	r5, r1
 801c90a:	f6bf aedc 	bge.w	801c6c6 <atan+0x3e>
 801c90e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801c912:	461d      	mov	r5, r3
 801c914:	e6d7      	b.n	801c6c6 <atan+0x3e>
 801c916:	a51c      	add	r5, pc, #112	@ (adr r5, 801c988 <atan+0x300>)
 801c918:	e9d5 4500 	ldrd	r4, r5, [r5]
 801c91c:	e6d3      	b.n	801c6c6 <atan+0x3e>
 801c91e:	bf00      	nop
 801c920:	54442d18 	.word	0x54442d18
 801c924:	3ff921fb 	.word	0x3ff921fb
 801c928:	8800759c 	.word	0x8800759c
 801c92c:	7e37e43c 	.word	0x7e37e43c
 801c930:	e322da11 	.word	0xe322da11
 801c934:	3f90ad3a 	.word	0x3f90ad3a
 801c938:	24760deb 	.word	0x24760deb
 801c93c:	3fa97b4b 	.word	0x3fa97b4b
 801c940:	a0d03d51 	.word	0xa0d03d51
 801c944:	3fb10d66 	.word	0x3fb10d66
 801c948:	c54c206e 	.word	0xc54c206e
 801c94c:	3fb745cd 	.word	0x3fb745cd
 801c950:	920083ff 	.word	0x920083ff
 801c954:	3fc24924 	.word	0x3fc24924
 801c958:	5555550d 	.word	0x5555550d
 801c95c:	3fd55555 	.word	0x3fd55555
 801c960:	2c6a6c2f 	.word	0x2c6a6c2f
 801c964:	bfa2b444 	.word	0xbfa2b444
 801c968:	52defd9a 	.word	0x52defd9a
 801c96c:	3fadde2d 	.word	0x3fadde2d
 801c970:	af749a6d 	.word	0xaf749a6d
 801c974:	3fb3b0f2 	.word	0x3fb3b0f2
 801c978:	fe231671 	.word	0xfe231671
 801c97c:	3fbc71c6 	.word	0x3fbc71c6
 801c980:	9998ebc4 	.word	0x9998ebc4
 801c984:	3fc99999 	.word	0x3fc99999
 801c988:	54442d18 	.word	0x54442d18
 801c98c:	bff921fb 	.word	0xbff921fb
 801c990:	440fffff 	.word	0x440fffff
 801c994:	7ff00000 	.word	0x7ff00000
 801c998:	3fdbffff 	.word	0x3fdbffff
 801c99c:	3ff00000 	.word	0x3ff00000
 801c9a0:	3ff2ffff 	.word	0x3ff2ffff
 801c9a4:	40038000 	.word	0x40038000
 801c9a8:	3ff80000 	.word	0x3ff80000
 801c9ac:	bff00000 	.word	0xbff00000
 801c9b0:	080209a8 	.word	0x080209a8
 801c9b4:	080209c8 	.word	0x080209c8

0801c9b8 <fabs>:
 801c9b8:	ec51 0b10 	vmov	r0, r1, d0
 801c9bc:	4602      	mov	r2, r0
 801c9be:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801c9c2:	ec43 2b10 	vmov	d0, r2, r3
 801c9c6:	4770      	bx	lr

0801c9c8 <nanf>:
 801c9c8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801c9d0 <nanf+0x8>
 801c9cc:	4770      	bx	lr
 801c9ce:	bf00      	nop
 801c9d0:	7fc00000 	.word	0x7fc00000

0801c9d4 <__ieee754_asinf>:
 801c9d4:	b538      	push	{r3, r4, r5, lr}
 801c9d6:	ee10 5a10 	vmov	r5, s0
 801c9da:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 801c9de:	f1b4 5f7e 	cmp.w	r4, #1065353216	@ 0x3f800000
 801c9e2:	ed2d 8b04 	vpush	{d8-d9}
 801c9e6:	d10c      	bne.n	801ca02 <__ieee754_asinf+0x2e>
 801c9e8:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 801cb5c <__ieee754_asinf+0x188>
 801c9ec:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 801cb60 <__ieee754_asinf+0x18c>
 801c9f0:	ee60 7a27 	vmul.f32	s15, s0, s15
 801c9f4:	eee0 7a07 	vfma.f32	s15, s0, s14
 801c9f8:	eeb0 0a67 	vmov.f32	s0, s15
 801c9fc:	ecbd 8b04 	vpop	{d8-d9}
 801ca00:	bd38      	pop	{r3, r4, r5, pc}
 801ca02:	d904      	bls.n	801ca0e <__ieee754_asinf+0x3a>
 801ca04:	ee70 7a40 	vsub.f32	s15, s0, s0
 801ca08:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 801ca0c:	e7f6      	b.n	801c9fc <__ieee754_asinf+0x28>
 801ca0e:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 801ca12:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 801ca16:	d20b      	bcs.n	801ca30 <__ieee754_asinf+0x5c>
 801ca18:	f1b4 5f48 	cmp.w	r4, #838860800	@ 0x32000000
 801ca1c:	d252      	bcs.n	801cac4 <__ieee754_asinf+0xf0>
 801ca1e:	eddf 7a51 	vldr	s15, [pc, #324]	@ 801cb64 <__ieee754_asinf+0x190>
 801ca22:	ee70 7a27 	vadd.f32	s15, s0, s15
 801ca26:	eef4 7ae8 	vcmpe.f32	s15, s17
 801ca2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ca2e:	dce5      	bgt.n	801c9fc <__ieee754_asinf+0x28>
 801ca30:	f7ff fe20 	bl	801c674 <fabsf>
 801ca34:	ee38 8ac0 	vsub.f32	s16, s17, s0
 801ca38:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801ca3c:	ee28 8a27 	vmul.f32	s16, s16, s15
 801ca40:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 801cb68 <__ieee754_asinf+0x194>
 801ca44:	eddf 7a49 	vldr	s15, [pc, #292]	@ 801cb6c <__ieee754_asinf+0x198>
 801ca48:	ed9f 9a49 	vldr	s18, [pc, #292]	@ 801cb70 <__ieee754_asinf+0x19c>
 801ca4c:	eea8 7a27 	vfma.f32	s14, s16, s15
 801ca50:	eddf 7a48 	vldr	s15, [pc, #288]	@ 801cb74 <__ieee754_asinf+0x1a0>
 801ca54:	eee7 7a08 	vfma.f32	s15, s14, s16
 801ca58:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 801cb78 <__ieee754_asinf+0x1a4>
 801ca5c:	eea7 7a88 	vfma.f32	s14, s15, s16
 801ca60:	eddf 7a46 	vldr	s15, [pc, #280]	@ 801cb7c <__ieee754_asinf+0x1a8>
 801ca64:	eee7 7a08 	vfma.f32	s15, s14, s16
 801ca68:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 801cb80 <__ieee754_asinf+0x1ac>
 801ca6c:	eea7 9a88 	vfma.f32	s18, s15, s16
 801ca70:	eddf 7a44 	vldr	s15, [pc, #272]	@ 801cb84 <__ieee754_asinf+0x1b0>
 801ca74:	eee8 7a07 	vfma.f32	s15, s16, s14
 801ca78:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 801cb88 <__ieee754_asinf+0x1b4>
 801ca7c:	eea7 7a88 	vfma.f32	s14, s15, s16
 801ca80:	eddf 7a42 	vldr	s15, [pc, #264]	@ 801cb8c <__ieee754_asinf+0x1b8>
 801ca84:	eee7 7a08 	vfma.f32	s15, s14, s16
 801ca88:	eeb0 0a48 	vmov.f32	s0, s16
 801ca8c:	eee7 8a88 	vfma.f32	s17, s15, s16
 801ca90:	f000 f884 	bl	801cb9c <__ieee754_sqrtf>
 801ca94:	4b3e      	ldr	r3, [pc, #248]	@ (801cb90 <__ieee754_asinf+0x1bc>)
 801ca96:	ee29 9a08 	vmul.f32	s18, s18, s16
 801ca9a:	429c      	cmp	r4, r3
 801ca9c:	ee89 6a28 	vdiv.f32	s12, s18, s17
 801caa0:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 801caa4:	d93d      	bls.n	801cb22 <__ieee754_asinf+0x14e>
 801caa6:	eea0 0a06 	vfma.f32	s0, s0, s12
 801caaa:	eddf 7a3a 	vldr	s15, [pc, #232]	@ 801cb94 <__ieee754_asinf+0x1c0>
 801caae:	eee0 7a26 	vfma.f32	s15, s0, s13
 801cab2:	ed9f 0a2b 	vldr	s0, [pc, #172]	@ 801cb60 <__ieee754_asinf+0x18c>
 801cab6:	ee30 0a67 	vsub.f32	s0, s0, s15
 801caba:	2d00      	cmp	r5, #0
 801cabc:	bfd8      	it	le
 801cabe:	eeb1 0a40 	vnegle.f32	s0, s0
 801cac2:	e79b      	b.n	801c9fc <__ieee754_asinf+0x28>
 801cac4:	ee60 7a00 	vmul.f32	s15, s0, s0
 801cac8:	eddf 6a28 	vldr	s13, [pc, #160]	@ 801cb6c <__ieee754_asinf+0x198>
 801cacc:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 801cb68 <__ieee754_asinf+0x194>
 801cad0:	ed9f 6a2b 	vldr	s12, [pc, #172]	@ 801cb80 <__ieee754_asinf+0x1ac>
 801cad4:	eea7 7aa6 	vfma.f32	s14, s15, s13
 801cad8:	eddf 6a26 	vldr	s13, [pc, #152]	@ 801cb74 <__ieee754_asinf+0x1a0>
 801cadc:	eee7 6a27 	vfma.f32	s13, s14, s15
 801cae0:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 801cb78 <__ieee754_asinf+0x1a4>
 801cae4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801cae8:	eddf 6a24 	vldr	s13, [pc, #144]	@ 801cb7c <__ieee754_asinf+0x1a8>
 801caec:	eee7 6a27 	vfma.f32	s13, s14, s15
 801caf0:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 801cb70 <__ieee754_asinf+0x19c>
 801caf4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801caf8:	eddf 6a22 	vldr	s13, [pc, #136]	@ 801cb84 <__ieee754_asinf+0x1b0>
 801cafc:	eee7 6a86 	vfma.f32	s13, s15, s12
 801cb00:	ed9f 6a21 	vldr	s12, [pc, #132]	@ 801cb88 <__ieee754_asinf+0x1b4>
 801cb04:	eea6 6aa7 	vfma.f32	s12, s13, s15
 801cb08:	eddf 6a20 	vldr	s13, [pc, #128]	@ 801cb8c <__ieee754_asinf+0x1b8>
 801cb0c:	eee6 6a27 	vfma.f32	s13, s12, s15
 801cb10:	ee27 7a27 	vmul.f32	s14, s14, s15
 801cb14:	eee6 8aa7 	vfma.f32	s17, s13, s15
 801cb18:	eec7 7a28 	vdiv.f32	s15, s14, s17
 801cb1c:	eea0 0a27 	vfma.f32	s0, s0, s15
 801cb20:	e76c      	b.n	801c9fc <__ieee754_asinf+0x28>
 801cb22:	ee10 3a10 	vmov	r3, s0
 801cb26:	f36f 030b 	bfc	r3, #0, #12
 801cb2a:	ee07 3a10 	vmov	s14, r3
 801cb2e:	eea7 8a47 	vfms.f32	s16, s14, s14
 801cb32:	ee70 5a00 	vadd.f32	s11, s0, s0
 801cb36:	ee30 0a07 	vadd.f32	s0, s0, s14
 801cb3a:	eddf 7a08 	vldr	s15, [pc, #32]	@ 801cb5c <__ieee754_asinf+0x188>
 801cb3e:	ee88 5a00 	vdiv.f32	s10, s16, s0
 801cb42:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 801cb98 <__ieee754_asinf+0x1c4>
 801cb46:	eee5 7a66 	vfms.f32	s15, s10, s13
 801cb4a:	eed5 7a86 	vfnms.f32	s15, s11, s12
 801cb4e:	eeb0 6a40 	vmov.f32	s12, s0
 801cb52:	eea7 6a66 	vfms.f32	s12, s14, s13
 801cb56:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801cb5a:	e7ac      	b.n	801cab6 <__ieee754_asinf+0xe2>
 801cb5c:	b33bbd2e 	.word	0xb33bbd2e
 801cb60:	3fc90fdb 	.word	0x3fc90fdb
 801cb64:	7149f2ca 	.word	0x7149f2ca
 801cb68:	3a4f7f04 	.word	0x3a4f7f04
 801cb6c:	3811ef08 	.word	0x3811ef08
 801cb70:	3e2aaaab 	.word	0x3e2aaaab
 801cb74:	bd241146 	.word	0xbd241146
 801cb78:	3e4e0aa8 	.word	0x3e4e0aa8
 801cb7c:	bea6b090 	.word	0xbea6b090
 801cb80:	3d9dc62e 	.word	0x3d9dc62e
 801cb84:	bf303361 	.word	0xbf303361
 801cb88:	4001572d 	.word	0x4001572d
 801cb8c:	c019d139 	.word	0xc019d139
 801cb90:	3f799999 	.word	0x3f799999
 801cb94:	333bbd2e 	.word	0x333bbd2e
 801cb98:	3f490fdb 	.word	0x3f490fdb

0801cb9c <__ieee754_sqrtf>:
 801cb9c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801cba0:	4770      	bx	lr
	...

0801cba4 <calloc>:
 801cba4:	4b02      	ldr	r3, [pc, #8]	@ (801cbb0 <calloc+0xc>)
 801cba6:	460a      	mov	r2, r1
 801cba8:	4601      	mov	r1, r0
 801cbaa:	6818      	ldr	r0, [r3, #0]
 801cbac:	f000 b802 	b.w	801cbb4 <_calloc_r>
 801cbb0:	2000332c 	.word	0x2000332c

0801cbb4 <_calloc_r>:
 801cbb4:	b570      	push	{r4, r5, r6, lr}
 801cbb6:	fba1 5402 	umull	r5, r4, r1, r2
 801cbba:	b934      	cbnz	r4, 801cbca <_calloc_r+0x16>
 801cbbc:	4629      	mov	r1, r5
 801cbbe:	f000 f899 	bl	801ccf4 <_malloc_r>
 801cbc2:	4606      	mov	r6, r0
 801cbc4:	b928      	cbnz	r0, 801cbd2 <_calloc_r+0x1e>
 801cbc6:	4630      	mov	r0, r6
 801cbc8:	bd70      	pop	{r4, r5, r6, pc}
 801cbca:	220c      	movs	r2, #12
 801cbcc:	6002      	str	r2, [r0, #0]
 801cbce:	2600      	movs	r6, #0
 801cbd0:	e7f9      	b.n	801cbc6 <_calloc_r+0x12>
 801cbd2:	462a      	mov	r2, r5
 801cbd4:	4621      	mov	r1, r4
 801cbd6:	f000 fc5b 	bl	801d490 <memset>
 801cbda:	e7f4      	b.n	801cbc6 <_calloc_r+0x12>

0801cbdc <exit>:
 801cbdc:	b508      	push	{r3, lr}
 801cbde:	4b06      	ldr	r3, [pc, #24]	@ (801cbf8 <exit+0x1c>)
 801cbe0:	4604      	mov	r4, r0
 801cbe2:	b113      	cbz	r3, 801cbea <exit+0xe>
 801cbe4:	2100      	movs	r1, #0
 801cbe6:	f3af 8000 	nop.w
 801cbea:	4b04      	ldr	r3, [pc, #16]	@ (801cbfc <exit+0x20>)
 801cbec:	681b      	ldr	r3, [r3, #0]
 801cbee:	b103      	cbz	r3, 801cbf2 <exit+0x16>
 801cbf0:	4798      	blx	r3
 801cbf2:	4620      	mov	r0, r4
 801cbf4:	f7e5 fd94 	bl	8002720 <_exit>
 801cbf8:	00000000 	.word	0x00000000
 801cbfc:	20019d80 	.word	0x20019d80

0801cc00 <getenv>:
 801cc00:	b507      	push	{r0, r1, r2, lr}
 801cc02:	4b04      	ldr	r3, [pc, #16]	@ (801cc14 <getenv+0x14>)
 801cc04:	4601      	mov	r1, r0
 801cc06:	aa01      	add	r2, sp, #4
 801cc08:	6818      	ldr	r0, [r3, #0]
 801cc0a:	f000 f805 	bl	801cc18 <_findenv_r>
 801cc0e:	b003      	add	sp, #12
 801cc10:	f85d fb04 	ldr.w	pc, [sp], #4
 801cc14:	2000332c 	.word	0x2000332c

0801cc18 <_findenv_r>:
 801cc18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cc1c:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 801cc8c <_findenv_r+0x74>
 801cc20:	4606      	mov	r6, r0
 801cc22:	4689      	mov	r9, r1
 801cc24:	4617      	mov	r7, r2
 801cc26:	f000 fcf5 	bl	801d614 <__env_lock>
 801cc2a:	f8da 4000 	ldr.w	r4, [sl]
 801cc2e:	b134      	cbz	r4, 801cc3e <_findenv_r+0x26>
 801cc30:	464b      	mov	r3, r9
 801cc32:	4698      	mov	r8, r3
 801cc34:	f813 2b01 	ldrb.w	r2, [r3], #1
 801cc38:	b13a      	cbz	r2, 801cc4a <_findenv_r+0x32>
 801cc3a:	2a3d      	cmp	r2, #61	@ 0x3d
 801cc3c:	d1f9      	bne.n	801cc32 <_findenv_r+0x1a>
 801cc3e:	4630      	mov	r0, r6
 801cc40:	f000 fcee 	bl	801d620 <__env_unlock>
 801cc44:	2000      	movs	r0, #0
 801cc46:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cc4a:	eba8 0809 	sub.w	r8, r8, r9
 801cc4e:	46a3      	mov	fp, r4
 801cc50:	f854 0b04 	ldr.w	r0, [r4], #4
 801cc54:	2800      	cmp	r0, #0
 801cc56:	d0f2      	beq.n	801cc3e <_findenv_r+0x26>
 801cc58:	4642      	mov	r2, r8
 801cc5a:	4649      	mov	r1, r9
 801cc5c:	f000 fc2d 	bl	801d4ba <strncmp>
 801cc60:	2800      	cmp	r0, #0
 801cc62:	d1f4      	bne.n	801cc4e <_findenv_r+0x36>
 801cc64:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801cc68:	eb03 0508 	add.w	r5, r3, r8
 801cc6c:	f813 3008 	ldrb.w	r3, [r3, r8]
 801cc70:	2b3d      	cmp	r3, #61	@ 0x3d
 801cc72:	d1ec      	bne.n	801cc4e <_findenv_r+0x36>
 801cc74:	f8da 3000 	ldr.w	r3, [sl]
 801cc78:	ebab 0303 	sub.w	r3, fp, r3
 801cc7c:	109b      	asrs	r3, r3, #2
 801cc7e:	4630      	mov	r0, r6
 801cc80:	603b      	str	r3, [r7, #0]
 801cc82:	f000 fccd 	bl	801d620 <__env_unlock>
 801cc86:	1c68      	adds	r0, r5, #1
 801cc88:	e7dd      	b.n	801cc46 <_findenv_r+0x2e>
 801cc8a:	bf00      	nop
 801cc8c:	20000000 	.word	0x20000000

0801cc90 <malloc>:
 801cc90:	4b02      	ldr	r3, [pc, #8]	@ (801cc9c <malloc+0xc>)
 801cc92:	4601      	mov	r1, r0
 801cc94:	6818      	ldr	r0, [r3, #0]
 801cc96:	f000 b82d 	b.w	801ccf4 <_malloc_r>
 801cc9a:	bf00      	nop
 801cc9c:	2000332c 	.word	0x2000332c

0801cca0 <free>:
 801cca0:	4b02      	ldr	r3, [pc, #8]	@ (801ccac <free+0xc>)
 801cca2:	4601      	mov	r1, r0
 801cca4:	6818      	ldr	r0, [r3, #0]
 801cca6:	f000 bcc1 	b.w	801d62c <_free_r>
 801ccaa:	bf00      	nop
 801ccac:	2000332c 	.word	0x2000332c

0801ccb0 <sbrk_aligned>:
 801ccb0:	b570      	push	{r4, r5, r6, lr}
 801ccb2:	4e0f      	ldr	r6, [pc, #60]	@ (801ccf0 <sbrk_aligned+0x40>)
 801ccb4:	460c      	mov	r4, r1
 801ccb6:	6831      	ldr	r1, [r6, #0]
 801ccb8:	4605      	mov	r5, r0
 801ccba:	b911      	cbnz	r1, 801ccc2 <sbrk_aligned+0x12>
 801ccbc:	f000 fc38 	bl	801d530 <_sbrk_r>
 801ccc0:	6030      	str	r0, [r6, #0]
 801ccc2:	4621      	mov	r1, r4
 801ccc4:	4628      	mov	r0, r5
 801ccc6:	f000 fc33 	bl	801d530 <_sbrk_r>
 801ccca:	1c43      	adds	r3, r0, #1
 801cccc:	d103      	bne.n	801ccd6 <sbrk_aligned+0x26>
 801ccce:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801ccd2:	4620      	mov	r0, r4
 801ccd4:	bd70      	pop	{r4, r5, r6, pc}
 801ccd6:	1cc4      	adds	r4, r0, #3
 801ccd8:	f024 0403 	bic.w	r4, r4, #3
 801ccdc:	42a0      	cmp	r0, r4
 801ccde:	d0f8      	beq.n	801ccd2 <sbrk_aligned+0x22>
 801cce0:	1a21      	subs	r1, r4, r0
 801cce2:	4628      	mov	r0, r5
 801cce4:	f000 fc24 	bl	801d530 <_sbrk_r>
 801cce8:	3001      	adds	r0, #1
 801ccea:	d1f2      	bne.n	801ccd2 <sbrk_aligned+0x22>
 801ccec:	e7ef      	b.n	801ccce <sbrk_aligned+0x1e>
 801ccee:	bf00      	nop
 801ccf0:	20019c40 	.word	0x20019c40

0801ccf4 <_malloc_r>:
 801ccf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ccf8:	1ccd      	adds	r5, r1, #3
 801ccfa:	f025 0503 	bic.w	r5, r5, #3
 801ccfe:	3508      	adds	r5, #8
 801cd00:	2d0c      	cmp	r5, #12
 801cd02:	bf38      	it	cc
 801cd04:	250c      	movcc	r5, #12
 801cd06:	2d00      	cmp	r5, #0
 801cd08:	4606      	mov	r6, r0
 801cd0a:	db01      	blt.n	801cd10 <_malloc_r+0x1c>
 801cd0c:	42a9      	cmp	r1, r5
 801cd0e:	d904      	bls.n	801cd1a <_malloc_r+0x26>
 801cd10:	230c      	movs	r3, #12
 801cd12:	6033      	str	r3, [r6, #0]
 801cd14:	2000      	movs	r0, #0
 801cd16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801cd1a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801cdf0 <_malloc_r+0xfc>
 801cd1e:	f000 f89f 	bl	801ce60 <__malloc_lock>
 801cd22:	f8d8 3000 	ldr.w	r3, [r8]
 801cd26:	461c      	mov	r4, r3
 801cd28:	bb44      	cbnz	r4, 801cd7c <_malloc_r+0x88>
 801cd2a:	4629      	mov	r1, r5
 801cd2c:	4630      	mov	r0, r6
 801cd2e:	f7ff ffbf 	bl	801ccb0 <sbrk_aligned>
 801cd32:	1c43      	adds	r3, r0, #1
 801cd34:	4604      	mov	r4, r0
 801cd36:	d158      	bne.n	801cdea <_malloc_r+0xf6>
 801cd38:	f8d8 4000 	ldr.w	r4, [r8]
 801cd3c:	4627      	mov	r7, r4
 801cd3e:	2f00      	cmp	r7, #0
 801cd40:	d143      	bne.n	801cdca <_malloc_r+0xd6>
 801cd42:	2c00      	cmp	r4, #0
 801cd44:	d04b      	beq.n	801cdde <_malloc_r+0xea>
 801cd46:	6823      	ldr	r3, [r4, #0]
 801cd48:	4639      	mov	r1, r7
 801cd4a:	4630      	mov	r0, r6
 801cd4c:	eb04 0903 	add.w	r9, r4, r3
 801cd50:	f000 fbee 	bl	801d530 <_sbrk_r>
 801cd54:	4581      	cmp	r9, r0
 801cd56:	d142      	bne.n	801cdde <_malloc_r+0xea>
 801cd58:	6821      	ldr	r1, [r4, #0]
 801cd5a:	1a6d      	subs	r5, r5, r1
 801cd5c:	4629      	mov	r1, r5
 801cd5e:	4630      	mov	r0, r6
 801cd60:	f7ff ffa6 	bl	801ccb0 <sbrk_aligned>
 801cd64:	3001      	adds	r0, #1
 801cd66:	d03a      	beq.n	801cdde <_malloc_r+0xea>
 801cd68:	6823      	ldr	r3, [r4, #0]
 801cd6a:	442b      	add	r3, r5
 801cd6c:	6023      	str	r3, [r4, #0]
 801cd6e:	f8d8 3000 	ldr.w	r3, [r8]
 801cd72:	685a      	ldr	r2, [r3, #4]
 801cd74:	bb62      	cbnz	r2, 801cdd0 <_malloc_r+0xdc>
 801cd76:	f8c8 7000 	str.w	r7, [r8]
 801cd7a:	e00f      	b.n	801cd9c <_malloc_r+0xa8>
 801cd7c:	6822      	ldr	r2, [r4, #0]
 801cd7e:	1b52      	subs	r2, r2, r5
 801cd80:	d420      	bmi.n	801cdc4 <_malloc_r+0xd0>
 801cd82:	2a0b      	cmp	r2, #11
 801cd84:	d917      	bls.n	801cdb6 <_malloc_r+0xc2>
 801cd86:	1961      	adds	r1, r4, r5
 801cd88:	42a3      	cmp	r3, r4
 801cd8a:	6025      	str	r5, [r4, #0]
 801cd8c:	bf18      	it	ne
 801cd8e:	6059      	strne	r1, [r3, #4]
 801cd90:	6863      	ldr	r3, [r4, #4]
 801cd92:	bf08      	it	eq
 801cd94:	f8c8 1000 	streq.w	r1, [r8]
 801cd98:	5162      	str	r2, [r4, r5]
 801cd9a:	604b      	str	r3, [r1, #4]
 801cd9c:	4630      	mov	r0, r6
 801cd9e:	f000 f865 	bl	801ce6c <__malloc_unlock>
 801cda2:	f104 000b 	add.w	r0, r4, #11
 801cda6:	1d23      	adds	r3, r4, #4
 801cda8:	f020 0007 	bic.w	r0, r0, #7
 801cdac:	1ac2      	subs	r2, r0, r3
 801cdae:	bf1c      	itt	ne
 801cdb0:	1a1b      	subne	r3, r3, r0
 801cdb2:	50a3      	strne	r3, [r4, r2]
 801cdb4:	e7af      	b.n	801cd16 <_malloc_r+0x22>
 801cdb6:	6862      	ldr	r2, [r4, #4]
 801cdb8:	42a3      	cmp	r3, r4
 801cdba:	bf0c      	ite	eq
 801cdbc:	f8c8 2000 	streq.w	r2, [r8]
 801cdc0:	605a      	strne	r2, [r3, #4]
 801cdc2:	e7eb      	b.n	801cd9c <_malloc_r+0xa8>
 801cdc4:	4623      	mov	r3, r4
 801cdc6:	6864      	ldr	r4, [r4, #4]
 801cdc8:	e7ae      	b.n	801cd28 <_malloc_r+0x34>
 801cdca:	463c      	mov	r4, r7
 801cdcc:	687f      	ldr	r7, [r7, #4]
 801cdce:	e7b6      	b.n	801cd3e <_malloc_r+0x4a>
 801cdd0:	461a      	mov	r2, r3
 801cdd2:	685b      	ldr	r3, [r3, #4]
 801cdd4:	42a3      	cmp	r3, r4
 801cdd6:	d1fb      	bne.n	801cdd0 <_malloc_r+0xdc>
 801cdd8:	2300      	movs	r3, #0
 801cdda:	6053      	str	r3, [r2, #4]
 801cddc:	e7de      	b.n	801cd9c <_malloc_r+0xa8>
 801cdde:	230c      	movs	r3, #12
 801cde0:	6033      	str	r3, [r6, #0]
 801cde2:	4630      	mov	r0, r6
 801cde4:	f000 f842 	bl	801ce6c <__malloc_unlock>
 801cde8:	e794      	b.n	801cd14 <_malloc_r+0x20>
 801cdea:	6005      	str	r5, [r0, #0]
 801cdec:	e7d6      	b.n	801cd9c <_malloc_r+0xa8>
 801cdee:	bf00      	nop
 801cdf0:	20019c44 	.word	0x20019c44

0801cdf4 <sniprintf>:
 801cdf4:	b40c      	push	{r2, r3}
 801cdf6:	b530      	push	{r4, r5, lr}
 801cdf8:	4b18      	ldr	r3, [pc, #96]	@ (801ce5c <sniprintf+0x68>)
 801cdfa:	1e0c      	subs	r4, r1, #0
 801cdfc:	681d      	ldr	r5, [r3, #0]
 801cdfe:	b09d      	sub	sp, #116	@ 0x74
 801ce00:	da08      	bge.n	801ce14 <sniprintf+0x20>
 801ce02:	238b      	movs	r3, #139	@ 0x8b
 801ce04:	602b      	str	r3, [r5, #0]
 801ce06:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801ce0a:	b01d      	add	sp, #116	@ 0x74
 801ce0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801ce10:	b002      	add	sp, #8
 801ce12:	4770      	bx	lr
 801ce14:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801ce18:	f8ad 3014 	strh.w	r3, [sp, #20]
 801ce1c:	f04f 0300 	mov.w	r3, #0
 801ce20:	931b      	str	r3, [sp, #108]	@ 0x6c
 801ce22:	bf14      	ite	ne
 801ce24:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801ce28:	4623      	moveq	r3, r4
 801ce2a:	9304      	str	r3, [sp, #16]
 801ce2c:	9307      	str	r3, [sp, #28]
 801ce2e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801ce32:	9002      	str	r0, [sp, #8]
 801ce34:	9006      	str	r0, [sp, #24]
 801ce36:	f8ad 3016 	strh.w	r3, [sp, #22]
 801ce3a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801ce3c:	ab21      	add	r3, sp, #132	@ 0x84
 801ce3e:	a902      	add	r1, sp, #8
 801ce40:	4628      	mov	r0, r5
 801ce42:	9301      	str	r3, [sp, #4]
 801ce44:	f000 fc98 	bl	801d778 <_svfiprintf_r>
 801ce48:	1c43      	adds	r3, r0, #1
 801ce4a:	bfbc      	itt	lt
 801ce4c:	238b      	movlt	r3, #139	@ 0x8b
 801ce4e:	602b      	strlt	r3, [r5, #0]
 801ce50:	2c00      	cmp	r4, #0
 801ce52:	d0da      	beq.n	801ce0a <sniprintf+0x16>
 801ce54:	9b02      	ldr	r3, [sp, #8]
 801ce56:	2200      	movs	r2, #0
 801ce58:	701a      	strb	r2, [r3, #0]
 801ce5a:	e7d6      	b.n	801ce0a <sniprintf+0x16>
 801ce5c:	2000332c 	.word	0x2000332c

0801ce60 <__malloc_lock>:
 801ce60:	4801      	ldr	r0, [pc, #4]	@ (801ce68 <__malloc_lock+0x8>)
 801ce62:	f000 bba0 	b.w	801d5a6 <__retarget_lock_acquire_recursive>
 801ce66:	bf00      	nop
 801ce68:	20019d85 	.word	0x20019d85

0801ce6c <__malloc_unlock>:
 801ce6c:	4801      	ldr	r0, [pc, #4]	@ (801ce74 <__malloc_unlock+0x8>)
 801ce6e:	f000 bb9b 	b.w	801d5a8 <__retarget_lock_release_recursive>
 801ce72:	bf00      	nop
 801ce74:	20019d85 	.word	0x20019d85

0801ce78 <srand>:
 801ce78:	b538      	push	{r3, r4, r5, lr}
 801ce7a:	4b10      	ldr	r3, [pc, #64]	@ (801cebc <srand+0x44>)
 801ce7c:	681d      	ldr	r5, [r3, #0]
 801ce7e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801ce80:	4604      	mov	r4, r0
 801ce82:	b9b3      	cbnz	r3, 801ceb2 <srand+0x3a>
 801ce84:	2018      	movs	r0, #24
 801ce86:	f7ff ff03 	bl	801cc90 <malloc>
 801ce8a:	4602      	mov	r2, r0
 801ce8c:	6328      	str	r0, [r5, #48]	@ 0x30
 801ce8e:	b920      	cbnz	r0, 801ce9a <srand+0x22>
 801ce90:	4b0b      	ldr	r3, [pc, #44]	@ (801cec0 <srand+0x48>)
 801ce92:	480c      	ldr	r0, [pc, #48]	@ (801cec4 <srand+0x4c>)
 801ce94:	2146      	movs	r1, #70	@ 0x46
 801ce96:	f000 fb9f 	bl	801d5d8 <__assert_func>
 801ce9a:	490b      	ldr	r1, [pc, #44]	@ (801cec8 <srand+0x50>)
 801ce9c:	4b0b      	ldr	r3, [pc, #44]	@ (801cecc <srand+0x54>)
 801ce9e:	e9c0 1300 	strd	r1, r3, [r0]
 801cea2:	4b0b      	ldr	r3, [pc, #44]	@ (801ced0 <srand+0x58>)
 801cea4:	6083      	str	r3, [r0, #8]
 801cea6:	230b      	movs	r3, #11
 801cea8:	8183      	strh	r3, [r0, #12]
 801ceaa:	2100      	movs	r1, #0
 801ceac:	2001      	movs	r0, #1
 801ceae:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801ceb2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801ceb4:	2200      	movs	r2, #0
 801ceb6:	611c      	str	r4, [r3, #16]
 801ceb8:	615a      	str	r2, [r3, #20]
 801ceba:	bd38      	pop	{r3, r4, r5, pc}
 801cebc:	2000332c 	.word	0x2000332c
 801cec0:	08020898 	.word	0x08020898
 801cec4:	080208af 	.word	0x080208af
 801cec8:	abcd330e 	.word	0xabcd330e
 801cecc:	e66d1234 	.word	0xe66d1234
 801ced0:	0005deec 	.word	0x0005deec

0801ced4 <rand>:
 801ced4:	4b16      	ldr	r3, [pc, #88]	@ (801cf30 <rand+0x5c>)
 801ced6:	b510      	push	{r4, lr}
 801ced8:	681c      	ldr	r4, [r3, #0]
 801ceda:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801cedc:	b9b3      	cbnz	r3, 801cf0c <rand+0x38>
 801cede:	2018      	movs	r0, #24
 801cee0:	f7ff fed6 	bl	801cc90 <malloc>
 801cee4:	4602      	mov	r2, r0
 801cee6:	6320      	str	r0, [r4, #48]	@ 0x30
 801cee8:	b920      	cbnz	r0, 801cef4 <rand+0x20>
 801ceea:	4b12      	ldr	r3, [pc, #72]	@ (801cf34 <rand+0x60>)
 801ceec:	4812      	ldr	r0, [pc, #72]	@ (801cf38 <rand+0x64>)
 801ceee:	2152      	movs	r1, #82	@ 0x52
 801cef0:	f000 fb72 	bl	801d5d8 <__assert_func>
 801cef4:	4911      	ldr	r1, [pc, #68]	@ (801cf3c <rand+0x68>)
 801cef6:	4b12      	ldr	r3, [pc, #72]	@ (801cf40 <rand+0x6c>)
 801cef8:	e9c0 1300 	strd	r1, r3, [r0]
 801cefc:	4b11      	ldr	r3, [pc, #68]	@ (801cf44 <rand+0x70>)
 801cefe:	6083      	str	r3, [r0, #8]
 801cf00:	230b      	movs	r3, #11
 801cf02:	8183      	strh	r3, [r0, #12]
 801cf04:	2100      	movs	r1, #0
 801cf06:	2001      	movs	r0, #1
 801cf08:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801cf0c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801cf0e:	480e      	ldr	r0, [pc, #56]	@ (801cf48 <rand+0x74>)
 801cf10:	690b      	ldr	r3, [r1, #16]
 801cf12:	694c      	ldr	r4, [r1, #20]
 801cf14:	4a0d      	ldr	r2, [pc, #52]	@ (801cf4c <rand+0x78>)
 801cf16:	4358      	muls	r0, r3
 801cf18:	fb02 0004 	mla	r0, r2, r4, r0
 801cf1c:	fba3 3202 	umull	r3, r2, r3, r2
 801cf20:	3301      	adds	r3, #1
 801cf22:	eb40 0002 	adc.w	r0, r0, r2
 801cf26:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801cf2a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801cf2e:	bd10      	pop	{r4, pc}
 801cf30:	2000332c 	.word	0x2000332c
 801cf34:	08020898 	.word	0x08020898
 801cf38:	080208af 	.word	0x080208af
 801cf3c:	abcd330e 	.word	0xabcd330e
 801cf40:	e66d1234 	.word	0xe66d1234
 801cf44:	0005deec 	.word	0x0005deec
 801cf48:	5851f42d 	.word	0x5851f42d
 801cf4c:	4c957f2d 	.word	0x4c957f2d

0801cf50 <realloc>:
 801cf50:	4b02      	ldr	r3, [pc, #8]	@ (801cf5c <realloc+0xc>)
 801cf52:	460a      	mov	r2, r1
 801cf54:	4601      	mov	r1, r0
 801cf56:	6818      	ldr	r0, [r3, #0]
 801cf58:	f000 b8e2 	b.w	801d120 <_realloc_r>
 801cf5c:	2000332c 	.word	0x2000332c

0801cf60 <std>:
 801cf60:	2300      	movs	r3, #0
 801cf62:	b510      	push	{r4, lr}
 801cf64:	4604      	mov	r4, r0
 801cf66:	e9c0 3300 	strd	r3, r3, [r0]
 801cf6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801cf6e:	6083      	str	r3, [r0, #8]
 801cf70:	8181      	strh	r1, [r0, #12]
 801cf72:	6643      	str	r3, [r0, #100]	@ 0x64
 801cf74:	81c2      	strh	r2, [r0, #14]
 801cf76:	6183      	str	r3, [r0, #24]
 801cf78:	4619      	mov	r1, r3
 801cf7a:	2208      	movs	r2, #8
 801cf7c:	305c      	adds	r0, #92	@ 0x5c
 801cf7e:	f000 fa87 	bl	801d490 <memset>
 801cf82:	4b0d      	ldr	r3, [pc, #52]	@ (801cfb8 <std+0x58>)
 801cf84:	6263      	str	r3, [r4, #36]	@ 0x24
 801cf86:	4b0d      	ldr	r3, [pc, #52]	@ (801cfbc <std+0x5c>)
 801cf88:	62a3      	str	r3, [r4, #40]	@ 0x28
 801cf8a:	4b0d      	ldr	r3, [pc, #52]	@ (801cfc0 <std+0x60>)
 801cf8c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801cf8e:	4b0d      	ldr	r3, [pc, #52]	@ (801cfc4 <std+0x64>)
 801cf90:	6323      	str	r3, [r4, #48]	@ 0x30
 801cf92:	4b0d      	ldr	r3, [pc, #52]	@ (801cfc8 <std+0x68>)
 801cf94:	6224      	str	r4, [r4, #32]
 801cf96:	429c      	cmp	r4, r3
 801cf98:	d006      	beq.n	801cfa8 <std+0x48>
 801cf9a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801cf9e:	4294      	cmp	r4, r2
 801cfa0:	d002      	beq.n	801cfa8 <std+0x48>
 801cfa2:	33d0      	adds	r3, #208	@ 0xd0
 801cfa4:	429c      	cmp	r4, r3
 801cfa6:	d105      	bne.n	801cfb4 <std+0x54>
 801cfa8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801cfac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cfb0:	f000 baf8 	b.w	801d5a4 <__retarget_lock_init_recursive>
 801cfb4:	bd10      	pop	{r4, pc}
 801cfb6:	bf00      	nop
 801cfb8:	0801e075 	.word	0x0801e075
 801cfbc:	0801e097 	.word	0x0801e097
 801cfc0:	0801e0cf 	.word	0x0801e0cf
 801cfc4:	0801e0f3 	.word	0x0801e0f3
 801cfc8:	20019c48 	.word	0x20019c48

0801cfcc <stdio_exit_handler>:
 801cfcc:	4a02      	ldr	r2, [pc, #8]	@ (801cfd8 <stdio_exit_handler+0xc>)
 801cfce:	4903      	ldr	r1, [pc, #12]	@ (801cfdc <stdio_exit_handler+0x10>)
 801cfd0:	4803      	ldr	r0, [pc, #12]	@ (801cfe0 <stdio_exit_handler+0x14>)
 801cfd2:	f000 b94b 	b.w	801d26c <_fwalk_sglue>
 801cfd6:	bf00      	nop
 801cfd8:	20003320 	.word	0x20003320
 801cfdc:	0801e015 	.word	0x0801e015
 801cfe0:	20003330 	.word	0x20003330

0801cfe4 <cleanup_stdio>:
 801cfe4:	6841      	ldr	r1, [r0, #4]
 801cfe6:	4b0c      	ldr	r3, [pc, #48]	@ (801d018 <cleanup_stdio+0x34>)
 801cfe8:	4299      	cmp	r1, r3
 801cfea:	b510      	push	{r4, lr}
 801cfec:	4604      	mov	r4, r0
 801cfee:	d001      	beq.n	801cff4 <cleanup_stdio+0x10>
 801cff0:	f001 f810 	bl	801e014 <_fflush_r>
 801cff4:	68a1      	ldr	r1, [r4, #8]
 801cff6:	4b09      	ldr	r3, [pc, #36]	@ (801d01c <cleanup_stdio+0x38>)
 801cff8:	4299      	cmp	r1, r3
 801cffa:	d002      	beq.n	801d002 <cleanup_stdio+0x1e>
 801cffc:	4620      	mov	r0, r4
 801cffe:	f001 f809 	bl	801e014 <_fflush_r>
 801d002:	68e1      	ldr	r1, [r4, #12]
 801d004:	4b06      	ldr	r3, [pc, #24]	@ (801d020 <cleanup_stdio+0x3c>)
 801d006:	4299      	cmp	r1, r3
 801d008:	d004      	beq.n	801d014 <cleanup_stdio+0x30>
 801d00a:	4620      	mov	r0, r4
 801d00c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d010:	f001 b800 	b.w	801e014 <_fflush_r>
 801d014:	bd10      	pop	{r4, pc}
 801d016:	bf00      	nop
 801d018:	20019c48 	.word	0x20019c48
 801d01c:	20019cb0 	.word	0x20019cb0
 801d020:	20019d18 	.word	0x20019d18

0801d024 <global_stdio_init.part.0>:
 801d024:	b510      	push	{r4, lr}
 801d026:	4b0b      	ldr	r3, [pc, #44]	@ (801d054 <global_stdio_init.part.0+0x30>)
 801d028:	4c0b      	ldr	r4, [pc, #44]	@ (801d058 <global_stdio_init.part.0+0x34>)
 801d02a:	4a0c      	ldr	r2, [pc, #48]	@ (801d05c <global_stdio_init.part.0+0x38>)
 801d02c:	601a      	str	r2, [r3, #0]
 801d02e:	4620      	mov	r0, r4
 801d030:	2200      	movs	r2, #0
 801d032:	2104      	movs	r1, #4
 801d034:	f7ff ff94 	bl	801cf60 <std>
 801d038:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801d03c:	2201      	movs	r2, #1
 801d03e:	2109      	movs	r1, #9
 801d040:	f7ff ff8e 	bl	801cf60 <std>
 801d044:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801d048:	2202      	movs	r2, #2
 801d04a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d04e:	2112      	movs	r1, #18
 801d050:	f7ff bf86 	b.w	801cf60 <std>
 801d054:	20019d80 	.word	0x20019d80
 801d058:	20019c48 	.word	0x20019c48
 801d05c:	0801cfcd 	.word	0x0801cfcd

0801d060 <__sfp_lock_acquire>:
 801d060:	4801      	ldr	r0, [pc, #4]	@ (801d068 <__sfp_lock_acquire+0x8>)
 801d062:	f000 baa0 	b.w	801d5a6 <__retarget_lock_acquire_recursive>
 801d066:	bf00      	nop
 801d068:	20019d86 	.word	0x20019d86

0801d06c <__sfp_lock_release>:
 801d06c:	4801      	ldr	r0, [pc, #4]	@ (801d074 <__sfp_lock_release+0x8>)
 801d06e:	f000 ba9b 	b.w	801d5a8 <__retarget_lock_release_recursive>
 801d072:	bf00      	nop
 801d074:	20019d86 	.word	0x20019d86

0801d078 <__sinit>:
 801d078:	b510      	push	{r4, lr}
 801d07a:	4604      	mov	r4, r0
 801d07c:	f7ff fff0 	bl	801d060 <__sfp_lock_acquire>
 801d080:	6a23      	ldr	r3, [r4, #32]
 801d082:	b11b      	cbz	r3, 801d08c <__sinit+0x14>
 801d084:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d088:	f7ff bff0 	b.w	801d06c <__sfp_lock_release>
 801d08c:	4b04      	ldr	r3, [pc, #16]	@ (801d0a0 <__sinit+0x28>)
 801d08e:	6223      	str	r3, [r4, #32]
 801d090:	4b04      	ldr	r3, [pc, #16]	@ (801d0a4 <__sinit+0x2c>)
 801d092:	681b      	ldr	r3, [r3, #0]
 801d094:	2b00      	cmp	r3, #0
 801d096:	d1f5      	bne.n	801d084 <__sinit+0xc>
 801d098:	f7ff ffc4 	bl	801d024 <global_stdio_init.part.0>
 801d09c:	e7f2      	b.n	801d084 <__sinit+0xc>
 801d09e:	bf00      	nop
 801d0a0:	0801cfe5 	.word	0x0801cfe5
 801d0a4:	20019d80 	.word	0x20019d80

0801d0a8 <_vsniprintf_r>:
 801d0a8:	b530      	push	{r4, r5, lr}
 801d0aa:	4614      	mov	r4, r2
 801d0ac:	2c00      	cmp	r4, #0
 801d0ae:	b09b      	sub	sp, #108	@ 0x6c
 801d0b0:	4605      	mov	r5, r0
 801d0b2:	461a      	mov	r2, r3
 801d0b4:	da05      	bge.n	801d0c2 <_vsniprintf_r+0x1a>
 801d0b6:	238b      	movs	r3, #139	@ 0x8b
 801d0b8:	6003      	str	r3, [r0, #0]
 801d0ba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801d0be:	b01b      	add	sp, #108	@ 0x6c
 801d0c0:	bd30      	pop	{r4, r5, pc}
 801d0c2:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801d0c6:	f8ad 300c 	strh.w	r3, [sp, #12]
 801d0ca:	f04f 0300 	mov.w	r3, #0
 801d0ce:	9319      	str	r3, [sp, #100]	@ 0x64
 801d0d0:	bf14      	ite	ne
 801d0d2:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801d0d6:	4623      	moveq	r3, r4
 801d0d8:	9302      	str	r3, [sp, #8]
 801d0da:	9305      	str	r3, [sp, #20]
 801d0dc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801d0e0:	9100      	str	r1, [sp, #0]
 801d0e2:	9104      	str	r1, [sp, #16]
 801d0e4:	f8ad 300e 	strh.w	r3, [sp, #14]
 801d0e8:	4669      	mov	r1, sp
 801d0ea:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801d0ec:	f000 fb44 	bl	801d778 <_svfiprintf_r>
 801d0f0:	1c43      	adds	r3, r0, #1
 801d0f2:	bfbc      	itt	lt
 801d0f4:	238b      	movlt	r3, #139	@ 0x8b
 801d0f6:	602b      	strlt	r3, [r5, #0]
 801d0f8:	2c00      	cmp	r4, #0
 801d0fa:	d0e0      	beq.n	801d0be <_vsniprintf_r+0x16>
 801d0fc:	9b00      	ldr	r3, [sp, #0]
 801d0fe:	2200      	movs	r2, #0
 801d100:	701a      	strb	r2, [r3, #0]
 801d102:	e7dc      	b.n	801d0be <_vsniprintf_r+0x16>

0801d104 <vsniprintf>:
 801d104:	b507      	push	{r0, r1, r2, lr}
 801d106:	9300      	str	r3, [sp, #0]
 801d108:	4613      	mov	r3, r2
 801d10a:	460a      	mov	r2, r1
 801d10c:	4601      	mov	r1, r0
 801d10e:	4803      	ldr	r0, [pc, #12]	@ (801d11c <vsniprintf+0x18>)
 801d110:	6800      	ldr	r0, [r0, #0]
 801d112:	f7ff ffc9 	bl	801d0a8 <_vsniprintf_r>
 801d116:	b003      	add	sp, #12
 801d118:	f85d fb04 	ldr.w	pc, [sp], #4
 801d11c:	2000332c 	.word	0x2000332c

0801d120 <_realloc_r>:
 801d120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d124:	4607      	mov	r7, r0
 801d126:	4614      	mov	r4, r2
 801d128:	460d      	mov	r5, r1
 801d12a:	b921      	cbnz	r1, 801d136 <_realloc_r+0x16>
 801d12c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d130:	4611      	mov	r1, r2
 801d132:	f7ff bddf 	b.w	801ccf4 <_malloc_r>
 801d136:	b92a      	cbnz	r2, 801d144 <_realloc_r+0x24>
 801d138:	f000 fa78 	bl	801d62c <_free_r>
 801d13c:	4625      	mov	r5, r4
 801d13e:	4628      	mov	r0, r5
 801d140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d144:	f000 ff8e 	bl	801e064 <_malloc_usable_size_r>
 801d148:	4284      	cmp	r4, r0
 801d14a:	4606      	mov	r6, r0
 801d14c:	d802      	bhi.n	801d154 <_realloc_r+0x34>
 801d14e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801d152:	d8f4      	bhi.n	801d13e <_realloc_r+0x1e>
 801d154:	4621      	mov	r1, r4
 801d156:	4638      	mov	r0, r7
 801d158:	f7ff fdcc 	bl	801ccf4 <_malloc_r>
 801d15c:	4680      	mov	r8, r0
 801d15e:	b908      	cbnz	r0, 801d164 <_realloc_r+0x44>
 801d160:	4645      	mov	r5, r8
 801d162:	e7ec      	b.n	801d13e <_realloc_r+0x1e>
 801d164:	42b4      	cmp	r4, r6
 801d166:	4622      	mov	r2, r4
 801d168:	4629      	mov	r1, r5
 801d16a:	bf28      	it	cs
 801d16c:	4632      	movcs	r2, r6
 801d16e:	f000 fa24 	bl	801d5ba <memcpy>
 801d172:	4629      	mov	r1, r5
 801d174:	4638      	mov	r0, r7
 801d176:	f000 fa59 	bl	801d62c <_free_r>
 801d17a:	e7f1      	b.n	801d160 <_realloc_r+0x40>

0801d17c <_strtoul_l.isra.0>:
 801d17c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d180:	4e34      	ldr	r6, [pc, #208]	@ (801d254 <_strtoul_l.isra.0+0xd8>)
 801d182:	4686      	mov	lr, r0
 801d184:	460d      	mov	r5, r1
 801d186:	4628      	mov	r0, r5
 801d188:	f815 4b01 	ldrb.w	r4, [r5], #1
 801d18c:	5d37      	ldrb	r7, [r6, r4]
 801d18e:	f017 0708 	ands.w	r7, r7, #8
 801d192:	d1f8      	bne.n	801d186 <_strtoul_l.isra.0+0xa>
 801d194:	2c2d      	cmp	r4, #45	@ 0x2d
 801d196:	d110      	bne.n	801d1ba <_strtoul_l.isra.0+0x3e>
 801d198:	782c      	ldrb	r4, [r5, #0]
 801d19a:	2701      	movs	r7, #1
 801d19c:	1c85      	adds	r5, r0, #2
 801d19e:	f033 0010 	bics.w	r0, r3, #16
 801d1a2:	d115      	bne.n	801d1d0 <_strtoul_l.isra.0+0x54>
 801d1a4:	2c30      	cmp	r4, #48	@ 0x30
 801d1a6:	d10d      	bne.n	801d1c4 <_strtoul_l.isra.0+0x48>
 801d1a8:	7828      	ldrb	r0, [r5, #0]
 801d1aa:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 801d1ae:	2858      	cmp	r0, #88	@ 0x58
 801d1b0:	d108      	bne.n	801d1c4 <_strtoul_l.isra.0+0x48>
 801d1b2:	786c      	ldrb	r4, [r5, #1]
 801d1b4:	3502      	adds	r5, #2
 801d1b6:	2310      	movs	r3, #16
 801d1b8:	e00a      	b.n	801d1d0 <_strtoul_l.isra.0+0x54>
 801d1ba:	2c2b      	cmp	r4, #43	@ 0x2b
 801d1bc:	bf04      	itt	eq
 801d1be:	782c      	ldrbeq	r4, [r5, #0]
 801d1c0:	1c85      	addeq	r5, r0, #2
 801d1c2:	e7ec      	b.n	801d19e <_strtoul_l.isra.0+0x22>
 801d1c4:	2b00      	cmp	r3, #0
 801d1c6:	d1f6      	bne.n	801d1b6 <_strtoul_l.isra.0+0x3a>
 801d1c8:	2c30      	cmp	r4, #48	@ 0x30
 801d1ca:	bf14      	ite	ne
 801d1cc:	230a      	movne	r3, #10
 801d1ce:	2308      	moveq	r3, #8
 801d1d0:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 801d1d4:	2600      	movs	r6, #0
 801d1d6:	fbb8 f8f3 	udiv	r8, r8, r3
 801d1da:	fb03 f908 	mul.w	r9, r3, r8
 801d1de:	ea6f 0909 	mvn.w	r9, r9
 801d1e2:	4630      	mov	r0, r6
 801d1e4:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 801d1e8:	f1bc 0f09 	cmp.w	ip, #9
 801d1ec:	d810      	bhi.n	801d210 <_strtoul_l.isra.0+0x94>
 801d1ee:	4664      	mov	r4, ip
 801d1f0:	42a3      	cmp	r3, r4
 801d1f2:	dd1e      	ble.n	801d232 <_strtoul_l.isra.0+0xb6>
 801d1f4:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 801d1f8:	d007      	beq.n	801d20a <_strtoul_l.isra.0+0x8e>
 801d1fa:	4580      	cmp	r8, r0
 801d1fc:	d316      	bcc.n	801d22c <_strtoul_l.isra.0+0xb0>
 801d1fe:	d101      	bne.n	801d204 <_strtoul_l.isra.0+0x88>
 801d200:	45a1      	cmp	r9, r4
 801d202:	db13      	blt.n	801d22c <_strtoul_l.isra.0+0xb0>
 801d204:	fb00 4003 	mla	r0, r0, r3, r4
 801d208:	2601      	movs	r6, #1
 801d20a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801d20e:	e7e9      	b.n	801d1e4 <_strtoul_l.isra.0+0x68>
 801d210:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 801d214:	f1bc 0f19 	cmp.w	ip, #25
 801d218:	d801      	bhi.n	801d21e <_strtoul_l.isra.0+0xa2>
 801d21a:	3c37      	subs	r4, #55	@ 0x37
 801d21c:	e7e8      	b.n	801d1f0 <_strtoul_l.isra.0+0x74>
 801d21e:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 801d222:	f1bc 0f19 	cmp.w	ip, #25
 801d226:	d804      	bhi.n	801d232 <_strtoul_l.isra.0+0xb6>
 801d228:	3c57      	subs	r4, #87	@ 0x57
 801d22a:	e7e1      	b.n	801d1f0 <_strtoul_l.isra.0+0x74>
 801d22c:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 801d230:	e7eb      	b.n	801d20a <_strtoul_l.isra.0+0x8e>
 801d232:	1c73      	adds	r3, r6, #1
 801d234:	d106      	bne.n	801d244 <_strtoul_l.isra.0+0xc8>
 801d236:	2322      	movs	r3, #34	@ 0x22
 801d238:	f8ce 3000 	str.w	r3, [lr]
 801d23c:	4630      	mov	r0, r6
 801d23e:	b932      	cbnz	r2, 801d24e <_strtoul_l.isra.0+0xd2>
 801d240:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d244:	b107      	cbz	r7, 801d248 <_strtoul_l.isra.0+0xcc>
 801d246:	4240      	negs	r0, r0
 801d248:	2a00      	cmp	r2, #0
 801d24a:	d0f9      	beq.n	801d240 <_strtoul_l.isra.0+0xc4>
 801d24c:	b106      	cbz	r6, 801d250 <_strtoul_l.isra.0+0xd4>
 801d24e:	1e69      	subs	r1, r5, #1
 801d250:	6011      	str	r1, [r2, #0]
 801d252:	e7f5      	b.n	801d240 <_strtoul_l.isra.0+0xc4>
 801d254:	080209e9 	.word	0x080209e9

0801d258 <strtoul>:
 801d258:	4613      	mov	r3, r2
 801d25a:	460a      	mov	r2, r1
 801d25c:	4601      	mov	r1, r0
 801d25e:	4802      	ldr	r0, [pc, #8]	@ (801d268 <strtoul+0x10>)
 801d260:	6800      	ldr	r0, [r0, #0]
 801d262:	f7ff bf8b 	b.w	801d17c <_strtoul_l.isra.0>
 801d266:	bf00      	nop
 801d268:	2000332c 	.word	0x2000332c

0801d26c <_fwalk_sglue>:
 801d26c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d270:	4607      	mov	r7, r0
 801d272:	4688      	mov	r8, r1
 801d274:	4614      	mov	r4, r2
 801d276:	2600      	movs	r6, #0
 801d278:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801d27c:	f1b9 0901 	subs.w	r9, r9, #1
 801d280:	d505      	bpl.n	801d28e <_fwalk_sglue+0x22>
 801d282:	6824      	ldr	r4, [r4, #0]
 801d284:	2c00      	cmp	r4, #0
 801d286:	d1f7      	bne.n	801d278 <_fwalk_sglue+0xc>
 801d288:	4630      	mov	r0, r6
 801d28a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d28e:	89ab      	ldrh	r3, [r5, #12]
 801d290:	2b01      	cmp	r3, #1
 801d292:	d907      	bls.n	801d2a4 <_fwalk_sglue+0x38>
 801d294:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801d298:	3301      	adds	r3, #1
 801d29a:	d003      	beq.n	801d2a4 <_fwalk_sglue+0x38>
 801d29c:	4629      	mov	r1, r5
 801d29e:	4638      	mov	r0, r7
 801d2a0:	47c0      	blx	r8
 801d2a2:	4306      	orrs	r6, r0
 801d2a4:	3568      	adds	r5, #104	@ 0x68
 801d2a6:	e7e9      	b.n	801d27c <_fwalk_sglue+0x10>

0801d2a8 <_fwrite_r>:
 801d2a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d2ac:	9c08      	ldr	r4, [sp, #32]
 801d2ae:	468a      	mov	sl, r1
 801d2b0:	4690      	mov	r8, r2
 801d2b2:	fb02 f903 	mul.w	r9, r2, r3
 801d2b6:	4606      	mov	r6, r0
 801d2b8:	b118      	cbz	r0, 801d2c2 <_fwrite_r+0x1a>
 801d2ba:	6a03      	ldr	r3, [r0, #32]
 801d2bc:	b90b      	cbnz	r3, 801d2c2 <_fwrite_r+0x1a>
 801d2be:	f7ff fedb 	bl	801d078 <__sinit>
 801d2c2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801d2c4:	07dd      	lsls	r5, r3, #31
 801d2c6:	d405      	bmi.n	801d2d4 <_fwrite_r+0x2c>
 801d2c8:	89a3      	ldrh	r3, [r4, #12]
 801d2ca:	0598      	lsls	r0, r3, #22
 801d2cc:	d402      	bmi.n	801d2d4 <_fwrite_r+0x2c>
 801d2ce:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801d2d0:	f000 f969 	bl	801d5a6 <__retarget_lock_acquire_recursive>
 801d2d4:	89a3      	ldrh	r3, [r4, #12]
 801d2d6:	0719      	lsls	r1, r3, #28
 801d2d8:	d516      	bpl.n	801d308 <_fwrite_r+0x60>
 801d2da:	6923      	ldr	r3, [r4, #16]
 801d2dc:	b1a3      	cbz	r3, 801d308 <_fwrite_r+0x60>
 801d2de:	2500      	movs	r5, #0
 801d2e0:	454d      	cmp	r5, r9
 801d2e2:	d01f      	beq.n	801d324 <_fwrite_r+0x7c>
 801d2e4:	68a7      	ldr	r7, [r4, #8]
 801d2e6:	f81a 1005 	ldrb.w	r1, [sl, r5]
 801d2ea:	3f01      	subs	r7, #1
 801d2ec:	2f00      	cmp	r7, #0
 801d2ee:	60a7      	str	r7, [r4, #8]
 801d2f0:	da04      	bge.n	801d2fc <_fwrite_r+0x54>
 801d2f2:	69a3      	ldr	r3, [r4, #24]
 801d2f4:	429f      	cmp	r7, r3
 801d2f6:	db0f      	blt.n	801d318 <_fwrite_r+0x70>
 801d2f8:	290a      	cmp	r1, #10
 801d2fa:	d00d      	beq.n	801d318 <_fwrite_r+0x70>
 801d2fc:	6823      	ldr	r3, [r4, #0]
 801d2fe:	1c5a      	adds	r2, r3, #1
 801d300:	6022      	str	r2, [r4, #0]
 801d302:	7019      	strb	r1, [r3, #0]
 801d304:	3501      	adds	r5, #1
 801d306:	e7eb      	b.n	801d2e0 <_fwrite_r+0x38>
 801d308:	4621      	mov	r1, r4
 801d30a:	4630      	mov	r0, r6
 801d30c:	f000 ff46 	bl	801e19c <__swsetup_r>
 801d310:	2800      	cmp	r0, #0
 801d312:	d0e4      	beq.n	801d2de <_fwrite_r+0x36>
 801d314:	2500      	movs	r5, #0
 801d316:	e005      	b.n	801d324 <_fwrite_r+0x7c>
 801d318:	4622      	mov	r2, r4
 801d31a:	4630      	mov	r0, r6
 801d31c:	f000 ff00 	bl	801e120 <__swbuf_r>
 801d320:	3001      	adds	r0, #1
 801d322:	d1ef      	bne.n	801d304 <_fwrite_r+0x5c>
 801d324:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801d326:	07da      	lsls	r2, r3, #31
 801d328:	d405      	bmi.n	801d336 <_fwrite_r+0x8e>
 801d32a:	89a3      	ldrh	r3, [r4, #12]
 801d32c:	059b      	lsls	r3, r3, #22
 801d32e:	d402      	bmi.n	801d336 <_fwrite_r+0x8e>
 801d330:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801d332:	f000 f939 	bl	801d5a8 <__retarget_lock_release_recursive>
 801d336:	fbb5 f0f8 	udiv	r0, r5, r8
 801d33a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0801d340 <fwrite>:
 801d340:	b507      	push	{r0, r1, r2, lr}
 801d342:	9300      	str	r3, [sp, #0]
 801d344:	4613      	mov	r3, r2
 801d346:	460a      	mov	r2, r1
 801d348:	4601      	mov	r1, r0
 801d34a:	4803      	ldr	r0, [pc, #12]	@ (801d358 <fwrite+0x18>)
 801d34c:	6800      	ldr	r0, [r0, #0]
 801d34e:	f7ff ffab 	bl	801d2a8 <_fwrite_r>
 801d352:	b003      	add	sp, #12
 801d354:	f85d fb04 	ldr.w	pc, [sp], #4
 801d358:	2000332c 	.word	0x2000332c

0801d35c <iprintf>:
 801d35c:	b40f      	push	{r0, r1, r2, r3}
 801d35e:	b507      	push	{r0, r1, r2, lr}
 801d360:	4906      	ldr	r1, [pc, #24]	@ (801d37c <iprintf+0x20>)
 801d362:	ab04      	add	r3, sp, #16
 801d364:	6808      	ldr	r0, [r1, #0]
 801d366:	f853 2b04 	ldr.w	r2, [r3], #4
 801d36a:	6881      	ldr	r1, [r0, #8]
 801d36c:	9301      	str	r3, [sp, #4]
 801d36e:	f000 fb29 	bl	801d9c4 <_vfiprintf_r>
 801d372:	b003      	add	sp, #12
 801d374:	f85d eb04 	ldr.w	lr, [sp], #4
 801d378:	b004      	add	sp, #16
 801d37a:	4770      	bx	lr
 801d37c:	2000332c 	.word	0x2000332c

0801d380 <_puts_r>:
 801d380:	6a03      	ldr	r3, [r0, #32]
 801d382:	b570      	push	{r4, r5, r6, lr}
 801d384:	6884      	ldr	r4, [r0, #8]
 801d386:	4605      	mov	r5, r0
 801d388:	460e      	mov	r6, r1
 801d38a:	b90b      	cbnz	r3, 801d390 <_puts_r+0x10>
 801d38c:	f7ff fe74 	bl	801d078 <__sinit>
 801d390:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801d392:	07db      	lsls	r3, r3, #31
 801d394:	d405      	bmi.n	801d3a2 <_puts_r+0x22>
 801d396:	89a3      	ldrh	r3, [r4, #12]
 801d398:	0598      	lsls	r0, r3, #22
 801d39a:	d402      	bmi.n	801d3a2 <_puts_r+0x22>
 801d39c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801d39e:	f000 f902 	bl	801d5a6 <__retarget_lock_acquire_recursive>
 801d3a2:	89a3      	ldrh	r3, [r4, #12]
 801d3a4:	0719      	lsls	r1, r3, #28
 801d3a6:	d502      	bpl.n	801d3ae <_puts_r+0x2e>
 801d3a8:	6923      	ldr	r3, [r4, #16]
 801d3aa:	2b00      	cmp	r3, #0
 801d3ac:	d135      	bne.n	801d41a <_puts_r+0x9a>
 801d3ae:	4621      	mov	r1, r4
 801d3b0:	4628      	mov	r0, r5
 801d3b2:	f000 fef3 	bl	801e19c <__swsetup_r>
 801d3b6:	b380      	cbz	r0, 801d41a <_puts_r+0x9a>
 801d3b8:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 801d3bc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801d3be:	07da      	lsls	r2, r3, #31
 801d3c0:	d405      	bmi.n	801d3ce <_puts_r+0x4e>
 801d3c2:	89a3      	ldrh	r3, [r4, #12]
 801d3c4:	059b      	lsls	r3, r3, #22
 801d3c6:	d402      	bmi.n	801d3ce <_puts_r+0x4e>
 801d3c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801d3ca:	f000 f8ed 	bl	801d5a8 <__retarget_lock_release_recursive>
 801d3ce:	4628      	mov	r0, r5
 801d3d0:	bd70      	pop	{r4, r5, r6, pc}
 801d3d2:	2b00      	cmp	r3, #0
 801d3d4:	da04      	bge.n	801d3e0 <_puts_r+0x60>
 801d3d6:	69a2      	ldr	r2, [r4, #24]
 801d3d8:	429a      	cmp	r2, r3
 801d3da:	dc17      	bgt.n	801d40c <_puts_r+0x8c>
 801d3dc:	290a      	cmp	r1, #10
 801d3de:	d015      	beq.n	801d40c <_puts_r+0x8c>
 801d3e0:	6823      	ldr	r3, [r4, #0]
 801d3e2:	1c5a      	adds	r2, r3, #1
 801d3e4:	6022      	str	r2, [r4, #0]
 801d3e6:	7019      	strb	r1, [r3, #0]
 801d3e8:	68a3      	ldr	r3, [r4, #8]
 801d3ea:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801d3ee:	3b01      	subs	r3, #1
 801d3f0:	60a3      	str	r3, [r4, #8]
 801d3f2:	2900      	cmp	r1, #0
 801d3f4:	d1ed      	bne.n	801d3d2 <_puts_r+0x52>
 801d3f6:	2b00      	cmp	r3, #0
 801d3f8:	da11      	bge.n	801d41e <_puts_r+0x9e>
 801d3fa:	4622      	mov	r2, r4
 801d3fc:	210a      	movs	r1, #10
 801d3fe:	4628      	mov	r0, r5
 801d400:	f000 fe8e 	bl	801e120 <__swbuf_r>
 801d404:	3001      	adds	r0, #1
 801d406:	d0d7      	beq.n	801d3b8 <_puts_r+0x38>
 801d408:	250a      	movs	r5, #10
 801d40a:	e7d7      	b.n	801d3bc <_puts_r+0x3c>
 801d40c:	4622      	mov	r2, r4
 801d40e:	4628      	mov	r0, r5
 801d410:	f000 fe86 	bl	801e120 <__swbuf_r>
 801d414:	3001      	adds	r0, #1
 801d416:	d1e7      	bne.n	801d3e8 <_puts_r+0x68>
 801d418:	e7ce      	b.n	801d3b8 <_puts_r+0x38>
 801d41a:	3e01      	subs	r6, #1
 801d41c:	e7e4      	b.n	801d3e8 <_puts_r+0x68>
 801d41e:	6823      	ldr	r3, [r4, #0]
 801d420:	1c5a      	adds	r2, r3, #1
 801d422:	6022      	str	r2, [r4, #0]
 801d424:	220a      	movs	r2, #10
 801d426:	701a      	strb	r2, [r3, #0]
 801d428:	e7ee      	b.n	801d408 <_puts_r+0x88>
	...

0801d42c <puts>:
 801d42c:	4b02      	ldr	r3, [pc, #8]	@ (801d438 <puts+0xc>)
 801d42e:	4601      	mov	r1, r0
 801d430:	6818      	ldr	r0, [r3, #0]
 801d432:	f7ff bfa5 	b.w	801d380 <_puts_r>
 801d436:	bf00      	nop
 801d438:	2000332c 	.word	0x2000332c

0801d43c <memcmp>:
 801d43c:	b510      	push	{r4, lr}
 801d43e:	3901      	subs	r1, #1
 801d440:	4402      	add	r2, r0
 801d442:	4290      	cmp	r0, r2
 801d444:	d101      	bne.n	801d44a <memcmp+0xe>
 801d446:	2000      	movs	r0, #0
 801d448:	e005      	b.n	801d456 <memcmp+0x1a>
 801d44a:	7803      	ldrb	r3, [r0, #0]
 801d44c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801d450:	42a3      	cmp	r3, r4
 801d452:	d001      	beq.n	801d458 <memcmp+0x1c>
 801d454:	1b18      	subs	r0, r3, r4
 801d456:	bd10      	pop	{r4, pc}
 801d458:	3001      	adds	r0, #1
 801d45a:	e7f2      	b.n	801d442 <memcmp+0x6>

0801d45c <memmove>:
 801d45c:	4288      	cmp	r0, r1
 801d45e:	b510      	push	{r4, lr}
 801d460:	eb01 0402 	add.w	r4, r1, r2
 801d464:	d902      	bls.n	801d46c <memmove+0x10>
 801d466:	4284      	cmp	r4, r0
 801d468:	4623      	mov	r3, r4
 801d46a:	d807      	bhi.n	801d47c <memmove+0x20>
 801d46c:	1e43      	subs	r3, r0, #1
 801d46e:	42a1      	cmp	r1, r4
 801d470:	d008      	beq.n	801d484 <memmove+0x28>
 801d472:	f811 2b01 	ldrb.w	r2, [r1], #1
 801d476:	f803 2f01 	strb.w	r2, [r3, #1]!
 801d47a:	e7f8      	b.n	801d46e <memmove+0x12>
 801d47c:	4402      	add	r2, r0
 801d47e:	4601      	mov	r1, r0
 801d480:	428a      	cmp	r2, r1
 801d482:	d100      	bne.n	801d486 <memmove+0x2a>
 801d484:	bd10      	pop	{r4, pc}
 801d486:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801d48a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801d48e:	e7f7      	b.n	801d480 <memmove+0x24>

0801d490 <memset>:
 801d490:	4402      	add	r2, r0
 801d492:	4603      	mov	r3, r0
 801d494:	4293      	cmp	r3, r2
 801d496:	d100      	bne.n	801d49a <memset+0xa>
 801d498:	4770      	bx	lr
 801d49a:	f803 1b01 	strb.w	r1, [r3], #1
 801d49e:	e7f9      	b.n	801d494 <memset+0x4>

0801d4a0 <strchr>:
 801d4a0:	b2c9      	uxtb	r1, r1
 801d4a2:	4603      	mov	r3, r0
 801d4a4:	4618      	mov	r0, r3
 801d4a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d4aa:	b112      	cbz	r2, 801d4b2 <strchr+0x12>
 801d4ac:	428a      	cmp	r2, r1
 801d4ae:	d1f9      	bne.n	801d4a4 <strchr+0x4>
 801d4b0:	4770      	bx	lr
 801d4b2:	2900      	cmp	r1, #0
 801d4b4:	bf18      	it	ne
 801d4b6:	2000      	movne	r0, #0
 801d4b8:	4770      	bx	lr

0801d4ba <strncmp>:
 801d4ba:	b510      	push	{r4, lr}
 801d4bc:	b16a      	cbz	r2, 801d4da <strncmp+0x20>
 801d4be:	3901      	subs	r1, #1
 801d4c0:	1884      	adds	r4, r0, r2
 801d4c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d4c6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801d4ca:	429a      	cmp	r2, r3
 801d4cc:	d103      	bne.n	801d4d6 <strncmp+0x1c>
 801d4ce:	42a0      	cmp	r0, r4
 801d4d0:	d001      	beq.n	801d4d6 <strncmp+0x1c>
 801d4d2:	2a00      	cmp	r2, #0
 801d4d4:	d1f5      	bne.n	801d4c2 <strncmp+0x8>
 801d4d6:	1ad0      	subs	r0, r2, r3
 801d4d8:	bd10      	pop	{r4, pc}
 801d4da:	4610      	mov	r0, r2
 801d4dc:	e7fc      	b.n	801d4d8 <strncmp+0x1e>

0801d4de <strncpy>:
 801d4de:	b510      	push	{r4, lr}
 801d4e0:	3901      	subs	r1, #1
 801d4e2:	4603      	mov	r3, r0
 801d4e4:	b132      	cbz	r2, 801d4f4 <strncpy+0x16>
 801d4e6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801d4ea:	f803 4b01 	strb.w	r4, [r3], #1
 801d4ee:	3a01      	subs	r2, #1
 801d4f0:	2c00      	cmp	r4, #0
 801d4f2:	d1f7      	bne.n	801d4e4 <strncpy+0x6>
 801d4f4:	441a      	add	r2, r3
 801d4f6:	2100      	movs	r1, #0
 801d4f8:	4293      	cmp	r3, r2
 801d4fa:	d100      	bne.n	801d4fe <strncpy+0x20>
 801d4fc:	bd10      	pop	{r4, pc}
 801d4fe:	f803 1b01 	strb.w	r1, [r3], #1
 801d502:	e7f9      	b.n	801d4f8 <strncpy+0x1a>

0801d504 <strstr>:
 801d504:	780a      	ldrb	r2, [r1, #0]
 801d506:	b570      	push	{r4, r5, r6, lr}
 801d508:	b96a      	cbnz	r2, 801d526 <strstr+0x22>
 801d50a:	bd70      	pop	{r4, r5, r6, pc}
 801d50c:	429a      	cmp	r2, r3
 801d50e:	d109      	bne.n	801d524 <strstr+0x20>
 801d510:	460c      	mov	r4, r1
 801d512:	4605      	mov	r5, r0
 801d514:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801d518:	2b00      	cmp	r3, #0
 801d51a:	d0f6      	beq.n	801d50a <strstr+0x6>
 801d51c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801d520:	429e      	cmp	r6, r3
 801d522:	d0f7      	beq.n	801d514 <strstr+0x10>
 801d524:	3001      	adds	r0, #1
 801d526:	7803      	ldrb	r3, [r0, #0]
 801d528:	2b00      	cmp	r3, #0
 801d52a:	d1ef      	bne.n	801d50c <strstr+0x8>
 801d52c:	4618      	mov	r0, r3
 801d52e:	e7ec      	b.n	801d50a <strstr+0x6>

0801d530 <_sbrk_r>:
 801d530:	b538      	push	{r3, r4, r5, lr}
 801d532:	4d06      	ldr	r5, [pc, #24]	@ (801d54c <_sbrk_r+0x1c>)
 801d534:	2300      	movs	r3, #0
 801d536:	4604      	mov	r4, r0
 801d538:	4608      	mov	r0, r1
 801d53a:	602b      	str	r3, [r5, #0]
 801d53c:	f7e5 f94c 	bl	80027d8 <_sbrk>
 801d540:	1c43      	adds	r3, r0, #1
 801d542:	d102      	bne.n	801d54a <_sbrk_r+0x1a>
 801d544:	682b      	ldr	r3, [r5, #0]
 801d546:	b103      	cbz	r3, 801d54a <_sbrk_r+0x1a>
 801d548:	6023      	str	r3, [r4, #0]
 801d54a:	bd38      	pop	{r3, r4, r5, pc}
 801d54c:	20019d88 	.word	0x20019d88

0801d550 <__errno>:
 801d550:	4b01      	ldr	r3, [pc, #4]	@ (801d558 <__errno+0x8>)
 801d552:	6818      	ldr	r0, [r3, #0]
 801d554:	4770      	bx	lr
 801d556:	bf00      	nop
 801d558:	2000332c 	.word	0x2000332c

0801d55c <__libc_init_array>:
 801d55c:	b570      	push	{r4, r5, r6, lr}
 801d55e:	4d0d      	ldr	r5, [pc, #52]	@ (801d594 <__libc_init_array+0x38>)
 801d560:	4c0d      	ldr	r4, [pc, #52]	@ (801d598 <__libc_init_array+0x3c>)
 801d562:	1b64      	subs	r4, r4, r5
 801d564:	10a4      	asrs	r4, r4, #2
 801d566:	2600      	movs	r6, #0
 801d568:	42a6      	cmp	r6, r4
 801d56a:	d109      	bne.n	801d580 <__libc_init_array+0x24>
 801d56c:	4d0b      	ldr	r5, [pc, #44]	@ (801d59c <__libc_init_array+0x40>)
 801d56e:	4c0c      	ldr	r4, [pc, #48]	@ (801d5a0 <__libc_init_array+0x44>)
 801d570:	f000 ff80 	bl	801e474 <_init>
 801d574:	1b64      	subs	r4, r4, r5
 801d576:	10a4      	asrs	r4, r4, #2
 801d578:	2600      	movs	r6, #0
 801d57a:	42a6      	cmp	r6, r4
 801d57c:	d105      	bne.n	801d58a <__libc_init_array+0x2e>
 801d57e:	bd70      	pop	{r4, r5, r6, pc}
 801d580:	f855 3b04 	ldr.w	r3, [r5], #4
 801d584:	4798      	blx	r3
 801d586:	3601      	adds	r6, #1
 801d588:	e7ee      	b.n	801d568 <__libc_init_array+0xc>
 801d58a:	f855 3b04 	ldr.w	r3, [r5], #4
 801d58e:	4798      	blx	r3
 801d590:	3601      	adds	r6, #1
 801d592:	e7f2      	b.n	801d57a <__libc_init_array+0x1e>
 801d594:	08020af4 	.word	0x08020af4
 801d598:	08020af4 	.word	0x08020af4
 801d59c:	08020af4 	.word	0x08020af4
 801d5a0:	08020b0c 	.word	0x08020b0c

0801d5a4 <__retarget_lock_init_recursive>:
 801d5a4:	4770      	bx	lr

0801d5a6 <__retarget_lock_acquire_recursive>:
 801d5a6:	4770      	bx	lr

0801d5a8 <__retarget_lock_release_recursive>:
 801d5a8:	4770      	bx	lr

0801d5aa <strcpy>:
 801d5aa:	4603      	mov	r3, r0
 801d5ac:	f811 2b01 	ldrb.w	r2, [r1], #1
 801d5b0:	f803 2b01 	strb.w	r2, [r3], #1
 801d5b4:	2a00      	cmp	r2, #0
 801d5b6:	d1f9      	bne.n	801d5ac <strcpy+0x2>
 801d5b8:	4770      	bx	lr

0801d5ba <memcpy>:
 801d5ba:	440a      	add	r2, r1
 801d5bc:	4291      	cmp	r1, r2
 801d5be:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 801d5c2:	d100      	bne.n	801d5c6 <memcpy+0xc>
 801d5c4:	4770      	bx	lr
 801d5c6:	b510      	push	{r4, lr}
 801d5c8:	f811 4b01 	ldrb.w	r4, [r1], #1
 801d5cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 801d5d0:	4291      	cmp	r1, r2
 801d5d2:	d1f9      	bne.n	801d5c8 <memcpy+0xe>
 801d5d4:	bd10      	pop	{r4, pc}
	...

0801d5d8 <__assert_func>:
 801d5d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801d5da:	4614      	mov	r4, r2
 801d5dc:	461a      	mov	r2, r3
 801d5de:	4b09      	ldr	r3, [pc, #36]	@ (801d604 <__assert_func+0x2c>)
 801d5e0:	681b      	ldr	r3, [r3, #0]
 801d5e2:	4605      	mov	r5, r0
 801d5e4:	68d8      	ldr	r0, [r3, #12]
 801d5e6:	b14c      	cbz	r4, 801d5fc <__assert_func+0x24>
 801d5e8:	4b07      	ldr	r3, [pc, #28]	@ (801d608 <__assert_func+0x30>)
 801d5ea:	9100      	str	r1, [sp, #0]
 801d5ec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801d5f0:	4906      	ldr	r1, [pc, #24]	@ (801d60c <__assert_func+0x34>)
 801d5f2:	462b      	mov	r3, r5
 801d5f4:	f000 fd82 	bl	801e0fc <fiprintf>
 801d5f8:	f000 fef0 	bl	801e3dc <abort>
 801d5fc:	4b04      	ldr	r3, [pc, #16]	@ (801d610 <__assert_func+0x38>)
 801d5fe:	461c      	mov	r4, r3
 801d600:	e7f3      	b.n	801d5ea <__assert_func+0x12>
 801d602:	bf00      	nop
 801d604:	2000332c 	.word	0x2000332c
 801d608:	08020907 	.word	0x08020907
 801d60c:	08020914 	.word	0x08020914
 801d610:	08020942 	.word	0x08020942

0801d614 <__env_lock>:
 801d614:	4801      	ldr	r0, [pc, #4]	@ (801d61c <__env_lock+0x8>)
 801d616:	f7ff bfc6 	b.w	801d5a6 <__retarget_lock_acquire_recursive>
 801d61a:	bf00      	nop
 801d61c:	20019d84 	.word	0x20019d84

0801d620 <__env_unlock>:
 801d620:	4801      	ldr	r0, [pc, #4]	@ (801d628 <__env_unlock+0x8>)
 801d622:	f7ff bfc1 	b.w	801d5a8 <__retarget_lock_release_recursive>
 801d626:	bf00      	nop
 801d628:	20019d84 	.word	0x20019d84

0801d62c <_free_r>:
 801d62c:	b538      	push	{r3, r4, r5, lr}
 801d62e:	4605      	mov	r5, r0
 801d630:	2900      	cmp	r1, #0
 801d632:	d041      	beq.n	801d6b8 <_free_r+0x8c>
 801d634:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801d638:	1f0c      	subs	r4, r1, #4
 801d63a:	2b00      	cmp	r3, #0
 801d63c:	bfb8      	it	lt
 801d63e:	18e4      	addlt	r4, r4, r3
 801d640:	f7ff fc0e 	bl	801ce60 <__malloc_lock>
 801d644:	4a1d      	ldr	r2, [pc, #116]	@ (801d6bc <_free_r+0x90>)
 801d646:	6813      	ldr	r3, [r2, #0]
 801d648:	b933      	cbnz	r3, 801d658 <_free_r+0x2c>
 801d64a:	6063      	str	r3, [r4, #4]
 801d64c:	6014      	str	r4, [r2, #0]
 801d64e:	4628      	mov	r0, r5
 801d650:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d654:	f7ff bc0a 	b.w	801ce6c <__malloc_unlock>
 801d658:	42a3      	cmp	r3, r4
 801d65a:	d908      	bls.n	801d66e <_free_r+0x42>
 801d65c:	6820      	ldr	r0, [r4, #0]
 801d65e:	1821      	adds	r1, r4, r0
 801d660:	428b      	cmp	r3, r1
 801d662:	bf01      	itttt	eq
 801d664:	6819      	ldreq	r1, [r3, #0]
 801d666:	685b      	ldreq	r3, [r3, #4]
 801d668:	1809      	addeq	r1, r1, r0
 801d66a:	6021      	streq	r1, [r4, #0]
 801d66c:	e7ed      	b.n	801d64a <_free_r+0x1e>
 801d66e:	461a      	mov	r2, r3
 801d670:	685b      	ldr	r3, [r3, #4]
 801d672:	b10b      	cbz	r3, 801d678 <_free_r+0x4c>
 801d674:	42a3      	cmp	r3, r4
 801d676:	d9fa      	bls.n	801d66e <_free_r+0x42>
 801d678:	6811      	ldr	r1, [r2, #0]
 801d67a:	1850      	adds	r0, r2, r1
 801d67c:	42a0      	cmp	r0, r4
 801d67e:	d10b      	bne.n	801d698 <_free_r+0x6c>
 801d680:	6820      	ldr	r0, [r4, #0]
 801d682:	4401      	add	r1, r0
 801d684:	1850      	adds	r0, r2, r1
 801d686:	4283      	cmp	r3, r0
 801d688:	6011      	str	r1, [r2, #0]
 801d68a:	d1e0      	bne.n	801d64e <_free_r+0x22>
 801d68c:	6818      	ldr	r0, [r3, #0]
 801d68e:	685b      	ldr	r3, [r3, #4]
 801d690:	6053      	str	r3, [r2, #4]
 801d692:	4408      	add	r0, r1
 801d694:	6010      	str	r0, [r2, #0]
 801d696:	e7da      	b.n	801d64e <_free_r+0x22>
 801d698:	d902      	bls.n	801d6a0 <_free_r+0x74>
 801d69a:	230c      	movs	r3, #12
 801d69c:	602b      	str	r3, [r5, #0]
 801d69e:	e7d6      	b.n	801d64e <_free_r+0x22>
 801d6a0:	6820      	ldr	r0, [r4, #0]
 801d6a2:	1821      	adds	r1, r4, r0
 801d6a4:	428b      	cmp	r3, r1
 801d6a6:	bf04      	itt	eq
 801d6a8:	6819      	ldreq	r1, [r3, #0]
 801d6aa:	685b      	ldreq	r3, [r3, #4]
 801d6ac:	6063      	str	r3, [r4, #4]
 801d6ae:	bf04      	itt	eq
 801d6b0:	1809      	addeq	r1, r1, r0
 801d6b2:	6021      	streq	r1, [r4, #0]
 801d6b4:	6054      	str	r4, [r2, #4]
 801d6b6:	e7ca      	b.n	801d64e <_free_r+0x22>
 801d6b8:	bd38      	pop	{r3, r4, r5, pc}
 801d6ba:	bf00      	nop
 801d6bc:	20019c44 	.word	0x20019c44

0801d6c0 <__ssputs_r>:
 801d6c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d6c4:	688e      	ldr	r6, [r1, #8]
 801d6c6:	461f      	mov	r7, r3
 801d6c8:	42be      	cmp	r6, r7
 801d6ca:	680b      	ldr	r3, [r1, #0]
 801d6cc:	4682      	mov	sl, r0
 801d6ce:	460c      	mov	r4, r1
 801d6d0:	4690      	mov	r8, r2
 801d6d2:	d82d      	bhi.n	801d730 <__ssputs_r+0x70>
 801d6d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801d6d8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801d6dc:	d026      	beq.n	801d72c <__ssputs_r+0x6c>
 801d6de:	6965      	ldr	r5, [r4, #20]
 801d6e0:	6909      	ldr	r1, [r1, #16]
 801d6e2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d6e6:	eba3 0901 	sub.w	r9, r3, r1
 801d6ea:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801d6ee:	1c7b      	adds	r3, r7, #1
 801d6f0:	444b      	add	r3, r9
 801d6f2:	106d      	asrs	r5, r5, #1
 801d6f4:	429d      	cmp	r5, r3
 801d6f6:	bf38      	it	cc
 801d6f8:	461d      	movcc	r5, r3
 801d6fa:	0553      	lsls	r3, r2, #21
 801d6fc:	d527      	bpl.n	801d74e <__ssputs_r+0x8e>
 801d6fe:	4629      	mov	r1, r5
 801d700:	f7ff faf8 	bl	801ccf4 <_malloc_r>
 801d704:	4606      	mov	r6, r0
 801d706:	b360      	cbz	r0, 801d762 <__ssputs_r+0xa2>
 801d708:	6921      	ldr	r1, [r4, #16]
 801d70a:	464a      	mov	r2, r9
 801d70c:	f7ff ff55 	bl	801d5ba <memcpy>
 801d710:	89a3      	ldrh	r3, [r4, #12]
 801d712:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801d716:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801d71a:	81a3      	strh	r3, [r4, #12]
 801d71c:	6126      	str	r6, [r4, #16]
 801d71e:	6165      	str	r5, [r4, #20]
 801d720:	444e      	add	r6, r9
 801d722:	eba5 0509 	sub.w	r5, r5, r9
 801d726:	6026      	str	r6, [r4, #0]
 801d728:	60a5      	str	r5, [r4, #8]
 801d72a:	463e      	mov	r6, r7
 801d72c:	42be      	cmp	r6, r7
 801d72e:	d900      	bls.n	801d732 <__ssputs_r+0x72>
 801d730:	463e      	mov	r6, r7
 801d732:	6820      	ldr	r0, [r4, #0]
 801d734:	4632      	mov	r2, r6
 801d736:	4641      	mov	r1, r8
 801d738:	f7ff fe90 	bl	801d45c <memmove>
 801d73c:	68a3      	ldr	r3, [r4, #8]
 801d73e:	1b9b      	subs	r3, r3, r6
 801d740:	60a3      	str	r3, [r4, #8]
 801d742:	6823      	ldr	r3, [r4, #0]
 801d744:	4433      	add	r3, r6
 801d746:	6023      	str	r3, [r4, #0]
 801d748:	2000      	movs	r0, #0
 801d74a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d74e:	462a      	mov	r2, r5
 801d750:	f7ff fce6 	bl	801d120 <_realloc_r>
 801d754:	4606      	mov	r6, r0
 801d756:	2800      	cmp	r0, #0
 801d758:	d1e0      	bne.n	801d71c <__ssputs_r+0x5c>
 801d75a:	6921      	ldr	r1, [r4, #16]
 801d75c:	4650      	mov	r0, sl
 801d75e:	f7ff ff65 	bl	801d62c <_free_r>
 801d762:	230c      	movs	r3, #12
 801d764:	f8ca 3000 	str.w	r3, [sl]
 801d768:	89a3      	ldrh	r3, [r4, #12]
 801d76a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d76e:	81a3      	strh	r3, [r4, #12]
 801d770:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801d774:	e7e9      	b.n	801d74a <__ssputs_r+0x8a>
	...

0801d778 <_svfiprintf_r>:
 801d778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d77c:	4698      	mov	r8, r3
 801d77e:	898b      	ldrh	r3, [r1, #12]
 801d780:	061b      	lsls	r3, r3, #24
 801d782:	b09d      	sub	sp, #116	@ 0x74
 801d784:	4607      	mov	r7, r0
 801d786:	460d      	mov	r5, r1
 801d788:	4614      	mov	r4, r2
 801d78a:	d510      	bpl.n	801d7ae <_svfiprintf_r+0x36>
 801d78c:	690b      	ldr	r3, [r1, #16]
 801d78e:	b973      	cbnz	r3, 801d7ae <_svfiprintf_r+0x36>
 801d790:	2140      	movs	r1, #64	@ 0x40
 801d792:	f7ff faaf 	bl	801ccf4 <_malloc_r>
 801d796:	6028      	str	r0, [r5, #0]
 801d798:	6128      	str	r0, [r5, #16]
 801d79a:	b930      	cbnz	r0, 801d7aa <_svfiprintf_r+0x32>
 801d79c:	230c      	movs	r3, #12
 801d79e:	603b      	str	r3, [r7, #0]
 801d7a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801d7a4:	b01d      	add	sp, #116	@ 0x74
 801d7a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d7aa:	2340      	movs	r3, #64	@ 0x40
 801d7ac:	616b      	str	r3, [r5, #20]
 801d7ae:	2300      	movs	r3, #0
 801d7b0:	9309      	str	r3, [sp, #36]	@ 0x24
 801d7b2:	2320      	movs	r3, #32
 801d7b4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801d7b8:	f8cd 800c 	str.w	r8, [sp, #12]
 801d7bc:	2330      	movs	r3, #48	@ 0x30
 801d7be:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801d95c <_svfiprintf_r+0x1e4>
 801d7c2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801d7c6:	f04f 0901 	mov.w	r9, #1
 801d7ca:	4623      	mov	r3, r4
 801d7cc:	469a      	mov	sl, r3
 801d7ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d7d2:	b10a      	cbz	r2, 801d7d8 <_svfiprintf_r+0x60>
 801d7d4:	2a25      	cmp	r2, #37	@ 0x25
 801d7d6:	d1f9      	bne.n	801d7cc <_svfiprintf_r+0x54>
 801d7d8:	ebba 0b04 	subs.w	fp, sl, r4
 801d7dc:	d00b      	beq.n	801d7f6 <_svfiprintf_r+0x7e>
 801d7de:	465b      	mov	r3, fp
 801d7e0:	4622      	mov	r2, r4
 801d7e2:	4629      	mov	r1, r5
 801d7e4:	4638      	mov	r0, r7
 801d7e6:	f7ff ff6b 	bl	801d6c0 <__ssputs_r>
 801d7ea:	3001      	adds	r0, #1
 801d7ec:	f000 80a7 	beq.w	801d93e <_svfiprintf_r+0x1c6>
 801d7f0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d7f2:	445a      	add	r2, fp
 801d7f4:	9209      	str	r2, [sp, #36]	@ 0x24
 801d7f6:	f89a 3000 	ldrb.w	r3, [sl]
 801d7fa:	2b00      	cmp	r3, #0
 801d7fc:	f000 809f 	beq.w	801d93e <_svfiprintf_r+0x1c6>
 801d800:	2300      	movs	r3, #0
 801d802:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801d806:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d80a:	f10a 0a01 	add.w	sl, sl, #1
 801d80e:	9304      	str	r3, [sp, #16]
 801d810:	9307      	str	r3, [sp, #28]
 801d812:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801d816:	931a      	str	r3, [sp, #104]	@ 0x68
 801d818:	4654      	mov	r4, sl
 801d81a:	2205      	movs	r2, #5
 801d81c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d820:	484e      	ldr	r0, [pc, #312]	@ (801d95c <_svfiprintf_r+0x1e4>)
 801d822:	f7e2 fcfd 	bl	8000220 <memchr>
 801d826:	9a04      	ldr	r2, [sp, #16]
 801d828:	b9d8      	cbnz	r0, 801d862 <_svfiprintf_r+0xea>
 801d82a:	06d0      	lsls	r0, r2, #27
 801d82c:	bf44      	itt	mi
 801d82e:	2320      	movmi	r3, #32
 801d830:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801d834:	0711      	lsls	r1, r2, #28
 801d836:	bf44      	itt	mi
 801d838:	232b      	movmi	r3, #43	@ 0x2b
 801d83a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801d83e:	f89a 3000 	ldrb.w	r3, [sl]
 801d842:	2b2a      	cmp	r3, #42	@ 0x2a
 801d844:	d015      	beq.n	801d872 <_svfiprintf_r+0xfa>
 801d846:	9a07      	ldr	r2, [sp, #28]
 801d848:	4654      	mov	r4, sl
 801d84a:	2000      	movs	r0, #0
 801d84c:	f04f 0c0a 	mov.w	ip, #10
 801d850:	4621      	mov	r1, r4
 801d852:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d856:	3b30      	subs	r3, #48	@ 0x30
 801d858:	2b09      	cmp	r3, #9
 801d85a:	d94b      	bls.n	801d8f4 <_svfiprintf_r+0x17c>
 801d85c:	b1b0      	cbz	r0, 801d88c <_svfiprintf_r+0x114>
 801d85e:	9207      	str	r2, [sp, #28]
 801d860:	e014      	b.n	801d88c <_svfiprintf_r+0x114>
 801d862:	eba0 0308 	sub.w	r3, r0, r8
 801d866:	fa09 f303 	lsl.w	r3, r9, r3
 801d86a:	4313      	orrs	r3, r2
 801d86c:	9304      	str	r3, [sp, #16]
 801d86e:	46a2      	mov	sl, r4
 801d870:	e7d2      	b.n	801d818 <_svfiprintf_r+0xa0>
 801d872:	9b03      	ldr	r3, [sp, #12]
 801d874:	1d19      	adds	r1, r3, #4
 801d876:	681b      	ldr	r3, [r3, #0]
 801d878:	9103      	str	r1, [sp, #12]
 801d87a:	2b00      	cmp	r3, #0
 801d87c:	bfbb      	ittet	lt
 801d87e:	425b      	neglt	r3, r3
 801d880:	f042 0202 	orrlt.w	r2, r2, #2
 801d884:	9307      	strge	r3, [sp, #28]
 801d886:	9307      	strlt	r3, [sp, #28]
 801d888:	bfb8      	it	lt
 801d88a:	9204      	strlt	r2, [sp, #16]
 801d88c:	7823      	ldrb	r3, [r4, #0]
 801d88e:	2b2e      	cmp	r3, #46	@ 0x2e
 801d890:	d10a      	bne.n	801d8a8 <_svfiprintf_r+0x130>
 801d892:	7863      	ldrb	r3, [r4, #1]
 801d894:	2b2a      	cmp	r3, #42	@ 0x2a
 801d896:	d132      	bne.n	801d8fe <_svfiprintf_r+0x186>
 801d898:	9b03      	ldr	r3, [sp, #12]
 801d89a:	1d1a      	adds	r2, r3, #4
 801d89c:	681b      	ldr	r3, [r3, #0]
 801d89e:	9203      	str	r2, [sp, #12]
 801d8a0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801d8a4:	3402      	adds	r4, #2
 801d8a6:	9305      	str	r3, [sp, #20]
 801d8a8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801d96c <_svfiprintf_r+0x1f4>
 801d8ac:	7821      	ldrb	r1, [r4, #0]
 801d8ae:	2203      	movs	r2, #3
 801d8b0:	4650      	mov	r0, sl
 801d8b2:	f7e2 fcb5 	bl	8000220 <memchr>
 801d8b6:	b138      	cbz	r0, 801d8c8 <_svfiprintf_r+0x150>
 801d8b8:	9b04      	ldr	r3, [sp, #16]
 801d8ba:	eba0 000a 	sub.w	r0, r0, sl
 801d8be:	2240      	movs	r2, #64	@ 0x40
 801d8c0:	4082      	lsls	r2, r0
 801d8c2:	4313      	orrs	r3, r2
 801d8c4:	3401      	adds	r4, #1
 801d8c6:	9304      	str	r3, [sp, #16]
 801d8c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d8cc:	4824      	ldr	r0, [pc, #144]	@ (801d960 <_svfiprintf_r+0x1e8>)
 801d8ce:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801d8d2:	2206      	movs	r2, #6
 801d8d4:	f7e2 fca4 	bl	8000220 <memchr>
 801d8d8:	2800      	cmp	r0, #0
 801d8da:	d036      	beq.n	801d94a <_svfiprintf_r+0x1d2>
 801d8dc:	4b21      	ldr	r3, [pc, #132]	@ (801d964 <_svfiprintf_r+0x1ec>)
 801d8de:	bb1b      	cbnz	r3, 801d928 <_svfiprintf_r+0x1b0>
 801d8e0:	9b03      	ldr	r3, [sp, #12]
 801d8e2:	3307      	adds	r3, #7
 801d8e4:	f023 0307 	bic.w	r3, r3, #7
 801d8e8:	3308      	adds	r3, #8
 801d8ea:	9303      	str	r3, [sp, #12]
 801d8ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d8ee:	4433      	add	r3, r6
 801d8f0:	9309      	str	r3, [sp, #36]	@ 0x24
 801d8f2:	e76a      	b.n	801d7ca <_svfiprintf_r+0x52>
 801d8f4:	fb0c 3202 	mla	r2, ip, r2, r3
 801d8f8:	460c      	mov	r4, r1
 801d8fa:	2001      	movs	r0, #1
 801d8fc:	e7a8      	b.n	801d850 <_svfiprintf_r+0xd8>
 801d8fe:	2300      	movs	r3, #0
 801d900:	3401      	adds	r4, #1
 801d902:	9305      	str	r3, [sp, #20]
 801d904:	4619      	mov	r1, r3
 801d906:	f04f 0c0a 	mov.w	ip, #10
 801d90a:	4620      	mov	r0, r4
 801d90c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d910:	3a30      	subs	r2, #48	@ 0x30
 801d912:	2a09      	cmp	r2, #9
 801d914:	d903      	bls.n	801d91e <_svfiprintf_r+0x1a6>
 801d916:	2b00      	cmp	r3, #0
 801d918:	d0c6      	beq.n	801d8a8 <_svfiprintf_r+0x130>
 801d91a:	9105      	str	r1, [sp, #20]
 801d91c:	e7c4      	b.n	801d8a8 <_svfiprintf_r+0x130>
 801d91e:	fb0c 2101 	mla	r1, ip, r1, r2
 801d922:	4604      	mov	r4, r0
 801d924:	2301      	movs	r3, #1
 801d926:	e7f0      	b.n	801d90a <_svfiprintf_r+0x192>
 801d928:	ab03      	add	r3, sp, #12
 801d92a:	9300      	str	r3, [sp, #0]
 801d92c:	462a      	mov	r2, r5
 801d92e:	4b0e      	ldr	r3, [pc, #56]	@ (801d968 <_svfiprintf_r+0x1f0>)
 801d930:	a904      	add	r1, sp, #16
 801d932:	4638      	mov	r0, r7
 801d934:	f3af 8000 	nop.w
 801d938:	1c42      	adds	r2, r0, #1
 801d93a:	4606      	mov	r6, r0
 801d93c:	d1d6      	bne.n	801d8ec <_svfiprintf_r+0x174>
 801d93e:	89ab      	ldrh	r3, [r5, #12]
 801d940:	065b      	lsls	r3, r3, #25
 801d942:	f53f af2d 	bmi.w	801d7a0 <_svfiprintf_r+0x28>
 801d946:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801d948:	e72c      	b.n	801d7a4 <_svfiprintf_r+0x2c>
 801d94a:	ab03      	add	r3, sp, #12
 801d94c:	9300      	str	r3, [sp, #0]
 801d94e:	462a      	mov	r2, r5
 801d950:	4b05      	ldr	r3, [pc, #20]	@ (801d968 <_svfiprintf_r+0x1f0>)
 801d952:	a904      	add	r1, sp, #16
 801d954:	4638      	mov	r0, r7
 801d956:	f000 f9bb 	bl	801dcd0 <_printf_i>
 801d95a:	e7ed      	b.n	801d938 <_svfiprintf_r+0x1c0>
 801d95c:	08020943 	.word	0x08020943
 801d960:	0802094d 	.word	0x0802094d
 801d964:	00000000 	.word	0x00000000
 801d968:	0801d6c1 	.word	0x0801d6c1
 801d96c:	08020949 	.word	0x08020949

0801d970 <__sfputc_r>:
 801d970:	6893      	ldr	r3, [r2, #8]
 801d972:	3b01      	subs	r3, #1
 801d974:	2b00      	cmp	r3, #0
 801d976:	b410      	push	{r4}
 801d978:	6093      	str	r3, [r2, #8]
 801d97a:	da08      	bge.n	801d98e <__sfputc_r+0x1e>
 801d97c:	6994      	ldr	r4, [r2, #24]
 801d97e:	42a3      	cmp	r3, r4
 801d980:	db01      	blt.n	801d986 <__sfputc_r+0x16>
 801d982:	290a      	cmp	r1, #10
 801d984:	d103      	bne.n	801d98e <__sfputc_r+0x1e>
 801d986:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d98a:	f000 bbc9 	b.w	801e120 <__swbuf_r>
 801d98e:	6813      	ldr	r3, [r2, #0]
 801d990:	1c58      	adds	r0, r3, #1
 801d992:	6010      	str	r0, [r2, #0]
 801d994:	7019      	strb	r1, [r3, #0]
 801d996:	4608      	mov	r0, r1
 801d998:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d99c:	4770      	bx	lr

0801d99e <__sfputs_r>:
 801d99e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d9a0:	4606      	mov	r6, r0
 801d9a2:	460f      	mov	r7, r1
 801d9a4:	4614      	mov	r4, r2
 801d9a6:	18d5      	adds	r5, r2, r3
 801d9a8:	42ac      	cmp	r4, r5
 801d9aa:	d101      	bne.n	801d9b0 <__sfputs_r+0x12>
 801d9ac:	2000      	movs	r0, #0
 801d9ae:	e007      	b.n	801d9c0 <__sfputs_r+0x22>
 801d9b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d9b4:	463a      	mov	r2, r7
 801d9b6:	4630      	mov	r0, r6
 801d9b8:	f7ff ffda 	bl	801d970 <__sfputc_r>
 801d9bc:	1c43      	adds	r3, r0, #1
 801d9be:	d1f3      	bne.n	801d9a8 <__sfputs_r+0xa>
 801d9c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801d9c4 <_vfiprintf_r>:
 801d9c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d9c8:	460d      	mov	r5, r1
 801d9ca:	b09d      	sub	sp, #116	@ 0x74
 801d9cc:	4614      	mov	r4, r2
 801d9ce:	4698      	mov	r8, r3
 801d9d0:	4606      	mov	r6, r0
 801d9d2:	b118      	cbz	r0, 801d9dc <_vfiprintf_r+0x18>
 801d9d4:	6a03      	ldr	r3, [r0, #32]
 801d9d6:	b90b      	cbnz	r3, 801d9dc <_vfiprintf_r+0x18>
 801d9d8:	f7ff fb4e 	bl	801d078 <__sinit>
 801d9dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801d9de:	07d9      	lsls	r1, r3, #31
 801d9e0:	d405      	bmi.n	801d9ee <_vfiprintf_r+0x2a>
 801d9e2:	89ab      	ldrh	r3, [r5, #12]
 801d9e4:	059a      	lsls	r2, r3, #22
 801d9e6:	d402      	bmi.n	801d9ee <_vfiprintf_r+0x2a>
 801d9e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801d9ea:	f7ff fddc 	bl	801d5a6 <__retarget_lock_acquire_recursive>
 801d9ee:	89ab      	ldrh	r3, [r5, #12]
 801d9f0:	071b      	lsls	r3, r3, #28
 801d9f2:	d501      	bpl.n	801d9f8 <_vfiprintf_r+0x34>
 801d9f4:	692b      	ldr	r3, [r5, #16]
 801d9f6:	b99b      	cbnz	r3, 801da20 <_vfiprintf_r+0x5c>
 801d9f8:	4629      	mov	r1, r5
 801d9fa:	4630      	mov	r0, r6
 801d9fc:	f000 fbce 	bl	801e19c <__swsetup_r>
 801da00:	b170      	cbz	r0, 801da20 <_vfiprintf_r+0x5c>
 801da02:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801da04:	07dc      	lsls	r4, r3, #31
 801da06:	d504      	bpl.n	801da12 <_vfiprintf_r+0x4e>
 801da08:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801da0c:	b01d      	add	sp, #116	@ 0x74
 801da0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801da12:	89ab      	ldrh	r3, [r5, #12]
 801da14:	0598      	lsls	r0, r3, #22
 801da16:	d4f7      	bmi.n	801da08 <_vfiprintf_r+0x44>
 801da18:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801da1a:	f7ff fdc5 	bl	801d5a8 <__retarget_lock_release_recursive>
 801da1e:	e7f3      	b.n	801da08 <_vfiprintf_r+0x44>
 801da20:	2300      	movs	r3, #0
 801da22:	9309      	str	r3, [sp, #36]	@ 0x24
 801da24:	2320      	movs	r3, #32
 801da26:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801da2a:	f8cd 800c 	str.w	r8, [sp, #12]
 801da2e:	2330      	movs	r3, #48	@ 0x30
 801da30:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801dbe0 <_vfiprintf_r+0x21c>
 801da34:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801da38:	f04f 0901 	mov.w	r9, #1
 801da3c:	4623      	mov	r3, r4
 801da3e:	469a      	mov	sl, r3
 801da40:	f813 2b01 	ldrb.w	r2, [r3], #1
 801da44:	b10a      	cbz	r2, 801da4a <_vfiprintf_r+0x86>
 801da46:	2a25      	cmp	r2, #37	@ 0x25
 801da48:	d1f9      	bne.n	801da3e <_vfiprintf_r+0x7a>
 801da4a:	ebba 0b04 	subs.w	fp, sl, r4
 801da4e:	d00b      	beq.n	801da68 <_vfiprintf_r+0xa4>
 801da50:	465b      	mov	r3, fp
 801da52:	4622      	mov	r2, r4
 801da54:	4629      	mov	r1, r5
 801da56:	4630      	mov	r0, r6
 801da58:	f7ff ffa1 	bl	801d99e <__sfputs_r>
 801da5c:	3001      	adds	r0, #1
 801da5e:	f000 80a7 	beq.w	801dbb0 <_vfiprintf_r+0x1ec>
 801da62:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801da64:	445a      	add	r2, fp
 801da66:	9209      	str	r2, [sp, #36]	@ 0x24
 801da68:	f89a 3000 	ldrb.w	r3, [sl]
 801da6c:	2b00      	cmp	r3, #0
 801da6e:	f000 809f 	beq.w	801dbb0 <_vfiprintf_r+0x1ec>
 801da72:	2300      	movs	r3, #0
 801da74:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801da78:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801da7c:	f10a 0a01 	add.w	sl, sl, #1
 801da80:	9304      	str	r3, [sp, #16]
 801da82:	9307      	str	r3, [sp, #28]
 801da84:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801da88:	931a      	str	r3, [sp, #104]	@ 0x68
 801da8a:	4654      	mov	r4, sl
 801da8c:	2205      	movs	r2, #5
 801da8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801da92:	4853      	ldr	r0, [pc, #332]	@ (801dbe0 <_vfiprintf_r+0x21c>)
 801da94:	f7e2 fbc4 	bl	8000220 <memchr>
 801da98:	9a04      	ldr	r2, [sp, #16]
 801da9a:	b9d8      	cbnz	r0, 801dad4 <_vfiprintf_r+0x110>
 801da9c:	06d1      	lsls	r1, r2, #27
 801da9e:	bf44      	itt	mi
 801daa0:	2320      	movmi	r3, #32
 801daa2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801daa6:	0713      	lsls	r3, r2, #28
 801daa8:	bf44      	itt	mi
 801daaa:	232b      	movmi	r3, #43	@ 0x2b
 801daac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801dab0:	f89a 3000 	ldrb.w	r3, [sl]
 801dab4:	2b2a      	cmp	r3, #42	@ 0x2a
 801dab6:	d015      	beq.n	801dae4 <_vfiprintf_r+0x120>
 801dab8:	9a07      	ldr	r2, [sp, #28]
 801daba:	4654      	mov	r4, sl
 801dabc:	2000      	movs	r0, #0
 801dabe:	f04f 0c0a 	mov.w	ip, #10
 801dac2:	4621      	mov	r1, r4
 801dac4:	f811 3b01 	ldrb.w	r3, [r1], #1
 801dac8:	3b30      	subs	r3, #48	@ 0x30
 801daca:	2b09      	cmp	r3, #9
 801dacc:	d94b      	bls.n	801db66 <_vfiprintf_r+0x1a2>
 801dace:	b1b0      	cbz	r0, 801dafe <_vfiprintf_r+0x13a>
 801dad0:	9207      	str	r2, [sp, #28]
 801dad2:	e014      	b.n	801dafe <_vfiprintf_r+0x13a>
 801dad4:	eba0 0308 	sub.w	r3, r0, r8
 801dad8:	fa09 f303 	lsl.w	r3, r9, r3
 801dadc:	4313      	orrs	r3, r2
 801dade:	9304      	str	r3, [sp, #16]
 801dae0:	46a2      	mov	sl, r4
 801dae2:	e7d2      	b.n	801da8a <_vfiprintf_r+0xc6>
 801dae4:	9b03      	ldr	r3, [sp, #12]
 801dae6:	1d19      	adds	r1, r3, #4
 801dae8:	681b      	ldr	r3, [r3, #0]
 801daea:	9103      	str	r1, [sp, #12]
 801daec:	2b00      	cmp	r3, #0
 801daee:	bfbb      	ittet	lt
 801daf0:	425b      	neglt	r3, r3
 801daf2:	f042 0202 	orrlt.w	r2, r2, #2
 801daf6:	9307      	strge	r3, [sp, #28]
 801daf8:	9307      	strlt	r3, [sp, #28]
 801dafa:	bfb8      	it	lt
 801dafc:	9204      	strlt	r2, [sp, #16]
 801dafe:	7823      	ldrb	r3, [r4, #0]
 801db00:	2b2e      	cmp	r3, #46	@ 0x2e
 801db02:	d10a      	bne.n	801db1a <_vfiprintf_r+0x156>
 801db04:	7863      	ldrb	r3, [r4, #1]
 801db06:	2b2a      	cmp	r3, #42	@ 0x2a
 801db08:	d132      	bne.n	801db70 <_vfiprintf_r+0x1ac>
 801db0a:	9b03      	ldr	r3, [sp, #12]
 801db0c:	1d1a      	adds	r2, r3, #4
 801db0e:	681b      	ldr	r3, [r3, #0]
 801db10:	9203      	str	r2, [sp, #12]
 801db12:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801db16:	3402      	adds	r4, #2
 801db18:	9305      	str	r3, [sp, #20]
 801db1a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801dbf0 <_vfiprintf_r+0x22c>
 801db1e:	7821      	ldrb	r1, [r4, #0]
 801db20:	2203      	movs	r2, #3
 801db22:	4650      	mov	r0, sl
 801db24:	f7e2 fb7c 	bl	8000220 <memchr>
 801db28:	b138      	cbz	r0, 801db3a <_vfiprintf_r+0x176>
 801db2a:	9b04      	ldr	r3, [sp, #16]
 801db2c:	eba0 000a 	sub.w	r0, r0, sl
 801db30:	2240      	movs	r2, #64	@ 0x40
 801db32:	4082      	lsls	r2, r0
 801db34:	4313      	orrs	r3, r2
 801db36:	3401      	adds	r4, #1
 801db38:	9304      	str	r3, [sp, #16]
 801db3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801db3e:	4829      	ldr	r0, [pc, #164]	@ (801dbe4 <_vfiprintf_r+0x220>)
 801db40:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801db44:	2206      	movs	r2, #6
 801db46:	f7e2 fb6b 	bl	8000220 <memchr>
 801db4a:	2800      	cmp	r0, #0
 801db4c:	d03f      	beq.n	801dbce <_vfiprintf_r+0x20a>
 801db4e:	4b26      	ldr	r3, [pc, #152]	@ (801dbe8 <_vfiprintf_r+0x224>)
 801db50:	bb1b      	cbnz	r3, 801db9a <_vfiprintf_r+0x1d6>
 801db52:	9b03      	ldr	r3, [sp, #12]
 801db54:	3307      	adds	r3, #7
 801db56:	f023 0307 	bic.w	r3, r3, #7
 801db5a:	3308      	adds	r3, #8
 801db5c:	9303      	str	r3, [sp, #12]
 801db5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801db60:	443b      	add	r3, r7
 801db62:	9309      	str	r3, [sp, #36]	@ 0x24
 801db64:	e76a      	b.n	801da3c <_vfiprintf_r+0x78>
 801db66:	fb0c 3202 	mla	r2, ip, r2, r3
 801db6a:	460c      	mov	r4, r1
 801db6c:	2001      	movs	r0, #1
 801db6e:	e7a8      	b.n	801dac2 <_vfiprintf_r+0xfe>
 801db70:	2300      	movs	r3, #0
 801db72:	3401      	adds	r4, #1
 801db74:	9305      	str	r3, [sp, #20]
 801db76:	4619      	mov	r1, r3
 801db78:	f04f 0c0a 	mov.w	ip, #10
 801db7c:	4620      	mov	r0, r4
 801db7e:	f810 2b01 	ldrb.w	r2, [r0], #1
 801db82:	3a30      	subs	r2, #48	@ 0x30
 801db84:	2a09      	cmp	r2, #9
 801db86:	d903      	bls.n	801db90 <_vfiprintf_r+0x1cc>
 801db88:	2b00      	cmp	r3, #0
 801db8a:	d0c6      	beq.n	801db1a <_vfiprintf_r+0x156>
 801db8c:	9105      	str	r1, [sp, #20]
 801db8e:	e7c4      	b.n	801db1a <_vfiprintf_r+0x156>
 801db90:	fb0c 2101 	mla	r1, ip, r1, r2
 801db94:	4604      	mov	r4, r0
 801db96:	2301      	movs	r3, #1
 801db98:	e7f0      	b.n	801db7c <_vfiprintf_r+0x1b8>
 801db9a:	ab03      	add	r3, sp, #12
 801db9c:	9300      	str	r3, [sp, #0]
 801db9e:	462a      	mov	r2, r5
 801dba0:	4b12      	ldr	r3, [pc, #72]	@ (801dbec <_vfiprintf_r+0x228>)
 801dba2:	a904      	add	r1, sp, #16
 801dba4:	4630      	mov	r0, r6
 801dba6:	f3af 8000 	nop.w
 801dbaa:	4607      	mov	r7, r0
 801dbac:	1c78      	adds	r0, r7, #1
 801dbae:	d1d6      	bne.n	801db5e <_vfiprintf_r+0x19a>
 801dbb0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801dbb2:	07d9      	lsls	r1, r3, #31
 801dbb4:	d405      	bmi.n	801dbc2 <_vfiprintf_r+0x1fe>
 801dbb6:	89ab      	ldrh	r3, [r5, #12]
 801dbb8:	059a      	lsls	r2, r3, #22
 801dbba:	d402      	bmi.n	801dbc2 <_vfiprintf_r+0x1fe>
 801dbbc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801dbbe:	f7ff fcf3 	bl	801d5a8 <__retarget_lock_release_recursive>
 801dbc2:	89ab      	ldrh	r3, [r5, #12]
 801dbc4:	065b      	lsls	r3, r3, #25
 801dbc6:	f53f af1f 	bmi.w	801da08 <_vfiprintf_r+0x44>
 801dbca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801dbcc:	e71e      	b.n	801da0c <_vfiprintf_r+0x48>
 801dbce:	ab03      	add	r3, sp, #12
 801dbd0:	9300      	str	r3, [sp, #0]
 801dbd2:	462a      	mov	r2, r5
 801dbd4:	4b05      	ldr	r3, [pc, #20]	@ (801dbec <_vfiprintf_r+0x228>)
 801dbd6:	a904      	add	r1, sp, #16
 801dbd8:	4630      	mov	r0, r6
 801dbda:	f000 f879 	bl	801dcd0 <_printf_i>
 801dbde:	e7e4      	b.n	801dbaa <_vfiprintf_r+0x1e6>
 801dbe0:	08020943 	.word	0x08020943
 801dbe4:	0802094d 	.word	0x0802094d
 801dbe8:	00000000 	.word	0x00000000
 801dbec:	0801d99f 	.word	0x0801d99f
 801dbf0:	08020949 	.word	0x08020949

0801dbf4 <_printf_common>:
 801dbf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801dbf8:	4616      	mov	r6, r2
 801dbfa:	4698      	mov	r8, r3
 801dbfc:	688a      	ldr	r2, [r1, #8]
 801dbfe:	690b      	ldr	r3, [r1, #16]
 801dc00:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801dc04:	4293      	cmp	r3, r2
 801dc06:	bfb8      	it	lt
 801dc08:	4613      	movlt	r3, r2
 801dc0a:	6033      	str	r3, [r6, #0]
 801dc0c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801dc10:	4607      	mov	r7, r0
 801dc12:	460c      	mov	r4, r1
 801dc14:	b10a      	cbz	r2, 801dc1a <_printf_common+0x26>
 801dc16:	3301      	adds	r3, #1
 801dc18:	6033      	str	r3, [r6, #0]
 801dc1a:	6823      	ldr	r3, [r4, #0]
 801dc1c:	0699      	lsls	r1, r3, #26
 801dc1e:	bf42      	ittt	mi
 801dc20:	6833      	ldrmi	r3, [r6, #0]
 801dc22:	3302      	addmi	r3, #2
 801dc24:	6033      	strmi	r3, [r6, #0]
 801dc26:	6825      	ldr	r5, [r4, #0]
 801dc28:	f015 0506 	ands.w	r5, r5, #6
 801dc2c:	d106      	bne.n	801dc3c <_printf_common+0x48>
 801dc2e:	f104 0a19 	add.w	sl, r4, #25
 801dc32:	68e3      	ldr	r3, [r4, #12]
 801dc34:	6832      	ldr	r2, [r6, #0]
 801dc36:	1a9b      	subs	r3, r3, r2
 801dc38:	42ab      	cmp	r3, r5
 801dc3a:	dc26      	bgt.n	801dc8a <_printf_common+0x96>
 801dc3c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801dc40:	6822      	ldr	r2, [r4, #0]
 801dc42:	3b00      	subs	r3, #0
 801dc44:	bf18      	it	ne
 801dc46:	2301      	movne	r3, #1
 801dc48:	0692      	lsls	r2, r2, #26
 801dc4a:	d42b      	bmi.n	801dca4 <_printf_common+0xb0>
 801dc4c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801dc50:	4641      	mov	r1, r8
 801dc52:	4638      	mov	r0, r7
 801dc54:	47c8      	blx	r9
 801dc56:	3001      	adds	r0, #1
 801dc58:	d01e      	beq.n	801dc98 <_printf_common+0xa4>
 801dc5a:	6823      	ldr	r3, [r4, #0]
 801dc5c:	6922      	ldr	r2, [r4, #16]
 801dc5e:	f003 0306 	and.w	r3, r3, #6
 801dc62:	2b04      	cmp	r3, #4
 801dc64:	bf02      	ittt	eq
 801dc66:	68e5      	ldreq	r5, [r4, #12]
 801dc68:	6833      	ldreq	r3, [r6, #0]
 801dc6a:	1aed      	subeq	r5, r5, r3
 801dc6c:	68a3      	ldr	r3, [r4, #8]
 801dc6e:	bf0c      	ite	eq
 801dc70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801dc74:	2500      	movne	r5, #0
 801dc76:	4293      	cmp	r3, r2
 801dc78:	bfc4      	itt	gt
 801dc7a:	1a9b      	subgt	r3, r3, r2
 801dc7c:	18ed      	addgt	r5, r5, r3
 801dc7e:	2600      	movs	r6, #0
 801dc80:	341a      	adds	r4, #26
 801dc82:	42b5      	cmp	r5, r6
 801dc84:	d11a      	bne.n	801dcbc <_printf_common+0xc8>
 801dc86:	2000      	movs	r0, #0
 801dc88:	e008      	b.n	801dc9c <_printf_common+0xa8>
 801dc8a:	2301      	movs	r3, #1
 801dc8c:	4652      	mov	r2, sl
 801dc8e:	4641      	mov	r1, r8
 801dc90:	4638      	mov	r0, r7
 801dc92:	47c8      	blx	r9
 801dc94:	3001      	adds	r0, #1
 801dc96:	d103      	bne.n	801dca0 <_printf_common+0xac>
 801dc98:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801dc9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801dca0:	3501      	adds	r5, #1
 801dca2:	e7c6      	b.n	801dc32 <_printf_common+0x3e>
 801dca4:	18e1      	adds	r1, r4, r3
 801dca6:	1c5a      	adds	r2, r3, #1
 801dca8:	2030      	movs	r0, #48	@ 0x30
 801dcaa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801dcae:	4422      	add	r2, r4
 801dcb0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801dcb4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801dcb8:	3302      	adds	r3, #2
 801dcba:	e7c7      	b.n	801dc4c <_printf_common+0x58>
 801dcbc:	2301      	movs	r3, #1
 801dcbe:	4622      	mov	r2, r4
 801dcc0:	4641      	mov	r1, r8
 801dcc2:	4638      	mov	r0, r7
 801dcc4:	47c8      	blx	r9
 801dcc6:	3001      	adds	r0, #1
 801dcc8:	d0e6      	beq.n	801dc98 <_printf_common+0xa4>
 801dcca:	3601      	adds	r6, #1
 801dccc:	e7d9      	b.n	801dc82 <_printf_common+0x8e>
	...

0801dcd0 <_printf_i>:
 801dcd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801dcd4:	7e0f      	ldrb	r7, [r1, #24]
 801dcd6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801dcd8:	2f78      	cmp	r7, #120	@ 0x78
 801dcda:	4691      	mov	r9, r2
 801dcdc:	4680      	mov	r8, r0
 801dcde:	460c      	mov	r4, r1
 801dce0:	469a      	mov	sl, r3
 801dce2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801dce6:	d807      	bhi.n	801dcf8 <_printf_i+0x28>
 801dce8:	2f62      	cmp	r7, #98	@ 0x62
 801dcea:	d80a      	bhi.n	801dd02 <_printf_i+0x32>
 801dcec:	2f00      	cmp	r7, #0
 801dcee:	f000 80d1 	beq.w	801de94 <_printf_i+0x1c4>
 801dcf2:	2f58      	cmp	r7, #88	@ 0x58
 801dcf4:	f000 80b8 	beq.w	801de68 <_printf_i+0x198>
 801dcf8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801dcfc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801dd00:	e03a      	b.n	801dd78 <_printf_i+0xa8>
 801dd02:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801dd06:	2b15      	cmp	r3, #21
 801dd08:	d8f6      	bhi.n	801dcf8 <_printf_i+0x28>
 801dd0a:	a101      	add	r1, pc, #4	@ (adr r1, 801dd10 <_printf_i+0x40>)
 801dd0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801dd10:	0801dd69 	.word	0x0801dd69
 801dd14:	0801dd7d 	.word	0x0801dd7d
 801dd18:	0801dcf9 	.word	0x0801dcf9
 801dd1c:	0801dcf9 	.word	0x0801dcf9
 801dd20:	0801dcf9 	.word	0x0801dcf9
 801dd24:	0801dcf9 	.word	0x0801dcf9
 801dd28:	0801dd7d 	.word	0x0801dd7d
 801dd2c:	0801dcf9 	.word	0x0801dcf9
 801dd30:	0801dcf9 	.word	0x0801dcf9
 801dd34:	0801dcf9 	.word	0x0801dcf9
 801dd38:	0801dcf9 	.word	0x0801dcf9
 801dd3c:	0801de7b 	.word	0x0801de7b
 801dd40:	0801dda7 	.word	0x0801dda7
 801dd44:	0801de35 	.word	0x0801de35
 801dd48:	0801dcf9 	.word	0x0801dcf9
 801dd4c:	0801dcf9 	.word	0x0801dcf9
 801dd50:	0801de9d 	.word	0x0801de9d
 801dd54:	0801dcf9 	.word	0x0801dcf9
 801dd58:	0801dda7 	.word	0x0801dda7
 801dd5c:	0801dcf9 	.word	0x0801dcf9
 801dd60:	0801dcf9 	.word	0x0801dcf9
 801dd64:	0801de3d 	.word	0x0801de3d
 801dd68:	6833      	ldr	r3, [r6, #0]
 801dd6a:	1d1a      	adds	r2, r3, #4
 801dd6c:	681b      	ldr	r3, [r3, #0]
 801dd6e:	6032      	str	r2, [r6, #0]
 801dd70:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801dd74:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801dd78:	2301      	movs	r3, #1
 801dd7a:	e09c      	b.n	801deb6 <_printf_i+0x1e6>
 801dd7c:	6833      	ldr	r3, [r6, #0]
 801dd7e:	6820      	ldr	r0, [r4, #0]
 801dd80:	1d19      	adds	r1, r3, #4
 801dd82:	6031      	str	r1, [r6, #0]
 801dd84:	0606      	lsls	r6, r0, #24
 801dd86:	d501      	bpl.n	801dd8c <_printf_i+0xbc>
 801dd88:	681d      	ldr	r5, [r3, #0]
 801dd8a:	e003      	b.n	801dd94 <_printf_i+0xc4>
 801dd8c:	0645      	lsls	r5, r0, #25
 801dd8e:	d5fb      	bpl.n	801dd88 <_printf_i+0xb8>
 801dd90:	f9b3 5000 	ldrsh.w	r5, [r3]
 801dd94:	2d00      	cmp	r5, #0
 801dd96:	da03      	bge.n	801dda0 <_printf_i+0xd0>
 801dd98:	232d      	movs	r3, #45	@ 0x2d
 801dd9a:	426d      	negs	r5, r5
 801dd9c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801dda0:	4858      	ldr	r0, [pc, #352]	@ (801df04 <_printf_i+0x234>)
 801dda2:	230a      	movs	r3, #10
 801dda4:	e011      	b.n	801ddca <_printf_i+0xfa>
 801dda6:	6821      	ldr	r1, [r4, #0]
 801dda8:	6833      	ldr	r3, [r6, #0]
 801ddaa:	0608      	lsls	r0, r1, #24
 801ddac:	f853 5b04 	ldr.w	r5, [r3], #4
 801ddb0:	d402      	bmi.n	801ddb8 <_printf_i+0xe8>
 801ddb2:	0649      	lsls	r1, r1, #25
 801ddb4:	bf48      	it	mi
 801ddb6:	b2ad      	uxthmi	r5, r5
 801ddb8:	2f6f      	cmp	r7, #111	@ 0x6f
 801ddba:	4852      	ldr	r0, [pc, #328]	@ (801df04 <_printf_i+0x234>)
 801ddbc:	6033      	str	r3, [r6, #0]
 801ddbe:	bf14      	ite	ne
 801ddc0:	230a      	movne	r3, #10
 801ddc2:	2308      	moveq	r3, #8
 801ddc4:	2100      	movs	r1, #0
 801ddc6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801ddca:	6866      	ldr	r6, [r4, #4]
 801ddcc:	60a6      	str	r6, [r4, #8]
 801ddce:	2e00      	cmp	r6, #0
 801ddd0:	db05      	blt.n	801ddde <_printf_i+0x10e>
 801ddd2:	6821      	ldr	r1, [r4, #0]
 801ddd4:	432e      	orrs	r6, r5
 801ddd6:	f021 0104 	bic.w	r1, r1, #4
 801ddda:	6021      	str	r1, [r4, #0]
 801dddc:	d04b      	beq.n	801de76 <_printf_i+0x1a6>
 801ddde:	4616      	mov	r6, r2
 801dde0:	fbb5 f1f3 	udiv	r1, r5, r3
 801dde4:	fb03 5711 	mls	r7, r3, r1, r5
 801dde8:	5dc7      	ldrb	r7, [r0, r7]
 801ddea:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801ddee:	462f      	mov	r7, r5
 801ddf0:	42bb      	cmp	r3, r7
 801ddf2:	460d      	mov	r5, r1
 801ddf4:	d9f4      	bls.n	801dde0 <_printf_i+0x110>
 801ddf6:	2b08      	cmp	r3, #8
 801ddf8:	d10b      	bne.n	801de12 <_printf_i+0x142>
 801ddfa:	6823      	ldr	r3, [r4, #0]
 801ddfc:	07df      	lsls	r7, r3, #31
 801ddfe:	d508      	bpl.n	801de12 <_printf_i+0x142>
 801de00:	6923      	ldr	r3, [r4, #16]
 801de02:	6861      	ldr	r1, [r4, #4]
 801de04:	4299      	cmp	r1, r3
 801de06:	bfde      	ittt	le
 801de08:	2330      	movle	r3, #48	@ 0x30
 801de0a:	f806 3c01 	strble.w	r3, [r6, #-1]
 801de0e:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 801de12:	1b92      	subs	r2, r2, r6
 801de14:	6122      	str	r2, [r4, #16]
 801de16:	f8cd a000 	str.w	sl, [sp]
 801de1a:	464b      	mov	r3, r9
 801de1c:	aa03      	add	r2, sp, #12
 801de1e:	4621      	mov	r1, r4
 801de20:	4640      	mov	r0, r8
 801de22:	f7ff fee7 	bl	801dbf4 <_printf_common>
 801de26:	3001      	adds	r0, #1
 801de28:	d14a      	bne.n	801dec0 <_printf_i+0x1f0>
 801de2a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801de2e:	b004      	add	sp, #16
 801de30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801de34:	6823      	ldr	r3, [r4, #0]
 801de36:	f043 0320 	orr.w	r3, r3, #32
 801de3a:	6023      	str	r3, [r4, #0]
 801de3c:	4832      	ldr	r0, [pc, #200]	@ (801df08 <_printf_i+0x238>)
 801de3e:	2778      	movs	r7, #120	@ 0x78
 801de40:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801de44:	6823      	ldr	r3, [r4, #0]
 801de46:	6831      	ldr	r1, [r6, #0]
 801de48:	061f      	lsls	r7, r3, #24
 801de4a:	f851 5b04 	ldr.w	r5, [r1], #4
 801de4e:	d402      	bmi.n	801de56 <_printf_i+0x186>
 801de50:	065f      	lsls	r7, r3, #25
 801de52:	bf48      	it	mi
 801de54:	b2ad      	uxthmi	r5, r5
 801de56:	6031      	str	r1, [r6, #0]
 801de58:	07d9      	lsls	r1, r3, #31
 801de5a:	bf44      	itt	mi
 801de5c:	f043 0320 	orrmi.w	r3, r3, #32
 801de60:	6023      	strmi	r3, [r4, #0]
 801de62:	b11d      	cbz	r5, 801de6c <_printf_i+0x19c>
 801de64:	2310      	movs	r3, #16
 801de66:	e7ad      	b.n	801ddc4 <_printf_i+0xf4>
 801de68:	4826      	ldr	r0, [pc, #152]	@ (801df04 <_printf_i+0x234>)
 801de6a:	e7e9      	b.n	801de40 <_printf_i+0x170>
 801de6c:	6823      	ldr	r3, [r4, #0]
 801de6e:	f023 0320 	bic.w	r3, r3, #32
 801de72:	6023      	str	r3, [r4, #0]
 801de74:	e7f6      	b.n	801de64 <_printf_i+0x194>
 801de76:	4616      	mov	r6, r2
 801de78:	e7bd      	b.n	801ddf6 <_printf_i+0x126>
 801de7a:	6833      	ldr	r3, [r6, #0]
 801de7c:	6825      	ldr	r5, [r4, #0]
 801de7e:	6961      	ldr	r1, [r4, #20]
 801de80:	1d18      	adds	r0, r3, #4
 801de82:	6030      	str	r0, [r6, #0]
 801de84:	062e      	lsls	r6, r5, #24
 801de86:	681b      	ldr	r3, [r3, #0]
 801de88:	d501      	bpl.n	801de8e <_printf_i+0x1be>
 801de8a:	6019      	str	r1, [r3, #0]
 801de8c:	e002      	b.n	801de94 <_printf_i+0x1c4>
 801de8e:	0668      	lsls	r0, r5, #25
 801de90:	d5fb      	bpl.n	801de8a <_printf_i+0x1ba>
 801de92:	8019      	strh	r1, [r3, #0]
 801de94:	2300      	movs	r3, #0
 801de96:	6123      	str	r3, [r4, #16]
 801de98:	4616      	mov	r6, r2
 801de9a:	e7bc      	b.n	801de16 <_printf_i+0x146>
 801de9c:	6833      	ldr	r3, [r6, #0]
 801de9e:	1d1a      	adds	r2, r3, #4
 801dea0:	6032      	str	r2, [r6, #0]
 801dea2:	681e      	ldr	r6, [r3, #0]
 801dea4:	6862      	ldr	r2, [r4, #4]
 801dea6:	2100      	movs	r1, #0
 801dea8:	4630      	mov	r0, r6
 801deaa:	f7e2 f9b9 	bl	8000220 <memchr>
 801deae:	b108      	cbz	r0, 801deb4 <_printf_i+0x1e4>
 801deb0:	1b80      	subs	r0, r0, r6
 801deb2:	6060      	str	r0, [r4, #4]
 801deb4:	6863      	ldr	r3, [r4, #4]
 801deb6:	6123      	str	r3, [r4, #16]
 801deb8:	2300      	movs	r3, #0
 801deba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801debe:	e7aa      	b.n	801de16 <_printf_i+0x146>
 801dec0:	6923      	ldr	r3, [r4, #16]
 801dec2:	4632      	mov	r2, r6
 801dec4:	4649      	mov	r1, r9
 801dec6:	4640      	mov	r0, r8
 801dec8:	47d0      	blx	sl
 801deca:	3001      	adds	r0, #1
 801decc:	d0ad      	beq.n	801de2a <_printf_i+0x15a>
 801dece:	6823      	ldr	r3, [r4, #0]
 801ded0:	079b      	lsls	r3, r3, #30
 801ded2:	d413      	bmi.n	801defc <_printf_i+0x22c>
 801ded4:	68e0      	ldr	r0, [r4, #12]
 801ded6:	9b03      	ldr	r3, [sp, #12]
 801ded8:	4298      	cmp	r0, r3
 801deda:	bfb8      	it	lt
 801dedc:	4618      	movlt	r0, r3
 801dede:	e7a6      	b.n	801de2e <_printf_i+0x15e>
 801dee0:	2301      	movs	r3, #1
 801dee2:	4632      	mov	r2, r6
 801dee4:	4649      	mov	r1, r9
 801dee6:	4640      	mov	r0, r8
 801dee8:	47d0      	blx	sl
 801deea:	3001      	adds	r0, #1
 801deec:	d09d      	beq.n	801de2a <_printf_i+0x15a>
 801deee:	3501      	adds	r5, #1
 801def0:	68e3      	ldr	r3, [r4, #12]
 801def2:	9903      	ldr	r1, [sp, #12]
 801def4:	1a5b      	subs	r3, r3, r1
 801def6:	42ab      	cmp	r3, r5
 801def8:	dcf2      	bgt.n	801dee0 <_printf_i+0x210>
 801defa:	e7eb      	b.n	801ded4 <_printf_i+0x204>
 801defc:	2500      	movs	r5, #0
 801defe:	f104 0619 	add.w	r6, r4, #25
 801df02:	e7f5      	b.n	801def0 <_printf_i+0x220>
 801df04:	08020954 	.word	0x08020954
 801df08:	08020965 	.word	0x08020965

0801df0c <__sflush_r>:
 801df0c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801df10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801df14:	0716      	lsls	r6, r2, #28
 801df16:	4605      	mov	r5, r0
 801df18:	460c      	mov	r4, r1
 801df1a:	d454      	bmi.n	801dfc6 <__sflush_r+0xba>
 801df1c:	684b      	ldr	r3, [r1, #4]
 801df1e:	2b00      	cmp	r3, #0
 801df20:	dc02      	bgt.n	801df28 <__sflush_r+0x1c>
 801df22:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801df24:	2b00      	cmp	r3, #0
 801df26:	dd48      	ble.n	801dfba <__sflush_r+0xae>
 801df28:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801df2a:	2e00      	cmp	r6, #0
 801df2c:	d045      	beq.n	801dfba <__sflush_r+0xae>
 801df2e:	2300      	movs	r3, #0
 801df30:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801df34:	682f      	ldr	r7, [r5, #0]
 801df36:	6a21      	ldr	r1, [r4, #32]
 801df38:	602b      	str	r3, [r5, #0]
 801df3a:	d030      	beq.n	801df9e <__sflush_r+0x92>
 801df3c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801df3e:	89a3      	ldrh	r3, [r4, #12]
 801df40:	0759      	lsls	r1, r3, #29
 801df42:	d505      	bpl.n	801df50 <__sflush_r+0x44>
 801df44:	6863      	ldr	r3, [r4, #4]
 801df46:	1ad2      	subs	r2, r2, r3
 801df48:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801df4a:	b10b      	cbz	r3, 801df50 <__sflush_r+0x44>
 801df4c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801df4e:	1ad2      	subs	r2, r2, r3
 801df50:	2300      	movs	r3, #0
 801df52:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801df54:	6a21      	ldr	r1, [r4, #32]
 801df56:	4628      	mov	r0, r5
 801df58:	47b0      	blx	r6
 801df5a:	1c43      	adds	r3, r0, #1
 801df5c:	89a3      	ldrh	r3, [r4, #12]
 801df5e:	d106      	bne.n	801df6e <__sflush_r+0x62>
 801df60:	6829      	ldr	r1, [r5, #0]
 801df62:	291d      	cmp	r1, #29
 801df64:	d82b      	bhi.n	801dfbe <__sflush_r+0xb2>
 801df66:	4a2a      	ldr	r2, [pc, #168]	@ (801e010 <__sflush_r+0x104>)
 801df68:	40ca      	lsrs	r2, r1
 801df6a:	07d6      	lsls	r6, r2, #31
 801df6c:	d527      	bpl.n	801dfbe <__sflush_r+0xb2>
 801df6e:	2200      	movs	r2, #0
 801df70:	6062      	str	r2, [r4, #4]
 801df72:	04d9      	lsls	r1, r3, #19
 801df74:	6922      	ldr	r2, [r4, #16]
 801df76:	6022      	str	r2, [r4, #0]
 801df78:	d504      	bpl.n	801df84 <__sflush_r+0x78>
 801df7a:	1c42      	adds	r2, r0, #1
 801df7c:	d101      	bne.n	801df82 <__sflush_r+0x76>
 801df7e:	682b      	ldr	r3, [r5, #0]
 801df80:	b903      	cbnz	r3, 801df84 <__sflush_r+0x78>
 801df82:	6560      	str	r0, [r4, #84]	@ 0x54
 801df84:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801df86:	602f      	str	r7, [r5, #0]
 801df88:	b1b9      	cbz	r1, 801dfba <__sflush_r+0xae>
 801df8a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801df8e:	4299      	cmp	r1, r3
 801df90:	d002      	beq.n	801df98 <__sflush_r+0x8c>
 801df92:	4628      	mov	r0, r5
 801df94:	f7ff fb4a 	bl	801d62c <_free_r>
 801df98:	2300      	movs	r3, #0
 801df9a:	6363      	str	r3, [r4, #52]	@ 0x34
 801df9c:	e00d      	b.n	801dfba <__sflush_r+0xae>
 801df9e:	2301      	movs	r3, #1
 801dfa0:	4628      	mov	r0, r5
 801dfa2:	47b0      	blx	r6
 801dfa4:	4602      	mov	r2, r0
 801dfa6:	1c50      	adds	r0, r2, #1
 801dfa8:	d1c9      	bne.n	801df3e <__sflush_r+0x32>
 801dfaa:	682b      	ldr	r3, [r5, #0]
 801dfac:	2b00      	cmp	r3, #0
 801dfae:	d0c6      	beq.n	801df3e <__sflush_r+0x32>
 801dfb0:	2b1d      	cmp	r3, #29
 801dfb2:	d001      	beq.n	801dfb8 <__sflush_r+0xac>
 801dfb4:	2b16      	cmp	r3, #22
 801dfb6:	d11e      	bne.n	801dff6 <__sflush_r+0xea>
 801dfb8:	602f      	str	r7, [r5, #0]
 801dfba:	2000      	movs	r0, #0
 801dfbc:	e022      	b.n	801e004 <__sflush_r+0xf8>
 801dfbe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801dfc2:	b21b      	sxth	r3, r3
 801dfc4:	e01b      	b.n	801dffe <__sflush_r+0xf2>
 801dfc6:	690f      	ldr	r7, [r1, #16]
 801dfc8:	2f00      	cmp	r7, #0
 801dfca:	d0f6      	beq.n	801dfba <__sflush_r+0xae>
 801dfcc:	0793      	lsls	r3, r2, #30
 801dfce:	680e      	ldr	r6, [r1, #0]
 801dfd0:	bf08      	it	eq
 801dfd2:	694b      	ldreq	r3, [r1, #20]
 801dfd4:	600f      	str	r7, [r1, #0]
 801dfd6:	bf18      	it	ne
 801dfd8:	2300      	movne	r3, #0
 801dfda:	eba6 0807 	sub.w	r8, r6, r7
 801dfde:	608b      	str	r3, [r1, #8]
 801dfe0:	f1b8 0f00 	cmp.w	r8, #0
 801dfe4:	dde9      	ble.n	801dfba <__sflush_r+0xae>
 801dfe6:	6a21      	ldr	r1, [r4, #32]
 801dfe8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801dfea:	4643      	mov	r3, r8
 801dfec:	463a      	mov	r2, r7
 801dfee:	4628      	mov	r0, r5
 801dff0:	47b0      	blx	r6
 801dff2:	2800      	cmp	r0, #0
 801dff4:	dc08      	bgt.n	801e008 <__sflush_r+0xfc>
 801dff6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801dffa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801dffe:	81a3      	strh	r3, [r4, #12]
 801e000:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801e004:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e008:	4407      	add	r7, r0
 801e00a:	eba8 0800 	sub.w	r8, r8, r0
 801e00e:	e7e7      	b.n	801dfe0 <__sflush_r+0xd4>
 801e010:	20400001 	.word	0x20400001

0801e014 <_fflush_r>:
 801e014:	b538      	push	{r3, r4, r5, lr}
 801e016:	690b      	ldr	r3, [r1, #16]
 801e018:	4605      	mov	r5, r0
 801e01a:	460c      	mov	r4, r1
 801e01c:	b913      	cbnz	r3, 801e024 <_fflush_r+0x10>
 801e01e:	2500      	movs	r5, #0
 801e020:	4628      	mov	r0, r5
 801e022:	bd38      	pop	{r3, r4, r5, pc}
 801e024:	b118      	cbz	r0, 801e02e <_fflush_r+0x1a>
 801e026:	6a03      	ldr	r3, [r0, #32]
 801e028:	b90b      	cbnz	r3, 801e02e <_fflush_r+0x1a>
 801e02a:	f7ff f825 	bl	801d078 <__sinit>
 801e02e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e032:	2b00      	cmp	r3, #0
 801e034:	d0f3      	beq.n	801e01e <_fflush_r+0xa>
 801e036:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801e038:	07d0      	lsls	r0, r2, #31
 801e03a:	d404      	bmi.n	801e046 <_fflush_r+0x32>
 801e03c:	0599      	lsls	r1, r3, #22
 801e03e:	d402      	bmi.n	801e046 <_fflush_r+0x32>
 801e040:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801e042:	f7ff fab0 	bl	801d5a6 <__retarget_lock_acquire_recursive>
 801e046:	4628      	mov	r0, r5
 801e048:	4621      	mov	r1, r4
 801e04a:	f7ff ff5f 	bl	801df0c <__sflush_r>
 801e04e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801e050:	07da      	lsls	r2, r3, #31
 801e052:	4605      	mov	r5, r0
 801e054:	d4e4      	bmi.n	801e020 <_fflush_r+0xc>
 801e056:	89a3      	ldrh	r3, [r4, #12]
 801e058:	059b      	lsls	r3, r3, #22
 801e05a:	d4e1      	bmi.n	801e020 <_fflush_r+0xc>
 801e05c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801e05e:	f7ff faa3 	bl	801d5a8 <__retarget_lock_release_recursive>
 801e062:	e7dd      	b.n	801e020 <_fflush_r+0xc>

0801e064 <_malloc_usable_size_r>:
 801e064:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e068:	1f18      	subs	r0, r3, #4
 801e06a:	2b00      	cmp	r3, #0
 801e06c:	bfbc      	itt	lt
 801e06e:	580b      	ldrlt	r3, [r1, r0]
 801e070:	18c0      	addlt	r0, r0, r3
 801e072:	4770      	bx	lr

0801e074 <__sread>:
 801e074:	b510      	push	{r4, lr}
 801e076:	460c      	mov	r4, r1
 801e078:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e07c:	f000 f968 	bl	801e350 <_read_r>
 801e080:	2800      	cmp	r0, #0
 801e082:	bfab      	itete	ge
 801e084:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801e086:	89a3      	ldrhlt	r3, [r4, #12]
 801e088:	181b      	addge	r3, r3, r0
 801e08a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801e08e:	bfac      	ite	ge
 801e090:	6563      	strge	r3, [r4, #84]	@ 0x54
 801e092:	81a3      	strhlt	r3, [r4, #12]
 801e094:	bd10      	pop	{r4, pc}

0801e096 <__swrite>:
 801e096:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e09a:	461f      	mov	r7, r3
 801e09c:	898b      	ldrh	r3, [r1, #12]
 801e09e:	05db      	lsls	r3, r3, #23
 801e0a0:	4605      	mov	r5, r0
 801e0a2:	460c      	mov	r4, r1
 801e0a4:	4616      	mov	r6, r2
 801e0a6:	d505      	bpl.n	801e0b4 <__swrite+0x1e>
 801e0a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e0ac:	2302      	movs	r3, #2
 801e0ae:	2200      	movs	r2, #0
 801e0b0:	f000 f93c 	bl	801e32c <_lseek_r>
 801e0b4:	89a3      	ldrh	r3, [r4, #12]
 801e0b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e0ba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801e0be:	81a3      	strh	r3, [r4, #12]
 801e0c0:	4632      	mov	r2, r6
 801e0c2:	463b      	mov	r3, r7
 801e0c4:	4628      	mov	r0, r5
 801e0c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e0ca:	f000 b953 	b.w	801e374 <_write_r>

0801e0ce <__sseek>:
 801e0ce:	b510      	push	{r4, lr}
 801e0d0:	460c      	mov	r4, r1
 801e0d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e0d6:	f000 f929 	bl	801e32c <_lseek_r>
 801e0da:	1c43      	adds	r3, r0, #1
 801e0dc:	89a3      	ldrh	r3, [r4, #12]
 801e0de:	bf15      	itete	ne
 801e0e0:	6560      	strne	r0, [r4, #84]	@ 0x54
 801e0e2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801e0e6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801e0ea:	81a3      	strheq	r3, [r4, #12]
 801e0ec:	bf18      	it	ne
 801e0ee:	81a3      	strhne	r3, [r4, #12]
 801e0f0:	bd10      	pop	{r4, pc}

0801e0f2 <__sclose>:
 801e0f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e0f6:	f000 b94f 	b.w	801e398 <_close_r>
	...

0801e0fc <fiprintf>:
 801e0fc:	b40e      	push	{r1, r2, r3}
 801e0fe:	b503      	push	{r0, r1, lr}
 801e100:	4601      	mov	r1, r0
 801e102:	ab03      	add	r3, sp, #12
 801e104:	4805      	ldr	r0, [pc, #20]	@ (801e11c <fiprintf+0x20>)
 801e106:	f853 2b04 	ldr.w	r2, [r3], #4
 801e10a:	6800      	ldr	r0, [r0, #0]
 801e10c:	9301      	str	r3, [sp, #4]
 801e10e:	f7ff fc59 	bl	801d9c4 <_vfiprintf_r>
 801e112:	b002      	add	sp, #8
 801e114:	f85d eb04 	ldr.w	lr, [sp], #4
 801e118:	b003      	add	sp, #12
 801e11a:	4770      	bx	lr
 801e11c:	2000332c 	.word	0x2000332c

0801e120 <__swbuf_r>:
 801e120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e122:	460e      	mov	r6, r1
 801e124:	4614      	mov	r4, r2
 801e126:	4605      	mov	r5, r0
 801e128:	b118      	cbz	r0, 801e132 <__swbuf_r+0x12>
 801e12a:	6a03      	ldr	r3, [r0, #32]
 801e12c:	b90b      	cbnz	r3, 801e132 <__swbuf_r+0x12>
 801e12e:	f7fe ffa3 	bl	801d078 <__sinit>
 801e132:	69a3      	ldr	r3, [r4, #24]
 801e134:	60a3      	str	r3, [r4, #8]
 801e136:	89a3      	ldrh	r3, [r4, #12]
 801e138:	071a      	lsls	r2, r3, #28
 801e13a:	d501      	bpl.n	801e140 <__swbuf_r+0x20>
 801e13c:	6923      	ldr	r3, [r4, #16]
 801e13e:	b943      	cbnz	r3, 801e152 <__swbuf_r+0x32>
 801e140:	4621      	mov	r1, r4
 801e142:	4628      	mov	r0, r5
 801e144:	f000 f82a 	bl	801e19c <__swsetup_r>
 801e148:	b118      	cbz	r0, 801e152 <__swbuf_r+0x32>
 801e14a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801e14e:	4638      	mov	r0, r7
 801e150:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e152:	6823      	ldr	r3, [r4, #0]
 801e154:	6922      	ldr	r2, [r4, #16]
 801e156:	1a98      	subs	r0, r3, r2
 801e158:	6963      	ldr	r3, [r4, #20]
 801e15a:	b2f6      	uxtb	r6, r6
 801e15c:	4283      	cmp	r3, r0
 801e15e:	4637      	mov	r7, r6
 801e160:	dc05      	bgt.n	801e16e <__swbuf_r+0x4e>
 801e162:	4621      	mov	r1, r4
 801e164:	4628      	mov	r0, r5
 801e166:	f7ff ff55 	bl	801e014 <_fflush_r>
 801e16a:	2800      	cmp	r0, #0
 801e16c:	d1ed      	bne.n	801e14a <__swbuf_r+0x2a>
 801e16e:	68a3      	ldr	r3, [r4, #8]
 801e170:	3b01      	subs	r3, #1
 801e172:	60a3      	str	r3, [r4, #8]
 801e174:	6823      	ldr	r3, [r4, #0]
 801e176:	1c5a      	adds	r2, r3, #1
 801e178:	6022      	str	r2, [r4, #0]
 801e17a:	701e      	strb	r6, [r3, #0]
 801e17c:	6962      	ldr	r2, [r4, #20]
 801e17e:	1c43      	adds	r3, r0, #1
 801e180:	429a      	cmp	r2, r3
 801e182:	d004      	beq.n	801e18e <__swbuf_r+0x6e>
 801e184:	89a3      	ldrh	r3, [r4, #12]
 801e186:	07db      	lsls	r3, r3, #31
 801e188:	d5e1      	bpl.n	801e14e <__swbuf_r+0x2e>
 801e18a:	2e0a      	cmp	r6, #10
 801e18c:	d1df      	bne.n	801e14e <__swbuf_r+0x2e>
 801e18e:	4621      	mov	r1, r4
 801e190:	4628      	mov	r0, r5
 801e192:	f7ff ff3f 	bl	801e014 <_fflush_r>
 801e196:	2800      	cmp	r0, #0
 801e198:	d0d9      	beq.n	801e14e <__swbuf_r+0x2e>
 801e19a:	e7d6      	b.n	801e14a <__swbuf_r+0x2a>

0801e19c <__swsetup_r>:
 801e19c:	b538      	push	{r3, r4, r5, lr}
 801e19e:	4b29      	ldr	r3, [pc, #164]	@ (801e244 <__swsetup_r+0xa8>)
 801e1a0:	4605      	mov	r5, r0
 801e1a2:	6818      	ldr	r0, [r3, #0]
 801e1a4:	460c      	mov	r4, r1
 801e1a6:	b118      	cbz	r0, 801e1b0 <__swsetup_r+0x14>
 801e1a8:	6a03      	ldr	r3, [r0, #32]
 801e1aa:	b90b      	cbnz	r3, 801e1b0 <__swsetup_r+0x14>
 801e1ac:	f7fe ff64 	bl	801d078 <__sinit>
 801e1b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e1b4:	0719      	lsls	r1, r3, #28
 801e1b6:	d422      	bmi.n	801e1fe <__swsetup_r+0x62>
 801e1b8:	06da      	lsls	r2, r3, #27
 801e1ba:	d407      	bmi.n	801e1cc <__swsetup_r+0x30>
 801e1bc:	2209      	movs	r2, #9
 801e1be:	602a      	str	r2, [r5, #0]
 801e1c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801e1c4:	81a3      	strh	r3, [r4, #12]
 801e1c6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801e1ca:	e033      	b.n	801e234 <__swsetup_r+0x98>
 801e1cc:	0758      	lsls	r0, r3, #29
 801e1ce:	d512      	bpl.n	801e1f6 <__swsetup_r+0x5a>
 801e1d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801e1d2:	b141      	cbz	r1, 801e1e6 <__swsetup_r+0x4a>
 801e1d4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801e1d8:	4299      	cmp	r1, r3
 801e1da:	d002      	beq.n	801e1e2 <__swsetup_r+0x46>
 801e1dc:	4628      	mov	r0, r5
 801e1de:	f7ff fa25 	bl	801d62c <_free_r>
 801e1e2:	2300      	movs	r3, #0
 801e1e4:	6363      	str	r3, [r4, #52]	@ 0x34
 801e1e6:	89a3      	ldrh	r3, [r4, #12]
 801e1e8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801e1ec:	81a3      	strh	r3, [r4, #12]
 801e1ee:	2300      	movs	r3, #0
 801e1f0:	6063      	str	r3, [r4, #4]
 801e1f2:	6923      	ldr	r3, [r4, #16]
 801e1f4:	6023      	str	r3, [r4, #0]
 801e1f6:	89a3      	ldrh	r3, [r4, #12]
 801e1f8:	f043 0308 	orr.w	r3, r3, #8
 801e1fc:	81a3      	strh	r3, [r4, #12]
 801e1fe:	6923      	ldr	r3, [r4, #16]
 801e200:	b94b      	cbnz	r3, 801e216 <__swsetup_r+0x7a>
 801e202:	89a3      	ldrh	r3, [r4, #12]
 801e204:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801e208:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801e20c:	d003      	beq.n	801e216 <__swsetup_r+0x7a>
 801e20e:	4621      	mov	r1, r4
 801e210:	4628      	mov	r0, r5
 801e212:	f000 f83f 	bl	801e294 <__smakebuf_r>
 801e216:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e21a:	f013 0201 	ands.w	r2, r3, #1
 801e21e:	d00a      	beq.n	801e236 <__swsetup_r+0x9a>
 801e220:	2200      	movs	r2, #0
 801e222:	60a2      	str	r2, [r4, #8]
 801e224:	6962      	ldr	r2, [r4, #20]
 801e226:	4252      	negs	r2, r2
 801e228:	61a2      	str	r2, [r4, #24]
 801e22a:	6922      	ldr	r2, [r4, #16]
 801e22c:	b942      	cbnz	r2, 801e240 <__swsetup_r+0xa4>
 801e22e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801e232:	d1c5      	bne.n	801e1c0 <__swsetup_r+0x24>
 801e234:	bd38      	pop	{r3, r4, r5, pc}
 801e236:	0799      	lsls	r1, r3, #30
 801e238:	bf58      	it	pl
 801e23a:	6962      	ldrpl	r2, [r4, #20]
 801e23c:	60a2      	str	r2, [r4, #8]
 801e23e:	e7f4      	b.n	801e22a <__swsetup_r+0x8e>
 801e240:	2000      	movs	r0, #0
 801e242:	e7f7      	b.n	801e234 <__swsetup_r+0x98>
 801e244:	2000332c 	.word	0x2000332c

0801e248 <__swhatbuf_r>:
 801e248:	b570      	push	{r4, r5, r6, lr}
 801e24a:	460c      	mov	r4, r1
 801e24c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e250:	2900      	cmp	r1, #0
 801e252:	b096      	sub	sp, #88	@ 0x58
 801e254:	4615      	mov	r5, r2
 801e256:	461e      	mov	r6, r3
 801e258:	da0d      	bge.n	801e276 <__swhatbuf_r+0x2e>
 801e25a:	89a3      	ldrh	r3, [r4, #12]
 801e25c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801e260:	f04f 0100 	mov.w	r1, #0
 801e264:	bf14      	ite	ne
 801e266:	2340      	movne	r3, #64	@ 0x40
 801e268:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801e26c:	2000      	movs	r0, #0
 801e26e:	6031      	str	r1, [r6, #0]
 801e270:	602b      	str	r3, [r5, #0]
 801e272:	b016      	add	sp, #88	@ 0x58
 801e274:	bd70      	pop	{r4, r5, r6, pc}
 801e276:	466a      	mov	r2, sp
 801e278:	f000 f89e 	bl	801e3b8 <_fstat_r>
 801e27c:	2800      	cmp	r0, #0
 801e27e:	dbec      	blt.n	801e25a <__swhatbuf_r+0x12>
 801e280:	9901      	ldr	r1, [sp, #4]
 801e282:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801e286:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801e28a:	4259      	negs	r1, r3
 801e28c:	4159      	adcs	r1, r3
 801e28e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801e292:	e7eb      	b.n	801e26c <__swhatbuf_r+0x24>

0801e294 <__smakebuf_r>:
 801e294:	898b      	ldrh	r3, [r1, #12]
 801e296:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801e298:	079d      	lsls	r5, r3, #30
 801e29a:	4606      	mov	r6, r0
 801e29c:	460c      	mov	r4, r1
 801e29e:	d507      	bpl.n	801e2b0 <__smakebuf_r+0x1c>
 801e2a0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801e2a4:	6023      	str	r3, [r4, #0]
 801e2a6:	6123      	str	r3, [r4, #16]
 801e2a8:	2301      	movs	r3, #1
 801e2aa:	6163      	str	r3, [r4, #20]
 801e2ac:	b003      	add	sp, #12
 801e2ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e2b0:	ab01      	add	r3, sp, #4
 801e2b2:	466a      	mov	r2, sp
 801e2b4:	f7ff ffc8 	bl	801e248 <__swhatbuf_r>
 801e2b8:	9f00      	ldr	r7, [sp, #0]
 801e2ba:	4605      	mov	r5, r0
 801e2bc:	4639      	mov	r1, r7
 801e2be:	4630      	mov	r0, r6
 801e2c0:	f7fe fd18 	bl	801ccf4 <_malloc_r>
 801e2c4:	b948      	cbnz	r0, 801e2da <__smakebuf_r+0x46>
 801e2c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e2ca:	059a      	lsls	r2, r3, #22
 801e2cc:	d4ee      	bmi.n	801e2ac <__smakebuf_r+0x18>
 801e2ce:	f023 0303 	bic.w	r3, r3, #3
 801e2d2:	f043 0302 	orr.w	r3, r3, #2
 801e2d6:	81a3      	strh	r3, [r4, #12]
 801e2d8:	e7e2      	b.n	801e2a0 <__smakebuf_r+0xc>
 801e2da:	89a3      	ldrh	r3, [r4, #12]
 801e2dc:	6020      	str	r0, [r4, #0]
 801e2de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801e2e2:	81a3      	strh	r3, [r4, #12]
 801e2e4:	9b01      	ldr	r3, [sp, #4]
 801e2e6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801e2ea:	b15b      	cbz	r3, 801e304 <__smakebuf_r+0x70>
 801e2ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e2f0:	4630      	mov	r0, r6
 801e2f2:	f000 f80b 	bl	801e30c <_isatty_r>
 801e2f6:	b128      	cbz	r0, 801e304 <__smakebuf_r+0x70>
 801e2f8:	89a3      	ldrh	r3, [r4, #12]
 801e2fa:	f023 0303 	bic.w	r3, r3, #3
 801e2fe:	f043 0301 	orr.w	r3, r3, #1
 801e302:	81a3      	strh	r3, [r4, #12]
 801e304:	89a3      	ldrh	r3, [r4, #12]
 801e306:	431d      	orrs	r5, r3
 801e308:	81a5      	strh	r5, [r4, #12]
 801e30a:	e7cf      	b.n	801e2ac <__smakebuf_r+0x18>

0801e30c <_isatty_r>:
 801e30c:	b538      	push	{r3, r4, r5, lr}
 801e30e:	4d06      	ldr	r5, [pc, #24]	@ (801e328 <_isatty_r+0x1c>)
 801e310:	2300      	movs	r3, #0
 801e312:	4604      	mov	r4, r0
 801e314:	4608      	mov	r0, r1
 801e316:	602b      	str	r3, [r5, #0]
 801e318:	f7e4 fa46 	bl	80027a8 <_isatty>
 801e31c:	1c43      	adds	r3, r0, #1
 801e31e:	d102      	bne.n	801e326 <_isatty_r+0x1a>
 801e320:	682b      	ldr	r3, [r5, #0]
 801e322:	b103      	cbz	r3, 801e326 <_isatty_r+0x1a>
 801e324:	6023      	str	r3, [r4, #0]
 801e326:	bd38      	pop	{r3, r4, r5, pc}
 801e328:	20019d88 	.word	0x20019d88

0801e32c <_lseek_r>:
 801e32c:	b538      	push	{r3, r4, r5, lr}
 801e32e:	4d07      	ldr	r5, [pc, #28]	@ (801e34c <_lseek_r+0x20>)
 801e330:	4604      	mov	r4, r0
 801e332:	4608      	mov	r0, r1
 801e334:	4611      	mov	r1, r2
 801e336:	2200      	movs	r2, #0
 801e338:	602a      	str	r2, [r5, #0]
 801e33a:	461a      	mov	r2, r3
 801e33c:	f7e4 fa3f 	bl	80027be <_lseek>
 801e340:	1c43      	adds	r3, r0, #1
 801e342:	d102      	bne.n	801e34a <_lseek_r+0x1e>
 801e344:	682b      	ldr	r3, [r5, #0]
 801e346:	b103      	cbz	r3, 801e34a <_lseek_r+0x1e>
 801e348:	6023      	str	r3, [r4, #0]
 801e34a:	bd38      	pop	{r3, r4, r5, pc}
 801e34c:	20019d88 	.word	0x20019d88

0801e350 <_read_r>:
 801e350:	b538      	push	{r3, r4, r5, lr}
 801e352:	4d07      	ldr	r5, [pc, #28]	@ (801e370 <_read_r+0x20>)
 801e354:	4604      	mov	r4, r0
 801e356:	4608      	mov	r0, r1
 801e358:	4611      	mov	r1, r2
 801e35a:	2200      	movs	r2, #0
 801e35c:	602a      	str	r2, [r5, #0]
 801e35e:	461a      	mov	r2, r3
 801e360:	f7e4 f9e9 	bl	8002736 <_read>
 801e364:	1c43      	adds	r3, r0, #1
 801e366:	d102      	bne.n	801e36e <_read_r+0x1e>
 801e368:	682b      	ldr	r3, [r5, #0]
 801e36a:	b103      	cbz	r3, 801e36e <_read_r+0x1e>
 801e36c:	6023      	str	r3, [r4, #0]
 801e36e:	bd38      	pop	{r3, r4, r5, pc}
 801e370:	20019d88 	.word	0x20019d88

0801e374 <_write_r>:
 801e374:	b538      	push	{r3, r4, r5, lr}
 801e376:	4d07      	ldr	r5, [pc, #28]	@ (801e394 <_write_r+0x20>)
 801e378:	4604      	mov	r4, r0
 801e37a:	4608      	mov	r0, r1
 801e37c:	4611      	mov	r1, r2
 801e37e:	2200      	movs	r2, #0
 801e380:	602a      	str	r2, [r5, #0]
 801e382:	461a      	mov	r2, r3
 801e384:	f7e3 ff36 	bl	80021f4 <_write>
 801e388:	1c43      	adds	r3, r0, #1
 801e38a:	d102      	bne.n	801e392 <_write_r+0x1e>
 801e38c:	682b      	ldr	r3, [r5, #0]
 801e38e:	b103      	cbz	r3, 801e392 <_write_r+0x1e>
 801e390:	6023      	str	r3, [r4, #0]
 801e392:	bd38      	pop	{r3, r4, r5, pc}
 801e394:	20019d88 	.word	0x20019d88

0801e398 <_close_r>:
 801e398:	b538      	push	{r3, r4, r5, lr}
 801e39a:	4d06      	ldr	r5, [pc, #24]	@ (801e3b4 <_close_r+0x1c>)
 801e39c:	2300      	movs	r3, #0
 801e39e:	4604      	mov	r4, r0
 801e3a0:	4608      	mov	r0, r1
 801e3a2:	602b      	str	r3, [r5, #0]
 801e3a4:	f7e4 f9e4 	bl	8002770 <_close>
 801e3a8:	1c43      	adds	r3, r0, #1
 801e3aa:	d102      	bne.n	801e3b2 <_close_r+0x1a>
 801e3ac:	682b      	ldr	r3, [r5, #0]
 801e3ae:	b103      	cbz	r3, 801e3b2 <_close_r+0x1a>
 801e3b0:	6023      	str	r3, [r4, #0]
 801e3b2:	bd38      	pop	{r3, r4, r5, pc}
 801e3b4:	20019d88 	.word	0x20019d88

0801e3b8 <_fstat_r>:
 801e3b8:	b538      	push	{r3, r4, r5, lr}
 801e3ba:	4d07      	ldr	r5, [pc, #28]	@ (801e3d8 <_fstat_r+0x20>)
 801e3bc:	2300      	movs	r3, #0
 801e3be:	4604      	mov	r4, r0
 801e3c0:	4608      	mov	r0, r1
 801e3c2:	4611      	mov	r1, r2
 801e3c4:	602b      	str	r3, [r5, #0]
 801e3c6:	f7e4 f9df 	bl	8002788 <_fstat>
 801e3ca:	1c43      	adds	r3, r0, #1
 801e3cc:	d102      	bne.n	801e3d4 <_fstat_r+0x1c>
 801e3ce:	682b      	ldr	r3, [r5, #0]
 801e3d0:	b103      	cbz	r3, 801e3d4 <_fstat_r+0x1c>
 801e3d2:	6023      	str	r3, [r4, #0]
 801e3d4:	bd38      	pop	{r3, r4, r5, pc}
 801e3d6:	bf00      	nop
 801e3d8:	20019d88 	.word	0x20019d88

0801e3dc <abort>:
 801e3dc:	b508      	push	{r3, lr}
 801e3de:	2006      	movs	r0, #6
 801e3e0:	f000 f82c 	bl	801e43c <raise>
 801e3e4:	2001      	movs	r0, #1
 801e3e6:	f7e4 f99b 	bl	8002720 <_exit>

0801e3ea <_raise_r>:
 801e3ea:	291f      	cmp	r1, #31
 801e3ec:	b538      	push	{r3, r4, r5, lr}
 801e3ee:	4605      	mov	r5, r0
 801e3f0:	460c      	mov	r4, r1
 801e3f2:	d904      	bls.n	801e3fe <_raise_r+0x14>
 801e3f4:	2316      	movs	r3, #22
 801e3f6:	6003      	str	r3, [r0, #0]
 801e3f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801e3fc:	bd38      	pop	{r3, r4, r5, pc}
 801e3fe:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801e400:	b112      	cbz	r2, 801e408 <_raise_r+0x1e>
 801e402:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801e406:	b94b      	cbnz	r3, 801e41c <_raise_r+0x32>
 801e408:	4628      	mov	r0, r5
 801e40a:	f000 f831 	bl	801e470 <_getpid_r>
 801e40e:	4622      	mov	r2, r4
 801e410:	4601      	mov	r1, r0
 801e412:	4628      	mov	r0, r5
 801e414:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e418:	f000 b818 	b.w	801e44c <_kill_r>
 801e41c:	2b01      	cmp	r3, #1
 801e41e:	d00a      	beq.n	801e436 <_raise_r+0x4c>
 801e420:	1c59      	adds	r1, r3, #1
 801e422:	d103      	bne.n	801e42c <_raise_r+0x42>
 801e424:	2316      	movs	r3, #22
 801e426:	6003      	str	r3, [r0, #0]
 801e428:	2001      	movs	r0, #1
 801e42a:	e7e7      	b.n	801e3fc <_raise_r+0x12>
 801e42c:	2100      	movs	r1, #0
 801e42e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801e432:	4620      	mov	r0, r4
 801e434:	4798      	blx	r3
 801e436:	2000      	movs	r0, #0
 801e438:	e7e0      	b.n	801e3fc <_raise_r+0x12>
	...

0801e43c <raise>:
 801e43c:	4b02      	ldr	r3, [pc, #8]	@ (801e448 <raise+0xc>)
 801e43e:	4601      	mov	r1, r0
 801e440:	6818      	ldr	r0, [r3, #0]
 801e442:	f7ff bfd2 	b.w	801e3ea <_raise_r>
 801e446:	bf00      	nop
 801e448:	2000332c 	.word	0x2000332c

0801e44c <_kill_r>:
 801e44c:	b538      	push	{r3, r4, r5, lr}
 801e44e:	4d07      	ldr	r5, [pc, #28]	@ (801e46c <_kill_r+0x20>)
 801e450:	2300      	movs	r3, #0
 801e452:	4604      	mov	r4, r0
 801e454:	4608      	mov	r0, r1
 801e456:	4611      	mov	r1, r2
 801e458:	602b      	str	r3, [r5, #0]
 801e45a:	f7e4 f951 	bl	8002700 <_kill>
 801e45e:	1c43      	adds	r3, r0, #1
 801e460:	d102      	bne.n	801e468 <_kill_r+0x1c>
 801e462:	682b      	ldr	r3, [r5, #0]
 801e464:	b103      	cbz	r3, 801e468 <_kill_r+0x1c>
 801e466:	6023      	str	r3, [r4, #0]
 801e468:	bd38      	pop	{r3, r4, r5, pc}
 801e46a:	bf00      	nop
 801e46c:	20019d88 	.word	0x20019d88

0801e470 <_getpid_r>:
 801e470:	f7e4 b93e 	b.w	80026f0 <_getpid>

0801e474 <_init>:
 801e474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e476:	bf00      	nop
 801e478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e47a:	bc08      	pop	{r3}
 801e47c:	469e      	mov	lr, r3
 801e47e:	4770      	bx	lr

0801e480 <_fini>:
 801e480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e482:	bf00      	nop
 801e484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e486:	bc08      	pop	{r3}
 801e488:	469e      	mov	lr, r3
 801e48a:	4770      	bx	lr
