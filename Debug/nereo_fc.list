
nereo_fc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001e26c  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000265c  0801e430  0801e430  0001f430  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08020a8c  08020a8c  0002537c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08020a8c  08020a8c  00021a8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08020a94  08020a94  0002537c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000018  08020a94  08020a94  00021a94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08020aac  08020aac  00021aac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000337c  20000000  08020ab0  00022000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002537c  2**0
                  CONTENTS
 10 .bss          00016a0c  20003380  20003380  00025380  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20019d8c  20019d8c  00025380  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002537c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000232bd  00000000  00000000  000253ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000056f5  00000000  00000000  00048669  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001950  00000000  00000000  0004dd60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001319  00000000  00000000  0004f6b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000346c3  00000000  00000000  000509c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00023d8c  00000000  00000000  0008508c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0011a121  00000000  00000000  000a8e18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000e2  00000000  00000000  001c2f39  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000077f4  00000000  00000000  001c301c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000071  00000000  00000000  001ca810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    00000959  00000000  00000000  001ca881  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_ranges 00000020  00000000  00000000  001cb1da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20003380 	.word	0x20003380
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0801e414 	.word	0x0801e414

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20003384 	.word	0x20003384
 80001fc:	0801e414 	.word	0x0801e414

08000200 <strcmp>:
 8000200:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000204:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000208:	2a01      	cmp	r2, #1
 800020a:	bf28      	it	cs
 800020c:	429a      	cmpcs	r2, r3
 800020e:	d0f7      	beq.n	8000200 <strcmp>
 8000210:	1ad0      	subs	r0, r2, r3
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2f>:
 8000b7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b80:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b84:	bf24      	itt	cs
 8000b86:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b8a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b8e:	d90d      	bls.n	8000bac <__aeabi_d2f+0x30>
 8000b90:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b94:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b98:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b9c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ba0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ba4:	bf08      	it	eq
 8000ba6:	f020 0001 	biceq.w	r0, r0, #1
 8000baa:	4770      	bx	lr
 8000bac:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bb0:	d121      	bne.n	8000bf6 <__aeabi_d2f+0x7a>
 8000bb2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bb6:	bfbc      	itt	lt
 8000bb8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bbc:	4770      	bxlt	lr
 8000bbe:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bc2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bc6:	f1c2 0218 	rsb	r2, r2, #24
 8000bca:	f1c2 0c20 	rsb	ip, r2, #32
 8000bce:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bd2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bd6:	bf18      	it	ne
 8000bd8:	f040 0001 	orrne.w	r0, r0, #1
 8000bdc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000be4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000be8:	ea40 000c 	orr.w	r0, r0, ip
 8000bec:	fa23 f302 	lsr.w	r3, r3, r2
 8000bf0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bf4:	e7cc      	b.n	8000b90 <__aeabi_d2f+0x14>
 8000bf6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bfa:	d107      	bne.n	8000c0c <__aeabi_d2f+0x90>
 8000bfc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c00:	bf1e      	ittt	ne
 8000c02:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c06:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c0a:	4770      	bxne	lr
 8000c0c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c10:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c14:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop

08000c1c <__aeabi_ldivmod>:
 8000c1c:	b97b      	cbnz	r3, 8000c3e <__aeabi_ldivmod+0x22>
 8000c1e:	b972      	cbnz	r2, 8000c3e <__aeabi_ldivmod+0x22>
 8000c20:	2900      	cmp	r1, #0
 8000c22:	bfbe      	ittt	lt
 8000c24:	2000      	movlt	r0, #0
 8000c26:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000c2a:	e006      	blt.n	8000c3a <__aeabi_ldivmod+0x1e>
 8000c2c:	bf08      	it	eq
 8000c2e:	2800      	cmpeq	r0, #0
 8000c30:	bf1c      	itt	ne
 8000c32:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000c36:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c3a:	f000 b9d3 	b.w	8000fe4 <__aeabi_idiv0>
 8000c3e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c42:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c46:	2900      	cmp	r1, #0
 8000c48:	db09      	blt.n	8000c5e <__aeabi_ldivmod+0x42>
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	db1a      	blt.n	8000c84 <__aeabi_ldivmod+0x68>
 8000c4e:	f000 f84d 	bl	8000cec <__udivmoddi4>
 8000c52:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c5a:	b004      	add	sp, #16
 8000c5c:	4770      	bx	lr
 8000c5e:	4240      	negs	r0, r0
 8000c60:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	db1b      	blt.n	8000ca0 <__aeabi_ldivmod+0x84>
 8000c68:	f000 f840 	bl	8000cec <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4240      	negs	r0, r0
 8000c78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c7c:	4252      	negs	r2, r2
 8000c7e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c82:	4770      	bx	lr
 8000c84:	4252      	negs	r2, r2
 8000c86:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c8a:	f000 f82f 	bl	8000cec <__udivmoddi4>
 8000c8e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c96:	b004      	add	sp, #16
 8000c98:	4240      	negs	r0, r0
 8000c9a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c9e:	4770      	bx	lr
 8000ca0:	4252      	negs	r2, r2
 8000ca2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ca6:	f000 f821 	bl	8000cec <__udivmoddi4>
 8000caa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb2:	b004      	add	sp, #16
 8000cb4:	4252      	negs	r2, r2
 8000cb6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cba:	4770      	bx	lr

08000cbc <__aeabi_uldivmod>:
 8000cbc:	b953      	cbnz	r3, 8000cd4 <__aeabi_uldivmod+0x18>
 8000cbe:	b94a      	cbnz	r2, 8000cd4 <__aeabi_uldivmod+0x18>
 8000cc0:	2900      	cmp	r1, #0
 8000cc2:	bf08      	it	eq
 8000cc4:	2800      	cmpeq	r0, #0
 8000cc6:	bf1c      	itt	ne
 8000cc8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000ccc:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cd0:	f000 b988 	b.w	8000fe4 <__aeabi_idiv0>
 8000cd4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cdc:	f000 f806 	bl	8000cec <__udivmoddi4>
 8000ce0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce8:	b004      	add	sp, #16
 8000cea:	4770      	bx	lr

08000cec <__udivmoddi4>:
 8000cec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cf0:	9d08      	ldr	r5, [sp, #32]
 8000cf2:	468e      	mov	lr, r1
 8000cf4:	4604      	mov	r4, r0
 8000cf6:	4688      	mov	r8, r1
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d14a      	bne.n	8000d92 <__udivmoddi4+0xa6>
 8000cfc:	428a      	cmp	r2, r1
 8000cfe:	4617      	mov	r7, r2
 8000d00:	d962      	bls.n	8000dc8 <__udivmoddi4+0xdc>
 8000d02:	fab2 f682 	clz	r6, r2
 8000d06:	b14e      	cbz	r6, 8000d1c <__udivmoddi4+0x30>
 8000d08:	f1c6 0320 	rsb	r3, r6, #32
 8000d0c:	fa01 f806 	lsl.w	r8, r1, r6
 8000d10:	fa20 f303 	lsr.w	r3, r0, r3
 8000d14:	40b7      	lsls	r7, r6
 8000d16:	ea43 0808 	orr.w	r8, r3, r8
 8000d1a:	40b4      	lsls	r4, r6
 8000d1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d20:	fa1f fc87 	uxth.w	ip, r7
 8000d24:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d28:	0c23      	lsrs	r3, r4, #16
 8000d2a:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d2e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d32:	fb01 f20c 	mul.w	r2, r1, ip
 8000d36:	429a      	cmp	r2, r3
 8000d38:	d909      	bls.n	8000d4e <__udivmoddi4+0x62>
 8000d3a:	18fb      	adds	r3, r7, r3
 8000d3c:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000d40:	f080 80ea 	bcs.w	8000f18 <__udivmoddi4+0x22c>
 8000d44:	429a      	cmp	r2, r3
 8000d46:	f240 80e7 	bls.w	8000f18 <__udivmoddi4+0x22c>
 8000d4a:	3902      	subs	r1, #2
 8000d4c:	443b      	add	r3, r7
 8000d4e:	1a9a      	subs	r2, r3, r2
 8000d50:	b2a3      	uxth	r3, r4
 8000d52:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d56:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d5a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d5e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d62:	459c      	cmp	ip, r3
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0x8e>
 8000d66:	18fb      	adds	r3, r7, r3
 8000d68:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000d6c:	f080 80d6 	bcs.w	8000f1c <__udivmoddi4+0x230>
 8000d70:	459c      	cmp	ip, r3
 8000d72:	f240 80d3 	bls.w	8000f1c <__udivmoddi4+0x230>
 8000d76:	443b      	add	r3, r7
 8000d78:	3802      	subs	r0, #2
 8000d7a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d7e:	eba3 030c 	sub.w	r3, r3, ip
 8000d82:	2100      	movs	r1, #0
 8000d84:	b11d      	cbz	r5, 8000d8e <__udivmoddi4+0xa2>
 8000d86:	40f3      	lsrs	r3, r6
 8000d88:	2200      	movs	r2, #0
 8000d8a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d905      	bls.n	8000da2 <__udivmoddi4+0xb6>
 8000d96:	b10d      	cbz	r5, 8000d9c <__udivmoddi4+0xb0>
 8000d98:	e9c5 0100 	strd	r0, r1, [r5]
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	4608      	mov	r0, r1
 8000da0:	e7f5      	b.n	8000d8e <__udivmoddi4+0xa2>
 8000da2:	fab3 f183 	clz	r1, r3
 8000da6:	2900      	cmp	r1, #0
 8000da8:	d146      	bne.n	8000e38 <__udivmoddi4+0x14c>
 8000daa:	4573      	cmp	r3, lr
 8000dac:	d302      	bcc.n	8000db4 <__udivmoddi4+0xc8>
 8000dae:	4282      	cmp	r2, r0
 8000db0:	f200 8105 	bhi.w	8000fbe <__udivmoddi4+0x2d2>
 8000db4:	1a84      	subs	r4, r0, r2
 8000db6:	eb6e 0203 	sbc.w	r2, lr, r3
 8000dba:	2001      	movs	r0, #1
 8000dbc:	4690      	mov	r8, r2
 8000dbe:	2d00      	cmp	r5, #0
 8000dc0:	d0e5      	beq.n	8000d8e <__udivmoddi4+0xa2>
 8000dc2:	e9c5 4800 	strd	r4, r8, [r5]
 8000dc6:	e7e2      	b.n	8000d8e <__udivmoddi4+0xa2>
 8000dc8:	2a00      	cmp	r2, #0
 8000dca:	f000 8090 	beq.w	8000eee <__udivmoddi4+0x202>
 8000dce:	fab2 f682 	clz	r6, r2
 8000dd2:	2e00      	cmp	r6, #0
 8000dd4:	f040 80a4 	bne.w	8000f20 <__udivmoddi4+0x234>
 8000dd8:	1a8a      	subs	r2, r1, r2
 8000dda:	0c03      	lsrs	r3, r0, #16
 8000ddc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000de0:	b280      	uxth	r0, r0
 8000de2:	b2bc      	uxth	r4, r7
 8000de4:	2101      	movs	r1, #1
 8000de6:	fbb2 fcfe 	udiv	ip, r2, lr
 8000dea:	fb0e 221c 	mls	r2, lr, ip, r2
 8000dee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000df2:	fb04 f20c 	mul.w	r2, r4, ip
 8000df6:	429a      	cmp	r2, r3
 8000df8:	d907      	bls.n	8000e0a <__udivmoddi4+0x11e>
 8000dfa:	18fb      	adds	r3, r7, r3
 8000dfc:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000e00:	d202      	bcs.n	8000e08 <__udivmoddi4+0x11c>
 8000e02:	429a      	cmp	r2, r3
 8000e04:	f200 80e0 	bhi.w	8000fc8 <__udivmoddi4+0x2dc>
 8000e08:	46c4      	mov	ip, r8
 8000e0a:	1a9b      	subs	r3, r3, r2
 8000e0c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e10:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e14:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e18:	fb02 f404 	mul.w	r4, r2, r4
 8000e1c:	429c      	cmp	r4, r3
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x144>
 8000e20:	18fb      	adds	r3, r7, r3
 8000e22:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x142>
 8000e28:	429c      	cmp	r4, r3
 8000e2a:	f200 80ca 	bhi.w	8000fc2 <__udivmoddi4+0x2d6>
 8000e2e:	4602      	mov	r2, r0
 8000e30:	1b1b      	subs	r3, r3, r4
 8000e32:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e36:	e7a5      	b.n	8000d84 <__udivmoddi4+0x98>
 8000e38:	f1c1 0620 	rsb	r6, r1, #32
 8000e3c:	408b      	lsls	r3, r1
 8000e3e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e42:	431f      	orrs	r7, r3
 8000e44:	fa0e f401 	lsl.w	r4, lr, r1
 8000e48:	fa20 f306 	lsr.w	r3, r0, r6
 8000e4c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e50:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e54:	4323      	orrs	r3, r4
 8000e56:	fa00 f801 	lsl.w	r8, r0, r1
 8000e5a:	fa1f fc87 	uxth.w	ip, r7
 8000e5e:	fbbe f0f9 	udiv	r0, lr, r9
 8000e62:	0c1c      	lsrs	r4, r3, #16
 8000e64:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e68:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e6c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e70:	45a6      	cmp	lr, r4
 8000e72:	fa02 f201 	lsl.w	r2, r2, r1
 8000e76:	d909      	bls.n	8000e8c <__udivmoddi4+0x1a0>
 8000e78:	193c      	adds	r4, r7, r4
 8000e7a:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000e7e:	f080 809c 	bcs.w	8000fba <__udivmoddi4+0x2ce>
 8000e82:	45a6      	cmp	lr, r4
 8000e84:	f240 8099 	bls.w	8000fba <__udivmoddi4+0x2ce>
 8000e88:	3802      	subs	r0, #2
 8000e8a:	443c      	add	r4, r7
 8000e8c:	eba4 040e 	sub.w	r4, r4, lr
 8000e90:	fa1f fe83 	uxth.w	lr, r3
 8000e94:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e98:	fb09 4413 	mls	r4, r9, r3, r4
 8000e9c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ea0:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ea4:	45a4      	cmp	ip, r4
 8000ea6:	d908      	bls.n	8000eba <__udivmoddi4+0x1ce>
 8000ea8:	193c      	adds	r4, r7, r4
 8000eaa:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000eae:	f080 8082 	bcs.w	8000fb6 <__udivmoddi4+0x2ca>
 8000eb2:	45a4      	cmp	ip, r4
 8000eb4:	d97f      	bls.n	8000fb6 <__udivmoddi4+0x2ca>
 8000eb6:	3b02      	subs	r3, #2
 8000eb8:	443c      	add	r4, r7
 8000eba:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ebe:	eba4 040c 	sub.w	r4, r4, ip
 8000ec2:	fba0 ec02 	umull	lr, ip, r0, r2
 8000ec6:	4564      	cmp	r4, ip
 8000ec8:	4673      	mov	r3, lr
 8000eca:	46e1      	mov	r9, ip
 8000ecc:	d362      	bcc.n	8000f94 <__udivmoddi4+0x2a8>
 8000ece:	d05f      	beq.n	8000f90 <__udivmoddi4+0x2a4>
 8000ed0:	b15d      	cbz	r5, 8000eea <__udivmoddi4+0x1fe>
 8000ed2:	ebb8 0203 	subs.w	r2, r8, r3
 8000ed6:	eb64 0409 	sbc.w	r4, r4, r9
 8000eda:	fa04 f606 	lsl.w	r6, r4, r6
 8000ede:	fa22 f301 	lsr.w	r3, r2, r1
 8000ee2:	431e      	orrs	r6, r3
 8000ee4:	40cc      	lsrs	r4, r1
 8000ee6:	e9c5 6400 	strd	r6, r4, [r5]
 8000eea:	2100      	movs	r1, #0
 8000eec:	e74f      	b.n	8000d8e <__udivmoddi4+0xa2>
 8000eee:	fbb1 fcf2 	udiv	ip, r1, r2
 8000ef2:	0c01      	lsrs	r1, r0, #16
 8000ef4:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ef8:	b280      	uxth	r0, r0
 8000efa:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000efe:	463b      	mov	r3, r7
 8000f00:	4638      	mov	r0, r7
 8000f02:	463c      	mov	r4, r7
 8000f04:	46b8      	mov	r8, r7
 8000f06:	46be      	mov	lr, r7
 8000f08:	2620      	movs	r6, #32
 8000f0a:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f0e:	eba2 0208 	sub.w	r2, r2, r8
 8000f12:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f16:	e766      	b.n	8000de6 <__udivmoddi4+0xfa>
 8000f18:	4601      	mov	r1, r0
 8000f1a:	e718      	b.n	8000d4e <__udivmoddi4+0x62>
 8000f1c:	4610      	mov	r0, r2
 8000f1e:	e72c      	b.n	8000d7a <__udivmoddi4+0x8e>
 8000f20:	f1c6 0220 	rsb	r2, r6, #32
 8000f24:	fa2e f302 	lsr.w	r3, lr, r2
 8000f28:	40b7      	lsls	r7, r6
 8000f2a:	40b1      	lsls	r1, r6
 8000f2c:	fa20 f202 	lsr.w	r2, r0, r2
 8000f30:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f34:	430a      	orrs	r2, r1
 8000f36:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f3a:	b2bc      	uxth	r4, r7
 8000f3c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f40:	0c11      	lsrs	r1, r2, #16
 8000f42:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f46:	fb08 f904 	mul.w	r9, r8, r4
 8000f4a:	40b0      	lsls	r0, r6
 8000f4c:	4589      	cmp	r9, r1
 8000f4e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f52:	b280      	uxth	r0, r0
 8000f54:	d93e      	bls.n	8000fd4 <__udivmoddi4+0x2e8>
 8000f56:	1879      	adds	r1, r7, r1
 8000f58:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000f5c:	d201      	bcs.n	8000f62 <__udivmoddi4+0x276>
 8000f5e:	4589      	cmp	r9, r1
 8000f60:	d81f      	bhi.n	8000fa2 <__udivmoddi4+0x2b6>
 8000f62:	eba1 0109 	sub.w	r1, r1, r9
 8000f66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f6a:	fb09 f804 	mul.w	r8, r9, r4
 8000f6e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f72:	b292      	uxth	r2, r2
 8000f74:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f78:	4542      	cmp	r2, r8
 8000f7a:	d229      	bcs.n	8000fd0 <__udivmoddi4+0x2e4>
 8000f7c:	18ba      	adds	r2, r7, r2
 8000f7e:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000f82:	d2c4      	bcs.n	8000f0e <__udivmoddi4+0x222>
 8000f84:	4542      	cmp	r2, r8
 8000f86:	d2c2      	bcs.n	8000f0e <__udivmoddi4+0x222>
 8000f88:	f1a9 0102 	sub.w	r1, r9, #2
 8000f8c:	443a      	add	r2, r7
 8000f8e:	e7be      	b.n	8000f0e <__udivmoddi4+0x222>
 8000f90:	45f0      	cmp	r8, lr
 8000f92:	d29d      	bcs.n	8000ed0 <__udivmoddi4+0x1e4>
 8000f94:	ebbe 0302 	subs.w	r3, lr, r2
 8000f98:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f9c:	3801      	subs	r0, #1
 8000f9e:	46e1      	mov	r9, ip
 8000fa0:	e796      	b.n	8000ed0 <__udivmoddi4+0x1e4>
 8000fa2:	eba7 0909 	sub.w	r9, r7, r9
 8000fa6:	4449      	add	r1, r9
 8000fa8:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fac:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fb0:	fb09 f804 	mul.w	r8, r9, r4
 8000fb4:	e7db      	b.n	8000f6e <__udivmoddi4+0x282>
 8000fb6:	4673      	mov	r3, lr
 8000fb8:	e77f      	b.n	8000eba <__udivmoddi4+0x1ce>
 8000fba:	4650      	mov	r0, sl
 8000fbc:	e766      	b.n	8000e8c <__udivmoddi4+0x1a0>
 8000fbe:	4608      	mov	r0, r1
 8000fc0:	e6fd      	b.n	8000dbe <__udivmoddi4+0xd2>
 8000fc2:	443b      	add	r3, r7
 8000fc4:	3a02      	subs	r2, #2
 8000fc6:	e733      	b.n	8000e30 <__udivmoddi4+0x144>
 8000fc8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fcc:	443b      	add	r3, r7
 8000fce:	e71c      	b.n	8000e0a <__udivmoddi4+0x11e>
 8000fd0:	4649      	mov	r1, r9
 8000fd2:	e79c      	b.n	8000f0e <__udivmoddi4+0x222>
 8000fd4:	eba1 0109 	sub.w	r1, r1, r9
 8000fd8:	46c4      	mov	ip, r8
 8000fda:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fde:	fb09 f804 	mul.w	r8, r9, r4
 8000fe2:	e7c4      	b.n	8000f6e <__udivmoddi4+0x282>

08000fe4 <__aeabi_idiv0>:
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop

08000fe8 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b08a      	sub	sp, #40	@ 0x28
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8000ff4:	f007 fe96 	bl	8008d24 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8000ff8:	4b5a      	ldr	r3, [pc, #360]	@ (8001164 <pvPortMallocMicroROS+0x17c>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d101      	bne.n	8001004 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8001000:	f000 f986 	bl	8001310 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001004:	4b58      	ldr	r3, [pc, #352]	@ (8001168 <pvPortMallocMicroROS+0x180>)
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	4013      	ands	r3, r2
 800100c:	2b00      	cmp	r3, #0
 800100e:	f040 8090 	bne.w	8001132 <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d01e      	beq.n	8001056 <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8001018:	2208      	movs	r2, #8
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4413      	add	r3, r2
 800101e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	f003 0307 	and.w	r3, r3, #7
 8001026:	2b00      	cmp	r3, #0
 8001028:	d015      	beq.n	8001056 <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	f023 0307 	bic.w	r3, r3, #7
 8001030:	3308      	adds	r3, #8
 8001032:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	f003 0307 	and.w	r3, r3, #7
 800103a:	2b00      	cmp	r3, #0
 800103c:	d00b      	beq.n	8001056 <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800103e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001042:	f383 8811 	msr	BASEPRI, r3
 8001046:	f3bf 8f6f 	isb	sy
 800104a:	f3bf 8f4f 	dsb	sy
 800104e:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001050:	bf00      	nop
 8001052:	bf00      	nop
 8001054:	e7fd      	b.n	8001052 <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d06a      	beq.n	8001132 <pvPortMallocMicroROS+0x14a>
 800105c:	4b43      	ldr	r3, [pc, #268]	@ (800116c <pvPortMallocMicroROS+0x184>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	687a      	ldr	r2, [r7, #4]
 8001062:	429a      	cmp	r2, r3
 8001064:	d865      	bhi.n	8001132 <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8001066:	4b42      	ldr	r3, [pc, #264]	@ (8001170 <pvPortMallocMicroROS+0x188>)
 8001068:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800106a:	4b41      	ldr	r3, [pc, #260]	@ (8001170 <pvPortMallocMicroROS+0x188>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001070:	e004      	b.n	800107c <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 8001072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001074:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8001076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800107c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	687a      	ldr	r2, [r7, #4]
 8001082:	429a      	cmp	r2, r3
 8001084:	d903      	bls.n	800108e <pvPortMallocMicroROS+0xa6>
 8001086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d1f1      	bne.n	8001072 <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800108e:	4b35      	ldr	r3, [pc, #212]	@ (8001164 <pvPortMallocMicroROS+0x17c>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001094:	429a      	cmp	r2, r3
 8001096:	d04c      	beq.n	8001132 <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001098:	6a3b      	ldr	r3, [r7, #32]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	2208      	movs	r2, #8
 800109e:	4413      	add	r3, r2
 80010a0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80010a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	6a3b      	ldr	r3, [r7, #32]
 80010a8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80010aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010ac:	685a      	ldr	r2, [r3, #4]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	1ad2      	subs	r2, r2, r3
 80010b2:	2308      	movs	r3, #8
 80010b4:	005b      	lsls	r3, r3, #1
 80010b6:	429a      	cmp	r2, r3
 80010b8:	d920      	bls.n	80010fc <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80010ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	4413      	add	r3, r2
 80010c0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80010c2:	69bb      	ldr	r3, [r7, #24]
 80010c4:	f003 0307 	and.w	r3, r3, #7
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d00b      	beq.n	80010e4 <pvPortMallocMicroROS+0xfc>
	__asm volatile
 80010cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80010d0:	f383 8811 	msr	BASEPRI, r3
 80010d4:	f3bf 8f6f 	isb	sy
 80010d8:	f3bf 8f4f 	dsb	sy
 80010dc:	613b      	str	r3, [r7, #16]
}
 80010de:	bf00      	nop
 80010e0:	bf00      	nop
 80010e2:	e7fd      	b.n	80010e0 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80010e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010e6:	685a      	ldr	r2, [r3, #4]
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	1ad2      	subs	r2, r2, r3
 80010ec:	69bb      	ldr	r3, [r7, #24]
 80010ee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80010f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010f2:	687a      	ldr	r2, [r7, #4]
 80010f4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80010f6:	69b8      	ldr	r0, [r7, #24]
 80010f8:	f000 f96c 	bl	80013d4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80010fc:	4b1b      	ldr	r3, [pc, #108]	@ (800116c <pvPortMallocMicroROS+0x184>)
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	1ad3      	subs	r3, r2, r3
 8001106:	4a19      	ldr	r2, [pc, #100]	@ (800116c <pvPortMallocMicroROS+0x184>)
 8001108:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800110a:	4b18      	ldr	r3, [pc, #96]	@ (800116c <pvPortMallocMicroROS+0x184>)
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	4b19      	ldr	r3, [pc, #100]	@ (8001174 <pvPortMallocMicroROS+0x18c>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	429a      	cmp	r2, r3
 8001114:	d203      	bcs.n	800111e <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001116:	4b15      	ldr	r3, [pc, #84]	@ (800116c <pvPortMallocMicroROS+0x184>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4a16      	ldr	r2, [pc, #88]	@ (8001174 <pvPortMallocMicroROS+0x18c>)
 800111c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800111e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001120:	685a      	ldr	r2, [r3, #4]
 8001122:	4b11      	ldr	r3, [pc, #68]	@ (8001168 <pvPortMallocMicroROS+0x180>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	431a      	orrs	r2, r3
 8001128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800112a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800112c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800112e:	2200      	movs	r2, #0
 8001130:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8001132:	f007 fe05 	bl	8008d40 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	f003 0307 	and.w	r3, r3, #7
 800113c:	2b00      	cmp	r3, #0
 800113e:	d00b      	beq.n	8001158 <pvPortMallocMicroROS+0x170>
	__asm volatile
 8001140:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001144:	f383 8811 	msr	BASEPRI, r3
 8001148:	f3bf 8f6f 	isb	sy
 800114c:	f3bf 8f4f 	dsb	sy
 8001150:	60fb      	str	r3, [r7, #12]
}
 8001152:	bf00      	nop
 8001154:	bf00      	nop
 8001156:	e7fd      	b.n	8001154 <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 8001158:	69fb      	ldr	r3, [r7, #28]
}
 800115a:	4618      	mov	r0, r3
 800115c:	3728      	adds	r7, #40	@ 0x28
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	2000a8d4 	.word	0x2000a8d4
 8001168:	2000a8e0 	.word	0x2000a8e0
 800116c:	2000a8d8 	.word	0x2000a8d8
 8001170:	2000a8cc 	.word	0x2000a8cc
 8001174:	2000a8dc 	.word	0x2000a8dc

08001178 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b086      	sub	sp, #24
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d04a      	beq.n	8001220 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800118a:	2308      	movs	r3, #8
 800118c:	425b      	negs	r3, r3
 800118e:	697a      	ldr	r2, [r7, #20]
 8001190:	4413      	add	r3, r2
 8001192:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	685a      	ldr	r2, [r3, #4]
 800119c:	4b22      	ldr	r3, [pc, #136]	@ (8001228 <vPortFreeMicroROS+0xb0>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4013      	ands	r3, r2
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d10b      	bne.n	80011be <vPortFreeMicroROS+0x46>
	__asm volatile
 80011a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80011aa:	f383 8811 	msr	BASEPRI, r3
 80011ae:	f3bf 8f6f 	isb	sy
 80011b2:	f3bf 8f4f 	dsb	sy
 80011b6:	60fb      	str	r3, [r7, #12]
}
 80011b8:	bf00      	nop
 80011ba:	bf00      	nop
 80011bc:	e7fd      	b.n	80011ba <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d00b      	beq.n	80011de <vPortFreeMicroROS+0x66>
	__asm volatile
 80011c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80011ca:	f383 8811 	msr	BASEPRI, r3
 80011ce:	f3bf 8f6f 	isb	sy
 80011d2:	f3bf 8f4f 	dsb	sy
 80011d6:	60bb      	str	r3, [r7, #8]
}
 80011d8:	bf00      	nop
 80011da:	bf00      	nop
 80011dc:	e7fd      	b.n	80011da <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	685a      	ldr	r2, [r3, #4]
 80011e2:	4b11      	ldr	r3, [pc, #68]	@ (8001228 <vPortFreeMicroROS+0xb0>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4013      	ands	r3, r2
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d019      	beq.n	8001220 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80011ec:	693b      	ldr	r3, [r7, #16]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d115      	bne.n	8001220 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	685a      	ldr	r2, [r3, #4]
 80011f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001228 <vPortFreeMicroROS+0xb0>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	43db      	mvns	r3, r3
 80011fe:	401a      	ands	r2, r3
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8001204:	f007 fd8e 	bl	8008d24 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	685a      	ldr	r2, [r3, #4]
 800120c:	4b07      	ldr	r3, [pc, #28]	@ (800122c <vPortFreeMicroROS+0xb4>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4413      	add	r3, r2
 8001212:	4a06      	ldr	r2, [pc, #24]	@ (800122c <vPortFreeMicroROS+0xb4>)
 8001214:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001216:	6938      	ldr	r0, [r7, #16]
 8001218:	f000 f8dc 	bl	80013d4 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800121c:	f007 fd90 	bl	8008d40 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8001220:	bf00      	nop
 8001222:	3718      	adds	r7, #24
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	2000a8e0 	.word	0x2000a8e0
 800122c:	2000a8d8 	.word	0x2000a8d8

08001230 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8001230:	b480      	push	{r7}
 8001232:	b087      	sub	sp, #28
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 800123c:	2308      	movs	r3, #8
 800123e:	425b      	negs	r3, r3
 8001240:	697a      	ldr	r2, [r7, #20]
 8001242:	4413      	add	r3, r2
 8001244:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	685a      	ldr	r2, [r3, #4]
 800124e:	4b06      	ldr	r3, [pc, #24]	@ (8001268 <getBlockSize+0x38>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	43db      	mvns	r3, r3
 8001254:	4013      	ands	r3, r2
 8001256:	60fb      	str	r3, [r7, #12]

	return count;
 8001258:	68fb      	ldr	r3, [r7, #12]
}
 800125a:	4618      	mov	r0, r3
 800125c:	371c      	adds	r7, #28
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	2000a8e0 	.word	0x2000a8e0

0800126c <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001276:	f007 fd55 	bl	8008d24 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 800127a:	6838      	ldr	r0, [r7, #0]
 800127c:	f7ff feb4 	bl	8000fe8 <pvPortMallocMicroROS>
 8001280:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8001282:	68bb      	ldr	r3, [r7, #8]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d017      	beq.n	80012b8 <pvPortReallocMicroROS+0x4c>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d014      	beq.n	80012b8 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	f7ff ffce 	bl	8001230 <getBlockSize>
 8001294:	4603      	mov	r3, r0
 8001296:	2208      	movs	r2, #8
 8001298:	1a9b      	subs	r3, r3, r2
 800129a:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 800129c:	683a      	ldr	r2, [r7, #0]
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	429a      	cmp	r2, r3
 80012a2:	d201      	bcs.n	80012a8 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 80012a8:	68fa      	ldr	r2, [r7, #12]
 80012aa:	6879      	ldr	r1, [r7, #4]
 80012ac:	68b8      	ldr	r0, [r7, #8]
 80012ae:	f01c f954 	bl	801d55a <memcpy>

		vPortFreeMicroROS(pv);
 80012b2:	6878      	ldr	r0, [r7, #4]
 80012b4:	f7ff ff60 	bl	8001178 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 80012b8:	f007 fd42 	bl	8008d40 <xTaskResumeAll>

	return newmem;
 80012bc:	68bb      	ldr	r3, [r7, #8]
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3710      	adds	r7, #16
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b086      	sub	sp, #24
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
 80012ce:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 80012d0:	f007 fd28 	bl	8008d24 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	687a      	ldr	r2, [r7, #4]
 80012d8:	fb02 f303 	mul.w	r3, r2, r3
 80012dc:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 80012de:	6978      	ldr	r0, [r7, #20]
 80012e0:	f7ff fe82 	bl	8000fe8 <pvPortMallocMicroROS>
 80012e4:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	613b      	str	r3, [r7, #16]

  	while(count--)
 80012ea:	e004      	b.n	80012f6 <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	1c5a      	adds	r2, r3, #1
 80012f0:	613a      	str	r2, [r7, #16]
 80012f2:	2200      	movs	r2, #0
 80012f4:	701a      	strb	r2, [r3, #0]
  	while(count--)
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	1e5a      	subs	r2, r3, #1
 80012fa:	617a      	str	r2, [r7, #20]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d1f5      	bne.n	80012ec <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8001300:	f007 fd1e 	bl	8008d40 <xTaskResumeAll>
  	return mem;
 8001304:	68fb      	ldr	r3, [r7, #12]
}
 8001306:	4618      	mov	r0, r3
 8001308:	3718      	adds	r7, #24
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
	...

08001310 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8001310:	b480      	push	{r7}
 8001312:	b085      	sub	sp, #20
 8001314:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001316:	f247 5330 	movw	r3, #30000	@ 0x7530
 800131a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800131c:	4b27      	ldr	r3, [pc, #156]	@ (80013bc <prvHeapInit+0xac>)
 800131e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	f003 0307 	and.w	r3, r3, #7
 8001326:	2b00      	cmp	r3, #0
 8001328:	d00c      	beq.n	8001344 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	3307      	adds	r3, #7
 800132e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	f023 0307 	bic.w	r3, r3, #7
 8001336:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001338:	68ba      	ldr	r2, [r7, #8]
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	4a1f      	ldr	r2, [pc, #124]	@ (80013bc <prvHeapInit+0xac>)
 8001340:	4413      	add	r3, r2
 8001342:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001348:	4a1d      	ldr	r2, [pc, #116]	@ (80013c0 <prvHeapInit+0xb0>)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800134e:	4b1c      	ldr	r3, [pc, #112]	@ (80013c0 <prvHeapInit+0xb0>)
 8001350:	2200      	movs	r2, #0
 8001352:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	68ba      	ldr	r2, [r7, #8]
 8001358:	4413      	add	r3, r2
 800135a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800135c:	2208      	movs	r2, #8
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	1a9b      	subs	r3, r3, r2
 8001362:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	f023 0307 	bic.w	r3, r3, #7
 800136a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	4a15      	ldr	r2, [pc, #84]	@ (80013c4 <prvHeapInit+0xb4>)
 8001370:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8001372:	4b14      	ldr	r3, [pc, #80]	@ (80013c4 <prvHeapInit+0xb4>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	2200      	movs	r2, #0
 8001378:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800137a:	4b12      	ldr	r3, [pc, #72]	@ (80013c4 <prvHeapInit+0xb4>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	2200      	movs	r2, #0
 8001380:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	68fa      	ldr	r2, [r7, #12]
 800138a:	1ad2      	subs	r2, r2, r3
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001390:	4b0c      	ldr	r3, [pc, #48]	@ (80013c4 <prvHeapInit+0xb4>)
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	4a0a      	ldr	r2, [pc, #40]	@ (80013c8 <prvHeapInit+0xb8>)
 800139e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	4a09      	ldr	r2, [pc, #36]	@ (80013cc <prvHeapInit+0xbc>)
 80013a6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80013a8:	4b09      	ldr	r3, [pc, #36]	@ (80013d0 <prvHeapInit+0xc0>)
 80013aa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80013ae:	601a      	str	r2, [r3, #0]
}
 80013b0:	bf00      	nop
 80013b2:	3714      	adds	r7, #20
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr
 80013bc:	2000339c 	.word	0x2000339c
 80013c0:	2000a8cc 	.word	0x2000a8cc
 80013c4:	2000a8d4 	.word	0x2000a8d4
 80013c8:	2000a8dc 	.word	0x2000a8dc
 80013cc:	2000a8d8 	.word	0x2000a8d8
 80013d0:	2000a8e0 	.word	0x2000a8e0

080013d4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80013d4:	b480      	push	{r7}
 80013d6:	b085      	sub	sp, #20
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80013dc:	4b28      	ldr	r3, [pc, #160]	@ (8001480 <prvInsertBlockIntoFreeList+0xac>)
 80013de:	60fb      	str	r3, [r7, #12]
 80013e0:	e002      	b.n	80013e8 <prvInsertBlockIntoFreeList+0x14>
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	60fb      	str	r3, [r7, #12]
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	687a      	ldr	r2, [r7, #4]
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d8f7      	bhi.n	80013e2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	68ba      	ldr	r2, [r7, #8]
 80013fc:	4413      	add	r3, r2
 80013fe:	687a      	ldr	r2, [r7, #4]
 8001400:	429a      	cmp	r2, r3
 8001402:	d108      	bne.n	8001416 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	685a      	ldr	r2, [r3, #4]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	441a      	add	r2, r3
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	68ba      	ldr	r2, [r7, #8]
 8001420:	441a      	add	r2, r3
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	429a      	cmp	r2, r3
 8001428:	d118      	bne.n	800145c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	4b15      	ldr	r3, [pc, #84]	@ (8001484 <prvInsertBlockIntoFreeList+0xb0>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	429a      	cmp	r2, r3
 8001434:	d00d      	beq.n	8001452 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	685a      	ldr	r2, [r3, #4]
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	441a      	add	r2, r3
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	601a      	str	r2, [r3, #0]
 8001450:	e008      	b.n	8001464 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001452:	4b0c      	ldr	r3, [pc, #48]	@ (8001484 <prvInsertBlockIntoFreeList+0xb0>)
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	601a      	str	r2, [r3, #0]
 800145a:	e003      	b.n	8001464 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001464:	68fa      	ldr	r2, [r7, #12]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	429a      	cmp	r2, r3
 800146a:	d002      	beq.n	8001472 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	687a      	ldr	r2, [r7, #4]
 8001470:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001472:	bf00      	nop
 8001474:	3714      	adds	r7, #20
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	2000a8cc 	.word	0x2000a8cc
 8001484:	2000a8d4 	.word	0x2000a8d4

08001488 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800148e:	2300      	movs	r3, #0
 8001490:	607b      	str	r3, [r7, #4]
 8001492:	4b10      	ldr	r3, [pc, #64]	@ (80014d4 <MX_DMA_Init+0x4c>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001496:	4a0f      	ldr	r2, [pc, #60]	@ (80014d4 <MX_DMA_Init+0x4c>)
 8001498:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800149c:	6313      	str	r3, [r2, #48]	@ 0x30
 800149e:	4b0d      	ldr	r3, [pc, #52]	@ (80014d4 <MX_DMA_Init+0x4c>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014a6:	607b      	str	r3, [r7, #4]
 80014a8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80014aa:	2200      	movs	r2, #0
 80014ac:	2105      	movs	r1, #5
 80014ae:	203a      	movs	r0, #58	@ 0x3a
 80014b0:	f002 fc6a 	bl	8003d88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80014b4:	203a      	movs	r0, #58	@ 0x3a
 80014b6:	f002 fc83 	bl	8003dc0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 80014ba:	2200      	movs	r2, #0
 80014bc:	2105      	movs	r1, #5
 80014be:	2046      	movs	r0, #70	@ 0x46
 80014c0:	f002 fc62 	bl	8003d88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80014c4:	2046      	movs	r0, #70	@ 0x46
 80014c6:	f002 fc7b 	bl	8003dc0 <HAL_NVIC_EnableIRQ>

}
 80014ca:	bf00      	nop
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	40023800 	.word	0x40023800

080014d8 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80014e6:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 80014e8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80014ec:	4904      	ldr	r1, [pc, #16]	@ (8001500 <cubemx_transport_open+0x28>)
 80014ee:	68f8      	ldr	r0, [r7, #12]
 80014f0:	f005 f8f4 	bl	80066dc <HAL_UART_Receive_DMA>
    return true;
 80014f4:	2301      	movs	r3, #1
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3710      	adds	r7, #16
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	2000a8e4 	.word	0x2000a8e4

08001504 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8001512:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8001514:	68f8      	ldr	r0, [r7, #12]
 8001516:	f005 f906 	bl	8006726 <HAL_UART_DMAStop>
    return true;
 800151a:	2301      	movs	r3, #1
}
 800151c:	4618      	mov	r0, r3
 800151e:	3710      	adds	r7, #16
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}

08001524 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8001524:	b580      	push	{r7, lr}
 8001526:	b086      	sub	sp, #24
 8001528:	af00      	add	r7, sp, #0
 800152a:	60f8      	str	r0, [r7, #12]
 800152c:	60b9      	str	r1, [r7, #8]
 800152e:	607a      	str	r2, [r7, #4]
 8001530:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8001538:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001540:	b2db      	uxtb	r3, r3
 8001542:	2b20      	cmp	r3, #32
 8001544:	d11c      	bne.n	8001580 <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	b29b      	uxth	r3, r3
 800154a:	461a      	mov	r2, r3
 800154c:	68b9      	ldr	r1, [r7, #8]
 800154e:	6978      	ldr	r0, [r7, #20]
 8001550:	f005 f848 	bl	80065e4 <HAL_UART_Transmit_DMA>
 8001554:	4603      	mov	r3, r0
 8001556:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001558:	e002      	b.n	8001560 <cubemx_transport_write+0x3c>
            osDelay(1);
 800155a:	2001      	movs	r0, #1
 800155c:	f006 fba0 	bl	8007ca0 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001560:	7cfb      	ldrb	r3, [r7, #19]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d105      	bne.n	8001572 <cubemx_transport_write+0x4e>
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800156c:	b2db      	uxtb	r3, r3
 800156e:	2b20      	cmp	r3, #32
 8001570:	d1f3      	bne.n	800155a <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 8001572:	7cfb      	ldrb	r3, [r7, #19]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d101      	bne.n	800157c <cubemx_transport_write+0x58>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	e002      	b.n	8001582 <cubemx_transport_write+0x5e>
 800157c:	2300      	movs	r3, #0
 800157e:	e000      	b.n	8001582 <cubemx_transport_write+0x5e>
    }else{
        return 0;
 8001580:	2300      	movs	r3, #0
    }
}
 8001582:	4618      	mov	r0, r3
 8001584:	3718      	adds	r7, #24
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
	...

0800158c <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 800158c:	b580      	push	{r7, lr}
 800158e:	b088      	sub	sp, #32
 8001590:	af00      	add	r7, sp, #0
 8001592:	60f8      	str	r0, [r7, #12]
 8001594:	60b9      	str	r1, [r7, #8]
 8001596:	607a      	str	r2, [r7, #4]
 8001598:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80015a0:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 80015a2:	2300      	movs	r3, #0
 80015a4:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015a6:	b672      	cpsid	i
}
 80015a8:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 80015b6:	4a1c      	ldr	r2, [pc, #112]	@ (8001628 <cubemx_transport_read+0x9c>)
 80015b8:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80015ba:	b662      	cpsie	i
}
 80015bc:	bf00      	nop
        __enable_irq();
        ms_used++;
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	3301      	adds	r3, #1
 80015c2:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 80015c4:	2001      	movs	r0, #1
 80015c6:	f006 fb6b 	bl	8007ca0 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 80015ca:	4b18      	ldr	r3, [pc, #96]	@ (800162c <cubemx_transport_read+0xa0>)
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	4b16      	ldr	r3, [pc, #88]	@ (8001628 <cubemx_transport_read+0x9c>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	429a      	cmp	r2, r3
 80015d4:	d103      	bne.n	80015de <cubemx_transport_read+0x52>
 80015d6:	69fa      	ldr	r2, [r7, #28]
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	429a      	cmp	r2, r3
 80015dc:	dbe3      	blt.n	80015a6 <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 80015de:	2300      	movs	r3, #0
 80015e0:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80015e2:	e011      	b.n	8001608 <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 80015e4:	4b11      	ldr	r3, [pc, #68]	@ (800162c <cubemx_transport_read+0xa0>)
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	68b9      	ldr	r1, [r7, #8]
 80015ea:	69bb      	ldr	r3, [r7, #24]
 80015ec:	440b      	add	r3, r1
 80015ee:	4910      	ldr	r1, [pc, #64]	@ (8001630 <cubemx_transport_read+0xa4>)
 80015f0:	5c8a      	ldrb	r2, [r1, r2]
 80015f2:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 80015f4:	4b0d      	ldr	r3, [pc, #52]	@ (800162c <cubemx_transport_read+0xa0>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	3301      	adds	r3, #1
 80015fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80015fe:	4a0b      	ldr	r2, [pc, #44]	@ (800162c <cubemx_transport_read+0xa0>)
 8001600:	6013      	str	r3, [r2, #0]
        wrote++;
 8001602:	69bb      	ldr	r3, [r7, #24]
 8001604:	3301      	adds	r3, #1
 8001606:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8001608:	4b08      	ldr	r3, [pc, #32]	@ (800162c <cubemx_transport_read+0xa0>)
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	4b06      	ldr	r3, [pc, #24]	@ (8001628 <cubemx_transport_read+0x9c>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	429a      	cmp	r2, r3
 8001612:	d003      	beq.n	800161c <cubemx_transport_read+0x90>
 8001614:	69ba      	ldr	r2, [r7, #24]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	429a      	cmp	r2, r3
 800161a:	d3e3      	bcc.n	80015e4 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 800161c:	69bb      	ldr	r3, [r7, #24]
}
 800161e:	4618      	mov	r0, r3
 8001620:	3720      	adds	r7, #32
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	2000b0e8 	.word	0x2000b0e8
 800162c:	2000b0e4 	.word	0x2000b0e4
 8001630:	2000a8e4 	.word	0x2000a8e4

08001634 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
extern "C" void MX_FREERTOS_Init(void) {
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001638:	4a04      	ldr	r2, [pc, #16]	@ (800164c <MX_FREERTOS_Init+0x18>)
 800163a:	2100      	movs	r1, #0
 800163c:	4804      	ldr	r0, [pc, #16]	@ (8001650 <MX_FREERTOS_Init+0x1c>)
 800163e:	f006 fa9d 	bl	8007b7c <osThreadNew>
 8001642:	4603      	mov	r3, r0
 8001644:	4a03      	ldr	r2, [pc, #12]	@ (8001654 <MX_FREERTOS_Init+0x20>)
 8001646:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001648:	bf00      	nop
 800164a:	bd80      	pop	{r7, pc}
 800164c:	0801e6a8 	.word	0x0801e6a8
 8001650:	08001659 	.word	0x08001659
 8001654:	2000b0f4 	.word	0x2000b0f4

08001658 <_Z16StartDefaultTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001658:	b5f0      	push	{r4, r5, r6, r7, lr}
 800165a:	f2ad 4d14 	subw	sp, sp, #1044	@ 0x414
 800165e:	af04      	add	r7, sp, #16
 8001660:	f507 6380 	add.w	r3, r7, #1024	@ 0x400
 8001664:	f5a3 7355 	sub.w	r3, r3, #852	@ 0x354
 8001668:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
	// micro-ROS configuration
	  rcl_ret_t rc;
	  HAL_IWDG_Refresh(&hiwdg);
 800166a:	4849      	ldr	r0, [pc, #292]	@ (8001790 <_Z16StartDefaultTaskPv+0x138>)
 800166c:	f003 f9c1 	bl	80049f2 <HAL_IWDG_Refresh>
	  rmw_uros_set_custom_transport(
 8001670:	4b48      	ldr	r3, [pc, #288]	@ (8001794 <_Z16StartDefaultTaskPv+0x13c>)
 8001672:	9301      	str	r3, [sp, #4]
 8001674:	4b48      	ldr	r3, [pc, #288]	@ (8001798 <_Z16StartDefaultTaskPv+0x140>)
 8001676:	9300      	str	r3, [sp, #0]
 8001678:	4b48      	ldr	r3, [pc, #288]	@ (800179c <_Z16StartDefaultTaskPv+0x144>)
 800167a:	4a49      	ldr	r2, [pc, #292]	@ (80017a0 <_Z16StartDefaultTaskPv+0x148>)
 800167c:	4949      	ldr	r1, [pc, #292]	@ (80017a4 <_Z16StartDefaultTaskPv+0x14c>)
 800167e:	2001      	movs	r0, #1
 8001680:	f00b fe56 	bl	800d330 <rmw_uros_set_custom_transport>
	    (void *) &huart1,
	    cubemx_transport_open,
	    cubemx_transport_close,
	    cubemx_transport_write,
	    cubemx_transport_read);
	  HAL_IWDG_Refresh(&hiwdg);
 8001684:	4842      	ldr	r0, [pc, #264]	@ (8001790 <_Z16StartDefaultTaskPv+0x138>)
 8001686:	f003 f9b4 	bl	80049f2 <HAL_IWDG_Refresh>
	  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 800168a:	f507 7376 	add.w	r3, r7, #984	@ 0x3d8
 800168e:	4618      	mov	r0, r3
 8001690:	f00b fd7a 	bl	800d188 <rcutils_get_zero_initialized_allocator>
	  freeRTOS_allocator.allocate = microros_allocate;
 8001694:	4b44      	ldr	r3, [pc, #272]	@ (80017a8 <_Z16StartDefaultTaskPv+0x150>)
 8001696:	f8c7 33d8 	str.w	r3, [r7, #984]	@ 0x3d8
	  freeRTOS_allocator.deallocate = microros_deallocate;
 800169a:	4b44      	ldr	r3, [pc, #272]	@ (80017ac <_Z16StartDefaultTaskPv+0x154>)
 800169c:	f8c7 33dc 	str.w	r3, [r7, #988]	@ 0x3dc
	  freeRTOS_allocator.reallocate = microros_reallocate;
 80016a0:	4b43      	ldr	r3, [pc, #268]	@ (80017b0 <_Z16StartDefaultTaskPv+0x158>)
 80016a2:	f8c7 33e0 	str.w	r3, [r7, #992]	@ 0x3e0
	  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 80016a6:	4b43      	ldr	r3, [pc, #268]	@ (80017b4 <_Z16StartDefaultTaskPv+0x15c>)
 80016a8:	f8c7 33e4 	str.w	r3, [r7, #996]	@ 0x3e4

	  if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 80016ac:	f507 7376 	add.w	r3, r7, #984	@ 0x3d8
 80016b0:	4618      	mov	r0, r3
 80016b2:	f00b fd85 	bl	800d1c0 <rcutils_set_default_allocator>
 80016b6:	4603      	mov	r3, r0
 80016b8:	f083 0301 	eor.w	r3, r3, #1
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d004      	beq.n	80016cc <_Z16StartDefaultTaskPv+0x74>
	      printf("Error on default allocators (line %d)\n", __LINE__);
 80016c2:	218b      	movs	r1, #139	@ 0x8b
 80016c4:	483c      	ldr	r0, [pc, #240]	@ (80017b8 <_Z16StartDefaultTaskPv+0x160>)
 80016c6:	f01b fe19 	bl	801d2fc <iprintf>
 80016ca:	e002      	b.n	80016d2 <_Z16StartDefaultTaskPv+0x7a>
	  } else HAL_IWDG_Refresh(&hiwdg);
 80016cc:	4830      	ldr	r0, [pc, #192]	@ (8001790 <_Z16StartDefaultTaskPv+0x138>)
 80016ce:	f003 f990 	bl	80049f2 <HAL_IWDG_Refresh>
	  nereo_interfaces__msg__CommandVelocity cmd_vel_msg;
	  sensor_msgs__msg__Imu imu_data_msg;
	  sensor_msgs__msg__FluidPressure fluid_pressure;
	  sensor_msgs__msg__Temperature water_temperature;

	  allocator = rcl_get_default_allocator();
 80016d2:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80016d6:	4618      	mov	r0, r3
 80016d8:	f00b fd64 	bl	800d1a4 <rcutils_get_default_allocator>
 80016dc:	f507 6380 	add.w	r3, r7, #1024	@ 0x400
 80016e0:	f5a3 735c 	sub.w	r3, r3, #880	@ 0x370
 80016e4:	f507 7464 	add.w	r4, r7, #912	@ 0x390
 80016e8:	461d      	mov	r5, r3
 80016ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016ee:	682b      	ldr	r3, [r5, #0]
 80016f0:	6023      	str	r3, [r4, #0]

	  //create init_options
	  rc = rclc_support_init(&support, 0, NULL, &allocator);
 80016f2:	f507 7364 	add.w	r3, r7, #912	@ 0x390
 80016f6:	f507 7069 	add.w	r0, r7, #932	@ 0x3a4
 80016fa:	2200      	movs	r2, #0
 80016fc:	2100      	movs	r1, #0
 80016fe:	f00b fc19 	bl	800cf34 <rclc_support_init>
 8001702:	f8c7 03f8 	str.w	r0, [r7, #1016]	@ 0x3f8
	  if (rc != RCL_RET_OK) printf("Error support init.\n");
 8001706:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 800170a:	2b00      	cmp	r3, #0
 800170c:	d003      	beq.n	8001716 <_Z16StartDefaultTaskPv+0xbe>
 800170e:	482b      	ldr	r0, [pc, #172]	@ (80017bc <_Z16StartDefaultTaskPv+0x164>)
 8001710:	f01b fe5c 	bl	801d3cc <puts>
 8001714:	e002      	b.n	800171c <_Z16StartDefaultTaskPv+0xc4>
	  else HAL_IWDG_Refresh(&hiwdg);
 8001716:	481e      	ldr	r0, [pc, #120]	@ (8001790 <_Z16StartDefaultTaskPv+0x138>)
 8001718:	f003 f96b 	bl	80049f2 <HAL_IWDG_Refresh>

	  // create node
	  rc = rclc_node_init_default(&node, "fc_node", "", &support);
 800171c:	f507 7369 	add.w	r3, r7, #932	@ 0x3a4
 8001720:	f507 7062 	add.w	r0, r7, #904	@ 0x388
 8001724:	4a26      	ldr	r2, [pc, #152]	@ (80017c0 <_Z16StartDefaultTaskPv+0x168>)
 8001726:	4927      	ldr	r1, [pc, #156]	@ (80017c4 <_Z16StartDefaultTaskPv+0x16c>)
 8001728:	f00b fc4e 	bl	800cfc8 <rclc_node_init_default>
 800172c:	f8c7 03f8 	str.w	r0, [r7, #1016]	@ 0x3f8
	  if (rc != RCL_RET_OK) printf("Error node init\n");
 8001730:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 8001734:	2b00      	cmp	r3, #0
 8001736:	d003      	beq.n	8001740 <_Z16StartDefaultTaskPv+0xe8>
 8001738:	4823      	ldr	r0, [pc, #140]	@ (80017c8 <_Z16StartDefaultTaskPv+0x170>)
 800173a:	f01b fe47 	bl	801d3cc <puts>
 800173e:	e002      	b.n	8001746 <_Z16StartDefaultTaskPv+0xee>
	  else HAL_IWDG_Refresh(&hiwdg);
 8001740:	4813      	ldr	r0, [pc, #76]	@ (8001790 <_Z16StartDefaultTaskPv+0x138>)
 8001742:	f003 f956 	bl	80049f2 <HAL_IWDG_Refresh>

	  executor = rclc_executor_get_zero_initialized_executor();
 8001746:	f507 6380 	add.w	r3, r7, #1024	@ 0x400
 800174a:	f5a3 7484 	sub.w	r4, r3, #264	@ 0x108
 800174e:	463b      	mov	r3, r7
 8001750:	4618      	mov	r0, r3
 8001752:	f00b f95b 	bl	800ca0c <rclc_executor_get_zero_initialized_executor>
 8001756:	f507 6380 	add.w	r3, r7, #1024	@ 0x400
 800175a:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 800175e:	4620      	mov	r0, r4
 8001760:	4619      	mov	r1, r3
 8001762:	2390      	movs	r3, #144	@ 0x90
 8001764:	461a      	mov	r2, r3
 8001766:	f01b fef8 	bl	801d55a <memcpy>
	  rc = rclc_executor_init(&executor, &support.context, NUMBER_SUBS_TIMS_SRVS, &allocator);
 800176a:	f507 7364 	add.w	r3, r7, #912	@ 0x390
 800176e:	f507 7169 	add.w	r1, r7, #932	@ 0x3a4
 8001772:	f507 703e 	add.w	r0, r7, #760	@ 0x2f8
 8001776:	220a      	movs	r2, #10
 8001778:	f00b f952 	bl	800ca20 <rclc_executor_init>
 800177c:	f8c7 03f8 	str.w	r0, [r7, #1016]	@ 0x3f8
	  if (rc != RCL_RET_OK) printf("Error executor init.\n");
 8001780:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 8001784:	2b00      	cmp	r3, #0
 8001786:	d023      	beq.n	80017d0 <_Z16StartDefaultTaskPv+0x178>
 8001788:	4810      	ldr	r0, [pc, #64]	@ (80017cc <_Z16StartDefaultTaskPv+0x174>)
 800178a:	f01b fe1f 	bl	801d3cc <puts>
 800178e:	e022      	b.n	80017d6 <_Z16StartDefaultTaskPv+0x17e>
 8001790:	2000b110 	.word	0x2000b110
 8001794:	0800158d 	.word	0x0800158d
 8001798:	08001525 	.word	0x08001525
 800179c:	08001505 	.word	0x08001505
 80017a0:	080014d9 	.word	0x080014d9
 80017a4:	2000b204 	.word	0x2000b204
 80017a8:	08002201 	.word	0x08002201
 80017ac:	08002245 	.word	0x08002245
 80017b0:	0800227d 	.word	0x0800227d
 80017b4:	080022e9 	.word	0x080022e9
 80017b8:	0801e43c 	.word	0x0801e43c
 80017bc:	0801e464 	.word	0x0801e464
 80017c0:	0801e478 	.word	0x0801e478
 80017c4:	0801e47c 	.word	0x0801e47c
 80017c8:	0801e484 	.word	0x0801e484
 80017cc:	0801e494 	.word	0x0801e494
	  else HAL_IWDG_Refresh(&hiwdg);
 80017d0:	48bc      	ldr	r0, [pc, #752]	@ (8001ac4 <_Z16StartDefaultTaskPv+0x46c>)
 80017d2:	f003 f90e 	bl	80049f2 <HAL_IWDG_Refresh>

	  // PUBLISHERS
	  rclc_publisher_init_best_effort(
 80017d6:	f00a f95f 	bl	800ba98 <rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses>
 80017da:	4602      	mov	r2, r0
 80017dc:	f507 7162 	add.w	r1, r7, #904	@ 0x388
 80017e0:	f507 703d 	add.w	r0, r7, #756	@ 0x2f4
 80017e4:	4bb8      	ldr	r3, [pc, #736]	@ (8001ac8 <_Z16StartDefaultTaskPv+0x470>)
 80017e6:	f00b fc2b 	bl	800d040 <rclc_publisher_init_best_effort>

	  // SUBSCRIBERS
	  static micro_ros_utilities_memory_conf_t default_conf = {0};

	  // IMU sub
	  rc = rclc_subscription_init_default(
 80017ea:	f00c fbdd 	bl	800dfa8 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>
 80017ee:	4602      	mov	r2, r0
 80017f0:	f507 7162 	add.w	r1, r7, #904	@ 0x388
 80017f4:	f507 7037 	add.w	r0, r7, #732	@ 0x2dc
 80017f8:	4bb4      	ldr	r3, [pc, #720]	@ (8001acc <_Z16StartDefaultTaskPv+0x474>)
 80017fa:	f00b fc89 	bl	800d110 <rclc_subscription_init_default>
 80017fe:	f8c7 03f8 	str.w	r0, [r7, #1016]	@ 0x3f8
			  &imu_subscriber,
			  &node,
			  ROSIDL_GET_MSG_TYPE_SUPPORT(sensor_msgs, msg, Imu),
			  "/imu_data");
	  if (rc != RCL_RET_OK) printf("Error imu sub init.\n");
 8001802:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 8001806:	2b00      	cmp	r3, #0
 8001808:	d002      	beq.n	8001810 <_Z16StartDefaultTaskPv+0x1b8>
 800180a:	48b1      	ldr	r0, [pc, #708]	@ (8001ad0 <_Z16StartDefaultTaskPv+0x478>)
 800180c:	f01b fdde 	bl	801d3cc <puts>
	  // initialize message memory
	  rc = !micro_ros_utilities_create_message_memory(ROSIDL_GET_MSG_TYPE_SUPPORT(sensor_msgs, msg, Imu), &imu_data_msg, default_conf);
 8001810:	f00c fbca 	bl	800dfa8 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>
 8001814:	4684      	mov	ip, r0
 8001816:	4caf      	ldr	r4, [pc, #700]	@ (8001ad4 <_Z16StartDefaultTaskPv+0x47c>)
 8001818:	f507 76bc 	add.w	r6, r7, #376	@ 0x178
 800181c:	466d      	mov	r5, sp
 800181e:	f104 0308 	add.w	r3, r4, #8
 8001822:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001824:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001828:	e894 000c 	ldmia.w	r4, {r2, r3}
 800182c:	4631      	mov	r1, r6
 800182e:	4660      	mov	r0, ip
 8001830:	f009 ffcc 	bl	800b7cc <micro_ros_utilities_create_message_memory>
 8001834:	4603      	mov	r3, r0
 8001836:	f083 0301 	eor.w	r3, r3, #1
 800183a:	b2db      	uxtb	r3, r3
 800183c:	f8c7 33f8 	str.w	r3, [r7, #1016]	@ 0x3f8

	  rc = rclc_executor_add_subscription(
 8001840:	f507 72bc 	add.w	r2, r7, #376	@ 0x178
 8001844:	f507 7137 	add.w	r1, r7, #732	@ 0x2dc
 8001848:	f507 703e 	add.w	r0, r7, #760	@ 0x2f8
 800184c:	2300      	movs	r3, #0
 800184e:	9300      	str	r3, [sp, #0]
 8001850:	4ba1      	ldr	r3, [pc, #644]	@ (8001ad8 <_Z16StartDefaultTaskPv+0x480>)
 8001852:	f00b f951 	bl	800caf8 <rclc_executor_add_subscription>
 8001856:	f8c7 03f8 	str.w	r0, [r7, #1016]	@ 0x3f8
			  &executor, &imu_subscriber,
			  &imu_data_msg, &imu_subscription_callback, ON_NEW_DATA);
	  if (rc != RCL_RET_OK) printf("Error executor add imu sub.\n");
 800185a:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 800185e:	2b00      	cmp	r3, #0
 8001860:	d002      	beq.n	8001868 <_Z16StartDefaultTaskPv+0x210>
 8001862:	489e      	ldr	r0, [pc, #632]	@ (8001adc <_Z16StartDefaultTaskPv+0x484>)
 8001864:	f01b fdb2 	bl	801d3cc <puts>

	  // CMD Vel sub
	  rc = rclc_subscription_init_default(
 8001868:	f00a f8d8 	bl	800ba1c <rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity>
 800186c:	4602      	mov	r2, r0
 800186e:	f507 7162 	add.w	r1, r7, #904	@ 0x388
 8001872:	f507 7038 	add.w	r0, r7, #736	@ 0x2e0
 8001876:	4b9a      	ldr	r3, [pc, #616]	@ (8001ae0 <_Z16StartDefaultTaskPv+0x488>)
 8001878:	f00b fc4a 	bl	800d110 <rclc_subscription_init_default>
 800187c:	f8c7 03f8 	str.w	r0, [r7, #1016]	@ 0x3f8
			  &cmd_vel_subscriber,
			  &node,
			  ROSIDL_GET_MSG_TYPE_SUPPORT(nereo_interfaces, msg, CommandVelocity),
			  "/nereo_cmd_vel");
	  if (rc != RCL_RET_OK) printf("Error cmdvel sub init.\n");
 8001880:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 8001884:	2b00      	cmp	r3, #0
 8001886:	d002      	beq.n	800188e <_Z16StartDefaultTaskPv+0x236>
 8001888:	4896      	ldr	r0, [pc, #600]	@ (8001ae4 <_Z16StartDefaultTaskPv+0x48c>)
 800188a:	f01b fd9f 	bl	801d3cc <puts>
	  // initialize message memory
	  rc = !micro_ros_utilities_create_message_memory(ROSIDL_GET_MSG_TYPE_SUPPORT(nereo_interfaces, msg, CommandVelocity), &cmd_vel_msg, default_conf);
 800188e:	f00a f8c5 	bl	800ba1c <rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity>
 8001892:	4684      	mov	ip, r0
 8001894:	4c8f      	ldr	r4, [pc, #572]	@ (8001ad4 <_Z16StartDefaultTaskPv+0x47c>)
 8001896:	f507 762f 	add.w	r6, r7, #700	@ 0x2bc
 800189a:	466d      	mov	r5, sp
 800189c:	f104 0308 	add.w	r3, r4, #8
 80018a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018a2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80018a6:	e894 000c 	ldmia.w	r4, {r2, r3}
 80018aa:	4631      	mov	r1, r6
 80018ac:	4660      	mov	r0, ip
 80018ae:	f009 ff8d 	bl	800b7cc <micro_ros_utilities_create_message_memory>
 80018b2:	4603      	mov	r3, r0
 80018b4:	f083 0301 	eor.w	r3, r3, #1
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	f8c7 33f8 	str.w	r3, [r7, #1016]	@ 0x3f8

	  rc = rclc_executor_add_subscription(
 80018be:	f507 722f 	add.w	r2, r7, #700	@ 0x2bc
 80018c2:	f507 7138 	add.w	r1, r7, #736	@ 0x2e0
 80018c6:	f507 703e 	add.w	r0, r7, #760	@ 0x2f8
 80018ca:	2300      	movs	r3, #0
 80018cc:	9300      	str	r3, [sp, #0]
 80018ce:	4b86      	ldr	r3, [pc, #536]	@ (8001ae8 <_Z16StartDefaultTaskPv+0x490>)
 80018d0:	f00b f912 	bl	800caf8 <rclc_executor_add_subscription>
 80018d4:	f8c7 03f8 	str.w	r0, [r7, #1016]	@ 0x3f8
			  &executor, &cmd_vel_subscriber,
			  &cmd_vel_msg, &cmd_vel_subscription_callback, ON_NEW_DATA);
	  if (rc != RCL_RET_OK) printf("Error executor add cmdvel sub.\n");
 80018d8:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d002      	beq.n	80018e6 <_Z16StartDefaultTaskPv+0x28e>
 80018e0:	4882      	ldr	r0, [pc, #520]	@ (8001aec <_Z16StartDefaultTaskPv+0x494>)
 80018e2:	f01b fd73 	bl	801d3cc <puts>

	  // SERVICES
	  rcl_service_t arm_disarm_srv_server;
	  std_srvs__srv__SetBool_Request set_arm_mode_reqin;
	  std_srvs__srv__SetBool_Response set_arm_mode_resout;
	  rc = rclc_service_init_default(
 80018e6:	f00c fe61 	bl	800e5ac <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__SetBool>
 80018ea:	4602      	mov	r2, r0
 80018ec:	f507 7162 	add.w	r1, r7, #904	@ 0x388
 80018f0:	f507 7092 	add.w	r0, r7, #292	@ 0x124
 80018f4:	4b7e      	ldr	r3, [pc, #504]	@ (8001af0 <_Z16StartDefaultTaskPv+0x498>)
 80018f6:	f00b fbd7 	bl	800d0a8 <rclc_service_init_default>
 80018fa:	f8c7 03f8 	str.w	r0, [r7, #1016]	@ 0x3f8
			  &arm_disarm_srv_server, &node,
			  ROSIDL_GET_SRV_TYPE_SUPPORT(std_srvs, srv, SetBool), "/set_rov_arm_mode");
	  if (rc != RCL_RET_OK) printf("Error armmode srv init.\n");
 80018fe:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 8001902:	2b00      	cmp	r3, #0
 8001904:	d002      	beq.n	800190c <_Z16StartDefaultTaskPv+0x2b4>
 8001906:	487b      	ldr	r0, [pc, #492]	@ (8001af4 <_Z16StartDefaultTaskPv+0x49c>)
 8001908:	f01b fd60 	bl	801d3cc <puts>
	  rc = rclc_executor_add_service(
 800190c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001910:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8001914:	f507 7192 	add.w	r1, r7, #292	@ 0x124
 8001918:	f507 703e 	add.w	r0, r7, #760	@ 0x2f8
 800191c:	4c76      	ldr	r4, [pc, #472]	@ (8001af8 <_Z16StartDefaultTaskPv+0x4a0>)
 800191e:	9400      	str	r4, [sp, #0]
 8001920:	f00b f91e 	bl	800cb60 <rclc_executor_add_service>
 8001924:	f8c7 03f8 	str.w	r0, [r7, #1016]	@ 0x3f8
			  &executor, &arm_disarm_srv_server, &set_arm_mode_reqin,
			  &set_arm_mode_resout, &arm_disarm_service_callback);
	  if (rc != RCL_RET_OK) printf("Error exec add armmode srv.\n");
 8001928:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 800192c:	2b00      	cmp	r3, #0
 800192e:	d002      	beq.n	8001936 <_Z16StartDefaultTaskPv+0x2de>
 8001930:	4872      	ldr	r0, [pc, #456]	@ (8001afc <_Z16StartDefaultTaskPv+0x4a4>)
 8001932:	f01b fd4b 	bl	801d3cc <puts>

	  rcl_service_t nav_mode_srv_server;
	  nereo_interfaces__srv__SetNavigationMode_Request set_navigation_mode_reqin;
	  nereo_interfaces__srv__SetNavigationMode_Response set_navigation_mode_resout;
	  rc = rclc_service_init_default(
 8001936:	f00a f889 	bl	800ba4c <rosidl_typesupport_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode>
 800193a:	4602      	mov	r2, r0
 800193c:	f507 7162 	add.w	r1, r7, #904	@ 0x388
 8001940:	f507 7086 	add.w	r0, r7, #268	@ 0x10c
 8001944:	4b6e      	ldr	r3, [pc, #440]	@ (8001b00 <_Z16StartDefaultTaskPv+0x4a8>)
 8001946:	f00b fbaf 	bl	800d0a8 <rclc_service_init_default>
 800194a:	f8c7 03f8 	str.w	r0, [r7, #1016]	@ 0x3f8
			  &nav_mode_srv_server, &node,
			  ROSIDL_GET_SRV_TYPE_SUPPORT(nereo_interfaces, srv, SetNavigationMode), "/set_rov_navigation_mode");
	  if (rc != RCL_RET_OK) printf("Error navmode srv init.\n");
 800194e:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 8001952:	2b00      	cmp	r3, #0
 8001954:	d002      	beq.n	800195c <_Z16StartDefaultTaskPv+0x304>
 8001956:	486b      	ldr	r0, [pc, #428]	@ (8001b04 <_Z16StartDefaultTaskPv+0x4ac>)
 8001958:	f01b fd38 	bl	801d3cc <puts>
	  rc = rclc_executor_add_service(
 800195c:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8001960:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 8001964:	f507 7186 	add.w	r1, r7, #268	@ 0x10c
 8001968:	f507 703e 	add.w	r0, r7, #760	@ 0x2f8
 800196c:	4c66      	ldr	r4, [pc, #408]	@ (8001b08 <_Z16StartDefaultTaskPv+0x4b0>)
 800196e:	9400      	str	r4, [sp, #0]
 8001970:	f00b f8f6 	bl	800cb60 <rclc_executor_add_service>
 8001974:	f8c7 03f8 	str.w	r0, [r7, #1016]	@ 0x3f8
			  &executor, &nav_mode_srv_server, &set_navigation_mode_reqin,
			  &set_navigation_mode_resout, &set_nav_mode_service_callback);
	  if (rc != RCL_RET_OK) printf("Error exec addset_nav_mode srv.\n");
 8001978:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 800197c:	2b00      	cmp	r3, #0
 800197e:	d002      	beq.n	8001986 <_Z16StartDefaultTaskPv+0x32e>
 8001980:	4862      	ldr	r0, [pc, #392]	@ (8001b0c <_Z16StartDefaultTaskPv+0x4b4>)
 8001982:	f01b fd23 	bl	801d3cc <puts>

	  // END MICRO ROS INIT
	  printf("Micro ROS initialization done.\n");
 8001986:	4862      	ldr	r0, [pc, #392]	@ (8001b10 <_Z16StartDefaultTaskPv+0x4b8>)
 8001988:	f01b fd20 	bl	801d3cc <puts>

	  uint32_t pwm_output[8] = {1500};
 800198c:	f507 6380 	add.w	r3, r7, #1024	@ 0x400
 8001990:	f5a3 7347 	sub.w	r3, r3, #796	@ 0x31c
 8001994:	4618      	mov	r0, r3
 8001996:	2320      	movs	r3, #32
 8001998:	461a      	mov	r2, r3
 800199a:	2100      	movs	r1, #0
 800199c:	f01b fd48 	bl	801d430 <memset>
 80019a0:	f507 6380 	add.w	r3, r7, #1024	@ 0x400
 80019a4:	f5a3 7347 	sub.w	r3, r3, #796	@ 0x31c
 80019a8:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80019ac:	601a      	str	r2, [r3, #0]
	  arm_status pwm_computation_error = ARM_MATH_SUCCESS;
 80019ae:	2300      	movs	r3, #0
 80019b0:	f887 33f7 	strb.w	r3, [r7, #1015]	@ 0x3f7

	  // PID INIT

	  float kps[PID_NUMBER] = {0, 0, 0, 0};
 80019b4:	f507 6380 	add.w	r3, r7, #1024	@ 0x400
 80019b8:	f5a3 734b 	sub.w	r3, r3, #812	@ 0x32c
 80019bc:	461a      	mov	r2, r3
 80019be:	2300      	movs	r3, #0
 80019c0:	6013      	str	r3, [r2, #0]
 80019c2:	6053      	str	r3, [r2, #4]
 80019c4:	6093      	str	r3, [r2, #8]
 80019c6:	60d3      	str	r3, [r2, #12]
	  float kis[PID_NUMBER] = {0, 0, 0, 0};
 80019c8:	f507 6380 	add.w	r3, r7, #1024	@ 0x400
 80019cc:	f5a3 734f 	sub.w	r3, r3, #828	@ 0x33c
 80019d0:	461a      	mov	r2, r3
 80019d2:	2300      	movs	r3, #0
 80019d4:	6013      	str	r3, [r2, #0]
 80019d6:	6053      	str	r3, [r2, #4]
 80019d8:	6093      	str	r3, [r2, #8]
 80019da:	60d3      	str	r3, [r2, #12]
	  float kds[PID_NUMBER] = {0, 0, 0, 0};
 80019dc:	f507 6380 	add.w	r3, r7, #1024	@ 0x400
 80019e0:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 80019e4:	461a      	mov	r2, r3
 80019e6:	2300      	movs	r3, #0
 80019e8:	6013      	str	r3, [r2, #0]
 80019ea:	6053      	str	r3, [r2, #4]
 80019ec:	6093      	str	r3, [r2, #8]
 80019ee:	60d3      	str	r3, [r2, #12]
	  //init_pids(kps, kis, kds); // sw pids
	  //controllers_init(); // cs controllers

	  while(1)
	  {
		uint32_t time_ms = HAL_GetTick();
 80019f0:	f002 f906 	bl	8003c00 <HAL_GetTick>
 80019f4:	f8c7 03f0 	str.w	r0, [r7, #1008]	@ 0x3f0
		//printf("Free heap: %d.\n", xPortGetFreeHeapSize());
		// Spin executor once to receive requests and update messages
		rc = rclc_executor_spin_some(&executor, 10000000);
 80019f8:	f507 713e 	add.w	r1, r7, #760	@ 0x2f8
 80019fc:	4a45      	ldr	r2, [pc, #276]	@ (8001b14 <_Z16StartDefaultTaskPv+0x4bc>)
 80019fe:	f04f 0300 	mov.w	r3, #0
 8001a02:	4608      	mov	r0, r1
 8001a04:	f00b f930 	bl	800cc68 <rclc_executor_spin_some>
 8001a08:	f8c7 03f8 	str.w	r0, [r7, #1016]	@ 0x3f8

	    if (rov_arm_mode == ROV_ARMED)
 8001a0c:	4b42      	ldr	r3, [pc, #264]	@ (8001b18 <_Z16StartDefaultTaskPv+0x4c0>)
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	bf0c      	ite	eq
 8001a16:	2301      	moveq	r3, #1
 8001a18:	2300      	movne	r3, #0
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d04a      	beq.n	8001ab6 <_Z16StartDefaultTaskPv+0x45e>
	    {
	    	switch (navigation_mode) {
 8001a20:	4b3e      	ldr	r3, [pc, #248]	@ (8001b1c <_Z16StartDefaultTaskPv+0x4c4>)
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d002      	beq.n	8001a30 <_Z16StartDefaultTaskPv+0x3d8>
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d00c      	beq.n	8001a48 <_Z16StartDefaultTaskPv+0x3f0>
 8001a2e:	e01e      	b.n	8001a6e <_Z16StartDefaultTaskPv+0x416>
	    		case NAVIGATION_MODE_MANUAL:
	    			pwm_computation_error = calculate_pwm(cmd_vel_msg.cmd_vel, pwm_output);
 8001a30:	f107 02e4 	add.w	r2, r7, #228	@ 0xe4
 8001a34:	f507 732f 	add.w	r3, r7, #700	@ 0x2bc
 8001a38:	4611      	mov	r1, r2
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f001 f9b8 	bl	8002db0 <calculate_pwm>
 8001a40:	4603      	mov	r3, r0
 8001a42:	f887 33f7 	strb.w	r3, [r7, #1015]	@ 0x3f7
	    			break;
 8001a46:	e02a      	b.n	8001a9e <_Z16StartDefaultTaskPv+0x446>
	    		case NAVIGATION_MODE_STABILIZE_FULL:
	    			pwm_computation_error = calculate_pwm_with_pid(cmd_vel_msg.cmd_vel, pwm_output,
 8001a48:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8001a4c:	f103 0418 	add.w	r4, r3, #24
 8001a50:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001a54:	f103 0218 	add.w	r2, r3, #24
 8001a58:	f107 01e4 	add.w	r1, r7, #228	@ 0xe4
 8001a5c:	f507 702f 	add.w	r0, r7, #700	@ 0x2bc
 8001a60:	4623      	mov	r3, r4
 8001a62:	f001 fdc1 	bl	80035e8 <calculate_pwm_with_pid>
 8001a66:	4603      	mov	r3, r0
 8001a68:	f887 33f7 	strb.w	r3, [r7, #1015]	@ 0x3f7
	    					(Quaternion *)&imu_data_msg.orientation,
							(float *)&fluid_pressure.fluid_pressure);
	    			break;
 8001a6c:	e017      	b.n	8001a9e <_Z16StartDefaultTaskPv+0x446>
	    			//pwm_computation_error = calculate_pwm_cs_controller(cmd_vel_msg.cmd_vel, pwm_output,
	    			//		(Quaternion *)&imu_data_msg.orientation,
					//		(float *)&fluid_pressure.fluid_pressure);
	    			//break;
	    		default:
	    			for(uint8_t i = 0; i < 8; i++) pwm_output[i] = 1500;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	f887 33ff 	strb.w	r3, [r7, #1023]	@ 0x3ff
 8001a74:	e00e      	b.n	8001a94 <_Z16StartDefaultTaskPv+0x43c>
 8001a76:	f897 23ff 	ldrb.w	r2, [r7, #1023]	@ 0x3ff
 8001a7a:	f507 6380 	add.w	r3, r7, #1024	@ 0x400
 8001a7e:	f5a3 7347 	sub.w	r3, r3, #796	@ 0x31c
 8001a82:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 8001a86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001a8a:	f897 33ff 	ldrb.w	r3, [r7, #1023]	@ 0x3ff
 8001a8e:	3301      	adds	r3, #1
 8001a90:	f887 33ff 	strb.w	r3, [r7, #1023]	@ 0x3ff
 8001a94:	f897 33ff 	ldrb.w	r3, [r7, #1023]	@ 0x3ff
 8001a98:	2b07      	cmp	r3, #7
 8001a9a:	d9ec      	bls.n	8001a76 <_Z16StartDefaultTaskPv+0x41e>
	    			break;
 8001a9c:	bf00      	nop
	    	}
	    	clamp_pwm_output(pwm_output, 8);
 8001a9e:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001aa2:	2108      	movs	r1, #8
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f000 f8c5 	bl	8001c34 <clamp_pwm_output>
	    	set_pwms(pwm_output);
 8001aaa:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f000 f880 	bl	8001bb4 <set_pwms>
 8001ab4:	e001      	b.n	8001aba <_Z16StartDefaultTaskPv+0x462>
	    } else set_pwm_idle();
 8001ab6:	f000 f88f 	bl	8001bd8 <set_pwm_idle>

	    for(uint8_t i = 0; i < 8; i++) thruster_status_msg.thruster_pwms[i] = pwm_output[i];
 8001aba:	2300      	movs	r3, #0
 8001abc:	f887 33fe 	strb.w	r3, [r7, #1022]	@ 0x3fe
 8001ac0:	e044      	b.n	8001b4c <_Z16StartDefaultTaskPv+0x4f4>
 8001ac2:	bf00      	nop
 8001ac4:	2000b110 	.word	0x2000b110
 8001ac8:	0801e4ac 	.word	0x0801e4ac
 8001acc:	0801e4c0 	.word	0x0801e4c0
 8001ad0:	0801e4cc 	.word	0x0801e4cc
 8001ad4:	2000b0f8 	.word	0x2000b0f8
 8001ad8:	08001ca5 	.word	0x08001ca5
 8001adc:	0801e4e0 	.word	0x0801e4e0
 8001ae0:	0801e4fc 	.word	0x0801e4fc
 8001ae4:	0801e50c 	.word	0x0801e50c
 8001ae8:	08001cc1 	.word	0x08001cc1
 8001aec:	0801e524 	.word	0x0801e524
 8001af0:	0801e544 	.word	0x0801e544
 8001af4:	0801e558 	.word	0x0801e558
 8001af8:	08001cdd 	.word	0x08001cdd
 8001afc:	0801e570 	.word	0x0801e570
 8001b00:	0801e58c 	.word	0x0801e58c
 8001b04:	0801e5a8 	.word	0x0801e5a8
 8001b08:	08001d3d 	.word	0x08001d3d
 8001b0c:	0801e5c0 	.word	0x0801e5c0
 8001b10:	0801e5e0 	.word	0x0801e5e0
 8001b14:	00989680 	.word	0x00989680
 8001b18:	2000b0ec 	.word	0x2000b0ec
 8001b1c:	2000b0ed 	.word	0x2000b0ed
 8001b20:	f897 23fe 	ldrb.w	r2, [r7, #1022]	@ 0x3fe
 8001b24:	f507 6380 	add.w	r3, r7, #1024	@ 0x400
 8001b28:	f5a3 7347 	sub.w	r3, r3, #796	@ 0x31c
 8001b2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b30:	f897 23fe 	ldrb.w	r2, [r7, #1022]	@ 0x3fe
 8001b34:	b299      	uxth	r1, r3
 8001b36:	f507 6380 	add.w	r3, r7, #1024	@ 0x400
 8001b3a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001b3e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8001b42:	f897 33fe 	ldrb.w	r3, [r7, #1022]	@ 0x3fe
 8001b46:	3301      	adds	r3, #1
 8001b48:	f887 33fe 	strb.w	r3, [r7, #1022]	@ 0x3fe
 8001b4c:	f897 33fe 	ldrb.w	r3, [r7, #1022]	@ 0x3fe
 8001b50:	2b07      	cmp	r3, #7
 8001b52:	d9e5      	bls.n	8001b20 <_Z16StartDefaultTaskPv+0x4c8>
	    rc = rcl_publish(&thruster_status_publisher, &thruster_status_msg, NULL);
 8001b54:	f507 7139 	add.w	r1, r7, #740	@ 0x2e4
 8001b58:	f507 733d 	add.w	r3, r7, #756	@ 0x2f4
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f00a fbac 	bl	800c2bc <rcl_publish>
 8001b64:	f8c7 03f8 	str.w	r0, [r7, #1016]	@ 0x3f8
	    if(rc!=RCL_RET_OK) printf("Error publishing (line %d)\n", __LINE__);
 8001b68:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d005      	beq.n	8001b7c <_Z16StartDefaultTaskPv+0x524>
 8001b70:	f240 1127 	movw	r1, #295	@ 0x127
 8001b74:	480d      	ldr	r0, [pc, #52]	@ (8001bac <_Z16StartDefaultTaskPv+0x554>)
 8001b76:	f01b fbc1 	bl	801d2fc <iprintf>
 8001b7a:	e002      	b.n	8001b82 <_Z16StartDefaultTaskPv+0x52a>
	    else HAL_IWDG_Refresh(&hiwdg);
 8001b7c:	480c      	ldr	r0, [pc, #48]	@ (8001bb0 <_Z16StartDefaultTaskPv+0x558>)
 8001b7e:	f002 ff38 	bl	80049f2 <HAL_IWDG_Refresh>

	    uint32_t elapsed_time = HAL_GetTick() - time_ms;
 8001b82:	f002 f83d 	bl	8003c00 <HAL_GetTick>
 8001b86:	4602      	mov	r2, r0
 8001b88:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	@ 0x3f0
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec
	    if (elapsed_time < TS_DEFAULT_TASK_MS) osDelay(TS_DEFAULT_TASK_MS - elapsed_time);
 8001b92:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	@ 0x3ec
 8001b96:	2b18      	cmp	r3, #24
 8001b98:	f63f af2a 	bhi.w	80019f0 <_Z16StartDefaultTaskPv+0x398>
 8001b9c:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	@ 0x3ec
 8001ba0:	f1c3 0319 	rsb	r3, r3, #25
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f006 f87b 	bl	8007ca0 <osDelay>
	  }
 8001baa:	e721      	b.n	80019f0 <_Z16StartDefaultTaskPv+0x398>
 8001bac:	0801e600 	.word	0x0801e600
 8001bb0:	2000b110 	.word	0x2000b110

08001bb4 <set_pwms>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void inline set_pwms(uint32_t pwms[8])
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
	//TIM2 -> CCR1 = pwms[2] + OPTOCOUPLER_INTRODUCED_OFFSET_uS; // tim2 ccr1
	//TIM3 -> CCR2 = pwms[3] + OPTOCOUPLER_INTRODUCED_OFFSET_uS;
	// VERTICAL THRUSTERS
	//TIM2 -> CCR3 = pwms[4] + OPTOCOUPLER_INTRODUCED_OFFSET_uS; // tim2 ccr3
	//TIM3 -> CCR3 = pwms[5] + OPTOCOUPLER_INTRODUCED_OFFSET_uS; // tim3 ccr3
	TIM2 -> CCR4 = pwms[6] + OPTOCOUPLER_INTRODUCED_OFFSET_uS;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	3318      	adds	r3, #24
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001bc6:	3332      	adds	r3, #50	@ 0x32
 8001bc8:	6413      	str	r3, [r2, #64]	@ 0x40
	//TIM3 -> CCR1 = pwms[7] + OPTOCOUPLER_INTRODUCED_OFFSET_uS;
}
 8001bca:	bf00      	nop
 8001bcc:	370c      	adds	r7, #12
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
	...

08001bd8 <set_pwm_idle>:
void inline set_pwm_idle()
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
	TIM2 -> CCR1 = PWM_IDLE + OPTOCOUPLER_INTRODUCED_OFFSET_uS;
 8001bdc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001be0:	f240 620e 	movw	r2, #1550	@ 0x60e
 8001be4:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM2 -> CCR2 = PWM_IDLE + OPTOCOUPLER_INTRODUCED_OFFSET_uS;
 8001be6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001bea:	f240 620e 	movw	r2, #1550	@ 0x60e
 8001bee:	639a      	str	r2, [r3, #56]	@ 0x38
	TIM2 -> CCR3 = PWM_IDLE + OPTOCOUPLER_INTRODUCED_OFFSET_uS;
 8001bf0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001bf4:	f240 620e 	movw	r2, #1550	@ 0x60e
 8001bf8:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM2 -> CCR4 = PWM_IDLE + OPTOCOUPLER_INTRODUCED_OFFSET_uS;
 8001bfa:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001bfe:	f240 620e 	movw	r2, #1550	@ 0x60e
 8001c02:	641a      	str	r2, [r3, #64]	@ 0x40
	TIM3 -> CCR1 = PWM_IDLE + OPTOCOUPLER_INTRODUCED_OFFSET_uS;
 8001c04:	4b0a      	ldr	r3, [pc, #40]	@ (8001c30 <set_pwm_idle+0x58>)
 8001c06:	f240 620e 	movw	r2, #1550	@ 0x60e
 8001c0a:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM3 -> CCR2 = PWM_IDLE + OPTOCOUPLER_INTRODUCED_OFFSET_uS;
 8001c0c:	4b08      	ldr	r3, [pc, #32]	@ (8001c30 <set_pwm_idle+0x58>)
 8001c0e:	f240 620e 	movw	r2, #1550	@ 0x60e
 8001c12:	639a      	str	r2, [r3, #56]	@ 0x38
	TIM3 -> CCR3 = PWM_IDLE + OPTOCOUPLER_INTRODUCED_OFFSET_uS;
 8001c14:	4b06      	ldr	r3, [pc, #24]	@ (8001c30 <set_pwm_idle+0x58>)
 8001c16:	f240 620e 	movw	r2, #1550	@ 0x60e
 8001c1a:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM3 -> CCR4 = PWM_IDLE + OPTOCOUPLER_INTRODUCED_OFFSET_uS;
 8001c1c:	4b04      	ldr	r3, [pc, #16]	@ (8001c30 <set_pwm_idle+0x58>)
 8001c1e:	f240 620e 	movw	r2, #1550	@ 0x60e
 8001c22:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001c24:	bf00      	nop
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	40000400 	.word	0x40000400

08001c34 <clamp_pwm_output>:
void clamp_pwm_output(uint32_t pwms[], int N) {
 8001c34:	b480      	push	{r7}
 8001c36:	b085      	sub	sp, #20
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
 8001c3c:	6039      	str	r1, [r7, #0]
	for(uint16_t i = 0; i < N; i++) {
 8001c3e:	2300      	movs	r3, #0
 8001c40:	81fb      	strh	r3, [r7, #14]
 8001c42:	e023      	b.n	8001c8c <clamp_pwm_output+0x58>
		if (pwms[i] < PWM_MIN)
 8001c44:	89fb      	ldrh	r3, [r7, #14]
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	687a      	ldr	r2, [r7, #4]
 8001c4a:	4413      	add	r3, r2
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f240 5231 	movw	r2, #1329	@ 0x531
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d807      	bhi.n	8001c66 <clamp_pwm_output+0x32>
			pwms[i] = PWM_MIN;
 8001c56:	89fb      	ldrh	r3, [r7, #14]
 8001c58:	009b      	lsls	r3, r3, #2
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	4413      	add	r3, r2
 8001c5e:	f240 5232 	movw	r2, #1330	@ 0x532
 8001c62:	601a      	str	r2, [r3, #0]
 8001c64:	e00f      	b.n	8001c86 <clamp_pwm_output+0x52>
		else if (pwms[i] > PWM_MAX)
 8001c66:	89fb      	ldrh	r3, [r7, #14]
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	687a      	ldr	r2, [r7, #4]
 8001c6c:	4413      	add	r3, r2
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f240 6286 	movw	r2, #1670	@ 0x686
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d906      	bls.n	8001c86 <clamp_pwm_output+0x52>
			pwms[i] = PWM_MAX;
 8001c78:	89fb      	ldrh	r3, [r7, #14]
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	687a      	ldr	r2, [r7, #4]
 8001c7e:	4413      	add	r3, r2
 8001c80:	f240 6286 	movw	r2, #1670	@ 0x686
 8001c84:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < N; i++) {
 8001c86:	89fb      	ldrh	r3, [r7, #14]
 8001c88:	3301      	adds	r3, #1
 8001c8a:	81fb      	strh	r3, [r7, #14]
 8001c8c:	89fb      	ldrh	r3, [r7, #14]
 8001c8e:	683a      	ldr	r2, [r7, #0]
 8001c90:	429a      	cmp	r2, r3
 8001c92:	dcd7      	bgt.n	8001c44 <clamp_pwm_output+0x10>
	}
}
 8001c94:	bf00      	nop
 8001c96:	bf00      	nop
 8001c98:	3714      	adds	r7, #20
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
	...

08001ca4 <imu_subscription_callback>:

    pid->A0 = pid->Kp + pid->Ki + pid->Kd;
    pid->A1 = -pid->Kp - 2 * pid->Kd;
    pid->A2 = pid->Kd;
}
void imu_subscription_callback(const void * msgin) {
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
	HAL_IWDG_Refresh(&hiwdg);
 8001cac:	4803      	ldr	r0, [pc, #12]	@ (8001cbc <imu_subscription_callback+0x18>)
 8001cae:	f002 fea0 	bl	80049f2 <HAL_IWDG_Refresh>
}
 8001cb2:	bf00      	nop
 8001cb4:	3708      	adds	r7, #8
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	2000b110 	.word	0x2000b110

08001cc0 <cmd_vel_subscription_callback>:
void cmd_vel_subscription_callback (const void * msgin) {
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
	HAL_IWDG_Refresh(&hiwdg);
 8001cc8:	4803      	ldr	r0, [pc, #12]	@ (8001cd8 <cmd_vel_subscription_callback+0x18>)
 8001cca:	f002 fe92 	bl	80049f2 <HAL_IWDG_Refresh>
}
 8001cce:	bf00      	nop
 8001cd0:	3708      	adds	r7, #8
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	2000b110 	.word	0x2000b110

08001cdc <arm_disarm_service_callback>:
void arm_disarm_service_callback(const void * request_msg, void * response_msg) {
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b084      	sub	sp, #16
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	6039      	str	r1, [r7, #0]
	//HAL_IWDG_Refresh(&hiwdg);
	std_srvs__srv__SetBool_Request * req_in = (std_srvs__srv__SetBool_Request *) request_msg;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	60fb      	str	r3, [r7, #12]
	std_srvs__srv__SetBool_Response * res_in = (std_srvs__srv__SetBool_Response *) response_msg;
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	60bb      	str	r3, [r7, #8]
	rov_arm_mode = req_in->data ? ROV_ARMED : ROV_DISARMED;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d001      	beq.n	8001cfa <arm_disarm_service_callback+0x1e>
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	e000      	b.n	8001cfc <arm_disarm_service_callback+0x20>
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	4b0c      	ldr	r3, [pc, #48]	@ (8001d30 <arm_disarm_service_callback+0x54>)
 8001cfe:	701a      	strb	r2, [r3, #0]
	printf("%d: arm mode.\n", (int)rov_arm_mode);
 8001d00:	4b0b      	ldr	r3, [pc, #44]	@ (8001d30 <arm_disarm_service_callback+0x54>)
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	4619      	mov	r1, r3
 8001d08:	480a      	ldr	r0, [pc, #40]	@ (8001d34 <arm_disarm_service_callback+0x58>)
 8001d0a:	f01b faf7 	bl	801d2fc <iprintf>
	res_in->success = true;
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	2201      	movs	r2, #1
 8001d12:	701a      	strb	r2, [r3, #0]
	res_in->message.capacity = 2;
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	2202      	movs	r2, #2
 8001d18:	60da      	str	r2, [r3, #12]
	res_in->message.size = strlen(empty_string);
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	609a      	str	r2, [r3, #8]
	res_in->message.data = empty_string;
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	4a05      	ldr	r2, [pc, #20]	@ (8001d38 <arm_disarm_service_callback+0x5c>)
 8001d24:	605a      	str	r2, [r3, #4]
}
 8001d26:	bf00      	nop
 8001d28:	3710      	adds	r7, #16
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	2000b0ec 	.word	0x2000b0ec
 8001d34:	0801e61c 	.word	0x0801e61c
 8001d38:	2000b0f0 	.word	0x2000b0f0

08001d3c <set_nav_mode_service_callback>:
void set_nav_mode_service_callback(const void * request_msg, void * response_msg) {
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b084      	sub	sp, #16
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	6039      	str	r1, [r7, #0]
	HAL_IWDG_Refresh(&hiwdg);
 8001d46:	480b      	ldr	r0, [pc, #44]	@ (8001d74 <set_nav_mode_service_callback+0x38>)
 8001d48:	f002 fe53 	bl	80049f2 <HAL_IWDG_Refresh>
	nereo_interfaces__srv__SetNavigationMode_Request * req_in = (nereo_interfaces__srv__SetNavigationMode_Request *) request_msg;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	60fb      	str	r3, [r7, #12]
	nereo_interfaces__srv__SetNavigationMode_Response * res_in = (nereo_interfaces__srv__SetNavigationMode_Response *) response_msg;
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	60bb      	str	r3, [r7, #8]
	navigation_mode = (NavigationModes)req_in->navigation_mode;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	781a      	ldrb	r2, [r3, #0]
 8001d58:	4b07      	ldr	r3, [pc, #28]	@ (8001d78 <set_nav_mode_service_callback+0x3c>)
 8001d5a:	701a      	strb	r2, [r3, #0]
	res_in->mode_after_set = navigation_mode;
 8001d5c:	4b06      	ldr	r3, [pc, #24]	@ (8001d78 <set_nav_mode_service_callback+0x3c>)
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	b2da      	uxtb	r2, r3
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	705a      	strb	r2, [r3, #1]
	res_in->success = true;
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	2201      	movs	r2, #1
 8001d6a:	701a      	strb	r2, [r3, #0]
}
 8001d6c:	bf00      	nop
 8001d6e:	3710      	adds	r7, #16
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	2000b110 	.word	0x2000b110
 8001d78:	2000b0ed 	.word	0x2000b0ed

08001d7c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b08a      	sub	sp, #40	@ 0x28
 8001d80:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d82:	f107 0314 	add.w	r3, r7, #20
 8001d86:	2200      	movs	r2, #0
 8001d88:	601a      	str	r2, [r3, #0]
 8001d8a:	605a      	str	r2, [r3, #4]
 8001d8c:	609a      	str	r2, [r3, #8]
 8001d8e:	60da      	str	r2, [r3, #12]
 8001d90:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d92:	2300      	movs	r3, #0
 8001d94:	613b      	str	r3, [r7, #16]
 8001d96:	4b2d      	ldr	r3, [pc, #180]	@ (8001e4c <MX_GPIO_Init+0xd0>)
 8001d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d9a:	4a2c      	ldr	r2, [pc, #176]	@ (8001e4c <MX_GPIO_Init+0xd0>)
 8001d9c:	f043 0310 	orr.w	r3, r3, #16
 8001da0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001da2:	4b2a      	ldr	r3, [pc, #168]	@ (8001e4c <MX_GPIO_Init+0xd0>)
 8001da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001da6:	f003 0310 	and.w	r3, r3, #16
 8001daa:	613b      	str	r3, [r7, #16]
 8001dac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001dae:	2300      	movs	r3, #0
 8001db0:	60fb      	str	r3, [r7, #12]
 8001db2:	4b26      	ldr	r3, [pc, #152]	@ (8001e4c <MX_GPIO_Init+0xd0>)
 8001db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001db6:	4a25      	ldr	r2, [pc, #148]	@ (8001e4c <MX_GPIO_Init+0xd0>)
 8001db8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001dbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dbe:	4b23      	ldr	r3, [pc, #140]	@ (8001e4c <MX_GPIO_Init+0xd0>)
 8001dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001dc6:	60fb      	str	r3, [r7, #12]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dca:	2300      	movs	r3, #0
 8001dcc:	60bb      	str	r3, [r7, #8]
 8001dce:	4b1f      	ldr	r3, [pc, #124]	@ (8001e4c <MX_GPIO_Init+0xd0>)
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dd2:	4a1e      	ldr	r2, [pc, #120]	@ (8001e4c <MX_GPIO_Init+0xd0>)
 8001dd4:	f043 0301 	orr.w	r3, r3, #1
 8001dd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dda:	4b1c      	ldr	r3, [pc, #112]	@ (8001e4c <MX_GPIO_Init+0xd0>)
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dde:	f003 0301 	and.w	r3, r3, #1
 8001de2:	60bb      	str	r3, [r7, #8]
 8001de4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001de6:	2300      	movs	r3, #0
 8001de8:	607b      	str	r3, [r7, #4]
 8001dea:	4b18      	ldr	r3, [pc, #96]	@ (8001e4c <MX_GPIO_Init+0xd0>)
 8001dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dee:	4a17      	ldr	r2, [pc, #92]	@ (8001e4c <MX_GPIO_Init+0xd0>)
 8001df0:	f043 0302 	orr.w	r3, r3, #2
 8001df4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001df6:	4b15      	ldr	r3, [pc, #84]	@ (8001e4c <MX_GPIO_Init+0xd0>)
 8001df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dfa:	f003 0302 	and.w	r3, r3, #2
 8001dfe:	607b      	str	r3, [r7, #4]
 8001e00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e02:	2300      	movs	r3, #0
 8001e04:	603b      	str	r3, [r7, #0]
 8001e06:	4b11      	ldr	r3, [pc, #68]	@ (8001e4c <MX_GPIO_Init+0xd0>)
 8001e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e0a:	4a10      	ldr	r2, [pc, #64]	@ (8001e4c <MX_GPIO_Init+0xd0>)
 8001e0c:	f043 0304 	orr.w	r3, r3, #4
 8001e10:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e12:	4b0e      	ldr	r3, [pc, #56]	@ (8001e4c <MX_GPIO_Init+0xd0>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e16:	f003 0304 	and.w	r3, r3, #4
 8001e1a:	603b      	str	r3, [r7, #0]
 8001e1c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_RESET);
 8001e1e:	2200      	movs	r2, #0
 8001e20:	2104      	movs	r1, #4
 8001e22:	480b      	ldr	r0, [pc, #44]	@ (8001e50 <MX_GPIO_Init+0xd4>)
 8001e24:	f002 fd88 	bl	8004938 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001e28:	2304      	movs	r3, #4
 8001e2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e30:	2300      	movs	r3, #0
 8001e32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e34:	2300      	movs	r3, #0
 8001e36:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e38:	f107 0314 	add.w	r3, r7, #20
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	4804      	ldr	r0, [pc, #16]	@ (8001e50 <MX_GPIO_Init+0xd4>)
 8001e40:	f002 fbce 	bl	80045e0 <HAL_GPIO_Init>

}
 8001e44:	bf00      	nop
 8001e46:	3728      	adds	r7, #40	@ 0x28
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	40023800 	.word	0x40023800
 8001e50:	40021000 	.word	0x40021000

08001e54 <linear_interpolation>:
 * @param output_min The minimum value of the output range.
 * @param output_max The maximum value of the output range.
 * @return The interpolated output value.
 */
float linear_interpolation(float input_value, float input_min, float input_max, float output_min, float output_max)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b087      	sub	sp, #28
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	ed87 0a05 	vstr	s0, [r7, #20]
 8001e5e:	edc7 0a04 	vstr	s1, [r7, #16]
 8001e62:	ed87 1a03 	vstr	s2, [r7, #12]
 8001e66:	edc7 1a02 	vstr	s3, [r7, #8]
 8001e6a:	ed87 2a01 	vstr	s4, [r7, #4]
    return ((output_max - output_min) / (input_max - input_min)) * (input_value - input_min) + output_min;
 8001e6e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001e72:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e76:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001e7a:	ed97 7a03 	vldr	s14, [r7, #12]
 8001e7e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001e8a:	edd7 6a05 	vldr	s13, [r7, #20]
 8001e8e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e92:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001e96:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e9a:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e9e:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8001ea2:	eeb0 0a67 	vmov.f32	s0, s15
 8001ea6:	371c      	adds	r7, #28
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr

08001eb0 <normalize_vector>:
 * @param input_array The input array of floating-point values to be normalized.
 * @param output_array The output array where the normalized values will be stored.
 * @param size The number of elements in the input and output arrays.
 */
void normalize_vector(const float *input_array, float *output_array, uint8_t size)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b089      	sub	sp, #36	@ 0x24
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	60f8      	str	r0, [r7, #12]
 8001eb8:	60b9      	str	r1, [r7, #8]
 8001eba:	4613      	mov	r3, r2
 8001ebc:	71fb      	strb	r3, [r7, #7]
    float max_abs_value = 0.0f;
 8001ebe:	f04f 0300 	mov.w	r3, #0
 8001ec2:	61fb      	str	r3, [r7, #28]
    for (uint8_t i = 0; i < size; i++)
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	76fb      	strb	r3, [r7, #27]
 8001ec8:	e017      	b.n	8001efa <normalize_vector+0x4a>
    {
        float abs_value = fabsf(input_array[i]);
 8001eca:	7efb      	ldrb	r3, [r7, #27]
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	68fa      	ldr	r2, [r7, #12]
 8001ed0:	4413      	add	r3, r2
 8001ed2:	edd3 7a00 	vldr	s15, [r3]
 8001ed6:	eef0 7ae7 	vabs.f32	s15, s15
 8001eda:	edc7 7a05 	vstr	s15, [r7, #20]
        if (abs_value > max_abs_value)
 8001ede:	ed97 7a05 	vldr	s14, [r7, #20]
 8001ee2:	edd7 7a07 	vldr	s15, [r7, #28]
 8001ee6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001eea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eee:	dd01      	ble.n	8001ef4 <normalize_vector+0x44>
        {
            max_abs_value = abs_value;
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	61fb      	str	r3, [r7, #28]
    for (uint8_t i = 0; i < size; i++)
 8001ef4:	7efb      	ldrb	r3, [r7, #27]
 8001ef6:	3301      	adds	r3, #1
 8001ef8:	76fb      	strb	r3, [r7, #27]
 8001efa:	7efa      	ldrb	r2, [r7, #27]
 8001efc:	79fb      	ldrb	r3, [r7, #7]
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d3e3      	bcc.n	8001eca <normalize_vector+0x1a>
        }
    }
    for (uint8_t i = 0; i < size; i++) output_array[i] = input_array[i];
 8001f02:	2300      	movs	r3, #0
 8001f04:	76bb      	strb	r3, [r7, #26]
 8001f06:	e00c      	b.n	8001f22 <normalize_vector+0x72>
 8001f08:	7ebb      	ldrb	r3, [r7, #26]
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	68fa      	ldr	r2, [r7, #12]
 8001f0e:	441a      	add	r2, r3
 8001f10:	7ebb      	ldrb	r3, [r7, #26]
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	68b9      	ldr	r1, [r7, #8]
 8001f16:	440b      	add	r3, r1
 8001f18:	6812      	ldr	r2, [r2, #0]
 8001f1a:	601a      	str	r2, [r3, #0]
 8001f1c:	7ebb      	ldrb	r3, [r7, #26]
 8001f1e:	3301      	adds	r3, #1
 8001f20:	76bb      	strb	r3, [r7, #26]
 8001f22:	7eba      	ldrb	r2, [r7, #26]
 8001f24:	79fb      	ldrb	r3, [r7, #7]
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d3ee      	bcc.n	8001f08 <normalize_vector+0x58>
	if (max_abs_value > 1) {
 8001f2a:	edd7 7a07 	vldr	s15, [r7, #28]
 8001f2e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001f32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f3a:	dc00      	bgt.n	8001f3e <normalize_vector+0x8e>
		for (uint8_t i = 0; i < size; i++) {
			output_array[i] = input_array[i] / max_abs_value;
		}
	}
}
 8001f3c:	e019      	b.n	8001f72 <normalize_vector+0xc2>
		for (uint8_t i = 0; i < size; i++) {
 8001f3e:	2300      	movs	r3, #0
 8001f40:	767b      	strb	r3, [r7, #25]
 8001f42:	e012      	b.n	8001f6a <normalize_vector+0xba>
			output_array[i] = input_array[i] / max_abs_value;
 8001f44:	7e7b      	ldrb	r3, [r7, #25]
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	68fa      	ldr	r2, [r7, #12]
 8001f4a:	4413      	add	r3, r2
 8001f4c:	edd3 6a00 	vldr	s13, [r3]
 8001f50:	7e7b      	ldrb	r3, [r7, #25]
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	68ba      	ldr	r2, [r7, #8]
 8001f56:	4413      	add	r3, r2
 8001f58:	ed97 7a07 	vldr	s14, [r7, #28]
 8001f5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f60:	edc3 7a00 	vstr	s15, [r3]
		for (uint8_t i = 0; i < size; i++) {
 8001f64:	7e7b      	ldrb	r3, [r7, #25]
 8001f66:	3301      	adds	r3, #1
 8001f68:	767b      	strb	r3, [r7, #25]
 8001f6a:	7e7a      	ldrb	r2, [r7, #25]
 8001f6c:	79fb      	ldrb	r3, [r7, #7]
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d3e8      	bcc.n	8001f44 <normalize_vector+0x94>
}
 8001f72:	bf00      	nop
 8001f74:	3724      	adds	r7, #36	@ 0x24
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
	...

08001f80 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8001f84:	4b09      	ldr	r3, [pc, #36]	@ (8001fac <MX_IWDG_Init+0x2c>)
 8001f86:	4a0a      	ldr	r2, [pc, #40]	@ (8001fb0 <MX_IWDG_Init+0x30>)
 8001f88:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 8001f8a:	4b08      	ldr	r3, [pc, #32]	@ (8001fac <MX_IWDG_Init+0x2c>)
 8001f8c:	2204      	movs	r2, #4
 8001f8e:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 2500-1;
 8001f90:	4b06      	ldr	r3, [pc, #24]	@ (8001fac <MX_IWDG_Init+0x2c>)
 8001f92:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 8001f96:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8001f98:	4804      	ldr	r0, [pc, #16]	@ (8001fac <MX_IWDG_Init+0x2c>)
 8001f9a:	f002 fce6 	bl	800496a <HAL_IWDG_Init>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d001      	beq.n	8001fa8 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8001fa4:	f000 f926 	bl	80021f4 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8001fa8:	bf00      	nop
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	2000b110 	.word	0x2000b110
 8001fb0:	40003000 	.word	0x40003000

08001fb4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001fbc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001fc0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8001fc4:	f003 0301 	and.w	r3, r3, #1
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d013      	beq.n	8001ff4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001fcc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001fd0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8001fd4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d00b      	beq.n	8001ff4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001fdc:	e000      	b.n	8001fe0 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001fde:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001fe0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d0f9      	beq.n	8001fde <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001fea:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001fee:	687a      	ldr	r2, [r7, #4]
 8001ff0:	b2d2      	uxtb	r2, r2
 8001ff2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001ff4:	687b      	ldr	r3, [r7, #4]
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	370c      	adds	r7, #12
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
	...

08002004 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002008:	f001 fdc4 	bl	8003b94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800200c:	f000 f850 	bl	80020b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002010:	f7ff feb4 	bl	8001d7c <MX_GPIO_Init>
  MX_DMA_Init();
 8002014:	f7ff fa38 	bl	8001488 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8002018:	f000 fde8 	bl	8002bec <MX_USART1_UART_Init>
  MX_TIM2_Init();
 800201c:	f000 fbf4 	bl	8002808 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002020:	f000 fc6c 	bl	80028fc <MX_TIM3_Init>
  MX_IWDG_Init();
 8002024:	f7ff ffac 	bl	8001f80 <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */
  printf("Printf debugging is working! Yay!\n");
 8002028:	481c      	ldr	r0, [pc, #112]	@ (800209c <main+0x98>)
 800202a:	f01b f9cf 	bl	801d3cc <puts>
  HAL_TIM_Base_Start(&htim2);
 800202e:	481c      	ldr	r0, [pc, #112]	@ (80020a0 <main+0x9c>)
 8002030:	f003 fa50 	bl	80054d4 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8002034:	2100      	movs	r1, #0
 8002036:	481a      	ldr	r0, [pc, #104]	@ (80020a0 <main+0x9c>)
 8002038:	f003 fb74 	bl	8005724 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800203c:	2104      	movs	r1, #4
 800203e:	4818      	ldr	r0, [pc, #96]	@ (80020a0 <main+0x9c>)
 8002040:	f003 fb70 	bl	8005724 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8002044:	2108      	movs	r1, #8
 8002046:	4816      	ldr	r0, [pc, #88]	@ (80020a0 <main+0x9c>)
 8002048:	f003 fb6c 	bl	8005724 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 800204c:	210c      	movs	r1, #12
 800204e:	4814      	ldr	r0, [pc, #80]	@ (80020a0 <main+0x9c>)
 8002050:	f003 fb68 	bl	8005724 <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start(&htim3);
 8002054:	4813      	ldr	r0, [pc, #76]	@ (80020a4 <main+0xa0>)
 8002056:	f003 fa3d 	bl	80054d4 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800205a:	2100      	movs	r1, #0
 800205c:	4811      	ldr	r0, [pc, #68]	@ (80020a4 <main+0xa0>)
 800205e:	f003 fb61 	bl	8005724 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8002062:	2104      	movs	r1, #4
 8002064:	480f      	ldr	r0, [pc, #60]	@ (80020a4 <main+0xa0>)
 8002066:	f003 fb5d 	bl	8005724 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800206a:	2108      	movs	r1, #8
 800206c:	480d      	ldr	r0, [pc, #52]	@ (80020a4 <main+0xa0>)
 800206e:	f003 fb59 	bl	8005724 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8002072:	210c      	movs	r1, #12
 8002074:	480b      	ldr	r0, [pc, #44]	@ (80020a4 <main+0xa0>)
 8002076:	f003 fb55 	bl	8005724 <HAL_TIM_PWM_Start>

  HAL_IWDG_Init(&hiwdg);
 800207a:	480b      	ldr	r0, [pc, #44]	@ (80020a8 <main+0xa4>)
 800207c:	f002 fc75 	bl	800496a <HAL_IWDG_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002080:	f005 fd32 	bl	8007ae8 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8002084:	f7ff fad6 	bl	8001634 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8002088:	f005 fd52 	bl	8007b30 <osKernelStart>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  printf("Error starting freeRTOS Scheduler.\n");
 800208c:	4807      	ldr	r0, [pc, #28]	@ (80020ac <main+0xa8>)
 800208e:	f01b f99d 	bl	801d3cc <puts>
	  Error_Handler();
 8002092:	f000 f8af 	bl	80021f4 <Error_Handler>
	  printf("Error starting freeRTOS Scheduler.\n");
 8002096:	bf00      	nop
 8002098:	e7f8      	b.n	800208c <main+0x88>
 800209a:	bf00      	nop
 800209c:	0801e62c 	.word	0x0801e62c
 80020a0:	2000b174 	.word	0x2000b174
 80020a4:	2000b1bc 	.word	0x2000b1bc
 80020a8:	2000b110 	.word	0x2000b110
 80020ac:	0801e650 	.word	0x0801e650

080020b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b094      	sub	sp, #80	@ 0x50
 80020b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020b6:	f107 031c 	add.w	r3, r7, #28
 80020ba:	2234      	movs	r2, #52	@ 0x34
 80020bc:	2100      	movs	r1, #0
 80020be:	4618      	mov	r0, r3
 80020c0:	f01b f9b6 	bl	801d430 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020c4:	f107 0308 	add.w	r3, r7, #8
 80020c8:	2200      	movs	r2, #0
 80020ca:	601a      	str	r2, [r3, #0]
 80020cc:	605a      	str	r2, [r3, #4]
 80020ce:	609a      	str	r2, [r3, #8]
 80020d0:	60da      	str	r2, [r3, #12]
 80020d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80020d4:	2300      	movs	r3, #0
 80020d6:	607b      	str	r3, [r7, #4]
 80020d8:	4b2d      	ldr	r3, [pc, #180]	@ (8002190 <SystemClock_Config+0xe0>)
 80020da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020dc:	4a2c      	ldr	r2, [pc, #176]	@ (8002190 <SystemClock_Config+0xe0>)
 80020de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020e2:	6413      	str	r3, [r2, #64]	@ 0x40
 80020e4:	4b2a      	ldr	r3, [pc, #168]	@ (8002190 <SystemClock_Config+0xe0>)
 80020e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020ec:	607b      	str	r3, [r7, #4]
 80020ee:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80020f0:	2300      	movs	r3, #0
 80020f2:	603b      	str	r3, [r7, #0]
 80020f4:	4b27      	ldr	r3, [pc, #156]	@ (8002194 <SystemClock_Config+0xe4>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a26      	ldr	r2, [pc, #152]	@ (8002194 <SystemClock_Config+0xe4>)
 80020fa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80020fe:	6013      	str	r3, [r2, #0]
 8002100:	4b24      	ldr	r3, [pc, #144]	@ (8002194 <SystemClock_Config+0xe4>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002108:	603b      	str	r3, [r7, #0]
 800210a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800210c:	2309      	movs	r3, #9
 800210e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002110:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002114:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002116:	2301      	movs	r3, #1
 8002118:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800211a:	2302      	movs	r3, #2
 800211c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800211e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002122:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002124:	2308      	movs	r3, #8
 8002126:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 195;
 8002128:	23c3      	movs	r3, #195	@ 0xc3
 800212a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800212c:	2302      	movs	r3, #2
 800212e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002130:	2304      	movs	r3, #4
 8002132:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002134:	2302      	movs	r3, #2
 8002136:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002138:	f107 031c 	add.w	r3, r7, #28
 800213c:	4618      	mov	r0, r3
 800213e:	f002 fef5 	bl	8004f2c <HAL_RCC_OscConfig>
 8002142:	4603      	mov	r3, r0
 8002144:	2b00      	cmp	r3, #0
 8002146:	d001      	beq.n	800214c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8002148:	f000 f854 	bl	80021f4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800214c:	f002 fc62 	bl	8004a14 <HAL_PWREx_EnableOverDrive>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d001      	beq.n	800215a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8002156:	f000 f84d 	bl	80021f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800215a:	230f      	movs	r3, #15
 800215c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800215e:	2302      	movs	r3, #2
 8002160:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002162:	2300      	movs	r3, #0
 8002164:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002166:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800216a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800216c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002170:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002172:	f107 0308 	add.w	r3, r7, #8
 8002176:	2105      	movs	r1, #5
 8002178:	4618      	mov	r0, r3
 800217a:	f002 fc9b 	bl	8004ab4 <HAL_RCC_ClockConfig>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d001      	beq.n	8002188 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8002184:	f000 f836 	bl	80021f4 <Error_Handler>
  }
}
 8002188:	bf00      	nop
 800218a:	3750      	adds	r7, #80	@ 0x50
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}
 8002190:	40023800 	.word	0x40023800
 8002194:	40007000 	.word	0x40007000

08002198 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b086      	sub	sp, #24
 800219c:	af00      	add	r7, sp, #0
 800219e:	60f8      	str	r0, [r7, #12]
 80021a0:	60b9      	str	r1, [r7, #8]
 80021a2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021a4:	2300      	movs	r3, #0
 80021a6:	617b      	str	r3, [r7, #20]
 80021a8:	e009      	b.n	80021be <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	1c5a      	adds	r2, r3, #1
 80021ae:	60ba      	str	r2, [r7, #8]
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	4618      	mov	r0, r3
 80021b4:	f7ff fefe 	bl	8001fb4 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	3301      	adds	r3, #1
 80021bc:	617b      	str	r3, [r7, #20]
 80021be:	697a      	ldr	r2, [r7, #20]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	429a      	cmp	r2, r3
 80021c4:	dbf1      	blt.n	80021aa <_write+0x12>
  }
  return len;
 80021c6:	687b      	ldr	r3, [r7, #4]
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3718      	adds	r7, #24
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}

080021d0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a04      	ldr	r2, [pc, #16]	@ (80021f0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d101      	bne.n	80021e6 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80021e2:	f001 fcf9 	bl	8003bd8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80021e6:	bf00      	nop
 80021e8:	3708      	adds	r7, #8
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	40010000 	.word	0x40010000

080021f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80021f8:	b672      	cpsid	i
}
 80021fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021fc:	bf00      	nop
 80021fe:	e7fd      	b.n	80021fc <Error_Handler+0x8>

08002200 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
 8002208:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 800220a:	4b0c      	ldr	r3, [pc, #48]	@ (800223c <microros_allocate+0x3c>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	461a      	mov	r2, r3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	4413      	add	r3, r2
 8002214:	461a      	mov	r2, r3
 8002216:	4b09      	ldr	r3, [pc, #36]	@ (800223c <microros_allocate+0x3c>)
 8002218:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 800221a:	4b09      	ldr	r3, [pc, #36]	@ (8002240 <microros_allocate+0x40>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	461a      	mov	r2, r3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	4413      	add	r3, r2
 8002224:	461a      	mov	r2, r3
 8002226:	4b06      	ldr	r3, [pc, #24]	@ (8002240 <microros_allocate+0x40>)
 8002228:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f7fe fedc 	bl	8000fe8 <pvPortMallocMicroROS>
 8002230:	4603      	mov	r3, r0
}
 8002232:	4618      	mov	r0, r3
 8002234:	3708      	adds	r7, #8
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	2000b11c 	.word	0x2000b11c
 8002240:	2000b120 	.word	0x2000b120

08002244 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d00c      	beq.n	800226e <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f7fe ffeb 	bl	8001230 <getBlockSize>
 800225a:	4603      	mov	r3, r0
 800225c:	4a06      	ldr	r2, [pc, #24]	@ (8002278 <microros_deallocate+0x34>)
 800225e:	6812      	ldr	r2, [r2, #0]
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	461a      	mov	r2, r3
 8002264:	4b04      	ldr	r3, [pc, #16]	@ (8002278 <microros_deallocate+0x34>)
 8002266:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f7fe ff85 	bl	8001178 <vPortFreeMicroROS>
  }
}
 800226e:	bf00      	nop
 8002270:	3708      	adds	r7, #8
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	2000b120 	.word	0x2000b120

0800227c <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 800227c:	b580      	push	{r7, lr}
 800227e:	b084      	sub	sp, #16
 8002280:	af00      	add	r7, sp, #0
 8002282:	60f8      	str	r0, [r7, #12]
 8002284:	60b9      	str	r1, [r7, #8]
 8002286:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8002288:	4b15      	ldr	r3, [pc, #84]	@ (80022e0 <microros_reallocate+0x64>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	461a      	mov	r2, r3
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	4413      	add	r3, r2
 8002292:	461a      	mov	r2, r3
 8002294:	4b12      	ldr	r3, [pc, #72]	@ (80022e0 <microros_reallocate+0x64>)
 8002296:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8002298:	4b12      	ldr	r3, [pc, #72]	@ (80022e4 <microros_reallocate+0x68>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	461a      	mov	r2, r3
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	4413      	add	r3, r2
 80022a2:	461a      	mov	r2, r3
 80022a4:	4b0f      	ldr	r3, [pc, #60]	@ (80022e4 <microros_reallocate+0x68>)
 80022a6:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d104      	bne.n	80022b8 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 80022ae:	68b8      	ldr	r0, [r7, #8]
 80022b0:	f7fe fe9a 	bl	8000fe8 <pvPortMallocMicroROS>
 80022b4:	4603      	mov	r3, r0
 80022b6:	e00e      	b.n	80022d6 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 80022b8:	68f8      	ldr	r0, [r7, #12]
 80022ba:	f7fe ffb9 	bl	8001230 <getBlockSize>
 80022be:	4603      	mov	r3, r0
 80022c0:	4a08      	ldr	r2, [pc, #32]	@ (80022e4 <microros_reallocate+0x68>)
 80022c2:	6812      	ldr	r2, [r2, #0]
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	461a      	mov	r2, r3
 80022c8:	4b06      	ldr	r3, [pc, #24]	@ (80022e4 <microros_reallocate+0x68>)
 80022ca:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 80022cc:	68b9      	ldr	r1, [r7, #8]
 80022ce:	68f8      	ldr	r0, [r7, #12]
 80022d0:	f7fe ffcc 	bl	800126c <pvPortReallocMicroROS>
 80022d4:	4603      	mov	r3, r0
  }
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3710      	adds	r7, #16
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	2000b11c 	.word	0x2000b11c
 80022e4:	2000b120 	.word	0x2000b120

080022e8 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b084      	sub	sp, #16
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	60f8      	str	r0, [r7, #12]
 80022f0:	60b9      	str	r1, [r7, #8]
 80022f2:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	68ba      	ldr	r2, [r7, #8]
 80022f8:	fb02 f303 	mul.w	r3, r2, r3
 80022fc:	4a0c      	ldr	r2, [pc, #48]	@ (8002330 <microros_zero_allocate+0x48>)
 80022fe:	6812      	ldr	r2, [r2, #0]
 8002300:	4413      	add	r3, r2
 8002302:	461a      	mov	r2, r3
 8002304:	4b0a      	ldr	r3, [pc, #40]	@ (8002330 <microros_zero_allocate+0x48>)
 8002306:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	68ba      	ldr	r2, [r7, #8]
 800230c:	fb02 f303 	mul.w	r3, r2, r3
 8002310:	4a08      	ldr	r2, [pc, #32]	@ (8002334 <microros_zero_allocate+0x4c>)
 8002312:	6812      	ldr	r2, [r2, #0]
 8002314:	4413      	add	r3, r2
 8002316:	461a      	mov	r2, r3
 8002318:	4b06      	ldr	r3, [pc, #24]	@ (8002334 <microros_zero_allocate+0x4c>)
 800231a:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 800231c:	68b9      	ldr	r1, [r7, #8]
 800231e:	68f8      	ldr	r0, [r7, #12]
 8002320:	f7fe ffd1 	bl	80012c6 <pvPortCallocMicroROS>
 8002324:	4603      	mov	r3, r0
 8002326:	4618      	mov	r0, r3
 8002328:	3710      	adds	r7, #16
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	2000b11c 	.word	0x2000b11c
 8002334:	2000b120 	.word	0x2000b120

08002338 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8002338:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800233c:	b086      	sub	sp, #24
 800233e:	af00      	add	r7, sp, #0
 8002340:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002344:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8002346:	2300      	movs	r3, #0
 8002348:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 800234a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800234e:	a320      	add	r3, pc, #128	@ (adr r3, 80023d0 <UTILS_NanosecondsToTimespec+0x98>)
 8002350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002354:	f7fe fc62 	bl	8000c1c <__aeabi_ldivmod>
 8002358:	4602      	mov	r2, r0
 800235a:	460b      	mov	r3, r1
 800235c:	6879      	ldr	r1, [r7, #4]
 800235e:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8002362:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002366:	a31a      	add	r3, pc, #104	@ (adr r3, 80023d0 <UTILS_NanosecondsToTimespec+0x98>)
 8002368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800236c:	f7fe fc56 	bl	8000c1c <__aeabi_ldivmod>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	2b00      	cmp	r3, #0
 800237a:	da20      	bge.n	80023be <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	4a11      	ldr	r2, [pc, #68]	@ (80023c8 <UTILS_NanosecondsToTimespec+0x90>)
 8002382:	fb82 1203 	smull	r1, r2, r2, r3
 8002386:	1712      	asrs	r2, r2, #28
 8002388:	17db      	asrs	r3, r3, #31
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	3301      	adds	r3, #1
 800238e:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002396:	6979      	ldr	r1, [r7, #20]
 8002398:	17c8      	asrs	r0, r1, #31
 800239a:	460c      	mov	r4, r1
 800239c:	4605      	mov	r5, r0
 800239e:	ebb2 0804 	subs.w	r8, r2, r4
 80023a2:	eb63 0905 	sbc.w	r9, r3, r5
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	689a      	ldr	r2, [r3, #8]
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	4906      	ldr	r1, [pc, #24]	@ (80023cc <UTILS_NanosecondsToTimespec+0x94>)
 80023b4:	fb01 f303 	mul.w	r3, r1, r3
 80023b8:	441a      	add	r2, r3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	609a      	str	r2, [r3, #8]
    }
}
 80023be:	bf00      	nop
 80023c0:	3718      	adds	r7, #24
 80023c2:	46bd      	mov	sp, r7
 80023c4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80023c8:	44b82fa1 	.word	0x44b82fa1
 80023cc:	3b9aca00 	.word	0x3b9aca00
 80023d0:	3b9aca00 	.word	0x3b9aca00
 80023d4:	00000000 	.word	0x00000000

080023d8 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 80023d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023dc:	b08e      	sub	sp, #56	@ 0x38
 80023de:	af00      	add	r7, sp, #0
 80023e0:	6278      	str	r0, [r7, #36]	@ 0x24
 80023e2:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 80023e4:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80023e8:	2300      	movs	r3, #0
 80023ea:	6013      	str	r3, [r2, #0]
 80023ec:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 80023ee:	f04f 0200 	mov.w	r2, #0
 80023f2:	f04f 0300 	mov.w	r3, #0
 80023f6:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 80023fa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80023fe:	4618      	mov	r0, r3
 8002400:	f006 ff1a 	bl	8009238 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8002404:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002406:	17da      	asrs	r2, r3, #31
 8002408:	61bb      	str	r3, [r7, #24]
 800240a:	61fa      	str	r2, [r7, #28]
 800240c:	f04f 0200 	mov.w	r2, #0
 8002410:	f04f 0300 	mov.w	r3, #0
 8002414:	69b9      	ldr	r1, [r7, #24]
 8002416:	000b      	movs	r3, r1
 8002418:	2200      	movs	r2, #0
 800241a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 800241e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002420:	2200      	movs	r2, #0
 8002422:	461c      	mov	r4, r3
 8002424:	4615      	mov	r5, r2
 8002426:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800242a:	1911      	adds	r1, r2, r4
 800242c:	60b9      	str	r1, [r7, #8]
 800242e:	416b      	adcs	r3, r5
 8002430:	60fb      	str	r3, [r7, #12]
 8002432:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002436:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 800243a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800243e:	4602      	mov	r2, r0
 8002440:	460b      	mov	r3, r1
 8002442:	f04f 0400 	mov.w	r4, #0
 8002446:	f04f 0500 	mov.w	r5, #0
 800244a:	015d      	lsls	r5, r3, #5
 800244c:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8002450:	0154      	lsls	r4, r2, #5
 8002452:	4622      	mov	r2, r4
 8002454:	462b      	mov	r3, r5
 8002456:	ebb2 0800 	subs.w	r8, r2, r0
 800245a:	eb63 0901 	sbc.w	r9, r3, r1
 800245e:	f04f 0200 	mov.w	r2, #0
 8002462:	f04f 0300 	mov.w	r3, #0
 8002466:	ea4f 2349 	mov.w	r3, r9, lsl #9
 800246a:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 800246e:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8002472:	4690      	mov	r8, r2
 8002474:	4699      	mov	r9, r3
 8002476:	eb18 0a00 	adds.w	sl, r8, r0
 800247a:	eb49 0b01 	adc.w	fp, r9, r1
 800247e:	f04f 0200 	mov.w	r2, #0
 8002482:	f04f 0300 	mov.w	r3, #0
 8002486:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800248a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800248e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002492:	ebb2 040a 	subs.w	r4, r2, sl
 8002496:	603c      	str	r4, [r7, #0]
 8002498:	eb63 030b 	sbc.w	r3, r3, fp
 800249c:	607b      	str	r3, [r7, #4]
 800249e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80024a2:	4623      	mov	r3, r4
 80024a4:	181b      	adds	r3, r3, r0
 80024a6:	613b      	str	r3, [r7, #16]
 80024a8:	462b      	mov	r3, r5
 80024aa:	eb41 0303 	adc.w	r3, r1, r3
 80024ae:	617b      	str	r3, [r7, #20]
 80024b0:	6a3a      	ldr	r2, [r7, #32]
 80024b2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80024b6:	f7ff ff3f 	bl	8002338 <UTILS_NanosecondsToTimespec>

    return 0;
 80024ba:	2300      	movs	r3, #0
 80024bc:	4618      	mov	r0, r3
 80024be:	3738      	adds	r7, #56	@ 0x38
 80024c0:	46bd      	mov	sp, r7
 80024c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080024c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024ce:	2300      	movs	r3, #0
 80024d0:	607b      	str	r3, [r7, #4]
 80024d2:	4b12      	ldr	r3, [pc, #72]	@ (800251c <HAL_MspInit+0x54>)
 80024d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024d6:	4a11      	ldr	r2, [pc, #68]	@ (800251c <HAL_MspInit+0x54>)
 80024d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80024dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80024de:	4b0f      	ldr	r3, [pc, #60]	@ (800251c <HAL_MspInit+0x54>)
 80024e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024e6:	607b      	str	r3, [r7, #4]
 80024e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024ea:	2300      	movs	r3, #0
 80024ec:	603b      	str	r3, [r7, #0]
 80024ee:	4b0b      	ldr	r3, [pc, #44]	@ (800251c <HAL_MspInit+0x54>)
 80024f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024f2:	4a0a      	ldr	r2, [pc, #40]	@ (800251c <HAL_MspInit+0x54>)
 80024f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80024fa:	4b08      	ldr	r3, [pc, #32]	@ (800251c <HAL_MspInit+0x54>)
 80024fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002502:	603b      	str	r3, [r7, #0]
 8002504:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002506:	2200      	movs	r2, #0
 8002508:	210f      	movs	r1, #15
 800250a:	f06f 0001 	mvn.w	r0, #1
 800250e:	f001 fc3b 	bl	8003d88 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002512:	bf00      	nop
 8002514:	3708      	adds	r7, #8
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	40023800 	.word	0x40023800

08002520 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b08c      	sub	sp, #48	@ 0x30
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002528:	2300      	movs	r3, #0
 800252a:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 800252c:	2300      	movs	r3, #0
 800252e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002530:	2300      	movs	r3, #0
 8002532:	60bb      	str	r3, [r7, #8]
 8002534:	4b2f      	ldr	r3, [pc, #188]	@ (80025f4 <HAL_InitTick+0xd4>)
 8002536:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002538:	4a2e      	ldr	r2, [pc, #184]	@ (80025f4 <HAL_InitTick+0xd4>)
 800253a:	f043 0301 	orr.w	r3, r3, #1
 800253e:	6453      	str	r3, [r2, #68]	@ 0x44
 8002540:	4b2c      	ldr	r3, [pc, #176]	@ (80025f4 <HAL_InitTick+0xd4>)
 8002542:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002544:	f003 0301 	and.w	r3, r3, #1
 8002548:	60bb      	str	r3, [r7, #8]
 800254a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800254c:	f107 020c 	add.w	r2, r7, #12
 8002550:	f107 0310 	add.w	r3, r7, #16
 8002554:	4611      	mov	r1, r2
 8002556:	4618      	mov	r0, r3
 8002558:	f002 fcb6 	bl	8004ec8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800255c:	f002 fca0 	bl	8004ea0 <HAL_RCC_GetPCLK2Freq>
 8002560:	4603      	mov	r3, r0
 8002562:	005b      	lsls	r3, r3, #1
 8002564:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002566:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002568:	4a23      	ldr	r2, [pc, #140]	@ (80025f8 <HAL_InitTick+0xd8>)
 800256a:	fba2 2303 	umull	r2, r3, r2, r3
 800256e:	0c9b      	lsrs	r3, r3, #18
 8002570:	3b01      	subs	r3, #1
 8002572:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002574:	4b21      	ldr	r3, [pc, #132]	@ (80025fc <HAL_InitTick+0xdc>)
 8002576:	4a22      	ldr	r2, [pc, #136]	@ (8002600 <HAL_InitTick+0xe0>)
 8002578:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800257a:	4b20      	ldr	r3, [pc, #128]	@ (80025fc <HAL_InitTick+0xdc>)
 800257c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002580:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002582:	4a1e      	ldr	r2, [pc, #120]	@ (80025fc <HAL_InitTick+0xdc>)
 8002584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002586:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002588:	4b1c      	ldr	r3, [pc, #112]	@ (80025fc <HAL_InitTick+0xdc>)
 800258a:	2200      	movs	r2, #0
 800258c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800258e:	4b1b      	ldr	r3, [pc, #108]	@ (80025fc <HAL_InitTick+0xdc>)
 8002590:	2200      	movs	r2, #0
 8002592:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002594:	4b19      	ldr	r3, [pc, #100]	@ (80025fc <HAL_InitTick+0xdc>)
 8002596:	2200      	movs	r2, #0
 8002598:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800259a:	4818      	ldr	r0, [pc, #96]	@ (80025fc <HAL_InitTick+0xdc>)
 800259c:	f002 ff4a 	bl	8005434 <HAL_TIM_Base_Init>
 80025a0:	4603      	mov	r3, r0
 80025a2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80025a6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d11b      	bne.n	80025e6 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80025ae:	4813      	ldr	r0, [pc, #76]	@ (80025fc <HAL_InitTick+0xdc>)
 80025b0:	f002 fff8 	bl	80055a4 <HAL_TIM_Base_Start_IT>
 80025b4:	4603      	mov	r3, r0
 80025b6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80025ba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d111      	bne.n	80025e6 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80025c2:	2019      	movs	r0, #25
 80025c4:	f001 fbfc 	bl	8003dc0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2b0f      	cmp	r3, #15
 80025cc:	d808      	bhi.n	80025e0 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80025ce:	2200      	movs	r2, #0
 80025d0:	6879      	ldr	r1, [r7, #4]
 80025d2:	2019      	movs	r0, #25
 80025d4:	f001 fbd8 	bl	8003d88 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80025d8:	4a0a      	ldr	r2, [pc, #40]	@ (8002604 <HAL_InitTick+0xe4>)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6013      	str	r3, [r2, #0]
 80025de:	e002      	b.n	80025e6 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80025e6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3730      	adds	r7, #48	@ 0x30
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	40023800 	.word	0x40023800
 80025f8:	431bde83 	.word	0x431bde83
 80025fc:	2000b124 	.word	0x2000b124
 8002600:	40010000 	.word	0x40010000
 8002604:	200000d0 	.word	0x200000d0

08002608 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002608:	b480      	push	{r7}
 800260a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800260c:	bf00      	nop
 800260e:	e7fd      	b.n	800260c <NMI_Handler+0x4>

08002610 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002610:	b480      	push	{r7}
 8002612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002614:	bf00      	nop
 8002616:	e7fd      	b.n	8002614 <HardFault_Handler+0x4>

08002618 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002618:	b480      	push	{r7}
 800261a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800261c:	bf00      	nop
 800261e:	e7fd      	b.n	800261c <MemManage_Handler+0x4>

08002620 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002620:	b480      	push	{r7}
 8002622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002624:	bf00      	nop
 8002626:	e7fd      	b.n	8002624 <BusFault_Handler+0x4>

08002628 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002628:	b480      	push	{r7}
 800262a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800262c:	bf00      	nop
 800262e:	e7fd      	b.n	800262c <UsageFault_Handler+0x4>

08002630 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002630:	b480      	push	{r7}
 8002632:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002634:	bf00      	nop
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr
	...

08002640 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002644:	4802      	ldr	r0, [pc, #8]	@ (8002650 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002646:	f003 f935 	bl	80058b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800264a:	bf00      	nop
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	2000b124 	.word	0x2000b124

08002654 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002658:	4802      	ldr	r0, [pc, #8]	@ (8002664 <USART1_IRQHandler+0x10>)
 800265a:	f004 f8e3 	bl	8006824 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800265e:	bf00      	nop
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	2000b204 	.word	0x2000b204

08002668 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800266c:	4802      	ldr	r0, [pc, #8]	@ (8002678 <DMA2_Stream2_IRQHandler+0x10>)
 800266e:	f001 fd4d 	bl	800410c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002672:	bf00      	nop
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	2000b24c 	.word	0x2000b24c

0800267c <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002680:	4802      	ldr	r0, [pc, #8]	@ (800268c <DMA2_Stream7_IRQHandler+0x10>)
 8002682:	f001 fd43 	bl	800410c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8002686:	bf00      	nop
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	2000b2ac 	.word	0x2000b2ac

08002690 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002690:	b480      	push	{r7}
 8002692:	af00      	add	r7, sp, #0
  return 1;
 8002694:	2301      	movs	r3, #1
}
 8002696:	4618      	mov	r0, r3
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr

080026a0 <_kill>:

int _kill(int pid, int sig)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b082      	sub	sp, #8
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80026aa:	f01a ff21 	bl	801d4f0 <__errno>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2216      	movs	r2, #22
 80026b2:	601a      	str	r2, [r3, #0]
  return -1;
 80026b4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3708      	adds	r7, #8
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}

080026c0 <_exit>:

void _exit (int status)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80026c8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f7ff ffe7 	bl	80026a0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80026d2:	bf00      	nop
 80026d4:	e7fd      	b.n	80026d2 <_exit+0x12>

080026d6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80026d6:	b580      	push	{r7, lr}
 80026d8:	b086      	sub	sp, #24
 80026da:	af00      	add	r7, sp, #0
 80026dc:	60f8      	str	r0, [r7, #12]
 80026de:	60b9      	str	r1, [r7, #8]
 80026e0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026e2:	2300      	movs	r3, #0
 80026e4:	617b      	str	r3, [r7, #20]
 80026e6:	e00a      	b.n	80026fe <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80026e8:	f3af 8000 	nop.w
 80026ec:	4601      	mov	r1, r0
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	1c5a      	adds	r2, r3, #1
 80026f2:	60ba      	str	r2, [r7, #8]
 80026f4:	b2ca      	uxtb	r2, r1
 80026f6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	3301      	adds	r3, #1
 80026fc:	617b      	str	r3, [r7, #20]
 80026fe:	697a      	ldr	r2, [r7, #20]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	429a      	cmp	r2, r3
 8002704:	dbf0      	blt.n	80026e8 <_read+0x12>
  }

  return len;
 8002706:	687b      	ldr	r3, [r7, #4]
}
 8002708:	4618      	mov	r0, r3
 800270a:	3718      	adds	r7, #24
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}

08002710 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002710:	b480      	push	{r7}
 8002712:	b083      	sub	sp, #12
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002718:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800271c:	4618      	mov	r0, r3
 800271e:	370c      	adds	r7, #12
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr

08002728 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002728:	b480      	push	{r7}
 800272a:	b083      	sub	sp, #12
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002738:	605a      	str	r2, [r3, #4]
  return 0;
 800273a:	2300      	movs	r3, #0
}
 800273c:	4618      	mov	r0, r3
 800273e:	370c      	adds	r7, #12
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr

08002748 <_isatty>:

int _isatty(int file)
{
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002750:	2301      	movs	r3, #1
}
 8002752:	4618      	mov	r0, r3
 8002754:	370c      	adds	r7, #12
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr

0800275e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800275e:	b480      	push	{r7}
 8002760:	b085      	sub	sp, #20
 8002762:	af00      	add	r7, sp, #0
 8002764:	60f8      	str	r0, [r7, #12]
 8002766:	60b9      	str	r1, [r7, #8]
 8002768:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800276a:	2300      	movs	r3, #0
}
 800276c:	4618      	mov	r0, r3
 800276e:	3714      	adds	r7, #20
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr

08002778 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b086      	sub	sp, #24
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002780:	4a14      	ldr	r2, [pc, #80]	@ (80027d4 <_sbrk+0x5c>)
 8002782:	4b15      	ldr	r3, [pc, #84]	@ (80027d8 <_sbrk+0x60>)
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800278c:	4b13      	ldr	r3, [pc, #76]	@ (80027dc <_sbrk+0x64>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d102      	bne.n	800279a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002794:	4b11      	ldr	r3, [pc, #68]	@ (80027dc <_sbrk+0x64>)
 8002796:	4a12      	ldr	r2, [pc, #72]	@ (80027e0 <_sbrk+0x68>)
 8002798:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800279a:	4b10      	ldr	r3, [pc, #64]	@ (80027dc <_sbrk+0x64>)
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4413      	add	r3, r2
 80027a2:	693a      	ldr	r2, [r7, #16]
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d207      	bcs.n	80027b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027a8:	f01a fea2 	bl	801d4f0 <__errno>
 80027ac:	4603      	mov	r3, r0
 80027ae:	220c      	movs	r2, #12
 80027b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80027b2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80027b6:	e009      	b.n	80027cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027b8:	4b08      	ldr	r3, [pc, #32]	@ (80027dc <_sbrk+0x64>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027be:	4b07      	ldr	r3, [pc, #28]	@ (80027dc <_sbrk+0x64>)
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	4413      	add	r3, r2
 80027c6:	4a05      	ldr	r2, [pc, #20]	@ (80027dc <_sbrk+0x64>)
 80027c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80027ca:	68fb      	ldr	r3, [r7, #12]
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3718      	adds	r7, #24
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	20050000 	.word	0x20050000
 80027d8:	00000400 	.word	0x00000400
 80027dc:	2000b170 	.word	0x2000b170
 80027e0:	20019d90 	.word	0x20019d90

080027e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80027e4:	b480      	push	{r7}
 80027e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80027e8:	4b06      	ldr	r3, [pc, #24]	@ (8002804 <SystemInit+0x20>)
 80027ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027ee:	4a05      	ldr	r2, [pc, #20]	@ (8002804 <SystemInit+0x20>)
 80027f0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80027f4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027f8:	bf00      	nop
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr
 8002802:	bf00      	nop
 8002804:	e000ed00 	.word	0xe000ed00

08002808 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b08a      	sub	sp, #40	@ 0x28
 800280c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800280e:	f107 0320 	add.w	r3, r7, #32
 8002812:	2200      	movs	r2, #0
 8002814:	601a      	str	r2, [r3, #0]
 8002816:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002818:	1d3b      	adds	r3, r7, #4
 800281a:	2200      	movs	r2, #0
 800281c:	601a      	str	r2, [r3, #0]
 800281e:	605a      	str	r2, [r3, #4]
 8002820:	609a      	str	r2, [r3, #8]
 8002822:	60da      	str	r2, [r3, #12]
 8002824:	611a      	str	r2, [r3, #16]
 8002826:	615a      	str	r2, [r3, #20]
 8002828:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800282a:	4b33      	ldr	r3, [pc, #204]	@ (80028f8 <MX_TIM2_Init+0xf0>)
 800282c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002830:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 8002832:	4b31      	ldr	r3, [pc, #196]	@ (80028f8 <MX_TIM2_Init+0xf0>)
 8002834:	2259      	movs	r2, #89	@ 0x59
 8002836:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002838:	4b2f      	ldr	r3, [pc, #188]	@ (80028f8 <MX_TIM2_Init+0xf0>)
 800283a:	2200      	movs	r2, #0
 800283c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000-1;
 800283e:	4b2e      	ldr	r3, [pc, #184]	@ (80028f8 <MX_TIM2_Init+0xf0>)
 8002840:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8002844:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002846:	4b2c      	ldr	r3, [pc, #176]	@ (80028f8 <MX_TIM2_Init+0xf0>)
 8002848:	2200      	movs	r2, #0
 800284a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800284c:	4b2a      	ldr	r3, [pc, #168]	@ (80028f8 <MX_TIM2_Init+0xf0>)
 800284e:	2200      	movs	r2, #0
 8002850:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002852:	4829      	ldr	r0, [pc, #164]	@ (80028f8 <MX_TIM2_Init+0xf0>)
 8002854:	f002 ff16 	bl	8005684 <HAL_TIM_PWM_Init>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d001      	beq.n	8002862 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800285e:	f7ff fcc9 	bl	80021f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002862:	2300      	movs	r3, #0
 8002864:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002866:	2300      	movs	r3, #0
 8002868:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800286a:	f107 0320 	add.w	r3, r7, #32
 800286e:	4619      	mov	r1, r3
 8002870:	4821      	ldr	r0, [pc, #132]	@ (80028f8 <MX_TIM2_Init+0xf0>)
 8002872:	f003 fdd7 	bl	8006424 <HAL_TIMEx_MasterConfigSynchronization>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d001      	beq.n	8002880 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 800287c:	f7ff fcba 	bl	80021f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002880:	2360      	movs	r3, #96	@ 0x60
 8002882:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1500-1;
 8002884:	f240 53db 	movw	r3, #1499	@ 0x5db
 8002888:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800288a:	2300      	movs	r3, #0
 800288c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800288e:	2300      	movs	r3, #0
 8002890:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002892:	1d3b      	adds	r3, r7, #4
 8002894:	2200      	movs	r2, #0
 8002896:	4619      	mov	r1, r3
 8002898:	4817      	ldr	r0, [pc, #92]	@ (80028f8 <MX_TIM2_Init+0xf0>)
 800289a:	f003 f8fb 	bl	8005a94 <HAL_TIM_PWM_ConfigChannel>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d001      	beq.n	80028a8 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80028a4:	f7ff fca6 	bl	80021f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80028a8:	1d3b      	adds	r3, r7, #4
 80028aa:	2204      	movs	r2, #4
 80028ac:	4619      	mov	r1, r3
 80028ae:	4812      	ldr	r0, [pc, #72]	@ (80028f8 <MX_TIM2_Init+0xf0>)
 80028b0:	f003 f8f0 	bl	8005a94 <HAL_TIM_PWM_ConfigChannel>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d001      	beq.n	80028be <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 80028ba:	f7ff fc9b 	bl	80021f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80028be:	1d3b      	adds	r3, r7, #4
 80028c0:	2208      	movs	r2, #8
 80028c2:	4619      	mov	r1, r3
 80028c4:	480c      	ldr	r0, [pc, #48]	@ (80028f8 <MX_TIM2_Init+0xf0>)
 80028c6:	f003 f8e5 	bl	8005a94 <HAL_TIM_PWM_ConfigChannel>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d001      	beq.n	80028d4 <MX_TIM2_Init+0xcc>
  {
    Error_Handler();
 80028d0:	f7ff fc90 	bl	80021f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80028d4:	1d3b      	adds	r3, r7, #4
 80028d6:	220c      	movs	r2, #12
 80028d8:	4619      	mov	r1, r3
 80028da:	4807      	ldr	r0, [pc, #28]	@ (80028f8 <MX_TIM2_Init+0xf0>)
 80028dc:	f003 f8da 	bl	8005a94 <HAL_TIM_PWM_ConfigChannel>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d001      	beq.n	80028ea <MX_TIM2_Init+0xe2>
  {
    Error_Handler();
 80028e6:	f7ff fc85 	bl	80021f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80028ea:	4803      	ldr	r0, [pc, #12]	@ (80028f8 <MX_TIM2_Init+0xf0>)
 80028ec:	f000 f8e0 	bl	8002ab0 <HAL_TIM_MspPostInit>

}
 80028f0:	bf00      	nop
 80028f2:	3728      	adds	r7, #40	@ 0x28
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	2000b174 	.word	0x2000b174

080028fc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b08e      	sub	sp, #56	@ 0x38
 8002900:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002902:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002906:	2200      	movs	r2, #0
 8002908:	601a      	str	r2, [r3, #0]
 800290a:	605a      	str	r2, [r3, #4]
 800290c:	609a      	str	r2, [r3, #8]
 800290e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002910:	f107 0320 	add.w	r3, r7, #32
 8002914:	2200      	movs	r2, #0
 8002916:	601a      	str	r2, [r3, #0]
 8002918:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800291a:	1d3b      	adds	r3, r7, #4
 800291c:	2200      	movs	r2, #0
 800291e:	601a      	str	r2, [r3, #0]
 8002920:	605a      	str	r2, [r3, #4]
 8002922:	609a      	str	r2, [r3, #8]
 8002924:	60da      	str	r2, [r3, #12]
 8002926:	611a      	str	r2, [r3, #16]
 8002928:	615a      	str	r2, [r3, #20]
 800292a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800292c:	4b3d      	ldr	r3, [pc, #244]	@ (8002a24 <MX_TIM3_Init+0x128>)
 800292e:	4a3e      	ldr	r2, [pc, #248]	@ (8002a28 <MX_TIM3_Init+0x12c>)
 8002930:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 90-1;
 8002932:	4b3c      	ldr	r3, [pc, #240]	@ (8002a24 <MX_TIM3_Init+0x128>)
 8002934:	2259      	movs	r2, #89	@ 0x59
 8002936:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002938:	4b3a      	ldr	r3, [pc, #232]	@ (8002a24 <MX_TIM3_Init+0x128>)
 800293a:	2200      	movs	r2, #0
 800293c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 800293e:	4b39      	ldr	r3, [pc, #228]	@ (8002a24 <MX_TIM3_Init+0x128>)
 8002940:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8002944:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002946:	4b37      	ldr	r3, [pc, #220]	@ (8002a24 <MX_TIM3_Init+0x128>)
 8002948:	2200      	movs	r2, #0
 800294a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800294c:	4b35      	ldr	r3, [pc, #212]	@ (8002a24 <MX_TIM3_Init+0x128>)
 800294e:	2200      	movs	r2, #0
 8002950:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002952:	4834      	ldr	r0, [pc, #208]	@ (8002a24 <MX_TIM3_Init+0x128>)
 8002954:	f002 fd6e 	bl	8005434 <HAL_TIM_Base_Init>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d001      	beq.n	8002962 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800295e:	f7ff fc49 	bl	80021f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002962:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002966:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002968:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800296c:	4619      	mov	r1, r3
 800296e:	482d      	ldr	r0, [pc, #180]	@ (8002a24 <MX_TIM3_Init+0x128>)
 8002970:	f003 f952 	bl	8005c18 <HAL_TIM_ConfigClockSource>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d001      	beq.n	800297e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800297a:	f7ff fc3b 	bl	80021f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800297e:	4829      	ldr	r0, [pc, #164]	@ (8002a24 <MX_TIM3_Init+0x128>)
 8002980:	f002 fe80 	bl	8005684 <HAL_TIM_PWM_Init>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d001      	beq.n	800298e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800298a:	f7ff fc33 	bl	80021f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800298e:	2300      	movs	r3, #0
 8002990:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002992:	2300      	movs	r3, #0
 8002994:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002996:	f107 0320 	add.w	r3, r7, #32
 800299a:	4619      	mov	r1, r3
 800299c:	4821      	ldr	r0, [pc, #132]	@ (8002a24 <MX_TIM3_Init+0x128>)
 800299e:	f003 fd41 	bl	8006424 <HAL_TIMEx_MasterConfigSynchronization>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d001      	beq.n	80029ac <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80029a8:	f7ff fc24 	bl	80021f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80029ac:	2360      	movs	r3, #96	@ 0x60
 80029ae:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1500-1;
 80029b0:	f240 53db 	movw	r3, #1499	@ 0x5db
 80029b4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80029b6:	2300      	movs	r3, #0
 80029b8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80029ba:	2300      	movs	r3, #0
 80029bc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80029be:	1d3b      	adds	r3, r7, #4
 80029c0:	2200      	movs	r2, #0
 80029c2:	4619      	mov	r1, r3
 80029c4:	4817      	ldr	r0, [pc, #92]	@ (8002a24 <MX_TIM3_Init+0x128>)
 80029c6:	f003 f865 	bl	8005a94 <HAL_TIM_PWM_ConfigChannel>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d001      	beq.n	80029d4 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80029d0:	f7ff fc10 	bl	80021f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80029d4:	1d3b      	adds	r3, r7, #4
 80029d6:	2204      	movs	r2, #4
 80029d8:	4619      	mov	r1, r3
 80029da:	4812      	ldr	r0, [pc, #72]	@ (8002a24 <MX_TIM3_Init+0x128>)
 80029dc:	f003 f85a 	bl	8005a94 <HAL_TIM_PWM_ConfigChannel>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d001      	beq.n	80029ea <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 80029e6:	f7ff fc05 	bl	80021f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80029ea:	1d3b      	adds	r3, r7, #4
 80029ec:	2208      	movs	r2, #8
 80029ee:	4619      	mov	r1, r3
 80029f0:	480c      	ldr	r0, [pc, #48]	@ (8002a24 <MX_TIM3_Init+0x128>)
 80029f2:	f003 f84f 	bl	8005a94 <HAL_TIM_PWM_ConfigChannel>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d001      	beq.n	8002a00 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 80029fc:	f7ff fbfa 	bl	80021f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002a00:	1d3b      	adds	r3, r7, #4
 8002a02:	220c      	movs	r2, #12
 8002a04:	4619      	mov	r1, r3
 8002a06:	4807      	ldr	r0, [pc, #28]	@ (8002a24 <MX_TIM3_Init+0x128>)
 8002a08:	f003 f844 	bl	8005a94 <HAL_TIM_PWM_ConfigChannel>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d001      	beq.n	8002a16 <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 8002a12:	f7ff fbef 	bl	80021f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002a16:	4803      	ldr	r0, [pc, #12]	@ (8002a24 <MX_TIM3_Init+0x128>)
 8002a18:	f000 f84a 	bl	8002ab0 <HAL_TIM_MspPostInit>

}
 8002a1c:	bf00      	nop
 8002a1e:	3738      	adds	r7, #56	@ 0x38
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	2000b1bc 	.word	0x2000b1bc
 8002a28:	40000400 	.word	0x40000400

08002a2c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b085      	sub	sp, #20
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a3c:	d10d      	bne.n	8002a5a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a3e:	2300      	movs	r3, #0
 8002a40:	60fb      	str	r3, [r7, #12]
 8002a42:	4b09      	ldr	r3, [pc, #36]	@ (8002a68 <HAL_TIM_PWM_MspInit+0x3c>)
 8002a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a46:	4a08      	ldr	r2, [pc, #32]	@ (8002a68 <HAL_TIM_PWM_MspInit+0x3c>)
 8002a48:	f043 0301 	orr.w	r3, r3, #1
 8002a4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a4e:	4b06      	ldr	r3, [pc, #24]	@ (8002a68 <HAL_TIM_PWM_MspInit+0x3c>)
 8002a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a52:	f003 0301 	and.w	r3, r3, #1
 8002a56:	60fb      	str	r3, [r7, #12]
 8002a58:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002a5a:	bf00      	nop
 8002a5c:	3714      	adds	r7, #20
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr
 8002a66:	bf00      	nop
 8002a68:	40023800 	.word	0x40023800

08002a6c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b085      	sub	sp, #20
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a0b      	ldr	r2, [pc, #44]	@ (8002aa8 <HAL_TIM_Base_MspInit+0x3c>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d10d      	bne.n	8002a9a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002a7e:	2300      	movs	r3, #0
 8002a80:	60fb      	str	r3, [r7, #12]
 8002a82:	4b0a      	ldr	r3, [pc, #40]	@ (8002aac <HAL_TIM_Base_MspInit+0x40>)
 8002a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a86:	4a09      	ldr	r2, [pc, #36]	@ (8002aac <HAL_TIM_Base_MspInit+0x40>)
 8002a88:	f043 0302 	orr.w	r3, r3, #2
 8002a8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a8e:	4b07      	ldr	r3, [pc, #28]	@ (8002aac <HAL_TIM_Base_MspInit+0x40>)
 8002a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a92:	f003 0302 	and.w	r3, r3, #2
 8002a96:	60fb      	str	r3, [r7, #12]
 8002a98:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002a9a:	bf00      	nop
 8002a9c:	3714      	adds	r7, #20
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr
 8002aa6:	bf00      	nop
 8002aa8:	40000400 	.word	0x40000400
 8002aac:	40023800 	.word	0x40023800

08002ab0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b08c      	sub	sp, #48	@ 0x30
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ab8:	f107 031c 	add.w	r3, r7, #28
 8002abc:	2200      	movs	r2, #0
 8002abe:	601a      	str	r2, [r3, #0]
 8002ac0:	605a      	str	r2, [r3, #4]
 8002ac2:	609a      	str	r2, [r3, #8]
 8002ac4:	60da      	str	r2, [r3, #12]
 8002ac6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ad0:	d11e      	bne.n	8002b10 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	61bb      	str	r3, [r7, #24]
 8002ad6:	4b40      	ldr	r3, [pc, #256]	@ (8002bd8 <HAL_TIM_MspPostInit+0x128>)
 8002ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ada:	4a3f      	ldr	r2, [pc, #252]	@ (8002bd8 <HAL_TIM_MspPostInit+0x128>)
 8002adc:	f043 0301 	orr.w	r3, r3, #1
 8002ae0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ae2:	4b3d      	ldr	r3, [pc, #244]	@ (8002bd8 <HAL_TIM_MspPostInit+0x128>)
 8002ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ae6:	f003 0301 	and.w	r3, r3, #1
 8002aea:	61bb      	str	r3, [r7, #24]
 8002aec:	69bb      	ldr	r3, [r7, #24]
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5;
 8002aee:	232e      	movs	r3, #46	@ 0x2e
 8002af0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002af2:	2302      	movs	r3, #2
 8002af4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af6:	2300      	movs	r3, #0
 8002af8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002afa:	2300      	movs	r3, #0
 8002afc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002afe:	2301      	movs	r3, #1
 8002b00:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b02:	f107 031c 	add.w	r3, r7, #28
 8002b06:	4619      	mov	r1, r3
 8002b08:	4834      	ldr	r0, [pc, #208]	@ (8002bdc <HAL_TIM_MspPostInit+0x12c>)
 8002b0a:	f001 fd69 	bl	80045e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002b0e:	e05e      	b.n	8002bce <HAL_TIM_MspPostInit+0x11e>
  else if(timHandle->Instance==TIM3)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a32      	ldr	r2, [pc, #200]	@ (8002be0 <HAL_TIM_MspPostInit+0x130>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d159      	bne.n	8002bce <HAL_TIM_MspPostInit+0x11e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	617b      	str	r3, [r7, #20]
 8002b1e:	4b2e      	ldr	r3, [pc, #184]	@ (8002bd8 <HAL_TIM_MspPostInit+0x128>)
 8002b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b22:	4a2d      	ldr	r2, [pc, #180]	@ (8002bd8 <HAL_TIM_MspPostInit+0x128>)
 8002b24:	f043 0301 	orr.w	r3, r3, #1
 8002b28:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b2a:	4b2b      	ldr	r3, [pc, #172]	@ (8002bd8 <HAL_TIM_MspPostInit+0x128>)
 8002b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b2e:	f003 0301 	and.w	r3, r3, #1
 8002b32:	617b      	str	r3, [r7, #20]
 8002b34:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b36:	2300      	movs	r3, #0
 8002b38:	613b      	str	r3, [r7, #16]
 8002b3a:	4b27      	ldr	r3, [pc, #156]	@ (8002bd8 <HAL_TIM_MspPostInit+0x128>)
 8002b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b3e:	4a26      	ldr	r2, [pc, #152]	@ (8002bd8 <HAL_TIM_MspPostInit+0x128>)
 8002b40:	f043 0302 	orr.w	r3, r3, #2
 8002b44:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b46:	4b24      	ldr	r3, [pc, #144]	@ (8002bd8 <HAL_TIM_MspPostInit+0x128>)
 8002b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b4a:	f003 0302 	and.w	r3, r3, #2
 8002b4e:	613b      	str	r3, [r7, #16]
 8002b50:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b52:	2300      	movs	r3, #0
 8002b54:	60fb      	str	r3, [r7, #12]
 8002b56:	4b20      	ldr	r3, [pc, #128]	@ (8002bd8 <HAL_TIM_MspPostInit+0x128>)
 8002b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b5a:	4a1f      	ldr	r2, [pc, #124]	@ (8002bd8 <HAL_TIM_MspPostInit+0x128>)
 8002b5c:	f043 0304 	orr.w	r3, r3, #4
 8002b60:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b62:	4b1d      	ldr	r3, [pc, #116]	@ (8002bd8 <HAL_TIM_MspPostInit+0x128>)
 8002b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b66:	f003 0304 	and.w	r3, r3, #4
 8002b6a:	60fb      	str	r3, [r7, #12]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002b6e:	2340      	movs	r3, #64	@ 0x40
 8002b70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b72:	2302      	movs	r3, #2
 8002b74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b76:	2300      	movs	r3, #0
 8002b78:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002b7e:	2302      	movs	r3, #2
 8002b80:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b82:	f107 031c 	add.w	r3, r7, #28
 8002b86:	4619      	mov	r1, r3
 8002b88:	4814      	ldr	r0, [pc, #80]	@ (8002bdc <HAL_TIM_MspPostInit+0x12c>)
 8002b8a:	f001 fd29 	bl	80045e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b92:	2302      	movs	r3, #2
 8002b94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b96:	2300      	movs	r3, #0
 8002b98:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002b9e:	2302      	movs	r3, #2
 8002ba0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ba2:	f107 031c 	add.w	r3, r7, #28
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	480e      	ldr	r0, [pc, #56]	@ (8002be4 <HAL_TIM_MspPostInit+0x134>)
 8002baa:	f001 fd19 	bl	80045e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002bae:	2380      	movs	r3, #128	@ 0x80
 8002bb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bb2:	2302      	movs	r3, #2
 8002bb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002bbe:	2302      	movs	r3, #2
 8002bc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bc2:	f107 031c 	add.w	r3, r7, #28
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	4807      	ldr	r0, [pc, #28]	@ (8002be8 <HAL_TIM_MspPostInit+0x138>)
 8002bca:	f001 fd09 	bl	80045e0 <HAL_GPIO_Init>
}
 8002bce:	bf00      	nop
 8002bd0:	3730      	adds	r7, #48	@ 0x30
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	40023800 	.word	0x40023800
 8002bdc:	40020000 	.word	0x40020000
 8002be0:	40000400 	.word	0x40000400
 8002be4:	40020400 	.word	0x40020400
 8002be8:	40020800 	.word	0x40020800

08002bec <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002bf0:	4b11      	ldr	r3, [pc, #68]	@ (8002c38 <MX_USART1_UART_Init+0x4c>)
 8002bf2:	4a12      	ldr	r2, [pc, #72]	@ (8002c3c <MX_USART1_UART_Init+0x50>)
 8002bf4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002bf6:	4b10      	ldr	r3, [pc, #64]	@ (8002c38 <MX_USART1_UART_Init+0x4c>)
 8002bf8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002bfc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002bfe:	4b0e      	ldr	r3, [pc, #56]	@ (8002c38 <MX_USART1_UART_Init+0x4c>)
 8002c00:	2200      	movs	r2, #0
 8002c02:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002c04:	4b0c      	ldr	r3, [pc, #48]	@ (8002c38 <MX_USART1_UART_Init+0x4c>)
 8002c06:	2200      	movs	r2, #0
 8002c08:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002c0a:	4b0b      	ldr	r3, [pc, #44]	@ (8002c38 <MX_USART1_UART_Init+0x4c>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002c10:	4b09      	ldr	r3, [pc, #36]	@ (8002c38 <MX_USART1_UART_Init+0x4c>)
 8002c12:	220c      	movs	r2, #12
 8002c14:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c16:	4b08      	ldr	r3, [pc, #32]	@ (8002c38 <MX_USART1_UART_Init+0x4c>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c1c:	4b06      	ldr	r3, [pc, #24]	@ (8002c38 <MX_USART1_UART_Init+0x4c>)
 8002c1e:	2200      	movs	r2, #0
 8002c20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002c22:	4805      	ldr	r0, [pc, #20]	@ (8002c38 <MX_USART1_UART_Init+0x4c>)
 8002c24:	f003 fc8e 	bl	8006544 <HAL_UART_Init>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d001      	beq.n	8002c32 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002c2e:	f7ff fae1 	bl	80021f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002c32:	bf00      	nop
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	2000b204 	.word	0x2000b204
 8002c3c:	40011000 	.word	0x40011000

08002c40 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b08a      	sub	sp, #40	@ 0x28
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c48:	f107 0314 	add.w	r3, r7, #20
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	601a      	str	r2, [r3, #0]
 8002c50:	605a      	str	r2, [r3, #4]
 8002c52:	609a      	str	r2, [r3, #8]
 8002c54:	60da      	str	r2, [r3, #12]
 8002c56:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a4d      	ldr	r2, [pc, #308]	@ (8002d94 <HAL_UART_MspInit+0x154>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	f040 8094 	bne.w	8002d8c <HAL_UART_MspInit+0x14c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c64:	2300      	movs	r3, #0
 8002c66:	613b      	str	r3, [r7, #16]
 8002c68:	4b4b      	ldr	r3, [pc, #300]	@ (8002d98 <HAL_UART_MspInit+0x158>)
 8002c6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c6c:	4a4a      	ldr	r2, [pc, #296]	@ (8002d98 <HAL_UART_MspInit+0x158>)
 8002c6e:	f043 0310 	orr.w	r3, r3, #16
 8002c72:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c74:	4b48      	ldr	r3, [pc, #288]	@ (8002d98 <HAL_UART_MspInit+0x158>)
 8002c76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c78:	f003 0310 	and.w	r3, r3, #16
 8002c7c:	613b      	str	r3, [r7, #16]
 8002c7e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c80:	2300      	movs	r3, #0
 8002c82:	60fb      	str	r3, [r7, #12]
 8002c84:	4b44      	ldr	r3, [pc, #272]	@ (8002d98 <HAL_UART_MspInit+0x158>)
 8002c86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c88:	4a43      	ldr	r2, [pc, #268]	@ (8002d98 <HAL_UART_MspInit+0x158>)
 8002c8a:	f043 0301 	orr.w	r3, r3, #1
 8002c8e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c90:	4b41      	ldr	r3, [pc, #260]	@ (8002d98 <HAL_UART_MspInit+0x158>)
 8002c92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c94:	f003 0301 	and.w	r3, r3, #1
 8002c98:	60fb      	str	r3, [r7, #12]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002c9c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002ca0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ca2:	2302      	movs	r3, #2
 8002ca4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002caa:	2303      	movs	r3, #3
 8002cac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002cae:	2307      	movs	r3, #7
 8002cb0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cb2:	f107 0314 	add.w	r3, r7, #20
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	4838      	ldr	r0, [pc, #224]	@ (8002d9c <HAL_UART_MspInit+0x15c>)
 8002cba:	f001 fc91 	bl	80045e0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002cbe:	4b38      	ldr	r3, [pc, #224]	@ (8002da0 <HAL_UART_MspInit+0x160>)
 8002cc0:	4a38      	ldr	r2, [pc, #224]	@ (8002da4 <HAL_UART_MspInit+0x164>)
 8002cc2:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002cc4:	4b36      	ldr	r3, [pc, #216]	@ (8002da0 <HAL_UART_MspInit+0x160>)
 8002cc6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002cca:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ccc:	4b34      	ldr	r3, [pc, #208]	@ (8002da0 <HAL_UART_MspInit+0x160>)
 8002cce:	2200      	movs	r2, #0
 8002cd0:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002cd2:	4b33      	ldr	r3, [pc, #204]	@ (8002da0 <HAL_UART_MspInit+0x160>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002cd8:	4b31      	ldr	r3, [pc, #196]	@ (8002da0 <HAL_UART_MspInit+0x160>)
 8002cda:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002cde:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ce0:	4b2f      	ldr	r3, [pc, #188]	@ (8002da0 <HAL_UART_MspInit+0x160>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ce6:	4b2e      	ldr	r3, [pc, #184]	@ (8002da0 <HAL_UART_MspInit+0x160>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002cec:	4b2c      	ldr	r3, [pc, #176]	@ (8002da0 <HAL_UART_MspInit+0x160>)
 8002cee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002cf2:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002cf4:	4b2a      	ldr	r3, [pc, #168]	@ (8002da0 <HAL_UART_MspInit+0x160>)
 8002cf6:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002cfa:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002cfc:	4b28      	ldr	r3, [pc, #160]	@ (8002da0 <HAL_UART_MspInit+0x160>)
 8002cfe:	2200      	movs	r2, #0
 8002d00:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002d02:	4827      	ldr	r0, [pc, #156]	@ (8002da0 <HAL_UART_MspInit+0x160>)
 8002d04:	f001 f86a 	bl	8003ddc <HAL_DMA_Init>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d001      	beq.n	8002d12 <HAL_UART_MspInit+0xd2>
    {
      Error_Handler();
 8002d0e:	f7ff fa71 	bl	80021f4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4a22      	ldr	r2, [pc, #136]	@ (8002da0 <HAL_UART_MspInit+0x160>)
 8002d16:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002d18:	4a21      	ldr	r2, [pc, #132]	@ (8002da0 <HAL_UART_MspInit+0x160>)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8002d1e:	4b22      	ldr	r3, [pc, #136]	@ (8002da8 <HAL_UART_MspInit+0x168>)
 8002d20:	4a22      	ldr	r2, [pc, #136]	@ (8002dac <HAL_UART_MspInit+0x16c>)
 8002d22:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8002d24:	4b20      	ldr	r3, [pc, #128]	@ (8002da8 <HAL_UART_MspInit+0x168>)
 8002d26:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002d2a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002d2c:	4b1e      	ldr	r3, [pc, #120]	@ (8002da8 <HAL_UART_MspInit+0x168>)
 8002d2e:	2240      	movs	r2, #64	@ 0x40
 8002d30:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d32:	4b1d      	ldr	r3, [pc, #116]	@ (8002da8 <HAL_UART_MspInit+0x168>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002d38:	4b1b      	ldr	r3, [pc, #108]	@ (8002da8 <HAL_UART_MspInit+0x168>)
 8002d3a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002d3e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d40:	4b19      	ldr	r3, [pc, #100]	@ (8002da8 <HAL_UART_MspInit+0x168>)
 8002d42:	2200      	movs	r2, #0
 8002d44:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d46:	4b18      	ldr	r3, [pc, #96]	@ (8002da8 <HAL_UART_MspInit+0x168>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002d4c:	4b16      	ldr	r3, [pc, #88]	@ (8002da8 <HAL_UART_MspInit+0x168>)
 8002d4e:	2200      	movs	r2, #0
 8002d50:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002d52:	4b15      	ldr	r3, [pc, #84]	@ (8002da8 <HAL_UART_MspInit+0x168>)
 8002d54:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002d58:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d5a:	4b13      	ldr	r3, [pc, #76]	@ (8002da8 <HAL_UART_MspInit+0x168>)
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002d60:	4811      	ldr	r0, [pc, #68]	@ (8002da8 <HAL_UART_MspInit+0x168>)
 8002d62:	f001 f83b 	bl	8003ddc <HAL_DMA_Init>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d001      	beq.n	8002d70 <HAL_UART_MspInit+0x130>
    {
      Error_Handler();
 8002d6c:	f7ff fa42 	bl	80021f4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	4a0d      	ldr	r2, [pc, #52]	@ (8002da8 <HAL_UART_MspInit+0x168>)
 8002d74:	639a      	str	r2, [r3, #56]	@ 0x38
 8002d76:	4a0c      	ldr	r2, [pc, #48]	@ (8002da8 <HAL_UART_MspInit+0x168>)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	2105      	movs	r1, #5
 8002d80:	2025      	movs	r0, #37	@ 0x25
 8002d82:	f001 f801 	bl	8003d88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002d86:	2025      	movs	r0, #37	@ 0x25
 8002d88:	f001 f81a 	bl	8003dc0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002d8c:	bf00      	nop
 8002d8e:	3728      	adds	r7, #40	@ 0x28
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}
 8002d94:	40011000 	.word	0x40011000
 8002d98:	40023800 	.word	0x40023800
 8002d9c:	40020000 	.word	0x40020000
 8002da0:	2000b24c 	.word	0x2000b24c
 8002da4:	40026440 	.word	0x40026440
 8002da8:	2000b2ac 	.word	0x2000b2ac
 8002dac:	400264b8 	.word	0x400264b8

08002db0 <calculate_pwm>:
#endif

static uint8_t tcm_initialized = 0;
static arm_matrix_instance_f32 fixed_mixing_matrix_instance;

arm_status calculate_pwm(const float in_joystick_input[6], uint32_t pwm_output[8]) {
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b09e      	sub	sp, #120	@ 0x78
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	6039      	str	r1, [r7, #0]
	float joystick_input[6];
	for(uint8_t i = 0; i < 6; i++)
 8002dba:	2300      	movs	r3, #0
 8002dbc:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8002dc0:	e011      	b.n	8002de6 <calculate_pwm+0x36>
	{
		joystick_input[i] = in_joystick_input[i];
 8002dc2:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	687a      	ldr	r2, [r7, #4]
 8002dca:	441a      	add	r2, r3
 8002dcc:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8002dd0:	6812      	ldr	r2, [r2, #0]
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	3378      	adds	r3, #120	@ 0x78
 8002dd6:	443b      	add	r3, r7
 8002dd8:	3b1c      	subs	r3, #28
 8002dda:	601a      	str	r2, [r3, #0]
	for(uint8_t i = 0; i < 6; i++)
 8002ddc:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8002de0:	3301      	adds	r3, #1
 8002de2:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8002de6:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8002dea:	2b05      	cmp	r3, #5
 8002dec:	d9e9      	bls.n	8002dc2 <calculate_pwm+0x12>
	}

    normalize_vector(in_joystick_input, joystick_input, 6);
 8002dee:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002df2:	2206      	movs	r2, #6
 8002df4:	4619      	mov	r1, r3
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f7ff f85a 	bl	8001eb0 <normalize_vector>

    float f_pwm_output[8];

    __attribute__((aligned(4))) float pwm_output_8_1[8] = {0};
 8002dfc:	f107 031c 	add.w	r3, r7, #28
 8002e00:	2220      	movs	r2, #32
 8002e02:	2100      	movs	r1, #0
 8002e04:	4618      	mov	r0, r3
 8002e06:	f01a fb13 	bl	801d430 <memset>

    arm_matrix_instance_f32 joystick_input_instance;
    arm_matrix_instance_f32 pwm_output_instance;

    if(tcm_initialized == 0) {
 8002e0a:	4b41      	ldr	r3, [pc, #260]	@ (8002f10 <calculate_pwm+0x160>)
 8002e0c:	781b      	ldrb	r3, [r3, #0]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d108      	bne.n	8002e24 <calculate_pwm+0x74>
    	arm_mat_init_f32(&fixed_mixing_matrix_instance, 8, 6, (float *)FIXED_MIXING_MATRIX);
 8002e12:	4b40      	ldr	r3, [pc, #256]	@ (8002f14 <calculate_pwm+0x164>)
 8002e14:	2206      	movs	r2, #6
 8002e16:	2108      	movs	r1, #8
 8002e18:	483f      	ldr	r0, [pc, #252]	@ (8002f18 <calculate_pwm+0x168>)
 8002e1a:	f007 fd1d 	bl	800a858 <arm_mat_init_f32>
    	tcm_initialized = 1;
 8002e1e:	4b3c      	ldr	r3, [pc, #240]	@ (8002f10 <calculate_pwm+0x160>)
 8002e20:	2201      	movs	r2, #1
 8002e22:	701a      	strb	r2, [r3, #0]
    }
    arm_mat_init_f32(&joystick_input_instance, 6, 1, (float *)joystick_input);
 8002e24:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002e28:	f107 0014 	add.w	r0, r7, #20
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	2106      	movs	r1, #6
 8002e30:	f007 fd12 	bl	800a858 <arm_mat_init_f32>
    arm_mat_init_f32(&pwm_output_instance, 8, 1, (float *)pwm_output_8_1);
 8002e34:	f107 031c 	add.w	r3, r7, #28
 8002e38:	f107 000c 	add.w	r0, r7, #12
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	2108      	movs	r1, #8
 8002e40:	f007 fd0a 	bl	800a858 <arm_mat_init_f32>
    arm_status code = arm_mat_mult_f32(&fixed_mixing_matrix_instance, &joystick_input_instance, &pwm_output_instance);
 8002e44:	f107 020c 	add.w	r2, r7, #12
 8002e48:	f107 0314 	add.w	r3, r7, #20
 8002e4c:	4619      	mov	r1, r3
 8002e4e:	4832      	ldr	r0, [pc, #200]	@ (8002f18 <calculate_pwm+0x168>)
 8002e50:	f007 fbf2 	bl	800a638 <arm_mat_mult_f32>
 8002e54:	4603      	mov	r3, r0
 8002e56:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
    if (code != ARM_MATH_SUCCESS) return code;
 8002e5a:	f997 3074 	ldrsb.w	r3, [r7, #116]	@ 0x74
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d002      	beq.n	8002e68 <calculate_pwm+0xb8>
 8002e62:	f997 3074 	ldrsb.w	r3, [r7, #116]	@ 0x74
 8002e66:	e04f      	b.n	8002f08 <calculate_pwm+0x158>

    for (uint8_t i = 0; i < 8; i++) {
 8002e68:	2300      	movs	r3, #0
 8002e6a:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 8002e6e:	e011      	b.n	8002e94 <calculate_pwm+0xe4>
        f_pwm_output[i] = pwm_output_instance.pData[i];
 8002e70:	693a      	ldr	r2, [r7, #16]
 8002e72:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	441a      	add	r2, r3
 8002e7a:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8002e7e:	6812      	ldr	r2, [r2, #0]
 8002e80:	009b      	lsls	r3, r3, #2
 8002e82:	3378      	adds	r3, #120	@ 0x78
 8002e84:	443b      	add	r3, r7
 8002e86:	3b3c      	subs	r3, #60	@ 0x3c
 8002e88:	601a      	str	r2, [r3, #0]
    for (uint8_t i = 0; i < 8; i++) {
 8002e8a:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8002e8e:	3301      	adds	r3, #1
 8002e90:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 8002e94:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8002e98:	2b07      	cmp	r3, #7
 8002e9a:	d9e9      	bls.n	8002e70 <calculate_pwm+0xc0>
    }

    // normalize pwm_output and map to 1100 ~ 1900
    normalize_vector(f_pwm_output, f_pwm_output, 8);
 8002e9c:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8002ea0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002ea4:	2208      	movs	r2, #8
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f7ff f802 	bl	8001eb0 <normalize_vector>
    for (uint8_t i = 0; i < 8; i++) {
 8002eac:	2300      	movs	r3, #0
 8002eae:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75
 8002eb2:	e024      	b.n	8002efe <calculate_pwm+0x14e>
        // pwm_output[i][0] = symmetric_quadratic_interpolation(pwm_output[i][0], 1, PWM_MAX);
        pwm_output[i] = (int)linear_interpolation(f_pwm_output[i], -1, 1, PWM_MIN, PWM_MAX);
 8002eb4:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 8002eb8:	009b      	lsls	r3, r3, #2
 8002eba:	3378      	adds	r3, #120	@ 0x78
 8002ebc:	443b      	add	r3, r7
 8002ebe:	3b3c      	subs	r3, #60	@ 0x3c
 8002ec0:	edd3 7a00 	vldr	s15, [r3]
 8002ec4:	ed9f 2a15 	vldr	s4, [pc, #84]	@ 8002f1c <calculate_pwm+0x16c>
 8002ec8:	eddf 1a15 	vldr	s3, [pc, #84]	@ 8002f20 <calculate_pwm+0x170>
 8002ecc:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 8002ed0:	eeff 0a00 	vmov.f32	s1, #240	@ 0xbf800000 -1.0
 8002ed4:	eeb0 0a67 	vmov.f32	s0, s15
 8002ed8:	f7fe ffbc 	bl	8001e54 <linear_interpolation>
 8002edc:	eef0 7a40 	vmov.f32	s15, s0
 8002ee0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ee4:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 8002ee8:	009b      	lsls	r3, r3, #2
 8002eea:	683a      	ldr	r2, [r7, #0]
 8002eec:	4413      	add	r3, r2
 8002eee:	ee17 2a90 	vmov	r2, s15
 8002ef2:	601a      	str	r2, [r3, #0]
    for (uint8_t i = 0; i < 8; i++) {
 8002ef4:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 8002ef8:	3301      	adds	r3, #1
 8002efa:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75
 8002efe:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 8002f02:	2b07      	cmp	r3, #7
 8002f04:	d9d6      	bls.n	8002eb4 <calculate_pwm+0x104>
    }
    return ARM_MATH_SUCCESS;
 8002f06:	2300      	movs	r3, #0
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3778      	adds	r7, #120	@ 0x78
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	2000b30c 	.word	0x2000b30c
 8002f14:	20000008 	.word	0x20000008
 8002f18:	2000b310 	.word	0x2000b310
 8002f1c:	44d0c000 	.word	0x44d0c000
 8002f20:	44a64000 	.word	0x44a64000

08002f24 <invert_quaternion>:

void invert_quaternion(const Quaternion * q, Quaternion * q_inv) {
 8002f24:	b480      	push	{r7}
 8002f26:	b085      	sub	sp, #20
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	6039      	str	r1, [r7, #0]
	float norm_squared = q->w * q->w + q->x * q->x + q->y * q->y + q->z * q->z;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	ed93 7a00 	vldr	s14, [r3]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	edd3 7a00 	vldr	s15, [r3]
 8002f3a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	edd3 6a01 	vldr	s13, [r3, #4]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	edd3 7a01 	vldr	s15, [r3, #4]
 8002f4a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f4e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	edd3 6a02 	vldr	s13, [r3, #8]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	edd3 7a02 	vldr	s15, [r3, #8]
 8002f5e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f62:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	edd3 6a03 	vldr	s13, [r3, #12]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	edd3 7a03 	vldr	s15, [r3, #12]
 8002f72:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f7a:	edc7 7a03 	vstr	s15, [r7, #12]

	if (norm_squared == 0.0f) {
 8002f7e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002f82:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002f86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f8a:	d110      	bne.n	8002fae <invert_quaternion+0x8a>
		// Handle the case of zero norm if needed (for example, return a specific error)
		q_inv->w = q_inv->x = q_inv->y = q_inv->z = 0.0f;
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	f04f 0200 	mov.w	r2, #0
 8002f92:	60da      	str	r2, [r3, #12]
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	68da      	ldr	r2, [r3, #12]
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	609a      	str	r2, [r3, #8]
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	689a      	ldr	r2, [r3, #8]
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	605a      	str	r2, [r3, #4]
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	685a      	ldr	r2, [r3, #4]
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	601a      	str	r2, [r3, #0]
		return;
 8002fac:	e02d      	b.n	800300a <invert_quaternion+0xe6>
	}
	// Compute the inverse as the conjugate divided by the norm squared
	q_inv->w = q->w / norm_squared;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	edd3 6a00 	vldr	s13, [r3]
 8002fb4:	ed97 7a03 	vldr	s14, [r7, #12]
 8002fb8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	edc3 7a00 	vstr	s15, [r3]
	q_inv->x = -q->x / norm_squared;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	edd3 7a01 	vldr	s15, [r3, #4]
 8002fc8:	eef1 6a67 	vneg.f32	s13, s15
 8002fcc:	ed97 7a03 	vldr	s14, [r7, #12]
 8002fd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	edc3 7a01 	vstr	s15, [r3, #4]
	q_inv->y = -q->y / norm_squared;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	edd3 7a02 	vldr	s15, [r3, #8]
 8002fe0:	eef1 6a67 	vneg.f32	s13, s15
 8002fe4:	ed97 7a03 	vldr	s14, [r7, #12]
 8002fe8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	edc3 7a02 	vstr	s15, [r3, #8]
	q_inv->z = -q->z / norm_squared;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	edd3 7a03 	vldr	s15, [r3, #12]
 8002ff8:	eef1 6a67 	vneg.f32	s13, s15
 8002ffc:	ed97 7a03 	vldr	s14, [r7, #12]
 8003000:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	edc3 7a03 	vstr	s15, [r3, #12]
}
 800300a:	3714      	adds	r7, #20
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr

08003014 <multiply_quaternions>:

void multiply_quaternions(const Quaternion* q1, const Quaternion* q2, Quaternion* qResult) {
 8003014:	b480      	push	{r7}
 8003016:	b085      	sub	sp, #20
 8003018:	af00      	add	r7, sp, #0
 800301a:	60f8      	str	r0, [r7, #12]
 800301c:	60b9      	str	r1, [r7, #8]
 800301e:	607a      	str	r2, [r7, #4]
	qResult->w = q1->w * q2->w - q1->x * q2->x - q1->y * q2->y - q1->z * q2->z;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	ed93 7a00 	vldr	s14, [r3]
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	edd3 7a00 	vldr	s15, [r3]
 800302c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	edd3 6a01 	vldr	s13, [r3, #4]
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	edd3 7a01 	vldr	s15, [r3, #4]
 800303c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003040:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	edd3 6a02 	vldr	s13, [r3, #8]
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	edd3 7a02 	vldr	s15, [r3, #8]
 8003050:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003054:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	edd3 6a03 	vldr	s13, [r3, #12]
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	edd3 7a03 	vldr	s15, [r3, #12]
 8003064:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003068:	ee77 7a67 	vsub.f32	s15, s14, s15
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	edc3 7a00 	vstr	s15, [r3]
	qResult->x = q1->w * q2->x + q1->x * q2->w + q1->y * q2->z - q1->z * q2->y;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	ed93 7a00 	vldr	s14, [r3]
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	edd3 7a01 	vldr	s15, [r3, #4]
 800307e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	edd3 6a01 	vldr	s13, [r3, #4]
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	edd3 7a00 	vldr	s15, [r3]
 800308e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003092:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	edd3 6a02 	vldr	s13, [r3, #8]
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	edd3 7a03 	vldr	s15, [r3, #12]
 80030a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	edd3 6a03 	vldr	s13, [r3, #12]
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	edd3 7a02 	vldr	s15, [r3, #8]
 80030b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	edc3 7a01 	vstr	s15, [r3, #4]
	qResult->y = q1->w * q2->y - q1->x * q2->z + q1->y * q2->w + q1->z * q2->x;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	ed93 7a00 	vldr	s14, [r3]
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	edd3 7a02 	vldr	s15, [r3, #8]
 80030d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	edd3 6a01 	vldr	s13, [r3, #4]
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	edd3 7a03 	vldr	s15, [r3, #12]
 80030e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030e4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	edd3 6a02 	vldr	s13, [r3, #8]
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	edd3 7a00 	vldr	s15, [r3]
 80030f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	edd3 6a03 	vldr	s13, [r3, #12]
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	edd3 7a01 	vldr	s15, [r3, #4]
 8003108:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800310c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	edc3 7a02 	vstr	s15, [r3, #8]
	qResult->z = q1->w * q2->z + q1->x * q2->y - q1->y * q2->x + q1->z * q2->w;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	ed93 7a00 	vldr	s14, [r3]
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	edd3 7a03 	vldr	s15, [r3, #12]
 8003122:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	edd3 6a01 	vldr	s13, [r3, #4]
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	edd3 7a02 	vldr	s15, [r3, #8]
 8003132:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003136:	ee37 7a27 	vadd.f32	s14, s14, s15
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	edd3 6a02 	vldr	s13, [r3, #8]
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	edd3 7a01 	vldr	s15, [r3, #4]
 8003146:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800314a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	edd3 6a03 	vldr	s13, [r3, #12]
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	edd3 7a00 	vldr	s15, [r3]
 800315a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800315e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8003168:	bf00      	nop
 800316a:	3714      	adds	r7, #20
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr

08003174 <calculate_rpy_from_quaternion>:
	if (value < min) return min;
	return value;
}

void calculate_rpy_from_quaternion(const Quaternion *quaternion, float roll_pitch_yaw_radians[3])
{
 8003174:	b5b0      	push	{r4, r5, r7, lr}
 8003176:	b086      	sub	sp, #24
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	6039      	str	r1, [r7, #0]
	// roll (x-axis rotation)
	float sinr_cosp = 2 * (quaternion->w * quaternion->x + quaternion->y * quaternion->z);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	ed93 7a00 	vldr	s14, [r3]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	edd3 7a01 	vldr	s15, [r3, #4]
 800318a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	edd3 6a02 	vldr	s13, [r3, #8]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	edd3 7a03 	vldr	s15, [r3, #12]
 800319a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800319e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031a2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80031a6:	edc7 7a05 	vstr	s15, [r7, #20]
	float cosr_cosp = 1 - 2 * (quaternion->x * quaternion->x + quaternion->y * quaternion->y);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	ed93 7a01 	vldr	s14, [r3, #4]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	edd3 7a01 	vldr	s15, [r3, #4]
 80031b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	edd3 6a02 	vldr	s13, [r3, #8]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	edd3 7a02 	vldr	s15, [r3, #8]
 80031c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80031ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031ce:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80031d2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80031d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031da:	edc7 7a04 	vstr	s15, [r7, #16]
	roll_pitch_yaw_radians[0] = atan2(sinr_cosp, cosr_cosp);
 80031de:	6978      	ldr	r0, [r7, #20]
 80031e0:	f7fd f9da 	bl	8000598 <__aeabi_f2d>
 80031e4:	4604      	mov	r4, r0
 80031e6:	460d      	mov	r5, r1
 80031e8:	6938      	ldr	r0, [r7, #16]
 80031ea:	f7fd f9d5 	bl	8000598 <__aeabi_f2d>
 80031ee:	4602      	mov	r2, r0
 80031f0:	460b      	mov	r3, r1
 80031f2:	ec43 2b11 	vmov	d1, r2, r3
 80031f6:	ec45 4b10 	vmov	d0, r4, r5
 80031fa:	f019 f941 	bl	801c480 <atan2>
 80031fe:	ec53 2b10 	vmov	r2, r3, d0
 8003202:	4610      	mov	r0, r2
 8003204:	4619      	mov	r1, r3
 8003206:	f7fd fcb9 	bl	8000b7c <__aeabi_d2f>
 800320a:	4602      	mov	r2, r0
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	601a      	str	r2, [r3, #0]

	// pitch (y-axis rotation)
	float sinp, cosp;
	roll_pitch_yaw_radians[1] = asinf(2 * (quaternion->w * quaternion->y - quaternion->x * quaternion->z));
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	ed93 7a00 	vldr	s14, [r3]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	edd3 7a02 	vldr	s15, [r3, #8]
 800321c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	edd3 6a01 	vldr	s13, [r3, #4]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	edd3 7a03 	vldr	s15, [r3, #12]
 800322c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003230:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003234:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	1d1c      	adds	r4, r3, #4
 800323c:	eeb0 0a67 	vmov.f32	s0, s15
 8003240:	f019 f8f2 	bl	801c428 <asinf>
 8003244:	eef0 7a40 	vmov.f32	s15, s0
 8003248:	edc4 7a00 	vstr	s15, [r4]

	// yaw (z-axis rotation)
	float siny_cosp = 2 * (quaternion->w * quaternion->z + quaternion->x * quaternion->y);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	ed93 7a00 	vldr	s14, [r3]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	edd3 7a03 	vldr	s15, [r3, #12]
 8003258:	ee27 7a27 	vmul.f32	s14, s14, s15
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	edd3 6a01 	vldr	s13, [r3, #4]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	edd3 7a02 	vldr	s15, [r3, #8]
 8003268:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800326c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003270:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003274:	edc7 7a03 	vstr	s15, [r7, #12]
	float cosy_cosp = 1 - 2 * (quaternion->y * quaternion->y + quaternion->z * quaternion->z);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	ed93 7a02 	vldr	s14, [r3, #8]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	edd3 7a02 	vldr	s15, [r3, #8]
 8003284:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	edd3 6a03 	vldr	s13, [r3, #12]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	edd3 7a03 	vldr	s15, [r3, #12]
 8003294:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003298:	ee77 7a27 	vadd.f32	s15, s14, s15
 800329c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80032a0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80032a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032a8:	edc7 7a02 	vstr	s15, [r7, #8]
	roll_pitch_yaw_radians[2] = atan2(siny_cosp, cosy_cosp);
 80032ac:	68f8      	ldr	r0, [r7, #12]
 80032ae:	f7fd f973 	bl	8000598 <__aeabi_f2d>
 80032b2:	4604      	mov	r4, r0
 80032b4:	460d      	mov	r5, r1
 80032b6:	68b8      	ldr	r0, [r7, #8]
 80032b8:	f7fd f96e 	bl	8000598 <__aeabi_f2d>
 80032bc:	4602      	mov	r2, r0
 80032be:	460b      	mov	r3, r1
 80032c0:	ec43 2b11 	vmov	d1, r2, r3
 80032c4:	ec45 4b10 	vmov	d0, r4, r5
 80032c8:	f019 f8da 	bl	801c480 <atan2>
 80032cc:	ec51 0b10 	vmov	r0, r1, d0
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	f103 0408 	add.w	r4, r3, #8
 80032d6:	f7fd fc51 	bl	8000b7c <__aeabi_d2f>
 80032da:	4603      	mov	r3, r0
 80032dc:	6023      	str	r3, [r4, #0]
}
 80032de:	bf00      	nop
 80032e0:	3718      	adds	r7, #24
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bdb0      	pop	{r4, r5, r7, pc}
	...

080032e8 <update_setpoints>:

// input_values: surge, sway, heave, roll, pitch, yaw
uint8_t update_setpoints(const float cmd_vel[6], const Quaternion * quat, const float * water_pressure) {
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b09e      	sub	sp, #120	@ 0x78
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	60f8      	str	r0, [r7, #12]
 80032f0:	60b9      	str	r1, [r7, #8]
 80032f2:	607a      	str	r2, [r7, #4]
	uint8_t count = 0;
 80032f4:	2300      	movs	r3, #0
 80032f6:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	float rpy_rads[3];
	calculate_rpy_from_quaternion(quat, rpy_rads);
 80032fa:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80032fe:	4619      	mov	r1, r3
 8003300:	68b8      	ldr	r0, [r7, #8]
 8003302:	f7ff ff37 	bl	8003174 <calculate_rpy_from_quaternion>
	// updates setpoints for angles
	for(uint8_t i = 0; i < 3; i++) {
 8003306:	2300      	movs	r3, #0
 8003308:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 800330c:	e041      	b.n	8003392 <update_setpoints+0xaa>
		if(fabsf(cmd_vel[i+3]) < TOLERANCE) {
 800330e:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8003312:	3303      	adds	r3, #3
 8003314:	009b      	lsls	r3, r3, #2
 8003316:	68fa      	ldr	r2, [r7, #12]
 8003318:	4413      	add	r3, r2
 800331a:	edd3 7a00 	vldr	s15, [r3]
 800331e:	eef0 7ae7 	vabs.f32	s15, s15
 8003322:	ee17 0a90 	vmov	r0, s15
 8003326:	f7fd f937 	bl	8000598 <__aeabi_f2d>
 800332a:	a3a9      	add	r3, pc, #676	@ (adr r3, 80035d0 <update_setpoints+0x2e8>)
 800332c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003330:	f7fd fbfc 	bl	8000b2c <__aeabi_dcmplt>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d020      	beq.n	800337c <update_setpoints+0x94>
			if(last_cmd_vel_neq_0[i+1]) {
 800333a:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 800333e:	3301      	adds	r3, #1
 8003340:	4aa5      	ldr	r2, [pc, #660]	@ (80035d8 <update_setpoints+0x2f0>)
 8003342:	5cd3      	ldrb	r3, [r2, r3]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d012      	beq.n	800336e <update_setpoints+0x86>
				setpoints[i+1] = rpy_rads[i];
 8003348:	f897 2076 	ldrb.w	r2, [r7, #118]	@ 0x76
 800334c:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8003350:	3301      	adds	r3, #1
 8003352:	0092      	lsls	r2, r2, #2
 8003354:	3278      	adds	r2, #120	@ 0x78
 8003356:	443a      	add	r2, r7
 8003358:	3a14      	subs	r2, #20
 800335a:	6812      	ldr	r2, [r2, #0]
 800335c:	499f      	ldr	r1, [pc, #636]	@ (80035dc <update_setpoints+0x2f4>)
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	440b      	add	r3, r1
 8003362:	601a      	str	r2, [r3, #0]
				count++;
 8003364:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8003368:	3301      	adds	r3, #1
 800336a:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
			}
			last_cmd_vel_neq_0[i+1] = 0;
 800336e:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8003372:	3301      	adds	r3, #1
 8003374:	4a98      	ldr	r2, [pc, #608]	@ (80035d8 <update_setpoints+0x2f0>)
 8003376:	2100      	movs	r1, #0
 8003378:	54d1      	strb	r1, [r2, r3]
 800337a:	e005      	b.n	8003388 <update_setpoints+0xa0>
		} else last_cmd_vel_neq_0[i+1] = 1;
 800337c:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8003380:	3301      	adds	r3, #1
 8003382:	4a95      	ldr	r2, [pc, #596]	@ (80035d8 <update_setpoints+0x2f0>)
 8003384:	2101      	movs	r1, #1
 8003386:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < 3; i++) {
 8003388:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 800338c:	3301      	adds	r3, #1
 800338e:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 8003392:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8003396:	2b02      	cmp	r3, #2
 8003398:	d9b9      	bls.n	800330e <update_setpoints+0x26>
	 * Updates depth setpoint
	 * In order for the setpoint to be update, I have to check the role each axis plays in changing the depth,
	 * and updating the setpoint only if all of the corresponding input values are 0
	 */
	Quaternion z_out_q;
	z_out_q.w = z_out_q.x = z_out_q.y = 0;
 800339a:	f04f 0300 	mov.w	r3, #0
 800339e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80033a0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80033a2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80033a4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80033a6:	657b      	str	r3, [r7, #84]	@ 0x54
	z_out_q.z = 1;
 80033a8:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80033ac:	663b      	str	r3, [r7, #96]	@ 0x60
	Quaternion q_inv = {0};
 80033ae:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80033b2:	2200      	movs	r2, #0
 80033b4:	601a      	str	r2, [r3, #0]
 80033b6:	605a      	str	r2, [r3, #4]
 80033b8:	609a      	str	r2, [r3, #8]
 80033ba:	60da      	str	r2, [r3, #12]
	invert_quaternion(quat, &q_inv);
 80033bc:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80033c0:	4619      	mov	r1, r3
 80033c2:	68b8      	ldr	r0, [r7, #8]
 80033c4:	f7ff fdae 	bl	8002f24 <invert_quaternion>
	// applies the inverse rotation to the z_out_q vector
	Quaternion intermediate_result = {0};
 80033c8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80033cc:	2200      	movs	r2, #0
 80033ce:	601a      	str	r2, [r3, #0]
 80033d0:	605a      	str	r2, [r3, #4]
 80033d2:	609a      	str	r2, [r3, #8]
 80033d4:	60da      	str	r2, [r3, #12]
	Quaternion z_out_RBF = {0};
 80033d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80033da:	2200      	movs	r2, #0
 80033dc:	601a      	str	r2, [r3, #0]
 80033de:	605a      	str	r2, [r3, #4]
 80033e0:	609a      	str	r2, [r3, #8]
 80033e2:	60da      	str	r2, [r3, #12]
	// rotating a vector v by q_inv = q_inv * v * q_inv_inv = q_inv * v * q
	multiply_quaternions(&q_inv, &z_out_q, &intermediate_result);
 80033e4:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 80033e8:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 80033ec:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80033f0:	4618      	mov	r0, r3
 80033f2:	f7ff fe0f 	bl	8003014 <multiply_quaternions>
	multiply_quaternions(&intermediate_result, quat, &z_out_RBF);
 80033f6:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80033fa:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80033fe:	68b9      	ldr	r1, [r7, #8]
 8003400:	4618      	mov	r0, r3
 8003402:	f7ff fe07 	bl	8003014 <multiply_quaternions>

	uint8_t x_condition = fabsf(z_out_RBF.x) < TOLERANCE || fabsf(cmd_vel[0]) < TOLERANCE;
 8003406:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800340a:	eef0 7ae7 	vabs.f32	s15, s15
 800340e:	ee17 0a90 	vmov	r0, s15
 8003412:	f7fd f8c1 	bl	8000598 <__aeabi_f2d>
 8003416:	a36e      	add	r3, pc, #440	@ (adr r3, 80035d0 <update_setpoints+0x2e8>)
 8003418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800341c:	f7fd fb86 	bl	8000b2c <__aeabi_dcmplt>
 8003420:	4603      	mov	r3, r0
 8003422:	2b00      	cmp	r3, #0
 8003424:	d110      	bne.n	8003448 <update_setpoints+0x160>
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	edd3 7a00 	vldr	s15, [r3]
 800342c:	eef0 7ae7 	vabs.f32	s15, s15
 8003430:	ee17 0a90 	vmov	r0, s15
 8003434:	f7fd f8b0 	bl	8000598 <__aeabi_f2d>
 8003438:	a365      	add	r3, pc, #404	@ (adr r3, 80035d0 <update_setpoints+0x2e8>)
 800343a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800343e:	f7fd fb75 	bl	8000b2c <__aeabi_dcmplt>
 8003442:	4603      	mov	r3, r0
 8003444:	2b00      	cmp	r3, #0
 8003446:	d001      	beq.n	800344c <update_setpoints+0x164>
 8003448:	2301      	movs	r3, #1
 800344a:	e000      	b.n	800344e <update_setpoints+0x166>
 800344c:	2300      	movs	r3, #0
 800344e:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75
	uint8_t y_condition = fabsf(z_out_RBF.y) < TOLERANCE || fabsf(cmd_vel[1]) < TOLERANCE;
 8003452:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8003456:	eef0 7ae7 	vabs.f32	s15, s15
 800345a:	ee17 0a90 	vmov	r0, s15
 800345e:	f7fd f89b 	bl	8000598 <__aeabi_f2d>
 8003462:	a35b      	add	r3, pc, #364	@ (adr r3, 80035d0 <update_setpoints+0x2e8>)
 8003464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003468:	f7fd fb60 	bl	8000b2c <__aeabi_dcmplt>
 800346c:	4603      	mov	r3, r0
 800346e:	2b00      	cmp	r3, #0
 8003470:	d111      	bne.n	8003496 <update_setpoints+0x1ae>
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	3304      	adds	r3, #4
 8003476:	edd3 7a00 	vldr	s15, [r3]
 800347a:	eef0 7ae7 	vabs.f32	s15, s15
 800347e:	ee17 0a90 	vmov	r0, s15
 8003482:	f7fd f889 	bl	8000598 <__aeabi_f2d>
 8003486:	a352      	add	r3, pc, #328	@ (adr r3, 80035d0 <update_setpoints+0x2e8>)
 8003488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800348c:	f7fd fb4e 	bl	8000b2c <__aeabi_dcmplt>
 8003490:	4603      	mov	r3, r0
 8003492:	2b00      	cmp	r3, #0
 8003494:	d001      	beq.n	800349a <update_setpoints+0x1b2>
 8003496:	2301      	movs	r3, #1
 8003498:	e000      	b.n	800349c <update_setpoints+0x1b4>
 800349a:	2300      	movs	r3, #0
 800349c:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
	uint8_t z_condition = fabsf(z_out_RBF.z) < TOLERANCE || fabsf(cmd_vel[2]) < TOLERANCE;
 80034a0:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80034a4:	eef0 7ae7 	vabs.f32	s15, s15
 80034a8:	ee17 0a90 	vmov	r0, s15
 80034ac:	f7fd f874 	bl	8000598 <__aeabi_f2d>
 80034b0:	a347      	add	r3, pc, #284	@ (adr r3, 80035d0 <update_setpoints+0x2e8>)
 80034b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034b6:	f7fd fb39 	bl	8000b2c <__aeabi_dcmplt>
 80034ba:	4603      	mov	r3, r0
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d111      	bne.n	80034e4 <update_setpoints+0x1fc>
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	3308      	adds	r3, #8
 80034c4:	edd3 7a00 	vldr	s15, [r3]
 80034c8:	eef0 7ae7 	vabs.f32	s15, s15
 80034cc:	ee17 0a90 	vmov	r0, s15
 80034d0:	f7fd f862 	bl	8000598 <__aeabi_f2d>
 80034d4:	a33e      	add	r3, pc, #248	@ (adr r3, 80035d0 <update_setpoints+0x2e8>)
 80034d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034da:	f7fd fb27 	bl	8000b2c <__aeabi_dcmplt>
 80034de:	4603      	mov	r3, r0
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d001      	beq.n	80034e8 <update_setpoints+0x200>
 80034e4:	2301      	movs	r3, #1
 80034e6:	e000      	b.n	80034ea <update_setpoints+0x202>
 80034e8:	2300      	movs	r3, #0
 80034ea:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73

	if (x_condition && y_condition && z_condition) {
 80034ee:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d014      	beq.n	8003520 <update_setpoints+0x238>
 80034f6:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d010      	beq.n	8003520 <update_setpoints+0x238>
 80034fe:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8003502:	2b00      	cmp	r3, #0
 8003504:	d00c      	beq.n	8003520 <update_setpoints+0x238>
		if(last_cmd_vel_neq_0[0]) {
 8003506:	4b34      	ldr	r3, [pc, #208]	@ (80035d8 <update_setpoints+0x2f0>)
 8003508:	781b      	ldrb	r3, [r3, #0]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d008      	beq.n	8003520 <update_setpoints+0x238>
			setpoints[0] = * water_pressure;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a32      	ldr	r2, [pc, #200]	@ (80035dc <update_setpoints+0x2f4>)
 8003514:	6013      	str	r3, [r2, #0]
			count++;
 8003516:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800351a:	3301      	adds	r3, #1
 800351c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	}

	// dentro last_cmd_vel_neq_0[0] ci devo mettere 0 se il vettore (cmd_vel[0], cmd_vel[1], cmd_vel[2])
	// ha componente nulla lungo l'asse z del EFBF
	// riuso le variabili dichiarate in precedenza visto che non mi servono più
	Quaternion cmd_vel_EFBF = {0};
 8003520:	f107 0314 	add.w	r3, r7, #20
 8003524:	2200      	movs	r2, #0
 8003526:	601a      	str	r2, [r3, #0]
 8003528:	605a      	str	r2, [r3, #4]
 800352a:	609a      	str	r2, [r3, #8]
 800352c:	60da      	str	r2, [r3, #12]
	z_out_q.w = 0;
 800352e:	f04f 0300 	mov.w	r3, #0
 8003532:	657b      	str	r3, [r7, #84]	@ 0x54
	z_out_q.x = cmd_vel[0];
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	65bb      	str	r3, [r7, #88]	@ 0x58
	z_out_q.y = cmd_vel[1];
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	3304      	adds	r3, #4
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	65fb      	str	r3, [r7, #92]	@ 0x5c
	z_out_q.z = cmd_vel[2];
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	3308      	adds	r3, #8
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	663b      	str	r3, [r7, #96]	@ 0x60
	multiply_quaternions(quat, &z_out_q, &intermediate_result);
 800354a:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800354e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003552:	4619      	mov	r1, r3
 8003554:	68b8      	ldr	r0, [r7, #8]
 8003556:	f7ff fd5d 	bl	8003014 <multiply_quaternions>
	multiply_quaternions(&intermediate_result, &q_inv, &cmd_vel_EFBF);
 800355a:	f107 0214 	add.w	r2, r7, #20
 800355e:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 8003562:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003566:	4618      	mov	r0, r3
 8003568:	f7ff fd54 	bl	8003014 <multiply_quaternions>
	if(fabsf(cmd_vel_EFBF.z) < TOLERANCE) last_cmd_vel_neq_0[0] = 0;
 800356c:	edd7 7a08 	vldr	s15, [r7, #32]
 8003570:	eef0 7ae7 	vabs.f32	s15, s15
 8003574:	ee17 0a90 	vmov	r0, s15
 8003578:	f7fd f80e 	bl	8000598 <__aeabi_f2d>
 800357c:	a314      	add	r3, pc, #80	@ (adr r3, 80035d0 <update_setpoints+0x2e8>)
 800357e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003582:	f7fd fad3 	bl	8000b2c <__aeabi_dcmplt>
 8003586:	4603      	mov	r3, r0
 8003588:	2b00      	cmp	r3, #0
 800358a:	d003      	beq.n	8003594 <update_setpoints+0x2ac>
 800358c:	4b12      	ldr	r3, [pc, #72]	@ (80035d8 <update_setpoints+0x2f0>)
 800358e:	2200      	movs	r2, #0
 8003590:	701a      	strb	r2, [r3, #0]
 8003592:	e002      	b.n	800359a <update_setpoints+0x2b2>
	else last_cmd_vel_neq_0[0] = 1;
 8003594:	4b10      	ldr	r3, [pc, #64]	@ (80035d8 <update_setpoints+0x2f0>)
 8003596:	2201      	movs	r2, #1
 8003598:	701a      	strb	r2, [r3, #0]

	if(first_update) {
 800359a:	4b11      	ldr	r3, [pc, #68]	@ (80035e0 <update_setpoints+0x2f8>)
 800359c:	781b      	ldrb	r3, [r3, #0]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d00f      	beq.n	80035c2 <update_setpoints+0x2da>
		setpoints[0] = * water_pressure;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a0d      	ldr	r2, [pc, #52]	@ (80035dc <update_setpoints+0x2f4>)
 80035a8:	6013      	str	r3, [r2, #0]
		setpoints[1] = rpy_rads[0];
 80035aa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80035ac:	4a0b      	ldr	r2, [pc, #44]	@ (80035dc <update_setpoints+0x2f4>)
 80035ae:	6053      	str	r3, [r2, #4]
		setpoints[2] = rpy_rads[1];
 80035b0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80035b2:	4a0a      	ldr	r2, [pc, #40]	@ (80035dc <update_setpoints+0x2f4>)
 80035b4:	6093      	str	r3, [r2, #8]
		setpoints[3] = rpy_rads[2];
 80035b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80035b8:	4a08      	ldr	r2, [pc, #32]	@ (80035dc <update_setpoints+0x2f4>)
 80035ba:	60d3      	str	r3, [r2, #12]
		first_update = 0;
 80035bc:	4b08      	ldr	r3, [pc, #32]	@ (80035e0 <update_setpoints+0x2f8>)
 80035be:	2200      	movs	r2, #0
 80035c0:	701a      	strb	r2, [r3, #0]
	}

	return count;
 80035c2:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3778      	adds	r7, #120	@ 0x78
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	9999999a 	.word	0x9999999a
 80035d4:	3fa99999 	.word	0x3fa99999
 80035d8:	200000c8 	.word	0x200000c8
 80035dc:	2000b318 	.word	0x2000b318
 80035e0:	200000cc 	.word	0x200000cc
 80035e4:	00000000 	.word	0x00000000

080035e8 <calculate_pwm_with_pid>:
        arm_pid_init_f32(&pids[i], 0);
    }
}

arm_status calculate_pwm_with_pid(const float joystick_input[6], uint32_t pwm_output[8], const Quaternion *orientation_quaternion,
		const float *water_pressure) {
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b0b0      	sub	sp, #192	@ 0xc0
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	60f8      	str	r0, [r7, #12]
 80035f0:	60b9      	str	r1, [r7, #8]
 80035f2:	607a      	str	r2, [r7, #4]
 80035f4:	603b      	str	r3, [r7, #0]
	// The order for 4-elements arrays is: z, roll, pitch, yaw
	// calculate current values
	float current_values[4];
	calculate_rpy_from_quaternion(orientation_quaternion, &current_values[1]);
 80035f6:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80035fa:	3304      	adds	r3, #4
 80035fc:	4619      	mov	r1, r3
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f7ff fdb8 	bl	8003174 <calculate_rpy_from_quaternion>

	// TODO conversion from water pressure to depth
	current_values[0] = *water_pressure;
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	66fb      	str	r3, [r7, #108]	@ 0x6c

	update_setpoints(joystick_input, orientation_quaternion, water_pressure);
 800360a:	683a      	ldr	r2, [r7, #0]
 800360c:	6879      	ldr	r1, [r7, #4]
 800360e:	68f8      	ldr	r0, [r7, #12]
 8003610:	f7ff fe6a 	bl	80032e8 <update_setpoints>
	float input_values[6];
	for(uint8_t i = 0; i < 6; i++) input_values[i] = joystick_input[i];
 8003614:	2300      	movs	r3, #0
 8003616:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
 800361a:	e011      	b.n	8003640 <calculate_pwm_with_pid+0x58>
 800361c:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 8003620:	009b      	lsls	r3, r3, #2
 8003622:	68fa      	ldr	r2, [r7, #12]
 8003624:	441a      	add	r2, r3
 8003626:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 800362a:	6812      	ldr	r2, [r2, #0]
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	33c0      	adds	r3, #192	@ 0xc0
 8003630:	443b      	add	r3, r7
 8003632:	3b6c      	subs	r3, #108	@ 0x6c
 8003634:	601a      	str	r2, [r3, #0]
 8003636:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 800363a:	3301      	adds	r3, #1
 800363c:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
 8003640:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 8003644:	2b05      	cmp	r3, #5
 8003646:	d9e9      	bls.n	800361c <calculate_pwm_with_pid+0x34>

	float roll_pid_feedback = arm_pid_f32(&pids[1], setpoints[1] - current_values[1]);
 8003648:	4bcd      	ldr	r3, [pc, #820]	@ (8003980 <calculate_pwm_with_pid+0x398>)
 800364a:	ed93 7a01 	vldr	s14, [r3, #4]
 800364e:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8003652:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003656:	4bcb      	ldr	r3, [pc, #812]	@ (8003984 <calculate_pwm_with_pid+0x39c>)
 8003658:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800365c:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8003660:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003664:	ed93 7a00 	vldr	s14, [r3]
 8003668:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 800366c:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8003670:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003674:	edd3 6a01 	vldr	s13, [r3, #4]
 8003678:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800367c:	edd3 7a03 	vldr	s15, [r3, #12]
 8003680:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8003684:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8003688:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800368c:	edd3 6a02 	vldr	s13, [r3, #8]
 8003690:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003694:	edd3 7a04 	vldr	s15, [r3, #16]
 8003698:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800369c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80036a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80036a4:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 80036a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036ac:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c

    /* Update state */
    S->state[1] = S->state[0];
 80036b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80036b4:	68da      	ldr	r2, [r3, #12]
 80036b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80036ba:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 80036bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80036c0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80036c4:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 80036c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80036ca:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80036cc:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 80036ce:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80036d0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
	float pitch_pid_feedback = arm_pid_f32(&pids[2], setpoints[2] - current_values[2]);
 80036d4:	4baa      	ldr	r3, [pc, #680]	@ (8003980 <calculate_pwm_with_pid+0x398>)
 80036d6:	ed93 7a02 	vldr	s14, [r3, #8]
 80036da:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 80036de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036e2:	4ba9      	ldr	r3, [pc, #676]	@ (8003988 <calculate_pwm_with_pid+0x3a0>)
 80036e4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80036e8:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
    out = (S->A0 * in) +
 80036ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80036f0:	ed93 7a00 	vldr	s14, [r3]
 80036f4:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 80036f8:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80036fc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003700:	edd3 6a01 	vldr	s13, [r3, #4]
 8003704:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003708:	edd3 7a03 	vldr	s15, [r3, #12]
 800370c:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8003710:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8003714:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003718:	edd3 6a02 	vldr	s13, [r3, #8]
 800371c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003720:	edd3 7a04 	vldr	s15, [r3, #16]
 8003724:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003728:	ee37 7a27 	vadd.f32	s14, s14, s15
 800372c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003730:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8003734:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003738:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88
    S->state[1] = S->state[0];
 800373c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003740:	68da      	ldr	r2, [r3, #12]
 8003742:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003746:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8003748:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800374c:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8003750:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8003752:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003756:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800375a:	615a      	str	r2, [r3, #20]
    return (out);
 800375c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003760:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
	float yaw_pid_feedback = arm_pid_f32(&pids[3], setpoints[3] - current_values[3]);
 8003764:	4b86      	ldr	r3, [pc, #536]	@ (8003980 <calculate_pwm_with_pid+0x398>)
 8003766:	ed93 7a03 	vldr	s14, [r3, #12]
 800376a:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 800376e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003772:	4b86      	ldr	r3, [pc, #536]	@ (800398c <calculate_pwm_with_pid+0x3a4>)
 8003774:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003778:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
    out = (S->A0 * in) +
 800377c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003780:	ed93 7a00 	vldr	s14, [r3]
 8003784:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 8003788:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 800378c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003790:	edd3 6a01 	vldr	s13, [r3, #4]
 8003794:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003798:	edd3 7a03 	vldr	s15, [r3, #12]
 800379c:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 80037a0:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80037a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80037a8:	edd3 6a02 	vldr	s13, [r3, #8]
 80037ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80037b0:	edd3 7a04 	vldr	s15, [r3, #16]
 80037b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80037b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80037bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80037c0:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 80037c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037c8:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
    S->state[1] = S->state[0];
 80037cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80037d0:	68da      	ldr	r2, [r3, #12]
 80037d2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80037d6:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 80037d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80037dc:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80037e0:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 80037e2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80037e6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80037ea:	615a      	str	r2, [r3, #20]
    return (out);
 80037ec:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80037f0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
	 * we need to convert the output of the PID to the body frame in order to modify the input, in order to achieve the desired depth hold.
	*/
	// Applies the inverse rotation of the rov-body-frame (RBF) from the earth-fixed-body-frame (EFBF) ( described by the orientation quaternion ),
	// in order to compute the coordinates of the z_out vector with respect to the RBF.
	Quaternion z_out_q;
	z_out_q.w = z_out_q.x = z_out_q.y = 0;
 80037f4:	f04f 0300 	mov.w	r3, #0
 80037f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80037fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80037fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80037fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003800:	647b      	str	r3, [r7, #68]	@ 0x44
	z_out_q.z = arm_pid_f32(&pids[0], setpoints[0] - current_values[0]);
 8003802:	4b5f      	ldr	r3, [pc, #380]	@ (8003980 <calculate_pwm_with_pid+0x398>)
 8003804:	ed93 7a00 	vldr	s14, [r3]
 8003808:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 800380c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003810:	4b5f      	ldr	r3, [pc, #380]	@ (8003990 <calculate_pwm_with_pid+0x3a8>)
 8003812:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003816:	edc7 7a29 	vstr	s15, [r7, #164]	@ 0xa4
    out = (S->A0 * in) +
 800381a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800381e:	ed93 7a00 	vldr	s14, [r3]
 8003822:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 8003826:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 800382a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800382e:	edd3 6a01 	vldr	s13, [r3, #4]
 8003832:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003836:	edd3 7a03 	vldr	s15, [r3, #12]
 800383a:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 800383e:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8003842:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003846:	edd3 6a02 	vldr	s13, [r3, #8]
 800384a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800384e:	edd3 7a04 	vldr	s15, [r3, #16]
 8003852:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003856:	ee37 7a27 	vadd.f32	s14, s14, s15
 800385a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800385e:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8003862:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003866:	edc7 7a28 	vstr	s15, [r7, #160]	@ 0xa0
    S->state[1] = S->state[0];
 800386a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800386e:	68da      	ldr	r2, [r3, #12]
 8003870:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003874:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8003876:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800387a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800387e:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8003880:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003884:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8003888:	615a      	str	r2, [r3, #20]
    return (out);
 800388a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800388e:	653b      	str	r3, [r7, #80]	@ 0x50
	Quaternion q_inv = {0};
 8003890:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003894:	2200      	movs	r2, #0
 8003896:	601a      	str	r2, [r3, #0]
 8003898:	605a      	str	r2, [r3, #4]
 800389a:	609a      	str	r2, [r3, #8]
 800389c:	60da      	str	r2, [r3, #12]
	invert_quaternion(orientation_quaternion, &q_inv);
 800389e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80038a2:	4619      	mov	r1, r3
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	f7ff fb3d 	bl	8002f24 <invert_quaternion>
	
	// applies the inverse rotation to the z_out_q vector
	Quaternion intermediate_result = {0};
 80038aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80038ae:	2200      	movs	r2, #0
 80038b0:	601a      	str	r2, [r3, #0]
 80038b2:	605a      	str	r2, [r3, #4]
 80038b4:	609a      	str	r2, [r3, #8]
 80038b6:	60da      	str	r2, [r3, #12]
	Quaternion z_out_RBF = {0};
 80038b8:	f107 0314 	add.w	r3, r7, #20
 80038bc:	2200      	movs	r2, #0
 80038be:	601a      	str	r2, [r3, #0]
 80038c0:	605a      	str	r2, [r3, #4]
 80038c2:	609a      	str	r2, [r3, #8]
 80038c4:	60da      	str	r2, [r3, #12]
	// rotating a vector v by q_inv = q_inv * v * q_inv_inv = q_inv * v * q
	multiply_quaternions(&q_inv, &z_out_q, &intermediate_result);
 80038c6:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80038ca:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 80038ce:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80038d2:	4618      	mov	r0, r3
 80038d4:	f7ff fb9e 	bl	8003014 <multiply_quaternions>
	multiply_quaternions(&intermediate_result, orientation_quaternion, &z_out_RBF);
 80038d8:	f107 0214 	add.w	r2, r7, #20
 80038dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80038e0:	6879      	ldr	r1, [r7, #4]
 80038e2:	4618      	mov	r0, r3
 80038e4:	f7ff fb96 	bl	8003014 <multiply_quaternions>

	// apply the feedback on x y z axis if and only if either the feedback is approx 0, or the input value by the user is approx 0.
	// This condition must be met for every axis value
	uint8_t x_condition = fabsf(z_out_RBF.x) < TOLERANCE || fabsf(input_values[0]) < TOLERANCE;
 80038e8:	edd7 7a06 	vldr	s15, [r7, #24]
 80038ec:	eef0 7ae7 	vabs.f32	s15, s15
 80038f0:	ee17 0a90 	vmov	r0, s15
 80038f4:	f7fc fe50 	bl	8000598 <__aeabi_f2d>
 80038f8:	a31f      	add	r3, pc, #124	@ (adr r3, 8003978 <calculate_pwm_with_pid+0x390>)
 80038fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038fe:	f7fd f915 	bl	8000b2c <__aeabi_dcmplt>
 8003902:	4603      	mov	r3, r0
 8003904:	2b00      	cmp	r3, #0
 8003906:	d10f      	bne.n	8003928 <calculate_pwm_with_pid+0x340>
 8003908:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800390c:	eef0 7ae7 	vabs.f32	s15, s15
 8003910:	ee17 0a90 	vmov	r0, s15
 8003914:	f7fc fe40 	bl	8000598 <__aeabi_f2d>
 8003918:	a317      	add	r3, pc, #92	@ (adr r3, 8003978 <calculate_pwm_with_pid+0x390>)
 800391a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800391e:	f7fd f905 	bl	8000b2c <__aeabi_dcmplt>
 8003922:	4603      	mov	r3, r0
 8003924:	2b00      	cmp	r3, #0
 8003926:	d001      	beq.n	800392c <calculate_pwm_with_pid+0x344>
 8003928:	2301      	movs	r3, #1
 800392a:	e000      	b.n	800392e <calculate_pwm_with_pid+0x346>
 800392c:	2300      	movs	r3, #0
 800392e:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
	uint8_t y_condition = fabsf(z_out_RBF.y) < TOLERANCE || fabsf(input_values[1]) < TOLERANCE;
 8003932:	edd7 7a07 	vldr	s15, [r7, #28]
 8003936:	eef0 7ae7 	vabs.f32	s15, s15
 800393a:	ee17 0a90 	vmov	r0, s15
 800393e:	f7fc fe2b 	bl	8000598 <__aeabi_f2d>
 8003942:	a30d      	add	r3, pc, #52	@ (adr r3, 8003978 <calculate_pwm_with_pid+0x390>)
 8003944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003948:	f7fd f8f0 	bl	8000b2c <__aeabi_dcmplt>
 800394c:	4603      	mov	r3, r0
 800394e:	2b00      	cmp	r3, #0
 8003950:	d10f      	bne.n	8003972 <calculate_pwm_with_pid+0x38a>
 8003952:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8003956:	eef0 7ae7 	vabs.f32	s15, s15
 800395a:	ee17 0a90 	vmov	r0, s15
 800395e:	f7fc fe1b 	bl	8000598 <__aeabi_f2d>
 8003962:	a305      	add	r3, pc, #20	@ (adr r3, 8003978 <calculate_pwm_with_pid+0x390>)
 8003964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003968:	f7fd f8e0 	bl	8000b2c <__aeabi_dcmplt>
 800396c:	4603      	mov	r3, r0
 800396e:	2b00      	cmp	r3, #0
 8003970:	d010      	beq.n	8003994 <calculate_pwm_with_pid+0x3ac>
 8003972:	2301      	movs	r3, #1
 8003974:	e00f      	b.n	8003996 <calculate_pwm_with_pid+0x3ae>
 8003976:	bf00      	nop
 8003978:	9999999a 	.word	0x9999999a
 800397c:	3fa99999 	.word	0x3fa99999
 8003980:	2000b318 	.word	0x2000b318
 8003984:	2000b34c 	.word	0x2000b34c
 8003988:	2000b370 	.word	0x2000b370
 800398c:	2000b394 	.word	0x2000b394
 8003990:	2000b328 	.word	0x2000b328
 8003994:	2300      	movs	r3, #0
 8003996:	f887 30ae 	strb.w	r3, [r7, #174]	@ 0xae
	uint8_t z_condition = fabsf(z_out_RBF.z) < TOLERANCE || fabsf(input_values[2]) < TOLERANCE;
 800399a:	edd7 7a08 	vldr	s15, [r7, #32]
 800399e:	eef0 7ae7 	vabs.f32	s15, s15
 80039a2:	ee17 0a90 	vmov	r0, s15
 80039a6:	f7fc fdf7 	bl	8000598 <__aeabi_f2d>
 80039aa:	a363      	add	r3, pc, #396	@ (adr r3, 8003b38 <calculate_pwm_with_pid+0x550>)
 80039ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039b0:	f7fd f8bc 	bl	8000b2c <__aeabi_dcmplt>
 80039b4:	4603      	mov	r3, r0
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d10f      	bne.n	80039da <calculate_pwm_with_pid+0x3f2>
 80039ba:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 80039be:	eef0 7ae7 	vabs.f32	s15, s15
 80039c2:	ee17 0a90 	vmov	r0, s15
 80039c6:	f7fc fde7 	bl	8000598 <__aeabi_f2d>
 80039ca:	a35b      	add	r3, pc, #364	@ (adr r3, 8003b38 <calculate_pwm_with_pid+0x550>)
 80039cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039d0:	f7fd f8ac 	bl	8000b2c <__aeabi_dcmplt>
 80039d4:	4603      	mov	r3, r0
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d001      	beq.n	80039de <calculate_pwm_with_pid+0x3f6>
 80039da:	2301      	movs	r3, #1
 80039dc:	e000      	b.n	80039e0 <calculate_pwm_with_pid+0x3f8>
 80039de:	2300      	movs	r3, #0
 80039e0:	f887 30ad 	strb.w	r3, [r7, #173]	@ 0xad

	if (x_condition && y_condition && z_condition) {
 80039e4:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d01f      	beq.n	8003a2c <calculate_pwm_with_pid+0x444>
 80039ec:	f897 30ae 	ldrb.w	r3, [r7, #174]	@ 0xae
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d01b      	beq.n	8003a2c <calculate_pwm_with_pid+0x444>
 80039f4:	f897 30ad 	ldrb.w	r3, [r7, #173]	@ 0xad
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d017      	beq.n	8003a2c <calculate_pwm_with_pid+0x444>
		input_values[0] += z_out_RBF.x;
 80039fc:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8003a00:	edd7 7a06 	vldr	s15, [r7, #24]
 8003a04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a08:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
		input_values[1] += z_out_RBF.y;
 8003a0c:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8003a10:	edd7 7a07 	vldr	s15, [r7, #28]
 8003a14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a18:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
		input_values[2] += z_out_RBF.z;
 8003a1c:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8003a20:	edd7 7a08 	vldr	s15, [r7, #32]
 8003a24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a28:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
	}

	// roll
	if (fabsf(pitch_pid_feedback) < TOLERANCE || fabsf(input_values[3]) < TOLERANCE) {
 8003a2c:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 8003a30:	eef0 7ae7 	vabs.f32	s15, s15
 8003a34:	ee17 0a90 	vmov	r0, s15
 8003a38:	f7fc fdae 	bl	8000598 <__aeabi_f2d>
 8003a3c:	a33e      	add	r3, pc, #248	@ (adr r3, 8003b38 <calculate_pwm_with_pid+0x550>)
 8003a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a42:	f7fd f873 	bl	8000b2c <__aeabi_dcmplt>
 8003a46:	4603      	mov	r3, r0
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d10f      	bne.n	8003a6c <calculate_pwm_with_pid+0x484>
 8003a4c:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8003a50:	eef0 7ae7 	vabs.f32	s15, s15
 8003a54:	ee17 0a90 	vmov	r0, s15
 8003a58:	f7fc fd9e 	bl	8000598 <__aeabi_f2d>
 8003a5c:	a336      	add	r3, pc, #216	@ (adr r3, 8003b38 <calculate_pwm_with_pid+0x550>)
 8003a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a62:	f7fd f863 	bl	8000b2c <__aeabi_dcmplt>
 8003a66:	4603      	mov	r3, r0
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d007      	beq.n	8003a7c <calculate_pwm_with_pid+0x494>
		input_values[3] += roll_pid_feedback;
 8003a6c:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8003a70:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 8003a74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a78:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
	}
	// pitch
	if (fabsf(roll_pid_feedback) < TOLERANCE || fabsf(input_values[4]) < TOLERANCE) {
 8003a7c:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 8003a80:	eef0 7ae7 	vabs.f32	s15, s15
 8003a84:	ee17 0a90 	vmov	r0, s15
 8003a88:	f7fc fd86 	bl	8000598 <__aeabi_f2d>
 8003a8c:	a32a      	add	r3, pc, #168	@ (adr r3, 8003b38 <calculate_pwm_with_pid+0x550>)
 8003a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a92:	f7fd f84b 	bl	8000b2c <__aeabi_dcmplt>
 8003a96:	4603      	mov	r3, r0
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d10f      	bne.n	8003abc <calculate_pwm_with_pid+0x4d4>
 8003a9c:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8003aa0:	eef0 7ae7 	vabs.f32	s15, s15
 8003aa4:	ee17 0a90 	vmov	r0, s15
 8003aa8:	f7fc fd76 	bl	8000598 <__aeabi_f2d>
 8003aac:	a322      	add	r3, pc, #136	@ (adr r3, 8003b38 <calculate_pwm_with_pid+0x550>)
 8003aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ab2:	f7fd f83b 	bl	8000b2c <__aeabi_dcmplt>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d007      	beq.n	8003acc <calculate_pwm_with_pid+0x4e4>
		input_values[4] += pitch_pid_feedback;
 8003abc:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 8003ac0:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 8003ac4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ac8:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
	}
	// yaw
	if (fabsf(yaw_pid_feedback) < TOLERANCE || fabsf(input_values[5]) < TOLERANCE) {
 8003acc:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8003ad0:	eef0 7ae7 	vabs.f32	s15, s15
 8003ad4:	ee17 0a90 	vmov	r0, s15
 8003ad8:	f7fc fd5e 	bl	8000598 <__aeabi_f2d>
 8003adc:	a316      	add	r3, pc, #88	@ (adr r3, 8003b38 <calculate_pwm_with_pid+0x550>)
 8003ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ae2:	f7fd f823 	bl	8000b2c <__aeabi_dcmplt>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d10f      	bne.n	8003b0c <calculate_pwm_with_pid+0x524>
 8003aec:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8003af0:	eef0 7ae7 	vabs.f32	s15, s15
 8003af4:	ee17 0a90 	vmov	r0, s15
 8003af8:	f7fc fd4e 	bl	8000598 <__aeabi_f2d>
 8003afc:	a30e      	add	r3, pc, #56	@ (adr r3, 8003b38 <calculate_pwm_with_pid+0x550>)
 8003afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b02:	f7fd f813 	bl	8000b2c <__aeabi_dcmplt>
 8003b06:	4603      	mov	r3, r0
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d007      	beq.n	8003b1c <calculate_pwm_with_pid+0x534>
		input_values[5] += yaw_pid_feedback;
 8003b0c:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 8003b10:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8003b14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b18:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68
	}

	return calculate_pwm(&input_values, pwm_output);
 8003b1c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003b20:	68b9      	ldr	r1, [r7, #8]
 8003b22:	4618      	mov	r0, r3
 8003b24:	f7ff f944 	bl	8002db0 <calculate_pwm>
 8003b28:	4603      	mov	r3, r0
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	37c0      	adds	r7, #192	@ 0xc0
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	bf00      	nop
 8003b34:	f3af 8000 	nop.w
 8003b38:	9999999a 	.word	0x9999999a
 8003b3c:	3fa99999 	.word	0x3fa99999

08003b40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003b40:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003b78 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003b44:	f7fe fe4e 	bl	80027e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003b48:	480c      	ldr	r0, [pc, #48]	@ (8003b7c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003b4a:	490d      	ldr	r1, [pc, #52]	@ (8003b80 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003b4c:	4a0d      	ldr	r2, [pc, #52]	@ (8003b84 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003b4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003b50:	e002      	b.n	8003b58 <LoopCopyDataInit>

08003b52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003b52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003b54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003b56:	3304      	adds	r3, #4

08003b58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003b58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003b5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003b5c:	d3f9      	bcc.n	8003b52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003b5e:	4a0a      	ldr	r2, [pc, #40]	@ (8003b88 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003b60:	4c0a      	ldr	r4, [pc, #40]	@ (8003b8c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003b62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003b64:	e001      	b.n	8003b6a <LoopFillZerobss>

08003b66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003b66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003b68:	3204      	adds	r2, #4

08003b6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003b6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003b6c:	d3fb      	bcc.n	8003b66 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8003b6e:	f019 fcc5 	bl	801d4fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003b72:	f7fe fa47 	bl	8002004 <main>
  bx  lr    
 8003b76:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003b78:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8003b7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003b80:	2000337c 	.word	0x2000337c
  ldr r2, =_sidata
 8003b84:	08020ab0 	.word	0x08020ab0
  ldr r2, =_sbss
 8003b88:	20003380 	.word	0x20003380
  ldr r4, =_ebss
 8003b8c:	20019d8c 	.word	0x20019d8c

08003b90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003b90:	e7fe      	b.n	8003b90 <ADC_IRQHandler>
	...

08003b94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003b98:	4b0e      	ldr	r3, [pc, #56]	@ (8003bd4 <HAL_Init+0x40>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a0d      	ldr	r2, [pc, #52]	@ (8003bd4 <HAL_Init+0x40>)
 8003b9e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003ba2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003ba4:	4b0b      	ldr	r3, [pc, #44]	@ (8003bd4 <HAL_Init+0x40>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a0a      	ldr	r2, [pc, #40]	@ (8003bd4 <HAL_Init+0x40>)
 8003baa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003bae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003bb0:	4b08      	ldr	r3, [pc, #32]	@ (8003bd4 <HAL_Init+0x40>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a07      	ldr	r2, [pc, #28]	@ (8003bd4 <HAL_Init+0x40>)
 8003bb6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003bbc:	2003      	movs	r0, #3
 8003bbe:	f000 f8d8 	bl	8003d72 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003bc2:	200f      	movs	r0, #15
 8003bc4:	f7fe fcac 	bl	8002520 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003bc8:	f7fe fc7e 	bl	80024c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003bcc:	2300      	movs	r3, #0
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	40023c00 	.word	0x40023c00

08003bd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003bdc:	4b06      	ldr	r3, [pc, #24]	@ (8003bf8 <HAL_IncTick+0x20>)
 8003bde:	781b      	ldrb	r3, [r3, #0]
 8003be0:	461a      	mov	r2, r3
 8003be2:	4b06      	ldr	r3, [pc, #24]	@ (8003bfc <HAL_IncTick+0x24>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4413      	add	r3, r2
 8003be8:	4a04      	ldr	r2, [pc, #16]	@ (8003bfc <HAL_IncTick+0x24>)
 8003bea:	6013      	str	r3, [r2, #0]
}
 8003bec:	bf00      	nop
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr
 8003bf6:	bf00      	nop
 8003bf8:	200000d4 	.word	0x200000d4
 8003bfc:	2000b3b8 	.word	0x2000b3b8

08003c00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c00:	b480      	push	{r7}
 8003c02:	af00      	add	r7, sp, #0
  return uwTick;
 8003c04:	4b03      	ldr	r3, [pc, #12]	@ (8003c14 <HAL_GetTick+0x14>)
 8003c06:	681b      	ldr	r3, [r3, #0]
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr
 8003c12:	bf00      	nop
 8003c14:	2000b3b8 	.word	0x2000b3b8

08003c18 <__NVIC_SetPriorityGrouping>:
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b085      	sub	sp, #20
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	f003 0307 	and.w	r3, r3, #7
 8003c26:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c28:	4b0c      	ldr	r3, [pc, #48]	@ (8003c5c <__NVIC_SetPriorityGrouping+0x44>)
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c2e:	68ba      	ldr	r2, [r7, #8]
 8003c30:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003c34:	4013      	ands	r3, r2
 8003c36:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c40:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003c44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c4a:	4a04      	ldr	r2, [pc, #16]	@ (8003c5c <__NVIC_SetPriorityGrouping+0x44>)
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	60d3      	str	r3, [r2, #12]
}
 8003c50:	bf00      	nop
 8003c52:	3714      	adds	r7, #20
 8003c54:	46bd      	mov	sp, r7
 8003c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5a:	4770      	bx	lr
 8003c5c:	e000ed00 	.word	0xe000ed00

08003c60 <__NVIC_GetPriorityGrouping>:
{
 8003c60:	b480      	push	{r7}
 8003c62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c64:	4b04      	ldr	r3, [pc, #16]	@ (8003c78 <__NVIC_GetPriorityGrouping+0x18>)
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	0a1b      	lsrs	r3, r3, #8
 8003c6a:	f003 0307 	and.w	r3, r3, #7
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr
 8003c78:	e000ed00 	.word	0xe000ed00

08003c7c <__NVIC_EnableIRQ>:
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b083      	sub	sp, #12
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	4603      	mov	r3, r0
 8003c84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	db0b      	blt.n	8003ca6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c8e:	79fb      	ldrb	r3, [r7, #7]
 8003c90:	f003 021f 	and.w	r2, r3, #31
 8003c94:	4907      	ldr	r1, [pc, #28]	@ (8003cb4 <__NVIC_EnableIRQ+0x38>)
 8003c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c9a:	095b      	lsrs	r3, r3, #5
 8003c9c:	2001      	movs	r0, #1
 8003c9e:	fa00 f202 	lsl.w	r2, r0, r2
 8003ca2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003ca6:	bf00      	nop
 8003ca8:	370c      	adds	r7, #12
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr
 8003cb2:	bf00      	nop
 8003cb4:	e000e100 	.word	0xe000e100

08003cb8 <__NVIC_SetPriority>:
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b083      	sub	sp, #12
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	6039      	str	r1, [r7, #0]
 8003cc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	db0a      	blt.n	8003ce2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	b2da      	uxtb	r2, r3
 8003cd0:	490c      	ldr	r1, [pc, #48]	@ (8003d04 <__NVIC_SetPriority+0x4c>)
 8003cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cd6:	0112      	lsls	r2, r2, #4
 8003cd8:	b2d2      	uxtb	r2, r2
 8003cda:	440b      	add	r3, r1
 8003cdc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003ce0:	e00a      	b.n	8003cf8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	b2da      	uxtb	r2, r3
 8003ce6:	4908      	ldr	r1, [pc, #32]	@ (8003d08 <__NVIC_SetPriority+0x50>)
 8003ce8:	79fb      	ldrb	r3, [r7, #7]
 8003cea:	f003 030f 	and.w	r3, r3, #15
 8003cee:	3b04      	subs	r3, #4
 8003cf0:	0112      	lsls	r2, r2, #4
 8003cf2:	b2d2      	uxtb	r2, r2
 8003cf4:	440b      	add	r3, r1
 8003cf6:	761a      	strb	r2, [r3, #24]
}
 8003cf8:	bf00      	nop
 8003cfa:	370c      	adds	r7, #12
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr
 8003d04:	e000e100 	.word	0xe000e100
 8003d08:	e000ed00 	.word	0xe000ed00

08003d0c <NVIC_EncodePriority>:
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b089      	sub	sp, #36	@ 0x24
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	60f8      	str	r0, [r7, #12]
 8003d14:	60b9      	str	r1, [r7, #8]
 8003d16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f003 0307 	and.w	r3, r3, #7
 8003d1e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d20:	69fb      	ldr	r3, [r7, #28]
 8003d22:	f1c3 0307 	rsb	r3, r3, #7
 8003d26:	2b04      	cmp	r3, #4
 8003d28:	bf28      	it	cs
 8003d2a:	2304      	movcs	r3, #4
 8003d2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d2e:	69fb      	ldr	r3, [r7, #28]
 8003d30:	3304      	adds	r3, #4
 8003d32:	2b06      	cmp	r3, #6
 8003d34:	d902      	bls.n	8003d3c <NVIC_EncodePriority+0x30>
 8003d36:	69fb      	ldr	r3, [r7, #28]
 8003d38:	3b03      	subs	r3, #3
 8003d3a:	e000      	b.n	8003d3e <NVIC_EncodePriority+0x32>
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d40:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003d44:	69bb      	ldr	r3, [r7, #24]
 8003d46:	fa02 f303 	lsl.w	r3, r2, r3
 8003d4a:	43da      	mvns	r2, r3
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	401a      	ands	r2, r3
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d54:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d5e:	43d9      	mvns	r1, r3
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d64:	4313      	orrs	r3, r2
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3724      	adds	r7, #36	@ 0x24
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr

08003d72 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d72:	b580      	push	{r7, lr}
 8003d74:	b082      	sub	sp, #8
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f7ff ff4c 	bl	8003c18 <__NVIC_SetPriorityGrouping>
}
 8003d80:	bf00      	nop
 8003d82:	3708      	adds	r7, #8
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}

08003d88 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b086      	sub	sp, #24
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	4603      	mov	r3, r0
 8003d90:	60b9      	str	r1, [r7, #8]
 8003d92:	607a      	str	r2, [r7, #4]
 8003d94:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003d96:	2300      	movs	r3, #0
 8003d98:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003d9a:	f7ff ff61 	bl	8003c60 <__NVIC_GetPriorityGrouping>
 8003d9e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003da0:	687a      	ldr	r2, [r7, #4]
 8003da2:	68b9      	ldr	r1, [r7, #8]
 8003da4:	6978      	ldr	r0, [r7, #20]
 8003da6:	f7ff ffb1 	bl	8003d0c <NVIC_EncodePriority>
 8003daa:	4602      	mov	r2, r0
 8003dac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003db0:	4611      	mov	r1, r2
 8003db2:	4618      	mov	r0, r3
 8003db4:	f7ff ff80 	bl	8003cb8 <__NVIC_SetPriority>
}
 8003db8:	bf00      	nop
 8003dba:	3718      	adds	r7, #24
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}

08003dc0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b082      	sub	sp, #8
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f7ff ff54 	bl	8003c7c <__NVIC_EnableIRQ>
}
 8003dd4:	bf00      	nop
 8003dd6:	3708      	adds	r7, #8
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}

08003ddc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b086      	sub	sp, #24
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003de4:	2300      	movs	r3, #0
 8003de6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003de8:	f7ff ff0a 	bl	8003c00 <HAL_GetTick>
 8003dec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d101      	bne.n	8003df8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e099      	b.n	8003f2c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2202      	movs	r2, #2
 8003dfc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2200      	movs	r2, #0
 8003e04:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f022 0201 	bic.w	r2, r2, #1
 8003e16:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e18:	e00f      	b.n	8003e3a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003e1a:	f7ff fef1 	bl	8003c00 <HAL_GetTick>
 8003e1e:	4602      	mov	r2, r0
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	1ad3      	subs	r3, r2, r3
 8003e24:	2b05      	cmp	r3, #5
 8003e26:	d908      	bls.n	8003e3a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2220      	movs	r2, #32
 8003e2c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2203      	movs	r2, #3
 8003e32:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003e36:	2303      	movs	r3, #3
 8003e38:	e078      	b.n	8003f2c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 0301 	and.w	r3, r3, #1
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d1e8      	bne.n	8003e1a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003e50:	697a      	ldr	r2, [r7, #20]
 8003e52:	4b38      	ldr	r3, [pc, #224]	@ (8003f34 <HAL_DMA_Init+0x158>)
 8003e54:	4013      	ands	r3, r2
 8003e56:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	685a      	ldr	r2, [r3, #4]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003e66:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	691b      	ldr	r3, [r3, #16]
 8003e6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e72:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	699b      	ldr	r3, [r3, #24]
 8003e78:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e7e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6a1b      	ldr	r3, [r3, #32]
 8003e84:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003e86:	697a      	ldr	r2, [r7, #20]
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e90:	2b04      	cmp	r3, #4
 8003e92:	d107      	bne.n	8003ea4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	697a      	ldr	r2, [r7, #20]
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	697a      	ldr	r2, [r7, #20]
 8003eaa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	695b      	ldr	r3, [r3, #20]
 8003eb2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	f023 0307 	bic.w	r3, r3, #7
 8003eba:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ec0:	697a      	ldr	r2, [r7, #20]
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eca:	2b04      	cmp	r3, #4
 8003ecc:	d117      	bne.n	8003efe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ed2:	697a      	ldr	r2, [r7, #20]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d00e      	beq.n	8003efe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	f000 fb01 	bl	80044e8 <DMA_CheckFifoParam>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d008      	beq.n	8003efe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2240      	movs	r2, #64	@ 0x40
 8003ef0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003efa:	2301      	movs	r3, #1
 8003efc:	e016      	b.n	8003f2c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	697a      	ldr	r2, [r7, #20]
 8003f04:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f000 fab8 	bl	800447c <DMA_CalcBaseAndBitshift>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f14:	223f      	movs	r2, #63	@ 0x3f
 8003f16:	409a      	lsls	r2, r3
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2201      	movs	r2, #1
 8003f26:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003f2a:	2300      	movs	r3, #0
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3718      	adds	r7, #24
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}
 8003f34:	f010803f 	.word	0xf010803f

08003f38 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b086      	sub	sp, #24
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	60f8      	str	r0, [r7, #12]
 8003f40:	60b9      	str	r1, [r7, #8]
 8003f42:	607a      	str	r2, [r7, #4]
 8003f44:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f46:	2300      	movs	r3, #0
 8003f48:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f4e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d101      	bne.n	8003f5e <HAL_DMA_Start_IT+0x26>
 8003f5a:	2302      	movs	r3, #2
 8003f5c:	e040      	b.n	8003fe0 <HAL_DMA_Start_IT+0xa8>
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2201      	movs	r2, #1
 8003f62:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d12f      	bne.n	8003fd2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2202      	movs	r2, #2
 8003f76:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	68b9      	ldr	r1, [r7, #8]
 8003f86:	68f8      	ldr	r0, [r7, #12]
 8003f88:	f000 fa4a 	bl	8004420 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f90:	223f      	movs	r2, #63	@ 0x3f
 8003f92:	409a      	lsls	r2, r3
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f042 0216 	orr.w	r2, r2, #22
 8003fa6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d007      	beq.n	8003fc0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f042 0208 	orr.w	r2, r2, #8
 8003fbe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f042 0201 	orr.w	r2, r2, #1
 8003fce:	601a      	str	r2, [r3, #0]
 8003fd0:	e005      	b.n	8003fde <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003fda:	2302      	movs	r3, #2
 8003fdc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003fde:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3718      	adds	r7, #24
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}

08003fe8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b084      	sub	sp, #16
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ff4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003ff6:	f7ff fe03 	bl	8003c00 <HAL_GetTick>
 8003ffa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004002:	b2db      	uxtb	r3, r3
 8004004:	2b02      	cmp	r3, #2
 8004006:	d008      	beq.n	800401a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2280      	movs	r2, #128	@ 0x80
 800400c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2200      	movs	r2, #0
 8004012:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e052      	b.n	80040c0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f022 0216 	bic.w	r2, r2, #22
 8004028:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	695a      	ldr	r2, [r3, #20]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004038:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800403e:	2b00      	cmp	r3, #0
 8004040:	d103      	bne.n	800404a <HAL_DMA_Abort+0x62>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004046:	2b00      	cmp	r3, #0
 8004048:	d007      	beq.n	800405a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f022 0208 	bic.w	r2, r2, #8
 8004058:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f022 0201 	bic.w	r2, r2, #1
 8004068:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800406a:	e013      	b.n	8004094 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800406c:	f7ff fdc8 	bl	8003c00 <HAL_GetTick>
 8004070:	4602      	mov	r2, r0
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	2b05      	cmp	r3, #5
 8004078:	d90c      	bls.n	8004094 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2220      	movs	r2, #32
 800407e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2203      	movs	r2, #3
 8004084:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2200      	movs	r2, #0
 800408c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8004090:	2303      	movs	r3, #3
 8004092:	e015      	b.n	80040c0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 0301 	and.w	r3, r3, #1
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d1e4      	bne.n	800406c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040a6:	223f      	movs	r2, #63	@ 0x3f
 80040a8:	409a      	lsls	r2, r3
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2201      	movs	r2, #1
 80040b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2200      	movs	r2, #0
 80040ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80040be:	2300      	movs	r3, #0
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	3710      	adds	r7, #16
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}

080040c8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b083      	sub	sp, #12
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80040d6:	b2db      	uxtb	r3, r3
 80040d8:	2b02      	cmp	r3, #2
 80040da:	d004      	beq.n	80040e6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2280      	movs	r2, #128	@ 0x80
 80040e0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e00c      	b.n	8004100 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2205      	movs	r2, #5
 80040ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f022 0201 	bic.w	r2, r2, #1
 80040fc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80040fe:	2300      	movs	r3, #0
}
 8004100:	4618      	mov	r0, r3
 8004102:	370c      	adds	r7, #12
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr

0800410c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b086      	sub	sp, #24
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004114:	2300      	movs	r3, #0
 8004116:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004118:	4b8e      	ldr	r3, [pc, #568]	@ (8004354 <HAL_DMA_IRQHandler+0x248>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a8e      	ldr	r2, [pc, #568]	@ (8004358 <HAL_DMA_IRQHandler+0x24c>)
 800411e:	fba2 2303 	umull	r2, r3, r2, r3
 8004122:	0a9b      	lsrs	r3, r3, #10
 8004124:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800412a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004136:	2208      	movs	r2, #8
 8004138:	409a      	lsls	r2, r3
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	4013      	ands	r3, r2
 800413e:	2b00      	cmp	r3, #0
 8004140:	d01a      	beq.n	8004178 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 0304 	and.w	r3, r3, #4
 800414c:	2b00      	cmp	r3, #0
 800414e:	d013      	beq.n	8004178 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f022 0204 	bic.w	r2, r2, #4
 800415e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004164:	2208      	movs	r2, #8
 8004166:	409a      	lsls	r2, r3
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004170:	f043 0201 	orr.w	r2, r3, #1
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800417c:	2201      	movs	r2, #1
 800417e:	409a      	lsls	r2, r3
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	4013      	ands	r3, r2
 8004184:	2b00      	cmp	r3, #0
 8004186:	d012      	beq.n	80041ae <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	695b      	ldr	r3, [r3, #20]
 800418e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004192:	2b00      	cmp	r3, #0
 8004194:	d00b      	beq.n	80041ae <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800419a:	2201      	movs	r2, #1
 800419c:	409a      	lsls	r2, r3
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041a6:	f043 0202 	orr.w	r2, r3, #2
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041b2:	2204      	movs	r2, #4
 80041b4:	409a      	lsls	r2, r3
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	4013      	ands	r3, r2
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d012      	beq.n	80041e4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 0302 	and.w	r3, r3, #2
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d00b      	beq.n	80041e4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041d0:	2204      	movs	r2, #4
 80041d2:	409a      	lsls	r2, r3
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041dc:	f043 0204 	orr.w	r2, r3, #4
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041e8:	2210      	movs	r2, #16
 80041ea:	409a      	lsls	r2, r3
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	4013      	ands	r3, r2
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d043      	beq.n	800427c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 0308 	and.w	r3, r3, #8
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d03c      	beq.n	800427c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004206:	2210      	movs	r2, #16
 8004208:	409a      	lsls	r2, r3
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004218:	2b00      	cmp	r3, #0
 800421a:	d018      	beq.n	800424e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004226:	2b00      	cmp	r3, #0
 8004228:	d108      	bne.n	800423c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800422e:	2b00      	cmp	r3, #0
 8004230:	d024      	beq.n	800427c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	4798      	blx	r3
 800423a:	e01f      	b.n	800427c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004240:	2b00      	cmp	r3, #0
 8004242:	d01b      	beq.n	800427c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004248:	6878      	ldr	r0, [r7, #4]
 800424a:	4798      	blx	r3
 800424c:	e016      	b.n	800427c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004258:	2b00      	cmp	r3, #0
 800425a:	d107      	bne.n	800426c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f022 0208 	bic.w	r2, r2, #8
 800426a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004270:	2b00      	cmp	r3, #0
 8004272:	d003      	beq.n	800427c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004278:	6878      	ldr	r0, [r7, #4]
 800427a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004280:	2220      	movs	r2, #32
 8004282:	409a      	lsls	r2, r3
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	4013      	ands	r3, r2
 8004288:	2b00      	cmp	r3, #0
 800428a:	f000 808f 	beq.w	80043ac <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f003 0310 	and.w	r3, r3, #16
 8004298:	2b00      	cmp	r3, #0
 800429a:	f000 8087 	beq.w	80043ac <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042a2:	2220      	movs	r2, #32
 80042a4:	409a      	lsls	r2, r3
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	2b05      	cmp	r3, #5
 80042b4:	d136      	bne.n	8004324 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f022 0216 	bic.w	r2, r2, #22
 80042c4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	695a      	ldr	r2, [r3, #20]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80042d4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d103      	bne.n	80042e6 <HAL_DMA_IRQHandler+0x1da>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d007      	beq.n	80042f6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f022 0208 	bic.w	r2, r2, #8
 80042f4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042fa:	223f      	movs	r2, #63	@ 0x3f
 80042fc:	409a      	lsls	r2, r3
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2201      	movs	r2, #1
 8004306:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004316:	2b00      	cmp	r3, #0
 8004318:	d07e      	beq.n	8004418 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	4798      	blx	r3
        }
        return;
 8004322:	e079      	b.n	8004418 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800432e:	2b00      	cmp	r3, #0
 8004330:	d01d      	beq.n	800436e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800433c:	2b00      	cmp	r3, #0
 800433e:	d10d      	bne.n	800435c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004344:	2b00      	cmp	r3, #0
 8004346:	d031      	beq.n	80043ac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	4798      	blx	r3
 8004350:	e02c      	b.n	80043ac <HAL_DMA_IRQHandler+0x2a0>
 8004352:	bf00      	nop
 8004354:	20000004 	.word	0x20000004
 8004358:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004360:	2b00      	cmp	r3, #0
 8004362:	d023      	beq.n	80043ac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004368:	6878      	ldr	r0, [r7, #4]
 800436a:	4798      	blx	r3
 800436c:	e01e      	b.n	80043ac <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004378:	2b00      	cmp	r3, #0
 800437a:	d10f      	bne.n	800439c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f022 0210 	bic.w	r2, r2, #16
 800438a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2201      	movs	r2, #1
 8004390:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2200      	movs	r2, #0
 8004398:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d003      	beq.n	80043ac <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043a8:	6878      	ldr	r0, [r7, #4]
 80043aa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d032      	beq.n	800441a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043b8:	f003 0301 	and.w	r3, r3, #1
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d022      	beq.n	8004406 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2205      	movs	r2, #5
 80043c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f022 0201 	bic.w	r2, r2, #1
 80043d6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	3301      	adds	r3, #1
 80043dc:	60bb      	str	r3, [r7, #8]
 80043de:	697a      	ldr	r2, [r7, #20]
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d307      	bcc.n	80043f4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 0301 	and.w	r3, r3, #1
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d1f2      	bne.n	80043d8 <HAL_DMA_IRQHandler+0x2cc>
 80043f2:	e000      	b.n	80043f6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80043f4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2201      	movs	r2, #1
 80043fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800440a:	2b00      	cmp	r3, #0
 800440c:	d005      	beq.n	800441a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	4798      	blx	r3
 8004416:	e000      	b.n	800441a <HAL_DMA_IRQHandler+0x30e>
        return;
 8004418:	bf00      	nop
    }
  }
}
 800441a:	3718      	adds	r7, #24
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}

08004420 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004420:	b480      	push	{r7}
 8004422:	b085      	sub	sp, #20
 8004424:	af00      	add	r7, sp, #0
 8004426:	60f8      	str	r0, [r7, #12]
 8004428:	60b9      	str	r1, [r7, #8]
 800442a:	607a      	str	r2, [r7, #4]
 800442c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800443c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	683a      	ldr	r2, [r7, #0]
 8004444:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	2b40      	cmp	r3, #64	@ 0x40
 800444c:	d108      	bne.n	8004460 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	68ba      	ldr	r2, [r7, #8]
 800445c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800445e:	e007      	b.n	8004470 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	68ba      	ldr	r2, [r7, #8]
 8004466:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	687a      	ldr	r2, [r7, #4]
 800446e:	60da      	str	r2, [r3, #12]
}
 8004470:	bf00      	nop
 8004472:	3714      	adds	r7, #20
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr

0800447c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800447c:	b480      	push	{r7}
 800447e:	b085      	sub	sp, #20
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	b2db      	uxtb	r3, r3
 800448a:	3b10      	subs	r3, #16
 800448c:	4a14      	ldr	r2, [pc, #80]	@ (80044e0 <DMA_CalcBaseAndBitshift+0x64>)
 800448e:	fba2 2303 	umull	r2, r3, r2, r3
 8004492:	091b      	lsrs	r3, r3, #4
 8004494:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004496:	4a13      	ldr	r2, [pc, #76]	@ (80044e4 <DMA_CalcBaseAndBitshift+0x68>)
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	4413      	add	r3, r2
 800449c:	781b      	ldrb	r3, [r3, #0]
 800449e:	461a      	mov	r2, r3
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2b03      	cmp	r3, #3
 80044a8:	d909      	bls.n	80044be <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80044b2:	f023 0303 	bic.w	r3, r3, #3
 80044b6:	1d1a      	adds	r2, r3, #4
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	659a      	str	r2, [r3, #88]	@ 0x58
 80044bc:	e007      	b.n	80044ce <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80044c6:	f023 0303 	bic.w	r3, r3, #3
 80044ca:	687a      	ldr	r2, [r7, #4]
 80044cc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3714      	adds	r7, #20
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr
 80044de:	bf00      	nop
 80044e0:	aaaaaaab 	.word	0xaaaaaaab
 80044e4:	0801e6e4 	.word	0x0801e6e4

080044e8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b085      	sub	sp, #20
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044f0:	2300      	movs	r3, #0
 80044f2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044f8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	699b      	ldr	r3, [r3, #24]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d11f      	bne.n	8004542 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	2b03      	cmp	r3, #3
 8004506:	d856      	bhi.n	80045b6 <DMA_CheckFifoParam+0xce>
 8004508:	a201      	add	r2, pc, #4	@ (adr r2, 8004510 <DMA_CheckFifoParam+0x28>)
 800450a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800450e:	bf00      	nop
 8004510:	08004521 	.word	0x08004521
 8004514:	08004533 	.word	0x08004533
 8004518:	08004521 	.word	0x08004521
 800451c:	080045b7 	.word	0x080045b7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004524:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004528:	2b00      	cmp	r3, #0
 800452a:	d046      	beq.n	80045ba <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004530:	e043      	b.n	80045ba <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004536:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800453a:	d140      	bne.n	80045be <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004540:	e03d      	b.n	80045be <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	699b      	ldr	r3, [r3, #24]
 8004546:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800454a:	d121      	bne.n	8004590 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	2b03      	cmp	r3, #3
 8004550:	d837      	bhi.n	80045c2 <DMA_CheckFifoParam+0xda>
 8004552:	a201      	add	r2, pc, #4	@ (adr r2, 8004558 <DMA_CheckFifoParam+0x70>)
 8004554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004558:	08004569 	.word	0x08004569
 800455c:	0800456f 	.word	0x0800456f
 8004560:	08004569 	.word	0x08004569
 8004564:	08004581 	.word	0x08004581
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	73fb      	strb	r3, [r7, #15]
      break;
 800456c:	e030      	b.n	80045d0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004572:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004576:	2b00      	cmp	r3, #0
 8004578:	d025      	beq.n	80045c6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800457e:	e022      	b.n	80045c6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004584:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004588:	d11f      	bne.n	80045ca <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800458e:	e01c      	b.n	80045ca <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	2b02      	cmp	r3, #2
 8004594:	d903      	bls.n	800459e <DMA_CheckFifoParam+0xb6>
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	2b03      	cmp	r3, #3
 800459a:	d003      	beq.n	80045a4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800459c:	e018      	b.n	80045d0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	73fb      	strb	r3, [r7, #15]
      break;
 80045a2:	e015      	b.n	80045d0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045a8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d00e      	beq.n	80045ce <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	73fb      	strb	r3, [r7, #15]
      break;
 80045b4:	e00b      	b.n	80045ce <DMA_CheckFifoParam+0xe6>
      break;
 80045b6:	bf00      	nop
 80045b8:	e00a      	b.n	80045d0 <DMA_CheckFifoParam+0xe8>
      break;
 80045ba:	bf00      	nop
 80045bc:	e008      	b.n	80045d0 <DMA_CheckFifoParam+0xe8>
      break;
 80045be:	bf00      	nop
 80045c0:	e006      	b.n	80045d0 <DMA_CheckFifoParam+0xe8>
      break;
 80045c2:	bf00      	nop
 80045c4:	e004      	b.n	80045d0 <DMA_CheckFifoParam+0xe8>
      break;
 80045c6:	bf00      	nop
 80045c8:	e002      	b.n	80045d0 <DMA_CheckFifoParam+0xe8>
      break;   
 80045ca:	bf00      	nop
 80045cc:	e000      	b.n	80045d0 <DMA_CheckFifoParam+0xe8>
      break;
 80045ce:	bf00      	nop
    }
  } 
  
  return status; 
 80045d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3714      	adds	r7, #20
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr
 80045de:	bf00      	nop

080045e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b089      	sub	sp, #36	@ 0x24
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80045ea:	2300      	movs	r3, #0
 80045ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80045ee:	2300      	movs	r3, #0
 80045f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80045f2:	2300      	movs	r3, #0
 80045f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80045f6:	2300      	movs	r3, #0
 80045f8:	61fb      	str	r3, [r7, #28]
 80045fa:	e177      	b.n	80048ec <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80045fc:	2201      	movs	r2, #1
 80045fe:	69fb      	ldr	r3, [r7, #28]
 8004600:	fa02 f303 	lsl.w	r3, r2, r3
 8004604:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	697a      	ldr	r2, [r7, #20]
 800460c:	4013      	ands	r3, r2
 800460e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004610:	693a      	ldr	r2, [r7, #16]
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	429a      	cmp	r2, r3
 8004616:	f040 8166 	bne.w	80048e6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	f003 0303 	and.w	r3, r3, #3
 8004622:	2b01      	cmp	r3, #1
 8004624:	d005      	beq.n	8004632 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800462e:	2b02      	cmp	r3, #2
 8004630:	d130      	bne.n	8004694 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004638:	69fb      	ldr	r3, [r7, #28]
 800463a:	005b      	lsls	r3, r3, #1
 800463c:	2203      	movs	r2, #3
 800463e:	fa02 f303 	lsl.w	r3, r2, r3
 8004642:	43db      	mvns	r3, r3
 8004644:	69ba      	ldr	r2, [r7, #24]
 8004646:	4013      	ands	r3, r2
 8004648:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	68da      	ldr	r2, [r3, #12]
 800464e:	69fb      	ldr	r3, [r7, #28]
 8004650:	005b      	lsls	r3, r3, #1
 8004652:	fa02 f303 	lsl.w	r3, r2, r3
 8004656:	69ba      	ldr	r2, [r7, #24]
 8004658:	4313      	orrs	r3, r2
 800465a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	69ba      	ldr	r2, [r7, #24]
 8004660:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004668:	2201      	movs	r2, #1
 800466a:	69fb      	ldr	r3, [r7, #28]
 800466c:	fa02 f303 	lsl.w	r3, r2, r3
 8004670:	43db      	mvns	r3, r3
 8004672:	69ba      	ldr	r2, [r7, #24]
 8004674:	4013      	ands	r3, r2
 8004676:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	091b      	lsrs	r3, r3, #4
 800467e:	f003 0201 	and.w	r2, r3, #1
 8004682:	69fb      	ldr	r3, [r7, #28]
 8004684:	fa02 f303 	lsl.w	r3, r2, r3
 8004688:	69ba      	ldr	r2, [r7, #24]
 800468a:	4313      	orrs	r3, r2
 800468c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	69ba      	ldr	r2, [r7, #24]
 8004692:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	f003 0303 	and.w	r3, r3, #3
 800469c:	2b03      	cmp	r3, #3
 800469e:	d017      	beq.n	80046d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	68db      	ldr	r3, [r3, #12]
 80046a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80046a6:	69fb      	ldr	r3, [r7, #28]
 80046a8:	005b      	lsls	r3, r3, #1
 80046aa:	2203      	movs	r2, #3
 80046ac:	fa02 f303 	lsl.w	r3, r2, r3
 80046b0:	43db      	mvns	r3, r3
 80046b2:	69ba      	ldr	r2, [r7, #24]
 80046b4:	4013      	ands	r3, r2
 80046b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	689a      	ldr	r2, [r3, #8]
 80046bc:	69fb      	ldr	r3, [r7, #28]
 80046be:	005b      	lsls	r3, r3, #1
 80046c0:	fa02 f303 	lsl.w	r3, r2, r3
 80046c4:	69ba      	ldr	r2, [r7, #24]
 80046c6:	4313      	orrs	r3, r2
 80046c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	69ba      	ldr	r2, [r7, #24]
 80046ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	f003 0303 	and.w	r3, r3, #3
 80046d8:	2b02      	cmp	r3, #2
 80046da:	d123      	bne.n	8004724 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80046dc:	69fb      	ldr	r3, [r7, #28]
 80046de:	08da      	lsrs	r2, r3, #3
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	3208      	adds	r2, #8
 80046e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80046ea:	69fb      	ldr	r3, [r7, #28]
 80046ec:	f003 0307 	and.w	r3, r3, #7
 80046f0:	009b      	lsls	r3, r3, #2
 80046f2:	220f      	movs	r2, #15
 80046f4:	fa02 f303 	lsl.w	r3, r2, r3
 80046f8:	43db      	mvns	r3, r3
 80046fa:	69ba      	ldr	r2, [r7, #24]
 80046fc:	4013      	ands	r3, r2
 80046fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	691a      	ldr	r2, [r3, #16]
 8004704:	69fb      	ldr	r3, [r7, #28]
 8004706:	f003 0307 	and.w	r3, r3, #7
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	fa02 f303 	lsl.w	r3, r2, r3
 8004710:	69ba      	ldr	r2, [r7, #24]
 8004712:	4313      	orrs	r3, r2
 8004714:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004716:	69fb      	ldr	r3, [r7, #28]
 8004718:	08da      	lsrs	r2, r3, #3
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	3208      	adds	r2, #8
 800471e:	69b9      	ldr	r1, [r7, #24]
 8004720:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800472a:	69fb      	ldr	r3, [r7, #28]
 800472c:	005b      	lsls	r3, r3, #1
 800472e:	2203      	movs	r2, #3
 8004730:	fa02 f303 	lsl.w	r3, r2, r3
 8004734:	43db      	mvns	r3, r3
 8004736:	69ba      	ldr	r2, [r7, #24]
 8004738:	4013      	ands	r3, r2
 800473a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	f003 0203 	and.w	r2, r3, #3
 8004744:	69fb      	ldr	r3, [r7, #28]
 8004746:	005b      	lsls	r3, r3, #1
 8004748:	fa02 f303 	lsl.w	r3, r2, r3
 800474c:	69ba      	ldr	r2, [r7, #24]
 800474e:	4313      	orrs	r3, r2
 8004750:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	69ba      	ldr	r2, [r7, #24]
 8004756:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004760:	2b00      	cmp	r3, #0
 8004762:	f000 80c0 	beq.w	80048e6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004766:	2300      	movs	r3, #0
 8004768:	60fb      	str	r3, [r7, #12]
 800476a:	4b66      	ldr	r3, [pc, #408]	@ (8004904 <HAL_GPIO_Init+0x324>)
 800476c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800476e:	4a65      	ldr	r2, [pc, #404]	@ (8004904 <HAL_GPIO_Init+0x324>)
 8004770:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004774:	6453      	str	r3, [r2, #68]	@ 0x44
 8004776:	4b63      	ldr	r3, [pc, #396]	@ (8004904 <HAL_GPIO_Init+0x324>)
 8004778:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800477a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800477e:	60fb      	str	r3, [r7, #12]
 8004780:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004782:	4a61      	ldr	r2, [pc, #388]	@ (8004908 <HAL_GPIO_Init+0x328>)
 8004784:	69fb      	ldr	r3, [r7, #28]
 8004786:	089b      	lsrs	r3, r3, #2
 8004788:	3302      	adds	r3, #2
 800478a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800478e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004790:	69fb      	ldr	r3, [r7, #28]
 8004792:	f003 0303 	and.w	r3, r3, #3
 8004796:	009b      	lsls	r3, r3, #2
 8004798:	220f      	movs	r2, #15
 800479a:	fa02 f303 	lsl.w	r3, r2, r3
 800479e:	43db      	mvns	r3, r3
 80047a0:	69ba      	ldr	r2, [r7, #24]
 80047a2:	4013      	ands	r3, r2
 80047a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	4a58      	ldr	r2, [pc, #352]	@ (800490c <HAL_GPIO_Init+0x32c>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d037      	beq.n	800481e <HAL_GPIO_Init+0x23e>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	4a57      	ldr	r2, [pc, #348]	@ (8004910 <HAL_GPIO_Init+0x330>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d031      	beq.n	800481a <HAL_GPIO_Init+0x23a>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	4a56      	ldr	r2, [pc, #344]	@ (8004914 <HAL_GPIO_Init+0x334>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d02b      	beq.n	8004816 <HAL_GPIO_Init+0x236>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	4a55      	ldr	r2, [pc, #340]	@ (8004918 <HAL_GPIO_Init+0x338>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d025      	beq.n	8004812 <HAL_GPIO_Init+0x232>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	4a54      	ldr	r2, [pc, #336]	@ (800491c <HAL_GPIO_Init+0x33c>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d01f      	beq.n	800480e <HAL_GPIO_Init+0x22e>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	4a53      	ldr	r2, [pc, #332]	@ (8004920 <HAL_GPIO_Init+0x340>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d019      	beq.n	800480a <HAL_GPIO_Init+0x22a>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	4a52      	ldr	r2, [pc, #328]	@ (8004924 <HAL_GPIO_Init+0x344>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d013      	beq.n	8004806 <HAL_GPIO_Init+0x226>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	4a51      	ldr	r2, [pc, #324]	@ (8004928 <HAL_GPIO_Init+0x348>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d00d      	beq.n	8004802 <HAL_GPIO_Init+0x222>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	4a50      	ldr	r2, [pc, #320]	@ (800492c <HAL_GPIO_Init+0x34c>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d007      	beq.n	80047fe <HAL_GPIO_Init+0x21e>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	4a4f      	ldr	r2, [pc, #316]	@ (8004930 <HAL_GPIO_Init+0x350>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d101      	bne.n	80047fa <HAL_GPIO_Init+0x21a>
 80047f6:	2309      	movs	r3, #9
 80047f8:	e012      	b.n	8004820 <HAL_GPIO_Init+0x240>
 80047fa:	230a      	movs	r3, #10
 80047fc:	e010      	b.n	8004820 <HAL_GPIO_Init+0x240>
 80047fe:	2308      	movs	r3, #8
 8004800:	e00e      	b.n	8004820 <HAL_GPIO_Init+0x240>
 8004802:	2307      	movs	r3, #7
 8004804:	e00c      	b.n	8004820 <HAL_GPIO_Init+0x240>
 8004806:	2306      	movs	r3, #6
 8004808:	e00a      	b.n	8004820 <HAL_GPIO_Init+0x240>
 800480a:	2305      	movs	r3, #5
 800480c:	e008      	b.n	8004820 <HAL_GPIO_Init+0x240>
 800480e:	2304      	movs	r3, #4
 8004810:	e006      	b.n	8004820 <HAL_GPIO_Init+0x240>
 8004812:	2303      	movs	r3, #3
 8004814:	e004      	b.n	8004820 <HAL_GPIO_Init+0x240>
 8004816:	2302      	movs	r3, #2
 8004818:	e002      	b.n	8004820 <HAL_GPIO_Init+0x240>
 800481a:	2301      	movs	r3, #1
 800481c:	e000      	b.n	8004820 <HAL_GPIO_Init+0x240>
 800481e:	2300      	movs	r3, #0
 8004820:	69fa      	ldr	r2, [r7, #28]
 8004822:	f002 0203 	and.w	r2, r2, #3
 8004826:	0092      	lsls	r2, r2, #2
 8004828:	4093      	lsls	r3, r2
 800482a:	69ba      	ldr	r2, [r7, #24]
 800482c:	4313      	orrs	r3, r2
 800482e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004830:	4935      	ldr	r1, [pc, #212]	@ (8004908 <HAL_GPIO_Init+0x328>)
 8004832:	69fb      	ldr	r3, [r7, #28]
 8004834:	089b      	lsrs	r3, r3, #2
 8004836:	3302      	adds	r3, #2
 8004838:	69ba      	ldr	r2, [r7, #24]
 800483a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800483e:	4b3d      	ldr	r3, [pc, #244]	@ (8004934 <HAL_GPIO_Init+0x354>)
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	43db      	mvns	r3, r3
 8004848:	69ba      	ldr	r2, [r7, #24]
 800484a:	4013      	ands	r3, r2
 800484c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004856:	2b00      	cmp	r3, #0
 8004858:	d003      	beq.n	8004862 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800485a:	69ba      	ldr	r2, [r7, #24]
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	4313      	orrs	r3, r2
 8004860:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004862:	4a34      	ldr	r2, [pc, #208]	@ (8004934 <HAL_GPIO_Init+0x354>)
 8004864:	69bb      	ldr	r3, [r7, #24]
 8004866:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004868:	4b32      	ldr	r3, [pc, #200]	@ (8004934 <HAL_GPIO_Init+0x354>)
 800486a:	68db      	ldr	r3, [r3, #12]
 800486c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	43db      	mvns	r3, r3
 8004872:	69ba      	ldr	r2, [r7, #24]
 8004874:	4013      	ands	r3, r2
 8004876:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004880:	2b00      	cmp	r3, #0
 8004882:	d003      	beq.n	800488c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004884:	69ba      	ldr	r2, [r7, #24]
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	4313      	orrs	r3, r2
 800488a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800488c:	4a29      	ldr	r2, [pc, #164]	@ (8004934 <HAL_GPIO_Init+0x354>)
 800488e:	69bb      	ldr	r3, [r7, #24]
 8004890:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004892:	4b28      	ldr	r3, [pc, #160]	@ (8004934 <HAL_GPIO_Init+0x354>)
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	43db      	mvns	r3, r3
 800489c:	69ba      	ldr	r2, [r7, #24]
 800489e:	4013      	ands	r3, r2
 80048a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d003      	beq.n	80048b6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80048ae:	69ba      	ldr	r2, [r7, #24]
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	4313      	orrs	r3, r2
 80048b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80048b6:	4a1f      	ldr	r2, [pc, #124]	@ (8004934 <HAL_GPIO_Init+0x354>)
 80048b8:	69bb      	ldr	r3, [r7, #24]
 80048ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80048bc:	4b1d      	ldr	r3, [pc, #116]	@ (8004934 <HAL_GPIO_Init+0x354>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	43db      	mvns	r3, r3
 80048c6:	69ba      	ldr	r2, [r7, #24]
 80048c8:	4013      	ands	r3, r2
 80048ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d003      	beq.n	80048e0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80048d8:	69ba      	ldr	r2, [r7, #24]
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	4313      	orrs	r3, r2
 80048de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80048e0:	4a14      	ldr	r2, [pc, #80]	@ (8004934 <HAL_GPIO_Init+0x354>)
 80048e2:	69bb      	ldr	r3, [r7, #24]
 80048e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80048e6:	69fb      	ldr	r3, [r7, #28]
 80048e8:	3301      	adds	r3, #1
 80048ea:	61fb      	str	r3, [r7, #28]
 80048ec:	69fb      	ldr	r3, [r7, #28]
 80048ee:	2b0f      	cmp	r3, #15
 80048f0:	f67f ae84 	bls.w	80045fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80048f4:	bf00      	nop
 80048f6:	bf00      	nop
 80048f8:	3724      	adds	r7, #36	@ 0x24
 80048fa:	46bd      	mov	sp, r7
 80048fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004900:	4770      	bx	lr
 8004902:	bf00      	nop
 8004904:	40023800 	.word	0x40023800
 8004908:	40013800 	.word	0x40013800
 800490c:	40020000 	.word	0x40020000
 8004910:	40020400 	.word	0x40020400
 8004914:	40020800 	.word	0x40020800
 8004918:	40020c00 	.word	0x40020c00
 800491c:	40021000 	.word	0x40021000
 8004920:	40021400 	.word	0x40021400
 8004924:	40021800 	.word	0x40021800
 8004928:	40021c00 	.word	0x40021c00
 800492c:	40022000 	.word	0x40022000
 8004930:	40022400 	.word	0x40022400
 8004934:	40013c00 	.word	0x40013c00

08004938 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004938:	b480      	push	{r7}
 800493a:	b083      	sub	sp, #12
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
 8004940:	460b      	mov	r3, r1
 8004942:	807b      	strh	r3, [r7, #2]
 8004944:	4613      	mov	r3, r2
 8004946:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004948:	787b      	ldrb	r3, [r7, #1]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d003      	beq.n	8004956 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800494e:	887a      	ldrh	r2, [r7, #2]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004954:	e003      	b.n	800495e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004956:	887b      	ldrh	r3, [r7, #2]
 8004958:	041a      	lsls	r2, r3, #16
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	619a      	str	r2, [r3, #24]
}
 800495e:	bf00      	nop
 8004960:	370c      	adds	r7, #12
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr

0800496a <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800496a:	b580      	push	{r7, lr}
 800496c:	b084      	sub	sp, #16
 800496e:	af00      	add	r7, sp, #0
 8004970:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d101      	bne.n	800497c <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8004978:	2301      	movs	r3, #1
 800497a:	e036      	b.n	80049ea <HAL_IWDG_Init+0x80>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 8004984:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f245 5255 	movw	r2, #21845	@ 0x5555
 800498e:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	687a      	ldr	r2, [r7, #4]
 8004996:	6852      	ldr	r2, [r2, #4]
 8004998:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	687a      	ldr	r2, [r7, #4]
 80049a0:	6892      	ldr	r2, [r2, #8]
 80049a2:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80049a4:	f7ff f92c 	bl	8003c00 <HAL_GetTick>
 80049a8:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80049aa:	e011      	b.n	80049d0 <HAL_IWDG_Init+0x66>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80049ac:	f7ff f928 	bl	8003c00 <HAL_GetTick>
 80049b0:	4602      	mov	r2, r0
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	1ad3      	subs	r3, r2, r3
 80049b6:	f641 0201 	movw	r2, #6145	@ 0x1801
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d908      	bls.n	80049d0 <HAL_IWDG_Init+0x66>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	68db      	ldr	r3, [r3, #12]
 80049c4:	f003 0303 	and.w	r3, r3, #3
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d001      	beq.n	80049d0 <HAL_IWDG_Init+0x66>
      {
        return HAL_TIMEOUT;
 80049cc:	2303      	movs	r3, #3
 80049ce:	e00c      	b.n	80049ea <HAL_IWDG_Init+0x80>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	68db      	ldr	r3, [r3, #12]
 80049d6:	f003 0303 	and.w	r3, r3, #3
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d1e6      	bne.n	80049ac <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 80049e6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80049e8:	2300      	movs	r3, #0
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	3710      	adds	r7, #16
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}

080049f2 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80049f2:	b480      	push	{r7}
 80049f4:	b083      	sub	sp, #12
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8004a02:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004a04:	2300      	movs	r3, #0
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	370c      	adds	r7, #12
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a10:	4770      	bx	lr
	...

08004a14 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b082      	sub	sp, #8
 8004a18:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004a1e:	2300      	movs	r3, #0
 8004a20:	603b      	str	r3, [r7, #0]
 8004a22:	4b20      	ldr	r3, [pc, #128]	@ (8004aa4 <HAL_PWREx_EnableOverDrive+0x90>)
 8004a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a26:	4a1f      	ldr	r2, [pc, #124]	@ (8004aa4 <HAL_PWREx_EnableOverDrive+0x90>)
 8004a28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8004a2e:	4b1d      	ldr	r3, [pc, #116]	@ (8004aa4 <HAL_PWREx_EnableOverDrive+0x90>)
 8004a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a36:	603b      	str	r3, [r7, #0]
 8004a38:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004a3a:	4b1b      	ldr	r3, [pc, #108]	@ (8004aa8 <HAL_PWREx_EnableOverDrive+0x94>)
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004a40:	f7ff f8de 	bl	8003c00 <HAL_GetTick>
 8004a44:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004a46:	e009      	b.n	8004a5c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004a48:	f7ff f8da 	bl	8003c00 <HAL_GetTick>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	1ad3      	subs	r3, r2, r3
 8004a52:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004a56:	d901      	bls.n	8004a5c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8004a58:	2303      	movs	r3, #3
 8004a5a:	e01f      	b.n	8004a9c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004a5c:	4b13      	ldr	r3, [pc, #76]	@ (8004aac <HAL_PWREx_EnableOverDrive+0x98>)
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a68:	d1ee      	bne.n	8004a48 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004a6a:	4b11      	ldr	r3, [pc, #68]	@ (8004ab0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004a6c:	2201      	movs	r2, #1
 8004a6e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004a70:	f7ff f8c6 	bl	8003c00 <HAL_GetTick>
 8004a74:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004a76:	e009      	b.n	8004a8c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004a78:	f7ff f8c2 	bl	8003c00 <HAL_GetTick>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	1ad3      	subs	r3, r2, r3
 8004a82:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004a86:	d901      	bls.n	8004a8c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004a88:	2303      	movs	r3, #3
 8004a8a:	e007      	b.n	8004a9c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004a8c:	4b07      	ldr	r3, [pc, #28]	@ (8004aac <HAL_PWREx_EnableOverDrive+0x98>)
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a94:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004a98:	d1ee      	bne.n	8004a78 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8004a9a:	2300      	movs	r3, #0
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	3708      	adds	r7, #8
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}
 8004aa4:	40023800 	.word	0x40023800
 8004aa8:	420e0040 	.word	0x420e0040
 8004aac:	40007000 	.word	0x40007000
 8004ab0:	420e0044 	.word	0x420e0044

08004ab4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b084      	sub	sp, #16
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d101      	bne.n	8004ac8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	e0cc      	b.n	8004c62 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ac8:	4b68      	ldr	r3, [pc, #416]	@ (8004c6c <HAL_RCC_ClockConfig+0x1b8>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f003 030f 	and.w	r3, r3, #15
 8004ad0:	683a      	ldr	r2, [r7, #0]
 8004ad2:	429a      	cmp	r2, r3
 8004ad4:	d90c      	bls.n	8004af0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ad6:	4b65      	ldr	r3, [pc, #404]	@ (8004c6c <HAL_RCC_ClockConfig+0x1b8>)
 8004ad8:	683a      	ldr	r2, [r7, #0]
 8004ada:	b2d2      	uxtb	r2, r2
 8004adc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ade:	4b63      	ldr	r3, [pc, #396]	@ (8004c6c <HAL_RCC_ClockConfig+0x1b8>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 030f 	and.w	r3, r3, #15
 8004ae6:	683a      	ldr	r2, [r7, #0]
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d001      	beq.n	8004af0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	e0b8      	b.n	8004c62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f003 0302 	and.w	r3, r3, #2
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d020      	beq.n	8004b3e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f003 0304 	and.w	r3, r3, #4
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d005      	beq.n	8004b14 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b08:	4b59      	ldr	r3, [pc, #356]	@ (8004c70 <HAL_RCC_ClockConfig+0x1bc>)
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	4a58      	ldr	r2, [pc, #352]	@ (8004c70 <HAL_RCC_ClockConfig+0x1bc>)
 8004b0e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004b12:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f003 0308 	and.w	r3, r3, #8
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d005      	beq.n	8004b2c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b20:	4b53      	ldr	r3, [pc, #332]	@ (8004c70 <HAL_RCC_ClockConfig+0x1bc>)
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	4a52      	ldr	r2, [pc, #328]	@ (8004c70 <HAL_RCC_ClockConfig+0x1bc>)
 8004b26:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004b2a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b2c:	4b50      	ldr	r3, [pc, #320]	@ (8004c70 <HAL_RCC_ClockConfig+0x1bc>)
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	494d      	ldr	r1, [pc, #308]	@ (8004c70 <HAL_RCC_ClockConfig+0x1bc>)
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f003 0301 	and.w	r3, r3, #1
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d044      	beq.n	8004bd4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	2b01      	cmp	r3, #1
 8004b50:	d107      	bne.n	8004b62 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b52:	4b47      	ldr	r3, [pc, #284]	@ (8004c70 <HAL_RCC_ClockConfig+0x1bc>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d119      	bne.n	8004b92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e07f      	b.n	8004c62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	2b02      	cmp	r3, #2
 8004b68:	d003      	beq.n	8004b72 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b6e:	2b03      	cmp	r3, #3
 8004b70:	d107      	bne.n	8004b82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b72:	4b3f      	ldr	r3, [pc, #252]	@ (8004c70 <HAL_RCC_ClockConfig+0x1bc>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d109      	bne.n	8004b92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e06f      	b.n	8004c62 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b82:	4b3b      	ldr	r3, [pc, #236]	@ (8004c70 <HAL_RCC_ClockConfig+0x1bc>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f003 0302 	and.w	r3, r3, #2
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d101      	bne.n	8004b92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e067      	b.n	8004c62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b92:	4b37      	ldr	r3, [pc, #220]	@ (8004c70 <HAL_RCC_ClockConfig+0x1bc>)
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	f023 0203 	bic.w	r2, r3, #3
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	4934      	ldr	r1, [pc, #208]	@ (8004c70 <HAL_RCC_ClockConfig+0x1bc>)
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ba4:	f7ff f82c 	bl	8003c00 <HAL_GetTick>
 8004ba8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004baa:	e00a      	b.n	8004bc2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bac:	f7ff f828 	bl	8003c00 <HAL_GetTick>
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	1ad3      	subs	r3, r2, r3
 8004bb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d901      	bls.n	8004bc2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004bbe:	2303      	movs	r3, #3
 8004bc0:	e04f      	b.n	8004c62 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bc2:	4b2b      	ldr	r3, [pc, #172]	@ (8004c70 <HAL_RCC_ClockConfig+0x1bc>)
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	f003 020c 	and.w	r2, r3, #12
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	009b      	lsls	r3, r3, #2
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d1eb      	bne.n	8004bac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004bd4:	4b25      	ldr	r3, [pc, #148]	@ (8004c6c <HAL_RCC_ClockConfig+0x1b8>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 030f 	and.w	r3, r3, #15
 8004bdc:	683a      	ldr	r2, [r7, #0]
 8004bde:	429a      	cmp	r2, r3
 8004be0:	d20c      	bcs.n	8004bfc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004be2:	4b22      	ldr	r3, [pc, #136]	@ (8004c6c <HAL_RCC_ClockConfig+0x1b8>)
 8004be4:	683a      	ldr	r2, [r7, #0]
 8004be6:	b2d2      	uxtb	r2, r2
 8004be8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bea:	4b20      	ldr	r3, [pc, #128]	@ (8004c6c <HAL_RCC_ClockConfig+0x1b8>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f003 030f 	and.w	r3, r3, #15
 8004bf2:	683a      	ldr	r2, [r7, #0]
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d001      	beq.n	8004bfc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e032      	b.n	8004c62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f003 0304 	and.w	r3, r3, #4
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d008      	beq.n	8004c1a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c08:	4b19      	ldr	r3, [pc, #100]	@ (8004c70 <HAL_RCC_ClockConfig+0x1bc>)
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	68db      	ldr	r3, [r3, #12]
 8004c14:	4916      	ldr	r1, [pc, #88]	@ (8004c70 <HAL_RCC_ClockConfig+0x1bc>)
 8004c16:	4313      	orrs	r3, r2
 8004c18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f003 0308 	and.w	r3, r3, #8
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d009      	beq.n	8004c3a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c26:	4b12      	ldr	r3, [pc, #72]	@ (8004c70 <HAL_RCC_ClockConfig+0x1bc>)
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	691b      	ldr	r3, [r3, #16]
 8004c32:	00db      	lsls	r3, r3, #3
 8004c34:	490e      	ldr	r1, [pc, #56]	@ (8004c70 <HAL_RCC_ClockConfig+0x1bc>)
 8004c36:	4313      	orrs	r3, r2
 8004c38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004c3a:	f000 f821 	bl	8004c80 <HAL_RCC_GetSysClockFreq>
 8004c3e:	4602      	mov	r2, r0
 8004c40:	4b0b      	ldr	r3, [pc, #44]	@ (8004c70 <HAL_RCC_ClockConfig+0x1bc>)
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	091b      	lsrs	r3, r3, #4
 8004c46:	f003 030f 	and.w	r3, r3, #15
 8004c4a:	490a      	ldr	r1, [pc, #40]	@ (8004c74 <HAL_RCC_ClockConfig+0x1c0>)
 8004c4c:	5ccb      	ldrb	r3, [r1, r3]
 8004c4e:	fa22 f303 	lsr.w	r3, r2, r3
 8004c52:	4a09      	ldr	r2, [pc, #36]	@ (8004c78 <HAL_RCC_ClockConfig+0x1c4>)
 8004c54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004c56:	4b09      	ldr	r3, [pc, #36]	@ (8004c7c <HAL_RCC_ClockConfig+0x1c8>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f7fd fc60 	bl	8002520 <HAL_InitTick>

  return HAL_OK;
 8004c60:	2300      	movs	r3, #0
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3710      	adds	r7, #16
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}
 8004c6a:	bf00      	nop
 8004c6c:	40023c00 	.word	0x40023c00
 8004c70:	40023800 	.word	0x40023800
 8004c74:	0801e6cc 	.word	0x0801e6cc
 8004c78:	20000004 	.word	0x20000004
 8004c7c:	200000d0 	.word	0x200000d0

08004c80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c84:	b092      	sub	sp, #72	@ 0x48
 8004c86:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllvco = 0U;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllp = 0U;
 8004c90:	2300      	movs	r3, #0
 8004c92:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t sysclockfreq = 0U;
 8004c94:	2300      	movs	r3, #0
 8004c96:	643b      	str	r3, [r7, #64]	@ 0x40

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c98:	4b6f      	ldr	r3, [pc, #444]	@ (8004e58 <HAL_RCC_GetSysClockFreq+0x1d8>)
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	f003 030c 	and.w	r3, r3, #12
 8004ca0:	2b08      	cmp	r3, #8
 8004ca2:	d00e      	beq.n	8004cc2 <HAL_RCC_GetSysClockFreq+0x42>
 8004ca4:	2b08      	cmp	r3, #8
 8004ca6:	f200 80cd 	bhi.w	8004e44 <HAL_RCC_GetSysClockFreq+0x1c4>
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d002      	beq.n	8004cb4 <HAL_RCC_GetSysClockFreq+0x34>
 8004cae:	2b04      	cmp	r3, #4
 8004cb0:	d003      	beq.n	8004cba <HAL_RCC_GetSysClockFreq+0x3a>
 8004cb2:	e0c7      	b.n	8004e44 <HAL_RCC_GetSysClockFreq+0x1c4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004cb4:	4b69      	ldr	r3, [pc, #420]	@ (8004e5c <HAL_RCC_GetSysClockFreq+0x1dc>)
 8004cb6:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8004cb8:	e0c7      	b.n	8004e4a <HAL_RCC_GetSysClockFreq+0x1ca>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004cba:	f44f 0361 	mov.w	r3, #14745600	@ 0xe10000
 8004cbe:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8004cc0:	e0c3      	b.n	8004e4a <HAL_RCC_GetSysClockFreq+0x1ca>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004cc2:	4b65      	ldr	r3, [pc, #404]	@ (8004e58 <HAL_RCC_GetSysClockFreq+0x1d8>)
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004cca:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004ccc:	4b62      	ldr	r3, [pc, #392]	@ (8004e58 <HAL_RCC_GetSysClockFreq+0x1d8>)
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d04a      	beq.n	8004d6e <HAL_RCC_GetSysClockFreq+0xee>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cd8:	4b5f      	ldr	r3, [pc, #380]	@ (8004e58 <HAL_RCC_GetSysClockFreq+0x1d8>)
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	099b      	lsrs	r3, r3, #6
 8004cde:	2200      	movs	r2, #0
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	4611      	mov	r1, r2
 8004ce4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004ce8:	633b      	str	r3, [r7, #48]	@ 0x30
 8004cea:	2300      	movs	r3, #0
 8004cec:	637b      	str	r3, [r7, #52]	@ 0x34
 8004cee:	e9d7 890c 	ldrd	r8, r9, [r7, #48]	@ 0x30
 8004cf2:	4642      	mov	r2, r8
 8004cf4:	464b      	mov	r3, r9
 8004cf6:	f04f 0000 	mov.w	r0, #0
 8004cfa:	f04f 0100 	mov.w	r1, #0
 8004cfe:	00d9      	lsls	r1, r3, #3
 8004d00:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004d04:	00d0      	lsls	r0, r2, #3
 8004d06:	4602      	mov	r2, r0
 8004d08:	460b      	mov	r3, r1
 8004d0a:	4641      	mov	r1, r8
 8004d0c:	1a54      	subs	r4, r2, r1
 8004d0e:	4649      	mov	r1, r9
 8004d10:	eb63 0501 	sbc.w	r5, r3, r1
 8004d14:	f04f 0200 	mov.w	r2, #0
 8004d18:	f04f 0300 	mov.w	r3, #0
 8004d1c:	016b      	lsls	r3, r5, #5
 8004d1e:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8004d22:	0162      	lsls	r2, r4, #5
 8004d24:	4614      	mov	r4, r2
 8004d26:	461d      	mov	r5, r3
 8004d28:	4643      	mov	r3, r8
 8004d2a:	18e3      	adds	r3, r4, r3
 8004d2c:	60bb      	str	r3, [r7, #8]
 8004d2e:	464b      	mov	r3, r9
 8004d30:	eb45 0303 	adc.w	r3, r5, r3
 8004d34:	60fb      	str	r3, [r7, #12]
 8004d36:	f04f 0200 	mov.w	r2, #0
 8004d3a:	f04f 0300 	mov.w	r3, #0
 8004d3e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004d42:	4629      	mov	r1, r5
 8004d44:	040b      	lsls	r3, r1, #16
 8004d46:	4621      	mov	r1, r4
 8004d48:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 8004d4c:	4621      	mov	r1, r4
 8004d4e:	040a      	lsls	r2, r1, #16
 8004d50:	4610      	mov	r0, r2
 8004d52:	4619      	mov	r1, r3
 8004d54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d56:	2200      	movs	r2, #0
 8004d58:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d5a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004d5c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004d60:	f7fb ffac 	bl	8000cbc <__aeabi_uldivmod>
 8004d64:	4602      	mov	r2, r0
 8004d66:	460b      	mov	r3, r1
 8004d68:	4613      	mov	r3, r2
 8004d6a:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d6c:	e05c      	b.n	8004e28 <HAL_RCC_GetSysClockFreq+0x1a8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d6e:	4b3a      	ldr	r3, [pc, #232]	@ (8004e58 <HAL_RCC_GetSysClockFreq+0x1d8>)
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	099b      	lsrs	r3, r3, #6
 8004d74:	2200      	movs	r2, #0
 8004d76:	623b      	str	r3, [r7, #32]
 8004d78:	627a      	str	r2, [r7, #36]	@ 0x24
 8004d7a:	6a3b      	ldr	r3, [r7, #32]
 8004d7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d80:	61bb      	str	r3, [r7, #24]
 8004d82:	2300      	movs	r3, #0
 8004d84:	61fb      	str	r3, [r7, #28]
 8004d86:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8004d8a:	4622      	mov	r2, r4
 8004d8c:	462b      	mov	r3, r5
 8004d8e:	f04f 0000 	mov.w	r0, #0
 8004d92:	f04f 0100 	mov.w	r1, #0
 8004d96:	0159      	lsls	r1, r3, #5
 8004d98:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d9c:	0150      	lsls	r0, r2, #5
 8004d9e:	4602      	mov	r2, r0
 8004da0:	460b      	mov	r3, r1
 8004da2:	4621      	mov	r1, r4
 8004da4:	ebb2 0a01 	subs.w	sl, r2, r1
 8004da8:	4629      	mov	r1, r5
 8004daa:	eb63 0b01 	sbc.w	fp, r3, r1
 8004dae:	f04f 0200 	mov.w	r2, #0
 8004db2:	f04f 0300 	mov.w	r3, #0
 8004db6:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004dba:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004dbe:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004dc2:	ebb2 080a 	subs.w	r8, r2, sl
 8004dc6:	eb63 090b 	sbc.w	r9, r3, fp
 8004dca:	f04f 0200 	mov.w	r2, #0
 8004dce:	f04f 0300 	mov.w	r3, #0
 8004dd2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004dd6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004dda:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004dde:	4690      	mov	r8, r2
 8004de0:	4699      	mov	r9, r3
 8004de2:	4623      	mov	r3, r4
 8004de4:	eb18 0303 	adds.w	r3, r8, r3
 8004de8:	603b      	str	r3, [r7, #0]
 8004dea:	462b      	mov	r3, r5
 8004dec:	eb49 0303 	adc.w	r3, r9, r3
 8004df0:	607b      	str	r3, [r7, #4]
 8004df2:	f04f 0200 	mov.w	r2, #0
 8004df6:	f04f 0300 	mov.w	r3, #0
 8004dfa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004dfe:	4629      	mov	r1, r5
 8004e00:	028b      	lsls	r3, r1, #10
 8004e02:	4621      	mov	r1, r4
 8004e04:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004e08:	4621      	mov	r1, r4
 8004e0a:	028a      	lsls	r2, r1, #10
 8004e0c:	4610      	mov	r0, r2
 8004e0e:	4619      	mov	r1, r3
 8004e10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e12:	2200      	movs	r2, #0
 8004e14:	613b      	str	r3, [r7, #16]
 8004e16:	617a      	str	r2, [r7, #20]
 8004e18:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004e1c:	f7fb ff4e 	bl	8000cbc <__aeabi_uldivmod>
 8004e20:	4602      	mov	r2, r0
 8004e22:	460b      	mov	r3, r1
 8004e24:	4613      	mov	r3, r2
 8004e26:	647b      	str	r3, [r7, #68]	@ 0x44
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004e28:	4b0b      	ldr	r3, [pc, #44]	@ (8004e58 <HAL_RCC_GetSysClockFreq+0x1d8>)
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	0c1b      	lsrs	r3, r3, #16
 8004e2e:	f003 0303 	and.w	r3, r3, #3
 8004e32:	3301      	adds	r3, #1
 8004e34:	005b      	lsls	r3, r3, #1
 8004e36:	63bb      	str	r3, [r7, #56]	@ 0x38

      sysclockfreq = pllvco / pllp;
 8004e38:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004e3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e40:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8004e42:	e002      	b.n	8004e4a <HAL_RCC_GetSysClockFreq+0x1ca>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004e44:	4b05      	ldr	r3, [pc, #20]	@ (8004e5c <HAL_RCC_GetSysClockFreq+0x1dc>)
 8004e46:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8004e48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	3748      	adds	r7, #72	@ 0x48
 8004e50:	46bd      	mov	sp, r7
 8004e52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e56:	bf00      	nop
 8004e58:	40023800 	.word	0x40023800
 8004e5c:	00f42400 	.word	0x00f42400

08004e60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e60:	b480      	push	{r7}
 8004e62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e64:	4b03      	ldr	r3, [pc, #12]	@ (8004e74 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e66:	681b      	ldr	r3, [r3, #0]
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e70:	4770      	bx	lr
 8004e72:	bf00      	nop
 8004e74:	20000004 	.word	0x20000004

08004e78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004e7c:	f7ff fff0 	bl	8004e60 <HAL_RCC_GetHCLKFreq>
 8004e80:	4602      	mov	r2, r0
 8004e82:	4b05      	ldr	r3, [pc, #20]	@ (8004e98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	0a9b      	lsrs	r3, r3, #10
 8004e88:	f003 0307 	and.w	r3, r3, #7
 8004e8c:	4903      	ldr	r1, [pc, #12]	@ (8004e9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e8e:	5ccb      	ldrb	r3, [r1, r3]
 8004e90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	bd80      	pop	{r7, pc}
 8004e98:	40023800 	.word	0x40023800
 8004e9c:	0801e6dc 	.word	0x0801e6dc

08004ea0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004ea4:	f7ff ffdc 	bl	8004e60 <HAL_RCC_GetHCLKFreq>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	4b05      	ldr	r3, [pc, #20]	@ (8004ec0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	0b5b      	lsrs	r3, r3, #13
 8004eb0:	f003 0307 	and.w	r3, r3, #7
 8004eb4:	4903      	ldr	r1, [pc, #12]	@ (8004ec4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004eb6:	5ccb      	ldrb	r3, [r1, r3]
 8004eb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	bd80      	pop	{r7, pc}
 8004ec0:	40023800 	.word	0x40023800
 8004ec4:	0801e6dc 	.word	0x0801e6dc

08004ec8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b083      	sub	sp, #12
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
 8004ed0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	220f      	movs	r2, #15
 8004ed6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004ed8:	4b12      	ldr	r3, [pc, #72]	@ (8004f24 <HAL_RCC_GetClockConfig+0x5c>)
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	f003 0203 	and.w	r2, r3, #3
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004ee4:	4b0f      	ldr	r3, [pc, #60]	@ (8004f24 <HAL_RCC_GetClockConfig+0x5c>)
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004ef0:	4b0c      	ldr	r3, [pc, #48]	@ (8004f24 <HAL_RCC_GetClockConfig+0x5c>)
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004efc:	4b09      	ldr	r3, [pc, #36]	@ (8004f24 <HAL_RCC_GetClockConfig+0x5c>)
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	08db      	lsrs	r3, r3, #3
 8004f02:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004f0a:	4b07      	ldr	r3, [pc, #28]	@ (8004f28 <HAL_RCC_GetClockConfig+0x60>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f003 020f 	and.w	r2, r3, #15
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	601a      	str	r2, [r3, #0]
}
 8004f16:	bf00      	nop
 8004f18:	370c      	adds	r7, #12
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f20:	4770      	bx	lr
 8004f22:	bf00      	nop
 8004f24:	40023800 	.word	0x40023800
 8004f28:	40023c00 	.word	0x40023c00

08004f2c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b086      	sub	sp, #24
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d101      	bne.n	8004f3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e273      	b.n	8005426 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f003 0301 	and.w	r3, r3, #1
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d075      	beq.n	8005036 <HAL_RCC_OscConfig+0x10a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004f4a:	4b88      	ldr	r3, [pc, #544]	@ (800516c <HAL_RCC_OscConfig+0x240>)
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	f003 030c 	and.w	r3, r3, #12
 8004f52:	2b04      	cmp	r3, #4
 8004f54:	d00c      	beq.n	8004f70 <HAL_RCC_OscConfig+0x44>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f56:	4b85      	ldr	r3, [pc, #532]	@ (800516c <HAL_RCC_OscConfig+0x240>)
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	f003 030c 	and.w	r3, r3, #12
        || \
 8004f5e:	2b08      	cmp	r3, #8
 8004f60:	d112      	bne.n	8004f88 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f62:	4b82      	ldr	r3, [pc, #520]	@ (800516c <HAL_RCC_OscConfig+0x240>)
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f6a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004f6e:	d10b      	bne.n	8004f88 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f70:	4b7e      	ldr	r3, [pc, #504]	@ (800516c <HAL_RCC_OscConfig+0x240>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d05b      	beq.n	8005034 <HAL_RCC_OscConfig+0x108>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d157      	bne.n	8005034 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004f84:	2301      	movs	r3, #1
 8004f86:	e24e      	b.n	8005426 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f90:	d106      	bne.n	8004fa0 <HAL_RCC_OscConfig+0x74>
 8004f92:	4b76      	ldr	r3, [pc, #472]	@ (800516c <HAL_RCC_OscConfig+0x240>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a75      	ldr	r2, [pc, #468]	@ (800516c <HAL_RCC_OscConfig+0x240>)
 8004f98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f9c:	6013      	str	r3, [r2, #0]
 8004f9e:	e01d      	b.n	8004fdc <HAL_RCC_OscConfig+0xb0>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004fa8:	d10c      	bne.n	8004fc4 <HAL_RCC_OscConfig+0x98>
 8004faa:	4b70      	ldr	r3, [pc, #448]	@ (800516c <HAL_RCC_OscConfig+0x240>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a6f      	ldr	r2, [pc, #444]	@ (800516c <HAL_RCC_OscConfig+0x240>)
 8004fb0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004fb4:	6013      	str	r3, [r2, #0]
 8004fb6:	4b6d      	ldr	r3, [pc, #436]	@ (800516c <HAL_RCC_OscConfig+0x240>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a6c      	ldr	r2, [pc, #432]	@ (800516c <HAL_RCC_OscConfig+0x240>)
 8004fbc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fc0:	6013      	str	r3, [r2, #0]
 8004fc2:	e00b      	b.n	8004fdc <HAL_RCC_OscConfig+0xb0>
 8004fc4:	4b69      	ldr	r3, [pc, #420]	@ (800516c <HAL_RCC_OscConfig+0x240>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a68      	ldr	r2, [pc, #416]	@ (800516c <HAL_RCC_OscConfig+0x240>)
 8004fca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004fce:	6013      	str	r3, [r2, #0]
 8004fd0:	4b66      	ldr	r3, [pc, #408]	@ (800516c <HAL_RCC_OscConfig+0x240>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a65      	ldr	r2, [pc, #404]	@ (800516c <HAL_RCC_OscConfig+0x240>)
 8004fd6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004fda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d013      	beq.n	800500c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fe4:	f7fe fe0c 	bl	8003c00 <HAL_GetTick>
 8004fe8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fea:	e008      	b.n	8004ffe <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004fec:	f7fe fe08 	bl	8003c00 <HAL_GetTick>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	1ad3      	subs	r3, r2, r3
 8004ff6:	2b64      	cmp	r3, #100	@ 0x64
 8004ff8:	d901      	bls.n	8004ffe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004ffa:	2303      	movs	r3, #3
 8004ffc:	e213      	b.n	8005426 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ffe:	4b5b      	ldr	r3, [pc, #364]	@ (800516c <HAL_RCC_OscConfig+0x240>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005006:	2b00      	cmp	r3, #0
 8005008:	d0f0      	beq.n	8004fec <HAL_RCC_OscConfig+0xc0>
 800500a:	e014      	b.n	8005036 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800500c:	f7fe fdf8 	bl	8003c00 <HAL_GetTick>
 8005010:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005012:	e008      	b.n	8005026 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005014:	f7fe fdf4 	bl	8003c00 <HAL_GetTick>
 8005018:	4602      	mov	r2, r0
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	1ad3      	subs	r3, r2, r3
 800501e:	2b64      	cmp	r3, #100	@ 0x64
 8005020:	d901      	bls.n	8005026 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005022:	2303      	movs	r3, #3
 8005024:	e1ff      	b.n	8005426 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005026:	4b51      	ldr	r3, [pc, #324]	@ (800516c <HAL_RCC_OscConfig+0x240>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800502e:	2b00      	cmp	r3, #0
 8005030:	d1f0      	bne.n	8005014 <HAL_RCC_OscConfig+0xe8>
 8005032:	e000      	b.n	8005036 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005034:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 0302 	and.w	r3, r3, #2
 800503e:	2b00      	cmp	r3, #0
 8005040:	d063      	beq.n	800510a <HAL_RCC_OscConfig+0x1de>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005042:	4b4a      	ldr	r3, [pc, #296]	@ (800516c <HAL_RCC_OscConfig+0x240>)
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	f003 030c 	and.w	r3, r3, #12
 800504a:	2b00      	cmp	r3, #0
 800504c:	d00b      	beq.n	8005066 <HAL_RCC_OscConfig+0x13a>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800504e:	4b47      	ldr	r3, [pc, #284]	@ (800516c <HAL_RCC_OscConfig+0x240>)
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	f003 030c 	and.w	r3, r3, #12
        || \
 8005056:	2b08      	cmp	r3, #8
 8005058:	d11c      	bne.n	8005094 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800505a:	4b44      	ldr	r3, [pc, #272]	@ (800516c <HAL_RCC_OscConfig+0x240>)
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005062:	2b00      	cmp	r3, #0
 8005064:	d116      	bne.n	8005094 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005066:	4b41      	ldr	r3, [pc, #260]	@ (800516c <HAL_RCC_OscConfig+0x240>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f003 0302 	and.w	r3, r3, #2
 800506e:	2b00      	cmp	r3, #0
 8005070:	d005      	beq.n	800507e <HAL_RCC_OscConfig+0x152>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	68db      	ldr	r3, [r3, #12]
 8005076:	2b01      	cmp	r3, #1
 8005078:	d001      	beq.n	800507e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	e1d3      	b.n	8005426 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800507e:	4b3b      	ldr	r3, [pc, #236]	@ (800516c <HAL_RCC_OscConfig+0x240>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	691b      	ldr	r3, [r3, #16]
 800508a:	00db      	lsls	r3, r3, #3
 800508c:	4937      	ldr	r1, [pc, #220]	@ (800516c <HAL_RCC_OscConfig+0x240>)
 800508e:	4313      	orrs	r3, r2
 8005090:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005092:	e03a      	b.n	800510a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	68db      	ldr	r3, [r3, #12]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d020      	beq.n	80050de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800509c:	4b34      	ldr	r3, [pc, #208]	@ (8005170 <HAL_RCC_OscConfig+0x244>)
 800509e:	2201      	movs	r2, #1
 80050a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050a2:	f7fe fdad 	bl	8003c00 <HAL_GetTick>
 80050a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050a8:	e008      	b.n	80050bc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050aa:	f7fe fda9 	bl	8003c00 <HAL_GetTick>
 80050ae:	4602      	mov	r2, r0
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	1ad3      	subs	r3, r2, r3
 80050b4:	2b02      	cmp	r3, #2
 80050b6:	d901      	bls.n	80050bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80050b8:	2303      	movs	r3, #3
 80050ba:	e1b4      	b.n	8005426 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050bc:	4b2b      	ldr	r3, [pc, #172]	@ (800516c <HAL_RCC_OscConfig+0x240>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f003 0302 	and.w	r3, r3, #2
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d0f0      	beq.n	80050aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050c8:	4b28      	ldr	r3, [pc, #160]	@ (800516c <HAL_RCC_OscConfig+0x240>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	691b      	ldr	r3, [r3, #16]
 80050d4:	00db      	lsls	r3, r3, #3
 80050d6:	4925      	ldr	r1, [pc, #148]	@ (800516c <HAL_RCC_OscConfig+0x240>)
 80050d8:	4313      	orrs	r3, r2
 80050da:	600b      	str	r3, [r1, #0]
 80050dc:	e015      	b.n	800510a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80050de:	4b24      	ldr	r3, [pc, #144]	@ (8005170 <HAL_RCC_OscConfig+0x244>)
 80050e0:	2200      	movs	r2, #0
 80050e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050e4:	f7fe fd8c 	bl	8003c00 <HAL_GetTick>
 80050e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050ea:	e008      	b.n	80050fe <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050ec:	f7fe fd88 	bl	8003c00 <HAL_GetTick>
 80050f0:	4602      	mov	r2, r0
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	1ad3      	subs	r3, r2, r3
 80050f6:	2b02      	cmp	r3, #2
 80050f8:	d901      	bls.n	80050fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80050fa:	2303      	movs	r3, #3
 80050fc:	e193      	b.n	8005426 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050fe:	4b1b      	ldr	r3, [pc, #108]	@ (800516c <HAL_RCC_OscConfig+0x240>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f003 0302 	and.w	r3, r3, #2
 8005106:	2b00      	cmp	r3, #0
 8005108:	d1f0      	bne.n	80050ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f003 0308 	and.w	r3, r3, #8
 8005112:	2b00      	cmp	r3, #0
 8005114:	d036      	beq.n	8005184 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	695b      	ldr	r3, [r3, #20]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d016      	beq.n	800514c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800511e:	4b15      	ldr	r3, [pc, #84]	@ (8005174 <HAL_RCC_OscConfig+0x248>)
 8005120:	2201      	movs	r2, #1
 8005122:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005124:	f7fe fd6c 	bl	8003c00 <HAL_GetTick>
 8005128:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800512a:	e008      	b.n	800513e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800512c:	f7fe fd68 	bl	8003c00 <HAL_GetTick>
 8005130:	4602      	mov	r2, r0
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	1ad3      	subs	r3, r2, r3
 8005136:	2b02      	cmp	r3, #2
 8005138:	d901      	bls.n	800513e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800513a:	2303      	movs	r3, #3
 800513c:	e173      	b.n	8005426 <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800513e:	4b0b      	ldr	r3, [pc, #44]	@ (800516c <HAL_RCC_OscConfig+0x240>)
 8005140:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005142:	f003 0302 	and.w	r3, r3, #2
 8005146:	2b00      	cmp	r3, #0
 8005148:	d0f0      	beq.n	800512c <HAL_RCC_OscConfig+0x200>
 800514a:	e01b      	b.n	8005184 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800514c:	4b09      	ldr	r3, [pc, #36]	@ (8005174 <HAL_RCC_OscConfig+0x248>)
 800514e:	2200      	movs	r2, #0
 8005150:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005152:	f7fe fd55 	bl	8003c00 <HAL_GetTick>
 8005156:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005158:	e00e      	b.n	8005178 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800515a:	f7fe fd51 	bl	8003c00 <HAL_GetTick>
 800515e:	4602      	mov	r2, r0
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	1ad3      	subs	r3, r2, r3
 8005164:	2b02      	cmp	r3, #2
 8005166:	d907      	bls.n	8005178 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005168:	2303      	movs	r3, #3
 800516a:	e15c      	b.n	8005426 <HAL_RCC_OscConfig+0x4fa>
 800516c:	40023800 	.word	0x40023800
 8005170:	42470000 	.word	0x42470000
 8005174:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005178:	4b8a      	ldr	r3, [pc, #552]	@ (80053a4 <HAL_RCC_OscConfig+0x478>)
 800517a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800517c:	f003 0302 	and.w	r3, r3, #2
 8005180:	2b00      	cmp	r3, #0
 8005182:	d1ea      	bne.n	800515a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f003 0304 	and.w	r3, r3, #4
 800518c:	2b00      	cmp	r3, #0
 800518e:	f000 8097 	beq.w	80052c0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005192:	2300      	movs	r3, #0
 8005194:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005196:	4b83      	ldr	r3, [pc, #524]	@ (80053a4 <HAL_RCC_OscConfig+0x478>)
 8005198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800519a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d10f      	bne.n	80051c2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051a2:	2300      	movs	r3, #0
 80051a4:	60bb      	str	r3, [r7, #8]
 80051a6:	4b7f      	ldr	r3, [pc, #508]	@ (80053a4 <HAL_RCC_OscConfig+0x478>)
 80051a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051aa:	4a7e      	ldr	r2, [pc, #504]	@ (80053a4 <HAL_RCC_OscConfig+0x478>)
 80051ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80051b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80051b2:	4b7c      	ldr	r3, [pc, #496]	@ (80053a4 <HAL_RCC_OscConfig+0x478>)
 80051b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051ba:	60bb      	str	r3, [r7, #8]
 80051bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051be:	2301      	movs	r3, #1
 80051c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051c2:	4b79      	ldr	r3, [pc, #484]	@ (80053a8 <HAL_RCC_OscConfig+0x47c>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d118      	bne.n	8005200 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80051ce:	4b76      	ldr	r3, [pc, #472]	@ (80053a8 <HAL_RCC_OscConfig+0x47c>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a75      	ldr	r2, [pc, #468]	@ (80053a8 <HAL_RCC_OscConfig+0x47c>)
 80051d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80051d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80051da:	f7fe fd11 	bl	8003c00 <HAL_GetTick>
 80051de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051e0:	e008      	b.n	80051f4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051e2:	f7fe fd0d 	bl	8003c00 <HAL_GetTick>
 80051e6:	4602      	mov	r2, r0
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	1ad3      	subs	r3, r2, r3
 80051ec:	2b02      	cmp	r3, #2
 80051ee:	d901      	bls.n	80051f4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80051f0:	2303      	movs	r3, #3
 80051f2:	e118      	b.n	8005426 <HAL_RCC_OscConfig+0x4fa>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051f4:	4b6c      	ldr	r3, [pc, #432]	@ (80053a8 <HAL_RCC_OscConfig+0x47c>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d0f0      	beq.n	80051e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	2b01      	cmp	r3, #1
 8005206:	d106      	bne.n	8005216 <HAL_RCC_OscConfig+0x2ea>
 8005208:	4b66      	ldr	r3, [pc, #408]	@ (80053a4 <HAL_RCC_OscConfig+0x478>)
 800520a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800520c:	4a65      	ldr	r2, [pc, #404]	@ (80053a4 <HAL_RCC_OscConfig+0x478>)
 800520e:	f043 0301 	orr.w	r3, r3, #1
 8005212:	6713      	str	r3, [r2, #112]	@ 0x70
 8005214:	e01c      	b.n	8005250 <HAL_RCC_OscConfig+0x324>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	2b05      	cmp	r3, #5
 800521c:	d10c      	bne.n	8005238 <HAL_RCC_OscConfig+0x30c>
 800521e:	4b61      	ldr	r3, [pc, #388]	@ (80053a4 <HAL_RCC_OscConfig+0x478>)
 8005220:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005222:	4a60      	ldr	r2, [pc, #384]	@ (80053a4 <HAL_RCC_OscConfig+0x478>)
 8005224:	f043 0304 	orr.w	r3, r3, #4
 8005228:	6713      	str	r3, [r2, #112]	@ 0x70
 800522a:	4b5e      	ldr	r3, [pc, #376]	@ (80053a4 <HAL_RCC_OscConfig+0x478>)
 800522c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800522e:	4a5d      	ldr	r2, [pc, #372]	@ (80053a4 <HAL_RCC_OscConfig+0x478>)
 8005230:	f043 0301 	orr.w	r3, r3, #1
 8005234:	6713      	str	r3, [r2, #112]	@ 0x70
 8005236:	e00b      	b.n	8005250 <HAL_RCC_OscConfig+0x324>
 8005238:	4b5a      	ldr	r3, [pc, #360]	@ (80053a4 <HAL_RCC_OscConfig+0x478>)
 800523a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800523c:	4a59      	ldr	r2, [pc, #356]	@ (80053a4 <HAL_RCC_OscConfig+0x478>)
 800523e:	f023 0301 	bic.w	r3, r3, #1
 8005242:	6713      	str	r3, [r2, #112]	@ 0x70
 8005244:	4b57      	ldr	r3, [pc, #348]	@ (80053a4 <HAL_RCC_OscConfig+0x478>)
 8005246:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005248:	4a56      	ldr	r2, [pc, #344]	@ (80053a4 <HAL_RCC_OscConfig+0x478>)
 800524a:	f023 0304 	bic.w	r3, r3, #4
 800524e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d015      	beq.n	8005284 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005258:	f7fe fcd2 	bl	8003c00 <HAL_GetTick>
 800525c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800525e:	e00a      	b.n	8005276 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005260:	f7fe fcce 	bl	8003c00 <HAL_GetTick>
 8005264:	4602      	mov	r2, r0
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	1ad3      	subs	r3, r2, r3
 800526a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800526e:	4293      	cmp	r3, r2
 8005270:	d901      	bls.n	8005276 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005272:	2303      	movs	r3, #3
 8005274:	e0d7      	b.n	8005426 <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005276:	4b4b      	ldr	r3, [pc, #300]	@ (80053a4 <HAL_RCC_OscConfig+0x478>)
 8005278:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800527a:	f003 0302 	and.w	r3, r3, #2
 800527e:	2b00      	cmp	r3, #0
 8005280:	d0ee      	beq.n	8005260 <HAL_RCC_OscConfig+0x334>
 8005282:	e014      	b.n	80052ae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005284:	f7fe fcbc 	bl	8003c00 <HAL_GetTick>
 8005288:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800528a:	e00a      	b.n	80052a2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800528c:	f7fe fcb8 	bl	8003c00 <HAL_GetTick>
 8005290:	4602      	mov	r2, r0
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	1ad3      	subs	r3, r2, r3
 8005296:	f241 3288 	movw	r2, #5000	@ 0x1388
 800529a:	4293      	cmp	r3, r2
 800529c:	d901      	bls.n	80052a2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800529e:	2303      	movs	r3, #3
 80052a0:	e0c1      	b.n	8005426 <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052a2:	4b40      	ldr	r3, [pc, #256]	@ (80053a4 <HAL_RCC_OscConfig+0x478>)
 80052a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052a6:	f003 0302 	and.w	r3, r3, #2
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d1ee      	bne.n	800528c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80052ae:	7dfb      	ldrb	r3, [r7, #23]
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d105      	bne.n	80052c0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052b4:	4b3b      	ldr	r3, [pc, #236]	@ (80053a4 <HAL_RCC_OscConfig+0x478>)
 80052b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052b8:	4a3a      	ldr	r2, [pc, #232]	@ (80053a4 <HAL_RCC_OscConfig+0x478>)
 80052ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80052be:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	699b      	ldr	r3, [r3, #24]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	f000 80ad 	beq.w	8005424 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80052ca:	4b36      	ldr	r3, [pc, #216]	@ (80053a4 <HAL_RCC_OscConfig+0x478>)
 80052cc:	689b      	ldr	r3, [r3, #8]
 80052ce:	f003 030c 	and.w	r3, r3, #12
 80052d2:	2b08      	cmp	r3, #8
 80052d4:	d060      	beq.n	8005398 <HAL_RCC_OscConfig+0x46c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	699b      	ldr	r3, [r3, #24]
 80052da:	2b02      	cmp	r3, #2
 80052dc:	d145      	bne.n	800536a <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052de:	4b33      	ldr	r3, [pc, #204]	@ (80053ac <HAL_RCC_OscConfig+0x480>)
 80052e0:	2200      	movs	r2, #0
 80052e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052e4:	f7fe fc8c 	bl	8003c00 <HAL_GetTick>
 80052e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052ea:	e008      	b.n	80052fe <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052ec:	f7fe fc88 	bl	8003c00 <HAL_GetTick>
 80052f0:	4602      	mov	r2, r0
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	1ad3      	subs	r3, r2, r3
 80052f6:	2b02      	cmp	r3, #2
 80052f8:	d901      	bls.n	80052fe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80052fa:	2303      	movs	r3, #3
 80052fc:	e093      	b.n	8005426 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052fe:	4b29      	ldr	r3, [pc, #164]	@ (80053a4 <HAL_RCC_OscConfig+0x478>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005306:	2b00      	cmp	r3, #0
 8005308:	d1f0      	bne.n	80052ec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	69da      	ldr	r2, [r3, #28]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6a1b      	ldr	r3, [r3, #32]
 8005312:	431a      	orrs	r2, r3
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005318:	019b      	lsls	r3, r3, #6
 800531a:	431a      	orrs	r2, r3
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005320:	085b      	lsrs	r3, r3, #1
 8005322:	3b01      	subs	r3, #1
 8005324:	041b      	lsls	r3, r3, #16
 8005326:	431a      	orrs	r2, r3
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800532c:	061b      	lsls	r3, r3, #24
 800532e:	431a      	orrs	r2, r3
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005334:	071b      	lsls	r3, r3, #28
 8005336:	491b      	ldr	r1, [pc, #108]	@ (80053a4 <HAL_RCC_OscConfig+0x478>)
 8005338:	4313      	orrs	r3, r2
 800533a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800533c:	4b1b      	ldr	r3, [pc, #108]	@ (80053ac <HAL_RCC_OscConfig+0x480>)
 800533e:	2201      	movs	r2, #1
 8005340:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005342:	f7fe fc5d 	bl	8003c00 <HAL_GetTick>
 8005346:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005348:	e008      	b.n	800535c <HAL_RCC_OscConfig+0x430>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800534a:	f7fe fc59 	bl	8003c00 <HAL_GetTick>
 800534e:	4602      	mov	r2, r0
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	1ad3      	subs	r3, r2, r3
 8005354:	2b02      	cmp	r3, #2
 8005356:	d901      	bls.n	800535c <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8005358:	2303      	movs	r3, #3
 800535a:	e064      	b.n	8005426 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800535c:	4b11      	ldr	r3, [pc, #68]	@ (80053a4 <HAL_RCC_OscConfig+0x478>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005364:	2b00      	cmp	r3, #0
 8005366:	d0f0      	beq.n	800534a <HAL_RCC_OscConfig+0x41e>
 8005368:	e05c      	b.n	8005424 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800536a:	4b10      	ldr	r3, [pc, #64]	@ (80053ac <HAL_RCC_OscConfig+0x480>)
 800536c:	2200      	movs	r2, #0
 800536e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005370:	f7fe fc46 	bl	8003c00 <HAL_GetTick>
 8005374:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005376:	e008      	b.n	800538a <HAL_RCC_OscConfig+0x45e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005378:	f7fe fc42 	bl	8003c00 <HAL_GetTick>
 800537c:	4602      	mov	r2, r0
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	1ad3      	subs	r3, r2, r3
 8005382:	2b02      	cmp	r3, #2
 8005384:	d901      	bls.n	800538a <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8005386:	2303      	movs	r3, #3
 8005388:	e04d      	b.n	8005426 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800538a:	4b06      	ldr	r3, [pc, #24]	@ (80053a4 <HAL_RCC_OscConfig+0x478>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005392:	2b00      	cmp	r3, #0
 8005394:	d1f0      	bne.n	8005378 <HAL_RCC_OscConfig+0x44c>
 8005396:	e045      	b.n	8005424 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	699b      	ldr	r3, [r3, #24]
 800539c:	2b01      	cmp	r3, #1
 800539e:	d107      	bne.n	80053b0 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 80053a0:	2301      	movs	r3, #1
 80053a2:	e040      	b.n	8005426 <HAL_RCC_OscConfig+0x4fa>
 80053a4:	40023800 	.word	0x40023800
 80053a8:	40007000 	.word	0x40007000
 80053ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80053b0:	4b1f      	ldr	r3, [pc, #124]	@ (8005430 <HAL_RCC_OscConfig+0x504>)
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	699b      	ldr	r3, [r3, #24]
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d030      	beq.n	8005420 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80053c8:	429a      	cmp	r2, r3
 80053ca:	d129      	bne.n	8005420 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053d6:	429a      	cmp	r2, r3
 80053d8:	d122      	bne.n	8005420 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80053da:	68fa      	ldr	r2, [r7, #12]
 80053dc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80053e0:	4013      	ands	r3, r2
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80053e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d119      	bne.n	8005420 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053f6:	085b      	lsrs	r3, r3, #1
 80053f8:	3b01      	subs	r3, #1
 80053fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80053fc:	429a      	cmp	r2, r3
 80053fe:	d10f      	bne.n	8005420 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800540a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800540c:	429a      	cmp	r2, r3
 800540e:	d107      	bne.n	8005420 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800541a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800541c:	429a      	cmp	r2, r3
 800541e:	d001      	beq.n	8005424 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005420:	2301      	movs	r3, #1
 8005422:	e000      	b.n	8005426 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8005424:	2300      	movs	r3, #0
}
 8005426:	4618      	mov	r0, r3
 8005428:	3718      	adds	r7, #24
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}
 800542e:	bf00      	nop
 8005430:	40023800 	.word	0x40023800

08005434 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b082      	sub	sp, #8
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d101      	bne.n	8005446 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005442:	2301      	movs	r3, #1
 8005444:	e041      	b.n	80054ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800544c:	b2db      	uxtb	r3, r3
 800544e:	2b00      	cmp	r3, #0
 8005450:	d106      	bne.n	8005460 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2200      	movs	r2, #0
 8005456:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f7fd fb06 	bl	8002a6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2202      	movs	r2, #2
 8005464:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	3304      	adds	r3, #4
 8005470:	4619      	mov	r1, r3
 8005472:	4610      	mov	r0, r2
 8005474:	f000 fcc0 	bl	8005df8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2201      	movs	r2, #1
 800547c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2201      	movs	r2, #1
 8005484:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2201      	movs	r2, #1
 800548c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2201      	movs	r2, #1
 8005494:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2201      	movs	r2, #1
 800549c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2201      	movs	r2, #1
 80054a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2201      	movs	r2, #1
 80054ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2201      	movs	r2, #1
 80054b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2201      	movs	r2, #1
 80054bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2201      	movs	r2, #1
 80054c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80054c8:	2300      	movs	r3, #0
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3708      	adds	r7, #8
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}
	...

080054d4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b085      	sub	sp, #20
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054e2:	b2db      	uxtb	r3, r3
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	d001      	beq.n	80054ec <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	e046      	b.n	800557a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2202      	movs	r2, #2
 80054f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a23      	ldr	r2, [pc, #140]	@ (8005588 <HAL_TIM_Base_Start+0xb4>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d022      	beq.n	8005544 <HAL_TIM_Base_Start+0x70>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005506:	d01d      	beq.n	8005544 <HAL_TIM_Base_Start+0x70>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a1f      	ldr	r2, [pc, #124]	@ (800558c <HAL_TIM_Base_Start+0xb8>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d018      	beq.n	8005544 <HAL_TIM_Base_Start+0x70>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a1e      	ldr	r2, [pc, #120]	@ (8005590 <HAL_TIM_Base_Start+0xbc>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d013      	beq.n	8005544 <HAL_TIM_Base_Start+0x70>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a1c      	ldr	r2, [pc, #112]	@ (8005594 <HAL_TIM_Base_Start+0xc0>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d00e      	beq.n	8005544 <HAL_TIM_Base_Start+0x70>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a1b      	ldr	r2, [pc, #108]	@ (8005598 <HAL_TIM_Base_Start+0xc4>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d009      	beq.n	8005544 <HAL_TIM_Base_Start+0x70>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a19      	ldr	r2, [pc, #100]	@ (800559c <HAL_TIM_Base_Start+0xc8>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d004      	beq.n	8005544 <HAL_TIM_Base_Start+0x70>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a18      	ldr	r2, [pc, #96]	@ (80055a0 <HAL_TIM_Base_Start+0xcc>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d111      	bne.n	8005568 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	f003 0307 	and.w	r3, r3, #7
 800554e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2b06      	cmp	r3, #6
 8005554:	d010      	beq.n	8005578 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	681a      	ldr	r2, [r3, #0]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f042 0201 	orr.w	r2, r2, #1
 8005564:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005566:	e007      	b.n	8005578 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	681a      	ldr	r2, [r3, #0]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f042 0201 	orr.w	r2, r2, #1
 8005576:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005578:	2300      	movs	r3, #0
}
 800557a:	4618      	mov	r0, r3
 800557c:	3714      	adds	r7, #20
 800557e:	46bd      	mov	sp, r7
 8005580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005584:	4770      	bx	lr
 8005586:	bf00      	nop
 8005588:	40010000 	.word	0x40010000
 800558c:	40000400 	.word	0x40000400
 8005590:	40000800 	.word	0x40000800
 8005594:	40000c00 	.word	0x40000c00
 8005598:	40010400 	.word	0x40010400
 800559c:	40014000 	.word	0x40014000
 80055a0:	40001800 	.word	0x40001800

080055a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b085      	sub	sp, #20
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055b2:	b2db      	uxtb	r3, r3
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	d001      	beq.n	80055bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80055b8:	2301      	movs	r3, #1
 80055ba:	e04e      	b.n	800565a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2202      	movs	r2, #2
 80055c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	68da      	ldr	r2, [r3, #12]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f042 0201 	orr.w	r2, r2, #1
 80055d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a23      	ldr	r2, [pc, #140]	@ (8005668 <HAL_TIM_Base_Start_IT+0xc4>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d022      	beq.n	8005624 <HAL_TIM_Base_Start_IT+0x80>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055e6:	d01d      	beq.n	8005624 <HAL_TIM_Base_Start_IT+0x80>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a1f      	ldr	r2, [pc, #124]	@ (800566c <HAL_TIM_Base_Start_IT+0xc8>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d018      	beq.n	8005624 <HAL_TIM_Base_Start_IT+0x80>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a1e      	ldr	r2, [pc, #120]	@ (8005670 <HAL_TIM_Base_Start_IT+0xcc>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d013      	beq.n	8005624 <HAL_TIM_Base_Start_IT+0x80>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a1c      	ldr	r2, [pc, #112]	@ (8005674 <HAL_TIM_Base_Start_IT+0xd0>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d00e      	beq.n	8005624 <HAL_TIM_Base_Start_IT+0x80>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a1b      	ldr	r2, [pc, #108]	@ (8005678 <HAL_TIM_Base_Start_IT+0xd4>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d009      	beq.n	8005624 <HAL_TIM_Base_Start_IT+0x80>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a19      	ldr	r2, [pc, #100]	@ (800567c <HAL_TIM_Base_Start_IT+0xd8>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d004      	beq.n	8005624 <HAL_TIM_Base_Start_IT+0x80>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a18      	ldr	r2, [pc, #96]	@ (8005680 <HAL_TIM_Base_Start_IT+0xdc>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d111      	bne.n	8005648 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	f003 0307 	and.w	r3, r3, #7
 800562e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2b06      	cmp	r3, #6
 8005634:	d010      	beq.n	8005658 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	681a      	ldr	r2, [r3, #0]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f042 0201 	orr.w	r2, r2, #1
 8005644:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005646:	e007      	b.n	8005658 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	681a      	ldr	r2, [r3, #0]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f042 0201 	orr.w	r2, r2, #1
 8005656:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005658:	2300      	movs	r3, #0
}
 800565a:	4618      	mov	r0, r3
 800565c:	3714      	adds	r7, #20
 800565e:	46bd      	mov	sp, r7
 8005660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005664:	4770      	bx	lr
 8005666:	bf00      	nop
 8005668:	40010000 	.word	0x40010000
 800566c:	40000400 	.word	0x40000400
 8005670:	40000800 	.word	0x40000800
 8005674:	40000c00 	.word	0x40000c00
 8005678:	40010400 	.word	0x40010400
 800567c:	40014000 	.word	0x40014000
 8005680:	40001800 	.word	0x40001800

08005684 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b082      	sub	sp, #8
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d101      	bne.n	8005696 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005692:	2301      	movs	r3, #1
 8005694:	e041      	b.n	800571a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800569c:	b2db      	uxtb	r3, r3
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d106      	bne.n	80056b0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2200      	movs	r2, #0
 80056a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	f7fd f9be 	bl	8002a2c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2202      	movs	r2, #2
 80056b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	3304      	adds	r3, #4
 80056c0:	4619      	mov	r1, r3
 80056c2:	4610      	mov	r0, r2
 80056c4:	f000 fb98 	bl	8005df8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2201      	movs	r2, #1
 80056cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2201      	movs	r2, #1
 80056d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2201      	movs	r2, #1
 80056dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2201      	movs	r2, #1
 80056e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2201      	movs	r2, #1
 80056ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2201      	movs	r2, #1
 80056f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2201      	movs	r2, #1
 80056fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2201      	movs	r2, #1
 8005704:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2201      	movs	r2, #1
 800570c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2201      	movs	r2, #1
 8005714:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005718:	2300      	movs	r3, #0
}
 800571a:	4618      	mov	r0, r3
 800571c:	3708      	adds	r7, #8
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}
	...

08005724 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b084      	sub	sp, #16
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
 800572c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d109      	bne.n	8005748 <HAL_TIM_PWM_Start+0x24>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800573a:	b2db      	uxtb	r3, r3
 800573c:	2b01      	cmp	r3, #1
 800573e:	bf14      	ite	ne
 8005740:	2301      	movne	r3, #1
 8005742:	2300      	moveq	r3, #0
 8005744:	b2db      	uxtb	r3, r3
 8005746:	e022      	b.n	800578e <HAL_TIM_PWM_Start+0x6a>
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	2b04      	cmp	r3, #4
 800574c:	d109      	bne.n	8005762 <HAL_TIM_PWM_Start+0x3e>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005754:	b2db      	uxtb	r3, r3
 8005756:	2b01      	cmp	r3, #1
 8005758:	bf14      	ite	ne
 800575a:	2301      	movne	r3, #1
 800575c:	2300      	moveq	r3, #0
 800575e:	b2db      	uxtb	r3, r3
 8005760:	e015      	b.n	800578e <HAL_TIM_PWM_Start+0x6a>
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	2b08      	cmp	r3, #8
 8005766:	d109      	bne.n	800577c <HAL_TIM_PWM_Start+0x58>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800576e:	b2db      	uxtb	r3, r3
 8005770:	2b01      	cmp	r3, #1
 8005772:	bf14      	ite	ne
 8005774:	2301      	movne	r3, #1
 8005776:	2300      	moveq	r3, #0
 8005778:	b2db      	uxtb	r3, r3
 800577a:	e008      	b.n	800578e <HAL_TIM_PWM_Start+0x6a>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005782:	b2db      	uxtb	r3, r3
 8005784:	2b01      	cmp	r3, #1
 8005786:	bf14      	ite	ne
 8005788:	2301      	movne	r3, #1
 800578a:	2300      	moveq	r3, #0
 800578c:	b2db      	uxtb	r3, r3
 800578e:	2b00      	cmp	r3, #0
 8005790:	d001      	beq.n	8005796 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005792:	2301      	movs	r3, #1
 8005794:	e07c      	b.n	8005890 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d104      	bne.n	80057a6 <HAL_TIM_PWM_Start+0x82>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2202      	movs	r2, #2
 80057a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80057a4:	e013      	b.n	80057ce <HAL_TIM_PWM_Start+0xaa>
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	2b04      	cmp	r3, #4
 80057aa:	d104      	bne.n	80057b6 <HAL_TIM_PWM_Start+0x92>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2202      	movs	r2, #2
 80057b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80057b4:	e00b      	b.n	80057ce <HAL_TIM_PWM_Start+0xaa>
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	2b08      	cmp	r3, #8
 80057ba:	d104      	bne.n	80057c6 <HAL_TIM_PWM_Start+0xa2>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2202      	movs	r2, #2
 80057c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80057c4:	e003      	b.n	80057ce <HAL_TIM_PWM_Start+0xaa>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2202      	movs	r2, #2
 80057ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	2201      	movs	r2, #1
 80057d4:	6839      	ldr	r1, [r7, #0]
 80057d6:	4618      	mov	r0, r3
 80057d8:	f000 fdfe 	bl	80063d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a2d      	ldr	r2, [pc, #180]	@ (8005898 <HAL_TIM_PWM_Start+0x174>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d004      	beq.n	80057f0 <HAL_TIM_PWM_Start+0xcc>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a2c      	ldr	r2, [pc, #176]	@ (800589c <HAL_TIM_PWM_Start+0x178>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d101      	bne.n	80057f4 <HAL_TIM_PWM_Start+0xd0>
 80057f0:	2301      	movs	r3, #1
 80057f2:	e000      	b.n	80057f6 <HAL_TIM_PWM_Start+0xd2>
 80057f4:	2300      	movs	r3, #0
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d007      	beq.n	800580a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005808:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a22      	ldr	r2, [pc, #136]	@ (8005898 <HAL_TIM_PWM_Start+0x174>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d022      	beq.n	800585a <HAL_TIM_PWM_Start+0x136>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800581c:	d01d      	beq.n	800585a <HAL_TIM_PWM_Start+0x136>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a1f      	ldr	r2, [pc, #124]	@ (80058a0 <HAL_TIM_PWM_Start+0x17c>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d018      	beq.n	800585a <HAL_TIM_PWM_Start+0x136>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a1d      	ldr	r2, [pc, #116]	@ (80058a4 <HAL_TIM_PWM_Start+0x180>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d013      	beq.n	800585a <HAL_TIM_PWM_Start+0x136>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a1c      	ldr	r2, [pc, #112]	@ (80058a8 <HAL_TIM_PWM_Start+0x184>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d00e      	beq.n	800585a <HAL_TIM_PWM_Start+0x136>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a16      	ldr	r2, [pc, #88]	@ (800589c <HAL_TIM_PWM_Start+0x178>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d009      	beq.n	800585a <HAL_TIM_PWM_Start+0x136>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a18      	ldr	r2, [pc, #96]	@ (80058ac <HAL_TIM_PWM_Start+0x188>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d004      	beq.n	800585a <HAL_TIM_PWM_Start+0x136>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a16      	ldr	r2, [pc, #88]	@ (80058b0 <HAL_TIM_PWM_Start+0x18c>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d111      	bne.n	800587e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	f003 0307 	and.w	r3, r3, #7
 8005864:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2b06      	cmp	r3, #6
 800586a:	d010      	beq.n	800588e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	681a      	ldr	r2, [r3, #0]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f042 0201 	orr.w	r2, r2, #1
 800587a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800587c:	e007      	b.n	800588e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	681a      	ldr	r2, [r3, #0]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f042 0201 	orr.w	r2, r2, #1
 800588c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800588e:	2300      	movs	r3, #0
}
 8005890:	4618      	mov	r0, r3
 8005892:	3710      	adds	r7, #16
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}
 8005898:	40010000 	.word	0x40010000
 800589c:	40010400 	.word	0x40010400
 80058a0:	40000400 	.word	0x40000400
 80058a4:	40000800 	.word	0x40000800
 80058a8:	40000c00 	.word	0x40000c00
 80058ac:	40014000 	.word	0x40014000
 80058b0:	40001800 	.word	0x40001800

080058b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b084      	sub	sp, #16
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	68db      	ldr	r3, [r3, #12]
 80058c2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	691b      	ldr	r3, [r3, #16]
 80058ca:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	f003 0302 	and.w	r3, r3, #2
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d020      	beq.n	8005918 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	f003 0302 	and.w	r3, r3, #2
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d01b      	beq.n	8005918 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f06f 0202 	mvn.w	r2, #2
 80058e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2201      	movs	r2, #1
 80058ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	699b      	ldr	r3, [r3, #24]
 80058f6:	f003 0303 	and.w	r3, r3, #3
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d003      	beq.n	8005906 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f000 fa5b 	bl	8005dba <HAL_TIM_IC_CaptureCallback>
 8005904:	e005      	b.n	8005912 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f000 fa4d 	bl	8005da6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	f000 fa5e 	bl	8005dce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2200      	movs	r2, #0
 8005916:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	f003 0304 	and.w	r3, r3, #4
 800591e:	2b00      	cmp	r3, #0
 8005920:	d020      	beq.n	8005964 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	f003 0304 	and.w	r3, r3, #4
 8005928:	2b00      	cmp	r3, #0
 800592a:	d01b      	beq.n	8005964 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f06f 0204 	mvn.w	r2, #4
 8005934:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2202      	movs	r2, #2
 800593a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	699b      	ldr	r3, [r3, #24]
 8005942:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005946:	2b00      	cmp	r3, #0
 8005948:	d003      	beq.n	8005952 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f000 fa35 	bl	8005dba <HAL_TIM_IC_CaptureCallback>
 8005950:	e005      	b.n	800595e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f000 fa27 	bl	8005da6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005958:	6878      	ldr	r0, [r7, #4]
 800595a:	f000 fa38 	bl	8005dce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2200      	movs	r2, #0
 8005962:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	f003 0308 	and.w	r3, r3, #8
 800596a:	2b00      	cmp	r3, #0
 800596c:	d020      	beq.n	80059b0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	f003 0308 	and.w	r3, r3, #8
 8005974:	2b00      	cmp	r3, #0
 8005976:	d01b      	beq.n	80059b0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f06f 0208 	mvn.w	r2, #8
 8005980:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2204      	movs	r2, #4
 8005986:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	69db      	ldr	r3, [r3, #28]
 800598e:	f003 0303 	and.w	r3, r3, #3
 8005992:	2b00      	cmp	r3, #0
 8005994:	d003      	beq.n	800599e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f000 fa0f 	bl	8005dba <HAL_TIM_IC_CaptureCallback>
 800599c:	e005      	b.n	80059aa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f000 fa01 	bl	8005da6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059a4:	6878      	ldr	r0, [r7, #4]
 80059a6:	f000 fa12 	bl	8005dce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2200      	movs	r2, #0
 80059ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	f003 0310 	and.w	r3, r3, #16
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d020      	beq.n	80059fc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	f003 0310 	and.w	r3, r3, #16
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d01b      	beq.n	80059fc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f06f 0210 	mvn.w	r2, #16
 80059cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2208      	movs	r2, #8
 80059d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	69db      	ldr	r3, [r3, #28]
 80059da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d003      	beq.n	80059ea <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f000 f9e9 	bl	8005dba <HAL_TIM_IC_CaptureCallback>
 80059e8:	e005      	b.n	80059f6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f000 f9db 	bl	8005da6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	f000 f9ec 	bl	8005dce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2200      	movs	r2, #0
 80059fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	f003 0301 	and.w	r3, r3, #1
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d00c      	beq.n	8005a20 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	f003 0301 	and.w	r3, r3, #1
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d007      	beq.n	8005a20 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f06f 0201 	mvn.w	r2, #1
 8005a18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f7fc fbd8 	bl	80021d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d00c      	beq.n	8005a44 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d007      	beq.n	8005a44 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005a3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f000 fd76 	bl	8006530 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d00c      	beq.n	8005a68 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d007      	beq.n	8005a68 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005a60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f000 f9bd 	bl	8005de2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	f003 0320 	and.w	r3, r3, #32
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d00c      	beq.n	8005a8c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	f003 0320 	and.w	r3, r3, #32
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d007      	beq.n	8005a8c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f06f 0220 	mvn.w	r2, #32
 8005a84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f000 fd48 	bl	800651c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005a8c:	bf00      	nop
 8005a8e:	3710      	adds	r7, #16
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}

08005a94 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b086      	sub	sp, #24
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	60f8      	str	r0, [r7, #12]
 8005a9c:	60b9      	str	r1, [r7, #8]
 8005a9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005aaa:	2b01      	cmp	r3, #1
 8005aac:	d101      	bne.n	8005ab2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005aae:	2302      	movs	r3, #2
 8005ab0:	e0ae      	b.n	8005c10 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2201      	movs	r2, #1
 8005ab6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2b0c      	cmp	r3, #12
 8005abe:	f200 809f 	bhi.w	8005c00 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005ac2:	a201      	add	r2, pc, #4	@ (adr r2, 8005ac8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ac8:	08005afd 	.word	0x08005afd
 8005acc:	08005c01 	.word	0x08005c01
 8005ad0:	08005c01 	.word	0x08005c01
 8005ad4:	08005c01 	.word	0x08005c01
 8005ad8:	08005b3d 	.word	0x08005b3d
 8005adc:	08005c01 	.word	0x08005c01
 8005ae0:	08005c01 	.word	0x08005c01
 8005ae4:	08005c01 	.word	0x08005c01
 8005ae8:	08005b7f 	.word	0x08005b7f
 8005aec:	08005c01 	.word	0x08005c01
 8005af0:	08005c01 	.word	0x08005c01
 8005af4:	08005c01 	.word	0x08005c01
 8005af8:	08005bbf 	.word	0x08005bbf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	68b9      	ldr	r1, [r7, #8]
 8005b02:	4618      	mov	r0, r3
 8005b04:	f000 fa1e 	bl	8005f44 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	699a      	ldr	r2, [r3, #24]
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f042 0208 	orr.w	r2, r2, #8
 8005b16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	699a      	ldr	r2, [r3, #24]
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f022 0204 	bic.w	r2, r2, #4
 8005b26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	6999      	ldr	r1, [r3, #24]
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	691a      	ldr	r2, [r3, #16]
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	430a      	orrs	r2, r1
 8005b38:	619a      	str	r2, [r3, #24]
      break;
 8005b3a:	e064      	b.n	8005c06 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	68b9      	ldr	r1, [r7, #8]
 8005b42:	4618      	mov	r0, r3
 8005b44:	f000 fa6e 	bl	8006024 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	699a      	ldr	r2, [r3, #24]
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005b56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	699a      	ldr	r2, [r3, #24]
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	6999      	ldr	r1, [r3, #24]
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	691b      	ldr	r3, [r3, #16]
 8005b72:	021a      	lsls	r2, r3, #8
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	430a      	orrs	r2, r1
 8005b7a:	619a      	str	r2, [r3, #24]
      break;
 8005b7c:	e043      	b.n	8005c06 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	68b9      	ldr	r1, [r7, #8]
 8005b84:	4618      	mov	r0, r3
 8005b86:	f000 fac3 	bl	8006110 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	69da      	ldr	r2, [r3, #28]
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f042 0208 	orr.w	r2, r2, #8
 8005b98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	69da      	ldr	r2, [r3, #28]
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f022 0204 	bic.w	r2, r2, #4
 8005ba8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	69d9      	ldr	r1, [r3, #28]
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	691a      	ldr	r2, [r3, #16]
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	430a      	orrs	r2, r1
 8005bba:	61da      	str	r2, [r3, #28]
      break;
 8005bbc:	e023      	b.n	8005c06 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	68b9      	ldr	r1, [r7, #8]
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	f000 fb17 	bl	80061f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	69da      	ldr	r2, [r3, #28]
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005bd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	69da      	ldr	r2, [r3, #28]
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005be8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	69d9      	ldr	r1, [r3, #28]
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	691b      	ldr	r3, [r3, #16]
 8005bf4:	021a      	lsls	r2, r3, #8
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	430a      	orrs	r2, r1
 8005bfc:	61da      	str	r2, [r3, #28]
      break;
 8005bfe:	e002      	b.n	8005c06 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005c00:	2301      	movs	r3, #1
 8005c02:	75fb      	strb	r3, [r7, #23]
      break;
 8005c04:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005c0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	3718      	adds	r7, #24
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}

08005c18 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b084      	sub	sp, #16
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
 8005c20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c22:	2300      	movs	r3, #0
 8005c24:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c2c:	2b01      	cmp	r3, #1
 8005c2e:	d101      	bne.n	8005c34 <HAL_TIM_ConfigClockSource+0x1c>
 8005c30:	2302      	movs	r3, #2
 8005c32:	e0b4      	b.n	8005d9e <HAL_TIM_ConfigClockSource+0x186>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2201      	movs	r2, #1
 8005c38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2202      	movs	r2, #2
 8005c40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	689b      	ldr	r3, [r3, #8]
 8005c4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005c52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005c5a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	68ba      	ldr	r2, [r7, #8]
 8005c62:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c6c:	d03e      	beq.n	8005cec <HAL_TIM_ConfigClockSource+0xd4>
 8005c6e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c72:	f200 8087 	bhi.w	8005d84 <HAL_TIM_ConfigClockSource+0x16c>
 8005c76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c7a:	f000 8086 	beq.w	8005d8a <HAL_TIM_ConfigClockSource+0x172>
 8005c7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c82:	d87f      	bhi.n	8005d84 <HAL_TIM_ConfigClockSource+0x16c>
 8005c84:	2b70      	cmp	r3, #112	@ 0x70
 8005c86:	d01a      	beq.n	8005cbe <HAL_TIM_ConfigClockSource+0xa6>
 8005c88:	2b70      	cmp	r3, #112	@ 0x70
 8005c8a:	d87b      	bhi.n	8005d84 <HAL_TIM_ConfigClockSource+0x16c>
 8005c8c:	2b60      	cmp	r3, #96	@ 0x60
 8005c8e:	d050      	beq.n	8005d32 <HAL_TIM_ConfigClockSource+0x11a>
 8005c90:	2b60      	cmp	r3, #96	@ 0x60
 8005c92:	d877      	bhi.n	8005d84 <HAL_TIM_ConfigClockSource+0x16c>
 8005c94:	2b50      	cmp	r3, #80	@ 0x50
 8005c96:	d03c      	beq.n	8005d12 <HAL_TIM_ConfigClockSource+0xfa>
 8005c98:	2b50      	cmp	r3, #80	@ 0x50
 8005c9a:	d873      	bhi.n	8005d84 <HAL_TIM_ConfigClockSource+0x16c>
 8005c9c:	2b40      	cmp	r3, #64	@ 0x40
 8005c9e:	d058      	beq.n	8005d52 <HAL_TIM_ConfigClockSource+0x13a>
 8005ca0:	2b40      	cmp	r3, #64	@ 0x40
 8005ca2:	d86f      	bhi.n	8005d84 <HAL_TIM_ConfigClockSource+0x16c>
 8005ca4:	2b30      	cmp	r3, #48	@ 0x30
 8005ca6:	d064      	beq.n	8005d72 <HAL_TIM_ConfigClockSource+0x15a>
 8005ca8:	2b30      	cmp	r3, #48	@ 0x30
 8005caa:	d86b      	bhi.n	8005d84 <HAL_TIM_ConfigClockSource+0x16c>
 8005cac:	2b20      	cmp	r3, #32
 8005cae:	d060      	beq.n	8005d72 <HAL_TIM_ConfigClockSource+0x15a>
 8005cb0:	2b20      	cmp	r3, #32
 8005cb2:	d867      	bhi.n	8005d84 <HAL_TIM_ConfigClockSource+0x16c>
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d05c      	beq.n	8005d72 <HAL_TIM_ConfigClockSource+0x15a>
 8005cb8:	2b10      	cmp	r3, #16
 8005cba:	d05a      	beq.n	8005d72 <HAL_TIM_ConfigClockSource+0x15a>
 8005cbc:	e062      	b.n	8005d84 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005cce:	f000 fb63 	bl	8006398 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	689b      	ldr	r3, [r3, #8]
 8005cd8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005ce0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	68ba      	ldr	r2, [r7, #8]
 8005ce8:	609a      	str	r2, [r3, #8]
      break;
 8005cea:	e04f      	b.n	8005d8c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005cfc:	f000 fb4c 	bl	8006398 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	689a      	ldr	r2, [r3, #8]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005d0e:	609a      	str	r2, [r3, #8]
      break;
 8005d10:	e03c      	b.n	8005d8c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d1e:	461a      	mov	r2, r3
 8005d20:	f000 fac0 	bl	80062a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	2150      	movs	r1, #80	@ 0x50
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	f000 fb19 	bl	8006362 <TIM_ITRx_SetConfig>
      break;
 8005d30:	e02c      	b.n	8005d8c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d3e:	461a      	mov	r2, r3
 8005d40:	f000 fadf 	bl	8006302 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	2160      	movs	r1, #96	@ 0x60
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f000 fb09 	bl	8006362 <TIM_ITRx_SetConfig>
      break;
 8005d50:	e01c      	b.n	8005d8c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d5e:	461a      	mov	r2, r3
 8005d60:	f000 faa0 	bl	80062a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	2140      	movs	r1, #64	@ 0x40
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f000 faf9 	bl	8006362 <TIM_ITRx_SetConfig>
      break;
 8005d70:	e00c      	b.n	8005d8c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681a      	ldr	r2, [r3, #0]
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4619      	mov	r1, r3
 8005d7c:	4610      	mov	r0, r2
 8005d7e:	f000 faf0 	bl	8006362 <TIM_ITRx_SetConfig>
      break;
 8005d82:	e003      	b.n	8005d8c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005d84:	2301      	movs	r3, #1
 8005d86:	73fb      	strb	r3, [r7, #15]
      break;
 8005d88:	e000      	b.n	8005d8c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005d8a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2201      	movs	r2, #1
 8005d90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2200      	movs	r2, #0
 8005d98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005d9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	3710      	adds	r7, #16
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}

08005da6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005da6:	b480      	push	{r7}
 8005da8:	b083      	sub	sp, #12
 8005daa:	af00      	add	r7, sp, #0
 8005dac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005dae:	bf00      	nop
 8005db0:	370c      	adds	r7, #12
 8005db2:	46bd      	mov	sp, r7
 8005db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db8:	4770      	bx	lr

08005dba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005dba:	b480      	push	{r7}
 8005dbc:	b083      	sub	sp, #12
 8005dbe:	af00      	add	r7, sp, #0
 8005dc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005dc2:	bf00      	nop
 8005dc4:	370c      	adds	r7, #12
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dcc:	4770      	bx	lr

08005dce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005dce:	b480      	push	{r7}
 8005dd0:	b083      	sub	sp, #12
 8005dd2:	af00      	add	r7, sp, #0
 8005dd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005dd6:	bf00      	nop
 8005dd8:	370c      	adds	r7, #12
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de0:	4770      	bx	lr

08005de2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005de2:	b480      	push	{r7}
 8005de4:	b083      	sub	sp, #12
 8005de6:	af00      	add	r7, sp, #0
 8005de8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005dea:	bf00      	nop
 8005dec:	370c      	adds	r7, #12
 8005dee:	46bd      	mov	sp, r7
 8005df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df4:	4770      	bx	lr
	...

08005df8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b085      	sub	sp, #20
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
 8005e00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	4a43      	ldr	r2, [pc, #268]	@ (8005f18 <TIM_Base_SetConfig+0x120>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d013      	beq.n	8005e38 <TIM_Base_SetConfig+0x40>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e16:	d00f      	beq.n	8005e38 <TIM_Base_SetConfig+0x40>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	4a40      	ldr	r2, [pc, #256]	@ (8005f1c <TIM_Base_SetConfig+0x124>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d00b      	beq.n	8005e38 <TIM_Base_SetConfig+0x40>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	4a3f      	ldr	r2, [pc, #252]	@ (8005f20 <TIM_Base_SetConfig+0x128>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d007      	beq.n	8005e38 <TIM_Base_SetConfig+0x40>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	4a3e      	ldr	r2, [pc, #248]	@ (8005f24 <TIM_Base_SetConfig+0x12c>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d003      	beq.n	8005e38 <TIM_Base_SetConfig+0x40>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	4a3d      	ldr	r2, [pc, #244]	@ (8005f28 <TIM_Base_SetConfig+0x130>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d108      	bne.n	8005e4a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	68fa      	ldr	r2, [r7, #12]
 8005e46:	4313      	orrs	r3, r2
 8005e48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	4a32      	ldr	r2, [pc, #200]	@ (8005f18 <TIM_Base_SetConfig+0x120>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d02b      	beq.n	8005eaa <TIM_Base_SetConfig+0xb2>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e58:	d027      	beq.n	8005eaa <TIM_Base_SetConfig+0xb2>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	4a2f      	ldr	r2, [pc, #188]	@ (8005f1c <TIM_Base_SetConfig+0x124>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d023      	beq.n	8005eaa <TIM_Base_SetConfig+0xb2>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	4a2e      	ldr	r2, [pc, #184]	@ (8005f20 <TIM_Base_SetConfig+0x128>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d01f      	beq.n	8005eaa <TIM_Base_SetConfig+0xb2>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	4a2d      	ldr	r2, [pc, #180]	@ (8005f24 <TIM_Base_SetConfig+0x12c>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d01b      	beq.n	8005eaa <TIM_Base_SetConfig+0xb2>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	4a2c      	ldr	r2, [pc, #176]	@ (8005f28 <TIM_Base_SetConfig+0x130>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d017      	beq.n	8005eaa <TIM_Base_SetConfig+0xb2>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	4a2b      	ldr	r2, [pc, #172]	@ (8005f2c <TIM_Base_SetConfig+0x134>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d013      	beq.n	8005eaa <TIM_Base_SetConfig+0xb2>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	4a2a      	ldr	r2, [pc, #168]	@ (8005f30 <TIM_Base_SetConfig+0x138>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d00f      	beq.n	8005eaa <TIM_Base_SetConfig+0xb2>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	4a29      	ldr	r2, [pc, #164]	@ (8005f34 <TIM_Base_SetConfig+0x13c>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d00b      	beq.n	8005eaa <TIM_Base_SetConfig+0xb2>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	4a28      	ldr	r2, [pc, #160]	@ (8005f38 <TIM_Base_SetConfig+0x140>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d007      	beq.n	8005eaa <TIM_Base_SetConfig+0xb2>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	4a27      	ldr	r2, [pc, #156]	@ (8005f3c <TIM_Base_SetConfig+0x144>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d003      	beq.n	8005eaa <TIM_Base_SetConfig+0xb2>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	4a26      	ldr	r2, [pc, #152]	@ (8005f40 <TIM_Base_SetConfig+0x148>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d108      	bne.n	8005ebc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005eb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	68db      	ldr	r3, [r3, #12]
 8005eb6:	68fa      	ldr	r2, [r7, #12]
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	695b      	ldr	r3, [r3, #20]
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	689a      	ldr	r2, [r3, #8]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	681a      	ldr	r2, [r3, #0]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	4a0e      	ldr	r2, [pc, #56]	@ (8005f18 <TIM_Base_SetConfig+0x120>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d003      	beq.n	8005eea <TIM_Base_SetConfig+0xf2>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	4a10      	ldr	r2, [pc, #64]	@ (8005f28 <TIM_Base_SetConfig+0x130>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d103      	bne.n	8005ef2 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	691a      	ldr	r2, [r3, #16]
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f043 0204 	orr.w	r2, r3, #4
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2201      	movs	r2, #1
 8005f02:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	68fa      	ldr	r2, [r7, #12]
 8005f08:	601a      	str	r2, [r3, #0]
}
 8005f0a:	bf00      	nop
 8005f0c:	3714      	adds	r7, #20
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f14:	4770      	bx	lr
 8005f16:	bf00      	nop
 8005f18:	40010000 	.word	0x40010000
 8005f1c:	40000400 	.word	0x40000400
 8005f20:	40000800 	.word	0x40000800
 8005f24:	40000c00 	.word	0x40000c00
 8005f28:	40010400 	.word	0x40010400
 8005f2c:	40014000 	.word	0x40014000
 8005f30:	40014400 	.word	0x40014400
 8005f34:	40014800 	.word	0x40014800
 8005f38:	40001800 	.word	0x40001800
 8005f3c:	40001c00 	.word	0x40001c00
 8005f40:	40002000 	.word	0x40002000

08005f44 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f44:	b480      	push	{r7}
 8005f46:	b087      	sub	sp, #28
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
 8005f4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6a1b      	ldr	r3, [r3, #32]
 8005f52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6a1b      	ldr	r3, [r3, #32]
 8005f58:	f023 0201 	bic.w	r2, r3, #1
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	699b      	ldr	r3, [r3, #24]
 8005f6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	f023 0303 	bic.w	r3, r3, #3
 8005f7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	68fa      	ldr	r2, [r7, #12]
 8005f82:	4313      	orrs	r3, r2
 8005f84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	f023 0302 	bic.w	r3, r3, #2
 8005f8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	689b      	ldr	r3, [r3, #8]
 8005f92:	697a      	ldr	r2, [r7, #20]
 8005f94:	4313      	orrs	r3, r2
 8005f96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	4a20      	ldr	r2, [pc, #128]	@ (800601c <TIM_OC1_SetConfig+0xd8>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d003      	beq.n	8005fa8 <TIM_OC1_SetConfig+0x64>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	4a1f      	ldr	r2, [pc, #124]	@ (8006020 <TIM_OC1_SetConfig+0xdc>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d10c      	bne.n	8005fc2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	f023 0308 	bic.w	r3, r3, #8
 8005fae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	68db      	ldr	r3, [r3, #12]
 8005fb4:	697a      	ldr	r2, [r7, #20]
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	f023 0304 	bic.w	r3, r3, #4
 8005fc0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	4a15      	ldr	r2, [pc, #84]	@ (800601c <TIM_OC1_SetConfig+0xd8>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d003      	beq.n	8005fd2 <TIM_OC1_SetConfig+0x8e>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	4a14      	ldr	r2, [pc, #80]	@ (8006020 <TIM_OC1_SetConfig+0xdc>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d111      	bne.n	8005ff6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005fd8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005fda:	693b      	ldr	r3, [r7, #16]
 8005fdc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005fe0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	695b      	ldr	r3, [r3, #20]
 8005fe6:	693a      	ldr	r2, [r7, #16]
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	699b      	ldr	r3, [r3, #24]
 8005ff0:	693a      	ldr	r2, [r7, #16]
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	693a      	ldr	r2, [r7, #16]
 8005ffa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	68fa      	ldr	r2, [r7, #12]
 8006000:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	685a      	ldr	r2, [r3, #4]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	697a      	ldr	r2, [r7, #20]
 800600e:	621a      	str	r2, [r3, #32]
}
 8006010:	bf00      	nop
 8006012:	371c      	adds	r7, #28
 8006014:	46bd      	mov	sp, r7
 8006016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601a:	4770      	bx	lr
 800601c:	40010000 	.word	0x40010000
 8006020:	40010400 	.word	0x40010400

08006024 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006024:	b480      	push	{r7}
 8006026:	b087      	sub	sp, #28
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
 800602c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6a1b      	ldr	r3, [r3, #32]
 8006032:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6a1b      	ldr	r3, [r3, #32]
 8006038:	f023 0210 	bic.w	r2, r3, #16
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	699b      	ldr	r3, [r3, #24]
 800604a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006052:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800605a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	021b      	lsls	r3, r3, #8
 8006062:	68fa      	ldr	r2, [r7, #12]
 8006064:	4313      	orrs	r3, r2
 8006066:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	f023 0320 	bic.w	r3, r3, #32
 800606e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	689b      	ldr	r3, [r3, #8]
 8006074:	011b      	lsls	r3, r3, #4
 8006076:	697a      	ldr	r2, [r7, #20]
 8006078:	4313      	orrs	r3, r2
 800607a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	4a22      	ldr	r2, [pc, #136]	@ (8006108 <TIM_OC2_SetConfig+0xe4>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d003      	beq.n	800608c <TIM_OC2_SetConfig+0x68>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	4a21      	ldr	r2, [pc, #132]	@ (800610c <TIM_OC2_SetConfig+0xe8>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d10d      	bne.n	80060a8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006092:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	68db      	ldr	r3, [r3, #12]
 8006098:	011b      	lsls	r3, r3, #4
 800609a:	697a      	ldr	r2, [r7, #20]
 800609c:	4313      	orrs	r3, r2
 800609e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80060a6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	4a17      	ldr	r2, [pc, #92]	@ (8006108 <TIM_OC2_SetConfig+0xe4>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d003      	beq.n	80060b8 <TIM_OC2_SetConfig+0x94>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	4a16      	ldr	r2, [pc, #88]	@ (800610c <TIM_OC2_SetConfig+0xe8>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d113      	bne.n	80060e0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80060be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80060c0:	693b      	ldr	r3, [r7, #16]
 80060c2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80060c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	695b      	ldr	r3, [r3, #20]
 80060cc:	009b      	lsls	r3, r3, #2
 80060ce:	693a      	ldr	r2, [r7, #16]
 80060d0:	4313      	orrs	r3, r2
 80060d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	699b      	ldr	r3, [r3, #24]
 80060d8:	009b      	lsls	r3, r3, #2
 80060da:	693a      	ldr	r2, [r7, #16]
 80060dc:	4313      	orrs	r3, r2
 80060de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	693a      	ldr	r2, [r7, #16]
 80060e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	68fa      	ldr	r2, [r7, #12]
 80060ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	685a      	ldr	r2, [r3, #4]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	697a      	ldr	r2, [r7, #20]
 80060f8:	621a      	str	r2, [r3, #32]
}
 80060fa:	bf00      	nop
 80060fc:	371c      	adds	r7, #28
 80060fe:	46bd      	mov	sp, r7
 8006100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006104:	4770      	bx	lr
 8006106:	bf00      	nop
 8006108:	40010000 	.word	0x40010000
 800610c:	40010400 	.word	0x40010400

08006110 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006110:	b480      	push	{r7}
 8006112:	b087      	sub	sp, #28
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
 8006118:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6a1b      	ldr	r3, [r3, #32]
 800611e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6a1b      	ldr	r3, [r3, #32]
 8006124:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	69db      	ldr	r3, [r3, #28]
 8006136:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800613e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	f023 0303 	bic.w	r3, r3, #3
 8006146:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	68fa      	ldr	r2, [r7, #12]
 800614e:	4313      	orrs	r3, r2
 8006150:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006158:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	689b      	ldr	r3, [r3, #8]
 800615e:	021b      	lsls	r3, r3, #8
 8006160:	697a      	ldr	r2, [r7, #20]
 8006162:	4313      	orrs	r3, r2
 8006164:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	4a21      	ldr	r2, [pc, #132]	@ (80061f0 <TIM_OC3_SetConfig+0xe0>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d003      	beq.n	8006176 <TIM_OC3_SetConfig+0x66>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	4a20      	ldr	r2, [pc, #128]	@ (80061f4 <TIM_OC3_SetConfig+0xe4>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d10d      	bne.n	8006192 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800617c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	68db      	ldr	r3, [r3, #12]
 8006182:	021b      	lsls	r3, r3, #8
 8006184:	697a      	ldr	r2, [r7, #20]
 8006186:	4313      	orrs	r3, r2
 8006188:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006190:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	4a16      	ldr	r2, [pc, #88]	@ (80061f0 <TIM_OC3_SetConfig+0xe0>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d003      	beq.n	80061a2 <TIM_OC3_SetConfig+0x92>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	4a15      	ldr	r2, [pc, #84]	@ (80061f4 <TIM_OC3_SetConfig+0xe4>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d113      	bne.n	80061ca <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80061a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80061b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	695b      	ldr	r3, [r3, #20]
 80061b6:	011b      	lsls	r3, r3, #4
 80061b8:	693a      	ldr	r2, [r7, #16]
 80061ba:	4313      	orrs	r3, r2
 80061bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	699b      	ldr	r3, [r3, #24]
 80061c2:	011b      	lsls	r3, r3, #4
 80061c4:	693a      	ldr	r2, [r7, #16]
 80061c6:	4313      	orrs	r3, r2
 80061c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	693a      	ldr	r2, [r7, #16]
 80061ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	68fa      	ldr	r2, [r7, #12]
 80061d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	685a      	ldr	r2, [r3, #4]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	697a      	ldr	r2, [r7, #20]
 80061e2:	621a      	str	r2, [r3, #32]
}
 80061e4:	bf00      	nop
 80061e6:	371c      	adds	r7, #28
 80061e8:	46bd      	mov	sp, r7
 80061ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ee:	4770      	bx	lr
 80061f0:	40010000 	.word	0x40010000
 80061f4:	40010400 	.word	0x40010400

080061f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b087      	sub	sp, #28
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
 8006200:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6a1b      	ldr	r3, [r3, #32]
 8006206:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6a1b      	ldr	r3, [r3, #32]
 800620c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	685b      	ldr	r3, [r3, #4]
 8006218:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	69db      	ldr	r3, [r3, #28]
 800621e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006226:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800622e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	021b      	lsls	r3, r3, #8
 8006236:	68fa      	ldr	r2, [r7, #12]
 8006238:	4313      	orrs	r3, r2
 800623a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006242:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	689b      	ldr	r3, [r3, #8]
 8006248:	031b      	lsls	r3, r3, #12
 800624a:	693a      	ldr	r2, [r7, #16]
 800624c:	4313      	orrs	r3, r2
 800624e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	4a12      	ldr	r2, [pc, #72]	@ (800629c <TIM_OC4_SetConfig+0xa4>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d003      	beq.n	8006260 <TIM_OC4_SetConfig+0x68>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	4a11      	ldr	r2, [pc, #68]	@ (80062a0 <TIM_OC4_SetConfig+0xa8>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d109      	bne.n	8006274 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006266:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	695b      	ldr	r3, [r3, #20]
 800626c:	019b      	lsls	r3, r3, #6
 800626e:	697a      	ldr	r2, [r7, #20]
 8006270:	4313      	orrs	r3, r2
 8006272:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	697a      	ldr	r2, [r7, #20]
 8006278:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	68fa      	ldr	r2, [r7, #12]
 800627e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	685a      	ldr	r2, [r3, #4]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	693a      	ldr	r2, [r7, #16]
 800628c:	621a      	str	r2, [r3, #32]
}
 800628e:	bf00      	nop
 8006290:	371c      	adds	r7, #28
 8006292:	46bd      	mov	sp, r7
 8006294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006298:	4770      	bx	lr
 800629a:	bf00      	nop
 800629c:	40010000 	.word	0x40010000
 80062a0:	40010400 	.word	0x40010400

080062a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b087      	sub	sp, #28
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	60f8      	str	r0, [r7, #12]
 80062ac:	60b9      	str	r1, [r7, #8]
 80062ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	6a1b      	ldr	r3, [r3, #32]
 80062b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	6a1b      	ldr	r3, [r3, #32]
 80062ba:	f023 0201 	bic.w	r2, r3, #1
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	699b      	ldr	r3, [r3, #24]
 80062c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80062ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	011b      	lsls	r3, r3, #4
 80062d4:	693a      	ldr	r2, [r7, #16]
 80062d6:	4313      	orrs	r3, r2
 80062d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	f023 030a 	bic.w	r3, r3, #10
 80062e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80062e2:	697a      	ldr	r2, [r7, #20]
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	4313      	orrs	r3, r2
 80062e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	693a      	ldr	r2, [r7, #16]
 80062ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	697a      	ldr	r2, [r7, #20]
 80062f4:	621a      	str	r2, [r3, #32]
}
 80062f6:	bf00      	nop
 80062f8:	371c      	adds	r7, #28
 80062fa:	46bd      	mov	sp, r7
 80062fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006300:	4770      	bx	lr

08006302 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006302:	b480      	push	{r7}
 8006304:	b087      	sub	sp, #28
 8006306:	af00      	add	r7, sp, #0
 8006308:	60f8      	str	r0, [r7, #12]
 800630a:	60b9      	str	r1, [r7, #8]
 800630c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	6a1b      	ldr	r3, [r3, #32]
 8006312:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	6a1b      	ldr	r3, [r3, #32]
 8006318:	f023 0210 	bic.w	r2, r3, #16
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	699b      	ldr	r3, [r3, #24]
 8006324:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800632c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	031b      	lsls	r3, r3, #12
 8006332:	693a      	ldr	r2, [r7, #16]
 8006334:	4313      	orrs	r3, r2
 8006336:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800633e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	011b      	lsls	r3, r3, #4
 8006344:	697a      	ldr	r2, [r7, #20]
 8006346:	4313      	orrs	r3, r2
 8006348:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	693a      	ldr	r2, [r7, #16]
 800634e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	697a      	ldr	r2, [r7, #20]
 8006354:	621a      	str	r2, [r3, #32]
}
 8006356:	bf00      	nop
 8006358:	371c      	adds	r7, #28
 800635a:	46bd      	mov	sp, r7
 800635c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006360:	4770      	bx	lr

08006362 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006362:	b480      	push	{r7}
 8006364:	b085      	sub	sp, #20
 8006366:	af00      	add	r7, sp, #0
 8006368:	6078      	str	r0, [r7, #4]
 800636a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	689b      	ldr	r3, [r3, #8]
 8006370:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006378:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800637a:	683a      	ldr	r2, [r7, #0]
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	4313      	orrs	r3, r2
 8006380:	f043 0307 	orr.w	r3, r3, #7
 8006384:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	68fa      	ldr	r2, [r7, #12]
 800638a:	609a      	str	r2, [r3, #8]
}
 800638c:	bf00      	nop
 800638e:	3714      	adds	r7, #20
 8006390:	46bd      	mov	sp, r7
 8006392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006396:	4770      	bx	lr

08006398 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006398:	b480      	push	{r7}
 800639a:	b087      	sub	sp, #28
 800639c:	af00      	add	r7, sp, #0
 800639e:	60f8      	str	r0, [r7, #12]
 80063a0:	60b9      	str	r1, [r7, #8]
 80063a2:	607a      	str	r2, [r7, #4]
 80063a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	689b      	ldr	r3, [r3, #8]
 80063aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80063b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	021a      	lsls	r2, r3, #8
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	431a      	orrs	r2, r3
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	4313      	orrs	r3, r2
 80063c0:	697a      	ldr	r2, [r7, #20]
 80063c2:	4313      	orrs	r3, r2
 80063c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	697a      	ldr	r2, [r7, #20]
 80063ca:	609a      	str	r2, [r3, #8]
}
 80063cc:	bf00      	nop
 80063ce:	371c      	adds	r7, #28
 80063d0:	46bd      	mov	sp, r7
 80063d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d6:	4770      	bx	lr

080063d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80063d8:	b480      	push	{r7}
 80063da:	b087      	sub	sp, #28
 80063dc:	af00      	add	r7, sp, #0
 80063de:	60f8      	str	r0, [r7, #12]
 80063e0:	60b9      	str	r1, [r7, #8]
 80063e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	f003 031f 	and.w	r3, r3, #31
 80063ea:	2201      	movs	r2, #1
 80063ec:	fa02 f303 	lsl.w	r3, r2, r3
 80063f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	6a1a      	ldr	r2, [r3, #32]
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	43db      	mvns	r3, r3
 80063fa:	401a      	ands	r2, r3
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	6a1a      	ldr	r2, [r3, #32]
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	f003 031f 	and.w	r3, r3, #31
 800640a:	6879      	ldr	r1, [r7, #4]
 800640c:	fa01 f303 	lsl.w	r3, r1, r3
 8006410:	431a      	orrs	r2, r3
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	621a      	str	r2, [r3, #32]
}
 8006416:	bf00      	nop
 8006418:	371c      	adds	r7, #28
 800641a:	46bd      	mov	sp, r7
 800641c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006420:	4770      	bx	lr
	...

08006424 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006424:	b480      	push	{r7}
 8006426:	b085      	sub	sp, #20
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
 800642c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006434:	2b01      	cmp	r3, #1
 8006436:	d101      	bne.n	800643c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006438:	2302      	movs	r3, #2
 800643a:	e05a      	b.n	80064f2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2201      	movs	r2, #1
 8006440:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2202      	movs	r2, #2
 8006448:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	689b      	ldr	r3, [r3, #8]
 800645a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006462:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	68fa      	ldr	r2, [r7, #12]
 800646a:	4313      	orrs	r3, r2
 800646c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	68fa      	ldr	r2, [r7, #12]
 8006474:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a21      	ldr	r2, [pc, #132]	@ (8006500 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d022      	beq.n	80064c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006488:	d01d      	beq.n	80064c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a1d      	ldr	r2, [pc, #116]	@ (8006504 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d018      	beq.n	80064c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a1b      	ldr	r2, [pc, #108]	@ (8006508 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d013      	beq.n	80064c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4a1a      	ldr	r2, [pc, #104]	@ (800650c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d00e      	beq.n	80064c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a18      	ldr	r2, [pc, #96]	@ (8006510 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d009      	beq.n	80064c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a17      	ldr	r2, [pc, #92]	@ (8006514 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d004      	beq.n	80064c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4a15      	ldr	r2, [pc, #84]	@ (8006518 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d10c      	bne.n	80064e0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80064cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	68ba      	ldr	r2, [r7, #8]
 80064d4:	4313      	orrs	r3, r2
 80064d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	68ba      	ldr	r2, [r7, #8]
 80064de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2201      	movs	r2, #1
 80064e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2200      	movs	r2, #0
 80064ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80064f0:	2300      	movs	r3, #0
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	3714      	adds	r7, #20
 80064f6:	46bd      	mov	sp, r7
 80064f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fc:	4770      	bx	lr
 80064fe:	bf00      	nop
 8006500:	40010000 	.word	0x40010000
 8006504:	40000400 	.word	0x40000400
 8006508:	40000800 	.word	0x40000800
 800650c:	40000c00 	.word	0x40000c00
 8006510:	40010400 	.word	0x40010400
 8006514:	40014000 	.word	0x40014000
 8006518:	40001800 	.word	0x40001800

0800651c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800651c:	b480      	push	{r7}
 800651e:	b083      	sub	sp, #12
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006524:	bf00      	nop
 8006526:	370c      	adds	r7, #12
 8006528:	46bd      	mov	sp, r7
 800652a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652e:	4770      	bx	lr

08006530 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006530:	b480      	push	{r7}
 8006532:	b083      	sub	sp, #12
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006538:	bf00      	nop
 800653a:	370c      	adds	r7, #12
 800653c:	46bd      	mov	sp, r7
 800653e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006542:	4770      	bx	lr

08006544 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b082      	sub	sp, #8
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d101      	bne.n	8006556 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006552:	2301      	movs	r3, #1
 8006554:	e042      	b.n	80065dc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800655c:	b2db      	uxtb	r3, r3
 800655e:	2b00      	cmp	r3, #0
 8006560:	d106      	bne.n	8006570 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2200      	movs	r2, #0
 8006566:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f7fc fb68 	bl	8002c40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2224      	movs	r2, #36	@ 0x24
 8006574:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	68da      	ldr	r2, [r3, #12]
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006586:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006588:	6878      	ldr	r0, [r7, #4]
 800658a:	f000 fff5 	bl	8007578 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	691a      	ldr	r2, [r3, #16]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800659c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	695a      	ldr	r2, [r3, #20]
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80065ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	68da      	ldr	r2, [r3, #12]
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80065bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2200      	movs	r2, #0
 80065c2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2220      	movs	r2, #32
 80065c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2220      	movs	r2, #32
 80065d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2200      	movs	r2, #0
 80065d8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80065da:	2300      	movs	r3, #0
}
 80065dc:	4618      	mov	r0, r3
 80065de:	3708      	adds	r7, #8
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}

080065e4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b08c      	sub	sp, #48	@ 0x30
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	60f8      	str	r0, [r7, #12]
 80065ec:	60b9      	str	r1, [r7, #8]
 80065ee:	4613      	mov	r3, r2
 80065f0:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80065f8:	b2db      	uxtb	r3, r3
 80065fa:	2b20      	cmp	r3, #32
 80065fc:	d162      	bne.n	80066c4 <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d002      	beq.n	800660a <HAL_UART_Transmit_DMA+0x26>
 8006604:	88fb      	ldrh	r3, [r7, #6]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d101      	bne.n	800660e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800660a:	2301      	movs	r3, #1
 800660c:	e05b      	b.n	80066c6 <HAL_UART_Transmit_DMA+0xe2>
    }

    huart->pTxBuffPtr = pData;
 800660e:	68ba      	ldr	r2, [r7, #8]
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	88fa      	ldrh	r2, [r7, #6]
 8006618:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	88fa      	ldrh	r2, [r7, #6]
 800661e:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	2200      	movs	r2, #0
 8006624:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	2221      	movs	r2, #33	@ 0x21
 800662a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006632:	4a27      	ldr	r2, [pc, #156]	@ (80066d0 <HAL_UART_Transmit_DMA+0xec>)
 8006634:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800663a:	4a26      	ldr	r2, [pc, #152]	@ (80066d4 <HAL_UART_Transmit_DMA+0xf0>)
 800663c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006642:	4a25      	ldr	r2, [pc, #148]	@ (80066d8 <HAL_UART_Transmit_DMA+0xf4>)
 8006644:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800664a:	2200      	movs	r2, #0
 800664c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800664e:	f107 0308 	add.w	r3, r7, #8
 8006652:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size) != HAL_OK)
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8006658:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800665a:	6819      	ldr	r1, [r3, #0]
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	3304      	adds	r3, #4
 8006662:	461a      	mov	r2, r3
 8006664:	88fb      	ldrh	r3, [r7, #6]
 8006666:	f7fd fc67 	bl	8003f38 <HAL_DMA_Start_IT>
 800666a:	4603      	mov	r3, r0
 800666c:	2b00      	cmp	r3, #0
 800666e:	d008      	beq.n	8006682 <HAL_UART_Transmit_DMA+0x9e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	2210      	movs	r2, #16
 8006674:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	2220      	movs	r2, #32
 800667a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_ERROR;
 800667e:	2301      	movs	r3, #1
 8006680:	e021      	b.n	80066c6 <HAL_UART_Transmit_DMA+0xe2>
    }
    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800668a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	3314      	adds	r3, #20
 8006692:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006694:	69bb      	ldr	r3, [r7, #24]
 8006696:	e853 3f00 	ldrex	r3, [r3]
 800669a:	617b      	str	r3, [r7, #20]
   return(result);
 800669c:	697b      	ldr	r3, [r7, #20]
 800669e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066a2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	3314      	adds	r3, #20
 80066aa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80066ac:	627a      	str	r2, [r7, #36]	@ 0x24
 80066ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066b0:	6a39      	ldr	r1, [r7, #32]
 80066b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066b4:	e841 2300 	strex	r3, r2, [r1]
 80066b8:	61fb      	str	r3, [r7, #28]
   return(result);
 80066ba:	69fb      	ldr	r3, [r7, #28]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d1e5      	bne.n	800668c <HAL_UART_Transmit_DMA+0xa8>

    return HAL_OK;
 80066c0:	2300      	movs	r3, #0
 80066c2:	e000      	b.n	80066c6 <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 80066c4:	2302      	movs	r3, #2
  }
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	3730      	adds	r7, #48	@ 0x30
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}
 80066ce:	bf00      	nop
 80066d0:	08006df5 	.word	0x08006df5
 80066d4:	08006e8f 	.word	0x08006e8f
 80066d8:	08007013 	.word	0x08007013

080066dc <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b084      	sub	sp, #16
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	60f8      	str	r0, [r7, #12]
 80066e4:	60b9      	str	r1, [r7, #8]
 80066e6:	4613      	mov	r3, r2
 80066e8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80066f0:	b2db      	uxtb	r3, r3
 80066f2:	2b20      	cmp	r3, #32
 80066f4:	d112      	bne.n	800671c <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d002      	beq.n	8006702 <HAL_UART_Receive_DMA+0x26>
 80066fc:	88fb      	ldrh	r3, [r7, #6]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d101      	bne.n	8006706 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006702:	2301      	movs	r3, #1
 8006704:	e00b      	b.n	800671e <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	2200      	movs	r2, #0
 800670a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800670c:	88fb      	ldrh	r3, [r7, #6]
 800670e:	461a      	mov	r2, r3
 8006710:	68b9      	ldr	r1, [r7, #8]
 8006712:	68f8      	ldr	r0, [r7, #12]
 8006714:	f000 fcc8 	bl	80070a8 <UART_Start_Receive_DMA>
 8006718:	4603      	mov	r3, r0
 800671a:	e000      	b.n	800671e <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800671c:	2302      	movs	r3, #2
  }
}
 800671e:	4618      	mov	r0, r3
 8006720:	3710      	adds	r7, #16
 8006722:	46bd      	mov	sp, r7
 8006724:	bd80      	pop	{r7, pc}

08006726 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8006726:	b580      	push	{r7, lr}
 8006728:	b090      	sub	sp, #64	@ 0x40
 800672a:	af00      	add	r7, sp, #0
 800672c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800672e:	2300      	movs	r3, #0
 8006730:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	695b      	ldr	r3, [r3, #20]
 8006738:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800673c:	2b80      	cmp	r3, #128	@ 0x80
 800673e:	bf0c      	ite	eq
 8006740:	2301      	moveq	r3, #1
 8006742:	2300      	movne	r3, #0
 8006744:	b2db      	uxtb	r3, r3
 8006746:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800674e:	b2db      	uxtb	r3, r3
 8006750:	2b21      	cmp	r3, #33	@ 0x21
 8006752:	d128      	bne.n	80067a6 <HAL_UART_DMAStop+0x80>
 8006754:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006756:	2b00      	cmp	r3, #0
 8006758:	d025      	beq.n	80067a6 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	3314      	adds	r3, #20
 8006760:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006764:	e853 3f00 	ldrex	r3, [r3]
 8006768:	623b      	str	r3, [r7, #32]
   return(result);
 800676a:	6a3b      	ldr	r3, [r7, #32]
 800676c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006770:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	3314      	adds	r3, #20
 8006778:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800677a:	633a      	str	r2, [r7, #48]	@ 0x30
 800677c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800677e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006780:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006782:	e841 2300 	strex	r3, r2, [r1]
 8006786:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006788:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800678a:	2b00      	cmp	r3, #0
 800678c:	d1e5      	bne.n	800675a <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006792:	2b00      	cmp	r3, #0
 8006794:	d004      	beq.n	80067a0 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800679a:	4618      	mov	r0, r3
 800679c:	f7fd fc24 	bl	8003fe8 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f000 fd27 	bl	80071f4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	695b      	ldr	r3, [r3, #20]
 80067ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067b0:	2b40      	cmp	r3, #64	@ 0x40
 80067b2:	bf0c      	ite	eq
 80067b4:	2301      	moveq	r3, #1
 80067b6:	2300      	movne	r3, #0
 80067b8:	b2db      	uxtb	r3, r3
 80067ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80067c2:	b2db      	uxtb	r3, r3
 80067c4:	2b22      	cmp	r3, #34	@ 0x22
 80067c6:	d128      	bne.n	800681a <HAL_UART_DMAStop+0xf4>
 80067c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d025      	beq.n	800681a <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	3314      	adds	r3, #20
 80067d4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067d6:	693b      	ldr	r3, [r7, #16]
 80067d8:	e853 3f00 	ldrex	r3, [r3]
 80067dc:	60fb      	str	r3, [r7, #12]
   return(result);
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80067e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	3314      	adds	r3, #20
 80067ec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80067ee:	61fa      	str	r2, [r7, #28]
 80067f0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067f2:	69b9      	ldr	r1, [r7, #24]
 80067f4:	69fa      	ldr	r2, [r7, #28]
 80067f6:	e841 2300 	strex	r3, r2, [r1]
 80067fa:	617b      	str	r3, [r7, #20]
   return(result);
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d1e5      	bne.n	80067ce <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006806:	2b00      	cmp	r3, #0
 8006808:	d004      	beq.n	8006814 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800680e:	4618      	mov	r0, r3
 8006810:	f7fd fbea 	bl	8003fe8 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	f000 fd15 	bl	8007244 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800681a:	2300      	movs	r3, #0
}
 800681c:	4618      	mov	r0, r3
 800681e:	3740      	adds	r7, #64	@ 0x40
 8006820:	46bd      	mov	sp, r7
 8006822:	bd80      	pop	{r7, pc}

08006824 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b0ba      	sub	sp, #232	@ 0xe8
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	68db      	ldr	r3, [r3, #12]
 800683c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	695b      	ldr	r3, [r3, #20]
 8006846:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800684a:	2300      	movs	r3, #0
 800684c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006850:	2300      	movs	r3, #0
 8006852:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006856:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800685a:	f003 030f 	and.w	r3, r3, #15
 800685e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006862:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006866:	2b00      	cmp	r3, #0
 8006868:	d10f      	bne.n	800688a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800686a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800686e:	f003 0320 	and.w	r3, r3, #32
 8006872:	2b00      	cmp	r3, #0
 8006874:	d009      	beq.n	800688a <HAL_UART_IRQHandler+0x66>
 8006876:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800687a:	f003 0320 	and.w	r3, r3, #32
 800687e:	2b00      	cmp	r3, #0
 8006880:	d003      	beq.n	800688a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f000 fdba 	bl	80073fc <UART_Receive_IT>
      return;
 8006888:	e273      	b.n	8006d72 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800688a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800688e:	2b00      	cmp	r3, #0
 8006890:	f000 80de 	beq.w	8006a50 <HAL_UART_IRQHandler+0x22c>
 8006894:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006898:	f003 0301 	and.w	r3, r3, #1
 800689c:	2b00      	cmp	r3, #0
 800689e:	d106      	bne.n	80068ae <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80068a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068a4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	f000 80d1 	beq.w	8006a50 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80068ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068b2:	f003 0301 	and.w	r3, r3, #1
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d00b      	beq.n	80068d2 <HAL_UART_IRQHandler+0xae>
 80068ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d005      	beq.n	80068d2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068ca:	f043 0201 	orr.w	r2, r3, #1
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80068d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068d6:	f003 0304 	and.w	r3, r3, #4
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d00b      	beq.n	80068f6 <HAL_UART_IRQHandler+0xd2>
 80068de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80068e2:	f003 0301 	and.w	r3, r3, #1
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d005      	beq.n	80068f6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068ee:	f043 0202 	orr.w	r2, r3, #2
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80068f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068fa:	f003 0302 	and.w	r3, r3, #2
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d00b      	beq.n	800691a <HAL_UART_IRQHandler+0xf6>
 8006902:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006906:	f003 0301 	and.w	r3, r3, #1
 800690a:	2b00      	cmp	r3, #0
 800690c:	d005      	beq.n	800691a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006912:	f043 0204 	orr.w	r2, r3, #4
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800691a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800691e:	f003 0308 	and.w	r3, r3, #8
 8006922:	2b00      	cmp	r3, #0
 8006924:	d011      	beq.n	800694a <HAL_UART_IRQHandler+0x126>
 8006926:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800692a:	f003 0320 	and.w	r3, r3, #32
 800692e:	2b00      	cmp	r3, #0
 8006930:	d105      	bne.n	800693e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006932:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006936:	f003 0301 	and.w	r3, r3, #1
 800693a:	2b00      	cmp	r3, #0
 800693c:	d005      	beq.n	800694a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006942:	f043 0208 	orr.w	r2, r3, #8
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800694e:	2b00      	cmp	r3, #0
 8006950:	f000 820a 	beq.w	8006d68 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006954:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006958:	f003 0320 	and.w	r3, r3, #32
 800695c:	2b00      	cmp	r3, #0
 800695e:	d008      	beq.n	8006972 <HAL_UART_IRQHandler+0x14e>
 8006960:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006964:	f003 0320 	and.w	r3, r3, #32
 8006968:	2b00      	cmp	r3, #0
 800696a:	d002      	beq.n	8006972 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	f000 fd45 	bl	80073fc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	695b      	ldr	r3, [r3, #20]
 8006978:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800697c:	2b40      	cmp	r3, #64	@ 0x40
 800697e:	bf0c      	ite	eq
 8006980:	2301      	moveq	r3, #1
 8006982:	2300      	movne	r3, #0
 8006984:	b2db      	uxtb	r3, r3
 8006986:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800698e:	f003 0308 	and.w	r3, r3, #8
 8006992:	2b00      	cmp	r3, #0
 8006994:	d103      	bne.n	800699e <HAL_UART_IRQHandler+0x17a>
 8006996:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800699a:	2b00      	cmp	r3, #0
 800699c:	d04f      	beq.n	8006a3e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f000 fc50 	bl	8007244 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	695b      	ldr	r3, [r3, #20]
 80069aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069ae:	2b40      	cmp	r3, #64	@ 0x40
 80069b0:	d141      	bne.n	8006a36 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	3314      	adds	r3, #20
 80069b8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80069c0:	e853 3f00 	ldrex	r3, [r3]
 80069c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80069c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80069cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80069d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	3314      	adds	r3, #20
 80069da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80069de:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80069e2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069e6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80069ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80069ee:	e841 2300 	strex	r3, r2, [r1]
 80069f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80069f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d1d9      	bne.n	80069b2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d013      	beq.n	8006a2e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a0a:	4a8a      	ldr	r2, [pc, #552]	@ (8006c34 <HAL_UART_IRQHandler+0x410>)
 8006a0c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a12:	4618      	mov	r0, r3
 8006a14:	f7fd fb58 	bl	80040c8 <HAL_DMA_Abort_IT>
 8006a18:	4603      	mov	r3, r0
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d016      	beq.n	8006a4c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a24:	687a      	ldr	r2, [r7, #4]
 8006a26:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006a28:	4610      	mov	r0, r2
 8006a2a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a2c:	e00e      	b.n	8006a4c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f000 f9ca 	bl	8006dc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a34:	e00a      	b.n	8006a4c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f000 f9c6 	bl	8006dc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a3c:	e006      	b.n	8006a4c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f000 f9c2 	bl	8006dc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2200      	movs	r2, #0
 8006a48:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006a4a:	e18d      	b.n	8006d68 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a4c:	bf00      	nop
    return;
 8006a4e:	e18b      	b.n	8006d68 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a54:	2b01      	cmp	r3, #1
 8006a56:	f040 8167 	bne.w	8006d28 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006a5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a5e:	f003 0310 	and.w	r3, r3, #16
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	f000 8160 	beq.w	8006d28 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8006a68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a6c:	f003 0310 	and.w	r3, r3, #16
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	f000 8159 	beq.w	8006d28 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006a76:	2300      	movs	r3, #0
 8006a78:	60bb      	str	r3, [r7, #8]
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	60bb      	str	r3, [r7, #8]
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	685b      	ldr	r3, [r3, #4]
 8006a88:	60bb      	str	r3, [r7, #8]
 8006a8a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	695b      	ldr	r3, [r3, #20]
 8006a92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a96:	2b40      	cmp	r3, #64	@ 0x40
 8006a98:	f040 80ce 	bne.w	8006c38 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	685b      	ldr	r3, [r3, #4]
 8006aa4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006aa8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	f000 80a9 	beq.w	8006c04 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006ab6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006aba:	429a      	cmp	r2, r3
 8006abc:	f080 80a2 	bcs.w	8006c04 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006ac6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006acc:	69db      	ldr	r3, [r3, #28]
 8006ace:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ad2:	f000 8088 	beq.w	8006be6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	330c      	adds	r3, #12
 8006adc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ae0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006ae4:	e853 3f00 	ldrex	r3, [r3]
 8006ae8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006aec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006af0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006af4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	330c      	adds	r3, #12
 8006afe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006b02:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006b06:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b0a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006b0e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006b12:	e841 2300 	strex	r3, r2, [r1]
 8006b16:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006b1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d1d9      	bne.n	8006ad6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	3314      	adds	r3, #20
 8006b28:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b2a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006b2c:	e853 3f00 	ldrex	r3, [r3]
 8006b30:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006b32:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006b34:	f023 0301 	bic.w	r3, r3, #1
 8006b38:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	3314      	adds	r3, #20
 8006b42:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006b46:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006b4a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b4c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006b4e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006b52:	e841 2300 	strex	r3, r2, [r1]
 8006b56:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006b58:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d1e1      	bne.n	8006b22 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	3314      	adds	r3, #20
 8006b64:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b66:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006b68:	e853 3f00 	ldrex	r3, [r3]
 8006b6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006b6e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006b70:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b74:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	3314      	adds	r3, #20
 8006b7e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006b82:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006b84:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b86:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006b88:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006b8a:	e841 2300 	strex	r3, r2, [r1]
 8006b8e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006b90:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d1e3      	bne.n	8006b5e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2220      	movs	r2, #32
 8006b9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	330c      	adds	r3, #12
 8006baa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006bae:	e853 3f00 	ldrex	r3, [r3]
 8006bb2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006bb4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006bb6:	f023 0310 	bic.w	r3, r3, #16
 8006bba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	330c      	adds	r3, #12
 8006bc4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006bc8:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006bca:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bcc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006bce:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006bd0:	e841 2300 	strex	r3, r2, [r1]
 8006bd4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006bd6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d1e3      	bne.n	8006ba4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006be0:	4618      	mov	r0, r3
 8006be2:	f7fd fa01 	bl	8003fe8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2202      	movs	r2, #2
 8006bea:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006bf4:	b29b      	uxth	r3, r3
 8006bf6:	1ad3      	subs	r3, r2, r3
 8006bf8:	b29b      	uxth	r3, r3
 8006bfa:	4619      	mov	r1, r3
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	f000 f8ed 	bl	8006ddc <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8006c02:	e0b3      	b.n	8006d6c <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006c08:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006c0c:	429a      	cmp	r2, r3
 8006c0e:	f040 80ad 	bne.w	8006d6c <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c16:	69db      	ldr	r3, [r3, #28]
 8006c18:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c1c:	f040 80a6 	bne.w	8006d6c <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2202      	movs	r2, #2
 8006c24:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006c2a:	4619      	mov	r1, r3
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	f000 f8d5 	bl	8006ddc <HAL_UARTEx_RxEventCallback>
      return;
 8006c32:	e09b      	b.n	8006d6c <HAL_UART_IRQHandler+0x548>
 8006c34:	0800730b 	.word	0x0800730b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006c40:	b29b      	uxth	r3, r3
 8006c42:	1ad3      	subs	r3, r2, r3
 8006c44:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006c4c:	b29b      	uxth	r3, r3
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	f000 808e 	beq.w	8006d70 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8006c54:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	f000 8089 	beq.w	8006d70 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	330c      	adds	r3, #12
 8006c64:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c68:	e853 3f00 	ldrex	r3, [r3]
 8006c6c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006c6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c70:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006c74:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	330c      	adds	r3, #12
 8006c7e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006c82:	647a      	str	r2, [r7, #68]	@ 0x44
 8006c84:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c86:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006c88:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006c8a:	e841 2300 	strex	r3, r2, [r1]
 8006c8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006c90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d1e3      	bne.n	8006c5e <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	3314      	adds	r3, #20
 8006c9c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ca0:	e853 3f00 	ldrex	r3, [r3]
 8006ca4:	623b      	str	r3, [r7, #32]
   return(result);
 8006ca6:	6a3b      	ldr	r3, [r7, #32]
 8006ca8:	f023 0301 	bic.w	r3, r3, #1
 8006cac:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	3314      	adds	r3, #20
 8006cb6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006cba:	633a      	str	r2, [r7, #48]	@ 0x30
 8006cbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cbe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006cc0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006cc2:	e841 2300 	strex	r3, r2, [r1]
 8006cc6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006cc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d1e3      	bne.n	8006c96 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2220      	movs	r2, #32
 8006cd2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	330c      	adds	r3, #12
 8006ce2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	e853 3f00 	ldrex	r3, [r3]
 8006cea:	60fb      	str	r3, [r7, #12]
   return(result);
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	f023 0310 	bic.w	r3, r3, #16
 8006cf2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	330c      	adds	r3, #12
 8006cfc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006d00:	61fa      	str	r2, [r7, #28]
 8006d02:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d04:	69b9      	ldr	r1, [r7, #24]
 8006d06:	69fa      	ldr	r2, [r7, #28]
 8006d08:	e841 2300 	strex	r3, r2, [r1]
 8006d0c:	617b      	str	r3, [r7, #20]
   return(result);
 8006d0e:	697b      	ldr	r3, [r7, #20]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d1e3      	bne.n	8006cdc <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2202      	movs	r2, #2
 8006d18:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006d1a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006d1e:	4619      	mov	r1, r3
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f000 f85b 	bl	8006ddc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006d26:	e023      	b.n	8006d70 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006d28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d009      	beq.n	8006d48 <HAL_UART_IRQHandler+0x524>
 8006d34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d003      	beq.n	8006d48 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8006d40:	6878      	ldr	r0, [r7, #4]
 8006d42:	f000 faf3 	bl	800732c <UART_Transmit_IT>
    return;
 8006d46:	e014      	b.n	8006d72 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006d48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d00e      	beq.n	8006d72 <HAL_UART_IRQHandler+0x54e>
 8006d54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d008      	beq.n	8006d72 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f000 fb33 	bl	80073cc <UART_EndTransmit_IT>
    return;
 8006d66:	e004      	b.n	8006d72 <HAL_UART_IRQHandler+0x54e>
    return;
 8006d68:	bf00      	nop
 8006d6a:	e002      	b.n	8006d72 <HAL_UART_IRQHandler+0x54e>
      return;
 8006d6c:	bf00      	nop
 8006d6e:	e000      	b.n	8006d72 <HAL_UART_IRQHandler+0x54e>
      return;
 8006d70:	bf00      	nop
  }
}
 8006d72:	37e8      	adds	r7, #232	@ 0xe8
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bd80      	pop	{r7, pc}

08006d78 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b083      	sub	sp, #12
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006d80:	bf00      	nop
 8006d82:	370c      	adds	r7, #12
 8006d84:	46bd      	mov	sp, r7
 8006d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8a:	4770      	bx	lr

08006d8c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006d8c:	b480      	push	{r7}
 8006d8e:	b083      	sub	sp, #12
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006d94:	bf00      	nop
 8006d96:	370c      	adds	r7, #12
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9e:	4770      	bx	lr

08006da0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006da0:	b480      	push	{r7}
 8006da2:	b083      	sub	sp, #12
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006da8:	bf00      	nop
 8006daa:	370c      	adds	r7, #12
 8006dac:	46bd      	mov	sp, r7
 8006dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db2:	4770      	bx	lr

08006db4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006db4:	b480      	push	{r7}
 8006db6:	b083      	sub	sp, #12
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006dbc:	bf00      	nop
 8006dbe:	370c      	adds	r7, #12
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc6:	4770      	bx	lr

08006dc8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006dc8:	b480      	push	{r7}
 8006dca:	b083      	sub	sp, #12
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006dd0:	bf00      	nop
 8006dd2:	370c      	adds	r7, #12
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dda:	4770      	bx	lr

08006ddc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006ddc:	b480      	push	{r7}
 8006dde:	b083      	sub	sp, #12
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
 8006de4:	460b      	mov	r3, r1
 8006de6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006de8:	bf00      	nop
 8006dea:	370c      	adds	r7, #12
 8006dec:	46bd      	mov	sp, r7
 8006dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df2:	4770      	bx	lr

08006df4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b090      	sub	sp, #64	@ 0x40
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e00:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d137      	bne.n	8006e80 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8006e10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e12:	2200      	movs	r2, #0
 8006e14:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006e16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	3314      	adds	r3, #20
 8006e1c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e20:	e853 3f00 	ldrex	r3, [r3]
 8006e24:	623b      	str	r3, [r7, #32]
   return(result);
 8006e26:	6a3b      	ldr	r3, [r7, #32]
 8006e28:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006e2c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006e2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	3314      	adds	r3, #20
 8006e34:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006e36:	633a      	str	r2, [r7, #48]	@ 0x30
 8006e38:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e3a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006e3c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e3e:	e841 2300 	strex	r3, r2, [r1]
 8006e42:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006e44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d1e5      	bne.n	8006e16 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006e4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	330c      	adds	r3, #12
 8006e50:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e52:	693b      	ldr	r3, [r7, #16]
 8006e54:	e853 3f00 	ldrex	r3, [r3]
 8006e58:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e60:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	330c      	adds	r3, #12
 8006e68:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006e6a:	61fa      	str	r2, [r7, #28]
 8006e6c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e6e:	69b9      	ldr	r1, [r7, #24]
 8006e70:	69fa      	ldr	r2, [r7, #28]
 8006e72:	e841 2300 	strex	r3, r2, [r1]
 8006e76:	617b      	str	r3, [r7, #20]
   return(result);
 8006e78:	697b      	ldr	r3, [r7, #20]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d1e5      	bne.n	8006e4a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006e7e:	e002      	b.n	8006e86 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006e80:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8006e82:	f7ff ff79 	bl	8006d78 <HAL_UART_TxCpltCallback>
}
 8006e86:	bf00      	nop
 8006e88:	3740      	adds	r7, #64	@ 0x40
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}

08006e8e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006e8e:	b580      	push	{r7, lr}
 8006e90:	b084      	sub	sp, #16
 8006e92:	af00      	add	r7, sp, #0
 8006e94:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e9a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006e9c:	68f8      	ldr	r0, [r7, #12]
 8006e9e:	f7ff ff75 	bl	8006d8c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ea2:	bf00      	nop
 8006ea4:	3710      	adds	r7, #16
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}

08006eaa <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006eaa:	b580      	push	{r7, lr}
 8006eac:	b09c      	sub	sp, #112	@ 0x70
 8006eae:	af00      	add	r7, sp, #0
 8006eb0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006eb6:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d172      	bne.n	8006fac <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006ec6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ec8:	2200      	movs	r2, #0
 8006eca:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006ecc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	330c      	adds	r3, #12
 8006ed2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ed4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ed6:	e853 3f00 	ldrex	r3, [r3]
 8006eda:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006edc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006ede:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006ee2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006ee4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	330c      	adds	r3, #12
 8006eea:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006eec:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006eee:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ef0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006ef2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006ef4:	e841 2300 	strex	r3, r2, [r1]
 8006ef8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006efa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d1e5      	bne.n	8006ecc <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f00:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	3314      	adds	r3, #20
 8006f06:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f0a:	e853 3f00 	ldrex	r3, [r3]
 8006f0e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006f10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f12:	f023 0301 	bic.w	r3, r3, #1
 8006f16:	667b      	str	r3, [r7, #100]	@ 0x64
 8006f18:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	3314      	adds	r3, #20
 8006f1e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006f20:	647a      	str	r2, [r7, #68]	@ 0x44
 8006f22:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f24:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006f26:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006f28:	e841 2300 	strex	r3, r2, [r1]
 8006f2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006f2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d1e5      	bne.n	8006f00 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f34:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	3314      	adds	r3, #20
 8006f3a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f3e:	e853 3f00 	ldrex	r3, [r3]
 8006f42:	623b      	str	r3, [r7, #32]
   return(result);
 8006f44:	6a3b      	ldr	r3, [r7, #32]
 8006f46:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f4a:	663b      	str	r3, [r7, #96]	@ 0x60
 8006f4c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	3314      	adds	r3, #20
 8006f52:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006f54:	633a      	str	r2, [r7, #48]	@ 0x30
 8006f56:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f58:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006f5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f5c:	e841 2300 	strex	r3, r2, [r1]
 8006f60:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006f62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d1e5      	bne.n	8006f34 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006f68:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f6a:	2220      	movs	r2, #32
 8006f6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f70:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f74:	2b01      	cmp	r3, #1
 8006f76:	d119      	bne.n	8006fac <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f78:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	330c      	adds	r3, #12
 8006f7e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f80:	693b      	ldr	r3, [r7, #16]
 8006f82:	e853 3f00 	ldrex	r3, [r3]
 8006f86:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	f023 0310 	bic.w	r3, r3, #16
 8006f8e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006f90:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	330c      	adds	r3, #12
 8006f96:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006f98:	61fa      	str	r2, [r7, #28]
 8006f9a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f9c:	69b9      	ldr	r1, [r7, #24]
 8006f9e:	69fa      	ldr	r2, [r7, #28]
 8006fa0:	e841 2300 	strex	r3, r2, [r1]
 8006fa4:	617b      	str	r3, [r7, #20]
   return(result);
 8006fa6:	697b      	ldr	r3, [r7, #20]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d1e5      	bne.n	8006f78 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006fac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006fae:	2200      	movs	r2, #0
 8006fb0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fb2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fb6:	2b01      	cmp	r3, #1
 8006fb8:	d106      	bne.n	8006fc8 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006fba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006fbc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006fbe:	4619      	mov	r1, r3
 8006fc0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006fc2:	f7ff ff0b 	bl	8006ddc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006fc6:	e002      	b.n	8006fce <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8006fc8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006fca:	f7ff fee9 	bl	8006da0 <HAL_UART_RxCpltCallback>
}
 8006fce:	bf00      	nop
 8006fd0:	3770      	adds	r7, #112	@ 0x70
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}

08006fd6 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006fd6:	b580      	push	{r7, lr}
 8006fd8:	b084      	sub	sp, #16
 8006fda:	af00      	add	r7, sp, #0
 8006fdc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fe2:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	2201      	movs	r2, #1
 8006fe8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fee:	2b01      	cmp	r3, #1
 8006ff0:	d108      	bne.n	8007004 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006ff6:	085b      	lsrs	r3, r3, #1
 8006ff8:	b29b      	uxth	r3, r3
 8006ffa:	4619      	mov	r1, r3
 8006ffc:	68f8      	ldr	r0, [r7, #12]
 8006ffe:	f7ff feed 	bl	8006ddc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007002:	e002      	b.n	800700a <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8007004:	68f8      	ldr	r0, [r7, #12]
 8007006:	f7ff fed5 	bl	8006db4 <HAL_UART_RxHalfCpltCallback>
}
 800700a:	bf00      	nop
 800700c:	3710      	adds	r7, #16
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}

08007012 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007012:	b580      	push	{r7, lr}
 8007014:	b084      	sub	sp, #16
 8007016:	af00      	add	r7, sp, #0
 8007018:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800701a:	2300      	movs	r3, #0
 800701c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007022:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	695b      	ldr	r3, [r3, #20]
 800702a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800702e:	2b80      	cmp	r3, #128	@ 0x80
 8007030:	bf0c      	ite	eq
 8007032:	2301      	moveq	r3, #1
 8007034:	2300      	movne	r3, #0
 8007036:	b2db      	uxtb	r3, r3
 8007038:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007040:	b2db      	uxtb	r3, r3
 8007042:	2b21      	cmp	r3, #33	@ 0x21
 8007044:	d108      	bne.n	8007058 <UART_DMAError+0x46>
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d005      	beq.n	8007058 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	2200      	movs	r2, #0
 8007050:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8007052:	68b8      	ldr	r0, [r7, #8]
 8007054:	f000 f8ce 	bl	80071f4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	695b      	ldr	r3, [r3, #20]
 800705e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007062:	2b40      	cmp	r3, #64	@ 0x40
 8007064:	bf0c      	ite	eq
 8007066:	2301      	moveq	r3, #1
 8007068:	2300      	movne	r3, #0
 800706a:	b2db      	uxtb	r3, r3
 800706c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007074:	b2db      	uxtb	r3, r3
 8007076:	2b22      	cmp	r3, #34	@ 0x22
 8007078:	d108      	bne.n	800708c <UART_DMAError+0x7a>
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d005      	beq.n	800708c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	2200      	movs	r2, #0
 8007084:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8007086:	68b8      	ldr	r0, [r7, #8]
 8007088:	f000 f8dc 	bl	8007244 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800708c:	68bb      	ldr	r3, [r7, #8]
 800708e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007090:	f043 0210 	orr.w	r2, r3, #16
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007098:	68b8      	ldr	r0, [r7, #8]
 800709a:	f7ff fe95 	bl	8006dc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800709e:	bf00      	nop
 80070a0:	3710      	adds	r7, #16
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}
	...

080070a8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b098      	sub	sp, #96	@ 0x60
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	60f8      	str	r0, [r7, #12]
 80070b0:	60b9      	str	r1, [r7, #8]
 80070b2:	4613      	mov	r3, r2
 80070b4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80070b6:	68ba      	ldr	r2, [r7, #8]
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	88fa      	ldrh	r2, [r7, #6]
 80070c0:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	2200      	movs	r2, #0
 80070c6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	2222      	movs	r2, #34	@ 0x22
 80070cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070d4:	4a44      	ldr	r2, [pc, #272]	@ (80071e8 <UART_Start_Receive_DMA+0x140>)
 80070d6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070dc:	4a43      	ldr	r2, [pc, #268]	@ (80071ec <UART_Start_Receive_DMA+0x144>)
 80070de:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070e4:	4a42      	ldr	r2, [pc, #264]	@ (80071f0 <UART_Start_Receive_DMA+0x148>)
 80070e6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070ec:	2200      	movs	r2, #0
 80070ee:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80070f0:	f107 0308 	add.w	r3, r7, #8
 80070f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size) != HAL_OK)
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	3304      	adds	r3, #4
 8007100:	4619      	mov	r1, r3
 8007102:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007104:	681a      	ldr	r2, [r3, #0]
 8007106:	88fb      	ldrh	r3, [r7, #6]
 8007108:	f7fc ff16 	bl	8003f38 <HAL_DMA_Start_IT>
 800710c:	4603      	mov	r3, r0
 800710e:	2b00      	cmp	r3, #0
 8007110:	d008      	beq.n	8007124 <UART_Start_Receive_DMA+0x7c>
  {
    /* Set error code to DMA */
    huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	2210      	movs	r2, #16
 8007116:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->RxState to ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	2220      	movs	r2, #32
 800711c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_ERROR;
 8007120:	2301      	movs	r3, #1
 8007122:	e05d      	b.n	80071e0 <UART_Start_Receive_DMA+0x138>
  }
  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007124:	2300      	movs	r3, #0
 8007126:	613b      	str	r3, [r7, #16]
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	613b      	str	r3, [r7, #16]
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	685b      	ldr	r3, [r3, #4]
 8007136:	613b      	str	r3, [r7, #16]
 8007138:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	691b      	ldr	r3, [r3, #16]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d019      	beq.n	8007176 <UART_Start_Receive_DMA+0xce>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	330c      	adds	r3, #12
 8007148:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800714a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800714c:	e853 3f00 	ldrex	r3, [r3]
 8007150:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007152:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007154:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007158:	65bb      	str	r3, [r7, #88]	@ 0x58
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	330c      	adds	r3, #12
 8007160:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007162:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8007164:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007166:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8007168:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800716a:	e841 2300 	strex	r3, r2, [r1]
 800716e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007170:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007172:	2b00      	cmp	r3, #0
 8007174:	d1e5      	bne.n	8007142 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	3314      	adds	r3, #20
 800717c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800717e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007180:	e853 3f00 	ldrex	r3, [r3]
 8007184:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007186:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007188:	f043 0301 	orr.w	r3, r3, #1
 800718c:	657b      	str	r3, [r7, #84]	@ 0x54
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	3314      	adds	r3, #20
 8007194:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007196:	63ba      	str	r2, [r7, #56]	@ 0x38
 8007198:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800719a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800719c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800719e:	e841 2300 	strex	r3, r2, [r1]
 80071a2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80071a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d1e5      	bne.n	8007176 <UART_Start_Receive_DMA+0xce>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	3314      	adds	r3, #20
 80071b0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071b2:	69bb      	ldr	r3, [r7, #24]
 80071b4:	e853 3f00 	ldrex	r3, [r3]
 80071b8:	617b      	str	r3, [r7, #20]
   return(result);
 80071ba:	697b      	ldr	r3, [r7, #20]
 80071bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80071c0:	653b      	str	r3, [r7, #80]	@ 0x50
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	3314      	adds	r3, #20
 80071c8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80071ca:	627a      	str	r2, [r7, #36]	@ 0x24
 80071cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ce:	6a39      	ldr	r1, [r7, #32]
 80071d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80071d2:	e841 2300 	strex	r3, r2, [r1]
 80071d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80071d8:	69fb      	ldr	r3, [r7, #28]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d1e5      	bne.n	80071aa <UART_Start_Receive_DMA+0x102>

  return HAL_OK;
 80071de:	2300      	movs	r3, #0
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	3760      	adds	r7, #96	@ 0x60
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}
 80071e8:	08006eab 	.word	0x08006eab
 80071ec:	08006fd7 	.word	0x08006fd7
 80071f0:	08007013 	.word	0x08007013

080071f4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80071f4:	b480      	push	{r7}
 80071f6:	b089      	sub	sp, #36	@ 0x24
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	330c      	adds	r3, #12
 8007202:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	e853 3f00 	ldrex	r3, [r3]
 800720a:	60bb      	str	r3, [r7, #8]
   return(result);
 800720c:	68bb      	ldr	r3, [r7, #8]
 800720e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007212:	61fb      	str	r3, [r7, #28]
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	330c      	adds	r3, #12
 800721a:	69fa      	ldr	r2, [r7, #28]
 800721c:	61ba      	str	r2, [r7, #24]
 800721e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007220:	6979      	ldr	r1, [r7, #20]
 8007222:	69ba      	ldr	r2, [r7, #24]
 8007224:	e841 2300 	strex	r3, r2, [r1]
 8007228:	613b      	str	r3, [r7, #16]
   return(result);
 800722a:	693b      	ldr	r3, [r7, #16]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d1e5      	bne.n	80071fc <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2220      	movs	r2, #32
 8007234:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8007238:	bf00      	nop
 800723a:	3724      	adds	r7, #36	@ 0x24
 800723c:	46bd      	mov	sp, r7
 800723e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007242:	4770      	bx	lr

08007244 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007244:	b480      	push	{r7}
 8007246:	b095      	sub	sp, #84	@ 0x54
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	330c      	adds	r3, #12
 8007252:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007254:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007256:	e853 3f00 	ldrex	r3, [r3]
 800725a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800725c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800725e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007262:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	330c      	adds	r3, #12
 800726a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800726c:	643a      	str	r2, [r7, #64]	@ 0x40
 800726e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007270:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007272:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007274:	e841 2300 	strex	r3, r2, [r1]
 8007278:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800727a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800727c:	2b00      	cmp	r3, #0
 800727e:	d1e5      	bne.n	800724c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	3314      	adds	r3, #20
 8007286:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007288:	6a3b      	ldr	r3, [r7, #32]
 800728a:	e853 3f00 	ldrex	r3, [r3]
 800728e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007290:	69fb      	ldr	r3, [r7, #28]
 8007292:	f023 0301 	bic.w	r3, r3, #1
 8007296:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	3314      	adds	r3, #20
 800729e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80072a0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80072a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072a4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80072a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80072a8:	e841 2300 	strex	r3, r2, [r1]
 80072ac:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80072ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d1e5      	bne.n	8007280 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072b8:	2b01      	cmp	r3, #1
 80072ba:	d119      	bne.n	80072f0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	330c      	adds	r3, #12
 80072c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	e853 3f00 	ldrex	r3, [r3]
 80072ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	f023 0310 	bic.w	r3, r3, #16
 80072d2:	647b      	str	r3, [r7, #68]	@ 0x44
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	330c      	adds	r3, #12
 80072da:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80072dc:	61ba      	str	r2, [r7, #24]
 80072de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072e0:	6979      	ldr	r1, [r7, #20]
 80072e2:	69ba      	ldr	r2, [r7, #24]
 80072e4:	e841 2300 	strex	r3, r2, [r1]
 80072e8:	613b      	str	r3, [r7, #16]
   return(result);
 80072ea:	693b      	ldr	r3, [r7, #16]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d1e5      	bne.n	80072bc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2220      	movs	r2, #32
 80072f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2200      	movs	r2, #0
 80072fc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80072fe:	bf00      	nop
 8007300:	3754      	adds	r7, #84	@ 0x54
 8007302:	46bd      	mov	sp, r7
 8007304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007308:	4770      	bx	lr

0800730a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800730a:	b580      	push	{r7, lr}
 800730c:	b084      	sub	sp, #16
 800730e:	af00      	add	r7, sp, #0
 8007310:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007316:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	2200      	movs	r2, #0
 800731c:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800731e:	68f8      	ldr	r0, [r7, #12]
 8007320:	f7ff fd52 	bl	8006dc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007324:	bf00      	nop
 8007326:	3710      	adds	r7, #16
 8007328:	46bd      	mov	sp, r7
 800732a:	bd80      	pop	{r7, pc}

0800732c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800732c:	b480      	push	{r7}
 800732e:	b085      	sub	sp, #20
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800733a:	b2db      	uxtb	r3, r3
 800733c:	2b21      	cmp	r3, #33	@ 0x21
 800733e:	d13e      	bne.n	80073be <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	689b      	ldr	r3, [r3, #8]
 8007344:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007348:	d114      	bne.n	8007374 <UART_Transmit_IT+0x48>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	691b      	ldr	r3, [r3, #16]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d110      	bne.n	8007374 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6a1b      	ldr	r3, [r3, #32]
 8007356:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	881b      	ldrh	r3, [r3, #0]
 800735c:	461a      	mov	r2, r3
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007366:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6a1b      	ldr	r3, [r3, #32]
 800736c:	1c9a      	adds	r2, r3, #2
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	621a      	str	r2, [r3, #32]
 8007372:	e008      	b.n	8007386 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6a1b      	ldr	r3, [r3, #32]
 8007378:	1c59      	adds	r1, r3, #1
 800737a:	687a      	ldr	r2, [r7, #4]
 800737c:	6211      	str	r1, [r2, #32]
 800737e:	781a      	ldrb	r2, [r3, #0]
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800738a:	b29b      	uxth	r3, r3
 800738c:	3b01      	subs	r3, #1
 800738e:	b29b      	uxth	r3, r3
 8007390:	687a      	ldr	r2, [r7, #4]
 8007392:	4619      	mov	r1, r3
 8007394:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007396:	2b00      	cmp	r3, #0
 8007398:	d10f      	bne.n	80073ba <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	68da      	ldr	r2, [r3, #12]
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80073a8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	68da      	ldr	r2, [r3, #12]
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80073b8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80073ba:	2300      	movs	r3, #0
 80073bc:	e000      	b.n	80073c0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80073be:	2302      	movs	r3, #2
  }
}
 80073c0:	4618      	mov	r0, r3
 80073c2:	3714      	adds	r7, #20
 80073c4:	46bd      	mov	sp, r7
 80073c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ca:	4770      	bx	lr

080073cc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b082      	sub	sp, #8
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	68da      	ldr	r2, [r3, #12]
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80073e2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2220      	movs	r2, #32
 80073e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	f7ff fcc3 	bl	8006d78 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80073f2:	2300      	movs	r3, #0
}
 80073f4:	4618      	mov	r0, r3
 80073f6:	3708      	adds	r7, #8
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}

080073fc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b08c      	sub	sp, #48	@ 0x30
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8007404:	2300      	movs	r3, #0
 8007406:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8007408:	2300      	movs	r3, #0
 800740a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007412:	b2db      	uxtb	r3, r3
 8007414:	2b22      	cmp	r3, #34	@ 0x22
 8007416:	f040 80aa 	bne.w	800756e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	689b      	ldr	r3, [r3, #8]
 800741e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007422:	d115      	bne.n	8007450 <UART_Receive_IT+0x54>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	691b      	ldr	r3, [r3, #16]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d111      	bne.n	8007450 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007430:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	685b      	ldr	r3, [r3, #4]
 8007438:	b29b      	uxth	r3, r3
 800743a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800743e:	b29a      	uxth	r2, r3
 8007440:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007442:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007448:	1c9a      	adds	r2, r3, #2
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	629a      	str	r2, [r3, #40]	@ 0x28
 800744e:	e024      	b.n	800749a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007454:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	689b      	ldr	r3, [r3, #8]
 800745a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800745e:	d007      	beq.n	8007470 <UART_Receive_IT+0x74>
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	689b      	ldr	r3, [r3, #8]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d10a      	bne.n	800747e <UART_Receive_IT+0x82>
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	691b      	ldr	r3, [r3, #16]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d106      	bne.n	800747e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	685b      	ldr	r3, [r3, #4]
 8007476:	b2da      	uxtb	r2, r3
 8007478:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800747a:	701a      	strb	r2, [r3, #0]
 800747c:	e008      	b.n	8007490 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	685b      	ldr	r3, [r3, #4]
 8007484:	b2db      	uxtb	r3, r3
 8007486:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800748a:	b2da      	uxtb	r2, r3
 800748c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800748e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007494:	1c5a      	adds	r2, r3, #1
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800749e:	b29b      	uxth	r3, r3
 80074a0:	3b01      	subs	r3, #1
 80074a2:	b29b      	uxth	r3, r3
 80074a4:	687a      	ldr	r2, [r7, #4]
 80074a6:	4619      	mov	r1, r3
 80074a8:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d15d      	bne.n	800756a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	68da      	ldr	r2, [r3, #12]
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f022 0220 	bic.w	r2, r2, #32
 80074bc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	68da      	ldr	r2, [r3, #12]
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80074cc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	695a      	ldr	r2, [r3, #20]
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f022 0201 	bic.w	r2, r2, #1
 80074dc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2220      	movs	r2, #32
 80074e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2200      	movs	r2, #0
 80074ea:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074f0:	2b01      	cmp	r3, #1
 80074f2:	d135      	bne.n	8007560 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2200      	movs	r2, #0
 80074f8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	330c      	adds	r3, #12
 8007500:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007502:	697b      	ldr	r3, [r7, #20]
 8007504:	e853 3f00 	ldrex	r3, [r3]
 8007508:	613b      	str	r3, [r7, #16]
   return(result);
 800750a:	693b      	ldr	r3, [r7, #16]
 800750c:	f023 0310 	bic.w	r3, r3, #16
 8007510:	627b      	str	r3, [r7, #36]	@ 0x24
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	330c      	adds	r3, #12
 8007518:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800751a:	623a      	str	r2, [r7, #32]
 800751c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800751e:	69f9      	ldr	r1, [r7, #28]
 8007520:	6a3a      	ldr	r2, [r7, #32]
 8007522:	e841 2300 	strex	r3, r2, [r1]
 8007526:	61bb      	str	r3, [r7, #24]
   return(result);
 8007528:	69bb      	ldr	r3, [r7, #24]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d1e5      	bne.n	80074fa <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f003 0310 	and.w	r3, r3, #16
 8007538:	2b10      	cmp	r3, #16
 800753a:	d10a      	bne.n	8007552 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800753c:	2300      	movs	r3, #0
 800753e:	60fb      	str	r3, [r7, #12]
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	60fb      	str	r3, [r7, #12]
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	685b      	ldr	r3, [r3, #4]
 800754e:	60fb      	str	r3, [r7, #12]
 8007550:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007556:	4619      	mov	r1, r3
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	f7ff fc3f 	bl	8006ddc <HAL_UARTEx_RxEventCallback>
 800755e:	e002      	b.n	8007566 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f7ff fc1d 	bl	8006da0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007566:	2300      	movs	r3, #0
 8007568:	e002      	b.n	8007570 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800756a:	2300      	movs	r3, #0
 800756c:	e000      	b.n	8007570 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800756e:	2302      	movs	r3, #2
  }
}
 8007570:	4618      	mov	r0, r3
 8007572:	3730      	adds	r7, #48	@ 0x30
 8007574:	46bd      	mov	sp, r7
 8007576:	bd80      	pop	{r7, pc}

08007578 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007578:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800757c:	b0c0      	sub	sp, #256	@ 0x100
 800757e:	af00      	add	r7, sp, #0
 8007580:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	691b      	ldr	r3, [r3, #16]
 800758c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007594:	68d9      	ldr	r1, [r3, #12]
 8007596:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800759a:	681a      	ldr	r2, [r3, #0]
 800759c:	ea40 0301 	orr.w	r3, r0, r1
 80075a0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80075a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075a6:	689a      	ldr	r2, [r3, #8]
 80075a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075ac:	691b      	ldr	r3, [r3, #16]
 80075ae:	431a      	orrs	r2, r3
 80075b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075b4:	695b      	ldr	r3, [r3, #20]
 80075b6:	431a      	orrs	r2, r3
 80075b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075bc:	69db      	ldr	r3, [r3, #28]
 80075be:	4313      	orrs	r3, r2
 80075c0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80075c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	68db      	ldr	r3, [r3, #12]
 80075cc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80075d0:	f021 010c 	bic.w	r1, r1, #12
 80075d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075d8:	681a      	ldr	r2, [r3, #0]
 80075da:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80075de:	430b      	orrs	r3, r1
 80075e0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80075e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	695b      	ldr	r3, [r3, #20]
 80075ea:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80075ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075f2:	6999      	ldr	r1, [r3, #24]
 80075f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075f8:	681a      	ldr	r2, [r3, #0]
 80075fa:	ea40 0301 	orr.w	r3, r0, r1
 80075fe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007600:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007604:	681a      	ldr	r2, [r3, #0]
 8007606:	4b8f      	ldr	r3, [pc, #572]	@ (8007844 <UART_SetConfig+0x2cc>)
 8007608:	429a      	cmp	r2, r3
 800760a:	d005      	beq.n	8007618 <UART_SetConfig+0xa0>
 800760c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007610:	681a      	ldr	r2, [r3, #0]
 8007612:	4b8d      	ldr	r3, [pc, #564]	@ (8007848 <UART_SetConfig+0x2d0>)
 8007614:	429a      	cmp	r2, r3
 8007616:	d104      	bne.n	8007622 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007618:	f7fd fc42 	bl	8004ea0 <HAL_RCC_GetPCLK2Freq>
 800761c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007620:	e003      	b.n	800762a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007622:	f7fd fc29 	bl	8004e78 <HAL_RCC_GetPCLK1Freq>
 8007626:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800762a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800762e:	69db      	ldr	r3, [r3, #28]
 8007630:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007634:	f040 810c 	bne.w	8007850 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007638:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800763c:	2200      	movs	r2, #0
 800763e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007642:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007646:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800764a:	4622      	mov	r2, r4
 800764c:	462b      	mov	r3, r5
 800764e:	1891      	adds	r1, r2, r2
 8007650:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007652:	415b      	adcs	r3, r3
 8007654:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007656:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800765a:	4621      	mov	r1, r4
 800765c:	eb12 0801 	adds.w	r8, r2, r1
 8007660:	4629      	mov	r1, r5
 8007662:	eb43 0901 	adc.w	r9, r3, r1
 8007666:	f04f 0200 	mov.w	r2, #0
 800766a:	f04f 0300 	mov.w	r3, #0
 800766e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007672:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007676:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800767a:	4690      	mov	r8, r2
 800767c:	4699      	mov	r9, r3
 800767e:	4623      	mov	r3, r4
 8007680:	eb18 0303 	adds.w	r3, r8, r3
 8007684:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007688:	462b      	mov	r3, r5
 800768a:	eb49 0303 	adc.w	r3, r9, r3
 800768e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007692:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007696:	685b      	ldr	r3, [r3, #4]
 8007698:	2200      	movs	r2, #0
 800769a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800769e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80076a2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80076a6:	460b      	mov	r3, r1
 80076a8:	18db      	adds	r3, r3, r3
 80076aa:	653b      	str	r3, [r7, #80]	@ 0x50
 80076ac:	4613      	mov	r3, r2
 80076ae:	eb42 0303 	adc.w	r3, r2, r3
 80076b2:	657b      	str	r3, [r7, #84]	@ 0x54
 80076b4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80076b8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80076bc:	f7f9 fafe 	bl	8000cbc <__aeabi_uldivmod>
 80076c0:	4602      	mov	r2, r0
 80076c2:	460b      	mov	r3, r1
 80076c4:	4b61      	ldr	r3, [pc, #388]	@ (800784c <UART_SetConfig+0x2d4>)
 80076c6:	fba3 2302 	umull	r2, r3, r3, r2
 80076ca:	095b      	lsrs	r3, r3, #5
 80076cc:	011c      	lsls	r4, r3, #4
 80076ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80076d2:	2200      	movs	r2, #0
 80076d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80076d8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80076dc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80076e0:	4642      	mov	r2, r8
 80076e2:	464b      	mov	r3, r9
 80076e4:	1891      	adds	r1, r2, r2
 80076e6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80076e8:	415b      	adcs	r3, r3
 80076ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80076ec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80076f0:	4641      	mov	r1, r8
 80076f2:	eb12 0a01 	adds.w	sl, r2, r1
 80076f6:	4649      	mov	r1, r9
 80076f8:	eb43 0b01 	adc.w	fp, r3, r1
 80076fc:	f04f 0200 	mov.w	r2, #0
 8007700:	f04f 0300 	mov.w	r3, #0
 8007704:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007708:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800770c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007710:	4692      	mov	sl, r2
 8007712:	469b      	mov	fp, r3
 8007714:	4643      	mov	r3, r8
 8007716:	eb1a 0303 	adds.w	r3, sl, r3
 800771a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800771e:	464b      	mov	r3, r9
 8007720:	eb4b 0303 	adc.w	r3, fp, r3
 8007724:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800772c:	685b      	ldr	r3, [r3, #4]
 800772e:	2200      	movs	r2, #0
 8007730:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007734:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007738:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800773c:	460b      	mov	r3, r1
 800773e:	18db      	adds	r3, r3, r3
 8007740:	643b      	str	r3, [r7, #64]	@ 0x40
 8007742:	4613      	mov	r3, r2
 8007744:	eb42 0303 	adc.w	r3, r2, r3
 8007748:	647b      	str	r3, [r7, #68]	@ 0x44
 800774a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800774e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007752:	f7f9 fab3 	bl	8000cbc <__aeabi_uldivmod>
 8007756:	4602      	mov	r2, r0
 8007758:	460b      	mov	r3, r1
 800775a:	4611      	mov	r1, r2
 800775c:	4b3b      	ldr	r3, [pc, #236]	@ (800784c <UART_SetConfig+0x2d4>)
 800775e:	fba3 2301 	umull	r2, r3, r3, r1
 8007762:	095b      	lsrs	r3, r3, #5
 8007764:	2264      	movs	r2, #100	@ 0x64
 8007766:	fb02 f303 	mul.w	r3, r2, r3
 800776a:	1acb      	subs	r3, r1, r3
 800776c:	00db      	lsls	r3, r3, #3
 800776e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007772:	4b36      	ldr	r3, [pc, #216]	@ (800784c <UART_SetConfig+0x2d4>)
 8007774:	fba3 2302 	umull	r2, r3, r3, r2
 8007778:	095b      	lsrs	r3, r3, #5
 800777a:	005b      	lsls	r3, r3, #1
 800777c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007780:	441c      	add	r4, r3
 8007782:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007786:	2200      	movs	r2, #0
 8007788:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800778c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007790:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007794:	4642      	mov	r2, r8
 8007796:	464b      	mov	r3, r9
 8007798:	1891      	adds	r1, r2, r2
 800779a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800779c:	415b      	adcs	r3, r3
 800779e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80077a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80077a4:	4641      	mov	r1, r8
 80077a6:	1851      	adds	r1, r2, r1
 80077a8:	6339      	str	r1, [r7, #48]	@ 0x30
 80077aa:	4649      	mov	r1, r9
 80077ac:	414b      	adcs	r3, r1
 80077ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80077b0:	f04f 0200 	mov.w	r2, #0
 80077b4:	f04f 0300 	mov.w	r3, #0
 80077b8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80077bc:	4659      	mov	r1, fp
 80077be:	00cb      	lsls	r3, r1, #3
 80077c0:	4651      	mov	r1, sl
 80077c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80077c6:	4651      	mov	r1, sl
 80077c8:	00ca      	lsls	r2, r1, #3
 80077ca:	4610      	mov	r0, r2
 80077cc:	4619      	mov	r1, r3
 80077ce:	4603      	mov	r3, r0
 80077d0:	4642      	mov	r2, r8
 80077d2:	189b      	adds	r3, r3, r2
 80077d4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80077d8:	464b      	mov	r3, r9
 80077da:	460a      	mov	r2, r1
 80077dc:	eb42 0303 	adc.w	r3, r2, r3
 80077e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80077e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077e8:	685b      	ldr	r3, [r3, #4]
 80077ea:	2200      	movs	r2, #0
 80077ec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80077f0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80077f4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80077f8:	460b      	mov	r3, r1
 80077fa:	18db      	adds	r3, r3, r3
 80077fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80077fe:	4613      	mov	r3, r2
 8007800:	eb42 0303 	adc.w	r3, r2, r3
 8007804:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007806:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800780a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800780e:	f7f9 fa55 	bl	8000cbc <__aeabi_uldivmod>
 8007812:	4602      	mov	r2, r0
 8007814:	460b      	mov	r3, r1
 8007816:	4b0d      	ldr	r3, [pc, #52]	@ (800784c <UART_SetConfig+0x2d4>)
 8007818:	fba3 1302 	umull	r1, r3, r3, r2
 800781c:	095b      	lsrs	r3, r3, #5
 800781e:	2164      	movs	r1, #100	@ 0x64
 8007820:	fb01 f303 	mul.w	r3, r1, r3
 8007824:	1ad3      	subs	r3, r2, r3
 8007826:	00db      	lsls	r3, r3, #3
 8007828:	3332      	adds	r3, #50	@ 0x32
 800782a:	4a08      	ldr	r2, [pc, #32]	@ (800784c <UART_SetConfig+0x2d4>)
 800782c:	fba2 2303 	umull	r2, r3, r2, r3
 8007830:	095b      	lsrs	r3, r3, #5
 8007832:	f003 0207 	and.w	r2, r3, #7
 8007836:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	4422      	add	r2, r4
 800783e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007840:	e106      	b.n	8007a50 <UART_SetConfig+0x4d8>
 8007842:	bf00      	nop
 8007844:	40011000 	.word	0x40011000
 8007848:	40011400 	.word	0x40011400
 800784c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007850:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007854:	2200      	movs	r2, #0
 8007856:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800785a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800785e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007862:	4642      	mov	r2, r8
 8007864:	464b      	mov	r3, r9
 8007866:	1891      	adds	r1, r2, r2
 8007868:	6239      	str	r1, [r7, #32]
 800786a:	415b      	adcs	r3, r3
 800786c:	627b      	str	r3, [r7, #36]	@ 0x24
 800786e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007872:	4641      	mov	r1, r8
 8007874:	1854      	adds	r4, r2, r1
 8007876:	4649      	mov	r1, r9
 8007878:	eb43 0501 	adc.w	r5, r3, r1
 800787c:	f04f 0200 	mov.w	r2, #0
 8007880:	f04f 0300 	mov.w	r3, #0
 8007884:	00eb      	lsls	r3, r5, #3
 8007886:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800788a:	00e2      	lsls	r2, r4, #3
 800788c:	4614      	mov	r4, r2
 800788e:	461d      	mov	r5, r3
 8007890:	4643      	mov	r3, r8
 8007892:	18e3      	adds	r3, r4, r3
 8007894:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007898:	464b      	mov	r3, r9
 800789a:	eb45 0303 	adc.w	r3, r5, r3
 800789e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80078a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078a6:	685b      	ldr	r3, [r3, #4]
 80078a8:	2200      	movs	r2, #0
 80078aa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80078ae:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80078b2:	f04f 0200 	mov.w	r2, #0
 80078b6:	f04f 0300 	mov.w	r3, #0
 80078ba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80078be:	4629      	mov	r1, r5
 80078c0:	008b      	lsls	r3, r1, #2
 80078c2:	4621      	mov	r1, r4
 80078c4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80078c8:	4621      	mov	r1, r4
 80078ca:	008a      	lsls	r2, r1, #2
 80078cc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80078d0:	f7f9 f9f4 	bl	8000cbc <__aeabi_uldivmod>
 80078d4:	4602      	mov	r2, r0
 80078d6:	460b      	mov	r3, r1
 80078d8:	4b60      	ldr	r3, [pc, #384]	@ (8007a5c <UART_SetConfig+0x4e4>)
 80078da:	fba3 2302 	umull	r2, r3, r3, r2
 80078de:	095b      	lsrs	r3, r3, #5
 80078e0:	011c      	lsls	r4, r3, #4
 80078e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80078e6:	2200      	movs	r2, #0
 80078e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80078ec:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80078f0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80078f4:	4642      	mov	r2, r8
 80078f6:	464b      	mov	r3, r9
 80078f8:	1891      	adds	r1, r2, r2
 80078fa:	61b9      	str	r1, [r7, #24]
 80078fc:	415b      	adcs	r3, r3
 80078fe:	61fb      	str	r3, [r7, #28]
 8007900:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007904:	4641      	mov	r1, r8
 8007906:	1851      	adds	r1, r2, r1
 8007908:	6139      	str	r1, [r7, #16]
 800790a:	4649      	mov	r1, r9
 800790c:	414b      	adcs	r3, r1
 800790e:	617b      	str	r3, [r7, #20]
 8007910:	f04f 0200 	mov.w	r2, #0
 8007914:	f04f 0300 	mov.w	r3, #0
 8007918:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800791c:	4659      	mov	r1, fp
 800791e:	00cb      	lsls	r3, r1, #3
 8007920:	4651      	mov	r1, sl
 8007922:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007926:	4651      	mov	r1, sl
 8007928:	00ca      	lsls	r2, r1, #3
 800792a:	4610      	mov	r0, r2
 800792c:	4619      	mov	r1, r3
 800792e:	4603      	mov	r3, r0
 8007930:	4642      	mov	r2, r8
 8007932:	189b      	adds	r3, r3, r2
 8007934:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007938:	464b      	mov	r3, r9
 800793a:	460a      	mov	r2, r1
 800793c:	eb42 0303 	adc.w	r3, r2, r3
 8007940:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007944:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007948:	685b      	ldr	r3, [r3, #4]
 800794a:	2200      	movs	r2, #0
 800794c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800794e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007950:	f04f 0200 	mov.w	r2, #0
 8007954:	f04f 0300 	mov.w	r3, #0
 8007958:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800795c:	4649      	mov	r1, r9
 800795e:	008b      	lsls	r3, r1, #2
 8007960:	4641      	mov	r1, r8
 8007962:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007966:	4641      	mov	r1, r8
 8007968:	008a      	lsls	r2, r1, #2
 800796a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800796e:	f7f9 f9a5 	bl	8000cbc <__aeabi_uldivmod>
 8007972:	4602      	mov	r2, r0
 8007974:	460b      	mov	r3, r1
 8007976:	4611      	mov	r1, r2
 8007978:	4b38      	ldr	r3, [pc, #224]	@ (8007a5c <UART_SetConfig+0x4e4>)
 800797a:	fba3 2301 	umull	r2, r3, r3, r1
 800797e:	095b      	lsrs	r3, r3, #5
 8007980:	2264      	movs	r2, #100	@ 0x64
 8007982:	fb02 f303 	mul.w	r3, r2, r3
 8007986:	1acb      	subs	r3, r1, r3
 8007988:	011b      	lsls	r3, r3, #4
 800798a:	3332      	adds	r3, #50	@ 0x32
 800798c:	4a33      	ldr	r2, [pc, #204]	@ (8007a5c <UART_SetConfig+0x4e4>)
 800798e:	fba2 2303 	umull	r2, r3, r2, r3
 8007992:	095b      	lsrs	r3, r3, #5
 8007994:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007998:	441c      	add	r4, r3
 800799a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800799e:	2200      	movs	r2, #0
 80079a0:	673b      	str	r3, [r7, #112]	@ 0x70
 80079a2:	677a      	str	r2, [r7, #116]	@ 0x74
 80079a4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80079a8:	4642      	mov	r2, r8
 80079aa:	464b      	mov	r3, r9
 80079ac:	1891      	adds	r1, r2, r2
 80079ae:	60b9      	str	r1, [r7, #8]
 80079b0:	415b      	adcs	r3, r3
 80079b2:	60fb      	str	r3, [r7, #12]
 80079b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80079b8:	4641      	mov	r1, r8
 80079ba:	1851      	adds	r1, r2, r1
 80079bc:	6039      	str	r1, [r7, #0]
 80079be:	4649      	mov	r1, r9
 80079c0:	414b      	adcs	r3, r1
 80079c2:	607b      	str	r3, [r7, #4]
 80079c4:	f04f 0200 	mov.w	r2, #0
 80079c8:	f04f 0300 	mov.w	r3, #0
 80079cc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80079d0:	4659      	mov	r1, fp
 80079d2:	00cb      	lsls	r3, r1, #3
 80079d4:	4651      	mov	r1, sl
 80079d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80079da:	4651      	mov	r1, sl
 80079dc:	00ca      	lsls	r2, r1, #3
 80079de:	4610      	mov	r0, r2
 80079e0:	4619      	mov	r1, r3
 80079e2:	4603      	mov	r3, r0
 80079e4:	4642      	mov	r2, r8
 80079e6:	189b      	adds	r3, r3, r2
 80079e8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80079ea:	464b      	mov	r3, r9
 80079ec:	460a      	mov	r2, r1
 80079ee:	eb42 0303 	adc.w	r3, r2, r3
 80079f2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80079f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079f8:	685b      	ldr	r3, [r3, #4]
 80079fa:	2200      	movs	r2, #0
 80079fc:	663b      	str	r3, [r7, #96]	@ 0x60
 80079fe:	667a      	str	r2, [r7, #100]	@ 0x64
 8007a00:	f04f 0200 	mov.w	r2, #0
 8007a04:	f04f 0300 	mov.w	r3, #0
 8007a08:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007a0c:	4649      	mov	r1, r9
 8007a0e:	008b      	lsls	r3, r1, #2
 8007a10:	4641      	mov	r1, r8
 8007a12:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007a16:	4641      	mov	r1, r8
 8007a18:	008a      	lsls	r2, r1, #2
 8007a1a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007a1e:	f7f9 f94d 	bl	8000cbc <__aeabi_uldivmod>
 8007a22:	4602      	mov	r2, r0
 8007a24:	460b      	mov	r3, r1
 8007a26:	4b0d      	ldr	r3, [pc, #52]	@ (8007a5c <UART_SetConfig+0x4e4>)
 8007a28:	fba3 1302 	umull	r1, r3, r3, r2
 8007a2c:	095b      	lsrs	r3, r3, #5
 8007a2e:	2164      	movs	r1, #100	@ 0x64
 8007a30:	fb01 f303 	mul.w	r3, r1, r3
 8007a34:	1ad3      	subs	r3, r2, r3
 8007a36:	011b      	lsls	r3, r3, #4
 8007a38:	3332      	adds	r3, #50	@ 0x32
 8007a3a:	4a08      	ldr	r2, [pc, #32]	@ (8007a5c <UART_SetConfig+0x4e4>)
 8007a3c:	fba2 2303 	umull	r2, r3, r2, r3
 8007a40:	095b      	lsrs	r3, r3, #5
 8007a42:	f003 020f 	and.w	r2, r3, #15
 8007a46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	4422      	add	r2, r4
 8007a4e:	609a      	str	r2, [r3, #8]
}
 8007a50:	bf00      	nop
 8007a52:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007a56:	46bd      	mov	sp, r7
 8007a58:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007a5c:	51eb851f 	.word	0x51eb851f

08007a60 <__NVIC_SetPriority>:
{
 8007a60:	b480      	push	{r7}
 8007a62:	b083      	sub	sp, #12
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	4603      	mov	r3, r0
 8007a68:	6039      	str	r1, [r7, #0]
 8007a6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007a6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	db0a      	blt.n	8007a8a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	b2da      	uxtb	r2, r3
 8007a78:	490c      	ldr	r1, [pc, #48]	@ (8007aac <__NVIC_SetPriority+0x4c>)
 8007a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a7e:	0112      	lsls	r2, r2, #4
 8007a80:	b2d2      	uxtb	r2, r2
 8007a82:	440b      	add	r3, r1
 8007a84:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007a88:	e00a      	b.n	8007aa0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	b2da      	uxtb	r2, r3
 8007a8e:	4908      	ldr	r1, [pc, #32]	@ (8007ab0 <__NVIC_SetPriority+0x50>)
 8007a90:	79fb      	ldrb	r3, [r7, #7]
 8007a92:	f003 030f 	and.w	r3, r3, #15
 8007a96:	3b04      	subs	r3, #4
 8007a98:	0112      	lsls	r2, r2, #4
 8007a9a:	b2d2      	uxtb	r2, r2
 8007a9c:	440b      	add	r3, r1
 8007a9e:	761a      	strb	r2, [r3, #24]
}
 8007aa0:	bf00      	nop
 8007aa2:	370c      	adds	r7, #12
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aaa:	4770      	bx	lr
 8007aac:	e000e100 	.word	0xe000e100
 8007ab0:	e000ed00 	.word	0xe000ed00

08007ab4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007ab8:	4b05      	ldr	r3, [pc, #20]	@ (8007ad0 <SysTick_Handler+0x1c>)
 8007aba:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007abc:	f001 fd40 	bl	8009540 <xTaskGetSchedulerState>
 8007ac0:	4603      	mov	r3, r0
 8007ac2:	2b01      	cmp	r3, #1
 8007ac4:	d001      	beq.n	8007aca <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007ac6:	f002 fb37 	bl	800a138 <xPortSysTickHandler>
  }
}
 8007aca:	bf00      	nop
 8007acc:	bd80      	pop	{r7, pc}
 8007ace:	bf00      	nop
 8007ad0:	e000e010 	.word	0xe000e010

08007ad4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007ad8:	2100      	movs	r1, #0
 8007ada:	f06f 0004 	mvn.w	r0, #4
 8007ade:	f7ff ffbf 	bl	8007a60 <__NVIC_SetPriority>
#endif
}
 8007ae2:	bf00      	nop
 8007ae4:	bd80      	pop	{r7, pc}
	...

08007ae8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007ae8:	b480      	push	{r7}
 8007aea:	b083      	sub	sp, #12
 8007aec:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007aee:	f3ef 8305 	mrs	r3, IPSR
 8007af2:	603b      	str	r3, [r7, #0]
  return(result);
 8007af4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d003      	beq.n	8007b02 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007afa:	f06f 0305 	mvn.w	r3, #5
 8007afe:	607b      	str	r3, [r7, #4]
 8007b00:	e00c      	b.n	8007b1c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007b02:	4b0a      	ldr	r3, [pc, #40]	@ (8007b2c <osKernelInitialize+0x44>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d105      	bne.n	8007b16 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007b0a:	4b08      	ldr	r3, [pc, #32]	@ (8007b2c <osKernelInitialize+0x44>)
 8007b0c:	2201      	movs	r2, #1
 8007b0e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007b10:	2300      	movs	r3, #0
 8007b12:	607b      	str	r3, [r7, #4]
 8007b14:	e002      	b.n	8007b1c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007b16:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007b1a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007b1c:	687b      	ldr	r3, [r7, #4]
}
 8007b1e:	4618      	mov	r0, r3
 8007b20:	370c      	adds	r7, #12
 8007b22:	46bd      	mov	sp, r7
 8007b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b28:	4770      	bx	lr
 8007b2a:	bf00      	nop
 8007b2c:	2000b3bc 	.word	0x2000b3bc

08007b30 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b082      	sub	sp, #8
 8007b34:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007b36:	f3ef 8305 	mrs	r3, IPSR
 8007b3a:	603b      	str	r3, [r7, #0]
  return(result);
 8007b3c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d003      	beq.n	8007b4a <osKernelStart+0x1a>
    stat = osErrorISR;
 8007b42:	f06f 0305 	mvn.w	r3, #5
 8007b46:	607b      	str	r3, [r7, #4]
 8007b48:	e010      	b.n	8007b6c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007b4a:	4b0b      	ldr	r3, [pc, #44]	@ (8007b78 <osKernelStart+0x48>)
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	2b01      	cmp	r3, #1
 8007b50:	d109      	bne.n	8007b66 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007b52:	f7ff ffbf 	bl	8007ad4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007b56:	4b08      	ldr	r3, [pc, #32]	@ (8007b78 <osKernelStart+0x48>)
 8007b58:	2202      	movs	r2, #2
 8007b5a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007b5c:	f001 f87a 	bl	8008c54 <vTaskStartScheduler>
      stat = osOK;
 8007b60:	2300      	movs	r3, #0
 8007b62:	607b      	str	r3, [r7, #4]
 8007b64:	e002      	b.n	8007b6c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007b66:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007b6a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007b6c:	687b      	ldr	r3, [r7, #4]
}
 8007b6e:	4618      	mov	r0, r3
 8007b70:	3708      	adds	r7, #8
 8007b72:	46bd      	mov	sp, r7
 8007b74:	bd80      	pop	{r7, pc}
 8007b76:	bf00      	nop
 8007b78:	2000b3bc 	.word	0x2000b3bc

08007b7c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b08e      	sub	sp, #56	@ 0x38
 8007b80:	af04      	add	r7, sp, #16
 8007b82:	60f8      	str	r0, [r7, #12]
 8007b84:	60b9      	str	r1, [r7, #8]
 8007b86:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007b88:	2300      	movs	r3, #0
 8007b8a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007b8c:	f3ef 8305 	mrs	r3, IPSR
 8007b90:	617b      	str	r3, [r7, #20]
  return(result);
 8007b92:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d17e      	bne.n	8007c96 <osThreadNew+0x11a>
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d07b      	beq.n	8007c96 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007b9e:	2380      	movs	r3, #128	@ 0x80
 8007ba0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007ba2:	2318      	movs	r3, #24
 8007ba4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8007baa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007bae:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d045      	beq.n	8007c42 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d002      	beq.n	8007bc4 <osThreadNew+0x48>
        name = attr->name;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	699b      	ldr	r3, [r3, #24]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d002      	beq.n	8007bd2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	699b      	ldr	r3, [r3, #24]
 8007bd0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007bd2:	69fb      	ldr	r3, [r7, #28]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d008      	beq.n	8007bea <osThreadNew+0x6e>
 8007bd8:	69fb      	ldr	r3, [r7, #28]
 8007bda:	2b38      	cmp	r3, #56	@ 0x38
 8007bdc:	d805      	bhi.n	8007bea <osThreadNew+0x6e>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	685b      	ldr	r3, [r3, #4]
 8007be2:	f003 0301 	and.w	r3, r3, #1
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d001      	beq.n	8007bee <osThreadNew+0x72>
        return (NULL);
 8007bea:	2300      	movs	r3, #0
 8007bec:	e054      	b.n	8007c98 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	695b      	ldr	r3, [r3, #20]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d003      	beq.n	8007bfe <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	695b      	ldr	r3, [r3, #20]
 8007bfa:	089b      	lsrs	r3, r3, #2
 8007bfc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	689b      	ldr	r3, [r3, #8]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d00e      	beq.n	8007c24 <osThreadNew+0xa8>
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	68db      	ldr	r3, [r3, #12]
 8007c0a:	2b5b      	cmp	r3, #91	@ 0x5b
 8007c0c:	d90a      	bls.n	8007c24 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d006      	beq.n	8007c24 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	695b      	ldr	r3, [r3, #20]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d002      	beq.n	8007c24 <osThreadNew+0xa8>
        mem = 1;
 8007c1e:	2301      	movs	r3, #1
 8007c20:	61bb      	str	r3, [r7, #24]
 8007c22:	e010      	b.n	8007c46 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	689b      	ldr	r3, [r3, #8]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d10c      	bne.n	8007c46 <osThreadNew+0xca>
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	68db      	ldr	r3, [r3, #12]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d108      	bne.n	8007c46 <osThreadNew+0xca>
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	691b      	ldr	r3, [r3, #16]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d104      	bne.n	8007c46 <osThreadNew+0xca>
          mem = 0;
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	61bb      	str	r3, [r7, #24]
 8007c40:	e001      	b.n	8007c46 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007c42:	2300      	movs	r3, #0
 8007c44:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007c46:	69bb      	ldr	r3, [r7, #24]
 8007c48:	2b01      	cmp	r3, #1
 8007c4a:	d110      	bne.n	8007c6e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007c50:	687a      	ldr	r2, [r7, #4]
 8007c52:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007c54:	9202      	str	r2, [sp, #8]
 8007c56:	9301      	str	r3, [sp, #4]
 8007c58:	69fb      	ldr	r3, [r7, #28]
 8007c5a:	9300      	str	r3, [sp, #0]
 8007c5c:	68bb      	ldr	r3, [r7, #8]
 8007c5e:	6a3a      	ldr	r2, [r7, #32]
 8007c60:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007c62:	68f8      	ldr	r0, [r7, #12]
 8007c64:	f000 fe1a 	bl	800889c <xTaskCreateStatic>
 8007c68:	4603      	mov	r3, r0
 8007c6a:	613b      	str	r3, [r7, #16]
 8007c6c:	e013      	b.n	8007c96 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007c6e:	69bb      	ldr	r3, [r7, #24]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d110      	bne.n	8007c96 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007c74:	6a3b      	ldr	r3, [r7, #32]
 8007c76:	b29a      	uxth	r2, r3
 8007c78:	f107 0310 	add.w	r3, r7, #16
 8007c7c:	9301      	str	r3, [sp, #4]
 8007c7e:	69fb      	ldr	r3, [r7, #28]
 8007c80:	9300      	str	r3, [sp, #0]
 8007c82:	68bb      	ldr	r3, [r7, #8]
 8007c84:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007c86:	68f8      	ldr	r0, [r7, #12]
 8007c88:	f000 fe68 	bl	800895c <xTaskCreate>
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	2b01      	cmp	r3, #1
 8007c90:	d001      	beq.n	8007c96 <osThreadNew+0x11a>
            hTask = NULL;
 8007c92:	2300      	movs	r3, #0
 8007c94:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007c96:	693b      	ldr	r3, [r7, #16]
}
 8007c98:	4618      	mov	r0, r3
 8007c9a:	3728      	adds	r7, #40	@ 0x28
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bd80      	pop	{r7, pc}

08007ca0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b084      	sub	sp, #16
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007ca8:	f3ef 8305 	mrs	r3, IPSR
 8007cac:	60bb      	str	r3, [r7, #8]
  return(result);
 8007cae:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d003      	beq.n	8007cbc <osDelay+0x1c>
    stat = osErrorISR;
 8007cb4:	f06f 0305 	mvn.w	r3, #5
 8007cb8:	60fb      	str	r3, [r7, #12]
 8007cba:	e007      	b.n	8007ccc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d002      	beq.n	8007ccc <osDelay+0x2c>
      vTaskDelay(ticks);
 8007cc6:	6878      	ldr	r0, [r7, #4]
 8007cc8:	f000 ff8e 	bl	8008be8 <vTaskDelay>
    }
  }

  return (stat);
 8007ccc:	68fb      	ldr	r3, [r7, #12]
}
 8007cce:	4618      	mov	r0, r3
 8007cd0:	3710      	adds	r7, #16
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bd80      	pop	{r7, pc}
	...

08007cd8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007cd8:	b480      	push	{r7}
 8007cda:	b085      	sub	sp, #20
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	60f8      	str	r0, [r7, #12]
 8007ce0:	60b9      	str	r1, [r7, #8]
 8007ce2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	4a07      	ldr	r2, [pc, #28]	@ (8007d04 <vApplicationGetIdleTaskMemory+0x2c>)
 8007ce8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007cea:	68bb      	ldr	r3, [r7, #8]
 8007cec:	4a06      	ldr	r2, [pc, #24]	@ (8007d08 <vApplicationGetIdleTaskMemory+0x30>)
 8007cee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2280      	movs	r2, #128	@ 0x80
 8007cf4:	601a      	str	r2, [r3, #0]
}
 8007cf6:	bf00      	nop
 8007cf8:	3714      	adds	r7, #20
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d00:	4770      	bx	lr
 8007d02:	bf00      	nop
 8007d04:	2000b3c0 	.word	0x2000b3c0
 8007d08:	2000b41c 	.word	0x2000b41c

08007d0c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007d0c:	b480      	push	{r7}
 8007d0e:	b085      	sub	sp, #20
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	60f8      	str	r0, [r7, #12]
 8007d14:	60b9      	str	r1, [r7, #8]
 8007d16:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	4a07      	ldr	r2, [pc, #28]	@ (8007d38 <vApplicationGetTimerTaskMemory+0x2c>)
 8007d1c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007d1e:	68bb      	ldr	r3, [r7, #8]
 8007d20:	4a06      	ldr	r2, [pc, #24]	@ (8007d3c <vApplicationGetTimerTaskMemory+0x30>)
 8007d22:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007d2a:	601a      	str	r2, [r3, #0]
}
 8007d2c:	bf00      	nop
 8007d2e:	3714      	adds	r7, #20
 8007d30:	46bd      	mov	sp, r7
 8007d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d36:	4770      	bx	lr
 8007d38:	2000b61c 	.word	0x2000b61c
 8007d3c:	2000b678 	.word	0x2000b678

08007d40 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007d40:	b480      	push	{r7}
 8007d42:	b083      	sub	sp, #12
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f103 0208 	add.w	r2, r3, #8
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007d58:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	f103 0208 	add.w	r2, r3, #8
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f103 0208 	add.w	r2, r3, #8
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2200      	movs	r2, #0
 8007d72:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007d74:	bf00      	nop
 8007d76:	370c      	adds	r7, #12
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7e:	4770      	bx	lr

08007d80 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007d80:	b480      	push	{r7}
 8007d82:	b083      	sub	sp, #12
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007d8e:	bf00      	nop
 8007d90:	370c      	adds	r7, #12
 8007d92:	46bd      	mov	sp, r7
 8007d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d98:	4770      	bx	lr

08007d9a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007d9a:	b480      	push	{r7}
 8007d9c:	b085      	sub	sp, #20
 8007d9e:	af00      	add	r7, sp, #0
 8007da0:	6078      	str	r0, [r7, #4]
 8007da2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	685b      	ldr	r3, [r3, #4]
 8007da8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	68fa      	ldr	r2, [r7, #12]
 8007dae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	689a      	ldr	r2, [r3, #8]
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	689b      	ldr	r3, [r3, #8]
 8007dbc:	683a      	ldr	r2, [r7, #0]
 8007dbe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	683a      	ldr	r2, [r7, #0]
 8007dc4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	687a      	ldr	r2, [r7, #4]
 8007dca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	1c5a      	adds	r2, r3, #1
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	601a      	str	r2, [r3, #0]
}
 8007dd6:	bf00      	nop
 8007dd8:	3714      	adds	r7, #20
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de0:	4770      	bx	lr

08007de2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007de2:	b480      	push	{r7}
 8007de4:	b085      	sub	sp, #20
 8007de6:	af00      	add	r7, sp, #0
 8007de8:	6078      	str	r0, [r7, #4]
 8007dea:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007df2:	68bb      	ldr	r3, [r7, #8]
 8007df4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007df8:	d103      	bne.n	8007e02 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	691b      	ldr	r3, [r3, #16]
 8007dfe:	60fb      	str	r3, [r7, #12]
 8007e00:	e00c      	b.n	8007e1c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	3308      	adds	r3, #8
 8007e06:	60fb      	str	r3, [r7, #12]
 8007e08:	e002      	b.n	8007e10 <vListInsert+0x2e>
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	685b      	ldr	r3, [r3, #4]
 8007e0e:	60fb      	str	r3, [r7, #12]
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	685b      	ldr	r3, [r3, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	68ba      	ldr	r2, [r7, #8]
 8007e18:	429a      	cmp	r2, r3
 8007e1a:	d2f6      	bcs.n	8007e0a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	685a      	ldr	r2, [r3, #4]
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	685b      	ldr	r3, [r3, #4]
 8007e28:	683a      	ldr	r2, [r7, #0]
 8007e2a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	68fa      	ldr	r2, [r7, #12]
 8007e30:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	683a      	ldr	r2, [r7, #0]
 8007e36:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	687a      	ldr	r2, [r7, #4]
 8007e3c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	1c5a      	adds	r2, r3, #1
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	601a      	str	r2, [r3, #0]
}
 8007e48:	bf00      	nop
 8007e4a:	3714      	adds	r7, #20
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e52:	4770      	bx	lr

08007e54 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007e54:	b480      	push	{r7}
 8007e56:	b085      	sub	sp, #20
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	691b      	ldr	r3, [r3, #16]
 8007e60:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	685b      	ldr	r3, [r3, #4]
 8007e66:	687a      	ldr	r2, [r7, #4]
 8007e68:	6892      	ldr	r2, [r2, #8]
 8007e6a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	689b      	ldr	r3, [r3, #8]
 8007e70:	687a      	ldr	r2, [r7, #4]
 8007e72:	6852      	ldr	r2, [r2, #4]
 8007e74:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	685b      	ldr	r3, [r3, #4]
 8007e7a:	687a      	ldr	r2, [r7, #4]
 8007e7c:	429a      	cmp	r2, r3
 8007e7e:	d103      	bne.n	8007e88 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	689a      	ldr	r2, [r3, #8]
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	1e5a      	subs	r2, r3, #1
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	681b      	ldr	r3, [r3, #0]
}
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	3714      	adds	r7, #20
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea6:	4770      	bx	lr

08007ea8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b084      	sub	sp, #16
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
 8007eb0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d10b      	bne.n	8007ed4 <xQueueGenericReset+0x2c>
	__asm volatile
 8007ebc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ec0:	f383 8811 	msr	BASEPRI, r3
 8007ec4:	f3bf 8f6f 	isb	sy
 8007ec8:	f3bf 8f4f 	dsb	sy
 8007ecc:	60bb      	str	r3, [r7, #8]
}
 8007ece:	bf00      	nop
 8007ed0:	bf00      	nop
 8007ed2:	e7fd      	b.n	8007ed0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007ed4:	f002 f8a0 	bl	800a018 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	681a      	ldr	r2, [r3, #0]
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ee0:	68f9      	ldr	r1, [r7, #12]
 8007ee2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007ee4:	fb01 f303 	mul.w	r3, r1, r3
 8007ee8:	441a      	add	r2, r3
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	681a      	ldr	r2, [r3, #0]
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	681a      	ldr	r2, [r3, #0]
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f04:	3b01      	subs	r3, #1
 8007f06:	68f9      	ldr	r1, [r7, #12]
 8007f08:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007f0a:	fb01 f303 	mul.w	r3, r1, r3
 8007f0e:	441a      	add	r2, r3
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	22ff      	movs	r2, #255	@ 0xff
 8007f18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	22ff      	movs	r2, #255	@ 0xff
 8007f20:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d114      	bne.n	8007f54 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	691b      	ldr	r3, [r3, #16]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d01a      	beq.n	8007f68 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	3310      	adds	r3, #16
 8007f36:	4618      	mov	r0, r3
 8007f38:	f001 f91a 	bl	8009170 <xTaskRemoveFromEventList>
 8007f3c:	4603      	mov	r3, r0
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d012      	beq.n	8007f68 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007f42:	4b0d      	ldr	r3, [pc, #52]	@ (8007f78 <xQueueGenericReset+0xd0>)
 8007f44:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f48:	601a      	str	r2, [r3, #0]
 8007f4a:	f3bf 8f4f 	dsb	sy
 8007f4e:	f3bf 8f6f 	isb	sy
 8007f52:	e009      	b.n	8007f68 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	3310      	adds	r3, #16
 8007f58:	4618      	mov	r0, r3
 8007f5a:	f7ff fef1 	bl	8007d40 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	3324      	adds	r3, #36	@ 0x24
 8007f62:	4618      	mov	r0, r3
 8007f64:	f7ff feec 	bl	8007d40 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007f68:	f002 f888 	bl	800a07c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007f6c:	2301      	movs	r3, #1
}
 8007f6e:	4618      	mov	r0, r3
 8007f70:	3710      	adds	r7, #16
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bd80      	pop	{r7, pc}
 8007f76:	bf00      	nop
 8007f78:	e000ed04 	.word	0xe000ed04

08007f7c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b08e      	sub	sp, #56	@ 0x38
 8007f80:	af02      	add	r7, sp, #8
 8007f82:	60f8      	str	r0, [r7, #12]
 8007f84:	60b9      	str	r1, [r7, #8]
 8007f86:	607a      	str	r2, [r7, #4]
 8007f88:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d10b      	bne.n	8007fa8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8007f90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f94:	f383 8811 	msr	BASEPRI, r3
 8007f98:	f3bf 8f6f 	isb	sy
 8007f9c:	f3bf 8f4f 	dsb	sy
 8007fa0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007fa2:	bf00      	nop
 8007fa4:	bf00      	nop
 8007fa6:	e7fd      	b.n	8007fa4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d10b      	bne.n	8007fc6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8007fae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fb2:	f383 8811 	msr	BASEPRI, r3
 8007fb6:	f3bf 8f6f 	isb	sy
 8007fba:	f3bf 8f4f 	dsb	sy
 8007fbe:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007fc0:	bf00      	nop
 8007fc2:	bf00      	nop
 8007fc4:	e7fd      	b.n	8007fc2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d002      	beq.n	8007fd2 <xQueueGenericCreateStatic+0x56>
 8007fcc:	68bb      	ldr	r3, [r7, #8]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d001      	beq.n	8007fd6 <xQueueGenericCreateStatic+0x5a>
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	e000      	b.n	8007fd8 <xQueueGenericCreateStatic+0x5c>
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d10b      	bne.n	8007ff4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8007fdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fe0:	f383 8811 	msr	BASEPRI, r3
 8007fe4:	f3bf 8f6f 	isb	sy
 8007fe8:	f3bf 8f4f 	dsb	sy
 8007fec:	623b      	str	r3, [r7, #32]
}
 8007fee:	bf00      	nop
 8007ff0:	bf00      	nop
 8007ff2:	e7fd      	b.n	8007ff0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d102      	bne.n	8008000 <xQueueGenericCreateStatic+0x84>
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d101      	bne.n	8008004 <xQueueGenericCreateStatic+0x88>
 8008000:	2301      	movs	r3, #1
 8008002:	e000      	b.n	8008006 <xQueueGenericCreateStatic+0x8a>
 8008004:	2300      	movs	r3, #0
 8008006:	2b00      	cmp	r3, #0
 8008008:	d10b      	bne.n	8008022 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800800a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800800e:	f383 8811 	msr	BASEPRI, r3
 8008012:	f3bf 8f6f 	isb	sy
 8008016:	f3bf 8f4f 	dsb	sy
 800801a:	61fb      	str	r3, [r7, #28]
}
 800801c:	bf00      	nop
 800801e:	bf00      	nop
 8008020:	e7fd      	b.n	800801e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008022:	2350      	movs	r3, #80	@ 0x50
 8008024:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008026:	697b      	ldr	r3, [r7, #20]
 8008028:	2b50      	cmp	r3, #80	@ 0x50
 800802a:	d00b      	beq.n	8008044 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800802c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008030:	f383 8811 	msr	BASEPRI, r3
 8008034:	f3bf 8f6f 	isb	sy
 8008038:	f3bf 8f4f 	dsb	sy
 800803c:	61bb      	str	r3, [r7, #24]
}
 800803e:	bf00      	nop
 8008040:	bf00      	nop
 8008042:	e7fd      	b.n	8008040 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008044:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800804a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800804c:	2b00      	cmp	r3, #0
 800804e:	d00d      	beq.n	800806c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008050:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008052:	2201      	movs	r2, #1
 8008054:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008058:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800805c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800805e:	9300      	str	r3, [sp, #0]
 8008060:	4613      	mov	r3, r2
 8008062:	687a      	ldr	r2, [r7, #4]
 8008064:	68b9      	ldr	r1, [r7, #8]
 8008066:	68f8      	ldr	r0, [r7, #12]
 8008068:	f000 f805 	bl	8008076 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800806c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800806e:	4618      	mov	r0, r3
 8008070:	3730      	adds	r7, #48	@ 0x30
 8008072:	46bd      	mov	sp, r7
 8008074:	bd80      	pop	{r7, pc}

08008076 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008076:	b580      	push	{r7, lr}
 8008078:	b084      	sub	sp, #16
 800807a:	af00      	add	r7, sp, #0
 800807c:	60f8      	str	r0, [r7, #12]
 800807e:	60b9      	str	r1, [r7, #8]
 8008080:	607a      	str	r2, [r7, #4]
 8008082:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008084:	68bb      	ldr	r3, [r7, #8]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d103      	bne.n	8008092 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800808a:	69bb      	ldr	r3, [r7, #24]
 800808c:	69ba      	ldr	r2, [r7, #24]
 800808e:	601a      	str	r2, [r3, #0]
 8008090:	e002      	b.n	8008098 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008092:	69bb      	ldr	r3, [r7, #24]
 8008094:	687a      	ldr	r2, [r7, #4]
 8008096:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008098:	69bb      	ldr	r3, [r7, #24]
 800809a:	68fa      	ldr	r2, [r7, #12]
 800809c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800809e:	69bb      	ldr	r3, [r7, #24]
 80080a0:	68ba      	ldr	r2, [r7, #8]
 80080a2:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80080a4:	2101      	movs	r1, #1
 80080a6:	69b8      	ldr	r0, [r7, #24]
 80080a8:	f7ff fefe 	bl	8007ea8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80080ac:	69bb      	ldr	r3, [r7, #24]
 80080ae:	78fa      	ldrb	r2, [r7, #3]
 80080b0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80080b4:	bf00      	nop
 80080b6:	3710      	adds	r7, #16
 80080b8:	46bd      	mov	sp, r7
 80080ba:	bd80      	pop	{r7, pc}

080080bc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b08e      	sub	sp, #56	@ 0x38
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	60f8      	str	r0, [r7, #12]
 80080c4:	60b9      	str	r1, [r7, #8]
 80080c6:	607a      	str	r2, [r7, #4]
 80080c8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80080ca:	2300      	movs	r3, #0
 80080cc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80080d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d10b      	bne.n	80080f0 <xQueueGenericSend+0x34>
	__asm volatile
 80080d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080dc:	f383 8811 	msr	BASEPRI, r3
 80080e0:	f3bf 8f6f 	isb	sy
 80080e4:	f3bf 8f4f 	dsb	sy
 80080e8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80080ea:	bf00      	nop
 80080ec:	bf00      	nop
 80080ee:	e7fd      	b.n	80080ec <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d103      	bne.n	80080fe <xQueueGenericSend+0x42>
 80080f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d101      	bne.n	8008102 <xQueueGenericSend+0x46>
 80080fe:	2301      	movs	r3, #1
 8008100:	e000      	b.n	8008104 <xQueueGenericSend+0x48>
 8008102:	2300      	movs	r3, #0
 8008104:	2b00      	cmp	r3, #0
 8008106:	d10b      	bne.n	8008120 <xQueueGenericSend+0x64>
	__asm volatile
 8008108:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800810c:	f383 8811 	msr	BASEPRI, r3
 8008110:	f3bf 8f6f 	isb	sy
 8008114:	f3bf 8f4f 	dsb	sy
 8008118:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800811a:	bf00      	nop
 800811c:	bf00      	nop
 800811e:	e7fd      	b.n	800811c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	2b02      	cmp	r3, #2
 8008124:	d103      	bne.n	800812e <xQueueGenericSend+0x72>
 8008126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008128:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800812a:	2b01      	cmp	r3, #1
 800812c:	d101      	bne.n	8008132 <xQueueGenericSend+0x76>
 800812e:	2301      	movs	r3, #1
 8008130:	e000      	b.n	8008134 <xQueueGenericSend+0x78>
 8008132:	2300      	movs	r3, #0
 8008134:	2b00      	cmp	r3, #0
 8008136:	d10b      	bne.n	8008150 <xQueueGenericSend+0x94>
	__asm volatile
 8008138:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800813c:	f383 8811 	msr	BASEPRI, r3
 8008140:	f3bf 8f6f 	isb	sy
 8008144:	f3bf 8f4f 	dsb	sy
 8008148:	623b      	str	r3, [r7, #32]
}
 800814a:	bf00      	nop
 800814c:	bf00      	nop
 800814e:	e7fd      	b.n	800814c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008150:	f001 f9f6 	bl	8009540 <xTaskGetSchedulerState>
 8008154:	4603      	mov	r3, r0
 8008156:	2b00      	cmp	r3, #0
 8008158:	d102      	bne.n	8008160 <xQueueGenericSend+0xa4>
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d101      	bne.n	8008164 <xQueueGenericSend+0xa8>
 8008160:	2301      	movs	r3, #1
 8008162:	e000      	b.n	8008166 <xQueueGenericSend+0xaa>
 8008164:	2300      	movs	r3, #0
 8008166:	2b00      	cmp	r3, #0
 8008168:	d10b      	bne.n	8008182 <xQueueGenericSend+0xc6>
	__asm volatile
 800816a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800816e:	f383 8811 	msr	BASEPRI, r3
 8008172:	f3bf 8f6f 	isb	sy
 8008176:	f3bf 8f4f 	dsb	sy
 800817a:	61fb      	str	r3, [r7, #28]
}
 800817c:	bf00      	nop
 800817e:	bf00      	nop
 8008180:	e7fd      	b.n	800817e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008182:	f001 ff49 	bl	800a018 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008188:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800818a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800818c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800818e:	429a      	cmp	r2, r3
 8008190:	d302      	bcc.n	8008198 <xQueueGenericSend+0xdc>
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	2b02      	cmp	r3, #2
 8008196:	d129      	bne.n	80081ec <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008198:	683a      	ldr	r2, [r7, #0]
 800819a:	68b9      	ldr	r1, [r7, #8]
 800819c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800819e:	f000 fa0f 	bl	80085c0 <prvCopyDataToQueue>
 80081a2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80081a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d010      	beq.n	80081ce <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80081ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081ae:	3324      	adds	r3, #36	@ 0x24
 80081b0:	4618      	mov	r0, r3
 80081b2:	f000 ffdd 	bl	8009170 <xTaskRemoveFromEventList>
 80081b6:	4603      	mov	r3, r0
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d013      	beq.n	80081e4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80081bc:	4b3f      	ldr	r3, [pc, #252]	@ (80082bc <xQueueGenericSend+0x200>)
 80081be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80081c2:	601a      	str	r2, [r3, #0]
 80081c4:	f3bf 8f4f 	dsb	sy
 80081c8:	f3bf 8f6f 	isb	sy
 80081cc:	e00a      	b.n	80081e4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80081ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d007      	beq.n	80081e4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80081d4:	4b39      	ldr	r3, [pc, #228]	@ (80082bc <xQueueGenericSend+0x200>)
 80081d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80081da:	601a      	str	r2, [r3, #0]
 80081dc:	f3bf 8f4f 	dsb	sy
 80081e0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80081e4:	f001 ff4a 	bl	800a07c <vPortExitCritical>
				return pdPASS;
 80081e8:	2301      	movs	r3, #1
 80081ea:	e063      	b.n	80082b4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d103      	bne.n	80081fa <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80081f2:	f001 ff43 	bl	800a07c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80081f6:	2300      	movs	r3, #0
 80081f8:	e05c      	b.n	80082b4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80081fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d106      	bne.n	800820e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008200:	f107 0314 	add.w	r3, r7, #20
 8008204:	4618      	mov	r0, r3
 8008206:	f001 f83f 	bl	8009288 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800820a:	2301      	movs	r3, #1
 800820c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800820e:	f001 ff35 	bl	800a07c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008212:	f000 fd87 	bl	8008d24 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008216:	f001 feff 	bl	800a018 <vPortEnterCritical>
 800821a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800821c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008220:	b25b      	sxtb	r3, r3
 8008222:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008226:	d103      	bne.n	8008230 <xQueueGenericSend+0x174>
 8008228:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800822a:	2200      	movs	r2, #0
 800822c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008230:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008232:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008236:	b25b      	sxtb	r3, r3
 8008238:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800823c:	d103      	bne.n	8008246 <xQueueGenericSend+0x18a>
 800823e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008240:	2200      	movs	r2, #0
 8008242:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008246:	f001 ff19 	bl	800a07c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800824a:	1d3a      	adds	r2, r7, #4
 800824c:	f107 0314 	add.w	r3, r7, #20
 8008250:	4611      	mov	r1, r2
 8008252:	4618      	mov	r0, r3
 8008254:	f001 f82e 	bl	80092b4 <xTaskCheckForTimeOut>
 8008258:	4603      	mov	r3, r0
 800825a:	2b00      	cmp	r3, #0
 800825c:	d124      	bne.n	80082a8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800825e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008260:	f000 faa6 	bl	80087b0 <prvIsQueueFull>
 8008264:	4603      	mov	r3, r0
 8008266:	2b00      	cmp	r3, #0
 8008268:	d018      	beq.n	800829c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800826a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800826c:	3310      	adds	r3, #16
 800826e:	687a      	ldr	r2, [r7, #4]
 8008270:	4611      	mov	r1, r2
 8008272:	4618      	mov	r0, r3
 8008274:	f000 ff2a 	bl	80090cc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008278:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800827a:	f000 fa31 	bl	80086e0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800827e:	f000 fd5f 	bl	8008d40 <xTaskResumeAll>
 8008282:	4603      	mov	r3, r0
 8008284:	2b00      	cmp	r3, #0
 8008286:	f47f af7c 	bne.w	8008182 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800828a:	4b0c      	ldr	r3, [pc, #48]	@ (80082bc <xQueueGenericSend+0x200>)
 800828c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008290:	601a      	str	r2, [r3, #0]
 8008292:	f3bf 8f4f 	dsb	sy
 8008296:	f3bf 8f6f 	isb	sy
 800829a:	e772      	b.n	8008182 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800829c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800829e:	f000 fa1f 	bl	80086e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80082a2:	f000 fd4d 	bl	8008d40 <xTaskResumeAll>
 80082a6:	e76c      	b.n	8008182 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80082a8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80082aa:	f000 fa19 	bl	80086e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80082ae:	f000 fd47 	bl	8008d40 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80082b2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80082b4:	4618      	mov	r0, r3
 80082b6:	3738      	adds	r7, #56	@ 0x38
 80082b8:	46bd      	mov	sp, r7
 80082ba:	bd80      	pop	{r7, pc}
 80082bc:	e000ed04 	.word	0xe000ed04

080082c0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b090      	sub	sp, #64	@ 0x40
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	60f8      	str	r0, [r7, #12]
 80082c8:	60b9      	str	r1, [r7, #8]
 80082ca:	607a      	str	r2, [r7, #4]
 80082cc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80082d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d10b      	bne.n	80082f0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80082d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082dc:	f383 8811 	msr	BASEPRI, r3
 80082e0:	f3bf 8f6f 	isb	sy
 80082e4:	f3bf 8f4f 	dsb	sy
 80082e8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80082ea:	bf00      	nop
 80082ec:	bf00      	nop
 80082ee:	e7fd      	b.n	80082ec <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80082f0:	68bb      	ldr	r3, [r7, #8]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d103      	bne.n	80082fe <xQueueGenericSendFromISR+0x3e>
 80082f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d101      	bne.n	8008302 <xQueueGenericSendFromISR+0x42>
 80082fe:	2301      	movs	r3, #1
 8008300:	e000      	b.n	8008304 <xQueueGenericSendFromISR+0x44>
 8008302:	2300      	movs	r3, #0
 8008304:	2b00      	cmp	r3, #0
 8008306:	d10b      	bne.n	8008320 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8008308:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800830c:	f383 8811 	msr	BASEPRI, r3
 8008310:	f3bf 8f6f 	isb	sy
 8008314:	f3bf 8f4f 	dsb	sy
 8008318:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800831a:	bf00      	nop
 800831c:	bf00      	nop
 800831e:	e7fd      	b.n	800831c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	2b02      	cmp	r3, #2
 8008324:	d103      	bne.n	800832e <xQueueGenericSendFromISR+0x6e>
 8008326:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008328:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800832a:	2b01      	cmp	r3, #1
 800832c:	d101      	bne.n	8008332 <xQueueGenericSendFromISR+0x72>
 800832e:	2301      	movs	r3, #1
 8008330:	e000      	b.n	8008334 <xQueueGenericSendFromISR+0x74>
 8008332:	2300      	movs	r3, #0
 8008334:	2b00      	cmp	r3, #0
 8008336:	d10b      	bne.n	8008350 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8008338:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800833c:	f383 8811 	msr	BASEPRI, r3
 8008340:	f3bf 8f6f 	isb	sy
 8008344:	f3bf 8f4f 	dsb	sy
 8008348:	623b      	str	r3, [r7, #32]
}
 800834a:	bf00      	nop
 800834c:	bf00      	nop
 800834e:	e7fd      	b.n	800834c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008350:	f001 ff42 	bl	800a1d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008354:	f3ef 8211 	mrs	r2, BASEPRI
 8008358:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800835c:	f383 8811 	msr	BASEPRI, r3
 8008360:	f3bf 8f6f 	isb	sy
 8008364:	f3bf 8f4f 	dsb	sy
 8008368:	61fa      	str	r2, [r7, #28]
 800836a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800836c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800836e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008370:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008372:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008374:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008376:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008378:	429a      	cmp	r2, r3
 800837a:	d302      	bcc.n	8008382 <xQueueGenericSendFromISR+0xc2>
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	2b02      	cmp	r3, #2
 8008380:	d12f      	bne.n	80083e2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008382:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008384:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008388:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800838c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800838e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008390:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008392:	683a      	ldr	r2, [r7, #0]
 8008394:	68b9      	ldr	r1, [r7, #8]
 8008396:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008398:	f000 f912 	bl	80085c0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800839c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80083a0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80083a4:	d112      	bne.n	80083cc <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80083a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d016      	beq.n	80083dc <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80083ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083b0:	3324      	adds	r3, #36	@ 0x24
 80083b2:	4618      	mov	r0, r3
 80083b4:	f000 fedc 	bl	8009170 <xTaskRemoveFromEventList>
 80083b8:	4603      	mov	r3, r0
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d00e      	beq.n	80083dc <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d00b      	beq.n	80083dc <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2201      	movs	r2, #1
 80083c8:	601a      	str	r2, [r3, #0]
 80083ca:	e007      	b.n	80083dc <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80083cc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80083d0:	3301      	adds	r3, #1
 80083d2:	b2db      	uxtb	r3, r3
 80083d4:	b25a      	sxtb	r2, r3
 80083d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80083dc:	2301      	movs	r3, #1
 80083de:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80083e0:	e001      	b.n	80083e6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80083e2:	2300      	movs	r3, #0
 80083e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80083e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083e8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80083ea:	697b      	ldr	r3, [r7, #20]
 80083ec:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80083f0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80083f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80083f4:	4618      	mov	r0, r3
 80083f6:	3740      	adds	r7, #64	@ 0x40
 80083f8:	46bd      	mov	sp, r7
 80083fa:	bd80      	pop	{r7, pc}

080083fc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b08c      	sub	sp, #48	@ 0x30
 8008400:	af00      	add	r7, sp, #0
 8008402:	60f8      	str	r0, [r7, #12]
 8008404:	60b9      	str	r1, [r7, #8]
 8008406:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008408:	2300      	movs	r3, #0
 800840a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008410:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008412:	2b00      	cmp	r3, #0
 8008414:	d10b      	bne.n	800842e <xQueueReceive+0x32>
	__asm volatile
 8008416:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800841a:	f383 8811 	msr	BASEPRI, r3
 800841e:	f3bf 8f6f 	isb	sy
 8008422:	f3bf 8f4f 	dsb	sy
 8008426:	623b      	str	r3, [r7, #32]
}
 8008428:	bf00      	nop
 800842a:	bf00      	nop
 800842c:	e7fd      	b.n	800842a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800842e:	68bb      	ldr	r3, [r7, #8]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d103      	bne.n	800843c <xQueueReceive+0x40>
 8008434:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008436:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008438:	2b00      	cmp	r3, #0
 800843a:	d101      	bne.n	8008440 <xQueueReceive+0x44>
 800843c:	2301      	movs	r3, #1
 800843e:	e000      	b.n	8008442 <xQueueReceive+0x46>
 8008440:	2300      	movs	r3, #0
 8008442:	2b00      	cmp	r3, #0
 8008444:	d10b      	bne.n	800845e <xQueueReceive+0x62>
	__asm volatile
 8008446:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800844a:	f383 8811 	msr	BASEPRI, r3
 800844e:	f3bf 8f6f 	isb	sy
 8008452:	f3bf 8f4f 	dsb	sy
 8008456:	61fb      	str	r3, [r7, #28]
}
 8008458:	bf00      	nop
 800845a:	bf00      	nop
 800845c:	e7fd      	b.n	800845a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800845e:	f001 f86f 	bl	8009540 <xTaskGetSchedulerState>
 8008462:	4603      	mov	r3, r0
 8008464:	2b00      	cmp	r3, #0
 8008466:	d102      	bne.n	800846e <xQueueReceive+0x72>
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d101      	bne.n	8008472 <xQueueReceive+0x76>
 800846e:	2301      	movs	r3, #1
 8008470:	e000      	b.n	8008474 <xQueueReceive+0x78>
 8008472:	2300      	movs	r3, #0
 8008474:	2b00      	cmp	r3, #0
 8008476:	d10b      	bne.n	8008490 <xQueueReceive+0x94>
	__asm volatile
 8008478:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800847c:	f383 8811 	msr	BASEPRI, r3
 8008480:	f3bf 8f6f 	isb	sy
 8008484:	f3bf 8f4f 	dsb	sy
 8008488:	61bb      	str	r3, [r7, #24]
}
 800848a:	bf00      	nop
 800848c:	bf00      	nop
 800848e:	e7fd      	b.n	800848c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008490:	f001 fdc2 	bl	800a018 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008494:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008496:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008498:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800849a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800849c:	2b00      	cmp	r3, #0
 800849e:	d01f      	beq.n	80084e0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80084a0:	68b9      	ldr	r1, [r7, #8]
 80084a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80084a4:	f000 f8f6 	bl	8008694 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80084a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084aa:	1e5a      	subs	r2, r3, #1
 80084ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084ae:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80084b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084b2:	691b      	ldr	r3, [r3, #16]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d00f      	beq.n	80084d8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80084b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084ba:	3310      	adds	r3, #16
 80084bc:	4618      	mov	r0, r3
 80084be:	f000 fe57 	bl	8009170 <xTaskRemoveFromEventList>
 80084c2:	4603      	mov	r3, r0
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d007      	beq.n	80084d8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80084c8:	4b3c      	ldr	r3, [pc, #240]	@ (80085bc <xQueueReceive+0x1c0>)
 80084ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80084ce:	601a      	str	r2, [r3, #0]
 80084d0:	f3bf 8f4f 	dsb	sy
 80084d4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80084d8:	f001 fdd0 	bl	800a07c <vPortExitCritical>
				return pdPASS;
 80084dc:	2301      	movs	r3, #1
 80084de:	e069      	b.n	80085b4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d103      	bne.n	80084ee <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80084e6:	f001 fdc9 	bl	800a07c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80084ea:	2300      	movs	r3, #0
 80084ec:	e062      	b.n	80085b4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80084ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d106      	bne.n	8008502 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80084f4:	f107 0310 	add.w	r3, r7, #16
 80084f8:	4618      	mov	r0, r3
 80084fa:	f000 fec5 	bl	8009288 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80084fe:	2301      	movs	r3, #1
 8008500:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008502:	f001 fdbb 	bl	800a07c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008506:	f000 fc0d 	bl	8008d24 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800850a:	f001 fd85 	bl	800a018 <vPortEnterCritical>
 800850e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008510:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008514:	b25b      	sxtb	r3, r3
 8008516:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800851a:	d103      	bne.n	8008524 <xQueueReceive+0x128>
 800851c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800851e:	2200      	movs	r2, #0
 8008520:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008524:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008526:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800852a:	b25b      	sxtb	r3, r3
 800852c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008530:	d103      	bne.n	800853a <xQueueReceive+0x13e>
 8008532:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008534:	2200      	movs	r2, #0
 8008536:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800853a:	f001 fd9f 	bl	800a07c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800853e:	1d3a      	adds	r2, r7, #4
 8008540:	f107 0310 	add.w	r3, r7, #16
 8008544:	4611      	mov	r1, r2
 8008546:	4618      	mov	r0, r3
 8008548:	f000 feb4 	bl	80092b4 <xTaskCheckForTimeOut>
 800854c:	4603      	mov	r3, r0
 800854e:	2b00      	cmp	r3, #0
 8008550:	d123      	bne.n	800859a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008552:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008554:	f000 f916 	bl	8008784 <prvIsQueueEmpty>
 8008558:	4603      	mov	r3, r0
 800855a:	2b00      	cmp	r3, #0
 800855c:	d017      	beq.n	800858e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800855e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008560:	3324      	adds	r3, #36	@ 0x24
 8008562:	687a      	ldr	r2, [r7, #4]
 8008564:	4611      	mov	r1, r2
 8008566:	4618      	mov	r0, r3
 8008568:	f000 fdb0 	bl	80090cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800856c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800856e:	f000 f8b7 	bl	80086e0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008572:	f000 fbe5 	bl	8008d40 <xTaskResumeAll>
 8008576:	4603      	mov	r3, r0
 8008578:	2b00      	cmp	r3, #0
 800857a:	d189      	bne.n	8008490 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800857c:	4b0f      	ldr	r3, [pc, #60]	@ (80085bc <xQueueReceive+0x1c0>)
 800857e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008582:	601a      	str	r2, [r3, #0]
 8008584:	f3bf 8f4f 	dsb	sy
 8008588:	f3bf 8f6f 	isb	sy
 800858c:	e780      	b.n	8008490 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800858e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008590:	f000 f8a6 	bl	80086e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008594:	f000 fbd4 	bl	8008d40 <xTaskResumeAll>
 8008598:	e77a      	b.n	8008490 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800859a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800859c:	f000 f8a0 	bl	80086e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80085a0:	f000 fbce 	bl	8008d40 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80085a4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80085a6:	f000 f8ed 	bl	8008784 <prvIsQueueEmpty>
 80085aa:	4603      	mov	r3, r0
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	f43f af6f 	beq.w	8008490 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80085b2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80085b4:	4618      	mov	r0, r3
 80085b6:	3730      	adds	r7, #48	@ 0x30
 80085b8:	46bd      	mov	sp, r7
 80085ba:	bd80      	pop	{r7, pc}
 80085bc:	e000ed04 	.word	0xe000ed04

080085c0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b086      	sub	sp, #24
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	60f8      	str	r0, [r7, #12]
 80085c8:	60b9      	str	r1, [r7, #8]
 80085ca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80085cc:	2300      	movs	r3, #0
 80085ce:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085d4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d10d      	bne.n	80085fa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d14d      	bne.n	8008682 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	689b      	ldr	r3, [r3, #8]
 80085ea:	4618      	mov	r0, r3
 80085ec:	f000 ffc6 	bl	800957c <xTaskPriorityDisinherit>
 80085f0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	2200      	movs	r2, #0
 80085f6:	609a      	str	r2, [r3, #8]
 80085f8:	e043      	b.n	8008682 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d119      	bne.n	8008634 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	6858      	ldr	r0, [r3, #4]
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008608:	461a      	mov	r2, r3
 800860a:	68b9      	ldr	r1, [r7, #8]
 800860c:	f014 ffa5 	bl	801d55a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	685a      	ldr	r2, [r3, #4]
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008618:	441a      	add	r2, r3
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	685a      	ldr	r2, [r3, #4]
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	689b      	ldr	r3, [r3, #8]
 8008626:	429a      	cmp	r2, r3
 8008628:	d32b      	bcc.n	8008682 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	681a      	ldr	r2, [r3, #0]
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	605a      	str	r2, [r3, #4]
 8008632:	e026      	b.n	8008682 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	68d8      	ldr	r0, [r3, #12]
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800863c:	461a      	mov	r2, r3
 800863e:	68b9      	ldr	r1, [r7, #8]
 8008640:	f014 ff8b 	bl	801d55a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	68da      	ldr	r2, [r3, #12]
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800864c:	425b      	negs	r3, r3
 800864e:	441a      	add	r2, r3
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	68da      	ldr	r2, [r3, #12]
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	429a      	cmp	r2, r3
 800865e:	d207      	bcs.n	8008670 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	689a      	ldr	r2, [r3, #8]
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008668:	425b      	negs	r3, r3
 800866a:	441a      	add	r2, r3
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2b02      	cmp	r3, #2
 8008674:	d105      	bne.n	8008682 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008676:	693b      	ldr	r3, [r7, #16]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d002      	beq.n	8008682 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800867c:	693b      	ldr	r3, [r7, #16]
 800867e:	3b01      	subs	r3, #1
 8008680:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008682:	693b      	ldr	r3, [r7, #16]
 8008684:	1c5a      	adds	r2, r3, #1
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800868a:	697b      	ldr	r3, [r7, #20]
}
 800868c:	4618      	mov	r0, r3
 800868e:	3718      	adds	r7, #24
 8008690:	46bd      	mov	sp, r7
 8008692:	bd80      	pop	{r7, pc}

08008694 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b082      	sub	sp, #8
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
 800869c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d018      	beq.n	80086d8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	68da      	ldr	r2, [r3, #12]
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086ae:	441a      	add	r2, r3
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	68da      	ldr	r2, [r3, #12]
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	689b      	ldr	r3, [r3, #8]
 80086bc:	429a      	cmp	r2, r3
 80086be:	d303      	bcc.n	80086c8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681a      	ldr	r2, [r3, #0]
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	68d9      	ldr	r1, [r3, #12]
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086d0:	461a      	mov	r2, r3
 80086d2:	6838      	ldr	r0, [r7, #0]
 80086d4:	f014 ff41 	bl	801d55a <memcpy>
	}
}
 80086d8:	bf00      	nop
 80086da:	3708      	adds	r7, #8
 80086dc:	46bd      	mov	sp, r7
 80086de:	bd80      	pop	{r7, pc}

080086e0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b084      	sub	sp, #16
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80086e8:	f001 fc96 	bl	800a018 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80086f2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80086f4:	e011      	b.n	800871a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d012      	beq.n	8008724 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	3324      	adds	r3, #36	@ 0x24
 8008702:	4618      	mov	r0, r3
 8008704:	f000 fd34 	bl	8009170 <xTaskRemoveFromEventList>
 8008708:	4603      	mov	r3, r0
 800870a:	2b00      	cmp	r3, #0
 800870c:	d001      	beq.n	8008712 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800870e:	f000 fe35 	bl	800937c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008712:	7bfb      	ldrb	r3, [r7, #15]
 8008714:	3b01      	subs	r3, #1
 8008716:	b2db      	uxtb	r3, r3
 8008718:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800871a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800871e:	2b00      	cmp	r3, #0
 8008720:	dce9      	bgt.n	80086f6 <prvUnlockQueue+0x16>
 8008722:	e000      	b.n	8008726 <prvUnlockQueue+0x46>
					break;
 8008724:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	22ff      	movs	r2, #255	@ 0xff
 800872a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800872e:	f001 fca5 	bl	800a07c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008732:	f001 fc71 	bl	800a018 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800873c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800873e:	e011      	b.n	8008764 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	691b      	ldr	r3, [r3, #16]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d012      	beq.n	800876e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	3310      	adds	r3, #16
 800874c:	4618      	mov	r0, r3
 800874e:	f000 fd0f 	bl	8009170 <xTaskRemoveFromEventList>
 8008752:	4603      	mov	r3, r0
 8008754:	2b00      	cmp	r3, #0
 8008756:	d001      	beq.n	800875c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008758:	f000 fe10 	bl	800937c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800875c:	7bbb      	ldrb	r3, [r7, #14]
 800875e:	3b01      	subs	r3, #1
 8008760:	b2db      	uxtb	r3, r3
 8008762:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008764:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008768:	2b00      	cmp	r3, #0
 800876a:	dce9      	bgt.n	8008740 <prvUnlockQueue+0x60>
 800876c:	e000      	b.n	8008770 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800876e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	22ff      	movs	r2, #255	@ 0xff
 8008774:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008778:	f001 fc80 	bl	800a07c <vPortExitCritical>
}
 800877c:	bf00      	nop
 800877e:	3710      	adds	r7, #16
 8008780:	46bd      	mov	sp, r7
 8008782:	bd80      	pop	{r7, pc}

08008784 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b084      	sub	sp, #16
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800878c:	f001 fc44 	bl	800a018 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008794:	2b00      	cmp	r3, #0
 8008796:	d102      	bne.n	800879e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008798:	2301      	movs	r3, #1
 800879a:	60fb      	str	r3, [r7, #12]
 800879c:	e001      	b.n	80087a2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800879e:	2300      	movs	r3, #0
 80087a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80087a2:	f001 fc6b 	bl	800a07c <vPortExitCritical>

	return xReturn;
 80087a6:	68fb      	ldr	r3, [r7, #12]
}
 80087a8:	4618      	mov	r0, r3
 80087aa:	3710      	adds	r7, #16
 80087ac:	46bd      	mov	sp, r7
 80087ae:	bd80      	pop	{r7, pc}

080087b0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b084      	sub	sp, #16
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80087b8:	f001 fc2e 	bl	800a018 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087c4:	429a      	cmp	r2, r3
 80087c6:	d102      	bne.n	80087ce <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80087c8:	2301      	movs	r3, #1
 80087ca:	60fb      	str	r3, [r7, #12]
 80087cc:	e001      	b.n	80087d2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80087ce:	2300      	movs	r3, #0
 80087d0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80087d2:	f001 fc53 	bl	800a07c <vPortExitCritical>

	return xReturn;
 80087d6:	68fb      	ldr	r3, [r7, #12]
}
 80087d8:	4618      	mov	r0, r3
 80087da:	3710      	adds	r7, #16
 80087dc:	46bd      	mov	sp, r7
 80087de:	bd80      	pop	{r7, pc}

080087e0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80087e0:	b480      	push	{r7}
 80087e2:	b085      	sub	sp, #20
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
 80087e8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80087ea:	2300      	movs	r3, #0
 80087ec:	60fb      	str	r3, [r7, #12]
 80087ee:	e014      	b.n	800881a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80087f0:	4a0f      	ldr	r2, [pc, #60]	@ (8008830 <vQueueAddToRegistry+0x50>)
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d10b      	bne.n	8008814 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80087fc:	490c      	ldr	r1, [pc, #48]	@ (8008830 <vQueueAddToRegistry+0x50>)
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	683a      	ldr	r2, [r7, #0]
 8008802:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008806:	4a0a      	ldr	r2, [pc, #40]	@ (8008830 <vQueueAddToRegistry+0x50>)
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	00db      	lsls	r3, r3, #3
 800880c:	4413      	add	r3, r2
 800880e:	687a      	ldr	r2, [r7, #4]
 8008810:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008812:	e006      	b.n	8008822 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	3301      	adds	r3, #1
 8008818:	60fb      	str	r3, [r7, #12]
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	2b07      	cmp	r3, #7
 800881e:	d9e7      	bls.n	80087f0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008820:	bf00      	nop
 8008822:	bf00      	nop
 8008824:	3714      	adds	r7, #20
 8008826:	46bd      	mov	sp, r7
 8008828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882c:	4770      	bx	lr
 800882e:	bf00      	nop
 8008830:	2000ba78 	.word	0x2000ba78

08008834 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008834:	b580      	push	{r7, lr}
 8008836:	b086      	sub	sp, #24
 8008838:	af00      	add	r7, sp, #0
 800883a:	60f8      	str	r0, [r7, #12]
 800883c:	60b9      	str	r1, [r7, #8]
 800883e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008844:	f001 fbe8 	bl	800a018 <vPortEnterCritical>
 8008848:	697b      	ldr	r3, [r7, #20]
 800884a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800884e:	b25b      	sxtb	r3, r3
 8008850:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008854:	d103      	bne.n	800885e <vQueueWaitForMessageRestricted+0x2a>
 8008856:	697b      	ldr	r3, [r7, #20]
 8008858:	2200      	movs	r2, #0
 800885a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800885e:	697b      	ldr	r3, [r7, #20]
 8008860:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008864:	b25b      	sxtb	r3, r3
 8008866:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800886a:	d103      	bne.n	8008874 <vQueueWaitForMessageRestricted+0x40>
 800886c:	697b      	ldr	r3, [r7, #20]
 800886e:	2200      	movs	r2, #0
 8008870:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008874:	f001 fc02 	bl	800a07c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008878:	697b      	ldr	r3, [r7, #20]
 800887a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800887c:	2b00      	cmp	r3, #0
 800887e:	d106      	bne.n	800888e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008880:	697b      	ldr	r3, [r7, #20]
 8008882:	3324      	adds	r3, #36	@ 0x24
 8008884:	687a      	ldr	r2, [r7, #4]
 8008886:	68b9      	ldr	r1, [r7, #8]
 8008888:	4618      	mov	r0, r3
 800888a:	f000 fc45 	bl	8009118 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800888e:	6978      	ldr	r0, [r7, #20]
 8008890:	f7ff ff26 	bl	80086e0 <prvUnlockQueue>
	}
 8008894:	bf00      	nop
 8008896:	3718      	adds	r7, #24
 8008898:	46bd      	mov	sp, r7
 800889a:	bd80      	pop	{r7, pc}

0800889c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800889c:	b580      	push	{r7, lr}
 800889e:	b08e      	sub	sp, #56	@ 0x38
 80088a0:	af04      	add	r7, sp, #16
 80088a2:	60f8      	str	r0, [r7, #12]
 80088a4:	60b9      	str	r1, [r7, #8]
 80088a6:	607a      	str	r2, [r7, #4]
 80088a8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80088aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d10b      	bne.n	80088c8 <xTaskCreateStatic+0x2c>
	__asm volatile
 80088b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088b4:	f383 8811 	msr	BASEPRI, r3
 80088b8:	f3bf 8f6f 	isb	sy
 80088bc:	f3bf 8f4f 	dsb	sy
 80088c0:	623b      	str	r3, [r7, #32]
}
 80088c2:	bf00      	nop
 80088c4:	bf00      	nop
 80088c6:	e7fd      	b.n	80088c4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80088c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d10b      	bne.n	80088e6 <xTaskCreateStatic+0x4a>
	__asm volatile
 80088ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088d2:	f383 8811 	msr	BASEPRI, r3
 80088d6:	f3bf 8f6f 	isb	sy
 80088da:	f3bf 8f4f 	dsb	sy
 80088de:	61fb      	str	r3, [r7, #28]
}
 80088e0:	bf00      	nop
 80088e2:	bf00      	nop
 80088e4:	e7fd      	b.n	80088e2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80088e6:	235c      	movs	r3, #92	@ 0x5c
 80088e8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80088ea:	693b      	ldr	r3, [r7, #16]
 80088ec:	2b5c      	cmp	r3, #92	@ 0x5c
 80088ee:	d00b      	beq.n	8008908 <xTaskCreateStatic+0x6c>
	__asm volatile
 80088f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088f4:	f383 8811 	msr	BASEPRI, r3
 80088f8:	f3bf 8f6f 	isb	sy
 80088fc:	f3bf 8f4f 	dsb	sy
 8008900:	61bb      	str	r3, [r7, #24]
}
 8008902:	bf00      	nop
 8008904:	bf00      	nop
 8008906:	e7fd      	b.n	8008904 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008908:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800890a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800890c:	2b00      	cmp	r3, #0
 800890e:	d01e      	beq.n	800894e <xTaskCreateStatic+0xb2>
 8008910:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008912:	2b00      	cmp	r3, #0
 8008914:	d01b      	beq.n	800894e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008916:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008918:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800891a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800891c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800891e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008922:	2202      	movs	r2, #2
 8008924:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008928:	2300      	movs	r3, #0
 800892a:	9303      	str	r3, [sp, #12]
 800892c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800892e:	9302      	str	r3, [sp, #8]
 8008930:	f107 0314 	add.w	r3, r7, #20
 8008934:	9301      	str	r3, [sp, #4]
 8008936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008938:	9300      	str	r3, [sp, #0]
 800893a:	683b      	ldr	r3, [r7, #0]
 800893c:	687a      	ldr	r2, [r7, #4]
 800893e:	68b9      	ldr	r1, [r7, #8]
 8008940:	68f8      	ldr	r0, [r7, #12]
 8008942:	f000 f850 	bl	80089e6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008946:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008948:	f000 f8de 	bl	8008b08 <prvAddNewTaskToReadyList>
 800894c:	e001      	b.n	8008952 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800894e:	2300      	movs	r3, #0
 8008950:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008952:	697b      	ldr	r3, [r7, #20]
	}
 8008954:	4618      	mov	r0, r3
 8008956:	3728      	adds	r7, #40	@ 0x28
 8008958:	46bd      	mov	sp, r7
 800895a:	bd80      	pop	{r7, pc}

0800895c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800895c:	b580      	push	{r7, lr}
 800895e:	b08c      	sub	sp, #48	@ 0x30
 8008960:	af04      	add	r7, sp, #16
 8008962:	60f8      	str	r0, [r7, #12]
 8008964:	60b9      	str	r1, [r7, #8]
 8008966:	603b      	str	r3, [r7, #0]
 8008968:	4613      	mov	r3, r2
 800896a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800896c:	88fb      	ldrh	r3, [r7, #6]
 800896e:	009b      	lsls	r3, r3, #2
 8008970:	4618      	mov	r0, r3
 8008972:	f001 fc73 	bl	800a25c <pvPortMalloc>
 8008976:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008978:	697b      	ldr	r3, [r7, #20]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d00e      	beq.n	800899c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800897e:	205c      	movs	r0, #92	@ 0x5c
 8008980:	f001 fc6c 	bl	800a25c <pvPortMalloc>
 8008984:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008986:	69fb      	ldr	r3, [r7, #28]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d003      	beq.n	8008994 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800898c:	69fb      	ldr	r3, [r7, #28]
 800898e:	697a      	ldr	r2, [r7, #20]
 8008990:	631a      	str	r2, [r3, #48]	@ 0x30
 8008992:	e005      	b.n	80089a0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008994:	6978      	ldr	r0, [r7, #20]
 8008996:	f001 fd2f 	bl	800a3f8 <vPortFree>
 800899a:	e001      	b.n	80089a0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800899c:	2300      	movs	r3, #0
 800899e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80089a0:	69fb      	ldr	r3, [r7, #28]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d017      	beq.n	80089d6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80089a6:	69fb      	ldr	r3, [r7, #28]
 80089a8:	2200      	movs	r2, #0
 80089aa:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80089ae:	88fa      	ldrh	r2, [r7, #6]
 80089b0:	2300      	movs	r3, #0
 80089b2:	9303      	str	r3, [sp, #12]
 80089b4:	69fb      	ldr	r3, [r7, #28]
 80089b6:	9302      	str	r3, [sp, #8]
 80089b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089ba:	9301      	str	r3, [sp, #4]
 80089bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089be:	9300      	str	r3, [sp, #0]
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	68b9      	ldr	r1, [r7, #8]
 80089c4:	68f8      	ldr	r0, [r7, #12]
 80089c6:	f000 f80e 	bl	80089e6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80089ca:	69f8      	ldr	r0, [r7, #28]
 80089cc:	f000 f89c 	bl	8008b08 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80089d0:	2301      	movs	r3, #1
 80089d2:	61bb      	str	r3, [r7, #24]
 80089d4:	e002      	b.n	80089dc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80089d6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80089da:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80089dc:	69bb      	ldr	r3, [r7, #24]
	}
 80089de:	4618      	mov	r0, r3
 80089e0:	3720      	adds	r7, #32
 80089e2:	46bd      	mov	sp, r7
 80089e4:	bd80      	pop	{r7, pc}

080089e6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80089e6:	b580      	push	{r7, lr}
 80089e8:	b088      	sub	sp, #32
 80089ea:	af00      	add	r7, sp, #0
 80089ec:	60f8      	str	r0, [r7, #12]
 80089ee:	60b9      	str	r1, [r7, #8]
 80089f0:	607a      	str	r2, [r7, #4]
 80089f2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80089f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089f6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	009b      	lsls	r3, r3, #2
 80089fc:	461a      	mov	r2, r3
 80089fe:	21a5      	movs	r1, #165	@ 0xa5
 8008a00:	f014 fd16 	bl	801d430 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008a04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a06:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008a0e:	3b01      	subs	r3, #1
 8008a10:	009b      	lsls	r3, r3, #2
 8008a12:	4413      	add	r3, r2
 8008a14:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008a16:	69bb      	ldr	r3, [r7, #24]
 8008a18:	f023 0307 	bic.w	r3, r3, #7
 8008a1c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008a1e:	69bb      	ldr	r3, [r7, #24]
 8008a20:	f003 0307 	and.w	r3, r3, #7
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d00b      	beq.n	8008a40 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8008a28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a2c:	f383 8811 	msr	BASEPRI, r3
 8008a30:	f3bf 8f6f 	isb	sy
 8008a34:	f3bf 8f4f 	dsb	sy
 8008a38:	617b      	str	r3, [r7, #20]
}
 8008a3a:	bf00      	nop
 8008a3c:	bf00      	nop
 8008a3e:	e7fd      	b.n	8008a3c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d01f      	beq.n	8008a86 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008a46:	2300      	movs	r3, #0
 8008a48:	61fb      	str	r3, [r7, #28]
 8008a4a:	e012      	b.n	8008a72 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008a4c:	68ba      	ldr	r2, [r7, #8]
 8008a4e:	69fb      	ldr	r3, [r7, #28]
 8008a50:	4413      	add	r3, r2
 8008a52:	7819      	ldrb	r1, [r3, #0]
 8008a54:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a56:	69fb      	ldr	r3, [r7, #28]
 8008a58:	4413      	add	r3, r2
 8008a5a:	3334      	adds	r3, #52	@ 0x34
 8008a5c:	460a      	mov	r2, r1
 8008a5e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008a60:	68ba      	ldr	r2, [r7, #8]
 8008a62:	69fb      	ldr	r3, [r7, #28]
 8008a64:	4413      	add	r3, r2
 8008a66:	781b      	ldrb	r3, [r3, #0]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d006      	beq.n	8008a7a <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008a6c:	69fb      	ldr	r3, [r7, #28]
 8008a6e:	3301      	adds	r3, #1
 8008a70:	61fb      	str	r3, [r7, #28]
 8008a72:	69fb      	ldr	r3, [r7, #28]
 8008a74:	2b0f      	cmp	r3, #15
 8008a76:	d9e9      	bls.n	8008a4c <prvInitialiseNewTask+0x66>
 8008a78:	e000      	b.n	8008a7c <prvInitialiseNewTask+0x96>
			{
				break;
 8008a7a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008a7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a7e:	2200      	movs	r2, #0
 8008a80:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008a84:	e003      	b.n	8008a8e <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008a86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a88:	2200      	movs	r2, #0
 8008a8a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008a8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a90:	2b37      	cmp	r3, #55	@ 0x37
 8008a92:	d901      	bls.n	8008a98 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008a94:	2337      	movs	r3, #55	@ 0x37
 8008a96:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008a98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a9a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008a9c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008a9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008aa0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008aa2:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008aa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008aaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008aac:	3304      	adds	r3, #4
 8008aae:	4618      	mov	r0, r3
 8008ab0:	f7ff f966 	bl	8007d80 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008ab4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ab6:	3318      	adds	r3, #24
 8008ab8:	4618      	mov	r0, r3
 8008aba:	f7ff f961 	bl	8007d80 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008abe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ac0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008ac2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ac4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ac6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008aca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008acc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008ace:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ad0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008ad2:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008ad4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008ada:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008adc:	2200      	movs	r2, #0
 8008ade:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008ae2:	683a      	ldr	r2, [r7, #0]
 8008ae4:	68f9      	ldr	r1, [r7, #12]
 8008ae6:	69b8      	ldr	r0, [r7, #24]
 8008ae8:	f001 f966 	bl	8009db8 <pxPortInitialiseStack>
 8008aec:	4602      	mov	r2, r0
 8008aee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008af0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008af2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d002      	beq.n	8008afe <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008af8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008afa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008afc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008afe:	bf00      	nop
 8008b00:	3720      	adds	r7, #32
 8008b02:	46bd      	mov	sp, r7
 8008b04:	bd80      	pop	{r7, pc}
	...

08008b08 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b082      	sub	sp, #8
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008b10:	f001 fa82 	bl	800a018 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008b14:	4b2d      	ldr	r3, [pc, #180]	@ (8008bcc <prvAddNewTaskToReadyList+0xc4>)
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	3301      	adds	r3, #1
 8008b1a:	4a2c      	ldr	r2, [pc, #176]	@ (8008bcc <prvAddNewTaskToReadyList+0xc4>)
 8008b1c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008b1e:	4b2c      	ldr	r3, [pc, #176]	@ (8008bd0 <prvAddNewTaskToReadyList+0xc8>)
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d109      	bne.n	8008b3a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008b26:	4a2a      	ldr	r2, [pc, #168]	@ (8008bd0 <prvAddNewTaskToReadyList+0xc8>)
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008b2c:	4b27      	ldr	r3, [pc, #156]	@ (8008bcc <prvAddNewTaskToReadyList+0xc4>)
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	2b01      	cmp	r3, #1
 8008b32:	d110      	bne.n	8008b56 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008b34:	f000 fc46 	bl	80093c4 <prvInitialiseTaskLists>
 8008b38:	e00d      	b.n	8008b56 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008b3a:	4b26      	ldr	r3, [pc, #152]	@ (8008bd4 <prvAddNewTaskToReadyList+0xcc>)
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d109      	bne.n	8008b56 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008b42:	4b23      	ldr	r3, [pc, #140]	@ (8008bd0 <prvAddNewTaskToReadyList+0xc8>)
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b4c:	429a      	cmp	r2, r3
 8008b4e:	d802      	bhi.n	8008b56 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008b50:	4a1f      	ldr	r2, [pc, #124]	@ (8008bd0 <prvAddNewTaskToReadyList+0xc8>)
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008b56:	4b20      	ldr	r3, [pc, #128]	@ (8008bd8 <prvAddNewTaskToReadyList+0xd0>)
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	3301      	adds	r3, #1
 8008b5c:	4a1e      	ldr	r2, [pc, #120]	@ (8008bd8 <prvAddNewTaskToReadyList+0xd0>)
 8008b5e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008b60:	4b1d      	ldr	r3, [pc, #116]	@ (8008bd8 <prvAddNewTaskToReadyList+0xd0>)
 8008b62:	681a      	ldr	r2, [r3, #0]
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b6c:	4b1b      	ldr	r3, [pc, #108]	@ (8008bdc <prvAddNewTaskToReadyList+0xd4>)
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	429a      	cmp	r2, r3
 8008b72:	d903      	bls.n	8008b7c <prvAddNewTaskToReadyList+0x74>
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b78:	4a18      	ldr	r2, [pc, #96]	@ (8008bdc <prvAddNewTaskToReadyList+0xd4>)
 8008b7a:	6013      	str	r3, [r2, #0]
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b80:	4613      	mov	r3, r2
 8008b82:	009b      	lsls	r3, r3, #2
 8008b84:	4413      	add	r3, r2
 8008b86:	009b      	lsls	r3, r3, #2
 8008b88:	4a15      	ldr	r2, [pc, #84]	@ (8008be0 <prvAddNewTaskToReadyList+0xd8>)
 8008b8a:	441a      	add	r2, r3
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	3304      	adds	r3, #4
 8008b90:	4619      	mov	r1, r3
 8008b92:	4610      	mov	r0, r2
 8008b94:	f7ff f901 	bl	8007d9a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008b98:	f001 fa70 	bl	800a07c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008b9c:	4b0d      	ldr	r3, [pc, #52]	@ (8008bd4 <prvAddNewTaskToReadyList+0xcc>)
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d00e      	beq.n	8008bc2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008ba4:	4b0a      	ldr	r3, [pc, #40]	@ (8008bd0 <prvAddNewTaskToReadyList+0xc8>)
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bae:	429a      	cmp	r2, r3
 8008bb0:	d207      	bcs.n	8008bc2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008bb2:	4b0c      	ldr	r3, [pc, #48]	@ (8008be4 <prvAddNewTaskToReadyList+0xdc>)
 8008bb4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008bb8:	601a      	str	r2, [r3, #0]
 8008bba:	f3bf 8f4f 	dsb	sy
 8008bbe:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008bc2:	bf00      	nop
 8008bc4:	3708      	adds	r7, #8
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bd80      	pop	{r7, pc}
 8008bca:	bf00      	nop
 8008bcc:	2000bf8c 	.word	0x2000bf8c
 8008bd0:	2000bab8 	.word	0x2000bab8
 8008bd4:	2000bf98 	.word	0x2000bf98
 8008bd8:	2000bfa8 	.word	0x2000bfa8
 8008bdc:	2000bf94 	.word	0x2000bf94
 8008be0:	2000babc 	.word	0x2000babc
 8008be4:	e000ed04 	.word	0xe000ed04

08008be8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b084      	sub	sp, #16
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d018      	beq.n	8008c2c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008bfa:	4b14      	ldr	r3, [pc, #80]	@ (8008c4c <vTaskDelay+0x64>)
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d00b      	beq.n	8008c1a <vTaskDelay+0x32>
	__asm volatile
 8008c02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c06:	f383 8811 	msr	BASEPRI, r3
 8008c0a:	f3bf 8f6f 	isb	sy
 8008c0e:	f3bf 8f4f 	dsb	sy
 8008c12:	60bb      	str	r3, [r7, #8]
}
 8008c14:	bf00      	nop
 8008c16:	bf00      	nop
 8008c18:	e7fd      	b.n	8008c16 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008c1a:	f000 f883 	bl	8008d24 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008c1e:	2100      	movs	r1, #0
 8008c20:	6878      	ldr	r0, [r7, #4]
 8008c22:	f000 fd1b 	bl	800965c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008c26:	f000 f88b 	bl	8008d40 <xTaskResumeAll>
 8008c2a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d107      	bne.n	8008c42 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8008c32:	4b07      	ldr	r3, [pc, #28]	@ (8008c50 <vTaskDelay+0x68>)
 8008c34:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c38:	601a      	str	r2, [r3, #0]
 8008c3a:	f3bf 8f4f 	dsb	sy
 8008c3e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008c42:	bf00      	nop
 8008c44:	3710      	adds	r7, #16
 8008c46:	46bd      	mov	sp, r7
 8008c48:	bd80      	pop	{r7, pc}
 8008c4a:	bf00      	nop
 8008c4c:	2000bfb4 	.word	0x2000bfb4
 8008c50:	e000ed04 	.word	0xe000ed04

08008c54 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b08a      	sub	sp, #40	@ 0x28
 8008c58:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008c5e:	2300      	movs	r3, #0
 8008c60:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008c62:	463a      	mov	r2, r7
 8008c64:	1d39      	adds	r1, r7, #4
 8008c66:	f107 0308 	add.w	r3, r7, #8
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	f7ff f834 	bl	8007cd8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008c70:	6839      	ldr	r1, [r7, #0]
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	68ba      	ldr	r2, [r7, #8]
 8008c76:	9202      	str	r2, [sp, #8]
 8008c78:	9301      	str	r3, [sp, #4]
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	9300      	str	r3, [sp, #0]
 8008c7e:	2300      	movs	r3, #0
 8008c80:	460a      	mov	r2, r1
 8008c82:	4922      	ldr	r1, [pc, #136]	@ (8008d0c <vTaskStartScheduler+0xb8>)
 8008c84:	4822      	ldr	r0, [pc, #136]	@ (8008d10 <vTaskStartScheduler+0xbc>)
 8008c86:	f7ff fe09 	bl	800889c <xTaskCreateStatic>
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	4a21      	ldr	r2, [pc, #132]	@ (8008d14 <vTaskStartScheduler+0xc0>)
 8008c8e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008c90:	4b20      	ldr	r3, [pc, #128]	@ (8008d14 <vTaskStartScheduler+0xc0>)
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d002      	beq.n	8008c9e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008c98:	2301      	movs	r3, #1
 8008c9a:	617b      	str	r3, [r7, #20]
 8008c9c:	e001      	b.n	8008ca2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008ca2:	697b      	ldr	r3, [r7, #20]
 8008ca4:	2b01      	cmp	r3, #1
 8008ca6:	d102      	bne.n	8008cae <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008ca8:	f000 fd2c 	bl	8009704 <xTimerCreateTimerTask>
 8008cac:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008cae:	697b      	ldr	r3, [r7, #20]
 8008cb0:	2b01      	cmp	r3, #1
 8008cb2:	d116      	bne.n	8008ce2 <vTaskStartScheduler+0x8e>
	__asm volatile
 8008cb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cb8:	f383 8811 	msr	BASEPRI, r3
 8008cbc:	f3bf 8f6f 	isb	sy
 8008cc0:	f3bf 8f4f 	dsb	sy
 8008cc4:	613b      	str	r3, [r7, #16]
}
 8008cc6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008cc8:	4b13      	ldr	r3, [pc, #76]	@ (8008d18 <vTaskStartScheduler+0xc4>)
 8008cca:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008cce:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008cd0:	4b12      	ldr	r3, [pc, #72]	@ (8008d1c <vTaskStartScheduler+0xc8>)
 8008cd2:	2201      	movs	r2, #1
 8008cd4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008cd6:	4b12      	ldr	r3, [pc, #72]	@ (8008d20 <vTaskStartScheduler+0xcc>)
 8008cd8:	2200      	movs	r2, #0
 8008cda:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008cdc:	f001 f8f8 	bl	8009ed0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008ce0:	e00f      	b.n	8008d02 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008ce2:	697b      	ldr	r3, [r7, #20]
 8008ce4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008ce8:	d10b      	bne.n	8008d02 <vTaskStartScheduler+0xae>
	__asm volatile
 8008cea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cee:	f383 8811 	msr	BASEPRI, r3
 8008cf2:	f3bf 8f6f 	isb	sy
 8008cf6:	f3bf 8f4f 	dsb	sy
 8008cfa:	60fb      	str	r3, [r7, #12]
}
 8008cfc:	bf00      	nop
 8008cfe:	bf00      	nop
 8008d00:	e7fd      	b.n	8008cfe <vTaskStartScheduler+0xaa>
}
 8008d02:	bf00      	nop
 8008d04:	3718      	adds	r7, #24
 8008d06:	46bd      	mov	sp, r7
 8008d08:	bd80      	pop	{r7, pc}
 8008d0a:	bf00      	nop
 8008d0c:	0801e674 	.word	0x0801e674
 8008d10:	08009395 	.word	0x08009395
 8008d14:	2000bfb0 	.word	0x2000bfb0
 8008d18:	2000bfac 	.word	0x2000bfac
 8008d1c:	2000bf98 	.word	0x2000bf98
 8008d20:	2000bf90 	.word	0x2000bf90

08008d24 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008d24:	b480      	push	{r7}
 8008d26:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008d28:	4b04      	ldr	r3, [pc, #16]	@ (8008d3c <vTaskSuspendAll+0x18>)
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	3301      	adds	r3, #1
 8008d2e:	4a03      	ldr	r2, [pc, #12]	@ (8008d3c <vTaskSuspendAll+0x18>)
 8008d30:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008d32:	bf00      	nop
 8008d34:	46bd      	mov	sp, r7
 8008d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3a:	4770      	bx	lr
 8008d3c:	2000bfb4 	.word	0x2000bfb4

08008d40 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b084      	sub	sp, #16
 8008d44:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008d46:	2300      	movs	r3, #0
 8008d48:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008d4e:	4b42      	ldr	r3, [pc, #264]	@ (8008e58 <xTaskResumeAll+0x118>)
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d10b      	bne.n	8008d6e <xTaskResumeAll+0x2e>
	__asm volatile
 8008d56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d5a:	f383 8811 	msr	BASEPRI, r3
 8008d5e:	f3bf 8f6f 	isb	sy
 8008d62:	f3bf 8f4f 	dsb	sy
 8008d66:	603b      	str	r3, [r7, #0]
}
 8008d68:	bf00      	nop
 8008d6a:	bf00      	nop
 8008d6c:	e7fd      	b.n	8008d6a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008d6e:	f001 f953 	bl	800a018 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008d72:	4b39      	ldr	r3, [pc, #228]	@ (8008e58 <xTaskResumeAll+0x118>)
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	3b01      	subs	r3, #1
 8008d78:	4a37      	ldr	r2, [pc, #220]	@ (8008e58 <xTaskResumeAll+0x118>)
 8008d7a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008d7c:	4b36      	ldr	r3, [pc, #216]	@ (8008e58 <xTaskResumeAll+0x118>)
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d162      	bne.n	8008e4a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008d84:	4b35      	ldr	r3, [pc, #212]	@ (8008e5c <xTaskResumeAll+0x11c>)
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d05e      	beq.n	8008e4a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008d8c:	e02f      	b.n	8008dee <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d8e:	4b34      	ldr	r3, [pc, #208]	@ (8008e60 <xTaskResumeAll+0x120>)
 8008d90:	68db      	ldr	r3, [r3, #12]
 8008d92:	68db      	ldr	r3, [r3, #12]
 8008d94:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	3318      	adds	r3, #24
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	f7ff f85a 	bl	8007e54 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	3304      	adds	r3, #4
 8008da4:	4618      	mov	r0, r3
 8008da6:	f7ff f855 	bl	8007e54 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008dae:	4b2d      	ldr	r3, [pc, #180]	@ (8008e64 <xTaskResumeAll+0x124>)
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	429a      	cmp	r2, r3
 8008db4:	d903      	bls.n	8008dbe <xTaskResumeAll+0x7e>
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dba:	4a2a      	ldr	r2, [pc, #168]	@ (8008e64 <xTaskResumeAll+0x124>)
 8008dbc:	6013      	str	r3, [r2, #0]
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008dc2:	4613      	mov	r3, r2
 8008dc4:	009b      	lsls	r3, r3, #2
 8008dc6:	4413      	add	r3, r2
 8008dc8:	009b      	lsls	r3, r3, #2
 8008dca:	4a27      	ldr	r2, [pc, #156]	@ (8008e68 <xTaskResumeAll+0x128>)
 8008dcc:	441a      	add	r2, r3
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	3304      	adds	r3, #4
 8008dd2:	4619      	mov	r1, r3
 8008dd4:	4610      	mov	r0, r2
 8008dd6:	f7fe ffe0 	bl	8007d9a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008dde:	4b23      	ldr	r3, [pc, #140]	@ (8008e6c <xTaskResumeAll+0x12c>)
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008de4:	429a      	cmp	r2, r3
 8008de6:	d302      	bcc.n	8008dee <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8008de8:	4b21      	ldr	r3, [pc, #132]	@ (8008e70 <xTaskResumeAll+0x130>)
 8008dea:	2201      	movs	r2, #1
 8008dec:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008dee:	4b1c      	ldr	r3, [pc, #112]	@ (8008e60 <xTaskResumeAll+0x120>)
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d1cb      	bne.n	8008d8e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d001      	beq.n	8008e00 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008dfc:	f000 fb80 	bl	8009500 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008e00:	4b1c      	ldr	r3, [pc, #112]	@ (8008e74 <xTaskResumeAll+0x134>)
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d010      	beq.n	8008e2e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008e0c:	f000 f846 	bl	8008e9c <xTaskIncrementTick>
 8008e10:	4603      	mov	r3, r0
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d002      	beq.n	8008e1c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8008e16:	4b16      	ldr	r3, [pc, #88]	@ (8008e70 <xTaskResumeAll+0x130>)
 8008e18:	2201      	movs	r2, #1
 8008e1a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	3b01      	subs	r3, #1
 8008e20:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d1f1      	bne.n	8008e0c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8008e28:	4b12      	ldr	r3, [pc, #72]	@ (8008e74 <xTaskResumeAll+0x134>)
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008e2e:	4b10      	ldr	r3, [pc, #64]	@ (8008e70 <xTaskResumeAll+0x130>)
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d009      	beq.n	8008e4a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008e36:	2301      	movs	r3, #1
 8008e38:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008e3a:	4b0f      	ldr	r3, [pc, #60]	@ (8008e78 <xTaskResumeAll+0x138>)
 8008e3c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e40:	601a      	str	r2, [r3, #0]
 8008e42:	f3bf 8f4f 	dsb	sy
 8008e46:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008e4a:	f001 f917 	bl	800a07c <vPortExitCritical>

	return xAlreadyYielded;
 8008e4e:	68bb      	ldr	r3, [r7, #8]
}
 8008e50:	4618      	mov	r0, r3
 8008e52:	3710      	adds	r7, #16
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bd80      	pop	{r7, pc}
 8008e58:	2000bfb4 	.word	0x2000bfb4
 8008e5c:	2000bf8c 	.word	0x2000bf8c
 8008e60:	2000bf4c 	.word	0x2000bf4c
 8008e64:	2000bf94 	.word	0x2000bf94
 8008e68:	2000babc 	.word	0x2000babc
 8008e6c:	2000bab8 	.word	0x2000bab8
 8008e70:	2000bfa0 	.word	0x2000bfa0
 8008e74:	2000bf9c 	.word	0x2000bf9c
 8008e78:	e000ed04 	.word	0xe000ed04

08008e7c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008e7c:	b480      	push	{r7}
 8008e7e:	b083      	sub	sp, #12
 8008e80:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008e82:	4b05      	ldr	r3, [pc, #20]	@ (8008e98 <xTaskGetTickCount+0x1c>)
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008e88:	687b      	ldr	r3, [r7, #4]
}
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	370c      	adds	r7, #12
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e94:	4770      	bx	lr
 8008e96:	bf00      	nop
 8008e98:	2000bf90 	.word	0x2000bf90

08008e9c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b086      	sub	sp, #24
 8008ea0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008ea6:	4b4f      	ldr	r3, [pc, #316]	@ (8008fe4 <xTaskIncrementTick+0x148>)
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	f040 8090 	bne.w	8008fd0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008eb0:	4b4d      	ldr	r3, [pc, #308]	@ (8008fe8 <xTaskIncrementTick+0x14c>)
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	3301      	adds	r3, #1
 8008eb6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008eb8:	4a4b      	ldr	r2, [pc, #300]	@ (8008fe8 <xTaskIncrementTick+0x14c>)
 8008eba:	693b      	ldr	r3, [r7, #16]
 8008ebc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008ebe:	693b      	ldr	r3, [r7, #16]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d121      	bne.n	8008f08 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008ec4:	4b49      	ldr	r3, [pc, #292]	@ (8008fec <xTaskIncrementTick+0x150>)
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d00b      	beq.n	8008ee6 <xTaskIncrementTick+0x4a>
	__asm volatile
 8008ece:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ed2:	f383 8811 	msr	BASEPRI, r3
 8008ed6:	f3bf 8f6f 	isb	sy
 8008eda:	f3bf 8f4f 	dsb	sy
 8008ede:	603b      	str	r3, [r7, #0]
}
 8008ee0:	bf00      	nop
 8008ee2:	bf00      	nop
 8008ee4:	e7fd      	b.n	8008ee2 <xTaskIncrementTick+0x46>
 8008ee6:	4b41      	ldr	r3, [pc, #260]	@ (8008fec <xTaskIncrementTick+0x150>)
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	60fb      	str	r3, [r7, #12]
 8008eec:	4b40      	ldr	r3, [pc, #256]	@ (8008ff0 <xTaskIncrementTick+0x154>)
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	4a3e      	ldr	r2, [pc, #248]	@ (8008fec <xTaskIncrementTick+0x150>)
 8008ef2:	6013      	str	r3, [r2, #0]
 8008ef4:	4a3e      	ldr	r2, [pc, #248]	@ (8008ff0 <xTaskIncrementTick+0x154>)
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	6013      	str	r3, [r2, #0]
 8008efa:	4b3e      	ldr	r3, [pc, #248]	@ (8008ff4 <xTaskIncrementTick+0x158>)
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	3301      	adds	r3, #1
 8008f00:	4a3c      	ldr	r2, [pc, #240]	@ (8008ff4 <xTaskIncrementTick+0x158>)
 8008f02:	6013      	str	r3, [r2, #0]
 8008f04:	f000 fafc 	bl	8009500 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008f08:	4b3b      	ldr	r3, [pc, #236]	@ (8008ff8 <xTaskIncrementTick+0x15c>)
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	693a      	ldr	r2, [r7, #16]
 8008f0e:	429a      	cmp	r2, r3
 8008f10:	d349      	bcc.n	8008fa6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008f12:	4b36      	ldr	r3, [pc, #216]	@ (8008fec <xTaskIncrementTick+0x150>)
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d104      	bne.n	8008f26 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f1c:	4b36      	ldr	r3, [pc, #216]	@ (8008ff8 <xTaskIncrementTick+0x15c>)
 8008f1e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008f22:	601a      	str	r2, [r3, #0]
					break;
 8008f24:	e03f      	b.n	8008fa6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f26:	4b31      	ldr	r3, [pc, #196]	@ (8008fec <xTaskIncrementTick+0x150>)
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	68db      	ldr	r3, [r3, #12]
 8008f2c:	68db      	ldr	r3, [r3, #12]
 8008f2e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008f30:	68bb      	ldr	r3, [r7, #8]
 8008f32:	685b      	ldr	r3, [r3, #4]
 8008f34:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008f36:	693a      	ldr	r2, [r7, #16]
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	429a      	cmp	r2, r3
 8008f3c:	d203      	bcs.n	8008f46 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008f3e:	4a2e      	ldr	r2, [pc, #184]	@ (8008ff8 <xTaskIncrementTick+0x15c>)
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008f44:	e02f      	b.n	8008fa6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008f46:	68bb      	ldr	r3, [r7, #8]
 8008f48:	3304      	adds	r3, #4
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	f7fe ff82 	bl	8007e54 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008f50:	68bb      	ldr	r3, [r7, #8]
 8008f52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d004      	beq.n	8008f62 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008f58:	68bb      	ldr	r3, [r7, #8]
 8008f5a:	3318      	adds	r3, #24
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	f7fe ff79 	bl	8007e54 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008f62:	68bb      	ldr	r3, [r7, #8]
 8008f64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f66:	4b25      	ldr	r3, [pc, #148]	@ (8008ffc <xTaskIncrementTick+0x160>)
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	429a      	cmp	r2, r3
 8008f6c:	d903      	bls.n	8008f76 <xTaskIncrementTick+0xda>
 8008f6e:	68bb      	ldr	r3, [r7, #8]
 8008f70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f72:	4a22      	ldr	r2, [pc, #136]	@ (8008ffc <xTaskIncrementTick+0x160>)
 8008f74:	6013      	str	r3, [r2, #0]
 8008f76:	68bb      	ldr	r3, [r7, #8]
 8008f78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f7a:	4613      	mov	r3, r2
 8008f7c:	009b      	lsls	r3, r3, #2
 8008f7e:	4413      	add	r3, r2
 8008f80:	009b      	lsls	r3, r3, #2
 8008f82:	4a1f      	ldr	r2, [pc, #124]	@ (8009000 <xTaskIncrementTick+0x164>)
 8008f84:	441a      	add	r2, r3
 8008f86:	68bb      	ldr	r3, [r7, #8]
 8008f88:	3304      	adds	r3, #4
 8008f8a:	4619      	mov	r1, r3
 8008f8c:	4610      	mov	r0, r2
 8008f8e:	f7fe ff04 	bl	8007d9a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008f92:	68bb      	ldr	r3, [r7, #8]
 8008f94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f96:	4b1b      	ldr	r3, [pc, #108]	@ (8009004 <xTaskIncrementTick+0x168>)
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f9c:	429a      	cmp	r2, r3
 8008f9e:	d3b8      	bcc.n	8008f12 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8008fa0:	2301      	movs	r3, #1
 8008fa2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008fa4:	e7b5      	b.n	8008f12 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008fa6:	4b17      	ldr	r3, [pc, #92]	@ (8009004 <xTaskIncrementTick+0x168>)
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008fac:	4914      	ldr	r1, [pc, #80]	@ (8009000 <xTaskIncrementTick+0x164>)
 8008fae:	4613      	mov	r3, r2
 8008fb0:	009b      	lsls	r3, r3, #2
 8008fb2:	4413      	add	r3, r2
 8008fb4:	009b      	lsls	r3, r3, #2
 8008fb6:	440b      	add	r3, r1
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	2b01      	cmp	r3, #1
 8008fbc:	d901      	bls.n	8008fc2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8008fbe:	2301      	movs	r3, #1
 8008fc0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008fc2:	4b11      	ldr	r3, [pc, #68]	@ (8009008 <xTaskIncrementTick+0x16c>)
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d007      	beq.n	8008fda <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8008fca:	2301      	movs	r3, #1
 8008fcc:	617b      	str	r3, [r7, #20]
 8008fce:	e004      	b.n	8008fda <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008fd0:	4b0e      	ldr	r3, [pc, #56]	@ (800900c <xTaskIncrementTick+0x170>)
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	3301      	adds	r3, #1
 8008fd6:	4a0d      	ldr	r2, [pc, #52]	@ (800900c <xTaskIncrementTick+0x170>)
 8008fd8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008fda:	697b      	ldr	r3, [r7, #20]
}
 8008fdc:	4618      	mov	r0, r3
 8008fde:	3718      	adds	r7, #24
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	bd80      	pop	{r7, pc}
 8008fe4:	2000bfb4 	.word	0x2000bfb4
 8008fe8:	2000bf90 	.word	0x2000bf90
 8008fec:	2000bf44 	.word	0x2000bf44
 8008ff0:	2000bf48 	.word	0x2000bf48
 8008ff4:	2000bfa4 	.word	0x2000bfa4
 8008ff8:	2000bfac 	.word	0x2000bfac
 8008ffc:	2000bf94 	.word	0x2000bf94
 8009000:	2000babc 	.word	0x2000babc
 8009004:	2000bab8 	.word	0x2000bab8
 8009008:	2000bfa0 	.word	0x2000bfa0
 800900c:	2000bf9c 	.word	0x2000bf9c

08009010 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009010:	b480      	push	{r7}
 8009012:	b085      	sub	sp, #20
 8009014:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009016:	4b28      	ldr	r3, [pc, #160]	@ (80090b8 <vTaskSwitchContext+0xa8>)
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d003      	beq.n	8009026 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800901e:	4b27      	ldr	r3, [pc, #156]	@ (80090bc <vTaskSwitchContext+0xac>)
 8009020:	2201      	movs	r2, #1
 8009022:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009024:	e042      	b.n	80090ac <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8009026:	4b25      	ldr	r3, [pc, #148]	@ (80090bc <vTaskSwitchContext+0xac>)
 8009028:	2200      	movs	r2, #0
 800902a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800902c:	4b24      	ldr	r3, [pc, #144]	@ (80090c0 <vTaskSwitchContext+0xb0>)
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	60fb      	str	r3, [r7, #12]
 8009032:	e011      	b.n	8009058 <vTaskSwitchContext+0x48>
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d10b      	bne.n	8009052 <vTaskSwitchContext+0x42>
	__asm volatile
 800903a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800903e:	f383 8811 	msr	BASEPRI, r3
 8009042:	f3bf 8f6f 	isb	sy
 8009046:	f3bf 8f4f 	dsb	sy
 800904a:	607b      	str	r3, [r7, #4]
}
 800904c:	bf00      	nop
 800904e:	bf00      	nop
 8009050:	e7fd      	b.n	800904e <vTaskSwitchContext+0x3e>
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	3b01      	subs	r3, #1
 8009056:	60fb      	str	r3, [r7, #12]
 8009058:	491a      	ldr	r1, [pc, #104]	@ (80090c4 <vTaskSwitchContext+0xb4>)
 800905a:	68fa      	ldr	r2, [r7, #12]
 800905c:	4613      	mov	r3, r2
 800905e:	009b      	lsls	r3, r3, #2
 8009060:	4413      	add	r3, r2
 8009062:	009b      	lsls	r3, r3, #2
 8009064:	440b      	add	r3, r1
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d0e3      	beq.n	8009034 <vTaskSwitchContext+0x24>
 800906c:	68fa      	ldr	r2, [r7, #12]
 800906e:	4613      	mov	r3, r2
 8009070:	009b      	lsls	r3, r3, #2
 8009072:	4413      	add	r3, r2
 8009074:	009b      	lsls	r3, r3, #2
 8009076:	4a13      	ldr	r2, [pc, #76]	@ (80090c4 <vTaskSwitchContext+0xb4>)
 8009078:	4413      	add	r3, r2
 800907a:	60bb      	str	r3, [r7, #8]
 800907c:	68bb      	ldr	r3, [r7, #8]
 800907e:	685b      	ldr	r3, [r3, #4]
 8009080:	685a      	ldr	r2, [r3, #4]
 8009082:	68bb      	ldr	r3, [r7, #8]
 8009084:	605a      	str	r2, [r3, #4]
 8009086:	68bb      	ldr	r3, [r7, #8]
 8009088:	685a      	ldr	r2, [r3, #4]
 800908a:	68bb      	ldr	r3, [r7, #8]
 800908c:	3308      	adds	r3, #8
 800908e:	429a      	cmp	r2, r3
 8009090:	d104      	bne.n	800909c <vTaskSwitchContext+0x8c>
 8009092:	68bb      	ldr	r3, [r7, #8]
 8009094:	685b      	ldr	r3, [r3, #4]
 8009096:	685a      	ldr	r2, [r3, #4]
 8009098:	68bb      	ldr	r3, [r7, #8]
 800909a:	605a      	str	r2, [r3, #4]
 800909c:	68bb      	ldr	r3, [r7, #8]
 800909e:	685b      	ldr	r3, [r3, #4]
 80090a0:	68db      	ldr	r3, [r3, #12]
 80090a2:	4a09      	ldr	r2, [pc, #36]	@ (80090c8 <vTaskSwitchContext+0xb8>)
 80090a4:	6013      	str	r3, [r2, #0]
 80090a6:	4a06      	ldr	r2, [pc, #24]	@ (80090c0 <vTaskSwitchContext+0xb0>)
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	6013      	str	r3, [r2, #0]
}
 80090ac:	bf00      	nop
 80090ae:	3714      	adds	r7, #20
 80090b0:	46bd      	mov	sp, r7
 80090b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b6:	4770      	bx	lr
 80090b8:	2000bfb4 	.word	0x2000bfb4
 80090bc:	2000bfa0 	.word	0x2000bfa0
 80090c0:	2000bf94 	.word	0x2000bf94
 80090c4:	2000babc 	.word	0x2000babc
 80090c8:	2000bab8 	.word	0x2000bab8

080090cc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b084      	sub	sp, #16
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
 80090d4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d10b      	bne.n	80090f4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80090dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090e0:	f383 8811 	msr	BASEPRI, r3
 80090e4:	f3bf 8f6f 	isb	sy
 80090e8:	f3bf 8f4f 	dsb	sy
 80090ec:	60fb      	str	r3, [r7, #12]
}
 80090ee:	bf00      	nop
 80090f0:	bf00      	nop
 80090f2:	e7fd      	b.n	80090f0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80090f4:	4b07      	ldr	r3, [pc, #28]	@ (8009114 <vTaskPlaceOnEventList+0x48>)
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	3318      	adds	r3, #24
 80090fa:	4619      	mov	r1, r3
 80090fc:	6878      	ldr	r0, [r7, #4]
 80090fe:	f7fe fe70 	bl	8007de2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009102:	2101      	movs	r1, #1
 8009104:	6838      	ldr	r0, [r7, #0]
 8009106:	f000 faa9 	bl	800965c <prvAddCurrentTaskToDelayedList>
}
 800910a:	bf00      	nop
 800910c:	3710      	adds	r7, #16
 800910e:	46bd      	mov	sp, r7
 8009110:	bd80      	pop	{r7, pc}
 8009112:	bf00      	nop
 8009114:	2000bab8 	.word	0x2000bab8

08009118 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009118:	b580      	push	{r7, lr}
 800911a:	b086      	sub	sp, #24
 800911c:	af00      	add	r7, sp, #0
 800911e:	60f8      	str	r0, [r7, #12]
 8009120:	60b9      	str	r1, [r7, #8]
 8009122:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d10b      	bne.n	8009142 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800912a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800912e:	f383 8811 	msr	BASEPRI, r3
 8009132:	f3bf 8f6f 	isb	sy
 8009136:	f3bf 8f4f 	dsb	sy
 800913a:	617b      	str	r3, [r7, #20]
}
 800913c:	bf00      	nop
 800913e:	bf00      	nop
 8009140:	e7fd      	b.n	800913e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009142:	4b0a      	ldr	r3, [pc, #40]	@ (800916c <vTaskPlaceOnEventListRestricted+0x54>)
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	3318      	adds	r3, #24
 8009148:	4619      	mov	r1, r3
 800914a:	68f8      	ldr	r0, [r7, #12]
 800914c:	f7fe fe25 	bl	8007d9a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d002      	beq.n	800915c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8009156:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800915a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800915c:	6879      	ldr	r1, [r7, #4]
 800915e:	68b8      	ldr	r0, [r7, #8]
 8009160:	f000 fa7c 	bl	800965c <prvAddCurrentTaskToDelayedList>
	}
 8009164:	bf00      	nop
 8009166:	3718      	adds	r7, #24
 8009168:	46bd      	mov	sp, r7
 800916a:	bd80      	pop	{r7, pc}
 800916c:	2000bab8 	.word	0x2000bab8

08009170 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b086      	sub	sp, #24
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	68db      	ldr	r3, [r3, #12]
 800917c:	68db      	ldr	r3, [r3, #12]
 800917e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009180:	693b      	ldr	r3, [r7, #16]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d10b      	bne.n	800919e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8009186:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800918a:	f383 8811 	msr	BASEPRI, r3
 800918e:	f3bf 8f6f 	isb	sy
 8009192:	f3bf 8f4f 	dsb	sy
 8009196:	60fb      	str	r3, [r7, #12]
}
 8009198:	bf00      	nop
 800919a:	bf00      	nop
 800919c:	e7fd      	b.n	800919a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800919e:	693b      	ldr	r3, [r7, #16]
 80091a0:	3318      	adds	r3, #24
 80091a2:	4618      	mov	r0, r3
 80091a4:	f7fe fe56 	bl	8007e54 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80091a8:	4b1d      	ldr	r3, [pc, #116]	@ (8009220 <xTaskRemoveFromEventList+0xb0>)
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d11d      	bne.n	80091ec <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80091b0:	693b      	ldr	r3, [r7, #16]
 80091b2:	3304      	adds	r3, #4
 80091b4:	4618      	mov	r0, r3
 80091b6:	f7fe fe4d 	bl	8007e54 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80091ba:	693b      	ldr	r3, [r7, #16]
 80091bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091be:	4b19      	ldr	r3, [pc, #100]	@ (8009224 <xTaskRemoveFromEventList+0xb4>)
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	429a      	cmp	r2, r3
 80091c4:	d903      	bls.n	80091ce <xTaskRemoveFromEventList+0x5e>
 80091c6:	693b      	ldr	r3, [r7, #16]
 80091c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091ca:	4a16      	ldr	r2, [pc, #88]	@ (8009224 <xTaskRemoveFromEventList+0xb4>)
 80091cc:	6013      	str	r3, [r2, #0]
 80091ce:	693b      	ldr	r3, [r7, #16]
 80091d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091d2:	4613      	mov	r3, r2
 80091d4:	009b      	lsls	r3, r3, #2
 80091d6:	4413      	add	r3, r2
 80091d8:	009b      	lsls	r3, r3, #2
 80091da:	4a13      	ldr	r2, [pc, #76]	@ (8009228 <xTaskRemoveFromEventList+0xb8>)
 80091dc:	441a      	add	r2, r3
 80091de:	693b      	ldr	r3, [r7, #16]
 80091e0:	3304      	adds	r3, #4
 80091e2:	4619      	mov	r1, r3
 80091e4:	4610      	mov	r0, r2
 80091e6:	f7fe fdd8 	bl	8007d9a <vListInsertEnd>
 80091ea:	e005      	b.n	80091f8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80091ec:	693b      	ldr	r3, [r7, #16]
 80091ee:	3318      	adds	r3, #24
 80091f0:	4619      	mov	r1, r3
 80091f2:	480e      	ldr	r0, [pc, #56]	@ (800922c <xTaskRemoveFromEventList+0xbc>)
 80091f4:	f7fe fdd1 	bl	8007d9a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80091f8:	693b      	ldr	r3, [r7, #16]
 80091fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091fc:	4b0c      	ldr	r3, [pc, #48]	@ (8009230 <xTaskRemoveFromEventList+0xc0>)
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009202:	429a      	cmp	r2, r3
 8009204:	d905      	bls.n	8009212 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009206:	2301      	movs	r3, #1
 8009208:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800920a:	4b0a      	ldr	r3, [pc, #40]	@ (8009234 <xTaskRemoveFromEventList+0xc4>)
 800920c:	2201      	movs	r2, #1
 800920e:	601a      	str	r2, [r3, #0]
 8009210:	e001      	b.n	8009216 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8009212:	2300      	movs	r3, #0
 8009214:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009216:	697b      	ldr	r3, [r7, #20]
}
 8009218:	4618      	mov	r0, r3
 800921a:	3718      	adds	r7, #24
 800921c:	46bd      	mov	sp, r7
 800921e:	bd80      	pop	{r7, pc}
 8009220:	2000bfb4 	.word	0x2000bfb4
 8009224:	2000bf94 	.word	0x2000bf94
 8009228:	2000babc 	.word	0x2000babc
 800922c:	2000bf4c 	.word	0x2000bf4c
 8009230:	2000bab8 	.word	0x2000bab8
 8009234:	2000bfa0 	.word	0x2000bfa0

08009238 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b084      	sub	sp, #16
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d10b      	bne.n	800925e <vTaskSetTimeOutState+0x26>
	__asm volatile
 8009246:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800924a:	f383 8811 	msr	BASEPRI, r3
 800924e:	f3bf 8f6f 	isb	sy
 8009252:	f3bf 8f4f 	dsb	sy
 8009256:	60fb      	str	r3, [r7, #12]
}
 8009258:	bf00      	nop
 800925a:	bf00      	nop
 800925c:	e7fd      	b.n	800925a <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800925e:	f000 fedb 	bl	800a018 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009262:	4b07      	ldr	r3, [pc, #28]	@ (8009280 <vTaskSetTimeOutState+0x48>)
 8009264:	681a      	ldr	r2, [r3, #0]
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800926a:	4b06      	ldr	r3, [pc, #24]	@ (8009284 <vTaskSetTimeOutState+0x4c>)
 800926c:	681a      	ldr	r2, [r3, #0]
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8009272:	f000 ff03 	bl	800a07c <vPortExitCritical>
}
 8009276:	bf00      	nop
 8009278:	3710      	adds	r7, #16
 800927a:	46bd      	mov	sp, r7
 800927c:	bd80      	pop	{r7, pc}
 800927e:	bf00      	nop
 8009280:	2000bfa4 	.word	0x2000bfa4
 8009284:	2000bf90 	.word	0x2000bf90

08009288 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009288:	b480      	push	{r7}
 800928a:	b083      	sub	sp, #12
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009290:	4b06      	ldr	r3, [pc, #24]	@ (80092ac <vTaskInternalSetTimeOutState+0x24>)
 8009292:	681a      	ldr	r2, [r3, #0]
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009298:	4b05      	ldr	r3, [pc, #20]	@ (80092b0 <vTaskInternalSetTimeOutState+0x28>)
 800929a:	681a      	ldr	r2, [r3, #0]
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	605a      	str	r2, [r3, #4]
}
 80092a0:	bf00      	nop
 80092a2:	370c      	adds	r7, #12
 80092a4:	46bd      	mov	sp, r7
 80092a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092aa:	4770      	bx	lr
 80092ac:	2000bfa4 	.word	0x2000bfa4
 80092b0:	2000bf90 	.word	0x2000bf90

080092b4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b088      	sub	sp, #32
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]
 80092bc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d10b      	bne.n	80092dc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80092c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092c8:	f383 8811 	msr	BASEPRI, r3
 80092cc:	f3bf 8f6f 	isb	sy
 80092d0:	f3bf 8f4f 	dsb	sy
 80092d4:	613b      	str	r3, [r7, #16]
}
 80092d6:	bf00      	nop
 80092d8:	bf00      	nop
 80092da:	e7fd      	b.n	80092d8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80092dc:	683b      	ldr	r3, [r7, #0]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d10b      	bne.n	80092fa <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80092e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092e6:	f383 8811 	msr	BASEPRI, r3
 80092ea:	f3bf 8f6f 	isb	sy
 80092ee:	f3bf 8f4f 	dsb	sy
 80092f2:	60fb      	str	r3, [r7, #12]
}
 80092f4:	bf00      	nop
 80092f6:	bf00      	nop
 80092f8:	e7fd      	b.n	80092f6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80092fa:	f000 fe8d 	bl	800a018 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80092fe:	4b1d      	ldr	r3, [pc, #116]	@ (8009374 <xTaskCheckForTimeOut+0xc0>)
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	685b      	ldr	r3, [r3, #4]
 8009308:	69ba      	ldr	r2, [r7, #24]
 800930a:	1ad3      	subs	r3, r2, r3
 800930c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800930e:	683b      	ldr	r3, [r7, #0]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009316:	d102      	bne.n	800931e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009318:	2300      	movs	r3, #0
 800931a:	61fb      	str	r3, [r7, #28]
 800931c:	e023      	b.n	8009366 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681a      	ldr	r2, [r3, #0]
 8009322:	4b15      	ldr	r3, [pc, #84]	@ (8009378 <xTaskCheckForTimeOut+0xc4>)
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	429a      	cmp	r2, r3
 8009328:	d007      	beq.n	800933a <xTaskCheckForTimeOut+0x86>
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	685b      	ldr	r3, [r3, #4]
 800932e:	69ba      	ldr	r2, [r7, #24]
 8009330:	429a      	cmp	r2, r3
 8009332:	d302      	bcc.n	800933a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009334:	2301      	movs	r3, #1
 8009336:	61fb      	str	r3, [r7, #28]
 8009338:	e015      	b.n	8009366 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800933a:	683b      	ldr	r3, [r7, #0]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	697a      	ldr	r2, [r7, #20]
 8009340:	429a      	cmp	r2, r3
 8009342:	d20b      	bcs.n	800935c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009344:	683b      	ldr	r3, [r7, #0]
 8009346:	681a      	ldr	r2, [r3, #0]
 8009348:	697b      	ldr	r3, [r7, #20]
 800934a:	1ad2      	subs	r2, r2, r3
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009350:	6878      	ldr	r0, [r7, #4]
 8009352:	f7ff ff99 	bl	8009288 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009356:	2300      	movs	r3, #0
 8009358:	61fb      	str	r3, [r7, #28]
 800935a:	e004      	b.n	8009366 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	2200      	movs	r2, #0
 8009360:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009362:	2301      	movs	r3, #1
 8009364:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009366:	f000 fe89 	bl	800a07c <vPortExitCritical>

	return xReturn;
 800936a:	69fb      	ldr	r3, [r7, #28]
}
 800936c:	4618      	mov	r0, r3
 800936e:	3720      	adds	r7, #32
 8009370:	46bd      	mov	sp, r7
 8009372:	bd80      	pop	{r7, pc}
 8009374:	2000bf90 	.word	0x2000bf90
 8009378:	2000bfa4 	.word	0x2000bfa4

0800937c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800937c:	b480      	push	{r7}
 800937e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009380:	4b03      	ldr	r3, [pc, #12]	@ (8009390 <vTaskMissedYield+0x14>)
 8009382:	2201      	movs	r2, #1
 8009384:	601a      	str	r2, [r3, #0]
}
 8009386:	bf00      	nop
 8009388:	46bd      	mov	sp, r7
 800938a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938e:	4770      	bx	lr
 8009390:	2000bfa0 	.word	0x2000bfa0

08009394 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009394:	b580      	push	{r7, lr}
 8009396:	b082      	sub	sp, #8
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800939c:	f000 f852 	bl	8009444 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80093a0:	4b06      	ldr	r3, [pc, #24]	@ (80093bc <prvIdleTask+0x28>)
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	2b01      	cmp	r3, #1
 80093a6:	d9f9      	bls.n	800939c <prvIdleTask+0x8>
			{
				taskYIELD();
 80093a8:	4b05      	ldr	r3, [pc, #20]	@ (80093c0 <prvIdleTask+0x2c>)
 80093aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80093ae:	601a      	str	r2, [r3, #0]
 80093b0:	f3bf 8f4f 	dsb	sy
 80093b4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80093b8:	e7f0      	b.n	800939c <prvIdleTask+0x8>
 80093ba:	bf00      	nop
 80093bc:	2000babc 	.word	0x2000babc
 80093c0:	e000ed04 	.word	0xe000ed04

080093c4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b082      	sub	sp, #8
 80093c8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80093ca:	2300      	movs	r3, #0
 80093cc:	607b      	str	r3, [r7, #4]
 80093ce:	e00c      	b.n	80093ea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80093d0:	687a      	ldr	r2, [r7, #4]
 80093d2:	4613      	mov	r3, r2
 80093d4:	009b      	lsls	r3, r3, #2
 80093d6:	4413      	add	r3, r2
 80093d8:	009b      	lsls	r3, r3, #2
 80093da:	4a12      	ldr	r2, [pc, #72]	@ (8009424 <prvInitialiseTaskLists+0x60>)
 80093dc:	4413      	add	r3, r2
 80093de:	4618      	mov	r0, r3
 80093e0:	f7fe fcae 	bl	8007d40 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	3301      	adds	r3, #1
 80093e8:	607b      	str	r3, [r7, #4]
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	2b37      	cmp	r3, #55	@ 0x37
 80093ee:	d9ef      	bls.n	80093d0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80093f0:	480d      	ldr	r0, [pc, #52]	@ (8009428 <prvInitialiseTaskLists+0x64>)
 80093f2:	f7fe fca5 	bl	8007d40 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80093f6:	480d      	ldr	r0, [pc, #52]	@ (800942c <prvInitialiseTaskLists+0x68>)
 80093f8:	f7fe fca2 	bl	8007d40 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80093fc:	480c      	ldr	r0, [pc, #48]	@ (8009430 <prvInitialiseTaskLists+0x6c>)
 80093fe:	f7fe fc9f 	bl	8007d40 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009402:	480c      	ldr	r0, [pc, #48]	@ (8009434 <prvInitialiseTaskLists+0x70>)
 8009404:	f7fe fc9c 	bl	8007d40 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009408:	480b      	ldr	r0, [pc, #44]	@ (8009438 <prvInitialiseTaskLists+0x74>)
 800940a:	f7fe fc99 	bl	8007d40 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800940e:	4b0b      	ldr	r3, [pc, #44]	@ (800943c <prvInitialiseTaskLists+0x78>)
 8009410:	4a05      	ldr	r2, [pc, #20]	@ (8009428 <prvInitialiseTaskLists+0x64>)
 8009412:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009414:	4b0a      	ldr	r3, [pc, #40]	@ (8009440 <prvInitialiseTaskLists+0x7c>)
 8009416:	4a05      	ldr	r2, [pc, #20]	@ (800942c <prvInitialiseTaskLists+0x68>)
 8009418:	601a      	str	r2, [r3, #0]
}
 800941a:	bf00      	nop
 800941c:	3708      	adds	r7, #8
 800941e:	46bd      	mov	sp, r7
 8009420:	bd80      	pop	{r7, pc}
 8009422:	bf00      	nop
 8009424:	2000babc 	.word	0x2000babc
 8009428:	2000bf1c 	.word	0x2000bf1c
 800942c:	2000bf30 	.word	0x2000bf30
 8009430:	2000bf4c 	.word	0x2000bf4c
 8009434:	2000bf60 	.word	0x2000bf60
 8009438:	2000bf78 	.word	0x2000bf78
 800943c:	2000bf44 	.word	0x2000bf44
 8009440:	2000bf48 	.word	0x2000bf48

08009444 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009444:	b580      	push	{r7, lr}
 8009446:	b082      	sub	sp, #8
 8009448:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800944a:	e019      	b.n	8009480 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800944c:	f000 fde4 	bl	800a018 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009450:	4b10      	ldr	r3, [pc, #64]	@ (8009494 <prvCheckTasksWaitingTermination+0x50>)
 8009452:	68db      	ldr	r3, [r3, #12]
 8009454:	68db      	ldr	r3, [r3, #12]
 8009456:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	3304      	adds	r3, #4
 800945c:	4618      	mov	r0, r3
 800945e:	f7fe fcf9 	bl	8007e54 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009462:	4b0d      	ldr	r3, [pc, #52]	@ (8009498 <prvCheckTasksWaitingTermination+0x54>)
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	3b01      	subs	r3, #1
 8009468:	4a0b      	ldr	r2, [pc, #44]	@ (8009498 <prvCheckTasksWaitingTermination+0x54>)
 800946a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800946c:	4b0b      	ldr	r3, [pc, #44]	@ (800949c <prvCheckTasksWaitingTermination+0x58>)
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	3b01      	subs	r3, #1
 8009472:	4a0a      	ldr	r2, [pc, #40]	@ (800949c <prvCheckTasksWaitingTermination+0x58>)
 8009474:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009476:	f000 fe01 	bl	800a07c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800947a:	6878      	ldr	r0, [r7, #4]
 800947c:	f000 f810 	bl	80094a0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009480:	4b06      	ldr	r3, [pc, #24]	@ (800949c <prvCheckTasksWaitingTermination+0x58>)
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d1e1      	bne.n	800944c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009488:	bf00      	nop
 800948a:	bf00      	nop
 800948c:	3708      	adds	r7, #8
 800948e:	46bd      	mov	sp, r7
 8009490:	bd80      	pop	{r7, pc}
 8009492:	bf00      	nop
 8009494:	2000bf60 	.word	0x2000bf60
 8009498:	2000bf8c 	.word	0x2000bf8c
 800949c:	2000bf74 	.word	0x2000bf74

080094a0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b084      	sub	sp, #16
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d108      	bne.n	80094c4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094b6:	4618      	mov	r0, r3
 80094b8:	f000 ff9e 	bl	800a3f8 <vPortFree>
				vPortFree( pxTCB );
 80094bc:	6878      	ldr	r0, [r7, #4]
 80094be:	f000 ff9b 	bl	800a3f8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80094c2:	e019      	b.n	80094f8 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80094ca:	2b01      	cmp	r3, #1
 80094cc:	d103      	bne.n	80094d6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80094ce:	6878      	ldr	r0, [r7, #4]
 80094d0:	f000 ff92 	bl	800a3f8 <vPortFree>
	}
 80094d4:	e010      	b.n	80094f8 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80094dc:	2b02      	cmp	r3, #2
 80094de:	d00b      	beq.n	80094f8 <prvDeleteTCB+0x58>
	__asm volatile
 80094e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094e4:	f383 8811 	msr	BASEPRI, r3
 80094e8:	f3bf 8f6f 	isb	sy
 80094ec:	f3bf 8f4f 	dsb	sy
 80094f0:	60fb      	str	r3, [r7, #12]
}
 80094f2:	bf00      	nop
 80094f4:	bf00      	nop
 80094f6:	e7fd      	b.n	80094f4 <prvDeleteTCB+0x54>
	}
 80094f8:	bf00      	nop
 80094fa:	3710      	adds	r7, #16
 80094fc:	46bd      	mov	sp, r7
 80094fe:	bd80      	pop	{r7, pc}

08009500 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009500:	b480      	push	{r7}
 8009502:	b083      	sub	sp, #12
 8009504:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009506:	4b0c      	ldr	r3, [pc, #48]	@ (8009538 <prvResetNextTaskUnblockTime+0x38>)
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	2b00      	cmp	r3, #0
 800950e:	d104      	bne.n	800951a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009510:	4b0a      	ldr	r3, [pc, #40]	@ (800953c <prvResetNextTaskUnblockTime+0x3c>)
 8009512:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009516:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009518:	e008      	b.n	800952c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800951a:	4b07      	ldr	r3, [pc, #28]	@ (8009538 <prvResetNextTaskUnblockTime+0x38>)
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	68db      	ldr	r3, [r3, #12]
 8009520:	68db      	ldr	r3, [r3, #12]
 8009522:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	685b      	ldr	r3, [r3, #4]
 8009528:	4a04      	ldr	r2, [pc, #16]	@ (800953c <prvResetNextTaskUnblockTime+0x3c>)
 800952a:	6013      	str	r3, [r2, #0]
}
 800952c:	bf00      	nop
 800952e:	370c      	adds	r7, #12
 8009530:	46bd      	mov	sp, r7
 8009532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009536:	4770      	bx	lr
 8009538:	2000bf44 	.word	0x2000bf44
 800953c:	2000bfac 	.word	0x2000bfac

08009540 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009540:	b480      	push	{r7}
 8009542:	b083      	sub	sp, #12
 8009544:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009546:	4b0b      	ldr	r3, [pc, #44]	@ (8009574 <xTaskGetSchedulerState+0x34>)
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d102      	bne.n	8009554 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800954e:	2301      	movs	r3, #1
 8009550:	607b      	str	r3, [r7, #4]
 8009552:	e008      	b.n	8009566 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009554:	4b08      	ldr	r3, [pc, #32]	@ (8009578 <xTaskGetSchedulerState+0x38>)
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	2b00      	cmp	r3, #0
 800955a:	d102      	bne.n	8009562 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800955c:	2302      	movs	r3, #2
 800955e:	607b      	str	r3, [r7, #4]
 8009560:	e001      	b.n	8009566 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009562:	2300      	movs	r3, #0
 8009564:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009566:	687b      	ldr	r3, [r7, #4]
	}
 8009568:	4618      	mov	r0, r3
 800956a:	370c      	adds	r7, #12
 800956c:	46bd      	mov	sp, r7
 800956e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009572:	4770      	bx	lr
 8009574:	2000bf98 	.word	0x2000bf98
 8009578:	2000bfb4 	.word	0x2000bfb4

0800957c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800957c:	b580      	push	{r7, lr}
 800957e:	b086      	sub	sp, #24
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009588:	2300      	movs	r3, #0
 800958a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d058      	beq.n	8009644 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009592:	4b2f      	ldr	r3, [pc, #188]	@ (8009650 <xTaskPriorityDisinherit+0xd4>)
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	693a      	ldr	r2, [r7, #16]
 8009598:	429a      	cmp	r2, r3
 800959a:	d00b      	beq.n	80095b4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800959c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095a0:	f383 8811 	msr	BASEPRI, r3
 80095a4:	f3bf 8f6f 	isb	sy
 80095a8:	f3bf 8f4f 	dsb	sy
 80095ac:	60fb      	str	r3, [r7, #12]
}
 80095ae:	bf00      	nop
 80095b0:	bf00      	nop
 80095b2:	e7fd      	b.n	80095b0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80095b4:	693b      	ldr	r3, [r7, #16]
 80095b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d10b      	bne.n	80095d4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80095bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095c0:	f383 8811 	msr	BASEPRI, r3
 80095c4:	f3bf 8f6f 	isb	sy
 80095c8:	f3bf 8f4f 	dsb	sy
 80095cc:	60bb      	str	r3, [r7, #8]
}
 80095ce:	bf00      	nop
 80095d0:	bf00      	nop
 80095d2:	e7fd      	b.n	80095d0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80095d4:	693b      	ldr	r3, [r7, #16]
 80095d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80095d8:	1e5a      	subs	r2, r3, #1
 80095da:	693b      	ldr	r3, [r7, #16]
 80095dc:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80095de:	693b      	ldr	r3, [r7, #16]
 80095e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80095e2:	693b      	ldr	r3, [r7, #16]
 80095e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80095e6:	429a      	cmp	r2, r3
 80095e8:	d02c      	beq.n	8009644 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80095ea:	693b      	ldr	r3, [r7, #16]
 80095ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d128      	bne.n	8009644 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80095f2:	693b      	ldr	r3, [r7, #16]
 80095f4:	3304      	adds	r3, #4
 80095f6:	4618      	mov	r0, r3
 80095f8:	f7fe fc2c 	bl	8007e54 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80095fc:	693b      	ldr	r3, [r7, #16]
 80095fe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009600:	693b      	ldr	r3, [r7, #16]
 8009602:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009604:	693b      	ldr	r3, [r7, #16]
 8009606:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009608:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800960c:	693b      	ldr	r3, [r7, #16]
 800960e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009610:	693b      	ldr	r3, [r7, #16]
 8009612:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009614:	4b0f      	ldr	r3, [pc, #60]	@ (8009654 <xTaskPriorityDisinherit+0xd8>)
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	429a      	cmp	r2, r3
 800961a:	d903      	bls.n	8009624 <xTaskPriorityDisinherit+0xa8>
 800961c:	693b      	ldr	r3, [r7, #16]
 800961e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009620:	4a0c      	ldr	r2, [pc, #48]	@ (8009654 <xTaskPriorityDisinherit+0xd8>)
 8009622:	6013      	str	r3, [r2, #0]
 8009624:	693b      	ldr	r3, [r7, #16]
 8009626:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009628:	4613      	mov	r3, r2
 800962a:	009b      	lsls	r3, r3, #2
 800962c:	4413      	add	r3, r2
 800962e:	009b      	lsls	r3, r3, #2
 8009630:	4a09      	ldr	r2, [pc, #36]	@ (8009658 <xTaskPriorityDisinherit+0xdc>)
 8009632:	441a      	add	r2, r3
 8009634:	693b      	ldr	r3, [r7, #16]
 8009636:	3304      	adds	r3, #4
 8009638:	4619      	mov	r1, r3
 800963a:	4610      	mov	r0, r2
 800963c:	f7fe fbad 	bl	8007d9a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009640:	2301      	movs	r3, #1
 8009642:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009644:	697b      	ldr	r3, [r7, #20]
	}
 8009646:	4618      	mov	r0, r3
 8009648:	3718      	adds	r7, #24
 800964a:	46bd      	mov	sp, r7
 800964c:	bd80      	pop	{r7, pc}
 800964e:	bf00      	nop
 8009650:	2000bab8 	.word	0x2000bab8
 8009654:	2000bf94 	.word	0x2000bf94
 8009658:	2000babc 	.word	0x2000babc

0800965c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b084      	sub	sp, #16
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
 8009664:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009666:	4b21      	ldr	r3, [pc, #132]	@ (80096ec <prvAddCurrentTaskToDelayedList+0x90>)
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800966c:	4b20      	ldr	r3, [pc, #128]	@ (80096f0 <prvAddCurrentTaskToDelayedList+0x94>)
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	3304      	adds	r3, #4
 8009672:	4618      	mov	r0, r3
 8009674:	f7fe fbee 	bl	8007e54 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800967e:	d10a      	bne.n	8009696 <prvAddCurrentTaskToDelayedList+0x3a>
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d007      	beq.n	8009696 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009686:	4b1a      	ldr	r3, [pc, #104]	@ (80096f0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	3304      	adds	r3, #4
 800968c:	4619      	mov	r1, r3
 800968e:	4819      	ldr	r0, [pc, #100]	@ (80096f4 <prvAddCurrentTaskToDelayedList+0x98>)
 8009690:	f7fe fb83 	bl	8007d9a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009694:	e026      	b.n	80096e4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009696:	68fa      	ldr	r2, [r7, #12]
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	4413      	add	r3, r2
 800969c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800969e:	4b14      	ldr	r3, [pc, #80]	@ (80096f0 <prvAddCurrentTaskToDelayedList+0x94>)
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	68ba      	ldr	r2, [r7, #8]
 80096a4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80096a6:	68ba      	ldr	r2, [r7, #8]
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	429a      	cmp	r2, r3
 80096ac:	d209      	bcs.n	80096c2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80096ae:	4b12      	ldr	r3, [pc, #72]	@ (80096f8 <prvAddCurrentTaskToDelayedList+0x9c>)
 80096b0:	681a      	ldr	r2, [r3, #0]
 80096b2:	4b0f      	ldr	r3, [pc, #60]	@ (80096f0 <prvAddCurrentTaskToDelayedList+0x94>)
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	3304      	adds	r3, #4
 80096b8:	4619      	mov	r1, r3
 80096ba:	4610      	mov	r0, r2
 80096bc:	f7fe fb91 	bl	8007de2 <vListInsert>
}
 80096c0:	e010      	b.n	80096e4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80096c2:	4b0e      	ldr	r3, [pc, #56]	@ (80096fc <prvAddCurrentTaskToDelayedList+0xa0>)
 80096c4:	681a      	ldr	r2, [r3, #0]
 80096c6:	4b0a      	ldr	r3, [pc, #40]	@ (80096f0 <prvAddCurrentTaskToDelayedList+0x94>)
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	3304      	adds	r3, #4
 80096cc:	4619      	mov	r1, r3
 80096ce:	4610      	mov	r0, r2
 80096d0:	f7fe fb87 	bl	8007de2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80096d4:	4b0a      	ldr	r3, [pc, #40]	@ (8009700 <prvAddCurrentTaskToDelayedList+0xa4>)
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	68ba      	ldr	r2, [r7, #8]
 80096da:	429a      	cmp	r2, r3
 80096dc:	d202      	bcs.n	80096e4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80096de:	4a08      	ldr	r2, [pc, #32]	@ (8009700 <prvAddCurrentTaskToDelayedList+0xa4>)
 80096e0:	68bb      	ldr	r3, [r7, #8]
 80096e2:	6013      	str	r3, [r2, #0]
}
 80096e4:	bf00      	nop
 80096e6:	3710      	adds	r7, #16
 80096e8:	46bd      	mov	sp, r7
 80096ea:	bd80      	pop	{r7, pc}
 80096ec:	2000bf90 	.word	0x2000bf90
 80096f0:	2000bab8 	.word	0x2000bab8
 80096f4:	2000bf78 	.word	0x2000bf78
 80096f8:	2000bf48 	.word	0x2000bf48
 80096fc:	2000bf44 	.word	0x2000bf44
 8009700:	2000bfac 	.word	0x2000bfac

08009704 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009704:	b580      	push	{r7, lr}
 8009706:	b08a      	sub	sp, #40	@ 0x28
 8009708:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800970a:	2300      	movs	r3, #0
 800970c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800970e:	f000 fb13 	bl	8009d38 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009712:	4b1d      	ldr	r3, [pc, #116]	@ (8009788 <xTimerCreateTimerTask+0x84>)
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d021      	beq.n	800975e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800971a:	2300      	movs	r3, #0
 800971c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800971e:	2300      	movs	r3, #0
 8009720:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009722:	1d3a      	adds	r2, r7, #4
 8009724:	f107 0108 	add.w	r1, r7, #8
 8009728:	f107 030c 	add.w	r3, r7, #12
 800972c:	4618      	mov	r0, r3
 800972e:	f7fe faed 	bl	8007d0c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009732:	6879      	ldr	r1, [r7, #4]
 8009734:	68bb      	ldr	r3, [r7, #8]
 8009736:	68fa      	ldr	r2, [r7, #12]
 8009738:	9202      	str	r2, [sp, #8]
 800973a:	9301      	str	r3, [sp, #4]
 800973c:	2302      	movs	r3, #2
 800973e:	9300      	str	r3, [sp, #0]
 8009740:	2300      	movs	r3, #0
 8009742:	460a      	mov	r2, r1
 8009744:	4911      	ldr	r1, [pc, #68]	@ (800978c <xTimerCreateTimerTask+0x88>)
 8009746:	4812      	ldr	r0, [pc, #72]	@ (8009790 <xTimerCreateTimerTask+0x8c>)
 8009748:	f7ff f8a8 	bl	800889c <xTaskCreateStatic>
 800974c:	4603      	mov	r3, r0
 800974e:	4a11      	ldr	r2, [pc, #68]	@ (8009794 <xTimerCreateTimerTask+0x90>)
 8009750:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009752:	4b10      	ldr	r3, [pc, #64]	@ (8009794 <xTimerCreateTimerTask+0x90>)
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d001      	beq.n	800975e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800975a:	2301      	movs	r3, #1
 800975c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800975e:	697b      	ldr	r3, [r7, #20]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d10b      	bne.n	800977c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8009764:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009768:	f383 8811 	msr	BASEPRI, r3
 800976c:	f3bf 8f6f 	isb	sy
 8009770:	f3bf 8f4f 	dsb	sy
 8009774:	613b      	str	r3, [r7, #16]
}
 8009776:	bf00      	nop
 8009778:	bf00      	nop
 800977a:	e7fd      	b.n	8009778 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800977c:	697b      	ldr	r3, [r7, #20]
}
 800977e:	4618      	mov	r0, r3
 8009780:	3718      	adds	r7, #24
 8009782:	46bd      	mov	sp, r7
 8009784:	bd80      	pop	{r7, pc}
 8009786:	bf00      	nop
 8009788:	2000bfe8 	.word	0x2000bfe8
 800978c:	0801e67c 	.word	0x0801e67c
 8009790:	080098d1 	.word	0x080098d1
 8009794:	2000bfec 	.word	0x2000bfec

08009798 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b08a      	sub	sp, #40	@ 0x28
 800979c:	af00      	add	r7, sp, #0
 800979e:	60f8      	str	r0, [r7, #12]
 80097a0:	60b9      	str	r1, [r7, #8]
 80097a2:	607a      	str	r2, [r7, #4]
 80097a4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80097a6:	2300      	movs	r3, #0
 80097a8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d10b      	bne.n	80097c8 <xTimerGenericCommand+0x30>
	__asm volatile
 80097b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097b4:	f383 8811 	msr	BASEPRI, r3
 80097b8:	f3bf 8f6f 	isb	sy
 80097bc:	f3bf 8f4f 	dsb	sy
 80097c0:	623b      	str	r3, [r7, #32]
}
 80097c2:	bf00      	nop
 80097c4:	bf00      	nop
 80097c6:	e7fd      	b.n	80097c4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80097c8:	4b19      	ldr	r3, [pc, #100]	@ (8009830 <xTimerGenericCommand+0x98>)
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d02a      	beq.n	8009826 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80097d0:	68bb      	ldr	r3, [r7, #8]
 80097d2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80097dc:	68bb      	ldr	r3, [r7, #8]
 80097de:	2b05      	cmp	r3, #5
 80097e0:	dc18      	bgt.n	8009814 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80097e2:	f7ff fead 	bl	8009540 <xTaskGetSchedulerState>
 80097e6:	4603      	mov	r3, r0
 80097e8:	2b02      	cmp	r3, #2
 80097ea:	d109      	bne.n	8009800 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80097ec:	4b10      	ldr	r3, [pc, #64]	@ (8009830 <xTimerGenericCommand+0x98>)
 80097ee:	6818      	ldr	r0, [r3, #0]
 80097f0:	f107 0110 	add.w	r1, r7, #16
 80097f4:	2300      	movs	r3, #0
 80097f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80097f8:	f7fe fc60 	bl	80080bc <xQueueGenericSend>
 80097fc:	6278      	str	r0, [r7, #36]	@ 0x24
 80097fe:	e012      	b.n	8009826 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009800:	4b0b      	ldr	r3, [pc, #44]	@ (8009830 <xTimerGenericCommand+0x98>)
 8009802:	6818      	ldr	r0, [r3, #0]
 8009804:	f107 0110 	add.w	r1, r7, #16
 8009808:	2300      	movs	r3, #0
 800980a:	2200      	movs	r2, #0
 800980c:	f7fe fc56 	bl	80080bc <xQueueGenericSend>
 8009810:	6278      	str	r0, [r7, #36]	@ 0x24
 8009812:	e008      	b.n	8009826 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009814:	4b06      	ldr	r3, [pc, #24]	@ (8009830 <xTimerGenericCommand+0x98>)
 8009816:	6818      	ldr	r0, [r3, #0]
 8009818:	f107 0110 	add.w	r1, r7, #16
 800981c:	2300      	movs	r3, #0
 800981e:	683a      	ldr	r2, [r7, #0]
 8009820:	f7fe fd4e 	bl	80082c0 <xQueueGenericSendFromISR>
 8009824:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009828:	4618      	mov	r0, r3
 800982a:	3728      	adds	r7, #40	@ 0x28
 800982c:	46bd      	mov	sp, r7
 800982e:	bd80      	pop	{r7, pc}
 8009830:	2000bfe8 	.word	0x2000bfe8

08009834 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b088      	sub	sp, #32
 8009838:	af02      	add	r7, sp, #8
 800983a:	6078      	str	r0, [r7, #4]
 800983c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800983e:	4b23      	ldr	r3, [pc, #140]	@ (80098cc <prvProcessExpiredTimer+0x98>)
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	68db      	ldr	r3, [r3, #12]
 8009844:	68db      	ldr	r3, [r3, #12]
 8009846:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009848:	697b      	ldr	r3, [r7, #20]
 800984a:	3304      	adds	r3, #4
 800984c:	4618      	mov	r0, r3
 800984e:	f7fe fb01 	bl	8007e54 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009852:	697b      	ldr	r3, [r7, #20]
 8009854:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009858:	f003 0304 	and.w	r3, r3, #4
 800985c:	2b00      	cmp	r3, #0
 800985e:	d023      	beq.n	80098a8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009860:	697b      	ldr	r3, [r7, #20]
 8009862:	699a      	ldr	r2, [r3, #24]
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	18d1      	adds	r1, r2, r3
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	683a      	ldr	r2, [r7, #0]
 800986c:	6978      	ldr	r0, [r7, #20]
 800986e:	f000 f8d5 	bl	8009a1c <prvInsertTimerInActiveList>
 8009872:	4603      	mov	r3, r0
 8009874:	2b00      	cmp	r3, #0
 8009876:	d020      	beq.n	80098ba <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009878:	2300      	movs	r3, #0
 800987a:	9300      	str	r3, [sp, #0]
 800987c:	2300      	movs	r3, #0
 800987e:	687a      	ldr	r2, [r7, #4]
 8009880:	2100      	movs	r1, #0
 8009882:	6978      	ldr	r0, [r7, #20]
 8009884:	f7ff ff88 	bl	8009798 <xTimerGenericCommand>
 8009888:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800988a:	693b      	ldr	r3, [r7, #16]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d114      	bne.n	80098ba <prvProcessExpiredTimer+0x86>
	__asm volatile
 8009890:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009894:	f383 8811 	msr	BASEPRI, r3
 8009898:	f3bf 8f6f 	isb	sy
 800989c:	f3bf 8f4f 	dsb	sy
 80098a0:	60fb      	str	r3, [r7, #12]
}
 80098a2:	bf00      	nop
 80098a4:	bf00      	nop
 80098a6:	e7fd      	b.n	80098a4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80098a8:	697b      	ldr	r3, [r7, #20]
 80098aa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80098ae:	f023 0301 	bic.w	r3, r3, #1
 80098b2:	b2da      	uxtb	r2, r3
 80098b4:	697b      	ldr	r3, [r7, #20]
 80098b6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80098ba:	697b      	ldr	r3, [r7, #20]
 80098bc:	6a1b      	ldr	r3, [r3, #32]
 80098be:	6978      	ldr	r0, [r7, #20]
 80098c0:	4798      	blx	r3
}
 80098c2:	bf00      	nop
 80098c4:	3718      	adds	r7, #24
 80098c6:	46bd      	mov	sp, r7
 80098c8:	bd80      	pop	{r7, pc}
 80098ca:	bf00      	nop
 80098cc:	2000bfe0 	.word	0x2000bfe0

080098d0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80098d0:	b580      	push	{r7, lr}
 80098d2:	b084      	sub	sp, #16
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80098d8:	f107 0308 	add.w	r3, r7, #8
 80098dc:	4618      	mov	r0, r3
 80098de:	f000 f859 	bl	8009994 <prvGetNextExpireTime>
 80098e2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80098e4:	68bb      	ldr	r3, [r7, #8]
 80098e6:	4619      	mov	r1, r3
 80098e8:	68f8      	ldr	r0, [r7, #12]
 80098ea:	f000 f805 	bl	80098f8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80098ee:	f000 f8d7 	bl	8009aa0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80098f2:	bf00      	nop
 80098f4:	e7f0      	b.n	80098d8 <prvTimerTask+0x8>
	...

080098f8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b084      	sub	sp, #16
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
 8009900:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009902:	f7ff fa0f 	bl	8008d24 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009906:	f107 0308 	add.w	r3, r7, #8
 800990a:	4618      	mov	r0, r3
 800990c:	f000 f866 	bl	80099dc <prvSampleTimeNow>
 8009910:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009912:	68bb      	ldr	r3, [r7, #8]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d130      	bne.n	800997a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009918:	683b      	ldr	r3, [r7, #0]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d10a      	bne.n	8009934 <prvProcessTimerOrBlockTask+0x3c>
 800991e:	687a      	ldr	r2, [r7, #4]
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	429a      	cmp	r2, r3
 8009924:	d806      	bhi.n	8009934 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009926:	f7ff fa0b 	bl	8008d40 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800992a:	68f9      	ldr	r1, [r7, #12]
 800992c:	6878      	ldr	r0, [r7, #4]
 800992e:	f7ff ff81 	bl	8009834 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009932:	e024      	b.n	800997e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009934:	683b      	ldr	r3, [r7, #0]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d008      	beq.n	800994c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800993a:	4b13      	ldr	r3, [pc, #76]	@ (8009988 <prvProcessTimerOrBlockTask+0x90>)
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	2b00      	cmp	r3, #0
 8009942:	d101      	bne.n	8009948 <prvProcessTimerOrBlockTask+0x50>
 8009944:	2301      	movs	r3, #1
 8009946:	e000      	b.n	800994a <prvProcessTimerOrBlockTask+0x52>
 8009948:	2300      	movs	r3, #0
 800994a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800994c:	4b0f      	ldr	r3, [pc, #60]	@ (800998c <prvProcessTimerOrBlockTask+0x94>)
 800994e:	6818      	ldr	r0, [r3, #0]
 8009950:	687a      	ldr	r2, [r7, #4]
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	1ad3      	subs	r3, r2, r3
 8009956:	683a      	ldr	r2, [r7, #0]
 8009958:	4619      	mov	r1, r3
 800995a:	f7fe ff6b 	bl	8008834 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800995e:	f7ff f9ef 	bl	8008d40 <xTaskResumeAll>
 8009962:	4603      	mov	r3, r0
 8009964:	2b00      	cmp	r3, #0
 8009966:	d10a      	bne.n	800997e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009968:	4b09      	ldr	r3, [pc, #36]	@ (8009990 <prvProcessTimerOrBlockTask+0x98>)
 800996a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800996e:	601a      	str	r2, [r3, #0]
 8009970:	f3bf 8f4f 	dsb	sy
 8009974:	f3bf 8f6f 	isb	sy
}
 8009978:	e001      	b.n	800997e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800997a:	f7ff f9e1 	bl	8008d40 <xTaskResumeAll>
}
 800997e:	bf00      	nop
 8009980:	3710      	adds	r7, #16
 8009982:	46bd      	mov	sp, r7
 8009984:	bd80      	pop	{r7, pc}
 8009986:	bf00      	nop
 8009988:	2000bfe4 	.word	0x2000bfe4
 800998c:	2000bfe8 	.word	0x2000bfe8
 8009990:	e000ed04 	.word	0xe000ed04

08009994 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009994:	b480      	push	{r7}
 8009996:	b085      	sub	sp, #20
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800999c:	4b0e      	ldr	r3, [pc, #56]	@ (80099d8 <prvGetNextExpireTime+0x44>)
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d101      	bne.n	80099aa <prvGetNextExpireTime+0x16>
 80099a6:	2201      	movs	r2, #1
 80099a8:	e000      	b.n	80099ac <prvGetNextExpireTime+0x18>
 80099aa:	2200      	movs	r2, #0
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d105      	bne.n	80099c4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80099b8:	4b07      	ldr	r3, [pc, #28]	@ (80099d8 <prvGetNextExpireTime+0x44>)
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	68db      	ldr	r3, [r3, #12]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	60fb      	str	r3, [r7, #12]
 80099c2:	e001      	b.n	80099c8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80099c4:	2300      	movs	r3, #0
 80099c6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80099c8:	68fb      	ldr	r3, [r7, #12]
}
 80099ca:	4618      	mov	r0, r3
 80099cc:	3714      	adds	r7, #20
 80099ce:	46bd      	mov	sp, r7
 80099d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d4:	4770      	bx	lr
 80099d6:	bf00      	nop
 80099d8:	2000bfe0 	.word	0x2000bfe0

080099dc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	b084      	sub	sp, #16
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80099e4:	f7ff fa4a 	bl	8008e7c <xTaskGetTickCount>
 80099e8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80099ea:	4b0b      	ldr	r3, [pc, #44]	@ (8009a18 <prvSampleTimeNow+0x3c>)
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	68fa      	ldr	r2, [r7, #12]
 80099f0:	429a      	cmp	r2, r3
 80099f2:	d205      	bcs.n	8009a00 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80099f4:	f000 f93a 	bl	8009c6c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	2201      	movs	r2, #1
 80099fc:	601a      	str	r2, [r3, #0]
 80099fe:	e002      	b.n	8009a06 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	2200      	movs	r2, #0
 8009a04:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009a06:	4a04      	ldr	r2, [pc, #16]	@ (8009a18 <prvSampleTimeNow+0x3c>)
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009a0c:	68fb      	ldr	r3, [r7, #12]
}
 8009a0e:	4618      	mov	r0, r3
 8009a10:	3710      	adds	r7, #16
 8009a12:	46bd      	mov	sp, r7
 8009a14:	bd80      	pop	{r7, pc}
 8009a16:	bf00      	nop
 8009a18:	2000bff0 	.word	0x2000bff0

08009a1c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b086      	sub	sp, #24
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	60f8      	str	r0, [r7, #12]
 8009a24:	60b9      	str	r1, [r7, #8]
 8009a26:	607a      	str	r2, [r7, #4]
 8009a28:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	68ba      	ldr	r2, [r7, #8]
 8009a32:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	68fa      	ldr	r2, [r7, #12]
 8009a38:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009a3a:	68ba      	ldr	r2, [r7, #8]
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	429a      	cmp	r2, r3
 8009a40:	d812      	bhi.n	8009a68 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a42:	687a      	ldr	r2, [r7, #4]
 8009a44:	683b      	ldr	r3, [r7, #0]
 8009a46:	1ad2      	subs	r2, r2, r3
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	699b      	ldr	r3, [r3, #24]
 8009a4c:	429a      	cmp	r2, r3
 8009a4e:	d302      	bcc.n	8009a56 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009a50:	2301      	movs	r3, #1
 8009a52:	617b      	str	r3, [r7, #20]
 8009a54:	e01b      	b.n	8009a8e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009a56:	4b10      	ldr	r3, [pc, #64]	@ (8009a98 <prvInsertTimerInActiveList+0x7c>)
 8009a58:	681a      	ldr	r2, [r3, #0]
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	3304      	adds	r3, #4
 8009a5e:	4619      	mov	r1, r3
 8009a60:	4610      	mov	r0, r2
 8009a62:	f7fe f9be 	bl	8007de2 <vListInsert>
 8009a66:	e012      	b.n	8009a8e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009a68:	687a      	ldr	r2, [r7, #4]
 8009a6a:	683b      	ldr	r3, [r7, #0]
 8009a6c:	429a      	cmp	r2, r3
 8009a6e:	d206      	bcs.n	8009a7e <prvInsertTimerInActiveList+0x62>
 8009a70:	68ba      	ldr	r2, [r7, #8]
 8009a72:	683b      	ldr	r3, [r7, #0]
 8009a74:	429a      	cmp	r2, r3
 8009a76:	d302      	bcc.n	8009a7e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009a78:	2301      	movs	r3, #1
 8009a7a:	617b      	str	r3, [r7, #20]
 8009a7c:	e007      	b.n	8009a8e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009a7e:	4b07      	ldr	r3, [pc, #28]	@ (8009a9c <prvInsertTimerInActiveList+0x80>)
 8009a80:	681a      	ldr	r2, [r3, #0]
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	3304      	adds	r3, #4
 8009a86:	4619      	mov	r1, r3
 8009a88:	4610      	mov	r0, r2
 8009a8a:	f7fe f9aa 	bl	8007de2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009a8e:	697b      	ldr	r3, [r7, #20]
}
 8009a90:	4618      	mov	r0, r3
 8009a92:	3718      	adds	r7, #24
 8009a94:	46bd      	mov	sp, r7
 8009a96:	bd80      	pop	{r7, pc}
 8009a98:	2000bfe4 	.word	0x2000bfe4
 8009a9c:	2000bfe0 	.word	0x2000bfe0

08009aa0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b08e      	sub	sp, #56	@ 0x38
 8009aa4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009aa6:	e0ce      	b.n	8009c46 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	da19      	bge.n	8009ae2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009aae:	1d3b      	adds	r3, r7, #4
 8009ab0:	3304      	adds	r3, #4
 8009ab2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009ab4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d10b      	bne.n	8009ad2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8009aba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009abe:	f383 8811 	msr	BASEPRI, r3
 8009ac2:	f3bf 8f6f 	isb	sy
 8009ac6:	f3bf 8f4f 	dsb	sy
 8009aca:	61fb      	str	r3, [r7, #28]
}
 8009acc:	bf00      	nop
 8009ace:	bf00      	nop
 8009ad0:	e7fd      	b.n	8009ace <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009ad2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009ad8:	6850      	ldr	r0, [r2, #4]
 8009ada:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009adc:	6892      	ldr	r2, [r2, #8]
 8009ade:	4611      	mov	r1, r2
 8009ae0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	f2c0 80ae 	blt.w	8009c46 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009aee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009af0:	695b      	ldr	r3, [r3, #20]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d004      	beq.n	8009b00 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009af6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009af8:	3304      	adds	r3, #4
 8009afa:	4618      	mov	r0, r3
 8009afc:	f7fe f9aa 	bl	8007e54 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009b00:	463b      	mov	r3, r7
 8009b02:	4618      	mov	r0, r3
 8009b04:	f7ff ff6a 	bl	80099dc <prvSampleTimeNow>
 8009b08:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	2b09      	cmp	r3, #9
 8009b0e:	f200 8097 	bhi.w	8009c40 <prvProcessReceivedCommands+0x1a0>
 8009b12:	a201      	add	r2, pc, #4	@ (adr r2, 8009b18 <prvProcessReceivedCommands+0x78>)
 8009b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b18:	08009b41 	.word	0x08009b41
 8009b1c:	08009b41 	.word	0x08009b41
 8009b20:	08009b41 	.word	0x08009b41
 8009b24:	08009bb7 	.word	0x08009bb7
 8009b28:	08009bcb 	.word	0x08009bcb
 8009b2c:	08009c17 	.word	0x08009c17
 8009b30:	08009b41 	.word	0x08009b41
 8009b34:	08009b41 	.word	0x08009b41
 8009b38:	08009bb7 	.word	0x08009bb7
 8009b3c:	08009bcb 	.word	0x08009bcb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009b40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b42:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009b46:	f043 0301 	orr.w	r3, r3, #1
 8009b4a:	b2da      	uxtb	r2, r3
 8009b4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b4e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009b52:	68ba      	ldr	r2, [r7, #8]
 8009b54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b56:	699b      	ldr	r3, [r3, #24]
 8009b58:	18d1      	adds	r1, r2, r3
 8009b5a:	68bb      	ldr	r3, [r7, #8]
 8009b5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009b5e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009b60:	f7ff ff5c 	bl	8009a1c <prvInsertTimerInActiveList>
 8009b64:	4603      	mov	r3, r0
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d06c      	beq.n	8009c44 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009b6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b6c:	6a1b      	ldr	r3, [r3, #32]
 8009b6e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009b70:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009b72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b74:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009b78:	f003 0304 	and.w	r3, r3, #4
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d061      	beq.n	8009c44 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009b80:	68ba      	ldr	r2, [r7, #8]
 8009b82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b84:	699b      	ldr	r3, [r3, #24]
 8009b86:	441a      	add	r2, r3
 8009b88:	2300      	movs	r3, #0
 8009b8a:	9300      	str	r3, [sp, #0]
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	2100      	movs	r1, #0
 8009b90:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009b92:	f7ff fe01 	bl	8009798 <xTimerGenericCommand>
 8009b96:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009b98:	6a3b      	ldr	r3, [r7, #32]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d152      	bne.n	8009c44 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8009b9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ba2:	f383 8811 	msr	BASEPRI, r3
 8009ba6:	f3bf 8f6f 	isb	sy
 8009baa:	f3bf 8f4f 	dsb	sy
 8009bae:	61bb      	str	r3, [r7, #24]
}
 8009bb0:	bf00      	nop
 8009bb2:	bf00      	nop
 8009bb4:	e7fd      	b.n	8009bb2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009bb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bb8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009bbc:	f023 0301 	bic.w	r3, r3, #1
 8009bc0:	b2da      	uxtb	r2, r3
 8009bc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bc4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009bc8:	e03d      	b.n	8009c46 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009bca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bcc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009bd0:	f043 0301 	orr.w	r3, r3, #1
 8009bd4:	b2da      	uxtb	r2, r3
 8009bd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bd8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009bdc:	68ba      	ldr	r2, [r7, #8]
 8009bde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009be0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009be2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009be4:	699b      	ldr	r3, [r3, #24]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d10b      	bne.n	8009c02 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8009bea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bee:	f383 8811 	msr	BASEPRI, r3
 8009bf2:	f3bf 8f6f 	isb	sy
 8009bf6:	f3bf 8f4f 	dsb	sy
 8009bfa:	617b      	str	r3, [r7, #20]
}
 8009bfc:	bf00      	nop
 8009bfe:	bf00      	nop
 8009c00:	e7fd      	b.n	8009bfe <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009c02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c04:	699a      	ldr	r2, [r3, #24]
 8009c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c08:	18d1      	adds	r1, r2, r3
 8009c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009c0e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009c10:	f7ff ff04 	bl	8009a1c <prvInsertTimerInActiveList>
					break;
 8009c14:	e017      	b.n	8009c46 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009c16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c18:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009c1c:	f003 0302 	and.w	r3, r3, #2
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d103      	bne.n	8009c2c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8009c24:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009c26:	f000 fbe7 	bl	800a3f8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009c2a:	e00c      	b.n	8009c46 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009c2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c2e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009c32:	f023 0301 	bic.w	r3, r3, #1
 8009c36:	b2da      	uxtb	r2, r3
 8009c38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c3a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009c3e:	e002      	b.n	8009c46 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8009c40:	bf00      	nop
 8009c42:	e000      	b.n	8009c46 <prvProcessReceivedCommands+0x1a6>
					break;
 8009c44:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009c46:	4b08      	ldr	r3, [pc, #32]	@ (8009c68 <prvProcessReceivedCommands+0x1c8>)
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	1d39      	adds	r1, r7, #4
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	4618      	mov	r0, r3
 8009c50:	f7fe fbd4 	bl	80083fc <xQueueReceive>
 8009c54:	4603      	mov	r3, r0
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	f47f af26 	bne.w	8009aa8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009c5c:	bf00      	nop
 8009c5e:	bf00      	nop
 8009c60:	3730      	adds	r7, #48	@ 0x30
 8009c62:	46bd      	mov	sp, r7
 8009c64:	bd80      	pop	{r7, pc}
 8009c66:	bf00      	nop
 8009c68:	2000bfe8 	.word	0x2000bfe8

08009c6c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b088      	sub	sp, #32
 8009c70:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009c72:	e049      	b.n	8009d08 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009c74:	4b2e      	ldr	r3, [pc, #184]	@ (8009d30 <prvSwitchTimerLists+0xc4>)
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	68db      	ldr	r3, [r3, #12]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c7e:	4b2c      	ldr	r3, [pc, #176]	@ (8009d30 <prvSwitchTimerLists+0xc4>)
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	68db      	ldr	r3, [r3, #12]
 8009c84:	68db      	ldr	r3, [r3, #12]
 8009c86:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	3304      	adds	r3, #4
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	f7fe f8e1 	bl	8007e54 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	6a1b      	ldr	r3, [r3, #32]
 8009c96:	68f8      	ldr	r0, [r7, #12]
 8009c98:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009ca0:	f003 0304 	and.w	r3, r3, #4
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d02f      	beq.n	8009d08 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	699b      	ldr	r3, [r3, #24]
 8009cac:	693a      	ldr	r2, [r7, #16]
 8009cae:	4413      	add	r3, r2
 8009cb0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009cb2:	68ba      	ldr	r2, [r7, #8]
 8009cb4:	693b      	ldr	r3, [r7, #16]
 8009cb6:	429a      	cmp	r2, r3
 8009cb8:	d90e      	bls.n	8009cd8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	68ba      	ldr	r2, [r7, #8]
 8009cbe:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	68fa      	ldr	r2, [r7, #12]
 8009cc4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009cc6:	4b1a      	ldr	r3, [pc, #104]	@ (8009d30 <prvSwitchTimerLists+0xc4>)
 8009cc8:	681a      	ldr	r2, [r3, #0]
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	3304      	adds	r3, #4
 8009cce:	4619      	mov	r1, r3
 8009cd0:	4610      	mov	r0, r2
 8009cd2:	f7fe f886 	bl	8007de2 <vListInsert>
 8009cd6:	e017      	b.n	8009d08 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009cd8:	2300      	movs	r3, #0
 8009cda:	9300      	str	r3, [sp, #0]
 8009cdc:	2300      	movs	r3, #0
 8009cde:	693a      	ldr	r2, [r7, #16]
 8009ce0:	2100      	movs	r1, #0
 8009ce2:	68f8      	ldr	r0, [r7, #12]
 8009ce4:	f7ff fd58 	bl	8009798 <xTimerGenericCommand>
 8009ce8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d10b      	bne.n	8009d08 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8009cf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cf4:	f383 8811 	msr	BASEPRI, r3
 8009cf8:	f3bf 8f6f 	isb	sy
 8009cfc:	f3bf 8f4f 	dsb	sy
 8009d00:	603b      	str	r3, [r7, #0]
}
 8009d02:	bf00      	nop
 8009d04:	bf00      	nop
 8009d06:	e7fd      	b.n	8009d04 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009d08:	4b09      	ldr	r3, [pc, #36]	@ (8009d30 <prvSwitchTimerLists+0xc4>)
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d1b0      	bne.n	8009c74 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009d12:	4b07      	ldr	r3, [pc, #28]	@ (8009d30 <prvSwitchTimerLists+0xc4>)
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009d18:	4b06      	ldr	r3, [pc, #24]	@ (8009d34 <prvSwitchTimerLists+0xc8>)
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	4a04      	ldr	r2, [pc, #16]	@ (8009d30 <prvSwitchTimerLists+0xc4>)
 8009d1e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009d20:	4a04      	ldr	r2, [pc, #16]	@ (8009d34 <prvSwitchTimerLists+0xc8>)
 8009d22:	697b      	ldr	r3, [r7, #20]
 8009d24:	6013      	str	r3, [r2, #0]
}
 8009d26:	bf00      	nop
 8009d28:	3718      	adds	r7, #24
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	bd80      	pop	{r7, pc}
 8009d2e:	bf00      	nop
 8009d30:	2000bfe0 	.word	0x2000bfe0
 8009d34:	2000bfe4 	.word	0x2000bfe4

08009d38 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	b082      	sub	sp, #8
 8009d3c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009d3e:	f000 f96b 	bl	800a018 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009d42:	4b15      	ldr	r3, [pc, #84]	@ (8009d98 <prvCheckForValidListAndQueue+0x60>)
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d120      	bne.n	8009d8c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009d4a:	4814      	ldr	r0, [pc, #80]	@ (8009d9c <prvCheckForValidListAndQueue+0x64>)
 8009d4c:	f7fd fff8 	bl	8007d40 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009d50:	4813      	ldr	r0, [pc, #76]	@ (8009da0 <prvCheckForValidListAndQueue+0x68>)
 8009d52:	f7fd fff5 	bl	8007d40 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009d56:	4b13      	ldr	r3, [pc, #76]	@ (8009da4 <prvCheckForValidListAndQueue+0x6c>)
 8009d58:	4a10      	ldr	r2, [pc, #64]	@ (8009d9c <prvCheckForValidListAndQueue+0x64>)
 8009d5a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009d5c:	4b12      	ldr	r3, [pc, #72]	@ (8009da8 <prvCheckForValidListAndQueue+0x70>)
 8009d5e:	4a10      	ldr	r2, [pc, #64]	@ (8009da0 <prvCheckForValidListAndQueue+0x68>)
 8009d60:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009d62:	2300      	movs	r3, #0
 8009d64:	9300      	str	r3, [sp, #0]
 8009d66:	4b11      	ldr	r3, [pc, #68]	@ (8009dac <prvCheckForValidListAndQueue+0x74>)
 8009d68:	4a11      	ldr	r2, [pc, #68]	@ (8009db0 <prvCheckForValidListAndQueue+0x78>)
 8009d6a:	2110      	movs	r1, #16
 8009d6c:	200a      	movs	r0, #10
 8009d6e:	f7fe f905 	bl	8007f7c <xQueueGenericCreateStatic>
 8009d72:	4603      	mov	r3, r0
 8009d74:	4a08      	ldr	r2, [pc, #32]	@ (8009d98 <prvCheckForValidListAndQueue+0x60>)
 8009d76:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009d78:	4b07      	ldr	r3, [pc, #28]	@ (8009d98 <prvCheckForValidListAndQueue+0x60>)
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d005      	beq.n	8009d8c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009d80:	4b05      	ldr	r3, [pc, #20]	@ (8009d98 <prvCheckForValidListAndQueue+0x60>)
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	490b      	ldr	r1, [pc, #44]	@ (8009db4 <prvCheckForValidListAndQueue+0x7c>)
 8009d86:	4618      	mov	r0, r3
 8009d88:	f7fe fd2a 	bl	80087e0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009d8c:	f000 f976 	bl	800a07c <vPortExitCritical>
}
 8009d90:	bf00      	nop
 8009d92:	46bd      	mov	sp, r7
 8009d94:	bd80      	pop	{r7, pc}
 8009d96:	bf00      	nop
 8009d98:	2000bfe8 	.word	0x2000bfe8
 8009d9c:	2000bfb8 	.word	0x2000bfb8
 8009da0:	2000bfcc 	.word	0x2000bfcc
 8009da4:	2000bfe0 	.word	0x2000bfe0
 8009da8:	2000bfe4 	.word	0x2000bfe4
 8009dac:	2000c094 	.word	0x2000c094
 8009db0:	2000bff4 	.word	0x2000bff4
 8009db4:	0801e684 	.word	0x0801e684

08009db8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009db8:	b480      	push	{r7}
 8009dba:	b085      	sub	sp, #20
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	60f8      	str	r0, [r7, #12]
 8009dc0:	60b9      	str	r1, [r7, #8]
 8009dc2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	3b04      	subs	r3, #4
 8009dc8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009dd0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	3b04      	subs	r3, #4
 8009dd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009dd8:	68bb      	ldr	r3, [r7, #8]
 8009dda:	f023 0201 	bic.w	r2, r3, #1
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	3b04      	subs	r3, #4
 8009de6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009de8:	4a0c      	ldr	r2, [pc, #48]	@ (8009e1c <pxPortInitialiseStack+0x64>)
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	3b14      	subs	r3, #20
 8009df2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009df4:	687a      	ldr	r2, [r7, #4]
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	3b04      	subs	r3, #4
 8009dfe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	f06f 0202 	mvn.w	r2, #2
 8009e06:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	3b20      	subs	r3, #32
 8009e0c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009e0e:	68fb      	ldr	r3, [r7, #12]
}
 8009e10:	4618      	mov	r0, r3
 8009e12:	3714      	adds	r7, #20
 8009e14:	46bd      	mov	sp, r7
 8009e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1a:	4770      	bx	lr
 8009e1c:	08009e21 	.word	0x08009e21

08009e20 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009e20:	b480      	push	{r7}
 8009e22:	b085      	sub	sp, #20
 8009e24:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009e26:	2300      	movs	r3, #0
 8009e28:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009e2a:	4b13      	ldr	r3, [pc, #76]	@ (8009e78 <prvTaskExitError+0x58>)
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009e32:	d00b      	beq.n	8009e4c <prvTaskExitError+0x2c>
	__asm volatile
 8009e34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e38:	f383 8811 	msr	BASEPRI, r3
 8009e3c:	f3bf 8f6f 	isb	sy
 8009e40:	f3bf 8f4f 	dsb	sy
 8009e44:	60fb      	str	r3, [r7, #12]
}
 8009e46:	bf00      	nop
 8009e48:	bf00      	nop
 8009e4a:	e7fd      	b.n	8009e48 <prvTaskExitError+0x28>
	__asm volatile
 8009e4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e50:	f383 8811 	msr	BASEPRI, r3
 8009e54:	f3bf 8f6f 	isb	sy
 8009e58:	f3bf 8f4f 	dsb	sy
 8009e5c:	60bb      	str	r3, [r7, #8]
}
 8009e5e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009e60:	bf00      	nop
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d0fc      	beq.n	8009e62 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009e68:	bf00      	nop
 8009e6a:	bf00      	nop
 8009e6c:	3714      	adds	r7, #20
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e74:	4770      	bx	lr
 8009e76:	bf00      	nop
 8009e78:	200000d8 	.word	0x200000d8
 8009e7c:	00000000 	.word	0x00000000

08009e80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009e80:	4b07      	ldr	r3, [pc, #28]	@ (8009ea0 <pxCurrentTCBConst2>)
 8009e82:	6819      	ldr	r1, [r3, #0]
 8009e84:	6808      	ldr	r0, [r1, #0]
 8009e86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e8a:	f380 8809 	msr	PSP, r0
 8009e8e:	f3bf 8f6f 	isb	sy
 8009e92:	f04f 0000 	mov.w	r0, #0
 8009e96:	f380 8811 	msr	BASEPRI, r0
 8009e9a:	4770      	bx	lr
 8009e9c:	f3af 8000 	nop.w

08009ea0 <pxCurrentTCBConst2>:
 8009ea0:	2000bab8 	.word	0x2000bab8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009ea4:	bf00      	nop
 8009ea6:	bf00      	nop

08009ea8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009ea8:	4808      	ldr	r0, [pc, #32]	@ (8009ecc <prvPortStartFirstTask+0x24>)
 8009eaa:	6800      	ldr	r0, [r0, #0]
 8009eac:	6800      	ldr	r0, [r0, #0]
 8009eae:	f380 8808 	msr	MSP, r0
 8009eb2:	f04f 0000 	mov.w	r0, #0
 8009eb6:	f380 8814 	msr	CONTROL, r0
 8009eba:	b662      	cpsie	i
 8009ebc:	b661      	cpsie	f
 8009ebe:	f3bf 8f4f 	dsb	sy
 8009ec2:	f3bf 8f6f 	isb	sy
 8009ec6:	df00      	svc	0
 8009ec8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009eca:	bf00      	nop
 8009ecc:	e000ed08 	.word	0xe000ed08

08009ed0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	b086      	sub	sp, #24
 8009ed4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009ed6:	4b47      	ldr	r3, [pc, #284]	@ (8009ff4 <xPortStartScheduler+0x124>)
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	4a47      	ldr	r2, [pc, #284]	@ (8009ff8 <xPortStartScheduler+0x128>)
 8009edc:	4293      	cmp	r3, r2
 8009ede:	d10b      	bne.n	8009ef8 <xPortStartScheduler+0x28>
	__asm volatile
 8009ee0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ee4:	f383 8811 	msr	BASEPRI, r3
 8009ee8:	f3bf 8f6f 	isb	sy
 8009eec:	f3bf 8f4f 	dsb	sy
 8009ef0:	60fb      	str	r3, [r7, #12]
}
 8009ef2:	bf00      	nop
 8009ef4:	bf00      	nop
 8009ef6:	e7fd      	b.n	8009ef4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009ef8:	4b3e      	ldr	r3, [pc, #248]	@ (8009ff4 <xPortStartScheduler+0x124>)
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	4a3f      	ldr	r2, [pc, #252]	@ (8009ffc <xPortStartScheduler+0x12c>)
 8009efe:	4293      	cmp	r3, r2
 8009f00:	d10b      	bne.n	8009f1a <xPortStartScheduler+0x4a>
	__asm volatile
 8009f02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f06:	f383 8811 	msr	BASEPRI, r3
 8009f0a:	f3bf 8f6f 	isb	sy
 8009f0e:	f3bf 8f4f 	dsb	sy
 8009f12:	613b      	str	r3, [r7, #16]
}
 8009f14:	bf00      	nop
 8009f16:	bf00      	nop
 8009f18:	e7fd      	b.n	8009f16 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009f1a:	4b39      	ldr	r3, [pc, #228]	@ (800a000 <xPortStartScheduler+0x130>)
 8009f1c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009f1e:	697b      	ldr	r3, [r7, #20]
 8009f20:	781b      	ldrb	r3, [r3, #0]
 8009f22:	b2db      	uxtb	r3, r3
 8009f24:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009f26:	697b      	ldr	r3, [r7, #20]
 8009f28:	22ff      	movs	r2, #255	@ 0xff
 8009f2a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009f2c:	697b      	ldr	r3, [r7, #20]
 8009f2e:	781b      	ldrb	r3, [r3, #0]
 8009f30:	b2db      	uxtb	r3, r3
 8009f32:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009f34:	78fb      	ldrb	r3, [r7, #3]
 8009f36:	b2db      	uxtb	r3, r3
 8009f38:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8009f3c:	b2da      	uxtb	r2, r3
 8009f3e:	4b31      	ldr	r3, [pc, #196]	@ (800a004 <xPortStartScheduler+0x134>)
 8009f40:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009f42:	4b31      	ldr	r3, [pc, #196]	@ (800a008 <xPortStartScheduler+0x138>)
 8009f44:	2207      	movs	r2, #7
 8009f46:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009f48:	e009      	b.n	8009f5e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8009f4a:	4b2f      	ldr	r3, [pc, #188]	@ (800a008 <xPortStartScheduler+0x138>)
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	3b01      	subs	r3, #1
 8009f50:	4a2d      	ldr	r2, [pc, #180]	@ (800a008 <xPortStartScheduler+0x138>)
 8009f52:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009f54:	78fb      	ldrb	r3, [r7, #3]
 8009f56:	b2db      	uxtb	r3, r3
 8009f58:	005b      	lsls	r3, r3, #1
 8009f5a:	b2db      	uxtb	r3, r3
 8009f5c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009f5e:	78fb      	ldrb	r3, [r7, #3]
 8009f60:	b2db      	uxtb	r3, r3
 8009f62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009f66:	2b80      	cmp	r3, #128	@ 0x80
 8009f68:	d0ef      	beq.n	8009f4a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009f6a:	4b27      	ldr	r3, [pc, #156]	@ (800a008 <xPortStartScheduler+0x138>)
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	f1c3 0307 	rsb	r3, r3, #7
 8009f72:	2b04      	cmp	r3, #4
 8009f74:	d00b      	beq.n	8009f8e <xPortStartScheduler+0xbe>
	__asm volatile
 8009f76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f7a:	f383 8811 	msr	BASEPRI, r3
 8009f7e:	f3bf 8f6f 	isb	sy
 8009f82:	f3bf 8f4f 	dsb	sy
 8009f86:	60bb      	str	r3, [r7, #8]
}
 8009f88:	bf00      	nop
 8009f8a:	bf00      	nop
 8009f8c:	e7fd      	b.n	8009f8a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009f8e:	4b1e      	ldr	r3, [pc, #120]	@ (800a008 <xPortStartScheduler+0x138>)
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	021b      	lsls	r3, r3, #8
 8009f94:	4a1c      	ldr	r2, [pc, #112]	@ (800a008 <xPortStartScheduler+0x138>)
 8009f96:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009f98:	4b1b      	ldr	r3, [pc, #108]	@ (800a008 <xPortStartScheduler+0x138>)
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009fa0:	4a19      	ldr	r2, [pc, #100]	@ (800a008 <xPortStartScheduler+0x138>)
 8009fa2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	b2da      	uxtb	r2, r3
 8009fa8:	697b      	ldr	r3, [r7, #20]
 8009faa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009fac:	4b17      	ldr	r3, [pc, #92]	@ (800a00c <xPortStartScheduler+0x13c>)
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	4a16      	ldr	r2, [pc, #88]	@ (800a00c <xPortStartScheduler+0x13c>)
 8009fb2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009fb6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009fb8:	4b14      	ldr	r3, [pc, #80]	@ (800a00c <xPortStartScheduler+0x13c>)
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	4a13      	ldr	r2, [pc, #76]	@ (800a00c <xPortStartScheduler+0x13c>)
 8009fbe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009fc2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009fc4:	f000 f8da 	bl	800a17c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009fc8:	4b11      	ldr	r3, [pc, #68]	@ (800a010 <xPortStartScheduler+0x140>)
 8009fca:	2200      	movs	r2, #0
 8009fcc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009fce:	f000 f8f9 	bl	800a1c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009fd2:	4b10      	ldr	r3, [pc, #64]	@ (800a014 <xPortStartScheduler+0x144>)
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	4a0f      	ldr	r2, [pc, #60]	@ (800a014 <xPortStartScheduler+0x144>)
 8009fd8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8009fdc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009fde:	f7ff ff63 	bl	8009ea8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009fe2:	f7ff f815 	bl	8009010 <vTaskSwitchContext>
	prvTaskExitError();
 8009fe6:	f7ff ff1b 	bl	8009e20 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009fea:	2300      	movs	r3, #0
}
 8009fec:	4618      	mov	r0, r3
 8009fee:	3718      	adds	r7, #24
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	bd80      	pop	{r7, pc}
 8009ff4:	e000ed00 	.word	0xe000ed00
 8009ff8:	410fc271 	.word	0x410fc271
 8009ffc:	410fc270 	.word	0x410fc270
 800a000:	e000e400 	.word	0xe000e400
 800a004:	2000c0e4 	.word	0x2000c0e4
 800a008:	2000c0e8 	.word	0x2000c0e8
 800a00c:	e000ed20 	.word	0xe000ed20
 800a010:	200000d8 	.word	0x200000d8
 800a014:	e000ef34 	.word	0xe000ef34

0800a018 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a018:	b480      	push	{r7}
 800a01a:	b083      	sub	sp, #12
 800a01c:	af00      	add	r7, sp, #0
	__asm volatile
 800a01e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a022:	f383 8811 	msr	BASEPRI, r3
 800a026:	f3bf 8f6f 	isb	sy
 800a02a:	f3bf 8f4f 	dsb	sy
 800a02e:	607b      	str	r3, [r7, #4]
}
 800a030:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a032:	4b10      	ldr	r3, [pc, #64]	@ (800a074 <vPortEnterCritical+0x5c>)
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	3301      	adds	r3, #1
 800a038:	4a0e      	ldr	r2, [pc, #56]	@ (800a074 <vPortEnterCritical+0x5c>)
 800a03a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a03c:	4b0d      	ldr	r3, [pc, #52]	@ (800a074 <vPortEnterCritical+0x5c>)
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	2b01      	cmp	r3, #1
 800a042:	d110      	bne.n	800a066 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a044:	4b0c      	ldr	r3, [pc, #48]	@ (800a078 <vPortEnterCritical+0x60>)
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	b2db      	uxtb	r3, r3
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d00b      	beq.n	800a066 <vPortEnterCritical+0x4e>
	__asm volatile
 800a04e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a052:	f383 8811 	msr	BASEPRI, r3
 800a056:	f3bf 8f6f 	isb	sy
 800a05a:	f3bf 8f4f 	dsb	sy
 800a05e:	603b      	str	r3, [r7, #0]
}
 800a060:	bf00      	nop
 800a062:	bf00      	nop
 800a064:	e7fd      	b.n	800a062 <vPortEnterCritical+0x4a>
	}
}
 800a066:	bf00      	nop
 800a068:	370c      	adds	r7, #12
 800a06a:	46bd      	mov	sp, r7
 800a06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a070:	4770      	bx	lr
 800a072:	bf00      	nop
 800a074:	200000d8 	.word	0x200000d8
 800a078:	e000ed04 	.word	0xe000ed04

0800a07c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a07c:	b480      	push	{r7}
 800a07e:	b083      	sub	sp, #12
 800a080:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a082:	4b12      	ldr	r3, [pc, #72]	@ (800a0cc <vPortExitCritical+0x50>)
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	2b00      	cmp	r3, #0
 800a088:	d10b      	bne.n	800a0a2 <vPortExitCritical+0x26>
	__asm volatile
 800a08a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a08e:	f383 8811 	msr	BASEPRI, r3
 800a092:	f3bf 8f6f 	isb	sy
 800a096:	f3bf 8f4f 	dsb	sy
 800a09a:	607b      	str	r3, [r7, #4]
}
 800a09c:	bf00      	nop
 800a09e:	bf00      	nop
 800a0a0:	e7fd      	b.n	800a09e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a0a2:	4b0a      	ldr	r3, [pc, #40]	@ (800a0cc <vPortExitCritical+0x50>)
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	3b01      	subs	r3, #1
 800a0a8:	4a08      	ldr	r2, [pc, #32]	@ (800a0cc <vPortExitCritical+0x50>)
 800a0aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a0ac:	4b07      	ldr	r3, [pc, #28]	@ (800a0cc <vPortExitCritical+0x50>)
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d105      	bne.n	800a0c0 <vPortExitCritical+0x44>
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a0b8:	683b      	ldr	r3, [r7, #0]
 800a0ba:	f383 8811 	msr	BASEPRI, r3
}
 800a0be:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a0c0:	bf00      	nop
 800a0c2:	370c      	adds	r7, #12
 800a0c4:	46bd      	mov	sp, r7
 800a0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ca:	4770      	bx	lr
 800a0cc:	200000d8 	.word	0x200000d8

0800a0d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a0d0:	f3ef 8009 	mrs	r0, PSP
 800a0d4:	f3bf 8f6f 	isb	sy
 800a0d8:	4b15      	ldr	r3, [pc, #84]	@ (800a130 <pxCurrentTCBConst>)
 800a0da:	681a      	ldr	r2, [r3, #0]
 800a0dc:	f01e 0f10 	tst.w	lr, #16
 800a0e0:	bf08      	it	eq
 800a0e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a0e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0ea:	6010      	str	r0, [r2, #0]
 800a0ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a0f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a0f4:	f380 8811 	msr	BASEPRI, r0
 800a0f8:	f3bf 8f4f 	dsb	sy
 800a0fc:	f3bf 8f6f 	isb	sy
 800a100:	f7fe ff86 	bl	8009010 <vTaskSwitchContext>
 800a104:	f04f 0000 	mov.w	r0, #0
 800a108:	f380 8811 	msr	BASEPRI, r0
 800a10c:	bc09      	pop	{r0, r3}
 800a10e:	6819      	ldr	r1, [r3, #0]
 800a110:	6808      	ldr	r0, [r1, #0]
 800a112:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a116:	f01e 0f10 	tst.w	lr, #16
 800a11a:	bf08      	it	eq
 800a11c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a120:	f380 8809 	msr	PSP, r0
 800a124:	f3bf 8f6f 	isb	sy
 800a128:	4770      	bx	lr
 800a12a:	bf00      	nop
 800a12c:	f3af 8000 	nop.w

0800a130 <pxCurrentTCBConst>:
 800a130:	2000bab8 	.word	0x2000bab8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a134:	bf00      	nop
 800a136:	bf00      	nop

0800a138 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a138:	b580      	push	{r7, lr}
 800a13a:	b082      	sub	sp, #8
 800a13c:	af00      	add	r7, sp, #0
	__asm volatile
 800a13e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a142:	f383 8811 	msr	BASEPRI, r3
 800a146:	f3bf 8f6f 	isb	sy
 800a14a:	f3bf 8f4f 	dsb	sy
 800a14e:	607b      	str	r3, [r7, #4]
}
 800a150:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a152:	f7fe fea3 	bl	8008e9c <xTaskIncrementTick>
 800a156:	4603      	mov	r3, r0
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d003      	beq.n	800a164 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a15c:	4b06      	ldr	r3, [pc, #24]	@ (800a178 <xPortSysTickHandler+0x40>)
 800a15e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a162:	601a      	str	r2, [r3, #0]
 800a164:	2300      	movs	r3, #0
 800a166:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	f383 8811 	msr	BASEPRI, r3
}
 800a16e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a170:	bf00      	nop
 800a172:	3708      	adds	r7, #8
 800a174:	46bd      	mov	sp, r7
 800a176:	bd80      	pop	{r7, pc}
 800a178:	e000ed04 	.word	0xe000ed04

0800a17c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a17c:	b480      	push	{r7}
 800a17e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a180:	4b0b      	ldr	r3, [pc, #44]	@ (800a1b0 <vPortSetupTimerInterrupt+0x34>)
 800a182:	2200      	movs	r2, #0
 800a184:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a186:	4b0b      	ldr	r3, [pc, #44]	@ (800a1b4 <vPortSetupTimerInterrupt+0x38>)
 800a188:	2200      	movs	r2, #0
 800a18a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a18c:	4b0a      	ldr	r3, [pc, #40]	@ (800a1b8 <vPortSetupTimerInterrupt+0x3c>)
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	4a0a      	ldr	r2, [pc, #40]	@ (800a1bc <vPortSetupTimerInterrupt+0x40>)
 800a192:	fba2 2303 	umull	r2, r3, r2, r3
 800a196:	099b      	lsrs	r3, r3, #6
 800a198:	4a09      	ldr	r2, [pc, #36]	@ (800a1c0 <vPortSetupTimerInterrupt+0x44>)
 800a19a:	3b01      	subs	r3, #1
 800a19c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a19e:	4b04      	ldr	r3, [pc, #16]	@ (800a1b0 <vPortSetupTimerInterrupt+0x34>)
 800a1a0:	2207      	movs	r2, #7
 800a1a2:	601a      	str	r2, [r3, #0]
}
 800a1a4:	bf00      	nop
 800a1a6:	46bd      	mov	sp, r7
 800a1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ac:	4770      	bx	lr
 800a1ae:	bf00      	nop
 800a1b0:	e000e010 	.word	0xe000e010
 800a1b4:	e000e018 	.word	0xe000e018
 800a1b8:	20000004 	.word	0x20000004
 800a1bc:	10624dd3 	.word	0x10624dd3
 800a1c0:	e000e014 	.word	0xe000e014

0800a1c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a1c4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a1d4 <vPortEnableVFP+0x10>
 800a1c8:	6801      	ldr	r1, [r0, #0]
 800a1ca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a1ce:	6001      	str	r1, [r0, #0]
 800a1d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a1d2:	bf00      	nop
 800a1d4:	e000ed88 	.word	0xe000ed88

0800a1d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a1d8:	b480      	push	{r7}
 800a1da:	b085      	sub	sp, #20
 800a1dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a1de:	f3ef 8305 	mrs	r3, IPSR
 800a1e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	2b0f      	cmp	r3, #15
 800a1e8:	d915      	bls.n	800a216 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a1ea:	4a18      	ldr	r2, [pc, #96]	@ (800a24c <vPortValidateInterruptPriority+0x74>)
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	4413      	add	r3, r2
 800a1f0:	781b      	ldrb	r3, [r3, #0]
 800a1f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a1f4:	4b16      	ldr	r3, [pc, #88]	@ (800a250 <vPortValidateInterruptPriority+0x78>)
 800a1f6:	781b      	ldrb	r3, [r3, #0]
 800a1f8:	7afa      	ldrb	r2, [r7, #11]
 800a1fa:	429a      	cmp	r2, r3
 800a1fc:	d20b      	bcs.n	800a216 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800a1fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a202:	f383 8811 	msr	BASEPRI, r3
 800a206:	f3bf 8f6f 	isb	sy
 800a20a:	f3bf 8f4f 	dsb	sy
 800a20e:	607b      	str	r3, [r7, #4]
}
 800a210:	bf00      	nop
 800a212:	bf00      	nop
 800a214:	e7fd      	b.n	800a212 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a216:	4b0f      	ldr	r3, [pc, #60]	@ (800a254 <vPortValidateInterruptPriority+0x7c>)
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a21e:	4b0e      	ldr	r3, [pc, #56]	@ (800a258 <vPortValidateInterruptPriority+0x80>)
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	429a      	cmp	r2, r3
 800a224:	d90b      	bls.n	800a23e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800a226:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a22a:	f383 8811 	msr	BASEPRI, r3
 800a22e:	f3bf 8f6f 	isb	sy
 800a232:	f3bf 8f4f 	dsb	sy
 800a236:	603b      	str	r3, [r7, #0]
}
 800a238:	bf00      	nop
 800a23a:	bf00      	nop
 800a23c:	e7fd      	b.n	800a23a <vPortValidateInterruptPriority+0x62>
	}
 800a23e:	bf00      	nop
 800a240:	3714      	adds	r7, #20
 800a242:	46bd      	mov	sp, r7
 800a244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a248:	4770      	bx	lr
 800a24a:	bf00      	nop
 800a24c:	e000e3f0 	.word	0xe000e3f0
 800a250:	2000c0e4 	.word	0x2000c0e4
 800a254:	e000ed0c 	.word	0xe000ed0c
 800a258:	2000c0e8 	.word	0x2000c0e8

0800a25c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b08a      	sub	sp, #40	@ 0x28
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a264:	2300      	movs	r3, #0
 800a266:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a268:	f7fe fd5c 	bl	8008d24 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a26c:	4b5c      	ldr	r3, [pc, #368]	@ (800a3e0 <pvPortMalloc+0x184>)
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d101      	bne.n	800a278 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a274:	f000 f924 	bl	800a4c0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a278:	4b5a      	ldr	r3, [pc, #360]	@ (800a3e4 <pvPortMalloc+0x188>)
 800a27a:	681a      	ldr	r2, [r3, #0]
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	4013      	ands	r3, r2
 800a280:	2b00      	cmp	r3, #0
 800a282:	f040 8095 	bne.w	800a3b0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d01e      	beq.n	800a2ca <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a28c:	2208      	movs	r2, #8
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	4413      	add	r3, r2
 800a292:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	f003 0307 	and.w	r3, r3, #7
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d015      	beq.n	800a2ca <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	f023 0307 	bic.w	r3, r3, #7
 800a2a4:	3308      	adds	r3, #8
 800a2a6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	f003 0307 	and.w	r3, r3, #7
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d00b      	beq.n	800a2ca <pvPortMalloc+0x6e>
	__asm volatile
 800a2b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2b6:	f383 8811 	msr	BASEPRI, r3
 800a2ba:	f3bf 8f6f 	isb	sy
 800a2be:	f3bf 8f4f 	dsb	sy
 800a2c2:	617b      	str	r3, [r7, #20]
}
 800a2c4:	bf00      	nop
 800a2c6:	bf00      	nop
 800a2c8:	e7fd      	b.n	800a2c6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d06f      	beq.n	800a3b0 <pvPortMalloc+0x154>
 800a2d0:	4b45      	ldr	r3, [pc, #276]	@ (800a3e8 <pvPortMalloc+0x18c>)
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	687a      	ldr	r2, [r7, #4]
 800a2d6:	429a      	cmp	r2, r3
 800a2d8:	d86a      	bhi.n	800a3b0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a2da:	4b44      	ldr	r3, [pc, #272]	@ (800a3ec <pvPortMalloc+0x190>)
 800a2dc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a2de:	4b43      	ldr	r3, [pc, #268]	@ (800a3ec <pvPortMalloc+0x190>)
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a2e4:	e004      	b.n	800a2f0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a2e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2e8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a2ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a2f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2f2:	685b      	ldr	r3, [r3, #4]
 800a2f4:	687a      	ldr	r2, [r7, #4]
 800a2f6:	429a      	cmp	r2, r3
 800a2f8:	d903      	bls.n	800a302 <pvPortMalloc+0xa6>
 800a2fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d1f1      	bne.n	800a2e6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a302:	4b37      	ldr	r3, [pc, #220]	@ (800a3e0 <pvPortMalloc+0x184>)
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a308:	429a      	cmp	r2, r3
 800a30a:	d051      	beq.n	800a3b0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a30c:	6a3b      	ldr	r3, [r7, #32]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	2208      	movs	r2, #8
 800a312:	4413      	add	r3, r2
 800a314:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a318:	681a      	ldr	r2, [r3, #0]
 800a31a:	6a3b      	ldr	r3, [r7, #32]
 800a31c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a31e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a320:	685a      	ldr	r2, [r3, #4]
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	1ad2      	subs	r2, r2, r3
 800a326:	2308      	movs	r3, #8
 800a328:	005b      	lsls	r3, r3, #1
 800a32a:	429a      	cmp	r2, r3
 800a32c:	d920      	bls.n	800a370 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a32e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	4413      	add	r3, r2
 800a334:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a336:	69bb      	ldr	r3, [r7, #24]
 800a338:	f003 0307 	and.w	r3, r3, #7
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d00b      	beq.n	800a358 <pvPortMalloc+0xfc>
	__asm volatile
 800a340:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a344:	f383 8811 	msr	BASEPRI, r3
 800a348:	f3bf 8f6f 	isb	sy
 800a34c:	f3bf 8f4f 	dsb	sy
 800a350:	613b      	str	r3, [r7, #16]
}
 800a352:	bf00      	nop
 800a354:	bf00      	nop
 800a356:	e7fd      	b.n	800a354 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a35a:	685a      	ldr	r2, [r3, #4]
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	1ad2      	subs	r2, r2, r3
 800a360:	69bb      	ldr	r3, [r7, #24]
 800a362:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a366:	687a      	ldr	r2, [r7, #4]
 800a368:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a36a:	69b8      	ldr	r0, [r7, #24]
 800a36c:	f000 f90a 	bl	800a584 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a370:	4b1d      	ldr	r3, [pc, #116]	@ (800a3e8 <pvPortMalloc+0x18c>)
 800a372:	681a      	ldr	r2, [r3, #0]
 800a374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a376:	685b      	ldr	r3, [r3, #4]
 800a378:	1ad3      	subs	r3, r2, r3
 800a37a:	4a1b      	ldr	r2, [pc, #108]	@ (800a3e8 <pvPortMalloc+0x18c>)
 800a37c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a37e:	4b1a      	ldr	r3, [pc, #104]	@ (800a3e8 <pvPortMalloc+0x18c>)
 800a380:	681a      	ldr	r2, [r3, #0]
 800a382:	4b1b      	ldr	r3, [pc, #108]	@ (800a3f0 <pvPortMalloc+0x194>)
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	429a      	cmp	r2, r3
 800a388:	d203      	bcs.n	800a392 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a38a:	4b17      	ldr	r3, [pc, #92]	@ (800a3e8 <pvPortMalloc+0x18c>)
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	4a18      	ldr	r2, [pc, #96]	@ (800a3f0 <pvPortMalloc+0x194>)
 800a390:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a394:	685a      	ldr	r2, [r3, #4]
 800a396:	4b13      	ldr	r3, [pc, #76]	@ (800a3e4 <pvPortMalloc+0x188>)
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	431a      	orrs	r2, r3
 800a39c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a39e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a3a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a3a6:	4b13      	ldr	r3, [pc, #76]	@ (800a3f4 <pvPortMalloc+0x198>)
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	3301      	adds	r3, #1
 800a3ac:	4a11      	ldr	r2, [pc, #68]	@ (800a3f4 <pvPortMalloc+0x198>)
 800a3ae:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a3b0:	f7fe fcc6 	bl	8008d40 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a3b4:	69fb      	ldr	r3, [r7, #28]
 800a3b6:	f003 0307 	and.w	r3, r3, #7
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d00b      	beq.n	800a3d6 <pvPortMalloc+0x17a>
	__asm volatile
 800a3be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3c2:	f383 8811 	msr	BASEPRI, r3
 800a3c6:	f3bf 8f6f 	isb	sy
 800a3ca:	f3bf 8f4f 	dsb	sy
 800a3ce:	60fb      	str	r3, [r7, #12]
}
 800a3d0:	bf00      	nop
 800a3d2:	bf00      	nop
 800a3d4:	e7fd      	b.n	800a3d2 <pvPortMalloc+0x176>
	return pvReturn;
 800a3d6:	69fb      	ldr	r3, [r7, #28]
}
 800a3d8:	4618      	mov	r0, r3
 800a3da:	3728      	adds	r7, #40	@ 0x28
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	bd80      	pop	{r7, pc}
 800a3e0:	20013624 	.word	0x20013624
 800a3e4:	20013638 	.word	0x20013638
 800a3e8:	20013628 	.word	0x20013628
 800a3ec:	2001361c 	.word	0x2001361c
 800a3f0:	2001362c 	.word	0x2001362c
 800a3f4:	20013630 	.word	0x20013630

0800a3f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b086      	sub	sp, #24
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d04f      	beq.n	800a4aa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a40a:	2308      	movs	r3, #8
 800a40c:	425b      	negs	r3, r3
 800a40e:	697a      	ldr	r2, [r7, #20]
 800a410:	4413      	add	r3, r2
 800a412:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a414:	697b      	ldr	r3, [r7, #20]
 800a416:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a418:	693b      	ldr	r3, [r7, #16]
 800a41a:	685a      	ldr	r2, [r3, #4]
 800a41c:	4b25      	ldr	r3, [pc, #148]	@ (800a4b4 <vPortFree+0xbc>)
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	4013      	ands	r3, r2
 800a422:	2b00      	cmp	r3, #0
 800a424:	d10b      	bne.n	800a43e <vPortFree+0x46>
	__asm volatile
 800a426:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a42a:	f383 8811 	msr	BASEPRI, r3
 800a42e:	f3bf 8f6f 	isb	sy
 800a432:	f3bf 8f4f 	dsb	sy
 800a436:	60fb      	str	r3, [r7, #12]
}
 800a438:	bf00      	nop
 800a43a:	bf00      	nop
 800a43c:	e7fd      	b.n	800a43a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a43e:	693b      	ldr	r3, [r7, #16]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d00b      	beq.n	800a45e <vPortFree+0x66>
	__asm volatile
 800a446:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a44a:	f383 8811 	msr	BASEPRI, r3
 800a44e:	f3bf 8f6f 	isb	sy
 800a452:	f3bf 8f4f 	dsb	sy
 800a456:	60bb      	str	r3, [r7, #8]
}
 800a458:	bf00      	nop
 800a45a:	bf00      	nop
 800a45c:	e7fd      	b.n	800a45a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a45e:	693b      	ldr	r3, [r7, #16]
 800a460:	685a      	ldr	r2, [r3, #4]
 800a462:	4b14      	ldr	r3, [pc, #80]	@ (800a4b4 <vPortFree+0xbc>)
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	4013      	ands	r3, r2
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d01e      	beq.n	800a4aa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a46c:	693b      	ldr	r3, [r7, #16]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	2b00      	cmp	r3, #0
 800a472:	d11a      	bne.n	800a4aa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a474:	693b      	ldr	r3, [r7, #16]
 800a476:	685a      	ldr	r2, [r3, #4]
 800a478:	4b0e      	ldr	r3, [pc, #56]	@ (800a4b4 <vPortFree+0xbc>)
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	43db      	mvns	r3, r3
 800a47e:	401a      	ands	r2, r3
 800a480:	693b      	ldr	r3, [r7, #16]
 800a482:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a484:	f7fe fc4e 	bl	8008d24 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a488:	693b      	ldr	r3, [r7, #16]
 800a48a:	685a      	ldr	r2, [r3, #4]
 800a48c:	4b0a      	ldr	r3, [pc, #40]	@ (800a4b8 <vPortFree+0xc0>)
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	4413      	add	r3, r2
 800a492:	4a09      	ldr	r2, [pc, #36]	@ (800a4b8 <vPortFree+0xc0>)
 800a494:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a496:	6938      	ldr	r0, [r7, #16]
 800a498:	f000 f874 	bl	800a584 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a49c:	4b07      	ldr	r3, [pc, #28]	@ (800a4bc <vPortFree+0xc4>)
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	3301      	adds	r3, #1
 800a4a2:	4a06      	ldr	r2, [pc, #24]	@ (800a4bc <vPortFree+0xc4>)
 800a4a4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a4a6:	f7fe fc4b 	bl	8008d40 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a4aa:	bf00      	nop
 800a4ac:	3718      	adds	r7, #24
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	bd80      	pop	{r7, pc}
 800a4b2:	bf00      	nop
 800a4b4:	20013638 	.word	0x20013638
 800a4b8:	20013628 	.word	0x20013628
 800a4bc:	20013634 	.word	0x20013634

0800a4c0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a4c0:	b480      	push	{r7}
 800a4c2:	b085      	sub	sp, #20
 800a4c4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a4c6:	f247 5330 	movw	r3, #30000	@ 0x7530
 800a4ca:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a4cc:	4b27      	ldr	r3, [pc, #156]	@ (800a56c <prvHeapInit+0xac>)
 800a4ce:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	f003 0307 	and.w	r3, r3, #7
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d00c      	beq.n	800a4f4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	3307      	adds	r3, #7
 800a4de:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	f023 0307 	bic.w	r3, r3, #7
 800a4e6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a4e8:	68ba      	ldr	r2, [r7, #8]
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	1ad3      	subs	r3, r2, r3
 800a4ee:	4a1f      	ldr	r2, [pc, #124]	@ (800a56c <prvHeapInit+0xac>)
 800a4f0:	4413      	add	r3, r2
 800a4f2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a4f8:	4a1d      	ldr	r2, [pc, #116]	@ (800a570 <prvHeapInit+0xb0>)
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a4fe:	4b1c      	ldr	r3, [pc, #112]	@ (800a570 <prvHeapInit+0xb0>)
 800a500:	2200      	movs	r2, #0
 800a502:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	68ba      	ldr	r2, [r7, #8]
 800a508:	4413      	add	r3, r2
 800a50a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a50c:	2208      	movs	r2, #8
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	1a9b      	subs	r3, r3, r2
 800a512:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	f023 0307 	bic.w	r3, r3, #7
 800a51a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	4a15      	ldr	r2, [pc, #84]	@ (800a574 <prvHeapInit+0xb4>)
 800a520:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a522:	4b14      	ldr	r3, [pc, #80]	@ (800a574 <prvHeapInit+0xb4>)
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	2200      	movs	r2, #0
 800a528:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a52a:	4b12      	ldr	r3, [pc, #72]	@ (800a574 <prvHeapInit+0xb4>)
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	2200      	movs	r2, #0
 800a530:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a536:	683b      	ldr	r3, [r7, #0]
 800a538:	68fa      	ldr	r2, [r7, #12]
 800a53a:	1ad2      	subs	r2, r2, r3
 800a53c:	683b      	ldr	r3, [r7, #0]
 800a53e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a540:	4b0c      	ldr	r3, [pc, #48]	@ (800a574 <prvHeapInit+0xb4>)
 800a542:	681a      	ldr	r2, [r3, #0]
 800a544:	683b      	ldr	r3, [r7, #0]
 800a546:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a548:	683b      	ldr	r3, [r7, #0]
 800a54a:	685b      	ldr	r3, [r3, #4]
 800a54c:	4a0a      	ldr	r2, [pc, #40]	@ (800a578 <prvHeapInit+0xb8>)
 800a54e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a550:	683b      	ldr	r3, [r7, #0]
 800a552:	685b      	ldr	r3, [r3, #4]
 800a554:	4a09      	ldr	r2, [pc, #36]	@ (800a57c <prvHeapInit+0xbc>)
 800a556:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a558:	4b09      	ldr	r3, [pc, #36]	@ (800a580 <prvHeapInit+0xc0>)
 800a55a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a55e:	601a      	str	r2, [r3, #0]
}
 800a560:	bf00      	nop
 800a562:	3714      	adds	r7, #20
 800a564:	46bd      	mov	sp, r7
 800a566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56a:	4770      	bx	lr
 800a56c:	2000c0ec 	.word	0x2000c0ec
 800a570:	2001361c 	.word	0x2001361c
 800a574:	20013624 	.word	0x20013624
 800a578:	2001362c 	.word	0x2001362c
 800a57c:	20013628 	.word	0x20013628
 800a580:	20013638 	.word	0x20013638

0800a584 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a584:	b480      	push	{r7}
 800a586:	b085      	sub	sp, #20
 800a588:	af00      	add	r7, sp, #0
 800a58a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a58c:	4b28      	ldr	r3, [pc, #160]	@ (800a630 <prvInsertBlockIntoFreeList+0xac>)
 800a58e:	60fb      	str	r3, [r7, #12]
 800a590:	e002      	b.n	800a598 <prvInsertBlockIntoFreeList+0x14>
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	60fb      	str	r3, [r7, #12]
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	687a      	ldr	r2, [r7, #4]
 800a59e:	429a      	cmp	r2, r3
 800a5a0:	d8f7      	bhi.n	800a592 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	685b      	ldr	r3, [r3, #4]
 800a5aa:	68ba      	ldr	r2, [r7, #8]
 800a5ac:	4413      	add	r3, r2
 800a5ae:	687a      	ldr	r2, [r7, #4]
 800a5b0:	429a      	cmp	r2, r3
 800a5b2:	d108      	bne.n	800a5c6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	685a      	ldr	r2, [r3, #4]
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	685b      	ldr	r3, [r3, #4]
 800a5bc:	441a      	add	r2, r3
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	685b      	ldr	r3, [r3, #4]
 800a5ce:	68ba      	ldr	r2, [r7, #8]
 800a5d0:	441a      	add	r2, r3
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	429a      	cmp	r2, r3
 800a5d8:	d118      	bne.n	800a60c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	681a      	ldr	r2, [r3, #0]
 800a5de:	4b15      	ldr	r3, [pc, #84]	@ (800a634 <prvInsertBlockIntoFreeList+0xb0>)
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	429a      	cmp	r2, r3
 800a5e4:	d00d      	beq.n	800a602 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	685a      	ldr	r2, [r3, #4]
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	685b      	ldr	r3, [r3, #4]
 800a5f0:	441a      	add	r2, r3
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	681a      	ldr	r2, [r3, #0]
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	601a      	str	r2, [r3, #0]
 800a600:	e008      	b.n	800a614 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a602:	4b0c      	ldr	r3, [pc, #48]	@ (800a634 <prvInsertBlockIntoFreeList+0xb0>)
 800a604:	681a      	ldr	r2, [r3, #0]
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	601a      	str	r2, [r3, #0]
 800a60a:	e003      	b.n	800a614 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	681a      	ldr	r2, [r3, #0]
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a614:	68fa      	ldr	r2, [r7, #12]
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	429a      	cmp	r2, r3
 800a61a:	d002      	beq.n	800a622 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	687a      	ldr	r2, [r7, #4]
 800a620:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a622:	bf00      	nop
 800a624:	3714      	adds	r7, #20
 800a626:	46bd      	mov	sp, r7
 800a628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62c:	4770      	bx	lr
 800a62e:	bf00      	nop
 800a630:	2001361c 	.word	0x2001361c
 800a634:	20013624 	.word	0x20013624

0800a638 <arm_mat_mult_f32>:
 800a638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a63c:	460c      	mov	r4, r1
 800a63e:	b08b      	sub	sp, #44	@ 0x2c
 800a640:	8825      	ldrh	r5, [r4, #0]
 800a642:	9107      	str	r1, [sp, #28]
 800a644:	8841      	ldrh	r1, [r0, #2]
 800a646:	8806      	ldrh	r6, [r0, #0]
 800a648:	6843      	ldr	r3, [r0, #4]
 800a64a:	6857      	ldr	r7, [r2, #4]
 800a64c:	6860      	ldr	r0, [r4, #4]
 800a64e:	9602      	str	r6, [sp, #8]
 800a650:	428d      	cmp	r5, r1
 800a652:	8864      	ldrh	r4, [r4, #2]
 800a654:	f040 80f9 	bne.w	800a84a <arm_mat_mult_f32+0x212>
 800a658:	8811      	ldrh	r1, [r2, #0]
 800a65a:	42b1      	cmp	r1, r6
 800a65c:	f040 80f5 	bne.w	800a84a <arm_mat_mult_f32+0x212>
 800a660:	8851      	ldrh	r1, [r2, #2]
 800a662:	42a1      	cmp	r1, r4
 800a664:	f040 80f1 	bne.w	800a84a <arm_mat_mult_f32+0x212>
 800a668:	00aa      	lsls	r2, r5, #2
 800a66a:	2901      	cmp	r1, #1
 800a66c:	ea4f 0c95 	mov.w	ip, r5, lsr #2
 800a670:	ea4f 0481 	mov.w	r4, r1, lsl #2
 800a674:	f005 0e03 	and.w	lr, r5, #3
 800a678:	9206      	str	r2, [sp, #24]
 800a67a:	d170      	bne.n	800a75e <arm_mat_mult_f32+0x126>
 800a67c:	1d01      	adds	r1, r0, #4
 800a67e:	9105      	str	r1, [sp, #20]
 800a680:	ea4f 110c 	mov.w	r1, ip, lsl #4
 800a684:	4602      	mov	r2, r0
 800a686:	f107 0904 	add.w	r9, r7, #4
 800a68a:	9101      	str	r1, [sp, #4]
 800a68c:	eb03 1b0c 	add.w	fp, r3, ip, lsl #4
 800a690:	f103 0a10 	add.w	sl, r3, #16
 800a694:	f1aa 0310 	sub.w	r3, sl, #16
 800a698:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800a69c:	9303      	str	r3, [sp, #12]
 800a69e:	f1a9 0704 	sub.w	r7, r9, #4
 800a6a2:	eddf 7a6c 	vldr	s15, [pc, #432]	@ 800a854 <arm_mat_mult_f32+0x21c>
 800a6a6:	f1bc 0f00 	cmp.w	ip, #0
 800a6aa:	d052      	beq.n	800a752 <arm_mat_mult_f32+0x11a>
 800a6ac:	f102 0008 	add.w	r0, r2, #8
 800a6b0:	4653      	mov	r3, sl
 800a6b2:	4665      	mov	r5, ip
 800a6b4:	4611      	mov	r1, r2
 800a6b6:	ed13 6a04 	vldr	s12, [r3, #-16]
 800a6ba:	ed91 7a00 	vldr	s14, [r1]
 800a6be:	ed53 4a03 	vldr	s9, [r3, #-12]
 800a6c2:	edd0 6a00 	vldr	s13, [r0]
 800a6c6:	ed13 5a02 	vldr	s10, [r3, #-8]
 800a6ca:	ed53 5a01 	vldr	s11, [r3, #-4]
 800a6ce:	190e      	adds	r6, r1, r4
 800a6d0:	ee27 7a06 	vmul.f32	s14, s14, s12
 800a6d4:	ed96 6a00 	vldr	s12, [r6]
 800a6d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a6dc:	ee26 6a24 	vmul.f32	s12, s12, s9
 800a6e0:	1906      	adds	r6, r0, r4
 800a6e2:	ee36 6a27 	vadd.f32	s12, s12, s15
 800a6e6:	ee26 7a85 	vmul.f32	s14, s13, s10
 800a6ea:	edd6 7a00 	vldr	s15, [r6]
 800a6ee:	ee37 7a06 	vadd.f32	s14, s14, s12
 800a6f2:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800a6f6:	3d01      	subs	r5, #1
 800a6f8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a6fc:	f101 0110 	add.w	r1, r1, #16
 800a700:	f100 0010 	add.w	r0, r0, #16
 800a704:	f103 0310 	add.w	r3, r3, #16
 800a708:	d1d5      	bne.n	800a6b6 <arm_mat_mult_f32+0x7e>
 800a70a:	9b01      	ldr	r3, [sp, #4]
 800a70c:	4659      	mov	r1, fp
 800a70e:	441a      	add	r2, r3
 800a710:	f1be 0f00 	cmp.w	lr, #0
 800a714:	d00b      	beq.n	800a72e <arm_mat_mult_f32+0xf6>
 800a716:	4673      	mov	r3, lr
 800a718:	ed92 7a00 	vldr	s14, [r2]
 800a71c:	ecf1 6a01 	vldmia	r1!, {s13}
 800a720:	ee27 7a26 	vmul.f32	s14, s14, s13
 800a724:	3b01      	subs	r3, #1
 800a726:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a72a:	4422      	add	r2, r4
 800a72c:	d1f4      	bne.n	800a718 <arm_mat_mult_f32+0xe0>
 800a72e:	ece7 7a01 	vstmia	r7!, {s15}
 800a732:	454f      	cmp	r7, r9
 800a734:	4642      	mov	r2, r8
 800a736:	f108 0804 	add.w	r8, r8, #4
 800a73a:	d1b2      	bne.n	800a6a2 <arm_mat_mult_f32+0x6a>
 800a73c:	9b06      	ldr	r3, [sp, #24]
 800a73e:	449b      	add	fp, r3
 800a740:	449a      	add	sl, r3
 800a742:	9b02      	ldr	r3, [sp, #8]
 800a744:	3b01      	subs	r3, #1
 800a746:	44a1      	add	r9, r4
 800a748:	9302      	str	r3, [sp, #8]
 800a74a:	d004      	beq.n	800a756 <arm_mat_mult_f32+0x11e>
 800a74c:	9b07      	ldr	r3, [sp, #28]
 800a74e:	685a      	ldr	r2, [r3, #4]
 800a750:	e7a0      	b.n	800a694 <arm_mat_mult_f32+0x5c>
 800a752:	9903      	ldr	r1, [sp, #12]
 800a754:	e7dc      	b.n	800a710 <arm_mat_mult_f32+0xd8>
 800a756:	4618      	mov	r0, r3
 800a758:	b00b      	add	sp, #44	@ 0x2c
 800a75a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a75e:	ebc1 7281 	rsb	r2, r1, r1, lsl #30
 800a762:	0092      	lsls	r2, r2, #2
 800a764:	010e      	lsls	r6, r1, #4
 800a766:	9209      	str	r2, [sp, #36]	@ 0x24
 800a768:	00ca      	lsls	r2, r1, #3
 800a76a:	9204      	str	r2, [sp, #16]
 800a76c:	fb06 f20c 	mul.w	r2, r6, ip
 800a770:	1d05      	adds	r5, r0, #4
 800a772:	9203      	str	r2, [sp, #12]
 800a774:	eb03 120c 	add.w	r2, r3, ip, lsl #4
 800a778:	eb07 0b04 	add.w	fp, r7, r4
 800a77c:	9505      	str	r5, [sp, #20]
 800a77e:	9201      	str	r2, [sp, #4]
 800a780:	f103 0a10 	add.w	sl, r3, #16
 800a784:	f1aa 0310 	sub.w	r3, sl, #16
 800a788:	9308      	str	r3, [sp, #32]
 800a78a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a78c:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800a790:	eb0b 0803 	add.w	r8, fp, r3
 800a794:	eddf 7a2f 	vldr	s15, [pc, #188]	@ 800a854 <arm_mat_mult_f32+0x21c>
 800a798:	f1bc 0f00 	cmp.w	ip, #0
 800a79c:	d053      	beq.n	800a846 <arm_mat_mult_f32+0x20e>
 800a79e:	9b04      	ldr	r3, [sp, #16]
 800a7a0:	4665      	mov	r5, ip
 800a7a2:	18c1      	adds	r1, r0, r3
 800a7a4:	4602      	mov	r2, r0
 800a7a6:	4653      	mov	r3, sl
 800a7a8:	ed92 6a00 	vldr	s12, [r2]
 800a7ac:	ed13 7a04 	vldr	s14, [r3, #-16]
 800a7b0:	ed53 4a03 	vldr	s9, [r3, #-12]
 800a7b4:	ed53 6a02 	vldr	s13, [r3, #-8]
 800a7b8:	ed91 5a00 	vldr	s10, [r1]
 800a7bc:	ed53 5a01 	vldr	s11, [r3, #-4]
 800a7c0:	1917      	adds	r7, r2, r4
 800a7c2:	ee27 7a06 	vmul.f32	s14, s14, s12
 800a7c6:	ed97 6a00 	vldr	s12, [r7]
 800a7ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a7ce:	ee26 6a24 	vmul.f32	s12, s12, s9
 800a7d2:	190f      	adds	r7, r1, r4
 800a7d4:	ee36 6a27 	vadd.f32	s12, s12, s15
 800a7d8:	ee26 7a85 	vmul.f32	s14, s13, s10
 800a7dc:	edd7 7a00 	vldr	s15, [r7]
 800a7e0:	ee37 7a06 	vadd.f32	s14, s14, s12
 800a7e4:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800a7e8:	3d01      	subs	r5, #1
 800a7ea:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a7ee:	4432      	add	r2, r6
 800a7f0:	4431      	add	r1, r6
 800a7f2:	f103 0310 	add.w	r3, r3, #16
 800a7f6:	d1d7      	bne.n	800a7a8 <arm_mat_mult_f32+0x170>
 800a7f8:	9b03      	ldr	r3, [sp, #12]
 800a7fa:	9a01      	ldr	r2, [sp, #4]
 800a7fc:	4418      	add	r0, r3
 800a7fe:	f1be 0f00 	cmp.w	lr, #0
 800a802:	d00b      	beq.n	800a81c <arm_mat_mult_f32+0x1e4>
 800a804:	4673      	mov	r3, lr
 800a806:	edd0 6a00 	vldr	s13, [r0]
 800a80a:	ecb2 7a01 	vldmia	r2!, {s14}
 800a80e:	ee27 7a26 	vmul.f32	s14, s14, s13
 800a812:	3b01      	subs	r3, #1
 800a814:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a818:	4420      	add	r0, r4
 800a81a:	d1f4      	bne.n	800a806 <arm_mat_mult_f32+0x1ce>
 800a81c:	ece8 7a01 	vstmia	r8!, {s15}
 800a820:	45d8      	cmp	r8, fp
 800a822:	4648      	mov	r0, r9
 800a824:	f109 0904 	add.w	r9, r9, #4
 800a828:	d1b4      	bne.n	800a794 <arm_mat_mult_f32+0x15c>
 800a82a:	9a01      	ldr	r2, [sp, #4]
 800a82c:	9b06      	ldr	r3, [sp, #24]
 800a82e:	4611      	mov	r1, r2
 800a830:	4419      	add	r1, r3
 800a832:	449a      	add	sl, r3
 800a834:	9b02      	ldr	r3, [sp, #8]
 800a836:	9101      	str	r1, [sp, #4]
 800a838:	3b01      	subs	r3, #1
 800a83a:	44a3      	add	fp, r4
 800a83c:	9302      	str	r3, [sp, #8]
 800a83e:	d08a      	beq.n	800a756 <arm_mat_mult_f32+0x11e>
 800a840:	9b07      	ldr	r3, [sp, #28]
 800a842:	6858      	ldr	r0, [r3, #4]
 800a844:	e79e      	b.n	800a784 <arm_mat_mult_f32+0x14c>
 800a846:	9a08      	ldr	r2, [sp, #32]
 800a848:	e7d9      	b.n	800a7fe <arm_mat_mult_f32+0x1c6>
 800a84a:	f06f 0002 	mvn.w	r0, #2
 800a84e:	b00b      	add	sp, #44	@ 0x2c
 800a850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a854:	00000000 	.word	0x00000000

0800a858 <arm_mat_init_f32>:
 800a858:	8001      	strh	r1, [r0, #0]
 800a85a:	8042      	strh	r2, [r0, #2]
 800a85c:	6043      	str	r3, [r0, #4]
 800a85e:	4770      	bx	lr

0800a860 <handle_message_memory.constprop.4>:
 800a860:	b082      	sub	sp, #8
 800a862:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a866:	b0a7      	sub	sp, #156	@ 0x9c
 800a868:	ac30      	add	r4, sp, #192	@ 0xc0
 800a86a:	e884 000c 	stmia.w	r4, {r2, r3}
 800a86e:	e9dd 8336 	ldrd	r8, r3, [sp, #216]	@ 0xd8
 800a872:	9115      	str	r1, [sp, #84]	@ 0x54
 800a874:	9935      	ldr	r1, [sp, #212]	@ 0xd4
 800a876:	930c      	str	r3, [sp, #48]	@ 0x30
 800a878:	e9dd 9b33 	ldrd	r9, fp, [sp, #204]	@ 0xcc
 800a87c:	4604      	mov	r4, r0
 800a87e:	9213      	str	r2, [sp, #76]	@ 0x4c
 800a880:	2900      	cmp	r1, #0
 800a882:	f000 8230 	beq.w	800ace6 <handle_message_memory.constprop.4+0x486>
 800a886:	f8d4 c008 	ldr.w	ip, [r4, #8]
 800a88a:	46e6      	mov	lr, ip
 800a88c:	f1bc 0f00 	cmp.w	ip, #0
 800a890:	d03e      	beq.n	800a910 <handle_message_memory.constprop.4+0xb0>
 800a892:	f04f 0e00 	mov.w	lr, #0
 800a896:	465e      	mov	r6, fp
 800a898:	4645      	mov	r5, r8
 800a89a:	46f2      	mov	sl, lr
 800a89c:	46cb      	mov	fp, r9
 800a89e:	9114      	str	r1, [sp, #80]	@ 0x50
 800a8a0:	f8cd e028 	str.w	lr, [sp, #40]	@ 0x28
 800a8a4:	46a0      	mov	r8, r4
 800a8a6:	f8d8 2014 	ldr.w	r2, [r8, #20]
 800a8aa:	ebca 110a 	rsb	r1, sl, sl, lsl #4
 800a8ae:	eb02 0381 	add.w	r3, r2, r1, lsl #2
 800a8b2:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800a8b6:	920d      	str	r2, [sp, #52]	@ 0x34
 800a8b8:	689a      	ldr	r2, [r3, #8]
 800a8ba:	f893 9011 	ldrb.w	r9, [r3, #17]
 800a8be:	920e      	str	r2, [sp, #56]	@ 0x38
 800a8c0:	68da      	ldr	r2, [r3, #12]
 800a8c2:	7e19      	ldrb	r1, [r3, #24]
 800a8c4:	791f      	ldrb	r7, [r3, #4]
 800a8c6:	920f      	str	r2, [sp, #60]	@ 0x3c
 800a8c8:	695a      	ldr	r2, [r3, #20]
 800a8ca:	69db      	ldr	r3, [r3, #28]
 800a8cc:	9209      	str	r2, [sp, #36]	@ 0x24
 800a8ce:	910b      	str	r1, [sp, #44]	@ 0x2c
 800a8d0:	9310      	str	r3, [sp, #64]	@ 0x40
 800a8d2:	f1b9 0f00 	cmp.w	r9, #0
 800a8d6:	d044      	beq.n	800a962 <handle_message_memory.constprop.4+0x102>
 800a8d8:	2a00      	cmp	r2, #0
 800a8da:	d060      	beq.n	800a99e <handle_message_memory.constprop.4+0x13e>
 800a8dc:	2900      	cmp	r1, #0
 800a8de:	d15e      	bne.n	800a99e <handle_message_memory.constprop.4+0x13e>
 800a8e0:	2f10      	cmp	r7, #16
 800a8e2:	f000 81bf 	beq.w	800ac64 <handle_message_memory.constprop.4+0x404>
 800a8e6:	2e00      	cmp	r6, #0
 800a8e8:	f040 81d4 	bne.w	800ac94 <handle_message_memory.constprop.4+0x434>
 800a8ec:	2f12      	cmp	r7, #18
 800a8ee:	f000 817a 	beq.w	800abe6 <handle_message_memory.constprop.4+0x386>
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	9309      	str	r3, [sp, #36]	@ 0x24
 800a8f6:	2f64      	cmp	r7, #100	@ 0x64
 800a8f8:	d01e      	beq.n	800a938 <handle_message_memory.constprop.4+0xd8>
 800a8fa:	2e00      	cmp	r6, #0
 800a8fc:	f040 808a 	bne.w	800aa14 <handle_message_memory.constprop.4+0x1b4>
 800a900:	f8d8 c008 	ldr.w	ip, [r8, #8]
 800a904:	f10a 0a01 	add.w	sl, sl, #1
 800a908:	45e2      	cmp	sl, ip
 800a90a:	d3cc      	bcc.n	800a8a6 <handle_message_memory.constprop.4+0x46>
 800a90c:	f8dd e028 	ldr.w	lr, [sp, #40]	@ 0x28
 800a910:	4670      	mov	r0, lr
 800a912:	b027      	add	sp, #156	@ 0x9c
 800a914:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a918:	b002      	add	sp, #8
 800a91a:	4770      	bx	lr
 800a91c:	2e00      	cmp	r6, #0
 800a91e:	f040 8176 	bne.w	800ac0e <handle_message_memory.constprop.4+0x3ae>
 800a922:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a924:	2b00      	cmp	r3, #0
 800a926:	f000 816f 	beq.w	800ac08 <handle_message_memory.constprop.4+0x3a8>
 800a92a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a92c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a92e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800a932:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a936:	930a      	str	r3, [sp, #40]	@ 0x28
 800a938:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	f000 81a6 	beq.w	800ac8c <handle_message_memory.constprop.4+0x42c>
 800a940:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a942:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800a944:	4613      	mov	r3, r2
 800a946:	2a00      	cmp	r2, #0
 800a948:	bf08      	it	eq
 800a94a:	460b      	moveq	r3, r1
 800a94c:	930e      	str	r3, [sp, #56]	@ 0x38
 800a94e:	2e00      	cmp	r6, #0
 800a950:	d141      	bne.n	800a9d6 <handle_message_memory.constprop.4+0x176>
 800a952:	e9dd 1209 	ldrd	r1, r2, [sp, #36]	@ 0x24
 800a956:	fb01 2303 	mla	r3, r1, r3, r2
 800a95a:	f8d8 c008 	ldr.w	ip, [r8, #8]
 800a95e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a960:	e7d0      	b.n	800a904 <handle_message_memory.constprop.4+0xa4>
 800a962:	2e00      	cmp	r6, #0
 800a964:	f040 80be 	bne.w	800aae4 <handle_message_memory.constprop.4+0x284>
 800a968:	2f10      	cmp	r7, #16
 800a96a:	d1bf      	bne.n	800a8ec <handle_message_memory.constprop.4+0x8c>
 800a96c:	2900      	cmp	r1, #0
 800a96e:	f040 8136 	bne.w	800abde <handle_message_memory.constprop.4+0x37e>
 800a972:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a974:	b14b      	cbz	r3, 800a98a <handle_message_memory.constprop.4+0x12a>
 800a976:	2e00      	cmp	r6, #0
 800a978:	f040 81af 	bne.w	800acda <handle_message_memory.constprop.4+0x47a>
 800a97c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a97e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a980:	f8d8 c008 	ldr.w	ip, [r8, #8]
 800a984:	4413      	add	r3, r2
 800a986:	930a      	str	r3, [sp, #40]	@ 0x28
 800a988:	e7bc      	b.n	800a904 <handle_message_memory.constprop.4+0xa4>
 800a98a:	2e00      	cmp	r6, #0
 800a98c:	f040 8163 	bne.w	800ac56 <handle_message_memory.constprop.4+0x3f6>
 800a990:	f8d8 c008 	ldr.w	ip, [r8, #8]
 800a994:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a996:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a998:	4413      	add	r3, r2
 800a99a:	930a      	str	r3, [sp, #40]	@ 0x28
 800a99c:	e7b2      	b.n	800a904 <handle_message_memory.constprop.4+0xa4>
 800a99e:	2f10      	cmp	r7, #16
 800a9a0:	d0bc      	beq.n	800a91c <handle_message_memory.constprop.4+0xbc>
 800a9a2:	2e00      	cmp	r6, #0
 800a9a4:	f040 8134 	bne.w	800ac10 <handle_message_memory.constprop.4+0x3b0>
 800a9a8:	2f12      	cmp	r7, #18
 800a9aa:	d04b      	beq.n	800aa44 <handle_message_memory.constprop.4+0x1e4>
 800a9ac:	2f64      	cmp	r7, #100	@ 0x64
 800a9ae:	f000 810d 	beq.w	800abcc <handle_message_memory.constprop.4+0x36c>
 800a9b2:	4bb2      	ldr	r3, [pc, #712]	@ (800ac7c <handle_message_memory.constprop.4+0x41c>)
 800a9b4:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 800a9b8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	f040 810a 	bne.w	800abd4 <handle_message_memory.constprop.4+0x374>
 800a9c0:	9b32      	ldr	r3, [sp, #200]	@ 0xc8
 800a9c2:	9309      	str	r3, [sp, #36]	@ 0x24
 800a9c4:	2e00      	cmp	r6, #0
 800a9c6:	f040 8143 	bne.w	800ac50 <handle_message_memory.constprop.4+0x3f0>
 800a9ca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	@ 0x24
 800a9ce:	fb04 3302 	mla	r3, r4, r2, r3
 800a9d2:	930a      	str	r3, [sp, #40]	@ 0x28
 800a9d4:	e794      	b.n	800a900 <handle_message_memory.constprop.4+0xa0>
 800a9d6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a9d8:	1e5f      	subs	r7, r3, #1
 800a9da:	2400      	movs	r4, #0
 800a9dc:	46b9      	mov	r9, r7
 800a9de:	f85b 7034 	ldr.w	r7, [fp, r4, lsl #3]
 800a9e2:	464a      	mov	r2, r9
 800a9e4:	4629      	mov	r1, r5
 800a9e6:	4638      	mov	r0, r7
 800a9e8:	f012 fcf8 	bl	801d3dc <memcmp>
 800a9ec:	4603      	mov	r3, r0
 800a9ee:	49a4      	ldr	r1, [pc, #656]	@ (800ac80 <handle_message_memory.constprop.4+0x420>)
 800a9f0:	2205      	movs	r2, #5
 800a9f2:	eb07 0009 	add.w	r0, r7, r9
 800a9f6:	b923      	cbnz	r3, 800aa02 <handle_message_memory.constprop.4+0x1a2>
 800a9f8:	f012 fcf0 	bl	801d3dc <memcmp>
 800a9fc:	2800      	cmp	r0, #0
 800a9fe:	f000 8163 	beq.w	800acc8 <handle_message_memory.constprop.4+0x468>
 800aa02:	3401      	adds	r4, #1
 800aa04:	42a6      	cmp	r6, r4
 800aa06:	d1ea      	bne.n	800a9de <handle_message_memory.constprop.4+0x17e>
 800aa08:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aa0a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800aa0c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800aa0e:	fb01 3302 	mla	r3, r1, r2, r3
 800aa12:	930a      	str	r3, [sp, #40]	@ 0x28
 800aa14:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800aa16:	f7f5 fc53 	bl	80002c0 <strlen>
 800aa1a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800aa1c:	9536      	str	r5, [sp, #216]	@ 0xd8
 800aa1e:	3001      	adds	r0, #1
 800aa20:	9000      	str	r0, [sp, #0]
 800aa22:	ad16      	add	r5, sp, #88	@ 0x58
 800aa24:	9337      	str	r3, [sp, #220]	@ 0xdc
 800aa26:	ac36      	add	r4, sp, #216	@ 0xd8
 800aa28:	4628      	mov	r0, r5
 800aa2a:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800aa2e:	f004 fabd 	bl	800efac <micro_ros_string_utilities_remove_tail_chars>
 800aa32:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800aa36:	f8d8 c008 	ldr.w	ip, [r8, #8]
 800aa3a:	910c      	str	r1, [sp, #48]	@ 0x30
 800aa3c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800aa40:	4605      	mov	r5, r0
 800aa42:	e75f      	b.n	800a904 <handle_message_memory.constprop.4+0xa4>
 800aa44:	4b8f      	ldr	r3, [pc, #572]	@ (800ac84 <handle_message_memory.constprop.4+0x424>)
 800aa46:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 800aa48:	6819      	ldr	r1, [r3, #0]
 800aa4a:	f003 fa35 	bl	800deb8 <get_message_typesupport_handle>
 800aa4e:	6843      	ldr	r3, [r0, #4]
 800aa50:	68dc      	ldr	r4, [r3, #12]
 800aa52:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	f040 80bd 	bne.w	800abd4 <handle_message_memory.constprop.4+0x374>
 800aa5a:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 800aa5c:	9309      	str	r3, [sp, #36]	@ 0x24
 800aa5e:	2e00      	cmp	r6, #0
 800aa60:	f040 80f6 	bne.w	800ac50 <handle_message_memory.constprop.4+0x3f0>
 800aa64:	461a      	mov	r2, r3
 800aa66:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aa68:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 800aa6a:	fb02 3304 	mla	r3, r2, r4, r3
 800aa6e:	930a      	str	r3, [sp, #40]	@ 0x28
 800aa70:	4b84      	ldr	r3, [pc, #528]	@ (800ac84 <handle_message_memory.constprop.4+0x424>)
 800aa72:	6819      	ldr	r1, [r3, #0]
 800aa74:	f003 fa20 	bl	800deb8 <get_message_typesupport_handle>
 800aa78:	f8d0 c004 	ldr.w	ip, [r0, #4]
 800aa7c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aa7e:	2a00      	cmp	r2, #0
 800aa80:	f43f af3b 	beq.w	800a8fa <handle_message_memory.constprop.4+0x9a>
 800aa84:	ab04      	add	r3, sp, #16
 800aa86:	f8cd 803c 	str.w	r8, [sp, #60]	@ 0x3c
 800aa8a:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
 800aa8e:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800aa92:	960b      	str	r6, [sp, #44]	@ 0x2c
 800aa94:	f8cd a038 	str.w	sl, [sp, #56]	@ 0x38
 800aa98:	2700      	movs	r7, #0
 800aa9a:	ac36      	add	r4, sp, #216	@ 0xd8
 800aa9c:	f10d 09c8 	add.w	r9, sp, #200	@ 0xc8
 800aaa0:	46e3      	mov	fp, ip
 800aaa2:	4692      	mov	sl, r2
 800aaa4:	461e      	mov	r6, r3
 800aaa6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800aaa8:	9337      	str	r3, [sp, #220]	@ 0xdc
 800aaaa:	9536      	str	r5, [sp, #216]	@ 0xd8
 800aaac:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800aab0:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 800aab4:	e899 000f 	ldmia.w	r9, {r0, r1, r2, r3}
 800aab8:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800aabc:	ab30      	add	r3, sp, #192	@ 0xc0
 800aabe:	cb0c      	ldmia	r3, {r2, r3}
 800aac0:	2100      	movs	r1, #0
 800aac2:	4658      	mov	r0, fp
 800aac4:	f7ff fecc 	bl	800a860 <handle_message_memory.constprop.4>
 800aac8:	3701      	adds	r7, #1
 800aaca:	4557      	cmp	r7, sl
 800aacc:	4480      	add	r8, r0
 800aace:	d1ea      	bne.n	800aaa6 <handle_message_memory.constprop.4+0x246>
 800aad0:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800aad4:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 800aad8:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800aada:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800aade:	f8dd 803c 	ldr.w	r8, [sp, #60]	@ 0x3c
 800aae2:	e70a      	b.n	800a8fa <handle_message_memory.constprop.4+0x9a>
 800aae4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800aae6:	9337      	str	r3, [sp, #220]	@ 0xdc
 800aae8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800aaea:	9536      	str	r5, [sp, #216]	@ 0xd8
 800aaec:	ac36      	add	r4, sp, #216	@ 0xd8
 800aaee:	9300      	str	r3, [sp, #0]
 800aaf0:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800aaf4:	4620      	mov	r0, r4
 800aaf6:	f004 fa2d 	bl	800ef54 <micro_ros_string_utilities_append>
 800aafa:	4b63      	ldr	r3, [pc, #396]	@ (800ac88 <handle_message_memory.constprop.4+0x428>)
 800aafc:	9300      	str	r3, [sp, #0]
 800aafe:	ad16      	add	r5, sp, #88	@ 0x58
 800ab00:	4628      	mov	r0, r5
 800ab02:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800ab06:	f004 fa25 	bl	800ef54 <micro_ros_string_utilities_append>
 800ab0a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800ab0e:	2f10      	cmp	r7, #16
 800ab10:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ab14:	4605      	mov	r5, r0
 800ab16:	910c      	str	r1, [sp, #48]	@ 0x30
 800ab18:	f47f aee8 	bne.w	800a8ec <handle_message_memory.constprop.4+0x8c>
 800ab1c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	f43f af27 	beq.w	800a972 <handle_message_memory.constprop.4+0x112>
 800ab24:	f8cd 902c 	str.w	r9, [sp, #44]	@ 0x2c
 800ab28:	2401      	movs	r4, #1
 800ab2a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ab2c:	9711      	str	r7, [sp, #68]	@ 0x44
 800ab2e:	f04f 0900 	mov.w	r9, #0
 800ab32:	3b01      	subs	r3, #1
 800ab34:	464f      	mov	r7, r9
 800ab36:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800ab3a:	46a1      	mov	r9, r4
 800ab3c:	4698      	mov	r8, r3
 800ab3e:	f85b 4037 	ldr.w	r4, [fp, r7, lsl #3]
 800ab42:	4620      	mov	r0, r4
 800ab44:	f7f5 fbbc 	bl	80002c0 <strlen>
 800ab48:	4629      	mov	r1, r5
 800ab4a:	4602      	mov	r2, r0
 800ab4c:	4620      	mov	r0, r4
 800ab4e:	f012 fc45 	bl	801d3dc <memcmp>
 800ab52:	b930      	cbnz	r0, 800ab62 <handle_message_memory.constprop.4+0x302>
 800ab54:	4642      	mov	r2, r8
 800ab56:	4629      	mov	r1, r5
 800ab58:	4620      	mov	r0, r4
 800ab5a:	f012 fc3f 	bl	801d3dc <memcmp>
 800ab5e:	2800      	cmp	r0, #0
 800ab60:	d049      	beq.n	800abf6 <handle_message_memory.constprop.4+0x396>
 800ab62:	3701      	adds	r7, #1
 800ab64:	42be      	cmp	r6, r7
 800ab66:	d8ea      	bhi.n	800ab3e <handle_message_memory.constprop.4+0x2de>
 800ab68:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 800ab6a:	f8dd 8048 	ldr.w	r8, [sp, #72]	@ 0x48
 800ab6e:	464c      	mov	r4, r9
 800ab70:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	@ 0x24
 800ab74:	2f12      	cmp	r7, #18
 800ab76:	fb04 3302 	mla	r3, r4, r2, r3
 800ab7a:	930a      	str	r3, [sp, #40]	@ 0x28
 800ab7c:	f47f aebb 	bne.w	800a8f6 <handle_message_memory.constprop.4+0x96>
 800ab80:	4b40      	ldr	r3, [pc, #256]	@ (800ac84 <handle_message_memory.constprop.4+0x424>)
 800ab82:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 800ab84:	6819      	ldr	r1, [r3, #0]
 800ab86:	f003 f997 	bl	800deb8 <get_message_typesupport_handle>
 800ab8a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ab8c:	f8d0 c004 	ldr.w	ip, [r0, #4]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	f47f af73 	bne.w	800aa7c <handle_message_memory.constprop.4+0x21c>
 800ab96:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ab98:	9337      	str	r3, [sp, #220]	@ 0xdc
 800ab9a:	9536      	str	r5, [sp, #216]	@ 0xd8
 800ab9c:	ac36      	add	r4, sp, #216	@ 0xd8
 800ab9e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800aba2:	ab04      	add	r3, sp, #16
 800aba4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800aba8:	f10d 09c8 	add.w	r9, sp, #200	@ 0xc8
 800abac:	e899 000f 	ldmia.w	r9, {r0, r1, r2, r3}
 800abb0:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800abb4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800abb6:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800abb8:	4419      	add	r1, r3
 800abba:	ab30      	add	r3, sp, #192	@ 0xc0
 800abbc:	cb0c      	ldmia	r3, {r2, r3}
 800abbe:	4660      	mov	r0, ip
 800abc0:	f7ff fe4e 	bl	800a860 <handle_message_memory.constprop.4>
 800abc4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800abc6:	4403      	add	r3, r0
 800abc8:	930a      	str	r3, [sp, #40]	@ 0x28
 800abca:	e696      	b.n	800a8fa <handle_message_memory.constprop.4+0x9a>
 800abcc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d038      	beq.n	800ac44 <handle_message_memory.constprop.4+0x3e4>
 800abd2:	240c      	movs	r4, #12
 800abd4:	2301      	movs	r3, #1
 800abd6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800abd8:	2e00      	cmp	r6, #0
 800abda:	d0c9      	beq.n	800ab70 <handle_message_memory.constprop.4+0x310>
 800abdc:	e7a5      	b.n	800ab2a <handle_message_memory.constprop.4+0x2ca>
 800abde:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800abe0:	4413      	add	r3, r2
 800abe2:	930a      	str	r3, [sp, #40]	@ 0x28
 800abe4:	e68e      	b.n	800a904 <handle_message_memory.constprop.4+0xa4>
 800abe6:	4b27      	ldr	r3, [pc, #156]	@ (800ac84 <handle_message_memory.constprop.4+0x424>)
 800abe8:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 800abea:	6819      	ldr	r1, [r3, #0]
 800abec:	f003 f964 	bl	800deb8 <get_message_typesupport_handle>
 800abf0:	f8d0 c004 	ldr.w	ip, [r0, #4]
 800abf4:	e7cf      	b.n	800ab96 <handle_message_memory.constprop.4+0x336>
 800abf6:	464c      	mov	r4, r9
 800abf8:	46b9      	mov	r9, r7
 800abfa:	eb0b 03c9 	add.w	r3, fp, r9, lsl #3
 800abfe:	e9dd 7811 	ldrd	r7, r8, [sp, #68]	@ 0x44
 800ac02:	685b      	ldr	r3, [r3, #4]
 800ac04:	9309      	str	r3, [sp, #36]	@ 0x24
 800ac06:	e7b3      	b.n	800ab70 <handle_message_memory.constprop.4+0x310>
 800ac08:	9b32      	ldr	r3, [sp, #200]	@ 0xc8
 800ac0a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ac0c:	e68e      	b.n	800a92c <handle_message_memory.constprop.4+0xcc>
 800ac0e:	2764      	movs	r7, #100	@ 0x64
 800ac10:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ac12:	9337      	str	r3, [sp, #220]	@ 0xdc
 800ac14:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ac16:	9536      	str	r5, [sp, #216]	@ 0xd8
 800ac18:	ac36      	add	r4, sp, #216	@ 0xd8
 800ac1a:	9300      	str	r3, [sp, #0]
 800ac1c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800ac20:	4620      	mov	r0, r4
 800ac22:	f004 f997 	bl	800ef54 <micro_ros_string_utilities_append>
 800ac26:	4b18      	ldr	r3, [pc, #96]	@ (800ac88 <handle_message_memory.constprop.4+0x428>)
 800ac28:	9300      	str	r3, [sp, #0]
 800ac2a:	ad16      	add	r5, sp, #88	@ 0x58
 800ac2c:	4628      	mov	r0, r5
 800ac2e:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800ac32:	f004 f98f 	bl	800ef54 <micro_ros_string_utilities_append>
 800ac36:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800ac3a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ac3e:	4605      	mov	r5, r0
 800ac40:	910c      	str	r1, [sp, #48]	@ 0x30
 800ac42:	e6b1      	b.n	800a9a8 <handle_message_memory.constprop.4+0x148>
 800ac44:	9b32      	ldr	r3, [sp, #200]	@ 0xc8
 800ac46:	9309      	str	r3, [sp, #36]	@ 0x24
 800ac48:	240c      	movs	r4, #12
 800ac4a:	2e00      	cmp	r6, #0
 800ac4c:	f43f ae6e 	beq.w	800a92c <handle_message_memory.constprop.4+0xcc>
 800ac50:	2301      	movs	r3, #1
 800ac52:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ac54:	e769      	b.n	800ab2a <handle_message_memory.constprop.4+0x2ca>
 800ac56:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ac58:	9309      	str	r3, [sp, #36]	@ 0x24
 800ac5a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ac5c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ac5e:	2401      	movs	r4, #1
 800ac60:	2710      	movs	r7, #16
 800ac62:	e762      	b.n	800ab2a <handle_message_memory.constprop.4+0x2ca>
 800ac64:	2e00      	cmp	r6, #0
 800ac66:	d144      	bne.n	800acf2 <handle_message_memory.constprop.4+0x492>
 800ac68:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	f43f ae92 	beq.w	800a994 <handle_message_memory.constprop.4+0x134>
 800ac70:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ac72:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ac74:	4413      	add	r3, r2
 800ac76:	930a      	str	r3, [sp, #40]	@ 0x28
 800ac78:	e644      	b.n	800a904 <handle_message_memory.constprop.4+0xa4>
 800ac7a:	bf00      	nop
 800ac7c:	0801f968 	.word	0x0801f968
 800ac80:	0801e6ec 	.word	0x0801e6ec
 800ac84:	200005a0 	.word	0x200005a0
 800ac88:	0801e6f4 	.word	0x0801e6f4
 800ac8c:	a81a      	add	r0, sp, #104	@ 0x68
 800ac8e:	f002 fa89 	bl	800d1a4 <rcutils_get_default_allocator>
 800ac92:	e655      	b.n	800a940 <handle_message_memory.constprop.4+0xe0>
 800ac94:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ac96:	9337      	str	r3, [sp, #220]	@ 0xdc
 800ac98:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ac9a:	9536      	str	r5, [sp, #216]	@ 0xd8
 800ac9c:	ac36      	add	r4, sp, #216	@ 0xd8
 800ac9e:	9300      	str	r3, [sp, #0]
 800aca0:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800aca4:	4620      	mov	r0, r4
 800aca6:	f004 f955 	bl	800ef54 <micro_ros_string_utilities_append>
 800acaa:	4b1f      	ldr	r3, [pc, #124]	@ (800ad28 <handle_message_memory.constprop.4+0x4c8>)
 800acac:	9300      	str	r3, [sp, #0]
 800acae:	ad16      	add	r5, sp, #88	@ 0x58
 800acb0:	4628      	mov	r0, r5
 800acb2:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800acb6:	f004 f94d 	bl	800ef54 <micro_ros_string_utilities_append>
 800acba:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800acbe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800acc2:	4605      	mov	r5, r0
 800acc4:	910c      	str	r1, [sp, #48]	@ 0x30
 800acc6:	e611      	b.n	800a8ec <handle_message_memory.constprop.4+0x8c>
 800acc8:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 800accc:	e9dd 1209 	ldrd	r1, r2, [sp, #36]	@ 0x24
 800acd0:	6863      	ldr	r3, [r4, #4]
 800acd2:	fb03 2301 	mla	r3, r3, r1, r2
 800acd6:	930a      	str	r3, [sp, #40]	@ 0x28
 800acd8:	e69c      	b.n	800aa14 <handle_message_memory.constprop.4+0x1b4>
 800acda:	9309      	str	r3, [sp, #36]	@ 0x24
 800acdc:	2300      	movs	r3, #0
 800acde:	2401      	movs	r4, #1
 800ace0:	2710      	movs	r7, #16
 800ace2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ace4:	e721      	b.n	800ab2a <handle_message_memory.constprop.4+0x2ca>
 800ace6:	a821      	add	r0, sp, #132	@ 0x84
 800ace8:	9109      	str	r1, [sp, #36]	@ 0x24
 800acea:	f002 fa5b 	bl	800d1a4 <rcutils_get_default_allocator>
 800acee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800acf0:	e5c9      	b.n	800a886 <handle_message_memory.constprop.4+0x26>
 800acf2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800acf4:	9337      	str	r3, [sp, #220]	@ 0xdc
 800acf6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800acf8:	9536      	str	r5, [sp, #216]	@ 0xd8
 800acfa:	ac36      	add	r4, sp, #216	@ 0xd8
 800acfc:	9300      	str	r3, [sp, #0]
 800acfe:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800ad02:	4620      	mov	r0, r4
 800ad04:	f004 f926 	bl	800ef54 <micro_ros_string_utilities_append>
 800ad08:	4b07      	ldr	r3, [pc, #28]	@ (800ad28 <handle_message_memory.constprop.4+0x4c8>)
 800ad0a:	9300      	str	r3, [sp, #0]
 800ad0c:	ad16      	add	r5, sp, #88	@ 0x58
 800ad0e:	4628      	mov	r0, r5
 800ad10:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800ad14:	f004 f91e 	bl	800ef54 <micro_ros_string_utilities_append>
 800ad18:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800ad1c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ad20:	4605      	mov	r5, r0
 800ad22:	910c      	str	r1, [sp, #48]	@ 0x30
 800ad24:	e625      	b.n	800a972 <handle_message_memory.constprop.4+0x112>
 800ad26:	bf00      	nop
 800ad28:	0801e6f4 	.word	0x0801e6f4

0800ad2c <handle_message_memory.constprop.2>:
 800ad2c:	b082      	sub	sp, #8
 800ad2e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad32:	b0a9      	sub	sp, #164	@ 0xa4
 800ad34:	ac32      	add	r4, sp, #200	@ 0xc8
 800ad36:	e884 000c 	stmia.w	r4, {r2, r3}
 800ad3a:	e9dd 8338 	ldrd	r8, r3, [sp, #224]	@ 0xe0
 800ad3e:	910f      	str	r1, [sp, #60]	@ 0x3c
 800ad40:	9937      	ldr	r1, [sp, #220]	@ 0xdc
 800ad42:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ad44:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 800ad46:	f8dd a0d8 	ldr.w	sl, [sp, #216]	@ 0xd8
 800ad4a:	9008      	str	r0, [sp, #32]
 800ad4c:	9218      	str	r2, [sp, #96]	@ 0x60
 800ad4e:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ad50:	2900      	cmp	r1, #0
 800ad52:	f000 8290 	beq.w	800b276 <handle_message_memory.constprop.2+0x54a>
 800ad56:	680b      	ldr	r3, [r1, #0]
 800ad58:	9311      	str	r3, [sp, #68]	@ 0x44
 800ad5a:	690b      	ldr	r3, [r1, #16]
 800ad5c:	9312      	str	r3, [sp, #72]	@ 0x48
 800ad5e:	4603      	mov	r3, r0
 800ad60:	689b      	ldr	r3, [r3, #8]
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	f000 8207 	beq.w	800b176 <handle_message_memory.constprop.2+0x44a>
 800ad68:	2300      	movs	r3, #0
 800ad6a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ad6c:	469b      	mov	fp, r3
 800ad6e:	4654      	mov	r4, sl
 800ad70:	9114      	str	r1, [sp, #80]	@ 0x50
 800ad72:	f8cd 8030 	str.w	r8, [sp, #48]	@ 0x30
 800ad76:	9b08      	ldr	r3, [sp, #32]
 800ad78:	695a      	ldr	r2, [r3, #20]
 800ad7a:	ebcb 110b 	rsb	r1, fp, fp, lsl #4
 800ad7e:	eb02 0381 	add.w	r3, r2, r1, lsl #2
 800ad82:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800ad86:	920d      	str	r2, [sp, #52]	@ 0x34
 800ad88:	e9d3 5102 	ldrd	r5, r1, [r3, #8]
 800ad8c:	7c5a      	ldrb	r2, [r3, #17]
 800ad8e:	f893 8004 	ldrb.w	r8, [r3, #4]
 800ad92:	695e      	ldr	r6, [r3, #20]
 800ad94:	f893 a018 	ldrb.w	sl, [r3, #24]
 800ad98:	69db      	ldr	r3, [r3, #28]
 800ad9a:	910e      	str	r1, [sp, #56]	@ 0x38
 800ad9c:	930a      	str	r3, [sp, #40]	@ 0x28
 800ad9e:	2a00      	cmp	r2, #0
 800ada0:	d07c      	beq.n	800ae9c <handle_message_memory.constprop.2+0x170>
 800ada2:	2e00      	cmp	r6, #0
 800ada4:	f000 80c8 	beq.w	800af38 <handle_message_memory.constprop.2+0x20c>
 800ada8:	f1ba 0f00 	cmp.w	sl, #0
 800adac:	f040 80c4 	bne.w	800af38 <handle_message_memory.constprop.2+0x20c>
 800adb0:	f1b8 0f10 	cmp.w	r8, #16
 800adb4:	f000 821c 	beq.w	800b1f0 <handle_message_memory.constprop.2+0x4c4>
 800adb8:	2c00      	cmp	r4, #0
 800adba:	f040 81c1 	bne.w	800b140 <handle_message_memory.constprop.2+0x414>
 800adbe:	f1b8 0f12 	cmp.w	r8, #18
 800adc2:	f000 8155 	beq.w	800b070 <handle_message_memory.constprop.2+0x344>
 800adc6:	2600      	movs	r6, #0
 800adc8:	f1b8 0f64 	cmp.w	r8, #100	@ 0x64
 800adcc:	d00d      	beq.n	800adea <handle_message_memory.constprop.2+0xbe>
 800adce:	2c00      	cmp	r4, #0
 800add0:	d14d      	bne.n	800ae6e <handle_message_memory.constprop.2+0x142>
 800add2:	9b08      	ldr	r3, [sp, #32]
 800add4:	689b      	ldr	r3, [r3, #8]
 800add6:	f10b 0b01 	add.w	fp, fp, #1
 800adda:	459b      	cmp	fp, r3
 800addc:	d3cb      	bcc.n	800ad76 <handle_message_memory.constprop.2+0x4a>
 800adde:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ade0:	b029      	add	sp, #164	@ 0xa4
 800ade2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ade6:	b002      	add	sp, #8
 800ade8:	4770      	bx	lr
 800adea:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800adec:	2b00      	cmp	r3, #0
 800adee:	f000 820a 	beq.w	800b206 <handle_message_memory.constprop.2+0x4da>
 800adf2:	f8d3 9000 	ldr.w	r9, [r3]
 800adf6:	f8d3 a010 	ldr.w	sl, [r3, #16]
 800adfa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800adfc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800adfe:	589a      	ldr	r2, [r3, r2]
 800ae00:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 800ae02:	2d00      	cmp	r5, #0
 800ae04:	bf08      	it	eq
 800ae06:	461d      	moveq	r5, r3
 800ae08:	2c00      	cmp	r4, #0
 800ae0a:	f000 813d 	beq.w	800b088 <handle_message_memory.constprop.2+0x35c>
 800ae0e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ae10:	960a      	str	r6, [sp, #40]	@ 0x28
 800ae12:	9515      	str	r5, [sp, #84]	@ 0x54
 800ae14:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ae16:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 800ae18:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800ae1c:	f103 38ff 	add.w	r8, r3, #4294967295	@ 0xffffffff
 800ae20:	2700      	movs	r7, #0
 800ae22:	f8cd 9040 	str.w	r9, [sp, #64]	@ 0x40
 800ae26:	4693      	mov	fp, r2
 800ae28:	f855 9037 	ldr.w	r9, [r5, r7, lsl #3]
 800ae2c:	4642      	mov	r2, r8
 800ae2e:	4631      	mov	r1, r6
 800ae30:	4648      	mov	r0, r9
 800ae32:	f012 fad3 	bl	801d3dc <memcmp>
 800ae36:	4684      	mov	ip, r0
 800ae38:	49a5      	ldr	r1, [pc, #660]	@ (800b0d0 <handle_message_memory.constprop.2+0x3a4>)
 800ae3a:	2205      	movs	r2, #5
 800ae3c:	eb09 0008 	add.w	r0, r9, r8
 800ae40:	f1bc 0f00 	cmp.w	ip, #0
 800ae44:	d104      	bne.n	800ae50 <handle_message_memory.constprop.2+0x124>
 800ae46:	f012 fac9 	bl	801d3dc <memcmp>
 800ae4a:	2800      	cmp	r0, #0
 800ae4c:	f000 8208 	beq.w	800b260 <handle_message_memory.constprop.2+0x534>
 800ae50:	3701      	adds	r7, #1
 800ae52:	42bc      	cmp	r4, r7
 800ae54:	d1e8      	bne.n	800ae28 <handle_message_memory.constprop.2+0xfc>
 800ae56:	465a      	mov	r2, fp
 800ae58:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800ae5a:	f8dd 9040 	ldr.w	r9, [sp, #64]	@ 0x40
 800ae5e:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 800ae60:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 800ae64:	fb05 f306 	mul.w	r3, r5, r6
 800ae68:	2e00      	cmp	r6, #0
 800ae6a:	f040 8112 	bne.w	800b092 <handle_message_memory.constprop.2+0x366>
 800ae6e:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800ae70:	f7f5 fa26 	bl	80002c0 <strlen>
 800ae74:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ae76:	9338      	str	r3, [sp, #224]	@ 0xe0
 800ae78:	3001      	adds	r0, #1
 800ae7a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ae7c:	9000      	str	r0, [sp, #0]
 800ae7e:	9339      	str	r3, [sp, #228]	@ 0xe4
 800ae80:	ad1a      	add	r5, sp, #104	@ 0x68
 800ae82:	af38      	add	r7, sp, #224	@ 0xe0
 800ae84:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800ae88:	4628      	mov	r0, r5
 800ae8a:	f004 f88f 	bl	800efac <micro_ros_string_utilities_remove_tail_chars>
 800ae8e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800ae92:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 800ae96:	900c      	str	r0, [sp, #48]	@ 0x30
 800ae98:	910b      	str	r1, [sp, #44]	@ 0x2c
 800ae9a:	e79a      	b.n	800add2 <handle_message_memory.constprop.2+0xa6>
 800ae9c:	2c00      	cmp	r4, #0
 800ae9e:	f040 80b0 	bne.w	800b002 <handle_message_memory.constprop.2+0x2d6>
 800aea2:	f1b8 0f10 	cmp.w	r8, #16
 800aea6:	d18a      	bne.n	800adbe <handle_message_memory.constprop.2+0x92>
 800aea8:	461a      	mov	r2, r3
 800aeaa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aeac:	eb03 0902 	add.w	r9, r3, r2
 800aeb0:	f1ba 0f00 	cmp.w	sl, #0
 800aeb4:	f000 8189 	beq.w	800b1ca <handle_message_memory.constprop.2+0x49e>
 800aeb8:	9410      	str	r4, [sp, #64]	@ 0x40
 800aeba:	2701      	movs	r7, #1
 800aebc:	fb06 f707 	mul.w	r7, r6, r7
 800aec0:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800aec2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800aec4:	4638      	mov	r0, r7
 800aec6:	4798      	blx	r3
 800aec8:	f8c9 0000 	str.w	r0, [r9]
 800aecc:	2800      	cmp	r0, #0
 800aece:	f000 8152 	beq.w	800b176 <handle_message_memory.constprop.2+0x44a>
 800aed2:	463a      	mov	r2, r7
 800aed4:	2100      	movs	r1, #0
 800aed6:	f012 faab 	bl	801d430 <memset>
 800aeda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aedc:	443b      	add	r3, r7
 800aede:	9309      	str	r3, [sp, #36]	@ 0x24
 800aee0:	f1b8 0f12 	cmp.w	r8, #18
 800aee4:	f04f 0300 	mov.w	r3, #0
 800aee8:	e9c9 3601 	strd	r3, r6, [r9, #4]
 800aeec:	f47f af6c 	bne.w	800adc8 <handle_message_memory.constprop.2+0x9c>
 800aef0:	4b78      	ldr	r3, [pc, #480]	@ (800b0d4 <handle_message_memory.constprop.2+0x3a8>)
 800aef2:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800aef4:	6819      	ldr	r1, [r3, #0]
 800aef6:	f002 ffdf 	bl	800deb8 <get_message_typesupport_handle>
 800aefa:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800aefc:	f8d0 a004 	ldr.w	sl, [r0, #4]
 800af00:	2b00      	cmp	r3, #0
 800af02:	f040 80ed 	bne.w	800b0e0 <handle_message_memory.constprop.2+0x3b4>
 800af06:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800af08:	9338      	str	r3, [sp, #224]	@ 0xe0
 800af0a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800af0c:	9339      	str	r3, [sp, #228]	@ 0xe4
 800af0e:	af38      	add	r7, sp, #224	@ 0xe0
 800af10:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800af14:	ab04      	add	r3, sp, #16
 800af16:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800af1a:	ad34      	add	r5, sp, #208	@ 0xd0
 800af1c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800af20:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800af24:	ab32      	add	r3, sp, #200	@ 0xc8
 800af26:	cb0c      	ldmia	r3, {r2, r3}
 800af28:	4649      	mov	r1, r9
 800af2a:	4650      	mov	r0, sl
 800af2c:	f7ff fefe 	bl	800ad2c <handle_message_memory.constprop.2>
 800af30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af32:	4403      	add	r3, r0
 800af34:	9309      	str	r3, [sp, #36]	@ 0x24
 800af36:	e74a      	b.n	800adce <handle_message_memory.constprop.2+0xa2>
 800af38:	f1b8 0f10 	cmp.w	r8, #16
 800af3c:	d051      	beq.n	800afe2 <handle_message_memory.constprop.2+0x2b6>
 800af3e:	2c00      	cmp	r4, #0
 800af40:	f040 8127 	bne.w	800b192 <handle_message_memory.constprop.2+0x466>
 800af44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800af46:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800af48:	f1b8 0f12 	cmp.w	r8, #18
 800af4c:	eb03 0902 	add.w	r9, r3, r2
 800af50:	d036      	beq.n	800afc0 <handle_message_memory.constprop.2+0x294>
 800af52:	f1b8 0f64 	cmp.w	r8, #100	@ 0x64
 800af56:	f000 8143 	beq.w	800b1e0 <handle_message_memory.constprop.2+0x4b4>
 800af5a:	4b5f      	ldr	r3, [pc, #380]	@ (800b0d8 <handle_message_memory.constprop.2+0x3ac>)
 800af5c:	f853 7028 	ldr.w	r7, [r3, r8, lsl #2]
 800af60:	f1ba 0f00 	cmp.w	sl, #0
 800af64:	d07d      	beq.n	800b062 <handle_message_memory.constprop.2+0x336>
 800af66:	2301      	movs	r3, #1
 800af68:	9310      	str	r3, [sp, #64]	@ 0x40
 800af6a:	2c00      	cmp	r4, #0
 800af6c:	d0a6      	beq.n	800aebc <handle_message_memory.constprop.2+0x190>
 800af6e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800af70:	9517      	str	r5, [sp, #92]	@ 0x5c
 800af72:	f04f 0a00 	mov.w	sl, #0
 800af76:	e9cd 9715 	strd	r9, r7, [sp, #84]	@ 0x54
 800af7a:	3b01      	subs	r3, #1
 800af7c:	4655      	mov	r5, sl
 800af7e:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
 800af82:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800af86:	9619      	str	r6, [sp, #100]	@ 0x64
 800af88:	461f      	mov	r7, r3
 800af8a:	f85a 6035 	ldr.w	r6, [sl, r5, lsl #3]
 800af8e:	4630      	mov	r0, r6
 800af90:	f7f5 f996 	bl	80002c0 <strlen>
 800af94:	4649      	mov	r1, r9
 800af96:	4602      	mov	r2, r0
 800af98:	4630      	mov	r0, r6
 800af9a:	f012 fa1f 	bl	801d3dc <memcmp>
 800af9e:	b938      	cbnz	r0, 800afb0 <handle_message_memory.constprop.2+0x284>
 800afa0:	463a      	mov	r2, r7
 800afa2:	4649      	mov	r1, r9
 800afa4:	4630      	mov	r0, r6
 800afa6:	f012 fa19 	bl	801d3dc <memcmp>
 800afaa:	2800      	cmp	r0, #0
 800afac:	f000 80e6 	beq.w	800b17c <handle_message_memory.constprop.2+0x450>
 800afb0:	3501      	adds	r5, #1
 800afb2:	42ac      	cmp	r4, r5
 800afb4:	d1e9      	bne.n	800af8a <handle_message_memory.constprop.2+0x25e>
 800afb6:	e9dd 9715 	ldrd	r9, r7, [sp, #84]	@ 0x54
 800afba:	9e19      	ldr	r6, [sp, #100]	@ 0x64
 800afbc:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 800afbe:	e77d      	b.n	800aebc <handle_message_memory.constprop.2+0x190>
 800afc0:	4b44      	ldr	r3, [pc, #272]	@ (800b0d4 <handle_message_memory.constprop.2+0x3a8>)
 800afc2:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800afc4:	6819      	ldr	r1, [r3, #0]
 800afc6:	f002 ff77 	bl	800deb8 <get_message_typesupport_handle>
 800afca:	6843      	ldr	r3, [r0, #4]
 800afcc:	68df      	ldr	r7, [r3, #12]
 800afce:	f1ba 0f00 	cmp.w	sl, #0
 800afd2:	d1c8      	bne.n	800af66 <handle_message_memory.constprop.2+0x23a>
 800afd4:	2301      	movs	r3, #1
 800afd6:	9e33      	ldr	r6, [sp, #204]	@ 0xcc
 800afd8:	9310      	str	r3, [sp, #64]	@ 0x40
 800afda:	2c00      	cmp	r4, #0
 800afdc:	f43f af6e 	beq.w	800aebc <handle_message_memory.constprop.2+0x190>
 800afe0:	e7c5      	b.n	800af6e <handle_message_memory.constprop.2+0x242>
 800afe2:	2c00      	cmp	r4, #0
 800afe4:	f040 80d3 	bne.w	800b18e <handle_message_memory.constprop.2+0x462>
 800afe8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800afea:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800afec:	eb03 0902 	add.w	r9, r3, r2
 800aff0:	f1ba 0f00 	cmp.w	sl, #0
 800aff4:	d032      	beq.n	800b05c <handle_message_memory.constprop.2+0x330>
 800aff6:	2301      	movs	r3, #1
 800aff8:	9310      	str	r3, [sp, #64]	@ 0x40
 800affa:	f04f 0864 	mov.w	r8, #100	@ 0x64
 800affe:	270c      	movs	r7, #12
 800b000:	e75c      	b.n	800aebc <handle_message_memory.constprop.2+0x190>
 800b002:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b004:	9338      	str	r3, [sp, #224]	@ 0xe0
 800b006:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b008:	9339      	str	r3, [sp, #228]	@ 0xe4
 800b00a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b00c:	9300      	str	r3, [sp, #0]
 800b00e:	af38      	add	r7, sp, #224	@ 0xe0
 800b010:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800b014:	4638      	mov	r0, r7
 800b016:	f003 ff9d 	bl	800ef54 <micro_ros_string_utilities_append>
 800b01a:	4b30      	ldr	r3, [pc, #192]	@ (800b0dc <handle_message_memory.constprop.2+0x3b0>)
 800b01c:	9300      	str	r3, [sp, #0]
 800b01e:	f10d 0968 	add.w	r9, sp, #104	@ 0x68
 800b022:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800b026:	4648      	mov	r0, r9
 800b028:	f003 ff94 	bl	800ef54 <micro_ros_string_utilities_append>
 800b02c:	e899 0007 	ldmia.w	r9, {r0, r1, r2}
 800b030:	f1b8 0f10 	cmp.w	r8, #16
 800b034:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 800b038:	900c      	str	r0, [sp, #48]	@ 0x30
 800b03a:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b03c:	f47f aebf 	bne.w	800adbe <handle_message_memory.constprop.2+0x92>
 800b040:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b042:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b044:	eb03 0902 	add.w	r9, r3, r2
 800b048:	f1ba 0f00 	cmp.w	sl, #0
 800b04c:	f000 80bd 	beq.w	800b1ca <handle_message_memory.constprop.2+0x49e>
 800b050:	2300      	movs	r3, #0
 800b052:	9310      	str	r3, [sp, #64]	@ 0x40
 800b054:	f04f 0810 	mov.w	r8, #16
 800b058:	2701      	movs	r7, #1
 800b05a:	e788      	b.n	800af6e <handle_message_memory.constprop.2+0x242>
 800b05c:	270c      	movs	r7, #12
 800b05e:	f04f 0864 	mov.w	r8, #100	@ 0x64
 800b062:	2301      	movs	r3, #1
 800b064:	9e34      	ldr	r6, [sp, #208]	@ 0xd0
 800b066:	9310      	str	r3, [sp, #64]	@ 0x40
 800b068:	2c00      	cmp	r4, #0
 800b06a:	f43f af27 	beq.w	800aebc <handle_message_memory.constprop.2+0x190>
 800b06e:	e77e      	b.n	800af6e <handle_message_memory.constprop.2+0x242>
 800b070:	4b18      	ldr	r3, [pc, #96]	@ (800b0d4 <handle_message_memory.constprop.2+0x3a8>)
 800b072:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800b074:	6819      	ldr	r1, [r3, #0]
 800b076:	f002 ff1f 	bl	800deb8 <get_message_typesupport_handle>
 800b07a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b07c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b07e:	f8d0 a004 	ldr.w	sl, [r0, #4]
 800b082:	4413      	add	r3, r2
 800b084:	4699      	mov	r9, r3
 800b086:	e73e      	b.n	800af06 <handle_message_memory.constprop.2+0x1da>
 800b088:	fb05 f306 	mul.w	r3, r5, r6
 800b08c:	2e00      	cmp	r6, #0
 800b08e:	f43f aea0 	beq.w	800add2 <handle_message_memory.constprop.2+0xa6>
 800b092:	930a      	str	r3, [sp, #40]	@ 0x28
 800b094:	464b      	mov	r3, r9
 800b096:	4617      	mov	r7, r2
 800b098:	46a1      	mov	r9, r4
 800b09a:	f04f 0800 	mov.w	r8, #0
 800b09e:	461c      	mov	r4, r3
 800b0a0:	4651      	mov	r1, sl
 800b0a2:	4628      	mov	r0, r5
 800b0a4:	47a0      	blx	r4
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	6038      	str	r0, [r7, #0]
 800b0aa:	60bd      	str	r5, [r7, #8]
 800b0ac:	607b      	str	r3, [r7, #4]
 800b0ae:	462a      	mov	r2, r5
 800b0b0:	4619      	mov	r1, r3
 800b0b2:	f108 0801 	add.w	r8, r8, #1
 800b0b6:	f012 f9bb 	bl	801d430 <memset>
 800b0ba:	4546      	cmp	r6, r8
 800b0bc:	f107 070c 	add.w	r7, r7, #12
 800b0c0:	d8ee      	bhi.n	800b0a0 <handle_message_memory.constprop.2+0x374>
 800b0c2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	@ 0x24
 800b0c6:	441a      	add	r2, r3
 800b0c8:	464c      	mov	r4, r9
 800b0ca:	9209      	str	r2, [sp, #36]	@ 0x24
 800b0cc:	e67f      	b.n	800adce <handle_message_memory.constprop.2+0xa2>
 800b0ce:	bf00      	nop
 800b0d0:	0801e6ec 	.word	0x0801e6ec
 800b0d4:	200005a0 	.word	0x200005a0
 800b0d8:	0801f968 	.word	0x0801f968
 800b0dc:	0801e6f4 	.word	0x0801e6f4
 800b0e0:	2e00      	cmp	r6, #0
 800b0e2:	f43f ae74 	beq.w	800adce <handle_message_memory.constprop.2+0xa2>
 800b0e6:	ab04      	add	r3, sp, #16
 800b0e8:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800b0ec:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 800b0f0:	940a      	str	r4, [sp, #40]	@ 0x28
 800b0f2:	f04f 0800 	mov.w	r8, #0
 800b0f6:	af38      	add	r7, sp, #224	@ 0xe0
 800b0f8:	ad34      	add	r5, sp, #208	@ 0xd0
 800b0fa:	461c      	mov	r4, r3
 800b0fc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b0fe:	9338      	str	r3, [sp, #224]	@ 0xe0
 800b100:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b102:	9339      	str	r3, [sp, #228]	@ 0xe4
 800b104:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800b108:	f8da e00c 	ldr.w	lr, [sl, #12]
 800b10c:	f8d9 c000 	ldr.w	ip, [r9]
 800b110:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b114:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800b118:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800b11c:	ab32      	add	r3, sp, #200	@ 0xc8
 800b11e:	fb0e c108 	mla	r1, lr, r8, ip
 800b122:	cb0c      	ldmia	r3, {r2, r3}
 800b124:	4650      	mov	r0, sl
 800b126:	f7ff fe01 	bl	800ad2c <handle_message_memory.constprop.2>
 800b12a:	f108 0801 	add.w	r8, r8, #1
 800b12e:	4546      	cmp	r6, r8
 800b130:	4483      	add	fp, r0
 800b132:	d1e3      	bne.n	800b0fc <handle_message_memory.constprop.2+0x3d0>
 800b134:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800b138:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b13a:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 800b13e:	e646      	b.n	800adce <handle_message_memory.constprop.2+0xa2>
 800b140:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b142:	9338      	str	r3, [sp, #224]	@ 0xe0
 800b144:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b146:	9339      	str	r3, [sp, #228]	@ 0xe4
 800b148:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b14a:	9300      	str	r3, [sp, #0]
 800b14c:	af38      	add	r7, sp, #224	@ 0xe0
 800b14e:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800b152:	4638      	mov	r0, r7
 800b154:	f003 fefe 	bl	800ef54 <micro_ros_string_utilities_append>
 800b158:	4b4e      	ldr	r3, [pc, #312]	@ (800b294 <handle_message_memory.constprop.2+0x568>)
 800b15a:	9300      	str	r3, [sp, #0]
 800b15c:	ae1a      	add	r6, sp, #104	@ 0x68
 800b15e:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800b162:	4630      	mov	r0, r6
 800b164:	f003 fef6 	bl	800ef54 <micro_ros_string_utilities_append>
 800b168:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800b16c:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 800b170:	900c      	str	r0, [sp, #48]	@ 0x30
 800b172:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b174:	e623      	b.n	800adbe <handle_message_memory.constprop.2+0x92>
 800b176:	2300      	movs	r3, #0
 800b178:	9309      	str	r3, [sp, #36]	@ 0x24
 800b17a:	e630      	b.n	800adde <handle_message_memory.constprop.2+0xb2>
 800b17c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b17e:	46aa      	mov	sl, r5
 800b180:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b184:	e9dd 9715 	ldrd	r9, r7, [sp, #84]	@ 0x54
 800b188:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 800b18a:	685e      	ldr	r6, [r3, #4]
 800b18c:	e696      	b.n	800aebc <handle_message_memory.constprop.2+0x190>
 800b18e:	f04f 0864 	mov.w	r8, #100	@ 0x64
 800b192:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b194:	9338      	str	r3, [sp, #224]	@ 0xe0
 800b196:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b198:	9339      	str	r3, [sp, #228]	@ 0xe4
 800b19a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b19c:	9300      	str	r3, [sp, #0]
 800b19e:	af38      	add	r7, sp, #224	@ 0xe0
 800b1a0:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800b1a4:	4638      	mov	r0, r7
 800b1a6:	f003 fed5 	bl	800ef54 <micro_ros_string_utilities_append>
 800b1aa:	4b3a      	ldr	r3, [pc, #232]	@ (800b294 <handle_message_memory.constprop.2+0x568>)
 800b1ac:	9300      	str	r3, [sp, #0]
 800b1ae:	f10d 0968 	add.w	r9, sp, #104	@ 0x68
 800b1b2:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800b1b6:	4648      	mov	r0, r9
 800b1b8:	f003 fecc 	bl	800ef54 <micro_ros_string_utilities_append>
 800b1bc:	e899 0007 	ldmia.w	r9, {r0, r1, r2}
 800b1c0:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 800b1c4:	900c      	str	r0, [sp, #48]	@ 0x30
 800b1c6:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b1c8:	e6bc      	b.n	800af44 <handle_message_memory.constprop.2+0x218>
 800b1ca:	b325      	cbz	r5, 800b216 <handle_message_memory.constprop.2+0x4ea>
 800b1cc:	2300      	movs	r3, #0
 800b1ce:	462e      	mov	r6, r5
 800b1d0:	2701      	movs	r7, #1
 800b1d2:	f04f 0810 	mov.w	r8, #16
 800b1d6:	9310      	str	r3, [sp, #64]	@ 0x40
 800b1d8:	2c00      	cmp	r4, #0
 800b1da:	f43f ae6f 	beq.w	800aebc <handle_message_memory.constprop.2+0x190>
 800b1de:	e6c6      	b.n	800af6e <handle_message_memory.constprop.2+0x242>
 800b1e0:	270c      	movs	r7, #12
 800b1e2:	f1ba 0f00 	cmp.w	sl, #0
 800b1e6:	f43f af3c 	beq.w	800b062 <handle_message_memory.constprop.2+0x336>
 800b1ea:	2301      	movs	r3, #1
 800b1ec:	9310      	str	r3, [sp, #64]	@ 0x40
 800b1ee:	e6bc      	b.n	800af6a <handle_message_memory.constprop.2+0x23e>
 800b1f0:	b9d4      	cbnz	r4, 800b228 <handle_message_memory.constprop.2+0x4fc>
 800b1f2:	461a      	mov	r2, r3
 800b1f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b1f6:	eb03 0902 	add.w	r9, r3, r2
 800b1fa:	2d00      	cmp	r5, #0
 800b1fc:	d146      	bne.n	800b28c <handle_message_memory.constprop.2+0x560>
 800b1fe:	9e18      	ldr	r6, [sp, #96]	@ 0x60
 800b200:	9410      	str	r4, [sp, #64]	@ 0x40
 800b202:	2701      	movs	r7, #1
 800b204:	e65a      	b.n	800aebc <handle_message_memory.constprop.2+0x190>
 800b206:	a823      	add	r0, sp, #140	@ 0x8c
 800b208:	f001 ffcc 	bl	800d1a4 <rcutils_get_default_allocator>
 800b20c:	f8dd 908c 	ldr.w	r9, [sp, #140]	@ 0x8c
 800b210:	f8dd a09c 	ldr.w	sl, [sp, #156]	@ 0x9c
 800b214:	e5f1      	b.n	800adfa <handle_message_memory.constprop.2+0xce>
 800b216:	9e18      	ldr	r6, [sp, #96]	@ 0x60
 800b218:	9510      	str	r5, [sp, #64]	@ 0x40
 800b21a:	2701      	movs	r7, #1
 800b21c:	f04f 0810 	mov.w	r8, #16
 800b220:	2c00      	cmp	r4, #0
 800b222:	f43f ae4b 	beq.w	800aebc <handle_message_memory.constprop.2+0x190>
 800b226:	e6a2      	b.n	800af6e <handle_message_memory.constprop.2+0x242>
 800b228:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b22a:	9338      	str	r3, [sp, #224]	@ 0xe0
 800b22c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b22e:	9339      	str	r3, [sp, #228]	@ 0xe4
 800b230:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b232:	9300      	str	r3, [sp, #0]
 800b234:	af38      	add	r7, sp, #224	@ 0xe0
 800b236:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800b23a:	4638      	mov	r0, r7
 800b23c:	f003 fe8a 	bl	800ef54 <micro_ros_string_utilities_append>
 800b240:	4b14      	ldr	r3, [pc, #80]	@ (800b294 <handle_message_memory.constprop.2+0x568>)
 800b242:	9300      	str	r3, [sp, #0]
 800b244:	f10d 0868 	add.w	r8, sp, #104	@ 0x68
 800b248:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800b24c:	4640      	mov	r0, r8
 800b24e:	f003 fe81 	bl	800ef54 <micro_ros_string_utilities_append>
 800b252:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 800b256:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 800b25a:	900c      	str	r0, [sp, #48]	@ 0x30
 800b25c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b25e:	e6ef      	b.n	800b040 <handle_message_memory.constprop.2+0x314>
 800b260:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b262:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800b264:	f8dd 9040 	ldr.w	r9, [sp, #64]	@ 0x40
 800b268:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b26c:	465a      	mov	r2, fp
 800b26e:	685d      	ldr	r5, [r3, #4]
 800b270:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 800b274:	e5f6      	b.n	800ae64 <handle_message_memory.constprop.2+0x138>
 800b276:	a81e      	add	r0, sp, #120	@ 0x78
 800b278:	9109      	str	r1, [sp, #36]	@ 0x24
 800b27a:	f001 ff93 	bl	800d1a4 <rcutils_get_default_allocator>
 800b27e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800b280:	9311      	str	r3, [sp, #68]	@ 0x44
 800b282:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800b284:	9312      	str	r3, [sp, #72]	@ 0x48
 800b286:	e9dd 3108 	ldrd	r3, r1, [sp, #32]
 800b28a:	e569      	b.n	800ad60 <handle_message_memory.constprop.2+0x34>
 800b28c:	462e      	mov	r6, r5
 800b28e:	9410      	str	r4, [sp, #64]	@ 0x40
 800b290:	2701      	movs	r7, #1
 800b292:	e613      	b.n	800aebc <handle_message_memory.constprop.2+0x190>
 800b294:	0801e6f4 	.word	0x0801e6f4

0800b298 <get_longest_member_name>:
 800b298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b29c:	6884      	ldr	r4, [r0, #8]
 800b29e:	b097      	sub	sp, #92	@ 0x5c
 800b2a0:	2c00      	cmp	r4, #0
 800b2a2:	f000 80f9 	beq.w	800b498 <get_longest_member_name+0x200>
 800b2a6:	f04f 0800 	mov.w	r8, #0
 800b2aa:	4625      	mov	r5, r4
 800b2ac:	4646      	mov	r6, r8
 800b2ae:	4607      	mov	r7, r0
 800b2b0:	697b      	ldr	r3, [r7, #20]
 800b2b2:	ebc8 1208 	rsb	r2, r8, r8, lsl #4
 800b2b6:	eb03 0182 	add.w	r1, r3, r2, lsl #2
 800b2ba:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 800b2be:	790b      	ldrb	r3, [r1, #4]
 800b2c0:	2b12      	cmp	r3, #18
 800b2c2:	d012      	beq.n	800b2ea <get_longest_member_name+0x52>
 800b2c4:	f04f 0b00 	mov.w	fp, #0
 800b2c8:	4620      	mov	r0, r4
 800b2ca:	f7f4 fff9 	bl	80002c0 <strlen>
 800b2ce:	4458      	add	r0, fp
 800b2d0:	3001      	adds	r0, #1
 800b2d2:	4286      	cmp	r6, r0
 800b2d4:	f108 0801 	add.w	r8, r8, #1
 800b2d8:	bf38      	it	cc
 800b2da:	4606      	movcc	r6, r0
 800b2dc:	45a8      	cmp	r8, r5
 800b2de:	d3e7      	bcc.n	800b2b0 <get_longest_member_name+0x18>
 800b2e0:	46b3      	mov	fp, r6
 800b2e2:	4658      	mov	r0, fp
 800b2e4:	b017      	add	sp, #92	@ 0x5c
 800b2e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2ea:	4bb6      	ldr	r3, [pc, #728]	@ (800b5c4 <get_longest_member_name+0x32c>)
 800b2ec:	68c8      	ldr	r0, [r1, #12]
 800b2ee:	6819      	ldr	r1, [r3, #0]
 800b2f0:	f002 fde2 	bl	800deb8 <get_message_typesupport_handle>
 800b2f4:	6843      	ldr	r3, [r0, #4]
 800b2f6:	f8d3 a008 	ldr.w	sl, [r3, #8]
 800b2fa:	f1ba 0f00 	cmp.w	sl, #0
 800b2fe:	f000 8109 	beq.w	800b514 <get_longest_member_name+0x27c>
 800b302:	f04f 0b00 	mov.w	fp, #0
 800b306:	e9cd 4800 	strd	r4, r8, [sp]
 800b30a:	4635      	mov	r5, r6
 800b30c:	46d9      	mov	r9, fp
 800b30e:	465c      	mov	r4, fp
 800b310:	46d0      	mov	r8, sl
 800b312:	461e      	mov	r6, r3
 800b314:	6972      	ldr	r2, [r6, #20]
 800b316:	ebc9 1309 	rsb	r3, r9, r9, lsl #4
 800b31a:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800b31e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800b322:	790b      	ldrb	r3, [r1, #4]
 800b324:	2b12      	cmp	r3, #18
 800b326:	d014      	beq.n	800b352 <get_longest_member_name+0xba>
 800b328:	f04f 0b00 	mov.w	fp, #0
 800b32c:	4610      	mov	r0, r2
 800b32e:	f7f4 ffc7 	bl	80002c0 <strlen>
 800b332:	4458      	add	r0, fp
 800b334:	3001      	adds	r0, #1
 800b336:	4284      	cmp	r4, r0
 800b338:	f109 0901 	add.w	r9, r9, #1
 800b33c:	bf38      	it	cc
 800b33e:	4604      	movcc	r4, r0
 800b340:	45c1      	cmp	r9, r8
 800b342:	d3e7      	bcc.n	800b314 <get_longest_member_name+0x7c>
 800b344:	46a3      	mov	fp, r4
 800b346:	462e      	mov	r6, r5
 800b348:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b34c:	9c00      	ldr	r4, [sp, #0]
 800b34e:	68bd      	ldr	r5, [r7, #8]
 800b350:	e7ba      	b.n	800b2c8 <get_longest_member_name+0x30>
 800b352:	4b9c      	ldr	r3, [pc, #624]	@ (800b5c4 <get_longest_member_name+0x32c>)
 800b354:	68c8      	ldr	r0, [r1, #12]
 800b356:	6819      	ldr	r1, [r3, #0]
 800b358:	9202      	str	r2, [sp, #8]
 800b35a:	f002 fdad 	bl	800deb8 <get_message_typesupport_handle>
 800b35e:	6843      	ldr	r3, [r0, #4]
 800b360:	9a02      	ldr	r2, [sp, #8]
 800b362:	f8d3 a008 	ldr.w	sl, [r3, #8]
 800b366:	f1ba 0f00 	cmp.w	sl, #0
 800b36a:	f000 809a 	beq.w	800b4a2 <get_longest_member_name+0x20a>
 800b36e:	e9cd 6202 	strd	r6, r2, [sp, #8]
 800b372:	f04f 0b00 	mov.w	fp, #0
 800b376:	e9cd 9505 	strd	r9, r5, [sp, #20]
 800b37a:	9404      	str	r4, [sp, #16]
 800b37c:	463d      	mov	r5, r7
 800b37e:	46d8      	mov	r8, fp
 800b380:	461c      	mov	r4, r3
 800b382:	4657      	mov	r7, sl
 800b384:	6963      	ldr	r3, [r4, #20]
 800b386:	ebc8 1208 	rsb	r2, r8, r8, lsl #4
 800b38a:	eb03 0182 	add.w	r1, r3, r2, lsl #2
 800b38e:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 800b392:	790b      	ldrb	r3, [r1, #4]
 800b394:	2b12      	cmp	r3, #18
 800b396:	d016      	beq.n	800b3c6 <get_longest_member_name+0x12e>
 800b398:	f04f 0a00 	mov.w	sl, #0
 800b39c:	4630      	mov	r0, r6
 800b39e:	f7f4 ff8f 	bl	80002c0 <strlen>
 800b3a2:	4450      	add	r0, sl
 800b3a4:	3001      	adds	r0, #1
 800b3a6:	4583      	cmp	fp, r0
 800b3a8:	f108 0801 	add.w	r8, r8, #1
 800b3ac:	bf38      	it	cc
 800b3ae:	4683      	movcc	fp, r0
 800b3b0:	45b8      	cmp	r8, r7
 800b3b2:	d3e7      	bcc.n	800b384 <get_longest_member_name+0xec>
 800b3b4:	e9dd 6202 	ldrd	r6, r2, [sp, #8]
 800b3b8:	462f      	mov	r7, r5
 800b3ba:	e9dd 4904 	ldrd	r4, r9, [sp, #16]
 800b3be:	9d06      	ldr	r5, [sp, #24]
 800b3c0:	f8d6 8008 	ldr.w	r8, [r6, #8]
 800b3c4:	e7b2      	b.n	800b32c <get_longest_member_name+0x94>
 800b3c6:	4b7f      	ldr	r3, [pc, #508]	@ (800b5c4 <get_longest_member_name+0x32c>)
 800b3c8:	68c8      	ldr	r0, [r1, #12]
 800b3ca:	6819      	ldr	r1, [r3, #0]
 800b3cc:	f002 fd74 	bl	800deb8 <get_message_typesupport_handle>
 800b3d0:	6847      	ldr	r7, [r0, #4]
 800b3d2:	68bb      	ldr	r3, [r7, #8]
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	f000 80e6 	beq.w	800b5a6 <get_longest_member_name+0x30e>
 800b3da:	e9cd b809 	strd	fp, r8, [sp, #36]	@ 0x24
 800b3de:	f04f 0a00 	mov.w	sl, #0
 800b3e2:	e9cd 4607 	strd	r4, r6, [sp, #28]
 800b3e6:	46d1      	mov	r9, sl
 800b3e8:	463e      	mov	r6, r7
 800b3ea:	4654      	mov	r4, sl
 800b3ec:	461f      	mov	r7, r3
 800b3ee:	6973      	ldr	r3, [r6, #20]
 800b3f0:	ebc9 1209 	rsb	r2, r9, r9, lsl #4
 800b3f4:	eb03 0182 	add.w	r1, r3, r2, lsl #2
 800b3f8:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
 800b3fc:	790b      	ldrb	r3, [r1, #4]
 800b3fe:	2b12      	cmp	r3, #18
 800b400:	d015      	beq.n	800b42e <get_longest_member_name+0x196>
 800b402:	f04f 0a00 	mov.w	sl, #0
 800b406:	4640      	mov	r0, r8
 800b408:	f7f4 ff5a 	bl	80002c0 <strlen>
 800b40c:	4450      	add	r0, sl
 800b40e:	3001      	adds	r0, #1
 800b410:	4284      	cmp	r4, r0
 800b412:	f109 0901 	add.w	r9, r9, #1
 800b416:	bf38      	it	cc
 800b418:	4604      	movcc	r4, r0
 800b41a:	45b9      	cmp	r9, r7
 800b41c:	d3e7      	bcc.n	800b3ee <get_longest_member_name+0x156>
 800b41e:	46a2      	mov	sl, r4
 800b420:	9c07      	ldr	r4, [sp, #28]
 800b422:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
 800b426:	68a7      	ldr	r7, [r4, #8]
 800b428:	e9dd 6b08 	ldrd	r6, fp, [sp, #32]
 800b42c:	e7b6      	b.n	800b39c <get_longest_member_name+0x104>
 800b42e:	4b65      	ldr	r3, [pc, #404]	@ (800b5c4 <get_longest_member_name+0x32c>)
 800b430:	68c8      	ldr	r0, [r1, #12]
 800b432:	6819      	ldr	r1, [r3, #0]
 800b434:	f002 fd40 	bl	800deb8 <get_message_typesupport_handle>
 800b438:	f8d0 b004 	ldr.w	fp, [r0, #4]
 800b43c:	f8db 3008 	ldr.w	r3, [fp, #8]
 800b440:	2b00      	cmp	r3, #0
 800b442:	f000 80b3 	beq.w	800b5ac <get_longest_member_name+0x314>
 800b446:	f04f 0a00 	mov.w	sl, #0
 800b44a:	e9cd 680c 	strd	r6, r8, [sp, #48]	@ 0x30
 800b44e:	e9cd 490e 	strd	r4, r9, [sp, #56]	@ 0x38
 800b452:	4657      	mov	r7, sl
 800b454:	461c      	mov	r4, r3
 800b456:	46a8      	mov	r8, r5
 800b458:	f8db 3014 	ldr.w	r3, [fp, #20]
 800b45c:	ebc7 1207 	rsb	r2, r7, r7, lsl #4
 800b460:	eb03 0182 	add.w	r1, r3, r2, lsl #2
 800b464:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 800b468:	790b      	ldrb	r3, [r1, #4]
 800b46a:	2b12      	cmp	r3, #18
 800b46c:	d01d      	beq.n	800b4aa <get_longest_member_name+0x212>
 800b46e:	2500      	movs	r5, #0
 800b470:	4630      	mov	r0, r6
 800b472:	f7f4 ff25 	bl	80002c0 <strlen>
 800b476:	4428      	add	r0, r5
 800b478:	3001      	adds	r0, #1
 800b47a:	4582      	cmp	sl, r0
 800b47c:	f107 0701 	add.w	r7, r7, #1
 800b480:	bf38      	it	cc
 800b482:	4682      	movcc	sl, r0
 800b484:	42a7      	cmp	r7, r4
 800b486:	d3e7      	bcc.n	800b458 <get_longest_member_name+0x1c0>
 800b488:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b48a:	4645      	mov	r5, r8
 800b48c:	e9dd 490e 	ldrd	r4, r9, [sp, #56]	@ 0x38
 800b490:	f8dd 8034 	ldr.w	r8, [sp, #52]	@ 0x34
 800b494:	68b7      	ldr	r7, [r6, #8]
 800b496:	e7b6      	b.n	800b406 <get_longest_member_name+0x16e>
 800b498:	46a3      	mov	fp, r4
 800b49a:	4658      	mov	r0, fp
 800b49c:	b017      	add	sp, #92	@ 0x5c
 800b49e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4a2:	f8d6 8008 	ldr.w	r8, [r6, #8]
 800b4a6:	46d3      	mov	fp, sl
 800b4a8:	e740      	b.n	800b32c <get_longest_member_name+0x94>
 800b4aa:	4b46      	ldr	r3, [pc, #280]	@ (800b5c4 <get_longest_member_name+0x32c>)
 800b4ac:	68c8      	ldr	r0, [r1, #12]
 800b4ae:	6819      	ldr	r1, [r3, #0]
 800b4b0:	f002 fd02 	bl	800deb8 <get_message_typesupport_handle>
 800b4b4:	f8d0 9004 	ldr.w	r9, [r0, #4]
 800b4b8:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d078      	beq.n	800b5b2 <get_longest_member_name+0x31a>
 800b4c0:	e9cd a712 	strd	sl, r7, [sp, #72]	@ 0x48
 800b4c4:	2500      	movs	r5, #0
 800b4c6:	e9cd b610 	strd	fp, r6, [sp, #64]	@ 0x40
 800b4ca:	462c      	mov	r4, r5
 800b4cc:	461e      	mov	r6, r3
 800b4ce:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800b4d2:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800b4d6:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
 800b4da:	eb03 0182 	add.w	r1, r3, r2, lsl #2
 800b4de:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
 800b4e2:	790a      	ldrb	r2, [r1, #4]
 800b4e4:	2a12      	cmp	r2, #18
 800b4e6:	d018      	beq.n	800b51a <get_longest_member_name+0x282>
 800b4e8:	2700      	movs	r7, #0
 800b4ea:	4640      	mov	r0, r8
 800b4ec:	f7f4 fee8 	bl	80002c0 <strlen>
 800b4f0:	4438      	add	r0, r7
 800b4f2:	3001      	adds	r0, #1
 800b4f4:	4285      	cmp	r5, r0
 800b4f6:	f104 0401 	add.w	r4, r4, #1
 800b4fa:	bf38      	it	cc
 800b4fc:	4605      	movcc	r5, r0
 800b4fe:	42b4      	cmp	r4, r6
 800b500:	d3e7      	bcc.n	800b4d2 <get_longest_member_name+0x23a>
 800b502:	e9dd b610 	ldrd	fp, r6, [sp, #64]	@ 0x40
 800b506:	e9dd a712 	ldrd	sl, r7, [sp, #72]	@ 0x48
 800b50a:	f8dd 8050 	ldr.w	r8, [sp, #80]	@ 0x50
 800b50e:	f8db 4008 	ldr.w	r4, [fp, #8]
 800b512:	e7ad      	b.n	800b470 <get_longest_member_name+0x1d8>
 800b514:	68bd      	ldr	r5, [r7, #8]
 800b516:	46d3      	mov	fp, sl
 800b518:	e6d6      	b.n	800b2c8 <get_longest_member_name+0x30>
 800b51a:	4b2a      	ldr	r3, [pc, #168]	@ (800b5c4 <get_longest_member_name+0x32c>)
 800b51c:	68c8      	ldr	r0, [r1, #12]
 800b51e:	6819      	ldr	r1, [r3, #0]
 800b520:	f002 fcca 	bl	800deb8 <get_message_typesupport_handle>
 800b524:	6843      	ldr	r3, [r0, #4]
 800b526:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b528:	f8d3 a008 	ldr.w	sl, [r3, #8]
 800b52c:	f1ba 0f00 	cmp.w	sl, #0
 800b530:	d043      	beq.n	800b5ba <get_longest_member_name+0x322>
 800b532:	2700      	movs	r7, #0
 800b534:	f8d3 b014 	ldr.w	fp, [r3, #20]
 800b538:	463e      	mov	r6, r7
 800b53a:	ebc6 1306 	rsb	r3, r6, r6, lsl #4
 800b53e:	eb0b 0283 	add.w	r2, fp, r3, lsl #2
 800b542:	f85b 3023 	ldr.w	r3, [fp, r3, lsl #2]
 800b546:	7911      	ldrb	r1, [r2, #4]
 800b548:	2912      	cmp	r1, #18
 800b54a:	4618      	mov	r0, r3
 800b54c:	d00c      	beq.n	800b568 <get_longest_member_name+0x2d0>
 800b54e:	f7f4 feb7 	bl	80002c0 <strlen>
 800b552:	3001      	adds	r0, #1
 800b554:	4287      	cmp	r7, r0
 800b556:	f106 0601 	add.w	r6, r6, #1
 800b55a:	bf38      	it	cc
 800b55c:	4607      	movcc	r7, r0
 800b55e:	4556      	cmp	r6, sl
 800b560:	d3eb      	bcc.n	800b53a <get_longest_member_name+0x2a2>
 800b562:	f8d9 6008 	ldr.w	r6, [r9, #8]
 800b566:	e7c0      	b.n	800b4ea <get_longest_member_name+0x252>
 800b568:	9315      	str	r3, [sp, #84]	@ 0x54
 800b56a:	4b16      	ldr	r3, [pc, #88]	@ (800b5c4 <get_longest_member_name+0x32c>)
 800b56c:	68d0      	ldr	r0, [r2, #12]
 800b56e:	6819      	ldr	r1, [r3, #0]
 800b570:	f002 fca2 	bl	800deb8 <get_message_typesupport_handle>
 800b574:	6840      	ldr	r0, [r0, #4]
 800b576:	f7ff fe8f 	bl	800b298 <get_longest_member_name>
 800b57a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800b57c:	4683      	mov	fp, r0
 800b57e:	4618      	mov	r0, r3
 800b580:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b582:	f8d3 a008 	ldr.w	sl, [r3, #8]
 800b586:	f7f4 fe9b 	bl	80002c0 <strlen>
 800b58a:	4483      	add	fp, r0
 800b58c:	f10b 0b01 	add.w	fp, fp, #1
 800b590:	455f      	cmp	r7, fp
 800b592:	f106 0601 	add.w	r6, r6, #1
 800b596:	bf38      	it	cc
 800b598:	465f      	movcc	r7, fp
 800b59a:	45b2      	cmp	sl, r6
 800b59c:	d9e1      	bls.n	800b562 <get_longest_member_name+0x2ca>
 800b59e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b5a0:	f8d3 b014 	ldr.w	fp, [r3, #20]
 800b5a4:	e7c9      	b.n	800b53a <get_longest_member_name+0x2a2>
 800b5a6:	68a7      	ldr	r7, [r4, #8]
 800b5a8:	469a      	mov	sl, r3
 800b5aa:	e6f7      	b.n	800b39c <get_longest_member_name+0x104>
 800b5ac:	68b7      	ldr	r7, [r6, #8]
 800b5ae:	469a      	mov	sl, r3
 800b5b0:	e729      	b.n	800b406 <get_longest_member_name+0x16e>
 800b5b2:	f8db 4008 	ldr.w	r4, [fp, #8]
 800b5b6:	461d      	mov	r5, r3
 800b5b8:	e75a      	b.n	800b470 <get_longest_member_name+0x1d8>
 800b5ba:	f8d9 6008 	ldr.w	r6, [r9, #8]
 800b5be:	4657      	mov	r7, sl
 800b5c0:	e793      	b.n	800b4ea <get_longest_member_name+0x252>
 800b5c2:	bf00      	nop
 800b5c4:	200005a0 	.word	0x200005a0

0800b5c8 <micro_ros_utilities_get_dynamic_size>:
 800b5c8:	b084      	sub	sp, #16
 800b5ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5ce:	b09f      	sub	sp, #124	@ 0x7c
 800b5d0:	ac29      	add	r4, sp, #164	@ 0xa4
 800b5d2:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 800b5d6:	4619      	mov	r1, r3
 800b5d8:	2900      	cmp	r1, #0
 800b5da:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 800b5dc:	9c2d      	ldr	r4, [sp, #180]	@ 0xb4
 800b5de:	941c      	str	r4, [sp, #112]	@ 0x70
 800b5e0:	bf08      	it	eq
 800b5e2:	2105      	moveq	r1, #5
 800b5e4:	2a00      	cmp	r2, #0
 800b5e6:	bf08      	it	eq
 800b5e8:	2205      	moveq	r2, #5
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	bf08      	it	eq
 800b5ee:	2314      	moveq	r3, #20
 800b5f0:	9318      	str	r3, [sp, #96]	@ 0x60
 800b5f2:	4b75      	ldr	r3, [pc, #468]	@ (800b7c8 <micro_ros_utilities_get_dynamic_size+0x200>)
 800b5f4:	911a      	str	r1, [sp, #104]	@ 0x68
 800b5f6:	6819      	ldr	r1, [r3, #0]
 800b5f8:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 800b5fa:	931b      	str	r3, [sp, #108]	@ 0x6c
 800b5fc:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 800b5fe:	931d      	str	r3, [sp, #116]	@ 0x74
 800b600:	9219      	str	r2, [sp, #100]	@ 0x64
 800b602:	f002 fc59 	bl	800deb8 <get_message_typesupport_handle>
 800b606:	f10d 0854 	add.w	r8, sp, #84	@ 0x54
 800b60a:	2300      	movs	r3, #0
 800b60c:	f8d0 a004 	ldr.w	sl, [r0, #4]
 800b610:	9315      	str	r3, [sp, #84]	@ 0x54
 800b612:	e9c8 3301 	strd	r3, r3, [r8, #4]
 800b616:	b9b4      	cbnz	r4, 800b646 <micro_ros_utilities_get_dynamic_size+0x7e>
 800b618:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 800b61c:	ab04      	add	r3, sp, #16
 800b61e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800b622:	ab1e      	add	r3, sp, #120	@ 0x78
 800b624:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 800b628:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800b62c:	ab18      	add	r3, sp, #96	@ 0x60
 800b62e:	4621      	mov	r1, r4
 800b630:	cb0c      	ldmia	r3, {r2, r3}
 800b632:	4650      	mov	r0, sl
 800b634:	f7ff f914 	bl	800a860 <handle_message_memory.constprop.4>
 800b638:	4604      	mov	r4, r0
 800b63a:	4620      	mov	r0, r4
 800b63c:	b01f      	add	sp, #124	@ 0x7c
 800b63e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b642:	b004      	add	sp, #16
 800b644:	4770      	bx	lr
 800b646:	f8da 4008 	ldr.w	r4, [sl, #8]
 800b64a:	2c00      	cmp	r4, #0
 800b64c:	f000 80b5 	beq.w	800b7ba <micro_ros_utilities_get_dynamic_size+0x1f2>
 800b650:	469b      	mov	fp, r3
 800b652:	461f      	mov	r7, r3
 800b654:	4656      	mov	r6, sl
 800b656:	6972      	ldr	r2, [r6, #20]
 800b658:	ebc7 1307 	rsb	r3, r7, r7, lsl #4
 800b65c:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800b660:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 800b664:	790b      	ldrb	r3, [r1, #4]
 800b666:	2b12      	cmp	r3, #18
 800b668:	d02a      	beq.n	800b6c0 <micro_ros_utilities_get_dynamic_size+0xf8>
 800b66a:	2500      	movs	r5, #0
 800b66c:	4648      	mov	r0, r9
 800b66e:	f7f4 fe27 	bl	80002c0 <strlen>
 800b672:	4428      	add	r0, r5
 800b674:	3001      	adds	r0, #1
 800b676:	4583      	cmp	fp, r0
 800b678:	f107 0701 	add.w	r7, r7, #1
 800b67c:	bf38      	it	cc
 800b67e:	4683      	movcc	fp, r0
 800b680:	42a7      	cmp	r7, r4
 800b682:	d3e8      	bcc.n	800b656 <micro_ros_utilities_get_dynamic_size+0x8e>
 800b684:	46b2      	mov	sl, r6
 800b686:	ac10      	add	r4, sp, #64	@ 0x40
 800b688:	4659      	mov	r1, fp
 800b68a:	4620      	mov	r0, r4
 800b68c:	f003 fc4a 	bl	800ef24 <micro_ros_string_utilities_init_with_size>
 800b690:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800b694:	ab04      	add	r3, sp, #16
 800b696:	e888 0007 	stmia.w	r8, {r0, r1, r2}
 800b69a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800b69e:	ab1e      	add	r3, sp, #120	@ 0x78
 800b6a0:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 800b6a4:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800b6a8:	ac18      	add	r4, sp, #96	@ 0x60
 800b6aa:	e894 000c 	ldmia.w	r4, {r2, r3}
 800b6ae:	2100      	movs	r1, #0
 800b6b0:	4650      	mov	r0, sl
 800b6b2:	f7ff f8d5 	bl	800a860 <handle_message_memory.constprop.4>
 800b6b6:	4604      	mov	r4, r0
 800b6b8:	4640      	mov	r0, r8
 800b6ba:	f003 fc8f 	bl	800efdc <micro_ros_string_utilities_destroy>
 800b6be:	e7bc      	b.n	800b63a <micro_ros_utilities_get_dynamic_size+0x72>
 800b6c0:	4b41      	ldr	r3, [pc, #260]	@ (800b7c8 <micro_ros_utilities_get_dynamic_size+0x200>)
 800b6c2:	68c8      	ldr	r0, [r1, #12]
 800b6c4:	6819      	ldr	r1, [r3, #0]
 800b6c6:	f002 fbf7 	bl	800deb8 <get_message_typesupport_handle>
 800b6ca:	6843      	ldr	r3, [r0, #4]
 800b6cc:	f8d3 a008 	ldr.w	sl, [r3, #8]
 800b6d0:	f1ba 0f00 	cmp.w	sl, #0
 800b6d4:	d027      	beq.n	800b726 <micro_ros_utilities_get_dynamic_size+0x15e>
 800b6d6:	2500      	movs	r5, #0
 800b6d8:	e9cd 690a 	strd	r6, r9, [sp, #40]	@ 0x28
 800b6dc:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800b6e0:	462c      	mov	r4, r5
 800b6e2:	469b      	mov	fp, r3
 800b6e4:	970d      	str	r7, [sp, #52]	@ 0x34
 800b6e6:	4656      	mov	r6, sl
 800b6e8:	f8db 3014 	ldr.w	r3, [fp, #20]
 800b6ec:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
 800b6f0:	eb03 0182 	add.w	r1, r3, r2, lsl #2
 800b6f4:	f853 a022 	ldr.w	sl, [r3, r2, lsl #2]
 800b6f8:	790a      	ldrb	r2, [r1, #4]
 800b6fa:	2a12      	cmp	r2, #18
 800b6fc:	d016      	beq.n	800b72c <micro_ros_utilities_get_dynamic_size+0x164>
 800b6fe:	f04f 0900 	mov.w	r9, #0
 800b702:	4650      	mov	r0, sl
 800b704:	f7f4 fddc 	bl	80002c0 <strlen>
 800b708:	4448      	add	r0, r9
 800b70a:	3001      	adds	r0, #1
 800b70c:	4285      	cmp	r5, r0
 800b70e:	f104 0401 	add.w	r4, r4, #1
 800b712:	bf38      	it	cc
 800b714:	4605      	movcc	r5, r0
 800b716:	42b4      	cmp	r4, r6
 800b718:	d3e6      	bcc.n	800b6e8 <micro_ros_utilities_get_dynamic_size+0x120>
 800b71a:	e9dd 690a 	ldrd	r6, r9, [sp, #40]	@ 0x28
 800b71e:	e9dd b70c 	ldrd	fp, r7, [sp, #48]	@ 0x30
 800b722:	68b4      	ldr	r4, [r6, #8]
 800b724:	e7a2      	b.n	800b66c <micro_ros_utilities_get_dynamic_size+0xa4>
 800b726:	68b4      	ldr	r4, [r6, #8]
 800b728:	4655      	mov	r5, sl
 800b72a:	e79f      	b.n	800b66c <micro_ros_utilities_get_dynamic_size+0xa4>
 800b72c:	4b26      	ldr	r3, [pc, #152]	@ (800b7c8 <micro_ros_utilities_get_dynamic_size+0x200>)
 800b72e:	68c8      	ldr	r0, [r1, #12]
 800b730:	6819      	ldr	r1, [r3, #0]
 800b732:	f002 fbc1 	bl	800deb8 <get_message_typesupport_handle>
 800b736:	6843      	ldr	r3, [r0, #4]
 800b738:	9309      	str	r3, [sp, #36]	@ 0x24
 800b73a:	689f      	ldr	r7, [r3, #8]
 800b73c:	2f00      	cmp	r7, #0
 800b73e:	d03e      	beq.n	800b7be <micro_ros_utilities_get_dynamic_size+0x1f6>
 800b740:	6959      	ldr	r1, [r3, #20]
 800b742:	940e      	str	r4, [sp, #56]	@ 0x38
 800b744:	f04f 0900 	mov.w	r9, #0
 800b748:	463c      	mov	r4, r7
 800b74a:	464e      	mov	r6, r9
 800b74c:	460f      	mov	r7, r1
 800b74e:	ebc6 1206 	rsb	r2, r6, r6, lsl #4
 800b752:	eb07 0182 	add.w	r1, r7, r2, lsl #2
 800b756:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 800b75a:	f891 c004 	ldrb.w	ip, [r1, #4]
 800b75e:	f1bc 0f12 	cmp.w	ip, #18
 800b762:	4610      	mov	r0, r2
 800b764:	d00d      	beq.n	800b782 <micro_ros_utilities_get_dynamic_size+0x1ba>
 800b766:	f7f4 fdab 	bl	80002c0 <strlen>
 800b76a:	3001      	adds	r0, #1
 800b76c:	4581      	cmp	r9, r0
 800b76e:	f106 0601 	add.w	r6, r6, #1
 800b772:	bf38      	it	cc
 800b774:	4681      	movcc	r9, r0
 800b776:	42a6      	cmp	r6, r4
 800b778:	d3e9      	bcc.n	800b74e <micro_ros_utilities_get_dynamic_size+0x186>
 800b77a:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 800b77c:	f8db 6008 	ldr.w	r6, [fp, #8]
 800b780:	e7bf      	b.n	800b702 <micro_ros_utilities_get_dynamic_size+0x13a>
 800b782:	4b11      	ldr	r3, [pc, #68]	@ (800b7c8 <micro_ros_utilities_get_dynamic_size+0x200>)
 800b784:	68c8      	ldr	r0, [r1, #12]
 800b786:	6819      	ldr	r1, [r3, #0]
 800b788:	920f      	str	r2, [sp, #60]	@ 0x3c
 800b78a:	f002 fb95 	bl	800deb8 <get_message_typesupport_handle>
 800b78e:	6840      	ldr	r0, [r0, #4]
 800b790:	f7ff fd82 	bl	800b298 <get_longest_member_name>
 800b794:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b796:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b798:	4607      	mov	r7, r0
 800b79a:	4610      	mov	r0, r2
 800b79c:	689c      	ldr	r4, [r3, #8]
 800b79e:	f7f4 fd8f 	bl	80002c0 <strlen>
 800b7a2:	4407      	add	r7, r0
 800b7a4:	3701      	adds	r7, #1
 800b7a6:	45b9      	cmp	r9, r7
 800b7a8:	f106 0601 	add.w	r6, r6, #1
 800b7ac:	bf38      	it	cc
 800b7ae:	46b9      	movcc	r9, r7
 800b7b0:	42a6      	cmp	r6, r4
 800b7b2:	d2e2      	bcs.n	800b77a <micro_ros_utilities_get_dynamic_size+0x1b2>
 800b7b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b7b6:	695f      	ldr	r7, [r3, #20]
 800b7b8:	e7c9      	b.n	800b74e <micro_ros_utilities_get_dynamic_size+0x186>
 800b7ba:	46a3      	mov	fp, r4
 800b7bc:	e763      	b.n	800b686 <micro_ros_utilities_get_dynamic_size+0xbe>
 800b7be:	f8db 6008 	ldr.w	r6, [fp, #8]
 800b7c2:	46b9      	mov	r9, r7
 800b7c4:	e79d      	b.n	800b702 <micro_ros_utilities_get_dynamic_size+0x13a>
 800b7c6:	bf00      	nop
 800b7c8:	200005a0 	.word	0x200005a0

0800b7cc <micro_ros_utilities_create_message_memory>:
 800b7cc:	b082      	sub	sp, #8
 800b7ce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7d2:	b0a1      	sub	sp, #132	@ 0x84
 800b7d4:	ae2d      	add	r6, sp, #180	@ 0xb4
 800b7d6:	ac2a      	add	r4, sp, #168	@ 0xa8
 800b7d8:	e884 000c 	stmia.w	r4, {r2, r3}
 800b7dc:	4607      	mov	r7, r0
 800b7de:	460c      	mov	r4, r1
 800b7e0:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800b7e4:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800b7e8:	ab2a      	add	r3, sp, #168	@ 0xa8
 800b7ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b7ec:	4638      	mov	r0, r7
 800b7ee:	9d2e      	ldr	r5, [sp, #184]	@ 0xb8
 800b7f0:	f7ff feea 	bl	800b5c8 <micro_ros_utilities_get_dynamic_size>
 800b7f4:	9a2c      	ldr	r2, [sp, #176]	@ 0xb0
 800b7f6:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 800b7f8:	951e      	str	r5, [sp, #120]	@ 0x78
 800b7fa:	2a00      	cmp	r2, #0
 800b7fc:	bf08      	it	eq
 800b7fe:	2205      	moveq	r2, #5
 800b800:	921c      	str	r2, [sp, #112]	@ 0x70
 800b802:	9a2b      	ldr	r2, [sp, #172]	@ 0xac
 800b804:	2a00      	cmp	r2, #0
 800b806:	bf08      	it	eq
 800b808:	2205      	moveq	r2, #5
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	bf08      	it	eq
 800b80e:	2314      	moveq	r3, #20
 800b810:	931a      	str	r3, [sp, #104]	@ 0x68
 800b812:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 800b814:	931d      	str	r3, [sp, #116]	@ 0x74
 800b816:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
 800b818:	931f      	str	r3, [sp, #124]	@ 0x7c
 800b81a:	4b7f      	ldr	r3, [pc, #508]	@ (800ba18 <micro_ros_utilities_create_message_memory+0x24c>)
 800b81c:	921b      	str	r2, [sp, #108]	@ 0x6c
 800b81e:	6819      	ldr	r1, [r3, #0]
 800b820:	4606      	mov	r6, r0
 800b822:	4638      	mov	r0, r7
 800b824:	f002 fb48 	bl	800deb8 <get_message_typesupport_handle>
 800b828:	f10d 095c 	add.w	r9, sp, #92	@ 0x5c
 800b82c:	2300      	movs	r3, #0
 800b82e:	f8d0 a004 	ldr.w	sl, [r0, #4]
 800b832:	9317      	str	r3, [sp, #92]	@ 0x5c
 800b834:	e9c9 3301 	strd	r3, r3, [r9, #4]
 800b838:	bb05      	cbnz	r5, 800b87c <micro_ros_utilities_create_message_memory+0xb0>
 800b83a:	4629      	mov	r1, r5
 800b83c:	f8da 200c 	ldr.w	r2, [sl, #12]
 800b840:	4620      	mov	r0, r4
 800b842:	f011 fdf5 	bl	801d430 <memset>
 800b846:	e899 0007 	ldmia.w	r9, {r0, r1, r2}
 800b84a:	ab04      	add	r3, sp, #16
 800b84c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800b850:	ab20      	add	r3, sp, #128	@ 0x80
 800b852:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 800b856:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800b85a:	ad1a      	add	r5, sp, #104	@ 0x68
 800b85c:	4621      	mov	r1, r4
 800b85e:	e895 000c 	ldmia.w	r5, {r2, r3}
 800b862:	4650      	mov	r0, sl
 800b864:	f7ff fa62 	bl	800ad2c <handle_message_memory.constprop.2>
 800b868:	4604      	mov	r4, r0
 800b86a:	1b30      	subs	r0, r6, r4
 800b86c:	fab0 f080 	clz	r0, r0
 800b870:	0940      	lsrs	r0, r0, #5
 800b872:	b021      	add	sp, #132	@ 0x84
 800b874:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b878:	b002      	add	sp, #8
 800b87a:	4770      	bx	lr
 800b87c:	f8da 8008 	ldr.w	r8, [sl, #8]
 800b880:	f1b8 0f00 	cmp.w	r8, #0
 800b884:	f000 80c1 	beq.w	800ba0a <micro_ros_utilities_create_message_memory+0x23e>
 800b888:	960a      	str	r6, [sp, #40]	@ 0x28
 800b88a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b88c:	469b      	mov	fp, r3
 800b88e:	461f      	mov	r7, r3
 800b890:	4656      	mov	r6, sl
 800b892:	4644      	mov	r4, r8
 800b894:	6973      	ldr	r3, [r6, #20]
 800b896:	ebc7 1207 	rsb	r2, r7, r7, lsl #4
 800b89a:	eb03 0182 	add.w	r1, r3, r2, lsl #2
 800b89e:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
 800b8a2:	790b      	ldrb	r3, [r1, #4]
 800b8a4:	2b12      	cmp	r3, #18
 800b8a6:	d034      	beq.n	800b912 <micro_ros_utilities_create_message_memory+0x146>
 800b8a8:	2500      	movs	r5, #0
 800b8aa:	4640      	mov	r0, r8
 800b8ac:	f7f4 fd08 	bl	80002c0 <strlen>
 800b8b0:	4428      	add	r0, r5
 800b8b2:	3001      	adds	r0, #1
 800b8b4:	4583      	cmp	fp, r0
 800b8b6:	f107 0701 	add.w	r7, r7, #1
 800b8ba:	bf38      	it	cc
 800b8bc:	4683      	movcc	fp, r0
 800b8be:	42a7      	cmp	r7, r4
 800b8c0:	d3e8      	bcc.n	800b894 <micro_ros_utilities_create_message_memory+0xc8>
 800b8c2:	46b2      	mov	sl, r6
 800b8c4:	e9dd 640a 	ldrd	r6, r4, [sp, #40]	@ 0x28
 800b8c8:	ad12      	add	r5, sp, #72	@ 0x48
 800b8ca:	4659      	mov	r1, fp
 800b8cc:	4628      	mov	r0, r5
 800b8ce:	f003 fb29 	bl	800ef24 <micro_ros_string_utilities_init_with_size>
 800b8d2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b8d6:	e889 0007 	stmia.w	r9, {r0, r1, r2}
 800b8da:	f8da 200c 	ldr.w	r2, [sl, #12]
 800b8de:	2100      	movs	r1, #0
 800b8e0:	4620      	mov	r0, r4
 800b8e2:	f011 fda5 	bl	801d430 <memset>
 800b8e6:	e899 0007 	ldmia.w	r9, {r0, r1, r2}
 800b8ea:	ab04      	add	r3, sp, #16
 800b8ec:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800b8f0:	ab20      	add	r3, sp, #128	@ 0x80
 800b8f2:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 800b8f6:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800b8fa:	ad1a      	add	r5, sp, #104	@ 0x68
 800b8fc:	4621      	mov	r1, r4
 800b8fe:	e895 000c 	ldmia.w	r5, {r2, r3}
 800b902:	4650      	mov	r0, sl
 800b904:	f7ff fa12 	bl	800ad2c <handle_message_memory.constprop.2>
 800b908:	4604      	mov	r4, r0
 800b90a:	4648      	mov	r0, r9
 800b90c:	f003 fb66 	bl	800efdc <micro_ros_string_utilities_destroy>
 800b910:	e7ab      	b.n	800b86a <micro_ros_utilities_create_message_memory+0x9e>
 800b912:	4b41      	ldr	r3, [pc, #260]	@ (800ba18 <micro_ros_utilities_create_message_memory+0x24c>)
 800b914:	68c8      	ldr	r0, [r1, #12]
 800b916:	6819      	ldr	r1, [r3, #0]
 800b918:	f002 face 	bl	800deb8 <get_message_typesupport_handle>
 800b91c:	f8d0 a004 	ldr.w	sl, [r0, #4]
 800b920:	f8da 3008 	ldr.w	r3, [sl, #8]
 800b924:	b323      	cbz	r3, 800b970 <micro_ros_utilities_create_message_memory+0x1a4>
 800b926:	e9cd b70e 	strd	fp, r7, [sp, #56]	@ 0x38
 800b92a:	2500      	movs	r5, #0
 800b92c:	e9cd 680c 	strd	r6, r8, [sp, #48]	@ 0x30
 800b930:	462c      	mov	r4, r5
 800b932:	461e      	mov	r6, r3
 800b934:	f8da 3014 	ldr.w	r3, [sl, #20]
 800b938:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
 800b93c:	eb03 0182 	add.w	r1, r3, r2, lsl #2
 800b940:	f853 b022 	ldr.w	fp, [r3, r2, lsl #2]
 800b944:	790a      	ldrb	r2, [r1, #4]
 800b946:	2a12      	cmp	r2, #18
 800b948:	d015      	beq.n	800b976 <micro_ros_utilities_create_message_memory+0x1aa>
 800b94a:	2700      	movs	r7, #0
 800b94c:	4658      	mov	r0, fp
 800b94e:	f7f4 fcb7 	bl	80002c0 <strlen>
 800b952:	4438      	add	r0, r7
 800b954:	3001      	adds	r0, #1
 800b956:	4285      	cmp	r5, r0
 800b958:	f104 0401 	add.w	r4, r4, #1
 800b95c:	bf38      	it	cc
 800b95e:	4605      	movcc	r5, r0
 800b960:	42b4      	cmp	r4, r6
 800b962:	d3e7      	bcc.n	800b934 <micro_ros_utilities_create_message_memory+0x168>
 800b964:	e9dd 680c 	ldrd	r6, r8, [sp, #48]	@ 0x30
 800b968:	e9dd b70e 	ldrd	fp, r7, [sp, #56]	@ 0x38
 800b96c:	68b4      	ldr	r4, [r6, #8]
 800b96e:	e79c      	b.n	800b8aa <micro_ros_utilities_create_message_memory+0xde>
 800b970:	68b4      	ldr	r4, [r6, #8]
 800b972:	461d      	mov	r5, r3
 800b974:	e799      	b.n	800b8aa <micro_ros_utilities_create_message_memory+0xde>
 800b976:	4b28      	ldr	r3, [pc, #160]	@ (800ba18 <micro_ros_utilities_create_message_memory+0x24c>)
 800b978:	68c8      	ldr	r0, [r1, #12]
 800b97a:	6819      	ldr	r1, [r3, #0]
 800b97c:	f002 fa9c 	bl	800deb8 <get_message_typesupport_handle>
 800b980:	6843      	ldr	r3, [r0, #4]
 800b982:	9309      	str	r3, [sp, #36]	@ 0x24
 800b984:	f8d3 8008 	ldr.w	r8, [r3, #8]
 800b988:	f1b8 0f00 	cmp.w	r8, #0
 800b98c:	d03f      	beq.n	800ba0e <micro_ros_utilities_create_message_memory+0x242>
 800b98e:	6959      	ldr	r1, [r3, #20]
 800b990:	9410      	str	r4, [sp, #64]	@ 0x40
 800b992:	2700      	movs	r7, #0
 800b994:	4644      	mov	r4, r8
 800b996:	463e      	mov	r6, r7
 800b998:	4688      	mov	r8, r1
 800b99a:	ebc6 1206 	rsb	r2, r6, r6, lsl #4
 800b99e:	eb08 0182 	add.w	r1, r8, r2, lsl #2
 800b9a2:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 800b9a6:	f891 c004 	ldrb.w	ip, [r1, #4]
 800b9aa:	f1bc 0f12 	cmp.w	ip, #18
 800b9ae:	4610      	mov	r0, r2
 800b9b0:	d00d      	beq.n	800b9ce <micro_ros_utilities_create_message_memory+0x202>
 800b9b2:	f7f4 fc85 	bl	80002c0 <strlen>
 800b9b6:	3001      	adds	r0, #1
 800b9b8:	4287      	cmp	r7, r0
 800b9ba:	f106 0601 	add.w	r6, r6, #1
 800b9be:	bf38      	it	cc
 800b9c0:	4607      	movcc	r7, r0
 800b9c2:	42a6      	cmp	r6, r4
 800b9c4:	d3e9      	bcc.n	800b99a <micro_ros_utilities_create_message_memory+0x1ce>
 800b9c6:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 800b9c8:	f8da 6008 	ldr.w	r6, [sl, #8]
 800b9cc:	e7be      	b.n	800b94c <micro_ros_utilities_create_message_memory+0x180>
 800b9ce:	4b12      	ldr	r3, [pc, #72]	@ (800ba18 <micro_ros_utilities_create_message_memory+0x24c>)
 800b9d0:	68c8      	ldr	r0, [r1, #12]
 800b9d2:	6819      	ldr	r1, [r3, #0]
 800b9d4:	9211      	str	r2, [sp, #68]	@ 0x44
 800b9d6:	f002 fa6f 	bl	800deb8 <get_message_typesupport_handle>
 800b9da:	6840      	ldr	r0, [r0, #4]
 800b9dc:	f7ff fc5c 	bl	800b298 <get_longest_member_name>
 800b9e0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b9e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b9e4:	4680      	mov	r8, r0
 800b9e6:	4610      	mov	r0, r2
 800b9e8:	689c      	ldr	r4, [r3, #8]
 800b9ea:	f7f4 fc69 	bl	80002c0 <strlen>
 800b9ee:	4480      	add	r8, r0
 800b9f0:	f108 0801 	add.w	r8, r8, #1
 800b9f4:	4547      	cmp	r7, r8
 800b9f6:	f106 0601 	add.w	r6, r6, #1
 800b9fa:	bf38      	it	cc
 800b9fc:	4647      	movcc	r7, r8
 800b9fe:	42a6      	cmp	r6, r4
 800ba00:	d2e1      	bcs.n	800b9c6 <micro_ros_utilities_create_message_memory+0x1fa>
 800ba02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba04:	f8d3 8014 	ldr.w	r8, [r3, #20]
 800ba08:	e7c7      	b.n	800b99a <micro_ros_utilities_create_message_memory+0x1ce>
 800ba0a:	46c3      	mov	fp, r8
 800ba0c:	e75c      	b.n	800b8c8 <micro_ros_utilities_create_message_memory+0xfc>
 800ba0e:	f8da 6008 	ldr.w	r6, [sl, #8]
 800ba12:	4647      	mov	r7, r8
 800ba14:	e79a      	b.n	800b94c <micro_ros_utilities_create_message_memory+0x180>
 800ba16:	bf00      	nop
 800ba18:	200005a0 	.word	0x200005a0

0800ba1c <rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity>:
 800ba1c:	4b04      	ldr	r3, [pc, #16]	@ (800ba30 <rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity+0x14>)
 800ba1e:	681a      	ldr	r2, [r3, #0]
 800ba20:	b10a      	cbz	r2, 800ba26 <rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity+0xa>
 800ba22:	4803      	ldr	r0, [pc, #12]	@ (800ba30 <rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity+0x14>)
 800ba24:	4770      	bx	lr
 800ba26:	4a03      	ldr	r2, [pc, #12]	@ (800ba34 <rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity+0x18>)
 800ba28:	4801      	ldr	r0, [pc, #4]	@ (800ba30 <rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity+0x14>)
 800ba2a:	6812      	ldr	r2, [r2, #0]
 800ba2c:	601a      	str	r2, [r3, #0]
 800ba2e:	4770      	bx	lr
 800ba30:	200000dc 	.word	0x200000dc
 800ba34:	2000059c 	.word	0x2000059c

0800ba38 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity>:
 800ba38:	4a02      	ldr	r2, [pc, #8]	@ (800ba44 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity+0xc>)
 800ba3a:	4b03      	ldr	r3, [pc, #12]	@ (800ba48 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity+0x10>)
 800ba3c:	6812      	ldr	r2, [r2, #0]
 800ba3e:	601a      	str	r2, [r3, #0]
 800ba40:	4770      	bx	lr
 800ba42:	bf00      	nop
 800ba44:	2000059c 	.word	0x2000059c
 800ba48:	200000dc 	.word	0x200000dc

0800ba4c <rosidl_typesupport_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode>:
 800ba4c:	4b04      	ldr	r3, [pc, #16]	@ (800ba60 <rosidl_typesupport_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x14>)
 800ba4e:	681a      	ldr	r2, [r3, #0]
 800ba50:	b10a      	cbz	r2, 800ba56 <rosidl_typesupport_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0xa>
 800ba52:	4803      	ldr	r0, [pc, #12]	@ (800ba60 <rosidl_typesupport_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x14>)
 800ba54:	4770      	bx	lr
 800ba56:	4a03      	ldr	r2, [pc, #12]	@ (800ba64 <rosidl_typesupport_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x18>)
 800ba58:	4801      	ldr	r0, [pc, #4]	@ (800ba60 <rosidl_typesupport_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x14>)
 800ba5a:	6812      	ldr	r2, [r2, #0]
 800ba5c:	601a      	str	r2, [r3, #0]
 800ba5e:	4770      	bx	lr
 800ba60:	200000fc 	.word	0x200000fc
 800ba64:	2000059c 	.word	0x2000059c

0800ba68 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Request>:
 800ba68:	4b06      	ldr	r3, [pc, #24]	@ (800ba84 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Request+0x1c>)
 800ba6a:	4807      	ldr	r0, [pc, #28]	@ (800ba88 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Request+0x20>)
 800ba6c:	4907      	ldr	r1, [pc, #28]	@ (800ba8c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Request+0x24>)
 800ba6e:	4a08      	ldr	r2, [pc, #32]	@ (800ba90 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Request+0x28>)
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	b410      	push	{r4}
 800ba74:	4c07      	ldr	r4, [pc, #28]	@ (800ba94 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Request+0x2c>)
 800ba76:	6003      	str	r3, [r0, #0]
 800ba78:	6023      	str	r3, [r4, #0]
 800ba7a:	600b      	str	r3, [r1, #0]
 800ba7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba80:	6013      	str	r3, [r2, #0]
 800ba82:	4770      	bx	lr
 800ba84:	2000059c 	.word	0x2000059c
 800ba88:	20000150 	.word	0x20000150
 800ba8c:	20000130 	.word	0x20000130
 800ba90:	200000fc 	.word	0x200000fc
 800ba94:	20000170 	.word	0x20000170

0800ba98 <rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses>:
 800ba98:	4b04      	ldr	r3, [pc, #16]	@ (800baac <rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses+0x14>)
 800ba9a:	681a      	ldr	r2, [r3, #0]
 800ba9c:	b10a      	cbz	r2, 800baa2 <rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses+0xa>
 800ba9e:	4803      	ldr	r0, [pc, #12]	@ (800baac <rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses+0x14>)
 800baa0:	4770      	bx	lr
 800baa2:	4a03      	ldr	r2, [pc, #12]	@ (800bab0 <rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses+0x18>)
 800baa4:	4801      	ldr	r0, [pc, #4]	@ (800baac <rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses+0x14>)
 800baa6:	6812      	ldr	r2, [r2, #0]
 800baa8:	601a      	str	r2, [r3, #0]
 800baaa:	4770      	bx	lr
 800baac:	20000190 	.word	0x20000190
 800bab0:	2000059c 	.word	0x2000059c

0800bab4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses>:
 800bab4:	4a02      	ldr	r2, [pc, #8]	@ (800bac0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses+0xc>)
 800bab6:	4b03      	ldr	r3, [pc, #12]	@ (800bac4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses+0x10>)
 800bab8:	6812      	ldr	r2, [r2, #0]
 800baba:	601a      	str	r2, [r3, #0]
 800babc:	4770      	bx	lr
 800babe:	bf00      	nop
 800bac0:	2000059c 	.word	0x2000059c
 800bac4:	20000190 	.word	0x20000190

0800bac8 <nereo_interfaces__msg__CommandVelocity__rosidl_typesupport_introspection_c__size_function__CommandVelocity__cmd_vel>:
 800bac8:	2006      	movs	r0, #6
 800baca:	4770      	bx	lr

0800bacc <nereo_interfaces__msg__CommandVelocity__rosidl_typesupport_introspection_c__get_const_function__CommandVelocity__cmd_vel>:
 800bacc:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800bad0:	4770      	bx	lr
 800bad2:	bf00      	nop

0800bad4 <nereo_interfaces__msg__CommandVelocity__rosidl_typesupport_introspection_c__fetch_function__CommandVelocity__cmd_vel>:
 800bad4:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800bad8:	6803      	ldr	r3, [r0, #0]
 800bada:	6013      	str	r3, [r2, #0]
 800badc:	4770      	bx	lr
 800bade:	bf00      	nop

0800bae0 <nereo_interfaces__msg__CommandVelocity__rosidl_typesupport_introspection_c__assign_function__CommandVelocity__cmd_vel>:
 800bae0:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800bae4:	6813      	ldr	r3, [r2, #0]
 800bae6:	6003      	str	r3, [r0, #0]
 800bae8:	4770      	bx	lr
 800baea:	bf00      	nop

0800baec <nereo_interfaces__msg__CommandVelocity__rosidl_typesupport_introspection_c__CommandVelocity_init_function>:
 800baec:	f008 ba86 	b.w	8013ffc <nereo_interfaces__msg__CommandVelocity__init>

0800baf0 <nereo_interfaces__msg__CommandVelocity__rosidl_typesupport_introspection_c__CommandVelocity_fini_function>:
 800baf0:	f008 ba88 	b.w	8014004 <nereo_interfaces__msg__CommandVelocity__fini>

0800baf4 <nereo_interfaces__msg__CommandVelocity__rosidl_typesupport_introspection_c__get_function__CommandVelocity__cmd_vel>:
 800baf4:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800baf8:	4770      	bx	lr
 800bafa:	bf00      	nop

0800bafc <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity>:
 800bafc:	4b04      	ldr	r3, [pc, #16]	@ (800bb10 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity+0x14>)
 800bafe:	681a      	ldr	r2, [r3, #0]
 800bb00:	b10a      	cbz	r2, 800bb06 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity+0xa>
 800bb02:	4803      	ldr	r0, [pc, #12]	@ (800bb10 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity+0x14>)
 800bb04:	4770      	bx	lr
 800bb06:	4a03      	ldr	r2, [pc, #12]	@ (800bb14 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity+0x18>)
 800bb08:	4801      	ldr	r0, [pc, #4]	@ (800bb10 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity+0x14>)
 800bb0a:	6812      	ldr	r2, [r2, #0]
 800bb0c:	601a      	str	r2, [r3, #0]
 800bb0e:	4770      	bx	lr
 800bb10:	200001b0 	.word	0x200001b0
 800bb14:	200005a0 	.word	0x200005a0

0800bb18 <nereo_interfaces__srv__SetNavigationMode_Event__rosidl_typesupport_introspection_c__size_function__SetNavigationMode_Event__request>:
 800bb18:	6840      	ldr	r0, [r0, #4]
 800bb1a:	4770      	bx	lr

0800bb1c <nereo_interfaces__srv__SetNavigationMode_Event__rosidl_typesupport_introspection_c__get_const_function__SetNavigationMode_Event__request>:
 800bb1c:	6800      	ldr	r0, [r0, #0]
 800bb1e:	4408      	add	r0, r1
 800bb20:	4770      	bx	lr
 800bb22:	bf00      	nop

0800bb24 <nereo_interfaces__srv__SetNavigationMode_Event__rosidl_typesupport_introspection_c__fetch_function__SetNavigationMode_Event__request>:
 800bb24:	6803      	ldr	r3, [r0, #0]
 800bb26:	5c5b      	ldrb	r3, [r3, r1]
 800bb28:	7013      	strb	r3, [r2, #0]
 800bb2a:	4770      	bx	lr

0800bb2c <nereo_interfaces__srv__SetNavigationMode_Event__rosidl_typesupport_introspection_c__assign_function__SetNavigationMode_Event__request>:
 800bb2c:	6803      	ldr	r3, [r0, #0]
 800bb2e:	7812      	ldrb	r2, [r2, #0]
 800bb30:	545a      	strb	r2, [r3, r1]
 800bb32:	4770      	bx	lr

0800bb34 <nereo_interfaces__srv__SetNavigationMode_Event__rosidl_typesupport_introspection_c__size_function__SetNavigationMode_Event__response>:
 800bb34:	6840      	ldr	r0, [r0, #4]
 800bb36:	4770      	bx	lr

0800bb38 <nereo_interfaces__srv__SetNavigationMode_Event__rosidl_typesupport_introspection_c__get_const_function__SetNavigationMode_Event__response>:
 800bb38:	6800      	ldr	r0, [r0, #0]
 800bb3a:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 800bb3e:	4770      	bx	lr

0800bb40 <nereo_interfaces__srv__SetNavigationMode_Event__rosidl_typesupport_introspection_c__fetch_function__SetNavigationMode_Event__response>:
 800bb40:	6803      	ldr	r3, [r0, #0]
 800bb42:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800bb46:	8013      	strh	r3, [r2, #0]
 800bb48:	4770      	bx	lr
 800bb4a:	bf00      	nop

0800bb4c <nereo_interfaces__srv__SetNavigationMode_Event__rosidl_typesupport_introspection_c__assign_function__SetNavigationMode_Event__response>:
 800bb4c:	6803      	ldr	r3, [r0, #0]
 800bb4e:	8812      	ldrh	r2, [r2, #0]
 800bb50:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
 800bb54:	4770      	bx	lr
 800bb56:	bf00      	nop

0800bb58 <nereo_interfaces__srv__SetNavigationMode_Request__rosidl_typesupport_introspection_c__SetNavigationMode_Request_init_function>:
 800bb58:	f008 bc1c 	b.w	8014394 <nereo_interfaces__srv__SetNavigationMode_Request__init>

0800bb5c <nereo_interfaces__srv__SetNavigationMode_Request__rosidl_typesupport_introspection_c__SetNavigationMode_Request_fini_function>:
 800bb5c:	f008 bc1e 	b.w	801439c <nereo_interfaces__srv__SetNavigationMode_Request__fini>

0800bb60 <nereo_interfaces__srv__SetNavigationMode_Response__rosidl_typesupport_introspection_c__SetNavigationMode_Response_init_function>:
 800bb60:	f008 bc56 	b.w	8014410 <nereo_interfaces__srv__SetNavigationMode_Response__init>

0800bb64 <nereo_interfaces__srv__SetNavigationMode_Response__rosidl_typesupport_introspection_c__SetNavigationMode_Response_fini_function>:
 800bb64:	f008 bc58 	b.w	8014418 <nereo_interfaces__srv__SetNavigationMode_Response__fini>

0800bb68 <nereo_interfaces__srv__SetNavigationMode_Event__rosidl_typesupport_introspection_c__SetNavigationMode_Event_init_function>:
 800bb68:	f008 bc92 	b.w	8014490 <nereo_interfaces__srv__SetNavigationMode_Event__init>

0800bb6c <nereo_interfaces__srv__SetNavigationMode_Event__rosidl_typesupport_introspection_c__SetNavigationMode_Event_fini_function>:
 800bb6c:	f008 bcc6 	b.w	80144fc <nereo_interfaces__srv__SetNavigationMode_Event__fini>

0800bb70 <nereo_interfaces__srv__SetNavigationMode_Event__rosidl_typesupport_introspection_c__resize_function__SetNavigationMode_Event__request>:
 800bb70:	b538      	push	{r3, r4, r5, lr}
 800bb72:	4604      	mov	r4, r0
 800bb74:	460d      	mov	r5, r1
 800bb76:	f008 fc37 	bl	80143e8 <nereo_interfaces__srv__SetNavigationMode_Request__Sequence__fini>
 800bb7a:	4629      	mov	r1, r5
 800bb7c:	4620      	mov	r0, r4
 800bb7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bb82:	f008 bc15 	b.w	80143b0 <nereo_interfaces__srv__SetNavigationMode_Request__Sequence__init>
 800bb86:	bf00      	nop

0800bb88 <nereo_interfaces__srv__SetNavigationMode_Event__rosidl_typesupport_introspection_c__resize_function__SetNavigationMode_Event__response>:
 800bb88:	b538      	push	{r3, r4, r5, lr}
 800bb8a:	4604      	mov	r4, r0
 800bb8c:	460d      	mov	r5, r1
 800bb8e:	f008 fc6b 	bl	8014468 <nereo_interfaces__srv__SetNavigationMode_Response__Sequence__fini>
 800bb92:	4629      	mov	r1, r5
 800bb94:	4620      	mov	r0, r4
 800bb96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bb9a:	f008 bc49 	b.w	8014430 <nereo_interfaces__srv__SetNavigationMode_Response__Sequence__init>
 800bb9e:	bf00      	nop

0800bba0 <nereo_interfaces__srv__SetNavigationMode_Event__rosidl_typesupport_introspection_c__get_function__SetNavigationMode_Event__request>:
 800bba0:	6800      	ldr	r0, [r0, #0]
 800bba2:	4408      	add	r0, r1
 800bba4:	4770      	bx	lr
 800bba6:	bf00      	nop

0800bba8 <nereo_interfaces__srv__SetNavigationMode_Event__rosidl_typesupport_introspection_c__get_function__SetNavigationMode_Event__response>:
 800bba8:	6800      	ldr	r0, [r0, #0]
 800bbaa:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 800bbae:	4770      	bx	lr

0800bbb0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Request>:
 800bbb0:	4b04      	ldr	r3, [pc, #16]	@ (800bbc4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Request+0x14>)
 800bbb2:	681a      	ldr	r2, [r3, #0]
 800bbb4:	b10a      	cbz	r2, 800bbba <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Request+0xa>
 800bbb6:	4803      	ldr	r0, [pc, #12]	@ (800bbc4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Request+0x14>)
 800bbb8:	4770      	bx	lr
 800bbba:	4a03      	ldr	r2, [pc, #12]	@ (800bbc8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Request+0x18>)
 800bbbc:	4801      	ldr	r0, [pc, #4]	@ (800bbc4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Request+0x14>)
 800bbbe:	6812      	ldr	r2, [r2, #0]
 800bbc0:	601a      	str	r2, [r3, #0]
 800bbc2:	4770      	bx	lr
 800bbc4:	200003a0 	.word	0x200003a0
 800bbc8:	200005a0 	.word	0x200005a0

0800bbcc <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Response>:
 800bbcc:	4b04      	ldr	r3, [pc, #16]	@ (800bbe0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Response+0x14>)
 800bbce:	681a      	ldr	r2, [r3, #0]
 800bbd0:	b10a      	cbz	r2, 800bbd6 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Response+0xa>
 800bbd2:	4803      	ldr	r0, [pc, #12]	@ (800bbe0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Response+0x14>)
 800bbd4:	4770      	bx	lr
 800bbd6:	4a03      	ldr	r2, [pc, #12]	@ (800bbe4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Response+0x18>)
 800bbd8:	4801      	ldr	r0, [pc, #4]	@ (800bbe0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Response+0x14>)
 800bbda:	6812      	ldr	r2, [r2, #0]
 800bbdc:	601a      	str	r2, [r3, #0]
 800bbde:	4770      	bx	lr
 800bbe0:	20000310 	.word	0x20000310
 800bbe4:	200005a0 	.word	0x200005a0

0800bbe8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Event>:
 800bbe8:	b508      	push	{r3, lr}
 800bbea:	f002 fb63 	bl	800e2b4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 800bbee:	4913      	ldr	r1, [pc, #76]	@ (800bc3c <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Event+0x54>)
 800bbf0:	4b13      	ldr	r3, [pc, #76]	@ (800bc40 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Event+0x58>)
 800bbf2:	680a      	ldr	r2, [r1, #0]
 800bbf4:	60d8      	str	r0, [r3, #12]
 800bbf6:	b152      	cbz	r2, 800bc0e <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Event+0x26>
 800bbf8:	4a12      	ldr	r2, [pc, #72]	@ (800bc44 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Event+0x5c>)
 800bbfa:	6499      	str	r1, [r3, #72]	@ 0x48
 800bbfc:	6811      	ldr	r1, [r2, #0]
 800bbfe:	b171      	cbz	r1, 800bc1e <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Event+0x36>
 800bc00:	4911      	ldr	r1, [pc, #68]	@ (800bc48 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Event+0x60>)
 800bc02:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 800bc06:	680b      	ldr	r3, [r1, #0]
 800bc08:	b193      	cbz	r3, 800bc30 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Event+0x48>
 800bc0a:	480f      	ldr	r0, [pc, #60]	@ (800bc48 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Event+0x60>)
 800bc0c:	bd08      	pop	{r3, pc}
 800bc0e:	4a0f      	ldr	r2, [pc, #60]	@ (800bc4c <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Event+0x64>)
 800bc10:	6499      	str	r1, [r3, #72]	@ 0x48
 800bc12:	6812      	ldr	r2, [r2, #0]
 800bc14:	600a      	str	r2, [r1, #0]
 800bc16:	4a0b      	ldr	r2, [pc, #44]	@ (800bc44 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Event+0x5c>)
 800bc18:	6811      	ldr	r1, [r2, #0]
 800bc1a:	2900      	cmp	r1, #0
 800bc1c:	d1f0      	bne.n	800bc00 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Event+0x18>
 800bc1e:	490b      	ldr	r1, [pc, #44]	@ (800bc4c <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Event+0x64>)
 800bc20:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 800bc24:	6809      	ldr	r1, [r1, #0]
 800bc26:	6011      	str	r1, [r2, #0]
 800bc28:	4907      	ldr	r1, [pc, #28]	@ (800bc48 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Event+0x60>)
 800bc2a:	680b      	ldr	r3, [r1, #0]
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d1ec      	bne.n	800bc0a <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Event+0x22>
 800bc30:	4b06      	ldr	r3, [pc, #24]	@ (800bc4c <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Event+0x64>)
 800bc32:	4805      	ldr	r0, [pc, #20]	@ (800bc48 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Event+0x60>)
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	600b      	str	r3, [r1, #0]
 800bc38:	bd08      	pop	{r3, pc}
 800bc3a:	bf00      	nop
 800bc3c:	200003a0 	.word	0x200003a0
 800bc40:	2000025c 	.word	0x2000025c
 800bc44:	20000310 	.word	0x20000310
 800bc48:	20000244 	.word	0x20000244
 800bc4c:	200005a0 	.word	0x200005a0

0800bc50 <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode>:
 800bc50:	4b25      	ldr	r3, [pc, #148]	@ (800bce8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x98>)
 800bc52:	681a      	ldr	r2, [r3, #0]
 800bc54:	b510      	push	{r4, lr}
 800bc56:	b142      	cbz	r2, 800bc6a <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x1a>
 800bc58:	685c      	ldr	r4, [r3, #4]
 800bc5a:	68a3      	ldr	r3, [r4, #8]
 800bc5c:	b163      	cbz	r3, 800bc78 <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x28>
 800bc5e:	68e3      	ldr	r3, [r4, #12]
 800bc60:	b193      	cbz	r3, 800bc88 <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x38>
 800bc62:	6923      	ldr	r3, [r4, #16]
 800bc64:	b1c3      	cbz	r3, 800bc98 <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x48>
 800bc66:	4820      	ldr	r0, [pc, #128]	@ (800bce8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x98>)
 800bc68:	bd10      	pop	{r4, pc}
 800bc6a:	4a20      	ldr	r2, [pc, #128]	@ (800bcec <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x9c>)
 800bc6c:	685c      	ldr	r4, [r3, #4]
 800bc6e:	6812      	ldr	r2, [r2, #0]
 800bc70:	601a      	str	r2, [r3, #0]
 800bc72:	68a3      	ldr	r3, [r4, #8]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d1f2      	bne.n	800bc5e <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0xe>
 800bc78:	4a1d      	ldr	r2, [pc, #116]	@ (800bcf0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0xa0>)
 800bc7a:	6813      	ldr	r3, [r2, #0]
 800bc7c:	b303      	cbz	r3, 800bcc0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x70>
 800bc7e:	6853      	ldr	r3, [r2, #4]
 800bc80:	60a3      	str	r3, [r4, #8]
 800bc82:	68e3      	ldr	r3, [r4, #12]
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d1ec      	bne.n	800bc62 <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x12>
 800bc88:	4b1a      	ldr	r3, [pc, #104]	@ (800bcf4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0xa4>)
 800bc8a:	681a      	ldr	r2, [r3, #0]
 800bc8c:	b1e2      	cbz	r2, 800bcc8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x78>
 800bc8e:	685b      	ldr	r3, [r3, #4]
 800bc90:	60e3      	str	r3, [r4, #12]
 800bc92:	6923      	ldr	r3, [r4, #16]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d1e6      	bne.n	800bc66 <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x16>
 800bc98:	f002 fb0c 	bl	800e2b4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 800bc9c:	4a14      	ldr	r2, [pc, #80]	@ (800bcf0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0xa0>)
 800bc9e:	4916      	ldr	r1, [pc, #88]	@ (800bcf8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0xa8>)
 800bca0:	6813      	ldr	r3, [r2, #0]
 800bca2:	60c8      	str	r0, [r1, #12]
 800bca4:	b1e3      	cbz	r3, 800bce0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x90>
 800bca6:	4b13      	ldr	r3, [pc, #76]	@ (800bcf4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0xa4>)
 800bca8:	648a      	str	r2, [r1, #72]	@ 0x48
 800bcaa:	681a      	ldr	r2, [r3, #0]
 800bcac:	b1a2      	cbz	r2, 800bcd8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x88>
 800bcae:	4a13      	ldr	r2, [pc, #76]	@ (800bcfc <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0xac>)
 800bcb0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
 800bcb4:	6813      	ldr	r3, [r2, #0]
 800bcb6:	b15b      	cbz	r3, 800bcd0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x80>
 800bcb8:	6853      	ldr	r3, [r2, #4]
 800bcba:	480b      	ldr	r0, [pc, #44]	@ (800bce8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x98>)
 800bcbc:	6123      	str	r3, [r4, #16]
 800bcbe:	bd10      	pop	{r4, pc}
 800bcc0:	4b0a      	ldr	r3, [pc, #40]	@ (800bcec <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x9c>)
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	6013      	str	r3, [r2, #0]
 800bcc6:	e7da      	b.n	800bc7e <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x2e>
 800bcc8:	4a08      	ldr	r2, [pc, #32]	@ (800bcec <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x9c>)
 800bcca:	6812      	ldr	r2, [r2, #0]
 800bccc:	601a      	str	r2, [r3, #0]
 800bcce:	e7de      	b.n	800bc8e <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x3e>
 800bcd0:	4b06      	ldr	r3, [pc, #24]	@ (800bcec <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x9c>)
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	6013      	str	r3, [r2, #0]
 800bcd6:	e7ef      	b.n	800bcb8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x68>
 800bcd8:	4a04      	ldr	r2, [pc, #16]	@ (800bcec <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x9c>)
 800bcda:	6812      	ldr	r2, [r2, #0]
 800bcdc:	601a      	str	r2, [r3, #0]
 800bcde:	e7e6      	b.n	800bcae <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x5e>
 800bce0:	4b02      	ldr	r3, [pc, #8]	@ (800bcec <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x9c>)
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	6013      	str	r3, [r2, #0]
 800bce6:	e7de      	b.n	800bca6 <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x56>
 800bce8:	20000204 	.word	0x20000204
 800bcec:	200005a0 	.word	0x200005a0
 800bcf0:	200003a0 	.word	0x200003a0
 800bcf4:	20000310 	.word	0x20000310
 800bcf8:	2000025c 	.word	0x2000025c
 800bcfc:	20000244 	.word	0x20000244

0800bd00 <nereo_interfaces__msg__ThrusterStatuses__rosidl_typesupport_introspection_c__size_function__ThrusterStatuses__thruster_pwms>:
 800bd00:	2008      	movs	r0, #8
 800bd02:	4770      	bx	lr

0800bd04 <nereo_interfaces__msg__ThrusterStatuses__rosidl_typesupport_introspection_c__get_const_function__ThrusterStatuses__thruster_pwms>:
 800bd04:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 800bd08:	4770      	bx	lr
 800bd0a:	bf00      	nop

0800bd0c <nereo_interfaces__msg__ThrusterStatuses__rosidl_typesupport_introspection_c__fetch_function__ThrusterStatuses__thruster_pwms>:
 800bd0c:	f830 3011 	ldrh.w	r3, [r0, r1, lsl #1]
 800bd10:	8013      	strh	r3, [r2, #0]
 800bd12:	4770      	bx	lr

0800bd14 <nereo_interfaces__msg__ThrusterStatuses__rosidl_typesupport_introspection_c__assign_function__ThrusterStatuses__thruster_pwms>:
 800bd14:	8813      	ldrh	r3, [r2, #0]
 800bd16:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 800bd1a:	4770      	bx	lr

0800bd1c <nereo_interfaces__msg__ThrusterStatuses__rosidl_typesupport_introspection_c__ThrusterStatuses_init_function>:
 800bd1c:	f008 bc9e 	b.w	801465c <nereo_interfaces__msg__ThrusterStatuses__init>

0800bd20 <nereo_interfaces__msg__ThrusterStatuses__rosidl_typesupport_introspection_c__ThrusterStatuses_fini_function>:
 800bd20:	f008 bca0 	b.w	8014664 <nereo_interfaces__msg__ThrusterStatuses__fini>

0800bd24 <nereo_interfaces__msg__ThrusterStatuses__rosidl_typesupport_introspection_c__get_function__ThrusterStatuses__thruster_pwms>:
 800bd24:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 800bd28:	4770      	bx	lr
 800bd2a:	bf00      	nop

0800bd2c <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses>:
 800bd2c:	4b04      	ldr	r3, [pc, #16]	@ (800bd40 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses+0x14>)
 800bd2e:	681a      	ldr	r2, [r3, #0]
 800bd30:	b10a      	cbz	r2, 800bd36 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses+0xa>
 800bd32:	4803      	ldr	r0, [pc, #12]	@ (800bd40 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses+0x14>)
 800bd34:	4770      	bx	lr
 800bd36:	4a03      	ldr	r2, [pc, #12]	@ (800bd44 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses+0x18>)
 800bd38:	4801      	ldr	r0, [pc, #4]	@ (800bd40 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses+0x14>)
 800bd3a:	6812      	ldr	r2, [r2, #0]
 800bd3c:	601a      	str	r2, [r3, #0]
 800bd3e:	4770      	bx	lr
 800bd40:	200003f4 	.word	0x200003f4
 800bd44:	200005a0 	.word	0x200005a0

0800bd48 <_CommandVelocity__max_serialized_size>:
 800bd48:	b508      	push	{r3, lr}
 800bd4a:	2104      	movs	r1, #4
 800bd4c:	2000      	movs	r0, #0
 800bd4e:	f005 fa17 	bl	8011180 <ucdr_alignment>
 800bd52:	3018      	adds	r0, #24
 800bd54:	bd08      	pop	{r3, pc}
 800bd56:	bf00      	nop

0800bd58 <get_serialized_size_nereo_interfaces__msg__CommandVelocity>:
 800bd58:	b508      	push	{r3, lr}
 800bd5a:	b120      	cbz	r0, 800bd66 <get_serialized_size_nereo_interfaces__msg__CommandVelocity+0xe>
 800bd5c:	4608      	mov	r0, r1
 800bd5e:	2104      	movs	r1, #4
 800bd60:	f005 fa0e 	bl	8011180 <ucdr_alignment>
 800bd64:	3018      	adds	r0, #24
 800bd66:	bd08      	pop	{r3, pc}

0800bd68 <_CommandVelocity__cdr_deserialize>:
 800bd68:	b111      	cbz	r1, 800bd70 <_CommandVelocity__cdr_deserialize+0x8>
 800bd6a:	2206      	movs	r2, #6
 800bd6c:	f003 bb72 	b.w	800f454 <ucdr_deserialize_array_float>
 800bd70:	4608      	mov	r0, r1
 800bd72:	4770      	bx	lr

0800bd74 <_CommandVelocity__cdr_serialize>:
 800bd74:	460b      	mov	r3, r1
 800bd76:	4601      	mov	r1, r0
 800bd78:	b118      	cbz	r0, 800bd82 <_CommandVelocity__cdr_serialize+0xe>
 800bd7a:	2206      	movs	r2, #6
 800bd7c:	4618      	mov	r0, r3
 800bd7e:	f003 bb15 	b.w	800f3ac <ucdr_serialize_array_float>
 800bd82:	4770      	bx	lr

0800bd84 <_CommandVelocity__get_serialized_size>:
 800bd84:	b130      	cbz	r0, 800bd94 <_CommandVelocity__get_serialized_size+0x10>
 800bd86:	b508      	push	{r3, lr}
 800bd88:	2104      	movs	r1, #4
 800bd8a:	2000      	movs	r0, #0
 800bd8c:	f005 f9f8 	bl	8011180 <ucdr_alignment>
 800bd90:	3018      	adds	r0, #24
 800bd92:	bd08      	pop	{r3, pc}
 800bd94:	4770      	bx	lr
 800bd96:	bf00      	nop

0800bd98 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity>:
 800bd98:	4800      	ldr	r0, [pc, #0]	@ (800bd9c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity+0x4>)
 800bd9a:	4770      	bx	lr
 800bd9c:	20000448 	.word	0x20000448

0800bda0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Request>:
 800bda0:	4800      	ldr	r0, [pc, #0]	@ (800bda4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Request+0x4>)
 800bda2:	4770      	bx	lr
 800bda4:	20000520 	.word	0x20000520

0800bda8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Response>:
 800bda8:	4800      	ldr	r0, [pc, #0]	@ (800bdac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Response+0x4>)
 800bdaa:	4770      	bx	lr
 800bdac:	200004ec 	.word	0x200004ec

0800bdb0 <_SetNavigationMode_Request__max_serialized_size>:
 800bdb0:	b508      	push	{r3, lr}
 800bdb2:	2101      	movs	r1, #1
 800bdb4:	2000      	movs	r0, #0
 800bdb6:	f005 f9e3 	bl	8011180 <ucdr_alignment>
 800bdba:	3001      	adds	r0, #1
 800bdbc:	bd08      	pop	{r3, pc}
 800bdbe:	bf00      	nop

0800bdc0 <_SetNavigationMode_Request__cdr_deserialize>:
 800bdc0:	b109      	cbz	r1, 800bdc6 <_SetNavigationMode_Request__cdr_deserialize+0x6>
 800bdc2:	f003 bc8b 	b.w	800f6dc <ucdr_deserialize_uint8_t>
 800bdc6:	4608      	mov	r0, r1
 800bdc8:	4770      	bx	lr
 800bdca:	bf00      	nop

0800bdcc <_SetNavigationMode_Event__max_serialized_size>:
 800bdcc:	b500      	push	{lr}
 800bdce:	b083      	sub	sp, #12
 800bdd0:	2301      	movs	r3, #1
 800bdd2:	2100      	movs	r1, #0
 800bdd4:	f10d 0007 	add.w	r0, sp, #7
 800bdd8:	f88d 3007 	strb.w	r3, [sp, #7]
 800bddc:	f002 fb14 	bl	800e408 <max_serialized_size_service_msgs__msg__ServiceEventInfo>
 800bde0:	b003      	add	sp, #12
 800bde2:	f85d fb04 	ldr.w	pc, [sp], #4
 800bde6:	bf00      	nop

0800bde8 <_SetNavigationMode_Event__cdr_deserialize>:
 800bde8:	2900      	cmp	r1, #0
 800bdea:	d042      	beq.n	800be72 <_SetNavigationMode_Event__cdr_deserialize+0x8a>
 800bdec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bdee:	b083      	sub	sp, #12
 800bdf0:	4606      	mov	r6, r0
 800bdf2:	460d      	mov	r5, r1
 800bdf4:	f002 fb28 	bl	800e448 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 800bdf8:	6843      	ldr	r3, [r0, #4]
 800bdfa:	4629      	mov	r1, r5
 800bdfc:	68db      	ldr	r3, [r3, #12]
 800bdfe:	4630      	mov	r0, r6
 800be00:	4798      	blx	r3
 800be02:	a901      	add	r1, sp, #4
 800be04:	4630      	mov	r0, r6
 800be06:	f003 ff99 	bl	800fd3c <ucdr_deserialize_uint32_t>
 800be0a:	9b01      	ldr	r3, [sp, #4]
 800be0c:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 800be0e:	429a      	cmp	r2, r3
 800be10:	d32c      	bcc.n	800be6c <_SetNavigationMode_Event__cdr_deserialize+0x84>
 800be12:	62eb      	str	r3, [r5, #44]	@ 0x2c
 800be14:	b173      	cbz	r3, 800be34 <_SetNavigationMode_Event__cdr_deserialize+0x4c>
 800be16:	4f18      	ldr	r7, [pc, #96]	@ (800be78 <_SetNavigationMode_Event__cdr_deserialize+0x90>)
 800be18:	2400      	movs	r4, #0
 800be1a:	e003      	b.n	800be24 <_SetNavigationMode_Event__cdr_deserialize+0x3c>
 800be1c:	9b01      	ldr	r3, [sp, #4]
 800be1e:	3401      	adds	r4, #1
 800be20:	42a3      	cmp	r3, r4
 800be22:	d907      	bls.n	800be34 <_SetNavigationMode_Event__cdr_deserialize+0x4c>
 800be24:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	4421      	add	r1, r4
 800be2a:	68db      	ldr	r3, [r3, #12]
 800be2c:	4630      	mov	r0, r6
 800be2e:	4798      	blx	r3
 800be30:	2800      	cmp	r0, #0
 800be32:	d1f3      	bne.n	800be1c <_SetNavigationMode_Event__cdr_deserialize+0x34>
 800be34:	a901      	add	r1, sp, #4
 800be36:	4630      	mov	r0, r6
 800be38:	f003 ff80 	bl	800fd3c <ucdr_deserialize_uint32_t>
 800be3c:	9b01      	ldr	r3, [sp, #4]
 800be3e:	6bea      	ldr	r2, [r5, #60]	@ 0x3c
 800be40:	429a      	cmp	r2, r3
 800be42:	d313      	bcc.n	800be6c <_SetNavigationMode_Event__cdr_deserialize+0x84>
 800be44:	63ab      	str	r3, [r5, #56]	@ 0x38
 800be46:	b17b      	cbz	r3, 800be68 <_SetNavigationMode_Event__cdr_deserialize+0x80>
 800be48:	4f0c      	ldr	r7, [pc, #48]	@ (800be7c <_SetNavigationMode_Event__cdr_deserialize+0x94>)
 800be4a:	2400      	movs	r4, #0
 800be4c:	e002      	b.n	800be54 <_SetNavigationMode_Event__cdr_deserialize+0x6c>
 800be4e:	9b01      	ldr	r3, [sp, #4]
 800be50:	42a3      	cmp	r3, r4
 800be52:	d909      	bls.n	800be68 <_SetNavigationMode_Event__cdr_deserialize+0x80>
 800be54:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	eb01 0144 	add.w	r1, r1, r4, lsl #1
 800be5c:	68db      	ldr	r3, [r3, #12]
 800be5e:	4630      	mov	r0, r6
 800be60:	4798      	blx	r3
 800be62:	3401      	adds	r4, #1
 800be64:	2800      	cmp	r0, #0
 800be66:	d1f2      	bne.n	800be4e <_SetNavigationMode_Event__cdr_deserialize+0x66>
 800be68:	b003      	add	sp, #12
 800be6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be6c:	2000      	movs	r0, #0
 800be6e:	b003      	add	sp, #12
 800be70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be72:	2000      	movs	r0, #0
 800be74:	4770      	bx	lr
 800be76:	bf00      	nop
 800be78:	20000520 	.word	0x20000520
 800be7c:	200004ec 	.word	0x200004ec

0800be80 <_SetNavigationMode_Event__cdr_serialize>:
 800be80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be84:	2800      	cmp	r0, #0
 800be86:	d038      	beq.n	800befa <_SetNavigationMode_Event__cdr_serialize+0x7a>
 800be88:	460e      	mov	r6, r1
 800be8a:	4604      	mov	r4, r0
 800be8c:	f002 fadc 	bl	800e448 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 800be90:	6843      	ldr	r3, [r0, #4]
 800be92:	4631      	mov	r1, r6
 800be94:	689b      	ldr	r3, [r3, #8]
 800be96:	4620      	mov	r0, r4
 800be98:	4798      	blx	r3
 800be9a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800be9c:	4630      	mov	r0, r6
 800be9e:	4639      	mov	r1, r7
 800bea0:	f003 fe22 	bl	800fae8 <ucdr_serialize_uint32_t>
 800bea4:	b180      	cbz	r0, 800bec8 <_SetNavigationMode_Event__cdr_serialize+0x48>
 800bea6:	b17f      	cbz	r7, 800bec8 <_SetNavigationMode_Event__cdr_serialize+0x48>
 800bea8:	f8df 8058 	ldr.w	r8, [pc, #88]	@ 800bf04 <_SetNavigationMode_Event__cdr_serialize+0x84>
 800beac:	2500      	movs	r5, #0
 800beae:	e002      	b.n	800beb6 <_SetNavigationMode_Event__cdr_serialize+0x36>
 800beb0:	3501      	adds	r5, #1
 800beb2:	42af      	cmp	r7, r5
 800beb4:	d008      	beq.n	800bec8 <_SetNavigationMode_Event__cdr_serialize+0x48>
 800beb6:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800beb8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800bebc:	4631      	mov	r1, r6
 800bebe:	689b      	ldr	r3, [r3, #8]
 800bec0:	4428      	add	r0, r5
 800bec2:	4798      	blx	r3
 800bec4:	2800      	cmp	r0, #0
 800bec6:	d1f3      	bne.n	800beb0 <_SetNavigationMode_Event__cdr_serialize+0x30>
 800bec8:	6ba7      	ldr	r7, [r4, #56]	@ 0x38
 800beca:	4630      	mov	r0, r6
 800becc:	4639      	mov	r1, r7
 800bece:	f003 fe0b 	bl	800fae8 <ucdr_serialize_uint32_t>
 800bed2:	4680      	mov	r8, r0
 800bed4:	b188      	cbz	r0, 800befa <_SetNavigationMode_Event__cdr_serialize+0x7a>
 800bed6:	b197      	cbz	r7, 800befe <_SetNavigationMode_Event__cdr_serialize+0x7e>
 800bed8:	f8df 902c 	ldr.w	r9, [pc, #44]	@ 800bf08 <_SetNavigationMode_Event__cdr_serialize+0x88>
 800bedc:	2500      	movs	r5, #0
 800bede:	e002      	b.n	800bee6 <_SetNavigationMode_Event__cdr_serialize+0x66>
 800bee0:	3501      	adds	r5, #1
 800bee2:	42af      	cmp	r7, r5
 800bee4:	d00b      	beq.n	800befe <_SetNavigationMode_Event__cdr_serialize+0x7e>
 800bee6:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 800bee8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800beec:	4631      	mov	r1, r6
 800beee:	689b      	ldr	r3, [r3, #8]
 800bef0:	eb00 0045 	add.w	r0, r0, r5, lsl #1
 800bef4:	4798      	blx	r3
 800bef6:	2800      	cmp	r0, #0
 800bef8:	d1f2      	bne.n	800bee0 <_SetNavigationMode_Event__cdr_serialize+0x60>
 800befa:	f04f 0800 	mov.w	r8, #0
 800befe:	4640      	mov	r0, r8
 800bf00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf04:	20000520 	.word	0x20000520
 800bf08:	200004ec 	.word	0x200004ec

0800bf0c <get_serialized_size_nereo_interfaces__srv__SetNavigationMode_Request>:
 800bf0c:	b508      	push	{r3, lr}
 800bf0e:	b120      	cbz	r0, 800bf1a <get_serialized_size_nereo_interfaces__srv__SetNavigationMode_Request+0xe>
 800bf10:	4608      	mov	r0, r1
 800bf12:	2101      	movs	r1, #1
 800bf14:	f005 f934 	bl	8011180 <ucdr_alignment>
 800bf18:	3001      	adds	r0, #1
 800bf1a:	bd08      	pop	{r3, pc}

0800bf1c <get_serialized_size_nereo_interfaces__srv__SetNavigationMode_Response>:
 800bf1c:	b180      	cbz	r0, 800bf40 <get_serialized_size_nereo_interfaces__srv__SetNavigationMode_Response+0x24>
 800bf1e:	b538      	push	{r3, r4, r5, lr}
 800bf20:	460d      	mov	r5, r1
 800bf22:	4628      	mov	r0, r5
 800bf24:	2101      	movs	r1, #1
 800bf26:	f005 f92b 	bl	8011180 <ucdr_alignment>
 800bf2a:	2101      	movs	r1, #1
 800bf2c:	186c      	adds	r4, r5, r1
 800bf2e:	4404      	add	r4, r0
 800bf30:	4620      	mov	r0, r4
 800bf32:	f005 f925 	bl	8011180 <ucdr_alignment>
 800bf36:	f1c5 0501 	rsb	r5, r5, #1
 800bf3a:	4405      	add	r5, r0
 800bf3c:	1928      	adds	r0, r5, r4
 800bf3e:	bd38      	pop	{r3, r4, r5, pc}
 800bf40:	4770      	bx	lr
 800bf42:	bf00      	nop

0800bf44 <_SetNavigationMode_Request__cdr_serialize>:
 800bf44:	460a      	mov	r2, r1
 800bf46:	b118      	cbz	r0, 800bf50 <_SetNavigationMode_Request__cdr_serialize+0xc>
 800bf48:	7801      	ldrb	r1, [r0, #0]
 800bf4a:	4610      	mov	r0, r2
 800bf4c:	f003 bbb0 	b.w	800f6b0 <ucdr_serialize_uint8_t>
 800bf50:	4770      	bx	lr
 800bf52:	bf00      	nop

0800bf54 <_SetNavigationMode_Response__cdr_deserialize>:
 800bf54:	b538      	push	{r3, r4, r5, lr}
 800bf56:	460c      	mov	r4, r1
 800bf58:	b141      	cbz	r1, 800bf6c <_SetNavigationMode_Response__cdr_deserialize+0x18>
 800bf5a:	4605      	mov	r5, r0
 800bf5c:	f003 fb90 	bl	800f680 <ucdr_deserialize_bool>
 800bf60:	1c61      	adds	r1, r4, #1
 800bf62:	4628      	mov	r0, r5
 800bf64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bf68:	f003 bbb8 	b.w	800f6dc <ucdr_deserialize_uint8_t>
 800bf6c:	4608      	mov	r0, r1
 800bf6e:	bd38      	pop	{r3, r4, r5, pc}

0800bf70 <_SetNavigationMode_Response__cdr_serialize>:
 800bf70:	b160      	cbz	r0, 800bf8c <_SetNavigationMode_Response__cdr_serialize+0x1c>
 800bf72:	b538      	push	{r3, r4, r5, lr}
 800bf74:	460d      	mov	r5, r1
 800bf76:	4604      	mov	r4, r0
 800bf78:	7801      	ldrb	r1, [r0, #0]
 800bf7a:	4628      	mov	r0, r5
 800bf7c:	f003 fb6a 	bl	800f654 <ucdr_serialize_bool>
 800bf80:	7861      	ldrb	r1, [r4, #1]
 800bf82:	4628      	mov	r0, r5
 800bf84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bf88:	f003 bb92 	b.w	800f6b0 <ucdr_serialize_uint8_t>
 800bf8c:	4770      	bx	lr
 800bf8e:	bf00      	nop

0800bf90 <get_serialized_size_nereo_interfaces__srv__SetNavigationMode_Event.part.0>:
 800bf90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf94:	4689      	mov	r9, r1
 800bf96:	4607      	mov	r7, r0
 800bf98:	f002 f9a2 	bl	800e2e0 <get_serialized_size_service_msgs__msg__ServiceEventInfo>
 800bf9c:	eb09 0400 	add.w	r4, r9, r0
 800bfa0:	2104      	movs	r1, #4
 800bfa2:	4620      	mov	r0, r4
 800bfa4:	f8d7 802c 	ldr.w	r8, [r7, #44]	@ 0x2c
 800bfa8:	f005 f8ea 	bl	8011180 <ucdr_alignment>
 800bfac:	1d06      	adds	r6, r0, #4
 800bfae:	4426      	add	r6, r4
 800bfb0:	f1b8 0f00 	cmp.w	r8, #0
 800bfb4:	d017      	beq.n	800bfe6 <get_serialized_size_nereo_interfaces__srv__SetNavigationMode_Event.part.0+0x56>
 800bfb6:	f8df a080 	ldr.w	sl, [pc, #128]	@ 800c038 <get_serialized_size_nereo_interfaces__srv__SetNavigationMode_Event.part.0+0xa8>
 800bfba:	2500      	movs	r5, #0
 800bfbc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bfbe:	f8da 3004 	ldr.w	r3, [sl, #4]
 800bfc2:	4631      	mov	r1, r6
 800bfc4:	695b      	ldr	r3, [r3, #20]
 800bfc6:	4428      	add	r0, r5
 800bfc8:	4798      	blx	r3
 800bfca:	2804      	cmp	r0, #4
 800bfcc:	4601      	mov	r1, r0
 800bfce:	4604      	mov	r4, r0
 800bfd0:	bf28      	it	cs
 800bfd2:	2104      	movcs	r1, #4
 800bfd4:	4630      	mov	r0, r6
 800bfd6:	f005 f8d3 	bl	8011180 <ucdr_alignment>
 800bfda:	3501      	adds	r5, #1
 800bfdc:	4434      	add	r4, r6
 800bfde:	45a8      	cmp	r8, r5
 800bfe0:	eb00 0604 	add.w	r6, r0, r4
 800bfe4:	d1ea      	bne.n	800bfbc <get_serialized_size_nereo_interfaces__srv__SetNavigationMode_Event.part.0+0x2c>
 800bfe6:	2104      	movs	r1, #4
 800bfe8:	4630      	mov	r0, r6
 800bfea:	f8d7 8038 	ldr.w	r8, [r7, #56]	@ 0x38
 800bfee:	f005 f8c7 	bl	8011180 <ucdr_alignment>
 800bff2:	1985      	adds	r5, r0, r6
 800bff4:	3504      	adds	r5, #4
 800bff6:	f1b8 0f00 	cmp.w	r8, #0
 800bffa:	d018      	beq.n	800c02e <get_serialized_size_nereo_interfaces__srv__SetNavigationMode_Event.part.0+0x9e>
 800bffc:	f8df a03c 	ldr.w	sl, [pc, #60]	@ 800c03c <get_serialized_size_nereo_interfaces__srv__SetNavigationMode_Event.part.0+0xac>
 800c000:	2600      	movs	r6, #0
 800c002:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800c004:	f8da 3004 	ldr.w	r3, [sl, #4]
 800c008:	4629      	mov	r1, r5
 800c00a:	695b      	ldr	r3, [r3, #20]
 800c00c:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 800c010:	4798      	blx	r3
 800c012:	2804      	cmp	r0, #4
 800c014:	4601      	mov	r1, r0
 800c016:	4604      	mov	r4, r0
 800c018:	bf28      	it	cs
 800c01a:	2104      	movcs	r1, #4
 800c01c:	4628      	mov	r0, r5
 800c01e:	f005 f8af 	bl	8011180 <ucdr_alignment>
 800c022:	3601      	adds	r6, #1
 800c024:	442c      	add	r4, r5
 800c026:	45b0      	cmp	r8, r6
 800c028:	eb00 0504 	add.w	r5, r0, r4
 800c02c:	d1e9      	bne.n	800c002 <get_serialized_size_nereo_interfaces__srv__SetNavigationMode_Event.part.0+0x72>
 800c02e:	eba5 0009 	sub.w	r0, r5, r9
 800c032:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c036:	bf00      	nop
 800c038:	20000520 	.word	0x20000520
 800c03c:	200004ec 	.word	0x200004ec

0800c040 <get_serialized_size_nereo_interfaces__srv__SetNavigationMode_Event>:
 800c040:	b108      	cbz	r0, 800c046 <get_serialized_size_nereo_interfaces__srv__SetNavigationMode_Event+0x6>
 800c042:	f7ff bfa5 	b.w	800bf90 <get_serialized_size_nereo_interfaces__srv__SetNavigationMode_Event.part.0>
 800c046:	4770      	bx	lr

0800c048 <_SetNavigationMode_Event__get_serialized_size>:
 800c048:	b110      	cbz	r0, 800c050 <_SetNavigationMode_Event__get_serialized_size+0x8>
 800c04a:	2100      	movs	r1, #0
 800c04c:	f7ff bfa0 	b.w	800bf90 <get_serialized_size_nereo_interfaces__srv__SetNavigationMode_Event.part.0>
 800c050:	4770      	bx	lr
 800c052:	bf00      	nop

0800c054 <_SetNavigationMode_Request__get_serialized_size>:
 800c054:	b130      	cbz	r0, 800c064 <_SetNavigationMode_Request__get_serialized_size+0x10>
 800c056:	b508      	push	{r3, lr}
 800c058:	2101      	movs	r1, #1
 800c05a:	2000      	movs	r0, #0
 800c05c:	f005 f890 	bl	8011180 <ucdr_alignment>
 800c060:	3001      	adds	r0, #1
 800c062:	bd08      	pop	{r3, pc}
 800c064:	4770      	bx	lr
 800c066:	bf00      	nop

0800c068 <_SetNavigationMode_Response__get_serialized_size>:
 800c068:	b160      	cbz	r0, 800c084 <_SetNavigationMode_Response__get_serialized_size+0x1c>
 800c06a:	b510      	push	{r4, lr}
 800c06c:	2101      	movs	r1, #1
 800c06e:	2000      	movs	r0, #0
 800c070:	f005 f886 	bl	8011180 <ucdr_alignment>
 800c074:	1c44      	adds	r4, r0, #1
 800c076:	2101      	movs	r1, #1
 800c078:	4620      	mov	r0, r4
 800c07a:	f005 f881 	bl	8011180 <ucdr_alignment>
 800c07e:	3001      	adds	r0, #1
 800c080:	4420      	add	r0, r4
 800c082:	bd10      	pop	{r4, pc}
 800c084:	4770      	bx	lr
 800c086:	bf00      	nop

0800c088 <_SetNavigationMode_Response__max_serialized_size>:
 800c088:	b510      	push	{r4, lr}
 800c08a:	2101      	movs	r1, #1
 800c08c:	2000      	movs	r0, #0
 800c08e:	f005 f877 	bl	8011180 <ucdr_alignment>
 800c092:	1c44      	adds	r4, r0, #1
 800c094:	2101      	movs	r1, #1
 800c096:	4620      	mov	r0, r4
 800c098:	f005 f872 	bl	8011180 <ucdr_alignment>
 800c09c:	3001      	adds	r0, #1
 800c09e:	4420      	add	r0, r4
 800c0a0:	bd10      	pop	{r4, pc}
 800c0a2:	bf00      	nop

0800c0a4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Event>:
 800c0a4:	4800      	ldr	r0, [pc, #0]	@ (800c0a8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Event+0x4>)
 800c0a6:	4770      	bx	lr
 800c0a8:	200004b8 	.word	0x200004b8

0800c0ac <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode>:
 800c0ac:	4800      	ldr	r0, [pc, #0]	@ (800c0b0 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x4>)
 800c0ae:	4770      	bx	lr
 800c0b0:	2000047c 	.word	0x2000047c

0800c0b4 <_ThrusterStatuses__max_serialized_size>:
 800c0b4:	b508      	push	{r3, lr}
 800c0b6:	2102      	movs	r1, #2
 800c0b8:	2000      	movs	r0, #0
 800c0ba:	f005 f861 	bl	8011180 <ucdr_alignment>
 800c0be:	3010      	adds	r0, #16
 800c0c0:	bd08      	pop	{r3, pc}
 800c0c2:	bf00      	nop

0800c0c4 <get_serialized_size_nereo_interfaces__msg__ThrusterStatuses>:
 800c0c4:	b508      	push	{r3, lr}
 800c0c6:	b120      	cbz	r0, 800c0d2 <get_serialized_size_nereo_interfaces__msg__ThrusterStatuses+0xe>
 800c0c8:	4608      	mov	r0, r1
 800c0ca:	2102      	movs	r1, #2
 800c0cc:	f005 f858 	bl	8011180 <ucdr_alignment>
 800c0d0:	3010      	adds	r0, #16
 800c0d2:	bd08      	pop	{r3, pc}

0800c0d4 <_ThrusterStatuses__cdr_deserialize>:
 800c0d4:	b111      	cbz	r1, 800c0dc <_ThrusterStatuses__cdr_deserialize+0x8>
 800c0d6:	2208      	movs	r2, #8
 800c0d8:	f003 b912 	b.w	800f300 <ucdr_deserialize_array_uint16_t>
 800c0dc:	4608      	mov	r0, r1
 800c0de:	4770      	bx	lr

0800c0e0 <_ThrusterStatuses__cdr_serialize>:
 800c0e0:	460b      	mov	r3, r1
 800c0e2:	4601      	mov	r1, r0
 800c0e4:	b118      	cbz	r0, 800c0ee <_ThrusterStatuses__cdr_serialize+0xe>
 800c0e6:	2208      	movs	r2, #8
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	f003 b8b3 	b.w	800f254 <ucdr_serialize_array_uint16_t>
 800c0ee:	4770      	bx	lr

0800c0f0 <_ThrusterStatuses__get_serialized_size>:
 800c0f0:	b130      	cbz	r0, 800c100 <_ThrusterStatuses__get_serialized_size+0x10>
 800c0f2:	b508      	push	{r3, lr}
 800c0f4:	2102      	movs	r1, #2
 800c0f6:	2000      	movs	r0, #0
 800c0f8:	f005 f842 	bl	8011180 <ucdr_alignment>
 800c0fc:	3010      	adds	r0, #16
 800c0fe:	bd08      	pop	{r3, pc}
 800c100:	4770      	bx	lr
 800c102:	bf00      	nop

0800c104 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses>:
 800c104:	4800      	ldr	r0, [pc, #0]	@ (800c108 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses+0x4>)
 800c106:	4770      	bx	lr
 800c108:	20000554 	.word	0x20000554

0800c10c <rcl_get_zero_initialized_publisher>:
 800c10c:	4b01      	ldr	r3, [pc, #4]	@ (800c114 <rcl_get_zero_initialized_publisher+0x8>)
 800c10e:	6818      	ldr	r0, [r3, #0]
 800c110:	4770      	bx	lr
 800c112:	bf00      	nop
 800c114:	0801fb2c 	.word	0x0801fb2c

0800c118 <rcl_publisher_init>:
 800c118:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c11c:	b088      	sub	sp, #32
 800c11e:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800c120:	2d00      	cmp	r5, #0
 800c122:	d06a      	beq.n	800c1fa <rcl_publisher_init+0xe2>
 800c124:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 800c128:	4604      	mov	r4, r0
 800c12a:	4648      	mov	r0, r9
 800c12c:	460e      	mov	r6, r1
 800c12e:	4690      	mov	r8, r2
 800c130:	461f      	mov	r7, r3
 800c132:	f001 f863 	bl	800d1fc <rcutils_allocator_is_valid>
 800c136:	2800      	cmp	r0, #0
 800c138:	d05f      	beq.n	800c1fa <rcl_publisher_init+0xe2>
 800c13a:	2c00      	cmp	r4, #0
 800c13c:	d05d      	beq.n	800c1fa <rcl_publisher_init+0xe2>
 800c13e:	f8d4 a000 	ldr.w	sl, [r4]
 800c142:	f1ba 0f00 	cmp.w	sl, #0
 800c146:	d004      	beq.n	800c152 <rcl_publisher_init+0x3a>
 800c148:	2764      	movs	r7, #100	@ 0x64
 800c14a:	4638      	mov	r0, r7
 800c14c:	b008      	add	sp, #32
 800c14e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c152:	4630      	mov	r0, r6
 800c154:	f008 ff5e 	bl	8015014 <rcl_node_is_valid>
 800c158:	2800      	cmp	r0, #0
 800c15a:	d053      	beq.n	800c204 <rcl_publisher_init+0xec>
 800c15c:	f1b8 0f00 	cmp.w	r8, #0
 800c160:	d04b      	beq.n	800c1fa <rcl_publisher_init+0xe2>
 800c162:	2f00      	cmp	r7, #0
 800c164:	d049      	beq.n	800c1fa <rcl_publisher_init+0xe2>
 800c166:	e9cd aa03 	strd	sl, sl, [sp, #12]
 800c16a:	aa07      	add	r2, sp, #28
 800c16c:	9205      	str	r2, [sp, #20]
 800c16e:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 800c172:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c176:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800c17a:	f8cd a01c 	str.w	sl, [sp, #28]
 800c17e:	4639      	mov	r1, r7
 800c180:	e899 000c 	ldmia.w	r9, {r2, r3}
 800c184:	4630      	mov	r0, r6
 800c186:	f008 ffd5 	bl	8015134 <rcl_node_resolve_name>
 800c18a:	4607      	mov	r7, r0
 800c18c:	2800      	cmp	r0, #0
 800c18e:	d150      	bne.n	800c232 <rcl_publisher_init+0x11a>
 800c190:	e9d5 3217 	ldrd	r3, r2, [r5, #92]	@ 0x5c
 800c194:	21c8      	movs	r1, #200	@ 0xc8
 800c196:	2001      	movs	r0, #1
 800c198:	4798      	blx	r3
 800c19a:	6020      	str	r0, [r4, #0]
 800c19c:	2800      	cmp	r0, #0
 800c19e:	d04e      	beq.n	800c23e <rcl_publisher_init+0x126>
 800c1a0:	4630      	mov	r0, r6
 800c1a2:	f008 ff59 	bl	8015058 <rcl_node_get_rmw_handle>
 800c1a6:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800c1aa:	9300      	str	r3, [sp, #0]
 800c1ac:	9a07      	ldr	r2, [sp, #28]
 800c1ae:	6827      	ldr	r7, [r4, #0]
 800c1b0:	462b      	mov	r3, r5
 800c1b2:	4641      	mov	r1, r8
 800c1b4:	f001 f936 	bl	800d424 <rmw_create_publisher>
 800c1b8:	6823      	ldr	r3, [r4, #0]
 800c1ba:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
 800c1be:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800c1c2:	b370      	cbz	r0, 800c222 <rcl_publisher_init+0x10a>
 800c1c4:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 800c1c8:	f001 fa08 	bl	800d5dc <rmw_publisher_get_actual_qos>
 800c1cc:	6823      	ldr	r3, [r4, #0]
 800c1ce:	4607      	mov	r7, r0
 800c1d0:	b9d0      	cbnz	r0, 800c208 <rcl_publisher_init+0xf0>
 800c1d2:	f895 2048 	ldrb.w	r2, [r5, #72]	@ 0x48
 800c1d6:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800c1da:	4629      	mov	r1, r5
 800c1dc:	2270      	movs	r2, #112	@ 0x70
 800c1de:	4618      	mov	r0, r3
 800c1e0:	f011 f9bb 	bl	801d55a <memcpy>
 800c1e4:	6832      	ldr	r2, [r6, #0]
 800c1e6:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 800c1ea:	9807      	ldr	r0, [sp, #28]
 800c1ec:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 800c1ee:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800c1f0:	4798      	blx	r3
 800c1f2:	4638      	mov	r0, r7
 800c1f4:	b008      	add	sp, #32
 800c1f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1fa:	270b      	movs	r7, #11
 800c1fc:	4638      	mov	r0, r7
 800c1fe:	b008      	add	sp, #32
 800c200:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c204:	27c8      	movs	r7, #200	@ 0xc8
 800c206:	e7a0      	b.n	800c14a <rcl_publisher_init+0x32>
 800c208:	b18b      	cbz	r3, 800c22e <rcl_publisher_init+0x116>
 800c20a:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800c20e:	b142      	cbz	r2, 800c222 <rcl_publisher_init+0x10a>
 800c210:	4630      	mov	r0, r6
 800c212:	f008 ff21 	bl	8015058 <rcl_node_get_rmw_handle>
 800c216:	6823      	ldr	r3, [r4, #0]
 800c218:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 800c21c:	f001 f9ec 	bl	800d5f8 <rmw_destroy_publisher>
 800c220:	6823      	ldr	r3, [r4, #0]
 800c222:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 800c224:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800c226:	4618      	mov	r0, r3
 800c228:	4790      	blx	r2
 800c22a:	2300      	movs	r3, #0
 800c22c:	6023      	str	r3, [r4, #0]
 800c22e:	2701      	movs	r7, #1
 800c230:	e7db      	b.n	800c1ea <rcl_publisher_init+0xd2>
 800c232:	2867      	cmp	r0, #103	@ 0x67
 800c234:	d0d9      	beq.n	800c1ea <rcl_publisher_init+0xd2>
 800c236:	2869      	cmp	r0, #105	@ 0x69
 800c238:	d003      	beq.n	800c242 <rcl_publisher_init+0x12a>
 800c23a:	280a      	cmp	r0, #10
 800c23c:	d1f7      	bne.n	800c22e <rcl_publisher_init+0x116>
 800c23e:	270a      	movs	r7, #10
 800c240:	e7d3      	b.n	800c1ea <rcl_publisher_init+0xd2>
 800c242:	2767      	movs	r7, #103	@ 0x67
 800c244:	e7d1      	b.n	800c1ea <rcl_publisher_init+0xd2>
 800c246:	bf00      	nop

0800c248 <rcl_publisher_get_default_options>:
 800c248:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c24a:	4919      	ldr	r1, [pc, #100]	@ (800c2b0 <rcl_publisher_get_default_options+0x68>)
 800c24c:	4c19      	ldr	r4, [pc, #100]	@ (800c2b4 <rcl_publisher_get_default_options+0x6c>)
 800c24e:	b08b      	sub	sp, #44	@ 0x2c
 800c250:	2250      	movs	r2, #80	@ 0x50
 800c252:	4605      	mov	r5, r0
 800c254:	4818      	ldr	r0, [pc, #96]	@ (800c2b8 <rcl_publisher_get_default_options+0x70>)
 800c256:	f011 f980 	bl	801d55a <memcpy>
 800c25a:	a802      	add	r0, sp, #8
 800c25c:	f000 ffa2 	bl	800d1a4 <rcutils_get_default_allocator>
 800c260:	f10d 0c08 	add.w	ip, sp, #8
 800c264:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c268:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c26a:	466f      	mov	r7, sp
 800c26c:	f8dc 3000 	ldr.w	r3, [ip]
 800c270:	f844 3b04 	str.w	r3, [r4], #4
 800c274:	4638      	mov	r0, r7
 800c276:	f001 f857 	bl	800d328 <rmw_get_default_publisher_options>
 800c27a:	e897 0003 	ldmia.w	r7, {r0, r1}
 800c27e:	2600      	movs	r6, #0
 800c280:	e884 0003 	stmia.w	r4, {r0, r1}
 800c284:	f10d 0027 	add.w	r0, sp, #39	@ 0x27
 800c288:	f88d 6027 	strb.w	r6, [sp, #39]	@ 0x27
 800c28c:	f008 feea 	bl	8015064 <rcl_get_disable_loaned_message>
 800c290:	b958      	cbnz	r0, 800c2aa <rcl_publisher_get_default_options+0x62>
 800c292:	f89d 6027 	ldrb.w	r6, [sp, #39]	@ 0x27
 800c296:	4908      	ldr	r1, [pc, #32]	@ (800c2b8 <rcl_publisher_get_default_options+0x70>)
 800c298:	2270      	movs	r2, #112	@ 0x70
 800c29a:	4628      	mov	r0, r5
 800c29c:	f881 606c 	strb.w	r6, [r1, #108]	@ 0x6c
 800c2a0:	f011 f95b 	bl	801d55a <memcpy>
 800c2a4:	4628      	mov	r0, r5
 800c2a6:	b00b      	add	sp, #44	@ 0x2c
 800c2a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c2aa:	f000 ffcd 	bl	800d248 <rcutils_reset_error>
 800c2ae:	e7f2      	b.n	800c296 <rcl_publisher_get_default_options+0x4e>
 800c2b0:	0801fb30 	.word	0x0801fb30
 800c2b4:	20013690 	.word	0x20013690
 800c2b8:	20013640 	.word	0x20013640

0800c2bc <rcl_publish>:
 800c2bc:	b1f8      	cbz	r0, 800c2fe <rcl_publish+0x42>
 800c2be:	6803      	ldr	r3, [r0, #0]
 800c2c0:	b570      	push	{r4, r5, r6, lr}
 800c2c2:	4604      	mov	r4, r0
 800c2c4:	b1b3      	cbz	r3, 800c2f4 <rcl_publish+0x38>
 800c2c6:	4616      	mov	r6, r2
 800c2c8:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800c2cc:	b192      	cbz	r2, 800c2f4 <rcl_publish+0x38>
 800c2ce:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800c2d2:	460d      	mov	r5, r1
 800c2d4:	f008 fab6 	bl	8014844 <rcl_context_is_valid>
 800c2d8:	b160      	cbz	r0, 800c2f4 <rcl_publish+0x38>
 800c2da:	6823      	ldr	r3, [r4, #0]
 800c2dc:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800c2e0:	b140      	cbz	r0, 800c2f4 <rcl_publish+0x38>
 800c2e2:	b155      	cbz	r5, 800c2fa <rcl_publish+0x3e>
 800c2e4:	4632      	mov	r2, r6
 800c2e6:	4629      	mov	r1, r5
 800c2e8:	f001 f83c 	bl	800d364 <rmw_publish>
 800c2ec:	3800      	subs	r0, #0
 800c2ee:	bf18      	it	ne
 800c2f0:	2001      	movne	r0, #1
 800c2f2:	bd70      	pop	{r4, r5, r6, pc}
 800c2f4:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800c2f8:	bd70      	pop	{r4, r5, r6, pc}
 800c2fa:	200b      	movs	r0, #11
 800c2fc:	bd70      	pop	{r4, r5, r6, pc}
 800c2fe:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800c302:	4770      	bx	lr

0800c304 <rcl_publisher_is_valid>:
 800c304:	b1a0      	cbz	r0, 800c330 <rcl_publisher_is_valid+0x2c>
 800c306:	6803      	ldr	r3, [r0, #0]
 800c308:	b510      	push	{r4, lr}
 800c30a:	4604      	mov	r4, r0
 800c30c:	b173      	cbz	r3, 800c32c <rcl_publisher_is_valid+0x28>
 800c30e:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800c312:	b15a      	cbz	r2, 800c32c <rcl_publisher_is_valid+0x28>
 800c314:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800c318:	f008 fa94 	bl	8014844 <rcl_context_is_valid>
 800c31c:	b130      	cbz	r0, 800c32c <rcl_publisher_is_valid+0x28>
 800c31e:	6823      	ldr	r3, [r4, #0]
 800c320:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800c324:	3800      	subs	r0, #0
 800c326:	bf18      	it	ne
 800c328:	2001      	movne	r0, #1
 800c32a:	bd10      	pop	{r4, pc}
 800c32c:	2000      	movs	r0, #0
 800c32e:	bd10      	pop	{r4, pc}
 800c330:	2000      	movs	r0, #0
 800c332:	4770      	bx	lr

0800c334 <rcl_publisher_is_valid_except_context>:
 800c334:	b130      	cbz	r0, 800c344 <rcl_publisher_is_valid_except_context+0x10>
 800c336:	6800      	ldr	r0, [r0, #0]
 800c338:	b120      	cbz	r0, 800c344 <rcl_publisher_is_valid_except_context+0x10>
 800c33a:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 800c33e:	3800      	subs	r0, #0
 800c340:	bf18      	it	ne
 800c342:	2001      	movne	r0, #1
 800c344:	4770      	bx	lr
 800c346:	bf00      	nop

0800c348 <_rclc_check_for_new_data>:
 800c348:	2800      	cmp	r0, #0
 800c34a:	d046      	beq.n	800c3da <_rclc_check_for_new_data+0x92>
 800c34c:	b510      	push	{r4, lr}
 800c34e:	7802      	ldrb	r2, [r0, #0]
 800c350:	b084      	sub	sp, #16
 800c352:	4603      	mov	r3, r0
 800c354:	2a0a      	cmp	r2, #10
 800c356:	d842      	bhi.n	800c3de <_rclc_check_for_new_data+0x96>
 800c358:	e8df f002 	tbb	[pc, r2]
 800c35c:	14181212 	.word	0x14181212
 800c360:	06060614 	.word	0x06060614
 800c364:	2e1a      	.short	0x2e1a
 800c366:	16          	.byte	0x16
 800c367:	00          	.byte	0x00
 800c368:	6a0a      	ldr	r2, [r1, #32]
 800c36a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800c36c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800c370:	3a00      	subs	r2, #0
 800c372:	bf18      	it	ne
 800c374:	2201      	movne	r2, #1
 800c376:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800c37a:	2000      	movs	r0, #0
 800c37c:	b004      	add	sp, #16
 800c37e:	bd10      	pop	{r4, pc}
 800c380:	680a      	ldr	r2, [r1, #0]
 800c382:	e7f2      	b.n	800c36a <_rclc_check_for_new_data+0x22>
 800c384:	698a      	ldr	r2, [r1, #24]
 800c386:	e7f0      	b.n	800c36a <_rclc_check_for_new_data+0x22>
 800c388:	688a      	ldr	r2, [r1, #8]
 800c38a:	e7ee      	b.n	800c36a <_rclc_check_for_new_data+0x22>
 800c38c:	690a      	ldr	r2, [r1, #16]
 800c38e:	e7ec      	b.n	800c36a <_rclc_check_for_new_data+0x22>
 800c390:	685c      	ldr	r4, [r3, #4]
 800c392:	4608      	mov	r0, r1
 800c394:	f104 0244 	add.w	r2, r4, #68	@ 0x44
 800c398:	f104 0143 	add.w	r1, r4, #67	@ 0x43
 800c39c:	f104 0342 	add.w	r3, r4, #66	@ 0x42
 800c3a0:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800c3a4:	9300      	str	r3, [sp, #0]
 800c3a6:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 800c3aa:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 800c3ae:	f104 0110 	add.w	r1, r4, #16
 800c3b2:	f00a fc21 	bl	8016bf8 <rcl_action_client_wait_set_get_entities_ready>
 800c3b6:	e7e1      	b.n	800c37c <_rclc_check_for_new_data+0x34>
 800c3b8:	685c      	ldr	r4, [r3, #4]
 800c3ba:	f104 0223 	add.w	r2, r4, #35	@ 0x23
 800c3be:	f104 0322 	add.w	r3, r4, #34	@ 0x22
 800c3c2:	e9cd 3200 	strd	r3, r2, [sp]
 800c3c6:	4608      	mov	r0, r1
 800c3c8:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 800c3cc:	f104 0220 	add.w	r2, r4, #32
 800c3d0:	f104 0110 	add.w	r1, r4, #16
 800c3d4:	f00a fe16 	bl	8017004 <rcl_action_server_wait_set_get_entities_ready>
 800c3d8:	e7d0      	b.n	800c37c <_rclc_check_for_new_data+0x34>
 800c3da:	200b      	movs	r0, #11
 800c3dc:	4770      	bx	lr
 800c3de:	2001      	movs	r0, #1
 800c3e0:	e7cc      	b.n	800c37c <_rclc_check_for_new_data+0x34>
 800c3e2:	bf00      	nop

0800c3e4 <_rclc_take_new_data>:
 800c3e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c3e6:	b099      	sub	sp, #100	@ 0x64
 800c3e8:	2800      	cmp	r0, #0
 800c3ea:	f000 8082 	beq.w	800c4f2 <_rclc_take_new_data+0x10e>
 800c3ee:	7803      	ldrb	r3, [r0, #0]
 800c3f0:	4604      	mov	r4, r0
 800c3f2:	2b0a      	cmp	r3, #10
 800c3f4:	f200 815d 	bhi.w	800c6b2 <_rclc_take_new_data+0x2ce>
 800c3f8:	e8df f003 	tbb	[pc, r3]
 800c3fc:	31531f1f 	.word	0x31531f1f
 800c400:	06060631 	.word	0x06060631
 800c404:	4555      	.short	0x4555
 800c406:	53          	.byte	0x53
 800c407:	00          	.byte	0x00
 800c408:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800c40a:	6a0b      	ldr	r3, [r1, #32]
 800c40c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c410:	2b00      	cmp	r3, #0
 800c412:	d046      	beq.n	800c4a2 <_rclc_take_new_data+0xbe>
 800c414:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800c418:	f104 0110 	add.w	r1, r4, #16
 800c41c:	f009 f806 	bl	801542c <rcl_take_request>
 800c420:	4605      	mov	r5, r0
 800c422:	2800      	cmp	r0, #0
 800c424:	d03d      	beq.n	800c4a2 <_rclc_take_new_data+0xbe>
 800c426:	f240 2359 	movw	r3, #601	@ 0x259
 800c42a:	4298      	cmp	r0, r3
 800c42c:	d128      	bne.n	800c480 <_rclc_take_new_data+0x9c>
 800c42e:	2300      	movs	r3, #0
 800c430:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 800c434:	4628      	mov	r0, r5
 800c436:	b019      	add	sp, #100	@ 0x64
 800c438:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c43a:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800c43c:	680b      	ldr	r3, [r1, #0]
 800c43e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c442:	b373      	cbz	r3, 800c4a2 <_rclc_take_new_data+0xbe>
 800c444:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800c448:	2300      	movs	r3, #0
 800c44a:	aa0a      	add	r2, sp, #40	@ 0x28
 800c44c:	f009 f9dc 	bl	8015808 <rcl_take>
 800c450:	4605      	mov	r5, r0
 800c452:	b330      	cbz	r0, 800c4a2 <_rclc_take_new_data+0xbe>
 800c454:	f240 1391 	movw	r3, #401	@ 0x191
 800c458:	4298      	cmp	r0, r3
 800c45a:	d0e8      	beq.n	800c42e <_rclc_take_new_data+0x4a>
 800c45c:	e010      	b.n	800c480 <_rclc_take_new_data+0x9c>
 800c45e:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800c460:	698b      	ldr	r3, [r1, #24]
 800c462:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c466:	b1e3      	cbz	r3, 800c4a2 <_rclc_take_new_data+0xbe>
 800c468:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800c46c:	f104 0110 	add.w	r1, r4, #16
 800c470:	f008 f952 	bl	8014718 <rcl_take_response>
 800c474:	4605      	mov	r5, r0
 800c476:	b1a0      	cbz	r0, 800c4a2 <_rclc_take_new_data+0xbe>
 800c478:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800c47c:	4298      	cmp	r0, r3
 800c47e:	d0d9      	beq.n	800c434 <_rclc_take_new_data+0x50>
 800c480:	f000 fee2 	bl	800d248 <rcutils_reset_error>
 800c484:	e7d6      	b.n	800c434 <_rclc_take_new_data+0x50>
 800c486:	6840      	ldr	r0, [r0, #4]
 800c488:	f890 3020 	ldrb.w	r3, [r0, #32]
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d15f      	bne.n	800c550 <_rclc_take_new_data+0x16c>
 800c490:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 800c494:	2b00      	cmp	r3, #0
 800c496:	d179      	bne.n	800c58c <_rclc_take_new_data+0x1a8>
 800c498:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	f040 8096 	bne.w	800c5ce <_rclc_take_new_data+0x1ea>
 800c4a2:	2500      	movs	r5, #0
 800c4a4:	e7c6      	b.n	800c434 <_rclc_take_new_data+0x50>
 800c4a6:	6840      	ldr	r0, [r0, #4]
 800c4a8:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d138      	bne.n	800c522 <_rclc_take_new_data+0x13e>
 800c4b0:	69c3      	ldr	r3, [r0, #28]
 800c4b2:	b113      	cbz	r3, 800c4ba <_rclc_take_new_data+0xd6>
 800c4b4:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800c4b8:	b9fb      	cbnz	r3, 800c4fa <_rclc_take_new_data+0x116>
 800c4ba:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	f040 80a8 	bne.w	800c614 <_rclc_take_new_data+0x230>
 800c4c4:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d0ea      	beq.n	800c4a2 <_rclc_take_new_data+0xbe>
 800c4cc:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800c4ce:	a90a      	add	r1, sp, #40	@ 0x28
 800c4d0:	3010      	adds	r0, #16
 800c4d2:	f00a fa75 	bl	80169c0 <rcl_action_take_result_response>
 800c4d6:	4605      	mov	r5, r0
 800c4d8:	2800      	cmp	r0, #0
 800c4da:	d1d1      	bne.n	800c480 <_rclc_take_new_data+0x9c>
 800c4dc:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c4e0:	6860      	ldr	r0, [r4, #4]
 800c4e2:	f00a feb5 	bl	8017250 <rclc_action_find_handle_by_result_request_sequence_number>
 800c4e6:	2800      	cmp	r0, #0
 800c4e8:	d0db      	beq.n	800c4a2 <_rclc_take_new_data+0xbe>
 800c4ea:	2301      	movs	r3, #1
 800c4ec:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 800c4f0:	e7d7      	b.n	800c4a2 <_rclc_take_new_data+0xbe>
 800c4f2:	250b      	movs	r5, #11
 800c4f4:	4628      	mov	r0, r5
 800c4f6:	b019      	add	sp, #100	@ 0x64
 800c4f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c4fa:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800c4fc:	3010      	adds	r0, #16
 800c4fe:	f00a fadb 	bl	8016ab8 <rcl_action_take_feedback>
 800c502:	4605      	mov	r5, r0
 800c504:	2800      	cmp	r0, #0
 800c506:	d1bb      	bne.n	800c480 <_rclc_take_new_data+0x9c>
 800c508:	6860      	ldr	r0, [r4, #4]
 800c50a:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800c50c:	f00a fe5e 	bl	80171cc <rclc_action_find_goal_handle_by_uuid>
 800c510:	4603      	mov	r3, r0
 800c512:	2800      	cmp	r0, #0
 800c514:	f000 80c4 	beq.w	800c6a0 <_rclc_take_new_data+0x2bc>
 800c518:	2201      	movs	r2, #1
 800c51a:	6860      	ldr	r0, [r4, #4]
 800c51c:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 800c520:	e7cb      	b.n	800c4ba <_rclc_take_new_data+0xd6>
 800c522:	aa04      	add	r2, sp, #16
 800c524:	a90a      	add	r1, sp, #40	@ 0x28
 800c526:	3010      	adds	r0, #16
 800c528:	f00a f9da 	bl	80168e0 <rcl_action_take_goal_response>
 800c52c:	4605      	mov	r5, r0
 800c52e:	2800      	cmp	r0, #0
 800c530:	d1a6      	bne.n	800c480 <_rclc_take_new_data+0x9c>
 800c532:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c536:	6860      	ldr	r0, [r4, #4]
 800c538:	f00a fe78 	bl	801722c <rclc_action_find_handle_by_goal_request_sequence_number>
 800c53c:	b130      	cbz	r0, 800c54c <_rclc_take_new_data+0x168>
 800c53e:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800c542:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800c546:	2201      	movs	r2, #1
 800c548:	f880 2020 	strb.w	r2, [r0, #32]
 800c54c:	6860      	ldr	r0, [r4, #4]
 800c54e:	e7af      	b.n	800c4b0 <_rclc_take_new_data+0xcc>
 800c550:	f00a fe16 	bl	8017180 <rclc_action_take_goal_handle>
 800c554:	4606      	mov	r6, r0
 800c556:	6860      	ldr	r0, [r4, #4]
 800c558:	2e00      	cmp	r6, #0
 800c55a:	d099      	beq.n	800c490 <_rclc_take_new_data+0xac>
 800c55c:	6070      	str	r0, [r6, #4]
 800c55e:	69f2      	ldr	r2, [r6, #28]
 800c560:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 800c564:	3010      	adds	r0, #16
 800c566:	f00a fbd7 	bl	8016d18 <rcl_action_take_goal_request>
 800c56a:	4605      	mov	r5, r0
 800c56c:	2800      	cmp	r0, #0
 800c56e:	f040 8099 	bne.w	800c6a4 <_rclc_take_new_data+0x2c0>
 800c572:	69f7      	ldr	r7, [r6, #28]
 800c574:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800c576:	7235      	strb	r5, [r6, #8]
 800c578:	f8c6 0009 	str.w	r0, [r6, #9]
 800c57c:	f8c6 100d 	str.w	r1, [r6, #13]
 800c580:	6860      	ldr	r0, [r4, #4]
 800c582:	f8c6 2011 	str.w	r2, [r6, #17]
 800c586:	f8c6 3015 	str.w	r3, [r6, #21]
 800c58a:	e781      	b.n	800c490 <_rclc_take_new_data+0xac>
 800c58c:	aa04      	add	r2, sp, #16
 800c58e:	3010      	adds	r0, #16
 800c590:	a90a      	add	r1, sp, #40	@ 0x28
 800c592:	f00a fc31 	bl	8016df8 <rcl_action_take_result_request>
 800c596:	4605      	mov	r5, r0
 800c598:	2800      	cmp	r0, #0
 800c59a:	f47f af71 	bne.w	800c480 <_rclc_take_new_data+0x9c>
 800c59e:	6860      	ldr	r0, [r4, #4]
 800c5a0:	a904      	add	r1, sp, #16
 800c5a2:	f00a fe13 	bl	80171cc <rclc_action_find_goal_handle_by_uuid>
 800c5a6:	4607      	mov	r7, r0
 800c5a8:	b160      	cbz	r0, 800c5c4 <_rclc_take_new_data+0x1e0>
 800c5aa:	ad0a      	add	r5, sp, #40	@ 0x28
 800c5ac:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 800c5b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c5b2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800c5b4:	e895 0003 	ldmia.w	r5, {r0, r1}
 800c5b8:	f04f 0c02 	mov.w	ip, #2
 800c5bc:	e886 0003 	stmia.w	r6, {r0, r1}
 800c5c0:	f887 c008 	strb.w	ip, [r7, #8]
 800c5c4:	6860      	ldr	r0, [r4, #4]
 800c5c6:	2300      	movs	r3, #0
 800c5c8:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 800c5cc:	e764      	b.n	800c498 <_rclc_take_new_data+0xb4>
 800c5ce:	ae04      	add	r6, sp, #16
 800c5d0:	aa0a      	add	r2, sp, #40	@ 0x28
 800c5d2:	3010      	adds	r0, #16
 800c5d4:	4631      	mov	r1, r6
 800c5d6:	f00a fc4d 	bl	8016e74 <rcl_action_take_cancel_request>
 800c5da:	4605      	mov	r5, r0
 800c5dc:	2800      	cmp	r0, #0
 800c5de:	f47f af4f 	bne.w	800c480 <_rclc_take_new_data+0x9c>
 800c5e2:	6860      	ldr	r0, [r4, #4]
 800c5e4:	a90a      	add	r1, sp, #40	@ 0x28
 800c5e6:	f00a fdf1 	bl	80171cc <rclc_action_find_goal_handle_by_uuid>
 800c5ea:	4605      	mov	r5, r0
 800c5ec:	2800      	cmp	r0, #0
 800c5ee:	d04c      	beq.n	800c68a <_rclc_take_new_data+0x2a6>
 800c5f0:	f990 0008 	ldrsb.w	r0, [r0, #8]
 800c5f4:	2101      	movs	r1, #1
 800c5f6:	f00a fd71 	bl	80170dc <rcl_action_transition_goal_state>
 800c5fa:	2803      	cmp	r0, #3
 800c5fc:	4607      	mov	r7, r0
 800c5fe:	d139      	bne.n	800c674 <_rclc_take_new_data+0x290>
 800c600:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800c602:	f105 0458 	add.w	r4, r5, #88	@ 0x58
 800c606:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c608:	e896 0003 	ldmia.w	r6, {r0, r1}
 800c60c:	e884 0003 	stmia.w	r4, {r0, r1}
 800c610:	722f      	strb	r7, [r5, #8]
 800c612:	e746      	b.n	800c4a2 <_rclc_take_new_data+0xbe>
 800c614:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 800c618:	a90a      	add	r1, sp, #40	@ 0x28
 800c61a:	3010      	adds	r0, #16
 800c61c:	f00a fa0e 	bl	8016a3c <rcl_action_take_cancel_response>
 800c620:	4605      	mov	r5, r0
 800c622:	2800      	cmp	r0, #0
 800c624:	f47f af2c 	bne.w	800c480 <_rclc_take_new_data+0x9c>
 800c628:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c62c:	6860      	ldr	r0, [r4, #4]
 800c62e:	f00a fe21 	bl	8017274 <rclc_action_find_handle_by_cancel_request_sequence_number>
 800c632:	4606      	mov	r6, r0
 800c634:	6860      	ldr	r0, [r4, #4]
 800c636:	2e00      	cmp	r6, #0
 800c638:	f43f af44 	beq.w	800c4c4 <_rclc_take_new_data+0xe0>
 800c63c:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800c63e:	2701      	movs	r7, #1
 800c640:	84b7      	strh	r7, [r6, #36]	@ 0x24
 800c642:	2b00      	cmp	r3, #0
 800c644:	f43f af3e 	beq.w	800c4c4 <_rclc_take_new_data+0xe0>
 800c648:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800c64a:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800c64e:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800c652:	f00a fdbb 	bl	80171cc <rclc_action_find_goal_handle_by_uuid>
 800c656:	b138      	cbz	r0, 800c668 <_rclc_take_new_data+0x284>
 800c658:	6860      	ldr	r0, [r4, #4]
 800c65a:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800c65c:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 800c660:	3501      	adds	r5, #1
 800c662:	42ab      	cmp	r3, r5
 800c664:	d8f0      	bhi.n	800c648 <_rclc_take_new_data+0x264>
 800c666:	e72d      	b.n	800c4c4 <_rclc_take_new_data+0xe0>
 800c668:	6860      	ldr	r0, [r4, #4]
 800c66a:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800c66c:	3501      	adds	r5, #1
 800c66e:	42ab      	cmp	r3, r5
 800c670:	d8ea      	bhi.n	800c648 <_rclc_take_new_data+0x264>
 800c672:	e727      	b.n	800c4c4 <_rclc_take_new_data+0xe0>
 800c674:	ab06      	add	r3, sp, #24
 800c676:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c678:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800c67c:	2103      	movs	r1, #3
 800c67e:	e896 000c 	ldmia.w	r6, {r2, r3}
 800c682:	6860      	ldr	r0, [r4, #4]
 800c684:	f00a fe6c 	bl	8017360 <rclc_action_server_goal_cancel_reject>
 800c688:	e70b      	b.n	800c4a2 <_rclc_take_new_data+0xbe>
 800c68a:	ab06      	add	r3, sp, #24
 800c68c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c68e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800c692:	2102      	movs	r1, #2
 800c694:	e896 000c 	ldmia.w	r6, {r2, r3}
 800c698:	6860      	ldr	r0, [r4, #4]
 800c69a:	f00a fe61 	bl	8017360 <rclc_action_server_goal_cancel_reject>
 800c69e:	e700      	b.n	800c4a2 <_rclc_take_new_data+0xbe>
 800c6a0:	6860      	ldr	r0, [r4, #4]
 800c6a2:	e70a      	b.n	800c4ba <_rclc_take_new_data+0xd6>
 800c6a4:	6860      	ldr	r0, [r4, #4]
 800c6a6:	4631      	mov	r1, r6
 800c6a8:	f00a fd7a 	bl	80171a0 <rclc_action_remove_used_goal_handle>
 800c6ac:	f000 fdcc 	bl	800d248 <rcutils_reset_error>
 800c6b0:	e6c0      	b.n	800c434 <_rclc_take_new_data+0x50>
 800c6b2:	2501      	movs	r5, #1
 800c6b4:	e6be      	b.n	800c434 <_rclc_take_new_data+0x50>
 800c6b6:	bf00      	nop

0800c6b8 <rclc_executor_trigger_any>:
 800c6b8:	4603      	mov	r3, r0
 800c6ba:	b370      	cbz	r0, 800c71a <rclc_executor_trigger_any+0x62>
 800c6bc:	b379      	cbz	r1, 800c71e <rclc_executor_trigger_any+0x66>
 800c6be:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 800c6c2:	2200      	movs	r2, #0
 800c6c4:	b350      	cbz	r0, 800c71c <rclc_executor_trigger_any+0x64>
 800c6c6:	b430      	push	{r4, r5}
 800c6c8:	f893 c000 	ldrb.w	ip, [r3]
 800c6cc:	f1bc 0f08 	cmp.w	ip, #8
 800c6d0:	d017      	beq.n	800c702 <rclc_executor_trigger_any+0x4a>
 800c6d2:	f1bc 0f09 	cmp.w	ip, #9
 800c6d6:	d00d      	beq.n	800c6f4 <rclc_executor_trigger_any+0x3c>
 800c6d8:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 800c6dc:	b940      	cbnz	r0, 800c6f0 <rclc_executor_trigger_any+0x38>
 800c6de:	3201      	adds	r2, #1
 800c6e0:	4291      	cmp	r1, r2
 800c6e2:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800c6e6:	d003      	beq.n	800c6f0 <rclc_executor_trigger_any+0x38>
 800c6e8:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 800c6ec:	2800      	cmp	r0, #0
 800c6ee:	d1eb      	bne.n	800c6c8 <rclc_executor_trigger_any+0x10>
 800c6f0:	bc30      	pop	{r4, r5}
 800c6f2:	4770      	bx	lr
 800c6f4:	685c      	ldr	r4, [r3, #4]
 800c6f6:	6a25      	ldr	r5, [r4, #32]
 800c6f8:	2d00      	cmp	r5, #0
 800c6fa:	d1f9      	bne.n	800c6f0 <rclc_executor_trigger_any+0x38>
 800c6fc:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 800c700:	e7ec      	b.n	800c6dc <rclc_executor_trigger_any+0x24>
 800c702:	685c      	ldr	r4, [r3, #4]
 800c704:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 800c706:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 800c70a:	d1f1      	bne.n	800c6f0 <rclc_executor_trigger_any+0x38>
 800c70c:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 800c710:	2800      	cmp	r0, #0
 800c712:	d1ed      	bne.n	800c6f0 <rclc_executor_trigger_any+0x38>
 800c714:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 800c718:	e7e0      	b.n	800c6dc <rclc_executor_trigger_any+0x24>
 800c71a:	4770      	bx	lr
 800c71c:	4770      	bx	lr
 800c71e:	4608      	mov	r0, r1
 800c720:	4770      	bx	lr
 800c722:	bf00      	nop

0800c724 <_rclc_execute>:
 800c724:	2800      	cmp	r0, #0
 800c726:	f000 80da 	beq.w	800c8de <_rclc_execute+0x1ba>
 800c72a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c72c:	7843      	ldrb	r3, [r0, #1]
 800c72e:	b087      	sub	sp, #28
 800c730:	4604      	mov	r4, r0
 800c732:	b123      	cbz	r3, 800c73e <_rclc_execute+0x1a>
 800c734:	2b01      	cmp	r3, #1
 800c736:	d01c      	beq.n	800c772 <_rclc_execute+0x4e>
 800c738:	2000      	movs	r0, #0
 800c73a:	b007      	add	sp, #28
 800c73c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c73e:	7803      	ldrb	r3, [r0, #0]
 800c740:	2b08      	cmp	r3, #8
 800c742:	f000 809e 	beq.w	800c882 <_rclc_execute+0x15e>
 800c746:	2b09      	cmp	r3, #9
 800c748:	d024      	beq.n	800c794 <_rclc_execute+0x70>
 800c74a:	f890 0039 	ldrb.w	r0, [r0, #57]	@ 0x39
 800c74e:	2800      	cmp	r0, #0
 800c750:	d0f2      	beq.n	800c738 <_rclc_execute+0x14>
 800c752:	2b0a      	cmp	r3, #10
 800c754:	f200 8158 	bhi.w	800ca08 <_rclc_execute+0x2e4>
 800c758:	e8df f013 	tbh	[pc, r3, lsl #1]
 800c75c:	008c0071 	.word	0x008c0071
 800c760:	0071007e 	.word	0x0071007e
 800c764:	00590075 	.word	0x00590075
 800c768:	00590059 	.word	0x00590059
 800c76c:	01560156 	.word	0x01560156
 800c770:	007b      	.short	0x007b
 800c772:	7803      	ldrb	r3, [r0, #0]
 800c774:	2b0a      	cmp	r3, #10
 800c776:	f200 8147 	bhi.w	800ca08 <_rclc_execute+0x2e4>
 800c77a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800c77e:	00f7      	.short	0x00f7
 800c780:	006d0079 	.word	0x006d0079
 800c784:	00640060 	.word	0x00640060
 800c788:	00480048 	.word	0x00480048
 800c78c:	00fe0048 	.word	0x00fe0048
 800c790:	006a0100 	.word	0x006a0100
 800c794:	6840      	ldr	r0, [r0, #4]
 800c796:	6a02      	ldr	r2, [r0, #32]
 800c798:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800c79c:	2a00      	cmp	r2, #0
 800c79e:	f040 80f1 	bne.w	800c984 <_rclc_execute+0x260>
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d0c8      	beq.n	800c738 <_rclc_execute+0x14>
 800c7a6:	e003      	b.n	800c7b0 <_rclc_execute+0x8c>
 800c7a8:	6858      	ldr	r0, [r3, #4]
 800c7aa:	f00a fcf9 	bl	80171a0 <rclc_action_remove_used_goal_handle>
 800c7ae:	6860      	ldr	r0, [r4, #4]
 800c7b0:	f00a fd30 	bl	8017214 <rclc_action_find_first_terminated_handle>
 800c7b4:	4603      	mov	r3, r0
 800c7b6:	4601      	mov	r1, r0
 800c7b8:	2800      	cmp	r0, #0
 800c7ba:	d1f5      	bne.n	800c7a8 <_rclc_execute+0x84>
 800c7bc:	6860      	ldr	r0, [r4, #4]
 800c7be:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
 800c7c2:	f890 3020 	ldrb.w	r3, [r0, #32]
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	f000 80e9 	beq.w	800c99e <_rclc_execute+0x27a>
 800c7cc:	f640 0634 	movw	r6, #2100	@ 0x834
 800c7d0:	2701      	movs	r7, #1
 800c7d2:	e007      	b.n	800c7e4 <_rclc_execute+0xc0>
 800c7d4:	4628      	mov	r0, r5
 800c7d6:	f00a fd77 	bl	80172c8 <rclc_action_server_response_goal_request>
 800c7da:	6860      	ldr	r0, [r4, #4]
 800c7dc:	4629      	mov	r1, r5
 800c7de:	f00a fcdf 	bl	80171a0 <rclc_action_remove_used_goal_handle>
 800c7e2:	6860      	ldr	r0, [r4, #4]
 800c7e4:	2100      	movs	r1, #0
 800c7e6:	f00a fd09 	bl	80171fc <rclc_action_find_first_handle_by_status>
 800c7ea:	4605      	mov	r5, r0
 800c7ec:	2800      	cmp	r0, #0
 800c7ee:	f000 80d3 	beq.w	800c998 <_rclc_execute+0x274>
 800c7f2:	6863      	ldr	r3, [r4, #4]
 800c7f4:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800c7f6:	699b      	ldr	r3, [r3, #24]
 800c7f8:	4798      	blx	r3
 800c7fa:	42b0      	cmp	r0, r6
 800c7fc:	f04f 0100 	mov.w	r1, #0
 800c800:	d1e8      	bne.n	800c7d4 <_rclc_execute+0xb0>
 800c802:	2101      	movs	r1, #1
 800c804:	4628      	mov	r0, r5
 800c806:	f00a fd5f 	bl	80172c8 <rclc_action_server_response_goal_request>
 800c80a:	722f      	strb	r7, [r5, #8]
 800c80c:	e7e9      	b.n	800c7e2 <_rclc_execute+0xbe>
 800c80e:	2b06      	cmp	r3, #6
 800c810:	68a0      	ldr	r0, [r4, #8]
 800c812:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800c814:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 800c816:	f000 80b9 	beq.w	800c98c <_rclc_execute+0x268>
 800c81a:	2b07      	cmp	r3, #7
 800c81c:	f000 80ef 	beq.w	800c9fe <_rclc_execute+0x2da>
 800c820:	47b0      	blx	r6
 800c822:	f104 0510 	add.w	r5, r4, #16
 800c826:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800c828:	6860      	ldr	r0, [r4, #4]
 800c82a:	4629      	mov	r1, r5
 800c82c:	f008 fe4e 	bl	80154cc <rcl_send_response>
 800c830:	2800      	cmp	r0, #0
 800c832:	d082      	beq.n	800c73a <_rclc_execute+0x16>
 800c834:	9005      	str	r0, [sp, #20]
 800c836:	f000 fd07 	bl	800d248 <rcutils_reset_error>
 800c83a:	9805      	ldr	r0, [sp, #20]
 800c83c:	e77d      	b.n	800c73a <_rclc_execute+0x16>
 800c83e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800c840:	68a0      	ldr	r0, [r4, #8]
 800c842:	4798      	blx	r3
 800c844:	e778      	b.n	800c738 <_rclc_execute+0x14>
 800c846:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800c848:	68a0      	ldr	r0, [r4, #8]
 800c84a:	f104 0110 	add.w	r1, r4, #16
 800c84e:	4798      	blx	r3
 800c850:	e772      	b.n	800c738 <_rclc_execute+0x14>
 800c852:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800c854:	4798      	blx	r3
 800c856:	e76f      	b.n	800c738 <_rclc_execute+0x14>
 800c858:	6860      	ldr	r0, [r4, #4]
 800c85a:	f009 f8f9 	bl	8015a50 <rcl_timer_call>
 800c85e:	f240 3321 	movw	r3, #801	@ 0x321
 800c862:	4298      	cmp	r0, r3
 800c864:	f43f af68 	beq.w	800c738 <_rclc_execute+0x14>
 800c868:	2800      	cmp	r0, #0
 800c86a:	f43f af66 	beq.w	800c73a <_rclc_execute+0x16>
 800c86e:	e7e1      	b.n	800c834 <_rclc_execute+0x110>
 800c870:	f890 0039 	ldrb.w	r0, [r0, #57]	@ 0x39
 800c874:	e9d4 130b 	ldrd	r1, r3, [r4, #44]	@ 0x2c
 800c878:	2800      	cmp	r0, #0
 800c87a:	d0e8      	beq.n	800c84e <_rclc_execute+0x12a>
 800c87c:	68a0      	ldr	r0, [r4, #8]
 800c87e:	4798      	blx	r3
 800c880:	e75a      	b.n	800c738 <_rclc_execute+0x14>
 800c882:	6840      	ldr	r0, [r0, #4]
 800c884:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800c886:	f033 437f 	bics.w	r3, r3, #4278190080	@ 0xff000000
 800c88a:	d107      	bne.n	800c89c <_rclc_execute+0x178>
 800c88c:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800c890:	b923      	cbnz	r3, 800c89c <_rclc_execute+0x178>
 800c892:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800c896:	2b00      	cmp	r3, #0
 800c898:	f43f af4e 	beq.w	800c738 <_rclc_execute+0x14>
 800c89c:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800c8a0:	b303      	cbz	r3, 800c8e4 <_rclc_execute+0x1c0>
 800c8a2:	2600      	movs	r6, #0
 800c8a4:	2701      	movs	r7, #1
 800c8a6:	e004      	b.n	800c8b2 <_rclc_execute+0x18e>
 800c8a8:	f00a fc44 	bl	8017134 <rclc_action_send_result_request>
 800c8ac:	b990      	cbnz	r0, 800c8d4 <_rclc_execute+0x1b0>
 800c8ae:	722f      	strb	r7, [r5, #8]
 800c8b0:	6860      	ldr	r0, [r4, #4]
 800c8b2:	f00a fcf1 	bl	8017298 <rclc_action_find_first_handle_with_goal_response>
 800c8b6:	4605      	mov	r5, r0
 800c8b8:	b198      	cbz	r0, 800c8e2 <_rclc_execute+0x1be>
 800c8ba:	6863      	ldr	r3, [r4, #4]
 800c8bc:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800c8be:	699b      	ldr	r3, [r3, #24]
 800c8c0:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 800c8c4:	f885 6020 	strb.w	r6, [r5, #32]
 800c8c8:	4798      	blx	r3
 800c8ca:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 800c8ce:	4628      	mov	r0, r5
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d1e9      	bne.n	800c8a8 <_rclc_execute+0x184>
 800c8d4:	6860      	ldr	r0, [r4, #4]
 800c8d6:	4629      	mov	r1, r5
 800c8d8:	f00a fc62 	bl	80171a0 <rclc_action_remove_used_goal_handle>
 800c8dc:	e7e8      	b.n	800c8b0 <_rclc_execute+0x18c>
 800c8de:	200b      	movs	r0, #11
 800c8e0:	4770      	bx	lr
 800c8e2:	6860      	ldr	r0, [r4, #4]
 800c8e4:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800c8e8:	b18b      	cbz	r3, 800c90e <_rclc_execute+0x1ea>
 800c8ea:	68c5      	ldr	r5, [r0, #12]
 800c8ec:	b32d      	cbz	r5, 800c93a <_rclc_execute+0x216>
 800c8ee:	2600      	movs	r6, #0
 800c8f0:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 800c8f4:	b143      	cbz	r3, 800c908 <_rclc_execute+0x1e4>
 800c8f6:	69c3      	ldr	r3, [r0, #28]
 800c8f8:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 800c8fc:	b123      	cbz	r3, 800c908 <_rclc_execute+0x1e4>
 800c8fe:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800c900:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800c902:	4628      	mov	r0, r5
 800c904:	4798      	blx	r3
 800c906:	6860      	ldr	r0, [r4, #4]
 800c908:	682d      	ldr	r5, [r5, #0]
 800c90a:	2d00      	cmp	r5, #0
 800c90c:	d1f0      	bne.n	800c8f0 <_rclc_execute+0x1cc>
 800c90e:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800c912:	b193      	cbz	r3, 800c93a <_rclc_execute+0x216>
 800c914:	68c5      	ldr	r5, [r0, #12]
 800c916:	b185      	cbz	r5, 800c93a <_rclc_execute+0x216>
 800c918:	2600      	movs	r6, #0
 800c91a:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 800c91e:	b14b      	cbz	r3, 800c934 <_rclc_execute+0x210>
 800c920:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800c922:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 800c926:	b12b      	cbz	r3, 800c934 <_rclc_execute+0x210>
 800c928:	4628      	mov	r0, r5
 800c92a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800c92c:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 800c930:	4798      	blx	r3
 800c932:	6860      	ldr	r0, [r4, #4]
 800c934:	682d      	ldr	r5, [r5, #0]
 800c936:	2d00      	cmp	r5, #0
 800c938:	d1ef      	bne.n	800c91a <_rclc_execute+0x1f6>
 800c93a:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800c93e:	2b00      	cmp	r3, #0
 800c940:	f43f aefa 	beq.w	800c738 <_rclc_execute+0x14>
 800c944:	2700      	movs	r7, #0
 800c946:	e00b      	b.n	800c960 <_rclc_execute+0x23c>
 800c948:	6863      	ldr	r3, [r4, #4]
 800c94a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800c94c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800c94e:	6a1e      	ldr	r6, [r3, #32]
 800c950:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 800c954:	47b0      	blx	r6
 800c956:	6860      	ldr	r0, [r4, #4]
 800c958:	4629      	mov	r1, r5
 800c95a:	f00a fc21 	bl	80171a0 <rclc_action_remove_used_goal_handle>
 800c95e:	6860      	ldr	r0, [r4, #4]
 800c960:	f00a fca6 	bl	80172b0 <rclc_action_find_first_handle_with_result_response>
 800c964:	4605      	mov	r5, r0
 800c966:	2800      	cmp	r0, #0
 800c968:	d1ee      	bne.n	800c948 <_rclc_execute+0x224>
 800c96a:	e6e5      	b.n	800c738 <_rclc_execute+0x14>
 800c96c:	f890 0039 	ldrb.w	r0, [r0, #57]	@ 0x39
 800c970:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800c972:	2800      	cmp	r0, #0
 800c974:	f43f af65 	beq.w	800c842 <_rclc_execute+0x11e>
 800c978:	e762      	b.n	800c840 <_rclc_execute+0x11c>
 800c97a:	6840      	ldr	r0, [r0, #4]
 800c97c:	e78e      	b.n	800c89c <_rclc_execute+0x178>
 800c97e:	6840      	ldr	r0, [r0, #4]
 800c980:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800c984:	2b00      	cmp	r3, #0
 800c986:	f43f af1c 	beq.w	800c7c2 <_rclc_execute+0x9e>
 800c98a:	e711      	b.n	800c7b0 <_rclc_execute+0x8c>
 800c98c:	f104 0510 	add.w	r5, r4, #16
 800c990:	460a      	mov	r2, r1
 800c992:	4629      	mov	r1, r5
 800c994:	47b0      	blx	r6
 800c996:	e746      	b.n	800c826 <_rclc_execute+0x102>
 800c998:	6860      	ldr	r0, [r4, #4]
 800c99a:	f880 5020 	strb.w	r5, [r0, #32]
 800c99e:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	f43f aec8 	beq.w	800c738 <_rclc_execute+0x14>
 800c9a8:	68c5      	ldr	r5, [r0, #12]
 800c9aa:	b325      	cbz	r5, 800c9f6 <_rclc_execute+0x2d2>
 800c9ac:	2602      	movs	r6, #2
 800c9ae:	e001      	b.n	800c9b4 <_rclc_execute+0x290>
 800c9b0:	682d      	ldr	r5, [r5, #0]
 800c9b2:	b305      	cbz	r5, 800c9f6 <_rclc_execute+0x2d2>
 800c9b4:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800c9b8:	2b03      	cmp	r3, #3
 800c9ba:	d1f9      	bne.n	800c9b0 <_rclc_execute+0x28c>
 800c9bc:	69c3      	ldr	r3, [r0, #28]
 800c9be:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800c9c0:	4628      	mov	r0, r5
 800c9c2:	4798      	blx	r3
 800c9c4:	4603      	mov	r3, r0
 800c9c6:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 800c9ca:	4628      	mov	r0, r5
 800c9cc:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 800c9d0:	b11b      	cbz	r3, 800c9da <_rclc_execute+0x2b6>
 800c9d2:	f00a fc99 	bl	8017308 <rclc_action_server_goal_cancel_accept>
 800c9d6:	6860      	ldr	r0, [r4, #4]
 800c9d8:	e7ea      	b.n	800c9b0 <_rclc_execute+0x28c>
 800c9da:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800c9dc:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800c9e0:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 800c9e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c9e8:	6860      	ldr	r0, [r4, #4]
 800c9ea:	2101      	movs	r1, #1
 800c9ec:	f00a fcb8 	bl	8017360 <rclc_action_server_goal_cancel_reject>
 800c9f0:	722e      	strb	r6, [r5, #8]
 800c9f2:	6860      	ldr	r0, [r4, #4]
 800c9f4:	e7dc      	b.n	800c9b0 <_rclc_execute+0x28c>
 800c9f6:	2300      	movs	r3, #0
 800c9f8:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800c9fc:	e69c      	b.n	800c738 <_rclc_execute+0x14>
 800c9fe:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800ca00:	47b0      	blx	r6
 800ca02:	f104 0510 	add.w	r5, r4, #16
 800ca06:	e70e      	b.n	800c826 <_rclc_execute+0x102>
 800ca08:	2001      	movs	r0, #1
 800ca0a:	e696      	b.n	800c73a <_rclc_execute+0x16>

0800ca0c <rclc_executor_get_zero_initialized_executor>:
 800ca0c:	b510      	push	{r4, lr}
 800ca0e:	4903      	ldr	r1, [pc, #12]	@ (800ca1c <rclc_executor_get_zero_initialized_executor+0x10>)
 800ca10:	4604      	mov	r4, r0
 800ca12:	2290      	movs	r2, #144	@ 0x90
 800ca14:	f010 fda1 	bl	801d55a <memcpy>
 800ca18:	4620      	mov	r0, r4
 800ca1a:	bd10      	pop	{r4, pc}
 800ca1c:	0801fb80 	.word	0x0801fb80

0800ca20 <rclc_executor_init>:
 800ca20:	2800      	cmp	r0, #0
 800ca22:	d05a      	beq.n	800cada <rclc_executor_init+0xba>
 800ca24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca28:	460d      	mov	r5, r1
 800ca2a:	b0b2      	sub	sp, #200	@ 0xc8
 800ca2c:	2900      	cmp	r1, #0
 800ca2e:	d050      	beq.n	800cad2 <rclc_executor_init+0xb2>
 800ca30:	4604      	mov	r4, r0
 800ca32:	4618      	mov	r0, r3
 800ca34:	4616      	mov	r6, r2
 800ca36:	461f      	mov	r7, r3
 800ca38:	f000 fbe0 	bl	800d1fc <rcutils_allocator_is_valid>
 800ca3c:	2800      	cmp	r0, #0
 800ca3e:	d048      	beq.n	800cad2 <rclc_executor_init+0xb2>
 800ca40:	2e00      	cmp	r6, #0
 800ca42:	d046      	beq.n	800cad2 <rclc_executor_init+0xb2>
 800ca44:	492a      	ldr	r1, [pc, #168]	@ (800caf0 <rclc_executor_init+0xd0>)
 800ca46:	2290      	movs	r2, #144	@ 0x90
 800ca48:	a80e      	add	r0, sp, #56	@ 0x38
 800ca4a:	f010 fd86 	bl	801d55a <memcpy>
 800ca4e:	a90e      	add	r1, sp, #56	@ 0x38
 800ca50:	2290      	movs	r2, #144	@ 0x90
 800ca52:	4620      	mov	r0, r4
 800ca54:	f010 fd81 	bl	801d55a <memcpy>
 800ca58:	6065      	str	r5, [r4, #4]
 800ca5a:	4668      	mov	r0, sp
 800ca5c:	60e6      	str	r6, [r4, #12]
 800ca5e:	466d      	mov	r5, sp
 800ca60:	f009 f8e8 	bl	8015c34 <rcl_get_zero_initialized_wait_set>
 800ca64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ca66:	f104 0c18 	add.w	ip, r4, #24
 800ca6a:	f8d7 8000 	ldr.w	r8, [r7]
 800ca6e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ca72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ca74:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ca78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ca7a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ca7e:	ed9f 7b1a 	vldr	d7, [pc, #104]	@ 800cae8 <rclc_executor_init+0xc8>
 800ca82:	682b      	ldr	r3, [r5, #0]
 800ca84:	f8cc 3000 	str.w	r3, [ip]
 800ca88:	6939      	ldr	r1, [r7, #16]
 800ca8a:	6167      	str	r7, [r4, #20]
 800ca8c:	ed84 7b1c 	vstr	d7, [r4, #112]	@ 0x70
 800ca90:	01b0      	lsls	r0, r6, #6
 800ca92:	47c0      	blx	r8
 800ca94:	60a0      	str	r0, [r4, #8]
 800ca96:	b310      	cbz	r0, 800cade <rclc_executor_init+0xbe>
 800ca98:	2500      	movs	r5, #0
 800ca9a:	e000      	b.n	800ca9e <rclc_executor_init+0x7e>
 800ca9c:	68a0      	ldr	r0, [r4, #8]
 800ca9e:	eb00 1085 	add.w	r0, r0, r5, lsl #6
 800caa2:	4631      	mov	r1, r6
 800caa4:	3501      	adds	r5, #1
 800caa6:	f000 fa35 	bl	800cf14 <rclc_executor_handle_init>
 800caaa:	42ae      	cmp	r6, r5
 800caac:	d1f6      	bne.n	800ca9c <rclc_executor_init+0x7c>
 800caae:	f104 004c 	add.w	r0, r4, #76	@ 0x4c
 800cab2:	f000 fa25 	bl	800cf00 <rclc_executor_handle_counters_zero_init>
 800cab6:	490f      	ldr	r1, [pc, #60]	@ (800caf4 <rclc_executor_init+0xd4>)
 800cab8:	68a2      	ldr	r2, [r4, #8]
 800caba:	2300      	movs	r3, #0
 800cabc:	e9c4 1320 	strd	r1, r3, [r4, #128]	@ 0x80
 800cac0:	b12a      	cbz	r2, 800cace <rclc_executor_init+0xae>
 800cac2:	6962      	ldr	r2, [r4, #20]
 800cac4:	b11a      	cbz	r2, 800cace <rclc_executor_init+0xae>
 800cac6:	68e2      	ldr	r2, [r4, #12]
 800cac8:	b10a      	cbz	r2, 800cace <rclc_executor_init+0xae>
 800caca:	f884 3088 	strb.w	r3, [r4, #136]	@ 0x88
 800cace:	2000      	movs	r0, #0
 800cad0:	e000      	b.n	800cad4 <rclc_executor_init+0xb4>
 800cad2:	200b      	movs	r0, #11
 800cad4:	b032      	add	sp, #200	@ 0xc8
 800cad6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cada:	200b      	movs	r0, #11
 800cadc:	4770      	bx	lr
 800cade:	200a      	movs	r0, #10
 800cae0:	e7f8      	b.n	800cad4 <rclc_executor_init+0xb4>
 800cae2:	bf00      	nop
 800cae4:	f3af 8000 	nop.w
 800cae8:	3b9aca00 	.word	0x3b9aca00
 800caec:	00000000 	.word	0x00000000
 800caf0:	0801fb80 	.word	0x0801fb80
 800caf4:	0800c6b9 	.word	0x0800c6b9

0800caf8 <rclc_executor_add_subscription>:
 800caf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cafa:	f89d e018 	ldrb.w	lr, [sp, #24]
 800cafe:	b338      	cbz	r0, 800cb50 <rclc_executor_add_subscription+0x58>
 800cb00:	b331      	cbz	r1, 800cb50 <rclc_executor_add_subscription+0x58>
 800cb02:	b32a      	cbz	r2, 800cb50 <rclc_executor_add_subscription+0x58>
 800cb04:	b323      	cbz	r3, 800cb50 <rclc_executor_add_subscription+0x58>
 800cb06:	4604      	mov	r4, r0
 800cb08:	e9d0 5003 	ldrd	r5, r0, [r0, #12]
 800cb0c:	42a8      	cmp	r0, r5
 800cb0e:	d301      	bcc.n	800cb14 <rclc_executor_add_subscription+0x1c>
 800cb10:	2001      	movs	r0, #1
 800cb12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cb14:	68a6      	ldr	r6, [r4, #8]
 800cb16:	0187      	lsls	r7, r0, #6
 800cb18:	eb06 1c80 	add.w	ip, r6, r0, lsl #6
 800cb1c:	2500      	movs	r5, #0
 800cb1e:	55f5      	strb	r5, [r6, r7]
 800cb20:	3001      	adds	r0, #1
 800cb22:	f8cc 3030 	str.w	r3, [ip, #48]	@ 0x30
 800cb26:	f8cc 502c 	str.w	r5, [ip, #44]	@ 0x2c
 800cb2a:	2301      	movs	r3, #1
 800cb2c:	f104 0518 	add.w	r5, r4, #24
 800cb30:	e9cc 1201 	strd	r1, r2, [ip, #4]
 800cb34:	f88c e001 	strb.w	lr, [ip, #1]
 800cb38:	f8ac 3038 	strh.w	r3, [ip, #56]	@ 0x38
 800cb3c:	6120      	str	r0, [r4, #16]
 800cb3e:	4628      	mov	r0, r5
 800cb40:	f009 f88c 	bl	8015c5c <rcl_wait_set_is_valid>
 800cb44:	b930      	cbnz	r0, 800cb54 <rclc_executor_add_subscription+0x5c>
 800cb46:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800cb48:	3301      	adds	r3, #1
 800cb4a:	2000      	movs	r0, #0
 800cb4c:	64e3      	str	r3, [r4, #76]	@ 0x4c
 800cb4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cb50:	200b      	movs	r0, #11
 800cb52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cb54:	4628      	mov	r0, r5
 800cb56:	f009 f887 	bl	8015c68 <rcl_wait_set_fini>
 800cb5a:	2800      	cmp	r0, #0
 800cb5c:	d0f3      	beq.n	800cb46 <rclc_executor_add_subscription+0x4e>
 800cb5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800cb60 <rclc_executor_add_service>:
 800cb60:	b370      	cbz	r0, 800cbc0 <rclc_executor_add_service+0x60>
 800cb62:	b369      	cbz	r1, 800cbc0 <rclc_executor_add_service+0x60>
 800cb64:	b362      	cbz	r2, 800cbc0 <rclc_executor_add_service+0x60>
 800cb66:	b35b      	cbz	r3, 800cbc0 <rclc_executor_add_service+0x60>
 800cb68:	b538      	push	{r3, r4, r5, lr}
 800cb6a:	4604      	mov	r4, r0
 800cb6c:	9804      	ldr	r0, [sp, #16]
 800cb6e:	b378      	cbz	r0, 800cbd0 <rclc_executor_add_service+0x70>
 800cb70:	e9d4 5003 	ldrd	r5, r0, [r4, #12]
 800cb74:	42a8      	cmp	r0, r5
 800cb76:	d301      	bcc.n	800cb7c <rclc_executor_add_service+0x1c>
 800cb78:	2001      	movs	r0, #1
 800cb7a:	bd38      	pop	{r3, r4, r5, pc}
 800cb7c:	68a5      	ldr	r5, [r4, #8]
 800cb7e:	eb05 1c80 	add.w	ip, r5, r0, lsl #6
 800cb82:	ea4f 1e80 	mov.w	lr, r0, lsl #6
 800cb86:	f8cc 3028 	str.w	r3, [ip, #40]	@ 0x28
 800cb8a:	9b04      	ldr	r3, [sp, #16]
 800cb8c:	f8cc 3030 	str.w	r3, [ip, #48]	@ 0x30
 800cb90:	2305      	movs	r3, #5
 800cb92:	e9cc 1201 	strd	r1, r2, [ip, #4]
 800cb96:	3001      	adds	r0, #1
 800cb98:	f825 300e 	strh.w	r3, [r5, lr]
 800cb9c:	2201      	movs	r2, #1
 800cb9e:	2300      	movs	r3, #0
 800cba0:	f104 0518 	add.w	r5, r4, #24
 800cba4:	f88c 2038 	strb.w	r2, [ip, #56]	@ 0x38
 800cba8:	f8cc 302c 	str.w	r3, [ip, #44]	@ 0x2c
 800cbac:	6120      	str	r0, [r4, #16]
 800cbae:	4628      	mov	r0, r5
 800cbb0:	f009 f854 	bl	8015c5c <rcl_wait_set_is_valid>
 800cbb4:	b930      	cbnz	r0, 800cbc4 <rclc_executor_add_service+0x64>
 800cbb6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800cbb8:	3301      	adds	r3, #1
 800cbba:	2000      	movs	r0, #0
 800cbbc:	65a3      	str	r3, [r4, #88]	@ 0x58
 800cbbe:	bd38      	pop	{r3, r4, r5, pc}
 800cbc0:	200b      	movs	r0, #11
 800cbc2:	4770      	bx	lr
 800cbc4:	4628      	mov	r0, r5
 800cbc6:	f009 f84f 	bl	8015c68 <rcl_wait_set_fini>
 800cbca:	2800      	cmp	r0, #0
 800cbcc:	d0f3      	beq.n	800cbb6 <rclc_executor_add_service+0x56>
 800cbce:	e7d4      	b.n	800cb7a <rclc_executor_add_service+0x1a>
 800cbd0:	200b      	movs	r0, #11
 800cbd2:	bd38      	pop	{r3, r4, r5, pc}

0800cbd4 <rclc_executor_prepare>:
 800cbd4:	2800      	cmp	r0, #0
 800cbd6:	d044      	beq.n	800cc62 <rclc_executor_prepare+0x8e>
 800cbd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cbda:	f100 0518 	add.w	r5, r0, #24
 800cbde:	b09b      	sub	sp, #108	@ 0x6c
 800cbe0:	4604      	mov	r4, r0
 800cbe2:	4628      	mov	r0, r5
 800cbe4:	f009 f83a 	bl	8015c5c <rcl_wait_set_is_valid>
 800cbe8:	b110      	cbz	r0, 800cbf0 <rclc_executor_prepare+0x1c>
 800cbea:	2000      	movs	r0, #0
 800cbec:	b01b      	add	sp, #108	@ 0x6c
 800cbee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cbf0:	4628      	mov	r0, r5
 800cbf2:	f009 f839 	bl	8015c68 <rcl_wait_set_fini>
 800cbf6:	2800      	cmp	r0, #0
 800cbf8:	d130      	bne.n	800cc5c <rclc_executor_prepare+0x88>
 800cbfa:	a80c      	add	r0, sp, #48	@ 0x30
 800cbfc:	f009 f81a 	bl	8015c34 <rcl_get_zero_initialized_wait_set>
 800cc00:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800cc04:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800cc08:	46ae      	mov	lr, r5
 800cc0a:	6967      	ldr	r7, [r4, #20]
 800cc0c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800cc10:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800cc14:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800cc18:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800cc1c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800cc20:	f8dc 3000 	ldr.w	r3, [ip]
 800cc24:	f8ce 3000 	str.w	r3, [lr]
 800cc28:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800cc2a:	ae04      	add	r6, sp, #16
 800cc2c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800cc2e:	683b      	ldr	r3, [r7, #0]
 800cc30:	6862      	ldr	r2, [r4, #4]
 800cc32:	6033      	str	r3, [r6, #0]
 800cc34:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 800cc36:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 800cc38:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800cc3c:	e9d4 3214 	ldrd	r3, r2, [r4, #80]	@ 0x50
 800cc40:	e9cd 2100 	strd	r2, r1, [sp]
 800cc44:	4628      	mov	r0, r5
 800cc46:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800cc48:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 800cc4a:	f009 fb29 	bl	80162a0 <rcl_wait_set_init>
 800cc4e:	2800      	cmp	r0, #0
 800cc50:	d0cc      	beq.n	800cbec <rclc_executor_prepare+0x18>
 800cc52:	900b      	str	r0, [sp, #44]	@ 0x2c
 800cc54:	f000 faf8 	bl	800d248 <rcutils_reset_error>
 800cc58:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800cc5a:	e7c7      	b.n	800cbec <rclc_executor_prepare+0x18>
 800cc5c:	f000 faf4 	bl	800d248 <rcutils_reset_error>
 800cc60:	e7cb      	b.n	800cbfa <rclc_executor_prepare+0x26>
 800cc62:	200b      	movs	r0, #11
 800cc64:	4770      	bx	lr
 800cc66:	bf00      	nop

0800cc68 <rclc_executor_spin_some>:
 800cc68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc6c:	b083      	sub	sp, #12
 800cc6e:	2800      	cmp	r0, #0
 800cc70:	f000 8091 	beq.w	800cd96 <rclc_executor_spin_some+0x12e>
 800cc74:	4604      	mov	r4, r0
 800cc76:	6840      	ldr	r0, [r0, #4]
 800cc78:	4690      	mov	r8, r2
 800cc7a:	4699      	mov	r9, r3
 800cc7c:	f007 fde2 	bl	8014844 <rcl_context_is_valid>
 800cc80:	2800      	cmp	r0, #0
 800cc82:	d037      	beq.n	800ccf4 <rclc_executor_spin_some+0x8c>
 800cc84:	4620      	mov	r0, r4
 800cc86:	f104 0718 	add.w	r7, r4, #24
 800cc8a:	f7ff ffa3 	bl	800cbd4 <rclc_executor_prepare>
 800cc8e:	4638      	mov	r0, r7
 800cc90:	f009 f8ba 	bl	8015e08 <rcl_wait_set_clear>
 800cc94:	4606      	mov	r6, r0
 800cc96:	2800      	cmp	r0, #0
 800cc98:	d177      	bne.n	800cd8a <rclc_executor_spin_some+0x122>
 800cc9a:	68e3      	ldr	r3, [r4, #12]
 800cc9c:	4605      	mov	r5, r0
 800cc9e:	b1eb      	cbz	r3, 800ccdc <rclc_executor_spin_some+0x74>
 800cca0:	68a1      	ldr	r1, [r4, #8]
 800cca2:	eb01 1c85 	add.w	ip, r1, r5, lsl #6
 800cca6:	01aa      	lsls	r2, r5, #6
 800cca8:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 800ccac:	b1b3      	cbz	r3, 800ccdc <rclc_executor_spin_some+0x74>
 800ccae:	5c8b      	ldrb	r3, [r1, r2]
 800ccb0:	2b0a      	cmp	r3, #10
 800ccb2:	d81f      	bhi.n	800ccf4 <rclc_executor_spin_some+0x8c>
 800ccb4:	e8df f003 	tbb	[pc, r3]
 800ccb8:	253e3434 	.word	0x253e3434
 800ccbc:	06060625 	.word	0x06060625
 800ccc0:	525d      	.short	0x525d
 800ccc2:	48          	.byte	0x48
 800ccc3:	00          	.byte	0x00
 800ccc4:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800ccc8:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800cccc:	4638      	mov	r0, r7
 800ccce:	f009 fbfb 	bl	80164c8 <rcl_wait_set_add_service>
 800ccd2:	b9f8      	cbnz	r0, 800cd14 <rclc_executor_spin_some+0xac>
 800ccd4:	68e3      	ldr	r3, [r4, #12]
 800ccd6:	3501      	adds	r5, #1
 800ccd8:	42ab      	cmp	r3, r5
 800ccda:	d8e1      	bhi.n	800cca0 <rclc_executor_spin_some+0x38>
 800ccdc:	4642      	mov	r2, r8
 800ccde:	464b      	mov	r3, r9
 800cce0:	4638      	mov	r0, r7
 800cce2:	f009 fc1d 	bl	8016520 <rcl_wait>
 800cce6:	f894 5088 	ldrb.w	r5, [r4, #136]	@ 0x88
 800ccea:	2d00      	cmp	r5, #0
 800ccec:	f000 80ab 	beq.w	800ce46 <rclc_executor_spin_some+0x1de>
 800ccf0:	2d01      	cmp	r5, #1
 800ccf2:	d055      	beq.n	800cda0 <rclc_executor_spin_some+0x138>
 800ccf4:	f000 faa8 	bl	800d248 <rcutils_reset_error>
 800ccf8:	2601      	movs	r6, #1
 800ccfa:	4630      	mov	r0, r6
 800ccfc:	b003      	add	sp, #12
 800ccfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd02:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800cd06:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800cd0a:	4638      	mov	r0, r7
 800cd0c:	f009 fbb0 	bl	8016470 <rcl_wait_set_add_client>
 800cd10:	2800      	cmp	r0, #0
 800cd12:	d0df      	beq.n	800ccd4 <rclc_executor_spin_some+0x6c>
 800cd14:	9001      	str	r0, [sp, #4]
 800cd16:	f000 fa97 	bl	800d248 <rcutils_reset_error>
 800cd1a:	9801      	ldr	r0, [sp, #4]
 800cd1c:	4606      	mov	r6, r0
 800cd1e:	e7ec      	b.n	800ccfa <rclc_executor_spin_some+0x92>
 800cd20:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800cd24:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800cd28:	4638      	mov	r0, r7
 800cd2a:	f009 f841 	bl	8015db0 <rcl_wait_set_add_subscription>
 800cd2e:	2800      	cmp	r0, #0
 800cd30:	d0d0      	beq.n	800ccd4 <rclc_executor_spin_some+0x6c>
 800cd32:	e7ef      	b.n	800cd14 <rclc_executor_spin_some+0xac>
 800cd34:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800cd38:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800cd3c:	4638      	mov	r0, r7
 800cd3e:	f009 fb67 	bl	8016410 <rcl_wait_set_add_timer>
 800cd42:	2800      	cmp	r0, #0
 800cd44:	d0c6      	beq.n	800ccd4 <rclc_executor_spin_some+0x6c>
 800cd46:	e7e5      	b.n	800cd14 <rclc_executor_spin_some+0xac>
 800cd48:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800cd4c:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800cd50:	4638      	mov	r0, r7
 800cd52:	f009 fb31 	bl	80163b8 <rcl_wait_set_add_guard_condition>
 800cd56:	2800      	cmp	r0, #0
 800cd58:	d0bc      	beq.n	800ccd4 <rclc_executor_spin_some+0x6c>
 800cd5a:	e7db      	b.n	800cd14 <rclc_executor_spin_some+0xac>
 800cd5c:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800cd60:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800cd64:	3110      	adds	r1, #16
 800cd66:	4638      	mov	r0, r7
 800cd68:	f00a f8f8 	bl	8016f5c <rcl_action_wait_set_add_action_server>
 800cd6c:	2800      	cmp	r0, #0
 800cd6e:	d0b1      	beq.n	800ccd4 <rclc_executor_spin_some+0x6c>
 800cd70:	e7d0      	b.n	800cd14 <rclc_executor_spin_some+0xac>
 800cd72:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800cd76:	2300      	movs	r3, #0
 800cd78:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800cd7c:	3110      	adds	r1, #16
 800cd7e:	4638      	mov	r0, r7
 800cd80:	f009 feda 	bl	8016b38 <rcl_action_wait_set_add_action_client>
 800cd84:	2800      	cmp	r0, #0
 800cd86:	d0a5      	beq.n	800ccd4 <rclc_executor_spin_some+0x6c>
 800cd88:	e7c4      	b.n	800cd14 <rclc_executor_spin_some+0xac>
 800cd8a:	f000 fa5d 	bl	800d248 <rcutils_reset_error>
 800cd8e:	4630      	mov	r0, r6
 800cd90:	b003      	add	sp, #12
 800cd92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd96:	260b      	movs	r6, #11
 800cd98:	4630      	mov	r0, r6
 800cd9a:	b003      	add	sp, #12
 800cd9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cda0:	e9d4 c202 	ldrd	ip, r2, [r4, #8]
 800cda4:	4663      	mov	r3, ip
 800cda6:	4615      	mov	r5, r2
 800cda8:	b1ca      	cbz	r2, 800cdde <rclc_executor_spin_some+0x176>
 800cdaa:	2500      	movs	r5, #0
 800cdac:	46a8      	mov	r8, r5
 800cdae:	f240 1991 	movw	r9, #401	@ 0x191
 800cdb2:	e00c      	b.n	800cdce <rclc_executor_spin_some+0x166>
 800cdb4:	f7ff fac8 	bl	800c348 <_rclc_check_for_new_data>
 800cdb8:	f108 0801 	add.w	r8, r8, #1
 800cdbc:	4605      	mov	r5, r0
 800cdbe:	b108      	cbz	r0, 800cdc4 <rclc_executor_spin_some+0x15c>
 800cdc0:	4548      	cmp	r0, r9
 800cdc2:	d13e      	bne.n	800ce42 <rclc_executor_spin_some+0x1da>
 800cdc4:	68e2      	ldr	r2, [r4, #12]
 800cdc6:	4590      	cmp	r8, r2
 800cdc8:	f080 808b 	bcs.w	800cee2 <rclc_executor_spin_some+0x27a>
 800cdcc:	68a3      	ldr	r3, [r4, #8]
 800cdce:	eb03 1088 	add.w	r0, r3, r8, lsl #6
 800cdd2:	469c      	mov	ip, r3
 800cdd4:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800cdd8:	4639      	mov	r1, r7
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d1ea      	bne.n	800cdb4 <rclc_executor_spin_some+0x14c>
 800cdde:	4611      	mov	r1, r2
 800cde0:	4660      	mov	r0, ip
 800cde2:	e9d4 3220 	ldrd	r3, r2, [r4, #128]	@ 0x80
 800cde6:	4798      	blx	r3
 800cde8:	b358      	cbz	r0, 800ce42 <rclc_executor_spin_some+0x1da>
 800cdea:	68e3      	ldr	r3, [r4, #12]
 800cdec:	b34b      	cbz	r3, 800ce42 <rclc_executor_spin_some+0x1da>
 800cdee:	f04f 0800 	mov.w	r8, #0
 800cdf2:	f240 1991 	movw	r9, #401	@ 0x191
 800cdf6:	e00a      	b.n	800ce0e <rclc_executor_spin_some+0x1a6>
 800cdf8:	f7ff faf4 	bl	800c3e4 <_rclc_take_new_data>
 800cdfc:	f108 0801 	add.w	r8, r8, #1
 800ce00:	4605      	mov	r5, r0
 800ce02:	b108      	cbz	r0, 800ce08 <rclc_executor_spin_some+0x1a0>
 800ce04:	4548      	cmp	r0, r9
 800ce06:	d11c      	bne.n	800ce42 <rclc_executor_spin_some+0x1da>
 800ce08:	68e3      	ldr	r3, [r4, #12]
 800ce0a:	4598      	cmp	r8, r3
 800ce0c:	d26f      	bcs.n	800ceee <rclc_executor_spin_some+0x286>
 800ce0e:	68a3      	ldr	r3, [r4, #8]
 800ce10:	eb03 1088 	add.w	r0, r3, r8, lsl #6
 800ce14:	4639      	mov	r1, r7
 800ce16:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 800ce1a:	2a00      	cmp	r2, #0
 800ce1c:	d1ec      	bne.n	800cdf8 <rclc_executor_spin_some+0x190>
 800ce1e:	2700      	movs	r7, #0
 800ce20:	e009      	b.n	800ce36 <rclc_executor_spin_some+0x1ce>
 800ce22:	f7ff fc7f 	bl	800c724 <_rclc_execute>
 800ce26:	3701      	adds	r7, #1
 800ce28:	4605      	mov	r5, r0
 800ce2a:	b950      	cbnz	r0, 800ce42 <rclc_executor_spin_some+0x1da>
 800ce2c:	68e3      	ldr	r3, [r4, #12]
 800ce2e:	429f      	cmp	r7, r3
 800ce30:	f4bf af63 	bcs.w	800ccfa <rclc_executor_spin_some+0x92>
 800ce34:	68a3      	ldr	r3, [r4, #8]
 800ce36:	eb03 1087 	add.w	r0, r3, r7, lsl #6
 800ce3a:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d1ef      	bne.n	800ce22 <rclc_executor_spin_some+0x1ba>
 800ce42:	462e      	mov	r6, r5
 800ce44:	e759      	b.n	800ccfa <rclc_executor_spin_some+0x92>
 800ce46:	e9d4 c202 	ldrd	ip, r2, [r4, #8]
 800ce4a:	4663      	mov	r3, ip
 800ce4c:	2a00      	cmp	r2, #0
 800ce4e:	d054      	beq.n	800cefa <rclc_executor_spin_some+0x292>
 800ce50:	46a8      	mov	r8, r5
 800ce52:	f240 1991 	movw	r9, #401	@ 0x191
 800ce56:	e00b      	b.n	800ce70 <rclc_executor_spin_some+0x208>
 800ce58:	f7ff fa76 	bl	800c348 <_rclc_check_for_new_data>
 800ce5c:	f108 0801 	add.w	r8, r8, #1
 800ce60:	4605      	mov	r5, r0
 800ce62:	b108      	cbz	r0, 800ce68 <rclc_executor_spin_some+0x200>
 800ce64:	4548      	cmp	r0, r9
 800ce66:	d1ec      	bne.n	800ce42 <rclc_executor_spin_some+0x1da>
 800ce68:	68e2      	ldr	r2, [r4, #12]
 800ce6a:	4590      	cmp	r8, r2
 800ce6c:	d23c      	bcs.n	800cee8 <rclc_executor_spin_some+0x280>
 800ce6e:	68a3      	ldr	r3, [r4, #8]
 800ce70:	eb03 1088 	add.w	r0, r3, r8, lsl #6
 800ce74:	469c      	mov	ip, r3
 800ce76:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800ce7a:	4639      	mov	r1, r7
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d1eb      	bne.n	800ce58 <rclc_executor_spin_some+0x1f0>
 800ce80:	4611      	mov	r1, r2
 800ce82:	4660      	mov	r0, ip
 800ce84:	e9d4 3220 	ldrd	r3, r2, [r4, #128]	@ 0x80
 800ce88:	4798      	blx	r3
 800ce8a:	2800      	cmp	r0, #0
 800ce8c:	d0d9      	beq.n	800ce42 <rclc_executor_spin_some+0x1da>
 800ce8e:	68e3      	ldr	r3, [r4, #12]
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d0d6      	beq.n	800ce42 <rclc_executor_spin_some+0x1da>
 800ce94:	f04f 0a00 	mov.w	sl, #0
 800ce98:	f240 1891 	movw	r8, #401	@ 0x191
 800ce9c:	f240 2959 	movw	r9, #601	@ 0x259
 800cea0:	e013      	b.n	800ceca <rclc_executor_spin_some+0x262>
 800cea2:	f7ff fa9f 	bl	800c3e4 <_rclc_take_new_data>
 800cea6:	b118      	cbz	r0, 800ceb0 <rclc_executor_spin_some+0x248>
 800cea8:	4540      	cmp	r0, r8
 800ceaa:	d001      	beq.n	800ceb0 <rclc_executor_spin_some+0x248>
 800ceac:	4548      	cmp	r0, r9
 800ceae:	d122      	bne.n	800cef6 <rclc_executor_spin_some+0x28e>
 800ceb0:	68a0      	ldr	r0, [r4, #8]
 800ceb2:	4458      	add	r0, fp
 800ceb4:	f7ff fc36 	bl	800c724 <_rclc_execute>
 800ceb8:	f10a 0a01 	add.w	sl, sl, #1
 800cebc:	4605      	mov	r5, r0
 800cebe:	2800      	cmp	r0, #0
 800cec0:	d1bf      	bne.n	800ce42 <rclc_executor_spin_some+0x1da>
 800cec2:	68e3      	ldr	r3, [r4, #12]
 800cec4:	459a      	cmp	sl, r3
 800cec6:	f4bf af18 	bcs.w	800ccfa <rclc_executor_spin_some+0x92>
 800ceca:	68a0      	ldr	r0, [r4, #8]
 800cecc:	eb00 108a 	add.w	r0, r0, sl, lsl #6
 800ced0:	4639      	mov	r1, r7
 800ced2:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800ced6:	ea4f 1b8a 	mov.w	fp, sl, lsl #6
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d1e1      	bne.n	800cea2 <rclc_executor_spin_some+0x23a>
 800cede:	462e      	mov	r6, r5
 800cee0:	e70b      	b.n	800ccfa <rclc_executor_spin_some+0x92>
 800cee2:	f8d4 c008 	ldr.w	ip, [r4, #8]
 800cee6:	e77a      	b.n	800cdde <rclc_executor_spin_some+0x176>
 800cee8:	f8d4 c008 	ldr.w	ip, [r4, #8]
 800ceec:	e7c8      	b.n	800ce80 <rclc_executor_spin_some+0x218>
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d0a7      	beq.n	800ce42 <rclc_executor_spin_some+0x1da>
 800cef2:	68a3      	ldr	r3, [r4, #8]
 800cef4:	e793      	b.n	800ce1e <rclc_executor_spin_some+0x1b6>
 800cef6:	4606      	mov	r6, r0
 800cef8:	e6ff      	b.n	800ccfa <rclc_executor_spin_some+0x92>
 800cefa:	4615      	mov	r5, r2
 800cefc:	e7c0      	b.n	800ce80 <rclc_executor_spin_some+0x218>
 800cefe:	bf00      	nop

0800cf00 <rclc_executor_handle_counters_zero_init>:
 800cf00:	b130      	cbz	r0, 800cf10 <rclc_executor_handle_counters_zero_init+0x10>
 800cf02:	b508      	push	{r3, lr}
 800cf04:	2220      	movs	r2, #32
 800cf06:	2100      	movs	r1, #0
 800cf08:	f010 fa92 	bl	801d430 <memset>
 800cf0c:	2000      	movs	r0, #0
 800cf0e:	bd08      	pop	{r3, pc}
 800cf10:	200b      	movs	r0, #11
 800cf12:	4770      	bx	lr

0800cf14 <rclc_executor_handle_init>:
 800cf14:	b158      	cbz	r0, 800cf2e <rclc_executor_handle_init+0x1a>
 800cf16:	2300      	movs	r3, #0
 800cf18:	220b      	movs	r2, #11
 800cf1a:	e9c0 3301 	strd	r3, r3, [r0, #4]
 800cf1e:	e9c0 330a 	strd	r3, r3, [r0, #40]	@ 0x28
 800cf22:	e9c0 310c 	strd	r3, r1, [r0, #48]	@ 0x30
 800cf26:	8002      	strh	r2, [r0, #0]
 800cf28:	8703      	strh	r3, [r0, #56]	@ 0x38
 800cf2a:	4618      	mov	r0, r3
 800cf2c:	4770      	bx	lr
 800cf2e:	200b      	movs	r0, #11
 800cf30:	4770      	bx	lr
 800cf32:	bf00      	nop

0800cf34 <rclc_support_init>:
 800cf34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf38:	b086      	sub	sp, #24
 800cf3a:	b3b8      	cbz	r0, 800cfac <rclc_support_init+0x78>
 800cf3c:	461c      	mov	r4, r3
 800cf3e:	b3ab      	cbz	r3, 800cfac <rclc_support_init+0x78>
 800cf40:	460f      	mov	r7, r1
 800cf42:	4690      	mov	r8, r2
 800cf44:	4606      	mov	r6, r0
 800cf46:	f007 fdff 	bl	8014b48 <rcl_get_zero_initialized_init_options>
 800cf4a:	f104 030c 	add.w	r3, r4, #12
 800cf4e:	9005      	str	r0, [sp, #20]
 800cf50:	e893 0003 	ldmia.w	r3, {r0, r1}
 800cf54:	e88d 0003 	stmia.w	sp, {r0, r1}
 800cf58:	a805      	add	r0, sp, #20
 800cf5a:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800cf5e:	f007 fdf5 	bl	8014b4c <rcl_init_options_init>
 800cf62:	4605      	mov	r5, r0
 800cf64:	b9e0      	cbnz	r0, 800cfa0 <rclc_support_init+0x6c>
 800cf66:	ad02      	add	r5, sp, #8
 800cf68:	4628      	mov	r0, r5
 800cf6a:	f007 fc61 	bl	8014830 <rcl_get_zero_initialized_context>
 800cf6e:	e895 0003 	ldmia.w	r5, {r0, r1}
 800cf72:	4633      	mov	r3, r6
 800cf74:	e886 0003 	stmia.w	r6, {r0, r1}
 800cf78:	aa05      	add	r2, sp, #20
 800cf7a:	4641      	mov	r1, r8
 800cf7c:	4638      	mov	r0, r7
 800cf7e:	f007 fcc7 	bl	8014910 <rcl_init>
 800cf82:	4605      	mov	r5, r0
 800cf84:	b9b8      	cbnz	r0, 800cfb6 <rclc_support_init+0x82>
 800cf86:	60b4      	str	r4, [r6, #8]
 800cf88:	4622      	mov	r2, r4
 800cf8a:	f106 010c 	add.w	r1, r6, #12
 800cf8e:	2003      	movs	r0, #3
 800cf90:	f008 fcc6 	bl	8015920 <rcl_clock_init>
 800cf94:	4605      	mov	r5, r0
 800cf96:	b970      	cbnz	r0, 800cfb6 <rclc_support_init+0x82>
 800cf98:	a805      	add	r0, sp, #20
 800cf9a:	f007 fe33 	bl	8014c04 <rcl_init_options_fini>
 800cf9e:	b108      	cbz	r0, 800cfa4 <rclc_support_init+0x70>
 800cfa0:	f000 f952 	bl	800d248 <rcutils_reset_error>
 800cfa4:	4628      	mov	r0, r5
 800cfa6:	b006      	add	sp, #24
 800cfa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cfac:	250b      	movs	r5, #11
 800cfae:	4628      	mov	r0, r5
 800cfb0:	b006      	add	sp, #24
 800cfb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cfb6:	f000 f947 	bl	800d248 <rcutils_reset_error>
 800cfba:	a805      	add	r0, sp, #20
 800cfbc:	f007 fe22 	bl	8014c04 <rcl_init_options_fini>
 800cfc0:	2800      	cmp	r0, #0
 800cfc2:	d0ef      	beq.n	800cfa4 <rclc_support_init+0x70>
 800cfc4:	e7ec      	b.n	800cfa0 <rclc_support_init+0x6c>
 800cfc6:	bf00      	nop

0800cfc8 <rclc_node_init_default>:
 800cfc8:	b3b8      	cbz	r0, 800d03a <rclc_node_init_default+0x72>
 800cfca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cfce:	460d      	mov	r5, r1
 800cfd0:	b0a1      	sub	sp, #132	@ 0x84
 800cfd2:	b329      	cbz	r1, 800d020 <rclc_node_init_default+0x58>
 800cfd4:	4616      	mov	r6, r2
 800cfd6:	b31a      	cbz	r2, 800d020 <rclc_node_init_default+0x58>
 800cfd8:	461f      	mov	r7, r3
 800cfda:	b30b      	cbz	r3, 800d020 <rclc_node_init_default+0x58>
 800cfdc:	f10d 0810 	add.w	r8, sp, #16
 800cfe0:	4604      	mov	r4, r0
 800cfe2:	4640      	mov	r0, r8
 800cfe4:	f007 feb6 	bl	8014d54 <rcl_get_zero_initialized_node>
 800cfe8:	e898 0003 	ldmia.w	r8, {r0, r1}
 800cfec:	f10d 0918 	add.w	r9, sp, #24
 800cff0:	e884 0003 	stmia.w	r4, {r0, r1}
 800cff4:	4648      	mov	r0, r9
 800cff6:	f008 f855 	bl	80150a4 <rcl_node_get_default_options>
 800cffa:	4640      	mov	r0, r8
 800cffc:	f007 feaa 	bl	8014d54 <rcl_get_zero_initialized_node>
 800d000:	f8cd 9000 	str.w	r9, [sp]
 800d004:	e898 0003 	ldmia.w	r8, {r0, r1}
 800d008:	463b      	mov	r3, r7
 800d00a:	e884 0003 	stmia.w	r4, {r0, r1}
 800d00e:	4632      	mov	r2, r6
 800d010:	4629      	mov	r1, r5
 800d012:	4620      	mov	r0, r4
 800d014:	f007 fea8 	bl	8014d68 <rcl_node_init>
 800d018:	b930      	cbnz	r0, 800d028 <rclc_node_init_default+0x60>
 800d01a:	b021      	add	sp, #132	@ 0x84
 800d01c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d020:	200b      	movs	r0, #11
 800d022:	b021      	add	sp, #132	@ 0x84
 800d024:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d028:	9003      	str	r0, [sp, #12]
 800d02a:	f000 f90d 	bl	800d248 <rcutils_reset_error>
 800d02e:	f000 f90b 	bl	800d248 <rcutils_reset_error>
 800d032:	9803      	ldr	r0, [sp, #12]
 800d034:	b021      	add	sp, #132	@ 0x84
 800d036:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d03a:	200b      	movs	r0, #11
 800d03c:	4770      	bx	lr
 800d03e:	bf00      	nop

0800d040 <rclc_publisher_init_best_effort>:
 800d040:	b368      	cbz	r0, 800d09e <rclc_publisher_init_best_effort+0x5e>
 800d042:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d046:	460d      	mov	r5, r1
 800d048:	b0a0      	sub	sp, #128	@ 0x80
 800d04a:	b321      	cbz	r1, 800d096 <rclc_publisher_init_best_effort+0x56>
 800d04c:	4616      	mov	r6, r2
 800d04e:	b312      	cbz	r2, 800d096 <rclc_publisher_init_best_effort+0x56>
 800d050:	461f      	mov	r7, r3
 800d052:	b303      	cbz	r3, 800d096 <rclc_publisher_init_best_effort+0x56>
 800d054:	4604      	mov	r4, r0
 800d056:	f7ff f859 	bl	800c10c <rcl_get_zero_initialized_publisher>
 800d05a:	f10d 0810 	add.w	r8, sp, #16
 800d05e:	6020      	str	r0, [r4, #0]
 800d060:	4640      	mov	r0, r8
 800d062:	f7ff f8f1 	bl	800c248 <rcl_publisher_get_default_options>
 800d066:	490f      	ldr	r1, [pc, #60]	@ (800d0a4 <rclc_publisher_init_best_effort+0x64>)
 800d068:	2250      	movs	r2, #80	@ 0x50
 800d06a:	4640      	mov	r0, r8
 800d06c:	f010 fa75 	bl	801d55a <memcpy>
 800d070:	f8cd 8000 	str.w	r8, [sp]
 800d074:	463b      	mov	r3, r7
 800d076:	4632      	mov	r2, r6
 800d078:	4629      	mov	r1, r5
 800d07a:	4620      	mov	r0, r4
 800d07c:	f7ff f84c 	bl	800c118 <rcl_publisher_init>
 800d080:	b910      	cbnz	r0, 800d088 <rclc_publisher_init_best_effort+0x48>
 800d082:	b020      	add	sp, #128	@ 0x80
 800d084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d088:	9003      	str	r0, [sp, #12]
 800d08a:	f000 f8dd 	bl	800d248 <rcutils_reset_error>
 800d08e:	9803      	ldr	r0, [sp, #12]
 800d090:	b020      	add	sp, #128	@ 0x80
 800d092:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d096:	200b      	movs	r0, #11
 800d098:	b020      	add	sp, #128	@ 0x80
 800d09a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d09e:	200b      	movs	r0, #11
 800d0a0:	4770      	bx	lr
 800d0a2:	bf00      	nop
 800d0a4:	0801fc10 	.word	0x0801fc10

0800d0a8 <rclc_service_init_default>:
 800d0a8:	b368      	cbz	r0, 800d106 <rclc_service_init_default+0x5e>
 800d0aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0ae:	460d      	mov	r5, r1
 800d0b0:	b09e      	sub	sp, #120	@ 0x78
 800d0b2:	b321      	cbz	r1, 800d0fe <rclc_service_init_default+0x56>
 800d0b4:	4616      	mov	r6, r2
 800d0b6:	b312      	cbz	r2, 800d0fe <rclc_service_init_default+0x56>
 800d0b8:	461f      	mov	r7, r3
 800d0ba:	b303      	cbz	r3, 800d0fe <rclc_service_init_default+0x56>
 800d0bc:	4604      	mov	r4, r0
 800d0be:	f008 f8e1 	bl	8015284 <rcl_get_zero_initialized_service>
 800d0c2:	f10d 0810 	add.w	r8, sp, #16
 800d0c6:	6020      	str	r0, [r4, #0]
 800d0c8:	4640      	mov	r0, r8
 800d0ca:	f008 f985 	bl	80153d8 <rcl_service_get_default_options>
 800d0ce:	490f      	ldr	r1, [pc, #60]	@ (800d10c <rclc_service_init_default+0x64>)
 800d0d0:	2250      	movs	r2, #80	@ 0x50
 800d0d2:	4640      	mov	r0, r8
 800d0d4:	f010 fa41 	bl	801d55a <memcpy>
 800d0d8:	f8cd 8000 	str.w	r8, [sp]
 800d0dc:	463b      	mov	r3, r7
 800d0de:	4632      	mov	r2, r6
 800d0e0:	4629      	mov	r1, r5
 800d0e2:	4620      	mov	r0, r4
 800d0e4:	f008 f8d4 	bl	8015290 <rcl_service_init>
 800d0e8:	b910      	cbnz	r0, 800d0f0 <rclc_service_init_default+0x48>
 800d0ea:	b01e      	add	sp, #120	@ 0x78
 800d0ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0f0:	9003      	str	r0, [sp, #12]
 800d0f2:	f000 f8a9 	bl	800d248 <rcutils_reset_error>
 800d0f6:	9803      	ldr	r0, [sp, #12]
 800d0f8:	b01e      	add	sp, #120	@ 0x78
 800d0fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0fe:	200b      	movs	r0, #11
 800d100:	b01e      	add	sp, #120	@ 0x78
 800d102:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d106:	200b      	movs	r0, #11
 800d108:	4770      	bx	lr
 800d10a:	bf00      	nop
 800d10c:	0801fc60 	.word	0x0801fc60

0800d110 <rclc_subscription_init_default>:
 800d110:	b368      	cbz	r0, 800d16e <rclc_subscription_init_default+0x5e>
 800d112:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d116:	460d      	mov	r5, r1
 800d118:	b0a2      	sub	sp, #136	@ 0x88
 800d11a:	b321      	cbz	r1, 800d166 <rclc_subscription_init_default+0x56>
 800d11c:	4616      	mov	r6, r2
 800d11e:	b312      	cbz	r2, 800d166 <rclc_subscription_init_default+0x56>
 800d120:	461f      	mov	r7, r3
 800d122:	b303      	cbz	r3, 800d166 <rclc_subscription_init_default+0x56>
 800d124:	4604      	mov	r4, r0
 800d126:	f008 fa93 	bl	8015650 <rcl_get_zero_initialized_subscription>
 800d12a:	f10d 0810 	add.w	r8, sp, #16
 800d12e:	6020      	str	r0, [r4, #0]
 800d130:	4640      	mov	r0, r8
 800d132:	f008 fb3b 	bl	80157ac <rcl_subscription_get_default_options>
 800d136:	490f      	ldr	r1, [pc, #60]	@ (800d174 <rclc_subscription_init_default+0x64>)
 800d138:	2250      	movs	r2, #80	@ 0x50
 800d13a:	4640      	mov	r0, r8
 800d13c:	f010 fa0d 	bl	801d55a <memcpy>
 800d140:	f8cd 8000 	str.w	r8, [sp]
 800d144:	463b      	mov	r3, r7
 800d146:	4632      	mov	r2, r6
 800d148:	4629      	mov	r1, r5
 800d14a:	4620      	mov	r0, r4
 800d14c:	f008 fa86 	bl	801565c <rcl_subscription_init>
 800d150:	b910      	cbnz	r0, 800d158 <rclc_subscription_init_default+0x48>
 800d152:	b022      	add	sp, #136	@ 0x88
 800d154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d158:	9003      	str	r0, [sp, #12]
 800d15a:	f000 f875 	bl	800d248 <rcutils_reset_error>
 800d15e:	9803      	ldr	r0, [sp, #12]
 800d160:	b022      	add	sp, #136	@ 0x88
 800d162:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d166:	200b      	movs	r0, #11
 800d168:	b022      	add	sp, #136	@ 0x88
 800d16a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d16e:	200b      	movs	r0, #11
 800d170:	4770      	bx	lr
 800d172:	bf00      	nop
 800d174:	0801fcb0 	.word	0x0801fcb0

0800d178 <__default_zero_allocate>:
 800d178:	f00f bce4 	b.w	801cb44 <calloc>

0800d17c <__default_reallocate>:
 800d17c:	f00f beb8 	b.w	801cef0 <realloc>

0800d180 <__default_deallocate>:
 800d180:	f00f bd5e 	b.w	801cc40 <free>

0800d184 <__default_allocate>:
 800d184:	f00f bd54 	b.w	801cc30 <malloc>

0800d188 <rcutils_get_zero_initialized_allocator>:
 800d188:	b510      	push	{r4, lr}
 800d18a:	4c05      	ldr	r4, [pc, #20]	@ (800d1a0 <rcutils_get_zero_initialized_allocator+0x18>)
 800d18c:	4686      	mov	lr, r0
 800d18e:	4684      	mov	ip, r0
 800d190:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d192:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d196:	6823      	ldr	r3, [r4, #0]
 800d198:	f8cc 3000 	str.w	r3, [ip]
 800d19c:	4670      	mov	r0, lr
 800d19e:	bd10      	pop	{r4, pc}
 800d1a0:	0801fd00 	.word	0x0801fd00

0800d1a4 <rcutils_get_default_allocator>:
 800d1a4:	b510      	push	{r4, lr}
 800d1a6:	4c05      	ldr	r4, [pc, #20]	@ (800d1bc <rcutils_get_default_allocator+0x18>)
 800d1a8:	4686      	mov	lr, r0
 800d1aa:	4684      	mov	ip, r0
 800d1ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d1ae:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d1b2:	6823      	ldr	r3, [r4, #0]
 800d1b4:	f8cc 3000 	str.w	r3, [ip]
 800d1b8:	4670      	mov	r0, lr
 800d1ba:	bd10      	pop	{r4, pc}
 800d1bc:	20000588 	.word	0x20000588

0800d1c0 <rcutils_set_default_allocator>:
 800d1c0:	b1a8      	cbz	r0, 800d1ee <rcutils_set_default_allocator+0x2e>
 800d1c2:	6802      	ldr	r2, [r0, #0]
 800d1c4:	b1a2      	cbz	r2, 800d1f0 <rcutils_set_default_allocator+0x30>
 800d1c6:	6841      	ldr	r1, [r0, #4]
 800d1c8:	b1a1      	cbz	r1, 800d1f4 <rcutils_set_default_allocator+0x34>
 800d1ca:	b410      	push	{r4}
 800d1cc:	68c4      	ldr	r4, [r0, #12]
 800d1ce:	b164      	cbz	r4, 800d1ea <rcutils_set_default_allocator+0x2a>
 800d1d0:	6880      	ldr	r0, [r0, #8]
 800d1d2:	b138      	cbz	r0, 800d1e4 <rcutils_set_default_allocator+0x24>
 800d1d4:	4b08      	ldr	r3, [pc, #32]	@ (800d1f8 <rcutils_set_default_allocator+0x38>)
 800d1d6:	601a      	str	r2, [r3, #0]
 800d1d8:	2200      	movs	r2, #0
 800d1da:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800d1de:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800d1e2:	2001      	movs	r0, #1
 800d1e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d1e8:	4770      	bx	lr
 800d1ea:	4620      	mov	r0, r4
 800d1ec:	e7fa      	b.n	800d1e4 <rcutils_set_default_allocator+0x24>
 800d1ee:	4770      	bx	lr
 800d1f0:	4610      	mov	r0, r2
 800d1f2:	4770      	bx	lr
 800d1f4:	4608      	mov	r0, r1
 800d1f6:	4770      	bx	lr
 800d1f8:	20000588 	.word	0x20000588

0800d1fc <rcutils_allocator_is_valid>:
 800d1fc:	b158      	cbz	r0, 800d216 <rcutils_allocator_is_valid+0x1a>
 800d1fe:	6803      	ldr	r3, [r0, #0]
 800d200:	b143      	cbz	r3, 800d214 <rcutils_allocator_is_valid+0x18>
 800d202:	6843      	ldr	r3, [r0, #4]
 800d204:	b133      	cbz	r3, 800d214 <rcutils_allocator_is_valid+0x18>
 800d206:	68c3      	ldr	r3, [r0, #12]
 800d208:	b123      	cbz	r3, 800d214 <rcutils_allocator_is_valid+0x18>
 800d20a:	6880      	ldr	r0, [r0, #8]
 800d20c:	3800      	subs	r0, #0
 800d20e:	bf18      	it	ne
 800d210:	2001      	movne	r0, #1
 800d212:	4770      	bx	lr
 800d214:	4618      	mov	r0, r3
 800d216:	4770      	bx	lr

0800d218 <rcutils_get_error_string>:
 800d218:	4b06      	ldr	r3, [pc, #24]	@ (800d234 <rcutils_get_error_string+0x1c>)
 800d21a:	781b      	ldrb	r3, [r3, #0]
 800d21c:	b13b      	cbz	r3, 800d22e <rcutils_get_error_string+0x16>
 800d21e:	4b06      	ldr	r3, [pc, #24]	@ (800d238 <rcutils_get_error_string+0x20>)
 800d220:	781a      	ldrb	r2, [r3, #0]
 800d222:	b90a      	cbnz	r2, 800d228 <rcutils_get_error_string+0x10>
 800d224:	2201      	movs	r2, #1
 800d226:	701a      	strb	r2, [r3, #0]
 800d228:	4b04      	ldr	r3, [pc, #16]	@ (800d23c <rcutils_get_error_string+0x24>)
 800d22a:	7818      	ldrb	r0, [r3, #0]
 800d22c:	4770      	bx	lr
 800d22e:	4b04      	ldr	r3, [pc, #16]	@ (800d240 <rcutils_get_error_string+0x28>)
 800d230:	7818      	ldrb	r0, [r3, #0]
 800d232:	4770      	bx	lr
 800d234:	200136b0 	.word	0x200136b0
 800d238:	200136b5 	.word	0x200136b5
 800d23c:	200136b4 	.word	0x200136b4
 800d240:	0801e898 	.word	0x0801e898
 800d244:	00000000 	.word	0x00000000

0800d248 <rcutils_reset_error>:
 800d248:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 800d268 <rcutils_reset_error+0x20>
 800d24c:	4a08      	ldr	r2, [pc, #32]	@ (800d270 <rcutils_reset_error+0x28>)
 800d24e:	4809      	ldr	r0, [pc, #36]	@ (800d274 <rcutils_reset_error+0x2c>)
 800d250:	4909      	ldr	r1, [pc, #36]	@ (800d278 <rcutils_reset_error+0x30>)
 800d252:	2300      	movs	r3, #0
 800d254:	8013      	strh	r3, [r2, #0]
 800d256:	ed82 7b02 	vstr	d7, [r2, #8]
 800d25a:	4a08      	ldr	r2, [pc, #32]	@ (800d27c <rcutils_reset_error+0x34>)
 800d25c:	7003      	strb	r3, [r0, #0]
 800d25e:	700b      	strb	r3, [r1, #0]
 800d260:	7013      	strb	r3, [r2, #0]
 800d262:	4770      	bx	lr
 800d264:	f3af 8000 	nop.w
	...
 800d270:	200136b8 	.word	0x200136b8
 800d274:	200136b5 	.word	0x200136b5
 800d278:	200136b4 	.word	0x200136b4
 800d27c:	200136b0 	.word	0x200136b0

0800d280 <rcutils_system_time_now>:
 800d280:	b318      	cbz	r0, 800d2ca <rcutils_system_time_now+0x4a>
 800d282:	b570      	push	{r4, r5, r6, lr}
 800d284:	b084      	sub	sp, #16
 800d286:	4604      	mov	r4, r0
 800d288:	4669      	mov	r1, sp
 800d28a:	2001      	movs	r0, #1
 800d28c:	f7f5 f8a4 	bl	80023d8 <clock_gettime>
 800d290:	2800      	cmp	r0, #0
 800d292:	db17      	blt.n	800d2c4 <rcutils_system_time_now+0x44>
 800d294:	e9dd 3100 	ldrd	r3, r1, [sp]
 800d298:	2900      	cmp	r1, #0
 800d29a:	db13      	blt.n	800d2c4 <rcutils_system_time_now+0x44>
 800d29c:	9d02      	ldr	r5, [sp, #8]
 800d29e:	2d00      	cmp	r5, #0
 800d2a0:	db0d      	blt.n	800d2be <rcutils_system_time_now+0x3e>
 800d2a2:	4e0b      	ldr	r6, [pc, #44]	@ (800d2d0 <rcutils_system_time_now+0x50>)
 800d2a4:	fba3 3206 	umull	r3, r2, r3, r6
 800d2a8:	195b      	adds	r3, r3, r5
 800d2aa:	fb06 2201 	mla	r2, r6, r1, r2
 800d2ae:	f04f 0000 	mov.w	r0, #0
 800d2b2:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 800d2b6:	e9c4 3200 	strd	r3, r2, [r4]
 800d2ba:	b004      	add	sp, #16
 800d2bc:	bd70      	pop	{r4, r5, r6, pc}
 800d2be:	ea53 0201 	orrs.w	r2, r3, r1
 800d2c2:	d1ee      	bne.n	800d2a2 <rcutils_system_time_now+0x22>
 800d2c4:	2002      	movs	r0, #2
 800d2c6:	b004      	add	sp, #16
 800d2c8:	bd70      	pop	{r4, r5, r6, pc}
 800d2ca:	200b      	movs	r0, #11
 800d2cc:	4770      	bx	lr
 800d2ce:	bf00      	nop
 800d2d0:	3b9aca00 	.word	0x3b9aca00

0800d2d4 <rcutils_steady_time_now>:
 800d2d4:	b318      	cbz	r0, 800d31e <rcutils_steady_time_now+0x4a>
 800d2d6:	b570      	push	{r4, r5, r6, lr}
 800d2d8:	b084      	sub	sp, #16
 800d2da:	4604      	mov	r4, r0
 800d2dc:	4669      	mov	r1, sp
 800d2de:	2000      	movs	r0, #0
 800d2e0:	f7f5 f87a 	bl	80023d8 <clock_gettime>
 800d2e4:	2800      	cmp	r0, #0
 800d2e6:	db17      	blt.n	800d318 <rcutils_steady_time_now+0x44>
 800d2e8:	e9dd 3100 	ldrd	r3, r1, [sp]
 800d2ec:	2900      	cmp	r1, #0
 800d2ee:	db13      	blt.n	800d318 <rcutils_steady_time_now+0x44>
 800d2f0:	9d02      	ldr	r5, [sp, #8]
 800d2f2:	2d00      	cmp	r5, #0
 800d2f4:	db0d      	blt.n	800d312 <rcutils_steady_time_now+0x3e>
 800d2f6:	4e0b      	ldr	r6, [pc, #44]	@ (800d324 <rcutils_steady_time_now+0x50>)
 800d2f8:	fba3 3206 	umull	r3, r2, r3, r6
 800d2fc:	195b      	adds	r3, r3, r5
 800d2fe:	fb06 2201 	mla	r2, r6, r1, r2
 800d302:	f04f 0000 	mov.w	r0, #0
 800d306:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 800d30a:	e9c4 3200 	strd	r3, r2, [r4]
 800d30e:	b004      	add	sp, #16
 800d310:	bd70      	pop	{r4, r5, r6, pc}
 800d312:	ea53 0201 	orrs.w	r2, r3, r1
 800d316:	d1ee      	bne.n	800d2f6 <rcutils_steady_time_now+0x22>
 800d318:	2002      	movs	r0, #2
 800d31a:	b004      	add	sp, #16
 800d31c:	bd70      	pop	{r4, r5, r6, pc}
 800d31e:	200b      	movs	r0, #11
 800d320:	4770      	bx	lr
 800d322:	bf00      	nop
 800d324:	3b9aca00 	.word	0x3b9aca00

0800d328 <rmw_get_default_publisher_options>:
 800d328:	2200      	movs	r2, #0
 800d32a:	6002      	str	r2, [r0, #0]
 800d32c:	7102      	strb	r2, [r0, #4]
 800d32e:	4770      	bx	lr

0800d330 <rmw_uros_set_custom_transport>:
 800d330:	b470      	push	{r4, r5, r6}
 800d332:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800d336:	b162      	cbz	r2, 800d352 <rmw_uros_set_custom_transport+0x22>
 800d338:	b15b      	cbz	r3, 800d352 <rmw_uros_set_custom_transport+0x22>
 800d33a:	b155      	cbz	r5, 800d352 <rmw_uros_set_custom_transport+0x22>
 800d33c:	b14e      	cbz	r6, 800d352 <rmw_uros_set_custom_transport+0x22>
 800d33e:	4c06      	ldr	r4, [pc, #24]	@ (800d358 <rmw_uros_set_custom_transport+0x28>)
 800d340:	7020      	strb	r0, [r4, #0]
 800d342:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800d346:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800d34a:	6166      	str	r6, [r4, #20]
 800d34c:	2000      	movs	r0, #0
 800d34e:	bc70      	pop	{r4, r5, r6}
 800d350:	4770      	bx	lr
 800d352:	200b      	movs	r0, #11
 800d354:	bc70      	pop	{r4, r5, r6}
 800d356:	4770      	bx	lr
 800d358:	200136c8 	.word	0x200136c8

0800d35c <flush_session>:
 800d35c:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 800d35e:	f004 beaf 	b.w	80120c0 <uxr_run_session_until_confirm_delivery>
 800d362:	bf00      	nop

0800d364 <rmw_publish>:
 800d364:	2800      	cmp	r0, #0
 800d366:	d053      	beq.n	800d410 <rmw_publish+0xac>
 800d368:	b570      	push	{r4, r5, r6, lr}
 800d36a:	460d      	mov	r5, r1
 800d36c:	b08e      	sub	sp, #56	@ 0x38
 800d36e:	2900      	cmp	r1, #0
 800d370:	d04b      	beq.n	800d40a <rmw_publish+0xa6>
 800d372:	4604      	mov	r4, r0
 800d374:	6800      	ldr	r0, [r0, #0]
 800d376:	f000 fd91 	bl	800de9c <is_uxrce_rmw_identifier_valid>
 800d37a:	2800      	cmp	r0, #0
 800d37c:	d045      	beq.n	800d40a <rmw_publish+0xa6>
 800d37e:	6866      	ldr	r6, [r4, #4]
 800d380:	2e00      	cmp	r6, #0
 800d382:	d042      	beq.n	800d40a <rmw_publish+0xa6>
 800d384:	69b4      	ldr	r4, [r6, #24]
 800d386:	4628      	mov	r0, r5
 800d388:	6923      	ldr	r3, [r4, #16]
 800d38a:	4798      	blx	r3
 800d38c:	69f3      	ldr	r3, [r6, #28]
 800d38e:	9005      	str	r0, [sp, #20]
 800d390:	b113      	cbz	r3, 800d398 <rmw_publish+0x34>
 800d392:	a805      	add	r0, sp, #20
 800d394:	4798      	blx	r3
 800d396:	9805      	ldr	r0, [sp, #20]
 800d398:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800d39c:	691b      	ldr	r3, [r3, #16]
 800d39e:	9000      	str	r0, [sp, #0]
 800d3a0:	6972      	ldr	r2, [r6, #20]
 800d3a2:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800d3a4:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800d3a8:	ab06      	add	r3, sp, #24
 800d3aa:	f005 fc6b 	bl	8012c84 <uxr_prepare_output_stream>
 800d3ae:	b1d8      	cbz	r0, 800d3e8 <rmw_publish+0x84>
 800d3b0:	68a3      	ldr	r3, [r4, #8]
 800d3b2:	a906      	add	r1, sp, #24
 800d3b4:	4628      	mov	r0, r5
 800d3b6:	4798      	blx	r3
 800d3b8:	6a33      	ldr	r3, [r6, #32]
 800d3ba:	4604      	mov	r4, r0
 800d3bc:	b10b      	cbz	r3, 800d3c2 <rmw_publish+0x5e>
 800d3be:	a806      	add	r0, sp, #24
 800d3c0:	4798      	blx	r3
 800d3c2:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 800d3c6:	f8d6 2080 	ldr.w	r2, [r6, #128]	@ 0x80
 800d3ca:	2b01      	cmp	r3, #1
 800d3cc:	6910      	ldr	r0, [r2, #16]
 800d3ce:	d021      	beq.n	800d414 <rmw_publish+0xb0>
 800d3d0:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 800d3d2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800d3d6:	f004 fe73 	bl	80120c0 <uxr_run_session_until_confirm_delivery>
 800d3da:	4004      	ands	r4, r0
 800d3dc:	b2e4      	uxtb	r4, r4
 800d3de:	f084 0001 	eor.w	r0, r4, #1
 800d3e2:	b2c0      	uxtb	r0, r0
 800d3e4:	b00e      	add	sp, #56	@ 0x38
 800d3e6:	bd70      	pop	{r4, r5, r6, pc}
 800d3e8:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800d3ec:	6918      	ldr	r0, [r3, #16]
 800d3ee:	4b0c      	ldr	r3, [pc, #48]	@ (800d420 <rmw_publish+0xbc>)
 800d3f0:	9301      	str	r3, [sp, #4]
 800d3f2:	9b05      	ldr	r3, [sp, #20]
 800d3f4:	9300      	str	r3, [sp, #0]
 800d3f6:	9602      	str	r6, [sp, #8]
 800d3f8:	6972      	ldr	r2, [r6, #20]
 800d3fa:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800d3fc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800d400:	ab06      	add	r3, sp, #24
 800d402:	f005 fc6f 	bl	8012ce4 <uxr_prepare_output_stream_fragmented>
 800d406:	2800      	cmp	r0, #0
 800d408:	d1d2      	bne.n	800d3b0 <rmw_publish+0x4c>
 800d40a:	2001      	movs	r0, #1
 800d40c:	b00e      	add	sp, #56	@ 0x38
 800d40e:	bd70      	pop	{r4, r5, r6, pc}
 800d410:	2001      	movs	r0, #1
 800d412:	4770      	bx	lr
 800d414:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800d418:	f004 faba 	bl	8011990 <uxr_flash_output_streams>
 800d41c:	e7df      	b.n	800d3de <rmw_publish+0x7a>
 800d41e:	bf00      	nop
 800d420:	0800d35d 	.word	0x0800d35d

0800d424 <rmw_create_publisher>:
 800d424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d428:	b087      	sub	sp, #28
 800d42a:	2800      	cmp	r0, #0
 800d42c:	f000 80c9 	beq.w	800d5c2 <rmw_create_publisher+0x19e>
 800d430:	460f      	mov	r7, r1
 800d432:	2900      	cmp	r1, #0
 800d434:	f000 80c5 	beq.w	800d5c2 <rmw_create_publisher+0x19e>
 800d438:	4604      	mov	r4, r0
 800d43a:	6800      	ldr	r0, [r0, #0]
 800d43c:	4615      	mov	r5, r2
 800d43e:	461e      	mov	r6, r3
 800d440:	f000 fd2c 	bl	800de9c <is_uxrce_rmw_identifier_valid>
 800d444:	2800      	cmp	r0, #0
 800d446:	f000 80bc 	beq.w	800d5c2 <rmw_create_publisher+0x19e>
 800d44a:	2d00      	cmp	r5, #0
 800d44c:	f000 80b9 	beq.w	800d5c2 <rmw_create_publisher+0x19e>
 800d450:	782b      	ldrb	r3, [r5, #0]
 800d452:	2b00      	cmp	r3, #0
 800d454:	f000 80b5 	beq.w	800d5c2 <rmw_create_publisher+0x19e>
 800d458:	2e00      	cmp	r6, #0
 800d45a:	f000 80b2 	beq.w	800d5c2 <rmw_create_publisher+0x19e>
 800d45e:	485c      	ldr	r0, [pc, #368]	@ (800d5d0 <rmw_create_publisher+0x1ac>)
 800d460:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800d464:	f00a fd14 	bl	8017e90 <get_memory>
 800d468:	2800      	cmp	r0, #0
 800d46a:	f000 80aa 	beq.w	800d5c2 <rmw_create_publisher+0x19e>
 800d46e:	6884      	ldr	r4, [r0, #8]
 800d470:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 800d474:	f00a fd92 	bl	8017f9c <rmw_get_implementation_identifier>
 800d478:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 800d47c:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 800d480:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 800d484:	4628      	mov	r0, r5
 800d486:	f7f2 ff1b 	bl	80002c0 <strlen>
 800d48a:	3001      	adds	r0, #1
 800d48c:	283c      	cmp	r0, #60	@ 0x3c
 800d48e:	f104 0884 	add.w	r8, r4, #132	@ 0x84
 800d492:	f200 808f 	bhi.w	800d5b4 <rmw_create_publisher+0x190>
 800d496:	4a4f      	ldr	r2, [pc, #316]	@ (800d5d4 <rmw_create_publisher+0x1b0>)
 800d498:	462b      	mov	r3, r5
 800d49a:	213c      	movs	r1, #60	@ 0x3c
 800d49c:	4650      	mov	r0, sl
 800d49e:	f00f fc79 	bl	801cd94 <sniprintf>
 800d4a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800d4a6:	67e3      	str	r3, [r4, #124]	@ 0x7c
 800d4a8:	4631      	mov	r1, r6
 800d4aa:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 800d4ae:	2250      	movs	r2, #80	@ 0x50
 800d4b0:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800d4b4:	f010 f851 	bl	801d55a <memcpy>
 800d4b8:	7a33      	ldrb	r3, [r6, #8]
 800d4ba:	4947      	ldr	r1, [pc, #284]	@ (800d5d8 <rmw_create_publisher+0x1b4>)
 800d4bc:	2b02      	cmp	r3, #2
 800d4be:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d4c2:	bf0c      	ite	eq
 800d4c4:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 800d4c8:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 800d4cc:	67a3      	str	r3, [r4, #120]	@ 0x78
 800d4ce:	2300      	movs	r3, #0
 800d4d0:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800d4d4:	4638      	mov	r0, r7
 800d4d6:	f000 fcef 	bl	800deb8 <get_message_typesupport_handle>
 800d4da:	2800      	cmp	r0, #0
 800d4dc:	d06a      	beq.n	800d5b4 <rmw_create_publisher+0x190>
 800d4de:	6842      	ldr	r2, [r0, #4]
 800d4e0:	61a2      	str	r2, [r4, #24]
 800d4e2:	2a00      	cmp	r2, #0
 800d4e4:	d066      	beq.n	800d5b4 <rmw_create_publisher+0x190>
 800d4e6:	4629      	mov	r1, r5
 800d4e8:	4633      	mov	r3, r6
 800d4ea:	4648      	mov	r0, r9
 800d4ec:	f00a ffbe 	bl	801846c <create_topic>
 800d4f0:	6260      	str	r0, [r4, #36]	@ 0x24
 800d4f2:	2800      	cmp	r0, #0
 800d4f4:	d062      	beq.n	800d5bc <rmw_create_publisher+0x198>
 800d4f6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d4fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d4fe:	2103      	movs	r1, #3
 800d500:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 800d504:	1c42      	adds	r2, r0, #1
 800d506:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 800d50a:	f004 f913 	bl	8011734 <uxr_object_id>
 800d50e:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 800d512:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d516:	6120      	str	r0, [r4, #16]
 800d518:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 800d51c:	6910      	ldr	r0, [r2, #16]
 800d51e:	2506      	movs	r5, #6
 800d520:	9500      	str	r5, [sp, #0]
 800d522:	6819      	ldr	r1, [r3, #0]
 800d524:	6922      	ldr	r2, [r4, #16]
 800d526:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800d52a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800d52e:	f003 ff9f 	bl	8011470 <uxr_buffer_create_publisher_bin>
 800d532:	4602      	mov	r2, r0
 800d534:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800d538:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800d53c:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800d540:	f000 fb8c 	bl	800dc5c <run_xrce_session>
 800d544:	b3b0      	cbz	r0, 800d5b4 <rmw_create_publisher+0x190>
 800d546:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d54a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d54e:	2105      	movs	r1, #5
 800d550:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 800d554:	1c42      	adds	r2, r0, #1
 800d556:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 800d55a:	f004 f8eb 	bl	8011734 <uxr_object_id>
 800d55e:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800d562:	6160      	str	r0, [r4, #20]
 800d564:	4631      	mov	r1, r6
 800d566:	af04      	add	r7, sp, #16
 800d568:	691e      	ldr	r6, [r3, #16]
 800d56a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d56e:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 800d572:	f8d3 a384 	ldr.w	sl, [r3, #900]	@ 0x384
 800d576:	4638      	mov	r0, r7
 800d578:	f000 fb90 	bl	800dc9c <convert_qos_profile>
 800d57c:	9503      	str	r5, [sp, #12]
 800d57e:	e897 0003 	ldmia.w	r7, {r0, r1}
 800d582:	9001      	str	r0, [sp, #4]
 800d584:	f8ad 1008 	strh.w	r1, [sp, #8]
 800d588:	f8db 3010 	ldr.w	r3, [fp, #16]
 800d58c:	9300      	str	r3, [sp, #0]
 800d58e:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 800d592:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800d596:	f8da 1000 	ldr.w	r1, [sl]
 800d59a:	4630      	mov	r0, r6
 800d59c:	f003 ffc6 	bl	801152c <uxr_buffer_create_datawriter_bin>
 800d5a0:	4602      	mov	r2, r0
 800d5a2:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800d5a6:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800d5aa:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800d5ae:	f000 fb55 	bl	800dc5c <run_xrce_session>
 800d5b2:	b940      	cbnz	r0, 800d5c6 <rmw_create_publisher+0x1a2>
 800d5b4:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800d5b6:	b108      	cbz	r0, 800d5bc <rmw_create_publisher+0x198>
 800d5b8:	f000 fa46 	bl	800da48 <rmw_uxrce_fini_topic_memory>
 800d5bc:	4640      	mov	r0, r8
 800d5be:	f000 f9eb 	bl	800d998 <rmw_uxrce_fini_publisher_memory>
 800d5c2:	f04f 0800 	mov.w	r8, #0
 800d5c6:	4640      	mov	r0, r8
 800d5c8:	b007      	add	sp, #28
 800d5ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5ce:	bf00      	nop
 800d5d0:	20017c88 	.word	0x20017c88
 800d5d4:	0801ed7c 	.word	0x0801ed7c
 800d5d8:	0801e808 	.word	0x0801e808

0800d5dc <rmw_publisher_get_actual_qos>:
 800d5dc:	b508      	push	{r3, lr}
 800d5de:	4603      	mov	r3, r0
 800d5e0:	b140      	cbz	r0, 800d5f4 <rmw_publisher_get_actual_qos+0x18>
 800d5e2:	4608      	mov	r0, r1
 800d5e4:	b131      	cbz	r1, 800d5f4 <rmw_publisher_get_actual_qos+0x18>
 800d5e6:	6859      	ldr	r1, [r3, #4]
 800d5e8:	2250      	movs	r2, #80	@ 0x50
 800d5ea:	3128      	adds	r1, #40	@ 0x28
 800d5ec:	f00f ffb5 	bl	801d55a <memcpy>
 800d5f0:	2000      	movs	r0, #0
 800d5f2:	bd08      	pop	{r3, pc}
 800d5f4:	200b      	movs	r0, #11
 800d5f6:	bd08      	pop	{r3, pc}

0800d5f8 <rmw_destroy_publisher>:
 800d5f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5fc:	b128      	cbz	r0, 800d60a <rmw_destroy_publisher+0x12>
 800d5fe:	4604      	mov	r4, r0
 800d600:	6800      	ldr	r0, [r0, #0]
 800d602:	460d      	mov	r5, r1
 800d604:	f000 fc4a 	bl	800de9c <is_uxrce_rmw_identifier_valid>
 800d608:	b918      	cbnz	r0, 800d612 <rmw_destroy_publisher+0x1a>
 800d60a:	2401      	movs	r4, #1
 800d60c:	4620      	mov	r0, r4
 800d60e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d612:	6863      	ldr	r3, [r4, #4]
 800d614:	2b00      	cmp	r3, #0
 800d616:	d0f8      	beq.n	800d60a <rmw_destroy_publisher+0x12>
 800d618:	2d00      	cmp	r5, #0
 800d61a:	d0f6      	beq.n	800d60a <rmw_destroy_publisher+0x12>
 800d61c:	6828      	ldr	r0, [r5, #0]
 800d61e:	f000 fc3d 	bl	800de9c <is_uxrce_rmw_identifier_valid>
 800d622:	2800      	cmp	r0, #0
 800d624:	d0f1      	beq.n	800d60a <rmw_destroy_publisher+0x12>
 800d626:	686c      	ldr	r4, [r5, #4]
 800d628:	2c00      	cmp	r4, #0
 800d62a:	d0ee      	beq.n	800d60a <rmw_destroy_publisher+0x12>
 800d62c:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800d62e:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 800d632:	f00a ff6f 	bl	8018514 <destroy_topic>
 800d636:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800d63a:	6962      	ldr	r2, [r4, #20]
 800d63c:	6918      	ldr	r0, [r3, #16]
 800d63e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800d642:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800d646:	6819      	ldr	r1, [r3, #0]
 800d648:	f003 fe62 	bl	8011310 <uxr_buffer_delete_entity>
 800d64c:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800d650:	6922      	ldr	r2, [r4, #16]
 800d652:	4680      	mov	r8, r0
 800d654:	6918      	ldr	r0, [r3, #16]
 800d656:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800d65a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800d65e:	6819      	ldr	r1, [r3, #0]
 800d660:	f003 fe56 	bl	8011310 <uxr_buffer_delete_entity>
 800d664:	4606      	mov	r6, r0
 800d666:	6938      	ldr	r0, [r7, #16]
 800d668:	4642      	mov	r2, r8
 800d66a:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800d66e:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800d672:	f000 faf3 	bl	800dc5c <run_xrce_session>
 800d676:	4604      	mov	r4, r0
 800d678:	6938      	ldr	r0, [r7, #16]
 800d67a:	4632      	mov	r2, r6
 800d67c:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800d680:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800d684:	f000 faea 	bl	800dc5c <run_xrce_session>
 800d688:	4004      	ands	r4, r0
 800d68a:	f084 0401 	eor.w	r4, r4, #1
 800d68e:	b2e4      	uxtb	r4, r4
 800d690:	4628      	mov	r0, r5
 800d692:	0064      	lsls	r4, r4, #1
 800d694:	f000 f980 	bl	800d998 <rmw_uxrce_fini_publisher_memory>
 800d698:	e7b8      	b.n	800d60c <rmw_destroy_publisher+0x14>
 800d69a:	bf00      	nop

0800d69c <rmw_uxrce_init_service_memory>:
 800d69c:	b1e2      	cbz	r2, 800d6d8 <rmw_uxrce_init_service_memory+0x3c>
 800d69e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d6a2:	7b05      	ldrb	r5, [r0, #12]
 800d6a4:	4606      	mov	r6, r0
 800d6a6:	b9ad      	cbnz	r5, 800d6d4 <rmw_uxrce_init_service_memory+0x38>
 800d6a8:	23c8      	movs	r3, #200	@ 0xc8
 800d6aa:	e9c0 5500 	strd	r5, r5, [r0]
 800d6ae:	6083      	str	r3, [r0, #8]
 800d6b0:	f240 1301 	movw	r3, #257	@ 0x101
 800d6b4:	4617      	mov	r7, r2
 800d6b6:	8183      	strh	r3, [r0, #12]
 800d6b8:	460c      	mov	r4, r1
 800d6ba:	46a8      	mov	r8, r5
 800d6bc:	4621      	mov	r1, r4
 800d6be:	4630      	mov	r0, r6
 800d6c0:	3501      	adds	r5, #1
 800d6c2:	f00a fbf5 	bl	8017eb0 <put_memory>
 800d6c6:	42af      	cmp	r7, r5
 800d6c8:	60a4      	str	r4, [r4, #8]
 800d6ca:	f884 800c 	strb.w	r8, [r4, #12]
 800d6ce:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800d6d2:	d1f3      	bne.n	800d6bc <rmw_uxrce_init_service_memory+0x20>
 800d6d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6d8:	4770      	bx	lr
 800d6da:	bf00      	nop

0800d6dc <rmw_uxrce_init_client_memory>:
 800d6dc:	b1e2      	cbz	r2, 800d718 <rmw_uxrce_init_client_memory+0x3c>
 800d6de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d6e2:	7b05      	ldrb	r5, [r0, #12]
 800d6e4:	4606      	mov	r6, r0
 800d6e6:	b9ad      	cbnz	r5, 800d714 <rmw_uxrce_init_client_memory+0x38>
 800d6e8:	23c8      	movs	r3, #200	@ 0xc8
 800d6ea:	e9c0 5500 	strd	r5, r5, [r0]
 800d6ee:	6083      	str	r3, [r0, #8]
 800d6f0:	f240 1301 	movw	r3, #257	@ 0x101
 800d6f4:	4617      	mov	r7, r2
 800d6f6:	8183      	strh	r3, [r0, #12]
 800d6f8:	460c      	mov	r4, r1
 800d6fa:	46a8      	mov	r8, r5
 800d6fc:	4621      	mov	r1, r4
 800d6fe:	4630      	mov	r0, r6
 800d700:	3501      	adds	r5, #1
 800d702:	f00a fbd5 	bl	8017eb0 <put_memory>
 800d706:	42af      	cmp	r7, r5
 800d708:	60a4      	str	r4, [r4, #8]
 800d70a:	f884 800c 	strb.w	r8, [r4, #12]
 800d70e:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800d712:	d1f3      	bne.n	800d6fc <rmw_uxrce_init_client_memory+0x20>
 800d714:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d718:	4770      	bx	lr
 800d71a:	bf00      	nop

0800d71c <rmw_uxrce_init_publisher_memory>:
 800d71c:	b1e2      	cbz	r2, 800d758 <rmw_uxrce_init_publisher_memory+0x3c>
 800d71e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d722:	7b05      	ldrb	r5, [r0, #12]
 800d724:	4606      	mov	r6, r0
 800d726:	b9ad      	cbnz	r5, 800d754 <rmw_uxrce_init_publisher_memory+0x38>
 800d728:	23d8      	movs	r3, #216	@ 0xd8
 800d72a:	e9c0 5500 	strd	r5, r5, [r0]
 800d72e:	6083      	str	r3, [r0, #8]
 800d730:	f240 1301 	movw	r3, #257	@ 0x101
 800d734:	4617      	mov	r7, r2
 800d736:	8183      	strh	r3, [r0, #12]
 800d738:	460c      	mov	r4, r1
 800d73a:	46a8      	mov	r8, r5
 800d73c:	4621      	mov	r1, r4
 800d73e:	4630      	mov	r0, r6
 800d740:	3501      	adds	r5, #1
 800d742:	f00a fbb5 	bl	8017eb0 <put_memory>
 800d746:	42af      	cmp	r7, r5
 800d748:	60a4      	str	r4, [r4, #8]
 800d74a:	f884 800c 	strb.w	r8, [r4, #12]
 800d74e:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800d752:	d1f3      	bne.n	800d73c <rmw_uxrce_init_publisher_memory+0x20>
 800d754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d758:	4770      	bx	lr
 800d75a:	bf00      	nop

0800d75c <rmw_uxrce_init_subscription_memory>:
 800d75c:	b1e2      	cbz	r2, 800d798 <rmw_uxrce_init_subscription_memory+0x3c>
 800d75e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d762:	7b05      	ldrb	r5, [r0, #12]
 800d764:	4606      	mov	r6, r0
 800d766:	b9ad      	cbnz	r5, 800d794 <rmw_uxrce_init_subscription_memory+0x38>
 800d768:	23d8      	movs	r3, #216	@ 0xd8
 800d76a:	e9c0 5500 	strd	r5, r5, [r0]
 800d76e:	6083      	str	r3, [r0, #8]
 800d770:	f240 1301 	movw	r3, #257	@ 0x101
 800d774:	4617      	mov	r7, r2
 800d776:	8183      	strh	r3, [r0, #12]
 800d778:	460c      	mov	r4, r1
 800d77a:	46a8      	mov	r8, r5
 800d77c:	4621      	mov	r1, r4
 800d77e:	4630      	mov	r0, r6
 800d780:	3501      	adds	r5, #1
 800d782:	f00a fb95 	bl	8017eb0 <put_memory>
 800d786:	42af      	cmp	r7, r5
 800d788:	60a4      	str	r4, [r4, #8]
 800d78a:	f884 800c 	strb.w	r8, [r4, #12]
 800d78e:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800d792:	d1f3      	bne.n	800d77c <rmw_uxrce_init_subscription_memory+0x20>
 800d794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d798:	4770      	bx	lr
 800d79a:	bf00      	nop

0800d79c <rmw_uxrce_init_node_memory>:
 800d79c:	b1e2      	cbz	r2, 800d7d8 <rmw_uxrce_init_node_memory+0x3c>
 800d79e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7a2:	7b05      	ldrb	r5, [r0, #12]
 800d7a4:	4606      	mov	r6, r0
 800d7a6:	b9ad      	cbnz	r5, 800d7d4 <rmw_uxrce_init_node_memory+0x38>
 800d7a8:	23a4      	movs	r3, #164	@ 0xa4
 800d7aa:	e9c0 5500 	strd	r5, r5, [r0]
 800d7ae:	6083      	str	r3, [r0, #8]
 800d7b0:	f240 1301 	movw	r3, #257	@ 0x101
 800d7b4:	4617      	mov	r7, r2
 800d7b6:	8183      	strh	r3, [r0, #12]
 800d7b8:	460c      	mov	r4, r1
 800d7ba:	46a8      	mov	r8, r5
 800d7bc:	4621      	mov	r1, r4
 800d7be:	4630      	mov	r0, r6
 800d7c0:	3501      	adds	r5, #1
 800d7c2:	f00a fb75 	bl	8017eb0 <put_memory>
 800d7c6:	42af      	cmp	r7, r5
 800d7c8:	60a4      	str	r4, [r4, #8]
 800d7ca:	f884 800c 	strb.w	r8, [r4, #12]
 800d7ce:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 800d7d2:	d1f3      	bne.n	800d7bc <rmw_uxrce_init_node_memory+0x20>
 800d7d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d7d8:	4770      	bx	lr
 800d7da:	bf00      	nop

0800d7dc <rmw_uxrce_init_session_memory>:
 800d7dc:	b1ea      	cbz	r2, 800d81a <rmw_uxrce_init_session_memory+0x3e>
 800d7de:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d7e2:	7b05      	ldrb	r5, [r0, #12]
 800d7e4:	4606      	mov	r6, r0
 800d7e6:	b9b5      	cbnz	r5, 800d816 <rmw_uxrce_init_session_memory+0x3a>
 800d7e8:	e9c0 5500 	strd	r5, r5, [r0]
 800d7ec:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 800d7f0:	f240 1301 	movw	r3, #257	@ 0x101
 800d7f4:	4617      	mov	r7, r2
 800d7f6:	f8c0 8008 	str.w	r8, [r0, #8]
 800d7fa:	460c      	mov	r4, r1
 800d7fc:	8183      	strh	r3, [r0, #12]
 800d7fe:	46a9      	mov	r9, r5
 800d800:	4621      	mov	r1, r4
 800d802:	4630      	mov	r0, r6
 800d804:	3501      	adds	r5, #1
 800d806:	f00a fb53 	bl	8017eb0 <put_memory>
 800d80a:	42af      	cmp	r7, r5
 800d80c:	60a4      	str	r4, [r4, #8]
 800d80e:	f884 900c 	strb.w	r9, [r4, #12]
 800d812:	4444      	add	r4, r8
 800d814:	d1f4      	bne.n	800d800 <rmw_uxrce_init_session_memory+0x24>
 800d816:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d81a:	4770      	bx	lr

0800d81c <rmw_uxrce_init_topic_memory>:
 800d81c:	b1e2      	cbz	r2, 800d858 <rmw_uxrce_init_topic_memory+0x3c>
 800d81e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d822:	7b05      	ldrb	r5, [r0, #12]
 800d824:	4606      	mov	r6, r0
 800d826:	b9ad      	cbnz	r5, 800d854 <rmw_uxrce_init_topic_memory+0x38>
 800d828:	231c      	movs	r3, #28
 800d82a:	e9c0 5500 	strd	r5, r5, [r0]
 800d82e:	6083      	str	r3, [r0, #8]
 800d830:	f240 1301 	movw	r3, #257	@ 0x101
 800d834:	4617      	mov	r7, r2
 800d836:	8183      	strh	r3, [r0, #12]
 800d838:	460c      	mov	r4, r1
 800d83a:	46a8      	mov	r8, r5
 800d83c:	4621      	mov	r1, r4
 800d83e:	4630      	mov	r0, r6
 800d840:	3501      	adds	r5, #1
 800d842:	f00a fb35 	bl	8017eb0 <put_memory>
 800d846:	42af      	cmp	r7, r5
 800d848:	60a4      	str	r4, [r4, #8]
 800d84a:	f884 800c 	strb.w	r8, [r4, #12]
 800d84e:	f104 041c 	add.w	r4, r4, #28
 800d852:	d1f3      	bne.n	800d83c <rmw_uxrce_init_topic_memory+0x20>
 800d854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d858:	4770      	bx	lr
 800d85a:	bf00      	nop

0800d85c <rmw_uxrce_init_static_input_buffer_memory>:
 800d85c:	b1ea      	cbz	r2, 800d89a <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800d85e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d862:	7b05      	ldrb	r5, [r0, #12]
 800d864:	4606      	mov	r6, r0
 800d866:	b9b5      	cbnz	r5, 800d896 <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800d868:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 800d86c:	e9c0 5500 	strd	r5, r5, [r0]
 800d870:	6083      	str	r3, [r0, #8]
 800d872:	f240 1301 	movw	r3, #257	@ 0x101
 800d876:	4617      	mov	r7, r2
 800d878:	8183      	strh	r3, [r0, #12]
 800d87a:	460c      	mov	r4, r1
 800d87c:	46a8      	mov	r8, r5
 800d87e:	4621      	mov	r1, r4
 800d880:	4630      	mov	r0, r6
 800d882:	3501      	adds	r5, #1
 800d884:	f00a fb14 	bl	8017eb0 <put_memory>
 800d888:	42af      	cmp	r7, r5
 800d88a:	60a4      	str	r4, [r4, #8]
 800d88c:	f884 800c 	strb.w	r8, [r4, #12]
 800d890:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 800d894:	d1f3      	bne.n	800d87e <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800d896:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d89a:	4770      	bx	lr

0800d89c <rmw_uxrce_init_init_options_impl_memory>:
 800d89c:	b1e2      	cbz	r2, 800d8d8 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800d89e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d8a2:	7b05      	ldrb	r5, [r0, #12]
 800d8a4:	4606      	mov	r6, r0
 800d8a6:	b9ad      	cbnz	r5, 800d8d4 <rmw_uxrce_init_init_options_impl_memory+0x38>
 800d8a8:	232c      	movs	r3, #44	@ 0x2c
 800d8aa:	e9c0 5500 	strd	r5, r5, [r0]
 800d8ae:	6083      	str	r3, [r0, #8]
 800d8b0:	f240 1301 	movw	r3, #257	@ 0x101
 800d8b4:	4617      	mov	r7, r2
 800d8b6:	8183      	strh	r3, [r0, #12]
 800d8b8:	460c      	mov	r4, r1
 800d8ba:	46a8      	mov	r8, r5
 800d8bc:	4621      	mov	r1, r4
 800d8be:	4630      	mov	r0, r6
 800d8c0:	3501      	adds	r5, #1
 800d8c2:	f00a faf5 	bl	8017eb0 <put_memory>
 800d8c6:	42af      	cmp	r7, r5
 800d8c8:	60a4      	str	r4, [r4, #8]
 800d8ca:	f884 800c 	strb.w	r8, [r4, #12]
 800d8ce:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 800d8d2:	d1f3      	bne.n	800d8bc <rmw_uxrce_init_init_options_impl_memory+0x20>
 800d8d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d8d8:	4770      	bx	lr
 800d8da:	bf00      	nop

0800d8dc <rmw_uxrce_init_wait_set_memory>:
 800d8dc:	b1e2      	cbz	r2, 800d918 <rmw_uxrce_init_wait_set_memory+0x3c>
 800d8de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d8e2:	7b05      	ldrb	r5, [r0, #12]
 800d8e4:	4606      	mov	r6, r0
 800d8e6:	b9ad      	cbnz	r5, 800d914 <rmw_uxrce_init_wait_set_memory+0x38>
 800d8e8:	231c      	movs	r3, #28
 800d8ea:	e9c0 5500 	strd	r5, r5, [r0]
 800d8ee:	6083      	str	r3, [r0, #8]
 800d8f0:	f240 1301 	movw	r3, #257	@ 0x101
 800d8f4:	4617      	mov	r7, r2
 800d8f6:	8183      	strh	r3, [r0, #12]
 800d8f8:	460c      	mov	r4, r1
 800d8fa:	46a8      	mov	r8, r5
 800d8fc:	4621      	mov	r1, r4
 800d8fe:	4630      	mov	r0, r6
 800d900:	3501      	adds	r5, #1
 800d902:	f00a fad5 	bl	8017eb0 <put_memory>
 800d906:	42af      	cmp	r7, r5
 800d908:	60a4      	str	r4, [r4, #8]
 800d90a:	f884 800c 	strb.w	r8, [r4, #12]
 800d90e:	f104 041c 	add.w	r4, r4, #28
 800d912:	d1f3      	bne.n	800d8fc <rmw_uxrce_init_wait_set_memory+0x20>
 800d914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d918:	4770      	bx	lr
 800d91a:	bf00      	nop

0800d91c <rmw_uxrce_init_guard_condition_memory>:
 800d91c:	b1e2      	cbz	r2, 800d958 <rmw_uxrce_init_guard_condition_memory+0x3c>
 800d91e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d922:	7b05      	ldrb	r5, [r0, #12]
 800d924:	4606      	mov	r6, r0
 800d926:	b9ad      	cbnz	r5, 800d954 <rmw_uxrce_init_guard_condition_memory+0x38>
 800d928:	2320      	movs	r3, #32
 800d92a:	e9c0 5500 	strd	r5, r5, [r0]
 800d92e:	6083      	str	r3, [r0, #8]
 800d930:	f240 1301 	movw	r3, #257	@ 0x101
 800d934:	4617      	mov	r7, r2
 800d936:	8183      	strh	r3, [r0, #12]
 800d938:	460c      	mov	r4, r1
 800d93a:	46a8      	mov	r8, r5
 800d93c:	4621      	mov	r1, r4
 800d93e:	4630      	mov	r0, r6
 800d940:	3501      	adds	r5, #1
 800d942:	f00a fab5 	bl	8017eb0 <put_memory>
 800d946:	42af      	cmp	r7, r5
 800d948:	60a4      	str	r4, [r4, #8]
 800d94a:	f884 800c 	strb.w	r8, [r4, #12]
 800d94e:	f104 0420 	add.w	r4, r4, #32
 800d952:	d1f3      	bne.n	800d93c <rmw_uxrce_init_guard_condition_memory+0x20>
 800d954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d958:	4770      	bx	lr
 800d95a:	bf00      	nop

0800d95c <rmw_uxrce_fini_session_memory>:
 800d95c:	4601      	mov	r1, r0
 800d95e:	4801      	ldr	r0, [pc, #4]	@ (800d964 <rmw_uxrce_fini_session_memory+0x8>)
 800d960:	f00a baa6 	b.w	8017eb0 <put_memory>
 800d964:	200192f8 	.word	0x200192f8

0800d968 <rmw_uxrce_fini_node_memory>:
 800d968:	b538      	push	{r3, r4, r5, lr}
 800d96a:	4604      	mov	r4, r0
 800d96c:	6800      	ldr	r0, [r0, #0]
 800d96e:	b128      	cbz	r0, 800d97c <rmw_uxrce_fini_node_memory+0x14>
 800d970:	4b07      	ldr	r3, [pc, #28]	@ (800d990 <rmw_uxrce_fini_node_memory+0x28>)
 800d972:	6819      	ldr	r1, [r3, #0]
 800d974:	f7f2 fc44 	bl	8000200 <strcmp>
 800d978:	b940      	cbnz	r0, 800d98c <rmw_uxrce_fini_node_memory+0x24>
 800d97a:	6020      	str	r0, [r4, #0]
 800d97c:	6861      	ldr	r1, [r4, #4]
 800d97e:	b129      	cbz	r1, 800d98c <rmw_uxrce_fini_node_memory+0x24>
 800d980:	2500      	movs	r5, #0
 800d982:	4804      	ldr	r0, [pc, #16]	@ (800d994 <rmw_uxrce_fini_node_memory+0x2c>)
 800d984:	610d      	str	r5, [r1, #16]
 800d986:	f00a fa93 	bl	8017eb0 <put_memory>
 800d98a:	6065      	str	r5, [r4, #4]
 800d98c:	bd38      	pop	{r3, r4, r5, pc}
 800d98e:	bf00      	nop
 800d990:	080202d0 	.word	0x080202d0
 800d994:	20017d3c 	.word	0x20017d3c

0800d998 <rmw_uxrce_fini_publisher_memory>:
 800d998:	b510      	push	{r4, lr}
 800d99a:	4604      	mov	r4, r0
 800d99c:	6800      	ldr	r0, [r0, #0]
 800d99e:	b128      	cbz	r0, 800d9ac <rmw_uxrce_fini_publisher_memory+0x14>
 800d9a0:	4b06      	ldr	r3, [pc, #24]	@ (800d9bc <rmw_uxrce_fini_publisher_memory+0x24>)
 800d9a2:	6819      	ldr	r1, [r3, #0]
 800d9a4:	f7f2 fc2c 	bl	8000200 <strcmp>
 800d9a8:	b938      	cbnz	r0, 800d9ba <rmw_uxrce_fini_publisher_memory+0x22>
 800d9aa:	6020      	str	r0, [r4, #0]
 800d9ac:	6861      	ldr	r1, [r4, #4]
 800d9ae:	b121      	cbz	r1, 800d9ba <rmw_uxrce_fini_publisher_memory+0x22>
 800d9b0:	4803      	ldr	r0, [pc, #12]	@ (800d9c0 <rmw_uxrce_fini_publisher_memory+0x28>)
 800d9b2:	f00a fa7d 	bl	8017eb0 <put_memory>
 800d9b6:	2300      	movs	r3, #0
 800d9b8:	6063      	str	r3, [r4, #4]
 800d9ba:	bd10      	pop	{r4, pc}
 800d9bc:	080202d0 	.word	0x080202d0
 800d9c0:	20017c88 	.word	0x20017c88

0800d9c4 <rmw_uxrce_fini_subscription_memory>:
 800d9c4:	b510      	push	{r4, lr}
 800d9c6:	4604      	mov	r4, r0
 800d9c8:	6800      	ldr	r0, [r0, #0]
 800d9ca:	b128      	cbz	r0, 800d9d8 <rmw_uxrce_fini_subscription_memory+0x14>
 800d9cc:	4b06      	ldr	r3, [pc, #24]	@ (800d9e8 <rmw_uxrce_fini_subscription_memory+0x24>)
 800d9ce:	6819      	ldr	r1, [r3, #0]
 800d9d0:	f7f2 fc16 	bl	8000200 <strcmp>
 800d9d4:	b938      	cbnz	r0, 800d9e6 <rmw_uxrce_fini_subscription_memory+0x22>
 800d9d6:	6020      	str	r0, [r4, #0]
 800d9d8:	6861      	ldr	r1, [r4, #4]
 800d9da:	b121      	cbz	r1, 800d9e6 <rmw_uxrce_fini_subscription_memory+0x22>
 800d9dc:	4803      	ldr	r0, [pc, #12]	@ (800d9ec <rmw_uxrce_fini_subscription_memory+0x28>)
 800d9de:	f00a fa67 	bl	8017eb0 <put_memory>
 800d9e2:	2300      	movs	r3, #0
 800d9e4:	6063      	str	r3, [r4, #4]
 800d9e6:	bd10      	pop	{r4, pc}
 800d9e8:	080202d0 	.word	0x080202d0
 800d9ec:	20017408 	.word	0x20017408

0800d9f0 <rmw_uxrce_fini_service_memory>:
 800d9f0:	b510      	push	{r4, lr}
 800d9f2:	4604      	mov	r4, r0
 800d9f4:	6800      	ldr	r0, [r0, #0]
 800d9f6:	b128      	cbz	r0, 800da04 <rmw_uxrce_fini_service_memory+0x14>
 800d9f8:	4b06      	ldr	r3, [pc, #24]	@ (800da14 <rmw_uxrce_fini_service_memory+0x24>)
 800d9fa:	6819      	ldr	r1, [r3, #0]
 800d9fc:	f7f2 fc00 	bl	8000200 <strcmp>
 800da00:	b938      	cbnz	r0, 800da12 <rmw_uxrce_fini_service_memory+0x22>
 800da02:	6020      	str	r0, [r4, #0]
 800da04:	6861      	ldr	r1, [r4, #4]
 800da06:	b121      	cbz	r1, 800da12 <rmw_uxrce_fini_service_memory+0x22>
 800da08:	4803      	ldr	r0, [pc, #12]	@ (800da18 <rmw_uxrce_fini_service_memory+0x28>)
 800da0a:	f00a fa51 	bl	8017eb0 <put_memory>
 800da0e:	2300      	movs	r3, #0
 800da10:	6063      	str	r3, [r4, #4]
 800da12:	bd10      	pop	{r4, pc}
 800da14:	080202d0 	.word	0x080202d0
 800da18:	20016b88 	.word	0x20016b88

0800da1c <rmw_uxrce_fini_client_memory>:
 800da1c:	b510      	push	{r4, lr}
 800da1e:	4604      	mov	r4, r0
 800da20:	6800      	ldr	r0, [r0, #0]
 800da22:	b128      	cbz	r0, 800da30 <rmw_uxrce_fini_client_memory+0x14>
 800da24:	4b06      	ldr	r3, [pc, #24]	@ (800da40 <rmw_uxrce_fini_client_memory+0x24>)
 800da26:	6819      	ldr	r1, [r3, #0]
 800da28:	f7f2 fbea 	bl	8000200 <strcmp>
 800da2c:	b938      	cbnz	r0, 800da3e <rmw_uxrce_fini_client_memory+0x22>
 800da2e:	6020      	str	r0, [r4, #0]
 800da30:	6861      	ldr	r1, [r4, #4]
 800da32:	b121      	cbz	r1, 800da3e <rmw_uxrce_fini_client_memory+0x22>
 800da34:	4803      	ldr	r0, [pc, #12]	@ (800da44 <rmw_uxrce_fini_client_memory+0x28>)
 800da36:	f00a fa3b 	bl	8017eb0 <put_memory>
 800da3a:	2300      	movs	r3, #0
 800da3c:	6063      	str	r3, [r4, #4]
 800da3e:	bd10      	pop	{r4, pc}
 800da40:	080202d0 	.word	0x080202d0
 800da44:	200163a8 	.word	0x200163a8

0800da48 <rmw_uxrce_fini_topic_memory>:
 800da48:	b510      	push	{r4, lr}
 800da4a:	4604      	mov	r4, r0
 800da4c:	4621      	mov	r1, r4
 800da4e:	4803      	ldr	r0, [pc, #12]	@ (800da5c <rmw_uxrce_fini_topic_memory+0x14>)
 800da50:	f00a fa2e 	bl	8017eb0 <put_memory>
 800da54:	2300      	movs	r3, #0
 800da56:	61a3      	str	r3, [r4, #24]
 800da58:	bd10      	pop	{r4, pc}
 800da5a:	bf00      	nop
 800da5c:	20015bc8 	.word	0x20015bc8

0800da60 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800da60:	b082      	sub	sp, #8
 800da62:	b530      	push	{r4, r5, lr}
 800da64:	4929      	ldr	r1, [pc, #164]	@ (800db0c <rmw_uxrce_get_static_input_buffer_for_entity+0xac>)
 800da66:	ac03      	add	r4, sp, #12
 800da68:	e884 000c 	stmia.w	r4, {r2, r3}
 800da6c:	680c      	ldr	r4, [r1, #0]
 800da6e:	461d      	mov	r5, r3
 800da70:	4602      	mov	r2, r0
 800da72:	2c00      	cmp	r4, #0
 800da74:	d043      	beq.n	800dafe <rmw_uxrce_get_static_input_buffer_for_entity+0x9e>
 800da76:	4620      	mov	r0, r4
 800da78:	2100      	movs	r1, #0
 800da7a:	6883      	ldr	r3, [r0, #8]
 800da7c:	6840      	ldr	r0, [r0, #4]
 800da7e:	f8d3 3814 	ldr.w	r3, [r3, #2068]	@ 0x814
 800da82:	429a      	cmp	r2, r3
 800da84:	bf08      	it	eq
 800da86:	3101      	addeq	r1, #1
 800da88:	2800      	cmp	r0, #0
 800da8a:	d1f6      	bne.n	800da7a <rmw_uxrce_get_static_input_buffer_for_entity+0x1a>
 800da8c:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800da90:	2b02      	cmp	r3, #2
 800da92:	d027      	beq.n	800dae4 <rmw_uxrce_get_static_input_buffer_for_entity+0x84>
 800da94:	d906      	bls.n	800daa4 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800da96:	2b03      	cmp	r3, #3
 800da98:	d004      	beq.n	800daa4 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800da9a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800da9e:	2000      	movs	r0, #0
 800daa0:	b002      	add	sp, #8
 800daa2:	4770      	bx	lr
 800daa4:	b1fd      	cbz	r5, 800dae6 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800daa6:	428d      	cmp	r5, r1
 800daa8:	d81d      	bhi.n	800dae6 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800daaa:	2c00      	cmp	r4, #0
 800daac:	d0f5      	beq.n	800da9a <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800daae:	2000      	movs	r0, #0
 800dab0:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 800dab4:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 800dab8:	e001      	b.n	800dabe <rmw_uxrce_get_static_input_buffer_for_entity+0x5e>
 800daba:	6864      	ldr	r4, [r4, #4]
 800dabc:	b1dc      	cbz	r4, 800daf6 <rmw_uxrce_get_static_input_buffer_for_entity+0x96>
 800dabe:	68a3      	ldr	r3, [r4, #8]
 800dac0:	f8d3 1814 	ldr.w	r1, [r3, #2068]	@ 0x814
 800dac4:	428a      	cmp	r2, r1
 800dac6:	d1f8      	bne.n	800daba <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800dac8:	f8d3 1818 	ldr.w	r1, [r3, #2072]	@ 0x818
 800dacc:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 800dad0:	4561      	cmp	r1, ip
 800dad2:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800dad6:	eb73 0e05 	sbcs.w	lr, r3, r5
 800dada:	daee      	bge.n	800daba <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800dadc:	468c      	mov	ip, r1
 800dade:	461d      	mov	r5, r3
 800dae0:	4620      	mov	r0, r4
 800dae2:	e7ea      	b.n	800daba <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800dae4:	b92d      	cbnz	r5, 800daf2 <rmw_uxrce_get_static_input_buffer_for_entity+0x92>
 800dae6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800daea:	4808      	ldr	r0, [pc, #32]	@ (800db0c <rmw_uxrce_get_static_input_buffer_for_entity+0xac>)
 800daec:	b002      	add	sp, #8
 800daee:	f00a b9cf 	b.w	8017e90 <get_memory>
 800daf2:	428d      	cmp	r5, r1
 800daf4:	d8f7      	bhi.n	800dae6 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800daf6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dafa:	b002      	add	sp, #8
 800dafc:	4770      	bx	lr
 800dafe:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800db02:	2b02      	cmp	r3, #2
 800db04:	d0ef      	beq.n	800dae6 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800db06:	d9ee      	bls.n	800dae6 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800db08:	4621      	mov	r1, r4
 800db0a:	e7c4      	b.n	800da96 <rmw_uxrce_get_static_input_buffer_for_entity+0x36>
 800db0c:	20015988 	.word	0x20015988

0800db10 <rmw_uxrce_find_static_input_buffer_by_owner>:
 800db10:	4b11      	ldr	r3, [pc, #68]	@ (800db58 <rmw_uxrce_find_static_input_buffer_by_owner+0x48>)
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	b1eb      	cbz	r3, 800db52 <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 800db16:	b530      	push	{r4, r5, lr}
 800db18:	4684      	mov	ip, r0
 800db1a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800db1e:	f06f 4e00 	mvn.w	lr, #2147483648	@ 0x80000000
 800db22:	2000      	movs	r0, #0
 800db24:	e001      	b.n	800db2a <rmw_uxrce_find_static_input_buffer_by_owner+0x1a>
 800db26:	685b      	ldr	r3, [r3, #4]
 800db28:	b193      	cbz	r3, 800db50 <rmw_uxrce_find_static_input_buffer_by_owner+0x40>
 800db2a:	689a      	ldr	r2, [r3, #8]
 800db2c:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 800db30:	458c      	cmp	ip, r1
 800db32:	d1f8      	bne.n	800db26 <rmw_uxrce_find_static_input_buffer_by_owner+0x16>
 800db34:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 800db38:	f8d2 281c 	ldr.w	r2, [r2, #2076]	@ 0x81c
 800db3c:	42a1      	cmp	r1, r4
 800db3e:	eb72 050e 	sbcs.w	r5, r2, lr
 800db42:	daf0      	bge.n	800db26 <rmw_uxrce_find_static_input_buffer_by_owner+0x16>
 800db44:	4618      	mov	r0, r3
 800db46:	685b      	ldr	r3, [r3, #4]
 800db48:	460c      	mov	r4, r1
 800db4a:	4696      	mov	lr, r2
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d1ec      	bne.n	800db2a <rmw_uxrce_find_static_input_buffer_by_owner+0x1a>
 800db50:	bd30      	pop	{r4, r5, pc}
 800db52:	4618      	mov	r0, r3
 800db54:	4770      	bx	lr
 800db56:	bf00      	nop
 800db58:	20015988 	.word	0x20015988
 800db5c:	00000000 	.word	0x00000000

0800db60 <rmw_uxrce_clean_expired_static_input_buffer>:
 800db60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db64:	4b3c      	ldr	r3, [pc, #240]	@ (800dc58 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800db66:	ed2d 8b06 	vpush	{d8-d10}
 800db6a:	f8d3 8000 	ldr.w	r8, [r3]
 800db6e:	b08d      	sub	sp, #52	@ 0x34
 800db70:	f00b fbda 	bl	8019328 <rmw_uros_epoch_nanos>
 800db74:	f1b8 0f00 	cmp.w	r8, #0
 800db78:	d05c      	beq.n	800dc34 <rmw_uxrce_clean_expired_static_input_buffer+0xd4>
 800db7a:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800db7e:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800db82:	2b04      	cmp	r3, #4
 800db84:	ed9f 8b2e 	vldr	d8, [pc, #184]	@ 800dc40 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 800db88:	ed9f ab2f 	vldr	d10, [pc, #188]	@ 800dc48 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 800db8c:	ed9f 9b30 	vldr	d9, [pc, #192]	@ 800dc50 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 800db90:	4683      	mov	fp, r0
 800db92:	ac04      	add	r4, sp, #16
 800db94:	468a      	mov	sl, r1
 800db96:	d03f      	beq.n	800dc18 <rmw_uxrce_clean_expired_static_input_buffer+0xb8>
 800db98:	2b05      	cmp	r3, #5
 800db9a:	d044      	beq.n	800dc26 <rmw_uxrce_clean_expired_static_input_buffer+0xc6>
 800db9c:	2b03      	cmp	r3, #3
 800db9e:	d03b      	beq.n	800dc18 <rmw_uxrce_clean_expired_static_input_buffer+0xb8>
 800dba0:	ed8d 8b04 	vstr	d8, [sp, #16]
 800dba4:	ed8d ab06 	vstr	d10, [sp, #24]
 800dba8:	ed8d 8b08 	vstr	d8, [sp, #32]
 800dbac:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 800dbb0:	ab08      	add	r3, sp, #32
 800dbb2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dbb4:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800dbb8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800dbbc:	f009 ffac 	bl	8017b18 <rmw_time_equal>
 800dbc0:	b118      	cbz	r0, 800dbca <rmw_uxrce_clean_expired_static_input_buffer+0x6a>
 800dbc2:	ed8d 9b04 	vstr	d9, [sp, #16]
 800dbc6:	ed8d 8b06 	vstr	d8, [sp, #24]
 800dbca:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800dbce:	f8d5 7818 	ldr.w	r7, [r5, #2072]	@ 0x818
 800dbd2:	f8d5 681c 	ldr.w	r6, [r5, #2076]	@ 0x81c
 800dbd6:	f8d8 9004 	ldr.w	r9, [r8, #4]
 800dbda:	f009 fff1 	bl	8017bc0 <rmw_time_total_nsec>
 800dbde:	183f      	adds	r7, r7, r0
 800dbe0:	eb46 0601 	adc.w	r6, r6, r1
 800dbe4:	455f      	cmp	r7, fp
 800dbe6:	eb76 060a 	sbcs.w	r6, r6, sl
 800dbea:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 800dbee:	db05      	blt.n	800dbfc <rmw_uxrce_clean_expired_static_input_buffer+0x9c>
 800dbf0:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 800dbf4:	4593      	cmp	fp, r2
 800dbf6:	eb7a 0303 	sbcs.w	r3, sl, r3
 800dbfa:	da03      	bge.n	800dc04 <rmw_uxrce_clean_expired_static_input_buffer+0xa4>
 800dbfc:	4816      	ldr	r0, [pc, #88]	@ (800dc58 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800dbfe:	4641      	mov	r1, r8
 800dc00:	f00a f956 	bl	8017eb0 <put_memory>
 800dc04:	f1b9 0f00 	cmp.w	r9, #0
 800dc08:	d014      	beq.n	800dc34 <rmw_uxrce_clean_expired_static_input_buffer+0xd4>
 800dc0a:	46c8      	mov	r8, r9
 800dc0c:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800dc10:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800dc14:	2b04      	cmp	r3, #4
 800dc16:	d1bf      	bne.n	800db98 <rmw_uxrce_clean_expired_static_input_buffer+0x38>
 800dc18:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800dc1c:	3340      	adds	r3, #64	@ 0x40
 800dc1e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dc20:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800dc24:	e7c0      	b.n	800dba8 <rmw_uxrce_clean_expired_static_input_buffer+0x48>
 800dc26:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800dc2a:	3348      	adds	r3, #72	@ 0x48
 800dc2c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dc2e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800dc32:	e7b9      	b.n	800dba8 <rmw_uxrce_clean_expired_static_input_buffer+0x48>
 800dc34:	b00d      	add	sp, #52	@ 0x34
 800dc36:	ecbd 8b06 	vpop	{d8-d10}
 800dc3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc3e:	bf00      	nop
	...
 800dc48:	00000001 	.word	0x00000001
 800dc4c:	00000000 	.word	0x00000000
 800dc50:	0000001e 	.word	0x0000001e
 800dc54:	00000000 	.word	0x00000000
 800dc58:	20015988 	.word	0x20015988

0800dc5c <run_xrce_session>:
 800dc5c:	b500      	push	{lr}
 800dc5e:	f891 c002 	ldrb.w	ip, [r1, #2]
 800dc62:	b087      	sub	sp, #28
 800dc64:	f1bc 0f01 	cmp.w	ip, #1
 800dc68:	f8ad 200e 	strh.w	r2, [sp, #14]
 800dc6c:	d00f      	beq.n	800dc8e <run_xrce_session+0x32>
 800dc6e:	4619      	mov	r1, r3
 800dc70:	2301      	movs	r3, #1
 800dc72:	9300      	str	r3, [sp, #0]
 800dc74:	f10d 020e 	add.w	r2, sp, #14
 800dc78:	f10d 0317 	add.w	r3, sp, #23
 800dc7c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800dc80:	f004 fa44 	bl	801210c <uxr_run_session_until_all_status>
 800dc84:	b100      	cbz	r0, 800dc88 <run_xrce_session+0x2c>
 800dc86:	2001      	movs	r0, #1
 800dc88:	b007      	add	sp, #28
 800dc8a:	f85d fb04 	ldr.w	pc, [sp], #4
 800dc8e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800dc92:	f003 fe7d 	bl	8011990 <uxr_flash_output_streams>
 800dc96:	2001      	movs	r0, #1
 800dc98:	e7f6      	b.n	800dc88 <run_xrce_session+0x2c>
 800dc9a:	bf00      	nop

0800dc9c <convert_qos_profile>:
 800dc9c:	780a      	ldrb	r2, [r1, #0]
 800dc9e:	f891 c008 	ldrb.w	ip, [r1, #8]
 800dca2:	f1a2 0202 	sub.w	r2, r2, #2
 800dca6:	fab2 f282 	clz	r2, r2
 800dcaa:	0952      	lsrs	r2, r2, #5
 800dcac:	7082      	strb	r2, [r0, #2]
 800dcae:	7a4a      	ldrb	r2, [r1, #9]
 800dcb0:	8889      	ldrh	r1, [r1, #4]
 800dcb2:	8081      	strh	r1, [r0, #4]
 800dcb4:	f1a2 0202 	sub.w	r2, r2, #2
 800dcb8:	f1ac 0c02 	sub.w	ip, ip, #2
 800dcbc:	fab2 f282 	clz	r2, r2
 800dcc0:	fabc fc8c 	clz	ip, ip
 800dcc4:	0952      	lsrs	r2, r2, #5
 800dcc6:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800dcca:	0052      	lsls	r2, r2, #1
 800dccc:	f880 c001 	strb.w	ip, [r0, #1]
 800dcd0:	7002      	strb	r2, [r0, #0]
 800dcd2:	4770      	bx	lr

0800dcd4 <generate_service_topics>:
 800dcd4:	b570      	push	{r4, r5, r6, lr}
 800dcd6:	b082      	sub	sp, #8
 800dcd8:	461c      	mov	r4, r3
 800dcda:	4e12      	ldr	r6, [pc, #72]	@ (800dd24 <generate_service_topics+0x50>)
 800dcdc:	4b12      	ldr	r3, [pc, #72]	@ (800dd28 <generate_service_topics+0x54>)
 800dcde:	9601      	str	r6, [sp, #4]
 800dce0:	4605      	mov	r5, r0
 800dce2:	9000      	str	r0, [sp, #0]
 800dce4:	4616      	mov	r6, r2
 800dce6:	4608      	mov	r0, r1
 800dce8:	4a10      	ldr	r2, [pc, #64]	@ (800dd2c <generate_service_topics+0x58>)
 800dcea:	4621      	mov	r1, r4
 800dcec:	f00f f852 	bl	801cd94 <sniprintf>
 800dcf0:	4b0f      	ldr	r3, [pc, #60]	@ (800dd30 <generate_service_topics+0x5c>)
 800dcf2:	9301      	str	r3, [sp, #4]
 800dcf4:	4601      	mov	r1, r0
 800dcf6:	9500      	str	r5, [sp, #0]
 800dcf8:	4b0e      	ldr	r3, [pc, #56]	@ (800dd34 <generate_service_topics+0x60>)
 800dcfa:	4a0c      	ldr	r2, [pc, #48]	@ (800dd2c <generate_service_topics+0x58>)
 800dcfc:	460d      	mov	r5, r1
 800dcfe:	4630      	mov	r0, r6
 800dd00:	4621      	mov	r1, r4
 800dd02:	f00f f847 	bl	801cd94 <sniprintf>
 800dd06:	2d00      	cmp	r5, #0
 800dd08:	db01      	blt.n	800dd0e <generate_service_topics+0x3a>
 800dd0a:	42ac      	cmp	r4, r5
 800dd0c:	dc02      	bgt.n	800dd14 <generate_service_topics+0x40>
 800dd0e:	2000      	movs	r0, #0
 800dd10:	b002      	add	sp, #8
 800dd12:	bd70      	pop	{r4, r5, r6, pc}
 800dd14:	2800      	cmp	r0, #0
 800dd16:	dbfa      	blt.n	800dd0e <generate_service_topics+0x3a>
 800dd18:	4284      	cmp	r4, r0
 800dd1a:	bfd4      	ite	le
 800dd1c:	2000      	movle	r0, #0
 800dd1e:	2001      	movgt	r0, #1
 800dd20:	b002      	add	sp, #8
 800dd22:	bd70      	pop	{r4, r5, r6, pc}
 800dd24:	0801fd1c 	.word	0x0801fd1c
 800dd28:	0801fd28 	.word	0x0801fd28
 800dd2c:	0801ed78 	.word	0x0801ed78
 800dd30:	0801fd14 	.word	0x0801fd14
 800dd34:	0801fd24 	.word	0x0801fd24

0800dd38 <generate_service_types>:
 800dd38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dd3c:	4605      	mov	r5, r0
 800dd3e:	b086      	sub	sp, #24
 800dd40:	6880      	ldr	r0, [r0, #8]
 800dd42:	460c      	mov	r4, r1
 800dd44:	4617      	mov	r7, r2
 800dd46:	461e      	mov	r6, r3
 800dd48:	4780      	blx	r0
 800dd4a:	68eb      	ldr	r3, [r5, #12]
 800dd4c:	4680      	mov	r8, r0
 800dd4e:	4798      	blx	r3
 800dd50:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800dd54:	f8d0 9004 	ldr.w	r9, [r0, #4]
 800dd58:	2300      	movs	r3, #0
 800dd5a:	7023      	strb	r3, [r4, #0]
 800dd5c:	6813      	ldr	r3, [r2, #0]
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d043      	beq.n	800ddea <generate_service_types+0xb2>
 800dd62:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 800ddfc <generate_service_types+0xc4>
 800dd66:	4641      	mov	r1, r8
 800dd68:	4620      	mov	r0, r4
 800dd6a:	4c22      	ldr	r4, [pc, #136]	@ (800ddf4 <generate_service_types+0xbc>)
 800dd6c:	9405      	str	r4, [sp, #20]
 800dd6e:	6852      	ldr	r2, [r2, #4]
 800dd70:	f8df a090 	ldr.w	sl, [pc, #144]	@ 800de04 <generate_service_types+0xcc>
 800dd74:	9204      	str	r2, [sp, #16]
 800dd76:	9100      	str	r1, [sp, #0]
 800dd78:	e9cd 4802 	strd	r4, r8, [sp, #8]
 800dd7c:	4a1e      	ldr	r2, [pc, #120]	@ (800ddf8 <generate_service_types+0xc0>)
 800dd7e:	f8cd a004 	str.w	sl, [sp, #4]
 800dd82:	4631      	mov	r1, r6
 800dd84:	f00f f806 	bl	801cd94 <sniprintf>
 800dd88:	2800      	cmp	r0, #0
 800dd8a:	db20      	blt.n	800ddce <generate_service_types+0x96>
 800dd8c:	2300      	movs	r3, #0
 800dd8e:	703b      	strb	r3, [r7, #0]
 800dd90:	f8d9 3000 	ldr.w	r3, [r9]
 800dd94:	42b0      	cmp	r0, r6
 800dd96:	bfac      	ite	ge
 800dd98:	2500      	movge	r5, #0
 800dd9a:	2501      	movlt	r5, #1
 800dd9c:	b1f3      	cbz	r3, 800dddc <generate_service_types+0xa4>
 800dd9e:	4a17      	ldr	r2, [pc, #92]	@ (800ddfc <generate_service_types+0xc4>)
 800dda0:	9405      	str	r4, [sp, #20]
 800dda2:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800dda6:	9200      	str	r2, [sp, #0]
 800dda8:	e9cd 8103 	strd	r8, r1, [sp, #12]
 800ddac:	4a12      	ldr	r2, [pc, #72]	@ (800ddf8 <generate_service_types+0xc0>)
 800ddae:	e9cd a401 	strd	sl, r4, [sp, #4]
 800ddb2:	4638      	mov	r0, r7
 800ddb4:	4631      	mov	r1, r6
 800ddb6:	f00e ffed 	bl	801cd94 <sniprintf>
 800ddba:	1e02      	subs	r2, r0, #0
 800ddbc:	db11      	blt.n	800dde2 <generate_service_types+0xaa>
 800ddbe:	42b2      	cmp	r2, r6
 800ddc0:	bfac      	ite	ge
 800ddc2:	2000      	movge	r0, #0
 800ddc4:	f005 0001 	andlt.w	r0, r5, #1
 800ddc8:	b006      	add	sp, #24
 800ddca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ddce:	2300      	movs	r3, #0
 800ddd0:	703b      	strb	r3, [r7, #0]
 800ddd2:	f8d9 3000 	ldr.w	r3, [r9]
 800ddd6:	2500      	movs	r5, #0
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d1e0      	bne.n	800dd9e <generate_service_types+0x66>
 800dddc:	4b08      	ldr	r3, [pc, #32]	@ (800de00 <generate_service_types+0xc8>)
 800ddde:	461a      	mov	r2, r3
 800dde0:	e7de      	b.n	800dda0 <generate_service_types+0x68>
 800dde2:	2000      	movs	r0, #0
 800dde4:	b006      	add	sp, #24
 800dde6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ddea:	4b05      	ldr	r3, [pc, #20]	@ (800de00 <generate_service_types+0xc8>)
 800ddec:	f8df 800c 	ldr.w	r8, [pc, #12]	@ 800ddfc <generate_service_types+0xc4>
 800ddf0:	4619      	mov	r1, r3
 800ddf2:	e7b9      	b.n	800dd68 <generate_service_types+0x30>
 800ddf4:	0801ed80 	.word	0x0801ed80
 800ddf8:	0801ed70 	.word	0x0801ed70
 800ddfc:	0801ed6c 	.word	0x0801ed6c
 800de00:	0801f8c0 	.word	0x0801f8c0
 800de04:	0801ed84 	.word	0x0801ed84

0800de08 <generate_type_name>:
 800de08:	b530      	push	{r4, r5, lr}
 800de0a:	2300      	movs	r3, #0
 800de0c:	700b      	strb	r3, [r1, #0]
 800de0e:	6803      	ldr	r3, [r0, #0]
 800de10:	b087      	sub	sp, #28
 800de12:	4614      	mov	r4, r2
 800de14:	b1d3      	cbz	r3, 800de4c <generate_type_name+0x44>
 800de16:	4a0f      	ldr	r2, [pc, #60]	@ (800de54 <generate_type_name+0x4c>)
 800de18:	4615      	mov	r5, r2
 800de1a:	9203      	str	r2, [sp, #12]
 800de1c:	9500      	str	r5, [sp, #0]
 800de1e:	6842      	ldr	r2, [r0, #4]
 800de20:	480d      	ldr	r0, [pc, #52]	@ (800de58 <generate_type_name+0x50>)
 800de22:	9001      	str	r0, [sp, #4]
 800de24:	4608      	mov	r0, r1
 800de26:	490d      	ldr	r1, [pc, #52]	@ (800de5c <generate_type_name+0x54>)
 800de28:	9204      	str	r2, [sp, #16]
 800de2a:	9105      	str	r1, [sp, #20]
 800de2c:	9102      	str	r1, [sp, #8]
 800de2e:	4a0c      	ldr	r2, [pc, #48]	@ (800de60 <generate_type_name+0x58>)
 800de30:	4621      	mov	r1, r4
 800de32:	f00e ffaf 	bl	801cd94 <sniprintf>
 800de36:	2800      	cmp	r0, #0
 800de38:	db05      	blt.n	800de46 <generate_type_name+0x3e>
 800de3a:	4284      	cmp	r4, r0
 800de3c:	bfd4      	ite	le
 800de3e:	2000      	movle	r0, #0
 800de40:	2001      	movgt	r0, #1
 800de42:	b007      	add	sp, #28
 800de44:	bd30      	pop	{r4, r5, pc}
 800de46:	2000      	movs	r0, #0
 800de48:	b007      	add	sp, #28
 800de4a:	bd30      	pop	{r4, r5, pc}
 800de4c:	4b05      	ldr	r3, [pc, #20]	@ (800de64 <generate_type_name+0x5c>)
 800de4e:	4a01      	ldr	r2, [pc, #4]	@ (800de54 <generate_type_name+0x4c>)
 800de50:	461d      	mov	r5, r3
 800de52:	e7e2      	b.n	800de1a <generate_type_name+0x12>
 800de54:	0801ed6c 	.word	0x0801ed6c
 800de58:	0801ed84 	.word	0x0801ed84
 800de5c:	0801ed80 	.word	0x0801ed80
 800de60:	0801ed70 	.word	0x0801ed70
 800de64:	0801f8c0 	.word	0x0801f8c0

0800de68 <generate_topic_name>:
 800de68:	b510      	push	{r4, lr}
 800de6a:	b082      	sub	sp, #8
 800de6c:	4614      	mov	r4, r2
 800de6e:	9000      	str	r0, [sp, #0]
 800de70:	4b08      	ldr	r3, [pc, #32]	@ (800de94 <generate_topic_name+0x2c>)
 800de72:	4a09      	ldr	r2, [pc, #36]	@ (800de98 <generate_topic_name+0x30>)
 800de74:	4608      	mov	r0, r1
 800de76:	4621      	mov	r1, r4
 800de78:	f00e ff8c 	bl	801cd94 <sniprintf>
 800de7c:	2800      	cmp	r0, #0
 800de7e:	db05      	blt.n	800de8c <generate_topic_name+0x24>
 800de80:	4284      	cmp	r4, r0
 800de82:	bfd4      	ite	le
 800de84:	2000      	movle	r0, #0
 800de86:	2001      	movgt	r0, #1
 800de88:	b002      	add	sp, #8
 800de8a:	bd10      	pop	{r4, pc}
 800de8c:	2000      	movs	r0, #0
 800de8e:	b002      	add	sp, #8
 800de90:	bd10      	pop	{r4, pc}
 800de92:	bf00      	nop
 800de94:	0801fd2c 	.word	0x0801fd2c
 800de98:	0801ed88 	.word	0x0801ed88

0800de9c <is_uxrce_rmw_identifier_valid>:
 800de9c:	b510      	push	{r4, lr}
 800de9e:	4604      	mov	r4, r0
 800dea0:	b140      	cbz	r0, 800deb4 <is_uxrce_rmw_identifier_valid+0x18>
 800dea2:	f00a f87b 	bl	8017f9c <rmw_get_implementation_identifier>
 800dea6:	4601      	mov	r1, r0
 800dea8:	4620      	mov	r0, r4
 800deaa:	f7f2 f9a9 	bl	8000200 <strcmp>
 800deae:	fab0 f080 	clz	r0, r0
 800deb2:	0940      	lsrs	r0, r0, #5
 800deb4:	bd10      	pop	{r4, pc}
 800deb6:	bf00      	nop

0800deb8 <get_message_typesupport_handle>:
 800deb8:	6883      	ldr	r3, [r0, #8]
 800deba:	4718      	bx	r3

0800debc <get_message_typesupport_handle_function>:
 800debc:	b510      	push	{r4, lr}
 800debe:	4604      	mov	r4, r0
 800dec0:	6800      	ldr	r0, [r0, #0]
 800dec2:	f7f2 f99d 	bl	8000200 <strcmp>
 800dec6:	2800      	cmp	r0, #0
 800dec8:	bf0c      	ite	eq
 800deca:	4620      	moveq	r0, r4
 800decc:	2000      	movne	r0, #0
 800dece:	bd10      	pop	{r4, pc}

0800ded0 <get_service_typesupport_handle>:
 800ded0:	6883      	ldr	r3, [r0, #8]
 800ded2:	4718      	bx	r3

0800ded4 <get_service_typesupport_handle_function>:
 800ded4:	b510      	push	{r4, lr}
 800ded6:	4604      	mov	r4, r0
 800ded8:	6800      	ldr	r0, [r0, #0]
 800deda:	f7f2 f991 	bl	8000200 <strcmp>
 800dede:	2800      	cmp	r0, #0
 800dee0:	bf0c      	ite	eq
 800dee2:	4620      	moveq	r0, r4
 800dee4:	2000      	movne	r0, #0
 800dee6:	bd10      	pop	{r4, pc}

0800dee8 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 800dee8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800deec:	6805      	ldr	r5, [r0, #0]
 800deee:	4604      	mov	r4, r0
 800def0:	4628      	mov	r0, r5
 800def2:	460e      	mov	r6, r1
 800def4:	f7f2 f984 	bl	8000200 <strcmp>
 800def8:	b308      	cbz	r0, 800df3e <rosidl_typesupport_c__get_message_typesupport_handle_function+0x56>
 800defa:	4b12      	ldr	r3, [pc, #72]	@ (800df44 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x5c>)
 800defc:	4628      	mov	r0, r5
 800defe:	6819      	ldr	r1, [r3, #0]
 800df00:	f7f2 f97e 	bl	8000200 <strcmp>
 800df04:	4605      	mov	r5, r0
 800df06:	b980      	cbnz	r0, 800df2a <rosidl_typesupport_c__get_message_typesupport_handle_function+0x42>
 800df08:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800df0c:	f8d8 4000 	ldr.w	r4, [r8]
 800df10:	b1ac      	cbz	r4, 800df3e <rosidl_typesupport_c__get_message_typesupport_handle_function+0x56>
 800df12:	f8d8 7008 	ldr.w	r7, [r8, #8]
 800df16:	3f04      	subs	r7, #4
 800df18:	f857 0f04 	ldr.w	r0, [r7, #4]!
 800df1c:	4631      	mov	r1, r6
 800df1e:	f7f2 f96f 	bl	8000200 <strcmp>
 800df22:	b128      	cbz	r0, 800df30 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x48>
 800df24:	3501      	adds	r5, #1
 800df26:	42a5      	cmp	r5, r4
 800df28:	d1f6      	bne.n	800df18 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x30>
 800df2a:	2000      	movs	r0, #0
 800df2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df30:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800df34:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800df38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800df3c:	4718      	bx	r3
 800df3e:	4620      	mov	r0, r4
 800df40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df44:	2000059c 	.word	0x2000059c

0800df48 <rosidl_typesupport_c__get_service_typesupport_handle_function>:
 800df48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df4c:	6805      	ldr	r5, [r0, #0]
 800df4e:	4604      	mov	r4, r0
 800df50:	4628      	mov	r0, r5
 800df52:	460e      	mov	r6, r1
 800df54:	f7f2 f954 	bl	8000200 <strcmp>
 800df58:	b308      	cbz	r0, 800df9e <rosidl_typesupport_c__get_service_typesupport_handle_function+0x56>
 800df5a:	4b12      	ldr	r3, [pc, #72]	@ (800dfa4 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x5c>)
 800df5c:	4628      	mov	r0, r5
 800df5e:	6819      	ldr	r1, [r3, #0]
 800df60:	f7f2 f94e 	bl	8000200 <strcmp>
 800df64:	4605      	mov	r5, r0
 800df66:	b980      	cbnz	r0, 800df8a <rosidl_typesupport_c__get_service_typesupport_handle_function+0x42>
 800df68:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800df6c:	f8d8 4000 	ldr.w	r4, [r8]
 800df70:	b1ac      	cbz	r4, 800df9e <rosidl_typesupport_c__get_service_typesupport_handle_function+0x56>
 800df72:	f8d8 7008 	ldr.w	r7, [r8, #8]
 800df76:	3f04      	subs	r7, #4
 800df78:	f857 0f04 	ldr.w	r0, [r7, #4]!
 800df7c:	4631      	mov	r1, r6
 800df7e:	f7f2 f93f 	bl	8000200 <strcmp>
 800df82:	b128      	cbz	r0, 800df90 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x48>
 800df84:	3501      	adds	r5, #1
 800df86:	42a5      	cmp	r5, r4
 800df88:	d1f6      	bne.n	800df78 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x30>
 800df8a:	2000      	movs	r0, #0
 800df8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df90:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800df94:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800df98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800df9c:	4718      	bx	r3
 800df9e:	4620      	mov	r0, r4
 800dfa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dfa4:	2000059c 	.word	0x2000059c

0800dfa8 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 800dfa8:	4b04      	ldr	r3, [pc, #16]	@ (800dfbc <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x14>)
 800dfaa:	681a      	ldr	r2, [r3, #0]
 800dfac:	b10a      	cbz	r2, 800dfb2 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0xa>
 800dfae:	4803      	ldr	r0, [pc, #12]	@ (800dfbc <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x14>)
 800dfb0:	4770      	bx	lr
 800dfb2:	4a03      	ldr	r2, [pc, #12]	@ (800dfc0 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x18>)
 800dfb4:	4801      	ldr	r0, [pc, #4]	@ (800dfbc <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x14>)
 800dfb6:	6812      	ldr	r2, [r2, #0]
 800dfb8:	601a      	str	r2, [r3, #0]
 800dfba:	4770      	bx	lr
 800dfbc:	200005a4 	.word	0x200005a4
 800dfc0:	2000059c 	.word	0x2000059c

0800dfc4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 800dfc4:	4a02      	ldr	r2, [pc, #8]	@ (800dfd0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0xc>)
 800dfc6:	4b03      	ldr	r3, [pc, #12]	@ (800dfd4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x10>)
 800dfc8:	6812      	ldr	r2, [r2, #0]
 800dfca:	601a      	str	r2, [r3, #0]
 800dfcc:	4770      	bx	lr
 800dfce:	bf00      	nop
 800dfd0:	2000059c 	.word	0x2000059c
 800dfd4:	200005a4 	.word	0x200005a4

0800dfd8 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__size_function__Imu__orientation_covariance>:
 800dfd8:	2009      	movs	r0, #9
 800dfda:	4770      	bx	lr

0800dfdc <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_const_function__Imu__orientation_covariance>:
 800dfdc:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800dfe0:	4770      	bx	lr
 800dfe2:	bf00      	nop

0800dfe4 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__fetch_function__Imu__orientation_covariance>:
 800dfe4:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800dfe8:	e9d0 0100 	ldrd	r0, r1, [r0]
 800dfec:	e9c2 0100 	strd	r0, r1, [r2]
 800dff0:	4770      	bx	lr
 800dff2:	bf00      	nop

0800dff4 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__assign_function__Imu__orientation_covariance>:
 800dff4:	e9d2 2300 	ldrd	r2, r3, [r2]
 800dff8:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800dffc:	e9c0 2300 	strd	r2, r3, [r0]
 800e000:	4770      	bx	lr
 800e002:	bf00      	nop

0800e004 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__Imu_init_function>:
 800e004:	f00b ba2a 	b.w	801945c <sensor_msgs__msg__Imu__init>

0800e008 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__Imu_fini_function>:
 800e008:	f00b ba74 	b.w	80194f4 <sensor_msgs__msg__Imu__fini>

0800e00c <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__size_function__Imu__angular_velocity_covariance>:
 800e00c:	2009      	movs	r0, #9
 800e00e:	4770      	bx	lr

0800e010 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__size_function__Imu__linear_acceleration_covariance>:
 800e010:	2009      	movs	r0, #9
 800e012:	4770      	bx	lr

0800e014 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_function__Imu__orientation_covariance>:
 800e014:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800e018:	4770      	bx	lr
 800e01a:	bf00      	nop

0800e01c <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_const_function__Imu__linear_acceleration_covariance>:
 800e01c:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800e020:	4770      	bx	lr
 800e022:	bf00      	nop

0800e024 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_function__Imu__linear_acceleration_covariance>:
 800e024:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800e028:	4770      	bx	lr
 800e02a:	bf00      	nop

0800e02c <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_const_function__Imu__angular_velocity_covariance>:
 800e02c:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800e030:	4770      	bx	lr
 800e032:	bf00      	nop

0800e034 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_function__Imu__angular_velocity_covariance>:
 800e034:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800e038:	4770      	bx	lr
 800e03a:	bf00      	nop

0800e03c <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__fetch_function__Imu__linear_acceleration_covariance>:
 800e03c:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800e040:	e9d0 0100 	ldrd	r0, r1, [r0]
 800e044:	e9c2 0100 	strd	r0, r1, [r2]
 800e048:	4770      	bx	lr
 800e04a:	bf00      	nop

0800e04c <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__assign_function__Imu__linear_acceleration_covariance>:
 800e04c:	e9d2 2300 	ldrd	r2, r3, [r2]
 800e050:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800e054:	e9c0 2300 	strd	r2, r3, [r0]
 800e058:	4770      	bx	lr
 800e05a:	bf00      	nop

0800e05c <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__fetch_function__Imu__angular_velocity_covariance>:
 800e05c:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800e060:	e9d0 0100 	ldrd	r0, r1, [r0]
 800e064:	e9c2 0100 	strd	r0, r1, [r2]
 800e068:	4770      	bx	lr
 800e06a:	bf00      	nop

0800e06c <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__assign_function__Imu__angular_velocity_covariance>:
 800e06c:	e9d2 2300 	ldrd	r2, r3, [r2]
 800e070:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800e074:	e9c0 2300 	strd	r2, r3, [r0]
 800e078:	4770      	bx	lr
 800e07a:	bf00      	nop

0800e07c <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 800e07c:	b510      	push	{r4, lr}
 800e07e:	f000 f9eb 	bl	800e458 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 800e082:	4c0b      	ldr	r4, [pc, #44]	@ (800e0b0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x34>)
 800e084:	60e0      	str	r0, [r4, #12]
 800e086:	f000 fde5 	bl	800ec54 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 800e08a:	64a0      	str	r0, [r4, #72]	@ 0x48
 800e08c:	f000 fdf4 	bl	800ec78 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800e090:	f8c4 00c0 	str.w	r0, [r4, #192]	@ 0xc0
 800e094:	f000 fdf0 	bl	800ec78 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800e098:	4b06      	ldr	r3, [pc, #24]	@ (800e0b4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x38>)
 800e09a:	f8c4 0138 	str.w	r0, [r4, #312]	@ 0x138
 800e09e:	681a      	ldr	r2, [r3, #0]
 800e0a0:	b10a      	cbz	r2, 800e0a6 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x2a>
 800e0a2:	4804      	ldr	r0, [pc, #16]	@ (800e0b4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x38>)
 800e0a4:	bd10      	pop	{r4, pc}
 800e0a6:	4a04      	ldr	r2, [pc, #16]	@ (800e0b8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x3c>)
 800e0a8:	4802      	ldr	r0, [pc, #8]	@ (800e0b4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x38>)
 800e0aa:	6812      	ldr	r2, [r2, #0]
 800e0ac:	601a      	str	r2, [r3, #0]
 800e0ae:	bd10      	pop	{r4, pc}
 800e0b0:	200005dc 	.word	0x200005dc
 800e0b4:	200005c4 	.word	0x200005c4
 800e0b8:	200005a0 	.word	0x200005a0

0800e0bc <get_serialized_size_sensor_msgs__msg__Imu.part.0>:
 800e0bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0be:	4607      	mov	r7, r0
 800e0c0:	460e      	mov	r6, r1
 800e0c2:	f000 f9ed 	bl	800e4a0 <get_serialized_size_std_msgs__msg__Header>
 800e0c6:	1834      	adds	r4, r6, r0
 800e0c8:	4621      	mov	r1, r4
 800e0ca:	f107 0018 	add.w	r0, r7, #24
 800e0ce:	f000 fde1 	bl	800ec94 <get_serialized_size_geometry_msgs__msg__Quaternion>
 800e0d2:	4404      	add	r4, r0
 800e0d4:	2108      	movs	r1, #8
 800e0d6:	4620      	mov	r0, r4
 800e0d8:	f003 f852 	bl	8011180 <ucdr_alignment>
 800e0dc:	f100 0548 	add.w	r5, r0, #72	@ 0x48
 800e0e0:	4425      	add	r5, r4
 800e0e2:	4629      	mov	r1, r5
 800e0e4:	f107 0080 	add.w	r0, r7, #128	@ 0x80
 800e0e8:	f000 fe8c 	bl	800ee04 <get_serialized_size_geometry_msgs__msg__Vector3>
 800e0ec:	4405      	add	r5, r0
 800e0ee:	2108      	movs	r1, #8
 800e0f0:	4628      	mov	r0, r5
 800e0f2:	f003 f845 	bl	8011180 <ucdr_alignment>
 800e0f6:	f100 0448 	add.w	r4, r0, #72	@ 0x48
 800e0fa:	442c      	add	r4, r5
 800e0fc:	4621      	mov	r1, r4
 800e0fe:	f107 00e0 	add.w	r0, r7, #224	@ 0xe0
 800e102:	f000 fe7f 	bl	800ee04 <get_serialized_size_geometry_msgs__msg__Vector3>
 800e106:	4404      	add	r4, r0
 800e108:	2108      	movs	r1, #8
 800e10a:	4620      	mov	r0, r4
 800e10c:	f003 f838 	bl	8011180 <ucdr_alignment>
 800e110:	f1c6 0648 	rsb	r6, r6, #72	@ 0x48
 800e114:	4430      	add	r0, r6
 800e116:	4420      	add	r0, r4
 800e118:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e11a:	bf00      	nop

0800e11c <get_serialized_size_sensor_msgs__msg__Imu>:
 800e11c:	b108      	cbz	r0, 800e122 <get_serialized_size_sensor_msgs__msg__Imu+0x6>
 800e11e:	f7ff bfcd 	b.w	800e0bc <get_serialized_size_sensor_msgs__msg__Imu.part.0>
 800e122:	4770      	bx	lr

0800e124 <_Imu__get_serialized_size>:
 800e124:	b110      	cbz	r0, 800e12c <_Imu__get_serialized_size+0x8>
 800e126:	2100      	movs	r1, #0
 800e128:	f7ff bfc8 	b.w	800e0bc <get_serialized_size_sensor_msgs__msg__Imu.part.0>
 800e12c:	4770      	bx	lr
 800e12e:	bf00      	nop

0800e130 <_Imu__cdr_deserialize>:
 800e130:	b538      	push	{r3, r4, r5, lr}
 800e132:	460c      	mov	r4, r1
 800e134:	b399      	cbz	r1, 800e19e <_Imu__cdr_deserialize+0x6e>
 800e136:	4605      	mov	r5, r0
 800e138:	f000 fa34 	bl	800e5a4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800e13c:	6843      	ldr	r3, [r0, #4]
 800e13e:	4621      	mov	r1, r4
 800e140:	68db      	ldr	r3, [r3, #12]
 800e142:	4628      	mov	r0, r5
 800e144:	4798      	blx	r3
 800e146:	f000 fe59 	bl	800edfc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 800e14a:	6843      	ldr	r3, [r0, #4]
 800e14c:	f104 0118 	add.w	r1, r4, #24
 800e150:	68db      	ldr	r3, [r3, #12]
 800e152:	4628      	mov	r0, r5
 800e154:	4798      	blx	r3
 800e156:	2209      	movs	r2, #9
 800e158:	f104 0138 	add.w	r1, r4, #56	@ 0x38
 800e15c:	4628      	mov	r0, r5
 800e15e:	f001 fa23 	bl	800f5a8 <ucdr_deserialize_array_double>
 800e162:	f000 fedb 	bl	800ef1c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800e166:	6843      	ldr	r3, [r0, #4]
 800e168:	f104 0180 	add.w	r1, r4, #128	@ 0x80
 800e16c:	68db      	ldr	r3, [r3, #12]
 800e16e:	4628      	mov	r0, r5
 800e170:	4798      	blx	r3
 800e172:	2209      	movs	r2, #9
 800e174:	f104 0198 	add.w	r1, r4, #152	@ 0x98
 800e178:	4628      	mov	r0, r5
 800e17a:	f001 fa15 	bl	800f5a8 <ucdr_deserialize_array_double>
 800e17e:	f000 fecd 	bl	800ef1c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800e182:	6843      	ldr	r3, [r0, #4]
 800e184:	f104 01e0 	add.w	r1, r4, #224	@ 0xe0
 800e188:	68db      	ldr	r3, [r3, #12]
 800e18a:	4628      	mov	r0, r5
 800e18c:	4798      	blx	r3
 800e18e:	f104 01f8 	add.w	r1, r4, #248	@ 0xf8
 800e192:	4628      	mov	r0, r5
 800e194:	2209      	movs	r2, #9
 800e196:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e19a:	f001 ba05 	b.w	800f5a8 <ucdr_deserialize_array_double>
 800e19e:	4608      	mov	r0, r1
 800e1a0:	bd38      	pop	{r3, r4, r5, pc}
 800e1a2:	bf00      	nop

0800e1a4 <_Imu__cdr_serialize>:
 800e1a4:	2800      	cmp	r0, #0
 800e1a6:	d035      	beq.n	800e214 <_Imu__cdr_serialize+0x70>
 800e1a8:	b538      	push	{r3, r4, r5, lr}
 800e1aa:	4604      	mov	r4, r0
 800e1ac:	460d      	mov	r5, r1
 800e1ae:	f000 f9f9 	bl	800e5a4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800e1b2:	6843      	ldr	r3, [r0, #4]
 800e1b4:	4629      	mov	r1, r5
 800e1b6:	689b      	ldr	r3, [r3, #8]
 800e1b8:	4620      	mov	r0, r4
 800e1ba:	4798      	blx	r3
 800e1bc:	f000 fe1e 	bl	800edfc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 800e1c0:	6843      	ldr	r3, [r0, #4]
 800e1c2:	4629      	mov	r1, r5
 800e1c4:	689b      	ldr	r3, [r3, #8]
 800e1c6:	f104 0018 	add.w	r0, r4, #24
 800e1ca:	4798      	blx	r3
 800e1cc:	2209      	movs	r2, #9
 800e1ce:	f104 0138 	add.w	r1, r4, #56	@ 0x38
 800e1d2:	4628      	mov	r0, r5
 800e1d4:	f001 f994 	bl	800f500 <ucdr_serialize_array_double>
 800e1d8:	f000 fea0 	bl	800ef1c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800e1dc:	6843      	ldr	r3, [r0, #4]
 800e1de:	4629      	mov	r1, r5
 800e1e0:	689b      	ldr	r3, [r3, #8]
 800e1e2:	f104 0080 	add.w	r0, r4, #128	@ 0x80
 800e1e6:	4798      	blx	r3
 800e1e8:	2209      	movs	r2, #9
 800e1ea:	f104 0198 	add.w	r1, r4, #152	@ 0x98
 800e1ee:	4628      	mov	r0, r5
 800e1f0:	f001 f986 	bl	800f500 <ucdr_serialize_array_double>
 800e1f4:	f000 fe92 	bl	800ef1c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800e1f8:	6843      	ldr	r3, [r0, #4]
 800e1fa:	4629      	mov	r1, r5
 800e1fc:	689b      	ldr	r3, [r3, #8]
 800e1fe:	f104 00e0 	add.w	r0, r4, #224	@ 0xe0
 800e202:	4798      	blx	r3
 800e204:	f104 01f8 	add.w	r1, r4, #248	@ 0xf8
 800e208:	4628      	mov	r0, r5
 800e20a:	2209      	movs	r2, #9
 800e20c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e210:	f001 b976 	b.w	800f500 <ucdr_serialize_array_double>
 800e214:	4770      	bx	lr
 800e216:	bf00      	nop

0800e218 <max_serialized_size_sensor_msgs__msg__Imu>:
 800e218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e21a:	2301      	movs	r3, #1
 800e21c:	7003      	strb	r3, [r0, #0]
 800e21e:	4607      	mov	r7, r0
 800e220:	460e      	mov	r6, r1
 800e222:	f000 f9b5 	bl	800e590 <max_serialized_size_std_msgs__msg__Header>
 800e226:	1834      	adds	r4, r6, r0
 800e228:	4621      	mov	r1, r4
 800e22a:	4638      	mov	r0, r7
 800e22c:	f000 fdc4 	bl	800edb8 <max_serialized_size_geometry_msgs__msg__Quaternion>
 800e230:	4404      	add	r4, r0
 800e232:	2108      	movs	r1, #8
 800e234:	4620      	mov	r0, r4
 800e236:	f002 ffa3 	bl	8011180 <ucdr_alignment>
 800e23a:	f100 0548 	add.w	r5, r0, #72	@ 0x48
 800e23e:	4425      	add	r5, r4
 800e240:	4629      	mov	r1, r5
 800e242:	4638      	mov	r0, r7
 800e244:	f000 fe50 	bl	800eee8 <max_serialized_size_geometry_msgs__msg__Vector3>
 800e248:	4405      	add	r5, r0
 800e24a:	2108      	movs	r1, #8
 800e24c:	4628      	mov	r0, r5
 800e24e:	f002 ff97 	bl	8011180 <ucdr_alignment>
 800e252:	f100 0448 	add.w	r4, r0, #72	@ 0x48
 800e256:	442c      	add	r4, r5
 800e258:	4621      	mov	r1, r4
 800e25a:	4638      	mov	r0, r7
 800e25c:	f000 fe44 	bl	800eee8 <max_serialized_size_geometry_msgs__msg__Vector3>
 800e260:	4404      	add	r4, r0
 800e262:	2108      	movs	r1, #8
 800e264:	4620      	mov	r0, r4
 800e266:	f002 ff8b 	bl	8011180 <ucdr_alignment>
 800e26a:	f1c6 0648 	rsb	r6, r6, #72	@ 0x48
 800e26e:	4430      	add	r0, r6
 800e270:	4420      	add	r0, r4
 800e272:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e274 <_Imu__max_serialized_size>:
 800e274:	b500      	push	{lr}
 800e276:	b083      	sub	sp, #12
 800e278:	2100      	movs	r1, #0
 800e27a:	f10d 0007 	add.w	r0, sp, #7
 800e27e:	f7ff ffcb 	bl	800e218 <max_serialized_size_sensor_msgs__msg__Imu>
 800e282:	b003      	add	sp, #12
 800e284:	f85d fb04 	ldr.w	pc, [sp], #4

0800e288 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 800e288:	4800      	ldr	r0, [pc, #0]	@ (800e28c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x4>)
 800e28a:	4770      	bx	lr
 800e28c:	20000780 	.word	0x20000780

0800e290 <service_msgs__msg__ServiceEventInfo__rosidl_typesupport_introspection_c__size_function__ServiceEventInfo__client_gid>:
 800e290:	2010      	movs	r0, #16
 800e292:	4770      	bx	lr

0800e294 <service_msgs__msg__ServiceEventInfo__rosidl_typesupport_introspection_c__get_const_function__ServiceEventInfo__client_gid>:
 800e294:	4408      	add	r0, r1
 800e296:	4770      	bx	lr

0800e298 <service_msgs__msg__ServiceEventInfo__rosidl_typesupport_introspection_c__fetch_function__ServiceEventInfo__client_gid>:
 800e298:	5c43      	ldrb	r3, [r0, r1]
 800e29a:	7013      	strb	r3, [r2, #0]
 800e29c:	4770      	bx	lr
 800e29e:	bf00      	nop

0800e2a0 <service_msgs__msg__ServiceEventInfo__rosidl_typesupport_introspection_c__assign_function__ServiceEventInfo__client_gid>:
 800e2a0:	7813      	ldrb	r3, [r2, #0]
 800e2a2:	5443      	strb	r3, [r0, r1]
 800e2a4:	4770      	bx	lr
 800e2a6:	bf00      	nop

0800e2a8 <service_msgs__msg__ServiceEventInfo__rosidl_typesupport_introspection_c__ServiceEventInfo_init_function>:
 800e2a8:	f00b b980 	b.w	80195ac <service_msgs__msg__ServiceEventInfo__init>

0800e2ac <service_msgs__msg__ServiceEventInfo__rosidl_typesupport_introspection_c__ServiceEventInfo_fini_function>:
 800e2ac:	f00b b98e 	b.w	80195cc <service_msgs__msg__ServiceEventInfo__fini>

0800e2b0 <service_msgs__msg__ServiceEventInfo__rosidl_typesupport_introspection_c__get_function__ServiceEventInfo__client_gid>:
 800e2b0:	4408      	add	r0, r1
 800e2b2:	4770      	bx	lr

0800e2b4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>:
 800e2b4:	b508      	push	{r3, lr}
 800e2b6:	f000 fc53 	bl	800eb60 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800e2ba:	4b06      	ldr	r3, [pc, #24]	@ (800e2d4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo+0x20>)
 800e2bc:	4906      	ldr	r1, [pc, #24]	@ (800e2d8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo+0x24>)
 800e2be:	681a      	ldr	r2, [r3, #0]
 800e2c0:	6488      	str	r0, [r1, #72]	@ 0x48
 800e2c2:	b10a      	cbz	r2, 800e2c8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo+0x14>
 800e2c4:	4803      	ldr	r0, [pc, #12]	@ (800e2d4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo+0x20>)
 800e2c6:	bd08      	pop	{r3, pc}
 800e2c8:	4a04      	ldr	r2, [pc, #16]	@ (800e2dc <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo+0x28>)
 800e2ca:	4802      	ldr	r0, [pc, #8]	@ (800e2d4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo+0x20>)
 800e2cc:	6812      	ldr	r2, [r2, #0]
 800e2ce:	601a      	str	r2, [r3, #0]
 800e2d0:	bd08      	pop	{r3, pc}
 800e2d2:	bf00      	nop
 800e2d4:	200007b4 	.word	0x200007b4
 800e2d8:	200007cc 	.word	0x200007cc
 800e2dc:	200005a0 	.word	0x200005a0

0800e2e0 <get_serialized_size_service_msgs__msg__ServiceEventInfo>:
 800e2e0:	b570      	push	{r4, r5, r6, lr}
 800e2e2:	4604      	mov	r4, r0
 800e2e4:	b1d0      	cbz	r0, 800e31c <get_serialized_size_service_msgs__msg__ServiceEventInfo+0x3c>
 800e2e6:	460d      	mov	r5, r1
 800e2e8:	4628      	mov	r0, r5
 800e2ea:	2101      	movs	r1, #1
 800e2ec:	f002 ff48 	bl	8011180 <ucdr_alignment>
 800e2f0:	1c6e      	adds	r6, r5, #1
 800e2f2:	4406      	add	r6, r0
 800e2f4:	4631      	mov	r1, r6
 800e2f6:	1d20      	adds	r0, r4, #4
 800e2f8:	f000 fc40 	bl	800eb7c <get_serialized_size_builtin_interfaces__msg__Time>
 800e2fc:	4406      	add	r6, r0
 800e2fe:	2101      	movs	r1, #1
 800e300:	4630      	mov	r0, r6
 800e302:	f002 ff3d 	bl	8011180 <ucdr_alignment>
 800e306:	f100 0410 	add.w	r4, r0, #16
 800e30a:	4434      	add	r4, r6
 800e30c:	2108      	movs	r1, #8
 800e30e:	4620      	mov	r0, r4
 800e310:	f002 ff36 	bl	8011180 <ucdr_alignment>
 800e314:	f1c5 0508 	rsb	r5, r5, #8
 800e318:	4405      	add	r5, r0
 800e31a:	1928      	adds	r0, r5, r4
 800e31c:	bd70      	pop	{r4, r5, r6, pc}
 800e31e:	bf00      	nop

0800e320 <_ServiceEventInfo__cdr_deserialize>:
 800e320:	b538      	push	{r3, r4, r5, lr}
 800e322:	460c      	mov	r4, r1
 800e324:	b1b1      	cbz	r1, 800e354 <_ServiceEventInfo__cdr_deserialize+0x34>
 800e326:	4605      	mov	r5, r0
 800e328:	f001 f9d8 	bl	800f6dc <ucdr_deserialize_uint8_t>
 800e32c:	f000 fc8a 	bl	800ec44 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800e330:	6843      	ldr	r3, [r0, #4]
 800e332:	1d21      	adds	r1, r4, #4
 800e334:	68db      	ldr	r3, [r3, #12]
 800e336:	4628      	mov	r0, r5
 800e338:	4798      	blx	r3
 800e33a:	f104 010c 	add.w	r1, r4, #12
 800e33e:	4628      	mov	r0, r5
 800e340:	2210      	movs	r2, #16
 800e342:	f000 ff23 	bl	800f18c <ucdr_deserialize_array_uint8_t>
 800e346:	f104 0120 	add.w	r1, r4, #32
 800e34a:	4628      	mov	r0, r5
 800e34c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e350:	f002 b9cc 	b.w	80106ec <ucdr_deserialize_int64_t>
 800e354:	4608      	mov	r0, r1
 800e356:	bd38      	pop	{r3, r4, r5, pc}

0800e358 <_ServiceEventInfo__cdr_serialize>:
 800e358:	b1e0      	cbz	r0, 800e394 <_ServiceEventInfo__cdr_serialize+0x3c>
 800e35a:	b570      	push	{r4, r5, r6, lr}
 800e35c:	4606      	mov	r6, r0
 800e35e:	460d      	mov	r5, r1
 800e360:	4604      	mov	r4, r0
 800e362:	4608      	mov	r0, r1
 800e364:	f816 1b04 	ldrb.w	r1, [r6], #4
 800e368:	f001 f9a2 	bl	800f6b0 <ucdr_serialize_uint8_t>
 800e36c:	f000 fc6a 	bl	800ec44 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800e370:	6843      	ldr	r3, [r0, #4]
 800e372:	4629      	mov	r1, r5
 800e374:	689b      	ldr	r3, [r3, #8]
 800e376:	4630      	mov	r0, r6
 800e378:	4798      	blx	r3
 800e37a:	2210      	movs	r2, #16
 800e37c:	f104 010c 	add.w	r1, r4, #12
 800e380:	4628      	mov	r0, r5
 800e382:	f000 fe9f 	bl	800f0c4 <ucdr_serialize_array_uint8_t>
 800e386:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 800e38a:	4628      	mov	r0, r5
 800e38c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e390:	f002 b8e4 	b.w	801055c <ucdr_serialize_int64_t>
 800e394:	4770      	bx	lr
 800e396:	bf00      	nop

0800e398 <_ServiceEventInfo__get_serialized_size>:
 800e398:	b538      	push	{r3, r4, r5, lr}
 800e39a:	4604      	mov	r4, r0
 800e39c:	b1a8      	cbz	r0, 800e3ca <_ServiceEventInfo__get_serialized_size+0x32>
 800e39e:	2101      	movs	r1, #1
 800e3a0:	2000      	movs	r0, #0
 800e3a2:	f002 feed 	bl	8011180 <ucdr_alignment>
 800e3a6:	1c45      	adds	r5, r0, #1
 800e3a8:	4629      	mov	r1, r5
 800e3aa:	1d20      	adds	r0, r4, #4
 800e3ac:	f000 fbe6 	bl	800eb7c <get_serialized_size_builtin_interfaces__msg__Time>
 800e3b0:	182c      	adds	r4, r5, r0
 800e3b2:	2101      	movs	r1, #1
 800e3b4:	4620      	mov	r0, r4
 800e3b6:	f002 fee3 	bl	8011180 <ucdr_alignment>
 800e3ba:	3010      	adds	r0, #16
 800e3bc:	4404      	add	r4, r0
 800e3be:	2108      	movs	r1, #8
 800e3c0:	4620      	mov	r0, r4
 800e3c2:	f002 fedd 	bl	8011180 <ucdr_alignment>
 800e3c6:	3008      	adds	r0, #8
 800e3c8:	4420      	add	r0, r4
 800e3ca:	bd38      	pop	{r3, r4, r5, pc}

0800e3cc <_ServiceEventInfo__max_serialized_size>:
 800e3cc:	b530      	push	{r4, r5, lr}
 800e3ce:	2501      	movs	r5, #1
 800e3d0:	b083      	sub	sp, #12
 800e3d2:	4629      	mov	r1, r5
 800e3d4:	2000      	movs	r0, #0
 800e3d6:	f88d 5007 	strb.w	r5, [sp, #7]
 800e3da:	f002 fed1 	bl	8011180 <ucdr_alignment>
 800e3de:	1944      	adds	r4, r0, r5
 800e3e0:	4621      	mov	r1, r4
 800e3e2:	f10d 0007 	add.w	r0, sp, #7
 800e3e6:	f000 fc19 	bl	800ec1c <max_serialized_size_builtin_interfaces__msg__Time>
 800e3ea:	4404      	add	r4, r0
 800e3ec:	4629      	mov	r1, r5
 800e3ee:	4620      	mov	r0, r4
 800e3f0:	f002 fec6 	bl	8011180 <ucdr_alignment>
 800e3f4:	3010      	adds	r0, #16
 800e3f6:	4404      	add	r4, r0
 800e3f8:	2108      	movs	r1, #8
 800e3fa:	4620      	mov	r0, r4
 800e3fc:	f002 fec0 	bl	8011180 <ucdr_alignment>
 800e400:	3008      	adds	r0, #8
 800e402:	4420      	add	r0, r4
 800e404:	b003      	add	sp, #12
 800e406:	bd30      	pop	{r4, r5, pc}

0800e408 <max_serialized_size_service_msgs__msg__ServiceEventInfo>:
 800e408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e40a:	2701      	movs	r7, #1
 800e40c:	460c      	mov	r4, r1
 800e40e:	4606      	mov	r6, r0
 800e410:	7007      	strb	r7, [r0, #0]
 800e412:	4639      	mov	r1, r7
 800e414:	4620      	mov	r0, r4
 800e416:	f002 feb3 	bl	8011180 <ucdr_alignment>
 800e41a:	19e3      	adds	r3, r4, r7
 800e41c:	18c5      	adds	r5, r0, r3
 800e41e:	4629      	mov	r1, r5
 800e420:	4630      	mov	r0, r6
 800e422:	f000 fbfb 	bl	800ec1c <max_serialized_size_builtin_interfaces__msg__Time>
 800e426:	4405      	add	r5, r0
 800e428:	4639      	mov	r1, r7
 800e42a:	4628      	mov	r0, r5
 800e42c:	f002 fea8 	bl	8011180 <ucdr_alignment>
 800e430:	3010      	adds	r0, #16
 800e432:	4405      	add	r5, r0
 800e434:	2108      	movs	r1, #8
 800e436:	4628      	mov	r0, r5
 800e438:	f002 fea2 	bl	8011180 <ucdr_alignment>
 800e43c:	f1c4 0408 	rsb	r4, r4, #8
 800e440:	4420      	add	r0, r4
 800e442:	4428      	add	r0, r5
 800e444:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e446:	bf00      	nop

0800e448 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>:
 800e448:	4800      	ldr	r0, [pc, #0]	@ (800e44c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo+0x4>)
 800e44a:	4770      	bx	lr
 800e44c:	200008bc 	.word	0x200008bc

0800e450 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_init_function>:
 800e450:	f00b b90a 	b.w	8019668 <std_msgs__msg__Header__init>

0800e454 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_fini_function>:
 800e454:	f00b b928 	b.w	80196a8 <std_msgs__msg__Header__fini>

0800e458 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>:
 800e458:	b508      	push	{r3, lr}
 800e45a:	f000 fb81 	bl	800eb60 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800e45e:	4b06      	ldr	r3, [pc, #24]	@ (800e478 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 800e460:	4906      	ldr	r1, [pc, #24]	@ (800e47c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x24>)
 800e462:	681a      	ldr	r2, [r3, #0]
 800e464:	60c8      	str	r0, [r1, #12]
 800e466:	b10a      	cbz	r2, 800e46c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x14>
 800e468:	4803      	ldr	r0, [pc, #12]	@ (800e478 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 800e46a:	bd08      	pop	{r3, pc}
 800e46c:	4a04      	ldr	r2, [pc, #16]	@ (800e480 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x28>)
 800e46e:	4802      	ldr	r0, [pc, #8]	@ (800e478 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 800e470:	6812      	ldr	r2, [r2, #0]
 800e472:	601a      	str	r2, [r3, #0]
 800e474:	bd08      	pop	{r3, pc}
 800e476:	bf00      	nop
 800e478:	200008f0 	.word	0x200008f0
 800e47c:	20000908 	.word	0x20000908
 800e480:	200005a0 	.word	0x200005a0

0800e484 <_Header__max_serialized_size>:
 800e484:	b500      	push	{lr}
 800e486:	b083      	sub	sp, #12
 800e488:	2301      	movs	r3, #1
 800e48a:	2100      	movs	r1, #0
 800e48c:	f10d 0007 	add.w	r0, sp, #7
 800e490:	f88d 3007 	strb.w	r3, [sp, #7]
 800e494:	f000 fbc2 	bl	800ec1c <max_serialized_size_builtin_interfaces__msg__Time>
 800e498:	b003      	add	sp, #12
 800e49a:	f85d fb04 	ldr.w	pc, [sp], #4
 800e49e:	bf00      	nop

0800e4a0 <get_serialized_size_std_msgs__msg__Header>:
 800e4a0:	b570      	push	{r4, r5, r6, lr}
 800e4a2:	4605      	mov	r5, r0
 800e4a4:	b168      	cbz	r0, 800e4c2 <get_serialized_size_std_msgs__msg__Header+0x22>
 800e4a6:	460c      	mov	r4, r1
 800e4a8:	f000 fb68 	bl	800eb7c <get_serialized_size_builtin_interfaces__msg__Time>
 800e4ac:	1826      	adds	r6, r4, r0
 800e4ae:	2104      	movs	r1, #4
 800e4b0:	4630      	mov	r0, r6
 800e4b2:	f002 fe65 	bl	8011180 <ucdr_alignment>
 800e4b6:	68eb      	ldr	r3, [r5, #12]
 800e4b8:	f1c4 0405 	rsb	r4, r4, #5
 800e4bc:	441c      	add	r4, r3
 800e4be:	4404      	add	r4, r0
 800e4c0:	19a0      	adds	r0, r4, r6
 800e4c2:	bd70      	pop	{r4, r5, r6, pc}

0800e4c4 <_Header__cdr_deserialize>:
 800e4c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e4c6:	460c      	mov	r4, r1
 800e4c8:	b083      	sub	sp, #12
 800e4ca:	b1e1      	cbz	r1, 800e506 <_Header__cdr_deserialize+0x42>
 800e4cc:	4606      	mov	r6, r0
 800e4ce:	f000 fbb9 	bl	800ec44 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800e4d2:	6843      	ldr	r3, [r0, #4]
 800e4d4:	4621      	mov	r1, r4
 800e4d6:	68db      	ldr	r3, [r3, #12]
 800e4d8:	4630      	mov	r0, r6
 800e4da:	4798      	blx	r3
 800e4dc:	6927      	ldr	r7, [r4, #16]
 800e4de:	68a1      	ldr	r1, [r4, #8]
 800e4e0:	ab01      	add	r3, sp, #4
 800e4e2:	463a      	mov	r2, r7
 800e4e4:	4630      	mov	r0, r6
 800e4e6:	f002 fec9 	bl	801127c <ucdr_deserialize_sequence_char>
 800e4ea:	9b01      	ldr	r3, [sp, #4]
 800e4ec:	4605      	mov	r5, r0
 800e4ee:	b920      	cbnz	r0, 800e4fa <_Header__cdr_deserialize+0x36>
 800e4f0:	429f      	cmp	r7, r3
 800e4f2:	d30c      	bcc.n	800e50e <_Header__cdr_deserialize+0x4a>
 800e4f4:	4628      	mov	r0, r5
 800e4f6:	b003      	add	sp, #12
 800e4f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e4fa:	b103      	cbz	r3, 800e4fe <_Header__cdr_deserialize+0x3a>
 800e4fc:	3b01      	subs	r3, #1
 800e4fe:	4628      	mov	r0, r5
 800e500:	60e3      	str	r3, [r4, #12]
 800e502:	b003      	add	sp, #12
 800e504:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e506:	460d      	mov	r5, r1
 800e508:	4628      	mov	r0, r5
 800e50a:	b003      	add	sp, #12
 800e50c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e50e:	2101      	movs	r1, #1
 800e510:	75b0      	strb	r0, [r6, #22]
 800e512:	7571      	strb	r1, [r6, #21]
 800e514:	60e0      	str	r0, [r4, #12]
 800e516:	4630      	mov	r0, r6
 800e518:	f002 fe48 	bl	80111ac <ucdr_align_to>
 800e51c:	4630      	mov	r0, r6
 800e51e:	9901      	ldr	r1, [sp, #4]
 800e520:	f002 fe7a 	bl	8011218 <ucdr_advance_buffer>
 800e524:	4628      	mov	r0, r5
 800e526:	b003      	add	sp, #12
 800e528:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e52a:	bf00      	nop

0800e52c <_Header__cdr_serialize>:
 800e52c:	b1f8      	cbz	r0, 800e56e <_Header__cdr_serialize+0x42>
 800e52e:	b570      	push	{r4, r5, r6, lr}
 800e530:	4604      	mov	r4, r0
 800e532:	460d      	mov	r5, r1
 800e534:	f000 fb86 	bl	800ec44 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800e538:	6843      	ldr	r3, [r0, #4]
 800e53a:	4629      	mov	r1, r5
 800e53c:	689b      	ldr	r3, [r3, #8]
 800e53e:	4620      	mov	r0, r4
 800e540:	4798      	blx	r3
 800e542:	68a6      	ldr	r6, [r4, #8]
 800e544:	b156      	cbz	r6, 800e55c <_Header__cdr_serialize+0x30>
 800e546:	4630      	mov	r0, r6
 800e548:	f7f1 feba 	bl	80002c0 <strlen>
 800e54c:	4631      	mov	r1, r6
 800e54e:	60e0      	str	r0, [r4, #12]
 800e550:	1c42      	adds	r2, r0, #1
 800e552:	4628      	mov	r0, r5
 800e554:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e558:	f002 be7e 	b.w	8011258 <ucdr_serialize_sequence_char>
 800e55c:	4630      	mov	r0, r6
 800e55e:	60e0      	str	r0, [r4, #12]
 800e560:	4632      	mov	r2, r6
 800e562:	4631      	mov	r1, r6
 800e564:	4628      	mov	r0, r5
 800e566:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e56a:	f002 be75 	b.w	8011258 <ucdr_serialize_sequence_char>
 800e56e:	4770      	bx	lr

0800e570 <_Header__get_serialized_size>:
 800e570:	b538      	push	{r3, r4, r5, lr}
 800e572:	4604      	mov	r4, r0
 800e574:	b150      	cbz	r0, 800e58c <_Header__get_serialized_size+0x1c>
 800e576:	2100      	movs	r1, #0
 800e578:	f000 fb00 	bl	800eb7c <get_serialized_size_builtin_interfaces__msg__Time>
 800e57c:	2104      	movs	r1, #4
 800e57e:	4605      	mov	r5, r0
 800e580:	f002 fdfe 	bl	8011180 <ucdr_alignment>
 800e584:	68e4      	ldr	r4, [r4, #12]
 800e586:	3405      	adds	r4, #5
 800e588:	442c      	add	r4, r5
 800e58a:	4420      	add	r0, r4
 800e58c:	bd38      	pop	{r3, r4, r5, pc}
 800e58e:	bf00      	nop

0800e590 <max_serialized_size_std_msgs__msg__Header>:
 800e590:	b510      	push	{r4, lr}
 800e592:	2301      	movs	r3, #1
 800e594:	4604      	mov	r4, r0
 800e596:	7003      	strb	r3, [r0, #0]
 800e598:	f000 fb40 	bl	800ec1c <max_serialized_size_builtin_interfaces__msg__Time>
 800e59c:	2300      	movs	r3, #0
 800e59e:	7023      	strb	r3, [r4, #0]
 800e5a0:	bd10      	pop	{r4, pc}
 800e5a2:	bf00      	nop

0800e5a4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>:
 800e5a4:	4800      	ldr	r0, [pc, #0]	@ (800e5a8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header+0x4>)
 800e5a6:	4770      	bx	lr
 800e5a8:	20000980 	.word	0x20000980

0800e5ac <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__SetBool>:
 800e5ac:	4b04      	ldr	r3, [pc, #16]	@ (800e5c0 <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x14>)
 800e5ae:	681a      	ldr	r2, [r3, #0]
 800e5b0:	b10a      	cbz	r2, 800e5b6 <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__SetBool+0xa>
 800e5b2:	4803      	ldr	r0, [pc, #12]	@ (800e5c0 <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x14>)
 800e5b4:	4770      	bx	lr
 800e5b6:	4a03      	ldr	r2, [pc, #12]	@ (800e5c4 <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x18>)
 800e5b8:	4801      	ldr	r0, [pc, #4]	@ (800e5c0 <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x14>)
 800e5ba:	6812      	ldr	r2, [r2, #0]
 800e5bc:	601a      	str	r2, [r3, #0]
 800e5be:	4770      	bx	lr
 800e5c0:	200009b4 	.word	0x200009b4
 800e5c4:	2000059c 	.word	0x2000059c

0800e5c8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request>:
 800e5c8:	4b06      	ldr	r3, [pc, #24]	@ (800e5e4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0x1c>)
 800e5ca:	4807      	ldr	r0, [pc, #28]	@ (800e5e8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0x20>)
 800e5cc:	4907      	ldr	r1, [pc, #28]	@ (800e5ec <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0x24>)
 800e5ce:	4a08      	ldr	r2, [pc, #32]	@ (800e5f0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0x28>)
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	b410      	push	{r4}
 800e5d4:	4c07      	ldr	r4, [pc, #28]	@ (800e5f4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0x2c>)
 800e5d6:	6003      	str	r3, [r0, #0]
 800e5d8:	6023      	str	r3, [r4, #0]
 800e5da:	600b      	str	r3, [r1, #0]
 800e5dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e5e0:	6013      	str	r3, [r2, #0]
 800e5e2:	4770      	bx	lr
 800e5e4:	2000059c 	.word	0x2000059c
 800e5e8:	20000a08 	.word	0x20000a08
 800e5ec:	200009e8 	.word	0x200009e8
 800e5f0:	200009b4 	.word	0x200009b4
 800e5f4:	20000a28 	.word	0x20000a28

0800e5f8 <std_srvs__srv__SetBool_Event__rosidl_typesupport_introspection_c__size_function__SetBool_Event__request>:
 800e5f8:	6840      	ldr	r0, [r0, #4]
 800e5fa:	4770      	bx	lr

0800e5fc <std_srvs__srv__SetBool_Event__rosidl_typesupport_introspection_c__get_const_function__SetBool_Event__request>:
 800e5fc:	6800      	ldr	r0, [r0, #0]
 800e5fe:	4408      	add	r0, r1
 800e600:	4770      	bx	lr
 800e602:	bf00      	nop

0800e604 <std_srvs__srv__SetBool_Event__rosidl_typesupport_introspection_c__fetch_function__SetBool_Event__request>:
 800e604:	6803      	ldr	r3, [r0, #0]
 800e606:	5c5b      	ldrb	r3, [r3, r1]
 800e608:	7013      	strb	r3, [r2, #0]
 800e60a:	4770      	bx	lr

0800e60c <std_srvs__srv__SetBool_Event__rosidl_typesupport_introspection_c__assign_function__SetBool_Event__request>:
 800e60c:	6803      	ldr	r3, [r0, #0]
 800e60e:	7812      	ldrb	r2, [r2, #0]
 800e610:	545a      	strb	r2, [r3, r1]
 800e612:	4770      	bx	lr

0800e614 <std_srvs__srv__SetBool_Event__rosidl_typesupport_introspection_c__size_function__SetBool_Event__response>:
 800e614:	6840      	ldr	r0, [r0, #4]
 800e616:	4770      	bx	lr

0800e618 <std_srvs__srv__SetBool_Event__rosidl_typesupport_introspection_c__get_const_function__SetBool_Event__response>:
 800e618:	6800      	ldr	r0, [r0, #0]
 800e61a:	eb00 1001 	add.w	r0, r0, r1, lsl #4
 800e61e:	4770      	bx	lr

0800e620 <std_srvs__srv__SetBool_Event__rosidl_typesupport_introspection_c__fetch_function__SetBool_Event__response>:
 800e620:	6803      	ldr	r3, [r0, #0]
 800e622:	eb03 1101 	add.w	r1, r3, r1, lsl #4
 800e626:	4694      	mov	ip, r2
 800e628:	c90f      	ldmia	r1, {r0, r1, r2, r3}
 800e62a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 800e62e:	4770      	bx	lr

0800e630 <std_srvs__srv__SetBool_Event__rosidl_typesupport_introspection_c__assign_function__SetBool_Event__response>:
 800e630:	6803      	ldr	r3, [r0, #0]
 800e632:	eb03 1c01 	add.w	ip, r3, r1, lsl #4
 800e636:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800e638:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 800e63c:	4770      	bx	lr
 800e63e:	bf00      	nop

0800e640 <std_srvs__srv__SetBool_Request__rosidl_typesupport_introspection_c__SetBool_Request_init_function>:
 800e640:	f00b ba30 	b.w	8019aa4 <std_srvs__srv__SetBool_Request__init>

0800e644 <std_srvs__srv__SetBool_Request__rosidl_typesupport_introspection_c__SetBool_Request_fini_function>:
 800e644:	f00b ba32 	b.w	8019aac <std_srvs__srv__SetBool_Request__fini>

0800e648 <std_srvs__srv__SetBool_Response__rosidl_typesupport_introspection_c__SetBool_Response_init_function>:
 800e648:	f00b ba6a 	b.w	8019b20 <std_srvs__srv__SetBool_Response__init>

0800e64c <std_srvs__srv__SetBool_Response__rosidl_typesupport_introspection_c__SetBool_Response_fini_function>:
 800e64c:	f00b ba78 	b.w	8019b40 <std_srvs__srv__SetBool_Response__fini>

0800e650 <std_srvs__srv__SetBool_Event__rosidl_typesupport_introspection_c__SetBool_Event_init_function>:
 800e650:	f00b baf0 	b.w	8019c34 <std_srvs__srv__SetBool_Event__init>

0800e654 <std_srvs__srv__SetBool_Event__rosidl_typesupport_introspection_c__SetBool_Event_fini_function>:
 800e654:	f00b bb0e 	b.w	8019c74 <std_srvs__srv__SetBool_Event__fini>

0800e658 <std_srvs__srv__SetBool_Event__rosidl_typesupport_introspection_c__resize_function__SetBool_Event__request>:
 800e658:	b538      	push	{r3, r4, r5, lr}
 800e65a:	4604      	mov	r4, r0
 800e65c:	460d      	mov	r5, r1
 800e65e:	f00b fa4b 	bl	8019af8 <std_srvs__srv__SetBool_Request__Sequence__fini>
 800e662:	4629      	mov	r1, r5
 800e664:	4620      	mov	r0, r4
 800e666:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e66a:	f00b ba29 	b.w	8019ac0 <std_srvs__srv__SetBool_Request__Sequence__init>
 800e66e:	bf00      	nop

0800e670 <std_srvs__srv__SetBool_Event__rosidl_typesupport_introspection_c__resize_function__SetBool_Event__response>:
 800e670:	b538      	push	{r3, r4, r5, lr}
 800e672:	4604      	mov	r4, r0
 800e674:	460d      	mov	r5, r1
 800e676:	f00b fab5 	bl	8019be4 <std_srvs__srv__SetBool_Response__Sequence__fini>
 800e67a:	4629      	mov	r1, r5
 800e67c:	4620      	mov	r0, r4
 800e67e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e682:	f00b ba6d 	b.w	8019b60 <std_srvs__srv__SetBool_Response__Sequence__init>
 800e686:	bf00      	nop

0800e688 <std_srvs__srv__SetBool_Event__rosidl_typesupport_introspection_c__get_function__SetBool_Event__request>:
 800e688:	6800      	ldr	r0, [r0, #0]
 800e68a:	4408      	add	r0, r1
 800e68c:	4770      	bx	lr
 800e68e:	bf00      	nop

0800e690 <std_srvs__srv__SetBool_Event__rosidl_typesupport_introspection_c__get_function__SetBool_Event__response>:
 800e690:	6800      	ldr	r0, [r0, #0]
 800e692:	eb00 1001 	add.w	r0, r0, r1, lsl #4
 800e696:	4770      	bx	lr

0800e698 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request>:
 800e698:	4b04      	ldr	r3, [pc, #16]	@ (800e6ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0x14>)
 800e69a:	681a      	ldr	r2, [r3, #0]
 800e69c:	b10a      	cbz	r2, 800e6a2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0xa>
 800e69e:	4803      	ldr	r0, [pc, #12]	@ (800e6ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0x14>)
 800e6a0:	4770      	bx	lr
 800e6a2:	4a03      	ldr	r2, [pc, #12]	@ (800e6b0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0x18>)
 800e6a4:	4801      	ldr	r0, [pc, #4]	@ (800e6ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0x14>)
 800e6a6:	6812      	ldr	r2, [r2, #0]
 800e6a8:	601a      	str	r2, [r3, #0]
 800e6aa:	4770      	bx	lr
 800e6ac:	20000be4 	.word	0x20000be4
 800e6b0:	200005a0 	.word	0x200005a0

0800e6b4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Response>:
 800e6b4:	4b04      	ldr	r3, [pc, #16]	@ (800e6c8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Response+0x14>)
 800e6b6:	681a      	ldr	r2, [r3, #0]
 800e6b8:	b10a      	cbz	r2, 800e6be <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Response+0xa>
 800e6ba:	4803      	ldr	r0, [pc, #12]	@ (800e6c8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Response+0x14>)
 800e6bc:	4770      	bx	lr
 800e6be:	4a03      	ldr	r2, [pc, #12]	@ (800e6cc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Response+0x18>)
 800e6c0:	4801      	ldr	r0, [pc, #4]	@ (800e6c8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Response+0x14>)
 800e6c2:	6812      	ldr	r2, [r2, #0]
 800e6c4:	601a      	str	r2, [r3, #0]
 800e6c6:	4770      	bx	lr
 800e6c8:	20000b54 	.word	0x20000b54
 800e6cc:	200005a0 	.word	0x200005a0

0800e6d0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Event>:
 800e6d0:	b508      	push	{r3, lr}
 800e6d2:	f7ff fdef 	bl	800e2b4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 800e6d6:	4913      	ldr	r1, [pc, #76]	@ (800e724 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Event+0x54>)
 800e6d8:	4b13      	ldr	r3, [pc, #76]	@ (800e728 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Event+0x58>)
 800e6da:	680a      	ldr	r2, [r1, #0]
 800e6dc:	60d8      	str	r0, [r3, #12]
 800e6de:	b152      	cbz	r2, 800e6f6 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Event+0x26>
 800e6e0:	4a12      	ldr	r2, [pc, #72]	@ (800e72c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Event+0x5c>)
 800e6e2:	6499      	str	r1, [r3, #72]	@ 0x48
 800e6e4:	6811      	ldr	r1, [r2, #0]
 800e6e6:	b171      	cbz	r1, 800e706 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Event+0x36>
 800e6e8:	4911      	ldr	r1, [pc, #68]	@ (800e730 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Event+0x60>)
 800e6ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 800e6ee:	680b      	ldr	r3, [r1, #0]
 800e6f0:	b193      	cbz	r3, 800e718 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Event+0x48>
 800e6f2:	480f      	ldr	r0, [pc, #60]	@ (800e730 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Event+0x60>)
 800e6f4:	bd08      	pop	{r3, pc}
 800e6f6:	4a0f      	ldr	r2, [pc, #60]	@ (800e734 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Event+0x64>)
 800e6f8:	6499      	str	r1, [r3, #72]	@ 0x48
 800e6fa:	6812      	ldr	r2, [r2, #0]
 800e6fc:	600a      	str	r2, [r1, #0]
 800e6fe:	4a0b      	ldr	r2, [pc, #44]	@ (800e72c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Event+0x5c>)
 800e700:	6811      	ldr	r1, [r2, #0]
 800e702:	2900      	cmp	r1, #0
 800e704:	d1f0      	bne.n	800e6e8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Event+0x18>
 800e706:	490b      	ldr	r1, [pc, #44]	@ (800e734 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Event+0x64>)
 800e708:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 800e70c:	6809      	ldr	r1, [r1, #0]
 800e70e:	6011      	str	r1, [r2, #0]
 800e710:	4907      	ldr	r1, [pc, #28]	@ (800e730 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Event+0x60>)
 800e712:	680b      	ldr	r3, [r1, #0]
 800e714:	2b00      	cmp	r3, #0
 800e716:	d1ec      	bne.n	800e6f2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Event+0x22>
 800e718:	4b06      	ldr	r3, [pc, #24]	@ (800e734 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Event+0x64>)
 800e71a:	4805      	ldr	r0, [pc, #20]	@ (800e730 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Event+0x60>)
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	600b      	str	r3, [r1, #0]
 800e720:	bd08      	pop	{r3, pc}
 800e722:	bf00      	nop
 800e724:	20000be4 	.word	0x20000be4
 800e728:	20000aa0 	.word	0x20000aa0
 800e72c:	20000b54 	.word	0x20000b54
 800e730:	20000a88 	.word	0x20000a88
 800e734:	200005a0 	.word	0x200005a0

0800e738 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool>:
 800e738:	4b25      	ldr	r3, [pc, #148]	@ (800e7d0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x98>)
 800e73a:	681a      	ldr	r2, [r3, #0]
 800e73c:	b510      	push	{r4, lr}
 800e73e:	b142      	cbz	r2, 800e752 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x1a>
 800e740:	685c      	ldr	r4, [r3, #4]
 800e742:	68a3      	ldr	r3, [r4, #8]
 800e744:	b163      	cbz	r3, 800e760 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x28>
 800e746:	68e3      	ldr	r3, [r4, #12]
 800e748:	b193      	cbz	r3, 800e770 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x38>
 800e74a:	6923      	ldr	r3, [r4, #16]
 800e74c:	b1c3      	cbz	r3, 800e780 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x48>
 800e74e:	4820      	ldr	r0, [pc, #128]	@ (800e7d0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x98>)
 800e750:	bd10      	pop	{r4, pc}
 800e752:	4a20      	ldr	r2, [pc, #128]	@ (800e7d4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x9c>)
 800e754:	685c      	ldr	r4, [r3, #4]
 800e756:	6812      	ldr	r2, [r2, #0]
 800e758:	601a      	str	r2, [r3, #0]
 800e75a:	68a3      	ldr	r3, [r4, #8]
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d1f2      	bne.n	800e746 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0xe>
 800e760:	4a1d      	ldr	r2, [pc, #116]	@ (800e7d8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0xa0>)
 800e762:	6813      	ldr	r3, [r2, #0]
 800e764:	b303      	cbz	r3, 800e7a8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x70>
 800e766:	6853      	ldr	r3, [r2, #4]
 800e768:	60a3      	str	r3, [r4, #8]
 800e76a:	68e3      	ldr	r3, [r4, #12]
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d1ec      	bne.n	800e74a <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x12>
 800e770:	4b1a      	ldr	r3, [pc, #104]	@ (800e7dc <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0xa4>)
 800e772:	681a      	ldr	r2, [r3, #0]
 800e774:	b1e2      	cbz	r2, 800e7b0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x78>
 800e776:	685b      	ldr	r3, [r3, #4]
 800e778:	60e3      	str	r3, [r4, #12]
 800e77a:	6923      	ldr	r3, [r4, #16]
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d1e6      	bne.n	800e74e <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x16>
 800e780:	f7ff fd98 	bl	800e2b4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 800e784:	4a14      	ldr	r2, [pc, #80]	@ (800e7d8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0xa0>)
 800e786:	4916      	ldr	r1, [pc, #88]	@ (800e7e0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0xa8>)
 800e788:	6813      	ldr	r3, [r2, #0]
 800e78a:	60c8      	str	r0, [r1, #12]
 800e78c:	b1e3      	cbz	r3, 800e7c8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x90>
 800e78e:	4b13      	ldr	r3, [pc, #76]	@ (800e7dc <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0xa4>)
 800e790:	648a      	str	r2, [r1, #72]	@ 0x48
 800e792:	681a      	ldr	r2, [r3, #0]
 800e794:	b1a2      	cbz	r2, 800e7c0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x88>
 800e796:	4a13      	ldr	r2, [pc, #76]	@ (800e7e4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0xac>)
 800e798:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
 800e79c:	6813      	ldr	r3, [r2, #0]
 800e79e:	b15b      	cbz	r3, 800e7b8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x80>
 800e7a0:	6853      	ldr	r3, [r2, #4]
 800e7a2:	480b      	ldr	r0, [pc, #44]	@ (800e7d0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x98>)
 800e7a4:	6123      	str	r3, [r4, #16]
 800e7a6:	bd10      	pop	{r4, pc}
 800e7a8:	4b0a      	ldr	r3, [pc, #40]	@ (800e7d4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x9c>)
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	6013      	str	r3, [r2, #0]
 800e7ae:	e7da      	b.n	800e766 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x2e>
 800e7b0:	4a08      	ldr	r2, [pc, #32]	@ (800e7d4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x9c>)
 800e7b2:	6812      	ldr	r2, [r2, #0]
 800e7b4:	601a      	str	r2, [r3, #0]
 800e7b6:	e7de      	b.n	800e776 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x3e>
 800e7b8:	4b06      	ldr	r3, [pc, #24]	@ (800e7d4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x9c>)
 800e7ba:	681b      	ldr	r3, [r3, #0]
 800e7bc:	6013      	str	r3, [r2, #0]
 800e7be:	e7ef      	b.n	800e7a0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x68>
 800e7c0:	4a04      	ldr	r2, [pc, #16]	@ (800e7d4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x9c>)
 800e7c2:	6812      	ldr	r2, [r2, #0]
 800e7c4:	601a      	str	r2, [r3, #0]
 800e7c6:	e7e6      	b.n	800e796 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x5e>
 800e7c8:	4b02      	ldr	r3, [pc, #8]	@ (800e7d4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x9c>)
 800e7ca:	681b      	ldr	r3, [r3, #0]
 800e7cc:	6013      	str	r3, [r2, #0]
 800e7ce:	e7de      	b.n	800e78e <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x56>
 800e7d0:	20000a48 	.word	0x20000a48
 800e7d4:	200005a0 	.word	0x200005a0
 800e7d8:	20000be4 	.word	0x20000be4
 800e7dc:	20000b54 	.word	0x20000b54
 800e7e0:	20000aa0 	.word	0x20000aa0
 800e7e4:	20000a88 	.word	0x20000a88

0800e7e8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request>:
 800e7e8:	4800      	ldr	r0, [pc, #0]	@ (800e7ec <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0x4>)
 800e7ea:	4770      	bx	lr
 800e7ec:	20000cdc 	.word	0x20000cdc

0800e7f0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_srvs__srv__SetBool_Response>:
 800e7f0:	4800      	ldr	r0, [pc, #0]	@ (800e7f4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_srvs__srv__SetBool_Response+0x4>)
 800e7f2:	4770      	bx	lr
 800e7f4:	20000ca8 	.word	0x20000ca8

0800e7f8 <_SetBool_Request__max_serialized_size>:
 800e7f8:	b508      	push	{r3, lr}
 800e7fa:	2101      	movs	r1, #1
 800e7fc:	2000      	movs	r0, #0
 800e7fe:	f002 fcbf 	bl	8011180 <ucdr_alignment>
 800e802:	3001      	adds	r0, #1
 800e804:	bd08      	pop	{r3, pc}
 800e806:	bf00      	nop

0800e808 <_SetBool_Request__cdr_deserialize>:
 800e808:	b109      	cbz	r1, 800e80e <_SetBool_Request__cdr_deserialize+0x6>
 800e80a:	f000 bf39 	b.w	800f680 <ucdr_deserialize_bool>
 800e80e:	4608      	mov	r0, r1
 800e810:	4770      	bx	lr
 800e812:	bf00      	nop

0800e814 <_SetBool_Event__max_serialized_size>:
 800e814:	b500      	push	{lr}
 800e816:	b083      	sub	sp, #12
 800e818:	2301      	movs	r3, #1
 800e81a:	2100      	movs	r1, #0
 800e81c:	f10d 0007 	add.w	r0, sp, #7
 800e820:	f88d 3007 	strb.w	r3, [sp, #7]
 800e824:	f7ff fdf0 	bl	800e408 <max_serialized_size_service_msgs__msg__ServiceEventInfo>
 800e828:	b003      	add	sp, #12
 800e82a:	f85d fb04 	ldr.w	pc, [sp], #4
 800e82e:	bf00      	nop

0800e830 <_SetBool_Event__cdr_deserialize>:
 800e830:	2900      	cmp	r1, #0
 800e832:	d042      	beq.n	800e8ba <_SetBool_Event__cdr_deserialize+0x8a>
 800e834:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e836:	b083      	sub	sp, #12
 800e838:	4606      	mov	r6, r0
 800e83a:	460d      	mov	r5, r1
 800e83c:	f7ff fe04 	bl	800e448 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 800e840:	6843      	ldr	r3, [r0, #4]
 800e842:	4629      	mov	r1, r5
 800e844:	68db      	ldr	r3, [r3, #12]
 800e846:	4630      	mov	r0, r6
 800e848:	4798      	blx	r3
 800e84a:	a901      	add	r1, sp, #4
 800e84c:	4630      	mov	r0, r6
 800e84e:	f001 fa75 	bl	800fd3c <ucdr_deserialize_uint32_t>
 800e852:	9b01      	ldr	r3, [sp, #4]
 800e854:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 800e856:	429a      	cmp	r2, r3
 800e858:	d32c      	bcc.n	800e8b4 <_SetBool_Event__cdr_deserialize+0x84>
 800e85a:	62eb      	str	r3, [r5, #44]	@ 0x2c
 800e85c:	b173      	cbz	r3, 800e87c <_SetBool_Event__cdr_deserialize+0x4c>
 800e85e:	4f18      	ldr	r7, [pc, #96]	@ (800e8c0 <_SetBool_Event__cdr_deserialize+0x90>)
 800e860:	2400      	movs	r4, #0
 800e862:	e003      	b.n	800e86c <_SetBool_Event__cdr_deserialize+0x3c>
 800e864:	9b01      	ldr	r3, [sp, #4]
 800e866:	3401      	adds	r4, #1
 800e868:	42a3      	cmp	r3, r4
 800e86a:	d907      	bls.n	800e87c <_SetBool_Event__cdr_deserialize+0x4c>
 800e86c:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	4421      	add	r1, r4
 800e872:	68db      	ldr	r3, [r3, #12]
 800e874:	4630      	mov	r0, r6
 800e876:	4798      	blx	r3
 800e878:	2800      	cmp	r0, #0
 800e87a:	d1f3      	bne.n	800e864 <_SetBool_Event__cdr_deserialize+0x34>
 800e87c:	a901      	add	r1, sp, #4
 800e87e:	4630      	mov	r0, r6
 800e880:	f001 fa5c 	bl	800fd3c <ucdr_deserialize_uint32_t>
 800e884:	9b01      	ldr	r3, [sp, #4]
 800e886:	6bea      	ldr	r2, [r5, #60]	@ 0x3c
 800e888:	429a      	cmp	r2, r3
 800e88a:	d313      	bcc.n	800e8b4 <_SetBool_Event__cdr_deserialize+0x84>
 800e88c:	63ab      	str	r3, [r5, #56]	@ 0x38
 800e88e:	b17b      	cbz	r3, 800e8b0 <_SetBool_Event__cdr_deserialize+0x80>
 800e890:	4f0c      	ldr	r7, [pc, #48]	@ (800e8c4 <_SetBool_Event__cdr_deserialize+0x94>)
 800e892:	2400      	movs	r4, #0
 800e894:	e002      	b.n	800e89c <_SetBool_Event__cdr_deserialize+0x6c>
 800e896:	9b01      	ldr	r3, [sp, #4]
 800e898:	42a3      	cmp	r3, r4
 800e89a:	d909      	bls.n	800e8b0 <_SetBool_Event__cdr_deserialize+0x80>
 800e89c:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	eb01 1104 	add.w	r1, r1, r4, lsl #4
 800e8a4:	68db      	ldr	r3, [r3, #12]
 800e8a6:	4630      	mov	r0, r6
 800e8a8:	4798      	blx	r3
 800e8aa:	3401      	adds	r4, #1
 800e8ac:	2800      	cmp	r0, #0
 800e8ae:	d1f2      	bne.n	800e896 <_SetBool_Event__cdr_deserialize+0x66>
 800e8b0:	b003      	add	sp, #12
 800e8b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e8b4:	2000      	movs	r0, #0
 800e8b6:	b003      	add	sp, #12
 800e8b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e8ba:	2000      	movs	r0, #0
 800e8bc:	4770      	bx	lr
 800e8be:	bf00      	nop
 800e8c0:	20000cdc 	.word	0x20000cdc
 800e8c4:	20000ca8 	.word	0x20000ca8

0800e8c8 <_SetBool_Event__cdr_serialize>:
 800e8c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e8cc:	2800      	cmp	r0, #0
 800e8ce:	d038      	beq.n	800e942 <_SetBool_Event__cdr_serialize+0x7a>
 800e8d0:	460e      	mov	r6, r1
 800e8d2:	4604      	mov	r4, r0
 800e8d4:	f7ff fdb8 	bl	800e448 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 800e8d8:	6843      	ldr	r3, [r0, #4]
 800e8da:	4631      	mov	r1, r6
 800e8dc:	689b      	ldr	r3, [r3, #8]
 800e8de:	4620      	mov	r0, r4
 800e8e0:	4798      	blx	r3
 800e8e2:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800e8e4:	4630      	mov	r0, r6
 800e8e6:	4639      	mov	r1, r7
 800e8e8:	f001 f8fe 	bl	800fae8 <ucdr_serialize_uint32_t>
 800e8ec:	b180      	cbz	r0, 800e910 <_SetBool_Event__cdr_serialize+0x48>
 800e8ee:	b17f      	cbz	r7, 800e910 <_SetBool_Event__cdr_serialize+0x48>
 800e8f0:	f8df 8058 	ldr.w	r8, [pc, #88]	@ 800e94c <_SetBool_Event__cdr_serialize+0x84>
 800e8f4:	2500      	movs	r5, #0
 800e8f6:	e002      	b.n	800e8fe <_SetBool_Event__cdr_serialize+0x36>
 800e8f8:	3501      	adds	r5, #1
 800e8fa:	42af      	cmp	r7, r5
 800e8fc:	d008      	beq.n	800e910 <_SetBool_Event__cdr_serialize+0x48>
 800e8fe:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800e900:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e904:	4631      	mov	r1, r6
 800e906:	689b      	ldr	r3, [r3, #8]
 800e908:	4428      	add	r0, r5
 800e90a:	4798      	blx	r3
 800e90c:	2800      	cmp	r0, #0
 800e90e:	d1f3      	bne.n	800e8f8 <_SetBool_Event__cdr_serialize+0x30>
 800e910:	6ba7      	ldr	r7, [r4, #56]	@ 0x38
 800e912:	4630      	mov	r0, r6
 800e914:	4639      	mov	r1, r7
 800e916:	f001 f8e7 	bl	800fae8 <ucdr_serialize_uint32_t>
 800e91a:	4680      	mov	r8, r0
 800e91c:	b188      	cbz	r0, 800e942 <_SetBool_Event__cdr_serialize+0x7a>
 800e91e:	b197      	cbz	r7, 800e946 <_SetBool_Event__cdr_serialize+0x7e>
 800e920:	f8df 902c 	ldr.w	r9, [pc, #44]	@ 800e950 <_SetBool_Event__cdr_serialize+0x88>
 800e924:	2500      	movs	r5, #0
 800e926:	e002      	b.n	800e92e <_SetBool_Event__cdr_serialize+0x66>
 800e928:	3501      	adds	r5, #1
 800e92a:	42af      	cmp	r7, r5
 800e92c:	d00b      	beq.n	800e946 <_SetBool_Event__cdr_serialize+0x7e>
 800e92e:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 800e930:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800e934:	4631      	mov	r1, r6
 800e936:	689b      	ldr	r3, [r3, #8]
 800e938:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 800e93c:	4798      	blx	r3
 800e93e:	2800      	cmp	r0, #0
 800e940:	d1f2      	bne.n	800e928 <_SetBool_Event__cdr_serialize+0x60>
 800e942:	f04f 0800 	mov.w	r8, #0
 800e946:	4640      	mov	r0, r8
 800e948:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e94c:	20000cdc 	.word	0x20000cdc
 800e950:	20000ca8 	.word	0x20000ca8

0800e954 <get_serialized_size_std_srvs__srv__SetBool_Request>:
 800e954:	b508      	push	{r3, lr}
 800e956:	b120      	cbz	r0, 800e962 <get_serialized_size_std_srvs__srv__SetBool_Request+0xe>
 800e958:	4608      	mov	r0, r1
 800e95a:	2101      	movs	r1, #1
 800e95c:	f002 fc10 	bl	8011180 <ucdr_alignment>
 800e960:	3001      	adds	r0, #1
 800e962:	bd08      	pop	{r3, pc}

0800e964 <get_serialized_size_std_srvs__srv__SetBool_Response>:
 800e964:	b570      	push	{r4, r5, r6, lr}
 800e966:	4605      	mov	r5, r0
 800e968:	b180      	cbz	r0, 800e98c <get_serialized_size_std_srvs__srv__SetBool_Response+0x28>
 800e96a:	460c      	mov	r4, r1
 800e96c:	4620      	mov	r0, r4
 800e96e:	2101      	movs	r1, #1
 800e970:	f002 fc06 	bl	8011180 <ucdr_alignment>
 800e974:	1c66      	adds	r6, r4, #1
 800e976:	4406      	add	r6, r0
 800e978:	2104      	movs	r1, #4
 800e97a:	4630      	mov	r0, r6
 800e97c:	f002 fc00 	bl	8011180 <ucdr_alignment>
 800e980:	68ab      	ldr	r3, [r5, #8]
 800e982:	f1c4 0405 	rsb	r4, r4, #5
 800e986:	441c      	add	r4, r3
 800e988:	4404      	add	r4, r0
 800e98a:	19a0      	adds	r0, r4, r6
 800e98c:	bd70      	pop	{r4, r5, r6, pc}
 800e98e:	bf00      	nop

0800e990 <_SetBool_Request__cdr_serialize>:
 800e990:	460a      	mov	r2, r1
 800e992:	b118      	cbz	r0, 800e99c <_SetBool_Request__cdr_serialize+0xc>
 800e994:	7801      	ldrb	r1, [r0, #0]
 800e996:	4610      	mov	r0, r2
 800e998:	f000 be5c 	b.w	800f654 <ucdr_serialize_bool>
 800e99c:	4770      	bx	lr
 800e99e:	bf00      	nop

0800e9a0 <_SetBool_Response__cdr_deserialize>:
 800e9a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e9a2:	460c      	mov	r4, r1
 800e9a4:	b083      	sub	sp, #12
 800e9a6:	b1b9      	cbz	r1, 800e9d8 <_SetBool_Response__cdr_deserialize+0x38>
 800e9a8:	4606      	mov	r6, r0
 800e9aa:	f000 fe69 	bl	800f680 <ucdr_deserialize_bool>
 800e9ae:	68e7      	ldr	r7, [r4, #12]
 800e9b0:	6861      	ldr	r1, [r4, #4]
 800e9b2:	ab01      	add	r3, sp, #4
 800e9b4:	463a      	mov	r2, r7
 800e9b6:	4630      	mov	r0, r6
 800e9b8:	f002 fc60 	bl	801127c <ucdr_deserialize_sequence_char>
 800e9bc:	9b01      	ldr	r3, [sp, #4]
 800e9be:	4605      	mov	r5, r0
 800e9c0:	b920      	cbnz	r0, 800e9cc <_SetBool_Response__cdr_deserialize+0x2c>
 800e9c2:	429f      	cmp	r7, r3
 800e9c4:	d30c      	bcc.n	800e9e0 <_SetBool_Response__cdr_deserialize+0x40>
 800e9c6:	4628      	mov	r0, r5
 800e9c8:	b003      	add	sp, #12
 800e9ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e9cc:	b103      	cbz	r3, 800e9d0 <_SetBool_Response__cdr_deserialize+0x30>
 800e9ce:	3b01      	subs	r3, #1
 800e9d0:	4628      	mov	r0, r5
 800e9d2:	60a3      	str	r3, [r4, #8]
 800e9d4:	b003      	add	sp, #12
 800e9d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e9d8:	460d      	mov	r5, r1
 800e9da:	4628      	mov	r0, r5
 800e9dc:	b003      	add	sp, #12
 800e9de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e9e0:	2101      	movs	r1, #1
 800e9e2:	75b0      	strb	r0, [r6, #22]
 800e9e4:	7571      	strb	r1, [r6, #21]
 800e9e6:	60a0      	str	r0, [r4, #8]
 800e9e8:	4630      	mov	r0, r6
 800e9ea:	f002 fbdf 	bl	80111ac <ucdr_align_to>
 800e9ee:	4630      	mov	r0, r6
 800e9f0:	9901      	ldr	r1, [sp, #4]
 800e9f2:	f002 fc11 	bl	8011218 <ucdr_advance_buffer>
 800e9f6:	4628      	mov	r0, r5
 800e9f8:	b003      	add	sp, #12
 800e9fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e9fc <_SetBool_Response__cdr_serialize>:
 800e9fc:	b1e0      	cbz	r0, 800ea38 <_SetBool_Response__cdr_serialize+0x3c>
 800e9fe:	b570      	push	{r4, r5, r6, lr}
 800ea00:	460d      	mov	r5, r1
 800ea02:	4604      	mov	r4, r0
 800ea04:	7801      	ldrb	r1, [r0, #0]
 800ea06:	4628      	mov	r0, r5
 800ea08:	f000 fe24 	bl	800f654 <ucdr_serialize_bool>
 800ea0c:	6866      	ldr	r6, [r4, #4]
 800ea0e:	b156      	cbz	r6, 800ea26 <_SetBool_Response__cdr_serialize+0x2a>
 800ea10:	4630      	mov	r0, r6
 800ea12:	f7f1 fc55 	bl	80002c0 <strlen>
 800ea16:	4631      	mov	r1, r6
 800ea18:	60a0      	str	r0, [r4, #8]
 800ea1a:	1c42      	adds	r2, r0, #1
 800ea1c:	4628      	mov	r0, r5
 800ea1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ea22:	f002 bc19 	b.w	8011258 <ucdr_serialize_sequence_char>
 800ea26:	4630      	mov	r0, r6
 800ea28:	60a0      	str	r0, [r4, #8]
 800ea2a:	4632      	mov	r2, r6
 800ea2c:	4631      	mov	r1, r6
 800ea2e:	4628      	mov	r0, r5
 800ea30:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ea34:	f002 bc10 	b.w	8011258 <ucdr_serialize_sequence_char>
 800ea38:	4770      	bx	lr
 800ea3a:	bf00      	nop

0800ea3c <get_serialized_size_std_srvs__srv__SetBool_Event.part.0>:
 800ea3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ea40:	4689      	mov	r9, r1
 800ea42:	4607      	mov	r7, r0
 800ea44:	f7ff fc4c 	bl	800e2e0 <get_serialized_size_service_msgs__msg__ServiceEventInfo>
 800ea48:	eb09 0400 	add.w	r4, r9, r0
 800ea4c:	2104      	movs	r1, #4
 800ea4e:	4620      	mov	r0, r4
 800ea50:	f8d7 802c 	ldr.w	r8, [r7, #44]	@ 0x2c
 800ea54:	f002 fb94 	bl	8011180 <ucdr_alignment>
 800ea58:	1d06      	adds	r6, r0, #4
 800ea5a:	4426      	add	r6, r4
 800ea5c:	f1b8 0f00 	cmp.w	r8, #0
 800ea60:	d017      	beq.n	800ea92 <get_serialized_size_std_srvs__srv__SetBool_Event.part.0+0x56>
 800ea62:	f8df a080 	ldr.w	sl, [pc, #128]	@ 800eae4 <get_serialized_size_std_srvs__srv__SetBool_Event.part.0+0xa8>
 800ea66:	2500      	movs	r5, #0
 800ea68:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ea6a:	f8da 3004 	ldr.w	r3, [sl, #4]
 800ea6e:	4631      	mov	r1, r6
 800ea70:	695b      	ldr	r3, [r3, #20]
 800ea72:	4428      	add	r0, r5
 800ea74:	4798      	blx	r3
 800ea76:	2804      	cmp	r0, #4
 800ea78:	4601      	mov	r1, r0
 800ea7a:	4604      	mov	r4, r0
 800ea7c:	bf28      	it	cs
 800ea7e:	2104      	movcs	r1, #4
 800ea80:	4630      	mov	r0, r6
 800ea82:	f002 fb7d 	bl	8011180 <ucdr_alignment>
 800ea86:	3501      	adds	r5, #1
 800ea88:	4434      	add	r4, r6
 800ea8a:	45a8      	cmp	r8, r5
 800ea8c:	eb00 0604 	add.w	r6, r0, r4
 800ea90:	d1ea      	bne.n	800ea68 <get_serialized_size_std_srvs__srv__SetBool_Event.part.0+0x2c>
 800ea92:	2104      	movs	r1, #4
 800ea94:	4630      	mov	r0, r6
 800ea96:	f8d7 8038 	ldr.w	r8, [r7, #56]	@ 0x38
 800ea9a:	f002 fb71 	bl	8011180 <ucdr_alignment>
 800ea9e:	1985      	adds	r5, r0, r6
 800eaa0:	3504      	adds	r5, #4
 800eaa2:	f1b8 0f00 	cmp.w	r8, #0
 800eaa6:	d018      	beq.n	800eada <get_serialized_size_std_srvs__srv__SetBool_Event.part.0+0x9e>
 800eaa8:	f8df a03c 	ldr.w	sl, [pc, #60]	@ 800eae8 <get_serialized_size_std_srvs__srv__SetBool_Event.part.0+0xac>
 800eaac:	2600      	movs	r6, #0
 800eaae:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800eab0:	f8da 3004 	ldr.w	r3, [sl, #4]
 800eab4:	4629      	mov	r1, r5
 800eab6:	695b      	ldr	r3, [r3, #20]
 800eab8:	eb00 1006 	add.w	r0, r0, r6, lsl #4
 800eabc:	4798      	blx	r3
 800eabe:	2804      	cmp	r0, #4
 800eac0:	4601      	mov	r1, r0
 800eac2:	4604      	mov	r4, r0
 800eac4:	bf28      	it	cs
 800eac6:	2104      	movcs	r1, #4
 800eac8:	4628      	mov	r0, r5
 800eaca:	f002 fb59 	bl	8011180 <ucdr_alignment>
 800eace:	3601      	adds	r6, #1
 800ead0:	442c      	add	r4, r5
 800ead2:	45b0      	cmp	r8, r6
 800ead4:	eb00 0504 	add.w	r5, r0, r4
 800ead8:	d1e9      	bne.n	800eaae <get_serialized_size_std_srvs__srv__SetBool_Event.part.0+0x72>
 800eada:	eba5 0009 	sub.w	r0, r5, r9
 800eade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eae2:	bf00      	nop
 800eae4:	20000cdc 	.word	0x20000cdc
 800eae8:	20000ca8 	.word	0x20000ca8

0800eaec <get_serialized_size_std_srvs__srv__SetBool_Event>:
 800eaec:	b108      	cbz	r0, 800eaf2 <get_serialized_size_std_srvs__srv__SetBool_Event+0x6>
 800eaee:	f7ff bfa5 	b.w	800ea3c <get_serialized_size_std_srvs__srv__SetBool_Event.part.0>
 800eaf2:	4770      	bx	lr

0800eaf4 <_SetBool_Event__get_serialized_size>:
 800eaf4:	b110      	cbz	r0, 800eafc <_SetBool_Event__get_serialized_size+0x8>
 800eaf6:	2100      	movs	r1, #0
 800eaf8:	f7ff bfa0 	b.w	800ea3c <get_serialized_size_std_srvs__srv__SetBool_Event.part.0>
 800eafc:	4770      	bx	lr
 800eafe:	bf00      	nop

0800eb00 <_SetBool_Request__get_serialized_size>:
 800eb00:	b130      	cbz	r0, 800eb10 <_SetBool_Request__get_serialized_size+0x10>
 800eb02:	b508      	push	{r3, lr}
 800eb04:	2101      	movs	r1, #1
 800eb06:	2000      	movs	r0, #0
 800eb08:	f002 fb3a 	bl	8011180 <ucdr_alignment>
 800eb0c:	3001      	adds	r0, #1
 800eb0e:	bd08      	pop	{r3, pc}
 800eb10:	4770      	bx	lr
 800eb12:	bf00      	nop

0800eb14 <_SetBool_Response__max_serialized_size>:
 800eb14:	b508      	push	{r3, lr}
 800eb16:	2101      	movs	r1, #1
 800eb18:	2000      	movs	r0, #0
 800eb1a:	f002 fb31 	bl	8011180 <ucdr_alignment>
 800eb1e:	3001      	adds	r0, #1
 800eb20:	bd08      	pop	{r3, pc}
 800eb22:	bf00      	nop

0800eb24 <_SetBool_Response__get_serialized_size>:
 800eb24:	b538      	push	{r3, r4, r5, lr}
 800eb26:	4604      	mov	r4, r0
 800eb28:	b160      	cbz	r0, 800eb44 <_SetBool_Response__get_serialized_size+0x20>
 800eb2a:	2101      	movs	r1, #1
 800eb2c:	2000      	movs	r0, #0
 800eb2e:	f002 fb27 	bl	8011180 <ucdr_alignment>
 800eb32:	1c45      	adds	r5, r0, #1
 800eb34:	2104      	movs	r1, #4
 800eb36:	4628      	mov	r0, r5
 800eb38:	f002 fb22 	bl	8011180 <ucdr_alignment>
 800eb3c:	68a4      	ldr	r4, [r4, #8]
 800eb3e:	3405      	adds	r4, #5
 800eb40:	4404      	add	r4, r0
 800eb42:	1960      	adds	r0, r4, r5
 800eb44:	bd38      	pop	{r3, r4, r5, pc}
 800eb46:	bf00      	nop

0800eb48 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_srvs__srv__SetBool_Event>:
 800eb48:	4800      	ldr	r0, [pc, #0]	@ (800eb4c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_srvs__srv__SetBool_Event+0x4>)
 800eb4a:	4770      	bx	lr
 800eb4c:	20000c74 	.word	0x20000c74

0800eb50 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__std_srvs__srv__SetBool>:
 800eb50:	4800      	ldr	r0, [pc, #0]	@ (800eb54 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x4>)
 800eb52:	4770      	bx	lr
 800eb54:	20000c38 	.word	0x20000c38

0800eb58 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_init_function>:
 800eb58:	f00b b954 	b.w	8019e04 <builtin_interfaces__msg__Time__init>

0800eb5c <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_fini_function>:
 800eb5c:	f00b b956 	b.w	8019e0c <builtin_interfaces__msg__Time__fini>

0800eb60 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 800eb60:	4b04      	ldr	r3, [pc, #16]	@ (800eb74 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800eb62:	681a      	ldr	r2, [r3, #0]
 800eb64:	b10a      	cbz	r2, 800eb6a <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0xa>
 800eb66:	4803      	ldr	r0, [pc, #12]	@ (800eb74 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800eb68:	4770      	bx	lr
 800eb6a:	4a03      	ldr	r2, [pc, #12]	@ (800eb78 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x18>)
 800eb6c:	4801      	ldr	r0, [pc, #4]	@ (800eb74 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800eb6e:	6812      	ldr	r2, [r2, #0]
 800eb70:	601a      	str	r2, [r3, #0]
 800eb72:	4770      	bx	lr
 800eb74:	20000d10 	.word	0x20000d10
 800eb78:	200005a0 	.word	0x200005a0

0800eb7c <get_serialized_size_builtin_interfaces__msg__Time>:
 800eb7c:	b180      	cbz	r0, 800eba0 <get_serialized_size_builtin_interfaces__msg__Time+0x24>
 800eb7e:	b538      	push	{r3, r4, r5, lr}
 800eb80:	460d      	mov	r5, r1
 800eb82:	4628      	mov	r0, r5
 800eb84:	2104      	movs	r1, #4
 800eb86:	f002 fafb 	bl	8011180 <ucdr_alignment>
 800eb8a:	2104      	movs	r1, #4
 800eb8c:	186c      	adds	r4, r5, r1
 800eb8e:	4404      	add	r4, r0
 800eb90:	4620      	mov	r0, r4
 800eb92:	f002 faf5 	bl	8011180 <ucdr_alignment>
 800eb96:	f1c5 0504 	rsb	r5, r5, #4
 800eb9a:	4405      	add	r5, r0
 800eb9c:	1928      	adds	r0, r5, r4
 800eb9e:	bd38      	pop	{r3, r4, r5, pc}
 800eba0:	4770      	bx	lr
 800eba2:	bf00      	nop

0800eba4 <_Time__cdr_deserialize>:
 800eba4:	b538      	push	{r3, r4, r5, lr}
 800eba6:	460c      	mov	r4, r1
 800eba8:	b141      	cbz	r1, 800ebbc <_Time__cdr_deserialize+0x18>
 800ebaa:	4605      	mov	r5, r0
 800ebac:	f001 fc48 	bl	8010440 <ucdr_deserialize_int32_t>
 800ebb0:	1d21      	adds	r1, r4, #4
 800ebb2:	4628      	mov	r0, r5
 800ebb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ebb8:	f001 b8c0 	b.w	800fd3c <ucdr_deserialize_uint32_t>
 800ebbc:	4608      	mov	r0, r1
 800ebbe:	bd38      	pop	{r3, r4, r5, pc}

0800ebc0 <_Time__cdr_serialize>:
 800ebc0:	b160      	cbz	r0, 800ebdc <_Time__cdr_serialize+0x1c>
 800ebc2:	b538      	push	{r3, r4, r5, lr}
 800ebc4:	460d      	mov	r5, r1
 800ebc6:	4604      	mov	r4, r0
 800ebc8:	6801      	ldr	r1, [r0, #0]
 800ebca:	4628      	mov	r0, r5
 800ebcc:	f001 fb9e 	bl	801030c <ucdr_serialize_int32_t>
 800ebd0:	6861      	ldr	r1, [r4, #4]
 800ebd2:	4628      	mov	r0, r5
 800ebd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ebd8:	f000 bf86 	b.w	800fae8 <ucdr_serialize_uint32_t>
 800ebdc:	4770      	bx	lr
 800ebde:	bf00      	nop

0800ebe0 <_Time__get_serialized_size>:
 800ebe0:	b160      	cbz	r0, 800ebfc <_Time__get_serialized_size+0x1c>
 800ebe2:	b510      	push	{r4, lr}
 800ebe4:	2104      	movs	r1, #4
 800ebe6:	2000      	movs	r0, #0
 800ebe8:	f002 faca 	bl	8011180 <ucdr_alignment>
 800ebec:	1d04      	adds	r4, r0, #4
 800ebee:	2104      	movs	r1, #4
 800ebf0:	4620      	mov	r0, r4
 800ebf2:	f002 fac5 	bl	8011180 <ucdr_alignment>
 800ebf6:	3004      	adds	r0, #4
 800ebf8:	4420      	add	r0, r4
 800ebfa:	bd10      	pop	{r4, pc}
 800ebfc:	4770      	bx	lr
 800ebfe:	bf00      	nop

0800ec00 <_Time__max_serialized_size>:
 800ec00:	b510      	push	{r4, lr}
 800ec02:	2104      	movs	r1, #4
 800ec04:	2000      	movs	r0, #0
 800ec06:	f002 fabb 	bl	8011180 <ucdr_alignment>
 800ec0a:	1d04      	adds	r4, r0, #4
 800ec0c:	2104      	movs	r1, #4
 800ec0e:	4620      	mov	r0, r4
 800ec10:	f002 fab6 	bl	8011180 <ucdr_alignment>
 800ec14:	3004      	adds	r0, #4
 800ec16:	4420      	add	r0, r4
 800ec18:	bd10      	pop	{r4, pc}
 800ec1a:	bf00      	nop

0800ec1c <max_serialized_size_builtin_interfaces__msg__Time>:
 800ec1c:	b538      	push	{r3, r4, r5, lr}
 800ec1e:	460c      	mov	r4, r1
 800ec20:	2301      	movs	r3, #1
 800ec22:	7003      	strb	r3, [r0, #0]
 800ec24:	2104      	movs	r1, #4
 800ec26:	4620      	mov	r0, r4
 800ec28:	f002 faaa 	bl	8011180 <ucdr_alignment>
 800ec2c:	2104      	movs	r1, #4
 800ec2e:	1863      	adds	r3, r4, r1
 800ec30:	18c5      	adds	r5, r0, r3
 800ec32:	4628      	mov	r0, r5
 800ec34:	f002 faa4 	bl	8011180 <ucdr_alignment>
 800ec38:	f1c4 0404 	rsb	r4, r4, #4
 800ec3c:	4420      	add	r0, r4
 800ec3e:	4428      	add	r0, r5
 800ec40:	bd38      	pop	{r3, r4, r5, pc}
 800ec42:	bf00      	nop

0800ec44 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 800ec44:	4800      	ldr	r0, [pc, #0]	@ (800ec48 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x4>)
 800ec46:	4770      	bx	lr
 800ec48:	20000da0 	.word	0x20000da0

0800ec4c <geometry_msgs__msg__Quaternion__rosidl_typesupport_introspection_c__Quaternion_init_function>:
 800ec4c:	f00b b910 	b.w	8019e70 <geometry_msgs__msg__Quaternion__init>

0800ec50 <geometry_msgs__msg__Quaternion__rosidl_typesupport_introspection_c__Quaternion_fini_function>:
 800ec50:	f00b b922 	b.w	8019e98 <geometry_msgs__msg__Quaternion__fini>

0800ec54 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>:
 800ec54:	4b04      	ldr	r3, [pc, #16]	@ (800ec68 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 800ec56:	681a      	ldr	r2, [r3, #0]
 800ec58:	b10a      	cbz	r2, 800ec5e <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0xa>
 800ec5a:	4803      	ldr	r0, [pc, #12]	@ (800ec68 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 800ec5c:	4770      	bx	lr
 800ec5e:	4a03      	ldr	r2, [pc, #12]	@ (800ec6c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x18>)
 800ec60:	4801      	ldr	r0, [pc, #4]	@ (800ec68 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 800ec62:	6812      	ldr	r2, [r2, #0]
 800ec64:	601a      	str	r2, [r3, #0]
 800ec66:	4770      	bx	lr
 800ec68:	20000dd4 	.word	0x20000dd4
 800ec6c:	200005a0 	.word	0x200005a0

0800ec70 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_init_function>:
 800ec70:	f00b b944 	b.w	8019efc <geometry_msgs__msg__Vector3__init>

0800ec74 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_fini_function>:
 800ec74:	f00b b946 	b.w	8019f04 <geometry_msgs__msg__Vector3__fini>

0800ec78 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800ec78:	4b04      	ldr	r3, [pc, #16]	@ (800ec8c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800ec7a:	681a      	ldr	r2, [r3, #0]
 800ec7c:	b10a      	cbz	r2, 800ec82 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0xa>
 800ec7e:	4803      	ldr	r0, [pc, #12]	@ (800ec8c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800ec80:	4770      	bx	lr
 800ec82:	4a03      	ldr	r2, [pc, #12]	@ (800ec90 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x18>)
 800ec84:	4801      	ldr	r0, [pc, #4]	@ (800ec8c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800ec86:	6812      	ldr	r2, [r2, #0]
 800ec88:	601a      	str	r2, [r3, #0]
 800ec8a:	4770      	bx	lr
 800ec8c:	20000edc 	.word	0x20000edc
 800ec90:	200005a0 	.word	0x200005a0

0800ec94 <get_serialized_size_geometry_msgs__msg__Quaternion>:
 800ec94:	b1f0      	cbz	r0, 800ecd4 <get_serialized_size_geometry_msgs__msg__Quaternion+0x40>
 800ec96:	b570      	push	{r4, r5, r6, lr}
 800ec98:	460d      	mov	r5, r1
 800ec9a:	4628      	mov	r0, r5
 800ec9c:	2108      	movs	r1, #8
 800ec9e:	f002 fa6f 	bl	8011180 <ucdr_alignment>
 800eca2:	2108      	movs	r1, #8
 800eca4:	186c      	adds	r4, r5, r1
 800eca6:	4404      	add	r4, r0
 800eca8:	4620      	mov	r0, r4
 800ecaa:	f002 fa69 	bl	8011180 <ucdr_alignment>
 800ecae:	f100 0608 	add.w	r6, r0, #8
 800ecb2:	4426      	add	r6, r4
 800ecb4:	2108      	movs	r1, #8
 800ecb6:	4630      	mov	r0, r6
 800ecb8:	f002 fa62 	bl	8011180 <ucdr_alignment>
 800ecbc:	f100 0408 	add.w	r4, r0, #8
 800ecc0:	4434      	add	r4, r6
 800ecc2:	2108      	movs	r1, #8
 800ecc4:	4620      	mov	r0, r4
 800ecc6:	f002 fa5b 	bl	8011180 <ucdr_alignment>
 800ecca:	f1c5 0508 	rsb	r5, r5, #8
 800ecce:	4405      	add	r5, r0
 800ecd0:	1928      	adds	r0, r5, r4
 800ecd2:	bd70      	pop	{r4, r5, r6, pc}
 800ecd4:	4770      	bx	lr
 800ecd6:	bf00      	nop

0800ecd8 <_Quaternion__cdr_deserialize>:
 800ecd8:	b538      	push	{r3, r4, r5, lr}
 800ecda:	460c      	mov	r4, r1
 800ecdc:	b199      	cbz	r1, 800ed06 <_Quaternion__cdr_deserialize+0x2e>
 800ecde:	4605      	mov	r5, r0
 800ece0:	f002 f870 	bl	8010dc4 <ucdr_deserialize_double>
 800ece4:	f104 0108 	add.w	r1, r4, #8
 800ece8:	4628      	mov	r0, r5
 800ecea:	f002 f86b 	bl	8010dc4 <ucdr_deserialize_double>
 800ecee:	f104 0110 	add.w	r1, r4, #16
 800ecf2:	4628      	mov	r0, r5
 800ecf4:	f002 f866 	bl	8010dc4 <ucdr_deserialize_double>
 800ecf8:	f104 0118 	add.w	r1, r4, #24
 800ecfc:	4628      	mov	r0, r5
 800ecfe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ed02:	f002 b85f 	b.w	8010dc4 <ucdr_deserialize_double>
 800ed06:	4608      	mov	r0, r1
 800ed08:	bd38      	pop	{r3, r4, r5, pc}
 800ed0a:	bf00      	nop

0800ed0c <_Quaternion__cdr_serialize>:
 800ed0c:	b1c0      	cbz	r0, 800ed40 <_Quaternion__cdr_serialize+0x34>
 800ed0e:	b538      	push	{r3, r4, r5, lr}
 800ed10:	ed90 0b00 	vldr	d0, [r0]
 800ed14:	460d      	mov	r5, r1
 800ed16:	4604      	mov	r4, r0
 800ed18:	4608      	mov	r0, r1
 800ed1a:	f001 fec3 	bl	8010aa4 <ucdr_serialize_double>
 800ed1e:	ed94 0b02 	vldr	d0, [r4, #8]
 800ed22:	4628      	mov	r0, r5
 800ed24:	f001 febe 	bl	8010aa4 <ucdr_serialize_double>
 800ed28:	ed94 0b04 	vldr	d0, [r4, #16]
 800ed2c:	4628      	mov	r0, r5
 800ed2e:	f001 feb9 	bl	8010aa4 <ucdr_serialize_double>
 800ed32:	ed94 0b06 	vldr	d0, [r4, #24]
 800ed36:	4628      	mov	r0, r5
 800ed38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ed3c:	f001 beb2 	b.w	8010aa4 <ucdr_serialize_double>
 800ed40:	4770      	bx	lr
 800ed42:	bf00      	nop

0800ed44 <_Quaternion__get_serialized_size>:
 800ed44:	b1d8      	cbz	r0, 800ed7e <_Quaternion__get_serialized_size+0x3a>
 800ed46:	b538      	push	{r3, r4, r5, lr}
 800ed48:	2108      	movs	r1, #8
 800ed4a:	2000      	movs	r0, #0
 800ed4c:	f002 fa18 	bl	8011180 <ucdr_alignment>
 800ed50:	f100 0408 	add.w	r4, r0, #8
 800ed54:	2108      	movs	r1, #8
 800ed56:	4620      	mov	r0, r4
 800ed58:	f002 fa12 	bl	8011180 <ucdr_alignment>
 800ed5c:	f100 0508 	add.w	r5, r0, #8
 800ed60:	4425      	add	r5, r4
 800ed62:	2108      	movs	r1, #8
 800ed64:	4628      	mov	r0, r5
 800ed66:	f002 fa0b 	bl	8011180 <ucdr_alignment>
 800ed6a:	f100 0408 	add.w	r4, r0, #8
 800ed6e:	442c      	add	r4, r5
 800ed70:	2108      	movs	r1, #8
 800ed72:	4620      	mov	r0, r4
 800ed74:	f002 fa04 	bl	8011180 <ucdr_alignment>
 800ed78:	3008      	adds	r0, #8
 800ed7a:	4420      	add	r0, r4
 800ed7c:	bd38      	pop	{r3, r4, r5, pc}
 800ed7e:	4770      	bx	lr

0800ed80 <_Quaternion__max_serialized_size>:
 800ed80:	b538      	push	{r3, r4, r5, lr}
 800ed82:	2108      	movs	r1, #8
 800ed84:	2000      	movs	r0, #0
 800ed86:	f002 f9fb 	bl	8011180 <ucdr_alignment>
 800ed8a:	f100 0408 	add.w	r4, r0, #8
 800ed8e:	2108      	movs	r1, #8
 800ed90:	4620      	mov	r0, r4
 800ed92:	f002 f9f5 	bl	8011180 <ucdr_alignment>
 800ed96:	f100 0508 	add.w	r5, r0, #8
 800ed9a:	4425      	add	r5, r4
 800ed9c:	2108      	movs	r1, #8
 800ed9e:	4628      	mov	r0, r5
 800eda0:	f002 f9ee 	bl	8011180 <ucdr_alignment>
 800eda4:	f100 0408 	add.w	r4, r0, #8
 800eda8:	442c      	add	r4, r5
 800edaa:	2108      	movs	r1, #8
 800edac:	4620      	mov	r0, r4
 800edae:	f002 f9e7 	bl	8011180 <ucdr_alignment>
 800edb2:	3008      	adds	r0, #8
 800edb4:	4420      	add	r0, r4
 800edb6:	bd38      	pop	{r3, r4, r5, pc}

0800edb8 <max_serialized_size_geometry_msgs__msg__Quaternion>:
 800edb8:	b570      	push	{r4, r5, r6, lr}
 800edba:	2301      	movs	r3, #1
 800edbc:	460c      	mov	r4, r1
 800edbe:	7003      	strb	r3, [r0, #0]
 800edc0:	2108      	movs	r1, #8
 800edc2:	4620      	mov	r0, r4
 800edc4:	f002 f9dc 	bl	8011180 <ucdr_alignment>
 800edc8:	2108      	movs	r1, #8
 800edca:	1863      	adds	r3, r4, r1
 800edcc:	18c5      	adds	r5, r0, r3
 800edce:	4628      	mov	r0, r5
 800edd0:	f002 f9d6 	bl	8011180 <ucdr_alignment>
 800edd4:	f100 0608 	add.w	r6, r0, #8
 800edd8:	442e      	add	r6, r5
 800edda:	2108      	movs	r1, #8
 800eddc:	4630      	mov	r0, r6
 800edde:	f002 f9cf 	bl	8011180 <ucdr_alignment>
 800ede2:	f100 0508 	add.w	r5, r0, #8
 800ede6:	4435      	add	r5, r6
 800ede8:	2108      	movs	r1, #8
 800edea:	4628      	mov	r0, r5
 800edec:	f002 f9c8 	bl	8011180 <ucdr_alignment>
 800edf0:	f1c4 0408 	rsb	r4, r4, #8
 800edf4:	4420      	add	r0, r4
 800edf6:	4428      	add	r0, r5
 800edf8:	bd70      	pop	{r4, r5, r6, pc}
 800edfa:	bf00      	nop

0800edfc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>:
 800edfc:	4800      	ldr	r0, [pc, #0]	@ (800ee00 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x4>)
 800edfe:	4770      	bx	lr
 800ee00:	20000fa8 	.word	0x20000fa8

0800ee04 <get_serialized_size_geometry_msgs__msg__Vector3>:
 800ee04:	b1b8      	cbz	r0, 800ee36 <get_serialized_size_geometry_msgs__msg__Vector3+0x32>
 800ee06:	b570      	push	{r4, r5, r6, lr}
 800ee08:	460d      	mov	r5, r1
 800ee0a:	4628      	mov	r0, r5
 800ee0c:	2108      	movs	r1, #8
 800ee0e:	f002 f9b7 	bl	8011180 <ucdr_alignment>
 800ee12:	2108      	movs	r1, #8
 800ee14:	186e      	adds	r6, r5, r1
 800ee16:	4406      	add	r6, r0
 800ee18:	4630      	mov	r0, r6
 800ee1a:	f002 f9b1 	bl	8011180 <ucdr_alignment>
 800ee1e:	f100 0408 	add.w	r4, r0, #8
 800ee22:	4434      	add	r4, r6
 800ee24:	2108      	movs	r1, #8
 800ee26:	4620      	mov	r0, r4
 800ee28:	f002 f9aa 	bl	8011180 <ucdr_alignment>
 800ee2c:	f1c5 0508 	rsb	r5, r5, #8
 800ee30:	4405      	add	r5, r0
 800ee32:	1928      	adds	r0, r5, r4
 800ee34:	bd70      	pop	{r4, r5, r6, pc}
 800ee36:	4770      	bx	lr

0800ee38 <_Vector3__cdr_deserialize>:
 800ee38:	b538      	push	{r3, r4, r5, lr}
 800ee3a:	460c      	mov	r4, r1
 800ee3c:	b171      	cbz	r1, 800ee5c <_Vector3__cdr_deserialize+0x24>
 800ee3e:	4605      	mov	r5, r0
 800ee40:	f001 ffc0 	bl	8010dc4 <ucdr_deserialize_double>
 800ee44:	f104 0108 	add.w	r1, r4, #8
 800ee48:	4628      	mov	r0, r5
 800ee4a:	f001 ffbb 	bl	8010dc4 <ucdr_deserialize_double>
 800ee4e:	f104 0110 	add.w	r1, r4, #16
 800ee52:	4628      	mov	r0, r5
 800ee54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ee58:	f001 bfb4 	b.w	8010dc4 <ucdr_deserialize_double>
 800ee5c:	4608      	mov	r0, r1
 800ee5e:	bd38      	pop	{r3, r4, r5, pc}

0800ee60 <_Vector3__cdr_serialize>:
 800ee60:	b198      	cbz	r0, 800ee8a <_Vector3__cdr_serialize+0x2a>
 800ee62:	b538      	push	{r3, r4, r5, lr}
 800ee64:	ed90 0b00 	vldr	d0, [r0]
 800ee68:	460d      	mov	r5, r1
 800ee6a:	4604      	mov	r4, r0
 800ee6c:	4608      	mov	r0, r1
 800ee6e:	f001 fe19 	bl	8010aa4 <ucdr_serialize_double>
 800ee72:	ed94 0b02 	vldr	d0, [r4, #8]
 800ee76:	4628      	mov	r0, r5
 800ee78:	f001 fe14 	bl	8010aa4 <ucdr_serialize_double>
 800ee7c:	ed94 0b04 	vldr	d0, [r4, #16]
 800ee80:	4628      	mov	r0, r5
 800ee82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ee86:	f001 be0d 	b.w	8010aa4 <ucdr_serialize_double>
 800ee8a:	4770      	bx	lr

0800ee8c <_Vector3__get_serialized_size>:
 800ee8c:	b1a0      	cbz	r0, 800eeb8 <_Vector3__get_serialized_size+0x2c>
 800ee8e:	b538      	push	{r3, r4, r5, lr}
 800ee90:	2108      	movs	r1, #8
 800ee92:	2000      	movs	r0, #0
 800ee94:	f002 f974 	bl	8011180 <ucdr_alignment>
 800ee98:	f100 0508 	add.w	r5, r0, #8
 800ee9c:	2108      	movs	r1, #8
 800ee9e:	4628      	mov	r0, r5
 800eea0:	f002 f96e 	bl	8011180 <ucdr_alignment>
 800eea4:	f100 0408 	add.w	r4, r0, #8
 800eea8:	442c      	add	r4, r5
 800eeaa:	2108      	movs	r1, #8
 800eeac:	4620      	mov	r0, r4
 800eeae:	f002 f967 	bl	8011180 <ucdr_alignment>
 800eeb2:	3008      	adds	r0, #8
 800eeb4:	4420      	add	r0, r4
 800eeb6:	bd38      	pop	{r3, r4, r5, pc}
 800eeb8:	4770      	bx	lr
 800eeba:	bf00      	nop

0800eebc <_Vector3__max_serialized_size>:
 800eebc:	b538      	push	{r3, r4, r5, lr}
 800eebe:	2108      	movs	r1, #8
 800eec0:	2000      	movs	r0, #0
 800eec2:	f002 f95d 	bl	8011180 <ucdr_alignment>
 800eec6:	f100 0508 	add.w	r5, r0, #8
 800eeca:	2108      	movs	r1, #8
 800eecc:	4628      	mov	r0, r5
 800eece:	f002 f957 	bl	8011180 <ucdr_alignment>
 800eed2:	f100 0408 	add.w	r4, r0, #8
 800eed6:	442c      	add	r4, r5
 800eed8:	2108      	movs	r1, #8
 800eeda:	4620      	mov	r0, r4
 800eedc:	f002 f950 	bl	8011180 <ucdr_alignment>
 800eee0:	3008      	adds	r0, #8
 800eee2:	4420      	add	r0, r4
 800eee4:	bd38      	pop	{r3, r4, r5, pc}
 800eee6:	bf00      	nop

0800eee8 <max_serialized_size_geometry_msgs__msg__Vector3>:
 800eee8:	b570      	push	{r4, r5, r6, lr}
 800eeea:	2301      	movs	r3, #1
 800eeec:	460c      	mov	r4, r1
 800eeee:	7003      	strb	r3, [r0, #0]
 800eef0:	2108      	movs	r1, #8
 800eef2:	4620      	mov	r0, r4
 800eef4:	f002 f944 	bl	8011180 <ucdr_alignment>
 800eef8:	2108      	movs	r1, #8
 800eefa:	1863      	adds	r3, r4, r1
 800eefc:	18c6      	adds	r6, r0, r3
 800eefe:	4630      	mov	r0, r6
 800ef00:	f002 f93e 	bl	8011180 <ucdr_alignment>
 800ef04:	f100 0508 	add.w	r5, r0, #8
 800ef08:	4435      	add	r5, r6
 800ef0a:	2108      	movs	r1, #8
 800ef0c:	4628      	mov	r0, r5
 800ef0e:	f002 f937 	bl	8011180 <ucdr_alignment>
 800ef12:	f1c4 0408 	rsb	r4, r4, #8
 800ef16:	4420      	add	r0, r4
 800ef18:	4428      	add	r0, r5
 800ef1a:	bd70      	pop	{r4, r5, r6, pc}

0800ef1c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800ef1c:	4800      	ldr	r0, [pc, #0]	@ (800ef20 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x4>)
 800ef1e:	4770      	bx	lr
 800ef20:	20000fdc 	.word	0x20000fdc

0800ef24 <micro_ros_string_utilities_init_with_size>:
 800ef24:	b570      	push	{r4, r5, r6, lr}
 800ef26:	460c      	mov	r4, r1
 800ef28:	b086      	sub	sp, #24
 800ef2a:	4605      	mov	r5, r0
 800ef2c:	3401      	adds	r4, #1
 800ef2e:	a801      	add	r0, sp, #4
 800ef30:	f7fe f938 	bl	800d1a4 <rcutils_get_default_allocator>
 800ef34:	9b01      	ldr	r3, [sp, #4]
 800ef36:	9905      	ldr	r1, [sp, #20]
 800ef38:	4620      	mov	r0, r4
 800ef3a:	4798      	blx	r3
 800ef3c:	4622      	mov	r2, r4
 800ef3e:	2100      	movs	r1, #0
 800ef40:	4606      	mov	r6, r0
 800ef42:	f00e fa75 	bl	801d430 <memset>
 800ef46:	2300      	movs	r3, #0
 800ef48:	4628      	mov	r0, r5
 800ef4a:	e9c5 6300 	strd	r6, r3, [r5]
 800ef4e:	60ac      	str	r4, [r5, #8]
 800ef50:	b006      	add	sp, #24
 800ef52:	bd70      	pop	{r4, r5, r6, pc}

0800ef54 <micro_ros_string_utilities_append>:
 800ef54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ef58:	b08a      	sub	sp, #40	@ 0x28
 800ef5a:	4604      	mov	r4, r0
 800ef5c:	f8dd 8048 	ldr.w	r8, [sp, #72]	@ 0x48
 800ef60:	a801      	add	r0, sp, #4
 800ef62:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800ef66:	a805      	add	r0, sp, #20
 800ef68:	f7fe f91c 	bl	800d1a4 <rcutils_get_default_allocator>
 800ef6c:	4640      	mov	r0, r8
 800ef6e:	f7f1 f9a7 	bl	80002c0 <strlen>
 800ef72:	e9dd 5901 	ldrd	r5, r9, [sp, #4]
 800ef76:	9f03      	ldr	r7, [sp, #12]
 800ef78:	eb00 0a09 	add.w	sl, r0, r9
 800ef7c:	45ba      	cmp	sl, r7
 800ef7e:	4606      	mov	r6, r0
 800ef80:	d307      	bcc.n	800ef92 <micro_ros_string_utilities_append+0x3e>
 800ef82:	f10a 0701 	add.w	r7, sl, #1
 800ef86:	4628      	mov	r0, r5
 800ef88:	9b07      	ldr	r3, [sp, #28]
 800ef8a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ef8c:	4639      	mov	r1, r7
 800ef8e:	4798      	blx	r3
 800ef90:	4605      	mov	r5, r0
 800ef92:	1c72      	adds	r2, r6, #1
 800ef94:	4641      	mov	r1, r8
 800ef96:	eb05 0009 	add.w	r0, r5, r9
 800ef9a:	f00e fade 	bl	801d55a <memcpy>
 800ef9e:	4620      	mov	r0, r4
 800efa0:	e9c4 5a00 	strd	r5, sl, [r4]
 800efa4:	60a7      	str	r7, [r4, #8]
 800efa6:	b00a      	add	sp, #40	@ 0x28
 800efa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800efac <micro_ros_string_utilities_remove_tail_chars>:
 800efac:	b500      	push	{lr}
 800efae:	b085      	sub	sp, #20
 800efb0:	f10d 0e04 	add.w	lr, sp, #4
 800efb4:	e88e 000e 	stmia.w	lr, {r1, r2, r3}
 800efb8:	4684      	mov	ip, r0
 800efba:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 800efbe:	e88c 000b 	stmia.w	ip, {r0, r1, r3}
 800efc2:	460b      	mov	r3, r1
 800efc4:	9906      	ldr	r1, [sp, #24]
 800efc6:	1a5b      	subs	r3, r3, r1
 800efc8:	9901      	ldr	r1, [sp, #4]
 800efca:	f8cc 3004 	str.w	r3, [ip, #4]
 800efce:	2200      	movs	r2, #0
 800efd0:	4660      	mov	r0, ip
 800efd2:	54ca      	strb	r2, [r1, r3]
 800efd4:	b005      	add	sp, #20
 800efd6:	f85d fb04 	ldr.w	pc, [sp], #4
 800efda:	bf00      	nop

0800efdc <micro_ros_string_utilities_destroy>:
 800efdc:	b510      	push	{r4, lr}
 800efde:	4604      	mov	r4, r0
 800efe0:	b086      	sub	sp, #24
 800efe2:	a801      	add	r0, sp, #4
 800efe4:	f7fe f8de 	bl	800d1a4 <rcutils_get_default_allocator>
 800efe8:	9b02      	ldr	r3, [sp, #8]
 800efea:	9905      	ldr	r1, [sp, #20]
 800efec:	6820      	ldr	r0, [r4, #0]
 800efee:	4798      	blx	r3
 800eff0:	2300      	movs	r3, #0
 800eff2:	e9c4 3300 	strd	r3, r3, [r4]
 800eff6:	60a3      	str	r3, [r4, #8]
 800eff8:	b006      	add	sp, #24
 800effa:	bd10      	pop	{r4, pc}

0800effc <ucdr_serialize_endian_array_char>:
 800effc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f000:	4619      	mov	r1, r3
 800f002:	461f      	mov	r7, r3
 800f004:	4605      	mov	r5, r0
 800f006:	4690      	mov	r8, r2
 800f008:	f002 f862 	bl	80110d0 <ucdr_check_buffer_available_for>
 800f00c:	b9e0      	cbnz	r0, 800f048 <ucdr_serialize_endian_array_char+0x4c>
 800f00e:	463e      	mov	r6, r7
 800f010:	e009      	b.n	800f026 <ucdr_serialize_endian_array_char+0x2a>
 800f012:	68a8      	ldr	r0, [r5, #8]
 800f014:	f00e faa1 	bl	801d55a <memcpy>
 800f018:	68ab      	ldr	r3, [r5, #8]
 800f01a:	6928      	ldr	r0, [r5, #16]
 800f01c:	4423      	add	r3, r4
 800f01e:	4420      	add	r0, r4
 800f020:	1b36      	subs	r6, r6, r4
 800f022:	60ab      	str	r3, [r5, #8]
 800f024:	6128      	str	r0, [r5, #16]
 800f026:	2201      	movs	r2, #1
 800f028:	4631      	mov	r1, r6
 800f02a:	4628      	mov	r0, r5
 800f02c:	f002 f8d8 	bl	80111e0 <ucdr_check_final_buffer_behavior_array>
 800f030:	1bb9      	subs	r1, r7, r6
 800f032:	4604      	mov	r4, r0
 800f034:	4602      	mov	r2, r0
 800f036:	4441      	add	r1, r8
 800f038:	2800      	cmp	r0, #0
 800f03a:	d1ea      	bne.n	800f012 <ucdr_serialize_endian_array_char+0x16>
 800f03c:	2301      	movs	r3, #1
 800f03e:	7da8      	ldrb	r0, [r5, #22]
 800f040:	756b      	strb	r3, [r5, #21]
 800f042:	4058      	eors	r0, r3
 800f044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f048:	463a      	mov	r2, r7
 800f04a:	68a8      	ldr	r0, [r5, #8]
 800f04c:	4641      	mov	r1, r8
 800f04e:	f00e fa84 	bl	801d55a <memcpy>
 800f052:	68aa      	ldr	r2, [r5, #8]
 800f054:	692b      	ldr	r3, [r5, #16]
 800f056:	443a      	add	r2, r7
 800f058:	443b      	add	r3, r7
 800f05a:	60aa      	str	r2, [r5, #8]
 800f05c:	612b      	str	r3, [r5, #16]
 800f05e:	e7ed      	b.n	800f03c <ucdr_serialize_endian_array_char+0x40>

0800f060 <ucdr_deserialize_endian_array_char>:
 800f060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f064:	4619      	mov	r1, r3
 800f066:	461f      	mov	r7, r3
 800f068:	4605      	mov	r5, r0
 800f06a:	4690      	mov	r8, r2
 800f06c:	f002 f830 	bl	80110d0 <ucdr_check_buffer_available_for>
 800f070:	b9e0      	cbnz	r0, 800f0ac <ucdr_deserialize_endian_array_char+0x4c>
 800f072:	463e      	mov	r6, r7
 800f074:	e009      	b.n	800f08a <ucdr_deserialize_endian_array_char+0x2a>
 800f076:	68a9      	ldr	r1, [r5, #8]
 800f078:	f00e fa6f 	bl	801d55a <memcpy>
 800f07c:	68aa      	ldr	r2, [r5, #8]
 800f07e:	692b      	ldr	r3, [r5, #16]
 800f080:	4422      	add	r2, r4
 800f082:	4423      	add	r3, r4
 800f084:	1b36      	subs	r6, r6, r4
 800f086:	60aa      	str	r2, [r5, #8]
 800f088:	612b      	str	r3, [r5, #16]
 800f08a:	2201      	movs	r2, #1
 800f08c:	4631      	mov	r1, r6
 800f08e:	4628      	mov	r0, r5
 800f090:	f002 f8a6 	bl	80111e0 <ucdr_check_final_buffer_behavior_array>
 800f094:	4604      	mov	r4, r0
 800f096:	1bb8      	subs	r0, r7, r6
 800f098:	4622      	mov	r2, r4
 800f09a:	4440      	add	r0, r8
 800f09c:	2c00      	cmp	r4, #0
 800f09e:	d1ea      	bne.n	800f076 <ucdr_deserialize_endian_array_char+0x16>
 800f0a0:	2301      	movs	r3, #1
 800f0a2:	7da8      	ldrb	r0, [r5, #22]
 800f0a4:	756b      	strb	r3, [r5, #21]
 800f0a6:	4058      	eors	r0, r3
 800f0a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f0ac:	463a      	mov	r2, r7
 800f0ae:	68a9      	ldr	r1, [r5, #8]
 800f0b0:	4640      	mov	r0, r8
 800f0b2:	f00e fa52 	bl	801d55a <memcpy>
 800f0b6:	68aa      	ldr	r2, [r5, #8]
 800f0b8:	692b      	ldr	r3, [r5, #16]
 800f0ba:	443a      	add	r2, r7
 800f0bc:	443b      	add	r3, r7
 800f0be:	60aa      	str	r2, [r5, #8]
 800f0c0:	612b      	str	r3, [r5, #16]
 800f0c2:	e7ed      	b.n	800f0a0 <ucdr_deserialize_endian_array_char+0x40>

0800f0c4 <ucdr_serialize_array_uint8_t>:
 800f0c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0c8:	4688      	mov	r8, r1
 800f0ca:	4611      	mov	r1, r2
 800f0cc:	4617      	mov	r7, r2
 800f0ce:	4605      	mov	r5, r0
 800f0d0:	f001 fffe 	bl	80110d0 <ucdr_check_buffer_available_for>
 800f0d4:	b9e0      	cbnz	r0, 800f110 <ucdr_serialize_array_uint8_t+0x4c>
 800f0d6:	463e      	mov	r6, r7
 800f0d8:	e009      	b.n	800f0ee <ucdr_serialize_array_uint8_t+0x2a>
 800f0da:	68a8      	ldr	r0, [r5, #8]
 800f0dc:	f00e fa3d 	bl	801d55a <memcpy>
 800f0e0:	68aa      	ldr	r2, [r5, #8]
 800f0e2:	692b      	ldr	r3, [r5, #16]
 800f0e4:	4422      	add	r2, r4
 800f0e6:	4423      	add	r3, r4
 800f0e8:	1b36      	subs	r6, r6, r4
 800f0ea:	60aa      	str	r2, [r5, #8]
 800f0ec:	612b      	str	r3, [r5, #16]
 800f0ee:	2201      	movs	r2, #1
 800f0f0:	4631      	mov	r1, r6
 800f0f2:	4628      	mov	r0, r5
 800f0f4:	f002 f874 	bl	80111e0 <ucdr_check_final_buffer_behavior_array>
 800f0f8:	1bb9      	subs	r1, r7, r6
 800f0fa:	4604      	mov	r4, r0
 800f0fc:	4602      	mov	r2, r0
 800f0fe:	4441      	add	r1, r8
 800f100:	2800      	cmp	r0, #0
 800f102:	d1ea      	bne.n	800f0da <ucdr_serialize_array_uint8_t+0x16>
 800f104:	2301      	movs	r3, #1
 800f106:	7da8      	ldrb	r0, [r5, #22]
 800f108:	756b      	strb	r3, [r5, #21]
 800f10a:	4058      	eors	r0, r3
 800f10c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f110:	463a      	mov	r2, r7
 800f112:	68a8      	ldr	r0, [r5, #8]
 800f114:	4641      	mov	r1, r8
 800f116:	f00e fa20 	bl	801d55a <memcpy>
 800f11a:	68aa      	ldr	r2, [r5, #8]
 800f11c:	692b      	ldr	r3, [r5, #16]
 800f11e:	443a      	add	r2, r7
 800f120:	443b      	add	r3, r7
 800f122:	60aa      	str	r2, [r5, #8]
 800f124:	612b      	str	r3, [r5, #16]
 800f126:	e7ed      	b.n	800f104 <ucdr_serialize_array_uint8_t+0x40>

0800f128 <ucdr_serialize_endian_array_uint8_t>:
 800f128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f12c:	4619      	mov	r1, r3
 800f12e:	461f      	mov	r7, r3
 800f130:	4605      	mov	r5, r0
 800f132:	4690      	mov	r8, r2
 800f134:	f001 ffcc 	bl	80110d0 <ucdr_check_buffer_available_for>
 800f138:	b9e0      	cbnz	r0, 800f174 <ucdr_serialize_endian_array_uint8_t+0x4c>
 800f13a:	463e      	mov	r6, r7
 800f13c:	e009      	b.n	800f152 <ucdr_serialize_endian_array_uint8_t+0x2a>
 800f13e:	68a8      	ldr	r0, [r5, #8]
 800f140:	f00e fa0b 	bl	801d55a <memcpy>
 800f144:	68ab      	ldr	r3, [r5, #8]
 800f146:	6928      	ldr	r0, [r5, #16]
 800f148:	4423      	add	r3, r4
 800f14a:	4420      	add	r0, r4
 800f14c:	1b36      	subs	r6, r6, r4
 800f14e:	60ab      	str	r3, [r5, #8]
 800f150:	6128      	str	r0, [r5, #16]
 800f152:	2201      	movs	r2, #1
 800f154:	4631      	mov	r1, r6
 800f156:	4628      	mov	r0, r5
 800f158:	f002 f842 	bl	80111e0 <ucdr_check_final_buffer_behavior_array>
 800f15c:	1bb9      	subs	r1, r7, r6
 800f15e:	4604      	mov	r4, r0
 800f160:	4602      	mov	r2, r0
 800f162:	4441      	add	r1, r8
 800f164:	2800      	cmp	r0, #0
 800f166:	d1ea      	bne.n	800f13e <ucdr_serialize_endian_array_uint8_t+0x16>
 800f168:	2301      	movs	r3, #1
 800f16a:	7da8      	ldrb	r0, [r5, #22]
 800f16c:	756b      	strb	r3, [r5, #21]
 800f16e:	4058      	eors	r0, r3
 800f170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f174:	463a      	mov	r2, r7
 800f176:	68a8      	ldr	r0, [r5, #8]
 800f178:	4641      	mov	r1, r8
 800f17a:	f00e f9ee 	bl	801d55a <memcpy>
 800f17e:	68aa      	ldr	r2, [r5, #8]
 800f180:	692b      	ldr	r3, [r5, #16]
 800f182:	443a      	add	r2, r7
 800f184:	443b      	add	r3, r7
 800f186:	60aa      	str	r2, [r5, #8]
 800f188:	612b      	str	r3, [r5, #16]
 800f18a:	e7ed      	b.n	800f168 <ucdr_serialize_endian_array_uint8_t+0x40>

0800f18c <ucdr_deserialize_array_uint8_t>:
 800f18c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f190:	4688      	mov	r8, r1
 800f192:	4611      	mov	r1, r2
 800f194:	4617      	mov	r7, r2
 800f196:	4605      	mov	r5, r0
 800f198:	f001 ff9a 	bl	80110d0 <ucdr_check_buffer_available_for>
 800f19c:	b9e0      	cbnz	r0, 800f1d8 <ucdr_deserialize_array_uint8_t+0x4c>
 800f19e:	463e      	mov	r6, r7
 800f1a0:	e009      	b.n	800f1b6 <ucdr_deserialize_array_uint8_t+0x2a>
 800f1a2:	68a9      	ldr	r1, [r5, #8]
 800f1a4:	f00e f9d9 	bl	801d55a <memcpy>
 800f1a8:	68aa      	ldr	r2, [r5, #8]
 800f1aa:	692b      	ldr	r3, [r5, #16]
 800f1ac:	4422      	add	r2, r4
 800f1ae:	4423      	add	r3, r4
 800f1b0:	1b36      	subs	r6, r6, r4
 800f1b2:	60aa      	str	r2, [r5, #8]
 800f1b4:	612b      	str	r3, [r5, #16]
 800f1b6:	2201      	movs	r2, #1
 800f1b8:	4631      	mov	r1, r6
 800f1ba:	4628      	mov	r0, r5
 800f1bc:	f002 f810 	bl	80111e0 <ucdr_check_final_buffer_behavior_array>
 800f1c0:	4604      	mov	r4, r0
 800f1c2:	1bb8      	subs	r0, r7, r6
 800f1c4:	4622      	mov	r2, r4
 800f1c6:	4440      	add	r0, r8
 800f1c8:	2c00      	cmp	r4, #0
 800f1ca:	d1ea      	bne.n	800f1a2 <ucdr_deserialize_array_uint8_t+0x16>
 800f1cc:	2301      	movs	r3, #1
 800f1ce:	7da8      	ldrb	r0, [r5, #22]
 800f1d0:	756b      	strb	r3, [r5, #21]
 800f1d2:	4058      	eors	r0, r3
 800f1d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f1d8:	463a      	mov	r2, r7
 800f1da:	68a9      	ldr	r1, [r5, #8]
 800f1dc:	4640      	mov	r0, r8
 800f1de:	f00e f9bc 	bl	801d55a <memcpy>
 800f1e2:	68aa      	ldr	r2, [r5, #8]
 800f1e4:	692b      	ldr	r3, [r5, #16]
 800f1e6:	443a      	add	r2, r7
 800f1e8:	443b      	add	r3, r7
 800f1ea:	60aa      	str	r2, [r5, #8]
 800f1ec:	612b      	str	r3, [r5, #16]
 800f1ee:	e7ed      	b.n	800f1cc <ucdr_deserialize_array_uint8_t+0x40>

0800f1f0 <ucdr_deserialize_endian_array_uint8_t>:
 800f1f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f1f4:	4619      	mov	r1, r3
 800f1f6:	461f      	mov	r7, r3
 800f1f8:	4605      	mov	r5, r0
 800f1fa:	4690      	mov	r8, r2
 800f1fc:	f001 ff68 	bl	80110d0 <ucdr_check_buffer_available_for>
 800f200:	b9e0      	cbnz	r0, 800f23c <ucdr_deserialize_endian_array_uint8_t+0x4c>
 800f202:	463e      	mov	r6, r7
 800f204:	e009      	b.n	800f21a <ucdr_deserialize_endian_array_uint8_t+0x2a>
 800f206:	68a9      	ldr	r1, [r5, #8]
 800f208:	f00e f9a7 	bl	801d55a <memcpy>
 800f20c:	68aa      	ldr	r2, [r5, #8]
 800f20e:	692b      	ldr	r3, [r5, #16]
 800f210:	4422      	add	r2, r4
 800f212:	4423      	add	r3, r4
 800f214:	1b36      	subs	r6, r6, r4
 800f216:	60aa      	str	r2, [r5, #8]
 800f218:	612b      	str	r3, [r5, #16]
 800f21a:	2201      	movs	r2, #1
 800f21c:	4631      	mov	r1, r6
 800f21e:	4628      	mov	r0, r5
 800f220:	f001 ffde 	bl	80111e0 <ucdr_check_final_buffer_behavior_array>
 800f224:	4604      	mov	r4, r0
 800f226:	1bb8      	subs	r0, r7, r6
 800f228:	4622      	mov	r2, r4
 800f22a:	4440      	add	r0, r8
 800f22c:	2c00      	cmp	r4, #0
 800f22e:	d1ea      	bne.n	800f206 <ucdr_deserialize_endian_array_uint8_t+0x16>
 800f230:	2301      	movs	r3, #1
 800f232:	7da8      	ldrb	r0, [r5, #22]
 800f234:	756b      	strb	r3, [r5, #21]
 800f236:	4058      	eors	r0, r3
 800f238:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f23c:	463a      	mov	r2, r7
 800f23e:	68a9      	ldr	r1, [r5, #8]
 800f240:	4640      	mov	r0, r8
 800f242:	f00e f98a 	bl	801d55a <memcpy>
 800f246:	68aa      	ldr	r2, [r5, #8]
 800f248:	692b      	ldr	r3, [r5, #16]
 800f24a:	443a      	add	r2, r7
 800f24c:	443b      	add	r3, r7
 800f24e:	60aa      	str	r2, [r5, #8]
 800f250:	612b      	str	r3, [r5, #16]
 800f252:	e7ed      	b.n	800f230 <ucdr_deserialize_endian_array_uint8_t+0x40>

0800f254 <ucdr_serialize_array_uint16_t>:
 800f254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f258:	460e      	mov	r6, r1
 800f25a:	2102      	movs	r1, #2
 800f25c:	4604      	mov	r4, r0
 800f25e:	4617      	mov	r7, r2
 800f260:	f001 ff96 	bl	8011190 <ucdr_buffer_alignment>
 800f264:	4601      	mov	r1, r0
 800f266:	4620      	mov	r0, r4
 800f268:	7d65      	ldrb	r5, [r4, #21]
 800f26a:	f001 ffd5 	bl	8011218 <ucdr_advance_buffer>
 800f26e:	7d21      	ldrb	r1, [r4, #20]
 800f270:	7565      	strb	r5, [r4, #21]
 800f272:	2901      	cmp	r1, #1
 800f274:	d011      	beq.n	800f29a <ucdr_serialize_array_uint16_t+0x46>
 800f276:	b15f      	cbz	r7, 800f290 <ucdr_serialize_array_uint16_t+0x3c>
 800f278:	3e02      	subs	r6, #2
 800f27a:	2500      	movs	r5, #0
 800f27c:	e000      	b.n	800f280 <ucdr_serialize_array_uint16_t+0x2c>
 800f27e:	7d21      	ldrb	r1, [r4, #20]
 800f280:	f836 2f02 	ldrh.w	r2, [r6, #2]!
 800f284:	4620      	mov	r0, r4
 800f286:	3501      	adds	r5, #1
 800f288:	f000 fac8 	bl	800f81c <ucdr_serialize_endian_uint16_t>
 800f28c:	42af      	cmp	r7, r5
 800f28e:	d1f6      	bne.n	800f27e <ucdr_serialize_array_uint16_t+0x2a>
 800f290:	7da0      	ldrb	r0, [r4, #22]
 800f292:	f080 0001 	eor.w	r0, r0, #1
 800f296:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f29a:	007f      	lsls	r7, r7, #1
 800f29c:	4639      	mov	r1, r7
 800f29e:	4620      	mov	r0, r4
 800f2a0:	f001 ff16 	bl	80110d0 <ucdr_check_buffer_available_for>
 800f2a4:	b9f8      	cbnz	r0, 800f2e6 <ucdr_serialize_array_uint16_t+0x92>
 800f2a6:	46b8      	mov	r8, r7
 800f2a8:	e00a      	b.n	800f2c0 <ucdr_serialize_array_uint16_t+0x6c>
 800f2aa:	68a0      	ldr	r0, [r4, #8]
 800f2ac:	f00e f955 	bl	801d55a <memcpy>
 800f2b0:	68a2      	ldr	r2, [r4, #8]
 800f2b2:	6923      	ldr	r3, [r4, #16]
 800f2b4:	442a      	add	r2, r5
 800f2b6:	442b      	add	r3, r5
 800f2b8:	eba8 0805 	sub.w	r8, r8, r5
 800f2bc:	60a2      	str	r2, [r4, #8]
 800f2be:	6123      	str	r3, [r4, #16]
 800f2c0:	2202      	movs	r2, #2
 800f2c2:	4641      	mov	r1, r8
 800f2c4:	4620      	mov	r0, r4
 800f2c6:	f001 ff8b 	bl	80111e0 <ucdr_check_final_buffer_behavior_array>
 800f2ca:	eba7 0108 	sub.w	r1, r7, r8
 800f2ce:	4605      	mov	r5, r0
 800f2d0:	4602      	mov	r2, r0
 800f2d2:	4431      	add	r1, r6
 800f2d4:	2800      	cmp	r0, #0
 800f2d6:	d1e8      	bne.n	800f2aa <ucdr_serialize_array_uint16_t+0x56>
 800f2d8:	7da0      	ldrb	r0, [r4, #22]
 800f2da:	2302      	movs	r3, #2
 800f2dc:	7563      	strb	r3, [r4, #21]
 800f2de:	f080 0001 	eor.w	r0, r0, #1
 800f2e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f2e6:	463a      	mov	r2, r7
 800f2e8:	68a0      	ldr	r0, [r4, #8]
 800f2ea:	4631      	mov	r1, r6
 800f2ec:	f00e f935 	bl	801d55a <memcpy>
 800f2f0:	68a2      	ldr	r2, [r4, #8]
 800f2f2:	6923      	ldr	r3, [r4, #16]
 800f2f4:	443a      	add	r2, r7
 800f2f6:	443b      	add	r3, r7
 800f2f8:	60a2      	str	r2, [r4, #8]
 800f2fa:	6123      	str	r3, [r4, #16]
 800f2fc:	e7ec      	b.n	800f2d8 <ucdr_serialize_array_uint16_t+0x84>
 800f2fe:	bf00      	nop

0800f300 <ucdr_deserialize_array_uint16_t>:
 800f300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f304:	460e      	mov	r6, r1
 800f306:	2102      	movs	r1, #2
 800f308:	4604      	mov	r4, r0
 800f30a:	4617      	mov	r7, r2
 800f30c:	f001 ff40 	bl	8011190 <ucdr_buffer_alignment>
 800f310:	4601      	mov	r1, r0
 800f312:	4620      	mov	r0, r4
 800f314:	7d65      	ldrb	r5, [r4, #21]
 800f316:	f001 ff7f 	bl	8011218 <ucdr_advance_buffer>
 800f31a:	7d21      	ldrb	r1, [r4, #20]
 800f31c:	7565      	strb	r5, [r4, #21]
 800f31e:	2901      	cmp	r1, #1
 800f320:	d011      	beq.n	800f346 <ucdr_deserialize_array_uint16_t+0x46>
 800f322:	b15f      	cbz	r7, 800f33c <ucdr_deserialize_array_uint16_t+0x3c>
 800f324:	2500      	movs	r5, #0
 800f326:	e000      	b.n	800f32a <ucdr_deserialize_array_uint16_t+0x2a>
 800f328:	7d21      	ldrb	r1, [r4, #20]
 800f32a:	4632      	mov	r2, r6
 800f32c:	4620      	mov	r0, r4
 800f32e:	3501      	adds	r5, #1
 800f330:	f000 fb6a 	bl	800fa08 <ucdr_deserialize_endian_uint16_t>
 800f334:	42af      	cmp	r7, r5
 800f336:	f106 0602 	add.w	r6, r6, #2
 800f33a:	d1f5      	bne.n	800f328 <ucdr_deserialize_array_uint16_t+0x28>
 800f33c:	7da0      	ldrb	r0, [r4, #22]
 800f33e:	f080 0001 	eor.w	r0, r0, #1
 800f342:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f346:	007f      	lsls	r7, r7, #1
 800f348:	4639      	mov	r1, r7
 800f34a:	4620      	mov	r0, r4
 800f34c:	f001 fec0 	bl	80110d0 <ucdr_check_buffer_available_for>
 800f350:	b9f8      	cbnz	r0, 800f392 <ucdr_deserialize_array_uint16_t+0x92>
 800f352:	46b8      	mov	r8, r7
 800f354:	e00a      	b.n	800f36c <ucdr_deserialize_array_uint16_t+0x6c>
 800f356:	68a1      	ldr	r1, [r4, #8]
 800f358:	f00e f8ff 	bl	801d55a <memcpy>
 800f35c:	68a2      	ldr	r2, [r4, #8]
 800f35e:	6923      	ldr	r3, [r4, #16]
 800f360:	442a      	add	r2, r5
 800f362:	442b      	add	r3, r5
 800f364:	eba8 0805 	sub.w	r8, r8, r5
 800f368:	60a2      	str	r2, [r4, #8]
 800f36a:	6123      	str	r3, [r4, #16]
 800f36c:	2202      	movs	r2, #2
 800f36e:	4641      	mov	r1, r8
 800f370:	4620      	mov	r0, r4
 800f372:	f001 ff35 	bl	80111e0 <ucdr_check_final_buffer_behavior_array>
 800f376:	4605      	mov	r5, r0
 800f378:	eba7 0008 	sub.w	r0, r7, r8
 800f37c:	462a      	mov	r2, r5
 800f37e:	4430      	add	r0, r6
 800f380:	2d00      	cmp	r5, #0
 800f382:	d1e8      	bne.n	800f356 <ucdr_deserialize_array_uint16_t+0x56>
 800f384:	7da0      	ldrb	r0, [r4, #22]
 800f386:	2302      	movs	r3, #2
 800f388:	7563      	strb	r3, [r4, #21]
 800f38a:	f080 0001 	eor.w	r0, r0, #1
 800f38e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f392:	463a      	mov	r2, r7
 800f394:	68a1      	ldr	r1, [r4, #8]
 800f396:	4630      	mov	r0, r6
 800f398:	f00e f8df 	bl	801d55a <memcpy>
 800f39c:	68a2      	ldr	r2, [r4, #8]
 800f39e:	6923      	ldr	r3, [r4, #16]
 800f3a0:	443a      	add	r2, r7
 800f3a2:	443b      	add	r3, r7
 800f3a4:	60a2      	str	r2, [r4, #8]
 800f3a6:	6123      	str	r3, [r4, #16]
 800f3a8:	e7ec      	b.n	800f384 <ucdr_deserialize_array_uint16_t+0x84>
 800f3aa:	bf00      	nop

0800f3ac <ucdr_serialize_array_float>:
 800f3ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f3b0:	460e      	mov	r6, r1
 800f3b2:	2104      	movs	r1, #4
 800f3b4:	4604      	mov	r4, r0
 800f3b6:	4617      	mov	r7, r2
 800f3b8:	f001 feea 	bl	8011190 <ucdr_buffer_alignment>
 800f3bc:	4601      	mov	r1, r0
 800f3be:	4620      	mov	r0, r4
 800f3c0:	7d65      	ldrb	r5, [r4, #21]
 800f3c2:	f001 ff29 	bl	8011218 <ucdr_advance_buffer>
 800f3c6:	7d21      	ldrb	r1, [r4, #20]
 800f3c8:	7565      	strb	r5, [r4, #21]
 800f3ca:	2901      	cmp	r1, #1
 800f3cc:	d010      	beq.n	800f3f0 <ucdr_serialize_array_float+0x44>
 800f3ce:	b157      	cbz	r7, 800f3e6 <ucdr_serialize_array_float+0x3a>
 800f3d0:	2500      	movs	r5, #0
 800f3d2:	e000      	b.n	800f3d6 <ucdr_serialize_array_float+0x2a>
 800f3d4:	7d21      	ldrb	r1, [r4, #20]
 800f3d6:	ecb6 0a01 	vldmia	r6!, {s0}
 800f3da:	4620      	mov	r0, r4
 800f3dc:	3501      	adds	r5, #1
 800f3de:	f001 fa43 	bl	8010868 <ucdr_serialize_endian_float>
 800f3e2:	42af      	cmp	r7, r5
 800f3e4:	d1f6      	bne.n	800f3d4 <ucdr_serialize_array_float+0x28>
 800f3e6:	7da0      	ldrb	r0, [r4, #22]
 800f3e8:	f080 0001 	eor.w	r0, r0, #1
 800f3ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f3f0:	00bf      	lsls	r7, r7, #2
 800f3f2:	4639      	mov	r1, r7
 800f3f4:	4620      	mov	r0, r4
 800f3f6:	f001 fe6b 	bl	80110d0 <ucdr_check_buffer_available_for>
 800f3fa:	b9f8      	cbnz	r0, 800f43c <ucdr_serialize_array_float+0x90>
 800f3fc:	46b8      	mov	r8, r7
 800f3fe:	e00a      	b.n	800f416 <ucdr_serialize_array_float+0x6a>
 800f400:	68a0      	ldr	r0, [r4, #8]
 800f402:	f00e f8aa 	bl	801d55a <memcpy>
 800f406:	68a2      	ldr	r2, [r4, #8]
 800f408:	6923      	ldr	r3, [r4, #16]
 800f40a:	442a      	add	r2, r5
 800f40c:	442b      	add	r3, r5
 800f40e:	eba8 0805 	sub.w	r8, r8, r5
 800f412:	60a2      	str	r2, [r4, #8]
 800f414:	6123      	str	r3, [r4, #16]
 800f416:	2204      	movs	r2, #4
 800f418:	4641      	mov	r1, r8
 800f41a:	4620      	mov	r0, r4
 800f41c:	f001 fee0 	bl	80111e0 <ucdr_check_final_buffer_behavior_array>
 800f420:	eba7 0108 	sub.w	r1, r7, r8
 800f424:	4605      	mov	r5, r0
 800f426:	4602      	mov	r2, r0
 800f428:	4431      	add	r1, r6
 800f42a:	2800      	cmp	r0, #0
 800f42c:	d1e8      	bne.n	800f400 <ucdr_serialize_array_float+0x54>
 800f42e:	7da0      	ldrb	r0, [r4, #22]
 800f430:	2304      	movs	r3, #4
 800f432:	7563      	strb	r3, [r4, #21]
 800f434:	f080 0001 	eor.w	r0, r0, #1
 800f438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f43c:	463a      	mov	r2, r7
 800f43e:	68a0      	ldr	r0, [r4, #8]
 800f440:	4631      	mov	r1, r6
 800f442:	f00e f88a 	bl	801d55a <memcpy>
 800f446:	68a2      	ldr	r2, [r4, #8]
 800f448:	6923      	ldr	r3, [r4, #16]
 800f44a:	443a      	add	r2, r7
 800f44c:	443b      	add	r3, r7
 800f44e:	60a2      	str	r2, [r4, #8]
 800f450:	6123      	str	r3, [r4, #16]
 800f452:	e7ec      	b.n	800f42e <ucdr_serialize_array_float+0x82>

0800f454 <ucdr_deserialize_array_float>:
 800f454:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f458:	460e      	mov	r6, r1
 800f45a:	2104      	movs	r1, #4
 800f45c:	4604      	mov	r4, r0
 800f45e:	4617      	mov	r7, r2
 800f460:	f001 fe96 	bl	8011190 <ucdr_buffer_alignment>
 800f464:	4601      	mov	r1, r0
 800f466:	4620      	mov	r0, r4
 800f468:	7d65      	ldrb	r5, [r4, #21]
 800f46a:	f001 fed5 	bl	8011218 <ucdr_advance_buffer>
 800f46e:	7d21      	ldrb	r1, [r4, #20]
 800f470:	7565      	strb	r5, [r4, #21]
 800f472:	2901      	cmp	r1, #1
 800f474:	d011      	beq.n	800f49a <ucdr_deserialize_array_float+0x46>
 800f476:	b15f      	cbz	r7, 800f490 <ucdr_deserialize_array_float+0x3c>
 800f478:	2500      	movs	r5, #0
 800f47a:	e000      	b.n	800f47e <ucdr_deserialize_array_float+0x2a>
 800f47c:	7d21      	ldrb	r1, [r4, #20]
 800f47e:	4632      	mov	r2, r6
 800f480:	4620      	mov	r0, r4
 800f482:	3501      	adds	r5, #1
 800f484:	f001 fa82 	bl	801098c <ucdr_deserialize_endian_float>
 800f488:	42af      	cmp	r7, r5
 800f48a:	f106 0604 	add.w	r6, r6, #4
 800f48e:	d1f5      	bne.n	800f47c <ucdr_deserialize_array_float+0x28>
 800f490:	7da0      	ldrb	r0, [r4, #22]
 800f492:	f080 0001 	eor.w	r0, r0, #1
 800f496:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f49a:	00bf      	lsls	r7, r7, #2
 800f49c:	4639      	mov	r1, r7
 800f49e:	4620      	mov	r0, r4
 800f4a0:	f001 fe16 	bl	80110d0 <ucdr_check_buffer_available_for>
 800f4a4:	b9f8      	cbnz	r0, 800f4e6 <ucdr_deserialize_array_float+0x92>
 800f4a6:	46b8      	mov	r8, r7
 800f4a8:	e00a      	b.n	800f4c0 <ucdr_deserialize_array_float+0x6c>
 800f4aa:	68a1      	ldr	r1, [r4, #8]
 800f4ac:	f00e f855 	bl	801d55a <memcpy>
 800f4b0:	68a2      	ldr	r2, [r4, #8]
 800f4b2:	6923      	ldr	r3, [r4, #16]
 800f4b4:	442a      	add	r2, r5
 800f4b6:	442b      	add	r3, r5
 800f4b8:	eba8 0805 	sub.w	r8, r8, r5
 800f4bc:	60a2      	str	r2, [r4, #8]
 800f4be:	6123      	str	r3, [r4, #16]
 800f4c0:	2204      	movs	r2, #4
 800f4c2:	4641      	mov	r1, r8
 800f4c4:	4620      	mov	r0, r4
 800f4c6:	f001 fe8b 	bl	80111e0 <ucdr_check_final_buffer_behavior_array>
 800f4ca:	4605      	mov	r5, r0
 800f4cc:	eba7 0008 	sub.w	r0, r7, r8
 800f4d0:	462a      	mov	r2, r5
 800f4d2:	4430      	add	r0, r6
 800f4d4:	2d00      	cmp	r5, #0
 800f4d6:	d1e8      	bne.n	800f4aa <ucdr_deserialize_array_float+0x56>
 800f4d8:	7da0      	ldrb	r0, [r4, #22]
 800f4da:	2304      	movs	r3, #4
 800f4dc:	7563      	strb	r3, [r4, #21]
 800f4de:	f080 0001 	eor.w	r0, r0, #1
 800f4e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f4e6:	463a      	mov	r2, r7
 800f4e8:	68a1      	ldr	r1, [r4, #8]
 800f4ea:	4630      	mov	r0, r6
 800f4ec:	f00e f835 	bl	801d55a <memcpy>
 800f4f0:	68a2      	ldr	r2, [r4, #8]
 800f4f2:	6923      	ldr	r3, [r4, #16]
 800f4f4:	443a      	add	r2, r7
 800f4f6:	443b      	add	r3, r7
 800f4f8:	60a2      	str	r2, [r4, #8]
 800f4fa:	6123      	str	r3, [r4, #16]
 800f4fc:	e7ec      	b.n	800f4d8 <ucdr_deserialize_array_float+0x84>
 800f4fe:	bf00      	nop

0800f500 <ucdr_serialize_array_double>:
 800f500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f504:	460e      	mov	r6, r1
 800f506:	2108      	movs	r1, #8
 800f508:	4604      	mov	r4, r0
 800f50a:	4617      	mov	r7, r2
 800f50c:	f001 fe40 	bl	8011190 <ucdr_buffer_alignment>
 800f510:	4601      	mov	r1, r0
 800f512:	4620      	mov	r0, r4
 800f514:	7d65      	ldrb	r5, [r4, #21]
 800f516:	f001 fe7f 	bl	8011218 <ucdr_advance_buffer>
 800f51a:	7d21      	ldrb	r1, [r4, #20]
 800f51c:	7565      	strb	r5, [r4, #21]
 800f51e:	2901      	cmp	r1, #1
 800f520:	d010      	beq.n	800f544 <ucdr_serialize_array_double+0x44>
 800f522:	b157      	cbz	r7, 800f53a <ucdr_serialize_array_double+0x3a>
 800f524:	2500      	movs	r5, #0
 800f526:	e000      	b.n	800f52a <ucdr_serialize_array_double+0x2a>
 800f528:	7d21      	ldrb	r1, [r4, #20]
 800f52a:	ecb6 0b02 	vldmia	r6!, {d0}
 800f52e:	4620      	mov	r0, r4
 800f530:	3501      	adds	r5, #1
 800f532:	f001 fb7f 	bl	8010c34 <ucdr_serialize_endian_double>
 800f536:	42af      	cmp	r7, r5
 800f538:	d1f6      	bne.n	800f528 <ucdr_serialize_array_double+0x28>
 800f53a:	7da0      	ldrb	r0, [r4, #22]
 800f53c:	f080 0001 	eor.w	r0, r0, #1
 800f540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f544:	00ff      	lsls	r7, r7, #3
 800f546:	4639      	mov	r1, r7
 800f548:	4620      	mov	r0, r4
 800f54a:	f001 fdc1 	bl	80110d0 <ucdr_check_buffer_available_for>
 800f54e:	b9f8      	cbnz	r0, 800f590 <ucdr_serialize_array_double+0x90>
 800f550:	46b8      	mov	r8, r7
 800f552:	e00a      	b.n	800f56a <ucdr_serialize_array_double+0x6a>
 800f554:	68a0      	ldr	r0, [r4, #8]
 800f556:	f00e f800 	bl	801d55a <memcpy>
 800f55a:	68a2      	ldr	r2, [r4, #8]
 800f55c:	6923      	ldr	r3, [r4, #16]
 800f55e:	442a      	add	r2, r5
 800f560:	442b      	add	r3, r5
 800f562:	eba8 0805 	sub.w	r8, r8, r5
 800f566:	60a2      	str	r2, [r4, #8]
 800f568:	6123      	str	r3, [r4, #16]
 800f56a:	2208      	movs	r2, #8
 800f56c:	4641      	mov	r1, r8
 800f56e:	4620      	mov	r0, r4
 800f570:	f001 fe36 	bl	80111e0 <ucdr_check_final_buffer_behavior_array>
 800f574:	eba7 0108 	sub.w	r1, r7, r8
 800f578:	4605      	mov	r5, r0
 800f57a:	4602      	mov	r2, r0
 800f57c:	4431      	add	r1, r6
 800f57e:	2800      	cmp	r0, #0
 800f580:	d1e8      	bne.n	800f554 <ucdr_serialize_array_double+0x54>
 800f582:	7da0      	ldrb	r0, [r4, #22]
 800f584:	2308      	movs	r3, #8
 800f586:	7563      	strb	r3, [r4, #21]
 800f588:	f080 0001 	eor.w	r0, r0, #1
 800f58c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f590:	463a      	mov	r2, r7
 800f592:	68a0      	ldr	r0, [r4, #8]
 800f594:	4631      	mov	r1, r6
 800f596:	f00d ffe0 	bl	801d55a <memcpy>
 800f59a:	68a2      	ldr	r2, [r4, #8]
 800f59c:	6923      	ldr	r3, [r4, #16]
 800f59e:	443a      	add	r2, r7
 800f5a0:	443b      	add	r3, r7
 800f5a2:	60a2      	str	r2, [r4, #8]
 800f5a4:	6123      	str	r3, [r4, #16]
 800f5a6:	e7ec      	b.n	800f582 <ucdr_serialize_array_double+0x82>

0800f5a8 <ucdr_deserialize_array_double>:
 800f5a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f5ac:	460e      	mov	r6, r1
 800f5ae:	2108      	movs	r1, #8
 800f5b0:	4604      	mov	r4, r0
 800f5b2:	4617      	mov	r7, r2
 800f5b4:	f001 fdec 	bl	8011190 <ucdr_buffer_alignment>
 800f5b8:	4601      	mov	r1, r0
 800f5ba:	4620      	mov	r0, r4
 800f5bc:	7d65      	ldrb	r5, [r4, #21]
 800f5be:	f001 fe2b 	bl	8011218 <ucdr_advance_buffer>
 800f5c2:	7d21      	ldrb	r1, [r4, #20]
 800f5c4:	7565      	strb	r5, [r4, #21]
 800f5c6:	2901      	cmp	r1, #1
 800f5c8:	d011      	beq.n	800f5ee <ucdr_deserialize_array_double+0x46>
 800f5ca:	b15f      	cbz	r7, 800f5e4 <ucdr_deserialize_array_double+0x3c>
 800f5cc:	2500      	movs	r5, #0
 800f5ce:	e000      	b.n	800f5d2 <ucdr_deserialize_array_double+0x2a>
 800f5d0:	7d21      	ldrb	r1, [r4, #20]
 800f5d2:	4632      	mov	r2, r6
 800f5d4:	4620      	mov	r0, r4
 800f5d6:	3501      	adds	r5, #1
 800f5d8:	f001 fcb2 	bl	8010f40 <ucdr_deserialize_endian_double>
 800f5dc:	42af      	cmp	r7, r5
 800f5de:	f106 0608 	add.w	r6, r6, #8
 800f5e2:	d1f5      	bne.n	800f5d0 <ucdr_deserialize_array_double+0x28>
 800f5e4:	7da0      	ldrb	r0, [r4, #22]
 800f5e6:	f080 0001 	eor.w	r0, r0, #1
 800f5ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f5ee:	00ff      	lsls	r7, r7, #3
 800f5f0:	4639      	mov	r1, r7
 800f5f2:	4620      	mov	r0, r4
 800f5f4:	f001 fd6c 	bl	80110d0 <ucdr_check_buffer_available_for>
 800f5f8:	b9f8      	cbnz	r0, 800f63a <ucdr_deserialize_array_double+0x92>
 800f5fa:	46b8      	mov	r8, r7
 800f5fc:	e00a      	b.n	800f614 <ucdr_deserialize_array_double+0x6c>
 800f5fe:	68a1      	ldr	r1, [r4, #8]
 800f600:	f00d ffab 	bl	801d55a <memcpy>
 800f604:	68a2      	ldr	r2, [r4, #8]
 800f606:	6923      	ldr	r3, [r4, #16]
 800f608:	442a      	add	r2, r5
 800f60a:	442b      	add	r3, r5
 800f60c:	eba8 0805 	sub.w	r8, r8, r5
 800f610:	60a2      	str	r2, [r4, #8]
 800f612:	6123      	str	r3, [r4, #16]
 800f614:	2208      	movs	r2, #8
 800f616:	4641      	mov	r1, r8
 800f618:	4620      	mov	r0, r4
 800f61a:	f001 fde1 	bl	80111e0 <ucdr_check_final_buffer_behavior_array>
 800f61e:	4605      	mov	r5, r0
 800f620:	eba7 0008 	sub.w	r0, r7, r8
 800f624:	462a      	mov	r2, r5
 800f626:	4430      	add	r0, r6
 800f628:	2d00      	cmp	r5, #0
 800f62a:	d1e8      	bne.n	800f5fe <ucdr_deserialize_array_double+0x56>
 800f62c:	7da0      	ldrb	r0, [r4, #22]
 800f62e:	2308      	movs	r3, #8
 800f630:	7563      	strb	r3, [r4, #21]
 800f632:	f080 0001 	eor.w	r0, r0, #1
 800f636:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f63a:	463a      	mov	r2, r7
 800f63c:	68a1      	ldr	r1, [r4, #8]
 800f63e:	4630      	mov	r0, r6
 800f640:	f00d ff8b 	bl	801d55a <memcpy>
 800f644:	68a2      	ldr	r2, [r4, #8]
 800f646:	6923      	ldr	r3, [r4, #16]
 800f648:	443a      	add	r2, r7
 800f64a:	443b      	add	r3, r7
 800f64c:	60a2      	str	r2, [r4, #8]
 800f64e:	6123      	str	r3, [r4, #16]
 800f650:	e7ec      	b.n	800f62c <ucdr_deserialize_array_double+0x84>
 800f652:	bf00      	nop

0800f654 <ucdr_serialize_bool>:
 800f654:	b538      	push	{r3, r4, r5, lr}
 800f656:	460d      	mov	r5, r1
 800f658:	2101      	movs	r1, #1
 800f65a:	4604      	mov	r4, r0
 800f65c:	f001 fd44 	bl	80110e8 <ucdr_check_final_buffer_behavior>
 800f660:	b148      	cbz	r0, 800f676 <ucdr_serialize_bool+0x22>
 800f662:	68a3      	ldr	r3, [r4, #8]
 800f664:	701d      	strb	r5, [r3, #0]
 800f666:	68a2      	ldr	r2, [r4, #8]
 800f668:	6923      	ldr	r3, [r4, #16]
 800f66a:	2101      	movs	r1, #1
 800f66c:	440a      	add	r2, r1
 800f66e:	440b      	add	r3, r1
 800f670:	60a2      	str	r2, [r4, #8]
 800f672:	6123      	str	r3, [r4, #16]
 800f674:	7561      	strb	r1, [r4, #21]
 800f676:	7da0      	ldrb	r0, [r4, #22]
 800f678:	f080 0001 	eor.w	r0, r0, #1
 800f67c:	bd38      	pop	{r3, r4, r5, pc}
 800f67e:	bf00      	nop

0800f680 <ucdr_deserialize_bool>:
 800f680:	b538      	push	{r3, r4, r5, lr}
 800f682:	460d      	mov	r5, r1
 800f684:	2101      	movs	r1, #1
 800f686:	4604      	mov	r4, r0
 800f688:	f001 fd2e 	bl	80110e8 <ucdr_check_final_buffer_behavior>
 800f68c:	b160      	cbz	r0, 800f6a8 <ucdr_deserialize_bool+0x28>
 800f68e:	68a2      	ldr	r2, [r4, #8]
 800f690:	6923      	ldr	r3, [r4, #16]
 800f692:	f812 1b01 	ldrb.w	r1, [r2], #1
 800f696:	3900      	subs	r1, #0
 800f698:	bf18      	it	ne
 800f69a:	2101      	movne	r1, #1
 800f69c:	7029      	strb	r1, [r5, #0]
 800f69e:	3301      	adds	r3, #1
 800f6a0:	2101      	movs	r1, #1
 800f6a2:	60a2      	str	r2, [r4, #8]
 800f6a4:	6123      	str	r3, [r4, #16]
 800f6a6:	7561      	strb	r1, [r4, #21]
 800f6a8:	7da0      	ldrb	r0, [r4, #22]
 800f6aa:	f080 0001 	eor.w	r0, r0, #1
 800f6ae:	bd38      	pop	{r3, r4, r5, pc}

0800f6b0 <ucdr_serialize_uint8_t>:
 800f6b0:	b538      	push	{r3, r4, r5, lr}
 800f6b2:	460d      	mov	r5, r1
 800f6b4:	2101      	movs	r1, #1
 800f6b6:	4604      	mov	r4, r0
 800f6b8:	f001 fd16 	bl	80110e8 <ucdr_check_final_buffer_behavior>
 800f6bc:	b148      	cbz	r0, 800f6d2 <ucdr_serialize_uint8_t+0x22>
 800f6be:	68a3      	ldr	r3, [r4, #8]
 800f6c0:	701d      	strb	r5, [r3, #0]
 800f6c2:	68a2      	ldr	r2, [r4, #8]
 800f6c4:	6923      	ldr	r3, [r4, #16]
 800f6c6:	2101      	movs	r1, #1
 800f6c8:	440a      	add	r2, r1
 800f6ca:	440b      	add	r3, r1
 800f6cc:	60a2      	str	r2, [r4, #8]
 800f6ce:	6123      	str	r3, [r4, #16]
 800f6d0:	7561      	strb	r1, [r4, #21]
 800f6d2:	7da0      	ldrb	r0, [r4, #22]
 800f6d4:	f080 0001 	eor.w	r0, r0, #1
 800f6d8:	bd38      	pop	{r3, r4, r5, pc}
 800f6da:	bf00      	nop

0800f6dc <ucdr_deserialize_uint8_t>:
 800f6dc:	b538      	push	{r3, r4, r5, lr}
 800f6de:	460d      	mov	r5, r1
 800f6e0:	2101      	movs	r1, #1
 800f6e2:	4604      	mov	r4, r0
 800f6e4:	f001 fd00 	bl	80110e8 <ucdr_check_final_buffer_behavior>
 800f6e8:	b150      	cbz	r0, 800f700 <ucdr_deserialize_uint8_t+0x24>
 800f6ea:	68a3      	ldr	r3, [r4, #8]
 800f6ec:	781b      	ldrb	r3, [r3, #0]
 800f6ee:	702b      	strb	r3, [r5, #0]
 800f6f0:	68a2      	ldr	r2, [r4, #8]
 800f6f2:	6923      	ldr	r3, [r4, #16]
 800f6f4:	2101      	movs	r1, #1
 800f6f6:	440a      	add	r2, r1
 800f6f8:	440b      	add	r3, r1
 800f6fa:	60a2      	str	r2, [r4, #8]
 800f6fc:	6123      	str	r3, [r4, #16]
 800f6fe:	7561      	strb	r1, [r4, #21]
 800f700:	7da0      	ldrb	r0, [r4, #22]
 800f702:	f080 0001 	eor.w	r0, r0, #1
 800f706:	bd38      	pop	{r3, r4, r5, pc}

0800f708 <ucdr_serialize_uint16_t>:
 800f708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f70c:	b082      	sub	sp, #8
 800f70e:	460b      	mov	r3, r1
 800f710:	2102      	movs	r1, #2
 800f712:	4604      	mov	r4, r0
 800f714:	f8ad 3006 	strh.w	r3, [sp, #6]
 800f718:	f001 fd3a 	bl	8011190 <ucdr_buffer_alignment>
 800f71c:	4601      	mov	r1, r0
 800f71e:	4620      	mov	r0, r4
 800f720:	7d67      	ldrb	r7, [r4, #21]
 800f722:	f001 fd79 	bl	8011218 <ucdr_advance_buffer>
 800f726:	2102      	movs	r1, #2
 800f728:	4620      	mov	r0, r4
 800f72a:	f001 fcd1 	bl	80110d0 <ucdr_check_buffer_available_for>
 800f72e:	b1c0      	cbz	r0, 800f762 <ucdr_serialize_uint16_t+0x5a>
 800f730:	7d22      	ldrb	r2, [r4, #20]
 800f732:	68a3      	ldr	r3, [r4, #8]
 800f734:	2a01      	cmp	r2, #1
 800f736:	d04e      	beq.n	800f7d6 <ucdr_serialize_uint16_t+0xce>
 800f738:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800f73c:	701a      	strb	r2, [r3, #0]
 800f73e:	68a3      	ldr	r3, [r4, #8]
 800f740:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f744:	705a      	strb	r2, [r3, #1]
 800f746:	68a2      	ldr	r2, [r4, #8]
 800f748:	6923      	ldr	r3, [r4, #16]
 800f74a:	3202      	adds	r2, #2
 800f74c:	3302      	adds	r3, #2
 800f74e:	2102      	movs	r1, #2
 800f750:	60a2      	str	r2, [r4, #8]
 800f752:	6123      	str	r3, [r4, #16]
 800f754:	7561      	strb	r1, [r4, #21]
 800f756:	7da0      	ldrb	r0, [r4, #22]
 800f758:	f080 0001 	eor.w	r0, r0, #1
 800f75c:	b002      	add	sp, #8
 800f75e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f762:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800f766:	42ab      	cmp	r3, r5
 800f768:	d923      	bls.n	800f7b2 <ucdr_serialize_uint16_t+0xaa>
 800f76a:	1b5e      	subs	r6, r3, r5
 800f76c:	60a3      	str	r3, [r4, #8]
 800f76e:	6923      	ldr	r3, [r4, #16]
 800f770:	f1c6 0802 	rsb	r8, r6, #2
 800f774:	4433      	add	r3, r6
 800f776:	6123      	str	r3, [r4, #16]
 800f778:	4641      	mov	r1, r8
 800f77a:	4620      	mov	r0, r4
 800f77c:	f001 fcb4 	bl	80110e8 <ucdr_check_final_buffer_behavior>
 800f780:	b368      	cbz	r0, 800f7de <ucdr_serialize_uint16_t+0xd6>
 800f782:	7d23      	ldrb	r3, [r4, #20]
 800f784:	2b01      	cmp	r3, #1
 800f786:	d03b      	beq.n	800f800 <ucdr_serialize_uint16_t+0xf8>
 800f788:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f78c:	702b      	strb	r3, [r5, #0]
 800f78e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f792:	706b      	strb	r3, [r5, #1]
 800f794:	6923      	ldr	r3, [r4, #16]
 800f796:	68a2      	ldr	r2, [r4, #8]
 800f798:	7da0      	ldrb	r0, [r4, #22]
 800f79a:	3302      	adds	r3, #2
 800f79c:	4442      	add	r2, r8
 800f79e:	1b9b      	subs	r3, r3, r6
 800f7a0:	2102      	movs	r1, #2
 800f7a2:	f080 0001 	eor.w	r0, r0, #1
 800f7a6:	60a2      	str	r2, [r4, #8]
 800f7a8:	6123      	str	r3, [r4, #16]
 800f7aa:	7561      	strb	r1, [r4, #21]
 800f7ac:	b002      	add	sp, #8
 800f7ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f7b2:	2102      	movs	r1, #2
 800f7b4:	4620      	mov	r0, r4
 800f7b6:	f001 fc97 	bl	80110e8 <ucdr_check_final_buffer_behavior>
 800f7ba:	2800      	cmp	r0, #0
 800f7bc:	d0cb      	beq.n	800f756 <ucdr_serialize_uint16_t+0x4e>
 800f7be:	7d23      	ldrb	r3, [r4, #20]
 800f7c0:	68a2      	ldr	r2, [r4, #8]
 800f7c2:	2b01      	cmp	r3, #1
 800f7c4:	d018      	beq.n	800f7f8 <ucdr_serialize_uint16_t+0xf0>
 800f7c6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f7ca:	7013      	strb	r3, [r2, #0]
 800f7cc:	68a3      	ldr	r3, [r4, #8]
 800f7ce:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f7d2:	705a      	strb	r2, [r3, #1]
 800f7d4:	e7b7      	b.n	800f746 <ucdr_serialize_uint16_t+0x3e>
 800f7d6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800f7da:	801a      	strh	r2, [r3, #0]
 800f7dc:	e7b3      	b.n	800f746 <ucdr_serialize_uint16_t+0x3e>
 800f7de:	68a2      	ldr	r2, [r4, #8]
 800f7e0:	6923      	ldr	r3, [r4, #16]
 800f7e2:	7da0      	ldrb	r0, [r4, #22]
 800f7e4:	7567      	strb	r7, [r4, #21]
 800f7e6:	1b92      	subs	r2, r2, r6
 800f7e8:	1b9b      	subs	r3, r3, r6
 800f7ea:	f080 0001 	eor.w	r0, r0, #1
 800f7ee:	60a2      	str	r2, [r4, #8]
 800f7f0:	6123      	str	r3, [r4, #16]
 800f7f2:	b002      	add	sp, #8
 800f7f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f7f8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800f7fc:	8013      	strh	r3, [r2, #0]
 800f7fe:	e7a2      	b.n	800f746 <ucdr_serialize_uint16_t+0x3e>
 800f800:	4628      	mov	r0, r5
 800f802:	f10d 0506 	add.w	r5, sp, #6
 800f806:	4632      	mov	r2, r6
 800f808:	4629      	mov	r1, r5
 800f80a:	f00d fea6 	bl	801d55a <memcpy>
 800f80e:	68a0      	ldr	r0, [r4, #8]
 800f810:	4642      	mov	r2, r8
 800f812:	19a9      	adds	r1, r5, r6
 800f814:	f00d fea1 	bl	801d55a <memcpy>
 800f818:	e7bc      	b.n	800f794 <ucdr_serialize_uint16_t+0x8c>
 800f81a:	bf00      	nop

0800f81c <ucdr_serialize_endian_uint16_t>:
 800f81c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f820:	b083      	sub	sp, #12
 800f822:	460d      	mov	r5, r1
 800f824:	2102      	movs	r1, #2
 800f826:	4604      	mov	r4, r0
 800f828:	f8ad 2006 	strh.w	r2, [sp, #6]
 800f82c:	f001 fcb0 	bl	8011190 <ucdr_buffer_alignment>
 800f830:	4601      	mov	r1, r0
 800f832:	4620      	mov	r0, r4
 800f834:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f838:	f001 fcee 	bl	8011218 <ucdr_advance_buffer>
 800f83c:	2102      	movs	r1, #2
 800f83e:	4620      	mov	r0, r4
 800f840:	f001 fc46 	bl	80110d0 <ucdr_check_buffer_available_for>
 800f844:	bb60      	cbnz	r0, 800f8a0 <ucdr_serialize_endian_uint16_t+0x84>
 800f846:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800f84a:	42be      	cmp	r6, r7
 800f84c:	d923      	bls.n	800f896 <ucdr_serialize_endian_uint16_t+0x7a>
 800f84e:	6923      	ldr	r3, [r4, #16]
 800f850:	60a6      	str	r6, [r4, #8]
 800f852:	1bf6      	subs	r6, r6, r7
 800f854:	4433      	add	r3, r6
 800f856:	f1c6 0902 	rsb	r9, r6, #2
 800f85a:	6123      	str	r3, [r4, #16]
 800f85c:	4649      	mov	r1, r9
 800f85e:	4620      	mov	r0, r4
 800f860:	f001 fc42 	bl	80110e8 <ucdr_check_final_buffer_behavior>
 800f864:	2800      	cmp	r0, #0
 800f866:	d037      	beq.n	800f8d8 <ucdr_serialize_endian_uint16_t+0xbc>
 800f868:	2d01      	cmp	r5, #1
 800f86a:	d043      	beq.n	800f8f4 <ucdr_serialize_endian_uint16_t+0xd8>
 800f86c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f870:	703b      	strb	r3, [r7, #0]
 800f872:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f876:	707b      	strb	r3, [r7, #1]
 800f878:	6923      	ldr	r3, [r4, #16]
 800f87a:	68a2      	ldr	r2, [r4, #8]
 800f87c:	7da0      	ldrb	r0, [r4, #22]
 800f87e:	3302      	adds	r3, #2
 800f880:	444a      	add	r2, r9
 800f882:	1b9b      	subs	r3, r3, r6
 800f884:	2102      	movs	r1, #2
 800f886:	f080 0001 	eor.w	r0, r0, #1
 800f88a:	60a2      	str	r2, [r4, #8]
 800f88c:	6123      	str	r3, [r4, #16]
 800f88e:	7561      	strb	r1, [r4, #21]
 800f890:	b003      	add	sp, #12
 800f892:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f896:	2102      	movs	r1, #2
 800f898:	4620      	mov	r0, r4
 800f89a:	f001 fc25 	bl	80110e8 <ucdr_check_final_buffer_behavior>
 800f89e:	b188      	cbz	r0, 800f8c4 <ucdr_serialize_endian_uint16_t+0xa8>
 800f8a0:	2d01      	cmp	r5, #1
 800f8a2:	68a3      	ldr	r3, [r4, #8]
 800f8a4:	d014      	beq.n	800f8d0 <ucdr_serialize_endian_uint16_t+0xb4>
 800f8a6:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800f8aa:	701a      	strb	r2, [r3, #0]
 800f8ac:	68a3      	ldr	r3, [r4, #8]
 800f8ae:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f8b2:	705a      	strb	r2, [r3, #1]
 800f8b4:	68a2      	ldr	r2, [r4, #8]
 800f8b6:	6923      	ldr	r3, [r4, #16]
 800f8b8:	3202      	adds	r2, #2
 800f8ba:	3302      	adds	r3, #2
 800f8bc:	2102      	movs	r1, #2
 800f8be:	60a2      	str	r2, [r4, #8]
 800f8c0:	6123      	str	r3, [r4, #16]
 800f8c2:	7561      	strb	r1, [r4, #21]
 800f8c4:	7da0      	ldrb	r0, [r4, #22]
 800f8c6:	f080 0001 	eor.w	r0, r0, #1
 800f8ca:	b003      	add	sp, #12
 800f8cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f8d0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800f8d4:	801a      	strh	r2, [r3, #0]
 800f8d6:	e7ed      	b.n	800f8b4 <ucdr_serialize_endian_uint16_t+0x98>
 800f8d8:	68a2      	ldr	r2, [r4, #8]
 800f8da:	6923      	ldr	r3, [r4, #16]
 800f8dc:	7da0      	ldrb	r0, [r4, #22]
 800f8de:	f884 8015 	strb.w	r8, [r4, #21]
 800f8e2:	1b92      	subs	r2, r2, r6
 800f8e4:	1b9b      	subs	r3, r3, r6
 800f8e6:	f080 0001 	eor.w	r0, r0, #1
 800f8ea:	60a2      	str	r2, [r4, #8]
 800f8ec:	6123      	str	r3, [r4, #16]
 800f8ee:	b003      	add	sp, #12
 800f8f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f8f4:	f10d 0506 	add.w	r5, sp, #6
 800f8f8:	4632      	mov	r2, r6
 800f8fa:	4629      	mov	r1, r5
 800f8fc:	4638      	mov	r0, r7
 800f8fe:	f00d fe2c 	bl	801d55a <memcpy>
 800f902:	68a0      	ldr	r0, [r4, #8]
 800f904:	464a      	mov	r2, r9
 800f906:	19a9      	adds	r1, r5, r6
 800f908:	f00d fe27 	bl	801d55a <memcpy>
 800f90c:	e7b4      	b.n	800f878 <ucdr_serialize_endian_uint16_t+0x5c>
 800f90e:	bf00      	nop

0800f910 <ucdr_deserialize_uint16_t>:
 800f910:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f914:	460d      	mov	r5, r1
 800f916:	2102      	movs	r1, #2
 800f918:	4604      	mov	r4, r0
 800f91a:	f001 fc39 	bl	8011190 <ucdr_buffer_alignment>
 800f91e:	4601      	mov	r1, r0
 800f920:	4620      	mov	r0, r4
 800f922:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f926:	f001 fc77 	bl	8011218 <ucdr_advance_buffer>
 800f92a:	2102      	movs	r1, #2
 800f92c:	4620      	mov	r0, r4
 800f92e:	f001 fbcf 	bl	80110d0 <ucdr_check_buffer_available_for>
 800f932:	b1a8      	cbz	r0, 800f960 <ucdr_deserialize_uint16_t+0x50>
 800f934:	7d22      	ldrb	r2, [r4, #20]
 800f936:	68a3      	ldr	r3, [r4, #8]
 800f938:	2a01      	cmp	r2, #1
 800f93a:	d046      	beq.n	800f9ca <ucdr_deserialize_uint16_t+0xba>
 800f93c:	785b      	ldrb	r3, [r3, #1]
 800f93e:	702b      	strb	r3, [r5, #0]
 800f940:	68a3      	ldr	r3, [r4, #8]
 800f942:	781b      	ldrb	r3, [r3, #0]
 800f944:	706b      	strb	r3, [r5, #1]
 800f946:	68a2      	ldr	r2, [r4, #8]
 800f948:	6923      	ldr	r3, [r4, #16]
 800f94a:	3202      	adds	r2, #2
 800f94c:	3302      	adds	r3, #2
 800f94e:	2102      	movs	r1, #2
 800f950:	60a2      	str	r2, [r4, #8]
 800f952:	6123      	str	r3, [r4, #16]
 800f954:	7561      	strb	r1, [r4, #21]
 800f956:	7da0      	ldrb	r0, [r4, #22]
 800f958:	f080 0001 	eor.w	r0, r0, #1
 800f95c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f960:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800f964:	42be      	cmp	r6, r7
 800f966:	d920      	bls.n	800f9aa <ucdr_deserialize_uint16_t+0x9a>
 800f968:	6923      	ldr	r3, [r4, #16]
 800f96a:	60a6      	str	r6, [r4, #8]
 800f96c:	1bf6      	subs	r6, r6, r7
 800f96e:	4433      	add	r3, r6
 800f970:	f1c6 0902 	rsb	r9, r6, #2
 800f974:	6123      	str	r3, [r4, #16]
 800f976:	4649      	mov	r1, r9
 800f978:	4620      	mov	r0, r4
 800f97a:	f001 fbb5 	bl	80110e8 <ucdr_check_final_buffer_behavior>
 800f97e:	b338      	cbz	r0, 800f9d0 <ucdr_deserialize_uint16_t+0xc0>
 800f980:	7d23      	ldrb	r3, [r4, #20]
 800f982:	2b01      	cmp	r3, #1
 800f984:	d034      	beq.n	800f9f0 <ucdr_deserialize_uint16_t+0xe0>
 800f986:	787b      	ldrb	r3, [r7, #1]
 800f988:	702b      	strb	r3, [r5, #0]
 800f98a:	783b      	ldrb	r3, [r7, #0]
 800f98c:	706b      	strb	r3, [r5, #1]
 800f98e:	6923      	ldr	r3, [r4, #16]
 800f990:	68a2      	ldr	r2, [r4, #8]
 800f992:	7da0      	ldrb	r0, [r4, #22]
 800f994:	2102      	movs	r1, #2
 800f996:	3302      	adds	r3, #2
 800f998:	444a      	add	r2, r9
 800f99a:	1b9b      	subs	r3, r3, r6
 800f99c:	7561      	strb	r1, [r4, #21]
 800f99e:	60a2      	str	r2, [r4, #8]
 800f9a0:	6123      	str	r3, [r4, #16]
 800f9a2:	f080 0001 	eor.w	r0, r0, #1
 800f9a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f9aa:	2102      	movs	r1, #2
 800f9ac:	4620      	mov	r0, r4
 800f9ae:	f001 fb9b 	bl	80110e8 <ucdr_check_final_buffer_behavior>
 800f9b2:	2800      	cmp	r0, #0
 800f9b4:	d0cf      	beq.n	800f956 <ucdr_deserialize_uint16_t+0x46>
 800f9b6:	7d23      	ldrb	r3, [r4, #20]
 800f9b8:	68a2      	ldr	r2, [r4, #8]
 800f9ba:	2b01      	cmp	r3, #1
 800f9bc:	d015      	beq.n	800f9ea <ucdr_deserialize_uint16_t+0xda>
 800f9be:	7853      	ldrb	r3, [r2, #1]
 800f9c0:	702b      	strb	r3, [r5, #0]
 800f9c2:	68a3      	ldr	r3, [r4, #8]
 800f9c4:	781b      	ldrb	r3, [r3, #0]
 800f9c6:	706b      	strb	r3, [r5, #1]
 800f9c8:	e7bd      	b.n	800f946 <ucdr_deserialize_uint16_t+0x36>
 800f9ca:	881b      	ldrh	r3, [r3, #0]
 800f9cc:	802b      	strh	r3, [r5, #0]
 800f9ce:	e7ba      	b.n	800f946 <ucdr_deserialize_uint16_t+0x36>
 800f9d0:	68a2      	ldr	r2, [r4, #8]
 800f9d2:	6923      	ldr	r3, [r4, #16]
 800f9d4:	7da0      	ldrb	r0, [r4, #22]
 800f9d6:	f884 8015 	strb.w	r8, [r4, #21]
 800f9da:	1b92      	subs	r2, r2, r6
 800f9dc:	1b9b      	subs	r3, r3, r6
 800f9de:	60a2      	str	r2, [r4, #8]
 800f9e0:	6123      	str	r3, [r4, #16]
 800f9e2:	f080 0001 	eor.w	r0, r0, #1
 800f9e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f9ea:	8813      	ldrh	r3, [r2, #0]
 800f9ec:	802b      	strh	r3, [r5, #0]
 800f9ee:	e7aa      	b.n	800f946 <ucdr_deserialize_uint16_t+0x36>
 800f9f0:	4639      	mov	r1, r7
 800f9f2:	4632      	mov	r2, r6
 800f9f4:	4628      	mov	r0, r5
 800f9f6:	f00d fdb0 	bl	801d55a <memcpy>
 800f9fa:	68a1      	ldr	r1, [r4, #8]
 800f9fc:	464a      	mov	r2, r9
 800f9fe:	19a8      	adds	r0, r5, r6
 800fa00:	f00d fdab 	bl	801d55a <memcpy>
 800fa04:	e7c3      	b.n	800f98e <ucdr_deserialize_uint16_t+0x7e>
 800fa06:	bf00      	nop

0800fa08 <ucdr_deserialize_endian_uint16_t>:
 800fa08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fa0c:	460e      	mov	r6, r1
 800fa0e:	2102      	movs	r1, #2
 800fa10:	4604      	mov	r4, r0
 800fa12:	4615      	mov	r5, r2
 800fa14:	f001 fbbc 	bl	8011190 <ucdr_buffer_alignment>
 800fa18:	4601      	mov	r1, r0
 800fa1a:	4620      	mov	r0, r4
 800fa1c:	f894 9015 	ldrb.w	r9, [r4, #21]
 800fa20:	f001 fbfa 	bl	8011218 <ucdr_advance_buffer>
 800fa24:	2102      	movs	r1, #2
 800fa26:	4620      	mov	r0, r4
 800fa28:	f001 fb52 	bl	80110d0 <ucdr_check_buffer_available_for>
 800fa2c:	bb60      	cbnz	r0, 800fa88 <ucdr_deserialize_endian_uint16_t+0x80>
 800fa2e:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 800fa32:	4547      	cmp	r7, r8
 800fa34:	d923      	bls.n	800fa7e <ucdr_deserialize_endian_uint16_t+0x76>
 800fa36:	6923      	ldr	r3, [r4, #16]
 800fa38:	60a7      	str	r7, [r4, #8]
 800fa3a:	eba7 0708 	sub.w	r7, r7, r8
 800fa3e:	443b      	add	r3, r7
 800fa40:	f1c7 0a02 	rsb	sl, r7, #2
 800fa44:	6123      	str	r3, [r4, #16]
 800fa46:	4651      	mov	r1, sl
 800fa48:	4620      	mov	r0, r4
 800fa4a:	f001 fb4d 	bl	80110e8 <ucdr_check_final_buffer_behavior>
 800fa4e:	2800      	cmp	r0, #0
 800fa50:	d032      	beq.n	800fab8 <ucdr_deserialize_endian_uint16_t+0xb0>
 800fa52:	2e01      	cmp	r6, #1
 800fa54:	d03d      	beq.n	800fad2 <ucdr_deserialize_endian_uint16_t+0xca>
 800fa56:	f898 3001 	ldrb.w	r3, [r8, #1]
 800fa5a:	702b      	strb	r3, [r5, #0]
 800fa5c:	f898 3000 	ldrb.w	r3, [r8]
 800fa60:	706b      	strb	r3, [r5, #1]
 800fa62:	6923      	ldr	r3, [r4, #16]
 800fa64:	68a2      	ldr	r2, [r4, #8]
 800fa66:	7da0      	ldrb	r0, [r4, #22]
 800fa68:	2102      	movs	r1, #2
 800fa6a:	3302      	adds	r3, #2
 800fa6c:	4452      	add	r2, sl
 800fa6e:	1bdb      	subs	r3, r3, r7
 800fa70:	7561      	strb	r1, [r4, #21]
 800fa72:	60a2      	str	r2, [r4, #8]
 800fa74:	6123      	str	r3, [r4, #16]
 800fa76:	f080 0001 	eor.w	r0, r0, #1
 800fa7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa7e:	2102      	movs	r1, #2
 800fa80:	4620      	mov	r0, r4
 800fa82:	f001 fb31 	bl	80110e8 <ucdr_check_final_buffer_behavior>
 800fa86:	b178      	cbz	r0, 800faa8 <ucdr_deserialize_endian_uint16_t+0xa0>
 800fa88:	2e01      	cmp	r6, #1
 800fa8a:	68a3      	ldr	r3, [r4, #8]
 800fa8c:	d011      	beq.n	800fab2 <ucdr_deserialize_endian_uint16_t+0xaa>
 800fa8e:	785b      	ldrb	r3, [r3, #1]
 800fa90:	702b      	strb	r3, [r5, #0]
 800fa92:	68a3      	ldr	r3, [r4, #8]
 800fa94:	781b      	ldrb	r3, [r3, #0]
 800fa96:	706b      	strb	r3, [r5, #1]
 800fa98:	68a2      	ldr	r2, [r4, #8]
 800fa9a:	6923      	ldr	r3, [r4, #16]
 800fa9c:	3202      	adds	r2, #2
 800fa9e:	3302      	adds	r3, #2
 800faa0:	2102      	movs	r1, #2
 800faa2:	60a2      	str	r2, [r4, #8]
 800faa4:	6123      	str	r3, [r4, #16]
 800faa6:	7561      	strb	r1, [r4, #21]
 800faa8:	7da0      	ldrb	r0, [r4, #22]
 800faaa:	f080 0001 	eor.w	r0, r0, #1
 800faae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fab2:	881b      	ldrh	r3, [r3, #0]
 800fab4:	802b      	strh	r3, [r5, #0]
 800fab6:	e7ef      	b.n	800fa98 <ucdr_deserialize_endian_uint16_t+0x90>
 800fab8:	68a2      	ldr	r2, [r4, #8]
 800faba:	6923      	ldr	r3, [r4, #16]
 800fabc:	7da0      	ldrb	r0, [r4, #22]
 800fabe:	f884 9015 	strb.w	r9, [r4, #21]
 800fac2:	1bd2      	subs	r2, r2, r7
 800fac4:	1bdb      	subs	r3, r3, r7
 800fac6:	60a2      	str	r2, [r4, #8]
 800fac8:	6123      	str	r3, [r4, #16]
 800faca:	f080 0001 	eor.w	r0, r0, #1
 800face:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fad2:	4641      	mov	r1, r8
 800fad4:	463a      	mov	r2, r7
 800fad6:	4628      	mov	r0, r5
 800fad8:	f00d fd3f 	bl	801d55a <memcpy>
 800fadc:	68a1      	ldr	r1, [r4, #8]
 800fade:	4652      	mov	r2, sl
 800fae0:	19e8      	adds	r0, r5, r7
 800fae2:	f00d fd3a 	bl	801d55a <memcpy>
 800fae6:	e7bc      	b.n	800fa62 <ucdr_deserialize_endian_uint16_t+0x5a>

0800fae8 <ucdr_serialize_uint32_t>:
 800fae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800faec:	b082      	sub	sp, #8
 800faee:	4604      	mov	r4, r0
 800faf0:	9101      	str	r1, [sp, #4]
 800faf2:	2104      	movs	r1, #4
 800faf4:	f001 fb4c 	bl	8011190 <ucdr_buffer_alignment>
 800faf8:	4601      	mov	r1, r0
 800fafa:	4620      	mov	r0, r4
 800fafc:	7d67      	ldrb	r7, [r4, #21]
 800fafe:	f001 fb8b 	bl	8011218 <ucdr_advance_buffer>
 800fb02:	2104      	movs	r1, #4
 800fb04:	4620      	mov	r0, r4
 800fb06:	f001 fae3 	bl	80110d0 <ucdr_check_buffer_available_for>
 800fb0a:	b300      	cbz	r0, 800fb4e <ucdr_serialize_uint32_t+0x66>
 800fb0c:	7d22      	ldrb	r2, [r4, #20]
 800fb0e:	68a3      	ldr	r3, [r4, #8]
 800fb10:	2a01      	cmp	r2, #1
 800fb12:	d05d      	beq.n	800fbd0 <ucdr_serialize_uint32_t+0xe8>
 800fb14:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800fb18:	701a      	strb	r2, [r3, #0]
 800fb1a:	68a3      	ldr	r3, [r4, #8]
 800fb1c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800fb20:	705a      	strb	r2, [r3, #1]
 800fb22:	68a3      	ldr	r3, [r4, #8]
 800fb24:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800fb28:	709a      	strb	r2, [r3, #2]
 800fb2a:	68a3      	ldr	r3, [r4, #8]
 800fb2c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800fb30:	70da      	strb	r2, [r3, #3]
 800fb32:	68a2      	ldr	r2, [r4, #8]
 800fb34:	6923      	ldr	r3, [r4, #16]
 800fb36:	3204      	adds	r2, #4
 800fb38:	3304      	adds	r3, #4
 800fb3a:	2104      	movs	r1, #4
 800fb3c:	60a2      	str	r2, [r4, #8]
 800fb3e:	6123      	str	r3, [r4, #16]
 800fb40:	7561      	strb	r1, [r4, #21]
 800fb42:	7da0      	ldrb	r0, [r4, #22]
 800fb44:	f080 0001 	eor.w	r0, r0, #1
 800fb48:	b002      	add	sp, #8
 800fb4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb4e:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800fb52:	42ab      	cmp	r3, r5
 800fb54:	d92e      	bls.n	800fbb4 <ucdr_serialize_uint32_t+0xcc>
 800fb56:	1b5e      	subs	r6, r3, r5
 800fb58:	60a3      	str	r3, [r4, #8]
 800fb5a:	6923      	ldr	r3, [r4, #16]
 800fb5c:	f1c6 0804 	rsb	r8, r6, #4
 800fb60:	4433      	add	r3, r6
 800fb62:	6123      	str	r3, [r4, #16]
 800fb64:	4641      	mov	r1, r8
 800fb66:	4620      	mov	r0, r4
 800fb68:	f001 fabe 	bl	80110e8 <ucdr_check_final_buffer_behavior>
 800fb6c:	b398      	cbz	r0, 800fbd6 <ucdr_serialize_uint32_t+0xee>
 800fb6e:	7d23      	ldrb	r3, [r4, #20]
 800fb70:	2b01      	cmp	r3, #1
 800fb72:	d046      	beq.n	800fc02 <ucdr_serialize_uint32_t+0x11a>
 800fb74:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800fb78:	702b      	strb	r3, [r5, #0]
 800fb7a:	2e01      	cmp	r6, #1
 800fb7c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800fb80:	706b      	strb	r3, [r5, #1]
 800fb82:	d035      	beq.n	800fbf0 <ucdr_serialize_uint32_t+0x108>
 800fb84:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800fb88:	70ab      	strb	r3, [r5, #2]
 800fb8a:	2e02      	cmp	r6, #2
 800fb8c:	d034      	beq.n	800fbf8 <ucdr_serialize_uint32_t+0x110>
 800fb8e:	3503      	adds	r5, #3
 800fb90:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800fb94:	702b      	strb	r3, [r5, #0]
 800fb96:	6923      	ldr	r3, [r4, #16]
 800fb98:	68a2      	ldr	r2, [r4, #8]
 800fb9a:	7da0      	ldrb	r0, [r4, #22]
 800fb9c:	3304      	adds	r3, #4
 800fb9e:	4442      	add	r2, r8
 800fba0:	1b9b      	subs	r3, r3, r6
 800fba2:	2104      	movs	r1, #4
 800fba4:	f080 0001 	eor.w	r0, r0, #1
 800fba8:	60a2      	str	r2, [r4, #8]
 800fbaa:	6123      	str	r3, [r4, #16]
 800fbac:	7561      	strb	r1, [r4, #21]
 800fbae:	b002      	add	sp, #8
 800fbb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fbb4:	2104      	movs	r1, #4
 800fbb6:	4620      	mov	r0, r4
 800fbb8:	f001 fa96 	bl	80110e8 <ucdr_check_final_buffer_behavior>
 800fbbc:	2800      	cmp	r0, #0
 800fbbe:	d0c0      	beq.n	800fb42 <ucdr_serialize_uint32_t+0x5a>
 800fbc0:	7d23      	ldrb	r3, [r4, #20]
 800fbc2:	68a2      	ldr	r2, [r4, #8]
 800fbc4:	2b01      	cmp	r3, #1
 800fbc6:	d019      	beq.n	800fbfc <ucdr_serialize_uint32_t+0x114>
 800fbc8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800fbcc:	7013      	strb	r3, [r2, #0]
 800fbce:	e7a4      	b.n	800fb1a <ucdr_serialize_uint32_t+0x32>
 800fbd0:	9a01      	ldr	r2, [sp, #4]
 800fbd2:	601a      	str	r2, [r3, #0]
 800fbd4:	e7ad      	b.n	800fb32 <ucdr_serialize_uint32_t+0x4a>
 800fbd6:	68a2      	ldr	r2, [r4, #8]
 800fbd8:	6923      	ldr	r3, [r4, #16]
 800fbda:	7da0      	ldrb	r0, [r4, #22]
 800fbdc:	7567      	strb	r7, [r4, #21]
 800fbde:	1b92      	subs	r2, r2, r6
 800fbe0:	1b9b      	subs	r3, r3, r6
 800fbe2:	f080 0001 	eor.w	r0, r0, #1
 800fbe6:	60a2      	str	r2, [r4, #8]
 800fbe8:	6123      	str	r3, [r4, #16]
 800fbea:	b002      	add	sp, #8
 800fbec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fbf0:	68a3      	ldr	r3, [r4, #8]
 800fbf2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800fbf6:	701a      	strb	r2, [r3, #0]
 800fbf8:	68a5      	ldr	r5, [r4, #8]
 800fbfa:	e7c9      	b.n	800fb90 <ucdr_serialize_uint32_t+0xa8>
 800fbfc:	9b01      	ldr	r3, [sp, #4]
 800fbfe:	6013      	str	r3, [r2, #0]
 800fc00:	e797      	b.n	800fb32 <ucdr_serialize_uint32_t+0x4a>
 800fc02:	4628      	mov	r0, r5
 800fc04:	ad01      	add	r5, sp, #4
 800fc06:	4632      	mov	r2, r6
 800fc08:	4629      	mov	r1, r5
 800fc0a:	f00d fca6 	bl	801d55a <memcpy>
 800fc0e:	68a0      	ldr	r0, [r4, #8]
 800fc10:	4642      	mov	r2, r8
 800fc12:	19a9      	adds	r1, r5, r6
 800fc14:	f00d fca1 	bl	801d55a <memcpy>
 800fc18:	e7bd      	b.n	800fb96 <ucdr_serialize_uint32_t+0xae>
 800fc1a:	bf00      	nop

0800fc1c <ucdr_serialize_endian_uint32_t>:
 800fc1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fc20:	b083      	sub	sp, #12
 800fc22:	460d      	mov	r5, r1
 800fc24:	2104      	movs	r1, #4
 800fc26:	4604      	mov	r4, r0
 800fc28:	9201      	str	r2, [sp, #4]
 800fc2a:	f001 fab1 	bl	8011190 <ucdr_buffer_alignment>
 800fc2e:	4601      	mov	r1, r0
 800fc30:	4620      	mov	r0, r4
 800fc32:	f894 8015 	ldrb.w	r8, [r4, #21]
 800fc36:	f001 faef 	bl	8011218 <ucdr_advance_buffer>
 800fc3a:	2104      	movs	r1, #4
 800fc3c:	4620      	mov	r0, r4
 800fc3e:	f001 fa47 	bl	80110d0 <ucdr_check_buffer_available_for>
 800fc42:	2800      	cmp	r0, #0
 800fc44:	d137      	bne.n	800fcb6 <ucdr_serialize_endian_uint32_t+0x9a>
 800fc46:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800fc4a:	42b7      	cmp	r7, r6
 800fc4c:	d92e      	bls.n	800fcac <ucdr_serialize_endian_uint32_t+0x90>
 800fc4e:	6923      	ldr	r3, [r4, #16]
 800fc50:	60a7      	str	r7, [r4, #8]
 800fc52:	1bbf      	subs	r7, r7, r6
 800fc54:	443b      	add	r3, r7
 800fc56:	f1c7 0904 	rsb	r9, r7, #4
 800fc5a:	6123      	str	r3, [r4, #16]
 800fc5c:	4649      	mov	r1, r9
 800fc5e:	4620      	mov	r0, r4
 800fc60:	f001 fa42 	bl	80110e8 <ucdr_check_final_buffer_behavior>
 800fc64:	2800      	cmp	r0, #0
 800fc66:	d049      	beq.n	800fcfc <ucdr_serialize_endian_uint32_t+0xe0>
 800fc68:	2d01      	cmp	r5, #1
 800fc6a:	d05b      	beq.n	800fd24 <ucdr_serialize_endian_uint32_t+0x108>
 800fc6c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800fc70:	7033      	strb	r3, [r6, #0]
 800fc72:	2f01      	cmp	r7, #1
 800fc74:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800fc78:	7073      	strb	r3, [r6, #1]
 800fc7a:	d04d      	beq.n	800fd18 <ucdr_serialize_endian_uint32_t+0xfc>
 800fc7c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800fc80:	70b3      	strb	r3, [r6, #2]
 800fc82:	2f02      	cmp	r7, #2
 800fc84:	d04c      	beq.n	800fd20 <ucdr_serialize_endian_uint32_t+0x104>
 800fc86:	3603      	adds	r6, #3
 800fc88:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800fc8c:	7033      	strb	r3, [r6, #0]
 800fc8e:	6923      	ldr	r3, [r4, #16]
 800fc90:	68a2      	ldr	r2, [r4, #8]
 800fc92:	7da0      	ldrb	r0, [r4, #22]
 800fc94:	3304      	adds	r3, #4
 800fc96:	444a      	add	r2, r9
 800fc98:	1bdb      	subs	r3, r3, r7
 800fc9a:	2104      	movs	r1, #4
 800fc9c:	f080 0001 	eor.w	r0, r0, #1
 800fca0:	60a2      	str	r2, [r4, #8]
 800fca2:	6123      	str	r3, [r4, #16]
 800fca4:	7561      	strb	r1, [r4, #21]
 800fca6:	b003      	add	sp, #12
 800fca8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fcac:	2104      	movs	r1, #4
 800fcae:	4620      	mov	r0, r4
 800fcb0:	f001 fa1a 	bl	80110e8 <ucdr_check_final_buffer_behavior>
 800fcb4:	b1c8      	cbz	r0, 800fcea <ucdr_serialize_endian_uint32_t+0xce>
 800fcb6:	2d01      	cmp	r5, #1
 800fcb8:	68a3      	ldr	r3, [r4, #8]
 800fcba:	d01c      	beq.n	800fcf6 <ucdr_serialize_endian_uint32_t+0xda>
 800fcbc:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800fcc0:	701a      	strb	r2, [r3, #0]
 800fcc2:	68a3      	ldr	r3, [r4, #8]
 800fcc4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800fcc8:	705a      	strb	r2, [r3, #1]
 800fcca:	68a3      	ldr	r3, [r4, #8]
 800fccc:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800fcd0:	709a      	strb	r2, [r3, #2]
 800fcd2:	68a3      	ldr	r3, [r4, #8]
 800fcd4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800fcd8:	70da      	strb	r2, [r3, #3]
 800fcda:	68a2      	ldr	r2, [r4, #8]
 800fcdc:	6923      	ldr	r3, [r4, #16]
 800fcde:	3204      	adds	r2, #4
 800fce0:	3304      	adds	r3, #4
 800fce2:	2104      	movs	r1, #4
 800fce4:	60a2      	str	r2, [r4, #8]
 800fce6:	6123      	str	r3, [r4, #16]
 800fce8:	7561      	strb	r1, [r4, #21]
 800fcea:	7da0      	ldrb	r0, [r4, #22]
 800fcec:	f080 0001 	eor.w	r0, r0, #1
 800fcf0:	b003      	add	sp, #12
 800fcf2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fcf6:	9a01      	ldr	r2, [sp, #4]
 800fcf8:	601a      	str	r2, [r3, #0]
 800fcfa:	e7ee      	b.n	800fcda <ucdr_serialize_endian_uint32_t+0xbe>
 800fcfc:	68a2      	ldr	r2, [r4, #8]
 800fcfe:	6923      	ldr	r3, [r4, #16]
 800fd00:	7da0      	ldrb	r0, [r4, #22]
 800fd02:	f884 8015 	strb.w	r8, [r4, #21]
 800fd06:	1bd2      	subs	r2, r2, r7
 800fd08:	1bdb      	subs	r3, r3, r7
 800fd0a:	f080 0001 	eor.w	r0, r0, #1
 800fd0e:	60a2      	str	r2, [r4, #8]
 800fd10:	6123      	str	r3, [r4, #16]
 800fd12:	b003      	add	sp, #12
 800fd14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fd18:	68a3      	ldr	r3, [r4, #8]
 800fd1a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800fd1e:	701a      	strb	r2, [r3, #0]
 800fd20:	68a6      	ldr	r6, [r4, #8]
 800fd22:	e7b1      	b.n	800fc88 <ucdr_serialize_endian_uint32_t+0x6c>
 800fd24:	ad01      	add	r5, sp, #4
 800fd26:	463a      	mov	r2, r7
 800fd28:	4629      	mov	r1, r5
 800fd2a:	4630      	mov	r0, r6
 800fd2c:	f00d fc15 	bl	801d55a <memcpy>
 800fd30:	68a0      	ldr	r0, [r4, #8]
 800fd32:	464a      	mov	r2, r9
 800fd34:	19e9      	adds	r1, r5, r7
 800fd36:	f00d fc10 	bl	801d55a <memcpy>
 800fd3a:	e7a8      	b.n	800fc8e <ucdr_serialize_endian_uint32_t+0x72>

0800fd3c <ucdr_deserialize_uint32_t>:
 800fd3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fd40:	460d      	mov	r5, r1
 800fd42:	2104      	movs	r1, #4
 800fd44:	4604      	mov	r4, r0
 800fd46:	f001 fa23 	bl	8011190 <ucdr_buffer_alignment>
 800fd4a:	4601      	mov	r1, r0
 800fd4c:	4620      	mov	r0, r4
 800fd4e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800fd52:	f001 fa61 	bl	8011218 <ucdr_advance_buffer>
 800fd56:	2104      	movs	r1, #4
 800fd58:	4620      	mov	r0, r4
 800fd5a:	f001 f9b9 	bl	80110d0 <ucdr_check_buffer_available_for>
 800fd5e:	b1d8      	cbz	r0, 800fd98 <ucdr_deserialize_uint32_t+0x5c>
 800fd60:	7d22      	ldrb	r2, [r4, #20]
 800fd62:	68a3      	ldr	r3, [r4, #8]
 800fd64:	2a01      	cmp	r2, #1
 800fd66:	d052      	beq.n	800fe0e <ucdr_deserialize_uint32_t+0xd2>
 800fd68:	78db      	ldrb	r3, [r3, #3]
 800fd6a:	702b      	strb	r3, [r5, #0]
 800fd6c:	68a3      	ldr	r3, [r4, #8]
 800fd6e:	789b      	ldrb	r3, [r3, #2]
 800fd70:	706b      	strb	r3, [r5, #1]
 800fd72:	68a3      	ldr	r3, [r4, #8]
 800fd74:	785b      	ldrb	r3, [r3, #1]
 800fd76:	70ab      	strb	r3, [r5, #2]
 800fd78:	68a3      	ldr	r3, [r4, #8]
 800fd7a:	781b      	ldrb	r3, [r3, #0]
 800fd7c:	70eb      	strb	r3, [r5, #3]
 800fd7e:	68a2      	ldr	r2, [r4, #8]
 800fd80:	6923      	ldr	r3, [r4, #16]
 800fd82:	3204      	adds	r2, #4
 800fd84:	3304      	adds	r3, #4
 800fd86:	2104      	movs	r1, #4
 800fd88:	60a2      	str	r2, [r4, #8]
 800fd8a:	6123      	str	r3, [r4, #16]
 800fd8c:	7561      	strb	r1, [r4, #21]
 800fd8e:	7da0      	ldrb	r0, [r4, #22]
 800fd90:	f080 0001 	eor.w	r0, r0, #1
 800fd94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fd98:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800fd9c:	42b7      	cmp	r7, r6
 800fd9e:	d92a      	bls.n	800fdf6 <ucdr_deserialize_uint32_t+0xba>
 800fda0:	6923      	ldr	r3, [r4, #16]
 800fda2:	60a7      	str	r7, [r4, #8]
 800fda4:	1bbf      	subs	r7, r7, r6
 800fda6:	443b      	add	r3, r7
 800fda8:	f1c7 0904 	rsb	r9, r7, #4
 800fdac:	6123      	str	r3, [r4, #16]
 800fdae:	4649      	mov	r1, r9
 800fdb0:	4620      	mov	r0, r4
 800fdb2:	f001 f999 	bl	80110e8 <ucdr_check_final_buffer_behavior>
 800fdb6:	b368      	cbz	r0, 800fe14 <ucdr_deserialize_uint32_t+0xd8>
 800fdb8:	7d23      	ldrb	r3, [r4, #20]
 800fdba:	2b01      	cmp	r3, #1
 800fdbc:	d040      	beq.n	800fe40 <ucdr_deserialize_uint32_t+0x104>
 800fdbe:	78f3      	ldrb	r3, [r6, #3]
 800fdc0:	702b      	strb	r3, [r5, #0]
 800fdc2:	78b3      	ldrb	r3, [r6, #2]
 800fdc4:	706b      	strb	r3, [r5, #1]
 800fdc6:	2f01      	cmp	r7, #1
 800fdc8:	d031      	beq.n	800fe2e <ucdr_deserialize_uint32_t+0xf2>
 800fdca:	7873      	ldrb	r3, [r6, #1]
 800fdcc:	70ab      	strb	r3, [r5, #2]
 800fdce:	2f02      	cmp	r7, #2
 800fdd0:	f105 0503 	add.w	r5, r5, #3
 800fdd4:	d02f      	beq.n	800fe36 <ucdr_deserialize_uint32_t+0xfa>
 800fdd6:	7833      	ldrb	r3, [r6, #0]
 800fdd8:	702b      	strb	r3, [r5, #0]
 800fdda:	6923      	ldr	r3, [r4, #16]
 800fddc:	68a2      	ldr	r2, [r4, #8]
 800fdde:	7da0      	ldrb	r0, [r4, #22]
 800fde0:	2104      	movs	r1, #4
 800fde2:	3304      	adds	r3, #4
 800fde4:	444a      	add	r2, r9
 800fde6:	1bdb      	subs	r3, r3, r7
 800fde8:	7561      	strb	r1, [r4, #21]
 800fdea:	60a2      	str	r2, [r4, #8]
 800fdec:	6123      	str	r3, [r4, #16]
 800fdee:	f080 0001 	eor.w	r0, r0, #1
 800fdf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fdf6:	2104      	movs	r1, #4
 800fdf8:	4620      	mov	r0, r4
 800fdfa:	f001 f975 	bl	80110e8 <ucdr_check_final_buffer_behavior>
 800fdfe:	2800      	cmp	r0, #0
 800fe00:	d0c5      	beq.n	800fd8e <ucdr_deserialize_uint32_t+0x52>
 800fe02:	7d23      	ldrb	r3, [r4, #20]
 800fe04:	68a2      	ldr	r2, [r4, #8]
 800fe06:	2b01      	cmp	r3, #1
 800fe08:	d017      	beq.n	800fe3a <ucdr_deserialize_uint32_t+0xfe>
 800fe0a:	78d3      	ldrb	r3, [r2, #3]
 800fe0c:	e7ad      	b.n	800fd6a <ucdr_deserialize_uint32_t+0x2e>
 800fe0e:	681b      	ldr	r3, [r3, #0]
 800fe10:	602b      	str	r3, [r5, #0]
 800fe12:	e7b4      	b.n	800fd7e <ucdr_deserialize_uint32_t+0x42>
 800fe14:	68a2      	ldr	r2, [r4, #8]
 800fe16:	6923      	ldr	r3, [r4, #16]
 800fe18:	7da0      	ldrb	r0, [r4, #22]
 800fe1a:	f884 8015 	strb.w	r8, [r4, #21]
 800fe1e:	1bd2      	subs	r2, r2, r7
 800fe20:	1bdb      	subs	r3, r3, r7
 800fe22:	60a2      	str	r2, [r4, #8]
 800fe24:	6123      	str	r3, [r4, #16]
 800fe26:	f080 0001 	eor.w	r0, r0, #1
 800fe2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fe2e:	68a3      	ldr	r3, [r4, #8]
 800fe30:	785b      	ldrb	r3, [r3, #1]
 800fe32:	70ab      	strb	r3, [r5, #2]
 800fe34:	3503      	adds	r5, #3
 800fe36:	68a6      	ldr	r6, [r4, #8]
 800fe38:	e7cd      	b.n	800fdd6 <ucdr_deserialize_uint32_t+0x9a>
 800fe3a:	6813      	ldr	r3, [r2, #0]
 800fe3c:	602b      	str	r3, [r5, #0]
 800fe3e:	e79e      	b.n	800fd7e <ucdr_deserialize_uint32_t+0x42>
 800fe40:	4631      	mov	r1, r6
 800fe42:	463a      	mov	r2, r7
 800fe44:	4628      	mov	r0, r5
 800fe46:	f00d fb88 	bl	801d55a <memcpy>
 800fe4a:	68a1      	ldr	r1, [r4, #8]
 800fe4c:	464a      	mov	r2, r9
 800fe4e:	19e8      	adds	r0, r5, r7
 800fe50:	f00d fb83 	bl	801d55a <memcpy>
 800fe54:	e7c1      	b.n	800fdda <ucdr_deserialize_uint32_t+0x9e>
 800fe56:	bf00      	nop

0800fe58 <ucdr_deserialize_endian_uint32_t>:
 800fe58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fe5c:	460e      	mov	r6, r1
 800fe5e:	2104      	movs	r1, #4
 800fe60:	4604      	mov	r4, r0
 800fe62:	4615      	mov	r5, r2
 800fe64:	f001 f994 	bl	8011190 <ucdr_buffer_alignment>
 800fe68:	4601      	mov	r1, r0
 800fe6a:	4620      	mov	r0, r4
 800fe6c:	f894 9015 	ldrb.w	r9, [r4, #21]
 800fe70:	f001 f9d2 	bl	8011218 <ucdr_advance_buffer>
 800fe74:	2104      	movs	r1, #4
 800fe76:	4620      	mov	r0, r4
 800fe78:	f001 f92a 	bl	80110d0 <ucdr_check_buffer_available_for>
 800fe7c:	2800      	cmp	r0, #0
 800fe7e:	d137      	bne.n	800fef0 <ucdr_deserialize_endian_uint32_t+0x98>
 800fe80:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800fe84:	42bb      	cmp	r3, r7
 800fe86:	d92e      	bls.n	800fee6 <ucdr_deserialize_endian_uint32_t+0x8e>
 800fe88:	eba3 0807 	sub.w	r8, r3, r7
 800fe8c:	60a3      	str	r3, [r4, #8]
 800fe8e:	6923      	ldr	r3, [r4, #16]
 800fe90:	f1c8 0a04 	rsb	sl, r8, #4
 800fe94:	4443      	add	r3, r8
 800fe96:	6123      	str	r3, [r4, #16]
 800fe98:	4651      	mov	r1, sl
 800fe9a:	4620      	mov	r0, r4
 800fe9c:	f001 f924 	bl	80110e8 <ucdr_check_final_buffer_behavior>
 800fea0:	2800      	cmp	r0, #0
 800fea2:	d043      	beq.n	800ff2c <ucdr_deserialize_endian_uint32_t+0xd4>
 800fea4:	2e01      	cmp	r6, #1
 800fea6:	d056      	beq.n	800ff56 <ucdr_deserialize_endian_uint32_t+0xfe>
 800fea8:	78fb      	ldrb	r3, [r7, #3]
 800feaa:	702b      	strb	r3, [r5, #0]
 800feac:	78bb      	ldrb	r3, [r7, #2]
 800feae:	706b      	strb	r3, [r5, #1]
 800feb0:	f1b8 0f01 	cmp.w	r8, #1
 800feb4:	d049      	beq.n	800ff4a <ucdr_deserialize_endian_uint32_t+0xf2>
 800feb6:	787b      	ldrb	r3, [r7, #1]
 800feb8:	70ab      	strb	r3, [r5, #2]
 800feba:	f1b8 0f02 	cmp.w	r8, #2
 800febe:	f105 0503 	add.w	r5, r5, #3
 800fec2:	d046      	beq.n	800ff52 <ucdr_deserialize_endian_uint32_t+0xfa>
 800fec4:	783b      	ldrb	r3, [r7, #0]
 800fec6:	702b      	strb	r3, [r5, #0]
 800fec8:	6923      	ldr	r3, [r4, #16]
 800feca:	68a2      	ldr	r2, [r4, #8]
 800fecc:	7da0      	ldrb	r0, [r4, #22]
 800fece:	2104      	movs	r1, #4
 800fed0:	3304      	adds	r3, #4
 800fed2:	4452      	add	r2, sl
 800fed4:	eba3 0308 	sub.w	r3, r3, r8
 800fed8:	7561      	strb	r1, [r4, #21]
 800feda:	60a2      	str	r2, [r4, #8]
 800fedc:	6123      	str	r3, [r4, #16]
 800fede:	f080 0001 	eor.w	r0, r0, #1
 800fee2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fee6:	2104      	movs	r1, #4
 800fee8:	4620      	mov	r0, r4
 800feea:	f001 f8fd 	bl	80110e8 <ucdr_check_final_buffer_behavior>
 800feee:	b1a8      	cbz	r0, 800ff1c <ucdr_deserialize_endian_uint32_t+0xc4>
 800fef0:	2e01      	cmp	r6, #1
 800fef2:	68a3      	ldr	r3, [r4, #8]
 800fef4:	d017      	beq.n	800ff26 <ucdr_deserialize_endian_uint32_t+0xce>
 800fef6:	78db      	ldrb	r3, [r3, #3]
 800fef8:	702b      	strb	r3, [r5, #0]
 800fefa:	68a3      	ldr	r3, [r4, #8]
 800fefc:	789b      	ldrb	r3, [r3, #2]
 800fefe:	706b      	strb	r3, [r5, #1]
 800ff00:	68a3      	ldr	r3, [r4, #8]
 800ff02:	785b      	ldrb	r3, [r3, #1]
 800ff04:	70ab      	strb	r3, [r5, #2]
 800ff06:	68a3      	ldr	r3, [r4, #8]
 800ff08:	781b      	ldrb	r3, [r3, #0]
 800ff0a:	70eb      	strb	r3, [r5, #3]
 800ff0c:	68a2      	ldr	r2, [r4, #8]
 800ff0e:	6923      	ldr	r3, [r4, #16]
 800ff10:	3204      	adds	r2, #4
 800ff12:	3304      	adds	r3, #4
 800ff14:	2104      	movs	r1, #4
 800ff16:	60a2      	str	r2, [r4, #8]
 800ff18:	6123      	str	r3, [r4, #16]
 800ff1a:	7561      	strb	r1, [r4, #21]
 800ff1c:	7da0      	ldrb	r0, [r4, #22]
 800ff1e:	f080 0001 	eor.w	r0, r0, #1
 800ff22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff26:	681b      	ldr	r3, [r3, #0]
 800ff28:	602b      	str	r3, [r5, #0]
 800ff2a:	e7ef      	b.n	800ff0c <ucdr_deserialize_endian_uint32_t+0xb4>
 800ff2c:	68a2      	ldr	r2, [r4, #8]
 800ff2e:	6923      	ldr	r3, [r4, #16]
 800ff30:	7da0      	ldrb	r0, [r4, #22]
 800ff32:	f884 9015 	strb.w	r9, [r4, #21]
 800ff36:	eba2 0208 	sub.w	r2, r2, r8
 800ff3a:	eba3 0308 	sub.w	r3, r3, r8
 800ff3e:	60a2      	str	r2, [r4, #8]
 800ff40:	6123      	str	r3, [r4, #16]
 800ff42:	f080 0001 	eor.w	r0, r0, #1
 800ff46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff4a:	68a3      	ldr	r3, [r4, #8]
 800ff4c:	785b      	ldrb	r3, [r3, #1]
 800ff4e:	70ab      	strb	r3, [r5, #2]
 800ff50:	3503      	adds	r5, #3
 800ff52:	68a7      	ldr	r7, [r4, #8]
 800ff54:	e7b6      	b.n	800fec4 <ucdr_deserialize_endian_uint32_t+0x6c>
 800ff56:	4639      	mov	r1, r7
 800ff58:	4642      	mov	r2, r8
 800ff5a:	4628      	mov	r0, r5
 800ff5c:	f00d fafd 	bl	801d55a <memcpy>
 800ff60:	68a1      	ldr	r1, [r4, #8]
 800ff62:	4652      	mov	r2, sl
 800ff64:	eb05 0008 	add.w	r0, r5, r8
 800ff68:	f00d faf7 	bl	801d55a <memcpy>
 800ff6c:	e7ac      	b.n	800fec8 <ucdr_deserialize_endian_uint32_t+0x70>
 800ff6e:	bf00      	nop

0800ff70 <ucdr_serialize_uint64_t>:
 800ff70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff74:	2108      	movs	r1, #8
 800ff76:	b082      	sub	sp, #8
 800ff78:	4604      	mov	r4, r0
 800ff7a:	e9cd 2300 	strd	r2, r3, [sp]
 800ff7e:	f001 f907 	bl	8011190 <ucdr_buffer_alignment>
 800ff82:	4601      	mov	r1, r0
 800ff84:	4620      	mov	r0, r4
 800ff86:	7d67      	ldrb	r7, [r4, #21]
 800ff88:	f001 f946 	bl	8011218 <ucdr_advance_buffer>
 800ff8c:	2108      	movs	r1, #8
 800ff8e:	4620      	mov	r0, r4
 800ff90:	f001 f89e 	bl	80110d0 <ucdr_check_buffer_available_for>
 800ff94:	2800      	cmp	r0, #0
 800ff96:	d14d      	bne.n	8010034 <ucdr_serialize_uint64_t+0xc4>
 800ff98:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800ff9c:	42ab      	cmp	r3, r5
 800ff9e:	d944      	bls.n	801002a <ucdr_serialize_uint64_t+0xba>
 800ffa0:	1b5e      	subs	r6, r3, r5
 800ffa2:	60a3      	str	r3, [r4, #8]
 800ffa4:	6923      	ldr	r3, [r4, #16]
 800ffa6:	f1c6 0808 	rsb	r8, r6, #8
 800ffaa:	4433      	add	r3, r6
 800ffac:	6123      	str	r3, [r4, #16]
 800ffae:	4641      	mov	r1, r8
 800ffb0:	4620      	mov	r0, r4
 800ffb2:	f001 f899 	bl	80110e8 <ucdr_check_final_buffer_behavior>
 800ffb6:	2800      	cmp	r0, #0
 800ffb8:	d072      	beq.n	80100a0 <ucdr_serialize_uint64_t+0x130>
 800ffba:	7d23      	ldrb	r3, [r4, #20]
 800ffbc:	2b01      	cmp	r3, #1
 800ffbe:	f000 8092 	beq.w	80100e6 <ucdr_serialize_uint64_t+0x176>
 800ffc2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ffc6:	702b      	strb	r3, [r5, #0]
 800ffc8:	2e01      	cmp	r6, #1
 800ffca:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ffce:	706b      	strb	r3, [r5, #1]
 800ffd0:	d073      	beq.n	80100ba <ucdr_serialize_uint64_t+0x14a>
 800ffd2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800ffd6:	70ab      	strb	r3, [r5, #2]
 800ffd8:	2e02      	cmp	r6, #2
 800ffda:	d072      	beq.n	80100c2 <ucdr_serialize_uint64_t+0x152>
 800ffdc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800ffe0:	70eb      	strb	r3, [r5, #3]
 800ffe2:	2e03      	cmp	r6, #3
 800ffe4:	d071      	beq.n	80100ca <ucdr_serialize_uint64_t+0x15a>
 800ffe6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800ffea:	712b      	strb	r3, [r5, #4]
 800ffec:	2e04      	cmp	r6, #4
 800ffee:	d070      	beq.n	80100d2 <ucdr_serialize_uint64_t+0x162>
 800fff0:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800fff4:	716b      	strb	r3, [r5, #5]
 800fff6:	2e05      	cmp	r6, #5
 800fff8:	d06f      	beq.n	80100da <ucdr_serialize_uint64_t+0x16a>
 800fffa:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800fffe:	71ab      	strb	r3, [r5, #6]
 8010000:	2e06      	cmp	r6, #6
 8010002:	d06e      	beq.n	80100e2 <ucdr_serialize_uint64_t+0x172>
 8010004:	3507      	adds	r5, #7
 8010006:	f89d 3000 	ldrb.w	r3, [sp]
 801000a:	702b      	strb	r3, [r5, #0]
 801000c:	6923      	ldr	r3, [r4, #16]
 801000e:	68a2      	ldr	r2, [r4, #8]
 8010010:	7da0      	ldrb	r0, [r4, #22]
 8010012:	3308      	adds	r3, #8
 8010014:	4442      	add	r2, r8
 8010016:	1b9b      	subs	r3, r3, r6
 8010018:	2108      	movs	r1, #8
 801001a:	f080 0001 	eor.w	r0, r0, #1
 801001e:	60a2      	str	r2, [r4, #8]
 8010020:	6123      	str	r3, [r4, #16]
 8010022:	7561      	strb	r1, [r4, #21]
 8010024:	b002      	add	sp, #8
 8010026:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801002a:	2108      	movs	r1, #8
 801002c:	4620      	mov	r0, r4
 801002e:	f001 f85b 	bl	80110e8 <ucdr_check_final_buffer_behavior>
 8010032:	b350      	cbz	r0, 801008a <ucdr_serialize_uint64_t+0x11a>
 8010034:	7d22      	ldrb	r2, [r4, #20]
 8010036:	68a3      	ldr	r3, [r4, #8]
 8010038:	2a01      	cmp	r2, #1
 801003a:	d02c      	beq.n	8010096 <ucdr_serialize_uint64_t+0x126>
 801003c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8010040:	701a      	strb	r2, [r3, #0]
 8010042:	68a3      	ldr	r3, [r4, #8]
 8010044:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010048:	705a      	strb	r2, [r3, #1]
 801004a:	68a3      	ldr	r3, [r4, #8]
 801004c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8010050:	709a      	strb	r2, [r3, #2]
 8010052:	68a3      	ldr	r3, [r4, #8]
 8010054:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8010058:	70da      	strb	r2, [r3, #3]
 801005a:	68a3      	ldr	r3, [r4, #8]
 801005c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8010060:	711a      	strb	r2, [r3, #4]
 8010062:	68a3      	ldr	r3, [r4, #8]
 8010064:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8010068:	715a      	strb	r2, [r3, #5]
 801006a:	68a3      	ldr	r3, [r4, #8]
 801006c:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8010070:	719a      	strb	r2, [r3, #6]
 8010072:	68a3      	ldr	r3, [r4, #8]
 8010074:	f89d 2000 	ldrb.w	r2, [sp]
 8010078:	71da      	strb	r2, [r3, #7]
 801007a:	68a2      	ldr	r2, [r4, #8]
 801007c:	6923      	ldr	r3, [r4, #16]
 801007e:	3208      	adds	r2, #8
 8010080:	3308      	adds	r3, #8
 8010082:	2108      	movs	r1, #8
 8010084:	60a2      	str	r2, [r4, #8]
 8010086:	6123      	str	r3, [r4, #16]
 8010088:	7561      	strb	r1, [r4, #21]
 801008a:	7da0      	ldrb	r0, [r4, #22]
 801008c:	f080 0001 	eor.w	r0, r0, #1
 8010090:	b002      	add	sp, #8
 8010092:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010096:	e9dd 1200 	ldrd	r1, r2, [sp]
 801009a:	6019      	str	r1, [r3, #0]
 801009c:	605a      	str	r2, [r3, #4]
 801009e:	e7ec      	b.n	801007a <ucdr_serialize_uint64_t+0x10a>
 80100a0:	68a2      	ldr	r2, [r4, #8]
 80100a2:	6923      	ldr	r3, [r4, #16]
 80100a4:	7da0      	ldrb	r0, [r4, #22]
 80100a6:	7567      	strb	r7, [r4, #21]
 80100a8:	1b92      	subs	r2, r2, r6
 80100aa:	1b9b      	subs	r3, r3, r6
 80100ac:	f080 0001 	eor.w	r0, r0, #1
 80100b0:	60a2      	str	r2, [r4, #8]
 80100b2:	6123      	str	r3, [r4, #16]
 80100b4:	b002      	add	sp, #8
 80100b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80100ba:	68a3      	ldr	r3, [r4, #8]
 80100bc:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80100c0:	701a      	strb	r2, [r3, #0]
 80100c2:	68a3      	ldr	r3, [r4, #8]
 80100c4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80100c8:	701a      	strb	r2, [r3, #0]
 80100ca:	68a3      	ldr	r3, [r4, #8]
 80100cc:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80100d0:	701a      	strb	r2, [r3, #0]
 80100d2:	68a3      	ldr	r3, [r4, #8]
 80100d4:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80100d8:	701a      	strb	r2, [r3, #0]
 80100da:	68a3      	ldr	r3, [r4, #8]
 80100dc:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80100e0:	701a      	strb	r2, [r3, #0]
 80100e2:	68a5      	ldr	r5, [r4, #8]
 80100e4:	e78f      	b.n	8010006 <ucdr_serialize_uint64_t+0x96>
 80100e6:	4628      	mov	r0, r5
 80100e8:	466d      	mov	r5, sp
 80100ea:	4632      	mov	r2, r6
 80100ec:	4629      	mov	r1, r5
 80100ee:	f00d fa34 	bl	801d55a <memcpy>
 80100f2:	68a0      	ldr	r0, [r4, #8]
 80100f4:	4642      	mov	r2, r8
 80100f6:	19a9      	adds	r1, r5, r6
 80100f8:	f00d fa2f 	bl	801d55a <memcpy>
 80100fc:	e786      	b.n	801000c <ucdr_serialize_uint64_t+0x9c>
 80100fe:	bf00      	nop

08010100 <ucdr_serialize_int16_t>:
 8010100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010104:	b082      	sub	sp, #8
 8010106:	460b      	mov	r3, r1
 8010108:	2102      	movs	r1, #2
 801010a:	4604      	mov	r4, r0
 801010c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8010110:	f001 f83e 	bl	8011190 <ucdr_buffer_alignment>
 8010114:	4601      	mov	r1, r0
 8010116:	4620      	mov	r0, r4
 8010118:	7d67      	ldrb	r7, [r4, #21]
 801011a:	f001 f87d 	bl	8011218 <ucdr_advance_buffer>
 801011e:	2102      	movs	r1, #2
 8010120:	4620      	mov	r0, r4
 8010122:	f000 ffd5 	bl	80110d0 <ucdr_check_buffer_available_for>
 8010126:	b1c0      	cbz	r0, 801015a <ucdr_serialize_int16_t+0x5a>
 8010128:	7d22      	ldrb	r2, [r4, #20]
 801012a:	68a3      	ldr	r3, [r4, #8]
 801012c:	2a01      	cmp	r2, #1
 801012e:	d04e      	beq.n	80101ce <ucdr_serialize_int16_t+0xce>
 8010130:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8010134:	701a      	strb	r2, [r3, #0]
 8010136:	68a3      	ldr	r3, [r4, #8]
 8010138:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801013c:	705a      	strb	r2, [r3, #1]
 801013e:	68a2      	ldr	r2, [r4, #8]
 8010140:	6923      	ldr	r3, [r4, #16]
 8010142:	3202      	adds	r2, #2
 8010144:	3302      	adds	r3, #2
 8010146:	2102      	movs	r1, #2
 8010148:	60a2      	str	r2, [r4, #8]
 801014a:	6123      	str	r3, [r4, #16]
 801014c:	7561      	strb	r1, [r4, #21]
 801014e:	7da0      	ldrb	r0, [r4, #22]
 8010150:	f080 0001 	eor.w	r0, r0, #1
 8010154:	b002      	add	sp, #8
 8010156:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801015a:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 801015e:	42ab      	cmp	r3, r5
 8010160:	d923      	bls.n	80101aa <ucdr_serialize_int16_t+0xaa>
 8010162:	1b5e      	subs	r6, r3, r5
 8010164:	60a3      	str	r3, [r4, #8]
 8010166:	6923      	ldr	r3, [r4, #16]
 8010168:	f1c6 0802 	rsb	r8, r6, #2
 801016c:	4433      	add	r3, r6
 801016e:	6123      	str	r3, [r4, #16]
 8010170:	4641      	mov	r1, r8
 8010172:	4620      	mov	r0, r4
 8010174:	f000 ffb8 	bl	80110e8 <ucdr_check_final_buffer_behavior>
 8010178:	b368      	cbz	r0, 80101d6 <ucdr_serialize_int16_t+0xd6>
 801017a:	7d23      	ldrb	r3, [r4, #20]
 801017c:	2b01      	cmp	r3, #1
 801017e:	d03b      	beq.n	80101f8 <ucdr_serialize_int16_t+0xf8>
 8010180:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010184:	702b      	strb	r3, [r5, #0]
 8010186:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801018a:	706b      	strb	r3, [r5, #1]
 801018c:	6923      	ldr	r3, [r4, #16]
 801018e:	68a2      	ldr	r2, [r4, #8]
 8010190:	7da0      	ldrb	r0, [r4, #22]
 8010192:	3302      	adds	r3, #2
 8010194:	4442      	add	r2, r8
 8010196:	1b9b      	subs	r3, r3, r6
 8010198:	2102      	movs	r1, #2
 801019a:	f080 0001 	eor.w	r0, r0, #1
 801019e:	60a2      	str	r2, [r4, #8]
 80101a0:	6123      	str	r3, [r4, #16]
 80101a2:	7561      	strb	r1, [r4, #21]
 80101a4:	b002      	add	sp, #8
 80101a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80101aa:	2102      	movs	r1, #2
 80101ac:	4620      	mov	r0, r4
 80101ae:	f000 ff9b 	bl	80110e8 <ucdr_check_final_buffer_behavior>
 80101b2:	2800      	cmp	r0, #0
 80101b4:	d0cb      	beq.n	801014e <ucdr_serialize_int16_t+0x4e>
 80101b6:	7d23      	ldrb	r3, [r4, #20]
 80101b8:	68a2      	ldr	r2, [r4, #8]
 80101ba:	2b01      	cmp	r3, #1
 80101bc:	d018      	beq.n	80101f0 <ucdr_serialize_int16_t+0xf0>
 80101be:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80101c2:	7013      	strb	r3, [r2, #0]
 80101c4:	68a3      	ldr	r3, [r4, #8]
 80101c6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80101ca:	705a      	strb	r2, [r3, #1]
 80101cc:	e7b7      	b.n	801013e <ucdr_serialize_int16_t+0x3e>
 80101ce:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80101d2:	801a      	strh	r2, [r3, #0]
 80101d4:	e7b3      	b.n	801013e <ucdr_serialize_int16_t+0x3e>
 80101d6:	68a2      	ldr	r2, [r4, #8]
 80101d8:	6923      	ldr	r3, [r4, #16]
 80101da:	7da0      	ldrb	r0, [r4, #22]
 80101dc:	7567      	strb	r7, [r4, #21]
 80101de:	1b92      	subs	r2, r2, r6
 80101e0:	1b9b      	subs	r3, r3, r6
 80101e2:	f080 0001 	eor.w	r0, r0, #1
 80101e6:	60a2      	str	r2, [r4, #8]
 80101e8:	6123      	str	r3, [r4, #16]
 80101ea:	b002      	add	sp, #8
 80101ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80101f0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80101f4:	8013      	strh	r3, [r2, #0]
 80101f6:	e7a2      	b.n	801013e <ucdr_serialize_int16_t+0x3e>
 80101f8:	4628      	mov	r0, r5
 80101fa:	f10d 0506 	add.w	r5, sp, #6
 80101fe:	4632      	mov	r2, r6
 8010200:	4629      	mov	r1, r5
 8010202:	f00d f9aa 	bl	801d55a <memcpy>
 8010206:	68a0      	ldr	r0, [r4, #8]
 8010208:	4642      	mov	r2, r8
 801020a:	19a9      	adds	r1, r5, r6
 801020c:	f00d f9a5 	bl	801d55a <memcpy>
 8010210:	e7bc      	b.n	801018c <ucdr_serialize_int16_t+0x8c>
 8010212:	bf00      	nop

08010214 <ucdr_deserialize_int16_t>:
 8010214:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010218:	460d      	mov	r5, r1
 801021a:	2102      	movs	r1, #2
 801021c:	4604      	mov	r4, r0
 801021e:	f000 ffb7 	bl	8011190 <ucdr_buffer_alignment>
 8010222:	4601      	mov	r1, r0
 8010224:	4620      	mov	r0, r4
 8010226:	f894 8015 	ldrb.w	r8, [r4, #21]
 801022a:	f000 fff5 	bl	8011218 <ucdr_advance_buffer>
 801022e:	2102      	movs	r1, #2
 8010230:	4620      	mov	r0, r4
 8010232:	f000 ff4d 	bl	80110d0 <ucdr_check_buffer_available_for>
 8010236:	b1a8      	cbz	r0, 8010264 <ucdr_deserialize_int16_t+0x50>
 8010238:	7d22      	ldrb	r2, [r4, #20]
 801023a:	68a3      	ldr	r3, [r4, #8]
 801023c:	2a01      	cmp	r2, #1
 801023e:	d046      	beq.n	80102ce <ucdr_deserialize_int16_t+0xba>
 8010240:	785b      	ldrb	r3, [r3, #1]
 8010242:	702b      	strb	r3, [r5, #0]
 8010244:	68a3      	ldr	r3, [r4, #8]
 8010246:	781b      	ldrb	r3, [r3, #0]
 8010248:	706b      	strb	r3, [r5, #1]
 801024a:	68a2      	ldr	r2, [r4, #8]
 801024c:	6923      	ldr	r3, [r4, #16]
 801024e:	3202      	adds	r2, #2
 8010250:	3302      	adds	r3, #2
 8010252:	2102      	movs	r1, #2
 8010254:	60a2      	str	r2, [r4, #8]
 8010256:	6123      	str	r3, [r4, #16]
 8010258:	7561      	strb	r1, [r4, #21]
 801025a:	7da0      	ldrb	r0, [r4, #22]
 801025c:	f080 0001 	eor.w	r0, r0, #1
 8010260:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010264:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8010268:	42be      	cmp	r6, r7
 801026a:	d920      	bls.n	80102ae <ucdr_deserialize_int16_t+0x9a>
 801026c:	6923      	ldr	r3, [r4, #16]
 801026e:	60a6      	str	r6, [r4, #8]
 8010270:	1bf6      	subs	r6, r6, r7
 8010272:	4433      	add	r3, r6
 8010274:	f1c6 0902 	rsb	r9, r6, #2
 8010278:	6123      	str	r3, [r4, #16]
 801027a:	4649      	mov	r1, r9
 801027c:	4620      	mov	r0, r4
 801027e:	f000 ff33 	bl	80110e8 <ucdr_check_final_buffer_behavior>
 8010282:	b338      	cbz	r0, 80102d4 <ucdr_deserialize_int16_t+0xc0>
 8010284:	7d23      	ldrb	r3, [r4, #20]
 8010286:	2b01      	cmp	r3, #1
 8010288:	d034      	beq.n	80102f4 <ucdr_deserialize_int16_t+0xe0>
 801028a:	787b      	ldrb	r3, [r7, #1]
 801028c:	702b      	strb	r3, [r5, #0]
 801028e:	783b      	ldrb	r3, [r7, #0]
 8010290:	706b      	strb	r3, [r5, #1]
 8010292:	6923      	ldr	r3, [r4, #16]
 8010294:	68a2      	ldr	r2, [r4, #8]
 8010296:	7da0      	ldrb	r0, [r4, #22]
 8010298:	2102      	movs	r1, #2
 801029a:	3302      	adds	r3, #2
 801029c:	444a      	add	r2, r9
 801029e:	1b9b      	subs	r3, r3, r6
 80102a0:	7561      	strb	r1, [r4, #21]
 80102a2:	60a2      	str	r2, [r4, #8]
 80102a4:	6123      	str	r3, [r4, #16]
 80102a6:	f080 0001 	eor.w	r0, r0, #1
 80102aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80102ae:	2102      	movs	r1, #2
 80102b0:	4620      	mov	r0, r4
 80102b2:	f000 ff19 	bl	80110e8 <ucdr_check_final_buffer_behavior>
 80102b6:	2800      	cmp	r0, #0
 80102b8:	d0cf      	beq.n	801025a <ucdr_deserialize_int16_t+0x46>
 80102ba:	7d23      	ldrb	r3, [r4, #20]
 80102bc:	68a2      	ldr	r2, [r4, #8]
 80102be:	2b01      	cmp	r3, #1
 80102c0:	d015      	beq.n	80102ee <ucdr_deserialize_int16_t+0xda>
 80102c2:	7853      	ldrb	r3, [r2, #1]
 80102c4:	702b      	strb	r3, [r5, #0]
 80102c6:	68a3      	ldr	r3, [r4, #8]
 80102c8:	781b      	ldrb	r3, [r3, #0]
 80102ca:	706b      	strb	r3, [r5, #1]
 80102cc:	e7bd      	b.n	801024a <ucdr_deserialize_int16_t+0x36>
 80102ce:	881b      	ldrh	r3, [r3, #0]
 80102d0:	802b      	strh	r3, [r5, #0]
 80102d2:	e7ba      	b.n	801024a <ucdr_deserialize_int16_t+0x36>
 80102d4:	68a2      	ldr	r2, [r4, #8]
 80102d6:	6923      	ldr	r3, [r4, #16]
 80102d8:	7da0      	ldrb	r0, [r4, #22]
 80102da:	f884 8015 	strb.w	r8, [r4, #21]
 80102de:	1b92      	subs	r2, r2, r6
 80102e0:	1b9b      	subs	r3, r3, r6
 80102e2:	60a2      	str	r2, [r4, #8]
 80102e4:	6123      	str	r3, [r4, #16]
 80102e6:	f080 0001 	eor.w	r0, r0, #1
 80102ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80102ee:	8813      	ldrh	r3, [r2, #0]
 80102f0:	802b      	strh	r3, [r5, #0]
 80102f2:	e7aa      	b.n	801024a <ucdr_deserialize_int16_t+0x36>
 80102f4:	4639      	mov	r1, r7
 80102f6:	4632      	mov	r2, r6
 80102f8:	4628      	mov	r0, r5
 80102fa:	f00d f92e 	bl	801d55a <memcpy>
 80102fe:	68a1      	ldr	r1, [r4, #8]
 8010300:	464a      	mov	r2, r9
 8010302:	19a8      	adds	r0, r5, r6
 8010304:	f00d f929 	bl	801d55a <memcpy>
 8010308:	e7c3      	b.n	8010292 <ucdr_deserialize_int16_t+0x7e>
 801030a:	bf00      	nop

0801030c <ucdr_serialize_int32_t>:
 801030c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010310:	b082      	sub	sp, #8
 8010312:	4604      	mov	r4, r0
 8010314:	9101      	str	r1, [sp, #4]
 8010316:	2104      	movs	r1, #4
 8010318:	f000 ff3a 	bl	8011190 <ucdr_buffer_alignment>
 801031c:	4601      	mov	r1, r0
 801031e:	4620      	mov	r0, r4
 8010320:	7d67      	ldrb	r7, [r4, #21]
 8010322:	f000 ff79 	bl	8011218 <ucdr_advance_buffer>
 8010326:	2104      	movs	r1, #4
 8010328:	4620      	mov	r0, r4
 801032a:	f000 fed1 	bl	80110d0 <ucdr_check_buffer_available_for>
 801032e:	b300      	cbz	r0, 8010372 <ucdr_serialize_int32_t+0x66>
 8010330:	7d22      	ldrb	r2, [r4, #20]
 8010332:	68a3      	ldr	r3, [r4, #8]
 8010334:	2a01      	cmp	r2, #1
 8010336:	d05d      	beq.n	80103f4 <ucdr_serialize_int32_t+0xe8>
 8010338:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801033c:	701a      	strb	r2, [r3, #0]
 801033e:	68a3      	ldr	r3, [r4, #8]
 8010340:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010344:	705a      	strb	r2, [r3, #1]
 8010346:	68a3      	ldr	r3, [r4, #8]
 8010348:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801034c:	709a      	strb	r2, [r3, #2]
 801034e:	68a3      	ldr	r3, [r4, #8]
 8010350:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8010354:	70da      	strb	r2, [r3, #3]
 8010356:	68a2      	ldr	r2, [r4, #8]
 8010358:	6923      	ldr	r3, [r4, #16]
 801035a:	3204      	adds	r2, #4
 801035c:	3304      	adds	r3, #4
 801035e:	2104      	movs	r1, #4
 8010360:	60a2      	str	r2, [r4, #8]
 8010362:	6123      	str	r3, [r4, #16]
 8010364:	7561      	strb	r1, [r4, #21]
 8010366:	7da0      	ldrb	r0, [r4, #22]
 8010368:	f080 0001 	eor.w	r0, r0, #1
 801036c:	b002      	add	sp, #8
 801036e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010372:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8010376:	42ab      	cmp	r3, r5
 8010378:	d92e      	bls.n	80103d8 <ucdr_serialize_int32_t+0xcc>
 801037a:	1b5e      	subs	r6, r3, r5
 801037c:	60a3      	str	r3, [r4, #8]
 801037e:	6923      	ldr	r3, [r4, #16]
 8010380:	f1c6 0804 	rsb	r8, r6, #4
 8010384:	4433      	add	r3, r6
 8010386:	6123      	str	r3, [r4, #16]
 8010388:	4641      	mov	r1, r8
 801038a:	4620      	mov	r0, r4
 801038c:	f000 feac 	bl	80110e8 <ucdr_check_final_buffer_behavior>
 8010390:	b398      	cbz	r0, 80103fa <ucdr_serialize_int32_t+0xee>
 8010392:	7d23      	ldrb	r3, [r4, #20]
 8010394:	2b01      	cmp	r3, #1
 8010396:	d046      	beq.n	8010426 <ucdr_serialize_int32_t+0x11a>
 8010398:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801039c:	702b      	strb	r3, [r5, #0]
 801039e:	2e01      	cmp	r6, #1
 80103a0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80103a4:	706b      	strb	r3, [r5, #1]
 80103a6:	d035      	beq.n	8010414 <ucdr_serialize_int32_t+0x108>
 80103a8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80103ac:	70ab      	strb	r3, [r5, #2]
 80103ae:	2e02      	cmp	r6, #2
 80103b0:	d034      	beq.n	801041c <ucdr_serialize_int32_t+0x110>
 80103b2:	3503      	adds	r5, #3
 80103b4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80103b8:	702b      	strb	r3, [r5, #0]
 80103ba:	6923      	ldr	r3, [r4, #16]
 80103bc:	68a2      	ldr	r2, [r4, #8]
 80103be:	7da0      	ldrb	r0, [r4, #22]
 80103c0:	3304      	adds	r3, #4
 80103c2:	4442      	add	r2, r8
 80103c4:	1b9b      	subs	r3, r3, r6
 80103c6:	2104      	movs	r1, #4
 80103c8:	f080 0001 	eor.w	r0, r0, #1
 80103cc:	60a2      	str	r2, [r4, #8]
 80103ce:	6123      	str	r3, [r4, #16]
 80103d0:	7561      	strb	r1, [r4, #21]
 80103d2:	b002      	add	sp, #8
 80103d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80103d8:	2104      	movs	r1, #4
 80103da:	4620      	mov	r0, r4
 80103dc:	f000 fe84 	bl	80110e8 <ucdr_check_final_buffer_behavior>
 80103e0:	2800      	cmp	r0, #0
 80103e2:	d0c0      	beq.n	8010366 <ucdr_serialize_int32_t+0x5a>
 80103e4:	7d23      	ldrb	r3, [r4, #20]
 80103e6:	68a2      	ldr	r2, [r4, #8]
 80103e8:	2b01      	cmp	r3, #1
 80103ea:	d019      	beq.n	8010420 <ucdr_serialize_int32_t+0x114>
 80103ec:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80103f0:	7013      	strb	r3, [r2, #0]
 80103f2:	e7a4      	b.n	801033e <ucdr_serialize_int32_t+0x32>
 80103f4:	9a01      	ldr	r2, [sp, #4]
 80103f6:	601a      	str	r2, [r3, #0]
 80103f8:	e7ad      	b.n	8010356 <ucdr_serialize_int32_t+0x4a>
 80103fa:	68a2      	ldr	r2, [r4, #8]
 80103fc:	6923      	ldr	r3, [r4, #16]
 80103fe:	7da0      	ldrb	r0, [r4, #22]
 8010400:	7567      	strb	r7, [r4, #21]
 8010402:	1b92      	subs	r2, r2, r6
 8010404:	1b9b      	subs	r3, r3, r6
 8010406:	f080 0001 	eor.w	r0, r0, #1
 801040a:	60a2      	str	r2, [r4, #8]
 801040c:	6123      	str	r3, [r4, #16]
 801040e:	b002      	add	sp, #8
 8010410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010414:	68a3      	ldr	r3, [r4, #8]
 8010416:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801041a:	701a      	strb	r2, [r3, #0]
 801041c:	68a5      	ldr	r5, [r4, #8]
 801041e:	e7c9      	b.n	80103b4 <ucdr_serialize_int32_t+0xa8>
 8010420:	9b01      	ldr	r3, [sp, #4]
 8010422:	6013      	str	r3, [r2, #0]
 8010424:	e797      	b.n	8010356 <ucdr_serialize_int32_t+0x4a>
 8010426:	4628      	mov	r0, r5
 8010428:	ad01      	add	r5, sp, #4
 801042a:	4632      	mov	r2, r6
 801042c:	4629      	mov	r1, r5
 801042e:	f00d f894 	bl	801d55a <memcpy>
 8010432:	68a0      	ldr	r0, [r4, #8]
 8010434:	4642      	mov	r2, r8
 8010436:	19a9      	adds	r1, r5, r6
 8010438:	f00d f88f 	bl	801d55a <memcpy>
 801043c:	e7bd      	b.n	80103ba <ucdr_serialize_int32_t+0xae>
 801043e:	bf00      	nop

08010440 <ucdr_deserialize_int32_t>:
 8010440:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010444:	460d      	mov	r5, r1
 8010446:	2104      	movs	r1, #4
 8010448:	4604      	mov	r4, r0
 801044a:	f000 fea1 	bl	8011190 <ucdr_buffer_alignment>
 801044e:	4601      	mov	r1, r0
 8010450:	4620      	mov	r0, r4
 8010452:	f894 8015 	ldrb.w	r8, [r4, #21]
 8010456:	f000 fedf 	bl	8011218 <ucdr_advance_buffer>
 801045a:	2104      	movs	r1, #4
 801045c:	4620      	mov	r0, r4
 801045e:	f000 fe37 	bl	80110d0 <ucdr_check_buffer_available_for>
 8010462:	b1d8      	cbz	r0, 801049c <ucdr_deserialize_int32_t+0x5c>
 8010464:	7d22      	ldrb	r2, [r4, #20]
 8010466:	68a3      	ldr	r3, [r4, #8]
 8010468:	2a01      	cmp	r2, #1
 801046a:	d052      	beq.n	8010512 <ucdr_deserialize_int32_t+0xd2>
 801046c:	78db      	ldrb	r3, [r3, #3]
 801046e:	702b      	strb	r3, [r5, #0]
 8010470:	68a3      	ldr	r3, [r4, #8]
 8010472:	789b      	ldrb	r3, [r3, #2]
 8010474:	706b      	strb	r3, [r5, #1]
 8010476:	68a3      	ldr	r3, [r4, #8]
 8010478:	785b      	ldrb	r3, [r3, #1]
 801047a:	70ab      	strb	r3, [r5, #2]
 801047c:	68a3      	ldr	r3, [r4, #8]
 801047e:	781b      	ldrb	r3, [r3, #0]
 8010480:	70eb      	strb	r3, [r5, #3]
 8010482:	68a2      	ldr	r2, [r4, #8]
 8010484:	6923      	ldr	r3, [r4, #16]
 8010486:	3204      	adds	r2, #4
 8010488:	3304      	adds	r3, #4
 801048a:	2104      	movs	r1, #4
 801048c:	60a2      	str	r2, [r4, #8]
 801048e:	6123      	str	r3, [r4, #16]
 8010490:	7561      	strb	r1, [r4, #21]
 8010492:	7da0      	ldrb	r0, [r4, #22]
 8010494:	f080 0001 	eor.w	r0, r0, #1
 8010498:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801049c:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 80104a0:	42b7      	cmp	r7, r6
 80104a2:	d92a      	bls.n	80104fa <ucdr_deserialize_int32_t+0xba>
 80104a4:	6923      	ldr	r3, [r4, #16]
 80104a6:	60a7      	str	r7, [r4, #8]
 80104a8:	1bbf      	subs	r7, r7, r6
 80104aa:	443b      	add	r3, r7
 80104ac:	f1c7 0904 	rsb	r9, r7, #4
 80104b0:	6123      	str	r3, [r4, #16]
 80104b2:	4649      	mov	r1, r9
 80104b4:	4620      	mov	r0, r4
 80104b6:	f000 fe17 	bl	80110e8 <ucdr_check_final_buffer_behavior>
 80104ba:	b368      	cbz	r0, 8010518 <ucdr_deserialize_int32_t+0xd8>
 80104bc:	7d23      	ldrb	r3, [r4, #20]
 80104be:	2b01      	cmp	r3, #1
 80104c0:	d040      	beq.n	8010544 <ucdr_deserialize_int32_t+0x104>
 80104c2:	78f3      	ldrb	r3, [r6, #3]
 80104c4:	702b      	strb	r3, [r5, #0]
 80104c6:	78b3      	ldrb	r3, [r6, #2]
 80104c8:	706b      	strb	r3, [r5, #1]
 80104ca:	2f01      	cmp	r7, #1
 80104cc:	d031      	beq.n	8010532 <ucdr_deserialize_int32_t+0xf2>
 80104ce:	7873      	ldrb	r3, [r6, #1]
 80104d0:	70ab      	strb	r3, [r5, #2]
 80104d2:	2f02      	cmp	r7, #2
 80104d4:	f105 0503 	add.w	r5, r5, #3
 80104d8:	d02f      	beq.n	801053a <ucdr_deserialize_int32_t+0xfa>
 80104da:	7833      	ldrb	r3, [r6, #0]
 80104dc:	702b      	strb	r3, [r5, #0]
 80104de:	6923      	ldr	r3, [r4, #16]
 80104e0:	68a2      	ldr	r2, [r4, #8]
 80104e2:	7da0      	ldrb	r0, [r4, #22]
 80104e4:	2104      	movs	r1, #4
 80104e6:	3304      	adds	r3, #4
 80104e8:	444a      	add	r2, r9
 80104ea:	1bdb      	subs	r3, r3, r7
 80104ec:	7561      	strb	r1, [r4, #21]
 80104ee:	60a2      	str	r2, [r4, #8]
 80104f0:	6123      	str	r3, [r4, #16]
 80104f2:	f080 0001 	eor.w	r0, r0, #1
 80104f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80104fa:	2104      	movs	r1, #4
 80104fc:	4620      	mov	r0, r4
 80104fe:	f000 fdf3 	bl	80110e8 <ucdr_check_final_buffer_behavior>
 8010502:	2800      	cmp	r0, #0
 8010504:	d0c5      	beq.n	8010492 <ucdr_deserialize_int32_t+0x52>
 8010506:	7d23      	ldrb	r3, [r4, #20]
 8010508:	68a2      	ldr	r2, [r4, #8]
 801050a:	2b01      	cmp	r3, #1
 801050c:	d017      	beq.n	801053e <ucdr_deserialize_int32_t+0xfe>
 801050e:	78d3      	ldrb	r3, [r2, #3]
 8010510:	e7ad      	b.n	801046e <ucdr_deserialize_int32_t+0x2e>
 8010512:	681b      	ldr	r3, [r3, #0]
 8010514:	602b      	str	r3, [r5, #0]
 8010516:	e7b4      	b.n	8010482 <ucdr_deserialize_int32_t+0x42>
 8010518:	68a2      	ldr	r2, [r4, #8]
 801051a:	6923      	ldr	r3, [r4, #16]
 801051c:	7da0      	ldrb	r0, [r4, #22]
 801051e:	f884 8015 	strb.w	r8, [r4, #21]
 8010522:	1bd2      	subs	r2, r2, r7
 8010524:	1bdb      	subs	r3, r3, r7
 8010526:	60a2      	str	r2, [r4, #8]
 8010528:	6123      	str	r3, [r4, #16]
 801052a:	f080 0001 	eor.w	r0, r0, #1
 801052e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010532:	68a3      	ldr	r3, [r4, #8]
 8010534:	785b      	ldrb	r3, [r3, #1]
 8010536:	70ab      	strb	r3, [r5, #2]
 8010538:	3503      	adds	r5, #3
 801053a:	68a6      	ldr	r6, [r4, #8]
 801053c:	e7cd      	b.n	80104da <ucdr_deserialize_int32_t+0x9a>
 801053e:	6813      	ldr	r3, [r2, #0]
 8010540:	602b      	str	r3, [r5, #0]
 8010542:	e79e      	b.n	8010482 <ucdr_deserialize_int32_t+0x42>
 8010544:	4631      	mov	r1, r6
 8010546:	463a      	mov	r2, r7
 8010548:	4628      	mov	r0, r5
 801054a:	f00d f806 	bl	801d55a <memcpy>
 801054e:	68a1      	ldr	r1, [r4, #8]
 8010550:	464a      	mov	r2, r9
 8010552:	19e8      	adds	r0, r5, r7
 8010554:	f00d f801 	bl	801d55a <memcpy>
 8010558:	e7c1      	b.n	80104de <ucdr_deserialize_int32_t+0x9e>
 801055a:	bf00      	nop

0801055c <ucdr_serialize_int64_t>:
 801055c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010560:	2108      	movs	r1, #8
 8010562:	b082      	sub	sp, #8
 8010564:	4604      	mov	r4, r0
 8010566:	e9cd 2300 	strd	r2, r3, [sp]
 801056a:	f000 fe11 	bl	8011190 <ucdr_buffer_alignment>
 801056e:	4601      	mov	r1, r0
 8010570:	4620      	mov	r0, r4
 8010572:	7d67      	ldrb	r7, [r4, #21]
 8010574:	f000 fe50 	bl	8011218 <ucdr_advance_buffer>
 8010578:	2108      	movs	r1, #8
 801057a:	4620      	mov	r0, r4
 801057c:	f000 fda8 	bl	80110d0 <ucdr_check_buffer_available_for>
 8010580:	2800      	cmp	r0, #0
 8010582:	d14d      	bne.n	8010620 <ucdr_serialize_int64_t+0xc4>
 8010584:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8010588:	42ab      	cmp	r3, r5
 801058a:	d944      	bls.n	8010616 <ucdr_serialize_int64_t+0xba>
 801058c:	1b5e      	subs	r6, r3, r5
 801058e:	60a3      	str	r3, [r4, #8]
 8010590:	6923      	ldr	r3, [r4, #16]
 8010592:	f1c6 0808 	rsb	r8, r6, #8
 8010596:	4433      	add	r3, r6
 8010598:	6123      	str	r3, [r4, #16]
 801059a:	4641      	mov	r1, r8
 801059c:	4620      	mov	r0, r4
 801059e:	f000 fda3 	bl	80110e8 <ucdr_check_final_buffer_behavior>
 80105a2:	2800      	cmp	r0, #0
 80105a4:	d072      	beq.n	801068c <ucdr_serialize_int64_t+0x130>
 80105a6:	7d23      	ldrb	r3, [r4, #20]
 80105a8:	2b01      	cmp	r3, #1
 80105aa:	f000 8092 	beq.w	80106d2 <ucdr_serialize_int64_t+0x176>
 80105ae:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80105b2:	702b      	strb	r3, [r5, #0]
 80105b4:	2e01      	cmp	r6, #1
 80105b6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80105ba:	706b      	strb	r3, [r5, #1]
 80105bc:	d073      	beq.n	80106a6 <ucdr_serialize_int64_t+0x14a>
 80105be:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80105c2:	70ab      	strb	r3, [r5, #2]
 80105c4:	2e02      	cmp	r6, #2
 80105c6:	d072      	beq.n	80106ae <ucdr_serialize_int64_t+0x152>
 80105c8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80105cc:	70eb      	strb	r3, [r5, #3]
 80105ce:	2e03      	cmp	r6, #3
 80105d0:	d071      	beq.n	80106b6 <ucdr_serialize_int64_t+0x15a>
 80105d2:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80105d6:	712b      	strb	r3, [r5, #4]
 80105d8:	2e04      	cmp	r6, #4
 80105da:	d070      	beq.n	80106be <ucdr_serialize_int64_t+0x162>
 80105dc:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80105e0:	716b      	strb	r3, [r5, #5]
 80105e2:	2e05      	cmp	r6, #5
 80105e4:	d06f      	beq.n	80106c6 <ucdr_serialize_int64_t+0x16a>
 80105e6:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80105ea:	71ab      	strb	r3, [r5, #6]
 80105ec:	2e06      	cmp	r6, #6
 80105ee:	d06e      	beq.n	80106ce <ucdr_serialize_int64_t+0x172>
 80105f0:	3507      	adds	r5, #7
 80105f2:	f89d 3000 	ldrb.w	r3, [sp]
 80105f6:	702b      	strb	r3, [r5, #0]
 80105f8:	6923      	ldr	r3, [r4, #16]
 80105fa:	68a2      	ldr	r2, [r4, #8]
 80105fc:	7da0      	ldrb	r0, [r4, #22]
 80105fe:	3308      	adds	r3, #8
 8010600:	4442      	add	r2, r8
 8010602:	1b9b      	subs	r3, r3, r6
 8010604:	2108      	movs	r1, #8
 8010606:	f080 0001 	eor.w	r0, r0, #1
 801060a:	60a2      	str	r2, [r4, #8]
 801060c:	6123      	str	r3, [r4, #16]
 801060e:	7561      	strb	r1, [r4, #21]
 8010610:	b002      	add	sp, #8
 8010612:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010616:	2108      	movs	r1, #8
 8010618:	4620      	mov	r0, r4
 801061a:	f000 fd65 	bl	80110e8 <ucdr_check_final_buffer_behavior>
 801061e:	b350      	cbz	r0, 8010676 <ucdr_serialize_int64_t+0x11a>
 8010620:	7d22      	ldrb	r2, [r4, #20]
 8010622:	68a3      	ldr	r3, [r4, #8]
 8010624:	2a01      	cmp	r2, #1
 8010626:	d02c      	beq.n	8010682 <ucdr_serialize_int64_t+0x126>
 8010628:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801062c:	701a      	strb	r2, [r3, #0]
 801062e:	68a3      	ldr	r3, [r4, #8]
 8010630:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010634:	705a      	strb	r2, [r3, #1]
 8010636:	68a3      	ldr	r3, [r4, #8]
 8010638:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801063c:	709a      	strb	r2, [r3, #2]
 801063e:	68a3      	ldr	r3, [r4, #8]
 8010640:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8010644:	70da      	strb	r2, [r3, #3]
 8010646:	68a3      	ldr	r3, [r4, #8]
 8010648:	f89d 2003 	ldrb.w	r2, [sp, #3]
 801064c:	711a      	strb	r2, [r3, #4]
 801064e:	68a3      	ldr	r3, [r4, #8]
 8010650:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8010654:	715a      	strb	r2, [r3, #5]
 8010656:	68a3      	ldr	r3, [r4, #8]
 8010658:	f89d 2001 	ldrb.w	r2, [sp, #1]
 801065c:	719a      	strb	r2, [r3, #6]
 801065e:	68a3      	ldr	r3, [r4, #8]
 8010660:	f89d 2000 	ldrb.w	r2, [sp]
 8010664:	71da      	strb	r2, [r3, #7]
 8010666:	68a2      	ldr	r2, [r4, #8]
 8010668:	6923      	ldr	r3, [r4, #16]
 801066a:	3208      	adds	r2, #8
 801066c:	3308      	adds	r3, #8
 801066e:	2108      	movs	r1, #8
 8010670:	60a2      	str	r2, [r4, #8]
 8010672:	6123      	str	r3, [r4, #16]
 8010674:	7561      	strb	r1, [r4, #21]
 8010676:	7da0      	ldrb	r0, [r4, #22]
 8010678:	f080 0001 	eor.w	r0, r0, #1
 801067c:	b002      	add	sp, #8
 801067e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010682:	e9dd 1200 	ldrd	r1, r2, [sp]
 8010686:	6019      	str	r1, [r3, #0]
 8010688:	605a      	str	r2, [r3, #4]
 801068a:	e7ec      	b.n	8010666 <ucdr_serialize_int64_t+0x10a>
 801068c:	68a2      	ldr	r2, [r4, #8]
 801068e:	6923      	ldr	r3, [r4, #16]
 8010690:	7da0      	ldrb	r0, [r4, #22]
 8010692:	7567      	strb	r7, [r4, #21]
 8010694:	1b92      	subs	r2, r2, r6
 8010696:	1b9b      	subs	r3, r3, r6
 8010698:	f080 0001 	eor.w	r0, r0, #1
 801069c:	60a2      	str	r2, [r4, #8]
 801069e:	6123      	str	r3, [r4, #16]
 80106a0:	b002      	add	sp, #8
 80106a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80106a6:	68a3      	ldr	r3, [r4, #8]
 80106a8:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80106ac:	701a      	strb	r2, [r3, #0]
 80106ae:	68a3      	ldr	r3, [r4, #8]
 80106b0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80106b4:	701a      	strb	r2, [r3, #0]
 80106b6:	68a3      	ldr	r3, [r4, #8]
 80106b8:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80106bc:	701a      	strb	r2, [r3, #0]
 80106be:	68a3      	ldr	r3, [r4, #8]
 80106c0:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80106c4:	701a      	strb	r2, [r3, #0]
 80106c6:	68a3      	ldr	r3, [r4, #8]
 80106c8:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80106cc:	701a      	strb	r2, [r3, #0]
 80106ce:	68a5      	ldr	r5, [r4, #8]
 80106d0:	e78f      	b.n	80105f2 <ucdr_serialize_int64_t+0x96>
 80106d2:	4628      	mov	r0, r5
 80106d4:	466d      	mov	r5, sp
 80106d6:	4632      	mov	r2, r6
 80106d8:	4629      	mov	r1, r5
 80106da:	f00c ff3e 	bl	801d55a <memcpy>
 80106de:	68a0      	ldr	r0, [r4, #8]
 80106e0:	4642      	mov	r2, r8
 80106e2:	19a9      	adds	r1, r5, r6
 80106e4:	f00c ff39 	bl	801d55a <memcpy>
 80106e8:	e786      	b.n	80105f8 <ucdr_serialize_int64_t+0x9c>
 80106ea:	bf00      	nop

080106ec <ucdr_deserialize_int64_t>:
 80106ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80106f0:	460d      	mov	r5, r1
 80106f2:	2108      	movs	r1, #8
 80106f4:	4604      	mov	r4, r0
 80106f6:	f000 fd4b 	bl	8011190 <ucdr_buffer_alignment>
 80106fa:	4601      	mov	r1, r0
 80106fc:	4620      	mov	r0, r4
 80106fe:	f894 8015 	ldrb.w	r8, [r4, #21]
 8010702:	f000 fd89 	bl	8011218 <ucdr_advance_buffer>
 8010706:	2108      	movs	r1, #8
 8010708:	4620      	mov	r0, r4
 801070a:	f000 fce1 	bl	80110d0 <ucdr_check_buffer_available_for>
 801070e:	2800      	cmp	r0, #0
 8010710:	d147      	bne.n	80107a2 <ucdr_deserialize_int64_t+0xb6>
 8010712:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8010716:	42be      	cmp	r6, r7
 8010718:	d93e      	bls.n	8010798 <ucdr_deserialize_int64_t+0xac>
 801071a:	6923      	ldr	r3, [r4, #16]
 801071c:	60a6      	str	r6, [r4, #8]
 801071e:	1bf6      	subs	r6, r6, r7
 8010720:	4433      	add	r3, r6
 8010722:	f1c6 0908 	rsb	r9, r6, #8
 8010726:	6123      	str	r3, [r4, #16]
 8010728:	4649      	mov	r1, r9
 801072a:	4620      	mov	r0, r4
 801072c:	f000 fcdc 	bl	80110e8 <ucdr_check_final_buffer_behavior>
 8010730:	2800      	cmp	r0, #0
 8010732:	d063      	beq.n	80107fc <ucdr_deserialize_int64_t+0x110>
 8010734:	7d23      	ldrb	r3, [r4, #20]
 8010736:	2b01      	cmp	r3, #1
 8010738:	f000 8083 	beq.w	8010842 <ucdr_deserialize_int64_t+0x156>
 801073c:	79fb      	ldrb	r3, [r7, #7]
 801073e:	702b      	strb	r3, [r5, #0]
 8010740:	79bb      	ldrb	r3, [r7, #6]
 8010742:	706b      	strb	r3, [r5, #1]
 8010744:	2e01      	cmp	r6, #1
 8010746:	d066      	beq.n	8010816 <ucdr_deserialize_int64_t+0x12a>
 8010748:	797b      	ldrb	r3, [r7, #5]
 801074a:	70ab      	strb	r3, [r5, #2]
 801074c:	2e02      	cmp	r6, #2
 801074e:	f000 8089 	beq.w	8010864 <ucdr_deserialize_int64_t+0x178>
 8010752:	793b      	ldrb	r3, [r7, #4]
 8010754:	70eb      	strb	r3, [r5, #3]
 8010756:	2e03      	cmp	r6, #3
 8010758:	f000 8082 	beq.w	8010860 <ucdr_deserialize_int64_t+0x174>
 801075c:	78fb      	ldrb	r3, [r7, #3]
 801075e:	712b      	strb	r3, [r5, #4]
 8010760:	2e04      	cmp	r6, #4
 8010762:	d07b      	beq.n	801085c <ucdr_deserialize_int64_t+0x170>
 8010764:	78bb      	ldrb	r3, [r7, #2]
 8010766:	716b      	strb	r3, [r5, #5]
 8010768:	2e05      	cmp	r6, #5
 801076a:	d075      	beq.n	8010858 <ucdr_deserialize_int64_t+0x16c>
 801076c:	787b      	ldrb	r3, [r7, #1]
 801076e:	71ab      	strb	r3, [r5, #6]
 8010770:	2e06      	cmp	r6, #6
 8010772:	f105 0507 	add.w	r5, r5, #7
 8010776:	d062      	beq.n	801083e <ucdr_deserialize_int64_t+0x152>
 8010778:	783b      	ldrb	r3, [r7, #0]
 801077a:	702b      	strb	r3, [r5, #0]
 801077c:	6923      	ldr	r3, [r4, #16]
 801077e:	68a2      	ldr	r2, [r4, #8]
 8010780:	7da0      	ldrb	r0, [r4, #22]
 8010782:	2108      	movs	r1, #8
 8010784:	3308      	adds	r3, #8
 8010786:	444a      	add	r2, r9
 8010788:	1b9b      	subs	r3, r3, r6
 801078a:	7561      	strb	r1, [r4, #21]
 801078c:	60a2      	str	r2, [r4, #8]
 801078e:	6123      	str	r3, [r4, #16]
 8010790:	f080 0001 	eor.w	r0, r0, #1
 8010794:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010798:	2108      	movs	r1, #8
 801079a:	4620      	mov	r0, r4
 801079c:	f000 fca4 	bl	80110e8 <ucdr_check_final_buffer_behavior>
 80107a0:	b310      	cbz	r0, 80107e8 <ucdr_deserialize_int64_t+0xfc>
 80107a2:	7d22      	ldrb	r2, [r4, #20]
 80107a4:	68a3      	ldr	r3, [r4, #8]
 80107a6:	2a01      	cmp	r2, #1
 80107a8:	d023      	beq.n	80107f2 <ucdr_deserialize_int64_t+0x106>
 80107aa:	79db      	ldrb	r3, [r3, #7]
 80107ac:	702b      	strb	r3, [r5, #0]
 80107ae:	68a3      	ldr	r3, [r4, #8]
 80107b0:	799b      	ldrb	r3, [r3, #6]
 80107b2:	706b      	strb	r3, [r5, #1]
 80107b4:	68a3      	ldr	r3, [r4, #8]
 80107b6:	795b      	ldrb	r3, [r3, #5]
 80107b8:	70ab      	strb	r3, [r5, #2]
 80107ba:	68a3      	ldr	r3, [r4, #8]
 80107bc:	791b      	ldrb	r3, [r3, #4]
 80107be:	70eb      	strb	r3, [r5, #3]
 80107c0:	68a3      	ldr	r3, [r4, #8]
 80107c2:	78db      	ldrb	r3, [r3, #3]
 80107c4:	712b      	strb	r3, [r5, #4]
 80107c6:	68a3      	ldr	r3, [r4, #8]
 80107c8:	789b      	ldrb	r3, [r3, #2]
 80107ca:	716b      	strb	r3, [r5, #5]
 80107cc:	68a3      	ldr	r3, [r4, #8]
 80107ce:	785b      	ldrb	r3, [r3, #1]
 80107d0:	71ab      	strb	r3, [r5, #6]
 80107d2:	68a3      	ldr	r3, [r4, #8]
 80107d4:	781b      	ldrb	r3, [r3, #0]
 80107d6:	71eb      	strb	r3, [r5, #7]
 80107d8:	68a2      	ldr	r2, [r4, #8]
 80107da:	6923      	ldr	r3, [r4, #16]
 80107dc:	3208      	adds	r2, #8
 80107de:	3308      	adds	r3, #8
 80107e0:	2108      	movs	r1, #8
 80107e2:	60a2      	str	r2, [r4, #8]
 80107e4:	6123      	str	r3, [r4, #16]
 80107e6:	7561      	strb	r1, [r4, #21]
 80107e8:	7da0      	ldrb	r0, [r4, #22]
 80107ea:	f080 0001 	eor.w	r0, r0, #1
 80107ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80107f2:	681a      	ldr	r2, [r3, #0]
 80107f4:	685b      	ldr	r3, [r3, #4]
 80107f6:	606b      	str	r3, [r5, #4]
 80107f8:	602a      	str	r2, [r5, #0]
 80107fa:	e7ed      	b.n	80107d8 <ucdr_deserialize_int64_t+0xec>
 80107fc:	68a2      	ldr	r2, [r4, #8]
 80107fe:	6923      	ldr	r3, [r4, #16]
 8010800:	7da0      	ldrb	r0, [r4, #22]
 8010802:	f884 8015 	strb.w	r8, [r4, #21]
 8010806:	1b92      	subs	r2, r2, r6
 8010808:	1b9b      	subs	r3, r3, r6
 801080a:	60a2      	str	r2, [r4, #8]
 801080c:	6123      	str	r3, [r4, #16]
 801080e:	f080 0001 	eor.w	r0, r0, #1
 8010812:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010816:	68a3      	ldr	r3, [r4, #8]
 8010818:	795b      	ldrb	r3, [r3, #5]
 801081a:	70ab      	strb	r3, [r5, #2]
 801081c:	3503      	adds	r5, #3
 801081e:	68a3      	ldr	r3, [r4, #8]
 8010820:	791b      	ldrb	r3, [r3, #4]
 8010822:	f805 3b01 	strb.w	r3, [r5], #1
 8010826:	68a3      	ldr	r3, [r4, #8]
 8010828:	78db      	ldrb	r3, [r3, #3]
 801082a:	f805 3b01 	strb.w	r3, [r5], #1
 801082e:	68a3      	ldr	r3, [r4, #8]
 8010830:	789b      	ldrb	r3, [r3, #2]
 8010832:	f805 3b01 	strb.w	r3, [r5], #1
 8010836:	68a3      	ldr	r3, [r4, #8]
 8010838:	785b      	ldrb	r3, [r3, #1]
 801083a:	f805 3b01 	strb.w	r3, [r5], #1
 801083e:	68a7      	ldr	r7, [r4, #8]
 8010840:	e79a      	b.n	8010778 <ucdr_deserialize_int64_t+0x8c>
 8010842:	4639      	mov	r1, r7
 8010844:	4632      	mov	r2, r6
 8010846:	4628      	mov	r0, r5
 8010848:	f00c fe87 	bl	801d55a <memcpy>
 801084c:	68a1      	ldr	r1, [r4, #8]
 801084e:	464a      	mov	r2, r9
 8010850:	19a8      	adds	r0, r5, r6
 8010852:	f00c fe82 	bl	801d55a <memcpy>
 8010856:	e791      	b.n	801077c <ucdr_deserialize_int64_t+0x90>
 8010858:	3506      	adds	r5, #6
 801085a:	e7ec      	b.n	8010836 <ucdr_deserialize_int64_t+0x14a>
 801085c:	3505      	adds	r5, #5
 801085e:	e7e6      	b.n	801082e <ucdr_deserialize_int64_t+0x142>
 8010860:	3504      	adds	r5, #4
 8010862:	e7e0      	b.n	8010826 <ucdr_deserialize_int64_t+0x13a>
 8010864:	3503      	adds	r5, #3
 8010866:	e7da      	b.n	801081e <ucdr_deserialize_int64_t+0x132>

08010868 <ucdr_serialize_endian_float>:
 8010868:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801086c:	460d      	mov	r5, r1
 801086e:	b083      	sub	sp, #12
 8010870:	2104      	movs	r1, #4
 8010872:	4604      	mov	r4, r0
 8010874:	ed8d 0a01 	vstr	s0, [sp, #4]
 8010878:	f000 fc8a 	bl	8011190 <ucdr_buffer_alignment>
 801087c:	4601      	mov	r1, r0
 801087e:	4620      	mov	r0, r4
 8010880:	f894 8015 	ldrb.w	r8, [r4, #21]
 8010884:	f000 fcc8 	bl	8011218 <ucdr_advance_buffer>
 8010888:	2104      	movs	r1, #4
 801088a:	4620      	mov	r0, r4
 801088c:	f000 fc20 	bl	80110d0 <ucdr_check_buffer_available_for>
 8010890:	2800      	cmp	r0, #0
 8010892:	d137      	bne.n	8010904 <ucdr_serialize_endian_float+0x9c>
 8010894:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8010898:	42b7      	cmp	r7, r6
 801089a:	d92e      	bls.n	80108fa <ucdr_serialize_endian_float+0x92>
 801089c:	6923      	ldr	r3, [r4, #16]
 801089e:	60a7      	str	r7, [r4, #8]
 80108a0:	1bbf      	subs	r7, r7, r6
 80108a2:	443b      	add	r3, r7
 80108a4:	f1c7 0904 	rsb	r9, r7, #4
 80108a8:	6123      	str	r3, [r4, #16]
 80108aa:	4649      	mov	r1, r9
 80108ac:	4620      	mov	r0, r4
 80108ae:	f000 fc1b 	bl	80110e8 <ucdr_check_final_buffer_behavior>
 80108b2:	2800      	cmp	r0, #0
 80108b4:	d049      	beq.n	801094a <ucdr_serialize_endian_float+0xe2>
 80108b6:	2d01      	cmp	r5, #1
 80108b8:	d05b      	beq.n	8010972 <ucdr_serialize_endian_float+0x10a>
 80108ba:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80108be:	7033      	strb	r3, [r6, #0]
 80108c0:	2f01      	cmp	r7, #1
 80108c2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80108c6:	7073      	strb	r3, [r6, #1]
 80108c8:	d04d      	beq.n	8010966 <ucdr_serialize_endian_float+0xfe>
 80108ca:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80108ce:	70b3      	strb	r3, [r6, #2]
 80108d0:	2f02      	cmp	r7, #2
 80108d2:	d04c      	beq.n	801096e <ucdr_serialize_endian_float+0x106>
 80108d4:	3603      	adds	r6, #3
 80108d6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80108da:	7033      	strb	r3, [r6, #0]
 80108dc:	6923      	ldr	r3, [r4, #16]
 80108de:	68a2      	ldr	r2, [r4, #8]
 80108e0:	7da0      	ldrb	r0, [r4, #22]
 80108e2:	3304      	adds	r3, #4
 80108e4:	444a      	add	r2, r9
 80108e6:	1bdb      	subs	r3, r3, r7
 80108e8:	2104      	movs	r1, #4
 80108ea:	f080 0001 	eor.w	r0, r0, #1
 80108ee:	60a2      	str	r2, [r4, #8]
 80108f0:	6123      	str	r3, [r4, #16]
 80108f2:	7561      	strb	r1, [r4, #21]
 80108f4:	b003      	add	sp, #12
 80108f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80108fa:	2104      	movs	r1, #4
 80108fc:	4620      	mov	r0, r4
 80108fe:	f000 fbf3 	bl	80110e8 <ucdr_check_final_buffer_behavior>
 8010902:	b1c8      	cbz	r0, 8010938 <ucdr_serialize_endian_float+0xd0>
 8010904:	2d01      	cmp	r5, #1
 8010906:	68a3      	ldr	r3, [r4, #8]
 8010908:	d01c      	beq.n	8010944 <ucdr_serialize_endian_float+0xdc>
 801090a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801090e:	701a      	strb	r2, [r3, #0]
 8010910:	68a3      	ldr	r3, [r4, #8]
 8010912:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010916:	705a      	strb	r2, [r3, #1]
 8010918:	68a3      	ldr	r3, [r4, #8]
 801091a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801091e:	709a      	strb	r2, [r3, #2]
 8010920:	68a3      	ldr	r3, [r4, #8]
 8010922:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8010926:	70da      	strb	r2, [r3, #3]
 8010928:	68a2      	ldr	r2, [r4, #8]
 801092a:	6923      	ldr	r3, [r4, #16]
 801092c:	3204      	adds	r2, #4
 801092e:	3304      	adds	r3, #4
 8010930:	2104      	movs	r1, #4
 8010932:	60a2      	str	r2, [r4, #8]
 8010934:	6123      	str	r3, [r4, #16]
 8010936:	7561      	strb	r1, [r4, #21]
 8010938:	7da0      	ldrb	r0, [r4, #22]
 801093a:	f080 0001 	eor.w	r0, r0, #1
 801093e:	b003      	add	sp, #12
 8010940:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010944:	9a01      	ldr	r2, [sp, #4]
 8010946:	601a      	str	r2, [r3, #0]
 8010948:	e7ee      	b.n	8010928 <ucdr_serialize_endian_float+0xc0>
 801094a:	68a2      	ldr	r2, [r4, #8]
 801094c:	6923      	ldr	r3, [r4, #16]
 801094e:	7da0      	ldrb	r0, [r4, #22]
 8010950:	f884 8015 	strb.w	r8, [r4, #21]
 8010954:	1bd2      	subs	r2, r2, r7
 8010956:	1bdb      	subs	r3, r3, r7
 8010958:	f080 0001 	eor.w	r0, r0, #1
 801095c:	60a2      	str	r2, [r4, #8]
 801095e:	6123      	str	r3, [r4, #16]
 8010960:	b003      	add	sp, #12
 8010962:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010966:	68a3      	ldr	r3, [r4, #8]
 8010968:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801096c:	701a      	strb	r2, [r3, #0]
 801096e:	68a6      	ldr	r6, [r4, #8]
 8010970:	e7b1      	b.n	80108d6 <ucdr_serialize_endian_float+0x6e>
 8010972:	ad01      	add	r5, sp, #4
 8010974:	463a      	mov	r2, r7
 8010976:	4629      	mov	r1, r5
 8010978:	4630      	mov	r0, r6
 801097a:	f00c fdee 	bl	801d55a <memcpy>
 801097e:	68a0      	ldr	r0, [r4, #8]
 8010980:	464a      	mov	r2, r9
 8010982:	19e9      	adds	r1, r5, r7
 8010984:	f00c fde9 	bl	801d55a <memcpy>
 8010988:	e7a8      	b.n	80108dc <ucdr_serialize_endian_float+0x74>
 801098a:	bf00      	nop

0801098c <ucdr_deserialize_endian_float>:
 801098c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010990:	460e      	mov	r6, r1
 8010992:	2104      	movs	r1, #4
 8010994:	4604      	mov	r4, r0
 8010996:	4615      	mov	r5, r2
 8010998:	f000 fbfa 	bl	8011190 <ucdr_buffer_alignment>
 801099c:	4601      	mov	r1, r0
 801099e:	4620      	mov	r0, r4
 80109a0:	f894 9015 	ldrb.w	r9, [r4, #21]
 80109a4:	f000 fc38 	bl	8011218 <ucdr_advance_buffer>
 80109a8:	2104      	movs	r1, #4
 80109aa:	4620      	mov	r0, r4
 80109ac:	f000 fb90 	bl	80110d0 <ucdr_check_buffer_available_for>
 80109b0:	2800      	cmp	r0, #0
 80109b2:	d137      	bne.n	8010a24 <ucdr_deserialize_endian_float+0x98>
 80109b4:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 80109b8:	42bb      	cmp	r3, r7
 80109ba:	d92e      	bls.n	8010a1a <ucdr_deserialize_endian_float+0x8e>
 80109bc:	eba3 0807 	sub.w	r8, r3, r7
 80109c0:	60a3      	str	r3, [r4, #8]
 80109c2:	6923      	ldr	r3, [r4, #16]
 80109c4:	f1c8 0a04 	rsb	sl, r8, #4
 80109c8:	4443      	add	r3, r8
 80109ca:	6123      	str	r3, [r4, #16]
 80109cc:	4651      	mov	r1, sl
 80109ce:	4620      	mov	r0, r4
 80109d0:	f000 fb8a 	bl	80110e8 <ucdr_check_final_buffer_behavior>
 80109d4:	2800      	cmp	r0, #0
 80109d6:	d043      	beq.n	8010a60 <ucdr_deserialize_endian_float+0xd4>
 80109d8:	2e01      	cmp	r6, #1
 80109da:	d056      	beq.n	8010a8a <ucdr_deserialize_endian_float+0xfe>
 80109dc:	78fb      	ldrb	r3, [r7, #3]
 80109de:	702b      	strb	r3, [r5, #0]
 80109e0:	78bb      	ldrb	r3, [r7, #2]
 80109e2:	706b      	strb	r3, [r5, #1]
 80109e4:	f1b8 0f01 	cmp.w	r8, #1
 80109e8:	d049      	beq.n	8010a7e <ucdr_deserialize_endian_float+0xf2>
 80109ea:	787b      	ldrb	r3, [r7, #1]
 80109ec:	70ab      	strb	r3, [r5, #2]
 80109ee:	f1b8 0f02 	cmp.w	r8, #2
 80109f2:	f105 0503 	add.w	r5, r5, #3
 80109f6:	d046      	beq.n	8010a86 <ucdr_deserialize_endian_float+0xfa>
 80109f8:	783b      	ldrb	r3, [r7, #0]
 80109fa:	702b      	strb	r3, [r5, #0]
 80109fc:	6923      	ldr	r3, [r4, #16]
 80109fe:	68a2      	ldr	r2, [r4, #8]
 8010a00:	7da0      	ldrb	r0, [r4, #22]
 8010a02:	2104      	movs	r1, #4
 8010a04:	3304      	adds	r3, #4
 8010a06:	4452      	add	r2, sl
 8010a08:	eba3 0308 	sub.w	r3, r3, r8
 8010a0c:	7561      	strb	r1, [r4, #21]
 8010a0e:	60a2      	str	r2, [r4, #8]
 8010a10:	6123      	str	r3, [r4, #16]
 8010a12:	f080 0001 	eor.w	r0, r0, #1
 8010a16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010a1a:	2104      	movs	r1, #4
 8010a1c:	4620      	mov	r0, r4
 8010a1e:	f000 fb63 	bl	80110e8 <ucdr_check_final_buffer_behavior>
 8010a22:	b1a8      	cbz	r0, 8010a50 <ucdr_deserialize_endian_float+0xc4>
 8010a24:	2e01      	cmp	r6, #1
 8010a26:	68a3      	ldr	r3, [r4, #8]
 8010a28:	d017      	beq.n	8010a5a <ucdr_deserialize_endian_float+0xce>
 8010a2a:	78db      	ldrb	r3, [r3, #3]
 8010a2c:	702b      	strb	r3, [r5, #0]
 8010a2e:	68a3      	ldr	r3, [r4, #8]
 8010a30:	789b      	ldrb	r3, [r3, #2]
 8010a32:	706b      	strb	r3, [r5, #1]
 8010a34:	68a3      	ldr	r3, [r4, #8]
 8010a36:	785b      	ldrb	r3, [r3, #1]
 8010a38:	70ab      	strb	r3, [r5, #2]
 8010a3a:	68a3      	ldr	r3, [r4, #8]
 8010a3c:	781b      	ldrb	r3, [r3, #0]
 8010a3e:	70eb      	strb	r3, [r5, #3]
 8010a40:	68a2      	ldr	r2, [r4, #8]
 8010a42:	6923      	ldr	r3, [r4, #16]
 8010a44:	3204      	adds	r2, #4
 8010a46:	3304      	adds	r3, #4
 8010a48:	2104      	movs	r1, #4
 8010a4a:	60a2      	str	r2, [r4, #8]
 8010a4c:	6123      	str	r3, [r4, #16]
 8010a4e:	7561      	strb	r1, [r4, #21]
 8010a50:	7da0      	ldrb	r0, [r4, #22]
 8010a52:	f080 0001 	eor.w	r0, r0, #1
 8010a56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010a5a:	681b      	ldr	r3, [r3, #0]
 8010a5c:	602b      	str	r3, [r5, #0]
 8010a5e:	e7ef      	b.n	8010a40 <ucdr_deserialize_endian_float+0xb4>
 8010a60:	68a2      	ldr	r2, [r4, #8]
 8010a62:	6923      	ldr	r3, [r4, #16]
 8010a64:	7da0      	ldrb	r0, [r4, #22]
 8010a66:	f884 9015 	strb.w	r9, [r4, #21]
 8010a6a:	eba2 0208 	sub.w	r2, r2, r8
 8010a6e:	eba3 0308 	sub.w	r3, r3, r8
 8010a72:	60a2      	str	r2, [r4, #8]
 8010a74:	6123      	str	r3, [r4, #16]
 8010a76:	f080 0001 	eor.w	r0, r0, #1
 8010a7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010a7e:	68a3      	ldr	r3, [r4, #8]
 8010a80:	785b      	ldrb	r3, [r3, #1]
 8010a82:	70ab      	strb	r3, [r5, #2]
 8010a84:	3503      	adds	r5, #3
 8010a86:	68a7      	ldr	r7, [r4, #8]
 8010a88:	e7b6      	b.n	80109f8 <ucdr_deserialize_endian_float+0x6c>
 8010a8a:	4639      	mov	r1, r7
 8010a8c:	4642      	mov	r2, r8
 8010a8e:	4628      	mov	r0, r5
 8010a90:	f00c fd63 	bl	801d55a <memcpy>
 8010a94:	68a1      	ldr	r1, [r4, #8]
 8010a96:	4652      	mov	r2, sl
 8010a98:	eb05 0008 	add.w	r0, r5, r8
 8010a9c:	f00c fd5d 	bl	801d55a <memcpy>
 8010aa0:	e7ac      	b.n	80109fc <ucdr_deserialize_endian_float+0x70>
 8010aa2:	bf00      	nop

08010aa4 <ucdr_serialize_double>:
 8010aa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010aa8:	2108      	movs	r1, #8
 8010aaa:	b082      	sub	sp, #8
 8010aac:	4604      	mov	r4, r0
 8010aae:	ed8d 0b00 	vstr	d0, [sp]
 8010ab2:	f000 fb6d 	bl	8011190 <ucdr_buffer_alignment>
 8010ab6:	4601      	mov	r1, r0
 8010ab8:	4620      	mov	r0, r4
 8010aba:	7d67      	ldrb	r7, [r4, #21]
 8010abc:	f000 fbac 	bl	8011218 <ucdr_advance_buffer>
 8010ac0:	2108      	movs	r1, #8
 8010ac2:	4620      	mov	r0, r4
 8010ac4:	f000 fb04 	bl	80110d0 <ucdr_check_buffer_available_for>
 8010ac8:	2800      	cmp	r0, #0
 8010aca:	d14d      	bne.n	8010b68 <ucdr_serialize_double+0xc4>
 8010acc:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8010ad0:	42ab      	cmp	r3, r5
 8010ad2:	d944      	bls.n	8010b5e <ucdr_serialize_double+0xba>
 8010ad4:	1b5e      	subs	r6, r3, r5
 8010ad6:	60a3      	str	r3, [r4, #8]
 8010ad8:	6923      	ldr	r3, [r4, #16]
 8010ada:	f1c6 0808 	rsb	r8, r6, #8
 8010ade:	4433      	add	r3, r6
 8010ae0:	6123      	str	r3, [r4, #16]
 8010ae2:	4641      	mov	r1, r8
 8010ae4:	4620      	mov	r0, r4
 8010ae6:	f000 faff 	bl	80110e8 <ucdr_check_final_buffer_behavior>
 8010aea:	2800      	cmp	r0, #0
 8010aec:	d072      	beq.n	8010bd4 <ucdr_serialize_double+0x130>
 8010aee:	7d23      	ldrb	r3, [r4, #20]
 8010af0:	2b01      	cmp	r3, #1
 8010af2:	f000 8092 	beq.w	8010c1a <ucdr_serialize_double+0x176>
 8010af6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010afa:	702b      	strb	r3, [r5, #0]
 8010afc:	2e01      	cmp	r6, #1
 8010afe:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8010b02:	706b      	strb	r3, [r5, #1]
 8010b04:	d073      	beq.n	8010bee <ucdr_serialize_double+0x14a>
 8010b06:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8010b0a:	70ab      	strb	r3, [r5, #2]
 8010b0c:	2e02      	cmp	r6, #2
 8010b0e:	d072      	beq.n	8010bf6 <ucdr_serialize_double+0x152>
 8010b10:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8010b14:	70eb      	strb	r3, [r5, #3]
 8010b16:	2e03      	cmp	r6, #3
 8010b18:	d071      	beq.n	8010bfe <ucdr_serialize_double+0x15a>
 8010b1a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8010b1e:	712b      	strb	r3, [r5, #4]
 8010b20:	2e04      	cmp	r6, #4
 8010b22:	d070      	beq.n	8010c06 <ucdr_serialize_double+0x162>
 8010b24:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8010b28:	716b      	strb	r3, [r5, #5]
 8010b2a:	2e05      	cmp	r6, #5
 8010b2c:	d06f      	beq.n	8010c0e <ucdr_serialize_double+0x16a>
 8010b2e:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8010b32:	71ab      	strb	r3, [r5, #6]
 8010b34:	2e06      	cmp	r6, #6
 8010b36:	d06e      	beq.n	8010c16 <ucdr_serialize_double+0x172>
 8010b38:	3507      	adds	r5, #7
 8010b3a:	f89d 3000 	ldrb.w	r3, [sp]
 8010b3e:	702b      	strb	r3, [r5, #0]
 8010b40:	6923      	ldr	r3, [r4, #16]
 8010b42:	68a2      	ldr	r2, [r4, #8]
 8010b44:	7da0      	ldrb	r0, [r4, #22]
 8010b46:	3308      	adds	r3, #8
 8010b48:	4442      	add	r2, r8
 8010b4a:	1b9b      	subs	r3, r3, r6
 8010b4c:	2108      	movs	r1, #8
 8010b4e:	f080 0001 	eor.w	r0, r0, #1
 8010b52:	60a2      	str	r2, [r4, #8]
 8010b54:	6123      	str	r3, [r4, #16]
 8010b56:	7561      	strb	r1, [r4, #21]
 8010b58:	b002      	add	sp, #8
 8010b5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b5e:	2108      	movs	r1, #8
 8010b60:	4620      	mov	r0, r4
 8010b62:	f000 fac1 	bl	80110e8 <ucdr_check_final_buffer_behavior>
 8010b66:	b350      	cbz	r0, 8010bbe <ucdr_serialize_double+0x11a>
 8010b68:	7d22      	ldrb	r2, [r4, #20]
 8010b6a:	68a3      	ldr	r3, [r4, #8]
 8010b6c:	2a01      	cmp	r2, #1
 8010b6e:	d02c      	beq.n	8010bca <ucdr_serialize_double+0x126>
 8010b70:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8010b74:	701a      	strb	r2, [r3, #0]
 8010b76:	68a3      	ldr	r3, [r4, #8]
 8010b78:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010b7c:	705a      	strb	r2, [r3, #1]
 8010b7e:	68a3      	ldr	r3, [r4, #8]
 8010b80:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8010b84:	709a      	strb	r2, [r3, #2]
 8010b86:	68a3      	ldr	r3, [r4, #8]
 8010b88:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8010b8c:	70da      	strb	r2, [r3, #3]
 8010b8e:	68a3      	ldr	r3, [r4, #8]
 8010b90:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8010b94:	711a      	strb	r2, [r3, #4]
 8010b96:	68a3      	ldr	r3, [r4, #8]
 8010b98:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8010b9c:	715a      	strb	r2, [r3, #5]
 8010b9e:	68a3      	ldr	r3, [r4, #8]
 8010ba0:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8010ba4:	719a      	strb	r2, [r3, #6]
 8010ba6:	68a3      	ldr	r3, [r4, #8]
 8010ba8:	f89d 2000 	ldrb.w	r2, [sp]
 8010bac:	71da      	strb	r2, [r3, #7]
 8010bae:	68a2      	ldr	r2, [r4, #8]
 8010bb0:	6923      	ldr	r3, [r4, #16]
 8010bb2:	3208      	adds	r2, #8
 8010bb4:	3308      	adds	r3, #8
 8010bb6:	2108      	movs	r1, #8
 8010bb8:	60a2      	str	r2, [r4, #8]
 8010bba:	6123      	str	r3, [r4, #16]
 8010bbc:	7561      	strb	r1, [r4, #21]
 8010bbe:	7da0      	ldrb	r0, [r4, #22]
 8010bc0:	f080 0001 	eor.w	r0, r0, #1
 8010bc4:	b002      	add	sp, #8
 8010bc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010bca:	e9dd 1200 	ldrd	r1, r2, [sp]
 8010bce:	6019      	str	r1, [r3, #0]
 8010bd0:	605a      	str	r2, [r3, #4]
 8010bd2:	e7ec      	b.n	8010bae <ucdr_serialize_double+0x10a>
 8010bd4:	68a2      	ldr	r2, [r4, #8]
 8010bd6:	6923      	ldr	r3, [r4, #16]
 8010bd8:	7da0      	ldrb	r0, [r4, #22]
 8010bda:	7567      	strb	r7, [r4, #21]
 8010bdc:	1b92      	subs	r2, r2, r6
 8010bde:	1b9b      	subs	r3, r3, r6
 8010be0:	f080 0001 	eor.w	r0, r0, #1
 8010be4:	60a2      	str	r2, [r4, #8]
 8010be6:	6123      	str	r3, [r4, #16]
 8010be8:	b002      	add	sp, #8
 8010bea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010bee:	68a3      	ldr	r3, [r4, #8]
 8010bf0:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8010bf4:	701a      	strb	r2, [r3, #0]
 8010bf6:	68a3      	ldr	r3, [r4, #8]
 8010bf8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8010bfc:	701a      	strb	r2, [r3, #0]
 8010bfe:	68a3      	ldr	r3, [r4, #8]
 8010c00:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8010c04:	701a      	strb	r2, [r3, #0]
 8010c06:	68a3      	ldr	r3, [r4, #8]
 8010c08:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8010c0c:	701a      	strb	r2, [r3, #0]
 8010c0e:	68a3      	ldr	r3, [r4, #8]
 8010c10:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8010c14:	701a      	strb	r2, [r3, #0]
 8010c16:	68a5      	ldr	r5, [r4, #8]
 8010c18:	e78f      	b.n	8010b3a <ucdr_serialize_double+0x96>
 8010c1a:	4628      	mov	r0, r5
 8010c1c:	466d      	mov	r5, sp
 8010c1e:	4632      	mov	r2, r6
 8010c20:	4629      	mov	r1, r5
 8010c22:	f00c fc9a 	bl	801d55a <memcpy>
 8010c26:	68a0      	ldr	r0, [r4, #8]
 8010c28:	4642      	mov	r2, r8
 8010c2a:	19a9      	adds	r1, r5, r6
 8010c2c:	f00c fc95 	bl	801d55a <memcpy>
 8010c30:	e786      	b.n	8010b40 <ucdr_serialize_double+0x9c>
 8010c32:	bf00      	nop

08010c34 <ucdr_serialize_endian_double>:
 8010c34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010c38:	460e      	mov	r6, r1
 8010c3a:	b083      	sub	sp, #12
 8010c3c:	2108      	movs	r1, #8
 8010c3e:	4604      	mov	r4, r0
 8010c40:	ed8d 0b00 	vstr	d0, [sp]
 8010c44:	f000 faa4 	bl	8011190 <ucdr_buffer_alignment>
 8010c48:	4601      	mov	r1, r0
 8010c4a:	4620      	mov	r0, r4
 8010c4c:	f894 8015 	ldrb.w	r8, [r4, #21]
 8010c50:	f000 fae2 	bl	8011218 <ucdr_advance_buffer>
 8010c54:	2108      	movs	r1, #8
 8010c56:	4620      	mov	r0, r4
 8010c58:	f000 fa3a 	bl	80110d0 <ucdr_check_buffer_available_for>
 8010c5c:	2800      	cmp	r0, #0
 8010c5e:	d14c      	bne.n	8010cfa <ucdr_serialize_endian_double+0xc6>
 8010c60:	e9d4 5701 	ldrd	r5, r7, [r4, #4]
 8010c64:	42bd      	cmp	r5, r7
 8010c66:	d943      	bls.n	8010cf0 <ucdr_serialize_endian_double+0xbc>
 8010c68:	6923      	ldr	r3, [r4, #16]
 8010c6a:	60a5      	str	r5, [r4, #8]
 8010c6c:	1bed      	subs	r5, r5, r7
 8010c6e:	442b      	add	r3, r5
 8010c70:	f1c5 0908 	rsb	r9, r5, #8
 8010c74:	6123      	str	r3, [r4, #16]
 8010c76:	4649      	mov	r1, r9
 8010c78:	4620      	mov	r0, r4
 8010c7a:	f000 fa35 	bl	80110e8 <ucdr_check_final_buffer_behavior>
 8010c7e:	2800      	cmp	r0, #0
 8010c80:	d070      	beq.n	8010d64 <ucdr_serialize_endian_double+0x130>
 8010c82:	2e01      	cmp	r6, #1
 8010c84:	f000 8092 	beq.w	8010dac <ucdr_serialize_endian_double+0x178>
 8010c88:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010c8c:	703b      	strb	r3, [r7, #0]
 8010c8e:	2d01      	cmp	r5, #1
 8010c90:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8010c94:	707b      	strb	r3, [r7, #1]
 8010c96:	d073      	beq.n	8010d80 <ucdr_serialize_endian_double+0x14c>
 8010c98:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8010c9c:	70bb      	strb	r3, [r7, #2]
 8010c9e:	2d02      	cmp	r5, #2
 8010ca0:	d072      	beq.n	8010d88 <ucdr_serialize_endian_double+0x154>
 8010ca2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8010ca6:	70fb      	strb	r3, [r7, #3]
 8010ca8:	2d03      	cmp	r5, #3
 8010caa:	d071      	beq.n	8010d90 <ucdr_serialize_endian_double+0x15c>
 8010cac:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8010cb0:	713b      	strb	r3, [r7, #4]
 8010cb2:	2d04      	cmp	r5, #4
 8010cb4:	d070      	beq.n	8010d98 <ucdr_serialize_endian_double+0x164>
 8010cb6:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8010cba:	717b      	strb	r3, [r7, #5]
 8010cbc:	2d05      	cmp	r5, #5
 8010cbe:	d06f      	beq.n	8010da0 <ucdr_serialize_endian_double+0x16c>
 8010cc0:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8010cc4:	71bb      	strb	r3, [r7, #6]
 8010cc6:	2d06      	cmp	r5, #6
 8010cc8:	d06e      	beq.n	8010da8 <ucdr_serialize_endian_double+0x174>
 8010cca:	3707      	adds	r7, #7
 8010ccc:	f89d 3000 	ldrb.w	r3, [sp]
 8010cd0:	703b      	strb	r3, [r7, #0]
 8010cd2:	6923      	ldr	r3, [r4, #16]
 8010cd4:	68a2      	ldr	r2, [r4, #8]
 8010cd6:	7da0      	ldrb	r0, [r4, #22]
 8010cd8:	3308      	adds	r3, #8
 8010cda:	444a      	add	r2, r9
 8010cdc:	1b5b      	subs	r3, r3, r5
 8010cde:	2108      	movs	r1, #8
 8010ce0:	f080 0001 	eor.w	r0, r0, #1
 8010ce4:	60a2      	str	r2, [r4, #8]
 8010ce6:	6123      	str	r3, [r4, #16]
 8010ce8:	7561      	strb	r1, [r4, #21]
 8010cea:	b003      	add	sp, #12
 8010cec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010cf0:	2108      	movs	r1, #8
 8010cf2:	4620      	mov	r0, r4
 8010cf4:	f000 f9f8 	bl	80110e8 <ucdr_check_final_buffer_behavior>
 8010cf8:	b348      	cbz	r0, 8010d4e <ucdr_serialize_endian_double+0x11a>
 8010cfa:	2e01      	cmp	r6, #1
 8010cfc:	68a3      	ldr	r3, [r4, #8]
 8010cfe:	d02c      	beq.n	8010d5a <ucdr_serialize_endian_double+0x126>
 8010d00:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8010d04:	701a      	strb	r2, [r3, #0]
 8010d06:	68a3      	ldr	r3, [r4, #8]
 8010d08:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010d0c:	705a      	strb	r2, [r3, #1]
 8010d0e:	68a3      	ldr	r3, [r4, #8]
 8010d10:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8010d14:	709a      	strb	r2, [r3, #2]
 8010d16:	68a3      	ldr	r3, [r4, #8]
 8010d18:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8010d1c:	70da      	strb	r2, [r3, #3]
 8010d1e:	68a3      	ldr	r3, [r4, #8]
 8010d20:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8010d24:	711a      	strb	r2, [r3, #4]
 8010d26:	68a3      	ldr	r3, [r4, #8]
 8010d28:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8010d2c:	715a      	strb	r2, [r3, #5]
 8010d2e:	68a3      	ldr	r3, [r4, #8]
 8010d30:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8010d34:	719a      	strb	r2, [r3, #6]
 8010d36:	68a3      	ldr	r3, [r4, #8]
 8010d38:	f89d 2000 	ldrb.w	r2, [sp]
 8010d3c:	71da      	strb	r2, [r3, #7]
 8010d3e:	68a2      	ldr	r2, [r4, #8]
 8010d40:	6923      	ldr	r3, [r4, #16]
 8010d42:	3208      	adds	r2, #8
 8010d44:	3308      	adds	r3, #8
 8010d46:	2108      	movs	r1, #8
 8010d48:	60a2      	str	r2, [r4, #8]
 8010d4a:	6123      	str	r3, [r4, #16]
 8010d4c:	7561      	strb	r1, [r4, #21]
 8010d4e:	7da0      	ldrb	r0, [r4, #22]
 8010d50:	f080 0001 	eor.w	r0, r0, #1
 8010d54:	b003      	add	sp, #12
 8010d56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010d5a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8010d5e:	6019      	str	r1, [r3, #0]
 8010d60:	605a      	str	r2, [r3, #4]
 8010d62:	e7ec      	b.n	8010d3e <ucdr_serialize_endian_double+0x10a>
 8010d64:	68a2      	ldr	r2, [r4, #8]
 8010d66:	6923      	ldr	r3, [r4, #16]
 8010d68:	7da0      	ldrb	r0, [r4, #22]
 8010d6a:	f884 8015 	strb.w	r8, [r4, #21]
 8010d6e:	1b52      	subs	r2, r2, r5
 8010d70:	1b5b      	subs	r3, r3, r5
 8010d72:	f080 0001 	eor.w	r0, r0, #1
 8010d76:	60a2      	str	r2, [r4, #8]
 8010d78:	6123      	str	r3, [r4, #16]
 8010d7a:	b003      	add	sp, #12
 8010d7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010d80:	68a3      	ldr	r3, [r4, #8]
 8010d82:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8010d86:	701a      	strb	r2, [r3, #0]
 8010d88:	68a3      	ldr	r3, [r4, #8]
 8010d8a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8010d8e:	701a      	strb	r2, [r3, #0]
 8010d90:	68a3      	ldr	r3, [r4, #8]
 8010d92:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8010d96:	701a      	strb	r2, [r3, #0]
 8010d98:	68a3      	ldr	r3, [r4, #8]
 8010d9a:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8010d9e:	701a      	strb	r2, [r3, #0]
 8010da0:	68a3      	ldr	r3, [r4, #8]
 8010da2:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8010da6:	701a      	strb	r2, [r3, #0]
 8010da8:	68a7      	ldr	r7, [r4, #8]
 8010daa:	e78f      	b.n	8010ccc <ucdr_serialize_endian_double+0x98>
 8010dac:	466e      	mov	r6, sp
 8010dae:	462a      	mov	r2, r5
 8010db0:	4631      	mov	r1, r6
 8010db2:	4638      	mov	r0, r7
 8010db4:	f00c fbd1 	bl	801d55a <memcpy>
 8010db8:	68a0      	ldr	r0, [r4, #8]
 8010dba:	464a      	mov	r2, r9
 8010dbc:	1971      	adds	r1, r6, r5
 8010dbe:	f00c fbcc 	bl	801d55a <memcpy>
 8010dc2:	e786      	b.n	8010cd2 <ucdr_serialize_endian_double+0x9e>

08010dc4 <ucdr_deserialize_double>:
 8010dc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010dc8:	460d      	mov	r5, r1
 8010dca:	2108      	movs	r1, #8
 8010dcc:	4604      	mov	r4, r0
 8010dce:	f000 f9df 	bl	8011190 <ucdr_buffer_alignment>
 8010dd2:	4601      	mov	r1, r0
 8010dd4:	4620      	mov	r0, r4
 8010dd6:	f894 8015 	ldrb.w	r8, [r4, #21]
 8010dda:	f000 fa1d 	bl	8011218 <ucdr_advance_buffer>
 8010dde:	2108      	movs	r1, #8
 8010de0:	4620      	mov	r0, r4
 8010de2:	f000 f975 	bl	80110d0 <ucdr_check_buffer_available_for>
 8010de6:	2800      	cmp	r0, #0
 8010de8:	d147      	bne.n	8010e7a <ucdr_deserialize_double+0xb6>
 8010dea:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8010dee:	42be      	cmp	r6, r7
 8010df0:	d93e      	bls.n	8010e70 <ucdr_deserialize_double+0xac>
 8010df2:	6923      	ldr	r3, [r4, #16]
 8010df4:	60a6      	str	r6, [r4, #8]
 8010df6:	1bf6      	subs	r6, r6, r7
 8010df8:	4433      	add	r3, r6
 8010dfa:	f1c6 0908 	rsb	r9, r6, #8
 8010dfe:	6123      	str	r3, [r4, #16]
 8010e00:	4649      	mov	r1, r9
 8010e02:	4620      	mov	r0, r4
 8010e04:	f000 f970 	bl	80110e8 <ucdr_check_final_buffer_behavior>
 8010e08:	2800      	cmp	r0, #0
 8010e0a:	d063      	beq.n	8010ed4 <ucdr_deserialize_double+0x110>
 8010e0c:	7d23      	ldrb	r3, [r4, #20]
 8010e0e:	2b01      	cmp	r3, #1
 8010e10:	f000 8083 	beq.w	8010f1a <ucdr_deserialize_double+0x156>
 8010e14:	79fb      	ldrb	r3, [r7, #7]
 8010e16:	702b      	strb	r3, [r5, #0]
 8010e18:	79bb      	ldrb	r3, [r7, #6]
 8010e1a:	706b      	strb	r3, [r5, #1]
 8010e1c:	2e01      	cmp	r6, #1
 8010e1e:	d066      	beq.n	8010eee <ucdr_deserialize_double+0x12a>
 8010e20:	797b      	ldrb	r3, [r7, #5]
 8010e22:	70ab      	strb	r3, [r5, #2]
 8010e24:	2e02      	cmp	r6, #2
 8010e26:	f000 8089 	beq.w	8010f3c <ucdr_deserialize_double+0x178>
 8010e2a:	793b      	ldrb	r3, [r7, #4]
 8010e2c:	70eb      	strb	r3, [r5, #3]
 8010e2e:	2e03      	cmp	r6, #3
 8010e30:	f000 8082 	beq.w	8010f38 <ucdr_deserialize_double+0x174>
 8010e34:	78fb      	ldrb	r3, [r7, #3]
 8010e36:	712b      	strb	r3, [r5, #4]
 8010e38:	2e04      	cmp	r6, #4
 8010e3a:	d07b      	beq.n	8010f34 <ucdr_deserialize_double+0x170>
 8010e3c:	78bb      	ldrb	r3, [r7, #2]
 8010e3e:	716b      	strb	r3, [r5, #5]
 8010e40:	2e05      	cmp	r6, #5
 8010e42:	d075      	beq.n	8010f30 <ucdr_deserialize_double+0x16c>
 8010e44:	787b      	ldrb	r3, [r7, #1]
 8010e46:	71ab      	strb	r3, [r5, #6]
 8010e48:	2e06      	cmp	r6, #6
 8010e4a:	f105 0507 	add.w	r5, r5, #7
 8010e4e:	d062      	beq.n	8010f16 <ucdr_deserialize_double+0x152>
 8010e50:	783b      	ldrb	r3, [r7, #0]
 8010e52:	702b      	strb	r3, [r5, #0]
 8010e54:	6923      	ldr	r3, [r4, #16]
 8010e56:	68a2      	ldr	r2, [r4, #8]
 8010e58:	7da0      	ldrb	r0, [r4, #22]
 8010e5a:	2108      	movs	r1, #8
 8010e5c:	3308      	adds	r3, #8
 8010e5e:	444a      	add	r2, r9
 8010e60:	1b9b      	subs	r3, r3, r6
 8010e62:	7561      	strb	r1, [r4, #21]
 8010e64:	60a2      	str	r2, [r4, #8]
 8010e66:	6123      	str	r3, [r4, #16]
 8010e68:	f080 0001 	eor.w	r0, r0, #1
 8010e6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010e70:	2108      	movs	r1, #8
 8010e72:	4620      	mov	r0, r4
 8010e74:	f000 f938 	bl	80110e8 <ucdr_check_final_buffer_behavior>
 8010e78:	b310      	cbz	r0, 8010ec0 <ucdr_deserialize_double+0xfc>
 8010e7a:	7d22      	ldrb	r2, [r4, #20]
 8010e7c:	68a3      	ldr	r3, [r4, #8]
 8010e7e:	2a01      	cmp	r2, #1
 8010e80:	d023      	beq.n	8010eca <ucdr_deserialize_double+0x106>
 8010e82:	79db      	ldrb	r3, [r3, #7]
 8010e84:	702b      	strb	r3, [r5, #0]
 8010e86:	68a3      	ldr	r3, [r4, #8]
 8010e88:	799b      	ldrb	r3, [r3, #6]
 8010e8a:	706b      	strb	r3, [r5, #1]
 8010e8c:	68a3      	ldr	r3, [r4, #8]
 8010e8e:	795b      	ldrb	r3, [r3, #5]
 8010e90:	70ab      	strb	r3, [r5, #2]
 8010e92:	68a3      	ldr	r3, [r4, #8]
 8010e94:	791b      	ldrb	r3, [r3, #4]
 8010e96:	70eb      	strb	r3, [r5, #3]
 8010e98:	68a3      	ldr	r3, [r4, #8]
 8010e9a:	78db      	ldrb	r3, [r3, #3]
 8010e9c:	712b      	strb	r3, [r5, #4]
 8010e9e:	68a3      	ldr	r3, [r4, #8]
 8010ea0:	789b      	ldrb	r3, [r3, #2]
 8010ea2:	716b      	strb	r3, [r5, #5]
 8010ea4:	68a3      	ldr	r3, [r4, #8]
 8010ea6:	785b      	ldrb	r3, [r3, #1]
 8010ea8:	71ab      	strb	r3, [r5, #6]
 8010eaa:	68a3      	ldr	r3, [r4, #8]
 8010eac:	781b      	ldrb	r3, [r3, #0]
 8010eae:	71eb      	strb	r3, [r5, #7]
 8010eb0:	68a2      	ldr	r2, [r4, #8]
 8010eb2:	6923      	ldr	r3, [r4, #16]
 8010eb4:	3208      	adds	r2, #8
 8010eb6:	3308      	adds	r3, #8
 8010eb8:	2108      	movs	r1, #8
 8010eba:	60a2      	str	r2, [r4, #8]
 8010ebc:	6123      	str	r3, [r4, #16]
 8010ebe:	7561      	strb	r1, [r4, #21]
 8010ec0:	7da0      	ldrb	r0, [r4, #22]
 8010ec2:	f080 0001 	eor.w	r0, r0, #1
 8010ec6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010eca:	681a      	ldr	r2, [r3, #0]
 8010ecc:	685b      	ldr	r3, [r3, #4]
 8010ece:	606b      	str	r3, [r5, #4]
 8010ed0:	602a      	str	r2, [r5, #0]
 8010ed2:	e7ed      	b.n	8010eb0 <ucdr_deserialize_double+0xec>
 8010ed4:	68a2      	ldr	r2, [r4, #8]
 8010ed6:	6923      	ldr	r3, [r4, #16]
 8010ed8:	7da0      	ldrb	r0, [r4, #22]
 8010eda:	f884 8015 	strb.w	r8, [r4, #21]
 8010ede:	1b92      	subs	r2, r2, r6
 8010ee0:	1b9b      	subs	r3, r3, r6
 8010ee2:	60a2      	str	r2, [r4, #8]
 8010ee4:	6123      	str	r3, [r4, #16]
 8010ee6:	f080 0001 	eor.w	r0, r0, #1
 8010eea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010eee:	68a3      	ldr	r3, [r4, #8]
 8010ef0:	795b      	ldrb	r3, [r3, #5]
 8010ef2:	70ab      	strb	r3, [r5, #2]
 8010ef4:	3503      	adds	r5, #3
 8010ef6:	68a3      	ldr	r3, [r4, #8]
 8010ef8:	791b      	ldrb	r3, [r3, #4]
 8010efa:	f805 3b01 	strb.w	r3, [r5], #1
 8010efe:	68a3      	ldr	r3, [r4, #8]
 8010f00:	78db      	ldrb	r3, [r3, #3]
 8010f02:	f805 3b01 	strb.w	r3, [r5], #1
 8010f06:	68a3      	ldr	r3, [r4, #8]
 8010f08:	789b      	ldrb	r3, [r3, #2]
 8010f0a:	f805 3b01 	strb.w	r3, [r5], #1
 8010f0e:	68a3      	ldr	r3, [r4, #8]
 8010f10:	785b      	ldrb	r3, [r3, #1]
 8010f12:	f805 3b01 	strb.w	r3, [r5], #1
 8010f16:	68a7      	ldr	r7, [r4, #8]
 8010f18:	e79a      	b.n	8010e50 <ucdr_deserialize_double+0x8c>
 8010f1a:	4639      	mov	r1, r7
 8010f1c:	4632      	mov	r2, r6
 8010f1e:	4628      	mov	r0, r5
 8010f20:	f00c fb1b 	bl	801d55a <memcpy>
 8010f24:	68a1      	ldr	r1, [r4, #8]
 8010f26:	464a      	mov	r2, r9
 8010f28:	19a8      	adds	r0, r5, r6
 8010f2a:	f00c fb16 	bl	801d55a <memcpy>
 8010f2e:	e791      	b.n	8010e54 <ucdr_deserialize_double+0x90>
 8010f30:	3506      	adds	r5, #6
 8010f32:	e7ec      	b.n	8010f0e <ucdr_deserialize_double+0x14a>
 8010f34:	3505      	adds	r5, #5
 8010f36:	e7e6      	b.n	8010f06 <ucdr_deserialize_double+0x142>
 8010f38:	3504      	adds	r5, #4
 8010f3a:	e7e0      	b.n	8010efe <ucdr_deserialize_double+0x13a>
 8010f3c:	3503      	adds	r5, #3
 8010f3e:	e7da      	b.n	8010ef6 <ucdr_deserialize_double+0x132>

08010f40 <ucdr_deserialize_endian_double>:
 8010f40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010f44:	460f      	mov	r7, r1
 8010f46:	2108      	movs	r1, #8
 8010f48:	4604      	mov	r4, r0
 8010f4a:	4615      	mov	r5, r2
 8010f4c:	f000 f920 	bl	8011190 <ucdr_buffer_alignment>
 8010f50:	4601      	mov	r1, r0
 8010f52:	4620      	mov	r0, r4
 8010f54:	f894 9015 	ldrb.w	r9, [r4, #21]
 8010f58:	f000 f95e 	bl	8011218 <ucdr_advance_buffer>
 8010f5c:	2108      	movs	r1, #8
 8010f5e:	4620      	mov	r0, r4
 8010f60:	f000 f8b6 	bl	80110d0 <ucdr_check_buffer_available_for>
 8010f64:	2800      	cmp	r0, #0
 8010f66:	d14f      	bne.n	8011008 <ucdr_deserialize_endian_double+0xc8>
 8010f68:	e9d4 6801 	ldrd	r6, r8, [r4, #4]
 8010f6c:	4546      	cmp	r6, r8
 8010f6e:	d946      	bls.n	8010ffe <ucdr_deserialize_endian_double+0xbe>
 8010f70:	6923      	ldr	r3, [r4, #16]
 8010f72:	60a6      	str	r6, [r4, #8]
 8010f74:	eba6 0608 	sub.w	r6, r6, r8
 8010f78:	4433      	add	r3, r6
 8010f7a:	f1c6 0a08 	rsb	sl, r6, #8
 8010f7e:	6123      	str	r3, [r4, #16]
 8010f80:	4651      	mov	r1, sl
 8010f82:	4620      	mov	r0, r4
 8010f84:	f000 f8b0 	bl	80110e8 <ucdr_check_final_buffer_behavior>
 8010f88:	2800      	cmp	r0, #0
 8010f8a:	d069      	beq.n	8011060 <ucdr_deserialize_endian_double+0x120>
 8010f8c:	2f01      	cmp	r7, #1
 8010f8e:	f000 808b 	beq.w	80110a8 <ucdr_deserialize_endian_double+0x168>
 8010f92:	f898 3007 	ldrb.w	r3, [r8, #7]
 8010f96:	702b      	strb	r3, [r5, #0]
 8010f98:	f898 3006 	ldrb.w	r3, [r8, #6]
 8010f9c:	706b      	strb	r3, [r5, #1]
 8010f9e:	2e01      	cmp	r6, #1
 8010fa0:	d06b      	beq.n	801107a <ucdr_deserialize_endian_double+0x13a>
 8010fa2:	f898 3005 	ldrb.w	r3, [r8, #5]
 8010fa6:	70ab      	strb	r3, [r5, #2]
 8010fa8:	2e02      	cmp	r6, #2
 8010faa:	f000 808e 	beq.w	80110ca <ucdr_deserialize_endian_double+0x18a>
 8010fae:	f898 3004 	ldrb.w	r3, [r8, #4]
 8010fb2:	70eb      	strb	r3, [r5, #3]
 8010fb4:	2e03      	cmp	r6, #3
 8010fb6:	f000 8086 	beq.w	80110c6 <ucdr_deserialize_endian_double+0x186>
 8010fba:	f898 3003 	ldrb.w	r3, [r8, #3]
 8010fbe:	712b      	strb	r3, [r5, #4]
 8010fc0:	2e04      	cmp	r6, #4
 8010fc2:	d07e      	beq.n	80110c2 <ucdr_deserialize_endian_double+0x182>
 8010fc4:	f898 3002 	ldrb.w	r3, [r8, #2]
 8010fc8:	716b      	strb	r3, [r5, #5]
 8010fca:	2e05      	cmp	r6, #5
 8010fcc:	d077      	beq.n	80110be <ucdr_deserialize_endian_double+0x17e>
 8010fce:	f898 3001 	ldrb.w	r3, [r8, #1]
 8010fd2:	71ab      	strb	r3, [r5, #6]
 8010fd4:	2e06      	cmp	r6, #6
 8010fd6:	f105 0507 	add.w	r5, r5, #7
 8010fda:	d062      	beq.n	80110a2 <ucdr_deserialize_endian_double+0x162>
 8010fdc:	f898 3000 	ldrb.w	r3, [r8]
 8010fe0:	702b      	strb	r3, [r5, #0]
 8010fe2:	6923      	ldr	r3, [r4, #16]
 8010fe4:	68a2      	ldr	r2, [r4, #8]
 8010fe6:	7da0      	ldrb	r0, [r4, #22]
 8010fe8:	2108      	movs	r1, #8
 8010fea:	3308      	adds	r3, #8
 8010fec:	4452      	add	r2, sl
 8010fee:	1b9b      	subs	r3, r3, r6
 8010ff0:	7561      	strb	r1, [r4, #21]
 8010ff2:	60a2      	str	r2, [r4, #8]
 8010ff4:	6123      	str	r3, [r4, #16]
 8010ff6:	f080 0001 	eor.w	r0, r0, #1
 8010ffa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ffe:	2108      	movs	r1, #8
 8011000:	4620      	mov	r0, r4
 8011002:	f000 f871 	bl	80110e8 <ucdr_check_final_buffer_behavior>
 8011006:	b308      	cbz	r0, 801104c <ucdr_deserialize_endian_double+0x10c>
 8011008:	2f01      	cmp	r7, #1
 801100a:	68a3      	ldr	r3, [r4, #8]
 801100c:	d023      	beq.n	8011056 <ucdr_deserialize_endian_double+0x116>
 801100e:	79db      	ldrb	r3, [r3, #7]
 8011010:	702b      	strb	r3, [r5, #0]
 8011012:	68a3      	ldr	r3, [r4, #8]
 8011014:	799b      	ldrb	r3, [r3, #6]
 8011016:	706b      	strb	r3, [r5, #1]
 8011018:	68a3      	ldr	r3, [r4, #8]
 801101a:	795b      	ldrb	r3, [r3, #5]
 801101c:	70ab      	strb	r3, [r5, #2]
 801101e:	68a3      	ldr	r3, [r4, #8]
 8011020:	791b      	ldrb	r3, [r3, #4]
 8011022:	70eb      	strb	r3, [r5, #3]
 8011024:	68a3      	ldr	r3, [r4, #8]
 8011026:	78db      	ldrb	r3, [r3, #3]
 8011028:	712b      	strb	r3, [r5, #4]
 801102a:	68a3      	ldr	r3, [r4, #8]
 801102c:	789b      	ldrb	r3, [r3, #2]
 801102e:	716b      	strb	r3, [r5, #5]
 8011030:	68a3      	ldr	r3, [r4, #8]
 8011032:	785b      	ldrb	r3, [r3, #1]
 8011034:	71ab      	strb	r3, [r5, #6]
 8011036:	68a3      	ldr	r3, [r4, #8]
 8011038:	781b      	ldrb	r3, [r3, #0]
 801103a:	71eb      	strb	r3, [r5, #7]
 801103c:	68a2      	ldr	r2, [r4, #8]
 801103e:	6923      	ldr	r3, [r4, #16]
 8011040:	3208      	adds	r2, #8
 8011042:	3308      	adds	r3, #8
 8011044:	2108      	movs	r1, #8
 8011046:	60a2      	str	r2, [r4, #8]
 8011048:	6123      	str	r3, [r4, #16]
 801104a:	7561      	strb	r1, [r4, #21]
 801104c:	7da0      	ldrb	r0, [r4, #22]
 801104e:	f080 0001 	eor.w	r0, r0, #1
 8011052:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011056:	681a      	ldr	r2, [r3, #0]
 8011058:	685b      	ldr	r3, [r3, #4]
 801105a:	606b      	str	r3, [r5, #4]
 801105c:	602a      	str	r2, [r5, #0]
 801105e:	e7ed      	b.n	801103c <ucdr_deserialize_endian_double+0xfc>
 8011060:	68a2      	ldr	r2, [r4, #8]
 8011062:	6923      	ldr	r3, [r4, #16]
 8011064:	7da0      	ldrb	r0, [r4, #22]
 8011066:	f884 9015 	strb.w	r9, [r4, #21]
 801106a:	1b92      	subs	r2, r2, r6
 801106c:	1b9b      	subs	r3, r3, r6
 801106e:	60a2      	str	r2, [r4, #8]
 8011070:	6123      	str	r3, [r4, #16]
 8011072:	f080 0001 	eor.w	r0, r0, #1
 8011076:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801107a:	68a3      	ldr	r3, [r4, #8]
 801107c:	795b      	ldrb	r3, [r3, #5]
 801107e:	70ab      	strb	r3, [r5, #2]
 8011080:	3503      	adds	r5, #3
 8011082:	68a3      	ldr	r3, [r4, #8]
 8011084:	791b      	ldrb	r3, [r3, #4]
 8011086:	f805 3b01 	strb.w	r3, [r5], #1
 801108a:	68a3      	ldr	r3, [r4, #8]
 801108c:	78db      	ldrb	r3, [r3, #3]
 801108e:	f805 3b01 	strb.w	r3, [r5], #1
 8011092:	68a3      	ldr	r3, [r4, #8]
 8011094:	789b      	ldrb	r3, [r3, #2]
 8011096:	f805 3b01 	strb.w	r3, [r5], #1
 801109a:	68a3      	ldr	r3, [r4, #8]
 801109c:	785b      	ldrb	r3, [r3, #1]
 801109e:	f805 3b01 	strb.w	r3, [r5], #1
 80110a2:	f8d4 8008 	ldr.w	r8, [r4, #8]
 80110a6:	e799      	b.n	8010fdc <ucdr_deserialize_endian_double+0x9c>
 80110a8:	4641      	mov	r1, r8
 80110aa:	4632      	mov	r2, r6
 80110ac:	4628      	mov	r0, r5
 80110ae:	f00c fa54 	bl	801d55a <memcpy>
 80110b2:	68a1      	ldr	r1, [r4, #8]
 80110b4:	4652      	mov	r2, sl
 80110b6:	19a8      	adds	r0, r5, r6
 80110b8:	f00c fa4f 	bl	801d55a <memcpy>
 80110bc:	e791      	b.n	8010fe2 <ucdr_deserialize_endian_double+0xa2>
 80110be:	3506      	adds	r5, #6
 80110c0:	e7eb      	b.n	801109a <ucdr_deserialize_endian_double+0x15a>
 80110c2:	3505      	adds	r5, #5
 80110c4:	e7e5      	b.n	8011092 <ucdr_deserialize_endian_double+0x152>
 80110c6:	3504      	adds	r5, #4
 80110c8:	e7df      	b.n	801108a <ucdr_deserialize_endian_double+0x14a>
 80110ca:	3503      	adds	r5, #3
 80110cc:	e7d9      	b.n	8011082 <ucdr_deserialize_endian_double+0x142>
 80110ce:	bf00      	nop

080110d0 <ucdr_check_buffer_available_for>:
 80110d0:	7d83      	ldrb	r3, [r0, #22]
 80110d2:	b93b      	cbnz	r3, 80110e4 <ucdr_check_buffer_available_for+0x14>
 80110d4:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 80110d8:	440b      	add	r3, r1
 80110da:	4298      	cmp	r0, r3
 80110dc:	bf34      	ite	cc
 80110de:	2000      	movcc	r0, #0
 80110e0:	2001      	movcs	r0, #1
 80110e2:	4770      	bx	lr
 80110e4:	2000      	movs	r0, #0
 80110e6:	4770      	bx	lr

080110e8 <ucdr_check_final_buffer_behavior>:
 80110e8:	7d83      	ldrb	r3, [r0, #22]
 80110ea:	b943      	cbnz	r3, 80110fe <ucdr_check_final_buffer_behavior+0x16>
 80110ec:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 80110f0:	4291      	cmp	r1, r2
 80110f2:	b510      	push	{r4, lr}
 80110f4:	4604      	mov	r4, r0
 80110f6:	d205      	bcs.n	8011104 <ucdr_check_final_buffer_behavior+0x1c>
 80110f8:	2301      	movs	r3, #1
 80110fa:	4618      	mov	r0, r3
 80110fc:	bd10      	pop	{r4, pc}
 80110fe:	2300      	movs	r3, #0
 8011100:	4618      	mov	r0, r3
 8011102:	4770      	bx	lr
 8011104:	6982      	ldr	r2, [r0, #24]
 8011106:	b13a      	cbz	r2, 8011118 <ucdr_check_final_buffer_behavior+0x30>
 8011108:	69c1      	ldr	r1, [r0, #28]
 801110a:	4790      	blx	r2
 801110c:	f080 0301 	eor.w	r3, r0, #1
 8011110:	b2db      	uxtb	r3, r3
 8011112:	75a0      	strb	r0, [r4, #22]
 8011114:	4618      	mov	r0, r3
 8011116:	bd10      	pop	{r4, pc}
 8011118:	2001      	movs	r0, #1
 801111a:	75a0      	strb	r0, [r4, #22]
 801111c:	e7fa      	b.n	8011114 <ucdr_check_final_buffer_behavior+0x2c>
 801111e:	bf00      	nop

08011120 <ucdr_set_on_full_buffer_callback>:
 8011120:	e9c0 1206 	strd	r1, r2, [r0, #24]
 8011124:	4770      	bx	lr
 8011126:	bf00      	nop

08011128 <ucdr_init_buffer_origin_offset_endian>:
 8011128:	b410      	push	{r4}
 801112a:	9c01      	ldr	r4, [sp, #4]
 801112c:	6001      	str	r1, [r0, #0]
 801112e:	440a      	add	r2, r1
 8011130:	6042      	str	r2, [r0, #4]
 8011132:	190a      	adds	r2, r1, r4
 8011134:	441c      	add	r4, r3
 8011136:	e9c0 3403 	strd	r3, r4, [r0, #12]
 801113a:	6082      	str	r2, [r0, #8]
 801113c:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8011140:	7503      	strb	r3, [r0, #20]
 8011142:	2200      	movs	r2, #0
 8011144:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8011148:	f85d 4b04 	ldr.w	r4, [sp], #4
 801114c:	7542      	strb	r2, [r0, #21]
 801114e:	7582      	strb	r2, [r0, #22]
 8011150:	4770      	bx	lr
 8011152:	bf00      	nop

08011154 <ucdr_init_buffer_origin_offset>:
 8011154:	b510      	push	{r4, lr}
 8011156:	b082      	sub	sp, #8
 8011158:	9c04      	ldr	r4, [sp, #16]
 801115a:	9400      	str	r4, [sp, #0]
 801115c:	2401      	movs	r4, #1
 801115e:	9401      	str	r4, [sp, #4]
 8011160:	f7ff ffe2 	bl	8011128 <ucdr_init_buffer_origin_offset_endian>
 8011164:	b002      	add	sp, #8
 8011166:	bd10      	pop	{r4, pc}

08011168 <ucdr_init_buffer_origin>:
 8011168:	b510      	push	{r4, lr}
 801116a:	b082      	sub	sp, #8
 801116c:	2400      	movs	r4, #0
 801116e:	9400      	str	r4, [sp, #0]
 8011170:	f7ff fff0 	bl	8011154 <ucdr_init_buffer_origin_offset>
 8011174:	b002      	add	sp, #8
 8011176:	bd10      	pop	{r4, pc}

08011178 <ucdr_init_buffer>:
 8011178:	2300      	movs	r3, #0
 801117a:	f7ff bff5 	b.w	8011168 <ucdr_init_buffer_origin>
 801117e:	bf00      	nop

08011180 <ucdr_alignment>:
 8011180:	fbb0 f3f1 	udiv	r3, r0, r1
 8011184:	fb03 0011 	mls	r0, r3, r1, r0
 8011188:	1a08      	subs	r0, r1, r0
 801118a:	3901      	subs	r1, #1
 801118c:	4008      	ands	r0, r1
 801118e:	4770      	bx	lr

08011190 <ucdr_buffer_alignment>:
 8011190:	7d43      	ldrb	r3, [r0, #21]
 8011192:	428b      	cmp	r3, r1
 8011194:	d208      	bcs.n	80111a8 <ucdr_buffer_alignment+0x18>
 8011196:	6900      	ldr	r0, [r0, #16]
 8011198:	fbb0 f3f1 	udiv	r3, r0, r1
 801119c:	fb01 0013 	mls	r0, r1, r3, r0
 80111a0:	1a08      	subs	r0, r1, r0
 80111a2:	3901      	subs	r1, #1
 80111a4:	4008      	ands	r0, r1
 80111a6:	4770      	bx	lr
 80111a8:	2000      	movs	r0, #0
 80111aa:	4770      	bx	lr

080111ac <ucdr_align_to>:
 80111ac:	b538      	push	{r3, r4, r5, lr}
 80111ae:	4604      	mov	r4, r0
 80111b0:	460d      	mov	r5, r1
 80111b2:	f7ff ffed 	bl	8011190 <ucdr_buffer_alignment>
 80111b6:	68a3      	ldr	r3, [r4, #8]
 80111b8:	6861      	ldr	r1, [r4, #4]
 80111ba:	6922      	ldr	r2, [r4, #16]
 80111bc:	7565      	strb	r5, [r4, #21]
 80111be:	4403      	add	r3, r0
 80111c0:	428b      	cmp	r3, r1
 80111c2:	bf28      	it	cs
 80111c4:	460b      	movcs	r3, r1
 80111c6:	4402      	add	r2, r0
 80111c8:	60a3      	str	r3, [r4, #8]
 80111ca:	6122      	str	r2, [r4, #16]
 80111cc:	bd38      	pop	{r3, r4, r5, pc}
 80111ce:	bf00      	nop

080111d0 <ucdr_buffer_length>:
 80111d0:	6882      	ldr	r2, [r0, #8]
 80111d2:	6800      	ldr	r0, [r0, #0]
 80111d4:	1a10      	subs	r0, r2, r0
 80111d6:	4770      	bx	lr

080111d8 <ucdr_buffer_remaining>:
 80111d8:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 80111dc:	1a10      	subs	r0, r2, r0
 80111de:	4770      	bx	lr

080111e0 <ucdr_check_final_buffer_behavior_array>:
 80111e0:	b538      	push	{r3, r4, r5, lr}
 80111e2:	7d83      	ldrb	r3, [r0, #22]
 80111e4:	b963      	cbnz	r3, 8011200 <ucdr_check_final_buffer_behavior_array+0x20>
 80111e6:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 80111ea:	429a      	cmp	r2, r3
 80111ec:	4604      	mov	r4, r0
 80111ee:	460d      	mov	r5, r1
 80111f0:	d308      	bcc.n	8011204 <ucdr_check_final_buffer_behavior_array+0x24>
 80111f2:	b139      	cbz	r1, 8011204 <ucdr_check_final_buffer_behavior_array+0x24>
 80111f4:	6983      	ldr	r3, [r0, #24]
 80111f6:	b163      	cbz	r3, 8011212 <ucdr_check_final_buffer_behavior_array+0x32>
 80111f8:	69c1      	ldr	r1, [r0, #28]
 80111fa:	4798      	blx	r3
 80111fc:	75a0      	strb	r0, [r4, #22]
 80111fe:	b108      	cbz	r0, 8011204 <ucdr_check_final_buffer_behavior_array+0x24>
 8011200:	2000      	movs	r0, #0
 8011202:	bd38      	pop	{r3, r4, r5, pc}
 8011204:	4620      	mov	r0, r4
 8011206:	f7ff ffe7 	bl	80111d8 <ucdr_buffer_remaining>
 801120a:	42a8      	cmp	r0, r5
 801120c:	bf28      	it	cs
 801120e:	4628      	movcs	r0, r5
 8011210:	bd38      	pop	{r3, r4, r5, pc}
 8011212:	2301      	movs	r3, #1
 8011214:	7583      	strb	r3, [r0, #22]
 8011216:	e7f3      	b.n	8011200 <ucdr_check_final_buffer_behavior_array+0x20>

08011218 <ucdr_advance_buffer>:
 8011218:	b538      	push	{r3, r4, r5, lr}
 801121a:	4604      	mov	r4, r0
 801121c:	460d      	mov	r5, r1
 801121e:	f7ff ff57 	bl	80110d0 <ucdr_check_buffer_available_for>
 8011222:	b178      	cbz	r0, 8011244 <ucdr_advance_buffer+0x2c>
 8011224:	6923      	ldr	r3, [r4, #16]
 8011226:	68a2      	ldr	r2, [r4, #8]
 8011228:	442b      	add	r3, r5
 801122a:	6123      	str	r3, [r4, #16]
 801122c:	2301      	movs	r3, #1
 801122e:	442a      	add	r2, r5
 8011230:	7563      	strb	r3, [r4, #21]
 8011232:	60a2      	str	r2, [r4, #8]
 8011234:	bd38      	pop	{r3, r4, r5, pc}
 8011236:	68a2      	ldr	r2, [r4, #8]
 8011238:	6923      	ldr	r3, [r4, #16]
 801123a:	4402      	add	r2, r0
 801123c:	4403      	add	r3, r0
 801123e:	1a2d      	subs	r5, r5, r0
 8011240:	60a2      	str	r2, [r4, #8]
 8011242:	6123      	str	r3, [r4, #16]
 8011244:	2201      	movs	r2, #1
 8011246:	4629      	mov	r1, r5
 8011248:	4620      	mov	r0, r4
 801124a:	f7ff ffc9 	bl	80111e0 <ucdr_check_final_buffer_behavior_array>
 801124e:	2800      	cmp	r0, #0
 8011250:	d1f1      	bne.n	8011236 <ucdr_advance_buffer+0x1e>
 8011252:	2301      	movs	r3, #1
 8011254:	7563      	strb	r3, [r4, #21]
 8011256:	bd38      	pop	{r3, r4, r5, pc}

08011258 <ucdr_serialize_sequence_char>:
 8011258:	b570      	push	{r4, r5, r6, lr}
 801125a:	460e      	mov	r6, r1
 801125c:	4615      	mov	r5, r2
 801125e:	7d01      	ldrb	r1, [r0, #20]
 8011260:	4604      	mov	r4, r0
 8011262:	f7fe fcdb 	bl	800fc1c <ucdr_serialize_endian_uint32_t>
 8011266:	b90d      	cbnz	r5, 801126c <ucdr_serialize_sequence_char+0x14>
 8011268:	2001      	movs	r0, #1
 801126a:	bd70      	pop	{r4, r5, r6, pc}
 801126c:	7d21      	ldrb	r1, [r4, #20]
 801126e:	462b      	mov	r3, r5
 8011270:	4632      	mov	r2, r6
 8011272:	4620      	mov	r0, r4
 8011274:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011278:	f7fd bec0 	b.w	800effc <ucdr_serialize_endian_array_char>

0801127c <ucdr_deserialize_sequence_char>:
 801127c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011280:	461d      	mov	r5, r3
 8011282:	4616      	mov	r6, r2
 8011284:	460f      	mov	r7, r1
 8011286:	461a      	mov	r2, r3
 8011288:	7d01      	ldrb	r1, [r0, #20]
 801128a:	4604      	mov	r4, r0
 801128c:	f7fe fde4 	bl	800fe58 <ucdr_deserialize_endian_uint32_t>
 8011290:	682b      	ldr	r3, [r5, #0]
 8011292:	429e      	cmp	r6, r3
 8011294:	d208      	bcs.n	80112a8 <ucdr_deserialize_sequence_char+0x2c>
 8011296:	2201      	movs	r2, #1
 8011298:	75a2      	strb	r2, [r4, #22]
 801129a:	7d21      	ldrb	r1, [r4, #20]
 801129c:	463a      	mov	r2, r7
 801129e:	4620      	mov	r0, r4
 80112a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80112a4:	f7fd bedc 	b.w	800f060 <ucdr_deserialize_endian_array_char>
 80112a8:	2b00      	cmp	r3, #0
 80112aa:	d1f6      	bne.n	801129a <ucdr_deserialize_sequence_char+0x1e>
 80112ac:	2001      	movs	r0, #1
 80112ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80112b2:	bf00      	nop

080112b4 <ucdr_serialize_sequence_uint8_t>:
 80112b4:	b570      	push	{r4, r5, r6, lr}
 80112b6:	460e      	mov	r6, r1
 80112b8:	4615      	mov	r5, r2
 80112ba:	7d01      	ldrb	r1, [r0, #20]
 80112bc:	4604      	mov	r4, r0
 80112be:	f7fe fcad 	bl	800fc1c <ucdr_serialize_endian_uint32_t>
 80112c2:	b90d      	cbnz	r5, 80112c8 <ucdr_serialize_sequence_uint8_t+0x14>
 80112c4:	2001      	movs	r0, #1
 80112c6:	bd70      	pop	{r4, r5, r6, pc}
 80112c8:	7d21      	ldrb	r1, [r4, #20]
 80112ca:	462b      	mov	r3, r5
 80112cc:	4632      	mov	r2, r6
 80112ce:	4620      	mov	r0, r4
 80112d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80112d4:	f7fd bf28 	b.w	800f128 <ucdr_serialize_endian_array_uint8_t>

080112d8 <ucdr_deserialize_sequence_uint8_t>:
 80112d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80112dc:	461d      	mov	r5, r3
 80112de:	4616      	mov	r6, r2
 80112e0:	460f      	mov	r7, r1
 80112e2:	461a      	mov	r2, r3
 80112e4:	7d01      	ldrb	r1, [r0, #20]
 80112e6:	4604      	mov	r4, r0
 80112e8:	f7fe fdb6 	bl	800fe58 <ucdr_deserialize_endian_uint32_t>
 80112ec:	682b      	ldr	r3, [r5, #0]
 80112ee:	429e      	cmp	r6, r3
 80112f0:	d208      	bcs.n	8011304 <ucdr_deserialize_sequence_uint8_t+0x2c>
 80112f2:	2201      	movs	r2, #1
 80112f4:	75a2      	strb	r2, [r4, #22]
 80112f6:	7d21      	ldrb	r1, [r4, #20]
 80112f8:	463a      	mov	r2, r7
 80112fa:	4620      	mov	r0, r4
 80112fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011300:	f7fd bf76 	b.w	800f1f0 <ucdr_deserialize_endian_array_uint8_t>
 8011304:	2b00      	cmp	r3, #0
 8011306:	d1f6      	bne.n	80112f6 <ucdr_deserialize_sequence_uint8_t+0x1e>
 8011308:	2001      	movs	r0, #1
 801130a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801130e:	bf00      	nop

08011310 <uxr_buffer_delete_entity>:
 8011310:	b510      	push	{r4, lr}
 8011312:	2300      	movs	r3, #0
 8011314:	b08e      	sub	sp, #56	@ 0x38
 8011316:	e9cd 3201 	strd	r3, r2, [sp, #4]
 801131a:	2303      	movs	r3, #3
 801131c:	9300      	str	r3, [sp, #0]
 801131e:	2204      	movs	r2, #4
 8011320:	ab06      	add	r3, sp, #24
 8011322:	4604      	mov	r4, r0
 8011324:	f001 f928 	bl	8012578 <uxr_prepare_stream_to_write_submessage>
 8011328:	b918      	cbnz	r0, 8011332 <uxr_buffer_delete_entity+0x22>
 801132a:	4604      	mov	r4, r0
 801132c:	4620      	mov	r0, r4
 801132e:	b00e      	add	sp, #56	@ 0x38
 8011330:	bd10      	pop	{r4, pc}
 8011332:	9902      	ldr	r1, [sp, #8]
 8011334:	aa05      	add	r2, sp, #20
 8011336:	4620      	mov	r0, r4
 8011338:	f001 fa58 	bl	80127ec <uxr_init_base_object_request>
 801133c:	a905      	add	r1, sp, #20
 801133e:	4604      	mov	r4, r0
 8011340:	a806      	add	r0, sp, #24
 8011342:	f002 fc95 	bl	8013c70 <uxr_serialize_DELETE_Payload>
 8011346:	4620      	mov	r0, r4
 8011348:	b00e      	add	sp, #56	@ 0x38
 801134a:	bd10      	pop	{r4, pc}

0801134c <uxr_common_create_entity>:
 801134c:	b510      	push	{r4, lr}
 801134e:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8011352:	b08c      	sub	sp, #48	@ 0x30
 8011354:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8011358:	f1bc 0f01 	cmp.w	ip, #1
 801135c:	bf08      	it	eq
 801135e:	f003 0201 	andeq.w	r2, r3, #1
 8011362:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 8011366:	bf18      	it	ne
 8011368:	2200      	movne	r2, #0
 801136a:	330e      	adds	r3, #14
 801136c:	441a      	add	r2, r3
 801136e:	2301      	movs	r3, #1
 8011370:	e9cd 3100 	strd	r3, r1, [sp]
 8011374:	b292      	uxth	r2, r2
 8011376:	9903      	ldr	r1, [sp, #12]
 8011378:	ab04      	add	r3, sp, #16
 801137a:	4604      	mov	r4, r0
 801137c:	f001 f8fc 	bl	8012578 <uxr_prepare_stream_to_write_submessage>
 8011380:	b918      	cbnz	r0, 801138a <uxr_common_create_entity+0x3e>
 8011382:	4604      	mov	r4, r0
 8011384:	4620      	mov	r0, r4
 8011386:	b00c      	add	sp, #48	@ 0x30
 8011388:	bd10      	pop	{r4, pc}
 801138a:	9902      	ldr	r1, [sp, #8]
 801138c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801138e:	4620      	mov	r0, r4
 8011390:	f001 fa2c 	bl	80127ec <uxr_init_base_object_request>
 8011394:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8011396:	4604      	mov	r4, r0
 8011398:	a804      	add	r0, sp, #16
 801139a:	f002 fbc7 	bl	8013b2c <uxr_serialize_CREATE_Payload>
 801139e:	4620      	mov	r0, r4
 80113a0:	b00c      	add	sp, #48	@ 0x30
 80113a2:	bd10      	pop	{r4, pc}

080113a4 <uxr_buffer_create_participant_bin>:
 80113a4:	b570      	push	{r4, r5, r6, lr}
 80113a6:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 80113aa:	ac11      	add	r4, sp, #68	@ 0x44
 80113ac:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 80113b0:	2303      	movs	r3, #3
 80113b2:	7223      	strb	r3, [r4, #8]
 80113b4:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 80113b6:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 80113ba:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80113be:	2201      	movs	r2, #1
 80113c0:	2100      	movs	r1, #0
 80113c2:	4605      	mov	r5, r0
 80113c4:	7122      	strb	r2, [r4, #4]
 80113c6:	f88d 1014 	strb.w	r1, [sp, #20]
 80113ca:	b1cb      	cbz	r3, 8011400 <uxr_buffer_create_participant_bin+0x5c>
 80113cc:	f88d 201c 	strb.w	r2, [sp, #28]
 80113d0:	9308      	str	r3, [sp, #32]
 80113d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80113d6:	a915      	add	r1, sp, #84	@ 0x54
 80113d8:	a809      	add	r0, sp, #36	@ 0x24
 80113da:	f7ff fecd 	bl	8011178 <ucdr_init_buffer>
 80113de:	a905      	add	r1, sp, #20
 80113e0:	a809      	add	r0, sp, #36	@ 0x24
 80113e2:	f001 ff7b 	bl	80132dc <uxr_serialize_OBJK_DomainParticipant_Binary>
 80113e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80113e8:	9600      	str	r6, [sp, #0]
 80113ea:	9401      	str	r4, [sp, #4]
 80113ec:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80113f0:	60e3      	str	r3, [r4, #12]
 80113f2:	4628      	mov	r0, r5
 80113f4:	b29b      	uxth	r3, r3
 80113f6:	f7ff ffa9 	bl	801134c <uxr_common_create_entity>
 80113fa:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 80113fe:	bd70      	pop	{r4, r5, r6, pc}
 8011400:	f88d 301c 	strb.w	r3, [sp, #28]
 8011404:	e7e5      	b.n	80113d2 <uxr_buffer_create_participant_bin+0x2e>
 8011406:	bf00      	nop

08011408 <uxr_buffer_create_topic_bin>:
 8011408:	b570      	push	{r4, r5, r6, lr}
 801140a:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 801140e:	4605      	mov	r5, r0
 8011410:	9105      	str	r1, [sp, #20]
 8011412:	4618      	mov	r0, r3
 8011414:	a997      	add	r1, sp, #604	@ 0x25c
 8011416:	2302      	movs	r3, #2
 8011418:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 801141c:	9204      	str	r2, [sp, #16]
 801141e:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 8011422:	f000 f9a9 	bl	8011778 <uxr_object_id_to_raw>
 8011426:	2303      	movs	r3, #3
 8011428:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 801142c:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 801142e:	9306      	str	r3, [sp, #24]
 8011430:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 8011432:	930a      	str	r3, [sp, #40]	@ 0x28
 8011434:	2301      	movs	r3, #1
 8011436:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 801143a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801143e:	2300      	movs	r3, #0
 8011440:	a917      	add	r1, sp, #92	@ 0x5c
 8011442:	a80b      	add	r0, sp, #44	@ 0x2c
 8011444:	f88d 301c 	strb.w	r3, [sp, #28]
 8011448:	f7ff fe96 	bl	8011178 <ucdr_init_buffer>
 801144c:	a906      	add	r1, sp, #24
 801144e:	a80b      	add	r0, sp, #44	@ 0x2c
 8011450:	f001 ff66 	bl	8013320 <uxr_serialize_OBJK_Topic_Binary>
 8011454:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011456:	9316      	str	r3, [sp, #88]	@ 0x58
 8011458:	ac13      	add	r4, sp, #76	@ 0x4c
 801145a:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 801145e:	9600      	str	r6, [sp, #0]
 8011460:	9401      	str	r4, [sp, #4]
 8011462:	b29b      	uxth	r3, r3
 8011464:	4628      	mov	r0, r5
 8011466:	f7ff ff71 	bl	801134c <uxr_common_create_entity>
 801146a:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 801146e:	bd70      	pop	{r4, r5, r6, pc}

08011470 <uxr_buffer_create_publisher_bin>:
 8011470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011472:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 8011476:	4605      	mov	r5, r0
 8011478:	9105      	str	r1, [sp, #20]
 801147a:	4618      	mov	r0, r3
 801147c:	2603      	movs	r6, #3
 801147e:	a992      	add	r1, sp, #584	@ 0x248
 8011480:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 8011484:	9204      	str	r2, [sp, #16]
 8011486:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 801148a:	f000 f975 	bl	8011778 <uxr_object_id_to_raw>
 801148e:	2300      	movs	r3, #0
 8011490:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011494:	a912      	add	r1, sp, #72	@ 0x48
 8011496:	a806      	add	r0, sp, #24
 8011498:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 801149c:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 80114a0:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 80114a4:	f7ff fe68 	bl	8011178 <ucdr_init_buffer>
 80114a8:	a993      	add	r1, sp, #588	@ 0x24c
 80114aa:	a806      	add	r0, sp, #24
 80114ac:	f001 ffee 	bl	801348c <uxr_serialize_OBJK_Publisher_Binary>
 80114b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80114b2:	9311      	str	r3, [sp, #68]	@ 0x44
 80114b4:	ac0e      	add	r4, sp, #56	@ 0x38
 80114b6:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80114ba:	9700      	str	r7, [sp, #0]
 80114bc:	9401      	str	r4, [sp, #4]
 80114be:	b29b      	uxth	r3, r3
 80114c0:	4628      	mov	r0, r5
 80114c2:	f7ff ff43 	bl	801134c <uxr_common_create_entity>
 80114c6:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 80114ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

080114cc <uxr_buffer_create_subscriber_bin>:
 80114cc:	b570      	push	{r4, r5, r6, lr}
 80114ce:	f5ad 6d91 	sub.w	sp, sp, #1160	@ 0x488
 80114d2:	4605      	mov	r5, r0
 80114d4:	9105      	str	r1, [sp, #20]
 80114d6:	4618      	mov	r0, r3
 80114d8:	a992      	add	r1, sp, #584	@ 0x248
 80114da:	2304      	movs	r3, #4
 80114dc:	f89d 6498 	ldrb.w	r6, [sp, #1176]	@ 0x498
 80114e0:	9204      	str	r2, [sp, #16]
 80114e2:	f88d 303c 	strb.w	r3, [sp, #60]	@ 0x3c
 80114e6:	f000 f947 	bl	8011778 <uxr_object_id_to_raw>
 80114ea:	2203      	movs	r2, #3
 80114ec:	2300      	movs	r3, #0
 80114ee:	f88d 2040 	strb.w	r2, [sp, #64]	@ 0x40
 80114f2:	a912      	add	r1, sp, #72	@ 0x48
 80114f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80114f8:	a806      	add	r0, sp, #24
 80114fa:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 80114fe:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 8011502:	f7ff fe39 	bl	8011178 <ucdr_init_buffer>
 8011506:	a993      	add	r1, sp, #588	@ 0x24c
 8011508:	a806      	add	r0, sp, #24
 801150a:	f002 f871 	bl	80135f0 <uxr_serialize_OBJK_Subscriber_Binary>
 801150e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011510:	9311      	str	r3, [sp, #68]	@ 0x44
 8011512:	ac0e      	add	r4, sp, #56	@ 0x38
 8011514:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8011518:	9600      	str	r6, [sp, #0]
 801151a:	9401      	str	r4, [sp, #4]
 801151c:	b29b      	uxth	r3, r3
 801151e:	4628      	mov	r0, r5
 8011520:	f7ff ff14 	bl	801134c <uxr_common_create_entity>
 8011524:	f50d 6d91 	add.w	sp, sp, #1160	@ 0x488
 8011528:	bd70      	pop	{r4, r5, r6, pc}
 801152a:	bf00      	nop

0801152c <uxr_buffer_create_datawriter_bin>:
 801152c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801152e:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 8011532:	ac1d      	add	r4, sp, #116	@ 0x74
 8011534:	9105      	str	r1, [sp, #20]
 8011536:	4605      	mov	r5, r0
 8011538:	a9a1      	add	r1, sp, #644	@ 0x284
 801153a:	4618      	mov	r0, r3
 801153c:	2305      	movs	r3, #5
 801153e:	f8bd 72a8 	ldrh.w	r7, [sp, #680]	@ 0x2a8
 8011542:	9204      	str	r2, [sp, #16]
 8011544:	7123      	strb	r3, [r4, #4]
 8011546:	f89d 62ac 	ldrb.w	r6, [sp, #684]	@ 0x2ac
 801154a:	f000 f915 	bl	8011778 <uxr_object_id_to_raw>
 801154e:	2303      	movs	r3, #3
 8011550:	a90e      	add	r1, sp, #56	@ 0x38
 8011552:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 8011554:	7223      	strb	r3, [r4, #8]
 8011556:	f000 f90f 	bl	8011778 <uxr_object_id_to_raw>
 801155a:	f89d 32a5 	ldrb.w	r3, [sp, #677]	@ 0x2a5
 801155e:	f8ad 7044 	strh.w	r7, [sp, #68]	@ 0x44
 8011562:	2200      	movs	r2, #0
 8011564:	3f00      	subs	r7, #0
 8011566:	fab3 f383 	clz	r3, r3
 801156a:	f89d 12a6 	ldrb.w	r1, [sp, #678]	@ 0x2a6
 801156e:	f88d 2064 	strb.w	r2, [sp, #100]	@ 0x64
 8011572:	bf18      	it	ne
 8011574:	2701      	movne	r7, #1
 8011576:	095b      	lsrs	r3, r3, #5
 8011578:	f88d 2046 	strb.w	r2, [sp, #70]	@ 0x46
 801157c:	f88d 204c 	strb.w	r2, [sp, #76]	@ 0x4c
 8011580:	f88d 2054 	strb.w	r2, [sp, #84]	@ 0x54
 8011584:	2201      	movs	r2, #1
 8011586:	f88d 7042 	strb.w	r7, [sp, #66]	@ 0x42
 801158a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 801158e:	f88d 203a 	strb.w	r2, [sp, #58]	@ 0x3a
 8011592:	b919      	cbnz	r1, 801159c <uxr_buffer_create_datawriter_bin+0x70>
 8011594:	f043 0302 	orr.w	r3, r3, #2
 8011598:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 801159c:	f89d 22a4 	ldrb.w	r2, [sp, #676]	@ 0x2a4
 80115a0:	2a01      	cmp	r2, #1
 80115a2:	d022      	beq.n	80115ea <uxr_buffer_create_datawriter_bin+0xbe>
 80115a4:	2a03      	cmp	r2, #3
 80115a6:	d01b      	beq.n	80115e0 <uxr_buffer_create_datawriter_bin+0xb4>
 80115a8:	b91a      	cbnz	r2, 80115b2 <uxr_buffer_create_datawriter_bin+0x86>
 80115aa:	f043 0308 	orr.w	r3, r3, #8
 80115ae:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 80115b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80115b6:	a921      	add	r1, sp, #132	@ 0x84
 80115b8:	a806      	add	r0, sp, #24
 80115ba:	f7ff fddd 	bl	8011178 <ucdr_init_buffer>
 80115be:	a90e      	add	r1, sp, #56	@ 0x38
 80115c0:	a806      	add	r0, sp, #24
 80115c2:	f002 f8b7 	bl	8013734 <uxr_serialize_OBJK_DataWriter_Binary>
 80115c6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80115c8:	9600      	str	r6, [sp, #0]
 80115ca:	9401      	str	r4, [sp, #4]
 80115cc:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80115d0:	60e3      	str	r3, [r4, #12]
 80115d2:	4628      	mov	r0, r5
 80115d4:	b29b      	uxth	r3, r3
 80115d6:	f7ff feb9 	bl	801134c <uxr_common_create_entity>
 80115da:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 80115de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80115e0:	f043 0320 	orr.w	r3, r3, #32
 80115e4:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 80115e8:	e7e3      	b.n	80115b2 <uxr_buffer_create_datawriter_bin+0x86>
 80115ea:	f043 0310 	orr.w	r3, r3, #16
 80115ee:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 80115f2:	e7de      	b.n	80115b2 <uxr_buffer_create_datawriter_bin+0x86>

080115f4 <uxr_buffer_create_datareader_bin>:
 80115f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80115f6:	f5ad 7d25 	sub.w	sp, sp, #660	@ 0x294
 80115fa:	ac1f      	add	r4, sp, #124	@ 0x7c
 80115fc:	9105      	str	r1, [sp, #20]
 80115fe:	4605      	mov	r5, r0
 8011600:	a9a3      	add	r1, sp, #652	@ 0x28c
 8011602:	4618      	mov	r0, r3
 8011604:	2306      	movs	r3, #6
 8011606:	f8bd 72b0 	ldrh.w	r7, [sp, #688]	@ 0x2b0
 801160a:	9204      	str	r2, [sp, #16]
 801160c:	7123      	strb	r3, [r4, #4]
 801160e:	f89d 62b4 	ldrb.w	r6, [sp, #692]	@ 0x2b4
 8011612:	f000 f8b1 	bl	8011778 <uxr_object_id_to_raw>
 8011616:	2303      	movs	r3, #3
 8011618:	a90e      	add	r1, sp, #56	@ 0x38
 801161a:	98aa      	ldr	r0, [sp, #680]	@ 0x2a8
 801161c:	7223      	strb	r3, [r4, #8]
 801161e:	f000 f8ab 	bl	8011778 <uxr_object_id_to_raw>
 8011622:	f89d 32ad 	ldrb.w	r3, [sp, #685]	@ 0x2ad
 8011626:	f8ad 7044 	strh.w	r7, [sp, #68]	@ 0x44
 801162a:	2200      	movs	r2, #0
 801162c:	3f00      	subs	r7, #0
 801162e:	fab3 f383 	clz	r3, r3
 8011632:	f89d 12ae 	ldrb.w	r1, [sp, #686]	@ 0x2ae
 8011636:	f88d 2070 	strb.w	r2, [sp, #112]	@ 0x70
 801163a:	bf18      	it	ne
 801163c:	2701      	movne	r7, #1
 801163e:	095b      	lsrs	r3, r3, #5
 8011640:	f88d 2064 	strb.w	r2, [sp, #100]	@ 0x64
 8011644:	f88d 2046 	strb.w	r2, [sp, #70]	@ 0x46
 8011648:	f88d 204c 	strb.w	r2, [sp, #76]	@ 0x4c
 801164c:	f88d 2054 	strb.w	r2, [sp, #84]	@ 0x54
 8011650:	2201      	movs	r2, #1
 8011652:	f88d 7042 	strb.w	r7, [sp, #66]	@ 0x42
 8011656:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 801165a:	f88d 203a 	strb.w	r2, [sp, #58]	@ 0x3a
 801165e:	b919      	cbnz	r1, 8011668 <uxr_buffer_create_datareader_bin+0x74>
 8011660:	f043 0302 	orr.w	r3, r3, #2
 8011664:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8011668:	f89d 22ac 	ldrb.w	r2, [sp, #684]	@ 0x2ac
 801166c:	2a01      	cmp	r2, #1
 801166e:	d022      	beq.n	80116b6 <uxr_buffer_create_datareader_bin+0xc2>
 8011670:	2a03      	cmp	r2, #3
 8011672:	d01b      	beq.n	80116ac <uxr_buffer_create_datareader_bin+0xb8>
 8011674:	b91a      	cbnz	r2, 801167e <uxr_buffer_create_datareader_bin+0x8a>
 8011676:	f043 0308 	orr.w	r3, r3, #8
 801167a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 801167e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011682:	a923      	add	r1, sp, #140	@ 0x8c
 8011684:	a806      	add	r0, sp, #24
 8011686:	f7ff fd77 	bl	8011178 <ucdr_init_buffer>
 801168a:	a90e      	add	r1, sp, #56	@ 0x38
 801168c:	a806      	add	r0, sp, #24
 801168e:	f002 f815 	bl	80136bc <uxr_serialize_OBJK_DataReader_Binary>
 8011692:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011694:	9600      	str	r6, [sp, #0]
 8011696:	9401      	str	r4, [sp, #4]
 8011698:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 801169c:	60e3      	str	r3, [r4, #12]
 801169e:	4628      	mov	r0, r5
 80116a0:	b29b      	uxth	r3, r3
 80116a2:	f7ff fe53 	bl	801134c <uxr_common_create_entity>
 80116a6:	f50d 7d25 	add.w	sp, sp, #660	@ 0x294
 80116aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80116ac:	f043 0320 	orr.w	r3, r3, #32
 80116b0:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 80116b4:	e7e3      	b.n	801167e <uxr_buffer_create_datareader_bin+0x8a>
 80116b6:	f043 0310 	orr.w	r3, r3, #16
 80116ba:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 80116be:	e7de      	b.n	801167e <uxr_buffer_create_datareader_bin+0x8a>

080116c0 <uxr_buffer_create_replier_bin>:
 80116c0:	b570      	push	{r4, r5, r6, lr}
 80116c2:	f5ad 7d1a 	sub.w	sp, sp, #616	@ 0x268
 80116c6:	4605      	mov	r5, r0
 80116c8:	9105      	str	r1, [sp, #20]
 80116ca:	4618      	mov	r0, r3
 80116cc:	a999      	add	r1, sp, #612	@ 0x264
 80116ce:	2308      	movs	r3, #8
 80116d0:	f89d 6294 	ldrb.w	r6, [sp, #660]	@ 0x294
 80116d4:	9204      	str	r2, [sp, #16]
 80116d6:	f88d 3058 	strb.w	r3, [sp, #88]	@ 0x58
 80116da:	f000 f84d 	bl	8011778 <uxr_object_id_to_raw>
 80116de:	2203      	movs	r2, #3
 80116e0:	f88d 205c 	strb.w	r2, [sp, #92]	@ 0x5c
 80116e4:	9a9e      	ldr	r2, [sp, #632]	@ 0x278
 80116e6:	9206      	str	r2, [sp, #24]
 80116e8:	9a9f      	ldr	r2, [sp, #636]	@ 0x27c
 80116ea:	9207      	str	r2, [sp, #28]
 80116ec:	9aa0      	ldr	r2, [sp, #640]	@ 0x280
 80116ee:	9208      	str	r2, [sp, #32]
 80116f0:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 80116f2:	920c      	str	r2, [sp, #48]	@ 0x30
 80116f4:	9aa1      	ldr	r2, [sp, #644]	@ 0x284
 80116f6:	920a      	str	r2, [sp, #40]	@ 0x28
 80116f8:	2301      	movs	r3, #1
 80116fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80116fe:	a919      	add	r1, sp, #100	@ 0x64
 8011700:	a80d      	add	r0, sp, #52	@ 0x34
 8011702:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 8011706:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 801170a:	f7ff fd35 	bl	8011178 <ucdr_init_buffer>
 801170e:	a906      	add	r1, sp, #24
 8011710:	a80d      	add	r0, sp, #52	@ 0x34
 8011712:	f002 f83b 	bl	801378c <uxr_serialize_OBJK_Replier_Binary>
 8011716:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8011718:	9318      	str	r3, [sp, #96]	@ 0x60
 801171a:	ac15      	add	r4, sp, #84	@ 0x54
 801171c:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8011720:	9600      	str	r6, [sp, #0]
 8011722:	9401      	str	r4, [sp, #4]
 8011724:	b29b      	uxth	r3, r3
 8011726:	4628      	mov	r0, r5
 8011728:	f7ff fe10 	bl	801134c <uxr_common_create_entity>
 801172c:	f50d 7d1a 	add.w	sp, sp, #616	@ 0x268
 8011730:	bd70      	pop	{r4, r5, r6, pc}
 8011732:	bf00      	nop

08011734 <uxr_object_id>:
 8011734:	b082      	sub	sp, #8
 8011736:	2300      	movs	r3, #0
 8011738:	f88d 1006 	strb.w	r1, [sp, #6]
 801173c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8011740:	f360 030f 	bfi	r3, r0, #0, #16
 8011744:	f362 431f 	bfi	r3, r2, #16, #16
 8011748:	4618      	mov	r0, r3
 801174a:	b002      	add	sp, #8
 801174c:	4770      	bx	lr
 801174e:	bf00      	nop

08011750 <uxr_object_id_from_raw>:
 8011750:	7843      	ldrb	r3, [r0, #1]
 8011752:	7801      	ldrb	r1, [r0, #0]
 8011754:	b082      	sub	sp, #8
 8011756:	f003 020f 	and.w	r2, r3, #15
 801175a:	f88d 2006 	strb.w	r2, [sp, #6]
 801175e:	091b      	lsrs	r3, r3, #4
 8011760:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8011764:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8011768:	2000      	movs	r0, #0
 801176a:	f363 000f 	bfi	r0, r3, #0, #16
 801176e:	f362 401f 	bfi	r0, r2, #16, #16
 8011772:	b002      	add	sp, #8
 8011774:	4770      	bx	lr
 8011776:	bf00      	nop

08011778 <uxr_object_id_to_raw>:
 8011778:	f3c0 4303 	ubfx	r3, r0, #16, #4
 801177c:	b082      	sub	sp, #8
 801177e:	f3c0 120b 	ubfx	r2, r0, #4, #12
 8011782:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 8011786:	700a      	strb	r2, [r1, #0]
 8011788:	704b      	strb	r3, [r1, #1]
 801178a:	b002      	add	sp, #8
 801178c:	4770      	bx	lr
 801178e:	bf00      	nop

08011790 <on_get_fragmentation_info>:
 8011790:	b500      	push	{lr}
 8011792:	b08b      	sub	sp, #44	@ 0x2c
 8011794:	4601      	mov	r1, r0
 8011796:	2204      	movs	r2, #4
 8011798:	a802      	add	r0, sp, #8
 801179a:	f7ff fced 	bl	8011178 <ucdr_init_buffer>
 801179e:	f10d 0305 	add.w	r3, sp, #5
 80117a2:	f10d 0206 	add.w	r2, sp, #6
 80117a6:	a901      	add	r1, sp, #4
 80117a8:	a802      	add	r0, sp, #8
 80117aa:	f001 f983 	bl	8012ab4 <uxr_read_submessage_header>
 80117ae:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80117b2:	2b0d      	cmp	r3, #13
 80117b4:	d003      	beq.n	80117be <on_get_fragmentation_info+0x2e>
 80117b6:	2000      	movs	r0, #0
 80117b8:	b00b      	add	sp, #44	@ 0x2c
 80117ba:	f85d fb04 	ldr.w	pc, [sp], #4
 80117be:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80117c2:	f013 0f02 	tst.w	r3, #2
 80117c6:	bf0c      	ite	eq
 80117c8:	2001      	moveq	r0, #1
 80117ca:	2002      	movne	r0, #2
 80117cc:	b00b      	add	sp, #44	@ 0x2c
 80117ce:	f85d fb04 	ldr.w	pc, [sp], #4
 80117d2:	bf00      	nop

080117d4 <read_submessage_get_info>:
 80117d4:	b570      	push	{r4, r5, r6, lr}
 80117d6:	2500      	movs	r5, #0
 80117d8:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 80117dc:	4604      	mov	r4, r0
 80117de:	f44f 7224 	mov.w	r2, #656	@ 0x290
 80117e2:	460e      	mov	r6, r1
 80117e4:	a810      	add	r0, sp, #64	@ 0x40
 80117e6:	4629      	mov	r1, r5
 80117e8:	e9cd 5503 	strd	r5, r5, [sp, #12]
 80117ec:	f00b fe20 	bl	801d430 <memset>
 80117f0:	a903      	add	r1, sp, #12
 80117f2:	4630      	mov	r0, r6
 80117f4:	f002 fa28 	bl	8013c48 <uxr_deserialize_GET_INFO_Payload>
 80117f8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80117fc:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8011800:	4620      	mov	r0, r4
 8011802:	f000 ffeb 	bl	80127dc <uxr_session_header_offset>
 8011806:	462b      	mov	r3, r5
 8011808:	9000      	str	r0, [sp, #0]
 801180a:	220c      	movs	r2, #12
 801180c:	a905      	add	r1, sp, #20
 801180e:	a808      	add	r0, sp, #32
 8011810:	f7ff fca0 	bl	8011154 <ucdr_init_buffer_origin_offset>
 8011814:	a910      	add	r1, sp, #64	@ 0x40
 8011816:	a808      	add	r0, sp, #32
 8011818:	f002 fa88 	bl	8013d2c <uxr_serialize_INFO_Payload>
 801181c:	9b08      	ldr	r3, [sp, #32]
 801181e:	462a      	mov	r2, r5
 8011820:	4629      	mov	r1, r5
 8011822:	4620      	mov	r0, r4
 8011824:	f000 ff86 	bl	8012734 <uxr_stamp_session_header>
 8011828:	a808      	add	r0, sp, #32
 801182a:	f7ff fcd1 	bl	80111d0 <ucdr_buffer_length>
 801182e:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8011830:	4602      	mov	r2, r0
 8011832:	a905      	add	r1, sp, #20
 8011834:	e9d3 0400 	ldrd	r0, r4, [r3]
 8011838:	47a0      	blx	r4
 801183a:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 801183e:	bd70      	pop	{r4, r5, r6, pc}

08011840 <write_submessage_acknack.isra.0>:
 8011840:	b570      	push	{r4, r5, r6, lr}
 8011842:	b092      	sub	sp, #72	@ 0x48
 8011844:	4605      	mov	r5, r0
 8011846:	460e      	mov	r6, r1
 8011848:	4614      	mov	r4, r2
 801184a:	f000 ffc7 	bl	80127dc <uxr_session_header_offset>
 801184e:	a905      	add	r1, sp, #20
 8011850:	9000      	str	r0, [sp, #0]
 8011852:	2300      	movs	r3, #0
 8011854:	a80a      	add	r0, sp, #40	@ 0x28
 8011856:	2211      	movs	r2, #17
 8011858:	f7ff fc7c 	bl	8011154 <ucdr_init_buffer_origin_offset>
 801185c:	2318      	movs	r3, #24
 801185e:	fb03 5404 	mla	r4, r3, r4, r5
 8011862:	2205      	movs	r2, #5
 8011864:	2300      	movs	r3, #0
 8011866:	3450      	adds	r4, #80	@ 0x50
 8011868:	210a      	movs	r1, #10
 801186a:	a80a      	add	r0, sp, #40	@ 0x28
 801186c:	f001 f908 	bl	8012a80 <uxr_buffer_submessage_header>
 8011870:	a903      	add	r1, sp, #12
 8011872:	4620      	mov	r0, r4
 8011874:	f008 fdb6 	bl	801a3e4 <uxr_compute_acknack>
 8011878:	ba40      	rev16	r0, r0
 801187a:	f8ad 000e 	strh.w	r0, [sp, #14]
 801187e:	a903      	add	r1, sp, #12
 8011880:	a80a      	add	r0, sp, #40	@ 0x28
 8011882:	f88d 6010 	strb.w	r6, [sp, #16]
 8011886:	f002 fac1 	bl	8013e0c <uxr_serialize_ACKNACK_Payload>
 801188a:	2200      	movs	r2, #0
 801188c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801188e:	4611      	mov	r1, r2
 8011890:	4628      	mov	r0, r5
 8011892:	f000 ff4f 	bl	8012734 <uxr_stamp_session_header>
 8011896:	a80a      	add	r0, sp, #40	@ 0x28
 8011898:	f7ff fc9a 	bl	80111d0 <ucdr_buffer_length>
 801189c:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 801189e:	4602      	mov	r2, r0
 80118a0:	a905      	add	r1, sp, #20
 80118a2:	e9d3 0400 	ldrd	r0, r4, [r3]
 80118a6:	47a0      	blx	r4
 80118a8:	b012      	add	sp, #72	@ 0x48
 80118aa:	bd70      	pop	{r4, r5, r6, pc}
 80118ac:	0000      	movs	r0, r0
	...

080118b0 <uxr_init_session>:
 80118b0:	b510      	push	{r4, lr}
 80118b2:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 80118e8 <uxr_init_session+0x38>
 80118b6:	2300      	movs	r3, #0
 80118b8:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 80118bc:	4604      	mov	r4, r0
 80118be:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 80118c2:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 80118c6:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 80118ca:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 80118ce:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 80118d2:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 80118d6:	2181      	movs	r1, #129	@ 0x81
 80118d8:	f000 fe90 	bl	80125fc <uxr_init_session_info>
 80118dc:	f104 0008 	add.w	r0, r4, #8
 80118e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80118e4:	f000 bfe8 	b.w	80128b8 <uxr_init_stream_storage>
	...

080118f0 <uxr_set_status_callback>:
 80118f0:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 80118f4:	4770      	bx	lr
 80118f6:	bf00      	nop

080118f8 <uxr_set_topic_callback>:
 80118f8:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 80118fc:	4770      	bx	lr
 80118fe:	bf00      	nop

08011900 <uxr_set_request_callback>:
 8011900:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 8011904:	4770      	bx	lr
 8011906:	bf00      	nop

08011908 <uxr_set_reply_callback>:
 8011908:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 801190c:	4770      	bx	lr
 801190e:	bf00      	nop

08011910 <uxr_create_output_best_effort_stream>:
 8011910:	b570      	push	{r4, r5, r6, lr}
 8011912:	b082      	sub	sp, #8
 8011914:	4604      	mov	r4, r0
 8011916:	460d      	mov	r5, r1
 8011918:	4616      	mov	r6, r2
 801191a:	f000 ff5f 	bl	80127dc <uxr_session_header_offset>
 801191e:	4632      	mov	r2, r6
 8011920:	4603      	mov	r3, r0
 8011922:	4629      	mov	r1, r5
 8011924:	f104 0008 	add.w	r0, r4, #8
 8011928:	b002      	add	sp, #8
 801192a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801192e:	f001 b80d 	b.w	801294c <uxr_add_output_best_effort_buffer>
 8011932:	bf00      	nop

08011934 <uxr_create_output_reliable_stream>:
 8011934:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011936:	b085      	sub	sp, #20
 8011938:	4604      	mov	r4, r0
 801193a:	460d      	mov	r5, r1
 801193c:	4616      	mov	r6, r2
 801193e:	461f      	mov	r7, r3
 8011940:	f000 ff4c 	bl	80127dc <uxr_session_header_offset>
 8011944:	463b      	mov	r3, r7
 8011946:	9000      	str	r0, [sp, #0]
 8011948:	4632      	mov	r2, r6
 801194a:	4629      	mov	r1, r5
 801194c:	f104 0008 	add.w	r0, r4, #8
 8011950:	f001 f810 	bl	8012974 <uxr_add_output_reliable_buffer>
 8011954:	b005      	add	sp, #20
 8011956:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011958 <uxr_create_input_best_effort_stream>:
 8011958:	b082      	sub	sp, #8
 801195a:	3008      	adds	r0, #8
 801195c:	b002      	add	sp, #8
 801195e:	f001 b823 	b.w	80129a8 <uxr_add_input_best_effort_buffer>
 8011962:	bf00      	nop

08011964 <uxr_create_input_reliable_stream>:
 8011964:	b510      	push	{r4, lr}
 8011966:	b084      	sub	sp, #16
 8011968:	4c03      	ldr	r4, [pc, #12]	@ (8011978 <uxr_create_input_reliable_stream+0x14>)
 801196a:	9400      	str	r4, [sp, #0]
 801196c:	3008      	adds	r0, #8
 801196e:	f001 f831 	bl	80129d4 <uxr_add_input_reliable_buffer>
 8011972:	b004      	add	sp, #16
 8011974:	bd10      	pop	{r4, pc}
 8011976:	bf00      	nop
 8011978:	08011791 	.word	0x08011791

0801197c <uxr_epoch_nanos>:
 801197c:	b510      	push	{r4, lr}
 801197e:	4604      	mov	r4, r0
 8011980:	f001 f8de 	bl	8012b40 <uxr_nanos>
 8011984:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 8011988:	1ac0      	subs	r0, r0, r3
 801198a:	eb61 0102 	sbc.w	r1, r1, r2
 801198e:	bd10      	pop	{r4, pc}

08011990 <uxr_flash_output_streams>:
 8011990:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011994:	7e03      	ldrb	r3, [r0, #24]
 8011996:	b084      	sub	sp, #16
 8011998:	4604      	mov	r4, r0
 801199a:	b373      	cbz	r3, 80119fa <uxr_flash_output_streams+0x6a>
 801199c:	2500      	movs	r5, #0
 801199e:	f100 0908 	add.w	r9, r0, #8
 80119a2:	f10d 0802 	add.w	r8, sp, #2
 80119a6:	4628      	mov	r0, r5
 80119a8:	af03      	add	r7, sp, #12
 80119aa:	ae02      	add	r6, sp, #8
 80119ac:	e006      	b.n	80119bc <uxr_flash_output_streams+0x2c>
 80119ae:	7e23      	ldrb	r3, [r4, #24]
 80119b0:	3501      	adds	r5, #1
 80119b2:	b2e8      	uxtb	r0, r5
 80119b4:	4283      	cmp	r3, r0
 80119b6:	f109 0910 	add.w	r9, r9, #16
 80119ba:	d91e      	bls.n	80119fa <uxr_flash_output_streams+0x6a>
 80119bc:	2201      	movs	r2, #1
 80119be:	4611      	mov	r1, r2
 80119c0:	f000 ff42 	bl	8012848 <uxr_stream_id>
 80119c4:	4643      	mov	r3, r8
 80119c6:	4684      	mov	ip, r0
 80119c8:	463a      	mov	r2, r7
 80119ca:	4631      	mov	r1, r6
 80119cc:	4648      	mov	r0, r9
 80119ce:	f8cd c004 	str.w	ip, [sp, #4]
 80119d2:	f008 fd8b 	bl	801a4ec <uxr_prepare_best_effort_buffer_to_send>
 80119d6:	2800      	cmp	r0, #0
 80119d8:	d0e9      	beq.n	80119ae <uxr_flash_output_streams+0x1e>
 80119da:	9b02      	ldr	r3, [sp, #8]
 80119dc:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80119e0:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80119e4:	4620      	mov	r0, r4
 80119e6:	f000 fea5 	bl	8012734 <uxr_stamp_session_header>
 80119ea:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80119ec:	9a03      	ldr	r2, [sp, #12]
 80119ee:	f8d3 a004 	ldr.w	sl, [r3, #4]
 80119f2:	9902      	ldr	r1, [sp, #8]
 80119f4:	6818      	ldr	r0, [r3, #0]
 80119f6:	47d0      	blx	sl
 80119f8:	e7d9      	b.n	80119ae <uxr_flash_output_streams+0x1e>
 80119fa:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 80119fe:	b37b      	cbz	r3, 8011a60 <uxr_flash_output_streams+0xd0>
 8011a00:	f04f 0900 	mov.w	r9, #0
 8011a04:	f104 0520 	add.w	r5, r4, #32
 8011a08:	f10d 0802 	add.w	r8, sp, #2
 8011a0c:	af03      	add	r7, sp, #12
 8011a0e:	ae02      	add	r6, sp, #8
 8011a10:	4648      	mov	r0, r9
 8011a12:	2201      	movs	r2, #1
 8011a14:	2102      	movs	r1, #2
 8011a16:	f000 ff17 	bl	8012848 <uxr_stream_id>
 8011a1a:	9001      	str	r0, [sp, #4]
 8011a1c:	e00e      	b.n	8011a3c <uxr_flash_output_streams+0xac>
 8011a1e:	9b02      	ldr	r3, [sp, #8]
 8011a20:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8011a24:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8011a28:	4620      	mov	r0, r4
 8011a2a:	f000 fe83 	bl	8012734 <uxr_stamp_session_header>
 8011a2e:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8011a30:	9a03      	ldr	r2, [sp, #12]
 8011a32:	f8d3 a004 	ldr.w	sl, [r3, #4]
 8011a36:	9902      	ldr	r1, [sp, #8]
 8011a38:	6818      	ldr	r0, [r3, #0]
 8011a3a:	47d0      	blx	sl
 8011a3c:	4643      	mov	r3, r8
 8011a3e:	463a      	mov	r2, r7
 8011a40:	4631      	mov	r1, r6
 8011a42:	4628      	mov	r0, r5
 8011a44:	f008 ff66 	bl	801a914 <uxr_prepare_next_reliable_buffer_to_send>
 8011a48:	2800      	cmp	r0, #0
 8011a4a:	d1e8      	bne.n	8011a1e <uxr_flash_output_streams+0x8e>
 8011a4c:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8011a50:	f109 0901 	add.w	r9, r9, #1
 8011a54:	fa5f f089 	uxtb.w	r0, r9
 8011a58:	4283      	cmp	r3, r0
 8011a5a:	f105 0528 	add.w	r5, r5, #40	@ 0x28
 8011a5e:	d8d8      	bhi.n	8011a12 <uxr_flash_output_streams+0x82>
 8011a60:	b004      	add	sp, #16
 8011a62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011a66:	bf00      	nop

08011a68 <read_submessage_info>:
 8011a68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a6c:	460d      	mov	r5, r1
 8011a6e:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 8011a72:	4669      	mov	r1, sp
 8011a74:	4607      	mov	r7, r0
 8011a76:	4628      	mov	r0, r5
 8011a78:	f001 fff6 	bl	8013a68 <uxr_deserialize_BaseObjectReply>
 8011a7c:	a902      	add	r1, sp, #8
 8011a7e:	4604      	mov	r4, r0
 8011a80:	4628      	mov	r0, r5
 8011a82:	f89d 8005 	ldrb.w	r8, [sp, #5]
 8011a86:	f7fd fdfb 	bl	800f680 <ucdr_deserialize_bool>
 8011a8a:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8011a8e:	4004      	ands	r4, r0
 8011a90:	b2e4      	uxtb	r4, r4
 8011a92:	b95b      	cbnz	r3, 8011aac <read_submessage_info+0x44>
 8011a94:	a987      	add	r1, sp, #540	@ 0x21c
 8011a96:	4628      	mov	r0, r5
 8011a98:	f7fd fdf2 	bl	800f680 <ucdr_deserialize_bool>
 8011a9c:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 8011aa0:	4606      	mov	r6, r0
 8011aa2:	b94b      	cbnz	r3, 8011ab8 <read_submessage_info+0x50>
 8011aa4:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 8011aa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011aac:	a903      	add	r1, sp, #12
 8011aae:	4628      	mov	r0, r5
 8011ab0:	f001 fe9c 	bl	80137ec <uxr_deserialize_ObjectVariant>
 8011ab4:	4004      	ands	r4, r0
 8011ab6:	e7ed      	b.n	8011a94 <read_submessage_info+0x2c>
 8011ab8:	a988      	add	r1, sp, #544	@ 0x220
 8011aba:	4628      	mov	r0, r5
 8011abc:	f7fd fe0e 	bl	800f6dc <ucdr_deserialize_uint8_t>
 8011ac0:	4234      	tst	r4, r6
 8011ac2:	d0ef      	beq.n	8011aa4 <read_submessage_info+0x3c>
 8011ac4:	2800      	cmp	r0, #0
 8011ac6:	d0ed      	beq.n	8011aa4 <read_submessage_info+0x3c>
 8011ac8:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 8011acc:	2b0d      	cmp	r3, #13
 8011ace:	d1e9      	bne.n	8011aa4 <read_submessage_info+0x3c>
 8011ad0:	a98a      	add	r1, sp, #552	@ 0x228
 8011ad2:	4628      	mov	r0, r5
 8011ad4:	f7fe fb9e 	bl	8010214 <ucdr_deserialize_int16_t>
 8011ad8:	b140      	cbz	r0, 8011aec <read_submessage_info+0x84>
 8011ada:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 8011ade:	2b00      	cmp	r3, #0
 8011ae0:	dd07      	ble.n	8011af2 <read_submessage_info+0x8a>
 8011ae2:	f1b8 0f00 	cmp.w	r8, #0
 8011ae6:	bf0c      	ite	eq
 8011ae8:	2002      	moveq	r0, #2
 8011aea:	2001      	movne	r0, #1
 8011aec:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 8011af0:	e7d8      	b.n	8011aa4 <read_submessage_info+0x3c>
 8011af2:	2000      	movs	r0, #0
 8011af4:	e7fa      	b.n	8011aec <read_submessage_info+0x84>
 8011af6:	bf00      	nop

08011af8 <read_submessage_list>:
 8011af8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011afc:	b097      	sub	sp, #92	@ 0x5c
 8011afe:	4604      	mov	r4, r0
 8011b00:	460d      	mov	r5, r1
 8011b02:	9209      	str	r2, [sp, #36]	@ 0x24
 8011b04:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 8011b08:	aa0c      	add	r2, sp, #48	@ 0x30
 8011b0a:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 8011b0e:	4628      	mov	r0, r5
 8011b10:	f000 ffd0 	bl	8012ab4 <uxr_read_submessage_header>
 8011b14:	2800      	cmp	r0, #0
 8011b16:	f000 812c 	beq.w	8011d72 <read_submessage_list+0x27a>
 8011b1a:	f89d 102e 	ldrb.w	r1, [sp, #46]	@ 0x2e
 8011b1e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011b20:	f8bd 6030 	ldrh.w	r6, [sp, #48]	@ 0x30
 8011b24:	f89d 702f 	ldrb.w	r7, [sp, #47]	@ 0x2f
 8011b28:	3902      	subs	r1, #2
 8011b2a:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8011b2e:	290d      	cmp	r1, #13
 8011b30:	d8e8      	bhi.n	8011b04 <read_submessage_list+0xc>
 8011b32:	a201      	add	r2, pc, #4	@ (adr r2, 8011b38 <read_submessage_list+0x40>)
 8011b34:	f852 f021 	ldr.w	pc, [r2, r1, lsl #2]
 8011b38:	08011d69 	.word	0x08011d69
 8011b3c:	08011b05 	.word	0x08011b05
 8011b40:	08011d59 	.word	0x08011d59
 8011b44:	08011cfb 	.word	0x08011cfb
 8011b48:	08011cf1 	.word	0x08011cf1
 8011b4c:	08011b05 	.word	0x08011b05
 8011b50:	08011b05 	.word	0x08011b05
 8011b54:	08011c75 	.word	0x08011c75
 8011b58:	08011c0d 	.word	0x08011c0d
 8011b5c:	08011bcd 	.word	0x08011bcd
 8011b60:	08011b05 	.word	0x08011b05
 8011b64:	08011b05 	.word	0x08011b05
 8011b68:	08011b05 	.word	0x08011b05
 8011b6c:	08011b71 	.word	0x08011b71
 8011b70:	a910      	add	r1, sp, #64	@ 0x40
 8011b72:	4628      	mov	r0, r5
 8011b74:	f002 f99a 	bl	8013eac <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 8011b78:	f8d4 6090 	ldr.w	r6, [r4, #144]	@ 0x90
 8011b7c:	2e00      	cmp	r6, #0
 8011b7e:	f000 8100 	beq.w	8011d82 <read_submessage_list+0x28a>
 8011b82:	f000 ffdd 	bl	8012b40 <uxr_nanos>
 8011b86:	f04f 0800 	mov.w	r8, #0
 8011b8a:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 8011b8c:	4602      	mov	r2, r0
 8011b8e:	460b      	mov	r3, r1
 8011b90:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8011b92:	4990      	ldr	r1, [pc, #576]	@ (8011dd4 <read_submessage_list+0x2dc>)
 8011b94:	46c4      	mov	ip, r8
 8011b96:	fbc0 7c01 	smlal	r7, ip, r0, r1
 8011b9a:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 8011b9e:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8011ba0:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 8011ba2:	46c6      	mov	lr, r8
 8011ba4:	fbc0 7e01 	smlal	r7, lr, r0, r1
 8011ba8:	46bc      	mov	ip, r7
 8011baa:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	@ 0x48
 8011bae:	fbc0 7801 	smlal	r7, r8, r0, r1
 8011bb2:	e9cd ce02 	strd	ip, lr, [sp, #8]
 8011bb6:	e9cd 7800 	strd	r7, r8, [sp]
 8011bba:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 8011bbe:	9106      	str	r1, [sp, #24]
 8011bc0:	4620      	mov	r0, r4
 8011bc2:	47b0      	blx	r6
 8011bc4:	2301      	movs	r3, #1
 8011bc6:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 8011bca:	e79b      	b.n	8011b04 <read_submessage_list+0xc>
 8011bcc:	a910      	add	r1, sp, #64	@ 0x40
 8011bce:	4628      	mov	r0, r5
 8011bd0:	f002 f95a 	bl	8013e88 <uxr_deserialize_HEARTBEAT_Payload>
 8011bd4:	2100      	movs	r1, #0
 8011bd6:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8011bda:	f000 fe51 	bl	8012880 <uxr_stream_id_from_raw>
 8011bde:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8011be2:	900f      	str	r0, [sp, #60]	@ 0x3c
 8011be4:	4631      	mov	r1, r6
 8011be6:	f104 0008 	add.w	r0, r4, #8
 8011bea:	f000 ff29 	bl	8012a40 <uxr_get_input_reliable_stream>
 8011bee:	2800      	cmp	r0, #0
 8011bf0:	d088      	beq.n	8011b04 <read_submessage_list+0xc>
 8011bf2:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 8011bf6:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 8011bfa:	f008 fbe7 	bl	801a3cc <uxr_process_heartbeat>
 8011bfe:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 8011c02:	4632      	mov	r2, r6
 8011c04:	4620      	mov	r0, r4
 8011c06:	f7ff fe1b 	bl	8011840 <write_submessage_acknack.isra.0>
 8011c0a:	e77b      	b.n	8011b04 <read_submessage_list+0xc>
 8011c0c:	a910      	add	r1, sp, #64	@ 0x40
 8011c0e:	4628      	mov	r0, r5
 8011c10:	f002 f912 	bl	8013e38 <uxr_deserialize_ACKNACK_Payload>
 8011c14:	2100      	movs	r1, #0
 8011c16:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8011c1a:	f000 fe31 	bl	8012880 <uxr_stream_id_from_raw>
 8011c1e:	900d      	str	r0, [sp, #52]	@ 0x34
 8011c20:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8011c24:	f104 0008 	add.w	r0, r4, #8
 8011c28:	f000 fef6 	bl	8012a18 <uxr_get_output_reliable_stream>
 8011c2c:	4606      	mov	r6, r0
 8011c2e:	2800      	cmp	r0, #0
 8011c30:	f43f af68 	beq.w	8011b04 <read_submessage_list+0xc>
 8011c34:	f8bd 1042 	ldrh.w	r1, [sp, #66]	@ 0x42
 8011c38:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 8011c3c:	ba49      	rev16	r1, r1
 8011c3e:	b289      	uxth	r1, r1
 8011c40:	f008 ff12 	bl	801aa68 <uxr_process_acknack>
 8011c44:	4630      	mov	r0, r6
 8011c46:	f008 fed3 	bl	801a9f0 <uxr_begin_output_nack_buffer_it>
 8011c4a:	f10d 0838 	add.w	r8, sp, #56	@ 0x38
 8011c4e:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 8011c52:	e005      	b.n	8011c60 <read_submessage_list+0x168>
 8011c54:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8011c56:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8011c58:	685f      	ldr	r7, [r3, #4]
 8011c5a:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8011c5c:	6818      	ldr	r0, [r3, #0]
 8011c5e:	47b8      	blx	r7
 8011c60:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 8011c64:	aa0f      	add	r2, sp, #60	@ 0x3c
 8011c66:	4641      	mov	r1, r8
 8011c68:	4630      	mov	r0, r6
 8011c6a:	f008 fec3 	bl	801a9f4 <uxr_next_reliable_nack_buffer_to_send>
 8011c6e:	2800      	cmp	r0, #0
 8011c70:	d1f0      	bne.n	8011c54 <read_submessage_list+0x15c>
 8011c72:	e747      	b.n	8011b04 <read_submessage_list+0xc>
 8011c74:	f10d 0838 	add.w	r8, sp, #56	@ 0x38
 8011c78:	4641      	mov	r1, r8
 8011c7a:	900d      	str	r0, [sp, #52]	@ 0x34
 8011c7c:	4628      	mov	r0, r5
 8011c7e:	f001 fe55 	bl	801392c <uxr_deserialize_BaseObjectRequest>
 8011c82:	3e04      	subs	r6, #4
 8011c84:	4640      	mov	r0, r8
 8011c86:	a90f      	add	r1, sp, #60	@ 0x3c
 8011c88:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 8011c8c:	f000 fdcc 	bl	8012828 <uxr_parse_base_object_request>
 8011c90:	fa1f f886 	uxth.w	r8, r6
 8011c94:	f8d4 6080 	ldr.w	r6, [r4, #128]	@ 0x80
 8011c98:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8011c9a:	f8bd 9032 	ldrh.w	r9, [sp, #50]	@ 0x32
 8011c9e:	9110      	str	r1, [sp, #64]	@ 0x40
 8011ca0:	f007 070e 	and.w	r7, r7, #14
 8011ca4:	b136      	cbz	r6, 8011cb4 <read_submessage_list+0x1bc>
 8011ca6:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8011caa:	9300      	str	r3, [sp, #0]
 8011cac:	464a      	mov	r2, r9
 8011cae:	2300      	movs	r3, #0
 8011cb0:	4620      	mov	r0, r4
 8011cb2:	47b0      	blx	r6
 8011cb4:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 8011cb6:	b16b      	cbz	r3, 8011cd4 <read_submessage_list+0x1dc>
 8011cb8:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8011cba:	2100      	movs	r1, #0
 8011cbc:	3802      	subs	r0, #2
 8011cbe:	e002      	b.n	8011cc6 <read_submessage_list+0x1ce>
 8011cc0:	3101      	adds	r1, #1
 8011cc2:	428b      	cmp	r3, r1
 8011cc4:	d006      	beq.n	8011cd4 <read_submessage_list+0x1dc>
 8011cc6:	f830 6f02 	ldrh.w	r6, [r0, #2]!
 8011cca:	454e      	cmp	r6, r9
 8011ccc:	d1f8      	bne.n	8011cc0 <read_submessage_list+0x1c8>
 8011cce:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8011cd0:	2200      	movs	r2, #0
 8011cd2:	545a      	strb	r2, [r3, r1]
 8011cd4:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 8011cd8:	9102      	str	r1, [sp, #8]
 8011cda:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8011cdc:	9101      	str	r1, [sp, #4]
 8011cde:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8011ce0:	9100      	str	r1, [sp, #0]
 8011ce2:	463b      	mov	r3, r7
 8011ce4:	4642      	mov	r2, r8
 8011ce6:	4629      	mov	r1, r5
 8011ce8:	4620      	mov	r0, r4
 8011cea:	f008 ff75 	bl	801abd8 <read_submessage_format>
 8011cee:	e709      	b.n	8011b04 <read_submessage_list+0xc>
 8011cf0:	4629      	mov	r1, r5
 8011cf2:	4620      	mov	r0, r4
 8011cf4:	f7ff feb8 	bl	8011a68 <read_submessage_info>
 8011cf8:	e704      	b.n	8011b04 <read_submessage_list+0xc>
 8011cfa:	2b00      	cmp	r3, #0
 8011cfc:	d03c      	beq.n	8011d78 <read_submessage_list+0x280>
 8011cfe:	a910      	add	r1, sp, #64	@ 0x40
 8011d00:	4628      	mov	r0, r5
 8011d02:	f001 fff5 	bl	8013cf0 <uxr_deserialize_STATUS_Payload>
 8011d06:	a90e      	add	r1, sp, #56	@ 0x38
 8011d08:	a810      	add	r0, sp, #64	@ 0x40
 8011d0a:	aa0d      	add	r2, sp, #52	@ 0x34
 8011d0c:	f000 fd8c 	bl	8012828 <uxr_parse_base_object_request>
 8011d10:	f8d4 6080 	ldr.w	r6, [r4, #128]	@ 0x80
 8011d14:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8011d16:	f89d 8044 	ldrb.w	r8, [sp, #68]	@ 0x44
 8011d1a:	f8bd 7034 	ldrh.w	r7, [sp, #52]	@ 0x34
 8011d1e:	910f      	str	r1, [sp, #60]	@ 0x3c
 8011d20:	b136      	cbz	r6, 8011d30 <read_submessage_list+0x238>
 8011d22:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8011d26:	9300      	str	r3, [sp, #0]
 8011d28:	463a      	mov	r2, r7
 8011d2a:	4643      	mov	r3, r8
 8011d2c:	4620      	mov	r0, r4
 8011d2e:	47b0      	blx	r6
 8011d30:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8011d32:	2a00      	cmp	r2, #0
 8011d34:	f43f aee6 	beq.w	8011b04 <read_submessage_list+0xc>
 8011d38:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8011d3a:	2100      	movs	r1, #0
 8011d3c:	3802      	subs	r0, #2
 8011d3e:	e003      	b.n	8011d48 <read_submessage_list+0x250>
 8011d40:	3101      	adds	r1, #1
 8011d42:	4291      	cmp	r1, r2
 8011d44:	f43f aede 	beq.w	8011b04 <read_submessage_list+0xc>
 8011d48:	f830 6f02 	ldrh.w	r6, [r0, #2]!
 8011d4c:	42be      	cmp	r6, r7
 8011d4e:	d1f7      	bne.n	8011d40 <read_submessage_list+0x248>
 8011d50:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8011d52:	f803 8001 	strb.w	r8, [r3, r1]
 8011d56:	e6d5      	b.n	8011b04 <read_submessage_list+0xc>
 8011d58:	2b00      	cmp	r3, #0
 8011d5a:	f47f aed3 	bne.w	8011b04 <read_submessage_list+0xc>
 8011d5e:	4629      	mov	r1, r5
 8011d60:	4620      	mov	r0, r4
 8011d62:	f000 fca9 	bl	80126b8 <uxr_read_create_session_status>
 8011d66:	e6cd      	b.n	8011b04 <read_submessage_list+0xc>
 8011d68:	4629      	mov	r1, r5
 8011d6a:	4620      	mov	r0, r4
 8011d6c:	f7ff fd32 	bl	80117d4 <read_submessage_get_info>
 8011d70:	e6c8      	b.n	8011b04 <read_submessage_list+0xc>
 8011d72:	b017      	add	sp, #92	@ 0x5c
 8011d74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011d78:	4629      	mov	r1, r5
 8011d7a:	4620      	mov	r0, r4
 8011d7c:	f000 fcaa 	bl	80126d4 <uxr_read_delete_session_status>
 8011d80:	e6c0      	b.n	8011b04 <read_submessage_list+0xc>
 8011d82:	f000 fedd 	bl	8012b40 <uxr_nanos>
 8011d86:	e9dd 7214 	ldrd	r7, r2, [sp, #80]	@ 0x50
 8011d8a:	f8df c048 	ldr.w	ip, [pc, #72]	@ 8011dd4 <read_submessage_list+0x2dc>
 8011d8e:	4633      	mov	r3, r6
 8011d90:	fbc7 230c 	smlal	r2, r3, r7, ip
 8011d94:	1810      	adds	r0, r2, r0
 8011d96:	eb43 0301 	adc.w	r3, r3, r1
 8011d9a:	e9dd 1212 	ldrd	r1, r2, [sp, #72]	@ 0x48
 8011d9e:	46b6      	mov	lr, r6
 8011da0:	fbc1 2e0c 	smlal	r2, lr, r1, ip
 8011da4:	e9dd 1710 	ldrd	r1, r7, [sp, #64]	@ 0x40
 8011da8:	fbc1 760c 	smlal	r7, r6, r1, ip
 8011dac:	19d2      	adds	r2, r2, r7
 8011dae:	eb4e 0106 	adc.w	r1, lr, r6
 8011db2:	1a80      	subs	r0, r0, r2
 8011db4:	eb63 0301 	sbc.w	r3, r3, r1
 8011db8:	0fda      	lsrs	r2, r3, #31
 8011dba:	1812      	adds	r2, r2, r0
 8011dbc:	f143 0300 	adc.w	r3, r3, #0
 8011dc0:	0852      	lsrs	r2, r2, #1
 8011dc2:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 8011dc6:	105b      	asrs	r3, r3, #1
 8011dc8:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 8011dcc:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 8011dd0:	e6f8      	b.n	8011bc4 <read_submessage_list+0xcc>
 8011dd2:	bf00      	nop
 8011dd4:	3b9aca00 	.word	0x3b9aca00

08011dd8 <listen_message_reliably>:
 8011dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ddc:	f1b1 0b00 	subs.w	fp, r1, #0
 8011de0:	b09f      	sub	sp, #124	@ 0x7c
 8011de2:	4606      	mov	r6, r0
 8011de4:	bfb8      	it	lt
 8011de6:	f06f 4b00 	mvnlt.w	fp, #2147483648	@ 0x80000000
 8011dea:	f000 fe8f 	bl	8012b0c <uxr_millis>
 8011dee:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 8011df2:	9003      	str	r0, [sp, #12]
 8011df4:	9104      	str	r1, [sp, #16]
 8011df6:	f10d 0828 	add.w	r8, sp, #40	@ 0x28
 8011dfa:	f10d 0a24 	add.w	sl, sp, #36	@ 0x24
 8011dfe:	2b00      	cmp	r3, #0
 8011e00:	f000 80a4 	beq.w	8011f4c <listen_message_reliably+0x174>
 8011e04:	2500      	movs	r5, #0
 8011e06:	e9cd b806 	strd	fp, r8, [sp, #24]
 8011e0a:	f106 0420 	add.w	r4, r6, #32
 8011e0e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8011e12:	f06f 4900 	mvn.w	r9, #2147483648	@ 0x80000000
 8011e16:	4628      	mov	r0, r5
 8011e18:	e011      	b.n	8011e3e <listen_message_reliably+0x66>
 8011e1a:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8011e1e:	42ba      	cmp	r2, r7
 8011e20:	eb73 0109 	sbcs.w	r1, r3, r9
 8011e24:	bfb8      	it	lt
 8011e26:	4699      	movlt	r9, r3
 8011e28:	f105 0501 	add.w	r5, r5, #1
 8011e2c:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 8011e30:	b2e8      	uxtb	r0, r5
 8011e32:	bfb8      	it	lt
 8011e34:	4617      	movlt	r7, r2
 8011e36:	4283      	cmp	r3, r0
 8011e38:	f104 0428 	add.w	r4, r4, #40	@ 0x28
 8011e3c:	d94a      	bls.n	8011ed4 <listen_message_reliably+0xfc>
 8011e3e:	2201      	movs	r2, #1
 8011e40:	2102      	movs	r1, #2
 8011e42:	f000 fd01 	bl	8012848 <uxr_stream_id>
 8011e46:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 8011e4a:	4601      	mov	r1, r0
 8011e4c:	4620      	mov	r0, r4
 8011e4e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8011e50:	f008 fd9e 	bl	801a990 <uxr_update_output_stream_heartbeat_timestamp>
 8011e54:	2800      	cmp	r0, #0
 8011e56:	d0e0      	beq.n	8011e1a <listen_message_reliably+0x42>
 8011e58:	f89d 302c 	ldrb.w	r3, [sp, #44]	@ 0x2c
 8011e5c:	f89d b02d 	ldrb.w	fp, [sp, #45]	@ 0x2d
 8011e60:	9305      	str	r3, [sp, #20]
 8011e62:	4630      	mov	r0, r6
 8011e64:	f000 fcba 	bl	80127dc <uxr_session_header_offset>
 8011e68:	f10d 0858 	add.w	r8, sp, #88	@ 0x58
 8011e6c:	eb0b 0b8b 	add.w	fp, fp, fp, lsl #2
 8011e70:	9000      	str	r0, [sp, #0]
 8011e72:	a90e      	add	r1, sp, #56	@ 0x38
 8011e74:	4640      	mov	r0, r8
 8011e76:	eb06 0bcb 	add.w	fp, r6, fp, lsl #3
 8011e7a:	2300      	movs	r3, #0
 8011e7c:	2211      	movs	r2, #17
 8011e7e:	f7ff f969 	bl	8011154 <ucdr_init_buffer_origin_offset>
 8011e82:	2300      	movs	r3, #0
 8011e84:	2205      	movs	r2, #5
 8011e86:	210b      	movs	r1, #11
 8011e88:	4640      	mov	r0, r8
 8011e8a:	f000 fdf9 	bl	8012a80 <uxr_buffer_submessage_header>
 8011e8e:	f8bb 0032 	ldrh.w	r0, [fp, #50]	@ 0x32
 8011e92:	2101      	movs	r1, #1
 8011e94:	f008 ff74 	bl	801ad80 <uxr_seq_num_add>
 8011e98:	f8bb 3030 	ldrh.w	r3, [fp, #48]	@ 0x30
 8011e9c:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8011ea0:	4602      	mov	r2, r0
 8011ea2:	9b05      	ldr	r3, [sp, #20]
 8011ea4:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 8011ea8:	a90c      	add	r1, sp, #48	@ 0x30
 8011eaa:	4640      	mov	r0, r8
 8011eac:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 8011eb0:	f001 ffd6 	bl	8013e60 <uxr_serialize_HEARTBEAT_Payload>
 8011eb4:	2200      	movs	r2, #0
 8011eb6:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8011eb8:	4611      	mov	r1, r2
 8011eba:	4630      	mov	r0, r6
 8011ebc:	f000 fc3a 	bl	8012734 <uxr_stamp_session_header>
 8011ec0:	4640      	mov	r0, r8
 8011ec2:	f7ff f985 	bl	80111d0 <ucdr_buffer_length>
 8011ec6:	4602      	mov	r2, r0
 8011ec8:	6f30      	ldr	r0, [r6, #112]	@ 0x70
 8011eca:	a90e      	add	r1, sp, #56	@ 0x38
 8011ecc:	e9d0 0300 	ldrd	r0, r3, [r0]
 8011ed0:	4798      	blx	r3
 8011ed2:	e7a2      	b.n	8011e1a <listen_message_reliably+0x42>
 8011ed4:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8011ed8:	4599      	cmp	r9, r3
 8011eda:	bf08      	it	eq
 8011edc:	f1b7 3fff 	cmpeq.w	r7, #4294967295	@ 0xffffffff
 8011ee0:	e9dd b806 	ldrd	fp, r8, [sp, #24]
 8011ee4:	d032      	beq.n	8011f4c <listen_message_reliably+0x174>
 8011ee6:	9b03      	ldr	r3, [sp, #12]
 8011ee8:	1aff      	subs	r7, r7, r3
 8011eea:	2f00      	cmp	r7, #0
 8011eec:	bf08      	it	eq
 8011eee:	2701      	moveq	r7, #1
 8011ef0:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 8011ef2:	455f      	cmp	r7, fp
 8011ef4:	bfa8      	it	ge
 8011ef6:	465f      	movge	r7, fp
 8011ef8:	689c      	ldr	r4, [r3, #8]
 8011efa:	6818      	ldr	r0, [r3, #0]
 8011efc:	4642      	mov	r2, r8
 8011efe:	463b      	mov	r3, r7
 8011f00:	4651      	mov	r1, sl
 8011f02:	47a0      	blx	r4
 8011f04:	ebab 0b07 	sub.w	fp, fp, r7
 8011f08:	b958      	cbnz	r0, 8011f22 <listen_message_reliably+0x14a>
 8011f0a:	f1bb 0f00 	cmp.w	fp, #0
 8011f0e:	dd44      	ble.n	8011f9a <listen_message_reliably+0x1c2>
 8011f10:	f000 fdfc 	bl	8012b0c <uxr_millis>
 8011f14:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 8011f18:	2b00      	cmp	r3, #0
 8011f1a:	d03c      	beq.n	8011f96 <listen_message_reliably+0x1be>
 8011f1c:	e9cd 0103 	strd	r0, r1, [sp, #12]
 8011f20:	e770      	b.n	8011e04 <listen_message_reliably+0x2c>
 8011f22:	e9dd 1209 	ldrd	r1, r2, [sp, #36]	@ 0x24
 8011f26:	4604      	mov	r4, r0
 8011f28:	a80e      	add	r0, sp, #56	@ 0x38
 8011f2a:	f7ff f925 	bl	8011178 <ucdr_init_buffer>
 8011f2e:	2500      	movs	r5, #0
 8011f30:	f10d 0322 	add.w	r3, sp, #34	@ 0x22
 8011f34:	aa08      	add	r2, sp, #32
 8011f36:	a90e      	add	r1, sp, #56	@ 0x38
 8011f38:	4630      	mov	r0, r6
 8011f3a:	f88d 5020 	strb.w	r5, [sp, #32]
 8011f3e:	f000 fc0f 	bl	8012760 <uxr_read_session_header>
 8011f42:	b928      	cbnz	r0, 8011f50 <listen_message_reliably+0x178>
 8011f44:	4620      	mov	r0, r4
 8011f46:	b01f      	add	sp, #124	@ 0x7c
 8011f48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f4c:	465f      	mov	r7, fp
 8011f4e:	e7cc      	b.n	8011eea <listen_message_reliably+0x112>
 8011f50:	4629      	mov	r1, r5
 8011f52:	f89d 0020 	ldrb.w	r0, [sp, #32]
 8011f56:	f000 fc93 	bl	8012880 <uxr_stream_id_from_raw>
 8011f5a:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8011f5e:	2f01      	cmp	r7, #1
 8011f60:	e9cd 000b 	strd	r0, r0, [sp, #44]	@ 0x2c
 8011f64:	f8bd a022 	ldrh.w	sl, [sp, #34]	@ 0x22
 8011f68:	fa5f f880 	uxtb.w	r8, r0
 8011f6c:	f3c0 2507 	ubfx	r5, r0, #8, #8
 8011f70:	d050      	beq.n	8012014 <listen_message_reliably+0x23c>
 8011f72:	2f02      	cmp	r7, #2
 8011f74:	d016      	beq.n	8011fa4 <listen_message_reliably+0x1cc>
 8011f76:	2f00      	cmp	r7, #0
 8011f78:	d1e4      	bne.n	8011f44 <listen_message_reliably+0x16c>
 8011f7a:	4639      	mov	r1, r7
 8011f7c:	4638      	mov	r0, r7
 8011f7e:	f000 fc7f 	bl	8012880 <uxr_stream_id_from_raw>
 8011f82:	a90e      	add	r1, sp, #56	@ 0x38
 8011f84:	4602      	mov	r2, r0
 8011f86:	4630      	mov	r0, r6
 8011f88:	920c      	str	r2, [sp, #48]	@ 0x30
 8011f8a:	f7ff fdb5 	bl	8011af8 <read_submessage_list>
 8011f8e:	4620      	mov	r0, r4
 8011f90:	b01f      	add	sp, #124	@ 0x7c
 8011f92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f96:	465f      	mov	r7, fp
 8011f98:	e7aa      	b.n	8011ef0 <listen_message_reliably+0x118>
 8011f9a:	4604      	mov	r4, r0
 8011f9c:	4620      	mov	r0, r4
 8011f9e:	b01f      	add	sp, #124	@ 0x7c
 8011fa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011fa4:	4629      	mov	r1, r5
 8011fa6:	f106 0008 	add.w	r0, r6, #8
 8011faa:	f000 fd49 	bl	8012a40 <uxr_get_input_reliable_stream>
 8011fae:	4681      	mov	r9, r0
 8011fb0:	b338      	cbz	r0, 8012002 <listen_message_reliably+0x22a>
 8011fb2:	a80e      	add	r0, sp, #56	@ 0x38
 8011fb4:	f8dd b040 	ldr.w	fp, [sp, #64]	@ 0x40
 8011fb8:	f7ff f90e 	bl	80111d8 <ucdr_buffer_remaining>
 8011fbc:	4603      	mov	r3, r0
 8011fbe:	f10d 0021 	add.w	r0, sp, #33	@ 0x21
 8011fc2:	9000      	str	r0, [sp, #0]
 8011fc4:	465a      	mov	r2, fp
 8011fc6:	4651      	mov	r1, sl
 8011fc8:	4648      	mov	r0, r9
 8011fca:	f008 f90d 	bl	801a1e8 <uxr_receive_reliable_message>
 8011fce:	b1c0      	cbz	r0, 8012002 <listen_message_reliably+0x22a>
 8011fd0:	f89d 3021 	ldrb.w	r3, [sp, #33]	@ 0x21
 8011fd4:	b393      	cbz	r3, 801203c <listen_message_reliably+0x264>
 8011fd6:	af16      	add	r7, sp, #88	@ 0x58
 8011fd8:	f04f 0a02 	mov.w	sl, #2
 8011fdc:	e00a      	b.n	8011ff4 <listen_message_reliably+0x21c>
 8011fde:	f88d 8030 	strb.w	r8, [sp, #48]	@ 0x30
 8011fe2:	f88d 5031 	strb.w	r5, [sp, #49]	@ 0x31
 8011fe6:	f88d a032 	strb.w	sl, [sp, #50]	@ 0x32
 8011fea:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8011fec:	4639      	mov	r1, r7
 8011fee:	4630      	mov	r0, r6
 8011ff0:	f7ff fd82 	bl	8011af8 <read_submessage_list>
 8011ff4:	2204      	movs	r2, #4
 8011ff6:	4639      	mov	r1, r7
 8011ff8:	4648      	mov	r0, r9
 8011ffa:	f008 f96f 	bl	801a2dc <uxr_next_input_reliable_buffer_available>
 8011ffe:	2800      	cmp	r0, #0
 8012000:	d1ed      	bne.n	8011fde <listen_message_reliably+0x206>
 8012002:	4630      	mov	r0, r6
 8012004:	462a      	mov	r2, r5
 8012006:	4641      	mov	r1, r8
 8012008:	f7ff fc1a 	bl	8011840 <write_submessage_acknack.isra.0>
 801200c:	4620      	mov	r0, r4
 801200e:	b01f      	add	sp, #124	@ 0x7c
 8012010:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012014:	4629      	mov	r1, r5
 8012016:	f106 0008 	add.w	r0, r6, #8
 801201a:	f000 fd07 	bl	8012a2c <uxr_get_input_best_effort_stream>
 801201e:	2800      	cmp	r0, #0
 8012020:	d090      	beq.n	8011f44 <listen_message_reliably+0x16c>
 8012022:	4651      	mov	r1, sl
 8012024:	f008 f850 	bl	801a0c8 <uxr_receive_best_effort_message>
 8012028:	2800      	cmp	r0, #0
 801202a:	d08b      	beq.n	8011f44 <listen_message_reliably+0x16c>
 801202c:	f88d 7032 	strb.w	r7, [sp, #50]	@ 0x32
 8012030:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8012032:	a90e      	add	r1, sp, #56	@ 0x38
 8012034:	4630      	mov	r0, r6
 8012036:	f7ff fd5f 	bl	8011af8 <read_submessage_list>
 801203a:	e783      	b.n	8011f44 <listen_message_reliably+0x16c>
 801203c:	f88d 7032 	strb.w	r7, [sp, #50]	@ 0x32
 8012040:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8012042:	a90e      	add	r1, sp, #56	@ 0x38
 8012044:	4630      	mov	r0, r6
 8012046:	f7ff fd57 	bl	8011af8 <read_submessage_list>
 801204a:	e7c4      	b.n	8011fd6 <listen_message_reliably+0x1fe>

0801204c <uxr_run_session_timeout>:
 801204c:	b570      	push	{r4, r5, r6, lr}
 801204e:	4604      	mov	r4, r0
 8012050:	460d      	mov	r5, r1
 8012052:	f000 fd5b 	bl	8012b0c <uxr_millis>
 8012056:	4606      	mov	r6, r0
 8012058:	4620      	mov	r0, r4
 801205a:	f7ff fc99 	bl	8011990 <uxr_flash_output_streams>
 801205e:	4629      	mov	r1, r5
 8012060:	4620      	mov	r0, r4
 8012062:	f7ff feb9 	bl	8011dd8 <listen_message_reliably>
 8012066:	f000 fd51 	bl	8012b0c <uxr_millis>
 801206a:	1b81      	subs	r1, r0, r6
 801206c:	1a69      	subs	r1, r5, r1
 801206e:	2900      	cmp	r1, #0
 8012070:	dcf6      	bgt.n	8012060 <uxr_run_session_timeout+0x14>
 8012072:	f104 0008 	add.w	r0, r4, #8
 8012076:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801207a:	f000 bceb 	b.w	8012a54 <uxr_output_streams_confirmed>
 801207e:	bf00      	nop

08012080 <uxr_run_session_until_data>:
 8012080:	b570      	push	{r4, r5, r6, lr}
 8012082:	4604      	mov	r4, r0
 8012084:	460d      	mov	r5, r1
 8012086:	f000 fd41 	bl	8012b0c <uxr_millis>
 801208a:	4606      	mov	r6, r0
 801208c:	4620      	mov	r0, r4
 801208e:	f7ff fc7f 	bl	8011990 <uxr_flash_output_streams>
 8012092:	2300      	movs	r3, #0
 8012094:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 8012098:	4629      	mov	r1, r5
 801209a:	e005      	b.n	80120a8 <uxr_run_session_until_data+0x28>
 801209c:	f000 fd36 	bl	8012b0c <uxr_millis>
 80120a0:	1b81      	subs	r1, r0, r6
 80120a2:	1a69      	subs	r1, r5, r1
 80120a4:	2900      	cmp	r1, #0
 80120a6:	dd07      	ble.n	80120b8 <uxr_run_session_until_data+0x38>
 80120a8:	4620      	mov	r0, r4
 80120aa:	f7ff fe95 	bl	8011dd8 <listen_message_reliably>
 80120ae:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 80120b2:	2800      	cmp	r0, #0
 80120b4:	d0f2      	beq.n	801209c <uxr_run_session_until_data+0x1c>
 80120b6:	bd70      	pop	{r4, r5, r6, pc}
 80120b8:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 80120bc:	bd70      	pop	{r4, r5, r6, pc}
 80120be:	bf00      	nop

080120c0 <uxr_run_session_until_confirm_delivery>:
 80120c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80120c4:	4606      	mov	r6, r0
 80120c6:	460d      	mov	r5, r1
 80120c8:	f000 fd20 	bl	8012b0c <uxr_millis>
 80120cc:	4607      	mov	r7, r0
 80120ce:	4630      	mov	r0, r6
 80120d0:	f7ff fc5e 	bl	8011990 <uxr_flash_output_streams>
 80120d4:	2d00      	cmp	r5, #0
 80120d6:	db16      	blt.n	8012106 <uxr_run_session_until_confirm_delivery+0x46>
 80120d8:	462c      	mov	r4, r5
 80120da:	f106 0808 	add.w	r8, r6, #8
 80120de:	e008      	b.n	80120f2 <uxr_run_session_until_confirm_delivery+0x32>
 80120e0:	4621      	mov	r1, r4
 80120e2:	4630      	mov	r0, r6
 80120e4:	f7ff fe78 	bl	8011dd8 <listen_message_reliably>
 80120e8:	f000 fd10 	bl	8012b0c <uxr_millis>
 80120ec:	1bc1      	subs	r1, r0, r7
 80120ee:	1a6c      	subs	r4, r5, r1
 80120f0:	d404      	bmi.n	80120fc <uxr_run_session_until_confirm_delivery+0x3c>
 80120f2:	4640      	mov	r0, r8
 80120f4:	f000 fcae 	bl	8012a54 <uxr_output_streams_confirmed>
 80120f8:	2800      	cmp	r0, #0
 80120fa:	d0f1      	beq.n	80120e0 <uxr_run_session_until_confirm_delivery+0x20>
 80120fc:	4640      	mov	r0, r8
 80120fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012102:	f000 bca7 	b.w	8012a54 <uxr_output_streams_confirmed>
 8012106:	f106 0808 	add.w	r8, r6, #8
 801210a:	e7f7      	b.n	80120fc <uxr_run_session_until_confirm_delivery+0x3c>

0801210c <uxr_run_session_until_all_status>:
 801210c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012110:	9c08      	ldr	r4, [sp, #32]
 8012112:	4605      	mov	r5, r0
 8012114:	460f      	mov	r7, r1
 8012116:	4690      	mov	r8, r2
 8012118:	461e      	mov	r6, r3
 801211a:	f7ff fc39 	bl	8011990 <uxr_flash_output_streams>
 801211e:	b124      	cbz	r4, 801212a <uxr_run_session_until_all_status+0x1e>
 8012120:	4622      	mov	r2, r4
 8012122:	21ff      	movs	r1, #255	@ 0xff
 8012124:	4630      	mov	r0, r6
 8012126:	f00b f983 	bl	801d430 <memset>
 801212a:	e9c5 861d 	strd	r8, r6, [r5, #116]	@ 0x74
 801212e:	67ec      	str	r4, [r5, #124]	@ 0x7c
 8012130:	f000 fcec 	bl	8012b0c <uxr_millis>
 8012134:	4639      	mov	r1, r7
 8012136:	4681      	mov	r9, r0
 8012138:	4628      	mov	r0, r5
 801213a:	f7ff fe4d 	bl	8011dd8 <listen_message_reliably>
 801213e:	f000 fce5 	bl	8012b0c <uxr_millis>
 8012142:	eba0 0109 	sub.w	r1, r0, r9
 8012146:	1a79      	subs	r1, r7, r1
 8012148:	b36c      	cbz	r4, 80121a6 <uxr_run_session_until_all_status+0x9a>
 801214a:	1e70      	subs	r0, r6, #1
 801214c:	46c6      	mov	lr, r8
 801214e:	1902      	adds	r2, r0, r4
 8012150:	4684      	mov	ip, r0
 8012152:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 8012156:	2bff      	cmp	r3, #255	@ 0xff
 8012158:	d007      	beq.n	801216a <uxr_run_session_until_all_status+0x5e>
 801215a:	4594      	cmp	ip, r2
 801215c:	d00f      	beq.n	801217e <uxr_run_session_until_all_status+0x72>
 801215e:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 8012162:	2bff      	cmp	r3, #255	@ 0xff
 8012164:	f10e 0e02 	add.w	lr, lr, #2
 8012168:	d1f7      	bne.n	801215a <uxr_run_session_until_all_status+0x4e>
 801216a:	4594      	cmp	ip, r2
 801216c:	f8be 3000 	ldrh.w	r3, [lr]
 8012170:	d014      	beq.n	801219c <uxr_run_session_until_all_status+0x90>
 8012172:	f10e 0e02 	add.w	lr, lr, #2
 8012176:	2b00      	cmp	r3, #0
 8012178:	d0eb      	beq.n	8012152 <uxr_run_session_until_all_status+0x46>
 801217a:	2900      	cmp	r1, #0
 801217c:	dcdc      	bgt.n	8012138 <uxr_run_session_until_all_status+0x2c>
 801217e:	2300      	movs	r3, #0
 8012180:	67eb      	str	r3, [r5, #124]	@ 0x7c
 8012182:	e001      	b.n	8012188 <uxr_run_session_until_all_status+0x7c>
 8012184:	2b01      	cmp	r3, #1
 8012186:	d812      	bhi.n	80121ae <uxr_run_session_until_all_status+0xa2>
 8012188:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 801218c:	4290      	cmp	r0, r2
 801218e:	d1f9      	bne.n	8012184 <uxr_run_session_until_all_status+0x78>
 8012190:	2b01      	cmp	r3, #1
 8012192:	bf8c      	ite	hi
 8012194:	2000      	movhi	r0, #0
 8012196:	2001      	movls	r0, #1
 8012198:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801219c:	2900      	cmp	r1, #0
 801219e:	ddee      	ble.n	801217e <uxr_run_session_until_all_status+0x72>
 80121a0:	2b00      	cmp	r3, #0
 80121a2:	d1c9      	bne.n	8012138 <uxr_run_session_until_all_status+0x2c>
 80121a4:	e7eb      	b.n	801217e <uxr_run_session_until_all_status+0x72>
 80121a6:	67ec      	str	r4, [r5, #124]	@ 0x7c
 80121a8:	2001      	movs	r0, #1
 80121aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80121ae:	2000      	movs	r0, #0
 80121b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080121b4 <wait_session_status>:
 80121b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80121b8:	4604      	mov	r4, r0
 80121ba:	20ff      	movs	r0, #255	@ 0xff
 80121bc:	b09f      	sub	sp, #124	@ 0x7c
 80121be:	7160      	strb	r0, [r4, #5]
 80121c0:	2b00      	cmp	r3, #0
 80121c2:	f000 80bb 	beq.w	801233c <wait_session_status+0x188>
 80121c6:	4692      	mov	sl, r2
 80121c8:	469b      	mov	fp, r3
 80121ca:	f04f 0800 	mov.w	r8, #0
 80121ce:	9105      	str	r1, [sp, #20]
 80121d0:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80121d2:	9905      	ldr	r1, [sp, #20]
 80121d4:	e9d3 0500 	ldrd	r0, r5, [r3]
 80121d8:	4652      	mov	r2, sl
 80121da:	47a8      	blx	r5
 80121dc:	f000 fc96 	bl	8012b0c <uxr_millis>
 80121e0:	2700      	movs	r7, #0
 80121e2:	4605      	mov	r5, r0
 80121e4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80121e8:	e009      	b.n	80121fe <wait_session_status+0x4a>
 80121ea:	f000 fc8f 	bl	8012b0c <uxr_millis>
 80121ee:	1b43      	subs	r3, r0, r5
 80121f0:	f5c3 737a 	rsb	r3, r3, #1000	@ 0x3e8
 80121f4:	2b00      	cmp	r3, #0
 80121f6:	7962      	ldrb	r2, [r4, #5]
 80121f8:	dd3d      	ble.n	8012276 <wait_session_status+0xc2>
 80121fa:	2aff      	cmp	r2, #255	@ 0xff
 80121fc:	d13b      	bne.n	8012276 <wait_session_status+0xc2>
 80121fe:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8012200:	a90a      	add	r1, sp, #40	@ 0x28
 8012202:	6896      	ldr	r6, [r2, #8]
 8012204:	6810      	ldr	r0, [r2, #0]
 8012206:	aa0b      	add	r2, sp, #44	@ 0x2c
 8012208:	47b0      	blx	r6
 801220a:	2800      	cmp	r0, #0
 801220c:	d0ed      	beq.n	80121ea <wait_session_status+0x36>
 801220e:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	@ 0x28
 8012212:	a80e      	add	r0, sp, #56	@ 0x38
 8012214:	f7fe ffb0 	bl	8011178 <ucdr_init_buffer>
 8012218:	f10d 0326 	add.w	r3, sp, #38	@ 0x26
 801221c:	aa09      	add	r2, sp, #36	@ 0x24
 801221e:	a90e      	add	r1, sp, #56	@ 0x38
 8012220:	4620      	mov	r0, r4
 8012222:	f88d 7024 	strb.w	r7, [sp, #36]	@ 0x24
 8012226:	f000 fa9b 	bl	8012760 <uxr_read_session_header>
 801222a:	2800      	cmp	r0, #0
 801222c:	d0dd      	beq.n	80121ea <wait_session_status+0x36>
 801222e:	f89d 0024 	ldrb.w	r0, [sp, #36]	@ 0x24
 8012232:	2100      	movs	r1, #0
 8012234:	f000 fb24 	bl	8012880 <uxr_stream_id_from_raw>
 8012238:	f8bd 3026 	ldrh.w	r3, [sp, #38]	@ 0x26
 801223c:	9304      	str	r3, [sp, #16]
 801223e:	f3c0 4907 	ubfx	r9, r0, #16, #8
 8012242:	b2c3      	uxtb	r3, r0
 8012244:	f1b9 0f01 	cmp.w	r9, #1
 8012248:	e9cd 000c 	strd	r0, r0, [sp, #48]	@ 0x30
 801224c:	9303      	str	r3, [sp, #12]
 801224e:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8012252:	d05d      	beq.n	8012310 <wait_session_status+0x15c>
 8012254:	f1b9 0f02 	cmp.w	r9, #2
 8012258:	d01a      	beq.n	8012290 <wait_session_status+0xdc>
 801225a:	f1b9 0f00 	cmp.w	r9, #0
 801225e:	d1c4      	bne.n	80121ea <wait_session_status+0x36>
 8012260:	4649      	mov	r1, r9
 8012262:	4648      	mov	r0, r9
 8012264:	f000 fb0c 	bl	8012880 <uxr_stream_id_from_raw>
 8012268:	a90e      	add	r1, sp, #56	@ 0x38
 801226a:	4602      	mov	r2, r0
 801226c:	900d      	str	r0, [sp, #52]	@ 0x34
 801226e:	4620      	mov	r0, r4
 8012270:	f7ff fc42 	bl	8011af8 <read_submessage_list>
 8012274:	e7b9      	b.n	80121ea <wait_session_status+0x36>
 8012276:	f108 0801 	add.w	r8, r8, #1
 801227a:	45c3      	cmp	fp, r8
 801227c:	d001      	beq.n	8012282 <wait_session_status+0xce>
 801227e:	2aff      	cmp	r2, #255	@ 0xff
 8012280:	d0a6      	beq.n	80121d0 <wait_session_status+0x1c>
 8012282:	f1b2 00ff 	subs.w	r0, r2, #255	@ 0xff
 8012286:	bf18      	it	ne
 8012288:	2001      	movne	r0, #1
 801228a:	b01f      	add	sp, #124	@ 0x7c
 801228c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012290:	4631      	mov	r1, r6
 8012292:	f104 0008 	add.w	r0, r4, #8
 8012296:	f000 fbd3 	bl	8012a40 <uxr_get_input_reliable_stream>
 801229a:	9006      	str	r0, [sp, #24]
 801229c:	2800      	cmp	r0, #0
 801229e:	d031      	beq.n	8012304 <wait_session_status+0x150>
 80122a0:	aa0e      	add	r2, sp, #56	@ 0x38
 80122a2:	4610      	mov	r0, r2
 80122a4:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80122a6:	9207      	str	r2, [sp, #28]
 80122a8:	f7fe ff96 	bl	80111d8 <ucdr_buffer_remaining>
 80122ac:	4603      	mov	r3, r0
 80122ae:	f10d 0025 	add.w	r0, sp, #37	@ 0x25
 80122b2:	9000      	str	r0, [sp, #0]
 80122b4:	9a07      	ldr	r2, [sp, #28]
 80122b6:	9904      	ldr	r1, [sp, #16]
 80122b8:	9806      	ldr	r0, [sp, #24]
 80122ba:	f007 ff95 	bl	801a1e8 <uxr_receive_reliable_message>
 80122be:	b308      	cbz	r0, 8012304 <wait_session_status+0x150>
 80122c0:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 80122c4:	2b00      	cmp	r3, #0
 80122c6:	d041      	beq.n	801234c <wait_session_status+0x198>
 80122c8:	f8cd 8010 	str.w	r8, [sp, #16]
 80122cc:	9507      	str	r5, [sp, #28]
 80122ce:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80122d2:	9d06      	ldr	r5, [sp, #24]
 80122d4:	f04f 0902 	mov.w	r9, #2
 80122d8:	e00a      	b.n	80122f0 <wait_session_status+0x13c>
 80122da:	f88d 8034 	strb.w	r8, [sp, #52]	@ 0x34
 80122de:	f88d 6035 	strb.w	r6, [sp, #53]	@ 0x35
 80122e2:	f88d 9036 	strb.w	r9, [sp, #54]	@ 0x36
 80122e6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80122e8:	a916      	add	r1, sp, #88	@ 0x58
 80122ea:	4620      	mov	r0, r4
 80122ec:	f7ff fc04 	bl	8011af8 <read_submessage_list>
 80122f0:	2204      	movs	r2, #4
 80122f2:	a916      	add	r1, sp, #88	@ 0x58
 80122f4:	4628      	mov	r0, r5
 80122f6:	f007 fff1 	bl	801a2dc <uxr_next_input_reliable_buffer_available>
 80122fa:	2800      	cmp	r0, #0
 80122fc:	d1ed      	bne.n	80122da <wait_session_status+0x126>
 80122fe:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8012302:	9d07      	ldr	r5, [sp, #28]
 8012304:	9903      	ldr	r1, [sp, #12]
 8012306:	4632      	mov	r2, r6
 8012308:	4620      	mov	r0, r4
 801230a:	f7ff fa99 	bl	8011840 <write_submessage_acknack.isra.0>
 801230e:	e76c      	b.n	80121ea <wait_session_status+0x36>
 8012310:	4631      	mov	r1, r6
 8012312:	f104 0008 	add.w	r0, r4, #8
 8012316:	f000 fb89 	bl	8012a2c <uxr_get_input_best_effort_stream>
 801231a:	2800      	cmp	r0, #0
 801231c:	f43f af65 	beq.w	80121ea <wait_session_status+0x36>
 8012320:	9904      	ldr	r1, [sp, #16]
 8012322:	f007 fed1 	bl	801a0c8 <uxr_receive_best_effort_message>
 8012326:	2800      	cmp	r0, #0
 8012328:	f43f af5f 	beq.w	80121ea <wait_session_status+0x36>
 801232c:	f88d 9036 	strb.w	r9, [sp, #54]	@ 0x36
 8012330:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8012332:	a90e      	add	r1, sp, #56	@ 0x38
 8012334:	4620      	mov	r0, r4
 8012336:	f7ff fbdf 	bl	8011af8 <read_submessage_list>
 801233a:	e756      	b.n	80121ea <wait_session_status+0x36>
 801233c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801233e:	e9d3 0400 	ldrd	r0, r4, [r3]
 8012342:	47a0      	blx	r4
 8012344:	2001      	movs	r0, #1
 8012346:	b01f      	add	sp, #124	@ 0x7c
 8012348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801234c:	f88d 9036 	strb.w	r9, [sp, #54]	@ 0x36
 8012350:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8012352:	a90e      	add	r1, sp, #56	@ 0x38
 8012354:	4620      	mov	r0, r4
 8012356:	f7ff fbcf 	bl	8011af8 <read_submessage_list>
 801235a:	e7b5      	b.n	80122c8 <wait_session_status+0x114>

0801235c <uxr_delete_session_retries>:
 801235c:	b530      	push	{r4, r5, lr}
 801235e:	b08f      	sub	sp, #60	@ 0x3c
 8012360:	4604      	mov	r4, r0
 8012362:	460d      	mov	r5, r1
 8012364:	f000 fa3a 	bl	80127dc <uxr_session_header_offset>
 8012368:	2300      	movs	r3, #0
 801236a:	2210      	movs	r2, #16
 801236c:	9000      	str	r0, [sp, #0]
 801236e:	a902      	add	r1, sp, #8
 8012370:	a806      	add	r0, sp, #24
 8012372:	f7fe feef 	bl	8011154 <ucdr_init_buffer_origin_offset>
 8012376:	a906      	add	r1, sp, #24
 8012378:	4620      	mov	r0, r4
 801237a:	f000 f981 	bl	8012680 <uxr_buffer_delete_session>
 801237e:	2200      	movs	r2, #0
 8012380:	4611      	mov	r1, r2
 8012382:	9b06      	ldr	r3, [sp, #24]
 8012384:	4620      	mov	r0, r4
 8012386:	f000 f9d5 	bl	8012734 <uxr_stamp_session_header>
 801238a:	a806      	add	r0, sp, #24
 801238c:	f7fe ff20 	bl	80111d0 <ucdr_buffer_length>
 8012390:	462b      	mov	r3, r5
 8012392:	4602      	mov	r2, r0
 8012394:	a902      	add	r1, sp, #8
 8012396:	4620      	mov	r0, r4
 8012398:	f7ff ff0c 	bl	80121b4 <wait_session_status>
 801239c:	b118      	cbz	r0, 80123a6 <uxr_delete_session_retries+0x4a>
 801239e:	7960      	ldrb	r0, [r4, #5]
 80123a0:	fab0 f080 	clz	r0, r0
 80123a4:	0940      	lsrs	r0, r0, #5
 80123a6:	b00f      	add	sp, #60	@ 0x3c
 80123a8:	bd30      	pop	{r4, r5, pc}
 80123aa:	bf00      	nop

080123ac <uxr_create_session>:
 80123ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80123b0:	f100 0308 	add.w	r3, r0, #8
 80123b4:	b0ab      	sub	sp, #172	@ 0xac
 80123b6:	4604      	mov	r4, r0
 80123b8:	4618      	mov	r0, r3
 80123ba:	9303      	str	r3, [sp, #12]
 80123bc:	f000 fa86 	bl	80128cc <uxr_reset_stream_storage>
 80123c0:	4620      	mov	r0, r4
 80123c2:	f000 fa0b 	bl	80127dc <uxr_session_header_offset>
 80123c6:	2300      	movs	r3, #0
 80123c8:	9000      	str	r0, [sp, #0]
 80123ca:	221c      	movs	r2, #28
 80123cc:	a90b      	add	r1, sp, #44	@ 0x2c
 80123ce:	a812      	add	r0, sp, #72	@ 0x48
 80123d0:	f7fe fec0 	bl	8011154 <ucdr_init_buffer_origin_offset>
 80123d4:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80123d6:	8a1a      	ldrh	r2, [r3, #16]
 80123d8:	3a04      	subs	r2, #4
 80123da:	b292      	uxth	r2, r2
 80123dc:	a912      	add	r1, sp, #72	@ 0x48
 80123de:	4620      	mov	r0, r4
 80123e0:	f000 f924 	bl	801262c <uxr_buffer_create_session>
 80123e4:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80123e6:	4620      	mov	r0, r4
 80123e8:	f000 f990 	bl	801270c <uxr_stamp_create_session_header>
 80123ec:	a812      	add	r0, sp, #72	@ 0x48
 80123ee:	f7fe feef 	bl	80111d0 <ucdr_buffer_length>
 80123f2:	23ff      	movs	r3, #255	@ 0xff
 80123f4:	4683      	mov	fp, r0
 80123f6:	7163      	strb	r3, [r4, #5]
 80123f8:	f04f 080a 	mov.w	r8, #10
 80123fc:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80123fe:	465a      	mov	r2, fp
 8012400:	e9d3 0500 	ldrd	r0, r5, [r3]
 8012404:	a90b      	add	r1, sp, #44	@ 0x2c
 8012406:	47a8      	blx	r5
 8012408:	f000 fb80 	bl	8012b0c <uxr_millis>
 801240c:	2700      	movs	r7, #0
 801240e:	4605      	mov	r5, r0
 8012410:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8012414:	e009      	b.n	801242a <uxr_create_session+0x7e>
 8012416:	f000 fb79 	bl	8012b0c <uxr_millis>
 801241a:	1b43      	subs	r3, r0, r5
 801241c:	f5c3 737a 	rsb	r3, r3, #1000	@ 0x3e8
 8012420:	2b00      	cmp	r3, #0
 8012422:	7962      	ldrb	r2, [r4, #5]
 8012424:	dd3d      	ble.n	80124a2 <uxr_create_session+0xf6>
 8012426:	2aff      	cmp	r2, #255	@ 0xff
 8012428:	d13b      	bne.n	80124a2 <uxr_create_session+0xf6>
 801242a:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 801242c:	a907      	add	r1, sp, #28
 801242e:	6896      	ldr	r6, [r2, #8]
 8012430:	6810      	ldr	r0, [r2, #0]
 8012432:	aa08      	add	r2, sp, #32
 8012434:	47b0      	blx	r6
 8012436:	2800      	cmp	r0, #0
 8012438:	d0ed      	beq.n	8012416 <uxr_create_session+0x6a>
 801243a:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 801243e:	a81a      	add	r0, sp, #104	@ 0x68
 8012440:	f7fe fe9a 	bl	8011178 <ucdr_init_buffer>
 8012444:	f10d 031a 	add.w	r3, sp, #26
 8012448:	aa06      	add	r2, sp, #24
 801244a:	a91a      	add	r1, sp, #104	@ 0x68
 801244c:	4620      	mov	r0, r4
 801244e:	f88d 7018 	strb.w	r7, [sp, #24]
 8012452:	f000 f985 	bl	8012760 <uxr_read_session_header>
 8012456:	2800      	cmp	r0, #0
 8012458:	d0dd      	beq.n	8012416 <uxr_create_session+0x6a>
 801245a:	f89d 0018 	ldrb.w	r0, [sp, #24]
 801245e:	2100      	movs	r1, #0
 8012460:	f000 fa0e 	bl	8012880 <uxr_stream_id_from_raw>
 8012464:	f3c0 4907 	ubfx	r9, r0, #16, #8
 8012468:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 801246c:	9302      	str	r3, [sp, #8]
 801246e:	f1b9 0f01 	cmp.w	r9, #1
 8012472:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 8012476:	fa5f fa80 	uxtb.w	sl, r0
 801247a:	f3c0 2607 	ubfx	r6, r0, #8, #8
 801247e:	d056      	beq.n	801252e <uxr_create_session+0x182>
 8012480:	f1b9 0f02 	cmp.w	r9, #2
 8012484:	d018      	beq.n	80124b8 <uxr_create_session+0x10c>
 8012486:	f1b9 0f00 	cmp.w	r9, #0
 801248a:	d1c4      	bne.n	8012416 <uxr_create_session+0x6a>
 801248c:	4649      	mov	r1, r9
 801248e:	4648      	mov	r0, r9
 8012490:	f000 f9f6 	bl	8012880 <uxr_stream_id_from_raw>
 8012494:	a91a      	add	r1, sp, #104	@ 0x68
 8012496:	4602      	mov	r2, r0
 8012498:	900a      	str	r0, [sp, #40]	@ 0x28
 801249a:	4620      	mov	r0, r4
 801249c:	f7ff fb2c 	bl	8011af8 <read_submessage_list>
 80124a0:	e7b9      	b.n	8012416 <uxr_create_session+0x6a>
 80124a2:	f1b8 0801 	subs.w	r8, r8, #1
 80124a6:	d001      	beq.n	80124ac <uxr_create_session+0x100>
 80124a8:	2aff      	cmp	r2, #255	@ 0xff
 80124aa:	d0a7      	beq.n	80123fc <uxr_create_session+0x50>
 80124ac:	2a00      	cmp	r2, #0
 80124ae:	d05b      	beq.n	8012568 <uxr_create_session+0x1bc>
 80124b0:	2000      	movs	r0, #0
 80124b2:	b02b      	add	sp, #172	@ 0xac
 80124b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80124b8:	9803      	ldr	r0, [sp, #12]
 80124ba:	4631      	mov	r1, r6
 80124bc:	f000 fac0 	bl	8012a40 <uxr_get_input_reliable_stream>
 80124c0:	9004      	str	r0, [sp, #16]
 80124c2:	b370      	cbz	r0, 8012522 <uxr_create_session+0x176>
 80124c4:	aa1a      	add	r2, sp, #104	@ 0x68
 80124c6:	4610      	mov	r0, r2
 80124c8:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80124ca:	9205      	str	r2, [sp, #20]
 80124cc:	f7fe fe84 	bl	80111d8 <ucdr_buffer_remaining>
 80124d0:	4603      	mov	r3, r0
 80124d2:	f10d 0019 	add.w	r0, sp, #25
 80124d6:	9000      	str	r0, [sp, #0]
 80124d8:	9a05      	ldr	r2, [sp, #20]
 80124da:	9902      	ldr	r1, [sp, #8]
 80124dc:	9804      	ldr	r0, [sp, #16]
 80124de:	f007 fe83 	bl	801a1e8 <uxr_receive_reliable_message>
 80124e2:	b1f0      	cbz	r0, 8012522 <uxr_create_session+0x176>
 80124e4:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80124e8:	2b00      	cmp	r3, #0
 80124ea:	d035      	beq.n	8012558 <uxr_create_session+0x1ac>
 80124ec:	f8cd b008 	str.w	fp, [sp, #8]
 80124f0:	f04f 0902 	mov.w	r9, #2
 80124f4:	f8dd b010 	ldr.w	fp, [sp, #16]
 80124f8:	e00a      	b.n	8012510 <uxr_create_session+0x164>
 80124fa:	f88d a028 	strb.w	sl, [sp, #40]	@ 0x28
 80124fe:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 8012502:	f88d 902a 	strb.w	r9, [sp, #42]	@ 0x2a
 8012506:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012508:	a922      	add	r1, sp, #136	@ 0x88
 801250a:	4620      	mov	r0, r4
 801250c:	f7ff faf4 	bl	8011af8 <read_submessage_list>
 8012510:	2204      	movs	r2, #4
 8012512:	a922      	add	r1, sp, #136	@ 0x88
 8012514:	4658      	mov	r0, fp
 8012516:	f007 fee1 	bl	801a2dc <uxr_next_input_reliable_buffer_available>
 801251a:	2800      	cmp	r0, #0
 801251c:	d1ed      	bne.n	80124fa <uxr_create_session+0x14e>
 801251e:	f8dd b008 	ldr.w	fp, [sp, #8]
 8012522:	4632      	mov	r2, r6
 8012524:	4651      	mov	r1, sl
 8012526:	4620      	mov	r0, r4
 8012528:	f7ff f98a 	bl	8011840 <write_submessage_acknack.isra.0>
 801252c:	e773      	b.n	8012416 <uxr_create_session+0x6a>
 801252e:	9803      	ldr	r0, [sp, #12]
 8012530:	4631      	mov	r1, r6
 8012532:	f000 fa7b 	bl	8012a2c <uxr_get_input_best_effort_stream>
 8012536:	2800      	cmp	r0, #0
 8012538:	f43f af6d 	beq.w	8012416 <uxr_create_session+0x6a>
 801253c:	9902      	ldr	r1, [sp, #8]
 801253e:	f007 fdc3 	bl	801a0c8 <uxr_receive_best_effort_message>
 8012542:	2800      	cmp	r0, #0
 8012544:	f43f af67 	beq.w	8012416 <uxr_create_session+0x6a>
 8012548:	f88d 902a 	strb.w	r9, [sp, #42]	@ 0x2a
 801254c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801254e:	a91a      	add	r1, sp, #104	@ 0x68
 8012550:	4620      	mov	r0, r4
 8012552:	f7ff fad1 	bl	8011af8 <read_submessage_list>
 8012556:	e75e      	b.n	8012416 <uxr_create_session+0x6a>
 8012558:	f88d 902a 	strb.w	r9, [sp, #42]	@ 0x2a
 801255c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801255e:	a91a      	add	r1, sp, #104	@ 0x68
 8012560:	4620      	mov	r0, r4
 8012562:	f7ff fac9 	bl	8011af8 <read_submessage_list>
 8012566:	e7c1      	b.n	80124ec <uxr_create_session+0x140>
 8012568:	9803      	ldr	r0, [sp, #12]
 801256a:	f000 f9af 	bl	80128cc <uxr_reset_stream_storage>
 801256e:	2001      	movs	r0, #1
 8012570:	b02b      	add	sp, #172	@ 0xac
 8012572:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012576:	bf00      	nop

08012578 <uxr_prepare_stream_to_write_submessage>:
 8012578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801257c:	b082      	sub	sp, #8
 801257e:	4606      	mov	r6, r0
 8012580:	4610      	mov	r0, r2
 8012582:	4614      	mov	r4, r2
 8012584:	9101      	str	r1, [sp, #4]
 8012586:	461f      	mov	r7, r3
 8012588:	f3c1 2507 	ubfx	r5, r1, #8, #8
 801258c:	f89d 8028 	ldrb.w	r8, [sp, #40]	@ 0x28
 8012590:	f89d 902c 	ldrb.w	r9, [sp, #44]	@ 0x2c
 8012594:	f000 fab4 	bl	8012b00 <uxr_submessage_padding>
 8012598:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801259c:	1d21      	adds	r1, r4, #4
 801259e:	2b01      	cmp	r3, #1
 80125a0:	eb01 0a00 	add.w	sl, r1, r0
 80125a4:	d012      	beq.n	80125cc <uxr_prepare_stream_to_write_submessage+0x54>
 80125a6:	2b02      	cmp	r3, #2
 80125a8:	d003      	beq.n	80125b2 <uxr_prepare_stream_to_write_submessage+0x3a>
 80125aa:	2000      	movs	r0, #0
 80125ac:	b002      	add	sp, #8
 80125ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80125b2:	4629      	mov	r1, r5
 80125b4:	f106 0008 	add.w	r0, r6, #8
 80125b8:	f000 fa2e 	bl	8012a18 <uxr_get_output_reliable_stream>
 80125bc:	2800      	cmp	r0, #0
 80125be:	d0f4      	beq.n	80125aa <uxr_prepare_stream_to_write_submessage+0x32>
 80125c0:	4651      	mov	r1, sl
 80125c2:	463a      	mov	r2, r7
 80125c4:	f008 f840 	bl	801a648 <uxr_prepare_reliable_buffer_to_write>
 80125c8:	b968      	cbnz	r0, 80125e6 <uxr_prepare_stream_to_write_submessage+0x6e>
 80125ca:	e7ee      	b.n	80125aa <uxr_prepare_stream_to_write_submessage+0x32>
 80125cc:	4629      	mov	r1, r5
 80125ce:	f106 0008 	add.w	r0, r6, #8
 80125d2:	f000 fa19 	bl	8012a08 <uxr_get_output_best_effort_stream>
 80125d6:	2800      	cmp	r0, #0
 80125d8:	d0e7      	beq.n	80125aa <uxr_prepare_stream_to_write_submessage+0x32>
 80125da:	4651      	mov	r1, sl
 80125dc:	463a      	mov	r2, r7
 80125de:	f007 ff65 	bl	801a4ac <uxr_prepare_best_effort_buffer_to_write>
 80125e2:	2800      	cmp	r0, #0
 80125e4:	d0e1      	beq.n	80125aa <uxr_prepare_stream_to_write_submessage+0x32>
 80125e6:	464b      	mov	r3, r9
 80125e8:	b2a2      	uxth	r2, r4
 80125ea:	4641      	mov	r1, r8
 80125ec:	4638      	mov	r0, r7
 80125ee:	f000 fa47 	bl	8012a80 <uxr_buffer_submessage_header>
 80125f2:	2001      	movs	r0, #1
 80125f4:	b002      	add	sp, #8
 80125f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80125fa:	bf00      	nop

080125fc <uxr_init_session_info>:
 80125fc:	2300      	movs	r3, #0
 80125fe:	f361 0307 	bfi	r3, r1, #0, #8
 8012602:	0e11      	lsrs	r1, r2, #24
 8012604:	f361 230f 	bfi	r3, r1, #8, #8
 8012608:	f3c2 4107 	ubfx	r1, r2, #16, #8
 801260c:	f361 4317 	bfi	r3, r1, #16, #8
 8012610:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8012614:	f361 631f 	bfi	r3, r1, #24, #8
 8012618:	f04f 0c09 	mov.w	ip, #9
 801261c:	21ff      	movs	r1, #255	@ 0xff
 801261e:	6003      	str	r3, [r0, #0]
 8012620:	7102      	strb	r2, [r0, #4]
 8012622:	f8a0 c006 	strh.w	ip, [r0, #6]
 8012626:	7141      	strb	r1, [r0, #5]
 8012628:	4770      	bx	lr
 801262a:	bf00      	nop

0801262c <uxr_buffer_create_session>:
 801262c:	b530      	push	{r4, r5, lr}
 801262e:	4d13      	ldr	r5, [pc, #76]	@ (801267c <uxr_buffer_create_session+0x50>)
 8012630:	b089      	sub	sp, #36	@ 0x24
 8012632:	2300      	movs	r3, #0
 8012634:	9307      	str	r3, [sp, #28]
 8012636:	f8ad 201c 	strh.w	r2, [sp, #28]
 801263a:	682a      	ldr	r2, [r5, #0]
 801263c:	9200      	str	r2, [sp, #0]
 801263e:	460c      	mov	r4, r1
 8012640:	2201      	movs	r2, #1
 8012642:	88a9      	ldrh	r1, [r5, #4]
 8012644:	9301      	str	r3, [sp, #4]
 8012646:	80c2      	strh	r2, [r0, #6]
 8012648:	f8ad 1006 	strh.w	r1, [sp, #6]
 801264c:	f8d0 1001 	ldr.w	r1, [r0, #1]
 8012650:	7800      	ldrb	r0, [r0, #0]
 8012652:	9303      	str	r3, [sp, #12]
 8012654:	f88d 2004 	strb.w	r2, [sp, #4]
 8012658:	9102      	str	r1, [sp, #8]
 801265a:	2210      	movs	r2, #16
 801265c:	4619      	mov	r1, r3
 801265e:	f88d 000c 	strb.w	r0, [sp, #12]
 8012662:	4620      	mov	r0, r4
 8012664:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8012668:	9306      	str	r3, [sp, #24]
 801266a:	f000 fa09 	bl	8012a80 <uxr_buffer_submessage_header>
 801266e:	4669      	mov	r1, sp
 8012670:	4620      	mov	r0, r4
 8012672:	f001 fa59 	bl	8013b28 <uxr_serialize_CREATE_CLIENT_Payload>
 8012676:	b009      	add	sp, #36	@ 0x24
 8012678:	bd30      	pop	{r4, r5, pc}
 801267a:	bf00      	nop
 801267c:	0801e68c 	.word	0x0801e68c

08012680 <uxr_buffer_delete_session>:
 8012680:	b510      	push	{r4, lr}
 8012682:	4a0c      	ldr	r2, [pc, #48]	@ (80126b4 <uxr_buffer_delete_session+0x34>)
 8012684:	b082      	sub	sp, #8
 8012686:	460c      	mov	r4, r1
 8012688:	2302      	movs	r3, #2
 801268a:	8911      	ldrh	r1, [r2, #8]
 801268c:	80c3      	strh	r3, [r0, #6]
 801268e:	f44f 7c00 	mov.w	ip, #512	@ 0x200
 8012692:	2300      	movs	r3, #0
 8012694:	2204      	movs	r2, #4
 8012696:	f8ad 1006 	strh.w	r1, [sp, #6]
 801269a:	4620      	mov	r0, r4
 801269c:	2103      	movs	r1, #3
 801269e:	f8ad c004 	strh.w	ip, [sp, #4]
 80126a2:	f000 f9ed 	bl	8012a80 <uxr_buffer_submessage_header>
 80126a6:	a901      	add	r1, sp, #4
 80126a8:	4620      	mov	r0, r4
 80126aa:	f001 fae1 	bl	8013c70 <uxr_serialize_DELETE_Payload>
 80126ae:	b002      	add	sp, #8
 80126b0:	bd10      	pop	{r4, pc}
 80126b2:	bf00      	nop
 80126b4:	0801e68c 	.word	0x0801e68c

080126b8 <uxr_read_create_session_status>:
 80126b8:	b510      	push	{r4, lr}
 80126ba:	460b      	mov	r3, r1
 80126bc:	b088      	sub	sp, #32
 80126be:	4604      	mov	r4, r0
 80126c0:	a901      	add	r1, sp, #4
 80126c2:	4618      	mov	r0, r3
 80126c4:	f001 fae4 	bl	8013c90 <uxr_deserialize_STATUS_AGENT_Payload>
 80126c8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80126cc:	7163      	strb	r3, [r4, #5]
 80126ce:	b008      	add	sp, #32
 80126d0:	bd10      	pop	{r4, pc}
 80126d2:	bf00      	nop

080126d4 <uxr_read_delete_session_status>:
 80126d4:	b510      	push	{r4, lr}
 80126d6:	460b      	mov	r3, r1
 80126d8:	b082      	sub	sp, #8
 80126da:	4604      	mov	r4, r0
 80126dc:	4669      	mov	r1, sp
 80126de:	4618      	mov	r0, r3
 80126e0:	f001 fb06 	bl	8013cf0 <uxr_deserialize_STATUS_Payload>
 80126e4:	88e3      	ldrh	r3, [r4, #6]
 80126e6:	2b02      	cmp	r3, #2
 80126e8:	d001      	beq.n	80126ee <uxr_read_delete_session_status+0x1a>
 80126ea:	b002      	add	sp, #8
 80126ec:	bd10      	pop	{r4, pc}
 80126ee:	f10d 0002 	add.w	r0, sp, #2
 80126f2:	f7ff f82d 	bl	8011750 <uxr_object_id_from_raw>
 80126f6:	f8bd 3000 	ldrh.w	r3, [sp]
 80126fa:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80126fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012702:	bf08      	it	eq
 8012704:	7162      	strbeq	r2, [r4, #5]
 8012706:	b002      	add	sp, #8
 8012708:	bd10      	pop	{r4, pc}
 801270a:	bf00      	nop

0801270c <uxr_stamp_create_session_header>:
 801270c:	b510      	push	{r4, lr}
 801270e:	2208      	movs	r2, #8
 8012710:	b08a      	sub	sp, #40	@ 0x28
 8012712:	4604      	mov	r4, r0
 8012714:	eb0d 0002 	add.w	r0, sp, r2
 8012718:	f7fe fd2e 	bl	8011178 <ucdr_init_buffer>
 801271c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012720:	9400      	str	r4, [sp, #0]
 8012722:	2300      	movs	r3, #0
 8012724:	461a      	mov	r2, r3
 8012726:	a802      	add	r0, sp, #8
 8012728:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 801272c:	f000 fba6 	bl	8012e7c <uxr_serialize_message_header>
 8012730:	b00a      	add	sp, #40	@ 0x28
 8012732:	bd10      	pop	{r4, pc}

08012734 <uxr_stamp_session_header>:
 8012734:	b570      	push	{r4, r5, r6, lr}
 8012736:	4604      	mov	r4, r0
 8012738:	b08a      	sub	sp, #40	@ 0x28
 801273a:	4616      	mov	r6, r2
 801273c:	2208      	movs	r2, #8
 801273e:	eb0d 0002 	add.w	r0, sp, r2
 8012742:	460d      	mov	r5, r1
 8012744:	4619      	mov	r1, r3
 8012746:	f7fe fd17 	bl	8011178 <ucdr_init_buffer>
 801274a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801274e:	9400      	str	r4, [sp, #0]
 8012750:	4633      	mov	r3, r6
 8012752:	462a      	mov	r2, r5
 8012754:	a802      	add	r0, sp, #8
 8012756:	f000 fb91 	bl	8012e7c <uxr_serialize_message_header>
 801275a:	b00a      	add	sp, #40	@ 0x28
 801275c:	bd70      	pop	{r4, r5, r6, pc}
 801275e:	bf00      	nop

08012760 <uxr_read_session_header>:
 8012760:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012762:	4607      	mov	r7, r0
 8012764:	b085      	sub	sp, #20
 8012766:	4608      	mov	r0, r1
 8012768:	460c      	mov	r4, r1
 801276a:	4615      	mov	r5, r2
 801276c:	461e      	mov	r6, r3
 801276e:	f7fe fd33 	bl	80111d8 <ucdr_buffer_remaining>
 8012772:	2808      	cmp	r0, #8
 8012774:	d802      	bhi.n	801277c <uxr_read_session_header+0x1c>
 8012776:	2000      	movs	r0, #0
 8012778:	b005      	add	sp, #20
 801277a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801277c:	ab03      	add	r3, sp, #12
 801277e:	9300      	str	r3, [sp, #0]
 8012780:	462a      	mov	r2, r5
 8012782:	4633      	mov	r3, r6
 8012784:	f10d 010b 	add.w	r1, sp, #11
 8012788:	4620      	mov	r0, r4
 801278a:	f000 fb95 	bl	8012eb8 <uxr_deserialize_message_header>
 801278e:	783a      	ldrb	r2, [r7, #0]
 8012790:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8012794:	4293      	cmp	r3, r2
 8012796:	d1ee      	bne.n	8012776 <uxr_read_session_header+0x16>
 8012798:	061b      	lsls	r3, r3, #24
 801279a:	d41c      	bmi.n	80127d6 <uxr_read_session_header+0x76>
 801279c:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80127a0:	787b      	ldrb	r3, [r7, #1]
 80127a2:	429a      	cmp	r2, r3
 80127a4:	d003      	beq.n	80127ae <uxr_read_session_header+0x4e>
 80127a6:	2001      	movs	r0, #1
 80127a8:	f080 0001 	eor.w	r0, r0, #1
 80127ac:	e7e4      	b.n	8012778 <uxr_read_session_header+0x18>
 80127ae:	f89d 200d 	ldrb.w	r2, [sp, #13]
 80127b2:	78bb      	ldrb	r3, [r7, #2]
 80127b4:	429a      	cmp	r2, r3
 80127b6:	f107 0102 	add.w	r1, r7, #2
 80127ba:	d1f4      	bne.n	80127a6 <uxr_read_session_header+0x46>
 80127bc:	f89d 200e 	ldrb.w	r2, [sp, #14]
 80127c0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80127c4:	429a      	cmp	r2, r3
 80127c6:	d1ee      	bne.n	80127a6 <uxr_read_session_header+0x46>
 80127c8:	f89d 200f 	ldrb.w	r2, [sp, #15]
 80127cc:	784b      	ldrb	r3, [r1, #1]
 80127ce:	429a      	cmp	r2, r3
 80127d0:	d1e9      	bne.n	80127a6 <uxr_read_session_header+0x46>
 80127d2:	2000      	movs	r0, #0
 80127d4:	e7e8      	b.n	80127a8 <uxr_read_session_header+0x48>
 80127d6:	2001      	movs	r0, #1
 80127d8:	e7ce      	b.n	8012778 <uxr_read_session_header+0x18>
 80127da:	bf00      	nop

080127dc <uxr_session_header_offset>:
 80127dc:	f990 3000 	ldrsb.w	r3, [r0]
 80127e0:	2b00      	cmp	r3, #0
 80127e2:	bfb4      	ite	lt
 80127e4:	2004      	movlt	r0, #4
 80127e6:	2008      	movge	r0, #8
 80127e8:	4770      	bx	lr
 80127ea:	bf00      	nop

080127ec <uxr_init_base_object_request>:
 80127ec:	b510      	push	{r4, lr}
 80127ee:	88c3      	ldrh	r3, [r0, #6]
 80127f0:	b082      	sub	sp, #8
 80127f2:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 80127f6:	9101      	str	r1, [sp, #4]
 80127f8:	f1a3 010a 	sub.w	r1, r3, #10
 80127fc:	b289      	uxth	r1, r1
 80127fe:	42a1      	cmp	r1, r4
 8012800:	d80e      	bhi.n	8012820 <uxr_init_base_object_request+0x34>
 8012802:	3301      	adds	r3, #1
 8012804:	b29c      	uxth	r4, r3
 8012806:	f3c3 2107 	ubfx	r1, r3, #8, #8
 801280a:	b2db      	uxtb	r3, r3
 801280c:	80c4      	strh	r4, [r0, #6]
 801280e:	9801      	ldr	r0, [sp, #4]
 8012810:	7011      	strb	r1, [r2, #0]
 8012812:	7053      	strb	r3, [r2, #1]
 8012814:	1c91      	adds	r1, r2, #2
 8012816:	f7fe ffaf 	bl	8011778 <uxr_object_id_to_raw>
 801281a:	4620      	mov	r0, r4
 801281c:	b002      	add	sp, #8
 801281e:	bd10      	pop	{r4, pc}
 8012820:	230a      	movs	r3, #10
 8012822:	2100      	movs	r1, #0
 8012824:	461c      	mov	r4, r3
 8012826:	e7f1      	b.n	801280c <uxr_init_base_object_request+0x20>

08012828 <uxr_parse_base_object_request>:
 8012828:	b570      	push	{r4, r5, r6, lr}
 801282a:	4604      	mov	r4, r0
 801282c:	3002      	adds	r0, #2
 801282e:	460d      	mov	r5, r1
 8012830:	4616      	mov	r6, r2
 8012832:	f7fe ff8d 	bl	8011750 <uxr_object_id_from_raw>
 8012836:	f3c0 430f 	ubfx	r3, r0, #16, #16
 801283a:	8028      	strh	r0, [r5, #0]
 801283c:	806b      	strh	r3, [r5, #2]
 801283e:	8823      	ldrh	r3, [r4, #0]
 8012840:	ba5b      	rev16	r3, r3
 8012842:	8033      	strh	r3, [r6, #0]
 8012844:	bd70      	pop	{r4, r5, r6, pc}
 8012846:	bf00      	nop

08012848 <uxr_stream_id>:
 8012848:	2901      	cmp	r1, #1
 801284a:	b082      	sub	sp, #8
 801284c:	4603      	mov	r3, r0
 801284e:	d011      	beq.n	8012874 <uxr_stream_id+0x2c>
 8012850:	2902      	cmp	r1, #2
 8012852:	f04f 0c00 	mov.w	ip, #0
 8012856:	d00a      	beq.n	801286e <uxr_stream_id+0x26>
 8012858:	2000      	movs	r0, #0
 801285a:	f36c 0007 	bfi	r0, ip, #0, #8
 801285e:	f363 200f 	bfi	r0, r3, #8, #8
 8012862:	f361 4017 	bfi	r0, r1, #16, #8
 8012866:	f362 601f 	bfi	r0, r2, #24, #8
 801286a:	b002      	add	sp, #8
 801286c:	4770      	bx	lr
 801286e:	f080 0c80 	eor.w	ip, r0, #128	@ 0x80
 8012872:	e7f1      	b.n	8012858 <uxr_stream_id+0x10>
 8012874:	f100 0c01 	add.w	ip, r0, #1
 8012878:	fa5f fc8c 	uxtb.w	ip, ip
 801287c:	e7ec      	b.n	8012858 <uxr_stream_id+0x10>
 801287e:	bf00      	nop

08012880 <uxr_stream_id_from_raw>:
 8012880:	b082      	sub	sp, #8
 8012882:	4603      	mov	r3, r0
 8012884:	b130      	cbz	r0, 8012894 <uxr_stream_id_from_raw+0x14>
 8012886:	0602      	lsls	r2, r0, #24
 8012888:	d411      	bmi.n	80128ae <uxr_stream_id_from_raw+0x2e>
 801288a:	1e42      	subs	r2, r0, #1
 801288c:	b2d2      	uxtb	r2, r2
 801288e:	f04f 0c01 	mov.w	ip, #1
 8012892:	e001      	b.n	8012898 <uxr_stream_id_from_raw+0x18>
 8012894:	4684      	mov	ip, r0
 8012896:	4602      	mov	r2, r0
 8012898:	2000      	movs	r0, #0
 801289a:	f363 0007 	bfi	r0, r3, #0, #8
 801289e:	f362 200f 	bfi	r0, r2, #8, #8
 80128a2:	f36c 4017 	bfi	r0, ip, #16, #8
 80128a6:	f361 601f 	bfi	r0, r1, #24, #8
 80128aa:	b002      	add	sp, #8
 80128ac:	4770      	bx	lr
 80128ae:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 80128b2:	f04f 0c02 	mov.w	ip, #2
 80128b6:	e7ef      	b.n	8012898 <uxr_stream_id_from_raw+0x18>

080128b8 <uxr_init_stream_storage>:
 80128b8:	2300      	movs	r3, #0
 80128ba:	7403      	strb	r3, [r0, #16]
 80128bc:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 80128c0:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 80128c4:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 80128c8:	4770      	bx	lr
 80128ca:	bf00      	nop

080128cc <uxr_reset_stream_storage>:
 80128cc:	b570      	push	{r4, r5, r6, lr}
 80128ce:	7c03      	ldrb	r3, [r0, #16]
 80128d0:	4604      	mov	r4, r0
 80128d2:	b153      	cbz	r3, 80128ea <uxr_reset_stream_storage+0x1e>
 80128d4:	4606      	mov	r6, r0
 80128d6:	2500      	movs	r5, #0
 80128d8:	4630      	mov	r0, r6
 80128da:	f007 fde1 	bl	801a4a0 <uxr_reset_output_best_effort_stream>
 80128de:	7c23      	ldrb	r3, [r4, #16]
 80128e0:	3501      	adds	r5, #1
 80128e2:	42ab      	cmp	r3, r5
 80128e4:	f106 0610 	add.w	r6, r6, #16
 80128e8:	d8f6      	bhi.n	80128d8 <uxr_reset_stream_storage+0xc>
 80128ea:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80128ee:	b163      	cbz	r3, 801290a <uxr_reset_stream_storage+0x3e>
 80128f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80128f4:	2500      	movs	r5, #0
 80128f6:	4630      	mov	r0, r6
 80128f8:	f007 fbe2 	bl	801a0c0 <uxr_reset_input_best_effort_stream>
 80128fc:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8012900:	3501      	adds	r5, #1
 8012902:	42ab      	cmp	r3, r5
 8012904:	f106 0602 	add.w	r6, r6, #2
 8012908:	d8f5      	bhi.n	80128f6 <uxr_reset_stream_storage+0x2a>
 801290a:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 801290e:	b163      	cbz	r3, 801292a <uxr_reset_stream_storage+0x5e>
 8012910:	f104 0618 	add.w	r6, r4, #24
 8012914:	2500      	movs	r5, #0
 8012916:	4630      	mov	r0, r6
 8012918:	f007 fe6c 	bl	801a5f4 <uxr_reset_output_reliable_stream>
 801291c:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8012920:	3501      	adds	r5, #1
 8012922:	42ab      	cmp	r3, r5
 8012924:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 8012928:	d8f5      	bhi.n	8012916 <uxr_reset_stream_storage+0x4a>
 801292a:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 801292e:	b163      	cbz	r3, 801294a <uxr_reset_stream_storage+0x7e>
 8012930:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 8012934:	2500      	movs	r5, #0
 8012936:	4630      	mov	r0, r6
 8012938:	f007 fc32 	bl	801a1a0 <uxr_reset_input_reliable_stream>
 801293c:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8012940:	3501      	adds	r5, #1
 8012942:	42ab      	cmp	r3, r5
 8012944:	f106 0618 	add.w	r6, r6, #24
 8012948:	d8f5      	bhi.n	8012936 <uxr_reset_stream_storage+0x6a>
 801294a:	bd70      	pop	{r4, r5, r6, pc}

0801294c <uxr_add_output_best_effort_buffer>:
 801294c:	b510      	push	{r4, lr}
 801294e:	7c04      	ldrb	r4, [r0, #16]
 8012950:	f104 0c01 	add.w	ip, r4, #1
 8012954:	b082      	sub	sp, #8
 8012956:	f880 c010 	strb.w	ip, [r0, #16]
 801295a:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 801295e:	f007 fd95 	bl	801a48c <uxr_init_output_best_effort_stream>
 8012962:	2201      	movs	r2, #1
 8012964:	4611      	mov	r1, r2
 8012966:	4620      	mov	r0, r4
 8012968:	b002      	add	sp, #8
 801296a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801296e:	f7ff bf6b 	b.w	8012848 <uxr_stream_id>
 8012972:	bf00      	nop

08012974 <uxr_add_output_reliable_buffer>:
 8012974:	b510      	push	{r4, lr}
 8012976:	b084      	sub	sp, #16
 8012978:	4684      	mov	ip, r0
 801297a:	f89d 0018 	ldrb.w	r0, [sp, #24]
 801297e:	9000      	str	r0, [sp, #0]
 8012980:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 8012984:	2028      	movs	r0, #40	@ 0x28
 8012986:	fb00 c004 	mla	r0, r0, r4, ip
 801298a:	f104 0e01 	add.w	lr, r4, #1
 801298e:	3018      	adds	r0, #24
 8012990:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 8012994:	f007 fdf6 	bl	801a584 <uxr_init_output_reliable_stream>
 8012998:	2201      	movs	r2, #1
 801299a:	2102      	movs	r1, #2
 801299c:	4620      	mov	r0, r4
 801299e:	b004      	add	sp, #16
 80129a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80129a4:	f7ff bf50 	b.w	8012848 <uxr_stream_id>

080129a8 <uxr_add_input_best_effort_buffer>:
 80129a8:	b510      	push	{r4, lr}
 80129aa:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 80129ae:	1c62      	adds	r2, r4, #1
 80129b0:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 80129b4:	b082      	sub	sp, #8
 80129b6:	f880 2044 	strb.w	r2, [r0, #68]	@ 0x44
 80129ba:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80129be:	f007 fb7b 	bl	801a0b8 <uxr_init_input_best_effort_stream>
 80129c2:	2200      	movs	r2, #0
 80129c4:	2101      	movs	r1, #1
 80129c6:	4620      	mov	r0, r4
 80129c8:	b002      	add	sp, #8
 80129ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80129ce:	f7ff bf3b 	b.w	8012848 <uxr_stream_id>
 80129d2:	bf00      	nop

080129d4 <uxr_add_input_reliable_buffer>:
 80129d4:	b510      	push	{r4, lr}
 80129d6:	b084      	sub	sp, #16
 80129d8:	4684      	mov	ip, r0
 80129da:	9806      	ldr	r0, [sp, #24]
 80129dc:	9000      	str	r0, [sp, #0]
 80129de:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 80129e2:	2018      	movs	r0, #24
 80129e4:	fb00 c004 	mla	r0, r0, r4, ip
 80129e8:	f104 0e01 	add.w	lr, r4, #1
 80129ec:	3048      	adds	r0, #72	@ 0x48
 80129ee:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 80129f2:	f007 fba9 	bl	801a148 <uxr_init_input_reliable_stream>
 80129f6:	2200      	movs	r2, #0
 80129f8:	2102      	movs	r1, #2
 80129fa:	4620      	mov	r0, r4
 80129fc:	b004      	add	sp, #16
 80129fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012a02:	f7ff bf21 	b.w	8012848 <uxr_stream_id>
 8012a06:	bf00      	nop

08012a08 <uxr_get_output_best_effort_stream>:
 8012a08:	7c03      	ldrb	r3, [r0, #16]
 8012a0a:	428b      	cmp	r3, r1
 8012a0c:	bf8c      	ite	hi
 8012a0e:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 8012a12:	2000      	movls	r0, #0
 8012a14:	4770      	bx	lr
 8012a16:	bf00      	nop

08012a18 <uxr_get_output_reliable_stream>:
 8012a18:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8012a1c:	428b      	cmp	r3, r1
 8012a1e:	bf83      	ittte	hi
 8012a20:	2328      	movhi	r3, #40	@ 0x28
 8012a22:	fb03 0001 	mlahi	r0, r3, r1, r0
 8012a26:	3018      	addhi	r0, #24
 8012a28:	2000      	movls	r0, #0
 8012a2a:	4770      	bx	lr

08012a2c <uxr_get_input_best_effort_stream>:
 8012a2c:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8012a30:	428b      	cmp	r3, r1
 8012a32:	bf86      	itte	hi
 8012a34:	3121      	addhi	r1, #33	@ 0x21
 8012a36:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 8012a3a:	2000      	movls	r0, #0
 8012a3c:	4770      	bx	lr
 8012a3e:	bf00      	nop

08012a40 <uxr_get_input_reliable_stream>:
 8012a40:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 8012a44:	428b      	cmp	r3, r1
 8012a46:	bf83      	ittte	hi
 8012a48:	2318      	movhi	r3, #24
 8012a4a:	fb03 0001 	mlahi	r0, r3, r1, r0
 8012a4e:	3048      	addhi	r0, #72	@ 0x48
 8012a50:	2000      	movls	r0, #0
 8012a52:	4770      	bx	lr

08012a54 <uxr_output_streams_confirmed>:
 8012a54:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8012a58:	b183      	cbz	r3, 8012a7c <uxr_output_streams_confirmed+0x28>
 8012a5a:	b570      	push	{r4, r5, r6, lr}
 8012a5c:	4606      	mov	r6, r0
 8012a5e:	f100 0518 	add.w	r5, r0, #24
 8012a62:	2400      	movs	r4, #0
 8012a64:	e001      	b.n	8012a6a <uxr_output_streams_confirmed+0x16>
 8012a66:	3528      	adds	r5, #40	@ 0x28
 8012a68:	b138      	cbz	r0, 8012a7a <uxr_output_streams_confirmed+0x26>
 8012a6a:	4628      	mov	r0, r5
 8012a6c:	f008 f82a 	bl	801aac4 <uxr_is_output_up_to_date>
 8012a70:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 8012a74:	3401      	adds	r4, #1
 8012a76:	42a3      	cmp	r3, r4
 8012a78:	d8f5      	bhi.n	8012a66 <uxr_output_streams_confirmed+0x12>
 8012a7a:	bd70      	pop	{r4, r5, r6, pc}
 8012a7c:	2001      	movs	r0, #1
 8012a7e:	4770      	bx	lr

08012a80 <uxr_buffer_submessage_header>:
 8012a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a82:	4604      	mov	r4, r0
 8012a84:	460e      	mov	r6, r1
 8012a86:	2104      	movs	r1, #4
 8012a88:	4615      	mov	r5, r2
 8012a8a:	461f      	mov	r7, r3
 8012a8c:	f7fe fb8e 	bl	80111ac <ucdr_align_to>
 8012a90:	2301      	movs	r3, #1
 8012a92:	7523      	strb	r3, [r4, #20]
 8012a94:	f047 0201 	orr.w	r2, r7, #1
 8012a98:	462b      	mov	r3, r5
 8012a9a:	4631      	mov	r1, r6
 8012a9c:	4620      	mov	r0, r4
 8012a9e:	f000 fa2b 	bl	8012ef8 <uxr_serialize_submessage_header>
 8012aa2:	4620      	mov	r0, r4
 8012aa4:	f7fe fb98 	bl	80111d8 <ucdr_buffer_remaining>
 8012aa8:	42a8      	cmp	r0, r5
 8012aaa:	bf34      	ite	cc
 8012aac:	2000      	movcc	r0, #0
 8012aae:	2001      	movcs	r0, #1
 8012ab0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012ab2:	bf00      	nop

08012ab4 <uxr_read_submessage_header>:
 8012ab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012ab8:	4604      	mov	r4, r0
 8012aba:	460d      	mov	r5, r1
 8012abc:	2104      	movs	r1, #4
 8012abe:	4616      	mov	r6, r2
 8012ac0:	4698      	mov	r8, r3
 8012ac2:	f7fe fb73 	bl	80111ac <ucdr_align_to>
 8012ac6:	4620      	mov	r0, r4
 8012ac8:	f7fe fb86 	bl	80111d8 <ucdr_buffer_remaining>
 8012acc:	2803      	cmp	r0, #3
 8012ace:	bf8c      	ite	hi
 8012ad0:	2701      	movhi	r7, #1
 8012ad2:	2700      	movls	r7, #0
 8012ad4:	d802      	bhi.n	8012adc <uxr_read_submessage_header+0x28>
 8012ad6:	4638      	mov	r0, r7
 8012ad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012adc:	4633      	mov	r3, r6
 8012ade:	4642      	mov	r2, r8
 8012ae0:	4620      	mov	r0, r4
 8012ae2:	4629      	mov	r1, r5
 8012ae4:	f000 fa1a 	bl	8012f1c <uxr_deserialize_submessage_header>
 8012ae8:	f898 3000 	ldrb.w	r3, [r8]
 8012aec:	f003 0201 	and.w	r2, r3, #1
 8012af0:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8012af4:	f888 3000 	strb.w	r3, [r8]
 8012af8:	7522      	strb	r2, [r4, #20]
 8012afa:	4638      	mov	r0, r7
 8012afc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012b00 <uxr_submessage_padding>:
 8012b00:	f010 0003 	ands.w	r0, r0, #3
 8012b04:	bf18      	it	ne
 8012b06:	f1c0 0004 	rsbne	r0, r0, #4
 8012b0a:	4770      	bx	lr

08012b0c <uxr_millis>:
 8012b0c:	b510      	push	{r4, lr}
 8012b0e:	b084      	sub	sp, #16
 8012b10:	4669      	mov	r1, sp
 8012b12:	2001      	movs	r0, #1
 8012b14:	f7ef fc60 	bl	80023d8 <clock_gettime>
 8012b18:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 8012b1c:	4b06      	ldr	r3, [pc, #24]	@ (8012b38 <uxr_millis+0x2c>)
 8012b1e:	fba0 0103 	umull	r0, r1, r0, r3
 8012b22:	1900      	adds	r0, r0, r4
 8012b24:	fb03 1102 	mla	r1, r3, r2, r1
 8012b28:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8012b2c:	4a03      	ldr	r2, [pc, #12]	@ (8012b3c <uxr_millis+0x30>)
 8012b2e:	2300      	movs	r3, #0
 8012b30:	f7ee f874 	bl	8000c1c <__aeabi_ldivmod>
 8012b34:	b004      	add	sp, #16
 8012b36:	bd10      	pop	{r4, pc}
 8012b38:	3b9aca00 	.word	0x3b9aca00
 8012b3c:	000f4240 	.word	0x000f4240

08012b40 <uxr_nanos>:
 8012b40:	b510      	push	{r4, lr}
 8012b42:	b084      	sub	sp, #16
 8012b44:	4669      	mov	r1, sp
 8012b46:	2001      	movs	r0, #1
 8012b48:	f7ef fc46 	bl	80023d8 <clock_gettime>
 8012b4c:	4a06      	ldr	r2, [pc, #24]	@ (8012b68 <uxr_nanos+0x28>)
 8012b4e:	9800      	ldr	r0, [sp, #0]
 8012b50:	9902      	ldr	r1, [sp, #8]
 8012b52:	9c01      	ldr	r4, [sp, #4]
 8012b54:	fba0 0302 	umull	r0, r3, r0, r2
 8012b58:	1840      	adds	r0, r0, r1
 8012b5a:	fb02 3304 	mla	r3, r2, r4, r3
 8012b5e:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 8012b62:	b004      	add	sp, #16
 8012b64:	bd10      	pop	{r4, pc}
 8012b66:	bf00      	nop
 8012b68:	3b9aca00 	.word	0x3b9aca00

08012b6c <on_full_output_buffer_fragmented>:
 8012b6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012b70:	460c      	mov	r4, r1
 8012b72:	b08a      	sub	sp, #40	@ 0x28
 8012b74:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 8012b78:	4606      	mov	r6, r0
 8012b7a:	f104 0008 	add.w	r0, r4, #8
 8012b7e:	f7ff ff4b 	bl	8012a18 <uxr_get_output_reliable_stream>
 8012b82:	4605      	mov	r5, r0
 8012b84:	f007 ffa8 	bl	801aad8 <get_available_free_slots>
 8012b88:	b968      	cbnz	r0, 8012ba6 <on_full_output_buffer_fragmented+0x3a>
 8012b8a:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 8012b8e:	4620      	mov	r0, r4
 8012b90:	4798      	blx	r3
 8012b92:	b918      	cbnz	r0, 8012b9c <on_full_output_buffer_fragmented+0x30>
 8012b94:	2001      	movs	r0, #1
 8012b96:	b00a      	add	sp, #40	@ 0x28
 8012b98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b9c:	4628      	mov	r0, r5
 8012b9e:	f007 ff9b 	bl	801aad8 <get_available_free_slots>
 8012ba2:	2800      	cmp	r0, #0
 8012ba4:	d0f6      	beq.n	8012b94 <on_full_output_buffer_fragmented+0x28>
 8012ba6:	892a      	ldrh	r2, [r5, #8]
 8012ba8:	686b      	ldr	r3, [r5, #4]
 8012baa:	fbb3 f8f2 	udiv	r8, r3, r2
 8012bae:	89eb      	ldrh	r3, [r5, #14]
 8012bb0:	7b29      	ldrb	r1, [r5, #12]
 8012bb2:	fbb3 f0f2 	udiv	r0, r3, r2
 8012bb6:	fb02 3310 	mls	r3, r2, r0, r3
 8012bba:	f5c1 417f 	rsb	r1, r1, #65280	@ 0xff00
 8012bbe:	b29b      	uxth	r3, r3
 8012bc0:	fb08 f303 	mul.w	r3, r8, r3
 8012bc4:	31fc      	adds	r1, #252	@ 0xfc
 8012bc6:	f1a8 0804 	sub.w	r8, r8, #4
 8012bca:	4441      	add	r1, r8
 8012bcc:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8012bd0:	b28f      	uxth	r7, r1
 8012bd2:	6829      	ldr	r1, [r5, #0]
 8012bd4:	3304      	adds	r3, #4
 8012bd6:	1bd2      	subs	r2, r2, r7
 8012bd8:	4419      	add	r1, r3
 8012bda:	f8c4 20c4 	str.w	r2, [r4, #196]	@ 0xc4
 8012bde:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012be2:	9300      	str	r3, [sp, #0]
 8012be4:	4642      	mov	r2, r8
 8012be6:	2300      	movs	r3, #0
 8012be8:	a802      	add	r0, sp, #8
 8012bea:	f7fe fab3 	bl	8011154 <ucdr_init_buffer_origin_offset>
 8012bee:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8012bf2:	f102 0308 	add.w	r3, r2, #8
 8012bf6:	4543      	cmp	r3, r8
 8012bf8:	d928      	bls.n	8012c4c <on_full_output_buffer_fragmented+0xe0>
 8012bfa:	463a      	mov	r2, r7
 8012bfc:	2300      	movs	r3, #0
 8012bfe:	210d      	movs	r1, #13
 8012c00:	a802      	add	r0, sp, #8
 8012c02:	f7ff ff3d 	bl	8012a80 <uxr_buffer_submessage_header>
 8012c06:	8929      	ldrh	r1, [r5, #8]
 8012c08:	89eb      	ldrh	r3, [r5, #14]
 8012c0a:	fbb3 f2f1 	udiv	r2, r3, r1
 8012c0e:	fb01 3312 	mls	r3, r1, r2, r3
 8012c12:	b29b      	uxth	r3, r3
 8012c14:	686a      	ldr	r2, [r5, #4]
 8012c16:	fbb2 f2f1 	udiv	r2, r2, r1
 8012c1a:	fb02 f303 	mul.w	r3, r2, r3
 8012c1e:	682a      	ldr	r2, [r5, #0]
 8012c20:	f842 8003 	str.w	r8, [r2, r3]
 8012c24:	89e8      	ldrh	r0, [r5, #14]
 8012c26:	2101      	movs	r1, #1
 8012c28:	f008 f8aa 	bl	801ad80 <uxr_seq_num_add>
 8012c2c:	9904      	ldr	r1, [sp, #16]
 8012c2e:	9a03      	ldr	r2, [sp, #12]
 8012c30:	81e8      	strh	r0, [r5, #14]
 8012c32:	1a52      	subs	r2, r2, r1
 8012c34:	4630      	mov	r0, r6
 8012c36:	f7fe fa9f 	bl	8011178 <ucdr_init_buffer>
 8012c3a:	4630      	mov	r0, r6
 8012c3c:	4910      	ldr	r1, [pc, #64]	@ (8012c80 <on_full_output_buffer_fragmented+0x114>)
 8012c3e:	4622      	mov	r2, r4
 8012c40:	f7fe fa6e 	bl	8011120 <ucdr_set_on_full_buffer_callback>
 8012c44:	2000      	movs	r0, #0
 8012c46:	b00a      	add	sp, #40	@ 0x28
 8012c48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c4c:	b292      	uxth	r2, r2
 8012c4e:	2302      	movs	r3, #2
 8012c50:	210d      	movs	r1, #13
 8012c52:	a802      	add	r0, sp, #8
 8012c54:	f7ff ff14 	bl	8012a80 <uxr_buffer_submessage_header>
 8012c58:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 8012c5c:	8928      	ldrh	r0, [r5, #8]
 8012c5e:	f103 0208 	add.w	r2, r3, #8
 8012c62:	89eb      	ldrh	r3, [r5, #14]
 8012c64:	fbb3 f1f0 	udiv	r1, r3, r0
 8012c68:	fb00 3311 	mls	r3, r0, r1, r3
 8012c6c:	b29b      	uxth	r3, r3
 8012c6e:	6869      	ldr	r1, [r5, #4]
 8012c70:	fbb1 f1f0 	udiv	r1, r1, r0
 8012c74:	fb01 f303 	mul.w	r3, r1, r3
 8012c78:	6829      	ldr	r1, [r5, #0]
 8012c7a:	50ca      	str	r2, [r1, r3]
 8012c7c:	e7d2      	b.n	8012c24 <on_full_output_buffer_fragmented+0xb8>
 8012c7e:	bf00      	nop
 8012c80:	08012b6d 	.word	0x08012b6d

08012c84 <uxr_prepare_output_stream>:
 8012c84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012c86:	b087      	sub	sp, #28
 8012c88:	2707      	movs	r7, #7
 8012c8a:	9202      	str	r2, [sp, #8]
 8012c8c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8012c8e:	2500      	movs	r5, #0
 8012c90:	3204      	adds	r2, #4
 8012c92:	e9cd 7500 	strd	r7, r5, [sp]
 8012c96:	461c      	mov	r4, r3
 8012c98:	4606      	mov	r6, r0
 8012c9a:	f7ff fc6d 	bl	8012578 <uxr_prepare_stream_to_write_submessage>
 8012c9e:	f080 0201 	eor.w	r2, r0, #1
 8012ca2:	b2d2      	uxtb	r2, r2
 8012ca4:	75a2      	strb	r2, [r4, #22]
 8012ca6:	b112      	cbz	r2, 8012cae <uxr_prepare_output_stream+0x2a>
 8012ca8:	4628      	mov	r0, r5
 8012caa:	b007      	add	sp, #28
 8012cac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012cae:	aa05      	add	r2, sp, #20
 8012cb0:	9902      	ldr	r1, [sp, #8]
 8012cb2:	4630      	mov	r0, r6
 8012cb4:	f7ff fd9a 	bl	80127ec <uxr_init_base_object_request>
 8012cb8:	a905      	add	r1, sp, #20
 8012cba:	4605      	mov	r5, r0
 8012cbc:	4620      	mov	r0, r4
 8012cbe:	f001 f895 	bl	8013dec <uxr_serialize_WRITE_DATA_Payload_Data>
 8012cc2:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8012cc6:	69a6      	ldr	r6, [r4, #24]
 8012cc8:	69e7      	ldr	r7, [r4, #28]
 8012cca:	1a52      	subs	r2, r2, r1
 8012ccc:	4620      	mov	r0, r4
 8012cce:	f7fe fa53 	bl	8011178 <ucdr_init_buffer>
 8012cd2:	4620      	mov	r0, r4
 8012cd4:	463a      	mov	r2, r7
 8012cd6:	4631      	mov	r1, r6
 8012cd8:	f7fe fa22 	bl	8011120 <ucdr_set_on_full_buffer_callback>
 8012cdc:	4628      	mov	r0, r5
 8012cde:	b007      	add	sp, #28
 8012ce0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012ce2:	bf00      	nop

08012ce4 <uxr_prepare_output_stream_fragmented>:
 8012ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ce8:	b093      	sub	sp, #76	@ 0x4c
 8012cea:	4605      	mov	r5, r0
 8012cec:	9107      	str	r1, [sp, #28]
 8012cee:	3008      	adds	r0, #8
 8012cf0:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8012cf4:	9303      	str	r3, [sp, #12]
 8012cf6:	9206      	str	r2, [sp, #24]
 8012cf8:	f7ff fe8e 	bl	8012a18 <uxr_get_output_reliable_stream>
 8012cfc:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8012d00:	2b01      	cmp	r3, #1
 8012d02:	f000 8095 	beq.w	8012e30 <uxr_prepare_output_stream_fragmented+0x14c>
 8012d06:	4604      	mov	r4, r0
 8012d08:	2800      	cmp	r0, #0
 8012d0a:	f000 8091 	beq.w	8012e30 <uxr_prepare_output_stream_fragmented+0x14c>
 8012d0e:	f007 fee3 	bl	801aad8 <get_available_free_slots>
 8012d12:	2800      	cmp	r0, #0
 8012d14:	f000 8087 	beq.w	8012e26 <uxr_prepare_output_stream_fragmented+0x142>
 8012d18:	8922      	ldrh	r2, [r4, #8]
 8012d1a:	89e7      	ldrh	r7, [r4, #14]
 8012d1c:	fbb7 f3f2 	udiv	r3, r7, r2
 8012d20:	fb02 7313 	mls	r3, r2, r3, r7
 8012d24:	b29b      	uxth	r3, r3
 8012d26:	6861      	ldr	r1, [r4, #4]
 8012d28:	fbb1 f1f2 	udiv	r1, r1, r2
 8012d2c:	6822      	ldr	r2, [r4, #0]
 8012d2e:	9105      	str	r1, [sp, #20]
 8012d30:	fb01 f303 	mul.w	r3, r1, r3
 8012d34:	3304      	adds	r3, #4
 8012d36:	eb02 0903 	add.w	r9, r2, r3
 8012d3a:	7b23      	ldrb	r3, [r4, #12]
 8012d3c:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8012d40:	4543      	cmp	r3, r8
 8012d42:	f1a1 0b04 	sub.w	fp, r1, #4
 8012d46:	d37f      	bcc.n	8012e48 <uxr_prepare_output_stream_fragmented+0x164>
 8012d48:	f1ab 0a04 	sub.w	sl, fp, #4
 8012d4c:	ebaa 0a03 	sub.w	sl, sl, r3
 8012d50:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8012d52:	f8cd 8000 	str.w	r8, [sp]
 8012d56:	fa1f f38a 	uxth.w	r3, sl
 8012d5a:	9304      	str	r3, [sp, #16]
 8012d5c:	465a      	mov	r2, fp
 8012d5e:	2300      	movs	r3, #0
 8012d60:	4649      	mov	r1, r9
 8012d62:	a80a      	add	r0, sp, #40	@ 0x28
 8012d64:	f7fe f9f6 	bl	8011154 <ucdr_init_buffer_origin_offset>
 8012d68:	f106 0a08 	add.w	sl, r6, #8
 8012d6c:	45da      	cmp	sl, fp
 8012d6e:	bf2c      	ite	cs
 8012d70:	2300      	movcs	r3, #0
 8012d72:	2301      	movcc	r3, #1
 8012d74:	9a04      	ldr	r2, [sp, #16]
 8012d76:	005b      	lsls	r3, r3, #1
 8012d78:	210d      	movs	r1, #13
 8012d7a:	a80a      	add	r0, sp, #40	@ 0x28
 8012d7c:	f7ff fe80 	bl	8012a80 <uxr_buffer_submessage_header>
 8012d80:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8012d84:	fbb7 f2fc 	udiv	r2, r7, ip
 8012d88:	fb0c 7212 	mls	r2, ip, r2, r7
 8012d8c:	b292      	uxth	r2, r2
 8012d8e:	6863      	ldr	r3, [r4, #4]
 8012d90:	fbb3 f3fc 	udiv	r3, r3, ip
 8012d94:	fb02 f303 	mul.w	r3, r2, r3
 8012d98:	6822      	ldr	r2, [r4, #0]
 8012d9a:	2101      	movs	r1, #1
 8012d9c:	f842 b003 	str.w	fp, [r2, r3]
 8012da0:	4638      	mov	r0, r7
 8012da2:	f007 ffed 	bl	801ad80 <uxr_seq_num_add>
 8012da6:	9b05      	ldr	r3, [sp, #20]
 8012da8:	9e03      	ldr	r6, [sp, #12]
 8012daa:	f1a3 0208 	sub.w	r2, r3, #8
 8012dae:	f108 0104 	add.w	r1, r8, #4
 8012db2:	4607      	mov	r7, r0
 8012db4:	eba2 0208 	sub.w	r2, r2, r8
 8012db8:	4449      	add	r1, r9
 8012dba:	4630      	mov	r0, r6
 8012dbc:	f7fe f9dc 	bl	8011178 <ucdr_init_buffer>
 8012dc0:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8012dc2:	81e7      	strh	r7, [r4, #14]
 8012dc4:	1d1a      	adds	r2, r3, #4
 8012dc6:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8012dca:	bf28      	it	cs
 8012dcc:	2200      	movcs	r2, #0
 8012dce:	2300      	movs	r3, #0
 8012dd0:	b292      	uxth	r2, r2
 8012dd2:	2107      	movs	r1, #7
 8012dd4:	4630      	mov	r0, r6
 8012dd6:	f7ff fe53 	bl	8012a80 <uxr_buffer_submessage_header>
 8012dda:	9906      	ldr	r1, [sp, #24]
 8012ddc:	aa09      	add	r2, sp, #36	@ 0x24
 8012dde:	4628      	mov	r0, r5
 8012de0:	f7ff fd04 	bl	80127ec <uxr_init_base_object_request>
 8012de4:	4604      	mov	r4, r0
 8012de6:	b320      	cbz	r0, 8012e32 <uxr_prepare_output_stream_fragmented+0x14e>
 8012de8:	9e03      	ldr	r6, [sp, #12]
 8012dea:	a909      	add	r1, sp, #36	@ 0x24
 8012dec:	4630      	mov	r0, r6
 8012dee:	f000 fffd 	bl	8013dec <uxr_serialize_WRITE_DATA_Payload_Data>
 8012df2:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8012df6:	4630      	mov	r0, r6
 8012df8:	1a52      	subs	r2, r2, r1
 8012dfa:	f7fe f9bd 	bl	8011178 <ucdr_init_buffer>
 8012dfe:	9b07      	ldr	r3, [sp, #28]
 8012e00:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 8012e04:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8012e06:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 8012e0a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8012e0c:	491a      	ldr	r1, [pc, #104]	@ (8012e78 <uxr_prepare_output_stream_fragmented+0x194>)
 8012e0e:	f8c5 a0c4 	str.w	sl, [r5, #196]	@ 0xc4
 8012e12:	4630      	mov	r0, r6
 8012e14:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 8012e18:	462a      	mov	r2, r5
 8012e1a:	f7fe f981 	bl	8011120 <ucdr_set_on_full_buffer_callback>
 8012e1e:	4620      	mov	r0, r4
 8012e20:	b013      	add	sp, #76	@ 0x4c
 8012e22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e26:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8012e28:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8012e2a:	4628      	mov	r0, r5
 8012e2c:	4798      	blx	r3
 8012e2e:	b920      	cbnz	r0, 8012e3a <uxr_prepare_output_stream_fragmented+0x156>
 8012e30:	2400      	movs	r4, #0
 8012e32:	4620      	mov	r0, r4
 8012e34:	b013      	add	sp, #76	@ 0x4c
 8012e36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e3a:	4620      	mov	r0, r4
 8012e3c:	f007 fe4c 	bl	801aad8 <get_available_free_slots>
 8012e40:	2800      	cmp	r0, #0
 8012e42:	f47f af69 	bne.w	8012d18 <uxr_prepare_output_stream_fragmented+0x34>
 8012e46:	e7f3      	b.n	8012e30 <uxr_prepare_output_stream_fragmented+0x14c>
 8012e48:	4638      	mov	r0, r7
 8012e4a:	2101      	movs	r1, #1
 8012e4c:	f007 ff98 	bl	801ad80 <uxr_seq_num_add>
 8012e50:	8921      	ldrh	r1, [r4, #8]
 8012e52:	fbb0 f2f1 	udiv	r2, r0, r1
 8012e56:	fb01 0212 	mls	r2, r1, r2, r0
 8012e5a:	b292      	uxth	r2, r2
 8012e5c:	6863      	ldr	r3, [r4, #4]
 8012e5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8012e62:	fb02 f303 	mul.w	r3, r2, r3
 8012e66:	6822      	ldr	r2, [r4, #0]
 8012e68:	3304      	adds	r3, #4
 8012e6a:	eb02 0903 	add.w	r9, r2, r3
 8012e6e:	4607      	mov	r7, r0
 8012e70:	7b23      	ldrb	r3, [r4, #12]
 8012e72:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8012e76:	e767      	b.n	8012d48 <uxr_prepare_output_stream_fragmented+0x64>
 8012e78:	08012b6d 	.word	0x08012b6d

08012e7c <uxr_serialize_message_header>:
 8012e7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e80:	4617      	mov	r7, r2
 8012e82:	4604      	mov	r4, r0
 8012e84:	461e      	mov	r6, r3
 8012e86:	460d      	mov	r5, r1
 8012e88:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8012e8c:	f7fc fc10 	bl	800f6b0 <ucdr_serialize_uint8_t>
 8012e90:	4639      	mov	r1, r7
 8012e92:	4620      	mov	r0, r4
 8012e94:	f7fc fc0c 	bl	800f6b0 <ucdr_serialize_uint8_t>
 8012e98:	4632      	mov	r2, r6
 8012e9a:	2101      	movs	r1, #1
 8012e9c:	4620      	mov	r0, r4
 8012e9e:	f7fc fcbd 	bl	800f81c <ucdr_serialize_endian_uint16_t>
 8012ea2:	062b      	lsls	r3, r5, #24
 8012ea4:	d501      	bpl.n	8012eaa <uxr_serialize_message_header+0x2e>
 8012ea6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012eaa:	4641      	mov	r1, r8
 8012eac:	4620      	mov	r0, r4
 8012eae:	2204      	movs	r2, #4
 8012eb0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012eb4:	f7fc b906 	b.w	800f0c4 <ucdr_serialize_array_uint8_t>

08012eb8 <uxr_deserialize_message_header>:
 8012eb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012ebc:	4617      	mov	r7, r2
 8012ebe:	4604      	mov	r4, r0
 8012ec0:	461e      	mov	r6, r3
 8012ec2:	460d      	mov	r5, r1
 8012ec4:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8012ec8:	f7fc fc08 	bl	800f6dc <ucdr_deserialize_uint8_t>
 8012ecc:	4639      	mov	r1, r7
 8012ece:	4620      	mov	r0, r4
 8012ed0:	f7fc fc04 	bl	800f6dc <ucdr_deserialize_uint8_t>
 8012ed4:	4632      	mov	r2, r6
 8012ed6:	2101      	movs	r1, #1
 8012ed8:	4620      	mov	r0, r4
 8012eda:	f7fc fd95 	bl	800fa08 <ucdr_deserialize_endian_uint16_t>
 8012ede:	f995 3000 	ldrsb.w	r3, [r5]
 8012ee2:	2b00      	cmp	r3, #0
 8012ee4:	da01      	bge.n	8012eea <uxr_deserialize_message_header+0x32>
 8012ee6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012eea:	4641      	mov	r1, r8
 8012eec:	4620      	mov	r0, r4
 8012eee:	2204      	movs	r2, #4
 8012ef0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012ef4:	f7fc b94a 	b.w	800f18c <ucdr_deserialize_array_uint8_t>

08012ef8 <uxr_serialize_submessage_header>:
 8012ef8:	b570      	push	{r4, r5, r6, lr}
 8012efa:	4616      	mov	r6, r2
 8012efc:	4604      	mov	r4, r0
 8012efe:	461d      	mov	r5, r3
 8012f00:	f7fc fbd6 	bl	800f6b0 <ucdr_serialize_uint8_t>
 8012f04:	4631      	mov	r1, r6
 8012f06:	4620      	mov	r0, r4
 8012f08:	f7fc fbd2 	bl	800f6b0 <ucdr_serialize_uint8_t>
 8012f0c:	462a      	mov	r2, r5
 8012f0e:	4620      	mov	r0, r4
 8012f10:	2101      	movs	r1, #1
 8012f12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012f16:	f7fc bc81 	b.w	800f81c <ucdr_serialize_endian_uint16_t>
 8012f1a:	bf00      	nop

08012f1c <uxr_deserialize_submessage_header>:
 8012f1c:	b570      	push	{r4, r5, r6, lr}
 8012f1e:	4616      	mov	r6, r2
 8012f20:	4604      	mov	r4, r0
 8012f22:	461d      	mov	r5, r3
 8012f24:	f7fc fbda 	bl	800f6dc <ucdr_deserialize_uint8_t>
 8012f28:	4631      	mov	r1, r6
 8012f2a:	4620      	mov	r0, r4
 8012f2c:	f7fc fbd6 	bl	800f6dc <ucdr_deserialize_uint8_t>
 8012f30:	462a      	mov	r2, r5
 8012f32:	4620      	mov	r0, r4
 8012f34:	2101      	movs	r1, #1
 8012f36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012f3a:	f7fc bd65 	b.w	800fa08 <ucdr_deserialize_endian_uint16_t>
 8012f3e:	bf00      	nop

08012f40 <uxr_serialize_CLIENT_Representation>:
 8012f40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012f44:	2204      	movs	r2, #4
 8012f46:	460e      	mov	r6, r1
 8012f48:	4605      	mov	r5, r0
 8012f4a:	f7fc f8bb 	bl	800f0c4 <ucdr_serialize_array_uint8_t>
 8012f4e:	2202      	movs	r2, #2
 8012f50:	1d31      	adds	r1, r6, #4
 8012f52:	4604      	mov	r4, r0
 8012f54:	4628      	mov	r0, r5
 8012f56:	f7fc f8b5 	bl	800f0c4 <ucdr_serialize_array_uint8_t>
 8012f5a:	2202      	movs	r2, #2
 8012f5c:	4004      	ands	r4, r0
 8012f5e:	1db1      	adds	r1, r6, #6
 8012f60:	4628      	mov	r0, r5
 8012f62:	f7fc f8af 	bl	800f0c4 <ucdr_serialize_array_uint8_t>
 8012f66:	b2e4      	uxtb	r4, r4
 8012f68:	2204      	movs	r2, #4
 8012f6a:	4004      	ands	r4, r0
 8012f6c:	f106 0108 	add.w	r1, r6, #8
 8012f70:	4628      	mov	r0, r5
 8012f72:	f7fc f8a7 	bl	800f0c4 <ucdr_serialize_array_uint8_t>
 8012f76:	7b31      	ldrb	r1, [r6, #12]
 8012f78:	ea00 0804 	and.w	r8, r0, r4
 8012f7c:	4628      	mov	r0, r5
 8012f7e:	f7fc fb97 	bl	800f6b0 <ucdr_serialize_uint8_t>
 8012f82:	7b71      	ldrb	r1, [r6, #13]
 8012f84:	ea08 0800 	and.w	r8, r8, r0
 8012f88:	4628      	mov	r0, r5
 8012f8a:	f7fc fb63 	bl	800f654 <ucdr_serialize_bool>
 8012f8e:	7b73      	ldrb	r3, [r6, #13]
 8012f90:	ea08 0800 	and.w	r8, r8, r0
 8012f94:	b93b      	cbnz	r3, 8012fa6 <uxr_serialize_CLIENT_Representation+0x66>
 8012f96:	8bb1      	ldrh	r1, [r6, #28]
 8012f98:	4628      	mov	r0, r5
 8012f9a:	f7fc fbb5 	bl	800f708 <ucdr_serialize_uint16_t>
 8012f9e:	ea08 0000 	and.w	r0, r8, r0
 8012fa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012fa6:	6931      	ldr	r1, [r6, #16]
 8012fa8:	4628      	mov	r0, r5
 8012faa:	f7fc fd9d 	bl	800fae8 <ucdr_serialize_uint32_t>
 8012fae:	6933      	ldr	r3, [r6, #16]
 8012fb0:	b1e3      	cbz	r3, 8012fec <uxr_serialize_CLIENT_Representation+0xac>
 8012fb2:	b1c0      	cbz	r0, 8012fe6 <uxr_serialize_CLIENT_Representation+0xa6>
 8012fb4:	4637      	mov	r7, r6
 8012fb6:	f04f 0900 	mov.w	r9, #0
 8012fba:	e001      	b.n	8012fc0 <uxr_serialize_CLIENT_Representation+0x80>
 8012fbc:	3708      	adds	r7, #8
 8012fbe:	b194      	cbz	r4, 8012fe6 <uxr_serialize_CLIENT_Representation+0xa6>
 8012fc0:	6979      	ldr	r1, [r7, #20]
 8012fc2:	4628      	mov	r0, r5
 8012fc4:	f006 ffa0 	bl	8019f08 <ucdr_serialize_string>
 8012fc8:	69b9      	ldr	r1, [r7, #24]
 8012fca:	4604      	mov	r4, r0
 8012fcc:	4628      	mov	r0, r5
 8012fce:	f006 ff9b 	bl	8019f08 <ucdr_serialize_string>
 8012fd2:	6933      	ldr	r3, [r6, #16]
 8012fd4:	f109 0901 	add.w	r9, r9, #1
 8012fd8:	4004      	ands	r4, r0
 8012fda:	4599      	cmp	r9, r3
 8012fdc:	b2e4      	uxtb	r4, r4
 8012fde:	d3ed      	bcc.n	8012fbc <uxr_serialize_CLIENT_Representation+0x7c>
 8012fe0:	ea08 0804 	and.w	r8, r8, r4
 8012fe4:	e7d7      	b.n	8012f96 <uxr_serialize_CLIENT_Representation+0x56>
 8012fe6:	f04f 0800 	mov.w	r8, #0
 8012fea:	e7d4      	b.n	8012f96 <uxr_serialize_CLIENT_Representation+0x56>
 8012fec:	ea08 0800 	and.w	r8, r8, r0
 8012ff0:	e7d1      	b.n	8012f96 <uxr_serialize_CLIENT_Representation+0x56>
 8012ff2:	bf00      	nop

08012ff4 <uxr_deserialize_CLIENT_Representation>:
 8012ff4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012ff8:	2204      	movs	r2, #4
 8012ffa:	460c      	mov	r4, r1
 8012ffc:	4605      	mov	r5, r0
 8012ffe:	f7fc f8c5 	bl	800f18c <ucdr_deserialize_array_uint8_t>
 8013002:	2202      	movs	r2, #2
 8013004:	1d21      	adds	r1, r4, #4
 8013006:	4606      	mov	r6, r0
 8013008:	4628      	mov	r0, r5
 801300a:	f7fc f8bf 	bl	800f18c <ucdr_deserialize_array_uint8_t>
 801300e:	2202      	movs	r2, #2
 8013010:	4006      	ands	r6, r0
 8013012:	1da1      	adds	r1, r4, #6
 8013014:	4628      	mov	r0, r5
 8013016:	f7fc f8b9 	bl	800f18c <ucdr_deserialize_array_uint8_t>
 801301a:	b2f6      	uxtb	r6, r6
 801301c:	2204      	movs	r2, #4
 801301e:	4006      	ands	r6, r0
 8013020:	f104 0108 	add.w	r1, r4, #8
 8013024:	4628      	mov	r0, r5
 8013026:	f7fc f8b1 	bl	800f18c <ucdr_deserialize_array_uint8_t>
 801302a:	f104 010c 	add.w	r1, r4, #12
 801302e:	ea00 0706 	and.w	r7, r0, r6
 8013032:	4628      	mov	r0, r5
 8013034:	f7fc fb52 	bl	800f6dc <ucdr_deserialize_uint8_t>
 8013038:	f104 010d 	add.w	r1, r4, #13
 801303c:	4007      	ands	r7, r0
 801303e:	4628      	mov	r0, r5
 8013040:	f7fc fb1e 	bl	800f680 <ucdr_deserialize_bool>
 8013044:	7b63      	ldrb	r3, [r4, #13]
 8013046:	4007      	ands	r7, r0
 8013048:	b93b      	cbnz	r3, 801305a <uxr_deserialize_CLIENT_Representation+0x66>
 801304a:	f104 011c 	add.w	r1, r4, #28
 801304e:	4628      	mov	r0, r5
 8013050:	f7fc fc5e 	bl	800f910 <ucdr_deserialize_uint16_t>
 8013054:	4038      	ands	r0, r7
 8013056:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801305a:	f104 0110 	add.w	r1, r4, #16
 801305e:	4628      	mov	r0, r5
 8013060:	f7fc fe6c 	bl	800fd3c <ucdr_deserialize_uint32_t>
 8013064:	6923      	ldr	r3, [r4, #16]
 8013066:	2b01      	cmp	r3, #1
 8013068:	d903      	bls.n	8013072 <uxr_deserialize_CLIENT_Representation+0x7e>
 801306a:	2301      	movs	r3, #1
 801306c:	75ab      	strb	r3, [r5, #22]
 801306e:	2700      	movs	r7, #0
 8013070:	e7eb      	b.n	801304a <uxr_deserialize_CLIENT_Representation+0x56>
 8013072:	b30b      	cbz	r3, 80130b8 <uxr_deserialize_CLIENT_Representation+0xc4>
 8013074:	2800      	cmp	r0, #0
 8013076:	d0fa      	beq.n	801306e <uxr_deserialize_CLIENT_Representation+0x7a>
 8013078:	46a0      	mov	r8, r4
 801307a:	f04f 0900 	mov.w	r9, #0
 801307e:	e003      	b.n	8013088 <uxr_deserialize_CLIENT_Representation+0x94>
 8013080:	f108 0808 	add.w	r8, r8, #8
 8013084:	2e00      	cmp	r6, #0
 8013086:	d0f2      	beq.n	801306e <uxr_deserialize_CLIENT_Representation+0x7a>
 8013088:	f8d8 1014 	ldr.w	r1, [r8, #20]
 801308c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013090:	4628      	mov	r0, r5
 8013092:	f006 ff47 	bl	8019f24 <ucdr_deserialize_string>
 8013096:	f8d8 1018 	ldr.w	r1, [r8, #24]
 801309a:	4606      	mov	r6, r0
 801309c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80130a0:	4628      	mov	r0, r5
 80130a2:	f006 ff3f 	bl	8019f24 <ucdr_deserialize_string>
 80130a6:	6923      	ldr	r3, [r4, #16]
 80130a8:	f109 0901 	add.w	r9, r9, #1
 80130ac:	4006      	ands	r6, r0
 80130ae:	4599      	cmp	r9, r3
 80130b0:	b2f6      	uxtb	r6, r6
 80130b2:	d3e5      	bcc.n	8013080 <uxr_deserialize_CLIENT_Representation+0x8c>
 80130b4:	4037      	ands	r7, r6
 80130b6:	e7c8      	b.n	801304a <uxr_deserialize_CLIENT_Representation+0x56>
 80130b8:	4007      	ands	r7, r0
 80130ba:	e7c6      	b.n	801304a <uxr_deserialize_CLIENT_Representation+0x56>

080130bc <uxr_serialize_AGENT_Representation>:
 80130bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80130c0:	2204      	movs	r2, #4
 80130c2:	460f      	mov	r7, r1
 80130c4:	4605      	mov	r5, r0
 80130c6:	f7fb fffd 	bl	800f0c4 <ucdr_serialize_array_uint8_t>
 80130ca:	2202      	movs	r2, #2
 80130cc:	4604      	mov	r4, r0
 80130ce:	1d39      	adds	r1, r7, #4
 80130d0:	4628      	mov	r0, r5
 80130d2:	f7fb fff7 	bl	800f0c4 <ucdr_serialize_array_uint8_t>
 80130d6:	4020      	ands	r0, r4
 80130d8:	2202      	movs	r2, #2
 80130da:	b2c4      	uxtb	r4, r0
 80130dc:	1db9      	adds	r1, r7, #6
 80130de:	4628      	mov	r0, r5
 80130e0:	f7fb fff0 	bl	800f0c4 <ucdr_serialize_array_uint8_t>
 80130e4:	7a39      	ldrb	r1, [r7, #8]
 80130e6:	4004      	ands	r4, r0
 80130e8:	4628      	mov	r0, r5
 80130ea:	f7fc fab3 	bl	800f654 <ucdr_serialize_bool>
 80130ee:	7a3b      	ldrb	r3, [r7, #8]
 80130f0:	ea00 0804 	and.w	r8, r0, r4
 80130f4:	b913      	cbnz	r3, 80130fc <uxr_serialize_AGENT_Representation+0x40>
 80130f6:	4640      	mov	r0, r8
 80130f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80130fc:	68f9      	ldr	r1, [r7, #12]
 80130fe:	4628      	mov	r0, r5
 8013100:	f7fc fcf2 	bl	800fae8 <ucdr_serialize_uint32_t>
 8013104:	68fb      	ldr	r3, [r7, #12]
 8013106:	b303      	cbz	r3, 801314a <uxr_serialize_AGENT_Representation+0x8e>
 8013108:	b1d0      	cbz	r0, 8013140 <uxr_serialize_AGENT_Representation+0x84>
 801310a:	463e      	mov	r6, r7
 801310c:	f04f 0900 	mov.w	r9, #0
 8013110:	e001      	b.n	8013116 <uxr_serialize_AGENT_Representation+0x5a>
 8013112:	3608      	adds	r6, #8
 8013114:	b1a4      	cbz	r4, 8013140 <uxr_serialize_AGENT_Representation+0x84>
 8013116:	6931      	ldr	r1, [r6, #16]
 8013118:	4628      	mov	r0, r5
 801311a:	f006 fef5 	bl	8019f08 <ucdr_serialize_string>
 801311e:	6971      	ldr	r1, [r6, #20]
 8013120:	4604      	mov	r4, r0
 8013122:	4628      	mov	r0, r5
 8013124:	f006 fef0 	bl	8019f08 <ucdr_serialize_string>
 8013128:	68fb      	ldr	r3, [r7, #12]
 801312a:	f109 0901 	add.w	r9, r9, #1
 801312e:	4004      	ands	r4, r0
 8013130:	4599      	cmp	r9, r3
 8013132:	b2e4      	uxtb	r4, r4
 8013134:	d3ed      	bcc.n	8013112 <uxr_serialize_AGENT_Representation+0x56>
 8013136:	ea08 0804 	and.w	r8, r8, r4
 801313a:	4640      	mov	r0, r8
 801313c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013140:	f04f 0800 	mov.w	r8, #0
 8013144:	4640      	mov	r0, r8
 8013146:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801314a:	ea08 0800 	and.w	r8, r8, r0
 801314e:	e7d2      	b.n	80130f6 <uxr_serialize_AGENT_Representation+0x3a>

08013150 <uxr_serialize_DATAWRITER_Representation>:
 8013150:	b570      	push	{r4, r5, r6, lr}
 8013152:	460d      	mov	r5, r1
 8013154:	7809      	ldrb	r1, [r1, #0]
 8013156:	4606      	mov	r6, r0
 8013158:	f7fc faaa 	bl	800f6b0 <ucdr_serialize_uint8_t>
 801315c:	4604      	mov	r4, r0
 801315e:	b130      	cbz	r0, 801316e <uxr_serialize_DATAWRITER_Representation+0x1e>
 8013160:	782b      	ldrb	r3, [r5, #0]
 8013162:	2b02      	cmp	r3, #2
 8013164:	d00c      	beq.n	8013180 <uxr_serialize_DATAWRITER_Representation+0x30>
 8013166:	2b03      	cmp	r3, #3
 8013168:	d010      	beq.n	801318c <uxr_serialize_DATAWRITER_Representation+0x3c>
 801316a:	2b01      	cmp	r3, #1
 801316c:	d008      	beq.n	8013180 <uxr_serialize_DATAWRITER_Representation+0x30>
 801316e:	2202      	movs	r2, #2
 8013170:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 8013174:	4630      	mov	r0, r6
 8013176:	f7fb ffa5 	bl	800f0c4 <ucdr_serialize_array_uint8_t>
 801317a:	4020      	ands	r0, r4
 801317c:	b2c0      	uxtb	r0, r0
 801317e:	bd70      	pop	{r4, r5, r6, pc}
 8013180:	6869      	ldr	r1, [r5, #4]
 8013182:	4630      	mov	r0, r6
 8013184:	f006 fec0 	bl	8019f08 <ucdr_serialize_string>
 8013188:	4604      	mov	r4, r0
 801318a:	e7f0      	b.n	801316e <uxr_serialize_DATAWRITER_Representation+0x1e>
 801318c:	4629      	mov	r1, r5
 801318e:	4630      	mov	r0, r6
 8013190:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8013194:	3104      	adds	r1, #4
 8013196:	f7fe f88d 	bl	80112b4 <ucdr_serialize_sequence_uint8_t>
 801319a:	4604      	mov	r4, r0
 801319c:	e7e7      	b.n	801316e <uxr_serialize_DATAWRITER_Representation+0x1e>
 801319e:	bf00      	nop

080131a0 <uxr_serialize_ObjectVariant.part.0>:
 80131a0:	b570      	push	{r4, r5, r6, lr}
 80131a2:	780b      	ldrb	r3, [r1, #0]
 80131a4:	3b01      	subs	r3, #1
 80131a6:	460c      	mov	r4, r1
 80131a8:	4605      	mov	r5, r0
 80131aa:	2b0d      	cmp	r3, #13
 80131ac:	d816      	bhi.n	80131dc <uxr_serialize_ObjectVariant.part.0+0x3c>
 80131ae:	e8df f003 	tbb	[pc, r3]
 80131b2:	0733      	.short	0x0733
 80131b4:	07071717 	.word	0x07071717
 80131b8:	0c150707 	.word	0x0c150707
 80131bc:	4c510c0c 	.word	0x4c510c0c
 80131c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80131c4:	3104      	adds	r1, #4
 80131c6:	f7ff bfc3 	b.w	8013150 <uxr_serialize_DATAWRITER_Representation>
 80131ca:	7909      	ldrb	r1, [r1, #4]
 80131cc:	f7fc fa70 	bl	800f6b0 <ucdr_serialize_uint8_t>
 80131d0:	b300      	cbz	r0, 8013214 <uxr_serialize_ObjectVariant.part.0+0x74>
 80131d2:	7923      	ldrb	r3, [r4, #4]
 80131d4:	2b01      	cmp	r3, #1
 80131d6:	d042      	beq.n	801325e <uxr_serialize_ObjectVariant.part.0+0xbe>
 80131d8:	2b02      	cmp	r3, #2
 80131da:	d040      	beq.n	801325e <uxr_serialize_ObjectVariant.part.0+0xbe>
 80131dc:	2001      	movs	r0, #1
 80131de:	bd70      	pop	{r4, r5, r6, pc}
 80131e0:	7909      	ldrb	r1, [r1, #4]
 80131e2:	f7fc fa65 	bl	800f6b0 <ucdr_serialize_uint8_t>
 80131e6:	4606      	mov	r6, r0
 80131e8:	b158      	cbz	r0, 8013202 <uxr_serialize_ObjectVariant.part.0+0x62>
 80131ea:	7923      	ldrb	r3, [r4, #4]
 80131ec:	2b02      	cmp	r3, #2
 80131ee:	d03c      	beq.n	801326a <uxr_serialize_ObjectVariant.part.0+0xca>
 80131f0:	2b03      	cmp	r3, #3
 80131f2:	d106      	bne.n	8013202 <uxr_serialize_ObjectVariant.part.0+0x62>
 80131f4:	68a2      	ldr	r2, [r4, #8]
 80131f6:	f104 010c 	add.w	r1, r4, #12
 80131fa:	4628      	mov	r0, r5
 80131fc:	f7fe f85a 	bl	80112b4 <ucdr_serialize_sequence_uint8_t>
 8013200:	4606      	mov	r6, r0
 8013202:	2202      	movs	r2, #2
 8013204:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 8013208:	4628      	mov	r0, r5
 801320a:	f7fb ff5b 	bl	800f0c4 <ucdr_serialize_array_uint8_t>
 801320e:	4030      	ands	r0, r6
 8013210:	b2c0      	uxtb	r0, r0
 8013212:	bd70      	pop	{r4, r5, r6, pc}
 8013214:	2000      	movs	r0, #0
 8013216:	bd70      	pop	{r4, r5, r6, pc}
 8013218:	7909      	ldrb	r1, [r1, #4]
 801321a:	f7fc fa49 	bl	800f6b0 <ucdr_serialize_uint8_t>
 801321e:	4606      	mov	r6, r0
 8013220:	b158      	cbz	r0, 801323a <uxr_serialize_ObjectVariant.part.0+0x9a>
 8013222:	7923      	ldrb	r3, [r4, #4]
 8013224:	2b02      	cmp	r3, #2
 8013226:	d003      	beq.n	8013230 <uxr_serialize_ObjectVariant.part.0+0x90>
 8013228:	2b03      	cmp	r3, #3
 801322a:	d024      	beq.n	8013276 <uxr_serialize_ObjectVariant.part.0+0xd6>
 801322c:	2b01      	cmp	r3, #1
 801322e:	d104      	bne.n	801323a <uxr_serialize_ObjectVariant.part.0+0x9a>
 8013230:	68a1      	ldr	r1, [r4, #8]
 8013232:	4628      	mov	r0, r5
 8013234:	f006 fe68 	bl	8019f08 <ucdr_serialize_string>
 8013238:	4606      	mov	r6, r0
 801323a:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 801323e:	4628      	mov	r0, r5
 8013240:	f7fc ff5e 	bl	8010100 <ucdr_serialize_int16_t>
 8013244:	4030      	ands	r0, r6
 8013246:	b2c0      	uxtb	r0, r0
 8013248:	bd70      	pop	{r4, r5, r6, pc}
 801324a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801324e:	3104      	adds	r1, #4
 8013250:	f7ff be76 	b.w	8012f40 <uxr_serialize_CLIENT_Representation>
 8013254:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013258:	3104      	adds	r1, #4
 801325a:	f7ff bf2f 	b.w	80130bc <uxr_serialize_AGENT_Representation>
 801325e:	68a1      	ldr	r1, [r4, #8]
 8013260:	4628      	mov	r0, r5
 8013262:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013266:	f006 be4f 	b.w	8019f08 <ucdr_serialize_string>
 801326a:	68a1      	ldr	r1, [r4, #8]
 801326c:	4628      	mov	r0, r5
 801326e:	f006 fe4b 	bl	8019f08 <ucdr_serialize_string>
 8013272:	4606      	mov	r6, r0
 8013274:	e7c5      	b.n	8013202 <uxr_serialize_ObjectVariant.part.0+0x62>
 8013276:	68a2      	ldr	r2, [r4, #8]
 8013278:	f104 010c 	add.w	r1, r4, #12
 801327c:	4628      	mov	r0, r5
 801327e:	f7fe f819 	bl	80112b4 <ucdr_serialize_sequence_uint8_t>
 8013282:	4606      	mov	r6, r0
 8013284:	e7d9      	b.n	801323a <uxr_serialize_ObjectVariant.part.0+0x9a>
 8013286:	bf00      	nop

08013288 <uxr_deserialize_DATAWRITER_Representation>:
 8013288:	b570      	push	{r4, r5, r6, lr}
 801328a:	4606      	mov	r6, r0
 801328c:	460d      	mov	r5, r1
 801328e:	f7fc fa25 	bl	800f6dc <ucdr_deserialize_uint8_t>
 8013292:	4604      	mov	r4, r0
 8013294:	b130      	cbz	r0, 80132a4 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8013296:	782b      	ldrb	r3, [r5, #0]
 8013298:	2b02      	cmp	r3, #2
 801329a:	d00c      	beq.n	80132b6 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 801329c:	2b03      	cmp	r3, #3
 801329e:	d012      	beq.n	80132c6 <uxr_deserialize_DATAWRITER_Representation+0x3e>
 80132a0:	2b01      	cmp	r3, #1
 80132a2:	d008      	beq.n	80132b6 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 80132a4:	2202      	movs	r2, #2
 80132a6:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 80132aa:	4630      	mov	r0, r6
 80132ac:	f7fb ff6e 	bl	800f18c <ucdr_deserialize_array_uint8_t>
 80132b0:	4020      	ands	r0, r4
 80132b2:	b2c0      	uxtb	r0, r0
 80132b4:	bd70      	pop	{r4, r5, r6, pc}
 80132b6:	6869      	ldr	r1, [r5, #4]
 80132b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80132bc:	4630      	mov	r0, r6
 80132be:	f006 fe31 	bl	8019f24 <ucdr_deserialize_string>
 80132c2:	4604      	mov	r4, r0
 80132c4:	e7ee      	b.n	80132a4 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 80132c6:	1d2b      	adds	r3, r5, #4
 80132c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80132cc:	f105 0108 	add.w	r1, r5, #8
 80132d0:	4630      	mov	r0, r6
 80132d2:	f7fe f801 	bl	80112d8 <ucdr_deserialize_sequence_uint8_t>
 80132d6:	4604      	mov	r4, r0
 80132d8:	e7e4      	b.n	80132a4 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 80132da:	bf00      	nop

080132dc <uxr_serialize_OBJK_DomainParticipant_Binary>:
 80132dc:	b570      	push	{r4, r5, r6, lr}
 80132de:	460d      	mov	r5, r1
 80132e0:	7809      	ldrb	r1, [r1, #0]
 80132e2:	4606      	mov	r6, r0
 80132e4:	f7fc f9b6 	bl	800f654 <ucdr_serialize_bool>
 80132e8:	782b      	ldrb	r3, [r5, #0]
 80132ea:	4604      	mov	r4, r0
 80132ec:	b94b      	cbnz	r3, 8013302 <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 80132ee:	7a29      	ldrb	r1, [r5, #8]
 80132f0:	4630      	mov	r0, r6
 80132f2:	f7fc f9af 	bl	800f654 <ucdr_serialize_bool>
 80132f6:	7a2b      	ldrb	r3, [r5, #8]
 80132f8:	4004      	ands	r4, r0
 80132fa:	b2e4      	uxtb	r4, r4
 80132fc:	b943      	cbnz	r3, 8013310 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 80132fe:	4620      	mov	r0, r4
 8013300:	bd70      	pop	{r4, r5, r6, pc}
 8013302:	6869      	ldr	r1, [r5, #4]
 8013304:	4630      	mov	r0, r6
 8013306:	f006 fdff 	bl	8019f08 <ucdr_serialize_string>
 801330a:	4004      	ands	r4, r0
 801330c:	b2e4      	uxtb	r4, r4
 801330e:	e7ee      	b.n	80132ee <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 8013310:	68e9      	ldr	r1, [r5, #12]
 8013312:	4630      	mov	r0, r6
 8013314:	f006 fdf8 	bl	8019f08 <ucdr_serialize_string>
 8013318:	4004      	ands	r4, r0
 801331a:	4620      	mov	r0, r4
 801331c:	bd70      	pop	{r4, r5, r6, pc}
 801331e:	bf00      	nop

08013320 <uxr_serialize_OBJK_Topic_Binary>:
 8013320:	b570      	push	{r4, r5, r6, lr}
 8013322:	460d      	mov	r5, r1
 8013324:	6809      	ldr	r1, [r1, #0]
 8013326:	4606      	mov	r6, r0
 8013328:	f006 fdee 	bl	8019f08 <ucdr_serialize_string>
 801332c:	7929      	ldrb	r1, [r5, #4]
 801332e:	4604      	mov	r4, r0
 8013330:	4630      	mov	r0, r6
 8013332:	f7fc f98f 	bl	800f654 <ucdr_serialize_bool>
 8013336:	792b      	ldrb	r3, [r5, #4]
 8013338:	4004      	ands	r4, r0
 801333a:	b2e4      	uxtb	r4, r4
 801333c:	b943      	cbnz	r3, 8013350 <uxr_serialize_OBJK_Topic_Binary+0x30>
 801333e:	7b29      	ldrb	r1, [r5, #12]
 8013340:	4630      	mov	r0, r6
 8013342:	f7fc f987 	bl	800f654 <ucdr_serialize_bool>
 8013346:	7b2b      	ldrb	r3, [r5, #12]
 8013348:	4004      	ands	r4, r0
 801334a:	b93b      	cbnz	r3, 801335c <uxr_serialize_OBJK_Topic_Binary+0x3c>
 801334c:	4620      	mov	r0, r4
 801334e:	bd70      	pop	{r4, r5, r6, pc}
 8013350:	68a9      	ldr	r1, [r5, #8]
 8013352:	4630      	mov	r0, r6
 8013354:	f006 fdd8 	bl	8019f08 <ucdr_serialize_string>
 8013358:	4004      	ands	r4, r0
 801335a:	e7f0      	b.n	801333e <uxr_serialize_OBJK_Topic_Binary+0x1e>
 801335c:	6929      	ldr	r1, [r5, #16]
 801335e:	4630      	mov	r0, r6
 8013360:	f006 fdd2 	bl	8019f08 <ucdr_serialize_string>
 8013364:	4004      	ands	r4, r0
 8013366:	b2e4      	uxtb	r4, r4
 8013368:	4620      	mov	r0, r4
 801336a:	bd70      	pop	{r4, r5, r6, pc}

0801336c <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 801336c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013370:	460c      	mov	r4, r1
 8013372:	7809      	ldrb	r1, [r1, #0]
 8013374:	4606      	mov	r6, r0
 8013376:	f7fc f96d 	bl	800f654 <ucdr_serialize_bool>
 801337a:	7823      	ldrb	r3, [r4, #0]
 801337c:	4605      	mov	r5, r0
 801337e:	b96b      	cbnz	r3, 801339c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 8013380:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 8013384:	4630      	mov	r0, r6
 8013386:	f7fc f965 	bl	800f654 <ucdr_serialize_bool>
 801338a:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 801338e:	4005      	ands	r5, r0
 8013390:	b2ed      	uxtb	r5, r5
 8013392:	2b00      	cmp	r3, #0
 8013394:	d16a      	bne.n	801346c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x100>
 8013396:	4628      	mov	r0, r5
 8013398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801339c:	6861      	ldr	r1, [r4, #4]
 801339e:	4630      	mov	r0, r6
 80133a0:	f7fc fba2 	bl	800fae8 <ucdr_serialize_uint32_t>
 80133a4:	6863      	ldr	r3, [r4, #4]
 80133a6:	2b00      	cmp	r3, #0
 80133a8:	d06c      	beq.n	8013484 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x118>
 80133aa:	2800      	cmp	r0, #0
 80133ac:	d068      	beq.n	8013480 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 80133ae:	68a1      	ldr	r1, [r4, #8]
 80133b0:	4630      	mov	r0, r6
 80133b2:	f006 fda9 	bl	8019f08 <ucdr_serialize_string>
 80133b6:	6862      	ldr	r2, [r4, #4]
 80133b8:	2a01      	cmp	r2, #1
 80133ba:	d953      	bls.n	8013464 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80133bc:	2800      	cmp	r0, #0
 80133be:	d05f      	beq.n	8013480 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 80133c0:	68e1      	ldr	r1, [r4, #12]
 80133c2:	4630      	mov	r0, r6
 80133c4:	f006 fda0 	bl	8019f08 <ucdr_serialize_string>
 80133c8:	6862      	ldr	r2, [r4, #4]
 80133ca:	2a02      	cmp	r2, #2
 80133cc:	d94a      	bls.n	8013464 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80133ce:	2800      	cmp	r0, #0
 80133d0:	d056      	beq.n	8013480 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 80133d2:	6921      	ldr	r1, [r4, #16]
 80133d4:	4630      	mov	r0, r6
 80133d6:	f006 fd97 	bl	8019f08 <ucdr_serialize_string>
 80133da:	6862      	ldr	r2, [r4, #4]
 80133dc:	2a03      	cmp	r2, #3
 80133de:	d941      	bls.n	8013464 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80133e0:	2800      	cmp	r0, #0
 80133e2:	d04d      	beq.n	8013480 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 80133e4:	6961      	ldr	r1, [r4, #20]
 80133e6:	4630      	mov	r0, r6
 80133e8:	f006 fd8e 	bl	8019f08 <ucdr_serialize_string>
 80133ec:	6862      	ldr	r2, [r4, #4]
 80133ee:	2a04      	cmp	r2, #4
 80133f0:	d938      	bls.n	8013464 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80133f2:	2800      	cmp	r0, #0
 80133f4:	d044      	beq.n	8013480 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 80133f6:	69a1      	ldr	r1, [r4, #24]
 80133f8:	4630      	mov	r0, r6
 80133fa:	f006 fd85 	bl	8019f08 <ucdr_serialize_string>
 80133fe:	6862      	ldr	r2, [r4, #4]
 8013400:	2a05      	cmp	r2, #5
 8013402:	d92f      	bls.n	8013464 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013404:	2800      	cmp	r0, #0
 8013406:	d03b      	beq.n	8013480 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 8013408:	69e1      	ldr	r1, [r4, #28]
 801340a:	4630      	mov	r0, r6
 801340c:	f006 fd7c 	bl	8019f08 <ucdr_serialize_string>
 8013410:	6862      	ldr	r2, [r4, #4]
 8013412:	2a06      	cmp	r2, #6
 8013414:	d926      	bls.n	8013464 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013416:	b398      	cbz	r0, 8013480 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 8013418:	6a21      	ldr	r1, [r4, #32]
 801341a:	4630      	mov	r0, r6
 801341c:	f006 fd74 	bl	8019f08 <ucdr_serialize_string>
 8013420:	6862      	ldr	r2, [r4, #4]
 8013422:	2a07      	cmp	r2, #7
 8013424:	d91e      	bls.n	8013464 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013426:	b358      	cbz	r0, 8013480 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 8013428:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 801342a:	4630      	mov	r0, r6
 801342c:	f006 fd6c 	bl	8019f08 <ucdr_serialize_string>
 8013430:	6862      	ldr	r2, [r4, #4]
 8013432:	2a08      	cmp	r2, #8
 8013434:	d916      	bls.n	8013464 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013436:	b318      	cbz	r0, 8013480 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 8013438:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 801343a:	4630      	mov	r0, r6
 801343c:	f006 fd64 	bl	8019f08 <ucdr_serialize_string>
 8013440:	6862      	ldr	r2, [r4, #4]
 8013442:	2a09      	cmp	r2, #9
 8013444:	d90e      	bls.n	8013464 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013446:	b1d8      	cbz	r0, 8013480 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 8013448:	f104 0828 	add.w	r8, r4, #40	@ 0x28
 801344c:	2709      	movs	r7, #9
 801344e:	e000      	b.n	8013452 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 8013450:	b1b0      	cbz	r0, 8013480 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 8013452:	f858 1f04 	ldr.w	r1, [r8, #4]!
 8013456:	4630      	mov	r0, r6
 8013458:	f006 fd56 	bl	8019f08 <ucdr_serialize_string>
 801345c:	6862      	ldr	r2, [r4, #4]
 801345e:	3701      	adds	r7, #1
 8013460:	4297      	cmp	r7, r2
 8013462:	d3f5      	bcc.n	8013450 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 8013464:	ea05 0300 	and.w	r3, r5, r0
 8013468:	b2dd      	uxtb	r5, r3
 801346a:	e789      	b.n	8013380 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 801346c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801346e:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8013472:	4630      	mov	r0, r6
 8013474:	f7fd ff1e 	bl	80112b4 <ucdr_serialize_sequence_uint8_t>
 8013478:	4005      	ands	r5, r0
 801347a:	4628      	mov	r0, r5
 801347c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013480:	2500      	movs	r5, #0
 8013482:	e77d      	b.n	8013380 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8013484:	4028      	ands	r0, r5
 8013486:	b2c5      	uxtb	r5, r0
 8013488:	e77a      	b.n	8013380 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 801348a:	bf00      	nop

0801348c <uxr_serialize_OBJK_Publisher_Binary>:
 801348c:	b570      	push	{r4, r5, r6, lr}
 801348e:	460d      	mov	r5, r1
 8013490:	7809      	ldrb	r1, [r1, #0]
 8013492:	4606      	mov	r6, r0
 8013494:	f7fc f8de 	bl	800f654 <ucdr_serialize_bool>
 8013498:	782b      	ldrb	r3, [r5, #0]
 801349a:	4604      	mov	r4, r0
 801349c:	b94b      	cbnz	r3, 80134b2 <uxr_serialize_OBJK_Publisher_Binary+0x26>
 801349e:	7a29      	ldrb	r1, [r5, #8]
 80134a0:	4630      	mov	r0, r6
 80134a2:	f7fc f8d7 	bl	800f654 <ucdr_serialize_bool>
 80134a6:	7a2b      	ldrb	r3, [r5, #8]
 80134a8:	4004      	ands	r4, r0
 80134aa:	b2e4      	uxtb	r4, r4
 80134ac:	b943      	cbnz	r3, 80134c0 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 80134ae:	4620      	mov	r0, r4
 80134b0:	bd70      	pop	{r4, r5, r6, pc}
 80134b2:	6869      	ldr	r1, [r5, #4]
 80134b4:	4630      	mov	r0, r6
 80134b6:	f006 fd27 	bl	8019f08 <ucdr_serialize_string>
 80134ba:	4004      	ands	r4, r0
 80134bc:	b2e4      	uxtb	r4, r4
 80134be:	e7ee      	b.n	801349e <uxr_serialize_OBJK_Publisher_Binary+0x12>
 80134c0:	f105 010c 	add.w	r1, r5, #12
 80134c4:	4630      	mov	r0, r6
 80134c6:	f7ff ff51 	bl	801336c <uxr_serialize_OBJK_Publisher_Binary_Qos>
 80134ca:	4004      	ands	r4, r0
 80134cc:	4620      	mov	r0, r4
 80134ce:	bd70      	pop	{r4, r5, r6, pc}

080134d0 <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 80134d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80134d4:	460c      	mov	r4, r1
 80134d6:	7809      	ldrb	r1, [r1, #0]
 80134d8:	4606      	mov	r6, r0
 80134da:	f7fc f8bb 	bl	800f654 <ucdr_serialize_bool>
 80134de:	7823      	ldrb	r3, [r4, #0]
 80134e0:	4605      	mov	r5, r0
 80134e2:	b96b      	cbnz	r3, 8013500 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 80134e4:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 80134e8:	4630      	mov	r0, r6
 80134ea:	f7fc f8b3 	bl	800f654 <ucdr_serialize_bool>
 80134ee:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80134f2:	4005      	ands	r5, r0
 80134f4:	b2ed      	uxtb	r5, r5
 80134f6:	2b00      	cmp	r3, #0
 80134f8:	d16a      	bne.n	80135d0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x100>
 80134fa:	4628      	mov	r0, r5
 80134fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013500:	6861      	ldr	r1, [r4, #4]
 8013502:	4630      	mov	r0, r6
 8013504:	f7fc faf0 	bl	800fae8 <ucdr_serialize_uint32_t>
 8013508:	6863      	ldr	r3, [r4, #4]
 801350a:	2b00      	cmp	r3, #0
 801350c:	d06c      	beq.n	80135e8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x118>
 801350e:	2800      	cmp	r0, #0
 8013510:	d068      	beq.n	80135e4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 8013512:	68a1      	ldr	r1, [r4, #8]
 8013514:	4630      	mov	r0, r6
 8013516:	f006 fcf7 	bl	8019f08 <ucdr_serialize_string>
 801351a:	6862      	ldr	r2, [r4, #4]
 801351c:	2a01      	cmp	r2, #1
 801351e:	d953      	bls.n	80135c8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8013520:	2800      	cmp	r0, #0
 8013522:	d05f      	beq.n	80135e4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 8013524:	68e1      	ldr	r1, [r4, #12]
 8013526:	4630      	mov	r0, r6
 8013528:	f006 fcee 	bl	8019f08 <ucdr_serialize_string>
 801352c:	6862      	ldr	r2, [r4, #4]
 801352e:	2a02      	cmp	r2, #2
 8013530:	d94a      	bls.n	80135c8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8013532:	2800      	cmp	r0, #0
 8013534:	d056      	beq.n	80135e4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 8013536:	6921      	ldr	r1, [r4, #16]
 8013538:	4630      	mov	r0, r6
 801353a:	f006 fce5 	bl	8019f08 <ucdr_serialize_string>
 801353e:	6862      	ldr	r2, [r4, #4]
 8013540:	2a03      	cmp	r2, #3
 8013542:	d941      	bls.n	80135c8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8013544:	2800      	cmp	r0, #0
 8013546:	d04d      	beq.n	80135e4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 8013548:	6961      	ldr	r1, [r4, #20]
 801354a:	4630      	mov	r0, r6
 801354c:	f006 fcdc 	bl	8019f08 <ucdr_serialize_string>
 8013550:	6862      	ldr	r2, [r4, #4]
 8013552:	2a04      	cmp	r2, #4
 8013554:	d938      	bls.n	80135c8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8013556:	2800      	cmp	r0, #0
 8013558:	d044      	beq.n	80135e4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 801355a:	69a1      	ldr	r1, [r4, #24]
 801355c:	4630      	mov	r0, r6
 801355e:	f006 fcd3 	bl	8019f08 <ucdr_serialize_string>
 8013562:	6862      	ldr	r2, [r4, #4]
 8013564:	2a05      	cmp	r2, #5
 8013566:	d92f      	bls.n	80135c8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8013568:	2800      	cmp	r0, #0
 801356a:	d03b      	beq.n	80135e4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 801356c:	69e1      	ldr	r1, [r4, #28]
 801356e:	4630      	mov	r0, r6
 8013570:	f006 fcca 	bl	8019f08 <ucdr_serialize_string>
 8013574:	6862      	ldr	r2, [r4, #4]
 8013576:	2a06      	cmp	r2, #6
 8013578:	d926      	bls.n	80135c8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801357a:	b398      	cbz	r0, 80135e4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 801357c:	6a21      	ldr	r1, [r4, #32]
 801357e:	4630      	mov	r0, r6
 8013580:	f006 fcc2 	bl	8019f08 <ucdr_serialize_string>
 8013584:	6862      	ldr	r2, [r4, #4]
 8013586:	2a07      	cmp	r2, #7
 8013588:	d91e      	bls.n	80135c8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801358a:	b358      	cbz	r0, 80135e4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 801358c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 801358e:	4630      	mov	r0, r6
 8013590:	f006 fcba 	bl	8019f08 <ucdr_serialize_string>
 8013594:	6862      	ldr	r2, [r4, #4]
 8013596:	2a08      	cmp	r2, #8
 8013598:	d916      	bls.n	80135c8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801359a:	b318      	cbz	r0, 80135e4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 801359c:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 801359e:	4630      	mov	r0, r6
 80135a0:	f006 fcb2 	bl	8019f08 <ucdr_serialize_string>
 80135a4:	6862      	ldr	r2, [r4, #4]
 80135a6:	2a09      	cmp	r2, #9
 80135a8:	d90e      	bls.n	80135c8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80135aa:	b1d8      	cbz	r0, 80135e4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 80135ac:	f104 0828 	add.w	r8, r4, #40	@ 0x28
 80135b0:	2709      	movs	r7, #9
 80135b2:	e000      	b.n	80135b6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 80135b4:	b1b0      	cbz	r0, 80135e4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 80135b6:	f858 1f04 	ldr.w	r1, [r8, #4]!
 80135ba:	4630      	mov	r0, r6
 80135bc:	f006 fca4 	bl	8019f08 <ucdr_serialize_string>
 80135c0:	6862      	ldr	r2, [r4, #4]
 80135c2:	3701      	adds	r7, #1
 80135c4:	4297      	cmp	r7, r2
 80135c6:	d3f5      	bcc.n	80135b4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 80135c8:	ea05 0300 	and.w	r3, r5, r0
 80135cc:	b2dd      	uxtb	r5, r3
 80135ce:	e789      	b.n	80134e4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 80135d0:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80135d2:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 80135d6:	4630      	mov	r0, r6
 80135d8:	f7fd fe6c 	bl	80112b4 <ucdr_serialize_sequence_uint8_t>
 80135dc:	4005      	ands	r5, r0
 80135de:	4628      	mov	r0, r5
 80135e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80135e4:	2500      	movs	r5, #0
 80135e6:	e77d      	b.n	80134e4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 80135e8:	4028      	ands	r0, r5
 80135ea:	b2c5      	uxtb	r5, r0
 80135ec:	e77a      	b.n	80134e4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 80135ee:	bf00      	nop

080135f0 <uxr_serialize_OBJK_Subscriber_Binary>:
 80135f0:	b570      	push	{r4, r5, r6, lr}
 80135f2:	460d      	mov	r5, r1
 80135f4:	7809      	ldrb	r1, [r1, #0]
 80135f6:	4606      	mov	r6, r0
 80135f8:	f7fc f82c 	bl	800f654 <ucdr_serialize_bool>
 80135fc:	782b      	ldrb	r3, [r5, #0]
 80135fe:	4604      	mov	r4, r0
 8013600:	b94b      	cbnz	r3, 8013616 <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 8013602:	7a29      	ldrb	r1, [r5, #8]
 8013604:	4630      	mov	r0, r6
 8013606:	f7fc f825 	bl	800f654 <ucdr_serialize_bool>
 801360a:	7a2b      	ldrb	r3, [r5, #8]
 801360c:	4004      	ands	r4, r0
 801360e:	b2e4      	uxtb	r4, r4
 8013610:	b943      	cbnz	r3, 8013624 <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 8013612:	4620      	mov	r0, r4
 8013614:	bd70      	pop	{r4, r5, r6, pc}
 8013616:	6869      	ldr	r1, [r5, #4]
 8013618:	4630      	mov	r0, r6
 801361a:	f006 fc75 	bl	8019f08 <ucdr_serialize_string>
 801361e:	4004      	ands	r4, r0
 8013620:	b2e4      	uxtb	r4, r4
 8013622:	e7ee      	b.n	8013602 <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 8013624:	f105 010c 	add.w	r1, r5, #12
 8013628:	4630      	mov	r0, r6
 801362a:	f7ff ff51 	bl	80134d0 <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 801362e:	4004      	ands	r4, r0
 8013630:	4620      	mov	r0, r4
 8013632:	bd70      	pop	{r4, r5, r6, pc}

08013634 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 8013634:	b570      	push	{r4, r5, r6, lr}
 8013636:	460d      	mov	r5, r1
 8013638:	8809      	ldrh	r1, [r1, #0]
 801363a:	4606      	mov	r6, r0
 801363c:	f7fc f864 	bl	800f708 <ucdr_serialize_uint16_t>
 8013640:	78a9      	ldrb	r1, [r5, #2]
 8013642:	4604      	mov	r4, r0
 8013644:	4630      	mov	r0, r6
 8013646:	f7fc f805 	bl	800f654 <ucdr_serialize_bool>
 801364a:	78ab      	ldrb	r3, [r5, #2]
 801364c:	4004      	ands	r4, r0
 801364e:	b2e4      	uxtb	r4, r4
 8013650:	b9b3      	cbnz	r3, 8013680 <uxr_serialize_OBJK_Endpoint_QosBinary+0x4c>
 8013652:	79a9      	ldrb	r1, [r5, #6]
 8013654:	4630      	mov	r0, r6
 8013656:	f7fb fffd 	bl	800f654 <ucdr_serialize_bool>
 801365a:	79ab      	ldrb	r3, [r5, #6]
 801365c:	4004      	ands	r4, r0
 801365e:	bb33      	cbnz	r3, 80136ae <uxr_serialize_OBJK_Endpoint_QosBinary+0x7a>
 8013660:	7b29      	ldrb	r1, [r5, #12]
 8013662:	4630      	mov	r0, r6
 8013664:	f7fb fff6 	bl	800f654 <ucdr_serialize_bool>
 8013668:	7b2b      	ldrb	r3, [r5, #12]
 801366a:	4004      	ands	r4, r0
 801366c:	b9c3      	cbnz	r3, 80136a0 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6c>
 801366e:	7d29      	ldrb	r1, [r5, #20]
 8013670:	4630      	mov	r0, r6
 8013672:	f7fb ffef 	bl	800f654 <ucdr_serialize_bool>
 8013676:	7d2b      	ldrb	r3, [r5, #20]
 8013678:	4004      	ands	r4, r0
 801367a:	b93b      	cbnz	r3, 801368c <uxr_serialize_OBJK_Endpoint_QosBinary+0x58>
 801367c:	4620      	mov	r0, r4
 801367e:	bd70      	pop	{r4, r5, r6, pc}
 8013680:	88a9      	ldrh	r1, [r5, #4]
 8013682:	4630      	mov	r0, r6
 8013684:	f7fc f840 	bl	800f708 <ucdr_serialize_uint16_t>
 8013688:	4004      	ands	r4, r0
 801368a:	e7e2      	b.n	8013652 <uxr_serialize_OBJK_Endpoint_QosBinary+0x1e>
 801368c:	69aa      	ldr	r2, [r5, #24]
 801368e:	f105 011c 	add.w	r1, r5, #28
 8013692:	4630      	mov	r0, r6
 8013694:	f7fd fe0e 	bl	80112b4 <ucdr_serialize_sequence_uint8_t>
 8013698:	4004      	ands	r4, r0
 801369a:	b2e4      	uxtb	r4, r4
 801369c:	4620      	mov	r0, r4
 801369e:	bd70      	pop	{r4, r5, r6, pc}
 80136a0:	6929      	ldr	r1, [r5, #16]
 80136a2:	4630      	mov	r0, r6
 80136a4:	f7fc fa20 	bl	800fae8 <ucdr_serialize_uint32_t>
 80136a8:	4004      	ands	r4, r0
 80136aa:	b2e4      	uxtb	r4, r4
 80136ac:	e7df      	b.n	801366e <uxr_serialize_OBJK_Endpoint_QosBinary+0x3a>
 80136ae:	68a9      	ldr	r1, [r5, #8]
 80136b0:	4630      	mov	r0, r6
 80136b2:	f7fc fa19 	bl	800fae8 <ucdr_serialize_uint32_t>
 80136b6:	4004      	ands	r4, r0
 80136b8:	b2e4      	uxtb	r4, r4
 80136ba:	e7d1      	b.n	8013660 <uxr_serialize_OBJK_Endpoint_QosBinary+0x2c>

080136bc <uxr_serialize_OBJK_DataReader_Binary>:
 80136bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80136be:	2202      	movs	r2, #2
 80136c0:	460c      	mov	r4, r1
 80136c2:	4606      	mov	r6, r0
 80136c4:	f7fb fcfe 	bl	800f0c4 <ucdr_serialize_array_uint8_t>
 80136c8:	78a1      	ldrb	r1, [r4, #2]
 80136ca:	4605      	mov	r5, r0
 80136cc:	4630      	mov	r0, r6
 80136ce:	f7fb ffc1 	bl	800f654 <ucdr_serialize_bool>
 80136d2:	78a3      	ldrb	r3, [r4, #2]
 80136d4:	4005      	ands	r5, r0
 80136d6:	b2ed      	uxtb	r5, r5
 80136d8:	b90b      	cbnz	r3, 80136de <uxr_serialize_OBJK_DataReader_Binary+0x22>
 80136da:	4628      	mov	r0, r5
 80136dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80136de:	f104 0108 	add.w	r1, r4, #8
 80136e2:	4630      	mov	r0, r6
 80136e4:	f7ff ffa6 	bl	8013634 <uxr_serialize_OBJK_Endpoint_QosBinary>
 80136e8:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80136ec:	4607      	mov	r7, r0
 80136ee:	4630      	mov	r0, r6
 80136f0:	f7fb ffb0 	bl	800f654 <ucdr_serialize_bool>
 80136f4:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80136f8:	4007      	ands	r7, r0
 80136fa:	b2ff      	uxtb	r7, r7
 80136fc:	b95b      	cbnz	r3, 8013716 <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 80136fe:	f894 1038 	ldrb.w	r1, [r4, #56]	@ 0x38
 8013702:	4630      	mov	r0, r6
 8013704:	f7fb ffa6 	bl	800f654 <ucdr_serialize_bool>
 8013708:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 801370c:	4007      	ands	r7, r0
 801370e:	b94b      	cbnz	r3, 8013724 <uxr_serialize_OBJK_DataReader_Binary+0x68>
 8013710:	403d      	ands	r5, r7
 8013712:	4628      	mov	r0, r5
 8013714:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013716:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	@ 0x30
 801371a:	4630      	mov	r0, r6
 801371c:	f7fc fc28 	bl	800ff70 <ucdr_serialize_uint64_t>
 8013720:	4007      	ands	r7, r0
 8013722:	e7ec      	b.n	80136fe <uxr_serialize_OBJK_DataReader_Binary+0x42>
 8013724:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8013726:	4630      	mov	r0, r6
 8013728:	f006 fbee 	bl	8019f08 <ucdr_serialize_string>
 801372c:	4007      	ands	r7, r0
 801372e:	b2ff      	uxtb	r7, r7
 8013730:	e7ee      	b.n	8013710 <uxr_serialize_OBJK_DataReader_Binary+0x54>
 8013732:	bf00      	nop

08013734 <uxr_serialize_OBJK_DataWriter_Binary>:
 8013734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013736:	2202      	movs	r2, #2
 8013738:	460d      	mov	r5, r1
 801373a:	4606      	mov	r6, r0
 801373c:	f7fb fcc2 	bl	800f0c4 <ucdr_serialize_array_uint8_t>
 8013740:	78a9      	ldrb	r1, [r5, #2]
 8013742:	4604      	mov	r4, r0
 8013744:	4630      	mov	r0, r6
 8013746:	f7fb ff85 	bl	800f654 <ucdr_serialize_bool>
 801374a:	78ab      	ldrb	r3, [r5, #2]
 801374c:	4004      	ands	r4, r0
 801374e:	b2e4      	uxtb	r4, r4
 8013750:	b90b      	cbnz	r3, 8013756 <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 8013752:	4620      	mov	r0, r4
 8013754:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013756:	f105 0108 	add.w	r1, r5, #8
 801375a:	4630      	mov	r0, r6
 801375c:	f7ff ff6a 	bl	8013634 <uxr_serialize_OBJK_Endpoint_QosBinary>
 8013760:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 8013764:	4607      	mov	r7, r0
 8013766:	4630      	mov	r0, r6
 8013768:	f7fb ff74 	bl	800f654 <ucdr_serialize_bool>
 801376c:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 8013770:	4007      	ands	r7, r0
 8013772:	b2ff      	uxtb	r7, r7
 8013774:	b913      	cbnz	r3, 801377c <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 8013776:	403c      	ands	r4, r7
 8013778:	4620      	mov	r0, r4
 801377a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801377c:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 8013780:	4630      	mov	r0, r6
 8013782:	f7fc fbf5 	bl	800ff70 <ucdr_serialize_uint64_t>
 8013786:	4007      	ands	r7, r0
 8013788:	e7f5      	b.n	8013776 <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 801378a:	bf00      	nop

0801378c <uxr_serialize_OBJK_Replier_Binary>:
 801378c:	b570      	push	{r4, r5, r6, lr}
 801378e:	460d      	mov	r5, r1
 8013790:	6809      	ldr	r1, [r1, #0]
 8013792:	4606      	mov	r6, r0
 8013794:	f006 fbb8 	bl	8019f08 <ucdr_serialize_string>
 8013798:	6869      	ldr	r1, [r5, #4]
 801379a:	4604      	mov	r4, r0
 801379c:	4630      	mov	r0, r6
 801379e:	f006 fbb3 	bl	8019f08 <ucdr_serialize_string>
 80137a2:	68a9      	ldr	r1, [r5, #8]
 80137a4:	4004      	ands	r4, r0
 80137a6:	4630      	mov	r0, r6
 80137a8:	f006 fbae 	bl	8019f08 <ucdr_serialize_string>
 80137ac:	b2e4      	uxtb	r4, r4
 80137ae:	4004      	ands	r4, r0
 80137b0:	7b29      	ldrb	r1, [r5, #12]
 80137b2:	4630      	mov	r0, r6
 80137b4:	f7fb ff4e 	bl	800f654 <ucdr_serialize_bool>
 80137b8:	7b2b      	ldrb	r3, [r5, #12]
 80137ba:	4004      	ands	r4, r0
 80137bc:	b943      	cbnz	r3, 80137d0 <uxr_serialize_OBJK_Replier_Binary+0x44>
 80137be:	7d29      	ldrb	r1, [r5, #20]
 80137c0:	4630      	mov	r0, r6
 80137c2:	f7fb ff47 	bl	800f654 <ucdr_serialize_bool>
 80137c6:	7d2b      	ldrb	r3, [r5, #20]
 80137c8:	4004      	ands	r4, r0
 80137ca:	b93b      	cbnz	r3, 80137dc <uxr_serialize_OBJK_Replier_Binary+0x50>
 80137cc:	4620      	mov	r0, r4
 80137ce:	bd70      	pop	{r4, r5, r6, pc}
 80137d0:	6929      	ldr	r1, [r5, #16]
 80137d2:	4630      	mov	r0, r6
 80137d4:	f006 fb98 	bl	8019f08 <ucdr_serialize_string>
 80137d8:	4004      	ands	r4, r0
 80137da:	e7f0      	b.n	80137be <uxr_serialize_OBJK_Replier_Binary+0x32>
 80137dc:	69a9      	ldr	r1, [r5, #24]
 80137de:	4630      	mov	r0, r6
 80137e0:	f006 fb92 	bl	8019f08 <ucdr_serialize_string>
 80137e4:	4004      	ands	r4, r0
 80137e6:	b2e4      	uxtb	r4, r4
 80137e8:	4620      	mov	r0, r4
 80137ea:	bd70      	pop	{r4, r5, r6, pc}

080137ec <uxr_deserialize_ObjectVariant>:
 80137ec:	b570      	push	{r4, r5, r6, lr}
 80137ee:	4605      	mov	r5, r0
 80137f0:	460e      	mov	r6, r1
 80137f2:	f7fb ff73 	bl	800f6dc <ucdr_deserialize_uint8_t>
 80137f6:	b168      	cbz	r0, 8013814 <uxr_deserialize_ObjectVariant+0x28>
 80137f8:	7833      	ldrb	r3, [r6, #0]
 80137fa:	3b01      	subs	r3, #1
 80137fc:	4604      	mov	r4, r0
 80137fe:	2b0d      	cmp	r3, #13
 8013800:	d809      	bhi.n	8013816 <uxr_deserialize_ObjectVariant+0x2a>
 8013802:	e8df f003 	tbb	[pc, r3]
 8013806:	0a64      	.short	0x0a64
 8013808:	0a0a2323 	.word	0x0a0a2323
 801380c:	10080a0a 	.word	0x10080a0a
 8013810:	5e411010 	.word	0x5e411010
 8013814:	2400      	movs	r4, #0
 8013816:	4620      	mov	r0, r4
 8013818:	bd70      	pop	{r4, r5, r6, pc}
 801381a:	1d31      	adds	r1, r6, #4
 801381c:	4628      	mov	r0, r5
 801381e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013822:	f7ff bd31 	b.w	8013288 <uxr_deserialize_DATAWRITER_Representation>
 8013826:	1d31      	adds	r1, r6, #4
 8013828:	4628      	mov	r0, r5
 801382a:	f7fb ff57 	bl	800f6dc <ucdr_deserialize_uint8_t>
 801382e:	2800      	cmp	r0, #0
 8013830:	d0f0      	beq.n	8013814 <uxr_deserialize_ObjectVariant+0x28>
 8013832:	7933      	ldrb	r3, [r6, #4]
 8013834:	2b01      	cmp	r3, #1
 8013836:	d001      	beq.n	801383c <uxr_deserialize_ObjectVariant+0x50>
 8013838:	2b02      	cmp	r3, #2
 801383a:	d1ec      	bne.n	8013816 <uxr_deserialize_ObjectVariant+0x2a>
 801383c:	68b1      	ldr	r1, [r6, #8]
 801383e:	4628      	mov	r0, r5
 8013840:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013844:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013848:	f006 bb6c 	b.w	8019f24 <ucdr_deserialize_string>
 801384c:	1d31      	adds	r1, r6, #4
 801384e:	4628      	mov	r0, r5
 8013850:	f7fb ff44 	bl	800f6dc <ucdr_deserialize_uint8_t>
 8013854:	4604      	mov	r4, r0
 8013856:	b170      	cbz	r0, 8013876 <uxr_deserialize_ObjectVariant+0x8a>
 8013858:	7933      	ldrb	r3, [r6, #4]
 801385a:	2b02      	cmp	r3, #2
 801385c:	d053      	beq.n	8013906 <uxr_deserialize_ObjectVariant+0x11a>
 801385e:	2b03      	cmp	r3, #3
 8013860:	d109      	bne.n	8013876 <uxr_deserialize_ObjectVariant+0x8a>
 8013862:	f106 0308 	add.w	r3, r6, #8
 8013866:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801386a:	f106 010c 	add.w	r1, r6, #12
 801386e:	4628      	mov	r0, r5
 8013870:	f7fd fd32 	bl	80112d8 <ucdr_deserialize_sequence_uint8_t>
 8013874:	4604      	mov	r4, r0
 8013876:	2202      	movs	r2, #2
 8013878:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 801387c:	4628      	mov	r0, r5
 801387e:	f7fb fc85 	bl	800f18c <ucdr_deserialize_array_uint8_t>
 8013882:	4004      	ands	r4, r0
 8013884:	b2e4      	uxtb	r4, r4
 8013886:	e7c6      	b.n	8013816 <uxr_deserialize_ObjectVariant+0x2a>
 8013888:	2204      	movs	r2, #4
 801388a:	18b1      	adds	r1, r6, r2
 801388c:	4628      	mov	r0, r5
 801388e:	f7fb fc7d 	bl	800f18c <ucdr_deserialize_array_uint8_t>
 8013892:	2202      	movs	r2, #2
 8013894:	f106 0108 	add.w	r1, r6, #8
 8013898:	4604      	mov	r4, r0
 801389a:	4628      	mov	r0, r5
 801389c:	f7fb fc76 	bl	800f18c <ucdr_deserialize_array_uint8_t>
 80138a0:	2202      	movs	r2, #2
 80138a2:	4004      	ands	r4, r0
 80138a4:	f106 010a 	add.w	r1, r6, #10
 80138a8:	4628      	mov	r0, r5
 80138aa:	f7fb fc6f 	bl	800f18c <ucdr_deserialize_array_uint8_t>
 80138ae:	b2e4      	uxtb	r4, r4
 80138b0:	4603      	mov	r3, r0
 80138b2:	f106 010c 	add.w	r1, r6, #12
 80138b6:	4628      	mov	r0, r5
 80138b8:	401c      	ands	r4, r3
 80138ba:	f7fb fee1 	bl	800f680 <ucdr_deserialize_bool>
 80138be:	4004      	ands	r4, r0
 80138c0:	e7a9      	b.n	8013816 <uxr_deserialize_ObjectVariant+0x2a>
 80138c2:	1d31      	adds	r1, r6, #4
 80138c4:	4628      	mov	r0, r5
 80138c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80138ca:	f7ff bb93 	b.w	8012ff4 <uxr_deserialize_CLIENT_Representation>
 80138ce:	1d31      	adds	r1, r6, #4
 80138d0:	4628      	mov	r0, r5
 80138d2:	f7fb ff03 	bl	800f6dc <ucdr_deserialize_uint8_t>
 80138d6:	4604      	mov	r4, r0
 80138d8:	b168      	cbz	r0, 80138f6 <uxr_deserialize_ObjectVariant+0x10a>
 80138da:	7933      	ldrb	r3, [r6, #4]
 80138dc:	2b02      	cmp	r3, #2
 80138de:	d003      	beq.n	80138e8 <uxr_deserialize_ObjectVariant+0xfc>
 80138e0:	2b03      	cmp	r3, #3
 80138e2:	d018      	beq.n	8013916 <uxr_deserialize_ObjectVariant+0x12a>
 80138e4:	2b01      	cmp	r3, #1
 80138e6:	d106      	bne.n	80138f6 <uxr_deserialize_ObjectVariant+0x10a>
 80138e8:	68b1      	ldr	r1, [r6, #8]
 80138ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80138ee:	4628      	mov	r0, r5
 80138f0:	f006 fb18 	bl	8019f24 <ucdr_deserialize_string>
 80138f4:	4604      	mov	r4, r0
 80138f6:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 80138fa:	4628      	mov	r0, r5
 80138fc:	f7fc fc8a 	bl	8010214 <ucdr_deserialize_int16_t>
 8013900:	4004      	ands	r4, r0
 8013902:	b2e4      	uxtb	r4, r4
 8013904:	e787      	b.n	8013816 <uxr_deserialize_ObjectVariant+0x2a>
 8013906:	68b1      	ldr	r1, [r6, #8]
 8013908:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801390c:	4628      	mov	r0, r5
 801390e:	f006 fb09 	bl	8019f24 <ucdr_deserialize_string>
 8013912:	4604      	mov	r4, r0
 8013914:	e7af      	b.n	8013876 <uxr_deserialize_ObjectVariant+0x8a>
 8013916:	f106 0308 	add.w	r3, r6, #8
 801391a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801391e:	f106 010c 	add.w	r1, r6, #12
 8013922:	4628      	mov	r0, r5
 8013924:	f7fd fcd8 	bl	80112d8 <ucdr_deserialize_sequence_uint8_t>
 8013928:	4604      	mov	r4, r0
 801392a:	e7e4      	b.n	80138f6 <uxr_deserialize_ObjectVariant+0x10a>

0801392c <uxr_deserialize_BaseObjectRequest>:
 801392c:	b570      	push	{r4, r5, r6, lr}
 801392e:	2202      	movs	r2, #2
 8013930:	4605      	mov	r5, r0
 8013932:	460e      	mov	r6, r1
 8013934:	f7fb fc2a 	bl	800f18c <ucdr_deserialize_array_uint8_t>
 8013938:	2202      	movs	r2, #2
 801393a:	4604      	mov	r4, r0
 801393c:	18b1      	adds	r1, r6, r2
 801393e:	4628      	mov	r0, r5
 8013940:	f7fb fc24 	bl	800f18c <ucdr_deserialize_array_uint8_t>
 8013944:	4020      	ands	r0, r4
 8013946:	b2c0      	uxtb	r0, r0
 8013948:	bd70      	pop	{r4, r5, r6, pc}
 801394a:	bf00      	nop

0801394c <uxr_serialize_ActivityInfoVariant>:
 801394c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013950:	460d      	mov	r5, r1
 8013952:	7809      	ldrb	r1, [r1, #0]
 8013954:	4606      	mov	r6, r0
 8013956:	f7fb feab 	bl	800f6b0 <ucdr_serialize_uint8_t>
 801395a:	b130      	cbz	r0, 801396a <uxr_serialize_ActivityInfoVariant+0x1e>
 801395c:	782b      	ldrb	r3, [r5, #0]
 801395e:	2b06      	cmp	r3, #6
 8013960:	d014      	beq.n	801398c <uxr_serialize_ActivityInfoVariant+0x40>
 8013962:	2b0d      	cmp	r3, #13
 8013964:	d019      	beq.n	801399a <uxr_serialize_ActivityInfoVariant+0x4e>
 8013966:	2b05      	cmp	r3, #5
 8013968:	d001      	beq.n	801396e <uxr_serialize_ActivityInfoVariant+0x22>
 801396a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801396e:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8013972:	4630      	mov	r0, r6
 8013974:	f7fc fbc4 	bl	8010100 <ucdr_serialize_int16_t>
 8013978:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 801397c:	4604      	mov	r4, r0
 801397e:	4630      	mov	r0, r6
 8013980:	f7fc faf6 	bl	800ff70 <ucdr_serialize_uint64_t>
 8013984:	4020      	ands	r0, r4
 8013986:	b2c0      	uxtb	r0, r0
 8013988:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801398c:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8013990:	4630      	mov	r0, r6
 8013992:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013996:	f7fc bbb3 	b.w	8010100 <ucdr_serialize_int16_t>
 801399a:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 801399e:	4630      	mov	r0, r6
 80139a0:	f7fc fbae 	bl	8010100 <ucdr_serialize_int16_t>
 80139a4:	68e9      	ldr	r1, [r5, #12]
 80139a6:	4681      	mov	r9, r0
 80139a8:	4630      	mov	r0, r6
 80139aa:	f7fc f89d 	bl	800fae8 <ucdr_serialize_uint32_t>
 80139ae:	68eb      	ldr	r3, [r5, #12]
 80139b0:	2b00      	cmp	r3, #0
 80139b2:	d051      	beq.n	8013a58 <uxr_serialize_ActivityInfoVariant+0x10c>
 80139b4:	b1e8      	cbz	r0, 80139f2 <uxr_serialize_ActivityInfoVariant+0xa6>
 80139b6:	f105 0714 	add.w	r7, r5, #20
 80139ba:	f04f 0800 	mov.w	r8, #0
 80139be:	f817 1c04 	ldrb.w	r1, [r7, #-4]
 80139c2:	4630      	mov	r0, r6
 80139c4:	f7fb fe74 	bl	800f6b0 <ucdr_serialize_uint8_t>
 80139c8:	b198      	cbz	r0, 80139f2 <uxr_serialize_ActivityInfoVariant+0xa6>
 80139ca:	f817 3c04 	ldrb.w	r3, [r7, #-4]
 80139ce:	2b03      	cmp	r3, #3
 80139d0:	d839      	bhi.n	8013a46 <uxr_serialize_ActivityInfoVariant+0xfa>
 80139d2:	e8df f003 	tbb	[pc, r3]
 80139d6:	1e2b      	.short	0x1e2b
 80139d8:	0211      	.short	0x0211
 80139da:	6839      	ldr	r1, [r7, #0]
 80139dc:	4630      	mov	r0, r6
 80139de:	f006 fa93 	bl	8019f08 <ucdr_serialize_string>
 80139e2:	68eb      	ldr	r3, [r5, #12]
 80139e4:	f108 0801 	add.w	r8, r8, #1
 80139e8:	4598      	cmp	r8, r3
 80139ea:	d231      	bcs.n	8013a50 <uxr_serialize_ActivityInfoVariant+0x104>
 80139ec:	3718      	adds	r7, #24
 80139ee:	2800      	cmp	r0, #0
 80139f0:	d1e5      	bne.n	80139be <uxr_serialize_ActivityInfoVariant+0x72>
 80139f2:	2000      	movs	r0, #0
 80139f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80139f8:	2210      	movs	r2, #16
 80139fa:	4639      	mov	r1, r7
 80139fc:	4630      	mov	r0, r6
 80139fe:	f7fb fb61 	bl	800f0c4 <ucdr_serialize_array_uint8_t>
 8013a02:	6939      	ldr	r1, [r7, #16]
 8013a04:	4604      	mov	r4, r0
 8013a06:	4630      	mov	r0, r6
 8013a08:	f7fc f86e 	bl	800fae8 <ucdr_serialize_uint32_t>
 8013a0c:	4020      	ands	r0, r4
 8013a0e:	b2c0      	uxtb	r0, r0
 8013a10:	e7e7      	b.n	80139e2 <uxr_serialize_ActivityInfoVariant+0x96>
 8013a12:	2204      	movs	r2, #4
 8013a14:	4639      	mov	r1, r7
 8013a16:	4630      	mov	r0, r6
 8013a18:	f7fb fb54 	bl	800f0c4 <ucdr_serialize_array_uint8_t>
 8013a1c:	88b9      	ldrh	r1, [r7, #4]
 8013a1e:	4604      	mov	r4, r0
 8013a20:	4630      	mov	r0, r6
 8013a22:	f7fb fe71 	bl	800f708 <ucdr_serialize_uint16_t>
 8013a26:	4020      	ands	r0, r4
 8013a28:	b2c0      	uxtb	r0, r0
 8013a2a:	e7da      	b.n	80139e2 <uxr_serialize_ActivityInfoVariant+0x96>
 8013a2c:	2202      	movs	r2, #2
 8013a2e:	4639      	mov	r1, r7
 8013a30:	4630      	mov	r0, r6
 8013a32:	f7fb fb47 	bl	800f0c4 <ucdr_serialize_array_uint8_t>
 8013a36:	78b9      	ldrb	r1, [r7, #2]
 8013a38:	4604      	mov	r4, r0
 8013a3a:	4630      	mov	r0, r6
 8013a3c:	f7fb fe38 	bl	800f6b0 <ucdr_serialize_uint8_t>
 8013a40:	4020      	ands	r0, r4
 8013a42:	b2c0      	uxtb	r0, r0
 8013a44:	e7cd      	b.n	80139e2 <uxr_serialize_ActivityInfoVariant+0x96>
 8013a46:	68eb      	ldr	r3, [r5, #12]
 8013a48:	f108 0801 	add.w	r8, r8, #1
 8013a4c:	4598      	cmp	r8, r3
 8013a4e:	d308      	bcc.n	8013a62 <uxr_serialize_ActivityInfoVariant+0x116>
 8013a50:	ea09 0000 	and.w	r0, r9, r0
 8013a54:	b2c0      	uxtb	r0, r0
 8013a56:	e788      	b.n	801396a <uxr_serialize_ActivityInfoVariant+0x1e>
 8013a58:	ea09 0900 	and.w	r9, r9, r0
 8013a5c:	fa5f f089 	uxtb.w	r0, r9
 8013a60:	e783      	b.n	801396a <uxr_serialize_ActivityInfoVariant+0x1e>
 8013a62:	3718      	adds	r7, #24
 8013a64:	e7ab      	b.n	80139be <uxr_serialize_ActivityInfoVariant+0x72>
 8013a66:	bf00      	nop

08013a68 <uxr_deserialize_BaseObjectReply>:
 8013a68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013a6c:	2202      	movs	r2, #2
 8013a6e:	4606      	mov	r6, r0
 8013a70:	460f      	mov	r7, r1
 8013a72:	f7fb fb8b 	bl	800f18c <ucdr_deserialize_array_uint8_t>
 8013a76:	2202      	movs	r2, #2
 8013a78:	18b9      	adds	r1, r7, r2
 8013a7a:	4605      	mov	r5, r0
 8013a7c:	4630      	mov	r0, r6
 8013a7e:	f7fb fb85 	bl	800f18c <ucdr_deserialize_array_uint8_t>
 8013a82:	1d39      	adds	r1, r7, #4
 8013a84:	4680      	mov	r8, r0
 8013a86:	4630      	mov	r0, r6
 8013a88:	f7fb fe28 	bl	800f6dc <ucdr_deserialize_uint8_t>
 8013a8c:	1d79      	adds	r1, r7, #5
 8013a8e:	4604      	mov	r4, r0
 8013a90:	4630      	mov	r0, r6
 8013a92:	f7fb fe23 	bl	800f6dc <ucdr_deserialize_uint8_t>
 8013a96:	ea05 0508 	and.w	r5, r5, r8
 8013a9a:	402c      	ands	r4, r5
 8013a9c:	4020      	ands	r0, r4
 8013a9e:	b2c0      	uxtb	r0, r0
 8013aa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013aa4 <uxr_serialize_ReadSpecification>:
 8013aa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013aa8:	460d      	mov	r5, r1
 8013aaa:	7809      	ldrb	r1, [r1, #0]
 8013aac:	4606      	mov	r6, r0
 8013aae:	f7fb fdff 	bl	800f6b0 <ucdr_serialize_uint8_t>
 8013ab2:	7869      	ldrb	r1, [r5, #1]
 8013ab4:	4604      	mov	r4, r0
 8013ab6:	4630      	mov	r0, r6
 8013ab8:	f7fb fdfa 	bl	800f6b0 <ucdr_serialize_uint8_t>
 8013abc:	78a9      	ldrb	r1, [r5, #2]
 8013abe:	4004      	ands	r4, r0
 8013ac0:	4630      	mov	r0, r6
 8013ac2:	f7fb fdc7 	bl	800f654 <ucdr_serialize_bool>
 8013ac6:	78ab      	ldrb	r3, [r5, #2]
 8013ac8:	b2e4      	uxtb	r4, r4
 8013aca:	4004      	ands	r4, r0
 8013acc:	b94b      	cbnz	r3, 8013ae2 <uxr_serialize_ReadSpecification+0x3e>
 8013ace:	7a29      	ldrb	r1, [r5, #8]
 8013ad0:	4630      	mov	r0, r6
 8013ad2:	f7fb fdbf 	bl	800f654 <ucdr_serialize_bool>
 8013ad6:	7a2b      	ldrb	r3, [r5, #8]
 8013ad8:	4004      	ands	r4, r0
 8013ada:	b943      	cbnz	r3, 8013aee <uxr_serialize_ReadSpecification+0x4a>
 8013adc:	4620      	mov	r0, r4
 8013ade:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013ae2:	6869      	ldr	r1, [r5, #4]
 8013ae4:	4630      	mov	r0, r6
 8013ae6:	f006 fa0f 	bl	8019f08 <ucdr_serialize_string>
 8013aea:	4004      	ands	r4, r0
 8013aec:	e7ef      	b.n	8013ace <uxr_serialize_ReadSpecification+0x2a>
 8013aee:	8969      	ldrh	r1, [r5, #10]
 8013af0:	4630      	mov	r0, r6
 8013af2:	f7fb fe09 	bl	800f708 <ucdr_serialize_uint16_t>
 8013af6:	89a9      	ldrh	r1, [r5, #12]
 8013af8:	4607      	mov	r7, r0
 8013afa:	4630      	mov	r0, r6
 8013afc:	f7fb fe04 	bl	800f708 <ucdr_serialize_uint16_t>
 8013b00:	89e9      	ldrh	r1, [r5, #14]
 8013b02:	4007      	ands	r7, r0
 8013b04:	4630      	mov	r0, r6
 8013b06:	f7fb fdff 	bl	800f708 <ucdr_serialize_uint16_t>
 8013b0a:	8a29      	ldrh	r1, [r5, #16]
 8013b0c:	4680      	mov	r8, r0
 8013b0e:	4630      	mov	r0, r6
 8013b10:	f7fb fdfa 	bl	800f708 <ucdr_serialize_uint16_t>
 8013b14:	b2ff      	uxtb	r7, r7
 8013b16:	ea04 0507 	and.w	r5, r4, r7
 8013b1a:	ea05 0508 	and.w	r5, r5, r8
 8013b1e:	ea00 0405 	and.w	r4, r0, r5
 8013b22:	4620      	mov	r0, r4
 8013b24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013b28 <uxr_serialize_CREATE_CLIENT_Payload>:
 8013b28:	f7ff ba0a 	b.w	8012f40 <uxr_serialize_CLIENT_Representation>

08013b2c <uxr_serialize_CREATE_Payload>:
 8013b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013b2e:	2202      	movs	r2, #2
 8013b30:	4606      	mov	r6, r0
 8013b32:	460d      	mov	r5, r1
 8013b34:	f7fb fac6 	bl	800f0c4 <ucdr_serialize_array_uint8_t>
 8013b38:	2202      	movs	r2, #2
 8013b3a:	18a9      	adds	r1, r5, r2
 8013b3c:	4604      	mov	r4, r0
 8013b3e:	4630      	mov	r0, r6
 8013b40:	f7fb fac0 	bl	800f0c4 <ucdr_serialize_array_uint8_t>
 8013b44:	7929      	ldrb	r1, [r5, #4]
 8013b46:	4607      	mov	r7, r0
 8013b48:	4630      	mov	r0, r6
 8013b4a:	f7fb fdb1 	bl	800f6b0 <ucdr_serialize_uint8_t>
 8013b4e:	b170      	cbz	r0, 8013b6e <uxr_serialize_CREATE_Payload+0x42>
 8013b50:	792b      	ldrb	r3, [r5, #4]
 8013b52:	403c      	ands	r4, r7
 8013b54:	3b01      	subs	r3, #1
 8013b56:	b2e4      	uxtb	r4, r4
 8013b58:	2b0d      	cmp	r3, #13
 8013b5a:	d809      	bhi.n	8013b70 <uxr_serialize_CREATE_Payload+0x44>
 8013b5c:	e8df f003 	tbb	[pc, r3]
 8013b60:	23230a3e 	.word	0x23230a3e
 8013b64:	0a0a0a0a 	.word	0x0a0a0a0a
 8013b68:	12121208 	.word	0x12121208
 8013b6c:	5f58      	.short	0x5f58
 8013b6e:	2400      	movs	r4, #0
 8013b70:	4620      	mov	r0, r4
 8013b72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013b74:	f105 0108 	add.w	r1, r5, #8
 8013b78:	4630      	mov	r0, r6
 8013b7a:	f7ff fae9 	bl	8013150 <uxr_serialize_DATAWRITER_Representation>
 8013b7e:	4004      	ands	r4, r0
 8013b80:	4620      	mov	r0, r4
 8013b82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013b84:	7a29      	ldrb	r1, [r5, #8]
 8013b86:	4630      	mov	r0, r6
 8013b88:	f7fb fd92 	bl	800f6b0 <ucdr_serialize_uint8_t>
 8013b8c:	2800      	cmp	r0, #0
 8013b8e:	d0ee      	beq.n	8013b6e <uxr_serialize_CREATE_Payload+0x42>
 8013b90:	7a2b      	ldrb	r3, [r5, #8]
 8013b92:	2b01      	cmp	r3, #1
 8013b94:	d001      	beq.n	8013b9a <uxr_serialize_CREATE_Payload+0x6e>
 8013b96:	2b02      	cmp	r3, #2
 8013b98:	d1ea      	bne.n	8013b70 <uxr_serialize_CREATE_Payload+0x44>
 8013b9a:	68e9      	ldr	r1, [r5, #12]
 8013b9c:	4630      	mov	r0, r6
 8013b9e:	f006 f9b3 	bl	8019f08 <ucdr_serialize_string>
 8013ba2:	4004      	ands	r4, r0
 8013ba4:	e7e4      	b.n	8013b70 <uxr_serialize_CREATE_Payload+0x44>
 8013ba6:	7a29      	ldrb	r1, [r5, #8]
 8013ba8:	4630      	mov	r0, r6
 8013baa:	f7fb fd81 	bl	800f6b0 <ucdr_serialize_uint8_t>
 8013bae:	4607      	mov	r7, r0
 8013bb0:	b158      	cbz	r0, 8013bca <uxr_serialize_CREATE_Payload+0x9e>
 8013bb2:	7a2b      	ldrb	r3, [r5, #8]
 8013bb4:	2b02      	cmp	r3, #2
 8013bb6:	d039      	beq.n	8013c2c <uxr_serialize_CREATE_Payload+0x100>
 8013bb8:	2b03      	cmp	r3, #3
 8013bba:	d106      	bne.n	8013bca <uxr_serialize_CREATE_Payload+0x9e>
 8013bbc:	68ea      	ldr	r2, [r5, #12]
 8013bbe:	f105 0110 	add.w	r1, r5, #16
 8013bc2:	4630      	mov	r0, r6
 8013bc4:	f7fd fb76 	bl	80112b4 <ucdr_serialize_sequence_uint8_t>
 8013bc8:	4607      	mov	r7, r0
 8013bca:	2202      	movs	r2, #2
 8013bcc:	f505 7104 	add.w	r1, r5, #528	@ 0x210
 8013bd0:	4630      	mov	r0, r6
 8013bd2:	f7fb fa77 	bl	800f0c4 <ucdr_serialize_array_uint8_t>
 8013bd6:	4038      	ands	r0, r7
 8013bd8:	4004      	ands	r4, r0
 8013bda:	e7c9      	b.n	8013b70 <uxr_serialize_CREATE_Payload+0x44>
 8013bdc:	7a29      	ldrb	r1, [r5, #8]
 8013bde:	4630      	mov	r0, r6
 8013be0:	f7fb fd66 	bl	800f6b0 <ucdr_serialize_uint8_t>
 8013be4:	4607      	mov	r7, r0
 8013be6:	b158      	cbz	r0, 8013c00 <uxr_serialize_CREATE_Payload+0xd4>
 8013be8:	7a2b      	ldrb	r3, [r5, #8]
 8013bea:	2b02      	cmp	r3, #2
 8013bec:	d003      	beq.n	8013bf6 <uxr_serialize_CREATE_Payload+0xca>
 8013bee:	2b03      	cmp	r3, #3
 8013bf0:	d022      	beq.n	8013c38 <uxr_serialize_CREATE_Payload+0x10c>
 8013bf2:	2b01      	cmp	r3, #1
 8013bf4:	d104      	bne.n	8013c00 <uxr_serialize_CREATE_Payload+0xd4>
 8013bf6:	68e9      	ldr	r1, [r5, #12]
 8013bf8:	4630      	mov	r0, r6
 8013bfa:	f006 f985 	bl	8019f08 <ucdr_serialize_string>
 8013bfe:	4607      	mov	r7, r0
 8013c00:	f9b5 1210 	ldrsh.w	r1, [r5, #528]	@ 0x210
 8013c04:	4630      	mov	r0, r6
 8013c06:	f7fc fa7b 	bl	8010100 <ucdr_serialize_int16_t>
 8013c0a:	4038      	ands	r0, r7
 8013c0c:	4004      	ands	r4, r0
 8013c0e:	e7af      	b.n	8013b70 <uxr_serialize_CREATE_Payload+0x44>
 8013c10:	f105 0108 	add.w	r1, r5, #8
 8013c14:	4630      	mov	r0, r6
 8013c16:	f7ff fa51 	bl	80130bc <uxr_serialize_AGENT_Representation>
 8013c1a:	4004      	ands	r4, r0
 8013c1c:	e7a8      	b.n	8013b70 <uxr_serialize_CREATE_Payload+0x44>
 8013c1e:	f105 0108 	add.w	r1, r5, #8
 8013c22:	4630      	mov	r0, r6
 8013c24:	f7ff f98c 	bl	8012f40 <uxr_serialize_CLIENT_Representation>
 8013c28:	4004      	ands	r4, r0
 8013c2a:	e7a1      	b.n	8013b70 <uxr_serialize_CREATE_Payload+0x44>
 8013c2c:	68e9      	ldr	r1, [r5, #12]
 8013c2e:	4630      	mov	r0, r6
 8013c30:	f006 f96a 	bl	8019f08 <ucdr_serialize_string>
 8013c34:	4607      	mov	r7, r0
 8013c36:	e7c8      	b.n	8013bca <uxr_serialize_CREATE_Payload+0x9e>
 8013c38:	68ea      	ldr	r2, [r5, #12]
 8013c3a:	f105 0110 	add.w	r1, r5, #16
 8013c3e:	4630      	mov	r0, r6
 8013c40:	f7fd fb38 	bl	80112b4 <ucdr_serialize_sequence_uint8_t>
 8013c44:	4607      	mov	r7, r0
 8013c46:	e7db      	b.n	8013c00 <uxr_serialize_CREATE_Payload+0xd4>

08013c48 <uxr_deserialize_GET_INFO_Payload>:
 8013c48:	b570      	push	{r4, r5, r6, lr}
 8013c4a:	2202      	movs	r2, #2
 8013c4c:	4605      	mov	r5, r0
 8013c4e:	460e      	mov	r6, r1
 8013c50:	f7fb fa9c 	bl	800f18c <ucdr_deserialize_array_uint8_t>
 8013c54:	2202      	movs	r2, #2
 8013c56:	18b1      	adds	r1, r6, r2
 8013c58:	4604      	mov	r4, r0
 8013c5a:	4628      	mov	r0, r5
 8013c5c:	f7fb fa96 	bl	800f18c <ucdr_deserialize_array_uint8_t>
 8013c60:	1d31      	adds	r1, r6, #4
 8013c62:	4004      	ands	r4, r0
 8013c64:	4628      	mov	r0, r5
 8013c66:	f7fc f869 	bl	800fd3c <ucdr_deserialize_uint32_t>
 8013c6a:	b2e4      	uxtb	r4, r4
 8013c6c:	4020      	ands	r0, r4
 8013c6e:	bd70      	pop	{r4, r5, r6, pc}

08013c70 <uxr_serialize_DELETE_Payload>:
 8013c70:	b570      	push	{r4, r5, r6, lr}
 8013c72:	2202      	movs	r2, #2
 8013c74:	4605      	mov	r5, r0
 8013c76:	460e      	mov	r6, r1
 8013c78:	f7fb fa24 	bl	800f0c4 <ucdr_serialize_array_uint8_t>
 8013c7c:	2202      	movs	r2, #2
 8013c7e:	4604      	mov	r4, r0
 8013c80:	18b1      	adds	r1, r6, r2
 8013c82:	4628      	mov	r0, r5
 8013c84:	f7fb fa1e 	bl	800f0c4 <ucdr_serialize_array_uint8_t>
 8013c88:	4020      	ands	r0, r4
 8013c8a:	b2c0      	uxtb	r0, r0
 8013c8c:	bd70      	pop	{r4, r5, r6, pc}
 8013c8e:	bf00      	nop

08013c90 <uxr_deserialize_STATUS_AGENT_Payload>:
 8013c90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013c94:	4605      	mov	r5, r0
 8013c96:	460e      	mov	r6, r1
 8013c98:	f7fb fd20 	bl	800f6dc <ucdr_deserialize_uint8_t>
 8013c9c:	1c71      	adds	r1, r6, #1
 8013c9e:	4604      	mov	r4, r0
 8013ca0:	4628      	mov	r0, r5
 8013ca2:	f7fb fd1b 	bl	800f6dc <ucdr_deserialize_uint8_t>
 8013ca6:	2204      	movs	r2, #4
 8013ca8:	18b1      	adds	r1, r6, r2
 8013caa:	4681      	mov	r9, r0
 8013cac:	4628      	mov	r0, r5
 8013cae:	f7fb fa6d 	bl	800f18c <ucdr_deserialize_array_uint8_t>
 8013cb2:	f106 0108 	add.w	r1, r6, #8
 8013cb6:	4680      	mov	r8, r0
 8013cb8:	2202      	movs	r2, #2
 8013cba:	4628      	mov	r0, r5
 8013cbc:	f7fb fa66 	bl	800f18c <ucdr_deserialize_array_uint8_t>
 8013cc0:	2202      	movs	r2, #2
 8013cc2:	f106 010a 	add.w	r1, r6, #10
 8013cc6:	4607      	mov	r7, r0
 8013cc8:	4628      	mov	r0, r5
 8013cca:	f7fb fa5f 	bl	800f18c <ucdr_deserialize_array_uint8_t>
 8013cce:	ea04 0409 	and.w	r4, r4, r9
 8013cd2:	4603      	mov	r3, r0
 8013cd4:	f106 010c 	add.w	r1, r6, #12
 8013cd8:	4628      	mov	r0, r5
 8013cda:	b2e4      	uxtb	r4, r4
 8013cdc:	461d      	mov	r5, r3
 8013cde:	ea04 0408 	and.w	r4, r4, r8
 8013ce2:	f7fb fccd 	bl	800f680 <ucdr_deserialize_bool>
 8013ce6:	4027      	ands	r7, r4
 8013ce8:	403d      	ands	r5, r7
 8013cea:	4028      	ands	r0, r5
 8013cec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08013cf0 <uxr_deserialize_STATUS_Payload>:
 8013cf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013cf4:	2202      	movs	r2, #2
 8013cf6:	4606      	mov	r6, r0
 8013cf8:	460f      	mov	r7, r1
 8013cfa:	f7fb fa47 	bl	800f18c <ucdr_deserialize_array_uint8_t>
 8013cfe:	2202      	movs	r2, #2
 8013d00:	18b9      	adds	r1, r7, r2
 8013d02:	4605      	mov	r5, r0
 8013d04:	4630      	mov	r0, r6
 8013d06:	f7fb fa41 	bl	800f18c <ucdr_deserialize_array_uint8_t>
 8013d0a:	1d39      	adds	r1, r7, #4
 8013d0c:	4680      	mov	r8, r0
 8013d0e:	4630      	mov	r0, r6
 8013d10:	f7fb fce4 	bl	800f6dc <ucdr_deserialize_uint8_t>
 8013d14:	1d79      	adds	r1, r7, #5
 8013d16:	4604      	mov	r4, r0
 8013d18:	4630      	mov	r0, r6
 8013d1a:	f7fb fcdf 	bl	800f6dc <ucdr_deserialize_uint8_t>
 8013d1e:	ea05 0508 	and.w	r5, r5, r8
 8013d22:	402c      	ands	r4, r5
 8013d24:	4020      	ands	r0, r4
 8013d26:	b2c0      	uxtb	r0, r0
 8013d28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013d2c <uxr_serialize_INFO_Payload>:
 8013d2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d30:	2202      	movs	r2, #2
 8013d32:	460c      	mov	r4, r1
 8013d34:	4605      	mov	r5, r0
 8013d36:	f7fb f9c5 	bl	800f0c4 <ucdr_serialize_array_uint8_t>
 8013d3a:	2202      	movs	r2, #2
 8013d3c:	18a1      	adds	r1, r4, r2
 8013d3e:	4680      	mov	r8, r0
 8013d40:	4628      	mov	r0, r5
 8013d42:	f7fb f9bf 	bl	800f0c4 <ucdr_serialize_array_uint8_t>
 8013d46:	7921      	ldrb	r1, [r4, #4]
 8013d48:	4607      	mov	r7, r0
 8013d4a:	4628      	mov	r0, r5
 8013d4c:	f7fb fcb0 	bl	800f6b0 <ucdr_serialize_uint8_t>
 8013d50:	7961      	ldrb	r1, [r4, #5]
 8013d52:	4606      	mov	r6, r0
 8013d54:	4628      	mov	r0, r5
 8013d56:	f7fb fcab 	bl	800f6b0 <ucdr_serialize_uint8_t>
 8013d5a:	ea08 0807 	and.w	r8, r8, r7
 8013d5e:	ea06 0608 	and.w	r6, r6, r8
 8013d62:	ea00 0706 	and.w	r7, r0, r6
 8013d66:	7a21      	ldrb	r1, [r4, #8]
 8013d68:	4628      	mov	r0, r5
 8013d6a:	f7fb fc73 	bl	800f654 <ucdr_serialize_bool>
 8013d6e:	7a23      	ldrb	r3, [r4, #8]
 8013d70:	b2ff      	uxtb	r7, r7
 8013d72:	4606      	mov	r6, r0
 8013d74:	b96b      	cbnz	r3, 8013d92 <uxr_serialize_INFO_Payload+0x66>
 8013d76:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 8013d7a:	4628      	mov	r0, r5
 8013d7c:	f7fb fc6a 	bl	800f654 <ucdr_serialize_bool>
 8013d80:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 8013d84:	4030      	ands	r0, r6
 8013d86:	b2c6      	uxtb	r6, r0
 8013d88:	b983      	cbnz	r3, 8013dac <uxr_serialize_INFO_Payload+0x80>
 8013d8a:	ea06 0007 	and.w	r0, r6, r7
 8013d8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d92:	7b21      	ldrb	r1, [r4, #12]
 8013d94:	4628      	mov	r0, r5
 8013d96:	f7fb fc8b 	bl	800f6b0 <ucdr_serialize_uint8_t>
 8013d9a:	b188      	cbz	r0, 8013dc0 <uxr_serialize_INFO_Payload+0x94>
 8013d9c:	f104 010c 	add.w	r1, r4, #12
 8013da0:	4628      	mov	r0, r5
 8013da2:	f7ff f9fd 	bl	80131a0 <uxr_serialize_ObjectVariant.part.0>
 8013da6:	4030      	ands	r0, r6
 8013da8:	b2c6      	uxtb	r6, r0
 8013daa:	e7e4      	b.n	8013d76 <uxr_serialize_INFO_Payload+0x4a>
 8013dac:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 8013db0:	4628      	mov	r0, r5
 8013db2:	f7ff fdcb 	bl	801394c <uxr_serialize_ActivityInfoVariant>
 8013db6:	4006      	ands	r6, r0
 8013db8:	ea06 0007 	and.w	r0, r6, r7
 8013dbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013dc0:	4606      	mov	r6, r0
 8013dc2:	e7d8      	b.n	8013d76 <uxr_serialize_INFO_Payload+0x4a>

08013dc4 <uxr_serialize_READ_DATA_Payload>:
 8013dc4:	b570      	push	{r4, r5, r6, lr}
 8013dc6:	2202      	movs	r2, #2
 8013dc8:	4605      	mov	r5, r0
 8013dca:	460e      	mov	r6, r1
 8013dcc:	f7fb f97a 	bl	800f0c4 <ucdr_serialize_array_uint8_t>
 8013dd0:	2202      	movs	r2, #2
 8013dd2:	18b1      	adds	r1, r6, r2
 8013dd4:	4604      	mov	r4, r0
 8013dd6:	4628      	mov	r0, r5
 8013dd8:	f7fb f974 	bl	800f0c4 <ucdr_serialize_array_uint8_t>
 8013ddc:	1d31      	adds	r1, r6, #4
 8013dde:	4004      	ands	r4, r0
 8013de0:	4628      	mov	r0, r5
 8013de2:	f7ff fe5f 	bl	8013aa4 <uxr_serialize_ReadSpecification>
 8013de6:	b2e4      	uxtb	r4, r4
 8013de8:	4020      	ands	r0, r4
 8013dea:	bd70      	pop	{r4, r5, r6, pc}

08013dec <uxr_serialize_WRITE_DATA_Payload_Data>:
 8013dec:	b570      	push	{r4, r5, r6, lr}
 8013dee:	2202      	movs	r2, #2
 8013df0:	4605      	mov	r5, r0
 8013df2:	460e      	mov	r6, r1
 8013df4:	f7fb f966 	bl	800f0c4 <ucdr_serialize_array_uint8_t>
 8013df8:	2202      	movs	r2, #2
 8013dfa:	4604      	mov	r4, r0
 8013dfc:	18b1      	adds	r1, r6, r2
 8013dfe:	4628      	mov	r0, r5
 8013e00:	f7fb f960 	bl	800f0c4 <ucdr_serialize_array_uint8_t>
 8013e04:	4020      	ands	r0, r4
 8013e06:	b2c0      	uxtb	r0, r0
 8013e08:	bd70      	pop	{r4, r5, r6, pc}
 8013e0a:	bf00      	nop

08013e0c <uxr_serialize_ACKNACK_Payload>:
 8013e0c:	b570      	push	{r4, r5, r6, lr}
 8013e0e:	460c      	mov	r4, r1
 8013e10:	460e      	mov	r6, r1
 8013e12:	f834 1b02 	ldrh.w	r1, [r4], #2
 8013e16:	4605      	mov	r5, r0
 8013e18:	f7fb fc76 	bl	800f708 <ucdr_serialize_uint16_t>
 8013e1c:	2202      	movs	r2, #2
 8013e1e:	4621      	mov	r1, r4
 8013e20:	4604      	mov	r4, r0
 8013e22:	4628      	mov	r0, r5
 8013e24:	f7fb f94e 	bl	800f0c4 <ucdr_serialize_array_uint8_t>
 8013e28:	7931      	ldrb	r1, [r6, #4]
 8013e2a:	4004      	ands	r4, r0
 8013e2c:	4628      	mov	r0, r5
 8013e2e:	f7fb fc3f 	bl	800f6b0 <ucdr_serialize_uint8_t>
 8013e32:	b2e4      	uxtb	r4, r4
 8013e34:	4020      	ands	r0, r4
 8013e36:	bd70      	pop	{r4, r5, r6, pc}

08013e38 <uxr_deserialize_ACKNACK_Payload>:
 8013e38:	b570      	push	{r4, r5, r6, lr}
 8013e3a:	4605      	mov	r5, r0
 8013e3c:	460e      	mov	r6, r1
 8013e3e:	f7fb fd67 	bl	800f910 <ucdr_deserialize_uint16_t>
 8013e42:	2202      	movs	r2, #2
 8013e44:	18b1      	adds	r1, r6, r2
 8013e46:	4604      	mov	r4, r0
 8013e48:	4628      	mov	r0, r5
 8013e4a:	f7fb f99f 	bl	800f18c <ucdr_deserialize_array_uint8_t>
 8013e4e:	1d31      	adds	r1, r6, #4
 8013e50:	4004      	ands	r4, r0
 8013e52:	4628      	mov	r0, r5
 8013e54:	f7fb fc42 	bl	800f6dc <ucdr_deserialize_uint8_t>
 8013e58:	b2e4      	uxtb	r4, r4
 8013e5a:	4020      	ands	r0, r4
 8013e5c:	bd70      	pop	{r4, r5, r6, pc}
 8013e5e:	bf00      	nop

08013e60 <uxr_serialize_HEARTBEAT_Payload>:
 8013e60:	b570      	push	{r4, r5, r6, lr}
 8013e62:	460d      	mov	r5, r1
 8013e64:	8809      	ldrh	r1, [r1, #0]
 8013e66:	4606      	mov	r6, r0
 8013e68:	f7fb fc4e 	bl	800f708 <ucdr_serialize_uint16_t>
 8013e6c:	8869      	ldrh	r1, [r5, #2]
 8013e6e:	4604      	mov	r4, r0
 8013e70:	4630      	mov	r0, r6
 8013e72:	f7fb fc49 	bl	800f708 <ucdr_serialize_uint16_t>
 8013e76:	7929      	ldrb	r1, [r5, #4]
 8013e78:	4004      	ands	r4, r0
 8013e7a:	4630      	mov	r0, r6
 8013e7c:	f7fb fc18 	bl	800f6b0 <ucdr_serialize_uint8_t>
 8013e80:	b2e4      	uxtb	r4, r4
 8013e82:	4020      	ands	r0, r4
 8013e84:	bd70      	pop	{r4, r5, r6, pc}
 8013e86:	bf00      	nop

08013e88 <uxr_deserialize_HEARTBEAT_Payload>:
 8013e88:	b570      	push	{r4, r5, r6, lr}
 8013e8a:	4605      	mov	r5, r0
 8013e8c:	460e      	mov	r6, r1
 8013e8e:	f7fb fd3f 	bl	800f910 <ucdr_deserialize_uint16_t>
 8013e92:	1cb1      	adds	r1, r6, #2
 8013e94:	4604      	mov	r4, r0
 8013e96:	4628      	mov	r0, r5
 8013e98:	f7fb fd3a 	bl	800f910 <ucdr_deserialize_uint16_t>
 8013e9c:	1d31      	adds	r1, r6, #4
 8013e9e:	4004      	ands	r4, r0
 8013ea0:	4628      	mov	r0, r5
 8013ea2:	f7fb fc1b 	bl	800f6dc <ucdr_deserialize_uint8_t>
 8013ea6:	b2e4      	uxtb	r4, r4
 8013ea8:	4020      	ands	r0, r4
 8013eaa:	bd70      	pop	{r4, r5, r6, pc}

08013eac <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 8013eac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013eb0:	4605      	mov	r5, r0
 8013eb2:	460e      	mov	r6, r1
 8013eb4:	f7fc fac4 	bl	8010440 <ucdr_deserialize_int32_t>
 8013eb8:	1d31      	adds	r1, r6, #4
 8013eba:	4607      	mov	r7, r0
 8013ebc:	4628      	mov	r0, r5
 8013ebe:	f7fb ff3d 	bl	800fd3c <ucdr_deserialize_uint32_t>
 8013ec2:	f106 0108 	add.w	r1, r6, #8
 8013ec6:	4680      	mov	r8, r0
 8013ec8:	4628      	mov	r0, r5
 8013eca:	f7fc fab9 	bl	8010440 <ucdr_deserialize_int32_t>
 8013ece:	f106 010c 	add.w	r1, r6, #12
 8013ed2:	4604      	mov	r4, r0
 8013ed4:	4628      	mov	r0, r5
 8013ed6:	f7fb ff31 	bl	800fd3c <ucdr_deserialize_uint32_t>
 8013eda:	ea07 0708 	and.w	r7, r7, r8
 8013ede:	403c      	ands	r4, r7
 8013ee0:	f106 0110 	add.w	r1, r6, #16
 8013ee4:	4004      	ands	r4, r0
 8013ee6:	4628      	mov	r0, r5
 8013ee8:	f7fc faaa 	bl	8010440 <ucdr_deserialize_int32_t>
 8013eec:	f106 0114 	add.w	r1, r6, #20
 8013ef0:	4607      	mov	r7, r0
 8013ef2:	4628      	mov	r0, r5
 8013ef4:	f7fb ff22 	bl	800fd3c <ucdr_deserialize_uint32_t>
 8013ef8:	b2e4      	uxtb	r4, r4
 8013efa:	403c      	ands	r4, r7
 8013efc:	4020      	ands	r0, r4
 8013efe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013f02:	bf00      	nop

08013f04 <uxr_serialize_SampleIdentity>:
 8013f04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013f08:	220c      	movs	r2, #12
 8013f0a:	4604      	mov	r4, r0
 8013f0c:	460d      	mov	r5, r1
 8013f0e:	f7fb f8d9 	bl	800f0c4 <ucdr_serialize_array_uint8_t>
 8013f12:	2203      	movs	r2, #3
 8013f14:	f105 010c 	add.w	r1, r5, #12
 8013f18:	4680      	mov	r8, r0
 8013f1a:	4620      	mov	r0, r4
 8013f1c:	f7fb f8d2 	bl	800f0c4 <ucdr_serialize_array_uint8_t>
 8013f20:	7be9      	ldrb	r1, [r5, #15]
 8013f22:	4681      	mov	r9, r0
 8013f24:	4620      	mov	r0, r4
 8013f26:	f7fb fbc3 	bl	800f6b0 <ucdr_serialize_uint8_t>
 8013f2a:	6929      	ldr	r1, [r5, #16]
 8013f2c:	4607      	mov	r7, r0
 8013f2e:	4620      	mov	r0, r4
 8013f30:	f7fc f9ec 	bl	801030c <ucdr_serialize_int32_t>
 8013f34:	6969      	ldr	r1, [r5, #20]
 8013f36:	4606      	mov	r6, r0
 8013f38:	4620      	mov	r0, r4
 8013f3a:	f7fb fdd5 	bl	800fae8 <ucdr_serialize_uint32_t>
 8013f3e:	ea08 0809 	and.w	r8, r8, r9
 8013f42:	ea07 0708 	and.w	r7, r7, r8
 8013f46:	403e      	ands	r6, r7
 8013f48:	4030      	ands	r0, r6
 8013f4a:	b2c0      	uxtb	r0, r0
 8013f4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08013f50 <uxr_deserialize_SampleIdentity>:
 8013f50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013f54:	220c      	movs	r2, #12
 8013f56:	4604      	mov	r4, r0
 8013f58:	460d      	mov	r5, r1
 8013f5a:	f7fb f917 	bl	800f18c <ucdr_deserialize_array_uint8_t>
 8013f5e:	2203      	movs	r2, #3
 8013f60:	f105 010c 	add.w	r1, r5, #12
 8013f64:	4680      	mov	r8, r0
 8013f66:	4620      	mov	r0, r4
 8013f68:	f7fb f910 	bl	800f18c <ucdr_deserialize_array_uint8_t>
 8013f6c:	f105 010f 	add.w	r1, r5, #15
 8013f70:	4681      	mov	r9, r0
 8013f72:	4620      	mov	r0, r4
 8013f74:	f7fb fbb2 	bl	800f6dc <ucdr_deserialize_uint8_t>
 8013f78:	f105 0110 	add.w	r1, r5, #16
 8013f7c:	4607      	mov	r7, r0
 8013f7e:	4620      	mov	r0, r4
 8013f80:	f7fc fa5e 	bl	8010440 <ucdr_deserialize_int32_t>
 8013f84:	f105 0114 	add.w	r1, r5, #20
 8013f88:	4606      	mov	r6, r0
 8013f8a:	4620      	mov	r0, r4
 8013f8c:	f7fb fed6 	bl	800fd3c <ucdr_deserialize_uint32_t>
 8013f90:	ea08 0809 	and.w	r8, r8, r9
 8013f94:	ea07 0708 	and.w	r7, r7, r8
 8013f98:	403e      	ands	r6, r7
 8013f9a:	4030      	ands	r0, r6
 8013f9c:	b2c0      	uxtb	r0, r0
 8013f9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013fa2:	bf00      	nop

08013fa4 <nereo_interfaces__msg__CommandVelocity__get_type_hash>:
 8013fa4:	4800      	ldr	r0, [pc, #0]	@ (8013fa8 <nereo_interfaces__msg__CommandVelocity__get_type_hash+0x4>)
 8013fa6:	4770      	bx	lr
 8013fa8:	20001010 	.word	0x20001010

08013fac <nereo_interfaces__msg__CommandVelocity__get_type_description>:
 8013fac:	4b03      	ldr	r3, [pc, #12]	@ (8013fbc <nereo_interfaces__msg__CommandVelocity__get_type_description+0x10>)
 8013fae:	781a      	ldrb	r2, [r3, #0]
 8013fb0:	b90a      	cbnz	r2, 8013fb6 <nereo_interfaces__msg__CommandVelocity__get_type_description+0xa>
 8013fb2:	2201      	movs	r2, #1
 8013fb4:	701a      	strb	r2, [r3, #0]
 8013fb6:	4802      	ldr	r0, [pc, #8]	@ (8013fc0 <nereo_interfaces__msg__CommandVelocity__get_type_description+0x14>)
 8013fb8:	4770      	bx	lr
 8013fba:	bf00      	nop
 8013fbc:	2001932d 	.word	0x2001932d
 8013fc0:	0801ff34 	.word	0x0801ff34

08013fc4 <nereo_interfaces__msg__CommandVelocity__get_type_description_sources>:
 8013fc4:	4b09      	ldr	r3, [pc, #36]	@ (8013fec <nereo_interfaces__msg__CommandVelocity__get_type_description_sources+0x28>)
 8013fc6:	781a      	ldrb	r2, [r3, #0]
 8013fc8:	b96a      	cbnz	r2, 8013fe6 <nereo_interfaces__msg__CommandVelocity__get_type_description_sources+0x22>
 8013fca:	b430      	push	{r4, r5}
 8013fcc:	4d08      	ldr	r5, [pc, #32]	@ (8013ff0 <nereo_interfaces__msg__CommandVelocity__get_type_description_sources+0x2c>)
 8013fce:	4c09      	ldr	r4, [pc, #36]	@ (8013ff4 <nereo_interfaces__msg__CommandVelocity__get_type_description_sources+0x30>)
 8013fd0:	2201      	movs	r2, #1
 8013fd2:	701a      	strb	r2, [r3, #0]
 8013fd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013fd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013fd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013fda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013fdc:	682b      	ldr	r3, [r5, #0]
 8013fde:	4806      	ldr	r0, [pc, #24]	@ (8013ff8 <nereo_interfaces__msg__CommandVelocity__get_type_description_sources+0x34>)
 8013fe0:	6023      	str	r3, [r4, #0]
 8013fe2:	bc30      	pop	{r4, r5}
 8013fe4:	4770      	bx	lr
 8013fe6:	4804      	ldr	r0, [pc, #16]	@ (8013ff8 <nereo_interfaces__msg__CommandVelocity__get_type_description_sources+0x34>)
 8013fe8:	4770      	bx	lr
 8013fea:	bf00      	nop
 8013fec:	2001932c 	.word	0x2001932c
 8013ff0:	0801ff10 	.word	0x0801ff10
 8013ff4:	20019308 	.word	0x20019308
 8013ff8:	0801ff04 	.word	0x0801ff04

08013ffc <nereo_interfaces__msg__CommandVelocity__init>:
 8013ffc:	3800      	subs	r0, #0
 8013ffe:	bf18      	it	ne
 8014000:	2001      	movne	r0, #1
 8014002:	4770      	bx	lr

08014004 <nereo_interfaces__msg__CommandVelocity__fini>:
 8014004:	4770      	bx	lr
 8014006:	bf00      	nop

08014008 <nereo_interfaces__srv__SetNavigationMode_Event__get_type_description.part.0>:
 8014008:	b510      	push	{r4, lr}
 801400a:	2000      	movs	r0, #0
 801400c:	f005 fece 	bl	8019dac <builtin_interfaces__msg__Time__get_type_description>
 8014010:	300c      	adds	r0, #12
 8014012:	c807      	ldmia	r0, {r0, r1, r2}
 8014014:	4b12      	ldr	r3, [pc, #72]	@ (8014060 <nereo_interfaces__srv__SetNavigationMode_Event__get_type_description.part.0+0x58>)
 8014016:	4c13      	ldr	r4, [pc, #76]	@ (8014064 <nereo_interfaces__srv__SetNavigationMode_Event__get_type_description.part.0+0x5c>)
 8014018:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801401c:	7823      	ldrb	r3, [r4, #0]
 801401e:	b90b      	cbnz	r3, 8014024 <nereo_interfaces__srv__SetNavigationMode_Event__get_type_description.part.0+0x1c>
 8014020:	2301      	movs	r3, #1
 8014022:	7023      	strb	r3, [r4, #0]
 8014024:	4b10      	ldr	r3, [pc, #64]	@ (8014068 <nereo_interfaces__srv__SetNavigationMode_Event__get_type_description.part.0+0x60>)
 8014026:	4c11      	ldr	r4, [pc, #68]	@ (801406c <nereo_interfaces__srv__SetNavigationMode_Event__get_type_description.part.0+0x64>)
 8014028:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801402c:	4b10      	ldr	r3, [pc, #64]	@ (8014070 <nereo_interfaces__srv__SetNavigationMode_Event__get_type_description.part.0+0x68>)
 801402e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8014032:	7823      	ldrb	r3, [r4, #0]
 8014034:	b90b      	cbnz	r3, 801403a <nereo_interfaces__srv__SetNavigationMode_Event__get_type_description.part.0+0x32>
 8014036:	2301      	movs	r3, #1
 8014038:	7023      	strb	r3, [r4, #0]
 801403a:	4b0e      	ldr	r3, [pc, #56]	@ (8014074 <nereo_interfaces__srv__SetNavigationMode_Event__get_type_description.part.0+0x6c>)
 801403c:	4c0e      	ldr	r4, [pc, #56]	@ (8014078 <nereo_interfaces__srv__SetNavigationMode_Event__get_type_description.part.0+0x70>)
 801403e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8014042:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8014046:	2000      	movs	r0, #0
 8014048:	f005 fa6c 	bl	8019524 <service_msgs__msg__ServiceEventInfo__get_type_description>
 801404c:	300c      	adds	r0, #12
 801404e:	c807      	ldmia	r0, {r0, r1, r2}
 8014050:	4b0a      	ldr	r3, [pc, #40]	@ (801407c <nereo_interfaces__srv__SetNavigationMode_Event__get_type_description.part.0+0x74>)
 8014052:	3418      	adds	r4, #24
 8014054:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8014058:	2201      	movs	r2, #1
 801405a:	701a      	strb	r2, [r3, #0]
 801405c:	bd10      	pop	{r4, pc}
 801405e:	bf00      	nop
 8014060:	200011dc 	.word	0x200011dc
 8014064:	20019513 	.word	0x20019513
 8014068:	0802006c 	.word	0x0802006c
 801406c:	20019512 	.word	0x20019512
 8014070:	200011f4 	.word	0x200011f4
 8014074:	08020048 	.word	0x08020048
 8014078:	2000120c 	.word	0x2000120c
 801407c:	20019511 	.word	0x20019511

08014080 <nereo_interfaces__srv__SetNavigationMode__get_type_hash>:
 8014080:	4800      	ldr	r0, [pc, #0]	@ (8014084 <nereo_interfaces__srv__SetNavigationMode__get_type_hash+0x4>)
 8014082:	4770      	bx	lr
 8014084:	2000115c 	.word	0x2000115c

08014088 <nereo_interfaces__srv__SetNavigationMode_Request__get_type_hash>:
 8014088:	4800      	ldr	r0, [pc, #0]	@ (801408c <nereo_interfaces__srv__SetNavigationMode_Request__get_type_hash+0x4>)
 801408a:	4770      	bx	lr
 801408c:	20001138 	.word	0x20001138

08014090 <nereo_interfaces__srv__SetNavigationMode_Response__get_type_hash>:
 8014090:	4800      	ldr	r0, [pc, #0]	@ (8014094 <nereo_interfaces__srv__SetNavigationMode_Response__get_type_hash+0x4>)
 8014092:	4770      	bx	lr
 8014094:	20001114 	.word	0x20001114

08014098 <nereo_interfaces__srv__SetNavigationMode_Event__get_type_hash>:
 8014098:	4800      	ldr	r0, [pc, #0]	@ (801409c <nereo_interfaces__srv__SetNavigationMode_Event__get_type_hash+0x4>)
 801409a:	4770      	bx	lr
 801409c:	200010f0 	.word	0x200010f0

080140a0 <nereo_interfaces__srv__SetNavigationMode__get_type_description>:
 80140a0:	b538      	push	{r3, r4, r5, lr}
 80140a2:	4d1d      	ldr	r5, [pc, #116]	@ (8014118 <nereo_interfaces__srv__SetNavigationMode__get_type_description+0x78>)
 80140a4:	7828      	ldrb	r0, [r5, #0]
 80140a6:	b108      	cbz	r0, 80140ac <nereo_interfaces__srv__SetNavigationMode__get_type_description+0xc>
 80140a8:	481c      	ldr	r0, [pc, #112]	@ (801411c <nereo_interfaces__srv__SetNavigationMode__get_type_description+0x7c>)
 80140aa:	bd38      	pop	{r3, r4, r5, pc}
 80140ac:	f005 fe7e 	bl	8019dac <builtin_interfaces__msg__Time__get_type_description>
 80140b0:	300c      	adds	r0, #12
 80140b2:	c807      	ldmia	r0, {r0, r1, r2}
 80140b4:	4b1a      	ldr	r3, [pc, #104]	@ (8014120 <nereo_interfaces__srv__SetNavigationMode__get_type_description+0x80>)
 80140b6:	4c1b      	ldr	r4, [pc, #108]	@ (8014124 <nereo_interfaces__srv__SetNavigationMode__get_type_description+0x84>)
 80140b8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80140bc:	7823      	ldrb	r3, [r4, #0]
 80140be:	b33b      	cbz	r3, 8014110 <nereo_interfaces__srv__SetNavigationMode__get_type_description+0x70>
 80140c0:	4b19      	ldr	r3, [pc, #100]	@ (8014128 <nereo_interfaces__srv__SetNavigationMode__get_type_description+0x88>)
 80140c2:	4c1a      	ldr	r4, [pc, #104]	@ (801412c <nereo_interfaces__srv__SetNavigationMode__get_type_description+0x8c>)
 80140c4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80140c8:	4b19      	ldr	r3, [pc, #100]	@ (8014130 <nereo_interfaces__srv__SetNavigationMode__get_type_description+0x90>)
 80140ca:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80140ce:	7823      	ldrb	r3, [r4, #0]
 80140d0:	b90b      	cbnz	r3, 80140d6 <nereo_interfaces__srv__SetNavigationMode__get_type_description+0x36>
 80140d2:	2301      	movs	r3, #1
 80140d4:	7023      	strb	r3, [r4, #0]
 80140d6:	4b17      	ldr	r3, [pc, #92]	@ (8014134 <nereo_interfaces__srv__SetNavigationMode__get_type_description+0x94>)
 80140d8:	4c17      	ldr	r4, [pc, #92]	@ (8014138 <nereo_interfaces__srv__SetNavigationMode__get_type_description+0x98>)
 80140da:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80140de:	4b17      	ldr	r3, [pc, #92]	@ (801413c <nereo_interfaces__srv__SetNavigationMode__get_type_description+0x9c>)
 80140e0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80140e4:	7823      	ldrb	r3, [r4, #0]
 80140e6:	b90b      	cbnz	r3, 80140ec <nereo_interfaces__srv__SetNavigationMode__get_type_description+0x4c>
 80140e8:	2301      	movs	r3, #1
 80140ea:	7023      	strb	r3, [r4, #0]
 80140ec:	4b14      	ldr	r3, [pc, #80]	@ (8014140 <nereo_interfaces__srv__SetNavigationMode__get_type_description+0xa0>)
 80140ee:	4c15      	ldr	r4, [pc, #84]	@ (8014144 <nereo_interfaces__srv__SetNavigationMode__get_type_description+0xa4>)
 80140f0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80140f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80140f8:	2000      	movs	r0, #0
 80140fa:	f005 fa13 	bl	8019524 <service_msgs__msg__ServiceEventInfo__get_type_description>
 80140fe:	300c      	adds	r0, #12
 8014100:	c807      	ldmia	r0, {r0, r1, r2}
 8014102:	3418      	adds	r4, #24
 8014104:	2301      	movs	r3, #1
 8014106:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801410a:	702b      	strb	r3, [r5, #0]
 801410c:	4803      	ldr	r0, [pc, #12]	@ (801411c <nereo_interfaces__srv__SetNavigationMode__get_type_description+0x7c>)
 801410e:	bd38      	pop	{r3, r4, r5, pc}
 8014110:	f7ff ff7a 	bl	8014008 <nereo_interfaces__srv__SetNavigationMode_Event__get_type_description.part.0>
 8014114:	e7d4      	b.n	80140c0 <nereo_interfaces__srv__SetNavigationMode__get_type_description+0x20>
 8014116:	bf00      	nop
 8014118:	20019514 	.word	0x20019514
 801411c:	08020084 	.word	0x08020084
 8014120:	20001434 	.word	0x20001434
 8014124:	20019511 	.word	0x20019511
 8014128:	08020024 	.word	0x08020024
 801412c:	20019513 	.word	0x20019513
 8014130:	2000144c 	.word	0x2000144c
 8014134:	0802006c 	.word	0x0802006c
 8014138:	20019512 	.word	0x20019512
 801413c:	20001464 	.word	0x20001464
 8014140:	08020048 	.word	0x08020048
 8014144:	2000147c 	.word	0x2000147c

08014148 <nereo_interfaces__srv__SetNavigationMode_Request__get_type_description>:
 8014148:	4b03      	ldr	r3, [pc, #12]	@ (8014158 <nereo_interfaces__srv__SetNavigationMode_Request__get_type_description+0x10>)
 801414a:	781a      	ldrb	r2, [r3, #0]
 801414c:	b90a      	cbnz	r2, 8014152 <nereo_interfaces__srv__SetNavigationMode_Request__get_type_description+0xa>
 801414e:	2201      	movs	r2, #1
 8014150:	701a      	strb	r2, [r3, #0]
 8014152:	4802      	ldr	r0, [pc, #8]	@ (801415c <nereo_interfaces__srv__SetNavigationMode_Request__get_type_description+0x14>)
 8014154:	4770      	bx	lr
 8014156:	bf00      	nop
 8014158:	20019513 	.word	0x20019513
 801415c:	08020060 	.word	0x08020060

08014160 <nereo_interfaces__srv__SetNavigationMode_Response__get_type_description>:
 8014160:	4b03      	ldr	r3, [pc, #12]	@ (8014170 <nereo_interfaces__srv__SetNavigationMode_Response__get_type_description+0x10>)
 8014162:	781a      	ldrb	r2, [r3, #0]
 8014164:	b90a      	cbnz	r2, 801416a <nereo_interfaces__srv__SetNavigationMode_Response__get_type_description+0xa>
 8014166:	2201      	movs	r2, #1
 8014168:	701a      	strb	r2, [r3, #0]
 801416a:	4802      	ldr	r0, [pc, #8]	@ (8014174 <nereo_interfaces__srv__SetNavigationMode_Response__get_type_description+0x14>)
 801416c:	4770      	bx	lr
 801416e:	bf00      	nop
 8014170:	20019512 	.word	0x20019512
 8014174:	0802003c 	.word	0x0802003c

08014178 <nereo_interfaces__srv__SetNavigationMode_Event__get_type_description>:
 8014178:	b508      	push	{r3, lr}
 801417a:	4b04      	ldr	r3, [pc, #16]	@ (801418c <nereo_interfaces__srv__SetNavigationMode_Event__get_type_description+0x14>)
 801417c:	781b      	ldrb	r3, [r3, #0]
 801417e:	b10b      	cbz	r3, 8014184 <nereo_interfaces__srv__SetNavigationMode_Event__get_type_description+0xc>
 8014180:	4803      	ldr	r0, [pc, #12]	@ (8014190 <nereo_interfaces__srv__SetNavigationMode_Event__get_type_description+0x18>)
 8014182:	bd08      	pop	{r3, pc}
 8014184:	f7ff ff40 	bl	8014008 <nereo_interfaces__srv__SetNavigationMode_Event__get_type_description.part.0>
 8014188:	4801      	ldr	r0, [pc, #4]	@ (8014190 <nereo_interfaces__srv__SetNavigationMode_Event__get_type_description+0x18>)
 801418a:	bd08      	pop	{r3, pc}
 801418c:	20019511 	.word	0x20019511
 8014190:	08020018 	.word	0x08020018

08014194 <nereo_interfaces__srv__SetNavigationMode__get_type_description_sources>:
 8014194:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014198:	4b2c      	ldr	r3, [pc, #176]	@ (801424c <nereo_interfaces__srv__SetNavigationMode__get_type_description_sources+0xb8>)
 801419a:	f893 9000 	ldrb.w	r9, [r3]
 801419e:	f1b9 0f00 	cmp.w	r9, #0
 80141a2:	d002      	beq.n	80141aa <nereo_interfaces__srv__SetNavigationMode__get_type_description_sources+0x16>
 80141a4:	482a      	ldr	r0, [pc, #168]	@ (8014250 <nereo_interfaces__srv__SetNavigationMode__get_type_description_sources+0xbc>)
 80141a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80141aa:	4d2a      	ldr	r5, [pc, #168]	@ (8014254 <nereo_interfaces__srv__SetNavigationMode__get_type_description_sources+0xc0>)
 80141ac:	4c2a      	ldr	r4, [pc, #168]	@ (8014258 <nereo_interfaces__srv__SetNavigationMode__get_type_description_sources+0xc4>)
 80141ae:	f8df b0b0 	ldr.w	fp, [pc, #176]	@ 8014260 <nereo_interfaces__srv__SetNavigationMode__get_type_description_sources+0xcc>
 80141b2:	f8df 80b0 	ldr.w	r8, [pc, #176]	@ 8014264 <nereo_interfaces__srv__SetNavigationMode__get_type_description_sources+0xd0>
 80141b6:	4e29      	ldr	r6, [pc, #164]	@ (801425c <nereo_interfaces__srv__SetNavigationMode__get_type_description_sources+0xc8>)
 80141b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80141ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80141bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80141be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80141c0:	682b      	ldr	r3, [r5, #0]
 80141c2:	4625      	mov	r5, r4
 80141c4:	4648      	mov	r0, r9
 80141c6:	f845 3b04 	str.w	r3, [r5], #4
 80141ca:	f005 fdfb 	bl	8019dc4 <builtin_interfaces__msg__Time__get_individual_type_description_source>
 80141ce:	4684      	mov	ip, r0
 80141d0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80141d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80141d6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80141da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80141dc:	f8dc 3000 	ldr.w	r3, [ip]
 80141e0:	602b      	str	r3, [r5, #0]
 80141e2:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 80141e6:	f104 0a28 	add.w	sl, r4, #40	@ 0x28
 80141ea:	e8aa 000f 	stmia.w	sl!, {r0, r1, r2, r3}
 80141ee:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 80141f2:	e8aa 000f 	stmia.w	sl!, {r0, r1, r2, r3}
 80141f6:	f8db 3000 	ldr.w	r3, [fp]
 80141fa:	f8ca 3000 	str.w	r3, [sl]
 80141fe:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 8014202:	f104 074c 	add.w	r7, r4, #76	@ 0x4c
 8014206:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8014208:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 801420c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801420e:	f8d8 3000 	ldr.w	r3, [r8]
 8014212:	603b      	str	r3, [r7, #0]
 8014214:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8014216:	f104 0e70 	add.w	lr, r4, #112	@ 0x70
 801421a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801421e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8014220:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014224:	6833      	ldr	r3, [r6, #0]
 8014226:	f8ce 3000 	str.w	r3, [lr]
 801422a:	4648      	mov	r0, r9
 801422c:	f005 f992 	bl	8019554 <service_msgs__msg__ServiceEventInfo__get_individual_type_description_source>
 8014230:	4a06      	ldr	r2, [pc, #24]	@ (801424c <nereo_interfaces__srv__SetNavigationMode__get_type_description_sources+0xb8>)
 8014232:	2301      	movs	r3, #1
 8014234:	4605      	mov	r5, r0
 8014236:	7013      	strb	r3, [r2, #0]
 8014238:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801423a:	3494      	adds	r4, #148	@ 0x94
 801423c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801423e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014240:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014242:	682b      	ldr	r3, [r5, #0]
 8014244:	4802      	ldr	r0, [pc, #8]	@ (8014250 <nereo_interfaces__srv__SetNavigationMode__get_type_description_sources+0xbc>)
 8014246:	6023      	str	r3, [r4, #0]
 8014248:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801424c:	20019510 	.word	0x20019510
 8014250:	0801ff7c 	.word	0x0801ff7c
 8014254:	0801fff4 	.word	0x0801fff4
 8014258:	20019438 	.word	0x20019438
 801425c:	0801ffac 	.word	0x0801ffac
 8014260:	0801ff88 	.word	0x0801ff88
 8014264:	0801ffd0 	.word	0x0801ffd0

08014268 <nereo_interfaces__srv__SetNavigationMode_Request__get_type_description_sources>:
 8014268:	4b09      	ldr	r3, [pc, #36]	@ (8014290 <nereo_interfaces__srv__SetNavigationMode_Request__get_type_description_sources+0x28>)
 801426a:	781a      	ldrb	r2, [r3, #0]
 801426c:	b96a      	cbnz	r2, 801428a <nereo_interfaces__srv__SetNavigationMode_Request__get_type_description_sources+0x22>
 801426e:	b430      	push	{r4, r5}
 8014270:	4d08      	ldr	r5, [pc, #32]	@ (8014294 <nereo_interfaces__srv__SetNavigationMode_Request__get_type_description_sources+0x2c>)
 8014272:	4c09      	ldr	r4, [pc, #36]	@ (8014298 <nereo_interfaces__srv__SetNavigationMode_Request__get_type_description_sources+0x30>)
 8014274:	2201      	movs	r2, #1
 8014276:	701a      	strb	r2, [r3, #0]
 8014278:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801427a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801427c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801427e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014280:	682b      	ldr	r3, [r5, #0]
 8014282:	4806      	ldr	r0, [pc, #24]	@ (801429c <nereo_interfaces__srv__SetNavigationMode_Request__get_type_description_sources+0x34>)
 8014284:	6023      	str	r3, [r4, #0]
 8014286:	bc30      	pop	{r4, r5}
 8014288:	4770      	bx	lr
 801428a:	4804      	ldr	r0, [pc, #16]	@ (801429c <nereo_interfaces__srv__SetNavigationMode_Request__get_type_description_sources+0x34>)
 801428c:	4770      	bx	lr
 801428e:	bf00      	nop
 8014290:	20019434 	.word	0x20019434
 8014294:	0801ffd0 	.word	0x0801ffd0
 8014298:	20019410 	.word	0x20019410
 801429c:	0801ff70 	.word	0x0801ff70

080142a0 <nereo_interfaces__srv__SetNavigationMode_Response__get_type_description_sources>:
 80142a0:	4b09      	ldr	r3, [pc, #36]	@ (80142c8 <nereo_interfaces__srv__SetNavigationMode_Response__get_type_description_sources+0x28>)
 80142a2:	781a      	ldrb	r2, [r3, #0]
 80142a4:	b96a      	cbnz	r2, 80142c2 <nereo_interfaces__srv__SetNavigationMode_Response__get_type_description_sources+0x22>
 80142a6:	b430      	push	{r4, r5}
 80142a8:	4d08      	ldr	r5, [pc, #32]	@ (80142cc <nereo_interfaces__srv__SetNavigationMode_Response__get_type_description_sources+0x2c>)
 80142aa:	4c09      	ldr	r4, [pc, #36]	@ (80142d0 <nereo_interfaces__srv__SetNavigationMode_Response__get_type_description_sources+0x30>)
 80142ac:	2201      	movs	r2, #1
 80142ae:	701a      	strb	r2, [r3, #0]
 80142b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80142b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80142b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80142b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80142b8:	682b      	ldr	r3, [r5, #0]
 80142ba:	4806      	ldr	r0, [pc, #24]	@ (80142d4 <nereo_interfaces__srv__SetNavigationMode_Response__get_type_description_sources+0x34>)
 80142bc:	6023      	str	r3, [r4, #0]
 80142be:	bc30      	pop	{r4, r5}
 80142c0:	4770      	bx	lr
 80142c2:	4804      	ldr	r0, [pc, #16]	@ (80142d4 <nereo_interfaces__srv__SetNavigationMode_Response__get_type_description_sources+0x34>)
 80142c4:	4770      	bx	lr
 80142c6:	bf00      	nop
 80142c8:	2001940c 	.word	0x2001940c
 80142cc:	0801ffac 	.word	0x0801ffac
 80142d0:	200193e8 	.word	0x200193e8
 80142d4:	0801ff64 	.word	0x0801ff64

080142d8 <nereo_interfaces__srv__SetNavigationMode_Event__get_type_description_sources>:
 80142d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80142dc:	4e27      	ldr	r6, [pc, #156]	@ (801437c <nereo_interfaces__srv__SetNavigationMode_Event__get_type_description_sources+0xa4>)
 80142de:	f896 8000 	ldrb.w	r8, [r6]
 80142e2:	f1b8 0f00 	cmp.w	r8, #0
 80142e6:	d002      	beq.n	80142ee <nereo_interfaces__srv__SetNavigationMode_Event__get_type_description_sources+0x16>
 80142e8:	4825      	ldr	r0, [pc, #148]	@ (8014380 <nereo_interfaces__srv__SetNavigationMode_Event__get_type_description_sources+0xa8>)
 80142ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80142ee:	4d25      	ldr	r5, [pc, #148]	@ (8014384 <nereo_interfaces__srv__SetNavigationMode_Event__get_type_description_sources+0xac>)
 80142f0:	4c25      	ldr	r4, [pc, #148]	@ (8014388 <nereo_interfaces__srv__SetNavigationMode_Event__get_type_description_sources+0xb0>)
 80142f2:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 8014390 <nereo_interfaces__srv__SetNavigationMode_Event__get_type_description_sources+0xb8>
 80142f6:	4f25      	ldr	r7, [pc, #148]	@ (801438c <nereo_interfaces__srv__SetNavigationMode_Event__get_type_description_sources+0xb4>)
 80142f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80142fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80142fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80142fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014300:	682b      	ldr	r3, [r5, #0]
 8014302:	4625      	mov	r5, r4
 8014304:	4640      	mov	r0, r8
 8014306:	f845 3b04 	str.w	r3, [r5], #4
 801430a:	f005 fd5b 	bl	8019dc4 <builtin_interfaces__msg__Time__get_individual_type_description_source>
 801430e:	4684      	mov	ip, r0
 8014310:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014314:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014316:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801431a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801431c:	f8dc 3000 	ldr.w	r3, [ip]
 8014320:	602b      	str	r3, [r5, #0]
 8014322:	e8ba 000f 	ldmia.w	sl!, {r0, r1, r2, r3}
 8014326:	f104 0928 	add.w	r9, r4, #40	@ 0x28
 801432a:	e8a9 000f 	stmia.w	r9!, {r0, r1, r2, r3}
 801432e:	e8ba 000f 	ldmia.w	sl!, {r0, r1, r2, r3}
 8014332:	e8a9 000f 	stmia.w	r9!, {r0, r1, r2, r3}
 8014336:	f8da 3000 	ldr.w	r3, [sl]
 801433a:	f8c9 3000 	str.w	r3, [r9]
 801433e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8014340:	f104 0e4c 	add.w	lr, r4, #76	@ 0x4c
 8014344:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014348:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801434a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801434e:	683b      	ldr	r3, [r7, #0]
 8014350:	f8ce 3000 	str.w	r3, [lr]
 8014354:	4640      	mov	r0, r8
 8014356:	f005 f8fd 	bl	8019554 <service_msgs__msg__ServiceEventInfo__get_individual_type_description_source>
 801435a:	2301      	movs	r3, #1
 801435c:	4684      	mov	ip, r0
 801435e:	7033      	strb	r3, [r6, #0]
 8014360:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014364:	3470      	adds	r4, #112	@ 0x70
 8014366:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014368:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801436c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801436e:	f8dc 3000 	ldr.w	r3, [ip]
 8014372:	4803      	ldr	r0, [pc, #12]	@ (8014380 <nereo_interfaces__srv__SetNavigationMode_Event__get_type_description_sources+0xa8>)
 8014374:	6023      	str	r3, [r4, #0]
 8014376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801437a:	bf00      	nop
 801437c:	200193e4 	.word	0x200193e4
 8014380:	0801ff58 	.word	0x0801ff58
 8014384:	0801ff88 	.word	0x0801ff88
 8014388:	20019330 	.word	0x20019330
 801438c:	0801ffac 	.word	0x0801ffac
 8014390:	0801ffd0 	.word	0x0801ffd0

08014394 <nereo_interfaces__srv__SetNavigationMode_Request__init>:
 8014394:	3800      	subs	r0, #0
 8014396:	bf18      	it	ne
 8014398:	2001      	movne	r0, #1
 801439a:	4770      	bx	lr

0801439c <nereo_interfaces__srv__SetNavigationMode_Request__fini>:
 801439c:	4770      	bx	lr
 801439e:	bf00      	nop

080143a0 <nereo_interfaces__srv__SetNavigationMode_Request__copy>:
 80143a0:	b128      	cbz	r0, 80143ae <nereo_interfaces__srv__SetNavigationMode_Request__copy+0xe>
 80143a2:	b119      	cbz	r1, 80143ac <nereo_interfaces__srv__SetNavigationMode_Request__copy+0xc>
 80143a4:	7803      	ldrb	r3, [r0, #0]
 80143a6:	700b      	strb	r3, [r1, #0]
 80143a8:	2001      	movs	r0, #1
 80143aa:	4770      	bx	lr
 80143ac:	4608      	mov	r0, r1
 80143ae:	4770      	bx	lr

080143b0 <nereo_interfaces__srv__SetNavigationMode_Request__Sequence__init>:
 80143b0:	b1c0      	cbz	r0, 80143e4 <nereo_interfaces__srv__SetNavigationMode_Request__Sequence__init+0x34>
 80143b2:	b530      	push	{r4, r5, lr}
 80143b4:	b087      	sub	sp, #28
 80143b6:	460d      	mov	r5, r1
 80143b8:	4604      	mov	r4, r0
 80143ba:	a801      	add	r0, sp, #4
 80143bc:	f7f8 fef2 	bl	800d1a4 <rcutils_get_default_allocator>
 80143c0:	9a05      	ldr	r2, [sp, #20]
 80143c2:	b935      	cbnz	r5, 80143d2 <nereo_interfaces__srv__SetNavigationMode_Request__Sequence__init+0x22>
 80143c4:	4628      	mov	r0, r5
 80143c6:	e9c4 0500 	strd	r0, r5, [r4]
 80143ca:	2001      	movs	r0, #1
 80143cc:	60a5      	str	r5, [r4, #8]
 80143ce:	b007      	add	sp, #28
 80143d0:	bd30      	pop	{r4, r5, pc}
 80143d2:	9b04      	ldr	r3, [sp, #16]
 80143d4:	2101      	movs	r1, #1
 80143d6:	4628      	mov	r0, r5
 80143d8:	4798      	blx	r3
 80143da:	2800      	cmp	r0, #0
 80143dc:	d1f3      	bne.n	80143c6 <nereo_interfaces__srv__SetNavigationMode_Request__Sequence__init+0x16>
 80143de:	2000      	movs	r0, #0
 80143e0:	b007      	add	sp, #28
 80143e2:	bd30      	pop	{r4, r5, pc}
 80143e4:	2000      	movs	r0, #0
 80143e6:	4770      	bx	lr

080143e8 <nereo_interfaces__srv__SetNavigationMode_Request__Sequence__fini>:
 80143e8:	b180      	cbz	r0, 801440c <nereo_interfaces__srv__SetNavigationMode_Request__Sequence__fini+0x24>
 80143ea:	b510      	push	{r4, lr}
 80143ec:	4604      	mov	r4, r0
 80143ee:	b086      	sub	sp, #24
 80143f0:	a801      	add	r0, sp, #4
 80143f2:	f7f8 fed7 	bl	800d1a4 <rcutils_get_default_allocator>
 80143f6:	6820      	ldr	r0, [r4, #0]
 80143f8:	b130      	cbz	r0, 8014408 <nereo_interfaces__srv__SetNavigationMode_Request__Sequence__fini+0x20>
 80143fa:	9b02      	ldr	r3, [sp, #8]
 80143fc:	9905      	ldr	r1, [sp, #20]
 80143fe:	4798      	blx	r3
 8014400:	2300      	movs	r3, #0
 8014402:	e9c4 3300 	strd	r3, r3, [r4]
 8014406:	60a3      	str	r3, [r4, #8]
 8014408:	b006      	add	sp, #24
 801440a:	bd10      	pop	{r4, pc}
 801440c:	4770      	bx	lr
 801440e:	bf00      	nop

08014410 <nereo_interfaces__srv__SetNavigationMode_Response__init>:
 8014410:	3800      	subs	r0, #0
 8014412:	bf18      	it	ne
 8014414:	2001      	movne	r0, #1
 8014416:	4770      	bx	lr

08014418 <nereo_interfaces__srv__SetNavigationMode_Response__fini>:
 8014418:	4770      	bx	lr
 801441a:	bf00      	nop

0801441c <nereo_interfaces__srv__SetNavigationMode_Response__copy>:
 801441c:	b138      	cbz	r0, 801442e <nereo_interfaces__srv__SetNavigationMode_Response__copy+0x12>
 801441e:	b129      	cbz	r1, 801442c <nereo_interfaces__srv__SetNavigationMode_Response__copy+0x10>
 8014420:	7803      	ldrb	r3, [r0, #0]
 8014422:	700b      	strb	r3, [r1, #0]
 8014424:	7843      	ldrb	r3, [r0, #1]
 8014426:	704b      	strb	r3, [r1, #1]
 8014428:	2001      	movs	r0, #1
 801442a:	4770      	bx	lr
 801442c:	4608      	mov	r0, r1
 801442e:	4770      	bx	lr

08014430 <nereo_interfaces__srv__SetNavigationMode_Response__Sequence__init>:
 8014430:	b1c0      	cbz	r0, 8014464 <nereo_interfaces__srv__SetNavigationMode_Response__Sequence__init+0x34>
 8014432:	b530      	push	{r4, r5, lr}
 8014434:	b087      	sub	sp, #28
 8014436:	460d      	mov	r5, r1
 8014438:	4604      	mov	r4, r0
 801443a:	a801      	add	r0, sp, #4
 801443c:	f7f8 feb2 	bl	800d1a4 <rcutils_get_default_allocator>
 8014440:	9a05      	ldr	r2, [sp, #20]
 8014442:	b935      	cbnz	r5, 8014452 <nereo_interfaces__srv__SetNavigationMode_Response__Sequence__init+0x22>
 8014444:	4628      	mov	r0, r5
 8014446:	e9c4 0500 	strd	r0, r5, [r4]
 801444a:	2001      	movs	r0, #1
 801444c:	60a5      	str	r5, [r4, #8]
 801444e:	b007      	add	sp, #28
 8014450:	bd30      	pop	{r4, r5, pc}
 8014452:	9b04      	ldr	r3, [sp, #16]
 8014454:	2102      	movs	r1, #2
 8014456:	4628      	mov	r0, r5
 8014458:	4798      	blx	r3
 801445a:	2800      	cmp	r0, #0
 801445c:	d1f3      	bne.n	8014446 <nereo_interfaces__srv__SetNavigationMode_Response__Sequence__init+0x16>
 801445e:	2000      	movs	r0, #0
 8014460:	b007      	add	sp, #28
 8014462:	bd30      	pop	{r4, r5, pc}
 8014464:	2000      	movs	r0, #0
 8014466:	4770      	bx	lr

08014468 <nereo_interfaces__srv__SetNavigationMode_Response__Sequence__fini>:
 8014468:	b180      	cbz	r0, 801448c <nereo_interfaces__srv__SetNavigationMode_Response__Sequence__fini+0x24>
 801446a:	b510      	push	{r4, lr}
 801446c:	4604      	mov	r4, r0
 801446e:	b086      	sub	sp, #24
 8014470:	a801      	add	r0, sp, #4
 8014472:	f7f8 fe97 	bl	800d1a4 <rcutils_get_default_allocator>
 8014476:	6820      	ldr	r0, [r4, #0]
 8014478:	b130      	cbz	r0, 8014488 <nereo_interfaces__srv__SetNavigationMode_Response__Sequence__fini+0x20>
 801447a:	9b02      	ldr	r3, [sp, #8]
 801447c:	9905      	ldr	r1, [sp, #20]
 801447e:	4798      	blx	r3
 8014480:	2300      	movs	r3, #0
 8014482:	e9c4 3300 	strd	r3, r3, [r4]
 8014486:	60a3      	str	r3, [r4, #8]
 8014488:	b006      	add	sp, #24
 801448a:	bd10      	pop	{r4, pc}
 801448c:	4770      	bx	lr
 801448e:	bf00      	nop

08014490 <nereo_interfaces__srv__SetNavigationMode_Event__init>:
 8014490:	b570      	push	{r4, r5, r6, lr}
 8014492:	b08c      	sub	sp, #48	@ 0x30
 8014494:	b370      	cbz	r0, 80144f4 <nereo_interfaces__srv__SetNavigationMode_Event__init+0x64>
 8014496:	4604      	mov	r4, r0
 8014498:	f005 f888 	bl	80195ac <service_msgs__msg__ServiceEventInfo__init>
 801449c:	4605      	mov	r5, r0
 801449e:	b178      	cbz	r0, 80144c0 <nereo_interfaces__srv__SetNavigationMode_Event__init+0x30>
 80144a0:	2600      	movs	r6, #0
 80144a2:	4668      	mov	r0, sp
 80144a4:	f7f8 fe7e 	bl	800d1a4 <rcutils_get_default_allocator>
 80144a8:	4668      	mov	r0, sp
 80144aa:	e9c4 660a 	strd	r6, r6, [r4, #40]	@ 0x28
 80144ae:	6326      	str	r6, [r4, #48]	@ 0x30
 80144b0:	f7f8 fe78 	bl	800d1a4 <rcutils_get_default_allocator>
 80144b4:	4628      	mov	r0, r5
 80144b6:	e9c4 660d 	strd	r6, r6, [r4, #52]	@ 0x34
 80144ba:	63e6      	str	r6, [r4, #60]	@ 0x3c
 80144bc:	b00c      	add	sp, #48	@ 0x30
 80144be:	bd70      	pop	{r4, r5, r6, pc}
 80144c0:	4620      	mov	r0, r4
 80144c2:	f005 f883 	bl	80195cc <service_msgs__msg__ServiceEventInfo__fini>
 80144c6:	a807      	add	r0, sp, #28
 80144c8:	f7f8 fe6c 	bl	800d1a4 <rcutils_get_default_allocator>
 80144cc:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80144ce:	b128      	cbz	r0, 80144dc <nereo_interfaces__srv__SetNavigationMode_Event__init+0x4c>
 80144d0:	9b08      	ldr	r3, [sp, #32]
 80144d2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80144d4:	4798      	blx	r3
 80144d6:	e9c4 550a 	strd	r5, r5, [r4, #40]	@ 0x28
 80144da:	6325      	str	r5, [r4, #48]	@ 0x30
 80144dc:	a807      	add	r0, sp, #28
 80144de:	f7f8 fe61 	bl	800d1a4 <rcutils_get_default_allocator>
 80144e2:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 80144e4:	b130      	cbz	r0, 80144f4 <nereo_interfaces__srv__SetNavigationMode_Event__init+0x64>
 80144e6:	9b08      	ldr	r3, [sp, #32]
 80144e8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80144ea:	4798      	blx	r3
 80144ec:	2300      	movs	r3, #0
 80144ee:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
 80144f2:	63e3      	str	r3, [r4, #60]	@ 0x3c
 80144f4:	2500      	movs	r5, #0
 80144f6:	4628      	mov	r0, r5
 80144f8:	b00c      	add	sp, #48	@ 0x30
 80144fa:	bd70      	pop	{r4, r5, r6, pc}

080144fc <nereo_interfaces__srv__SetNavigationMode_Event__fini>:
 80144fc:	b1f0      	cbz	r0, 801453c <nereo_interfaces__srv__SetNavigationMode_Event__fini+0x40>
 80144fe:	b510      	push	{r4, lr}
 8014500:	4604      	mov	r4, r0
 8014502:	b086      	sub	sp, #24
 8014504:	f005 f862 	bl	80195cc <service_msgs__msg__ServiceEventInfo__fini>
 8014508:	a801      	add	r0, sp, #4
 801450a:	f7f8 fe4b 	bl	800d1a4 <rcutils_get_default_allocator>
 801450e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8014510:	b130      	cbz	r0, 8014520 <nereo_interfaces__srv__SetNavigationMode_Event__fini+0x24>
 8014512:	9b02      	ldr	r3, [sp, #8]
 8014514:	9905      	ldr	r1, [sp, #20]
 8014516:	4798      	blx	r3
 8014518:	2300      	movs	r3, #0
 801451a:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 801451e:	6323      	str	r3, [r4, #48]	@ 0x30
 8014520:	a801      	add	r0, sp, #4
 8014522:	f7f8 fe3f 	bl	800d1a4 <rcutils_get_default_allocator>
 8014526:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8014528:	b130      	cbz	r0, 8014538 <nereo_interfaces__srv__SetNavigationMode_Event__fini+0x3c>
 801452a:	9b02      	ldr	r3, [sp, #8]
 801452c:	9905      	ldr	r1, [sp, #20]
 801452e:	4798      	blx	r3
 8014530:	2300      	movs	r3, #0
 8014532:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
 8014536:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8014538:	b006      	add	sp, #24
 801453a:	bd10      	pop	{r4, pc}
 801453c:	4770      	bx	lr
 801453e:	bf00      	nop

08014540 <rosidl_typesupport_c__create_service_event_message__nereo_interfaces__srv__SetNavigationMode>:
 8014540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014544:	2900      	cmp	r1, #0
 8014546:	d03e      	beq.n	80145c6 <rosidl_typesupport_c__create_service_event_message__nereo_interfaces__srv__SetNavigationMode+0x86>
 8014548:	4605      	mov	r5, r0
 801454a:	2800      	cmp	r0, #0
 801454c:	d03b      	beq.n	80145c6 <rosidl_typesupport_c__create_service_event_message__nereo_interfaces__srv__SetNavigationMode+0x86>
 801454e:	4698      	mov	r8, r3
 8014550:	460e      	mov	r6, r1
 8014552:	680b      	ldr	r3, [r1, #0]
 8014554:	6909      	ldr	r1, [r1, #16]
 8014556:	2040      	movs	r0, #64	@ 0x40
 8014558:	4617      	mov	r7, r2
 801455a:	4798      	blx	r3
 801455c:	4604      	mov	r4, r0
 801455e:	f7ff ff97 	bl	8014490 <nereo_interfaces__srv__SetNavigationMode_Event__init>
 8014562:	b360      	cbz	r0, 80145be <rosidl_typesupport_c__create_service_event_message__nereo_interfaces__srv__SetNavigationMode+0x7e>
 8014564:	782b      	ldrb	r3, [r5, #0]
 8014566:	7023      	strb	r3, [r4, #0]
 8014568:	e9d5 2301 	ldrd	r2, r3, [r5, #4]
 801456c:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 8014570:	e9c4 2301 	strd	r2, r3, [r4, #4]
 8014574:	e9c4 0108 	strd	r0, r1, [r4, #32]
 8014578:	68e9      	ldr	r1, [r5, #12]
 801457a:	692a      	ldr	r2, [r5, #16]
 801457c:	696b      	ldr	r3, [r5, #20]
 801457e:	69a8      	ldr	r0, [r5, #24]
 8014580:	61a0      	str	r0, [r4, #24]
 8014582:	60e1      	str	r1, [r4, #12]
 8014584:	6122      	str	r2, [r4, #16]
 8014586:	6163      	str	r3, [r4, #20]
 8014588:	b14f      	cbz	r7, 801459e <rosidl_typesupport_c__create_service_event_message__nereo_interfaces__srv__SetNavigationMode+0x5e>
 801458a:	2101      	movs	r1, #1
 801458c:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8014590:	f7ff ff0e 	bl	80143b0 <nereo_interfaces__srv__SetNavigationMode_Request__Sequence__init>
 8014594:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8014596:	4638      	mov	r0, r7
 8014598:	f7ff ff02 	bl	80143a0 <nereo_interfaces__srv__SetNavigationMode_Request__copy>
 801459c:	b178      	cbz	r0, 80145be <rosidl_typesupport_c__create_service_event_message__nereo_interfaces__srv__SetNavigationMode+0x7e>
 801459e:	f1b8 0f00 	cmp.w	r8, #0
 80145a2:	d009      	beq.n	80145b8 <rosidl_typesupport_c__create_service_event_message__nereo_interfaces__srv__SetNavigationMode+0x78>
 80145a4:	2101      	movs	r1, #1
 80145a6:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 80145aa:	f7ff ff41 	bl	8014430 <nereo_interfaces__srv__SetNavigationMode_Response__Sequence__init>
 80145ae:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80145b0:	4640      	mov	r0, r8
 80145b2:	f7ff ff33 	bl	801441c <nereo_interfaces__srv__SetNavigationMode_Response__copy>
 80145b6:	b110      	cbz	r0, 80145be <rosidl_typesupport_c__create_service_event_message__nereo_interfaces__srv__SetNavigationMode+0x7e>
 80145b8:	4620      	mov	r0, r4
 80145ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80145be:	6873      	ldr	r3, [r6, #4]
 80145c0:	6931      	ldr	r1, [r6, #16]
 80145c2:	4620      	mov	r0, r4
 80145c4:	4798      	blx	r3
 80145c6:	2400      	movs	r4, #0
 80145c8:	4620      	mov	r0, r4
 80145ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80145ce:	bf00      	nop

080145d0 <rosidl_typesupport_c__destroy_service_event_message__nereo_interfaces__srv__SetNavigationMode>:
 80145d0:	b538      	push	{r3, r4, r5, lr}
 80145d2:	460d      	mov	r5, r1
 80145d4:	b199      	cbz	r1, 80145fe <rosidl_typesupport_c__destroy_service_event_message__nereo_interfaces__srv__SetNavigationMode+0x2e>
 80145d6:	4604      	mov	r4, r0
 80145d8:	b180      	cbz	r0, 80145fc <rosidl_typesupport_c__destroy_service_event_message__nereo_interfaces__srv__SetNavigationMode+0x2c>
 80145da:	f7ff ff8f 	bl	80144fc <nereo_interfaces__srv__SetNavigationMode_Event__fini>
 80145de:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80145e0:	b110      	cbz	r0, 80145e8 <rosidl_typesupport_c__destroy_service_event_message__nereo_interfaces__srv__SetNavigationMode+0x18>
 80145e2:	686b      	ldr	r3, [r5, #4]
 80145e4:	6929      	ldr	r1, [r5, #16]
 80145e6:	4798      	blx	r3
 80145e8:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 80145ea:	b110      	cbz	r0, 80145f2 <rosidl_typesupport_c__destroy_service_event_message__nereo_interfaces__srv__SetNavigationMode+0x22>
 80145ec:	686b      	ldr	r3, [r5, #4]
 80145ee:	6929      	ldr	r1, [r5, #16]
 80145f0:	4798      	blx	r3
 80145f2:	4620      	mov	r0, r4
 80145f4:	686b      	ldr	r3, [r5, #4]
 80145f6:	6929      	ldr	r1, [r5, #16]
 80145f8:	4798      	blx	r3
 80145fa:	2001      	movs	r0, #1
 80145fc:	bd38      	pop	{r3, r4, r5, pc}
 80145fe:	4608      	mov	r0, r1
 8014600:	bd38      	pop	{r3, r4, r5, pc}
 8014602:	bf00      	nop

08014604 <nereo_interfaces__msg__ThrusterStatuses__get_type_hash>:
 8014604:	4800      	ldr	r0, [pc, #0]	@ (8014608 <nereo_interfaces__msg__ThrusterStatuses__get_type_hash+0x4>)
 8014606:	4770      	bx	lr
 8014608:	200016a4 	.word	0x200016a4

0801460c <nereo_interfaces__msg__ThrusterStatuses__get_type_description>:
 801460c:	4b03      	ldr	r3, [pc, #12]	@ (801461c <nereo_interfaces__msg__ThrusterStatuses__get_type_description+0x10>)
 801460e:	781a      	ldrb	r2, [r3, #0]
 8014610:	b90a      	cbnz	r2, 8014616 <nereo_interfaces__msg__ThrusterStatuses__get_type_description+0xa>
 8014612:	2201      	movs	r2, #1
 8014614:	701a      	strb	r2, [r3, #0]
 8014616:	4802      	ldr	r0, [pc, #8]	@ (8014620 <nereo_interfaces__msg__ThrusterStatuses__get_type_description+0x14>)
 8014618:	4770      	bx	lr
 801461a:	bf00      	nop
 801461c:	2001953d 	.word	0x2001953d
 8014620:	080200d8 	.word	0x080200d8

08014624 <nereo_interfaces__msg__ThrusterStatuses__get_type_description_sources>:
 8014624:	4b09      	ldr	r3, [pc, #36]	@ (801464c <nereo_interfaces__msg__ThrusterStatuses__get_type_description_sources+0x28>)
 8014626:	781a      	ldrb	r2, [r3, #0]
 8014628:	b96a      	cbnz	r2, 8014646 <nereo_interfaces__msg__ThrusterStatuses__get_type_description_sources+0x22>
 801462a:	b430      	push	{r4, r5}
 801462c:	4d08      	ldr	r5, [pc, #32]	@ (8014650 <nereo_interfaces__msg__ThrusterStatuses__get_type_description_sources+0x2c>)
 801462e:	4c09      	ldr	r4, [pc, #36]	@ (8014654 <nereo_interfaces__msg__ThrusterStatuses__get_type_description_sources+0x30>)
 8014630:	2201      	movs	r2, #1
 8014632:	701a      	strb	r2, [r3, #0]
 8014634:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014636:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014638:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801463a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801463c:	682b      	ldr	r3, [r5, #0]
 801463e:	4806      	ldr	r0, [pc, #24]	@ (8014658 <nereo_interfaces__msg__ThrusterStatuses__get_type_description_sources+0x34>)
 8014640:	6023      	str	r3, [r4, #0]
 8014642:	bc30      	pop	{r4, r5}
 8014644:	4770      	bx	lr
 8014646:	4804      	ldr	r0, [pc, #16]	@ (8014658 <nereo_interfaces__msg__ThrusterStatuses__get_type_description_sources+0x34>)
 8014648:	4770      	bx	lr
 801464a:	bf00      	nop
 801464c:	2001953c 	.word	0x2001953c
 8014650:	080200b4 	.word	0x080200b4
 8014654:	20019518 	.word	0x20019518
 8014658:	080200a8 	.word	0x080200a8

0801465c <nereo_interfaces__msg__ThrusterStatuses__init>:
 801465c:	3800      	subs	r0, #0
 801465e:	bf18      	it	ne
 8014660:	2001      	movne	r0, #1
 8014662:	4770      	bx	lr

08014664 <nereo_interfaces__msg__ThrusterStatuses__fini>:
 8014664:	4770      	bx	lr
 8014666:	bf00      	nop

08014668 <rcl_client_get_rmw_handle>:
 8014668:	b118      	cbz	r0, 8014672 <rcl_client_get_rmw_handle+0xa>
 801466a:	6800      	ldr	r0, [r0, #0]
 801466c:	b108      	cbz	r0, 8014672 <rcl_client_get_rmw_handle+0xa>
 801466e:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8014672:	4770      	bx	lr

08014674 <rcl_send_request>:
 8014674:	2800      	cmp	r0, #0
 8014676:	d048      	beq.n	801470a <rcl_send_request+0x96>
 8014678:	b570      	push	{r4, r5, r6, lr}
 801467a:	4604      	mov	r4, r0
 801467c:	6800      	ldr	r0, [r0, #0]
 801467e:	b08a      	sub	sp, #40	@ 0x28
 8014680:	b1c0      	cbz	r0, 80146b4 <rcl_send_request+0x40>
 8014682:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 8014686:	b1ab      	cbz	r3, 80146b4 <rcl_send_request+0x40>
 8014688:	460e      	mov	r6, r1
 801468a:	b1b9      	cbz	r1, 80146bc <rcl_send_request+0x48>
 801468c:	4615      	mov	r5, r2
 801468e:	b1aa      	cbz	r2, 80146bc <rcl_send_request+0x48>
 8014690:	2105      	movs	r1, #5
 8014692:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8014696:	f002 fe83 	bl	80173a0 <__atomic_load_8>
 801469a:	6823      	ldr	r3, [r4, #0]
 801469c:	e9c5 0100 	strd	r0, r1, [r5]
 80146a0:	462a      	mov	r2, r5
 80146a2:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 80146a6:	4631      	mov	r1, r6
 80146a8:	f004 f86a 	bl	8018780 <rmw_send_request>
 80146ac:	b148      	cbz	r0, 80146c2 <rcl_send_request+0x4e>
 80146ae:	2001      	movs	r0, #1
 80146b0:	b00a      	add	sp, #40	@ 0x28
 80146b2:	bd70      	pop	{r4, r5, r6, pc}
 80146b4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80146b8:	b00a      	add	sp, #40	@ 0x28
 80146ba:	bd70      	pop	{r4, r5, r6, pc}
 80146bc:	200b      	movs	r0, #11
 80146be:	b00a      	add	sp, #40	@ 0x28
 80146c0:	bd70      	pop	{r4, r5, r6, pc}
 80146c2:	6820      	ldr	r0, [r4, #0]
 80146c4:	2305      	movs	r3, #5
 80146c6:	9300      	str	r3, [sp, #0]
 80146c8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80146cc:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 80146d0:	f002 fed2 	bl	8017478 <__atomic_exchange_8>
 80146d4:	6823      	ldr	r3, [r4, #0]
 80146d6:	f8d3 2118 	ldr.w	r2, [r3, #280]	@ 0x118
 80146da:	b1a2      	cbz	r2, 8014706 <rcl_send_request+0x92>
 80146dc:	a905      	add	r1, sp, #20
 80146de:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 80146e2:	f003 fc3d 	bl	8017f60 <rmw_get_gid_for_client>
 80146e6:	4601      	mov	r1, r0
 80146e8:	b990      	cbnz	r0, 8014710 <rcl_send_request+0x9c>
 80146ea:	6822      	ldr	r2, [r4, #0]
 80146ec:	ab06      	add	r3, sp, #24
 80146ee:	f8d2 0118 	ldr.w	r0, [r2, #280]	@ 0x118
 80146f2:	9302      	str	r3, [sp, #8]
 80146f4:	e9d5 4500 	ldrd	r4, r5, [r5]
 80146f8:	4632      	mov	r2, r6
 80146fa:	e9cd 4500 	strd	r4, r5, [sp]
 80146fe:	f000 ff1f 	bl	8015540 <rcl_send_service_event_message>
 8014702:	2800      	cmp	r0, #0
 8014704:	d1d4      	bne.n	80146b0 <rcl_send_request+0x3c>
 8014706:	2000      	movs	r0, #0
 8014708:	e7d2      	b.n	80146b0 <rcl_send_request+0x3c>
 801470a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 801470e:	4770      	bx	lr
 8014710:	f000 f878 	bl	8014804 <rcl_convert_rmw_ret_to_rcl_ret>
 8014714:	e7cc      	b.n	80146b0 <rcl_send_request+0x3c>
 8014716:	bf00      	nop

08014718 <rcl_take_response>:
 8014718:	b5f0      	push	{r4, r5, r6, r7, lr}
 801471a:	468e      	mov	lr, r1
 801471c:	460c      	mov	r4, r1
 801471e:	4617      	mov	r7, r2
 8014720:	4605      	mov	r5, r0
 8014722:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014726:	b095      	sub	sp, #84	@ 0x54
 8014728:	f10d 0c38 	add.w	ip, sp, #56	@ 0x38
 801472c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014730:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8014734:	e88c 0003 	stmia.w	ip, {r0, r1}
 8014738:	2d00      	cmp	r5, #0
 801473a:	d044      	beq.n	80147c6 <rcl_take_response+0xae>
 801473c:	682b      	ldr	r3, [r5, #0]
 801473e:	2b00      	cmp	r3, #0
 8014740:	d041      	beq.n	80147c6 <rcl_take_response+0xae>
 8014742:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8014746:	2800      	cmp	r0, #0
 8014748:	d03d      	beq.n	80147c6 <rcl_take_response+0xae>
 801474a:	2f00      	cmp	r7, #0
 801474c:	d03e      	beq.n	80147cc <rcl_take_response+0xb4>
 801474e:	ed9f 7b26 	vldr	d7, [pc, #152]	@ 80147e8 <rcl_take_response+0xd0>
 8014752:	2300      	movs	r3, #0
 8014754:	f88d 3013 	strb.w	r3, [sp, #19]
 8014758:	463a      	mov	r2, r7
 801475a:	f10d 0313 	add.w	r3, sp, #19
 801475e:	a90a      	add	r1, sp, #40	@ 0x28
 8014760:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8014764:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8014768:	f004 f90a 	bl	8018980 <rmw_take_response>
 801476c:	4606      	mov	r6, r0
 801476e:	bb78      	cbnz	r0, 80147d0 <rcl_take_response+0xb8>
 8014770:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8014774:	b373      	cbz	r3, 80147d4 <rcl_take_response+0xbc>
 8014776:	682b      	ldr	r3, [r5, #0]
 8014778:	f8d3 2118 	ldr.w	r2, [r3, #280]	@ 0x118
 801477c:	b1aa      	cbz	r2, 80147aa <rcl_take_response+0x92>
 801477e:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8014782:	a905      	add	r1, sp, #20
 8014784:	f003 fbec 	bl	8017f60 <rmw_get_gid_for_client>
 8014788:	bb38      	cbnz	r0, 80147da <rcl_take_response+0xc2>
 801478a:	682b      	ldr	r3, [r5, #0]
 801478c:	ed9d 7b12 	vldr	d7, [sp, #72]	@ 0x48
 8014790:	f8d3 0118 	ldr.w	r0, [r3, #280]	@ 0x118
 8014794:	ab06      	add	r3, sp, #24
 8014796:	ed8d 7b00 	vstr	d7, [sp]
 801479a:	463a      	mov	r2, r7
 801479c:	9302      	str	r3, [sp, #8]
 801479e:	2103      	movs	r1, #3
 80147a0:	f000 fece 	bl	8015540 <rcl_send_service_event_message>
 80147a4:	2800      	cmp	r0, #0
 80147a6:	bf18      	it	ne
 80147a8:	4606      	movne	r6, r0
 80147aa:	f10d 0e38 	add.w	lr, sp, #56	@ 0x38
 80147ae:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80147b2:	46a4      	mov	ip, r4
 80147b4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80147b8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80147bc:	e88c 0003 	stmia.w	ip, {r0, r1}
 80147c0:	4630      	mov	r0, r6
 80147c2:	b015      	add	sp, #84	@ 0x54
 80147c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80147c6:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 80147ca:	e7ee      	b.n	80147aa <rcl_take_response+0x92>
 80147cc:	260b      	movs	r6, #11
 80147ce:	e7ec      	b.n	80147aa <rcl_take_response+0x92>
 80147d0:	2601      	movs	r6, #1
 80147d2:	e7ea      	b.n	80147aa <rcl_take_response+0x92>
 80147d4:	f240 16f5 	movw	r6, #501	@ 0x1f5
 80147d8:	e7e7      	b.n	80147aa <rcl_take_response+0x92>
 80147da:	f000 f813 	bl	8014804 <rcl_convert_rmw_ret_to_rcl_ret>
 80147de:	4606      	mov	r6, r0
 80147e0:	e7e3      	b.n	80147aa <rcl_take_response+0x92>
 80147e2:	bf00      	nop
 80147e4:	f3af 8000 	nop.w
	...

080147f0 <rcl_client_is_valid>:
 80147f0:	b130      	cbz	r0, 8014800 <rcl_client_is_valid+0x10>
 80147f2:	6800      	ldr	r0, [r0, #0]
 80147f4:	b120      	cbz	r0, 8014800 <rcl_client_is_valid+0x10>
 80147f6:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80147fa:	3800      	subs	r0, #0
 80147fc:	bf18      	it	ne
 80147fe:	2001      	movne	r0, #1
 8014800:	4770      	bx	lr
 8014802:	bf00      	nop

08014804 <rcl_convert_rmw_ret_to_rcl_ret>:
 8014804:	280b      	cmp	r0, #11
 8014806:	dc0d      	bgt.n	8014824 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 8014808:	2800      	cmp	r0, #0
 801480a:	db09      	blt.n	8014820 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 801480c:	280b      	cmp	r0, #11
 801480e:	d807      	bhi.n	8014820 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8014810:	e8df f000 	tbb	[pc, r0]
 8014814:	07060607 	.word	0x07060607
 8014818:	06060606 	.word	0x06060606
 801481c:	07070606 	.word	0x07070606
 8014820:	2001      	movs	r0, #1
 8014822:	4770      	bx	lr
 8014824:	28cb      	cmp	r0, #203	@ 0xcb
 8014826:	bf14      	ite	ne
 8014828:	2001      	movne	r0, #1
 801482a:	20cb      	moveq	r0, #203	@ 0xcb
 801482c:	4770      	bx	lr
 801482e:	bf00      	nop

08014830 <rcl_get_zero_initialized_context>:
 8014830:	4a03      	ldr	r2, [pc, #12]	@ (8014840 <rcl_get_zero_initialized_context+0x10>)
 8014832:	4603      	mov	r3, r0
 8014834:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014838:	e883 0003 	stmia.w	r3, {r0, r1}
 801483c:	4618      	mov	r0, r3
 801483e:	4770      	bx	lr
 8014840:	080200fc 	.word	0x080200fc

08014844 <rcl_context_is_valid>:
 8014844:	b118      	cbz	r0, 801484e <rcl_context_is_valid+0xa>
 8014846:	6840      	ldr	r0, [r0, #4]
 8014848:	3800      	subs	r0, #0
 801484a:	bf18      	it	ne
 801484c:	2001      	movne	r0, #1
 801484e:	4770      	bx	lr

08014850 <__cleanup_context>:
 8014850:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014854:	4606      	mov	r6, r0
 8014856:	6800      	ldr	r0, [r0, #0]
 8014858:	2300      	movs	r3, #0
 801485a:	6073      	str	r3, [r6, #4]
 801485c:	2800      	cmp	r0, #0
 801485e:	d042      	beq.n	80148e6 <__cleanup_context+0x96>
 8014860:	6943      	ldr	r3, [r0, #20]
 8014862:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8014866:	6907      	ldr	r7, [r0, #16]
 8014868:	b39b      	cbz	r3, 80148d2 <__cleanup_context+0x82>
 801486a:	3014      	adds	r0, #20
 801486c:	f000 f9ca 	bl	8014c04 <rcl_init_options_fini>
 8014870:	4680      	mov	r8, r0
 8014872:	2800      	cmp	r0, #0
 8014874:	d144      	bne.n	8014900 <__cleanup_context+0xb0>
 8014876:	6830      	ldr	r0, [r6, #0]
 8014878:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801487a:	b123      	cbz	r3, 8014886 <__cleanup_context+0x36>
 801487c:	3028      	adds	r0, #40	@ 0x28
 801487e:	f003 fdc3 	bl	8018408 <rmw_context_fini>
 8014882:	bbb8      	cbnz	r0, 80148f4 <__cleanup_context+0xa4>
 8014884:	6830      	ldr	r0, [r6, #0]
 8014886:	6a03      	ldr	r3, [r0, #32]
 8014888:	b1db      	cbz	r3, 80148c2 <__cleanup_context+0x72>
 801488a:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 801488e:	2a01      	cmp	r2, #1
 8014890:	f17c 0100 	sbcs.w	r1, ip, #0
 8014894:	db11      	blt.n	80148ba <__cleanup_context+0x6a>
 8014896:	2400      	movs	r4, #0
 8014898:	4625      	mov	r5, r4
 801489a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801489e:	4639      	mov	r1, r7
 80148a0:	b1c8      	cbz	r0, 80148d6 <__cleanup_context+0x86>
 80148a2:	47c8      	blx	r9
 80148a4:	6833      	ldr	r3, [r6, #0]
 80148a6:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 80148aa:	3401      	adds	r4, #1
 80148ac:	f145 0500 	adc.w	r5, r5, #0
 80148b0:	4294      	cmp	r4, r2
 80148b2:	eb75 010c 	sbcs.w	r1, r5, ip
 80148b6:	6a1b      	ldr	r3, [r3, #32]
 80148b8:	dbef      	blt.n	801489a <__cleanup_context+0x4a>
 80148ba:	4618      	mov	r0, r3
 80148bc:	4639      	mov	r1, r7
 80148be:	47c8      	blx	r9
 80148c0:	6830      	ldr	r0, [r6, #0]
 80148c2:	4639      	mov	r1, r7
 80148c4:	47c8      	blx	r9
 80148c6:	2300      	movs	r3, #0
 80148c8:	e9c6 3300 	strd	r3, r3, [r6]
 80148cc:	4640      	mov	r0, r8
 80148ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80148d2:	4698      	mov	r8, r3
 80148d4:	e7d0      	b.n	8014878 <__cleanup_context+0x28>
 80148d6:	3401      	adds	r4, #1
 80148d8:	f145 0500 	adc.w	r5, r5, #0
 80148dc:	4294      	cmp	r4, r2
 80148de:	eb75 010c 	sbcs.w	r1, r5, ip
 80148e2:	dbda      	blt.n	801489a <__cleanup_context+0x4a>
 80148e4:	e7e9      	b.n	80148ba <__cleanup_context+0x6a>
 80148e6:	4680      	mov	r8, r0
 80148e8:	2300      	movs	r3, #0
 80148ea:	e9c6 3300 	strd	r3, r3, [r6]
 80148ee:	4640      	mov	r0, r8
 80148f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80148f4:	f1b8 0f00 	cmp.w	r8, #0
 80148f8:	d005      	beq.n	8014906 <__cleanup_context+0xb6>
 80148fa:	f7f8 fca5 	bl	800d248 <rcutils_reset_error>
 80148fe:	e7c1      	b.n	8014884 <__cleanup_context+0x34>
 8014900:	f7f8 fca2 	bl	800d248 <rcutils_reset_error>
 8014904:	e7b7      	b.n	8014876 <__cleanup_context+0x26>
 8014906:	f7ff ff7d 	bl	8014804 <rcl_convert_rmw_ret_to_rcl_ret>
 801490a:	4680      	mov	r8, r0
 801490c:	e7f5      	b.n	80148fa <__cleanup_context+0xaa>
 801490e:	bf00      	nop

08014910 <rcl_init>:
 8014910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014914:	1e04      	subs	r4, r0, #0
 8014916:	b0a5      	sub	sp, #148	@ 0x94
 8014918:	460d      	mov	r5, r1
 801491a:	4617      	mov	r7, r2
 801491c:	461e      	mov	r6, r3
 801491e:	dd13      	ble.n	8014948 <rcl_init+0x38>
 8014920:	b161      	cbz	r1, 801493c <rcl_init+0x2c>
 8014922:	f1a1 0e04 	sub.w	lr, r1, #4
 8014926:	f04f 0c00 	mov.w	ip, #0
 801492a:	e001      	b.n	8014930 <rcl_init+0x20>
 801492c:	4564      	cmp	r4, ip
 801492e:	d00d      	beq.n	801494c <rcl_init+0x3c>
 8014930:	f85e 0f04 	ldr.w	r0, [lr, #4]!
 8014934:	f10c 0c01 	add.w	ip, ip, #1
 8014938:	2800      	cmp	r0, #0
 801493a:	d1f7      	bne.n	801492c <rcl_init+0x1c>
 801493c:	f04f 080b 	mov.w	r8, #11
 8014940:	4640      	mov	r0, r8
 8014942:	b025      	add	sp, #148	@ 0x94
 8014944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014948:	2900      	cmp	r1, #0
 801494a:	d1f7      	bne.n	801493c <rcl_init+0x2c>
 801494c:	2f00      	cmp	r7, #0
 801494e:	d0f5      	beq.n	801493c <rcl_init+0x2c>
 8014950:	683b      	ldr	r3, [r7, #0]
 8014952:	2b00      	cmp	r3, #0
 8014954:	d0f2      	beq.n	801493c <rcl_init+0x2c>
 8014956:	469c      	mov	ip, r3
 8014958:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801495c:	f10d 0e7c 	add.w	lr, sp, #124	@ 0x7c
 8014960:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014964:	f8dc 3000 	ldr.w	r3, [ip]
 8014968:	f8ce 3000 	str.w	r3, [lr]
 801496c:	a81f      	add	r0, sp, #124	@ 0x7c
 801496e:	f7f8 fc45 	bl	800d1fc <rcutils_allocator_is_valid>
 8014972:	2800      	cmp	r0, #0
 8014974:	d0e2      	beq.n	801493c <rcl_init+0x2c>
 8014976:	2e00      	cmp	r6, #0
 8014978:	d0e0      	beq.n	801493c <rcl_init+0x2c>
 801497a:	6833      	ldr	r3, [r6, #0]
 801497c:	2b00      	cmp	r3, #0
 801497e:	d173      	bne.n	8014a68 <rcl_init+0x158>
 8014980:	e9dd 3222 	ldrd	r3, r2, [sp, #136]	@ 0x88
 8014984:	2198      	movs	r1, #152	@ 0x98
 8014986:	2001      	movs	r0, #1
 8014988:	4798      	blx	r3
 801498a:	4680      	mov	r8, r0
 801498c:	6030      	str	r0, [r6, #0]
 801498e:	2800      	cmp	r0, #0
 8014990:	f000 80b2 	beq.w	8014af8 <rcl_init+0x1e8>
 8014994:	a802      	add	r0, sp, #8
 8014996:	f003 f85b 	bl	8017a50 <rmw_get_zero_initialized_context>
 801499a:	a902      	add	r1, sp, #8
 801499c:	f108 0028 	add.w	r0, r8, #40	@ 0x28
 80149a0:	2270      	movs	r2, #112	@ 0x70
 80149a2:	f008 fdda 	bl	801d55a <memcpy>
 80149a6:	f10d 0e7c 	add.w	lr, sp, #124	@ 0x7c
 80149aa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80149ae:	f8d6 8000 	ldr.w	r8, [r6]
 80149b2:	46c4      	mov	ip, r8
 80149b4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80149b8:	f8de 3000 	ldr.w	r3, [lr]
 80149bc:	f8cc 3000 	str.w	r3, [ip]
 80149c0:	f108 0114 	add.w	r1, r8, #20
 80149c4:	4638      	mov	r0, r7
 80149c6:	f000 f947 	bl	8014c58 <rcl_init_options_copy>
 80149ca:	4680      	mov	r8, r0
 80149cc:	2800      	cmp	r0, #0
 80149ce:	d147      	bne.n	8014a60 <rcl_init+0x150>
 80149d0:	f8d6 9000 	ldr.w	r9, [r6]
 80149d4:	ea4f 7ae4 	mov.w	sl, r4, asr #31
 80149d8:	f8c9 0020 	str.w	r0, [r9, #32]
 80149dc:	f8c9 4018 	str.w	r4, [r9, #24]
 80149e0:	f8c9 a01c 	str.w	sl, [r9, #28]
 80149e4:	2c00      	cmp	r4, #0
 80149e6:	d047      	beq.n	8014a78 <rcl_init+0x168>
 80149e8:	2d00      	cmp	r5, #0
 80149ea:	d045      	beq.n	8014a78 <rcl_init+0x168>
 80149ec:	e9dd 3222 	ldrd	r3, r2, [sp, #136]	@ 0x88
 80149f0:	2104      	movs	r1, #4
 80149f2:	4620      	mov	r0, r4
 80149f4:	4798      	blx	r3
 80149f6:	f8c9 0020 	str.w	r0, [r9, #32]
 80149fa:	f8d6 9000 	ldr.w	r9, [r6]
 80149fe:	f8d9 b020 	ldr.w	fp, [r9, #32]
 8014a02:	f1bb 0f00 	cmp.w	fp, #0
 8014a06:	d029      	beq.n	8014a5c <rcl_init+0x14c>
 8014a08:	2c01      	cmp	r4, #1
 8014a0a:	f17a 0300 	sbcs.w	r3, sl, #0
 8014a0e:	db33      	blt.n	8014a78 <rcl_init+0x168>
 8014a10:	f04f 0800 	mov.w	r8, #0
 8014a14:	3d04      	subs	r5, #4
 8014a16:	46c1      	mov	r9, r8
 8014a18:	e00d      	b.n	8014a36 <rcl_init+0x126>
 8014a1a:	6829      	ldr	r1, [r5, #0]
 8014a1c:	f008 fd9d 	bl	801d55a <memcpy>
 8014a20:	f118 0801 	adds.w	r8, r8, #1
 8014a24:	f149 0900 	adc.w	r9, r9, #0
 8014a28:	45ca      	cmp	sl, r9
 8014a2a:	bf08      	it	eq
 8014a2c:	4544      	cmpeq	r4, r8
 8014a2e:	d021      	beq.n	8014a74 <rcl_init+0x164>
 8014a30:	6833      	ldr	r3, [r6, #0]
 8014a32:	f8d3 b020 	ldr.w	fp, [r3, #32]
 8014a36:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8014a3a:	f7eb fc41 	bl	80002c0 <strlen>
 8014a3e:	1c42      	adds	r2, r0, #1
 8014a40:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8014a42:	9923      	ldr	r1, [sp, #140]	@ 0x8c
 8014a44:	9201      	str	r2, [sp, #4]
 8014a46:	4610      	mov	r0, r2
 8014a48:	4798      	blx	r3
 8014a4a:	6833      	ldr	r3, [r6, #0]
 8014a4c:	f84b 0028 	str.w	r0, [fp, r8, lsl #2]
 8014a50:	6a1b      	ldr	r3, [r3, #32]
 8014a52:	9a01      	ldr	r2, [sp, #4]
 8014a54:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8014a58:	2800      	cmp	r0, #0
 8014a5a:	d1de      	bne.n	8014a1a <rcl_init+0x10a>
 8014a5c:	f04f 080a 	mov.w	r8, #10
 8014a60:	4630      	mov	r0, r6
 8014a62:	f7ff fef5 	bl	8014850 <__cleanup_context>
 8014a66:	e76b      	b.n	8014940 <rcl_init+0x30>
 8014a68:	f04f 0864 	mov.w	r8, #100	@ 0x64
 8014a6c:	4640      	mov	r0, r8
 8014a6e:	b025      	add	sp, #148	@ 0x94
 8014a70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a74:	f8d6 9000 	ldr.w	r9, [r6]
 8014a78:	4a32      	ldr	r2, [pc, #200]	@ (8014b44 <rcl_init+0x234>)
 8014a7a:	6813      	ldr	r3, [r2, #0]
 8014a7c:	3301      	adds	r3, #1
 8014a7e:	d036      	beq.n	8014aee <rcl_init+0x1de>
 8014a80:	461d      	mov	r5, r3
 8014a82:	2000      	movs	r0, #0
 8014a84:	4619      	mov	r1, r3
 8014a86:	f8d9 4014 	ldr.w	r4, [r9, #20]
 8014a8a:	6073      	str	r3, [r6, #4]
 8014a8c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8014a8e:	6011      	str	r1, [r2, #0]
 8014a90:	3301      	adds	r3, #1
 8014a92:	e9c4 5006 	strd	r5, r0, [r4, #24]
 8014a96:	d044      	beq.n	8014b22 <rcl_init+0x212>
 8014a98:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 8014a9c:	b37b      	cbz	r3, 8014afe <rcl_init+0x1ee>
 8014a9e:	683a      	ldr	r2, [r7, #0]
 8014aa0:	2b01      	cmp	r3, #1
 8014aa2:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8014aa6:	d036      	beq.n	8014b16 <rcl_init+0x206>
 8014aa8:	f104 0534 	add.w	r5, r4, #52	@ 0x34
 8014aac:	2a00      	cmp	r2, #0
 8014aae:	d042      	beq.n	8014b36 <rcl_init+0x226>
 8014ab0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8014ab2:	f894 0034 	ldrb.w	r0, [r4, #52]	@ 0x34
 8014ab6:	b953      	cbnz	r3, 8014ace <rcl_init+0x1be>
 8014ab8:	2801      	cmp	r0, #1
 8014aba:	d008      	beq.n	8014ace <rcl_init+0x1be>
 8014abc:	a91f      	add	r1, sp, #124	@ 0x7c
 8014abe:	4628      	mov	r0, r5
 8014ac0:	f006 fe2e 	bl	801b720 <rcl_get_discovery_static_peers>
 8014ac4:	4680      	mov	r8, r0
 8014ac6:	2800      	cmp	r0, #0
 8014ac8:	d1ca      	bne.n	8014a60 <rcl_init+0x150>
 8014aca:	f894 0034 	ldrb.w	r0, [r4, #52]	@ 0x34
 8014ace:	f006 fe1d 	bl	801b70c <rcl_automatic_discovery_range_to_string>
 8014ad2:	6831      	ldr	r1, [r6, #0]
 8014ad4:	6948      	ldr	r0, [r1, #20]
 8014ad6:	3128      	adds	r1, #40	@ 0x28
 8014ad8:	3018      	adds	r0, #24
 8014ada:	f003 fb61 	bl	80181a0 <rmw_init>
 8014ade:	4680      	mov	r8, r0
 8014ae0:	2800      	cmp	r0, #0
 8014ae2:	f43f af2d 	beq.w	8014940 <rcl_init+0x30>
 8014ae6:	f7ff fe8d 	bl	8014804 <rcl_convert_rmw_ret_to_rcl_ret>
 8014aea:	4680      	mov	r8, r0
 8014aec:	e7b8      	b.n	8014a60 <rcl_init+0x150>
 8014aee:	2101      	movs	r1, #1
 8014af0:	4618      	mov	r0, r3
 8014af2:	460d      	mov	r5, r1
 8014af4:	460b      	mov	r3, r1
 8014af6:	e7c6      	b.n	8014a86 <rcl_init+0x176>
 8014af8:	f04f 080a 	mov.w	r8, #10
 8014afc:	e720      	b.n	8014940 <rcl_init+0x30>
 8014afe:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8014b02:	f000 f905 	bl	8014d10 <rcl_get_localhost_only>
 8014b06:	4680      	mov	r8, r0
 8014b08:	2800      	cmp	r0, #0
 8014b0a:	d1a9      	bne.n	8014a60 <rcl_init+0x150>
 8014b0c:	6832      	ldr	r2, [r6, #0]
 8014b0e:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 8014b12:	6954      	ldr	r4, [r2, #20]
 8014b14:	e7c3      	b.n	8014a9e <rcl_init+0x18e>
 8014b16:	2002      	movs	r0, #2
 8014b18:	2300      	movs	r3, #0
 8014b1a:	f884 0034 	strb.w	r0, [r4, #52]	@ 0x34
 8014b1e:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8014b20:	e7d5      	b.n	8014ace <rcl_init+0x1be>
 8014b22:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8014b26:	f006 fe65 	bl	801b7f4 <rcl_get_default_domain_id>
 8014b2a:	4680      	mov	r8, r0
 8014b2c:	2800      	cmp	r0, #0
 8014b2e:	d197      	bne.n	8014a60 <rcl_init+0x150>
 8014b30:	6833      	ldr	r3, [r6, #0]
 8014b32:	695c      	ldr	r4, [r3, #20]
 8014b34:	e7b0      	b.n	8014a98 <rcl_init+0x188>
 8014b36:	4628      	mov	r0, r5
 8014b38:	f006 fda6 	bl	801b688 <rcl_get_automatic_discovery_range>
 8014b3c:	4680      	mov	r8, r0
 8014b3e:	2800      	cmp	r0, #0
 8014b40:	d0b6      	beq.n	8014ab0 <rcl_init+0x1a0>
 8014b42:	e78d      	b.n	8014a60 <rcl_init+0x150>
 8014b44:	20019540 	.word	0x20019540

08014b48 <rcl_get_zero_initialized_init_options>:
 8014b48:	2000      	movs	r0, #0
 8014b4a:	4770      	bx	lr

08014b4c <rcl_init_options_init>:
 8014b4c:	b084      	sub	sp, #16
 8014b4e:	b570      	push	{r4, r5, r6, lr}
 8014b50:	b09e      	sub	sp, #120	@ 0x78
 8014b52:	ad23      	add	r5, sp, #140	@ 0x8c
 8014b54:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 8014b58:	2800      	cmp	r0, #0
 8014b5a:	d046      	beq.n	8014bea <rcl_init_options_init+0x9e>
 8014b5c:	6803      	ldr	r3, [r0, #0]
 8014b5e:	4604      	mov	r4, r0
 8014b60:	b133      	cbz	r3, 8014b70 <rcl_init_options_init+0x24>
 8014b62:	2564      	movs	r5, #100	@ 0x64
 8014b64:	4628      	mov	r0, r5
 8014b66:	b01e      	add	sp, #120	@ 0x78
 8014b68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014b6c:	b004      	add	sp, #16
 8014b6e:	4770      	bx	lr
 8014b70:	4628      	mov	r0, r5
 8014b72:	f7f8 fb43 	bl	800d1fc <rcutils_allocator_is_valid>
 8014b76:	2800      	cmp	r0, #0
 8014b78:	d037      	beq.n	8014bea <rcl_init_options_init+0x9e>
 8014b7a:	46ae      	mov	lr, r5
 8014b7c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014b80:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 8014b84:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014b88:	f8de 3000 	ldr.w	r3, [lr]
 8014b8c:	f8cc 3000 	str.w	r3, [ip]
 8014b90:	9927      	ldr	r1, [sp, #156]	@ 0x9c
 8014b92:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8014b94:	2070      	movs	r0, #112	@ 0x70
 8014b96:	4798      	blx	r3
 8014b98:	4606      	mov	r6, r0
 8014b9a:	6020      	str	r0, [r4, #0]
 8014b9c:	b338      	cbz	r0, 8014bee <rcl_init_options_init+0xa2>
 8014b9e:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 8014ba2:	4686      	mov	lr, r0
 8014ba4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014ba8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014bac:	f8dc 3000 	ldr.w	r3, [ip]
 8014bb0:	f8ce 3000 	str.w	r3, [lr]
 8014bb4:	a802      	add	r0, sp, #8
 8014bb6:	f002 ff63 	bl	8017a80 <rmw_get_zero_initialized_init_options>
 8014bba:	2258      	movs	r2, #88	@ 0x58
 8014bbc:	a902      	add	r1, sp, #8
 8014bbe:	f106 0018 	add.w	r0, r6, #24
 8014bc2:	f008 fcca 	bl	801d55a <memcpy>
 8014bc6:	ab26      	add	r3, sp, #152	@ 0x98
 8014bc8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8014bcc:	6826      	ldr	r6, [r4, #0]
 8014bce:	e88d 0003 	stmia.w	sp, {r0, r1}
 8014bd2:	f106 0018 	add.w	r0, r6, #24
 8014bd6:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8014bda:	f003 f9e5 	bl	8017fa8 <rmw_init_options_init>
 8014bde:	4605      	mov	r5, r0
 8014be0:	b938      	cbnz	r0, 8014bf2 <rcl_init_options_init+0xa6>
 8014be2:	6823      	ldr	r3, [r4, #0]
 8014be4:	f883 0034 	strb.w	r0, [r3, #52]	@ 0x34
 8014be8:	e7bc      	b.n	8014b64 <rcl_init_options_init+0x18>
 8014bea:	250b      	movs	r5, #11
 8014bec:	e7ba      	b.n	8014b64 <rcl_init_options_init+0x18>
 8014bee:	250a      	movs	r5, #10
 8014bf0:	e7b8      	b.n	8014b64 <rcl_init_options_init+0x18>
 8014bf2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8014bf4:	9927      	ldr	r1, [sp, #156]	@ 0x9c
 8014bf6:	6820      	ldr	r0, [r4, #0]
 8014bf8:	4798      	blx	r3
 8014bfa:	4628      	mov	r0, r5
 8014bfc:	f7ff fe02 	bl	8014804 <rcl_convert_rmw_ret_to_rcl_ret>
 8014c00:	4605      	mov	r5, r0
 8014c02:	e7af      	b.n	8014b64 <rcl_init_options_init+0x18>

08014c04 <rcl_init_options_fini>:
 8014c04:	b530      	push	{r4, r5, lr}
 8014c06:	b087      	sub	sp, #28
 8014c08:	b1f0      	cbz	r0, 8014c48 <rcl_init_options_fini+0x44>
 8014c0a:	6803      	ldr	r3, [r0, #0]
 8014c0c:	4604      	mov	r4, r0
 8014c0e:	b1db      	cbz	r3, 8014c48 <rcl_init_options_fini+0x44>
 8014c10:	469c      	mov	ip, r3
 8014c12:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014c16:	f10d 0e04 	add.w	lr, sp, #4
 8014c1a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014c1e:	f8dc 3000 	ldr.w	r3, [ip]
 8014c22:	f8ce 3000 	str.w	r3, [lr]
 8014c26:	a801      	add	r0, sp, #4
 8014c28:	f7f8 fae8 	bl	800d1fc <rcutils_allocator_is_valid>
 8014c2c:	b160      	cbz	r0, 8014c48 <rcl_init_options_fini+0x44>
 8014c2e:	6820      	ldr	r0, [r4, #0]
 8014c30:	3018      	adds	r0, #24
 8014c32:	f003 fa7b 	bl	801812c <rmw_init_options_fini>
 8014c36:	4605      	mov	r5, r0
 8014c38:	b950      	cbnz	r0, 8014c50 <rcl_init_options_fini+0x4c>
 8014c3a:	6820      	ldr	r0, [r4, #0]
 8014c3c:	9b02      	ldr	r3, [sp, #8]
 8014c3e:	9905      	ldr	r1, [sp, #20]
 8014c40:	4798      	blx	r3
 8014c42:	4628      	mov	r0, r5
 8014c44:	b007      	add	sp, #28
 8014c46:	bd30      	pop	{r4, r5, pc}
 8014c48:	250b      	movs	r5, #11
 8014c4a:	4628      	mov	r0, r5
 8014c4c:	b007      	add	sp, #28
 8014c4e:	bd30      	pop	{r4, r5, pc}
 8014c50:	f7ff fdd8 	bl	8014804 <rcl_convert_rmw_ret_to_rcl_ret>
 8014c54:	4605      	mov	r5, r0
 8014c56:	e7f8      	b.n	8014c4a <rcl_init_options_fini+0x46>

08014c58 <rcl_init_options_copy>:
 8014c58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014c5a:	b09d      	sub	sp, #116	@ 0x74
 8014c5c:	2800      	cmp	r0, #0
 8014c5e:	d04a      	beq.n	8014cf6 <rcl_init_options_copy+0x9e>
 8014c60:	4604      	mov	r4, r0
 8014c62:	6800      	ldr	r0, [r0, #0]
 8014c64:	2800      	cmp	r0, #0
 8014c66:	d046      	beq.n	8014cf6 <rcl_init_options_copy+0x9e>
 8014c68:	460d      	mov	r5, r1
 8014c6a:	f7f8 fac7 	bl	800d1fc <rcutils_allocator_is_valid>
 8014c6e:	2800      	cmp	r0, #0
 8014c70:	d041      	beq.n	8014cf6 <rcl_init_options_copy+0x9e>
 8014c72:	2d00      	cmp	r5, #0
 8014c74:	d03f      	beq.n	8014cf6 <rcl_init_options_copy+0x9e>
 8014c76:	682b      	ldr	r3, [r5, #0]
 8014c78:	b11b      	cbz	r3, 8014c82 <rcl_init_options_copy+0x2a>
 8014c7a:	2464      	movs	r4, #100	@ 0x64
 8014c7c:	4620      	mov	r0, r4
 8014c7e:	b01d      	add	sp, #116	@ 0x74
 8014c80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014c82:	6826      	ldr	r6, [r4, #0]
 8014c84:	46b6      	mov	lr, r6
 8014c86:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014c8a:	f10d 0c5c 	add.w	ip, sp, #92	@ 0x5c
 8014c8e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014c92:	f8de 3000 	ldr.w	r3, [lr]
 8014c96:	6837      	ldr	r7, [r6, #0]
 8014c98:	f8cc 3000 	str.w	r3, [ip]
 8014c9c:	4619      	mov	r1, r3
 8014c9e:	2070      	movs	r0, #112	@ 0x70
 8014ca0:	47b8      	blx	r7
 8014ca2:	4606      	mov	r6, r0
 8014ca4:	6028      	str	r0, [r5, #0]
 8014ca6:	b350      	cbz	r0, 8014cfe <rcl_init_options_copy+0xa6>
 8014ca8:	f10d 0c5c 	add.w	ip, sp, #92	@ 0x5c
 8014cac:	4686      	mov	lr, r0
 8014cae:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014cb2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014cb6:	f8dc 3000 	ldr.w	r3, [ip]
 8014cba:	f8ce 3000 	str.w	r3, [lr]
 8014cbe:	4668      	mov	r0, sp
 8014cc0:	f002 fede 	bl	8017a80 <rmw_get_zero_initialized_init_options>
 8014cc4:	2258      	movs	r2, #88	@ 0x58
 8014cc6:	4669      	mov	r1, sp
 8014cc8:	f106 0018 	add.w	r0, r6, #24
 8014ccc:	f008 fc45 	bl	801d55a <memcpy>
 8014cd0:	6820      	ldr	r0, [r4, #0]
 8014cd2:	6829      	ldr	r1, [r5, #0]
 8014cd4:	3018      	adds	r0, #24
 8014cd6:	3118      	adds	r1, #24
 8014cd8:	f003 f9c8 	bl	801806c <rmw_init_options_copy>
 8014cdc:	4604      	mov	r4, r0
 8014cde:	2800      	cmp	r0, #0
 8014ce0:	d0cc      	beq.n	8014c7c <rcl_init_options_copy+0x24>
 8014ce2:	f7f8 fa99 	bl	800d218 <rcutils_get_error_string>
 8014ce6:	f7f8 faaf 	bl	800d248 <rcutils_reset_error>
 8014cea:	4628      	mov	r0, r5
 8014cec:	f7ff ff8a 	bl	8014c04 <rcl_init_options_fini>
 8014cf0:	b138      	cbz	r0, 8014d02 <rcl_init_options_copy+0xaa>
 8014cf2:	4604      	mov	r4, r0
 8014cf4:	e7c2      	b.n	8014c7c <rcl_init_options_copy+0x24>
 8014cf6:	240b      	movs	r4, #11
 8014cf8:	4620      	mov	r0, r4
 8014cfa:	b01d      	add	sp, #116	@ 0x74
 8014cfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014cfe:	240a      	movs	r4, #10
 8014d00:	e7bc      	b.n	8014c7c <rcl_init_options_copy+0x24>
 8014d02:	4620      	mov	r0, r4
 8014d04:	b01d      	add	sp, #116	@ 0x74
 8014d06:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8014d0a:	f7ff bd7b 	b.w	8014804 <rcl_convert_rmw_ret_to_rcl_ret>
 8014d0e:	bf00      	nop

08014d10 <rcl_get_localhost_only>:
 8014d10:	b510      	push	{r4, lr}
 8014d12:	b082      	sub	sp, #8
 8014d14:	2300      	movs	r3, #0
 8014d16:	9301      	str	r3, [sp, #4]
 8014d18:	b1b8      	cbz	r0, 8014d4a <rcl_get_localhost_only+0x3a>
 8014d1a:	4604      	mov	r4, r0
 8014d1c:	a901      	add	r1, sp, #4
 8014d1e:	480c      	ldr	r0, [pc, #48]	@ (8014d50 <rcl_get_localhost_only+0x40>)
 8014d20:	f002 fbe4 	bl	80174ec <rcutils_get_env>
 8014d24:	b110      	cbz	r0, 8014d2c <rcl_get_localhost_only+0x1c>
 8014d26:	2001      	movs	r0, #1
 8014d28:	b002      	add	sp, #8
 8014d2a:	bd10      	pop	{r4, pc}
 8014d2c:	9b01      	ldr	r3, [sp, #4]
 8014d2e:	b10b      	cbz	r3, 8014d34 <rcl_get_localhost_only+0x24>
 8014d30:	781b      	ldrb	r3, [r3, #0]
 8014d32:	b923      	cbnz	r3, 8014d3e <rcl_get_localhost_only+0x2e>
 8014d34:	2300      	movs	r3, #0
 8014d36:	7023      	strb	r3, [r4, #0]
 8014d38:	2000      	movs	r0, #0
 8014d3a:	b002      	add	sp, #8
 8014d3c:	bd10      	pop	{r4, pc}
 8014d3e:	2b31      	cmp	r3, #49	@ 0x31
 8014d40:	bf14      	ite	ne
 8014d42:	2302      	movne	r3, #2
 8014d44:	2301      	moveq	r3, #1
 8014d46:	7023      	strb	r3, [r4, #0]
 8014d48:	e7f6      	b.n	8014d38 <rcl_get_localhost_only+0x28>
 8014d4a:	200b      	movs	r0, #11
 8014d4c:	b002      	add	sp, #8
 8014d4e:	bd10      	pop	{r4, pc}
 8014d50:	0801f3a4 	.word	0x0801f3a4

08014d54 <rcl_get_zero_initialized_node>:
 8014d54:	4a03      	ldr	r2, [pc, #12]	@ (8014d64 <rcl_get_zero_initialized_node+0x10>)
 8014d56:	4603      	mov	r3, r0
 8014d58:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014d5c:	e883 0003 	stmia.w	r3, {r0, r1}
 8014d60:	4618      	mov	r0, r3
 8014d62:	4770      	bx	lr
 8014d64:	08020104 	.word	0x08020104

08014d68 <rcl_node_init>:
 8014d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d6c:	b0ab      	sub	sp, #172	@ 0xac
 8014d6e:	4604      	mov	r4, r0
 8014d70:	9d34      	ldr	r5, [sp, #208]	@ 0xd0
 8014d72:	a825      	add	r0, sp, #148	@ 0x94
 8014d74:	4689      	mov	r9, r1
 8014d76:	4690      	mov	r8, r2
 8014d78:	461f      	mov	r7, r3
 8014d7a:	f006 ff59 	bl	801bc30 <rcl_guard_condition_get_default_options>
 8014d7e:	2d00      	cmp	r5, #0
 8014d80:	f000 80d8 	beq.w	8014f34 <rcl_node_init+0x1cc>
 8014d84:	4628      	mov	r0, r5
 8014d86:	f7f8 fa39 	bl	800d1fc <rcutils_allocator_is_valid>
 8014d8a:	2800      	cmp	r0, #0
 8014d8c:	f000 80d2 	beq.w	8014f34 <rcl_node_init+0x1cc>
 8014d90:	f1b9 0f00 	cmp.w	r9, #0
 8014d94:	f000 80ce 	beq.w	8014f34 <rcl_node_init+0x1cc>
 8014d98:	f1b8 0f00 	cmp.w	r8, #0
 8014d9c:	f000 80ca 	beq.w	8014f34 <rcl_node_init+0x1cc>
 8014da0:	2c00      	cmp	r4, #0
 8014da2:	f000 80c7 	beq.w	8014f34 <rcl_node_init+0x1cc>
 8014da6:	6866      	ldr	r6, [r4, #4]
 8014da8:	2e00      	cmp	r6, #0
 8014daa:	f040 80ca 	bne.w	8014f42 <rcl_node_init+0x1da>
 8014dae:	2f00      	cmp	r7, #0
 8014db0:	f000 80c0 	beq.w	8014f34 <rcl_node_init+0x1cc>
 8014db4:	4638      	mov	r0, r7
 8014db6:	f7ff fd45 	bl	8014844 <rcl_context_is_valid>
 8014dba:	2800      	cmp	r0, #0
 8014dbc:	f000 80bf 	beq.w	8014f3e <rcl_node_init+0x1d6>
 8014dc0:	4632      	mov	r2, r6
 8014dc2:	a924      	add	r1, sp, #144	@ 0x90
 8014dc4:	4648      	mov	r0, r9
 8014dc6:	9624      	str	r6, [sp, #144]	@ 0x90
 8014dc8:	f003 f80a 	bl	8017de0 <rmw_validate_node_name>
 8014dcc:	4606      	mov	r6, r0
 8014dce:	2800      	cmp	r0, #0
 8014dd0:	f040 80b1 	bne.w	8014f36 <rcl_node_init+0x1ce>
 8014dd4:	9824      	ldr	r0, [sp, #144]	@ 0x90
 8014dd6:	2800      	cmp	r0, #0
 8014dd8:	f040 8104 	bne.w	8014fe4 <rcl_node_init+0x27c>
 8014ddc:	f898 3000 	ldrb.w	r3, [r8]
 8014de0:	2b00      	cmp	r3, #0
 8014de2:	f000 80f0 	beq.w	8014fc6 <rcl_node_init+0x25e>
 8014de6:	2b2f      	cmp	r3, #47	@ 0x2f
 8014de8:	f000 80b0 	beq.w	8014f4c <rcl_node_init+0x1e4>
 8014dec:	4b85      	ldr	r3, [pc, #532]	@ (8015004 <rcl_node_init+0x29c>)
 8014dee:	f8cd 800c 	str.w	r8, [sp, #12]
 8014df2:	9302      	str	r3, [sp, #8]
 8014df4:	692b      	ldr	r3, [r5, #16]
 8014df6:	9300      	str	r3, [sp, #0]
 8014df8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8014dfc:	9301      	str	r3, [sp, #4]
 8014dfe:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8014e02:	f002 fb8b 	bl	801751c <rcutils_format_string_limit>
 8014e06:	4680      	mov	r8, r0
 8014e08:	f1b8 0f00 	cmp.w	r8, #0
 8014e0c:	f000 80e8 	beq.w	8014fe0 <rcl_node_init+0x278>
 8014e10:	2200      	movs	r2, #0
 8014e12:	a924      	add	r1, sp, #144	@ 0x90
 8014e14:	4640      	mov	r0, r8
 8014e16:	9224      	str	r2, [sp, #144]	@ 0x90
 8014e18:	f002 ffc4 	bl	8017da4 <rmw_validate_namespace>
 8014e1c:	4606      	mov	r6, r0
 8014e1e:	2800      	cmp	r0, #0
 8014e20:	f040 80a4 	bne.w	8014f6c <rcl_node_init+0x204>
 8014e24:	9824      	ldr	r0, [sp, #144]	@ 0x90
 8014e26:	2800      	cmp	r0, #0
 8014e28:	f040 809d 	bne.w	8014f66 <rcl_node_init+0x1fe>
 8014e2c:	e9d5 3203 	ldrd	r3, r2, [r5, #12]
 8014e30:	2178      	movs	r1, #120	@ 0x78
 8014e32:	2001      	movs	r0, #1
 8014e34:	4798      	blx	r3
 8014e36:	4606      	mov	r6, r0
 8014e38:	6060      	str	r0, [r4, #4]
 8014e3a:	2800      	cmp	r0, #0
 8014e3c:	f000 80d6 	beq.w	8014fec <rcl_node_init+0x284>
 8014e40:	a80a      	add	r0, sp, #40	@ 0x28
 8014e42:	f000 f92f 	bl	80150a4 <rcl_node_get_default_options>
 8014e46:	a90a      	add	r1, sp, #40	@ 0x28
 8014e48:	4630      	mov	r0, r6
 8014e4a:	2268      	movs	r2, #104	@ 0x68
 8014e4c:	f008 fb85 	bl	801d55a <memcpy>
 8014e50:	6861      	ldr	r1, [r4, #4]
 8014e52:	6027      	str	r7, [r4, #0]
 8014e54:	4628      	mov	r0, r5
 8014e56:	f000 f933 	bl	80150c0 <rcl_node_options_copy>
 8014e5a:	4606      	mov	r6, r0
 8014e5c:	2800      	cmp	r0, #0
 8014e5e:	f040 8085 	bne.w	8014f6c <rcl_node_init+0x204>
 8014e62:	4640      	mov	r0, r8
 8014e64:	f7eb fa2c 	bl	80002c0 <strlen>
 8014e68:	eb08 0300 	add.w	r3, r8, r0
 8014e6c:	6866      	ldr	r6, [r4, #4]
 8014e6e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8014e72:	e9cd 8903 	strd	r8, r9, [sp, #12]
 8014e76:	2b2f      	cmp	r3, #47	@ 0x2f
 8014e78:	bf0c      	ite	eq
 8014e7a:	4b63      	ldreq	r3, [pc, #396]	@ (8015008 <rcl_node_init+0x2a0>)
 8014e7c:	4b63      	ldrne	r3, [pc, #396]	@ (801500c <rcl_node_init+0x2a4>)
 8014e7e:	9302      	str	r3, [sp, #8]
 8014e80:	692b      	ldr	r3, [r5, #16]
 8014e82:	9300      	str	r3, [sp, #0]
 8014e84:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8014e88:	9301      	str	r3, [sp, #4]
 8014e8a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8014e8e:	f002 fb45 	bl	801751c <rcutils_format_string_limit>
 8014e92:	6863      	ldr	r3, [r4, #4]
 8014e94:	6770      	str	r0, [r6, #116]	@ 0x74
 8014e96:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8014e98:	2a00      	cmp	r2, #0
 8014e9a:	f000 80a9 	beq.w	8014ff0 <rcl_node_init+0x288>
 8014e9e:	6822      	ldr	r2, [r4, #0]
 8014ea0:	9307      	str	r3, [sp, #28]
 8014ea2:	6810      	ldr	r0, [r2, #0]
 8014ea4:	4649      	mov	r1, r9
 8014ea6:	3028      	adds	r0, #40	@ 0x28
 8014ea8:	4642      	mov	r2, r8
 8014eaa:	f003 fbd1 	bl	8018650 <rmw_create_node>
 8014eae:	9b07      	ldr	r3, [sp, #28]
 8014eb0:	6698      	str	r0, [r3, #104]	@ 0x68
 8014eb2:	6863      	ldr	r3, [r4, #4]
 8014eb4:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8014eb6:	2800      	cmp	r0, #0
 8014eb8:	f000 809d 	beq.w	8014ff6 <rcl_node_init+0x28e>
 8014ebc:	f003 fc5a 	bl	8018774 <rmw_node_get_graph_guard_condition>
 8014ec0:	4681      	mov	r9, r0
 8014ec2:	2800      	cmp	r0, #0
 8014ec4:	f000 809c 	beq.w	8015000 <rcl_node_init+0x298>
 8014ec8:	682b      	ldr	r3, [r5, #0]
 8014eca:	6929      	ldr	r1, [r5, #16]
 8014ecc:	6866      	ldr	r6, [r4, #4]
 8014ece:	2008      	movs	r0, #8
 8014ed0:	4798      	blx	r3
 8014ed2:	6863      	ldr	r3, [r4, #4]
 8014ed4:	66f0      	str	r0, [r6, #108]	@ 0x6c
 8014ed6:	f8d3 a06c 	ldr.w	sl, [r3, #108]	@ 0x6c
 8014eda:	f1ba 0f00 	cmp.w	sl, #0
 8014ede:	f000 808d 	beq.w	8014ffc <rcl_node_init+0x294>
 8014ee2:	f10d 0b20 	add.w	fp, sp, #32
 8014ee6:	4658      	mov	r0, fp
 8014ee8:	f006 fe16 	bl	801bb18 <rcl_get_zero_initialized_guard_condition>
 8014eec:	e89b 0003 	ldmia.w	fp, {r0, r1}
 8014ef0:	6863      	ldr	r3, [r4, #4]
 8014ef2:	46ac      	mov	ip, r5
 8014ef4:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 8014ef8:	e88a 0003 	stmia.w	sl, {r0, r1}
 8014efc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014f00:	ae25      	add	r6, sp, #148	@ 0x94
 8014f02:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8014f04:	f8dc 3000 	ldr.w	r3, [ip]
 8014f08:	6033      	str	r3, [r6, #0]
 8014f0a:	ab2a      	add	r3, sp, #168	@ 0xa8
 8014f0c:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 8014f10:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8014f14:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8014f16:	463a      	mov	r2, r7
 8014f18:	4649      	mov	r1, r9
 8014f1a:	4670      	mov	r0, lr
 8014f1c:	f006 fe06 	bl	801bb2c <rcl_guard_condition_init_from_rmw>
 8014f20:	4606      	mov	r6, r0
 8014f22:	bb18      	cbnz	r0, 8014f6c <rcl_node_init+0x204>
 8014f24:	686b      	ldr	r3, [r5, #4]
 8014f26:	6929      	ldr	r1, [r5, #16]
 8014f28:	4798      	blx	r3
 8014f2a:	686b      	ldr	r3, [r5, #4]
 8014f2c:	6929      	ldr	r1, [r5, #16]
 8014f2e:	4640      	mov	r0, r8
 8014f30:	4798      	blx	r3
 8014f32:	e000      	b.n	8014f36 <rcl_node_init+0x1ce>
 8014f34:	260b      	movs	r6, #11
 8014f36:	4630      	mov	r0, r6
 8014f38:	b02b      	add	sp, #172	@ 0xac
 8014f3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f3e:	2665      	movs	r6, #101	@ 0x65
 8014f40:	e7f9      	b.n	8014f36 <rcl_node_init+0x1ce>
 8014f42:	2664      	movs	r6, #100	@ 0x64
 8014f44:	4630      	mov	r0, r6
 8014f46:	b02b      	add	sp, #172	@ 0xac
 8014f48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f4c:	f105 030c 	add.w	r3, r5, #12
 8014f50:	e893 0003 	ldmia.w	r3, {r0, r1}
 8014f54:	e88d 0003 	stmia.w	sp, {r0, r1}
 8014f58:	4640      	mov	r0, r8
 8014f5a:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8014f5e:	f002 fbfb 	bl	8017758 <rcutils_strdup>
 8014f62:	4680      	mov	r8, r0
 8014f64:	e750      	b.n	8014e08 <rcl_node_init+0xa0>
 8014f66:	f002 ff2f 	bl	8017dc8 <rmw_namespace_validation_result_string>
 8014f6a:	26ca      	movs	r6, #202	@ 0xca
 8014f6c:	6863      	ldr	r3, [r4, #4]
 8014f6e:	b1f3      	cbz	r3, 8014fae <rcl_node_init+0x246>
 8014f70:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8014f72:	b138      	cbz	r0, 8014f84 <rcl_node_init+0x21c>
 8014f74:	f006 fe3a 	bl	801bbec <rcl_guard_condition_fini>
 8014f78:	6863      	ldr	r3, [r4, #4]
 8014f7a:	6929      	ldr	r1, [r5, #16]
 8014f7c:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8014f7e:	686b      	ldr	r3, [r5, #4]
 8014f80:	4798      	blx	r3
 8014f82:	6863      	ldr	r3, [r4, #4]
 8014f84:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8014f86:	b110      	cbz	r0, 8014f8e <rcl_node_init+0x226>
 8014f88:	f003 fb78 	bl	801867c <rmw_destroy_node>
 8014f8c:	6863      	ldr	r3, [r4, #4]
 8014f8e:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8014f90:	6929      	ldr	r1, [r5, #16]
 8014f92:	686b      	ldr	r3, [r5, #4]
 8014f94:	4798      	blx	r3
 8014f96:	6863      	ldr	r3, [r4, #4]
 8014f98:	6929      	ldr	r1, [r5, #16]
 8014f9a:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8014f9c:	686b      	ldr	r3, [r5, #4]
 8014f9e:	4798      	blx	r3
 8014fa0:	6860      	ldr	r0, [r4, #4]
 8014fa2:	f000 f8ab 	bl	80150fc <rcl_node_options_fini>
 8014fa6:	686b      	ldr	r3, [r5, #4]
 8014fa8:	6929      	ldr	r1, [r5, #16]
 8014faa:	6860      	ldr	r0, [r4, #4]
 8014fac:	4798      	blx	r3
 8014fae:	686b      	ldr	r3, [r5, #4]
 8014fb0:	6929      	ldr	r1, [r5, #16]
 8014fb2:	2000      	movs	r0, #0
 8014fb4:	4798      	blx	r3
 8014fb6:	686b      	ldr	r3, [r5, #4]
 8014fb8:	6929      	ldr	r1, [r5, #16]
 8014fba:	4640      	mov	r0, r8
 8014fbc:	4798      	blx	r3
 8014fbe:	2300      	movs	r3, #0
 8014fc0:	e9c4 3300 	strd	r3, r3, [r4]
 8014fc4:	e7b7      	b.n	8014f36 <rcl_node_init+0x1ce>
 8014fc6:	f105 030c 	add.w	r3, r5, #12
 8014fca:	e893 0003 	ldmia.w	r3, {r0, r1}
 8014fce:	e88d 0003 	stmia.w	sp, {r0, r1}
 8014fd2:	480f      	ldr	r0, [pc, #60]	@ (8015010 <rcl_node_init+0x2a8>)
 8014fd4:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8014fd8:	f002 fbbe 	bl	8017758 <rcutils_strdup>
 8014fdc:	4680      	mov	r8, r0
 8014fde:	e713      	b.n	8014e08 <rcl_node_init+0xa0>
 8014fe0:	260a      	movs	r6, #10
 8014fe2:	e7a8      	b.n	8014f36 <rcl_node_init+0x1ce>
 8014fe4:	f002 ff48 	bl	8017e78 <rmw_node_name_validation_result_string>
 8014fe8:	26c9      	movs	r6, #201	@ 0xc9
 8014fea:	e7a4      	b.n	8014f36 <rcl_node_init+0x1ce>
 8014fec:	260a      	movs	r6, #10
 8014fee:	e7de      	b.n	8014fae <rcl_node_init+0x246>
 8014ff0:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8014ff2:	260a      	movs	r6, #10
 8014ff4:	e7bd      	b.n	8014f72 <rcl_node_init+0x20a>
 8014ff6:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8014ff8:	2601      	movs	r6, #1
 8014ffa:	e7ba      	b.n	8014f72 <rcl_node_init+0x20a>
 8014ffc:	260a      	movs	r6, #10
 8014ffe:	e7c1      	b.n	8014f84 <rcl_node_init+0x21c>
 8015000:	2601      	movs	r6, #1
 8015002:	e7b3      	b.n	8014f6c <rcl_node_init+0x204>
 8015004:	0801f3bc 	.word	0x0801f3bc
 8015008:	0801ed88 	.word	0x0801ed88
 801500c:	0801f3c0 	.word	0x0801f3c0
 8015010:	0801f3b8 	.word	0x0801f3b8

08015014 <rcl_node_is_valid>:
 8015014:	b130      	cbz	r0, 8015024 <rcl_node_is_valid+0x10>
 8015016:	6843      	ldr	r3, [r0, #4]
 8015018:	b123      	cbz	r3, 8015024 <rcl_node_is_valid+0x10>
 801501a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801501c:	b113      	cbz	r3, 8015024 <rcl_node_is_valid+0x10>
 801501e:	6800      	ldr	r0, [r0, #0]
 8015020:	f7ff bc10 	b.w	8014844 <rcl_context_is_valid>
 8015024:	2000      	movs	r0, #0
 8015026:	4770      	bx	lr

08015028 <rcl_node_get_name>:
 8015028:	b120      	cbz	r0, 8015034 <rcl_node_get_name+0xc>
 801502a:	6840      	ldr	r0, [r0, #4]
 801502c:	b110      	cbz	r0, 8015034 <rcl_node_get_name+0xc>
 801502e:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8015030:	b100      	cbz	r0, 8015034 <rcl_node_get_name+0xc>
 8015032:	6880      	ldr	r0, [r0, #8]
 8015034:	4770      	bx	lr
 8015036:	bf00      	nop

08015038 <rcl_node_get_namespace>:
 8015038:	b120      	cbz	r0, 8015044 <rcl_node_get_namespace+0xc>
 801503a:	6840      	ldr	r0, [r0, #4]
 801503c:	b110      	cbz	r0, 8015044 <rcl_node_get_namespace+0xc>
 801503e:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8015040:	b100      	cbz	r0, 8015044 <rcl_node_get_namespace+0xc>
 8015042:	68c0      	ldr	r0, [r0, #12]
 8015044:	4770      	bx	lr
 8015046:	bf00      	nop

08015048 <rcl_node_get_options>:
 8015048:	b128      	cbz	r0, 8015056 <rcl_node_get_options+0xe>
 801504a:	6840      	ldr	r0, [r0, #4]
 801504c:	b118      	cbz	r0, 8015056 <rcl_node_get_options+0xe>
 801504e:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8015050:	2b00      	cmp	r3, #0
 8015052:	bf08      	it	eq
 8015054:	2000      	moveq	r0, #0
 8015056:	4770      	bx	lr

08015058 <rcl_node_get_rmw_handle>:
 8015058:	b110      	cbz	r0, 8015060 <rcl_node_get_rmw_handle+0x8>
 801505a:	6840      	ldr	r0, [r0, #4]
 801505c:	b100      	cbz	r0, 8015060 <rcl_node_get_rmw_handle+0x8>
 801505e:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8015060:	4770      	bx	lr
 8015062:	bf00      	nop

08015064 <rcl_get_disable_loaned_message>:
 8015064:	b510      	push	{r4, lr}
 8015066:	b082      	sub	sp, #8
 8015068:	2300      	movs	r3, #0
 801506a:	9301      	str	r3, [sp, #4]
 801506c:	b1a0      	cbz	r0, 8015098 <rcl_get_disable_loaned_message+0x34>
 801506e:	4604      	mov	r4, r0
 8015070:	a901      	add	r1, sp, #4
 8015072:	480b      	ldr	r0, [pc, #44]	@ (80150a0 <rcl_get_disable_loaned_message+0x3c>)
 8015074:	f002 fa3a 	bl	80174ec <rcutils_get_env>
 8015078:	b110      	cbz	r0, 8015080 <rcl_get_disable_loaned_message+0x1c>
 801507a:	2001      	movs	r0, #1
 801507c:	b002      	add	sp, #8
 801507e:	bd10      	pop	{r4, pc}
 8015080:	9a01      	ldr	r2, [sp, #4]
 8015082:	7813      	ldrb	r3, [r2, #0]
 8015084:	3b31      	subs	r3, #49	@ 0x31
 8015086:	bf08      	it	eq
 8015088:	7853      	ldrbeq	r3, [r2, #1]
 801508a:	fab3 f383 	clz	r3, r3
 801508e:	095b      	lsrs	r3, r3, #5
 8015090:	2000      	movs	r0, #0
 8015092:	7023      	strb	r3, [r4, #0]
 8015094:	b002      	add	sp, #8
 8015096:	bd10      	pop	{r4, pc}
 8015098:	200b      	movs	r0, #11
 801509a:	b002      	add	sp, #8
 801509c:	bd10      	pop	{r4, pc}
 801509e:	bf00      	nop
 80150a0:	0801f3c8 	.word	0x0801f3c8

080150a4 <rcl_node_get_default_options>:
 80150a4:	b510      	push	{r4, lr}
 80150a6:	2253      	movs	r2, #83	@ 0x53
 80150a8:	4604      	mov	r4, r0
 80150aa:	2100      	movs	r1, #0
 80150ac:	3015      	adds	r0, #21
 80150ae:	f008 f9bf 	bl	801d430 <memset>
 80150b2:	4620      	mov	r0, r4
 80150b4:	f7f8 f876 	bl	800d1a4 <rcutils_get_default_allocator>
 80150b8:	2301      	movs	r3, #1
 80150ba:	7523      	strb	r3, [r4, #20]
 80150bc:	4620      	mov	r0, r4
 80150be:	bd10      	pop	{r4, pc}

080150c0 <rcl_node_options_copy>:
 80150c0:	b1d0      	cbz	r0, 80150f8 <rcl_node_options_copy+0x38>
 80150c2:	b570      	push	{r4, r5, r6, lr}
 80150c4:	460c      	mov	r4, r1
 80150c6:	b1a9      	cbz	r1, 80150f4 <rcl_node_options_copy+0x34>
 80150c8:	4288      	cmp	r0, r1
 80150ca:	4684      	mov	ip, r0
 80150cc:	d012      	beq.n	80150f4 <rcl_node_options_copy+0x34>
 80150ce:	4605      	mov	r5, r0
 80150d0:	8a86      	ldrh	r6, [r0, #20]
 80150d2:	468e      	mov	lr, r1
 80150d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80150d6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80150da:	682b      	ldr	r3, [r5, #0]
 80150dc:	f8ce 3000 	str.w	r3, [lr]
 80150e0:	f10c 0118 	add.w	r1, ip, #24
 80150e4:	2250      	movs	r2, #80	@ 0x50
 80150e6:	82a6      	strh	r6, [r4, #20]
 80150e8:	f104 0018 	add.w	r0, r4, #24
 80150ec:	f008 fa35 	bl	801d55a <memcpy>
 80150f0:	2000      	movs	r0, #0
 80150f2:	bd70      	pop	{r4, r5, r6, pc}
 80150f4:	200b      	movs	r0, #11
 80150f6:	bd70      	pop	{r4, r5, r6, pc}
 80150f8:	200b      	movs	r0, #11
 80150fa:	4770      	bx	lr

080150fc <rcl_node_options_fini>:
 80150fc:	b1c0      	cbz	r0, 8015130 <rcl_node_options_fini+0x34>
 80150fe:	b500      	push	{lr}
 8015100:	4684      	mov	ip, r0
 8015102:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015106:	b087      	sub	sp, #28
 8015108:	f10d 0e04 	add.w	lr, sp, #4
 801510c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8015110:	f8dc 3000 	ldr.w	r3, [ip]
 8015114:	f8ce 3000 	str.w	r3, [lr]
 8015118:	a801      	add	r0, sp, #4
 801511a:	f7f8 f86f 	bl	800d1fc <rcutils_allocator_is_valid>
 801511e:	b118      	cbz	r0, 8015128 <rcl_node_options_fini+0x2c>
 8015120:	2000      	movs	r0, #0
 8015122:	b007      	add	sp, #28
 8015124:	f85d fb04 	ldr.w	pc, [sp], #4
 8015128:	200b      	movs	r0, #11
 801512a:	b007      	add	sp, #28
 801512c:	f85d fb04 	ldr.w	pc, [sp], #4
 8015130:	200b      	movs	r0, #11
 8015132:	4770      	bx	lr

08015134 <rcl_node_resolve_name>:
 8015134:	b082      	sub	sp, #8
 8015136:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801513a:	b091      	sub	sp, #68	@ 0x44
 801513c:	ac1a      	add	r4, sp, #104	@ 0x68
 801513e:	e884 000c 	stmia.w	r4, {r2, r3}
 8015142:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 8015146:	2800      	cmp	r0, #0
 8015148:	d03a      	beq.n	80151c0 <rcl_node_resolve_name+0x8c>
 801514a:	460c      	mov	r4, r1
 801514c:	4605      	mov	r5, r0
 801514e:	f7ff ff7b 	bl	8015048 <rcl_node_get_options>
 8015152:	b370      	cbz	r0, 80151b2 <rcl_node_resolve_name+0x7e>
 8015154:	4628      	mov	r0, r5
 8015156:	f7ff ff67 	bl	8015028 <rcl_node_get_name>
 801515a:	4681      	mov	r9, r0
 801515c:	4628      	mov	r0, r5
 801515e:	f7ff ff6b 	bl	8015038 <rcl_node_get_namespace>
 8015162:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 8015166:	4607      	mov	r7, r0
 8015168:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801516c:	ad0b      	add	r5, sp, #44	@ 0x2c
 801516e:	46ac      	mov	ip, r5
 8015170:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015174:	f8de 3000 	ldr.w	r3, [lr]
 8015178:	f8cc 3000 	str.w	r3, [ip]
 801517c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801517e:	b1fb      	cbz	r3, 80151c0 <rcl_node_resolve_name+0x8c>
 8015180:	468a      	mov	sl, r1
 8015182:	f8dd b078 	ldr.w	fp, [sp, #120]	@ 0x78
 8015186:	f002 fb47 	bl	8017818 <rcutils_get_zero_initialized_string_map>
 801518a:	ab10      	add	r3, sp, #64	@ 0x40
 801518c:	9008      	str	r0, [sp, #32]
 801518e:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8015192:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8015196:	2100      	movs	r1, #0
 8015198:	e895 000c 	ldmia.w	r5, {r2, r3}
 801519c:	a808      	add	r0, sp, #32
 801519e:	f002 fb95 	bl	80178cc <rcutils_string_map_init>
 80151a2:	4606      	mov	r6, r0
 80151a4:	b170      	cbz	r0, 80151c4 <rcl_node_resolve_name+0x90>
 80151a6:	f7f8 f837 	bl	800d218 <rcutils_get_error_string>
 80151aa:	f7f8 f84d 	bl	800d248 <rcutils_reset_error>
 80151ae:	2e0a      	cmp	r6, #10
 80151b0:	d000      	beq.n	80151b4 <rcl_node_resolve_name+0x80>
 80151b2:	2601      	movs	r6, #1
 80151b4:	4630      	mov	r0, r6
 80151b6:	b011      	add	sp, #68	@ 0x44
 80151b8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80151bc:	b002      	add	sp, #8
 80151be:	4770      	bx	lr
 80151c0:	260b      	movs	r6, #11
 80151c2:	e7f7      	b.n	80151b4 <rcl_node_resolve_name+0x80>
 80151c4:	9009      	str	r0, [sp, #36]	@ 0x24
 80151c6:	9007      	str	r0, [sp, #28]
 80151c8:	a808      	add	r0, sp, #32
 80151ca:	f006 fc9f 	bl	801bb0c <rcl_get_default_topic_name_substitutions>
 80151ce:	4606      	mov	r6, r0
 80151d0:	b1b0      	cbz	r0, 8015200 <rcl_node_resolve_name+0xcc>
 80151d2:	280a      	cmp	r0, #10
 80151d4:	f8dd 901c 	ldr.w	r9, [sp, #28]
 80151d8:	d000      	beq.n	80151dc <rcl_node_resolve_name+0xa8>
 80151da:	2601      	movs	r6, #1
 80151dc:	a808      	add	r0, sp, #32
 80151de:	f002 fbb3 	bl	8017948 <rcutils_string_map_fini>
 80151e2:	2800      	cmp	r0, #0
 80151e4:	d132      	bne.n	801524c <rcl_node_resolve_name+0x118>
 80151e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80151e8:	4659      	mov	r1, fp
 80151ea:	47d0      	blx	sl
 80151ec:	4659      	mov	r1, fp
 80151ee:	4648      	mov	r0, r9
 80151f0:	47d0      	blx	sl
 80151f2:	f1b8 0f00 	cmp.w	r8, #0
 80151f6:	d0dd      	beq.n	80151b4 <rcl_node_resolve_name+0x80>
 80151f8:	2e67      	cmp	r6, #103	@ 0x67
 80151fa:	bf08      	it	eq
 80151fc:	2668      	moveq	r6, #104	@ 0x68
 80151fe:	e7d9      	b.n	80151b4 <rcl_node_resolve_name+0x80>
 8015200:	ab09      	add	r3, sp, #36	@ 0x24
 8015202:	9305      	str	r3, [sp, #20]
 8015204:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015206:	46ec      	mov	ip, sp
 8015208:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801520c:	682b      	ldr	r3, [r5, #0]
 801520e:	f8cc 3000 	str.w	r3, [ip]
 8015212:	463a      	mov	r2, r7
 8015214:	4649      	mov	r1, r9
 8015216:	4620      	mov	r0, r4
 8015218:	ab08      	add	r3, sp, #32
 801521a:	f006 fb19 	bl	801b850 <rcl_expand_topic_name>
 801521e:	4606      	mov	r6, r0
 8015220:	b9c8      	cbnz	r0, 8015256 <rcl_node_resolve_name+0x122>
 8015222:	f8dd 9024 	ldr.w	r9, [sp, #36]	@ 0x24
 8015226:	9009      	str	r0, [sp, #36]	@ 0x24
 8015228:	4602      	mov	r2, r0
 801522a:	a90a      	add	r1, sp, #40	@ 0x28
 801522c:	4648      	mov	r0, r9
 801522e:	f002 fd01 	bl	8017c34 <rmw_validate_full_topic_name>
 8015232:	b998      	cbnz	r0, 801525c <rcl_node_resolve_name+0x128>
 8015234:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8015236:	bb14      	cbnz	r4, 801527e <rcl_node_resolve_name+0x14a>
 8015238:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801523a:	a808      	add	r0, sp, #32
 801523c:	f8c3 9000 	str.w	r9, [r3]
 8015240:	f002 fb82 	bl	8017948 <rcutils_string_map_fini>
 8015244:	4606      	mov	r6, r0
 8015246:	b978      	cbnz	r0, 8015268 <rcl_node_resolve_name+0x134>
 8015248:	4681      	mov	r9, r0
 801524a:	e7cc      	b.n	80151e6 <rcl_node_resolve_name+0xb2>
 801524c:	f7f7 ffe4 	bl	800d218 <rcutils_get_error_string>
 8015250:	f7f7 fffa 	bl	800d248 <rcutils_reset_error>
 8015254:	e7c7      	b.n	80151e6 <rcl_node_resolve_name+0xb2>
 8015256:	f8dd 901c 	ldr.w	r9, [sp, #28]
 801525a:	e7bf      	b.n	80151dc <rcl_node_resolve_name+0xa8>
 801525c:	f7f7 ffdc 	bl	800d218 <rcutils_get_error_string>
 8015260:	2601      	movs	r6, #1
 8015262:	f7f7 fff1 	bl	800d248 <rcutils_reset_error>
 8015266:	e7b9      	b.n	80151dc <rcl_node_resolve_name+0xa8>
 8015268:	f7f7 ffd6 	bl	800d218 <rcutils_get_error_string>
 801526c:	f7f7 ffec 	bl	800d248 <rcutils_reset_error>
 8015270:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015272:	4659      	mov	r1, fp
 8015274:	47d0      	blx	sl
 8015276:	4659      	mov	r1, fp
 8015278:	4620      	mov	r0, r4
 801527a:	47d0      	blx	sl
 801527c:	e799      	b.n	80151b2 <rcl_node_resolve_name+0x7e>
 801527e:	2667      	movs	r6, #103	@ 0x67
 8015280:	e7ac      	b.n	80151dc <rcl_node_resolve_name+0xa8>
 8015282:	bf00      	nop

08015284 <rcl_get_zero_initialized_service>:
 8015284:	4b01      	ldr	r3, [pc, #4]	@ (801528c <rcl_get_zero_initialized_service+0x8>)
 8015286:	6818      	ldr	r0, [r3, #0]
 8015288:	4770      	bx	lr
 801528a:	bf00      	nop
 801528c:	0802010c 	.word	0x0802010c

08015290 <rcl_service_init>:
 8015290:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015294:	b086      	sub	sp, #24
 8015296:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8015298:	2d00      	cmp	r5, #0
 801529a:	d049      	beq.n	8015330 <rcl_service_init+0xa0>
 801529c:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 80152a0:	4604      	mov	r4, r0
 80152a2:	4648      	mov	r0, r9
 80152a4:	4688      	mov	r8, r1
 80152a6:	4617      	mov	r7, r2
 80152a8:	461e      	mov	r6, r3
 80152aa:	f7f7 ffa7 	bl	800d1fc <rcutils_allocator_is_valid>
 80152ae:	2800      	cmp	r0, #0
 80152b0:	d03e      	beq.n	8015330 <rcl_service_init+0xa0>
 80152b2:	2c00      	cmp	r4, #0
 80152b4:	d03c      	beq.n	8015330 <rcl_service_init+0xa0>
 80152b6:	4640      	mov	r0, r8
 80152b8:	f7ff feac 	bl	8015014 <rcl_node_is_valid>
 80152bc:	2800      	cmp	r0, #0
 80152be:	d041      	beq.n	8015344 <rcl_service_init+0xb4>
 80152c0:	2f00      	cmp	r7, #0
 80152c2:	d035      	beq.n	8015330 <rcl_service_init+0xa0>
 80152c4:	2e00      	cmp	r6, #0
 80152c6:	d033      	beq.n	8015330 <rcl_service_init+0xa0>
 80152c8:	f8d4 a000 	ldr.w	sl, [r4]
 80152cc:	f1ba 0f00 	cmp.w	sl, #0
 80152d0:	d133      	bne.n	801533a <rcl_service_init+0xaa>
 80152d2:	e9d5 3217 	ldrd	r3, r2, [r5, #92]	@ 0x5c
 80152d6:	f44f 718c 	mov.w	r1, #280	@ 0x118
 80152da:	2001      	movs	r0, #1
 80152dc:	4798      	blx	r3
 80152de:	6020      	str	r0, [r4, #0]
 80152e0:	2800      	cmp	r0, #0
 80152e2:	d075      	beq.n	80153d0 <rcl_service_init+0x140>
 80152e4:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 80152e8:	2201      	movs	r2, #1
 80152ea:	f8cd a010 	str.w	sl, [sp, #16]
 80152ee:	9005      	str	r0, [sp, #20]
 80152f0:	9203      	str	r2, [sp, #12]
 80152f2:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 80152f6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80152fa:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80152fe:	4631      	mov	r1, r6
 8015300:	e899 000c 	ldmia.w	r9, {r2, r3}
 8015304:	4640      	mov	r0, r8
 8015306:	f7ff ff15 	bl	8015134 <rcl_node_resolve_name>
 801530a:	4606      	mov	r6, r0
 801530c:	b1f8      	cbz	r0, 801534e <rcl_service_init+0xbe>
 801530e:	f1a0 0368 	sub.w	r3, r0, #104	@ 0x68
 8015312:	2b01      	cmp	r3, #1
 8015314:	6820      	ldr	r0, [r4, #0]
 8015316:	d943      	bls.n	80153a0 <rcl_service_init+0x110>
 8015318:	2e0a      	cmp	r6, #10
 801531a:	bf18      	it	ne
 801531c:	2601      	movne	r6, #1
 801531e:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 8015320:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 8015322:	4798      	blx	r3
 8015324:	2300      	movs	r3, #0
 8015326:	4630      	mov	r0, r6
 8015328:	6023      	str	r3, [r4, #0]
 801532a:	b006      	add	sp, #24
 801532c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015330:	260b      	movs	r6, #11
 8015332:	4630      	mov	r0, r6
 8015334:	b006      	add	sp, #24
 8015336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801533a:	2664      	movs	r6, #100	@ 0x64
 801533c:	4630      	mov	r0, r6
 801533e:	b006      	add	sp, #24
 8015340:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015344:	26c8      	movs	r6, #200	@ 0xc8
 8015346:	4630      	mov	r0, r6
 8015348:	b006      	add	sp, #24
 801534a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801534e:	4640      	mov	r0, r8
 8015350:	f7ff fe82 	bl	8015058 <rcl_node_get_rmw_handle>
 8015354:	6826      	ldr	r6, [r4, #0]
 8015356:	4639      	mov	r1, r7
 8015358:	f8d6 2110 	ldr.w	r2, [r6, #272]	@ 0x110
 801535c:	462b      	mov	r3, r5
 801535e:	f003 fb59 	bl	8018a14 <rmw_create_service>
 8015362:	6821      	ldr	r1, [r4, #0]
 8015364:	f8c6 0108 	str.w	r0, [r6, #264]	@ 0x108
 8015368:	f8d1 0108 	ldr.w	r0, [r1, #264]	@ 0x108
 801536c:	b390      	cbz	r0, 80153d4 <rcl_service_init+0x144>
 801536e:	3168      	adds	r1, #104	@ 0x68
 8015370:	f003 fc74 	bl	8018c5c <rmw_service_request_subscription_get_actual_qos>
 8015374:	b9b0      	cbnz	r0, 80153a4 <rcl_service_init+0x114>
 8015376:	6823      	ldr	r3, [r4, #0]
 8015378:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801537c:	f103 01b8 	add.w	r1, r3, #184	@ 0xb8
 8015380:	f003 fc5e 	bl	8018c40 <rmw_service_response_publisher_get_actual_qos>
 8015384:	4606      	mov	r6, r0
 8015386:	b968      	cbnz	r0, 80153a4 <rcl_service_init+0x114>
 8015388:	6820      	ldr	r0, [r4, #0]
 801538a:	f895 3048 	ldrb.w	r3, [r5, #72]	@ 0x48
 801538e:	f880 30b0 	strb.w	r3, [r0, #176]	@ 0xb0
 8015392:	f880 3100 	strb.w	r3, [r0, #256]	@ 0x100
 8015396:	2268      	movs	r2, #104	@ 0x68
 8015398:	4629      	mov	r1, r5
 801539a:	f008 f8de 	bl	801d55a <memcpy>
 801539e:	e7c8      	b.n	8015332 <rcl_service_init+0xa2>
 80153a0:	2668      	movs	r6, #104	@ 0x68
 80153a2:	e7bc      	b.n	801531e <rcl_service_init+0x8e>
 80153a4:	f7ff fa2e 	bl	8014804 <rcl_convert_rmw_ret_to_rcl_ret>
 80153a8:	4606      	mov	r6, r0
 80153aa:	4640      	mov	r0, r8
 80153ac:	f7ff fe54 	bl	8015058 <rcl_node_get_rmw_handle>
 80153b0:	6823      	ldr	r3, [r4, #0]
 80153b2:	f8d3 1108 	ldr.w	r1, [r3, #264]	@ 0x108
 80153b6:	f003 fbff 	bl	8018bb8 <rmw_destroy_service>
 80153ba:	6821      	ldr	r1, [r4, #0]
 80153bc:	f8d1 0110 	ldr.w	r0, [r1, #272]	@ 0x110
 80153c0:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 80153c2:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 80153c4:	4798      	blx	r3
 80153c6:	6820      	ldr	r0, [r4, #0]
 80153c8:	2300      	movs	r3, #0
 80153ca:	f8c0 3110 	str.w	r3, [r0, #272]	@ 0x110
 80153ce:	e7a6      	b.n	801531e <rcl_service_init+0x8e>
 80153d0:	260a      	movs	r6, #10
 80153d2:	e7ae      	b.n	8015332 <rcl_service_init+0xa2>
 80153d4:	2601      	movs	r6, #1
 80153d6:	e7f1      	b.n	80153bc <rcl_service_init+0x12c>

080153d8 <rcl_service_get_default_options>:
 80153d8:	b530      	push	{r4, r5, lr}
 80153da:	4d0f      	ldr	r5, [pc, #60]	@ (8015418 <rcl_service_get_default_options+0x40>)
 80153dc:	490f      	ldr	r1, [pc, #60]	@ (801541c <rcl_service_get_default_options+0x44>)
 80153de:	b087      	sub	sp, #28
 80153e0:	4604      	mov	r4, r0
 80153e2:	2250      	movs	r2, #80	@ 0x50
 80153e4:	4628      	mov	r0, r5
 80153e6:	f008 f8b8 	bl	801d55a <memcpy>
 80153ea:	4668      	mov	r0, sp
 80153ec:	f7f7 feda 	bl	800d1a4 <rcutils_get_default_allocator>
 80153f0:	46ec      	mov	ip, sp
 80153f2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80153f6:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 80153fa:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80153fe:	2268      	movs	r2, #104	@ 0x68
 8015400:	f8dc 3000 	ldr.w	r3, [ip]
 8015404:	f8ce 3000 	str.w	r3, [lr]
 8015408:	4629      	mov	r1, r5
 801540a:	4620      	mov	r0, r4
 801540c:	f008 f8a5 	bl	801d55a <memcpy>
 8015410:	4620      	mov	r0, r4
 8015412:	b007      	add	sp, #28
 8015414:	bd30      	pop	{r4, r5, pc}
 8015416:	bf00      	nop
 8015418:	20019548 	.word	0x20019548
 801541c:	08020110 	.word	0x08020110

08015420 <rcl_service_get_rmw_handle>:
 8015420:	b118      	cbz	r0, 801542a <rcl_service_get_rmw_handle+0xa>
 8015422:	6800      	ldr	r0, [r0, #0]
 8015424:	b108      	cbz	r0, 801542a <rcl_service_get_rmw_handle+0xa>
 8015426:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801542a:	4770      	bx	lr

0801542c <rcl_take_request>:
 801542c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801542e:	468e      	mov	lr, r1
 8015430:	460c      	mov	r4, r1
 8015432:	4617      	mov	r7, r2
 8015434:	4605      	mov	r5, r0
 8015436:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801543a:	b091      	sub	sp, #68	@ 0x44
 801543c:	f10d 0c28 	add.w	ip, sp, #40	@ 0x28
 8015440:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015444:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8015448:	e88c 0003 	stmia.w	ip, {r0, r1}
 801544c:	b30d      	cbz	r5, 8015492 <rcl_take_request+0x66>
 801544e:	682b      	ldr	r3, [r5, #0]
 8015450:	b1fb      	cbz	r3, 8015492 <rcl_take_request+0x66>
 8015452:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8015456:	b1e0      	cbz	r0, 8015492 <rcl_take_request+0x66>
 8015458:	b397      	cbz	r7, 80154c0 <rcl_take_request+0x94>
 801545a:	2300      	movs	r3, #0
 801545c:	f88d 3017 	strb.w	r3, [sp, #23]
 8015460:	463a      	mov	r2, r7
 8015462:	f10d 0317 	add.w	r3, sp, #23
 8015466:	a906      	add	r1, sp, #24
 8015468:	f003 f9d2 	bl	8018810 <rmw_take_request>
 801546c:	4606      	mov	r6, r0
 801546e:	b198      	cbz	r0, 8015498 <rcl_take_request+0x6c>
 8015470:	280a      	cmp	r0, #10
 8015472:	bf18      	it	ne
 8015474:	2601      	movne	r6, #1
 8015476:	f10d 0c28 	add.w	ip, sp, #40	@ 0x28
 801547a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801547e:	46a6      	mov	lr, r4
 8015480:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8015484:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8015488:	e88e 0003 	stmia.w	lr, {r0, r1}
 801548c:	4630      	mov	r0, r6
 801548e:	b011      	add	sp, #68	@ 0x44
 8015490:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015492:	f44f 7616 	mov.w	r6, #600	@ 0x258
 8015496:	e7ee      	b.n	8015476 <rcl_take_request+0x4a>
 8015498:	f89d 3017 	ldrb.w	r3, [sp, #23]
 801549c:	b193      	cbz	r3, 80154c4 <rcl_take_request+0x98>
 801549e:	682b      	ldr	r3, [r5, #0]
 80154a0:	f8d3 010c 	ldr.w	r0, [r3, #268]	@ 0x10c
 80154a4:	2800      	cmp	r0, #0
 80154a6:	d0e6      	beq.n	8015476 <rcl_take_request+0x4a>
 80154a8:	463a      	mov	r2, r7
 80154aa:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	@ 0x38
 80154ae:	ab0a      	add	r3, sp, #40	@ 0x28
 80154b0:	e9cd 6700 	strd	r6, r7, [sp]
 80154b4:	9302      	str	r3, [sp, #8]
 80154b6:	2101      	movs	r1, #1
 80154b8:	f000 f842 	bl	8015540 <rcl_send_service_event_message>
 80154bc:	4606      	mov	r6, r0
 80154be:	e7da      	b.n	8015476 <rcl_take_request+0x4a>
 80154c0:	260b      	movs	r6, #11
 80154c2:	e7d8      	b.n	8015476 <rcl_take_request+0x4a>
 80154c4:	f240 2659 	movw	r6, #601	@ 0x259
 80154c8:	e7d5      	b.n	8015476 <rcl_take_request+0x4a>
 80154ca:	bf00      	nop

080154cc <rcl_send_response>:
 80154cc:	b350      	cbz	r0, 8015524 <rcl_send_response+0x58>
 80154ce:	b570      	push	{r4, r5, r6, lr}
 80154d0:	6803      	ldr	r3, [r0, #0]
 80154d2:	b084      	sub	sp, #16
 80154d4:	4604      	mov	r4, r0
 80154d6:	b1cb      	cbz	r3, 801550c <rcl_send_response+0x40>
 80154d8:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 80154dc:	b1b0      	cbz	r0, 801550c <rcl_send_response+0x40>
 80154de:	460e      	mov	r6, r1
 80154e0:	b1e9      	cbz	r1, 801551e <rcl_send_response+0x52>
 80154e2:	4615      	mov	r5, r2
 80154e4:	b1da      	cbz	r2, 801551e <rcl_send_response+0x52>
 80154e6:	f003 f9f1 	bl	80188cc <rmw_send_response>
 80154ea:	b998      	cbnz	r0, 8015514 <rcl_send_response+0x48>
 80154ec:	6823      	ldr	r3, [r4, #0]
 80154ee:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 80154f2:	b16b      	cbz	r3, 8015510 <rcl_send_response+0x44>
 80154f4:	e9d6 0104 	ldrd	r0, r1, [r6, #16]
 80154f8:	462a      	mov	r2, r5
 80154fa:	e9cd 0100 	strd	r0, r1, [sp]
 80154fe:	9602      	str	r6, [sp, #8]
 8015500:	2102      	movs	r1, #2
 8015502:	4618      	mov	r0, r3
 8015504:	f000 f81c 	bl	8015540 <rcl_send_service_event_message>
 8015508:	b004      	add	sp, #16
 801550a:	bd70      	pop	{r4, r5, r6, pc}
 801550c:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8015510:	b004      	add	sp, #16
 8015512:	bd70      	pop	{r4, r5, r6, pc}
 8015514:	2802      	cmp	r0, #2
 8015516:	bf18      	it	ne
 8015518:	2001      	movne	r0, #1
 801551a:	b004      	add	sp, #16
 801551c:	bd70      	pop	{r4, r5, r6, pc}
 801551e:	200b      	movs	r0, #11
 8015520:	b004      	add	sp, #16
 8015522:	bd70      	pop	{r4, r5, r6, pc}
 8015524:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8015528:	4770      	bx	lr
 801552a:	bf00      	nop

0801552c <rcl_service_is_valid>:
 801552c:	b130      	cbz	r0, 801553c <rcl_service_is_valid+0x10>
 801552e:	6800      	ldr	r0, [r0, #0]
 8015530:	b120      	cbz	r0, 801553c <rcl_service_is_valid+0x10>
 8015532:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8015536:	3800      	subs	r0, #0
 8015538:	bf18      	it	ne
 801553a:	2001      	movne	r0, #1
 801553c:	4770      	bx	lr
 801553e:	bf00      	nop

08015540 <rcl_send_service_event_message>:
 8015540:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015542:	b093      	sub	sp, #76	@ 0x4c
 8015544:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8015546:	b17a      	cbz	r2, 8015568 <rcl_send_service_event_message+0x28>
 8015548:	b176      	cbz	r6, 8015568 <rcl_send_service_event_message+0x28>
 801554a:	4604      	mov	r4, r0
 801554c:	b150      	cbz	r0, 8015564 <rcl_send_service_event_message+0x24>
 801554e:	f8d0 3080 	ldr.w	r3, [r0, #128]	@ 0x80
 8015552:	b13b      	cbz	r3, 8015564 <rcl_send_service_event_message+0x24>
 8015554:	68c0      	ldr	r0, [r0, #12]
 8015556:	460f      	mov	r7, r1
 8015558:	4615      	mov	r5, r2
 801555a:	f000 f9d7 	bl	801590c <rcl_clock_valid>
 801555e:	b108      	cbz	r0, 8015564 <rcl_send_service_event_message+0x24>
 8015560:	7a23      	ldrb	r3, [r4, #8]
 8015562:	b92b      	cbnz	r3, 8015570 <rcl_send_service_event_message+0x30>
 8015564:	2501      	movs	r5, #1
 8015566:	e000      	b.n	801556a <rcl_send_service_event_message+0x2a>
 8015568:	250b      	movs	r5, #11
 801556a:	4628      	mov	r0, r5
 801556c:	b013      	add	sp, #76	@ 0x4c
 801556e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015570:	f104 0e60 	add.w	lr, r4, #96	@ 0x60
 8015574:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015578:	f10d 0c0c 	add.w	ip, sp, #12
 801557c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015580:	f8de 3000 	ldr.w	r3, [lr]
 8015584:	f8cc 3000 	str.w	r3, [ip]
 8015588:	a803      	add	r0, sp, #12
 801558a:	f7f7 fe37 	bl	800d1fc <rcutils_allocator_is_valid>
 801558e:	2800      	cmp	r0, #0
 8015590:	d0ea      	beq.n	8015568 <rcl_send_service_event_message+0x28>
 8015592:	6820      	ldr	r0, [r4, #0]
 8015594:	f7f6 feb6 	bl	800c304 <rcl_publisher_is_valid>
 8015598:	2800      	cmp	r0, #0
 801559a:	d045      	beq.n	8015628 <rcl_send_service_event_message+0xe8>
 801559c:	4669      	mov	r1, sp
 801559e:	68e0      	ldr	r0, [r4, #12]
 80155a0:	f000 fa2c 	bl	80159fc <rcl_clock_get_now>
 80155a4:	4601      	mov	r1, r0
 80155a6:	2800      	cmp	r0, #0
 80155a8:	d13b      	bne.n	8015622 <rcl_send_service_event_message+0xe2>
 80155aa:	2220      	movs	r2, #32
 80155ac:	eb0d 0002 	add.w	r0, sp, r2
 80155b0:	f007 ff3e 	bl	801d430 <memset>
 80155b4:	a324      	add	r3, pc, #144	@ (adr r3, 8015648 <rcl_send_service_event_message+0x108>)
 80155b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80155ba:	e9dd 0100 	ldrd	r0, r1, [sp]
 80155be:	f88d 7020 	strb.w	r7, [sp, #32]
 80155c2:	f7eb fb2b 	bl	8000c1c <__aeabi_ldivmod>
 80155c6:	e9cd 0209 	strd	r0, r2, [sp, #36]	@ 0x24
 80155ca:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	@ 0x60
 80155ce:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80155d2:	7a23      	ldrb	r3, [r4, #8]
 80155d4:	6830      	ldr	r0, [r6, #0]
 80155d6:	6871      	ldr	r1, [r6, #4]
 80155d8:	68b2      	ldr	r2, [r6, #8]
 80155da:	2b01      	cmp	r3, #1
 80155dc:	68f3      	ldr	r3, [r6, #12]
 80155de:	bf08      	it	eq
 80155e0:	2500      	moveq	r5, #0
 80155e2:	ae0b      	add	r6, sp, #44	@ 0x2c
 80155e4:	2f01      	cmp	r7, #1
 80155e6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80155e8:	d821      	bhi.n	801562e <rcl_send_service_event_message+0xee>
 80155ea:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 80155ee:	462a      	mov	r2, r5
 80155f0:	a808      	add	r0, sp, #32
 80155f2:	699d      	ldr	r5, [r3, #24]
 80155f4:	a903      	add	r1, sp, #12
 80155f6:	2300      	movs	r3, #0
 80155f8:	47a8      	blx	r5
 80155fa:	4606      	mov	r6, r0
 80155fc:	2e00      	cmp	r6, #0
 80155fe:	d0b1      	beq.n	8015564 <rcl_send_service_event_message+0x24>
 8015600:	4631      	mov	r1, r6
 8015602:	6820      	ldr	r0, [r4, #0]
 8015604:	2200      	movs	r2, #0
 8015606:	f7f6 fe59 	bl	800c2bc <rcl_publish>
 801560a:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 801560e:	4605      	mov	r5, r0
 8015610:	69db      	ldr	r3, [r3, #28]
 8015612:	a903      	add	r1, sp, #12
 8015614:	4630      	mov	r0, r6
 8015616:	4798      	blx	r3
 8015618:	2d00      	cmp	r5, #0
 801561a:	d0a6      	beq.n	801556a <rcl_send_service_event_message+0x2a>
 801561c:	f7f7 fe14 	bl	800d248 <rcutils_reset_error>
 8015620:	e7a3      	b.n	801556a <rcl_send_service_event_message+0x2a>
 8015622:	f7f7 fe11 	bl	800d248 <rcutils_reset_error>
 8015626:	e79d      	b.n	8015564 <rcl_send_service_event_message+0x24>
 8015628:	f44f 7596 	mov.w	r5, #300	@ 0x12c
 801562c:	e79d      	b.n	801556a <rcl_send_service_event_message+0x2a>
 801562e:	1eb9      	subs	r1, r7, #2
 8015630:	2901      	cmp	r1, #1
 8015632:	d8f6      	bhi.n	8015622 <rcl_send_service_event_message+0xe2>
 8015634:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 8015638:	462b      	mov	r3, r5
 801563a:	a808      	add	r0, sp, #32
 801563c:	6995      	ldr	r5, [r2, #24]
 801563e:	a903      	add	r1, sp, #12
 8015640:	2200      	movs	r2, #0
 8015642:	47a8      	blx	r5
 8015644:	4606      	mov	r6, r0
 8015646:	e7d9      	b.n	80155fc <rcl_send_service_event_message+0xbc>
 8015648:	3b9aca00 	.word	0x3b9aca00
 801564c:	00000000 	.word	0x00000000

08015650 <rcl_get_zero_initialized_subscription>:
 8015650:	4b01      	ldr	r3, [pc, #4]	@ (8015658 <rcl_get_zero_initialized_subscription+0x8>)
 8015652:	6818      	ldr	r0, [r3, #0]
 8015654:	4770      	bx	lr
 8015656:	bf00      	nop
 8015658:	08020160 	.word	0x08020160

0801565c <rcl_subscription_init>:
 801565c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015660:	b089      	sub	sp, #36	@ 0x24
 8015662:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8015664:	b1d6      	cbz	r6, 801569c <rcl_subscription_init+0x40>
 8015666:	f106 0950 	add.w	r9, r6, #80	@ 0x50
 801566a:	4604      	mov	r4, r0
 801566c:	4648      	mov	r0, r9
 801566e:	460d      	mov	r5, r1
 8015670:	4690      	mov	r8, r2
 8015672:	461f      	mov	r7, r3
 8015674:	f7f7 fdc2 	bl	800d1fc <rcutils_allocator_is_valid>
 8015678:	b180      	cbz	r0, 801569c <rcl_subscription_init+0x40>
 801567a:	b17c      	cbz	r4, 801569c <rcl_subscription_init+0x40>
 801567c:	4628      	mov	r0, r5
 801567e:	f7ff fcc9 	bl	8015014 <rcl_node_is_valid>
 8015682:	2800      	cmp	r0, #0
 8015684:	d054      	beq.n	8015730 <rcl_subscription_init+0xd4>
 8015686:	f1b8 0f00 	cmp.w	r8, #0
 801568a:	d007      	beq.n	801569c <rcl_subscription_init+0x40>
 801568c:	b137      	cbz	r7, 801569c <rcl_subscription_init+0x40>
 801568e:	6823      	ldr	r3, [r4, #0]
 8015690:	b14b      	cbz	r3, 80156a6 <rcl_subscription_init+0x4a>
 8015692:	2764      	movs	r7, #100	@ 0x64
 8015694:	4638      	mov	r0, r7
 8015696:	b009      	add	sp, #36	@ 0x24
 8015698:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801569c:	270b      	movs	r7, #11
 801569e:	4638      	mov	r0, r7
 80156a0:	b009      	add	sp, #36	@ 0x24
 80156a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80156a6:	e9cd 3303 	strd	r3, r3, [sp, #12]
 80156aa:	aa07      	add	r2, sp, #28
 80156ac:	9205      	str	r2, [sp, #20]
 80156ae:	9307      	str	r3, [sp, #28]
 80156b0:	f106 0358 	add.w	r3, r6, #88	@ 0x58
 80156b4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80156b8:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80156bc:	4639      	mov	r1, r7
 80156be:	e899 000c 	ldmia.w	r9, {r2, r3}
 80156c2:	4628      	mov	r0, r5
 80156c4:	f7ff fd36 	bl	8015134 <rcl_node_resolve_name>
 80156c8:	4607      	mov	r7, r0
 80156ca:	2800      	cmp	r0, #0
 80156cc:	d15f      	bne.n	801578e <rcl_subscription_init+0x132>
 80156ce:	e9d6 3217 	ldrd	r3, r2, [r6, #92]	@ 0x5c
 80156d2:	21d0      	movs	r1, #208	@ 0xd0
 80156d4:	2001      	movs	r0, #1
 80156d6:	4798      	blx	r3
 80156d8:	6020      	str	r0, [r4, #0]
 80156da:	2800      	cmp	r0, #0
 80156dc:	d05d      	beq.n	801579a <rcl_subscription_init+0x13e>
 80156de:	4628      	mov	r0, r5
 80156e0:	f7ff fcba 	bl	8015058 <rcl_node_get_rmw_handle>
 80156e4:	f106 0364 	add.w	r3, r6, #100	@ 0x64
 80156e8:	9300      	str	r3, [sp, #0]
 80156ea:	9a07      	ldr	r2, [sp, #28]
 80156ec:	6827      	ldr	r7, [r4, #0]
 80156ee:	4641      	mov	r1, r8
 80156f0:	4633      	mov	r3, r6
 80156f2:	f003 fac1 	bl	8018c78 <rmw_create_subscription>
 80156f6:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
 80156fa:	6827      	ldr	r7, [r4, #0]
 80156fc:	f8d7 00c8 	ldr.w	r0, [r7, #200]	@ 0xc8
 8015700:	b358      	cbz	r0, 801575a <rcl_subscription_init+0xfe>
 8015702:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 8015706:	f003 fb97 	bl	8018e38 <rmw_subscription_get_actual_qos>
 801570a:	4607      	mov	r7, r0
 801570c:	b9a8      	cbnz	r0, 801573a <rcl_subscription_init+0xde>
 801570e:	6820      	ldr	r0, [r4, #0]
 8015710:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 8015714:	f880 30c0 	strb.w	r3, [r0, #192]	@ 0xc0
 8015718:	2278      	movs	r2, #120	@ 0x78
 801571a:	4631      	mov	r1, r6
 801571c:	f007 ff1d 	bl	801d55a <memcpy>
 8015720:	9807      	ldr	r0, [sp, #28]
 8015722:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 8015724:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 8015726:	4798      	blx	r3
 8015728:	4638      	mov	r0, r7
 801572a:	b009      	add	sp, #36	@ 0x24
 801572c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015730:	27c8      	movs	r7, #200	@ 0xc8
 8015732:	4638      	mov	r0, r7
 8015734:	b009      	add	sp, #36	@ 0x24
 8015736:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801573a:	6827      	ldr	r7, [r4, #0]
 801573c:	b32f      	cbz	r7, 801578a <rcl_subscription_init+0x12e>
 801573e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8015742:	b153      	cbz	r3, 801575a <rcl_subscription_init+0xfe>
 8015744:	4628      	mov	r0, r5
 8015746:	f7ff fc87 	bl	8015058 <rcl_node_get_rmw_handle>
 801574a:	6823      	ldr	r3, [r4, #0]
 801574c:	f8d3 10c8 	ldr.w	r1, [r3, #200]	@ 0xc8
 8015750:	f003 fb80 	bl	8018e54 <rmw_destroy_subscription>
 8015754:	6827      	ldr	r7, [r4, #0]
 8015756:	4638      	mov	r0, r7
 8015758:	b197      	cbz	r7, 8015780 <rcl_subscription_init+0x124>
 801575a:	f107 0550 	add.w	r5, r7, #80	@ 0x50
 801575e:	4628      	mov	r0, r5
 8015760:	f7f7 fd4c 	bl	800d1fc <rcutils_allocator_is_valid>
 8015764:	b1e8      	cbz	r0, 80157a2 <rcl_subscription_init+0x146>
 8015766:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8015768:	b1d8      	cbz	r0, 80157a2 <rcl_subscription_init+0x146>
 801576a:	4629      	mov	r1, r5
 801576c:	f002 f9b4 	bl	8017ad8 <rmw_subscription_content_filter_options_fini>
 8015770:	4605      	mov	r5, r0
 8015772:	b9a0      	cbnz	r0, 801579e <rcl_subscription_init+0x142>
 8015774:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8015776:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8015778:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 801577a:	4798      	blx	r3
 801577c:	6820      	ldr	r0, [r4, #0]
 801577e:	66fd      	str	r5, [r7, #108]	@ 0x6c
 8015780:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 8015782:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 8015784:	4798      	blx	r3
 8015786:	2300      	movs	r3, #0
 8015788:	6023      	str	r3, [r4, #0]
 801578a:	2701      	movs	r7, #1
 801578c:	e7c8      	b.n	8015720 <rcl_subscription_init+0xc4>
 801578e:	2867      	cmp	r0, #103	@ 0x67
 8015790:	d0c6      	beq.n	8015720 <rcl_subscription_init+0xc4>
 8015792:	2869      	cmp	r0, #105	@ 0x69
 8015794:	d007      	beq.n	80157a6 <rcl_subscription_init+0x14a>
 8015796:	280a      	cmp	r0, #10
 8015798:	d1f7      	bne.n	801578a <rcl_subscription_init+0x12e>
 801579a:	270a      	movs	r7, #10
 801579c:	e7c0      	b.n	8015720 <rcl_subscription_init+0xc4>
 801579e:	f7ff f831 	bl	8014804 <rcl_convert_rmw_ret_to_rcl_ret>
 80157a2:	6820      	ldr	r0, [r4, #0]
 80157a4:	e7ec      	b.n	8015780 <rcl_subscription_init+0x124>
 80157a6:	2767      	movs	r7, #103	@ 0x67
 80157a8:	e7ba      	b.n	8015720 <rcl_subscription_init+0xc4>
 80157aa:	bf00      	nop

080157ac <rcl_subscription_get_default_options>:
 80157ac:	b570      	push	{r4, r5, r6, lr}
 80157ae:	4d14      	ldr	r5, [pc, #80]	@ (8015800 <rcl_subscription_get_default_options+0x54>)
 80157b0:	4914      	ldr	r1, [pc, #80]	@ (8015804 <rcl_subscription_get_default_options+0x58>)
 80157b2:	b08a      	sub	sp, #40	@ 0x28
 80157b4:	4604      	mov	r4, r0
 80157b6:	2250      	movs	r2, #80	@ 0x50
 80157b8:	4628      	mov	r0, r5
 80157ba:	f007 fece 	bl	801d55a <memcpy>
 80157be:	a804      	add	r0, sp, #16
 80157c0:	f7f7 fcf0 	bl	800d1a4 <rcutils_get_default_allocator>
 80157c4:	f10d 0c10 	add.w	ip, sp, #16
 80157c8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80157cc:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 80157d0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80157d4:	466e      	mov	r6, sp
 80157d6:	f8dc 3000 	ldr.w	r3, [ip]
 80157da:	f8ce 3000 	str.w	r3, [lr]
 80157de:	4630      	mov	r0, r6
 80157e0:	f002 f994 	bl	8017b0c <rmw_get_default_subscription_options>
 80157e4:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80157e8:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 80157ec:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80157f0:	2278      	movs	r2, #120	@ 0x78
 80157f2:	4629      	mov	r1, r5
 80157f4:	4620      	mov	r0, r4
 80157f6:	f007 feb0 	bl	801d55a <memcpy>
 80157fa:	4620      	mov	r0, r4
 80157fc:	b00a      	add	sp, #40	@ 0x28
 80157fe:	bd70      	pop	{r4, r5, r6, pc}
 8015800:	200195b0 	.word	0x200195b0
 8015804:	08020168 	.word	0x08020168

08015808 <rcl_take>:
 8015808:	2800      	cmp	r0, #0
 801580a:	d04b      	beq.n	80158a4 <rcl_take+0x9c>
 801580c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015810:	4615      	mov	r5, r2
 8015812:	6802      	ldr	r2, [r0, #0]
 8015814:	b0a0      	sub	sp, #128	@ 0x80
 8015816:	4604      	mov	r4, r0
 8015818:	2a00      	cmp	r2, #0
 801581a:	d03b      	beq.n	8015894 <rcl_take+0x8c>
 801581c:	461f      	mov	r7, r3
 801581e:	f8d2 30c8 	ldr.w	r3, [r2, #200]	@ 0xc8
 8015822:	2b00      	cmp	r3, #0
 8015824:	d036      	beq.n	8015894 <rcl_take+0x8c>
 8015826:	460e      	mov	r6, r1
 8015828:	2900      	cmp	r1, #0
 801582a:	d039      	beq.n	80158a0 <rcl_take+0x98>
 801582c:	2d00      	cmp	r5, #0
 801582e:	d03d      	beq.n	80158ac <rcl_take+0xa4>
 8015830:	a802      	add	r0, sp, #8
 8015832:	f002 f9f7 	bl	8017c24 <rmw_get_zero_initialized_message_info>
 8015836:	6823      	ldr	r3, [r4, #0]
 8015838:	f10d 0c08 	add.w	ip, sp, #8
 801583c:	f8d3 40c8 	ldr.w	r4, [r3, #200]	@ 0xc8
 8015840:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015844:	46ae      	mov	lr, r5
 8015846:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801584a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801584e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8015852:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015856:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801585a:	e89c 0003 	ldmia.w	ip, {r0, r1}
 801585e:	462b      	mov	r3, r5
 8015860:	e88e 0003 	stmia.w	lr, {r0, r1}
 8015864:	f04f 0800 	mov.w	r8, #0
 8015868:	f10d 0247 	add.w	r2, sp, #71	@ 0x47
 801586c:	4631      	mov	r1, r6
 801586e:	4620      	mov	r0, r4
 8015870:	f88d 8047 	strb.w	r8, [sp, #71]	@ 0x47
 8015874:	9700      	str	r7, [sp, #0]
 8015876:	f003 fb4d 	bl	8018f14 <rmw_take_with_info>
 801587a:	4603      	mov	r3, r0
 801587c:	b9c0      	cbnz	r0, 80158b0 <rcl_take+0xa8>
 801587e:	f89d 1047 	ldrb.w	r1, [sp, #71]	@ 0x47
 8015882:	f240 1291 	movw	r2, #401	@ 0x191
 8015886:	2900      	cmp	r1, #0
 8015888:	bf08      	it	eq
 801588a:	4613      	moveq	r3, r2
 801588c:	4618      	mov	r0, r3
 801588e:	b020      	add	sp, #128	@ 0x80
 8015890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015894:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8015898:	4618      	mov	r0, r3
 801589a:	b020      	add	sp, #128	@ 0x80
 801589c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80158a0:	230b      	movs	r3, #11
 80158a2:	e7f3      	b.n	801588c <rcl_take+0x84>
 80158a4:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80158a8:	4618      	mov	r0, r3
 80158aa:	4770      	bx	lr
 80158ac:	ad12      	add	r5, sp, #72	@ 0x48
 80158ae:	e7bf      	b.n	8015830 <rcl_take+0x28>
 80158b0:	f7fe ffa8 	bl	8014804 <rcl_convert_rmw_ret_to_rcl_ret>
 80158b4:	4603      	mov	r3, r0
 80158b6:	e7e9      	b.n	801588c <rcl_take+0x84>

080158b8 <rcl_subscription_get_rmw_handle>:
 80158b8:	b118      	cbz	r0, 80158c2 <rcl_subscription_get_rmw_handle+0xa>
 80158ba:	6800      	ldr	r0, [r0, #0]
 80158bc:	b108      	cbz	r0, 80158c2 <rcl_subscription_get_rmw_handle+0xa>
 80158be:	f8d0 00c8 	ldr.w	r0, [r0, #200]	@ 0xc8
 80158c2:	4770      	bx	lr

080158c4 <rcl_subscription_is_valid>:
 80158c4:	b130      	cbz	r0, 80158d4 <rcl_subscription_is_valid+0x10>
 80158c6:	6800      	ldr	r0, [r0, #0]
 80158c8:	b120      	cbz	r0, 80158d4 <rcl_subscription_is_valid+0x10>
 80158ca:	f8d0 00c8 	ldr.w	r0, [r0, #200]	@ 0xc8
 80158ce:	3800      	subs	r0, #0
 80158d0:	bf18      	it	ne
 80158d2:	2001      	movne	r0, #1
 80158d4:	4770      	bx	lr
 80158d6:	bf00      	nop

080158d8 <rcl_get_system_time>:
 80158d8:	4608      	mov	r0, r1
 80158da:	f7f7 bcd1 	b.w	800d280 <rcutils_system_time_now>
 80158de:	bf00      	nop

080158e0 <rcl_get_steady_time>:
 80158e0:	4608      	mov	r0, r1
 80158e2:	f7f7 bcf7 	b.w	800d2d4 <rcutils_steady_time_now>
 80158e6:	bf00      	nop

080158e8 <rcl_get_ros_time>:
 80158e8:	7a03      	ldrb	r3, [r0, #8]
 80158ea:	b510      	push	{r4, lr}
 80158ec:	460c      	mov	r4, r1
 80158ee:	b143      	cbz	r3, 8015902 <rcl_get_ros_time+0x1a>
 80158f0:	2105      	movs	r1, #5
 80158f2:	f001 fd55 	bl	80173a0 <__atomic_load_8>
 80158f6:	4602      	mov	r2, r0
 80158f8:	460b      	mov	r3, r1
 80158fa:	e9c4 2300 	strd	r2, r3, [r4]
 80158fe:	2000      	movs	r0, #0
 8015900:	bd10      	pop	{r4, pc}
 8015902:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015906:	4608      	mov	r0, r1
 8015908:	f7f7 bcba 	b.w	800d280 <rcutils_system_time_now>

0801590c <rcl_clock_valid>:
 801590c:	b138      	cbz	r0, 801591e <rcl_clock_valid+0x12>
 801590e:	7803      	ldrb	r3, [r0, #0]
 8015910:	b123      	cbz	r3, 801591c <rcl_clock_valid+0x10>
 8015912:	68c0      	ldr	r0, [r0, #12]
 8015914:	3800      	subs	r0, #0
 8015916:	bf18      	it	ne
 8015918:	2001      	movne	r0, #1
 801591a:	4770      	bx	lr
 801591c:	4618      	mov	r0, r3
 801591e:	4770      	bx	lr

08015920 <rcl_clock_init>:
 8015920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015922:	4605      	mov	r5, r0
 8015924:	4610      	mov	r0, r2
 8015926:	4614      	mov	r4, r2
 8015928:	460e      	mov	r6, r1
 801592a:	f7f7 fc67 	bl	800d1fc <rcutils_allocator_is_valid>
 801592e:	b128      	cbz	r0, 801593c <rcl_clock_init+0x1c>
 8015930:	2d03      	cmp	r5, #3
 8015932:	d803      	bhi.n	801593c <rcl_clock_init+0x1c>
 8015934:	e8df f005 	tbb	[pc, r5]
 8015938:	044c291a 	.word	0x044c291a
 801593c:	200b      	movs	r0, #11
 801593e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015940:	2e00      	cmp	r6, #0
 8015942:	d0fb      	beq.n	801593c <rcl_clock_init+0x1c>
 8015944:	2c00      	cmp	r4, #0
 8015946:	d0f9      	beq.n	801593c <rcl_clock_init+0x1c>
 8015948:	2300      	movs	r3, #0
 801594a:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801594e:	f8df c0a4 	ldr.w	ip, [pc, #164]	@ 80159f4 <rcl_clock_init+0xd4>
 8015952:	6133      	str	r3, [r6, #16]
 8015954:	f106 0514 	add.w	r5, r6, #20
 8015958:	2703      	movs	r7, #3
 801595a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801595c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801595e:	6823      	ldr	r3, [r4, #0]
 8015960:	602b      	str	r3, [r5, #0]
 8015962:	f8c6 c00c 	str.w	ip, [r6, #12]
 8015966:	7037      	strb	r7, [r6, #0]
 8015968:	2000      	movs	r0, #0
 801596a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801596c:	2e00      	cmp	r6, #0
 801596e:	d0e5      	beq.n	801593c <rcl_clock_init+0x1c>
 8015970:	2300      	movs	r3, #0
 8015972:	7033      	strb	r3, [r6, #0]
 8015974:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8015978:	e9c6 3303 	strd	r3, r3, [r6, #12]
 801597c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801597e:	f106 0514 	add.w	r5, r6, #20
 8015982:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015984:	6823      	ldr	r3, [r4, #0]
 8015986:	602b      	str	r3, [r5, #0]
 8015988:	e7ee      	b.n	8015968 <rcl_clock_init+0x48>
 801598a:	2e00      	cmp	r6, #0
 801598c:	d0d6      	beq.n	801593c <rcl_clock_init+0x1c>
 801598e:	2c00      	cmp	r4, #0
 8015990:	d0d4      	beq.n	801593c <rcl_clock_init+0x1c>
 8015992:	2700      	movs	r7, #0
 8015994:	7037      	strb	r7, [r6, #0]
 8015996:	46a4      	mov	ip, r4
 8015998:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801599c:	f106 0514 	add.w	r5, r6, #20
 80159a0:	e9c6 7701 	strd	r7, r7, [r6, #4]
 80159a4:	e9c6 7703 	strd	r7, r7, [r6, #12]
 80159a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80159aa:	f8dc 3000 	ldr.w	r3, [ip]
 80159ae:	602b      	str	r3, [r5, #0]
 80159b0:	6921      	ldr	r1, [r4, #16]
 80159b2:	6823      	ldr	r3, [r4, #0]
 80159b4:	2010      	movs	r0, #16
 80159b6:	4798      	blx	r3
 80159b8:	6130      	str	r0, [r6, #16]
 80159ba:	b1b8      	cbz	r0, 80159ec <rcl_clock_init+0xcc>
 80159bc:	2200      	movs	r2, #0
 80159be:	2300      	movs	r3, #0
 80159c0:	e9c0 2300 	strd	r2, r3, [r0]
 80159c4:	4a0a      	ldr	r2, [pc, #40]	@ (80159f0 <rcl_clock_init+0xd0>)
 80159c6:	7207      	strb	r7, [r0, #8]
 80159c8:	2301      	movs	r3, #1
 80159ca:	60f2      	str	r2, [r6, #12]
 80159cc:	7033      	strb	r3, [r6, #0]
 80159ce:	e7cb      	b.n	8015968 <rcl_clock_init+0x48>
 80159d0:	2e00      	cmp	r6, #0
 80159d2:	d0b3      	beq.n	801593c <rcl_clock_init+0x1c>
 80159d4:	2c00      	cmp	r4, #0
 80159d6:	d0b1      	beq.n	801593c <rcl_clock_init+0x1c>
 80159d8:	2300      	movs	r3, #0
 80159da:	e9c6 3301 	strd	r3, r3, [r6, #4]
 80159de:	f8df c018 	ldr.w	ip, [pc, #24]	@ 80159f8 <rcl_clock_init+0xd8>
 80159e2:	6133      	str	r3, [r6, #16]
 80159e4:	f106 0514 	add.w	r5, r6, #20
 80159e8:	2702      	movs	r7, #2
 80159ea:	e7b6      	b.n	801595a <rcl_clock_init+0x3a>
 80159ec:	200a      	movs	r0, #10
 80159ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80159f0:	080158e9 	.word	0x080158e9
 80159f4:	080158e1 	.word	0x080158e1
 80159f8:	080158d9 	.word	0x080158d9

080159fc <rcl_clock_get_now>:
 80159fc:	b140      	cbz	r0, 8015a10 <rcl_clock_get_now+0x14>
 80159fe:	b139      	cbz	r1, 8015a10 <rcl_clock_get_now+0x14>
 8015a00:	7803      	ldrb	r3, [r0, #0]
 8015a02:	b11b      	cbz	r3, 8015a0c <rcl_clock_get_now+0x10>
 8015a04:	68c3      	ldr	r3, [r0, #12]
 8015a06:	b10b      	cbz	r3, 8015a0c <rcl_clock_get_now+0x10>
 8015a08:	6900      	ldr	r0, [r0, #16]
 8015a0a:	4718      	bx	r3
 8015a0c:	2001      	movs	r0, #1
 8015a0e:	4770      	bx	lr
 8015a10:	200b      	movs	r0, #11
 8015a12:	4770      	bx	lr

08015a14 <rcl_is_enabled_ros_time_override>:
 8015a14:	b158      	cbz	r0, 8015a2e <rcl_is_enabled_ros_time_override+0x1a>
 8015a16:	b151      	cbz	r1, 8015a2e <rcl_is_enabled_ros_time_override+0x1a>
 8015a18:	7803      	ldrb	r3, [r0, #0]
 8015a1a:	2b01      	cmp	r3, #1
 8015a1c:	d105      	bne.n	8015a2a <rcl_is_enabled_ros_time_override+0x16>
 8015a1e:	6902      	ldr	r2, [r0, #16]
 8015a20:	b11a      	cbz	r2, 8015a2a <rcl_is_enabled_ros_time_override+0x16>
 8015a22:	7a13      	ldrb	r3, [r2, #8]
 8015a24:	700b      	strb	r3, [r1, #0]
 8015a26:	2000      	movs	r0, #0
 8015a28:	4770      	bx	lr
 8015a2a:	2001      	movs	r0, #1
 8015a2c:	4770      	bx	lr
 8015a2e:	200b      	movs	r0, #11
 8015a30:	4770      	bx	lr
 8015a32:	bf00      	nop

08015a34 <rcl_timer_clock>:
 8015a34:	b130      	cbz	r0, 8015a44 <rcl_timer_clock+0x10>
 8015a36:	b129      	cbz	r1, 8015a44 <rcl_timer_clock+0x10>
 8015a38:	6803      	ldr	r3, [r0, #0]
 8015a3a:	b12b      	cbz	r3, 8015a48 <rcl_timer_clock+0x14>
 8015a3c:	681b      	ldr	r3, [r3, #0]
 8015a3e:	600b      	str	r3, [r1, #0]
 8015a40:	2000      	movs	r0, #0
 8015a42:	4770      	bx	lr
 8015a44:	200b      	movs	r0, #11
 8015a46:	4770      	bx	lr
 8015a48:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8015a4c:	4770      	bx	lr
 8015a4e:	bf00      	nop

08015a50 <rcl_timer_call>:
 8015a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a54:	b087      	sub	sp, #28
 8015a56:	2800      	cmp	r0, #0
 8015a58:	d067      	beq.n	8015b2a <rcl_timer_call+0xda>
 8015a5a:	6803      	ldr	r3, [r0, #0]
 8015a5c:	4604      	mov	r4, r0
 8015a5e:	2b00      	cmp	r3, #0
 8015a60:	d068      	beq.n	8015b34 <rcl_timer_call+0xe4>
 8015a62:	f3bf 8f5b 	dmb	ish
 8015a66:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8015a6a:	f3bf 8f5b 	dmb	ish
 8015a6e:	2b00      	cmp	r3, #0
 8015a70:	d150      	bne.n	8015b14 <rcl_timer_call+0xc4>
 8015a72:	6803      	ldr	r3, [r0, #0]
 8015a74:	a904      	add	r1, sp, #16
 8015a76:	6818      	ldr	r0, [r3, #0]
 8015a78:	f7ff ffc0 	bl	80159fc <rcl_clock_get_now>
 8015a7c:	4605      	mov	r5, r0
 8015a7e:	2800      	cmp	r0, #0
 8015a80:	d144      	bne.n	8015b0c <rcl_timer_call+0xbc>
 8015a82:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015a86:	2b00      	cmp	r3, #0
 8015a88:	db4a      	blt.n	8015b20 <rcl_timer_call+0xd0>
 8015a8a:	6820      	ldr	r0, [r4, #0]
 8015a8c:	f04f 0a05 	mov.w	sl, #5
 8015a90:	f8cd a000 	str.w	sl, [sp]
 8015a94:	3020      	adds	r0, #32
 8015a96:	f001 fcef 	bl	8017478 <__atomic_exchange_8>
 8015a9a:	6823      	ldr	r3, [r4, #0]
 8015a9c:	f3bf 8f5b 	dmb	ish
 8015aa0:	4680      	mov	r8, r0
 8015aa2:	f8d3 b010 	ldr.w	fp, [r3, #16]
 8015aa6:	f3bf 8f5b 	dmb	ish
 8015aaa:	6820      	ldr	r0, [r4, #0]
 8015aac:	4689      	mov	r9, r1
 8015aae:	3028      	adds	r0, #40	@ 0x28
 8015ab0:	4651      	mov	r1, sl
 8015ab2:	f001 fc75 	bl	80173a0 <__atomic_load_8>
 8015ab6:	4606      	mov	r6, r0
 8015ab8:	6820      	ldr	r0, [r4, #0]
 8015aba:	460f      	mov	r7, r1
 8015abc:	3018      	adds	r0, #24
 8015abe:	4651      	mov	r1, sl
 8015ac0:	f001 fc6e 	bl	80173a0 <__atomic_load_8>
 8015ac4:	1836      	adds	r6, r6, r0
 8015ac6:	eb41 0707 	adc.w	r7, r1, r7
 8015aca:	4602      	mov	r2, r0
 8015acc:	460b      	mov	r3, r1
 8015ace:	4682      	mov	sl, r0
 8015ad0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015ad4:	42b0      	cmp	r0, r6
 8015ad6:	eb71 0c07 	sbcs.w	ip, r1, r7
 8015ada:	db04      	blt.n	8015ae6 <rcl_timer_call+0x96>
 8015adc:	ea53 0c02 	orrs.w	ip, r3, r2
 8015ae0:	d12b      	bne.n	8015b3a <rcl_timer_call+0xea>
 8015ae2:	4606      	mov	r6, r0
 8015ae4:	460f      	mov	r7, r1
 8015ae6:	6820      	ldr	r0, [r4, #0]
 8015ae8:	2105      	movs	r1, #5
 8015aea:	4632      	mov	r2, r6
 8015aec:	463b      	mov	r3, r7
 8015aee:	3028      	adds	r0, #40	@ 0x28
 8015af0:	9100      	str	r1, [sp, #0]
 8015af2:	f001 fc8b 	bl	801740c <__atomic_store_8>
 8015af6:	f1bb 0f00 	cmp.w	fp, #0
 8015afa:	d007      	beq.n	8015b0c <rcl_timer_call+0xbc>
 8015afc:	9a04      	ldr	r2, [sp, #16]
 8015afe:	9b05      	ldr	r3, [sp, #20]
 8015b00:	ebb2 0208 	subs.w	r2, r2, r8
 8015b04:	4620      	mov	r0, r4
 8015b06:	eb63 0309 	sbc.w	r3, r3, r9
 8015b0a:	47d8      	blx	fp
 8015b0c:	4628      	mov	r0, r5
 8015b0e:	b007      	add	sp, #28
 8015b10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b14:	f240 3521 	movw	r5, #801	@ 0x321
 8015b18:	4628      	mov	r0, r5
 8015b1a:	b007      	add	sp, #28
 8015b1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b20:	2501      	movs	r5, #1
 8015b22:	4628      	mov	r0, r5
 8015b24:	b007      	add	sp, #28
 8015b26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b2a:	250b      	movs	r5, #11
 8015b2c:	4628      	mov	r0, r5
 8015b2e:	b007      	add	sp, #28
 8015b30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b34:	f44f 7548 	mov.w	r5, #800	@ 0x320
 8015b38:	e7e8      	b.n	8015b0c <rcl_timer_call+0xbc>
 8015b3a:	1b80      	subs	r0, r0, r6
 8015b3c:	eb61 0107 	sbc.w	r1, r1, r7
 8015b40:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8015b44:	f7eb f86a 	bl	8000c1c <__aeabi_ldivmod>
 8015b48:	9b02      	ldr	r3, [sp, #8]
 8015b4a:	3001      	adds	r0, #1
 8015b4c:	f141 0100 	adc.w	r1, r1, #0
 8015b50:	fb00 f303 	mul.w	r3, r0, r3
 8015b54:	fb01 330a 	mla	r3, r1, sl, r3
 8015b58:	fba0 0a0a 	umull	r0, sl, r0, sl
 8015b5c:	1830      	adds	r0, r6, r0
 8015b5e:	4453      	add	r3, sl
 8015b60:	eb43 0707 	adc.w	r7, r3, r7
 8015b64:	4606      	mov	r6, r0
 8015b66:	e7be      	b.n	8015ae6 <rcl_timer_call+0x96>

08015b68 <rcl_timer_is_ready>:
 8015b68:	b398      	cbz	r0, 8015bd2 <rcl_timer_is_ready+0x6a>
 8015b6a:	b530      	push	{r4, r5, lr}
 8015b6c:	6803      	ldr	r3, [r0, #0]
 8015b6e:	b083      	sub	sp, #12
 8015b70:	4604      	mov	r4, r0
 8015b72:	b383      	cbz	r3, 8015bd6 <rcl_timer_is_ready+0x6e>
 8015b74:	460d      	mov	r5, r1
 8015b76:	b349      	cbz	r1, 8015bcc <rcl_timer_is_ready+0x64>
 8015b78:	f3bf 8f5b 	dmb	ish
 8015b7c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8015b80:	f3bf 8f5b 	dmb	ish
 8015b84:	b9fb      	cbnz	r3, 8015bc6 <rcl_timer_is_ready+0x5e>
 8015b86:	6803      	ldr	r3, [r0, #0]
 8015b88:	4669      	mov	r1, sp
 8015b8a:	6818      	ldr	r0, [r3, #0]
 8015b8c:	f7ff ff36 	bl	80159fc <rcl_clock_get_now>
 8015b90:	b128      	cbz	r0, 8015b9e <rcl_timer_is_ready+0x36>
 8015b92:	f240 3321 	movw	r3, #801	@ 0x321
 8015b96:	4298      	cmp	r0, r3
 8015b98:	d015      	beq.n	8015bc6 <rcl_timer_is_ready+0x5e>
 8015b9a:	b003      	add	sp, #12
 8015b9c:	bd30      	pop	{r4, r5, pc}
 8015b9e:	6820      	ldr	r0, [r4, #0]
 8015ba0:	2105      	movs	r1, #5
 8015ba2:	3028      	adds	r0, #40	@ 0x28
 8015ba4:	f001 fbfc 	bl	80173a0 <__atomic_load_8>
 8015ba8:	e9dd 3200 	ldrd	r3, r2, [sp]
 8015bac:	1ac0      	subs	r0, r0, r3
 8015bae:	eb61 0102 	sbc.w	r1, r1, r2
 8015bb2:	2801      	cmp	r0, #1
 8015bb4:	f171 0100 	sbcs.w	r1, r1, #0
 8015bb8:	bfb4      	ite	lt
 8015bba:	2301      	movlt	r3, #1
 8015bbc:	2300      	movge	r3, #0
 8015bbe:	702b      	strb	r3, [r5, #0]
 8015bc0:	2000      	movs	r0, #0
 8015bc2:	b003      	add	sp, #12
 8015bc4:	bd30      	pop	{r4, r5, pc}
 8015bc6:	2300      	movs	r3, #0
 8015bc8:	702b      	strb	r3, [r5, #0]
 8015bca:	e7f9      	b.n	8015bc0 <rcl_timer_is_ready+0x58>
 8015bcc:	200b      	movs	r0, #11
 8015bce:	b003      	add	sp, #12
 8015bd0:	bd30      	pop	{r4, r5, pc}
 8015bd2:	200b      	movs	r0, #11
 8015bd4:	4770      	bx	lr
 8015bd6:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8015bda:	e7de      	b.n	8015b9a <rcl_timer_is_ready+0x32>

08015bdc <rcl_timer_get_next_call_time>:
 8015bdc:	b1d8      	cbz	r0, 8015c16 <rcl_timer_get_next_call_time+0x3a>
 8015bde:	b538      	push	{r3, r4, r5, lr}
 8015be0:	6803      	ldr	r3, [r0, #0]
 8015be2:	b1d3      	cbz	r3, 8015c1a <rcl_timer_get_next_call_time+0x3e>
 8015be4:	460c      	mov	r4, r1
 8015be6:	b1a1      	cbz	r1, 8015c12 <rcl_timer_get_next_call_time+0x36>
 8015be8:	f3bf 8f5b 	dmb	ish
 8015bec:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8015bf0:	f3bf 8f5b 	dmb	ish
 8015bf4:	f003 05ff 	and.w	r5, r3, #255	@ 0xff
 8015bf8:	b943      	cbnz	r3, 8015c0c <rcl_timer_get_next_call_time+0x30>
 8015bfa:	6800      	ldr	r0, [r0, #0]
 8015bfc:	2105      	movs	r1, #5
 8015bfe:	3028      	adds	r0, #40	@ 0x28
 8015c00:	f001 fbce 	bl	80173a0 <__atomic_load_8>
 8015c04:	e9c4 0100 	strd	r0, r1, [r4]
 8015c08:	4628      	mov	r0, r5
 8015c0a:	bd38      	pop	{r3, r4, r5, pc}
 8015c0c:	f240 3021 	movw	r0, #801	@ 0x321
 8015c10:	bd38      	pop	{r3, r4, r5, pc}
 8015c12:	200b      	movs	r0, #11
 8015c14:	bd38      	pop	{r3, r4, r5, pc}
 8015c16:	200b      	movs	r0, #11
 8015c18:	4770      	bx	lr
 8015c1a:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8015c1e:	bd38      	pop	{r3, r4, r5, pc}

08015c20 <rcl_timer_get_guard_condition>:
 8015c20:	b130      	cbz	r0, 8015c30 <rcl_timer_get_guard_condition+0x10>
 8015c22:	6800      	ldr	r0, [r0, #0]
 8015c24:	b120      	cbz	r0, 8015c30 <rcl_timer_get_guard_condition+0x10>
 8015c26:	68c3      	ldr	r3, [r0, #12]
 8015c28:	b10b      	cbz	r3, 8015c2e <rcl_timer_get_guard_condition+0xe>
 8015c2a:	3008      	adds	r0, #8
 8015c2c:	4770      	bx	lr
 8015c2e:	4618      	mov	r0, r3
 8015c30:	4770      	bx	lr
 8015c32:	bf00      	nop

08015c34 <rcl_get_zero_initialized_wait_set>:
 8015c34:	b510      	push	{r4, lr}
 8015c36:	4c08      	ldr	r4, [pc, #32]	@ (8015c58 <rcl_get_zero_initialized_wait_set+0x24>)
 8015c38:	4686      	mov	lr, r0
 8015c3a:	4684      	mov	ip, r0
 8015c3c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015c3e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015c42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015c44:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015c48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015c4a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015c4e:	6823      	ldr	r3, [r4, #0]
 8015c50:	f8cc 3000 	str.w	r3, [ip]
 8015c54:	4670      	mov	r0, lr
 8015c56:	bd10      	pop	{r4, pc}
 8015c58:	080201b8 	.word	0x080201b8

08015c5c <rcl_wait_set_is_valid>:
 8015c5c:	b118      	cbz	r0, 8015c66 <rcl_wait_set_is_valid+0xa>
 8015c5e:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8015c60:	3800      	subs	r0, #0
 8015c62:	bf18      	it	ne
 8015c64:	2001      	movne	r0, #1
 8015c66:	4770      	bx	lr

08015c68 <rcl_wait_set_fini>:
 8015c68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015c6c:	b083      	sub	sp, #12
 8015c6e:	2800      	cmp	r0, #0
 8015c70:	f000 8098 	beq.w	8015da4 <rcl_wait_set_fini+0x13c>
 8015c74:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8015c76:	4605      	mov	r5, r0
 8015c78:	2e00      	cmp	r6, #0
 8015c7a:	f000 808f 	beq.w	8015d9c <rcl_wait_set_fini+0x134>
 8015c7e:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 8015c80:	f003 fb3e 	bl	8019300 <rmw_destroy_wait_set>
 8015c84:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015c86:	1e06      	subs	r6, r0, #0
 8015c88:	bf18      	it	ne
 8015c8a:	f44f 7661 	movne.w	r6, #900	@ 0x384
 8015c8e:	2c00      	cmp	r4, #0
 8015c90:	f000 8084 	beq.w	8015d9c <rcl_wait_set_fini+0x134>
 8015c94:	6828      	ldr	r0, [r5, #0]
 8015c96:	f8d4 804c 	ldr.w	r8, [r4, #76]	@ 0x4c
 8015c9a:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8015c9e:	2700      	movs	r7, #0
 8015ca0:	606f      	str	r7, [r5, #4]
 8015ca2:	6027      	str	r7, [r4, #0]
 8015ca4:	b118      	cbz	r0, 8015cae <rcl_wait_set_fini+0x46>
 8015ca6:	4649      	mov	r1, r9
 8015ca8:	47c0      	blx	r8
 8015caa:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015cac:	602f      	str	r7, [r5, #0]
 8015cae:	68a0      	ldr	r0, [r4, #8]
 8015cb0:	b128      	cbz	r0, 8015cbe <rcl_wait_set_fini+0x56>
 8015cb2:	4649      	mov	r1, r9
 8015cb4:	47c0      	blx	r8
 8015cb6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015cb8:	2300      	movs	r3, #0
 8015cba:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8015cbe:	68a8      	ldr	r0, [r5, #8]
 8015cc0:	6ce7      	ldr	r7, [r4, #76]	@ 0x4c
 8015cc2:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8015cc4:	f04f 0800 	mov.w	r8, #0
 8015cc8:	f8c5 800c 	str.w	r8, [r5, #12]
 8015ccc:	f8c4 800c 	str.w	r8, [r4, #12]
 8015cd0:	b128      	cbz	r0, 8015cde <rcl_wait_set_fini+0x76>
 8015cd2:	47b8      	blx	r7
 8015cd4:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015cd6:	f8c5 8008 	str.w	r8, [r5, #8]
 8015cda:	6ce7      	ldr	r7, [r4, #76]	@ 0x4c
 8015cdc:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8015cde:	6960      	ldr	r0, [r4, #20]
 8015ce0:	f04f 0800 	mov.w	r8, #0
 8015ce4:	f8c4 8010 	str.w	r8, [r4, #16]
 8015ce8:	b128      	cbz	r0, 8015cf6 <rcl_wait_set_fini+0x8e>
 8015cea:	47b8      	blx	r7
 8015cec:	f8c4 8014 	str.w	r8, [r4, #20]
 8015cf0:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015cf2:	6ce7      	ldr	r7, [r4, #76]	@ 0x4c
 8015cf4:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8015cf6:	6928      	ldr	r0, [r5, #16]
 8015cf8:	f04f 0800 	mov.w	r8, #0
 8015cfc:	f8c5 8014 	str.w	r8, [r5, #20]
 8015d00:	f8c4 8040 	str.w	r8, [r4, #64]	@ 0x40
 8015d04:	b128      	cbz	r0, 8015d12 <rcl_wait_set_fini+0xaa>
 8015d06:	47b8      	blx	r7
 8015d08:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015d0a:	f8c5 8010 	str.w	r8, [r5, #16]
 8015d0e:	6ce7      	ldr	r7, [r4, #76]	@ 0x4c
 8015d10:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8015d12:	69a8      	ldr	r0, [r5, #24]
 8015d14:	f04f 0800 	mov.w	r8, #0
 8015d18:	f8c5 801c 	str.w	r8, [r5, #28]
 8015d1c:	f8c4 8018 	str.w	r8, [r4, #24]
 8015d20:	b128      	cbz	r0, 8015d2e <rcl_wait_set_fini+0xc6>
 8015d22:	9101      	str	r1, [sp, #4]
 8015d24:	47b8      	blx	r7
 8015d26:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015d28:	9901      	ldr	r1, [sp, #4]
 8015d2a:	f8c5 8018 	str.w	r8, [r5, #24]
 8015d2e:	6a20      	ldr	r0, [r4, #32]
 8015d30:	b120      	cbz	r0, 8015d3c <rcl_wait_set_fini+0xd4>
 8015d32:	47b8      	blx	r7
 8015d34:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015d36:	2300      	movs	r3, #0
 8015d38:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8015d3c:	6a28      	ldr	r0, [r5, #32]
 8015d3e:	f8d4 804c 	ldr.w	r8, [r4, #76]	@ 0x4c
 8015d42:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8015d46:	2700      	movs	r7, #0
 8015d48:	626f      	str	r7, [r5, #36]	@ 0x24
 8015d4a:	6267      	str	r7, [r4, #36]	@ 0x24
 8015d4c:	b118      	cbz	r0, 8015d56 <rcl_wait_set_fini+0xee>
 8015d4e:	4649      	mov	r1, r9
 8015d50:	47c0      	blx	r8
 8015d52:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015d54:	622f      	str	r7, [r5, #32]
 8015d56:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8015d58:	b128      	cbz	r0, 8015d66 <rcl_wait_set_fini+0xfe>
 8015d5a:	4649      	mov	r1, r9
 8015d5c:	47c0      	blx	r8
 8015d5e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015d60:	2300      	movs	r3, #0
 8015d62:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 8015d66:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8015d68:	f8d4 804c 	ldr.w	r8, [r4, #76]	@ 0x4c
 8015d6c:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8015d70:	2700      	movs	r7, #0
 8015d72:	62ef      	str	r7, [r5, #44]	@ 0x2c
 8015d74:	6327      	str	r7, [r4, #48]	@ 0x30
 8015d76:	b118      	cbz	r0, 8015d80 <rcl_wait_set_fini+0x118>
 8015d78:	4649      	mov	r1, r9
 8015d7a:	47c0      	blx	r8
 8015d7c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015d7e:	62af      	str	r7, [r5, #40]	@ 0x28
 8015d80:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8015d82:	b128      	cbz	r0, 8015d90 <rcl_wait_set_fini+0x128>
 8015d84:	4649      	mov	r1, r9
 8015d86:	47c0      	blx	r8
 8015d88:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015d8a:	2300      	movs	r3, #0
 8015d8c:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
 8015d90:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8015d92:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8015d94:	4620      	mov	r0, r4
 8015d96:	4798      	blx	r3
 8015d98:	2300      	movs	r3, #0
 8015d9a:	632b      	str	r3, [r5, #48]	@ 0x30
 8015d9c:	4630      	mov	r0, r6
 8015d9e:	b003      	add	sp, #12
 8015da0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015da4:	260b      	movs	r6, #11
 8015da6:	4630      	mov	r0, r6
 8015da8:	b003      	add	sp, #12
 8015daa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015dae:	bf00      	nop

08015db0 <rcl_wait_set_add_subscription>:
 8015db0:	b318      	cbz	r0, 8015dfa <rcl_wait_set_add_subscription+0x4a>
 8015db2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8015db4:	b570      	push	{r4, r5, r6, lr}
 8015db6:	4604      	mov	r4, r0
 8015db8:	b30b      	cbz	r3, 8015dfe <rcl_wait_set_add_subscription+0x4e>
 8015dba:	b319      	cbz	r1, 8015e04 <rcl_wait_set_add_subscription+0x54>
 8015dbc:	681d      	ldr	r5, [r3, #0]
 8015dbe:	6840      	ldr	r0, [r0, #4]
 8015dc0:	4285      	cmp	r5, r0
 8015dc2:	d217      	bcs.n	8015df4 <rcl_wait_set_add_subscription+0x44>
 8015dc4:	6820      	ldr	r0, [r4, #0]
 8015dc6:	1c6e      	adds	r6, r5, #1
 8015dc8:	601e      	str	r6, [r3, #0]
 8015dca:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8015dce:	b102      	cbz	r2, 8015dd2 <rcl_wait_set_add_subscription+0x22>
 8015dd0:	6015      	str	r5, [r2, #0]
 8015dd2:	4608      	mov	r0, r1
 8015dd4:	f7ff fd70 	bl	80158b8 <rcl_subscription_get_rmw_handle>
 8015dd8:	b150      	cbz	r0, 8015df0 <rcl_wait_set_add_subscription+0x40>
 8015dda:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015ddc:	6842      	ldr	r2, [r0, #4]
 8015dde:	689b      	ldr	r3, [r3, #8]
 8015de0:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015de4:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8015de6:	6853      	ldr	r3, [r2, #4]
 8015de8:	3301      	adds	r3, #1
 8015dea:	2000      	movs	r0, #0
 8015dec:	6053      	str	r3, [r2, #4]
 8015dee:	bd70      	pop	{r4, r5, r6, pc}
 8015df0:	2001      	movs	r0, #1
 8015df2:	bd70      	pop	{r4, r5, r6, pc}
 8015df4:	f240 3086 	movw	r0, #902	@ 0x386
 8015df8:	bd70      	pop	{r4, r5, r6, pc}
 8015dfa:	200b      	movs	r0, #11
 8015dfc:	4770      	bx	lr
 8015dfe:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015e02:	bd70      	pop	{r4, r5, r6, pc}
 8015e04:	200b      	movs	r0, #11
 8015e06:	bd70      	pop	{r4, r5, r6, pc}

08015e08 <rcl_wait_set_clear>:
 8015e08:	2800      	cmp	r0, #0
 8015e0a:	d074      	beq.n	8015ef6 <rcl_wait_set_clear+0xee>
 8015e0c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8015e0e:	b510      	push	{r4, lr}
 8015e10:	4604      	mov	r4, r0
 8015e12:	2b00      	cmp	r3, #0
 8015e14:	d071      	beq.n	8015efa <rcl_wait_set_clear+0xf2>
 8015e16:	6800      	ldr	r0, [r0, #0]
 8015e18:	b138      	cbz	r0, 8015e2a <rcl_wait_set_clear+0x22>
 8015e1a:	6862      	ldr	r2, [r4, #4]
 8015e1c:	2100      	movs	r1, #0
 8015e1e:	0092      	lsls	r2, r2, #2
 8015e20:	f007 fb06 	bl	801d430 <memset>
 8015e24:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015e26:	2200      	movs	r2, #0
 8015e28:	601a      	str	r2, [r3, #0]
 8015e2a:	68a0      	ldr	r0, [r4, #8]
 8015e2c:	b138      	cbz	r0, 8015e3e <rcl_wait_set_clear+0x36>
 8015e2e:	68e2      	ldr	r2, [r4, #12]
 8015e30:	2100      	movs	r1, #0
 8015e32:	0092      	lsls	r2, r2, #2
 8015e34:	f007 fafc 	bl	801d430 <memset>
 8015e38:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015e3a:	2200      	movs	r2, #0
 8015e3c:	60da      	str	r2, [r3, #12]
 8015e3e:	69a0      	ldr	r0, [r4, #24]
 8015e40:	b138      	cbz	r0, 8015e52 <rcl_wait_set_clear+0x4a>
 8015e42:	69e2      	ldr	r2, [r4, #28]
 8015e44:	2100      	movs	r1, #0
 8015e46:	0092      	lsls	r2, r2, #2
 8015e48:	f007 faf2 	bl	801d430 <memset>
 8015e4c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015e4e:	2200      	movs	r2, #0
 8015e50:	619a      	str	r2, [r3, #24]
 8015e52:	6a20      	ldr	r0, [r4, #32]
 8015e54:	b138      	cbz	r0, 8015e66 <rcl_wait_set_clear+0x5e>
 8015e56:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8015e58:	2100      	movs	r1, #0
 8015e5a:	0092      	lsls	r2, r2, #2
 8015e5c:	f007 fae8 	bl	801d430 <memset>
 8015e60:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015e62:	2200      	movs	r2, #0
 8015e64:	625a      	str	r2, [r3, #36]	@ 0x24
 8015e66:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8015e68:	b138      	cbz	r0, 8015e7a <rcl_wait_set_clear+0x72>
 8015e6a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8015e6c:	2100      	movs	r1, #0
 8015e6e:	0092      	lsls	r2, r2, #2
 8015e70:	f007 fade 	bl	801d430 <memset>
 8015e74:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015e76:	2200      	movs	r2, #0
 8015e78:	631a      	str	r2, [r3, #48]	@ 0x30
 8015e7a:	6920      	ldr	r0, [r4, #16]
 8015e7c:	b138      	cbz	r0, 8015e8e <rcl_wait_set_clear+0x86>
 8015e7e:	6962      	ldr	r2, [r4, #20]
 8015e80:	2100      	movs	r1, #0
 8015e82:	0092      	lsls	r2, r2, #2
 8015e84:	f007 fad4 	bl	801d430 <memset>
 8015e88:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015e8a:	2200      	movs	r2, #0
 8015e8c:	641a      	str	r2, [r3, #64]	@ 0x40
 8015e8e:	6898      	ldr	r0, [r3, #8]
 8015e90:	b138      	cbz	r0, 8015ea2 <rcl_wait_set_clear+0x9a>
 8015e92:	685a      	ldr	r2, [r3, #4]
 8015e94:	2100      	movs	r1, #0
 8015e96:	0092      	lsls	r2, r2, #2
 8015e98:	f007 faca 	bl	801d430 <memset>
 8015e9c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015e9e:	2200      	movs	r2, #0
 8015ea0:	605a      	str	r2, [r3, #4]
 8015ea2:	6958      	ldr	r0, [r3, #20]
 8015ea4:	b138      	cbz	r0, 8015eb6 <rcl_wait_set_clear+0xae>
 8015ea6:	691a      	ldr	r2, [r3, #16]
 8015ea8:	2100      	movs	r1, #0
 8015eaa:	0092      	lsls	r2, r2, #2
 8015eac:	f007 fac0 	bl	801d430 <memset>
 8015eb0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015eb2:	2200      	movs	r2, #0
 8015eb4:	611a      	str	r2, [r3, #16]
 8015eb6:	6a18      	ldr	r0, [r3, #32]
 8015eb8:	b138      	cbz	r0, 8015eca <rcl_wait_set_clear+0xc2>
 8015eba:	69da      	ldr	r2, [r3, #28]
 8015ebc:	2100      	movs	r1, #0
 8015ebe:	0092      	lsls	r2, r2, #2
 8015ec0:	f007 fab6 	bl	801d430 <memset>
 8015ec4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015ec6:	2200      	movs	r2, #0
 8015ec8:	61da      	str	r2, [r3, #28]
 8015eca:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8015ecc:	b138      	cbz	r0, 8015ede <rcl_wait_set_clear+0xd6>
 8015ece:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8015ed0:	2100      	movs	r1, #0
 8015ed2:	0092      	lsls	r2, r2, #2
 8015ed4:	f007 faac 	bl	801d430 <memset>
 8015ed8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015eda:	2200      	movs	r2, #0
 8015edc:	629a      	str	r2, [r3, #40]	@ 0x28
 8015ede:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8015ee0:	b138      	cbz	r0, 8015ef2 <rcl_wait_set_clear+0xea>
 8015ee2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8015ee4:	2100      	movs	r1, #0
 8015ee6:	0092      	lsls	r2, r2, #2
 8015ee8:	f007 faa2 	bl	801d430 <memset>
 8015eec:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015eee:	2200      	movs	r2, #0
 8015ef0:	635a      	str	r2, [r3, #52]	@ 0x34
 8015ef2:	2000      	movs	r0, #0
 8015ef4:	bd10      	pop	{r4, pc}
 8015ef6:	200b      	movs	r0, #11
 8015ef8:	4770      	bx	lr
 8015efa:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015efe:	bd10      	pop	{r4, pc}

08015f00 <rcl_wait_set_resize>:
 8015f00:	2800      	cmp	r0, #0
 8015f02:	f000 81a1 	beq.w	8016248 <rcl_wait_set_resize+0x348>
 8015f06:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f0a:	f8d0 a030 	ldr.w	sl, [r0, #48]	@ 0x30
 8015f0e:	b083      	sub	sp, #12
 8015f10:	4604      	mov	r4, r0
 8015f12:	f1ba 0f00 	cmp.w	sl, #0
 8015f16:	f000 8199 	beq.w	801624c <rcl_wait_set_resize+0x34c>
 8015f1a:	f04f 0800 	mov.w	r8, #0
 8015f1e:	f8da 9058 	ldr.w	r9, [sl, #88]	@ 0x58
 8015f22:	461e      	mov	r6, r3
 8015f24:	460f      	mov	r7, r1
 8015f26:	e9da b313 	ldrd	fp, r3, [sl, #76]	@ 0x4c
 8015f2a:	4615      	mov	r5, r2
 8015f2c:	f8c0 8004 	str.w	r8, [r0, #4]
 8015f30:	6800      	ldr	r0, [r0, #0]
 8015f32:	f8ca 8000 	str.w	r8, [sl]
 8015f36:	2900      	cmp	r1, #0
 8015f38:	f000 80cf 	beq.w	80160da <rcl_wait_set_resize+0x1da>
 8015f3c:	ea4f 0a81 	mov.w	sl, r1, lsl #2
 8015f40:	464a      	mov	r2, r9
 8015f42:	4651      	mov	r1, sl
 8015f44:	9301      	str	r3, [sp, #4]
 8015f46:	4798      	blx	r3
 8015f48:	9b01      	ldr	r3, [sp, #4]
 8015f4a:	6020      	str	r0, [r4, #0]
 8015f4c:	2800      	cmp	r0, #0
 8015f4e:	f000 8109 	beq.w	8016164 <rcl_wait_set_resize+0x264>
 8015f52:	4652      	mov	r2, sl
 8015f54:	4641      	mov	r1, r8
 8015f56:	9301      	str	r3, [sp, #4]
 8015f58:	f007 fa6a 	bl	801d430 <memset>
 8015f5c:	6067      	str	r7, [r4, #4]
 8015f5e:	6b27      	ldr	r7, [r4, #48]	@ 0x30
 8015f60:	9b01      	ldr	r3, [sp, #4]
 8015f62:	68b8      	ldr	r0, [r7, #8]
 8015f64:	f8c7 8004 	str.w	r8, [r7, #4]
 8015f68:	464a      	mov	r2, r9
 8015f6a:	4651      	mov	r1, sl
 8015f6c:	4798      	blx	r3
 8015f6e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015f70:	60b8      	str	r0, [r7, #8]
 8015f72:	689f      	ldr	r7, [r3, #8]
 8015f74:	2f00      	cmp	r7, #0
 8015f76:	f000 80f0 	beq.w	801615a <rcl_wait_set_resize+0x25a>
 8015f7a:	4652      	mov	r2, sl
 8015f7c:	4641      	mov	r1, r8
 8015f7e:	4638      	mov	r0, r7
 8015f80:	f007 fa56 	bl	801d430 <memset>
 8015f84:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8015f88:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 8015f8c:	68a0      	ldr	r0, [r4, #8]
 8015f8e:	2700      	movs	r7, #0
 8015f90:	e9da 2313 	ldrd	r2, r3, [sl, #76]	@ 0x4c
 8015f94:	60e7      	str	r7, [r4, #12]
 8015f96:	f8ca 700c 	str.w	r7, [sl, #12]
 8015f9a:	2d00      	cmp	r5, #0
 8015f9c:	f040 80b0 	bne.w	8016100 <rcl_wait_set_resize+0x200>
 8015fa0:	b130      	cbz	r0, 8015fb0 <rcl_wait_set_resize+0xb0>
 8015fa2:	4641      	mov	r1, r8
 8015fa4:	4790      	blx	r2
 8015fa6:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8015faa:	60a5      	str	r5, [r4, #8]
 8015fac:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 8015fb0:	f8da 0014 	ldr.w	r0, [sl, #20]
 8015fb4:	2700      	movs	r7, #0
 8015fb6:	19ad      	adds	r5, r5, r6
 8015fb8:	f8ca 7010 	str.w	r7, [sl, #16]
 8015fbc:	f040 80b8 	bne.w	8016130 <rcl_wait_set_resize+0x230>
 8015fc0:	b148      	cbz	r0, 8015fd6 <rcl_wait_set_resize+0xd6>
 8015fc2:	f8da 304c 	ldr.w	r3, [sl, #76]	@ 0x4c
 8015fc6:	4641      	mov	r1, r8
 8015fc8:	4798      	blx	r3
 8015fca:	f8ca 5014 	str.w	r5, [sl, #20]
 8015fce:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8015fd2:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 8015fd6:	6920      	ldr	r0, [r4, #16]
 8015fd8:	2500      	movs	r5, #0
 8015fda:	e9da 9713 	ldrd	r9, r7, [sl, #76]	@ 0x4c
 8015fde:	6165      	str	r5, [r4, #20]
 8015fe0:	f8ca 5040 	str.w	r5, [sl, #64]	@ 0x40
 8015fe4:	2e00      	cmp	r6, #0
 8015fe6:	f040 80c1 	bne.w	801616c <rcl_wait_set_resize+0x26c>
 8015fea:	b140      	cbz	r0, 8015ffe <rcl_wait_set_resize+0xfe>
 8015fec:	4641      	mov	r1, r8
 8015fee:	47c8      	blx	r9
 8015ff0:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8015ff4:	6126      	str	r6, [r4, #16]
 8015ff6:	e9da 9713 	ldrd	r9, r7, [sl, #76]	@ 0x4c
 8015ffa:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 8015ffe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016000:	69a0      	ldr	r0, [r4, #24]
 8016002:	2500      	movs	r5, #0
 8016004:	61e5      	str	r5, [r4, #28]
 8016006:	f8ca 5018 	str.w	r5, [sl, #24]
 801600a:	2b00      	cmp	r3, #0
 801600c:	f040 80c2 	bne.w	8016194 <rcl_wait_set_resize+0x294>
 8016010:	b128      	cbz	r0, 801601e <rcl_wait_set_resize+0x11e>
 8016012:	4641      	mov	r1, r8
 8016014:	47c8      	blx	r9
 8016016:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016018:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 801601c:	61a3      	str	r3, [r4, #24]
 801601e:	f8da 0020 	ldr.w	r0, [sl, #32]
 8016022:	b130      	cbz	r0, 8016032 <rcl_wait_set_resize+0x132>
 8016024:	4641      	mov	r1, r8
 8016026:	47c8      	blx	r9
 8016028:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 801602c:	2300      	movs	r3, #0
 801602e:	e9ca 3307 	strd	r3, r3, [sl, #28]
 8016032:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8016034:	f8da 6058 	ldr.w	r6, [sl, #88]	@ 0x58
 8016038:	6a20      	ldr	r0, [r4, #32]
 801603a:	2500      	movs	r5, #0
 801603c:	e9da 7813 	ldrd	r7, r8, [sl, #76]	@ 0x4c
 8016040:	6265      	str	r5, [r4, #36]	@ 0x24
 8016042:	f8ca 5024 	str.w	r5, [sl, #36]	@ 0x24
 8016046:	2b00      	cmp	r3, #0
 8016048:	f000 80c8 	beq.w	80161dc <rcl_wait_set_resize+0x2dc>
 801604c:	ea4f 0983 	mov.w	r9, r3, lsl #2
 8016050:	4632      	mov	r2, r6
 8016052:	4649      	mov	r1, r9
 8016054:	47c0      	blx	r8
 8016056:	6220      	str	r0, [r4, #32]
 8016058:	2800      	cmp	r0, #0
 801605a:	f000 8083 	beq.w	8016164 <rcl_wait_set_resize+0x264>
 801605e:	464a      	mov	r2, r9
 8016060:	4629      	mov	r1, r5
 8016062:	f007 f9e5 	bl	801d430 <memset>
 8016066:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 801606a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801606c:	6263      	str	r3, [r4, #36]	@ 0x24
 801606e:	f8da 002c 	ldr.w	r0, [sl, #44]	@ 0x2c
 8016072:	f8ca 5028 	str.w	r5, [sl, #40]	@ 0x28
 8016076:	4632      	mov	r2, r6
 8016078:	4649      	mov	r1, r9
 801607a:	47c0      	blx	r8
 801607c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801607e:	f8ca 002c 	str.w	r0, [sl, #44]	@ 0x2c
 8016082:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016084:	2b00      	cmp	r3, #0
 8016086:	f000 80fb 	beq.w	8016280 <rcl_wait_set_resize+0x380>
 801608a:	464a      	mov	r2, r9
 801608c:	4629      	mov	r1, r5
 801608e:	4618      	mov	r0, r3
 8016090:	f007 f9ce 	bl	801d430 <memset>
 8016094:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8016098:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801609a:	f8da 6058 	ldr.w	r6, [sl, #88]	@ 0x58
 801609e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80160a0:	2500      	movs	r5, #0
 80160a2:	e9da 7813 	ldrd	r7, r8, [sl, #76]	@ 0x4c
 80160a6:	62e5      	str	r5, [r4, #44]	@ 0x2c
 80160a8:	f8ca 5030 	str.w	r5, [sl, #48]	@ 0x30
 80160ac:	2b00      	cmp	r3, #0
 80160ae:	f040 80a9 	bne.w	8016204 <rcl_wait_set_resize+0x304>
 80160b2:	b128      	cbz	r0, 80160c0 <rcl_wait_set_resize+0x1c0>
 80160b4:	4631      	mov	r1, r6
 80160b6:	47b8      	blx	r7
 80160b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80160ba:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 80160be:	62a3      	str	r3, [r4, #40]	@ 0x28
 80160c0:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 80160c4:	b128      	cbz	r0, 80160d2 <rcl_wait_set_resize+0x1d2>
 80160c6:	4631      	mov	r1, r6
 80160c8:	47b8      	blx	r7
 80160ca:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80160cc:	2200      	movs	r2, #0
 80160ce:	e9c3 220d 	strd	r2, r2, [r3, #52]	@ 0x34
 80160d2:	2000      	movs	r0, #0
 80160d4:	b003      	add	sp, #12
 80160d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80160da:	b120      	cbz	r0, 80160e6 <rcl_wait_set_resize+0x1e6>
 80160dc:	4649      	mov	r1, r9
 80160de:	47d8      	blx	fp
 80160e0:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 80160e4:	6027      	str	r7, [r4, #0]
 80160e6:	f8da 0008 	ldr.w	r0, [sl, #8]
 80160ea:	2800      	cmp	r0, #0
 80160ec:	f43f af4c 	beq.w	8015f88 <rcl_wait_set_resize+0x88>
 80160f0:	4649      	mov	r1, r9
 80160f2:	47d8      	blx	fp
 80160f4:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 80160f8:	2300      	movs	r3, #0
 80160fa:	e9ca 3301 	strd	r3, r3, [sl, #4]
 80160fe:	e743      	b.n	8015f88 <rcl_wait_set_resize+0x88>
 8016100:	4642      	mov	r2, r8
 8016102:	ea4f 0885 	mov.w	r8, r5, lsl #2
 8016106:	4641      	mov	r1, r8
 8016108:	4798      	blx	r3
 801610a:	60a0      	str	r0, [r4, #8]
 801610c:	b350      	cbz	r0, 8016164 <rcl_wait_set_resize+0x264>
 801610e:	4642      	mov	r2, r8
 8016110:	4639      	mov	r1, r7
 8016112:	f007 f98d 	bl	801d430 <memset>
 8016116:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 801611a:	60e5      	str	r5, [r4, #12]
 801611c:	2700      	movs	r7, #0
 801611e:	19ad      	adds	r5, r5, r6
 8016120:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 8016124:	f8da 0014 	ldr.w	r0, [sl, #20]
 8016128:	f8ca 7010 	str.w	r7, [sl, #16]
 801612c:	f43f af48 	beq.w	8015fc0 <rcl_wait_set_resize+0xc0>
 8016130:	00ad      	lsls	r5, r5, #2
 8016132:	4642      	mov	r2, r8
 8016134:	f8da 3050 	ldr.w	r3, [sl, #80]	@ 0x50
 8016138:	4629      	mov	r1, r5
 801613a:	4798      	blx	r3
 801613c:	4680      	mov	r8, r0
 801613e:	f8ca 0014 	str.w	r0, [sl, #20]
 8016142:	2800      	cmp	r0, #0
 8016144:	f000 8085 	beq.w	8016252 <rcl_wait_set_resize+0x352>
 8016148:	462a      	mov	r2, r5
 801614a:	4639      	mov	r1, r7
 801614c:	f007 f970 	bl	801d430 <memset>
 8016150:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8016154:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 8016158:	e73d      	b.n	8015fd6 <rcl_wait_set_resize+0xd6>
 801615a:	6820      	ldr	r0, [r4, #0]
 801615c:	4649      	mov	r1, r9
 801615e:	47d8      	blx	fp
 8016160:	e9c4 7700 	strd	r7, r7, [r4]
 8016164:	200a      	movs	r0, #10
 8016166:	b003      	add	sp, #12
 8016168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801616c:	4642      	mov	r2, r8
 801616e:	ea4f 0886 	mov.w	r8, r6, lsl #2
 8016172:	4641      	mov	r1, r8
 8016174:	47b8      	blx	r7
 8016176:	6120      	str	r0, [r4, #16]
 8016178:	2800      	cmp	r0, #0
 801617a:	d0f3      	beq.n	8016164 <rcl_wait_set_resize+0x264>
 801617c:	4642      	mov	r2, r8
 801617e:	4629      	mov	r1, r5
 8016180:	f007 f956 	bl	801d430 <memset>
 8016184:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8016188:	6166      	str	r6, [r4, #20]
 801618a:	e9da 9713 	ldrd	r9, r7, [sl, #76]	@ 0x4c
 801618e:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 8016192:	e734      	b.n	8015ffe <rcl_wait_set_resize+0xfe>
 8016194:	009e      	lsls	r6, r3, #2
 8016196:	4642      	mov	r2, r8
 8016198:	4631      	mov	r1, r6
 801619a:	47b8      	blx	r7
 801619c:	61a0      	str	r0, [r4, #24]
 801619e:	2800      	cmp	r0, #0
 80161a0:	d0e0      	beq.n	8016164 <rcl_wait_set_resize+0x264>
 80161a2:	4632      	mov	r2, r6
 80161a4:	4629      	mov	r1, r5
 80161a6:	f007 f943 	bl	801d430 <memset>
 80161aa:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 80161ae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80161b0:	61e3      	str	r3, [r4, #28]
 80161b2:	f8da 0020 	ldr.w	r0, [sl, #32]
 80161b6:	f8ca 501c 	str.w	r5, [sl, #28]
 80161ba:	4642      	mov	r2, r8
 80161bc:	4631      	mov	r1, r6
 80161be:	47b8      	blx	r7
 80161c0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80161c2:	f8ca 0020 	str.w	r0, [sl, #32]
 80161c6:	6a1f      	ldr	r7, [r3, #32]
 80161c8:	2f00      	cmp	r7, #0
 80161ca:	d053      	beq.n	8016274 <rcl_wait_set_resize+0x374>
 80161cc:	4632      	mov	r2, r6
 80161ce:	4629      	mov	r1, r5
 80161d0:	4638      	mov	r0, r7
 80161d2:	f007 f92d 	bl	801d430 <memset>
 80161d6:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 80161da:	e72a      	b.n	8016032 <rcl_wait_set_resize+0x132>
 80161dc:	b128      	cbz	r0, 80161ea <rcl_wait_set_resize+0x2ea>
 80161de:	4631      	mov	r1, r6
 80161e0:	47b8      	blx	r7
 80161e2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80161e4:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 80161e8:	6223      	str	r3, [r4, #32]
 80161ea:	f8da 002c 	ldr.w	r0, [sl, #44]	@ 0x2c
 80161ee:	2800      	cmp	r0, #0
 80161f0:	f43f af52 	beq.w	8016098 <rcl_wait_set_resize+0x198>
 80161f4:	4631      	mov	r1, r6
 80161f6:	47b8      	blx	r7
 80161f8:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 80161fc:	2300      	movs	r3, #0
 80161fe:	e9ca 330a 	strd	r3, r3, [sl, #40]	@ 0x28
 8016202:	e749      	b.n	8016098 <rcl_wait_set_resize+0x198>
 8016204:	ea4f 0983 	mov.w	r9, r3, lsl #2
 8016208:	4632      	mov	r2, r6
 801620a:	4649      	mov	r1, r9
 801620c:	47c0      	blx	r8
 801620e:	62a0      	str	r0, [r4, #40]	@ 0x28
 8016210:	2800      	cmp	r0, #0
 8016212:	d0a7      	beq.n	8016164 <rcl_wait_set_resize+0x264>
 8016214:	464a      	mov	r2, r9
 8016216:	4629      	mov	r1, r5
 8016218:	f007 f90a 	bl	801d430 <memset>
 801621c:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8016220:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016222:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8016224:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 8016228:	f8ca 5034 	str.w	r5, [sl, #52]	@ 0x34
 801622c:	4632      	mov	r2, r6
 801622e:	4649      	mov	r1, r9
 8016230:	47c0      	blx	r8
 8016232:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016234:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 8016238:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801623a:	b34b      	cbz	r3, 8016290 <rcl_wait_set_resize+0x390>
 801623c:	464a      	mov	r2, r9
 801623e:	4629      	mov	r1, r5
 8016240:	4618      	mov	r0, r3
 8016242:	f007 f8f5 	bl	801d430 <memset>
 8016246:	e744      	b.n	80160d2 <rcl_wait_set_resize+0x1d2>
 8016248:	200b      	movs	r0, #11
 801624a:	4770      	bx	lr
 801624c:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8016250:	e789      	b.n	8016166 <rcl_wait_set_resize+0x266>
 8016252:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016254:	68a0      	ldr	r0, [r4, #8]
 8016256:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8016258:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 801625a:	4790      	blx	r2
 801625c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801625e:	6920      	ldr	r0, [r4, #16]
 8016260:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8016262:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8016264:	f8c4 800c 	str.w	r8, [r4, #12]
 8016268:	f8c4 8008 	str.w	r8, [r4, #8]
 801626c:	4790      	blx	r2
 801626e:	e9c4 8804 	strd	r8, r8, [r4, #16]
 8016272:	e777      	b.n	8016164 <rcl_wait_set_resize+0x264>
 8016274:	69a0      	ldr	r0, [r4, #24]
 8016276:	4641      	mov	r1, r8
 8016278:	47c8      	blx	r9
 801627a:	e9c4 7706 	strd	r7, r7, [r4, #24]
 801627e:	e771      	b.n	8016164 <rcl_wait_set_resize+0x264>
 8016280:	6a20      	ldr	r0, [r4, #32]
 8016282:	9301      	str	r3, [sp, #4]
 8016284:	4631      	mov	r1, r6
 8016286:	47b8      	blx	r7
 8016288:	9b01      	ldr	r3, [sp, #4]
 801628a:	e9c4 3308 	strd	r3, r3, [r4, #32]
 801628e:	e769      	b.n	8016164 <rcl_wait_set_resize+0x264>
 8016290:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8016292:	9301      	str	r3, [sp, #4]
 8016294:	4631      	mov	r1, r6
 8016296:	47b8      	blx	r7
 8016298:	9b01      	ldr	r3, [sp, #4]
 801629a:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 801629e:	e761      	b.n	8016164 <rcl_wait_set_resize+0x264>

080162a0 <rcl_wait_set_init>:
 80162a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80162a4:	b084      	sub	sp, #16
 80162a6:	4604      	mov	r4, r0
 80162a8:	a810      	add	r0, sp, #64	@ 0x40
 80162aa:	460d      	mov	r5, r1
 80162ac:	4690      	mov	r8, r2
 80162ae:	461f      	mov	r7, r3
 80162b0:	f7f6 ffa4 	bl	800d1fc <rcutils_allocator_is_valid>
 80162b4:	2800      	cmp	r0, #0
 80162b6:	d06c      	beq.n	8016392 <rcl_wait_set_init+0xf2>
 80162b8:	2c00      	cmp	r4, #0
 80162ba:	d06a      	beq.n	8016392 <rcl_wait_set_init+0xf2>
 80162bc:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 80162be:	b126      	cbz	r6, 80162ca <rcl_wait_set_init+0x2a>
 80162c0:	2564      	movs	r5, #100	@ 0x64
 80162c2:	4628      	mov	r0, r5
 80162c4:	b004      	add	sp, #16
 80162c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80162ca:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80162cc:	2b00      	cmp	r3, #0
 80162ce:	d060      	beq.n	8016392 <rcl_wait_set_init+0xf2>
 80162d0:	4618      	mov	r0, r3
 80162d2:	f7fe fab7 	bl	8014844 <rcl_context_is_valid>
 80162d6:	2800      	cmp	r0, #0
 80162d8:	d060      	beq.n	801639c <rcl_wait_set_init+0xfc>
 80162da:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80162dc:	9914      	ldr	r1, [sp, #80]	@ 0x50
 80162de:	205c      	movs	r0, #92	@ 0x5c
 80162e0:	4798      	blx	r3
 80162e2:	6320      	str	r0, [r4, #48]	@ 0x30
 80162e4:	2800      	cmp	r0, #0
 80162e6:	d063      	beq.n	80163b0 <rcl_wait_set_init+0x110>
 80162e8:	4631      	mov	r1, r6
 80162ea:	225c      	movs	r2, #92	@ 0x5c
 80162ec:	f007 f8a0 	bl	801d430 <memset>
 80162f0:	f8d4 9030 	ldr.w	r9, [r4, #48]	@ 0x30
 80162f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80162f6:	f8c9 3044 	str.w	r3, [r9, #68]	@ 0x44
 80162fa:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
 80162fe:	eb03 0e02 	add.w	lr, r3, r2
 8016302:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016304:	449e      	add	lr, r3
 8016306:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016308:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 801630c:	f8d3 a000 	ldr.w	sl, [r3]
 8016310:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8016314:	e9c9 6601 	strd	r6, r6, [r9, #4]
 8016318:	e9c9 6604 	strd	r6, r6, [r9, #16]
 801631c:	e9c9 6607 	strd	r6, r6, [r9, #28]
 8016320:	e9c9 660a 	strd	r6, r6, [r9, #40]	@ 0x28
 8016324:	e9c9 660d 	strd	r6, r6, [r9, #52]	@ 0x34
 8016328:	f109 0648 	add.w	r6, r9, #72	@ 0x48
 801632c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801632e:	44c6      	add	lr, r8
 8016330:	f8dc 3000 	ldr.w	r3, [ip]
 8016334:	6033      	str	r3, [r6, #0]
 8016336:	eb0e 0145 	add.w	r1, lr, r5, lsl #1
 801633a:	f10a 0028 	add.w	r0, sl, #40	@ 0x28
 801633e:	f002 ffd5 	bl	80192ec <rmw_create_wait_set>
 8016342:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016344:	f8c9 003c 	str.w	r0, [r9, #60]	@ 0x3c
 8016348:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 801634a:	b348      	cbz	r0, 80163a0 <rcl_wait_set_init+0x100>
 801634c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801634e:	9302      	str	r3, [sp, #8]
 8016350:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8016352:	9301      	str	r3, [sp, #4]
 8016354:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016356:	9300      	str	r3, [sp, #0]
 8016358:	4629      	mov	r1, r5
 801635a:	463b      	mov	r3, r7
 801635c:	4642      	mov	r2, r8
 801635e:	4620      	mov	r0, r4
 8016360:	f7ff fdce 	bl	8015f00 <rcl_wait_set_resize>
 8016364:	4605      	mov	r5, r0
 8016366:	2800      	cmp	r0, #0
 8016368:	d0ab      	beq.n	80162c2 <rcl_wait_set_init+0x22>
 801636a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801636c:	bb13      	cbnz	r3, 80163b4 <rcl_wait_set_init+0x114>
 801636e:	2600      	movs	r6, #0
 8016370:	e9cd 6601 	strd	r6, r6, [sp, #4]
 8016374:	9600      	str	r6, [sp, #0]
 8016376:	4633      	mov	r3, r6
 8016378:	4632      	mov	r2, r6
 801637a:	4631      	mov	r1, r6
 801637c:	4620      	mov	r0, r4
 801637e:	f7ff fdbf 	bl	8015f00 <rcl_wait_set_resize>
 8016382:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8016384:	2800      	cmp	r0, #0
 8016386:	d09c      	beq.n	80162c2 <rcl_wait_set_init+0x22>
 8016388:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 801638a:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 801638c:	4798      	blx	r3
 801638e:	6326      	str	r6, [r4, #48]	@ 0x30
 8016390:	e797      	b.n	80162c2 <rcl_wait_set_init+0x22>
 8016392:	250b      	movs	r5, #11
 8016394:	4628      	mov	r0, r5
 8016396:	b004      	add	sp, #16
 8016398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801639c:	2565      	movs	r5, #101	@ 0x65
 801639e:	e790      	b.n	80162c2 <rcl_wait_set_init+0x22>
 80163a0:	2501      	movs	r5, #1
 80163a2:	f002 ffad 	bl	8019300 <rmw_destroy_wait_set>
 80163a6:	2800      	cmp	r0, #0
 80163a8:	bf18      	it	ne
 80163aa:	f44f 7561 	movne.w	r5, #900	@ 0x384
 80163ae:	e7de      	b.n	801636e <rcl_wait_set_init+0xce>
 80163b0:	250a      	movs	r5, #10
 80163b2:	e786      	b.n	80162c2 <rcl_wait_set_init+0x22>
 80163b4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80163b6:	e7f4      	b.n	80163a2 <rcl_wait_set_init+0x102>

080163b8 <rcl_wait_set_add_guard_condition>:
 80163b8:	b318      	cbz	r0, 8016402 <rcl_wait_set_add_guard_condition+0x4a>
 80163ba:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80163bc:	b570      	push	{r4, r5, r6, lr}
 80163be:	4604      	mov	r4, r0
 80163c0:	b30b      	cbz	r3, 8016406 <rcl_wait_set_add_guard_condition+0x4e>
 80163c2:	b319      	cbz	r1, 801640c <rcl_wait_set_add_guard_condition+0x54>
 80163c4:	68dd      	ldr	r5, [r3, #12]
 80163c6:	68c0      	ldr	r0, [r0, #12]
 80163c8:	4285      	cmp	r5, r0
 80163ca:	d217      	bcs.n	80163fc <rcl_wait_set_add_guard_condition+0x44>
 80163cc:	68a0      	ldr	r0, [r4, #8]
 80163ce:	1c6e      	adds	r6, r5, #1
 80163d0:	60de      	str	r6, [r3, #12]
 80163d2:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80163d6:	b102      	cbz	r2, 80163da <rcl_wait_set_add_guard_condition+0x22>
 80163d8:	6015      	str	r5, [r2, #0]
 80163da:	4608      	mov	r0, r1
 80163dc:	f005 fc44 	bl	801bc68 <rcl_guard_condition_get_rmw_handle>
 80163e0:	b150      	cbz	r0, 80163f8 <rcl_wait_set_add_guard_condition+0x40>
 80163e2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80163e4:	6842      	ldr	r2, [r0, #4]
 80163e6:	695b      	ldr	r3, [r3, #20]
 80163e8:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80163ec:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80163ee:	6913      	ldr	r3, [r2, #16]
 80163f0:	3301      	adds	r3, #1
 80163f2:	2000      	movs	r0, #0
 80163f4:	6113      	str	r3, [r2, #16]
 80163f6:	bd70      	pop	{r4, r5, r6, pc}
 80163f8:	2001      	movs	r0, #1
 80163fa:	bd70      	pop	{r4, r5, r6, pc}
 80163fc:	f240 3086 	movw	r0, #902	@ 0x386
 8016400:	bd70      	pop	{r4, r5, r6, pc}
 8016402:	200b      	movs	r0, #11
 8016404:	4770      	bx	lr
 8016406:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801640a:	bd70      	pop	{r4, r5, r6, pc}
 801640c:	200b      	movs	r0, #11
 801640e:	bd70      	pop	{r4, r5, r6, pc}

08016410 <rcl_wait_set_add_timer>:
 8016410:	b328      	cbz	r0, 801645e <rcl_wait_set_add_timer+0x4e>
 8016412:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8016414:	b570      	push	{r4, r5, r6, lr}
 8016416:	4604      	mov	r4, r0
 8016418:	b31b      	cbz	r3, 8016462 <rcl_wait_set_add_timer+0x52>
 801641a:	b329      	cbz	r1, 8016468 <rcl_wait_set_add_timer+0x58>
 801641c:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 801641e:	6965      	ldr	r5, [r4, #20]
 8016420:	42a8      	cmp	r0, r5
 8016422:	d219      	bcs.n	8016458 <rcl_wait_set_add_timer+0x48>
 8016424:	6925      	ldr	r5, [r4, #16]
 8016426:	1c46      	adds	r6, r0, #1
 8016428:	641e      	str	r6, [r3, #64]	@ 0x40
 801642a:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 801642e:	b102      	cbz	r2, 8016432 <rcl_wait_set_add_timer+0x22>
 8016430:	6010      	str	r0, [r2, #0]
 8016432:	4608      	mov	r0, r1
 8016434:	f7ff fbf4 	bl	8015c20 <rcl_timer_get_guard_condition>
 8016438:	b160      	cbz	r0, 8016454 <rcl_wait_set_add_timer+0x44>
 801643a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801643c:	68e3      	ldr	r3, [r4, #12]
 801643e:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 8016440:	3b01      	subs	r3, #1
 8016442:	441d      	add	r5, r3
 8016444:	f005 fc10 	bl	801bc68 <rcl_guard_condition_get_rmw_handle>
 8016448:	b180      	cbz	r0, 801646c <rcl_wait_set_add_timer+0x5c>
 801644a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801644c:	6842      	ldr	r2, [r0, #4]
 801644e:	695b      	ldr	r3, [r3, #20]
 8016450:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8016454:	2000      	movs	r0, #0
 8016456:	bd70      	pop	{r4, r5, r6, pc}
 8016458:	f240 3086 	movw	r0, #902	@ 0x386
 801645c:	bd70      	pop	{r4, r5, r6, pc}
 801645e:	200b      	movs	r0, #11
 8016460:	4770      	bx	lr
 8016462:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8016466:	bd70      	pop	{r4, r5, r6, pc}
 8016468:	200b      	movs	r0, #11
 801646a:	bd70      	pop	{r4, r5, r6, pc}
 801646c:	2001      	movs	r0, #1
 801646e:	bd70      	pop	{r4, r5, r6, pc}

08016470 <rcl_wait_set_add_client>:
 8016470:	b318      	cbz	r0, 80164ba <rcl_wait_set_add_client+0x4a>
 8016472:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8016474:	b570      	push	{r4, r5, r6, lr}
 8016476:	4604      	mov	r4, r0
 8016478:	b30b      	cbz	r3, 80164be <rcl_wait_set_add_client+0x4e>
 801647a:	b319      	cbz	r1, 80164c4 <rcl_wait_set_add_client+0x54>
 801647c:	699d      	ldr	r5, [r3, #24]
 801647e:	69c0      	ldr	r0, [r0, #28]
 8016480:	4285      	cmp	r5, r0
 8016482:	d217      	bcs.n	80164b4 <rcl_wait_set_add_client+0x44>
 8016484:	69a0      	ldr	r0, [r4, #24]
 8016486:	1c6e      	adds	r6, r5, #1
 8016488:	619e      	str	r6, [r3, #24]
 801648a:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 801648e:	b102      	cbz	r2, 8016492 <rcl_wait_set_add_client+0x22>
 8016490:	6015      	str	r5, [r2, #0]
 8016492:	4608      	mov	r0, r1
 8016494:	f7fe f8e8 	bl	8014668 <rcl_client_get_rmw_handle>
 8016498:	b150      	cbz	r0, 80164b0 <rcl_wait_set_add_client+0x40>
 801649a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801649c:	6842      	ldr	r2, [r0, #4]
 801649e:	6a1b      	ldr	r3, [r3, #32]
 80164a0:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80164a4:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80164a6:	69d3      	ldr	r3, [r2, #28]
 80164a8:	3301      	adds	r3, #1
 80164aa:	2000      	movs	r0, #0
 80164ac:	61d3      	str	r3, [r2, #28]
 80164ae:	bd70      	pop	{r4, r5, r6, pc}
 80164b0:	2001      	movs	r0, #1
 80164b2:	bd70      	pop	{r4, r5, r6, pc}
 80164b4:	f240 3086 	movw	r0, #902	@ 0x386
 80164b8:	bd70      	pop	{r4, r5, r6, pc}
 80164ba:	200b      	movs	r0, #11
 80164bc:	4770      	bx	lr
 80164be:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80164c2:	bd70      	pop	{r4, r5, r6, pc}
 80164c4:	200b      	movs	r0, #11
 80164c6:	bd70      	pop	{r4, r5, r6, pc}

080164c8 <rcl_wait_set_add_service>:
 80164c8:	b318      	cbz	r0, 8016512 <rcl_wait_set_add_service+0x4a>
 80164ca:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80164cc:	b570      	push	{r4, r5, r6, lr}
 80164ce:	4604      	mov	r4, r0
 80164d0:	b30b      	cbz	r3, 8016516 <rcl_wait_set_add_service+0x4e>
 80164d2:	b319      	cbz	r1, 801651c <rcl_wait_set_add_service+0x54>
 80164d4:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 80164d6:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 80164d8:	4285      	cmp	r5, r0
 80164da:	d217      	bcs.n	801650c <rcl_wait_set_add_service+0x44>
 80164dc:	6a20      	ldr	r0, [r4, #32]
 80164de:	1c6e      	adds	r6, r5, #1
 80164e0:	625e      	str	r6, [r3, #36]	@ 0x24
 80164e2:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80164e6:	b102      	cbz	r2, 80164ea <rcl_wait_set_add_service+0x22>
 80164e8:	6015      	str	r5, [r2, #0]
 80164ea:	4608      	mov	r0, r1
 80164ec:	f7fe ff98 	bl	8015420 <rcl_service_get_rmw_handle>
 80164f0:	b150      	cbz	r0, 8016508 <rcl_wait_set_add_service+0x40>
 80164f2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80164f4:	6842      	ldr	r2, [r0, #4]
 80164f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80164f8:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80164fc:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80164fe:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8016500:	3301      	adds	r3, #1
 8016502:	2000      	movs	r0, #0
 8016504:	6293      	str	r3, [r2, #40]	@ 0x28
 8016506:	bd70      	pop	{r4, r5, r6, pc}
 8016508:	2001      	movs	r0, #1
 801650a:	bd70      	pop	{r4, r5, r6, pc}
 801650c:	f240 3086 	movw	r0, #902	@ 0x386
 8016510:	bd70      	pop	{r4, r5, r6, pc}
 8016512:	200b      	movs	r0, #11
 8016514:	4770      	bx	lr
 8016516:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801651a:	bd70      	pop	{r4, r5, r6, pc}
 801651c:	200b      	movs	r0, #11
 801651e:	bd70      	pop	{r4, r5, r6, pc}

08016520 <rcl_wait>:
 8016520:	2800      	cmp	r0, #0
 8016522:	f000 81d4 	beq.w	80168ce <rcl_wait+0x3ae>
 8016526:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801652a:	ed2d 8b02 	vpush	{d8}
 801652e:	6b05      	ldr	r5, [r0, #48]	@ 0x30
 8016530:	b099      	sub	sp, #100	@ 0x64
 8016532:	4604      	mov	r4, r0
 8016534:	2d00      	cmp	r5, #0
 8016536:	f000 8178 	beq.w	801682a <rcl_wait+0x30a>
 801653a:	461f      	mov	r7, r3
 801653c:	6843      	ldr	r3, [r0, #4]
 801653e:	4690      	mov	r8, r2
 8016540:	2b00      	cmp	r3, #0
 8016542:	f000 809b 	beq.w	801667c <rcl_wait+0x15c>
 8016546:	6c2e      	ldr	r6, [r5, #64]	@ 0x40
 8016548:	2e00      	cmp	r6, #0
 801654a:	f000 80b2 	beq.w	80166b2 <rcl_wait+0x192>
 801654e:	2100      	movs	r1, #0
 8016550:	468c      	mov	ip, r1
 8016552:	460a      	mov	r2, r1
 8016554:	46a6      	mov	lr, r4
 8016556:	f8de 3010 	ldr.w	r3, [lr, #16]
 801655a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801655e:	b173      	cbz	r3, 801657e <rcl_wait+0x5e>
 8016560:	f8de 300c 	ldr.w	r3, [lr, #12]
 8016564:	6968      	ldr	r0, [r5, #20]
 8016566:	440b      	add	r3, r1
 8016568:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
 801656c:	b13c      	cbz	r4, 801657e <rcl_wait+0x5e>
 801656e:	692b      	ldr	r3, [r5, #16]
 8016570:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
 8016574:	3301      	adds	r3, #1
 8016576:	612b      	str	r3, [r5, #16]
 8016578:	f8de 5030 	ldr.w	r5, [lr, #48]	@ 0x30
 801657c:	6c2e      	ldr	r6, [r5, #64]	@ 0x40
 801657e:	3101      	adds	r1, #1
 8016580:	f14c 0c00 	adc.w	ip, ip, #0
 8016584:	42b1      	cmp	r1, r6
 8016586:	f17c 0300 	sbcs.w	r3, ip, #0
 801658a:	d3e4      	bcc.n	8016556 <rcl_wait+0x36>
 801658c:	ed9f 8baa 	vldr	d8, [pc, #680]	@ 8016838 <rcl_wait+0x318>
 8016590:	ea58 0307 	orrs.w	r3, r8, r7
 8016594:	e9cd 220c 	strd	r2, r2, [sp, #48]	@ 0x30
 8016598:	e9cd 220e 	strd	r2, r2, [sp, #56]	@ 0x38
 801659c:	ed8d 8b12 	vstr	d8, [sp, #72]	@ 0x48
 80165a0:	ed8d 8b14 	vstr	d8, [sp, #80]	@ 0x50
 80165a4:	ed8d 8b16 	vstr	d8, [sp, #88]	@ 0x58
 80165a8:	4674      	mov	r4, lr
 80165aa:	f10d 0a30 	add.w	sl, sp, #48	@ 0x30
 80165ae:	f000 8094 	beq.w	80166da <rcl_wait+0x1ba>
 80165b2:	2e00      	cmp	r6, #0
 80165b4:	f000 8145 	beq.w	8016842 <rcl_wait+0x322>
 80165b8:	2500      	movs	r5, #0
 80165ba:	46bb      	mov	fp, r7
 80165bc:	e02c      	b.n	8016618 <rcl_wait+0xf8>
 80165be:	6923      	ldr	r3, [r4, #16]
 80165c0:	f853 0009 	ldr.w	r0, [r3, r9]
 80165c4:	a908      	add	r1, sp, #32
 80165c6:	ed8d 8b08 	vstr	d8, [sp, #32]
 80165ca:	f7ff fb07 	bl	8015bdc <rcl_timer_get_next_call_time>
 80165ce:	f240 3321 	movw	r3, #801	@ 0x321
 80165d2:	4298      	cmp	r0, r3
 80165d4:	f000 80bb 	beq.w	801674e <rcl_wait+0x22e>
 80165d8:	2800      	cmp	r0, #0
 80165da:	d165      	bne.n	80166a8 <rcl_wait+0x188>
 80165dc:	e9dd 6707 	ldrd	r6, r7, [sp, #28]
 80165e0:	7830      	ldrb	r0, [r6, #0]
 80165e2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80165e4:	ab18      	add	r3, sp, #96	@ 0x60
 80165e6:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 80165ea:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 80165ee:	9205      	str	r2, [sp, #20]
 80165f0:	f853 2c20 	ldr.w	r2, [r3, #-32]
 80165f4:	4297      	cmp	r7, r2
 80165f6:	9a05      	ldr	r2, [sp, #20]
 80165f8:	eb71 0202 	sbcs.w	r2, r1, r2
 80165fc:	da06      	bge.n	801660c <rcl_wait+0xec>
 80165fe:	e943 7108 	strd	r7, r1, [r3, #-32]
 8016602:	ab18      	add	r3, sp, #96	@ 0x60
 8016604:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8016608:	f840 6c30 	str.w	r6, [r0, #-48]
 801660c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801660e:	6c1e      	ldr	r6, [r3, #64]	@ 0x40
 8016610:	3501      	adds	r5, #1
 8016612:	42b5      	cmp	r5, r6
 8016614:	f080 8114 	bcs.w	8016840 <rcl_wait+0x320>
 8016618:	6923      	ldr	r3, [r4, #16]
 801661a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801661e:	ea4f 0985 	mov.w	r9, r5, lsl #2
 8016622:	2800      	cmp	r0, #0
 8016624:	d0f4      	beq.n	8016610 <rcl_wait+0xf0>
 8016626:	a907      	add	r1, sp, #28
 8016628:	f7ff fa04 	bl	8015a34 <rcl_timer_clock>
 801662c:	4603      	mov	r3, r0
 801662e:	2800      	cmp	r0, #0
 8016630:	f040 8141 	bne.w	80168b6 <rcl_wait+0x396>
 8016634:	9807      	ldr	r0, [sp, #28]
 8016636:	7802      	ldrb	r2, [r0, #0]
 8016638:	2a01      	cmp	r2, #1
 801663a:	d1c0      	bne.n	80165be <rcl_wait+0x9e>
 801663c:	f10d 011b 	add.w	r1, sp, #27
 8016640:	f88d 301b 	strb.w	r3, [sp, #27]
 8016644:	f7ff f9e6 	bl	8015a14 <rcl_is_enabled_ros_time_override>
 8016648:	4602      	mov	r2, r0
 801664a:	2800      	cmp	r0, #0
 801664c:	f040 8133 	bne.w	80168b6 <rcl_wait+0x396>
 8016650:	6923      	ldr	r3, [r4, #16]
 8016652:	f89d 101b 	ldrb.w	r1, [sp, #27]
 8016656:	f853 0009 	ldr.w	r0, [r3, r9]
 801665a:	2900      	cmp	r1, #0
 801665c:	d0b0      	beq.n	80165c0 <rcl_wait+0xa0>
 801665e:	ae08      	add	r6, sp, #32
 8016660:	4631      	mov	r1, r6
 8016662:	f88d 2020 	strb.w	r2, [sp, #32]
 8016666:	f7ff fa7f 	bl	8015b68 <rcl_timer_is_ready>
 801666a:	2800      	cmp	r0, #0
 801666c:	f040 8123 	bne.w	80168b6 <rcl_wait+0x396>
 8016670:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8016674:	2b00      	cmp	r3, #0
 8016676:	d0c9      	beq.n	801660c <rcl_wait+0xec>
 8016678:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801667a:	e02f      	b.n	80166dc <rcl_wait+0x1bc>
 801667c:	68c3      	ldr	r3, [r0, #12]
 801667e:	2b00      	cmp	r3, #0
 8016680:	f47f af61 	bne.w	8016546 <rcl_wait+0x26>
 8016684:	6943      	ldr	r3, [r0, #20]
 8016686:	2b00      	cmp	r3, #0
 8016688:	f47f af5d 	bne.w	8016546 <rcl_wait+0x26>
 801668c:	69c3      	ldr	r3, [r0, #28]
 801668e:	2b00      	cmp	r3, #0
 8016690:	f47f af59 	bne.w	8016546 <rcl_wait+0x26>
 8016694:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8016696:	2b00      	cmp	r3, #0
 8016698:	f47f af55 	bne.w	8016546 <rcl_wait+0x26>
 801669c:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 801669e:	2b00      	cmp	r3, #0
 80166a0:	f47f af51 	bne.w	8016546 <rcl_wait+0x26>
 80166a4:	f240 3085 	movw	r0, #901	@ 0x385
 80166a8:	b019      	add	sp, #100	@ 0x64
 80166aa:	ecbd 8b02 	vpop	{d8}
 80166ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80166b2:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80166b6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80166ba:	e9cd 2312 	strd	r2, r3, [sp, #72]	@ 0x48
 80166be:	e9cd 2314 	strd	r2, r3, [sp, #80]	@ 0x50
 80166c2:	e9cd 2316 	strd	r2, r3, [sp, #88]	@ 0x58
 80166c6:	ea58 0307 	orrs.w	r3, r8, r7
 80166ca:	e9cd 660c 	strd	r6, r6, [sp, #48]	@ 0x30
 80166ce:	e9cd 660e 	strd	r6, r6, [sp, #56]	@ 0x38
 80166d2:	f10d 0a30 	add.w	sl, sp, #48	@ 0x30
 80166d6:	f040 80b4 	bne.w	8016842 <rcl_wait+0x322>
 80166da:	ae08      	add	r6, sp, #32
 80166dc:	2200      	movs	r2, #0
 80166de:	2300      	movs	r3, #0
 80166e0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80166e4:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 80166e8:	9602      	str	r6, [sp, #8]
 80166ea:	6bea      	ldr	r2, [r5, #60]	@ 0x3c
 80166ec:	f105 0334 	add.w	r3, r5, #52	@ 0x34
 80166f0:	e9cd 3200 	strd	r3, r2, [sp]
 80166f4:	f105 0110 	add.w	r1, r5, #16
 80166f8:	f105 031c 	add.w	r3, r5, #28
 80166fc:	f105 0228 	add.w	r2, r5, #40	@ 0x28
 8016700:	1d28      	adds	r0, r5, #4
 8016702:	f002 fc71 	bl	8018fe8 <rmw_wait>
 8016706:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016708:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801670a:	4680      	mov	r8, r0
 801670c:	b332      	cbz	r2, 801675c <rcl_wait+0x23c>
 801670e:	2500      	movs	r5, #0
 8016710:	462f      	mov	r7, r5
 8016712:	462e      	mov	r6, r5
 8016714:	e007      	b.n	8016726 <rcl_wait+0x206>
 8016716:	6922      	ldr	r2, [r4, #16]
 8016718:	f842 3009 	str.w	r3, [r2, r9]
 801671c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801671e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8016720:	3501      	adds	r5, #1
 8016722:	4295      	cmp	r5, r2
 8016724:	d21b      	bcs.n	801675e <rcl_wait+0x23e>
 8016726:	6920      	ldr	r0, [r4, #16]
 8016728:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 801672c:	a907      	add	r1, sp, #28
 801672e:	ea4f 0985 	mov.w	r9, r5, lsl #2
 8016732:	2800      	cmp	r0, #0
 8016734:	d0f4      	beq.n	8016720 <rcl_wait+0x200>
 8016736:	f88d 601c 	strb.w	r6, [sp, #28]
 801673a:	f7ff fa15 	bl	8015b68 <rcl_timer_is_ready>
 801673e:	2800      	cmp	r0, #0
 8016740:	d1b2      	bne.n	80166a8 <rcl_wait+0x188>
 8016742:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8016746:	2b00      	cmp	r3, #0
 8016748:	d0e5      	beq.n	8016716 <rcl_wait+0x1f6>
 801674a:	461f      	mov	r7, r3
 801674c:	e7e6      	b.n	801671c <rcl_wait+0x1fc>
 801674e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8016750:	6923      	ldr	r3, [r4, #16]
 8016752:	6c16      	ldr	r6, [r2, #64]	@ 0x40
 8016754:	2200      	movs	r2, #0
 8016756:	f843 2009 	str.w	r2, [r3, r9]
 801675a:	e759      	b.n	8016610 <rcl_wait+0xf0>
 801675c:	4617      	mov	r7, r2
 801675e:	f038 0002 	bics.w	r0, r8, #2
 8016762:	f040 80a8 	bne.w	80168b6 <rcl_wait+0x396>
 8016766:	6866      	ldr	r6, [r4, #4]
 8016768:	4602      	mov	r2, r0
 801676a:	b91e      	cbnz	r6, 8016774 <rcl_wait+0x254>
 801676c:	e00d      	b.n	801678a <rcl_wait+0x26a>
 801676e:	3201      	adds	r2, #1
 8016770:	4296      	cmp	r6, r2
 8016772:	d00a      	beq.n	801678a <rcl_wait+0x26a>
 8016774:	6899      	ldr	r1, [r3, #8]
 8016776:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801677a:	2900      	cmp	r1, #0
 801677c:	d1f7      	bne.n	801676e <rcl_wait+0x24e>
 801677e:	6825      	ldr	r5, [r4, #0]
 8016780:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8016784:	3201      	adds	r2, #1
 8016786:	4296      	cmp	r6, r2
 8016788:	d1f4      	bne.n	8016774 <rcl_wait+0x254>
 801678a:	68e6      	ldr	r6, [r4, #12]
 801678c:	2200      	movs	r2, #0
 801678e:	b91e      	cbnz	r6, 8016798 <rcl_wait+0x278>
 8016790:	e00d      	b.n	80167ae <rcl_wait+0x28e>
 8016792:	3201      	adds	r2, #1
 8016794:	42b2      	cmp	r2, r6
 8016796:	d00a      	beq.n	80167ae <rcl_wait+0x28e>
 8016798:	6959      	ldr	r1, [r3, #20]
 801679a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801679e:	2900      	cmp	r1, #0
 80167a0:	d1f7      	bne.n	8016792 <rcl_wait+0x272>
 80167a2:	68a5      	ldr	r5, [r4, #8]
 80167a4:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 80167a8:	3201      	adds	r2, #1
 80167aa:	42b2      	cmp	r2, r6
 80167ac:	d1f4      	bne.n	8016798 <rcl_wait+0x278>
 80167ae:	69e6      	ldr	r6, [r4, #28]
 80167b0:	2200      	movs	r2, #0
 80167b2:	b91e      	cbnz	r6, 80167bc <rcl_wait+0x29c>
 80167b4:	e00d      	b.n	80167d2 <rcl_wait+0x2b2>
 80167b6:	3201      	adds	r2, #1
 80167b8:	4296      	cmp	r6, r2
 80167ba:	d00a      	beq.n	80167d2 <rcl_wait+0x2b2>
 80167bc:	6a19      	ldr	r1, [r3, #32]
 80167be:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80167c2:	2900      	cmp	r1, #0
 80167c4:	d1f7      	bne.n	80167b6 <rcl_wait+0x296>
 80167c6:	69a5      	ldr	r5, [r4, #24]
 80167c8:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 80167cc:	3201      	adds	r2, #1
 80167ce:	4296      	cmp	r6, r2
 80167d0:	d1f4      	bne.n	80167bc <rcl_wait+0x29c>
 80167d2:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 80167d4:	2200      	movs	r2, #0
 80167d6:	b91e      	cbnz	r6, 80167e0 <rcl_wait+0x2c0>
 80167d8:	e00d      	b.n	80167f6 <rcl_wait+0x2d6>
 80167da:	3201      	adds	r2, #1
 80167dc:	42b2      	cmp	r2, r6
 80167de:	d00a      	beq.n	80167f6 <rcl_wait+0x2d6>
 80167e0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80167e2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80167e6:	2900      	cmp	r1, #0
 80167e8:	d1f7      	bne.n	80167da <rcl_wait+0x2ba>
 80167ea:	6a25      	ldr	r5, [r4, #32]
 80167ec:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 80167f0:	3201      	adds	r2, #1
 80167f2:	42b2      	cmp	r2, r6
 80167f4:	d1f4      	bne.n	80167e0 <rcl_wait+0x2c0>
 80167f6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80167f8:	2200      	movs	r2, #0
 80167fa:	b91e      	cbnz	r6, 8016804 <rcl_wait+0x2e4>
 80167fc:	e00d      	b.n	801681a <rcl_wait+0x2fa>
 80167fe:	3201      	adds	r2, #1
 8016800:	42b2      	cmp	r2, r6
 8016802:	d00a      	beq.n	801681a <rcl_wait+0x2fa>
 8016804:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8016806:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801680a:	2900      	cmp	r1, #0
 801680c:	d1f7      	bne.n	80167fe <rcl_wait+0x2de>
 801680e:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 8016810:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8016814:	3201      	adds	r2, #1
 8016816:	42b2      	cmp	r2, r6
 8016818:	d1f4      	bne.n	8016804 <rcl_wait+0x2e4>
 801681a:	f1b8 0f02 	cmp.w	r8, #2
 801681e:	f47f af43 	bne.w	80166a8 <rcl_wait+0x188>
 8016822:	f087 0701 	eor.w	r7, r7, #1
 8016826:	0078      	lsls	r0, r7, #1
 8016828:	e73e      	b.n	80166a8 <rcl_wait+0x188>
 801682a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801682e:	b019      	add	sp, #100	@ 0x64
 8016830:	ecbd 8b02 	vpop	{d8}
 8016834:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016838:	ffffffff 	.word	0xffffffff
 801683c:	7fffffff 	.word	0x7fffffff
 8016840:	465f      	mov	r7, fp
 8016842:	f1b8 0f01 	cmp.w	r8, #1
 8016846:	f177 0300 	sbcs.w	r3, r7, #0
 801684a:	db3a      	blt.n	80168c2 <rcl_wait+0x3a2>
 801684c:	2601      	movs	r6, #1
 801684e:	ad10      	add	r5, sp, #64	@ 0x40
 8016850:	f10d 0958 	add.w	r9, sp, #88	@ 0x58
 8016854:	f85a 0f04 	ldr.w	r0, [sl, #4]!
 8016858:	a908      	add	r1, sp, #32
 801685a:	b1a0      	cbz	r0, 8016886 <rcl_wait+0x366>
 801685c:	f7ff f8ce 	bl	80159fc <rcl_clock_get_now>
 8016860:	2800      	cmp	r0, #0
 8016862:	f47f af21 	bne.w	80166a8 <rcl_wait+0x188>
 8016866:	9a08      	ldr	r2, [sp, #32]
 8016868:	68ab      	ldr	r3, [r5, #8]
 801686a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801686c:	1a9b      	subs	r3, r3, r2
 801686e:	68ea      	ldr	r2, [r5, #12]
 8016870:	eb62 0201 	sbc.w	r2, r2, r1
 8016874:	4598      	cmp	r8, r3
 8016876:	eb77 0102 	sbcs.w	r1, r7, r2
 801687a:	bfba      	itte	lt
 801687c:	4643      	movlt	r3, r8
 801687e:	463a      	movlt	r2, r7
 8016880:	2601      	movge	r6, #1
 8016882:	4698      	mov	r8, r3
 8016884:	4617      	mov	r7, r2
 8016886:	3508      	adds	r5, #8
 8016888:	45a9      	cmp	r9, r5
 801688a:	d1e3      	bne.n	8016854 <rcl_wait+0x334>
 801688c:	2f00      	cmp	r7, #0
 801688e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8016890:	bfab      	itete	ge
 8016892:	4640      	movge	r0, r8
 8016894:	2000      	movlt	r0, #0
 8016896:	4639      	movge	r1, r7
 8016898:	2100      	movlt	r1, #0
 801689a:	2e00      	cmp	r6, #0
 801689c:	f43f af24 	beq.w	80166e8 <rcl_wait+0x1c8>
 80168a0:	a30d      	add	r3, pc, #52	@ (adr r3, 80168d8 <rcl_wait+0x3b8>)
 80168a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80168a6:	f7ea f9b9 	bl	8000c1c <__aeabi_ldivmod>
 80168aa:	ae08      	add	r6, sp, #32
 80168ac:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80168b0:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 80168b4:	e718      	b.n	80166e8 <rcl_wait+0x1c8>
 80168b6:	2001      	movs	r0, #1
 80168b8:	b019      	add	sp, #100	@ 0x64
 80168ba:	ecbd 8b02 	vpop	{d8}
 80168be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80168c2:	2600      	movs	r6, #0
 80168c4:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 80168c8:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 80168cc:	e7bf      	b.n	801684e <rcl_wait+0x32e>
 80168ce:	200b      	movs	r0, #11
 80168d0:	4770      	bx	lr
 80168d2:	bf00      	nop
 80168d4:	f3af 8000 	nop.w
 80168d8:	3b9aca00 	.word	0x3b9aca00
 80168dc:	00000000 	.word	0x00000000

080168e0 <rcl_action_take_goal_response>:
 80168e0:	b3b0      	cbz	r0, 8016950 <rcl_action_take_goal_response+0x70>
 80168e2:	b570      	push	{r4, r5, r6, lr}
 80168e4:	4604      	mov	r4, r0
 80168e6:	6800      	ldr	r0, [r0, #0]
 80168e8:	b368      	cbz	r0, 8016946 <rcl_action_take_goal_response+0x66>
 80168ea:	460d      	mov	r5, r1
 80168ec:	4616      	mov	r6, r2
 80168ee:	f7fd ff7f 	bl	80147f0 <rcl_client_is_valid>
 80168f2:	b330      	cbz	r0, 8016942 <rcl_action_take_goal_response+0x62>
 80168f4:	6820      	ldr	r0, [r4, #0]
 80168f6:	3004      	adds	r0, #4
 80168f8:	f7fd ff7a 	bl	80147f0 <rcl_client_is_valid>
 80168fc:	b308      	cbz	r0, 8016942 <rcl_action_take_goal_response+0x62>
 80168fe:	6820      	ldr	r0, [r4, #0]
 8016900:	3008      	adds	r0, #8
 8016902:	f7fd ff75 	bl	80147f0 <rcl_client_is_valid>
 8016906:	b1e0      	cbz	r0, 8016942 <rcl_action_take_goal_response+0x62>
 8016908:	6820      	ldr	r0, [r4, #0]
 801690a:	300c      	adds	r0, #12
 801690c:	f7fe ffda 	bl	80158c4 <rcl_subscription_is_valid>
 8016910:	b1b8      	cbz	r0, 8016942 <rcl_action_take_goal_response+0x62>
 8016912:	6820      	ldr	r0, [r4, #0]
 8016914:	3010      	adds	r0, #16
 8016916:	f7fe ffd5 	bl	80158c4 <rcl_subscription_is_valid>
 801691a:	b190      	cbz	r0, 8016942 <rcl_action_take_goal_response+0x62>
 801691c:	b1b5      	cbz	r5, 801694c <rcl_action_take_goal_response+0x6c>
 801691e:	b1ae      	cbz	r6, 801694c <rcl_action_take_goal_response+0x6c>
 8016920:	6820      	ldr	r0, [r4, #0]
 8016922:	4632      	mov	r2, r6
 8016924:	4629      	mov	r1, r5
 8016926:	f7fd fef7 	bl	8014718 <rcl_take_response>
 801692a:	b148      	cbz	r0, 8016940 <rcl_action_take_goal_response+0x60>
 801692c:	280a      	cmp	r0, #10
 801692e:	d007      	beq.n	8016940 <rcl_action_take_goal_response+0x60>
 8016930:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8016934:	f640 0337 	movw	r3, #2103	@ 0x837
 8016938:	4290      	cmp	r0, r2
 801693a:	bf0c      	ite	eq
 801693c:	4618      	moveq	r0, r3
 801693e:	2001      	movne	r0, #1
 8016940:	bd70      	pop	{r4, r5, r6, pc}
 8016942:	f7f6 fc81 	bl	800d248 <rcutils_reset_error>
 8016946:	f640 0036 	movw	r0, #2102	@ 0x836
 801694a:	bd70      	pop	{r4, r5, r6, pc}
 801694c:	200b      	movs	r0, #11
 801694e:	bd70      	pop	{r4, r5, r6, pc}
 8016950:	f640 0036 	movw	r0, #2102	@ 0x836
 8016954:	4770      	bx	lr
 8016956:	bf00      	nop

08016958 <rcl_action_send_result_request>:
 8016958:	b378      	cbz	r0, 80169ba <rcl_action_send_result_request+0x62>
 801695a:	b570      	push	{r4, r5, r6, lr}
 801695c:	4604      	mov	r4, r0
 801695e:	6800      	ldr	r0, [r0, #0]
 8016960:	b330      	cbz	r0, 80169b0 <rcl_action_send_result_request+0x58>
 8016962:	460d      	mov	r5, r1
 8016964:	4616      	mov	r6, r2
 8016966:	f7fd ff43 	bl	80147f0 <rcl_client_is_valid>
 801696a:	b1f8      	cbz	r0, 80169ac <rcl_action_send_result_request+0x54>
 801696c:	6820      	ldr	r0, [r4, #0]
 801696e:	3004      	adds	r0, #4
 8016970:	f7fd ff3e 	bl	80147f0 <rcl_client_is_valid>
 8016974:	b1d0      	cbz	r0, 80169ac <rcl_action_send_result_request+0x54>
 8016976:	6820      	ldr	r0, [r4, #0]
 8016978:	3008      	adds	r0, #8
 801697a:	f7fd ff39 	bl	80147f0 <rcl_client_is_valid>
 801697e:	b1a8      	cbz	r0, 80169ac <rcl_action_send_result_request+0x54>
 8016980:	6820      	ldr	r0, [r4, #0]
 8016982:	300c      	adds	r0, #12
 8016984:	f7fe ff9e 	bl	80158c4 <rcl_subscription_is_valid>
 8016988:	b180      	cbz	r0, 80169ac <rcl_action_send_result_request+0x54>
 801698a:	6820      	ldr	r0, [r4, #0]
 801698c:	3010      	adds	r0, #16
 801698e:	f7fe ff99 	bl	80158c4 <rcl_subscription_is_valid>
 8016992:	b158      	cbz	r0, 80169ac <rcl_action_send_result_request+0x54>
 8016994:	b17d      	cbz	r5, 80169b6 <rcl_action_send_result_request+0x5e>
 8016996:	b176      	cbz	r6, 80169b6 <rcl_action_send_result_request+0x5e>
 8016998:	6820      	ldr	r0, [r4, #0]
 801699a:	4632      	mov	r2, r6
 801699c:	4629      	mov	r1, r5
 801699e:	3008      	adds	r0, #8
 80169a0:	f7fd fe68 	bl	8014674 <rcl_send_request>
 80169a4:	3800      	subs	r0, #0
 80169a6:	bf18      	it	ne
 80169a8:	2001      	movne	r0, #1
 80169aa:	bd70      	pop	{r4, r5, r6, pc}
 80169ac:	f7f6 fc4c 	bl	800d248 <rcutils_reset_error>
 80169b0:	f640 0036 	movw	r0, #2102	@ 0x836
 80169b4:	bd70      	pop	{r4, r5, r6, pc}
 80169b6:	200b      	movs	r0, #11
 80169b8:	bd70      	pop	{r4, r5, r6, pc}
 80169ba:	f640 0036 	movw	r0, #2102	@ 0x836
 80169be:	4770      	bx	lr

080169c0 <rcl_action_take_result_response>:
 80169c0:	2800      	cmp	r0, #0
 80169c2:	d037      	beq.n	8016a34 <rcl_action_take_result_response+0x74>
 80169c4:	b570      	push	{r4, r5, r6, lr}
 80169c6:	4604      	mov	r4, r0
 80169c8:	6800      	ldr	r0, [r0, #0]
 80169ca:	b370      	cbz	r0, 8016a2a <rcl_action_take_result_response+0x6a>
 80169cc:	460d      	mov	r5, r1
 80169ce:	4616      	mov	r6, r2
 80169d0:	f7fd ff0e 	bl	80147f0 <rcl_client_is_valid>
 80169d4:	b338      	cbz	r0, 8016a26 <rcl_action_take_result_response+0x66>
 80169d6:	6820      	ldr	r0, [r4, #0]
 80169d8:	3004      	adds	r0, #4
 80169da:	f7fd ff09 	bl	80147f0 <rcl_client_is_valid>
 80169de:	b310      	cbz	r0, 8016a26 <rcl_action_take_result_response+0x66>
 80169e0:	6820      	ldr	r0, [r4, #0]
 80169e2:	3008      	adds	r0, #8
 80169e4:	f7fd ff04 	bl	80147f0 <rcl_client_is_valid>
 80169e8:	b1e8      	cbz	r0, 8016a26 <rcl_action_take_result_response+0x66>
 80169ea:	6820      	ldr	r0, [r4, #0]
 80169ec:	300c      	adds	r0, #12
 80169ee:	f7fe ff69 	bl	80158c4 <rcl_subscription_is_valid>
 80169f2:	b1c0      	cbz	r0, 8016a26 <rcl_action_take_result_response+0x66>
 80169f4:	6820      	ldr	r0, [r4, #0]
 80169f6:	3010      	adds	r0, #16
 80169f8:	f7fe ff64 	bl	80158c4 <rcl_subscription_is_valid>
 80169fc:	b198      	cbz	r0, 8016a26 <rcl_action_take_result_response+0x66>
 80169fe:	b1bd      	cbz	r5, 8016a30 <rcl_action_take_result_response+0x70>
 8016a00:	b1b6      	cbz	r6, 8016a30 <rcl_action_take_result_response+0x70>
 8016a02:	6820      	ldr	r0, [r4, #0]
 8016a04:	4632      	mov	r2, r6
 8016a06:	4629      	mov	r1, r5
 8016a08:	3008      	adds	r0, #8
 8016a0a:	f7fd fe85 	bl	8014718 <rcl_take_response>
 8016a0e:	b148      	cbz	r0, 8016a24 <rcl_action_take_result_response+0x64>
 8016a10:	280a      	cmp	r0, #10
 8016a12:	d007      	beq.n	8016a24 <rcl_action_take_result_response+0x64>
 8016a14:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8016a18:	f640 0337 	movw	r3, #2103	@ 0x837
 8016a1c:	4290      	cmp	r0, r2
 8016a1e:	bf0c      	ite	eq
 8016a20:	4618      	moveq	r0, r3
 8016a22:	2001      	movne	r0, #1
 8016a24:	bd70      	pop	{r4, r5, r6, pc}
 8016a26:	f7f6 fc0f 	bl	800d248 <rcutils_reset_error>
 8016a2a:	f640 0036 	movw	r0, #2102	@ 0x836
 8016a2e:	bd70      	pop	{r4, r5, r6, pc}
 8016a30:	200b      	movs	r0, #11
 8016a32:	bd70      	pop	{r4, r5, r6, pc}
 8016a34:	f640 0036 	movw	r0, #2102	@ 0x836
 8016a38:	4770      	bx	lr
 8016a3a:	bf00      	nop

08016a3c <rcl_action_take_cancel_response>:
 8016a3c:	2800      	cmp	r0, #0
 8016a3e:	d037      	beq.n	8016ab0 <rcl_action_take_cancel_response+0x74>
 8016a40:	b570      	push	{r4, r5, r6, lr}
 8016a42:	4604      	mov	r4, r0
 8016a44:	6800      	ldr	r0, [r0, #0]
 8016a46:	b370      	cbz	r0, 8016aa6 <rcl_action_take_cancel_response+0x6a>
 8016a48:	460d      	mov	r5, r1
 8016a4a:	4616      	mov	r6, r2
 8016a4c:	f7fd fed0 	bl	80147f0 <rcl_client_is_valid>
 8016a50:	b338      	cbz	r0, 8016aa2 <rcl_action_take_cancel_response+0x66>
 8016a52:	6820      	ldr	r0, [r4, #0]
 8016a54:	3004      	adds	r0, #4
 8016a56:	f7fd fecb 	bl	80147f0 <rcl_client_is_valid>
 8016a5a:	b310      	cbz	r0, 8016aa2 <rcl_action_take_cancel_response+0x66>
 8016a5c:	6820      	ldr	r0, [r4, #0]
 8016a5e:	3008      	adds	r0, #8
 8016a60:	f7fd fec6 	bl	80147f0 <rcl_client_is_valid>
 8016a64:	b1e8      	cbz	r0, 8016aa2 <rcl_action_take_cancel_response+0x66>
 8016a66:	6820      	ldr	r0, [r4, #0]
 8016a68:	300c      	adds	r0, #12
 8016a6a:	f7fe ff2b 	bl	80158c4 <rcl_subscription_is_valid>
 8016a6e:	b1c0      	cbz	r0, 8016aa2 <rcl_action_take_cancel_response+0x66>
 8016a70:	6820      	ldr	r0, [r4, #0]
 8016a72:	3010      	adds	r0, #16
 8016a74:	f7fe ff26 	bl	80158c4 <rcl_subscription_is_valid>
 8016a78:	b198      	cbz	r0, 8016aa2 <rcl_action_take_cancel_response+0x66>
 8016a7a:	b1bd      	cbz	r5, 8016aac <rcl_action_take_cancel_response+0x70>
 8016a7c:	b1b6      	cbz	r6, 8016aac <rcl_action_take_cancel_response+0x70>
 8016a7e:	6820      	ldr	r0, [r4, #0]
 8016a80:	4632      	mov	r2, r6
 8016a82:	4629      	mov	r1, r5
 8016a84:	3004      	adds	r0, #4
 8016a86:	f7fd fe47 	bl	8014718 <rcl_take_response>
 8016a8a:	b148      	cbz	r0, 8016aa0 <rcl_action_take_cancel_response+0x64>
 8016a8c:	280a      	cmp	r0, #10
 8016a8e:	d007      	beq.n	8016aa0 <rcl_action_take_cancel_response+0x64>
 8016a90:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8016a94:	f640 0337 	movw	r3, #2103	@ 0x837
 8016a98:	4290      	cmp	r0, r2
 8016a9a:	bf0c      	ite	eq
 8016a9c:	4618      	moveq	r0, r3
 8016a9e:	2001      	movne	r0, #1
 8016aa0:	bd70      	pop	{r4, r5, r6, pc}
 8016aa2:	f7f6 fbd1 	bl	800d248 <rcutils_reset_error>
 8016aa6:	f640 0036 	movw	r0, #2102	@ 0x836
 8016aaa:	bd70      	pop	{r4, r5, r6, pc}
 8016aac:	200b      	movs	r0, #11
 8016aae:	bd70      	pop	{r4, r5, r6, pc}
 8016ab0:	f640 0036 	movw	r0, #2102	@ 0x836
 8016ab4:	4770      	bx	lr
 8016ab6:	bf00      	nop

08016ab8 <rcl_action_take_feedback>:
 8016ab8:	2800      	cmp	r0, #0
 8016aba:	d037      	beq.n	8016b2c <rcl_action_take_feedback+0x74>
 8016abc:	b530      	push	{r4, r5, lr}
 8016abe:	4604      	mov	r4, r0
 8016ac0:	6800      	ldr	r0, [r0, #0]
 8016ac2:	b08f      	sub	sp, #60	@ 0x3c
 8016ac4:	b358      	cbz	r0, 8016b1e <rcl_action_take_feedback+0x66>
 8016ac6:	460d      	mov	r5, r1
 8016ac8:	f7fd fe92 	bl	80147f0 <rcl_client_is_valid>
 8016acc:	b328      	cbz	r0, 8016b1a <rcl_action_take_feedback+0x62>
 8016ace:	6820      	ldr	r0, [r4, #0]
 8016ad0:	3004      	adds	r0, #4
 8016ad2:	f7fd fe8d 	bl	80147f0 <rcl_client_is_valid>
 8016ad6:	b300      	cbz	r0, 8016b1a <rcl_action_take_feedback+0x62>
 8016ad8:	6820      	ldr	r0, [r4, #0]
 8016ada:	3008      	adds	r0, #8
 8016adc:	f7fd fe88 	bl	80147f0 <rcl_client_is_valid>
 8016ae0:	b1d8      	cbz	r0, 8016b1a <rcl_action_take_feedback+0x62>
 8016ae2:	6820      	ldr	r0, [r4, #0]
 8016ae4:	300c      	adds	r0, #12
 8016ae6:	f7fe feed 	bl	80158c4 <rcl_subscription_is_valid>
 8016aea:	b1b0      	cbz	r0, 8016b1a <rcl_action_take_feedback+0x62>
 8016aec:	6820      	ldr	r0, [r4, #0]
 8016aee:	3010      	adds	r0, #16
 8016af0:	f7fe fee8 	bl	80158c4 <rcl_subscription_is_valid>
 8016af4:	b188      	cbz	r0, 8016b1a <rcl_action_take_feedback+0x62>
 8016af6:	b1b5      	cbz	r5, 8016b26 <rcl_action_take_feedback+0x6e>
 8016af8:	6820      	ldr	r0, [r4, #0]
 8016afa:	2300      	movs	r3, #0
 8016afc:	466a      	mov	r2, sp
 8016afe:	4629      	mov	r1, r5
 8016b00:	300c      	adds	r0, #12
 8016b02:	f7fe fe81 	bl	8015808 <rcl_take>
 8016b06:	b160      	cbz	r0, 8016b22 <rcl_action_take_feedback+0x6a>
 8016b08:	f240 1391 	movw	r3, #401	@ 0x191
 8016b0c:	4298      	cmp	r0, r3
 8016b0e:	d010      	beq.n	8016b32 <rcl_action_take_feedback+0x7a>
 8016b10:	280a      	cmp	r0, #10
 8016b12:	bf18      	it	ne
 8016b14:	2001      	movne	r0, #1
 8016b16:	b00f      	add	sp, #60	@ 0x3c
 8016b18:	bd30      	pop	{r4, r5, pc}
 8016b1a:	f7f6 fb95 	bl	800d248 <rcutils_reset_error>
 8016b1e:	f640 0036 	movw	r0, #2102	@ 0x836
 8016b22:	b00f      	add	sp, #60	@ 0x3c
 8016b24:	bd30      	pop	{r4, r5, pc}
 8016b26:	200b      	movs	r0, #11
 8016b28:	b00f      	add	sp, #60	@ 0x3c
 8016b2a:	bd30      	pop	{r4, r5, pc}
 8016b2c:	f640 0036 	movw	r0, #2102	@ 0x836
 8016b30:	4770      	bx	lr
 8016b32:	f640 0037 	movw	r0, #2103	@ 0x837
 8016b36:	e7f4      	b.n	8016b22 <rcl_action_take_feedback+0x6a>

08016b38 <rcl_action_wait_set_add_action_client>:
 8016b38:	2800      	cmp	r0, #0
 8016b3a:	d045      	beq.n	8016bc8 <rcl_action_wait_set_add_action_client+0x90>
 8016b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016b3e:	460c      	mov	r4, r1
 8016b40:	2900      	cmp	r1, #0
 8016b42:	d03e      	beq.n	8016bc2 <rcl_action_wait_set_add_action_client+0x8a>
 8016b44:	4605      	mov	r5, r0
 8016b46:	6808      	ldr	r0, [r1, #0]
 8016b48:	2800      	cmp	r0, #0
 8016b4a:	d03a      	beq.n	8016bc2 <rcl_action_wait_set_add_action_client+0x8a>
 8016b4c:	4617      	mov	r7, r2
 8016b4e:	461e      	mov	r6, r3
 8016b50:	f7fd fe4e 	bl	80147f0 <rcl_client_is_valid>
 8016b54:	b398      	cbz	r0, 8016bbe <rcl_action_wait_set_add_action_client+0x86>
 8016b56:	6820      	ldr	r0, [r4, #0]
 8016b58:	3004      	adds	r0, #4
 8016b5a:	f7fd fe49 	bl	80147f0 <rcl_client_is_valid>
 8016b5e:	b370      	cbz	r0, 8016bbe <rcl_action_wait_set_add_action_client+0x86>
 8016b60:	6820      	ldr	r0, [r4, #0]
 8016b62:	3008      	adds	r0, #8
 8016b64:	f7fd fe44 	bl	80147f0 <rcl_client_is_valid>
 8016b68:	b348      	cbz	r0, 8016bbe <rcl_action_wait_set_add_action_client+0x86>
 8016b6a:	6820      	ldr	r0, [r4, #0]
 8016b6c:	300c      	adds	r0, #12
 8016b6e:	f7fe fea9 	bl	80158c4 <rcl_subscription_is_valid>
 8016b72:	b320      	cbz	r0, 8016bbe <rcl_action_wait_set_add_action_client+0x86>
 8016b74:	6820      	ldr	r0, [r4, #0]
 8016b76:	3010      	adds	r0, #16
 8016b78:	f7fe fea4 	bl	80158c4 <rcl_subscription_is_valid>
 8016b7c:	b1f8      	cbz	r0, 8016bbe <rcl_action_wait_set_add_action_client+0x86>
 8016b7e:	6821      	ldr	r1, [r4, #0]
 8016b80:	4628      	mov	r0, r5
 8016b82:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 8016b86:	f7ff fc73 	bl	8016470 <rcl_wait_set_add_client>
 8016b8a:	b9b8      	cbnz	r0, 8016bbc <rcl_action_wait_set_add_action_client+0x84>
 8016b8c:	6821      	ldr	r1, [r4, #0]
 8016b8e:	4628      	mov	r0, r5
 8016b90:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 8016b94:	3104      	adds	r1, #4
 8016b96:	f7ff fc6b 	bl	8016470 <rcl_wait_set_add_client>
 8016b9a:	b978      	cbnz	r0, 8016bbc <rcl_action_wait_set_add_action_client+0x84>
 8016b9c:	6821      	ldr	r1, [r4, #0]
 8016b9e:	4628      	mov	r0, r5
 8016ba0:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 8016ba4:	3108      	adds	r1, #8
 8016ba6:	f7ff fc63 	bl	8016470 <rcl_wait_set_add_client>
 8016baa:	b938      	cbnz	r0, 8016bbc <rcl_action_wait_set_add_action_client+0x84>
 8016bac:	6821      	ldr	r1, [r4, #0]
 8016bae:	4628      	mov	r0, r5
 8016bb0:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 8016bb4:	310c      	adds	r1, #12
 8016bb6:	f7ff f8fb 	bl	8015db0 <rcl_wait_set_add_subscription>
 8016bba:	b140      	cbz	r0, 8016bce <rcl_action_wait_set_add_action_client+0x96>
 8016bbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016bbe:	f7f6 fb43 	bl	800d248 <rcutils_reset_error>
 8016bc2:	f640 0036 	movw	r0, #2102	@ 0x836
 8016bc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016bc8:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8016bcc:	4770      	bx	lr
 8016bce:	6821      	ldr	r1, [r4, #0]
 8016bd0:	4628      	mov	r0, r5
 8016bd2:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 8016bd6:	3110      	adds	r1, #16
 8016bd8:	f7ff f8ea 	bl	8015db0 <rcl_wait_set_add_subscription>
 8016bdc:	2800      	cmp	r0, #0
 8016bde:	d1ed      	bne.n	8016bbc <rcl_action_wait_set_add_action_client+0x84>
 8016be0:	b11f      	cbz	r7, 8016bea <rcl_action_wait_set_add_action_client+0xb2>
 8016be2:	6823      	ldr	r3, [r4, #0]
 8016be4:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 8016be8:	603b      	str	r3, [r7, #0]
 8016bea:	2e00      	cmp	r6, #0
 8016bec:	d0e6      	beq.n	8016bbc <rcl_action_wait_set_add_action_client+0x84>
 8016bee:	6823      	ldr	r3, [r4, #0]
 8016bf0:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 8016bf4:	6033      	str	r3, [r6, #0]
 8016bf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08016bf8 <rcl_action_client_wait_set_get_entities_ready>:
 8016bf8:	2800      	cmp	r0, #0
 8016bfa:	f000 8089 	beq.w	8016d10 <rcl_action_client_wait_set_get_entities_ready+0x118>
 8016bfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016c02:	460c      	mov	r4, r1
 8016c04:	2900      	cmp	r1, #0
 8016c06:	d079      	beq.n	8016cfc <rcl_action_client_wait_set_get_entities_ready+0x104>
 8016c08:	4605      	mov	r5, r0
 8016c0a:	6808      	ldr	r0, [r1, #0]
 8016c0c:	2800      	cmp	r0, #0
 8016c0e:	d075      	beq.n	8016cfc <rcl_action_client_wait_set_get_entities_ready+0x104>
 8016c10:	4616      	mov	r6, r2
 8016c12:	461f      	mov	r7, r3
 8016c14:	f7fd fdec 	bl	80147f0 <rcl_client_is_valid>
 8016c18:	2800      	cmp	r0, #0
 8016c1a:	d06d      	beq.n	8016cf8 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8016c1c:	6820      	ldr	r0, [r4, #0]
 8016c1e:	3004      	adds	r0, #4
 8016c20:	f7fd fde6 	bl	80147f0 <rcl_client_is_valid>
 8016c24:	2800      	cmp	r0, #0
 8016c26:	d067      	beq.n	8016cf8 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8016c28:	6820      	ldr	r0, [r4, #0]
 8016c2a:	3008      	adds	r0, #8
 8016c2c:	f7fd fde0 	bl	80147f0 <rcl_client_is_valid>
 8016c30:	2800      	cmp	r0, #0
 8016c32:	d061      	beq.n	8016cf8 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8016c34:	6820      	ldr	r0, [r4, #0]
 8016c36:	300c      	adds	r0, #12
 8016c38:	f7fe fe44 	bl	80158c4 <rcl_subscription_is_valid>
 8016c3c:	2800      	cmp	r0, #0
 8016c3e:	d05b      	beq.n	8016cf8 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8016c40:	6820      	ldr	r0, [r4, #0]
 8016c42:	3010      	adds	r0, #16
 8016c44:	f7fe fe3e 	bl	80158c4 <rcl_subscription_is_valid>
 8016c48:	2800      	cmp	r0, #0
 8016c4a:	d055      	beq.n	8016cf8 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8016c4c:	2e00      	cmp	r6, #0
 8016c4e:	d05c      	beq.n	8016d0a <rcl_action_client_wait_set_get_entities_ready+0x112>
 8016c50:	2f00      	cmp	r7, #0
 8016c52:	d05a      	beq.n	8016d0a <rcl_action_client_wait_set_get_entities_ready+0x112>
 8016c54:	9b06      	ldr	r3, [sp, #24]
 8016c56:	2b00      	cmp	r3, #0
 8016c58:	d057      	beq.n	8016d0a <rcl_action_client_wait_set_get_entities_ready+0x112>
 8016c5a:	9b07      	ldr	r3, [sp, #28]
 8016c5c:	2b00      	cmp	r3, #0
 8016c5e:	d054      	beq.n	8016d0a <rcl_action_client_wait_set_get_entities_ready+0x112>
 8016c60:	9b08      	ldr	r3, [sp, #32]
 8016c62:	2b00      	cmp	r3, #0
 8016c64:	d051      	beq.n	8016d0a <rcl_action_client_wait_set_get_entities_ready+0x112>
 8016c66:	6823      	ldr	r3, [r4, #0]
 8016c68:	686a      	ldr	r2, [r5, #4]
 8016c6a:	f8d3 11d0 	ldr.w	r1, [r3, #464]	@ 0x1d0
 8016c6e:	428a      	cmp	r2, r1
 8016c70:	d948      	bls.n	8016d04 <rcl_action_client_wait_set_get_entities_ready+0x10c>
 8016c72:	f8d3 01d4 	ldr.w	r0, [r3, #468]	@ 0x1d4
 8016c76:	4282      	cmp	r2, r0
 8016c78:	d944      	bls.n	8016d04 <rcl_action_client_wait_set_get_entities_ready+0x10c>
 8016c7a:	f8d3 41c4 	ldr.w	r4, [r3, #452]	@ 0x1c4
 8016c7e:	69ea      	ldr	r2, [r5, #28]
 8016c80:	42a2      	cmp	r2, r4
 8016c82:	d93f      	bls.n	8016d04 <rcl_action_client_wait_set_get_entities_ready+0x10c>
 8016c84:	f8d3 c1c8 	ldr.w	ip, [r3, #456]	@ 0x1c8
 8016c88:	4562      	cmp	r2, ip
 8016c8a:	d93b      	bls.n	8016d04 <rcl_action_client_wait_set_get_entities_ready+0x10c>
 8016c8c:	f8d3 e1cc 	ldr.w	lr, [r3, #460]	@ 0x1cc
 8016c90:	4572      	cmp	r2, lr
 8016c92:	d937      	bls.n	8016d04 <rcl_action_client_wait_set_get_entities_ready+0x10c>
 8016c94:	69aa      	ldr	r2, [r5, #24]
 8016c96:	682d      	ldr	r5, [r5, #0]
 8016c98:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]
 8016c9c:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 8016ca0:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 8016ca4:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 8016ca8:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 8016cac:	f103 0c0c 	add.w	ip, r3, #12
 8016cb0:	eba5 050c 	sub.w	r5, r5, ip
 8016cb4:	fab5 f585 	clz	r5, r5
 8016cb8:	096d      	lsrs	r5, r5, #5
 8016cba:	7035      	strb	r5, [r6, #0]
 8016cbc:	f103 0510 	add.w	r5, r3, #16
 8016cc0:	1b64      	subs	r4, r4, r5
 8016cc2:	fab4 f484 	clz	r4, r4
 8016cc6:	0964      	lsrs	r4, r4, #5
 8016cc8:	703c      	strb	r4, [r7, #0]
 8016cca:	eba3 0008 	sub.w	r0, r3, r8
 8016cce:	1d1c      	adds	r4, r3, #4
 8016cd0:	3308      	adds	r3, #8
 8016cd2:	1ad3      	subs	r3, r2, r3
 8016cd4:	fab0 f080 	clz	r0, r0
 8016cd8:	9a06      	ldr	r2, [sp, #24]
 8016cda:	0940      	lsrs	r0, r0, #5
 8016cdc:	1b09      	subs	r1, r1, r4
 8016cde:	7010      	strb	r0, [r2, #0]
 8016ce0:	fab1 f181 	clz	r1, r1
 8016ce4:	9a07      	ldr	r2, [sp, #28]
 8016ce6:	0949      	lsrs	r1, r1, #5
 8016ce8:	7011      	strb	r1, [r2, #0]
 8016cea:	fab3 f383 	clz	r3, r3
 8016cee:	9a08      	ldr	r2, [sp, #32]
 8016cf0:	095b      	lsrs	r3, r3, #5
 8016cf2:	2000      	movs	r0, #0
 8016cf4:	7013      	strb	r3, [r2, #0]
 8016cf6:	e003      	b.n	8016d00 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8016cf8:	f7f6 faa6 	bl	800d248 <rcutils_reset_error>
 8016cfc:	f640 0036 	movw	r0, #2102	@ 0x836
 8016d00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016d04:	2001      	movs	r0, #1
 8016d06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016d0a:	200b      	movs	r0, #11
 8016d0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016d10:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8016d14:	4770      	bx	lr
 8016d16:	bf00      	nop

08016d18 <rcl_action_take_goal_request>:
 8016d18:	b3b0      	cbz	r0, 8016d88 <rcl_action_take_goal_request+0x70>
 8016d1a:	b570      	push	{r4, r5, r6, lr}
 8016d1c:	4604      	mov	r4, r0
 8016d1e:	6800      	ldr	r0, [r0, #0]
 8016d20:	b368      	cbz	r0, 8016d7e <rcl_action_take_goal_request+0x66>
 8016d22:	460d      	mov	r5, r1
 8016d24:	4616      	mov	r6, r2
 8016d26:	f7fe fc01 	bl	801552c <rcl_service_is_valid>
 8016d2a:	b330      	cbz	r0, 8016d7a <rcl_action_take_goal_request+0x62>
 8016d2c:	6820      	ldr	r0, [r4, #0]
 8016d2e:	3004      	adds	r0, #4
 8016d30:	f7fe fbfc 	bl	801552c <rcl_service_is_valid>
 8016d34:	b308      	cbz	r0, 8016d7a <rcl_action_take_goal_request+0x62>
 8016d36:	6820      	ldr	r0, [r4, #0]
 8016d38:	3008      	adds	r0, #8
 8016d3a:	f7fe fbf7 	bl	801552c <rcl_service_is_valid>
 8016d3e:	b1e0      	cbz	r0, 8016d7a <rcl_action_take_goal_request+0x62>
 8016d40:	6820      	ldr	r0, [r4, #0]
 8016d42:	300c      	adds	r0, #12
 8016d44:	f7f5 fade 	bl	800c304 <rcl_publisher_is_valid>
 8016d48:	b1b8      	cbz	r0, 8016d7a <rcl_action_take_goal_request+0x62>
 8016d4a:	6820      	ldr	r0, [r4, #0]
 8016d4c:	3010      	adds	r0, #16
 8016d4e:	f7f5 fad9 	bl	800c304 <rcl_publisher_is_valid>
 8016d52:	b190      	cbz	r0, 8016d7a <rcl_action_take_goal_request+0x62>
 8016d54:	b1b5      	cbz	r5, 8016d84 <rcl_action_take_goal_request+0x6c>
 8016d56:	b1ae      	cbz	r6, 8016d84 <rcl_action_take_goal_request+0x6c>
 8016d58:	6820      	ldr	r0, [r4, #0]
 8016d5a:	4632      	mov	r2, r6
 8016d5c:	4629      	mov	r1, r5
 8016d5e:	f7fe fb65 	bl	801542c <rcl_take_request>
 8016d62:	b148      	cbz	r0, 8016d78 <rcl_action_take_goal_request+0x60>
 8016d64:	280a      	cmp	r0, #10
 8016d66:	d007      	beq.n	8016d78 <rcl_action_take_goal_request+0x60>
 8016d68:	f240 2259 	movw	r2, #601	@ 0x259
 8016d6c:	f640 0399 	movw	r3, #2201	@ 0x899
 8016d70:	4290      	cmp	r0, r2
 8016d72:	bf0c      	ite	eq
 8016d74:	4618      	moveq	r0, r3
 8016d76:	2001      	movne	r0, #1
 8016d78:	bd70      	pop	{r4, r5, r6, pc}
 8016d7a:	f7f6 fa65 	bl	800d248 <rcutils_reset_error>
 8016d7e:	f640 0098 	movw	r0, #2200	@ 0x898
 8016d82:	bd70      	pop	{r4, r5, r6, pc}
 8016d84:	200b      	movs	r0, #11
 8016d86:	bd70      	pop	{r4, r5, r6, pc}
 8016d88:	f640 0098 	movw	r0, #2200	@ 0x898
 8016d8c:	4770      	bx	lr
 8016d8e:	bf00      	nop

08016d90 <rcl_action_send_goal_response>:
 8016d90:	b378      	cbz	r0, 8016df2 <rcl_action_send_goal_response+0x62>
 8016d92:	b570      	push	{r4, r5, r6, lr}
 8016d94:	4604      	mov	r4, r0
 8016d96:	6800      	ldr	r0, [r0, #0]
 8016d98:	b330      	cbz	r0, 8016de8 <rcl_action_send_goal_response+0x58>
 8016d9a:	460d      	mov	r5, r1
 8016d9c:	4616      	mov	r6, r2
 8016d9e:	f7fe fbc5 	bl	801552c <rcl_service_is_valid>
 8016da2:	b1f8      	cbz	r0, 8016de4 <rcl_action_send_goal_response+0x54>
 8016da4:	6820      	ldr	r0, [r4, #0]
 8016da6:	3004      	adds	r0, #4
 8016da8:	f7fe fbc0 	bl	801552c <rcl_service_is_valid>
 8016dac:	b1d0      	cbz	r0, 8016de4 <rcl_action_send_goal_response+0x54>
 8016dae:	6820      	ldr	r0, [r4, #0]
 8016db0:	3008      	adds	r0, #8
 8016db2:	f7fe fbbb 	bl	801552c <rcl_service_is_valid>
 8016db6:	b1a8      	cbz	r0, 8016de4 <rcl_action_send_goal_response+0x54>
 8016db8:	6820      	ldr	r0, [r4, #0]
 8016dba:	300c      	adds	r0, #12
 8016dbc:	f7f5 faa2 	bl	800c304 <rcl_publisher_is_valid>
 8016dc0:	b180      	cbz	r0, 8016de4 <rcl_action_send_goal_response+0x54>
 8016dc2:	6820      	ldr	r0, [r4, #0]
 8016dc4:	3010      	adds	r0, #16
 8016dc6:	f7f5 fa9d 	bl	800c304 <rcl_publisher_is_valid>
 8016dca:	b158      	cbz	r0, 8016de4 <rcl_action_send_goal_response+0x54>
 8016dcc:	b17d      	cbz	r5, 8016dee <rcl_action_send_goal_response+0x5e>
 8016dce:	b176      	cbz	r6, 8016dee <rcl_action_send_goal_response+0x5e>
 8016dd0:	6820      	ldr	r0, [r4, #0]
 8016dd2:	4632      	mov	r2, r6
 8016dd4:	4629      	mov	r1, r5
 8016dd6:	f7fe fb79 	bl	80154cc <rcl_send_response>
 8016dda:	b110      	cbz	r0, 8016de2 <rcl_action_send_goal_response+0x52>
 8016ddc:	2802      	cmp	r0, #2
 8016dde:	bf18      	it	ne
 8016de0:	2001      	movne	r0, #1
 8016de2:	bd70      	pop	{r4, r5, r6, pc}
 8016de4:	f7f6 fa30 	bl	800d248 <rcutils_reset_error>
 8016de8:	f640 0098 	movw	r0, #2200	@ 0x898
 8016dec:	bd70      	pop	{r4, r5, r6, pc}
 8016dee:	200b      	movs	r0, #11
 8016df0:	bd70      	pop	{r4, r5, r6, pc}
 8016df2:	f640 0098 	movw	r0, #2200	@ 0x898
 8016df6:	4770      	bx	lr

08016df8 <rcl_action_take_result_request>:
 8016df8:	2800      	cmp	r0, #0
 8016dfa:	d037      	beq.n	8016e6c <rcl_action_take_result_request+0x74>
 8016dfc:	b570      	push	{r4, r5, r6, lr}
 8016dfe:	4604      	mov	r4, r0
 8016e00:	6800      	ldr	r0, [r0, #0]
 8016e02:	b370      	cbz	r0, 8016e62 <rcl_action_take_result_request+0x6a>
 8016e04:	460d      	mov	r5, r1
 8016e06:	4616      	mov	r6, r2
 8016e08:	f7fe fb90 	bl	801552c <rcl_service_is_valid>
 8016e0c:	b338      	cbz	r0, 8016e5e <rcl_action_take_result_request+0x66>
 8016e0e:	6820      	ldr	r0, [r4, #0]
 8016e10:	3004      	adds	r0, #4
 8016e12:	f7fe fb8b 	bl	801552c <rcl_service_is_valid>
 8016e16:	b310      	cbz	r0, 8016e5e <rcl_action_take_result_request+0x66>
 8016e18:	6820      	ldr	r0, [r4, #0]
 8016e1a:	3008      	adds	r0, #8
 8016e1c:	f7fe fb86 	bl	801552c <rcl_service_is_valid>
 8016e20:	b1e8      	cbz	r0, 8016e5e <rcl_action_take_result_request+0x66>
 8016e22:	6820      	ldr	r0, [r4, #0]
 8016e24:	300c      	adds	r0, #12
 8016e26:	f7f5 fa6d 	bl	800c304 <rcl_publisher_is_valid>
 8016e2a:	b1c0      	cbz	r0, 8016e5e <rcl_action_take_result_request+0x66>
 8016e2c:	6820      	ldr	r0, [r4, #0]
 8016e2e:	3010      	adds	r0, #16
 8016e30:	f7f5 fa68 	bl	800c304 <rcl_publisher_is_valid>
 8016e34:	b198      	cbz	r0, 8016e5e <rcl_action_take_result_request+0x66>
 8016e36:	b1bd      	cbz	r5, 8016e68 <rcl_action_take_result_request+0x70>
 8016e38:	b1b6      	cbz	r6, 8016e68 <rcl_action_take_result_request+0x70>
 8016e3a:	6820      	ldr	r0, [r4, #0]
 8016e3c:	4632      	mov	r2, r6
 8016e3e:	4629      	mov	r1, r5
 8016e40:	3008      	adds	r0, #8
 8016e42:	f7fe faf3 	bl	801542c <rcl_take_request>
 8016e46:	b148      	cbz	r0, 8016e5c <rcl_action_take_result_request+0x64>
 8016e48:	280a      	cmp	r0, #10
 8016e4a:	d007      	beq.n	8016e5c <rcl_action_take_result_request+0x64>
 8016e4c:	f240 2259 	movw	r2, #601	@ 0x259
 8016e50:	f640 0399 	movw	r3, #2201	@ 0x899
 8016e54:	4290      	cmp	r0, r2
 8016e56:	bf0c      	ite	eq
 8016e58:	4618      	moveq	r0, r3
 8016e5a:	2001      	movne	r0, #1
 8016e5c:	bd70      	pop	{r4, r5, r6, pc}
 8016e5e:	f7f6 f9f3 	bl	800d248 <rcutils_reset_error>
 8016e62:	f640 0098 	movw	r0, #2200	@ 0x898
 8016e66:	bd70      	pop	{r4, r5, r6, pc}
 8016e68:	200b      	movs	r0, #11
 8016e6a:	bd70      	pop	{r4, r5, r6, pc}
 8016e6c:	f640 0098 	movw	r0, #2200	@ 0x898
 8016e70:	4770      	bx	lr
 8016e72:	bf00      	nop

08016e74 <rcl_action_take_cancel_request>:
 8016e74:	2800      	cmp	r0, #0
 8016e76:	d037      	beq.n	8016ee8 <rcl_action_take_cancel_request+0x74>
 8016e78:	b570      	push	{r4, r5, r6, lr}
 8016e7a:	4604      	mov	r4, r0
 8016e7c:	6800      	ldr	r0, [r0, #0]
 8016e7e:	b370      	cbz	r0, 8016ede <rcl_action_take_cancel_request+0x6a>
 8016e80:	460d      	mov	r5, r1
 8016e82:	4616      	mov	r6, r2
 8016e84:	f7fe fb52 	bl	801552c <rcl_service_is_valid>
 8016e88:	b338      	cbz	r0, 8016eda <rcl_action_take_cancel_request+0x66>
 8016e8a:	6820      	ldr	r0, [r4, #0]
 8016e8c:	3004      	adds	r0, #4
 8016e8e:	f7fe fb4d 	bl	801552c <rcl_service_is_valid>
 8016e92:	b310      	cbz	r0, 8016eda <rcl_action_take_cancel_request+0x66>
 8016e94:	6820      	ldr	r0, [r4, #0]
 8016e96:	3008      	adds	r0, #8
 8016e98:	f7fe fb48 	bl	801552c <rcl_service_is_valid>
 8016e9c:	b1e8      	cbz	r0, 8016eda <rcl_action_take_cancel_request+0x66>
 8016e9e:	6820      	ldr	r0, [r4, #0]
 8016ea0:	300c      	adds	r0, #12
 8016ea2:	f7f5 fa2f 	bl	800c304 <rcl_publisher_is_valid>
 8016ea6:	b1c0      	cbz	r0, 8016eda <rcl_action_take_cancel_request+0x66>
 8016ea8:	6820      	ldr	r0, [r4, #0]
 8016eaa:	3010      	adds	r0, #16
 8016eac:	f7f5 fa2a 	bl	800c304 <rcl_publisher_is_valid>
 8016eb0:	b198      	cbz	r0, 8016eda <rcl_action_take_cancel_request+0x66>
 8016eb2:	b1bd      	cbz	r5, 8016ee4 <rcl_action_take_cancel_request+0x70>
 8016eb4:	b1b6      	cbz	r6, 8016ee4 <rcl_action_take_cancel_request+0x70>
 8016eb6:	6820      	ldr	r0, [r4, #0]
 8016eb8:	4632      	mov	r2, r6
 8016eba:	4629      	mov	r1, r5
 8016ebc:	3004      	adds	r0, #4
 8016ebe:	f7fe fab5 	bl	801542c <rcl_take_request>
 8016ec2:	b148      	cbz	r0, 8016ed8 <rcl_action_take_cancel_request+0x64>
 8016ec4:	280a      	cmp	r0, #10
 8016ec6:	d007      	beq.n	8016ed8 <rcl_action_take_cancel_request+0x64>
 8016ec8:	f240 2259 	movw	r2, #601	@ 0x259
 8016ecc:	f640 0399 	movw	r3, #2201	@ 0x899
 8016ed0:	4290      	cmp	r0, r2
 8016ed2:	bf0c      	ite	eq
 8016ed4:	4618      	moveq	r0, r3
 8016ed6:	2001      	movne	r0, #1
 8016ed8:	bd70      	pop	{r4, r5, r6, pc}
 8016eda:	f7f6 f9b5 	bl	800d248 <rcutils_reset_error>
 8016ede:	f640 0098 	movw	r0, #2200	@ 0x898
 8016ee2:	bd70      	pop	{r4, r5, r6, pc}
 8016ee4:	200b      	movs	r0, #11
 8016ee6:	bd70      	pop	{r4, r5, r6, pc}
 8016ee8:	f640 0098 	movw	r0, #2200	@ 0x898
 8016eec:	4770      	bx	lr
 8016eee:	bf00      	nop

08016ef0 <rcl_action_send_cancel_response>:
 8016ef0:	b380      	cbz	r0, 8016f54 <rcl_action_send_cancel_response+0x64>
 8016ef2:	b570      	push	{r4, r5, r6, lr}
 8016ef4:	4604      	mov	r4, r0
 8016ef6:	6800      	ldr	r0, [r0, #0]
 8016ef8:	b338      	cbz	r0, 8016f4a <rcl_action_send_cancel_response+0x5a>
 8016efa:	460d      	mov	r5, r1
 8016efc:	4616      	mov	r6, r2
 8016efe:	f7fe fb15 	bl	801552c <rcl_service_is_valid>
 8016f02:	b300      	cbz	r0, 8016f46 <rcl_action_send_cancel_response+0x56>
 8016f04:	6820      	ldr	r0, [r4, #0]
 8016f06:	3004      	adds	r0, #4
 8016f08:	f7fe fb10 	bl	801552c <rcl_service_is_valid>
 8016f0c:	b1d8      	cbz	r0, 8016f46 <rcl_action_send_cancel_response+0x56>
 8016f0e:	6820      	ldr	r0, [r4, #0]
 8016f10:	3008      	adds	r0, #8
 8016f12:	f7fe fb0b 	bl	801552c <rcl_service_is_valid>
 8016f16:	b1b0      	cbz	r0, 8016f46 <rcl_action_send_cancel_response+0x56>
 8016f18:	6820      	ldr	r0, [r4, #0]
 8016f1a:	300c      	adds	r0, #12
 8016f1c:	f7f5 f9f2 	bl	800c304 <rcl_publisher_is_valid>
 8016f20:	b188      	cbz	r0, 8016f46 <rcl_action_send_cancel_response+0x56>
 8016f22:	6820      	ldr	r0, [r4, #0]
 8016f24:	3010      	adds	r0, #16
 8016f26:	f7f5 f9ed 	bl	800c304 <rcl_publisher_is_valid>
 8016f2a:	b160      	cbz	r0, 8016f46 <rcl_action_send_cancel_response+0x56>
 8016f2c:	b185      	cbz	r5, 8016f50 <rcl_action_send_cancel_response+0x60>
 8016f2e:	b17e      	cbz	r6, 8016f50 <rcl_action_send_cancel_response+0x60>
 8016f30:	6820      	ldr	r0, [r4, #0]
 8016f32:	4632      	mov	r2, r6
 8016f34:	4629      	mov	r1, r5
 8016f36:	3004      	adds	r0, #4
 8016f38:	f7fe fac8 	bl	80154cc <rcl_send_response>
 8016f3c:	b110      	cbz	r0, 8016f44 <rcl_action_send_cancel_response+0x54>
 8016f3e:	2802      	cmp	r0, #2
 8016f40:	bf18      	it	ne
 8016f42:	2001      	movne	r0, #1
 8016f44:	bd70      	pop	{r4, r5, r6, pc}
 8016f46:	f7f6 f97f 	bl	800d248 <rcutils_reset_error>
 8016f4a:	f640 0098 	movw	r0, #2200	@ 0x898
 8016f4e:	bd70      	pop	{r4, r5, r6, pc}
 8016f50:	200b      	movs	r0, #11
 8016f52:	bd70      	pop	{r4, r5, r6, pc}
 8016f54:	f640 0098 	movw	r0, #2200	@ 0x898
 8016f58:	4770      	bx	lr
 8016f5a:	bf00      	nop

08016f5c <rcl_action_wait_set_add_action_server>:
 8016f5c:	2800      	cmp	r0, #0
 8016f5e:	d04d      	beq.n	8016ffc <rcl_action_wait_set_add_action_server+0xa0>
 8016f60:	b570      	push	{r4, r5, r6, lr}
 8016f62:	460c      	mov	r4, r1
 8016f64:	b159      	cbz	r1, 8016f7e <rcl_action_wait_set_add_action_server+0x22>
 8016f66:	4605      	mov	r5, r0
 8016f68:	6808      	ldr	r0, [r1, #0]
 8016f6a:	b140      	cbz	r0, 8016f7e <rcl_action_wait_set_add_action_server+0x22>
 8016f6c:	4616      	mov	r6, r2
 8016f6e:	f7fe fadd 	bl	801552c <rcl_service_is_valid>
 8016f72:	b120      	cbz	r0, 8016f7e <rcl_action_wait_set_add_action_server+0x22>
 8016f74:	6820      	ldr	r0, [r4, #0]
 8016f76:	3004      	adds	r0, #4
 8016f78:	f7fe fad8 	bl	801552c <rcl_service_is_valid>
 8016f7c:	b910      	cbnz	r0, 8016f84 <rcl_action_wait_set_add_action_server+0x28>
 8016f7e:	f640 0098 	movw	r0, #2200	@ 0x898
 8016f82:	bd70      	pop	{r4, r5, r6, pc}
 8016f84:	6820      	ldr	r0, [r4, #0]
 8016f86:	3008      	adds	r0, #8
 8016f88:	f7fe fad0 	bl	801552c <rcl_service_is_valid>
 8016f8c:	2800      	cmp	r0, #0
 8016f8e:	d0f6      	beq.n	8016f7e <rcl_action_wait_set_add_action_server+0x22>
 8016f90:	6820      	ldr	r0, [r4, #0]
 8016f92:	300c      	adds	r0, #12
 8016f94:	f7f5 f9ce 	bl	800c334 <rcl_publisher_is_valid_except_context>
 8016f98:	2800      	cmp	r0, #0
 8016f9a:	d0f0      	beq.n	8016f7e <rcl_action_wait_set_add_action_server+0x22>
 8016f9c:	6820      	ldr	r0, [r4, #0]
 8016f9e:	3010      	adds	r0, #16
 8016fa0:	f7f5 f9c8 	bl	800c334 <rcl_publisher_is_valid_except_context>
 8016fa4:	2800      	cmp	r0, #0
 8016fa6:	d0ea      	beq.n	8016f7e <rcl_action_wait_set_add_action_server+0x22>
 8016fa8:	6821      	ldr	r1, [r4, #0]
 8016faa:	4628      	mov	r0, r5
 8016fac:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 8016fb0:	f7ff fa8a 	bl	80164c8 <rcl_wait_set_add_service>
 8016fb4:	2800      	cmp	r0, #0
 8016fb6:	d1e4      	bne.n	8016f82 <rcl_action_wait_set_add_action_server+0x26>
 8016fb8:	6821      	ldr	r1, [r4, #0]
 8016fba:	4628      	mov	r0, r5
 8016fbc:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 8016fc0:	3104      	adds	r1, #4
 8016fc2:	f7ff fa81 	bl	80164c8 <rcl_wait_set_add_service>
 8016fc6:	2800      	cmp	r0, #0
 8016fc8:	d1db      	bne.n	8016f82 <rcl_action_wait_set_add_action_server+0x26>
 8016fca:	6821      	ldr	r1, [r4, #0]
 8016fcc:	4628      	mov	r0, r5
 8016fce:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 8016fd2:	3108      	adds	r1, #8
 8016fd4:	f7ff fa78 	bl	80164c8 <rcl_wait_set_add_service>
 8016fd8:	2800      	cmp	r0, #0
 8016fda:	d1d2      	bne.n	8016f82 <rcl_action_wait_set_add_action_server+0x26>
 8016fdc:	6821      	ldr	r1, [r4, #0]
 8016fde:	4628      	mov	r0, r5
 8016fe0:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 8016fe4:	3114      	adds	r1, #20
 8016fe6:	f7ff fa13 	bl	8016410 <rcl_wait_set_add_timer>
 8016fea:	2800      	cmp	r0, #0
 8016fec:	d1c9      	bne.n	8016f82 <rcl_action_wait_set_add_action_server+0x26>
 8016fee:	2e00      	cmp	r6, #0
 8016ff0:	d0c7      	beq.n	8016f82 <rcl_action_wait_set_add_action_server+0x26>
 8016ff2:	6823      	ldr	r3, [r4, #0]
 8016ff4:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 8016ff8:	6033      	str	r3, [r6, #0]
 8016ffa:	bd70      	pop	{r4, r5, r6, pc}
 8016ffc:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8017000:	4770      	bx	lr
 8017002:	bf00      	nop

08017004 <rcl_action_server_wait_set_get_entities_ready>:
 8017004:	2800      	cmp	r0, #0
 8017006:	d05a      	beq.n	80170be <rcl_action_server_wait_set_get_entities_ready+0xba>
 8017008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801700a:	460c      	mov	r4, r1
 801700c:	b161      	cbz	r1, 8017028 <rcl_action_server_wait_set_get_entities_ready+0x24>
 801700e:	4605      	mov	r5, r0
 8017010:	6808      	ldr	r0, [r1, #0]
 8017012:	b148      	cbz	r0, 8017028 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8017014:	4616      	mov	r6, r2
 8017016:	461f      	mov	r7, r3
 8017018:	f7fe fa88 	bl	801552c <rcl_service_is_valid>
 801701c:	b120      	cbz	r0, 8017028 <rcl_action_server_wait_set_get_entities_ready+0x24>
 801701e:	6820      	ldr	r0, [r4, #0]
 8017020:	3004      	adds	r0, #4
 8017022:	f7fe fa83 	bl	801552c <rcl_service_is_valid>
 8017026:	b910      	cbnz	r0, 801702e <rcl_action_server_wait_set_get_entities_ready+0x2a>
 8017028:	f640 0098 	movw	r0, #2200	@ 0x898
 801702c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801702e:	6820      	ldr	r0, [r4, #0]
 8017030:	3008      	adds	r0, #8
 8017032:	f7fe fa7b 	bl	801552c <rcl_service_is_valid>
 8017036:	2800      	cmp	r0, #0
 8017038:	d0f6      	beq.n	8017028 <rcl_action_server_wait_set_get_entities_ready+0x24>
 801703a:	6820      	ldr	r0, [r4, #0]
 801703c:	300c      	adds	r0, #12
 801703e:	f7f5 f979 	bl	800c334 <rcl_publisher_is_valid_except_context>
 8017042:	2800      	cmp	r0, #0
 8017044:	d0f0      	beq.n	8017028 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8017046:	6820      	ldr	r0, [r4, #0]
 8017048:	3010      	adds	r0, #16
 801704a:	f7f5 f973 	bl	800c334 <rcl_publisher_is_valid_except_context>
 801704e:	2800      	cmp	r0, #0
 8017050:	d0ea      	beq.n	8017028 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8017052:	b3be      	cbz	r6, 80170c4 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8017054:	b3b7      	cbz	r7, 80170c4 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8017056:	9b06      	ldr	r3, [sp, #24]
 8017058:	b3a3      	cbz	r3, 80170c4 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 801705a:	9b07      	ldr	r3, [sp, #28]
 801705c:	b393      	cbz	r3, 80170c4 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 801705e:	6821      	ldr	r1, [r4, #0]
 8017060:	692a      	ldr	r2, [r5, #16]
 8017062:	6a2c      	ldr	r4, [r5, #32]
 8017064:	f8d1 51e8 	ldr.w	r5, [r1, #488]	@ 0x1e8
 8017068:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 801706c:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 8017070:	f8d1 01e4 	ldr.w	r0, [r1, #484]	@ 0x1e4
 8017074:	f8d1 51dc 	ldr.w	r5, [r1, #476]	@ 0x1dc
 8017078:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 801707c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8017080:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 8017084:	1a64      	subs	r4, r4, r1
 8017086:	fab4 f484 	clz	r4, r4
 801708a:	0964      	lsrs	r4, r4, #5
 801708c:	7034      	strb	r4, [r6, #0]
 801708e:	1d0c      	adds	r4, r1, #4
 8017090:	1b1b      	subs	r3, r3, r4
 8017092:	fab3 f383 	clz	r3, r3
 8017096:	095b      	lsrs	r3, r3, #5
 8017098:	f101 0408 	add.w	r4, r1, #8
 801709c:	703b      	strb	r3, [r7, #0]
 801709e:	f101 0314 	add.w	r3, r1, #20
 80170a2:	1b01      	subs	r1, r0, r4
 80170a4:	1ad3      	subs	r3, r2, r3
 80170a6:	fab1 f181 	clz	r1, r1
 80170aa:	9a06      	ldr	r2, [sp, #24]
 80170ac:	0949      	lsrs	r1, r1, #5
 80170ae:	7011      	strb	r1, [r2, #0]
 80170b0:	fab3 f383 	clz	r3, r3
 80170b4:	9a07      	ldr	r2, [sp, #28]
 80170b6:	095b      	lsrs	r3, r3, #5
 80170b8:	2000      	movs	r0, #0
 80170ba:	7013      	strb	r3, [r2, #0]
 80170bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80170be:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80170c2:	4770      	bx	lr
 80170c4:	200b      	movs	r0, #11
 80170c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080170c8 <_execute_event_handler>:
 80170c8:	2002      	movs	r0, #2
 80170ca:	4770      	bx	lr

080170cc <_cancel_goal_event_handler>:
 80170cc:	2003      	movs	r0, #3
 80170ce:	4770      	bx	lr

080170d0 <_succeed_event_handler>:
 80170d0:	2004      	movs	r0, #4
 80170d2:	4770      	bx	lr

080170d4 <_abort_event_handler>:
 80170d4:	2006      	movs	r0, #6
 80170d6:	4770      	bx	lr

080170d8 <_canceled_event_handler>:
 80170d8:	2005      	movs	r0, #5
 80170da:	4770      	bx	lr

080170dc <rcl_action_transition_goal_state>:
 80170dc:	fa5f fc80 	uxtb.w	ip, r0
 80170e0:	f1bc 0f06 	cmp.w	ip, #6
 80170e4:	d80c      	bhi.n	8017100 <rcl_action_transition_goal_state+0x24>
 80170e6:	2904      	cmp	r1, #4
 80170e8:	d80a      	bhi.n	8017100 <rcl_action_transition_goal_state+0x24>
 80170ea:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 80170ee:	b410      	push	{r4}
 80170f0:	440b      	add	r3, r1
 80170f2:	4c06      	ldr	r4, [pc, #24]	@ (801710c <rcl_action_transition_goal_state+0x30>)
 80170f4:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80170f8:	b123      	cbz	r3, 8017104 <rcl_action_transition_goal_state+0x28>
 80170fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80170fe:	4718      	bx	r3
 8017100:	2000      	movs	r0, #0
 8017102:	4770      	bx	lr
 8017104:	2000      	movs	r0, #0
 8017106:	f85d 4b04 	ldr.w	r4, [sp], #4
 801710a:	4770      	bx	lr
 801710c:	080201ec 	.word	0x080201ec

08017110 <rcl_action_get_zero_initialized_cancel_response>:
 8017110:	b510      	push	{r4, lr}
 8017112:	4c07      	ldr	r4, [pc, #28]	@ (8017130 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 8017114:	4686      	mov	lr, r0
 8017116:	4684      	mov	ip, r0
 8017118:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801711a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801711e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017120:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017124:	6823      	ldr	r3, [r4, #0]
 8017126:	f8cc 3000 	str.w	r3, [ip]
 801712a:	4670      	mov	r0, lr
 801712c:	bd10      	pop	{r4, pc}
 801712e:	bf00      	nop
 8017130:	08020278 	.word	0x08020278

08017134 <rclc_action_send_result_request>:
 8017134:	b1d0      	cbz	r0, 801716c <rclc_action_send_result_request+0x38>
 8017136:	b500      	push	{lr}
 8017138:	4684      	mov	ip, r0
 801713a:	b087      	sub	sp, #28
 801713c:	f8d0 0009 	ldr.w	r0, [r0, #9]
 8017140:	f8dc 100d 	ldr.w	r1, [ip, #13]
 8017144:	f8dc 2011 	ldr.w	r2, [ip, #17]
 8017148:	f8dc 3015 	ldr.w	r3, [ip, #21]
 801714c:	f10d 0e08 	add.w	lr, sp, #8
 8017150:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8017154:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8017158:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 801715c:	a902      	add	r1, sp, #8
 801715e:	3010      	adds	r0, #16
 8017160:	f7ff fbfa 	bl	8016958 <rcl_action_send_result_request>
 8017164:	b920      	cbnz	r0, 8017170 <rclc_action_send_result_request+0x3c>
 8017166:	b007      	add	sp, #28
 8017168:	f85d fb04 	ldr.w	pc, [sp], #4
 801716c:	200b      	movs	r0, #11
 801716e:	4770      	bx	lr
 8017170:	9001      	str	r0, [sp, #4]
 8017172:	f7f6 f869 	bl	800d248 <rcutils_reset_error>
 8017176:	9801      	ldr	r0, [sp, #4]
 8017178:	b007      	add	sp, #28
 801717a:	f85d fb04 	ldr.w	pc, [sp], #4
 801717e:	bf00      	nop

08017180 <rclc_action_take_goal_handle>:
 8017180:	4603      	mov	r3, r0
 8017182:	b158      	cbz	r0, 801719c <rclc_action_take_goal_handle+0x1c>
 8017184:	6880      	ldr	r0, [r0, #8]
 8017186:	b148      	cbz	r0, 801719c <rclc_action_take_goal_handle+0x1c>
 8017188:	6801      	ldr	r1, [r0, #0]
 801718a:	6099      	str	r1, [r3, #8]
 801718c:	2200      	movs	r2, #0
 801718e:	7202      	strb	r2, [r0, #8]
 8017190:	68d9      	ldr	r1, [r3, #12]
 8017192:	6001      	str	r1, [r0, #0]
 8017194:	6202      	str	r2, [r0, #32]
 8017196:	8482      	strh	r2, [r0, #36]	@ 0x24
 8017198:	60d8      	str	r0, [r3, #12]
 801719a:	4770      	bx	lr
 801719c:	4770      	bx	lr
 801719e:	bf00      	nop

080171a0 <rclc_action_remove_used_goal_handle>:
 80171a0:	b180      	cbz	r0, 80171c4 <rclc_action_remove_used_goal_handle+0x24>
 80171a2:	b179      	cbz	r1, 80171c4 <rclc_action_remove_used_goal_handle+0x24>
 80171a4:	68c3      	ldr	r3, [r0, #12]
 80171a6:	4299      	cmp	r1, r3
 80171a8:	d00d      	beq.n	80171c6 <rclc_action_remove_used_goal_handle+0x26>
 80171aa:	b12b      	cbz	r3, 80171b8 <rclc_action_remove_used_goal_handle+0x18>
 80171ac:	681a      	ldr	r2, [r3, #0]
 80171ae:	4291      	cmp	r1, r2
 80171b0:	d003      	beq.n	80171ba <rclc_action_remove_used_goal_handle+0x1a>
 80171b2:	4613      	mov	r3, r2
 80171b4:	2b00      	cmp	r3, #0
 80171b6:	d1f9      	bne.n	80171ac <rclc_action_remove_used_goal_handle+0xc>
 80171b8:	4770      	bx	lr
 80171ba:	680a      	ldr	r2, [r1, #0]
 80171bc:	601a      	str	r2, [r3, #0]
 80171be:	6883      	ldr	r3, [r0, #8]
 80171c0:	600b      	str	r3, [r1, #0]
 80171c2:	6081      	str	r1, [r0, #8]
 80171c4:	4770      	bx	lr
 80171c6:	680b      	ldr	r3, [r1, #0]
 80171c8:	60c3      	str	r3, [r0, #12]
 80171ca:	e7f8      	b.n	80171be <rclc_action_remove_used_goal_handle+0x1e>

080171cc <rclc_action_find_goal_handle_by_uuid>:
 80171cc:	b538      	push	{r3, r4, r5, lr}
 80171ce:	b180      	cbz	r0, 80171f2 <rclc_action_find_goal_handle_by_uuid+0x26>
 80171d0:	460d      	mov	r5, r1
 80171d2:	b181      	cbz	r1, 80171f6 <rclc_action_find_goal_handle_by_uuid+0x2a>
 80171d4:	68c4      	ldr	r4, [r0, #12]
 80171d6:	b914      	cbnz	r4, 80171de <rclc_action_find_goal_handle_by_uuid+0x12>
 80171d8:	e009      	b.n	80171ee <rclc_action_find_goal_handle_by_uuid+0x22>
 80171da:	6824      	ldr	r4, [r4, #0]
 80171dc:	b13c      	cbz	r4, 80171ee <rclc_action_find_goal_handle_by_uuid+0x22>
 80171de:	2210      	movs	r2, #16
 80171e0:	4629      	mov	r1, r5
 80171e2:	f104 0009 	add.w	r0, r4, #9
 80171e6:	f006 f8f9 	bl	801d3dc <memcmp>
 80171ea:	2800      	cmp	r0, #0
 80171ec:	d1f5      	bne.n	80171da <rclc_action_find_goal_handle_by_uuid+0xe>
 80171ee:	4620      	mov	r0, r4
 80171f0:	bd38      	pop	{r3, r4, r5, pc}
 80171f2:	4604      	mov	r4, r0
 80171f4:	e7fb      	b.n	80171ee <rclc_action_find_goal_handle_by_uuid+0x22>
 80171f6:	460c      	mov	r4, r1
 80171f8:	e7f9      	b.n	80171ee <rclc_action_find_goal_handle_by_uuid+0x22>
 80171fa:	bf00      	nop

080171fc <rclc_action_find_first_handle_by_status>:
 80171fc:	b140      	cbz	r0, 8017210 <rclc_action_find_first_handle_by_status+0x14>
 80171fe:	68c0      	ldr	r0, [r0, #12]
 8017200:	b910      	cbnz	r0, 8017208 <rclc_action_find_first_handle_by_status+0xc>
 8017202:	e005      	b.n	8017210 <rclc_action_find_first_handle_by_status+0x14>
 8017204:	6800      	ldr	r0, [r0, #0]
 8017206:	b118      	cbz	r0, 8017210 <rclc_action_find_first_handle_by_status+0x14>
 8017208:	f990 3008 	ldrsb.w	r3, [r0, #8]
 801720c:	428b      	cmp	r3, r1
 801720e:	d1f9      	bne.n	8017204 <rclc_action_find_first_handle_by_status+0x8>
 8017210:	4770      	bx	lr
 8017212:	bf00      	nop

08017214 <rclc_action_find_first_terminated_handle>:
 8017214:	b140      	cbz	r0, 8017228 <rclc_action_find_first_terminated_handle+0x14>
 8017216:	68c0      	ldr	r0, [r0, #12]
 8017218:	b910      	cbnz	r0, 8017220 <rclc_action_find_first_terminated_handle+0xc>
 801721a:	e005      	b.n	8017228 <rclc_action_find_first_terminated_handle+0x14>
 801721c:	6800      	ldr	r0, [r0, #0]
 801721e:	b118      	cbz	r0, 8017228 <rclc_action_find_first_terminated_handle+0x14>
 8017220:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8017224:	2b03      	cmp	r3, #3
 8017226:	ddf9      	ble.n	801721c <rclc_action_find_first_terminated_handle+0x8>
 8017228:	4770      	bx	lr
 801722a:	bf00      	nop

0801722c <rclc_action_find_handle_by_goal_request_sequence_number>:
 801722c:	b170      	cbz	r0, 801724c <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 801722e:	68c0      	ldr	r0, [r0, #12]
 8017230:	b160      	cbz	r0, 801724c <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8017232:	b410      	push	{r4}
 8017234:	e001      	b.n	801723a <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 8017236:	6800      	ldr	r0, [r0, #0]
 8017238:	b128      	cbz	r0, 8017246 <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 801723a:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 801723e:	4299      	cmp	r1, r3
 8017240:	bf08      	it	eq
 8017242:	4294      	cmpeq	r4, r2
 8017244:	d1f7      	bne.n	8017236 <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 8017246:	f85d 4b04 	ldr.w	r4, [sp], #4
 801724a:	4770      	bx	lr
 801724c:	4770      	bx	lr
 801724e:	bf00      	nop

08017250 <rclc_action_find_handle_by_result_request_sequence_number>:
 8017250:	b170      	cbz	r0, 8017270 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8017252:	68c0      	ldr	r0, [r0, #12]
 8017254:	b160      	cbz	r0, 8017270 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8017256:	b410      	push	{r4}
 8017258:	e001      	b.n	801725e <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 801725a:	6800      	ldr	r0, [r0, #0]
 801725c:	b128      	cbz	r0, 801726a <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 801725e:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 8017262:	4299      	cmp	r1, r3
 8017264:	bf08      	it	eq
 8017266:	4294      	cmpeq	r4, r2
 8017268:	d1f7      	bne.n	801725a <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 801726a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801726e:	4770      	bx	lr
 8017270:	4770      	bx	lr
 8017272:	bf00      	nop

08017274 <rclc_action_find_handle_by_cancel_request_sequence_number>:
 8017274:	b170      	cbz	r0, 8017294 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8017276:	68c0      	ldr	r0, [r0, #12]
 8017278:	b160      	cbz	r0, 8017294 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 801727a:	b410      	push	{r4}
 801727c:	e001      	b.n	8017282 <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 801727e:	6800      	ldr	r0, [r0, #0]
 8017280:	b128      	cbz	r0, 801728e <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 8017282:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 8017286:	4299      	cmp	r1, r3
 8017288:	bf08      	it	eq
 801728a:	4294      	cmpeq	r4, r2
 801728c:	d1f7      	bne.n	801727e <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 801728e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017292:	4770      	bx	lr
 8017294:	4770      	bx	lr
 8017296:	bf00      	nop

08017298 <rclc_action_find_first_handle_with_goal_response>:
 8017298:	b140      	cbz	r0, 80172ac <rclc_action_find_first_handle_with_goal_response+0x14>
 801729a:	68c0      	ldr	r0, [r0, #12]
 801729c:	b910      	cbnz	r0, 80172a4 <rclc_action_find_first_handle_with_goal_response+0xc>
 801729e:	e005      	b.n	80172ac <rclc_action_find_first_handle_with_goal_response+0x14>
 80172a0:	6800      	ldr	r0, [r0, #0]
 80172a2:	b118      	cbz	r0, 80172ac <rclc_action_find_first_handle_with_goal_response+0x14>
 80172a4:	f890 3020 	ldrb.w	r3, [r0, #32]
 80172a8:	2b00      	cmp	r3, #0
 80172aa:	d0f9      	beq.n	80172a0 <rclc_action_find_first_handle_with_goal_response+0x8>
 80172ac:	4770      	bx	lr
 80172ae:	bf00      	nop

080172b0 <rclc_action_find_first_handle_with_result_response>:
 80172b0:	b140      	cbz	r0, 80172c4 <rclc_action_find_first_handle_with_result_response+0x14>
 80172b2:	68c0      	ldr	r0, [r0, #12]
 80172b4:	b910      	cbnz	r0, 80172bc <rclc_action_find_first_handle_with_result_response+0xc>
 80172b6:	e005      	b.n	80172c4 <rclc_action_find_first_handle_with_result_response+0x14>
 80172b8:	6800      	ldr	r0, [r0, #0]
 80172ba:	b118      	cbz	r0, 80172c4 <rclc_action_find_first_handle_with_result_response+0x14>
 80172bc:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 80172c0:	2b00      	cmp	r3, #0
 80172c2:	d0f9      	beq.n	80172b8 <rclc_action_find_first_handle_with_result_response+0x8>
 80172c4:	4770      	bx	lr
 80172c6:	bf00      	nop

080172c8 <rclc_action_server_response_goal_request>:
 80172c8:	b198      	cbz	r0, 80172f2 <rclc_action_server_response_goal_request+0x2a>
 80172ca:	b510      	push	{r4, lr}
 80172cc:	6844      	ldr	r4, [r0, #4]
 80172ce:	b086      	sub	sp, #24
 80172d0:	2200      	movs	r2, #0
 80172d2:	e9cd 2203 	strd	r2, r2, [sp, #12]
 80172d6:	460b      	mov	r3, r1
 80172d8:	9205      	str	r2, [sp, #20]
 80172da:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 80172de:	aa03      	add	r2, sp, #12
 80172e0:	f104 0010 	add.w	r0, r4, #16
 80172e4:	f88d 300c 	strb.w	r3, [sp, #12]
 80172e8:	f7ff fd52 	bl	8016d90 <rcl_action_send_goal_response>
 80172ec:	b918      	cbnz	r0, 80172f6 <rclc_action_server_response_goal_request+0x2e>
 80172ee:	b006      	add	sp, #24
 80172f0:	bd10      	pop	{r4, pc}
 80172f2:	200b      	movs	r0, #11
 80172f4:	4770      	bx	lr
 80172f6:	9001      	str	r0, [sp, #4]
 80172f8:	f7f5 ffa6 	bl	800d248 <rcutils_reset_error>
 80172fc:	9801      	ldr	r0, [sp, #4]
 80172fe:	b006      	add	sp, #24
 8017300:	bd10      	pop	{r4, pc}
 8017302:	bf00      	nop
 8017304:	0000      	movs	r0, r0
	...

08017308 <rclc_action_server_goal_cancel_accept>:
 8017308:	b310      	cbz	r0, 8017350 <rclc_action_server_goal_cancel_accept+0x48>
 801730a:	b510      	push	{r4, lr}
 801730c:	b090      	sub	sp, #64	@ 0x40
 801730e:	4604      	mov	r4, r0
 8017310:	a806      	add	r0, sp, #24
 8017312:	f7ff fefd 	bl	8017110 <rcl_action_get_zero_initialized_cancel_response>
 8017316:	2300      	movs	r3, #0
 8017318:	f8d4 0009 	ldr.w	r0, [r4, #9]
 801731c:	f8d4 100d 	ldr.w	r1, [r4, #13]
 8017320:	f8d4 2011 	ldr.w	r2, [r4, #17]
 8017324:	f88d 3018 	strb.w	r3, [sp, #24]
 8017328:	f8d4 3015 	ldr.w	r3, [r4, #21]
 801732c:	f8cd d01c 	str.w	sp, [sp, #28]
 8017330:	46ec      	mov	ip, sp
 8017332:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017336:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8017358 <rclc_action_server_goal_cancel_accept+0x50>
 801733a:	6860      	ldr	r0, [r4, #4]
 801733c:	aa06      	add	r2, sp, #24
 801733e:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 8017342:	3010      	adds	r0, #16
 8017344:	ed8d 7b08 	vstr	d7, [sp, #32]
 8017348:	f7ff fdd2 	bl	8016ef0 <rcl_action_send_cancel_response>
 801734c:	b010      	add	sp, #64	@ 0x40
 801734e:	bd10      	pop	{r4, pc}
 8017350:	200b      	movs	r0, #11
 8017352:	4770      	bx	lr
 8017354:	f3af 8000 	nop.w
 8017358:	00000001 	.word	0x00000001
 801735c:	00000001 	.word	0x00000001

08017360 <rclc_action_server_goal_cancel_reject>:
 8017360:	b082      	sub	sp, #8
 8017362:	b530      	push	{r4, r5, lr}
 8017364:	b08b      	sub	sp, #44	@ 0x2c
 8017366:	ac0e      	add	r4, sp, #56	@ 0x38
 8017368:	e884 000c 	stmia.w	r4, {r2, r3}
 801736c:	b188      	cbz	r0, 8017392 <rclc_action_server_goal_cancel_reject+0x32>
 801736e:	4604      	mov	r4, r0
 8017370:	a801      	add	r0, sp, #4
 8017372:	460d      	mov	r5, r1
 8017374:	f7ff fecc 	bl	8017110 <rcl_action_get_zero_initialized_cancel_response>
 8017378:	aa01      	add	r2, sp, #4
 801737a:	a90e      	add	r1, sp, #56	@ 0x38
 801737c:	f104 0010 	add.w	r0, r4, #16
 8017380:	f88d 5004 	strb.w	r5, [sp, #4]
 8017384:	f7ff fdb4 	bl	8016ef0 <rcl_action_send_cancel_response>
 8017388:	b00b      	add	sp, #44	@ 0x2c
 801738a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801738e:	b002      	add	sp, #8
 8017390:	4770      	bx	lr
 8017392:	200b      	movs	r0, #11
 8017394:	b00b      	add	sp, #44	@ 0x2c
 8017396:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801739a:	b002      	add	sp, #8
 801739c:	4770      	bx	lr
 801739e:	bf00      	nop

080173a0 <__atomic_load_8>:
 80173a0:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 80173a4:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 80173a8:	4a15      	ldr	r2, [pc, #84]	@ (8017400 <__atomic_load_8+0x60>)
 80173aa:	4b16      	ldr	r3, [pc, #88]	@ (8017404 <__atomic_load_8+0x64>)
 80173ac:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80173b0:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 80173b4:	fb02 f101 	mul.w	r1, r2, r1
 80173b8:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 80173bc:	fba3 2301 	umull	r2, r3, r3, r1
 80173c0:	091b      	lsrs	r3, r3, #4
 80173c2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80173c6:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 80173ca:	b4f0      	push	{r4, r5, r6, r7}
 80173cc:	4d0e      	ldr	r5, [pc, #56]	@ (8017408 <__atomic_load_8+0x68>)
 80173ce:	1ac9      	subs	r1, r1, r3
 80173d0:	194a      	adds	r2, r1, r5
 80173d2:	f04f 0c01 	mov.w	ip, #1
 80173d6:	e8d2 3f4f 	ldrexb	r3, [r2]
 80173da:	e8c2 cf44 	strexb	r4, ip, [r2]
 80173de:	2c00      	cmp	r4, #0
 80173e0:	d1f9      	bne.n	80173d6 <__atomic_load_8+0x36>
 80173e2:	f3bf 8f5b 	dmb	ish
 80173e6:	b2dc      	uxtb	r4, r3
 80173e8:	2c00      	cmp	r4, #0
 80173ea:	d1f4      	bne.n	80173d6 <__atomic_load_8+0x36>
 80173ec:	e9d0 6700 	ldrd	r6, r7, [r0]
 80173f0:	f3bf 8f5b 	dmb	ish
 80173f4:	546b      	strb	r3, [r5, r1]
 80173f6:	4630      	mov	r0, r6
 80173f8:	4639      	mov	r1, r7
 80173fa:	bcf0      	pop	{r4, r5, r6, r7}
 80173fc:	4770      	bx	lr
 80173fe:	bf00      	nop
 8017400:	27d4eb2d 	.word	0x27d4eb2d
 8017404:	b21642c9 	.word	0xb21642c9
 8017408:	20019628 	.word	0x20019628

0801740c <__atomic_store_8>:
 801740c:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8017410:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8017414:	b570      	push	{r4, r5, r6, lr}
 8017416:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 801741a:	4c14      	ldr	r4, [pc, #80]	@ (801746c <__atomic_store_8+0x60>)
 801741c:	4e14      	ldr	r6, [pc, #80]	@ (8017470 <__atomic_store_8+0x64>)
 801741e:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8017422:	fb04 f101 	mul.w	r1, r4, r1
 8017426:	4c13      	ldr	r4, [pc, #76]	@ (8017474 <__atomic_store_8+0x68>)
 8017428:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 801742c:	fba4 5401 	umull	r5, r4, r4, r1
 8017430:	0924      	lsrs	r4, r4, #4
 8017432:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8017436:	ebc4 04c5 	rsb	r4, r4, r5, lsl #3
 801743a:	eba1 0e04 	sub.w	lr, r1, r4
 801743e:	f04f 0501 	mov.w	r5, #1
 8017442:	eb0e 0c06 	add.w	ip, lr, r6
 8017446:	e8dc 1f4f 	ldrexb	r1, [ip]
 801744a:	e8cc 5f44 	strexb	r4, r5, [ip]
 801744e:	2c00      	cmp	r4, #0
 8017450:	d1f9      	bne.n	8017446 <__atomic_store_8+0x3a>
 8017452:	f3bf 8f5b 	dmb	ish
 8017456:	b2cc      	uxtb	r4, r1
 8017458:	2c00      	cmp	r4, #0
 801745a:	d1f4      	bne.n	8017446 <__atomic_store_8+0x3a>
 801745c:	e9c0 2300 	strd	r2, r3, [r0]
 8017460:	f3bf 8f5b 	dmb	ish
 8017464:	f806 100e 	strb.w	r1, [r6, lr]
 8017468:	bd70      	pop	{r4, r5, r6, pc}
 801746a:	bf00      	nop
 801746c:	27d4eb2d 	.word	0x27d4eb2d
 8017470:	20019628 	.word	0x20019628
 8017474:	b21642c9 	.word	0xb21642c9

08017478 <__atomic_exchange_8>:
 8017478:	b5f0      	push	{r4, r5, r6, r7, lr}
 801747a:	ea80 4e10 	eor.w	lr, r0, r0, lsr #16
 801747e:	f08e 0e3d 	eor.w	lr, lr, #61	@ 0x3d
 8017482:	4917      	ldr	r1, [pc, #92]	@ (80174e0 <__atomic_exchange_8+0x68>)
 8017484:	4f17      	ldr	r7, [pc, #92]	@ (80174e4 <__atomic_exchange_8+0x6c>)
 8017486:	eb0e 0ece 	add.w	lr, lr, lr, lsl #3
 801748a:	ea8e 1e1e 	eor.w	lr, lr, lr, lsr #4
 801748e:	fb01 fe0e 	mul.w	lr, r1, lr
 8017492:	4915      	ldr	r1, [pc, #84]	@ (80174e8 <__atomic_exchange_8+0x70>)
 8017494:	ea8e 3ede 	eor.w	lr, lr, lr, lsr #15
 8017498:	4606      	mov	r6, r0
 801749a:	fba1 010e 	umull	r0, r1, r1, lr
 801749e:	0909      	lsrs	r1, r1, #4
 80174a0:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 80174a4:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
 80174a8:	ebae 0e01 	sub.w	lr, lr, r1
 80174ac:	f04f 0501 	mov.w	r5, #1
 80174b0:	eb0e 0107 	add.w	r1, lr, r7
 80174b4:	e8d1 cf4f 	ldrexb	ip, [r1]
 80174b8:	e8c1 5f40 	strexb	r0, r5, [r1]
 80174bc:	2800      	cmp	r0, #0
 80174be:	d1f9      	bne.n	80174b4 <__atomic_exchange_8+0x3c>
 80174c0:	f3bf 8f5b 	dmb	ish
 80174c4:	fa5f f48c 	uxtb.w	r4, ip
 80174c8:	2c00      	cmp	r4, #0
 80174ca:	d1f3      	bne.n	80174b4 <__atomic_exchange_8+0x3c>
 80174cc:	e9d6 0100 	ldrd	r0, r1, [r6]
 80174d0:	e9c6 2300 	strd	r2, r3, [r6]
 80174d4:	f3bf 8f5b 	dmb	ish
 80174d8:	f807 c00e 	strb.w	ip, [r7, lr]
 80174dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80174de:	bf00      	nop
 80174e0:	27d4eb2d 	.word	0x27d4eb2d
 80174e4:	20019628 	.word	0x20019628
 80174e8:	b21642c9 	.word	0xb21642c9

080174ec <rcutils_get_env>:
 80174ec:	b150      	cbz	r0, 8017504 <rcutils_get_env+0x18>
 80174ee:	b510      	push	{r4, lr}
 80174f0:	460c      	mov	r4, r1
 80174f2:	b909      	cbnz	r1, 80174f8 <rcutils_get_env+0xc>
 80174f4:	4806      	ldr	r0, [pc, #24]	@ (8017510 <rcutils_get_env+0x24>)
 80174f6:	bd10      	pop	{r4, pc}
 80174f8:	f005 fb52 	bl	801cba0 <getenv>
 80174fc:	b120      	cbz	r0, 8017508 <rcutils_get_env+0x1c>
 80174fe:	6020      	str	r0, [r4, #0]
 8017500:	2000      	movs	r0, #0
 8017502:	bd10      	pop	{r4, pc}
 8017504:	4803      	ldr	r0, [pc, #12]	@ (8017514 <rcutils_get_env+0x28>)
 8017506:	4770      	bx	lr
 8017508:	4b03      	ldr	r3, [pc, #12]	@ (8017518 <rcutils_get_env+0x2c>)
 801750a:	6023      	str	r3, [r4, #0]
 801750c:	e7f8      	b.n	8017500 <rcutils_get_env+0x14>
 801750e:	bf00      	nop
 8017510:	0801f400 	.word	0x0801f400
 8017514:	0801f3e4 	.word	0x0801f3e4
 8017518:	0801f8c0 	.word	0x0801f8c0

0801751c <rcutils_format_string_limit>:
 801751c:	b40f      	push	{r0, r1, r2, r3}
 801751e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017520:	b083      	sub	sp, #12
 8017522:	ac08      	add	r4, sp, #32
 8017524:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8017526:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801752a:	b376      	cbz	r6, 801758a <rcutils_format_string_limit+0x6e>
 801752c:	4620      	mov	r0, r4
 801752e:	f7f5 fe65 	bl	800d1fc <rcutils_allocator_is_valid>
 8017532:	b350      	cbz	r0, 801758a <rcutils_format_string_limit+0x6e>
 8017534:	2100      	movs	r1, #0
 8017536:	ab0f      	add	r3, sp, #60	@ 0x3c
 8017538:	4632      	mov	r2, r6
 801753a:	4608      	mov	r0, r1
 801753c:	e9cd 3300 	strd	r3, r3, [sp]
 8017540:	f000 f8f8 	bl	8017734 <rcutils_vsnprintf>
 8017544:	1c43      	adds	r3, r0, #1
 8017546:	4605      	mov	r5, r0
 8017548:	d01f      	beq.n	801758a <rcutils_format_string_limit+0x6e>
 801754a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801754c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801754e:	1c47      	adds	r7, r0, #1
 8017550:	429f      	cmp	r7, r3
 8017552:	bf84      	itt	hi
 8017554:	461f      	movhi	r7, r3
 8017556:	f103 35ff 	addhi.w	r5, r3, #4294967295	@ 0xffffffff
 801755a:	4638      	mov	r0, r7
 801755c:	9b08      	ldr	r3, [sp, #32]
 801755e:	4798      	blx	r3
 8017560:	4604      	mov	r4, r0
 8017562:	b190      	cbz	r0, 801758a <rcutils_format_string_limit+0x6e>
 8017564:	9b01      	ldr	r3, [sp, #4]
 8017566:	4632      	mov	r2, r6
 8017568:	4639      	mov	r1, r7
 801756a:	f000 f8e3 	bl	8017734 <rcutils_vsnprintf>
 801756e:	2800      	cmp	r0, #0
 8017570:	db07      	blt.n	8017582 <rcutils_format_string_limit+0x66>
 8017572:	2300      	movs	r3, #0
 8017574:	5563      	strb	r3, [r4, r5]
 8017576:	4620      	mov	r0, r4
 8017578:	b003      	add	sp, #12
 801757a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801757e:	b004      	add	sp, #16
 8017580:	4770      	bx	lr
 8017582:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017584:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8017586:	4620      	mov	r0, r4
 8017588:	4798      	blx	r3
 801758a:	2400      	movs	r4, #0
 801758c:	e7f3      	b.n	8017576 <rcutils_format_string_limit+0x5a>
 801758e:	bf00      	nop

08017590 <rcutils_repl_str>:
 8017590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017594:	4699      	mov	r9, r3
 8017596:	b089      	sub	sp, #36	@ 0x24
 8017598:	4603      	mov	r3, r0
 801759a:	4648      	mov	r0, r9
 801759c:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80175a0:	4698      	mov	r8, r3
 80175a2:	9300      	str	r3, [sp, #0]
 80175a4:	460c      	mov	r4, r1
 80175a6:	f7f5 fe29 	bl	800d1fc <rcutils_allocator_is_valid>
 80175aa:	2800      	cmp	r0, #0
 80175ac:	f000 80a3 	beq.w	80176f6 <rcutils_repl_str+0x166>
 80175b0:	4620      	mov	r0, r4
 80175b2:	f7e8 fe85 	bl	80002c0 <strlen>
 80175b6:	f04f 0a00 	mov.w	sl, #0
 80175ba:	f8d9 b010 	ldr.w	fp, [r9, #16]
 80175be:	9001      	str	r0, [sp, #4]
 80175c0:	4657      	mov	r7, sl
 80175c2:	4655      	mov	r5, sl
 80175c4:	2610      	movs	r6, #16
 80175c6:	e01e      	b.n	8017606 <rcutils_repl_str+0x76>
 80175c8:	3501      	adds	r5, #1
 80175ca:	45aa      	cmp	sl, r5
 80175cc:	d212      	bcs.n	80175f4 <rcutils_repl_str+0x64>
 80175ce:	44b2      	add	sl, r6
 80175d0:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80175d4:	ea4f 018a 	mov.w	r1, sl, lsl #2
 80175d8:	4798      	blx	r3
 80175da:	2800      	cmp	r0, #0
 80175dc:	f000 8088 	beq.w	80176f0 <rcutils_repl_str+0x160>
 80175e0:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80175e4:	f5b6 1f80 	cmp.w	r6, #1048576	@ 0x100000
 80175e8:	f8d9 b010 	ldr.w	fp, [r9, #16]
 80175ec:	4607      	mov	r7, r0
 80175ee:	bf28      	it	cs
 80175f0:	f44f 1680 	movcs.w	r6, #1048576	@ 0x100000
 80175f4:	9a00      	ldr	r2, [sp, #0]
 80175f6:	eb07 0385 	add.w	r3, r7, r5, lsl #2
 80175fa:	1aa2      	subs	r2, r4, r2
 80175fc:	f843 2c04 	str.w	r2, [r3, #-4]
 8017600:	9b01      	ldr	r3, [sp, #4]
 8017602:	eb04 0803 	add.w	r8, r4, r3
 8017606:	9902      	ldr	r1, [sp, #8]
 8017608:	4640      	mov	r0, r8
 801760a:	f005 ff4b 	bl	801d4a4 <strstr>
 801760e:	4604      	mov	r4, r0
 8017610:	465a      	mov	r2, fp
 8017612:	4638      	mov	r0, r7
 8017614:	2c00      	cmp	r4, #0
 8017616:	d1d7      	bne.n	80175c8 <rcutils_repl_str+0x38>
 8017618:	4640      	mov	r0, r8
 801761a:	f7e8 fe51 	bl	80002c0 <strlen>
 801761e:	9b00      	ldr	r3, [sp, #0]
 8017620:	eba8 0803 	sub.w	r8, r8, r3
 8017624:	eb08 0300 	add.w	r3, r8, r0
 8017628:	9304      	str	r3, [sp, #16]
 801762a:	f8d9 8000 	ldr.w	r8, [r9]
 801762e:	2d00      	cmp	r5, #0
 8017630:	d03f      	beq.n	80176b2 <rcutils_repl_str+0x122>
 8017632:	9803      	ldr	r0, [sp, #12]
 8017634:	f7e8 fe44 	bl	80002c0 <strlen>
 8017638:	4606      	mov	r6, r0
 801763a:	9801      	ldr	r0, [sp, #4]
 801763c:	9a04      	ldr	r2, [sp, #16]
 801763e:	1a33      	subs	r3, r6, r0
 8017640:	fb05 2a03 	mla	sl, r5, r3, r2
 8017644:	4659      	mov	r1, fp
 8017646:	f10a 0001 	add.w	r0, sl, #1
 801764a:	47c0      	blx	r8
 801764c:	4683      	mov	fp, r0
 801764e:	2800      	cmp	r0, #0
 8017650:	d04e      	beq.n	80176f0 <rcutils_repl_str+0x160>
 8017652:	683a      	ldr	r2, [r7, #0]
 8017654:	9900      	ldr	r1, [sp, #0]
 8017656:	f005 ff80 	bl	801d55a <memcpy>
 801765a:	683b      	ldr	r3, [r7, #0]
 801765c:	9706      	str	r7, [sp, #24]
 801765e:	1e6a      	subs	r2, r5, #1
 8017660:	445b      	add	r3, fp
 8017662:	46a8      	mov	r8, r5
 8017664:	9202      	str	r2, [sp, #8]
 8017666:	4625      	mov	r5, r4
 8017668:	f8cd 901c 	str.w	r9, [sp, #28]
 801766c:	461c      	mov	r4, r3
 801766e:	9903      	ldr	r1, [sp, #12]
 8017670:	4632      	mov	r2, r6
 8017672:	4620      	mov	r0, r4
 8017674:	f005 ff71 	bl	801d55a <memcpy>
 8017678:	9b01      	ldr	r3, [sp, #4]
 801767a:	f857 2b04 	ldr.w	r2, [r7], #4
 801767e:	eb02 0c03 	add.w	ip, r2, r3
 8017682:	9b00      	ldr	r3, [sp, #0]
 8017684:	eb03 010c 	add.w	r1, r3, ip
 8017688:	9b02      	ldr	r3, [sp, #8]
 801768a:	4434      	add	r4, r6
 801768c:	429d      	cmp	r5, r3
 801768e:	4620      	mov	r0, r4
 8017690:	d022      	beq.n	80176d8 <rcutils_repl_str+0x148>
 8017692:	683a      	ldr	r2, [r7, #0]
 8017694:	eba2 090c 	sub.w	r9, r2, ip
 8017698:	464a      	mov	r2, r9
 801769a:	3501      	adds	r5, #1
 801769c:	f005 ff5d 	bl	801d55a <memcpy>
 80176a0:	45a8      	cmp	r8, r5
 80176a2:	444c      	add	r4, r9
 80176a4:	d1e3      	bne.n	801766e <rcutils_repl_str+0xde>
 80176a6:	2300      	movs	r3, #0
 80176a8:	e9dd 7906 	ldrd	r7, r9, [sp, #24]
 80176ac:	f80b 300a 	strb.w	r3, [fp, sl]
 80176b0:	e008      	b.n	80176c4 <rcutils_repl_str+0x134>
 80176b2:	4618      	mov	r0, r3
 80176b4:	4659      	mov	r1, fp
 80176b6:	3001      	adds	r0, #1
 80176b8:	47c0      	blx	r8
 80176ba:	4683      	mov	fp, r0
 80176bc:	b110      	cbz	r0, 80176c4 <rcutils_repl_str+0x134>
 80176be:	9900      	ldr	r1, [sp, #0]
 80176c0:	f005 ff43 	bl	801d54a <strcpy>
 80176c4:	4638      	mov	r0, r7
 80176c6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80176ca:	f8d9 1010 	ldr.w	r1, [r9, #16]
 80176ce:	4798      	blx	r3
 80176d0:	4658      	mov	r0, fp
 80176d2:	b009      	add	sp, #36	@ 0x24
 80176d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80176d8:	9b04      	ldr	r3, [sp, #16]
 80176da:	eba3 020c 	sub.w	r2, r3, ip
 80176de:	9205      	str	r2, [sp, #20]
 80176e0:	3501      	adds	r5, #1
 80176e2:	f005 ff3a 	bl	801d55a <memcpy>
 80176e6:	9a05      	ldr	r2, [sp, #20]
 80176e8:	45a8      	cmp	r8, r5
 80176ea:	4414      	add	r4, r2
 80176ec:	d1bf      	bne.n	801766e <rcutils_repl_str+0xde>
 80176ee:	e7da      	b.n	80176a6 <rcutils_repl_str+0x116>
 80176f0:	f04f 0b00 	mov.w	fp, #0
 80176f4:	e7e6      	b.n	80176c4 <rcutils_repl_str+0x134>
 80176f6:	4683      	mov	fp, r0
 80176f8:	4658      	mov	r0, fp
 80176fa:	b009      	add	sp, #36	@ 0x24
 80176fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017700 <rcutils_snprintf>:
 8017700:	b40c      	push	{r2, r3}
 8017702:	b530      	push	{r4, r5, lr}
 8017704:	b083      	sub	sp, #12
 8017706:	ab06      	add	r3, sp, #24
 8017708:	f853 2b04 	ldr.w	r2, [r3], #4
 801770c:	9301      	str	r3, [sp, #4]
 801770e:	b152      	cbz	r2, 8017726 <rcutils_snprintf+0x26>
 8017710:	b138      	cbz	r0, 8017722 <rcutils_snprintf+0x22>
 8017712:	b141      	cbz	r1, 8017726 <rcutils_snprintf+0x26>
 8017714:	f005 fcc6 	bl	801d0a4 <vsniprintf>
 8017718:	b003      	add	sp, #12
 801771a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801771e:	b002      	add	sp, #8
 8017720:	4770      	bx	lr
 8017722:	2900      	cmp	r1, #0
 8017724:	d0f6      	beq.n	8017714 <rcutils_snprintf+0x14>
 8017726:	f005 fee3 	bl	801d4f0 <__errno>
 801772a:	2316      	movs	r3, #22
 801772c:	6003      	str	r3, [r0, #0]
 801772e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017732:	e7f1      	b.n	8017718 <rcutils_snprintf+0x18>

08017734 <rcutils_vsnprintf>:
 8017734:	b570      	push	{r4, r5, r6, lr}
 8017736:	b13a      	cbz	r2, 8017748 <rcutils_vsnprintf+0x14>
 8017738:	b120      	cbz	r0, 8017744 <rcutils_vsnprintf+0x10>
 801773a:	b129      	cbz	r1, 8017748 <rcutils_vsnprintf+0x14>
 801773c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017740:	f005 bcb0 	b.w	801d0a4 <vsniprintf>
 8017744:	2900      	cmp	r1, #0
 8017746:	d0f9      	beq.n	801773c <rcutils_vsnprintf+0x8>
 8017748:	f005 fed2 	bl	801d4f0 <__errno>
 801774c:	2316      	movs	r3, #22
 801774e:	6003      	str	r3, [r0, #0]
 8017750:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017754:	bd70      	pop	{r4, r5, r6, pc}
 8017756:	bf00      	nop

08017758 <rcutils_strdup>:
 8017758:	b084      	sub	sp, #16
 801775a:	b570      	push	{r4, r5, r6, lr}
 801775c:	b086      	sub	sp, #24
 801775e:	f10d 0c2c 	add.w	ip, sp, #44	@ 0x2c
 8017762:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
 8017766:	4604      	mov	r4, r0
 8017768:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801776c:	f10d 0e04 	add.w	lr, sp, #4
 8017770:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8017774:	f8dc 3000 	ldr.w	r3, [ip]
 8017778:	f8ce 3000 	str.w	r3, [lr]
 801777c:	b304      	cbz	r4, 80177c0 <rcutils_strdup+0x68>
 801777e:	a801      	add	r0, sp, #4
 8017780:	f7f5 fd3c 	bl	800d1fc <rcutils_allocator_is_valid>
 8017784:	b1e0      	cbz	r0, 80177c0 <rcutils_strdup+0x68>
 8017786:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801778a:	2100      	movs	r1, #0
 801778c:	4620      	mov	r0, r4
 801778e:	f7e8 fd47 	bl	8000220 <memchr>
 8017792:	b190      	cbz	r0, 80177ba <rcutils_strdup+0x62>
 8017794:	1b06      	subs	r6, r0, r4
 8017796:	1c70      	adds	r0, r6, #1
 8017798:	9b01      	ldr	r3, [sp, #4]
 801779a:	9905      	ldr	r1, [sp, #20]
 801779c:	4798      	blx	r3
 801779e:	4605      	mov	r5, r0
 80177a0:	b128      	cbz	r0, 80177ae <rcutils_strdup+0x56>
 80177a2:	4632      	mov	r2, r6
 80177a4:	4621      	mov	r1, r4
 80177a6:	f005 fed8 	bl	801d55a <memcpy>
 80177aa:	2300      	movs	r3, #0
 80177ac:	55ab      	strb	r3, [r5, r6]
 80177ae:	4628      	mov	r0, r5
 80177b0:	b006      	add	sp, #24
 80177b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80177b6:	b004      	add	sp, #16
 80177b8:	4770      	bx	lr
 80177ba:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 80177be:	e7eb      	b.n	8017798 <rcutils_strdup+0x40>
 80177c0:	2500      	movs	r5, #0
 80177c2:	e7f4      	b.n	80177ae <rcutils_strdup+0x56>

080177c4 <rcutils_strndup>:
 80177c4:	b082      	sub	sp, #8
 80177c6:	b570      	push	{r4, r5, r6, lr}
 80177c8:	ac04      	add	r4, sp, #16
 80177ca:	e884 000c 	stmia.w	r4, {r2, r3}
 80177ce:	b1e8      	cbz	r0, 801780c <rcutils_strndup+0x48>
 80177d0:	4605      	mov	r5, r0
 80177d2:	a804      	add	r0, sp, #16
 80177d4:	460c      	mov	r4, r1
 80177d6:	f7f5 fd11 	bl	800d1fc <rcutils_allocator_is_valid>
 80177da:	b1b8      	cbz	r0, 801780c <rcutils_strndup+0x48>
 80177dc:	4622      	mov	r2, r4
 80177de:	2100      	movs	r1, #0
 80177e0:	4628      	mov	r0, r5
 80177e2:	f7e8 fd1d 	bl	8000220 <memchr>
 80177e6:	b100      	cbz	r0, 80177ea <rcutils_strndup+0x26>
 80177e8:	1b44      	subs	r4, r0, r5
 80177ea:	9b04      	ldr	r3, [sp, #16]
 80177ec:	9908      	ldr	r1, [sp, #32]
 80177ee:	1c60      	adds	r0, r4, #1
 80177f0:	4798      	blx	r3
 80177f2:	4606      	mov	r6, r0
 80177f4:	b128      	cbz	r0, 8017802 <rcutils_strndup+0x3e>
 80177f6:	4622      	mov	r2, r4
 80177f8:	4629      	mov	r1, r5
 80177fa:	f005 feae 	bl	801d55a <memcpy>
 80177fe:	2300      	movs	r3, #0
 8017800:	5533      	strb	r3, [r6, r4]
 8017802:	4630      	mov	r0, r6
 8017804:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017808:	b002      	add	sp, #8
 801780a:	4770      	bx	lr
 801780c:	2600      	movs	r6, #0
 801780e:	4630      	mov	r0, r6
 8017810:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017814:	b002      	add	sp, #8
 8017816:	4770      	bx	lr

08017818 <rcutils_get_zero_initialized_string_map>:
 8017818:	4b01      	ldr	r3, [pc, #4]	@ (8017820 <rcutils_get_zero_initialized_string_map+0x8>)
 801781a:	2000      	movs	r0, #0
 801781c:	6018      	str	r0, [r3, #0]
 801781e:	4770      	bx	lr
 8017820:	20019640 	.word	0x20019640

08017824 <rcutils_string_map_reserve>:
 8017824:	2800      	cmp	r0, #0
 8017826:	d04e      	beq.n	80178c6 <rcutils_string_map_reserve+0xa2>
 8017828:	b530      	push	{r4, r5, lr}
 801782a:	6803      	ldr	r3, [r0, #0]
 801782c:	b087      	sub	sp, #28
 801782e:	4604      	mov	r4, r0
 8017830:	2b00      	cmp	r3, #0
 8017832:	d043      	beq.n	80178bc <rcutils_string_map_reserve+0x98>
 8017834:	f103 0c0c 	add.w	ip, r3, #12
 8017838:	460d      	mov	r5, r1
 801783a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801783e:	f10d 0e04 	add.w	lr, sp, #4
 8017842:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8017846:	f8dc 3000 	ldr.w	r3, [ip]
 801784a:	f8ce 3000 	str.w	r3, [lr]
 801784e:	a801      	add	r0, sp, #4
 8017850:	f7f5 fcd4 	bl	800d1fc <rcutils_allocator_is_valid>
 8017854:	b308      	cbz	r0, 801789a <rcutils_string_map_reserve+0x76>
 8017856:	6823      	ldr	r3, [r4, #0]
 8017858:	6899      	ldr	r1, [r3, #8]
 801785a:	42a9      	cmp	r1, r5
 801785c:	d829      	bhi.n	80178b2 <rcutils_string_map_reserve+0x8e>
 801785e:	685a      	ldr	r2, [r3, #4]
 8017860:	42aa      	cmp	r2, r5
 8017862:	d024      	beq.n	80178ae <rcutils_string_map_reserve+0x8a>
 8017864:	b1e5      	cbz	r5, 80178a0 <rcutils_string_map_reserve+0x7c>
 8017866:	f1b5 5f00 	cmp.w	r5, #536870912	@ 0x20000000
 801786a:	d22a      	bcs.n	80178c2 <rcutils_string_map_reserve+0x9e>
 801786c:	6818      	ldr	r0, [r3, #0]
 801786e:	9a05      	ldr	r2, [sp, #20]
 8017870:	9b03      	ldr	r3, [sp, #12]
 8017872:	00e9      	lsls	r1, r5, #3
 8017874:	4798      	blx	r3
 8017876:	b320      	cbz	r0, 80178c2 <rcutils_string_map_reserve+0x9e>
 8017878:	6824      	ldr	r4, [r4, #0]
 801787a:	6861      	ldr	r1, [r4, #4]
 801787c:	6020      	str	r0, [r4, #0]
 801787e:	42a9      	cmp	r1, r5
 8017880:	d214      	bcs.n	80178ac <rcutils_string_map_reserve+0x88>
 8017882:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
 8017886:	1a69      	subs	r1, r5, r1
 8017888:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 801788c:	2200      	movs	r2, #0
 801788e:	e9c3 2200 	strd	r2, r2, [r3]
 8017892:	3308      	adds	r3, #8
 8017894:	428b      	cmp	r3, r1
 8017896:	d1fa      	bne.n	801788e <rcutils_string_map_reserve+0x6a>
 8017898:	e008      	b.n	80178ac <rcutils_string_map_reserve+0x88>
 801789a:	200b      	movs	r0, #11
 801789c:	b007      	add	sp, #28
 801789e:	bd30      	pop	{r4, r5, pc}
 80178a0:	9a02      	ldr	r2, [sp, #8]
 80178a2:	9905      	ldr	r1, [sp, #20]
 80178a4:	6818      	ldr	r0, [r3, #0]
 80178a6:	4790      	blx	r2
 80178a8:	6824      	ldr	r4, [r4, #0]
 80178aa:	6025      	str	r5, [r4, #0]
 80178ac:	6065      	str	r5, [r4, #4]
 80178ae:	2000      	movs	r0, #0
 80178b0:	e7f4      	b.n	801789c <rcutils_string_map_reserve+0x78>
 80178b2:	4620      	mov	r0, r4
 80178b4:	f7ff ffb6 	bl	8017824 <rcutils_string_map_reserve>
 80178b8:	b007      	add	sp, #28
 80178ba:	bd30      	pop	{r4, r5, pc}
 80178bc:	201f      	movs	r0, #31
 80178be:	b007      	add	sp, #28
 80178c0:	bd30      	pop	{r4, r5, pc}
 80178c2:	200a      	movs	r0, #10
 80178c4:	e7ea      	b.n	801789c <rcutils_string_map_reserve+0x78>
 80178c6:	200b      	movs	r0, #11
 80178c8:	4770      	bx	lr
 80178ca:	bf00      	nop

080178cc <rcutils_string_map_init>:
 80178cc:	b082      	sub	sp, #8
 80178ce:	b570      	push	{r4, r5, r6, lr}
 80178d0:	ac04      	add	r4, sp, #16
 80178d2:	e884 000c 	stmia.w	r4, {r2, r3}
 80178d6:	b378      	cbz	r0, 8017938 <rcutils_string_map_init+0x6c>
 80178d8:	6806      	ldr	r6, [r0, #0]
 80178da:	4604      	mov	r4, r0
 80178dc:	b12e      	cbz	r6, 80178ea <rcutils_string_map_init+0x1e>
 80178de:	251e      	movs	r5, #30
 80178e0:	4628      	mov	r0, r5
 80178e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80178e6:	b002      	add	sp, #8
 80178e8:	4770      	bx	lr
 80178ea:	a804      	add	r0, sp, #16
 80178ec:	460d      	mov	r5, r1
 80178ee:	f7f5 fc85 	bl	800d1fc <rcutils_allocator_is_valid>
 80178f2:	b308      	cbz	r0, 8017938 <rcutils_string_map_init+0x6c>
 80178f4:	9b04      	ldr	r3, [sp, #16]
 80178f6:	9908      	ldr	r1, [sp, #32]
 80178f8:	2020      	movs	r0, #32
 80178fa:	4798      	blx	r3
 80178fc:	6020      	str	r0, [r4, #0]
 80178fe:	b308      	cbz	r0, 8017944 <rcutils_string_map_init+0x78>
 8017900:	f10d 0e10 	add.w	lr, sp, #16
 8017904:	e9c0 6600 	strd	r6, r6, [r0]
 8017908:	6086      	str	r6, [r0, #8]
 801790a:	f100 0c0c 	add.w	ip, r0, #12
 801790e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017912:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017916:	f8de 3000 	ldr.w	r3, [lr]
 801791a:	f8cc 3000 	str.w	r3, [ip]
 801791e:	4629      	mov	r1, r5
 8017920:	4620      	mov	r0, r4
 8017922:	f7ff ff7f 	bl	8017824 <rcutils_string_map_reserve>
 8017926:	4605      	mov	r5, r0
 8017928:	2800      	cmp	r0, #0
 801792a:	d0d9      	beq.n	80178e0 <rcutils_string_map_init+0x14>
 801792c:	9b05      	ldr	r3, [sp, #20]
 801792e:	9908      	ldr	r1, [sp, #32]
 8017930:	6820      	ldr	r0, [r4, #0]
 8017932:	4798      	blx	r3
 8017934:	6026      	str	r6, [r4, #0]
 8017936:	e7d3      	b.n	80178e0 <rcutils_string_map_init+0x14>
 8017938:	250b      	movs	r5, #11
 801793a:	4628      	mov	r0, r5
 801793c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017940:	b002      	add	sp, #8
 8017942:	4770      	bx	lr
 8017944:	250a      	movs	r5, #10
 8017946:	e7cb      	b.n	80178e0 <rcutils_string_map_init+0x14>

08017948 <rcutils_string_map_fini>:
 8017948:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801794c:	b086      	sub	sp, #24
 801794e:	2800      	cmp	r0, #0
 8017950:	d04f      	beq.n	80179f2 <rcutils_string_map_fini+0xaa>
 8017952:	6805      	ldr	r5, [r0, #0]
 8017954:	4606      	mov	r6, r0
 8017956:	2d00      	cmp	r5, #0
 8017958:	d046      	beq.n	80179e8 <rcutils_string_map_fini+0xa0>
 801795a:	686b      	ldr	r3, [r5, #4]
 801795c:	b353      	cbz	r3, 80179b4 <rcutils_string_map_fini+0x6c>
 801795e:	2400      	movs	r4, #0
 8017960:	682a      	ldr	r2, [r5, #0]
 8017962:	4627      	mov	r7, r4
 8017964:	f852 0034 	ldr.w	r0, [r2, r4, lsl #3]
 8017968:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 801796c:	b1f8      	cbz	r0, 80179ae <rcutils_string_map_fini+0x66>
 801796e:	f8d5 a01c 	ldr.w	sl, [r5, #28]
 8017972:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8017976:	4651      	mov	r1, sl
 8017978:	47c8      	blx	r9
 801797a:	682b      	ldr	r3, [r5, #0]
 801797c:	eb03 0208 	add.w	r2, r3, r8
 8017980:	f843 7034 	str.w	r7, [r3, r4, lsl #3]
 8017984:	6850      	ldr	r0, [r2, #4]
 8017986:	4651      	mov	r1, sl
 8017988:	47c8      	blx	r9
 801798a:	682a      	ldr	r2, [r5, #0]
 801798c:	68ab      	ldr	r3, [r5, #8]
 801798e:	4442      	add	r2, r8
 8017990:	3b01      	subs	r3, #1
 8017992:	6057      	str	r7, [r2, #4]
 8017994:	60ab      	str	r3, [r5, #8]
 8017996:	6835      	ldr	r5, [r6, #0]
 8017998:	686b      	ldr	r3, [r5, #4]
 801799a:	3401      	adds	r4, #1
 801799c:	429c      	cmp	r4, r3
 801799e:	d209      	bcs.n	80179b4 <rcutils_string_map_fini+0x6c>
 80179a0:	682a      	ldr	r2, [r5, #0]
 80179a2:	f852 0034 	ldr.w	r0, [r2, r4, lsl #3]
 80179a6:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 80179aa:	2800      	cmp	r0, #0
 80179ac:	d1df      	bne.n	801796e <rcutils_string_map_fini+0x26>
 80179ae:	3401      	adds	r4, #1
 80179b0:	42a3      	cmp	r3, r4
 80179b2:	d8d7      	bhi.n	8017964 <rcutils_string_map_fini+0x1c>
 80179b4:	2100      	movs	r1, #0
 80179b6:	4630      	mov	r0, r6
 80179b8:	f7ff ff34 	bl	8017824 <rcutils_string_map_reserve>
 80179bc:	4604      	mov	r4, r0
 80179be:	b118      	cbz	r0, 80179c8 <rcutils_string_map_fini+0x80>
 80179c0:	4620      	mov	r0, r4
 80179c2:	b006      	add	sp, #24
 80179c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80179c8:	6835      	ldr	r5, [r6, #0]
 80179ca:	350c      	adds	r5, #12
 80179cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80179ce:	af01      	add	r7, sp, #4
 80179d0:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80179d2:	682b      	ldr	r3, [r5, #0]
 80179d4:	603b      	str	r3, [r7, #0]
 80179d6:	a801      	add	r0, sp, #4
 80179d8:	f7f5 fc10 	bl	800d1fc <rcutils_allocator_is_valid>
 80179dc:	b148      	cbz	r0, 80179f2 <rcutils_string_map_fini+0xaa>
 80179de:	9b02      	ldr	r3, [sp, #8]
 80179e0:	9905      	ldr	r1, [sp, #20]
 80179e2:	6830      	ldr	r0, [r6, #0]
 80179e4:	4798      	blx	r3
 80179e6:	6034      	str	r4, [r6, #0]
 80179e8:	2400      	movs	r4, #0
 80179ea:	4620      	mov	r0, r4
 80179ec:	b006      	add	sp, #24
 80179ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80179f2:	240b      	movs	r4, #11
 80179f4:	4620      	mov	r0, r4
 80179f6:	b006      	add	sp, #24
 80179f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080179fc <rcutils_string_map_getn>:
 80179fc:	b338      	cbz	r0, 8017a4e <rcutils_string_map_getn+0x52>
 80179fe:	6800      	ldr	r0, [r0, #0]
 8017a00:	b328      	cbz	r0, 8017a4e <rcutils_string_map_getn+0x52>
 8017a02:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017a06:	460e      	mov	r6, r1
 8017a08:	b1c1      	cbz	r1, 8017a3c <rcutils_string_map_getn+0x40>
 8017a0a:	e9d0 9800 	ldrd	r9, r8, [r0]
 8017a0e:	f1b8 0f00 	cmp.w	r8, #0
 8017a12:	d013      	beq.n	8017a3c <rcutils_string_map_getn+0x40>
 8017a14:	4617      	mov	r7, r2
 8017a16:	2400      	movs	r4, #0
 8017a18:	f859 5034 	ldr.w	r5, [r9, r4, lsl #3]
 8017a1c:	4628      	mov	r0, r5
 8017a1e:	b155      	cbz	r5, 8017a36 <rcutils_string_map_getn+0x3a>
 8017a20:	f7e8 fc4e 	bl	80002c0 <strlen>
 8017a24:	42b8      	cmp	r0, r7
 8017a26:	4602      	mov	r2, r0
 8017a28:	4629      	mov	r1, r5
 8017a2a:	bf38      	it	cc
 8017a2c:	463a      	movcc	r2, r7
 8017a2e:	4630      	mov	r0, r6
 8017a30:	f005 fd13 	bl	801d45a <strncmp>
 8017a34:	b128      	cbz	r0, 8017a42 <rcutils_string_map_getn+0x46>
 8017a36:	3401      	adds	r4, #1
 8017a38:	45a0      	cmp	r8, r4
 8017a3a:	d1ed      	bne.n	8017a18 <rcutils_string_map_getn+0x1c>
 8017a3c:	2000      	movs	r0, #0
 8017a3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017a42:	eb09 09c4 	add.w	r9, r9, r4, lsl #3
 8017a46:	f8d9 0004 	ldr.w	r0, [r9, #4]
 8017a4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017a4e:	4770      	bx	lr

08017a50 <rmw_get_zero_initialized_context>:
 8017a50:	b530      	push	{r4, r5, lr}
 8017a52:	b097      	sub	sp, #92	@ 0x5c
 8017a54:	4604      	mov	r4, r0
 8017a56:	4668      	mov	r0, sp
 8017a58:	f000 f812 	bl	8017a80 <rmw_get_zero_initialized_init_options>
 8017a5c:	2300      	movs	r3, #0
 8017a5e:	2200      	movs	r2, #0
 8017a60:	e9c4 2300 	strd	r2, r3, [r4]
 8017a64:	2500      	movs	r5, #0
 8017a66:	4669      	mov	r1, sp
 8017a68:	2258      	movs	r2, #88	@ 0x58
 8017a6a:	f104 0010 	add.w	r0, r4, #16
 8017a6e:	60a5      	str	r5, [r4, #8]
 8017a70:	f005 fd73 	bl	801d55a <memcpy>
 8017a74:	4620      	mov	r0, r4
 8017a76:	e9c4 551a 	strd	r5, r5, [r4, #104]	@ 0x68
 8017a7a:	b017      	add	sp, #92	@ 0x5c
 8017a7c:	bd30      	pop	{r4, r5, pc}
 8017a7e:	bf00      	nop

08017a80 <rmw_get_zero_initialized_init_options>:
 8017a80:	b530      	push	{r4, r5, lr}
 8017a82:	b08b      	sub	sp, #44	@ 0x2c
 8017a84:	466d      	mov	r5, sp
 8017a86:	4604      	mov	r4, r0
 8017a88:	4628      	mov	r0, r5
 8017a8a:	f000 f821 	bl	8017ad0 <rmw_get_default_security_options>
 8017a8e:	a802      	add	r0, sp, #8
 8017a90:	f004 fafa 	bl	801c088 <rmw_get_zero_initialized_discovery_options>
 8017a94:	2258      	movs	r2, #88	@ 0x58
 8017a96:	2100      	movs	r1, #0
 8017a98:	4620      	mov	r0, r4
 8017a9a:	f005 fcc9 	bl	801d430 <memset>
 8017a9e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8017aa2:	f104 0310 	add.w	r3, r4, #16
 8017aa6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8017aaa:	f10d 0c08 	add.w	ip, sp, #8
 8017aae:	e883 0003 	stmia.w	r3, {r0, r1}
 8017ab2:	60e2      	str	r2, [r4, #12]
 8017ab4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8017ab8:	f104 0e1c 	add.w	lr, r4, #28
 8017abc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8017ac0:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8017ac4:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8017ac8:	4620      	mov	r0, r4
 8017aca:	b00b      	add	sp, #44	@ 0x2c
 8017acc:	bd30      	pop	{r4, r5, pc}
 8017ace:	bf00      	nop

08017ad0 <rmw_get_default_security_options>:
 8017ad0:	2200      	movs	r2, #0
 8017ad2:	7002      	strb	r2, [r0, #0]
 8017ad4:	6042      	str	r2, [r0, #4]
 8017ad6:	4770      	bx	lr

08017ad8 <rmw_subscription_content_filter_options_fini>:
 8017ad8:	b1b0      	cbz	r0, 8017b08 <rmw_subscription_content_filter_options_fini+0x30>
 8017ada:	b538      	push	{r3, r4, r5, lr}
 8017adc:	4604      	mov	r4, r0
 8017ade:	4608      	mov	r0, r1
 8017ae0:	460d      	mov	r5, r1
 8017ae2:	f7f5 fb8b 	bl	800d1fc <rcutils_allocator_is_valid>
 8017ae6:	b168      	cbz	r0, 8017b04 <rmw_subscription_content_filter_options_fini+0x2c>
 8017ae8:	6820      	ldr	r0, [r4, #0]
 8017aea:	b120      	cbz	r0, 8017af6 <rmw_subscription_content_filter_options_fini+0x1e>
 8017aec:	686b      	ldr	r3, [r5, #4]
 8017aee:	6929      	ldr	r1, [r5, #16]
 8017af0:	4798      	blx	r3
 8017af2:	2300      	movs	r3, #0
 8017af4:	6023      	str	r3, [r4, #0]
 8017af6:	1d20      	adds	r0, r4, #4
 8017af8:	f004 faa0 	bl	801c03c <rcutils_string_array_fini>
 8017afc:	3800      	subs	r0, #0
 8017afe:	bf18      	it	ne
 8017b00:	2001      	movne	r0, #1
 8017b02:	bd38      	pop	{r3, r4, r5, pc}
 8017b04:	200b      	movs	r0, #11
 8017b06:	bd38      	pop	{r3, r4, r5, pc}
 8017b08:	200b      	movs	r0, #11
 8017b0a:	4770      	bx	lr

08017b0c <rmw_get_default_subscription_options>:
 8017b0c:	2200      	movs	r2, #0
 8017b0e:	e9c0 2200 	strd	r2, r2, [r0]
 8017b12:	6082      	str	r2, [r0, #8]
 8017b14:	4770      	bx	lr
 8017b16:	bf00      	nop

08017b18 <rmw_time_equal>:
 8017b18:	b570      	push	{r4, r5, r6, lr}
 8017b1a:	b084      	sub	sp, #16
 8017b1c:	ac04      	add	r4, sp, #16
 8017b1e:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8017b22:	4925      	ldr	r1, [pc, #148]	@ (8017bb8 <rmw_time_equal+0xa0>)
 8017b24:	9c01      	ldr	r4, [sp, #4]
 8017b26:	2202      	movs	r2, #2
 8017b28:	4281      	cmp	r1, r0
 8017b2a:	41a2      	sbcs	r2, r4
 8017b2c:	d333      	bcc.n	8017b96 <rmw_time_equal+0x7e>
 8017b2e:	4603      	mov	r3, r0
 8017b30:	4822      	ldr	r0, [pc, #136]	@ (8017bbc <rmw_time_equal+0xa4>)
 8017b32:	e9dd 1502 	ldrd	r1, r5, [sp, #8]
 8017b36:	fba3 3200 	umull	r3, r2, r3, r0
 8017b3a:	fb00 2204 	mla	r2, r0, r4, r2
 8017b3e:	43de      	mvns	r6, r3
 8017b40:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8017b44:	1a84      	subs	r4, r0, r2
 8017b46:	428e      	cmp	r6, r1
 8017b48:	41ac      	sbcs	r4, r5
 8017b4a:	d332      	bcc.n	8017bb2 <rmw_time_equal+0x9a>
 8017b4c:	eb11 0e03 	adds.w	lr, r1, r3
 8017b50:	eb42 0005 	adc.w	r0, r2, r5
 8017b54:	9b08      	ldr	r3, [sp, #32]
 8017b56:	4918      	ldr	r1, [pc, #96]	@ (8017bb8 <rmw_time_equal+0xa0>)
 8017b58:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8017b5a:	2202      	movs	r2, #2
 8017b5c:	4299      	cmp	r1, r3
 8017b5e:	41aa      	sbcs	r2, r5
 8017b60:	d31e      	bcc.n	8017ba0 <rmw_time_equal+0x88>
 8017b62:	4c16      	ldr	r4, [pc, #88]	@ (8017bbc <rmw_time_equal+0xa4>)
 8017b64:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8017b66:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8017b68:	fba3 3104 	umull	r3, r1, r3, r4
 8017b6c:	fb04 1105 	mla	r1, r4, r5, r1
 8017b70:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 8017b74:	43dd      	mvns	r5, r3
 8017b76:	ebac 0401 	sub.w	r4, ip, r1
 8017b7a:	4295      	cmp	r5, r2
 8017b7c:	41b4      	sbcs	r4, r6
 8017b7e:	d314      	bcc.n	8017baa <rmw_time_equal+0x92>
 8017b80:	18d2      	adds	r2, r2, r3
 8017b82:	eb41 0306 	adc.w	r3, r1, r6
 8017b86:	4283      	cmp	r3, r0
 8017b88:	bf08      	it	eq
 8017b8a:	4572      	cmpeq	r2, lr
 8017b8c:	bf0c      	ite	eq
 8017b8e:	2001      	moveq	r0, #1
 8017b90:	2000      	movne	r0, #0
 8017b92:	b004      	add	sp, #16
 8017b94:	bd70      	pop	{r4, r5, r6, pc}
 8017b96:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 8017b9a:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8017b9e:	e7d9      	b.n	8017b54 <rmw_time_equal+0x3c>
 8017ba0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8017ba4:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8017ba8:	e7ed      	b.n	8017b86 <rmw_time_equal+0x6e>
 8017baa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8017bae:	4663      	mov	r3, ip
 8017bb0:	e7e9      	b.n	8017b86 <rmw_time_equal+0x6e>
 8017bb2:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 8017bb6:	e7cd      	b.n	8017b54 <rmw_time_equal+0x3c>
 8017bb8:	25c17d04 	.word	0x25c17d04
 8017bbc:	3b9aca00 	.word	0x3b9aca00

08017bc0 <rmw_time_total_nsec>:
 8017bc0:	b430      	push	{r4, r5}
 8017bc2:	b084      	sub	sp, #16
 8017bc4:	ac04      	add	r4, sp, #16
 8017bc6:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8017bca:	4914      	ldr	r1, [pc, #80]	@ (8017c1c <rmw_time_total_nsec+0x5c>)
 8017bcc:	9c01      	ldr	r4, [sp, #4]
 8017bce:	2202      	movs	r2, #2
 8017bd0:	4281      	cmp	r1, r0
 8017bd2:	41a2      	sbcs	r2, r4
 8017bd4:	d315      	bcc.n	8017c02 <rmw_time_total_nsec+0x42>
 8017bd6:	4912      	ldr	r1, [pc, #72]	@ (8017c20 <rmw_time_total_nsec+0x60>)
 8017bd8:	4603      	mov	r3, r0
 8017bda:	e9dd 0502 	ldrd	r0, r5, [sp, #8]
 8017bde:	fba3 3201 	umull	r3, r2, r3, r1
 8017be2:	fb01 2204 	mla	r2, r1, r4, r2
 8017be6:	ea6f 0c03 	mvn.w	ip, r3
 8017bea:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8017bee:	1a8c      	subs	r4, r1, r2
 8017bf0:	4584      	cmp	ip, r0
 8017bf2:	41ac      	sbcs	r4, r5
 8017bf4:	d30c      	bcc.n	8017c10 <rmw_time_total_nsec+0x50>
 8017bf6:	1818      	adds	r0, r3, r0
 8017bf8:	eb42 0105 	adc.w	r1, r2, r5
 8017bfc:	b004      	add	sp, #16
 8017bfe:	bc30      	pop	{r4, r5}
 8017c00:	4770      	bx	lr
 8017c02:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017c06:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8017c0a:	b004      	add	sp, #16
 8017c0c:	bc30      	pop	{r4, r5}
 8017c0e:	4770      	bx	lr
 8017c10:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017c14:	b004      	add	sp, #16
 8017c16:	bc30      	pop	{r4, r5}
 8017c18:	4770      	bx	lr
 8017c1a:	bf00      	nop
 8017c1c:	25c17d04 	.word	0x25c17d04
 8017c20:	3b9aca00 	.word	0x3b9aca00

08017c24 <rmw_get_zero_initialized_message_info>:
 8017c24:	b510      	push	{r4, lr}
 8017c26:	2238      	movs	r2, #56	@ 0x38
 8017c28:	4604      	mov	r4, r0
 8017c2a:	2100      	movs	r1, #0
 8017c2c:	f005 fc00 	bl	801d430 <memset>
 8017c30:	4620      	mov	r0, r4
 8017c32:	bd10      	pop	{r4, pc}

08017c34 <rmw_validate_full_topic_name>:
 8017c34:	2800      	cmp	r0, #0
 8017c36:	d049      	beq.n	8017ccc <rmw_validate_full_topic_name+0x98>
 8017c38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017c3c:	460e      	mov	r6, r1
 8017c3e:	2900      	cmp	r1, #0
 8017c40:	d056      	beq.n	8017cf0 <rmw_validate_full_topic_name+0xbc>
 8017c42:	4615      	mov	r5, r2
 8017c44:	4604      	mov	r4, r0
 8017c46:	f7e8 fb3b 	bl	80002c0 <strlen>
 8017c4a:	b150      	cbz	r0, 8017c62 <rmw_validate_full_topic_name+0x2e>
 8017c4c:	7823      	ldrb	r3, [r4, #0]
 8017c4e:	2b2f      	cmp	r3, #47	@ 0x2f
 8017c50:	d00c      	beq.n	8017c6c <rmw_validate_full_topic_name+0x38>
 8017c52:	2302      	movs	r3, #2
 8017c54:	6033      	str	r3, [r6, #0]
 8017c56:	b10d      	cbz	r5, 8017c5c <rmw_validate_full_topic_name+0x28>
 8017c58:	2300      	movs	r3, #0
 8017c5a:	602b      	str	r3, [r5, #0]
 8017c5c:	2000      	movs	r0, #0
 8017c5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017c62:	2301      	movs	r3, #1
 8017c64:	6033      	str	r3, [r6, #0]
 8017c66:	2d00      	cmp	r5, #0
 8017c68:	d1f6      	bne.n	8017c58 <rmw_validate_full_topic_name+0x24>
 8017c6a:	e7f7      	b.n	8017c5c <rmw_validate_full_topic_name+0x28>
 8017c6c:	1e47      	subs	r7, r0, #1
 8017c6e:	5de3      	ldrb	r3, [r4, r7]
 8017c70:	2b2f      	cmp	r3, #47	@ 0x2f
 8017c72:	d03f      	beq.n	8017cf4 <rmw_validate_full_topic_name+0xc0>
 8017c74:	1e63      	subs	r3, r4, #1
 8017c76:	4621      	mov	r1, r4
 8017c78:	eb03 0e00 	add.w	lr, r3, r0
 8017c7c:	469c      	mov	ip, r3
 8017c7e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8017c82:	2a5f      	cmp	r2, #95	@ 0x5f
 8017c84:	d006      	beq.n	8017c94 <rmw_validate_full_topic_name+0x60>
 8017c86:	d823      	bhi.n	8017cd0 <rmw_validate_full_topic_name+0x9c>
 8017c88:	2a39      	cmp	r2, #57	@ 0x39
 8017c8a:	f1a2 0841 	sub.w	r8, r2, #65	@ 0x41
 8017c8e:	d82b      	bhi.n	8017ce8 <rmw_validate_full_topic_name+0xb4>
 8017c90:	2a2e      	cmp	r2, #46	@ 0x2e
 8017c92:	d920      	bls.n	8017cd6 <rmw_validate_full_topic_name+0xa2>
 8017c94:	4573      	cmp	r3, lr
 8017c96:	d1f1      	bne.n	8017c7c <rmw_validate_full_topic_name+0x48>
 8017c98:	4c21      	ldr	r4, [pc, #132]	@ (8017d20 <rmw_validate_full_topic_name+0xec>)
 8017c9a:	2300      	movs	r3, #0
 8017c9c:	e003      	b.n	8017ca6 <rmw_validate_full_topic_name+0x72>
 8017c9e:	4298      	cmp	r0, r3
 8017ca0:	f101 0101 	add.w	r1, r1, #1
 8017ca4:	d02c      	beq.n	8017d00 <rmw_validate_full_topic_name+0xcc>
 8017ca6:	429f      	cmp	r7, r3
 8017ca8:	f103 0301 	add.w	r3, r3, #1
 8017cac:	d0f7      	beq.n	8017c9e <rmw_validate_full_topic_name+0x6a>
 8017cae:	780a      	ldrb	r2, [r1, #0]
 8017cb0:	2a2f      	cmp	r2, #47	@ 0x2f
 8017cb2:	d1f4      	bne.n	8017c9e <rmw_validate_full_topic_name+0x6a>
 8017cb4:	784a      	ldrb	r2, [r1, #1]
 8017cb6:	2a2f      	cmp	r2, #47	@ 0x2f
 8017cb8:	d02d      	beq.n	8017d16 <rmw_validate_full_topic_name+0xe2>
 8017cba:	5ca2      	ldrb	r2, [r4, r2]
 8017cbc:	0752      	lsls	r2, r2, #29
 8017cbe:	d5ee      	bpl.n	8017c9e <rmw_validate_full_topic_name+0x6a>
 8017cc0:	2206      	movs	r2, #6
 8017cc2:	6032      	str	r2, [r6, #0]
 8017cc4:	2d00      	cmp	r5, #0
 8017cc6:	d0c9      	beq.n	8017c5c <rmw_validate_full_topic_name+0x28>
 8017cc8:	602b      	str	r3, [r5, #0]
 8017cca:	e7c7      	b.n	8017c5c <rmw_validate_full_topic_name+0x28>
 8017ccc:	200b      	movs	r0, #11
 8017cce:	4770      	bx	lr
 8017cd0:	3a61      	subs	r2, #97	@ 0x61
 8017cd2:	2a19      	cmp	r2, #25
 8017cd4:	d9de      	bls.n	8017c94 <rmw_validate_full_topic_name+0x60>
 8017cd6:	2304      	movs	r3, #4
 8017cd8:	6033      	str	r3, [r6, #0]
 8017cda:	2d00      	cmp	r5, #0
 8017cdc:	d0be      	beq.n	8017c5c <rmw_validate_full_topic_name+0x28>
 8017cde:	f1c4 0401 	rsb	r4, r4, #1
 8017ce2:	4464      	add	r4, ip
 8017ce4:	602c      	str	r4, [r5, #0]
 8017ce6:	e7b9      	b.n	8017c5c <rmw_validate_full_topic_name+0x28>
 8017ce8:	f1b8 0f19 	cmp.w	r8, #25
 8017cec:	d9d2      	bls.n	8017c94 <rmw_validate_full_topic_name+0x60>
 8017cee:	e7f2      	b.n	8017cd6 <rmw_validate_full_topic_name+0xa2>
 8017cf0:	200b      	movs	r0, #11
 8017cf2:	e7b4      	b.n	8017c5e <rmw_validate_full_topic_name+0x2a>
 8017cf4:	2303      	movs	r3, #3
 8017cf6:	6033      	str	r3, [r6, #0]
 8017cf8:	2d00      	cmp	r5, #0
 8017cfa:	d0af      	beq.n	8017c5c <rmw_validate_full_topic_name+0x28>
 8017cfc:	602f      	str	r7, [r5, #0]
 8017cfe:	e7ad      	b.n	8017c5c <rmw_validate_full_topic_name+0x28>
 8017d00:	28f7      	cmp	r0, #247	@ 0xf7
 8017d02:	d802      	bhi.n	8017d0a <rmw_validate_full_topic_name+0xd6>
 8017d04:	2300      	movs	r3, #0
 8017d06:	6033      	str	r3, [r6, #0]
 8017d08:	e7a8      	b.n	8017c5c <rmw_validate_full_topic_name+0x28>
 8017d0a:	2307      	movs	r3, #7
 8017d0c:	6033      	str	r3, [r6, #0]
 8017d0e:	2d00      	cmp	r5, #0
 8017d10:	d0a4      	beq.n	8017c5c <rmw_validate_full_topic_name+0x28>
 8017d12:	23f6      	movs	r3, #246	@ 0xf6
 8017d14:	e7d8      	b.n	8017cc8 <rmw_validate_full_topic_name+0x94>
 8017d16:	2205      	movs	r2, #5
 8017d18:	6032      	str	r2, [r6, #0]
 8017d1a:	2d00      	cmp	r5, #0
 8017d1c:	d1d4      	bne.n	8017cc8 <rmw_validate_full_topic_name+0x94>
 8017d1e:	e79d      	b.n	8017c5c <rmw_validate_full_topic_name+0x28>
 8017d20:	08020989 	.word	0x08020989

08017d24 <rmw_validate_namespace_with_size>:
 8017d24:	2800      	cmp	r0, #0
 8017d26:	d031      	beq.n	8017d8c <rmw_validate_namespace_with_size+0x68>
 8017d28:	b570      	push	{r4, r5, r6, lr}
 8017d2a:	4614      	mov	r4, r2
 8017d2c:	b0c2      	sub	sp, #264	@ 0x108
 8017d2e:	b1ba      	cbz	r2, 8017d60 <rmw_validate_namespace_with_size+0x3c>
 8017d30:	2901      	cmp	r1, #1
 8017d32:	460e      	mov	r6, r1
 8017d34:	461d      	mov	r5, r3
 8017d36:	d102      	bne.n	8017d3e <rmw_validate_namespace_with_size+0x1a>
 8017d38:	7803      	ldrb	r3, [r0, #0]
 8017d3a:	2b2f      	cmp	r3, #47	@ 0x2f
 8017d3c:	d015      	beq.n	8017d6a <rmw_validate_namespace_with_size+0x46>
 8017d3e:	aa01      	add	r2, sp, #4
 8017d40:	4669      	mov	r1, sp
 8017d42:	f7ff ff77 	bl	8017c34 <rmw_validate_full_topic_name>
 8017d46:	b960      	cbnz	r0, 8017d62 <rmw_validate_namespace_with_size+0x3e>
 8017d48:	9b00      	ldr	r3, [sp, #0]
 8017d4a:	b163      	cbz	r3, 8017d66 <rmw_validate_namespace_with_size+0x42>
 8017d4c:	2b07      	cmp	r3, #7
 8017d4e:	d00a      	beq.n	8017d66 <rmw_validate_namespace_with_size+0x42>
 8017d50:	1e5a      	subs	r2, r3, #1
 8017d52:	2a05      	cmp	r2, #5
 8017d54:	d81c      	bhi.n	8017d90 <rmw_validate_namespace_with_size+0x6c>
 8017d56:	e8df f002 	tbb	[pc, r2]
 8017d5a:	0c0c      	.short	0x0c0c
 8017d5c:	0c0c0c0c 	.word	0x0c0c0c0c
 8017d60:	200b      	movs	r0, #11
 8017d62:	b042      	add	sp, #264	@ 0x108
 8017d64:	bd70      	pop	{r4, r5, r6, pc}
 8017d66:	2ef5      	cmp	r6, #245	@ 0xf5
 8017d68:	d809      	bhi.n	8017d7e <rmw_validate_namespace_with_size+0x5a>
 8017d6a:	2300      	movs	r3, #0
 8017d6c:	6023      	str	r3, [r4, #0]
 8017d6e:	2000      	movs	r0, #0
 8017d70:	e7f7      	b.n	8017d62 <rmw_validate_namespace_with_size+0x3e>
 8017d72:	6023      	str	r3, [r4, #0]
 8017d74:	2d00      	cmp	r5, #0
 8017d76:	d0fa      	beq.n	8017d6e <rmw_validate_namespace_with_size+0x4a>
 8017d78:	9b01      	ldr	r3, [sp, #4]
 8017d7a:	602b      	str	r3, [r5, #0]
 8017d7c:	e7f7      	b.n	8017d6e <rmw_validate_namespace_with_size+0x4a>
 8017d7e:	2307      	movs	r3, #7
 8017d80:	6023      	str	r3, [r4, #0]
 8017d82:	2d00      	cmp	r5, #0
 8017d84:	d0f3      	beq.n	8017d6e <rmw_validate_namespace_with_size+0x4a>
 8017d86:	23f4      	movs	r3, #244	@ 0xf4
 8017d88:	602b      	str	r3, [r5, #0]
 8017d8a:	e7f0      	b.n	8017d6e <rmw_validate_namespace_with_size+0x4a>
 8017d8c:	200b      	movs	r0, #11
 8017d8e:	4770      	bx	lr
 8017d90:	4a03      	ldr	r2, [pc, #12]	@ (8017da0 <rmw_validate_namespace_with_size+0x7c>)
 8017d92:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8017d96:	a802      	add	r0, sp, #8
 8017d98:	f7ff fcb2 	bl	8017700 <rcutils_snprintf>
 8017d9c:	2001      	movs	r0, #1
 8017d9e:	e7e0      	b.n	8017d62 <rmw_validate_namespace_with_size+0x3e>
 8017da0:	0801f41c 	.word	0x0801f41c

08017da4 <rmw_validate_namespace>:
 8017da4:	b168      	cbz	r0, 8017dc2 <rmw_validate_namespace+0x1e>
 8017da6:	b570      	push	{r4, r5, r6, lr}
 8017da8:	460d      	mov	r5, r1
 8017daa:	4616      	mov	r6, r2
 8017dac:	4604      	mov	r4, r0
 8017dae:	f7e8 fa87 	bl	80002c0 <strlen>
 8017db2:	4633      	mov	r3, r6
 8017db4:	4601      	mov	r1, r0
 8017db6:	462a      	mov	r2, r5
 8017db8:	4620      	mov	r0, r4
 8017dba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017dbe:	f7ff bfb1 	b.w	8017d24 <rmw_validate_namespace_with_size>
 8017dc2:	200b      	movs	r0, #11
 8017dc4:	4770      	bx	lr
 8017dc6:	bf00      	nop

08017dc8 <rmw_namespace_validation_result_string>:
 8017dc8:	2807      	cmp	r0, #7
 8017dca:	bf9a      	itte	ls
 8017dcc:	4b02      	ldrls	r3, [pc, #8]	@ (8017dd8 <rmw_namespace_validation_result_string+0x10>)
 8017dce:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8017dd2:	4802      	ldrhi	r0, [pc, #8]	@ (8017ddc <rmw_namespace_validation_result_string+0x14>)
 8017dd4:	4770      	bx	lr
 8017dd6:	bf00      	nop
 8017dd8:	0802029c 	.word	0x0802029c
 8017ddc:	0801f46c 	.word	0x0801f46c

08017de0 <rmw_validate_node_name>:
 8017de0:	2800      	cmp	r0, #0
 8017de2:	d037      	beq.n	8017e54 <rmw_validate_node_name+0x74>
 8017de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017de6:	460e      	mov	r6, r1
 8017de8:	2900      	cmp	r1, #0
 8017dea:	d035      	beq.n	8017e58 <rmw_validate_node_name+0x78>
 8017dec:	4617      	mov	r7, r2
 8017dee:	4604      	mov	r4, r0
 8017df0:	f7e8 fa66 	bl	80002c0 <strlen>
 8017df4:	b1d8      	cbz	r0, 8017e2e <rmw_validate_node_name+0x4e>
 8017df6:	1e63      	subs	r3, r4, #1
 8017df8:	1819      	adds	r1, r3, r0
 8017dfa:	461a      	mov	r2, r3
 8017dfc:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 8017e00:	f1ae 0530 	sub.w	r5, lr, #48	@ 0x30
 8017e04:	f02e 0c20 	bic.w	ip, lr, #32
 8017e08:	2d09      	cmp	r5, #9
 8017e0a:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 8017e0e:	d915      	bls.n	8017e3c <rmw_validate_node_name+0x5c>
 8017e10:	f1bc 0f19 	cmp.w	ip, #25
 8017e14:	d912      	bls.n	8017e3c <rmw_validate_node_name+0x5c>
 8017e16:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 8017e1a:	d00f      	beq.n	8017e3c <rmw_validate_node_name+0x5c>
 8017e1c:	2302      	movs	r3, #2
 8017e1e:	6033      	str	r3, [r6, #0]
 8017e20:	b11f      	cbz	r7, 8017e2a <rmw_validate_node_name+0x4a>
 8017e22:	f1c4 0401 	rsb	r4, r4, #1
 8017e26:	4414      	add	r4, r2
 8017e28:	603c      	str	r4, [r7, #0]
 8017e2a:	2000      	movs	r0, #0
 8017e2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017e2e:	2301      	movs	r3, #1
 8017e30:	6033      	str	r3, [r6, #0]
 8017e32:	2f00      	cmp	r7, #0
 8017e34:	d0f9      	beq.n	8017e2a <rmw_validate_node_name+0x4a>
 8017e36:	2300      	movs	r3, #0
 8017e38:	603b      	str	r3, [r7, #0]
 8017e3a:	e7f6      	b.n	8017e2a <rmw_validate_node_name+0x4a>
 8017e3c:	4299      	cmp	r1, r3
 8017e3e:	d1dc      	bne.n	8017dfa <rmw_validate_node_name+0x1a>
 8017e40:	7823      	ldrb	r3, [r4, #0]
 8017e42:	4a0c      	ldr	r2, [pc, #48]	@ (8017e74 <rmw_validate_node_name+0x94>)
 8017e44:	5cd3      	ldrb	r3, [r2, r3]
 8017e46:	f013 0304 	ands.w	r3, r3, #4
 8017e4a:	d10e      	bne.n	8017e6a <rmw_validate_node_name+0x8a>
 8017e4c:	28ff      	cmp	r0, #255	@ 0xff
 8017e4e:	d805      	bhi.n	8017e5c <rmw_validate_node_name+0x7c>
 8017e50:	6033      	str	r3, [r6, #0]
 8017e52:	e7ea      	b.n	8017e2a <rmw_validate_node_name+0x4a>
 8017e54:	200b      	movs	r0, #11
 8017e56:	4770      	bx	lr
 8017e58:	200b      	movs	r0, #11
 8017e5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017e5c:	2304      	movs	r3, #4
 8017e5e:	6033      	str	r3, [r6, #0]
 8017e60:	2f00      	cmp	r7, #0
 8017e62:	d0e2      	beq.n	8017e2a <rmw_validate_node_name+0x4a>
 8017e64:	23fe      	movs	r3, #254	@ 0xfe
 8017e66:	603b      	str	r3, [r7, #0]
 8017e68:	e7df      	b.n	8017e2a <rmw_validate_node_name+0x4a>
 8017e6a:	2303      	movs	r3, #3
 8017e6c:	6033      	str	r3, [r6, #0]
 8017e6e:	2f00      	cmp	r7, #0
 8017e70:	d1e1      	bne.n	8017e36 <rmw_validate_node_name+0x56>
 8017e72:	e7da      	b.n	8017e2a <rmw_validate_node_name+0x4a>
 8017e74:	08020989 	.word	0x08020989

08017e78 <rmw_node_name_validation_result_string>:
 8017e78:	2804      	cmp	r0, #4
 8017e7a:	bf9a      	itte	ls
 8017e7c:	4b02      	ldrls	r3, [pc, #8]	@ (8017e88 <rmw_node_name_validation_result_string+0x10>)
 8017e7e:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8017e82:	4802      	ldrhi	r0, [pc, #8]	@ (8017e8c <rmw_node_name_validation_result_string+0x14>)
 8017e84:	4770      	bx	lr
 8017e86:	bf00      	nop
 8017e88:	080202bc 	.word	0x080202bc
 8017e8c:	0801f614 	.word	0x0801f614

08017e90 <get_memory>:
 8017e90:	4603      	mov	r3, r0
 8017e92:	6840      	ldr	r0, [r0, #4]
 8017e94:	b158      	cbz	r0, 8017eae <get_memory+0x1e>
 8017e96:	6842      	ldr	r2, [r0, #4]
 8017e98:	605a      	str	r2, [r3, #4]
 8017e9a:	b10a      	cbz	r2, 8017ea0 <get_memory+0x10>
 8017e9c:	2100      	movs	r1, #0
 8017e9e:	6011      	str	r1, [r2, #0]
 8017ea0:	681a      	ldr	r2, [r3, #0]
 8017ea2:	6042      	str	r2, [r0, #4]
 8017ea4:	b102      	cbz	r2, 8017ea8 <get_memory+0x18>
 8017ea6:	6010      	str	r0, [r2, #0]
 8017ea8:	2200      	movs	r2, #0
 8017eaa:	6002      	str	r2, [r0, #0]
 8017eac:	6018      	str	r0, [r3, #0]
 8017eae:	4770      	bx	lr

08017eb0 <put_memory>:
 8017eb0:	680b      	ldr	r3, [r1, #0]
 8017eb2:	b10b      	cbz	r3, 8017eb8 <put_memory+0x8>
 8017eb4:	684a      	ldr	r2, [r1, #4]
 8017eb6:	605a      	str	r2, [r3, #4]
 8017eb8:	684a      	ldr	r2, [r1, #4]
 8017eba:	b102      	cbz	r2, 8017ebe <put_memory+0xe>
 8017ebc:	6013      	str	r3, [r2, #0]
 8017ebe:	6803      	ldr	r3, [r0, #0]
 8017ec0:	428b      	cmp	r3, r1
 8017ec2:	6843      	ldr	r3, [r0, #4]
 8017ec4:	bf08      	it	eq
 8017ec6:	6002      	streq	r2, [r0, #0]
 8017ec8:	604b      	str	r3, [r1, #4]
 8017eca:	b103      	cbz	r3, 8017ece <put_memory+0x1e>
 8017ecc:	6019      	str	r1, [r3, #0]
 8017ece:	2300      	movs	r3, #0
 8017ed0:	600b      	str	r3, [r1, #0]
 8017ed2:	6041      	str	r1, [r0, #4]
 8017ed4:	4770      	bx	lr
 8017ed6:	bf00      	nop

08017ed8 <rmw_destroy_client>:
 8017ed8:	b570      	push	{r4, r5, r6, lr}
 8017eda:	b128      	cbz	r0, 8017ee8 <rmw_destroy_client+0x10>
 8017edc:	4604      	mov	r4, r0
 8017ede:	6800      	ldr	r0, [r0, #0]
 8017ee0:	460d      	mov	r5, r1
 8017ee2:	f7f5 ffdb 	bl	800de9c <is_uxrce_rmw_identifier_valid>
 8017ee6:	b910      	cbnz	r0, 8017eee <rmw_destroy_client+0x16>
 8017ee8:	2401      	movs	r4, #1
 8017eea:	4620      	mov	r0, r4
 8017eec:	bd70      	pop	{r4, r5, r6, pc}
 8017eee:	6863      	ldr	r3, [r4, #4]
 8017ef0:	2b00      	cmp	r3, #0
 8017ef2:	d0f9      	beq.n	8017ee8 <rmw_destroy_client+0x10>
 8017ef4:	2d00      	cmp	r5, #0
 8017ef6:	d0f7      	beq.n	8017ee8 <rmw_destroy_client+0x10>
 8017ef8:	6828      	ldr	r0, [r5, #0]
 8017efa:	f7f5 ffcf 	bl	800de9c <is_uxrce_rmw_identifier_valid>
 8017efe:	2800      	cmp	r0, #0
 8017f00:	d0f2      	beq.n	8017ee8 <rmw_destroy_client+0x10>
 8017f02:	686e      	ldr	r6, [r5, #4]
 8017f04:	2e00      	cmp	r6, #0
 8017f06:	d0ef      	beq.n	8017ee8 <rmw_destroy_client+0x10>
 8017f08:	6864      	ldr	r4, [r4, #4]
 8017f0a:	6932      	ldr	r2, [r6, #16]
 8017f0c:	6920      	ldr	r0, [r4, #16]
 8017f0e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8017f12:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017f16:	6819      	ldr	r1, [r3, #0]
 8017f18:	f002 fe34 	bl	801ab84 <uxr_buffer_cancel_data>
 8017f1c:	4602      	mov	r2, r0
 8017f1e:	6920      	ldr	r0, [r4, #16]
 8017f20:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8017f24:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8017f28:	f7f5 fe98 	bl	800dc5c <run_xrce_session>
 8017f2c:	6920      	ldr	r0, [r4, #16]
 8017f2e:	6932      	ldr	r2, [r6, #16]
 8017f30:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8017f34:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017f38:	6819      	ldr	r1, [r3, #0]
 8017f3a:	f7f9 f9e9 	bl	8011310 <uxr_buffer_delete_entity>
 8017f3e:	4602      	mov	r2, r0
 8017f40:	6920      	ldr	r0, [r4, #16]
 8017f42:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8017f46:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8017f4a:	f7f5 fe87 	bl	800dc5c <run_xrce_session>
 8017f4e:	f080 0401 	eor.w	r4, r0, #1
 8017f52:	b2e4      	uxtb	r4, r4
 8017f54:	4628      	mov	r0, r5
 8017f56:	0064      	lsls	r4, r4, #1
 8017f58:	f7f5 fd60 	bl	800da1c <rmw_uxrce_fini_client_memory>
 8017f5c:	e7c5      	b.n	8017eea <rmw_destroy_client+0x12>
 8017f5e:	bf00      	nop

08017f60 <rmw_get_gid_for_client>:
 8017f60:	b1a8      	cbz	r0, 8017f8e <rmw_get_gid_for_client+0x2e>
 8017f62:	b538      	push	{r3, r4, r5, lr}
 8017f64:	460c      	mov	r4, r1
 8017f66:	b1a1      	cbz	r1, 8017f92 <rmw_get_gid_for_client+0x32>
 8017f68:	4605      	mov	r5, r0
 8017f6a:	6800      	ldr	r0, [r0, #0]
 8017f6c:	b120      	cbz	r0, 8017f78 <rmw_get_gid_for_client+0x18>
 8017f6e:	4b0a      	ldr	r3, [pc, #40]	@ (8017f98 <rmw_get_gid_for_client+0x38>)
 8017f70:	6819      	ldr	r1, [r3, #0]
 8017f72:	f7e8 f945 	bl	8000200 <strcmp>
 8017f76:	b940      	cbnz	r0, 8017f8a <rmw_get_gid_for_client+0x2a>
 8017f78:	686b      	ldr	r3, [r5, #4]
 8017f7a:	2000      	movs	r0, #0
 8017f7c:	6060      	str	r0, [r4, #4]
 8017f7e:	60a0      	str	r0, [r4, #8]
 8017f80:	60e0      	str	r0, [r4, #12]
 8017f82:	6120      	str	r0, [r4, #16]
 8017f84:	691b      	ldr	r3, [r3, #16]
 8017f86:	6063      	str	r3, [r4, #4]
 8017f88:	bd38      	pop	{r3, r4, r5, pc}
 8017f8a:	200c      	movs	r0, #12
 8017f8c:	bd38      	pop	{r3, r4, r5, pc}
 8017f8e:	200b      	movs	r0, #11
 8017f90:	4770      	bx	lr
 8017f92:	200b      	movs	r0, #11
 8017f94:	bd38      	pop	{r3, r4, r5, pc}
 8017f96:	bf00      	nop
 8017f98:	080202d0 	.word	0x080202d0

08017f9c <rmw_get_implementation_identifier>:
 8017f9c:	4b01      	ldr	r3, [pc, #4]	@ (8017fa4 <rmw_get_implementation_identifier+0x8>)
 8017f9e:	6818      	ldr	r0, [r3, #0]
 8017fa0:	4770      	bx	lr
 8017fa2:	bf00      	nop
 8017fa4:	080202d0 	.word	0x080202d0

08017fa8 <rmw_init_options_init>:
 8017fa8:	b084      	sub	sp, #16
 8017faa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017fac:	b083      	sub	sp, #12
 8017fae:	ad09      	add	r5, sp, #36	@ 0x24
 8017fb0:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 8017fb4:	b130      	cbz	r0, 8017fc4 <rmw_init_options_init+0x1c>
 8017fb6:	4604      	mov	r4, r0
 8017fb8:	4628      	mov	r0, r5
 8017fba:	f7f5 f91f 	bl	800d1fc <rcutils_allocator_is_valid>
 8017fbe:	b108      	cbz	r0, 8017fc4 <rmw_init_options_init+0x1c>
 8017fc0:	68a6      	ldr	r6, [r4, #8]
 8017fc2:	b12e      	cbz	r6, 8017fd0 <rmw_init_options_init+0x28>
 8017fc4:	200b      	movs	r0, #11
 8017fc6:	b003      	add	sp, #12
 8017fc8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8017fcc:	b004      	add	sp, #16
 8017fce:	4770      	bx	lr
 8017fd0:	2200      	movs	r2, #0
 8017fd2:	2300      	movs	r3, #0
 8017fd4:	e9c4 2300 	strd	r2, r3, [r4]
 8017fd8:	4b20      	ldr	r3, [pc, #128]	@ (801805c <rmw_init_options_init+0xb4>)
 8017fda:	681b      	ldr	r3, [r3, #0]
 8017fdc:	60a3      	str	r3, [r4, #8]
 8017fde:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017fe0:	f104 0c40 	add.w	ip, r4, #64	@ 0x40
 8017fe4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017fe8:	466f      	mov	r7, sp
 8017fea:	682b      	ldr	r3, [r5, #0]
 8017fec:	f8cc 3000 	str.w	r3, [ip]
 8017ff0:	4638      	mov	r0, r7
 8017ff2:	63e6      	str	r6, [r4, #60]	@ 0x3c
 8017ff4:	60e6      	str	r6, [r4, #12]
 8017ff6:	f7ff fd6b 	bl	8017ad0 <rmw_get_default_security_options>
 8017ffa:	e897 0003 	ldmia.w	r7, {r0, r1}
 8017ffe:	f104 0310 	add.w	r3, r4, #16
 8018002:	e883 0003 	stmia.w	r3, {r0, r1}
 8018006:	2203      	movs	r2, #3
 8018008:	4815      	ldr	r0, [pc, #84]	@ (8018060 <rmw_init_options_init+0xb8>)
 801800a:	4916      	ldr	r1, [pc, #88]	@ (8018064 <rmw_init_options_init+0xbc>)
 801800c:	7626      	strb	r6, [r4, #24]
 801800e:	f7f5 fc45 	bl	800d89c <rmw_uxrce_init_init_options_impl_memory>
 8018012:	4813      	ldr	r0, [pc, #76]	@ (8018060 <rmw_init_options_init+0xb8>)
 8018014:	f7ff ff3c 	bl	8017e90 <get_memory>
 8018018:	b1f0      	cbz	r0, 8018058 <rmw_init_options_init+0xb0>
 801801a:	4a13      	ldr	r2, [pc, #76]	@ (8018068 <rmw_init_options_init+0xc0>)
 801801c:	6883      	ldr	r3, [r0, #8]
 801801e:	6851      	ldr	r1, [r2, #4]
 8018020:	7810      	ldrb	r0, [r2, #0]
 8018022:	6563      	str	r3, [r4, #84]	@ 0x54
 8018024:	7418      	strb	r0, [r3, #16]
 8018026:	6159      	str	r1, [r3, #20]
 8018028:	68d1      	ldr	r1, [r2, #12]
 801802a:	61d9      	str	r1, [r3, #28]
 801802c:	6911      	ldr	r1, [r2, #16]
 801802e:	6219      	str	r1, [r3, #32]
 8018030:	6951      	ldr	r1, [r2, #20]
 8018032:	6892      	ldr	r2, [r2, #8]
 8018034:	619a      	str	r2, [r3, #24]
 8018036:	6259      	str	r1, [r3, #36]	@ 0x24
 8018038:	f7fa fd82 	bl	8012b40 <uxr_nanos>
 801803c:	f004 feec 	bl	801ce18 <srand>
 8018040:	f004 ff18 	bl	801ce74 <rand>
 8018044:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8018046:	6298      	str	r0, [r3, #40]	@ 0x28
 8018048:	2800      	cmp	r0, #0
 801804a:	d0f9      	beq.n	8018040 <rmw_init_options_init+0x98>
 801804c:	2000      	movs	r0, #0
 801804e:	b003      	add	sp, #12
 8018050:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8018054:	b004      	add	sp, #16
 8018056:	4770      	bx	lr
 8018058:	2001      	movs	r0, #1
 801805a:	e7b4      	b.n	8017fc6 <rmw_init_options_init+0x1e>
 801805c:	080202d0 	.word	0x080202d0
 8018060:	20013878 	.word	0x20013878
 8018064:	200137f4 	.word	0x200137f4
 8018068:	200136c8 	.word	0x200136c8

0801806c <rmw_init_options_copy>:
 801806c:	b570      	push	{r4, r5, r6, lr}
 801806e:	b088      	sub	sp, #32
 8018070:	b160      	cbz	r0, 801808c <rmw_init_options_copy+0x20>
 8018072:	460d      	mov	r5, r1
 8018074:	b151      	cbz	r1, 801808c <rmw_init_options_copy+0x20>
 8018076:	4604      	mov	r4, r0
 8018078:	6880      	ldr	r0, [r0, #8]
 801807a:	b128      	cbz	r0, 8018088 <rmw_init_options_copy+0x1c>
 801807c:	4b29      	ldr	r3, [pc, #164]	@ (8018124 <rmw_init_options_copy+0xb8>)
 801807e:	6819      	ldr	r1, [r3, #0]
 8018080:	f7e8 f8be 	bl	8000200 <strcmp>
 8018084:	2800      	cmp	r0, #0
 8018086:	d140      	bne.n	801810a <rmw_init_options_copy+0x9e>
 8018088:	68ab      	ldr	r3, [r5, #8]
 801808a:	b11b      	cbz	r3, 8018094 <rmw_init_options_copy+0x28>
 801808c:	240b      	movs	r4, #11
 801808e:	4620      	mov	r0, r4
 8018090:	b008      	add	sp, #32
 8018092:	bd70      	pop	{r4, r5, r6, pc}
 8018094:	2258      	movs	r2, #88	@ 0x58
 8018096:	4621      	mov	r1, r4
 8018098:	4628      	mov	r0, r5
 801809a:	f005 fa5e 	bl	801d55a <memcpy>
 801809e:	f104 0e40 	add.w	lr, r4, #64	@ 0x40
 80180a2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80180a6:	f10d 0c0c 	add.w	ip, sp, #12
 80180aa:	4666      	mov	r6, ip
 80180ac:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80180b0:	f8de 3000 	ldr.w	r3, [lr]
 80180b4:	f8cc 3000 	str.w	r3, [ip]
 80180b8:	4630      	mov	r0, r6
 80180ba:	f7f5 f89f 	bl	800d1fc <rcutils_allocator_is_valid>
 80180be:	2800      	cmp	r0, #0
 80180c0:	d0e4      	beq.n	801808c <rmw_init_options_copy+0x20>
 80180c2:	ab08      	add	r3, sp, #32
 80180c4:	e913 0003 	ldmdb	r3, {r0, r1}
 80180c8:	e88d 0003 	stmia.w	sp, {r0, r1}
 80180cc:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80180d0:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80180d2:	f7ff fb41 	bl	8017758 <rcutils_strdup>
 80180d6:	63e8      	str	r0, [r5, #60]	@ 0x3c
 80180d8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80180da:	b103      	cbz	r3, 80180de <rmw_init_options_copy+0x72>
 80180dc:	b1f8      	cbz	r0, 801811e <rmw_init_options_copy+0xb2>
 80180de:	4812      	ldr	r0, [pc, #72]	@ (8018128 <rmw_init_options_copy+0xbc>)
 80180e0:	f7ff fed6 	bl	8017e90 <get_memory>
 80180e4:	b1a8      	cbz	r0, 8018112 <rmw_init_options_copy+0xa6>
 80180e6:	6883      	ldr	r3, [r0, #8]
 80180e8:	656b      	str	r3, [r5, #84]	@ 0x54
 80180ea:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80180ec:	f102 0c10 	add.w	ip, r2, #16
 80180f0:	f103 0510 	add.w	r5, r3, #16
 80180f4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80180f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80180fa:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 80180fe:	2400      	movs	r4, #0
 8018100:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8018104:	4620      	mov	r0, r4
 8018106:	b008      	add	sp, #32
 8018108:	bd70      	pop	{r4, r5, r6, pc}
 801810a:	240c      	movs	r4, #12
 801810c:	4620      	mov	r0, r4
 801810e:	b008      	add	sp, #32
 8018110:	bd70      	pop	{r4, r5, r6, pc}
 8018112:	9b04      	ldr	r3, [sp, #16]
 8018114:	9907      	ldr	r1, [sp, #28]
 8018116:	6be8      	ldr	r0, [r5, #60]	@ 0x3c
 8018118:	4798      	blx	r3
 801811a:	2401      	movs	r4, #1
 801811c:	e7b7      	b.n	801808e <rmw_init_options_copy+0x22>
 801811e:	240a      	movs	r4, #10
 8018120:	e7b5      	b.n	801808e <rmw_init_options_copy+0x22>
 8018122:	bf00      	nop
 8018124:	080202d0 	.word	0x080202d0
 8018128:	20013878 	.word	0x20013878

0801812c <rmw_init_options_fini>:
 801812c:	2800      	cmp	r0, #0
 801812e:	d031      	beq.n	8018194 <rmw_init_options_fini+0x68>
 8018130:	b510      	push	{r4, lr}
 8018132:	4604      	mov	r4, r0
 8018134:	b096      	sub	sp, #88	@ 0x58
 8018136:	3040      	adds	r0, #64	@ 0x40
 8018138:	f7f5 f860 	bl	800d1fc <rcutils_allocator_is_valid>
 801813c:	b310      	cbz	r0, 8018184 <rmw_init_options_fini+0x58>
 801813e:	68a0      	ldr	r0, [r4, #8]
 8018140:	b120      	cbz	r0, 801814c <rmw_init_options_fini+0x20>
 8018142:	4b15      	ldr	r3, [pc, #84]	@ (8018198 <rmw_init_options_fini+0x6c>)
 8018144:	6819      	ldr	r1, [r3, #0]
 8018146:	f7e8 f85b 	bl	8000200 <strcmp>
 801814a:	bb08      	cbnz	r0, 8018190 <rmw_init_options_fini+0x64>
 801814c:	4b13      	ldr	r3, [pc, #76]	@ (801819c <rmw_init_options_fini+0x70>)
 801814e:	6819      	ldr	r1, [r3, #0]
 8018150:	b1d9      	cbz	r1, 801818a <rmw_init_options_fini+0x5e>
 8018152:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8018154:	e001      	b.n	801815a <rmw_init_options_fini+0x2e>
 8018156:	6849      	ldr	r1, [r1, #4]
 8018158:	b1b9      	cbz	r1, 801818a <rmw_init_options_fini+0x5e>
 801815a:	688b      	ldr	r3, [r1, #8]
 801815c:	429a      	cmp	r2, r3
 801815e:	d1fa      	bne.n	8018156 <rmw_init_options_fini+0x2a>
 8018160:	480e      	ldr	r0, [pc, #56]	@ (801819c <rmw_init_options_fini+0x70>)
 8018162:	f7ff fea5 	bl	8017eb0 <put_memory>
 8018166:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8018168:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 801816a:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 801816c:	4798      	blx	r3
 801816e:	4668      	mov	r0, sp
 8018170:	f7ff fc86 	bl	8017a80 <rmw_get_zero_initialized_init_options>
 8018174:	2258      	movs	r2, #88	@ 0x58
 8018176:	4669      	mov	r1, sp
 8018178:	4620      	mov	r0, r4
 801817a:	f005 f9ee 	bl	801d55a <memcpy>
 801817e:	2000      	movs	r0, #0
 8018180:	b016      	add	sp, #88	@ 0x58
 8018182:	bd10      	pop	{r4, pc}
 8018184:	200b      	movs	r0, #11
 8018186:	b016      	add	sp, #88	@ 0x58
 8018188:	bd10      	pop	{r4, pc}
 801818a:	2001      	movs	r0, #1
 801818c:	b016      	add	sp, #88	@ 0x58
 801818e:	bd10      	pop	{r4, pc}
 8018190:	200c      	movs	r0, #12
 8018192:	e7f5      	b.n	8018180 <rmw_init_options_fini+0x54>
 8018194:	200b      	movs	r0, #11
 8018196:	4770      	bx	lr
 8018198:	080202d0 	.word	0x080202d0
 801819c:	20013878 	.word	0x20013878

080181a0 <rmw_init>:
 80181a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80181a4:	b083      	sub	sp, #12
 80181a6:	2800      	cmp	r0, #0
 80181a8:	f000 80d4 	beq.w	8018354 <rmw_init+0x1b4>
 80181ac:	460e      	mov	r6, r1
 80181ae:	2900      	cmp	r1, #0
 80181b0:	f000 80d0 	beq.w	8018354 <rmw_init+0x1b4>
 80181b4:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80181b6:	4605      	mov	r5, r0
 80181b8:	2b00      	cmp	r3, #0
 80181ba:	f000 80cb 	beq.w	8018354 <rmw_init+0x1b4>
 80181be:	4b77      	ldr	r3, [pc, #476]	@ (801839c <rmw_init+0x1fc>)
 80181c0:	6880      	ldr	r0, [r0, #8]
 80181c2:	681f      	ldr	r7, [r3, #0]
 80181c4:	b128      	cbz	r0, 80181d2 <rmw_init+0x32>
 80181c6:	4639      	mov	r1, r7
 80181c8:	f7e8 f81a 	bl	8000200 <strcmp>
 80181cc:	2800      	cmp	r0, #0
 80181ce:	f040 80d3 	bne.w	8018378 <rmw_init+0x1d8>
 80181d2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80181d6:	4c72      	ldr	r4, [pc, #456]	@ (80183a0 <rmw_init+0x200>)
 80181d8:	4972      	ldr	r1, [pc, #456]	@ (80183a4 <rmw_init+0x204>)
 80181da:	4873      	ldr	r0, [pc, #460]	@ (80183a8 <rmw_init+0x208>)
 80181dc:	60b7      	str	r7, [r6, #8]
 80181de:	e9c6 2300 	strd	r2, r3, [r6]
 80181e2:	68eb      	ldr	r3, [r5, #12]
 80181e4:	66b3      	str	r3, [r6, #104]	@ 0x68
 80181e6:	2201      	movs	r2, #1
 80181e8:	f7f5 faf8 	bl	800d7dc <rmw_uxrce_init_session_memory>
 80181ec:	4620      	mov	r0, r4
 80181ee:	496f      	ldr	r1, [pc, #444]	@ (80183ac <rmw_init+0x20c>)
 80181f0:	2204      	movs	r2, #4
 80181f2:	f7f5 fb33 	bl	800d85c <rmw_uxrce_init_static_input_buffer_memory>
 80181f6:	f04f 0800 	mov.w	r8, #0
 80181fa:	486b      	ldr	r0, [pc, #428]	@ (80183a8 <rmw_init+0x208>)
 80181fc:	f884 800d 	strb.w	r8, [r4, #13]
 8018200:	f7ff fe46 	bl	8017e90 <get_memory>
 8018204:	2800      	cmp	r0, #0
 8018206:	f000 80b2 	beq.w	801836e <rmw_init+0x1ce>
 801820a:	6884      	ldr	r4, [r0, #8]
 801820c:	6d68      	ldr	r0, [r5, #84]	@ 0x54
 801820e:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 8018210:	f890 c010 	ldrb.w	ip, [r0, #16]
 8018214:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 8018218:	9101      	str	r1, [sp, #4]
 801821a:	6a00      	ldr	r0, [r0, #32]
 801821c:	9000      	str	r0, [sp, #0]
 801821e:	f104 0910 	add.w	r9, r4, #16
 8018222:	4661      	mov	r1, ip
 8018224:	4648      	mov	r0, r9
 8018226:	f001 ff01 	bl	801a02c <uxr_set_custom_transport_callbacks>
 801822a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801822e:	e9c4 33e3 	strd	r3, r3, [r4, #908]	@ 0x38c
 8018232:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 8018236:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 801823a:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 801823e:	495c      	ldr	r1, [pc, #368]	@ (80183b0 <rmw_init+0x210>)
 8018240:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 8018244:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 8018248:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 801824c:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 8018250:	4858      	ldr	r0, [pc, #352]	@ (80183b4 <rmw_init+0x214>)
 8018252:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 8018256:	2201      	movs	r2, #1
 8018258:	66f4      	str	r4, [r6, #108]	@ 0x6c
 801825a:	f7f5 fa9f 	bl	800d79c <rmw_uxrce_init_node_memory>
 801825e:	4956      	ldr	r1, [pc, #344]	@ (80183b8 <rmw_init+0x218>)
 8018260:	4856      	ldr	r0, [pc, #344]	@ (80183bc <rmw_init+0x21c>)
 8018262:	220a      	movs	r2, #10
 8018264:	f7f5 fa7a 	bl	800d75c <rmw_uxrce_init_subscription_memory>
 8018268:	4955      	ldr	r1, [pc, #340]	@ (80183c0 <rmw_init+0x220>)
 801826a:	4856      	ldr	r0, [pc, #344]	@ (80183c4 <rmw_init+0x224>)
 801826c:	220a      	movs	r2, #10
 801826e:	f7f5 fa55 	bl	800d71c <rmw_uxrce_init_publisher_memory>
 8018272:	4955      	ldr	r1, [pc, #340]	@ (80183c8 <rmw_init+0x228>)
 8018274:	4855      	ldr	r0, [pc, #340]	@ (80183cc <rmw_init+0x22c>)
 8018276:	220a      	movs	r2, #10
 8018278:	f7f5 fa10 	bl	800d69c <rmw_uxrce_init_service_memory>
 801827c:	4954      	ldr	r1, [pc, #336]	@ (80183d0 <rmw_init+0x230>)
 801827e:	4855      	ldr	r0, [pc, #340]	@ (80183d4 <rmw_init+0x234>)
 8018280:	220a      	movs	r2, #10
 8018282:	f7f5 fa2b 	bl	800d6dc <rmw_uxrce_init_client_memory>
 8018286:	4954      	ldr	r1, [pc, #336]	@ (80183d8 <rmw_init+0x238>)
 8018288:	4854      	ldr	r0, [pc, #336]	@ (80183dc <rmw_init+0x23c>)
 801828a:	2214      	movs	r2, #20
 801828c:	f7f5 fac6 	bl	800d81c <rmw_uxrce_init_topic_memory>
 8018290:	4953      	ldr	r1, [pc, #332]	@ (80183e0 <rmw_init+0x240>)
 8018292:	4854      	ldr	r0, [pc, #336]	@ (80183e4 <rmw_init+0x244>)
 8018294:	2203      	movs	r2, #3
 8018296:	f7f5 fb01 	bl	800d89c <rmw_uxrce_init_init_options_impl_memory>
 801829a:	4953      	ldr	r1, [pc, #332]	@ (80183e8 <rmw_init+0x248>)
 801829c:	4853      	ldr	r0, [pc, #332]	@ (80183ec <rmw_init+0x24c>)
 801829e:	2204      	movs	r2, #4
 80182a0:	f7f5 fb1c 	bl	800d8dc <rmw_uxrce_init_wait_set_memory>
 80182a4:	4952      	ldr	r1, [pc, #328]	@ (80183f0 <rmw_init+0x250>)
 80182a6:	4853      	ldr	r0, [pc, #332]	@ (80183f4 <rmw_init+0x254>)
 80182a8:	2204      	movs	r2, #4
 80182aa:	f7f5 fb37 	bl	800d91c <rmw_uxrce_init_guard_condition_memory>
 80182ae:	6d69      	ldr	r1, [r5, #84]	@ 0x54
 80182b0:	6ef0      	ldr	r0, [r6, #108]	@ 0x6c
 80182b2:	4642      	mov	r2, r8
 80182b4:	f000 fe80 	bl	8018fb8 <rmw_uxrce_transport_init>
 80182b8:	4607      	mov	r7, r0
 80182ba:	2800      	cmp	r0, #0
 80182bc:	d161      	bne.n	8018382 <rmw_init+0x1e2>
 80182be:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 80182c0:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 80182c4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80182c6:	4628      	mov	r0, r5
 80182c8:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 80182cc:	f7f9 faf0 	bl	80118b0 <uxr_init_session>
 80182d0:	4628      	mov	r0, r5
 80182d2:	4949      	ldr	r1, [pc, #292]	@ (80183f8 <rmw_init+0x258>)
 80182d4:	4622      	mov	r2, r4
 80182d6:	f7f9 fb0f 	bl	80118f8 <uxr_set_topic_callback>
 80182da:	4628      	mov	r0, r5
 80182dc:	4947      	ldr	r1, [pc, #284]	@ (80183fc <rmw_init+0x25c>)
 80182de:	463a      	mov	r2, r7
 80182e0:	f7f9 fb06 	bl	80118f0 <uxr_set_status_callback>
 80182e4:	4628      	mov	r0, r5
 80182e6:	4946      	ldr	r1, [pc, #280]	@ (8018400 <rmw_init+0x260>)
 80182e8:	463a      	mov	r2, r7
 80182ea:	f7f9 fb09 	bl	8011900 <uxr_set_request_callback>
 80182ee:	4628      	mov	r0, r5
 80182f0:	4944      	ldr	r1, [pc, #272]	@ (8018404 <rmw_init+0x264>)
 80182f2:	463a      	mov	r2, r7
 80182f4:	f7f9 fb08 	bl	8011908 <uxr_set_reply_callback>
 80182f8:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 80182fc:	2304      	movs	r3, #4
 80182fe:	0092      	lsls	r2, r2, #2
 8018300:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 8018304:	4628      	mov	r0, r5
 8018306:	f7f9 fb2d 	bl	8011964 <uxr_create_input_reliable_stream>
 801830a:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 801830e:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 8018312:	2304      	movs	r3, #4
 8018314:	0092      	lsls	r2, r2, #2
 8018316:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 801831a:	4628      	mov	r0, r5
 801831c:	f7f9 fb0a 	bl	8011934 <uxr_create_output_reliable_stream>
 8018320:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 8018324:	4628      	mov	r0, r5
 8018326:	f7f9 fb17 	bl	8011958 <uxr_create_input_best_effort_stream>
 801832a:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 801832e:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8018332:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 8018336:	3114      	adds	r1, #20
 8018338:	4628      	mov	r0, r5
 801833a:	f7f9 fae9 	bl	8011910 <uxr_create_output_best_effort_stream>
 801833e:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 8018342:	4628      	mov	r0, r5
 8018344:	f7fa f832 	bl	80123ac <uxr_create_session>
 8018348:	4605      	mov	r5, r0
 801834a:	b140      	cbz	r0, 801835e <rmw_init+0x1be>
 801834c:	4638      	mov	r0, r7
 801834e:	b003      	add	sp, #12
 8018350:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018354:	270b      	movs	r7, #11
 8018356:	4638      	mov	r0, r7
 8018358:	b003      	add	sp, #12
 801835a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801835e:	4648      	mov	r0, r9
 8018360:	f001 fea6 	bl	801a0b0 <uxr_close_custom_transport>
 8018364:	4810      	ldr	r0, [pc, #64]	@ (80183a8 <rmw_init+0x208>)
 8018366:	4621      	mov	r1, r4
 8018368:	f7ff fda2 	bl	8017eb0 <put_memory>
 801836c:	66f5      	str	r5, [r6, #108]	@ 0x6c
 801836e:	2701      	movs	r7, #1
 8018370:	4638      	mov	r0, r7
 8018372:	b003      	add	sp, #12
 8018374:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018378:	270c      	movs	r7, #12
 801837a:	4638      	mov	r0, r7
 801837c:	b003      	add	sp, #12
 801837e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018382:	4648      	mov	r0, r9
 8018384:	f001 fe94 	bl	801a0b0 <uxr_close_custom_transport>
 8018388:	4807      	ldr	r0, [pc, #28]	@ (80183a8 <rmw_init+0x208>)
 801838a:	4621      	mov	r1, r4
 801838c:	f7ff fd90 	bl	8017eb0 <put_memory>
 8018390:	4638      	mov	r0, r7
 8018392:	f8c6 806c 	str.w	r8, [r6, #108]	@ 0x6c
 8018396:	b003      	add	sp, #12
 8018398:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801839c:	080202d0 	.word	0x080202d0
 80183a0:	20015988 	.word	0x20015988
 80183a4:	20017d50 	.word	0x20017d50
 80183a8:	200192f8 	.word	0x200192f8
 80183ac:	20013888 	.word	0x20013888
 80183b0:	20017c98 	.word	0x20017c98
 80183b4:	20017d3c 	.word	0x20017d3c
 80183b8:	20016b98 	.word	0x20016b98
 80183bc:	20017408 	.word	0x20017408
 80183c0:	20017418 	.word	0x20017418
 80183c4:	20017c88 	.word	0x20017c88
 80183c8:	200163b8 	.word	0x200163b8
 80183cc:	20016b88 	.word	0x20016b88
 80183d0:	20015bd8 	.word	0x20015bd8
 80183d4:	200163a8 	.word	0x200163a8
 80183d8:	20015998 	.word	0x20015998
 80183dc:	20015bc8 	.word	0x20015bc8
 80183e0:	200137f4 	.word	0x200137f4
 80183e4:	20013878 	.word	0x20013878
 80183e8:	20013774 	.word	0x20013774
 80183ec:	200137e4 	.word	0x200137e4
 80183f0:	200136e4 	.word	0x200136e4
 80183f4:	20013764 	.word	0x20013764
 80183f8:	0801c0f9 	.word	0x0801c0f9
 80183fc:	0801c0f1 	.word	0x0801c0f1
 8018400:	0801c191 	.word	0x0801c191
 8018404:	0801c22d 	.word	0x0801c22d

08018408 <rmw_context_fini>:
 8018408:	4b17      	ldr	r3, [pc, #92]	@ (8018468 <rmw_context_fini+0x60>)
 801840a:	b570      	push	{r4, r5, r6, lr}
 801840c:	681c      	ldr	r4, [r3, #0]
 801840e:	4605      	mov	r5, r0
 8018410:	6ec0      	ldr	r0, [r0, #108]	@ 0x6c
 8018412:	b33c      	cbz	r4, 8018464 <rmw_context_fini+0x5c>
 8018414:	2600      	movs	r6, #0
 8018416:	e9d4 4301 	ldrd	r4, r3, [r4, #4]
 801841a:	691a      	ldr	r2, [r3, #16]
 801841c:	4282      	cmp	r2, r0
 801841e:	d018      	beq.n	8018452 <rmw_context_fini+0x4a>
 8018420:	2c00      	cmp	r4, #0
 8018422:	d1f8      	bne.n	8018416 <rmw_context_fini+0xe>
 8018424:	b188      	cbz	r0, 801844a <rmw_context_fini+0x42>
 8018426:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801842a:	789b      	ldrb	r3, [r3, #2]
 801842c:	2b01      	cmp	r3, #1
 801842e:	bf14      	ite	ne
 8018430:	210a      	movne	r1, #10
 8018432:	2100      	moveq	r1, #0
 8018434:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8018438:	f7f9 ff90 	bl	801235c <uxr_delete_session_retries>
 801843c:	6ee8      	ldr	r0, [r5, #108]	@ 0x6c
 801843e:	f7f5 fa8d 	bl	800d95c <rmw_uxrce_fini_session_memory>
 8018442:	6ee8      	ldr	r0, [r5, #108]	@ 0x6c
 8018444:	3010      	adds	r0, #16
 8018446:	f001 fe33 	bl	801a0b0 <uxr_close_custom_transport>
 801844a:	2300      	movs	r3, #0
 801844c:	66eb      	str	r3, [r5, #108]	@ 0x6c
 801844e:	4630      	mov	r0, r6
 8018450:	bd70      	pop	{r4, r5, r6, pc}
 8018452:	f103 0018 	add.w	r0, r3, #24
 8018456:	f000 f911 	bl	801867c <rmw_destroy_node>
 801845a:	4606      	mov	r6, r0
 801845c:	6ee8      	ldr	r0, [r5, #108]	@ 0x6c
 801845e:	2c00      	cmp	r4, #0
 8018460:	d1d9      	bne.n	8018416 <rmw_context_fini+0xe>
 8018462:	e7df      	b.n	8018424 <rmw_context_fini+0x1c>
 8018464:	4626      	mov	r6, r4
 8018466:	e7dd      	b.n	8018424 <rmw_context_fini+0x1c>
 8018468:	20017d3c 	.word	0x20017d3c

0801846c <create_topic>:
 801846c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018470:	4604      	mov	r4, r0
 8018472:	b084      	sub	sp, #16
 8018474:	4824      	ldr	r0, [pc, #144]	@ (8018508 <create_topic+0x9c>)
 8018476:	460f      	mov	r7, r1
 8018478:	4616      	mov	r6, r2
 801847a:	f7ff fd09 	bl	8017e90 <get_memory>
 801847e:	2800      	cmp	r0, #0
 8018480:	d03c      	beq.n	80184fc <create_topic+0x90>
 8018482:	6923      	ldr	r3, [r4, #16]
 8018484:	6885      	ldr	r5, [r0, #8]
 8018486:	f8df 8088 	ldr.w	r8, [pc, #136]	@ 8018510 <create_topic+0xa4>
 801848a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801848e:	e9c5 6405 	strd	r6, r4, [r5, #20]
 8018492:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 8018496:	1c42      	adds	r2, r0, #1
 8018498:	2102      	movs	r1, #2
 801849a:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 801849e:	f7f9 f949 	bl	8011734 <uxr_object_id>
 80184a2:	223c      	movs	r2, #60	@ 0x3c
 80184a4:	6128      	str	r0, [r5, #16]
 80184a6:	4641      	mov	r1, r8
 80184a8:	4638      	mov	r0, r7
 80184aa:	f7f5 fcdd 	bl	800de68 <generate_topic_name>
 80184ae:	b310      	cbz	r0, 80184f6 <create_topic+0x8a>
 80184b0:	4f16      	ldr	r7, [pc, #88]	@ (801850c <create_topic+0xa0>)
 80184b2:	4630      	mov	r0, r6
 80184b4:	2264      	movs	r2, #100	@ 0x64
 80184b6:	4639      	mov	r1, r7
 80184b8:	f7f5 fca6 	bl	800de08 <generate_type_name>
 80184bc:	b1d8      	cbz	r0, 80184f6 <create_topic+0x8a>
 80184be:	6920      	ldr	r0, [r4, #16]
 80184c0:	2306      	movs	r3, #6
 80184c2:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 80184c6:	f8cd 8000 	str.w	r8, [sp]
 80184ca:	e9cd 7301 	strd	r7, r3, [sp, #4]
 80184ce:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80184d2:	6811      	ldr	r1, [r2, #0]
 80184d4:	6963      	ldr	r3, [r4, #20]
 80184d6:	692a      	ldr	r2, [r5, #16]
 80184d8:	f7f8 ff96 	bl	8011408 <uxr_buffer_create_topic_bin>
 80184dc:	4602      	mov	r2, r0
 80184de:	6920      	ldr	r0, [r4, #16]
 80184e0:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 80184e4:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 80184e8:	f7f5 fbb8 	bl	800dc5c <run_xrce_session>
 80184ec:	b118      	cbz	r0, 80184f6 <create_topic+0x8a>
 80184ee:	4628      	mov	r0, r5
 80184f0:	b004      	add	sp, #16
 80184f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80184f6:	4628      	mov	r0, r5
 80184f8:	f7f5 faa6 	bl	800da48 <rmw_uxrce_fini_topic_memory>
 80184fc:	2500      	movs	r5, #0
 80184fe:	4628      	mov	r0, r5
 8018500:	b004      	add	sp, #16
 8018502:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018506:	bf00      	nop
 8018508:	20015bc8 	.word	0x20015bc8
 801850c:	20019644 	.word	0x20019644
 8018510:	200196a8 	.word	0x200196a8

08018514 <destroy_topic>:
 8018514:	b538      	push	{r3, r4, r5, lr}
 8018516:	6984      	ldr	r4, [r0, #24]
 8018518:	b1d4      	cbz	r4, 8018550 <destroy_topic+0x3c>
 801851a:	4605      	mov	r5, r0
 801851c:	6920      	ldr	r0, [r4, #16]
 801851e:	692a      	ldr	r2, [r5, #16]
 8018520:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8018524:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8018528:	6819      	ldr	r1, [r3, #0]
 801852a:	f7f8 fef1 	bl	8011310 <uxr_buffer_delete_entity>
 801852e:	4602      	mov	r2, r0
 8018530:	6920      	ldr	r0, [r4, #16]
 8018532:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8018536:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801853a:	f7f5 fb8f 	bl	800dc5c <run_xrce_session>
 801853e:	f080 0401 	eor.w	r4, r0, #1
 8018542:	b2e4      	uxtb	r4, r4
 8018544:	4628      	mov	r0, r5
 8018546:	0064      	lsls	r4, r4, #1
 8018548:	f7f5 fa7e 	bl	800da48 <rmw_uxrce_fini_topic_memory>
 801854c:	4620      	mov	r0, r4
 801854e:	bd38      	pop	{r3, r4, r5, pc}
 8018550:	2401      	movs	r4, #1
 8018552:	4620      	mov	r0, r4
 8018554:	bd38      	pop	{r3, r4, r5, pc}
 8018556:	bf00      	nop

08018558 <create_node>:
 8018558:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801855c:	b083      	sub	sp, #12
 801855e:	2b00      	cmp	r3, #0
 8018560:	d063      	beq.n	801862a <create_node+0xd2>
 8018562:	4606      	mov	r6, r0
 8018564:	4836      	ldr	r0, [pc, #216]	@ (8018640 <create_node+0xe8>)
 8018566:	460f      	mov	r7, r1
 8018568:	4690      	mov	r8, r2
 801856a:	461d      	mov	r5, r3
 801856c:	f7ff fc90 	bl	8017e90 <get_memory>
 8018570:	2800      	cmp	r0, #0
 8018572:	d05a      	beq.n	801862a <create_node+0xd2>
 8018574:	6884      	ldr	r4, [r0, #8]
 8018576:	6eeb      	ldr	r3, [r5, #108]	@ 0x6c
 8018578:	6123      	str	r3, [r4, #16]
 801857a:	f7ff fd0f 	bl	8017f9c <rmw_get_implementation_identifier>
 801857e:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 8018582:	e9c4 0406 	strd	r0, r4, [r4, #24]
 8018586:	f8c4 9020 	str.w	r9, [r4, #32]
 801858a:	4630      	mov	r0, r6
 801858c:	f7e7 fe98 	bl	80002c0 <strlen>
 8018590:	1c42      	adds	r2, r0, #1
 8018592:	2a3c      	cmp	r2, #60	@ 0x3c
 8018594:	f104 0518 	add.w	r5, r4, #24
 8018598:	d844      	bhi.n	8018624 <create_node+0xcc>
 801859a:	4648      	mov	r0, r9
 801859c:	4631      	mov	r1, r6
 801859e:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 80185a2:	f004 ffda 	bl	801d55a <memcpy>
 80185a6:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 80185aa:	4638      	mov	r0, r7
 80185ac:	f7e7 fe88 	bl	80002c0 <strlen>
 80185b0:	1c42      	adds	r2, r0, #1
 80185b2:	2a3c      	cmp	r2, #60	@ 0x3c
 80185b4:	d836      	bhi.n	8018624 <create_node+0xcc>
 80185b6:	4639      	mov	r1, r7
 80185b8:	4648      	mov	r0, r9
 80185ba:	f004 ffce 	bl	801d55a <memcpy>
 80185be:	6923      	ldr	r3, [r4, #16]
 80185c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80185c4:	2101      	movs	r1, #1
 80185c6:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 80185ca:	1842      	adds	r2, r0, r1
 80185cc:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 80185d0:	f7f9 f8b0 	bl	8011734 <uxr_object_id>
 80185d4:	6160      	str	r0, [r4, #20]
 80185d6:	783b      	ldrb	r3, [r7, #0]
 80185d8:	2b2f      	cmp	r3, #47	@ 0x2f
 80185da:	d128      	bne.n	801862e <create_node+0xd6>
 80185dc:	787b      	ldrb	r3, [r7, #1]
 80185de:	bb33      	cbnz	r3, 801862e <create_node+0xd6>
 80185e0:	4a18      	ldr	r2, [pc, #96]	@ (8018644 <create_node+0xec>)
 80185e2:	4819      	ldr	r0, [pc, #100]	@ (8018648 <create_node+0xf0>)
 80185e4:	4633      	mov	r3, r6
 80185e6:	213c      	movs	r1, #60	@ 0x3c
 80185e8:	f004 fbd4 	bl	801cd94 <sniprintf>
 80185ec:	6920      	ldr	r0, [r4, #16]
 80185ee:	4916      	ldr	r1, [pc, #88]	@ (8018648 <create_node+0xf0>)
 80185f0:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 80185f4:	9100      	str	r1, [sp, #0]
 80185f6:	2106      	movs	r1, #6
 80185f8:	9101      	str	r1, [sp, #4]
 80185fa:	6811      	ldr	r1, [r2, #0]
 80185fc:	6962      	ldr	r2, [r4, #20]
 80185fe:	fa1f f388 	uxth.w	r3, r8
 8018602:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8018606:	f7f8 fecd 	bl	80113a4 <uxr_buffer_create_participant_bin>
 801860a:	4602      	mov	r2, r0
 801860c:	6920      	ldr	r0, [r4, #16]
 801860e:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8018612:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8018616:	f7f5 fb21 	bl	800dc5c <run_xrce_session>
 801861a:	b118      	cbz	r0, 8018624 <create_node+0xcc>
 801861c:	4628      	mov	r0, r5
 801861e:	b003      	add	sp, #12
 8018620:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018624:	4628      	mov	r0, r5
 8018626:	f7f5 f99f 	bl	800d968 <rmw_uxrce_fini_node_memory>
 801862a:	2500      	movs	r5, #0
 801862c:	e7f6      	b.n	801861c <create_node+0xc4>
 801862e:	4a07      	ldr	r2, [pc, #28]	@ (801864c <create_node+0xf4>)
 8018630:	9600      	str	r6, [sp, #0]
 8018632:	463b      	mov	r3, r7
 8018634:	213c      	movs	r1, #60	@ 0x3c
 8018636:	4804      	ldr	r0, [pc, #16]	@ (8018648 <create_node+0xf0>)
 8018638:	f004 fbac 	bl	801cd94 <sniprintf>
 801863c:	e7d6      	b.n	80185ec <create_node+0x94>
 801863e:	bf00      	nop
 8018640:	20017d3c 	.word	0x20017d3c
 8018644:	0801ed7c 	.word	0x0801ed7c
 8018648:	200196e4 	.word	0x200196e4
 801864c:	0801f3c0 	.word	0x0801f3c0

08018650 <rmw_create_node>:
 8018650:	b191      	cbz	r1, 8018678 <rmw_create_node+0x28>
 8018652:	b410      	push	{r4}
 8018654:	4614      	mov	r4, r2
 8018656:	780a      	ldrb	r2, [r1, #0]
 8018658:	4603      	mov	r3, r0
 801865a:	4608      	mov	r0, r1
 801865c:	b142      	cbz	r2, 8018670 <rmw_create_node+0x20>
 801865e:	b13c      	cbz	r4, 8018670 <rmw_create_node+0x20>
 8018660:	7822      	ldrb	r2, [r4, #0]
 8018662:	b12a      	cbz	r2, 8018670 <rmw_create_node+0x20>
 8018664:	4621      	mov	r1, r4
 8018666:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8018668:	f85d 4b04 	ldr.w	r4, [sp], #4
 801866c:	f7ff bf74 	b.w	8018558 <create_node>
 8018670:	2000      	movs	r0, #0
 8018672:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018676:	4770      	bx	lr
 8018678:	2000      	movs	r0, #0
 801867a:	4770      	bx	lr

0801867c <rmw_destroy_node>:
 801867c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801867e:	b328      	cbz	r0, 80186cc <rmw_destroy_node+0x50>
 8018680:	4607      	mov	r7, r0
 8018682:	6800      	ldr	r0, [r0, #0]
 8018684:	b120      	cbz	r0, 8018690 <rmw_destroy_node+0x14>
 8018686:	4b36      	ldr	r3, [pc, #216]	@ (8018760 <rmw_destroy_node+0xe4>)
 8018688:	6819      	ldr	r1, [r3, #0]
 801868a:	f7e7 fdb9 	bl	8000200 <strcmp>
 801868e:	b9e8      	cbnz	r0, 80186cc <rmw_destroy_node+0x50>
 8018690:	687d      	ldr	r5, [r7, #4]
 8018692:	b1dd      	cbz	r5, 80186cc <rmw_destroy_node+0x50>
 8018694:	4b33      	ldr	r3, [pc, #204]	@ (8018764 <rmw_destroy_node+0xe8>)
 8018696:	681c      	ldr	r4, [r3, #0]
 8018698:	2c00      	cmp	r4, #0
 801869a:	d05f      	beq.n	801875c <rmw_destroy_node+0xe0>
 801869c:	2600      	movs	r6, #0
 801869e:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 80186a2:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 80186a6:	429d      	cmp	r5, r3
 80186a8:	d013      	beq.n	80186d2 <rmw_destroy_node+0x56>
 80186aa:	2c00      	cmp	r4, #0
 80186ac:	d1f7      	bne.n	801869e <rmw_destroy_node+0x22>
 80186ae:	4b2e      	ldr	r3, [pc, #184]	@ (8018768 <rmw_destroy_node+0xec>)
 80186b0:	681c      	ldr	r4, [r3, #0]
 80186b2:	b1c4      	cbz	r4, 80186e6 <rmw_destroy_node+0x6a>
 80186b4:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 80186b8:	6a0b      	ldr	r3, [r1, #32]
 80186ba:	429d      	cmp	r5, r3
 80186bc:	d1f9      	bne.n	80186b2 <rmw_destroy_node+0x36>
 80186be:	317c      	adds	r1, #124	@ 0x7c
 80186c0:	4638      	mov	r0, r7
 80186c2:	f000 fbc7 	bl	8018e54 <rmw_destroy_subscription>
 80186c6:	2801      	cmp	r0, #1
 80186c8:	4606      	mov	r6, r0
 80186ca:	d1f2      	bne.n	80186b2 <rmw_destroy_node+0x36>
 80186cc:	2601      	movs	r6, #1
 80186ce:	4630      	mov	r0, r6
 80186d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80186d2:	3184      	adds	r1, #132	@ 0x84
 80186d4:	4638      	mov	r0, r7
 80186d6:	f7f4 ff8f 	bl	800d5f8 <rmw_destroy_publisher>
 80186da:	2801      	cmp	r0, #1
 80186dc:	4606      	mov	r6, r0
 80186de:	d0f5      	beq.n	80186cc <rmw_destroy_node+0x50>
 80186e0:	2c00      	cmp	r4, #0
 80186e2:	d1dc      	bne.n	801869e <rmw_destroy_node+0x22>
 80186e4:	e7e3      	b.n	80186ae <rmw_destroy_node+0x32>
 80186e6:	4b21      	ldr	r3, [pc, #132]	@ (801876c <rmw_destroy_node+0xf0>)
 80186e8:	681c      	ldr	r4, [r3, #0]
 80186ea:	b16c      	cbz	r4, 8018708 <rmw_destroy_node+0x8c>
 80186ec:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 80186f0:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 80186f2:	429d      	cmp	r5, r3
 80186f4:	d1f9      	bne.n	80186ea <rmw_destroy_node+0x6e>
 80186f6:	317c      	adds	r1, #124	@ 0x7c
 80186f8:	4638      	mov	r0, r7
 80186fa:	f000 fa5d 	bl	8018bb8 <rmw_destroy_service>
 80186fe:	2801      	cmp	r0, #1
 8018700:	4606      	mov	r6, r0
 8018702:	d0e3      	beq.n	80186cc <rmw_destroy_node+0x50>
 8018704:	2c00      	cmp	r4, #0
 8018706:	d1f1      	bne.n	80186ec <rmw_destroy_node+0x70>
 8018708:	4b19      	ldr	r3, [pc, #100]	@ (8018770 <rmw_destroy_node+0xf4>)
 801870a:	681c      	ldr	r4, [r3, #0]
 801870c:	b16c      	cbz	r4, 801872a <rmw_destroy_node+0xae>
 801870e:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8018712:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 8018714:	429d      	cmp	r5, r3
 8018716:	d1f9      	bne.n	801870c <rmw_destroy_node+0x90>
 8018718:	317c      	adds	r1, #124	@ 0x7c
 801871a:	4638      	mov	r0, r7
 801871c:	f7ff fbdc 	bl	8017ed8 <rmw_destroy_client>
 8018720:	2801      	cmp	r0, #1
 8018722:	4606      	mov	r6, r0
 8018724:	d0d2      	beq.n	80186cc <rmw_destroy_node+0x50>
 8018726:	2c00      	cmp	r4, #0
 8018728:	d1f1      	bne.n	801870e <rmw_destroy_node+0x92>
 801872a:	6928      	ldr	r0, [r5, #16]
 801872c:	696a      	ldr	r2, [r5, #20]
 801872e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8018732:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8018736:	6819      	ldr	r1, [r3, #0]
 8018738:	f7f8 fdea 	bl	8011310 <uxr_buffer_delete_entity>
 801873c:	4602      	mov	r2, r0
 801873e:	6928      	ldr	r0, [r5, #16]
 8018740:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8018744:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8018748:	f7f5 fa88 	bl	800dc5c <run_xrce_session>
 801874c:	2800      	cmp	r0, #0
 801874e:	bf08      	it	eq
 8018750:	2602      	moveq	r6, #2
 8018752:	4638      	mov	r0, r7
 8018754:	f7f5 f908 	bl	800d968 <rmw_uxrce_fini_node_memory>
 8018758:	4630      	mov	r0, r6
 801875a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801875c:	4626      	mov	r6, r4
 801875e:	e7a6      	b.n	80186ae <rmw_destroy_node+0x32>
 8018760:	080202d0 	.word	0x080202d0
 8018764:	20017c88 	.word	0x20017c88
 8018768:	20017408 	.word	0x20017408
 801876c:	20016b88 	.word	0x20016b88
 8018770:	200163a8 	.word	0x200163a8

08018774 <rmw_node_get_graph_guard_condition>:
 8018774:	6843      	ldr	r3, [r0, #4]
 8018776:	6918      	ldr	r0, [r3, #16]
 8018778:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 801877c:	4770      	bx	lr
 801877e:	bf00      	nop

08018780 <rmw_send_request>:
 8018780:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018784:	4604      	mov	r4, r0
 8018786:	6800      	ldr	r0, [r0, #0]
 8018788:	b08a      	sub	sp, #40	@ 0x28
 801878a:	460e      	mov	r6, r1
 801878c:	4615      	mov	r5, r2
 801878e:	b128      	cbz	r0, 801879c <rmw_send_request+0x1c>
 8018790:	4b1e      	ldr	r3, [pc, #120]	@ (801880c <rmw_send_request+0x8c>)
 8018792:	6819      	ldr	r1, [r3, #0]
 8018794:	f7e7 fd34 	bl	8000200 <strcmp>
 8018798:	2800      	cmp	r0, #0
 801879a:	d133      	bne.n	8018804 <rmw_send_request+0x84>
 801879c:	6864      	ldr	r4, [r4, #4]
 801879e:	6963      	ldr	r3, [r4, #20]
 80187a0:	6fa7      	ldr	r7, [r4, #120]	@ 0x78
 80187a2:	689b      	ldr	r3, [r3, #8]
 80187a4:	4798      	blx	r3
 80187a6:	f8d0 8004 	ldr.w	r8, [r0, #4]
 80187aa:	4630      	mov	r0, r6
 80187ac:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80187b0:	4798      	blx	r3
 80187b2:	693b      	ldr	r3, [r7, #16]
 80187b4:	9000      	str	r0, [sp, #0]
 80187b6:	6922      	ldr	r2, [r4, #16]
 80187b8:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 80187ba:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 80187be:	ab02      	add	r3, sp, #8
 80187c0:	f7fa fa60 	bl	8012c84 <uxr_prepare_output_stream>
 80187c4:	2300      	movs	r3, #0
 80187c6:	6028      	str	r0, [r5, #0]
 80187c8:	606b      	str	r3, [r5, #4]
 80187ca:	b190      	cbz	r0, 80187f2 <rmw_send_request+0x72>
 80187cc:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80187d0:	a902      	add	r1, sp, #8
 80187d2:	4630      	mov	r0, r6
 80187d4:	4798      	blx	r3
 80187d6:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 80187da:	6938      	ldr	r0, [r7, #16]
 80187dc:	2b01      	cmp	r3, #1
 80187de:	d00c      	beq.n	80187fa <rmw_send_request+0x7a>
 80187e0:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 80187e2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80187e6:	f7f9 fc6b 	bl	80120c0 <uxr_run_session_until_confirm_delivery>
 80187ea:	2000      	movs	r0, #0
 80187ec:	b00a      	add	sp, #40	@ 0x28
 80187ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80187f2:	2001      	movs	r0, #1
 80187f4:	b00a      	add	sp, #40	@ 0x28
 80187f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80187fa:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80187fe:	f7f9 f8c7 	bl	8011990 <uxr_flash_output_streams>
 8018802:	e7f2      	b.n	80187ea <rmw_send_request+0x6a>
 8018804:	200c      	movs	r0, #12
 8018806:	b00a      	add	sp, #40	@ 0x28
 8018808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801880c:	080202d0 	.word	0x080202d0

08018810 <rmw_take_request>:
 8018810:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018814:	4605      	mov	r5, r0
 8018816:	6800      	ldr	r0, [r0, #0]
 8018818:	b089      	sub	sp, #36	@ 0x24
 801881a:	460c      	mov	r4, r1
 801881c:	4690      	mov	r8, r2
 801881e:	461e      	mov	r6, r3
 8018820:	b128      	cbz	r0, 801882e <rmw_take_request+0x1e>
 8018822:	4b28      	ldr	r3, [pc, #160]	@ (80188c4 <rmw_take_request+0xb4>)
 8018824:	6819      	ldr	r1, [r3, #0]
 8018826:	f7e7 fceb 	bl	8000200 <strcmp>
 801882a:	2800      	cmp	r0, #0
 801882c:	d146      	bne.n	80188bc <rmw_take_request+0xac>
 801882e:	b10e      	cbz	r6, 8018834 <rmw_take_request+0x24>
 8018830:	2300      	movs	r3, #0
 8018832:	7033      	strb	r3, [r6, #0]
 8018834:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8018838:	f7f5 f992 	bl	800db60 <rmw_uxrce_clean_expired_static_input_buffer>
 801883c:	4648      	mov	r0, r9
 801883e:	f7f5 f967 	bl	800db10 <rmw_uxrce_find_static_input_buffer_by_owner>
 8018842:	4607      	mov	r7, r0
 8018844:	b3b0      	cbz	r0, 80188b4 <rmw_take_request+0xa4>
 8018846:	6885      	ldr	r5, [r0, #8]
 8018848:	f8d5 3838 	ldr.w	r3, [r5, #2104]	@ 0x838
 801884c:	f8d5 283c 	ldr.w	r2, [r5, #2108]	@ 0x83c
 8018850:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8018854:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 8018858:	7423      	strb	r3, [r4, #16]
 801885a:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	@ 0x834
 801885e:	f895 2836 	ldrb.w	r2, [r5, #2102]	@ 0x836
 8018862:	74e2      	strb	r2, [r4, #19]
 8018864:	f8a4 3011 	strh.w	r3, [r4, #17]
 8018868:	f8d5 2828 	ldr.w	r2, [r5, #2088]	@ 0x828
 801886c:	f8d5 382c 	ldr.w	r3, [r5, #2092]	@ 0x82c
 8018870:	f8d5 1830 	ldr.w	r1, [r5, #2096]	@ 0x830
 8018874:	61e1      	str	r1, [r4, #28]
 8018876:	6162      	str	r2, [r4, #20]
 8018878:	61a3      	str	r3, [r4, #24]
 801887a:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801887e:	689b      	ldr	r3, [r3, #8]
 8018880:	4798      	blx	r3
 8018882:	6844      	ldr	r4, [r0, #4]
 8018884:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 8018888:	f105 0110 	add.w	r1, r5, #16
 801888c:	4668      	mov	r0, sp
 801888e:	f7f8 fc73 	bl	8011178 <ucdr_init_buffer>
 8018892:	68e3      	ldr	r3, [r4, #12]
 8018894:	4641      	mov	r1, r8
 8018896:	4668      	mov	r0, sp
 8018898:	4798      	blx	r3
 801889a:	4639      	mov	r1, r7
 801889c:	4604      	mov	r4, r0
 801889e:	480a      	ldr	r0, [pc, #40]	@ (80188c8 <rmw_take_request+0xb8>)
 80188a0:	f7ff fb06 	bl	8017eb0 <put_memory>
 80188a4:	b106      	cbz	r6, 80188a8 <rmw_take_request+0x98>
 80188a6:	7034      	strb	r4, [r6, #0]
 80188a8:	f084 0001 	eor.w	r0, r4, #1
 80188ac:	b2c0      	uxtb	r0, r0
 80188ae:	b009      	add	sp, #36	@ 0x24
 80188b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80188b4:	2001      	movs	r0, #1
 80188b6:	b009      	add	sp, #36	@ 0x24
 80188b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80188bc:	200c      	movs	r0, #12
 80188be:	b009      	add	sp, #36	@ 0x24
 80188c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80188c4:	080202d0 	.word	0x080202d0
 80188c8:	20015988 	.word	0x20015988

080188cc <rmw_send_response>:
 80188cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80188ce:	4605      	mov	r5, r0
 80188d0:	6800      	ldr	r0, [r0, #0]
 80188d2:	b091      	sub	sp, #68	@ 0x44
 80188d4:	460c      	mov	r4, r1
 80188d6:	4616      	mov	r6, r2
 80188d8:	b128      	cbz	r0, 80188e6 <rmw_send_response+0x1a>
 80188da:	4b28      	ldr	r3, [pc, #160]	@ (801897c <rmw_send_response+0xb0>)
 80188dc:	6819      	ldr	r1, [r3, #0]
 80188de:	f7e7 fc8f 	bl	8000200 <strcmp>
 80188e2:	2800      	cmp	r0, #0
 80188e4:	d141      	bne.n	801896a <rmw_send_response+0x9e>
 80188e6:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 80188ea:	9306      	str	r3, [sp, #24]
 80188ec:	4623      	mov	r3, r4
 80188ee:	9207      	str	r2, [sp, #28]
 80188f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80188f4:	686d      	ldr	r5, [r5, #4]
 80188f6:	789b      	ldrb	r3, [r3, #2]
 80188f8:	68a1      	ldr	r1, [r4, #8]
 80188fa:	f88d 2017 	strb.w	r2, [sp, #23]
 80188fe:	f88d 3016 	strb.w	r3, [sp, #22]
 8018902:	68e2      	ldr	r2, [r4, #12]
 8018904:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 8018908:	6860      	ldr	r0, [r4, #4]
 801890a:	f8ad 3014 	strh.w	r3, [sp, #20]
 801890e:	ab02      	add	r3, sp, #8
 8018910:	c307      	stmia	r3!, {r0, r1, r2}
 8018912:	696b      	ldr	r3, [r5, #20]
 8018914:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 8018916:	68db      	ldr	r3, [r3, #12]
 8018918:	4798      	blx	r3
 801891a:	6844      	ldr	r4, [r0, #4]
 801891c:	4630      	mov	r0, r6
 801891e:	6923      	ldr	r3, [r4, #16]
 8018920:	4798      	blx	r3
 8018922:	f100 0318 	add.w	r3, r0, #24
 8018926:	6938      	ldr	r0, [r7, #16]
 8018928:	9300      	str	r3, [sp, #0]
 801892a:	692a      	ldr	r2, [r5, #16]
 801892c:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 801892e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8018932:	ab08      	add	r3, sp, #32
 8018934:	f7fa f9a6 	bl	8012c84 <uxr_prepare_output_stream>
 8018938:	b910      	cbnz	r0, 8018940 <rmw_send_response+0x74>
 801893a:	2001      	movs	r0, #1
 801893c:	b011      	add	sp, #68	@ 0x44
 801893e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018940:	a902      	add	r1, sp, #8
 8018942:	a808      	add	r0, sp, #32
 8018944:	f7fb fade 	bl	8013f04 <uxr_serialize_SampleIdentity>
 8018948:	68a3      	ldr	r3, [r4, #8]
 801894a:	a908      	add	r1, sp, #32
 801894c:	4630      	mov	r0, r6
 801894e:	4798      	blx	r3
 8018950:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 8018954:	6938      	ldr	r0, [r7, #16]
 8018956:	2b01      	cmp	r3, #1
 8018958:	d00a      	beq.n	8018970 <rmw_send_response+0xa4>
 801895a:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 801895c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8018960:	f7f9 fbae 	bl	80120c0 <uxr_run_session_until_confirm_delivery>
 8018964:	2000      	movs	r0, #0
 8018966:	b011      	add	sp, #68	@ 0x44
 8018968:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801896a:	200c      	movs	r0, #12
 801896c:	b011      	add	sp, #68	@ 0x44
 801896e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018970:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8018974:	f7f9 f80c 	bl	8011990 <uxr_flash_output_streams>
 8018978:	e7f4      	b.n	8018964 <rmw_send_response+0x98>
 801897a:	bf00      	nop
 801897c:	080202d0 	.word	0x080202d0

08018980 <rmw_take_response>:
 8018980:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018984:	4604      	mov	r4, r0
 8018986:	6800      	ldr	r0, [r0, #0]
 8018988:	b088      	sub	sp, #32
 801898a:	4688      	mov	r8, r1
 801898c:	4617      	mov	r7, r2
 801898e:	461d      	mov	r5, r3
 8018990:	b120      	cbz	r0, 801899c <rmw_take_response+0x1c>
 8018992:	4b1e      	ldr	r3, [pc, #120]	@ (8018a0c <rmw_take_response+0x8c>)
 8018994:	6819      	ldr	r1, [r3, #0]
 8018996:	f7e7 fc33 	bl	8000200 <strcmp>
 801899a:	bb78      	cbnz	r0, 80189fc <rmw_take_response+0x7c>
 801899c:	b10d      	cbz	r5, 80189a2 <rmw_take_response+0x22>
 801899e:	2300      	movs	r3, #0
 80189a0:	702b      	strb	r3, [r5, #0]
 80189a2:	6864      	ldr	r4, [r4, #4]
 80189a4:	f7f5 f8dc 	bl	800db60 <rmw_uxrce_clean_expired_static_input_buffer>
 80189a8:	4620      	mov	r0, r4
 80189aa:	f7f5 f8b1 	bl	800db10 <rmw_uxrce_find_static_input_buffer_by_owner>
 80189ae:	4606      	mov	r6, r0
 80189b0:	b340      	cbz	r0, 8018a04 <rmw_take_response+0x84>
 80189b2:	6963      	ldr	r3, [r4, #20]
 80189b4:	6884      	ldr	r4, [r0, #8]
 80189b6:	68db      	ldr	r3, [r3, #12]
 80189b8:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 80189bc:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 80189c0:	e9c8 0108 	strd	r0, r1, [r8, #32]
 80189c4:	4798      	blx	r3
 80189c6:	f8d0 8004 	ldr.w	r8, [r0, #4]
 80189ca:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 80189ce:	f104 0110 	add.w	r1, r4, #16
 80189d2:	4668      	mov	r0, sp
 80189d4:	f7f8 fbd0 	bl	8011178 <ucdr_init_buffer>
 80189d8:	4639      	mov	r1, r7
 80189da:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80189de:	4668      	mov	r0, sp
 80189e0:	4798      	blx	r3
 80189e2:	4631      	mov	r1, r6
 80189e4:	4604      	mov	r4, r0
 80189e6:	480a      	ldr	r0, [pc, #40]	@ (8018a10 <rmw_take_response+0x90>)
 80189e8:	f7ff fa62 	bl	8017eb0 <put_memory>
 80189ec:	b105      	cbz	r5, 80189f0 <rmw_take_response+0x70>
 80189ee:	702c      	strb	r4, [r5, #0]
 80189f0:	f084 0001 	eor.w	r0, r4, #1
 80189f4:	b2c0      	uxtb	r0, r0
 80189f6:	b008      	add	sp, #32
 80189f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80189fc:	200c      	movs	r0, #12
 80189fe:	b008      	add	sp, #32
 8018a00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018a04:	2001      	movs	r0, #1
 8018a06:	b008      	add	sp, #32
 8018a08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018a0c:	080202d0 	.word	0x080202d0
 8018a10:	20015988 	.word	0x20015988

08018a14 <rmw_create_service>:
 8018a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018a18:	b091      	sub	sp, #68	@ 0x44
 8018a1a:	2800      	cmp	r0, #0
 8018a1c:	f000 80ba 	beq.w	8018b94 <rmw_create_service+0x180>
 8018a20:	4689      	mov	r9, r1
 8018a22:	2900      	cmp	r1, #0
 8018a24:	f000 80b6 	beq.w	8018b94 <rmw_create_service+0x180>
 8018a28:	4606      	mov	r6, r0
 8018a2a:	6800      	ldr	r0, [r0, #0]
 8018a2c:	4614      	mov	r4, r2
 8018a2e:	461d      	mov	r5, r3
 8018a30:	f7f5 fa34 	bl	800de9c <is_uxrce_rmw_identifier_valid>
 8018a34:	2800      	cmp	r0, #0
 8018a36:	f000 80ad 	beq.w	8018b94 <rmw_create_service+0x180>
 8018a3a:	2c00      	cmp	r4, #0
 8018a3c:	f000 80aa 	beq.w	8018b94 <rmw_create_service+0x180>
 8018a40:	7823      	ldrb	r3, [r4, #0]
 8018a42:	2b00      	cmp	r3, #0
 8018a44:	f000 80a6 	beq.w	8018b94 <rmw_create_service+0x180>
 8018a48:	2d00      	cmp	r5, #0
 8018a4a:	f000 80a3 	beq.w	8018b94 <rmw_create_service+0x180>
 8018a4e:	4854      	ldr	r0, [pc, #336]	@ (8018ba0 <rmw_create_service+0x18c>)
 8018a50:	f8d6 8004 	ldr.w	r8, [r6, #4]
 8018a54:	f7ff fa1c 	bl	8017e90 <get_memory>
 8018a58:	2800      	cmp	r0, #0
 8018a5a:	f000 809b 	beq.w	8018b94 <rmw_create_service+0x180>
 8018a5e:	6886      	ldr	r6, [r0, #8]
 8018a60:	f8c6 6080 	str.w	r6, [r6, #128]	@ 0x80
 8018a64:	f7ff fa9a 	bl	8017f9c <rmw_get_implementation_identifier>
 8018a68:	f106 0a88 	add.w	sl, r6, #136	@ 0x88
 8018a6c:	67f0      	str	r0, [r6, #124]	@ 0x7c
 8018a6e:	f8c6 a084 	str.w	sl, [r6, #132]	@ 0x84
 8018a72:	4620      	mov	r0, r4
 8018a74:	f7e7 fc24 	bl	80002c0 <strlen>
 8018a78:	1c42      	adds	r2, r0, #1
 8018a7a:	2a3c      	cmp	r2, #60	@ 0x3c
 8018a7c:	f106 077c 	add.w	r7, r6, #124	@ 0x7c
 8018a80:	f200 8085 	bhi.w	8018b8e <rmw_create_service+0x17a>
 8018a84:	4621      	mov	r1, r4
 8018a86:	4650      	mov	r0, sl
 8018a88:	f004 fd67 	bl	801d55a <memcpy>
 8018a8c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8018a90:	4629      	mov	r1, r5
 8018a92:	f8c6 8078 	str.w	r8, [r6, #120]	@ 0x78
 8018a96:	6773      	str	r3, [r6, #116]	@ 0x74
 8018a98:	2250      	movs	r2, #80	@ 0x50
 8018a9a:	f106 0020 	add.w	r0, r6, #32
 8018a9e:	f004 fd5c 	bl	801d55a <memcpy>
 8018aa2:	4940      	ldr	r1, [pc, #256]	@ (8018ba4 <rmw_create_service+0x190>)
 8018aa4:	4648      	mov	r0, r9
 8018aa6:	f7f5 fa13 	bl	800ded0 <get_service_typesupport_handle>
 8018aaa:	2800      	cmp	r0, #0
 8018aac:	d06f      	beq.n	8018b8e <rmw_create_service+0x17a>
 8018aae:	6843      	ldr	r3, [r0, #4]
 8018ab0:	6173      	str	r3, [r6, #20]
 8018ab2:	2b00      	cmp	r3, #0
 8018ab4:	d06b      	beq.n	8018b8e <rmw_create_service+0x17a>
 8018ab6:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8018aba:	f8df a0f0 	ldr.w	sl, [pc, #240]	@ 8018bac <rmw_create_service+0x198>
 8018abe:	f8df 90f0 	ldr.w	r9, [pc, #240]	@ 8018bb0 <rmw_create_service+0x19c>
 8018ac2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018ac6:	2108      	movs	r1, #8
 8018ac8:	f8b3 05a2 	ldrh.w	r0, [r3, #1442]	@ 0x5a2
 8018acc:	1c42      	adds	r2, r0, #1
 8018ace:	f8a3 25a2 	strh.w	r2, [r3, #1442]	@ 0x5a2
 8018ad2:	f7f8 fe2f 	bl	8011734 <uxr_object_id>
 8018ad6:	2364      	movs	r3, #100	@ 0x64
 8018ad8:	6130      	str	r0, [r6, #16]
 8018ada:	4652      	mov	r2, sl
 8018adc:	6970      	ldr	r0, [r6, #20]
 8018ade:	4649      	mov	r1, r9
 8018ae0:	f7f5 f92a 	bl	800dd38 <generate_service_types>
 8018ae4:	2800      	cmp	r0, #0
 8018ae6:	d052      	beq.n	8018b8e <rmw_create_service+0x17a>
 8018ae8:	f8df b0c8 	ldr.w	fp, [pc, #200]	@ 8018bb4 <rmw_create_service+0x1a0>
 8018aec:	492e      	ldr	r1, [pc, #184]	@ (8018ba8 <rmw_create_service+0x194>)
 8018aee:	233c      	movs	r3, #60	@ 0x3c
 8018af0:	465a      	mov	r2, fp
 8018af2:	4620      	mov	r0, r4
 8018af4:	f7f5 f8ee 	bl	800dcd4 <generate_service_topics>
 8018af8:	2800      	cmp	r0, #0
 8018afa:	d048      	beq.n	8018b8e <rmw_create_service+0x17a>
 8018afc:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8018b00:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8018b04:	a80c      	add	r0, sp, #48	@ 0x30
 8018b06:	4629      	mov	r1, r5
 8018b08:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8018b0c:	f7f5 f8c6 	bl	800dc9c <convert_qos_profile>
 8018b10:	4b25      	ldr	r3, [pc, #148]	@ (8018ba8 <rmw_create_service+0x194>)
 8018b12:	f8cd b010 	str.w	fp, [sp, #16]
 8018b16:	e9cd a302 	strd	sl, r3, [sp, #8]
 8018b1a:	e9cd 4900 	strd	r4, r9, [sp]
 8018b1e:	a80c      	add	r0, sp, #48	@ 0x30
 8018b20:	c803      	ldmia	r0, {r0, r1}
 8018b22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018b24:	9005      	str	r0, [sp, #20]
 8018b26:	9a08      	ldr	r2, [sp, #32]
 8018b28:	f8ad 1018 	strh.w	r1, [sp, #24]
 8018b2c:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8018b30:	2306      	movs	r3, #6
 8018b32:	9307      	str	r3, [sp, #28]
 8018b34:	6811      	ldr	r1, [r2, #0]
 8018b36:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8018b3a:	6932      	ldr	r2, [r6, #16]
 8018b3c:	f7f8 fdc0 	bl	80116c0 <uxr_buffer_create_replier_bin>
 8018b40:	4602      	mov	r2, r0
 8018b42:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8018b46:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8018b4a:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8018b4e:	f7f5 f885 	bl	800dc5c <run_xrce_session>
 8018b52:	b1e0      	cbz	r0, 8018b8e <rmw_create_service+0x17a>
 8018b54:	7a2b      	ldrb	r3, [r5, #8]
 8018b56:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8018b5a:	2200      	movs	r2, #0
 8018b5c:	2b02      	cmp	r3, #2
 8018b5e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8018b62:	e9cd 120e 	strd	r1, r2, [sp, #56]	@ 0x38
 8018b66:	bf0c      	ite	eq
 8018b68:	e9d0 23df 	ldrdeq	r2, r3, [r0, #892]	@ 0x37c
 8018b6c:	e9d0 32dd 	ldrdne	r3, r2, [r0, #884]	@ 0x374
 8018b70:	6732      	str	r2, [r6, #112]	@ 0x70
 8018b72:	930b      	str	r3, [sp, #44]	@ 0x2c
 8018b74:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8018b78:	ab0e      	add	r3, sp, #56	@ 0x38
 8018b7a:	9300      	str	r3, [sp, #0]
 8018b7c:	6811      	ldr	r1, [r2, #0]
 8018b7e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018b80:	6932      	ldr	r2, [r6, #16]
 8018b82:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8018b86:	f001 ffc5 	bl	801ab14 <uxr_buffer_request_data>
 8018b8a:	8330      	strh	r0, [r6, #24]
 8018b8c:	e003      	b.n	8018b96 <rmw_create_service+0x182>
 8018b8e:	4638      	mov	r0, r7
 8018b90:	f7f4 ff2e 	bl	800d9f0 <rmw_uxrce_fini_service_memory>
 8018b94:	2700      	movs	r7, #0
 8018b96:	4638      	mov	r0, r7
 8018b98:	b011      	add	sp, #68	@ 0x44
 8018b9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018b9e:	bf00      	nop
 8018ba0:	20016b88 	.word	0x20016b88
 8018ba4:	0801e808 	.word	0x0801e808
 8018ba8:	2001975c 	.word	0x2001975c
 8018bac:	20019798 	.word	0x20019798
 8018bb0:	200197fc 	.word	0x200197fc
 8018bb4:	20019720 	.word	0x20019720

08018bb8 <rmw_destroy_service>:
 8018bb8:	b570      	push	{r4, r5, r6, lr}
 8018bba:	b128      	cbz	r0, 8018bc8 <rmw_destroy_service+0x10>
 8018bbc:	4604      	mov	r4, r0
 8018bbe:	6800      	ldr	r0, [r0, #0]
 8018bc0:	460d      	mov	r5, r1
 8018bc2:	f7f5 f96b 	bl	800de9c <is_uxrce_rmw_identifier_valid>
 8018bc6:	b910      	cbnz	r0, 8018bce <rmw_destroy_service+0x16>
 8018bc8:	2401      	movs	r4, #1
 8018bca:	4620      	mov	r0, r4
 8018bcc:	bd70      	pop	{r4, r5, r6, pc}
 8018bce:	6863      	ldr	r3, [r4, #4]
 8018bd0:	2b00      	cmp	r3, #0
 8018bd2:	d0f9      	beq.n	8018bc8 <rmw_destroy_service+0x10>
 8018bd4:	2d00      	cmp	r5, #0
 8018bd6:	d0f7      	beq.n	8018bc8 <rmw_destroy_service+0x10>
 8018bd8:	6828      	ldr	r0, [r5, #0]
 8018bda:	f7f5 f95f 	bl	800de9c <is_uxrce_rmw_identifier_valid>
 8018bde:	2800      	cmp	r0, #0
 8018be0:	d0f2      	beq.n	8018bc8 <rmw_destroy_service+0x10>
 8018be2:	686e      	ldr	r6, [r5, #4]
 8018be4:	2e00      	cmp	r6, #0
 8018be6:	d0ef      	beq.n	8018bc8 <rmw_destroy_service+0x10>
 8018be8:	6864      	ldr	r4, [r4, #4]
 8018bea:	6932      	ldr	r2, [r6, #16]
 8018bec:	6920      	ldr	r0, [r4, #16]
 8018bee:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8018bf2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8018bf6:	6819      	ldr	r1, [r3, #0]
 8018bf8:	f001 ffc4 	bl	801ab84 <uxr_buffer_cancel_data>
 8018bfc:	4602      	mov	r2, r0
 8018bfe:	6920      	ldr	r0, [r4, #16]
 8018c00:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8018c04:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8018c08:	f7f5 f828 	bl	800dc5c <run_xrce_session>
 8018c0c:	6920      	ldr	r0, [r4, #16]
 8018c0e:	6932      	ldr	r2, [r6, #16]
 8018c10:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8018c14:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8018c18:	6819      	ldr	r1, [r3, #0]
 8018c1a:	f7f8 fb79 	bl	8011310 <uxr_buffer_delete_entity>
 8018c1e:	4602      	mov	r2, r0
 8018c20:	6920      	ldr	r0, [r4, #16]
 8018c22:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8018c26:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8018c2a:	f7f5 f817 	bl	800dc5c <run_xrce_session>
 8018c2e:	f080 0401 	eor.w	r4, r0, #1
 8018c32:	b2e4      	uxtb	r4, r4
 8018c34:	4628      	mov	r0, r5
 8018c36:	0064      	lsls	r4, r4, #1
 8018c38:	f7f4 feda 	bl	800d9f0 <rmw_uxrce_fini_service_memory>
 8018c3c:	e7c5      	b.n	8018bca <rmw_destroy_service+0x12>
 8018c3e:	bf00      	nop

08018c40 <rmw_service_response_publisher_get_actual_qos>:
 8018c40:	b508      	push	{r3, lr}
 8018c42:	4603      	mov	r3, r0
 8018c44:	b140      	cbz	r0, 8018c58 <rmw_service_response_publisher_get_actual_qos+0x18>
 8018c46:	4608      	mov	r0, r1
 8018c48:	b131      	cbz	r1, 8018c58 <rmw_service_response_publisher_get_actual_qos+0x18>
 8018c4a:	6859      	ldr	r1, [r3, #4]
 8018c4c:	2250      	movs	r2, #80	@ 0x50
 8018c4e:	3120      	adds	r1, #32
 8018c50:	f004 fc83 	bl	801d55a <memcpy>
 8018c54:	2000      	movs	r0, #0
 8018c56:	bd08      	pop	{r3, pc}
 8018c58:	200b      	movs	r0, #11
 8018c5a:	bd08      	pop	{r3, pc}

08018c5c <rmw_service_request_subscription_get_actual_qos>:
 8018c5c:	b508      	push	{r3, lr}
 8018c5e:	4603      	mov	r3, r0
 8018c60:	b140      	cbz	r0, 8018c74 <rmw_service_request_subscription_get_actual_qos+0x18>
 8018c62:	4608      	mov	r0, r1
 8018c64:	b131      	cbz	r1, 8018c74 <rmw_service_request_subscription_get_actual_qos+0x18>
 8018c66:	6859      	ldr	r1, [r3, #4]
 8018c68:	2250      	movs	r2, #80	@ 0x50
 8018c6a:	3120      	adds	r1, #32
 8018c6c:	f004 fc75 	bl	801d55a <memcpy>
 8018c70:	2000      	movs	r0, #0
 8018c72:	bd08      	pop	{r3, pc}
 8018c74:	200b      	movs	r0, #11
 8018c76:	bd08      	pop	{r3, pc}

08018c78 <rmw_create_subscription>:
 8018c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018c7c:	b08d      	sub	sp, #52	@ 0x34
 8018c7e:	2800      	cmp	r0, #0
 8018c80:	f000 80d1 	beq.w	8018e26 <rmw_create_subscription+0x1ae>
 8018c84:	460f      	mov	r7, r1
 8018c86:	2900      	cmp	r1, #0
 8018c88:	f000 80cd 	beq.w	8018e26 <rmw_create_subscription+0x1ae>
 8018c8c:	4604      	mov	r4, r0
 8018c8e:	6800      	ldr	r0, [r0, #0]
 8018c90:	4615      	mov	r5, r2
 8018c92:	461e      	mov	r6, r3
 8018c94:	f7f5 f902 	bl	800de9c <is_uxrce_rmw_identifier_valid>
 8018c98:	2800      	cmp	r0, #0
 8018c9a:	f000 80c4 	beq.w	8018e26 <rmw_create_subscription+0x1ae>
 8018c9e:	2d00      	cmp	r5, #0
 8018ca0:	f000 80c1 	beq.w	8018e26 <rmw_create_subscription+0x1ae>
 8018ca4:	782b      	ldrb	r3, [r5, #0]
 8018ca6:	2b00      	cmp	r3, #0
 8018ca8:	f000 80bd 	beq.w	8018e26 <rmw_create_subscription+0x1ae>
 8018cac:	2e00      	cmp	r6, #0
 8018cae:	f000 80ba 	beq.w	8018e26 <rmw_create_subscription+0x1ae>
 8018cb2:	485e      	ldr	r0, [pc, #376]	@ (8018e2c <rmw_create_subscription+0x1b4>)
 8018cb4:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8018cb8:	f7ff f8ea 	bl	8017e90 <get_memory>
 8018cbc:	2800      	cmp	r0, #0
 8018cbe:	f000 80b2 	beq.w	8018e26 <rmw_create_subscription+0x1ae>
 8018cc2:	6884      	ldr	r4, [r0, #8]
 8018cc4:	f8c4 4080 	str.w	r4, [r4, #128]	@ 0x80
 8018cc8:	f7ff f968 	bl	8017f9c <rmw_get_implementation_identifier>
 8018ccc:	f104 0a98 	add.w	sl, r4, #152	@ 0x98
 8018cd0:	67e0      	str	r0, [r4, #124]	@ 0x7c
 8018cd2:	f8c4 a084 	str.w	sl, [r4, #132]	@ 0x84
 8018cd6:	4628      	mov	r0, r5
 8018cd8:	f7e7 faf2 	bl	80002c0 <strlen>
 8018cdc:	3001      	adds	r0, #1
 8018cde:	283c      	cmp	r0, #60	@ 0x3c
 8018ce0:	f104 087c 	add.w	r8, r4, #124	@ 0x7c
 8018ce4:	f200 8098 	bhi.w	8018e18 <rmw_create_subscription+0x1a0>
 8018ce8:	4a51      	ldr	r2, [pc, #324]	@ (8018e30 <rmw_create_subscription+0x1b8>)
 8018cea:	462b      	mov	r3, r5
 8018cec:	213c      	movs	r1, #60	@ 0x3c
 8018cee:	4650      	mov	r0, sl
 8018cf0:	f004 f850 	bl	801cd94 <sniprintf>
 8018cf4:	4631      	mov	r1, r6
 8018cf6:	f8c4 9020 	str.w	r9, [r4, #32]
 8018cfa:	2250      	movs	r2, #80	@ 0x50
 8018cfc:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8018d00:	f004 fc2b 	bl	801d55a <memcpy>
 8018d04:	494b      	ldr	r1, [pc, #300]	@ (8018e34 <rmw_create_subscription+0x1bc>)
 8018d06:	4638      	mov	r0, r7
 8018d08:	f7f5 f8d6 	bl	800deb8 <get_message_typesupport_handle>
 8018d0c:	2800      	cmp	r0, #0
 8018d0e:	f000 8083 	beq.w	8018e18 <rmw_create_subscription+0x1a0>
 8018d12:	6842      	ldr	r2, [r0, #4]
 8018d14:	61a2      	str	r2, [r4, #24]
 8018d16:	2a00      	cmp	r2, #0
 8018d18:	d07e      	beq.n	8018e18 <rmw_create_subscription+0x1a0>
 8018d1a:	4629      	mov	r1, r5
 8018d1c:	4633      	mov	r3, r6
 8018d1e:	4648      	mov	r0, r9
 8018d20:	f7ff fba4 	bl	801846c <create_topic>
 8018d24:	61e0      	str	r0, [r4, #28]
 8018d26:	2800      	cmp	r0, #0
 8018d28:	d07a      	beq.n	8018e20 <rmw_create_subscription+0x1a8>
 8018d2a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8018d2e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018d32:	2104      	movs	r1, #4
 8018d34:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	@ 0x59c
 8018d38:	1c42      	adds	r2, r0, #1
 8018d3a:	f8a3 259c 	strh.w	r2, [r3, #1436]	@ 0x59c
 8018d3e:	f7f8 fcf9 	bl	8011734 <uxr_object_id>
 8018d42:	6120      	str	r0, [r4, #16]
 8018d44:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8018d48:	2506      	movs	r5, #6
 8018d4a:	f8d0 3384 	ldr.w	r3, [r0, #900]	@ 0x384
 8018d4e:	9500      	str	r5, [sp, #0]
 8018d50:	6819      	ldr	r1, [r3, #0]
 8018d52:	6922      	ldr	r2, [r4, #16]
 8018d54:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8018d58:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8018d5c:	f7f8 fbb6 	bl	80114cc <uxr_buffer_create_subscriber_bin>
 8018d60:	4602      	mov	r2, r0
 8018d62:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8018d66:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8018d6a:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8018d6e:	f7f4 ff75 	bl	800dc5c <run_xrce_session>
 8018d72:	2800      	cmp	r0, #0
 8018d74:	d050      	beq.n	8018e18 <rmw_create_subscription+0x1a0>
 8018d76:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8018d7a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018d7e:	4629      	mov	r1, r5
 8018d80:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	@ 0x59e
 8018d84:	1c42      	adds	r2, r0, #1
 8018d86:	f8a3 259e 	strh.w	r2, [r3, #1438]	@ 0x59e
 8018d8a:	f7f8 fcd3 	bl	8011734 <uxr_object_id>
 8018d8e:	af08      	add	r7, sp, #32
 8018d90:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8018d94:	69e3      	ldr	r3, [r4, #28]
 8018d96:	6160      	str	r0, [r4, #20]
 8018d98:	4631      	mov	r1, r6
 8018d9a:	4638      	mov	r0, r7
 8018d9c:	f8da b384 	ldr.w	fp, [sl, #900]	@ 0x384
 8018da0:	9305      	str	r3, [sp, #20]
 8018da2:	f7f4 ff7b 	bl	800dc9c <convert_qos_profile>
 8018da6:	9503      	str	r5, [sp, #12]
 8018da8:	e897 0003 	ldmia.w	r7, {r0, r1}
 8018dac:	9b05      	ldr	r3, [sp, #20]
 8018dae:	9001      	str	r0, [sp, #4]
 8018db0:	f8ad 1008 	strh.w	r1, [sp, #8]
 8018db4:	691b      	ldr	r3, [r3, #16]
 8018db6:	9300      	str	r3, [sp, #0]
 8018db8:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8018dbc:	f8db 1000 	ldr.w	r1, [fp]
 8018dc0:	f50a 7028 	add.w	r0, sl, #672	@ 0x2a0
 8018dc4:	f7f8 fc16 	bl	80115f4 <uxr_buffer_create_datareader_bin>
 8018dc8:	4602      	mov	r2, r0
 8018dca:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8018dce:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8018dd2:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8018dd6:	f7f4 ff41 	bl	800dc5c <run_xrce_session>
 8018dda:	b1e8      	cbz	r0, 8018e18 <rmw_create_subscription+0x1a0>
 8018ddc:	7a33      	ldrb	r3, [r6, #8]
 8018dde:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8018de2:	2b02      	cmp	r3, #2
 8018de4:	bf0c      	ite	eq
 8018de6:	f8d0 3380 	ldreq.w	r3, [r0, #896]	@ 0x380
 8018dea:	f8d0 3374 	ldrne.w	r3, [r0, #884]	@ 0x374
 8018dee:	9307      	str	r3, [sp, #28]
 8018df0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8018df4:	2200      	movs	r2, #0
 8018df6:	e9cd 120a 	strd	r1, r2, [sp, #40]	@ 0x28
 8018dfa:	ab0a      	add	r3, sp, #40	@ 0x28
 8018dfc:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8018e00:	9300      	str	r3, [sp, #0]
 8018e02:	6962      	ldr	r2, [r4, #20]
 8018e04:	9b07      	ldr	r3, [sp, #28]
 8018e06:	6809      	ldr	r1, [r1, #0]
 8018e08:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8018e0c:	f001 fe82 	bl	801ab14 <uxr_buffer_request_data>
 8018e10:	4640      	mov	r0, r8
 8018e12:	b00d      	add	sp, #52	@ 0x34
 8018e14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018e18:	69e0      	ldr	r0, [r4, #28]
 8018e1a:	b108      	cbz	r0, 8018e20 <rmw_create_subscription+0x1a8>
 8018e1c:	f7f4 fe14 	bl	800da48 <rmw_uxrce_fini_topic_memory>
 8018e20:	4640      	mov	r0, r8
 8018e22:	f7f4 fdcf 	bl	800d9c4 <rmw_uxrce_fini_subscription_memory>
 8018e26:	f04f 0800 	mov.w	r8, #0
 8018e2a:	e7f1      	b.n	8018e10 <rmw_create_subscription+0x198>
 8018e2c:	20017408 	.word	0x20017408
 8018e30:	0801ed7c 	.word	0x0801ed7c
 8018e34:	0801e808 	.word	0x0801e808

08018e38 <rmw_subscription_get_actual_qos>:
 8018e38:	b508      	push	{r3, lr}
 8018e3a:	4603      	mov	r3, r0
 8018e3c:	b140      	cbz	r0, 8018e50 <rmw_subscription_get_actual_qos+0x18>
 8018e3e:	4608      	mov	r0, r1
 8018e40:	b131      	cbz	r1, 8018e50 <rmw_subscription_get_actual_qos+0x18>
 8018e42:	6859      	ldr	r1, [r3, #4]
 8018e44:	2250      	movs	r2, #80	@ 0x50
 8018e46:	3128      	adds	r1, #40	@ 0x28
 8018e48:	f004 fb87 	bl	801d55a <memcpy>
 8018e4c:	2000      	movs	r0, #0
 8018e4e:	bd08      	pop	{r3, pc}
 8018e50:	200b      	movs	r0, #11
 8018e52:	bd08      	pop	{r3, pc}

08018e54 <rmw_destroy_subscription>:
 8018e54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018e58:	b128      	cbz	r0, 8018e66 <rmw_destroy_subscription+0x12>
 8018e5a:	4604      	mov	r4, r0
 8018e5c:	6800      	ldr	r0, [r0, #0]
 8018e5e:	460d      	mov	r5, r1
 8018e60:	f7f5 f81c 	bl	800de9c <is_uxrce_rmw_identifier_valid>
 8018e64:	b918      	cbnz	r0, 8018e6e <rmw_destroy_subscription+0x1a>
 8018e66:	2401      	movs	r4, #1
 8018e68:	4620      	mov	r0, r4
 8018e6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018e6e:	6863      	ldr	r3, [r4, #4]
 8018e70:	2b00      	cmp	r3, #0
 8018e72:	d0f8      	beq.n	8018e66 <rmw_destroy_subscription+0x12>
 8018e74:	2d00      	cmp	r5, #0
 8018e76:	d0f6      	beq.n	8018e66 <rmw_destroy_subscription+0x12>
 8018e78:	6828      	ldr	r0, [r5, #0]
 8018e7a:	f7f5 f80f 	bl	800de9c <is_uxrce_rmw_identifier_valid>
 8018e7e:	2800      	cmp	r0, #0
 8018e80:	d0f1      	beq.n	8018e66 <rmw_destroy_subscription+0x12>
 8018e82:	686c      	ldr	r4, [r5, #4]
 8018e84:	2c00      	cmp	r4, #0
 8018e86:	d0ee      	beq.n	8018e66 <rmw_destroy_subscription+0x12>
 8018e88:	6a26      	ldr	r6, [r4, #32]
 8018e8a:	6962      	ldr	r2, [r4, #20]
 8018e8c:	6930      	ldr	r0, [r6, #16]
 8018e8e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8018e92:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8018e96:	6819      	ldr	r1, [r3, #0]
 8018e98:	f001 fe74 	bl	801ab84 <uxr_buffer_cancel_data>
 8018e9c:	4602      	mov	r2, r0
 8018e9e:	6930      	ldr	r0, [r6, #16]
 8018ea0:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8018ea4:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8018ea8:	f7f4 fed8 	bl	800dc5c <run_xrce_session>
 8018eac:	69e0      	ldr	r0, [r4, #28]
 8018eae:	f7ff fb31 	bl	8018514 <destroy_topic>
 8018eb2:	6a23      	ldr	r3, [r4, #32]
 8018eb4:	6962      	ldr	r2, [r4, #20]
 8018eb6:	6918      	ldr	r0, [r3, #16]
 8018eb8:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8018ebc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8018ec0:	6819      	ldr	r1, [r3, #0]
 8018ec2:	f7f8 fa25 	bl	8011310 <uxr_buffer_delete_entity>
 8018ec6:	6a23      	ldr	r3, [r4, #32]
 8018ec8:	6922      	ldr	r2, [r4, #16]
 8018eca:	4680      	mov	r8, r0
 8018ecc:	6918      	ldr	r0, [r3, #16]
 8018ece:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8018ed2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8018ed6:	6819      	ldr	r1, [r3, #0]
 8018ed8:	f7f8 fa1a 	bl	8011310 <uxr_buffer_delete_entity>
 8018edc:	4607      	mov	r7, r0
 8018ede:	6930      	ldr	r0, [r6, #16]
 8018ee0:	4642      	mov	r2, r8
 8018ee2:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8018ee6:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8018eea:	f7f4 feb7 	bl	800dc5c <run_xrce_session>
 8018eee:	4604      	mov	r4, r0
 8018ef0:	6930      	ldr	r0, [r6, #16]
 8018ef2:	463a      	mov	r2, r7
 8018ef4:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8018ef8:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8018efc:	f7f4 feae 	bl	800dc5c <run_xrce_session>
 8018f00:	4004      	ands	r4, r0
 8018f02:	f084 0401 	eor.w	r4, r4, #1
 8018f06:	b2e4      	uxtb	r4, r4
 8018f08:	4628      	mov	r0, r5
 8018f0a:	0064      	lsls	r4, r4, #1
 8018f0c:	f7f4 fd5a 	bl	800d9c4 <rmw_uxrce_fini_subscription_memory>
 8018f10:	e7aa      	b.n	8018e68 <rmw_destroy_subscription+0x14>
 8018f12:	bf00      	nop

08018f14 <rmw_take_with_info>:
 8018f14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018f16:	4604      	mov	r4, r0
 8018f18:	6800      	ldr	r0, [r0, #0]
 8018f1a:	b089      	sub	sp, #36	@ 0x24
 8018f1c:	460f      	mov	r7, r1
 8018f1e:	4615      	mov	r5, r2
 8018f20:	b128      	cbz	r0, 8018f2e <rmw_take_with_info+0x1a>
 8018f22:	4b23      	ldr	r3, [pc, #140]	@ (8018fb0 <rmw_take_with_info+0x9c>)
 8018f24:	6819      	ldr	r1, [r3, #0]
 8018f26:	f7e7 f96b 	bl	8000200 <strcmp>
 8018f2a:	2800      	cmp	r0, #0
 8018f2c:	d13d      	bne.n	8018faa <rmw_take_with_info+0x96>
 8018f2e:	6864      	ldr	r4, [r4, #4]
 8018f30:	b1fd      	cbz	r5, 8018f72 <rmw_take_with_info+0x5e>
 8018f32:	2300      	movs	r3, #0
 8018f34:	702b      	strb	r3, [r5, #0]
 8018f36:	f7f4 fe13 	bl	800db60 <rmw_uxrce_clean_expired_static_input_buffer>
 8018f3a:	4620      	mov	r0, r4
 8018f3c:	f7f4 fde8 	bl	800db10 <rmw_uxrce_find_static_input_buffer_by_owner>
 8018f40:	4606      	mov	r6, r0
 8018f42:	b1e8      	cbz	r0, 8018f80 <rmw_take_with_info+0x6c>
 8018f44:	6881      	ldr	r1, [r0, #8]
 8018f46:	4668      	mov	r0, sp
 8018f48:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8018f4c:	3110      	adds	r1, #16
 8018f4e:	f7f8 f913 	bl	8011178 <ucdr_init_buffer>
 8018f52:	69a3      	ldr	r3, [r4, #24]
 8018f54:	4639      	mov	r1, r7
 8018f56:	68db      	ldr	r3, [r3, #12]
 8018f58:	4668      	mov	r0, sp
 8018f5a:	4798      	blx	r3
 8018f5c:	4631      	mov	r1, r6
 8018f5e:	4604      	mov	r4, r0
 8018f60:	4814      	ldr	r0, [pc, #80]	@ (8018fb4 <rmw_take_with_info+0xa0>)
 8018f62:	f7fe ffa5 	bl	8017eb0 <put_memory>
 8018f66:	702c      	strb	r4, [r5, #0]
 8018f68:	f084 0001 	eor.w	r0, r4, #1
 8018f6c:	b2c0      	uxtb	r0, r0
 8018f6e:	b009      	add	sp, #36	@ 0x24
 8018f70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018f72:	f7f4 fdf5 	bl	800db60 <rmw_uxrce_clean_expired_static_input_buffer>
 8018f76:	4620      	mov	r0, r4
 8018f78:	f7f4 fdca 	bl	800db10 <rmw_uxrce_find_static_input_buffer_by_owner>
 8018f7c:	4605      	mov	r5, r0
 8018f7e:	b910      	cbnz	r0, 8018f86 <rmw_take_with_info+0x72>
 8018f80:	2001      	movs	r0, #1
 8018f82:	b009      	add	sp, #36	@ 0x24
 8018f84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018f86:	68a9      	ldr	r1, [r5, #8]
 8018f88:	4668      	mov	r0, sp
 8018f8a:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8018f8e:	3110      	adds	r1, #16
 8018f90:	f7f8 f8f2 	bl	8011178 <ucdr_init_buffer>
 8018f94:	69a3      	ldr	r3, [r4, #24]
 8018f96:	4639      	mov	r1, r7
 8018f98:	68db      	ldr	r3, [r3, #12]
 8018f9a:	4668      	mov	r0, sp
 8018f9c:	4798      	blx	r3
 8018f9e:	4629      	mov	r1, r5
 8018fa0:	4604      	mov	r4, r0
 8018fa2:	4804      	ldr	r0, [pc, #16]	@ (8018fb4 <rmw_take_with_info+0xa0>)
 8018fa4:	f7fe ff84 	bl	8017eb0 <put_memory>
 8018fa8:	e7de      	b.n	8018f68 <rmw_take_with_info+0x54>
 8018faa:	200c      	movs	r0, #12
 8018fac:	b009      	add	sp, #36	@ 0x24
 8018fae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018fb0:	080202d0 	.word	0x080202d0
 8018fb4:	20015988 	.word	0x20015988

08018fb8 <rmw_uxrce_transport_init>:
 8018fb8:	b508      	push	{r3, lr}
 8018fba:	b108      	cbz	r0, 8018fc0 <rmw_uxrce_transport_init+0x8>
 8018fbc:	f100 0210 	add.w	r2, r0, #16
 8018fc0:	b139      	cbz	r1, 8018fd2 <rmw_uxrce_transport_init+0x1a>
 8018fc2:	6949      	ldr	r1, [r1, #20]
 8018fc4:	4610      	mov	r0, r2
 8018fc6:	f001 f83f 	bl	801a048 <uxr_init_custom_transport>
 8018fca:	f080 0001 	eor.w	r0, r0, #1
 8018fce:	b2c0      	uxtb	r0, r0
 8018fd0:	bd08      	pop	{r3, pc}
 8018fd2:	4b04      	ldr	r3, [pc, #16]	@ (8018fe4 <rmw_uxrce_transport_init+0x2c>)
 8018fd4:	4610      	mov	r0, r2
 8018fd6:	6859      	ldr	r1, [r3, #4]
 8018fd8:	f001 f836 	bl	801a048 <uxr_init_custom_transport>
 8018fdc:	f080 0001 	eor.w	r0, r0, #1
 8018fe0:	b2c0      	uxtb	r0, r0
 8018fe2:	bd08      	pop	{r3, pc}
 8018fe4:	200136c8 	.word	0x200136c8

08018fe8 <rmw_wait>:
 8018fe8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018fec:	b089      	sub	sp, #36	@ 0x24
 8018fee:	4607      	mov	r7, r0
 8018ff0:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8018ff2:	460e      	mov	r6, r1
 8018ff4:	4698      	mov	r8, r3
 8018ff6:	4691      	mov	r9, r2
 8018ff8:	2a00      	cmp	r2, #0
 8018ffa:	f000 811e 	beq.w	801923a <rmw_wait+0x252>
 8018ffe:	2c00      	cmp	r4, #0
 8019000:	f000 80ef 	beq.w	80191e2 <rmw_wait+0x1fa>
 8019004:	4bb5      	ldr	r3, [pc, #724]	@ (80192dc <rmw_wait+0x2f4>)
 8019006:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8019008:	ad04      	add	r5, sp, #16
 801900a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 801900e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8019012:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8019016:	f7fe fd7f 	bl	8017b18 <rmw_time_equal>
 801901a:	2800      	cmp	r0, #0
 801901c:	f000 811b 	beq.w	8019256 <rmw_wait+0x26e>
 8019020:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8019024:	f7f4 fd9c 	bl	800db60 <rmw_uxrce_clean_expired_static_input_buffer>
 8019028:	4bad      	ldr	r3, [pc, #692]	@ (80192e0 <rmw_wait+0x2f8>)
 801902a:	681c      	ldr	r4, [r3, #0]
 801902c:	b14c      	cbz	r4, 8019042 <rmw_wait+0x5a>
 801902e:	4623      	mov	r3, r4
 8019030:	2100      	movs	r1, #0
 8019032:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 8019036:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801903a:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 801903e:	2b00      	cmp	r3, #0
 8019040:	d1f7      	bne.n	8019032 <rmw_wait+0x4a>
 8019042:	f1b9 0f00 	cmp.w	r9, #0
 8019046:	d011      	beq.n	801906c <rmw_wait+0x84>
 8019048:	f8d9 1000 	ldr.w	r1, [r9]
 801904c:	b171      	cbz	r1, 801906c <rmw_wait+0x84>
 801904e:	f8d9 c004 	ldr.w	ip, [r9, #4]
 8019052:	2300      	movs	r3, #0
 8019054:	2001      	movs	r0, #1
 8019056:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801905a:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 801905c:	6912      	ldr	r2, [r2, #16]
 801905e:	3301      	adds	r3, #1
 8019060:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8019064:	4299      	cmp	r1, r3
 8019066:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 801906a:	d1f4      	bne.n	8019056 <rmw_wait+0x6e>
 801906c:	f1b8 0f00 	cmp.w	r8, #0
 8019070:	f000 8109 	beq.w	8019286 <rmw_wait+0x29e>
 8019074:	f8d8 1000 	ldr.w	r1, [r8]
 8019078:	2900      	cmp	r1, #0
 801907a:	f000 8116 	beq.w	80192aa <rmw_wait+0x2c2>
 801907e:	f8d8 c004 	ldr.w	ip, [r8, #4]
 8019082:	2300      	movs	r3, #0
 8019084:	2001      	movs	r0, #1
 8019086:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801908a:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 801908c:	6912      	ldr	r2, [r2, #16]
 801908e:	3301      	adds	r3, #1
 8019090:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8019094:	4299      	cmp	r1, r3
 8019096:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 801909a:	d1f4      	bne.n	8019086 <rmw_wait+0x9e>
 801909c:	2f00      	cmp	r7, #0
 801909e:	f000 8114 	beq.w	80192ca <rmw_wait+0x2e2>
 80190a2:	6839      	ldr	r1, [r7, #0]
 80190a4:	b171      	cbz	r1, 80190c4 <rmw_wait+0xdc>
 80190a6:	f8d7 c004 	ldr.w	ip, [r7, #4]
 80190aa:	2300      	movs	r3, #0
 80190ac:	2001      	movs	r0, #1
 80190ae:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80190b2:	6a12      	ldr	r2, [r2, #32]
 80190b4:	6912      	ldr	r2, [r2, #16]
 80190b6:	3301      	adds	r3, #1
 80190b8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80190bc:	4299      	cmp	r1, r3
 80190be:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 80190c2:	d1f4      	bne.n	80190ae <rmw_wait+0xc6>
 80190c4:	b344      	cbz	r4, 8019118 <rmw_wait+0x130>
 80190c6:	4622      	mov	r2, r4
 80190c8:	2300      	movs	r3, #0
 80190ca:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 80190ce:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 80190d2:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 80190d6:	440b      	add	r3, r1
 80190d8:	b2db      	uxtb	r3, r3
 80190da:	2a00      	cmp	r2, #0
 80190dc:	d1f5      	bne.n	80190ca <rmw_wait+0xe2>
 80190de:	2b00      	cmp	r3, #0
 80190e0:	d075      	beq.n	80191ce <rmw_wait+0x1e6>
 80190e2:	1c6a      	adds	r2, r5, #1
 80190e4:	d00d      	beq.n	8019102 <rmw_wait+0x11a>
 80190e6:	ee07 5a90 	vmov	s15, r5
 80190ea:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80190ee:	ee07 3a90 	vmov	s15, r3
 80190f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80190f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80190fa:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 80190fe:	ee17 5a90 	vmov	r5, s15
 8019102:	68a0      	ldr	r0, [r4, #8]
 8019104:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 8019108:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 801910c:	2b00      	cmp	r3, #0
 801910e:	f040 808a 	bne.w	8019226 <rmw_wait+0x23e>
 8019112:	6864      	ldr	r4, [r4, #4]
 8019114:	2c00      	cmp	r4, #0
 8019116:	d1f4      	bne.n	8019102 <rmw_wait+0x11a>
 8019118:	f1b9 0f00 	cmp.w	r9, #0
 801911c:	f000 80c3 	beq.w	80192a6 <rmw_wait+0x2be>
 8019120:	f8d9 5000 	ldr.w	r5, [r9]
 8019124:	b185      	cbz	r5, 8019148 <rmw_wait+0x160>
 8019126:	2400      	movs	r4, #0
 8019128:	4625      	mov	r5, r4
 801912a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801912e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8019132:	f7f4 fced 	bl	800db10 <rmw_uxrce_find_static_input_buffer_by_owner>
 8019136:	2800      	cmp	r0, #0
 8019138:	d06d      	beq.n	8019216 <rmw_wait+0x22e>
 801913a:	f8d9 3000 	ldr.w	r3, [r9]
 801913e:	3401      	adds	r4, #1
 8019140:	42a3      	cmp	r3, r4
 8019142:	f04f 0501 	mov.w	r5, #1
 8019146:	d8f0      	bhi.n	801912a <rmw_wait+0x142>
 8019148:	f1b8 0f00 	cmp.w	r8, #0
 801914c:	d012      	beq.n	8019174 <rmw_wait+0x18c>
 801914e:	f8d8 1000 	ldr.w	r1, [r8]
 8019152:	2400      	movs	r4, #0
 8019154:	b171      	cbz	r1, 8019174 <rmw_wait+0x18c>
 8019156:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801915a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801915e:	f7f4 fcd7 	bl	800db10 <rmw_uxrce_find_static_input_buffer_by_owner>
 8019162:	2800      	cmp	r0, #0
 8019164:	d047      	beq.n	80191f6 <rmw_wait+0x20e>
 8019166:	f8d8 3000 	ldr.w	r3, [r8]
 801916a:	3401      	adds	r4, #1
 801916c:	42a3      	cmp	r3, r4
 801916e:	f04f 0501 	mov.w	r5, #1
 8019172:	d8f0      	bhi.n	8019156 <rmw_wait+0x16e>
 8019174:	b17f      	cbz	r7, 8019196 <rmw_wait+0x1ae>
 8019176:	683b      	ldr	r3, [r7, #0]
 8019178:	2400      	movs	r4, #0
 801917a:	b163      	cbz	r3, 8019196 <rmw_wait+0x1ae>
 801917c:	687b      	ldr	r3, [r7, #4]
 801917e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8019182:	f7f4 fcc5 	bl	800db10 <rmw_uxrce_find_static_input_buffer_by_owner>
 8019186:	2800      	cmp	r0, #0
 8019188:	d03d      	beq.n	8019206 <rmw_wait+0x21e>
 801918a:	683b      	ldr	r3, [r7, #0]
 801918c:	3401      	adds	r4, #1
 801918e:	42a3      	cmp	r3, r4
 8019190:	f04f 0501 	mov.w	r5, #1
 8019194:	d8f2      	bhi.n	801917c <rmw_wait+0x194>
 8019196:	b1a6      	cbz	r6, 80191c2 <rmw_wait+0x1da>
 8019198:	6834      	ldr	r4, [r6, #0]
 801919a:	b194      	cbz	r4, 80191c2 <rmw_wait+0x1da>
 801919c:	2300      	movs	r3, #0
 801919e:	461f      	mov	r7, r3
 80191a0:	e004      	b.n	80191ac <rmw_wait+0x1c4>
 80191a2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 80191a6:	3301      	adds	r3, #1
 80191a8:	429c      	cmp	r4, r3
 80191aa:	d00a      	beq.n	80191c2 <rmw_wait+0x1da>
 80191ac:	6870      	ldr	r0, [r6, #4]
 80191ae:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 80191b2:	7c0a      	ldrb	r2, [r1, #16]
 80191b4:	2a00      	cmp	r2, #0
 80191b6:	d0f4      	beq.n	80191a2 <rmw_wait+0x1ba>
 80191b8:	3301      	adds	r3, #1
 80191ba:	429c      	cmp	r4, r3
 80191bc:	740f      	strb	r7, [r1, #16]
 80191be:	4615      	mov	r5, r2
 80191c0:	d1f4      	bne.n	80191ac <rmw_wait+0x1c4>
 80191c2:	f085 0001 	eor.w	r0, r5, #1
 80191c6:	0040      	lsls	r0, r0, #1
 80191c8:	b009      	add	sp, #36	@ 0x24
 80191ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80191ce:	68a0      	ldr	r0, [r4, #8]
 80191d0:	2100      	movs	r1, #0
 80191d2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80191d6:	f7f8 ff39 	bl	801204c <uxr_run_session_timeout>
 80191da:	6864      	ldr	r4, [r4, #4]
 80191dc:	2c00      	cmp	r4, #0
 80191de:	d1f6      	bne.n	80191ce <rmw_wait+0x1e6>
 80191e0:	e79a      	b.n	8019118 <rmw_wait+0x130>
 80191e2:	f7f4 fcbd 	bl	800db60 <rmw_uxrce_clean_expired_static_input_buffer>
 80191e6:	4b3e      	ldr	r3, [pc, #248]	@ (80192e0 <rmw_wait+0x2f8>)
 80191e8:	681c      	ldr	r4, [r3, #0]
 80191ea:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80191ee:	2c00      	cmp	r4, #0
 80191f0:	f47f af1d 	bne.w	801902e <rmw_wait+0x46>
 80191f4:	e728      	b.n	8019048 <rmw_wait+0x60>
 80191f6:	e9d8 3200 	ldrd	r3, r2, [r8]
 80191fa:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80191fe:	3401      	adds	r4, #1
 8019200:	429c      	cmp	r4, r3
 8019202:	d3a8      	bcc.n	8019156 <rmw_wait+0x16e>
 8019204:	e7b6      	b.n	8019174 <rmw_wait+0x18c>
 8019206:	e9d7 3200 	ldrd	r3, r2, [r7]
 801920a:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801920e:	3401      	adds	r4, #1
 8019210:	42a3      	cmp	r3, r4
 8019212:	d8b3      	bhi.n	801917c <rmw_wait+0x194>
 8019214:	e7bf      	b.n	8019196 <rmw_wait+0x1ae>
 8019216:	e9d9 3200 	ldrd	r3, r2, [r9]
 801921a:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801921e:	3401      	adds	r4, #1
 8019220:	42a3      	cmp	r3, r4
 8019222:	d882      	bhi.n	801912a <rmw_wait+0x142>
 8019224:	e790      	b.n	8019148 <rmw_wait+0x160>
 8019226:	4629      	mov	r1, r5
 8019228:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801922c:	f7f8 ff28 	bl	8012080 <uxr_run_session_until_data>
 8019230:	6864      	ldr	r4, [r4, #4]
 8019232:	2c00      	cmp	r4, #0
 8019234:	f47f af65 	bne.w	8019102 <rmw_wait+0x11a>
 8019238:	e76e      	b.n	8019118 <rmw_wait+0x130>
 801923a:	b1f3      	cbz	r3, 801927a <rmw_wait+0x292>
 801923c:	2c00      	cmp	r4, #0
 801923e:	f47f aee1 	bne.w	8019004 <rmw_wait+0x1c>
 8019242:	f7f4 fc8d 	bl	800db60 <rmw_uxrce_clean_expired_static_input_buffer>
 8019246:	4b26      	ldr	r3, [pc, #152]	@ (80192e0 <rmw_wait+0x2f8>)
 8019248:	681c      	ldr	r4, [r3, #0]
 801924a:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 801924e:	2c00      	cmp	r4, #0
 8019250:	f47f aeed 	bne.w	801902e <rmw_wait+0x46>
 8019254:	e70a      	b.n	801906c <rmw_wait+0x84>
 8019256:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801925a:	f7fe fcb1 	bl	8017bc0 <rmw_time_total_nsec>
 801925e:	4a21      	ldr	r2, [pc, #132]	@ (80192e4 <rmw_wait+0x2fc>)
 8019260:	2300      	movs	r3, #0
 8019262:	f7e7 fd2b 	bl	8000cbc <__aeabi_uldivmod>
 8019266:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 801926a:	f171 0100 	sbcs.w	r1, r1, #0
 801926e:	4605      	mov	r5, r0
 8019270:	f6ff aed8 	blt.w	8019024 <rmw_wait+0x3c>
 8019274:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 8019278:	e6d4      	b.n	8019024 <rmw_wait+0x3c>
 801927a:	2800      	cmp	r0, #0
 801927c:	d1de      	bne.n	801923c <rmw_wait+0x254>
 801927e:	2900      	cmp	r1, #0
 8019280:	d1dc      	bne.n	801923c <rmw_wait+0x254>
 8019282:	4608      	mov	r0, r1
 8019284:	e7a0      	b.n	80191c8 <rmw_wait+0x1e0>
 8019286:	2f00      	cmp	r7, #0
 8019288:	f47f af0b 	bne.w	80190a2 <rmw_wait+0xba>
 801928c:	2c00      	cmp	r4, #0
 801928e:	f47f af1a 	bne.w	80190c6 <rmw_wait+0xde>
 8019292:	f1b9 0f00 	cmp.w	r9, #0
 8019296:	d027      	beq.n	80192e8 <rmw_wait+0x300>
 8019298:	f8d9 3000 	ldr.w	r3, [r9]
 801929c:	4625      	mov	r5, r4
 801929e:	2b00      	cmp	r3, #0
 80192a0:	f47f af41 	bne.w	8019126 <rmw_wait+0x13e>
 80192a4:	e777      	b.n	8019196 <rmw_wait+0x1ae>
 80192a6:	464d      	mov	r5, r9
 80192a8:	e74e      	b.n	8019148 <rmw_wait+0x160>
 80192aa:	2f00      	cmp	r7, #0
 80192ac:	f47f aef9 	bne.w	80190a2 <rmw_wait+0xba>
 80192b0:	2c00      	cmp	r4, #0
 80192b2:	f47f af08 	bne.w	80190c6 <rmw_wait+0xde>
 80192b6:	f1b9 0f00 	cmp.w	r9, #0
 80192ba:	d015      	beq.n	80192e8 <rmw_wait+0x300>
 80192bc:	f8d9 3000 	ldr.w	r3, [r9]
 80192c0:	2b00      	cmp	r3, #0
 80192c2:	f47f af30 	bne.w	8019126 <rmw_wait+0x13e>
 80192c6:	2500      	movs	r5, #0
 80192c8:	e743      	b.n	8019152 <rmw_wait+0x16a>
 80192ca:	2c00      	cmp	r4, #0
 80192cc:	f47f aefb 	bne.w	80190c6 <rmw_wait+0xde>
 80192d0:	f1b9 0f00 	cmp.w	r9, #0
 80192d4:	f47f af24 	bne.w	8019120 <rmw_wait+0x138>
 80192d8:	e7f5      	b.n	80192c6 <rmw_wait+0x2de>
 80192da:	bf00      	nop
 80192dc:	0801e698 	.word	0x0801e698
 80192e0:	200192f8 	.word	0x200192f8
 80192e4:	000f4240 	.word	0x000f4240
 80192e8:	464d      	mov	r5, r9
 80192ea:	e754      	b.n	8019196 <rmw_wait+0x1ae>

080192ec <rmw_create_wait_set>:
 80192ec:	b508      	push	{r3, lr}
 80192ee:	4803      	ldr	r0, [pc, #12]	@ (80192fc <rmw_create_wait_set+0x10>)
 80192f0:	f7fe fdce 	bl	8017e90 <get_memory>
 80192f4:	b108      	cbz	r0, 80192fa <rmw_create_wait_set+0xe>
 80192f6:	6880      	ldr	r0, [r0, #8]
 80192f8:	3010      	adds	r0, #16
 80192fa:	bd08      	pop	{r3, pc}
 80192fc:	200137e4 	.word	0x200137e4

08019300 <rmw_destroy_wait_set>:
 8019300:	b508      	push	{r3, lr}
 8019302:	4b08      	ldr	r3, [pc, #32]	@ (8019324 <rmw_destroy_wait_set+0x24>)
 8019304:	6819      	ldr	r1, [r3, #0]
 8019306:	b911      	cbnz	r1, 801930e <rmw_destroy_wait_set+0xe>
 8019308:	e00a      	b.n	8019320 <rmw_destroy_wait_set+0x20>
 801930a:	6849      	ldr	r1, [r1, #4]
 801930c:	b141      	cbz	r1, 8019320 <rmw_destroy_wait_set+0x20>
 801930e:	688b      	ldr	r3, [r1, #8]
 8019310:	3310      	adds	r3, #16
 8019312:	4298      	cmp	r0, r3
 8019314:	d1f9      	bne.n	801930a <rmw_destroy_wait_set+0xa>
 8019316:	4803      	ldr	r0, [pc, #12]	@ (8019324 <rmw_destroy_wait_set+0x24>)
 8019318:	f7fe fdca 	bl	8017eb0 <put_memory>
 801931c:	2000      	movs	r0, #0
 801931e:	bd08      	pop	{r3, pc}
 8019320:	2001      	movs	r0, #1
 8019322:	bd08      	pop	{r3, pc}
 8019324:	200137e4 	.word	0x200137e4

08019328 <rmw_uros_epoch_nanos>:
 8019328:	4b05      	ldr	r3, [pc, #20]	@ (8019340 <rmw_uros_epoch_nanos+0x18>)
 801932a:	681b      	ldr	r3, [r3, #0]
 801932c:	b123      	cbz	r3, 8019338 <rmw_uros_epoch_nanos+0x10>
 801932e:	6898      	ldr	r0, [r3, #8]
 8019330:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8019334:	f7f8 bb22 	b.w	801197c <uxr_epoch_nanos>
 8019338:	2000      	movs	r0, #0
 801933a:	2100      	movs	r1, #0
 801933c:	4770      	bx	lr
 801933e:	bf00      	nop
 8019340:	200192f8 	.word	0x200192f8

08019344 <sensor_msgs__msg__Imu__get_type_hash>:
 8019344:	4800      	ldr	r0, [pc, #0]	@ (8019348 <sensor_msgs__msg__Imu__get_type_hash+0x4>)
 8019346:	4770      	bx	lr
 8019348:	20001768 	.word	0x20001768

0801934c <sensor_msgs__msg__Imu__get_type_description>:
 801934c:	b570      	push	{r4, r5, r6, lr}
 801934e:	4e15      	ldr	r6, [pc, #84]	@ (80193a4 <sensor_msgs__msg__Imu__get_type_description+0x58>)
 8019350:	7835      	ldrb	r5, [r6, #0]
 8019352:	b10d      	cbz	r5, 8019358 <sensor_msgs__msg__Imu__get_type_description+0xc>
 8019354:	4814      	ldr	r0, [pc, #80]	@ (80193a8 <sensor_msgs__msg__Imu__get_type_description+0x5c>)
 8019356:	bd70      	pop	{r4, r5, r6, pc}
 8019358:	4628      	mov	r0, r5
 801935a:	f000 fd27 	bl	8019dac <builtin_interfaces__msg__Time__get_type_description>
 801935e:	300c      	adds	r0, #12
 8019360:	c807      	ldmia	r0, {r0, r1, r2}
 8019362:	4c12      	ldr	r4, [pc, #72]	@ (80193ac <sensor_msgs__msg__Imu__get_type_description+0x60>)
 8019364:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8019368:	4628      	mov	r0, r5
 801936a:	f000 fd55 	bl	8019e18 <geometry_msgs__msg__Quaternion__get_type_description>
 801936e:	300c      	adds	r0, #12
 8019370:	c807      	ldmia	r0, {r0, r1, r2}
 8019372:	f104 0318 	add.w	r3, r4, #24
 8019376:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801937a:	4628      	mov	r0, r5
 801937c:	f000 fd92 	bl	8019ea4 <geometry_msgs__msg__Vector3__get_type_description>
 8019380:	300c      	adds	r0, #12
 8019382:	c807      	ldmia	r0, {r0, r1, r2}
 8019384:	f104 0330 	add.w	r3, r4, #48	@ 0x30
 8019388:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801938c:	4628      	mov	r0, r5
 801938e:	f000 f927 	bl	80195e0 <std_msgs__msg__Header__get_type_description>
 8019392:	300c      	adds	r0, #12
 8019394:	c807      	ldmia	r0, {r0, r1, r2}
 8019396:	3448      	adds	r4, #72	@ 0x48
 8019398:	2301      	movs	r3, #1
 801939a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801939e:	7033      	strb	r3, [r6, #0]
 80193a0:	4801      	ldr	r0, [pc, #4]	@ (80193a8 <sensor_msgs__msg__Imu__get_type_description+0x5c>)
 80193a2:	bd70      	pop	{r4, r5, r6, pc}
 80193a4:	20019915 	.word	0x20019915
 80193a8:	08020304 	.word	0x08020304
 80193ac:	20001c58 	.word	0x20001c58

080193b0 <sensor_msgs__msg__Imu__get_type_description_sources>:
 80193b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80193b2:	4d26      	ldr	r5, [pc, #152]	@ (801944c <sensor_msgs__msg__Imu__get_type_description_sources+0x9c>)
 80193b4:	782f      	ldrb	r7, [r5, #0]
 80193b6:	b10f      	cbz	r7, 80193bc <sensor_msgs__msg__Imu__get_type_description_sources+0xc>
 80193b8:	4825      	ldr	r0, [pc, #148]	@ (8019450 <sensor_msgs__msg__Imu__get_type_description_sources+0xa0>)
 80193ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80193bc:	4e25      	ldr	r6, [pc, #148]	@ (8019454 <sensor_msgs__msg__Imu__get_type_description_sources+0xa4>)
 80193be:	4c26      	ldr	r4, [pc, #152]	@ (8019458 <sensor_msgs__msg__Imu__get_type_description_sources+0xa8>)
 80193c0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80193c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80193c4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80193c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80193c8:	6833      	ldr	r3, [r6, #0]
 80193ca:	4626      	mov	r6, r4
 80193cc:	4638      	mov	r0, r7
 80193ce:	f846 3b04 	str.w	r3, [r6], #4
 80193d2:	f000 fcf7 	bl	8019dc4 <builtin_interfaces__msg__Time__get_individual_type_description_source>
 80193d6:	4684      	mov	ip, r0
 80193d8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80193dc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80193de:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80193e2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80193e4:	4638      	mov	r0, r7
 80193e6:	f8dc 3000 	ldr.w	r3, [ip]
 80193ea:	6033      	str	r3, [r6, #0]
 80193ec:	f000 fd20 	bl	8019e30 <geometry_msgs__msg__Quaternion__get_individual_type_description_source>
 80193f0:	4684      	mov	ip, r0
 80193f2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80193f6:	f104 0628 	add.w	r6, r4, #40	@ 0x28
 80193fa:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80193fc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8019400:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8019402:	4638      	mov	r0, r7
 8019404:	f8dc 3000 	ldr.w	r3, [ip]
 8019408:	6033      	str	r3, [r6, #0]
 801940a:	f000 fd57 	bl	8019ebc <geometry_msgs__msg__Vector3__get_individual_type_description_source>
 801940e:	4684      	mov	ip, r0
 8019410:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8019414:	f104 064c 	add.w	r6, r4, #76	@ 0x4c
 8019418:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801941a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801941e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8019420:	4638      	mov	r0, r7
 8019422:	f8dc 3000 	ldr.w	r3, [ip]
 8019426:	6033      	str	r3, [r6, #0]
 8019428:	f000 f8f2 	bl	8019610 <std_msgs__msg__Header__get_individual_type_description_source>
 801942c:	2301      	movs	r3, #1
 801942e:	4684      	mov	ip, r0
 8019430:	702b      	strb	r3, [r5, #0]
 8019432:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8019436:	3470      	adds	r4, #112	@ 0x70
 8019438:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801943a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801943e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019440:	f8dc 3000 	ldr.w	r3, [ip]
 8019444:	4802      	ldr	r0, [pc, #8]	@ (8019450 <sensor_msgs__msg__Imu__get_type_description_sources+0xa0>)
 8019446:	6023      	str	r3, [r4, #0]
 8019448:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801944a:	bf00      	nop
 801944c:	20019914 	.word	0x20019914
 8019450:	080202d4 	.word	0x080202d4
 8019454:	080202e0 	.word	0x080202e0
 8019458:	20019860 	.word	0x20019860

0801945c <sensor_msgs__msg__Imu__init>:
 801945c:	b3d8      	cbz	r0, 80194d6 <sensor_msgs__msg__Imu__init+0x7a>
 801945e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019460:	4604      	mov	r4, r0
 8019462:	f000 f901 	bl	8019668 <std_msgs__msg__Header__init>
 8019466:	b190      	cbz	r0, 801948e <sensor_msgs__msg__Imu__init+0x32>
 8019468:	f104 0518 	add.w	r5, r4, #24
 801946c:	4628      	mov	r0, r5
 801946e:	f000 fcff 	bl	8019e70 <geometry_msgs__msg__Quaternion__init>
 8019472:	b358      	cbz	r0, 80194cc <sensor_msgs__msg__Imu__init+0x70>
 8019474:	f104 0680 	add.w	r6, r4, #128	@ 0x80
 8019478:	4630      	mov	r0, r6
 801947a:	f000 fd3f 	bl	8019efc <geometry_msgs__msg__Vector3__init>
 801947e:	b1b8      	cbz	r0, 80194b0 <sensor_msgs__msg__Imu__init+0x54>
 8019480:	f104 07e0 	add.w	r7, r4, #224	@ 0xe0
 8019484:	4638      	mov	r0, r7
 8019486:	f000 fd39 	bl	8019efc <geometry_msgs__msg__Vector3__init>
 801948a:	b330      	cbz	r0, 80194da <sensor_msgs__msg__Imu__init+0x7e>
 801948c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801948e:	4620      	mov	r0, r4
 8019490:	f000 f90a 	bl	80196a8 <std_msgs__msg__Header__fini>
 8019494:	f104 0018 	add.w	r0, r4, #24
 8019498:	f000 fcfe 	bl	8019e98 <geometry_msgs__msg__Quaternion__fini>
 801949c:	f104 0080 	add.w	r0, r4, #128	@ 0x80
 80194a0:	f000 fd30 	bl	8019f04 <geometry_msgs__msg__Vector3__fini>
 80194a4:	f104 00e0 	add.w	r0, r4, #224	@ 0xe0
 80194a8:	f000 fd2c 	bl	8019f04 <geometry_msgs__msg__Vector3__fini>
 80194ac:	2000      	movs	r0, #0
 80194ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80194b0:	4620      	mov	r0, r4
 80194b2:	f000 f8f9 	bl	80196a8 <std_msgs__msg__Header__fini>
 80194b6:	4628      	mov	r0, r5
 80194b8:	f000 fcee 	bl	8019e98 <geometry_msgs__msg__Quaternion__fini>
 80194bc:	4630      	mov	r0, r6
 80194be:	f000 fd21 	bl	8019f04 <geometry_msgs__msg__Vector3__fini>
 80194c2:	f104 00e0 	add.w	r0, r4, #224	@ 0xe0
 80194c6:	f000 fd1d 	bl	8019f04 <geometry_msgs__msg__Vector3__fini>
 80194ca:	e7ef      	b.n	80194ac <sensor_msgs__msg__Imu__init+0x50>
 80194cc:	4620      	mov	r0, r4
 80194ce:	f000 f8eb 	bl	80196a8 <std_msgs__msg__Header__fini>
 80194d2:	4628      	mov	r0, r5
 80194d4:	e7e0      	b.n	8019498 <sensor_msgs__msg__Imu__init+0x3c>
 80194d6:	2000      	movs	r0, #0
 80194d8:	4770      	bx	lr
 80194da:	4620      	mov	r0, r4
 80194dc:	f000 f8e4 	bl	80196a8 <std_msgs__msg__Header__fini>
 80194e0:	4628      	mov	r0, r5
 80194e2:	f000 fcd9 	bl	8019e98 <geometry_msgs__msg__Quaternion__fini>
 80194e6:	4630      	mov	r0, r6
 80194e8:	f000 fd0c 	bl	8019f04 <geometry_msgs__msg__Vector3__fini>
 80194ec:	4638      	mov	r0, r7
 80194ee:	f000 fd09 	bl	8019f04 <geometry_msgs__msg__Vector3__fini>
 80194f2:	e7db      	b.n	80194ac <sensor_msgs__msg__Imu__init+0x50>

080194f4 <sensor_msgs__msg__Imu__fini>:
 80194f4:	b188      	cbz	r0, 801951a <sensor_msgs__msg__Imu__fini+0x26>
 80194f6:	b510      	push	{r4, lr}
 80194f8:	4604      	mov	r4, r0
 80194fa:	f000 f8d5 	bl	80196a8 <std_msgs__msg__Header__fini>
 80194fe:	f104 0018 	add.w	r0, r4, #24
 8019502:	f000 fcc9 	bl	8019e98 <geometry_msgs__msg__Quaternion__fini>
 8019506:	f104 0080 	add.w	r0, r4, #128	@ 0x80
 801950a:	f000 fcfb 	bl	8019f04 <geometry_msgs__msg__Vector3__fini>
 801950e:	f104 00e0 	add.w	r0, r4, #224	@ 0xe0
 8019512:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019516:	f000 bcf5 	b.w	8019f04 <geometry_msgs__msg__Vector3__fini>
 801951a:	4770      	bx	lr

0801951c <service_msgs__msg__ServiceEventInfo__get_type_hash>:
 801951c:	4800      	ldr	r0, [pc, #0]	@ (8019520 <service_msgs__msg__ServiceEventInfo__get_type_hash+0x4>)
 801951e:	4770      	bx	lr
 8019520:	20001fb8 	.word	0x20001fb8

08019524 <service_msgs__msg__ServiceEventInfo__get_type_description>:
 8019524:	b510      	push	{r4, lr}
 8019526:	4c08      	ldr	r4, [pc, #32]	@ (8019548 <service_msgs__msg__ServiceEventInfo__get_type_description+0x24>)
 8019528:	7820      	ldrb	r0, [r4, #0]
 801952a:	b108      	cbz	r0, 8019530 <service_msgs__msg__ServiceEventInfo__get_type_description+0xc>
 801952c:	4807      	ldr	r0, [pc, #28]	@ (801954c <service_msgs__msg__ServiceEventInfo__get_type_description+0x28>)
 801952e:	bd10      	pop	{r4, pc}
 8019530:	f000 fc3c 	bl	8019dac <builtin_interfaces__msg__Time__get_type_description>
 8019534:	300c      	adds	r0, #12
 8019536:	c807      	ldmia	r0, {r0, r1, r2}
 8019538:	4b05      	ldr	r3, [pc, #20]	@ (8019550 <service_msgs__msg__ServiceEventInfo__get_type_description+0x2c>)
 801953a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801953e:	2301      	movs	r3, #1
 8019540:	4802      	ldr	r0, [pc, #8]	@ (801954c <service_msgs__msg__ServiceEventInfo__get_type_description+0x28>)
 8019542:	7023      	strb	r3, [r4, #0]
 8019544:	bd10      	pop	{r4, pc}
 8019546:	bf00      	nop
 8019548:	20019961 	.word	0x20019961
 801954c:	08020358 	.word	0x08020358
 8019550:	200022a0 	.word	0x200022a0

08019554 <service_msgs__msg__ServiceEventInfo__get_individual_type_description_source>:
 8019554:	4800      	ldr	r0, [pc, #0]	@ (8019558 <service_msgs__msg__ServiceEventInfo__get_individual_type_description_source+0x4>)
 8019556:	4770      	bx	lr
 8019558:	08020334 	.word	0x08020334

0801955c <service_msgs__msg__ServiceEventInfo__get_type_description_sources>:
 801955c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801955e:	4e0f      	ldr	r6, [pc, #60]	@ (801959c <service_msgs__msg__ServiceEventInfo__get_type_description_sources+0x40>)
 8019560:	7837      	ldrb	r7, [r6, #0]
 8019562:	b10f      	cbz	r7, 8019568 <service_msgs__msg__ServiceEventInfo__get_type_description_sources+0xc>
 8019564:	480e      	ldr	r0, [pc, #56]	@ (80195a0 <service_msgs__msg__ServiceEventInfo__get_type_description_sources+0x44>)
 8019566:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019568:	4d0e      	ldr	r5, [pc, #56]	@ (80195a4 <service_msgs__msg__ServiceEventInfo__get_type_description_sources+0x48>)
 801956a:	4c0f      	ldr	r4, [pc, #60]	@ (80195a8 <service_msgs__msg__ServiceEventInfo__get_type_description_sources+0x4c>)
 801956c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801956e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019570:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019572:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019574:	682b      	ldr	r3, [r5, #0]
 8019576:	f844 3b04 	str.w	r3, [r4], #4
 801957a:	4638      	mov	r0, r7
 801957c:	f000 fc22 	bl	8019dc4 <builtin_interfaces__msg__Time__get_individual_type_description_source>
 8019580:	2301      	movs	r3, #1
 8019582:	4684      	mov	ip, r0
 8019584:	7033      	strb	r3, [r6, #0]
 8019586:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801958a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801958c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8019590:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019592:	f8dc 3000 	ldr.w	r3, [ip]
 8019596:	4802      	ldr	r0, [pc, #8]	@ (80195a0 <service_msgs__msg__ServiceEventInfo__get_type_description_sources+0x44>)
 8019598:	6023      	str	r3, [r4, #0]
 801959a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801959c:	20019960 	.word	0x20019960
 80195a0:	08020328 	.word	0x08020328
 80195a4:	08020334 	.word	0x08020334
 80195a8:	20019918 	.word	0x20019918

080195ac <service_msgs__msg__ServiceEventInfo__init>:
 80195ac:	b158      	cbz	r0, 80195c6 <service_msgs__msg__ServiceEventInfo__init+0x1a>
 80195ae:	b510      	push	{r4, lr}
 80195b0:	1d04      	adds	r4, r0, #4
 80195b2:	4620      	mov	r0, r4
 80195b4:	f000 fc26 	bl	8019e04 <builtin_interfaces__msg__Time__init>
 80195b8:	b100      	cbz	r0, 80195bc <service_msgs__msg__ServiceEventInfo__init+0x10>
 80195ba:	bd10      	pop	{r4, pc}
 80195bc:	4620      	mov	r0, r4
 80195be:	f000 fc25 	bl	8019e0c <builtin_interfaces__msg__Time__fini>
 80195c2:	2000      	movs	r0, #0
 80195c4:	bd10      	pop	{r4, pc}
 80195c6:	2000      	movs	r0, #0
 80195c8:	4770      	bx	lr
 80195ca:	bf00      	nop

080195cc <service_msgs__msg__ServiceEventInfo__fini>:
 80195cc:	b110      	cbz	r0, 80195d4 <service_msgs__msg__ServiceEventInfo__fini+0x8>
 80195ce:	3004      	adds	r0, #4
 80195d0:	f000 bc1c 	b.w	8019e0c <builtin_interfaces__msg__Time__fini>
 80195d4:	4770      	bx	lr
 80195d6:	bf00      	nop

080195d8 <std_msgs__msg__Header__get_type_hash>:
 80195d8:	4800      	ldr	r0, [pc, #0]	@ (80195dc <std_msgs__msg__Header__get_type_hash+0x4>)
 80195da:	4770      	bx	lr
 80195dc:	20002440 	.word	0x20002440

080195e0 <std_msgs__msg__Header__get_type_description>:
 80195e0:	b510      	push	{r4, lr}
 80195e2:	4c08      	ldr	r4, [pc, #32]	@ (8019604 <std_msgs__msg__Header__get_type_description+0x24>)
 80195e4:	7820      	ldrb	r0, [r4, #0]
 80195e6:	b108      	cbz	r0, 80195ec <std_msgs__msg__Header__get_type_description+0xc>
 80195e8:	4807      	ldr	r0, [pc, #28]	@ (8019608 <std_msgs__msg__Header__get_type_description+0x28>)
 80195ea:	bd10      	pop	{r4, pc}
 80195ec:	f000 fbde 	bl	8019dac <builtin_interfaces__msg__Time__get_type_description>
 80195f0:	300c      	adds	r0, #12
 80195f2:	c807      	ldmia	r0, {r0, r1, r2}
 80195f4:	4b05      	ldr	r3, [pc, #20]	@ (801960c <std_msgs__msg__Header__get_type_description+0x2c>)
 80195f6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80195fa:	2301      	movs	r3, #1
 80195fc:	4802      	ldr	r0, [pc, #8]	@ (8019608 <std_msgs__msg__Header__get_type_description+0x28>)
 80195fe:	7023      	strb	r3, [r4, #0]
 8019600:	bd10      	pop	{r4, pc}
 8019602:	bf00      	nop
 8019604:	200199ad 	.word	0x200199ad
 8019608:	080203ac 	.word	0x080203ac
 801960c:	200025b8 	.word	0x200025b8

08019610 <std_msgs__msg__Header__get_individual_type_description_source>:
 8019610:	4800      	ldr	r0, [pc, #0]	@ (8019614 <std_msgs__msg__Header__get_individual_type_description_source+0x4>)
 8019612:	4770      	bx	lr
 8019614:	08020388 	.word	0x08020388

08019618 <std_msgs__msg__Header__get_type_description_sources>:
 8019618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801961a:	4e0f      	ldr	r6, [pc, #60]	@ (8019658 <std_msgs__msg__Header__get_type_description_sources+0x40>)
 801961c:	7837      	ldrb	r7, [r6, #0]
 801961e:	b10f      	cbz	r7, 8019624 <std_msgs__msg__Header__get_type_description_sources+0xc>
 8019620:	480e      	ldr	r0, [pc, #56]	@ (801965c <std_msgs__msg__Header__get_type_description_sources+0x44>)
 8019622:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019624:	4d0e      	ldr	r5, [pc, #56]	@ (8019660 <std_msgs__msg__Header__get_type_description_sources+0x48>)
 8019626:	4c0f      	ldr	r4, [pc, #60]	@ (8019664 <std_msgs__msg__Header__get_type_description_sources+0x4c>)
 8019628:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801962a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801962c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801962e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019630:	682b      	ldr	r3, [r5, #0]
 8019632:	f844 3b04 	str.w	r3, [r4], #4
 8019636:	4638      	mov	r0, r7
 8019638:	f000 fbc4 	bl	8019dc4 <builtin_interfaces__msg__Time__get_individual_type_description_source>
 801963c:	2301      	movs	r3, #1
 801963e:	4684      	mov	ip, r0
 8019640:	7033      	strb	r3, [r6, #0]
 8019642:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8019646:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019648:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801964c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801964e:	f8dc 3000 	ldr.w	r3, [ip]
 8019652:	4802      	ldr	r0, [pc, #8]	@ (801965c <std_msgs__msg__Header__get_type_description_sources+0x44>)
 8019654:	6023      	str	r3, [r4, #0]
 8019656:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019658:	200199ac 	.word	0x200199ac
 801965c:	0802037c 	.word	0x0802037c
 8019660:	08020388 	.word	0x08020388
 8019664:	20019964 	.word	0x20019964

08019668 <std_msgs__msg__Header__init>:
 8019668:	b1d8      	cbz	r0, 80196a2 <std_msgs__msg__Header__init+0x3a>
 801966a:	b538      	push	{r3, r4, r5, lr}
 801966c:	4604      	mov	r4, r0
 801966e:	f000 fbc9 	bl	8019e04 <builtin_interfaces__msg__Time__init>
 8019672:	b130      	cbz	r0, 8019682 <std_msgs__msg__Header__init+0x1a>
 8019674:	f104 0508 	add.w	r5, r4, #8
 8019678:	4628      	mov	r0, r5
 801967a:	f002 fe49 	bl	801c310 <rosidl_runtime_c__String__init>
 801967e:	b148      	cbz	r0, 8019694 <std_msgs__msg__Header__init+0x2c>
 8019680:	bd38      	pop	{r3, r4, r5, pc}
 8019682:	4620      	mov	r0, r4
 8019684:	f000 fbc2 	bl	8019e0c <builtin_interfaces__msg__Time__fini>
 8019688:	f104 0008 	add.w	r0, r4, #8
 801968c:	f002 fe5a 	bl	801c344 <rosidl_runtime_c__String__fini>
 8019690:	2000      	movs	r0, #0
 8019692:	bd38      	pop	{r3, r4, r5, pc}
 8019694:	4620      	mov	r0, r4
 8019696:	f000 fbb9 	bl	8019e0c <builtin_interfaces__msg__Time__fini>
 801969a:	4628      	mov	r0, r5
 801969c:	f002 fe52 	bl	801c344 <rosidl_runtime_c__String__fini>
 80196a0:	e7f6      	b.n	8019690 <std_msgs__msg__Header__init+0x28>
 80196a2:	2000      	movs	r0, #0
 80196a4:	4770      	bx	lr
 80196a6:	bf00      	nop

080196a8 <std_msgs__msg__Header__fini>:
 80196a8:	b148      	cbz	r0, 80196be <std_msgs__msg__Header__fini+0x16>
 80196aa:	b510      	push	{r4, lr}
 80196ac:	4604      	mov	r4, r0
 80196ae:	f000 fbad 	bl	8019e0c <builtin_interfaces__msg__Time__fini>
 80196b2:	f104 0008 	add.w	r0, r4, #8
 80196b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80196ba:	f002 be43 	b.w	801c344 <rosidl_runtime_c__String__fini>
 80196be:	4770      	bx	lr

080196c0 <std_srvs__srv__SetBool_Event__get_type_description.part.0>:
 80196c0:	b510      	push	{r4, lr}
 80196c2:	2000      	movs	r0, #0
 80196c4:	f000 fb72 	bl	8019dac <builtin_interfaces__msg__Time__get_type_description>
 80196c8:	300c      	adds	r0, #12
 80196ca:	c807      	ldmia	r0, {r0, r1, r2}
 80196cc:	4c11      	ldr	r4, [pc, #68]	@ (8019714 <std_srvs__srv__SetBool_Event__get_type_description.part.0+0x54>)
 80196ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80196d2:	2000      	movs	r0, #0
 80196d4:	f7ff ff26 	bl	8019524 <service_msgs__msg__ServiceEventInfo__get_type_description>
 80196d8:	300c      	adds	r0, #12
 80196da:	c807      	ldmia	r0, {r0, r1, r2}
 80196dc:	4b0e      	ldr	r3, [pc, #56]	@ (8019718 <std_srvs__srv__SetBool_Event__get_type_description.part.0+0x58>)
 80196de:	3418      	adds	r4, #24
 80196e0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80196e4:	781a      	ldrb	r2, [r3, #0]
 80196e6:	b90a      	cbnz	r2, 80196ec <std_srvs__srv__SetBool_Event__get_type_description.part.0+0x2c>
 80196e8:	2201      	movs	r2, #1
 80196ea:	701a      	strb	r2, [r3, #0]
 80196ec:	4b0b      	ldr	r3, [pc, #44]	@ (801971c <std_srvs__srv__SetBool_Event__get_type_description.part.0+0x5c>)
 80196ee:	4c0c      	ldr	r4, [pc, #48]	@ (8019720 <std_srvs__srv__SetBool_Event__get_type_description.part.0+0x60>)
 80196f0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80196f4:	4b0b      	ldr	r3, [pc, #44]	@ (8019724 <std_srvs__srv__SetBool_Event__get_type_description.part.0+0x64>)
 80196f6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80196fa:	7823      	ldrb	r3, [r4, #0]
 80196fc:	b90b      	cbnz	r3, 8019702 <std_srvs__srv__SetBool_Event__get_type_description.part.0+0x42>
 80196fe:	2301      	movs	r3, #1
 8019700:	7023      	strb	r3, [r4, #0]
 8019702:	4a09      	ldr	r2, [pc, #36]	@ (8019728 <std_srvs__srv__SetBool_Event__get_type_description.part.0+0x68>)
 8019704:	4b09      	ldr	r3, [pc, #36]	@ (801972c <std_srvs__srv__SetBool_Event__get_type_description.part.0+0x6c>)
 8019706:	4c0a      	ldr	r4, [pc, #40]	@ (8019730 <std_srvs__srv__SetBool_Event__get_type_description.part.0+0x70>)
 8019708:	ca07      	ldmia	r2, {r0, r1, r2}
 801970a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801970e:	2301      	movs	r3, #1
 8019710:	7023      	strb	r3, [r4, #0]
 8019712:	bd10      	pop	{r4, pc}
 8019714:	200027f8 	.word	0x200027f8
 8019718:	20019b93 	.word	0x20019b93
 801971c:	080204e4 	.word	0x080204e4
 8019720:	20019b92 	.word	0x20019b92
 8019724:	20002828 	.word	0x20002828
 8019728:	080204c0 	.word	0x080204c0
 801972c:	20002840 	.word	0x20002840
 8019730:	20019b91 	.word	0x20019b91

08019734 <std_srvs__srv__SetBool__get_type_hash>:
 8019734:	4800      	ldr	r0, [pc, #0]	@ (8019738 <std_srvs__srv__SetBool__get_type_hash+0x4>)
 8019736:	4770      	bx	lr
 8019738:	20002708 	.word	0x20002708

0801973c <std_srvs__srv__SetBool_Request__get_type_hash>:
 801973c:	4800      	ldr	r0, [pc, #0]	@ (8019740 <std_srvs__srv__SetBool_Request__get_type_hash+0x4>)
 801973e:	4770      	bx	lr
 8019740:	200026e4 	.word	0x200026e4

08019744 <std_srvs__srv__SetBool_Response__get_type_hash>:
 8019744:	4800      	ldr	r0, [pc, #0]	@ (8019748 <std_srvs__srv__SetBool_Response__get_type_hash+0x4>)
 8019746:	4770      	bx	lr
 8019748:	200026c0 	.word	0x200026c0

0801974c <std_srvs__srv__SetBool_Event__get_type_hash>:
 801974c:	4800      	ldr	r0, [pc, #0]	@ (8019750 <std_srvs__srv__SetBool_Event__get_type_hash+0x4>)
 801974e:	4770      	bx	lr
 8019750:	2000269c 	.word	0x2000269c

08019754 <std_srvs__srv__SetBool__get_type_description>:
 8019754:	b570      	push	{r4, r5, r6, lr}
 8019756:	4e1d      	ldr	r6, [pc, #116]	@ (80197cc <std_srvs__srv__SetBool__get_type_description+0x78>)
 8019758:	7835      	ldrb	r5, [r6, #0]
 801975a:	b10d      	cbz	r5, 8019760 <std_srvs__srv__SetBool__get_type_description+0xc>
 801975c:	481c      	ldr	r0, [pc, #112]	@ (80197d0 <std_srvs__srv__SetBool__get_type_description+0x7c>)
 801975e:	bd70      	pop	{r4, r5, r6, pc}
 8019760:	4628      	mov	r0, r5
 8019762:	f000 fb23 	bl	8019dac <builtin_interfaces__msg__Time__get_type_description>
 8019766:	300c      	adds	r0, #12
 8019768:	c807      	ldmia	r0, {r0, r1, r2}
 801976a:	4c1a      	ldr	r4, [pc, #104]	@ (80197d4 <std_srvs__srv__SetBool__get_type_description+0x80>)
 801976c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8019770:	4628      	mov	r0, r5
 8019772:	f7ff fed7 	bl	8019524 <service_msgs__msg__ServiceEventInfo__get_type_description>
 8019776:	300c      	adds	r0, #12
 8019778:	c807      	ldmia	r0, {r0, r1, r2}
 801977a:	4b17      	ldr	r3, [pc, #92]	@ (80197d8 <std_srvs__srv__SetBool__get_type_description+0x84>)
 801977c:	781b      	ldrb	r3, [r3, #0]
 801977e:	3418      	adds	r4, #24
 8019780:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8019784:	b1f3      	cbz	r3, 80197c4 <std_srvs__srv__SetBool__get_type_description+0x70>
 8019786:	4b15      	ldr	r3, [pc, #84]	@ (80197dc <std_srvs__srv__SetBool__get_type_description+0x88>)
 8019788:	4c15      	ldr	r4, [pc, #84]	@ (80197e0 <std_srvs__srv__SetBool__get_type_description+0x8c>)
 801978a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801978e:	4b15      	ldr	r3, [pc, #84]	@ (80197e4 <std_srvs__srv__SetBool__get_type_description+0x90>)
 8019790:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8019794:	7823      	ldrb	r3, [r4, #0]
 8019796:	b90b      	cbnz	r3, 801979c <std_srvs__srv__SetBool__get_type_description+0x48>
 8019798:	2301      	movs	r3, #1
 801979a:	7023      	strb	r3, [r4, #0]
 801979c:	4b12      	ldr	r3, [pc, #72]	@ (80197e8 <std_srvs__srv__SetBool__get_type_description+0x94>)
 801979e:	4c13      	ldr	r4, [pc, #76]	@ (80197ec <std_srvs__srv__SetBool__get_type_description+0x98>)
 80197a0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80197a4:	4b12      	ldr	r3, [pc, #72]	@ (80197f0 <std_srvs__srv__SetBool__get_type_description+0x9c>)
 80197a6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80197aa:	7823      	ldrb	r3, [r4, #0]
 80197ac:	b90b      	cbnz	r3, 80197b2 <std_srvs__srv__SetBool__get_type_description+0x5e>
 80197ae:	2301      	movs	r3, #1
 80197b0:	7023      	strb	r3, [r4, #0]
 80197b2:	4a10      	ldr	r2, [pc, #64]	@ (80197f4 <std_srvs__srv__SetBool__get_type_description+0xa0>)
 80197b4:	4b10      	ldr	r3, [pc, #64]	@ (80197f8 <std_srvs__srv__SetBool__get_type_description+0xa4>)
 80197b6:	ca07      	ldmia	r2, {r0, r1, r2}
 80197b8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80197bc:	2301      	movs	r3, #1
 80197be:	4804      	ldr	r0, [pc, #16]	@ (80197d0 <std_srvs__srv__SetBool__get_type_description+0x7c>)
 80197c0:	7033      	strb	r3, [r6, #0]
 80197c2:	bd70      	pop	{r4, r5, r6, pc}
 80197c4:	f7ff ff7c 	bl	80196c0 <std_srvs__srv__SetBool_Event__get_type_description.part.0>
 80197c8:	e7dd      	b.n	8019786 <std_srvs__srv__SetBool__get_type_description+0x32>
 80197ca:	bf00      	nop
 80197cc:	20019b94 	.word	0x20019b94
 80197d0:	080204fc 	.word	0x080204fc
 80197d4:	20002a44 	.word	0x20002a44
 80197d8:	20019b91 	.word	0x20019b91
 80197dc:	0802049c 	.word	0x0802049c
 80197e0:	20019b93 	.word	0x20019b93
 80197e4:	20002a74 	.word	0x20002a74
 80197e8:	080204e4 	.word	0x080204e4
 80197ec:	20019b92 	.word	0x20019b92
 80197f0:	20002a8c 	.word	0x20002a8c
 80197f4:	080204c0 	.word	0x080204c0
 80197f8:	20002aa4 	.word	0x20002aa4

080197fc <std_srvs__srv__SetBool_Request__get_type_description>:
 80197fc:	4b03      	ldr	r3, [pc, #12]	@ (801980c <std_srvs__srv__SetBool_Request__get_type_description+0x10>)
 80197fe:	781a      	ldrb	r2, [r3, #0]
 8019800:	b90a      	cbnz	r2, 8019806 <std_srvs__srv__SetBool_Request__get_type_description+0xa>
 8019802:	2201      	movs	r2, #1
 8019804:	701a      	strb	r2, [r3, #0]
 8019806:	4802      	ldr	r0, [pc, #8]	@ (8019810 <std_srvs__srv__SetBool_Request__get_type_description+0x14>)
 8019808:	4770      	bx	lr
 801980a:	bf00      	nop
 801980c:	20019b93 	.word	0x20019b93
 8019810:	080204d8 	.word	0x080204d8

08019814 <std_srvs__srv__SetBool_Response__get_type_description>:
 8019814:	4b03      	ldr	r3, [pc, #12]	@ (8019824 <std_srvs__srv__SetBool_Response__get_type_description+0x10>)
 8019816:	781a      	ldrb	r2, [r3, #0]
 8019818:	b90a      	cbnz	r2, 801981e <std_srvs__srv__SetBool_Response__get_type_description+0xa>
 801981a:	2201      	movs	r2, #1
 801981c:	701a      	strb	r2, [r3, #0]
 801981e:	4802      	ldr	r0, [pc, #8]	@ (8019828 <std_srvs__srv__SetBool_Response__get_type_description+0x14>)
 8019820:	4770      	bx	lr
 8019822:	bf00      	nop
 8019824:	20019b92 	.word	0x20019b92
 8019828:	080204b4 	.word	0x080204b4

0801982c <std_srvs__srv__SetBool_Event__get_type_description>:
 801982c:	b508      	push	{r3, lr}
 801982e:	4b04      	ldr	r3, [pc, #16]	@ (8019840 <std_srvs__srv__SetBool_Event__get_type_description+0x14>)
 8019830:	781b      	ldrb	r3, [r3, #0]
 8019832:	b10b      	cbz	r3, 8019838 <std_srvs__srv__SetBool_Event__get_type_description+0xc>
 8019834:	4803      	ldr	r0, [pc, #12]	@ (8019844 <std_srvs__srv__SetBool_Event__get_type_description+0x18>)
 8019836:	bd08      	pop	{r3, pc}
 8019838:	f7ff ff42 	bl	80196c0 <std_srvs__srv__SetBool_Event__get_type_description.part.0>
 801983c:	4801      	ldr	r0, [pc, #4]	@ (8019844 <std_srvs__srv__SetBool_Event__get_type_description+0x18>)
 801983e:	bd08      	pop	{r3, pc}
 8019840:	20019b91 	.word	0x20019b91
 8019844:	08020490 	.word	0x08020490

08019848 <std_srvs__srv__SetBool__get_type_description_sources>:
 8019848:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801984c:	4e2c      	ldr	r6, [pc, #176]	@ (8019900 <std_srvs__srv__SetBool__get_type_description_sources+0xb8>)
 801984e:	7837      	ldrb	r7, [r6, #0]
 8019850:	b117      	cbz	r7, 8019858 <std_srvs__srv__SetBool__get_type_description_sources+0x10>
 8019852:	482c      	ldr	r0, [pc, #176]	@ (8019904 <std_srvs__srv__SetBool__get_type_description_sources+0xbc>)
 8019854:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019858:	4d2b      	ldr	r5, [pc, #172]	@ (8019908 <std_srvs__srv__SetBool__get_type_description_sources+0xc0>)
 801985a:	4c2c      	ldr	r4, [pc, #176]	@ (801990c <std_srvs__srv__SetBool__get_type_description_sources+0xc4>)
 801985c:	f8df 90b8 	ldr.w	r9, [pc, #184]	@ 8019918 <std_srvs__srv__SetBool__get_type_description_sources+0xd0>
 8019860:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019862:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019864:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019866:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019868:	682b      	ldr	r3, [r5, #0]
 801986a:	4625      	mov	r5, r4
 801986c:	4638      	mov	r0, r7
 801986e:	f845 3b04 	str.w	r3, [r5], #4
 8019872:	f000 faa7 	bl	8019dc4 <builtin_interfaces__msg__Time__get_individual_type_description_source>
 8019876:	4684      	mov	ip, r0
 8019878:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801987c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801987e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8019882:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8019884:	4638      	mov	r0, r7
 8019886:	f8dc 3000 	ldr.w	r3, [ip]
 801988a:	602b      	str	r3, [r5, #0]
 801988c:	f7ff fe62 	bl	8019554 <service_msgs__msg__ServiceEventInfo__get_individual_type_description_source>
 8019890:	4684      	mov	ip, r0
 8019892:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8019896:	f104 0a28 	add.w	sl, r4, #40	@ 0x28
 801989a:	e8aa 000f 	stmia.w	sl!, {r0, r1, r2, r3}
 801989e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80198a2:	e8aa 000f 	stmia.w	sl!, {r0, r1, r2, r3}
 80198a6:	f8dc 3000 	ldr.w	r3, [ip]
 80198aa:	f8ca 3000 	str.w	r3, [sl]
 80198ae:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 80198b2:	f104 084c 	add.w	r8, r4, #76	@ 0x4c
 80198b6:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
 80198ba:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 80198be:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
 80198c2:	4f13      	ldr	r7, [pc, #76]	@ (8019910 <std_srvs__srv__SetBool__get_type_description_sources+0xc8>)
 80198c4:	f8d9 3000 	ldr.w	r3, [r9]
 80198c8:	f8c8 3000 	str.w	r3, [r8]
 80198cc:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80198ce:	f104 0e70 	add.w	lr, r4, #112	@ 0x70
 80198d2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80198d6:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80198d8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80198dc:	4d0d      	ldr	r5, [pc, #52]	@ (8019914 <std_srvs__srv__SetBool__get_type_description_sources+0xcc>)
 80198de:	683b      	ldr	r3, [r7, #0]
 80198e0:	f8ce 3000 	str.w	r3, [lr]
 80198e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80198e6:	3494      	adds	r4, #148	@ 0x94
 80198e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80198ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80198ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80198ee:	f04f 0b01 	mov.w	fp, #1
 80198f2:	682b      	ldr	r3, [r5, #0]
 80198f4:	4803      	ldr	r0, [pc, #12]	@ (8019904 <std_srvs__srv__SetBool__get_type_description_sources+0xbc>)
 80198f6:	f886 b000 	strb.w	fp, [r6]
 80198fa:	6023      	str	r3, [r4, #0]
 80198fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019900:	20019b90 	.word	0x20019b90
 8019904:	080203f4 	.word	0x080203f4
 8019908:	0802046c 	.word	0x0802046c
 801990c:	20019ab8 	.word	0x20019ab8
 8019910:	08020448 	.word	0x08020448
 8019914:	08020424 	.word	0x08020424
 8019918:	08020400 	.word	0x08020400

0801991c <std_srvs__srv__SetBool_Request__get_type_description_sources>:
 801991c:	4b09      	ldr	r3, [pc, #36]	@ (8019944 <std_srvs__srv__SetBool_Request__get_type_description_sources+0x28>)
 801991e:	781a      	ldrb	r2, [r3, #0]
 8019920:	b96a      	cbnz	r2, 801993e <std_srvs__srv__SetBool_Request__get_type_description_sources+0x22>
 8019922:	b430      	push	{r4, r5}
 8019924:	4d08      	ldr	r5, [pc, #32]	@ (8019948 <std_srvs__srv__SetBool_Request__get_type_description_sources+0x2c>)
 8019926:	4c09      	ldr	r4, [pc, #36]	@ (801994c <std_srvs__srv__SetBool_Request__get_type_description_sources+0x30>)
 8019928:	2201      	movs	r2, #1
 801992a:	701a      	strb	r2, [r3, #0]
 801992c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801992e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019930:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019932:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019934:	682b      	ldr	r3, [r5, #0]
 8019936:	4806      	ldr	r0, [pc, #24]	@ (8019950 <std_srvs__srv__SetBool_Request__get_type_description_sources+0x34>)
 8019938:	6023      	str	r3, [r4, #0]
 801993a:	bc30      	pop	{r4, r5}
 801993c:	4770      	bx	lr
 801993e:	4804      	ldr	r0, [pc, #16]	@ (8019950 <std_srvs__srv__SetBool_Request__get_type_description_sources+0x34>)
 8019940:	4770      	bx	lr
 8019942:	bf00      	nop
 8019944:	20019ab4 	.word	0x20019ab4
 8019948:	08020448 	.word	0x08020448
 801994c:	20019a90 	.word	0x20019a90
 8019950:	080203e8 	.word	0x080203e8

08019954 <std_srvs__srv__SetBool_Response__get_type_description_sources>:
 8019954:	4b09      	ldr	r3, [pc, #36]	@ (801997c <std_srvs__srv__SetBool_Response__get_type_description_sources+0x28>)
 8019956:	781a      	ldrb	r2, [r3, #0]
 8019958:	b96a      	cbnz	r2, 8019976 <std_srvs__srv__SetBool_Response__get_type_description_sources+0x22>
 801995a:	b430      	push	{r4, r5}
 801995c:	4d08      	ldr	r5, [pc, #32]	@ (8019980 <std_srvs__srv__SetBool_Response__get_type_description_sources+0x2c>)
 801995e:	4c09      	ldr	r4, [pc, #36]	@ (8019984 <std_srvs__srv__SetBool_Response__get_type_description_sources+0x30>)
 8019960:	2201      	movs	r2, #1
 8019962:	701a      	strb	r2, [r3, #0]
 8019964:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019966:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019968:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801996a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801996c:	682b      	ldr	r3, [r5, #0]
 801996e:	4806      	ldr	r0, [pc, #24]	@ (8019988 <std_srvs__srv__SetBool_Response__get_type_description_sources+0x34>)
 8019970:	6023      	str	r3, [r4, #0]
 8019972:	bc30      	pop	{r4, r5}
 8019974:	4770      	bx	lr
 8019976:	4804      	ldr	r0, [pc, #16]	@ (8019988 <std_srvs__srv__SetBool_Response__get_type_description_sources+0x34>)
 8019978:	4770      	bx	lr
 801997a:	bf00      	nop
 801997c:	20019a8c 	.word	0x20019a8c
 8019980:	08020424 	.word	0x08020424
 8019984:	20019a68 	.word	0x20019a68
 8019988:	080203dc 	.word	0x080203dc

0801998c <std_srvs__srv__SetBool_Event__get_type_description_sources>:
 801998c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019990:	4e24      	ldr	r6, [pc, #144]	@ (8019a24 <std_srvs__srv__SetBool_Event__get_type_description_sources+0x98>)
 8019992:	7837      	ldrb	r7, [r6, #0]
 8019994:	b117      	cbz	r7, 801999c <std_srvs__srv__SetBool_Event__get_type_description_sources+0x10>
 8019996:	4824      	ldr	r0, [pc, #144]	@ (8019a28 <std_srvs__srv__SetBool_Event__get_type_description_sources+0x9c>)
 8019998:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801999c:	4d23      	ldr	r5, [pc, #140]	@ (8019a2c <std_srvs__srv__SetBool_Event__get_type_description_sources+0xa0>)
 801999e:	4c24      	ldr	r4, [pc, #144]	@ (8019a30 <std_srvs__srv__SetBool_Event__get_type_description_sources+0xa4>)
 80199a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80199a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80199a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80199a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80199a8:	682b      	ldr	r3, [r5, #0]
 80199aa:	4625      	mov	r5, r4
 80199ac:	4638      	mov	r0, r7
 80199ae:	f845 3b04 	str.w	r3, [r5], #4
 80199b2:	f000 fa07 	bl	8019dc4 <builtin_interfaces__msg__Time__get_individual_type_description_source>
 80199b6:	4684      	mov	ip, r0
 80199b8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80199bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80199be:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80199c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80199c4:	4638      	mov	r0, r7
 80199c6:	f8dc 3000 	ldr.w	r3, [ip]
 80199ca:	602b      	str	r3, [r5, #0]
 80199cc:	f7ff fdc2 	bl	8019554 <service_msgs__msg__ServiceEventInfo__get_individual_type_description_source>
 80199d0:	4684      	mov	ip, r0
 80199d2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80199d6:	f104 0828 	add.w	r8, r4, #40	@ 0x28
 80199da:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
 80199de:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80199e2:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
 80199e6:	4f13      	ldr	r7, [pc, #76]	@ (8019a34 <std_srvs__srv__SetBool_Event__get_type_description_sources+0xa8>)
 80199e8:	f8dc 3000 	ldr.w	r3, [ip]
 80199ec:	f8c8 3000 	str.w	r3, [r8]
 80199f0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80199f2:	f104 0e4c 	add.w	lr, r4, #76	@ 0x4c
 80199f6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80199fa:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80199fc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8019a00:	4d0d      	ldr	r5, [pc, #52]	@ (8019a38 <std_srvs__srv__SetBool_Event__get_type_description_sources+0xac>)
 8019a02:	683b      	ldr	r3, [r7, #0]
 8019a04:	f8ce 3000 	str.w	r3, [lr]
 8019a08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019a0a:	3470      	adds	r4, #112	@ 0x70
 8019a0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019a0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019a10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019a12:	f04f 0901 	mov.w	r9, #1
 8019a16:	682b      	ldr	r3, [r5, #0]
 8019a18:	4803      	ldr	r0, [pc, #12]	@ (8019a28 <std_srvs__srv__SetBool_Event__get_type_description_sources+0x9c>)
 8019a1a:	f886 9000 	strb.w	r9, [r6]
 8019a1e:	6023      	str	r3, [r4, #0]
 8019a20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019a24:	20019a64 	.word	0x20019a64
 8019a28:	080203d0 	.word	0x080203d0
 8019a2c:	08020400 	.word	0x08020400
 8019a30:	200199b0 	.word	0x200199b0
 8019a34:	08020448 	.word	0x08020448
 8019a38:	08020424 	.word	0x08020424

08019a3c <std_srvs__srv__SetBool_Event__fini.part.0>:
 8019a3c:	b530      	push	{r4, r5, lr}
 8019a3e:	4605      	mov	r5, r0
 8019a40:	b087      	sub	sp, #28
 8019a42:	f7ff fdc3 	bl	80195cc <service_msgs__msg__ServiceEventInfo__fini>
 8019a46:	a801      	add	r0, sp, #4
 8019a48:	f7f3 fbac 	bl	800d1a4 <rcutils_get_default_allocator>
 8019a4c:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8019a4e:	b130      	cbz	r0, 8019a5e <std_srvs__srv__SetBool_Event__fini.part.0+0x22>
 8019a50:	9b02      	ldr	r3, [sp, #8]
 8019a52:	9905      	ldr	r1, [sp, #20]
 8019a54:	4798      	blx	r3
 8019a56:	2300      	movs	r3, #0
 8019a58:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 8019a5c:	632b      	str	r3, [r5, #48]	@ 0x30
 8019a5e:	a801      	add	r0, sp, #4
 8019a60:	f7f3 fba0 	bl	800d1a4 <rcutils_get_default_allocator>
 8019a64:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8019a66:	b1b3      	cbz	r3, 8019a96 <std_srvs__srv__SetBool_Event__fini.part.0+0x5a>
 8019a68:	6bea      	ldr	r2, [r5, #60]	@ 0x3c
 8019a6a:	b162      	cbz	r2, 8019a86 <std_srvs__srv__SetBool_Event__fini.part.0+0x4a>
 8019a6c:	2400      	movs	r4, #0
 8019a6e:	eb13 1004 	adds.w	r0, r3, r4, lsl #4
 8019a72:	f100 0004 	add.w	r0, r0, #4
 8019a76:	d010      	beq.n	8019a9a <std_srvs__srv__SetBool_Event__fini.part.0+0x5e>
 8019a78:	f002 fc64 	bl	801c344 <rosidl_runtime_c__String__fini>
 8019a7c:	6bea      	ldr	r2, [r5, #60]	@ 0x3c
 8019a7e:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8019a80:	3401      	adds	r4, #1
 8019a82:	4294      	cmp	r4, r2
 8019a84:	d3f3      	bcc.n	8019a6e <std_srvs__srv__SetBool_Event__fini.part.0+0x32>
 8019a86:	4618      	mov	r0, r3
 8019a88:	9a02      	ldr	r2, [sp, #8]
 8019a8a:	9905      	ldr	r1, [sp, #20]
 8019a8c:	4790      	blx	r2
 8019a8e:	2300      	movs	r3, #0
 8019a90:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 8019a94:	63eb      	str	r3, [r5, #60]	@ 0x3c
 8019a96:	b007      	add	sp, #28
 8019a98:	bd30      	pop	{r4, r5, pc}
 8019a9a:	3401      	adds	r4, #1
 8019a9c:	4294      	cmp	r4, r2
 8019a9e:	d3e6      	bcc.n	8019a6e <std_srvs__srv__SetBool_Event__fini.part.0+0x32>
 8019aa0:	e7f1      	b.n	8019a86 <std_srvs__srv__SetBool_Event__fini.part.0+0x4a>
 8019aa2:	bf00      	nop

08019aa4 <std_srvs__srv__SetBool_Request__init>:
 8019aa4:	3800      	subs	r0, #0
 8019aa6:	bf18      	it	ne
 8019aa8:	2001      	movne	r0, #1
 8019aaa:	4770      	bx	lr

08019aac <std_srvs__srv__SetBool_Request__fini>:
 8019aac:	4770      	bx	lr
 8019aae:	bf00      	nop

08019ab0 <std_srvs__srv__SetBool_Request__copy>:
 8019ab0:	b128      	cbz	r0, 8019abe <std_srvs__srv__SetBool_Request__copy+0xe>
 8019ab2:	b119      	cbz	r1, 8019abc <std_srvs__srv__SetBool_Request__copy+0xc>
 8019ab4:	7803      	ldrb	r3, [r0, #0]
 8019ab6:	700b      	strb	r3, [r1, #0]
 8019ab8:	2001      	movs	r0, #1
 8019aba:	4770      	bx	lr
 8019abc:	4608      	mov	r0, r1
 8019abe:	4770      	bx	lr

08019ac0 <std_srvs__srv__SetBool_Request__Sequence__init>:
 8019ac0:	b1c0      	cbz	r0, 8019af4 <std_srvs__srv__SetBool_Request__Sequence__init+0x34>
 8019ac2:	b530      	push	{r4, r5, lr}
 8019ac4:	b087      	sub	sp, #28
 8019ac6:	460d      	mov	r5, r1
 8019ac8:	4604      	mov	r4, r0
 8019aca:	a801      	add	r0, sp, #4
 8019acc:	f7f3 fb6a 	bl	800d1a4 <rcutils_get_default_allocator>
 8019ad0:	9a05      	ldr	r2, [sp, #20]
 8019ad2:	b935      	cbnz	r5, 8019ae2 <std_srvs__srv__SetBool_Request__Sequence__init+0x22>
 8019ad4:	4628      	mov	r0, r5
 8019ad6:	e9c4 0500 	strd	r0, r5, [r4]
 8019ada:	2001      	movs	r0, #1
 8019adc:	60a5      	str	r5, [r4, #8]
 8019ade:	b007      	add	sp, #28
 8019ae0:	bd30      	pop	{r4, r5, pc}
 8019ae2:	9b04      	ldr	r3, [sp, #16]
 8019ae4:	2101      	movs	r1, #1
 8019ae6:	4628      	mov	r0, r5
 8019ae8:	4798      	blx	r3
 8019aea:	2800      	cmp	r0, #0
 8019aec:	d1f3      	bne.n	8019ad6 <std_srvs__srv__SetBool_Request__Sequence__init+0x16>
 8019aee:	2000      	movs	r0, #0
 8019af0:	b007      	add	sp, #28
 8019af2:	bd30      	pop	{r4, r5, pc}
 8019af4:	2000      	movs	r0, #0
 8019af6:	4770      	bx	lr

08019af8 <std_srvs__srv__SetBool_Request__Sequence__fini>:
 8019af8:	b180      	cbz	r0, 8019b1c <std_srvs__srv__SetBool_Request__Sequence__fini+0x24>
 8019afa:	b510      	push	{r4, lr}
 8019afc:	4604      	mov	r4, r0
 8019afe:	b086      	sub	sp, #24
 8019b00:	a801      	add	r0, sp, #4
 8019b02:	f7f3 fb4f 	bl	800d1a4 <rcutils_get_default_allocator>
 8019b06:	6820      	ldr	r0, [r4, #0]
 8019b08:	b130      	cbz	r0, 8019b18 <std_srvs__srv__SetBool_Request__Sequence__fini+0x20>
 8019b0a:	9b02      	ldr	r3, [sp, #8]
 8019b0c:	9905      	ldr	r1, [sp, #20]
 8019b0e:	4798      	blx	r3
 8019b10:	2300      	movs	r3, #0
 8019b12:	e9c4 3300 	strd	r3, r3, [r4]
 8019b16:	60a3      	str	r3, [r4, #8]
 8019b18:	b006      	add	sp, #24
 8019b1a:	bd10      	pop	{r4, pc}
 8019b1c:	4770      	bx	lr
 8019b1e:	bf00      	nop

08019b20 <std_srvs__srv__SetBool_Response__init>:
 8019b20:	b158      	cbz	r0, 8019b3a <std_srvs__srv__SetBool_Response__init+0x1a>
 8019b22:	b510      	push	{r4, lr}
 8019b24:	1d04      	adds	r4, r0, #4
 8019b26:	4620      	mov	r0, r4
 8019b28:	f002 fbf2 	bl	801c310 <rosidl_runtime_c__String__init>
 8019b2c:	b100      	cbz	r0, 8019b30 <std_srvs__srv__SetBool_Response__init+0x10>
 8019b2e:	bd10      	pop	{r4, pc}
 8019b30:	4620      	mov	r0, r4
 8019b32:	f002 fc07 	bl	801c344 <rosidl_runtime_c__String__fini>
 8019b36:	2000      	movs	r0, #0
 8019b38:	bd10      	pop	{r4, pc}
 8019b3a:	2000      	movs	r0, #0
 8019b3c:	4770      	bx	lr
 8019b3e:	bf00      	nop

08019b40 <std_srvs__srv__SetBool_Response__fini>:
 8019b40:	b110      	cbz	r0, 8019b48 <std_srvs__srv__SetBool_Response__fini+0x8>
 8019b42:	3004      	adds	r0, #4
 8019b44:	f002 bbfe 	b.w	801c344 <rosidl_runtime_c__String__fini>
 8019b48:	4770      	bx	lr
 8019b4a:	bf00      	nop

08019b4c <std_srvs__srv__SetBool_Response__copy>:
 8019b4c:	b130      	cbz	r0, 8019b5c <std_srvs__srv__SetBool_Response__copy+0x10>
 8019b4e:	b129      	cbz	r1, 8019b5c <std_srvs__srv__SetBool_Response__copy+0x10>
 8019b50:	f810 3b04 	ldrb.w	r3, [r0], #4
 8019b54:	f801 3b04 	strb.w	r3, [r1], #4
 8019b58:	f002 bc3c 	b.w	801c3d4 <rosidl_runtime_c__String__copy>
 8019b5c:	2000      	movs	r0, #0
 8019b5e:	4770      	bx	lr

08019b60 <std_srvs__srv__SetBool_Response__Sequence__init>:
 8019b60:	2800      	cmp	r0, #0
 8019b62:	d03c      	beq.n	8019bde <std_srvs__srv__SetBool_Response__Sequence__init+0x7e>
 8019b64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019b68:	b087      	sub	sp, #28
 8019b6a:	460d      	mov	r5, r1
 8019b6c:	4607      	mov	r7, r0
 8019b6e:	a801      	add	r0, sp, #4
 8019b70:	f7f3 fb18 	bl	800d1a4 <rcutils_get_default_allocator>
 8019b74:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8019b78:	b34d      	cbz	r5, 8019bce <std_srvs__srv__SetBool_Response__Sequence__init+0x6e>
 8019b7a:	9b04      	ldr	r3, [sp, #16]
 8019b7c:	464a      	mov	r2, r9
 8019b7e:	2110      	movs	r1, #16
 8019b80:	4628      	mov	r0, r5
 8019b82:	4798      	blx	r3
 8019b84:	4680      	mov	r8, r0
 8019b86:	b300      	cbz	r0, 8019bca <std_srvs__srv__SetBool_Response__Sequence__init+0x6a>
 8019b88:	1d06      	adds	r6, r0, #4
 8019b8a:	2400      	movs	r4, #0
 8019b8c:	e004      	b.n	8019b98 <std_srvs__srv__SetBool_Response__Sequence__init+0x38>
 8019b8e:	3401      	adds	r4, #1
 8019b90:	42a5      	cmp	r5, r4
 8019b92:	f106 0610 	add.w	r6, r6, #16
 8019b96:	d01b      	beq.n	8019bd0 <std_srvs__srv__SetBool_Response__Sequence__init+0x70>
 8019b98:	4630      	mov	r0, r6
 8019b9a:	f002 fbb9 	bl	801c310 <rosidl_runtime_c__String__init>
 8019b9e:	2800      	cmp	r0, #0
 8019ba0:	d1f5      	bne.n	8019b8e <std_srvs__srv__SetBool_Response__Sequence__init+0x2e>
 8019ba2:	4630      	mov	r0, r6
 8019ba4:	f002 fbce 	bl	801c344 <rosidl_runtime_c__String__fini>
 8019ba8:	42a5      	cmp	r5, r4
 8019baa:	d911      	bls.n	8019bd0 <std_srvs__srv__SetBool_Response__Sequence__init+0x70>
 8019bac:	b14c      	cbz	r4, 8019bc2 <std_srvs__srv__SetBool_Response__Sequence__init+0x62>
 8019bae:	eb08 1504 	add.w	r5, r8, r4, lsl #4
 8019bb2:	3d0c      	subs	r5, #12
 8019bb4:	4628      	mov	r0, r5
 8019bb6:	f002 fbc5 	bl	801c344 <rosidl_runtime_c__String__fini>
 8019bba:	3c01      	subs	r4, #1
 8019bbc:	f1a5 0510 	sub.w	r5, r5, #16
 8019bc0:	d1f8      	bne.n	8019bb4 <std_srvs__srv__SetBool_Response__Sequence__init+0x54>
 8019bc2:	9b02      	ldr	r3, [sp, #8]
 8019bc4:	4649      	mov	r1, r9
 8019bc6:	4640      	mov	r0, r8
 8019bc8:	4798      	blx	r3
 8019bca:	2000      	movs	r0, #0
 8019bcc:	e004      	b.n	8019bd8 <std_srvs__srv__SetBool_Response__Sequence__init+0x78>
 8019bce:	46a8      	mov	r8, r5
 8019bd0:	e9c7 8500 	strd	r8, r5, [r7]
 8019bd4:	60bd      	str	r5, [r7, #8]
 8019bd6:	2001      	movs	r0, #1
 8019bd8:	b007      	add	sp, #28
 8019bda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019bde:	2000      	movs	r0, #0
 8019be0:	4770      	bx	lr
 8019be2:	bf00      	nop

08019be4 <std_srvs__srv__SetBool_Response__Sequence__fini>:
 8019be4:	b320      	cbz	r0, 8019c30 <std_srvs__srv__SetBool_Response__Sequence__fini+0x4c>
 8019be6:	b530      	push	{r4, r5, lr}
 8019be8:	4605      	mov	r5, r0
 8019bea:	b087      	sub	sp, #28
 8019bec:	a801      	add	r0, sp, #4
 8019bee:	f7f3 fad9 	bl	800d1a4 <rcutils_get_default_allocator>
 8019bf2:	682b      	ldr	r3, [r5, #0]
 8019bf4:	b1b3      	cbz	r3, 8019c24 <std_srvs__srv__SetBool_Response__Sequence__fini+0x40>
 8019bf6:	68aa      	ldr	r2, [r5, #8]
 8019bf8:	b162      	cbz	r2, 8019c14 <std_srvs__srv__SetBool_Response__Sequence__fini+0x30>
 8019bfa:	2400      	movs	r4, #0
 8019bfc:	eb13 1004 	adds.w	r0, r3, r4, lsl #4
 8019c00:	f100 0004 	add.w	r0, r0, #4
 8019c04:	d010      	beq.n	8019c28 <std_srvs__srv__SetBool_Response__Sequence__fini+0x44>
 8019c06:	f002 fb9d 	bl	801c344 <rosidl_runtime_c__String__fini>
 8019c0a:	68aa      	ldr	r2, [r5, #8]
 8019c0c:	682b      	ldr	r3, [r5, #0]
 8019c0e:	3401      	adds	r4, #1
 8019c10:	4294      	cmp	r4, r2
 8019c12:	d3f3      	bcc.n	8019bfc <std_srvs__srv__SetBool_Response__Sequence__fini+0x18>
 8019c14:	4618      	mov	r0, r3
 8019c16:	9a02      	ldr	r2, [sp, #8]
 8019c18:	9905      	ldr	r1, [sp, #20]
 8019c1a:	4790      	blx	r2
 8019c1c:	2300      	movs	r3, #0
 8019c1e:	e9c5 3300 	strd	r3, r3, [r5]
 8019c22:	60ab      	str	r3, [r5, #8]
 8019c24:	b007      	add	sp, #28
 8019c26:	bd30      	pop	{r4, r5, pc}
 8019c28:	3401      	adds	r4, #1
 8019c2a:	4294      	cmp	r4, r2
 8019c2c:	d3e6      	bcc.n	8019bfc <std_srvs__srv__SetBool_Response__Sequence__fini+0x18>
 8019c2e:	e7f1      	b.n	8019c14 <std_srvs__srv__SetBool_Response__Sequence__fini+0x30>
 8019c30:	4770      	bx	lr
 8019c32:	bf00      	nop

08019c34 <std_srvs__srv__SetBool_Event__init>:
 8019c34:	b570      	push	{r4, r5, r6, lr}
 8019c36:	b086      	sub	sp, #24
 8019c38:	b1b8      	cbz	r0, 8019c6a <std_srvs__srv__SetBool_Event__init+0x36>
 8019c3a:	4604      	mov	r4, r0
 8019c3c:	f7ff fcb6 	bl	80195ac <service_msgs__msg__ServiceEventInfo__init>
 8019c40:	4605      	mov	r5, r0
 8019c42:	b178      	cbz	r0, 8019c64 <std_srvs__srv__SetBool_Event__init+0x30>
 8019c44:	2600      	movs	r6, #0
 8019c46:	4668      	mov	r0, sp
 8019c48:	f7f3 faac 	bl	800d1a4 <rcutils_get_default_allocator>
 8019c4c:	4668      	mov	r0, sp
 8019c4e:	e9c4 660a 	strd	r6, r6, [r4, #40]	@ 0x28
 8019c52:	6326      	str	r6, [r4, #48]	@ 0x30
 8019c54:	f7f3 faa6 	bl	800d1a4 <rcutils_get_default_allocator>
 8019c58:	4628      	mov	r0, r5
 8019c5a:	e9c4 660d 	strd	r6, r6, [r4, #52]	@ 0x34
 8019c5e:	63e6      	str	r6, [r4, #60]	@ 0x3c
 8019c60:	b006      	add	sp, #24
 8019c62:	bd70      	pop	{r4, r5, r6, pc}
 8019c64:	4620      	mov	r0, r4
 8019c66:	f7ff fee9 	bl	8019a3c <std_srvs__srv__SetBool_Event__fini.part.0>
 8019c6a:	2500      	movs	r5, #0
 8019c6c:	4628      	mov	r0, r5
 8019c6e:	b006      	add	sp, #24
 8019c70:	bd70      	pop	{r4, r5, r6, pc}
 8019c72:	bf00      	nop

08019c74 <std_srvs__srv__SetBool_Event__fini>:
 8019c74:	2800      	cmp	r0, #0
 8019c76:	d032      	beq.n	8019cde <std_srvs__srv__SetBool_Event__fini+0x6a>
 8019c78:	b530      	push	{r4, r5, lr}
 8019c7a:	4605      	mov	r5, r0
 8019c7c:	b087      	sub	sp, #28
 8019c7e:	f7ff fca5 	bl	80195cc <service_msgs__msg__ServiceEventInfo__fini>
 8019c82:	a801      	add	r0, sp, #4
 8019c84:	f7f3 fa8e 	bl	800d1a4 <rcutils_get_default_allocator>
 8019c88:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8019c8a:	b130      	cbz	r0, 8019c9a <std_srvs__srv__SetBool_Event__fini+0x26>
 8019c8c:	9b02      	ldr	r3, [sp, #8]
 8019c8e:	9905      	ldr	r1, [sp, #20]
 8019c90:	4798      	blx	r3
 8019c92:	2300      	movs	r3, #0
 8019c94:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 8019c98:	632b      	str	r3, [r5, #48]	@ 0x30
 8019c9a:	a801      	add	r0, sp, #4
 8019c9c:	f7f3 fa82 	bl	800d1a4 <rcutils_get_default_allocator>
 8019ca0:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8019ca2:	b1b3      	cbz	r3, 8019cd2 <std_srvs__srv__SetBool_Event__fini+0x5e>
 8019ca4:	6bea      	ldr	r2, [r5, #60]	@ 0x3c
 8019ca6:	b162      	cbz	r2, 8019cc2 <std_srvs__srv__SetBool_Event__fini+0x4e>
 8019ca8:	2400      	movs	r4, #0
 8019caa:	eb13 1004 	adds.w	r0, r3, r4, lsl #4
 8019cae:	f100 0004 	add.w	r0, r0, #4
 8019cb2:	d010      	beq.n	8019cd6 <std_srvs__srv__SetBool_Event__fini+0x62>
 8019cb4:	f002 fb46 	bl	801c344 <rosidl_runtime_c__String__fini>
 8019cb8:	6bea      	ldr	r2, [r5, #60]	@ 0x3c
 8019cba:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8019cbc:	3401      	adds	r4, #1
 8019cbe:	4294      	cmp	r4, r2
 8019cc0:	d3f3      	bcc.n	8019caa <std_srvs__srv__SetBool_Event__fini+0x36>
 8019cc2:	4618      	mov	r0, r3
 8019cc4:	9a02      	ldr	r2, [sp, #8]
 8019cc6:	9905      	ldr	r1, [sp, #20]
 8019cc8:	4790      	blx	r2
 8019cca:	2300      	movs	r3, #0
 8019ccc:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 8019cd0:	63eb      	str	r3, [r5, #60]	@ 0x3c
 8019cd2:	b007      	add	sp, #28
 8019cd4:	bd30      	pop	{r4, r5, pc}
 8019cd6:	3401      	adds	r4, #1
 8019cd8:	4294      	cmp	r4, r2
 8019cda:	d3e6      	bcc.n	8019caa <std_srvs__srv__SetBool_Event__fini+0x36>
 8019cdc:	e7f1      	b.n	8019cc2 <std_srvs__srv__SetBool_Event__fini+0x4e>
 8019cde:	4770      	bx	lr

08019ce0 <rosidl_typesupport_c__create_service_event_message__std_srvs__srv__SetBool>:
 8019ce0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019ce4:	2900      	cmp	r1, #0
 8019ce6:	d03e      	beq.n	8019d66 <rosidl_typesupport_c__create_service_event_message__std_srvs__srv__SetBool+0x86>
 8019ce8:	4605      	mov	r5, r0
 8019cea:	2800      	cmp	r0, #0
 8019cec:	d03b      	beq.n	8019d66 <rosidl_typesupport_c__create_service_event_message__std_srvs__srv__SetBool+0x86>
 8019cee:	4698      	mov	r8, r3
 8019cf0:	460e      	mov	r6, r1
 8019cf2:	680b      	ldr	r3, [r1, #0]
 8019cf4:	6909      	ldr	r1, [r1, #16]
 8019cf6:	2040      	movs	r0, #64	@ 0x40
 8019cf8:	4617      	mov	r7, r2
 8019cfa:	4798      	blx	r3
 8019cfc:	4604      	mov	r4, r0
 8019cfe:	f7ff ff99 	bl	8019c34 <std_srvs__srv__SetBool_Event__init>
 8019d02:	b360      	cbz	r0, 8019d5e <rosidl_typesupport_c__create_service_event_message__std_srvs__srv__SetBool+0x7e>
 8019d04:	782b      	ldrb	r3, [r5, #0]
 8019d06:	7023      	strb	r3, [r4, #0]
 8019d08:	e9d5 2301 	ldrd	r2, r3, [r5, #4]
 8019d0c:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 8019d10:	e9c4 2301 	strd	r2, r3, [r4, #4]
 8019d14:	e9c4 0108 	strd	r0, r1, [r4, #32]
 8019d18:	68e9      	ldr	r1, [r5, #12]
 8019d1a:	692a      	ldr	r2, [r5, #16]
 8019d1c:	696b      	ldr	r3, [r5, #20]
 8019d1e:	69a8      	ldr	r0, [r5, #24]
 8019d20:	61a0      	str	r0, [r4, #24]
 8019d22:	60e1      	str	r1, [r4, #12]
 8019d24:	6122      	str	r2, [r4, #16]
 8019d26:	6163      	str	r3, [r4, #20]
 8019d28:	b14f      	cbz	r7, 8019d3e <rosidl_typesupport_c__create_service_event_message__std_srvs__srv__SetBool+0x5e>
 8019d2a:	2101      	movs	r1, #1
 8019d2c:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8019d30:	f7ff fec6 	bl	8019ac0 <std_srvs__srv__SetBool_Request__Sequence__init>
 8019d34:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8019d36:	4638      	mov	r0, r7
 8019d38:	f7ff feba 	bl	8019ab0 <std_srvs__srv__SetBool_Request__copy>
 8019d3c:	b178      	cbz	r0, 8019d5e <rosidl_typesupport_c__create_service_event_message__std_srvs__srv__SetBool+0x7e>
 8019d3e:	f1b8 0f00 	cmp.w	r8, #0
 8019d42:	d009      	beq.n	8019d58 <rosidl_typesupport_c__create_service_event_message__std_srvs__srv__SetBool+0x78>
 8019d44:	2101      	movs	r1, #1
 8019d46:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 8019d4a:	f7ff ff09 	bl	8019b60 <std_srvs__srv__SetBool_Response__Sequence__init>
 8019d4e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8019d50:	4640      	mov	r0, r8
 8019d52:	f7ff fefb 	bl	8019b4c <std_srvs__srv__SetBool_Response__copy>
 8019d56:	b110      	cbz	r0, 8019d5e <rosidl_typesupport_c__create_service_event_message__std_srvs__srv__SetBool+0x7e>
 8019d58:	4620      	mov	r0, r4
 8019d5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019d5e:	6873      	ldr	r3, [r6, #4]
 8019d60:	6931      	ldr	r1, [r6, #16]
 8019d62:	4620      	mov	r0, r4
 8019d64:	4798      	blx	r3
 8019d66:	2400      	movs	r4, #0
 8019d68:	4620      	mov	r0, r4
 8019d6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019d6e:	bf00      	nop

08019d70 <rosidl_typesupport_c__destroy_service_event_message__std_srvs__srv__SetBool>:
 8019d70:	b538      	push	{r3, r4, r5, lr}
 8019d72:	460d      	mov	r5, r1
 8019d74:	b199      	cbz	r1, 8019d9e <rosidl_typesupport_c__destroy_service_event_message__std_srvs__srv__SetBool+0x2e>
 8019d76:	4604      	mov	r4, r0
 8019d78:	b180      	cbz	r0, 8019d9c <rosidl_typesupport_c__destroy_service_event_message__std_srvs__srv__SetBool+0x2c>
 8019d7a:	f7ff ff7b 	bl	8019c74 <std_srvs__srv__SetBool_Event__fini>
 8019d7e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8019d80:	b110      	cbz	r0, 8019d88 <rosidl_typesupport_c__destroy_service_event_message__std_srvs__srv__SetBool+0x18>
 8019d82:	686b      	ldr	r3, [r5, #4]
 8019d84:	6929      	ldr	r1, [r5, #16]
 8019d86:	4798      	blx	r3
 8019d88:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8019d8a:	b110      	cbz	r0, 8019d92 <rosidl_typesupport_c__destroy_service_event_message__std_srvs__srv__SetBool+0x22>
 8019d8c:	686b      	ldr	r3, [r5, #4]
 8019d8e:	6929      	ldr	r1, [r5, #16]
 8019d90:	4798      	blx	r3
 8019d92:	4620      	mov	r0, r4
 8019d94:	686b      	ldr	r3, [r5, #4]
 8019d96:	6929      	ldr	r1, [r5, #16]
 8019d98:	4798      	blx	r3
 8019d9a:	2001      	movs	r0, #1
 8019d9c:	bd38      	pop	{r3, r4, r5, pc}
 8019d9e:	4608      	mov	r0, r1
 8019da0:	bd38      	pop	{r3, r4, r5, pc}
 8019da2:	bf00      	nop

08019da4 <builtin_interfaces__msg__Time__get_type_hash>:
 8019da4:	4800      	ldr	r0, [pc, #0]	@ (8019da8 <builtin_interfaces__msg__Time__get_type_hash+0x4>)
 8019da6:	4770      	bx	lr
 8019da8:	20002c70 	.word	0x20002c70

08019dac <builtin_interfaces__msg__Time__get_type_description>:
 8019dac:	4b03      	ldr	r3, [pc, #12]	@ (8019dbc <builtin_interfaces__msg__Time__get_type_description+0x10>)
 8019dae:	781a      	ldrb	r2, [r3, #0]
 8019db0:	b90a      	cbnz	r2, 8019db6 <builtin_interfaces__msg__Time__get_type_description+0xa>
 8019db2:	2201      	movs	r2, #1
 8019db4:	701a      	strb	r2, [r3, #0]
 8019db6:	4802      	ldr	r0, [pc, #8]	@ (8019dc0 <builtin_interfaces__msg__Time__get_type_description+0x14>)
 8019db8:	4770      	bx	lr
 8019dba:	bf00      	nop
 8019dbc:	20019bbd 	.word	0x20019bbd
 8019dc0:	08020550 	.word	0x08020550

08019dc4 <builtin_interfaces__msg__Time__get_individual_type_description_source>:
 8019dc4:	4800      	ldr	r0, [pc, #0]	@ (8019dc8 <builtin_interfaces__msg__Time__get_individual_type_description_source+0x4>)
 8019dc6:	4770      	bx	lr
 8019dc8:	0802052c 	.word	0x0802052c

08019dcc <builtin_interfaces__msg__Time__get_type_description_sources>:
 8019dcc:	4b09      	ldr	r3, [pc, #36]	@ (8019df4 <builtin_interfaces__msg__Time__get_type_description_sources+0x28>)
 8019dce:	781a      	ldrb	r2, [r3, #0]
 8019dd0:	b96a      	cbnz	r2, 8019dee <builtin_interfaces__msg__Time__get_type_description_sources+0x22>
 8019dd2:	b430      	push	{r4, r5}
 8019dd4:	4d08      	ldr	r5, [pc, #32]	@ (8019df8 <builtin_interfaces__msg__Time__get_type_description_sources+0x2c>)
 8019dd6:	4c09      	ldr	r4, [pc, #36]	@ (8019dfc <builtin_interfaces__msg__Time__get_type_description_sources+0x30>)
 8019dd8:	2201      	movs	r2, #1
 8019dda:	701a      	strb	r2, [r3, #0]
 8019ddc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019dde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019de0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019de2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019de4:	682b      	ldr	r3, [r5, #0]
 8019de6:	4806      	ldr	r0, [pc, #24]	@ (8019e00 <builtin_interfaces__msg__Time__get_type_description_sources+0x34>)
 8019de8:	6023      	str	r3, [r4, #0]
 8019dea:	bc30      	pop	{r4, r5}
 8019dec:	4770      	bx	lr
 8019dee:	4804      	ldr	r0, [pc, #16]	@ (8019e00 <builtin_interfaces__msg__Time__get_type_description_sources+0x34>)
 8019df0:	4770      	bx	lr
 8019df2:	bf00      	nop
 8019df4:	20019bbc 	.word	0x20019bbc
 8019df8:	0802052c 	.word	0x0802052c
 8019dfc:	20019b98 	.word	0x20019b98
 8019e00:	08020520 	.word	0x08020520

08019e04 <builtin_interfaces__msg__Time__init>:
 8019e04:	3800      	subs	r0, #0
 8019e06:	bf18      	it	ne
 8019e08:	2001      	movne	r0, #1
 8019e0a:	4770      	bx	lr

08019e0c <builtin_interfaces__msg__Time__fini>:
 8019e0c:	4770      	bx	lr
 8019e0e:	bf00      	nop

08019e10 <geometry_msgs__msg__Quaternion__get_type_hash>:
 8019e10:	4800      	ldr	r0, [pc, #0]	@ (8019e14 <geometry_msgs__msg__Quaternion__get_type_hash+0x4>)
 8019e12:	4770      	bx	lr
 8019e14:	20002ef8 	.word	0x20002ef8

08019e18 <geometry_msgs__msg__Quaternion__get_type_description>:
 8019e18:	4b03      	ldr	r3, [pc, #12]	@ (8019e28 <geometry_msgs__msg__Quaternion__get_type_description+0x10>)
 8019e1a:	781a      	ldrb	r2, [r3, #0]
 8019e1c:	b90a      	cbnz	r2, 8019e22 <geometry_msgs__msg__Quaternion__get_type_description+0xa>
 8019e1e:	2201      	movs	r2, #1
 8019e20:	701a      	strb	r2, [r3, #0]
 8019e22:	4802      	ldr	r0, [pc, #8]	@ (8019e2c <geometry_msgs__msg__Quaternion__get_type_description+0x14>)
 8019e24:	4770      	bx	lr
 8019e26:	bf00      	nop
 8019e28:	20019be5 	.word	0x20019be5
 8019e2c:	080205a4 	.word	0x080205a4

08019e30 <geometry_msgs__msg__Quaternion__get_individual_type_description_source>:
 8019e30:	4800      	ldr	r0, [pc, #0]	@ (8019e34 <geometry_msgs__msg__Quaternion__get_individual_type_description_source+0x4>)
 8019e32:	4770      	bx	lr
 8019e34:	08020580 	.word	0x08020580

08019e38 <geometry_msgs__msg__Quaternion__get_type_description_sources>:
 8019e38:	4b09      	ldr	r3, [pc, #36]	@ (8019e60 <geometry_msgs__msg__Quaternion__get_type_description_sources+0x28>)
 8019e3a:	781a      	ldrb	r2, [r3, #0]
 8019e3c:	b96a      	cbnz	r2, 8019e5a <geometry_msgs__msg__Quaternion__get_type_description_sources+0x22>
 8019e3e:	b430      	push	{r4, r5}
 8019e40:	4d08      	ldr	r5, [pc, #32]	@ (8019e64 <geometry_msgs__msg__Quaternion__get_type_description_sources+0x2c>)
 8019e42:	4c09      	ldr	r4, [pc, #36]	@ (8019e68 <geometry_msgs__msg__Quaternion__get_type_description_sources+0x30>)
 8019e44:	2201      	movs	r2, #1
 8019e46:	701a      	strb	r2, [r3, #0]
 8019e48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019e4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019e4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019e4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019e50:	682b      	ldr	r3, [r5, #0]
 8019e52:	4806      	ldr	r0, [pc, #24]	@ (8019e6c <geometry_msgs__msg__Quaternion__get_type_description_sources+0x34>)
 8019e54:	6023      	str	r3, [r4, #0]
 8019e56:	bc30      	pop	{r4, r5}
 8019e58:	4770      	bx	lr
 8019e5a:	4804      	ldr	r0, [pc, #16]	@ (8019e6c <geometry_msgs__msg__Quaternion__get_type_description_sources+0x34>)
 8019e5c:	4770      	bx	lr
 8019e5e:	bf00      	nop
 8019e60:	20019be4 	.word	0x20019be4
 8019e64:	08020580 	.word	0x08020580
 8019e68:	20019bc0 	.word	0x20019bc0
 8019e6c:	08020574 	.word	0x08020574

08019e70 <geometry_msgs__msg__Quaternion__init>:
 8019e70:	b160      	cbz	r0, 8019e8c <geometry_msgs__msg__Quaternion__init+0x1c>
 8019e72:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 8019e90 <geometry_msgs__msg__Quaternion__init+0x20>
 8019e76:	2200      	movs	r2, #0
 8019e78:	2300      	movs	r3, #0
 8019e7a:	e9c0 2300 	strd	r2, r3, [r0]
 8019e7e:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8019e82:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8019e86:	ed80 7b06 	vstr	d7, [r0, #24]
 8019e8a:	2001      	movs	r0, #1
 8019e8c:	4770      	bx	lr
 8019e8e:	bf00      	nop
 8019e90:	00000000 	.word	0x00000000
 8019e94:	3ff00000 	.word	0x3ff00000

08019e98 <geometry_msgs__msg__Quaternion__fini>:
 8019e98:	4770      	bx	lr
 8019e9a:	bf00      	nop

08019e9c <geometry_msgs__msg__Vector3__get_type_hash>:
 8019e9c:	4800      	ldr	r0, [pc, #0]	@ (8019ea0 <geometry_msgs__msg__Vector3__get_type_hash+0x4>)
 8019e9e:	4770      	bx	lr
 8019ea0:	200030f8 	.word	0x200030f8

08019ea4 <geometry_msgs__msg__Vector3__get_type_description>:
 8019ea4:	4b03      	ldr	r3, [pc, #12]	@ (8019eb4 <geometry_msgs__msg__Vector3__get_type_description+0x10>)
 8019ea6:	781a      	ldrb	r2, [r3, #0]
 8019ea8:	b90a      	cbnz	r2, 8019eae <geometry_msgs__msg__Vector3__get_type_description+0xa>
 8019eaa:	2201      	movs	r2, #1
 8019eac:	701a      	strb	r2, [r3, #0]
 8019eae:	4802      	ldr	r0, [pc, #8]	@ (8019eb8 <geometry_msgs__msg__Vector3__get_type_description+0x14>)
 8019eb0:	4770      	bx	lr
 8019eb2:	bf00      	nop
 8019eb4:	20019c0d 	.word	0x20019c0d
 8019eb8:	080205f8 	.word	0x080205f8

08019ebc <geometry_msgs__msg__Vector3__get_individual_type_description_source>:
 8019ebc:	4800      	ldr	r0, [pc, #0]	@ (8019ec0 <geometry_msgs__msg__Vector3__get_individual_type_description_source+0x4>)
 8019ebe:	4770      	bx	lr
 8019ec0:	080205d4 	.word	0x080205d4

08019ec4 <geometry_msgs__msg__Vector3__get_type_description_sources>:
 8019ec4:	4b09      	ldr	r3, [pc, #36]	@ (8019eec <geometry_msgs__msg__Vector3__get_type_description_sources+0x28>)
 8019ec6:	781a      	ldrb	r2, [r3, #0]
 8019ec8:	b96a      	cbnz	r2, 8019ee6 <geometry_msgs__msg__Vector3__get_type_description_sources+0x22>
 8019eca:	b430      	push	{r4, r5}
 8019ecc:	4d08      	ldr	r5, [pc, #32]	@ (8019ef0 <geometry_msgs__msg__Vector3__get_type_description_sources+0x2c>)
 8019ece:	4c09      	ldr	r4, [pc, #36]	@ (8019ef4 <geometry_msgs__msg__Vector3__get_type_description_sources+0x30>)
 8019ed0:	2201      	movs	r2, #1
 8019ed2:	701a      	strb	r2, [r3, #0]
 8019ed4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019ed6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019ed8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019eda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019edc:	682b      	ldr	r3, [r5, #0]
 8019ede:	4806      	ldr	r0, [pc, #24]	@ (8019ef8 <geometry_msgs__msg__Vector3__get_type_description_sources+0x34>)
 8019ee0:	6023      	str	r3, [r4, #0]
 8019ee2:	bc30      	pop	{r4, r5}
 8019ee4:	4770      	bx	lr
 8019ee6:	4804      	ldr	r0, [pc, #16]	@ (8019ef8 <geometry_msgs__msg__Vector3__get_type_description_sources+0x34>)
 8019ee8:	4770      	bx	lr
 8019eea:	bf00      	nop
 8019eec:	20019c0c 	.word	0x20019c0c
 8019ef0:	080205d4 	.word	0x080205d4
 8019ef4:	20019be8 	.word	0x20019be8
 8019ef8:	080205c8 	.word	0x080205c8

08019efc <geometry_msgs__msg__Vector3__init>:
 8019efc:	3800      	subs	r0, #0
 8019efe:	bf18      	it	ne
 8019f00:	2001      	movne	r0, #1
 8019f02:	4770      	bx	lr

08019f04 <geometry_msgs__msg__Vector3__fini>:
 8019f04:	4770      	bx	lr
 8019f06:	bf00      	nop

08019f08 <ucdr_serialize_string>:
 8019f08:	b538      	push	{r3, r4, r5, lr}
 8019f0a:	4605      	mov	r5, r0
 8019f0c:	4608      	mov	r0, r1
 8019f0e:	460c      	mov	r4, r1
 8019f10:	f7e6 f9d6 	bl	80002c0 <strlen>
 8019f14:	4621      	mov	r1, r4
 8019f16:	1c42      	adds	r2, r0, #1
 8019f18:	4628      	mov	r0, r5
 8019f1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019f1e:	f7f7 b99b 	b.w	8011258 <ucdr_serialize_sequence_char>
 8019f22:	bf00      	nop

08019f24 <ucdr_deserialize_string>:
 8019f24:	b500      	push	{lr}
 8019f26:	b083      	sub	sp, #12
 8019f28:	ab01      	add	r3, sp, #4
 8019f2a:	f7f7 f9a7 	bl	801127c <ucdr_deserialize_sequence_char>
 8019f2e:	b003      	add	sp, #12
 8019f30:	f85d fb04 	ldr.w	pc, [sp], #4

08019f34 <get_custom_error>:
 8019f34:	4b01      	ldr	r3, [pc, #4]	@ (8019f3c <get_custom_error+0x8>)
 8019f36:	7818      	ldrb	r0, [r3, #0]
 8019f38:	4770      	bx	lr
 8019f3a:	bf00      	nop
 8019f3c:	20019c0e 	.word	0x20019c0e

08019f40 <recv_custom_msg>:
 8019f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019f44:	b089      	sub	sp, #36	@ 0x24
 8019f46:	4693      	mov	fp, r2
 8019f48:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 8019f4c:	9104      	str	r1, [sp, #16]
 8019f4e:	2100      	movs	r1, #0
 8019f50:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 8019f54:	9305      	str	r3, [sp, #20]
 8019f56:	4604      	mov	r4, r0
 8019f58:	f88d 101e 	strb.w	r1, [sp, #30]
 8019f5c:	b332      	cbz	r2, 8019fac <recv_custom_msg+0x6c>
 8019f5e:	f200 2a02 	addw	sl, r0, #514	@ 0x202
 8019f62:	f10d 091f 	add.w	r9, sp, #31
 8019f66:	f10d 0814 	add.w	r8, sp, #20
 8019f6a:	f10d 071e 	add.w	r7, sp, #30
 8019f6e:	f44f 7600 	mov.w	r6, #512	@ 0x200
 8019f72:	e004      	b.n	8019f7e <recv_custom_msg+0x3e>
 8019f74:	9b05      	ldr	r3, [sp, #20]
 8019f76:	2b00      	cmp	r3, #0
 8019f78:	dd10      	ble.n	8019f9c <recv_custom_msg+0x5c>
 8019f7a:	f8d4 5274 	ldr.w	r5, [r4, #628]	@ 0x274
 8019f7e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8019f82:	e9cd 6700 	strd	r6, r7, [sp]
 8019f86:	4623      	mov	r3, r4
 8019f88:	4622      	mov	r2, r4
 8019f8a:	4629      	mov	r1, r5
 8019f8c:	4650      	mov	r0, sl
 8019f8e:	f001 f8f9 	bl	801b184 <uxr_read_framed_msg>
 8019f92:	2800      	cmp	r0, #0
 8019f94:	d0ee      	beq.n	8019f74 <recv_custom_msg+0x34>
 8019f96:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8019f9a:	b1a3      	cbz	r3, 8019fc6 <recv_custom_msg+0x86>
 8019f9c:	4b0e      	ldr	r3, [pc, #56]	@ (8019fd8 <recv_custom_msg+0x98>)
 8019f9e:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8019fa2:	701a      	strb	r2, [r3, #0]
 8019fa4:	2000      	movs	r0, #0
 8019fa6:	b009      	add	sp, #36	@ 0x24
 8019fa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019fac:	f10d 021f 	add.w	r2, sp, #31
 8019fb0:	9200      	str	r2, [sp, #0]
 8019fb2:	4601      	mov	r1, r0
 8019fb4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8019fb8:	47a8      	blx	r5
 8019fba:	2800      	cmp	r0, #0
 8019fbc:	d0ee      	beq.n	8019f9c <recv_custom_msg+0x5c>
 8019fbe:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8019fc2:	2b00      	cmp	r3, #0
 8019fc4:	d1ea      	bne.n	8019f9c <recv_custom_msg+0x5c>
 8019fc6:	9b04      	ldr	r3, [sp, #16]
 8019fc8:	f8cb 0000 	str.w	r0, [fp]
 8019fcc:	2001      	movs	r0, #1
 8019fce:	601c      	str	r4, [r3, #0]
 8019fd0:	b009      	add	sp, #36	@ 0x24
 8019fd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019fd6:	bf00      	nop
 8019fd8:	20019c0e 	.word	0x20019c0e

08019fdc <send_custom_msg>:
 8019fdc:	b570      	push	{r4, r5, r6, lr}
 8019fde:	f890 5200 	ldrb.w	r5, [r0, #512]	@ 0x200
 8019fe2:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 8019fe6:	b086      	sub	sp, #24
 8019fe8:	4616      	mov	r6, r2
 8019fea:	b965      	cbnz	r5, 801a006 <send_custom_msg+0x2a>
 8019fec:	f10d 0317 	add.w	r3, sp, #23
 8019ff0:	47a0      	blx	r4
 8019ff2:	b108      	cbz	r0, 8019ff8 <send_custom_msg+0x1c>
 8019ff4:	42b0      	cmp	r0, r6
 8019ff6:	d014      	beq.n	801a022 <send_custom_msg+0x46>
 8019ff8:	4b0b      	ldr	r3, [pc, #44]	@ (801a028 <send_custom_msg+0x4c>)
 8019ffa:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8019ffe:	701a      	strb	r2, [r3, #0]
 801a000:	2000      	movs	r0, #0
 801a002:	b006      	add	sp, #24
 801a004:	bd70      	pop	{r4, r5, r6, pc}
 801a006:	f10d 0217 	add.w	r2, sp, #23
 801a00a:	9202      	str	r2, [sp, #8]
 801a00c:	2200      	movs	r2, #0
 801a00e:	e9cd 6200 	strd	r6, r2, [sp]
 801a012:	460b      	mov	r3, r1
 801a014:	4602      	mov	r2, r0
 801a016:	4621      	mov	r1, r4
 801a018:	f200 2002 	addw	r0, r0, #514	@ 0x202
 801a01c:	f000 fed4 	bl	801adc8 <uxr_write_framed_msg>
 801a020:	e7e7      	b.n	8019ff2 <send_custom_msg+0x16>
 801a022:	2001      	movs	r0, #1
 801a024:	b006      	add	sp, #24
 801a026:	bd70      	pop	{r4, r5, r6, pc}
 801a028:	20019c0e 	.word	0x20019c0e

0801a02c <uxr_set_custom_transport_callbacks>:
 801a02c:	b410      	push	{r4}
 801a02e:	9c01      	ldr	r4, [sp, #4]
 801a030:	f8c0 4270 	str.w	r4, [r0, #624]	@ 0x270
 801a034:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 801a038:	9b02      	ldr	r3, [sp, #8]
 801a03a:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 801a03e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a042:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
 801a046:	4770      	bx	lr

0801a048 <uxr_init_custom_transport>:
 801a048:	b538      	push	{r3, r4, r5, lr}
 801a04a:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 801a04e:	b303      	cbz	r3, 801a092 <uxr_init_custom_transport+0x4a>
 801a050:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 801a054:	4604      	mov	r4, r0
 801a056:	b1e2      	cbz	r2, 801a092 <uxr_init_custom_transport+0x4a>
 801a058:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 801a05c:	b1ca      	cbz	r2, 801a092 <uxr_init_custom_transport+0x4a>
 801a05e:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 801a062:	b1b2      	cbz	r2, 801a092 <uxr_init_custom_transport+0x4a>
 801a064:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 801a068:	4798      	blx	r3
 801a06a:	4605      	mov	r5, r0
 801a06c:	b188      	cbz	r0, 801a092 <uxr_init_custom_transport+0x4a>
 801a06e:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 801a072:	b98b      	cbnz	r3, 801a098 <uxr_init_custom_transport+0x50>
 801a074:	490b      	ldr	r1, [pc, #44]	@ (801a0a4 <uxr_init_custom_transport+0x5c>)
 801a076:	4b0c      	ldr	r3, [pc, #48]	@ (801a0a8 <uxr_init_custom_transport+0x60>)
 801a078:	4a0c      	ldr	r2, [pc, #48]	@ (801a0ac <uxr_init_custom_transport+0x64>)
 801a07a:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 801a07e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801a082:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 801a086:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 801a08a:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 801a08e:	4628      	mov	r0, r5
 801a090:	bd38      	pop	{r3, r4, r5, pc}
 801a092:	2500      	movs	r5, #0
 801a094:	4628      	mov	r0, r5
 801a096:	bd38      	pop	{r3, r4, r5, pc}
 801a098:	2100      	movs	r1, #0
 801a09a:	f204 2002 	addw	r0, r4, #514	@ 0x202
 801a09e:	f000 fe8d 	bl	801adbc <uxr_init_framing_io>
 801a0a2:	e7e7      	b.n	801a074 <uxr_init_custom_transport+0x2c>
 801a0a4:	08019fdd 	.word	0x08019fdd
 801a0a8:	08019f41 	.word	0x08019f41
 801a0ac:	08019f35 	.word	0x08019f35

0801a0b0 <uxr_close_custom_transport>:
 801a0b0:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 801a0b4:	4718      	bx	r3
 801a0b6:	bf00      	nop

0801a0b8 <uxr_init_input_best_effort_stream>:
 801a0b8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801a0bc:	8003      	strh	r3, [r0, #0]
 801a0be:	4770      	bx	lr

0801a0c0 <uxr_reset_input_best_effort_stream>:
 801a0c0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801a0c4:	8003      	strh	r3, [r0, #0]
 801a0c6:	4770      	bx	lr

0801a0c8 <uxr_receive_best_effort_message>:
 801a0c8:	b538      	push	{r3, r4, r5, lr}
 801a0ca:	4604      	mov	r4, r0
 801a0cc:	8800      	ldrh	r0, [r0, #0]
 801a0ce:	460d      	mov	r5, r1
 801a0d0:	f000 fe5e 	bl	801ad90 <uxr_seq_num_cmp>
 801a0d4:	4603      	mov	r3, r0
 801a0d6:	2b00      	cmp	r3, #0
 801a0d8:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 801a0dc:	bfb8      	it	lt
 801a0de:	8025      	strhlt	r5, [r4, #0]
 801a0e0:	bd38      	pop	{r3, r4, r5, pc}
 801a0e2:	bf00      	nop

0801a0e4 <on_full_input_buffer>:
 801a0e4:	b570      	push	{r4, r5, r6, lr}
 801a0e6:	4605      	mov	r5, r0
 801a0e8:	460c      	mov	r4, r1
 801a0ea:	682b      	ldr	r3, [r5, #0]
 801a0ec:	6809      	ldr	r1, [r1, #0]
 801a0ee:	8920      	ldrh	r0, [r4, #8]
 801a0f0:	6862      	ldr	r2, [r4, #4]
 801a0f2:	fbb2 f2f0 	udiv	r2, r2, r0
 801a0f6:	1a5b      	subs	r3, r3, r1
 801a0f8:	fbb3 f3f2 	udiv	r3, r3, r2
 801a0fc:	3301      	adds	r3, #1
 801a0fe:	b29b      	uxth	r3, r3
 801a100:	fbb3 f6f0 	udiv	r6, r3, r0
 801a104:	fb00 3316 	mls	r3, r0, r6, r3
 801a108:	b29b      	uxth	r3, r3
 801a10a:	fb02 f303 	mul.w	r3, r2, r3
 801a10e:	1d18      	adds	r0, r3, #4
 801a110:	4408      	add	r0, r1
 801a112:	7d26      	ldrb	r6, [r4, #20]
 801a114:	f850 2c04 	ldr.w	r2, [r0, #-4]
 801a118:	b116      	cbz	r6, 801a120 <on_full_input_buffer+0x3c>
 801a11a:	2600      	movs	r6, #0
 801a11c:	f840 6c04 	str.w	r6, [r0, #-4]
 801a120:	2a03      	cmp	r2, #3
 801a122:	d801      	bhi.n	801a128 <on_full_input_buffer+0x44>
 801a124:	2001      	movs	r0, #1
 801a126:	bd70      	pop	{r4, r5, r6, pc}
 801a128:	3308      	adds	r3, #8
 801a12a:	4419      	add	r1, r3
 801a12c:	4628      	mov	r0, r5
 801a12e:	692b      	ldr	r3, [r5, #16]
 801a130:	3a04      	subs	r2, #4
 801a132:	f7f7 f819 	bl	8011168 <ucdr_init_buffer_origin>
 801a136:	4628      	mov	r0, r5
 801a138:	4902      	ldr	r1, [pc, #8]	@ (801a144 <on_full_input_buffer+0x60>)
 801a13a:	4622      	mov	r2, r4
 801a13c:	f7f6 fff0 	bl	8011120 <ucdr_set_on_full_buffer_callback>
 801a140:	2000      	movs	r0, #0
 801a142:	bd70      	pop	{r4, r5, r6, pc}
 801a144:	0801a0e5 	.word	0x0801a0e5

0801a148 <uxr_init_input_reliable_stream>:
 801a148:	b500      	push	{lr}
 801a14a:	e9c0 1200 	strd	r1, r2, [r0]
 801a14e:	f04f 0e00 	mov.w	lr, #0
 801a152:	9a01      	ldr	r2, [sp, #4]
 801a154:	8103      	strh	r3, [r0, #8]
 801a156:	6102      	str	r2, [r0, #16]
 801a158:	f880 e014 	strb.w	lr, [r0, #20]
 801a15c:	b1d3      	cbz	r3, 801a194 <uxr_init_input_reliable_stream+0x4c>
 801a15e:	f8c1 e000 	str.w	lr, [r1]
 801a162:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801a166:	f1bc 0f01 	cmp.w	ip, #1
 801a16a:	d913      	bls.n	801a194 <uxr_init_input_reliable_stream+0x4c>
 801a16c:	2301      	movs	r3, #1
 801a16e:	fbb3 f1fc 	udiv	r1, r3, ip
 801a172:	fb0c 3111 	mls	r1, ip, r1, r3
 801a176:	b289      	uxth	r1, r1
 801a178:	6842      	ldr	r2, [r0, #4]
 801a17a:	fbb2 f2fc 	udiv	r2, r2, ip
 801a17e:	fb01 f202 	mul.w	r2, r1, r2
 801a182:	6801      	ldr	r1, [r0, #0]
 801a184:	f841 e002 	str.w	lr, [r1, r2]
 801a188:	3301      	adds	r3, #1
 801a18a:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801a18e:	b29b      	uxth	r3, r3
 801a190:	459c      	cmp	ip, r3
 801a192:	d8ec      	bhi.n	801a16e <uxr_init_input_reliable_stream+0x26>
 801a194:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801a198:	60c3      	str	r3, [r0, #12]
 801a19a:	f85d fb04 	ldr.w	pc, [sp], #4
 801a19e:	bf00      	nop

0801a1a0 <uxr_reset_input_reliable_stream>:
 801a1a0:	8901      	ldrh	r1, [r0, #8]
 801a1a2:	b1e9      	cbz	r1, 801a1e0 <uxr_reset_input_reliable_stream+0x40>
 801a1a4:	f04f 0c00 	mov.w	ip, #0
 801a1a8:	b500      	push	{lr}
 801a1aa:	4663      	mov	r3, ip
 801a1ac:	46e6      	mov	lr, ip
 801a1ae:	fbb3 f2f1 	udiv	r2, r3, r1
 801a1b2:	fb01 3312 	mls	r3, r1, r2, r3
 801a1b6:	b29b      	uxth	r3, r3
 801a1b8:	6842      	ldr	r2, [r0, #4]
 801a1ba:	fbb2 f2f1 	udiv	r2, r2, r1
 801a1be:	fb03 f202 	mul.w	r2, r3, r2
 801a1c2:	6803      	ldr	r3, [r0, #0]
 801a1c4:	f843 e002 	str.w	lr, [r3, r2]
 801a1c8:	f10c 0c01 	add.w	ip, ip, #1
 801a1cc:	8901      	ldrh	r1, [r0, #8]
 801a1ce:	fa1f f38c 	uxth.w	r3, ip
 801a1d2:	4299      	cmp	r1, r3
 801a1d4:	d8eb      	bhi.n	801a1ae <uxr_reset_input_reliable_stream+0xe>
 801a1d6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801a1da:	60c3      	str	r3, [r0, #12]
 801a1dc:	f85d fb04 	ldr.w	pc, [sp], #4
 801a1e0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801a1e4:	60c3      	str	r3, [r0, #12]
 801a1e6:	4770      	bx	lr

0801a1e8 <uxr_receive_reliable_message>:
 801a1e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a1ec:	4604      	mov	r4, r0
 801a1ee:	460d      	mov	r5, r1
 801a1f0:	8901      	ldrh	r1, [r0, #8]
 801a1f2:	8980      	ldrh	r0, [r0, #12]
 801a1f4:	4690      	mov	r8, r2
 801a1f6:	461f      	mov	r7, r3
 801a1f8:	f000 fdc2 	bl	801ad80 <uxr_seq_num_add>
 801a1fc:	4629      	mov	r1, r5
 801a1fe:	4606      	mov	r6, r0
 801a200:	89a0      	ldrh	r0, [r4, #12]
 801a202:	f000 fdc5 	bl	801ad90 <uxr_seq_num_cmp>
 801a206:	2800      	cmp	r0, #0
 801a208:	db0a      	blt.n	801a220 <uxr_receive_reliable_message+0x38>
 801a20a:	2600      	movs	r6, #0
 801a20c:	89e0      	ldrh	r0, [r4, #14]
 801a20e:	4629      	mov	r1, r5
 801a210:	f000 fdbe 	bl	801ad90 <uxr_seq_num_cmp>
 801a214:	2800      	cmp	r0, #0
 801a216:	bfb8      	it	lt
 801a218:	81e5      	strhlt	r5, [r4, #14]
 801a21a:	4630      	mov	r0, r6
 801a21c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a220:	4630      	mov	r0, r6
 801a222:	4629      	mov	r1, r5
 801a224:	f000 fdb4 	bl	801ad90 <uxr_seq_num_cmp>
 801a228:	2800      	cmp	r0, #0
 801a22a:	dbee      	blt.n	801a20a <uxr_receive_reliable_message+0x22>
 801a22c:	6923      	ldr	r3, [r4, #16]
 801a22e:	4640      	mov	r0, r8
 801a230:	4798      	blx	r3
 801a232:	2101      	movs	r1, #1
 801a234:	4606      	mov	r6, r0
 801a236:	89a0      	ldrh	r0, [r4, #12]
 801a238:	f000 fda2 	bl	801ad80 <uxr_seq_num_add>
 801a23c:	b90e      	cbnz	r6, 801a242 <uxr_receive_reliable_message+0x5a>
 801a23e:	4285      	cmp	r5, r0
 801a240:	d046      	beq.n	801a2d0 <uxr_receive_reliable_message+0xe8>
 801a242:	8921      	ldrh	r1, [r4, #8]
 801a244:	fbb5 f2f1 	udiv	r2, r5, r1
 801a248:	fb01 5212 	mls	r2, r1, r2, r5
 801a24c:	b292      	uxth	r2, r2
 801a24e:	6863      	ldr	r3, [r4, #4]
 801a250:	6820      	ldr	r0, [r4, #0]
 801a252:	fbb3 f3f1 	udiv	r3, r3, r1
 801a256:	fb02 f303 	mul.w	r3, r2, r3
 801a25a:	3304      	adds	r3, #4
 801a25c:	4418      	add	r0, r3
 801a25e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801a262:	2b00      	cmp	r3, #0
 801a264:	d1d1      	bne.n	801a20a <uxr_receive_reliable_message+0x22>
 801a266:	4641      	mov	r1, r8
 801a268:	463a      	mov	r2, r7
 801a26a:	f003 f976 	bl	801d55a <memcpy>
 801a26e:	8921      	ldrh	r1, [r4, #8]
 801a270:	fbb5 f2f1 	udiv	r2, r5, r1
 801a274:	fb01 5212 	mls	r2, r1, r2, r5
 801a278:	b292      	uxth	r2, r2
 801a27a:	6863      	ldr	r3, [r4, #4]
 801a27c:	fbb3 f3f1 	udiv	r3, r3, r1
 801a280:	fb02 f303 	mul.w	r3, r2, r3
 801a284:	6822      	ldr	r2, [r4, #0]
 801a286:	50d7      	str	r7, [r2, r3]
 801a288:	9a06      	ldr	r2, [sp, #24]
 801a28a:	2301      	movs	r3, #1
 801a28c:	7013      	strb	r3, [r2, #0]
 801a28e:	2e00      	cmp	r6, #0
 801a290:	d0bb      	beq.n	801a20a <uxr_receive_reliable_message+0x22>
 801a292:	89a6      	ldrh	r6, [r4, #12]
 801a294:	2101      	movs	r1, #1
 801a296:	4630      	mov	r0, r6
 801a298:	f000 fd72 	bl	801ad80 <uxr_seq_num_add>
 801a29c:	8921      	ldrh	r1, [r4, #8]
 801a29e:	fbb0 f2f1 	udiv	r2, r0, r1
 801a2a2:	fb01 0212 	mls	r2, r1, r2, r0
 801a2a6:	b292      	uxth	r2, r2
 801a2a8:	6863      	ldr	r3, [r4, #4]
 801a2aa:	fbb3 f3f1 	udiv	r3, r3, r1
 801a2ae:	4606      	mov	r6, r0
 801a2b0:	fb02 f303 	mul.w	r3, r2, r3
 801a2b4:	6820      	ldr	r0, [r4, #0]
 801a2b6:	3304      	adds	r3, #4
 801a2b8:	4418      	add	r0, r3
 801a2ba:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801a2be:	2b00      	cmp	r3, #0
 801a2c0:	d0a3      	beq.n	801a20a <uxr_receive_reliable_message+0x22>
 801a2c2:	6923      	ldr	r3, [r4, #16]
 801a2c4:	4798      	blx	r3
 801a2c6:	2802      	cmp	r0, #2
 801a2c8:	d005      	beq.n	801a2d6 <uxr_receive_reliable_message+0xee>
 801a2ca:	2801      	cmp	r0, #1
 801a2cc:	d0e2      	beq.n	801a294 <uxr_receive_reliable_message+0xac>
 801a2ce:	e79c      	b.n	801a20a <uxr_receive_reliable_message+0x22>
 801a2d0:	9b06      	ldr	r3, [sp, #24]
 801a2d2:	81a5      	strh	r5, [r4, #12]
 801a2d4:	701e      	strb	r6, [r3, #0]
 801a2d6:	2601      	movs	r6, #1
 801a2d8:	e798      	b.n	801a20c <uxr_receive_reliable_message+0x24>
 801a2da:	bf00      	nop

0801a2dc <uxr_next_input_reliable_buffer_available>:
 801a2dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a2e0:	4604      	mov	r4, r0
 801a2e2:	460f      	mov	r7, r1
 801a2e4:	8980      	ldrh	r0, [r0, #12]
 801a2e6:	2101      	movs	r1, #1
 801a2e8:	4690      	mov	r8, r2
 801a2ea:	f000 fd49 	bl	801ad80 <uxr_seq_num_add>
 801a2ee:	8921      	ldrh	r1, [r4, #8]
 801a2f0:	fbb0 f2f1 	udiv	r2, r0, r1
 801a2f4:	fb01 0212 	mls	r2, r1, r2, r0
 801a2f8:	b292      	uxth	r2, r2
 801a2fa:	6863      	ldr	r3, [r4, #4]
 801a2fc:	6826      	ldr	r6, [r4, #0]
 801a2fe:	fbb3 f3f1 	udiv	r3, r3, r1
 801a302:	fb02 f303 	mul.w	r3, r2, r3
 801a306:	3304      	adds	r3, #4
 801a308:	441e      	add	r6, r3
 801a30a:	f856 9c04 	ldr.w	r9, [r6, #-4]
 801a30e:	f1b9 0f00 	cmp.w	r9, #0
 801a312:	d023      	beq.n	801a35c <uxr_next_input_reliable_buffer_available+0x80>
 801a314:	6923      	ldr	r3, [r4, #16]
 801a316:	4605      	mov	r5, r0
 801a318:	4630      	mov	r0, r6
 801a31a:	4798      	blx	r3
 801a31c:	4682      	mov	sl, r0
 801a31e:	b300      	cbz	r0, 801a362 <uxr_next_input_reliable_buffer_available+0x86>
 801a320:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 801a324:	2101      	movs	r1, #1
 801a326:	4650      	mov	r0, sl
 801a328:	f000 fd2a 	bl	801ad80 <uxr_seq_num_add>
 801a32c:	8921      	ldrh	r1, [r4, #8]
 801a32e:	fbb0 f2f1 	udiv	r2, r0, r1
 801a332:	4682      	mov	sl, r0
 801a334:	fb01 0212 	mls	r2, r1, r2, r0
 801a338:	e9d4 0300 	ldrd	r0, r3, [r4]
 801a33c:	b292      	uxth	r2, r2
 801a33e:	fbb3 f3f1 	udiv	r3, r3, r1
 801a342:	fb02 f303 	mul.w	r3, r2, r3
 801a346:	3304      	adds	r3, #4
 801a348:	4418      	add	r0, r3
 801a34a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801a34e:	b12b      	cbz	r3, 801a35c <uxr_next_input_reliable_buffer_available+0x80>
 801a350:	6923      	ldr	r3, [r4, #16]
 801a352:	4798      	blx	r3
 801a354:	2802      	cmp	r0, #2
 801a356:	d01b      	beq.n	801a390 <uxr_next_input_reliable_buffer_available+0xb4>
 801a358:	2801      	cmp	r0, #1
 801a35a:	d0e3      	beq.n	801a324 <uxr_next_input_reliable_buffer_available+0x48>
 801a35c:	2000      	movs	r0, #0
 801a35e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a362:	464a      	mov	r2, r9
 801a364:	4631      	mov	r1, r6
 801a366:	4638      	mov	r0, r7
 801a368:	f7f6 ff06 	bl	8011178 <ucdr_init_buffer>
 801a36c:	8921      	ldrh	r1, [r4, #8]
 801a36e:	fbb5 f2f1 	udiv	r2, r5, r1
 801a372:	fb01 5212 	mls	r2, r1, r2, r5
 801a376:	b292      	uxth	r2, r2
 801a378:	6863      	ldr	r3, [r4, #4]
 801a37a:	fbb3 f3f1 	udiv	r3, r3, r1
 801a37e:	fb02 f303 	mul.w	r3, r2, r3
 801a382:	6822      	ldr	r2, [r4, #0]
 801a384:	f842 a003 	str.w	sl, [r2, r3]
 801a388:	81a5      	strh	r5, [r4, #12]
 801a38a:	2001      	movs	r0, #1
 801a38c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a390:	eb06 0108 	add.w	r1, r6, r8
 801a394:	8926      	ldrh	r6, [r4, #8]
 801a396:	fbb5 f0f6 	udiv	r0, r5, r6
 801a39a:	fb06 5010 	mls	r0, r6, r0, r5
 801a39e:	b280      	uxth	r0, r0
 801a3a0:	6863      	ldr	r3, [r4, #4]
 801a3a2:	fbb3 f3f6 	udiv	r3, r3, r6
 801a3a6:	fb00 f303 	mul.w	r3, r0, r3
 801a3aa:	6820      	ldr	r0, [r4, #0]
 801a3ac:	2500      	movs	r5, #0
 801a3ae:	50c5      	str	r5, [r0, r3]
 801a3b0:	eba9 0208 	sub.w	r2, r9, r8
 801a3b4:	4638      	mov	r0, r7
 801a3b6:	f7f6 fedf 	bl	8011178 <ucdr_init_buffer>
 801a3ba:	4903      	ldr	r1, [pc, #12]	@ (801a3c8 <uxr_next_input_reliable_buffer_available+0xec>)
 801a3bc:	4622      	mov	r2, r4
 801a3be:	4638      	mov	r0, r7
 801a3c0:	f7f6 feae 	bl	8011120 <ucdr_set_on_full_buffer_callback>
 801a3c4:	4655      	mov	r5, sl
 801a3c6:	e7df      	b.n	801a388 <uxr_next_input_reliable_buffer_available+0xac>
 801a3c8:	0801a0e5 	.word	0x0801a0e5

0801a3cc <uxr_process_heartbeat>:
 801a3cc:	b538      	push	{r3, r4, r5, lr}
 801a3ce:	4611      	mov	r1, r2
 801a3d0:	4604      	mov	r4, r0
 801a3d2:	89c0      	ldrh	r0, [r0, #14]
 801a3d4:	4615      	mov	r5, r2
 801a3d6:	f000 fcdb 	bl	801ad90 <uxr_seq_num_cmp>
 801a3da:	2800      	cmp	r0, #0
 801a3dc:	bfb8      	it	lt
 801a3de:	81e5      	strhlt	r5, [r4, #14]
 801a3e0:	bd38      	pop	{r3, r4, r5, pc}
 801a3e2:	bf00      	nop

0801a3e4 <uxr_compute_acknack>:
 801a3e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a3e8:	8903      	ldrh	r3, [r0, #8]
 801a3ea:	8985      	ldrh	r5, [r0, #12]
 801a3ec:	4604      	mov	r4, r0
 801a3ee:	460e      	mov	r6, r1
 801a3f0:	2b00      	cmp	r3, #0
 801a3f2:	d048      	beq.n	801a486 <uxr_compute_acknack+0xa2>
 801a3f4:	4628      	mov	r0, r5
 801a3f6:	2701      	movs	r7, #1
 801a3f8:	e003      	b.n	801a402 <uxr_compute_acknack+0x1e>
 801a3fa:	4567      	cmp	r7, ip
 801a3fc:	d243      	bcs.n	801a486 <uxr_compute_acknack+0xa2>
 801a3fe:	89a0      	ldrh	r0, [r4, #12]
 801a400:	3701      	adds	r7, #1
 801a402:	b2b9      	uxth	r1, r7
 801a404:	f000 fcbc 	bl	801ad80 <uxr_seq_num_add>
 801a408:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801a40c:	fbb0 f2fc 	udiv	r2, r0, ip
 801a410:	e9d4 1300 	ldrd	r1, r3, [r4]
 801a414:	fb0c 0212 	mls	r2, ip, r2, r0
 801a418:	b292      	uxth	r2, r2
 801a41a:	fbb3 f3fc 	udiv	r3, r3, ip
 801a41e:	fb02 f303 	mul.w	r3, r2, r3
 801a422:	58cb      	ldr	r3, [r1, r3]
 801a424:	2b00      	cmp	r3, #0
 801a426:	d1e8      	bne.n	801a3fa <uxr_compute_acknack+0x16>
 801a428:	8030      	strh	r0, [r6, #0]
 801a42a:	2101      	movs	r1, #1
 801a42c:	89e5      	ldrh	r5, [r4, #14]
 801a42e:	f000 fcab 	bl	801ad88 <uxr_seq_num_sub>
 801a432:	4601      	mov	r1, r0
 801a434:	4628      	mov	r0, r5
 801a436:	f000 fca7 	bl	801ad88 <uxr_seq_num_sub>
 801a43a:	4605      	mov	r5, r0
 801a43c:	4607      	mov	r7, r0
 801a43e:	b1f8      	cbz	r0, 801a480 <uxr_compute_acknack+0x9c>
 801a440:	f04f 0900 	mov.w	r9, #0
 801a444:	464d      	mov	r5, r9
 801a446:	f04f 0801 	mov.w	r8, #1
 801a44a:	fa1f f189 	uxth.w	r1, r9
 801a44e:	8830      	ldrh	r0, [r6, #0]
 801a450:	f000 fc96 	bl	801ad80 <uxr_seq_num_add>
 801a454:	8921      	ldrh	r1, [r4, #8]
 801a456:	fbb0 f3f1 	udiv	r3, r0, r1
 801a45a:	fb03 0011 	mls	r0, r3, r1, r0
 801a45e:	e9d4 2300 	ldrd	r2, r3, [r4]
 801a462:	b280      	uxth	r0, r0
 801a464:	fbb3 f3f1 	udiv	r3, r3, r1
 801a468:	fb00 f303 	mul.w	r3, r0, r3
 801a46c:	fa08 f109 	lsl.w	r1, r8, r9
 801a470:	58d3      	ldr	r3, [r2, r3]
 801a472:	f109 0901 	add.w	r9, r9, #1
 801a476:	b90b      	cbnz	r3, 801a47c <uxr_compute_acknack+0x98>
 801a478:	4329      	orrs	r1, r5
 801a47a:	b28d      	uxth	r5, r1
 801a47c:	454f      	cmp	r7, r9
 801a47e:	d1e4      	bne.n	801a44a <uxr_compute_acknack+0x66>
 801a480:	4628      	mov	r0, r5
 801a482:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a486:	4628      	mov	r0, r5
 801a488:	e7ce      	b.n	801a428 <uxr_compute_acknack+0x44>
 801a48a:	bf00      	nop

0801a48c <uxr_init_output_best_effort_stream>:
 801a48c:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 801a490:	e9c0 3201 	strd	r3, r2, [r0, #4]
 801a494:	6001      	str	r1, [r0, #0]
 801a496:	7303      	strb	r3, [r0, #12]
 801a498:	f8a0 c00e 	strh.w	ip, [r0, #14]
 801a49c:	4770      	bx	lr
 801a49e:	bf00      	nop

0801a4a0 <uxr_reset_output_best_effort_stream>:
 801a4a0:	7b02      	ldrb	r2, [r0, #12]
 801a4a2:	6042      	str	r2, [r0, #4]
 801a4a4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801a4a8:	81c3      	strh	r3, [r0, #14]
 801a4aa:	4770      	bx	lr

0801a4ac <uxr_prepare_best_effort_buffer_to_write>:
 801a4ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a4ae:	4604      	mov	r4, r0
 801a4b0:	b083      	sub	sp, #12
 801a4b2:	6840      	ldr	r0, [r0, #4]
 801a4b4:	460d      	mov	r5, r1
 801a4b6:	4616      	mov	r6, r2
 801a4b8:	f7f8 fb22 	bl	8012b00 <uxr_submessage_padding>
 801a4bc:	6863      	ldr	r3, [r4, #4]
 801a4be:	4418      	add	r0, r3
 801a4c0:	68a3      	ldr	r3, [r4, #8]
 801a4c2:	1942      	adds	r2, r0, r5
 801a4c4:	4293      	cmp	r3, r2
 801a4c6:	bf2c      	ite	cs
 801a4c8:	2701      	movcs	r7, #1
 801a4ca:	2700      	movcc	r7, #0
 801a4cc:	d202      	bcs.n	801a4d4 <uxr_prepare_best_effort_buffer_to_write+0x28>
 801a4ce:	4638      	mov	r0, r7
 801a4d0:	b003      	add	sp, #12
 801a4d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a4d4:	9000      	str	r0, [sp, #0]
 801a4d6:	6821      	ldr	r1, [r4, #0]
 801a4d8:	4630      	mov	r0, r6
 801a4da:	2300      	movs	r3, #0
 801a4dc:	f7f6 fe3a 	bl	8011154 <ucdr_init_buffer_origin_offset>
 801a4e0:	6863      	ldr	r3, [r4, #4]
 801a4e2:	4638      	mov	r0, r7
 801a4e4:	442b      	add	r3, r5
 801a4e6:	6063      	str	r3, [r4, #4]
 801a4e8:	b003      	add	sp, #12
 801a4ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801a4ec <uxr_prepare_best_effort_buffer_to_send>:
 801a4ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a4f0:	4604      	mov	r4, r0
 801a4f2:	461d      	mov	r5, r3
 801a4f4:	6840      	ldr	r0, [r0, #4]
 801a4f6:	7b23      	ldrb	r3, [r4, #12]
 801a4f8:	4298      	cmp	r0, r3
 801a4fa:	bf8c      	ite	hi
 801a4fc:	2601      	movhi	r6, #1
 801a4fe:	2600      	movls	r6, #0
 801a500:	d802      	bhi.n	801a508 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 801a502:	4630      	mov	r0, r6
 801a504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a508:	4688      	mov	r8, r1
 801a50a:	89e0      	ldrh	r0, [r4, #14]
 801a50c:	2101      	movs	r1, #1
 801a50e:	4617      	mov	r7, r2
 801a510:	f000 fc36 	bl	801ad80 <uxr_seq_num_add>
 801a514:	6823      	ldr	r3, [r4, #0]
 801a516:	81e0      	strh	r0, [r4, #14]
 801a518:	8028      	strh	r0, [r5, #0]
 801a51a:	f8c8 3000 	str.w	r3, [r8]
 801a51e:	6863      	ldr	r3, [r4, #4]
 801a520:	603b      	str	r3, [r7, #0]
 801a522:	7b23      	ldrb	r3, [r4, #12]
 801a524:	6063      	str	r3, [r4, #4]
 801a526:	4630      	mov	r0, r6
 801a528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a52c <on_full_output_buffer>:
 801a52c:	b538      	push	{r3, r4, r5, lr}
 801a52e:	460c      	mov	r4, r1
 801a530:	6803      	ldr	r3, [r0, #0]
 801a532:	6809      	ldr	r1, [r1, #0]
 801a534:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801a538:	6862      	ldr	r2, [r4, #4]
 801a53a:	fbb2 f2fc 	udiv	r2, r2, ip
 801a53e:	1a5b      	subs	r3, r3, r1
 801a540:	fbb3 f3f2 	udiv	r3, r3, r2
 801a544:	3301      	adds	r3, #1
 801a546:	b29b      	uxth	r3, r3
 801a548:	fbb3 fefc 	udiv	lr, r3, ip
 801a54c:	fb0c 331e 	mls	r3, ip, lr, r3
 801a550:	b29b      	uxth	r3, r3
 801a552:	fb02 f303 	mul.w	r3, r2, r3
 801a556:	f894 c00c 	ldrb.w	ip, [r4, #12]
 801a55a:	58ca      	ldr	r2, [r1, r3]
 801a55c:	4463      	add	r3, ip
 801a55e:	eba2 020c 	sub.w	r2, r2, ip
 801a562:	3308      	adds	r3, #8
 801a564:	4605      	mov	r5, r0
 801a566:	4419      	add	r1, r3
 801a568:	3a04      	subs	r2, #4
 801a56a:	6903      	ldr	r3, [r0, #16]
 801a56c:	f7f6 fdfc 	bl	8011168 <ucdr_init_buffer_origin>
 801a570:	4628      	mov	r0, r5
 801a572:	4903      	ldr	r1, [pc, #12]	@ (801a580 <on_full_output_buffer+0x54>)
 801a574:	4622      	mov	r2, r4
 801a576:	f7f6 fdd3 	bl	8011120 <ucdr_set_on_full_buffer_callback>
 801a57a:	2000      	movs	r0, #0
 801a57c:	bd38      	pop	{r3, r4, r5, pc}
 801a57e:	bf00      	nop
 801a580:	0801a52d 	.word	0x0801a52d

0801a584 <uxr_init_output_reliable_stream>:
 801a584:	b410      	push	{r4}
 801a586:	f89d c004 	ldrb.w	ip, [sp, #4]
 801a58a:	8103      	strh	r3, [r0, #8]
 801a58c:	e9c0 1200 	strd	r1, r2, [r0]
 801a590:	f880 c00c 	strb.w	ip, [r0, #12]
 801a594:	b1d3      	cbz	r3, 801a5cc <uxr_init_output_reliable_stream+0x48>
 801a596:	f8c1 c000 	str.w	ip, [r1]
 801a59a:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801a59e:	f1bc 0f01 	cmp.w	ip, #1
 801a5a2:	d913      	bls.n	801a5cc <uxr_init_output_reliable_stream+0x48>
 801a5a4:	2301      	movs	r3, #1
 801a5a6:	fbb3 f1fc 	udiv	r1, r3, ip
 801a5aa:	fb0c 3111 	mls	r1, ip, r1, r3
 801a5ae:	b289      	uxth	r1, r1
 801a5b0:	6842      	ldr	r2, [r0, #4]
 801a5b2:	6804      	ldr	r4, [r0, #0]
 801a5b4:	fbb2 f2fc 	udiv	r2, r2, ip
 801a5b8:	fb01 f202 	mul.w	r2, r1, r2
 801a5bc:	7b01      	ldrb	r1, [r0, #12]
 801a5be:	50a1      	str	r1, [r4, r2]
 801a5c0:	3301      	adds	r3, #1
 801a5c2:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801a5c6:	b29b      	uxth	r3, r3
 801a5c8:	459c      	cmp	ip, r3
 801a5ca:	d8ec      	bhi.n	801a5a6 <uxr_init_output_reliable_stream+0x22>
 801a5cc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801a5d0:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801a5d4:	e9c0 2306 	strd	r2, r3, [r0, #24]
 801a5d8:	4905      	ldr	r1, [pc, #20]	@ (801a5f0 <uxr_init_output_reliable_stream+0x6c>)
 801a5da:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a5de:	f8c0 100e 	str.w	r1, [r0, #14]
 801a5e2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801a5e6:	2300      	movs	r3, #0
 801a5e8:	8242      	strh	r2, [r0, #18]
 801a5ea:	8403      	strh	r3, [r0, #32]
 801a5ec:	4770      	bx	lr
 801a5ee:	bf00      	nop
 801a5f0:	ffff0000 	.word	0xffff0000

0801a5f4 <uxr_reset_output_reliable_stream>:
 801a5f4:	8901      	ldrh	r1, [r0, #8]
 801a5f6:	b1b1      	cbz	r1, 801a626 <uxr_reset_output_reliable_stream+0x32>
 801a5f8:	f04f 0c00 	mov.w	ip, #0
 801a5fc:	4663      	mov	r3, ip
 801a5fe:	fbb3 f2f1 	udiv	r2, r3, r1
 801a602:	fb01 3312 	mls	r3, r1, r2, r3
 801a606:	b29b      	uxth	r3, r3
 801a608:	6842      	ldr	r2, [r0, #4]
 801a60a:	fbb2 f2f1 	udiv	r2, r2, r1
 801a60e:	6801      	ldr	r1, [r0, #0]
 801a610:	fb03 f202 	mul.w	r2, r3, r2
 801a614:	7b03      	ldrb	r3, [r0, #12]
 801a616:	508b      	str	r3, [r1, r2]
 801a618:	f10c 0c01 	add.w	ip, ip, #1
 801a61c:	8901      	ldrh	r1, [r0, #8]
 801a61e:	fa1f f38c 	uxth.w	r3, ip
 801a622:	4299      	cmp	r1, r3
 801a624:	d8eb      	bhi.n	801a5fe <uxr_reset_output_reliable_stream+0xa>
 801a626:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801a62a:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801a62e:	e9c0 2306 	strd	r2, r3, [r0, #24]
 801a632:	4904      	ldr	r1, [pc, #16]	@ (801a644 <uxr_reset_output_reliable_stream+0x50>)
 801a634:	f8c0 100e 	str.w	r1, [r0, #14]
 801a638:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801a63c:	2300      	movs	r3, #0
 801a63e:	8242      	strh	r2, [r0, #18]
 801a640:	8403      	strh	r3, [r0, #32]
 801a642:	4770      	bx	lr
 801a644:	ffff0000 	.word	0xffff0000

0801a648 <uxr_prepare_reliable_buffer_to_write>:
 801a648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a64c:	4604      	mov	r4, r0
 801a64e:	b091      	sub	sp, #68	@ 0x44
 801a650:	8900      	ldrh	r0, [r0, #8]
 801a652:	89e7      	ldrh	r7, [r4, #14]
 801a654:	6823      	ldr	r3, [r4, #0]
 801a656:	9204      	str	r2, [sp, #16]
 801a658:	fbb7 f2f0 	udiv	r2, r7, r0
 801a65c:	fb00 7212 	mls	r2, r0, r2, r7
 801a660:	b292      	uxth	r2, r2
 801a662:	6865      	ldr	r5, [r4, #4]
 801a664:	fbb5 f5f0 	udiv	r5, r5, r0
 801a668:	fb05 3202 	mla	r2, r5, r2, r3
 801a66c:	3204      	adds	r2, #4
 801a66e:	f852 ac04 	ldr.w	sl, [r2, #-4]
 801a672:	f894 b00c 	ldrb.w	fp, [r4, #12]
 801a676:	9203      	str	r2, [sp, #12]
 801a678:	4688      	mov	r8, r1
 801a67a:	f1a5 0904 	sub.w	r9, r5, #4
 801a67e:	2800      	cmp	r0, #0
 801a680:	f000 8143 	beq.w	801a90a <uxr_prepare_reliable_buffer_to_write+0x2c2>
 801a684:	2100      	movs	r1, #0
 801a686:	460e      	mov	r6, r1
 801a688:	b28a      	uxth	r2, r1
 801a68a:	fbb2 fcf0 	udiv	ip, r2, r0
 801a68e:	fb00 221c 	mls	r2, r0, ip, r2
 801a692:	b292      	uxth	r2, r2
 801a694:	fb05 f202 	mul.w	r2, r5, r2
 801a698:	3101      	adds	r1, #1
 801a69a:	589a      	ldr	r2, [r3, r2]
 801a69c:	455a      	cmp	r2, fp
 801a69e:	bf04      	itt	eq
 801a6a0:	3601      	addeq	r6, #1
 801a6a2:	b2b6      	uxtheq	r6, r6
 801a6a4:	4281      	cmp	r1, r0
 801a6a6:	d1ef      	bne.n	801a688 <uxr_prepare_reliable_buffer_to_write+0x40>
 801a6a8:	4650      	mov	r0, sl
 801a6aa:	2104      	movs	r1, #4
 801a6ac:	9605      	str	r6, [sp, #20]
 801a6ae:	f7f6 fd67 	bl	8011180 <ucdr_alignment>
 801a6b2:	4482      	add	sl, r0
 801a6b4:	eb0a 0208 	add.w	r2, sl, r8
 801a6b8:	454a      	cmp	r2, r9
 801a6ba:	f240 80ca 	bls.w	801a852 <uxr_prepare_reliable_buffer_to_write+0x20a>
 801a6be:	7b22      	ldrb	r2, [r4, #12]
 801a6c0:	4442      	add	r2, r8
 801a6c2:	454a      	cmp	r2, r9
 801a6c4:	f240 80b2 	bls.w	801a82c <uxr_prepare_reliable_buffer_to_write+0x1e4>
 801a6c8:	f5cb 427f 	rsb	r2, fp, #65280	@ 0xff00
 801a6cc:	32fc      	adds	r2, #252	@ 0xfc
 801a6ce:	fa1f f389 	uxth.w	r3, r9
 801a6d2:	441a      	add	r2, r3
 801a6d4:	b292      	uxth	r2, r2
 801a6d6:	fb06 fb02 	mul.w	fp, r6, r2
 801a6da:	45c3      	cmp	fp, r8
 801a6dc:	9205      	str	r2, [sp, #20]
 801a6de:	9206      	str	r2, [sp, #24]
 801a6e0:	f0c0 80b3 	bcc.w	801a84a <uxr_prepare_reliable_buffer_to_write+0x202>
 801a6e4:	f10a 0204 	add.w	r2, sl, #4
 801a6e8:	454a      	cmp	r2, r9
 801a6ea:	f080 80db 	bcs.w	801a8a4 <uxr_prepare_reliable_buffer_to_write+0x25c>
 801a6ee:	f1a3 0b04 	sub.w	fp, r3, #4
 801a6f2:	ebab 0b0a 	sub.w	fp, fp, sl
 801a6f6:	9b05      	ldr	r3, [sp, #20]
 801a6f8:	fa1f fb8b 	uxth.w	fp, fp
 801a6fc:	eba8 080b 	sub.w	r8, r8, fp
 801a700:	fbb8 fcf3 	udiv	ip, r8, r3
 801a704:	fb03 831c 	mls	r3, r3, ip, r8
 801a708:	fa1f fc8c 	uxth.w	ip, ip
 801a70c:	2b00      	cmp	r3, #0
 801a70e:	f040 80c1 	bne.w	801a894 <uxr_prepare_reliable_buffer_to_write+0x24c>
 801a712:	45b4      	cmp	ip, r6
 801a714:	f200 8099 	bhi.w	801a84a <uxr_prepare_reliable_buffer_to_write+0x202>
 801a718:	f10d 0820 	add.w	r8, sp, #32
 801a71c:	f1bc 0f00 	cmp.w	ip, #0
 801a720:	d040      	beq.n	801a7a4 <uxr_prepare_reliable_buffer_to_write+0x15c>
 801a722:	f8cd a01c 	str.w	sl, [sp, #28]
 801a726:	2600      	movs	r6, #0
 801a728:	f8dd a014 	ldr.w	sl, [sp, #20]
 801a72c:	9505      	str	r5, [sp, #20]
 801a72e:	f10d 0820 	add.w	r8, sp, #32
 801a732:	4665      	mov	r5, ip
 801a734:	e000      	b.n	801a738 <uxr_prepare_reliable_buffer_to_write+0xf0>
 801a736:	46d3      	mov	fp, sl
 801a738:	8921      	ldrh	r1, [r4, #8]
 801a73a:	fbb7 f2f1 	udiv	r2, r7, r1
 801a73e:	fb01 7212 	mls	r2, r1, r2, r7
 801a742:	b292      	uxth	r2, r2
 801a744:	6863      	ldr	r3, [r4, #4]
 801a746:	fbb3 f3f1 	udiv	r3, r3, r1
 801a74a:	6821      	ldr	r1, [r4, #0]
 801a74c:	fb02 f303 	mul.w	r3, r2, r3
 801a750:	3304      	adds	r3, #4
 801a752:	4419      	add	r1, r3
 801a754:	4640      	mov	r0, r8
 801a756:	f851 2c04 	ldr.w	r2, [r1, #-4]
 801a75a:	9200      	str	r2, [sp, #0]
 801a75c:	2300      	movs	r3, #0
 801a75e:	464a      	mov	r2, r9
 801a760:	f7f6 fcf8 	bl	8011154 <ucdr_init_buffer_origin_offset>
 801a764:	465a      	mov	r2, fp
 801a766:	2300      	movs	r3, #0
 801a768:	210d      	movs	r1, #13
 801a76a:	4640      	mov	r0, r8
 801a76c:	f7f8 f988 	bl	8012a80 <uxr_buffer_submessage_header>
 801a770:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801a774:	fbb7 f2fc 	udiv	r2, r7, ip
 801a778:	fb0c 7212 	mls	r2, ip, r2, r7
 801a77c:	b292      	uxth	r2, r2
 801a77e:	6863      	ldr	r3, [r4, #4]
 801a780:	fbb3 f3fc 	udiv	r3, r3, ip
 801a784:	fb02 f303 	mul.w	r3, r2, r3
 801a788:	6822      	ldr	r2, [r4, #0]
 801a78a:	4638      	mov	r0, r7
 801a78c:	f842 9003 	str.w	r9, [r2, r3]
 801a790:	2101      	movs	r1, #1
 801a792:	f000 faf5 	bl	801ad80 <uxr_seq_num_add>
 801a796:	3601      	adds	r6, #1
 801a798:	42ae      	cmp	r6, r5
 801a79a:	4607      	mov	r7, r0
 801a79c:	d1cb      	bne.n	801a736 <uxr_prepare_reliable_buffer_to_write+0xee>
 801a79e:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801a7a2:	9d05      	ldr	r5, [sp, #20]
 801a7a4:	8920      	ldrh	r0, [r4, #8]
 801a7a6:	fbb7 f1f0 	udiv	r1, r7, r0
 801a7aa:	fb00 7111 	mls	r1, r0, r1, r7
 801a7ae:	b289      	uxth	r1, r1
 801a7b0:	6863      	ldr	r3, [r4, #4]
 801a7b2:	fbb3 f3f0 	udiv	r3, r3, r0
 801a7b6:	fb01 f303 	mul.w	r3, r1, r3
 801a7ba:	6821      	ldr	r1, [r4, #0]
 801a7bc:	3304      	adds	r3, #4
 801a7be:	4419      	add	r1, r3
 801a7c0:	464a      	mov	r2, r9
 801a7c2:	f851 0c04 	ldr.w	r0, [r1, #-4]
 801a7c6:	9000      	str	r0, [sp, #0]
 801a7c8:	2300      	movs	r3, #0
 801a7ca:	4640      	mov	r0, r8
 801a7cc:	f7f6 fcc2 	bl	8011154 <ucdr_init_buffer_origin_offset>
 801a7d0:	4640      	mov	r0, r8
 801a7d2:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801a7d6:	2302      	movs	r3, #2
 801a7d8:	fa1f f288 	uxth.w	r2, r8
 801a7dc:	210d      	movs	r1, #13
 801a7de:	f7f8 f94f 	bl	8012a80 <uxr_buffer_submessage_header>
 801a7e2:	8926      	ldrh	r6, [r4, #8]
 801a7e4:	9b03      	ldr	r3, [sp, #12]
 801a7e6:	7b20      	ldrb	r0, [r4, #12]
 801a7e8:	f1a5 0208 	sub.w	r2, r5, #8
 801a7ec:	f10a 0104 	add.w	r1, sl, #4
 801a7f0:	fbb7 f5f6 	udiv	r5, r7, r6
 801a7f4:	fb06 7515 	mls	r5, r6, r5, r7
 801a7f8:	440b      	add	r3, r1
 801a7fa:	b2ad      	uxth	r5, r5
 801a7fc:	4619      	mov	r1, r3
 801a7fe:	3004      	adds	r0, #4
 801a800:	6863      	ldr	r3, [r4, #4]
 801a802:	fbb3 f3f6 	udiv	r3, r3, r6
 801a806:	fb05 f303 	mul.w	r3, r5, r3
 801a80a:	6825      	ldr	r5, [r4, #0]
 801a80c:	4440      	add	r0, r8
 801a80e:	50e8      	str	r0, [r5, r3]
 801a810:	9d04      	ldr	r5, [sp, #16]
 801a812:	eba2 020a 	sub.w	r2, r2, sl
 801a816:	4628      	mov	r0, r5
 801a818:	f7f6 fcae 	bl	8011178 <ucdr_init_buffer>
 801a81c:	493c      	ldr	r1, [pc, #240]	@ (801a910 <uxr_prepare_reliable_buffer_to_write+0x2c8>)
 801a81e:	4622      	mov	r2, r4
 801a820:	4628      	mov	r0, r5
 801a822:	f7f6 fc7d 	bl	8011120 <ucdr_set_on_full_buffer_callback>
 801a826:	81e7      	strh	r7, [r4, #14]
 801a828:	2001      	movs	r0, #1
 801a82a:	e00f      	b.n	801a84c <uxr_prepare_reliable_buffer_to_write+0x204>
 801a82c:	2101      	movs	r1, #1
 801a82e:	89e0      	ldrh	r0, [r4, #14]
 801a830:	f000 faa6 	bl	801ad80 <uxr_seq_num_add>
 801a834:	8921      	ldrh	r1, [r4, #8]
 801a836:	4605      	mov	r5, r0
 801a838:	8a60      	ldrh	r0, [r4, #18]
 801a83a:	f000 faa1 	bl	801ad80 <uxr_seq_num_add>
 801a83e:	4601      	mov	r1, r0
 801a840:	4628      	mov	r0, r5
 801a842:	f000 faa5 	bl	801ad90 <uxr_seq_num_cmp>
 801a846:	2800      	cmp	r0, #0
 801a848:	dd45      	ble.n	801a8d6 <uxr_prepare_reliable_buffer_to_write+0x28e>
 801a84a:	2000      	movs	r0, #0
 801a84c:	b011      	add	sp, #68	@ 0x44
 801a84e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a852:	8921      	ldrh	r1, [r4, #8]
 801a854:	8a60      	ldrh	r0, [r4, #18]
 801a856:	9205      	str	r2, [sp, #20]
 801a858:	f000 fa92 	bl	801ad80 <uxr_seq_num_add>
 801a85c:	4601      	mov	r1, r0
 801a85e:	4638      	mov	r0, r7
 801a860:	f000 fa96 	bl	801ad90 <uxr_seq_num_cmp>
 801a864:	2800      	cmp	r0, #0
 801a866:	9a05      	ldr	r2, [sp, #20]
 801a868:	dcef      	bgt.n	801a84a <uxr_prepare_reliable_buffer_to_write+0x202>
 801a86a:	8926      	ldrh	r6, [r4, #8]
 801a86c:	fbb7 f5f6 	udiv	r5, r7, r6
 801a870:	fb06 7515 	mls	r5, r6, r5, r7
 801a874:	b2ad      	uxth	r5, r5
 801a876:	6863      	ldr	r3, [r4, #4]
 801a878:	6824      	ldr	r4, [r4, #0]
 801a87a:	fbb3 f3f6 	udiv	r3, r3, r6
 801a87e:	fb05 f303 	mul.w	r3, r5, r3
 801a882:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 801a886:	50e2      	str	r2, [r4, r3]
 801a888:	2300      	movs	r3, #0
 801a88a:	f8cd a000 	str.w	sl, [sp]
 801a88e:	f7f6 fc61 	bl	8011154 <ucdr_init_buffer_origin_offset>
 801a892:	e7c9      	b.n	801a828 <uxr_prepare_reliable_buffer_to_write+0x1e0>
 801a894:	f10c 0c01 	add.w	ip, ip, #1
 801a898:	fa1f fc8c 	uxth.w	ip, ip
 801a89c:	45b4      	cmp	ip, r6
 801a89e:	9306      	str	r3, [sp, #24]
 801a8a0:	d8d3      	bhi.n	801a84a <uxr_prepare_reliable_buffer_to_write+0x202>
 801a8a2:	e739      	b.n	801a718 <uxr_prepare_reliable_buffer_to_write+0xd0>
 801a8a4:	4638      	mov	r0, r7
 801a8a6:	2101      	movs	r1, #1
 801a8a8:	9307      	str	r3, [sp, #28]
 801a8aa:	f000 fa69 	bl	801ad80 <uxr_seq_num_add>
 801a8ae:	8921      	ldrh	r1, [r4, #8]
 801a8b0:	6862      	ldr	r2, [r4, #4]
 801a8b2:	4607      	mov	r7, r0
 801a8b4:	fbb0 f0f1 	udiv	r0, r0, r1
 801a8b8:	fb01 7010 	mls	r0, r1, r0, r7
 801a8bc:	b280      	uxth	r0, r0
 801a8be:	fbb2 f1f1 	udiv	r1, r2, r1
 801a8c2:	6822      	ldr	r2, [r4, #0]
 801a8c4:	fb00 f101 	mul.w	r1, r0, r1
 801a8c8:	3104      	adds	r1, #4
 801a8ca:	1853      	adds	r3, r2, r1
 801a8cc:	9303      	str	r3, [sp, #12]
 801a8ce:	f853 ac04 	ldr.w	sl, [r3, #-4]
 801a8d2:	9b07      	ldr	r3, [sp, #28]
 801a8d4:	e70b      	b.n	801a6ee <uxr_prepare_reliable_buffer_to_write+0xa6>
 801a8d6:	8921      	ldrh	r1, [r4, #8]
 801a8d8:	fbb5 f2f1 	udiv	r2, r5, r1
 801a8dc:	fb01 5212 	mls	r2, r1, r2, r5
 801a8e0:	b292      	uxth	r2, r2
 801a8e2:	6863      	ldr	r3, [r4, #4]
 801a8e4:	fbb3 f3f1 	udiv	r3, r3, r1
 801a8e8:	6821      	ldr	r1, [r4, #0]
 801a8ea:	9804      	ldr	r0, [sp, #16]
 801a8ec:	fb02 f303 	mul.w	r3, r2, r3
 801a8f0:	3304      	adds	r3, #4
 801a8f2:	7b22      	ldrb	r2, [r4, #12]
 801a8f4:	4419      	add	r1, r3
 801a8f6:	4442      	add	r2, r8
 801a8f8:	f841 2c04 	str.w	r2, [r1, #-4]
 801a8fc:	7b23      	ldrb	r3, [r4, #12]
 801a8fe:	9300      	str	r3, [sp, #0]
 801a900:	2300      	movs	r3, #0
 801a902:	f7f6 fc27 	bl	8011154 <ucdr_init_buffer_origin_offset>
 801a906:	81e5      	strh	r5, [r4, #14]
 801a908:	e78e      	b.n	801a828 <uxr_prepare_reliable_buffer_to_write+0x1e0>
 801a90a:	4606      	mov	r6, r0
 801a90c:	e6cc      	b.n	801a6a8 <uxr_prepare_reliable_buffer_to_write+0x60>
 801a90e:	bf00      	nop
 801a910:	0801a52d 	.word	0x0801a52d

0801a914 <uxr_prepare_next_reliable_buffer_to_send>:
 801a914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a916:	4604      	mov	r4, r0
 801a918:	460f      	mov	r7, r1
 801a91a:	8a00      	ldrh	r0, [r0, #16]
 801a91c:	2101      	movs	r1, #1
 801a91e:	4615      	mov	r5, r2
 801a920:	461e      	mov	r6, r3
 801a922:	f000 fa2d 	bl	801ad80 <uxr_seq_num_add>
 801a926:	8030      	strh	r0, [r6, #0]
 801a928:	8922      	ldrh	r2, [r4, #8]
 801a92a:	fbb0 f3f2 	udiv	r3, r0, r2
 801a92e:	fb02 0c13 	mls	ip, r2, r3, r0
 801a932:	fa1f fc8c 	uxth.w	ip, ip
 801a936:	6863      	ldr	r3, [r4, #4]
 801a938:	fbb3 f3f2 	udiv	r3, r3, r2
 801a93c:	fb0c fc03 	mul.w	ip, ip, r3
 801a940:	6823      	ldr	r3, [r4, #0]
 801a942:	89e1      	ldrh	r1, [r4, #14]
 801a944:	f10c 0c04 	add.w	ip, ip, #4
 801a948:	4463      	add	r3, ip
 801a94a:	603b      	str	r3, [r7, #0]
 801a94c:	6823      	ldr	r3, [r4, #0]
 801a94e:	4463      	add	r3, ip
 801a950:	f853 3c04 	ldr.w	r3, [r3, #-4]
 801a954:	602b      	str	r3, [r5, #0]
 801a956:	f000 fa1b 	bl	801ad90 <uxr_seq_num_cmp>
 801a95a:	2800      	cmp	r0, #0
 801a95c:	dd01      	ble.n	801a962 <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 801a95e:	2000      	movs	r0, #0
 801a960:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a962:	7b23      	ldrb	r3, [r4, #12]
 801a964:	682a      	ldr	r2, [r5, #0]
 801a966:	429a      	cmp	r2, r3
 801a968:	d9f9      	bls.n	801a95e <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801a96a:	8a61      	ldrh	r1, [r4, #18]
 801a96c:	8a20      	ldrh	r0, [r4, #16]
 801a96e:	f000 fa0b 	bl	801ad88 <uxr_seq_num_sub>
 801a972:	8923      	ldrh	r3, [r4, #8]
 801a974:	4283      	cmp	r3, r0
 801a976:	d0f2      	beq.n	801a95e <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801a978:	8830      	ldrh	r0, [r6, #0]
 801a97a:	89e3      	ldrh	r3, [r4, #14]
 801a97c:	8220      	strh	r0, [r4, #16]
 801a97e:	4298      	cmp	r0, r3
 801a980:	d001      	beq.n	801a986 <uxr_prepare_next_reliable_buffer_to_send+0x72>
 801a982:	2001      	movs	r0, #1
 801a984:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a986:	2101      	movs	r1, #1
 801a988:	f000 f9fa 	bl	801ad80 <uxr_seq_num_add>
 801a98c:	81e0      	strh	r0, [r4, #14]
 801a98e:	e7f8      	b.n	801a982 <uxr_prepare_next_reliable_buffer_to_send+0x6e>

0801a990 <uxr_update_output_stream_heartbeat_timestamp>:
 801a990:	b570      	push	{r4, r5, r6, lr}
 801a992:	8a01      	ldrh	r1, [r0, #16]
 801a994:	4604      	mov	r4, r0
 801a996:	8a40      	ldrh	r0, [r0, #18]
 801a998:	4615      	mov	r5, r2
 801a99a:	461e      	mov	r6, r3
 801a99c:	f000 f9f8 	bl	801ad90 <uxr_seq_num_cmp>
 801a9a0:	2800      	cmp	r0, #0
 801a9a2:	db07      	blt.n	801a9b4 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 801a9a4:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 801a9a8:	f06f 4600 	mvn.w	r6, #2147483648	@ 0x80000000
 801a9ac:	e9c4 5606 	strd	r5, r6, [r4, #24]
 801a9b0:	2000      	movs	r0, #0
 801a9b2:	bd70      	pop	{r4, r5, r6, pc}
 801a9b4:	f894 3020 	ldrb.w	r3, [r4, #32]
 801a9b8:	b953      	cbnz	r3, 801a9d0 <uxr_update_output_stream_heartbeat_timestamp+0x40>
 801a9ba:	2301      	movs	r3, #1
 801a9bc:	f884 3020 	strb.w	r3, [r4, #32]
 801a9c0:	3564      	adds	r5, #100	@ 0x64
 801a9c2:	f04f 0000 	mov.w	r0, #0
 801a9c6:	f146 0600 	adc.w	r6, r6, #0
 801a9ca:	e9c4 5606 	strd	r5, r6, [r4, #24]
 801a9ce:	bd70      	pop	{r4, r5, r6, pc}
 801a9d0:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801a9d4:	428d      	cmp	r5, r1
 801a9d6:	eb76 0202 	sbcs.w	r2, r6, r2
 801a9da:	dbf1      	blt.n	801a9c0 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 801a9dc:	3301      	adds	r3, #1
 801a9de:	3564      	adds	r5, #100	@ 0x64
 801a9e0:	f884 3020 	strb.w	r3, [r4, #32]
 801a9e4:	f04f 0001 	mov.w	r0, #1
 801a9e8:	f146 0600 	adc.w	r6, r6, #0
 801a9ec:	e7ed      	b.n	801a9ca <uxr_update_output_stream_heartbeat_timestamp+0x3a>
 801a9ee:	bf00      	nop

0801a9f0 <uxr_begin_output_nack_buffer_it>:
 801a9f0:	8a40      	ldrh	r0, [r0, #18]
 801a9f2:	4770      	bx	lr

0801a9f4 <uxr_next_reliable_nack_buffer_to_send>:
 801a9f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a9f8:	f890 8021 	ldrb.w	r8, [r0, #33]	@ 0x21
 801a9fc:	f1b8 0f00 	cmp.w	r8, #0
 801aa00:	d104      	bne.n	801aa0c <uxr_next_reliable_nack_buffer_to_send+0x18>
 801aa02:	f04f 0800 	mov.w	r8, #0
 801aa06:	4640      	mov	r0, r8
 801aa08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801aa0c:	4604      	mov	r4, r0
 801aa0e:	460e      	mov	r6, r1
 801aa10:	8818      	ldrh	r0, [r3, #0]
 801aa12:	4617      	mov	r7, r2
 801aa14:	461d      	mov	r5, r3
 801aa16:	e019      	b.n	801aa4c <uxr_next_reliable_nack_buffer_to_send+0x58>
 801aa18:	8921      	ldrh	r1, [r4, #8]
 801aa1a:	8828      	ldrh	r0, [r5, #0]
 801aa1c:	fbb0 fcf1 	udiv	ip, r0, r1
 801aa20:	e9d4 3200 	ldrd	r3, r2, [r4]
 801aa24:	fb01 0c1c 	mls	ip, r1, ip, r0
 801aa28:	fa1f fc8c 	uxth.w	ip, ip
 801aa2c:	fbb2 f2f1 	udiv	r2, r2, r1
 801aa30:	fb02 fc0c 	mul.w	ip, r2, ip
 801aa34:	f10c 0c04 	add.w	ip, ip, #4
 801aa38:	4463      	add	r3, ip
 801aa3a:	6033      	str	r3, [r6, #0]
 801aa3c:	6823      	ldr	r3, [r4, #0]
 801aa3e:	4463      	add	r3, ip
 801aa40:	f853 3c04 	ldr.w	r3, [r3, #-4]
 801aa44:	603b      	str	r3, [r7, #0]
 801aa46:	7b22      	ldrb	r2, [r4, #12]
 801aa48:	429a      	cmp	r2, r3
 801aa4a:	d1dc      	bne.n	801aa06 <uxr_next_reliable_nack_buffer_to_send+0x12>
 801aa4c:	2101      	movs	r1, #1
 801aa4e:	f000 f997 	bl	801ad80 <uxr_seq_num_add>
 801aa52:	8028      	strh	r0, [r5, #0]
 801aa54:	8a21      	ldrh	r1, [r4, #16]
 801aa56:	f000 f99b 	bl	801ad90 <uxr_seq_num_cmp>
 801aa5a:	2800      	cmp	r0, #0
 801aa5c:	dddc      	ble.n	801aa18 <uxr_next_reliable_nack_buffer_to_send+0x24>
 801aa5e:	2300      	movs	r3, #0
 801aa60:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
 801aa64:	e7cd      	b.n	801aa02 <uxr_next_reliable_nack_buffer_to_send+0xe>
 801aa66:	bf00      	nop

0801aa68 <uxr_process_acknack>:
 801aa68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aa6a:	4604      	mov	r4, r0
 801aa6c:	460e      	mov	r6, r1
 801aa6e:	4610      	mov	r0, r2
 801aa70:	2101      	movs	r1, #1
 801aa72:	f000 f989 	bl	801ad88 <uxr_seq_num_sub>
 801aa76:	8a61      	ldrh	r1, [r4, #18]
 801aa78:	f000 f986 	bl	801ad88 <uxr_seq_num_sub>
 801aa7c:	b1c0      	cbz	r0, 801aab0 <uxr_process_acknack+0x48>
 801aa7e:	4605      	mov	r5, r0
 801aa80:	2700      	movs	r7, #0
 801aa82:	2101      	movs	r1, #1
 801aa84:	8a60      	ldrh	r0, [r4, #18]
 801aa86:	f000 f97b 	bl	801ad80 <uxr_seq_num_add>
 801aa8a:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801aa8e:	fbb0 f1fc 	udiv	r1, r0, ip
 801aa92:	e9d4 2300 	ldrd	r2, r3, [r4]
 801aa96:	fb0c 0111 	mls	r1, ip, r1, r0
 801aa9a:	b289      	uxth	r1, r1
 801aa9c:	3701      	adds	r7, #1
 801aa9e:	fbb3 f3fc 	udiv	r3, r3, ip
 801aaa2:	fb01 f303 	mul.w	r3, r1, r3
 801aaa6:	42bd      	cmp	r5, r7
 801aaa8:	7b21      	ldrb	r1, [r4, #12]
 801aaaa:	8260      	strh	r0, [r4, #18]
 801aaac:	50d1      	str	r1, [r2, r3]
 801aaae:	d1e8      	bne.n	801aa82 <uxr_process_acknack+0x1a>
 801aab0:	3e00      	subs	r6, #0
 801aab2:	f04f 0300 	mov.w	r3, #0
 801aab6:	bf18      	it	ne
 801aab8:	2601      	movne	r6, #1
 801aaba:	f884 3020 	strb.w	r3, [r4, #32]
 801aabe:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 801aac2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801aac4 <uxr_is_output_up_to_date>:
 801aac4:	8a01      	ldrh	r1, [r0, #16]
 801aac6:	8a40      	ldrh	r0, [r0, #18]
 801aac8:	b508      	push	{r3, lr}
 801aaca:	f000 f961 	bl	801ad90 <uxr_seq_num_cmp>
 801aace:	fab0 f080 	clz	r0, r0
 801aad2:	0940      	lsrs	r0, r0, #5
 801aad4:	bd08      	pop	{r3, pc}
 801aad6:	bf00      	nop

0801aad8 <get_available_free_slots>:
 801aad8:	8901      	ldrh	r1, [r0, #8]
 801aada:	b1c1      	cbz	r1, 801ab0e <get_available_free_slots+0x36>
 801aadc:	b530      	push	{r4, r5, lr}
 801aade:	2200      	movs	r2, #0
 801aae0:	6843      	ldr	r3, [r0, #4]
 801aae2:	6805      	ldr	r5, [r0, #0]
 801aae4:	7b04      	ldrb	r4, [r0, #12]
 801aae6:	fbb3 fef1 	udiv	lr, r3, r1
 801aaea:	4610      	mov	r0, r2
 801aaec:	b293      	uxth	r3, r2
 801aaee:	fbb3 fcf1 	udiv	ip, r3, r1
 801aaf2:	fb01 331c 	mls	r3, r1, ip, r3
 801aaf6:	b29b      	uxth	r3, r3
 801aaf8:	fb0e f303 	mul.w	r3, lr, r3
 801aafc:	3201      	adds	r2, #1
 801aafe:	58eb      	ldr	r3, [r5, r3]
 801ab00:	429c      	cmp	r4, r3
 801ab02:	bf04      	itt	eq
 801ab04:	3001      	addeq	r0, #1
 801ab06:	b280      	uxtheq	r0, r0
 801ab08:	4291      	cmp	r1, r2
 801ab0a:	d1ef      	bne.n	801aaec <get_available_free_slots+0x14>
 801ab0c:	bd30      	pop	{r4, r5, pc}
 801ab0e:	4608      	mov	r0, r1
 801ab10:	4770      	bx	lr
 801ab12:	bf00      	nop

0801ab14 <uxr_buffer_request_data>:
 801ab14:	b530      	push	{r4, r5, lr}
 801ab16:	b095      	sub	sp, #84	@ 0x54
 801ab18:	e9cd 2104 	strd	r2, r1, [sp, #16]
 801ab1c:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 801ab1e:	f88d 301c 	strb.w	r3, [sp, #28]
 801ab22:	2200      	movs	r2, #0
 801ab24:	2d00      	cmp	r5, #0
 801ab26:	bf14      	ite	ne
 801ab28:	2101      	movne	r1, #1
 801ab2a:	4611      	moveq	r1, r2
 801ab2c:	4604      	mov	r4, r0
 801ab2e:	f88d 201d 	strb.w	r2, [sp, #29]
 801ab32:	f88d 201e 	strb.w	r2, [sp, #30]
 801ab36:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 801ab3a:	d021      	beq.n	801ab80 <uxr_buffer_request_data+0x6c>
 801ab3c:	682a      	ldr	r2, [r5, #0]
 801ab3e:	686b      	ldr	r3, [r5, #4]
 801ab40:	f8cd 2026 	str.w	r2, [sp, #38]	@ 0x26
 801ab44:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 801ab48:	2210      	movs	r2, #16
 801ab4a:	2308      	movs	r3, #8
 801ab4c:	2100      	movs	r1, #0
 801ab4e:	e9cd 3100 	strd	r3, r1, [sp]
 801ab52:	4620      	mov	r0, r4
 801ab54:	9905      	ldr	r1, [sp, #20]
 801ab56:	ab0c      	add	r3, sp, #48	@ 0x30
 801ab58:	f7f7 fd0e 	bl	8012578 <uxr_prepare_stream_to_write_submessage>
 801ab5c:	b918      	cbnz	r0, 801ab66 <uxr_buffer_request_data+0x52>
 801ab5e:	4604      	mov	r4, r0
 801ab60:	4620      	mov	r0, r4
 801ab62:	b015      	add	sp, #84	@ 0x54
 801ab64:	bd30      	pop	{r4, r5, pc}
 801ab66:	9904      	ldr	r1, [sp, #16]
 801ab68:	aa06      	add	r2, sp, #24
 801ab6a:	4620      	mov	r0, r4
 801ab6c:	f7f7 fe3e 	bl	80127ec <uxr_init_base_object_request>
 801ab70:	a906      	add	r1, sp, #24
 801ab72:	4604      	mov	r4, r0
 801ab74:	a80c      	add	r0, sp, #48	@ 0x30
 801ab76:	f7f9 f925 	bl	8013dc4 <uxr_serialize_READ_DATA_Payload>
 801ab7a:	4620      	mov	r0, r4
 801ab7c:	b015      	add	sp, #84	@ 0x54
 801ab7e:	bd30      	pop	{r4, r5, pc}
 801ab80:	2208      	movs	r2, #8
 801ab82:	e7e2      	b.n	801ab4a <uxr_buffer_request_data+0x36>

0801ab84 <uxr_buffer_cancel_data>:
 801ab84:	b510      	push	{r4, lr}
 801ab86:	b094      	sub	sp, #80	@ 0x50
 801ab88:	2300      	movs	r3, #0
 801ab8a:	9301      	str	r3, [sp, #4]
 801ab8c:	9205      	str	r2, [sp, #20]
 801ab8e:	f8ad 301c 	strh.w	r3, [sp, #28]
 801ab92:	2201      	movs	r2, #1
 801ab94:	f88d 301e 	strb.w	r3, [sp, #30]
 801ab98:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 801ab9c:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 801aba0:	2308      	movs	r3, #8
 801aba2:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 801aba6:	9300      	str	r3, [sp, #0]
 801aba8:	2210      	movs	r2, #16
 801abaa:	ab0c      	add	r3, sp, #48	@ 0x30
 801abac:	4604      	mov	r4, r0
 801abae:	f7f7 fce3 	bl	8012578 <uxr_prepare_stream_to_write_submessage>
 801abb2:	b918      	cbnz	r0, 801abbc <uxr_buffer_cancel_data+0x38>
 801abb4:	4604      	mov	r4, r0
 801abb6:	4620      	mov	r0, r4
 801abb8:	b014      	add	sp, #80	@ 0x50
 801abba:	bd10      	pop	{r4, pc}
 801abbc:	9905      	ldr	r1, [sp, #20]
 801abbe:	aa06      	add	r2, sp, #24
 801abc0:	4620      	mov	r0, r4
 801abc2:	f7f7 fe13 	bl	80127ec <uxr_init_base_object_request>
 801abc6:	a906      	add	r1, sp, #24
 801abc8:	4604      	mov	r4, r0
 801abca:	a80c      	add	r0, sp, #48	@ 0x30
 801abcc:	f7f9 f8fa 	bl	8013dc4 <uxr_serialize_READ_DATA_Payload>
 801abd0:	4620      	mov	r0, r4
 801abd2:	b014      	add	sp, #80	@ 0x50
 801abd4:	bd10      	pop	{r4, pc}
 801abd6:	bf00      	nop

0801abd8 <read_submessage_format>:
 801abd8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801abdc:	b095      	sub	sp, #84	@ 0x54
 801abde:	f8bd 7078 	ldrh.w	r7, [sp, #120]	@ 0x78
 801abe2:	b113      	cbz	r3, 801abea <read_submessage_format+0x12>
 801abe4:	b015      	add	sp, #84	@ 0x54
 801abe6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801abea:	460c      	mov	r4, r1
 801abec:	4616      	mov	r6, r2
 801abee:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 801abf2:	461d      	mov	r5, r3
 801abf4:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801abf6:	9304      	str	r3, [sp, #16]
 801abf8:	1a52      	subs	r2, r2, r1
 801abfa:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801abfc:	9305      	str	r3, [sp, #20]
 801abfe:	4680      	mov	r8, r0
 801ac00:	a80c      	add	r0, sp, #48	@ 0x30
 801ac02:	f89d 9076 	ldrb.w	r9, [sp, #118]	@ 0x76
 801ac06:	f7f6 fab7 	bl	8011178 <ucdr_init_buffer>
 801ac0a:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801ac0e:	a80c      	add	r0, sp, #48	@ 0x30
 801ac10:	f7f6 fa86 	bl	8011120 <ucdr_set_on_full_buffer_callback>
 801ac14:	69e3      	ldr	r3, [r4, #28]
 801ac16:	b35b      	cbz	r3, 801ac70 <read_submessage_format+0x98>
 801ac18:	f1b9 0f07 	cmp.w	r9, #7
 801ac1c:	751d      	strb	r5, [r3, #20]
 801ac1e:	d043      	beq.n	801aca8 <read_submessage_format+0xd0>
 801ac20:	f1b9 0f08 	cmp.w	r9, #8
 801ac24:	d032      	beq.n	801ac8c <read_submessage_format+0xb4>
 801ac26:	f1b9 0f06 	cmp.w	r9, #6
 801ac2a:	d008      	beq.n	801ac3e <read_submessage_format+0x66>
 801ac2c:	2201      	movs	r2, #1
 801ac2e:	751a      	strb	r2, [r3, #20]
 801ac30:	4631      	mov	r1, r6
 801ac32:	4620      	mov	r0, r4
 801ac34:	f7f6 faf0 	bl	8011218 <ucdr_advance_buffer>
 801ac38:	b015      	add	sp, #84	@ 0x54
 801ac3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ac3e:	f8d8 5088 	ldr.w	r5, [r8, #136]	@ 0x88
 801ac42:	2d00      	cmp	r5, #0
 801ac44:	d0f2      	beq.n	801ac2c <read_submessage_format+0x54>
 801ac46:	ab0c      	add	r3, sp, #48	@ 0x30
 801ac48:	e9cd 3600 	strd	r3, r6, [sp]
 801ac4c:	2306      	movs	r3, #6
 801ac4e:	f88d 3016 	strb.w	r3, [sp, #22]
 801ac52:	f8d8 308c 	ldr.w	r3, [r8, #140]	@ 0x8c
 801ac56:	9302      	str	r3, [sp, #8]
 801ac58:	463a      	mov	r2, r7
 801ac5a:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 801ac5e:	4640      	mov	r0, r8
 801ac60:	47a8      	blx	r5
 801ac62:	69e3      	ldr	r3, [r4, #28]
 801ac64:	2201      	movs	r2, #1
 801ac66:	f888 20b4 	strb.w	r2, [r8, #180]	@ 0xb4
 801ac6a:	2b00      	cmp	r3, #0
 801ac6c:	d1de      	bne.n	801ac2c <read_submessage_format+0x54>
 801ac6e:	e7df      	b.n	801ac30 <read_submessage_format+0x58>
 801ac70:	f1b9 0f07 	cmp.w	r9, #7
 801ac74:	d032      	beq.n	801acdc <read_submessage_format+0x104>
 801ac76:	f1b9 0f08 	cmp.w	r9, #8
 801ac7a:	d02a      	beq.n	801acd2 <read_submessage_format+0xfa>
 801ac7c:	f1b9 0f06 	cmp.w	r9, #6
 801ac80:	d1d6      	bne.n	801ac30 <read_submessage_format+0x58>
 801ac82:	f8d8 5088 	ldr.w	r5, [r8, #136]	@ 0x88
 801ac86:	2d00      	cmp	r5, #0
 801ac88:	d1dd      	bne.n	801ac46 <read_submessage_format+0x6e>
 801ac8a:	e7d1      	b.n	801ac30 <read_submessage_format+0x58>
 801ac8c:	f8d8 20a4 	ldr.w	r2, [r8, #164]	@ 0xa4
 801ac90:	2a00      	cmp	r2, #0
 801ac92:	d0cb      	beq.n	801ac2c <read_submessage_format+0x54>
 801ac94:	a906      	add	r1, sp, #24
 801ac96:	a80c      	add	r0, sp, #48	@ 0x30
 801ac98:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 801ac9a:	f7f9 f959 	bl	8013f50 <uxr_deserialize_SampleIdentity>
 801ac9e:	bb28      	cbnz	r0, 801acec <read_submessage_format+0x114>
 801aca0:	69e3      	ldr	r3, [r4, #28]
 801aca2:	2b00      	cmp	r3, #0
 801aca4:	d1c2      	bne.n	801ac2c <read_submessage_format+0x54>
 801aca6:	e7c3      	b.n	801ac30 <read_submessage_format+0x58>
 801aca8:	f8d8 20ac 	ldr.w	r2, [r8, #172]	@ 0xac
 801acac:	b16a      	cbz	r2, 801acca <read_submessage_format+0xf2>
 801acae:	a906      	add	r1, sp, #24
 801acb0:	a80c      	add	r0, sp, #48	@ 0x30
 801acb2:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 801acb4:	f7f8 fe3a 	bl	801392c <uxr_deserialize_BaseObjectRequest>
 801acb8:	2800      	cmp	r0, #0
 801acba:	d13a      	bne.n	801ad32 <read_submessage_format+0x15a>
 801acbc:	68a2      	ldr	r2, [r4, #8]
 801acbe:	69e3      	ldr	r3, [r4, #28]
 801acc0:	4432      	add	r2, r6
 801acc2:	60a2      	str	r2, [r4, #8]
 801acc4:	2b00      	cmp	r3, #0
 801acc6:	d1b1      	bne.n	801ac2c <read_submessage_format+0x54>
 801acc8:	e7b2      	b.n	801ac30 <read_submessage_format+0x58>
 801acca:	68a2      	ldr	r2, [r4, #8]
 801accc:	4432      	add	r2, r6
 801acce:	60a2      	str	r2, [r4, #8]
 801acd0:	e7ac      	b.n	801ac2c <read_submessage_format+0x54>
 801acd2:	f8d8 30a4 	ldr.w	r3, [r8, #164]	@ 0xa4
 801acd6:	2b00      	cmp	r3, #0
 801acd8:	d1dc      	bne.n	801ac94 <read_submessage_format+0xbc>
 801acda:	e7a9      	b.n	801ac30 <read_submessage_format+0x58>
 801acdc:	f8d8 30ac 	ldr.w	r3, [r8, #172]	@ 0xac
 801ace0:	2b00      	cmp	r3, #0
 801ace2:	d1e4      	bne.n	801acae <read_submessage_format+0xd6>
 801ace4:	68a3      	ldr	r3, [r4, #8]
 801ace6:	4433      	add	r3, r6
 801ace8:	60a3      	str	r3, [r4, #8]
 801acea:	e7a1      	b.n	801ac30 <read_submessage_format+0x58>
 801acec:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 801acf0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801acf2:	1a52      	subs	r2, r2, r1
 801acf4:	1aed      	subs	r5, r5, r3
 801acf6:	a80c      	add	r0, sp, #48	@ 0x30
 801acf8:	f7f6 fa3e 	bl	8011178 <ucdr_init_buffer>
 801acfc:	4435      	add	r5, r6
 801acfe:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801ad02:	a80c      	add	r0, sp, #48	@ 0x30
 801ad04:	f7f6 fa0c 	bl	8011120 <ucdr_set_on_full_buffer_callback>
 801ad08:	b2ad      	uxth	r5, r5
 801ad0a:	ab0c      	add	r3, sp, #48	@ 0x30
 801ad0c:	9300      	str	r3, [sp, #0]
 801ad0e:	9501      	str	r5, [sp, #4]
 801ad10:	2108      	movs	r1, #8
 801ad12:	f88d 1016 	strb.w	r1, [sp, #22]
 801ad16:	f8d8 10a8 	ldr.w	r1, [r8, #168]	@ 0xa8
 801ad1a:	9102      	str	r1, [sp, #8]
 801ad1c:	ab06      	add	r3, sp, #24
 801ad1e:	f8d8 50a4 	ldr.w	r5, [r8, #164]	@ 0xa4
 801ad22:	9905      	ldr	r1, [sp, #20]
 801ad24:	463a      	mov	r2, r7
 801ad26:	4640      	mov	r0, r8
 801ad28:	47a8      	blx	r5
 801ad2a:	2301      	movs	r3, #1
 801ad2c:	f888 30b4 	strb.w	r3, [r8, #180]	@ 0xb4
 801ad30:	e7b6      	b.n	801aca0 <read_submessage_format+0xc8>
 801ad32:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 801ad36:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801ad38:	1a52      	subs	r2, r2, r1
 801ad3a:	1aed      	subs	r5, r5, r3
 801ad3c:	a80c      	add	r0, sp, #48	@ 0x30
 801ad3e:	f7f6 fa1b 	bl	8011178 <ucdr_init_buffer>
 801ad42:	4435      	add	r5, r6
 801ad44:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801ad48:	a80c      	add	r0, sp, #48	@ 0x30
 801ad4a:	f7f6 f9e9 	bl	8011120 <ucdr_set_on_full_buffer_callback>
 801ad4e:	b2ad      	uxth	r5, r5
 801ad50:	ab0c      	add	r3, sp, #48	@ 0x30
 801ad52:	9300      	str	r3, [sp, #0]
 801ad54:	9501      	str	r5, [sp, #4]
 801ad56:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 801ad5a:	2107      	movs	r1, #7
 801ad5c:	f88d 1016 	strb.w	r1, [sp, #22]
 801ad60:	f8d8 10b0 	ldr.w	r1, [r8, #176]	@ 0xb0
 801ad64:	9102      	str	r1, [sp, #8]
 801ad66:	ba5b      	rev16	r3, r3
 801ad68:	b29b      	uxth	r3, r3
 801ad6a:	f8d8 50ac 	ldr.w	r5, [r8, #172]	@ 0xac
 801ad6e:	9905      	ldr	r1, [sp, #20]
 801ad70:	463a      	mov	r2, r7
 801ad72:	4640      	mov	r0, r8
 801ad74:	47a8      	blx	r5
 801ad76:	2301      	movs	r3, #1
 801ad78:	f888 30b4 	strb.w	r3, [r8, #180]	@ 0xb4
 801ad7c:	e79e      	b.n	801acbc <read_submessage_format+0xe4>
 801ad7e:	bf00      	nop

0801ad80 <uxr_seq_num_add>:
 801ad80:	4408      	add	r0, r1
 801ad82:	b280      	uxth	r0, r0
 801ad84:	4770      	bx	lr
 801ad86:	bf00      	nop

0801ad88 <uxr_seq_num_sub>:
 801ad88:	1a40      	subs	r0, r0, r1
 801ad8a:	b280      	uxth	r0, r0
 801ad8c:	4770      	bx	lr
 801ad8e:	bf00      	nop

0801ad90 <uxr_seq_num_cmp>:
 801ad90:	4288      	cmp	r0, r1
 801ad92:	d010      	beq.n	801adb6 <uxr_seq_num_cmp+0x26>
 801ad94:	d207      	bcs.n	801ada6 <uxr_seq_num_cmp+0x16>
 801ad96:	1a09      	subs	r1, r1, r0
 801ad98:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 801ad9c:	bfb4      	ite	lt
 801ad9e:	f04f 30ff 	movlt.w	r0, #4294967295	@ 0xffffffff
 801ada2:	2001      	movge	r0, #1
 801ada4:	4770      	bx	lr
 801ada6:	1a41      	subs	r1, r0, r1
 801ada8:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 801adac:	bfcc      	ite	gt
 801adae:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 801adb2:	2001      	movle	r0, #1
 801adb4:	4770      	bx	lr
 801adb6:	2000      	movs	r0, #0
 801adb8:	4770      	bx	lr
 801adba:	bf00      	nop

0801adbc <uxr_init_framing_io>:
 801adbc:	2300      	movs	r3, #0
 801adbe:	7041      	strb	r1, [r0, #1]
 801adc0:	7003      	strb	r3, [r0, #0]
 801adc2:	8583      	strh	r3, [r0, #44]	@ 0x2c
 801adc4:	4770      	bx	lr
 801adc6:	bf00      	nop

0801adc8 <uxr_write_framed_msg>:
 801adc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801adcc:	f890 c001 	ldrb.w	ip, [r0, #1]
 801add0:	4617      	mov	r7, r2
 801add2:	227e      	movs	r2, #126	@ 0x7e
 801add4:	b085      	sub	sp, #20
 801add6:	f880 2038 	strb.w	r2, [r0, #56]	@ 0x38
 801adda:	f1ac 027d 	sub.w	r2, ip, #125	@ 0x7d
 801adde:	2a01      	cmp	r2, #1
 801ade0:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 801ade4:	f89d 503c 	ldrb.w	r5, [sp, #60]	@ 0x3c
 801ade8:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 801adec:	4604      	mov	r4, r0
 801adee:	460e      	mov	r6, r1
 801adf0:	469a      	mov	sl, r3
 801adf2:	f240 812e 	bls.w	801b052 <uxr_write_framed_msg+0x28a>
 801adf6:	2003      	movs	r0, #3
 801adf8:	2102      	movs	r1, #2
 801adfa:	f04f 0905 	mov.w	r9, #5
 801adfe:	2204      	movs	r2, #4
 801ae00:	4686      	mov	lr, r0
 801ae02:	460b      	mov	r3, r1
 801ae04:	f884 c039 	strb.w	ip, [r4, #57]	@ 0x39
 801ae08:	f1a5 0c7d 	sub.w	ip, r5, #125	@ 0x7d
 801ae0c:	f1bc 0f01 	cmp.w	ip, #1
 801ae10:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 801ae14:	4421      	add	r1, r4
 801ae16:	f240 8110 	bls.w	801b03a <uxr_write_framed_msg+0x272>
 801ae1a:	f881 5038 	strb.w	r5, [r1, #56]	@ 0x38
 801ae1e:	fa5f fc8b 	uxtb.w	ip, fp
 801ae22:	f3cb 2107 	ubfx	r1, fp, #8, #8
 801ae26:	f1ac 0e7d 	sub.w	lr, ip, #125	@ 0x7d
 801ae2a:	f1a1 057d 	sub.w	r5, r1, #125	@ 0x7d
 801ae2e:	f1be 0f01 	cmp.w	lr, #1
 801ae32:	f884 0062 	strb.w	r0, [r4, #98]	@ 0x62
 801ae36:	b2ed      	uxtb	r5, r5
 801ae38:	d94c      	bls.n	801aed4 <uxr_write_framed_msg+0x10c>
 801ae3a:	4420      	add	r0, r4
 801ae3c:	2d01      	cmp	r5, #1
 801ae3e:	f880 c038 	strb.w	ip, [r0, #56]	@ 0x38
 801ae42:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801ae46:	d95d      	bls.n	801af04 <uxr_write_framed_msg+0x13c>
 801ae48:	18a0      	adds	r0, r4, r2
 801ae4a:	3201      	adds	r2, #1
 801ae4c:	b2d2      	uxtb	r2, r2
 801ae4e:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 801ae52:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801ae56:	f1bb 0f00 	cmp.w	fp, #0
 801ae5a:	f000 8108 	beq.w	801b06e <uxr_write_framed_msg+0x2a6>
 801ae5e:	f04f 0c00 	mov.w	ip, #0
 801ae62:	4661      	mov	r1, ip
 801ae64:	46de      	mov	lr, fp
 801ae66:	46e3      	mov	fp, ip
 801ae68:	46d4      	mov	ip, sl
 801ae6a:	468a      	mov	sl, r1
 801ae6c:	f8df 9208 	ldr.w	r9, [pc, #520]	@ 801b078 <uxr_write_framed_msg+0x2b0>
 801ae70:	f81c 300a 	ldrb.w	r3, [ip, sl]
 801ae74:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 801ae78:	2901      	cmp	r1, #1
 801ae7a:	d91b      	bls.n	801aeb4 <uxr_write_framed_msg+0xec>
 801ae7c:	2a29      	cmp	r2, #41	@ 0x29
 801ae7e:	d84e      	bhi.n	801af1e <uxr_write_framed_msg+0x156>
 801ae80:	18a1      	adds	r1, r4, r2
 801ae82:	3201      	adds	r2, #1
 801ae84:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 801ae88:	b2d2      	uxtb	r2, r2
 801ae8a:	ea8b 0303 	eor.w	r3, fp, r3
 801ae8e:	b2db      	uxtb	r3, r3
 801ae90:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801ae94:	f839 3013 	ldrh.w	r3, [r9, r3, lsl #1]
 801ae98:	f10a 0a01 	add.w	sl, sl, #1
 801ae9c:	ea83 2b1b 	eor.w	fp, r3, fp, lsr #8
 801aea0:	45d6      	cmp	lr, sl
 801aea2:	d95a      	bls.n	801af5a <uxr_write_framed_msg+0x192>
 801aea4:	f81c 300a 	ldrb.w	r3, [ip, sl]
 801aea8:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801aeac:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 801aeb0:	2901      	cmp	r1, #1
 801aeb2:	d8e3      	bhi.n	801ae7c <uxr_write_framed_msg+0xb4>
 801aeb4:	1c51      	adds	r1, r2, #1
 801aeb6:	b2c9      	uxtb	r1, r1
 801aeb8:	2929      	cmp	r1, #41	@ 0x29
 801aeba:	d830      	bhi.n	801af1e <uxr_write_framed_msg+0x156>
 801aebc:	18a1      	adds	r1, r4, r2
 801aebe:	f04f 007d 	mov.w	r0, #125	@ 0x7d
 801aec2:	3202      	adds	r2, #2
 801aec4:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 801aec8:	f083 0020 	eor.w	r0, r3, #32
 801aecc:	b2d2      	uxtb	r2, r2
 801aece:	f881 0039 	strb.w	r0, [r1, #57]	@ 0x39
 801aed2:	e7da      	b.n	801ae8a <uxr_write_framed_msg+0xc2>
 801aed4:	eb04 0e00 	add.w	lr, r4, r0
 801aed8:	f08c 0c20 	eor.w	ip, ip, #32
 801aedc:	1c82      	adds	r2, r0, #2
 801aede:	f88e c039 	strb.w	ip, [lr, #57]	@ 0x39
 801aee2:	b2d2      	uxtb	r2, r2
 801aee4:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 801aee8:	2d01      	cmp	r5, #1
 801aeea:	f88e c038 	strb.w	ip, [lr, #56]	@ 0x38
 801aeee:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801aef2:	d907      	bls.n	801af04 <uxr_write_framed_msg+0x13c>
 801aef4:	4422      	add	r2, r4
 801aef6:	3003      	adds	r0, #3
 801aef8:	f882 1038 	strb.w	r1, [r2, #56]	@ 0x38
 801aefc:	b2c2      	uxtb	r2, r0
 801aefe:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801af02:	e7ac      	b.n	801ae5e <uxr_write_framed_msg+0x96>
 801af04:	18a0      	adds	r0, r4, r2
 801af06:	f081 0120 	eor.w	r1, r1, #32
 801af0a:	3202      	adds	r2, #2
 801af0c:	f880 1039 	strb.w	r1, [r0, #57]	@ 0x39
 801af10:	b2d2      	uxtb	r2, r2
 801af12:	217d      	movs	r1, #125	@ 0x7d
 801af14:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 801af18:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801af1c:	e79f      	b.n	801ae5e <uxr_write_framed_msg+0x96>
 801af1e:	e9cd ba00 	strd	fp, sl, [sp]
 801af22:	2500      	movs	r5, #0
 801af24:	46e2      	mov	sl, ip
 801af26:	46f3      	mov	fp, lr
 801af28:	e000      	b.n	801af2c <uxr_write_framed_msg+0x164>
 801af2a:	b190      	cbz	r0, 801af52 <uxr_write_framed_msg+0x18a>
 801af2c:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 801af30:	1b52      	subs	r2, r2, r5
 801af32:	4643      	mov	r3, r8
 801af34:	4421      	add	r1, r4
 801af36:	4638      	mov	r0, r7
 801af38:	47b0      	blx	r6
 801af3a:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801af3e:	4405      	add	r5, r0
 801af40:	4295      	cmp	r5, r2
 801af42:	d3f2      	bcc.n	801af2a <uxr_write_framed_msg+0x162>
 801af44:	46d4      	mov	ip, sl
 801af46:	46de      	mov	lr, fp
 801af48:	f8dd a004 	ldr.w	sl, [sp, #4]
 801af4c:	f8dd b000 	ldr.w	fp, [sp]
 801af50:	d06f      	beq.n	801b032 <uxr_write_framed_msg+0x26a>
 801af52:	2000      	movs	r0, #0
 801af54:	b005      	add	sp, #20
 801af56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801af5a:	46dc      	mov	ip, fp
 801af5c:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801af60:	f8ad c00c 	strh.w	ip, [sp, #12]
 801af64:	46f3      	mov	fp, lr
 801af66:	fa5f fc8c 	uxtb.w	ip, ip
 801af6a:	f1ac 037d 	sub.w	r3, ip, #125	@ 0x7d
 801af6e:	2b01      	cmp	r3, #1
 801af70:	f04f 0900 	mov.w	r9, #0
 801af74:	f04f 0a7d 	mov.w	sl, #125	@ 0x7d
 801af78:	d930      	bls.n	801afdc <uxr_write_framed_msg+0x214>
 801af7a:	2a29      	cmp	r2, #41	@ 0x29
 801af7c:	d91c      	bls.n	801afb8 <uxr_write_framed_msg+0x1f0>
 801af7e:	2500      	movs	r5, #0
 801af80:	e001      	b.n	801af86 <uxr_write_framed_msg+0x1be>
 801af82:	2800      	cmp	r0, #0
 801af84:	d0e5      	beq.n	801af52 <uxr_write_framed_msg+0x18a>
 801af86:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 801af8a:	1b52      	subs	r2, r2, r5
 801af8c:	4643      	mov	r3, r8
 801af8e:	4421      	add	r1, r4
 801af90:	4638      	mov	r0, r7
 801af92:	47b0      	blx	r6
 801af94:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801af98:	4405      	add	r5, r0
 801af9a:	4295      	cmp	r5, r2
 801af9c:	d3f1      	bcc.n	801af82 <uxr_write_framed_msg+0x1ba>
 801af9e:	d1d8      	bne.n	801af52 <uxr_write_framed_msg+0x18a>
 801afa0:	f109 0310 	add.w	r3, r9, #16
 801afa4:	446b      	add	r3, sp
 801afa6:	2200      	movs	r2, #0
 801afa8:	f813 cc04 	ldrb.w	ip, [r3, #-4]
 801afac:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801afb0:	f1ac 037d 	sub.w	r3, ip, #125	@ 0x7d
 801afb4:	2b01      	cmp	r3, #1
 801afb6:	d911      	bls.n	801afdc <uxr_write_framed_msg+0x214>
 801afb8:	18a3      	adds	r3, r4, r2
 801afba:	3201      	adds	r2, #1
 801afbc:	b2d2      	uxtb	r2, r2
 801afbe:	f883 c038 	strb.w	ip, [r3, #56]	@ 0x38
 801afc2:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801afc6:	f1b9 0f00 	cmp.w	r9, #0
 801afca:	d119      	bne.n	801b000 <uxr_write_framed_msg+0x238>
 801afcc:	f89d c00d 	ldrb.w	ip, [sp, #13]
 801afd0:	f1ac 037d 	sub.w	r3, ip, #125	@ 0x7d
 801afd4:	2b01      	cmp	r3, #1
 801afd6:	f04f 0901 	mov.w	r9, #1
 801afda:	d8ce      	bhi.n	801af7a <uxr_write_framed_msg+0x1b2>
 801afdc:	1c53      	adds	r3, r2, #1
 801afde:	b2db      	uxtb	r3, r3
 801afe0:	2b29      	cmp	r3, #41	@ 0x29
 801afe2:	d8cc      	bhi.n	801af7e <uxr_write_framed_msg+0x1b6>
 801afe4:	18a3      	adds	r3, r4, r2
 801afe6:	3202      	adds	r2, #2
 801afe8:	f08c 0c20 	eor.w	ip, ip, #32
 801afec:	b2d2      	uxtb	r2, r2
 801afee:	f883 c039 	strb.w	ip, [r3, #57]	@ 0x39
 801aff2:	f883 a038 	strb.w	sl, [r3, #56]	@ 0x38
 801aff6:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801affa:	f1b9 0f00 	cmp.w	r9, #0
 801affe:	d0e5      	beq.n	801afcc <uxr_write_framed_msg+0x204>
 801b000:	2500      	movs	r5, #0
 801b002:	e001      	b.n	801b008 <uxr_write_framed_msg+0x240>
 801b004:	2800      	cmp	r0, #0
 801b006:	d0a4      	beq.n	801af52 <uxr_write_framed_msg+0x18a>
 801b008:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 801b00c:	1b52      	subs	r2, r2, r5
 801b00e:	4643      	mov	r3, r8
 801b010:	4421      	add	r1, r4
 801b012:	4638      	mov	r0, r7
 801b014:	47b0      	blx	r6
 801b016:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801b01a:	4405      	add	r5, r0
 801b01c:	4295      	cmp	r5, r2
 801b01e:	d3f1      	bcc.n	801b004 <uxr_write_framed_msg+0x23c>
 801b020:	d197      	bne.n	801af52 <uxr_write_framed_msg+0x18a>
 801b022:	2300      	movs	r3, #0
 801b024:	fa1f f08b 	uxth.w	r0, fp
 801b028:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 801b02c:	b005      	add	sp, #20
 801b02e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b032:	2300      	movs	r3, #0
 801b034:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 801b038:	e732      	b.n	801aea0 <uxr_write_framed_msg+0xd8>
 801b03a:	44a6      	add	lr, r4
 801b03c:	f085 0520 	eor.w	r5, r5, #32
 801b040:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 801b044:	4610      	mov	r0, r2
 801b046:	f881 c038 	strb.w	ip, [r1, #56]	@ 0x38
 801b04a:	464a      	mov	r2, r9
 801b04c:	f88e 5038 	strb.w	r5, [lr, #56]	@ 0x38
 801b050:	e6e5      	b.n	801ae1e <uxr_write_framed_msg+0x56>
 801b052:	f08c 0c20 	eor.w	ip, ip, #32
 801b056:	f880 c03a 	strb.w	ip, [r0, #58]	@ 0x3a
 801b05a:	2103      	movs	r1, #3
 801b05c:	2004      	movs	r0, #4
 801b05e:	f04f 0906 	mov.w	r9, #6
 801b062:	2205      	movs	r2, #5
 801b064:	4686      	mov	lr, r0
 801b066:	460b      	mov	r3, r1
 801b068:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 801b06c:	e6ca      	b.n	801ae04 <uxr_write_framed_msg+0x3c>
 801b06e:	f8ad b00c 	strh.w	fp, [sp, #12]
 801b072:	46dc      	mov	ip, fp
 801b074:	e779      	b.n	801af6a <uxr_write_framed_msg+0x1a2>
 801b076:	bf00      	nop
 801b078:	0802061c 	.word	0x0802061c

0801b07c <uxr_framing_read_transport>:
 801b07c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b080:	4604      	mov	r4, r0
 801b082:	b083      	sub	sp, #12
 801b084:	461f      	mov	r7, r3
 801b086:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 801b08a:	4689      	mov	r9, r1
 801b08c:	4692      	mov	sl, r2
 801b08e:	f7f7 fd3d 	bl	8012b0c <uxr_millis>
 801b092:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 801b096:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 801b09a:	42b3      	cmp	r3, r6
 801b09c:	4680      	mov	r8, r0
 801b09e:	d062      	beq.n	801b166 <uxr_framing_read_transport+0xea>
 801b0a0:	d81c      	bhi.n	801b0dc <uxr_framing_read_transport+0x60>
 801b0a2:	1e75      	subs	r5, r6, #1
 801b0a4:	1aed      	subs	r5, r5, r3
 801b0a6:	b2ed      	uxtb	r5, r5
 801b0a8:	2600      	movs	r6, #0
 801b0aa:	455d      	cmp	r5, fp
 801b0ac:	d81f      	bhi.n	801b0ee <uxr_framing_read_transport+0x72>
 801b0ae:	19ab      	adds	r3, r5, r6
 801b0b0:	455b      	cmp	r3, fp
 801b0b2:	bf84      	itt	hi
 801b0b4:	ebab 0b05 	subhi.w	fp, fp, r5
 801b0b8:	fa5f f68b 	uxtbhi.w	r6, fp
 801b0bc:	b9e5      	cbnz	r5, 801b0f8 <uxr_framing_read_transport+0x7c>
 801b0be:	f04f 0b00 	mov.w	fp, #0
 801b0c2:	f7f7 fd23 	bl	8012b0c <uxr_millis>
 801b0c6:	683b      	ldr	r3, [r7, #0]
 801b0c8:	eba0 0108 	sub.w	r1, r0, r8
 801b0cc:	1a5b      	subs	r3, r3, r1
 801b0ce:	4658      	mov	r0, fp
 801b0d0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b0d4:	603b      	str	r3, [r7, #0]
 801b0d6:	b003      	add	sp, #12
 801b0d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b0dc:	2e00      	cmp	r6, #0
 801b0de:	d04a      	beq.n	801b176 <uxr_framing_read_transport+0xfa>
 801b0e0:	f1c3 032a 	rsb	r3, r3, #42	@ 0x2a
 801b0e4:	b2dd      	uxtb	r5, r3
 801b0e6:	3e01      	subs	r6, #1
 801b0e8:	455d      	cmp	r5, fp
 801b0ea:	b2f6      	uxtb	r6, r6
 801b0ec:	d9df      	bls.n	801b0ae <uxr_framing_read_transport+0x32>
 801b0ee:	fa5f f58b 	uxtb.w	r5, fp
 801b0f2:	2600      	movs	r6, #0
 801b0f4:	2d00      	cmp	r5, #0
 801b0f6:	d0e2      	beq.n	801b0be <uxr_framing_read_transport+0x42>
 801b0f8:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801b0fc:	3102      	adds	r1, #2
 801b0fe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b100:	9300      	str	r3, [sp, #0]
 801b102:	683b      	ldr	r3, [r7, #0]
 801b104:	4421      	add	r1, r4
 801b106:	462a      	mov	r2, r5
 801b108:	4650      	mov	r0, sl
 801b10a:	47c8      	blx	r9
 801b10c:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 801b110:	4a1b      	ldr	r2, [pc, #108]	@ (801b180 <uxr_framing_read_transport+0x104>)
 801b112:	4403      	add	r3, r0
 801b114:	0859      	lsrs	r1, r3, #1
 801b116:	4683      	mov	fp, r0
 801b118:	fba2 0101 	umull	r0, r1, r2, r1
 801b11c:	0889      	lsrs	r1, r1, #2
 801b11e:	222a      	movs	r2, #42	@ 0x2a
 801b120:	fb02 3111 	mls	r1, r2, r1, r3
 801b124:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 801b128:	f1bb 0f00 	cmp.w	fp, #0
 801b12c:	d0c7      	beq.n	801b0be <uxr_framing_read_transport+0x42>
 801b12e:	45ab      	cmp	fp, r5
 801b130:	d1c7      	bne.n	801b0c2 <uxr_framing_read_transport+0x46>
 801b132:	2e00      	cmp	r6, #0
 801b134:	d0c5      	beq.n	801b0c2 <uxr_framing_read_transport+0x46>
 801b136:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b138:	9300      	str	r3, [sp, #0]
 801b13a:	3102      	adds	r1, #2
 801b13c:	4632      	mov	r2, r6
 801b13e:	4421      	add	r1, r4
 801b140:	2300      	movs	r3, #0
 801b142:	4650      	mov	r0, sl
 801b144:	47c8      	blx	r9
 801b146:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 801b14a:	4a0d      	ldr	r2, [pc, #52]	@ (801b180 <uxr_framing_read_transport+0x104>)
 801b14c:	4403      	add	r3, r0
 801b14e:	0859      	lsrs	r1, r3, #1
 801b150:	fba2 2101 	umull	r2, r1, r2, r1
 801b154:	0889      	lsrs	r1, r1, #2
 801b156:	222a      	movs	r2, #42	@ 0x2a
 801b158:	fb02 3311 	mls	r3, r2, r1, r3
 801b15c:	eb00 0b05 	add.w	fp, r0, r5
 801b160:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 801b164:	e7ad      	b.n	801b0c2 <uxr_framing_read_transport+0x46>
 801b166:	2600      	movs	r6, #0
 801b168:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 801b16c:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 801b16e:	d9be      	bls.n	801b0ee <uxr_framing_read_transport+0x72>
 801b170:	2529      	movs	r5, #41	@ 0x29
 801b172:	2102      	movs	r1, #2
 801b174:	e7c3      	b.n	801b0fe <uxr_framing_read_transport+0x82>
 801b176:	f1c3 0329 	rsb	r3, r3, #41	@ 0x29
 801b17a:	b2dd      	uxtb	r5, r3
 801b17c:	e795      	b.n	801b0aa <uxr_framing_read_transport+0x2e>
 801b17e:	bf00      	nop
 801b180:	30c30c31 	.word	0x30c30c31

0801b184 <uxr_read_framed_msg>:
 801b184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b188:	461d      	mov	r5, r3
 801b18a:	f890 c02c 	ldrb.w	ip, [r0, #44]	@ 0x2c
 801b18e:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 801b192:	b085      	sub	sp, #20
 801b194:	459c      	cmp	ip, r3
 801b196:	f8dd b044 	ldr.w	fp, [sp, #68]	@ 0x44
 801b19a:	4604      	mov	r4, r0
 801b19c:	460f      	mov	r7, r1
 801b19e:	4616      	mov	r6, r2
 801b1a0:	f000 81ae 	beq.w	801b500 <uxr_read_framed_msg+0x37c>
 801b1a4:	2000      	movs	r0, #0
 801b1a6:	4639      	mov	r1, r7
 801b1a8:	2800      	cmp	r0, #0
 801b1aa:	d138      	bne.n	801b21e <uxr_read_framed_msg+0x9a>
 801b1ac:	468a      	mov	sl, r1
 801b1ae:	7823      	ldrb	r3, [r4, #0]
 801b1b0:	2b07      	cmp	r3, #7
 801b1b2:	d8fd      	bhi.n	801b1b0 <uxr_read_framed_msg+0x2c>
 801b1b4:	e8df f013 	tbh	[pc, r3, lsl #1]
 801b1b8:	0116013b 	.word	0x0116013b
 801b1bc:	00cd00f0 	.word	0x00cd00f0
 801b1c0:	005a00a0 	.word	0x005a00a0
 801b1c4:	00080037 	.word	0x00080037
 801b1c8:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 801b1cc:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 801b1d0:	4290      	cmp	r0, r2
 801b1d2:	f000 8167 	beq.w	801b4a4 <uxr_read_framed_msg+0x320>
 801b1d6:	18a3      	adds	r3, r4, r2
 801b1d8:	1c57      	adds	r7, r2, #1
 801b1da:	49c7      	ldr	r1, [pc, #796]	@ (801b4f8 <uxr_read_framed_msg+0x374>)
 801b1dc:	f893 c002 	ldrb.w	ip, [r3, #2]
 801b1e0:	087b      	lsrs	r3, r7, #1
 801b1e2:	fba1 8303 	umull	r8, r3, r1, r3
 801b1e6:	089b      	lsrs	r3, r3, #2
 801b1e8:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 801b1ec:	fb08 7313 	mls	r3, r8, r3, r7
 801b1f0:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 801b1f4:	b2df      	uxtb	r7, r3
 801b1f6:	f000 81b2 	beq.w	801b55e <uxr_read_framed_msg+0x3da>
 801b1fa:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 801b1fe:	f884 702d 	strb.w	r7, [r4, #45]	@ 0x2d
 801b202:	f000 8220 	beq.w	801b646 <uxr_read_framed_msg+0x4c2>
 801b206:	4661      	mov	r1, ip
 801b208:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 801b20a:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 801b20c:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 801b210:	b29b      	uxth	r3, r3
 801b212:	2100      	movs	r1, #0
 801b214:	429a      	cmp	r2, r3
 801b216:	86a3      	strh	r3, [r4, #52]	@ 0x34
 801b218:	7021      	strb	r1, [r4, #0]
 801b21a:	f000 8198 	beq.w	801b54e <uxr_read_framed_msg+0x3ca>
 801b21e:	2000      	movs	r0, #0
 801b220:	b005      	add	sp, #20
 801b222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b226:	f894 702c 	ldrb.w	r7, [r4, #44]	@ 0x2c
 801b22a:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 801b22e:	4297      	cmp	r7, r2
 801b230:	f000 8148 	beq.w	801b4c4 <uxr_read_framed_msg+0x340>
 801b234:	18a3      	adds	r3, r4, r2
 801b236:	f102 0c01 	add.w	ip, r2, #1
 801b23a:	49af      	ldr	r1, [pc, #700]	@ (801b4f8 <uxr_read_framed_msg+0x374>)
 801b23c:	7898      	ldrb	r0, [r3, #2]
 801b23e:	ea4f 035c 	mov.w	r3, ip, lsr #1
 801b242:	fba1 8303 	umull	r8, r3, r1, r3
 801b246:	089b      	lsrs	r3, r3, #2
 801b248:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 801b24c:	fb08 c313 	mls	r3, r8, r3, ip
 801b250:	287d      	cmp	r0, #125	@ 0x7d
 801b252:	fa5f fc83 	uxtb.w	ip, r3
 801b256:	f000 8194 	beq.w	801b582 <uxr_read_framed_msg+0x3fe>
 801b25a:	287e      	cmp	r0, #126	@ 0x7e
 801b25c:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 801b260:	f000 8200 	beq.w	801b664 <uxr_read_framed_msg+0x4e0>
 801b264:	2307      	movs	r3, #7
 801b266:	86a0      	strh	r0, [r4, #52]	@ 0x34
 801b268:	7023      	strb	r3, [r4, #0]
 801b26a:	e7a0      	b.n	801b1ae <uxr_read_framed_msg+0x2a>
 801b26c:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 801b26e:	8e27      	ldrh	r7, [r4, #48]	@ 0x30
 801b270:	429f      	cmp	r7, r3
 801b272:	f240 8164 	bls.w	801b53e <uxr_read_framed_msg+0x3ba>
 801b276:	f8df 9280 	ldr.w	r9, [pc, #640]	@ 801b4f8 <uxr_read_framed_msg+0x374>
 801b27a:	f8cd a00c 	str.w	sl, [sp, #12]
 801b27e:	212a      	movs	r1, #42	@ 0x2a
 801b280:	e01f      	b.n	801b2c2 <uxr_read_framed_msg+0x13e>
 801b282:	f89a e002 	ldrb.w	lr, [sl, #2]
 801b286:	f1be 0f7d 	cmp.w	lr, #125	@ 0x7d
 801b28a:	f000 80ea 	beq.w	801b462 <uxr_read_framed_msg+0x2de>
 801b28e:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 801b292:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 801b296:	f000 8142 	beq.w	801b51e <uxr_read_framed_msg+0x39a>
 801b29a:	f805 e003 	strb.w	lr, [r5, r3]
 801b29e:	8ee0      	ldrh	r0, [r4, #54]	@ 0x36
 801b2a0:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 801b2a2:	4f96      	ldr	r7, [pc, #600]	@ (801b4fc <uxr_read_framed_msg+0x378>)
 801b2a4:	ea80 020e 	eor.w	r2, r0, lr
 801b2a8:	b2d2      	uxtb	r2, r2
 801b2aa:	3301      	adds	r3, #1
 801b2ac:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 801b2b0:	8e27      	ldrh	r7, [r4, #48]	@ 0x30
 801b2b2:	b29b      	uxth	r3, r3
 801b2b4:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 801b2b8:	42bb      	cmp	r3, r7
 801b2ba:	8663      	strh	r3, [r4, #50]	@ 0x32
 801b2bc:	86e2      	strh	r2, [r4, #54]	@ 0x36
 801b2be:	f080 80e7 	bcs.w	801b490 <uxr_read_framed_msg+0x30c>
 801b2c2:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 801b2c6:	f894 802c 	ldrb.w	r8, [r4, #44]	@ 0x2c
 801b2ca:	f100 0c01 	add.w	ip, r0, #1
 801b2ce:	ea4f 0e5c 	mov.w	lr, ip, lsr #1
 801b2d2:	fba9 e20e 	umull	lr, r2, r9, lr
 801b2d6:	0892      	lsrs	r2, r2, #2
 801b2d8:	fb01 c212 	mls	r2, r1, r2, ip
 801b2dc:	4580      	cmp	r8, r0
 801b2de:	eb04 0a00 	add.w	sl, r4, r0
 801b2e2:	fa5f fc82 	uxtb.w	ip, r2
 801b2e6:	d1cc      	bne.n	801b282 <uxr_read_framed_msg+0xfe>
 801b2e8:	42bb      	cmp	r3, r7
 801b2ea:	f8dd a00c 	ldr.w	sl, [sp, #12]
 801b2ee:	f040 8128 	bne.w	801b542 <uxr_read_framed_msg+0x3be>
 801b2f2:	2306      	movs	r3, #6
 801b2f4:	7023      	strb	r3, [r4, #0]
 801b2f6:	e75a      	b.n	801b1ae <uxr_read_framed_msg+0x2a>
 801b2f8:	f894 702c 	ldrb.w	r7, [r4, #44]	@ 0x2c
 801b2fc:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 801b300:	4297      	cmp	r7, r2
 801b302:	f000 80cf 	beq.w	801b4a4 <uxr_read_framed_msg+0x320>
 801b306:	18a3      	adds	r3, r4, r2
 801b308:	f102 0c01 	add.w	ip, r2, #1
 801b30c:	497a      	ldr	r1, [pc, #488]	@ (801b4f8 <uxr_read_framed_msg+0x374>)
 801b30e:	7898      	ldrb	r0, [r3, #2]
 801b310:	ea4f 035c 	mov.w	r3, ip, lsr #1
 801b314:	fba1 8303 	umull	r8, r3, r1, r3
 801b318:	089b      	lsrs	r3, r3, #2
 801b31a:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 801b31e:	fb08 c313 	mls	r3, r8, r3, ip
 801b322:	287d      	cmp	r0, #125	@ 0x7d
 801b324:	fa5f fc83 	uxtb.w	ip, r3
 801b328:	f000 813d 	beq.w	801b5a6 <uxr_read_framed_msg+0x422>
 801b32c:	287e      	cmp	r0, #126	@ 0x7e
 801b32e:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 801b332:	f000 8188 	beq.w	801b646 <uxr_read_framed_msg+0x4c2>
 801b336:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 801b338:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801b33a:	eb03 2300 	add.w	r3, r3, r0, lsl #8
 801b33e:	b29b      	uxth	r3, r3
 801b340:	2200      	movs	r2, #0
 801b342:	428b      	cmp	r3, r1
 801b344:	8623      	strh	r3, [r4, #48]	@ 0x30
 801b346:	8662      	strh	r2, [r4, #50]	@ 0x32
 801b348:	86e2      	strh	r2, [r4, #54]	@ 0x36
 801b34a:	f240 80f5 	bls.w	801b538 <uxr_read_framed_msg+0x3b4>
 801b34e:	7022      	strb	r2, [r4, #0]
 801b350:	e765      	b.n	801b21e <uxr_read_framed_msg+0x9a>
 801b352:	f894 702c 	ldrb.w	r7, [r4, #44]	@ 0x2c
 801b356:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 801b35a:	4297      	cmp	r7, r2
 801b35c:	f000 80b2 	beq.w	801b4c4 <uxr_read_framed_msg+0x340>
 801b360:	18a3      	adds	r3, r4, r2
 801b362:	f102 0c01 	add.w	ip, r2, #1
 801b366:	4964      	ldr	r1, [pc, #400]	@ (801b4f8 <uxr_read_framed_msg+0x374>)
 801b368:	7898      	ldrb	r0, [r3, #2]
 801b36a:	ea4f 035c 	mov.w	r3, ip, lsr #1
 801b36e:	fba1 8303 	umull	r8, r3, r1, r3
 801b372:	089b      	lsrs	r3, r3, #2
 801b374:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 801b378:	fb08 c313 	mls	r3, r8, r3, ip
 801b37c:	287d      	cmp	r0, #125	@ 0x7d
 801b37e:	fa5f fc83 	uxtb.w	ip, r3
 801b382:	f000 813b 	beq.w	801b5fc <uxr_read_framed_msg+0x478>
 801b386:	287e      	cmp	r0, #126	@ 0x7e
 801b388:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 801b38c:	f000 816a 	beq.w	801b664 <uxr_read_framed_msg+0x4e0>
 801b390:	2304      	movs	r3, #4
 801b392:	8620      	strh	r0, [r4, #48]	@ 0x30
 801b394:	7023      	strb	r3, [r4, #0]
 801b396:	e70a      	b.n	801b1ae <uxr_read_framed_msg+0x2a>
 801b398:	f894 702c 	ldrb.w	r7, [r4, #44]	@ 0x2c
 801b39c:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 801b3a0:	4297      	cmp	r7, r2
 801b3a2:	f000 80c4 	beq.w	801b52e <uxr_read_framed_msg+0x3aa>
 801b3a6:	18a3      	adds	r3, r4, r2
 801b3a8:	f102 0c01 	add.w	ip, r2, #1
 801b3ac:	4952      	ldr	r1, [pc, #328]	@ (801b4f8 <uxr_read_framed_msg+0x374>)
 801b3ae:	7898      	ldrb	r0, [r3, #2]
 801b3b0:	ea4f 035c 	mov.w	r3, ip, lsr #1
 801b3b4:	fba1 8303 	umull	r8, r3, r1, r3
 801b3b8:	089b      	lsrs	r3, r3, #2
 801b3ba:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 801b3be:	fb08 c313 	mls	r3, r8, r3, ip
 801b3c2:	287d      	cmp	r0, #125	@ 0x7d
 801b3c4:	fa5f fc83 	uxtb.w	ip, r3
 801b3c8:	f000 812b 	beq.w	801b622 <uxr_read_framed_msg+0x49e>
 801b3cc:	287e      	cmp	r0, #126	@ 0x7e
 801b3ce:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 801b3d2:	f000 8155 	beq.w	801b680 <uxr_read_framed_msg+0x4fc>
 801b3d6:	7863      	ldrb	r3, [r4, #1]
 801b3d8:	4283      	cmp	r3, r0
 801b3da:	bf0c      	ite	eq
 801b3dc:	2303      	moveq	r3, #3
 801b3de:	2300      	movne	r3, #0
 801b3e0:	7023      	strb	r3, [r4, #0]
 801b3e2:	e6e4      	b.n	801b1ae <uxr_read_framed_msg+0x2a>
 801b3e4:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 801b3e8:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 801b3ec:	2300      	movs	r3, #0
 801b3ee:	4290      	cmp	r0, r2
 801b3f0:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
 801b3f4:	d06b      	beq.n	801b4ce <uxr_read_framed_msg+0x34a>
 801b3f6:	18a3      	adds	r3, r4, r2
 801b3f8:	f102 0c01 	add.w	ip, r2, #1
 801b3fc:	493e      	ldr	r1, [pc, #248]	@ (801b4f8 <uxr_read_framed_msg+0x374>)
 801b3fe:	789f      	ldrb	r7, [r3, #2]
 801b400:	ea4f 035c 	mov.w	r3, ip, lsr #1
 801b404:	fba1 8303 	umull	r8, r3, r1, r3
 801b408:	089b      	lsrs	r3, r3, #2
 801b40a:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 801b40e:	fb08 c313 	mls	r3, r8, r3, ip
 801b412:	2f7d      	cmp	r7, #125	@ 0x7d
 801b414:	fa5f fc83 	uxtb.w	ip, r3
 801b418:	f000 80d8 	beq.w	801b5cc <uxr_read_framed_msg+0x448>
 801b41c:	2f7e      	cmp	r7, #126	@ 0x7e
 801b41e:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 801b422:	f884 702e 	strb.w	r7, [r4, #46]	@ 0x2e
 801b426:	d052      	beq.n	801b4ce <uxr_read_framed_msg+0x34a>
 801b428:	2302      	movs	r3, #2
 801b42a:	7023      	strb	r3, [r4, #0]
 801b42c:	e6bf      	b.n	801b1ae <uxr_read_framed_msg+0x2a>
 801b42e:	f894 802c 	ldrb.w	r8, [r4, #44]	@ 0x2c
 801b432:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 801b436:	4930      	ldr	r1, [pc, #192]	@ (801b4f8 <uxr_read_framed_msg+0x374>)
 801b438:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 801b43c:	e004      	b.n	801b448 <uxr_read_framed_msg+0x2c4>
 801b43e:	78bb      	ldrb	r3, [r7, #2]
 801b440:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 801b444:	2b7e      	cmp	r3, #126	@ 0x7e
 801b446:	d02a      	beq.n	801b49e <uxr_read_framed_msg+0x31a>
 801b448:	1c50      	adds	r0, r2, #1
 801b44a:	0843      	lsrs	r3, r0, #1
 801b44c:	fba1 e303 	umull	lr, r3, r1, r3
 801b450:	089b      	lsrs	r3, r3, #2
 801b452:	fb0c 0013 	mls	r0, ip, r3, r0
 801b456:	4590      	cmp	r8, r2
 801b458:	eb04 0702 	add.w	r7, r4, r2
 801b45c:	b2c2      	uxtb	r2, r0
 801b45e:	d1ee      	bne.n	801b43e <uxr_read_framed_msg+0x2ba>
 801b460:	e6dd      	b.n	801b21e <uxr_read_framed_msg+0x9a>
 801b462:	3002      	adds	r0, #2
 801b464:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 801b468:	eb04 0a02 	add.w	sl, r4, r2
 801b46c:	fba9 e20e 	umull	lr, r2, r9, lr
 801b470:	0892      	lsrs	r2, r2, #2
 801b472:	45e0      	cmp	r8, ip
 801b474:	fb01 0012 	mls	r0, r1, r2, r0
 801b478:	f43f af36 	beq.w	801b2e8 <uxr_read_framed_msg+0x164>
 801b47c:	f89a e002 	ldrb.w	lr, [sl, #2]
 801b480:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 801b484:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 801b488:	d049      	beq.n	801b51e <uxr_read_framed_msg+0x39a>
 801b48a:	f08e 0e20 	eor.w	lr, lr, #32
 801b48e:	e704      	b.n	801b29a <uxr_read_framed_msg+0x116>
 801b490:	f8dd a00c 	ldr.w	sl, [sp, #12]
 801b494:	f43f af2d 	beq.w	801b2f2 <uxr_read_framed_msg+0x16e>
 801b498:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 801b49c:	d151      	bne.n	801b542 <uxr_read_framed_msg+0x3be>
 801b49e:	2301      	movs	r3, #1
 801b4a0:	7023      	strb	r3, [r4, #0]
 801b4a2:	e684      	b.n	801b1ae <uxr_read_framed_msg+0x2a>
 801b4a4:	4651      	mov	r1, sl
 801b4a6:	f8cd b000 	str.w	fp, [sp]
 801b4aa:	2301      	movs	r3, #1
 801b4ac:	9301      	str	r3, [sp, #4]
 801b4ae:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801b4b0:	9103      	str	r1, [sp, #12]
 801b4b2:	4632      	mov	r2, r6
 801b4b4:	4620      	mov	r0, r4
 801b4b6:	f7ff fde1 	bl	801b07c <uxr_framing_read_transport>
 801b4ba:	fab0 f080 	clz	r0, r0
 801b4be:	9903      	ldr	r1, [sp, #12]
 801b4c0:	0940      	lsrs	r0, r0, #5
 801b4c2:	e671      	b.n	801b1a8 <uxr_read_framed_msg+0x24>
 801b4c4:	4651      	mov	r1, sl
 801b4c6:	f8cd b000 	str.w	fp, [sp]
 801b4ca:	2302      	movs	r3, #2
 801b4cc:	e7ee      	b.n	801b4ac <uxr_read_framed_msg+0x328>
 801b4ce:	2304      	movs	r3, #4
 801b4d0:	9301      	str	r3, [sp, #4]
 801b4d2:	f8cd b000 	str.w	fp, [sp]
 801b4d6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801b4d8:	4632      	mov	r2, r6
 801b4da:	4651      	mov	r1, sl
 801b4dc:	4620      	mov	r0, r4
 801b4de:	f7ff fdcd 	bl	801b07c <uxr_framing_read_transport>
 801b4e2:	2800      	cmp	r0, #0
 801b4e4:	f47f ae63 	bne.w	801b1ae <uxr_read_framed_msg+0x2a>
 801b4e8:	f894 002e 	ldrb.w	r0, [r4, #46]	@ 0x2e
 801b4ec:	387e      	subs	r0, #126	@ 0x7e
 801b4ee:	4651      	mov	r1, sl
 801b4f0:	bf18      	it	ne
 801b4f2:	2001      	movne	r0, #1
 801b4f4:	e658      	b.n	801b1a8 <uxr_read_framed_msg+0x24>
 801b4f6:	bf00      	nop
 801b4f8:	30c30c31 	.word	0x30c30c31
 801b4fc:	0802061c 	.word	0x0802061c
 801b500:	2305      	movs	r3, #5
 801b502:	9301      	str	r3, [sp, #4]
 801b504:	f8cd b000 	str.w	fp, [sp]
 801b508:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801b50a:	f7ff fdb7 	bl	801b07c <uxr_framing_read_transport>
 801b50e:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 801b512:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801b516:	429a      	cmp	r2, r3
 801b518:	f43f ae81 	beq.w	801b21e <uxr_read_framed_msg+0x9a>
 801b51c:	e642      	b.n	801b1a4 <uxr_read_framed_msg+0x20>
 801b51e:	42bb      	cmp	r3, r7
 801b520:	f8dd a00c 	ldr.w	sl, [sp, #12]
 801b524:	f43f aee5 	beq.w	801b2f2 <uxr_read_framed_msg+0x16e>
 801b528:	2301      	movs	r3, #1
 801b52a:	7023      	strb	r3, [r4, #0]
 801b52c:	e63f      	b.n	801b1ae <uxr_read_framed_msg+0x2a>
 801b52e:	4651      	mov	r1, sl
 801b530:	f8cd b000 	str.w	fp, [sp]
 801b534:	2303      	movs	r3, #3
 801b536:	e7b9      	b.n	801b4ac <uxr_read_framed_msg+0x328>
 801b538:	2305      	movs	r3, #5
 801b53a:	7023      	strb	r3, [r4, #0]
 801b53c:	e637      	b.n	801b1ae <uxr_read_framed_msg+0x2a>
 801b53e:	f43f aed8 	beq.w	801b2f2 <uxr_read_framed_msg+0x16e>
 801b542:	1afb      	subs	r3, r7, r3
 801b544:	3302      	adds	r3, #2
 801b546:	e9cd b300 	strd	fp, r3, [sp]
 801b54a:	4651      	mov	r1, sl
 801b54c:	e7af      	b.n	801b4ae <uxr_read_framed_msg+0x32a>
 801b54e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801b550:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 801b554:	7013      	strb	r3, [r2, #0]
 801b556:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 801b558:	b005      	add	sp, #20
 801b55a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b55e:	4287      	cmp	r7, r0
 801b560:	d0a0      	beq.n	801b4a4 <uxr_read_framed_msg+0x320>
 801b562:	4423      	add	r3, r4
 801b564:	3202      	adds	r2, #2
 801b566:	7898      	ldrb	r0, [r3, #2]
 801b568:	0853      	lsrs	r3, r2, #1
 801b56a:	fba1 e303 	umull	lr, r3, r1, r3
 801b56e:	089b      	lsrs	r3, r3, #2
 801b570:	fb08 2213 	mls	r2, r8, r3, r2
 801b574:	287e      	cmp	r0, #126	@ 0x7e
 801b576:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 801b57a:	d064      	beq.n	801b646 <uxr_read_framed_msg+0x4c2>
 801b57c:	f080 0120 	eor.w	r1, r0, #32
 801b580:	e642      	b.n	801b208 <uxr_read_framed_msg+0x84>
 801b582:	45bc      	cmp	ip, r7
 801b584:	d09e      	beq.n	801b4c4 <uxr_read_framed_msg+0x340>
 801b586:	4423      	add	r3, r4
 801b588:	3202      	adds	r2, #2
 801b58a:	7898      	ldrb	r0, [r3, #2]
 801b58c:	0853      	lsrs	r3, r2, #1
 801b58e:	fba1 e303 	umull	lr, r3, r1, r3
 801b592:	089b      	lsrs	r3, r3, #2
 801b594:	fb08 2213 	mls	r2, r8, r3, r2
 801b598:	287e      	cmp	r0, #126	@ 0x7e
 801b59a:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 801b59e:	d061      	beq.n	801b664 <uxr_read_framed_msg+0x4e0>
 801b5a0:	f080 0020 	eor.w	r0, r0, #32
 801b5a4:	e65e      	b.n	801b264 <uxr_read_framed_msg+0xe0>
 801b5a6:	4567      	cmp	r7, ip
 801b5a8:	f43f af7c 	beq.w	801b4a4 <uxr_read_framed_msg+0x320>
 801b5ac:	4423      	add	r3, r4
 801b5ae:	3202      	adds	r2, #2
 801b5b0:	7898      	ldrb	r0, [r3, #2]
 801b5b2:	0853      	lsrs	r3, r2, #1
 801b5b4:	fba1 e303 	umull	lr, r3, r1, r3
 801b5b8:	089b      	lsrs	r3, r3, #2
 801b5ba:	fb08 2213 	mls	r2, r8, r3, r2
 801b5be:	287e      	cmp	r0, #126	@ 0x7e
 801b5c0:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 801b5c4:	d03f      	beq.n	801b646 <uxr_read_framed_msg+0x4c2>
 801b5c6:	f080 0020 	eor.w	r0, r0, #32
 801b5ca:	e6b4      	b.n	801b336 <uxr_read_framed_msg+0x1b2>
 801b5cc:	4560      	cmp	r0, ip
 801b5ce:	f43f af7e 	beq.w	801b4ce <uxr_read_framed_msg+0x34a>
 801b5d2:	4423      	add	r3, r4
 801b5d4:	3202      	adds	r2, #2
 801b5d6:	7898      	ldrb	r0, [r3, #2]
 801b5d8:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 801b5dc:	0853      	lsrs	r3, r2, #1
 801b5de:	fba1 e303 	umull	lr, r3, r1, r3
 801b5e2:	089b      	lsrs	r3, r3, #2
 801b5e4:	fb08 2213 	mls	r2, r8, r3, r2
 801b5e8:	287e      	cmp	r0, #126	@ 0x7e
 801b5ea:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 801b5ee:	f43f af6e 	beq.w	801b4ce <uxr_read_framed_msg+0x34a>
 801b5f2:	f080 0020 	eor.w	r0, r0, #32
 801b5f6:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 801b5fa:	e715      	b.n	801b428 <uxr_read_framed_msg+0x2a4>
 801b5fc:	4567      	cmp	r7, ip
 801b5fe:	f43f af61 	beq.w	801b4c4 <uxr_read_framed_msg+0x340>
 801b602:	4423      	add	r3, r4
 801b604:	3202      	adds	r2, #2
 801b606:	7898      	ldrb	r0, [r3, #2]
 801b608:	0853      	lsrs	r3, r2, #1
 801b60a:	fba1 e303 	umull	lr, r3, r1, r3
 801b60e:	089b      	lsrs	r3, r3, #2
 801b610:	fb08 2213 	mls	r2, r8, r3, r2
 801b614:	287e      	cmp	r0, #126	@ 0x7e
 801b616:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 801b61a:	d023      	beq.n	801b664 <uxr_read_framed_msg+0x4e0>
 801b61c:	f080 0020 	eor.w	r0, r0, #32
 801b620:	e6b6      	b.n	801b390 <uxr_read_framed_msg+0x20c>
 801b622:	45bc      	cmp	ip, r7
 801b624:	d083      	beq.n	801b52e <uxr_read_framed_msg+0x3aa>
 801b626:	4423      	add	r3, r4
 801b628:	3202      	adds	r2, #2
 801b62a:	7898      	ldrb	r0, [r3, #2]
 801b62c:	0853      	lsrs	r3, r2, #1
 801b62e:	fba1 e303 	umull	lr, r3, r1, r3
 801b632:	089b      	lsrs	r3, r3, #2
 801b634:	fb08 2213 	mls	r2, r8, r3, r2
 801b638:	287e      	cmp	r0, #126	@ 0x7e
 801b63a:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 801b63e:	d01f      	beq.n	801b680 <uxr_read_framed_msg+0x4fc>
 801b640:	f080 0020 	eor.w	r0, r0, #32
 801b644:	e6c7      	b.n	801b3d6 <uxr_read_framed_msg+0x252>
 801b646:	2701      	movs	r7, #1
 801b648:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801b64a:	f8cd b000 	str.w	fp, [sp]
 801b64e:	9701      	str	r7, [sp, #4]
 801b650:	4632      	mov	r2, r6
 801b652:	4651      	mov	r1, sl
 801b654:	4620      	mov	r0, r4
 801b656:	f7ff fd11 	bl	801b07c <uxr_framing_read_transport>
 801b65a:	2800      	cmp	r0, #0
 801b65c:	f47f ada7 	bne.w	801b1ae <uxr_read_framed_msg+0x2a>
 801b660:	7027      	strb	r7, [r4, #0]
 801b662:	e5a4      	b.n	801b1ae <uxr_read_framed_msg+0x2a>
 801b664:	f8cd b000 	str.w	fp, [sp]
 801b668:	2302      	movs	r3, #2
 801b66a:	9301      	str	r3, [sp, #4]
 801b66c:	4632      	mov	r2, r6
 801b66e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801b670:	4651      	mov	r1, sl
 801b672:	4620      	mov	r0, r4
 801b674:	f7ff fd02 	bl	801b07c <uxr_framing_read_transport>
 801b678:	2800      	cmp	r0, #0
 801b67a:	f47f ad98 	bne.w	801b1ae <uxr_read_framed_msg+0x2a>
 801b67e:	e70e      	b.n	801b49e <uxr_read_framed_msg+0x31a>
 801b680:	f8cd b000 	str.w	fp, [sp]
 801b684:	2303      	movs	r3, #3
 801b686:	e7f0      	b.n	801b66a <uxr_read_framed_msg+0x4e6>

0801b688 <rcl_get_automatic_discovery_range>:
 801b688:	b530      	push	{r4, r5, lr}
 801b68a:	b083      	sub	sp, #12
 801b68c:	2300      	movs	r3, #0
 801b68e:	9301      	str	r3, [sp, #4]
 801b690:	b1c0      	cbz	r0, 801b6c4 <rcl_get_automatic_discovery_range+0x3c>
 801b692:	4604      	mov	r4, r0
 801b694:	a901      	add	r1, sp, #4
 801b696:	4818      	ldr	r0, [pc, #96]	@ (801b6f8 <rcl_get_automatic_discovery_range+0x70>)
 801b698:	f7fb ff28 	bl	80174ec <rcutils_get_env>
 801b69c:	b110      	cbz	r0, 801b6a4 <rcl_get_automatic_discovery_range+0x1c>
 801b69e:	2001      	movs	r0, #1
 801b6a0:	b003      	add	sp, #12
 801b6a2:	bd30      	pop	{r4, r5, pc}
 801b6a4:	9d01      	ldr	r5, [sp, #4]
 801b6a6:	782b      	ldrb	r3, [r5, #0]
 801b6a8:	b923      	cbnz	r3, 801b6b4 <rcl_get_automatic_discovery_range+0x2c>
 801b6aa:	2303      	movs	r3, #3
 801b6ac:	7023      	strb	r3, [r4, #0]
 801b6ae:	2000      	movs	r0, #0
 801b6b0:	b003      	add	sp, #12
 801b6b2:	bd30      	pop	{r4, r5, pc}
 801b6b4:	4911      	ldr	r1, [pc, #68]	@ (801b6fc <rcl_get_automatic_discovery_range+0x74>)
 801b6b6:	4628      	mov	r0, r5
 801b6b8:	f7e4 fda2 	bl	8000200 <strcmp>
 801b6bc:	b928      	cbnz	r0, 801b6ca <rcl_get_automatic_discovery_range+0x42>
 801b6be:	2301      	movs	r3, #1
 801b6c0:	7023      	strb	r3, [r4, #0]
 801b6c2:	e7f4      	b.n	801b6ae <rcl_get_automatic_discovery_range+0x26>
 801b6c4:	200b      	movs	r0, #11
 801b6c6:	b003      	add	sp, #12
 801b6c8:	bd30      	pop	{r4, r5, pc}
 801b6ca:	490d      	ldr	r1, [pc, #52]	@ (801b700 <rcl_get_automatic_discovery_range+0x78>)
 801b6cc:	4628      	mov	r0, r5
 801b6ce:	f7e4 fd97 	bl	8000200 <strcmp>
 801b6d2:	b168      	cbz	r0, 801b6f0 <rcl_get_automatic_discovery_range+0x68>
 801b6d4:	490b      	ldr	r1, [pc, #44]	@ (801b704 <rcl_get_automatic_discovery_range+0x7c>)
 801b6d6:	4628      	mov	r0, r5
 801b6d8:	f7e4 fd92 	bl	8000200 <strcmp>
 801b6dc:	2800      	cmp	r0, #0
 801b6de:	d0e4      	beq.n	801b6aa <rcl_get_automatic_discovery_range+0x22>
 801b6e0:	4909      	ldr	r1, [pc, #36]	@ (801b708 <rcl_get_automatic_discovery_range+0x80>)
 801b6e2:	4628      	mov	r0, r5
 801b6e4:	f7e4 fd8c 	bl	8000200 <strcmp>
 801b6e8:	b910      	cbnz	r0, 801b6f0 <rcl_get_automatic_discovery_range+0x68>
 801b6ea:	2304      	movs	r3, #4
 801b6ec:	7023      	strb	r3, [r4, #0]
 801b6ee:	e7de      	b.n	801b6ae <rcl_get_automatic_discovery_range+0x26>
 801b6f0:	2302      	movs	r3, #2
 801b6f2:	7023      	strb	r3, [r4, #0]
 801b6f4:	e7db      	b.n	801b6ae <rcl_get_automatic_discovery_range+0x26>
 801b6f6:	bf00      	nop
 801b6f8:	0801f718 	.word	0x0801f718
 801b6fc:	0801f738 	.word	0x0801f738
 801b700:	0801f73c 	.word	0x0801f73c
 801b704:	0801f748 	.word	0x0801f748
 801b708:	0801f750 	.word	0x0801f750

0801b70c <rcl_automatic_discovery_range_to_string>:
 801b70c:	2804      	cmp	r0, #4
 801b70e:	bf9a      	itte	ls
 801b710:	4b02      	ldrls	r3, [pc, #8]	@ (801b71c <rcl_automatic_discovery_range_to_string+0x10>)
 801b712:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 801b716:	2000      	movhi	r0, #0
 801b718:	4770      	bx	lr
 801b71a:	bf00      	nop
 801b71c:	0802081c 	.word	0x0802081c

0801b720 <rcl_get_discovery_static_peers>:
 801b720:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b724:	b08c      	sub	sp, #48	@ 0x30
 801b726:	2300      	movs	r3, #0
 801b728:	9304      	str	r3, [sp, #16]
 801b72a:	2800      	cmp	r0, #0
 801b72c:	d04e      	beq.n	801b7cc <rcl_get_discovery_static_peers+0xac>
 801b72e:	460d      	mov	r5, r1
 801b730:	2900      	cmp	r1, #0
 801b732:	d04b      	beq.n	801b7cc <rcl_get_discovery_static_peers+0xac>
 801b734:	4604      	mov	r4, r0
 801b736:	a904      	add	r1, sp, #16
 801b738:	482d      	ldr	r0, [pc, #180]	@ (801b7f0 <rcl_get_discovery_static_peers+0xd0>)
 801b73a:	f7fb fed7 	bl	80174ec <rcutils_get_env>
 801b73e:	b118      	cbz	r0, 801b748 <rcl_get_discovery_static_peers+0x28>
 801b740:	2001      	movs	r0, #1
 801b742:	b00c      	add	sp, #48	@ 0x30
 801b744:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b748:	9b04      	ldr	r3, [sp, #16]
 801b74a:	2b00      	cmp	r3, #0
 801b74c:	d0f8      	beq.n	801b740 <rcl_get_discovery_static_peers+0x20>
 801b74e:	af05      	add	r7, sp, #20
 801b750:	4638      	mov	r0, r7
 801b752:	f000 fc33 	bl	801bfbc <rcutils_get_zero_initialized_string_array>
 801b756:	f105 0308 	add.w	r3, r5, #8
 801b75a:	9703      	str	r7, [sp, #12]
 801b75c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801b760:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801b764:	9804      	ldr	r0, [sp, #16]
 801b766:	e895 000c 	ldmia.w	r5, {r2, r3}
 801b76a:	213b      	movs	r1, #59	@ 0x3b
 801b76c:	f000 fb74 	bl	801be58 <rcutils_split>
 801b770:	2800      	cmp	r0, #0
 801b772:	d1e5      	bne.n	801b740 <rcl_get_discovery_static_peers+0x20>
 801b774:	9905      	ldr	r1, [sp, #20]
 801b776:	462a      	mov	r2, r5
 801b778:	4620      	mov	r0, r4
 801b77a:	f000 fc8d 	bl	801c098 <rmw_discovery_options_init>
 801b77e:	4606      	mov	r6, r0
 801b780:	bb90      	cbnz	r0, 801b7e8 <rcl_get_discovery_static_peers+0xc8>
 801b782:	f8dd 9014 	ldr.w	r9, [sp, #20]
 801b786:	f1b9 0f00 	cmp.w	r9, #0
 801b78a:	d026      	beq.n	801b7da <rcl_get_discovery_static_peers+0xba>
 801b78c:	f8dd a018 	ldr.w	sl, [sp, #24]
 801b790:	4680      	mov	r8, r0
 801b792:	f85a 5026 	ldr.w	r5, [sl, r6, lsl #2]
 801b796:	4628      	mov	r0, r5
 801b798:	f7e4 fd92 	bl	80002c0 <strlen>
 801b79c:	28ff      	cmp	r0, #255	@ 0xff
 801b79e:	4629      	mov	r1, r5
 801b7a0:	ea4f 2506 	mov.w	r5, r6, lsl #8
 801b7a4:	d816      	bhi.n	801b7d4 <rcl_get_discovery_static_peers+0xb4>
 801b7a6:	6860      	ldr	r0, [r4, #4]
 801b7a8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801b7ac:	eb00 2006 	add.w	r0, r0, r6, lsl #8
 801b7b0:	f001 fe65 	bl	801d47e <strncpy>
 801b7b4:	6863      	ldr	r3, [r4, #4]
 801b7b6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 801b7ba:	3601      	adds	r6, #1
 801b7bc:	442b      	add	r3, r5
 801b7be:	454e      	cmp	r6, r9
 801b7c0:	f883 80ff 	strb.w	r8, [r3, #255]	@ 0xff
 801b7c4:	d209      	bcs.n	801b7da <rcl_get_discovery_static_peers+0xba>
 801b7c6:	f8dd a018 	ldr.w	sl, [sp, #24]
 801b7ca:	e7e2      	b.n	801b792 <rcl_get_discovery_static_peers+0x72>
 801b7cc:	200b      	movs	r0, #11
 801b7ce:	b00c      	add	sp, #48	@ 0x30
 801b7d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b7d4:	3601      	adds	r6, #1
 801b7d6:	454e      	cmp	r6, r9
 801b7d8:	d3db      	bcc.n	801b792 <rcl_get_discovery_static_peers+0x72>
 801b7da:	4638      	mov	r0, r7
 801b7dc:	f000 fc2e 	bl	801c03c <rcutils_string_array_fini>
 801b7e0:	3800      	subs	r0, #0
 801b7e2:	bf18      	it	ne
 801b7e4:	2001      	movne	r0, #1
 801b7e6:	e7ac      	b.n	801b742 <rcl_get_discovery_static_peers+0x22>
 801b7e8:	f7f9 f80c 	bl	8014804 <rcl_convert_rmw_ret_to_rcl_ret>
 801b7ec:	e7a9      	b.n	801b742 <rcl_get_discovery_static_peers+0x22>
 801b7ee:	bf00      	nop
 801b7f0:	0801f760 	.word	0x0801f760

0801b7f4 <rcl_get_default_domain_id>:
 801b7f4:	b530      	push	{r4, r5, lr}
 801b7f6:	b083      	sub	sp, #12
 801b7f8:	2300      	movs	r3, #0
 801b7fa:	9300      	str	r3, [sp, #0]
 801b7fc:	b1f0      	cbz	r0, 801b83c <rcl_get_default_domain_id+0x48>
 801b7fe:	4604      	mov	r4, r0
 801b800:	4669      	mov	r1, sp
 801b802:	4812      	ldr	r0, [pc, #72]	@ (801b84c <rcl_get_default_domain_id+0x58>)
 801b804:	f7fb fe72 	bl	80174ec <rcutils_get_env>
 801b808:	4602      	mov	r2, r0
 801b80a:	b108      	cbz	r0, 801b810 <rcl_get_default_domain_id+0x1c>
 801b80c:	2001      	movs	r0, #1
 801b80e:	e004      	b.n	801b81a <rcl_get_default_domain_id+0x26>
 801b810:	9800      	ldr	r0, [sp, #0]
 801b812:	b108      	cbz	r0, 801b818 <rcl_get_default_domain_id+0x24>
 801b814:	7803      	ldrb	r3, [r0, #0]
 801b816:	b913      	cbnz	r3, 801b81e <rcl_get_default_domain_id+0x2a>
 801b818:	2000      	movs	r0, #0
 801b81a:	b003      	add	sp, #12
 801b81c:	bd30      	pop	{r4, r5, pc}
 801b81e:	a901      	add	r1, sp, #4
 801b820:	9201      	str	r2, [sp, #4]
 801b822:	f001 fce9 	bl	801d1f8 <strtoul>
 801b826:	4605      	mov	r5, r0
 801b828:	b158      	cbz	r0, 801b842 <rcl_get_default_domain_id+0x4e>
 801b82a:	1c43      	adds	r3, r0, #1
 801b82c:	d104      	bne.n	801b838 <rcl_get_default_domain_id+0x44>
 801b82e:	f001 fe5f 	bl	801d4f0 <__errno>
 801b832:	6803      	ldr	r3, [r0, #0]
 801b834:	2b22      	cmp	r3, #34	@ 0x22
 801b836:	d0e9      	beq.n	801b80c <rcl_get_default_domain_id+0x18>
 801b838:	6025      	str	r5, [r4, #0]
 801b83a:	e7ed      	b.n	801b818 <rcl_get_default_domain_id+0x24>
 801b83c:	200b      	movs	r0, #11
 801b83e:	b003      	add	sp, #12
 801b840:	bd30      	pop	{r4, r5, pc}
 801b842:	9b01      	ldr	r3, [sp, #4]
 801b844:	781b      	ldrb	r3, [r3, #0]
 801b846:	2b00      	cmp	r3, #0
 801b848:	d0f6      	beq.n	801b838 <rcl_get_default_domain_id+0x44>
 801b84a:	e7df      	b.n	801b80c <rcl_get_default_domain_id+0x18>
 801b84c:	0801f840 	.word	0x0801f840

0801b850 <rcl_expand_topic_name>:
 801b850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b854:	b08b      	sub	sp, #44	@ 0x2c
 801b856:	9306      	str	r3, [sp, #24]
 801b858:	2800      	cmp	r0, #0
 801b85a:	f000 80ad 	beq.w	801b9b8 <rcl_expand_topic_name+0x168>
 801b85e:	460e      	mov	r6, r1
 801b860:	2900      	cmp	r1, #0
 801b862:	f000 80a9 	beq.w	801b9b8 <rcl_expand_topic_name+0x168>
 801b866:	4617      	mov	r7, r2
 801b868:	2a00      	cmp	r2, #0
 801b86a:	f000 80a5 	beq.w	801b9b8 <rcl_expand_topic_name+0x168>
 801b86e:	2b00      	cmp	r3, #0
 801b870:	f000 80a2 	beq.w	801b9b8 <rcl_expand_topic_name+0x168>
 801b874:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801b876:	2b00      	cmp	r3, #0
 801b878:	f000 809e 	beq.w	801b9b8 <rcl_expand_topic_name+0x168>
 801b87c:	2200      	movs	r2, #0
 801b87e:	a909      	add	r1, sp, #36	@ 0x24
 801b880:	4680      	mov	r8, r0
 801b882:	f000 f9f7 	bl	801bc74 <rcl_validate_topic_name>
 801b886:	4605      	mov	r5, r0
 801b888:	2800      	cmp	r0, #0
 801b88a:	f040 8096 	bne.w	801b9ba <rcl_expand_topic_name+0x16a>
 801b88e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b890:	2b00      	cmp	r3, #0
 801b892:	f040 809a 	bne.w	801b9ca <rcl_expand_topic_name+0x17a>
 801b896:	4602      	mov	r2, r0
 801b898:	a909      	add	r1, sp, #36	@ 0x24
 801b89a:	4630      	mov	r0, r6
 801b89c:	f7fc faa0 	bl	8017de0 <rmw_validate_node_name>
 801b8a0:	2800      	cmp	r0, #0
 801b8a2:	f040 808e 	bne.w	801b9c2 <rcl_expand_topic_name+0x172>
 801b8a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801b8a8:	2a00      	cmp	r2, #0
 801b8aa:	f040 8093 	bne.w	801b9d4 <rcl_expand_topic_name+0x184>
 801b8ae:	a909      	add	r1, sp, #36	@ 0x24
 801b8b0:	4638      	mov	r0, r7
 801b8b2:	f7fc fa77 	bl	8017da4 <rmw_validate_namespace>
 801b8b6:	2800      	cmp	r0, #0
 801b8b8:	f040 8083 	bne.w	801b9c2 <rcl_expand_topic_name+0x172>
 801b8bc:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 801b8be:	2d00      	cmp	r5, #0
 801b8c0:	f040 80f4 	bne.w	801baac <rcl_expand_topic_name+0x25c>
 801b8c4:	217b      	movs	r1, #123	@ 0x7b
 801b8c6:	4640      	mov	r0, r8
 801b8c8:	f001 fdba 	bl	801d440 <strchr>
 801b8cc:	f898 3000 	ldrb.w	r3, [r8]
 801b8d0:	2b2f      	cmp	r3, #47	@ 0x2f
 801b8d2:	4604      	mov	r4, r0
 801b8d4:	f000 809f 	beq.w	801ba16 <rcl_expand_topic_name+0x1c6>
 801b8d8:	2b7e      	cmp	r3, #126	@ 0x7e
 801b8da:	f040 80e9 	bne.w	801bab0 <rcl_expand_topic_name+0x260>
 801b8de:	4638      	mov	r0, r7
 801b8e0:	f7e4 fcee 	bl	80002c0 <strlen>
 801b8e4:	4a82      	ldr	r2, [pc, #520]	@ (801baf0 <rcl_expand_topic_name+0x2a0>)
 801b8e6:	4b83      	ldr	r3, [pc, #524]	@ (801baf4 <rcl_expand_topic_name+0x2a4>)
 801b8e8:	2801      	cmp	r0, #1
 801b8ea:	bf08      	it	eq
 801b8ec:	4613      	moveq	r3, r2
 801b8ee:	9302      	str	r3, [sp, #8]
 801b8f0:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801b8f2:	9300      	str	r3, [sp, #0]
 801b8f4:	e9cd 7603 	strd	r7, r6, [sp, #12]
 801b8f8:	f108 0301 	add.w	r3, r8, #1
 801b8fc:	9305      	str	r3, [sp, #20]
 801b8fe:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801b902:	9301      	str	r3, [sp, #4]
 801b904:	ab14      	add	r3, sp, #80	@ 0x50
 801b906:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801b908:	f7fb fe08 	bl	801751c <rcutils_format_string_limit>
 801b90c:	4682      	mov	sl, r0
 801b90e:	2800      	cmp	r0, #0
 801b910:	f000 80d1 	beq.w	801bab6 <rcl_expand_topic_name+0x266>
 801b914:	2c00      	cmp	r4, #0
 801b916:	f000 8085 	beq.w	801ba24 <rcl_expand_topic_name+0x1d4>
 801b91a:	217b      	movs	r1, #123	@ 0x7b
 801b91c:	f001 fd90 	bl	801d440 <strchr>
 801b920:	46d1      	mov	r9, sl
 801b922:	4604      	mov	r4, r0
 801b924:	9507      	str	r5, [sp, #28]
 801b926:	464d      	mov	r5, r9
 801b928:	2c00      	cmp	r4, #0
 801b92a:	f000 80a0 	beq.w	801ba6e <rcl_expand_topic_name+0x21e>
 801b92e:	217d      	movs	r1, #125	@ 0x7d
 801b930:	4628      	mov	r0, r5
 801b932:	f001 fd85 	bl	801d440 <strchr>
 801b936:	eba0 0904 	sub.w	r9, r0, r4
 801b93a:	f109 0b01 	add.w	fp, r9, #1
 801b93e:	486e      	ldr	r0, [pc, #440]	@ (801baf8 <rcl_expand_topic_name+0x2a8>)
 801b940:	465a      	mov	r2, fp
 801b942:	4621      	mov	r1, r4
 801b944:	f001 fd89 	bl	801d45a <strncmp>
 801b948:	2800      	cmp	r0, #0
 801b94a:	d069      	beq.n	801ba20 <rcl_expand_topic_name+0x1d0>
 801b94c:	486b      	ldr	r0, [pc, #428]	@ (801bafc <rcl_expand_topic_name+0x2ac>)
 801b94e:	465a      	mov	r2, fp
 801b950:	4621      	mov	r1, r4
 801b952:	f001 fd82 	bl	801d45a <strncmp>
 801b956:	b130      	cbz	r0, 801b966 <rcl_expand_topic_name+0x116>
 801b958:	4869      	ldr	r0, [pc, #420]	@ (801bb00 <rcl_expand_topic_name+0x2b0>)
 801b95a:	465a      	mov	r2, fp
 801b95c:	4621      	mov	r1, r4
 801b95e:	f001 fd7c 	bl	801d45a <strncmp>
 801b962:	2800      	cmp	r0, #0
 801b964:	d138      	bne.n	801b9d8 <rcl_expand_topic_name+0x188>
 801b966:	46b9      	mov	r9, r7
 801b968:	ab16      	add	r3, sp, #88	@ 0x58
 801b96a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801b96e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801b972:	ab14      	add	r3, sp, #80	@ 0x50
 801b974:	4620      	mov	r0, r4
 801b976:	cb0c      	ldmia	r3, {r2, r3}
 801b978:	4659      	mov	r1, fp
 801b97a:	f7fb ff23 	bl	80177c4 <rcutils_strndup>
 801b97e:	4604      	mov	r4, r0
 801b980:	2800      	cmp	r0, #0
 801b982:	f000 809d 	beq.w	801bac0 <rcl_expand_topic_name+0x270>
 801b986:	464a      	mov	r2, r9
 801b988:	4628      	mov	r0, r5
 801b98a:	ab14      	add	r3, sp, #80	@ 0x50
 801b98c:	4621      	mov	r1, r4
 801b98e:	f7fb fdff 	bl	8017590 <rcutils_repl_str>
 801b992:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801b994:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801b996:	4605      	mov	r5, r0
 801b998:	4620      	mov	r0, r4
 801b99a:	4798      	blx	r3
 801b99c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801b99e:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801b9a0:	4650      	mov	r0, sl
 801b9a2:	4798      	blx	r3
 801b9a4:	2d00      	cmp	r5, #0
 801b9a6:	f000 8086 	beq.w	801bab6 <rcl_expand_topic_name+0x266>
 801b9aa:	217b      	movs	r1, #123	@ 0x7b
 801b9ac:	4628      	mov	r0, r5
 801b9ae:	f001 fd47 	bl	801d440 <strchr>
 801b9b2:	46aa      	mov	sl, r5
 801b9b4:	4604      	mov	r4, r0
 801b9b6:	e7b7      	b.n	801b928 <rcl_expand_topic_name+0xd8>
 801b9b8:	250b      	movs	r5, #11
 801b9ba:	4628      	mov	r0, r5
 801b9bc:	b00b      	add	sp, #44	@ 0x2c
 801b9be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b9c2:	f7f8 ff1f 	bl	8014804 <rcl_convert_rmw_ret_to_rcl_ret>
 801b9c6:	4605      	mov	r5, r0
 801b9c8:	e7f7      	b.n	801b9ba <rcl_expand_topic_name+0x16a>
 801b9ca:	2567      	movs	r5, #103	@ 0x67
 801b9cc:	4628      	mov	r0, r5
 801b9ce:	b00b      	add	sp, #44	@ 0x2c
 801b9d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b9d4:	25c9      	movs	r5, #201	@ 0xc9
 801b9d6:	e7f0      	b.n	801b9ba <rcl_expand_topic_name+0x16a>
 801b9d8:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 801b9dc:	9806      	ldr	r0, [sp, #24]
 801b9de:	1c61      	adds	r1, r4, #1
 801b9e0:	f7fc f80c 	bl	80179fc <rcutils_string_map_getn>
 801b9e4:	4681      	mov	r9, r0
 801b9e6:	2800      	cmp	r0, #0
 801b9e8:	d1be      	bne.n	801b968 <rcl_expand_topic_name+0x118>
 801b9ea:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801b9ec:	ab16      	add	r3, sp, #88	@ 0x58
 801b9ee:	6010      	str	r0, [r2, #0]
 801b9f0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801b9f4:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801b9f8:	ab14      	add	r3, sp, #80	@ 0x50
 801b9fa:	cb0c      	ldmia	r3, {r2, r3}
 801b9fc:	4659      	mov	r1, fp
 801b9fe:	4620      	mov	r0, r4
 801ba00:	f7fb fee0 	bl	80177c4 <rcutils_strndup>
 801ba04:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801ba06:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801ba08:	4798      	blx	r3
 801ba0a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801ba0c:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801ba0e:	4650      	mov	r0, sl
 801ba10:	4798      	blx	r3
 801ba12:	2569      	movs	r5, #105	@ 0x69
 801ba14:	e7d1      	b.n	801b9ba <rcl_expand_topic_name+0x16a>
 801ba16:	2800      	cmp	r0, #0
 801ba18:	d059      	beq.n	801bace <rcl_expand_topic_name+0x27e>
 801ba1a:	46c1      	mov	r9, r8
 801ba1c:	46aa      	mov	sl, r5
 801ba1e:	e781      	b.n	801b924 <rcl_expand_topic_name+0xd4>
 801ba20:	46b1      	mov	r9, r6
 801ba22:	e7a1      	b.n	801b968 <rcl_expand_topic_name+0x118>
 801ba24:	f89a 3000 	ldrb.w	r3, [sl]
 801ba28:	2b2f      	cmp	r3, #47	@ 0x2f
 801ba2a:	d01c      	beq.n	801ba66 <rcl_expand_topic_name+0x216>
 801ba2c:	4638      	mov	r0, r7
 801ba2e:	f7e4 fc47 	bl	80002c0 <strlen>
 801ba32:	4a34      	ldr	r2, [pc, #208]	@ (801bb04 <rcl_expand_topic_name+0x2b4>)
 801ba34:	4b34      	ldr	r3, [pc, #208]	@ (801bb08 <rcl_expand_topic_name+0x2b8>)
 801ba36:	f8cd a010 	str.w	sl, [sp, #16]
 801ba3a:	2801      	cmp	r0, #1
 801ba3c:	bf18      	it	ne
 801ba3e:	4613      	movne	r3, r2
 801ba40:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 801ba44:	e9cd 1301 	strd	r1, r3, [sp, #4]
 801ba48:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801ba4a:	9703      	str	r7, [sp, #12]
 801ba4c:	9200      	str	r2, [sp, #0]
 801ba4e:	ab14      	add	r3, sp, #80	@ 0x50
 801ba50:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801ba52:	f7fb fd63 	bl	801751c <rcutils_format_string_limit>
 801ba56:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801ba58:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801ba5a:	4604      	mov	r4, r0
 801ba5c:	4650      	mov	r0, sl
 801ba5e:	4798      	blx	r3
 801ba60:	46a2      	mov	sl, r4
 801ba62:	4653      	mov	r3, sl
 801ba64:	b33b      	cbz	r3, 801bab6 <rcl_expand_topic_name+0x266>
 801ba66:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801ba68:	f8c3 a000 	str.w	sl, [r3]
 801ba6c:	e7a5      	b.n	801b9ba <rcl_expand_topic_name+0x16a>
 801ba6e:	4653      	mov	r3, sl
 801ba70:	9d07      	ldr	r5, [sp, #28]
 801ba72:	2b00      	cmp	r3, #0
 801ba74:	d1d6      	bne.n	801ba24 <rcl_expand_topic_name+0x1d4>
 801ba76:	f898 3000 	ldrb.w	r3, [r8]
 801ba7a:	2b2f      	cmp	r3, #47	@ 0x2f
 801ba7c:	d0f3      	beq.n	801ba66 <rcl_expand_topic_name+0x216>
 801ba7e:	4638      	mov	r0, r7
 801ba80:	f7e4 fc1e 	bl	80002c0 <strlen>
 801ba84:	4a1f      	ldr	r2, [pc, #124]	@ (801bb04 <rcl_expand_topic_name+0x2b4>)
 801ba86:	4b20      	ldr	r3, [pc, #128]	@ (801bb08 <rcl_expand_topic_name+0x2b8>)
 801ba88:	f8cd 8010 	str.w	r8, [sp, #16]
 801ba8c:	2801      	cmp	r0, #1
 801ba8e:	bf18      	it	ne
 801ba90:	4613      	movne	r3, r2
 801ba92:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 801ba96:	e9cd 1301 	strd	r1, r3, [sp, #4]
 801ba9a:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801ba9c:	9703      	str	r7, [sp, #12]
 801ba9e:	9200      	str	r2, [sp, #0]
 801baa0:	ab14      	add	r3, sp, #80	@ 0x50
 801baa2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801baa4:	f7fb fd3a 	bl	801751c <rcutils_format_string_limit>
 801baa8:	4682      	mov	sl, r0
 801baaa:	e7da      	b.n	801ba62 <rcl_expand_topic_name+0x212>
 801baac:	25ca      	movs	r5, #202	@ 0xca
 801baae:	e784      	b.n	801b9ba <rcl_expand_topic_name+0x16a>
 801bab0:	2800      	cmp	r0, #0
 801bab2:	d1b2      	bne.n	801ba1a <rcl_expand_topic_name+0x1ca>
 801bab4:	e7e3      	b.n	801ba7e <rcl_expand_topic_name+0x22e>
 801bab6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801bab8:	2300      	movs	r3, #0
 801baba:	6013      	str	r3, [r2, #0]
 801babc:	250a      	movs	r5, #10
 801babe:	e77c      	b.n	801b9ba <rcl_expand_topic_name+0x16a>
 801bac0:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	@ 0x60
 801bac4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801bac6:	6014      	str	r4, [r2, #0]
 801bac8:	4650      	mov	r0, sl
 801baca:	4798      	blx	r3
 801bacc:	e7f6      	b.n	801babc <rcl_expand_topic_name+0x26c>
 801bace:	ab17      	add	r3, sp, #92	@ 0x5c
 801bad0:	e893 0003 	ldmia.w	r3, {r0, r1}
 801bad4:	e88d 0003 	stmia.w	sp, {r0, r1}
 801bad8:	ab14      	add	r3, sp, #80	@ 0x50
 801bada:	cb0e      	ldmia	r3, {r1, r2, r3}
 801badc:	4640      	mov	r0, r8
 801bade:	f7fb fe3b 	bl	8017758 <rcutils_strdup>
 801bae2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801bae4:	6018      	str	r0, [r3, #0]
 801bae6:	2800      	cmp	r0, #0
 801bae8:	f47f af67 	bne.w	801b9ba <rcl_expand_topic_name+0x16a>
 801baec:	e7e6      	b.n	801babc <rcl_expand_topic_name+0x26c>
 801baee:	bf00      	nop
 801baf0:	0801ed78 	.word	0x0801ed78
 801baf4:	0801f850 	.word	0x0801f850
 801baf8:	0801f858 	.word	0x0801f858
 801bafc:	0801f860 	.word	0x0801f860
 801bb00:	0801f868 	.word	0x0801f868
 801bb04:	0801f3c0 	.word	0x0801f3c0
 801bb08:	0801ed88 	.word	0x0801ed88

0801bb0c <rcl_get_default_topic_name_substitutions>:
 801bb0c:	2800      	cmp	r0, #0
 801bb0e:	bf0c      	ite	eq
 801bb10:	200b      	moveq	r0, #11
 801bb12:	2000      	movne	r0, #0
 801bb14:	4770      	bx	lr
 801bb16:	bf00      	nop

0801bb18 <rcl_get_zero_initialized_guard_condition>:
 801bb18:	4a03      	ldr	r2, [pc, #12]	@ (801bb28 <rcl_get_zero_initialized_guard_condition+0x10>)
 801bb1a:	4603      	mov	r3, r0
 801bb1c:	e892 0003 	ldmia.w	r2, {r0, r1}
 801bb20:	e883 0003 	stmia.w	r3, {r0, r1}
 801bb24:	4618      	mov	r0, r3
 801bb26:	4770      	bx	lr
 801bb28:	08020830 	.word	0x08020830

0801bb2c <rcl_guard_condition_init_from_rmw>:
 801bb2c:	b082      	sub	sp, #8
 801bb2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bb32:	b086      	sub	sp, #24
 801bb34:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 801bb38:	4604      	mov	r4, r0
 801bb3a:	f84c 3f04 	str.w	r3, [ip, #4]!
 801bb3e:	460e      	mov	r6, r1
 801bb40:	4617      	mov	r7, r2
 801bb42:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801bb46:	f10d 0e04 	add.w	lr, sp, #4
 801bb4a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801bb4e:	f8dc 3000 	ldr.w	r3, [ip]
 801bb52:	f8ce 3000 	str.w	r3, [lr]
 801bb56:	a801      	add	r0, sp, #4
 801bb58:	f7f1 fb50 	bl	800d1fc <rcutils_allocator_is_valid>
 801bb5c:	b350      	cbz	r0, 801bbb4 <rcl_guard_condition_init_from_rmw+0x88>
 801bb5e:	b34c      	cbz	r4, 801bbb4 <rcl_guard_condition_init_from_rmw+0x88>
 801bb60:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801bb64:	f1b8 0f00 	cmp.w	r8, #0
 801bb68:	d11e      	bne.n	801bba8 <rcl_guard_condition_init_from_rmw+0x7c>
 801bb6a:	b31f      	cbz	r7, 801bbb4 <rcl_guard_condition_init_from_rmw+0x88>
 801bb6c:	4638      	mov	r0, r7
 801bb6e:	f7f8 fe69 	bl	8014844 <rcl_context_is_valid>
 801bb72:	b328      	cbz	r0, 801bbc0 <rcl_guard_condition_init_from_rmw+0x94>
 801bb74:	9b01      	ldr	r3, [sp, #4]
 801bb76:	9905      	ldr	r1, [sp, #20]
 801bb78:	201c      	movs	r0, #28
 801bb7a:	4798      	blx	r3
 801bb7c:	4605      	mov	r5, r0
 801bb7e:	6060      	str	r0, [r4, #4]
 801bb80:	b358      	cbz	r0, 801bbda <rcl_guard_condition_init_from_rmw+0xae>
 801bb82:	b1fe      	cbz	r6, 801bbc4 <rcl_guard_condition_init_from_rmw+0x98>
 801bb84:	6006      	str	r6, [r0, #0]
 801bb86:	f880 8004 	strb.w	r8, [r0, #4]
 801bb8a:	ac01      	add	r4, sp, #4
 801bb8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801bb8e:	f105 0c08 	add.w	ip, r5, #8
 801bb92:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801bb96:	6823      	ldr	r3, [r4, #0]
 801bb98:	f8cc 3000 	str.w	r3, [ip]
 801bb9c:	2000      	movs	r0, #0
 801bb9e:	b006      	add	sp, #24
 801bba0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801bba4:	b002      	add	sp, #8
 801bba6:	4770      	bx	lr
 801bba8:	2064      	movs	r0, #100	@ 0x64
 801bbaa:	b006      	add	sp, #24
 801bbac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801bbb0:	b002      	add	sp, #8
 801bbb2:	4770      	bx	lr
 801bbb4:	200b      	movs	r0, #11
 801bbb6:	b006      	add	sp, #24
 801bbb8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801bbbc:	b002      	add	sp, #8
 801bbbe:	4770      	bx	lr
 801bbc0:	2065      	movs	r0, #101	@ 0x65
 801bbc2:	e7f2      	b.n	801bbaa <rcl_guard_condition_init_from_rmw+0x7e>
 801bbc4:	6838      	ldr	r0, [r7, #0]
 801bbc6:	3028      	adds	r0, #40	@ 0x28
 801bbc8:	f000 fb7a 	bl	801c2c0 <rmw_create_guard_condition>
 801bbcc:	6028      	str	r0, [r5, #0]
 801bbce:	6865      	ldr	r5, [r4, #4]
 801bbd0:	682e      	ldr	r6, [r5, #0]
 801bbd2:	b126      	cbz	r6, 801bbde <rcl_guard_condition_init_from_rmw+0xb2>
 801bbd4:	2301      	movs	r3, #1
 801bbd6:	712b      	strb	r3, [r5, #4]
 801bbd8:	e7d7      	b.n	801bb8a <rcl_guard_condition_init_from_rmw+0x5e>
 801bbda:	200a      	movs	r0, #10
 801bbdc:	e7e5      	b.n	801bbaa <rcl_guard_condition_init_from_rmw+0x7e>
 801bbde:	4628      	mov	r0, r5
 801bbe0:	9b02      	ldr	r3, [sp, #8]
 801bbe2:	9905      	ldr	r1, [sp, #20]
 801bbe4:	4798      	blx	r3
 801bbe6:	2001      	movs	r0, #1
 801bbe8:	6066      	str	r6, [r4, #4]
 801bbea:	e7de      	b.n	801bbaa <rcl_guard_condition_init_from_rmw+0x7e>

0801bbec <rcl_guard_condition_fini>:
 801bbec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bbee:	b1d8      	cbz	r0, 801bc28 <rcl_guard_condition_fini+0x3c>
 801bbf0:	4604      	mov	r4, r0
 801bbf2:	6840      	ldr	r0, [r0, #4]
 801bbf4:	b158      	cbz	r0, 801bc0e <rcl_guard_condition_fini+0x22>
 801bbf6:	6803      	ldr	r3, [r0, #0]
 801bbf8:	68c6      	ldr	r6, [r0, #12]
 801bbfa:	6987      	ldr	r7, [r0, #24]
 801bbfc:	b153      	cbz	r3, 801bc14 <rcl_guard_condition_fini+0x28>
 801bbfe:	7905      	ldrb	r5, [r0, #4]
 801bc00:	b955      	cbnz	r5, 801bc18 <rcl_guard_condition_fini+0x2c>
 801bc02:	4639      	mov	r1, r7
 801bc04:	47b0      	blx	r6
 801bc06:	2300      	movs	r3, #0
 801bc08:	6063      	str	r3, [r4, #4]
 801bc0a:	4628      	mov	r0, r5
 801bc0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bc0e:	4605      	mov	r5, r0
 801bc10:	4628      	mov	r0, r5
 801bc12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bc14:	461d      	mov	r5, r3
 801bc16:	e7f4      	b.n	801bc02 <rcl_guard_condition_fini+0x16>
 801bc18:	4618      	mov	r0, r3
 801bc1a:	f000 fb65 	bl	801c2e8 <rmw_destroy_guard_condition>
 801bc1e:	1e05      	subs	r5, r0, #0
 801bc20:	bf18      	it	ne
 801bc22:	2501      	movne	r5, #1
 801bc24:	6860      	ldr	r0, [r4, #4]
 801bc26:	e7ec      	b.n	801bc02 <rcl_guard_condition_fini+0x16>
 801bc28:	250b      	movs	r5, #11
 801bc2a:	4628      	mov	r0, r5
 801bc2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bc2e:	bf00      	nop

0801bc30 <rcl_guard_condition_get_default_options>:
 801bc30:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bc32:	b087      	sub	sp, #28
 801bc34:	4606      	mov	r6, r0
 801bc36:	4668      	mov	r0, sp
 801bc38:	f7f1 fab4 	bl	800d1a4 <rcutils_get_default_allocator>
 801bc3c:	46ee      	mov	lr, sp
 801bc3e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801bc42:	4c08      	ldr	r4, [pc, #32]	@ (801bc64 <rcl_guard_condition_get_default_options+0x34>)
 801bc44:	46a4      	mov	ip, r4
 801bc46:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801bc4a:	4625      	mov	r5, r4
 801bc4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801bc4e:	4634      	mov	r4, r6
 801bc50:	f8de 7000 	ldr.w	r7, [lr]
 801bc54:	f8cc 7000 	str.w	r7, [ip]
 801bc58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801bc5a:	4630      	mov	r0, r6
 801bc5c:	6027      	str	r7, [r4, #0]
 801bc5e:	b007      	add	sp, #28
 801bc60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bc62:	bf00      	nop
 801bc64:	20019c10 	.word	0x20019c10

0801bc68 <rcl_guard_condition_get_rmw_handle>:
 801bc68:	b110      	cbz	r0, 801bc70 <rcl_guard_condition_get_rmw_handle+0x8>
 801bc6a:	6840      	ldr	r0, [r0, #4]
 801bc6c:	b100      	cbz	r0, 801bc70 <rcl_guard_condition_get_rmw_handle+0x8>
 801bc6e:	6800      	ldr	r0, [r0, #0]
 801bc70:	4770      	bx	lr
 801bc72:	bf00      	nop

0801bc74 <rcl_validate_topic_name>:
 801bc74:	2800      	cmp	r0, #0
 801bc76:	d06b      	beq.n	801bd50 <rcl_validate_topic_name+0xdc>
 801bc78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bc7c:	460d      	mov	r5, r1
 801bc7e:	2900      	cmp	r1, #0
 801bc80:	d06d      	beq.n	801bd5e <rcl_validate_topic_name+0xea>
 801bc82:	4616      	mov	r6, r2
 801bc84:	4604      	mov	r4, r0
 801bc86:	f7e4 fb1b 	bl	80002c0 <strlen>
 801bc8a:	b190      	cbz	r0, 801bcb2 <rcl_validate_topic_name+0x3e>
 801bc8c:	7821      	ldrb	r1, [r4, #0]
 801bc8e:	4a71      	ldr	r2, [pc, #452]	@ (801be54 <rcl_validate_topic_name+0x1e0>)
 801bc90:	5c53      	ldrb	r3, [r2, r1]
 801bc92:	f013 0304 	ands.w	r3, r3, #4
 801bc96:	d15d      	bne.n	801bd54 <rcl_validate_topic_name+0xe0>
 801bc98:	1e47      	subs	r7, r0, #1
 801bc9a:	f814 c007 	ldrb.w	ip, [r4, r7]
 801bc9e:	f1bc 0f2f 	cmp.w	ip, #47	@ 0x2f
 801bca2:	d10d      	bne.n	801bcc0 <rcl_validate_topic_name+0x4c>
 801bca4:	2302      	movs	r3, #2
 801bca6:	602b      	str	r3, [r5, #0]
 801bca8:	b146      	cbz	r6, 801bcbc <rcl_validate_topic_name+0x48>
 801bcaa:	6037      	str	r7, [r6, #0]
 801bcac:	2000      	movs	r0, #0
 801bcae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bcb2:	2301      	movs	r3, #1
 801bcb4:	602b      	str	r3, [r5, #0]
 801bcb6:	b10e      	cbz	r6, 801bcbc <rcl_validate_topic_name+0x48>
 801bcb8:	2300      	movs	r3, #0
 801bcba:	6033      	str	r3, [r6, #0]
 801bcbc:	2000      	movs	r0, #0
 801bcbe:	e7f6      	b.n	801bcae <rcl_validate_topic_name+0x3a>
 801bcc0:	f104 38ff 	add.w	r8, r4, #4294967295	@ 0xffffffff
 801bcc4:	469a      	mov	sl, r3
 801bcc6:	469e      	mov	lr, r3
 801bcc8:	f818 9f01 	ldrb.w	r9, [r8, #1]!
 801bccc:	f1a9 0c2f 	sub.w	ip, r9, #47	@ 0x2f
 801bcd0:	f1bc 0f4f 	cmp.w	ip, #79	@ 0x4f
 801bcd4:	d85b      	bhi.n	801bd8e <rcl_validate_topic_name+0x11a>
 801bcd6:	e8df f00c 	tbb	[pc, ip]
 801bcda:	4463      	.short	0x4463
 801bcdc:	44444444 	.word	0x44444444
 801bce0:	44444444 	.word	0x44444444
 801bce4:	5a5a5a44 	.word	0x5a5a5a44
 801bce8:	5a5a5a5a 	.word	0x5a5a5a5a
 801bcec:	44444444 	.word	0x44444444
 801bcf0:	44444444 	.word	0x44444444
 801bcf4:	44444444 	.word	0x44444444
 801bcf8:	44444444 	.word	0x44444444
 801bcfc:	44444444 	.word	0x44444444
 801bd00:	44444444 	.word	0x44444444
 801bd04:	5a5a4444 	.word	0x5a5a4444
 801bd08:	5a2e5a5a 	.word	0x5a2e5a5a
 801bd0c:	44444444 	.word	0x44444444
 801bd10:	44444444 	.word	0x44444444
 801bd14:	44444444 	.word	0x44444444
 801bd18:	44444444 	.word	0x44444444
 801bd1c:	44444444 	.word	0x44444444
 801bd20:	44444444 	.word	0x44444444
 801bd24:	5a284444 	.word	0x5a284444
 801bd28:	6b73      	.short	0x6b73
 801bd2a:	f1ba 0f00 	cmp.w	sl, #0
 801bd2e:	d13a      	bne.n	801bda6 <rcl_validate_topic_name+0x132>
 801bd30:	4673      	mov	r3, lr
 801bd32:	f04f 0a01 	mov.w	sl, #1
 801bd36:	f10e 0e01 	add.w	lr, lr, #1
 801bd3a:	4570      	cmp	r0, lr
 801bd3c:	d1c4      	bne.n	801bcc8 <rcl_validate_topic_name+0x54>
 801bd3e:	f1ba 0f00 	cmp.w	sl, #0
 801bd42:	d048      	beq.n	801bdd6 <rcl_validate_topic_name+0x162>
 801bd44:	2205      	movs	r2, #5
 801bd46:	602a      	str	r2, [r5, #0]
 801bd48:	2e00      	cmp	r6, #0
 801bd4a:	d0b7      	beq.n	801bcbc <rcl_validate_topic_name+0x48>
 801bd4c:	6033      	str	r3, [r6, #0]
 801bd4e:	e7b5      	b.n	801bcbc <rcl_validate_topic_name+0x48>
 801bd50:	200b      	movs	r0, #11
 801bd52:	4770      	bx	lr
 801bd54:	2304      	movs	r3, #4
 801bd56:	602b      	str	r3, [r5, #0]
 801bd58:	2e00      	cmp	r6, #0
 801bd5a:	d1ad      	bne.n	801bcb8 <rcl_validate_topic_name+0x44>
 801bd5c:	e7ae      	b.n	801bcbc <rcl_validate_topic_name+0x48>
 801bd5e:	200b      	movs	r0, #11
 801bd60:	e7a5      	b.n	801bcae <rcl_validate_topic_name+0x3a>
 801bd62:	f812 c009 	ldrb.w	ip, [r2, r9]
 801bd66:	f01c 0f04 	tst.w	ip, #4
 801bd6a:	d0e4      	beq.n	801bd36 <rcl_validate_topic_name+0xc2>
 801bd6c:	f1ba 0f00 	cmp.w	sl, #0
 801bd70:	d0e1      	beq.n	801bd36 <rcl_validate_topic_name+0xc2>
 801bd72:	f1be 0f00 	cmp.w	lr, #0
 801bd76:	d0de      	beq.n	801bd36 <rcl_validate_topic_name+0xc2>
 801bd78:	f10e 3cff 	add.w	ip, lr, #4294967295	@ 0xffffffff
 801bd7c:	4563      	cmp	r3, ip
 801bd7e:	d1da      	bne.n	801bd36 <rcl_validate_topic_name+0xc2>
 801bd80:	2309      	movs	r3, #9
 801bd82:	602b      	str	r3, [r5, #0]
 801bd84:	2e00      	cmp	r6, #0
 801bd86:	d099      	beq.n	801bcbc <rcl_validate_topic_name+0x48>
 801bd88:	f8c6 e000 	str.w	lr, [r6]
 801bd8c:	e796      	b.n	801bcbc <rcl_validate_topic_name+0x48>
 801bd8e:	f1ba 0f00 	cmp.w	sl, #0
 801bd92:	bf0c      	ite	eq
 801bd94:	2303      	moveq	r3, #3
 801bd96:	2308      	movne	r3, #8
 801bd98:	602b      	str	r3, [r5, #0]
 801bd9a:	2e00      	cmp	r6, #0
 801bd9c:	d1f4      	bne.n	801bd88 <rcl_validate_topic_name+0x114>
 801bd9e:	e78d      	b.n	801bcbc <rcl_validate_topic_name+0x48>
 801bda0:	f1ba 0f00 	cmp.w	sl, #0
 801bda4:	d0c7      	beq.n	801bd36 <rcl_validate_topic_name+0xc2>
 801bda6:	2308      	movs	r3, #8
 801bda8:	602b      	str	r3, [r5, #0]
 801bdaa:	2e00      	cmp	r6, #0
 801bdac:	d1ec      	bne.n	801bd88 <rcl_validate_topic_name+0x114>
 801bdae:	e785      	b.n	801bcbc <rcl_validate_topic_name+0x48>
 801bdb0:	f1be 0f00 	cmp.w	lr, #0
 801bdb4:	d0bf      	beq.n	801bd36 <rcl_validate_topic_name+0xc2>
 801bdb6:	2306      	movs	r3, #6
 801bdb8:	602b      	str	r3, [r5, #0]
 801bdba:	2e00      	cmp	r6, #0
 801bdbc:	d1e4      	bne.n	801bd88 <rcl_validate_topic_name+0x114>
 801bdbe:	e77d      	b.n	801bcbc <rcl_validate_topic_name+0x48>
 801bdc0:	f1ba 0f00 	cmp.w	sl, #0
 801bdc4:	d104      	bne.n	801bdd0 <rcl_validate_topic_name+0x15c>
 801bdc6:	2305      	movs	r3, #5
 801bdc8:	602b      	str	r3, [r5, #0]
 801bdca:	2e00      	cmp	r6, #0
 801bdcc:	d1dc      	bne.n	801bd88 <rcl_validate_topic_name+0x114>
 801bdce:	e775      	b.n	801bcbc <rcl_validate_topic_name+0x48>
 801bdd0:	f04f 0a00 	mov.w	sl, #0
 801bdd4:	e7af      	b.n	801bd36 <rcl_validate_topic_name+0xc2>
 801bdd6:	297e      	cmp	r1, #126	@ 0x7e
 801bdd8:	d01d      	beq.n	801be16 <rcl_validate_topic_name+0x1a2>
 801bdda:	2101      	movs	r1, #1
 801bddc:	e006      	b.n	801bdec <rcl_validate_topic_name+0x178>
 801bdde:	458e      	cmp	lr, r1
 801bde0:	f104 0401 	add.w	r4, r4, #1
 801bde4:	f101 0301 	add.w	r3, r1, #1
 801bde8:	d912      	bls.n	801be10 <rcl_validate_topic_name+0x19c>
 801bdea:	4619      	mov	r1, r3
 801bdec:	4557      	cmp	r7, sl
 801bdee:	f10a 0a01 	add.w	sl, sl, #1
 801bdf2:	d0f4      	beq.n	801bdde <rcl_validate_topic_name+0x16a>
 801bdf4:	7823      	ldrb	r3, [r4, #0]
 801bdf6:	2b2f      	cmp	r3, #47	@ 0x2f
 801bdf8:	d1f1      	bne.n	801bdde <rcl_validate_topic_name+0x16a>
 801bdfa:	7863      	ldrb	r3, [r4, #1]
 801bdfc:	5cd3      	ldrb	r3, [r2, r3]
 801bdfe:	075b      	lsls	r3, r3, #29
 801be00:	d5ed      	bpl.n	801bdde <rcl_validate_topic_name+0x16a>
 801be02:	2304      	movs	r3, #4
 801be04:	602b      	str	r3, [r5, #0]
 801be06:	2e00      	cmp	r6, #0
 801be08:	f43f af58 	beq.w	801bcbc <rcl_validate_topic_name+0x48>
 801be0c:	6031      	str	r1, [r6, #0]
 801be0e:	e755      	b.n	801bcbc <rcl_validate_topic_name+0x48>
 801be10:	2300      	movs	r3, #0
 801be12:	602b      	str	r3, [r5, #0]
 801be14:	e752      	b.n	801bcbc <rcl_validate_topic_name+0x48>
 801be16:	4653      	mov	r3, sl
 801be18:	2101      	movs	r1, #1
 801be1a:	e00a      	b.n	801be32 <rcl_validate_topic_name+0x1be>
 801be1c:	2b01      	cmp	r3, #1
 801be1e:	d012      	beq.n	801be46 <rcl_validate_topic_name+0x1d2>
 801be20:	458e      	cmp	lr, r1
 801be22:	f103 0301 	add.w	r3, r3, #1
 801be26:	f104 0401 	add.w	r4, r4, #1
 801be2a:	f101 0001 	add.w	r0, r1, #1
 801be2e:	d9ef      	bls.n	801be10 <rcl_validate_topic_name+0x19c>
 801be30:	4601      	mov	r1, r0
 801be32:	429f      	cmp	r7, r3
 801be34:	d0f4      	beq.n	801be20 <rcl_validate_topic_name+0x1ac>
 801be36:	7820      	ldrb	r0, [r4, #0]
 801be38:	282f      	cmp	r0, #47	@ 0x2f
 801be3a:	d1ef      	bne.n	801be1c <rcl_validate_topic_name+0x1a8>
 801be3c:	7860      	ldrb	r0, [r4, #1]
 801be3e:	5c10      	ldrb	r0, [r2, r0]
 801be40:	0740      	lsls	r0, r0, #29
 801be42:	d5ed      	bpl.n	801be20 <rcl_validate_topic_name+0x1ac>
 801be44:	e7dd      	b.n	801be02 <rcl_validate_topic_name+0x18e>
 801be46:	2207      	movs	r2, #7
 801be48:	602a      	str	r2, [r5, #0]
 801be4a:	2e00      	cmp	r6, #0
 801be4c:	f47f af7e 	bne.w	801bd4c <rcl_validate_topic_name+0xd8>
 801be50:	e734      	b.n	801bcbc <rcl_validate_topic_name+0x48>
 801be52:	bf00      	nop
 801be54:	08020989 	.word	0x08020989

0801be58 <rcutils_split>:
 801be58:	b082      	sub	sp, #8
 801be5a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801be5e:	b08b      	sub	sp, #44	@ 0x2c
 801be60:	ac14      	add	r4, sp, #80	@ 0x50
 801be62:	9f19      	ldr	r7, [sp, #100]	@ 0x64
 801be64:	e884 000c 	stmia.w	r4, {r2, r3}
 801be68:	2f00      	cmp	r7, #0
 801be6a:	f000 809f 	beq.w	801bfac <rcutils_split+0x154>
 801be6e:	4606      	mov	r6, r0
 801be70:	2800      	cmp	r0, #0
 801be72:	d071      	beq.n	801bf58 <rcutils_split+0x100>
 801be74:	7804      	ldrb	r4, [r0, #0]
 801be76:	2c00      	cmp	r4, #0
 801be78:	d06e      	beq.n	801bf58 <rcutils_split+0x100>
 801be7a:	460d      	mov	r5, r1
 801be7c:	f7e4 fa20 	bl	80002c0 <strlen>
 801be80:	1833      	adds	r3, r6, r0
 801be82:	1b64      	subs	r4, r4, r5
 801be84:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801be88:	4680      	mov	r8, r0
 801be8a:	fab4 f484 	clz	r4, r4
 801be8e:	0964      	lsrs	r4, r4, #5
 801be90:	42ab      	cmp	r3, r5
 801be92:	bf08      	it	eq
 801be94:	f1a8 0801 	subeq.w	r8, r8, #1
 801be98:	4544      	cmp	r4, r8
 801be9a:	d278      	bcs.n	801bf8e <rcutils_split+0x136>
 801be9c:	1933      	adds	r3, r6, r4
 801be9e:	eb06 0008 	add.w	r0, r6, r8
 801bea2:	2101      	movs	r1, #1
 801bea4:	f813 2b01 	ldrb.w	r2, [r3], #1
 801bea8:	42aa      	cmp	r2, r5
 801beaa:	bf08      	it	eq
 801beac:	3101      	addeq	r1, #1
 801beae:	4283      	cmp	r3, r0
 801beb0:	d1f8      	bne.n	801bea4 <rcutils_split+0x4c>
 801beb2:	aa14      	add	r2, sp, #80	@ 0x50
 801beb4:	4638      	mov	r0, r7
 801beb6:	f000 f89f 	bl	801bff8 <rcutils_string_array_init>
 801beba:	4681      	mov	r9, r0
 801bebc:	2800      	cmp	r0, #0
 801bebe:	d159      	bne.n	801bf74 <rcutils_split+0x11c>
 801bec0:	687a      	ldr	r2, [r7, #4]
 801bec2:	46a2      	mov	sl, r4
 801bec4:	e002      	b.n	801becc <rcutils_split+0x74>
 801bec6:	3401      	adds	r4, #1
 801bec8:	4544      	cmp	r4, r8
 801beca:	d222      	bcs.n	801bf12 <rcutils_split+0xba>
 801becc:	5d33      	ldrb	r3, [r6, r4]
 801bece:	42ab      	cmp	r3, r5
 801bed0:	d1f9      	bne.n	801bec6 <rcutils_split+0x6e>
 801bed2:	4554      	cmp	r4, sl
 801bed4:	eba4 0b0a 	sub.w	fp, r4, sl
 801bed8:	d037      	beq.n	801bf4a <rcutils_split+0xf2>
 801beda:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801bedc:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801bede:	9201      	str	r2, [sp, #4]
 801bee0:	f10b 0002 	add.w	r0, fp, #2
 801bee4:	4798      	blx	r3
 801bee6:	9a01      	ldr	r2, [sp, #4]
 801bee8:	f842 0029 	str.w	r0, [r2, r9, lsl #2]
 801beec:	687a      	ldr	r2, [r7, #4]
 801beee:	f852 0029 	ldr.w	r0, [r2, r9, lsl #2]
 801bef2:	eb06 030a 	add.w	r3, r6, sl
 801bef6:	f10b 0101 	add.w	r1, fp, #1
 801befa:	2800      	cmp	r0, #0
 801befc:	d038      	beq.n	801bf70 <rcutils_split+0x118>
 801befe:	4a2e      	ldr	r2, [pc, #184]	@ (801bfb8 <rcutils_split+0x160>)
 801bf00:	f000 ff48 	bl	801cd94 <sniprintf>
 801bf04:	687a      	ldr	r2, [r7, #4]
 801bf06:	f109 0901 	add.w	r9, r9, #1
 801bf0a:	3401      	adds	r4, #1
 801bf0c:	4544      	cmp	r4, r8
 801bf0e:	46a2      	mov	sl, r4
 801bf10:	d3dc      	bcc.n	801becc <rcutils_split+0x74>
 801bf12:	4554      	cmp	r4, sl
 801bf14:	d043      	beq.n	801bf9e <rcutils_split+0x146>
 801bf16:	eba4 040a 	sub.w	r4, r4, sl
 801bf1a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801bf1c:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801bf1e:	9201      	str	r2, [sp, #4]
 801bf20:	1ca0      	adds	r0, r4, #2
 801bf22:	4798      	blx	r3
 801bf24:	9a01      	ldr	r2, [sp, #4]
 801bf26:	687b      	ldr	r3, [r7, #4]
 801bf28:	f842 0029 	str.w	r0, [r2, r9, lsl #2]
 801bf2c:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
 801bf30:	b300      	cbz	r0, 801bf74 <rcutils_split+0x11c>
 801bf32:	4a21      	ldr	r2, [pc, #132]	@ (801bfb8 <rcutils_split+0x160>)
 801bf34:	eb06 030a 	add.w	r3, r6, sl
 801bf38:	1c61      	adds	r1, r4, #1
 801bf3a:	f000 ff2b 	bl	801cd94 <sniprintf>
 801bf3e:	2000      	movs	r0, #0
 801bf40:	b00b      	add	sp, #44	@ 0x2c
 801bf42:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bf46:	b002      	add	sp, #8
 801bf48:	4770      	bx	lr
 801bf4a:	683b      	ldr	r3, [r7, #0]
 801bf4c:	3b01      	subs	r3, #1
 801bf4e:	2100      	movs	r1, #0
 801bf50:	603b      	str	r3, [r7, #0]
 801bf52:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 801bf56:	e7d8      	b.n	801bf0a <rcutils_split+0xb2>
 801bf58:	a802      	add	r0, sp, #8
 801bf5a:	ac02      	add	r4, sp, #8
 801bf5c:	f000 f82e 	bl	801bfbc <rcutils_get_zero_initialized_string_array>
 801bf60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801bf62:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801bf64:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801bf68:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 801bf6c:	2000      	movs	r0, #0
 801bf6e:	e7e7      	b.n	801bf40 <rcutils_split+0xe8>
 801bf70:	f8c7 9000 	str.w	r9, [r7]
 801bf74:	4638      	mov	r0, r7
 801bf76:	f000 f861 	bl	801c03c <rcutils_string_array_fini>
 801bf7a:	b928      	cbnz	r0, 801bf88 <rcutils_split+0x130>
 801bf7c:	200a      	movs	r0, #10
 801bf7e:	b00b      	add	sp, #44	@ 0x2c
 801bf80:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bf84:	b002      	add	sp, #8
 801bf86:	4770      	bx	lr
 801bf88:	f7f1 f95e 	bl	800d248 <rcutils_reset_error>
 801bf8c:	e7f6      	b.n	801bf7c <rcutils_split+0x124>
 801bf8e:	aa14      	add	r2, sp, #80	@ 0x50
 801bf90:	2101      	movs	r1, #1
 801bf92:	4638      	mov	r0, r7
 801bf94:	f000 f830 	bl	801bff8 <rcutils_string_array_init>
 801bf98:	2800      	cmp	r0, #0
 801bf9a:	d1eb      	bne.n	801bf74 <rcutils_split+0x11c>
 801bf9c:	687a      	ldr	r2, [r7, #4]
 801bf9e:	683b      	ldr	r3, [r7, #0]
 801bfa0:	3b01      	subs	r3, #1
 801bfa2:	2100      	movs	r1, #0
 801bfa4:	603b      	str	r3, [r7, #0]
 801bfa6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 801bfaa:	e7df      	b.n	801bf6c <rcutils_split+0x114>
 801bfac:	200b      	movs	r0, #11
 801bfae:	b00b      	add	sp, #44	@ 0x2c
 801bfb0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bfb4:	b002      	add	sp, #8
 801bfb6:	4770      	bx	lr
 801bfb8:	0801ed7c 	.word	0x0801ed7c

0801bfbc <rcutils_get_zero_initialized_string_array>:
 801bfbc:	b570      	push	{r4, r5, r6, lr}
 801bfbe:	b086      	sub	sp, #24
 801bfc0:	4606      	mov	r6, r0
 801bfc2:	4668      	mov	r0, sp
 801bfc4:	f7f1 f8e0 	bl	800d188 <rcutils_get_zero_initialized_allocator>
 801bfc8:	46ee      	mov	lr, sp
 801bfca:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801bfce:	4c09      	ldr	r4, [pc, #36]	@ (801bff4 <rcutils_get_zero_initialized_string_array+0x38>)
 801bfd0:	f104 0508 	add.w	r5, r4, #8
 801bfd4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801bfd6:	46a4      	mov	ip, r4
 801bfd8:	f8de 3000 	ldr.w	r3, [lr]
 801bfdc:	602b      	str	r3, [r5, #0]
 801bfde:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801bfe2:	4634      	mov	r4, r6
 801bfe4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801bfe6:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 801bfea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801bfee:	4630      	mov	r0, r6
 801bff0:	b006      	add	sp, #24
 801bff2:	bd70      	pop	{r4, r5, r6, pc}
 801bff4:	20019c24 	.word	0x20019c24

0801bff8 <rcutils_string_array_init>:
 801bff8:	b1da      	cbz	r2, 801c032 <rcutils_string_array_init+0x3a>
 801bffa:	b570      	push	{r4, r5, r6, lr}
 801bffc:	4605      	mov	r5, r0
 801bffe:	b1d0      	cbz	r0, 801c036 <rcutils_string_array_init+0x3e>
 801c000:	460e      	mov	r6, r1
 801c002:	4614      	mov	r4, r2
 801c004:	e9d2 3203 	ldrd	r3, r2, [r2, #12]
 801c008:	6001      	str	r1, [r0, #0]
 801c00a:	2104      	movs	r1, #4
 801c00c:	4630      	mov	r0, r6
 801c00e:	4798      	blx	r3
 801c010:	6068      	str	r0, [r5, #4]
 801c012:	b150      	cbz	r0, 801c02a <rcutils_string_array_init+0x32>
 801c014:	46a4      	mov	ip, r4
 801c016:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801c01a:	f105 0408 	add.w	r4, r5, #8
 801c01e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801c020:	f8dc 3000 	ldr.w	r3, [ip]
 801c024:	6023      	str	r3, [r4, #0]
 801c026:	2000      	movs	r0, #0
 801c028:	bd70      	pop	{r4, r5, r6, pc}
 801c02a:	2e00      	cmp	r6, #0
 801c02c:	d0f2      	beq.n	801c014 <rcutils_string_array_init+0x1c>
 801c02e:	200a      	movs	r0, #10
 801c030:	bd70      	pop	{r4, r5, r6, pc}
 801c032:	200b      	movs	r0, #11
 801c034:	4770      	bx	lr
 801c036:	200b      	movs	r0, #11
 801c038:	bd70      	pop	{r4, r5, r6, pc}
 801c03a:	bf00      	nop

0801c03c <rcutils_string_array_fini>:
 801c03c:	b310      	cbz	r0, 801c084 <rcutils_string_array_fini+0x48>
 801c03e:	6843      	ldr	r3, [r0, #4]
 801c040:	b570      	push	{r4, r5, r6, lr}
 801c042:	4604      	mov	r4, r0
 801c044:	b1d3      	cbz	r3, 801c07c <rcutils_string_array_fini+0x40>
 801c046:	3008      	adds	r0, #8
 801c048:	f7f1 f8d8 	bl	800d1fc <rcutils_allocator_is_valid>
 801c04c:	b1c0      	cbz	r0, 801c080 <rcutils_string_array_fini+0x44>
 801c04e:	e9d4 3000 	ldrd	r3, r0, [r4]
 801c052:	b16b      	cbz	r3, 801c070 <rcutils_string_array_fini+0x34>
 801c054:	2500      	movs	r5, #0
 801c056:	462e      	mov	r6, r5
 801c058:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 801c05c:	68e3      	ldr	r3, [r4, #12]
 801c05e:	69a1      	ldr	r1, [r4, #24]
 801c060:	4798      	blx	r3
 801c062:	e9d4 3000 	ldrd	r3, r0, [r4]
 801c066:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 801c06a:	3501      	adds	r5, #1
 801c06c:	42ab      	cmp	r3, r5
 801c06e:	d8f3      	bhi.n	801c058 <rcutils_string_array_fini+0x1c>
 801c070:	68e3      	ldr	r3, [r4, #12]
 801c072:	69a1      	ldr	r1, [r4, #24]
 801c074:	4798      	blx	r3
 801c076:	2300      	movs	r3, #0
 801c078:	e9c4 3300 	strd	r3, r3, [r4]
 801c07c:	2000      	movs	r0, #0
 801c07e:	bd70      	pop	{r4, r5, r6, pc}
 801c080:	200b      	movs	r0, #11
 801c082:	bd70      	pop	{r4, r5, r6, pc}
 801c084:	200b      	movs	r0, #11
 801c086:	4770      	bx	lr

0801c088 <rmw_get_zero_initialized_discovery_options>:
 801c088:	b510      	push	{r4, lr}
 801c08a:	2220      	movs	r2, #32
 801c08c:	4604      	mov	r4, r0
 801c08e:	2100      	movs	r1, #0
 801c090:	f001 f9ce 	bl	801d430 <memset>
 801c094:	4620      	mov	r0, r4
 801c096:	bd10      	pop	{r4, pc}

0801c098 <rmw_discovery_options_init>:
 801c098:	b328      	cbz	r0, 801c0e6 <rmw_discovery_options_init+0x4e>
 801c09a:	b570      	push	{r4, r5, r6, lr}
 801c09c:	4604      	mov	r4, r0
 801c09e:	4610      	mov	r0, r2
 801c0a0:	460e      	mov	r6, r1
 801c0a2:	4615      	mov	r5, r2
 801c0a4:	f7f1 f8aa 	bl	800d1fc <rcutils_allocator_is_valid>
 801c0a8:	b1d8      	cbz	r0, 801c0e2 <rmw_discovery_options_init+0x4a>
 801c0aa:	68a3      	ldr	r3, [r4, #8]
 801c0ac:	b9cb      	cbnz	r3, 801c0e2 <rmw_discovery_options_init+0x4a>
 801c0ae:	6863      	ldr	r3, [r4, #4]
 801c0b0:	b9bb      	cbnz	r3, 801c0e2 <rmw_discovery_options_init+0x4a>
 801c0b2:	7823      	ldrb	r3, [r4, #0]
 801c0b4:	b90b      	cbnz	r3, 801c0ba <rmw_discovery_options_init+0x22>
 801c0b6:	2302      	movs	r3, #2
 801c0b8:	7023      	strb	r3, [r4, #0]
 801c0ba:	b186      	cbz	r6, 801c0de <rmw_discovery_options_init+0x46>
 801c0bc:	e9d5 3203 	ldrd	r3, r2, [r5, #12]
 801c0c0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801c0c4:	4630      	mov	r0, r6
 801c0c6:	4798      	blx	r3
 801c0c8:	6060      	str	r0, [r4, #4]
 801c0ca:	b170      	cbz	r0, 801c0ea <rmw_discovery_options_init+0x52>
 801c0cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801c0ce:	f104 0c0c 	add.w	ip, r4, #12
 801c0d2:	60a6      	str	r6, [r4, #8]
 801c0d4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801c0d8:	682b      	ldr	r3, [r5, #0]
 801c0da:	f8cc 3000 	str.w	r3, [ip]
 801c0de:	2000      	movs	r0, #0
 801c0e0:	bd70      	pop	{r4, r5, r6, pc}
 801c0e2:	200b      	movs	r0, #11
 801c0e4:	bd70      	pop	{r4, r5, r6, pc}
 801c0e6:	200b      	movs	r0, #11
 801c0e8:	4770      	bx	lr
 801c0ea:	200a      	movs	r0, #10
 801c0ec:	bd70      	pop	{r4, r5, r6, pc}
 801c0ee:	bf00      	nop

0801c0f0 <on_status>:
 801c0f0:	b082      	sub	sp, #8
 801c0f2:	b002      	add	sp, #8
 801c0f4:	4770      	bx	lr
 801c0f6:	bf00      	nop

0801c0f8 <on_topic>:
 801c0f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c0fc:	4a22      	ldr	r2, [pc, #136]	@ (801c188 <on_topic+0x90>)
 801c0fe:	b094      	sub	sp, #80	@ 0x50
 801c100:	6812      	ldr	r2, [r2, #0]
 801c102:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 801c104:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 801c108:	e9cd 3112 	strd	r3, r1, [sp, #72]	@ 0x48
 801c10c:	b3c2      	cbz	r2, 801c180 <on_topic+0x88>
 801c10e:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 801c112:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 801c116:	e001      	b.n	801c11c <on_topic+0x24>
 801c118:	6852      	ldr	r2, [r2, #4]
 801c11a:	b38a      	cbz	r2, 801c180 <on_topic+0x88>
 801c11c:	6894      	ldr	r4, [r2, #8]
 801c11e:	8aa3      	ldrh	r3, [r4, #20]
 801c120:	428b      	cmp	r3, r1
 801c122:	d1f9      	bne.n	801c118 <on_topic+0x20>
 801c124:	7da3      	ldrb	r3, [r4, #22]
 801c126:	4283      	cmp	r3, r0
 801c128:	d1f6      	bne.n	801c118 <on_topic+0x20>
 801c12a:	2248      	movs	r2, #72	@ 0x48
 801c12c:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 801c130:	4668      	mov	r0, sp
 801c132:	f001 fa12 	bl	801d55a <memcpy>
 801c136:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 801c13a:	cb0c      	ldmia	r3, {r2, r3}
 801c13c:	4620      	mov	r0, r4
 801c13e:	f7f1 fc8f 	bl	800da60 <rmw_uxrce_get_static_input_buffer_for_entity>
 801c142:	4607      	mov	r7, r0
 801c144:	b1e0      	cbz	r0, 801c180 <on_topic+0x88>
 801c146:	f8d0 8008 	ldr.w	r8, [r0, #8]
 801c14a:	4632      	mov	r2, r6
 801c14c:	4628      	mov	r0, r5
 801c14e:	f108 0110 	add.w	r1, r8, #16
 801c152:	f7f3 f81b 	bl	800f18c <ucdr_deserialize_array_uint8_t>
 801c156:	b930      	cbnz	r0, 801c166 <on_topic+0x6e>
 801c158:	480c      	ldr	r0, [pc, #48]	@ (801c18c <on_topic+0x94>)
 801c15a:	4639      	mov	r1, r7
 801c15c:	b014      	add	sp, #80	@ 0x50
 801c15e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c162:	f7fb bea5 	b.w	8017eb0 <put_memory>
 801c166:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 801c16a:	f8c8 6810 	str.w	r6, [r8, #2064]	@ 0x810
 801c16e:	f7fd f8db 	bl	8019328 <rmw_uros_epoch_nanos>
 801c172:	2305      	movs	r3, #5
 801c174:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 801c178:	e942 0102 	strd	r0, r1, [r2, #-8]
 801c17c:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 801c180:	b014      	add	sp, #80	@ 0x50
 801c182:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c186:	bf00      	nop
 801c188:	20017408 	.word	0x20017408
 801c18c:	20015988 	.word	0x20015988

0801c190 <on_request>:
 801c190:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c194:	4823      	ldr	r0, [pc, #140]	@ (801c224 <on_request+0x94>)
 801c196:	b094      	sub	sp, #80	@ 0x50
 801c198:	6800      	ldr	r0, [r0, #0]
 801c19a:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 801c19c:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 801c1a0:	9113      	str	r1, [sp, #76]	@ 0x4c
 801c1a2:	2800      	cmp	r0, #0
 801c1a4:	d03b      	beq.n	801c21e <on_request+0x8e>
 801c1a6:	461d      	mov	r5, r3
 801c1a8:	e001      	b.n	801c1ae <on_request+0x1e>
 801c1aa:	6840      	ldr	r0, [r0, #4]
 801c1ac:	b3b8      	cbz	r0, 801c21e <on_request+0x8e>
 801c1ae:	6884      	ldr	r4, [r0, #8]
 801c1b0:	8b21      	ldrh	r1, [r4, #24]
 801c1b2:	4291      	cmp	r1, r2
 801c1b4:	d1f9      	bne.n	801c1aa <on_request+0x1a>
 801c1b6:	2248      	movs	r2, #72	@ 0x48
 801c1b8:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 801c1bc:	4668      	mov	r0, sp
 801c1be:	f001 f9cc 	bl	801d55a <memcpy>
 801c1c2:	f104 0320 	add.w	r3, r4, #32
 801c1c6:	cb0c      	ldmia	r3, {r2, r3}
 801c1c8:	4620      	mov	r0, r4
 801c1ca:	f7f1 fc49 	bl	800da60 <rmw_uxrce_get_static_input_buffer_for_entity>
 801c1ce:	4680      	mov	r8, r0
 801c1d0:	b328      	cbz	r0, 801c21e <on_request+0x8e>
 801c1d2:	4638      	mov	r0, r7
 801c1d4:	f8d8 7008 	ldr.w	r7, [r8, #8]
 801c1d8:	4632      	mov	r2, r6
 801c1da:	f107 0110 	add.w	r1, r7, #16
 801c1de:	f7f2 ffd5 	bl	800f18c <ucdr_deserialize_array_uint8_t>
 801c1e2:	b930      	cbnz	r0, 801c1f2 <on_request+0x62>
 801c1e4:	4810      	ldr	r0, [pc, #64]	@ (801c228 <on_request+0x98>)
 801c1e6:	4641      	mov	r1, r8
 801c1e8:	b014      	add	sp, #80	@ 0x50
 801c1ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c1ee:	f7fb be5f 	b.w	8017eb0 <put_memory>
 801c1f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801c1f4:	f607 0c28 	addw	ip, r7, #2088	@ 0x828
 801c1f8:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 801c1fc:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 801c200:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801c204:	e895 0003 	ldmia.w	r5, {r0, r1}
 801c208:	e88c 0003 	stmia.w	ip, {r0, r1}
 801c20c:	f7fd f88c 	bl	8019328 <rmw_uros_epoch_nanos>
 801c210:	2303      	movs	r3, #3
 801c212:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 801c216:	e942 0102 	strd	r0, r1, [r2, #-8]
 801c21a:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 801c21e:	b014      	add	sp, #80	@ 0x50
 801c220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c224:	20016b88 	.word	0x20016b88
 801c228:	20015988 	.word	0x20015988

0801c22c <on_reply>:
 801c22c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c230:	4821      	ldr	r0, [pc, #132]	@ (801c2b8 <on_reply+0x8c>)
 801c232:	b094      	sub	sp, #80	@ 0x50
 801c234:	6800      	ldr	r0, [r0, #0]
 801c236:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 801c238:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 801c23c:	9113      	str	r1, [sp, #76]	@ 0x4c
 801c23e:	b3b8      	cbz	r0, 801c2b0 <on_reply+0x84>
 801c240:	461d      	mov	r5, r3
 801c242:	e001      	b.n	801c248 <on_reply+0x1c>
 801c244:	6840      	ldr	r0, [r0, #4]
 801c246:	b398      	cbz	r0, 801c2b0 <on_reply+0x84>
 801c248:	6884      	ldr	r4, [r0, #8]
 801c24a:	8b21      	ldrh	r1, [r4, #24]
 801c24c:	4291      	cmp	r1, r2
 801c24e:	d1f9      	bne.n	801c244 <on_reply+0x18>
 801c250:	2248      	movs	r2, #72	@ 0x48
 801c252:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 801c256:	4668      	mov	r0, sp
 801c258:	f001 f97f 	bl	801d55a <memcpy>
 801c25c:	f104 0320 	add.w	r3, r4, #32
 801c260:	cb0c      	ldmia	r3, {r2, r3}
 801c262:	4620      	mov	r0, r4
 801c264:	f7f1 fbfc 	bl	800da60 <rmw_uxrce_get_static_input_buffer_for_entity>
 801c268:	4680      	mov	r8, r0
 801c26a:	b308      	cbz	r0, 801c2b0 <on_reply+0x84>
 801c26c:	4638      	mov	r0, r7
 801c26e:	f8d8 7008 	ldr.w	r7, [r8, #8]
 801c272:	4632      	mov	r2, r6
 801c274:	f107 0110 	add.w	r1, r7, #16
 801c278:	f7f2 ff88 	bl	800f18c <ucdr_deserialize_array_uint8_t>
 801c27c:	b930      	cbnz	r0, 801c28c <on_reply+0x60>
 801c27e:	480f      	ldr	r0, [pc, #60]	@ (801c2bc <on_reply+0x90>)
 801c280:	4641      	mov	r1, r8
 801c282:	b014      	add	sp, #80	@ 0x50
 801c284:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c288:	f7fb be12 	b.w	8017eb0 <put_memory>
 801c28c:	2200      	movs	r2, #0
 801c28e:	f8c7 282c 	str.w	r2, [r7, #2092]	@ 0x82c
 801c292:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 801c296:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 801c29a:	f8c7 5828 	str.w	r5, [r7, #2088]	@ 0x828
 801c29e:	f7fd f843 	bl	8019328 <rmw_uros_epoch_nanos>
 801c2a2:	2304      	movs	r3, #4
 801c2a4:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 801c2a8:	e942 0102 	strd	r0, r1, [r2, #-8]
 801c2ac:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 801c2b0:	b014      	add	sp, #80	@ 0x50
 801c2b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c2b6:	bf00      	nop
 801c2b8:	200163a8 	.word	0x200163a8
 801c2bc:	20015988 	.word	0x20015988

0801c2c0 <rmw_create_guard_condition>:
 801c2c0:	b538      	push	{r3, r4, r5, lr}
 801c2c2:	4605      	mov	r5, r0
 801c2c4:	4807      	ldr	r0, [pc, #28]	@ (801c2e4 <rmw_create_guard_condition+0x24>)
 801c2c6:	f7fb fde3 	bl	8017e90 <get_memory>
 801c2ca:	b148      	cbz	r0, 801c2e0 <rmw_create_guard_condition+0x20>
 801c2cc:	6884      	ldr	r4, [r0, #8]
 801c2ce:	2300      	movs	r3, #0
 801c2d0:	7423      	strb	r3, [r4, #16]
 801c2d2:	61e5      	str	r5, [r4, #28]
 801c2d4:	f7fb fe62 	bl	8017f9c <rmw_get_implementation_identifier>
 801c2d8:	e9c4 0405 	strd	r0, r4, [r4, #20]
 801c2dc:	f104 0014 	add.w	r0, r4, #20
 801c2e0:	bd38      	pop	{r3, r4, r5, pc}
 801c2e2:	bf00      	nop
 801c2e4:	20013764 	.word	0x20013764

0801c2e8 <rmw_destroy_guard_condition>:
 801c2e8:	b508      	push	{r3, lr}
 801c2ea:	4b08      	ldr	r3, [pc, #32]	@ (801c30c <rmw_destroy_guard_condition+0x24>)
 801c2ec:	6819      	ldr	r1, [r3, #0]
 801c2ee:	b911      	cbnz	r1, 801c2f6 <rmw_destroy_guard_condition+0xe>
 801c2f0:	e00a      	b.n	801c308 <rmw_destroy_guard_condition+0x20>
 801c2f2:	6849      	ldr	r1, [r1, #4]
 801c2f4:	b141      	cbz	r1, 801c308 <rmw_destroy_guard_condition+0x20>
 801c2f6:	688b      	ldr	r3, [r1, #8]
 801c2f8:	3314      	adds	r3, #20
 801c2fa:	4298      	cmp	r0, r3
 801c2fc:	d1f9      	bne.n	801c2f2 <rmw_destroy_guard_condition+0xa>
 801c2fe:	4803      	ldr	r0, [pc, #12]	@ (801c30c <rmw_destroy_guard_condition+0x24>)
 801c300:	f7fb fdd6 	bl	8017eb0 <put_memory>
 801c304:	2000      	movs	r0, #0
 801c306:	bd08      	pop	{r3, pc}
 801c308:	2001      	movs	r0, #1
 801c30a:	bd08      	pop	{r3, pc}
 801c30c:	20013764 	.word	0x20013764

0801c310 <rosidl_runtime_c__String__init>:
 801c310:	b1b0      	cbz	r0, 801c340 <rosidl_runtime_c__String__init+0x30>
 801c312:	b510      	push	{r4, lr}
 801c314:	b086      	sub	sp, #24
 801c316:	4604      	mov	r4, r0
 801c318:	a801      	add	r0, sp, #4
 801c31a:	f7f0 ff43 	bl	800d1a4 <rcutils_get_default_allocator>
 801c31e:	9b01      	ldr	r3, [sp, #4]
 801c320:	9905      	ldr	r1, [sp, #20]
 801c322:	2001      	movs	r0, #1
 801c324:	4798      	blx	r3
 801c326:	6020      	str	r0, [r4, #0]
 801c328:	b138      	cbz	r0, 801c33a <rosidl_runtime_c__String__init+0x2a>
 801c32a:	2200      	movs	r2, #0
 801c32c:	2301      	movs	r3, #1
 801c32e:	7002      	strb	r2, [r0, #0]
 801c330:	4618      	mov	r0, r3
 801c332:	e9c4 2301 	strd	r2, r3, [r4, #4]
 801c336:	b006      	add	sp, #24
 801c338:	bd10      	pop	{r4, pc}
 801c33a:	2000      	movs	r0, #0
 801c33c:	b006      	add	sp, #24
 801c33e:	bd10      	pop	{r4, pc}
 801c340:	2000      	movs	r0, #0
 801c342:	4770      	bx	lr

0801c344 <rosidl_runtime_c__String__fini>:
 801c344:	b320      	cbz	r0, 801c390 <rosidl_runtime_c__String__fini+0x4c>
 801c346:	b510      	push	{r4, lr}
 801c348:	6803      	ldr	r3, [r0, #0]
 801c34a:	b086      	sub	sp, #24
 801c34c:	4604      	mov	r4, r0
 801c34e:	b173      	cbz	r3, 801c36e <rosidl_runtime_c__String__fini+0x2a>
 801c350:	6883      	ldr	r3, [r0, #8]
 801c352:	b1f3      	cbz	r3, 801c392 <rosidl_runtime_c__String__fini+0x4e>
 801c354:	a801      	add	r0, sp, #4
 801c356:	f7f0 ff25 	bl	800d1a4 <rcutils_get_default_allocator>
 801c35a:	9b02      	ldr	r3, [sp, #8]
 801c35c:	9905      	ldr	r1, [sp, #20]
 801c35e:	6820      	ldr	r0, [r4, #0]
 801c360:	4798      	blx	r3
 801c362:	2300      	movs	r3, #0
 801c364:	e9c4 3300 	strd	r3, r3, [r4]
 801c368:	60a3      	str	r3, [r4, #8]
 801c36a:	b006      	add	sp, #24
 801c36c:	bd10      	pop	{r4, pc}
 801c36e:	6843      	ldr	r3, [r0, #4]
 801c370:	b9db      	cbnz	r3, 801c3aa <rosidl_runtime_c__String__fini+0x66>
 801c372:	6883      	ldr	r3, [r0, #8]
 801c374:	2b00      	cmp	r3, #0
 801c376:	d0f8      	beq.n	801c36a <rosidl_runtime_c__String__fini+0x26>
 801c378:	4b12      	ldr	r3, [pc, #72]	@ (801c3c4 <rosidl_runtime_c__String__fini+0x80>)
 801c37a:	4813      	ldr	r0, [pc, #76]	@ (801c3c8 <rosidl_runtime_c__String__fini+0x84>)
 801c37c:	681b      	ldr	r3, [r3, #0]
 801c37e:	2251      	movs	r2, #81	@ 0x51
 801c380:	68db      	ldr	r3, [r3, #12]
 801c382:	2101      	movs	r1, #1
 801c384:	f000 ffac 	bl	801d2e0 <fwrite>
 801c388:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801c38c:	f000 fbf6 	bl	801cb7c <exit>
 801c390:	4770      	bx	lr
 801c392:	4b0c      	ldr	r3, [pc, #48]	@ (801c3c4 <rosidl_runtime_c__String__fini+0x80>)
 801c394:	480d      	ldr	r0, [pc, #52]	@ (801c3cc <rosidl_runtime_c__String__fini+0x88>)
 801c396:	681b      	ldr	r3, [r3, #0]
 801c398:	224c      	movs	r2, #76	@ 0x4c
 801c39a:	68db      	ldr	r3, [r3, #12]
 801c39c:	2101      	movs	r1, #1
 801c39e:	f000 ff9f 	bl	801d2e0 <fwrite>
 801c3a2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801c3a6:	f000 fbe9 	bl	801cb7c <exit>
 801c3aa:	4b06      	ldr	r3, [pc, #24]	@ (801c3c4 <rosidl_runtime_c__String__fini+0x80>)
 801c3ac:	4808      	ldr	r0, [pc, #32]	@ (801c3d0 <rosidl_runtime_c__String__fini+0x8c>)
 801c3ae:	681b      	ldr	r3, [r3, #0]
 801c3b0:	224e      	movs	r2, #78	@ 0x4e
 801c3b2:	68db      	ldr	r3, [r3, #12]
 801c3b4:	2101      	movs	r1, #1
 801c3b6:	f000 ff93 	bl	801d2e0 <fwrite>
 801c3ba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801c3be:	f000 fbdd 	bl	801cb7c <exit>
 801c3c2:	bf00      	nop
 801c3c4:	2000332c 	.word	0x2000332c
 801c3c8:	0801f914 	.word	0x0801f914
 801c3cc:	0801f874 	.word	0x0801f874
 801c3d0:	0801f8c4 	.word	0x0801f8c4

0801c3d4 <rosidl_runtime_c__String__copy>:
 801c3d4:	b338      	cbz	r0, 801c426 <rosidl_runtime_c__String__copy+0x52>
 801c3d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c3da:	e9d0 7500 	ldrd	r7, r5, [r0]
 801c3de:	b086      	sub	sp, #24
 801c3e0:	460c      	mov	r4, r1
 801c3e2:	b1e1      	cbz	r1, 801c41e <rosidl_runtime_c__String__copy+0x4a>
 801c3e4:	b1df      	cbz	r7, 801c41e <rosidl_runtime_c__String__copy+0x4a>
 801c3e6:	1c6b      	adds	r3, r5, #1
 801c3e8:	d019      	beq.n	801c41e <rosidl_runtime_c__String__copy+0x4a>
 801c3ea:	a801      	add	r0, sp, #4
 801c3ec:	f105 0801 	add.w	r8, r5, #1
 801c3f0:	f7f0 fed8 	bl	800d1a4 <rcutils_get_default_allocator>
 801c3f4:	9b03      	ldr	r3, [sp, #12]
 801c3f6:	9a05      	ldr	r2, [sp, #20]
 801c3f8:	6820      	ldr	r0, [r4, #0]
 801c3fa:	4641      	mov	r1, r8
 801c3fc:	4798      	blx	r3
 801c3fe:	4606      	mov	r6, r0
 801c400:	b168      	cbz	r0, 801c41e <rosidl_runtime_c__String__copy+0x4a>
 801c402:	4639      	mov	r1, r7
 801c404:	462a      	mov	r2, r5
 801c406:	f001 f8a8 	bl	801d55a <memcpy>
 801c40a:	2300      	movs	r3, #0
 801c40c:	2001      	movs	r0, #1
 801c40e:	5573      	strb	r3, [r6, r5]
 801c410:	e9c4 6500 	strd	r6, r5, [r4]
 801c414:	f8c4 8008 	str.w	r8, [r4, #8]
 801c418:	b006      	add	sp, #24
 801c41a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c41e:	2000      	movs	r0, #0
 801c420:	b006      	add	sp, #24
 801c422:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c426:	4770      	bx	lr

0801c428 <asinf>:
 801c428:	b508      	push	{r3, lr}
 801c42a:	ed2d 8b02 	vpush	{d8}
 801c42e:	eeb0 8a40 	vmov.f32	s16, s0
 801c432:	f000 fa9f 	bl	801c974 <__ieee754_asinf>
 801c436:	eeb4 8a48 	vcmp.f32	s16, s16
 801c43a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c43e:	eef0 8a40 	vmov.f32	s17, s0
 801c442:	d615      	bvs.n	801c470 <asinf+0x48>
 801c444:	eeb0 0a48 	vmov.f32	s0, s16
 801c448:	f000 f8e4 	bl	801c614 <fabsf>
 801c44c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801c450:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801c454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c458:	dd0a      	ble.n	801c470 <asinf+0x48>
 801c45a:	f001 f849 	bl	801d4f0 <__errno>
 801c45e:	ecbd 8b02 	vpop	{d8}
 801c462:	2321      	movs	r3, #33	@ 0x21
 801c464:	6003      	str	r3, [r0, #0]
 801c466:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801c46a:	4804      	ldr	r0, [pc, #16]	@ (801c47c <asinf+0x54>)
 801c46c:	f000 ba7c 	b.w	801c968 <nanf>
 801c470:	eeb0 0a68 	vmov.f32	s0, s17
 801c474:	ecbd 8b02 	vpop	{d8}
 801c478:	bd08      	pop	{r3, pc}
 801c47a:	bf00      	nop
 801c47c:	080208e2 	.word	0x080208e2

0801c480 <atan2>:
 801c480:	f000 b802 	b.w	801c488 <__ieee754_atan2>
 801c484:	0000      	movs	r0, r0
	...

0801c488 <__ieee754_atan2>:
 801c488:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c48c:	ec57 6b11 	vmov	r6, r7, d1
 801c490:	4273      	negs	r3, r6
 801c492:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 801c610 <__ieee754_atan2+0x188>
 801c496:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 801c49a:	4333      	orrs	r3, r6
 801c49c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 801c4a0:	4543      	cmp	r3, r8
 801c4a2:	ec51 0b10 	vmov	r0, r1, d0
 801c4a6:	4635      	mov	r5, r6
 801c4a8:	d809      	bhi.n	801c4be <__ieee754_atan2+0x36>
 801c4aa:	4244      	negs	r4, r0
 801c4ac:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801c4b0:	4304      	orrs	r4, r0
 801c4b2:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 801c4b6:	4544      	cmp	r4, r8
 801c4b8:	468e      	mov	lr, r1
 801c4ba:	4681      	mov	r9, r0
 801c4bc:	d907      	bls.n	801c4ce <__ieee754_atan2+0x46>
 801c4be:	4632      	mov	r2, r6
 801c4c0:	463b      	mov	r3, r7
 801c4c2:	f7e3 ff0b 	bl	80002dc <__adddf3>
 801c4c6:	ec41 0b10 	vmov	d0, r0, r1
 801c4ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c4ce:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 801c4d2:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 801c4d6:	4334      	orrs	r4, r6
 801c4d8:	d103      	bne.n	801c4e2 <__ieee754_atan2+0x5a>
 801c4da:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c4de:	f000 b8a3 	b.w	801c628 <atan>
 801c4e2:	17bc      	asrs	r4, r7, #30
 801c4e4:	f004 0402 	and.w	r4, r4, #2
 801c4e8:	ea53 0909 	orrs.w	r9, r3, r9
 801c4ec:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 801c4f0:	d107      	bne.n	801c502 <__ieee754_atan2+0x7a>
 801c4f2:	2c02      	cmp	r4, #2
 801c4f4:	d05f      	beq.n	801c5b6 <__ieee754_atan2+0x12e>
 801c4f6:	2c03      	cmp	r4, #3
 801c4f8:	d1e5      	bne.n	801c4c6 <__ieee754_atan2+0x3e>
 801c4fa:	a143      	add	r1, pc, #268	@ (adr r1, 801c608 <__ieee754_atan2+0x180>)
 801c4fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c500:	e7e1      	b.n	801c4c6 <__ieee754_atan2+0x3e>
 801c502:	4315      	orrs	r5, r2
 801c504:	d106      	bne.n	801c514 <__ieee754_atan2+0x8c>
 801c506:	f1be 0f00 	cmp.w	lr, #0
 801c50a:	db5f      	blt.n	801c5cc <__ieee754_atan2+0x144>
 801c50c:	a136      	add	r1, pc, #216	@ (adr r1, 801c5e8 <__ieee754_atan2+0x160>)
 801c50e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c512:	e7d8      	b.n	801c4c6 <__ieee754_atan2+0x3e>
 801c514:	4542      	cmp	r2, r8
 801c516:	d10f      	bne.n	801c538 <__ieee754_atan2+0xb0>
 801c518:	4293      	cmp	r3, r2
 801c51a:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 801c51e:	d107      	bne.n	801c530 <__ieee754_atan2+0xa8>
 801c520:	2c02      	cmp	r4, #2
 801c522:	d84c      	bhi.n	801c5be <__ieee754_atan2+0x136>
 801c524:	4b36      	ldr	r3, [pc, #216]	@ (801c600 <__ieee754_atan2+0x178>)
 801c526:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801c52a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801c52e:	e7ca      	b.n	801c4c6 <__ieee754_atan2+0x3e>
 801c530:	2c02      	cmp	r4, #2
 801c532:	d848      	bhi.n	801c5c6 <__ieee754_atan2+0x13e>
 801c534:	4b33      	ldr	r3, [pc, #204]	@ (801c604 <__ieee754_atan2+0x17c>)
 801c536:	e7f6      	b.n	801c526 <__ieee754_atan2+0x9e>
 801c538:	4543      	cmp	r3, r8
 801c53a:	d0e4      	beq.n	801c506 <__ieee754_atan2+0x7e>
 801c53c:	1a9b      	subs	r3, r3, r2
 801c53e:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 801c542:	ea4f 5223 	mov.w	r2, r3, asr #20
 801c546:	da1e      	bge.n	801c586 <__ieee754_atan2+0xfe>
 801c548:	2f00      	cmp	r7, #0
 801c54a:	da01      	bge.n	801c550 <__ieee754_atan2+0xc8>
 801c54c:	323c      	adds	r2, #60	@ 0x3c
 801c54e:	db1e      	blt.n	801c58e <__ieee754_atan2+0x106>
 801c550:	4632      	mov	r2, r6
 801c552:	463b      	mov	r3, r7
 801c554:	f7e4 f9a2 	bl	800089c <__aeabi_ddiv>
 801c558:	ec41 0b10 	vmov	d0, r0, r1
 801c55c:	f000 f9fc 	bl	801c958 <fabs>
 801c560:	f000 f862 	bl	801c628 <atan>
 801c564:	ec51 0b10 	vmov	r0, r1, d0
 801c568:	2c01      	cmp	r4, #1
 801c56a:	d013      	beq.n	801c594 <__ieee754_atan2+0x10c>
 801c56c:	2c02      	cmp	r4, #2
 801c56e:	d015      	beq.n	801c59c <__ieee754_atan2+0x114>
 801c570:	2c00      	cmp	r4, #0
 801c572:	d0a8      	beq.n	801c4c6 <__ieee754_atan2+0x3e>
 801c574:	a318      	add	r3, pc, #96	@ (adr r3, 801c5d8 <__ieee754_atan2+0x150>)
 801c576:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c57a:	f7e3 fead 	bl	80002d8 <__aeabi_dsub>
 801c57e:	a318      	add	r3, pc, #96	@ (adr r3, 801c5e0 <__ieee754_atan2+0x158>)
 801c580:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c584:	e014      	b.n	801c5b0 <__ieee754_atan2+0x128>
 801c586:	a118      	add	r1, pc, #96	@ (adr r1, 801c5e8 <__ieee754_atan2+0x160>)
 801c588:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c58c:	e7ec      	b.n	801c568 <__ieee754_atan2+0xe0>
 801c58e:	2000      	movs	r0, #0
 801c590:	2100      	movs	r1, #0
 801c592:	e7e9      	b.n	801c568 <__ieee754_atan2+0xe0>
 801c594:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801c598:	4619      	mov	r1, r3
 801c59a:	e794      	b.n	801c4c6 <__ieee754_atan2+0x3e>
 801c59c:	a30e      	add	r3, pc, #56	@ (adr r3, 801c5d8 <__ieee754_atan2+0x150>)
 801c59e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c5a2:	f7e3 fe99 	bl	80002d8 <__aeabi_dsub>
 801c5a6:	4602      	mov	r2, r0
 801c5a8:	460b      	mov	r3, r1
 801c5aa:	a10d      	add	r1, pc, #52	@ (adr r1, 801c5e0 <__ieee754_atan2+0x158>)
 801c5ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c5b0:	f7e3 fe92 	bl	80002d8 <__aeabi_dsub>
 801c5b4:	e787      	b.n	801c4c6 <__ieee754_atan2+0x3e>
 801c5b6:	a10a      	add	r1, pc, #40	@ (adr r1, 801c5e0 <__ieee754_atan2+0x158>)
 801c5b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c5bc:	e783      	b.n	801c4c6 <__ieee754_atan2+0x3e>
 801c5be:	a10c      	add	r1, pc, #48	@ (adr r1, 801c5f0 <__ieee754_atan2+0x168>)
 801c5c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c5c4:	e77f      	b.n	801c4c6 <__ieee754_atan2+0x3e>
 801c5c6:	2000      	movs	r0, #0
 801c5c8:	2100      	movs	r1, #0
 801c5ca:	e77c      	b.n	801c4c6 <__ieee754_atan2+0x3e>
 801c5cc:	a10a      	add	r1, pc, #40	@ (adr r1, 801c5f8 <__ieee754_atan2+0x170>)
 801c5ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c5d2:	e778      	b.n	801c4c6 <__ieee754_atan2+0x3e>
 801c5d4:	f3af 8000 	nop.w
 801c5d8:	33145c07 	.word	0x33145c07
 801c5dc:	3ca1a626 	.word	0x3ca1a626
 801c5e0:	54442d18 	.word	0x54442d18
 801c5e4:	400921fb 	.word	0x400921fb
 801c5e8:	54442d18 	.word	0x54442d18
 801c5ec:	3ff921fb 	.word	0x3ff921fb
 801c5f0:	54442d18 	.word	0x54442d18
 801c5f4:	3fe921fb 	.word	0x3fe921fb
 801c5f8:	54442d18 	.word	0x54442d18
 801c5fc:	bff921fb 	.word	0xbff921fb
 801c600:	08020930 	.word	0x08020930
 801c604:	08020918 	.word	0x08020918
 801c608:	54442d18 	.word	0x54442d18
 801c60c:	c00921fb 	.word	0xc00921fb
 801c610:	7ff00000 	.word	0x7ff00000

0801c614 <fabsf>:
 801c614:	ee10 3a10 	vmov	r3, s0
 801c618:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801c61c:	ee00 3a10 	vmov	s0, r3
 801c620:	4770      	bx	lr
 801c622:	0000      	movs	r0, r0
 801c624:	0000      	movs	r0, r0
	...

0801c628 <atan>:
 801c628:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c62c:	ec55 4b10 	vmov	r4, r5, d0
 801c630:	4bbf      	ldr	r3, [pc, #764]	@ (801c930 <atan+0x308>)
 801c632:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 801c636:	429e      	cmp	r6, r3
 801c638:	46ab      	mov	fp, r5
 801c63a:	d918      	bls.n	801c66e <atan+0x46>
 801c63c:	4bbd      	ldr	r3, [pc, #756]	@ (801c934 <atan+0x30c>)
 801c63e:	429e      	cmp	r6, r3
 801c640:	d801      	bhi.n	801c646 <atan+0x1e>
 801c642:	d109      	bne.n	801c658 <atan+0x30>
 801c644:	b144      	cbz	r4, 801c658 <atan+0x30>
 801c646:	4622      	mov	r2, r4
 801c648:	462b      	mov	r3, r5
 801c64a:	4620      	mov	r0, r4
 801c64c:	4629      	mov	r1, r5
 801c64e:	f7e3 fe45 	bl	80002dc <__adddf3>
 801c652:	4604      	mov	r4, r0
 801c654:	460d      	mov	r5, r1
 801c656:	e006      	b.n	801c666 <atan+0x3e>
 801c658:	f1bb 0f00 	cmp.w	fp, #0
 801c65c:	f340 812b 	ble.w	801c8b6 <atan+0x28e>
 801c660:	a597      	add	r5, pc, #604	@ (adr r5, 801c8c0 <atan+0x298>)
 801c662:	e9d5 4500 	ldrd	r4, r5, [r5]
 801c666:	ec45 4b10 	vmov	d0, r4, r5
 801c66a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c66e:	4bb2      	ldr	r3, [pc, #712]	@ (801c938 <atan+0x310>)
 801c670:	429e      	cmp	r6, r3
 801c672:	d813      	bhi.n	801c69c <atan+0x74>
 801c674:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 801c678:	429e      	cmp	r6, r3
 801c67a:	d80c      	bhi.n	801c696 <atan+0x6e>
 801c67c:	a392      	add	r3, pc, #584	@ (adr r3, 801c8c8 <atan+0x2a0>)
 801c67e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c682:	4620      	mov	r0, r4
 801c684:	4629      	mov	r1, r5
 801c686:	f7e3 fe29 	bl	80002dc <__adddf3>
 801c68a:	4bac      	ldr	r3, [pc, #688]	@ (801c93c <atan+0x314>)
 801c68c:	2200      	movs	r2, #0
 801c68e:	f7e4 fa6b 	bl	8000b68 <__aeabi_dcmpgt>
 801c692:	2800      	cmp	r0, #0
 801c694:	d1e7      	bne.n	801c666 <atan+0x3e>
 801c696:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 801c69a:	e029      	b.n	801c6f0 <atan+0xc8>
 801c69c:	f000 f95c 	bl	801c958 <fabs>
 801c6a0:	4ba7      	ldr	r3, [pc, #668]	@ (801c940 <atan+0x318>)
 801c6a2:	429e      	cmp	r6, r3
 801c6a4:	ec55 4b10 	vmov	r4, r5, d0
 801c6a8:	f200 80bc 	bhi.w	801c824 <atan+0x1fc>
 801c6ac:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 801c6b0:	429e      	cmp	r6, r3
 801c6b2:	f200 809e 	bhi.w	801c7f2 <atan+0x1ca>
 801c6b6:	4622      	mov	r2, r4
 801c6b8:	462b      	mov	r3, r5
 801c6ba:	4620      	mov	r0, r4
 801c6bc:	4629      	mov	r1, r5
 801c6be:	f7e3 fe0d 	bl	80002dc <__adddf3>
 801c6c2:	4b9e      	ldr	r3, [pc, #632]	@ (801c93c <atan+0x314>)
 801c6c4:	2200      	movs	r2, #0
 801c6c6:	f7e3 fe07 	bl	80002d8 <__aeabi_dsub>
 801c6ca:	2200      	movs	r2, #0
 801c6cc:	4606      	mov	r6, r0
 801c6ce:	460f      	mov	r7, r1
 801c6d0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801c6d4:	4620      	mov	r0, r4
 801c6d6:	4629      	mov	r1, r5
 801c6d8:	f7e3 fe00 	bl	80002dc <__adddf3>
 801c6dc:	4602      	mov	r2, r0
 801c6de:	460b      	mov	r3, r1
 801c6e0:	4630      	mov	r0, r6
 801c6e2:	4639      	mov	r1, r7
 801c6e4:	f7e4 f8da 	bl	800089c <__aeabi_ddiv>
 801c6e8:	f04f 0a00 	mov.w	sl, #0
 801c6ec:	4604      	mov	r4, r0
 801c6ee:	460d      	mov	r5, r1
 801c6f0:	4622      	mov	r2, r4
 801c6f2:	462b      	mov	r3, r5
 801c6f4:	4620      	mov	r0, r4
 801c6f6:	4629      	mov	r1, r5
 801c6f8:	f7e3 ffa6 	bl	8000648 <__aeabi_dmul>
 801c6fc:	4602      	mov	r2, r0
 801c6fe:	460b      	mov	r3, r1
 801c700:	4680      	mov	r8, r0
 801c702:	4689      	mov	r9, r1
 801c704:	f7e3 ffa0 	bl	8000648 <__aeabi_dmul>
 801c708:	a371      	add	r3, pc, #452	@ (adr r3, 801c8d0 <atan+0x2a8>)
 801c70a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c70e:	4606      	mov	r6, r0
 801c710:	460f      	mov	r7, r1
 801c712:	f7e3 ff99 	bl	8000648 <__aeabi_dmul>
 801c716:	a370      	add	r3, pc, #448	@ (adr r3, 801c8d8 <atan+0x2b0>)
 801c718:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c71c:	f7e3 fdde 	bl	80002dc <__adddf3>
 801c720:	4632      	mov	r2, r6
 801c722:	463b      	mov	r3, r7
 801c724:	f7e3 ff90 	bl	8000648 <__aeabi_dmul>
 801c728:	a36d      	add	r3, pc, #436	@ (adr r3, 801c8e0 <atan+0x2b8>)
 801c72a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c72e:	f7e3 fdd5 	bl	80002dc <__adddf3>
 801c732:	4632      	mov	r2, r6
 801c734:	463b      	mov	r3, r7
 801c736:	f7e3 ff87 	bl	8000648 <__aeabi_dmul>
 801c73a:	a36b      	add	r3, pc, #428	@ (adr r3, 801c8e8 <atan+0x2c0>)
 801c73c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c740:	f7e3 fdcc 	bl	80002dc <__adddf3>
 801c744:	4632      	mov	r2, r6
 801c746:	463b      	mov	r3, r7
 801c748:	f7e3 ff7e 	bl	8000648 <__aeabi_dmul>
 801c74c:	a368      	add	r3, pc, #416	@ (adr r3, 801c8f0 <atan+0x2c8>)
 801c74e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c752:	f7e3 fdc3 	bl	80002dc <__adddf3>
 801c756:	4632      	mov	r2, r6
 801c758:	463b      	mov	r3, r7
 801c75a:	f7e3 ff75 	bl	8000648 <__aeabi_dmul>
 801c75e:	a366      	add	r3, pc, #408	@ (adr r3, 801c8f8 <atan+0x2d0>)
 801c760:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c764:	f7e3 fdba 	bl	80002dc <__adddf3>
 801c768:	4642      	mov	r2, r8
 801c76a:	464b      	mov	r3, r9
 801c76c:	f7e3 ff6c 	bl	8000648 <__aeabi_dmul>
 801c770:	a363      	add	r3, pc, #396	@ (adr r3, 801c900 <atan+0x2d8>)
 801c772:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c776:	4680      	mov	r8, r0
 801c778:	4689      	mov	r9, r1
 801c77a:	4630      	mov	r0, r6
 801c77c:	4639      	mov	r1, r7
 801c77e:	f7e3 ff63 	bl	8000648 <__aeabi_dmul>
 801c782:	a361      	add	r3, pc, #388	@ (adr r3, 801c908 <atan+0x2e0>)
 801c784:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c788:	f7e3 fda6 	bl	80002d8 <__aeabi_dsub>
 801c78c:	4632      	mov	r2, r6
 801c78e:	463b      	mov	r3, r7
 801c790:	f7e3 ff5a 	bl	8000648 <__aeabi_dmul>
 801c794:	a35e      	add	r3, pc, #376	@ (adr r3, 801c910 <atan+0x2e8>)
 801c796:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c79a:	f7e3 fd9d 	bl	80002d8 <__aeabi_dsub>
 801c79e:	4632      	mov	r2, r6
 801c7a0:	463b      	mov	r3, r7
 801c7a2:	f7e3 ff51 	bl	8000648 <__aeabi_dmul>
 801c7a6:	a35c      	add	r3, pc, #368	@ (adr r3, 801c918 <atan+0x2f0>)
 801c7a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c7ac:	f7e3 fd94 	bl	80002d8 <__aeabi_dsub>
 801c7b0:	4632      	mov	r2, r6
 801c7b2:	463b      	mov	r3, r7
 801c7b4:	f7e3 ff48 	bl	8000648 <__aeabi_dmul>
 801c7b8:	a359      	add	r3, pc, #356	@ (adr r3, 801c920 <atan+0x2f8>)
 801c7ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c7be:	f7e3 fd8b 	bl	80002d8 <__aeabi_dsub>
 801c7c2:	4632      	mov	r2, r6
 801c7c4:	463b      	mov	r3, r7
 801c7c6:	f7e3 ff3f 	bl	8000648 <__aeabi_dmul>
 801c7ca:	4602      	mov	r2, r0
 801c7cc:	460b      	mov	r3, r1
 801c7ce:	4640      	mov	r0, r8
 801c7d0:	4649      	mov	r1, r9
 801c7d2:	f7e3 fd83 	bl	80002dc <__adddf3>
 801c7d6:	4622      	mov	r2, r4
 801c7d8:	462b      	mov	r3, r5
 801c7da:	f7e3 ff35 	bl	8000648 <__aeabi_dmul>
 801c7de:	f1ba 3fff 	cmp.w	sl, #4294967295	@ 0xffffffff
 801c7e2:	4602      	mov	r2, r0
 801c7e4:	460b      	mov	r3, r1
 801c7e6:	d148      	bne.n	801c87a <atan+0x252>
 801c7e8:	4620      	mov	r0, r4
 801c7ea:	4629      	mov	r1, r5
 801c7ec:	f7e3 fd74 	bl	80002d8 <__aeabi_dsub>
 801c7f0:	e72f      	b.n	801c652 <atan+0x2a>
 801c7f2:	4b52      	ldr	r3, [pc, #328]	@ (801c93c <atan+0x314>)
 801c7f4:	2200      	movs	r2, #0
 801c7f6:	4620      	mov	r0, r4
 801c7f8:	4629      	mov	r1, r5
 801c7fa:	f7e3 fd6d 	bl	80002d8 <__aeabi_dsub>
 801c7fe:	4b4f      	ldr	r3, [pc, #316]	@ (801c93c <atan+0x314>)
 801c800:	4606      	mov	r6, r0
 801c802:	460f      	mov	r7, r1
 801c804:	2200      	movs	r2, #0
 801c806:	4620      	mov	r0, r4
 801c808:	4629      	mov	r1, r5
 801c80a:	f7e3 fd67 	bl	80002dc <__adddf3>
 801c80e:	4602      	mov	r2, r0
 801c810:	460b      	mov	r3, r1
 801c812:	4630      	mov	r0, r6
 801c814:	4639      	mov	r1, r7
 801c816:	f7e4 f841 	bl	800089c <__aeabi_ddiv>
 801c81a:	f04f 0a01 	mov.w	sl, #1
 801c81e:	4604      	mov	r4, r0
 801c820:	460d      	mov	r5, r1
 801c822:	e765      	b.n	801c6f0 <atan+0xc8>
 801c824:	4b47      	ldr	r3, [pc, #284]	@ (801c944 <atan+0x31c>)
 801c826:	429e      	cmp	r6, r3
 801c828:	d21c      	bcs.n	801c864 <atan+0x23c>
 801c82a:	4b47      	ldr	r3, [pc, #284]	@ (801c948 <atan+0x320>)
 801c82c:	2200      	movs	r2, #0
 801c82e:	4620      	mov	r0, r4
 801c830:	4629      	mov	r1, r5
 801c832:	f7e3 fd51 	bl	80002d8 <__aeabi_dsub>
 801c836:	4b44      	ldr	r3, [pc, #272]	@ (801c948 <atan+0x320>)
 801c838:	4606      	mov	r6, r0
 801c83a:	460f      	mov	r7, r1
 801c83c:	2200      	movs	r2, #0
 801c83e:	4620      	mov	r0, r4
 801c840:	4629      	mov	r1, r5
 801c842:	f7e3 ff01 	bl	8000648 <__aeabi_dmul>
 801c846:	4b3d      	ldr	r3, [pc, #244]	@ (801c93c <atan+0x314>)
 801c848:	2200      	movs	r2, #0
 801c84a:	f7e3 fd47 	bl	80002dc <__adddf3>
 801c84e:	4602      	mov	r2, r0
 801c850:	460b      	mov	r3, r1
 801c852:	4630      	mov	r0, r6
 801c854:	4639      	mov	r1, r7
 801c856:	f7e4 f821 	bl	800089c <__aeabi_ddiv>
 801c85a:	f04f 0a02 	mov.w	sl, #2
 801c85e:	4604      	mov	r4, r0
 801c860:	460d      	mov	r5, r1
 801c862:	e745      	b.n	801c6f0 <atan+0xc8>
 801c864:	4622      	mov	r2, r4
 801c866:	462b      	mov	r3, r5
 801c868:	4938      	ldr	r1, [pc, #224]	@ (801c94c <atan+0x324>)
 801c86a:	2000      	movs	r0, #0
 801c86c:	f7e4 f816 	bl	800089c <__aeabi_ddiv>
 801c870:	f04f 0a03 	mov.w	sl, #3
 801c874:	4604      	mov	r4, r0
 801c876:	460d      	mov	r5, r1
 801c878:	e73a      	b.n	801c6f0 <atan+0xc8>
 801c87a:	4b35      	ldr	r3, [pc, #212]	@ (801c950 <atan+0x328>)
 801c87c:	4e35      	ldr	r6, [pc, #212]	@ (801c954 <atan+0x32c>)
 801c87e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801c882:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c886:	f7e3 fd27 	bl	80002d8 <__aeabi_dsub>
 801c88a:	4622      	mov	r2, r4
 801c88c:	462b      	mov	r3, r5
 801c88e:	f7e3 fd23 	bl	80002d8 <__aeabi_dsub>
 801c892:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 801c896:	4602      	mov	r2, r0
 801c898:	460b      	mov	r3, r1
 801c89a:	e9d6 0100 	ldrd	r0, r1, [r6]
 801c89e:	f7e3 fd1b 	bl	80002d8 <__aeabi_dsub>
 801c8a2:	f1bb 0f00 	cmp.w	fp, #0
 801c8a6:	4604      	mov	r4, r0
 801c8a8:	460d      	mov	r5, r1
 801c8aa:	f6bf aedc 	bge.w	801c666 <atan+0x3e>
 801c8ae:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801c8b2:	461d      	mov	r5, r3
 801c8b4:	e6d7      	b.n	801c666 <atan+0x3e>
 801c8b6:	a51c      	add	r5, pc, #112	@ (adr r5, 801c928 <atan+0x300>)
 801c8b8:	e9d5 4500 	ldrd	r4, r5, [r5]
 801c8bc:	e6d3      	b.n	801c666 <atan+0x3e>
 801c8be:	bf00      	nop
 801c8c0:	54442d18 	.word	0x54442d18
 801c8c4:	3ff921fb 	.word	0x3ff921fb
 801c8c8:	8800759c 	.word	0x8800759c
 801c8cc:	7e37e43c 	.word	0x7e37e43c
 801c8d0:	e322da11 	.word	0xe322da11
 801c8d4:	3f90ad3a 	.word	0x3f90ad3a
 801c8d8:	24760deb 	.word	0x24760deb
 801c8dc:	3fa97b4b 	.word	0x3fa97b4b
 801c8e0:	a0d03d51 	.word	0xa0d03d51
 801c8e4:	3fb10d66 	.word	0x3fb10d66
 801c8e8:	c54c206e 	.word	0xc54c206e
 801c8ec:	3fb745cd 	.word	0x3fb745cd
 801c8f0:	920083ff 	.word	0x920083ff
 801c8f4:	3fc24924 	.word	0x3fc24924
 801c8f8:	5555550d 	.word	0x5555550d
 801c8fc:	3fd55555 	.word	0x3fd55555
 801c900:	2c6a6c2f 	.word	0x2c6a6c2f
 801c904:	bfa2b444 	.word	0xbfa2b444
 801c908:	52defd9a 	.word	0x52defd9a
 801c90c:	3fadde2d 	.word	0x3fadde2d
 801c910:	af749a6d 	.word	0xaf749a6d
 801c914:	3fb3b0f2 	.word	0x3fb3b0f2
 801c918:	fe231671 	.word	0xfe231671
 801c91c:	3fbc71c6 	.word	0x3fbc71c6
 801c920:	9998ebc4 	.word	0x9998ebc4
 801c924:	3fc99999 	.word	0x3fc99999
 801c928:	54442d18 	.word	0x54442d18
 801c92c:	bff921fb 	.word	0xbff921fb
 801c930:	440fffff 	.word	0x440fffff
 801c934:	7ff00000 	.word	0x7ff00000
 801c938:	3fdbffff 	.word	0x3fdbffff
 801c93c:	3ff00000 	.word	0x3ff00000
 801c940:	3ff2ffff 	.word	0x3ff2ffff
 801c944:	40038000 	.word	0x40038000
 801c948:	3ff80000 	.word	0x3ff80000
 801c94c:	bff00000 	.word	0xbff00000
 801c950:	08020948 	.word	0x08020948
 801c954:	08020968 	.word	0x08020968

0801c958 <fabs>:
 801c958:	ec51 0b10 	vmov	r0, r1, d0
 801c95c:	4602      	mov	r2, r0
 801c95e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801c962:	ec43 2b10 	vmov	d0, r2, r3
 801c966:	4770      	bx	lr

0801c968 <nanf>:
 801c968:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801c970 <nanf+0x8>
 801c96c:	4770      	bx	lr
 801c96e:	bf00      	nop
 801c970:	7fc00000 	.word	0x7fc00000

0801c974 <__ieee754_asinf>:
 801c974:	b538      	push	{r3, r4, r5, lr}
 801c976:	ee10 5a10 	vmov	r5, s0
 801c97a:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 801c97e:	f1b4 5f7e 	cmp.w	r4, #1065353216	@ 0x3f800000
 801c982:	ed2d 8b04 	vpush	{d8-d9}
 801c986:	d10c      	bne.n	801c9a2 <__ieee754_asinf+0x2e>
 801c988:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 801cafc <__ieee754_asinf+0x188>
 801c98c:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 801cb00 <__ieee754_asinf+0x18c>
 801c990:	ee60 7a27 	vmul.f32	s15, s0, s15
 801c994:	eee0 7a07 	vfma.f32	s15, s0, s14
 801c998:	eeb0 0a67 	vmov.f32	s0, s15
 801c99c:	ecbd 8b04 	vpop	{d8-d9}
 801c9a0:	bd38      	pop	{r3, r4, r5, pc}
 801c9a2:	d904      	bls.n	801c9ae <__ieee754_asinf+0x3a>
 801c9a4:	ee70 7a40 	vsub.f32	s15, s0, s0
 801c9a8:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 801c9ac:	e7f6      	b.n	801c99c <__ieee754_asinf+0x28>
 801c9ae:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 801c9b2:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 801c9b6:	d20b      	bcs.n	801c9d0 <__ieee754_asinf+0x5c>
 801c9b8:	f1b4 5f48 	cmp.w	r4, #838860800	@ 0x32000000
 801c9bc:	d252      	bcs.n	801ca64 <__ieee754_asinf+0xf0>
 801c9be:	eddf 7a51 	vldr	s15, [pc, #324]	@ 801cb04 <__ieee754_asinf+0x190>
 801c9c2:	ee70 7a27 	vadd.f32	s15, s0, s15
 801c9c6:	eef4 7ae8 	vcmpe.f32	s15, s17
 801c9ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c9ce:	dce5      	bgt.n	801c99c <__ieee754_asinf+0x28>
 801c9d0:	f7ff fe20 	bl	801c614 <fabsf>
 801c9d4:	ee38 8ac0 	vsub.f32	s16, s17, s0
 801c9d8:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801c9dc:	ee28 8a27 	vmul.f32	s16, s16, s15
 801c9e0:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 801cb08 <__ieee754_asinf+0x194>
 801c9e4:	eddf 7a49 	vldr	s15, [pc, #292]	@ 801cb0c <__ieee754_asinf+0x198>
 801c9e8:	ed9f 9a49 	vldr	s18, [pc, #292]	@ 801cb10 <__ieee754_asinf+0x19c>
 801c9ec:	eea8 7a27 	vfma.f32	s14, s16, s15
 801c9f0:	eddf 7a48 	vldr	s15, [pc, #288]	@ 801cb14 <__ieee754_asinf+0x1a0>
 801c9f4:	eee7 7a08 	vfma.f32	s15, s14, s16
 801c9f8:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 801cb18 <__ieee754_asinf+0x1a4>
 801c9fc:	eea7 7a88 	vfma.f32	s14, s15, s16
 801ca00:	eddf 7a46 	vldr	s15, [pc, #280]	@ 801cb1c <__ieee754_asinf+0x1a8>
 801ca04:	eee7 7a08 	vfma.f32	s15, s14, s16
 801ca08:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 801cb20 <__ieee754_asinf+0x1ac>
 801ca0c:	eea7 9a88 	vfma.f32	s18, s15, s16
 801ca10:	eddf 7a44 	vldr	s15, [pc, #272]	@ 801cb24 <__ieee754_asinf+0x1b0>
 801ca14:	eee8 7a07 	vfma.f32	s15, s16, s14
 801ca18:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 801cb28 <__ieee754_asinf+0x1b4>
 801ca1c:	eea7 7a88 	vfma.f32	s14, s15, s16
 801ca20:	eddf 7a42 	vldr	s15, [pc, #264]	@ 801cb2c <__ieee754_asinf+0x1b8>
 801ca24:	eee7 7a08 	vfma.f32	s15, s14, s16
 801ca28:	eeb0 0a48 	vmov.f32	s0, s16
 801ca2c:	eee7 8a88 	vfma.f32	s17, s15, s16
 801ca30:	f000 f884 	bl	801cb3c <__ieee754_sqrtf>
 801ca34:	4b3e      	ldr	r3, [pc, #248]	@ (801cb30 <__ieee754_asinf+0x1bc>)
 801ca36:	ee29 9a08 	vmul.f32	s18, s18, s16
 801ca3a:	429c      	cmp	r4, r3
 801ca3c:	ee89 6a28 	vdiv.f32	s12, s18, s17
 801ca40:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 801ca44:	d93d      	bls.n	801cac2 <__ieee754_asinf+0x14e>
 801ca46:	eea0 0a06 	vfma.f32	s0, s0, s12
 801ca4a:	eddf 7a3a 	vldr	s15, [pc, #232]	@ 801cb34 <__ieee754_asinf+0x1c0>
 801ca4e:	eee0 7a26 	vfma.f32	s15, s0, s13
 801ca52:	ed9f 0a2b 	vldr	s0, [pc, #172]	@ 801cb00 <__ieee754_asinf+0x18c>
 801ca56:	ee30 0a67 	vsub.f32	s0, s0, s15
 801ca5a:	2d00      	cmp	r5, #0
 801ca5c:	bfd8      	it	le
 801ca5e:	eeb1 0a40 	vnegle.f32	s0, s0
 801ca62:	e79b      	b.n	801c99c <__ieee754_asinf+0x28>
 801ca64:	ee60 7a00 	vmul.f32	s15, s0, s0
 801ca68:	eddf 6a28 	vldr	s13, [pc, #160]	@ 801cb0c <__ieee754_asinf+0x198>
 801ca6c:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 801cb08 <__ieee754_asinf+0x194>
 801ca70:	ed9f 6a2b 	vldr	s12, [pc, #172]	@ 801cb20 <__ieee754_asinf+0x1ac>
 801ca74:	eea7 7aa6 	vfma.f32	s14, s15, s13
 801ca78:	eddf 6a26 	vldr	s13, [pc, #152]	@ 801cb14 <__ieee754_asinf+0x1a0>
 801ca7c:	eee7 6a27 	vfma.f32	s13, s14, s15
 801ca80:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 801cb18 <__ieee754_asinf+0x1a4>
 801ca84:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801ca88:	eddf 6a24 	vldr	s13, [pc, #144]	@ 801cb1c <__ieee754_asinf+0x1a8>
 801ca8c:	eee7 6a27 	vfma.f32	s13, s14, s15
 801ca90:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 801cb10 <__ieee754_asinf+0x19c>
 801ca94:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801ca98:	eddf 6a22 	vldr	s13, [pc, #136]	@ 801cb24 <__ieee754_asinf+0x1b0>
 801ca9c:	eee7 6a86 	vfma.f32	s13, s15, s12
 801caa0:	ed9f 6a21 	vldr	s12, [pc, #132]	@ 801cb28 <__ieee754_asinf+0x1b4>
 801caa4:	eea6 6aa7 	vfma.f32	s12, s13, s15
 801caa8:	eddf 6a20 	vldr	s13, [pc, #128]	@ 801cb2c <__ieee754_asinf+0x1b8>
 801caac:	eee6 6a27 	vfma.f32	s13, s12, s15
 801cab0:	ee27 7a27 	vmul.f32	s14, s14, s15
 801cab4:	eee6 8aa7 	vfma.f32	s17, s13, s15
 801cab8:	eec7 7a28 	vdiv.f32	s15, s14, s17
 801cabc:	eea0 0a27 	vfma.f32	s0, s0, s15
 801cac0:	e76c      	b.n	801c99c <__ieee754_asinf+0x28>
 801cac2:	ee10 3a10 	vmov	r3, s0
 801cac6:	f36f 030b 	bfc	r3, #0, #12
 801caca:	ee07 3a10 	vmov	s14, r3
 801cace:	eea7 8a47 	vfms.f32	s16, s14, s14
 801cad2:	ee70 5a00 	vadd.f32	s11, s0, s0
 801cad6:	ee30 0a07 	vadd.f32	s0, s0, s14
 801cada:	eddf 7a08 	vldr	s15, [pc, #32]	@ 801cafc <__ieee754_asinf+0x188>
 801cade:	ee88 5a00 	vdiv.f32	s10, s16, s0
 801cae2:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 801cb38 <__ieee754_asinf+0x1c4>
 801cae6:	eee5 7a66 	vfms.f32	s15, s10, s13
 801caea:	eed5 7a86 	vfnms.f32	s15, s11, s12
 801caee:	eeb0 6a40 	vmov.f32	s12, s0
 801caf2:	eea7 6a66 	vfms.f32	s12, s14, s13
 801caf6:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801cafa:	e7ac      	b.n	801ca56 <__ieee754_asinf+0xe2>
 801cafc:	b33bbd2e 	.word	0xb33bbd2e
 801cb00:	3fc90fdb 	.word	0x3fc90fdb
 801cb04:	7149f2ca 	.word	0x7149f2ca
 801cb08:	3a4f7f04 	.word	0x3a4f7f04
 801cb0c:	3811ef08 	.word	0x3811ef08
 801cb10:	3e2aaaab 	.word	0x3e2aaaab
 801cb14:	bd241146 	.word	0xbd241146
 801cb18:	3e4e0aa8 	.word	0x3e4e0aa8
 801cb1c:	bea6b090 	.word	0xbea6b090
 801cb20:	3d9dc62e 	.word	0x3d9dc62e
 801cb24:	bf303361 	.word	0xbf303361
 801cb28:	4001572d 	.word	0x4001572d
 801cb2c:	c019d139 	.word	0xc019d139
 801cb30:	3f799999 	.word	0x3f799999
 801cb34:	333bbd2e 	.word	0x333bbd2e
 801cb38:	3f490fdb 	.word	0x3f490fdb

0801cb3c <__ieee754_sqrtf>:
 801cb3c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801cb40:	4770      	bx	lr
	...

0801cb44 <calloc>:
 801cb44:	4b02      	ldr	r3, [pc, #8]	@ (801cb50 <calloc+0xc>)
 801cb46:	460a      	mov	r2, r1
 801cb48:	4601      	mov	r1, r0
 801cb4a:	6818      	ldr	r0, [r3, #0]
 801cb4c:	f000 b802 	b.w	801cb54 <_calloc_r>
 801cb50:	2000332c 	.word	0x2000332c

0801cb54 <_calloc_r>:
 801cb54:	b570      	push	{r4, r5, r6, lr}
 801cb56:	fba1 5402 	umull	r5, r4, r1, r2
 801cb5a:	b934      	cbnz	r4, 801cb6a <_calloc_r+0x16>
 801cb5c:	4629      	mov	r1, r5
 801cb5e:	f000 f899 	bl	801cc94 <_malloc_r>
 801cb62:	4606      	mov	r6, r0
 801cb64:	b928      	cbnz	r0, 801cb72 <_calloc_r+0x1e>
 801cb66:	4630      	mov	r0, r6
 801cb68:	bd70      	pop	{r4, r5, r6, pc}
 801cb6a:	220c      	movs	r2, #12
 801cb6c:	6002      	str	r2, [r0, #0]
 801cb6e:	2600      	movs	r6, #0
 801cb70:	e7f9      	b.n	801cb66 <_calloc_r+0x12>
 801cb72:	462a      	mov	r2, r5
 801cb74:	4621      	mov	r1, r4
 801cb76:	f000 fc5b 	bl	801d430 <memset>
 801cb7a:	e7f4      	b.n	801cb66 <_calloc_r+0x12>

0801cb7c <exit>:
 801cb7c:	b508      	push	{r3, lr}
 801cb7e:	4b06      	ldr	r3, [pc, #24]	@ (801cb98 <exit+0x1c>)
 801cb80:	4604      	mov	r4, r0
 801cb82:	b113      	cbz	r3, 801cb8a <exit+0xe>
 801cb84:	2100      	movs	r1, #0
 801cb86:	f3af 8000 	nop.w
 801cb8a:	4b04      	ldr	r3, [pc, #16]	@ (801cb9c <exit+0x20>)
 801cb8c:	681b      	ldr	r3, [r3, #0]
 801cb8e:	b103      	cbz	r3, 801cb92 <exit+0x16>
 801cb90:	4798      	blx	r3
 801cb92:	4620      	mov	r0, r4
 801cb94:	f7e5 fd94 	bl	80026c0 <_exit>
 801cb98:	00000000 	.word	0x00000000
 801cb9c:	20019d80 	.word	0x20019d80

0801cba0 <getenv>:
 801cba0:	b507      	push	{r0, r1, r2, lr}
 801cba2:	4b04      	ldr	r3, [pc, #16]	@ (801cbb4 <getenv+0x14>)
 801cba4:	4601      	mov	r1, r0
 801cba6:	aa01      	add	r2, sp, #4
 801cba8:	6818      	ldr	r0, [r3, #0]
 801cbaa:	f000 f805 	bl	801cbb8 <_findenv_r>
 801cbae:	b003      	add	sp, #12
 801cbb0:	f85d fb04 	ldr.w	pc, [sp], #4
 801cbb4:	2000332c 	.word	0x2000332c

0801cbb8 <_findenv_r>:
 801cbb8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cbbc:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 801cc2c <_findenv_r+0x74>
 801cbc0:	4606      	mov	r6, r0
 801cbc2:	4689      	mov	r9, r1
 801cbc4:	4617      	mov	r7, r2
 801cbc6:	f000 fcf5 	bl	801d5b4 <__env_lock>
 801cbca:	f8da 4000 	ldr.w	r4, [sl]
 801cbce:	b134      	cbz	r4, 801cbde <_findenv_r+0x26>
 801cbd0:	464b      	mov	r3, r9
 801cbd2:	4698      	mov	r8, r3
 801cbd4:	f813 2b01 	ldrb.w	r2, [r3], #1
 801cbd8:	b13a      	cbz	r2, 801cbea <_findenv_r+0x32>
 801cbda:	2a3d      	cmp	r2, #61	@ 0x3d
 801cbdc:	d1f9      	bne.n	801cbd2 <_findenv_r+0x1a>
 801cbde:	4630      	mov	r0, r6
 801cbe0:	f000 fcee 	bl	801d5c0 <__env_unlock>
 801cbe4:	2000      	movs	r0, #0
 801cbe6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cbea:	eba8 0809 	sub.w	r8, r8, r9
 801cbee:	46a3      	mov	fp, r4
 801cbf0:	f854 0b04 	ldr.w	r0, [r4], #4
 801cbf4:	2800      	cmp	r0, #0
 801cbf6:	d0f2      	beq.n	801cbde <_findenv_r+0x26>
 801cbf8:	4642      	mov	r2, r8
 801cbfa:	4649      	mov	r1, r9
 801cbfc:	f000 fc2d 	bl	801d45a <strncmp>
 801cc00:	2800      	cmp	r0, #0
 801cc02:	d1f4      	bne.n	801cbee <_findenv_r+0x36>
 801cc04:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801cc08:	eb03 0508 	add.w	r5, r3, r8
 801cc0c:	f813 3008 	ldrb.w	r3, [r3, r8]
 801cc10:	2b3d      	cmp	r3, #61	@ 0x3d
 801cc12:	d1ec      	bne.n	801cbee <_findenv_r+0x36>
 801cc14:	f8da 3000 	ldr.w	r3, [sl]
 801cc18:	ebab 0303 	sub.w	r3, fp, r3
 801cc1c:	109b      	asrs	r3, r3, #2
 801cc1e:	4630      	mov	r0, r6
 801cc20:	603b      	str	r3, [r7, #0]
 801cc22:	f000 fccd 	bl	801d5c0 <__env_unlock>
 801cc26:	1c68      	adds	r0, r5, #1
 801cc28:	e7dd      	b.n	801cbe6 <_findenv_r+0x2e>
 801cc2a:	bf00      	nop
 801cc2c:	20000000 	.word	0x20000000

0801cc30 <malloc>:
 801cc30:	4b02      	ldr	r3, [pc, #8]	@ (801cc3c <malloc+0xc>)
 801cc32:	4601      	mov	r1, r0
 801cc34:	6818      	ldr	r0, [r3, #0]
 801cc36:	f000 b82d 	b.w	801cc94 <_malloc_r>
 801cc3a:	bf00      	nop
 801cc3c:	2000332c 	.word	0x2000332c

0801cc40 <free>:
 801cc40:	4b02      	ldr	r3, [pc, #8]	@ (801cc4c <free+0xc>)
 801cc42:	4601      	mov	r1, r0
 801cc44:	6818      	ldr	r0, [r3, #0]
 801cc46:	f000 bcc1 	b.w	801d5cc <_free_r>
 801cc4a:	bf00      	nop
 801cc4c:	2000332c 	.word	0x2000332c

0801cc50 <sbrk_aligned>:
 801cc50:	b570      	push	{r4, r5, r6, lr}
 801cc52:	4e0f      	ldr	r6, [pc, #60]	@ (801cc90 <sbrk_aligned+0x40>)
 801cc54:	460c      	mov	r4, r1
 801cc56:	6831      	ldr	r1, [r6, #0]
 801cc58:	4605      	mov	r5, r0
 801cc5a:	b911      	cbnz	r1, 801cc62 <sbrk_aligned+0x12>
 801cc5c:	f000 fc38 	bl	801d4d0 <_sbrk_r>
 801cc60:	6030      	str	r0, [r6, #0]
 801cc62:	4621      	mov	r1, r4
 801cc64:	4628      	mov	r0, r5
 801cc66:	f000 fc33 	bl	801d4d0 <_sbrk_r>
 801cc6a:	1c43      	adds	r3, r0, #1
 801cc6c:	d103      	bne.n	801cc76 <sbrk_aligned+0x26>
 801cc6e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801cc72:	4620      	mov	r0, r4
 801cc74:	bd70      	pop	{r4, r5, r6, pc}
 801cc76:	1cc4      	adds	r4, r0, #3
 801cc78:	f024 0403 	bic.w	r4, r4, #3
 801cc7c:	42a0      	cmp	r0, r4
 801cc7e:	d0f8      	beq.n	801cc72 <sbrk_aligned+0x22>
 801cc80:	1a21      	subs	r1, r4, r0
 801cc82:	4628      	mov	r0, r5
 801cc84:	f000 fc24 	bl	801d4d0 <_sbrk_r>
 801cc88:	3001      	adds	r0, #1
 801cc8a:	d1f2      	bne.n	801cc72 <sbrk_aligned+0x22>
 801cc8c:	e7ef      	b.n	801cc6e <sbrk_aligned+0x1e>
 801cc8e:	bf00      	nop
 801cc90:	20019c40 	.word	0x20019c40

0801cc94 <_malloc_r>:
 801cc94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801cc98:	1ccd      	adds	r5, r1, #3
 801cc9a:	f025 0503 	bic.w	r5, r5, #3
 801cc9e:	3508      	adds	r5, #8
 801cca0:	2d0c      	cmp	r5, #12
 801cca2:	bf38      	it	cc
 801cca4:	250c      	movcc	r5, #12
 801cca6:	2d00      	cmp	r5, #0
 801cca8:	4606      	mov	r6, r0
 801ccaa:	db01      	blt.n	801ccb0 <_malloc_r+0x1c>
 801ccac:	42a9      	cmp	r1, r5
 801ccae:	d904      	bls.n	801ccba <_malloc_r+0x26>
 801ccb0:	230c      	movs	r3, #12
 801ccb2:	6033      	str	r3, [r6, #0]
 801ccb4:	2000      	movs	r0, #0
 801ccb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ccba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801cd90 <_malloc_r+0xfc>
 801ccbe:	f000 f89f 	bl	801ce00 <__malloc_lock>
 801ccc2:	f8d8 3000 	ldr.w	r3, [r8]
 801ccc6:	461c      	mov	r4, r3
 801ccc8:	bb44      	cbnz	r4, 801cd1c <_malloc_r+0x88>
 801ccca:	4629      	mov	r1, r5
 801cccc:	4630      	mov	r0, r6
 801ccce:	f7ff ffbf 	bl	801cc50 <sbrk_aligned>
 801ccd2:	1c43      	adds	r3, r0, #1
 801ccd4:	4604      	mov	r4, r0
 801ccd6:	d158      	bne.n	801cd8a <_malloc_r+0xf6>
 801ccd8:	f8d8 4000 	ldr.w	r4, [r8]
 801ccdc:	4627      	mov	r7, r4
 801ccde:	2f00      	cmp	r7, #0
 801cce0:	d143      	bne.n	801cd6a <_malloc_r+0xd6>
 801cce2:	2c00      	cmp	r4, #0
 801cce4:	d04b      	beq.n	801cd7e <_malloc_r+0xea>
 801cce6:	6823      	ldr	r3, [r4, #0]
 801cce8:	4639      	mov	r1, r7
 801ccea:	4630      	mov	r0, r6
 801ccec:	eb04 0903 	add.w	r9, r4, r3
 801ccf0:	f000 fbee 	bl	801d4d0 <_sbrk_r>
 801ccf4:	4581      	cmp	r9, r0
 801ccf6:	d142      	bne.n	801cd7e <_malloc_r+0xea>
 801ccf8:	6821      	ldr	r1, [r4, #0]
 801ccfa:	1a6d      	subs	r5, r5, r1
 801ccfc:	4629      	mov	r1, r5
 801ccfe:	4630      	mov	r0, r6
 801cd00:	f7ff ffa6 	bl	801cc50 <sbrk_aligned>
 801cd04:	3001      	adds	r0, #1
 801cd06:	d03a      	beq.n	801cd7e <_malloc_r+0xea>
 801cd08:	6823      	ldr	r3, [r4, #0]
 801cd0a:	442b      	add	r3, r5
 801cd0c:	6023      	str	r3, [r4, #0]
 801cd0e:	f8d8 3000 	ldr.w	r3, [r8]
 801cd12:	685a      	ldr	r2, [r3, #4]
 801cd14:	bb62      	cbnz	r2, 801cd70 <_malloc_r+0xdc>
 801cd16:	f8c8 7000 	str.w	r7, [r8]
 801cd1a:	e00f      	b.n	801cd3c <_malloc_r+0xa8>
 801cd1c:	6822      	ldr	r2, [r4, #0]
 801cd1e:	1b52      	subs	r2, r2, r5
 801cd20:	d420      	bmi.n	801cd64 <_malloc_r+0xd0>
 801cd22:	2a0b      	cmp	r2, #11
 801cd24:	d917      	bls.n	801cd56 <_malloc_r+0xc2>
 801cd26:	1961      	adds	r1, r4, r5
 801cd28:	42a3      	cmp	r3, r4
 801cd2a:	6025      	str	r5, [r4, #0]
 801cd2c:	bf18      	it	ne
 801cd2e:	6059      	strne	r1, [r3, #4]
 801cd30:	6863      	ldr	r3, [r4, #4]
 801cd32:	bf08      	it	eq
 801cd34:	f8c8 1000 	streq.w	r1, [r8]
 801cd38:	5162      	str	r2, [r4, r5]
 801cd3a:	604b      	str	r3, [r1, #4]
 801cd3c:	4630      	mov	r0, r6
 801cd3e:	f000 f865 	bl	801ce0c <__malloc_unlock>
 801cd42:	f104 000b 	add.w	r0, r4, #11
 801cd46:	1d23      	adds	r3, r4, #4
 801cd48:	f020 0007 	bic.w	r0, r0, #7
 801cd4c:	1ac2      	subs	r2, r0, r3
 801cd4e:	bf1c      	itt	ne
 801cd50:	1a1b      	subne	r3, r3, r0
 801cd52:	50a3      	strne	r3, [r4, r2]
 801cd54:	e7af      	b.n	801ccb6 <_malloc_r+0x22>
 801cd56:	6862      	ldr	r2, [r4, #4]
 801cd58:	42a3      	cmp	r3, r4
 801cd5a:	bf0c      	ite	eq
 801cd5c:	f8c8 2000 	streq.w	r2, [r8]
 801cd60:	605a      	strne	r2, [r3, #4]
 801cd62:	e7eb      	b.n	801cd3c <_malloc_r+0xa8>
 801cd64:	4623      	mov	r3, r4
 801cd66:	6864      	ldr	r4, [r4, #4]
 801cd68:	e7ae      	b.n	801ccc8 <_malloc_r+0x34>
 801cd6a:	463c      	mov	r4, r7
 801cd6c:	687f      	ldr	r7, [r7, #4]
 801cd6e:	e7b6      	b.n	801ccde <_malloc_r+0x4a>
 801cd70:	461a      	mov	r2, r3
 801cd72:	685b      	ldr	r3, [r3, #4]
 801cd74:	42a3      	cmp	r3, r4
 801cd76:	d1fb      	bne.n	801cd70 <_malloc_r+0xdc>
 801cd78:	2300      	movs	r3, #0
 801cd7a:	6053      	str	r3, [r2, #4]
 801cd7c:	e7de      	b.n	801cd3c <_malloc_r+0xa8>
 801cd7e:	230c      	movs	r3, #12
 801cd80:	6033      	str	r3, [r6, #0]
 801cd82:	4630      	mov	r0, r6
 801cd84:	f000 f842 	bl	801ce0c <__malloc_unlock>
 801cd88:	e794      	b.n	801ccb4 <_malloc_r+0x20>
 801cd8a:	6005      	str	r5, [r0, #0]
 801cd8c:	e7d6      	b.n	801cd3c <_malloc_r+0xa8>
 801cd8e:	bf00      	nop
 801cd90:	20019c44 	.word	0x20019c44

0801cd94 <sniprintf>:
 801cd94:	b40c      	push	{r2, r3}
 801cd96:	b530      	push	{r4, r5, lr}
 801cd98:	4b18      	ldr	r3, [pc, #96]	@ (801cdfc <sniprintf+0x68>)
 801cd9a:	1e0c      	subs	r4, r1, #0
 801cd9c:	681d      	ldr	r5, [r3, #0]
 801cd9e:	b09d      	sub	sp, #116	@ 0x74
 801cda0:	da08      	bge.n	801cdb4 <sniprintf+0x20>
 801cda2:	238b      	movs	r3, #139	@ 0x8b
 801cda4:	602b      	str	r3, [r5, #0]
 801cda6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801cdaa:	b01d      	add	sp, #116	@ 0x74
 801cdac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801cdb0:	b002      	add	sp, #8
 801cdb2:	4770      	bx	lr
 801cdb4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801cdb8:	f8ad 3014 	strh.w	r3, [sp, #20]
 801cdbc:	f04f 0300 	mov.w	r3, #0
 801cdc0:	931b      	str	r3, [sp, #108]	@ 0x6c
 801cdc2:	bf14      	ite	ne
 801cdc4:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801cdc8:	4623      	moveq	r3, r4
 801cdca:	9304      	str	r3, [sp, #16]
 801cdcc:	9307      	str	r3, [sp, #28]
 801cdce:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801cdd2:	9002      	str	r0, [sp, #8]
 801cdd4:	9006      	str	r0, [sp, #24]
 801cdd6:	f8ad 3016 	strh.w	r3, [sp, #22]
 801cdda:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801cddc:	ab21      	add	r3, sp, #132	@ 0x84
 801cdde:	a902      	add	r1, sp, #8
 801cde0:	4628      	mov	r0, r5
 801cde2:	9301      	str	r3, [sp, #4]
 801cde4:	f000 fc98 	bl	801d718 <_svfiprintf_r>
 801cde8:	1c43      	adds	r3, r0, #1
 801cdea:	bfbc      	itt	lt
 801cdec:	238b      	movlt	r3, #139	@ 0x8b
 801cdee:	602b      	strlt	r3, [r5, #0]
 801cdf0:	2c00      	cmp	r4, #0
 801cdf2:	d0da      	beq.n	801cdaa <sniprintf+0x16>
 801cdf4:	9b02      	ldr	r3, [sp, #8]
 801cdf6:	2200      	movs	r2, #0
 801cdf8:	701a      	strb	r2, [r3, #0]
 801cdfa:	e7d6      	b.n	801cdaa <sniprintf+0x16>
 801cdfc:	2000332c 	.word	0x2000332c

0801ce00 <__malloc_lock>:
 801ce00:	4801      	ldr	r0, [pc, #4]	@ (801ce08 <__malloc_lock+0x8>)
 801ce02:	f000 bba0 	b.w	801d546 <__retarget_lock_acquire_recursive>
 801ce06:	bf00      	nop
 801ce08:	20019d85 	.word	0x20019d85

0801ce0c <__malloc_unlock>:
 801ce0c:	4801      	ldr	r0, [pc, #4]	@ (801ce14 <__malloc_unlock+0x8>)
 801ce0e:	f000 bb9b 	b.w	801d548 <__retarget_lock_release_recursive>
 801ce12:	bf00      	nop
 801ce14:	20019d85 	.word	0x20019d85

0801ce18 <srand>:
 801ce18:	b538      	push	{r3, r4, r5, lr}
 801ce1a:	4b10      	ldr	r3, [pc, #64]	@ (801ce5c <srand+0x44>)
 801ce1c:	681d      	ldr	r5, [r3, #0]
 801ce1e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801ce20:	4604      	mov	r4, r0
 801ce22:	b9b3      	cbnz	r3, 801ce52 <srand+0x3a>
 801ce24:	2018      	movs	r0, #24
 801ce26:	f7ff ff03 	bl	801cc30 <malloc>
 801ce2a:	4602      	mov	r2, r0
 801ce2c:	6328      	str	r0, [r5, #48]	@ 0x30
 801ce2e:	b920      	cbnz	r0, 801ce3a <srand+0x22>
 801ce30:	4b0b      	ldr	r3, [pc, #44]	@ (801ce60 <srand+0x48>)
 801ce32:	480c      	ldr	r0, [pc, #48]	@ (801ce64 <srand+0x4c>)
 801ce34:	2146      	movs	r1, #70	@ 0x46
 801ce36:	f000 fb9f 	bl	801d578 <__assert_func>
 801ce3a:	490b      	ldr	r1, [pc, #44]	@ (801ce68 <srand+0x50>)
 801ce3c:	4b0b      	ldr	r3, [pc, #44]	@ (801ce6c <srand+0x54>)
 801ce3e:	e9c0 1300 	strd	r1, r3, [r0]
 801ce42:	4b0b      	ldr	r3, [pc, #44]	@ (801ce70 <srand+0x58>)
 801ce44:	6083      	str	r3, [r0, #8]
 801ce46:	230b      	movs	r3, #11
 801ce48:	8183      	strh	r3, [r0, #12]
 801ce4a:	2100      	movs	r1, #0
 801ce4c:	2001      	movs	r0, #1
 801ce4e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801ce52:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801ce54:	2200      	movs	r2, #0
 801ce56:	611c      	str	r4, [r3, #16]
 801ce58:	615a      	str	r2, [r3, #20]
 801ce5a:	bd38      	pop	{r3, r4, r5, pc}
 801ce5c:	2000332c 	.word	0x2000332c
 801ce60:	08020838 	.word	0x08020838
 801ce64:	0802084f 	.word	0x0802084f
 801ce68:	abcd330e 	.word	0xabcd330e
 801ce6c:	e66d1234 	.word	0xe66d1234
 801ce70:	0005deec 	.word	0x0005deec

0801ce74 <rand>:
 801ce74:	4b16      	ldr	r3, [pc, #88]	@ (801ced0 <rand+0x5c>)
 801ce76:	b510      	push	{r4, lr}
 801ce78:	681c      	ldr	r4, [r3, #0]
 801ce7a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801ce7c:	b9b3      	cbnz	r3, 801ceac <rand+0x38>
 801ce7e:	2018      	movs	r0, #24
 801ce80:	f7ff fed6 	bl	801cc30 <malloc>
 801ce84:	4602      	mov	r2, r0
 801ce86:	6320      	str	r0, [r4, #48]	@ 0x30
 801ce88:	b920      	cbnz	r0, 801ce94 <rand+0x20>
 801ce8a:	4b12      	ldr	r3, [pc, #72]	@ (801ced4 <rand+0x60>)
 801ce8c:	4812      	ldr	r0, [pc, #72]	@ (801ced8 <rand+0x64>)
 801ce8e:	2152      	movs	r1, #82	@ 0x52
 801ce90:	f000 fb72 	bl	801d578 <__assert_func>
 801ce94:	4911      	ldr	r1, [pc, #68]	@ (801cedc <rand+0x68>)
 801ce96:	4b12      	ldr	r3, [pc, #72]	@ (801cee0 <rand+0x6c>)
 801ce98:	e9c0 1300 	strd	r1, r3, [r0]
 801ce9c:	4b11      	ldr	r3, [pc, #68]	@ (801cee4 <rand+0x70>)
 801ce9e:	6083      	str	r3, [r0, #8]
 801cea0:	230b      	movs	r3, #11
 801cea2:	8183      	strh	r3, [r0, #12]
 801cea4:	2100      	movs	r1, #0
 801cea6:	2001      	movs	r0, #1
 801cea8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801ceac:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801ceae:	480e      	ldr	r0, [pc, #56]	@ (801cee8 <rand+0x74>)
 801ceb0:	690b      	ldr	r3, [r1, #16]
 801ceb2:	694c      	ldr	r4, [r1, #20]
 801ceb4:	4a0d      	ldr	r2, [pc, #52]	@ (801ceec <rand+0x78>)
 801ceb6:	4358      	muls	r0, r3
 801ceb8:	fb02 0004 	mla	r0, r2, r4, r0
 801cebc:	fba3 3202 	umull	r3, r2, r3, r2
 801cec0:	3301      	adds	r3, #1
 801cec2:	eb40 0002 	adc.w	r0, r0, r2
 801cec6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801ceca:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801cece:	bd10      	pop	{r4, pc}
 801ced0:	2000332c 	.word	0x2000332c
 801ced4:	08020838 	.word	0x08020838
 801ced8:	0802084f 	.word	0x0802084f
 801cedc:	abcd330e 	.word	0xabcd330e
 801cee0:	e66d1234 	.word	0xe66d1234
 801cee4:	0005deec 	.word	0x0005deec
 801cee8:	5851f42d 	.word	0x5851f42d
 801ceec:	4c957f2d 	.word	0x4c957f2d

0801cef0 <realloc>:
 801cef0:	4b02      	ldr	r3, [pc, #8]	@ (801cefc <realloc+0xc>)
 801cef2:	460a      	mov	r2, r1
 801cef4:	4601      	mov	r1, r0
 801cef6:	6818      	ldr	r0, [r3, #0]
 801cef8:	f000 b8e2 	b.w	801d0c0 <_realloc_r>
 801cefc:	2000332c 	.word	0x2000332c

0801cf00 <std>:
 801cf00:	2300      	movs	r3, #0
 801cf02:	b510      	push	{r4, lr}
 801cf04:	4604      	mov	r4, r0
 801cf06:	e9c0 3300 	strd	r3, r3, [r0]
 801cf0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801cf0e:	6083      	str	r3, [r0, #8]
 801cf10:	8181      	strh	r1, [r0, #12]
 801cf12:	6643      	str	r3, [r0, #100]	@ 0x64
 801cf14:	81c2      	strh	r2, [r0, #14]
 801cf16:	6183      	str	r3, [r0, #24]
 801cf18:	4619      	mov	r1, r3
 801cf1a:	2208      	movs	r2, #8
 801cf1c:	305c      	adds	r0, #92	@ 0x5c
 801cf1e:	f000 fa87 	bl	801d430 <memset>
 801cf22:	4b0d      	ldr	r3, [pc, #52]	@ (801cf58 <std+0x58>)
 801cf24:	6263      	str	r3, [r4, #36]	@ 0x24
 801cf26:	4b0d      	ldr	r3, [pc, #52]	@ (801cf5c <std+0x5c>)
 801cf28:	62a3      	str	r3, [r4, #40]	@ 0x28
 801cf2a:	4b0d      	ldr	r3, [pc, #52]	@ (801cf60 <std+0x60>)
 801cf2c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801cf2e:	4b0d      	ldr	r3, [pc, #52]	@ (801cf64 <std+0x64>)
 801cf30:	6323      	str	r3, [r4, #48]	@ 0x30
 801cf32:	4b0d      	ldr	r3, [pc, #52]	@ (801cf68 <std+0x68>)
 801cf34:	6224      	str	r4, [r4, #32]
 801cf36:	429c      	cmp	r4, r3
 801cf38:	d006      	beq.n	801cf48 <std+0x48>
 801cf3a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801cf3e:	4294      	cmp	r4, r2
 801cf40:	d002      	beq.n	801cf48 <std+0x48>
 801cf42:	33d0      	adds	r3, #208	@ 0xd0
 801cf44:	429c      	cmp	r4, r3
 801cf46:	d105      	bne.n	801cf54 <std+0x54>
 801cf48:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801cf4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cf50:	f000 baf8 	b.w	801d544 <__retarget_lock_init_recursive>
 801cf54:	bd10      	pop	{r4, pc}
 801cf56:	bf00      	nop
 801cf58:	0801e015 	.word	0x0801e015
 801cf5c:	0801e037 	.word	0x0801e037
 801cf60:	0801e06f 	.word	0x0801e06f
 801cf64:	0801e093 	.word	0x0801e093
 801cf68:	20019c48 	.word	0x20019c48

0801cf6c <stdio_exit_handler>:
 801cf6c:	4a02      	ldr	r2, [pc, #8]	@ (801cf78 <stdio_exit_handler+0xc>)
 801cf6e:	4903      	ldr	r1, [pc, #12]	@ (801cf7c <stdio_exit_handler+0x10>)
 801cf70:	4803      	ldr	r0, [pc, #12]	@ (801cf80 <stdio_exit_handler+0x14>)
 801cf72:	f000 b94b 	b.w	801d20c <_fwalk_sglue>
 801cf76:	bf00      	nop
 801cf78:	20003320 	.word	0x20003320
 801cf7c:	0801dfb5 	.word	0x0801dfb5
 801cf80:	20003330 	.word	0x20003330

0801cf84 <cleanup_stdio>:
 801cf84:	6841      	ldr	r1, [r0, #4]
 801cf86:	4b0c      	ldr	r3, [pc, #48]	@ (801cfb8 <cleanup_stdio+0x34>)
 801cf88:	4299      	cmp	r1, r3
 801cf8a:	b510      	push	{r4, lr}
 801cf8c:	4604      	mov	r4, r0
 801cf8e:	d001      	beq.n	801cf94 <cleanup_stdio+0x10>
 801cf90:	f001 f810 	bl	801dfb4 <_fflush_r>
 801cf94:	68a1      	ldr	r1, [r4, #8]
 801cf96:	4b09      	ldr	r3, [pc, #36]	@ (801cfbc <cleanup_stdio+0x38>)
 801cf98:	4299      	cmp	r1, r3
 801cf9a:	d002      	beq.n	801cfa2 <cleanup_stdio+0x1e>
 801cf9c:	4620      	mov	r0, r4
 801cf9e:	f001 f809 	bl	801dfb4 <_fflush_r>
 801cfa2:	68e1      	ldr	r1, [r4, #12]
 801cfa4:	4b06      	ldr	r3, [pc, #24]	@ (801cfc0 <cleanup_stdio+0x3c>)
 801cfa6:	4299      	cmp	r1, r3
 801cfa8:	d004      	beq.n	801cfb4 <cleanup_stdio+0x30>
 801cfaa:	4620      	mov	r0, r4
 801cfac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cfb0:	f001 b800 	b.w	801dfb4 <_fflush_r>
 801cfb4:	bd10      	pop	{r4, pc}
 801cfb6:	bf00      	nop
 801cfb8:	20019c48 	.word	0x20019c48
 801cfbc:	20019cb0 	.word	0x20019cb0
 801cfc0:	20019d18 	.word	0x20019d18

0801cfc4 <global_stdio_init.part.0>:
 801cfc4:	b510      	push	{r4, lr}
 801cfc6:	4b0b      	ldr	r3, [pc, #44]	@ (801cff4 <global_stdio_init.part.0+0x30>)
 801cfc8:	4c0b      	ldr	r4, [pc, #44]	@ (801cff8 <global_stdio_init.part.0+0x34>)
 801cfca:	4a0c      	ldr	r2, [pc, #48]	@ (801cffc <global_stdio_init.part.0+0x38>)
 801cfcc:	601a      	str	r2, [r3, #0]
 801cfce:	4620      	mov	r0, r4
 801cfd0:	2200      	movs	r2, #0
 801cfd2:	2104      	movs	r1, #4
 801cfd4:	f7ff ff94 	bl	801cf00 <std>
 801cfd8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801cfdc:	2201      	movs	r2, #1
 801cfde:	2109      	movs	r1, #9
 801cfe0:	f7ff ff8e 	bl	801cf00 <std>
 801cfe4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801cfe8:	2202      	movs	r2, #2
 801cfea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cfee:	2112      	movs	r1, #18
 801cff0:	f7ff bf86 	b.w	801cf00 <std>
 801cff4:	20019d80 	.word	0x20019d80
 801cff8:	20019c48 	.word	0x20019c48
 801cffc:	0801cf6d 	.word	0x0801cf6d

0801d000 <__sfp_lock_acquire>:
 801d000:	4801      	ldr	r0, [pc, #4]	@ (801d008 <__sfp_lock_acquire+0x8>)
 801d002:	f000 baa0 	b.w	801d546 <__retarget_lock_acquire_recursive>
 801d006:	bf00      	nop
 801d008:	20019d86 	.word	0x20019d86

0801d00c <__sfp_lock_release>:
 801d00c:	4801      	ldr	r0, [pc, #4]	@ (801d014 <__sfp_lock_release+0x8>)
 801d00e:	f000 ba9b 	b.w	801d548 <__retarget_lock_release_recursive>
 801d012:	bf00      	nop
 801d014:	20019d86 	.word	0x20019d86

0801d018 <__sinit>:
 801d018:	b510      	push	{r4, lr}
 801d01a:	4604      	mov	r4, r0
 801d01c:	f7ff fff0 	bl	801d000 <__sfp_lock_acquire>
 801d020:	6a23      	ldr	r3, [r4, #32]
 801d022:	b11b      	cbz	r3, 801d02c <__sinit+0x14>
 801d024:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d028:	f7ff bff0 	b.w	801d00c <__sfp_lock_release>
 801d02c:	4b04      	ldr	r3, [pc, #16]	@ (801d040 <__sinit+0x28>)
 801d02e:	6223      	str	r3, [r4, #32]
 801d030:	4b04      	ldr	r3, [pc, #16]	@ (801d044 <__sinit+0x2c>)
 801d032:	681b      	ldr	r3, [r3, #0]
 801d034:	2b00      	cmp	r3, #0
 801d036:	d1f5      	bne.n	801d024 <__sinit+0xc>
 801d038:	f7ff ffc4 	bl	801cfc4 <global_stdio_init.part.0>
 801d03c:	e7f2      	b.n	801d024 <__sinit+0xc>
 801d03e:	bf00      	nop
 801d040:	0801cf85 	.word	0x0801cf85
 801d044:	20019d80 	.word	0x20019d80

0801d048 <_vsniprintf_r>:
 801d048:	b530      	push	{r4, r5, lr}
 801d04a:	4614      	mov	r4, r2
 801d04c:	2c00      	cmp	r4, #0
 801d04e:	b09b      	sub	sp, #108	@ 0x6c
 801d050:	4605      	mov	r5, r0
 801d052:	461a      	mov	r2, r3
 801d054:	da05      	bge.n	801d062 <_vsniprintf_r+0x1a>
 801d056:	238b      	movs	r3, #139	@ 0x8b
 801d058:	6003      	str	r3, [r0, #0]
 801d05a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801d05e:	b01b      	add	sp, #108	@ 0x6c
 801d060:	bd30      	pop	{r4, r5, pc}
 801d062:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801d066:	f8ad 300c 	strh.w	r3, [sp, #12]
 801d06a:	f04f 0300 	mov.w	r3, #0
 801d06e:	9319      	str	r3, [sp, #100]	@ 0x64
 801d070:	bf14      	ite	ne
 801d072:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801d076:	4623      	moveq	r3, r4
 801d078:	9302      	str	r3, [sp, #8]
 801d07a:	9305      	str	r3, [sp, #20]
 801d07c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801d080:	9100      	str	r1, [sp, #0]
 801d082:	9104      	str	r1, [sp, #16]
 801d084:	f8ad 300e 	strh.w	r3, [sp, #14]
 801d088:	4669      	mov	r1, sp
 801d08a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801d08c:	f000 fb44 	bl	801d718 <_svfiprintf_r>
 801d090:	1c43      	adds	r3, r0, #1
 801d092:	bfbc      	itt	lt
 801d094:	238b      	movlt	r3, #139	@ 0x8b
 801d096:	602b      	strlt	r3, [r5, #0]
 801d098:	2c00      	cmp	r4, #0
 801d09a:	d0e0      	beq.n	801d05e <_vsniprintf_r+0x16>
 801d09c:	9b00      	ldr	r3, [sp, #0]
 801d09e:	2200      	movs	r2, #0
 801d0a0:	701a      	strb	r2, [r3, #0]
 801d0a2:	e7dc      	b.n	801d05e <_vsniprintf_r+0x16>

0801d0a4 <vsniprintf>:
 801d0a4:	b507      	push	{r0, r1, r2, lr}
 801d0a6:	9300      	str	r3, [sp, #0]
 801d0a8:	4613      	mov	r3, r2
 801d0aa:	460a      	mov	r2, r1
 801d0ac:	4601      	mov	r1, r0
 801d0ae:	4803      	ldr	r0, [pc, #12]	@ (801d0bc <vsniprintf+0x18>)
 801d0b0:	6800      	ldr	r0, [r0, #0]
 801d0b2:	f7ff ffc9 	bl	801d048 <_vsniprintf_r>
 801d0b6:	b003      	add	sp, #12
 801d0b8:	f85d fb04 	ldr.w	pc, [sp], #4
 801d0bc:	2000332c 	.word	0x2000332c

0801d0c0 <_realloc_r>:
 801d0c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d0c4:	4607      	mov	r7, r0
 801d0c6:	4614      	mov	r4, r2
 801d0c8:	460d      	mov	r5, r1
 801d0ca:	b921      	cbnz	r1, 801d0d6 <_realloc_r+0x16>
 801d0cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d0d0:	4611      	mov	r1, r2
 801d0d2:	f7ff bddf 	b.w	801cc94 <_malloc_r>
 801d0d6:	b92a      	cbnz	r2, 801d0e4 <_realloc_r+0x24>
 801d0d8:	f000 fa78 	bl	801d5cc <_free_r>
 801d0dc:	4625      	mov	r5, r4
 801d0de:	4628      	mov	r0, r5
 801d0e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d0e4:	f000 ff8e 	bl	801e004 <_malloc_usable_size_r>
 801d0e8:	4284      	cmp	r4, r0
 801d0ea:	4606      	mov	r6, r0
 801d0ec:	d802      	bhi.n	801d0f4 <_realloc_r+0x34>
 801d0ee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801d0f2:	d8f4      	bhi.n	801d0de <_realloc_r+0x1e>
 801d0f4:	4621      	mov	r1, r4
 801d0f6:	4638      	mov	r0, r7
 801d0f8:	f7ff fdcc 	bl	801cc94 <_malloc_r>
 801d0fc:	4680      	mov	r8, r0
 801d0fe:	b908      	cbnz	r0, 801d104 <_realloc_r+0x44>
 801d100:	4645      	mov	r5, r8
 801d102:	e7ec      	b.n	801d0de <_realloc_r+0x1e>
 801d104:	42b4      	cmp	r4, r6
 801d106:	4622      	mov	r2, r4
 801d108:	4629      	mov	r1, r5
 801d10a:	bf28      	it	cs
 801d10c:	4632      	movcs	r2, r6
 801d10e:	f000 fa24 	bl	801d55a <memcpy>
 801d112:	4629      	mov	r1, r5
 801d114:	4638      	mov	r0, r7
 801d116:	f000 fa59 	bl	801d5cc <_free_r>
 801d11a:	e7f1      	b.n	801d100 <_realloc_r+0x40>

0801d11c <_strtoul_l.isra.0>:
 801d11c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d120:	4e34      	ldr	r6, [pc, #208]	@ (801d1f4 <_strtoul_l.isra.0+0xd8>)
 801d122:	4686      	mov	lr, r0
 801d124:	460d      	mov	r5, r1
 801d126:	4628      	mov	r0, r5
 801d128:	f815 4b01 	ldrb.w	r4, [r5], #1
 801d12c:	5d37      	ldrb	r7, [r6, r4]
 801d12e:	f017 0708 	ands.w	r7, r7, #8
 801d132:	d1f8      	bne.n	801d126 <_strtoul_l.isra.0+0xa>
 801d134:	2c2d      	cmp	r4, #45	@ 0x2d
 801d136:	d110      	bne.n	801d15a <_strtoul_l.isra.0+0x3e>
 801d138:	782c      	ldrb	r4, [r5, #0]
 801d13a:	2701      	movs	r7, #1
 801d13c:	1c85      	adds	r5, r0, #2
 801d13e:	f033 0010 	bics.w	r0, r3, #16
 801d142:	d115      	bne.n	801d170 <_strtoul_l.isra.0+0x54>
 801d144:	2c30      	cmp	r4, #48	@ 0x30
 801d146:	d10d      	bne.n	801d164 <_strtoul_l.isra.0+0x48>
 801d148:	7828      	ldrb	r0, [r5, #0]
 801d14a:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 801d14e:	2858      	cmp	r0, #88	@ 0x58
 801d150:	d108      	bne.n	801d164 <_strtoul_l.isra.0+0x48>
 801d152:	786c      	ldrb	r4, [r5, #1]
 801d154:	3502      	adds	r5, #2
 801d156:	2310      	movs	r3, #16
 801d158:	e00a      	b.n	801d170 <_strtoul_l.isra.0+0x54>
 801d15a:	2c2b      	cmp	r4, #43	@ 0x2b
 801d15c:	bf04      	itt	eq
 801d15e:	782c      	ldrbeq	r4, [r5, #0]
 801d160:	1c85      	addeq	r5, r0, #2
 801d162:	e7ec      	b.n	801d13e <_strtoul_l.isra.0+0x22>
 801d164:	2b00      	cmp	r3, #0
 801d166:	d1f6      	bne.n	801d156 <_strtoul_l.isra.0+0x3a>
 801d168:	2c30      	cmp	r4, #48	@ 0x30
 801d16a:	bf14      	ite	ne
 801d16c:	230a      	movne	r3, #10
 801d16e:	2308      	moveq	r3, #8
 801d170:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 801d174:	2600      	movs	r6, #0
 801d176:	fbb8 f8f3 	udiv	r8, r8, r3
 801d17a:	fb03 f908 	mul.w	r9, r3, r8
 801d17e:	ea6f 0909 	mvn.w	r9, r9
 801d182:	4630      	mov	r0, r6
 801d184:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 801d188:	f1bc 0f09 	cmp.w	ip, #9
 801d18c:	d810      	bhi.n	801d1b0 <_strtoul_l.isra.0+0x94>
 801d18e:	4664      	mov	r4, ip
 801d190:	42a3      	cmp	r3, r4
 801d192:	dd1e      	ble.n	801d1d2 <_strtoul_l.isra.0+0xb6>
 801d194:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 801d198:	d007      	beq.n	801d1aa <_strtoul_l.isra.0+0x8e>
 801d19a:	4580      	cmp	r8, r0
 801d19c:	d316      	bcc.n	801d1cc <_strtoul_l.isra.0+0xb0>
 801d19e:	d101      	bne.n	801d1a4 <_strtoul_l.isra.0+0x88>
 801d1a0:	45a1      	cmp	r9, r4
 801d1a2:	db13      	blt.n	801d1cc <_strtoul_l.isra.0+0xb0>
 801d1a4:	fb00 4003 	mla	r0, r0, r3, r4
 801d1a8:	2601      	movs	r6, #1
 801d1aa:	f815 4b01 	ldrb.w	r4, [r5], #1
 801d1ae:	e7e9      	b.n	801d184 <_strtoul_l.isra.0+0x68>
 801d1b0:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 801d1b4:	f1bc 0f19 	cmp.w	ip, #25
 801d1b8:	d801      	bhi.n	801d1be <_strtoul_l.isra.0+0xa2>
 801d1ba:	3c37      	subs	r4, #55	@ 0x37
 801d1bc:	e7e8      	b.n	801d190 <_strtoul_l.isra.0+0x74>
 801d1be:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 801d1c2:	f1bc 0f19 	cmp.w	ip, #25
 801d1c6:	d804      	bhi.n	801d1d2 <_strtoul_l.isra.0+0xb6>
 801d1c8:	3c57      	subs	r4, #87	@ 0x57
 801d1ca:	e7e1      	b.n	801d190 <_strtoul_l.isra.0+0x74>
 801d1cc:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 801d1d0:	e7eb      	b.n	801d1aa <_strtoul_l.isra.0+0x8e>
 801d1d2:	1c73      	adds	r3, r6, #1
 801d1d4:	d106      	bne.n	801d1e4 <_strtoul_l.isra.0+0xc8>
 801d1d6:	2322      	movs	r3, #34	@ 0x22
 801d1d8:	f8ce 3000 	str.w	r3, [lr]
 801d1dc:	4630      	mov	r0, r6
 801d1de:	b932      	cbnz	r2, 801d1ee <_strtoul_l.isra.0+0xd2>
 801d1e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d1e4:	b107      	cbz	r7, 801d1e8 <_strtoul_l.isra.0+0xcc>
 801d1e6:	4240      	negs	r0, r0
 801d1e8:	2a00      	cmp	r2, #0
 801d1ea:	d0f9      	beq.n	801d1e0 <_strtoul_l.isra.0+0xc4>
 801d1ec:	b106      	cbz	r6, 801d1f0 <_strtoul_l.isra.0+0xd4>
 801d1ee:	1e69      	subs	r1, r5, #1
 801d1f0:	6011      	str	r1, [r2, #0]
 801d1f2:	e7f5      	b.n	801d1e0 <_strtoul_l.isra.0+0xc4>
 801d1f4:	08020989 	.word	0x08020989

0801d1f8 <strtoul>:
 801d1f8:	4613      	mov	r3, r2
 801d1fa:	460a      	mov	r2, r1
 801d1fc:	4601      	mov	r1, r0
 801d1fe:	4802      	ldr	r0, [pc, #8]	@ (801d208 <strtoul+0x10>)
 801d200:	6800      	ldr	r0, [r0, #0]
 801d202:	f7ff bf8b 	b.w	801d11c <_strtoul_l.isra.0>
 801d206:	bf00      	nop
 801d208:	2000332c 	.word	0x2000332c

0801d20c <_fwalk_sglue>:
 801d20c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d210:	4607      	mov	r7, r0
 801d212:	4688      	mov	r8, r1
 801d214:	4614      	mov	r4, r2
 801d216:	2600      	movs	r6, #0
 801d218:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801d21c:	f1b9 0901 	subs.w	r9, r9, #1
 801d220:	d505      	bpl.n	801d22e <_fwalk_sglue+0x22>
 801d222:	6824      	ldr	r4, [r4, #0]
 801d224:	2c00      	cmp	r4, #0
 801d226:	d1f7      	bne.n	801d218 <_fwalk_sglue+0xc>
 801d228:	4630      	mov	r0, r6
 801d22a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d22e:	89ab      	ldrh	r3, [r5, #12]
 801d230:	2b01      	cmp	r3, #1
 801d232:	d907      	bls.n	801d244 <_fwalk_sglue+0x38>
 801d234:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801d238:	3301      	adds	r3, #1
 801d23a:	d003      	beq.n	801d244 <_fwalk_sglue+0x38>
 801d23c:	4629      	mov	r1, r5
 801d23e:	4638      	mov	r0, r7
 801d240:	47c0      	blx	r8
 801d242:	4306      	orrs	r6, r0
 801d244:	3568      	adds	r5, #104	@ 0x68
 801d246:	e7e9      	b.n	801d21c <_fwalk_sglue+0x10>

0801d248 <_fwrite_r>:
 801d248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d24c:	9c08      	ldr	r4, [sp, #32]
 801d24e:	468a      	mov	sl, r1
 801d250:	4690      	mov	r8, r2
 801d252:	fb02 f903 	mul.w	r9, r2, r3
 801d256:	4606      	mov	r6, r0
 801d258:	b118      	cbz	r0, 801d262 <_fwrite_r+0x1a>
 801d25a:	6a03      	ldr	r3, [r0, #32]
 801d25c:	b90b      	cbnz	r3, 801d262 <_fwrite_r+0x1a>
 801d25e:	f7ff fedb 	bl	801d018 <__sinit>
 801d262:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801d264:	07dd      	lsls	r5, r3, #31
 801d266:	d405      	bmi.n	801d274 <_fwrite_r+0x2c>
 801d268:	89a3      	ldrh	r3, [r4, #12]
 801d26a:	0598      	lsls	r0, r3, #22
 801d26c:	d402      	bmi.n	801d274 <_fwrite_r+0x2c>
 801d26e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801d270:	f000 f969 	bl	801d546 <__retarget_lock_acquire_recursive>
 801d274:	89a3      	ldrh	r3, [r4, #12]
 801d276:	0719      	lsls	r1, r3, #28
 801d278:	d516      	bpl.n	801d2a8 <_fwrite_r+0x60>
 801d27a:	6923      	ldr	r3, [r4, #16]
 801d27c:	b1a3      	cbz	r3, 801d2a8 <_fwrite_r+0x60>
 801d27e:	2500      	movs	r5, #0
 801d280:	454d      	cmp	r5, r9
 801d282:	d01f      	beq.n	801d2c4 <_fwrite_r+0x7c>
 801d284:	68a7      	ldr	r7, [r4, #8]
 801d286:	f81a 1005 	ldrb.w	r1, [sl, r5]
 801d28a:	3f01      	subs	r7, #1
 801d28c:	2f00      	cmp	r7, #0
 801d28e:	60a7      	str	r7, [r4, #8]
 801d290:	da04      	bge.n	801d29c <_fwrite_r+0x54>
 801d292:	69a3      	ldr	r3, [r4, #24]
 801d294:	429f      	cmp	r7, r3
 801d296:	db0f      	blt.n	801d2b8 <_fwrite_r+0x70>
 801d298:	290a      	cmp	r1, #10
 801d29a:	d00d      	beq.n	801d2b8 <_fwrite_r+0x70>
 801d29c:	6823      	ldr	r3, [r4, #0]
 801d29e:	1c5a      	adds	r2, r3, #1
 801d2a0:	6022      	str	r2, [r4, #0]
 801d2a2:	7019      	strb	r1, [r3, #0]
 801d2a4:	3501      	adds	r5, #1
 801d2a6:	e7eb      	b.n	801d280 <_fwrite_r+0x38>
 801d2a8:	4621      	mov	r1, r4
 801d2aa:	4630      	mov	r0, r6
 801d2ac:	f000 ff46 	bl	801e13c <__swsetup_r>
 801d2b0:	2800      	cmp	r0, #0
 801d2b2:	d0e4      	beq.n	801d27e <_fwrite_r+0x36>
 801d2b4:	2500      	movs	r5, #0
 801d2b6:	e005      	b.n	801d2c4 <_fwrite_r+0x7c>
 801d2b8:	4622      	mov	r2, r4
 801d2ba:	4630      	mov	r0, r6
 801d2bc:	f000 ff00 	bl	801e0c0 <__swbuf_r>
 801d2c0:	3001      	adds	r0, #1
 801d2c2:	d1ef      	bne.n	801d2a4 <_fwrite_r+0x5c>
 801d2c4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801d2c6:	07da      	lsls	r2, r3, #31
 801d2c8:	d405      	bmi.n	801d2d6 <_fwrite_r+0x8e>
 801d2ca:	89a3      	ldrh	r3, [r4, #12]
 801d2cc:	059b      	lsls	r3, r3, #22
 801d2ce:	d402      	bmi.n	801d2d6 <_fwrite_r+0x8e>
 801d2d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801d2d2:	f000 f939 	bl	801d548 <__retarget_lock_release_recursive>
 801d2d6:	fbb5 f0f8 	udiv	r0, r5, r8
 801d2da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0801d2e0 <fwrite>:
 801d2e0:	b507      	push	{r0, r1, r2, lr}
 801d2e2:	9300      	str	r3, [sp, #0]
 801d2e4:	4613      	mov	r3, r2
 801d2e6:	460a      	mov	r2, r1
 801d2e8:	4601      	mov	r1, r0
 801d2ea:	4803      	ldr	r0, [pc, #12]	@ (801d2f8 <fwrite+0x18>)
 801d2ec:	6800      	ldr	r0, [r0, #0]
 801d2ee:	f7ff ffab 	bl	801d248 <_fwrite_r>
 801d2f2:	b003      	add	sp, #12
 801d2f4:	f85d fb04 	ldr.w	pc, [sp], #4
 801d2f8:	2000332c 	.word	0x2000332c

0801d2fc <iprintf>:
 801d2fc:	b40f      	push	{r0, r1, r2, r3}
 801d2fe:	b507      	push	{r0, r1, r2, lr}
 801d300:	4906      	ldr	r1, [pc, #24]	@ (801d31c <iprintf+0x20>)
 801d302:	ab04      	add	r3, sp, #16
 801d304:	6808      	ldr	r0, [r1, #0]
 801d306:	f853 2b04 	ldr.w	r2, [r3], #4
 801d30a:	6881      	ldr	r1, [r0, #8]
 801d30c:	9301      	str	r3, [sp, #4]
 801d30e:	f000 fb29 	bl	801d964 <_vfiprintf_r>
 801d312:	b003      	add	sp, #12
 801d314:	f85d eb04 	ldr.w	lr, [sp], #4
 801d318:	b004      	add	sp, #16
 801d31a:	4770      	bx	lr
 801d31c:	2000332c 	.word	0x2000332c

0801d320 <_puts_r>:
 801d320:	6a03      	ldr	r3, [r0, #32]
 801d322:	b570      	push	{r4, r5, r6, lr}
 801d324:	6884      	ldr	r4, [r0, #8]
 801d326:	4605      	mov	r5, r0
 801d328:	460e      	mov	r6, r1
 801d32a:	b90b      	cbnz	r3, 801d330 <_puts_r+0x10>
 801d32c:	f7ff fe74 	bl	801d018 <__sinit>
 801d330:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801d332:	07db      	lsls	r3, r3, #31
 801d334:	d405      	bmi.n	801d342 <_puts_r+0x22>
 801d336:	89a3      	ldrh	r3, [r4, #12]
 801d338:	0598      	lsls	r0, r3, #22
 801d33a:	d402      	bmi.n	801d342 <_puts_r+0x22>
 801d33c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801d33e:	f000 f902 	bl	801d546 <__retarget_lock_acquire_recursive>
 801d342:	89a3      	ldrh	r3, [r4, #12]
 801d344:	0719      	lsls	r1, r3, #28
 801d346:	d502      	bpl.n	801d34e <_puts_r+0x2e>
 801d348:	6923      	ldr	r3, [r4, #16]
 801d34a:	2b00      	cmp	r3, #0
 801d34c:	d135      	bne.n	801d3ba <_puts_r+0x9a>
 801d34e:	4621      	mov	r1, r4
 801d350:	4628      	mov	r0, r5
 801d352:	f000 fef3 	bl	801e13c <__swsetup_r>
 801d356:	b380      	cbz	r0, 801d3ba <_puts_r+0x9a>
 801d358:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 801d35c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801d35e:	07da      	lsls	r2, r3, #31
 801d360:	d405      	bmi.n	801d36e <_puts_r+0x4e>
 801d362:	89a3      	ldrh	r3, [r4, #12]
 801d364:	059b      	lsls	r3, r3, #22
 801d366:	d402      	bmi.n	801d36e <_puts_r+0x4e>
 801d368:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801d36a:	f000 f8ed 	bl	801d548 <__retarget_lock_release_recursive>
 801d36e:	4628      	mov	r0, r5
 801d370:	bd70      	pop	{r4, r5, r6, pc}
 801d372:	2b00      	cmp	r3, #0
 801d374:	da04      	bge.n	801d380 <_puts_r+0x60>
 801d376:	69a2      	ldr	r2, [r4, #24]
 801d378:	429a      	cmp	r2, r3
 801d37a:	dc17      	bgt.n	801d3ac <_puts_r+0x8c>
 801d37c:	290a      	cmp	r1, #10
 801d37e:	d015      	beq.n	801d3ac <_puts_r+0x8c>
 801d380:	6823      	ldr	r3, [r4, #0]
 801d382:	1c5a      	adds	r2, r3, #1
 801d384:	6022      	str	r2, [r4, #0]
 801d386:	7019      	strb	r1, [r3, #0]
 801d388:	68a3      	ldr	r3, [r4, #8]
 801d38a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801d38e:	3b01      	subs	r3, #1
 801d390:	60a3      	str	r3, [r4, #8]
 801d392:	2900      	cmp	r1, #0
 801d394:	d1ed      	bne.n	801d372 <_puts_r+0x52>
 801d396:	2b00      	cmp	r3, #0
 801d398:	da11      	bge.n	801d3be <_puts_r+0x9e>
 801d39a:	4622      	mov	r2, r4
 801d39c:	210a      	movs	r1, #10
 801d39e:	4628      	mov	r0, r5
 801d3a0:	f000 fe8e 	bl	801e0c0 <__swbuf_r>
 801d3a4:	3001      	adds	r0, #1
 801d3a6:	d0d7      	beq.n	801d358 <_puts_r+0x38>
 801d3a8:	250a      	movs	r5, #10
 801d3aa:	e7d7      	b.n	801d35c <_puts_r+0x3c>
 801d3ac:	4622      	mov	r2, r4
 801d3ae:	4628      	mov	r0, r5
 801d3b0:	f000 fe86 	bl	801e0c0 <__swbuf_r>
 801d3b4:	3001      	adds	r0, #1
 801d3b6:	d1e7      	bne.n	801d388 <_puts_r+0x68>
 801d3b8:	e7ce      	b.n	801d358 <_puts_r+0x38>
 801d3ba:	3e01      	subs	r6, #1
 801d3bc:	e7e4      	b.n	801d388 <_puts_r+0x68>
 801d3be:	6823      	ldr	r3, [r4, #0]
 801d3c0:	1c5a      	adds	r2, r3, #1
 801d3c2:	6022      	str	r2, [r4, #0]
 801d3c4:	220a      	movs	r2, #10
 801d3c6:	701a      	strb	r2, [r3, #0]
 801d3c8:	e7ee      	b.n	801d3a8 <_puts_r+0x88>
	...

0801d3cc <puts>:
 801d3cc:	4b02      	ldr	r3, [pc, #8]	@ (801d3d8 <puts+0xc>)
 801d3ce:	4601      	mov	r1, r0
 801d3d0:	6818      	ldr	r0, [r3, #0]
 801d3d2:	f7ff bfa5 	b.w	801d320 <_puts_r>
 801d3d6:	bf00      	nop
 801d3d8:	2000332c 	.word	0x2000332c

0801d3dc <memcmp>:
 801d3dc:	b510      	push	{r4, lr}
 801d3de:	3901      	subs	r1, #1
 801d3e0:	4402      	add	r2, r0
 801d3e2:	4290      	cmp	r0, r2
 801d3e4:	d101      	bne.n	801d3ea <memcmp+0xe>
 801d3e6:	2000      	movs	r0, #0
 801d3e8:	e005      	b.n	801d3f6 <memcmp+0x1a>
 801d3ea:	7803      	ldrb	r3, [r0, #0]
 801d3ec:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801d3f0:	42a3      	cmp	r3, r4
 801d3f2:	d001      	beq.n	801d3f8 <memcmp+0x1c>
 801d3f4:	1b18      	subs	r0, r3, r4
 801d3f6:	bd10      	pop	{r4, pc}
 801d3f8:	3001      	adds	r0, #1
 801d3fa:	e7f2      	b.n	801d3e2 <memcmp+0x6>

0801d3fc <memmove>:
 801d3fc:	4288      	cmp	r0, r1
 801d3fe:	b510      	push	{r4, lr}
 801d400:	eb01 0402 	add.w	r4, r1, r2
 801d404:	d902      	bls.n	801d40c <memmove+0x10>
 801d406:	4284      	cmp	r4, r0
 801d408:	4623      	mov	r3, r4
 801d40a:	d807      	bhi.n	801d41c <memmove+0x20>
 801d40c:	1e43      	subs	r3, r0, #1
 801d40e:	42a1      	cmp	r1, r4
 801d410:	d008      	beq.n	801d424 <memmove+0x28>
 801d412:	f811 2b01 	ldrb.w	r2, [r1], #1
 801d416:	f803 2f01 	strb.w	r2, [r3, #1]!
 801d41a:	e7f8      	b.n	801d40e <memmove+0x12>
 801d41c:	4402      	add	r2, r0
 801d41e:	4601      	mov	r1, r0
 801d420:	428a      	cmp	r2, r1
 801d422:	d100      	bne.n	801d426 <memmove+0x2a>
 801d424:	bd10      	pop	{r4, pc}
 801d426:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801d42a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801d42e:	e7f7      	b.n	801d420 <memmove+0x24>

0801d430 <memset>:
 801d430:	4402      	add	r2, r0
 801d432:	4603      	mov	r3, r0
 801d434:	4293      	cmp	r3, r2
 801d436:	d100      	bne.n	801d43a <memset+0xa>
 801d438:	4770      	bx	lr
 801d43a:	f803 1b01 	strb.w	r1, [r3], #1
 801d43e:	e7f9      	b.n	801d434 <memset+0x4>

0801d440 <strchr>:
 801d440:	b2c9      	uxtb	r1, r1
 801d442:	4603      	mov	r3, r0
 801d444:	4618      	mov	r0, r3
 801d446:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d44a:	b112      	cbz	r2, 801d452 <strchr+0x12>
 801d44c:	428a      	cmp	r2, r1
 801d44e:	d1f9      	bne.n	801d444 <strchr+0x4>
 801d450:	4770      	bx	lr
 801d452:	2900      	cmp	r1, #0
 801d454:	bf18      	it	ne
 801d456:	2000      	movne	r0, #0
 801d458:	4770      	bx	lr

0801d45a <strncmp>:
 801d45a:	b510      	push	{r4, lr}
 801d45c:	b16a      	cbz	r2, 801d47a <strncmp+0x20>
 801d45e:	3901      	subs	r1, #1
 801d460:	1884      	adds	r4, r0, r2
 801d462:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d466:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801d46a:	429a      	cmp	r2, r3
 801d46c:	d103      	bne.n	801d476 <strncmp+0x1c>
 801d46e:	42a0      	cmp	r0, r4
 801d470:	d001      	beq.n	801d476 <strncmp+0x1c>
 801d472:	2a00      	cmp	r2, #0
 801d474:	d1f5      	bne.n	801d462 <strncmp+0x8>
 801d476:	1ad0      	subs	r0, r2, r3
 801d478:	bd10      	pop	{r4, pc}
 801d47a:	4610      	mov	r0, r2
 801d47c:	e7fc      	b.n	801d478 <strncmp+0x1e>

0801d47e <strncpy>:
 801d47e:	b510      	push	{r4, lr}
 801d480:	3901      	subs	r1, #1
 801d482:	4603      	mov	r3, r0
 801d484:	b132      	cbz	r2, 801d494 <strncpy+0x16>
 801d486:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801d48a:	f803 4b01 	strb.w	r4, [r3], #1
 801d48e:	3a01      	subs	r2, #1
 801d490:	2c00      	cmp	r4, #0
 801d492:	d1f7      	bne.n	801d484 <strncpy+0x6>
 801d494:	441a      	add	r2, r3
 801d496:	2100      	movs	r1, #0
 801d498:	4293      	cmp	r3, r2
 801d49a:	d100      	bne.n	801d49e <strncpy+0x20>
 801d49c:	bd10      	pop	{r4, pc}
 801d49e:	f803 1b01 	strb.w	r1, [r3], #1
 801d4a2:	e7f9      	b.n	801d498 <strncpy+0x1a>

0801d4a4 <strstr>:
 801d4a4:	780a      	ldrb	r2, [r1, #0]
 801d4a6:	b570      	push	{r4, r5, r6, lr}
 801d4a8:	b96a      	cbnz	r2, 801d4c6 <strstr+0x22>
 801d4aa:	bd70      	pop	{r4, r5, r6, pc}
 801d4ac:	429a      	cmp	r2, r3
 801d4ae:	d109      	bne.n	801d4c4 <strstr+0x20>
 801d4b0:	460c      	mov	r4, r1
 801d4b2:	4605      	mov	r5, r0
 801d4b4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801d4b8:	2b00      	cmp	r3, #0
 801d4ba:	d0f6      	beq.n	801d4aa <strstr+0x6>
 801d4bc:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801d4c0:	429e      	cmp	r6, r3
 801d4c2:	d0f7      	beq.n	801d4b4 <strstr+0x10>
 801d4c4:	3001      	adds	r0, #1
 801d4c6:	7803      	ldrb	r3, [r0, #0]
 801d4c8:	2b00      	cmp	r3, #0
 801d4ca:	d1ef      	bne.n	801d4ac <strstr+0x8>
 801d4cc:	4618      	mov	r0, r3
 801d4ce:	e7ec      	b.n	801d4aa <strstr+0x6>

0801d4d0 <_sbrk_r>:
 801d4d0:	b538      	push	{r3, r4, r5, lr}
 801d4d2:	4d06      	ldr	r5, [pc, #24]	@ (801d4ec <_sbrk_r+0x1c>)
 801d4d4:	2300      	movs	r3, #0
 801d4d6:	4604      	mov	r4, r0
 801d4d8:	4608      	mov	r0, r1
 801d4da:	602b      	str	r3, [r5, #0]
 801d4dc:	f7e5 f94c 	bl	8002778 <_sbrk>
 801d4e0:	1c43      	adds	r3, r0, #1
 801d4e2:	d102      	bne.n	801d4ea <_sbrk_r+0x1a>
 801d4e4:	682b      	ldr	r3, [r5, #0]
 801d4e6:	b103      	cbz	r3, 801d4ea <_sbrk_r+0x1a>
 801d4e8:	6023      	str	r3, [r4, #0]
 801d4ea:	bd38      	pop	{r3, r4, r5, pc}
 801d4ec:	20019d88 	.word	0x20019d88

0801d4f0 <__errno>:
 801d4f0:	4b01      	ldr	r3, [pc, #4]	@ (801d4f8 <__errno+0x8>)
 801d4f2:	6818      	ldr	r0, [r3, #0]
 801d4f4:	4770      	bx	lr
 801d4f6:	bf00      	nop
 801d4f8:	2000332c 	.word	0x2000332c

0801d4fc <__libc_init_array>:
 801d4fc:	b570      	push	{r4, r5, r6, lr}
 801d4fe:	4d0d      	ldr	r5, [pc, #52]	@ (801d534 <__libc_init_array+0x38>)
 801d500:	4c0d      	ldr	r4, [pc, #52]	@ (801d538 <__libc_init_array+0x3c>)
 801d502:	1b64      	subs	r4, r4, r5
 801d504:	10a4      	asrs	r4, r4, #2
 801d506:	2600      	movs	r6, #0
 801d508:	42a6      	cmp	r6, r4
 801d50a:	d109      	bne.n	801d520 <__libc_init_array+0x24>
 801d50c:	4d0b      	ldr	r5, [pc, #44]	@ (801d53c <__libc_init_array+0x40>)
 801d50e:	4c0c      	ldr	r4, [pc, #48]	@ (801d540 <__libc_init_array+0x44>)
 801d510:	f000 ff80 	bl	801e414 <_init>
 801d514:	1b64      	subs	r4, r4, r5
 801d516:	10a4      	asrs	r4, r4, #2
 801d518:	2600      	movs	r6, #0
 801d51a:	42a6      	cmp	r6, r4
 801d51c:	d105      	bne.n	801d52a <__libc_init_array+0x2e>
 801d51e:	bd70      	pop	{r4, r5, r6, pc}
 801d520:	f855 3b04 	ldr.w	r3, [r5], #4
 801d524:	4798      	blx	r3
 801d526:	3601      	adds	r6, #1
 801d528:	e7ee      	b.n	801d508 <__libc_init_array+0xc>
 801d52a:	f855 3b04 	ldr.w	r3, [r5], #4
 801d52e:	4798      	blx	r3
 801d530:	3601      	adds	r6, #1
 801d532:	e7f2      	b.n	801d51a <__libc_init_array+0x1e>
 801d534:	08020a94 	.word	0x08020a94
 801d538:	08020a94 	.word	0x08020a94
 801d53c:	08020a94 	.word	0x08020a94
 801d540:	08020aac 	.word	0x08020aac

0801d544 <__retarget_lock_init_recursive>:
 801d544:	4770      	bx	lr

0801d546 <__retarget_lock_acquire_recursive>:
 801d546:	4770      	bx	lr

0801d548 <__retarget_lock_release_recursive>:
 801d548:	4770      	bx	lr

0801d54a <strcpy>:
 801d54a:	4603      	mov	r3, r0
 801d54c:	f811 2b01 	ldrb.w	r2, [r1], #1
 801d550:	f803 2b01 	strb.w	r2, [r3], #1
 801d554:	2a00      	cmp	r2, #0
 801d556:	d1f9      	bne.n	801d54c <strcpy+0x2>
 801d558:	4770      	bx	lr

0801d55a <memcpy>:
 801d55a:	440a      	add	r2, r1
 801d55c:	4291      	cmp	r1, r2
 801d55e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 801d562:	d100      	bne.n	801d566 <memcpy+0xc>
 801d564:	4770      	bx	lr
 801d566:	b510      	push	{r4, lr}
 801d568:	f811 4b01 	ldrb.w	r4, [r1], #1
 801d56c:	f803 4f01 	strb.w	r4, [r3, #1]!
 801d570:	4291      	cmp	r1, r2
 801d572:	d1f9      	bne.n	801d568 <memcpy+0xe>
 801d574:	bd10      	pop	{r4, pc}
	...

0801d578 <__assert_func>:
 801d578:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801d57a:	4614      	mov	r4, r2
 801d57c:	461a      	mov	r2, r3
 801d57e:	4b09      	ldr	r3, [pc, #36]	@ (801d5a4 <__assert_func+0x2c>)
 801d580:	681b      	ldr	r3, [r3, #0]
 801d582:	4605      	mov	r5, r0
 801d584:	68d8      	ldr	r0, [r3, #12]
 801d586:	b14c      	cbz	r4, 801d59c <__assert_func+0x24>
 801d588:	4b07      	ldr	r3, [pc, #28]	@ (801d5a8 <__assert_func+0x30>)
 801d58a:	9100      	str	r1, [sp, #0]
 801d58c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801d590:	4906      	ldr	r1, [pc, #24]	@ (801d5ac <__assert_func+0x34>)
 801d592:	462b      	mov	r3, r5
 801d594:	f000 fd82 	bl	801e09c <fiprintf>
 801d598:	f000 fef0 	bl	801e37c <abort>
 801d59c:	4b04      	ldr	r3, [pc, #16]	@ (801d5b0 <__assert_func+0x38>)
 801d59e:	461c      	mov	r4, r3
 801d5a0:	e7f3      	b.n	801d58a <__assert_func+0x12>
 801d5a2:	bf00      	nop
 801d5a4:	2000332c 	.word	0x2000332c
 801d5a8:	080208a7 	.word	0x080208a7
 801d5ac:	080208b4 	.word	0x080208b4
 801d5b0:	080208e2 	.word	0x080208e2

0801d5b4 <__env_lock>:
 801d5b4:	4801      	ldr	r0, [pc, #4]	@ (801d5bc <__env_lock+0x8>)
 801d5b6:	f7ff bfc6 	b.w	801d546 <__retarget_lock_acquire_recursive>
 801d5ba:	bf00      	nop
 801d5bc:	20019d84 	.word	0x20019d84

0801d5c0 <__env_unlock>:
 801d5c0:	4801      	ldr	r0, [pc, #4]	@ (801d5c8 <__env_unlock+0x8>)
 801d5c2:	f7ff bfc1 	b.w	801d548 <__retarget_lock_release_recursive>
 801d5c6:	bf00      	nop
 801d5c8:	20019d84 	.word	0x20019d84

0801d5cc <_free_r>:
 801d5cc:	b538      	push	{r3, r4, r5, lr}
 801d5ce:	4605      	mov	r5, r0
 801d5d0:	2900      	cmp	r1, #0
 801d5d2:	d041      	beq.n	801d658 <_free_r+0x8c>
 801d5d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801d5d8:	1f0c      	subs	r4, r1, #4
 801d5da:	2b00      	cmp	r3, #0
 801d5dc:	bfb8      	it	lt
 801d5de:	18e4      	addlt	r4, r4, r3
 801d5e0:	f7ff fc0e 	bl	801ce00 <__malloc_lock>
 801d5e4:	4a1d      	ldr	r2, [pc, #116]	@ (801d65c <_free_r+0x90>)
 801d5e6:	6813      	ldr	r3, [r2, #0]
 801d5e8:	b933      	cbnz	r3, 801d5f8 <_free_r+0x2c>
 801d5ea:	6063      	str	r3, [r4, #4]
 801d5ec:	6014      	str	r4, [r2, #0]
 801d5ee:	4628      	mov	r0, r5
 801d5f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d5f4:	f7ff bc0a 	b.w	801ce0c <__malloc_unlock>
 801d5f8:	42a3      	cmp	r3, r4
 801d5fa:	d908      	bls.n	801d60e <_free_r+0x42>
 801d5fc:	6820      	ldr	r0, [r4, #0]
 801d5fe:	1821      	adds	r1, r4, r0
 801d600:	428b      	cmp	r3, r1
 801d602:	bf01      	itttt	eq
 801d604:	6819      	ldreq	r1, [r3, #0]
 801d606:	685b      	ldreq	r3, [r3, #4]
 801d608:	1809      	addeq	r1, r1, r0
 801d60a:	6021      	streq	r1, [r4, #0]
 801d60c:	e7ed      	b.n	801d5ea <_free_r+0x1e>
 801d60e:	461a      	mov	r2, r3
 801d610:	685b      	ldr	r3, [r3, #4]
 801d612:	b10b      	cbz	r3, 801d618 <_free_r+0x4c>
 801d614:	42a3      	cmp	r3, r4
 801d616:	d9fa      	bls.n	801d60e <_free_r+0x42>
 801d618:	6811      	ldr	r1, [r2, #0]
 801d61a:	1850      	adds	r0, r2, r1
 801d61c:	42a0      	cmp	r0, r4
 801d61e:	d10b      	bne.n	801d638 <_free_r+0x6c>
 801d620:	6820      	ldr	r0, [r4, #0]
 801d622:	4401      	add	r1, r0
 801d624:	1850      	adds	r0, r2, r1
 801d626:	4283      	cmp	r3, r0
 801d628:	6011      	str	r1, [r2, #0]
 801d62a:	d1e0      	bne.n	801d5ee <_free_r+0x22>
 801d62c:	6818      	ldr	r0, [r3, #0]
 801d62e:	685b      	ldr	r3, [r3, #4]
 801d630:	6053      	str	r3, [r2, #4]
 801d632:	4408      	add	r0, r1
 801d634:	6010      	str	r0, [r2, #0]
 801d636:	e7da      	b.n	801d5ee <_free_r+0x22>
 801d638:	d902      	bls.n	801d640 <_free_r+0x74>
 801d63a:	230c      	movs	r3, #12
 801d63c:	602b      	str	r3, [r5, #0]
 801d63e:	e7d6      	b.n	801d5ee <_free_r+0x22>
 801d640:	6820      	ldr	r0, [r4, #0]
 801d642:	1821      	adds	r1, r4, r0
 801d644:	428b      	cmp	r3, r1
 801d646:	bf04      	itt	eq
 801d648:	6819      	ldreq	r1, [r3, #0]
 801d64a:	685b      	ldreq	r3, [r3, #4]
 801d64c:	6063      	str	r3, [r4, #4]
 801d64e:	bf04      	itt	eq
 801d650:	1809      	addeq	r1, r1, r0
 801d652:	6021      	streq	r1, [r4, #0]
 801d654:	6054      	str	r4, [r2, #4]
 801d656:	e7ca      	b.n	801d5ee <_free_r+0x22>
 801d658:	bd38      	pop	{r3, r4, r5, pc}
 801d65a:	bf00      	nop
 801d65c:	20019c44 	.word	0x20019c44

0801d660 <__ssputs_r>:
 801d660:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d664:	688e      	ldr	r6, [r1, #8]
 801d666:	461f      	mov	r7, r3
 801d668:	42be      	cmp	r6, r7
 801d66a:	680b      	ldr	r3, [r1, #0]
 801d66c:	4682      	mov	sl, r0
 801d66e:	460c      	mov	r4, r1
 801d670:	4690      	mov	r8, r2
 801d672:	d82d      	bhi.n	801d6d0 <__ssputs_r+0x70>
 801d674:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801d678:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801d67c:	d026      	beq.n	801d6cc <__ssputs_r+0x6c>
 801d67e:	6965      	ldr	r5, [r4, #20]
 801d680:	6909      	ldr	r1, [r1, #16]
 801d682:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d686:	eba3 0901 	sub.w	r9, r3, r1
 801d68a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801d68e:	1c7b      	adds	r3, r7, #1
 801d690:	444b      	add	r3, r9
 801d692:	106d      	asrs	r5, r5, #1
 801d694:	429d      	cmp	r5, r3
 801d696:	bf38      	it	cc
 801d698:	461d      	movcc	r5, r3
 801d69a:	0553      	lsls	r3, r2, #21
 801d69c:	d527      	bpl.n	801d6ee <__ssputs_r+0x8e>
 801d69e:	4629      	mov	r1, r5
 801d6a0:	f7ff faf8 	bl	801cc94 <_malloc_r>
 801d6a4:	4606      	mov	r6, r0
 801d6a6:	b360      	cbz	r0, 801d702 <__ssputs_r+0xa2>
 801d6a8:	6921      	ldr	r1, [r4, #16]
 801d6aa:	464a      	mov	r2, r9
 801d6ac:	f7ff ff55 	bl	801d55a <memcpy>
 801d6b0:	89a3      	ldrh	r3, [r4, #12]
 801d6b2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801d6b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801d6ba:	81a3      	strh	r3, [r4, #12]
 801d6bc:	6126      	str	r6, [r4, #16]
 801d6be:	6165      	str	r5, [r4, #20]
 801d6c0:	444e      	add	r6, r9
 801d6c2:	eba5 0509 	sub.w	r5, r5, r9
 801d6c6:	6026      	str	r6, [r4, #0]
 801d6c8:	60a5      	str	r5, [r4, #8]
 801d6ca:	463e      	mov	r6, r7
 801d6cc:	42be      	cmp	r6, r7
 801d6ce:	d900      	bls.n	801d6d2 <__ssputs_r+0x72>
 801d6d0:	463e      	mov	r6, r7
 801d6d2:	6820      	ldr	r0, [r4, #0]
 801d6d4:	4632      	mov	r2, r6
 801d6d6:	4641      	mov	r1, r8
 801d6d8:	f7ff fe90 	bl	801d3fc <memmove>
 801d6dc:	68a3      	ldr	r3, [r4, #8]
 801d6de:	1b9b      	subs	r3, r3, r6
 801d6e0:	60a3      	str	r3, [r4, #8]
 801d6e2:	6823      	ldr	r3, [r4, #0]
 801d6e4:	4433      	add	r3, r6
 801d6e6:	6023      	str	r3, [r4, #0]
 801d6e8:	2000      	movs	r0, #0
 801d6ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d6ee:	462a      	mov	r2, r5
 801d6f0:	f7ff fce6 	bl	801d0c0 <_realloc_r>
 801d6f4:	4606      	mov	r6, r0
 801d6f6:	2800      	cmp	r0, #0
 801d6f8:	d1e0      	bne.n	801d6bc <__ssputs_r+0x5c>
 801d6fa:	6921      	ldr	r1, [r4, #16]
 801d6fc:	4650      	mov	r0, sl
 801d6fe:	f7ff ff65 	bl	801d5cc <_free_r>
 801d702:	230c      	movs	r3, #12
 801d704:	f8ca 3000 	str.w	r3, [sl]
 801d708:	89a3      	ldrh	r3, [r4, #12]
 801d70a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d70e:	81a3      	strh	r3, [r4, #12]
 801d710:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801d714:	e7e9      	b.n	801d6ea <__ssputs_r+0x8a>
	...

0801d718 <_svfiprintf_r>:
 801d718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d71c:	4698      	mov	r8, r3
 801d71e:	898b      	ldrh	r3, [r1, #12]
 801d720:	061b      	lsls	r3, r3, #24
 801d722:	b09d      	sub	sp, #116	@ 0x74
 801d724:	4607      	mov	r7, r0
 801d726:	460d      	mov	r5, r1
 801d728:	4614      	mov	r4, r2
 801d72a:	d510      	bpl.n	801d74e <_svfiprintf_r+0x36>
 801d72c:	690b      	ldr	r3, [r1, #16]
 801d72e:	b973      	cbnz	r3, 801d74e <_svfiprintf_r+0x36>
 801d730:	2140      	movs	r1, #64	@ 0x40
 801d732:	f7ff faaf 	bl	801cc94 <_malloc_r>
 801d736:	6028      	str	r0, [r5, #0]
 801d738:	6128      	str	r0, [r5, #16]
 801d73a:	b930      	cbnz	r0, 801d74a <_svfiprintf_r+0x32>
 801d73c:	230c      	movs	r3, #12
 801d73e:	603b      	str	r3, [r7, #0]
 801d740:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801d744:	b01d      	add	sp, #116	@ 0x74
 801d746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d74a:	2340      	movs	r3, #64	@ 0x40
 801d74c:	616b      	str	r3, [r5, #20]
 801d74e:	2300      	movs	r3, #0
 801d750:	9309      	str	r3, [sp, #36]	@ 0x24
 801d752:	2320      	movs	r3, #32
 801d754:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801d758:	f8cd 800c 	str.w	r8, [sp, #12]
 801d75c:	2330      	movs	r3, #48	@ 0x30
 801d75e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801d8fc <_svfiprintf_r+0x1e4>
 801d762:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801d766:	f04f 0901 	mov.w	r9, #1
 801d76a:	4623      	mov	r3, r4
 801d76c:	469a      	mov	sl, r3
 801d76e:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d772:	b10a      	cbz	r2, 801d778 <_svfiprintf_r+0x60>
 801d774:	2a25      	cmp	r2, #37	@ 0x25
 801d776:	d1f9      	bne.n	801d76c <_svfiprintf_r+0x54>
 801d778:	ebba 0b04 	subs.w	fp, sl, r4
 801d77c:	d00b      	beq.n	801d796 <_svfiprintf_r+0x7e>
 801d77e:	465b      	mov	r3, fp
 801d780:	4622      	mov	r2, r4
 801d782:	4629      	mov	r1, r5
 801d784:	4638      	mov	r0, r7
 801d786:	f7ff ff6b 	bl	801d660 <__ssputs_r>
 801d78a:	3001      	adds	r0, #1
 801d78c:	f000 80a7 	beq.w	801d8de <_svfiprintf_r+0x1c6>
 801d790:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d792:	445a      	add	r2, fp
 801d794:	9209      	str	r2, [sp, #36]	@ 0x24
 801d796:	f89a 3000 	ldrb.w	r3, [sl]
 801d79a:	2b00      	cmp	r3, #0
 801d79c:	f000 809f 	beq.w	801d8de <_svfiprintf_r+0x1c6>
 801d7a0:	2300      	movs	r3, #0
 801d7a2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801d7a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d7aa:	f10a 0a01 	add.w	sl, sl, #1
 801d7ae:	9304      	str	r3, [sp, #16]
 801d7b0:	9307      	str	r3, [sp, #28]
 801d7b2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801d7b6:	931a      	str	r3, [sp, #104]	@ 0x68
 801d7b8:	4654      	mov	r4, sl
 801d7ba:	2205      	movs	r2, #5
 801d7bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d7c0:	484e      	ldr	r0, [pc, #312]	@ (801d8fc <_svfiprintf_r+0x1e4>)
 801d7c2:	f7e2 fd2d 	bl	8000220 <memchr>
 801d7c6:	9a04      	ldr	r2, [sp, #16]
 801d7c8:	b9d8      	cbnz	r0, 801d802 <_svfiprintf_r+0xea>
 801d7ca:	06d0      	lsls	r0, r2, #27
 801d7cc:	bf44      	itt	mi
 801d7ce:	2320      	movmi	r3, #32
 801d7d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801d7d4:	0711      	lsls	r1, r2, #28
 801d7d6:	bf44      	itt	mi
 801d7d8:	232b      	movmi	r3, #43	@ 0x2b
 801d7da:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801d7de:	f89a 3000 	ldrb.w	r3, [sl]
 801d7e2:	2b2a      	cmp	r3, #42	@ 0x2a
 801d7e4:	d015      	beq.n	801d812 <_svfiprintf_r+0xfa>
 801d7e6:	9a07      	ldr	r2, [sp, #28]
 801d7e8:	4654      	mov	r4, sl
 801d7ea:	2000      	movs	r0, #0
 801d7ec:	f04f 0c0a 	mov.w	ip, #10
 801d7f0:	4621      	mov	r1, r4
 801d7f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d7f6:	3b30      	subs	r3, #48	@ 0x30
 801d7f8:	2b09      	cmp	r3, #9
 801d7fa:	d94b      	bls.n	801d894 <_svfiprintf_r+0x17c>
 801d7fc:	b1b0      	cbz	r0, 801d82c <_svfiprintf_r+0x114>
 801d7fe:	9207      	str	r2, [sp, #28]
 801d800:	e014      	b.n	801d82c <_svfiprintf_r+0x114>
 801d802:	eba0 0308 	sub.w	r3, r0, r8
 801d806:	fa09 f303 	lsl.w	r3, r9, r3
 801d80a:	4313      	orrs	r3, r2
 801d80c:	9304      	str	r3, [sp, #16]
 801d80e:	46a2      	mov	sl, r4
 801d810:	e7d2      	b.n	801d7b8 <_svfiprintf_r+0xa0>
 801d812:	9b03      	ldr	r3, [sp, #12]
 801d814:	1d19      	adds	r1, r3, #4
 801d816:	681b      	ldr	r3, [r3, #0]
 801d818:	9103      	str	r1, [sp, #12]
 801d81a:	2b00      	cmp	r3, #0
 801d81c:	bfbb      	ittet	lt
 801d81e:	425b      	neglt	r3, r3
 801d820:	f042 0202 	orrlt.w	r2, r2, #2
 801d824:	9307      	strge	r3, [sp, #28]
 801d826:	9307      	strlt	r3, [sp, #28]
 801d828:	bfb8      	it	lt
 801d82a:	9204      	strlt	r2, [sp, #16]
 801d82c:	7823      	ldrb	r3, [r4, #0]
 801d82e:	2b2e      	cmp	r3, #46	@ 0x2e
 801d830:	d10a      	bne.n	801d848 <_svfiprintf_r+0x130>
 801d832:	7863      	ldrb	r3, [r4, #1]
 801d834:	2b2a      	cmp	r3, #42	@ 0x2a
 801d836:	d132      	bne.n	801d89e <_svfiprintf_r+0x186>
 801d838:	9b03      	ldr	r3, [sp, #12]
 801d83a:	1d1a      	adds	r2, r3, #4
 801d83c:	681b      	ldr	r3, [r3, #0]
 801d83e:	9203      	str	r2, [sp, #12]
 801d840:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801d844:	3402      	adds	r4, #2
 801d846:	9305      	str	r3, [sp, #20]
 801d848:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801d90c <_svfiprintf_r+0x1f4>
 801d84c:	7821      	ldrb	r1, [r4, #0]
 801d84e:	2203      	movs	r2, #3
 801d850:	4650      	mov	r0, sl
 801d852:	f7e2 fce5 	bl	8000220 <memchr>
 801d856:	b138      	cbz	r0, 801d868 <_svfiprintf_r+0x150>
 801d858:	9b04      	ldr	r3, [sp, #16]
 801d85a:	eba0 000a 	sub.w	r0, r0, sl
 801d85e:	2240      	movs	r2, #64	@ 0x40
 801d860:	4082      	lsls	r2, r0
 801d862:	4313      	orrs	r3, r2
 801d864:	3401      	adds	r4, #1
 801d866:	9304      	str	r3, [sp, #16]
 801d868:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d86c:	4824      	ldr	r0, [pc, #144]	@ (801d900 <_svfiprintf_r+0x1e8>)
 801d86e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801d872:	2206      	movs	r2, #6
 801d874:	f7e2 fcd4 	bl	8000220 <memchr>
 801d878:	2800      	cmp	r0, #0
 801d87a:	d036      	beq.n	801d8ea <_svfiprintf_r+0x1d2>
 801d87c:	4b21      	ldr	r3, [pc, #132]	@ (801d904 <_svfiprintf_r+0x1ec>)
 801d87e:	bb1b      	cbnz	r3, 801d8c8 <_svfiprintf_r+0x1b0>
 801d880:	9b03      	ldr	r3, [sp, #12]
 801d882:	3307      	adds	r3, #7
 801d884:	f023 0307 	bic.w	r3, r3, #7
 801d888:	3308      	adds	r3, #8
 801d88a:	9303      	str	r3, [sp, #12]
 801d88c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d88e:	4433      	add	r3, r6
 801d890:	9309      	str	r3, [sp, #36]	@ 0x24
 801d892:	e76a      	b.n	801d76a <_svfiprintf_r+0x52>
 801d894:	fb0c 3202 	mla	r2, ip, r2, r3
 801d898:	460c      	mov	r4, r1
 801d89a:	2001      	movs	r0, #1
 801d89c:	e7a8      	b.n	801d7f0 <_svfiprintf_r+0xd8>
 801d89e:	2300      	movs	r3, #0
 801d8a0:	3401      	adds	r4, #1
 801d8a2:	9305      	str	r3, [sp, #20]
 801d8a4:	4619      	mov	r1, r3
 801d8a6:	f04f 0c0a 	mov.w	ip, #10
 801d8aa:	4620      	mov	r0, r4
 801d8ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d8b0:	3a30      	subs	r2, #48	@ 0x30
 801d8b2:	2a09      	cmp	r2, #9
 801d8b4:	d903      	bls.n	801d8be <_svfiprintf_r+0x1a6>
 801d8b6:	2b00      	cmp	r3, #0
 801d8b8:	d0c6      	beq.n	801d848 <_svfiprintf_r+0x130>
 801d8ba:	9105      	str	r1, [sp, #20]
 801d8bc:	e7c4      	b.n	801d848 <_svfiprintf_r+0x130>
 801d8be:	fb0c 2101 	mla	r1, ip, r1, r2
 801d8c2:	4604      	mov	r4, r0
 801d8c4:	2301      	movs	r3, #1
 801d8c6:	e7f0      	b.n	801d8aa <_svfiprintf_r+0x192>
 801d8c8:	ab03      	add	r3, sp, #12
 801d8ca:	9300      	str	r3, [sp, #0]
 801d8cc:	462a      	mov	r2, r5
 801d8ce:	4b0e      	ldr	r3, [pc, #56]	@ (801d908 <_svfiprintf_r+0x1f0>)
 801d8d0:	a904      	add	r1, sp, #16
 801d8d2:	4638      	mov	r0, r7
 801d8d4:	f3af 8000 	nop.w
 801d8d8:	1c42      	adds	r2, r0, #1
 801d8da:	4606      	mov	r6, r0
 801d8dc:	d1d6      	bne.n	801d88c <_svfiprintf_r+0x174>
 801d8de:	89ab      	ldrh	r3, [r5, #12]
 801d8e0:	065b      	lsls	r3, r3, #25
 801d8e2:	f53f af2d 	bmi.w	801d740 <_svfiprintf_r+0x28>
 801d8e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801d8e8:	e72c      	b.n	801d744 <_svfiprintf_r+0x2c>
 801d8ea:	ab03      	add	r3, sp, #12
 801d8ec:	9300      	str	r3, [sp, #0]
 801d8ee:	462a      	mov	r2, r5
 801d8f0:	4b05      	ldr	r3, [pc, #20]	@ (801d908 <_svfiprintf_r+0x1f0>)
 801d8f2:	a904      	add	r1, sp, #16
 801d8f4:	4638      	mov	r0, r7
 801d8f6:	f000 f9bb 	bl	801dc70 <_printf_i>
 801d8fa:	e7ed      	b.n	801d8d8 <_svfiprintf_r+0x1c0>
 801d8fc:	080208e3 	.word	0x080208e3
 801d900:	080208ed 	.word	0x080208ed
 801d904:	00000000 	.word	0x00000000
 801d908:	0801d661 	.word	0x0801d661
 801d90c:	080208e9 	.word	0x080208e9

0801d910 <__sfputc_r>:
 801d910:	6893      	ldr	r3, [r2, #8]
 801d912:	3b01      	subs	r3, #1
 801d914:	2b00      	cmp	r3, #0
 801d916:	b410      	push	{r4}
 801d918:	6093      	str	r3, [r2, #8]
 801d91a:	da08      	bge.n	801d92e <__sfputc_r+0x1e>
 801d91c:	6994      	ldr	r4, [r2, #24]
 801d91e:	42a3      	cmp	r3, r4
 801d920:	db01      	blt.n	801d926 <__sfputc_r+0x16>
 801d922:	290a      	cmp	r1, #10
 801d924:	d103      	bne.n	801d92e <__sfputc_r+0x1e>
 801d926:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d92a:	f000 bbc9 	b.w	801e0c0 <__swbuf_r>
 801d92e:	6813      	ldr	r3, [r2, #0]
 801d930:	1c58      	adds	r0, r3, #1
 801d932:	6010      	str	r0, [r2, #0]
 801d934:	7019      	strb	r1, [r3, #0]
 801d936:	4608      	mov	r0, r1
 801d938:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d93c:	4770      	bx	lr

0801d93e <__sfputs_r>:
 801d93e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d940:	4606      	mov	r6, r0
 801d942:	460f      	mov	r7, r1
 801d944:	4614      	mov	r4, r2
 801d946:	18d5      	adds	r5, r2, r3
 801d948:	42ac      	cmp	r4, r5
 801d94a:	d101      	bne.n	801d950 <__sfputs_r+0x12>
 801d94c:	2000      	movs	r0, #0
 801d94e:	e007      	b.n	801d960 <__sfputs_r+0x22>
 801d950:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d954:	463a      	mov	r2, r7
 801d956:	4630      	mov	r0, r6
 801d958:	f7ff ffda 	bl	801d910 <__sfputc_r>
 801d95c:	1c43      	adds	r3, r0, #1
 801d95e:	d1f3      	bne.n	801d948 <__sfputs_r+0xa>
 801d960:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801d964 <_vfiprintf_r>:
 801d964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d968:	460d      	mov	r5, r1
 801d96a:	b09d      	sub	sp, #116	@ 0x74
 801d96c:	4614      	mov	r4, r2
 801d96e:	4698      	mov	r8, r3
 801d970:	4606      	mov	r6, r0
 801d972:	b118      	cbz	r0, 801d97c <_vfiprintf_r+0x18>
 801d974:	6a03      	ldr	r3, [r0, #32]
 801d976:	b90b      	cbnz	r3, 801d97c <_vfiprintf_r+0x18>
 801d978:	f7ff fb4e 	bl	801d018 <__sinit>
 801d97c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801d97e:	07d9      	lsls	r1, r3, #31
 801d980:	d405      	bmi.n	801d98e <_vfiprintf_r+0x2a>
 801d982:	89ab      	ldrh	r3, [r5, #12]
 801d984:	059a      	lsls	r2, r3, #22
 801d986:	d402      	bmi.n	801d98e <_vfiprintf_r+0x2a>
 801d988:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801d98a:	f7ff fddc 	bl	801d546 <__retarget_lock_acquire_recursive>
 801d98e:	89ab      	ldrh	r3, [r5, #12]
 801d990:	071b      	lsls	r3, r3, #28
 801d992:	d501      	bpl.n	801d998 <_vfiprintf_r+0x34>
 801d994:	692b      	ldr	r3, [r5, #16]
 801d996:	b99b      	cbnz	r3, 801d9c0 <_vfiprintf_r+0x5c>
 801d998:	4629      	mov	r1, r5
 801d99a:	4630      	mov	r0, r6
 801d99c:	f000 fbce 	bl	801e13c <__swsetup_r>
 801d9a0:	b170      	cbz	r0, 801d9c0 <_vfiprintf_r+0x5c>
 801d9a2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801d9a4:	07dc      	lsls	r4, r3, #31
 801d9a6:	d504      	bpl.n	801d9b2 <_vfiprintf_r+0x4e>
 801d9a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801d9ac:	b01d      	add	sp, #116	@ 0x74
 801d9ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d9b2:	89ab      	ldrh	r3, [r5, #12]
 801d9b4:	0598      	lsls	r0, r3, #22
 801d9b6:	d4f7      	bmi.n	801d9a8 <_vfiprintf_r+0x44>
 801d9b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801d9ba:	f7ff fdc5 	bl	801d548 <__retarget_lock_release_recursive>
 801d9be:	e7f3      	b.n	801d9a8 <_vfiprintf_r+0x44>
 801d9c0:	2300      	movs	r3, #0
 801d9c2:	9309      	str	r3, [sp, #36]	@ 0x24
 801d9c4:	2320      	movs	r3, #32
 801d9c6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801d9ca:	f8cd 800c 	str.w	r8, [sp, #12]
 801d9ce:	2330      	movs	r3, #48	@ 0x30
 801d9d0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801db80 <_vfiprintf_r+0x21c>
 801d9d4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801d9d8:	f04f 0901 	mov.w	r9, #1
 801d9dc:	4623      	mov	r3, r4
 801d9de:	469a      	mov	sl, r3
 801d9e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d9e4:	b10a      	cbz	r2, 801d9ea <_vfiprintf_r+0x86>
 801d9e6:	2a25      	cmp	r2, #37	@ 0x25
 801d9e8:	d1f9      	bne.n	801d9de <_vfiprintf_r+0x7a>
 801d9ea:	ebba 0b04 	subs.w	fp, sl, r4
 801d9ee:	d00b      	beq.n	801da08 <_vfiprintf_r+0xa4>
 801d9f0:	465b      	mov	r3, fp
 801d9f2:	4622      	mov	r2, r4
 801d9f4:	4629      	mov	r1, r5
 801d9f6:	4630      	mov	r0, r6
 801d9f8:	f7ff ffa1 	bl	801d93e <__sfputs_r>
 801d9fc:	3001      	adds	r0, #1
 801d9fe:	f000 80a7 	beq.w	801db50 <_vfiprintf_r+0x1ec>
 801da02:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801da04:	445a      	add	r2, fp
 801da06:	9209      	str	r2, [sp, #36]	@ 0x24
 801da08:	f89a 3000 	ldrb.w	r3, [sl]
 801da0c:	2b00      	cmp	r3, #0
 801da0e:	f000 809f 	beq.w	801db50 <_vfiprintf_r+0x1ec>
 801da12:	2300      	movs	r3, #0
 801da14:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801da18:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801da1c:	f10a 0a01 	add.w	sl, sl, #1
 801da20:	9304      	str	r3, [sp, #16]
 801da22:	9307      	str	r3, [sp, #28]
 801da24:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801da28:	931a      	str	r3, [sp, #104]	@ 0x68
 801da2a:	4654      	mov	r4, sl
 801da2c:	2205      	movs	r2, #5
 801da2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801da32:	4853      	ldr	r0, [pc, #332]	@ (801db80 <_vfiprintf_r+0x21c>)
 801da34:	f7e2 fbf4 	bl	8000220 <memchr>
 801da38:	9a04      	ldr	r2, [sp, #16]
 801da3a:	b9d8      	cbnz	r0, 801da74 <_vfiprintf_r+0x110>
 801da3c:	06d1      	lsls	r1, r2, #27
 801da3e:	bf44      	itt	mi
 801da40:	2320      	movmi	r3, #32
 801da42:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801da46:	0713      	lsls	r3, r2, #28
 801da48:	bf44      	itt	mi
 801da4a:	232b      	movmi	r3, #43	@ 0x2b
 801da4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801da50:	f89a 3000 	ldrb.w	r3, [sl]
 801da54:	2b2a      	cmp	r3, #42	@ 0x2a
 801da56:	d015      	beq.n	801da84 <_vfiprintf_r+0x120>
 801da58:	9a07      	ldr	r2, [sp, #28]
 801da5a:	4654      	mov	r4, sl
 801da5c:	2000      	movs	r0, #0
 801da5e:	f04f 0c0a 	mov.w	ip, #10
 801da62:	4621      	mov	r1, r4
 801da64:	f811 3b01 	ldrb.w	r3, [r1], #1
 801da68:	3b30      	subs	r3, #48	@ 0x30
 801da6a:	2b09      	cmp	r3, #9
 801da6c:	d94b      	bls.n	801db06 <_vfiprintf_r+0x1a2>
 801da6e:	b1b0      	cbz	r0, 801da9e <_vfiprintf_r+0x13a>
 801da70:	9207      	str	r2, [sp, #28]
 801da72:	e014      	b.n	801da9e <_vfiprintf_r+0x13a>
 801da74:	eba0 0308 	sub.w	r3, r0, r8
 801da78:	fa09 f303 	lsl.w	r3, r9, r3
 801da7c:	4313      	orrs	r3, r2
 801da7e:	9304      	str	r3, [sp, #16]
 801da80:	46a2      	mov	sl, r4
 801da82:	e7d2      	b.n	801da2a <_vfiprintf_r+0xc6>
 801da84:	9b03      	ldr	r3, [sp, #12]
 801da86:	1d19      	adds	r1, r3, #4
 801da88:	681b      	ldr	r3, [r3, #0]
 801da8a:	9103      	str	r1, [sp, #12]
 801da8c:	2b00      	cmp	r3, #0
 801da8e:	bfbb      	ittet	lt
 801da90:	425b      	neglt	r3, r3
 801da92:	f042 0202 	orrlt.w	r2, r2, #2
 801da96:	9307      	strge	r3, [sp, #28]
 801da98:	9307      	strlt	r3, [sp, #28]
 801da9a:	bfb8      	it	lt
 801da9c:	9204      	strlt	r2, [sp, #16]
 801da9e:	7823      	ldrb	r3, [r4, #0]
 801daa0:	2b2e      	cmp	r3, #46	@ 0x2e
 801daa2:	d10a      	bne.n	801daba <_vfiprintf_r+0x156>
 801daa4:	7863      	ldrb	r3, [r4, #1]
 801daa6:	2b2a      	cmp	r3, #42	@ 0x2a
 801daa8:	d132      	bne.n	801db10 <_vfiprintf_r+0x1ac>
 801daaa:	9b03      	ldr	r3, [sp, #12]
 801daac:	1d1a      	adds	r2, r3, #4
 801daae:	681b      	ldr	r3, [r3, #0]
 801dab0:	9203      	str	r2, [sp, #12]
 801dab2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801dab6:	3402      	adds	r4, #2
 801dab8:	9305      	str	r3, [sp, #20]
 801daba:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801db90 <_vfiprintf_r+0x22c>
 801dabe:	7821      	ldrb	r1, [r4, #0]
 801dac0:	2203      	movs	r2, #3
 801dac2:	4650      	mov	r0, sl
 801dac4:	f7e2 fbac 	bl	8000220 <memchr>
 801dac8:	b138      	cbz	r0, 801dada <_vfiprintf_r+0x176>
 801daca:	9b04      	ldr	r3, [sp, #16]
 801dacc:	eba0 000a 	sub.w	r0, r0, sl
 801dad0:	2240      	movs	r2, #64	@ 0x40
 801dad2:	4082      	lsls	r2, r0
 801dad4:	4313      	orrs	r3, r2
 801dad6:	3401      	adds	r4, #1
 801dad8:	9304      	str	r3, [sp, #16]
 801dada:	f814 1b01 	ldrb.w	r1, [r4], #1
 801dade:	4829      	ldr	r0, [pc, #164]	@ (801db84 <_vfiprintf_r+0x220>)
 801dae0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801dae4:	2206      	movs	r2, #6
 801dae6:	f7e2 fb9b 	bl	8000220 <memchr>
 801daea:	2800      	cmp	r0, #0
 801daec:	d03f      	beq.n	801db6e <_vfiprintf_r+0x20a>
 801daee:	4b26      	ldr	r3, [pc, #152]	@ (801db88 <_vfiprintf_r+0x224>)
 801daf0:	bb1b      	cbnz	r3, 801db3a <_vfiprintf_r+0x1d6>
 801daf2:	9b03      	ldr	r3, [sp, #12]
 801daf4:	3307      	adds	r3, #7
 801daf6:	f023 0307 	bic.w	r3, r3, #7
 801dafa:	3308      	adds	r3, #8
 801dafc:	9303      	str	r3, [sp, #12]
 801dafe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801db00:	443b      	add	r3, r7
 801db02:	9309      	str	r3, [sp, #36]	@ 0x24
 801db04:	e76a      	b.n	801d9dc <_vfiprintf_r+0x78>
 801db06:	fb0c 3202 	mla	r2, ip, r2, r3
 801db0a:	460c      	mov	r4, r1
 801db0c:	2001      	movs	r0, #1
 801db0e:	e7a8      	b.n	801da62 <_vfiprintf_r+0xfe>
 801db10:	2300      	movs	r3, #0
 801db12:	3401      	adds	r4, #1
 801db14:	9305      	str	r3, [sp, #20]
 801db16:	4619      	mov	r1, r3
 801db18:	f04f 0c0a 	mov.w	ip, #10
 801db1c:	4620      	mov	r0, r4
 801db1e:	f810 2b01 	ldrb.w	r2, [r0], #1
 801db22:	3a30      	subs	r2, #48	@ 0x30
 801db24:	2a09      	cmp	r2, #9
 801db26:	d903      	bls.n	801db30 <_vfiprintf_r+0x1cc>
 801db28:	2b00      	cmp	r3, #0
 801db2a:	d0c6      	beq.n	801daba <_vfiprintf_r+0x156>
 801db2c:	9105      	str	r1, [sp, #20]
 801db2e:	e7c4      	b.n	801daba <_vfiprintf_r+0x156>
 801db30:	fb0c 2101 	mla	r1, ip, r1, r2
 801db34:	4604      	mov	r4, r0
 801db36:	2301      	movs	r3, #1
 801db38:	e7f0      	b.n	801db1c <_vfiprintf_r+0x1b8>
 801db3a:	ab03      	add	r3, sp, #12
 801db3c:	9300      	str	r3, [sp, #0]
 801db3e:	462a      	mov	r2, r5
 801db40:	4b12      	ldr	r3, [pc, #72]	@ (801db8c <_vfiprintf_r+0x228>)
 801db42:	a904      	add	r1, sp, #16
 801db44:	4630      	mov	r0, r6
 801db46:	f3af 8000 	nop.w
 801db4a:	4607      	mov	r7, r0
 801db4c:	1c78      	adds	r0, r7, #1
 801db4e:	d1d6      	bne.n	801dafe <_vfiprintf_r+0x19a>
 801db50:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801db52:	07d9      	lsls	r1, r3, #31
 801db54:	d405      	bmi.n	801db62 <_vfiprintf_r+0x1fe>
 801db56:	89ab      	ldrh	r3, [r5, #12]
 801db58:	059a      	lsls	r2, r3, #22
 801db5a:	d402      	bmi.n	801db62 <_vfiprintf_r+0x1fe>
 801db5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801db5e:	f7ff fcf3 	bl	801d548 <__retarget_lock_release_recursive>
 801db62:	89ab      	ldrh	r3, [r5, #12]
 801db64:	065b      	lsls	r3, r3, #25
 801db66:	f53f af1f 	bmi.w	801d9a8 <_vfiprintf_r+0x44>
 801db6a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801db6c:	e71e      	b.n	801d9ac <_vfiprintf_r+0x48>
 801db6e:	ab03      	add	r3, sp, #12
 801db70:	9300      	str	r3, [sp, #0]
 801db72:	462a      	mov	r2, r5
 801db74:	4b05      	ldr	r3, [pc, #20]	@ (801db8c <_vfiprintf_r+0x228>)
 801db76:	a904      	add	r1, sp, #16
 801db78:	4630      	mov	r0, r6
 801db7a:	f000 f879 	bl	801dc70 <_printf_i>
 801db7e:	e7e4      	b.n	801db4a <_vfiprintf_r+0x1e6>
 801db80:	080208e3 	.word	0x080208e3
 801db84:	080208ed 	.word	0x080208ed
 801db88:	00000000 	.word	0x00000000
 801db8c:	0801d93f 	.word	0x0801d93f
 801db90:	080208e9 	.word	0x080208e9

0801db94 <_printf_common>:
 801db94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801db98:	4616      	mov	r6, r2
 801db9a:	4698      	mov	r8, r3
 801db9c:	688a      	ldr	r2, [r1, #8]
 801db9e:	690b      	ldr	r3, [r1, #16]
 801dba0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801dba4:	4293      	cmp	r3, r2
 801dba6:	bfb8      	it	lt
 801dba8:	4613      	movlt	r3, r2
 801dbaa:	6033      	str	r3, [r6, #0]
 801dbac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801dbb0:	4607      	mov	r7, r0
 801dbb2:	460c      	mov	r4, r1
 801dbb4:	b10a      	cbz	r2, 801dbba <_printf_common+0x26>
 801dbb6:	3301      	adds	r3, #1
 801dbb8:	6033      	str	r3, [r6, #0]
 801dbba:	6823      	ldr	r3, [r4, #0]
 801dbbc:	0699      	lsls	r1, r3, #26
 801dbbe:	bf42      	ittt	mi
 801dbc0:	6833      	ldrmi	r3, [r6, #0]
 801dbc2:	3302      	addmi	r3, #2
 801dbc4:	6033      	strmi	r3, [r6, #0]
 801dbc6:	6825      	ldr	r5, [r4, #0]
 801dbc8:	f015 0506 	ands.w	r5, r5, #6
 801dbcc:	d106      	bne.n	801dbdc <_printf_common+0x48>
 801dbce:	f104 0a19 	add.w	sl, r4, #25
 801dbd2:	68e3      	ldr	r3, [r4, #12]
 801dbd4:	6832      	ldr	r2, [r6, #0]
 801dbd6:	1a9b      	subs	r3, r3, r2
 801dbd8:	42ab      	cmp	r3, r5
 801dbda:	dc26      	bgt.n	801dc2a <_printf_common+0x96>
 801dbdc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801dbe0:	6822      	ldr	r2, [r4, #0]
 801dbe2:	3b00      	subs	r3, #0
 801dbe4:	bf18      	it	ne
 801dbe6:	2301      	movne	r3, #1
 801dbe8:	0692      	lsls	r2, r2, #26
 801dbea:	d42b      	bmi.n	801dc44 <_printf_common+0xb0>
 801dbec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801dbf0:	4641      	mov	r1, r8
 801dbf2:	4638      	mov	r0, r7
 801dbf4:	47c8      	blx	r9
 801dbf6:	3001      	adds	r0, #1
 801dbf8:	d01e      	beq.n	801dc38 <_printf_common+0xa4>
 801dbfa:	6823      	ldr	r3, [r4, #0]
 801dbfc:	6922      	ldr	r2, [r4, #16]
 801dbfe:	f003 0306 	and.w	r3, r3, #6
 801dc02:	2b04      	cmp	r3, #4
 801dc04:	bf02      	ittt	eq
 801dc06:	68e5      	ldreq	r5, [r4, #12]
 801dc08:	6833      	ldreq	r3, [r6, #0]
 801dc0a:	1aed      	subeq	r5, r5, r3
 801dc0c:	68a3      	ldr	r3, [r4, #8]
 801dc0e:	bf0c      	ite	eq
 801dc10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801dc14:	2500      	movne	r5, #0
 801dc16:	4293      	cmp	r3, r2
 801dc18:	bfc4      	itt	gt
 801dc1a:	1a9b      	subgt	r3, r3, r2
 801dc1c:	18ed      	addgt	r5, r5, r3
 801dc1e:	2600      	movs	r6, #0
 801dc20:	341a      	adds	r4, #26
 801dc22:	42b5      	cmp	r5, r6
 801dc24:	d11a      	bne.n	801dc5c <_printf_common+0xc8>
 801dc26:	2000      	movs	r0, #0
 801dc28:	e008      	b.n	801dc3c <_printf_common+0xa8>
 801dc2a:	2301      	movs	r3, #1
 801dc2c:	4652      	mov	r2, sl
 801dc2e:	4641      	mov	r1, r8
 801dc30:	4638      	mov	r0, r7
 801dc32:	47c8      	blx	r9
 801dc34:	3001      	adds	r0, #1
 801dc36:	d103      	bne.n	801dc40 <_printf_common+0xac>
 801dc38:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801dc3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801dc40:	3501      	adds	r5, #1
 801dc42:	e7c6      	b.n	801dbd2 <_printf_common+0x3e>
 801dc44:	18e1      	adds	r1, r4, r3
 801dc46:	1c5a      	adds	r2, r3, #1
 801dc48:	2030      	movs	r0, #48	@ 0x30
 801dc4a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801dc4e:	4422      	add	r2, r4
 801dc50:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801dc54:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801dc58:	3302      	adds	r3, #2
 801dc5a:	e7c7      	b.n	801dbec <_printf_common+0x58>
 801dc5c:	2301      	movs	r3, #1
 801dc5e:	4622      	mov	r2, r4
 801dc60:	4641      	mov	r1, r8
 801dc62:	4638      	mov	r0, r7
 801dc64:	47c8      	blx	r9
 801dc66:	3001      	adds	r0, #1
 801dc68:	d0e6      	beq.n	801dc38 <_printf_common+0xa4>
 801dc6a:	3601      	adds	r6, #1
 801dc6c:	e7d9      	b.n	801dc22 <_printf_common+0x8e>
	...

0801dc70 <_printf_i>:
 801dc70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801dc74:	7e0f      	ldrb	r7, [r1, #24]
 801dc76:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801dc78:	2f78      	cmp	r7, #120	@ 0x78
 801dc7a:	4691      	mov	r9, r2
 801dc7c:	4680      	mov	r8, r0
 801dc7e:	460c      	mov	r4, r1
 801dc80:	469a      	mov	sl, r3
 801dc82:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801dc86:	d807      	bhi.n	801dc98 <_printf_i+0x28>
 801dc88:	2f62      	cmp	r7, #98	@ 0x62
 801dc8a:	d80a      	bhi.n	801dca2 <_printf_i+0x32>
 801dc8c:	2f00      	cmp	r7, #0
 801dc8e:	f000 80d1 	beq.w	801de34 <_printf_i+0x1c4>
 801dc92:	2f58      	cmp	r7, #88	@ 0x58
 801dc94:	f000 80b8 	beq.w	801de08 <_printf_i+0x198>
 801dc98:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801dc9c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801dca0:	e03a      	b.n	801dd18 <_printf_i+0xa8>
 801dca2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801dca6:	2b15      	cmp	r3, #21
 801dca8:	d8f6      	bhi.n	801dc98 <_printf_i+0x28>
 801dcaa:	a101      	add	r1, pc, #4	@ (adr r1, 801dcb0 <_printf_i+0x40>)
 801dcac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801dcb0:	0801dd09 	.word	0x0801dd09
 801dcb4:	0801dd1d 	.word	0x0801dd1d
 801dcb8:	0801dc99 	.word	0x0801dc99
 801dcbc:	0801dc99 	.word	0x0801dc99
 801dcc0:	0801dc99 	.word	0x0801dc99
 801dcc4:	0801dc99 	.word	0x0801dc99
 801dcc8:	0801dd1d 	.word	0x0801dd1d
 801dccc:	0801dc99 	.word	0x0801dc99
 801dcd0:	0801dc99 	.word	0x0801dc99
 801dcd4:	0801dc99 	.word	0x0801dc99
 801dcd8:	0801dc99 	.word	0x0801dc99
 801dcdc:	0801de1b 	.word	0x0801de1b
 801dce0:	0801dd47 	.word	0x0801dd47
 801dce4:	0801ddd5 	.word	0x0801ddd5
 801dce8:	0801dc99 	.word	0x0801dc99
 801dcec:	0801dc99 	.word	0x0801dc99
 801dcf0:	0801de3d 	.word	0x0801de3d
 801dcf4:	0801dc99 	.word	0x0801dc99
 801dcf8:	0801dd47 	.word	0x0801dd47
 801dcfc:	0801dc99 	.word	0x0801dc99
 801dd00:	0801dc99 	.word	0x0801dc99
 801dd04:	0801dddd 	.word	0x0801dddd
 801dd08:	6833      	ldr	r3, [r6, #0]
 801dd0a:	1d1a      	adds	r2, r3, #4
 801dd0c:	681b      	ldr	r3, [r3, #0]
 801dd0e:	6032      	str	r2, [r6, #0]
 801dd10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801dd14:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801dd18:	2301      	movs	r3, #1
 801dd1a:	e09c      	b.n	801de56 <_printf_i+0x1e6>
 801dd1c:	6833      	ldr	r3, [r6, #0]
 801dd1e:	6820      	ldr	r0, [r4, #0]
 801dd20:	1d19      	adds	r1, r3, #4
 801dd22:	6031      	str	r1, [r6, #0]
 801dd24:	0606      	lsls	r6, r0, #24
 801dd26:	d501      	bpl.n	801dd2c <_printf_i+0xbc>
 801dd28:	681d      	ldr	r5, [r3, #0]
 801dd2a:	e003      	b.n	801dd34 <_printf_i+0xc4>
 801dd2c:	0645      	lsls	r5, r0, #25
 801dd2e:	d5fb      	bpl.n	801dd28 <_printf_i+0xb8>
 801dd30:	f9b3 5000 	ldrsh.w	r5, [r3]
 801dd34:	2d00      	cmp	r5, #0
 801dd36:	da03      	bge.n	801dd40 <_printf_i+0xd0>
 801dd38:	232d      	movs	r3, #45	@ 0x2d
 801dd3a:	426d      	negs	r5, r5
 801dd3c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801dd40:	4858      	ldr	r0, [pc, #352]	@ (801dea4 <_printf_i+0x234>)
 801dd42:	230a      	movs	r3, #10
 801dd44:	e011      	b.n	801dd6a <_printf_i+0xfa>
 801dd46:	6821      	ldr	r1, [r4, #0]
 801dd48:	6833      	ldr	r3, [r6, #0]
 801dd4a:	0608      	lsls	r0, r1, #24
 801dd4c:	f853 5b04 	ldr.w	r5, [r3], #4
 801dd50:	d402      	bmi.n	801dd58 <_printf_i+0xe8>
 801dd52:	0649      	lsls	r1, r1, #25
 801dd54:	bf48      	it	mi
 801dd56:	b2ad      	uxthmi	r5, r5
 801dd58:	2f6f      	cmp	r7, #111	@ 0x6f
 801dd5a:	4852      	ldr	r0, [pc, #328]	@ (801dea4 <_printf_i+0x234>)
 801dd5c:	6033      	str	r3, [r6, #0]
 801dd5e:	bf14      	ite	ne
 801dd60:	230a      	movne	r3, #10
 801dd62:	2308      	moveq	r3, #8
 801dd64:	2100      	movs	r1, #0
 801dd66:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801dd6a:	6866      	ldr	r6, [r4, #4]
 801dd6c:	60a6      	str	r6, [r4, #8]
 801dd6e:	2e00      	cmp	r6, #0
 801dd70:	db05      	blt.n	801dd7e <_printf_i+0x10e>
 801dd72:	6821      	ldr	r1, [r4, #0]
 801dd74:	432e      	orrs	r6, r5
 801dd76:	f021 0104 	bic.w	r1, r1, #4
 801dd7a:	6021      	str	r1, [r4, #0]
 801dd7c:	d04b      	beq.n	801de16 <_printf_i+0x1a6>
 801dd7e:	4616      	mov	r6, r2
 801dd80:	fbb5 f1f3 	udiv	r1, r5, r3
 801dd84:	fb03 5711 	mls	r7, r3, r1, r5
 801dd88:	5dc7      	ldrb	r7, [r0, r7]
 801dd8a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801dd8e:	462f      	mov	r7, r5
 801dd90:	42bb      	cmp	r3, r7
 801dd92:	460d      	mov	r5, r1
 801dd94:	d9f4      	bls.n	801dd80 <_printf_i+0x110>
 801dd96:	2b08      	cmp	r3, #8
 801dd98:	d10b      	bne.n	801ddb2 <_printf_i+0x142>
 801dd9a:	6823      	ldr	r3, [r4, #0]
 801dd9c:	07df      	lsls	r7, r3, #31
 801dd9e:	d508      	bpl.n	801ddb2 <_printf_i+0x142>
 801dda0:	6923      	ldr	r3, [r4, #16]
 801dda2:	6861      	ldr	r1, [r4, #4]
 801dda4:	4299      	cmp	r1, r3
 801dda6:	bfde      	ittt	le
 801dda8:	2330      	movle	r3, #48	@ 0x30
 801ddaa:	f806 3c01 	strble.w	r3, [r6, #-1]
 801ddae:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 801ddb2:	1b92      	subs	r2, r2, r6
 801ddb4:	6122      	str	r2, [r4, #16]
 801ddb6:	f8cd a000 	str.w	sl, [sp]
 801ddba:	464b      	mov	r3, r9
 801ddbc:	aa03      	add	r2, sp, #12
 801ddbe:	4621      	mov	r1, r4
 801ddc0:	4640      	mov	r0, r8
 801ddc2:	f7ff fee7 	bl	801db94 <_printf_common>
 801ddc6:	3001      	adds	r0, #1
 801ddc8:	d14a      	bne.n	801de60 <_printf_i+0x1f0>
 801ddca:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801ddce:	b004      	add	sp, #16
 801ddd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ddd4:	6823      	ldr	r3, [r4, #0]
 801ddd6:	f043 0320 	orr.w	r3, r3, #32
 801ddda:	6023      	str	r3, [r4, #0]
 801dddc:	4832      	ldr	r0, [pc, #200]	@ (801dea8 <_printf_i+0x238>)
 801ddde:	2778      	movs	r7, #120	@ 0x78
 801dde0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801dde4:	6823      	ldr	r3, [r4, #0]
 801dde6:	6831      	ldr	r1, [r6, #0]
 801dde8:	061f      	lsls	r7, r3, #24
 801ddea:	f851 5b04 	ldr.w	r5, [r1], #4
 801ddee:	d402      	bmi.n	801ddf6 <_printf_i+0x186>
 801ddf0:	065f      	lsls	r7, r3, #25
 801ddf2:	bf48      	it	mi
 801ddf4:	b2ad      	uxthmi	r5, r5
 801ddf6:	6031      	str	r1, [r6, #0]
 801ddf8:	07d9      	lsls	r1, r3, #31
 801ddfa:	bf44      	itt	mi
 801ddfc:	f043 0320 	orrmi.w	r3, r3, #32
 801de00:	6023      	strmi	r3, [r4, #0]
 801de02:	b11d      	cbz	r5, 801de0c <_printf_i+0x19c>
 801de04:	2310      	movs	r3, #16
 801de06:	e7ad      	b.n	801dd64 <_printf_i+0xf4>
 801de08:	4826      	ldr	r0, [pc, #152]	@ (801dea4 <_printf_i+0x234>)
 801de0a:	e7e9      	b.n	801dde0 <_printf_i+0x170>
 801de0c:	6823      	ldr	r3, [r4, #0]
 801de0e:	f023 0320 	bic.w	r3, r3, #32
 801de12:	6023      	str	r3, [r4, #0]
 801de14:	e7f6      	b.n	801de04 <_printf_i+0x194>
 801de16:	4616      	mov	r6, r2
 801de18:	e7bd      	b.n	801dd96 <_printf_i+0x126>
 801de1a:	6833      	ldr	r3, [r6, #0]
 801de1c:	6825      	ldr	r5, [r4, #0]
 801de1e:	6961      	ldr	r1, [r4, #20]
 801de20:	1d18      	adds	r0, r3, #4
 801de22:	6030      	str	r0, [r6, #0]
 801de24:	062e      	lsls	r6, r5, #24
 801de26:	681b      	ldr	r3, [r3, #0]
 801de28:	d501      	bpl.n	801de2e <_printf_i+0x1be>
 801de2a:	6019      	str	r1, [r3, #0]
 801de2c:	e002      	b.n	801de34 <_printf_i+0x1c4>
 801de2e:	0668      	lsls	r0, r5, #25
 801de30:	d5fb      	bpl.n	801de2a <_printf_i+0x1ba>
 801de32:	8019      	strh	r1, [r3, #0]
 801de34:	2300      	movs	r3, #0
 801de36:	6123      	str	r3, [r4, #16]
 801de38:	4616      	mov	r6, r2
 801de3a:	e7bc      	b.n	801ddb6 <_printf_i+0x146>
 801de3c:	6833      	ldr	r3, [r6, #0]
 801de3e:	1d1a      	adds	r2, r3, #4
 801de40:	6032      	str	r2, [r6, #0]
 801de42:	681e      	ldr	r6, [r3, #0]
 801de44:	6862      	ldr	r2, [r4, #4]
 801de46:	2100      	movs	r1, #0
 801de48:	4630      	mov	r0, r6
 801de4a:	f7e2 f9e9 	bl	8000220 <memchr>
 801de4e:	b108      	cbz	r0, 801de54 <_printf_i+0x1e4>
 801de50:	1b80      	subs	r0, r0, r6
 801de52:	6060      	str	r0, [r4, #4]
 801de54:	6863      	ldr	r3, [r4, #4]
 801de56:	6123      	str	r3, [r4, #16]
 801de58:	2300      	movs	r3, #0
 801de5a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801de5e:	e7aa      	b.n	801ddb6 <_printf_i+0x146>
 801de60:	6923      	ldr	r3, [r4, #16]
 801de62:	4632      	mov	r2, r6
 801de64:	4649      	mov	r1, r9
 801de66:	4640      	mov	r0, r8
 801de68:	47d0      	blx	sl
 801de6a:	3001      	adds	r0, #1
 801de6c:	d0ad      	beq.n	801ddca <_printf_i+0x15a>
 801de6e:	6823      	ldr	r3, [r4, #0]
 801de70:	079b      	lsls	r3, r3, #30
 801de72:	d413      	bmi.n	801de9c <_printf_i+0x22c>
 801de74:	68e0      	ldr	r0, [r4, #12]
 801de76:	9b03      	ldr	r3, [sp, #12]
 801de78:	4298      	cmp	r0, r3
 801de7a:	bfb8      	it	lt
 801de7c:	4618      	movlt	r0, r3
 801de7e:	e7a6      	b.n	801ddce <_printf_i+0x15e>
 801de80:	2301      	movs	r3, #1
 801de82:	4632      	mov	r2, r6
 801de84:	4649      	mov	r1, r9
 801de86:	4640      	mov	r0, r8
 801de88:	47d0      	blx	sl
 801de8a:	3001      	adds	r0, #1
 801de8c:	d09d      	beq.n	801ddca <_printf_i+0x15a>
 801de8e:	3501      	adds	r5, #1
 801de90:	68e3      	ldr	r3, [r4, #12]
 801de92:	9903      	ldr	r1, [sp, #12]
 801de94:	1a5b      	subs	r3, r3, r1
 801de96:	42ab      	cmp	r3, r5
 801de98:	dcf2      	bgt.n	801de80 <_printf_i+0x210>
 801de9a:	e7eb      	b.n	801de74 <_printf_i+0x204>
 801de9c:	2500      	movs	r5, #0
 801de9e:	f104 0619 	add.w	r6, r4, #25
 801dea2:	e7f5      	b.n	801de90 <_printf_i+0x220>
 801dea4:	080208f4 	.word	0x080208f4
 801dea8:	08020905 	.word	0x08020905

0801deac <__sflush_r>:
 801deac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801deb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801deb4:	0716      	lsls	r6, r2, #28
 801deb6:	4605      	mov	r5, r0
 801deb8:	460c      	mov	r4, r1
 801deba:	d454      	bmi.n	801df66 <__sflush_r+0xba>
 801debc:	684b      	ldr	r3, [r1, #4]
 801debe:	2b00      	cmp	r3, #0
 801dec0:	dc02      	bgt.n	801dec8 <__sflush_r+0x1c>
 801dec2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801dec4:	2b00      	cmp	r3, #0
 801dec6:	dd48      	ble.n	801df5a <__sflush_r+0xae>
 801dec8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801deca:	2e00      	cmp	r6, #0
 801decc:	d045      	beq.n	801df5a <__sflush_r+0xae>
 801dece:	2300      	movs	r3, #0
 801ded0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801ded4:	682f      	ldr	r7, [r5, #0]
 801ded6:	6a21      	ldr	r1, [r4, #32]
 801ded8:	602b      	str	r3, [r5, #0]
 801deda:	d030      	beq.n	801df3e <__sflush_r+0x92>
 801dedc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801dede:	89a3      	ldrh	r3, [r4, #12]
 801dee0:	0759      	lsls	r1, r3, #29
 801dee2:	d505      	bpl.n	801def0 <__sflush_r+0x44>
 801dee4:	6863      	ldr	r3, [r4, #4]
 801dee6:	1ad2      	subs	r2, r2, r3
 801dee8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801deea:	b10b      	cbz	r3, 801def0 <__sflush_r+0x44>
 801deec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801deee:	1ad2      	subs	r2, r2, r3
 801def0:	2300      	movs	r3, #0
 801def2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801def4:	6a21      	ldr	r1, [r4, #32]
 801def6:	4628      	mov	r0, r5
 801def8:	47b0      	blx	r6
 801defa:	1c43      	adds	r3, r0, #1
 801defc:	89a3      	ldrh	r3, [r4, #12]
 801defe:	d106      	bne.n	801df0e <__sflush_r+0x62>
 801df00:	6829      	ldr	r1, [r5, #0]
 801df02:	291d      	cmp	r1, #29
 801df04:	d82b      	bhi.n	801df5e <__sflush_r+0xb2>
 801df06:	4a2a      	ldr	r2, [pc, #168]	@ (801dfb0 <__sflush_r+0x104>)
 801df08:	40ca      	lsrs	r2, r1
 801df0a:	07d6      	lsls	r6, r2, #31
 801df0c:	d527      	bpl.n	801df5e <__sflush_r+0xb2>
 801df0e:	2200      	movs	r2, #0
 801df10:	6062      	str	r2, [r4, #4]
 801df12:	04d9      	lsls	r1, r3, #19
 801df14:	6922      	ldr	r2, [r4, #16]
 801df16:	6022      	str	r2, [r4, #0]
 801df18:	d504      	bpl.n	801df24 <__sflush_r+0x78>
 801df1a:	1c42      	adds	r2, r0, #1
 801df1c:	d101      	bne.n	801df22 <__sflush_r+0x76>
 801df1e:	682b      	ldr	r3, [r5, #0]
 801df20:	b903      	cbnz	r3, 801df24 <__sflush_r+0x78>
 801df22:	6560      	str	r0, [r4, #84]	@ 0x54
 801df24:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801df26:	602f      	str	r7, [r5, #0]
 801df28:	b1b9      	cbz	r1, 801df5a <__sflush_r+0xae>
 801df2a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801df2e:	4299      	cmp	r1, r3
 801df30:	d002      	beq.n	801df38 <__sflush_r+0x8c>
 801df32:	4628      	mov	r0, r5
 801df34:	f7ff fb4a 	bl	801d5cc <_free_r>
 801df38:	2300      	movs	r3, #0
 801df3a:	6363      	str	r3, [r4, #52]	@ 0x34
 801df3c:	e00d      	b.n	801df5a <__sflush_r+0xae>
 801df3e:	2301      	movs	r3, #1
 801df40:	4628      	mov	r0, r5
 801df42:	47b0      	blx	r6
 801df44:	4602      	mov	r2, r0
 801df46:	1c50      	adds	r0, r2, #1
 801df48:	d1c9      	bne.n	801dede <__sflush_r+0x32>
 801df4a:	682b      	ldr	r3, [r5, #0]
 801df4c:	2b00      	cmp	r3, #0
 801df4e:	d0c6      	beq.n	801dede <__sflush_r+0x32>
 801df50:	2b1d      	cmp	r3, #29
 801df52:	d001      	beq.n	801df58 <__sflush_r+0xac>
 801df54:	2b16      	cmp	r3, #22
 801df56:	d11e      	bne.n	801df96 <__sflush_r+0xea>
 801df58:	602f      	str	r7, [r5, #0]
 801df5a:	2000      	movs	r0, #0
 801df5c:	e022      	b.n	801dfa4 <__sflush_r+0xf8>
 801df5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801df62:	b21b      	sxth	r3, r3
 801df64:	e01b      	b.n	801df9e <__sflush_r+0xf2>
 801df66:	690f      	ldr	r7, [r1, #16]
 801df68:	2f00      	cmp	r7, #0
 801df6a:	d0f6      	beq.n	801df5a <__sflush_r+0xae>
 801df6c:	0793      	lsls	r3, r2, #30
 801df6e:	680e      	ldr	r6, [r1, #0]
 801df70:	bf08      	it	eq
 801df72:	694b      	ldreq	r3, [r1, #20]
 801df74:	600f      	str	r7, [r1, #0]
 801df76:	bf18      	it	ne
 801df78:	2300      	movne	r3, #0
 801df7a:	eba6 0807 	sub.w	r8, r6, r7
 801df7e:	608b      	str	r3, [r1, #8]
 801df80:	f1b8 0f00 	cmp.w	r8, #0
 801df84:	dde9      	ble.n	801df5a <__sflush_r+0xae>
 801df86:	6a21      	ldr	r1, [r4, #32]
 801df88:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801df8a:	4643      	mov	r3, r8
 801df8c:	463a      	mov	r2, r7
 801df8e:	4628      	mov	r0, r5
 801df90:	47b0      	blx	r6
 801df92:	2800      	cmp	r0, #0
 801df94:	dc08      	bgt.n	801dfa8 <__sflush_r+0xfc>
 801df96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801df9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801df9e:	81a3      	strh	r3, [r4, #12]
 801dfa0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801dfa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dfa8:	4407      	add	r7, r0
 801dfaa:	eba8 0800 	sub.w	r8, r8, r0
 801dfae:	e7e7      	b.n	801df80 <__sflush_r+0xd4>
 801dfb0:	20400001 	.word	0x20400001

0801dfb4 <_fflush_r>:
 801dfb4:	b538      	push	{r3, r4, r5, lr}
 801dfb6:	690b      	ldr	r3, [r1, #16]
 801dfb8:	4605      	mov	r5, r0
 801dfba:	460c      	mov	r4, r1
 801dfbc:	b913      	cbnz	r3, 801dfc4 <_fflush_r+0x10>
 801dfbe:	2500      	movs	r5, #0
 801dfc0:	4628      	mov	r0, r5
 801dfc2:	bd38      	pop	{r3, r4, r5, pc}
 801dfc4:	b118      	cbz	r0, 801dfce <_fflush_r+0x1a>
 801dfc6:	6a03      	ldr	r3, [r0, #32]
 801dfc8:	b90b      	cbnz	r3, 801dfce <_fflush_r+0x1a>
 801dfca:	f7ff f825 	bl	801d018 <__sinit>
 801dfce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801dfd2:	2b00      	cmp	r3, #0
 801dfd4:	d0f3      	beq.n	801dfbe <_fflush_r+0xa>
 801dfd6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801dfd8:	07d0      	lsls	r0, r2, #31
 801dfda:	d404      	bmi.n	801dfe6 <_fflush_r+0x32>
 801dfdc:	0599      	lsls	r1, r3, #22
 801dfde:	d402      	bmi.n	801dfe6 <_fflush_r+0x32>
 801dfe0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801dfe2:	f7ff fab0 	bl	801d546 <__retarget_lock_acquire_recursive>
 801dfe6:	4628      	mov	r0, r5
 801dfe8:	4621      	mov	r1, r4
 801dfea:	f7ff ff5f 	bl	801deac <__sflush_r>
 801dfee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801dff0:	07da      	lsls	r2, r3, #31
 801dff2:	4605      	mov	r5, r0
 801dff4:	d4e4      	bmi.n	801dfc0 <_fflush_r+0xc>
 801dff6:	89a3      	ldrh	r3, [r4, #12]
 801dff8:	059b      	lsls	r3, r3, #22
 801dffa:	d4e1      	bmi.n	801dfc0 <_fflush_r+0xc>
 801dffc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801dffe:	f7ff faa3 	bl	801d548 <__retarget_lock_release_recursive>
 801e002:	e7dd      	b.n	801dfc0 <_fflush_r+0xc>

0801e004 <_malloc_usable_size_r>:
 801e004:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e008:	1f18      	subs	r0, r3, #4
 801e00a:	2b00      	cmp	r3, #0
 801e00c:	bfbc      	itt	lt
 801e00e:	580b      	ldrlt	r3, [r1, r0]
 801e010:	18c0      	addlt	r0, r0, r3
 801e012:	4770      	bx	lr

0801e014 <__sread>:
 801e014:	b510      	push	{r4, lr}
 801e016:	460c      	mov	r4, r1
 801e018:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e01c:	f000 f968 	bl	801e2f0 <_read_r>
 801e020:	2800      	cmp	r0, #0
 801e022:	bfab      	itete	ge
 801e024:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801e026:	89a3      	ldrhlt	r3, [r4, #12]
 801e028:	181b      	addge	r3, r3, r0
 801e02a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801e02e:	bfac      	ite	ge
 801e030:	6563      	strge	r3, [r4, #84]	@ 0x54
 801e032:	81a3      	strhlt	r3, [r4, #12]
 801e034:	bd10      	pop	{r4, pc}

0801e036 <__swrite>:
 801e036:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e03a:	461f      	mov	r7, r3
 801e03c:	898b      	ldrh	r3, [r1, #12]
 801e03e:	05db      	lsls	r3, r3, #23
 801e040:	4605      	mov	r5, r0
 801e042:	460c      	mov	r4, r1
 801e044:	4616      	mov	r6, r2
 801e046:	d505      	bpl.n	801e054 <__swrite+0x1e>
 801e048:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e04c:	2302      	movs	r3, #2
 801e04e:	2200      	movs	r2, #0
 801e050:	f000 f93c 	bl	801e2cc <_lseek_r>
 801e054:	89a3      	ldrh	r3, [r4, #12]
 801e056:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e05a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801e05e:	81a3      	strh	r3, [r4, #12]
 801e060:	4632      	mov	r2, r6
 801e062:	463b      	mov	r3, r7
 801e064:	4628      	mov	r0, r5
 801e066:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e06a:	f000 b953 	b.w	801e314 <_write_r>

0801e06e <__sseek>:
 801e06e:	b510      	push	{r4, lr}
 801e070:	460c      	mov	r4, r1
 801e072:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e076:	f000 f929 	bl	801e2cc <_lseek_r>
 801e07a:	1c43      	adds	r3, r0, #1
 801e07c:	89a3      	ldrh	r3, [r4, #12]
 801e07e:	bf15      	itete	ne
 801e080:	6560      	strne	r0, [r4, #84]	@ 0x54
 801e082:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801e086:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801e08a:	81a3      	strheq	r3, [r4, #12]
 801e08c:	bf18      	it	ne
 801e08e:	81a3      	strhne	r3, [r4, #12]
 801e090:	bd10      	pop	{r4, pc}

0801e092 <__sclose>:
 801e092:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e096:	f000 b94f 	b.w	801e338 <_close_r>
	...

0801e09c <fiprintf>:
 801e09c:	b40e      	push	{r1, r2, r3}
 801e09e:	b503      	push	{r0, r1, lr}
 801e0a0:	4601      	mov	r1, r0
 801e0a2:	ab03      	add	r3, sp, #12
 801e0a4:	4805      	ldr	r0, [pc, #20]	@ (801e0bc <fiprintf+0x20>)
 801e0a6:	f853 2b04 	ldr.w	r2, [r3], #4
 801e0aa:	6800      	ldr	r0, [r0, #0]
 801e0ac:	9301      	str	r3, [sp, #4]
 801e0ae:	f7ff fc59 	bl	801d964 <_vfiprintf_r>
 801e0b2:	b002      	add	sp, #8
 801e0b4:	f85d eb04 	ldr.w	lr, [sp], #4
 801e0b8:	b003      	add	sp, #12
 801e0ba:	4770      	bx	lr
 801e0bc:	2000332c 	.word	0x2000332c

0801e0c0 <__swbuf_r>:
 801e0c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e0c2:	460e      	mov	r6, r1
 801e0c4:	4614      	mov	r4, r2
 801e0c6:	4605      	mov	r5, r0
 801e0c8:	b118      	cbz	r0, 801e0d2 <__swbuf_r+0x12>
 801e0ca:	6a03      	ldr	r3, [r0, #32]
 801e0cc:	b90b      	cbnz	r3, 801e0d2 <__swbuf_r+0x12>
 801e0ce:	f7fe ffa3 	bl	801d018 <__sinit>
 801e0d2:	69a3      	ldr	r3, [r4, #24]
 801e0d4:	60a3      	str	r3, [r4, #8]
 801e0d6:	89a3      	ldrh	r3, [r4, #12]
 801e0d8:	071a      	lsls	r2, r3, #28
 801e0da:	d501      	bpl.n	801e0e0 <__swbuf_r+0x20>
 801e0dc:	6923      	ldr	r3, [r4, #16]
 801e0de:	b943      	cbnz	r3, 801e0f2 <__swbuf_r+0x32>
 801e0e0:	4621      	mov	r1, r4
 801e0e2:	4628      	mov	r0, r5
 801e0e4:	f000 f82a 	bl	801e13c <__swsetup_r>
 801e0e8:	b118      	cbz	r0, 801e0f2 <__swbuf_r+0x32>
 801e0ea:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801e0ee:	4638      	mov	r0, r7
 801e0f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e0f2:	6823      	ldr	r3, [r4, #0]
 801e0f4:	6922      	ldr	r2, [r4, #16]
 801e0f6:	1a98      	subs	r0, r3, r2
 801e0f8:	6963      	ldr	r3, [r4, #20]
 801e0fa:	b2f6      	uxtb	r6, r6
 801e0fc:	4283      	cmp	r3, r0
 801e0fe:	4637      	mov	r7, r6
 801e100:	dc05      	bgt.n	801e10e <__swbuf_r+0x4e>
 801e102:	4621      	mov	r1, r4
 801e104:	4628      	mov	r0, r5
 801e106:	f7ff ff55 	bl	801dfb4 <_fflush_r>
 801e10a:	2800      	cmp	r0, #0
 801e10c:	d1ed      	bne.n	801e0ea <__swbuf_r+0x2a>
 801e10e:	68a3      	ldr	r3, [r4, #8]
 801e110:	3b01      	subs	r3, #1
 801e112:	60a3      	str	r3, [r4, #8]
 801e114:	6823      	ldr	r3, [r4, #0]
 801e116:	1c5a      	adds	r2, r3, #1
 801e118:	6022      	str	r2, [r4, #0]
 801e11a:	701e      	strb	r6, [r3, #0]
 801e11c:	6962      	ldr	r2, [r4, #20]
 801e11e:	1c43      	adds	r3, r0, #1
 801e120:	429a      	cmp	r2, r3
 801e122:	d004      	beq.n	801e12e <__swbuf_r+0x6e>
 801e124:	89a3      	ldrh	r3, [r4, #12]
 801e126:	07db      	lsls	r3, r3, #31
 801e128:	d5e1      	bpl.n	801e0ee <__swbuf_r+0x2e>
 801e12a:	2e0a      	cmp	r6, #10
 801e12c:	d1df      	bne.n	801e0ee <__swbuf_r+0x2e>
 801e12e:	4621      	mov	r1, r4
 801e130:	4628      	mov	r0, r5
 801e132:	f7ff ff3f 	bl	801dfb4 <_fflush_r>
 801e136:	2800      	cmp	r0, #0
 801e138:	d0d9      	beq.n	801e0ee <__swbuf_r+0x2e>
 801e13a:	e7d6      	b.n	801e0ea <__swbuf_r+0x2a>

0801e13c <__swsetup_r>:
 801e13c:	b538      	push	{r3, r4, r5, lr}
 801e13e:	4b29      	ldr	r3, [pc, #164]	@ (801e1e4 <__swsetup_r+0xa8>)
 801e140:	4605      	mov	r5, r0
 801e142:	6818      	ldr	r0, [r3, #0]
 801e144:	460c      	mov	r4, r1
 801e146:	b118      	cbz	r0, 801e150 <__swsetup_r+0x14>
 801e148:	6a03      	ldr	r3, [r0, #32]
 801e14a:	b90b      	cbnz	r3, 801e150 <__swsetup_r+0x14>
 801e14c:	f7fe ff64 	bl	801d018 <__sinit>
 801e150:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e154:	0719      	lsls	r1, r3, #28
 801e156:	d422      	bmi.n	801e19e <__swsetup_r+0x62>
 801e158:	06da      	lsls	r2, r3, #27
 801e15a:	d407      	bmi.n	801e16c <__swsetup_r+0x30>
 801e15c:	2209      	movs	r2, #9
 801e15e:	602a      	str	r2, [r5, #0]
 801e160:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801e164:	81a3      	strh	r3, [r4, #12]
 801e166:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801e16a:	e033      	b.n	801e1d4 <__swsetup_r+0x98>
 801e16c:	0758      	lsls	r0, r3, #29
 801e16e:	d512      	bpl.n	801e196 <__swsetup_r+0x5a>
 801e170:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801e172:	b141      	cbz	r1, 801e186 <__swsetup_r+0x4a>
 801e174:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801e178:	4299      	cmp	r1, r3
 801e17a:	d002      	beq.n	801e182 <__swsetup_r+0x46>
 801e17c:	4628      	mov	r0, r5
 801e17e:	f7ff fa25 	bl	801d5cc <_free_r>
 801e182:	2300      	movs	r3, #0
 801e184:	6363      	str	r3, [r4, #52]	@ 0x34
 801e186:	89a3      	ldrh	r3, [r4, #12]
 801e188:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801e18c:	81a3      	strh	r3, [r4, #12]
 801e18e:	2300      	movs	r3, #0
 801e190:	6063      	str	r3, [r4, #4]
 801e192:	6923      	ldr	r3, [r4, #16]
 801e194:	6023      	str	r3, [r4, #0]
 801e196:	89a3      	ldrh	r3, [r4, #12]
 801e198:	f043 0308 	orr.w	r3, r3, #8
 801e19c:	81a3      	strh	r3, [r4, #12]
 801e19e:	6923      	ldr	r3, [r4, #16]
 801e1a0:	b94b      	cbnz	r3, 801e1b6 <__swsetup_r+0x7a>
 801e1a2:	89a3      	ldrh	r3, [r4, #12]
 801e1a4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801e1a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801e1ac:	d003      	beq.n	801e1b6 <__swsetup_r+0x7a>
 801e1ae:	4621      	mov	r1, r4
 801e1b0:	4628      	mov	r0, r5
 801e1b2:	f000 f83f 	bl	801e234 <__smakebuf_r>
 801e1b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e1ba:	f013 0201 	ands.w	r2, r3, #1
 801e1be:	d00a      	beq.n	801e1d6 <__swsetup_r+0x9a>
 801e1c0:	2200      	movs	r2, #0
 801e1c2:	60a2      	str	r2, [r4, #8]
 801e1c4:	6962      	ldr	r2, [r4, #20]
 801e1c6:	4252      	negs	r2, r2
 801e1c8:	61a2      	str	r2, [r4, #24]
 801e1ca:	6922      	ldr	r2, [r4, #16]
 801e1cc:	b942      	cbnz	r2, 801e1e0 <__swsetup_r+0xa4>
 801e1ce:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801e1d2:	d1c5      	bne.n	801e160 <__swsetup_r+0x24>
 801e1d4:	bd38      	pop	{r3, r4, r5, pc}
 801e1d6:	0799      	lsls	r1, r3, #30
 801e1d8:	bf58      	it	pl
 801e1da:	6962      	ldrpl	r2, [r4, #20]
 801e1dc:	60a2      	str	r2, [r4, #8]
 801e1de:	e7f4      	b.n	801e1ca <__swsetup_r+0x8e>
 801e1e0:	2000      	movs	r0, #0
 801e1e2:	e7f7      	b.n	801e1d4 <__swsetup_r+0x98>
 801e1e4:	2000332c 	.word	0x2000332c

0801e1e8 <__swhatbuf_r>:
 801e1e8:	b570      	push	{r4, r5, r6, lr}
 801e1ea:	460c      	mov	r4, r1
 801e1ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e1f0:	2900      	cmp	r1, #0
 801e1f2:	b096      	sub	sp, #88	@ 0x58
 801e1f4:	4615      	mov	r5, r2
 801e1f6:	461e      	mov	r6, r3
 801e1f8:	da0d      	bge.n	801e216 <__swhatbuf_r+0x2e>
 801e1fa:	89a3      	ldrh	r3, [r4, #12]
 801e1fc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801e200:	f04f 0100 	mov.w	r1, #0
 801e204:	bf14      	ite	ne
 801e206:	2340      	movne	r3, #64	@ 0x40
 801e208:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801e20c:	2000      	movs	r0, #0
 801e20e:	6031      	str	r1, [r6, #0]
 801e210:	602b      	str	r3, [r5, #0]
 801e212:	b016      	add	sp, #88	@ 0x58
 801e214:	bd70      	pop	{r4, r5, r6, pc}
 801e216:	466a      	mov	r2, sp
 801e218:	f000 f89e 	bl	801e358 <_fstat_r>
 801e21c:	2800      	cmp	r0, #0
 801e21e:	dbec      	blt.n	801e1fa <__swhatbuf_r+0x12>
 801e220:	9901      	ldr	r1, [sp, #4]
 801e222:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801e226:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801e22a:	4259      	negs	r1, r3
 801e22c:	4159      	adcs	r1, r3
 801e22e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801e232:	e7eb      	b.n	801e20c <__swhatbuf_r+0x24>

0801e234 <__smakebuf_r>:
 801e234:	898b      	ldrh	r3, [r1, #12]
 801e236:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801e238:	079d      	lsls	r5, r3, #30
 801e23a:	4606      	mov	r6, r0
 801e23c:	460c      	mov	r4, r1
 801e23e:	d507      	bpl.n	801e250 <__smakebuf_r+0x1c>
 801e240:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801e244:	6023      	str	r3, [r4, #0]
 801e246:	6123      	str	r3, [r4, #16]
 801e248:	2301      	movs	r3, #1
 801e24a:	6163      	str	r3, [r4, #20]
 801e24c:	b003      	add	sp, #12
 801e24e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e250:	ab01      	add	r3, sp, #4
 801e252:	466a      	mov	r2, sp
 801e254:	f7ff ffc8 	bl	801e1e8 <__swhatbuf_r>
 801e258:	9f00      	ldr	r7, [sp, #0]
 801e25a:	4605      	mov	r5, r0
 801e25c:	4639      	mov	r1, r7
 801e25e:	4630      	mov	r0, r6
 801e260:	f7fe fd18 	bl	801cc94 <_malloc_r>
 801e264:	b948      	cbnz	r0, 801e27a <__smakebuf_r+0x46>
 801e266:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e26a:	059a      	lsls	r2, r3, #22
 801e26c:	d4ee      	bmi.n	801e24c <__smakebuf_r+0x18>
 801e26e:	f023 0303 	bic.w	r3, r3, #3
 801e272:	f043 0302 	orr.w	r3, r3, #2
 801e276:	81a3      	strh	r3, [r4, #12]
 801e278:	e7e2      	b.n	801e240 <__smakebuf_r+0xc>
 801e27a:	89a3      	ldrh	r3, [r4, #12]
 801e27c:	6020      	str	r0, [r4, #0]
 801e27e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801e282:	81a3      	strh	r3, [r4, #12]
 801e284:	9b01      	ldr	r3, [sp, #4]
 801e286:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801e28a:	b15b      	cbz	r3, 801e2a4 <__smakebuf_r+0x70>
 801e28c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e290:	4630      	mov	r0, r6
 801e292:	f000 f80b 	bl	801e2ac <_isatty_r>
 801e296:	b128      	cbz	r0, 801e2a4 <__smakebuf_r+0x70>
 801e298:	89a3      	ldrh	r3, [r4, #12]
 801e29a:	f023 0303 	bic.w	r3, r3, #3
 801e29e:	f043 0301 	orr.w	r3, r3, #1
 801e2a2:	81a3      	strh	r3, [r4, #12]
 801e2a4:	89a3      	ldrh	r3, [r4, #12]
 801e2a6:	431d      	orrs	r5, r3
 801e2a8:	81a5      	strh	r5, [r4, #12]
 801e2aa:	e7cf      	b.n	801e24c <__smakebuf_r+0x18>

0801e2ac <_isatty_r>:
 801e2ac:	b538      	push	{r3, r4, r5, lr}
 801e2ae:	4d06      	ldr	r5, [pc, #24]	@ (801e2c8 <_isatty_r+0x1c>)
 801e2b0:	2300      	movs	r3, #0
 801e2b2:	4604      	mov	r4, r0
 801e2b4:	4608      	mov	r0, r1
 801e2b6:	602b      	str	r3, [r5, #0]
 801e2b8:	f7e4 fa46 	bl	8002748 <_isatty>
 801e2bc:	1c43      	adds	r3, r0, #1
 801e2be:	d102      	bne.n	801e2c6 <_isatty_r+0x1a>
 801e2c0:	682b      	ldr	r3, [r5, #0]
 801e2c2:	b103      	cbz	r3, 801e2c6 <_isatty_r+0x1a>
 801e2c4:	6023      	str	r3, [r4, #0]
 801e2c6:	bd38      	pop	{r3, r4, r5, pc}
 801e2c8:	20019d88 	.word	0x20019d88

0801e2cc <_lseek_r>:
 801e2cc:	b538      	push	{r3, r4, r5, lr}
 801e2ce:	4d07      	ldr	r5, [pc, #28]	@ (801e2ec <_lseek_r+0x20>)
 801e2d0:	4604      	mov	r4, r0
 801e2d2:	4608      	mov	r0, r1
 801e2d4:	4611      	mov	r1, r2
 801e2d6:	2200      	movs	r2, #0
 801e2d8:	602a      	str	r2, [r5, #0]
 801e2da:	461a      	mov	r2, r3
 801e2dc:	f7e4 fa3f 	bl	800275e <_lseek>
 801e2e0:	1c43      	adds	r3, r0, #1
 801e2e2:	d102      	bne.n	801e2ea <_lseek_r+0x1e>
 801e2e4:	682b      	ldr	r3, [r5, #0]
 801e2e6:	b103      	cbz	r3, 801e2ea <_lseek_r+0x1e>
 801e2e8:	6023      	str	r3, [r4, #0]
 801e2ea:	bd38      	pop	{r3, r4, r5, pc}
 801e2ec:	20019d88 	.word	0x20019d88

0801e2f0 <_read_r>:
 801e2f0:	b538      	push	{r3, r4, r5, lr}
 801e2f2:	4d07      	ldr	r5, [pc, #28]	@ (801e310 <_read_r+0x20>)
 801e2f4:	4604      	mov	r4, r0
 801e2f6:	4608      	mov	r0, r1
 801e2f8:	4611      	mov	r1, r2
 801e2fa:	2200      	movs	r2, #0
 801e2fc:	602a      	str	r2, [r5, #0]
 801e2fe:	461a      	mov	r2, r3
 801e300:	f7e4 f9e9 	bl	80026d6 <_read>
 801e304:	1c43      	adds	r3, r0, #1
 801e306:	d102      	bne.n	801e30e <_read_r+0x1e>
 801e308:	682b      	ldr	r3, [r5, #0]
 801e30a:	b103      	cbz	r3, 801e30e <_read_r+0x1e>
 801e30c:	6023      	str	r3, [r4, #0]
 801e30e:	bd38      	pop	{r3, r4, r5, pc}
 801e310:	20019d88 	.word	0x20019d88

0801e314 <_write_r>:
 801e314:	b538      	push	{r3, r4, r5, lr}
 801e316:	4d07      	ldr	r5, [pc, #28]	@ (801e334 <_write_r+0x20>)
 801e318:	4604      	mov	r4, r0
 801e31a:	4608      	mov	r0, r1
 801e31c:	4611      	mov	r1, r2
 801e31e:	2200      	movs	r2, #0
 801e320:	602a      	str	r2, [r5, #0]
 801e322:	461a      	mov	r2, r3
 801e324:	f7e3 ff38 	bl	8002198 <_write>
 801e328:	1c43      	adds	r3, r0, #1
 801e32a:	d102      	bne.n	801e332 <_write_r+0x1e>
 801e32c:	682b      	ldr	r3, [r5, #0]
 801e32e:	b103      	cbz	r3, 801e332 <_write_r+0x1e>
 801e330:	6023      	str	r3, [r4, #0]
 801e332:	bd38      	pop	{r3, r4, r5, pc}
 801e334:	20019d88 	.word	0x20019d88

0801e338 <_close_r>:
 801e338:	b538      	push	{r3, r4, r5, lr}
 801e33a:	4d06      	ldr	r5, [pc, #24]	@ (801e354 <_close_r+0x1c>)
 801e33c:	2300      	movs	r3, #0
 801e33e:	4604      	mov	r4, r0
 801e340:	4608      	mov	r0, r1
 801e342:	602b      	str	r3, [r5, #0]
 801e344:	f7e4 f9e4 	bl	8002710 <_close>
 801e348:	1c43      	adds	r3, r0, #1
 801e34a:	d102      	bne.n	801e352 <_close_r+0x1a>
 801e34c:	682b      	ldr	r3, [r5, #0]
 801e34e:	b103      	cbz	r3, 801e352 <_close_r+0x1a>
 801e350:	6023      	str	r3, [r4, #0]
 801e352:	bd38      	pop	{r3, r4, r5, pc}
 801e354:	20019d88 	.word	0x20019d88

0801e358 <_fstat_r>:
 801e358:	b538      	push	{r3, r4, r5, lr}
 801e35a:	4d07      	ldr	r5, [pc, #28]	@ (801e378 <_fstat_r+0x20>)
 801e35c:	2300      	movs	r3, #0
 801e35e:	4604      	mov	r4, r0
 801e360:	4608      	mov	r0, r1
 801e362:	4611      	mov	r1, r2
 801e364:	602b      	str	r3, [r5, #0]
 801e366:	f7e4 f9df 	bl	8002728 <_fstat>
 801e36a:	1c43      	adds	r3, r0, #1
 801e36c:	d102      	bne.n	801e374 <_fstat_r+0x1c>
 801e36e:	682b      	ldr	r3, [r5, #0]
 801e370:	b103      	cbz	r3, 801e374 <_fstat_r+0x1c>
 801e372:	6023      	str	r3, [r4, #0]
 801e374:	bd38      	pop	{r3, r4, r5, pc}
 801e376:	bf00      	nop
 801e378:	20019d88 	.word	0x20019d88

0801e37c <abort>:
 801e37c:	b508      	push	{r3, lr}
 801e37e:	2006      	movs	r0, #6
 801e380:	f000 f82c 	bl	801e3dc <raise>
 801e384:	2001      	movs	r0, #1
 801e386:	f7e4 f99b 	bl	80026c0 <_exit>

0801e38a <_raise_r>:
 801e38a:	291f      	cmp	r1, #31
 801e38c:	b538      	push	{r3, r4, r5, lr}
 801e38e:	4605      	mov	r5, r0
 801e390:	460c      	mov	r4, r1
 801e392:	d904      	bls.n	801e39e <_raise_r+0x14>
 801e394:	2316      	movs	r3, #22
 801e396:	6003      	str	r3, [r0, #0]
 801e398:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801e39c:	bd38      	pop	{r3, r4, r5, pc}
 801e39e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801e3a0:	b112      	cbz	r2, 801e3a8 <_raise_r+0x1e>
 801e3a2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801e3a6:	b94b      	cbnz	r3, 801e3bc <_raise_r+0x32>
 801e3a8:	4628      	mov	r0, r5
 801e3aa:	f000 f831 	bl	801e410 <_getpid_r>
 801e3ae:	4622      	mov	r2, r4
 801e3b0:	4601      	mov	r1, r0
 801e3b2:	4628      	mov	r0, r5
 801e3b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e3b8:	f000 b818 	b.w	801e3ec <_kill_r>
 801e3bc:	2b01      	cmp	r3, #1
 801e3be:	d00a      	beq.n	801e3d6 <_raise_r+0x4c>
 801e3c0:	1c59      	adds	r1, r3, #1
 801e3c2:	d103      	bne.n	801e3cc <_raise_r+0x42>
 801e3c4:	2316      	movs	r3, #22
 801e3c6:	6003      	str	r3, [r0, #0]
 801e3c8:	2001      	movs	r0, #1
 801e3ca:	e7e7      	b.n	801e39c <_raise_r+0x12>
 801e3cc:	2100      	movs	r1, #0
 801e3ce:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801e3d2:	4620      	mov	r0, r4
 801e3d4:	4798      	blx	r3
 801e3d6:	2000      	movs	r0, #0
 801e3d8:	e7e0      	b.n	801e39c <_raise_r+0x12>
	...

0801e3dc <raise>:
 801e3dc:	4b02      	ldr	r3, [pc, #8]	@ (801e3e8 <raise+0xc>)
 801e3de:	4601      	mov	r1, r0
 801e3e0:	6818      	ldr	r0, [r3, #0]
 801e3e2:	f7ff bfd2 	b.w	801e38a <_raise_r>
 801e3e6:	bf00      	nop
 801e3e8:	2000332c 	.word	0x2000332c

0801e3ec <_kill_r>:
 801e3ec:	b538      	push	{r3, r4, r5, lr}
 801e3ee:	4d07      	ldr	r5, [pc, #28]	@ (801e40c <_kill_r+0x20>)
 801e3f0:	2300      	movs	r3, #0
 801e3f2:	4604      	mov	r4, r0
 801e3f4:	4608      	mov	r0, r1
 801e3f6:	4611      	mov	r1, r2
 801e3f8:	602b      	str	r3, [r5, #0]
 801e3fa:	f7e4 f951 	bl	80026a0 <_kill>
 801e3fe:	1c43      	adds	r3, r0, #1
 801e400:	d102      	bne.n	801e408 <_kill_r+0x1c>
 801e402:	682b      	ldr	r3, [r5, #0]
 801e404:	b103      	cbz	r3, 801e408 <_kill_r+0x1c>
 801e406:	6023      	str	r3, [r4, #0]
 801e408:	bd38      	pop	{r3, r4, r5, pc}
 801e40a:	bf00      	nop
 801e40c:	20019d88 	.word	0x20019d88

0801e410 <_getpid_r>:
 801e410:	f7e4 b93e 	b.w	8002690 <_getpid>

0801e414 <_init>:
 801e414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e416:	bf00      	nop
 801e418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e41a:	bc08      	pop	{r3}
 801e41c:	469e      	mov	lr, r3
 801e41e:	4770      	bx	lr

0801e420 <_fini>:
 801e420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e422:	bf00      	nop
 801e424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e426:	bc08      	pop	{r3}
 801e428:	469e      	mov	lr, r3
 801e42a:	4770      	bx	lr
