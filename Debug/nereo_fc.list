
nereo_fc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001c1b8  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001dcc  0801c378  0801c378  0001d378  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801e144  0801e144  00020acc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801e144  0801e144  0001f144  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801e14c  0801e14c  00020acc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000018  0801e14c  0801e14c  0001f14c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801e164  0801e164  0001f164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000acc  20000000  0801e168  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020acc  2**0
                  CONTENTS
 10 .bss          000155dc  20000ad0  20000ad0  00020ad0  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  200160ac  200160ac  00020ad0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020acc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002377e  00000000  00000000  00020afc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005708  00000000  00000000  0004427a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001958  00000000  00000000  00049988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001321  00000000  00000000  0004b2e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00034113  00000000  00000000  0004c601  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00023726  00000000  00000000  00080714  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001158ce  00000000  00000000  000a3e3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000ef  00000000  00000000  001b9708  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000077f0  00000000  00000000  001b97f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000071  00000000  00000000  001c0fe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    00000959  00000000  00000000  001c1059  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_ranges 00000020  00000000  00000000  001c19b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000ad0 	.word	0x20000ad0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0801c360 	.word	0x0801c360

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000ad4 	.word	0x20000ad4
 80001fc:	0801c360 	.word	0x0801c360

08000200 <strcmp>:
 8000200:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000204:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000208:	2a01      	cmp	r2, #1
 800020a:	bf28      	it	cs
 800020c:	429a      	cmpcs	r2, r3
 800020e:	d0f7      	beq.n	8000200 <strcmp>
 8000210:	1ad0      	subs	r0, r2, r3
 8000212:	4770      	bx	lr

08000214 <strlen>:
 8000214:	4603      	mov	r3, r0
 8000216:	f813 2b01 	ldrb.w	r2, [r3], #1
 800021a:	2a00      	cmp	r2, #0
 800021c:	d1fb      	bne.n	8000216 <strlen+0x2>
 800021e:	1a18      	subs	r0, r3, r0
 8000220:	3801      	subs	r0, #1
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2f>:
 8000b7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b80:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b84:	bf24      	itt	cs
 8000b86:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b8a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b8e:	d90d      	bls.n	8000bac <__aeabi_d2f+0x30>
 8000b90:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b94:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b98:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b9c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ba0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ba4:	bf08      	it	eq
 8000ba6:	f020 0001 	biceq.w	r0, r0, #1
 8000baa:	4770      	bx	lr
 8000bac:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bb0:	d121      	bne.n	8000bf6 <__aeabi_d2f+0x7a>
 8000bb2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bb6:	bfbc      	itt	lt
 8000bb8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bbc:	4770      	bxlt	lr
 8000bbe:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bc2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bc6:	f1c2 0218 	rsb	r2, r2, #24
 8000bca:	f1c2 0c20 	rsb	ip, r2, #32
 8000bce:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bd2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bd6:	bf18      	it	ne
 8000bd8:	f040 0001 	orrne.w	r0, r0, #1
 8000bdc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000be4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000be8:	ea40 000c 	orr.w	r0, r0, ip
 8000bec:	fa23 f302 	lsr.w	r3, r3, r2
 8000bf0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bf4:	e7cc      	b.n	8000b90 <__aeabi_d2f+0x14>
 8000bf6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bfa:	d107      	bne.n	8000c0c <__aeabi_d2f+0x90>
 8000bfc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c00:	bf1e      	ittt	ne
 8000c02:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c06:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c0a:	4770      	bxne	lr
 8000c0c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c10:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c14:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop

08000c1c <__aeabi_ldivmod>:
 8000c1c:	b97b      	cbnz	r3, 8000c3e <__aeabi_ldivmod+0x22>
 8000c1e:	b972      	cbnz	r2, 8000c3e <__aeabi_ldivmod+0x22>
 8000c20:	2900      	cmp	r1, #0
 8000c22:	bfbe      	ittt	lt
 8000c24:	2000      	movlt	r0, #0
 8000c26:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000c2a:	e006      	blt.n	8000c3a <__aeabi_ldivmod+0x1e>
 8000c2c:	bf08      	it	eq
 8000c2e:	2800      	cmpeq	r0, #0
 8000c30:	bf1c      	itt	ne
 8000c32:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000c36:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c3a:	f000 b9d3 	b.w	8000fe4 <__aeabi_idiv0>
 8000c3e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c42:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c46:	2900      	cmp	r1, #0
 8000c48:	db09      	blt.n	8000c5e <__aeabi_ldivmod+0x42>
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	db1a      	blt.n	8000c84 <__aeabi_ldivmod+0x68>
 8000c4e:	f000 f84d 	bl	8000cec <__udivmoddi4>
 8000c52:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c5a:	b004      	add	sp, #16
 8000c5c:	4770      	bx	lr
 8000c5e:	4240      	negs	r0, r0
 8000c60:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	db1b      	blt.n	8000ca0 <__aeabi_ldivmod+0x84>
 8000c68:	f000 f840 	bl	8000cec <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4240      	negs	r0, r0
 8000c78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c7c:	4252      	negs	r2, r2
 8000c7e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c82:	4770      	bx	lr
 8000c84:	4252      	negs	r2, r2
 8000c86:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c8a:	f000 f82f 	bl	8000cec <__udivmoddi4>
 8000c8e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c96:	b004      	add	sp, #16
 8000c98:	4240      	negs	r0, r0
 8000c9a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c9e:	4770      	bx	lr
 8000ca0:	4252      	negs	r2, r2
 8000ca2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ca6:	f000 f821 	bl	8000cec <__udivmoddi4>
 8000caa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb2:	b004      	add	sp, #16
 8000cb4:	4252      	negs	r2, r2
 8000cb6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cba:	4770      	bx	lr

08000cbc <__aeabi_uldivmod>:
 8000cbc:	b953      	cbnz	r3, 8000cd4 <__aeabi_uldivmod+0x18>
 8000cbe:	b94a      	cbnz	r2, 8000cd4 <__aeabi_uldivmod+0x18>
 8000cc0:	2900      	cmp	r1, #0
 8000cc2:	bf08      	it	eq
 8000cc4:	2800      	cmpeq	r0, #0
 8000cc6:	bf1c      	itt	ne
 8000cc8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000ccc:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cd0:	f000 b988 	b.w	8000fe4 <__aeabi_idiv0>
 8000cd4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cdc:	f000 f806 	bl	8000cec <__udivmoddi4>
 8000ce0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce8:	b004      	add	sp, #16
 8000cea:	4770      	bx	lr

08000cec <__udivmoddi4>:
 8000cec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cf0:	9d08      	ldr	r5, [sp, #32]
 8000cf2:	468e      	mov	lr, r1
 8000cf4:	4604      	mov	r4, r0
 8000cf6:	4688      	mov	r8, r1
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d14a      	bne.n	8000d92 <__udivmoddi4+0xa6>
 8000cfc:	428a      	cmp	r2, r1
 8000cfe:	4617      	mov	r7, r2
 8000d00:	d962      	bls.n	8000dc8 <__udivmoddi4+0xdc>
 8000d02:	fab2 f682 	clz	r6, r2
 8000d06:	b14e      	cbz	r6, 8000d1c <__udivmoddi4+0x30>
 8000d08:	f1c6 0320 	rsb	r3, r6, #32
 8000d0c:	fa01 f806 	lsl.w	r8, r1, r6
 8000d10:	fa20 f303 	lsr.w	r3, r0, r3
 8000d14:	40b7      	lsls	r7, r6
 8000d16:	ea43 0808 	orr.w	r8, r3, r8
 8000d1a:	40b4      	lsls	r4, r6
 8000d1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d20:	fa1f fc87 	uxth.w	ip, r7
 8000d24:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d28:	0c23      	lsrs	r3, r4, #16
 8000d2a:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d2e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d32:	fb01 f20c 	mul.w	r2, r1, ip
 8000d36:	429a      	cmp	r2, r3
 8000d38:	d909      	bls.n	8000d4e <__udivmoddi4+0x62>
 8000d3a:	18fb      	adds	r3, r7, r3
 8000d3c:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000d40:	f080 80ea 	bcs.w	8000f18 <__udivmoddi4+0x22c>
 8000d44:	429a      	cmp	r2, r3
 8000d46:	f240 80e7 	bls.w	8000f18 <__udivmoddi4+0x22c>
 8000d4a:	3902      	subs	r1, #2
 8000d4c:	443b      	add	r3, r7
 8000d4e:	1a9a      	subs	r2, r3, r2
 8000d50:	b2a3      	uxth	r3, r4
 8000d52:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d56:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d5a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d5e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d62:	459c      	cmp	ip, r3
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0x8e>
 8000d66:	18fb      	adds	r3, r7, r3
 8000d68:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000d6c:	f080 80d6 	bcs.w	8000f1c <__udivmoddi4+0x230>
 8000d70:	459c      	cmp	ip, r3
 8000d72:	f240 80d3 	bls.w	8000f1c <__udivmoddi4+0x230>
 8000d76:	443b      	add	r3, r7
 8000d78:	3802      	subs	r0, #2
 8000d7a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d7e:	eba3 030c 	sub.w	r3, r3, ip
 8000d82:	2100      	movs	r1, #0
 8000d84:	b11d      	cbz	r5, 8000d8e <__udivmoddi4+0xa2>
 8000d86:	40f3      	lsrs	r3, r6
 8000d88:	2200      	movs	r2, #0
 8000d8a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d905      	bls.n	8000da2 <__udivmoddi4+0xb6>
 8000d96:	b10d      	cbz	r5, 8000d9c <__udivmoddi4+0xb0>
 8000d98:	e9c5 0100 	strd	r0, r1, [r5]
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	4608      	mov	r0, r1
 8000da0:	e7f5      	b.n	8000d8e <__udivmoddi4+0xa2>
 8000da2:	fab3 f183 	clz	r1, r3
 8000da6:	2900      	cmp	r1, #0
 8000da8:	d146      	bne.n	8000e38 <__udivmoddi4+0x14c>
 8000daa:	4573      	cmp	r3, lr
 8000dac:	d302      	bcc.n	8000db4 <__udivmoddi4+0xc8>
 8000dae:	4282      	cmp	r2, r0
 8000db0:	f200 8105 	bhi.w	8000fbe <__udivmoddi4+0x2d2>
 8000db4:	1a84      	subs	r4, r0, r2
 8000db6:	eb6e 0203 	sbc.w	r2, lr, r3
 8000dba:	2001      	movs	r0, #1
 8000dbc:	4690      	mov	r8, r2
 8000dbe:	2d00      	cmp	r5, #0
 8000dc0:	d0e5      	beq.n	8000d8e <__udivmoddi4+0xa2>
 8000dc2:	e9c5 4800 	strd	r4, r8, [r5]
 8000dc6:	e7e2      	b.n	8000d8e <__udivmoddi4+0xa2>
 8000dc8:	2a00      	cmp	r2, #0
 8000dca:	f000 8090 	beq.w	8000eee <__udivmoddi4+0x202>
 8000dce:	fab2 f682 	clz	r6, r2
 8000dd2:	2e00      	cmp	r6, #0
 8000dd4:	f040 80a4 	bne.w	8000f20 <__udivmoddi4+0x234>
 8000dd8:	1a8a      	subs	r2, r1, r2
 8000dda:	0c03      	lsrs	r3, r0, #16
 8000ddc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000de0:	b280      	uxth	r0, r0
 8000de2:	b2bc      	uxth	r4, r7
 8000de4:	2101      	movs	r1, #1
 8000de6:	fbb2 fcfe 	udiv	ip, r2, lr
 8000dea:	fb0e 221c 	mls	r2, lr, ip, r2
 8000dee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000df2:	fb04 f20c 	mul.w	r2, r4, ip
 8000df6:	429a      	cmp	r2, r3
 8000df8:	d907      	bls.n	8000e0a <__udivmoddi4+0x11e>
 8000dfa:	18fb      	adds	r3, r7, r3
 8000dfc:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000e00:	d202      	bcs.n	8000e08 <__udivmoddi4+0x11c>
 8000e02:	429a      	cmp	r2, r3
 8000e04:	f200 80e0 	bhi.w	8000fc8 <__udivmoddi4+0x2dc>
 8000e08:	46c4      	mov	ip, r8
 8000e0a:	1a9b      	subs	r3, r3, r2
 8000e0c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e10:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e14:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e18:	fb02 f404 	mul.w	r4, r2, r4
 8000e1c:	429c      	cmp	r4, r3
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x144>
 8000e20:	18fb      	adds	r3, r7, r3
 8000e22:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x142>
 8000e28:	429c      	cmp	r4, r3
 8000e2a:	f200 80ca 	bhi.w	8000fc2 <__udivmoddi4+0x2d6>
 8000e2e:	4602      	mov	r2, r0
 8000e30:	1b1b      	subs	r3, r3, r4
 8000e32:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e36:	e7a5      	b.n	8000d84 <__udivmoddi4+0x98>
 8000e38:	f1c1 0620 	rsb	r6, r1, #32
 8000e3c:	408b      	lsls	r3, r1
 8000e3e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e42:	431f      	orrs	r7, r3
 8000e44:	fa0e f401 	lsl.w	r4, lr, r1
 8000e48:	fa20 f306 	lsr.w	r3, r0, r6
 8000e4c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e50:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e54:	4323      	orrs	r3, r4
 8000e56:	fa00 f801 	lsl.w	r8, r0, r1
 8000e5a:	fa1f fc87 	uxth.w	ip, r7
 8000e5e:	fbbe f0f9 	udiv	r0, lr, r9
 8000e62:	0c1c      	lsrs	r4, r3, #16
 8000e64:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e68:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e6c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e70:	45a6      	cmp	lr, r4
 8000e72:	fa02 f201 	lsl.w	r2, r2, r1
 8000e76:	d909      	bls.n	8000e8c <__udivmoddi4+0x1a0>
 8000e78:	193c      	adds	r4, r7, r4
 8000e7a:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000e7e:	f080 809c 	bcs.w	8000fba <__udivmoddi4+0x2ce>
 8000e82:	45a6      	cmp	lr, r4
 8000e84:	f240 8099 	bls.w	8000fba <__udivmoddi4+0x2ce>
 8000e88:	3802      	subs	r0, #2
 8000e8a:	443c      	add	r4, r7
 8000e8c:	eba4 040e 	sub.w	r4, r4, lr
 8000e90:	fa1f fe83 	uxth.w	lr, r3
 8000e94:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e98:	fb09 4413 	mls	r4, r9, r3, r4
 8000e9c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ea0:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ea4:	45a4      	cmp	ip, r4
 8000ea6:	d908      	bls.n	8000eba <__udivmoddi4+0x1ce>
 8000ea8:	193c      	adds	r4, r7, r4
 8000eaa:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000eae:	f080 8082 	bcs.w	8000fb6 <__udivmoddi4+0x2ca>
 8000eb2:	45a4      	cmp	ip, r4
 8000eb4:	d97f      	bls.n	8000fb6 <__udivmoddi4+0x2ca>
 8000eb6:	3b02      	subs	r3, #2
 8000eb8:	443c      	add	r4, r7
 8000eba:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ebe:	eba4 040c 	sub.w	r4, r4, ip
 8000ec2:	fba0 ec02 	umull	lr, ip, r0, r2
 8000ec6:	4564      	cmp	r4, ip
 8000ec8:	4673      	mov	r3, lr
 8000eca:	46e1      	mov	r9, ip
 8000ecc:	d362      	bcc.n	8000f94 <__udivmoddi4+0x2a8>
 8000ece:	d05f      	beq.n	8000f90 <__udivmoddi4+0x2a4>
 8000ed0:	b15d      	cbz	r5, 8000eea <__udivmoddi4+0x1fe>
 8000ed2:	ebb8 0203 	subs.w	r2, r8, r3
 8000ed6:	eb64 0409 	sbc.w	r4, r4, r9
 8000eda:	fa04 f606 	lsl.w	r6, r4, r6
 8000ede:	fa22 f301 	lsr.w	r3, r2, r1
 8000ee2:	431e      	orrs	r6, r3
 8000ee4:	40cc      	lsrs	r4, r1
 8000ee6:	e9c5 6400 	strd	r6, r4, [r5]
 8000eea:	2100      	movs	r1, #0
 8000eec:	e74f      	b.n	8000d8e <__udivmoddi4+0xa2>
 8000eee:	fbb1 fcf2 	udiv	ip, r1, r2
 8000ef2:	0c01      	lsrs	r1, r0, #16
 8000ef4:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ef8:	b280      	uxth	r0, r0
 8000efa:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000efe:	463b      	mov	r3, r7
 8000f00:	4638      	mov	r0, r7
 8000f02:	463c      	mov	r4, r7
 8000f04:	46b8      	mov	r8, r7
 8000f06:	46be      	mov	lr, r7
 8000f08:	2620      	movs	r6, #32
 8000f0a:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f0e:	eba2 0208 	sub.w	r2, r2, r8
 8000f12:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f16:	e766      	b.n	8000de6 <__udivmoddi4+0xfa>
 8000f18:	4601      	mov	r1, r0
 8000f1a:	e718      	b.n	8000d4e <__udivmoddi4+0x62>
 8000f1c:	4610      	mov	r0, r2
 8000f1e:	e72c      	b.n	8000d7a <__udivmoddi4+0x8e>
 8000f20:	f1c6 0220 	rsb	r2, r6, #32
 8000f24:	fa2e f302 	lsr.w	r3, lr, r2
 8000f28:	40b7      	lsls	r7, r6
 8000f2a:	40b1      	lsls	r1, r6
 8000f2c:	fa20 f202 	lsr.w	r2, r0, r2
 8000f30:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f34:	430a      	orrs	r2, r1
 8000f36:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f3a:	b2bc      	uxth	r4, r7
 8000f3c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f40:	0c11      	lsrs	r1, r2, #16
 8000f42:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f46:	fb08 f904 	mul.w	r9, r8, r4
 8000f4a:	40b0      	lsls	r0, r6
 8000f4c:	4589      	cmp	r9, r1
 8000f4e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f52:	b280      	uxth	r0, r0
 8000f54:	d93e      	bls.n	8000fd4 <__udivmoddi4+0x2e8>
 8000f56:	1879      	adds	r1, r7, r1
 8000f58:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000f5c:	d201      	bcs.n	8000f62 <__udivmoddi4+0x276>
 8000f5e:	4589      	cmp	r9, r1
 8000f60:	d81f      	bhi.n	8000fa2 <__udivmoddi4+0x2b6>
 8000f62:	eba1 0109 	sub.w	r1, r1, r9
 8000f66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f6a:	fb09 f804 	mul.w	r8, r9, r4
 8000f6e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f72:	b292      	uxth	r2, r2
 8000f74:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f78:	4542      	cmp	r2, r8
 8000f7a:	d229      	bcs.n	8000fd0 <__udivmoddi4+0x2e4>
 8000f7c:	18ba      	adds	r2, r7, r2
 8000f7e:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000f82:	d2c4      	bcs.n	8000f0e <__udivmoddi4+0x222>
 8000f84:	4542      	cmp	r2, r8
 8000f86:	d2c2      	bcs.n	8000f0e <__udivmoddi4+0x222>
 8000f88:	f1a9 0102 	sub.w	r1, r9, #2
 8000f8c:	443a      	add	r2, r7
 8000f8e:	e7be      	b.n	8000f0e <__udivmoddi4+0x222>
 8000f90:	45f0      	cmp	r8, lr
 8000f92:	d29d      	bcs.n	8000ed0 <__udivmoddi4+0x1e4>
 8000f94:	ebbe 0302 	subs.w	r3, lr, r2
 8000f98:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f9c:	3801      	subs	r0, #1
 8000f9e:	46e1      	mov	r9, ip
 8000fa0:	e796      	b.n	8000ed0 <__udivmoddi4+0x1e4>
 8000fa2:	eba7 0909 	sub.w	r9, r7, r9
 8000fa6:	4449      	add	r1, r9
 8000fa8:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fac:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fb0:	fb09 f804 	mul.w	r8, r9, r4
 8000fb4:	e7db      	b.n	8000f6e <__udivmoddi4+0x282>
 8000fb6:	4673      	mov	r3, lr
 8000fb8:	e77f      	b.n	8000eba <__udivmoddi4+0x1ce>
 8000fba:	4650      	mov	r0, sl
 8000fbc:	e766      	b.n	8000e8c <__udivmoddi4+0x1a0>
 8000fbe:	4608      	mov	r0, r1
 8000fc0:	e6fd      	b.n	8000dbe <__udivmoddi4+0xd2>
 8000fc2:	443b      	add	r3, r7
 8000fc4:	3a02      	subs	r2, #2
 8000fc6:	e733      	b.n	8000e30 <__udivmoddi4+0x144>
 8000fc8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fcc:	443b      	add	r3, r7
 8000fce:	e71c      	b.n	8000e0a <__udivmoddi4+0x11e>
 8000fd0:	4649      	mov	r1, r9
 8000fd2:	e79c      	b.n	8000f0e <__udivmoddi4+0x222>
 8000fd4:	eba1 0109 	sub.w	r1, r1, r9
 8000fd8:	46c4      	mov	ip, r8
 8000fda:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fde:	fb09 f804 	mul.w	r8, r9, r4
 8000fe2:	e7c4      	b.n	8000f6e <__udivmoddi4+0x282>

08000fe4 <__aeabi_idiv0>:
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop

08000fe8 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b08a      	sub	sp, #40	@ 0x28
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8000ff4:	f007 fe96 	bl	8008d24 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8000ff8:	4b5a      	ldr	r3, [pc, #360]	@ (8001164 <pvPortMallocMicroROS+0x17c>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d101      	bne.n	8001004 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8001000:	f000 f986 	bl	8001310 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001004:	4b58      	ldr	r3, [pc, #352]	@ (8001168 <pvPortMallocMicroROS+0x180>)
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	4013      	ands	r3, r2
 800100c:	2b00      	cmp	r3, #0
 800100e:	f040 8090 	bne.w	8001132 <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d01e      	beq.n	8001056 <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8001018:	2208      	movs	r2, #8
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4413      	add	r3, r2
 800101e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	f003 0307 	and.w	r3, r3, #7
 8001026:	2b00      	cmp	r3, #0
 8001028:	d015      	beq.n	8001056 <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	f023 0307 	bic.w	r3, r3, #7
 8001030:	3308      	adds	r3, #8
 8001032:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	f003 0307 	and.w	r3, r3, #7
 800103a:	2b00      	cmp	r3, #0
 800103c:	d00b      	beq.n	8001056 <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800103e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001042:	f383 8811 	msr	BASEPRI, r3
 8001046:	f3bf 8f6f 	isb	sy
 800104a:	f3bf 8f4f 	dsb	sy
 800104e:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001050:	bf00      	nop
 8001052:	bf00      	nop
 8001054:	e7fd      	b.n	8001052 <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d06a      	beq.n	8001132 <pvPortMallocMicroROS+0x14a>
 800105c:	4b43      	ldr	r3, [pc, #268]	@ (800116c <pvPortMallocMicroROS+0x184>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	687a      	ldr	r2, [r7, #4]
 8001062:	429a      	cmp	r2, r3
 8001064:	d865      	bhi.n	8001132 <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8001066:	4b42      	ldr	r3, [pc, #264]	@ (8001170 <pvPortMallocMicroROS+0x188>)
 8001068:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800106a:	4b41      	ldr	r3, [pc, #260]	@ (8001170 <pvPortMallocMicroROS+0x188>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001070:	e004      	b.n	800107c <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 8001072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001074:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8001076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800107c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	687a      	ldr	r2, [r7, #4]
 8001082:	429a      	cmp	r2, r3
 8001084:	d903      	bls.n	800108e <pvPortMallocMicroROS+0xa6>
 8001086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d1f1      	bne.n	8001072 <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800108e:	4b35      	ldr	r3, [pc, #212]	@ (8001164 <pvPortMallocMicroROS+0x17c>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001094:	429a      	cmp	r2, r3
 8001096:	d04c      	beq.n	8001132 <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001098:	6a3b      	ldr	r3, [r7, #32]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	2208      	movs	r2, #8
 800109e:	4413      	add	r3, r2
 80010a0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80010a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	6a3b      	ldr	r3, [r7, #32]
 80010a8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80010aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010ac:	685a      	ldr	r2, [r3, #4]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	1ad2      	subs	r2, r2, r3
 80010b2:	2308      	movs	r3, #8
 80010b4:	005b      	lsls	r3, r3, #1
 80010b6:	429a      	cmp	r2, r3
 80010b8:	d920      	bls.n	80010fc <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80010ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	4413      	add	r3, r2
 80010c0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80010c2:	69bb      	ldr	r3, [r7, #24]
 80010c4:	f003 0307 	and.w	r3, r3, #7
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d00b      	beq.n	80010e4 <pvPortMallocMicroROS+0xfc>
	__asm volatile
 80010cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80010d0:	f383 8811 	msr	BASEPRI, r3
 80010d4:	f3bf 8f6f 	isb	sy
 80010d8:	f3bf 8f4f 	dsb	sy
 80010dc:	613b      	str	r3, [r7, #16]
}
 80010de:	bf00      	nop
 80010e0:	bf00      	nop
 80010e2:	e7fd      	b.n	80010e0 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80010e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010e6:	685a      	ldr	r2, [r3, #4]
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	1ad2      	subs	r2, r2, r3
 80010ec:	69bb      	ldr	r3, [r7, #24]
 80010ee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80010f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010f2:	687a      	ldr	r2, [r7, #4]
 80010f4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80010f6:	69b8      	ldr	r0, [r7, #24]
 80010f8:	f000 f96c 	bl	80013d4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80010fc:	4b1b      	ldr	r3, [pc, #108]	@ (800116c <pvPortMallocMicroROS+0x184>)
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	1ad3      	subs	r3, r2, r3
 8001106:	4a19      	ldr	r2, [pc, #100]	@ (800116c <pvPortMallocMicroROS+0x184>)
 8001108:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800110a:	4b18      	ldr	r3, [pc, #96]	@ (800116c <pvPortMallocMicroROS+0x184>)
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	4b19      	ldr	r3, [pc, #100]	@ (8001174 <pvPortMallocMicroROS+0x18c>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	429a      	cmp	r2, r3
 8001114:	d203      	bcs.n	800111e <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001116:	4b15      	ldr	r3, [pc, #84]	@ (800116c <pvPortMallocMicroROS+0x184>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4a16      	ldr	r2, [pc, #88]	@ (8001174 <pvPortMallocMicroROS+0x18c>)
 800111c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800111e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001120:	685a      	ldr	r2, [r3, #4]
 8001122:	4b11      	ldr	r3, [pc, #68]	@ (8001168 <pvPortMallocMicroROS+0x180>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	431a      	orrs	r2, r3
 8001128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800112a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800112c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800112e:	2200      	movs	r2, #0
 8001130:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8001132:	f007 fe05 	bl	8008d40 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	f003 0307 	and.w	r3, r3, #7
 800113c:	2b00      	cmp	r3, #0
 800113e:	d00b      	beq.n	8001158 <pvPortMallocMicroROS+0x170>
	__asm volatile
 8001140:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001144:	f383 8811 	msr	BASEPRI, r3
 8001148:	f3bf 8f6f 	isb	sy
 800114c:	f3bf 8f4f 	dsb	sy
 8001150:	60fb      	str	r3, [r7, #12]
}
 8001152:	bf00      	nop
 8001154:	bf00      	nop
 8001156:	e7fd      	b.n	8001154 <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 8001158:	69fb      	ldr	r3, [r7, #28]
}
 800115a:	4618      	mov	r0, r3
 800115c:	3728      	adds	r7, #40	@ 0x28
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	20008024 	.word	0x20008024
 8001168:	20008030 	.word	0x20008030
 800116c:	20008028 	.word	0x20008028
 8001170:	2000801c 	.word	0x2000801c
 8001174:	2000802c 	.word	0x2000802c

08001178 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b086      	sub	sp, #24
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d04a      	beq.n	8001220 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800118a:	2308      	movs	r3, #8
 800118c:	425b      	negs	r3, r3
 800118e:	697a      	ldr	r2, [r7, #20]
 8001190:	4413      	add	r3, r2
 8001192:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	685a      	ldr	r2, [r3, #4]
 800119c:	4b22      	ldr	r3, [pc, #136]	@ (8001228 <vPortFreeMicroROS+0xb0>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4013      	ands	r3, r2
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d10b      	bne.n	80011be <vPortFreeMicroROS+0x46>
	__asm volatile
 80011a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80011aa:	f383 8811 	msr	BASEPRI, r3
 80011ae:	f3bf 8f6f 	isb	sy
 80011b2:	f3bf 8f4f 	dsb	sy
 80011b6:	60fb      	str	r3, [r7, #12]
}
 80011b8:	bf00      	nop
 80011ba:	bf00      	nop
 80011bc:	e7fd      	b.n	80011ba <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d00b      	beq.n	80011de <vPortFreeMicroROS+0x66>
	__asm volatile
 80011c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80011ca:	f383 8811 	msr	BASEPRI, r3
 80011ce:	f3bf 8f6f 	isb	sy
 80011d2:	f3bf 8f4f 	dsb	sy
 80011d6:	60bb      	str	r3, [r7, #8]
}
 80011d8:	bf00      	nop
 80011da:	bf00      	nop
 80011dc:	e7fd      	b.n	80011da <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	685a      	ldr	r2, [r3, #4]
 80011e2:	4b11      	ldr	r3, [pc, #68]	@ (8001228 <vPortFreeMicroROS+0xb0>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4013      	ands	r3, r2
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d019      	beq.n	8001220 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80011ec:	693b      	ldr	r3, [r7, #16]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d115      	bne.n	8001220 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	685a      	ldr	r2, [r3, #4]
 80011f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001228 <vPortFreeMicroROS+0xb0>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	43db      	mvns	r3, r3
 80011fe:	401a      	ands	r2, r3
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8001204:	f007 fd8e 	bl	8008d24 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	685a      	ldr	r2, [r3, #4]
 800120c:	4b07      	ldr	r3, [pc, #28]	@ (800122c <vPortFreeMicroROS+0xb4>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4413      	add	r3, r2
 8001212:	4a06      	ldr	r2, [pc, #24]	@ (800122c <vPortFreeMicroROS+0xb4>)
 8001214:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001216:	6938      	ldr	r0, [r7, #16]
 8001218:	f000 f8dc 	bl	80013d4 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800121c:	f007 fd90 	bl	8008d40 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8001220:	bf00      	nop
 8001222:	3718      	adds	r7, #24
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	20008030 	.word	0x20008030
 800122c:	20008028 	.word	0x20008028

08001230 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8001230:	b480      	push	{r7}
 8001232:	b087      	sub	sp, #28
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 800123c:	2308      	movs	r3, #8
 800123e:	425b      	negs	r3, r3
 8001240:	697a      	ldr	r2, [r7, #20]
 8001242:	4413      	add	r3, r2
 8001244:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	685a      	ldr	r2, [r3, #4]
 800124e:	4b06      	ldr	r3, [pc, #24]	@ (8001268 <getBlockSize+0x38>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	43db      	mvns	r3, r3
 8001254:	4013      	ands	r3, r2
 8001256:	60fb      	str	r3, [r7, #12]

	return count;
 8001258:	68fb      	ldr	r3, [r7, #12]
}
 800125a:	4618      	mov	r0, r3
 800125c:	371c      	adds	r7, #28
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	20008030 	.word	0x20008030

0800126c <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001276:	f007 fd55 	bl	8008d24 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 800127a:	6838      	ldr	r0, [r7, #0]
 800127c:	f7ff feb4 	bl	8000fe8 <pvPortMallocMicroROS>
 8001280:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8001282:	68bb      	ldr	r3, [r7, #8]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d017      	beq.n	80012b8 <pvPortReallocMicroROS+0x4c>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d014      	beq.n	80012b8 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	f7ff ffce 	bl	8001230 <getBlockSize>
 8001294:	4603      	mov	r3, r0
 8001296:	2208      	movs	r2, #8
 8001298:	1a9b      	subs	r3, r3, r2
 800129a:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 800129c:	683a      	ldr	r2, [r7, #0]
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	429a      	cmp	r2, r3
 80012a2:	d201      	bcs.n	80012a8 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 80012a8:	68fa      	ldr	r2, [r7, #12]
 80012aa:	6879      	ldr	r1, [r7, #4]
 80012ac:	68b8      	ldr	r0, [r7, #8]
 80012ae:	f01a f8fa 	bl	801b4a6 <memcpy>

		vPortFreeMicroROS(pv);
 80012b2:	6878      	ldr	r0, [r7, #4]
 80012b4:	f7ff ff60 	bl	8001178 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 80012b8:	f007 fd42 	bl	8008d40 <xTaskResumeAll>

	return newmem;
 80012bc:	68bb      	ldr	r3, [r7, #8]
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3710      	adds	r7, #16
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b086      	sub	sp, #24
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
 80012ce:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 80012d0:	f007 fd28 	bl	8008d24 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	687a      	ldr	r2, [r7, #4]
 80012d8:	fb02 f303 	mul.w	r3, r2, r3
 80012dc:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 80012de:	6978      	ldr	r0, [r7, #20]
 80012e0:	f7ff fe82 	bl	8000fe8 <pvPortMallocMicroROS>
 80012e4:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	613b      	str	r3, [r7, #16]

  	while(count--)
 80012ea:	e004      	b.n	80012f6 <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	1c5a      	adds	r2, r3, #1
 80012f0:	613a      	str	r2, [r7, #16]
 80012f2:	2200      	movs	r2, #0
 80012f4:	701a      	strb	r2, [r3, #0]
  	while(count--)
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	1e5a      	subs	r2, r3, #1
 80012fa:	617a      	str	r2, [r7, #20]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d1f5      	bne.n	80012ec <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8001300:	f007 fd1e 	bl	8008d40 <xTaskResumeAll>
  	return mem;
 8001304:	68fb      	ldr	r3, [r7, #12]
}
 8001306:	4618      	mov	r0, r3
 8001308:	3718      	adds	r7, #24
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
	...

08001310 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8001310:	b480      	push	{r7}
 8001312:	b085      	sub	sp, #20
 8001314:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001316:	f247 5330 	movw	r3, #30000	@ 0x7530
 800131a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800131c:	4b27      	ldr	r3, [pc, #156]	@ (80013bc <prvHeapInit+0xac>)
 800131e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	f003 0307 	and.w	r3, r3, #7
 8001326:	2b00      	cmp	r3, #0
 8001328:	d00c      	beq.n	8001344 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	3307      	adds	r3, #7
 800132e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	f023 0307 	bic.w	r3, r3, #7
 8001336:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001338:	68ba      	ldr	r2, [r7, #8]
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	4a1f      	ldr	r2, [pc, #124]	@ (80013bc <prvHeapInit+0xac>)
 8001340:	4413      	add	r3, r2
 8001342:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001348:	4a1d      	ldr	r2, [pc, #116]	@ (80013c0 <prvHeapInit+0xb0>)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800134e:	4b1c      	ldr	r3, [pc, #112]	@ (80013c0 <prvHeapInit+0xb0>)
 8001350:	2200      	movs	r2, #0
 8001352:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	68ba      	ldr	r2, [r7, #8]
 8001358:	4413      	add	r3, r2
 800135a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800135c:	2208      	movs	r2, #8
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	1a9b      	subs	r3, r3, r2
 8001362:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	f023 0307 	bic.w	r3, r3, #7
 800136a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	4a15      	ldr	r2, [pc, #84]	@ (80013c4 <prvHeapInit+0xb4>)
 8001370:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8001372:	4b14      	ldr	r3, [pc, #80]	@ (80013c4 <prvHeapInit+0xb4>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	2200      	movs	r2, #0
 8001378:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800137a:	4b12      	ldr	r3, [pc, #72]	@ (80013c4 <prvHeapInit+0xb4>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	2200      	movs	r2, #0
 8001380:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	68fa      	ldr	r2, [r7, #12]
 800138a:	1ad2      	subs	r2, r2, r3
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001390:	4b0c      	ldr	r3, [pc, #48]	@ (80013c4 <prvHeapInit+0xb4>)
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	4a0a      	ldr	r2, [pc, #40]	@ (80013c8 <prvHeapInit+0xb8>)
 800139e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	4a09      	ldr	r2, [pc, #36]	@ (80013cc <prvHeapInit+0xbc>)
 80013a6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80013a8:	4b09      	ldr	r3, [pc, #36]	@ (80013d0 <prvHeapInit+0xc0>)
 80013aa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80013ae:	601a      	str	r2, [r3, #0]
}
 80013b0:	bf00      	nop
 80013b2:	3714      	adds	r7, #20
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr
 80013bc:	20000aec 	.word	0x20000aec
 80013c0:	2000801c 	.word	0x2000801c
 80013c4:	20008024 	.word	0x20008024
 80013c8:	2000802c 	.word	0x2000802c
 80013cc:	20008028 	.word	0x20008028
 80013d0:	20008030 	.word	0x20008030

080013d4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80013d4:	b480      	push	{r7}
 80013d6:	b085      	sub	sp, #20
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80013dc:	4b28      	ldr	r3, [pc, #160]	@ (8001480 <prvInsertBlockIntoFreeList+0xac>)
 80013de:	60fb      	str	r3, [r7, #12]
 80013e0:	e002      	b.n	80013e8 <prvInsertBlockIntoFreeList+0x14>
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	60fb      	str	r3, [r7, #12]
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	687a      	ldr	r2, [r7, #4]
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d8f7      	bhi.n	80013e2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	68ba      	ldr	r2, [r7, #8]
 80013fc:	4413      	add	r3, r2
 80013fe:	687a      	ldr	r2, [r7, #4]
 8001400:	429a      	cmp	r2, r3
 8001402:	d108      	bne.n	8001416 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	685a      	ldr	r2, [r3, #4]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	441a      	add	r2, r3
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	68ba      	ldr	r2, [r7, #8]
 8001420:	441a      	add	r2, r3
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	429a      	cmp	r2, r3
 8001428:	d118      	bne.n	800145c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	4b15      	ldr	r3, [pc, #84]	@ (8001484 <prvInsertBlockIntoFreeList+0xb0>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	429a      	cmp	r2, r3
 8001434:	d00d      	beq.n	8001452 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	685a      	ldr	r2, [r3, #4]
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	441a      	add	r2, r3
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	601a      	str	r2, [r3, #0]
 8001450:	e008      	b.n	8001464 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001452:	4b0c      	ldr	r3, [pc, #48]	@ (8001484 <prvInsertBlockIntoFreeList+0xb0>)
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	601a      	str	r2, [r3, #0]
 800145a:	e003      	b.n	8001464 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001464:	68fa      	ldr	r2, [r7, #12]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	429a      	cmp	r2, r3
 800146a:	d002      	beq.n	8001472 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	687a      	ldr	r2, [r7, #4]
 8001470:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001472:	bf00      	nop
 8001474:	3714      	adds	r7, #20
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	2000801c 	.word	0x2000801c
 8001484:	20008024 	.word	0x20008024

08001488 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800148e:	2300      	movs	r3, #0
 8001490:	607b      	str	r3, [r7, #4]
 8001492:	4b10      	ldr	r3, [pc, #64]	@ (80014d4 <MX_DMA_Init+0x4c>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001496:	4a0f      	ldr	r2, [pc, #60]	@ (80014d4 <MX_DMA_Init+0x4c>)
 8001498:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800149c:	6313      	str	r3, [r2, #48]	@ 0x30
 800149e:	4b0d      	ldr	r3, [pc, #52]	@ (80014d4 <MX_DMA_Init+0x4c>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014a6:	607b      	str	r3, [r7, #4]
 80014a8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80014aa:	2200      	movs	r2, #0
 80014ac:	2105      	movs	r1, #5
 80014ae:	203a      	movs	r0, #58	@ 0x3a
 80014b0:	f002 fc92 	bl	8003dd8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80014b4:	203a      	movs	r0, #58	@ 0x3a
 80014b6:	f002 fcab 	bl	8003e10 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 80014ba:	2200      	movs	r2, #0
 80014bc:	2105      	movs	r1, #5
 80014be:	2046      	movs	r0, #70	@ 0x46
 80014c0:	f002 fc8a 	bl	8003dd8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80014c4:	2046      	movs	r0, #70	@ 0x46
 80014c6:	f002 fca3 	bl	8003e10 <HAL_NVIC_EnableIRQ>

}
 80014ca:	bf00      	nop
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	40023800 	.word	0x40023800

080014d8 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80014e6:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 80014e8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80014ec:	4904      	ldr	r1, [pc, #16]	@ (8001500 <cubemx_transport_open+0x28>)
 80014ee:	68f8      	ldr	r0, [r7, #12]
 80014f0:	f005 f914 	bl	800671c <HAL_UART_Receive_DMA>
    return true;
 80014f4:	2301      	movs	r3, #1
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3710      	adds	r7, #16
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	20008034 	.word	0x20008034

08001504 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8001512:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8001514:	68f8      	ldr	r0, [r7, #12]
 8001516:	f005 f926 	bl	8006766 <HAL_UART_DMAStop>
    return true;
 800151a:	2301      	movs	r3, #1
}
 800151c:	4618      	mov	r0, r3
 800151e:	3710      	adds	r7, #16
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}

08001524 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8001524:	b580      	push	{r7, lr}
 8001526:	b086      	sub	sp, #24
 8001528:	af00      	add	r7, sp, #0
 800152a:	60f8      	str	r0, [r7, #12]
 800152c:	60b9      	str	r1, [r7, #8]
 800152e:	607a      	str	r2, [r7, #4]
 8001530:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8001538:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001540:	b2db      	uxtb	r3, r3
 8001542:	2b20      	cmp	r3, #32
 8001544:	d11c      	bne.n	8001580 <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	b29b      	uxth	r3, r3
 800154a:	461a      	mov	r2, r3
 800154c:	68b9      	ldr	r1, [r7, #8]
 800154e:	6978      	ldr	r0, [r7, #20]
 8001550:	f005 f874 	bl	800663c <HAL_UART_Transmit_DMA>
 8001554:	4603      	mov	r3, r0
 8001556:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001558:	e002      	b.n	8001560 <cubemx_transport_write+0x3c>
            osDelay(1);
 800155a:	2001      	movs	r0, #1
 800155c:	f006 fba0 	bl	8007ca0 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001560:	7cfb      	ldrb	r3, [r7, #19]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d105      	bne.n	8001572 <cubemx_transport_write+0x4e>
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800156c:	b2db      	uxtb	r3, r3
 800156e:	2b20      	cmp	r3, #32
 8001570:	d1f3      	bne.n	800155a <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 8001572:	7cfb      	ldrb	r3, [r7, #19]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d101      	bne.n	800157c <cubemx_transport_write+0x58>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	e002      	b.n	8001582 <cubemx_transport_write+0x5e>
 800157c:	2300      	movs	r3, #0
 800157e:	e000      	b.n	8001582 <cubemx_transport_write+0x5e>
    }else{
        return 0;
 8001580:	2300      	movs	r3, #0
    }
}
 8001582:	4618      	mov	r0, r3
 8001584:	3718      	adds	r7, #24
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
	...

0800158c <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 800158c:	b580      	push	{r7, lr}
 800158e:	b088      	sub	sp, #32
 8001590:	af00      	add	r7, sp, #0
 8001592:	60f8      	str	r0, [r7, #12]
 8001594:	60b9      	str	r1, [r7, #8]
 8001596:	607a      	str	r2, [r7, #4]
 8001598:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80015a0:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 80015a2:	2300      	movs	r3, #0
 80015a4:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015a6:	b672      	cpsid	i
}
 80015a8:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 80015b6:	4a1c      	ldr	r2, [pc, #112]	@ (8001628 <cubemx_transport_read+0x9c>)
 80015b8:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80015ba:	b662      	cpsie	i
}
 80015bc:	bf00      	nop
        __enable_irq();
        ms_used++;
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	3301      	adds	r3, #1
 80015c2:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 80015c4:	2001      	movs	r0, #1
 80015c6:	f006 fb6b 	bl	8007ca0 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 80015ca:	4b18      	ldr	r3, [pc, #96]	@ (800162c <cubemx_transport_read+0xa0>)
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	4b16      	ldr	r3, [pc, #88]	@ (8001628 <cubemx_transport_read+0x9c>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	429a      	cmp	r2, r3
 80015d4:	d103      	bne.n	80015de <cubemx_transport_read+0x52>
 80015d6:	69fa      	ldr	r2, [r7, #28]
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	429a      	cmp	r2, r3
 80015dc:	dbe3      	blt.n	80015a6 <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 80015de:	2300      	movs	r3, #0
 80015e0:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80015e2:	e011      	b.n	8001608 <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 80015e4:	4b11      	ldr	r3, [pc, #68]	@ (800162c <cubemx_transport_read+0xa0>)
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	68b9      	ldr	r1, [r7, #8]
 80015ea:	69bb      	ldr	r3, [r7, #24]
 80015ec:	440b      	add	r3, r1
 80015ee:	4910      	ldr	r1, [pc, #64]	@ (8001630 <cubemx_transport_read+0xa4>)
 80015f0:	5c8a      	ldrb	r2, [r1, r2]
 80015f2:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 80015f4:	4b0d      	ldr	r3, [pc, #52]	@ (800162c <cubemx_transport_read+0xa0>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	3301      	adds	r3, #1
 80015fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80015fe:	4a0b      	ldr	r2, [pc, #44]	@ (800162c <cubemx_transport_read+0xa0>)
 8001600:	6013      	str	r3, [r2, #0]
        wrote++;
 8001602:	69bb      	ldr	r3, [r7, #24]
 8001604:	3301      	adds	r3, #1
 8001606:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8001608:	4b08      	ldr	r3, [pc, #32]	@ (800162c <cubemx_transport_read+0xa0>)
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	4b06      	ldr	r3, [pc, #24]	@ (8001628 <cubemx_transport_read+0x9c>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	429a      	cmp	r2, r3
 8001612:	d003      	beq.n	800161c <cubemx_transport_read+0x90>
 8001614:	69ba      	ldr	r2, [r7, #24]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	429a      	cmp	r2, r3
 800161a:	d3e3      	bcc.n	80015e4 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 800161c:	69bb      	ldr	r3, [r7, #24]
}
 800161e:	4618      	mov	r0, r3
 8001620:	3720      	adds	r7, #32
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	20008838 	.word	0x20008838
 800162c:	20008834 	.word	0x20008834
 8001630:	20008034 	.word	0x20008034

08001634 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
extern "C" void MX_FREERTOS_Init(void) {
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001638:	4a04      	ldr	r2, [pc, #16]	@ (800164c <MX_FREERTOS_Init+0x18>)
 800163a:	2100      	movs	r1, #0
 800163c:	4804      	ldr	r0, [pc, #16]	@ (8001650 <MX_FREERTOS_Init+0x1c>)
 800163e:	f006 fa9d 	bl	8007b7c <osThreadNew>
 8001642:	4603      	mov	r3, r0
 8001644:	4a03      	ldr	r2, [pc, #12]	@ (8001654 <MX_FREERTOS_Init+0x20>)
 8001646:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001648:	bf00      	nop
 800164a:	bd80      	pop	{r7, pc}
 800164c:	0801c620 	.word	0x0801c620
 8001650:	08001659 	.word	0x08001659
 8001654:	20008844 	.word	0x20008844

08001658 <_Z16StartDefaultTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001658:	b5f0      	push	{r4, r5, r6, r7, lr}
 800165a:	f2ad 5d0c 	subw	sp, sp, #1292	@ 0x50c
 800165e:	af04      	add	r7, sp, #16
 8001660:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 8001664:	f2a3 4354 	subw	r3, r3, #1108	@ 0x454
 8001668:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
	// micro-ROS configuration
	  rcl_ret_t rc;
	  HAL_IWDG_Refresh(&hiwdg);
 800166a:	4849      	ldr	r0, [pc, #292]	@ (8001790 <_Z16StartDefaultTaskPv+0x138>)
 800166c:	f003 f9e7 	bl	8004a3e <HAL_IWDG_Refresh>
	  rmw_uros_set_custom_transport(
 8001670:	4b48      	ldr	r3, [pc, #288]	@ (8001794 <_Z16StartDefaultTaskPv+0x13c>)
 8001672:	9301      	str	r3, [sp, #4]
 8001674:	4b48      	ldr	r3, [pc, #288]	@ (8001798 <_Z16StartDefaultTaskPv+0x140>)
 8001676:	9300      	str	r3, [sp, #0]
 8001678:	4b48      	ldr	r3, [pc, #288]	@ (800179c <_Z16StartDefaultTaskPv+0x144>)
 800167a:	4a49      	ldr	r2, [pc, #292]	@ (80017a0 <_Z16StartDefaultTaskPv+0x148>)
 800167c:	4949      	ldr	r1, [pc, #292]	@ (80017a4 <_Z16StartDefaultTaskPv+0x14c>)
 800167e:	2001      	movs	r0, #1
 8001680:	f00b fc12 	bl	800cea8 <rmw_uros_set_custom_transport>
	    (void *) &huart1,
	    cubemx_transport_open,
	    cubemx_transport_close,
	    cubemx_transport_write,
	    cubemx_transport_read);
	  HAL_IWDG_Refresh(&hiwdg);
 8001684:	4842      	ldr	r0, [pc, #264]	@ (8001790 <_Z16StartDefaultTaskPv+0x138>)
 8001686:	f003 f9da 	bl	8004a3e <HAL_IWDG_Refresh>
	  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 800168a:	f507 639a 	add.w	r3, r7, #1232	@ 0x4d0
 800168e:	4618      	mov	r0, r3
 8001690:	f00b fb3c 	bl	800cd0c <rcutils_get_zero_initialized_allocator>
	  freeRTOS_allocator.allocate = microros_allocate;
 8001694:	4b44      	ldr	r3, [pc, #272]	@ (80017a8 <_Z16StartDefaultTaskPv+0x150>)
 8001696:	f8c7 34d0 	str.w	r3, [r7, #1232]	@ 0x4d0
	  freeRTOS_allocator.deallocate = microros_deallocate;
 800169a:	4b44      	ldr	r3, [pc, #272]	@ (80017ac <_Z16StartDefaultTaskPv+0x154>)
 800169c:	f8c7 34d4 	str.w	r3, [r7, #1236]	@ 0x4d4
	  freeRTOS_allocator.reallocate = microros_reallocate;
 80016a0:	4b43      	ldr	r3, [pc, #268]	@ (80017b0 <_Z16StartDefaultTaskPv+0x158>)
 80016a2:	f8c7 34d8 	str.w	r3, [r7, #1240]	@ 0x4d8
	  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 80016a6:	4b43      	ldr	r3, [pc, #268]	@ (80017b4 <_Z16StartDefaultTaskPv+0x15c>)
 80016a8:	f8c7 34dc 	str.w	r3, [r7, #1244]	@ 0x4dc

	  if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 80016ac:	f507 639a 	add.w	r3, r7, #1232	@ 0x4d0
 80016b0:	4618      	mov	r0, r3
 80016b2:	f00b fb39 	bl	800cd28 <rcutils_set_default_allocator>
 80016b6:	4603      	mov	r3, r0
 80016b8:	f083 0301 	eor.w	r3, r3, #1
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d004      	beq.n	80016cc <_Z16StartDefaultTaskPv+0x74>
	      printf("Error on default allocators (line %d)\n", __LINE__);
 80016c2:	218b      	movs	r1, #139	@ 0x8b
 80016c4:	483c      	ldr	r0, [pc, #240]	@ (80017b8 <_Z16StartDefaultTaskPv+0x160>)
 80016c6:	f019 fdd1 	bl	801b26c <iprintf>
 80016ca:	e002      	b.n	80016d2 <_Z16StartDefaultTaskPv+0x7a>
	  } else HAL_IWDG_Refresh(&hiwdg);
 80016cc:	4830      	ldr	r0, [pc, #192]	@ (8001790 <_Z16StartDefaultTaskPv+0x138>)
 80016ce:	f003 f9b6 	bl	8004a3e <HAL_IWDG_Refresh>
	  nereo_interfaces__msg__CommandVelocity cmd_vel_msg;
	  sensor_msgs__msg__Imu imu_data_msg;
	  sensor_msgs__msg__FluidPressure fluid_pressure;
	  sensor_msgs__msg__Temperature water_temperature;

	  allocator = rcl_get_default_allocator();
 80016d2:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80016d6:	4618      	mov	r0, r3
 80016d8:	f00b fb44 	bl	800cd64 <rcutils_get_default_allocator>
 80016dc:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 80016e0:	f5a3 638e 	sub.w	r3, r3, #1136	@ 0x470
 80016e4:	f507 6491 	add.w	r4, r7, #1160	@ 0x488
 80016e8:	461d      	mov	r5, r3
 80016ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016ee:	682b      	ldr	r3, [r5, #0]
 80016f0:	6023      	str	r3, [r4, #0]

	  //create init_options
	  rc = rclc_support_init(&support, 0, NULL, &allocator);
 80016f2:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 80016f6:	f207 409c 	addw	r0, r7, #1180	@ 0x49c
 80016fa:	2200      	movs	r2, #0
 80016fc:	2100      	movs	r1, #0
 80016fe:	f00b f9db 	bl	800cab8 <rclc_support_init>
 8001702:	f8c7 04f0 	str.w	r0, [r7, #1264]	@ 0x4f0
	  if (rc != RCL_RET_OK) printf("Error support init.\n");
 8001706:	f8d7 34f0 	ldr.w	r3, [r7, #1264]	@ 0x4f0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d003      	beq.n	8001716 <_Z16StartDefaultTaskPv+0xbe>
 800170e:	482b      	ldr	r0, [pc, #172]	@ (80017bc <_Z16StartDefaultTaskPv+0x164>)
 8001710:	f019 fe14 	bl	801b33c <puts>
 8001714:	e002      	b.n	800171c <_Z16StartDefaultTaskPv+0xc4>
	  else HAL_IWDG_Refresh(&hiwdg);
 8001716:	481e      	ldr	r0, [pc, #120]	@ (8001790 <_Z16StartDefaultTaskPv+0x138>)
 8001718:	f003 f991 	bl	8004a3e <HAL_IWDG_Refresh>

	  // create node
	  rc = rclc_node_init_default(&node, "fc_node", "", &support);
 800171c:	f207 439c 	addw	r3, r7, #1180	@ 0x49c
 8001720:	f507 6090 	add.w	r0, r7, #1152	@ 0x480
 8001724:	4a26      	ldr	r2, [pc, #152]	@ (80017c0 <_Z16StartDefaultTaskPv+0x168>)
 8001726:	4927      	ldr	r1, [pc, #156]	@ (80017c4 <_Z16StartDefaultTaskPv+0x16c>)
 8001728:	f00b fa10 	bl	800cb4c <rclc_node_init_default>
 800172c:	f8c7 04f0 	str.w	r0, [r7, #1264]	@ 0x4f0
	  if (rc != RCL_RET_OK) printf("Error node init\n");
 8001730:	f8d7 34f0 	ldr.w	r3, [r7, #1264]	@ 0x4f0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d003      	beq.n	8001740 <_Z16StartDefaultTaskPv+0xe8>
 8001738:	4823      	ldr	r0, [pc, #140]	@ (80017c8 <_Z16StartDefaultTaskPv+0x170>)
 800173a:	f019 fdff 	bl	801b33c <puts>
 800173e:	e002      	b.n	8001746 <_Z16StartDefaultTaskPv+0xee>
	  else HAL_IWDG_Refresh(&hiwdg);
 8001740:	4813      	ldr	r0, [pc, #76]	@ (8001790 <_Z16StartDefaultTaskPv+0x138>)
 8001742:	f003 f97c 	bl	8004a3e <HAL_IWDG_Refresh>

	  executor = rclc_executor_get_zero_initialized_executor();
 8001746:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800174a:	f5a3 7480 	sub.w	r4, r3, #256	@ 0x100
 800174e:	463b      	mov	r3, r7
 8001750:	4618      	mov	r0, r3
 8001752:	f00a fea1 	bl	800c498 <rclc_executor_get_zero_initialized_executor>
 8001756:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800175a:	f5a3 639f 	sub.w	r3, r3, #1272	@ 0x4f8
 800175e:	4620      	mov	r0, r4
 8001760:	4619      	mov	r1, r3
 8001762:	2388      	movs	r3, #136	@ 0x88
 8001764:	461a      	mov	r2, r3
 8001766:	f019 fe9e 	bl	801b4a6 <memcpy>
	  rc = rclc_executor_init(&executor, &support.context, NUMBER_SUBS_TIMS_SRVS + RCLC_EXECUTOR_PARAMETER_SERVER_HANDLES, &allocator);
 800176a:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 800176e:	f207 419c 	addw	r1, r7, #1180	@ 0x49c
 8001772:	f507 707e 	add.w	r0, r7, #1016	@ 0x3f8
 8001776:	220b      	movs	r2, #11
 8001778:	f00a fe9a 	bl	800c4b0 <rclc_executor_init>
 800177c:	f8c7 04f0 	str.w	r0, [r7, #1264]	@ 0x4f0
	  if (rc != RCL_RET_OK) printf("Error executor init.\n");
 8001780:	f8d7 34f0 	ldr.w	r3, [r7, #1264]	@ 0x4f0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d023      	beq.n	80017d0 <_Z16StartDefaultTaskPv+0x178>
 8001788:	4810      	ldr	r0, [pc, #64]	@ (80017cc <_Z16StartDefaultTaskPv+0x174>)
 800178a:	f019 fdd7 	bl	801b33c <puts>
 800178e:	e022      	b.n	80017d6 <_Z16StartDefaultTaskPv+0x17e>
 8001790:	20008860 	.word	0x20008860
 8001794:	0800158d 	.word	0x0800158d
 8001798:	08001525 	.word	0x08001525
 800179c:	08001505 	.word	0x08001505
 80017a0:	080014d9 	.word	0x080014d9
 80017a4:	20008954 	.word	0x20008954
 80017a8:	08002251 	.word	0x08002251
 80017ac:	08002295 	.word	0x08002295
 80017b0:	080022cd 	.word	0x080022cd
 80017b4:	08002339 	.word	0x08002339
 80017b8:	0801c384 	.word	0x0801c384
 80017bc:	0801c3ac 	.word	0x0801c3ac
 80017c0:	0801c3c0 	.word	0x0801c3c0
 80017c4:	0801c3c4 	.word	0x0801c3c4
 80017c8:	0801c3cc 	.word	0x0801c3cc
 80017cc:	0801c3dc 	.word	0x0801c3dc
	  else HAL_IWDG_Refresh(&hiwdg);
 80017d0:	48cf      	ldr	r0, [pc, #828]	@ (8001b10 <_Z16StartDefaultTaskPv+0x4b8>)
 80017d2:	f003 f934 	bl	8004a3e <HAL_IWDG_Refresh>

	  // PUBLISHERS
	  rclc_publisher_init_best_effort(
 80017d6:	f00a f86d 	bl	800b8b4 <rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses>
 80017da:	4602      	mov	r2, r0
 80017dc:	f507 6190 	add.w	r1, r7, #1152	@ 0x480
 80017e0:	f507 703b 	add.w	r0, r7, #748	@ 0x2ec
 80017e4:	4bcb      	ldr	r3, [pc, #812]	@ (8001b14 <_Z16StartDefaultTaskPv+0x4bc>)
 80017e6:	f00b f9ed 	bl	800cbc4 <rclc_publisher_init_best_effort>

	  // SUBSCRIBERS
	  static micro_ros_utilities_memory_conf_t default_conf = {0};

	  // IMU sub
	  rc = rclc_subscription_init_default(
 80017ea:	f00c f98b 	bl	800db04 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>
 80017ee:	4602      	mov	r2, r0
 80017f0:	f507 6190 	add.w	r1, r7, #1152	@ 0x480
 80017f4:	f507 7035 	add.w	r0, r7, #724	@ 0x2d4
 80017f8:	4bc7      	ldr	r3, [pc, #796]	@ (8001b18 <_Z16StartDefaultTaskPv+0x4c0>)
 80017fa:	f00b fa4b 	bl	800cc94 <rclc_subscription_init_default>
 80017fe:	f8c7 04f0 	str.w	r0, [r7, #1264]	@ 0x4f0
			  &imu_subscriber,
			  &node,
			  ROSIDL_GET_MSG_TYPE_SUPPORT(sensor_msgs, msg, Imu),
			  "/imu_data");
	  if (rc != RCL_RET_OK) printf("Error imu sub init.\n");
 8001802:	f8d7 34f0 	ldr.w	r3, [r7, #1264]	@ 0x4f0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d002      	beq.n	8001810 <_Z16StartDefaultTaskPv+0x1b8>
 800180a:	48c4      	ldr	r0, [pc, #784]	@ (8001b1c <_Z16StartDefaultTaskPv+0x4c4>)
 800180c:	f019 fd96 	bl	801b33c <puts>
	  // initialize message memory
	  rc = !micro_ros_utilities_create_message_memory(ROSIDL_GET_MSG_TYPE_SUPPORT(sensor_msgs, msg, Imu), &imu_data_msg, default_conf);
 8001810:	f00c f978 	bl	800db04 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>
 8001814:	4684      	mov	ip, r0
 8001816:	4cc2      	ldr	r4, [pc, #776]	@ (8001b20 <_Z16StartDefaultTaskPv+0x4c8>)
 8001818:	f507 76b8 	add.w	r6, r7, #368	@ 0x170
 800181c:	466d      	mov	r5, sp
 800181e:	f104 0308 	add.w	r3, r4, #8
 8001822:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001824:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001828:	e894 000c 	ldmia.w	r4, {r2, r3}
 800182c:	4631      	mov	r1, r6
 800182e:	4660      	mov	r0, ip
 8001830:	f009 fed6 	bl	800b5e0 <micro_ros_utilities_create_message_memory>
 8001834:	4603      	mov	r3, r0
 8001836:	f083 0301 	eor.w	r3, r3, #1
 800183a:	b2db      	uxtb	r3, r3
 800183c:	f8c7 34f0 	str.w	r3, [r7, #1264]	@ 0x4f0

	  rc = rclc_executor_add_subscription(
 8001840:	f507 72b8 	add.w	r2, r7, #368	@ 0x170
 8001844:	f507 7135 	add.w	r1, r7, #724	@ 0x2d4
 8001848:	f507 707e 	add.w	r0, r7, #1016	@ 0x3f8
 800184c:	2300      	movs	r3, #0
 800184e:	9300      	str	r3, [sp, #0]
 8001850:	4bb4      	ldr	r3, [pc, #720]	@ (8001b24 <_Z16StartDefaultTaskPv+0x4cc>)
 8001852:	f00a fe9d 	bl	800c590 <rclc_executor_add_subscription>
 8001856:	f8c7 04f0 	str.w	r0, [r7, #1264]	@ 0x4f0
			  &executor, &imu_subscriber,
			  &imu_data_msg, &imu_subscription_callback, ON_NEW_DATA);
	  if (rc != RCL_RET_OK) printf("Error executor add imu sub.\n");
 800185a:	f8d7 34f0 	ldr.w	r3, [r7, #1264]	@ 0x4f0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d002      	beq.n	8001868 <_Z16StartDefaultTaskPv+0x210>
 8001862:	48b1      	ldr	r0, [pc, #708]	@ (8001b28 <_Z16StartDefaultTaskPv+0x4d0>)
 8001864:	f019 fd6a 	bl	801b33c <puts>

	  // CMD Vel sub
	  rc = rclc_subscription_init_default(
 8001868:	f009 ffec 	bl	800b844 <rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity>
 800186c:	4602      	mov	r2, r0
 800186e:	f507 6190 	add.w	r1, r7, #1152	@ 0x480
 8001872:	f507 7036 	add.w	r0, r7, #728	@ 0x2d8
 8001876:	4bad      	ldr	r3, [pc, #692]	@ (8001b2c <_Z16StartDefaultTaskPv+0x4d4>)
 8001878:	f00b fa0c 	bl	800cc94 <rclc_subscription_init_default>
 800187c:	f8c7 04f0 	str.w	r0, [r7, #1264]	@ 0x4f0
			  &cmd_vel_subscriber,
			  &node,
			  ROSIDL_GET_MSG_TYPE_SUPPORT(nereo_interfaces, msg, CommandVelocity),
			  "/nereo_cmd_vel");
	  if (rc != RCL_RET_OK) printf("Error cmdvel sub init.\n");
 8001880:	f8d7 34f0 	ldr.w	r3, [r7, #1264]	@ 0x4f0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d002      	beq.n	800188e <_Z16StartDefaultTaskPv+0x236>
 8001888:	48a9      	ldr	r0, [pc, #676]	@ (8001b30 <_Z16StartDefaultTaskPv+0x4d8>)
 800188a:	f019 fd57 	bl	801b33c <puts>
	  // initialize message memory
	  rc = !micro_ros_utilities_create_message_memory(ROSIDL_GET_MSG_TYPE_SUPPORT(nereo_interfaces, msg, CommandVelocity), &cmd_vel_msg, default_conf);
 800188e:	f009 ffd9 	bl	800b844 <rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity>
 8001892:	4684      	mov	ip, r0
 8001894:	4ca2      	ldr	r4, [pc, #648]	@ (8001b20 <_Z16StartDefaultTaskPv+0x4c8>)
 8001896:	f507 762d 	add.w	r6, r7, #692	@ 0x2b4
 800189a:	466d      	mov	r5, sp
 800189c:	f104 0308 	add.w	r3, r4, #8
 80018a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018a2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80018a6:	e894 000c 	ldmia.w	r4, {r2, r3}
 80018aa:	4631      	mov	r1, r6
 80018ac:	4660      	mov	r0, ip
 80018ae:	f009 fe97 	bl	800b5e0 <micro_ros_utilities_create_message_memory>
 80018b2:	4603      	mov	r3, r0
 80018b4:	f083 0301 	eor.w	r3, r3, #1
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	f8c7 34f0 	str.w	r3, [r7, #1264]	@ 0x4f0

	  rc = rclc_executor_add_subscription(
 80018be:	f507 722d 	add.w	r2, r7, #692	@ 0x2b4
 80018c2:	f507 7136 	add.w	r1, r7, #728	@ 0x2d8
 80018c6:	f507 707e 	add.w	r0, r7, #1016	@ 0x3f8
 80018ca:	2300      	movs	r3, #0
 80018cc:	9300      	str	r3, [sp, #0]
 80018ce:	4b99      	ldr	r3, [pc, #612]	@ (8001b34 <_Z16StartDefaultTaskPv+0x4dc>)
 80018d0:	f00a fe5e 	bl	800c590 <rclc_executor_add_subscription>
 80018d4:	f8c7 04f0 	str.w	r0, [r7, #1264]	@ 0x4f0
			  &executor, &cmd_vel_subscriber,
			  &cmd_vel_msg, &cmd_vel_subscription_callback, ON_NEW_DATA);
	  if (rc != RCL_RET_OK) printf("Error executor add cmdvel sub.\n");
 80018d8:	f8d7 34f0 	ldr.w	r3, [r7, #1264]	@ 0x4f0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d002      	beq.n	80018e6 <_Z16StartDefaultTaskPv+0x28e>
 80018e0:	4895      	ldr	r0, [pc, #596]	@ (8001b38 <_Z16StartDefaultTaskPv+0x4e0>)
 80018e2:	f019 fd2b 	bl	801b33c <puts>

	  // SERVICES
	  rcl_service_t arm_disarm_srv_server;
	  std_srvs__srv__SetBool_Request set_arm_mode_reqin;
	  std_srvs__srv__SetBool_Response set_arm_mode_resout;
	  rc = rclc_service_init_default(
 80018e6:	f00c fb33 	bl	800df50 <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__SetBool>
 80018ea:	4602      	mov	r2, r0
 80018ec:	f507 6190 	add.w	r1, r7, #1152	@ 0x480
 80018f0:	f507 708e 	add.w	r0, r7, #284	@ 0x11c
 80018f4:	4b91      	ldr	r3, [pc, #580]	@ (8001b3c <_Z16StartDefaultTaskPv+0x4e4>)
 80018f6:	f00b f999 	bl	800cc2c <rclc_service_init_default>
 80018fa:	f8c7 04f0 	str.w	r0, [r7, #1264]	@ 0x4f0
			  &arm_disarm_srv_server, &node,
			  ROSIDL_GET_SRV_TYPE_SUPPORT(std_srvs, srv, SetBool), "/set_rov_arm_mode");
	  if (rc != RCL_RET_OK) printf("Error armmode srv init.\n");
 80018fe:	f8d7 34f0 	ldr.w	r3, [r7, #1264]	@ 0x4f0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d002      	beq.n	800190c <_Z16StartDefaultTaskPv+0x2b4>
 8001906:	488e      	ldr	r0, [pc, #568]	@ (8001b40 <_Z16StartDefaultTaskPv+0x4e8>)
 8001908:	f019 fd18 	bl	801b33c <puts>
	  rc = rclc_executor_add_service(
 800190c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001910:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8001914:	f507 718e 	add.w	r1, r7, #284	@ 0x11c
 8001918:	f507 707e 	add.w	r0, r7, #1016	@ 0x3f8
 800191c:	4c89      	ldr	r4, [pc, #548]	@ (8001b44 <_Z16StartDefaultTaskPv+0x4ec>)
 800191e:	9400      	str	r4, [sp, #0]
 8001920:	f00a fe6a 	bl	800c5f8 <rclc_executor_add_service>
 8001924:	f8c7 04f0 	str.w	r0, [r7, #1264]	@ 0x4f0
			  &executor, &arm_disarm_srv_server, &set_arm_mode_reqin,
			  &set_arm_mode_resout, &arm_disarm_service_callback);
	  if (rc != RCL_RET_OK) printf("Error exec add armmode srv.\n");
 8001928:	f8d7 34f0 	ldr.w	r3, [r7, #1264]	@ 0x4f0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d002      	beq.n	8001936 <_Z16StartDefaultTaskPv+0x2de>
 8001930:	4885      	ldr	r0, [pc, #532]	@ (8001b48 <_Z16StartDefaultTaskPv+0x4f0>)
 8001932:	f019 fd03 	bl	801b33c <puts>

	  rcl_service_t nav_mode_srv_server;
	  nereo_interfaces__srv__SetNavigationMode_Request set_navigation_mode_reqin;
	  nereo_interfaces__srv__SetNavigationMode_Response set_navigation_mode_resout;
	  rc = rclc_service_init_default(
 8001936:	f009 ff9d 	bl	800b874 <rosidl_typesupport_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode>
 800193a:	4602      	mov	r2, r0
 800193c:	f507 6190 	add.w	r1, r7, #1152	@ 0x480
 8001940:	f507 7082 	add.w	r0, r7, #260	@ 0x104
 8001944:	4b81      	ldr	r3, [pc, #516]	@ (8001b4c <_Z16StartDefaultTaskPv+0x4f4>)
 8001946:	f00b f971 	bl	800cc2c <rclc_service_init_default>
 800194a:	f8c7 04f0 	str.w	r0, [r7, #1264]	@ 0x4f0
			  &nav_mode_srv_server, &node,
			  ROSIDL_GET_SRV_TYPE_SUPPORT(nereo_interfaces, srv, SetNavigationMode), "/set_rov_navigation_mode");
	  rc = rclc_executor_add_service(
 800194e:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001952:	f507 7280 	add.w	r2, r7, #256	@ 0x100
 8001956:	f507 7182 	add.w	r1, r7, #260	@ 0x104
 800195a:	f507 707e 	add.w	r0, r7, #1016	@ 0x3f8
 800195e:	4c7c      	ldr	r4, [pc, #496]	@ (8001b50 <_Z16StartDefaultTaskPv+0x4f8>)
 8001960:	9400      	str	r4, [sp, #0]
 8001962:	f00a fe49 	bl	800c5f8 <rclc_executor_add_service>
 8001966:	f8c7 04f0 	str.w	r0, [r7, #1264]	@ 0x4f0
			  &executor, &nav_mode_srv_server, &set_navigation_mode_reqin,
			  &set_navigation_mode_resout, &set_nav_mode_service_callback);
	  if (rc != RCL_RET_OK) printf("Error exec addset_nav_mode srv.\n");
 800196a:	f8d7 34f0 	ldr.w	r3, [r7, #1264]	@ 0x4f0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d002      	beq.n	8001978 <_Z16StartDefaultTaskPv+0x320>
 8001972:	4878      	ldr	r0, [pc, #480]	@ (8001b54 <_Z16StartDefaultTaskPv+0x4fc>)
 8001974:	f019 fce2 	bl	801b33c <puts>

	  rc = rclc_executor_add_parameter_server(&executor, &pid_param_server, on_parameter_changed);
	  if (rc != RCL_RET_OK) printf("Error (line %d)\n", __LINE__);*/

	  // END MICRO ROS INIT
	  printf("Micro ROS initialization done.\n");
 8001978:	4877      	ldr	r0, [pc, #476]	@ (8001b58 <_Z16StartDefaultTaskPv+0x500>)
 800197a:	f019 fcdf 	bl	801b33c <puts>

	  uint32_t pwm_output[8] = {1500};
 800197e:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 8001982:	f2a3 431c 	subw	r3, r3, #1052	@ 0x41c
 8001986:	4618      	mov	r0, r3
 8001988:	2320      	movs	r3, #32
 800198a:	461a      	mov	r2, r3
 800198c:	2100      	movs	r1, #0
 800198e:	f019 fd07 	bl	801b3a0 <memset>
 8001992:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 8001996:	f2a3 431c 	subw	r3, r3, #1052	@ 0x41c
 800199a:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800199e:	601a      	str	r2, [r3, #0]
	  arm_status pwm_computation_error = ARM_MATH_SUCCESS;
 80019a0:	2300      	movs	r3, #0
 80019a2:	f887 34ef 	strb.w	r3, [r7, #1263]	@ 0x4ef

	  // PID INIT

	  float kps[PID_NUMBER] = {0, 0, 0, 0};
 80019a6:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 80019aa:	f2a3 432c 	subw	r3, r3, #1068	@ 0x42c
 80019ae:	461a      	mov	r2, r3
 80019b0:	2300      	movs	r3, #0
 80019b2:	6013      	str	r3, [r2, #0]
 80019b4:	6053      	str	r3, [r2, #4]
 80019b6:	6093      	str	r3, [r2, #8]
 80019b8:	60d3      	str	r3, [r2, #12]
	  float kis[PID_NUMBER] = {0, 0, 0, 0};
 80019ba:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 80019be:	f2a3 433c 	subw	r3, r3, #1084	@ 0x43c
 80019c2:	461a      	mov	r2, r3
 80019c4:	2300      	movs	r3, #0
 80019c6:	6013      	str	r3, [r2, #0]
 80019c8:	6053      	str	r3, [r2, #4]
 80019ca:	6093      	str	r3, [r2, #8]
 80019cc:	60d3      	str	r3, [r2, #12]
	  float kds[PID_NUMBER] = {0, 0, 0, 0};
 80019ce:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 80019d2:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 80019d6:	461a      	mov	r2, r3
 80019d8:	2300      	movs	r3, #0
 80019da:	6013      	str	r3, [r2, #0]
 80019dc:	6053      	str	r3, [r2, #4]
 80019de:	6093      	str	r3, [r2, #8]
 80019e0:	60d3      	str	r3, [r2, #12]
	  //init_pids(kps, kis, kds); // sw pids
	  //controllers_init(); // cs controllers

	  while(1)
	  {
		uint32_t time_ms = HAL_GetTick();
 80019e2:	f002 f935 	bl	8003c50 <HAL_GetTick>
 80019e6:	f8c7 04e8 	str.w	r0, [r7, #1256]	@ 0x4e8
		//printf("Free heap: %d.\n", xPortGetFreeHeapSize());
		// Spin executor once to receive requests and update messages
		rc = rclc_executor_spin_some(&executor, 10000000);
 80019ea:	f507 717e 	add.w	r1, r7, #1016	@ 0x3f8
 80019ee:	4a5b      	ldr	r2, [pc, #364]	@ (8001b5c <_Z16StartDefaultTaskPv+0x504>)
 80019f0:	f04f 0300 	mov.w	r3, #0
 80019f4:	4608      	mov	r0, r1
 80019f6:	f00b f825 	bl	800ca44 <rclc_executor_spin_some>
 80019fa:	f8c7 04f0 	str.w	r0, [r7, #1264]	@ 0x4f0

	    if (rov_arm_mode == ROV_ARMED)
 80019fe:	4b58      	ldr	r3, [pc, #352]	@ (8001b60 <_Z16StartDefaultTaskPv+0x508>)
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	bf0c      	ite	eq
 8001a08:	2301      	moveq	r3, #1
 8001a0a:	2300      	movne	r3, #0
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d04a      	beq.n	8001aa8 <_Z16StartDefaultTaskPv+0x450>
	    {
	    	switch (navigation_mode) {
 8001a12:	4b54      	ldr	r3, [pc, #336]	@ (8001b64 <_Z16StartDefaultTaskPv+0x50c>)
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d002      	beq.n	8001a22 <_Z16StartDefaultTaskPv+0x3ca>
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d00c      	beq.n	8001a3a <_Z16StartDefaultTaskPv+0x3e2>
 8001a20:	e01e      	b.n	8001a60 <_Z16StartDefaultTaskPv+0x408>
	    		case NAVIGATION_MODE_MANUAL:
	    			pwm_computation_error = calculate_pwm(cmd_vel_msg.cmd_vel, pwm_output);
 8001a22:	f107 02dc 	add.w	r2, r7, #220	@ 0xdc
 8001a26:	f507 732d 	add.w	r3, r7, #692	@ 0x2b4
 8001a2a:	4611      	mov	r1, r2
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f001 f9e7 	bl	8002e00 <calculate_pwm>
 8001a32:	4603      	mov	r3, r0
 8001a34:	f887 34ef 	strb.w	r3, [r7, #1263]	@ 0x4ef
	    			break;
 8001a38:	e02a      	b.n	8001a90 <_Z16StartDefaultTaskPv+0x438>
	    		case NAVIGATION_MODE_STABILIZE_FULL:
	    			pwm_computation_error = calculate_pwm_with_pid(cmd_vel_msg.cmd_vel, pwm_output,
 8001a3a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001a3e:	f103 0418 	add.w	r4, r3, #24
 8001a42:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8001a46:	f103 0218 	add.w	r2, r3, #24
 8001a4a:	f107 01dc 	add.w	r1, r7, #220	@ 0xdc
 8001a4e:	f507 702d 	add.w	r0, r7, #692	@ 0x2b4
 8001a52:	4623      	mov	r3, r4
 8001a54:	f001 fdf0 	bl	8003638 <calculate_pwm_with_pid>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	f887 34ef 	strb.w	r3, [r7, #1263]	@ 0x4ef
	    					(Quaternion *)&imu_data_msg.orientation,
							(float *)&fluid_pressure.fluid_pressure);
	    			break;
 8001a5e:	e017      	b.n	8001a90 <_Z16StartDefaultTaskPv+0x438>
	    			//pwm_computation_error = calculate_pwm_cs_controller(cmd_vel_msg.cmd_vel, pwm_output,
	    			//		(Quaternion *)&imu_data_msg.orientation,
					//		(float *)&fluid_pressure.fluid_pressure);
	    			//break;
	    		default:
	    			for(uint8_t i = 0; i < 8; i++) pwm_output[i] = 1500;
 8001a60:	2300      	movs	r3, #0
 8001a62:	f887 34f7 	strb.w	r3, [r7, #1271]	@ 0x4f7
 8001a66:	e00e      	b.n	8001a86 <_Z16StartDefaultTaskPv+0x42e>
 8001a68:	f897 24f7 	ldrb.w	r2, [r7, #1271]	@ 0x4f7
 8001a6c:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 8001a70:	f2a3 431c 	subw	r3, r3, #1052	@ 0x41c
 8001a74:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 8001a78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001a7c:	f897 34f7 	ldrb.w	r3, [r7, #1271]	@ 0x4f7
 8001a80:	3301      	adds	r3, #1
 8001a82:	f887 34f7 	strb.w	r3, [r7, #1271]	@ 0x4f7
 8001a86:	f897 34f7 	ldrb.w	r3, [r7, #1271]	@ 0x4f7
 8001a8a:	2b07      	cmp	r3, #7
 8001a8c:	d9ec      	bls.n	8001a68 <_Z16StartDefaultTaskPv+0x410>
	    			break;
 8001a8e:	bf00      	nop
	    	}
	    	clamp_pwm_output(pwm_output, 8);
 8001a90:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001a94:	2108      	movs	r1, #8
 8001a96:	4618      	mov	r0, r3
 8001a98:	f000 f8f0 	bl	8001c7c <clamp_pwm_output>
	    	set_pwms(pwm_output);
 8001a9c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f000 f87d 	bl	8001ba0 <set_pwms>
 8001aa6:	e001      	b.n	8001aac <_Z16StartDefaultTaskPv+0x454>
	    } else set_pwm_idle();
 8001aa8:	f000 f8ba 	bl	8001c20 <set_pwm_idle>

	    for(uint8_t i = 0; i < 8; i++) thruster_status_msg.thruster_pwms[i] = pwm_output[i];
 8001aac:	2300      	movs	r3, #0
 8001aae:	f887 34f6 	strb.w	r3, [r7, #1270]	@ 0x4f6
 8001ab2:	e015      	b.n	8001ae0 <_Z16StartDefaultTaskPv+0x488>
 8001ab4:	f897 24f6 	ldrb.w	r2, [r7, #1270]	@ 0x4f6
 8001ab8:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 8001abc:	f2a3 431c 	subw	r3, r3, #1052	@ 0x41c
 8001ac0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ac4:	f897 24f6 	ldrb.w	r2, [r7, #1270]	@ 0x4f6
 8001ac8:	b299      	uxth	r1, r3
 8001aca:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 8001ace:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8001ad2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8001ad6:	f897 34f6 	ldrb.w	r3, [r7, #1270]	@ 0x4f6
 8001ada:	3301      	adds	r3, #1
 8001adc:	f887 34f6 	strb.w	r3, [r7, #1270]	@ 0x4f6
 8001ae0:	f897 34f6 	ldrb.w	r3, [r7, #1270]	@ 0x4f6
 8001ae4:	2b07      	cmp	r3, #7
 8001ae6:	d9e5      	bls.n	8001ab4 <_Z16StartDefaultTaskPv+0x45c>
	    rc = rcl_publish(&thruster_status_publisher, &thruster_status_msg, NULL);
 8001ae8:	f507 7137 	add.w	r1, r7, #732	@ 0x2dc
 8001aec:	f507 733b 	add.w	r3, r7, #748	@ 0x2ec
 8001af0:	2200      	movs	r2, #0
 8001af2:	4618      	mov	r0, r3
 8001af4:	f00a f942 	bl	800bd7c <rcl_publish>
 8001af8:	f8c7 04f0 	str.w	r0, [r7, #1264]	@ 0x4f0
	    if(rc!=RCL_RET_OK) printf("Error publishing (line %d)\n", __LINE__);
 8001afc:	f8d7 34f0 	ldr.w	r3, [r7, #1264]	@ 0x4f0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d033      	beq.n	8001b6c <_Z16StartDefaultTaskPv+0x514>
 8001b04:	f240 1147 	movw	r1, #327	@ 0x147
 8001b08:	4817      	ldr	r0, [pc, #92]	@ (8001b68 <_Z16StartDefaultTaskPv+0x510>)
 8001b0a:	f019 fbaf 	bl	801b26c <iprintf>
 8001b0e:	e030      	b.n	8001b72 <_Z16StartDefaultTaskPv+0x51a>
 8001b10:	20008860 	.word	0x20008860
 8001b14:	0801c3f4 	.word	0x0801c3f4
 8001b18:	0801c408 	.word	0x0801c408
 8001b1c:	0801c414 	.word	0x0801c414
 8001b20:	20008848 	.word	0x20008848
 8001b24:	08001ced 	.word	0x08001ced
 8001b28:	0801c428 	.word	0x0801c428
 8001b2c:	0801c444 	.word	0x0801c444
 8001b30:	0801c454 	.word	0x0801c454
 8001b34:	08001d09 	.word	0x08001d09
 8001b38:	0801c46c 	.word	0x0801c46c
 8001b3c:	0801c48c 	.word	0x0801c48c
 8001b40:	0801c4a0 	.word	0x0801c4a0
 8001b44:	08001d25 	.word	0x08001d25
 8001b48:	0801c4b8 	.word	0x0801c4b8
 8001b4c:	0801c4d4 	.word	0x0801c4d4
 8001b50:	08001d8d 	.word	0x08001d8d
 8001b54:	0801c4f0 	.word	0x0801c4f0
 8001b58:	0801c510 	.word	0x0801c510
 8001b5c:	00989680 	.word	0x00989680
 8001b60:	2000883c 	.word	0x2000883c
 8001b64:	2000883d 	.word	0x2000883d
 8001b68:	0801c530 	.word	0x0801c530
	    else HAL_IWDG_Refresh(&hiwdg);
 8001b6c:	480b      	ldr	r0, [pc, #44]	@ (8001b9c <_Z16StartDefaultTaskPv+0x544>)
 8001b6e:	f002 ff66 	bl	8004a3e <HAL_IWDG_Refresh>

	    uint32_t elapsed_time = HAL_GetTick() - time_ms;
 8001b72:	f002 f86d 	bl	8003c50 <HAL_GetTick>
 8001b76:	4602      	mov	r2, r0
 8001b78:	f8d7 34e8 	ldr.w	r3, [r7, #1256]	@ 0x4e8
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	f8c7 34e4 	str.w	r3, [r7, #1252]	@ 0x4e4
	    if (elapsed_time < TS_DEFAULT_TASK_MS) osDelay(TS_DEFAULT_TASK_MS - elapsed_time);
 8001b82:	f8d7 34e4 	ldr.w	r3, [r7, #1252]	@ 0x4e4
 8001b86:	2b18      	cmp	r3, #24
 8001b88:	f63f af2b 	bhi.w	80019e2 <_Z16StartDefaultTaskPv+0x38a>
 8001b8c:	f8d7 34e4 	ldr.w	r3, [r7, #1252]	@ 0x4e4
 8001b90:	f1c3 0319 	rsb	r3, r3, #25
 8001b94:	4618      	mov	r0, r3
 8001b96:	f006 f883 	bl	8007ca0 <osDelay>
	  }
 8001b9a:	e722      	b.n	80019e2 <_Z16StartDefaultTaskPv+0x38a>
 8001b9c:	20008860 	.word	0x20008860

08001ba0 <set_pwms>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void inline set_pwms(uint32_t pwms[8])
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
	// HERE THE PWM Channel - Thruster relation is defined
	TIM3 -> CCR3 = pwms[0] + OPTOCOUPLER_INTRODUCED_OFFSET_uS;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a1b      	ldr	r2, [pc, #108]	@ (8001c1c <set_pwms+0x7c>)
 8001bae:	3332      	adds	r3, #50	@ 0x32
 8001bb0:	63d3      	str	r3, [r2, #60]	@ 0x3c
	TIM2 -> CCR1 = pwms[1] + OPTOCOUPLER_INTRODUCED_OFFSET_uS;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	3304      	adds	r3, #4
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001bbc:	3332      	adds	r3, #50	@ 0x32
 8001bbe:	6353      	str	r3, [r2, #52]	@ 0x34
	TIM2 -> CCR4 = pwms[2] + OPTOCOUPLER_INTRODUCED_OFFSET_uS;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	3308      	adds	r3, #8
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001bca:	3332      	adds	r3, #50	@ 0x32
 8001bcc:	6413      	str	r3, [r2, #64]	@ 0x40
	TIM3 -> CCR2 = pwms[3] + OPTOCOUPLER_INTRODUCED_OFFSET_uS;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	330c      	adds	r3, #12
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a11      	ldr	r2, [pc, #68]	@ (8001c1c <set_pwms+0x7c>)
 8001bd6:	3332      	adds	r3, #50	@ 0x32
 8001bd8:	6393      	str	r3, [r2, #56]	@ 0x38
	// VERTICAL THRUSTERS
	TIM2 -> CCR2 = pwms[4] + OPTOCOUPLER_INTRODUCED_OFFSET_uS;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	3310      	adds	r3, #16
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001be4:	3332      	adds	r3, #50	@ 0x32
 8001be6:	6393      	str	r3, [r2, #56]	@ 0x38
	TIM2 -> CCR3 = pwms[5] + OPTOCOUPLER_INTRODUCED_OFFSET_uS;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	3314      	adds	r3, #20
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001bf2:	3332      	adds	r3, #50	@ 0x32
 8001bf4:	63d3      	str	r3, [r2, #60]	@ 0x3c
	TIM3 -> CCR4 = pwms[6] + OPTOCOUPLER_INTRODUCED_OFFSET_uS;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	3318      	adds	r3, #24
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a07      	ldr	r2, [pc, #28]	@ (8001c1c <set_pwms+0x7c>)
 8001bfe:	3332      	adds	r3, #50	@ 0x32
 8001c00:	6413      	str	r3, [r2, #64]	@ 0x40
	TIM3 -> CCR1 = pwms[7] + OPTOCOUPLER_INTRODUCED_OFFSET_uS;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	331c      	adds	r3, #28
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a04      	ldr	r2, [pc, #16]	@ (8001c1c <set_pwms+0x7c>)
 8001c0a:	3332      	adds	r3, #50	@ 0x32
 8001c0c:	6353      	str	r3, [r2, #52]	@ 0x34
}
 8001c0e:	bf00      	nop
 8001c10:	370c      	adds	r7, #12
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	40000400 	.word	0x40000400

08001c20 <set_pwm_idle>:
void inline set_pwm_idle()
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
	TIM2 -> CCR1 = PWM_IDLE + OPTOCOUPLER_INTRODUCED_OFFSET_uS;
 8001c24:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001c28:	f240 620e 	movw	r2, #1550	@ 0x60e
 8001c2c:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM2 -> CCR2 = PWM_IDLE + OPTOCOUPLER_INTRODUCED_OFFSET_uS;
 8001c2e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001c32:	f240 620e 	movw	r2, #1550	@ 0x60e
 8001c36:	639a      	str	r2, [r3, #56]	@ 0x38
	TIM2 -> CCR3 = PWM_IDLE + OPTOCOUPLER_INTRODUCED_OFFSET_uS;
 8001c38:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001c3c:	f240 620e 	movw	r2, #1550	@ 0x60e
 8001c40:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM2 -> CCR4 = PWM_IDLE + OPTOCOUPLER_INTRODUCED_OFFSET_uS;
 8001c42:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001c46:	f240 620e 	movw	r2, #1550	@ 0x60e
 8001c4a:	641a      	str	r2, [r3, #64]	@ 0x40
	TIM3 -> CCR1 = PWM_IDLE + OPTOCOUPLER_INTRODUCED_OFFSET_uS;
 8001c4c:	4b0a      	ldr	r3, [pc, #40]	@ (8001c78 <set_pwm_idle+0x58>)
 8001c4e:	f240 620e 	movw	r2, #1550	@ 0x60e
 8001c52:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM3 -> CCR2 = PWM_IDLE + OPTOCOUPLER_INTRODUCED_OFFSET_uS;
 8001c54:	4b08      	ldr	r3, [pc, #32]	@ (8001c78 <set_pwm_idle+0x58>)
 8001c56:	f240 620e 	movw	r2, #1550	@ 0x60e
 8001c5a:	639a      	str	r2, [r3, #56]	@ 0x38
	TIM3 -> CCR3 = PWM_IDLE + OPTOCOUPLER_INTRODUCED_OFFSET_uS;
 8001c5c:	4b06      	ldr	r3, [pc, #24]	@ (8001c78 <set_pwm_idle+0x58>)
 8001c5e:	f240 620e 	movw	r2, #1550	@ 0x60e
 8001c62:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM3 -> CCR4 = PWM_IDLE + OPTOCOUPLER_INTRODUCED_OFFSET_uS;
 8001c64:	4b04      	ldr	r3, [pc, #16]	@ (8001c78 <set_pwm_idle+0x58>)
 8001c66:	f240 620e 	movw	r2, #1550	@ 0x60e
 8001c6a:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001c6c:	bf00      	nop
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	40000400 	.word	0x40000400

08001c7c <clamp_pwm_output>:
void clamp_pwm_output(uint32_t pwms[], int N) {
 8001c7c:	b480      	push	{r7}
 8001c7e:	b085      	sub	sp, #20
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	6039      	str	r1, [r7, #0]
	for(uint16_t i = 0; i < N; i++) {
 8001c86:	2300      	movs	r3, #0
 8001c88:	81fb      	strh	r3, [r7, #14]
 8001c8a:	e023      	b.n	8001cd4 <clamp_pwm_output+0x58>
		if (pwms[i] < PWM_MIN)
 8001c8c:	89fb      	ldrh	r3, [r7, #14]
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	687a      	ldr	r2, [r7, #4]
 8001c92:	4413      	add	r3, r2
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f240 5231 	movw	r2, #1329	@ 0x531
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d807      	bhi.n	8001cae <clamp_pwm_output+0x32>
			pwms[i] = PWM_MIN;
 8001c9e:	89fb      	ldrh	r3, [r7, #14]
 8001ca0:	009b      	lsls	r3, r3, #2
 8001ca2:	687a      	ldr	r2, [r7, #4]
 8001ca4:	4413      	add	r3, r2
 8001ca6:	f240 5232 	movw	r2, #1330	@ 0x532
 8001caa:	601a      	str	r2, [r3, #0]
 8001cac:	e00f      	b.n	8001cce <clamp_pwm_output+0x52>
		else if (pwms[i] > PWM_MAX)
 8001cae:	89fb      	ldrh	r3, [r7, #14]
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	4413      	add	r3, r2
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f240 6286 	movw	r2, #1670	@ 0x686
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d906      	bls.n	8001cce <clamp_pwm_output+0x52>
			pwms[i] = PWM_MAX;
 8001cc0:	89fb      	ldrh	r3, [r7, #14]
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	687a      	ldr	r2, [r7, #4]
 8001cc6:	4413      	add	r3, r2
 8001cc8:	f240 6286 	movw	r2, #1670	@ 0x686
 8001ccc:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < N; i++) {
 8001cce:	89fb      	ldrh	r3, [r7, #14]
 8001cd0:	3301      	adds	r3, #1
 8001cd2:	81fb      	strh	r3, [r7, #14]
 8001cd4:	89fb      	ldrh	r3, [r7, #14]
 8001cd6:	683a      	ldr	r2, [r7, #0]
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	dcd7      	bgt.n	8001c8c <clamp_pwm_output+0x10>
	}
}
 8001cdc:	bf00      	nop
 8001cde:	bf00      	nop
 8001ce0:	3714      	adds	r7, #20
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
	...

08001cec <imu_subscription_callback>:

    pid->A0 = pid->Kp + pid->Ki + pid->Kd;
    pid->A1 = -pid->Kp - 2 * pid->Kd;
    pid->A2 = pid->Kd;
}
void imu_subscription_callback(const void * msgin) {
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
	HAL_IWDG_Refresh(&hiwdg);
 8001cf4:	4803      	ldr	r0, [pc, #12]	@ (8001d04 <imu_subscription_callback+0x18>)
 8001cf6:	f002 fea2 	bl	8004a3e <HAL_IWDG_Refresh>
}
 8001cfa:	bf00      	nop
 8001cfc:	3708      	adds	r7, #8
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	20008860 	.word	0x20008860

08001d08 <cmd_vel_subscription_callback>:
void cmd_vel_subscription_callback (const void * msgin) {
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
	HAL_IWDG_Refresh(&hiwdg);
 8001d10:	4803      	ldr	r0, [pc, #12]	@ (8001d20 <cmd_vel_subscription_callback+0x18>)
 8001d12:	f002 fe94 	bl	8004a3e <HAL_IWDG_Refresh>
}
 8001d16:	bf00      	nop
 8001d18:	3708      	adds	r7, #8
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	20008860 	.word	0x20008860

08001d24 <arm_disarm_service_callback>:
void arm_disarm_service_callback(const void * request_msg, void * response_msg) {
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b084      	sub	sp, #16
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	6039      	str	r1, [r7, #0]
	HAL_IWDG_Refresh(&hiwdg);
 8001d2e:	4813      	ldr	r0, [pc, #76]	@ (8001d7c <arm_disarm_service_callback+0x58>)
 8001d30:	f002 fe85 	bl	8004a3e <HAL_IWDG_Refresh>
	std_srvs__srv__SetBool_Request * req_in = (std_srvs__srv__SetBool_Request *) request_msg;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	60fb      	str	r3, [r7, #12]
	std_srvs__srv__SetBool_Response * res_in = (std_srvs__srv__SetBool_Response *) response_msg;
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	60bb      	str	r3, [r7, #8]
	rov_arm_mode = req_in->data ? ROV_ARMED : ROV_DISARMED;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d001      	beq.n	8001d48 <arm_disarm_service_callback+0x24>
 8001d44:	2201      	movs	r2, #1
 8001d46:	e000      	b.n	8001d4a <arm_disarm_service_callback+0x26>
 8001d48:	2200      	movs	r2, #0
 8001d4a:	4b0d      	ldr	r3, [pc, #52]	@ (8001d80 <arm_disarm_service_callback+0x5c>)
 8001d4c:	701a      	strb	r2, [r3, #0]
	printf("%d: arm mode.\n", (int)rov_arm_mode);
 8001d4e:	4b0c      	ldr	r3, [pc, #48]	@ (8001d80 <arm_disarm_service_callback+0x5c>)
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	4619      	mov	r1, r3
 8001d56:	480b      	ldr	r0, [pc, #44]	@ (8001d84 <arm_disarm_service_callback+0x60>)
 8001d58:	f019 fa88 	bl	801b26c <iprintf>
	res_in->success = true;
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	2201      	movs	r2, #1
 8001d60:	701a      	strb	r2, [r3, #0]
	res_in->message.capacity = 2;
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	2202      	movs	r2, #2
 8001d66:	60da      	str	r2, [r3, #12]
	res_in->message.size = strlen(empty_string);
 8001d68:	2200      	movs	r2, #0
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	609a      	str	r2, [r3, #8]
	res_in->message.data = empty_string;
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	4a05      	ldr	r2, [pc, #20]	@ (8001d88 <arm_disarm_service_callback+0x64>)
 8001d72:	605a      	str	r2, [r3, #4]
}
 8001d74:	bf00      	nop
 8001d76:	3710      	adds	r7, #16
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	20008860 	.word	0x20008860
 8001d80:	2000883c 	.word	0x2000883c
 8001d84:	0801c54c 	.word	0x0801c54c
 8001d88:	20008840 	.word	0x20008840

08001d8c <set_nav_mode_service_callback>:
void set_nav_mode_service_callback(const void * request_msg, void * response_msg) {
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	6039      	str	r1, [r7, #0]
	HAL_IWDG_Refresh(&hiwdg);
 8001d96:	480b      	ldr	r0, [pc, #44]	@ (8001dc4 <set_nav_mode_service_callback+0x38>)
 8001d98:	f002 fe51 	bl	8004a3e <HAL_IWDG_Refresh>
	nereo_interfaces__srv__SetNavigationMode_Request * req_in = (nereo_interfaces__srv__SetNavigationMode_Request *) request_msg;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	60fb      	str	r3, [r7, #12]
	nereo_interfaces__srv__SetNavigationMode_Response * res_in = (nereo_interfaces__srv__SetNavigationMode_Response *) response_msg;
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	60bb      	str	r3, [r7, #8]
	navigation_mode = (NavigationModes)req_in->navigation_mode;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	781a      	ldrb	r2, [r3, #0]
 8001da8:	4b07      	ldr	r3, [pc, #28]	@ (8001dc8 <set_nav_mode_service_callback+0x3c>)
 8001daa:	701a      	strb	r2, [r3, #0]
	res_in->mode_after_set = navigation_mode;
 8001dac:	4b06      	ldr	r3, [pc, #24]	@ (8001dc8 <set_nav_mode_service_callback+0x3c>)
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	b2da      	uxtb	r2, r3
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	705a      	strb	r2, [r3, #1]
	res_in->success = true;
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	2201      	movs	r2, #1
 8001dba:	701a      	strb	r2, [r3, #0]
}
 8001dbc:	bf00      	nop
 8001dbe:	3710      	adds	r7, #16
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	20008860 	.word	0x20008860
 8001dc8:	2000883d 	.word	0x2000883d

08001dcc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b08a      	sub	sp, #40	@ 0x28
 8001dd0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd2:	f107 0314 	add.w	r3, r7, #20
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	601a      	str	r2, [r3, #0]
 8001dda:	605a      	str	r2, [r3, #4]
 8001ddc:	609a      	str	r2, [r3, #8]
 8001dde:	60da      	str	r2, [r3, #12]
 8001de0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001de2:	2300      	movs	r3, #0
 8001de4:	613b      	str	r3, [r7, #16]
 8001de6:	4b2d      	ldr	r3, [pc, #180]	@ (8001e9c <MX_GPIO_Init+0xd0>)
 8001de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dea:	4a2c      	ldr	r2, [pc, #176]	@ (8001e9c <MX_GPIO_Init+0xd0>)
 8001dec:	f043 0310 	orr.w	r3, r3, #16
 8001df0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001df2:	4b2a      	ldr	r3, [pc, #168]	@ (8001e9c <MX_GPIO_Init+0xd0>)
 8001df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001df6:	f003 0310 	and.w	r3, r3, #16
 8001dfa:	613b      	str	r3, [r7, #16]
 8001dfc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001dfe:	2300      	movs	r3, #0
 8001e00:	60fb      	str	r3, [r7, #12]
 8001e02:	4b26      	ldr	r3, [pc, #152]	@ (8001e9c <MX_GPIO_Init+0xd0>)
 8001e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e06:	4a25      	ldr	r2, [pc, #148]	@ (8001e9c <MX_GPIO_Init+0xd0>)
 8001e08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e0e:	4b23      	ldr	r3, [pc, #140]	@ (8001e9c <MX_GPIO_Init+0xd0>)
 8001e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e16:	60fb      	str	r3, [r7, #12]
 8001e18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	60bb      	str	r3, [r7, #8]
 8001e1e:	4b1f      	ldr	r3, [pc, #124]	@ (8001e9c <MX_GPIO_Init+0xd0>)
 8001e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e22:	4a1e      	ldr	r2, [pc, #120]	@ (8001e9c <MX_GPIO_Init+0xd0>)
 8001e24:	f043 0301 	orr.w	r3, r3, #1
 8001e28:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e2a:	4b1c      	ldr	r3, [pc, #112]	@ (8001e9c <MX_GPIO_Init+0xd0>)
 8001e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e2e:	f003 0301 	and.w	r3, r3, #1
 8001e32:	60bb      	str	r3, [r7, #8]
 8001e34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e36:	2300      	movs	r3, #0
 8001e38:	607b      	str	r3, [r7, #4]
 8001e3a:	4b18      	ldr	r3, [pc, #96]	@ (8001e9c <MX_GPIO_Init+0xd0>)
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e3e:	4a17      	ldr	r2, [pc, #92]	@ (8001e9c <MX_GPIO_Init+0xd0>)
 8001e40:	f043 0302 	orr.w	r3, r3, #2
 8001e44:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e46:	4b15      	ldr	r3, [pc, #84]	@ (8001e9c <MX_GPIO_Init+0xd0>)
 8001e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e4a:	f003 0302 	and.w	r3, r3, #2
 8001e4e:	607b      	str	r3, [r7, #4]
 8001e50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e52:	2300      	movs	r3, #0
 8001e54:	603b      	str	r3, [r7, #0]
 8001e56:	4b11      	ldr	r3, [pc, #68]	@ (8001e9c <MX_GPIO_Init+0xd0>)
 8001e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e5a:	4a10      	ldr	r2, [pc, #64]	@ (8001e9c <MX_GPIO_Init+0xd0>)
 8001e5c:	f043 0304 	orr.w	r3, r3, #4
 8001e60:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e62:	4b0e      	ldr	r3, [pc, #56]	@ (8001e9c <MX_GPIO_Init+0xd0>)
 8001e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e66:	f003 0304 	and.w	r3, r3, #4
 8001e6a:	603b      	str	r3, [r7, #0]
 8001e6c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_RESET);
 8001e6e:	2200      	movs	r2, #0
 8001e70:	2104      	movs	r1, #4
 8001e72:	480b      	ldr	r0, [pc, #44]	@ (8001ea0 <MX_GPIO_Init+0xd4>)
 8001e74:	f002 fd88 	bl	8004988 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001e78:	2304      	movs	r3, #4
 8001e7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e80:	2300      	movs	r3, #0
 8001e82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e84:	2300      	movs	r3, #0
 8001e86:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e88:	f107 0314 	add.w	r3, r7, #20
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	4804      	ldr	r0, [pc, #16]	@ (8001ea0 <MX_GPIO_Init+0xd4>)
 8001e90:	f002 fbce 	bl	8004630 <HAL_GPIO_Init>

}
 8001e94:	bf00      	nop
 8001e96:	3728      	adds	r7, #40	@ 0x28
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	40023800 	.word	0x40023800
 8001ea0:	40021000 	.word	0x40021000

08001ea4 <linear_interpolation>:
 * @param output_min The minimum value of the output range.
 * @param output_max The maximum value of the output range.
 * @return The interpolated output value.
 */
float linear_interpolation(float input_value, float input_min, float input_max, float output_min, float output_max)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b087      	sub	sp, #28
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	ed87 0a05 	vstr	s0, [r7, #20]
 8001eae:	edc7 0a04 	vstr	s1, [r7, #16]
 8001eb2:	ed87 1a03 	vstr	s2, [r7, #12]
 8001eb6:	edc7 1a02 	vstr	s3, [r7, #8]
 8001eba:	ed87 2a01 	vstr	s4, [r7, #4]
    return ((output_max - output_min) / (input_max - input_min)) * (input_value - input_min) + output_min;
 8001ebe:	ed97 7a01 	vldr	s14, [r7, #4]
 8001ec2:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ec6:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001eca:	ed97 7a03 	vldr	s14, [r7, #12]
 8001ece:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ed2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ed6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001eda:	edd7 6a05 	vldr	s13, [r7, #20]
 8001ede:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ee2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001ee6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001eea:	edd7 7a02 	vldr	s15, [r7, #8]
 8001eee:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8001ef2:	eeb0 0a67 	vmov.f32	s0, s15
 8001ef6:	371c      	adds	r7, #28
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <normalize_vector>:
 * @param input_array The input array of floating-point values to be normalized.
 * @param output_array The output array where the normalized values will be stored.
 * @param size The number of elements in the input and output arrays.
 */
void normalize_vector(const float *input_array, float *output_array, uint8_t size)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b089      	sub	sp, #36	@ 0x24
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	60f8      	str	r0, [r7, #12]
 8001f08:	60b9      	str	r1, [r7, #8]
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	71fb      	strb	r3, [r7, #7]
    float max_abs_value = 0.0f;
 8001f0e:	f04f 0300 	mov.w	r3, #0
 8001f12:	61fb      	str	r3, [r7, #28]
    for (uint8_t i = 0; i < size; i++)
 8001f14:	2300      	movs	r3, #0
 8001f16:	76fb      	strb	r3, [r7, #27]
 8001f18:	e017      	b.n	8001f4a <normalize_vector+0x4a>
    {
        float abs_value = fabsf(input_array[i]);
 8001f1a:	7efb      	ldrb	r3, [r7, #27]
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	68fa      	ldr	r2, [r7, #12]
 8001f20:	4413      	add	r3, r2
 8001f22:	edd3 7a00 	vldr	s15, [r3]
 8001f26:	eef0 7ae7 	vabs.f32	s15, s15
 8001f2a:	edc7 7a05 	vstr	s15, [r7, #20]
        if (abs_value > max_abs_value)
 8001f2e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001f32:	edd7 7a07 	vldr	s15, [r7, #28]
 8001f36:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f3e:	dd01      	ble.n	8001f44 <normalize_vector+0x44>
        {
            max_abs_value = abs_value;
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	61fb      	str	r3, [r7, #28]
    for (uint8_t i = 0; i < size; i++)
 8001f44:	7efb      	ldrb	r3, [r7, #27]
 8001f46:	3301      	adds	r3, #1
 8001f48:	76fb      	strb	r3, [r7, #27]
 8001f4a:	7efa      	ldrb	r2, [r7, #27]
 8001f4c:	79fb      	ldrb	r3, [r7, #7]
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d3e3      	bcc.n	8001f1a <normalize_vector+0x1a>
        }
    }
    for (uint8_t i = 0; i < size; i++) output_array[i] = input_array[i];
 8001f52:	2300      	movs	r3, #0
 8001f54:	76bb      	strb	r3, [r7, #26]
 8001f56:	e00c      	b.n	8001f72 <normalize_vector+0x72>
 8001f58:	7ebb      	ldrb	r3, [r7, #26]
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	68fa      	ldr	r2, [r7, #12]
 8001f5e:	441a      	add	r2, r3
 8001f60:	7ebb      	ldrb	r3, [r7, #26]
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	68b9      	ldr	r1, [r7, #8]
 8001f66:	440b      	add	r3, r1
 8001f68:	6812      	ldr	r2, [r2, #0]
 8001f6a:	601a      	str	r2, [r3, #0]
 8001f6c:	7ebb      	ldrb	r3, [r7, #26]
 8001f6e:	3301      	adds	r3, #1
 8001f70:	76bb      	strb	r3, [r7, #26]
 8001f72:	7eba      	ldrb	r2, [r7, #26]
 8001f74:	79fb      	ldrb	r3, [r7, #7]
 8001f76:	429a      	cmp	r2, r3
 8001f78:	d3ee      	bcc.n	8001f58 <normalize_vector+0x58>
	if (max_abs_value > 1) {
 8001f7a:	edd7 7a07 	vldr	s15, [r7, #28]
 8001f7e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001f82:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f8a:	dc00      	bgt.n	8001f8e <normalize_vector+0x8e>
		for (uint8_t i = 0; i < size; i++) {
			output_array[i] = input_array[i] / max_abs_value;
		}
	}
}
 8001f8c:	e019      	b.n	8001fc2 <normalize_vector+0xc2>
		for (uint8_t i = 0; i < size; i++) {
 8001f8e:	2300      	movs	r3, #0
 8001f90:	767b      	strb	r3, [r7, #25]
 8001f92:	e012      	b.n	8001fba <normalize_vector+0xba>
			output_array[i] = input_array[i] / max_abs_value;
 8001f94:	7e7b      	ldrb	r3, [r7, #25]
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	68fa      	ldr	r2, [r7, #12]
 8001f9a:	4413      	add	r3, r2
 8001f9c:	edd3 6a00 	vldr	s13, [r3]
 8001fa0:	7e7b      	ldrb	r3, [r7, #25]
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	68ba      	ldr	r2, [r7, #8]
 8001fa6:	4413      	add	r3, r2
 8001fa8:	ed97 7a07 	vldr	s14, [r7, #28]
 8001fac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fb0:	edc3 7a00 	vstr	s15, [r3]
		for (uint8_t i = 0; i < size; i++) {
 8001fb4:	7e7b      	ldrb	r3, [r7, #25]
 8001fb6:	3301      	adds	r3, #1
 8001fb8:	767b      	strb	r3, [r7, #25]
 8001fba:	7e7a      	ldrb	r2, [r7, #25]
 8001fbc:	79fb      	ldrb	r3, [r7, #7]
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	d3e8      	bcc.n	8001f94 <normalize_vector+0x94>
}
 8001fc2:	bf00      	nop
 8001fc4:	3724      	adds	r7, #36	@ 0x24
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
	...

08001fd0 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8001fd4:	4b09      	ldr	r3, [pc, #36]	@ (8001ffc <MX_IWDG_Init+0x2c>)
 8001fd6:	4a0a      	ldr	r2, [pc, #40]	@ (8002000 <MX_IWDG_Init+0x30>)
 8001fd8:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 8001fda:	4b08      	ldr	r3, [pc, #32]	@ (8001ffc <MX_IWDG_Init+0x2c>)
 8001fdc:	2204      	movs	r2, #4
 8001fde:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 2500-1;
 8001fe0:	4b06      	ldr	r3, [pc, #24]	@ (8001ffc <MX_IWDG_Init+0x2c>)
 8001fe2:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 8001fe6:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8001fe8:	4804      	ldr	r0, [pc, #16]	@ (8001ffc <MX_IWDG_Init+0x2c>)
 8001fea:	f002 fce6 	bl	80049ba <HAL_IWDG_Init>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d001      	beq.n	8001ff8 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8001ff4:	f000 f926 	bl	8002244 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8001ff8:	bf00      	nop
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	20008860 	.word	0x20008860
 8002000:	40003000 	.word	0x40003000

08002004 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800200c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8002010:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8002014:	f003 0301 	and.w	r3, r3, #1
 8002018:	2b00      	cmp	r3, #0
 800201a:	d013      	beq.n	8002044 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800201c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8002020:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8002024:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002028:	2b00      	cmp	r3, #0
 800202a:	d00b      	beq.n	8002044 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800202c:	e000      	b.n	8002030 <ITM_SendChar+0x2c>
    {
      __NOP();
 800202e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8002030:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d0f9      	beq.n	800202e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800203a:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	b2d2      	uxtb	r2, r2
 8002042:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8002044:	687b      	ldr	r3, [r7, #4]
}
 8002046:	4618      	mov	r0, r3
 8002048:	370c      	adds	r7, #12
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
	...

08002054 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002058:	f001 fdc4 	bl	8003be4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800205c:	f000 f850 	bl	8002100 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002060:	f7ff feb4 	bl	8001dcc <MX_GPIO_Init>
  MX_DMA_Init();
 8002064:	f7ff fa10 	bl	8001488 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8002068:	f000 fde8 	bl	8002c3c <MX_USART1_UART_Init>
  MX_TIM2_Init();
 800206c:	f000 fbf4 	bl	8002858 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002070:	f000 fc6c 	bl	800294c <MX_TIM3_Init>
  MX_IWDG_Init();
 8002074:	f7ff ffac 	bl	8001fd0 <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */
  printf("Printf debugging is working! Yay!\n");
 8002078:	481c      	ldr	r0, [pc, #112]	@ (80020ec <main+0x98>)
 800207a:	f019 f95f 	bl	801b33c <puts>
  HAL_TIM_Base_Start(&htim2);
 800207e:	481c      	ldr	r0, [pc, #112]	@ (80020f0 <main+0x9c>)
 8002080:	f003 fa4e 	bl	8005520 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8002084:	2100      	movs	r1, #0
 8002086:	481a      	ldr	r0, [pc, #104]	@ (80020f0 <main+0x9c>)
 8002088:	f003 fb72 	bl	8005770 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800208c:	2104      	movs	r1, #4
 800208e:	4818      	ldr	r0, [pc, #96]	@ (80020f0 <main+0x9c>)
 8002090:	f003 fb6e 	bl	8005770 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8002094:	2108      	movs	r1, #8
 8002096:	4816      	ldr	r0, [pc, #88]	@ (80020f0 <main+0x9c>)
 8002098:	f003 fb6a 	bl	8005770 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 800209c:	210c      	movs	r1, #12
 800209e:	4814      	ldr	r0, [pc, #80]	@ (80020f0 <main+0x9c>)
 80020a0:	f003 fb66 	bl	8005770 <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start(&htim3);
 80020a4:	4813      	ldr	r0, [pc, #76]	@ (80020f4 <main+0xa0>)
 80020a6:	f003 fa3b 	bl	8005520 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80020aa:	2100      	movs	r1, #0
 80020ac:	4811      	ldr	r0, [pc, #68]	@ (80020f4 <main+0xa0>)
 80020ae:	f003 fb5f 	bl	8005770 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80020b2:	2104      	movs	r1, #4
 80020b4:	480f      	ldr	r0, [pc, #60]	@ (80020f4 <main+0xa0>)
 80020b6:	f003 fb5b 	bl	8005770 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80020ba:	2108      	movs	r1, #8
 80020bc:	480d      	ldr	r0, [pc, #52]	@ (80020f4 <main+0xa0>)
 80020be:	f003 fb57 	bl	8005770 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80020c2:	210c      	movs	r1, #12
 80020c4:	480b      	ldr	r0, [pc, #44]	@ (80020f4 <main+0xa0>)
 80020c6:	f003 fb53 	bl	8005770 <HAL_TIM_PWM_Start>

  HAL_IWDG_Init(&hiwdg);
 80020ca:	480b      	ldr	r0, [pc, #44]	@ (80020f8 <main+0xa4>)
 80020cc:	f002 fc75 	bl	80049ba <HAL_IWDG_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80020d0:	f005 fd0a 	bl	8007ae8 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80020d4:	f7ff faae 	bl	8001634 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80020d8:	f005 fd2a 	bl	8007b30 <osKernelStart>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  printf("Error starting freeRTOS Scheduler.\n");
 80020dc:	4807      	ldr	r0, [pc, #28]	@ (80020fc <main+0xa8>)
 80020de:	f019 f92d 	bl	801b33c <puts>
	  Error_Handler();
 80020e2:	f000 f8af 	bl	8002244 <Error_Handler>
	  printf("Error starting freeRTOS Scheduler.\n");
 80020e6:	bf00      	nop
 80020e8:	e7f8      	b.n	80020dc <main+0x88>
 80020ea:	bf00      	nop
 80020ec:	0801c5a0 	.word	0x0801c5a0
 80020f0:	200088c4 	.word	0x200088c4
 80020f4:	2000890c 	.word	0x2000890c
 80020f8:	20008860 	.word	0x20008860
 80020fc:	0801c5c4 	.word	0x0801c5c4

08002100 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b094      	sub	sp, #80	@ 0x50
 8002104:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002106:	f107 031c 	add.w	r3, r7, #28
 800210a:	2234      	movs	r2, #52	@ 0x34
 800210c:	2100      	movs	r1, #0
 800210e:	4618      	mov	r0, r3
 8002110:	f019 f946 	bl	801b3a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002114:	f107 0308 	add.w	r3, r7, #8
 8002118:	2200      	movs	r2, #0
 800211a:	601a      	str	r2, [r3, #0]
 800211c:	605a      	str	r2, [r3, #4]
 800211e:	609a      	str	r2, [r3, #8]
 8002120:	60da      	str	r2, [r3, #12]
 8002122:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002124:	2300      	movs	r3, #0
 8002126:	607b      	str	r3, [r7, #4]
 8002128:	4b2d      	ldr	r3, [pc, #180]	@ (80021e0 <SystemClock_Config+0xe0>)
 800212a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800212c:	4a2c      	ldr	r2, [pc, #176]	@ (80021e0 <SystemClock_Config+0xe0>)
 800212e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002132:	6413      	str	r3, [r2, #64]	@ 0x40
 8002134:	4b2a      	ldr	r3, [pc, #168]	@ (80021e0 <SystemClock_Config+0xe0>)
 8002136:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002138:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800213c:	607b      	str	r3, [r7, #4]
 800213e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002140:	2300      	movs	r3, #0
 8002142:	603b      	str	r3, [r7, #0]
 8002144:	4b27      	ldr	r3, [pc, #156]	@ (80021e4 <SystemClock_Config+0xe4>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a26      	ldr	r2, [pc, #152]	@ (80021e4 <SystemClock_Config+0xe4>)
 800214a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800214e:	6013      	str	r3, [r2, #0]
 8002150:	4b24      	ldr	r3, [pc, #144]	@ (80021e4 <SystemClock_Config+0xe4>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002158:	603b      	str	r3, [r7, #0]
 800215a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800215c:	2309      	movs	r3, #9
 800215e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002160:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002164:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002166:	2301      	movs	r3, #1
 8002168:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800216a:	2302      	movs	r3, #2
 800216c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800216e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002172:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002174:	2308      	movs	r3, #8
 8002176:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 195;
 8002178:	23c3      	movs	r3, #195	@ 0xc3
 800217a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800217c:	2302      	movs	r3, #2
 800217e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002180:	2304      	movs	r3, #4
 8002182:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002184:	2302      	movs	r3, #2
 8002186:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002188:	f107 031c 	add.w	r3, r7, #28
 800218c:	4618      	mov	r0, r3
 800218e:	f002 fef3 	bl	8004f78 <HAL_RCC_OscConfig>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d001      	beq.n	800219c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8002198:	f000 f854 	bl	8002244 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800219c:	f002 fc60 	bl	8004a60 <HAL_PWREx_EnableOverDrive>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d001      	beq.n	80021aa <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80021a6:	f000 f84d 	bl	8002244 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021aa:	230f      	movs	r3, #15
 80021ac:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021ae:	2302      	movs	r3, #2
 80021b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021b2:	2300      	movs	r3, #0
 80021b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80021b6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80021ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80021bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021c0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80021c2:	f107 0308 	add.w	r3, r7, #8
 80021c6:	2105      	movs	r1, #5
 80021c8:	4618      	mov	r0, r3
 80021ca:	f002 fc99 	bl	8004b00 <HAL_RCC_ClockConfig>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d001      	beq.n	80021d8 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 80021d4:	f000 f836 	bl	8002244 <Error_Handler>
  }
}
 80021d8:	bf00      	nop
 80021da:	3750      	adds	r7, #80	@ 0x50
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	40023800 	.word	0x40023800
 80021e4:	40007000 	.word	0x40007000

080021e8 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b086      	sub	sp, #24
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	60f8      	str	r0, [r7, #12]
 80021f0:	60b9      	str	r1, [r7, #8]
 80021f2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021f4:	2300      	movs	r3, #0
 80021f6:	617b      	str	r3, [r7, #20]
 80021f8:	e009      	b.n	800220e <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	1c5a      	adds	r2, r3, #1
 80021fe:	60ba      	str	r2, [r7, #8]
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	4618      	mov	r0, r3
 8002204:	f7ff fefe 	bl	8002004 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	3301      	adds	r3, #1
 800220c:	617b      	str	r3, [r7, #20]
 800220e:	697a      	ldr	r2, [r7, #20]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	429a      	cmp	r2, r3
 8002214:	dbf1      	blt.n	80021fa <_write+0x12>
  }
  return len;
 8002216:	687b      	ldr	r3, [r7, #4]
}
 8002218:	4618      	mov	r0, r3
 800221a:	3718      	adds	r7, #24
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}

08002220 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a04      	ldr	r2, [pc, #16]	@ (8002240 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d101      	bne.n	8002236 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002232:	f001 fcf9 	bl	8003c28 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002236:	bf00      	nop
 8002238:	3708      	adds	r7, #8
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	40010000 	.word	0x40010000

08002244 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002248:	b672      	cpsid	i
}
 800224a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800224c:	bf00      	nop
 800224e:	e7fd      	b.n	800224c <Error_Handler+0x8>

08002250 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 800225a:	4b0c      	ldr	r3, [pc, #48]	@ (800228c <microros_allocate+0x3c>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	461a      	mov	r2, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	4413      	add	r3, r2
 8002264:	461a      	mov	r2, r3
 8002266:	4b09      	ldr	r3, [pc, #36]	@ (800228c <microros_allocate+0x3c>)
 8002268:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 800226a:	4b09      	ldr	r3, [pc, #36]	@ (8002290 <microros_allocate+0x40>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	461a      	mov	r2, r3
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	4413      	add	r3, r2
 8002274:	461a      	mov	r2, r3
 8002276:	4b06      	ldr	r3, [pc, #24]	@ (8002290 <microros_allocate+0x40>)
 8002278:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f7fe feb4 	bl	8000fe8 <pvPortMallocMicroROS>
 8002280:	4603      	mov	r3, r0
}
 8002282:	4618      	mov	r0, r3
 8002284:	3708      	adds	r7, #8
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	2000886c 	.word	0x2000886c
 8002290:	20008870 	.word	0x20008870

08002294 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d00c      	beq.n	80022be <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	f7fe ffc3 	bl	8001230 <getBlockSize>
 80022aa:	4603      	mov	r3, r0
 80022ac:	4a06      	ldr	r2, [pc, #24]	@ (80022c8 <microros_deallocate+0x34>)
 80022ae:	6812      	ldr	r2, [r2, #0]
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	461a      	mov	r2, r3
 80022b4:	4b04      	ldr	r3, [pc, #16]	@ (80022c8 <microros_deallocate+0x34>)
 80022b6:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	f7fe ff5d 	bl	8001178 <vPortFreeMicroROS>
  }
}
 80022be:	bf00      	nop
 80022c0:	3708      	adds	r7, #8
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	20008870 	.word	0x20008870

080022cc <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b084      	sub	sp, #16
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	60f8      	str	r0, [r7, #12]
 80022d4:	60b9      	str	r1, [r7, #8]
 80022d6:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 80022d8:	4b15      	ldr	r3, [pc, #84]	@ (8002330 <microros_reallocate+0x64>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	461a      	mov	r2, r3
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	4413      	add	r3, r2
 80022e2:	461a      	mov	r2, r3
 80022e4:	4b12      	ldr	r3, [pc, #72]	@ (8002330 <microros_reallocate+0x64>)
 80022e6:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80022e8:	4b12      	ldr	r3, [pc, #72]	@ (8002334 <microros_reallocate+0x68>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	461a      	mov	r2, r3
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	4413      	add	r3, r2
 80022f2:	461a      	mov	r2, r3
 80022f4:	4b0f      	ldr	r3, [pc, #60]	@ (8002334 <microros_reallocate+0x68>)
 80022f6:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d104      	bne.n	8002308 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 80022fe:	68b8      	ldr	r0, [r7, #8]
 8002300:	f7fe fe72 	bl	8000fe8 <pvPortMallocMicroROS>
 8002304:	4603      	mov	r3, r0
 8002306:	e00e      	b.n	8002326 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8002308:	68f8      	ldr	r0, [r7, #12]
 800230a:	f7fe ff91 	bl	8001230 <getBlockSize>
 800230e:	4603      	mov	r3, r0
 8002310:	4a08      	ldr	r2, [pc, #32]	@ (8002334 <microros_reallocate+0x68>)
 8002312:	6812      	ldr	r2, [r2, #0]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	461a      	mov	r2, r3
 8002318:	4b06      	ldr	r3, [pc, #24]	@ (8002334 <microros_reallocate+0x68>)
 800231a:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 800231c:	68b9      	ldr	r1, [r7, #8]
 800231e:	68f8      	ldr	r0, [r7, #12]
 8002320:	f7fe ffa4 	bl	800126c <pvPortReallocMicroROS>
 8002324:	4603      	mov	r3, r0
  }
}
 8002326:	4618      	mov	r0, r3
 8002328:	3710      	adds	r7, #16
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	2000886c 	.word	0x2000886c
 8002334:	20008870 	.word	0x20008870

08002338 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8002338:	b580      	push	{r7, lr}
 800233a:	b084      	sub	sp, #16
 800233c:	af00      	add	r7, sp, #0
 800233e:	60f8      	str	r0, [r7, #12]
 8002340:	60b9      	str	r1, [r7, #8]
 8002342:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	68ba      	ldr	r2, [r7, #8]
 8002348:	fb02 f303 	mul.w	r3, r2, r3
 800234c:	4a0c      	ldr	r2, [pc, #48]	@ (8002380 <microros_zero_allocate+0x48>)
 800234e:	6812      	ldr	r2, [r2, #0]
 8002350:	4413      	add	r3, r2
 8002352:	461a      	mov	r2, r3
 8002354:	4b0a      	ldr	r3, [pc, #40]	@ (8002380 <microros_zero_allocate+0x48>)
 8002356:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	68ba      	ldr	r2, [r7, #8]
 800235c:	fb02 f303 	mul.w	r3, r2, r3
 8002360:	4a08      	ldr	r2, [pc, #32]	@ (8002384 <microros_zero_allocate+0x4c>)
 8002362:	6812      	ldr	r2, [r2, #0]
 8002364:	4413      	add	r3, r2
 8002366:	461a      	mov	r2, r3
 8002368:	4b06      	ldr	r3, [pc, #24]	@ (8002384 <microros_zero_allocate+0x4c>)
 800236a:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 800236c:	68b9      	ldr	r1, [r7, #8]
 800236e:	68f8      	ldr	r0, [r7, #12]
 8002370:	f7fe ffa9 	bl	80012c6 <pvPortCallocMicroROS>
 8002374:	4603      	mov	r3, r0
 8002376:	4618      	mov	r0, r3
 8002378:	3710      	adds	r7, #16
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	2000886c 	.word	0x2000886c
 8002384:	20008870 	.word	0x20008870

08002388 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8002388:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800238c:	b086      	sub	sp, #24
 800238e:	af00      	add	r7, sp, #0
 8002390:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002394:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8002396:	2300      	movs	r3, #0
 8002398:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 800239a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800239e:	a320      	add	r3, pc, #128	@ (adr r3, 8002420 <UTILS_NanosecondsToTimespec+0x98>)
 80023a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023a4:	f7fe fc3a 	bl	8000c1c <__aeabi_ldivmod>
 80023a8:	4602      	mov	r2, r0
 80023aa:	460b      	mov	r3, r1
 80023ac:	6879      	ldr	r1, [r7, #4]
 80023ae:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 80023b2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80023b6:	a31a      	add	r3, pc, #104	@ (adr r3, 8002420 <UTILS_NanosecondsToTimespec+0x98>)
 80023b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023bc:	f7fe fc2e 	bl	8000c1c <__aeabi_ldivmod>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	da20      	bge.n	800240e <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	4a11      	ldr	r2, [pc, #68]	@ (8002418 <UTILS_NanosecondsToTimespec+0x90>)
 80023d2:	fb82 1203 	smull	r1, r2, r2, r3
 80023d6:	1712      	asrs	r2, r2, #28
 80023d8:	17db      	asrs	r3, r3, #31
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	3301      	adds	r3, #1
 80023de:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023e6:	6979      	ldr	r1, [r7, #20]
 80023e8:	17c8      	asrs	r0, r1, #31
 80023ea:	460c      	mov	r4, r1
 80023ec:	4605      	mov	r5, r0
 80023ee:	ebb2 0804 	subs.w	r8, r2, r4
 80023f2:	eb63 0905 	sbc.w	r9, r3, r5
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	689a      	ldr	r2, [r3, #8]
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	4906      	ldr	r1, [pc, #24]	@ (800241c <UTILS_NanosecondsToTimespec+0x94>)
 8002404:	fb01 f303 	mul.w	r3, r1, r3
 8002408:	441a      	add	r2, r3
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	609a      	str	r2, [r3, #8]
    }
}
 800240e:	bf00      	nop
 8002410:	3718      	adds	r7, #24
 8002412:	46bd      	mov	sp, r7
 8002414:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002418:	44b82fa1 	.word	0x44b82fa1
 800241c:	3b9aca00 	.word	0x3b9aca00
 8002420:	3b9aca00 	.word	0x3b9aca00
 8002424:	00000000 	.word	0x00000000

08002428 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8002428:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800242c:	b08e      	sub	sp, #56	@ 0x38
 800242e:	af00      	add	r7, sp, #0
 8002430:	6278      	str	r0, [r7, #36]	@ 0x24
 8002432:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 8002434:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8002438:	2300      	movs	r3, #0
 800243a:	6013      	str	r3, [r2, #0]
 800243c:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 800243e:	f04f 0200 	mov.w	r2, #0
 8002442:	f04f 0300 	mov.w	r3, #0
 8002446:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 800244a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800244e:	4618      	mov	r0, r3
 8002450:	f006 fef2 	bl	8009238 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8002454:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002456:	17da      	asrs	r2, r3, #31
 8002458:	61bb      	str	r3, [r7, #24]
 800245a:	61fa      	str	r2, [r7, #28]
 800245c:	f04f 0200 	mov.w	r2, #0
 8002460:	f04f 0300 	mov.w	r3, #0
 8002464:	69b9      	ldr	r1, [r7, #24]
 8002466:	000b      	movs	r3, r1
 8002468:	2200      	movs	r2, #0
 800246a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 800246e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002470:	2200      	movs	r2, #0
 8002472:	461c      	mov	r4, r3
 8002474:	4615      	mov	r5, r2
 8002476:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800247a:	1911      	adds	r1, r2, r4
 800247c:	60b9      	str	r1, [r7, #8]
 800247e:	416b      	adcs	r3, r5
 8002480:	60fb      	str	r3, [r7, #12]
 8002482:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002486:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 800248a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800248e:	4602      	mov	r2, r0
 8002490:	460b      	mov	r3, r1
 8002492:	f04f 0400 	mov.w	r4, #0
 8002496:	f04f 0500 	mov.w	r5, #0
 800249a:	015d      	lsls	r5, r3, #5
 800249c:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 80024a0:	0154      	lsls	r4, r2, #5
 80024a2:	4622      	mov	r2, r4
 80024a4:	462b      	mov	r3, r5
 80024a6:	ebb2 0800 	subs.w	r8, r2, r0
 80024aa:	eb63 0901 	sbc.w	r9, r3, r1
 80024ae:	f04f 0200 	mov.w	r2, #0
 80024b2:	f04f 0300 	mov.w	r3, #0
 80024b6:	ea4f 2349 	mov.w	r3, r9, lsl #9
 80024ba:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 80024be:	ea4f 2248 	mov.w	r2, r8, lsl #9
 80024c2:	4690      	mov	r8, r2
 80024c4:	4699      	mov	r9, r3
 80024c6:	eb18 0a00 	adds.w	sl, r8, r0
 80024ca:	eb49 0b01 	adc.w	fp, r9, r1
 80024ce:	f04f 0200 	mov.w	r2, #0
 80024d2:	f04f 0300 	mov.w	r3, #0
 80024d6:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80024da:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80024de:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80024e2:	ebb2 040a 	subs.w	r4, r2, sl
 80024e6:	603c      	str	r4, [r7, #0]
 80024e8:	eb63 030b 	sbc.w	r3, r3, fp
 80024ec:	607b      	str	r3, [r7, #4]
 80024ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80024f2:	4623      	mov	r3, r4
 80024f4:	181b      	adds	r3, r3, r0
 80024f6:	613b      	str	r3, [r7, #16]
 80024f8:	462b      	mov	r3, r5
 80024fa:	eb41 0303 	adc.w	r3, r1, r3
 80024fe:	617b      	str	r3, [r7, #20]
 8002500:	6a3a      	ldr	r2, [r7, #32]
 8002502:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002506:	f7ff ff3f 	bl	8002388 <UTILS_NanosecondsToTimespec>

    return 0;
 800250a:	2300      	movs	r3, #0
 800250c:	4618      	mov	r0, r3
 800250e:	3738      	adds	r7, #56	@ 0x38
 8002510:	46bd      	mov	sp, r7
 8002512:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08002518 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800251e:	2300      	movs	r3, #0
 8002520:	607b      	str	r3, [r7, #4]
 8002522:	4b12      	ldr	r3, [pc, #72]	@ (800256c <HAL_MspInit+0x54>)
 8002524:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002526:	4a11      	ldr	r2, [pc, #68]	@ (800256c <HAL_MspInit+0x54>)
 8002528:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800252c:	6453      	str	r3, [r2, #68]	@ 0x44
 800252e:	4b0f      	ldr	r3, [pc, #60]	@ (800256c <HAL_MspInit+0x54>)
 8002530:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002532:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002536:	607b      	str	r3, [r7, #4]
 8002538:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800253a:	2300      	movs	r3, #0
 800253c:	603b      	str	r3, [r7, #0]
 800253e:	4b0b      	ldr	r3, [pc, #44]	@ (800256c <HAL_MspInit+0x54>)
 8002540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002542:	4a0a      	ldr	r2, [pc, #40]	@ (800256c <HAL_MspInit+0x54>)
 8002544:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002548:	6413      	str	r3, [r2, #64]	@ 0x40
 800254a:	4b08      	ldr	r3, [pc, #32]	@ (800256c <HAL_MspInit+0x54>)
 800254c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800254e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002552:	603b      	str	r3, [r7, #0]
 8002554:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002556:	2200      	movs	r2, #0
 8002558:	210f      	movs	r1, #15
 800255a:	f06f 0001 	mvn.w	r0, #1
 800255e:	f001 fc3b 	bl	8003dd8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002562:	bf00      	nop
 8002564:	3708      	adds	r7, #8
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	40023800 	.word	0x40023800

08002570 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b08c      	sub	sp, #48	@ 0x30
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002578:	2300      	movs	r3, #0
 800257a:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 800257c:	2300      	movs	r3, #0
 800257e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002580:	2300      	movs	r3, #0
 8002582:	60bb      	str	r3, [r7, #8]
 8002584:	4b2f      	ldr	r3, [pc, #188]	@ (8002644 <HAL_InitTick+0xd4>)
 8002586:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002588:	4a2e      	ldr	r2, [pc, #184]	@ (8002644 <HAL_InitTick+0xd4>)
 800258a:	f043 0301 	orr.w	r3, r3, #1
 800258e:	6453      	str	r3, [r2, #68]	@ 0x44
 8002590:	4b2c      	ldr	r3, [pc, #176]	@ (8002644 <HAL_InitTick+0xd4>)
 8002592:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002594:	f003 0301 	and.w	r3, r3, #1
 8002598:	60bb      	str	r3, [r7, #8]
 800259a:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800259c:	f107 020c 	add.w	r2, r7, #12
 80025a0:	f107 0310 	add.w	r3, r7, #16
 80025a4:	4611      	mov	r1, r2
 80025a6:	4618      	mov	r0, r3
 80025a8:	f002 fcb4 	bl	8004f14 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80025ac:	f002 fc9e 	bl	8004eec <HAL_RCC_GetPCLK2Freq>
 80025b0:	4603      	mov	r3, r0
 80025b2:	005b      	lsls	r3, r3, #1
 80025b4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80025b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025b8:	4a23      	ldr	r2, [pc, #140]	@ (8002648 <HAL_InitTick+0xd8>)
 80025ba:	fba2 2303 	umull	r2, r3, r2, r3
 80025be:	0c9b      	lsrs	r3, r3, #18
 80025c0:	3b01      	subs	r3, #1
 80025c2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80025c4:	4b21      	ldr	r3, [pc, #132]	@ (800264c <HAL_InitTick+0xdc>)
 80025c6:	4a22      	ldr	r2, [pc, #136]	@ (8002650 <HAL_InitTick+0xe0>)
 80025c8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80025ca:	4b20      	ldr	r3, [pc, #128]	@ (800264c <HAL_InitTick+0xdc>)
 80025cc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80025d0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80025d2:	4a1e      	ldr	r2, [pc, #120]	@ (800264c <HAL_InitTick+0xdc>)
 80025d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025d6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80025d8:	4b1c      	ldr	r3, [pc, #112]	@ (800264c <HAL_InitTick+0xdc>)
 80025da:	2200      	movs	r2, #0
 80025dc:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025de:	4b1b      	ldr	r3, [pc, #108]	@ (800264c <HAL_InitTick+0xdc>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025e4:	4b19      	ldr	r3, [pc, #100]	@ (800264c <HAL_InitTick+0xdc>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80025ea:	4818      	ldr	r0, [pc, #96]	@ (800264c <HAL_InitTick+0xdc>)
 80025ec:	f002 ff48 	bl	8005480 <HAL_TIM_Base_Init>
 80025f0:	4603      	mov	r3, r0
 80025f2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80025f6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d11b      	bne.n	8002636 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80025fe:	4813      	ldr	r0, [pc, #76]	@ (800264c <HAL_InitTick+0xdc>)
 8002600:	f002 fff6 	bl	80055f0 <HAL_TIM_Base_Start_IT>
 8002604:	4603      	mov	r3, r0
 8002606:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800260a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800260e:	2b00      	cmp	r3, #0
 8002610:	d111      	bne.n	8002636 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002612:	2019      	movs	r0, #25
 8002614:	f001 fbfc 	bl	8003e10 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2b0f      	cmp	r3, #15
 800261c:	d808      	bhi.n	8002630 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800261e:	2200      	movs	r2, #0
 8002620:	6879      	ldr	r1, [r7, #4]
 8002622:	2019      	movs	r0, #25
 8002624:	f001 fbd8 	bl	8003dd8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002628:	4a0a      	ldr	r2, [pc, #40]	@ (8002654 <HAL_InitTick+0xe4>)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6013      	str	r3, [r2, #0]
 800262e:	e002      	b.n	8002636 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002636:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800263a:	4618      	mov	r0, r3
 800263c:	3730      	adds	r7, #48	@ 0x30
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	40023800 	.word	0x40023800
 8002648:	431bde83 	.word	0x431bde83
 800264c:	20008874 	.word	0x20008874
 8002650:	40010000 	.word	0x40010000
 8002654:	200000d0 	.word	0x200000d0

08002658 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002658:	b480      	push	{r7}
 800265a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800265c:	bf00      	nop
 800265e:	e7fd      	b.n	800265c <NMI_Handler+0x4>

08002660 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002664:	bf00      	nop
 8002666:	e7fd      	b.n	8002664 <HardFault_Handler+0x4>

08002668 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002668:	b480      	push	{r7}
 800266a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800266c:	bf00      	nop
 800266e:	e7fd      	b.n	800266c <MemManage_Handler+0x4>

08002670 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002670:	b480      	push	{r7}
 8002672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002674:	bf00      	nop
 8002676:	e7fd      	b.n	8002674 <BusFault_Handler+0x4>

08002678 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002678:	b480      	push	{r7}
 800267a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800267c:	bf00      	nop
 800267e:	e7fd      	b.n	800267c <UsageFault_Handler+0x4>

08002680 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002684:	bf00      	nop
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr
	...

08002690 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002694:	4802      	ldr	r0, [pc, #8]	@ (80026a0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002696:	f003 f933 	bl	8005900 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800269a:	bf00      	nop
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	20008874 	.word	0x20008874

080026a4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80026a8:	4802      	ldr	r0, [pc, #8]	@ (80026b4 <USART1_IRQHandler+0x10>)
 80026aa:	f004 f8db 	bl	8006864 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80026ae:	bf00      	nop
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	20008954 	.word	0x20008954

080026b8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80026bc:	4802      	ldr	r0, [pc, #8]	@ (80026c8 <DMA2_Stream2_IRQHandler+0x10>)
 80026be:	f001 fd4d 	bl	800415c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80026c2:	bf00      	nop
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	2000899c 	.word	0x2000899c

080026cc <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80026d0:	4802      	ldr	r0, [pc, #8]	@ (80026dc <DMA2_Stream7_IRQHandler+0x10>)
 80026d2:	f001 fd43 	bl	800415c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80026d6:	bf00      	nop
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	200089fc 	.word	0x200089fc

080026e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80026e0:	b480      	push	{r7}
 80026e2:	af00      	add	r7, sp, #0
  return 1;
 80026e4:	2301      	movs	r3, #1
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr

080026f0 <_kill>:

int _kill(int pid, int sig)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80026fa:	f018 fe9f 	bl	801b43c <__errno>
 80026fe:	4603      	mov	r3, r0
 8002700:	2216      	movs	r2, #22
 8002702:	601a      	str	r2, [r3, #0]
  return -1;
 8002704:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002708:	4618      	mov	r0, r3
 800270a:	3708      	adds	r7, #8
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}

08002710 <_exit>:

void _exit (int status)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002718:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800271c:	6878      	ldr	r0, [r7, #4]
 800271e:	f7ff ffe7 	bl	80026f0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002722:	bf00      	nop
 8002724:	e7fd      	b.n	8002722 <_exit+0x12>

08002726 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002726:	b580      	push	{r7, lr}
 8002728:	b086      	sub	sp, #24
 800272a:	af00      	add	r7, sp, #0
 800272c:	60f8      	str	r0, [r7, #12]
 800272e:	60b9      	str	r1, [r7, #8]
 8002730:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002732:	2300      	movs	r3, #0
 8002734:	617b      	str	r3, [r7, #20]
 8002736:	e00a      	b.n	800274e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002738:	f3af 8000 	nop.w
 800273c:	4601      	mov	r1, r0
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	1c5a      	adds	r2, r3, #1
 8002742:	60ba      	str	r2, [r7, #8]
 8002744:	b2ca      	uxtb	r2, r1
 8002746:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	3301      	adds	r3, #1
 800274c:	617b      	str	r3, [r7, #20]
 800274e:	697a      	ldr	r2, [r7, #20]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	429a      	cmp	r2, r3
 8002754:	dbf0      	blt.n	8002738 <_read+0x12>
  }

  return len;
 8002756:	687b      	ldr	r3, [r7, #4]
}
 8002758:	4618      	mov	r0, r3
 800275a:	3718      	adds	r7, #24
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}

08002760 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002768:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800276c:	4618      	mov	r0, r3
 800276e:	370c      	adds	r7, #12
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr

08002778 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002788:	605a      	str	r2, [r3, #4]
  return 0;
 800278a:	2300      	movs	r3, #0
}
 800278c:	4618      	mov	r0, r3
 800278e:	370c      	adds	r7, #12
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr

08002798 <_isatty>:

int _isatty(int file)
{
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80027a0:	2301      	movs	r3, #1
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	370c      	adds	r7, #12
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr

080027ae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80027ae:	b480      	push	{r7}
 80027b0:	b085      	sub	sp, #20
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	60f8      	str	r0, [r7, #12]
 80027b6:	60b9      	str	r1, [r7, #8]
 80027b8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80027ba:	2300      	movs	r3, #0
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3714      	adds	r7, #20
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr

080027c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b086      	sub	sp, #24
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027d0:	4a14      	ldr	r2, [pc, #80]	@ (8002824 <_sbrk+0x5c>)
 80027d2:	4b15      	ldr	r3, [pc, #84]	@ (8002828 <_sbrk+0x60>)
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027dc:	4b13      	ldr	r3, [pc, #76]	@ (800282c <_sbrk+0x64>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d102      	bne.n	80027ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027e4:	4b11      	ldr	r3, [pc, #68]	@ (800282c <_sbrk+0x64>)
 80027e6:	4a12      	ldr	r2, [pc, #72]	@ (8002830 <_sbrk+0x68>)
 80027e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027ea:	4b10      	ldr	r3, [pc, #64]	@ (800282c <_sbrk+0x64>)
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4413      	add	r3, r2
 80027f2:	693a      	ldr	r2, [r7, #16]
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d207      	bcs.n	8002808 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027f8:	f018 fe20 	bl	801b43c <__errno>
 80027fc:	4603      	mov	r3, r0
 80027fe:	220c      	movs	r2, #12
 8002800:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002802:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002806:	e009      	b.n	800281c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002808:	4b08      	ldr	r3, [pc, #32]	@ (800282c <_sbrk+0x64>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800280e:	4b07      	ldr	r3, [pc, #28]	@ (800282c <_sbrk+0x64>)
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	4413      	add	r3, r2
 8002816:	4a05      	ldr	r2, [pc, #20]	@ (800282c <_sbrk+0x64>)
 8002818:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800281a:	68fb      	ldr	r3, [r7, #12]
}
 800281c:	4618      	mov	r0, r3
 800281e:	3718      	adds	r7, #24
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}
 8002824:	20050000 	.word	0x20050000
 8002828:	00000400 	.word	0x00000400
 800282c:	200088c0 	.word	0x200088c0
 8002830:	200160b0 	.word	0x200160b0

08002834 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002834:	b480      	push	{r7}
 8002836:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002838:	4b06      	ldr	r3, [pc, #24]	@ (8002854 <SystemInit+0x20>)
 800283a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800283e:	4a05      	ldr	r2, [pc, #20]	@ (8002854 <SystemInit+0x20>)
 8002840:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002844:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002848:	bf00      	nop
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr
 8002852:	bf00      	nop
 8002854:	e000ed00 	.word	0xe000ed00

08002858 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b08a      	sub	sp, #40	@ 0x28
 800285c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800285e:	f107 0320 	add.w	r3, r7, #32
 8002862:	2200      	movs	r2, #0
 8002864:	601a      	str	r2, [r3, #0]
 8002866:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002868:	1d3b      	adds	r3, r7, #4
 800286a:	2200      	movs	r2, #0
 800286c:	601a      	str	r2, [r3, #0]
 800286e:	605a      	str	r2, [r3, #4]
 8002870:	609a      	str	r2, [r3, #8]
 8002872:	60da      	str	r2, [r3, #12]
 8002874:	611a      	str	r2, [r3, #16]
 8002876:	615a      	str	r2, [r3, #20]
 8002878:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800287a:	4b33      	ldr	r3, [pc, #204]	@ (8002948 <MX_TIM2_Init+0xf0>)
 800287c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002880:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 8002882:	4b31      	ldr	r3, [pc, #196]	@ (8002948 <MX_TIM2_Init+0xf0>)
 8002884:	2259      	movs	r2, #89	@ 0x59
 8002886:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002888:	4b2f      	ldr	r3, [pc, #188]	@ (8002948 <MX_TIM2_Init+0xf0>)
 800288a:	2200      	movs	r2, #0
 800288c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000-1;
 800288e:	4b2e      	ldr	r3, [pc, #184]	@ (8002948 <MX_TIM2_Init+0xf0>)
 8002890:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8002894:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002896:	4b2c      	ldr	r3, [pc, #176]	@ (8002948 <MX_TIM2_Init+0xf0>)
 8002898:	2200      	movs	r2, #0
 800289a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800289c:	4b2a      	ldr	r3, [pc, #168]	@ (8002948 <MX_TIM2_Init+0xf0>)
 800289e:	2200      	movs	r2, #0
 80028a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80028a2:	4829      	ldr	r0, [pc, #164]	@ (8002948 <MX_TIM2_Init+0xf0>)
 80028a4:	f002 ff14 	bl	80056d0 <HAL_TIM_PWM_Init>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d001      	beq.n	80028b2 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80028ae:	f7ff fcc9 	bl	8002244 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028b2:	2300      	movs	r3, #0
 80028b4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028b6:	2300      	movs	r3, #0
 80028b8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80028ba:	f107 0320 	add.w	r3, r7, #32
 80028be:	4619      	mov	r1, r3
 80028c0:	4821      	ldr	r0, [pc, #132]	@ (8002948 <MX_TIM2_Init+0xf0>)
 80028c2:	f003 fddb 	bl	800647c <HAL_TIMEx_MasterConfigSynchronization>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d001      	beq.n	80028d0 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80028cc:	f7ff fcba 	bl	8002244 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80028d0:	2360      	movs	r3, #96	@ 0x60
 80028d2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1500-1;
 80028d4:	f240 53db 	movw	r3, #1499	@ 0x5db
 80028d8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80028da:	2300      	movs	r3, #0
 80028dc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80028de:	2300      	movs	r3, #0
 80028e0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80028e2:	1d3b      	adds	r3, r7, #4
 80028e4:	2200      	movs	r2, #0
 80028e6:	4619      	mov	r1, r3
 80028e8:	4817      	ldr	r0, [pc, #92]	@ (8002948 <MX_TIM2_Init+0xf0>)
 80028ea:	f003 f8f9 	bl	8005ae0 <HAL_TIM_PWM_ConfigChannel>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d001      	beq.n	80028f8 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80028f4:	f7ff fca6 	bl	8002244 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80028f8:	1d3b      	adds	r3, r7, #4
 80028fa:	2204      	movs	r2, #4
 80028fc:	4619      	mov	r1, r3
 80028fe:	4812      	ldr	r0, [pc, #72]	@ (8002948 <MX_TIM2_Init+0xf0>)
 8002900:	f003 f8ee 	bl	8005ae0 <HAL_TIM_PWM_ConfigChannel>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d001      	beq.n	800290e <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 800290a:	f7ff fc9b 	bl	8002244 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800290e:	1d3b      	adds	r3, r7, #4
 8002910:	2208      	movs	r2, #8
 8002912:	4619      	mov	r1, r3
 8002914:	480c      	ldr	r0, [pc, #48]	@ (8002948 <MX_TIM2_Init+0xf0>)
 8002916:	f003 f8e3 	bl	8005ae0 <HAL_TIM_PWM_ConfigChannel>
 800291a:	4603      	mov	r3, r0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d001      	beq.n	8002924 <MX_TIM2_Init+0xcc>
  {
    Error_Handler();
 8002920:	f7ff fc90 	bl	8002244 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002924:	1d3b      	adds	r3, r7, #4
 8002926:	220c      	movs	r2, #12
 8002928:	4619      	mov	r1, r3
 800292a:	4807      	ldr	r0, [pc, #28]	@ (8002948 <MX_TIM2_Init+0xf0>)
 800292c:	f003 f8d8 	bl	8005ae0 <HAL_TIM_PWM_ConfigChannel>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d001      	beq.n	800293a <MX_TIM2_Init+0xe2>
  {
    Error_Handler();
 8002936:	f7ff fc85 	bl	8002244 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800293a:	4803      	ldr	r0, [pc, #12]	@ (8002948 <MX_TIM2_Init+0xf0>)
 800293c:	f000 f8e0 	bl	8002b00 <HAL_TIM_MspPostInit>

}
 8002940:	bf00      	nop
 8002942:	3728      	adds	r7, #40	@ 0x28
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}
 8002948:	200088c4 	.word	0x200088c4

0800294c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b08e      	sub	sp, #56	@ 0x38
 8002950:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002952:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002956:	2200      	movs	r2, #0
 8002958:	601a      	str	r2, [r3, #0]
 800295a:	605a      	str	r2, [r3, #4]
 800295c:	609a      	str	r2, [r3, #8]
 800295e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002960:	f107 0320 	add.w	r3, r7, #32
 8002964:	2200      	movs	r2, #0
 8002966:	601a      	str	r2, [r3, #0]
 8002968:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800296a:	1d3b      	adds	r3, r7, #4
 800296c:	2200      	movs	r2, #0
 800296e:	601a      	str	r2, [r3, #0]
 8002970:	605a      	str	r2, [r3, #4]
 8002972:	609a      	str	r2, [r3, #8]
 8002974:	60da      	str	r2, [r3, #12]
 8002976:	611a      	str	r2, [r3, #16]
 8002978:	615a      	str	r2, [r3, #20]
 800297a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800297c:	4b3d      	ldr	r3, [pc, #244]	@ (8002a74 <MX_TIM3_Init+0x128>)
 800297e:	4a3e      	ldr	r2, [pc, #248]	@ (8002a78 <MX_TIM3_Init+0x12c>)
 8002980:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 90-1;
 8002982:	4b3c      	ldr	r3, [pc, #240]	@ (8002a74 <MX_TIM3_Init+0x128>)
 8002984:	2259      	movs	r2, #89	@ 0x59
 8002986:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002988:	4b3a      	ldr	r3, [pc, #232]	@ (8002a74 <MX_TIM3_Init+0x128>)
 800298a:	2200      	movs	r2, #0
 800298c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 800298e:	4b39      	ldr	r3, [pc, #228]	@ (8002a74 <MX_TIM3_Init+0x128>)
 8002990:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8002994:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002996:	4b37      	ldr	r3, [pc, #220]	@ (8002a74 <MX_TIM3_Init+0x128>)
 8002998:	2200      	movs	r2, #0
 800299a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800299c:	4b35      	ldr	r3, [pc, #212]	@ (8002a74 <MX_TIM3_Init+0x128>)
 800299e:	2200      	movs	r2, #0
 80029a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80029a2:	4834      	ldr	r0, [pc, #208]	@ (8002a74 <MX_TIM3_Init+0x128>)
 80029a4:	f002 fd6c 	bl	8005480 <HAL_TIM_Base_Init>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d001      	beq.n	80029b2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80029ae:	f7ff fc49 	bl	8002244 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80029b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80029b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80029b8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80029bc:	4619      	mov	r1, r3
 80029be:	482d      	ldr	r0, [pc, #180]	@ (8002a74 <MX_TIM3_Init+0x128>)
 80029c0:	f003 f950 	bl	8005c64 <HAL_TIM_ConfigClockSource>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d001      	beq.n	80029ce <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80029ca:	f7ff fc3b 	bl	8002244 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80029ce:	4829      	ldr	r0, [pc, #164]	@ (8002a74 <MX_TIM3_Init+0x128>)
 80029d0:	f002 fe7e 	bl	80056d0 <HAL_TIM_PWM_Init>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d001      	beq.n	80029de <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80029da:	f7ff fc33 	bl	8002244 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029de:	2300      	movs	r3, #0
 80029e0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029e2:	2300      	movs	r3, #0
 80029e4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80029e6:	f107 0320 	add.w	r3, r7, #32
 80029ea:	4619      	mov	r1, r3
 80029ec:	4821      	ldr	r0, [pc, #132]	@ (8002a74 <MX_TIM3_Init+0x128>)
 80029ee:	f003 fd45 	bl	800647c <HAL_TIMEx_MasterConfigSynchronization>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d001      	beq.n	80029fc <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80029f8:	f7ff fc24 	bl	8002244 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80029fc:	2360      	movs	r3, #96	@ 0x60
 80029fe:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1500-1;
 8002a00:	f240 53db 	movw	r3, #1499	@ 0x5db
 8002a04:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a06:	2300      	movs	r3, #0
 8002a08:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a0e:	1d3b      	adds	r3, r7, #4
 8002a10:	2200      	movs	r2, #0
 8002a12:	4619      	mov	r1, r3
 8002a14:	4817      	ldr	r0, [pc, #92]	@ (8002a74 <MX_TIM3_Init+0x128>)
 8002a16:	f003 f863 	bl	8005ae0 <HAL_TIM_PWM_ConfigChannel>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d001      	beq.n	8002a24 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8002a20:	f7ff fc10 	bl	8002244 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002a24:	1d3b      	adds	r3, r7, #4
 8002a26:	2204      	movs	r2, #4
 8002a28:	4619      	mov	r1, r3
 8002a2a:	4812      	ldr	r0, [pc, #72]	@ (8002a74 <MX_TIM3_Init+0x128>)
 8002a2c:	f003 f858 	bl	8005ae0 <HAL_TIM_PWM_ConfigChannel>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d001      	beq.n	8002a3a <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8002a36:	f7ff fc05 	bl	8002244 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002a3a:	1d3b      	adds	r3, r7, #4
 8002a3c:	2208      	movs	r2, #8
 8002a3e:	4619      	mov	r1, r3
 8002a40:	480c      	ldr	r0, [pc, #48]	@ (8002a74 <MX_TIM3_Init+0x128>)
 8002a42:	f003 f84d 	bl	8005ae0 <HAL_TIM_PWM_ConfigChannel>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d001      	beq.n	8002a50 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8002a4c:	f7ff fbfa 	bl	8002244 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002a50:	1d3b      	adds	r3, r7, #4
 8002a52:	220c      	movs	r2, #12
 8002a54:	4619      	mov	r1, r3
 8002a56:	4807      	ldr	r0, [pc, #28]	@ (8002a74 <MX_TIM3_Init+0x128>)
 8002a58:	f003 f842 	bl	8005ae0 <HAL_TIM_PWM_ConfigChannel>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d001      	beq.n	8002a66 <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 8002a62:	f7ff fbef 	bl	8002244 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002a66:	4803      	ldr	r0, [pc, #12]	@ (8002a74 <MX_TIM3_Init+0x128>)
 8002a68:	f000 f84a 	bl	8002b00 <HAL_TIM_MspPostInit>

}
 8002a6c:	bf00      	nop
 8002a6e:	3738      	adds	r7, #56	@ 0x38
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	2000890c 	.word	0x2000890c
 8002a78:	40000400 	.word	0x40000400

08002a7c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b085      	sub	sp, #20
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a8c:	d10d      	bne.n	8002aaa <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a8e:	2300      	movs	r3, #0
 8002a90:	60fb      	str	r3, [r7, #12]
 8002a92:	4b09      	ldr	r3, [pc, #36]	@ (8002ab8 <HAL_TIM_PWM_MspInit+0x3c>)
 8002a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a96:	4a08      	ldr	r2, [pc, #32]	@ (8002ab8 <HAL_TIM_PWM_MspInit+0x3c>)
 8002a98:	f043 0301 	orr.w	r3, r3, #1
 8002a9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a9e:	4b06      	ldr	r3, [pc, #24]	@ (8002ab8 <HAL_TIM_PWM_MspInit+0x3c>)
 8002aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aa2:	f003 0301 	and.w	r3, r3, #1
 8002aa6:	60fb      	str	r3, [r7, #12]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002aaa:	bf00      	nop
 8002aac:	3714      	adds	r7, #20
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr
 8002ab6:	bf00      	nop
 8002ab8:	40023800 	.word	0x40023800

08002abc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b085      	sub	sp, #20
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a0b      	ldr	r2, [pc, #44]	@ (8002af8 <HAL_TIM_Base_MspInit+0x3c>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d10d      	bne.n	8002aea <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002ace:	2300      	movs	r3, #0
 8002ad0:	60fb      	str	r3, [r7, #12]
 8002ad2:	4b0a      	ldr	r3, [pc, #40]	@ (8002afc <HAL_TIM_Base_MspInit+0x40>)
 8002ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ad6:	4a09      	ldr	r2, [pc, #36]	@ (8002afc <HAL_TIM_Base_MspInit+0x40>)
 8002ad8:	f043 0302 	orr.w	r3, r3, #2
 8002adc:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ade:	4b07      	ldr	r3, [pc, #28]	@ (8002afc <HAL_TIM_Base_MspInit+0x40>)
 8002ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ae2:	f003 0302 	and.w	r3, r3, #2
 8002ae6:	60fb      	str	r3, [r7, #12]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002aea:	bf00      	nop
 8002aec:	3714      	adds	r7, #20
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop
 8002af8:	40000400 	.word	0x40000400
 8002afc:	40023800 	.word	0x40023800

08002b00 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b08c      	sub	sp, #48	@ 0x30
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b08:	f107 031c 	add.w	r3, r7, #28
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	601a      	str	r2, [r3, #0]
 8002b10:	605a      	str	r2, [r3, #4]
 8002b12:	609a      	str	r2, [r3, #8]
 8002b14:	60da      	str	r2, [r3, #12]
 8002b16:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b20:	d11e      	bne.n	8002b60 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b22:	2300      	movs	r3, #0
 8002b24:	61bb      	str	r3, [r7, #24]
 8002b26:	4b40      	ldr	r3, [pc, #256]	@ (8002c28 <HAL_TIM_MspPostInit+0x128>)
 8002b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b2a:	4a3f      	ldr	r2, [pc, #252]	@ (8002c28 <HAL_TIM_MspPostInit+0x128>)
 8002b2c:	f043 0301 	orr.w	r3, r3, #1
 8002b30:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b32:	4b3d      	ldr	r3, [pc, #244]	@ (8002c28 <HAL_TIM_MspPostInit+0x128>)
 8002b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b36:	f003 0301 	and.w	r3, r3, #1
 8002b3a:	61bb      	str	r3, [r7, #24]
 8002b3c:	69bb      	ldr	r3, [r7, #24]
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5;
 8002b3e:	232e      	movs	r3, #46	@ 0x2e
 8002b40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b42:	2302      	movs	r3, #2
 8002b44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b46:	2300      	movs	r3, #0
 8002b48:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b52:	f107 031c 	add.w	r3, r7, #28
 8002b56:	4619      	mov	r1, r3
 8002b58:	4834      	ldr	r0, [pc, #208]	@ (8002c2c <HAL_TIM_MspPostInit+0x12c>)
 8002b5a:	f001 fd69 	bl	8004630 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002b5e:	e05e      	b.n	8002c1e <HAL_TIM_MspPostInit+0x11e>
  else if(timHandle->Instance==TIM3)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a32      	ldr	r2, [pc, #200]	@ (8002c30 <HAL_TIM_MspPostInit+0x130>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d159      	bne.n	8002c1e <HAL_TIM_MspPostInit+0x11e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	617b      	str	r3, [r7, #20]
 8002b6e:	4b2e      	ldr	r3, [pc, #184]	@ (8002c28 <HAL_TIM_MspPostInit+0x128>)
 8002b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b72:	4a2d      	ldr	r2, [pc, #180]	@ (8002c28 <HAL_TIM_MspPostInit+0x128>)
 8002b74:	f043 0301 	orr.w	r3, r3, #1
 8002b78:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b7a:	4b2b      	ldr	r3, [pc, #172]	@ (8002c28 <HAL_TIM_MspPostInit+0x128>)
 8002b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b7e:	f003 0301 	and.w	r3, r3, #1
 8002b82:	617b      	str	r3, [r7, #20]
 8002b84:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b86:	2300      	movs	r3, #0
 8002b88:	613b      	str	r3, [r7, #16]
 8002b8a:	4b27      	ldr	r3, [pc, #156]	@ (8002c28 <HAL_TIM_MspPostInit+0x128>)
 8002b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b8e:	4a26      	ldr	r2, [pc, #152]	@ (8002c28 <HAL_TIM_MspPostInit+0x128>)
 8002b90:	f043 0302 	orr.w	r3, r3, #2
 8002b94:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b96:	4b24      	ldr	r3, [pc, #144]	@ (8002c28 <HAL_TIM_MspPostInit+0x128>)
 8002b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b9a:	f003 0302 	and.w	r3, r3, #2
 8002b9e:	613b      	str	r3, [r7, #16]
 8002ba0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	60fb      	str	r3, [r7, #12]
 8002ba6:	4b20      	ldr	r3, [pc, #128]	@ (8002c28 <HAL_TIM_MspPostInit+0x128>)
 8002ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002baa:	4a1f      	ldr	r2, [pc, #124]	@ (8002c28 <HAL_TIM_MspPostInit+0x128>)
 8002bac:	f043 0304 	orr.w	r3, r3, #4
 8002bb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bb2:	4b1d      	ldr	r3, [pc, #116]	@ (8002c28 <HAL_TIM_MspPostInit+0x128>)
 8002bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bb6:	f003 0304 	and.w	r3, r3, #4
 8002bba:	60fb      	str	r3, [r7, #12]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002bbe:	2340      	movs	r3, #64	@ 0x40
 8002bc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bc2:	2302      	movs	r3, #2
 8002bc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002bce:	2302      	movs	r3, #2
 8002bd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bd2:	f107 031c 	add.w	r3, r7, #28
 8002bd6:	4619      	mov	r1, r3
 8002bd8:	4814      	ldr	r0, [pc, #80]	@ (8002c2c <HAL_TIM_MspPostInit+0x12c>)
 8002bda:	f001 fd29 	bl	8004630 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002bde:	2303      	movs	r3, #3
 8002be0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002be2:	2302      	movs	r3, #2
 8002be4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be6:	2300      	movs	r3, #0
 8002be8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bea:	2300      	movs	r3, #0
 8002bec:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002bee:	2302      	movs	r3, #2
 8002bf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bf2:	f107 031c 	add.w	r3, r7, #28
 8002bf6:	4619      	mov	r1, r3
 8002bf8:	480e      	ldr	r0, [pc, #56]	@ (8002c34 <HAL_TIM_MspPostInit+0x134>)
 8002bfa:	f001 fd19 	bl	8004630 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002bfe:	2380      	movs	r3, #128	@ 0x80
 8002c00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c02:	2302      	movs	r3, #2
 8002c04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c06:	2300      	movs	r3, #0
 8002c08:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002c0e:	2302      	movs	r3, #2
 8002c10:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c12:	f107 031c 	add.w	r3, r7, #28
 8002c16:	4619      	mov	r1, r3
 8002c18:	4807      	ldr	r0, [pc, #28]	@ (8002c38 <HAL_TIM_MspPostInit+0x138>)
 8002c1a:	f001 fd09 	bl	8004630 <HAL_GPIO_Init>
}
 8002c1e:	bf00      	nop
 8002c20:	3730      	adds	r7, #48	@ 0x30
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	40023800 	.word	0x40023800
 8002c2c:	40020000 	.word	0x40020000
 8002c30:	40000400 	.word	0x40000400
 8002c34:	40020400 	.word	0x40020400
 8002c38:	40020800 	.word	0x40020800

08002c3c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002c40:	4b11      	ldr	r3, [pc, #68]	@ (8002c88 <MX_USART1_UART_Init+0x4c>)
 8002c42:	4a12      	ldr	r2, [pc, #72]	@ (8002c8c <MX_USART1_UART_Init+0x50>)
 8002c44:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002c46:	4b10      	ldr	r3, [pc, #64]	@ (8002c88 <MX_USART1_UART_Init+0x4c>)
 8002c48:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002c4c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002c4e:	4b0e      	ldr	r3, [pc, #56]	@ (8002c88 <MX_USART1_UART_Init+0x4c>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002c54:	4b0c      	ldr	r3, [pc, #48]	@ (8002c88 <MX_USART1_UART_Init+0x4c>)
 8002c56:	2200      	movs	r2, #0
 8002c58:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002c5a:	4b0b      	ldr	r3, [pc, #44]	@ (8002c88 <MX_USART1_UART_Init+0x4c>)
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002c60:	4b09      	ldr	r3, [pc, #36]	@ (8002c88 <MX_USART1_UART_Init+0x4c>)
 8002c62:	220c      	movs	r2, #12
 8002c64:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c66:	4b08      	ldr	r3, [pc, #32]	@ (8002c88 <MX_USART1_UART_Init+0x4c>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c6c:	4b06      	ldr	r3, [pc, #24]	@ (8002c88 <MX_USART1_UART_Init+0x4c>)
 8002c6e:	2200      	movs	r2, #0
 8002c70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002c72:	4805      	ldr	r0, [pc, #20]	@ (8002c88 <MX_USART1_UART_Init+0x4c>)
 8002c74:	f003 fc92 	bl	800659c <HAL_UART_Init>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d001      	beq.n	8002c82 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002c7e:	f7ff fae1 	bl	8002244 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002c82:	bf00      	nop
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	20008954 	.word	0x20008954
 8002c8c:	40011000 	.word	0x40011000

08002c90 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b08a      	sub	sp, #40	@ 0x28
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c98:	f107 0314 	add.w	r3, r7, #20
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	601a      	str	r2, [r3, #0]
 8002ca0:	605a      	str	r2, [r3, #4]
 8002ca2:	609a      	str	r2, [r3, #8]
 8002ca4:	60da      	str	r2, [r3, #12]
 8002ca6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a4d      	ldr	r2, [pc, #308]	@ (8002de4 <HAL_UART_MspInit+0x154>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	f040 8094 	bne.w	8002ddc <HAL_UART_MspInit+0x14c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	613b      	str	r3, [r7, #16]
 8002cb8:	4b4b      	ldr	r3, [pc, #300]	@ (8002de8 <HAL_UART_MspInit+0x158>)
 8002cba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cbc:	4a4a      	ldr	r2, [pc, #296]	@ (8002de8 <HAL_UART_MspInit+0x158>)
 8002cbe:	f043 0310 	orr.w	r3, r3, #16
 8002cc2:	6453      	str	r3, [r2, #68]	@ 0x44
 8002cc4:	4b48      	ldr	r3, [pc, #288]	@ (8002de8 <HAL_UART_MspInit+0x158>)
 8002cc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cc8:	f003 0310 	and.w	r3, r3, #16
 8002ccc:	613b      	str	r3, [r7, #16]
 8002cce:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	60fb      	str	r3, [r7, #12]
 8002cd4:	4b44      	ldr	r3, [pc, #272]	@ (8002de8 <HAL_UART_MspInit+0x158>)
 8002cd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cd8:	4a43      	ldr	r2, [pc, #268]	@ (8002de8 <HAL_UART_MspInit+0x158>)
 8002cda:	f043 0301 	orr.w	r3, r3, #1
 8002cde:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ce0:	4b41      	ldr	r3, [pc, #260]	@ (8002de8 <HAL_UART_MspInit+0x158>)
 8002ce2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ce4:	f003 0301 	and.w	r3, r3, #1
 8002ce8:	60fb      	str	r3, [r7, #12]
 8002cea:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002cec:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002cf0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cf2:	2302      	movs	r3, #2
 8002cf4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002cfe:	2307      	movs	r3, #7
 8002d00:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d02:	f107 0314 	add.w	r3, r7, #20
 8002d06:	4619      	mov	r1, r3
 8002d08:	4838      	ldr	r0, [pc, #224]	@ (8002dec <HAL_UART_MspInit+0x15c>)
 8002d0a:	f001 fc91 	bl	8004630 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002d0e:	4b38      	ldr	r3, [pc, #224]	@ (8002df0 <HAL_UART_MspInit+0x160>)
 8002d10:	4a38      	ldr	r2, [pc, #224]	@ (8002df4 <HAL_UART_MspInit+0x164>)
 8002d12:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002d14:	4b36      	ldr	r3, [pc, #216]	@ (8002df0 <HAL_UART_MspInit+0x160>)
 8002d16:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002d1a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d1c:	4b34      	ldr	r3, [pc, #208]	@ (8002df0 <HAL_UART_MspInit+0x160>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d22:	4b33      	ldr	r3, [pc, #204]	@ (8002df0 <HAL_UART_MspInit+0x160>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002d28:	4b31      	ldr	r3, [pc, #196]	@ (8002df0 <HAL_UART_MspInit+0x160>)
 8002d2a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002d2e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d30:	4b2f      	ldr	r3, [pc, #188]	@ (8002df0 <HAL_UART_MspInit+0x160>)
 8002d32:	2200      	movs	r2, #0
 8002d34:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d36:	4b2e      	ldr	r3, [pc, #184]	@ (8002df0 <HAL_UART_MspInit+0x160>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002d3c:	4b2c      	ldr	r3, [pc, #176]	@ (8002df0 <HAL_UART_MspInit+0x160>)
 8002d3e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002d42:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002d44:	4b2a      	ldr	r3, [pc, #168]	@ (8002df0 <HAL_UART_MspInit+0x160>)
 8002d46:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002d4a:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d4c:	4b28      	ldr	r3, [pc, #160]	@ (8002df0 <HAL_UART_MspInit+0x160>)
 8002d4e:	2200      	movs	r2, #0
 8002d50:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002d52:	4827      	ldr	r0, [pc, #156]	@ (8002df0 <HAL_UART_MspInit+0x160>)
 8002d54:	f001 f86a 	bl	8003e2c <HAL_DMA_Init>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d001      	beq.n	8002d62 <HAL_UART_MspInit+0xd2>
    {
      Error_Handler();
 8002d5e:	f7ff fa71 	bl	8002244 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4a22      	ldr	r2, [pc, #136]	@ (8002df0 <HAL_UART_MspInit+0x160>)
 8002d66:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002d68:	4a21      	ldr	r2, [pc, #132]	@ (8002df0 <HAL_UART_MspInit+0x160>)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8002d6e:	4b22      	ldr	r3, [pc, #136]	@ (8002df8 <HAL_UART_MspInit+0x168>)
 8002d70:	4a22      	ldr	r2, [pc, #136]	@ (8002dfc <HAL_UART_MspInit+0x16c>)
 8002d72:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8002d74:	4b20      	ldr	r3, [pc, #128]	@ (8002df8 <HAL_UART_MspInit+0x168>)
 8002d76:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002d7a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002d7c:	4b1e      	ldr	r3, [pc, #120]	@ (8002df8 <HAL_UART_MspInit+0x168>)
 8002d7e:	2240      	movs	r2, #64	@ 0x40
 8002d80:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d82:	4b1d      	ldr	r3, [pc, #116]	@ (8002df8 <HAL_UART_MspInit+0x168>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002d88:	4b1b      	ldr	r3, [pc, #108]	@ (8002df8 <HAL_UART_MspInit+0x168>)
 8002d8a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002d8e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d90:	4b19      	ldr	r3, [pc, #100]	@ (8002df8 <HAL_UART_MspInit+0x168>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d96:	4b18      	ldr	r3, [pc, #96]	@ (8002df8 <HAL_UART_MspInit+0x168>)
 8002d98:	2200      	movs	r2, #0
 8002d9a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002d9c:	4b16      	ldr	r3, [pc, #88]	@ (8002df8 <HAL_UART_MspInit+0x168>)
 8002d9e:	2200      	movs	r2, #0
 8002da0:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002da2:	4b15      	ldr	r3, [pc, #84]	@ (8002df8 <HAL_UART_MspInit+0x168>)
 8002da4:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002da8:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002daa:	4b13      	ldr	r3, [pc, #76]	@ (8002df8 <HAL_UART_MspInit+0x168>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002db0:	4811      	ldr	r0, [pc, #68]	@ (8002df8 <HAL_UART_MspInit+0x168>)
 8002db2:	f001 f83b 	bl	8003e2c <HAL_DMA_Init>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d001      	beq.n	8002dc0 <HAL_UART_MspInit+0x130>
    {
      Error_Handler();
 8002dbc:	f7ff fa42 	bl	8002244 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	4a0d      	ldr	r2, [pc, #52]	@ (8002df8 <HAL_UART_MspInit+0x168>)
 8002dc4:	639a      	str	r2, [r3, #56]	@ 0x38
 8002dc6:	4a0c      	ldr	r2, [pc, #48]	@ (8002df8 <HAL_UART_MspInit+0x168>)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002dcc:	2200      	movs	r2, #0
 8002dce:	2105      	movs	r1, #5
 8002dd0:	2025      	movs	r0, #37	@ 0x25
 8002dd2:	f001 f801 	bl	8003dd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002dd6:	2025      	movs	r0, #37	@ 0x25
 8002dd8:	f001 f81a 	bl	8003e10 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002ddc:	bf00      	nop
 8002dde:	3728      	adds	r7, #40	@ 0x28
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	40011000 	.word	0x40011000
 8002de8:	40023800 	.word	0x40023800
 8002dec:	40020000 	.word	0x40020000
 8002df0:	2000899c 	.word	0x2000899c
 8002df4:	40026440 	.word	0x40026440
 8002df8:	200089fc 	.word	0x200089fc
 8002dfc:	400264b8 	.word	0x400264b8

08002e00 <calculate_pwm>:

static uint8_t tcm_initialized = 0;
static arm_matrix_instance_f32 fixed_mixing_matrix_instance;

arm_status calculate_pwm(const float in_joystick_input[6], uint32_t pwm_output[8])
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b09e      	sub	sp, #120	@ 0x78
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
 8002e08:	6039      	str	r1, [r7, #0]
	float joystick_input[6];
	for(uint8_t i = 0; i < 6; i++)
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8002e10:	e011      	b.n	8002e36 <calculate_pwm+0x36>
	{
		joystick_input[i] = in_joystick_input[i];
 8002e12:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	441a      	add	r2, r3
 8002e1c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8002e20:	6812      	ldr	r2, [r2, #0]
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	3378      	adds	r3, #120	@ 0x78
 8002e26:	443b      	add	r3, r7
 8002e28:	3b1c      	subs	r3, #28
 8002e2a:	601a      	str	r2, [r3, #0]
	for(uint8_t i = 0; i < 6; i++)
 8002e2c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8002e30:	3301      	adds	r3, #1
 8002e32:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8002e36:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8002e3a:	2b05      	cmp	r3, #5
 8002e3c:	d9e9      	bls.n	8002e12 <calculate_pwm+0x12>
	}

    normalize_vector(in_joystick_input, joystick_input, 6);
 8002e3e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002e42:	2206      	movs	r2, #6
 8002e44:	4619      	mov	r1, r3
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f7ff f85a 	bl	8001f00 <normalize_vector>

    float f_pwm_output[8];

    __attribute__((aligned(4))) float pwm_output_8_1[8] = {0};
 8002e4c:	f107 031c 	add.w	r3, r7, #28
 8002e50:	2220      	movs	r2, #32
 8002e52:	2100      	movs	r1, #0
 8002e54:	4618      	mov	r0, r3
 8002e56:	f018 faa3 	bl	801b3a0 <memset>

    arm_matrix_instance_f32 joystick_input_instance;
    arm_matrix_instance_f32 pwm_output_instance;

    if(tcm_initialized == 0) {
 8002e5a:	4b41      	ldr	r3, [pc, #260]	@ (8002f60 <calculate_pwm+0x160>)
 8002e5c:	781b      	ldrb	r3, [r3, #0]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d108      	bne.n	8002e74 <calculate_pwm+0x74>
    	arm_mat_init_f32(&fixed_mixing_matrix_instance, 8, 6, (float *)FIXED_MIXING_MATRIX);
 8002e62:	4b40      	ldr	r3, [pc, #256]	@ (8002f64 <calculate_pwm+0x164>)
 8002e64:	2206      	movs	r2, #6
 8002e66:	2108      	movs	r1, #8
 8002e68:	483f      	ldr	r0, [pc, #252]	@ (8002f68 <calculate_pwm+0x168>)
 8002e6a:	f007 fcf5 	bl	800a858 <arm_mat_init_f32>
    	tcm_initialized = 1;
 8002e6e:	4b3c      	ldr	r3, [pc, #240]	@ (8002f60 <calculate_pwm+0x160>)
 8002e70:	2201      	movs	r2, #1
 8002e72:	701a      	strb	r2, [r3, #0]
    }
    arm_mat_init_f32(&joystick_input_instance, 6, 1, (float *)joystick_input);
 8002e74:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002e78:	f107 0014 	add.w	r0, r7, #20
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	2106      	movs	r1, #6
 8002e80:	f007 fcea 	bl	800a858 <arm_mat_init_f32>
    arm_mat_init_f32(&pwm_output_instance, 8, 1, (float *)pwm_output_8_1);
 8002e84:	f107 031c 	add.w	r3, r7, #28
 8002e88:	f107 000c 	add.w	r0, r7, #12
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	2108      	movs	r1, #8
 8002e90:	f007 fce2 	bl	800a858 <arm_mat_init_f32>
    arm_status code = arm_mat_mult_f32(&fixed_mixing_matrix_instance, &joystick_input_instance, &pwm_output_instance);
 8002e94:	f107 020c 	add.w	r2, r7, #12
 8002e98:	f107 0314 	add.w	r3, r7, #20
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	4832      	ldr	r0, [pc, #200]	@ (8002f68 <calculate_pwm+0x168>)
 8002ea0:	f007 fbca 	bl	800a638 <arm_mat_mult_f32>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
    if (code != ARM_MATH_SUCCESS) return code;
 8002eaa:	f997 3074 	ldrsb.w	r3, [r7, #116]	@ 0x74
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d002      	beq.n	8002eb8 <calculate_pwm+0xb8>
 8002eb2:	f997 3074 	ldrsb.w	r3, [r7, #116]	@ 0x74
 8002eb6:	e04f      	b.n	8002f58 <calculate_pwm+0x158>

    for (uint8_t i = 0; i < 8; i++) {
 8002eb8:	2300      	movs	r3, #0
 8002eba:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 8002ebe:	e011      	b.n	8002ee4 <calculate_pwm+0xe4>
        f_pwm_output[i] = pwm_output_instance.pData[i];
 8002ec0:	693a      	ldr	r2, [r7, #16]
 8002ec2:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	441a      	add	r2, r3
 8002eca:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8002ece:	6812      	ldr	r2, [r2, #0]
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	3378      	adds	r3, #120	@ 0x78
 8002ed4:	443b      	add	r3, r7
 8002ed6:	3b3c      	subs	r3, #60	@ 0x3c
 8002ed8:	601a      	str	r2, [r3, #0]
    for (uint8_t i = 0; i < 8; i++) {
 8002eda:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8002ede:	3301      	adds	r3, #1
 8002ee0:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 8002ee4:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8002ee8:	2b07      	cmp	r3, #7
 8002eea:	d9e9      	bls.n	8002ec0 <calculate_pwm+0xc0>
    }

    // normalize pwm_output and map to 1100 ~ 1900
    normalize_vector(f_pwm_output, f_pwm_output, 8);
 8002eec:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8002ef0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002ef4:	2208      	movs	r2, #8
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f7ff f802 	bl	8001f00 <normalize_vector>
    for (uint8_t i = 0; i < 8; i++) {
 8002efc:	2300      	movs	r3, #0
 8002efe:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75
 8002f02:	e024      	b.n	8002f4e <calculate_pwm+0x14e>
        // pwm_output[i][0] = symmetric_quadratic_interpolation(pwm_output[i][0], 1, PWM_MAX);
        pwm_output[i] = (int)linear_interpolation(f_pwm_output[i], -1, 1, PWM_MIN, PWM_MAX);
 8002f04:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	3378      	adds	r3, #120	@ 0x78
 8002f0c:	443b      	add	r3, r7
 8002f0e:	3b3c      	subs	r3, #60	@ 0x3c
 8002f10:	edd3 7a00 	vldr	s15, [r3]
 8002f14:	ed9f 2a15 	vldr	s4, [pc, #84]	@ 8002f6c <calculate_pwm+0x16c>
 8002f18:	eddf 1a15 	vldr	s3, [pc, #84]	@ 8002f70 <calculate_pwm+0x170>
 8002f1c:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 8002f20:	eeff 0a00 	vmov.f32	s1, #240	@ 0xbf800000 -1.0
 8002f24:	eeb0 0a67 	vmov.f32	s0, s15
 8002f28:	f7fe ffbc 	bl	8001ea4 <linear_interpolation>
 8002f2c:	eef0 7a40 	vmov.f32	s15, s0
 8002f30:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f34:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	683a      	ldr	r2, [r7, #0]
 8002f3c:	4413      	add	r3, r2
 8002f3e:	ee17 2a90 	vmov	r2, s15
 8002f42:	601a      	str	r2, [r3, #0]
    for (uint8_t i = 0; i < 8; i++) {
 8002f44:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 8002f48:	3301      	adds	r3, #1
 8002f4a:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75
 8002f4e:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 8002f52:	2b07      	cmp	r3, #7
 8002f54:	d9d6      	bls.n	8002f04 <calculate_pwm+0x104>
    }
    return ARM_MATH_SUCCESS;
 8002f56:	2300      	movs	r3, #0
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3778      	adds	r7, #120	@ 0x78
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	20008a5c 	.word	0x20008a5c
 8002f64:	20000008 	.word	0x20000008
 8002f68:	20008a60 	.word	0x20008a60
 8002f6c:	44d0c000 	.word	0x44d0c000
 8002f70:	44a64000 	.word	0x44a64000

08002f74 <invert_quaternion>:

void invert_quaternion(const Quaternion * q, Quaternion * q_inv) {
 8002f74:	b480      	push	{r7}
 8002f76:	b085      	sub	sp, #20
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	6039      	str	r1, [r7, #0]
	float norm_squared = q->w * q->w + q->x * q->x + q->y * q->y + q->z * q->z;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	ed93 7a00 	vldr	s14, [r3]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	edd3 7a00 	vldr	s15, [r3]
 8002f8a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	edd3 6a01 	vldr	s13, [r3, #4]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	edd3 7a01 	vldr	s15, [r3, #4]
 8002f9a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f9e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	edd3 6a02 	vldr	s13, [r3, #8]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	edd3 7a02 	vldr	s15, [r3, #8]
 8002fae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002fb2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	edd3 6a03 	vldr	s13, [r3, #12]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	edd3 7a03 	vldr	s15, [r3, #12]
 8002fc2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002fc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fca:	edc7 7a03 	vstr	s15, [r7, #12]

	if (norm_squared == 0.0f) {
 8002fce:	edd7 7a03 	vldr	s15, [r7, #12]
 8002fd2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002fd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fda:	d110      	bne.n	8002ffe <invert_quaternion+0x8a>
		// Handle the case of zero norm if needed (for example, return a specific error)
		q_inv->w = q_inv->x = q_inv->y = q_inv->z = 0.0f;
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	f04f 0200 	mov.w	r2, #0
 8002fe2:	60da      	str	r2, [r3, #12]
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	68da      	ldr	r2, [r3, #12]
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	609a      	str	r2, [r3, #8]
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	689a      	ldr	r2, [r3, #8]
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	605a      	str	r2, [r3, #4]
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	685a      	ldr	r2, [r3, #4]
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	601a      	str	r2, [r3, #0]
		return;
 8002ffc:	e02d      	b.n	800305a <invert_quaternion+0xe6>
	}
	// Compute the inverse as the conjugate divided by the norm squared
	q_inv->w = q->w / norm_squared;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	edd3 6a00 	vldr	s13, [r3]
 8003004:	ed97 7a03 	vldr	s14, [r7, #12]
 8003008:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	edc3 7a00 	vstr	s15, [r3]
	q_inv->x = -q->x / norm_squared;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	edd3 7a01 	vldr	s15, [r3, #4]
 8003018:	eef1 6a67 	vneg.f32	s13, s15
 800301c:	ed97 7a03 	vldr	s14, [r7, #12]
 8003020:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	edc3 7a01 	vstr	s15, [r3, #4]
	q_inv->y = -q->y / norm_squared;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	edd3 7a02 	vldr	s15, [r3, #8]
 8003030:	eef1 6a67 	vneg.f32	s13, s15
 8003034:	ed97 7a03 	vldr	s14, [r7, #12]
 8003038:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	edc3 7a02 	vstr	s15, [r3, #8]
	q_inv->z = -q->z / norm_squared;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	edd3 7a03 	vldr	s15, [r3, #12]
 8003048:	eef1 6a67 	vneg.f32	s13, s15
 800304c:	ed97 7a03 	vldr	s14, [r7, #12]
 8003050:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	edc3 7a03 	vstr	s15, [r3, #12]
}
 800305a:	3714      	adds	r7, #20
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr

08003064 <multiply_quaternions>:

void multiply_quaternions(const Quaternion* q1, const Quaternion* q2, Quaternion* qResult) {
 8003064:	b480      	push	{r7}
 8003066:	b085      	sub	sp, #20
 8003068:	af00      	add	r7, sp, #0
 800306a:	60f8      	str	r0, [r7, #12]
 800306c:	60b9      	str	r1, [r7, #8]
 800306e:	607a      	str	r2, [r7, #4]
	qResult->w = q1->w * q2->w - q1->x * q2->x - q1->y * q2->y - q1->z * q2->z;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	ed93 7a00 	vldr	s14, [r3]
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	edd3 7a00 	vldr	s15, [r3]
 800307c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	edd3 6a01 	vldr	s13, [r3, #4]
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	edd3 7a01 	vldr	s15, [r3, #4]
 800308c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003090:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	edd3 6a02 	vldr	s13, [r3, #8]
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	edd3 7a02 	vldr	s15, [r3, #8]
 80030a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030a4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	edd3 6a03 	vldr	s13, [r3, #12]
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	edd3 7a03 	vldr	s15, [r3, #12]
 80030b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	edc3 7a00 	vstr	s15, [r3]
	qResult->x = q1->w * q2->x + q1->x * q2->w + q1->y * q2->z - q1->z * q2->y;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	ed93 7a00 	vldr	s14, [r3]
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	edd3 7a01 	vldr	s15, [r3, #4]
 80030ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	edd3 6a01 	vldr	s13, [r3, #4]
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	edd3 7a00 	vldr	s15, [r3]
 80030de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030e2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	edd3 6a02 	vldr	s13, [r3, #8]
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	edd3 7a03 	vldr	s15, [r3, #12]
 80030f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030f6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	edd3 6a03 	vldr	s13, [r3, #12]
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	edd3 7a02 	vldr	s15, [r3, #8]
 8003106:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800310a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	edc3 7a01 	vstr	s15, [r3, #4]
	qResult->y = q1->w * q2->y - q1->x * q2->z + q1->y * q2->w + q1->z * q2->x;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	ed93 7a00 	vldr	s14, [r3]
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	edd3 7a02 	vldr	s15, [r3, #8]
 8003120:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	edd3 6a01 	vldr	s13, [r3, #4]
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	edd3 7a03 	vldr	s15, [r3, #12]
 8003130:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003134:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	edd3 6a02 	vldr	s13, [r3, #8]
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	edd3 7a00 	vldr	s15, [r3]
 8003144:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003148:	ee37 7a27 	vadd.f32	s14, s14, s15
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	edd3 6a03 	vldr	s13, [r3, #12]
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	edd3 7a01 	vldr	s15, [r3, #4]
 8003158:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800315c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	edc3 7a02 	vstr	s15, [r3, #8]
	qResult->z = q1->w * q2->z + q1->x * q2->y - q1->y * q2->x + q1->z * q2->w;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	ed93 7a00 	vldr	s14, [r3]
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	edd3 7a03 	vldr	s15, [r3, #12]
 8003172:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	edd3 6a01 	vldr	s13, [r3, #4]
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	edd3 7a02 	vldr	s15, [r3, #8]
 8003182:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003186:	ee37 7a27 	vadd.f32	s14, s14, s15
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	edd3 6a02 	vldr	s13, [r3, #8]
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	edd3 7a01 	vldr	s15, [r3, #4]
 8003196:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800319a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	edd3 6a03 	vldr	s13, [r3, #12]
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	edd3 7a00 	vldr	s15, [r3]
 80031aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80031ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	edc3 7a03 	vstr	s15, [r3, #12]
}
 80031b8:	bf00      	nop
 80031ba:	3714      	adds	r7, #20
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr

080031c4 <calculate_rpy_from_quaternion>:
	if (value < min) return min;
	return value;
}

void calculate_rpy_from_quaternion(const Quaternion *quaternion, float roll_pitch_yaw_radians[3])
{
 80031c4:	b5b0      	push	{r4, r5, r7, lr}
 80031c6:	b086      	sub	sp, #24
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
 80031cc:	6039      	str	r1, [r7, #0]
	// roll (x-axis rotation)
	float sinr_cosp = 2 * (quaternion->w * quaternion->x + quaternion->y * quaternion->z);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	ed93 7a00 	vldr	s14, [r3]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	edd3 7a01 	vldr	s15, [r3, #4]
 80031da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	edd3 6a02 	vldr	s13, [r3, #8]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	edd3 7a03 	vldr	s15, [r3, #12]
 80031ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80031ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031f2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80031f6:	edc7 7a05 	vstr	s15, [r7, #20]
	float cosr_cosp = 1 - 2 * (quaternion->x * quaternion->x + quaternion->y * quaternion->y);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	ed93 7a01 	vldr	s14, [r3, #4]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	edd3 7a01 	vldr	s15, [r3, #4]
 8003206:	ee27 7a27 	vmul.f32	s14, s14, s15
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	edd3 6a02 	vldr	s13, [r3, #8]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	edd3 7a02 	vldr	s15, [r3, #8]
 8003216:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800321a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800321e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003222:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003226:	ee77 7a67 	vsub.f32	s15, s14, s15
 800322a:	edc7 7a04 	vstr	s15, [r7, #16]
	roll_pitch_yaw_radians[0] = atan2(sinr_cosp, cosr_cosp);
 800322e:	6978      	ldr	r0, [r7, #20]
 8003230:	f7fd f9b2 	bl	8000598 <__aeabi_f2d>
 8003234:	4604      	mov	r4, r0
 8003236:	460d      	mov	r5, r1
 8003238:	6938      	ldr	r0, [r7, #16]
 800323a:	f7fd f9ad 	bl	8000598 <__aeabi_f2d>
 800323e:	4602      	mov	r2, r0
 8003240:	460b      	mov	r3, r1
 8003242:	ec43 2b11 	vmov	d1, r2, r3
 8003246:	ec45 4b10 	vmov	d0, r4, r5
 800324a:	f017 f8d3 	bl	801a3f4 <atan2>
 800324e:	ec53 2b10 	vmov	r2, r3, d0
 8003252:	4610      	mov	r0, r2
 8003254:	4619      	mov	r1, r3
 8003256:	f7fd fc91 	bl	8000b7c <__aeabi_d2f>
 800325a:	4602      	mov	r2, r0
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	601a      	str	r2, [r3, #0]

	// pitch (y-axis rotation)
	float sinp, cosp;
	roll_pitch_yaw_radians[1] = asinf(2 * (quaternion->w * quaternion->y - quaternion->x * quaternion->z));
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	ed93 7a00 	vldr	s14, [r3]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	edd3 7a02 	vldr	s15, [r3, #8]
 800326c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	edd3 6a01 	vldr	s13, [r3, #4]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	edd3 7a03 	vldr	s15, [r3, #12]
 800327c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003280:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003284:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	1d1c      	adds	r4, r3, #4
 800328c:	eeb0 0a67 	vmov.f32	s0, s15
 8003290:	f017 f884 	bl	801a39c <asinf>
 8003294:	eef0 7a40 	vmov.f32	s15, s0
 8003298:	edc4 7a00 	vstr	s15, [r4]

	// yaw (z-axis rotation)
	float siny_cosp = 2 * (quaternion->w * quaternion->z + quaternion->x * quaternion->y);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	ed93 7a00 	vldr	s14, [r3]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	edd3 7a03 	vldr	s15, [r3, #12]
 80032a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	edd3 6a01 	vldr	s13, [r3, #4]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	edd3 7a02 	vldr	s15, [r3, #8]
 80032b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032c0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80032c4:	edc7 7a03 	vstr	s15, [r7, #12]
	float cosy_cosp = 1 - 2 * (quaternion->y * quaternion->y + quaternion->z * quaternion->z);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	ed93 7a02 	vldr	s14, [r3, #8]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	edd3 7a02 	vldr	s15, [r3, #8]
 80032d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	edd3 6a03 	vldr	s13, [r3, #12]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	edd3 7a03 	vldr	s15, [r3, #12]
 80032e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032ec:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80032f0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80032f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032f8:	edc7 7a02 	vstr	s15, [r7, #8]
	roll_pitch_yaw_radians[2] = atan2(siny_cosp, cosy_cosp);
 80032fc:	68f8      	ldr	r0, [r7, #12]
 80032fe:	f7fd f94b 	bl	8000598 <__aeabi_f2d>
 8003302:	4604      	mov	r4, r0
 8003304:	460d      	mov	r5, r1
 8003306:	68b8      	ldr	r0, [r7, #8]
 8003308:	f7fd f946 	bl	8000598 <__aeabi_f2d>
 800330c:	4602      	mov	r2, r0
 800330e:	460b      	mov	r3, r1
 8003310:	ec43 2b11 	vmov	d1, r2, r3
 8003314:	ec45 4b10 	vmov	d0, r4, r5
 8003318:	f017 f86c 	bl	801a3f4 <atan2>
 800331c:	ec51 0b10 	vmov	r0, r1, d0
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	f103 0408 	add.w	r4, r3, #8
 8003326:	f7fd fc29 	bl	8000b7c <__aeabi_d2f>
 800332a:	4603      	mov	r3, r0
 800332c:	6023      	str	r3, [r4, #0]
}
 800332e:	bf00      	nop
 8003330:	3718      	adds	r7, #24
 8003332:	46bd      	mov	sp, r7
 8003334:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003338 <update_setpoints>:

// input_values: surge, sway, heave, roll, pitch, yaw
uint8_t update_setpoints(const float cmd_vel[6], const Quaternion * quat, const float * water_pressure) {
 8003338:	b580      	push	{r7, lr}
 800333a:	b09e      	sub	sp, #120	@ 0x78
 800333c:	af00      	add	r7, sp, #0
 800333e:	60f8      	str	r0, [r7, #12]
 8003340:	60b9      	str	r1, [r7, #8]
 8003342:	607a      	str	r2, [r7, #4]
	uint8_t count = 0;
 8003344:	2300      	movs	r3, #0
 8003346:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	float rpy_rads[3];
	calculate_rpy_from_quaternion(quat, rpy_rads);
 800334a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800334e:	4619      	mov	r1, r3
 8003350:	68b8      	ldr	r0, [r7, #8]
 8003352:	f7ff ff37 	bl	80031c4 <calculate_rpy_from_quaternion>
	// updates setpoints for angles
	for(uint8_t i = 0; i < 3; i++) {
 8003356:	2300      	movs	r3, #0
 8003358:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 800335c:	e041      	b.n	80033e2 <update_setpoints+0xaa>
		if(fabsf(cmd_vel[i+3]) < TOLERANCE) {
 800335e:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8003362:	3303      	adds	r3, #3
 8003364:	009b      	lsls	r3, r3, #2
 8003366:	68fa      	ldr	r2, [r7, #12]
 8003368:	4413      	add	r3, r2
 800336a:	edd3 7a00 	vldr	s15, [r3]
 800336e:	eef0 7ae7 	vabs.f32	s15, s15
 8003372:	ee17 0a90 	vmov	r0, s15
 8003376:	f7fd f90f 	bl	8000598 <__aeabi_f2d>
 800337a:	a3a9      	add	r3, pc, #676	@ (adr r3, 8003620 <update_setpoints+0x2e8>)
 800337c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003380:	f7fd fbd4 	bl	8000b2c <__aeabi_dcmplt>
 8003384:	4603      	mov	r3, r0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d020      	beq.n	80033cc <update_setpoints+0x94>
			if(last_cmd_vel_neq_0[i+1]) {
 800338a:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 800338e:	3301      	adds	r3, #1
 8003390:	4aa5      	ldr	r2, [pc, #660]	@ (8003628 <update_setpoints+0x2f0>)
 8003392:	5cd3      	ldrb	r3, [r2, r3]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d012      	beq.n	80033be <update_setpoints+0x86>
				setpoints[i+1] = rpy_rads[i];
 8003398:	f897 2076 	ldrb.w	r2, [r7, #118]	@ 0x76
 800339c:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 80033a0:	3301      	adds	r3, #1
 80033a2:	0092      	lsls	r2, r2, #2
 80033a4:	3278      	adds	r2, #120	@ 0x78
 80033a6:	443a      	add	r2, r7
 80033a8:	3a14      	subs	r2, #20
 80033aa:	6812      	ldr	r2, [r2, #0]
 80033ac:	499f      	ldr	r1, [pc, #636]	@ (800362c <update_setpoints+0x2f4>)
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	440b      	add	r3, r1
 80033b2:	601a      	str	r2, [r3, #0]
				count++;
 80033b4:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80033b8:	3301      	adds	r3, #1
 80033ba:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
			}
			last_cmd_vel_neq_0[i+1] = 0;
 80033be:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 80033c2:	3301      	adds	r3, #1
 80033c4:	4a98      	ldr	r2, [pc, #608]	@ (8003628 <update_setpoints+0x2f0>)
 80033c6:	2100      	movs	r1, #0
 80033c8:	54d1      	strb	r1, [r2, r3]
 80033ca:	e005      	b.n	80033d8 <update_setpoints+0xa0>
		} else last_cmd_vel_neq_0[i+1] = 1;
 80033cc:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 80033d0:	3301      	adds	r3, #1
 80033d2:	4a95      	ldr	r2, [pc, #596]	@ (8003628 <update_setpoints+0x2f0>)
 80033d4:	2101      	movs	r1, #1
 80033d6:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < 3; i++) {
 80033d8:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 80033dc:	3301      	adds	r3, #1
 80033de:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 80033e2:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 80033e6:	2b02      	cmp	r3, #2
 80033e8:	d9b9      	bls.n	800335e <update_setpoints+0x26>
	 * Updates depth setpoint
	 * In order for the setpoint to be update, I have to check the role each axis plays in changing the depth,
	 * and updating the setpoint only if all of the corresponding input values are 0
	 */
	Quaternion z_out_q;
	z_out_q.w = z_out_q.x = z_out_q.y = 0;
 80033ea:	f04f 0300 	mov.w	r3, #0
 80033ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80033f0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80033f2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80033f4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80033f6:	657b      	str	r3, [r7, #84]	@ 0x54
	z_out_q.z = 1;
 80033f8:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80033fc:	663b      	str	r3, [r7, #96]	@ 0x60
	Quaternion q_inv = {0};
 80033fe:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8003402:	2200      	movs	r2, #0
 8003404:	601a      	str	r2, [r3, #0]
 8003406:	605a      	str	r2, [r3, #4]
 8003408:	609a      	str	r2, [r3, #8]
 800340a:	60da      	str	r2, [r3, #12]
	invert_quaternion(quat, &q_inv);
 800340c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8003410:	4619      	mov	r1, r3
 8003412:	68b8      	ldr	r0, [r7, #8]
 8003414:	f7ff fdae 	bl	8002f74 <invert_quaternion>
	// applies the inverse rotation to the z_out_q vector
	Quaternion intermediate_result = {0};
 8003418:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800341c:	2200      	movs	r2, #0
 800341e:	601a      	str	r2, [r3, #0]
 8003420:	605a      	str	r2, [r3, #4]
 8003422:	609a      	str	r2, [r3, #8]
 8003424:	60da      	str	r2, [r3, #12]
	Quaternion z_out_RBF = {0};
 8003426:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800342a:	2200      	movs	r2, #0
 800342c:	601a      	str	r2, [r3, #0]
 800342e:	605a      	str	r2, [r3, #4]
 8003430:	609a      	str	r2, [r3, #8]
 8003432:	60da      	str	r2, [r3, #12]
	// rotating a vector v by q_inv = q_inv * v * q_inv_inv = q_inv * v * q
	multiply_quaternions(&q_inv, &z_out_q, &intermediate_result);
 8003434:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8003438:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 800343c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8003440:	4618      	mov	r0, r3
 8003442:	f7ff fe0f 	bl	8003064 <multiply_quaternions>
	multiply_quaternions(&intermediate_result, quat, &z_out_RBF);
 8003446:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800344a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800344e:	68b9      	ldr	r1, [r7, #8]
 8003450:	4618      	mov	r0, r3
 8003452:	f7ff fe07 	bl	8003064 <multiply_quaternions>

	uint8_t x_condition = fabsf(z_out_RBF.x) < TOLERANCE || fabsf(cmd_vel[0]) < TOLERANCE;
 8003456:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800345a:	eef0 7ae7 	vabs.f32	s15, s15
 800345e:	ee17 0a90 	vmov	r0, s15
 8003462:	f7fd f899 	bl	8000598 <__aeabi_f2d>
 8003466:	a36e      	add	r3, pc, #440	@ (adr r3, 8003620 <update_setpoints+0x2e8>)
 8003468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800346c:	f7fd fb5e 	bl	8000b2c <__aeabi_dcmplt>
 8003470:	4603      	mov	r3, r0
 8003472:	2b00      	cmp	r3, #0
 8003474:	d110      	bne.n	8003498 <update_setpoints+0x160>
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	edd3 7a00 	vldr	s15, [r3]
 800347c:	eef0 7ae7 	vabs.f32	s15, s15
 8003480:	ee17 0a90 	vmov	r0, s15
 8003484:	f7fd f888 	bl	8000598 <__aeabi_f2d>
 8003488:	a365      	add	r3, pc, #404	@ (adr r3, 8003620 <update_setpoints+0x2e8>)
 800348a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800348e:	f7fd fb4d 	bl	8000b2c <__aeabi_dcmplt>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d001      	beq.n	800349c <update_setpoints+0x164>
 8003498:	2301      	movs	r3, #1
 800349a:	e000      	b.n	800349e <update_setpoints+0x166>
 800349c:	2300      	movs	r3, #0
 800349e:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75
	uint8_t y_condition = fabsf(z_out_RBF.y) < TOLERANCE || fabsf(cmd_vel[1]) < TOLERANCE;
 80034a2:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80034a6:	eef0 7ae7 	vabs.f32	s15, s15
 80034aa:	ee17 0a90 	vmov	r0, s15
 80034ae:	f7fd f873 	bl	8000598 <__aeabi_f2d>
 80034b2:	a35b      	add	r3, pc, #364	@ (adr r3, 8003620 <update_setpoints+0x2e8>)
 80034b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034b8:	f7fd fb38 	bl	8000b2c <__aeabi_dcmplt>
 80034bc:	4603      	mov	r3, r0
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d111      	bne.n	80034e6 <update_setpoints+0x1ae>
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	3304      	adds	r3, #4
 80034c6:	edd3 7a00 	vldr	s15, [r3]
 80034ca:	eef0 7ae7 	vabs.f32	s15, s15
 80034ce:	ee17 0a90 	vmov	r0, s15
 80034d2:	f7fd f861 	bl	8000598 <__aeabi_f2d>
 80034d6:	a352      	add	r3, pc, #328	@ (adr r3, 8003620 <update_setpoints+0x2e8>)
 80034d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034dc:	f7fd fb26 	bl	8000b2c <__aeabi_dcmplt>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d001      	beq.n	80034ea <update_setpoints+0x1b2>
 80034e6:	2301      	movs	r3, #1
 80034e8:	e000      	b.n	80034ec <update_setpoints+0x1b4>
 80034ea:	2300      	movs	r3, #0
 80034ec:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
	uint8_t z_condition = fabsf(z_out_RBF.z) < TOLERANCE || fabsf(cmd_vel[2]) < TOLERANCE;
 80034f0:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80034f4:	eef0 7ae7 	vabs.f32	s15, s15
 80034f8:	ee17 0a90 	vmov	r0, s15
 80034fc:	f7fd f84c 	bl	8000598 <__aeabi_f2d>
 8003500:	a347      	add	r3, pc, #284	@ (adr r3, 8003620 <update_setpoints+0x2e8>)
 8003502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003506:	f7fd fb11 	bl	8000b2c <__aeabi_dcmplt>
 800350a:	4603      	mov	r3, r0
 800350c:	2b00      	cmp	r3, #0
 800350e:	d111      	bne.n	8003534 <update_setpoints+0x1fc>
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	3308      	adds	r3, #8
 8003514:	edd3 7a00 	vldr	s15, [r3]
 8003518:	eef0 7ae7 	vabs.f32	s15, s15
 800351c:	ee17 0a90 	vmov	r0, s15
 8003520:	f7fd f83a 	bl	8000598 <__aeabi_f2d>
 8003524:	a33e      	add	r3, pc, #248	@ (adr r3, 8003620 <update_setpoints+0x2e8>)
 8003526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800352a:	f7fd faff 	bl	8000b2c <__aeabi_dcmplt>
 800352e:	4603      	mov	r3, r0
 8003530:	2b00      	cmp	r3, #0
 8003532:	d001      	beq.n	8003538 <update_setpoints+0x200>
 8003534:	2301      	movs	r3, #1
 8003536:	e000      	b.n	800353a <update_setpoints+0x202>
 8003538:	2300      	movs	r3, #0
 800353a:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73

	if (x_condition && y_condition && z_condition) {
 800353e:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 8003542:	2b00      	cmp	r3, #0
 8003544:	d014      	beq.n	8003570 <update_setpoints+0x238>
 8003546:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 800354a:	2b00      	cmp	r3, #0
 800354c:	d010      	beq.n	8003570 <update_setpoints+0x238>
 800354e:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8003552:	2b00      	cmp	r3, #0
 8003554:	d00c      	beq.n	8003570 <update_setpoints+0x238>
		if(last_cmd_vel_neq_0[0]) {
 8003556:	4b34      	ldr	r3, [pc, #208]	@ (8003628 <update_setpoints+0x2f0>)
 8003558:	781b      	ldrb	r3, [r3, #0]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d008      	beq.n	8003570 <update_setpoints+0x238>
			setpoints[0] = * water_pressure;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a32      	ldr	r2, [pc, #200]	@ (800362c <update_setpoints+0x2f4>)
 8003564:	6013      	str	r3, [r2, #0]
			count++;
 8003566:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800356a:	3301      	adds	r3, #1
 800356c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	}

	// dentro last_cmd_vel_neq_0[0] ci devo mettere 0 se il vettore (cmd_vel[0], cmd_vel[1], cmd_vel[2])
	// ha componente nulla lungo l'asse z del EFBF
	// riuso le variabili dichiarate in precedenza visto che non mi servono più
	Quaternion cmd_vel_EFBF = {0};
 8003570:	f107 0314 	add.w	r3, r7, #20
 8003574:	2200      	movs	r2, #0
 8003576:	601a      	str	r2, [r3, #0]
 8003578:	605a      	str	r2, [r3, #4]
 800357a:	609a      	str	r2, [r3, #8]
 800357c:	60da      	str	r2, [r3, #12]
	z_out_q.w = 0;
 800357e:	f04f 0300 	mov.w	r3, #0
 8003582:	657b      	str	r3, [r7, #84]	@ 0x54
	z_out_q.x = cmd_vel[0];
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	65bb      	str	r3, [r7, #88]	@ 0x58
	z_out_q.y = cmd_vel[1];
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	3304      	adds	r3, #4
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	65fb      	str	r3, [r7, #92]	@ 0x5c
	z_out_q.z = cmd_vel[2];
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	3308      	adds	r3, #8
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	663b      	str	r3, [r7, #96]	@ 0x60
	multiply_quaternions(quat, &z_out_q, &intermediate_result);
 800359a:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800359e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80035a2:	4619      	mov	r1, r3
 80035a4:	68b8      	ldr	r0, [r7, #8]
 80035a6:	f7ff fd5d 	bl	8003064 <multiply_quaternions>
	multiply_quaternions(&intermediate_result, &q_inv, &cmd_vel_EFBF);
 80035aa:	f107 0214 	add.w	r2, r7, #20
 80035ae:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 80035b2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80035b6:	4618      	mov	r0, r3
 80035b8:	f7ff fd54 	bl	8003064 <multiply_quaternions>
	if(fabsf(cmd_vel_EFBF.z) < TOLERANCE) last_cmd_vel_neq_0[0] = 0;
 80035bc:	edd7 7a08 	vldr	s15, [r7, #32]
 80035c0:	eef0 7ae7 	vabs.f32	s15, s15
 80035c4:	ee17 0a90 	vmov	r0, s15
 80035c8:	f7fc ffe6 	bl	8000598 <__aeabi_f2d>
 80035cc:	a314      	add	r3, pc, #80	@ (adr r3, 8003620 <update_setpoints+0x2e8>)
 80035ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035d2:	f7fd faab 	bl	8000b2c <__aeabi_dcmplt>
 80035d6:	4603      	mov	r3, r0
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d003      	beq.n	80035e4 <update_setpoints+0x2ac>
 80035dc:	4b12      	ldr	r3, [pc, #72]	@ (8003628 <update_setpoints+0x2f0>)
 80035de:	2200      	movs	r2, #0
 80035e0:	701a      	strb	r2, [r3, #0]
 80035e2:	e002      	b.n	80035ea <update_setpoints+0x2b2>
	else last_cmd_vel_neq_0[0] = 1;
 80035e4:	4b10      	ldr	r3, [pc, #64]	@ (8003628 <update_setpoints+0x2f0>)
 80035e6:	2201      	movs	r2, #1
 80035e8:	701a      	strb	r2, [r3, #0]

	if(first_update) {
 80035ea:	4b11      	ldr	r3, [pc, #68]	@ (8003630 <update_setpoints+0x2f8>)
 80035ec:	781b      	ldrb	r3, [r3, #0]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d00f      	beq.n	8003612 <update_setpoints+0x2da>
		setpoints[0] = * water_pressure;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a0d      	ldr	r2, [pc, #52]	@ (800362c <update_setpoints+0x2f4>)
 80035f8:	6013      	str	r3, [r2, #0]
		setpoints[1] = rpy_rads[0];
 80035fa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80035fc:	4a0b      	ldr	r2, [pc, #44]	@ (800362c <update_setpoints+0x2f4>)
 80035fe:	6053      	str	r3, [r2, #4]
		setpoints[2] = rpy_rads[1];
 8003600:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003602:	4a0a      	ldr	r2, [pc, #40]	@ (800362c <update_setpoints+0x2f4>)
 8003604:	6093      	str	r3, [r2, #8]
		setpoints[3] = rpy_rads[2];
 8003606:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003608:	4a08      	ldr	r2, [pc, #32]	@ (800362c <update_setpoints+0x2f4>)
 800360a:	60d3      	str	r3, [r2, #12]
		first_update = 0;
 800360c:	4b08      	ldr	r3, [pc, #32]	@ (8003630 <update_setpoints+0x2f8>)
 800360e:	2200      	movs	r2, #0
 8003610:	701a      	strb	r2, [r3, #0]
	}

	return count;
 8003612:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8003616:	4618      	mov	r0, r3
 8003618:	3778      	adds	r7, #120	@ 0x78
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
 800361e:	bf00      	nop
 8003620:	9999999a 	.word	0x9999999a
 8003624:	3fa99999 	.word	0x3fa99999
 8003628:	200000c8 	.word	0x200000c8
 800362c:	20008a68 	.word	0x20008a68
 8003630:	200000cc 	.word	0x200000cc
 8003634:	00000000 	.word	0x00000000

08003638 <calculate_pwm_with_pid>:
        arm_pid_init_f32(&pids[i], 0);
    }
}

arm_status calculate_pwm_with_pid(const float joystick_input[6], uint32_t pwm_output[8], const Quaternion *orientation_quaternion,
		const float *water_pressure) {
 8003638:	b580      	push	{r7, lr}
 800363a:	b0b0      	sub	sp, #192	@ 0xc0
 800363c:	af00      	add	r7, sp, #0
 800363e:	60f8      	str	r0, [r7, #12]
 8003640:	60b9      	str	r1, [r7, #8]
 8003642:	607a      	str	r2, [r7, #4]
 8003644:	603b      	str	r3, [r7, #0]
	// The order for 4-elements arrays is: z, roll, pitch, yaw
	// calculate current values
	float current_values[4];
	calculate_rpy_from_quaternion(orientation_quaternion, &current_values[1]);
 8003646:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800364a:	3304      	adds	r3, #4
 800364c:	4619      	mov	r1, r3
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f7ff fdb8 	bl	80031c4 <calculate_rpy_from_quaternion>

	// TODO conversion from water pressure to depth
	current_values[0] = *water_pressure;
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	66fb      	str	r3, [r7, #108]	@ 0x6c

	update_setpoints(joystick_input, orientation_quaternion, water_pressure);
 800365a:	683a      	ldr	r2, [r7, #0]
 800365c:	6879      	ldr	r1, [r7, #4]
 800365e:	68f8      	ldr	r0, [r7, #12]
 8003660:	f7ff fe6a 	bl	8003338 <update_setpoints>
	float input_values[6];
	for(uint8_t i = 0; i < 6; i++) input_values[i] = joystick_input[i];
 8003664:	2300      	movs	r3, #0
 8003666:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
 800366a:	e011      	b.n	8003690 <calculate_pwm_with_pid+0x58>
 800366c:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	68fa      	ldr	r2, [r7, #12]
 8003674:	441a      	add	r2, r3
 8003676:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 800367a:	6812      	ldr	r2, [r2, #0]
 800367c:	009b      	lsls	r3, r3, #2
 800367e:	33c0      	adds	r3, #192	@ 0xc0
 8003680:	443b      	add	r3, r7
 8003682:	3b6c      	subs	r3, #108	@ 0x6c
 8003684:	601a      	str	r2, [r3, #0]
 8003686:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 800368a:	3301      	adds	r3, #1
 800368c:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
 8003690:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 8003694:	2b05      	cmp	r3, #5
 8003696:	d9e9      	bls.n	800366c <calculate_pwm_with_pid+0x34>

	float roll_pid_feedback = arm_pid_f32(&pids[1], setpoints[1] - current_values[1]);
 8003698:	4bcd      	ldr	r3, [pc, #820]	@ (80039d0 <calculate_pwm_with_pid+0x398>)
 800369a:	ed93 7a01 	vldr	s14, [r3, #4]
 800369e:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 80036a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036a6:	4bcb      	ldr	r3, [pc, #812]	@ (80039d4 <calculate_pwm_with_pid+0x39c>)
 80036a8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80036ac:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 80036b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80036b4:	ed93 7a00 	vldr	s14, [r3]
 80036b8:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 80036bc:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80036c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80036c4:	edd3 6a01 	vldr	s13, [r3, #4]
 80036c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80036cc:	edd3 7a03 	vldr	s15, [r3, #12]
 80036d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 80036d4:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80036d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80036dc:	edd3 6a02 	vldr	s13, [r3, #8]
 80036e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80036e4:	edd3 7a04 	vldr	s15, [r3, #16]
 80036e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80036ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 80036f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80036f4:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 80036f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036fc:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c

    /* Update state */
    S->state[1] = S->state[0];
 8003700:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003704:	68da      	ldr	r2, [r3, #12]
 8003706:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800370a:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 800370c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003710:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003714:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8003716:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800371a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800371c:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 800371e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003720:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
	float pitch_pid_feedback = arm_pid_f32(&pids[2], setpoints[2] - current_values[2]);
 8003724:	4baa      	ldr	r3, [pc, #680]	@ (80039d0 <calculate_pwm_with_pid+0x398>)
 8003726:	ed93 7a02 	vldr	s14, [r3, #8]
 800372a:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 800372e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003732:	4ba9      	ldr	r3, [pc, #676]	@ (80039d8 <calculate_pwm_with_pid+0x3a0>)
 8003734:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003738:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
    out = (S->A0 * in) +
 800373c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003740:	ed93 7a00 	vldr	s14, [r3]
 8003744:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8003748:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 800374c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003750:	edd3 6a01 	vldr	s13, [r3, #4]
 8003754:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003758:	edd3 7a03 	vldr	s15, [r3, #12]
 800375c:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8003760:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8003764:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003768:	edd3 6a02 	vldr	s13, [r3, #8]
 800376c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003770:	edd3 7a04 	vldr	s15, [r3, #16]
 8003774:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003778:	ee37 7a27 	vadd.f32	s14, s14, s15
 800377c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003780:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8003784:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003788:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88
    S->state[1] = S->state[0];
 800378c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003790:	68da      	ldr	r2, [r3, #12]
 8003792:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003796:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8003798:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800379c:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80037a0:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 80037a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80037a6:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80037aa:	615a      	str	r2, [r3, #20]
    return (out);
 80037ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80037b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
	float yaw_pid_feedback = arm_pid_f32(&pids[3], setpoints[3] - current_values[3]);
 80037b4:	4b86      	ldr	r3, [pc, #536]	@ (80039d0 <calculate_pwm_with_pid+0x398>)
 80037b6:	ed93 7a03 	vldr	s14, [r3, #12]
 80037ba:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 80037be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80037c2:	4b86      	ldr	r3, [pc, #536]	@ (80039dc <calculate_pwm_with_pid+0x3a4>)
 80037c4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80037c8:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
    out = (S->A0 * in) +
 80037cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80037d0:	ed93 7a00 	vldr	s14, [r3]
 80037d4:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 80037d8:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80037dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80037e0:	edd3 6a01 	vldr	s13, [r3, #4]
 80037e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80037e8:	edd3 7a03 	vldr	s15, [r3, #12]
 80037ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 80037f0:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80037f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80037f8:	edd3 6a02 	vldr	s13, [r3, #8]
 80037fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003800:	edd3 7a04 	vldr	s15, [r3, #16]
 8003804:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003808:	ee37 7a27 	vadd.f32	s14, s14, s15
 800380c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003810:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8003814:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003818:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
    S->state[1] = S->state[0];
 800381c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003820:	68da      	ldr	r2, [r3, #12]
 8003822:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003826:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8003828:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800382c:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8003830:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8003832:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003836:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800383a:	615a      	str	r2, [r3, #20]
    return (out);
 800383c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003840:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
	 * we need to convert the output of the PID to the body frame in order to modify the input, in order to achieve the desired depth hold.
	*/
	// Applies the inverse rotation of the rov-body-frame (RBF) from the earth-fixed-body-frame (EFBF) ( described by the orientation quaternion ),
	// in order to compute the coordinates of the z_out vector with respect to the RBF.
	Quaternion z_out_q;
	z_out_q.w = z_out_q.x = z_out_q.y = 0;
 8003844:	f04f 0300 	mov.w	r3, #0
 8003848:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800384a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800384c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800384e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003850:	647b      	str	r3, [r7, #68]	@ 0x44
	z_out_q.z = arm_pid_f32(&pids[0], setpoints[0] - current_values[0]);
 8003852:	4b5f      	ldr	r3, [pc, #380]	@ (80039d0 <calculate_pwm_with_pid+0x398>)
 8003854:	ed93 7a00 	vldr	s14, [r3]
 8003858:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 800385c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003860:	4b5f      	ldr	r3, [pc, #380]	@ (80039e0 <calculate_pwm_with_pid+0x3a8>)
 8003862:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003866:	edc7 7a29 	vstr	s15, [r7, #164]	@ 0xa4
    out = (S->A0 * in) +
 800386a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800386e:	ed93 7a00 	vldr	s14, [r3]
 8003872:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 8003876:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 800387a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800387e:	edd3 6a01 	vldr	s13, [r3, #4]
 8003882:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003886:	edd3 7a03 	vldr	s15, [r3, #12]
 800388a:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 800388e:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8003892:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003896:	edd3 6a02 	vldr	s13, [r3, #8]
 800389a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800389e:	edd3 7a04 	vldr	s15, [r3, #16]
 80038a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80038a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80038aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80038ae:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 80038b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038b6:	edc7 7a28 	vstr	s15, [r7, #160]	@ 0xa0
    S->state[1] = S->state[0];
 80038ba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80038be:	68da      	ldr	r2, [r3, #12]
 80038c0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80038c4:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 80038c6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80038ca:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 80038ce:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 80038d0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80038d4:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 80038d8:	615a      	str	r2, [r3, #20]
    return (out);
 80038da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80038de:	653b      	str	r3, [r7, #80]	@ 0x50
	Quaternion q_inv = {0};
 80038e0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80038e4:	2200      	movs	r2, #0
 80038e6:	601a      	str	r2, [r3, #0]
 80038e8:	605a      	str	r2, [r3, #4]
 80038ea:	609a      	str	r2, [r3, #8]
 80038ec:	60da      	str	r2, [r3, #12]
	invert_quaternion(orientation_quaternion, &q_inv);
 80038ee:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80038f2:	4619      	mov	r1, r3
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f7ff fb3d 	bl	8002f74 <invert_quaternion>
	
	// applies the inverse rotation to the z_out_q vector
	Quaternion intermediate_result = {0};
 80038fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80038fe:	2200      	movs	r2, #0
 8003900:	601a      	str	r2, [r3, #0]
 8003902:	605a      	str	r2, [r3, #4]
 8003904:	609a      	str	r2, [r3, #8]
 8003906:	60da      	str	r2, [r3, #12]
	Quaternion z_out_RBF = {0};
 8003908:	f107 0314 	add.w	r3, r7, #20
 800390c:	2200      	movs	r2, #0
 800390e:	601a      	str	r2, [r3, #0]
 8003910:	605a      	str	r2, [r3, #4]
 8003912:	609a      	str	r2, [r3, #8]
 8003914:	60da      	str	r2, [r3, #12]
	// rotating a vector v by q_inv = q_inv * v * q_inv_inv = q_inv * v * q
	multiply_quaternions(&q_inv, &z_out_q, &intermediate_result);
 8003916:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800391a:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 800391e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003922:	4618      	mov	r0, r3
 8003924:	f7ff fb9e 	bl	8003064 <multiply_quaternions>
	multiply_quaternions(&intermediate_result, orientation_quaternion, &z_out_RBF);
 8003928:	f107 0214 	add.w	r2, r7, #20
 800392c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003930:	6879      	ldr	r1, [r7, #4]
 8003932:	4618      	mov	r0, r3
 8003934:	f7ff fb96 	bl	8003064 <multiply_quaternions>

	// apply the feedback on x y z axis if and only if either the feedback is approx 0, or the input value by the user is approx 0.
	// This condition must be met for every axis value
	uint8_t x_condition = fabsf(z_out_RBF.x) < TOLERANCE || fabsf(input_values[0]) < TOLERANCE;
 8003938:	edd7 7a06 	vldr	s15, [r7, #24]
 800393c:	eef0 7ae7 	vabs.f32	s15, s15
 8003940:	ee17 0a90 	vmov	r0, s15
 8003944:	f7fc fe28 	bl	8000598 <__aeabi_f2d>
 8003948:	a31f      	add	r3, pc, #124	@ (adr r3, 80039c8 <calculate_pwm_with_pid+0x390>)
 800394a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800394e:	f7fd f8ed 	bl	8000b2c <__aeabi_dcmplt>
 8003952:	4603      	mov	r3, r0
 8003954:	2b00      	cmp	r3, #0
 8003956:	d10f      	bne.n	8003978 <calculate_pwm_with_pid+0x340>
 8003958:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800395c:	eef0 7ae7 	vabs.f32	s15, s15
 8003960:	ee17 0a90 	vmov	r0, s15
 8003964:	f7fc fe18 	bl	8000598 <__aeabi_f2d>
 8003968:	a317      	add	r3, pc, #92	@ (adr r3, 80039c8 <calculate_pwm_with_pid+0x390>)
 800396a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800396e:	f7fd f8dd 	bl	8000b2c <__aeabi_dcmplt>
 8003972:	4603      	mov	r3, r0
 8003974:	2b00      	cmp	r3, #0
 8003976:	d001      	beq.n	800397c <calculate_pwm_with_pid+0x344>
 8003978:	2301      	movs	r3, #1
 800397a:	e000      	b.n	800397e <calculate_pwm_with_pid+0x346>
 800397c:	2300      	movs	r3, #0
 800397e:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
	uint8_t y_condition = fabsf(z_out_RBF.y) < TOLERANCE || fabsf(input_values[1]) < TOLERANCE;
 8003982:	edd7 7a07 	vldr	s15, [r7, #28]
 8003986:	eef0 7ae7 	vabs.f32	s15, s15
 800398a:	ee17 0a90 	vmov	r0, s15
 800398e:	f7fc fe03 	bl	8000598 <__aeabi_f2d>
 8003992:	a30d      	add	r3, pc, #52	@ (adr r3, 80039c8 <calculate_pwm_with_pid+0x390>)
 8003994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003998:	f7fd f8c8 	bl	8000b2c <__aeabi_dcmplt>
 800399c:	4603      	mov	r3, r0
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d10f      	bne.n	80039c2 <calculate_pwm_with_pid+0x38a>
 80039a2:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 80039a6:	eef0 7ae7 	vabs.f32	s15, s15
 80039aa:	ee17 0a90 	vmov	r0, s15
 80039ae:	f7fc fdf3 	bl	8000598 <__aeabi_f2d>
 80039b2:	a305      	add	r3, pc, #20	@ (adr r3, 80039c8 <calculate_pwm_with_pid+0x390>)
 80039b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039b8:	f7fd f8b8 	bl	8000b2c <__aeabi_dcmplt>
 80039bc:	4603      	mov	r3, r0
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d010      	beq.n	80039e4 <calculate_pwm_with_pid+0x3ac>
 80039c2:	2301      	movs	r3, #1
 80039c4:	e00f      	b.n	80039e6 <calculate_pwm_with_pid+0x3ae>
 80039c6:	bf00      	nop
 80039c8:	9999999a 	.word	0x9999999a
 80039cc:	3fa99999 	.word	0x3fa99999
 80039d0:	20008a68 	.word	0x20008a68
 80039d4:	20008a9c 	.word	0x20008a9c
 80039d8:	20008ac0 	.word	0x20008ac0
 80039dc:	20008ae4 	.word	0x20008ae4
 80039e0:	20008a78 	.word	0x20008a78
 80039e4:	2300      	movs	r3, #0
 80039e6:	f887 30ae 	strb.w	r3, [r7, #174]	@ 0xae
	uint8_t z_condition = fabsf(z_out_RBF.z) < TOLERANCE || fabsf(input_values[2]) < TOLERANCE;
 80039ea:	edd7 7a08 	vldr	s15, [r7, #32]
 80039ee:	eef0 7ae7 	vabs.f32	s15, s15
 80039f2:	ee17 0a90 	vmov	r0, s15
 80039f6:	f7fc fdcf 	bl	8000598 <__aeabi_f2d>
 80039fa:	a363      	add	r3, pc, #396	@ (adr r3, 8003b88 <calculate_pwm_with_pid+0x550>)
 80039fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a00:	f7fd f894 	bl	8000b2c <__aeabi_dcmplt>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d10f      	bne.n	8003a2a <calculate_pwm_with_pid+0x3f2>
 8003a0a:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8003a0e:	eef0 7ae7 	vabs.f32	s15, s15
 8003a12:	ee17 0a90 	vmov	r0, s15
 8003a16:	f7fc fdbf 	bl	8000598 <__aeabi_f2d>
 8003a1a:	a35b      	add	r3, pc, #364	@ (adr r3, 8003b88 <calculate_pwm_with_pid+0x550>)
 8003a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a20:	f7fd f884 	bl	8000b2c <__aeabi_dcmplt>
 8003a24:	4603      	mov	r3, r0
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d001      	beq.n	8003a2e <calculate_pwm_with_pid+0x3f6>
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e000      	b.n	8003a30 <calculate_pwm_with_pid+0x3f8>
 8003a2e:	2300      	movs	r3, #0
 8003a30:	f887 30ad 	strb.w	r3, [r7, #173]	@ 0xad

	if (x_condition && y_condition && z_condition) {
 8003a34:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d01f      	beq.n	8003a7c <calculate_pwm_with_pid+0x444>
 8003a3c:	f897 30ae 	ldrb.w	r3, [r7, #174]	@ 0xae
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d01b      	beq.n	8003a7c <calculate_pwm_with_pid+0x444>
 8003a44:	f897 30ad 	ldrb.w	r3, [r7, #173]	@ 0xad
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d017      	beq.n	8003a7c <calculate_pwm_with_pid+0x444>
		input_values[0] += z_out_RBF.x;
 8003a4c:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8003a50:	edd7 7a06 	vldr	s15, [r7, #24]
 8003a54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a58:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
		input_values[1] += z_out_RBF.y;
 8003a5c:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8003a60:	edd7 7a07 	vldr	s15, [r7, #28]
 8003a64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a68:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
		input_values[2] += z_out_RBF.z;
 8003a6c:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8003a70:	edd7 7a08 	vldr	s15, [r7, #32]
 8003a74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a78:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
	}

	// roll
	if (fabsf(pitch_pid_feedback) < TOLERANCE || fabsf(input_values[3]) < TOLERANCE) {
 8003a7c:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 8003a80:	eef0 7ae7 	vabs.f32	s15, s15
 8003a84:	ee17 0a90 	vmov	r0, s15
 8003a88:	f7fc fd86 	bl	8000598 <__aeabi_f2d>
 8003a8c:	a33e      	add	r3, pc, #248	@ (adr r3, 8003b88 <calculate_pwm_with_pid+0x550>)
 8003a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a92:	f7fd f84b 	bl	8000b2c <__aeabi_dcmplt>
 8003a96:	4603      	mov	r3, r0
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d10f      	bne.n	8003abc <calculate_pwm_with_pid+0x484>
 8003a9c:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8003aa0:	eef0 7ae7 	vabs.f32	s15, s15
 8003aa4:	ee17 0a90 	vmov	r0, s15
 8003aa8:	f7fc fd76 	bl	8000598 <__aeabi_f2d>
 8003aac:	a336      	add	r3, pc, #216	@ (adr r3, 8003b88 <calculate_pwm_with_pid+0x550>)
 8003aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ab2:	f7fd f83b 	bl	8000b2c <__aeabi_dcmplt>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d007      	beq.n	8003acc <calculate_pwm_with_pid+0x494>
		input_values[3] += roll_pid_feedback;
 8003abc:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8003ac0:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 8003ac4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ac8:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
	}
	// pitch
	if (fabsf(roll_pid_feedback) < TOLERANCE || fabsf(input_values[4]) < TOLERANCE) {
 8003acc:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 8003ad0:	eef0 7ae7 	vabs.f32	s15, s15
 8003ad4:	ee17 0a90 	vmov	r0, s15
 8003ad8:	f7fc fd5e 	bl	8000598 <__aeabi_f2d>
 8003adc:	a32a      	add	r3, pc, #168	@ (adr r3, 8003b88 <calculate_pwm_with_pid+0x550>)
 8003ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ae2:	f7fd f823 	bl	8000b2c <__aeabi_dcmplt>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d10f      	bne.n	8003b0c <calculate_pwm_with_pid+0x4d4>
 8003aec:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8003af0:	eef0 7ae7 	vabs.f32	s15, s15
 8003af4:	ee17 0a90 	vmov	r0, s15
 8003af8:	f7fc fd4e 	bl	8000598 <__aeabi_f2d>
 8003afc:	a322      	add	r3, pc, #136	@ (adr r3, 8003b88 <calculate_pwm_with_pid+0x550>)
 8003afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b02:	f7fd f813 	bl	8000b2c <__aeabi_dcmplt>
 8003b06:	4603      	mov	r3, r0
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d007      	beq.n	8003b1c <calculate_pwm_with_pid+0x4e4>
		input_values[4] += pitch_pid_feedback;
 8003b0c:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 8003b10:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 8003b14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b18:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
	}
	// yaw
	if (fabsf(yaw_pid_feedback) < TOLERANCE || fabsf(input_values[5]) < TOLERANCE) {
 8003b1c:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8003b20:	eef0 7ae7 	vabs.f32	s15, s15
 8003b24:	ee17 0a90 	vmov	r0, s15
 8003b28:	f7fc fd36 	bl	8000598 <__aeabi_f2d>
 8003b2c:	a316      	add	r3, pc, #88	@ (adr r3, 8003b88 <calculate_pwm_with_pid+0x550>)
 8003b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b32:	f7fc fffb 	bl	8000b2c <__aeabi_dcmplt>
 8003b36:	4603      	mov	r3, r0
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d10f      	bne.n	8003b5c <calculate_pwm_with_pid+0x524>
 8003b3c:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8003b40:	eef0 7ae7 	vabs.f32	s15, s15
 8003b44:	ee17 0a90 	vmov	r0, s15
 8003b48:	f7fc fd26 	bl	8000598 <__aeabi_f2d>
 8003b4c:	a30e      	add	r3, pc, #56	@ (adr r3, 8003b88 <calculate_pwm_with_pid+0x550>)
 8003b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b52:	f7fc ffeb 	bl	8000b2c <__aeabi_dcmplt>
 8003b56:	4603      	mov	r3, r0
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d007      	beq.n	8003b6c <calculate_pwm_with_pid+0x534>
		input_values[5] += yaw_pid_feedback;
 8003b5c:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 8003b60:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8003b64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b68:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68
	}

	return calculate_pwm(&input_values, pwm_output);
 8003b6c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003b70:	68b9      	ldr	r1, [r7, #8]
 8003b72:	4618      	mov	r0, r3
 8003b74:	f7ff f944 	bl	8002e00 <calculate_pwm>
 8003b78:	4603      	mov	r3, r0
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	37c0      	adds	r7, #192	@ 0xc0
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	f3af 8000 	nop.w
 8003b88:	9999999a 	.word	0x9999999a
 8003b8c:	3fa99999 	.word	0x3fa99999

08003b90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003b90:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003bc8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003b94:	f7fe fe4e 	bl	8002834 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003b98:	480c      	ldr	r0, [pc, #48]	@ (8003bcc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003b9a:	490d      	ldr	r1, [pc, #52]	@ (8003bd0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003b9c:	4a0d      	ldr	r2, [pc, #52]	@ (8003bd4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003b9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ba0:	e002      	b.n	8003ba8 <LoopCopyDataInit>

08003ba2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003ba2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ba4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003ba6:	3304      	adds	r3, #4

08003ba8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ba8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003baa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003bac:	d3f9      	bcc.n	8003ba2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003bae:	4a0a      	ldr	r2, [pc, #40]	@ (8003bd8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003bb0:	4c0a      	ldr	r4, [pc, #40]	@ (8003bdc <LoopFillZerobss+0x22>)
  movs r3, #0
 8003bb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003bb4:	e001      	b.n	8003bba <LoopFillZerobss>

08003bb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003bb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003bb8:	3204      	adds	r2, #4

08003bba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003bba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003bbc:	d3fb      	bcc.n	8003bb6 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8003bbe:	f017 fc43 	bl	801b448 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003bc2:	f7fe fa47 	bl	8002054 <main>
  bx  lr    
 8003bc6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003bc8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8003bcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003bd0:	20000acc 	.word	0x20000acc
  ldr r2, =_sidata
 8003bd4:	0801e168 	.word	0x0801e168
  ldr r2, =_sbss
 8003bd8:	20000ad0 	.word	0x20000ad0
  ldr r4, =_ebss
 8003bdc:	200160ac 	.word	0x200160ac

08003be0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003be0:	e7fe      	b.n	8003be0 <ADC_IRQHandler>
	...

08003be4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003be8:	4b0e      	ldr	r3, [pc, #56]	@ (8003c24 <HAL_Init+0x40>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a0d      	ldr	r2, [pc, #52]	@ (8003c24 <HAL_Init+0x40>)
 8003bee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003bf2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003bf4:	4b0b      	ldr	r3, [pc, #44]	@ (8003c24 <HAL_Init+0x40>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a0a      	ldr	r2, [pc, #40]	@ (8003c24 <HAL_Init+0x40>)
 8003bfa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003bfe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003c00:	4b08      	ldr	r3, [pc, #32]	@ (8003c24 <HAL_Init+0x40>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a07      	ldr	r2, [pc, #28]	@ (8003c24 <HAL_Init+0x40>)
 8003c06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c0c:	2003      	movs	r0, #3
 8003c0e:	f000 f8d8 	bl	8003dc2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003c12:	200f      	movs	r0, #15
 8003c14:	f7fe fcac 	bl	8002570 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003c18:	f7fe fc7e 	bl	8002518 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003c1c:	2300      	movs	r3, #0
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	bf00      	nop
 8003c24:	40023c00 	.word	0x40023c00

08003c28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003c2c:	4b06      	ldr	r3, [pc, #24]	@ (8003c48 <HAL_IncTick+0x20>)
 8003c2e:	781b      	ldrb	r3, [r3, #0]
 8003c30:	461a      	mov	r2, r3
 8003c32:	4b06      	ldr	r3, [pc, #24]	@ (8003c4c <HAL_IncTick+0x24>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4413      	add	r3, r2
 8003c38:	4a04      	ldr	r2, [pc, #16]	@ (8003c4c <HAL_IncTick+0x24>)
 8003c3a:	6013      	str	r3, [r2, #0]
}
 8003c3c:	bf00      	nop
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr
 8003c46:	bf00      	nop
 8003c48:	200000d4 	.word	0x200000d4
 8003c4c:	20008b08 	.word	0x20008b08

08003c50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c50:	b480      	push	{r7}
 8003c52:	af00      	add	r7, sp, #0
  return uwTick;
 8003c54:	4b03      	ldr	r3, [pc, #12]	@ (8003c64 <HAL_GetTick+0x14>)
 8003c56:	681b      	ldr	r3, [r3, #0]
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr
 8003c62:	bf00      	nop
 8003c64:	20008b08 	.word	0x20008b08

08003c68 <__NVIC_SetPriorityGrouping>:
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b085      	sub	sp, #20
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	f003 0307 	and.w	r3, r3, #7
 8003c76:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c78:	4b0c      	ldr	r3, [pc, #48]	@ (8003cac <__NVIC_SetPriorityGrouping+0x44>)
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c7e:	68ba      	ldr	r2, [r7, #8]
 8003c80:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003c84:	4013      	ands	r3, r2
 8003c86:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c90:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003c94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c9a:	4a04      	ldr	r2, [pc, #16]	@ (8003cac <__NVIC_SetPriorityGrouping+0x44>)
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	60d3      	str	r3, [r2, #12]
}
 8003ca0:	bf00      	nop
 8003ca2:	3714      	adds	r7, #20
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr
 8003cac:	e000ed00 	.word	0xe000ed00

08003cb0 <__NVIC_GetPriorityGrouping>:
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003cb4:	4b04      	ldr	r3, [pc, #16]	@ (8003cc8 <__NVIC_GetPriorityGrouping+0x18>)
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	0a1b      	lsrs	r3, r3, #8
 8003cba:	f003 0307 	and.w	r3, r3, #7
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr
 8003cc8:	e000ed00 	.word	0xe000ed00

08003ccc <__NVIC_EnableIRQ>:
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b083      	sub	sp, #12
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	db0b      	blt.n	8003cf6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003cde:	79fb      	ldrb	r3, [r7, #7]
 8003ce0:	f003 021f 	and.w	r2, r3, #31
 8003ce4:	4907      	ldr	r1, [pc, #28]	@ (8003d04 <__NVIC_EnableIRQ+0x38>)
 8003ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cea:	095b      	lsrs	r3, r3, #5
 8003cec:	2001      	movs	r0, #1
 8003cee:	fa00 f202 	lsl.w	r2, r0, r2
 8003cf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003cf6:	bf00      	nop
 8003cf8:	370c      	adds	r7, #12
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr
 8003d02:	bf00      	nop
 8003d04:	e000e100 	.word	0xe000e100

08003d08 <__NVIC_SetPriority>:
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b083      	sub	sp, #12
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	4603      	mov	r3, r0
 8003d10:	6039      	str	r1, [r7, #0]
 8003d12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	db0a      	blt.n	8003d32 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	b2da      	uxtb	r2, r3
 8003d20:	490c      	ldr	r1, [pc, #48]	@ (8003d54 <__NVIC_SetPriority+0x4c>)
 8003d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d26:	0112      	lsls	r2, r2, #4
 8003d28:	b2d2      	uxtb	r2, r2
 8003d2a:	440b      	add	r3, r1
 8003d2c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003d30:	e00a      	b.n	8003d48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	b2da      	uxtb	r2, r3
 8003d36:	4908      	ldr	r1, [pc, #32]	@ (8003d58 <__NVIC_SetPriority+0x50>)
 8003d38:	79fb      	ldrb	r3, [r7, #7]
 8003d3a:	f003 030f 	and.w	r3, r3, #15
 8003d3e:	3b04      	subs	r3, #4
 8003d40:	0112      	lsls	r2, r2, #4
 8003d42:	b2d2      	uxtb	r2, r2
 8003d44:	440b      	add	r3, r1
 8003d46:	761a      	strb	r2, [r3, #24]
}
 8003d48:	bf00      	nop
 8003d4a:	370c      	adds	r7, #12
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr
 8003d54:	e000e100 	.word	0xe000e100
 8003d58:	e000ed00 	.word	0xe000ed00

08003d5c <NVIC_EncodePriority>:
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b089      	sub	sp, #36	@ 0x24
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	60f8      	str	r0, [r7, #12]
 8003d64:	60b9      	str	r1, [r7, #8]
 8003d66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	f003 0307 	and.w	r3, r3, #7
 8003d6e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d70:	69fb      	ldr	r3, [r7, #28]
 8003d72:	f1c3 0307 	rsb	r3, r3, #7
 8003d76:	2b04      	cmp	r3, #4
 8003d78:	bf28      	it	cs
 8003d7a:	2304      	movcs	r3, #4
 8003d7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d7e:	69fb      	ldr	r3, [r7, #28]
 8003d80:	3304      	adds	r3, #4
 8003d82:	2b06      	cmp	r3, #6
 8003d84:	d902      	bls.n	8003d8c <NVIC_EncodePriority+0x30>
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	3b03      	subs	r3, #3
 8003d8a:	e000      	b.n	8003d8e <NVIC_EncodePriority+0x32>
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d90:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003d94:	69bb      	ldr	r3, [r7, #24]
 8003d96:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9a:	43da      	mvns	r2, r3
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	401a      	ands	r2, r3
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003da4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	fa01 f303 	lsl.w	r3, r1, r3
 8003dae:	43d9      	mvns	r1, r3
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003db4:	4313      	orrs	r3, r2
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3724      	adds	r7, #36	@ 0x24
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr

08003dc2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003dc2:	b580      	push	{r7, lr}
 8003dc4:	b082      	sub	sp, #8
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f7ff ff4c 	bl	8003c68 <__NVIC_SetPriorityGrouping>
}
 8003dd0:	bf00      	nop
 8003dd2:	3708      	adds	r7, #8
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}

08003dd8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b086      	sub	sp, #24
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	4603      	mov	r3, r0
 8003de0:	60b9      	str	r1, [r7, #8]
 8003de2:	607a      	str	r2, [r7, #4]
 8003de4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003de6:	2300      	movs	r3, #0
 8003de8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003dea:	f7ff ff61 	bl	8003cb0 <__NVIC_GetPriorityGrouping>
 8003dee:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003df0:	687a      	ldr	r2, [r7, #4]
 8003df2:	68b9      	ldr	r1, [r7, #8]
 8003df4:	6978      	ldr	r0, [r7, #20]
 8003df6:	f7ff ffb1 	bl	8003d5c <NVIC_EncodePriority>
 8003dfa:	4602      	mov	r2, r0
 8003dfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e00:	4611      	mov	r1, r2
 8003e02:	4618      	mov	r0, r3
 8003e04:	f7ff ff80 	bl	8003d08 <__NVIC_SetPriority>
}
 8003e08:	bf00      	nop
 8003e0a:	3718      	adds	r7, #24
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}

08003e10 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b082      	sub	sp, #8
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	4603      	mov	r3, r0
 8003e18:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f7ff ff54 	bl	8003ccc <__NVIC_EnableIRQ>
}
 8003e24:	bf00      	nop
 8003e26:	3708      	adds	r7, #8
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}

08003e2c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b086      	sub	sp, #24
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003e34:	2300      	movs	r3, #0
 8003e36:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003e38:	f7ff ff0a 	bl	8003c50 <HAL_GetTick>
 8003e3c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d101      	bne.n	8003e48 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	e099      	b.n	8003f7c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2202      	movs	r2, #2
 8003e4c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2200      	movs	r2, #0
 8003e54:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f022 0201 	bic.w	r2, r2, #1
 8003e66:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e68:	e00f      	b.n	8003e8a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003e6a:	f7ff fef1 	bl	8003c50 <HAL_GetTick>
 8003e6e:	4602      	mov	r2, r0
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	1ad3      	subs	r3, r2, r3
 8003e74:	2b05      	cmp	r3, #5
 8003e76:	d908      	bls.n	8003e8a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2220      	movs	r2, #32
 8003e7c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2203      	movs	r2, #3
 8003e82:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003e86:	2303      	movs	r3, #3
 8003e88:	e078      	b.n	8003f7c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 0301 	and.w	r3, r3, #1
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d1e8      	bne.n	8003e6a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003ea0:	697a      	ldr	r2, [r7, #20]
 8003ea2:	4b38      	ldr	r3, [pc, #224]	@ (8003f84 <HAL_DMA_Init+0x158>)
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	685a      	ldr	r2, [r3, #4]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003eb6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	691b      	ldr	r3, [r3, #16]
 8003ebc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ec2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	699b      	ldr	r3, [r3, #24]
 8003ec8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ece:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6a1b      	ldr	r3, [r3, #32]
 8003ed4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ed6:	697a      	ldr	r2, [r7, #20]
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ee0:	2b04      	cmp	r3, #4
 8003ee2:	d107      	bne.n	8003ef4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eec:	4313      	orrs	r3, r2
 8003eee:	697a      	ldr	r2, [r7, #20]
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	697a      	ldr	r2, [r7, #20]
 8003efa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	695b      	ldr	r3, [r3, #20]
 8003f02:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	f023 0307 	bic.w	r3, r3, #7
 8003f0a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f10:	697a      	ldr	r2, [r7, #20]
 8003f12:	4313      	orrs	r3, r2
 8003f14:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f1a:	2b04      	cmp	r3, #4
 8003f1c:	d117      	bne.n	8003f4e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f22:	697a      	ldr	r2, [r7, #20]
 8003f24:	4313      	orrs	r3, r2
 8003f26:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d00e      	beq.n	8003f4e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	f000 fb01 	bl	8004538 <DMA_CheckFifoParam>
 8003f36:	4603      	mov	r3, r0
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d008      	beq.n	8003f4e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2240      	movs	r2, #64	@ 0x40
 8003f40:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2201      	movs	r2, #1
 8003f46:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e016      	b.n	8003f7c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	697a      	ldr	r2, [r7, #20]
 8003f54:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f000 fab8 	bl	80044cc <DMA_CalcBaseAndBitshift>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f64:	223f      	movs	r2, #63	@ 0x3f
 8003f66:	409a      	lsls	r2, r3
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2201      	movs	r2, #1
 8003f76:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003f7a:	2300      	movs	r3, #0
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3718      	adds	r7, #24
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}
 8003f84:	f010803f 	.word	0xf010803f

08003f88 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b086      	sub	sp, #24
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	60f8      	str	r0, [r7, #12]
 8003f90:	60b9      	str	r1, [r7, #8]
 8003f92:	607a      	str	r2, [r7, #4]
 8003f94:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f96:	2300      	movs	r3, #0
 8003f98:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f9e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d101      	bne.n	8003fae <HAL_DMA_Start_IT+0x26>
 8003faa:	2302      	movs	r3, #2
 8003fac:	e040      	b.n	8004030 <HAL_DMA_Start_IT+0xa8>
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d12f      	bne.n	8004022 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2202      	movs	r2, #2
 8003fc6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	68b9      	ldr	r1, [r7, #8]
 8003fd6:	68f8      	ldr	r0, [r7, #12]
 8003fd8:	f000 fa4a 	bl	8004470 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fe0:	223f      	movs	r2, #63	@ 0x3f
 8003fe2:	409a      	lsls	r2, r3
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f042 0216 	orr.w	r2, r2, #22
 8003ff6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d007      	beq.n	8004010 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f042 0208 	orr.w	r2, r2, #8
 800400e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f042 0201 	orr.w	r2, r2, #1
 800401e:	601a      	str	r2, [r3, #0]
 8004020:	e005      	b.n	800402e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2200      	movs	r2, #0
 8004026:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800402a:	2302      	movs	r3, #2
 800402c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800402e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004030:	4618      	mov	r0, r3
 8004032:	3718      	adds	r7, #24
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}

08004038 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b084      	sub	sp, #16
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004044:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004046:	f7ff fe03 	bl	8003c50 <HAL_GetTick>
 800404a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004052:	b2db      	uxtb	r3, r3
 8004054:	2b02      	cmp	r3, #2
 8004056:	d008      	beq.n	800406a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2280      	movs	r2, #128	@ 0x80
 800405c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2200      	movs	r2, #0
 8004062:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	e052      	b.n	8004110 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f022 0216 	bic.w	r2, r2, #22
 8004078:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	695a      	ldr	r2, [r3, #20]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004088:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800408e:	2b00      	cmp	r3, #0
 8004090:	d103      	bne.n	800409a <HAL_DMA_Abort+0x62>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004096:	2b00      	cmp	r3, #0
 8004098:	d007      	beq.n	80040aa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f022 0208 	bic.w	r2, r2, #8
 80040a8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f022 0201 	bic.w	r2, r2, #1
 80040b8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80040ba:	e013      	b.n	80040e4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80040bc:	f7ff fdc8 	bl	8003c50 <HAL_GetTick>
 80040c0:	4602      	mov	r2, r0
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	1ad3      	subs	r3, r2, r3
 80040c6:	2b05      	cmp	r3, #5
 80040c8:	d90c      	bls.n	80040e4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2220      	movs	r2, #32
 80040ce:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2203      	movs	r2, #3
 80040d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2200      	movs	r2, #0
 80040dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80040e0:	2303      	movs	r3, #3
 80040e2:	e015      	b.n	8004110 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 0301 	and.w	r3, r3, #1
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d1e4      	bne.n	80040bc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040f6:	223f      	movs	r2, #63	@ 0x3f
 80040f8:	409a      	lsls	r2, r3
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2201      	movs	r2, #1
 8004102:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2200      	movs	r2, #0
 800410a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800410e:	2300      	movs	r3, #0
}
 8004110:	4618      	mov	r0, r3
 8004112:	3710      	adds	r7, #16
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}

08004118 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004118:	b480      	push	{r7}
 800411a:	b083      	sub	sp, #12
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004126:	b2db      	uxtb	r3, r3
 8004128:	2b02      	cmp	r3, #2
 800412a:	d004      	beq.n	8004136 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2280      	movs	r2, #128	@ 0x80
 8004130:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	e00c      	b.n	8004150 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2205      	movs	r2, #5
 800413a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f022 0201 	bic.w	r2, r2, #1
 800414c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800414e:	2300      	movs	r3, #0
}
 8004150:	4618      	mov	r0, r3
 8004152:	370c      	adds	r7, #12
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr

0800415c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b086      	sub	sp, #24
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004164:	2300      	movs	r3, #0
 8004166:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004168:	4b8e      	ldr	r3, [pc, #568]	@ (80043a4 <HAL_DMA_IRQHandler+0x248>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a8e      	ldr	r2, [pc, #568]	@ (80043a8 <HAL_DMA_IRQHandler+0x24c>)
 800416e:	fba2 2303 	umull	r2, r3, r2, r3
 8004172:	0a9b      	lsrs	r3, r3, #10
 8004174:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800417a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004186:	2208      	movs	r2, #8
 8004188:	409a      	lsls	r2, r3
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	4013      	ands	r3, r2
 800418e:	2b00      	cmp	r3, #0
 8004190:	d01a      	beq.n	80041c8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 0304 	and.w	r3, r3, #4
 800419c:	2b00      	cmp	r3, #0
 800419e:	d013      	beq.n	80041c8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	681a      	ldr	r2, [r3, #0]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f022 0204 	bic.w	r2, r2, #4
 80041ae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041b4:	2208      	movs	r2, #8
 80041b6:	409a      	lsls	r2, r3
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041c0:	f043 0201 	orr.w	r2, r3, #1
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041cc:	2201      	movs	r2, #1
 80041ce:	409a      	lsls	r2, r3
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	4013      	ands	r3, r2
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d012      	beq.n	80041fe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	695b      	ldr	r3, [r3, #20]
 80041de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d00b      	beq.n	80041fe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041ea:	2201      	movs	r2, #1
 80041ec:	409a      	lsls	r2, r3
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041f6:	f043 0202 	orr.w	r2, r3, #2
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004202:	2204      	movs	r2, #4
 8004204:	409a      	lsls	r2, r3
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	4013      	ands	r3, r2
 800420a:	2b00      	cmp	r3, #0
 800420c:	d012      	beq.n	8004234 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 0302 	and.w	r3, r3, #2
 8004218:	2b00      	cmp	r3, #0
 800421a:	d00b      	beq.n	8004234 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004220:	2204      	movs	r2, #4
 8004222:	409a      	lsls	r2, r3
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800422c:	f043 0204 	orr.w	r2, r3, #4
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004238:	2210      	movs	r2, #16
 800423a:	409a      	lsls	r2, r3
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	4013      	ands	r3, r2
 8004240:	2b00      	cmp	r3, #0
 8004242:	d043      	beq.n	80042cc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f003 0308 	and.w	r3, r3, #8
 800424e:	2b00      	cmp	r3, #0
 8004250:	d03c      	beq.n	80042cc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004256:	2210      	movs	r2, #16
 8004258:	409a      	lsls	r2, r3
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004268:	2b00      	cmp	r3, #0
 800426a:	d018      	beq.n	800429e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004276:	2b00      	cmp	r3, #0
 8004278:	d108      	bne.n	800428c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800427e:	2b00      	cmp	r3, #0
 8004280:	d024      	beq.n	80042cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	4798      	blx	r3
 800428a:	e01f      	b.n	80042cc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004290:	2b00      	cmp	r3, #0
 8004292:	d01b      	beq.n	80042cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004298:	6878      	ldr	r0, [r7, #4]
 800429a:	4798      	blx	r3
 800429c:	e016      	b.n	80042cc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d107      	bne.n	80042bc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f022 0208 	bic.w	r2, r2, #8
 80042ba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d003      	beq.n	80042cc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042c8:	6878      	ldr	r0, [r7, #4]
 80042ca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042d0:	2220      	movs	r2, #32
 80042d2:	409a      	lsls	r2, r3
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	4013      	ands	r3, r2
 80042d8:	2b00      	cmp	r3, #0
 80042da:	f000 808f 	beq.w	80043fc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 0310 	and.w	r3, r3, #16
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	f000 8087 	beq.w	80043fc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042f2:	2220      	movs	r2, #32
 80042f4:	409a      	lsls	r2, r3
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004300:	b2db      	uxtb	r3, r3
 8004302:	2b05      	cmp	r3, #5
 8004304:	d136      	bne.n	8004374 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f022 0216 	bic.w	r2, r2, #22
 8004314:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	695a      	ldr	r2, [r3, #20]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004324:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800432a:	2b00      	cmp	r3, #0
 800432c:	d103      	bne.n	8004336 <HAL_DMA_IRQHandler+0x1da>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004332:	2b00      	cmp	r3, #0
 8004334:	d007      	beq.n	8004346 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f022 0208 	bic.w	r2, r2, #8
 8004344:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800434a:	223f      	movs	r2, #63	@ 0x3f
 800434c:	409a      	lsls	r2, r3
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2201      	movs	r2, #1
 8004356:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2200      	movs	r2, #0
 800435e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004366:	2b00      	cmp	r3, #0
 8004368:	d07e      	beq.n	8004468 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	4798      	blx	r3
        }
        return;
 8004372:	e079      	b.n	8004468 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800437e:	2b00      	cmp	r3, #0
 8004380:	d01d      	beq.n	80043be <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800438c:	2b00      	cmp	r3, #0
 800438e:	d10d      	bne.n	80043ac <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004394:	2b00      	cmp	r3, #0
 8004396:	d031      	beq.n	80043fc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	4798      	blx	r3
 80043a0:	e02c      	b.n	80043fc <HAL_DMA_IRQHandler+0x2a0>
 80043a2:	bf00      	nop
 80043a4:	20000004 	.word	0x20000004
 80043a8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d023      	beq.n	80043fc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043b8:	6878      	ldr	r0, [r7, #4]
 80043ba:	4798      	blx	r3
 80043bc:	e01e      	b.n	80043fc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d10f      	bne.n	80043ec <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f022 0210 	bic.w	r2, r2, #16
 80043da:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2201      	movs	r2, #1
 80043e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2200      	movs	r2, #0
 80043e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d003      	beq.n	80043fc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043f8:	6878      	ldr	r0, [r7, #4]
 80043fa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004400:	2b00      	cmp	r3, #0
 8004402:	d032      	beq.n	800446a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004408:	f003 0301 	and.w	r3, r3, #1
 800440c:	2b00      	cmp	r3, #0
 800440e:	d022      	beq.n	8004456 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2205      	movs	r2, #5
 8004414:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f022 0201 	bic.w	r2, r2, #1
 8004426:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	3301      	adds	r3, #1
 800442c:	60bb      	str	r3, [r7, #8]
 800442e:	697a      	ldr	r2, [r7, #20]
 8004430:	429a      	cmp	r2, r3
 8004432:	d307      	bcc.n	8004444 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 0301 	and.w	r3, r3, #1
 800443e:	2b00      	cmp	r3, #0
 8004440:	d1f2      	bne.n	8004428 <HAL_DMA_IRQHandler+0x2cc>
 8004442:	e000      	b.n	8004446 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004444:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2201      	movs	r2, #1
 800444a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2200      	movs	r2, #0
 8004452:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800445a:	2b00      	cmp	r3, #0
 800445c:	d005      	beq.n	800446a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	4798      	blx	r3
 8004466:	e000      	b.n	800446a <HAL_DMA_IRQHandler+0x30e>
        return;
 8004468:	bf00      	nop
    }
  }
}
 800446a:	3718      	adds	r7, #24
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}

08004470 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004470:	b480      	push	{r7}
 8004472:	b085      	sub	sp, #20
 8004474:	af00      	add	r7, sp, #0
 8004476:	60f8      	str	r0, [r7, #12]
 8004478:	60b9      	str	r1, [r7, #8]
 800447a:	607a      	str	r2, [r7, #4]
 800447c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800448c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	683a      	ldr	r2, [r7, #0]
 8004494:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	2b40      	cmp	r3, #64	@ 0x40
 800449c:	d108      	bne.n	80044b0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	687a      	ldr	r2, [r7, #4]
 80044a4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	68ba      	ldr	r2, [r7, #8]
 80044ac:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80044ae:	e007      	b.n	80044c0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	68ba      	ldr	r2, [r7, #8]
 80044b6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	687a      	ldr	r2, [r7, #4]
 80044be:	60da      	str	r2, [r3, #12]
}
 80044c0:	bf00      	nop
 80044c2:	3714      	adds	r7, #20
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr

080044cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b085      	sub	sp, #20
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	b2db      	uxtb	r3, r3
 80044da:	3b10      	subs	r3, #16
 80044dc:	4a14      	ldr	r2, [pc, #80]	@ (8004530 <DMA_CalcBaseAndBitshift+0x64>)
 80044de:	fba2 2303 	umull	r2, r3, r2, r3
 80044e2:	091b      	lsrs	r3, r3, #4
 80044e4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80044e6:	4a13      	ldr	r2, [pc, #76]	@ (8004534 <DMA_CalcBaseAndBitshift+0x68>)
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	4413      	add	r3, r2
 80044ec:	781b      	ldrb	r3, [r3, #0]
 80044ee:	461a      	mov	r2, r3
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2b03      	cmp	r3, #3
 80044f8:	d909      	bls.n	800450e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004502:	f023 0303 	bic.w	r3, r3, #3
 8004506:	1d1a      	adds	r2, r3, #4
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	659a      	str	r2, [r3, #88]	@ 0x58
 800450c:	e007      	b.n	800451e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004516:	f023 0303 	bic.w	r3, r3, #3
 800451a:	687a      	ldr	r2, [r7, #4]
 800451c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004522:	4618      	mov	r0, r3
 8004524:	3714      	adds	r7, #20
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr
 800452e:	bf00      	nop
 8004530:	aaaaaaab 	.word	0xaaaaaaab
 8004534:	0801c65c 	.word	0x0801c65c

08004538 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004538:	b480      	push	{r7}
 800453a:	b085      	sub	sp, #20
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004540:	2300      	movs	r3, #0
 8004542:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004548:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	699b      	ldr	r3, [r3, #24]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d11f      	bne.n	8004592 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	2b03      	cmp	r3, #3
 8004556:	d856      	bhi.n	8004606 <DMA_CheckFifoParam+0xce>
 8004558:	a201      	add	r2, pc, #4	@ (adr r2, 8004560 <DMA_CheckFifoParam+0x28>)
 800455a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800455e:	bf00      	nop
 8004560:	08004571 	.word	0x08004571
 8004564:	08004583 	.word	0x08004583
 8004568:	08004571 	.word	0x08004571
 800456c:	08004607 	.word	0x08004607
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004574:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004578:	2b00      	cmp	r3, #0
 800457a:	d046      	beq.n	800460a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004580:	e043      	b.n	800460a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004586:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800458a:	d140      	bne.n	800460e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004590:	e03d      	b.n	800460e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	699b      	ldr	r3, [r3, #24]
 8004596:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800459a:	d121      	bne.n	80045e0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	2b03      	cmp	r3, #3
 80045a0:	d837      	bhi.n	8004612 <DMA_CheckFifoParam+0xda>
 80045a2:	a201      	add	r2, pc, #4	@ (adr r2, 80045a8 <DMA_CheckFifoParam+0x70>)
 80045a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045a8:	080045b9 	.word	0x080045b9
 80045ac:	080045bf 	.word	0x080045bf
 80045b0:	080045b9 	.word	0x080045b9
 80045b4:	080045d1 	.word	0x080045d1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	73fb      	strb	r3, [r7, #15]
      break;
 80045bc:	e030      	b.n	8004620 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045c2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d025      	beq.n	8004616 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045ce:	e022      	b.n	8004616 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045d4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80045d8:	d11f      	bne.n	800461a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80045de:	e01c      	b.n	800461a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	2b02      	cmp	r3, #2
 80045e4:	d903      	bls.n	80045ee <DMA_CheckFifoParam+0xb6>
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	2b03      	cmp	r3, #3
 80045ea:	d003      	beq.n	80045f4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80045ec:	e018      	b.n	8004620 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	73fb      	strb	r3, [r7, #15]
      break;
 80045f2:	e015      	b.n	8004620 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045f8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d00e      	beq.n	800461e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	73fb      	strb	r3, [r7, #15]
      break;
 8004604:	e00b      	b.n	800461e <DMA_CheckFifoParam+0xe6>
      break;
 8004606:	bf00      	nop
 8004608:	e00a      	b.n	8004620 <DMA_CheckFifoParam+0xe8>
      break;
 800460a:	bf00      	nop
 800460c:	e008      	b.n	8004620 <DMA_CheckFifoParam+0xe8>
      break;
 800460e:	bf00      	nop
 8004610:	e006      	b.n	8004620 <DMA_CheckFifoParam+0xe8>
      break;
 8004612:	bf00      	nop
 8004614:	e004      	b.n	8004620 <DMA_CheckFifoParam+0xe8>
      break;
 8004616:	bf00      	nop
 8004618:	e002      	b.n	8004620 <DMA_CheckFifoParam+0xe8>
      break;   
 800461a:	bf00      	nop
 800461c:	e000      	b.n	8004620 <DMA_CheckFifoParam+0xe8>
      break;
 800461e:	bf00      	nop
    }
  } 
  
  return status; 
 8004620:	7bfb      	ldrb	r3, [r7, #15]
}
 8004622:	4618      	mov	r0, r3
 8004624:	3714      	adds	r7, #20
 8004626:	46bd      	mov	sp, r7
 8004628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462c:	4770      	bx	lr
 800462e:	bf00      	nop

08004630 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004630:	b480      	push	{r7}
 8004632:	b089      	sub	sp, #36	@ 0x24
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
 8004638:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800463a:	2300      	movs	r3, #0
 800463c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800463e:	2300      	movs	r3, #0
 8004640:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004642:	2300      	movs	r3, #0
 8004644:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004646:	2300      	movs	r3, #0
 8004648:	61fb      	str	r3, [r7, #28]
 800464a:	e177      	b.n	800493c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800464c:	2201      	movs	r2, #1
 800464e:	69fb      	ldr	r3, [r7, #28]
 8004650:	fa02 f303 	lsl.w	r3, r2, r3
 8004654:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	697a      	ldr	r2, [r7, #20]
 800465c:	4013      	ands	r3, r2
 800465e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004660:	693a      	ldr	r2, [r7, #16]
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	429a      	cmp	r2, r3
 8004666:	f040 8166 	bne.w	8004936 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	f003 0303 	and.w	r3, r3, #3
 8004672:	2b01      	cmp	r3, #1
 8004674:	d005      	beq.n	8004682 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800467e:	2b02      	cmp	r3, #2
 8004680:	d130      	bne.n	80046e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004688:	69fb      	ldr	r3, [r7, #28]
 800468a:	005b      	lsls	r3, r3, #1
 800468c:	2203      	movs	r2, #3
 800468e:	fa02 f303 	lsl.w	r3, r2, r3
 8004692:	43db      	mvns	r3, r3
 8004694:	69ba      	ldr	r2, [r7, #24]
 8004696:	4013      	ands	r3, r2
 8004698:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	68da      	ldr	r2, [r3, #12]
 800469e:	69fb      	ldr	r3, [r7, #28]
 80046a0:	005b      	lsls	r3, r3, #1
 80046a2:	fa02 f303 	lsl.w	r3, r2, r3
 80046a6:	69ba      	ldr	r2, [r7, #24]
 80046a8:	4313      	orrs	r3, r2
 80046aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	69ba      	ldr	r2, [r7, #24]
 80046b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80046b8:	2201      	movs	r2, #1
 80046ba:	69fb      	ldr	r3, [r7, #28]
 80046bc:	fa02 f303 	lsl.w	r3, r2, r3
 80046c0:	43db      	mvns	r3, r3
 80046c2:	69ba      	ldr	r2, [r7, #24]
 80046c4:	4013      	ands	r3, r2
 80046c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	091b      	lsrs	r3, r3, #4
 80046ce:	f003 0201 	and.w	r2, r3, #1
 80046d2:	69fb      	ldr	r3, [r7, #28]
 80046d4:	fa02 f303 	lsl.w	r3, r2, r3
 80046d8:	69ba      	ldr	r2, [r7, #24]
 80046da:	4313      	orrs	r3, r2
 80046dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	69ba      	ldr	r2, [r7, #24]
 80046e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	f003 0303 	and.w	r3, r3, #3
 80046ec:	2b03      	cmp	r3, #3
 80046ee:	d017      	beq.n	8004720 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	68db      	ldr	r3, [r3, #12]
 80046f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80046f6:	69fb      	ldr	r3, [r7, #28]
 80046f8:	005b      	lsls	r3, r3, #1
 80046fa:	2203      	movs	r2, #3
 80046fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004700:	43db      	mvns	r3, r3
 8004702:	69ba      	ldr	r2, [r7, #24]
 8004704:	4013      	ands	r3, r2
 8004706:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	689a      	ldr	r2, [r3, #8]
 800470c:	69fb      	ldr	r3, [r7, #28]
 800470e:	005b      	lsls	r3, r3, #1
 8004710:	fa02 f303 	lsl.w	r3, r2, r3
 8004714:	69ba      	ldr	r2, [r7, #24]
 8004716:	4313      	orrs	r3, r2
 8004718:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	69ba      	ldr	r2, [r7, #24]
 800471e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	f003 0303 	and.w	r3, r3, #3
 8004728:	2b02      	cmp	r3, #2
 800472a:	d123      	bne.n	8004774 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800472c:	69fb      	ldr	r3, [r7, #28]
 800472e:	08da      	lsrs	r2, r3, #3
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	3208      	adds	r2, #8
 8004734:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004738:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800473a:	69fb      	ldr	r3, [r7, #28]
 800473c:	f003 0307 	and.w	r3, r3, #7
 8004740:	009b      	lsls	r3, r3, #2
 8004742:	220f      	movs	r2, #15
 8004744:	fa02 f303 	lsl.w	r3, r2, r3
 8004748:	43db      	mvns	r3, r3
 800474a:	69ba      	ldr	r2, [r7, #24]
 800474c:	4013      	ands	r3, r2
 800474e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	691a      	ldr	r2, [r3, #16]
 8004754:	69fb      	ldr	r3, [r7, #28]
 8004756:	f003 0307 	and.w	r3, r3, #7
 800475a:	009b      	lsls	r3, r3, #2
 800475c:	fa02 f303 	lsl.w	r3, r2, r3
 8004760:	69ba      	ldr	r2, [r7, #24]
 8004762:	4313      	orrs	r3, r2
 8004764:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004766:	69fb      	ldr	r3, [r7, #28]
 8004768:	08da      	lsrs	r2, r3, #3
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	3208      	adds	r2, #8
 800476e:	69b9      	ldr	r1, [r7, #24]
 8004770:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800477a:	69fb      	ldr	r3, [r7, #28]
 800477c:	005b      	lsls	r3, r3, #1
 800477e:	2203      	movs	r2, #3
 8004780:	fa02 f303 	lsl.w	r3, r2, r3
 8004784:	43db      	mvns	r3, r3
 8004786:	69ba      	ldr	r2, [r7, #24]
 8004788:	4013      	ands	r3, r2
 800478a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	f003 0203 	and.w	r2, r3, #3
 8004794:	69fb      	ldr	r3, [r7, #28]
 8004796:	005b      	lsls	r3, r3, #1
 8004798:	fa02 f303 	lsl.w	r3, r2, r3
 800479c:	69ba      	ldr	r2, [r7, #24]
 800479e:	4313      	orrs	r3, r2
 80047a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	69ba      	ldr	r2, [r7, #24]
 80047a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	f000 80c0 	beq.w	8004936 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047b6:	2300      	movs	r3, #0
 80047b8:	60fb      	str	r3, [r7, #12]
 80047ba:	4b66      	ldr	r3, [pc, #408]	@ (8004954 <HAL_GPIO_Init+0x324>)
 80047bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047be:	4a65      	ldr	r2, [pc, #404]	@ (8004954 <HAL_GPIO_Init+0x324>)
 80047c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80047c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80047c6:	4b63      	ldr	r3, [pc, #396]	@ (8004954 <HAL_GPIO_Init+0x324>)
 80047c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80047ce:	60fb      	str	r3, [r7, #12]
 80047d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80047d2:	4a61      	ldr	r2, [pc, #388]	@ (8004958 <HAL_GPIO_Init+0x328>)
 80047d4:	69fb      	ldr	r3, [r7, #28]
 80047d6:	089b      	lsrs	r3, r3, #2
 80047d8:	3302      	adds	r3, #2
 80047da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80047e0:	69fb      	ldr	r3, [r7, #28]
 80047e2:	f003 0303 	and.w	r3, r3, #3
 80047e6:	009b      	lsls	r3, r3, #2
 80047e8:	220f      	movs	r2, #15
 80047ea:	fa02 f303 	lsl.w	r3, r2, r3
 80047ee:	43db      	mvns	r3, r3
 80047f0:	69ba      	ldr	r2, [r7, #24]
 80047f2:	4013      	ands	r3, r2
 80047f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	4a58      	ldr	r2, [pc, #352]	@ (800495c <HAL_GPIO_Init+0x32c>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d037      	beq.n	800486e <HAL_GPIO_Init+0x23e>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	4a57      	ldr	r2, [pc, #348]	@ (8004960 <HAL_GPIO_Init+0x330>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d031      	beq.n	800486a <HAL_GPIO_Init+0x23a>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	4a56      	ldr	r2, [pc, #344]	@ (8004964 <HAL_GPIO_Init+0x334>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d02b      	beq.n	8004866 <HAL_GPIO_Init+0x236>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	4a55      	ldr	r2, [pc, #340]	@ (8004968 <HAL_GPIO_Init+0x338>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d025      	beq.n	8004862 <HAL_GPIO_Init+0x232>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	4a54      	ldr	r2, [pc, #336]	@ (800496c <HAL_GPIO_Init+0x33c>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d01f      	beq.n	800485e <HAL_GPIO_Init+0x22e>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	4a53      	ldr	r2, [pc, #332]	@ (8004970 <HAL_GPIO_Init+0x340>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d019      	beq.n	800485a <HAL_GPIO_Init+0x22a>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	4a52      	ldr	r2, [pc, #328]	@ (8004974 <HAL_GPIO_Init+0x344>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d013      	beq.n	8004856 <HAL_GPIO_Init+0x226>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	4a51      	ldr	r2, [pc, #324]	@ (8004978 <HAL_GPIO_Init+0x348>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d00d      	beq.n	8004852 <HAL_GPIO_Init+0x222>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	4a50      	ldr	r2, [pc, #320]	@ (800497c <HAL_GPIO_Init+0x34c>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d007      	beq.n	800484e <HAL_GPIO_Init+0x21e>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	4a4f      	ldr	r2, [pc, #316]	@ (8004980 <HAL_GPIO_Init+0x350>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d101      	bne.n	800484a <HAL_GPIO_Init+0x21a>
 8004846:	2309      	movs	r3, #9
 8004848:	e012      	b.n	8004870 <HAL_GPIO_Init+0x240>
 800484a:	230a      	movs	r3, #10
 800484c:	e010      	b.n	8004870 <HAL_GPIO_Init+0x240>
 800484e:	2308      	movs	r3, #8
 8004850:	e00e      	b.n	8004870 <HAL_GPIO_Init+0x240>
 8004852:	2307      	movs	r3, #7
 8004854:	e00c      	b.n	8004870 <HAL_GPIO_Init+0x240>
 8004856:	2306      	movs	r3, #6
 8004858:	e00a      	b.n	8004870 <HAL_GPIO_Init+0x240>
 800485a:	2305      	movs	r3, #5
 800485c:	e008      	b.n	8004870 <HAL_GPIO_Init+0x240>
 800485e:	2304      	movs	r3, #4
 8004860:	e006      	b.n	8004870 <HAL_GPIO_Init+0x240>
 8004862:	2303      	movs	r3, #3
 8004864:	e004      	b.n	8004870 <HAL_GPIO_Init+0x240>
 8004866:	2302      	movs	r3, #2
 8004868:	e002      	b.n	8004870 <HAL_GPIO_Init+0x240>
 800486a:	2301      	movs	r3, #1
 800486c:	e000      	b.n	8004870 <HAL_GPIO_Init+0x240>
 800486e:	2300      	movs	r3, #0
 8004870:	69fa      	ldr	r2, [r7, #28]
 8004872:	f002 0203 	and.w	r2, r2, #3
 8004876:	0092      	lsls	r2, r2, #2
 8004878:	4093      	lsls	r3, r2
 800487a:	69ba      	ldr	r2, [r7, #24]
 800487c:	4313      	orrs	r3, r2
 800487e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004880:	4935      	ldr	r1, [pc, #212]	@ (8004958 <HAL_GPIO_Init+0x328>)
 8004882:	69fb      	ldr	r3, [r7, #28]
 8004884:	089b      	lsrs	r3, r3, #2
 8004886:	3302      	adds	r3, #2
 8004888:	69ba      	ldr	r2, [r7, #24]
 800488a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800488e:	4b3d      	ldr	r3, [pc, #244]	@ (8004984 <HAL_GPIO_Init+0x354>)
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	43db      	mvns	r3, r3
 8004898:	69ba      	ldr	r2, [r7, #24]
 800489a:	4013      	ands	r3, r2
 800489c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d003      	beq.n	80048b2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80048aa:	69ba      	ldr	r2, [r7, #24]
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	4313      	orrs	r3, r2
 80048b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80048b2:	4a34      	ldr	r2, [pc, #208]	@ (8004984 <HAL_GPIO_Init+0x354>)
 80048b4:	69bb      	ldr	r3, [r7, #24]
 80048b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80048b8:	4b32      	ldr	r3, [pc, #200]	@ (8004984 <HAL_GPIO_Init+0x354>)
 80048ba:	68db      	ldr	r3, [r3, #12]
 80048bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	43db      	mvns	r3, r3
 80048c2:	69ba      	ldr	r2, [r7, #24]
 80048c4:	4013      	ands	r3, r2
 80048c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d003      	beq.n	80048dc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80048d4:	69ba      	ldr	r2, [r7, #24]
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	4313      	orrs	r3, r2
 80048da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80048dc:	4a29      	ldr	r2, [pc, #164]	@ (8004984 <HAL_GPIO_Init+0x354>)
 80048de:	69bb      	ldr	r3, [r7, #24]
 80048e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80048e2:	4b28      	ldr	r3, [pc, #160]	@ (8004984 <HAL_GPIO_Init+0x354>)
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	43db      	mvns	r3, r3
 80048ec:	69ba      	ldr	r2, [r7, #24]
 80048ee:	4013      	ands	r3, r2
 80048f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d003      	beq.n	8004906 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80048fe:	69ba      	ldr	r2, [r7, #24]
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	4313      	orrs	r3, r2
 8004904:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004906:	4a1f      	ldr	r2, [pc, #124]	@ (8004984 <HAL_GPIO_Init+0x354>)
 8004908:	69bb      	ldr	r3, [r7, #24]
 800490a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800490c:	4b1d      	ldr	r3, [pc, #116]	@ (8004984 <HAL_GPIO_Init+0x354>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	43db      	mvns	r3, r3
 8004916:	69ba      	ldr	r2, [r7, #24]
 8004918:	4013      	ands	r3, r2
 800491a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004924:	2b00      	cmp	r3, #0
 8004926:	d003      	beq.n	8004930 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004928:	69ba      	ldr	r2, [r7, #24]
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	4313      	orrs	r3, r2
 800492e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004930:	4a14      	ldr	r2, [pc, #80]	@ (8004984 <HAL_GPIO_Init+0x354>)
 8004932:	69bb      	ldr	r3, [r7, #24]
 8004934:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004936:	69fb      	ldr	r3, [r7, #28]
 8004938:	3301      	adds	r3, #1
 800493a:	61fb      	str	r3, [r7, #28]
 800493c:	69fb      	ldr	r3, [r7, #28]
 800493e:	2b0f      	cmp	r3, #15
 8004940:	f67f ae84 	bls.w	800464c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004944:	bf00      	nop
 8004946:	bf00      	nop
 8004948:	3724      	adds	r7, #36	@ 0x24
 800494a:	46bd      	mov	sp, r7
 800494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004950:	4770      	bx	lr
 8004952:	bf00      	nop
 8004954:	40023800 	.word	0x40023800
 8004958:	40013800 	.word	0x40013800
 800495c:	40020000 	.word	0x40020000
 8004960:	40020400 	.word	0x40020400
 8004964:	40020800 	.word	0x40020800
 8004968:	40020c00 	.word	0x40020c00
 800496c:	40021000 	.word	0x40021000
 8004970:	40021400 	.word	0x40021400
 8004974:	40021800 	.word	0x40021800
 8004978:	40021c00 	.word	0x40021c00
 800497c:	40022000 	.word	0x40022000
 8004980:	40022400 	.word	0x40022400
 8004984:	40013c00 	.word	0x40013c00

08004988 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004988:	b480      	push	{r7}
 800498a:	b083      	sub	sp, #12
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	460b      	mov	r3, r1
 8004992:	807b      	strh	r3, [r7, #2]
 8004994:	4613      	mov	r3, r2
 8004996:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004998:	787b      	ldrb	r3, [r7, #1]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d003      	beq.n	80049a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800499e:	887a      	ldrh	r2, [r7, #2]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80049a4:	e003      	b.n	80049ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80049a6:	887b      	ldrh	r3, [r7, #2]
 80049a8:	041a      	lsls	r2, r3, #16
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	619a      	str	r2, [r3, #24]
}
 80049ae:	bf00      	nop
 80049b0:	370c      	adds	r7, #12
 80049b2:	46bd      	mov	sp, r7
 80049b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b8:	4770      	bx	lr

080049ba <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80049ba:	b580      	push	{r7, lr}
 80049bc:	b084      	sub	sp, #16
 80049be:	af00      	add	r7, sp, #0
 80049c0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d101      	bne.n	80049cc <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80049c8:	2301      	movs	r3, #1
 80049ca:	e034      	b.n	8004a36 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 80049d4:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f245 5255 	movw	r2, #21845	@ 0x5555
 80049de:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	687a      	ldr	r2, [r7, #4]
 80049e6:	6852      	ldr	r2, [r2, #4]
 80049e8:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	687a      	ldr	r2, [r7, #4]
 80049f0:	6892      	ldr	r2, [r2, #8]
 80049f2:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80049f4:	f7ff f92c 	bl	8003c50 <HAL_GetTick>
 80049f8:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80049fa:	e00f      	b.n	8004a1c <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80049fc:	f7ff f928 	bl	8003c50 <HAL_GetTick>
 8004a00:	4602      	mov	r2, r0
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	1ad3      	subs	r3, r2, r3
 8004a06:	2b31      	cmp	r3, #49	@ 0x31
 8004a08:	d908      	bls.n	8004a1c <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	68db      	ldr	r3, [r3, #12]
 8004a10:	f003 0303 	and.w	r3, r3, #3
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d001      	beq.n	8004a1c <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8004a18:	2303      	movs	r3, #3
 8004a1a:	e00c      	b.n	8004a36 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	68db      	ldr	r3, [r3, #12]
 8004a22:	f003 0303 	and.w	r3, r3, #3
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d1e8      	bne.n	80049fc <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8004a32:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004a34:	2300      	movs	r3, #0
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3710      	adds	r7, #16
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}

08004a3e <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8004a3e:	b480      	push	{r7}
 8004a40:	b083      	sub	sp, #12
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8004a4e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004a50:	2300      	movs	r3, #0
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	370c      	adds	r7, #12
 8004a56:	46bd      	mov	sp, r7
 8004a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5c:	4770      	bx	lr
	...

08004a60 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b082      	sub	sp, #8
 8004a64:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8004a66:	2300      	movs	r3, #0
 8004a68:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	603b      	str	r3, [r7, #0]
 8004a6e:	4b20      	ldr	r3, [pc, #128]	@ (8004af0 <HAL_PWREx_EnableOverDrive+0x90>)
 8004a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a72:	4a1f      	ldr	r2, [pc, #124]	@ (8004af0 <HAL_PWREx_EnableOverDrive+0x90>)
 8004a74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a78:	6413      	str	r3, [r2, #64]	@ 0x40
 8004a7a:	4b1d      	ldr	r3, [pc, #116]	@ (8004af0 <HAL_PWREx_EnableOverDrive+0x90>)
 8004a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a82:	603b      	str	r3, [r7, #0]
 8004a84:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004a86:	4b1b      	ldr	r3, [pc, #108]	@ (8004af4 <HAL_PWREx_EnableOverDrive+0x94>)
 8004a88:	2201      	movs	r2, #1
 8004a8a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004a8c:	f7ff f8e0 	bl	8003c50 <HAL_GetTick>
 8004a90:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004a92:	e009      	b.n	8004aa8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004a94:	f7ff f8dc 	bl	8003c50 <HAL_GetTick>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	1ad3      	subs	r3, r2, r3
 8004a9e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004aa2:	d901      	bls.n	8004aa8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8004aa4:	2303      	movs	r3, #3
 8004aa6:	e01f      	b.n	8004ae8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004aa8:	4b13      	ldr	r3, [pc, #76]	@ (8004af8 <HAL_PWREx_EnableOverDrive+0x98>)
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ab0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ab4:	d1ee      	bne.n	8004a94 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004ab6:	4b11      	ldr	r3, [pc, #68]	@ (8004afc <HAL_PWREx_EnableOverDrive+0x9c>)
 8004ab8:	2201      	movs	r2, #1
 8004aba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004abc:	f7ff f8c8 	bl	8003c50 <HAL_GetTick>
 8004ac0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004ac2:	e009      	b.n	8004ad8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004ac4:	f7ff f8c4 	bl	8003c50 <HAL_GetTick>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	1ad3      	subs	r3, r2, r3
 8004ace:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004ad2:	d901      	bls.n	8004ad8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004ad4:	2303      	movs	r3, #3
 8004ad6:	e007      	b.n	8004ae8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004ad8:	4b07      	ldr	r3, [pc, #28]	@ (8004af8 <HAL_PWREx_EnableOverDrive+0x98>)
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ae0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004ae4:	d1ee      	bne.n	8004ac4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8004ae6:	2300      	movs	r3, #0
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	3708      	adds	r7, #8
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}
 8004af0:	40023800 	.word	0x40023800
 8004af4:	420e0040 	.word	0x420e0040
 8004af8:	40007000 	.word	0x40007000
 8004afc:	420e0044 	.word	0x420e0044

08004b00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b084      	sub	sp, #16
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
 8004b08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d101      	bne.n	8004b14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b10:	2301      	movs	r3, #1
 8004b12:	e0cc      	b.n	8004cae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004b14:	4b68      	ldr	r3, [pc, #416]	@ (8004cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f003 030f 	and.w	r3, r3, #15
 8004b1c:	683a      	ldr	r2, [r7, #0]
 8004b1e:	429a      	cmp	r2, r3
 8004b20:	d90c      	bls.n	8004b3c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b22:	4b65      	ldr	r3, [pc, #404]	@ (8004cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8004b24:	683a      	ldr	r2, [r7, #0]
 8004b26:	b2d2      	uxtb	r2, r2
 8004b28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b2a:	4b63      	ldr	r3, [pc, #396]	@ (8004cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f003 030f 	and.w	r3, r3, #15
 8004b32:	683a      	ldr	r2, [r7, #0]
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d001      	beq.n	8004b3c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	e0b8      	b.n	8004cae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f003 0302 	and.w	r3, r3, #2
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d020      	beq.n	8004b8a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 0304 	and.w	r3, r3, #4
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d005      	beq.n	8004b60 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b54:	4b59      	ldr	r3, [pc, #356]	@ (8004cbc <HAL_RCC_ClockConfig+0x1bc>)
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	4a58      	ldr	r2, [pc, #352]	@ (8004cbc <HAL_RCC_ClockConfig+0x1bc>)
 8004b5a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004b5e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 0308 	and.w	r3, r3, #8
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d005      	beq.n	8004b78 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b6c:	4b53      	ldr	r3, [pc, #332]	@ (8004cbc <HAL_RCC_ClockConfig+0x1bc>)
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	4a52      	ldr	r2, [pc, #328]	@ (8004cbc <HAL_RCC_ClockConfig+0x1bc>)
 8004b72:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004b76:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b78:	4b50      	ldr	r3, [pc, #320]	@ (8004cbc <HAL_RCC_ClockConfig+0x1bc>)
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	494d      	ldr	r1, [pc, #308]	@ (8004cbc <HAL_RCC_ClockConfig+0x1bc>)
 8004b86:	4313      	orrs	r3, r2
 8004b88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 0301 	and.w	r3, r3, #1
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d044      	beq.n	8004c20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d107      	bne.n	8004bae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b9e:	4b47      	ldr	r3, [pc, #284]	@ (8004cbc <HAL_RCC_ClockConfig+0x1bc>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d119      	bne.n	8004bde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	e07f      	b.n	8004cae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	2b02      	cmp	r3, #2
 8004bb4:	d003      	beq.n	8004bbe <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004bba:	2b03      	cmp	r3, #3
 8004bbc:	d107      	bne.n	8004bce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bbe:	4b3f      	ldr	r3, [pc, #252]	@ (8004cbc <HAL_RCC_ClockConfig+0x1bc>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d109      	bne.n	8004bde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e06f      	b.n	8004cae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bce:	4b3b      	ldr	r3, [pc, #236]	@ (8004cbc <HAL_RCC_ClockConfig+0x1bc>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f003 0302 	and.w	r3, r3, #2
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d101      	bne.n	8004bde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e067      	b.n	8004cae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004bde:	4b37      	ldr	r3, [pc, #220]	@ (8004cbc <HAL_RCC_ClockConfig+0x1bc>)
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	f023 0203 	bic.w	r2, r3, #3
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	4934      	ldr	r1, [pc, #208]	@ (8004cbc <HAL_RCC_ClockConfig+0x1bc>)
 8004bec:	4313      	orrs	r3, r2
 8004bee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004bf0:	f7ff f82e 	bl	8003c50 <HAL_GetTick>
 8004bf4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bf6:	e00a      	b.n	8004c0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bf8:	f7ff f82a 	bl	8003c50 <HAL_GetTick>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d901      	bls.n	8004c0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c0a:	2303      	movs	r3, #3
 8004c0c:	e04f      	b.n	8004cae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c0e:	4b2b      	ldr	r3, [pc, #172]	@ (8004cbc <HAL_RCC_ClockConfig+0x1bc>)
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	f003 020c 	and.w	r2, r3, #12
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	009b      	lsls	r3, r3, #2
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	d1eb      	bne.n	8004bf8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004c20:	4b25      	ldr	r3, [pc, #148]	@ (8004cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f003 030f 	and.w	r3, r3, #15
 8004c28:	683a      	ldr	r2, [r7, #0]
 8004c2a:	429a      	cmp	r2, r3
 8004c2c:	d20c      	bcs.n	8004c48 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c2e:	4b22      	ldr	r3, [pc, #136]	@ (8004cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8004c30:	683a      	ldr	r2, [r7, #0]
 8004c32:	b2d2      	uxtb	r2, r2
 8004c34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c36:	4b20      	ldr	r3, [pc, #128]	@ (8004cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f003 030f 	and.w	r3, r3, #15
 8004c3e:	683a      	ldr	r2, [r7, #0]
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d001      	beq.n	8004c48 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004c44:	2301      	movs	r3, #1
 8004c46:	e032      	b.n	8004cae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f003 0304 	and.w	r3, r3, #4
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d008      	beq.n	8004c66 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c54:	4b19      	ldr	r3, [pc, #100]	@ (8004cbc <HAL_RCC_ClockConfig+0x1bc>)
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	68db      	ldr	r3, [r3, #12]
 8004c60:	4916      	ldr	r1, [pc, #88]	@ (8004cbc <HAL_RCC_ClockConfig+0x1bc>)
 8004c62:	4313      	orrs	r3, r2
 8004c64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f003 0308 	and.w	r3, r3, #8
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d009      	beq.n	8004c86 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c72:	4b12      	ldr	r3, [pc, #72]	@ (8004cbc <HAL_RCC_ClockConfig+0x1bc>)
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	691b      	ldr	r3, [r3, #16]
 8004c7e:	00db      	lsls	r3, r3, #3
 8004c80:	490e      	ldr	r1, [pc, #56]	@ (8004cbc <HAL_RCC_ClockConfig+0x1bc>)
 8004c82:	4313      	orrs	r3, r2
 8004c84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004c86:	f000 f821 	bl	8004ccc <HAL_RCC_GetSysClockFreq>
 8004c8a:	4602      	mov	r2, r0
 8004c8c:	4b0b      	ldr	r3, [pc, #44]	@ (8004cbc <HAL_RCC_ClockConfig+0x1bc>)
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	091b      	lsrs	r3, r3, #4
 8004c92:	f003 030f 	and.w	r3, r3, #15
 8004c96:	490a      	ldr	r1, [pc, #40]	@ (8004cc0 <HAL_RCC_ClockConfig+0x1c0>)
 8004c98:	5ccb      	ldrb	r3, [r1, r3]
 8004c9a:	fa22 f303 	lsr.w	r3, r2, r3
 8004c9e:	4a09      	ldr	r2, [pc, #36]	@ (8004cc4 <HAL_RCC_ClockConfig+0x1c4>)
 8004ca0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004ca2:	4b09      	ldr	r3, [pc, #36]	@ (8004cc8 <HAL_RCC_ClockConfig+0x1c8>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f7fd fc62 	bl	8002570 <HAL_InitTick>

  return HAL_OK;
 8004cac:	2300      	movs	r3, #0
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3710      	adds	r7, #16
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}
 8004cb6:	bf00      	nop
 8004cb8:	40023c00 	.word	0x40023c00
 8004cbc:	40023800 	.word	0x40023800
 8004cc0:	0801c644 	.word	0x0801c644
 8004cc4:	20000004 	.word	0x20000004
 8004cc8:	200000d0 	.word	0x200000d0

08004ccc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ccc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004cd0:	b092      	sub	sp, #72	@ 0x48
 8004cd2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllvco = 0U;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllp = 0U;
 8004cdc:	2300      	movs	r3, #0
 8004cde:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t sysclockfreq = 0U;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	643b      	str	r3, [r7, #64]	@ 0x40

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ce4:	4b6f      	ldr	r3, [pc, #444]	@ (8004ea4 <HAL_RCC_GetSysClockFreq+0x1d8>)
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	f003 030c 	and.w	r3, r3, #12
 8004cec:	2b08      	cmp	r3, #8
 8004cee:	d00e      	beq.n	8004d0e <HAL_RCC_GetSysClockFreq+0x42>
 8004cf0:	2b08      	cmp	r3, #8
 8004cf2:	f200 80cd 	bhi.w	8004e90 <HAL_RCC_GetSysClockFreq+0x1c4>
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d002      	beq.n	8004d00 <HAL_RCC_GetSysClockFreq+0x34>
 8004cfa:	2b04      	cmp	r3, #4
 8004cfc:	d003      	beq.n	8004d06 <HAL_RCC_GetSysClockFreq+0x3a>
 8004cfe:	e0c7      	b.n	8004e90 <HAL_RCC_GetSysClockFreq+0x1c4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d00:	4b69      	ldr	r3, [pc, #420]	@ (8004ea8 <HAL_RCC_GetSysClockFreq+0x1dc>)
 8004d02:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8004d04:	e0c7      	b.n	8004e96 <HAL_RCC_GetSysClockFreq+0x1ca>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004d06:	f44f 0361 	mov.w	r3, #14745600	@ 0xe10000
 8004d0a:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8004d0c:	e0c3      	b.n	8004e96 <HAL_RCC_GetSysClockFreq+0x1ca>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d0e:	4b65      	ldr	r3, [pc, #404]	@ (8004ea4 <HAL_RCC_GetSysClockFreq+0x1d8>)
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004d16:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d18:	4b62      	ldr	r3, [pc, #392]	@ (8004ea4 <HAL_RCC_GetSysClockFreq+0x1d8>)
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d04a      	beq.n	8004dba <HAL_RCC_GetSysClockFreq+0xee>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d24:	4b5f      	ldr	r3, [pc, #380]	@ (8004ea4 <HAL_RCC_GetSysClockFreq+0x1d8>)
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	099b      	lsrs	r3, r3, #6
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	4611      	mov	r1, r2
 8004d30:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004d34:	633b      	str	r3, [r7, #48]	@ 0x30
 8004d36:	2300      	movs	r3, #0
 8004d38:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d3a:	e9d7 890c 	ldrd	r8, r9, [r7, #48]	@ 0x30
 8004d3e:	4642      	mov	r2, r8
 8004d40:	464b      	mov	r3, r9
 8004d42:	f04f 0000 	mov.w	r0, #0
 8004d46:	f04f 0100 	mov.w	r1, #0
 8004d4a:	00d9      	lsls	r1, r3, #3
 8004d4c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004d50:	00d0      	lsls	r0, r2, #3
 8004d52:	4602      	mov	r2, r0
 8004d54:	460b      	mov	r3, r1
 8004d56:	4641      	mov	r1, r8
 8004d58:	1a54      	subs	r4, r2, r1
 8004d5a:	4649      	mov	r1, r9
 8004d5c:	eb63 0501 	sbc.w	r5, r3, r1
 8004d60:	f04f 0200 	mov.w	r2, #0
 8004d64:	f04f 0300 	mov.w	r3, #0
 8004d68:	016b      	lsls	r3, r5, #5
 8004d6a:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8004d6e:	0162      	lsls	r2, r4, #5
 8004d70:	4614      	mov	r4, r2
 8004d72:	461d      	mov	r5, r3
 8004d74:	4643      	mov	r3, r8
 8004d76:	18e3      	adds	r3, r4, r3
 8004d78:	60bb      	str	r3, [r7, #8]
 8004d7a:	464b      	mov	r3, r9
 8004d7c:	eb45 0303 	adc.w	r3, r5, r3
 8004d80:	60fb      	str	r3, [r7, #12]
 8004d82:	f04f 0200 	mov.w	r2, #0
 8004d86:	f04f 0300 	mov.w	r3, #0
 8004d8a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004d8e:	4629      	mov	r1, r5
 8004d90:	040b      	lsls	r3, r1, #16
 8004d92:	4621      	mov	r1, r4
 8004d94:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 8004d98:	4621      	mov	r1, r4
 8004d9a:	040a      	lsls	r2, r1, #16
 8004d9c:	4610      	mov	r0, r2
 8004d9e:	4619      	mov	r1, r3
 8004da0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004da2:	2200      	movs	r2, #0
 8004da4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004da6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004da8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004dac:	f7fb ff86 	bl	8000cbc <__aeabi_uldivmod>
 8004db0:	4602      	mov	r2, r0
 8004db2:	460b      	mov	r3, r1
 8004db4:	4613      	mov	r3, r2
 8004db6:	647b      	str	r3, [r7, #68]	@ 0x44
 8004db8:	e05c      	b.n	8004e74 <HAL_RCC_GetSysClockFreq+0x1a8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004dba:	4b3a      	ldr	r3, [pc, #232]	@ (8004ea4 <HAL_RCC_GetSysClockFreq+0x1d8>)
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	099b      	lsrs	r3, r3, #6
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	623b      	str	r3, [r7, #32]
 8004dc4:	627a      	str	r2, [r7, #36]	@ 0x24
 8004dc6:	6a3b      	ldr	r3, [r7, #32]
 8004dc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dcc:	61bb      	str	r3, [r7, #24]
 8004dce:	2300      	movs	r3, #0
 8004dd0:	61fb      	str	r3, [r7, #28]
 8004dd2:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8004dd6:	4622      	mov	r2, r4
 8004dd8:	462b      	mov	r3, r5
 8004dda:	f04f 0000 	mov.w	r0, #0
 8004dde:	f04f 0100 	mov.w	r1, #0
 8004de2:	0159      	lsls	r1, r3, #5
 8004de4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004de8:	0150      	lsls	r0, r2, #5
 8004dea:	4602      	mov	r2, r0
 8004dec:	460b      	mov	r3, r1
 8004dee:	4621      	mov	r1, r4
 8004df0:	ebb2 0a01 	subs.w	sl, r2, r1
 8004df4:	4629      	mov	r1, r5
 8004df6:	eb63 0b01 	sbc.w	fp, r3, r1
 8004dfa:	f04f 0200 	mov.w	r2, #0
 8004dfe:	f04f 0300 	mov.w	r3, #0
 8004e02:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004e06:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004e0a:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004e0e:	ebb2 080a 	subs.w	r8, r2, sl
 8004e12:	eb63 090b 	sbc.w	r9, r3, fp
 8004e16:	f04f 0200 	mov.w	r2, #0
 8004e1a:	f04f 0300 	mov.w	r3, #0
 8004e1e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e22:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e26:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e2a:	4690      	mov	r8, r2
 8004e2c:	4699      	mov	r9, r3
 8004e2e:	4623      	mov	r3, r4
 8004e30:	eb18 0303 	adds.w	r3, r8, r3
 8004e34:	603b      	str	r3, [r7, #0]
 8004e36:	462b      	mov	r3, r5
 8004e38:	eb49 0303 	adc.w	r3, r9, r3
 8004e3c:	607b      	str	r3, [r7, #4]
 8004e3e:	f04f 0200 	mov.w	r2, #0
 8004e42:	f04f 0300 	mov.w	r3, #0
 8004e46:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004e4a:	4629      	mov	r1, r5
 8004e4c:	028b      	lsls	r3, r1, #10
 8004e4e:	4621      	mov	r1, r4
 8004e50:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004e54:	4621      	mov	r1, r4
 8004e56:	028a      	lsls	r2, r1, #10
 8004e58:	4610      	mov	r0, r2
 8004e5a:	4619      	mov	r1, r3
 8004e5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e5e:	2200      	movs	r2, #0
 8004e60:	613b      	str	r3, [r7, #16]
 8004e62:	617a      	str	r2, [r7, #20]
 8004e64:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004e68:	f7fb ff28 	bl	8000cbc <__aeabi_uldivmod>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	460b      	mov	r3, r1
 8004e70:	4613      	mov	r3, r2
 8004e72:	647b      	str	r3, [r7, #68]	@ 0x44
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004e74:	4b0b      	ldr	r3, [pc, #44]	@ (8004ea4 <HAL_RCC_GetSysClockFreq+0x1d8>)
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	0c1b      	lsrs	r3, r3, #16
 8004e7a:	f003 0303 	and.w	r3, r3, #3
 8004e7e:	3301      	adds	r3, #1
 8004e80:	005b      	lsls	r3, r3, #1
 8004e82:	63bb      	str	r3, [r7, #56]	@ 0x38

      sysclockfreq = pllvco / pllp;
 8004e84:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004e86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e88:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e8c:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8004e8e:	e002      	b.n	8004e96 <HAL_RCC_GetSysClockFreq+0x1ca>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004e90:	4b05      	ldr	r3, [pc, #20]	@ (8004ea8 <HAL_RCC_GetSysClockFreq+0x1dc>)
 8004e92:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8004e94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3748      	adds	r7, #72	@ 0x48
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ea2:	bf00      	nop
 8004ea4:	40023800 	.word	0x40023800
 8004ea8:	00f42400 	.word	0x00f42400

08004eac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004eac:	b480      	push	{r7}
 8004eae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004eb0:	4b03      	ldr	r3, [pc, #12]	@ (8004ec0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebc:	4770      	bx	lr
 8004ebe:	bf00      	nop
 8004ec0:	20000004 	.word	0x20000004

08004ec4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004ec8:	f7ff fff0 	bl	8004eac <HAL_RCC_GetHCLKFreq>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	4b05      	ldr	r3, [pc, #20]	@ (8004ee4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	0a9b      	lsrs	r3, r3, #10
 8004ed4:	f003 0307 	and.w	r3, r3, #7
 8004ed8:	4903      	ldr	r1, [pc, #12]	@ (8004ee8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004eda:	5ccb      	ldrb	r3, [r1, r3]
 8004edc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	bd80      	pop	{r7, pc}
 8004ee4:	40023800 	.word	0x40023800
 8004ee8:	0801c654 	.word	0x0801c654

08004eec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004ef0:	f7ff ffdc 	bl	8004eac <HAL_RCC_GetHCLKFreq>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	4b05      	ldr	r3, [pc, #20]	@ (8004f0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	0b5b      	lsrs	r3, r3, #13
 8004efc:	f003 0307 	and.w	r3, r3, #7
 8004f00:	4903      	ldr	r1, [pc, #12]	@ (8004f10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f02:	5ccb      	ldrb	r3, [r1, r3]
 8004f04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	bd80      	pop	{r7, pc}
 8004f0c:	40023800 	.word	0x40023800
 8004f10:	0801c654 	.word	0x0801c654

08004f14 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b083      	sub	sp, #12
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	220f      	movs	r2, #15
 8004f22:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004f24:	4b12      	ldr	r3, [pc, #72]	@ (8004f70 <HAL_RCC_GetClockConfig+0x5c>)
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	f003 0203 	and.w	r2, r3, #3
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004f30:	4b0f      	ldr	r3, [pc, #60]	@ (8004f70 <HAL_RCC_GetClockConfig+0x5c>)
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004f3c:	4b0c      	ldr	r3, [pc, #48]	@ (8004f70 <HAL_RCC_GetClockConfig+0x5c>)
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004f48:	4b09      	ldr	r3, [pc, #36]	@ (8004f70 <HAL_RCC_GetClockConfig+0x5c>)
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	08db      	lsrs	r3, r3, #3
 8004f4e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004f56:	4b07      	ldr	r3, [pc, #28]	@ (8004f74 <HAL_RCC_GetClockConfig+0x60>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f003 020f 	and.w	r2, r3, #15
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	601a      	str	r2, [r3, #0]
}
 8004f62:	bf00      	nop
 8004f64:	370c      	adds	r7, #12
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr
 8004f6e:	bf00      	nop
 8004f70:	40023800 	.word	0x40023800
 8004f74:	40023c00 	.word	0x40023c00

08004f78 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b086      	sub	sp, #24
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d101      	bne.n	8004f8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
 8004f88:	e273      	b.n	8005472 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f003 0301 	and.w	r3, r3, #1
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d075      	beq.n	8005082 <HAL_RCC_OscConfig+0x10a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004f96:	4b88      	ldr	r3, [pc, #544]	@ (80051b8 <HAL_RCC_OscConfig+0x240>)
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	f003 030c 	and.w	r3, r3, #12
 8004f9e:	2b04      	cmp	r3, #4
 8004fa0:	d00c      	beq.n	8004fbc <HAL_RCC_OscConfig+0x44>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004fa2:	4b85      	ldr	r3, [pc, #532]	@ (80051b8 <HAL_RCC_OscConfig+0x240>)
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	f003 030c 	and.w	r3, r3, #12
        || \
 8004faa:	2b08      	cmp	r3, #8
 8004fac:	d112      	bne.n	8004fd4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004fae:	4b82      	ldr	r3, [pc, #520]	@ (80051b8 <HAL_RCC_OscConfig+0x240>)
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004fb6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004fba:	d10b      	bne.n	8004fd4 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fbc:	4b7e      	ldr	r3, [pc, #504]	@ (80051b8 <HAL_RCC_OscConfig+0x240>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d05b      	beq.n	8005080 <HAL_RCC_OscConfig+0x108>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d157      	bne.n	8005080 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	e24e      	b.n	8005472 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004fdc:	d106      	bne.n	8004fec <HAL_RCC_OscConfig+0x74>
 8004fde:	4b76      	ldr	r3, [pc, #472]	@ (80051b8 <HAL_RCC_OscConfig+0x240>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a75      	ldr	r2, [pc, #468]	@ (80051b8 <HAL_RCC_OscConfig+0x240>)
 8004fe4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fe8:	6013      	str	r3, [r2, #0]
 8004fea:	e01d      	b.n	8005028 <HAL_RCC_OscConfig+0xb0>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004ff4:	d10c      	bne.n	8005010 <HAL_RCC_OscConfig+0x98>
 8004ff6:	4b70      	ldr	r3, [pc, #448]	@ (80051b8 <HAL_RCC_OscConfig+0x240>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a6f      	ldr	r2, [pc, #444]	@ (80051b8 <HAL_RCC_OscConfig+0x240>)
 8004ffc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005000:	6013      	str	r3, [r2, #0]
 8005002:	4b6d      	ldr	r3, [pc, #436]	@ (80051b8 <HAL_RCC_OscConfig+0x240>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a6c      	ldr	r2, [pc, #432]	@ (80051b8 <HAL_RCC_OscConfig+0x240>)
 8005008:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800500c:	6013      	str	r3, [r2, #0]
 800500e:	e00b      	b.n	8005028 <HAL_RCC_OscConfig+0xb0>
 8005010:	4b69      	ldr	r3, [pc, #420]	@ (80051b8 <HAL_RCC_OscConfig+0x240>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a68      	ldr	r2, [pc, #416]	@ (80051b8 <HAL_RCC_OscConfig+0x240>)
 8005016:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800501a:	6013      	str	r3, [r2, #0]
 800501c:	4b66      	ldr	r3, [pc, #408]	@ (80051b8 <HAL_RCC_OscConfig+0x240>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a65      	ldr	r2, [pc, #404]	@ (80051b8 <HAL_RCC_OscConfig+0x240>)
 8005022:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005026:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d013      	beq.n	8005058 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005030:	f7fe fe0e 	bl	8003c50 <HAL_GetTick>
 8005034:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005036:	e008      	b.n	800504a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005038:	f7fe fe0a 	bl	8003c50 <HAL_GetTick>
 800503c:	4602      	mov	r2, r0
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	1ad3      	subs	r3, r2, r3
 8005042:	2b64      	cmp	r3, #100	@ 0x64
 8005044:	d901      	bls.n	800504a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005046:	2303      	movs	r3, #3
 8005048:	e213      	b.n	8005472 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800504a:	4b5b      	ldr	r3, [pc, #364]	@ (80051b8 <HAL_RCC_OscConfig+0x240>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005052:	2b00      	cmp	r3, #0
 8005054:	d0f0      	beq.n	8005038 <HAL_RCC_OscConfig+0xc0>
 8005056:	e014      	b.n	8005082 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005058:	f7fe fdfa 	bl	8003c50 <HAL_GetTick>
 800505c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800505e:	e008      	b.n	8005072 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005060:	f7fe fdf6 	bl	8003c50 <HAL_GetTick>
 8005064:	4602      	mov	r2, r0
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	1ad3      	subs	r3, r2, r3
 800506a:	2b64      	cmp	r3, #100	@ 0x64
 800506c:	d901      	bls.n	8005072 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800506e:	2303      	movs	r3, #3
 8005070:	e1ff      	b.n	8005472 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005072:	4b51      	ldr	r3, [pc, #324]	@ (80051b8 <HAL_RCC_OscConfig+0x240>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800507a:	2b00      	cmp	r3, #0
 800507c:	d1f0      	bne.n	8005060 <HAL_RCC_OscConfig+0xe8>
 800507e:	e000      	b.n	8005082 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005080:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f003 0302 	and.w	r3, r3, #2
 800508a:	2b00      	cmp	r3, #0
 800508c:	d063      	beq.n	8005156 <HAL_RCC_OscConfig+0x1de>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800508e:	4b4a      	ldr	r3, [pc, #296]	@ (80051b8 <HAL_RCC_OscConfig+0x240>)
 8005090:	689b      	ldr	r3, [r3, #8]
 8005092:	f003 030c 	and.w	r3, r3, #12
 8005096:	2b00      	cmp	r3, #0
 8005098:	d00b      	beq.n	80050b2 <HAL_RCC_OscConfig+0x13a>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800509a:	4b47      	ldr	r3, [pc, #284]	@ (80051b8 <HAL_RCC_OscConfig+0x240>)
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	f003 030c 	and.w	r3, r3, #12
        || \
 80050a2:	2b08      	cmp	r3, #8
 80050a4:	d11c      	bne.n	80050e0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80050a6:	4b44      	ldr	r3, [pc, #272]	@ (80051b8 <HAL_RCC_OscConfig+0x240>)
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d116      	bne.n	80050e0 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050b2:	4b41      	ldr	r3, [pc, #260]	@ (80051b8 <HAL_RCC_OscConfig+0x240>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f003 0302 	and.w	r3, r3, #2
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d005      	beq.n	80050ca <HAL_RCC_OscConfig+0x152>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	68db      	ldr	r3, [r3, #12]
 80050c2:	2b01      	cmp	r3, #1
 80050c4:	d001      	beq.n	80050ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	e1d3      	b.n	8005472 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050ca:	4b3b      	ldr	r3, [pc, #236]	@ (80051b8 <HAL_RCC_OscConfig+0x240>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	691b      	ldr	r3, [r3, #16]
 80050d6:	00db      	lsls	r3, r3, #3
 80050d8:	4937      	ldr	r1, [pc, #220]	@ (80051b8 <HAL_RCC_OscConfig+0x240>)
 80050da:	4313      	orrs	r3, r2
 80050dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050de:	e03a      	b.n	8005156 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	68db      	ldr	r3, [r3, #12]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d020      	beq.n	800512a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80050e8:	4b34      	ldr	r3, [pc, #208]	@ (80051bc <HAL_RCC_OscConfig+0x244>)
 80050ea:	2201      	movs	r2, #1
 80050ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050ee:	f7fe fdaf 	bl	8003c50 <HAL_GetTick>
 80050f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050f4:	e008      	b.n	8005108 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050f6:	f7fe fdab 	bl	8003c50 <HAL_GetTick>
 80050fa:	4602      	mov	r2, r0
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	1ad3      	subs	r3, r2, r3
 8005100:	2b02      	cmp	r3, #2
 8005102:	d901      	bls.n	8005108 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005104:	2303      	movs	r3, #3
 8005106:	e1b4      	b.n	8005472 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005108:	4b2b      	ldr	r3, [pc, #172]	@ (80051b8 <HAL_RCC_OscConfig+0x240>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f003 0302 	and.w	r3, r3, #2
 8005110:	2b00      	cmp	r3, #0
 8005112:	d0f0      	beq.n	80050f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005114:	4b28      	ldr	r3, [pc, #160]	@ (80051b8 <HAL_RCC_OscConfig+0x240>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	691b      	ldr	r3, [r3, #16]
 8005120:	00db      	lsls	r3, r3, #3
 8005122:	4925      	ldr	r1, [pc, #148]	@ (80051b8 <HAL_RCC_OscConfig+0x240>)
 8005124:	4313      	orrs	r3, r2
 8005126:	600b      	str	r3, [r1, #0]
 8005128:	e015      	b.n	8005156 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800512a:	4b24      	ldr	r3, [pc, #144]	@ (80051bc <HAL_RCC_OscConfig+0x244>)
 800512c:	2200      	movs	r2, #0
 800512e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005130:	f7fe fd8e 	bl	8003c50 <HAL_GetTick>
 8005134:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005136:	e008      	b.n	800514a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005138:	f7fe fd8a 	bl	8003c50 <HAL_GetTick>
 800513c:	4602      	mov	r2, r0
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	1ad3      	subs	r3, r2, r3
 8005142:	2b02      	cmp	r3, #2
 8005144:	d901      	bls.n	800514a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005146:	2303      	movs	r3, #3
 8005148:	e193      	b.n	8005472 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800514a:	4b1b      	ldr	r3, [pc, #108]	@ (80051b8 <HAL_RCC_OscConfig+0x240>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f003 0302 	and.w	r3, r3, #2
 8005152:	2b00      	cmp	r3, #0
 8005154:	d1f0      	bne.n	8005138 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f003 0308 	and.w	r3, r3, #8
 800515e:	2b00      	cmp	r3, #0
 8005160:	d036      	beq.n	80051d0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	695b      	ldr	r3, [r3, #20]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d016      	beq.n	8005198 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800516a:	4b15      	ldr	r3, [pc, #84]	@ (80051c0 <HAL_RCC_OscConfig+0x248>)
 800516c:	2201      	movs	r2, #1
 800516e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005170:	f7fe fd6e 	bl	8003c50 <HAL_GetTick>
 8005174:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005176:	e008      	b.n	800518a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005178:	f7fe fd6a 	bl	8003c50 <HAL_GetTick>
 800517c:	4602      	mov	r2, r0
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	1ad3      	subs	r3, r2, r3
 8005182:	2b02      	cmp	r3, #2
 8005184:	d901      	bls.n	800518a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005186:	2303      	movs	r3, #3
 8005188:	e173      	b.n	8005472 <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800518a:	4b0b      	ldr	r3, [pc, #44]	@ (80051b8 <HAL_RCC_OscConfig+0x240>)
 800518c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800518e:	f003 0302 	and.w	r3, r3, #2
 8005192:	2b00      	cmp	r3, #0
 8005194:	d0f0      	beq.n	8005178 <HAL_RCC_OscConfig+0x200>
 8005196:	e01b      	b.n	80051d0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005198:	4b09      	ldr	r3, [pc, #36]	@ (80051c0 <HAL_RCC_OscConfig+0x248>)
 800519a:	2200      	movs	r2, #0
 800519c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800519e:	f7fe fd57 	bl	8003c50 <HAL_GetTick>
 80051a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051a4:	e00e      	b.n	80051c4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051a6:	f7fe fd53 	bl	8003c50 <HAL_GetTick>
 80051aa:	4602      	mov	r2, r0
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	1ad3      	subs	r3, r2, r3
 80051b0:	2b02      	cmp	r3, #2
 80051b2:	d907      	bls.n	80051c4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80051b4:	2303      	movs	r3, #3
 80051b6:	e15c      	b.n	8005472 <HAL_RCC_OscConfig+0x4fa>
 80051b8:	40023800 	.word	0x40023800
 80051bc:	42470000 	.word	0x42470000
 80051c0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051c4:	4b8a      	ldr	r3, [pc, #552]	@ (80053f0 <HAL_RCC_OscConfig+0x478>)
 80051c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051c8:	f003 0302 	and.w	r3, r3, #2
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d1ea      	bne.n	80051a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f003 0304 	and.w	r3, r3, #4
 80051d8:	2b00      	cmp	r3, #0
 80051da:	f000 8097 	beq.w	800530c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051de:	2300      	movs	r3, #0
 80051e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051e2:	4b83      	ldr	r3, [pc, #524]	@ (80053f0 <HAL_RCC_OscConfig+0x478>)
 80051e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d10f      	bne.n	800520e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051ee:	2300      	movs	r3, #0
 80051f0:	60bb      	str	r3, [r7, #8]
 80051f2:	4b7f      	ldr	r3, [pc, #508]	@ (80053f0 <HAL_RCC_OscConfig+0x478>)
 80051f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051f6:	4a7e      	ldr	r2, [pc, #504]	@ (80053f0 <HAL_RCC_OscConfig+0x478>)
 80051f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80051fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80051fe:	4b7c      	ldr	r3, [pc, #496]	@ (80053f0 <HAL_RCC_OscConfig+0x478>)
 8005200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005202:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005206:	60bb      	str	r3, [r7, #8]
 8005208:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800520a:	2301      	movs	r3, #1
 800520c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800520e:	4b79      	ldr	r3, [pc, #484]	@ (80053f4 <HAL_RCC_OscConfig+0x47c>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005216:	2b00      	cmp	r3, #0
 8005218:	d118      	bne.n	800524c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800521a:	4b76      	ldr	r3, [pc, #472]	@ (80053f4 <HAL_RCC_OscConfig+0x47c>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a75      	ldr	r2, [pc, #468]	@ (80053f4 <HAL_RCC_OscConfig+0x47c>)
 8005220:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005224:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005226:	f7fe fd13 	bl	8003c50 <HAL_GetTick>
 800522a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800522c:	e008      	b.n	8005240 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800522e:	f7fe fd0f 	bl	8003c50 <HAL_GetTick>
 8005232:	4602      	mov	r2, r0
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	1ad3      	subs	r3, r2, r3
 8005238:	2b02      	cmp	r3, #2
 800523a:	d901      	bls.n	8005240 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800523c:	2303      	movs	r3, #3
 800523e:	e118      	b.n	8005472 <HAL_RCC_OscConfig+0x4fa>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005240:	4b6c      	ldr	r3, [pc, #432]	@ (80053f4 <HAL_RCC_OscConfig+0x47c>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005248:	2b00      	cmp	r3, #0
 800524a:	d0f0      	beq.n	800522e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	2b01      	cmp	r3, #1
 8005252:	d106      	bne.n	8005262 <HAL_RCC_OscConfig+0x2ea>
 8005254:	4b66      	ldr	r3, [pc, #408]	@ (80053f0 <HAL_RCC_OscConfig+0x478>)
 8005256:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005258:	4a65      	ldr	r2, [pc, #404]	@ (80053f0 <HAL_RCC_OscConfig+0x478>)
 800525a:	f043 0301 	orr.w	r3, r3, #1
 800525e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005260:	e01c      	b.n	800529c <HAL_RCC_OscConfig+0x324>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	689b      	ldr	r3, [r3, #8]
 8005266:	2b05      	cmp	r3, #5
 8005268:	d10c      	bne.n	8005284 <HAL_RCC_OscConfig+0x30c>
 800526a:	4b61      	ldr	r3, [pc, #388]	@ (80053f0 <HAL_RCC_OscConfig+0x478>)
 800526c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800526e:	4a60      	ldr	r2, [pc, #384]	@ (80053f0 <HAL_RCC_OscConfig+0x478>)
 8005270:	f043 0304 	orr.w	r3, r3, #4
 8005274:	6713      	str	r3, [r2, #112]	@ 0x70
 8005276:	4b5e      	ldr	r3, [pc, #376]	@ (80053f0 <HAL_RCC_OscConfig+0x478>)
 8005278:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800527a:	4a5d      	ldr	r2, [pc, #372]	@ (80053f0 <HAL_RCC_OscConfig+0x478>)
 800527c:	f043 0301 	orr.w	r3, r3, #1
 8005280:	6713      	str	r3, [r2, #112]	@ 0x70
 8005282:	e00b      	b.n	800529c <HAL_RCC_OscConfig+0x324>
 8005284:	4b5a      	ldr	r3, [pc, #360]	@ (80053f0 <HAL_RCC_OscConfig+0x478>)
 8005286:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005288:	4a59      	ldr	r2, [pc, #356]	@ (80053f0 <HAL_RCC_OscConfig+0x478>)
 800528a:	f023 0301 	bic.w	r3, r3, #1
 800528e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005290:	4b57      	ldr	r3, [pc, #348]	@ (80053f0 <HAL_RCC_OscConfig+0x478>)
 8005292:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005294:	4a56      	ldr	r2, [pc, #344]	@ (80053f0 <HAL_RCC_OscConfig+0x478>)
 8005296:	f023 0304 	bic.w	r3, r3, #4
 800529a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d015      	beq.n	80052d0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052a4:	f7fe fcd4 	bl	8003c50 <HAL_GetTick>
 80052a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052aa:	e00a      	b.n	80052c2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052ac:	f7fe fcd0 	bl	8003c50 <HAL_GetTick>
 80052b0:	4602      	mov	r2, r0
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	1ad3      	subs	r3, r2, r3
 80052b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d901      	bls.n	80052c2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80052be:	2303      	movs	r3, #3
 80052c0:	e0d7      	b.n	8005472 <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052c2:	4b4b      	ldr	r3, [pc, #300]	@ (80053f0 <HAL_RCC_OscConfig+0x478>)
 80052c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052c6:	f003 0302 	and.w	r3, r3, #2
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d0ee      	beq.n	80052ac <HAL_RCC_OscConfig+0x334>
 80052ce:	e014      	b.n	80052fa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052d0:	f7fe fcbe 	bl	8003c50 <HAL_GetTick>
 80052d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052d6:	e00a      	b.n	80052ee <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052d8:	f7fe fcba 	bl	8003c50 <HAL_GetTick>
 80052dc:	4602      	mov	r2, r0
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	1ad3      	subs	r3, r2, r3
 80052e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d901      	bls.n	80052ee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80052ea:	2303      	movs	r3, #3
 80052ec:	e0c1      	b.n	8005472 <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052ee:	4b40      	ldr	r3, [pc, #256]	@ (80053f0 <HAL_RCC_OscConfig+0x478>)
 80052f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052f2:	f003 0302 	and.w	r3, r3, #2
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d1ee      	bne.n	80052d8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80052fa:	7dfb      	ldrb	r3, [r7, #23]
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	d105      	bne.n	800530c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005300:	4b3b      	ldr	r3, [pc, #236]	@ (80053f0 <HAL_RCC_OscConfig+0x478>)
 8005302:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005304:	4a3a      	ldr	r2, [pc, #232]	@ (80053f0 <HAL_RCC_OscConfig+0x478>)
 8005306:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800530a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	699b      	ldr	r3, [r3, #24]
 8005310:	2b00      	cmp	r3, #0
 8005312:	f000 80ad 	beq.w	8005470 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005316:	4b36      	ldr	r3, [pc, #216]	@ (80053f0 <HAL_RCC_OscConfig+0x478>)
 8005318:	689b      	ldr	r3, [r3, #8]
 800531a:	f003 030c 	and.w	r3, r3, #12
 800531e:	2b08      	cmp	r3, #8
 8005320:	d060      	beq.n	80053e4 <HAL_RCC_OscConfig+0x46c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	699b      	ldr	r3, [r3, #24]
 8005326:	2b02      	cmp	r3, #2
 8005328:	d145      	bne.n	80053b6 <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800532a:	4b33      	ldr	r3, [pc, #204]	@ (80053f8 <HAL_RCC_OscConfig+0x480>)
 800532c:	2200      	movs	r2, #0
 800532e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005330:	f7fe fc8e 	bl	8003c50 <HAL_GetTick>
 8005334:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005336:	e008      	b.n	800534a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005338:	f7fe fc8a 	bl	8003c50 <HAL_GetTick>
 800533c:	4602      	mov	r2, r0
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	1ad3      	subs	r3, r2, r3
 8005342:	2b02      	cmp	r3, #2
 8005344:	d901      	bls.n	800534a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005346:	2303      	movs	r3, #3
 8005348:	e093      	b.n	8005472 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800534a:	4b29      	ldr	r3, [pc, #164]	@ (80053f0 <HAL_RCC_OscConfig+0x478>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005352:	2b00      	cmp	r3, #0
 8005354:	d1f0      	bne.n	8005338 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	69da      	ldr	r2, [r3, #28]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6a1b      	ldr	r3, [r3, #32]
 800535e:	431a      	orrs	r2, r3
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005364:	019b      	lsls	r3, r3, #6
 8005366:	431a      	orrs	r2, r3
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800536c:	085b      	lsrs	r3, r3, #1
 800536e:	3b01      	subs	r3, #1
 8005370:	041b      	lsls	r3, r3, #16
 8005372:	431a      	orrs	r2, r3
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005378:	061b      	lsls	r3, r3, #24
 800537a:	431a      	orrs	r2, r3
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005380:	071b      	lsls	r3, r3, #28
 8005382:	491b      	ldr	r1, [pc, #108]	@ (80053f0 <HAL_RCC_OscConfig+0x478>)
 8005384:	4313      	orrs	r3, r2
 8005386:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005388:	4b1b      	ldr	r3, [pc, #108]	@ (80053f8 <HAL_RCC_OscConfig+0x480>)
 800538a:	2201      	movs	r2, #1
 800538c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800538e:	f7fe fc5f 	bl	8003c50 <HAL_GetTick>
 8005392:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005394:	e008      	b.n	80053a8 <HAL_RCC_OscConfig+0x430>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005396:	f7fe fc5b 	bl	8003c50 <HAL_GetTick>
 800539a:	4602      	mov	r2, r0
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	1ad3      	subs	r3, r2, r3
 80053a0:	2b02      	cmp	r3, #2
 80053a2:	d901      	bls.n	80053a8 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 80053a4:	2303      	movs	r3, #3
 80053a6:	e064      	b.n	8005472 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053a8:	4b11      	ldr	r3, [pc, #68]	@ (80053f0 <HAL_RCC_OscConfig+0x478>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d0f0      	beq.n	8005396 <HAL_RCC_OscConfig+0x41e>
 80053b4:	e05c      	b.n	8005470 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053b6:	4b10      	ldr	r3, [pc, #64]	@ (80053f8 <HAL_RCC_OscConfig+0x480>)
 80053b8:	2200      	movs	r2, #0
 80053ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053bc:	f7fe fc48 	bl	8003c50 <HAL_GetTick>
 80053c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053c2:	e008      	b.n	80053d6 <HAL_RCC_OscConfig+0x45e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053c4:	f7fe fc44 	bl	8003c50 <HAL_GetTick>
 80053c8:	4602      	mov	r2, r0
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	1ad3      	subs	r3, r2, r3
 80053ce:	2b02      	cmp	r3, #2
 80053d0:	d901      	bls.n	80053d6 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80053d2:	2303      	movs	r3, #3
 80053d4:	e04d      	b.n	8005472 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053d6:	4b06      	ldr	r3, [pc, #24]	@ (80053f0 <HAL_RCC_OscConfig+0x478>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d1f0      	bne.n	80053c4 <HAL_RCC_OscConfig+0x44c>
 80053e2:	e045      	b.n	8005470 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	699b      	ldr	r3, [r3, #24]
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	d107      	bne.n	80053fc <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 80053ec:	2301      	movs	r3, #1
 80053ee:	e040      	b.n	8005472 <HAL_RCC_OscConfig+0x4fa>
 80053f0:	40023800 	.word	0x40023800
 80053f4:	40007000 	.word	0x40007000
 80053f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80053fc:	4b1f      	ldr	r3, [pc, #124]	@ (800547c <HAL_RCC_OscConfig+0x504>)
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	699b      	ldr	r3, [r3, #24]
 8005406:	2b01      	cmp	r3, #1
 8005408:	d030      	beq.n	800546c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005414:	429a      	cmp	r2, r3
 8005416:	d129      	bne.n	800546c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005422:	429a      	cmp	r2, r3
 8005424:	d122      	bne.n	800546c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005426:	68fa      	ldr	r2, [r7, #12]
 8005428:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800542c:	4013      	ands	r3, r2
 800542e:	687a      	ldr	r2, [r7, #4]
 8005430:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005432:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005434:	4293      	cmp	r3, r2
 8005436:	d119      	bne.n	800546c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005442:	085b      	lsrs	r3, r3, #1
 8005444:	3b01      	subs	r3, #1
 8005446:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005448:	429a      	cmp	r2, r3
 800544a:	d10f      	bne.n	800546c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005456:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005458:	429a      	cmp	r2, r3
 800545a:	d107      	bne.n	800546c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005466:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005468:	429a      	cmp	r2, r3
 800546a:	d001      	beq.n	8005470 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800546c:	2301      	movs	r3, #1
 800546e:	e000      	b.n	8005472 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8005470:	2300      	movs	r3, #0
}
 8005472:	4618      	mov	r0, r3
 8005474:	3718      	adds	r7, #24
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}
 800547a:	bf00      	nop
 800547c:	40023800 	.word	0x40023800

08005480 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b082      	sub	sp, #8
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d101      	bne.n	8005492 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	e041      	b.n	8005516 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005498:	b2db      	uxtb	r3, r3
 800549a:	2b00      	cmp	r3, #0
 800549c:	d106      	bne.n	80054ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2200      	movs	r2, #0
 80054a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f7fd fb08 	bl	8002abc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2202      	movs	r2, #2
 80054b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681a      	ldr	r2, [r3, #0]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	3304      	adds	r3, #4
 80054bc:	4619      	mov	r1, r3
 80054be:	4610      	mov	r0, r2
 80054c0:	f000 fcc0 	bl	8005e44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2201      	movs	r2, #1
 80054c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2201      	movs	r2, #1
 80054d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2201      	movs	r2, #1
 80054d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2201      	movs	r2, #1
 80054e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2201      	movs	r2, #1
 80054e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2201      	movs	r2, #1
 80054f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2201      	movs	r2, #1
 80054f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2201      	movs	r2, #1
 8005500:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2201      	movs	r2, #1
 8005508:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2201      	movs	r2, #1
 8005510:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005514:	2300      	movs	r3, #0
}
 8005516:	4618      	mov	r0, r3
 8005518:	3708      	adds	r7, #8
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}
	...

08005520 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005520:	b480      	push	{r7}
 8005522:	b085      	sub	sp, #20
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800552e:	b2db      	uxtb	r3, r3
 8005530:	2b01      	cmp	r3, #1
 8005532:	d001      	beq.n	8005538 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005534:	2301      	movs	r3, #1
 8005536:	e046      	b.n	80055c6 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2202      	movs	r2, #2
 800553c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a23      	ldr	r2, [pc, #140]	@ (80055d4 <HAL_TIM_Base_Start+0xb4>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d022      	beq.n	8005590 <HAL_TIM_Base_Start+0x70>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005552:	d01d      	beq.n	8005590 <HAL_TIM_Base_Start+0x70>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a1f      	ldr	r2, [pc, #124]	@ (80055d8 <HAL_TIM_Base_Start+0xb8>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d018      	beq.n	8005590 <HAL_TIM_Base_Start+0x70>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a1e      	ldr	r2, [pc, #120]	@ (80055dc <HAL_TIM_Base_Start+0xbc>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d013      	beq.n	8005590 <HAL_TIM_Base_Start+0x70>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a1c      	ldr	r2, [pc, #112]	@ (80055e0 <HAL_TIM_Base_Start+0xc0>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d00e      	beq.n	8005590 <HAL_TIM_Base_Start+0x70>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a1b      	ldr	r2, [pc, #108]	@ (80055e4 <HAL_TIM_Base_Start+0xc4>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d009      	beq.n	8005590 <HAL_TIM_Base_Start+0x70>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a19      	ldr	r2, [pc, #100]	@ (80055e8 <HAL_TIM_Base_Start+0xc8>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d004      	beq.n	8005590 <HAL_TIM_Base_Start+0x70>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a18      	ldr	r2, [pc, #96]	@ (80055ec <HAL_TIM_Base_Start+0xcc>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d111      	bne.n	80055b4 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	689b      	ldr	r3, [r3, #8]
 8005596:	f003 0307 	and.w	r3, r3, #7
 800559a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2b06      	cmp	r3, #6
 80055a0:	d010      	beq.n	80055c4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	681a      	ldr	r2, [r3, #0]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f042 0201 	orr.w	r2, r2, #1
 80055b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055b2:	e007      	b.n	80055c4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	681a      	ldr	r2, [r3, #0]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f042 0201 	orr.w	r2, r2, #1
 80055c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80055c4:	2300      	movs	r3, #0
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	3714      	adds	r7, #20
 80055ca:	46bd      	mov	sp, r7
 80055cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d0:	4770      	bx	lr
 80055d2:	bf00      	nop
 80055d4:	40010000 	.word	0x40010000
 80055d8:	40000400 	.word	0x40000400
 80055dc:	40000800 	.word	0x40000800
 80055e0:	40000c00 	.word	0x40000c00
 80055e4:	40010400 	.word	0x40010400
 80055e8:	40014000 	.word	0x40014000
 80055ec:	40001800 	.word	0x40001800

080055f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b085      	sub	sp, #20
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055fe:	b2db      	uxtb	r3, r3
 8005600:	2b01      	cmp	r3, #1
 8005602:	d001      	beq.n	8005608 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005604:	2301      	movs	r3, #1
 8005606:	e04e      	b.n	80056a6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2202      	movs	r2, #2
 800560c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	68da      	ldr	r2, [r3, #12]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f042 0201 	orr.w	r2, r2, #1
 800561e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a23      	ldr	r2, [pc, #140]	@ (80056b4 <HAL_TIM_Base_Start_IT+0xc4>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d022      	beq.n	8005670 <HAL_TIM_Base_Start_IT+0x80>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005632:	d01d      	beq.n	8005670 <HAL_TIM_Base_Start_IT+0x80>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a1f      	ldr	r2, [pc, #124]	@ (80056b8 <HAL_TIM_Base_Start_IT+0xc8>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d018      	beq.n	8005670 <HAL_TIM_Base_Start_IT+0x80>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a1e      	ldr	r2, [pc, #120]	@ (80056bc <HAL_TIM_Base_Start_IT+0xcc>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d013      	beq.n	8005670 <HAL_TIM_Base_Start_IT+0x80>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a1c      	ldr	r2, [pc, #112]	@ (80056c0 <HAL_TIM_Base_Start_IT+0xd0>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d00e      	beq.n	8005670 <HAL_TIM_Base_Start_IT+0x80>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a1b      	ldr	r2, [pc, #108]	@ (80056c4 <HAL_TIM_Base_Start_IT+0xd4>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d009      	beq.n	8005670 <HAL_TIM_Base_Start_IT+0x80>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a19      	ldr	r2, [pc, #100]	@ (80056c8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d004      	beq.n	8005670 <HAL_TIM_Base_Start_IT+0x80>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a18      	ldr	r2, [pc, #96]	@ (80056cc <HAL_TIM_Base_Start_IT+0xdc>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d111      	bne.n	8005694 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	f003 0307 	and.w	r3, r3, #7
 800567a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2b06      	cmp	r3, #6
 8005680:	d010      	beq.n	80056a4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f042 0201 	orr.w	r2, r2, #1
 8005690:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005692:	e007      	b.n	80056a4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	681a      	ldr	r2, [r3, #0]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f042 0201 	orr.w	r2, r2, #1
 80056a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80056a4:	2300      	movs	r3, #0
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	3714      	adds	r7, #20
 80056aa:	46bd      	mov	sp, r7
 80056ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b0:	4770      	bx	lr
 80056b2:	bf00      	nop
 80056b4:	40010000 	.word	0x40010000
 80056b8:	40000400 	.word	0x40000400
 80056bc:	40000800 	.word	0x40000800
 80056c0:	40000c00 	.word	0x40000c00
 80056c4:	40010400 	.word	0x40010400
 80056c8:	40014000 	.word	0x40014000
 80056cc:	40001800 	.word	0x40001800

080056d0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b082      	sub	sp, #8
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d101      	bne.n	80056e2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80056de:	2301      	movs	r3, #1
 80056e0:	e041      	b.n	8005766 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80056e8:	b2db      	uxtb	r3, r3
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d106      	bne.n	80056fc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2200      	movs	r2, #0
 80056f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f7fd f9c0 	bl	8002a7c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2202      	movs	r2, #2
 8005700:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681a      	ldr	r2, [r3, #0]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	3304      	adds	r3, #4
 800570c:	4619      	mov	r1, r3
 800570e:	4610      	mov	r0, r2
 8005710:	f000 fb98 	bl	8005e44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2201      	movs	r2, #1
 8005718:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2201      	movs	r2, #1
 8005720:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2201      	movs	r2, #1
 8005728:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2201      	movs	r2, #1
 8005730:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2201      	movs	r2, #1
 8005738:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2201      	movs	r2, #1
 8005740:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2201      	movs	r2, #1
 8005748:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2201      	movs	r2, #1
 8005750:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2201      	movs	r2, #1
 8005758:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2201      	movs	r2, #1
 8005760:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005764:	2300      	movs	r3, #0
}
 8005766:	4618      	mov	r0, r3
 8005768:	3708      	adds	r7, #8
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}
	...

08005770 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b084      	sub	sp, #16
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
 8005778:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d109      	bne.n	8005794 <HAL_TIM_PWM_Start+0x24>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005786:	b2db      	uxtb	r3, r3
 8005788:	2b01      	cmp	r3, #1
 800578a:	bf14      	ite	ne
 800578c:	2301      	movne	r3, #1
 800578e:	2300      	moveq	r3, #0
 8005790:	b2db      	uxtb	r3, r3
 8005792:	e022      	b.n	80057da <HAL_TIM_PWM_Start+0x6a>
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	2b04      	cmp	r3, #4
 8005798:	d109      	bne.n	80057ae <HAL_TIM_PWM_Start+0x3e>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80057a0:	b2db      	uxtb	r3, r3
 80057a2:	2b01      	cmp	r3, #1
 80057a4:	bf14      	ite	ne
 80057a6:	2301      	movne	r3, #1
 80057a8:	2300      	moveq	r3, #0
 80057aa:	b2db      	uxtb	r3, r3
 80057ac:	e015      	b.n	80057da <HAL_TIM_PWM_Start+0x6a>
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	2b08      	cmp	r3, #8
 80057b2:	d109      	bne.n	80057c8 <HAL_TIM_PWM_Start+0x58>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80057ba:	b2db      	uxtb	r3, r3
 80057bc:	2b01      	cmp	r3, #1
 80057be:	bf14      	ite	ne
 80057c0:	2301      	movne	r3, #1
 80057c2:	2300      	moveq	r3, #0
 80057c4:	b2db      	uxtb	r3, r3
 80057c6:	e008      	b.n	80057da <HAL_TIM_PWM_Start+0x6a>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80057ce:	b2db      	uxtb	r3, r3
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	bf14      	ite	ne
 80057d4:	2301      	movne	r3, #1
 80057d6:	2300      	moveq	r3, #0
 80057d8:	b2db      	uxtb	r3, r3
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d001      	beq.n	80057e2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80057de:	2301      	movs	r3, #1
 80057e0:	e07c      	b.n	80058dc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d104      	bne.n	80057f2 <HAL_TIM_PWM_Start+0x82>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2202      	movs	r2, #2
 80057ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80057f0:	e013      	b.n	800581a <HAL_TIM_PWM_Start+0xaa>
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	2b04      	cmp	r3, #4
 80057f6:	d104      	bne.n	8005802 <HAL_TIM_PWM_Start+0x92>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2202      	movs	r2, #2
 80057fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005800:	e00b      	b.n	800581a <HAL_TIM_PWM_Start+0xaa>
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	2b08      	cmp	r3, #8
 8005806:	d104      	bne.n	8005812 <HAL_TIM_PWM_Start+0xa2>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2202      	movs	r2, #2
 800580c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005810:	e003      	b.n	800581a <HAL_TIM_PWM_Start+0xaa>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2202      	movs	r2, #2
 8005816:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	2201      	movs	r2, #1
 8005820:	6839      	ldr	r1, [r7, #0]
 8005822:	4618      	mov	r0, r3
 8005824:	f000 fe04 	bl	8006430 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a2d      	ldr	r2, [pc, #180]	@ (80058e4 <HAL_TIM_PWM_Start+0x174>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d004      	beq.n	800583c <HAL_TIM_PWM_Start+0xcc>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a2c      	ldr	r2, [pc, #176]	@ (80058e8 <HAL_TIM_PWM_Start+0x178>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d101      	bne.n	8005840 <HAL_TIM_PWM_Start+0xd0>
 800583c:	2301      	movs	r3, #1
 800583e:	e000      	b.n	8005842 <HAL_TIM_PWM_Start+0xd2>
 8005840:	2300      	movs	r3, #0
 8005842:	2b00      	cmp	r3, #0
 8005844:	d007      	beq.n	8005856 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005854:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a22      	ldr	r2, [pc, #136]	@ (80058e4 <HAL_TIM_PWM_Start+0x174>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d022      	beq.n	80058a6 <HAL_TIM_PWM_Start+0x136>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005868:	d01d      	beq.n	80058a6 <HAL_TIM_PWM_Start+0x136>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a1f      	ldr	r2, [pc, #124]	@ (80058ec <HAL_TIM_PWM_Start+0x17c>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d018      	beq.n	80058a6 <HAL_TIM_PWM_Start+0x136>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a1d      	ldr	r2, [pc, #116]	@ (80058f0 <HAL_TIM_PWM_Start+0x180>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d013      	beq.n	80058a6 <HAL_TIM_PWM_Start+0x136>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a1c      	ldr	r2, [pc, #112]	@ (80058f4 <HAL_TIM_PWM_Start+0x184>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d00e      	beq.n	80058a6 <HAL_TIM_PWM_Start+0x136>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a16      	ldr	r2, [pc, #88]	@ (80058e8 <HAL_TIM_PWM_Start+0x178>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d009      	beq.n	80058a6 <HAL_TIM_PWM_Start+0x136>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a18      	ldr	r2, [pc, #96]	@ (80058f8 <HAL_TIM_PWM_Start+0x188>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d004      	beq.n	80058a6 <HAL_TIM_PWM_Start+0x136>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a16      	ldr	r2, [pc, #88]	@ (80058fc <HAL_TIM_PWM_Start+0x18c>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d111      	bne.n	80058ca <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	689b      	ldr	r3, [r3, #8]
 80058ac:	f003 0307 	and.w	r3, r3, #7
 80058b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2b06      	cmp	r3, #6
 80058b6:	d010      	beq.n	80058da <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	681a      	ldr	r2, [r3, #0]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f042 0201 	orr.w	r2, r2, #1
 80058c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058c8:	e007      	b.n	80058da <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	681a      	ldr	r2, [r3, #0]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f042 0201 	orr.w	r2, r2, #1
 80058d8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80058da:	2300      	movs	r3, #0
}
 80058dc:	4618      	mov	r0, r3
 80058de:	3710      	adds	r7, #16
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}
 80058e4:	40010000 	.word	0x40010000
 80058e8:	40010400 	.word	0x40010400
 80058ec:	40000400 	.word	0x40000400
 80058f0:	40000800 	.word	0x40000800
 80058f4:	40000c00 	.word	0x40000c00
 80058f8:	40014000 	.word	0x40014000
 80058fc:	40001800 	.word	0x40001800

08005900 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b084      	sub	sp, #16
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	68db      	ldr	r3, [r3, #12]
 800590e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	691b      	ldr	r3, [r3, #16]
 8005916:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	f003 0302 	and.w	r3, r3, #2
 800591e:	2b00      	cmp	r3, #0
 8005920:	d020      	beq.n	8005964 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	f003 0302 	and.w	r3, r3, #2
 8005928:	2b00      	cmp	r3, #0
 800592a:	d01b      	beq.n	8005964 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f06f 0202 	mvn.w	r2, #2
 8005934:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2201      	movs	r2, #1
 800593a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	699b      	ldr	r3, [r3, #24]
 8005942:	f003 0303 	and.w	r3, r3, #3
 8005946:	2b00      	cmp	r3, #0
 8005948:	d003      	beq.n	8005952 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f000 fa5b 	bl	8005e06 <HAL_TIM_IC_CaptureCallback>
 8005950:	e005      	b.n	800595e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f000 fa4d 	bl	8005df2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005958:	6878      	ldr	r0, [r7, #4]
 800595a:	f000 fa5e 	bl	8005e1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2200      	movs	r2, #0
 8005962:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	f003 0304 	and.w	r3, r3, #4
 800596a:	2b00      	cmp	r3, #0
 800596c:	d020      	beq.n	80059b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	f003 0304 	and.w	r3, r3, #4
 8005974:	2b00      	cmp	r3, #0
 8005976:	d01b      	beq.n	80059b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f06f 0204 	mvn.w	r2, #4
 8005980:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2202      	movs	r2, #2
 8005986:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	699b      	ldr	r3, [r3, #24]
 800598e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005992:	2b00      	cmp	r3, #0
 8005994:	d003      	beq.n	800599e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f000 fa35 	bl	8005e06 <HAL_TIM_IC_CaptureCallback>
 800599c:	e005      	b.n	80059aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f000 fa27 	bl	8005df2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059a4:	6878      	ldr	r0, [r7, #4]
 80059a6:	f000 fa38 	bl	8005e1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2200      	movs	r2, #0
 80059ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	f003 0308 	and.w	r3, r3, #8
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d020      	beq.n	80059fc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	f003 0308 	and.w	r3, r3, #8
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d01b      	beq.n	80059fc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f06f 0208 	mvn.w	r2, #8
 80059cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2204      	movs	r2, #4
 80059d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	69db      	ldr	r3, [r3, #28]
 80059da:	f003 0303 	and.w	r3, r3, #3
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d003      	beq.n	80059ea <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f000 fa0f 	bl	8005e06 <HAL_TIM_IC_CaptureCallback>
 80059e8:	e005      	b.n	80059f6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f000 fa01 	bl	8005df2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	f000 fa12 	bl	8005e1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2200      	movs	r2, #0
 80059fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	f003 0310 	and.w	r3, r3, #16
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d020      	beq.n	8005a48 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	f003 0310 	and.w	r3, r3, #16
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d01b      	beq.n	8005a48 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f06f 0210 	mvn.w	r2, #16
 8005a18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2208      	movs	r2, #8
 8005a1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	69db      	ldr	r3, [r3, #28]
 8005a26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d003      	beq.n	8005a36 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f000 f9e9 	bl	8005e06 <HAL_TIM_IC_CaptureCallback>
 8005a34:	e005      	b.n	8005a42 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f000 f9db 	bl	8005df2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a3c:	6878      	ldr	r0, [r7, #4]
 8005a3e:	f000 f9ec 	bl	8005e1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2200      	movs	r2, #0
 8005a46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	f003 0301 	and.w	r3, r3, #1
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d00c      	beq.n	8005a6c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	f003 0301 	and.w	r3, r3, #1
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d007      	beq.n	8005a6c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f06f 0201 	mvn.w	r2, #1
 8005a64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f7fc fbda 	bl	8002220 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d00c      	beq.n	8005a90 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d007      	beq.n	8005a90 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005a88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f000 fd7c 	bl	8006588 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d00c      	beq.n	8005ab4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d007      	beq.n	8005ab4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005aac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f000 f9bd 	bl	8005e2e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	f003 0320 	and.w	r3, r3, #32
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d00c      	beq.n	8005ad8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	f003 0320 	and.w	r3, r3, #32
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d007      	beq.n	8005ad8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f06f 0220 	mvn.w	r2, #32
 8005ad0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	f000 fd4e 	bl	8006574 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005ad8:	bf00      	nop
 8005ada:	3710      	adds	r7, #16
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}

08005ae0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b086      	sub	sp, #24
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	60f8      	str	r0, [r7, #12]
 8005ae8:	60b9      	str	r1, [r7, #8]
 8005aea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005aec:	2300      	movs	r3, #0
 8005aee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005af6:	2b01      	cmp	r3, #1
 8005af8:	d101      	bne.n	8005afe <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005afa:	2302      	movs	r3, #2
 8005afc:	e0ae      	b.n	8005c5c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	2201      	movs	r2, #1
 8005b02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2b0c      	cmp	r3, #12
 8005b0a:	f200 809f 	bhi.w	8005c4c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005b0e:	a201      	add	r2, pc, #4	@ (adr r2, 8005b14 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005b10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b14:	08005b49 	.word	0x08005b49
 8005b18:	08005c4d 	.word	0x08005c4d
 8005b1c:	08005c4d 	.word	0x08005c4d
 8005b20:	08005c4d 	.word	0x08005c4d
 8005b24:	08005b89 	.word	0x08005b89
 8005b28:	08005c4d 	.word	0x08005c4d
 8005b2c:	08005c4d 	.word	0x08005c4d
 8005b30:	08005c4d 	.word	0x08005c4d
 8005b34:	08005bcb 	.word	0x08005bcb
 8005b38:	08005c4d 	.word	0x08005c4d
 8005b3c:	08005c4d 	.word	0x08005c4d
 8005b40:	08005c4d 	.word	0x08005c4d
 8005b44:	08005c0b 	.word	0x08005c0b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	68b9      	ldr	r1, [r7, #8]
 8005b4e:	4618      	mov	r0, r3
 8005b50:	f000 fa24 	bl	8005f9c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	699a      	ldr	r2, [r3, #24]
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f042 0208 	orr.w	r2, r2, #8
 8005b62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	699a      	ldr	r2, [r3, #24]
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f022 0204 	bic.w	r2, r2, #4
 8005b72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	6999      	ldr	r1, [r3, #24]
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	691a      	ldr	r2, [r3, #16]
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	430a      	orrs	r2, r1
 8005b84:	619a      	str	r2, [r3, #24]
      break;
 8005b86:	e064      	b.n	8005c52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	68b9      	ldr	r1, [r7, #8]
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f000 fa74 	bl	800607c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	699a      	ldr	r2, [r3, #24]
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005ba2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	699a      	ldr	r2, [r3, #24]
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005bb2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	6999      	ldr	r1, [r3, #24]
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	691b      	ldr	r3, [r3, #16]
 8005bbe:	021a      	lsls	r2, r3, #8
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	430a      	orrs	r2, r1
 8005bc6:	619a      	str	r2, [r3, #24]
      break;
 8005bc8:	e043      	b.n	8005c52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	68b9      	ldr	r1, [r7, #8]
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	f000 fac9 	bl	8006168 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	69da      	ldr	r2, [r3, #28]
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f042 0208 	orr.w	r2, r2, #8
 8005be4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	69da      	ldr	r2, [r3, #28]
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f022 0204 	bic.w	r2, r2, #4
 8005bf4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	69d9      	ldr	r1, [r3, #28]
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	691a      	ldr	r2, [r3, #16]
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	430a      	orrs	r2, r1
 8005c06:	61da      	str	r2, [r3, #28]
      break;
 8005c08:	e023      	b.n	8005c52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	68b9      	ldr	r1, [r7, #8]
 8005c10:	4618      	mov	r0, r3
 8005c12:	f000 fb1d 	bl	8006250 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	69da      	ldr	r2, [r3, #28]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005c24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	69da      	ldr	r2, [r3, #28]
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	69d9      	ldr	r1, [r3, #28]
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	691b      	ldr	r3, [r3, #16]
 8005c40:	021a      	lsls	r2, r3, #8
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	430a      	orrs	r2, r1
 8005c48:	61da      	str	r2, [r3, #28]
      break;
 8005c4a:	e002      	b.n	8005c52 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	75fb      	strb	r3, [r7, #23]
      break;
 8005c50:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2200      	movs	r2, #0
 8005c56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005c5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	3718      	adds	r7, #24
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bd80      	pop	{r7, pc}

08005c64 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b084      	sub	sp, #16
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
 8005c6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c78:	2b01      	cmp	r3, #1
 8005c7a:	d101      	bne.n	8005c80 <HAL_TIM_ConfigClockSource+0x1c>
 8005c7c:	2302      	movs	r3, #2
 8005c7e:	e0b4      	b.n	8005dea <HAL_TIM_ConfigClockSource+0x186>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2201      	movs	r2, #1
 8005c84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2202      	movs	r2, #2
 8005c8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	689b      	ldr	r3, [r3, #8]
 8005c96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005c9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005ca6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	68ba      	ldr	r2, [r7, #8]
 8005cae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005cb8:	d03e      	beq.n	8005d38 <HAL_TIM_ConfigClockSource+0xd4>
 8005cba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005cbe:	f200 8087 	bhi.w	8005dd0 <HAL_TIM_ConfigClockSource+0x16c>
 8005cc2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005cc6:	f000 8086 	beq.w	8005dd6 <HAL_TIM_ConfigClockSource+0x172>
 8005cca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005cce:	d87f      	bhi.n	8005dd0 <HAL_TIM_ConfigClockSource+0x16c>
 8005cd0:	2b70      	cmp	r3, #112	@ 0x70
 8005cd2:	d01a      	beq.n	8005d0a <HAL_TIM_ConfigClockSource+0xa6>
 8005cd4:	2b70      	cmp	r3, #112	@ 0x70
 8005cd6:	d87b      	bhi.n	8005dd0 <HAL_TIM_ConfigClockSource+0x16c>
 8005cd8:	2b60      	cmp	r3, #96	@ 0x60
 8005cda:	d050      	beq.n	8005d7e <HAL_TIM_ConfigClockSource+0x11a>
 8005cdc:	2b60      	cmp	r3, #96	@ 0x60
 8005cde:	d877      	bhi.n	8005dd0 <HAL_TIM_ConfigClockSource+0x16c>
 8005ce0:	2b50      	cmp	r3, #80	@ 0x50
 8005ce2:	d03c      	beq.n	8005d5e <HAL_TIM_ConfigClockSource+0xfa>
 8005ce4:	2b50      	cmp	r3, #80	@ 0x50
 8005ce6:	d873      	bhi.n	8005dd0 <HAL_TIM_ConfigClockSource+0x16c>
 8005ce8:	2b40      	cmp	r3, #64	@ 0x40
 8005cea:	d058      	beq.n	8005d9e <HAL_TIM_ConfigClockSource+0x13a>
 8005cec:	2b40      	cmp	r3, #64	@ 0x40
 8005cee:	d86f      	bhi.n	8005dd0 <HAL_TIM_ConfigClockSource+0x16c>
 8005cf0:	2b30      	cmp	r3, #48	@ 0x30
 8005cf2:	d064      	beq.n	8005dbe <HAL_TIM_ConfigClockSource+0x15a>
 8005cf4:	2b30      	cmp	r3, #48	@ 0x30
 8005cf6:	d86b      	bhi.n	8005dd0 <HAL_TIM_ConfigClockSource+0x16c>
 8005cf8:	2b20      	cmp	r3, #32
 8005cfa:	d060      	beq.n	8005dbe <HAL_TIM_ConfigClockSource+0x15a>
 8005cfc:	2b20      	cmp	r3, #32
 8005cfe:	d867      	bhi.n	8005dd0 <HAL_TIM_ConfigClockSource+0x16c>
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d05c      	beq.n	8005dbe <HAL_TIM_ConfigClockSource+0x15a>
 8005d04:	2b10      	cmp	r3, #16
 8005d06:	d05a      	beq.n	8005dbe <HAL_TIM_ConfigClockSource+0x15a>
 8005d08:	e062      	b.n	8005dd0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005d1a:	f000 fb69 	bl	80063f0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	689b      	ldr	r3, [r3, #8]
 8005d24:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005d2c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	68ba      	ldr	r2, [r7, #8]
 8005d34:	609a      	str	r2, [r3, #8]
      break;
 8005d36:	e04f      	b.n	8005dd8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005d48:	f000 fb52 	bl	80063f0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	689a      	ldr	r2, [r3, #8]
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005d5a:	609a      	str	r2, [r3, #8]
      break;
 8005d5c:	e03c      	b.n	8005dd8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d6a:	461a      	mov	r2, r3
 8005d6c:	f000 fac6 	bl	80062fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	2150      	movs	r1, #80	@ 0x50
 8005d76:	4618      	mov	r0, r3
 8005d78:	f000 fb1f 	bl	80063ba <TIM_ITRx_SetConfig>
      break;
 8005d7c:	e02c      	b.n	8005dd8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d8a:	461a      	mov	r2, r3
 8005d8c:	f000 fae5 	bl	800635a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	2160      	movs	r1, #96	@ 0x60
 8005d96:	4618      	mov	r0, r3
 8005d98:	f000 fb0f 	bl	80063ba <TIM_ITRx_SetConfig>
      break;
 8005d9c:	e01c      	b.n	8005dd8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005daa:	461a      	mov	r2, r3
 8005dac:	f000 faa6 	bl	80062fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	2140      	movs	r1, #64	@ 0x40
 8005db6:	4618      	mov	r0, r3
 8005db8:	f000 faff 	bl	80063ba <TIM_ITRx_SetConfig>
      break;
 8005dbc:	e00c      	b.n	8005dd8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4619      	mov	r1, r3
 8005dc8:	4610      	mov	r0, r2
 8005dca:	f000 faf6 	bl	80063ba <TIM_ITRx_SetConfig>
      break;
 8005dce:	e003      	b.n	8005dd8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	73fb      	strb	r3, [r7, #15]
      break;
 8005dd4:	e000      	b.n	8005dd8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005dd6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2201      	movs	r2, #1
 8005ddc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2200      	movs	r2, #0
 8005de4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005de8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dea:	4618      	mov	r0, r3
 8005dec:	3710      	adds	r7, #16
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}

08005df2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005df2:	b480      	push	{r7}
 8005df4:	b083      	sub	sp, #12
 8005df6:	af00      	add	r7, sp, #0
 8005df8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005dfa:	bf00      	nop
 8005dfc:	370c      	adds	r7, #12
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e04:	4770      	bx	lr

08005e06 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005e06:	b480      	push	{r7}
 8005e08:	b083      	sub	sp, #12
 8005e0a:	af00      	add	r7, sp, #0
 8005e0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005e0e:	bf00      	nop
 8005e10:	370c      	adds	r7, #12
 8005e12:	46bd      	mov	sp, r7
 8005e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e18:	4770      	bx	lr

08005e1a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005e1a:	b480      	push	{r7}
 8005e1c:	b083      	sub	sp, #12
 8005e1e:	af00      	add	r7, sp, #0
 8005e20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005e22:	bf00      	nop
 8005e24:	370c      	adds	r7, #12
 8005e26:	46bd      	mov	sp, r7
 8005e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2c:	4770      	bx	lr

08005e2e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005e2e:	b480      	push	{r7}
 8005e30:	b083      	sub	sp, #12
 8005e32:	af00      	add	r7, sp, #0
 8005e34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005e36:	bf00      	nop
 8005e38:	370c      	adds	r7, #12
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e40:	4770      	bx	lr
	...

08005e44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b085      	sub	sp, #20
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
 8005e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	4a46      	ldr	r2, [pc, #280]	@ (8005f70 <TIM_Base_SetConfig+0x12c>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d013      	beq.n	8005e84 <TIM_Base_SetConfig+0x40>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e62:	d00f      	beq.n	8005e84 <TIM_Base_SetConfig+0x40>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	4a43      	ldr	r2, [pc, #268]	@ (8005f74 <TIM_Base_SetConfig+0x130>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d00b      	beq.n	8005e84 <TIM_Base_SetConfig+0x40>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	4a42      	ldr	r2, [pc, #264]	@ (8005f78 <TIM_Base_SetConfig+0x134>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d007      	beq.n	8005e84 <TIM_Base_SetConfig+0x40>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	4a41      	ldr	r2, [pc, #260]	@ (8005f7c <TIM_Base_SetConfig+0x138>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d003      	beq.n	8005e84 <TIM_Base_SetConfig+0x40>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	4a40      	ldr	r2, [pc, #256]	@ (8005f80 <TIM_Base_SetConfig+0x13c>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d108      	bne.n	8005e96 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	68fa      	ldr	r2, [r7, #12]
 8005e92:	4313      	orrs	r3, r2
 8005e94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	4a35      	ldr	r2, [pc, #212]	@ (8005f70 <TIM_Base_SetConfig+0x12c>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d02b      	beq.n	8005ef6 <TIM_Base_SetConfig+0xb2>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ea4:	d027      	beq.n	8005ef6 <TIM_Base_SetConfig+0xb2>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	4a32      	ldr	r2, [pc, #200]	@ (8005f74 <TIM_Base_SetConfig+0x130>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d023      	beq.n	8005ef6 <TIM_Base_SetConfig+0xb2>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	4a31      	ldr	r2, [pc, #196]	@ (8005f78 <TIM_Base_SetConfig+0x134>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d01f      	beq.n	8005ef6 <TIM_Base_SetConfig+0xb2>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	4a30      	ldr	r2, [pc, #192]	@ (8005f7c <TIM_Base_SetConfig+0x138>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d01b      	beq.n	8005ef6 <TIM_Base_SetConfig+0xb2>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	4a2f      	ldr	r2, [pc, #188]	@ (8005f80 <TIM_Base_SetConfig+0x13c>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d017      	beq.n	8005ef6 <TIM_Base_SetConfig+0xb2>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	4a2e      	ldr	r2, [pc, #184]	@ (8005f84 <TIM_Base_SetConfig+0x140>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d013      	beq.n	8005ef6 <TIM_Base_SetConfig+0xb2>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	4a2d      	ldr	r2, [pc, #180]	@ (8005f88 <TIM_Base_SetConfig+0x144>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d00f      	beq.n	8005ef6 <TIM_Base_SetConfig+0xb2>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	4a2c      	ldr	r2, [pc, #176]	@ (8005f8c <TIM_Base_SetConfig+0x148>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d00b      	beq.n	8005ef6 <TIM_Base_SetConfig+0xb2>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	4a2b      	ldr	r2, [pc, #172]	@ (8005f90 <TIM_Base_SetConfig+0x14c>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d007      	beq.n	8005ef6 <TIM_Base_SetConfig+0xb2>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	4a2a      	ldr	r2, [pc, #168]	@ (8005f94 <TIM_Base_SetConfig+0x150>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d003      	beq.n	8005ef6 <TIM_Base_SetConfig+0xb2>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	4a29      	ldr	r2, [pc, #164]	@ (8005f98 <TIM_Base_SetConfig+0x154>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d108      	bne.n	8005f08 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005efc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	68db      	ldr	r3, [r3, #12]
 8005f02:	68fa      	ldr	r2, [r7, #12]
 8005f04:	4313      	orrs	r3, r2
 8005f06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	695b      	ldr	r3, [r3, #20]
 8005f12:	4313      	orrs	r3, r2
 8005f14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	68fa      	ldr	r2, [r7, #12]
 8005f1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	689a      	ldr	r2, [r3, #8]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	681a      	ldr	r2, [r3, #0]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	4a10      	ldr	r2, [pc, #64]	@ (8005f70 <TIM_Base_SetConfig+0x12c>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d003      	beq.n	8005f3c <TIM_Base_SetConfig+0xf8>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	4a12      	ldr	r2, [pc, #72]	@ (8005f80 <TIM_Base_SetConfig+0x13c>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d103      	bne.n	8005f44 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	691a      	ldr	r2, [r3, #16]
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2201      	movs	r2, #1
 8005f48:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	691b      	ldr	r3, [r3, #16]
 8005f4e:	f003 0301 	and.w	r3, r3, #1
 8005f52:	2b01      	cmp	r3, #1
 8005f54:	d105      	bne.n	8005f62 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	691b      	ldr	r3, [r3, #16]
 8005f5a:	f023 0201 	bic.w	r2, r3, #1
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	611a      	str	r2, [r3, #16]
  }
}
 8005f62:	bf00      	nop
 8005f64:	3714      	adds	r7, #20
 8005f66:	46bd      	mov	sp, r7
 8005f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6c:	4770      	bx	lr
 8005f6e:	bf00      	nop
 8005f70:	40010000 	.word	0x40010000
 8005f74:	40000400 	.word	0x40000400
 8005f78:	40000800 	.word	0x40000800
 8005f7c:	40000c00 	.word	0x40000c00
 8005f80:	40010400 	.word	0x40010400
 8005f84:	40014000 	.word	0x40014000
 8005f88:	40014400 	.word	0x40014400
 8005f8c:	40014800 	.word	0x40014800
 8005f90:	40001800 	.word	0x40001800
 8005f94:	40001c00 	.word	0x40001c00
 8005f98:	40002000 	.word	0x40002000

08005f9c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b087      	sub	sp, #28
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
 8005fa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6a1b      	ldr	r3, [r3, #32]
 8005faa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6a1b      	ldr	r3, [r3, #32]
 8005fb0:	f023 0201 	bic.w	r2, r3, #1
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	699b      	ldr	r3, [r3, #24]
 8005fc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	f023 0303 	bic.w	r3, r3, #3
 8005fd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	68fa      	ldr	r2, [r7, #12]
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	f023 0302 	bic.w	r3, r3, #2
 8005fe4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	689b      	ldr	r3, [r3, #8]
 8005fea:	697a      	ldr	r2, [r7, #20]
 8005fec:	4313      	orrs	r3, r2
 8005fee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	4a20      	ldr	r2, [pc, #128]	@ (8006074 <TIM_OC1_SetConfig+0xd8>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d003      	beq.n	8006000 <TIM_OC1_SetConfig+0x64>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	4a1f      	ldr	r2, [pc, #124]	@ (8006078 <TIM_OC1_SetConfig+0xdc>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d10c      	bne.n	800601a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	f023 0308 	bic.w	r3, r3, #8
 8006006:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	68db      	ldr	r3, [r3, #12]
 800600c:	697a      	ldr	r2, [r7, #20]
 800600e:	4313      	orrs	r3, r2
 8006010:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	f023 0304 	bic.w	r3, r3, #4
 8006018:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	4a15      	ldr	r2, [pc, #84]	@ (8006074 <TIM_OC1_SetConfig+0xd8>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d003      	beq.n	800602a <TIM_OC1_SetConfig+0x8e>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	4a14      	ldr	r2, [pc, #80]	@ (8006078 <TIM_OC1_SetConfig+0xdc>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d111      	bne.n	800604e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006030:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006038:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	695b      	ldr	r3, [r3, #20]
 800603e:	693a      	ldr	r2, [r7, #16]
 8006040:	4313      	orrs	r3, r2
 8006042:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	699b      	ldr	r3, [r3, #24]
 8006048:	693a      	ldr	r2, [r7, #16]
 800604a:	4313      	orrs	r3, r2
 800604c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	693a      	ldr	r2, [r7, #16]
 8006052:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	68fa      	ldr	r2, [r7, #12]
 8006058:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	685a      	ldr	r2, [r3, #4]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	697a      	ldr	r2, [r7, #20]
 8006066:	621a      	str	r2, [r3, #32]
}
 8006068:	bf00      	nop
 800606a:	371c      	adds	r7, #28
 800606c:	46bd      	mov	sp, r7
 800606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006072:	4770      	bx	lr
 8006074:	40010000 	.word	0x40010000
 8006078:	40010400 	.word	0x40010400

0800607c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800607c:	b480      	push	{r7}
 800607e:	b087      	sub	sp, #28
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
 8006084:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6a1b      	ldr	r3, [r3, #32]
 800608a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6a1b      	ldr	r3, [r3, #32]
 8006090:	f023 0210 	bic.w	r2, r3, #16
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	699b      	ldr	r3, [r3, #24]
 80060a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80060aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80060b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	021b      	lsls	r3, r3, #8
 80060ba:	68fa      	ldr	r2, [r7, #12]
 80060bc:	4313      	orrs	r3, r2
 80060be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	f023 0320 	bic.w	r3, r3, #32
 80060c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	689b      	ldr	r3, [r3, #8]
 80060cc:	011b      	lsls	r3, r3, #4
 80060ce:	697a      	ldr	r2, [r7, #20]
 80060d0:	4313      	orrs	r3, r2
 80060d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	4a22      	ldr	r2, [pc, #136]	@ (8006160 <TIM_OC2_SetConfig+0xe4>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d003      	beq.n	80060e4 <TIM_OC2_SetConfig+0x68>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	4a21      	ldr	r2, [pc, #132]	@ (8006164 <TIM_OC2_SetConfig+0xe8>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d10d      	bne.n	8006100 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80060ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	68db      	ldr	r3, [r3, #12]
 80060f0:	011b      	lsls	r3, r3, #4
 80060f2:	697a      	ldr	r2, [r7, #20]
 80060f4:	4313      	orrs	r3, r2
 80060f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80060fe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	4a17      	ldr	r2, [pc, #92]	@ (8006160 <TIM_OC2_SetConfig+0xe4>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d003      	beq.n	8006110 <TIM_OC2_SetConfig+0x94>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	4a16      	ldr	r2, [pc, #88]	@ (8006164 <TIM_OC2_SetConfig+0xe8>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d113      	bne.n	8006138 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006110:	693b      	ldr	r3, [r7, #16]
 8006112:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006116:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006118:	693b      	ldr	r3, [r7, #16]
 800611a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800611e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	695b      	ldr	r3, [r3, #20]
 8006124:	009b      	lsls	r3, r3, #2
 8006126:	693a      	ldr	r2, [r7, #16]
 8006128:	4313      	orrs	r3, r2
 800612a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	699b      	ldr	r3, [r3, #24]
 8006130:	009b      	lsls	r3, r3, #2
 8006132:	693a      	ldr	r2, [r7, #16]
 8006134:	4313      	orrs	r3, r2
 8006136:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	693a      	ldr	r2, [r7, #16]
 800613c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	68fa      	ldr	r2, [r7, #12]
 8006142:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	685a      	ldr	r2, [r3, #4]
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	697a      	ldr	r2, [r7, #20]
 8006150:	621a      	str	r2, [r3, #32]
}
 8006152:	bf00      	nop
 8006154:	371c      	adds	r7, #28
 8006156:	46bd      	mov	sp, r7
 8006158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615c:	4770      	bx	lr
 800615e:	bf00      	nop
 8006160:	40010000 	.word	0x40010000
 8006164:	40010400 	.word	0x40010400

08006168 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006168:	b480      	push	{r7}
 800616a:	b087      	sub	sp, #28
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
 8006170:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6a1b      	ldr	r3, [r3, #32]
 8006176:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6a1b      	ldr	r3, [r3, #32]
 800617c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	69db      	ldr	r3, [r3, #28]
 800618e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006196:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	f023 0303 	bic.w	r3, r3, #3
 800619e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	68fa      	ldr	r2, [r7, #12]
 80061a6:	4313      	orrs	r3, r2
 80061a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80061b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	689b      	ldr	r3, [r3, #8]
 80061b6:	021b      	lsls	r3, r3, #8
 80061b8:	697a      	ldr	r2, [r7, #20]
 80061ba:	4313      	orrs	r3, r2
 80061bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	4a21      	ldr	r2, [pc, #132]	@ (8006248 <TIM_OC3_SetConfig+0xe0>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d003      	beq.n	80061ce <TIM_OC3_SetConfig+0x66>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	4a20      	ldr	r2, [pc, #128]	@ (800624c <TIM_OC3_SetConfig+0xe4>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d10d      	bne.n	80061ea <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80061d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	68db      	ldr	r3, [r3, #12]
 80061da:	021b      	lsls	r3, r3, #8
 80061dc:	697a      	ldr	r2, [r7, #20]
 80061de:	4313      	orrs	r3, r2
 80061e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80061e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	4a16      	ldr	r2, [pc, #88]	@ (8006248 <TIM_OC3_SetConfig+0xe0>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d003      	beq.n	80061fa <TIM_OC3_SetConfig+0x92>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	4a15      	ldr	r2, [pc, #84]	@ (800624c <TIM_OC3_SetConfig+0xe4>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d113      	bne.n	8006222 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80061fa:	693b      	ldr	r3, [r7, #16]
 80061fc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006200:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006208:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	695b      	ldr	r3, [r3, #20]
 800620e:	011b      	lsls	r3, r3, #4
 8006210:	693a      	ldr	r2, [r7, #16]
 8006212:	4313      	orrs	r3, r2
 8006214:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	699b      	ldr	r3, [r3, #24]
 800621a:	011b      	lsls	r3, r3, #4
 800621c:	693a      	ldr	r2, [r7, #16]
 800621e:	4313      	orrs	r3, r2
 8006220:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	693a      	ldr	r2, [r7, #16]
 8006226:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	68fa      	ldr	r2, [r7, #12]
 800622c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	685a      	ldr	r2, [r3, #4]
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	697a      	ldr	r2, [r7, #20]
 800623a:	621a      	str	r2, [r3, #32]
}
 800623c:	bf00      	nop
 800623e:	371c      	adds	r7, #28
 8006240:	46bd      	mov	sp, r7
 8006242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006246:	4770      	bx	lr
 8006248:	40010000 	.word	0x40010000
 800624c:	40010400 	.word	0x40010400

08006250 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006250:	b480      	push	{r7}
 8006252:	b087      	sub	sp, #28
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
 8006258:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6a1b      	ldr	r3, [r3, #32]
 800625e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6a1b      	ldr	r3, [r3, #32]
 8006264:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	685b      	ldr	r3, [r3, #4]
 8006270:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	69db      	ldr	r3, [r3, #28]
 8006276:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800627e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006286:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	021b      	lsls	r3, r3, #8
 800628e:	68fa      	ldr	r2, [r7, #12]
 8006290:	4313      	orrs	r3, r2
 8006292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800629a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	689b      	ldr	r3, [r3, #8]
 80062a0:	031b      	lsls	r3, r3, #12
 80062a2:	693a      	ldr	r2, [r7, #16]
 80062a4:	4313      	orrs	r3, r2
 80062a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	4a12      	ldr	r2, [pc, #72]	@ (80062f4 <TIM_OC4_SetConfig+0xa4>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d003      	beq.n	80062b8 <TIM_OC4_SetConfig+0x68>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	4a11      	ldr	r2, [pc, #68]	@ (80062f8 <TIM_OC4_SetConfig+0xa8>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d109      	bne.n	80062cc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80062be:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	695b      	ldr	r3, [r3, #20]
 80062c4:	019b      	lsls	r3, r3, #6
 80062c6:	697a      	ldr	r2, [r7, #20]
 80062c8:	4313      	orrs	r3, r2
 80062ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	697a      	ldr	r2, [r7, #20]
 80062d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	68fa      	ldr	r2, [r7, #12]
 80062d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	685a      	ldr	r2, [r3, #4]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	693a      	ldr	r2, [r7, #16]
 80062e4:	621a      	str	r2, [r3, #32]
}
 80062e6:	bf00      	nop
 80062e8:	371c      	adds	r7, #28
 80062ea:	46bd      	mov	sp, r7
 80062ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f0:	4770      	bx	lr
 80062f2:	bf00      	nop
 80062f4:	40010000 	.word	0x40010000
 80062f8:	40010400 	.word	0x40010400

080062fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b087      	sub	sp, #28
 8006300:	af00      	add	r7, sp, #0
 8006302:	60f8      	str	r0, [r7, #12]
 8006304:	60b9      	str	r1, [r7, #8]
 8006306:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	6a1b      	ldr	r3, [r3, #32]
 800630c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	6a1b      	ldr	r3, [r3, #32]
 8006312:	f023 0201 	bic.w	r2, r3, #1
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	699b      	ldr	r3, [r3, #24]
 800631e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006320:	693b      	ldr	r3, [r7, #16]
 8006322:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006326:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	011b      	lsls	r3, r3, #4
 800632c:	693a      	ldr	r2, [r7, #16]
 800632e:	4313      	orrs	r3, r2
 8006330:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	f023 030a 	bic.w	r3, r3, #10
 8006338:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800633a:	697a      	ldr	r2, [r7, #20]
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	4313      	orrs	r3, r2
 8006340:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	693a      	ldr	r2, [r7, #16]
 8006346:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	697a      	ldr	r2, [r7, #20]
 800634c:	621a      	str	r2, [r3, #32]
}
 800634e:	bf00      	nop
 8006350:	371c      	adds	r7, #28
 8006352:	46bd      	mov	sp, r7
 8006354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006358:	4770      	bx	lr

0800635a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800635a:	b480      	push	{r7}
 800635c:	b087      	sub	sp, #28
 800635e:	af00      	add	r7, sp, #0
 8006360:	60f8      	str	r0, [r7, #12]
 8006362:	60b9      	str	r1, [r7, #8]
 8006364:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	6a1b      	ldr	r3, [r3, #32]
 800636a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	6a1b      	ldr	r3, [r3, #32]
 8006370:	f023 0210 	bic.w	r2, r3, #16
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	699b      	ldr	r3, [r3, #24]
 800637c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006384:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	031b      	lsls	r3, r3, #12
 800638a:	693a      	ldr	r2, [r7, #16]
 800638c:	4313      	orrs	r3, r2
 800638e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006396:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	011b      	lsls	r3, r3, #4
 800639c:	697a      	ldr	r2, [r7, #20]
 800639e:	4313      	orrs	r3, r2
 80063a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	693a      	ldr	r2, [r7, #16]
 80063a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	697a      	ldr	r2, [r7, #20]
 80063ac:	621a      	str	r2, [r3, #32]
}
 80063ae:	bf00      	nop
 80063b0:	371c      	adds	r7, #28
 80063b2:	46bd      	mov	sp, r7
 80063b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b8:	4770      	bx	lr

080063ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80063ba:	b480      	push	{r7}
 80063bc:	b085      	sub	sp, #20
 80063be:	af00      	add	r7, sp, #0
 80063c0:	6078      	str	r0, [r7, #4]
 80063c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	689b      	ldr	r3, [r3, #8]
 80063c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80063d2:	683a      	ldr	r2, [r7, #0]
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	4313      	orrs	r3, r2
 80063d8:	f043 0307 	orr.w	r3, r3, #7
 80063dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	68fa      	ldr	r2, [r7, #12]
 80063e2:	609a      	str	r2, [r3, #8]
}
 80063e4:	bf00      	nop
 80063e6:	3714      	adds	r7, #20
 80063e8:	46bd      	mov	sp, r7
 80063ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ee:	4770      	bx	lr

080063f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80063f0:	b480      	push	{r7}
 80063f2:	b087      	sub	sp, #28
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	60f8      	str	r0, [r7, #12]
 80063f8:	60b9      	str	r1, [r7, #8]
 80063fa:	607a      	str	r2, [r7, #4]
 80063fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	689b      	ldr	r3, [r3, #8]
 8006402:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800640a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	021a      	lsls	r2, r3, #8
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	431a      	orrs	r2, r3
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	4313      	orrs	r3, r2
 8006418:	697a      	ldr	r2, [r7, #20]
 800641a:	4313      	orrs	r3, r2
 800641c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	697a      	ldr	r2, [r7, #20]
 8006422:	609a      	str	r2, [r3, #8]
}
 8006424:	bf00      	nop
 8006426:	371c      	adds	r7, #28
 8006428:	46bd      	mov	sp, r7
 800642a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642e:	4770      	bx	lr

08006430 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006430:	b480      	push	{r7}
 8006432:	b087      	sub	sp, #28
 8006434:	af00      	add	r7, sp, #0
 8006436:	60f8      	str	r0, [r7, #12]
 8006438:	60b9      	str	r1, [r7, #8]
 800643a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	f003 031f 	and.w	r3, r3, #31
 8006442:	2201      	movs	r2, #1
 8006444:	fa02 f303 	lsl.w	r3, r2, r3
 8006448:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	6a1a      	ldr	r2, [r3, #32]
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	43db      	mvns	r3, r3
 8006452:	401a      	ands	r2, r3
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	6a1a      	ldr	r2, [r3, #32]
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	f003 031f 	and.w	r3, r3, #31
 8006462:	6879      	ldr	r1, [r7, #4]
 8006464:	fa01 f303 	lsl.w	r3, r1, r3
 8006468:	431a      	orrs	r2, r3
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	621a      	str	r2, [r3, #32]
}
 800646e:	bf00      	nop
 8006470:	371c      	adds	r7, #28
 8006472:	46bd      	mov	sp, r7
 8006474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006478:	4770      	bx	lr
	...

0800647c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800647c:	b480      	push	{r7}
 800647e:	b085      	sub	sp, #20
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
 8006484:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800648c:	2b01      	cmp	r3, #1
 800648e:	d101      	bne.n	8006494 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006490:	2302      	movs	r3, #2
 8006492:	e05a      	b.n	800654a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2201      	movs	r2, #1
 8006498:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2202      	movs	r2, #2
 80064a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	685b      	ldr	r3, [r3, #4]
 80064aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	689b      	ldr	r3, [r3, #8]
 80064b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	68fa      	ldr	r2, [r7, #12]
 80064c2:	4313      	orrs	r3, r2
 80064c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	68fa      	ldr	r2, [r7, #12]
 80064cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a21      	ldr	r2, [pc, #132]	@ (8006558 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d022      	beq.n	800651e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064e0:	d01d      	beq.n	800651e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a1d      	ldr	r2, [pc, #116]	@ (800655c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d018      	beq.n	800651e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a1b      	ldr	r2, [pc, #108]	@ (8006560 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d013      	beq.n	800651e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a1a      	ldr	r2, [pc, #104]	@ (8006564 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d00e      	beq.n	800651e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a18      	ldr	r2, [pc, #96]	@ (8006568 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d009      	beq.n	800651e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a17      	ldr	r2, [pc, #92]	@ (800656c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d004      	beq.n	800651e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4a15      	ldr	r2, [pc, #84]	@ (8006570 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d10c      	bne.n	8006538 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006524:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	685b      	ldr	r3, [r3, #4]
 800652a:	68ba      	ldr	r2, [r7, #8]
 800652c:	4313      	orrs	r3, r2
 800652e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	68ba      	ldr	r2, [r7, #8]
 8006536:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2201      	movs	r2, #1
 800653c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2200      	movs	r2, #0
 8006544:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006548:	2300      	movs	r3, #0
}
 800654a:	4618      	mov	r0, r3
 800654c:	3714      	adds	r7, #20
 800654e:	46bd      	mov	sp, r7
 8006550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006554:	4770      	bx	lr
 8006556:	bf00      	nop
 8006558:	40010000 	.word	0x40010000
 800655c:	40000400 	.word	0x40000400
 8006560:	40000800 	.word	0x40000800
 8006564:	40000c00 	.word	0x40000c00
 8006568:	40010400 	.word	0x40010400
 800656c:	40014000 	.word	0x40014000
 8006570:	40001800 	.word	0x40001800

08006574 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006574:	b480      	push	{r7}
 8006576:	b083      	sub	sp, #12
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800657c:	bf00      	nop
 800657e:	370c      	adds	r7, #12
 8006580:	46bd      	mov	sp, r7
 8006582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006586:	4770      	bx	lr

08006588 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006588:	b480      	push	{r7}
 800658a:	b083      	sub	sp, #12
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006590:	bf00      	nop
 8006592:	370c      	adds	r7, #12
 8006594:	46bd      	mov	sp, r7
 8006596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659a:	4770      	bx	lr

0800659c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b082      	sub	sp, #8
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d101      	bne.n	80065ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80065aa:	2301      	movs	r3, #1
 80065ac:	e042      	b.n	8006634 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80065b4:	b2db      	uxtb	r3, r3
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d106      	bne.n	80065c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2200      	movs	r2, #0
 80065be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f7fc fb64 	bl	8002c90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2224      	movs	r2, #36	@ 0x24
 80065cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	68da      	ldr	r2, [r3, #12]
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80065de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	f000 ffc9 	bl	8007578 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	691a      	ldr	r2, [r3, #16]
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80065f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	695a      	ldr	r2, [r3, #20]
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006604:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	68da      	ldr	r2, [r3, #12]
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006614:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2200      	movs	r2, #0
 800661a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2220      	movs	r2, #32
 8006620:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2220      	movs	r2, #32
 8006628:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2200      	movs	r2, #0
 8006630:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006632:	2300      	movs	r3, #0
}
 8006634:	4618      	mov	r0, r3
 8006636:	3708      	adds	r7, #8
 8006638:	46bd      	mov	sp, r7
 800663a:	bd80      	pop	{r7, pc}

0800663c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b08c      	sub	sp, #48	@ 0x30
 8006640:	af00      	add	r7, sp, #0
 8006642:	60f8      	str	r0, [r7, #12]
 8006644:	60b9      	str	r1, [r7, #8]
 8006646:	4613      	mov	r3, r2
 8006648:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006650:	b2db      	uxtb	r3, r3
 8006652:	2b20      	cmp	r3, #32
 8006654:	d156      	bne.n	8006704 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d002      	beq.n	8006662 <HAL_UART_Transmit_DMA+0x26>
 800665c:	88fb      	ldrh	r3, [r7, #6]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d101      	bne.n	8006666 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8006662:	2301      	movs	r3, #1
 8006664:	e04f      	b.n	8006706 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8006666:	68ba      	ldr	r2, [r7, #8]
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	88fa      	ldrh	r2, [r7, #6]
 8006670:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	88fa      	ldrh	r2, [r7, #6]
 8006676:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	2200      	movs	r2, #0
 800667c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	2221      	movs	r2, #33	@ 0x21
 8006682:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800668a:	4a21      	ldr	r2, [pc, #132]	@ (8006710 <HAL_UART_Transmit_DMA+0xd4>)
 800668c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006692:	4a20      	ldr	r2, [pc, #128]	@ (8006714 <HAL_UART_Transmit_DMA+0xd8>)
 8006694:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800669a:	4a1f      	ldr	r2, [pc, #124]	@ (8006718 <HAL_UART_Transmit_DMA+0xdc>)
 800669c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066a2:	2200      	movs	r2, #0
 80066a4:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80066a6:	f107 0308 	add.w	r3, r7, #8
 80066aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80066b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066b2:	6819      	ldr	r1, [r3, #0]
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	3304      	adds	r3, #4
 80066ba:	461a      	mov	r2, r3
 80066bc:	88fb      	ldrh	r3, [r7, #6]
 80066be:	f7fd fc63 	bl	8003f88 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80066ca:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	3314      	adds	r3, #20
 80066d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066d4:	69bb      	ldr	r3, [r7, #24]
 80066d6:	e853 3f00 	ldrex	r3, [r3]
 80066da:	617b      	str	r3, [r7, #20]
   return(result);
 80066dc:	697b      	ldr	r3, [r7, #20]
 80066de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066e2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	3314      	adds	r3, #20
 80066ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80066ec:	627a      	str	r2, [r7, #36]	@ 0x24
 80066ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066f0:	6a39      	ldr	r1, [r7, #32]
 80066f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066f4:	e841 2300 	strex	r3, r2, [r1]
 80066f8:	61fb      	str	r3, [r7, #28]
   return(result);
 80066fa:	69fb      	ldr	r3, [r7, #28]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d1e5      	bne.n	80066cc <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8006700:	2300      	movs	r3, #0
 8006702:	e000      	b.n	8006706 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8006704:	2302      	movs	r3, #2
  }
}
 8006706:	4618      	mov	r0, r3
 8006708:	3730      	adds	r7, #48	@ 0x30
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}
 800670e:	bf00      	nop
 8006710:	08006e05 	.word	0x08006e05
 8006714:	08006e9f 	.word	0x08006e9f
 8006718:	08007023 	.word	0x08007023

0800671c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b084      	sub	sp, #16
 8006720:	af00      	add	r7, sp, #0
 8006722:	60f8      	str	r0, [r7, #12]
 8006724:	60b9      	str	r1, [r7, #8]
 8006726:	4613      	mov	r3, r2
 8006728:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006730:	b2db      	uxtb	r3, r3
 8006732:	2b20      	cmp	r3, #32
 8006734:	d112      	bne.n	800675c <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d002      	beq.n	8006742 <HAL_UART_Receive_DMA+0x26>
 800673c:	88fb      	ldrh	r3, [r7, #6]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d101      	bne.n	8006746 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006742:	2301      	movs	r3, #1
 8006744:	e00b      	b.n	800675e <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	2200      	movs	r2, #0
 800674a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800674c:	88fb      	ldrh	r3, [r7, #6]
 800674e:	461a      	mov	r2, r3
 8006750:	68b9      	ldr	r1, [r7, #8]
 8006752:	68f8      	ldr	r0, [r7, #12]
 8006754:	f000 fcb0 	bl	80070b8 <UART_Start_Receive_DMA>
 8006758:	4603      	mov	r3, r0
 800675a:	e000      	b.n	800675e <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800675c:	2302      	movs	r3, #2
  }
}
 800675e:	4618      	mov	r0, r3
 8006760:	3710      	adds	r7, #16
 8006762:	46bd      	mov	sp, r7
 8006764:	bd80      	pop	{r7, pc}

08006766 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8006766:	b580      	push	{r7, lr}
 8006768:	b090      	sub	sp, #64	@ 0x40
 800676a:	af00      	add	r7, sp, #0
 800676c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800676e:	2300      	movs	r3, #0
 8006770:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	695b      	ldr	r3, [r3, #20]
 8006778:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800677c:	2b80      	cmp	r3, #128	@ 0x80
 800677e:	bf0c      	ite	eq
 8006780:	2301      	moveq	r3, #1
 8006782:	2300      	movne	r3, #0
 8006784:	b2db      	uxtb	r3, r3
 8006786:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800678e:	b2db      	uxtb	r3, r3
 8006790:	2b21      	cmp	r3, #33	@ 0x21
 8006792:	d128      	bne.n	80067e6 <HAL_UART_DMAStop+0x80>
 8006794:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006796:	2b00      	cmp	r3, #0
 8006798:	d025      	beq.n	80067e6 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	3314      	adds	r3, #20
 80067a0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067a4:	e853 3f00 	ldrex	r3, [r3]
 80067a8:	623b      	str	r3, [r7, #32]
   return(result);
 80067aa:	6a3b      	ldr	r3, [r7, #32]
 80067ac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80067b0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	3314      	adds	r3, #20
 80067b8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80067ba:	633a      	str	r2, [r7, #48]	@ 0x30
 80067bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80067c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80067c2:	e841 2300 	strex	r3, r2, [r1]
 80067c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80067c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d1e5      	bne.n	800679a <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d004      	beq.n	80067e0 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067da:	4618      	mov	r0, r3
 80067dc:	f7fd fc2c 	bl	8004038 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	f000 fd03 	bl	80071ec <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	695b      	ldr	r3, [r3, #20]
 80067ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067f0:	2b40      	cmp	r3, #64	@ 0x40
 80067f2:	bf0c      	ite	eq
 80067f4:	2301      	moveq	r3, #1
 80067f6:	2300      	movne	r3, #0
 80067f8:	b2db      	uxtb	r3, r3
 80067fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006802:	b2db      	uxtb	r3, r3
 8006804:	2b22      	cmp	r3, #34	@ 0x22
 8006806:	d128      	bne.n	800685a <HAL_UART_DMAStop+0xf4>
 8006808:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800680a:	2b00      	cmp	r3, #0
 800680c:	d025      	beq.n	800685a <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	3314      	adds	r3, #20
 8006814:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006816:	693b      	ldr	r3, [r7, #16]
 8006818:	e853 3f00 	ldrex	r3, [r3]
 800681c:	60fb      	str	r3, [r7, #12]
   return(result);
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006824:	637b      	str	r3, [r7, #52]	@ 0x34
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	3314      	adds	r3, #20
 800682c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800682e:	61fa      	str	r2, [r7, #28]
 8006830:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006832:	69b9      	ldr	r1, [r7, #24]
 8006834:	69fa      	ldr	r2, [r7, #28]
 8006836:	e841 2300 	strex	r3, r2, [r1]
 800683a:	617b      	str	r3, [r7, #20]
   return(result);
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d1e5      	bne.n	800680e <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006846:	2b00      	cmp	r3, #0
 8006848:	d004      	beq.n	8006854 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800684e:	4618      	mov	r0, r3
 8006850:	f7fd fbf2 	bl	8004038 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	f000 fcf1 	bl	800723c <UART_EndRxTransfer>
  }

  return HAL_OK;
 800685a:	2300      	movs	r3, #0
}
 800685c:	4618      	mov	r0, r3
 800685e:	3740      	adds	r7, #64	@ 0x40
 8006860:	46bd      	mov	sp, r7
 8006862:	bd80      	pop	{r7, pc}

08006864 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b0ba      	sub	sp, #232	@ 0xe8
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	68db      	ldr	r3, [r3, #12]
 800687c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	695b      	ldr	r3, [r3, #20]
 8006886:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800688a:	2300      	movs	r3, #0
 800688c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006890:	2300      	movs	r3, #0
 8006892:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006896:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800689a:	f003 030f 	and.w	r3, r3, #15
 800689e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80068a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d10f      	bne.n	80068ca <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80068aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068ae:	f003 0320 	and.w	r3, r3, #32
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d009      	beq.n	80068ca <HAL_UART_IRQHandler+0x66>
 80068b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068ba:	f003 0320 	and.w	r3, r3, #32
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d003      	beq.n	80068ca <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f000 fd99 	bl	80073fa <UART_Receive_IT>
      return;
 80068c8:	e25b      	b.n	8006d82 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80068ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	f000 80de 	beq.w	8006a90 <HAL_UART_IRQHandler+0x22c>
 80068d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80068d8:	f003 0301 	and.w	r3, r3, #1
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d106      	bne.n	80068ee <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80068e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068e4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	f000 80d1 	beq.w	8006a90 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80068ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068f2:	f003 0301 	and.w	r3, r3, #1
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d00b      	beq.n	8006912 <HAL_UART_IRQHandler+0xae>
 80068fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006902:	2b00      	cmp	r3, #0
 8006904:	d005      	beq.n	8006912 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800690a:	f043 0201 	orr.w	r2, r3, #1
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006912:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006916:	f003 0304 	and.w	r3, r3, #4
 800691a:	2b00      	cmp	r3, #0
 800691c:	d00b      	beq.n	8006936 <HAL_UART_IRQHandler+0xd2>
 800691e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006922:	f003 0301 	and.w	r3, r3, #1
 8006926:	2b00      	cmp	r3, #0
 8006928:	d005      	beq.n	8006936 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800692e:	f043 0202 	orr.w	r2, r3, #2
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006936:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800693a:	f003 0302 	and.w	r3, r3, #2
 800693e:	2b00      	cmp	r3, #0
 8006940:	d00b      	beq.n	800695a <HAL_UART_IRQHandler+0xf6>
 8006942:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006946:	f003 0301 	and.w	r3, r3, #1
 800694a:	2b00      	cmp	r3, #0
 800694c:	d005      	beq.n	800695a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006952:	f043 0204 	orr.w	r2, r3, #4
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800695a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800695e:	f003 0308 	and.w	r3, r3, #8
 8006962:	2b00      	cmp	r3, #0
 8006964:	d011      	beq.n	800698a <HAL_UART_IRQHandler+0x126>
 8006966:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800696a:	f003 0320 	and.w	r3, r3, #32
 800696e:	2b00      	cmp	r3, #0
 8006970:	d105      	bne.n	800697e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006972:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006976:	f003 0301 	and.w	r3, r3, #1
 800697a:	2b00      	cmp	r3, #0
 800697c:	d005      	beq.n	800698a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006982:	f043 0208 	orr.w	r2, r3, #8
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800698e:	2b00      	cmp	r3, #0
 8006990:	f000 81f2 	beq.w	8006d78 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006994:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006998:	f003 0320 	and.w	r3, r3, #32
 800699c:	2b00      	cmp	r3, #0
 800699e:	d008      	beq.n	80069b2 <HAL_UART_IRQHandler+0x14e>
 80069a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80069a4:	f003 0320 	and.w	r3, r3, #32
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d002      	beq.n	80069b2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	f000 fd24 	bl	80073fa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	695b      	ldr	r3, [r3, #20]
 80069b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069bc:	2b40      	cmp	r3, #64	@ 0x40
 80069be:	bf0c      	ite	eq
 80069c0:	2301      	moveq	r3, #1
 80069c2:	2300      	movne	r3, #0
 80069c4:	b2db      	uxtb	r3, r3
 80069c6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069ce:	f003 0308 	and.w	r3, r3, #8
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d103      	bne.n	80069de <HAL_UART_IRQHandler+0x17a>
 80069d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d04f      	beq.n	8006a7e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f000 fc2c 	bl	800723c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	695b      	ldr	r3, [r3, #20]
 80069ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069ee:	2b40      	cmp	r3, #64	@ 0x40
 80069f0:	d141      	bne.n	8006a76 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	3314      	adds	r3, #20
 80069f8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006a00:	e853 3f00 	ldrex	r3, [r3]
 8006a04:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006a08:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006a0c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a10:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	3314      	adds	r3, #20
 8006a1a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006a1e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006a22:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a26:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006a2a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006a2e:	e841 2300 	strex	r3, r2, [r1]
 8006a32:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006a36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d1d9      	bne.n	80069f2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d013      	beq.n	8006a6e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a4a:	4a7e      	ldr	r2, [pc, #504]	@ (8006c44 <HAL_UART_IRQHandler+0x3e0>)
 8006a4c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a52:	4618      	mov	r0, r3
 8006a54:	f7fd fb60 	bl	8004118 <HAL_DMA_Abort_IT>
 8006a58:	4603      	mov	r3, r0
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d016      	beq.n	8006a8c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a64:	687a      	ldr	r2, [r7, #4]
 8006a66:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006a68:	4610      	mov	r0, r2
 8006a6a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a6c:	e00e      	b.n	8006a8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f000 f9b2 	bl	8006dd8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a74:	e00a      	b.n	8006a8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f000 f9ae 	bl	8006dd8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a7c:	e006      	b.n	8006a8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f000 f9aa 	bl	8006dd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2200      	movs	r2, #0
 8006a88:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006a8a:	e175      	b.n	8006d78 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a8c:	bf00      	nop
    return;
 8006a8e:	e173      	b.n	8006d78 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a94:	2b01      	cmp	r3, #1
 8006a96:	f040 814f 	bne.w	8006d38 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006a9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a9e:	f003 0310 	and.w	r3, r3, #16
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	f000 8148 	beq.w	8006d38 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006aa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006aac:	f003 0310 	and.w	r3, r3, #16
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	f000 8141 	beq.w	8006d38 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	60bb      	str	r3, [r7, #8]
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	60bb      	str	r3, [r7, #8]
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	685b      	ldr	r3, [r3, #4]
 8006ac8:	60bb      	str	r3, [r7, #8]
 8006aca:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	695b      	ldr	r3, [r3, #20]
 8006ad2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ad6:	2b40      	cmp	r3, #64	@ 0x40
 8006ad8:	f040 80b6 	bne.w	8006c48 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	685b      	ldr	r3, [r3, #4]
 8006ae4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006ae8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	f000 8145 	beq.w	8006d7c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006af6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006afa:	429a      	cmp	r2, r3
 8006afc:	f080 813e 	bcs.w	8006d7c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006b06:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b0c:	69db      	ldr	r3, [r3, #28]
 8006b0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b12:	f000 8088 	beq.w	8006c26 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	330c      	adds	r3, #12
 8006b1c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b20:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006b24:	e853 3f00 	ldrex	r3, [r3]
 8006b28:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006b2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006b30:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006b34:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	330c      	adds	r3, #12
 8006b3e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006b42:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006b46:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b4a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006b4e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006b52:	e841 2300 	strex	r3, r2, [r1]
 8006b56:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006b5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d1d9      	bne.n	8006b16 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	3314      	adds	r3, #20
 8006b68:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b6a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006b6c:	e853 3f00 	ldrex	r3, [r3]
 8006b70:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006b72:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006b74:	f023 0301 	bic.w	r3, r3, #1
 8006b78:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	3314      	adds	r3, #20
 8006b82:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006b86:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006b8a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b8c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006b8e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006b92:	e841 2300 	strex	r3, r2, [r1]
 8006b96:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006b98:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d1e1      	bne.n	8006b62 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	3314      	adds	r3, #20
 8006ba4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ba6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006ba8:	e853 3f00 	ldrex	r3, [r3]
 8006bac:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006bae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006bb0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006bb4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	3314      	adds	r3, #20
 8006bbe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006bc2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006bc4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bc6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006bc8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006bca:	e841 2300 	strex	r3, r2, [r1]
 8006bce:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006bd0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d1e3      	bne.n	8006b9e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2220      	movs	r2, #32
 8006bda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2200      	movs	r2, #0
 8006be2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	330c      	adds	r3, #12
 8006bea:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006bee:	e853 3f00 	ldrex	r3, [r3]
 8006bf2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006bf4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006bf6:	f023 0310 	bic.w	r3, r3, #16
 8006bfa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	330c      	adds	r3, #12
 8006c04:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006c08:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006c0a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c0c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006c0e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006c10:	e841 2300 	strex	r3, r2, [r1]
 8006c14:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006c16:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d1e3      	bne.n	8006be4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c20:	4618      	mov	r0, r3
 8006c22:	f7fd fa09 	bl	8004038 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2202      	movs	r2, #2
 8006c2a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006c34:	b29b      	uxth	r3, r3
 8006c36:	1ad3      	subs	r3, r2, r3
 8006c38:	b29b      	uxth	r3, r3
 8006c3a:	4619      	mov	r1, r3
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	f000 f8d5 	bl	8006dec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006c42:	e09b      	b.n	8006d7c <HAL_UART_IRQHandler+0x518>
 8006c44:	08007303 	.word	0x08007303
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006c50:	b29b      	uxth	r3, r3
 8006c52:	1ad3      	subs	r3, r2, r3
 8006c54:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006c5c:	b29b      	uxth	r3, r3
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	f000 808e 	beq.w	8006d80 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006c64:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	f000 8089 	beq.w	8006d80 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	330c      	adds	r3, #12
 8006c74:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c78:	e853 3f00 	ldrex	r3, [r3]
 8006c7c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006c7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c80:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006c84:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	330c      	adds	r3, #12
 8006c8e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006c92:	647a      	str	r2, [r7, #68]	@ 0x44
 8006c94:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c96:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006c98:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006c9a:	e841 2300 	strex	r3, r2, [r1]
 8006c9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006ca0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d1e3      	bne.n	8006c6e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	3314      	adds	r3, #20
 8006cac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cb0:	e853 3f00 	ldrex	r3, [r3]
 8006cb4:	623b      	str	r3, [r7, #32]
   return(result);
 8006cb6:	6a3b      	ldr	r3, [r7, #32]
 8006cb8:	f023 0301 	bic.w	r3, r3, #1
 8006cbc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	3314      	adds	r3, #20
 8006cc6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006cca:	633a      	str	r2, [r7, #48]	@ 0x30
 8006ccc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006cd0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006cd2:	e841 2300 	strex	r3, r2, [r1]
 8006cd6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006cd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d1e3      	bne.n	8006ca6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2220      	movs	r2, #32
 8006ce2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	330c      	adds	r3, #12
 8006cf2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cf4:	693b      	ldr	r3, [r7, #16]
 8006cf6:	e853 3f00 	ldrex	r3, [r3]
 8006cfa:	60fb      	str	r3, [r7, #12]
   return(result);
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	f023 0310 	bic.w	r3, r3, #16
 8006d02:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	330c      	adds	r3, #12
 8006d0c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006d10:	61fa      	str	r2, [r7, #28]
 8006d12:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d14:	69b9      	ldr	r1, [r7, #24]
 8006d16:	69fa      	ldr	r2, [r7, #28]
 8006d18:	e841 2300 	strex	r3, r2, [r1]
 8006d1c:	617b      	str	r3, [r7, #20]
   return(result);
 8006d1e:	697b      	ldr	r3, [r7, #20]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d1e3      	bne.n	8006cec <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2202      	movs	r2, #2
 8006d28:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006d2a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006d2e:	4619      	mov	r1, r3
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f000 f85b 	bl	8006dec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006d36:	e023      	b.n	8006d80 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006d38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d009      	beq.n	8006d58 <HAL_UART_IRQHandler+0x4f4>
 8006d44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d003      	beq.n	8006d58 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f000 faea 	bl	800732a <UART_Transmit_IT>
    return;
 8006d56:	e014      	b.n	8006d82 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006d58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d00e      	beq.n	8006d82 <HAL_UART_IRQHandler+0x51e>
 8006d64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d008      	beq.n	8006d82 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	f000 fb2a 	bl	80073ca <UART_EndTransmit_IT>
    return;
 8006d76:	e004      	b.n	8006d82 <HAL_UART_IRQHandler+0x51e>
    return;
 8006d78:	bf00      	nop
 8006d7a:	e002      	b.n	8006d82 <HAL_UART_IRQHandler+0x51e>
      return;
 8006d7c:	bf00      	nop
 8006d7e:	e000      	b.n	8006d82 <HAL_UART_IRQHandler+0x51e>
      return;
 8006d80:	bf00      	nop
  }
}
 8006d82:	37e8      	adds	r7, #232	@ 0xe8
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}

08006d88 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b083      	sub	sp, #12
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006d90:	bf00      	nop
 8006d92:	370c      	adds	r7, #12
 8006d94:	46bd      	mov	sp, r7
 8006d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9a:	4770      	bx	lr

08006d9c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b083      	sub	sp, #12
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006da4:	bf00      	nop
 8006da6:	370c      	adds	r7, #12
 8006da8:	46bd      	mov	sp, r7
 8006daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dae:	4770      	bx	lr

08006db0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b083      	sub	sp, #12
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006db8:	bf00      	nop
 8006dba:	370c      	adds	r7, #12
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc2:	4770      	bx	lr

08006dc4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b083      	sub	sp, #12
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006dcc:	bf00      	nop
 8006dce:	370c      	adds	r7, #12
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd6:	4770      	bx	lr

08006dd8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b083      	sub	sp, #12
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006de0:	bf00      	nop
 8006de2:	370c      	adds	r7, #12
 8006de4:	46bd      	mov	sp, r7
 8006de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dea:	4770      	bx	lr

08006dec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006dec:	b480      	push	{r7}
 8006dee:	b083      	sub	sp, #12
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
 8006df4:	460b      	mov	r3, r1
 8006df6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006df8:	bf00      	nop
 8006dfa:	370c      	adds	r7, #12
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e02:	4770      	bx	lr

08006e04 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b090      	sub	sp, #64	@ 0x40
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e10:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d137      	bne.n	8006e90 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8006e20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e22:	2200      	movs	r2, #0
 8006e24:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006e26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	3314      	adds	r3, #20
 8006e2c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e30:	e853 3f00 	ldrex	r3, [r3]
 8006e34:	623b      	str	r3, [r7, #32]
   return(result);
 8006e36:	6a3b      	ldr	r3, [r7, #32]
 8006e38:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006e3c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006e3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	3314      	adds	r3, #20
 8006e44:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006e46:	633a      	str	r2, [r7, #48]	@ 0x30
 8006e48:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e4a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006e4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e4e:	e841 2300 	strex	r3, r2, [r1]
 8006e52:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006e54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d1e5      	bne.n	8006e26 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006e5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	330c      	adds	r3, #12
 8006e60:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e62:	693b      	ldr	r3, [r7, #16]
 8006e64:	e853 3f00 	ldrex	r3, [r3]
 8006e68:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e70:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	330c      	adds	r3, #12
 8006e78:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006e7a:	61fa      	str	r2, [r7, #28]
 8006e7c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e7e:	69b9      	ldr	r1, [r7, #24]
 8006e80:	69fa      	ldr	r2, [r7, #28]
 8006e82:	e841 2300 	strex	r3, r2, [r1]
 8006e86:	617b      	str	r3, [r7, #20]
   return(result);
 8006e88:	697b      	ldr	r3, [r7, #20]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d1e5      	bne.n	8006e5a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006e8e:	e002      	b.n	8006e96 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006e90:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8006e92:	f7ff ff79 	bl	8006d88 <HAL_UART_TxCpltCallback>
}
 8006e96:	bf00      	nop
 8006e98:	3740      	adds	r7, #64	@ 0x40
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd80      	pop	{r7, pc}

08006e9e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006e9e:	b580      	push	{r7, lr}
 8006ea0:	b084      	sub	sp, #16
 8006ea2:	af00      	add	r7, sp, #0
 8006ea4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006eaa:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006eac:	68f8      	ldr	r0, [r7, #12]
 8006eae:	f7ff ff75 	bl	8006d9c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006eb2:	bf00      	nop
 8006eb4:	3710      	adds	r7, #16
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bd80      	pop	{r7, pc}

08006eba <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006eba:	b580      	push	{r7, lr}
 8006ebc:	b09c      	sub	sp, #112	@ 0x70
 8006ebe:	af00      	add	r7, sp, #0
 8006ec0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ec6:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d172      	bne.n	8006fbc <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006ed6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ed8:	2200      	movs	r2, #0
 8006eda:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006edc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	330c      	adds	r3, #12
 8006ee2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ee4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ee6:	e853 3f00 	ldrex	r3, [r3]
 8006eea:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006eec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006eee:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006ef2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006ef4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	330c      	adds	r3, #12
 8006efa:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006efc:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006efe:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f00:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006f02:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006f04:	e841 2300 	strex	r3, r2, [r1]
 8006f08:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006f0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d1e5      	bne.n	8006edc <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f10:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	3314      	adds	r3, #20
 8006f16:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f1a:	e853 3f00 	ldrex	r3, [r3]
 8006f1e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006f20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f22:	f023 0301 	bic.w	r3, r3, #1
 8006f26:	667b      	str	r3, [r7, #100]	@ 0x64
 8006f28:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	3314      	adds	r3, #20
 8006f2e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006f30:	647a      	str	r2, [r7, #68]	@ 0x44
 8006f32:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f34:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006f36:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006f38:	e841 2300 	strex	r3, r2, [r1]
 8006f3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006f3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d1e5      	bne.n	8006f10 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f44:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	3314      	adds	r3, #20
 8006f4a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f4e:	e853 3f00 	ldrex	r3, [r3]
 8006f52:	623b      	str	r3, [r7, #32]
   return(result);
 8006f54:	6a3b      	ldr	r3, [r7, #32]
 8006f56:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f5a:	663b      	str	r3, [r7, #96]	@ 0x60
 8006f5c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	3314      	adds	r3, #20
 8006f62:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006f64:	633a      	str	r2, [r7, #48]	@ 0x30
 8006f66:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f68:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006f6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f6c:	e841 2300 	strex	r3, r2, [r1]
 8006f70:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006f72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d1e5      	bne.n	8006f44 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006f78:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f7a:	2220      	movs	r2, #32
 8006f7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f80:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f84:	2b01      	cmp	r3, #1
 8006f86:	d119      	bne.n	8006fbc <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f88:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	330c      	adds	r3, #12
 8006f8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f90:	693b      	ldr	r3, [r7, #16]
 8006f92:	e853 3f00 	ldrex	r3, [r3]
 8006f96:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	f023 0310 	bic.w	r3, r3, #16
 8006f9e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006fa0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	330c      	adds	r3, #12
 8006fa6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006fa8:	61fa      	str	r2, [r7, #28]
 8006faa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fac:	69b9      	ldr	r1, [r7, #24]
 8006fae:	69fa      	ldr	r2, [r7, #28]
 8006fb0:	e841 2300 	strex	r3, r2, [r1]
 8006fb4:	617b      	str	r3, [r7, #20]
   return(result);
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d1e5      	bne.n	8006f88 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006fbc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fc2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fc6:	2b01      	cmp	r3, #1
 8006fc8:	d106      	bne.n	8006fd8 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006fca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006fcc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006fce:	4619      	mov	r1, r3
 8006fd0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006fd2:	f7ff ff0b 	bl	8006dec <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006fd6:	e002      	b.n	8006fde <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8006fd8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006fda:	f7ff fee9 	bl	8006db0 <HAL_UART_RxCpltCallback>
}
 8006fde:	bf00      	nop
 8006fe0:	3770      	adds	r7, #112	@ 0x70
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bd80      	pop	{r7, pc}

08006fe6 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006fe6:	b580      	push	{r7, lr}
 8006fe8:	b084      	sub	sp, #16
 8006fea:	af00      	add	r7, sp, #0
 8006fec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ff2:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	2201      	movs	r2, #1
 8006ff8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ffe:	2b01      	cmp	r3, #1
 8007000:	d108      	bne.n	8007014 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007006:	085b      	lsrs	r3, r3, #1
 8007008:	b29b      	uxth	r3, r3
 800700a:	4619      	mov	r1, r3
 800700c:	68f8      	ldr	r0, [r7, #12]
 800700e:	f7ff feed 	bl	8006dec <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007012:	e002      	b.n	800701a <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8007014:	68f8      	ldr	r0, [r7, #12]
 8007016:	f7ff fed5 	bl	8006dc4 <HAL_UART_RxHalfCpltCallback>
}
 800701a:	bf00      	nop
 800701c:	3710      	adds	r7, #16
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}

08007022 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007022:	b580      	push	{r7, lr}
 8007024:	b084      	sub	sp, #16
 8007026:	af00      	add	r7, sp, #0
 8007028:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800702a:	2300      	movs	r3, #0
 800702c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007032:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	695b      	ldr	r3, [r3, #20]
 800703a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800703e:	2b80      	cmp	r3, #128	@ 0x80
 8007040:	bf0c      	ite	eq
 8007042:	2301      	moveq	r3, #1
 8007044:	2300      	movne	r3, #0
 8007046:	b2db      	uxtb	r3, r3
 8007048:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007050:	b2db      	uxtb	r3, r3
 8007052:	2b21      	cmp	r3, #33	@ 0x21
 8007054:	d108      	bne.n	8007068 <UART_DMAError+0x46>
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d005      	beq.n	8007068 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	2200      	movs	r2, #0
 8007060:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8007062:	68b8      	ldr	r0, [r7, #8]
 8007064:	f000 f8c2 	bl	80071ec <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	695b      	ldr	r3, [r3, #20]
 800706e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007072:	2b40      	cmp	r3, #64	@ 0x40
 8007074:	bf0c      	ite	eq
 8007076:	2301      	moveq	r3, #1
 8007078:	2300      	movne	r3, #0
 800707a:	b2db      	uxtb	r3, r3
 800707c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007084:	b2db      	uxtb	r3, r3
 8007086:	2b22      	cmp	r3, #34	@ 0x22
 8007088:	d108      	bne.n	800709c <UART_DMAError+0x7a>
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d005      	beq.n	800709c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	2200      	movs	r2, #0
 8007094:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8007096:	68b8      	ldr	r0, [r7, #8]
 8007098:	f000 f8d0 	bl	800723c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070a0:	f043 0210 	orr.w	r2, r3, #16
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80070a8:	68b8      	ldr	r0, [r7, #8]
 80070aa:	f7ff fe95 	bl	8006dd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80070ae:	bf00      	nop
 80070b0:	3710      	adds	r7, #16
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bd80      	pop	{r7, pc}
	...

080070b8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b098      	sub	sp, #96	@ 0x60
 80070bc:	af00      	add	r7, sp, #0
 80070be:	60f8      	str	r0, [r7, #12]
 80070c0:	60b9      	str	r1, [r7, #8]
 80070c2:	4613      	mov	r3, r2
 80070c4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80070c6:	68ba      	ldr	r2, [r7, #8]
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	88fa      	ldrh	r2, [r7, #6]
 80070d0:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	2200      	movs	r2, #0
 80070d6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	2222      	movs	r2, #34	@ 0x22
 80070dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070e4:	4a3e      	ldr	r2, [pc, #248]	@ (80071e0 <UART_Start_Receive_DMA+0x128>)
 80070e6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070ec:	4a3d      	ldr	r2, [pc, #244]	@ (80071e4 <UART_Start_Receive_DMA+0x12c>)
 80070ee:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070f4:	4a3c      	ldr	r2, [pc, #240]	@ (80071e8 <UART_Start_Receive_DMA+0x130>)
 80070f6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070fc:	2200      	movs	r2, #0
 80070fe:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007100:	f107 0308 	add.w	r3, r7, #8
 8007104:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	3304      	adds	r3, #4
 8007110:	4619      	mov	r1, r3
 8007112:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007114:	681a      	ldr	r2, [r3, #0]
 8007116:	88fb      	ldrh	r3, [r7, #6]
 8007118:	f7fc ff36 	bl	8003f88 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800711c:	2300      	movs	r3, #0
 800711e:	613b      	str	r3, [r7, #16]
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	613b      	str	r3, [r7, #16]
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	685b      	ldr	r3, [r3, #4]
 800712e:	613b      	str	r3, [r7, #16]
 8007130:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	691b      	ldr	r3, [r3, #16]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d019      	beq.n	800716e <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	330c      	adds	r3, #12
 8007140:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007142:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007144:	e853 3f00 	ldrex	r3, [r3]
 8007148:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800714a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800714c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007150:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	330c      	adds	r3, #12
 8007158:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800715a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800715c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800715e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8007160:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007162:	e841 2300 	strex	r3, r2, [r1]
 8007166:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007168:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800716a:	2b00      	cmp	r3, #0
 800716c:	d1e5      	bne.n	800713a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	3314      	adds	r3, #20
 8007174:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007176:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007178:	e853 3f00 	ldrex	r3, [r3]
 800717c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800717e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007180:	f043 0301 	orr.w	r3, r3, #1
 8007184:	657b      	str	r3, [r7, #84]	@ 0x54
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	3314      	adds	r3, #20
 800718c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800718e:	63ba      	str	r2, [r7, #56]	@ 0x38
 8007190:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007192:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8007194:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007196:	e841 2300 	strex	r3, r2, [r1]
 800719a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800719c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d1e5      	bne.n	800716e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	3314      	adds	r3, #20
 80071a8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071aa:	69bb      	ldr	r3, [r7, #24]
 80071ac:	e853 3f00 	ldrex	r3, [r3]
 80071b0:	617b      	str	r3, [r7, #20]
   return(result);
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80071b8:	653b      	str	r3, [r7, #80]	@ 0x50
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	3314      	adds	r3, #20
 80071c0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80071c2:	627a      	str	r2, [r7, #36]	@ 0x24
 80071c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071c6:	6a39      	ldr	r1, [r7, #32]
 80071c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80071ca:	e841 2300 	strex	r3, r2, [r1]
 80071ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80071d0:	69fb      	ldr	r3, [r7, #28]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d1e5      	bne.n	80071a2 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80071d6:	2300      	movs	r3, #0
}
 80071d8:	4618      	mov	r0, r3
 80071da:	3760      	adds	r7, #96	@ 0x60
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd80      	pop	{r7, pc}
 80071e0:	08006ebb 	.word	0x08006ebb
 80071e4:	08006fe7 	.word	0x08006fe7
 80071e8:	08007023 	.word	0x08007023

080071ec <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80071ec:	b480      	push	{r7}
 80071ee:	b089      	sub	sp, #36	@ 0x24
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	330c      	adds	r3, #12
 80071fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	e853 3f00 	ldrex	r3, [r3]
 8007202:	60bb      	str	r3, [r7, #8]
   return(result);
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800720a:	61fb      	str	r3, [r7, #28]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	330c      	adds	r3, #12
 8007212:	69fa      	ldr	r2, [r7, #28]
 8007214:	61ba      	str	r2, [r7, #24]
 8007216:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007218:	6979      	ldr	r1, [r7, #20]
 800721a:	69ba      	ldr	r2, [r7, #24]
 800721c:	e841 2300 	strex	r3, r2, [r1]
 8007220:	613b      	str	r3, [r7, #16]
   return(result);
 8007222:	693b      	ldr	r3, [r7, #16]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d1e5      	bne.n	80071f4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2220      	movs	r2, #32
 800722c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8007230:	bf00      	nop
 8007232:	3724      	adds	r7, #36	@ 0x24
 8007234:	46bd      	mov	sp, r7
 8007236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723a:	4770      	bx	lr

0800723c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800723c:	b480      	push	{r7}
 800723e:	b095      	sub	sp, #84	@ 0x54
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	330c      	adds	r3, #12
 800724a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800724c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800724e:	e853 3f00 	ldrex	r3, [r3]
 8007252:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007254:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007256:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800725a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	330c      	adds	r3, #12
 8007262:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007264:	643a      	str	r2, [r7, #64]	@ 0x40
 8007266:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007268:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800726a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800726c:	e841 2300 	strex	r3, r2, [r1]
 8007270:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007272:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007274:	2b00      	cmp	r3, #0
 8007276:	d1e5      	bne.n	8007244 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	3314      	adds	r3, #20
 800727e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007280:	6a3b      	ldr	r3, [r7, #32]
 8007282:	e853 3f00 	ldrex	r3, [r3]
 8007286:	61fb      	str	r3, [r7, #28]
   return(result);
 8007288:	69fb      	ldr	r3, [r7, #28]
 800728a:	f023 0301 	bic.w	r3, r3, #1
 800728e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	3314      	adds	r3, #20
 8007296:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007298:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800729a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800729c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800729e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80072a0:	e841 2300 	strex	r3, r2, [r1]
 80072a4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80072a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d1e5      	bne.n	8007278 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072b0:	2b01      	cmp	r3, #1
 80072b2:	d119      	bne.n	80072e8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	330c      	adds	r3, #12
 80072ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	e853 3f00 	ldrex	r3, [r3]
 80072c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	f023 0310 	bic.w	r3, r3, #16
 80072ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	330c      	adds	r3, #12
 80072d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80072d4:	61ba      	str	r2, [r7, #24]
 80072d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072d8:	6979      	ldr	r1, [r7, #20]
 80072da:	69ba      	ldr	r2, [r7, #24]
 80072dc:	e841 2300 	strex	r3, r2, [r1]
 80072e0:	613b      	str	r3, [r7, #16]
   return(result);
 80072e2:	693b      	ldr	r3, [r7, #16]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d1e5      	bne.n	80072b4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2220      	movs	r2, #32
 80072ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2200      	movs	r2, #0
 80072f4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80072f6:	bf00      	nop
 80072f8:	3754      	adds	r7, #84	@ 0x54
 80072fa:	46bd      	mov	sp, r7
 80072fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007300:	4770      	bx	lr

08007302 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007302:	b580      	push	{r7, lr}
 8007304:	b084      	sub	sp, #16
 8007306:	af00      	add	r7, sp, #0
 8007308:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800730e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	2200      	movs	r2, #0
 8007314:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	2200      	movs	r2, #0
 800731a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800731c:	68f8      	ldr	r0, [r7, #12]
 800731e:	f7ff fd5b 	bl	8006dd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007322:	bf00      	nop
 8007324:	3710      	adds	r7, #16
 8007326:	46bd      	mov	sp, r7
 8007328:	bd80      	pop	{r7, pc}

0800732a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800732a:	b480      	push	{r7}
 800732c:	b085      	sub	sp, #20
 800732e:	af00      	add	r7, sp, #0
 8007330:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007338:	b2db      	uxtb	r3, r3
 800733a:	2b21      	cmp	r3, #33	@ 0x21
 800733c:	d13e      	bne.n	80073bc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	689b      	ldr	r3, [r3, #8]
 8007342:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007346:	d114      	bne.n	8007372 <UART_Transmit_IT+0x48>
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	691b      	ldr	r3, [r3, #16]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d110      	bne.n	8007372 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6a1b      	ldr	r3, [r3, #32]
 8007354:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	881b      	ldrh	r3, [r3, #0]
 800735a:	461a      	mov	r2, r3
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007364:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6a1b      	ldr	r3, [r3, #32]
 800736a:	1c9a      	adds	r2, r3, #2
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	621a      	str	r2, [r3, #32]
 8007370:	e008      	b.n	8007384 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6a1b      	ldr	r3, [r3, #32]
 8007376:	1c59      	adds	r1, r3, #1
 8007378:	687a      	ldr	r2, [r7, #4]
 800737a:	6211      	str	r1, [r2, #32]
 800737c:	781a      	ldrb	r2, [r3, #0]
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007388:	b29b      	uxth	r3, r3
 800738a:	3b01      	subs	r3, #1
 800738c:	b29b      	uxth	r3, r3
 800738e:	687a      	ldr	r2, [r7, #4]
 8007390:	4619      	mov	r1, r3
 8007392:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007394:	2b00      	cmp	r3, #0
 8007396:	d10f      	bne.n	80073b8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	68da      	ldr	r2, [r3, #12]
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80073a6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	68da      	ldr	r2, [r3, #12]
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80073b6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80073b8:	2300      	movs	r3, #0
 80073ba:	e000      	b.n	80073be <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80073bc:	2302      	movs	r3, #2
  }
}
 80073be:	4618      	mov	r0, r3
 80073c0:	3714      	adds	r7, #20
 80073c2:	46bd      	mov	sp, r7
 80073c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c8:	4770      	bx	lr

080073ca <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80073ca:	b580      	push	{r7, lr}
 80073cc:	b082      	sub	sp, #8
 80073ce:	af00      	add	r7, sp, #0
 80073d0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	68da      	ldr	r2, [r3, #12]
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80073e0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2220      	movs	r2, #32
 80073e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f7ff fccc 	bl	8006d88 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80073f0:	2300      	movs	r3, #0
}
 80073f2:	4618      	mov	r0, r3
 80073f4:	3708      	adds	r7, #8
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bd80      	pop	{r7, pc}

080073fa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80073fa:	b580      	push	{r7, lr}
 80073fc:	b08c      	sub	sp, #48	@ 0x30
 80073fe:	af00      	add	r7, sp, #0
 8007400:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007408:	b2db      	uxtb	r3, r3
 800740a:	2b22      	cmp	r3, #34	@ 0x22
 800740c:	f040 80ae 	bne.w	800756c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	689b      	ldr	r3, [r3, #8]
 8007414:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007418:	d117      	bne.n	800744a <UART_Receive_IT+0x50>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	691b      	ldr	r3, [r3, #16]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d113      	bne.n	800744a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007422:	2300      	movs	r3, #0
 8007424:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800742a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	685b      	ldr	r3, [r3, #4]
 8007432:	b29b      	uxth	r3, r3
 8007434:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007438:	b29a      	uxth	r2, r3
 800743a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800743c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007442:	1c9a      	adds	r2, r3, #2
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	629a      	str	r2, [r3, #40]	@ 0x28
 8007448:	e026      	b.n	8007498 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800744e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8007450:	2300      	movs	r3, #0
 8007452:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	689b      	ldr	r3, [r3, #8]
 8007458:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800745c:	d007      	beq.n	800746e <UART_Receive_IT+0x74>
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	689b      	ldr	r3, [r3, #8]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d10a      	bne.n	800747c <UART_Receive_IT+0x82>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	691b      	ldr	r3, [r3, #16]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d106      	bne.n	800747c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	685b      	ldr	r3, [r3, #4]
 8007474:	b2da      	uxtb	r2, r3
 8007476:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007478:	701a      	strb	r2, [r3, #0]
 800747a:	e008      	b.n	800748e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	685b      	ldr	r3, [r3, #4]
 8007482:	b2db      	uxtb	r3, r3
 8007484:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007488:	b2da      	uxtb	r2, r3
 800748a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800748c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007492:	1c5a      	adds	r2, r3, #1
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800749c:	b29b      	uxth	r3, r3
 800749e:	3b01      	subs	r3, #1
 80074a0:	b29b      	uxth	r3, r3
 80074a2:	687a      	ldr	r2, [r7, #4]
 80074a4:	4619      	mov	r1, r3
 80074a6:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d15d      	bne.n	8007568 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	68da      	ldr	r2, [r3, #12]
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f022 0220 	bic.w	r2, r2, #32
 80074ba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	68da      	ldr	r2, [r3, #12]
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80074ca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	695a      	ldr	r2, [r3, #20]
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f022 0201 	bic.w	r2, r2, #1
 80074da:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2220      	movs	r2, #32
 80074e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2200      	movs	r2, #0
 80074e8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074ee:	2b01      	cmp	r3, #1
 80074f0:	d135      	bne.n	800755e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2200      	movs	r2, #0
 80074f6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	330c      	adds	r3, #12
 80074fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007500:	697b      	ldr	r3, [r7, #20]
 8007502:	e853 3f00 	ldrex	r3, [r3]
 8007506:	613b      	str	r3, [r7, #16]
   return(result);
 8007508:	693b      	ldr	r3, [r7, #16]
 800750a:	f023 0310 	bic.w	r3, r3, #16
 800750e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	330c      	adds	r3, #12
 8007516:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007518:	623a      	str	r2, [r7, #32]
 800751a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800751c:	69f9      	ldr	r1, [r7, #28]
 800751e:	6a3a      	ldr	r2, [r7, #32]
 8007520:	e841 2300 	strex	r3, r2, [r1]
 8007524:	61bb      	str	r3, [r7, #24]
   return(result);
 8007526:	69bb      	ldr	r3, [r7, #24]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d1e5      	bne.n	80074f8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f003 0310 	and.w	r3, r3, #16
 8007536:	2b10      	cmp	r3, #16
 8007538:	d10a      	bne.n	8007550 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800753a:	2300      	movs	r3, #0
 800753c:	60fb      	str	r3, [r7, #12]
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	60fb      	str	r3, [r7, #12]
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	685b      	ldr	r3, [r3, #4]
 800754c:	60fb      	str	r3, [r7, #12]
 800754e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007554:	4619      	mov	r1, r3
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f7ff fc48 	bl	8006dec <HAL_UARTEx_RxEventCallback>
 800755c:	e002      	b.n	8007564 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f7ff fc26 	bl	8006db0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007564:	2300      	movs	r3, #0
 8007566:	e002      	b.n	800756e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007568:	2300      	movs	r3, #0
 800756a:	e000      	b.n	800756e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800756c:	2302      	movs	r3, #2
  }
}
 800756e:	4618      	mov	r0, r3
 8007570:	3730      	adds	r7, #48	@ 0x30
 8007572:	46bd      	mov	sp, r7
 8007574:	bd80      	pop	{r7, pc}
	...

08007578 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007578:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800757c:	b0c0      	sub	sp, #256	@ 0x100
 800757e:	af00      	add	r7, sp, #0
 8007580:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	691b      	ldr	r3, [r3, #16]
 800758c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007594:	68d9      	ldr	r1, [r3, #12]
 8007596:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800759a:	681a      	ldr	r2, [r3, #0]
 800759c:	ea40 0301 	orr.w	r3, r0, r1
 80075a0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80075a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075a6:	689a      	ldr	r2, [r3, #8]
 80075a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075ac:	691b      	ldr	r3, [r3, #16]
 80075ae:	431a      	orrs	r2, r3
 80075b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075b4:	695b      	ldr	r3, [r3, #20]
 80075b6:	431a      	orrs	r2, r3
 80075b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075bc:	69db      	ldr	r3, [r3, #28]
 80075be:	4313      	orrs	r3, r2
 80075c0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80075c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	68db      	ldr	r3, [r3, #12]
 80075cc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80075d0:	f021 010c 	bic.w	r1, r1, #12
 80075d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075d8:	681a      	ldr	r2, [r3, #0]
 80075da:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80075de:	430b      	orrs	r3, r1
 80075e0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80075e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	695b      	ldr	r3, [r3, #20]
 80075ea:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80075ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075f2:	6999      	ldr	r1, [r3, #24]
 80075f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075f8:	681a      	ldr	r2, [r3, #0]
 80075fa:	ea40 0301 	orr.w	r3, r0, r1
 80075fe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007600:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007604:	681a      	ldr	r2, [r3, #0]
 8007606:	4b8f      	ldr	r3, [pc, #572]	@ (8007844 <UART_SetConfig+0x2cc>)
 8007608:	429a      	cmp	r2, r3
 800760a:	d005      	beq.n	8007618 <UART_SetConfig+0xa0>
 800760c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007610:	681a      	ldr	r2, [r3, #0]
 8007612:	4b8d      	ldr	r3, [pc, #564]	@ (8007848 <UART_SetConfig+0x2d0>)
 8007614:	429a      	cmp	r2, r3
 8007616:	d104      	bne.n	8007622 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007618:	f7fd fc68 	bl	8004eec <HAL_RCC_GetPCLK2Freq>
 800761c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007620:	e003      	b.n	800762a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007622:	f7fd fc4f 	bl	8004ec4 <HAL_RCC_GetPCLK1Freq>
 8007626:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800762a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800762e:	69db      	ldr	r3, [r3, #28]
 8007630:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007634:	f040 810c 	bne.w	8007850 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007638:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800763c:	2200      	movs	r2, #0
 800763e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007642:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007646:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800764a:	4622      	mov	r2, r4
 800764c:	462b      	mov	r3, r5
 800764e:	1891      	adds	r1, r2, r2
 8007650:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007652:	415b      	adcs	r3, r3
 8007654:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007656:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800765a:	4621      	mov	r1, r4
 800765c:	eb12 0801 	adds.w	r8, r2, r1
 8007660:	4629      	mov	r1, r5
 8007662:	eb43 0901 	adc.w	r9, r3, r1
 8007666:	f04f 0200 	mov.w	r2, #0
 800766a:	f04f 0300 	mov.w	r3, #0
 800766e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007672:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007676:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800767a:	4690      	mov	r8, r2
 800767c:	4699      	mov	r9, r3
 800767e:	4623      	mov	r3, r4
 8007680:	eb18 0303 	adds.w	r3, r8, r3
 8007684:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007688:	462b      	mov	r3, r5
 800768a:	eb49 0303 	adc.w	r3, r9, r3
 800768e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007692:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007696:	685b      	ldr	r3, [r3, #4]
 8007698:	2200      	movs	r2, #0
 800769a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800769e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80076a2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80076a6:	460b      	mov	r3, r1
 80076a8:	18db      	adds	r3, r3, r3
 80076aa:	653b      	str	r3, [r7, #80]	@ 0x50
 80076ac:	4613      	mov	r3, r2
 80076ae:	eb42 0303 	adc.w	r3, r2, r3
 80076b2:	657b      	str	r3, [r7, #84]	@ 0x54
 80076b4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80076b8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80076bc:	f7f9 fafe 	bl	8000cbc <__aeabi_uldivmod>
 80076c0:	4602      	mov	r2, r0
 80076c2:	460b      	mov	r3, r1
 80076c4:	4b61      	ldr	r3, [pc, #388]	@ (800784c <UART_SetConfig+0x2d4>)
 80076c6:	fba3 2302 	umull	r2, r3, r3, r2
 80076ca:	095b      	lsrs	r3, r3, #5
 80076cc:	011c      	lsls	r4, r3, #4
 80076ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80076d2:	2200      	movs	r2, #0
 80076d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80076d8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80076dc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80076e0:	4642      	mov	r2, r8
 80076e2:	464b      	mov	r3, r9
 80076e4:	1891      	adds	r1, r2, r2
 80076e6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80076e8:	415b      	adcs	r3, r3
 80076ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80076ec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80076f0:	4641      	mov	r1, r8
 80076f2:	eb12 0a01 	adds.w	sl, r2, r1
 80076f6:	4649      	mov	r1, r9
 80076f8:	eb43 0b01 	adc.w	fp, r3, r1
 80076fc:	f04f 0200 	mov.w	r2, #0
 8007700:	f04f 0300 	mov.w	r3, #0
 8007704:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007708:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800770c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007710:	4692      	mov	sl, r2
 8007712:	469b      	mov	fp, r3
 8007714:	4643      	mov	r3, r8
 8007716:	eb1a 0303 	adds.w	r3, sl, r3
 800771a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800771e:	464b      	mov	r3, r9
 8007720:	eb4b 0303 	adc.w	r3, fp, r3
 8007724:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800772c:	685b      	ldr	r3, [r3, #4]
 800772e:	2200      	movs	r2, #0
 8007730:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007734:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007738:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800773c:	460b      	mov	r3, r1
 800773e:	18db      	adds	r3, r3, r3
 8007740:	643b      	str	r3, [r7, #64]	@ 0x40
 8007742:	4613      	mov	r3, r2
 8007744:	eb42 0303 	adc.w	r3, r2, r3
 8007748:	647b      	str	r3, [r7, #68]	@ 0x44
 800774a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800774e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007752:	f7f9 fab3 	bl	8000cbc <__aeabi_uldivmod>
 8007756:	4602      	mov	r2, r0
 8007758:	460b      	mov	r3, r1
 800775a:	4611      	mov	r1, r2
 800775c:	4b3b      	ldr	r3, [pc, #236]	@ (800784c <UART_SetConfig+0x2d4>)
 800775e:	fba3 2301 	umull	r2, r3, r3, r1
 8007762:	095b      	lsrs	r3, r3, #5
 8007764:	2264      	movs	r2, #100	@ 0x64
 8007766:	fb02 f303 	mul.w	r3, r2, r3
 800776a:	1acb      	subs	r3, r1, r3
 800776c:	00db      	lsls	r3, r3, #3
 800776e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007772:	4b36      	ldr	r3, [pc, #216]	@ (800784c <UART_SetConfig+0x2d4>)
 8007774:	fba3 2302 	umull	r2, r3, r3, r2
 8007778:	095b      	lsrs	r3, r3, #5
 800777a:	005b      	lsls	r3, r3, #1
 800777c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007780:	441c      	add	r4, r3
 8007782:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007786:	2200      	movs	r2, #0
 8007788:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800778c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007790:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007794:	4642      	mov	r2, r8
 8007796:	464b      	mov	r3, r9
 8007798:	1891      	adds	r1, r2, r2
 800779a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800779c:	415b      	adcs	r3, r3
 800779e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80077a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80077a4:	4641      	mov	r1, r8
 80077a6:	1851      	adds	r1, r2, r1
 80077a8:	6339      	str	r1, [r7, #48]	@ 0x30
 80077aa:	4649      	mov	r1, r9
 80077ac:	414b      	adcs	r3, r1
 80077ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80077b0:	f04f 0200 	mov.w	r2, #0
 80077b4:	f04f 0300 	mov.w	r3, #0
 80077b8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80077bc:	4659      	mov	r1, fp
 80077be:	00cb      	lsls	r3, r1, #3
 80077c0:	4651      	mov	r1, sl
 80077c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80077c6:	4651      	mov	r1, sl
 80077c8:	00ca      	lsls	r2, r1, #3
 80077ca:	4610      	mov	r0, r2
 80077cc:	4619      	mov	r1, r3
 80077ce:	4603      	mov	r3, r0
 80077d0:	4642      	mov	r2, r8
 80077d2:	189b      	adds	r3, r3, r2
 80077d4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80077d8:	464b      	mov	r3, r9
 80077da:	460a      	mov	r2, r1
 80077dc:	eb42 0303 	adc.w	r3, r2, r3
 80077e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80077e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077e8:	685b      	ldr	r3, [r3, #4]
 80077ea:	2200      	movs	r2, #0
 80077ec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80077f0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80077f4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80077f8:	460b      	mov	r3, r1
 80077fa:	18db      	adds	r3, r3, r3
 80077fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80077fe:	4613      	mov	r3, r2
 8007800:	eb42 0303 	adc.w	r3, r2, r3
 8007804:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007806:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800780a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800780e:	f7f9 fa55 	bl	8000cbc <__aeabi_uldivmod>
 8007812:	4602      	mov	r2, r0
 8007814:	460b      	mov	r3, r1
 8007816:	4b0d      	ldr	r3, [pc, #52]	@ (800784c <UART_SetConfig+0x2d4>)
 8007818:	fba3 1302 	umull	r1, r3, r3, r2
 800781c:	095b      	lsrs	r3, r3, #5
 800781e:	2164      	movs	r1, #100	@ 0x64
 8007820:	fb01 f303 	mul.w	r3, r1, r3
 8007824:	1ad3      	subs	r3, r2, r3
 8007826:	00db      	lsls	r3, r3, #3
 8007828:	3332      	adds	r3, #50	@ 0x32
 800782a:	4a08      	ldr	r2, [pc, #32]	@ (800784c <UART_SetConfig+0x2d4>)
 800782c:	fba2 2303 	umull	r2, r3, r2, r3
 8007830:	095b      	lsrs	r3, r3, #5
 8007832:	f003 0207 	and.w	r2, r3, #7
 8007836:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	4422      	add	r2, r4
 800783e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007840:	e106      	b.n	8007a50 <UART_SetConfig+0x4d8>
 8007842:	bf00      	nop
 8007844:	40011000 	.word	0x40011000
 8007848:	40011400 	.word	0x40011400
 800784c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007850:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007854:	2200      	movs	r2, #0
 8007856:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800785a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800785e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007862:	4642      	mov	r2, r8
 8007864:	464b      	mov	r3, r9
 8007866:	1891      	adds	r1, r2, r2
 8007868:	6239      	str	r1, [r7, #32]
 800786a:	415b      	adcs	r3, r3
 800786c:	627b      	str	r3, [r7, #36]	@ 0x24
 800786e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007872:	4641      	mov	r1, r8
 8007874:	1854      	adds	r4, r2, r1
 8007876:	4649      	mov	r1, r9
 8007878:	eb43 0501 	adc.w	r5, r3, r1
 800787c:	f04f 0200 	mov.w	r2, #0
 8007880:	f04f 0300 	mov.w	r3, #0
 8007884:	00eb      	lsls	r3, r5, #3
 8007886:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800788a:	00e2      	lsls	r2, r4, #3
 800788c:	4614      	mov	r4, r2
 800788e:	461d      	mov	r5, r3
 8007890:	4643      	mov	r3, r8
 8007892:	18e3      	adds	r3, r4, r3
 8007894:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007898:	464b      	mov	r3, r9
 800789a:	eb45 0303 	adc.w	r3, r5, r3
 800789e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80078a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078a6:	685b      	ldr	r3, [r3, #4]
 80078a8:	2200      	movs	r2, #0
 80078aa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80078ae:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80078b2:	f04f 0200 	mov.w	r2, #0
 80078b6:	f04f 0300 	mov.w	r3, #0
 80078ba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80078be:	4629      	mov	r1, r5
 80078c0:	008b      	lsls	r3, r1, #2
 80078c2:	4621      	mov	r1, r4
 80078c4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80078c8:	4621      	mov	r1, r4
 80078ca:	008a      	lsls	r2, r1, #2
 80078cc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80078d0:	f7f9 f9f4 	bl	8000cbc <__aeabi_uldivmod>
 80078d4:	4602      	mov	r2, r0
 80078d6:	460b      	mov	r3, r1
 80078d8:	4b60      	ldr	r3, [pc, #384]	@ (8007a5c <UART_SetConfig+0x4e4>)
 80078da:	fba3 2302 	umull	r2, r3, r3, r2
 80078de:	095b      	lsrs	r3, r3, #5
 80078e0:	011c      	lsls	r4, r3, #4
 80078e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80078e6:	2200      	movs	r2, #0
 80078e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80078ec:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80078f0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80078f4:	4642      	mov	r2, r8
 80078f6:	464b      	mov	r3, r9
 80078f8:	1891      	adds	r1, r2, r2
 80078fa:	61b9      	str	r1, [r7, #24]
 80078fc:	415b      	adcs	r3, r3
 80078fe:	61fb      	str	r3, [r7, #28]
 8007900:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007904:	4641      	mov	r1, r8
 8007906:	1851      	adds	r1, r2, r1
 8007908:	6139      	str	r1, [r7, #16]
 800790a:	4649      	mov	r1, r9
 800790c:	414b      	adcs	r3, r1
 800790e:	617b      	str	r3, [r7, #20]
 8007910:	f04f 0200 	mov.w	r2, #0
 8007914:	f04f 0300 	mov.w	r3, #0
 8007918:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800791c:	4659      	mov	r1, fp
 800791e:	00cb      	lsls	r3, r1, #3
 8007920:	4651      	mov	r1, sl
 8007922:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007926:	4651      	mov	r1, sl
 8007928:	00ca      	lsls	r2, r1, #3
 800792a:	4610      	mov	r0, r2
 800792c:	4619      	mov	r1, r3
 800792e:	4603      	mov	r3, r0
 8007930:	4642      	mov	r2, r8
 8007932:	189b      	adds	r3, r3, r2
 8007934:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007938:	464b      	mov	r3, r9
 800793a:	460a      	mov	r2, r1
 800793c:	eb42 0303 	adc.w	r3, r2, r3
 8007940:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007944:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007948:	685b      	ldr	r3, [r3, #4]
 800794a:	2200      	movs	r2, #0
 800794c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800794e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007950:	f04f 0200 	mov.w	r2, #0
 8007954:	f04f 0300 	mov.w	r3, #0
 8007958:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800795c:	4649      	mov	r1, r9
 800795e:	008b      	lsls	r3, r1, #2
 8007960:	4641      	mov	r1, r8
 8007962:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007966:	4641      	mov	r1, r8
 8007968:	008a      	lsls	r2, r1, #2
 800796a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800796e:	f7f9 f9a5 	bl	8000cbc <__aeabi_uldivmod>
 8007972:	4602      	mov	r2, r0
 8007974:	460b      	mov	r3, r1
 8007976:	4611      	mov	r1, r2
 8007978:	4b38      	ldr	r3, [pc, #224]	@ (8007a5c <UART_SetConfig+0x4e4>)
 800797a:	fba3 2301 	umull	r2, r3, r3, r1
 800797e:	095b      	lsrs	r3, r3, #5
 8007980:	2264      	movs	r2, #100	@ 0x64
 8007982:	fb02 f303 	mul.w	r3, r2, r3
 8007986:	1acb      	subs	r3, r1, r3
 8007988:	011b      	lsls	r3, r3, #4
 800798a:	3332      	adds	r3, #50	@ 0x32
 800798c:	4a33      	ldr	r2, [pc, #204]	@ (8007a5c <UART_SetConfig+0x4e4>)
 800798e:	fba2 2303 	umull	r2, r3, r2, r3
 8007992:	095b      	lsrs	r3, r3, #5
 8007994:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007998:	441c      	add	r4, r3
 800799a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800799e:	2200      	movs	r2, #0
 80079a0:	673b      	str	r3, [r7, #112]	@ 0x70
 80079a2:	677a      	str	r2, [r7, #116]	@ 0x74
 80079a4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80079a8:	4642      	mov	r2, r8
 80079aa:	464b      	mov	r3, r9
 80079ac:	1891      	adds	r1, r2, r2
 80079ae:	60b9      	str	r1, [r7, #8]
 80079b0:	415b      	adcs	r3, r3
 80079b2:	60fb      	str	r3, [r7, #12]
 80079b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80079b8:	4641      	mov	r1, r8
 80079ba:	1851      	adds	r1, r2, r1
 80079bc:	6039      	str	r1, [r7, #0]
 80079be:	4649      	mov	r1, r9
 80079c0:	414b      	adcs	r3, r1
 80079c2:	607b      	str	r3, [r7, #4]
 80079c4:	f04f 0200 	mov.w	r2, #0
 80079c8:	f04f 0300 	mov.w	r3, #0
 80079cc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80079d0:	4659      	mov	r1, fp
 80079d2:	00cb      	lsls	r3, r1, #3
 80079d4:	4651      	mov	r1, sl
 80079d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80079da:	4651      	mov	r1, sl
 80079dc:	00ca      	lsls	r2, r1, #3
 80079de:	4610      	mov	r0, r2
 80079e0:	4619      	mov	r1, r3
 80079e2:	4603      	mov	r3, r0
 80079e4:	4642      	mov	r2, r8
 80079e6:	189b      	adds	r3, r3, r2
 80079e8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80079ea:	464b      	mov	r3, r9
 80079ec:	460a      	mov	r2, r1
 80079ee:	eb42 0303 	adc.w	r3, r2, r3
 80079f2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80079f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079f8:	685b      	ldr	r3, [r3, #4]
 80079fa:	2200      	movs	r2, #0
 80079fc:	663b      	str	r3, [r7, #96]	@ 0x60
 80079fe:	667a      	str	r2, [r7, #100]	@ 0x64
 8007a00:	f04f 0200 	mov.w	r2, #0
 8007a04:	f04f 0300 	mov.w	r3, #0
 8007a08:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007a0c:	4649      	mov	r1, r9
 8007a0e:	008b      	lsls	r3, r1, #2
 8007a10:	4641      	mov	r1, r8
 8007a12:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007a16:	4641      	mov	r1, r8
 8007a18:	008a      	lsls	r2, r1, #2
 8007a1a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007a1e:	f7f9 f94d 	bl	8000cbc <__aeabi_uldivmod>
 8007a22:	4602      	mov	r2, r0
 8007a24:	460b      	mov	r3, r1
 8007a26:	4b0d      	ldr	r3, [pc, #52]	@ (8007a5c <UART_SetConfig+0x4e4>)
 8007a28:	fba3 1302 	umull	r1, r3, r3, r2
 8007a2c:	095b      	lsrs	r3, r3, #5
 8007a2e:	2164      	movs	r1, #100	@ 0x64
 8007a30:	fb01 f303 	mul.w	r3, r1, r3
 8007a34:	1ad3      	subs	r3, r2, r3
 8007a36:	011b      	lsls	r3, r3, #4
 8007a38:	3332      	adds	r3, #50	@ 0x32
 8007a3a:	4a08      	ldr	r2, [pc, #32]	@ (8007a5c <UART_SetConfig+0x4e4>)
 8007a3c:	fba2 2303 	umull	r2, r3, r2, r3
 8007a40:	095b      	lsrs	r3, r3, #5
 8007a42:	f003 020f 	and.w	r2, r3, #15
 8007a46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	4422      	add	r2, r4
 8007a4e:	609a      	str	r2, [r3, #8]
}
 8007a50:	bf00      	nop
 8007a52:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007a56:	46bd      	mov	sp, r7
 8007a58:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007a5c:	51eb851f 	.word	0x51eb851f

08007a60 <__NVIC_SetPriority>:
{
 8007a60:	b480      	push	{r7}
 8007a62:	b083      	sub	sp, #12
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	4603      	mov	r3, r0
 8007a68:	6039      	str	r1, [r7, #0]
 8007a6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007a6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	db0a      	blt.n	8007a8a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	b2da      	uxtb	r2, r3
 8007a78:	490c      	ldr	r1, [pc, #48]	@ (8007aac <__NVIC_SetPriority+0x4c>)
 8007a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a7e:	0112      	lsls	r2, r2, #4
 8007a80:	b2d2      	uxtb	r2, r2
 8007a82:	440b      	add	r3, r1
 8007a84:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007a88:	e00a      	b.n	8007aa0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	b2da      	uxtb	r2, r3
 8007a8e:	4908      	ldr	r1, [pc, #32]	@ (8007ab0 <__NVIC_SetPriority+0x50>)
 8007a90:	79fb      	ldrb	r3, [r7, #7]
 8007a92:	f003 030f 	and.w	r3, r3, #15
 8007a96:	3b04      	subs	r3, #4
 8007a98:	0112      	lsls	r2, r2, #4
 8007a9a:	b2d2      	uxtb	r2, r2
 8007a9c:	440b      	add	r3, r1
 8007a9e:	761a      	strb	r2, [r3, #24]
}
 8007aa0:	bf00      	nop
 8007aa2:	370c      	adds	r7, #12
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aaa:	4770      	bx	lr
 8007aac:	e000e100 	.word	0xe000e100
 8007ab0:	e000ed00 	.word	0xe000ed00

08007ab4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007ab8:	4b05      	ldr	r3, [pc, #20]	@ (8007ad0 <SysTick_Handler+0x1c>)
 8007aba:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007abc:	f001 fd40 	bl	8009540 <xTaskGetSchedulerState>
 8007ac0:	4603      	mov	r3, r0
 8007ac2:	2b01      	cmp	r3, #1
 8007ac4:	d001      	beq.n	8007aca <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007ac6:	f002 fb37 	bl	800a138 <xPortSysTickHandler>
  }
}
 8007aca:	bf00      	nop
 8007acc:	bd80      	pop	{r7, pc}
 8007ace:	bf00      	nop
 8007ad0:	e000e010 	.word	0xe000e010

08007ad4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007ad8:	2100      	movs	r1, #0
 8007ada:	f06f 0004 	mvn.w	r0, #4
 8007ade:	f7ff ffbf 	bl	8007a60 <__NVIC_SetPriority>
#endif
}
 8007ae2:	bf00      	nop
 8007ae4:	bd80      	pop	{r7, pc}
	...

08007ae8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007ae8:	b480      	push	{r7}
 8007aea:	b083      	sub	sp, #12
 8007aec:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007aee:	f3ef 8305 	mrs	r3, IPSR
 8007af2:	603b      	str	r3, [r7, #0]
  return(result);
 8007af4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d003      	beq.n	8007b02 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007afa:	f06f 0305 	mvn.w	r3, #5
 8007afe:	607b      	str	r3, [r7, #4]
 8007b00:	e00c      	b.n	8007b1c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007b02:	4b0a      	ldr	r3, [pc, #40]	@ (8007b2c <osKernelInitialize+0x44>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d105      	bne.n	8007b16 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007b0a:	4b08      	ldr	r3, [pc, #32]	@ (8007b2c <osKernelInitialize+0x44>)
 8007b0c:	2201      	movs	r2, #1
 8007b0e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007b10:	2300      	movs	r3, #0
 8007b12:	607b      	str	r3, [r7, #4]
 8007b14:	e002      	b.n	8007b1c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007b16:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007b1a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007b1c:	687b      	ldr	r3, [r7, #4]
}
 8007b1e:	4618      	mov	r0, r3
 8007b20:	370c      	adds	r7, #12
 8007b22:	46bd      	mov	sp, r7
 8007b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b28:	4770      	bx	lr
 8007b2a:	bf00      	nop
 8007b2c:	20008b0c 	.word	0x20008b0c

08007b30 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b082      	sub	sp, #8
 8007b34:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007b36:	f3ef 8305 	mrs	r3, IPSR
 8007b3a:	603b      	str	r3, [r7, #0]
  return(result);
 8007b3c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d003      	beq.n	8007b4a <osKernelStart+0x1a>
    stat = osErrorISR;
 8007b42:	f06f 0305 	mvn.w	r3, #5
 8007b46:	607b      	str	r3, [r7, #4]
 8007b48:	e010      	b.n	8007b6c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007b4a:	4b0b      	ldr	r3, [pc, #44]	@ (8007b78 <osKernelStart+0x48>)
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	2b01      	cmp	r3, #1
 8007b50:	d109      	bne.n	8007b66 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007b52:	f7ff ffbf 	bl	8007ad4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007b56:	4b08      	ldr	r3, [pc, #32]	@ (8007b78 <osKernelStart+0x48>)
 8007b58:	2202      	movs	r2, #2
 8007b5a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007b5c:	f001 f87a 	bl	8008c54 <vTaskStartScheduler>
      stat = osOK;
 8007b60:	2300      	movs	r3, #0
 8007b62:	607b      	str	r3, [r7, #4]
 8007b64:	e002      	b.n	8007b6c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007b66:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007b6a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007b6c:	687b      	ldr	r3, [r7, #4]
}
 8007b6e:	4618      	mov	r0, r3
 8007b70:	3708      	adds	r7, #8
 8007b72:	46bd      	mov	sp, r7
 8007b74:	bd80      	pop	{r7, pc}
 8007b76:	bf00      	nop
 8007b78:	20008b0c 	.word	0x20008b0c

08007b7c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b08e      	sub	sp, #56	@ 0x38
 8007b80:	af04      	add	r7, sp, #16
 8007b82:	60f8      	str	r0, [r7, #12]
 8007b84:	60b9      	str	r1, [r7, #8]
 8007b86:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007b88:	2300      	movs	r3, #0
 8007b8a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007b8c:	f3ef 8305 	mrs	r3, IPSR
 8007b90:	617b      	str	r3, [r7, #20]
  return(result);
 8007b92:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d17e      	bne.n	8007c96 <osThreadNew+0x11a>
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d07b      	beq.n	8007c96 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007b9e:	2380      	movs	r3, #128	@ 0x80
 8007ba0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007ba2:	2318      	movs	r3, #24
 8007ba4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8007baa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007bae:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d045      	beq.n	8007c42 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d002      	beq.n	8007bc4 <osThreadNew+0x48>
        name = attr->name;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	699b      	ldr	r3, [r3, #24]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d002      	beq.n	8007bd2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	699b      	ldr	r3, [r3, #24]
 8007bd0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007bd2:	69fb      	ldr	r3, [r7, #28]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d008      	beq.n	8007bea <osThreadNew+0x6e>
 8007bd8:	69fb      	ldr	r3, [r7, #28]
 8007bda:	2b38      	cmp	r3, #56	@ 0x38
 8007bdc:	d805      	bhi.n	8007bea <osThreadNew+0x6e>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	685b      	ldr	r3, [r3, #4]
 8007be2:	f003 0301 	and.w	r3, r3, #1
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d001      	beq.n	8007bee <osThreadNew+0x72>
        return (NULL);
 8007bea:	2300      	movs	r3, #0
 8007bec:	e054      	b.n	8007c98 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	695b      	ldr	r3, [r3, #20]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d003      	beq.n	8007bfe <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	695b      	ldr	r3, [r3, #20]
 8007bfa:	089b      	lsrs	r3, r3, #2
 8007bfc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	689b      	ldr	r3, [r3, #8]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d00e      	beq.n	8007c24 <osThreadNew+0xa8>
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	68db      	ldr	r3, [r3, #12]
 8007c0a:	2b5b      	cmp	r3, #91	@ 0x5b
 8007c0c:	d90a      	bls.n	8007c24 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d006      	beq.n	8007c24 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	695b      	ldr	r3, [r3, #20]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d002      	beq.n	8007c24 <osThreadNew+0xa8>
        mem = 1;
 8007c1e:	2301      	movs	r3, #1
 8007c20:	61bb      	str	r3, [r7, #24]
 8007c22:	e010      	b.n	8007c46 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	689b      	ldr	r3, [r3, #8]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d10c      	bne.n	8007c46 <osThreadNew+0xca>
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	68db      	ldr	r3, [r3, #12]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d108      	bne.n	8007c46 <osThreadNew+0xca>
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	691b      	ldr	r3, [r3, #16]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d104      	bne.n	8007c46 <osThreadNew+0xca>
          mem = 0;
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	61bb      	str	r3, [r7, #24]
 8007c40:	e001      	b.n	8007c46 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007c42:	2300      	movs	r3, #0
 8007c44:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007c46:	69bb      	ldr	r3, [r7, #24]
 8007c48:	2b01      	cmp	r3, #1
 8007c4a:	d110      	bne.n	8007c6e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007c50:	687a      	ldr	r2, [r7, #4]
 8007c52:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007c54:	9202      	str	r2, [sp, #8]
 8007c56:	9301      	str	r3, [sp, #4]
 8007c58:	69fb      	ldr	r3, [r7, #28]
 8007c5a:	9300      	str	r3, [sp, #0]
 8007c5c:	68bb      	ldr	r3, [r7, #8]
 8007c5e:	6a3a      	ldr	r2, [r7, #32]
 8007c60:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007c62:	68f8      	ldr	r0, [r7, #12]
 8007c64:	f000 fe1a 	bl	800889c <xTaskCreateStatic>
 8007c68:	4603      	mov	r3, r0
 8007c6a:	613b      	str	r3, [r7, #16]
 8007c6c:	e013      	b.n	8007c96 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007c6e:	69bb      	ldr	r3, [r7, #24]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d110      	bne.n	8007c96 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007c74:	6a3b      	ldr	r3, [r7, #32]
 8007c76:	b29a      	uxth	r2, r3
 8007c78:	f107 0310 	add.w	r3, r7, #16
 8007c7c:	9301      	str	r3, [sp, #4]
 8007c7e:	69fb      	ldr	r3, [r7, #28]
 8007c80:	9300      	str	r3, [sp, #0]
 8007c82:	68bb      	ldr	r3, [r7, #8]
 8007c84:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007c86:	68f8      	ldr	r0, [r7, #12]
 8007c88:	f000 fe68 	bl	800895c <xTaskCreate>
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	2b01      	cmp	r3, #1
 8007c90:	d001      	beq.n	8007c96 <osThreadNew+0x11a>
            hTask = NULL;
 8007c92:	2300      	movs	r3, #0
 8007c94:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007c96:	693b      	ldr	r3, [r7, #16]
}
 8007c98:	4618      	mov	r0, r3
 8007c9a:	3728      	adds	r7, #40	@ 0x28
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bd80      	pop	{r7, pc}

08007ca0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b084      	sub	sp, #16
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007ca8:	f3ef 8305 	mrs	r3, IPSR
 8007cac:	60bb      	str	r3, [r7, #8]
  return(result);
 8007cae:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d003      	beq.n	8007cbc <osDelay+0x1c>
    stat = osErrorISR;
 8007cb4:	f06f 0305 	mvn.w	r3, #5
 8007cb8:	60fb      	str	r3, [r7, #12]
 8007cba:	e007      	b.n	8007ccc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d002      	beq.n	8007ccc <osDelay+0x2c>
      vTaskDelay(ticks);
 8007cc6:	6878      	ldr	r0, [r7, #4]
 8007cc8:	f000 ff8e 	bl	8008be8 <vTaskDelay>
    }
  }

  return (stat);
 8007ccc:	68fb      	ldr	r3, [r7, #12]
}
 8007cce:	4618      	mov	r0, r3
 8007cd0:	3710      	adds	r7, #16
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bd80      	pop	{r7, pc}
	...

08007cd8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007cd8:	b480      	push	{r7}
 8007cda:	b085      	sub	sp, #20
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	60f8      	str	r0, [r7, #12]
 8007ce0:	60b9      	str	r1, [r7, #8]
 8007ce2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	4a07      	ldr	r2, [pc, #28]	@ (8007d04 <vApplicationGetIdleTaskMemory+0x2c>)
 8007ce8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007cea:	68bb      	ldr	r3, [r7, #8]
 8007cec:	4a06      	ldr	r2, [pc, #24]	@ (8007d08 <vApplicationGetIdleTaskMemory+0x30>)
 8007cee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2280      	movs	r2, #128	@ 0x80
 8007cf4:	601a      	str	r2, [r3, #0]
}
 8007cf6:	bf00      	nop
 8007cf8:	3714      	adds	r7, #20
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d00:	4770      	bx	lr
 8007d02:	bf00      	nop
 8007d04:	20008b10 	.word	0x20008b10
 8007d08:	20008b6c 	.word	0x20008b6c

08007d0c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007d0c:	b480      	push	{r7}
 8007d0e:	b085      	sub	sp, #20
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	60f8      	str	r0, [r7, #12]
 8007d14:	60b9      	str	r1, [r7, #8]
 8007d16:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	4a07      	ldr	r2, [pc, #28]	@ (8007d38 <vApplicationGetTimerTaskMemory+0x2c>)
 8007d1c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007d1e:	68bb      	ldr	r3, [r7, #8]
 8007d20:	4a06      	ldr	r2, [pc, #24]	@ (8007d3c <vApplicationGetTimerTaskMemory+0x30>)
 8007d22:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007d2a:	601a      	str	r2, [r3, #0]
}
 8007d2c:	bf00      	nop
 8007d2e:	3714      	adds	r7, #20
 8007d30:	46bd      	mov	sp, r7
 8007d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d36:	4770      	bx	lr
 8007d38:	20008d6c 	.word	0x20008d6c
 8007d3c:	20008dc8 	.word	0x20008dc8

08007d40 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007d40:	b480      	push	{r7}
 8007d42:	b083      	sub	sp, #12
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f103 0208 	add.w	r2, r3, #8
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007d58:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	f103 0208 	add.w	r2, r3, #8
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f103 0208 	add.w	r2, r3, #8
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2200      	movs	r2, #0
 8007d72:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007d74:	bf00      	nop
 8007d76:	370c      	adds	r7, #12
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7e:	4770      	bx	lr

08007d80 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007d80:	b480      	push	{r7}
 8007d82:	b083      	sub	sp, #12
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007d8e:	bf00      	nop
 8007d90:	370c      	adds	r7, #12
 8007d92:	46bd      	mov	sp, r7
 8007d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d98:	4770      	bx	lr

08007d9a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007d9a:	b480      	push	{r7}
 8007d9c:	b085      	sub	sp, #20
 8007d9e:	af00      	add	r7, sp, #0
 8007da0:	6078      	str	r0, [r7, #4]
 8007da2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	685b      	ldr	r3, [r3, #4]
 8007da8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	68fa      	ldr	r2, [r7, #12]
 8007dae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	689a      	ldr	r2, [r3, #8]
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	689b      	ldr	r3, [r3, #8]
 8007dbc:	683a      	ldr	r2, [r7, #0]
 8007dbe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	683a      	ldr	r2, [r7, #0]
 8007dc4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	687a      	ldr	r2, [r7, #4]
 8007dca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	1c5a      	adds	r2, r3, #1
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	601a      	str	r2, [r3, #0]
}
 8007dd6:	bf00      	nop
 8007dd8:	3714      	adds	r7, #20
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de0:	4770      	bx	lr

08007de2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007de2:	b480      	push	{r7}
 8007de4:	b085      	sub	sp, #20
 8007de6:	af00      	add	r7, sp, #0
 8007de8:	6078      	str	r0, [r7, #4]
 8007dea:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007df2:	68bb      	ldr	r3, [r7, #8]
 8007df4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007df8:	d103      	bne.n	8007e02 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	691b      	ldr	r3, [r3, #16]
 8007dfe:	60fb      	str	r3, [r7, #12]
 8007e00:	e00c      	b.n	8007e1c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	3308      	adds	r3, #8
 8007e06:	60fb      	str	r3, [r7, #12]
 8007e08:	e002      	b.n	8007e10 <vListInsert+0x2e>
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	685b      	ldr	r3, [r3, #4]
 8007e0e:	60fb      	str	r3, [r7, #12]
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	685b      	ldr	r3, [r3, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	68ba      	ldr	r2, [r7, #8]
 8007e18:	429a      	cmp	r2, r3
 8007e1a:	d2f6      	bcs.n	8007e0a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	685a      	ldr	r2, [r3, #4]
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	685b      	ldr	r3, [r3, #4]
 8007e28:	683a      	ldr	r2, [r7, #0]
 8007e2a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	68fa      	ldr	r2, [r7, #12]
 8007e30:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	683a      	ldr	r2, [r7, #0]
 8007e36:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	687a      	ldr	r2, [r7, #4]
 8007e3c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	1c5a      	adds	r2, r3, #1
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	601a      	str	r2, [r3, #0]
}
 8007e48:	bf00      	nop
 8007e4a:	3714      	adds	r7, #20
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e52:	4770      	bx	lr

08007e54 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007e54:	b480      	push	{r7}
 8007e56:	b085      	sub	sp, #20
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	691b      	ldr	r3, [r3, #16]
 8007e60:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	685b      	ldr	r3, [r3, #4]
 8007e66:	687a      	ldr	r2, [r7, #4]
 8007e68:	6892      	ldr	r2, [r2, #8]
 8007e6a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	689b      	ldr	r3, [r3, #8]
 8007e70:	687a      	ldr	r2, [r7, #4]
 8007e72:	6852      	ldr	r2, [r2, #4]
 8007e74:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	685b      	ldr	r3, [r3, #4]
 8007e7a:	687a      	ldr	r2, [r7, #4]
 8007e7c:	429a      	cmp	r2, r3
 8007e7e:	d103      	bne.n	8007e88 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	689a      	ldr	r2, [r3, #8]
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	1e5a      	subs	r2, r3, #1
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	681b      	ldr	r3, [r3, #0]
}
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	3714      	adds	r7, #20
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea6:	4770      	bx	lr

08007ea8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b084      	sub	sp, #16
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
 8007eb0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d10b      	bne.n	8007ed4 <xQueueGenericReset+0x2c>
	__asm volatile
 8007ebc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ec0:	f383 8811 	msr	BASEPRI, r3
 8007ec4:	f3bf 8f6f 	isb	sy
 8007ec8:	f3bf 8f4f 	dsb	sy
 8007ecc:	60bb      	str	r3, [r7, #8]
}
 8007ece:	bf00      	nop
 8007ed0:	bf00      	nop
 8007ed2:	e7fd      	b.n	8007ed0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007ed4:	f002 f8a0 	bl	800a018 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	681a      	ldr	r2, [r3, #0]
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ee0:	68f9      	ldr	r1, [r7, #12]
 8007ee2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007ee4:	fb01 f303 	mul.w	r3, r1, r3
 8007ee8:	441a      	add	r2, r3
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	681a      	ldr	r2, [r3, #0]
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	681a      	ldr	r2, [r3, #0]
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f04:	3b01      	subs	r3, #1
 8007f06:	68f9      	ldr	r1, [r7, #12]
 8007f08:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007f0a:	fb01 f303 	mul.w	r3, r1, r3
 8007f0e:	441a      	add	r2, r3
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	22ff      	movs	r2, #255	@ 0xff
 8007f18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	22ff      	movs	r2, #255	@ 0xff
 8007f20:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d114      	bne.n	8007f54 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	691b      	ldr	r3, [r3, #16]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d01a      	beq.n	8007f68 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	3310      	adds	r3, #16
 8007f36:	4618      	mov	r0, r3
 8007f38:	f001 f91a 	bl	8009170 <xTaskRemoveFromEventList>
 8007f3c:	4603      	mov	r3, r0
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d012      	beq.n	8007f68 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007f42:	4b0d      	ldr	r3, [pc, #52]	@ (8007f78 <xQueueGenericReset+0xd0>)
 8007f44:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f48:	601a      	str	r2, [r3, #0]
 8007f4a:	f3bf 8f4f 	dsb	sy
 8007f4e:	f3bf 8f6f 	isb	sy
 8007f52:	e009      	b.n	8007f68 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	3310      	adds	r3, #16
 8007f58:	4618      	mov	r0, r3
 8007f5a:	f7ff fef1 	bl	8007d40 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	3324      	adds	r3, #36	@ 0x24
 8007f62:	4618      	mov	r0, r3
 8007f64:	f7ff feec 	bl	8007d40 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007f68:	f002 f888 	bl	800a07c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007f6c:	2301      	movs	r3, #1
}
 8007f6e:	4618      	mov	r0, r3
 8007f70:	3710      	adds	r7, #16
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bd80      	pop	{r7, pc}
 8007f76:	bf00      	nop
 8007f78:	e000ed04 	.word	0xe000ed04

08007f7c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b08e      	sub	sp, #56	@ 0x38
 8007f80:	af02      	add	r7, sp, #8
 8007f82:	60f8      	str	r0, [r7, #12]
 8007f84:	60b9      	str	r1, [r7, #8]
 8007f86:	607a      	str	r2, [r7, #4]
 8007f88:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d10b      	bne.n	8007fa8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8007f90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f94:	f383 8811 	msr	BASEPRI, r3
 8007f98:	f3bf 8f6f 	isb	sy
 8007f9c:	f3bf 8f4f 	dsb	sy
 8007fa0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007fa2:	bf00      	nop
 8007fa4:	bf00      	nop
 8007fa6:	e7fd      	b.n	8007fa4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d10b      	bne.n	8007fc6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8007fae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fb2:	f383 8811 	msr	BASEPRI, r3
 8007fb6:	f3bf 8f6f 	isb	sy
 8007fba:	f3bf 8f4f 	dsb	sy
 8007fbe:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007fc0:	bf00      	nop
 8007fc2:	bf00      	nop
 8007fc4:	e7fd      	b.n	8007fc2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d002      	beq.n	8007fd2 <xQueueGenericCreateStatic+0x56>
 8007fcc:	68bb      	ldr	r3, [r7, #8]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d001      	beq.n	8007fd6 <xQueueGenericCreateStatic+0x5a>
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	e000      	b.n	8007fd8 <xQueueGenericCreateStatic+0x5c>
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d10b      	bne.n	8007ff4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8007fdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fe0:	f383 8811 	msr	BASEPRI, r3
 8007fe4:	f3bf 8f6f 	isb	sy
 8007fe8:	f3bf 8f4f 	dsb	sy
 8007fec:	623b      	str	r3, [r7, #32]
}
 8007fee:	bf00      	nop
 8007ff0:	bf00      	nop
 8007ff2:	e7fd      	b.n	8007ff0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d102      	bne.n	8008000 <xQueueGenericCreateStatic+0x84>
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d101      	bne.n	8008004 <xQueueGenericCreateStatic+0x88>
 8008000:	2301      	movs	r3, #1
 8008002:	e000      	b.n	8008006 <xQueueGenericCreateStatic+0x8a>
 8008004:	2300      	movs	r3, #0
 8008006:	2b00      	cmp	r3, #0
 8008008:	d10b      	bne.n	8008022 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800800a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800800e:	f383 8811 	msr	BASEPRI, r3
 8008012:	f3bf 8f6f 	isb	sy
 8008016:	f3bf 8f4f 	dsb	sy
 800801a:	61fb      	str	r3, [r7, #28]
}
 800801c:	bf00      	nop
 800801e:	bf00      	nop
 8008020:	e7fd      	b.n	800801e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008022:	2350      	movs	r3, #80	@ 0x50
 8008024:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008026:	697b      	ldr	r3, [r7, #20]
 8008028:	2b50      	cmp	r3, #80	@ 0x50
 800802a:	d00b      	beq.n	8008044 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800802c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008030:	f383 8811 	msr	BASEPRI, r3
 8008034:	f3bf 8f6f 	isb	sy
 8008038:	f3bf 8f4f 	dsb	sy
 800803c:	61bb      	str	r3, [r7, #24]
}
 800803e:	bf00      	nop
 8008040:	bf00      	nop
 8008042:	e7fd      	b.n	8008040 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008044:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800804a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800804c:	2b00      	cmp	r3, #0
 800804e:	d00d      	beq.n	800806c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008050:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008052:	2201      	movs	r2, #1
 8008054:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008058:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800805c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800805e:	9300      	str	r3, [sp, #0]
 8008060:	4613      	mov	r3, r2
 8008062:	687a      	ldr	r2, [r7, #4]
 8008064:	68b9      	ldr	r1, [r7, #8]
 8008066:	68f8      	ldr	r0, [r7, #12]
 8008068:	f000 f805 	bl	8008076 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800806c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800806e:	4618      	mov	r0, r3
 8008070:	3730      	adds	r7, #48	@ 0x30
 8008072:	46bd      	mov	sp, r7
 8008074:	bd80      	pop	{r7, pc}

08008076 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008076:	b580      	push	{r7, lr}
 8008078:	b084      	sub	sp, #16
 800807a:	af00      	add	r7, sp, #0
 800807c:	60f8      	str	r0, [r7, #12]
 800807e:	60b9      	str	r1, [r7, #8]
 8008080:	607a      	str	r2, [r7, #4]
 8008082:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008084:	68bb      	ldr	r3, [r7, #8]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d103      	bne.n	8008092 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800808a:	69bb      	ldr	r3, [r7, #24]
 800808c:	69ba      	ldr	r2, [r7, #24]
 800808e:	601a      	str	r2, [r3, #0]
 8008090:	e002      	b.n	8008098 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008092:	69bb      	ldr	r3, [r7, #24]
 8008094:	687a      	ldr	r2, [r7, #4]
 8008096:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008098:	69bb      	ldr	r3, [r7, #24]
 800809a:	68fa      	ldr	r2, [r7, #12]
 800809c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800809e:	69bb      	ldr	r3, [r7, #24]
 80080a0:	68ba      	ldr	r2, [r7, #8]
 80080a2:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80080a4:	2101      	movs	r1, #1
 80080a6:	69b8      	ldr	r0, [r7, #24]
 80080a8:	f7ff fefe 	bl	8007ea8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80080ac:	69bb      	ldr	r3, [r7, #24]
 80080ae:	78fa      	ldrb	r2, [r7, #3]
 80080b0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80080b4:	bf00      	nop
 80080b6:	3710      	adds	r7, #16
 80080b8:	46bd      	mov	sp, r7
 80080ba:	bd80      	pop	{r7, pc}

080080bc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b08e      	sub	sp, #56	@ 0x38
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	60f8      	str	r0, [r7, #12]
 80080c4:	60b9      	str	r1, [r7, #8]
 80080c6:	607a      	str	r2, [r7, #4]
 80080c8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80080ca:	2300      	movs	r3, #0
 80080cc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80080d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d10b      	bne.n	80080f0 <xQueueGenericSend+0x34>
	__asm volatile
 80080d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080dc:	f383 8811 	msr	BASEPRI, r3
 80080e0:	f3bf 8f6f 	isb	sy
 80080e4:	f3bf 8f4f 	dsb	sy
 80080e8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80080ea:	bf00      	nop
 80080ec:	bf00      	nop
 80080ee:	e7fd      	b.n	80080ec <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d103      	bne.n	80080fe <xQueueGenericSend+0x42>
 80080f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d101      	bne.n	8008102 <xQueueGenericSend+0x46>
 80080fe:	2301      	movs	r3, #1
 8008100:	e000      	b.n	8008104 <xQueueGenericSend+0x48>
 8008102:	2300      	movs	r3, #0
 8008104:	2b00      	cmp	r3, #0
 8008106:	d10b      	bne.n	8008120 <xQueueGenericSend+0x64>
	__asm volatile
 8008108:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800810c:	f383 8811 	msr	BASEPRI, r3
 8008110:	f3bf 8f6f 	isb	sy
 8008114:	f3bf 8f4f 	dsb	sy
 8008118:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800811a:	bf00      	nop
 800811c:	bf00      	nop
 800811e:	e7fd      	b.n	800811c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	2b02      	cmp	r3, #2
 8008124:	d103      	bne.n	800812e <xQueueGenericSend+0x72>
 8008126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008128:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800812a:	2b01      	cmp	r3, #1
 800812c:	d101      	bne.n	8008132 <xQueueGenericSend+0x76>
 800812e:	2301      	movs	r3, #1
 8008130:	e000      	b.n	8008134 <xQueueGenericSend+0x78>
 8008132:	2300      	movs	r3, #0
 8008134:	2b00      	cmp	r3, #0
 8008136:	d10b      	bne.n	8008150 <xQueueGenericSend+0x94>
	__asm volatile
 8008138:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800813c:	f383 8811 	msr	BASEPRI, r3
 8008140:	f3bf 8f6f 	isb	sy
 8008144:	f3bf 8f4f 	dsb	sy
 8008148:	623b      	str	r3, [r7, #32]
}
 800814a:	bf00      	nop
 800814c:	bf00      	nop
 800814e:	e7fd      	b.n	800814c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008150:	f001 f9f6 	bl	8009540 <xTaskGetSchedulerState>
 8008154:	4603      	mov	r3, r0
 8008156:	2b00      	cmp	r3, #0
 8008158:	d102      	bne.n	8008160 <xQueueGenericSend+0xa4>
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d101      	bne.n	8008164 <xQueueGenericSend+0xa8>
 8008160:	2301      	movs	r3, #1
 8008162:	e000      	b.n	8008166 <xQueueGenericSend+0xaa>
 8008164:	2300      	movs	r3, #0
 8008166:	2b00      	cmp	r3, #0
 8008168:	d10b      	bne.n	8008182 <xQueueGenericSend+0xc6>
	__asm volatile
 800816a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800816e:	f383 8811 	msr	BASEPRI, r3
 8008172:	f3bf 8f6f 	isb	sy
 8008176:	f3bf 8f4f 	dsb	sy
 800817a:	61fb      	str	r3, [r7, #28]
}
 800817c:	bf00      	nop
 800817e:	bf00      	nop
 8008180:	e7fd      	b.n	800817e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008182:	f001 ff49 	bl	800a018 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008188:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800818a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800818c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800818e:	429a      	cmp	r2, r3
 8008190:	d302      	bcc.n	8008198 <xQueueGenericSend+0xdc>
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	2b02      	cmp	r3, #2
 8008196:	d129      	bne.n	80081ec <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008198:	683a      	ldr	r2, [r7, #0]
 800819a:	68b9      	ldr	r1, [r7, #8]
 800819c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800819e:	f000 fa0f 	bl	80085c0 <prvCopyDataToQueue>
 80081a2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80081a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d010      	beq.n	80081ce <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80081ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081ae:	3324      	adds	r3, #36	@ 0x24
 80081b0:	4618      	mov	r0, r3
 80081b2:	f000 ffdd 	bl	8009170 <xTaskRemoveFromEventList>
 80081b6:	4603      	mov	r3, r0
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d013      	beq.n	80081e4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80081bc:	4b3f      	ldr	r3, [pc, #252]	@ (80082bc <xQueueGenericSend+0x200>)
 80081be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80081c2:	601a      	str	r2, [r3, #0]
 80081c4:	f3bf 8f4f 	dsb	sy
 80081c8:	f3bf 8f6f 	isb	sy
 80081cc:	e00a      	b.n	80081e4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80081ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d007      	beq.n	80081e4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80081d4:	4b39      	ldr	r3, [pc, #228]	@ (80082bc <xQueueGenericSend+0x200>)
 80081d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80081da:	601a      	str	r2, [r3, #0]
 80081dc:	f3bf 8f4f 	dsb	sy
 80081e0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80081e4:	f001 ff4a 	bl	800a07c <vPortExitCritical>
				return pdPASS;
 80081e8:	2301      	movs	r3, #1
 80081ea:	e063      	b.n	80082b4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d103      	bne.n	80081fa <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80081f2:	f001 ff43 	bl	800a07c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80081f6:	2300      	movs	r3, #0
 80081f8:	e05c      	b.n	80082b4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80081fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d106      	bne.n	800820e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008200:	f107 0314 	add.w	r3, r7, #20
 8008204:	4618      	mov	r0, r3
 8008206:	f001 f83f 	bl	8009288 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800820a:	2301      	movs	r3, #1
 800820c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800820e:	f001 ff35 	bl	800a07c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008212:	f000 fd87 	bl	8008d24 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008216:	f001 feff 	bl	800a018 <vPortEnterCritical>
 800821a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800821c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008220:	b25b      	sxtb	r3, r3
 8008222:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008226:	d103      	bne.n	8008230 <xQueueGenericSend+0x174>
 8008228:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800822a:	2200      	movs	r2, #0
 800822c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008230:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008232:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008236:	b25b      	sxtb	r3, r3
 8008238:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800823c:	d103      	bne.n	8008246 <xQueueGenericSend+0x18a>
 800823e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008240:	2200      	movs	r2, #0
 8008242:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008246:	f001 ff19 	bl	800a07c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800824a:	1d3a      	adds	r2, r7, #4
 800824c:	f107 0314 	add.w	r3, r7, #20
 8008250:	4611      	mov	r1, r2
 8008252:	4618      	mov	r0, r3
 8008254:	f001 f82e 	bl	80092b4 <xTaskCheckForTimeOut>
 8008258:	4603      	mov	r3, r0
 800825a:	2b00      	cmp	r3, #0
 800825c:	d124      	bne.n	80082a8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800825e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008260:	f000 faa6 	bl	80087b0 <prvIsQueueFull>
 8008264:	4603      	mov	r3, r0
 8008266:	2b00      	cmp	r3, #0
 8008268:	d018      	beq.n	800829c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800826a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800826c:	3310      	adds	r3, #16
 800826e:	687a      	ldr	r2, [r7, #4]
 8008270:	4611      	mov	r1, r2
 8008272:	4618      	mov	r0, r3
 8008274:	f000 ff2a 	bl	80090cc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008278:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800827a:	f000 fa31 	bl	80086e0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800827e:	f000 fd5f 	bl	8008d40 <xTaskResumeAll>
 8008282:	4603      	mov	r3, r0
 8008284:	2b00      	cmp	r3, #0
 8008286:	f47f af7c 	bne.w	8008182 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800828a:	4b0c      	ldr	r3, [pc, #48]	@ (80082bc <xQueueGenericSend+0x200>)
 800828c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008290:	601a      	str	r2, [r3, #0]
 8008292:	f3bf 8f4f 	dsb	sy
 8008296:	f3bf 8f6f 	isb	sy
 800829a:	e772      	b.n	8008182 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800829c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800829e:	f000 fa1f 	bl	80086e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80082a2:	f000 fd4d 	bl	8008d40 <xTaskResumeAll>
 80082a6:	e76c      	b.n	8008182 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80082a8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80082aa:	f000 fa19 	bl	80086e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80082ae:	f000 fd47 	bl	8008d40 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80082b2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80082b4:	4618      	mov	r0, r3
 80082b6:	3738      	adds	r7, #56	@ 0x38
 80082b8:	46bd      	mov	sp, r7
 80082ba:	bd80      	pop	{r7, pc}
 80082bc:	e000ed04 	.word	0xe000ed04

080082c0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b090      	sub	sp, #64	@ 0x40
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	60f8      	str	r0, [r7, #12]
 80082c8:	60b9      	str	r1, [r7, #8]
 80082ca:	607a      	str	r2, [r7, #4]
 80082cc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80082d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d10b      	bne.n	80082f0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80082d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082dc:	f383 8811 	msr	BASEPRI, r3
 80082e0:	f3bf 8f6f 	isb	sy
 80082e4:	f3bf 8f4f 	dsb	sy
 80082e8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80082ea:	bf00      	nop
 80082ec:	bf00      	nop
 80082ee:	e7fd      	b.n	80082ec <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80082f0:	68bb      	ldr	r3, [r7, #8]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d103      	bne.n	80082fe <xQueueGenericSendFromISR+0x3e>
 80082f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d101      	bne.n	8008302 <xQueueGenericSendFromISR+0x42>
 80082fe:	2301      	movs	r3, #1
 8008300:	e000      	b.n	8008304 <xQueueGenericSendFromISR+0x44>
 8008302:	2300      	movs	r3, #0
 8008304:	2b00      	cmp	r3, #0
 8008306:	d10b      	bne.n	8008320 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8008308:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800830c:	f383 8811 	msr	BASEPRI, r3
 8008310:	f3bf 8f6f 	isb	sy
 8008314:	f3bf 8f4f 	dsb	sy
 8008318:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800831a:	bf00      	nop
 800831c:	bf00      	nop
 800831e:	e7fd      	b.n	800831c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	2b02      	cmp	r3, #2
 8008324:	d103      	bne.n	800832e <xQueueGenericSendFromISR+0x6e>
 8008326:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008328:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800832a:	2b01      	cmp	r3, #1
 800832c:	d101      	bne.n	8008332 <xQueueGenericSendFromISR+0x72>
 800832e:	2301      	movs	r3, #1
 8008330:	e000      	b.n	8008334 <xQueueGenericSendFromISR+0x74>
 8008332:	2300      	movs	r3, #0
 8008334:	2b00      	cmp	r3, #0
 8008336:	d10b      	bne.n	8008350 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8008338:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800833c:	f383 8811 	msr	BASEPRI, r3
 8008340:	f3bf 8f6f 	isb	sy
 8008344:	f3bf 8f4f 	dsb	sy
 8008348:	623b      	str	r3, [r7, #32]
}
 800834a:	bf00      	nop
 800834c:	bf00      	nop
 800834e:	e7fd      	b.n	800834c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008350:	f001 ff42 	bl	800a1d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008354:	f3ef 8211 	mrs	r2, BASEPRI
 8008358:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800835c:	f383 8811 	msr	BASEPRI, r3
 8008360:	f3bf 8f6f 	isb	sy
 8008364:	f3bf 8f4f 	dsb	sy
 8008368:	61fa      	str	r2, [r7, #28]
 800836a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800836c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800836e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008370:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008372:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008374:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008376:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008378:	429a      	cmp	r2, r3
 800837a:	d302      	bcc.n	8008382 <xQueueGenericSendFromISR+0xc2>
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	2b02      	cmp	r3, #2
 8008380:	d12f      	bne.n	80083e2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008382:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008384:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008388:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800838c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800838e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008390:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008392:	683a      	ldr	r2, [r7, #0]
 8008394:	68b9      	ldr	r1, [r7, #8]
 8008396:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008398:	f000 f912 	bl	80085c0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800839c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80083a0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80083a4:	d112      	bne.n	80083cc <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80083a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d016      	beq.n	80083dc <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80083ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083b0:	3324      	adds	r3, #36	@ 0x24
 80083b2:	4618      	mov	r0, r3
 80083b4:	f000 fedc 	bl	8009170 <xTaskRemoveFromEventList>
 80083b8:	4603      	mov	r3, r0
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d00e      	beq.n	80083dc <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d00b      	beq.n	80083dc <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2201      	movs	r2, #1
 80083c8:	601a      	str	r2, [r3, #0]
 80083ca:	e007      	b.n	80083dc <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80083cc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80083d0:	3301      	adds	r3, #1
 80083d2:	b2db      	uxtb	r3, r3
 80083d4:	b25a      	sxtb	r2, r3
 80083d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80083dc:	2301      	movs	r3, #1
 80083de:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80083e0:	e001      	b.n	80083e6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80083e2:	2300      	movs	r3, #0
 80083e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80083e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083e8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80083ea:	697b      	ldr	r3, [r7, #20]
 80083ec:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80083f0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80083f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80083f4:	4618      	mov	r0, r3
 80083f6:	3740      	adds	r7, #64	@ 0x40
 80083f8:	46bd      	mov	sp, r7
 80083fa:	bd80      	pop	{r7, pc}

080083fc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b08c      	sub	sp, #48	@ 0x30
 8008400:	af00      	add	r7, sp, #0
 8008402:	60f8      	str	r0, [r7, #12]
 8008404:	60b9      	str	r1, [r7, #8]
 8008406:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008408:	2300      	movs	r3, #0
 800840a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008410:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008412:	2b00      	cmp	r3, #0
 8008414:	d10b      	bne.n	800842e <xQueueReceive+0x32>
	__asm volatile
 8008416:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800841a:	f383 8811 	msr	BASEPRI, r3
 800841e:	f3bf 8f6f 	isb	sy
 8008422:	f3bf 8f4f 	dsb	sy
 8008426:	623b      	str	r3, [r7, #32]
}
 8008428:	bf00      	nop
 800842a:	bf00      	nop
 800842c:	e7fd      	b.n	800842a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800842e:	68bb      	ldr	r3, [r7, #8]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d103      	bne.n	800843c <xQueueReceive+0x40>
 8008434:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008436:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008438:	2b00      	cmp	r3, #0
 800843a:	d101      	bne.n	8008440 <xQueueReceive+0x44>
 800843c:	2301      	movs	r3, #1
 800843e:	e000      	b.n	8008442 <xQueueReceive+0x46>
 8008440:	2300      	movs	r3, #0
 8008442:	2b00      	cmp	r3, #0
 8008444:	d10b      	bne.n	800845e <xQueueReceive+0x62>
	__asm volatile
 8008446:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800844a:	f383 8811 	msr	BASEPRI, r3
 800844e:	f3bf 8f6f 	isb	sy
 8008452:	f3bf 8f4f 	dsb	sy
 8008456:	61fb      	str	r3, [r7, #28]
}
 8008458:	bf00      	nop
 800845a:	bf00      	nop
 800845c:	e7fd      	b.n	800845a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800845e:	f001 f86f 	bl	8009540 <xTaskGetSchedulerState>
 8008462:	4603      	mov	r3, r0
 8008464:	2b00      	cmp	r3, #0
 8008466:	d102      	bne.n	800846e <xQueueReceive+0x72>
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d101      	bne.n	8008472 <xQueueReceive+0x76>
 800846e:	2301      	movs	r3, #1
 8008470:	e000      	b.n	8008474 <xQueueReceive+0x78>
 8008472:	2300      	movs	r3, #0
 8008474:	2b00      	cmp	r3, #0
 8008476:	d10b      	bne.n	8008490 <xQueueReceive+0x94>
	__asm volatile
 8008478:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800847c:	f383 8811 	msr	BASEPRI, r3
 8008480:	f3bf 8f6f 	isb	sy
 8008484:	f3bf 8f4f 	dsb	sy
 8008488:	61bb      	str	r3, [r7, #24]
}
 800848a:	bf00      	nop
 800848c:	bf00      	nop
 800848e:	e7fd      	b.n	800848c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008490:	f001 fdc2 	bl	800a018 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008494:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008496:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008498:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800849a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800849c:	2b00      	cmp	r3, #0
 800849e:	d01f      	beq.n	80084e0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80084a0:	68b9      	ldr	r1, [r7, #8]
 80084a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80084a4:	f000 f8f6 	bl	8008694 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80084a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084aa:	1e5a      	subs	r2, r3, #1
 80084ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084ae:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80084b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084b2:	691b      	ldr	r3, [r3, #16]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d00f      	beq.n	80084d8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80084b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084ba:	3310      	adds	r3, #16
 80084bc:	4618      	mov	r0, r3
 80084be:	f000 fe57 	bl	8009170 <xTaskRemoveFromEventList>
 80084c2:	4603      	mov	r3, r0
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d007      	beq.n	80084d8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80084c8:	4b3c      	ldr	r3, [pc, #240]	@ (80085bc <xQueueReceive+0x1c0>)
 80084ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80084ce:	601a      	str	r2, [r3, #0]
 80084d0:	f3bf 8f4f 	dsb	sy
 80084d4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80084d8:	f001 fdd0 	bl	800a07c <vPortExitCritical>
				return pdPASS;
 80084dc:	2301      	movs	r3, #1
 80084de:	e069      	b.n	80085b4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d103      	bne.n	80084ee <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80084e6:	f001 fdc9 	bl	800a07c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80084ea:	2300      	movs	r3, #0
 80084ec:	e062      	b.n	80085b4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80084ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d106      	bne.n	8008502 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80084f4:	f107 0310 	add.w	r3, r7, #16
 80084f8:	4618      	mov	r0, r3
 80084fa:	f000 fec5 	bl	8009288 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80084fe:	2301      	movs	r3, #1
 8008500:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008502:	f001 fdbb 	bl	800a07c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008506:	f000 fc0d 	bl	8008d24 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800850a:	f001 fd85 	bl	800a018 <vPortEnterCritical>
 800850e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008510:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008514:	b25b      	sxtb	r3, r3
 8008516:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800851a:	d103      	bne.n	8008524 <xQueueReceive+0x128>
 800851c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800851e:	2200      	movs	r2, #0
 8008520:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008524:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008526:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800852a:	b25b      	sxtb	r3, r3
 800852c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008530:	d103      	bne.n	800853a <xQueueReceive+0x13e>
 8008532:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008534:	2200      	movs	r2, #0
 8008536:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800853a:	f001 fd9f 	bl	800a07c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800853e:	1d3a      	adds	r2, r7, #4
 8008540:	f107 0310 	add.w	r3, r7, #16
 8008544:	4611      	mov	r1, r2
 8008546:	4618      	mov	r0, r3
 8008548:	f000 feb4 	bl	80092b4 <xTaskCheckForTimeOut>
 800854c:	4603      	mov	r3, r0
 800854e:	2b00      	cmp	r3, #0
 8008550:	d123      	bne.n	800859a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008552:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008554:	f000 f916 	bl	8008784 <prvIsQueueEmpty>
 8008558:	4603      	mov	r3, r0
 800855a:	2b00      	cmp	r3, #0
 800855c:	d017      	beq.n	800858e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800855e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008560:	3324      	adds	r3, #36	@ 0x24
 8008562:	687a      	ldr	r2, [r7, #4]
 8008564:	4611      	mov	r1, r2
 8008566:	4618      	mov	r0, r3
 8008568:	f000 fdb0 	bl	80090cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800856c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800856e:	f000 f8b7 	bl	80086e0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008572:	f000 fbe5 	bl	8008d40 <xTaskResumeAll>
 8008576:	4603      	mov	r3, r0
 8008578:	2b00      	cmp	r3, #0
 800857a:	d189      	bne.n	8008490 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800857c:	4b0f      	ldr	r3, [pc, #60]	@ (80085bc <xQueueReceive+0x1c0>)
 800857e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008582:	601a      	str	r2, [r3, #0]
 8008584:	f3bf 8f4f 	dsb	sy
 8008588:	f3bf 8f6f 	isb	sy
 800858c:	e780      	b.n	8008490 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800858e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008590:	f000 f8a6 	bl	80086e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008594:	f000 fbd4 	bl	8008d40 <xTaskResumeAll>
 8008598:	e77a      	b.n	8008490 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800859a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800859c:	f000 f8a0 	bl	80086e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80085a0:	f000 fbce 	bl	8008d40 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80085a4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80085a6:	f000 f8ed 	bl	8008784 <prvIsQueueEmpty>
 80085aa:	4603      	mov	r3, r0
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	f43f af6f 	beq.w	8008490 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80085b2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80085b4:	4618      	mov	r0, r3
 80085b6:	3730      	adds	r7, #48	@ 0x30
 80085b8:	46bd      	mov	sp, r7
 80085ba:	bd80      	pop	{r7, pc}
 80085bc:	e000ed04 	.word	0xe000ed04

080085c0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b086      	sub	sp, #24
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	60f8      	str	r0, [r7, #12]
 80085c8:	60b9      	str	r1, [r7, #8]
 80085ca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80085cc:	2300      	movs	r3, #0
 80085ce:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085d4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d10d      	bne.n	80085fa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d14d      	bne.n	8008682 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	689b      	ldr	r3, [r3, #8]
 80085ea:	4618      	mov	r0, r3
 80085ec:	f000 ffc6 	bl	800957c <xTaskPriorityDisinherit>
 80085f0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	2200      	movs	r2, #0
 80085f6:	609a      	str	r2, [r3, #8]
 80085f8:	e043      	b.n	8008682 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d119      	bne.n	8008634 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	6858      	ldr	r0, [r3, #4]
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008608:	461a      	mov	r2, r3
 800860a:	68b9      	ldr	r1, [r7, #8]
 800860c:	f012 ff4b 	bl	801b4a6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	685a      	ldr	r2, [r3, #4]
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008618:	441a      	add	r2, r3
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	685a      	ldr	r2, [r3, #4]
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	689b      	ldr	r3, [r3, #8]
 8008626:	429a      	cmp	r2, r3
 8008628:	d32b      	bcc.n	8008682 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	681a      	ldr	r2, [r3, #0]
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	605a      	str	r2, [r3, #4]
 8008632:	e026      	b.n	8008682 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	68d8      	ldr	r0, [r3, #12]
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800863c:	461a      	mov	r2, r3
 800863e:	68b9      	ldr	r1, [r7, #8]
 8008640:	f012 ff31 	bl	801b4a6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	68da      	ldr	r2, [r3, #12]
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800864c:	425b      	negs	r3, r3
 800864e:	441a      	add	r2, r3
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	68da      	ldr	r2, [r3, #12]
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	429a      	cmp	r2, r3
 800865e:	d207      	bcs.n	8008670 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	689a      	ldr	r2, [r3, #8]
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008668:	425b      	negs	r3, r3
 800866a:	441a      	add	r2, r3
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2b02      	cmp	r3, #2
 8008674:	d105      	bne.n	8008682 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008676:	693b      	ldr	r3, [r7, #16]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d002      	beq.n	8008682 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800867c:	693b      	ldr	r3, [r7, #16]
 800867e:	3b01      	subs	r3, #1
 8008680:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008682:	693b      	ldr	r3, [r7, #16]
 8008684:	1c5a      	adds	r2, r3, #1
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800868a:	697b      	ldr	r3, [r7, #20]
}
 800868c:	4618      	mov	r0, r3
 800868e:	3718      	adds	r7, #24
 8008690:	46bd      	mov	sp, r7
 8008692:	bd80      	pop	{r7, pc}

08008694 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b082      	sub	sp, #8
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
 800869c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d018      	beq.n	80086d8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	68da      	ldr	r2, [r3, #12]
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086ae:	441a      	add	r2, r3
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	68da      	ldr	r2, [r3, #12]
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	689b      	ldr	r3, [r3, #8]
 80086bc:	429a      	cmp	r2, r3
 80086be:	d303      	bcc.n	80086c8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681a      	ldr	r2, [r3, #0]
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	68d9      	ldr	r1, [r3, #12]
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086d0:	461a      	mov	r2, r3
 80086d2:	6838      	ldr	r0, [r7, #0]
 80086d4:	f012 fee7 	bl	801b4a6 <memcpy>
	}
}
 80086d8:	bf00      	nop
 80086da:	3708      	adds	r7, #8
 80086dc:	46bd      	mov	sp, r7
 80086de:	bd80      	pop	{r7, pc}

080086e0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b084      	sub	sp, #16
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80086e8:	f001 fc96 	bl	800a018 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80086f2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80086f4:	e011      	b.n	800871a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d012      	beq.n	8008724 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	3324      	adds	r3, #36	@ 0x24
 8008702:	4618      	mov	r0, r3
 8008704:	f000 fd34 	bl	8009170 <xTaskRemoveFromEventList>
 8008708:	4603      	mov	r3, r0
 800870a:	2b00      	cmp	r3, #0
 800870c:	d001      	beq.n	8008712 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800870e:	f000 fe35 	bl	800937c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008712:	7bfb      	ldrb	r3, [r7, #15]
 8008714:	3b01      	subs	r3, #1
 8008716:	b2db      	uxtb	r3, r3
 8008718:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800871a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800871e:	2b00      	cmp	r3, #0
 8008720:	dce9      	bgt.n	80086f6 <prvUnlockQueue+0x16>
 8008722:	e000      	b.n	8008726 <prvUnlockQueue+0x46>
					break;
 8008724:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	22ff      	movs	r2, #255	@ 0xff
 800872a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800872e:	f001 fca5 	bl	800a07c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008732:	f001 fc71 	bl	800a018 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800873c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800873e:	e011      	b.n	8008764 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	691b      	ldr	r3, [r3, #16]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d012      	beq.n	800876e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	3310      	adds	r3, #16
 800874c:	4618      	mov	r0, r3
 800874e:	f000 fd0f 	bl	8009170 <xTaskRemoveFromEventList>
 8008752:	4603      	mov	r3, r0
 8008754:	2b00      	cmp	r3, #0
 8008756:	d001      	beq.n	800875c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008758:	f000 fe10 	bl	800937c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800875c:	7bbb      	ldrb	r3, [r7, #14]
 800875e:	3b01      	subs	r3, #1
 8008760:	b2db      	uxtb	r3, r3
 8008762:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008764:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008768:	2b00      	cmp	r3, #0
 800876a:	dce9      	bgt.n	8008740 <prvUnlockQueue+0x60>
 800876c:	e000      	b.n	8008770 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800876e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	22ff      	movs	r2, #255	@ 0xff
 8008774:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008778:	f001 fc80 	bl	800a07c <vPortExitCritical>
}
 800877c:	bf00      	nop
 800877e:	3710      	adds	r7, #16
 8008780:	46bd      	mov	sp, r7
 8008782:	bd80      	pop	{r7, pc}

08008784 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b084      	sub	sp, #16
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800878c:	f001 fc44 	bl	800a018 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008794:	2b00      	cmp	r3, #0
 8008796:	d102      	bne.n	800879e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008798:	2301      	movs	r3, #1
 800879a:	60fb      	str	r3, [r7, #12]
 800879c:	e001      	b.n	80087a2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800879e:	2300      	movs	r3, #0
 80087a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80087a2:	f001 fc6b 	bl	800a07c <vPortExitCritical>

	return xReturn;
 80087a6:	68fb      	ldr	r3, [r7, #12]
}
 80087a8:	4618      	mov	r0, r3
 80087aa:	3710      	adds	r7, #16
 80087ac:	46bd      	mov	sp, r7
 80087ae:	bd80      	pop	{r7, pc}

080087b0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b084      	sub	sp, #16
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80087b8:	f001 fc2e 	bl	800a018 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087c4:	429a      	cmp	r2, r3
 80087c6:	d102      	bne.n	80087ce <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80087c8:	2301      	movs	r3, #1
 80087ca:	60fb      	str	r3, [r7, #12]
 80087cc:	e001      	b.n	80087d2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80087ce:	2300      	movs	r3, #0
 80087d0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80087d2:	f001 fc53 	bl	800a07c <vPortExitCritical>

	return xReturn;
 80087d6:	68fb      	ldr	r3, [r7, #12]
}
 80087d8:	4618      	mov	r0, r3
 80087da:	3710      	adds	r7, #16
 80087dc:	46bd      	mov	sp, r7
 80087de:	bd80      	pop	{r7, pc}

080087e0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80087e0:	b480      	push	{r7}
 80087e2:	b085      	sub	sp, #20
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
 80087e8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80087ea:	2300      	movs	r3, #0
 80087ec:	60fb      	str	r3, [r7, #12]
 80087ee:	e014      	b.n	800881a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80087f0:	4a0f      	ldr	r2, [pc, #60]	@ (8008830 <vQueueAddToRegistry+0x50>)
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d10b      	bne.n	8008814 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80087fc:	490c      	ldr	r1, [pc, #48]	@ (8008830 <vQueueAddToRegistry+0x50>)
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	683a      	ldr	r2, [r7, #0]
 8008802:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008806:	4a0a      	ldr	r2, [pc, #40]	@ (8008830 <vQueueAddToRegistry+0x50>)
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	00db      	lsls	r3, r3, #3
 800880c:	4413      	add	r3, r2
 800880e:	687a      	ldr	r2, [r7, #4]
 8008810:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008812:	e006      	b.n	8008822 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	3301      	adds	r3, #1
 8008818:	60fb      	str	r3, [r7, #12]
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	2b07      	cmp	r3, #7
 800881e:	d9e7      	bls.n	80087f0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008820:	bf00      	nop
 8008822:	bf00      	nop
 8008824:	3714      	adds	r7, #20
 8008826:	46bd      	mov	sp, r7
 8008828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882c:	4770      	bx	lr
 800882e:	bf00      	nop
 8008830:	200091c8 	.word	0x200091c8

08008834 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008834:	b580      	push	{r7, lr}
 8008836:	b086      	sub	sp, #24
 8008838:	af00      	add	r7, sp, #0
 800883a:	60f8      	str	r0, [r7, #12]
 800883c:	60b9      	str	r1, [r7, #8]
 800883e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008844:	f001 fbe8 	bl	800a018 <vPortEnterCritical>
 8008848:	697b      	ldr	r3, [r7, #20]
 800884a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800884e:	b25b      	sxtb	r3, r3
 8008850:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008854:	d103      	bne.n	800885e <vQueueWaitForMessageRestricted+0x2a>
 8008856:	697b      	ldr	r3, [r7, #20]
 8008858:	2200      	movs	r2, #0
 800885a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800885e:	697b      	ldr	r3, [r7, #20]
 8008860:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008864:	b25b      	sxtb	r3, r3
 8008866:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800886a:	d103      	bne.n	8008874 <vQueueWaitForMessageRestricted+0x40>
 800886c:	697b      	ldr	r3, [r7, #20]
 800886e:	2200      	movs	r2, #0
 8008870:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008874:	f001 fc02 	bl	800a07c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008878:	697b      	ldr	r3, [r7, #20]
 800887a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800887c:	2b00      	cmp	r3, #0
 800887e:	d106      	bne.n	800888e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008880:	697b      	ldr	r3, [r7, #20]
 8008882:	3324      	adds	r3, #36	@ 0x24
 8008884:	687a      	ldr	r2, [r7, #4]
 8008886:	68b9      	ldr	r1, [r7, #8]
 8008888:	4618      	mov	r0, r3
 800888a:	f000 fc45 	bl	8009118 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800888e:	6978      	ldr	r0, [r7, #20]
 8008890:	f7ff ff26 	bl	80086e0 <prvUnlockQueue>
	}
 8008894:	bf00      	nop
 8008896:	3718      	adds	r7, #24
 8008898:	46bd      	mov	sp, r7
 800889a:	bd80      	pop	{r7, pc}

0800889c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800889c:	b580      	push	{r7, lr}
 800889e:	b08e      	sub	sp, #56	@ 0x38
 80088a0:	af04      	add	r7, sp, #16
 80088a2:	60f8      	str	r0, [r7, #12]
 80088a4:	60b9      	str	r1, [r7, #8]
 80088a6:	607a      	str	r2, [r7, #4]
 80088a8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80088aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d10b      	bne.n	80088c8 <xTaskCreateStatic+0x2c>
	__asm volatile
 80088b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088b4:	f383 8811 	msr	BASEPRI, r3
 80088b8:	f3bf 8f6f 	isb	sy
 80088bc:	f3bf 8f4f 	dsb	sy
 80088c0:	623b      	str	r3, [r7, #32]
}
 80088c2:	bf00      	nop
 80088c4:	bf00      	nop
 80088c6:	e7fd      	b.n	80088c4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80088c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d10b      	bne.n	80088e6 <xTaskCreateStatic+0x4a>
	__asm volatile
 80088ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088d2:	f383 8811 	msr	BASEPRI, r3
 80088d6:	f3bf 8f6f 	isb	sy
 80088da:	f3bf 8f4f 	dsb	sy
 80088de:	61fb      	str	r3, [r7, #28]
}
 80088e0:	bf00      	nop
 80088e2:	bf00      	nop
 80088e4:	e7fd      	b.n	80088e2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80088e6:	235c      	movs	r3, #92	@ 0x5c
 80088e8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80088ea:	693b      	ldr	r3, [r7, #16]
 80088ec:	2b5c      	cmp	r3, #92	@ 0x5c
 80088ee:	d00b      	beq.n	8008908 <xTaskCreateStatic+0x6c>
	__asm volatile
 80088f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088f4:	f383 8811 	msr	BASEPRI, r3
 80088f8:	f3bf 8f6f 	isb	sy
 80088fc:	f3bf 8f4f 	dsb	sy
 8008900:	61bb      	str	r3, [r7, #24]
}
 8008902:	bf00      	nop
 8008904:	bf00      	nop
 8008906:	e7fd      	b.n	8008904 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008908:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800890a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800890c:	2b00      	cmp	r3, #0
 800890e:	d01e      	beq.n	800894e <xTaskCreateStatic+0xb2>
 8008910:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008912:	2b00      	cmp	r3, #0
 8008914:	d01b      	beq.n	800894e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008916:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008918:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800891a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800891c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800891e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008922:	2202      	movs	r2, #2
 8008924:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008928:	2300      	movs	r3, #0
 800892a:	9303      	str	r3, [sp, #12]
 800892c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800892e:	9302      	str	r3, [sp, #8]
 8008930:	f107 0314 	add.w	r3, r7, #20
 8008934:	9301      	str	r3, [sp, #4]
 8008936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008938:	9300      	str	r3, [sp, #0]
 800893a:	683b      	ldr	r3, [r7, #0]
 800893c:	687a      	ldr	r2, [r7, #4]
 800893e:	68b9      	ldr	r1, [r7, #8]
 8008940:	68f8      	ldr	r0, [r7, #12]
 8008942:	f000 f850 	bl	80089e6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008946:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008948:	f000 f8de 	bl	8008b08 <prvAddNewTaskToReadyList>
 800894c:	e001      	b.n	8008952 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800894e:	2300      	movs	r3, #0
 8008950:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008952:	697b      	ldr	r3, [r7, #20]
	}
 8008954:	4618      	mov	r0, r3
 8008956:	3728      	adds	r7, #40	@ 0x28
 8008958:	46bd      	mov	sp, r7
 800895a:	bd80      	pop	{r7, pc}

0800895c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800895c:	b580      	push	{r7, lr}
 800895e:	b08c      	sub	sp, #48	@ 0x30
 8008960:	af04      	add	r7, sp, #16
 8008962:	60f8      	str	r0, [r7, #12]
 8008964:	60b9      	str	r1, [r7, #8]
 8008966:	603b      	str	r3, [r7, #0]
 8008968:	4613      	mov	r3, r2
 800896a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800896c:	88fb      	ldrh	r3, [r7, #6]
 800896e:	009b      	lsls	r3, r3, #2
 8008970:	4618      	mov	r0, r3
 8008972:	f001 fc73 	bl	800a25c <pvPortMalloc>
 8008976:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008978:	697b      	ldr	r3, [r7, #20]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d00e      	beq.n	800899c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800897e:	205c      	movs	r0, #92	@ 0x5c
 8008980:	f001 fc6c 	bl	800a25c <pvPortMalloc>
 8008984:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008986:	69fb      	ldr	r3, [r7, #28]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d003      	beq.n	8008994 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800898c:	69fb      	ldr	r3, [r7, #28]
 800898e:	697a      	ldr	r2, [r7, #20]
 8008990:	631a      	str	r2, [r3, #48]	@ 0x30
 8008992:	e005      	b.n	80089a0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008994:	6978      	ldr	r0, [r7, #20]
 8008996:	f001 fd2f 	bl	800a3f8 <vPortFree>
 800899a:	e001      	b.n	80089a0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800899c:	2300      	movs	r3, #0
 800899e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80089a0:	69fb      	ldr	r3, [r7, #28]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d017      	beq.n	80089d6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80089a6:	69fb      	ldr	r3, [r7, #28]
 80089a8:	2200      	movs	r2, #0
 80089aa:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80089ae:	88fa      	ldrh	r2, [r7, #6]
 80089b0:	2300      	movs	r3, #0
 80089b2:	9303      	str	r3, [sp, #12]
 80089b4:	69fb      	ldr	r3, [r7, #28]
 80089b6:	9302      	str	r3, [sp, #8]
 80089b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089ba:	9301      	str	r3, [sp, #4]
 80089bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089be:	9300      	str	r3, [sp, #0]
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	68b9      	ldr	r1, [r7, #8]
 80089c4:	68f8      	ldr	r0, [r7, #12]
 80089c6:	f000 f80e 	bl	80089e6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80089ca:	69f8      	ldr	r0, [r7, #28]
 80089cc:	f000 f89c 	bl	8008b08 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80089d0:	2301      	movs	r3, #1
 80089d2:	61bb      	str	r3, [r7, #24]
 80089d4:	e002      	b.n	80089dc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80089d6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80089da:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80089dc:	69bb      	ldr	r3, [r7, #24]
	}
 80089de:	4618      	mov	r0, r3
 80089e0:	3720      	adds	r7, #32
 80089e2:	46bd      	mov	sp, r7
 80089e4:	bd80      	pop	{r7, pc}

080089e6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80089e6:	b580      	push	{r7, lr}
 80089e8:	b088      	sub	sp, #32
 80089ea:	af00      	add	r7, sp, #0
 80089ec:	60f8      	str	r0, [r7, #12]
 80089ee:	60b9      	str	r1, [r7, #8]
 80089f0:	607a      	str	r2, [r7, #4]
 80089f2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80089f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089f6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	009b      	lsls	r3, r3, #2
 80089fc:	461a      	mov	r2, r3
 80089fe:	21a5      	movs	r1, #165	@ 0xa5
 8008a00:	f012 fcce 	bl	801b3a0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008a04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a06:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008a0e:	3b01      	subs	r3, #1
 8008a10:	009b      	lsls	r3, r3, #2
 8008a12:	4413      	add	r3, r2
 8008a14:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008a16:	69bb      	ldr	r3, [r7, #24]
 8008a18:	f023 0307 	bic.w	r3, r3, #7
 8008a1c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008a1e:	69bb      	ldr	r3, [r7, #24]
 8008a20:	f003 0307 	and.w	r3, r3, #7
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d00b      	beq.n	8008a40 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8008a28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a2c:	f383 8811 	msr	BASEPRI, r3
 8008a30:	f3bf 8f6f 	isb	sy
 8008a34:	f3bf 8f4f 	dsb	sy
 8008a38:	617b      	str	r3, [r7, #20]
}
 8008a3a:	bf00      	nop
 8008a3c:	bf00      	nop
 8008a3e:	e7fd      	b.n	8008a3c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d01f      	beq.n	8008a86 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008a46:	2300      	movs	r3, #0
 8008a48:	61fb      	str	r3, [r7, #28]
 8008a4a:	e012      	b.n	8008a72 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008a4c:	68ba      	ldr	r2, [r7, #8]
 8008a4e:	69fb      	ldr	r3, [r7, #28]
 8008a50:	4413      	add	r3, r2
 8008a52:	7819      	ldrb	r1, [r3, #0]
 8008a54:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a56:	69fb      	ldr	r3, [r7, #28]
 8008a58:	4413      	add	r3, r2
 8008a5a:	3334      	adds	r3, #52	@ 0x34
 8008a5c:	460a      	mov	r2, r1
 8008a5e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008a60:	68ba      	ldr	r2, [r7, #8]
 8008a62:	69fb      	ldr	r3, [r7, #28]
 8008a64:	4413      	add	r3, r2
 8008a66:	781b      	ldrb	r3, [r3, #0]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d006      	beq.n	8008a7a <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008a6c:	69fb      	ldr	r3, [r7, #28]
 8008a6e:	3301      	adds	r3, #1
 8008a70:	61fb      	str	r3, [r7, #28]
 8008a72:	69fb      	ldr	r3, [r7, #28]
 8008a74:	2b0f      	cmp	r3, #15
 8008a76:	d9e9      	bls.n	8008a4c <prvInitialiseNewTask+0x66>
 8008a78:	e000      	b.n	8008a7c <prvInitialiseNewTask+0x96>
			{
				break;
 8008a7a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008a7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a7e:	2200      	movs	r2, #0
 8008a80:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008a84:	e003      	b.n	8008a8e <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008a86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a88:	2200      	movs	r2, #0
 8008a8a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008a8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a90:	2b37      	cmp	r3, #55	@ 0x37
 8008a92:	d901      	bls.n	8008a98 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008a94:	2337      	movs	r3, #55	@ 0x37
 8008a96:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008a98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a9a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008a9c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008a9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008aa0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008aa2:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008aa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008aaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008aac:	3304      	adds	r3, #4
 8008aae:	4618      	mov	r0, r3
 8008ab0:	f7ff f966 	bl	8007d80 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008ab4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ab6:	3318      	adds	r3, #24
 8008ab8:	4618      	mov	r0, r3
 8008aba:	f7ff f961 	bl	8007d80 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008abe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ac0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008ac2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ac4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ac6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008aca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008acc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008ace:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ad0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008ad2:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008ad4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008ada:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008adc:	2200      	movs	r2, #0
 8008ade:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008ae2:	683a      	ldr	r2, [r7, #0]
 8008ae4:	68f9      	ldr	r1, [r7, #12]
 8008ae6:	69b8      	ldr	r0, [r7, #24]
 8008ae8:	f001 f966 	bl	8009db8 <pxPortInitialiseStack>
 8008aec:	4602      	mov	r2, r0
 8008aee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008af0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008af2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d002      	beq.n	8008afe <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008af8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008afa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008afc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008afe:	bf00      	nop
 8008b00:	3720      	adds	r7, #32
 8008b02:	46bd      	mov	sp, r7
 8008b04:	bd80      	pop	{r7, pc}
	...

08008b08 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b082      	sub	sp, #8
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008b10:	f001 fa82 	bl	800a018 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008b14:	4b2d      	ldr	r3, [pc, #180]	@ (8008bcc <prvAddNewTaskToReadyList+0xc4>)
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	3301      	adds	r3, #1
 8008b1a:	4a2c      	ldr	r2, [pc, #176]	@ (8008bcc <prvAddNewTaskToReadyList+0xc4>)
 8008b1c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008b1e:	4b2c      	ldr	r3, [pc, #176]	@ (8008bd0 <prvAddNewTaskToReadyList+0xc8>)
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d109      	bne.n	8008b3a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008b26:	4a2a      	ldr	r2, [pc, #168]	@ (8008bd0 <prvAddNewTaskToReadyList+0xc8>)
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008b2c:	4b27      	ldr	r3, [pc, #156]	@ (8008bcc <prvAddNewTaskToReadyList+0xc4>)
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	2b01      	cmp	r3, #1
 8008b32:	d110      	bne.n	8008b56 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008b34:	f000 fc46 	bl	80093c4 <prvInitialiseTaskLists>
 8008b38:	e00d      	b.n	8008b56 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008b3a:	4b26      	ldr	r3, [pc, #152]	@ (8008bd4 <prvAddNewTaskToReadyList+0xcc>)
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d109      	bne.n	8008b56 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008b42:	4b23      	ldr	r3, [pc, #140]	@ (8008bd0 <prvAddNewTaskToReadyList+0xc8>)
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b4c:	429a      	cmp	r2, r3
 8008b4e:	d802      	bhi.n	8008b56 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008b50:	4a1f      	ldr	r2, [pc, #124]	@ (8008bd0 <prvAddNewTaskToReadyList+0xc8>)
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008b56:	4b20      	ldr	r3, [pc, #128]	@ (8008bd8 <prvAddNewTaskToReadyList+0xd0>)
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	3301      	adds	r3, #1
 8008b5c:	4a1e      	ldr	r2, [pc, #120]	@ (8008bd8 <prvAddNewTaskToReadyList+0xd0>)
 8008b5e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008b60:	4b1d      	ldr	r3, [pc, #116]	@ (8008bd8 <prvAddNewTaskToReadyList+0xd0>)
 8008b62:	681a      	ldr	r2, [r3, #0]
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b6c:	4b1b      	ldr	r3, [pc, #108]	@ (8008bdc <prvAddNewTaskToReadyList+0xd4>)
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	429a      	cmp	r2, r3
 8008b72:	d903      	bls.n	8008b7c <prvAddNewTaskToReadyList+0x74>
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b78:	4a18      	ldr	r2, [pc, #96]	@ (8008bdc <prvAddNewTaskToReadyList+0xd4>)
 8008b7a:	6013      	str	r3, [r2, #0]
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b80:	4613      	mov	r3, r2
 8008b82:	009b      	lsls	r3, r3, #2
 8008b84:	4413      	add	r3, r2
 8008b86:	009b      	lsls	r3, r3, #2
 8008b88:	4a15      	ldr	r2, [pc, #84]	@ (8008be0 <prvAddNewTaskToReadyList+0xd8>)
 8008b8a:	441a      	add	r2, r3
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	3304      	adds	r3, #4
 8008b90:	4619      	mov	r1, r3
 8008b92:	4610      	mov	r0, r2
 8008b94:	f7ff f901 	bl	8007d9a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008b98:	f001 fa70 	bl	800a07c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008b9c:	4b0d      	ldr	r3, [pc, #52]	@ (8008bd4 <prvAddNewTaskToReadyList+0xcc>)
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d00e      	beq.n	8008bc2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008ba4:	4b0a      	ldr	r3, [pc, #40]	@ (8008bd0 <prvAddNewTaskToReadyList+0xc8>)
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bae:	429a      	cmp	r2, r3
 8008bb0:	d207      	bcs.n	8008bc2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008bb2:	4b0c      	ldr	r3, [pc, #48]	@ (8008be4 <prvAddNewTaskToReadyList+0xdc>)
 8008bb4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008bb8:	601a      	str	r2, [r3, #0]
 8008bba:	f3bf 8f4f 	dsb	sy
 8008bbe:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008bc2:	bf00      	nop
 8008bc4:	3708      	adds	r7, #8
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bd80      	pop	{r7, pc}
 8008bca:	bf00      	nop
 8008bcc:	200096dc 	.word	0x200096dc
 8008bd0:	20009208 	.word	0x20009208
 8008bd4:	200096e8 	.word	0x200096e8
 8008bd8:	200096f8 	.word	0x200096f8
 8008bdc:	200096e4 	.word	0x200096e4
 8008be0:	2000920c 	.word	0x2000920c
 8008be4:	e000ed04 	.word	0xe000ed04

08008be8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b084      	sub	sp, #16
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d018      	beq.n	8008c2c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008bfa:	4b14      	ldr	r3, [pc, #80]	@ (8008c4c <vTaskDelay+0x64>)
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d00b      	beq.n	8008c1a <vTaskDelay+0x32>
	__asm volatile
 8008c02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c06:	f383 8811 	msr	BASEPRI, r3
 8008c0a:	f3bf 8f6f 	isb	sy
 8008c0e:	f3bf 8f4f 	dsb	sy
 8008c12:	60bb      	str	r3, [r7, #8]
}
 8008c14:	bf00      	nop
 8008c16:	bf00      	nop
 8008c18:	e7fd      	b.n	8008c16 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008c1a:	f000 f883 	bl	8008d24 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008c1e:	2100      	movs	r1, #0
 8008c20:	6878      	ldr	r0, [r7, #4]
 8008c22:	f000 fd1b 	bl	800965c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008c26:	f000 f88b 	bl	8008d40 <xTaskResumeAll>
 8008c2a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d107      	bne.n	8008c42 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8008c32:	4b07      	ldr	r3, [pc, #28]	@ (8008c50 <vTaskDelay+0x68>)
 8008c34:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c38:	601a      	str	r2, [r3, #0]
 8008c3a:	f3bf 8f4f 	dsb	sy
 8008c3e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008c42:	bf00      	nop
 8008c44:	3710      	adds	r7, #16
 8008c46:	46bd      	mov	sp, r7
 8008c48:	bd80      	pop	{r7, pc}
 8008c4a:	bf00      	nop
 8008c4c:	20009704 	.word	0x20009704
 8008c50:	e000ed04 	.word	0xe000ed04

08008c54 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b08a      	sub	sp, #40	@ 0x28
 8008c58:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008c5e:	2300      	movs	r3, #0
 8008c60:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008c62:	463a      	mov	r2, r7
 8008c64:	1d39      	adds	r1, r7, #4
 8008c66:	f107 0308 	add.w	r3, r7, #8
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	f7ff f834 	bl	8007cd8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008c70:	6839      	ldr	r1, [r7, #0]
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	68ba      	ldr	r2, [r7, #8]
 8008c76:	9202      	str	r2, [sp, #8]
 8008c78:	9301      	str	r3, [sp, #4]
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	9300      	str	r3, [sp, #0]
 8008c7e:	2300      	movs	r3, #0
 8008c80:	460a      	mov	r2, r1
 8008c82:	4922      	ldr	r1, [pc, #136]	@ (8008d0c <vTaskStartScheduler+0xb8>)
 8008c84:	4822      	ldr	r0, [pc, #136]	@ (8008d10 <vTaskStartScheduler+0xbc>)
 8008c86:	f7ff fe09 	bl	800889c <xTaskCreateStatic>
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	4a21      	ldr	r2, [pc, #132]	@ (8008d14 <vTaskStartScheduler+0xc0>)
 8008c8e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008c90:	4b20      	ldr	r3, [pc, #128]	@ (8008d14 <vTaskStartScheduler+0xc0>)
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d002      	beq.n	8008c9e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008c98:	2301      	movs	r3, #1
 8008c9a:	617b      	str	r3, [r7, #20]
 8008c9c:	e001      	b.n	8008ca2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008ca2:	697b      	ldr	r3, [r7, #20]
 8008ca4:	2b01      	cmp	r3, #1
 8008ca6:	d102      	bne.n	8008cae <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008ca8:	f000 fd2c 	bl	8009704 <xTimerCreateTimerTask>
 8008cac:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008cae:	697b      	ldr	r3, [r7, #20]
 8008cb0:	2b01      	cmp	r3, #1
 8008cb2:	d116      	bne.n	8008ce2 <vTaskStartScheduler+0x8e>
	__asm volatile
 8008cb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cb8:	f383 8811 	msr	BASEPRI, r3
 8008cbc:	f3bf 8f6f 	isb	sy
 8008cc0:	f3bf 8f4f 	dsb	sy
 8008cc4:	613b      	str	r3, [r7, #16]
}
 8008cc6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008cc8:	4b13      	ldr	r3, [pc, #76]	@ (8008d18 <vTaskStartScheduler+0xc4>)
 8008cca:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008cce:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008cd0:	4b12      	ldr	r3, [pc, #72]	@ (8008d1c <vTaskStartScheduler+0xc8>)
 8008cd2:	2201      	movs	r2, #1
 8008cd4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008cd6:	4b12      	ldr	r3, [pc, #72]	@ (8008d20 <vTaskStartScheduler+0xcc>)
 8008cd8:	2200      	movs	r2, #0
 8008cda:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008cdc:	f001 f8f8 	bl	8009ed0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008ce0:	e00f      	b.n	8008d02 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008ce2:	697b      	ldr	r3, [r7, #20]
 8008ce4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008ce8:	d10b      	bne.n	8008d02 <vTaskStartScheduler+0xae>
	__asm volatile
 8008cea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cee:	f383 8811 	msr	BASEPRI, r3
 8008cf2:	f3bf 8f6f 	isb	sy
 8008cf6:	f3bf 8f4f 	dsb	sy
 8008cfa:	60fb      	str	r3, [r7, #12]
}
 8008cfc:	bf00      	nop
 8008cfe:	bf00      	nop
 8008d00:	e7fd      	b.n	8008cfe <vTaskStartScheduler+0xaa>
}
 8008d02:	bf00      	nop
 8008d04:	3718      	adds	r7, #24
 8008d06:	46bd      	mov	sp, r7
 8008d08:	bd80      	pop	{r7, pc}
 8008d0a:	bf00      	nop
 8008d0c:	0801c5e8 	.word	0x0801c5e8
 8008d10:	08009395 	.word	0x08009395
 8008d14:	20009700 	.word	0x20009700
 8008d18:	200096fc 	.word	0x200096fc
 8008d1c:	200096e8 	.word	0x200096e8
 8008d20:	200096e0 	.word	0x200096e0

08008d24 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008d24:	b480      	push	{r7}
 8008d26:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008d28:	4b04      	ldr	r3, [pc, #16]	@ (8008d3c <vTaskSuspendAll+0x18>)
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	3301      	adds	r3, #1
 8008d2e:	4a03      	ldr	r2, [pc, #12]	@ (8008d3c <vTaskSuspendAll+0x18>)
 8008d30:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008d32:	bf00      	nop
 8008d34:	46bd      	mov	sp, r7
 8008d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3a:	4770      	bx	lr
 8008d3c:	20009704 	.word	0x20009704

08008d40 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b084      	sub	sp, #16
 8008d44:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008d46:	2300      	movs	r3, #0
 8008d48:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008d4e:	4b42      	ldr	r3, [pc, #264]	@ (8008e58 <xTaskResumeAll+0x118>)
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d10b      	bne.n	8008d6e <xTaskResumeAll+0x2e>
	__asm volatile
 8008d56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d5a:	f383 8811 	msr	BASEPRI, r3
 8008d5e:	f3bf 8f6f 	isb	sy
 8008d62:	f3bf 8f4f 	dsb	sy
 8008d66:	603b      	str	r3, [r7, #0]
}
 8008d68:	bf00      	nop
 8008d6a:	bf00      	nop
 8008d6c:	e7fd      	b.n	8008d6a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008d6e:	f001 f953 	bl	800a018 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008d72:	4b39      	ldr	r3, [pc, #228]	@ (8008e58 <xTaskResumeAll+0x118>)
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	3b01      	subs	r3, #1
 8008d78:	4a37      	ldr	r2, [pc, #220]	@ (8008e58 <xTaskResumeAll+0x118>)
 8008d7a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008d7c:	4b36      	ldr	r3, [pc, #216]	@ (8008e58 <xTaskResumeAll+0x118>)
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d162      	bne.n	8008e4a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008d84:	4b35      	ldr	r3, [pc, #212]	@ (8008e5c <xTaskResumeAll+0x11c>)
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d05e      	beq.n	8008e4a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008d8c:	e02f      	b.n	8008dee <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d8e:	4b34      	ldr	r3, [pc, #208]	@ (8008e60 <xTaskResumeAll+0x120>)
 8008d90:	68db      	ldr	r3, [r3, #12]
 8008d92:	68db      	ldr	r3, [r3, #12]
 8008d94:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	3318      	adds	r3, #24
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	f7ff f85a 	bl	8007e54 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	3304      	adds	r3, #4
 8008da4:	4618      	mov	r0, r3
 8008da6:	f7ff f855 	bl	8007e54 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008dae:	4b2d      	ldr	r3, [pc, #180]	@ (8008e64 <xTaskResumeAll+0x124>)
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	429a      	cmp	r2, r3
 8008db4:	d903      	bls.n	8008dbe <xTaskResumeAll+0x7e>
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dba:	4a2a      	ldr	r2, [pc, #168]	@ (8008e64 <xTaskResumeAll+0x124>)
 8008dbc:	6013      	str	r3, [r2, #0]
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008dc2:	4613      	mov	r3, r2
 8008dc4:	009b      	lsls	r3, r3, #2
 8008dc6:	4413      	add	r3, r2
 8008dc8:	009b      	lsls	r3, r3, #2
 8008dca:	4a27      	ldr	r2, [pc, #156]	@ (8008e68 <xTaskResumeAll+0x128>)
 8008dcc:	441a      	add	r2, r3
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	3304      	adds	r3, #4
 8008dd2:	4619      	mov	r1, r3
 8008dd4:	4610      	mov	r0, r2
 8008dd6:	f7fe ffe0 	bl	8007d9a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008dde:	4b23      	ldr	r3, [pc, #140]	@ (8008e6c <xTaskResumeAll+0x12c>)
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008de4:	429a      	cmp	r2, r3
 8008de6:	d302      	bcc.n	8008dee <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8008de8:	4b21      	ldr	r3, [pc, #132]	@ (8008e70 <xTaskResumeAll+0x130>)
 8008dea:	2201      	movs	r2, #1
 8008dec:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008dee:	4b1c      	ldr	r3, [pc, #112]	@ (8008e60 <xTaskResumeAll+0x120>)
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d1cb      	bne.n	8008d8e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d001      	beq.n	8008e00 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008dfc:	f000 fb80 	bl	8009500 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008e00:	4b1c      	ldr	r3, [pc, #112]	@ (8008e74 <xTaskResumeAll+0x134>)
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d010      	beq.n	8008e2e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008e0c:	f000 f846 	bl	8008e9c <xTaskIncrementTick>
 8008e10:	4603      	mov	r3, r0
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d002      	beq.n	8008e1c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8008e16:	4b16      	ldr	r3, [pc, #88]	@ (8008e70 <xTaskResumeAll+0x130>)
 8008e18:	2201      	movs	r2, #1
 8008e1a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	3b01      	subs	r3, #1
 8008e20:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d1f1      	bne.n	8008e0c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8008e28:	4b12      	ldr	r3, [pc, #72]	@ (8008e74 <xTaskResumeAll+0x134>)
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008e2e:	4b10      	ldr	r3, [pc, #64]	@ (8008e70 <xTaskResumeAll+0x130>)
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d009      	beq.n	8008e4a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008e36:	2301      	movs	r3, #1
 8008e38:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008e3a:	4b0f      	ldr	r3, [pc, #60]	@ (8008e78 <xTaskResumeAll+0x138>)
 8008e3c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e40:	601a      	str	r2, [r3, #0]
 8008e42:	f3bf 8f4f 	dsb	sy
 8008e46:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008e4a:	f001 f917 	bl	800a07c <vPortExitCritical>

	return xAlreadyYielded;
 8008e4e:	68bb      	ldr	r3, [r7, #8]
}
 8008e50:	4618      	mov	r0, r3
 8008e52:	3710      	adds	r7, #16
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bd80      	pop	{r7, pc}
 8008e58:	20009704 	.word	0x20009704
 8008e5c:	200096dc 	.word	0x200096dc
 8008e60:	2000969c 	.word	0x2000969c
 8008e64:	200096e4 	.word	0x200096e4
 8008e68:	2000920c 	.word	0x2000920c
 8008e6c:	20009208 	.word	0x20009208
 8008e70:	200096f0 	.word	0x200096f0
 8008e74:	200096ec 	.word	0x200096ec
 8008e78:	e000ed04 	.word	0xe000ed04

08008e7c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008e7c:	b480      	push	{r7}
 8008e7e:	b083      	sub	sp, #12
 8008e80:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008e82:	4b05      	ldr	r3, [pc, #20]	@ (8008e98 <xTaskGetTickCount+0x1c>)
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008e88:	687b      	ldr	r3, [r7, #4]
}
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	370c      	adds	r7, #12
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e94:	4770      	bx	lr
 8008e96:	bf00      	nop
 8008e98:	200096e0 	.word	0x200096e0

08008e9c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b086      	sub	sp, #24
 8008ea0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008ea6:	4b4f      	ldr	r3, [pc, #316]	@ (8008fe4 <xTaskIncrementTick+0x148>)
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	f040 8090 	bne.w	8008fd0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008eb0:	4b4d      	ldr	r3, [pc, #308]	@ (8008fe8 <xTaskIncrementTick+0x14c>)
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	3301      	adds	r3, #1
 8008eb6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008eb8:	4a4b      	ldr	r2, [pc, #300]	@ (8008fe8 <xTaskIncrementTick+0x14c>)
 8008eba:	693b      	ldr	r3, [r7, #16]
 8008ebc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008ebe:	693b      	ldr	r3, [r7, #16]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d121      	bne.n	8008f08 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008ec4:	4b49      	ldr	r3, [pc, #292]	@ (8008fec <xTaskIncrementTick+0x150>)
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d00b      	beq.n	8008ee6 <xTaskIncrementTick+0x4a>
	__asm volatile
 8008ece:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ed2:	f383 8811 	msr	BASEPRI, r3
 8008ed6:	f3bf 8f6f 	isb	sy
 8008eda:	f3bf 8f4f 	dsb	sy
 8008ede:	603b      	str	r3, [r7, #0]
}
 8008ee0:	bf00      	nop
 8008ee2:	bf00      	nop
 8008ee4:	e7fd      	b.n	8008ee2 <xTaskIncrementTick+0x46>
 8008ee6:	4b41      	ldr	r3, [pc, #260]	@ (8008fec <xTaskIncrementTick+0x150>)
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	60fb      	str	r3, [r7, #12]
 8008eec:	4b40      	ldr	r3, [pc, #256]	@ (8008ff0 <xTaskIncrementTick+0x154>)
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	4a3e      	ldr	r2, [pc, #248]	@ (8008fec <xTaskIncrementTick+0x150>)
 8008ef2:	6013      	str	r3, [r2, #0]
 8008ef4:	4a3e      	ldr	r2, [pc, #248]	@ (8008ff0 <xTaskIncrementTick+0x154>)
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	6013      	str	r3, [r2, #0]
 8008efa:	4b3e      	ldr	r3, [pc, #248]	@ (8008ff4 <xTaskIncrementTick+0x158>)
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	3301      	adds	r3, #1
 8008f00:	4a3c      	ldr	r2, [pc, #240]	@ (8008ff4 <xTaskIncrementTick+0x158>)
 8008f02:	6013      	str	r3, [r2, #0]
 8008f04:	f000 fafc 	bl	8009500 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008f08:	4b3b      	ldr	r3, [pc, #236]	@ (8008ff8 <xTaskIncrementTick+0x15c>)
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	693a      	ldr	r2, [r7, #16]
 8008f0e:	429a      	cmp	r2, r3
 8008f10:	d349      	bcc.n	8008fa6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008f12:	4b36      	ldr	r3, [pc, #216]	@ (8008fec <xTaskIncrementTick+0x150>)
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d104      	bne.n	8008f26 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f1c:	4b36      	ldr	r3, [pc, #216]	@ (8008ff8 <xTaskIncrementTick+0x15c>)
 8008f1e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008f22:	601a      	str	r2, [r3, #0]
					break;
 8008f24:	e03f      	b.n	8008fa6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f26:	4b31      	ldr	r3, [pc, #196]	@ (8008fec <xTaskIncrementTick+0x150>)
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	68db      	ldr	r3, [r3, #12]
 8008f2c:	68db      	ldr	r3, [r3, #12]
 8008f2e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008f30:	68bb      	ldr	r3, [r7, #8]
 8008f32:	685b      	ldr	r3, [r3, #4]
 8008f34:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008f36:	693a      	ldr	r2, [r7, #16]
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	429a      	cmp	r2, r3
 8008f3c:	d203      	bcs.n	8008f46 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008f3e:	4a2e      	ldr	r2, [pc, #184]	@ (8008ff8 <xTaskIncrementTick+0x15c>)
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008f44:	e02f      	b.n	8008fa6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008f46:	68bb      	ldr	r3, [r7, #8]
 8008f48:	3304      	adds	r3, #4
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	f7fe ff82 	bl	8007e54 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008f50:	68bb      	ldr	r3, [r7, #8]
 8008f52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d004      	beq.n	8008f62 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008f58:	68bb      	ldr	r3, [r7, #8]
 8008f5a:	3318      	adds	r3, #24
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	f7fe ff79 	bl	8007e54 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008f62:	68bb      	ldr	r3, [r7, #8]
 8008f64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f66:	4b25      	ldr	r3, [pc, #148]	@ (8008ffc <xTaskIncrementTick+0x160>)
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	429a      	cmp	r2, r3
 8008f6c:	d903      	bls.n	8008f76 <xTaskIncrementTick+0xda>
 8008f6e:	68bb      	ldr	r3, [r7, #8]
 8008f70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f72:	4a22      	ldr	r2, [pc, #136]	@ (8008ffc <xTaskIncrementTick+0x160>)
 8008f74:	6013      	str	r3, [r2, #0]
 8008f76:	68bb      	ldr	r3, [r7, #8]
 8008f78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f7a:	4613      	mov	r3, r2
 8008f7c:	009b      	lsls	r3, r3, #2
 8008f7e:	4413      	add	r3, r2
 8008f80:	009b      	lsls	r3, r3, #2
 8008f82:	4a1f      	ldr	r2, [pc, #124]	@ (8009000 <xTaskIncrementTick+0x164>)
 8008f84:	441a      	add	r2, r3
 8008f86:	68bb      	ldr	r3, [r7, #8]
 8008f88:	3304      	adds	r3, #4
 8008f8a:	4619      	mov	r1, r3
 8008f8c:	4610      	mov	r0, r2
 8008f8e:	f7fe ff04 	bl	8007d9a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008f92:	68bb      	ldr	r3, [r7, #8]
 8008f94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f96:	4b1b      	ldr	r3, [pc, #108]	@ (8009004 <xTaskIncrementTick+0x168>)
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f9c:	429a      	cmp	r2, r3
 8008f9e:	d3b8      	bcc.n	8008f12 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8008fa0:	2301      	movs	r3, #1
 8008fa2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008fa4:	e7b5      	b.n	8008f12 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008fa6:	4b17      	ldr	r3, [pc, #92]	@ (8009004 <xTaskIncrementTick+0x168>)
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008fac:	4914      	ldr	r1, [pc, #80]	@ (8009000 <xTaskIncrementTick+0x164>)
 8008fae:	4613      	mov	r3, r2
 8008fb0:	009b      	lsls	r3, r3, #2
 8008fb2:	4413      	add	r3, r2
 8008fb4:	009b      	lsls	r3, r3, #2
 8008fb6:	440b      	add	r3, r1
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	2b01      	cmp	r3, #1
 8008fbc:	d901      	bls.n	8008fc2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8008fbe:	2301      	movs	r3, #1
 8008fc0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008fc2:	4b11      	ldr	r3, [pc, #68]	@ (8009008 <xTaskIncrementTick+0x16c>)
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d007      	beq.n	8008fda <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8008fca:	2301      	movs	r3, #1
 8008fcc:	617b      	str	r3, [r7, #20]
 8008fce:	e004      	b.n	8008fda <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008fd0:	4b0e      	ldr	r3, [pc, #56]	@ (800900c <xTaskIncrementTick+0x170>)
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	3301      	adds	r3, #1
 8008fd6:	4a0d      	ldr	r2, [pc, #52]	@ (800900c <xTaskIncrementTick+0x170>)
 8008fd8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008fda:	697b      	ldr	r3, [r7, #20]
}
 8008fdc:	4618      	mov	r0, r3
 8008fde:	3718      	adds	r7, #24
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	bd80      	pop	{r7, pc}
 8008fe4:	20009704 	.word	0x20009704
 8008fe8:	200096e0 	.word	0x200096e0
 8008fec:	20009694 	.word	0x20009694
 8008ff0:	20009698 	.word	0x20009698
 8008ff4:	200096f4 	.word	0x200096f4
 8008ff8:	200096fc 	.word	0x200096fc
 8008ffc:	200096e4 	.word	0x200096e4
 8009000:	2000920c 	.word	0x2000920c
 8009004:	20009208 	.word	0x20009208
 8009008:	200096f0 	.word	0x200096f0
 800900c:	200096ec 	.word	0x200096ec

08009010 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009010:	b480      	push	{r7}
 8009012:	b085      	sub	sp, #20
 8009014:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009016:	4b28      	ldr	r3, [pc, #160]	@ (80090b8 <vTaskSwitchContext+0xa8>)
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d003      	beq.n	8009026 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800901e:	4b27      	ldr	r3, [pc, #156]	@ (80090bc <vTaskSwitchContext+0xac>)
 8009020:	2201      	movs	r2, #1
 8009022:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009024:	e042      	b.n	80090ac <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8009026:	4b25      	ldr	r3, [pc, #148]	@ (80090bc <vTaskSwitchContext+0xac>)
 8009028:	2200      	movs	r2, #0
 800902a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800902c:	4b24      	ldr	r3, [pc, #144]	@ (80090c0 <vTaskSwitchContext+0xb0>)
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	60fb      	str	r3, [r7, #12]
 8009032:	e011      	b.n	8009058 <vTaskSwitchContext+0x48>
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d10b      	bne.n	8009052 <vTaskSwitchContext+0x42>
	__asm volatile
 800903a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800903e:	f383 8811 	msr	BASEPRI, r3
 8009042:	f3bf 8f6f 	isb	sy
 8009046:	f3bf 8f4f 	dsb	sy
 800904a:	607b      	str	r3, [r7, #4]
}
 800904c:	bf00      	nop
 800904e:	bf00      	nop
 8009050:	e7fd      	b.n	800904e <vTaskSwitchContext+0x3e>
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	3b01      	subs	r3, #1
 8009056:	60fb      	str	r3, [r7, #12]
 8009058:	491a      	ldr	r1, [pc, #104]	@ (80090c4 <vTaskSwitchContext+0xb4>)
 800905a:	68fa      	ldr	r2, [r7, #12]
 800905c:	4613      	mov	r3, r2
 800905e:	009b      	lsls	r3, r3, #2
 8009060:	4413      	add	r3, r2
 8009062:	009b      	lsls	r3, r3, #2
 8009064:	440b      	add	r3, r1
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d0e3      	beq.n	8009034 <vTaskSwitchContext+0x24>
 800906c:	68fa      	ldr	r2, [r7, #12]
 800906e:	4613      	mov	r3, r2
 8009070:	009b      	lsls	r3, r3, #2
 8009072:	4413      	add	r3, r2
 8009074:	009b      	lsls	r3, r3, #2
 8009076:	4a13      	ldr	r2, [pc, #76]	@ (80090c4 <vTaskSwitchContext+0xb4>)
 8009078:	4413      	add	r3, r2
 800907a:	60bb      	str	r3, [r7, #8]
 800907c:	68bb      	ldr	r3, [r7, #8]
 800907e:	685b      	ldr	r3, [r3, #4]
 8009080:	685a      	ldr	r2, [r3, #4]
 8009082:	68bb      	ldr	r3, [r7, #8]
 8009084:	605a      	str	r2, [r3, #4]
 8009086:	68bb      	ldr	r3, [r7, #8]
 8009088:	685a      	ldr	r2, [r3, #4]
 800908a:	68bb      	ldr	r3, [r7, #8]
 800908c:	3308      	adds	r3, #8
 800908e:	429a      	cmp	r2, r3
 8009090:	d104      	bne.n	800909c <vTaskSwitchContext+0x8c>
 8009092:	68bb      	ldr	r3, [r7, #8]
 8009094:	685b      	ldr	r3, [r3, #4]
 8009096:	685a      	ldr	r2, [r3, #4]
 8009098:	68bb      	ldr	r3, [r7, #8]
 800909a:	605a      	str	r2, [r3, #4]
 800909c:	68bb      	ldr	r3, [r7, #8]
 800909e:	685b      	ldr	r3, [r3, #4]
 80090a0:	68db      	ldr	r3, [r3, #12]
 80090a2:	4a09      	ldr	r2, [pc, #36]	@ (80090c8 <vTaskSwitchContext+0xb8>)
 80090a4:	6013      	str	r3, [r2, #0]
 80090a6:	4a06      	ldr	r2, [pc, #24]	@ (80090c0 <vTaskSwitchContext+0xb0>)
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	6013      	str	r3, [r2, #0]
}
 80090ac:	bf00      	nop
 80090ae:	3714      	adds	r7, #20
 80090b0:	46bd      	mov	sp, r7
 80090b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b6:	4770      	bx	lr
 80090b8:	20009704 	.word	0x20009704
 80090bc:	200096f0 	.word	0x200096f0
 80090c0:	200096e4 	.word	0x200096e4
 80090c4:	2000920c 	.word	0x2000920c
 80090c8:	20009208 	.word	0x20009208

080090cc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b084      	sub	sp, #16
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
 80090d4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d10b      	bne.n	80090f4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80090dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090e0:	f383 8811 	msr	BASEPRI, r3
 80090e4:	f3bf 8f6f 	isb	sy
 80090e8:	f3bf 8f4f 	dsb	sy
 80090ec:	60fb      	str	r3, [r7, #12]
}
 80090ee:	bf00      	nop
 80090f0:	bf00      	nop
 80090f2:	e7fd      	b.n	80090f0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80090f4:	4b07      	ldr	r3, [pc, #28]	@ (8009114 <vTaskPlaceOnEventList+0x48>)
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	3318      	adds	r3, #24
 80090fa:	4619      	mov	r1, r3
 80090fc:	6878      	ldr	r0, [r7, #4]
 80090fe:	f7fe fe70 	bl	8007de2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009102:	2101      	movs	r1, #1
 8009104:	6838      	ldr	r0, [r7, #0]
 8009106:	f000 faa9 	bl	800965c <prvAddCurrentTaskToDelayedList>
}
 800910a:	bf00      	nop
 800910c:	3710      	adds	r7, #16
 800910e:	46bd      	mov	sp, r7
 8009110:	bd80      	pop	{r7, pc}
 8009112:	bf00      	nop
 8009114:	20009208 	.word	0x20009208

08009118 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009118:	b580      	push	{r7, lr}
 800911a:	b086      	sub	sp, #24
 800911c:	af00      	add	r7, sp, #0
 800911e:	60f8      	str	r0, [r7, #12]
 8009120:	60b9      	str	r1, [r7, #8]
 8009122:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d10b      	bne.n	8009142 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800912a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800912e:	f383 8811 	msr	BASEPRI, r3
 8009132:	f3bf 8f6f 	isb	sy
 8009136:	f3bf 8f4f 	dsb	sy
 800913a:	617b      	str	r3, [r7, #20]
}
 800913c:	bf00      	nop
 800913e:	bf00      	nop
 8009140:	e7fd      	b.n	800913e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009142:	4b0a      	ldr	r3, [pc, #40]	@ (800916c <vTaskPlaceOnEventListRestricted+0x54>)
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	3318      	adds	r3, #24
 8009148:	4619      	mov	r1, r3
 800914a:	68f8      	ldr	r0, [r7, #12]
 800914c:	f7fe fe25 	bl	8007d9a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d002      	beq.n	800915c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8009156:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800915a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800915c:	6879      	ldr	r1, [r7, #4]
 800915e:	68b8      	ldr	r0, [r7, #8]
 8009160:	f000 fa7c 	bl	800965c <prvAddCurrentTaskToDelayedList>
	}
 8009164:	bf00      	nop
 8009166:	3718      	adds	r7, #24
 8009168:	46bd      	mov	sp, r7
 800916a:	bd80      	pop	{r7, pc}
 800916c:	20009208 	.word	0x20009208

08009170 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b086      	sub	sp, #24
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	68db      	ldr	r3, [r3, #12]
 800917c:	68db      	ldr	r3, [r3, #12]
 800917e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009180:	693b      	ldr	r3, [r7, #16]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d10b      	bne.n	800919e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8009186:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800918a:	f383 8811 	msr	BASEPRI, r3
 800918e:	f3bf 8f6f 	isb	sy
 8009192:	f3bf 8f4f 	dsb	sy
 8009196:	60fb      	str	r3, [r7, #12]
}
 8009198:	bf00      	nop
 800919a:	bf00      	nop
 800919c:	e7fd      	b.n	800919a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800919e:	693b      	ldr	r3, [r7, #16]
 80091a0:	3318      	adds	r3, #24
 80091a2:	4618      	mov	r0, r3
 80091a4:	f7fe fe56 	bl	8007e54 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80091a8:	4b1d      	ldr	r3, [pc, #116]	@ (8009220 <xTaskRemoveFromEventList+0xb0>)
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d11d      	bne.n	80091ec <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80091b0:	693b      	ldr	r3, [r7, #16]
 80091b2:	3304      	adds	r3, #4
 80091b4:	4618      	mov	r0, r3
 80091b6:	f7fe fe4d 	bl	8007e54 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80091ba:	693b      	ldr	r3, [r7, #16]
 80091bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091be:	4b19      	ldr	r3, [pc, #100]	@ (8009224 <xTaskRemoveFromEventList+0xb4>)
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	429a      	cmp	r2, r3
 80091c4:	d903      	bls.n	80091ce <xTaskRemoveFromEventList+0x5e>
 80091c6:	693b      	ldr	r3, [r7, #16]
 80091c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091ca:	4a16      	ldr	r2, [pc, #88]	@ (8009224 <xTaskRemoveFromEventList+0xb4>)
 80091cc:	6013      	str	r3, [r2, #0]
 80091ce:	693b      	ldr	r3, [r7, #16]
 80091d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091d2:	4613      	mov	r3, r2
 80091d4:	009b      	lsls	r3, r3, #2
 80091d6:	4413      	add	r3, r2
 80091d8:	009b      	lsls	r3, r3, #2
 80091da:	4a13      	ldr	r2, [pc, #76]	@ (8009228 <xTaskRemoveFromEventList+0xb8>)
 80091dc:	441a      	add	r2, r3
 80091de:	693b      	ldr	r3, [r7, #16]
 80091e0:	3304      	adds	r3, #4
 80091e2:	4619      	mov	r1, r3
 80091e4:	4610      	mov	r0, r2
 80091e6:	f7fe fdd8 	bl	8007d9a <vListInsertEnd>
 80091ea:	e005      	b.n	80091f8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80091ec:	693b      	ldr	r3, [r7, #16]
 80091ee:	3318      	adds	r3, #24
 80091f0:	4619      	mov	r1, r3
 80091f2:	480e      	ldr	r0, [pc, #56]	@ (800922c <xTaskRemoveFromEventList+0xbc>)
 80091f4:	f7fe fdd1 	bl	8007d9a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80091f8:	693b      	ldr	r3, [r7, #16]
 80091fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091fc:	4b0c      	ldr	r3, [pc, #48]	@ (8009230 <xTaskRemoveFromEventList+0xc0>)
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009202:	429a      	cmp	r2, r3
 8009204:	d905      	bls.n	8009212 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009206:	2301      	movs	r3, #1
 8009208:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800920a:	4b0a      	ldr	r3, [pc, #40]	@ (8009234 <xTaskRemoveFromEventList+0xc4>)
 800920c:	2201      	movs	r2, #1
 800920e:	601a      	str	r2, [r3, #0]
 8009210:	e001      	b.n	8009216 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8009212:	2300      	movs	r3, #0
 8009214:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009216:	697b      	ldr	r3, [r7, #20]
}
 8009218:	4618      	mov	r0, r3
 800921a:	3718      	adds	r7, #24
 800921c:	46bd      	mov	sp, r7
 800921e:	bd80      	pop	{r7, pc}
 8009220:	20009704 	.word	0x20009704
 8009224:	200096e4 	.word	0x200096e4
 8009228:	2000920c 	.word	0x2000920c
 800922c:	2000969c 	.word	0x2000969c
 8009230:	20009208 	.word	0x20009208
 8009234:	200096f0 	.word	0x200096f0

08009238 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b084      	sub	sp, #16
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d10b      	bne.n	800925e <vTaskSetTimeOutState+0x26>
	__asm volatile
 8009246:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800924a:	f383 8811 	msr	BASEPRI, r3
 800924e:	f3bf 8f6f 	isb	sy
 8009252:	f3bf 8f4f 	dsb	sy
 8009256:	60fb      	str	r3, [r7, #12]
}
 8009258:	bf00      	nop
 800925a:	bf00      	nop
 800925c:	e7fd      	b.n	800925a <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800925e:	f000 fedb 	bl	800a018 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009262:	4b07      	ldr	r3, [pc, #28]	@ (8009280 <vTaskSetTimeOutState+0x48>)
 8009264:	681a      	ldr	r2, [r3, #0]
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800926a:	4b06      	ldr	r3, [pc, #24]	@ (8009284 <vTaskSetTimeOutState+0x4c>)
 800926c:	681a      	ldr	r2, [r3, #0]
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8009272:	f000 ff03 	bl	800a07c <vPortExitCritical>
}
 8009276:	bf00      	nop
 8009278:	3710      	adds	r7, #16
 800927a:	46bd      	mov	sp, r7
 800927c:	bd80      	pop	{r7, pc}
 800927e:	bf00      	nop
 8009280:	200096f4 	.word	0x200096f4
 8009284:	200096e0 	.word	0x200096e0

08009288 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009288:	b480      	push	{r7}
 800928a:	b083      	sub	sp, #12
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009290:	4b06      	ldr	r3, [pc, #24]	@ (80092ac <vTaskInternalSetTimeOutState+0x24>)
 8009292:	681a      	ldr	r2, [r3, #0]
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009298:	4b05      	ldr	r3, [pc, #20]	@ (80092b0 <vTaskInternalSetTimeOutState+0x28>)
 800929a:	681a      	ldr	r2, [r3, #0]
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	605a      	str	r2, [r3, #4]
}
 80092a0:	bf00      	nop
 80092a2:	370c      	adds	r7, #12
 80092a4:	46bd      	mov	sp, r7
 80092a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092aa:	4770      	bx	lr
 80092ac:	200096f4 	.word	0x200096f4
 80092b0:	200096e0 	.word	0x200096e0

080092b4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b088      	sub	sp, #32
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]
 80092bc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d10b      	bne.n	80092dc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80092c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092c8:	f383 8811 	msr	BASEPRI, r3
 80092cc:	f3bf 8f6f 	isb	sy
 80092d0:	f3bf 8f4f 	dsb	sy
 80092d4:	613b      	str	r3, [r7, #16]
}
 80092d6:	bf00      	nop
 80092d8:	bf00      	nop
 80092da:	e7fd      	b.n	80092d8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80092dc:	683b      	ldr	r3, [r7, #0]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d10b      	bne.n	80092fa <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80092e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092e6:	f383 8811 	msr	BASEPRI, r3
 80092ea:	f3bf 8f6f 	isb	sy
 80092ee:	f3bf 8f4f 	dsb	sy
 80092f2:	60fb      	str	r3, [r7, #12]
}
 80092f4:	bf00      	nop
 80092f6:	bf00      	nop
 80092f8:	e7fd      	b.n	80092f6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80092fa:	f000 fe8d 	bl	800a018 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80092fe:	4b1d      	ldr	r3, [pc, #116]	@ (8009374 <xTaskCheckForTimeOut+0xc0>)
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	685b      	ldr	r3, [r3, #4]
 8009308:	69ba      	ldr	r2, [r7, #24]
 800930a:	1ad3      	subs	r3, r2, r3
 800930c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800930e:	683b      	ldr	r3, [r7, #0]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009316:	d102      	bne.n	800931e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009318:	2300      	movs	r3, #0
 800931a:	61fb      	str	r3, [r7, #28]
 800931c:	e023      	b.n	8009366 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681a      	ldr	r2, [r3, #0]
 8009322:	4b15      	ldr	r3, [pc, #84]	@ (8009378 <xTaskCheckForTimeOut+0xc4>)
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	429a      	cmp	r2, r3
 8009328:	d007      	beq.n	800933a <xTaskCheckForTimeOut+0x86>
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	685b      	ldr	r3, [r3, #4]
 800932e:	69ba      	ldr	r2, [r7, #24]
 8009330:	429a      	cmp	r2, r3
 8009332:	d302      	bcc.n	800933a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009334:	2301      	movs	r3, #1
 8009336:	61fb      	str	r3, [r7, #28]
 8009338:	e015      	b.n	8009366 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800933a:	683b      	ldr	r3, [r7, #0]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	697a      	ldr	r2, [r7, #20]
 8009340:	429a      	cmp	r2, r3
 8009342:	d20b      	bcs.n	800935c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009344:	683b      	ldr	r3, [r7, #0]
 8009346:	681a      	ldr	r2, [r3, #0]
 8009348:	697b      	ldr	r3, [r7, #20]
 800934a:	1ad2      	subs	r2, r2, r3
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009350:	6878      	ldr	r0, [r7, #4]
 8009352:	f7ff ff99 	bl	8009288 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009356:	2300      	movs	r3, #0
 8009358:	61fb      	str	r3, [r7, #28]
 800935a:	e004      	b.n	8009366 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	2200      	movs	r2, #0
 8009360:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009362:	2301      	movs	r3, #1
 8009364:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009366:	f000 fe89 	bl	800a07c <vPortExitCritical>

	return xReturn;
 800936a:	69fb      	ldr	r3, [r7, #28]
}
 800936c:	4618      	mov	r0, r3
 800936e:	3720      	adds	r7, #32
 8009370:	46bd      	mov	sp, r7
 8009372:	bd80      	pop	{r7, pc}
 8009374:	200096e0 	.word	0x200096e0
 8009378:	200096f4 	.word	0x200096f4

0800937c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800937c:	b480      	push	{r7}
 800937e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009380:	4b03      	ldr	r3, [pc, #12]	@ (8009390 <vTaskMissedYield+0x14>)
 8009382:	2201      	movs	r2, #1
 8009384:	601a      	str	r2, [r3, #0]
}
 8009386:	bf00      	nop
 8009388:	46bd      	mov	sp, r7
 800938a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938e:	4770      	bx	lr
 8009390:	200096f0 	.word	0x200096f0

08009394 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009394:	b580      	push	{r7, lr}
 8009396:	b082      	sub	sp, #8
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800939c:	f000 f852 	bl	8009444 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80093a0:	4b06      	ldr	r3, [pc, #24]	@ (80093bc <prvIdleTask+0x28>)
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	2b01      	cmp	r3, #1
 80093a6:	d9f9      	bls.n	800939c <prvIdleTask+0x8>
			{
				taskYIELD();
 80093a8:	4b05      	ldr	r3, [pc, #20]	@ (80093c0 <prvIdleTask+0x2c>)
 80093aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80093ae:	601a      	str	r2, [r3, #0]
 80093b0:	f3bf 8f4f 	dsb	sy
 80093b4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80093b8:	e7f0      	b.n	800939c <prvIdleTask+0x8>
 80093ba:	bf00      	nop
 80093bc:	2000920c 	.word	0x2000920c
 80093c0:	e000ed04 	.word	0xe000ed04

080093c4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b082      	sub	sp, #8
 80093c8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80093ca:	2300      	movs	r3, #0
 80093cc:	607b      	str	r3, [r7, #4]
 80093ce:	e00c      	b.n	80093ea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80093d0:	687a      	ldr	r2, [r7, #4]
 80093d2:	4613      	mov	r3, r2
 80093d4:	009b      	lsls	r3, r3, #2
 80093d6:	4413      	add	r3, r2
 80093d8:	009b      	lsls	r3, r3, #2
 80093da:	4a12      	ldr	r2, [pc, #72]	@ (8009424 <prvInitialiseTaskLists+0x60>)
 80093dc:	4413      	add	r3, r2
 80093de:	4618      	mov	r0, r3
 80093e0:	f7fe fcae 	bl	8007d40 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	3301      	adds	r3, #1
 80093e8:	607b      	str	r3, [r7, #4]
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	2b37      	cmp	r3, #55	@ 0x37
 80093ee:	d9ef      	bls.n	80093d0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80093f0:	480d      	ldr	r0, [pc, #52]	@ (8009428 <prvInitialiseTaskLists+0x64>)
 80093f2:	f7fe fca5 	bl	8007d40 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80093f6:	480d      	ldr	r0, [pc, #52]	@ (800942c <prvInitialiseTaskLists+0x68>)
 80093f8:	f7fe fca2 	bl	8007d40 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80093fc:	480c      	ldr	r0, [pc, #48]	@ (8009430 <prvInitialiseTaskLists+0x6c>)
 80093fe:	f7fe fc9f 	bl	8007d40 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009402:	480c      	ldr	r0, [pc, #48]	@ (8009434 <prvInitialiseTaskLists+0x70>)
 8009404:	f7fe fc9c 	bl	8007d40 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009408:	480b      	ldr	r0, [pc, #44]	@ (8009438 <prvInitialiseTaskLists+0x74>)
 800940a:	f7fe fc99 	bl	8007d40 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800940e:	4b0b      	ldr	r3, [pc, #44]	@ (800943c <prvInitialiseTaskLists+0x78>)
 8009410:	4a05      	ldr	r2, [pc, #20]	@ (8009428 <prvInitialiseTaskLists+0x64>)
 8009412:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009414:	4b0a      	ldr	r3, [pc, #40]	@ (8009440 <prvInitialiseTaskLists+0x7c>)
 8009416:	4a05      	ldr	r2, [pc, #20]	@ (800942c <prvInitialiseTaskLists+0x68>)
 8009418:	601a      	str	r2, [r3, #0]
}
 800941a:	bf00      	nop
 800941c:	3708      	adds	r7, #8
 800941e:	46bd      	mov	sp, r7
 8009420:	bd80      	pop	{r7, pc}
 8009422:	bf00      	nop
 8009424:	2000920c 	.word	0x2000920c
 8009428:	2000966c 	.word	0x2000966c
 800942c:	20009680 	.word	0x20009680
 8009430:	2000969c 	.word	0x2000969c
 8009434:	200096b0 	.word	0x200096b0
 8009438:	200096c8 	.word	0x200096c8
 800943c:	20009694 	.word	0x20009694
 8009440:	20009698 	.word	0x20009698

08009444 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009444:	b580      	push	{r7, lr}
 8009446:	b082      	sub	sp, #8
 8009448:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800944a:	e019      	b.n	8009480 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800944c:	f000 fde4 	bl	800a018 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009450:	4b10      	ldr	r3, [pc, #64]	@ (8009494 <prvCheckTasksWaitingTermination+0x50>)
 8009452:	68db      	ldr	r3, [r3, #12]
 8009454:	68db      	ldr	r3, [r3, #12]
 8009456:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	3304      	adds	r3, #4
 800945c:	4618      	mov	r0, r3
 800945e:	f7fe fcf9 	bl	8007e54 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009462:	4b0d      	ldr	r3, [pc, #52]	@ (8009498 <prvCheckTasksWaitingTermination+0x54>)
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	3b01      	subs	r3, #1
 8009468:	4a0b      	ldr	r2, [pc, #44]	@ (8009498 <prvCheckTasksWaitingTermination+0x54>)
 800946a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800946c:	4b0b      	ldr	r3, [pc, #44]	@ (800949c <prvCheckTasksWaitingTermination+0x58>)
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	3b01      	subs	r3, #1
 8009472:	4a0a      	ldr	r2, [pc, #40]	@ (800949c <prvCheckTasksWaitingTermination+0x58>)
 8009474:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009476:	f000 fe01 	bl	800a07c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800947a:	6878      	ldr	r0, [r7, #4]
 800947c:	f000 f810 	bl	80094a0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009480:	4b06      	ldr	r3, [pc, #24]	@ (800949c <prvCheckTasksWaitingTermination+0x58>)
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d1e1      	bne.n	800944c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009488:	bf00      	nop
 800948a:	bf00      	nop
 800948c:	3708      	adds	r7, #8
 800948e:	46bd      	mov	sp, r7
 8009490:	bd80      	pop	{r7, pc}
 8009492:	bf00      	nop
 8009494:	200096b0 	.word	0x200096b0
 8009498:	200096dc 	.word	0x200096dc
 800949c:	200096c4 	.word	0x200096c4

080094a0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b084      	sub	sp, #16
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d108      	bne.n	80094c4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094b6:	4618      	mov	r0, r3
 80094b8:	f000 ff9e 	bl	800a3f8 <vPortFree>
				vPortFree( pxTCB );
 80094bc:	6878      	ldr	r0, [r7, #4]
 80094be:	f000 ff9b 	bl	800a3f8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80094c2:	e019      	b.n	80094f8 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80094ca:	2b01      	cmp	r3, #1
 80094cc:	d103      	bne.n	80094d6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80094ce:	6878      	ldr	r0, [r7, #4]
 80094d0:	f000 ff92 	bl	800a3f8 <vPortFree>
	}
 80094d4:	e010      	b.n	80094f8 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80094dc:	2b02      	cmp	r3, #2
 80094de:	d00b      	beq.n	80094f8 <prvDeleteTCB+0x58>
	__asm volatile
 80094e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094e4:	f383 8811 	msr	BASEPRI, r3
 80094e8:	f3bf 8f6f 	isb	sy
 80094ec:	f3bf 8f4f 	dsb	sy
 80094f0:	60fb      	str	r3, [r7, #12]
}
 80094f2:	bf00      	nop
 80094f4:	bf00      	nop
 80094f6:	e7fd      	b.n	80094f4 <prvDeleteTCB+0x54>
	}
 80094f8:	bf00      	nop
 80094fa:	3710      	adds	r7, #16
 80094fc:	46bd      	mov	sp, r7
 80094fe:	bd80      	pop	{r7, pc}

08009500 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009500:	b480      	push	{r7}
 8009502:	b083      	sub	sp, #12
 8009504:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009506:	4b0c      	ldr	r3, [pc, #48]	@ (8009538 <prvResetNextTaskUnblockTime+0x38>)
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	2b00      	cmp	r3, #0
 800950e:	d104      	bne.n	800951a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009510:	4b0a      	ldr	r3, [pc, #40]	@ (800953c <prvResetNextTaskUnblockTime+0x3c>)
 8009512:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009516:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009518:	e008      	b.n	800952c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800951a:	4b07      	ldr	r3, [pc, #28]	@ (8009538 <prvResetNextTaskUnblockTime+0x38>)
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	68db      	ldr	r3, [r3, #12]
 8009520:	68db      	ldr	r3, [r3, #12]
 8009522:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	685b      	ldr	r3, [r3, #4]
 8009528:	4a04      	ldr	r2, [pc, #16]	@ (800953c <prvResetNextTaskUnblockTime+0x3c>)
 800952a:	6013      	str	r3, [r2, #0]
}
 800952c:	bf00      	nop
 800952e:	370c      	adds	r7, #12
 8009530:	46bd      	mov	sp, r7
 8009532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009536:	4770      	bx	lr
 8009538:	20009694 	.word	0x20009694
 800953c:	200096fc 	.word	0x200096fc

08009540 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009540:	b480      	push	{r7}
 8009542:	b083      	sub	sp, #12
 8009544:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009546:	4b0b      	ldr	r3, [pc, #44]	@ (8009574 <xTaskGetSchedulerState+0x34>)
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d102      	bne.n	8009554 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800954e:	2301      	movs	r3, #1
 8009550:	607b      	str	r3, [r7, #4]
 8009552:	e008      	b.n	8009566 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009554:	4b08      	ldr	r3, [pc, #32]	@ (8009578 <xTaskGetSchedulerState+0x38>)
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	2b00      	cmp	r3, #0
 800955a:	d102      	bne.n	8009562 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800955c:	2302      	movs	r3, #2
 800955e:	607b      	str	r3, [r7, #4]
 8009560:	e001      	b.n	8009566 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009562:	2300      	movs	r3, #0
 8009564:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009566:	687b      	ldr	r3, [r7, #4]
	}
 8009568:	4618      	mov	r0, r3
 800956a:	370c      	adds	r7, #12
 800956c:	46bd      	mov	sp, r7
 800956e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009572:	4770      	bx	lr
 8009574:	200096e8 	.word	0x200096e8
 8009578:	20009704 	.word	0x20009704

0800957c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800957c:	b580      	push	{r7, lr}
 800957e:	b086      	sub	sp, #24
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009588:	2300      	movs	r3, #0
 800958a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d058      	beq.n	8009644 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009592:	4b2f      	ldr	r3, [pc, #188]	@ (8009650 <xTaskPriorityDisinherit+0xd4>)
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	693a      	ldr	r2, [r7, #16]
 8009598:	429a      	cmp	r2, r3
 800959a:	d00b      	beq.n	80095b4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800959c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095a0:	f383 8811 	msr	BASEPRI, r3
 80095a4:	f3bf 8f6f 	isb	sy
 80095a8:	f3bf 8f4f 	dsb	sy
 80095ac:	60fb      	str	r3, [r7, #12]
}
 80095ae:	bf00      	nop
 80095b0:	bf00      	nop
 80095b2:	e7fd      	b.n	80095b0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80095b4:	693b      	ldr	r3, [r7, #16]
 80095b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d10b      	bne.n	80095d4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80095bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095c0:	f383 8811 	msr	BASEPRI, r3
 80095c4:	f3bf 8f6f 	isb	sy
 80095c8:	f3bf 8f4f 	dsb	sy
 80095cc:	60bb      	str	r3, [r7, #8]
}
 80095ce:	bf00      	nop
 80095d0:	bf00      	nop
 80095d2:	e7fd      	b.n	80095d0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80095d4:	693b      	ldr	r3, [r7, #16]
 80095d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80095d8:	1e5a      	subs	r2, r3, #1
 80095da:	693b      	ldr	r3, [r7, #16]
 80095dc:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80095de:	693b      	ldr	r3, [r7, #16]
 80095e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80095e2:	693b      	ldr	r3, [r7, #16]
 80095e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80095e6:	429a      	cmp	r2, r3
 80095e8:	d02c      	beq.n	8009644 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80095ea:	693b      	ldr	r3, [r7, #16]
 80095ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d128      	bne.n	8009644 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80095f2:	693b      	ldr	r3, [r7, #16]
 80095f4:	3304      	adds	r3, #4
 80095f6:	4618      	mov	r0, r3
 80095f8:	f7fe fc2c 	bl	8007e54 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80095fc:	693b      	ldr	r3, [r7, #16]
 80095fe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009600:	693b      	ldr	r3, [r7, #16]
 8009602:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009604:	693b      	ldr	r3, [r7, #16]
 8009606:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009608:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800960c:	693b      	ldr	r3, [r7, #16]
 800960e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009610:	693b      	ldr	r3, [r7, #16]
 8009612:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009614:	4b0f      	ldr	r3, [pc, #60]	@ (8009654 <xTaskPriorityDisinherit+0xd8>)
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	429a      	cmp	r2, r3
 800961a:	d903      	bls.n	8009624 <xTaskPriorityDisinherit+0xa8>
 800961c:	693b      	ldr	r3, [r7, #16]
 800961e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009620:	4a0c      	ldr	r2, [pc, #48]	@ (8009654 <xTaskPriorityDisinherit+0xd8>)
 8009622:	6013      	str	r3, [r2, #0]
 8009624:	693b      	ldr	r3, [r7, #16]
 8009626:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009628:	4613      	mov	r3, r2
 800962a:	009b      	lsls	r3, r3, #2
 800962c:	4413      	add	r3, r2
 800962e:	009b      	lsls	r3, r3, #2
 8009630:	4a09      	ldr	r2, [pc, #36]	@ (8009658 <xTaskPriorityDisinherit+0xdc>)
 8009632:	441a      	add	r2, r3
 8009634:	693b      	ldr	r3, [r7, #16]
 8009636:	3304      	adds	r3, #4
 8009638:	4619      	mov	r1, r3
 800963a:	4610      	mov	r0, r2
 800963c:	f7fe fbad 	bl	8007d9a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009640:	2301      	movs	r3, #1
 8009642:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009644:	697b      	ldr	r3, [r7, #20]
	}
 8009646:	4618      	mov	r0, r3
 8009648:	3718      	adds	r7, #24
 800964a:	46bd      	mov	sp, r7
 800964c:	bd80      	pop	{r7, pc}
 800964e:	bf00      	nop
 8009650:	20009208 	.word	0x20009208
 8009654:	200096e4 	.word	0x200096e4
 8009658:	2000920c 	.word	0x2000920c

0800965c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b084      	sub	sp, #16
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
 8009664:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009666:	4b21      	ldr	r3, [pc, #132]	@ (80096ec <prvAddCurrentTaskToDelayedList+0x90>)
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800966c:	4b20      	ldr	r3, [pc, #128]	@ (80096f0 <prvAddCurrentTaskToDelayedList+0x94>)
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	3304      	adds	r3, #4
 8009672:	4618      	mov	r0, r3
 8009674:	f7fe fbee 	bl	8007e54 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800967e:	d10a      	bne.n	8009696 <prvAddCurrentTaskToDelayedList+0x3a>
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d007      	beq.n	8009696 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009686:	4b1a      	ldr	r3, [pc, #104]	@ (80096f0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	3304      	adds	r3, #4
 800968c:	4619      	mov	r1, r3
 800968e:	4819      	ldr	r0, [pc, #100]	@ (80096f4 <prvAddCurrentTaskToDelayedList+0x98>)
 8009690:	f7fe fb83 	bl	8007d9a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009694:	e026      	b.n	80096e4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009696:	68fa      	ldr	r2, [r7, #12]
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	4413      	add	r3, r2
 800969c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800969e:	4b14      	ldr	r3, [pc, #80]	@ (80096f0 <prvAddCurrentTaskToDelayedList+0x94>)
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	68ba      	ldr	r2, [r7, #8]
 80096a4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80096a6:	68ba      	ldr	r2, [r7, #8]
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	429a      	cmp	r2, r3
 80096ac:	d209      	bcs.n	80096c2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80096ae:	4b12      	ldr	r3, [pc, #72]	@ (80096f8 <prvAddCurrentTaskToDelayedList+0x9c>)
 80096b0:	681a      	ldr	r2, [r3, #0]
 80096b2:	4b0f      	ldr	r3, [pc, #60]	@ (80096f0 <prvAddCurrentTaskToDelayedList+0x94>)
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	3304      	adds	r3, #4
 80096b8:	4619      	mov	r1, r3
 80096ba:	4610      	mov	r0, r2
 80096bc:	f7fe fb91 	bl	8007de2 <vListInsert>
}
 80096c0:	e010      	b.n	80096e4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80096c2:	4b0e      	ldr	r3, [pc, #56]	@ (80096fc <prvAddCurrentTaskToDelayedList+0xa0>)
 80096c4:	681a      	ldr	r2, [r3, #0]
 80096c6:	4b0a      	ldr	r3, [pc, #40]	@ (80096f0 <prvAddCurrentTaskToDelayedList+0x94>)
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	3304      	adds	r3, #4
 80096cc:	4619      	mov	r1, r3
 80096ce:	4610      	mov	r0, r2
 80096d0:	f7fe fb87 	bl	8007de2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80096d4:	4b0a      	ldr	r3, [pc, #40]	@ (8009700 <prvAddCurrentTaskToDelayedList+0xa4>)
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	68ba      	ldr	r2, [r7, #8]
 80096da:	429a      	cmp	r2, r3
 80096dc:	d202      	bcs.n	80096e4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80096de:	4a08      	ldr	r2, [pc, #32]	@ (8009700 <prvAddCurrentTaskToDelayedList+0xa4>)
 80096e0:	68bb      	ldr	r3, [r7, #8]
 80096e2:	6013      	str	r3, [r2, #0]
}
 80096e4:	bf00      	nop
 80096e6:	3710      	adds	r7, #16
 80096e8:	46bd      	mov	sp, r7
 80096ea:	bd80      	pop	{r7, pc}
 80096ec:	200096e0 	.word	0x200096e0
 80096f0:	20009208 	.word	0x20009208
 80096f4:	200096c8 	.word	0x200096c8
 80096f8:	20009698 	.word	0x20009698
 80096fc:	20009694 	.word	0x20009694
 8009700:	200096fc 	.word	0x200096fc

08009704 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009704:	b580      	push	{r7, lr}
 8009706:	b08a      	sub	sp, #40	@ 0x28
 8009708:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800970a:	2300      	movs	r3, #0
 800970c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800970e:	f000 fb13 	bl	8009d38 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009712:	4b1d      	ldr	r3, [pc, #116]	@ (8009788 <xTimerCreateTimerTask+0x84>)
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d021      	beq.n	800975e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800971a:	2300      	movs	r3, #0
 800971c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800971e:	2300      	movs	r3, #0
 8009720:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009722:	1d3a      	adds	r2, r7, #4
 8009724:	f107 0108 	add.w	r1, r7, #8
 8009728:	f107 030c 	add.w	r3, r7, #12
 800972c:	4618      	mov	r0, r3
 800972e:	f7fe faed 	bl	8007d0c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009732:	6879      	ldr	r1, [r7, #4]
 8009734:	68bb      	ldr	r3, [r7, #8]
 8009736:	68fa      	ldr	r2, [r7, #12]
 8009738:	9202      	str	r2, [sp, #8]
 800973a:	9301      	str	r3, [sp, #4]
 800973c:	2302      	movs	r3, #2
 800973e:	9300      	str	r3, [sp, #0]
 8009740:	2300      	movs	r3, #0
 8009742:	460a      	mov	r2, r1
 8009744:	4911      	ldr	r1, [pc, #68]	@ (800978c <xTimerCreateTimerTask+0x88>)
 8009746:	4812      	ldr	r0, [pc, #72]	@ (8009790 <xTimerCreateTimerTask+0x8c>)
 8009748:	f7ff f8a8 	bl	800889c <xTaskCreateStatic>
 800974c:	4603      	mov	r3, r0
 800974e:	4a11      	ldr	r2, [pc, #68]	@ (8009794 <xTimerCreateTimerTask+0x90>)
 8009750:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009752:	4b10      	ldr	r3, [pc, #64]	@ (8009794 <xTimerCreateTimerTask+0x90>)
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d001      	beq.n	800975e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800975a:	2301      	movs	r3, #1
 800975c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800975e:	697b      	ldr	r3, [r7, #20]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d10b      	bne.n	800977c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8009764:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009768:	f383 8811 	msr	BASEPRI, r3
 800976c:	f3bf 8f6f 	isb	sy
 8009770:	f3bf 8f4f 	dsb	sy
 8009774:	613b      	str	r3, [r7, #16]
}
 8009776:	bf00      	nop
 8009778:	bf00      	nop
 800977a:	e7fd      	b.n	8009778 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800977c:	697b      	ldr	r3, [r7, #20]
}
 800977e:	4618      	mov	r0, r3
 8009780:	3718      	adds	r7, #24
 8009782:	46bd      	mov	sp, r7
 8009784:	bd80      	pop	{r7, pc}
 8009786:	bf00      	nop
 8009788:	20009738 	.word	0x20009738
 800978c:	0801c5f0 	.word	0x0801c5f0
 8009790:	080098d1 	.word	0x080098d1
 8009794:	2000973c 	.word	0x2000973c

08009798 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b08a      	sub	sp, #40	@ 0x28
 800979c:	af00      	add	r7, sp, #0
 800979e:	60f8      	str	r0, [r7, #12]
 80097a0:	60b9      	str	r1, [r7, #8]
 80097a2:	607a      	str	r2, [r7, #4]
 80097a4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80097a6:	2300      	movs	r3, #0
 80097a8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d10b      	bne.n	80097c8 <xTimerGenericCommand+0x30>
	__asm volatile
 80097b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097b4:	f383 8811 	msr	BASEPRI, r3
 80097b8:	f3bf 8f6f 	isb	sy
 80097bc:	f3bf 8f4f 	dsb	sy
 80097c0:	623b      	str	r3, [r7, #32]
}
 80097c2:	bf00      	nop
 80097c4:	bf00      	nop
 80097c6:	e7fd      	b.n	80097c4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80097c8:	4b19      	ldr	r3, [pc, #100]	@ (8009830 <xTimerGenericCommand+0x98>)
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d02a      	beq.n	8009826 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80097d0:	68bb      	ldr	r3, [r7, #8]
 80097d2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80097dc:	68bb      	ldr	r3, [r7, #8]
 80097de:	2b05      	cmp	r3, #5
 80097e0:	dc18      	bgt.n	8009814 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80097e2:	f7ff fead 	bl	8009540 <xTaskGetSchedulerState>
 80097e6:	4603      	mov	r3, r0
 80097e8:	2b02      	cmp	r3, #2
 80097ea:	d109      	bne.n	8009800 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80097ec:	4b10      	ldr	r3, [pc, #64]	@ (8009830 <xTimerGenericCommand+0x98>)
 80097ee:	6818      	ldr	r0, [r3, #0]
 80097f0:	f107 0110 	add.w	r1, r7, #16
 80097f4:	2300      	movs	r3, #0
 80097f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80097f8:	f7fe fc60 	bl	80080bc <xQueueGenericSend>
 80097fc:	6278      	str	r0, [r7, #36]	@ 0x24
 80097fe:	e012      	b.n	8009826 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009800:	4b0b      	ldr	r3, [pc, #44]	@ (8009830 <xTimerGenericCommand+0x98>)
 8009802:	6818      	ldr	r0, [r3, #0]
 8009804:	f107 0110 	add.w	r1, r7, #16
 8009808:	2300      	movs	r3, #0
 800980a:	2200      	movs	r2, #0
 800980c:	f7fe fc56 	bl	80080bc <xQueueGenericSend>
 8009810:	6278      	str	r0, [r7, #36]	@ 0x24
 8009812:	e008      	b.n	8009826 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009814:	4b06      	ldr	r3, [pc, #24]	@ (8009830 <xTimerGenericCommand+0x98>)
 8009816:	6818      	ldr	r0, [r3, #0]
 8009818:	f107 0110 	add.w	r1, r7, #16
 800981c:	2300      	movs	r3, #0
 800981e:	683a      	ldr	r2, [r7, #0]
 8009820:	f7fe fd4e 	bl	80082c0 <xQueueGenericSendFromISR>
 8009824:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009828:	4618      	mov	r0, r3
 800982a:	3728      	adds	r7, #40	@ 0x28
 800982c:	46bd      	mov	sp, r7
 800982e:	bd80      	pop	{r7, pc}
 8009830:	20009738 	.word	0x20009738

08009834 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b088      	sub	sp, #32
 8009838:	af02      	add	r7, sp, #8
 800983a:	6078      	str	r0, [r7, #4]
 800983c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800983e:	4b23      	ldr	r3, [pc, #140]	@ (80098cc <prvProcessExpiredTimer+0x98>)
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	68db      	ldr	r3, [r3, #12]
 8009844:	68db      	ldr	r3, [r3, #12]
 8009846:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009848:	697b      	ldr	r3, [r7, #20]
 800984a:	3304      	adds	r3, #4
 800984c:	4618      	mov	r0, r3
 800984e:	f7fe fb01 	bl	8007e54 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009852:	697b      	ldr	r3, [r7, #20]
 8009854:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009858:	f003 0304 	and.w	r3, r3, #4
 800985c:	2b00      	cmp	r3, #0
 800985e:	d023      	beq.n	80098a8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009860:	697b      	ldr	r3, [r7, #20]
 8009862:	699a      	ldr	r2, [r3, #24]
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	18d1      	adds	r1, r2, r3
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	683a      	ldr	r2, [r7, #0]
 800986c:	6978      	ldr	r0, [r7, #20]
 800986e:	f000 f8d5 	bl	8009a1c <prvInsertTimerInActiveList>
 8009872:	4603      	mov	r3, r0
 8009874:	2b00      	cmp	r3, #0
 8009876:	d020      	beq.n	80098ba <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009878:	2300      	movs	r3, #0
 800987a:	9300      	str	r3, [sp, #0]
 800987c:	2300      	movs	r3, #0
 800987e:	687a      	ldr	r2, [r7, #4]
 8009880:	2100      	movs	r1, #0
 8009882:	6978      	ldr	r0, [r7, #20]
 8009884:	f7ff ff88 	bl	8009798 <xTimerGenericCommand>
 8009888:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800988a:	693b      	ldr	r3, [r7, #16]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d114      	bne.n	80098ba <prvProcessExpiredTimer+0x86>
	__asm volatile
 8009890:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009894:	f383 8811 	msr	BASEPRI, r3
 8009898:	f3bf 8f6f 	isb	sy
 800989c:	f3bf 8f4f 	dsb	sy
 80098a0:	60fb      	str	r3, [r7, #12]
}
 80098a2:	bf00      	nop
 80098a4:	bf00      	nop
 80098a6:	e7fd      	b.n	80098a4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80098a8:	697b      	ldr	r3, [r7, #20]
 80098aa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80098ae:	f023 0301 	bic.w	r3, r3, #1
 80098b2:	b2da      	uxtb	r2, r3
 80098b4:	697b      	ldr	r3, [r7, #20]
 80098b6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80098ba:	697b      	ldr	r3, [r7, #20]
 80098bc:	6a1b      	ldr	r3, [r3, #32]
 80098be:	6978      	ldr	r0, [r7, #20]
 80098c0:	4798      	blx	r3
}
 80098c2:	bf00      	nop
 80098c4:	3718      	adds	r7, #24
 80098c6:	46bd      	mov	sp, r7
 80098c8:	bd80      	pop	{r7, pc}
 80098ca:	bf00      	nop
 80098cc:	20009730 	.word	0x20009730

080098d0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80098d0:	b580      	push	{r7, lr}
 80098d2:	b084      	sub	sp, #16
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80098d8:	f107 0308 	add.w	r3, r7, #8
 80098dc:	4618      	mov	r0, r3
 80098de:	f000 f859 	bl	8009994 <prvGetNextExpireTime>
 80098e2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80098e4:	68bb      	ldr	r3, [r7, #8]
 80098e6:	4619      	mov	r1, r3
 80098e8:	68f8      	ldr	r0, [r7, #12]
 80098ea:	f000 f805 	bl	80098f8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80098ee:	f000 f8d7 	bl	8009aa0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80098f2:	bf00      	nop
 80098f4:	e7f0      	b.n	80098d8 <prvTimerTask+0x8>
	...

080098f8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b084      	sub	sp, #16
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
 8009900:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009902:	f7ff fa0f 	bl	8008d24 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009906:	f107 0308 	add.w	r3, r7, #8
 800990a:	4618      	mov	r0, r3
 800990c:	f000 f866 	bl	80099dc <prvSampleTimeNow>
 8009910:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009912:	68bb      	ldr	r3, [r7, #8]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d130      	bne.n	800997a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009918:	683b      	ldr	r3, [r7, #0]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d10a      	bne.n	8009934 <prvProcessTimerOrBlockTask+0x3c>
 800991e:	687a      	ldr	r2, [r7, #4]
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	429a      	cmp	r2, r3
 8009924:	d806      	bhi.n	8009934 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009926:	f7ff fa0b 	bl	8008d40 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800992a:	68f9      	ldr	r1, [r7, #12]
 800992c:	6878      	ldr	r0, [r7, #4]
 800992e:	f7ff ff81 	bl	8009834 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009932:	e024      	b.n	800997e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009934:	683b      	ldr	r3, [r7, #0]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d008      	beq.n	800994c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800993a:	4b13      	ldr	r3, [pc, #76]	@ (8009988 <prvProcessTimerOrBlockTask+0x90>)
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	2b00      	cmp	r3, #0
 8009942:	d101      	bne.n	8009948 <prvProcessTimerOrBlockTask+0x50>
 8009944:	2301      	movs	r3, #1
 8009946:	e000      	b.n	800994a <prvProcessTimerOrBlockTask+0x52>
 8009948:	2300      	movs	r3, #0
 800994a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800994c:	4b0f      	ldr	r3, [pc, #60]	@ (800998c <prvProcessTimerOrBlockTask+0x94>)
 800994e:	6818      	ldr	r0, [r3, #0]
 8009950:	687a      	ldr	r2, [r7, #4]
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	1ad3      	subs	r3, r2, r3
 8009956:	683a      	ldr	r2, [r7, #0]
 8009958:	4619      	mov	r1, r3
 800995a:	f7fe ff6b 	bl	8008834 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800995e:	f7ff f9ef 	bl	8008d40 <xTaskResumeAll>
 8009962:	4603      	mov	r3, r0
 8009964:	2b00      	cmp	r3, #0
 8009966:	d10a      	bne.n	800997e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009968:	4b09      	ldr	r3, [pc, #36]	@ (8009990 <prvProcessTimerOrBlockTask+0x98>)
 800996a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800996e:	601a      	str	r2, [r3, #0]
 8009970:	f3bf 8f4f 	dsb	sy
 8009974:	f3bf 8f6f 	isb	sy
}
 8009978:	e001      	b.n	800997e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800997a:	f7ff f9e1 	bl	8008d40 <xTaskResumeAll>
}
 800997e:	bf00      	nop
 8009980:	3710      	adds	r7, #16
 8009982:	46bd      	mov	sp, r7
 8009984:	bd80      	pop	{r7, pc}
 8009986:	bf00      	nop
 8009988:	20009734 	.word	0x20009734
 800998c:	20009738 	.word	0x20009738
 8009990:	e000ed04 	.word	0xe000ed04

08009994 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009994:	b480      	push	{r7}
 8009996:	b085      	sub	sp, #20
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800999c:	4b0e      	ldr	r3, [pc, #56]	@ (80099d8 <prvGetNextExpireTime+0x44>)
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d101      	bne.n	80099aa <prvGetNextExpireTime+0x16>
 80099a6:	2201      	movs	r2, #1
 80099a8:	e000      	b.n	80099ac <prvGetNextExpireTime+0x18>
 80099aa:	2200      	movs	r2, #0
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d105      	bne.n	80099c4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80099b8:	4b07      	ldr	r3, [pc, #28]	@ (80099d8 <prvGetNextExpireTime+0x44>)
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	68db      	ldr	r3, [r3, #12]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	60fb      	str	r3, [r7, #12]
 80099c2:	e001      	b.n	80099c8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80099c4:	2300      	movs	r3, #0
 80099c6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80099c8:	68fb      	ldr	r3, [r7, #12]
}
 80099ca:	4618      	mov	r0, r3
 80099cc:	3714      	adds	r7, #20
 80099ce:	46bd      	mov	sp, r7
 80099d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d4:	4770      	bx	lr
 80099d6:	bf00      	nop
 80099d8:	20009730 	.word	0x20009730

080099dc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	b084      	sub	sp, #16
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80099e4:	f7ff fa4a 	bl	8008e7c <xTaskGetTickCount>
 80099e8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80099ea:	4b0b      	ldr	r3, [pc, #44]	@ (8009a18 <prvSampleTimeNow+0x3c>)
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	68fa      	ldr	r2, [r7, #12]
 80099f0:	429a      	cmp	r2, r3
 80099f2:	d205      	bcs.n	8009a00 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80099f4:	f000 f93a 	bl	8009c6c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	2201      	movs	r2, #1
 80099fc:	601a      	str	r2, [r3, #0]
 80099fe:	e002      	b.n	8009a06 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	2200      	movs	r2, #0
 8009a04:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009a06:	4a04      	ldr	r2, [pc, #16]	@ (8009a18 <prvSampleTimeNow+0x3c>)
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009a0c:	68fb      	ldr	r3, [r7, #12]
}
 8009a0e:	4618      	mov	r0, r3
 8009a10:	3710      	adds	r7, #16
 8009a12:	46bd      	mov	sp, r7
 8009a14:	bd80      	pop	{r7, pc}
 8009a16:	bf00      	nop
 8009a18:	20009740 	.word	0x20009740

08009a1c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b086      	sub	sp, #24
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	60f8      	str	r0, [r7, #12]
 8009a24:	60b9      	str	r1, [r7, #8]
 8009a26:	607a      	str	r2, [r7, #4]
 8009a28:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	68ba      	ldr	r2, [r7, #8]
 8009a32:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	68fa      	ldr	r2, [r7, #12]
 8009a38:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009a3a:	68ba      	ldr	r2, [r7, #8]
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	429a      	cmp	r2, r3
 8009a40:	d812      	bhi.n	8009a68 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a42:	687a      	ldr	r2, [r7, #4]
 8009a44:	683b      	ldr	r3, [r7, #0]
 8009a46:	1ad2      	subs	r2, r2, r3
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	699b      	ldr	r3, [r3, #24]
 8009a4c:	429a      	cmp	r2, r3
 8009a4e:	d302      	bcc.n	8009a56 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009a50:	2301      	movs	r3, #1
 8009a52:	617b      	str	r3, [r7, #20]
 8009a54:	e01b      	b.n	8009a8e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009a56:	4b10      	ldr	r3, [pc, #64]	@ (8009a98 <prvInsertTimerInActiveList+0x7c>)
 8009a58:	681a      	ldr	r2, [r3, #0]
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	3304      	adds	r3, #4
 8009a5e:	4619      	mov	r1, r3
 8009a60:	4610      	mov	r0, r2
 8009a62:	f7fe f9be 	bl	8007de2 <vListInsert>
 8009a66:	e012      	b.n	8009a8e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009a68:	687a      	ldr	r2, [r7, #4]
 8009a6a:	683b      	ldr	r3, [r7, #0]
 8009a6c:	429a      	cmp	r2, r3
 8009a6e:	d206      	bcs.n	8009a7e <prvInsertTimerInActiveList+0x62>
 8009a70:	68ba      	ldr	r2, [r7, #8]
 8009a72:	683b      	ldr	r3, [r7, #0]
 8009a74:	429a      	cmp	r2, r3
 8009a76:	d302      	bcc.n	8009a7e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009a78:	2301      	movs	r3, #1
 8009a7a:	617b      	str	r3, [r7, #20]
 8009a7c:	e007      	b.n	8009a8e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009a7e:	4b07      	ldr	r3, [pc, #28]	@ (8009a9c <prvInsertTimerInActiveList+0x80>)
 8009a80:	681a      	ldr	r2, [r3, #0]
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	3304      	adds	r3, #4
 8009a86:	4619      	mov	r1, r3
 8009a88:	4610      	mov	r0, r2
 8009a8a:	f7fe f9aa 	bl	8007de2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009a8e:	697b      	ldr	r3, [r7, #20]
}
 8009a90:	4618      	mov	r0, r3
 8009a92:	3718      	adds	r7, #24
 8009a94:	46bd      	mov	sp, r7
 8009a96:	bd80      	pop	{r7, pc}
 8009a98:	20009734 	.word	0x20009734
 8009a9c:	20009730 	.word	0x20009730

08009aa0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b08e      	sub	sp, #56	@ 0x38
 8009aa4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009aa6:	e0ce      	b.n	8009c46 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	da19      	bge.n	8009ae2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009aae:	1d3b      	adds	r3, r7, #4
 8009ab0:	3304      	adds	r3, #4
 8009ab2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009ab4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d10b      	bne.n	8009ad2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8009aba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009abe:	f383 8811 	msr	BASEPRI, r3
 8009ac2:	f3bf 8f6f 	isb	sy
 8009ac6:	f3bf 8f4f 	dsb	sy
 8009aca:	61fb      	str	r3, [r7, #28]
}
 8009acc:	bf00      	nop
 8009ace:	bf00      	nop
 8009ad0:	e7fd      	b.n	8009ace <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009ad2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009ad8:	6850      	ldr	r0, [r2, #4]
 8009ada:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009adc:	6892      	ldr	r2, [r2, #8]
 8009ade:	4611      	mov	r1, r2
 8009ae0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	f2c0 80ae 	blt.w	8009c46 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009aee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009af0:	695b      	ldr	r3, [r3, #20]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d004      	beq.n	8009b00 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009af6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009af8:	3304      	adds	r3, #4
 8009afa:	4618      	mov	r0, r3
 8009afc:	f7fe f9aa 	bl	8007e54 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009b00:	463b      	mov	r3, r7
 8009b02:	4618      	mov	r0, r3
 8009b04:	f7ff ff6a 	bl	80099dc <prvSampleTimeNow>
 8009b08:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	2b09      	cmp	r3, #9
 8009b0e:	f200 8097 	bhi.w	8009c40 <prvProcessReceivedCommands+0x1a0>
 8009b12:	a201      	add	r2, pc, #4	@ (adr r2, 8009b18 <prvProcessReceivedCommands+0x78>)
 8009b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b18:	08009b41 	.word	0x08009b41
 8009b1c:	08009b41 	.word	0x08009b41
 8009b20:	08009b41 	.word	0x08009b41
 8009b24:	08009bb7 	.word	0x08009bb7
 8009b28:	08009bcb 	.word	0x08009bcb
 8009b2c:	08009c17 	.word	0x08009c17
 8009b30:	08009b41 	.word	0x08009b41
 8009b34:	08009b41 	.word	0x08009b41
 8009b38:	08009bb7 	.word	0x08009bb7
 8009b3c:	08009bcb 	.word	0x08009bcb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009b40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b42:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009b46:	f043 0301 	orr.w	r3, r3, #1
 8009b4a:	b2da      	uxtb	r2, r3
 8009b4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b4e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009b52:	68ba      	ldr	r2, [r7, #8]
 8009b54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b56:	699b      	ldr	r3, [r3, #24]
 8009b58:	18d1      	adds	r1, r2, r3
 8009b5a:	68bb      	ldr	r3, [r7, #8]
 8009b5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009b5e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009b60:	f7ff ff5c 	bl	8009a1c <prvInsertTimerInActiveList>
 8009b64:	4603      	mov	r3, r0
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d06c      	beq.n	8009c44 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009b6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b6c:	6a1b      	ldr	r3, [r3, #32]
 8009b6e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009b70:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009b72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b74:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009b78:	f003 0304 	and.w	r3, r3, #4
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d061      	beq.n	8009c44 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009b80:	68ba      	ldr	r2, [r7, #8]
 8009b82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b84:	699b      	ldr	r3, [r3, #24]
 8009b86:	441a      	add	r2, r3
 8009b88:	2300      	movs	r3, #0
 8009b8a:	9300      	str	r3, [sp, #0]
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	2100      	movs	r1, #0
 8009b90:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009b92:	f7ff fe01 	bl	8009798 <xTimerGenericCommand>
 8009b96:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009b98:	6a3b      	ldr	r3, [r7, #32]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d152      	bne.n	8009c44 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8009b9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ba2:	f383 8811 	msr	BASEPRI, r3
 8009ba6:	f3bf 8f6f 	isb	sy
 8009baa:	f3bf 8f4f 	dsb	sy
 8009bae:	61bb      	str	r3, [r7, #24]
}
 8009bb0:	bf00      	nop
 8009bb2:	bf00      	nop
 8009bb4:	e7fd      	b.n	8009bb2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009bb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bb8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009bbc:	f023 0301 	bic.w	r3, r3, #1
 8009bc0:	b2da      	uxtb	r2, r3
 8009bc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bc4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009bc8:	e03d      	b.n	8009c46 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009bca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bcc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009bd0:	f043 0301 	orr.w	r3, r3, #1
 8009bd4:	b2da      	uxtb	r2, r3
 8009bd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bd8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009bdc:	68ba      	ldr	r2, [r7, #8]
 8009bde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009be0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009be2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009be4:	699b      	ldr	r3, [r3, #24]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d10b      	bne.n	8009c02 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8009bea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bee:	f383 8811 	msr	BASEPRI, r3
 8009bf2:	f3bf 8f6f 	isb	sy
 8009bf6:	f3bf 8f4f 	dsb	sy
 8009bfa:	617b      	str	r3, [r7, #20]
}
 8009bfc:	bf00      	nop
 8009bfe:	bf00      	nop
 8009c00:	e7fd      	b.n	8009bfe <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009c02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c04:	699a      	ldr	r2, [r3, #24]
 8009c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c08:	18d1      	adds	r1, r2, r3
 8009c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009c0e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009c10:	f7ff ff04 	bl	8009a1c <prvInsertTimerInActiveList>
					break;
 8009c14:	e017      	b.n	8009c46 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009c16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c18:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009c1c:	f003 0302 	and.w	r3, r3, #2
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d103      	bne.n	8009c2c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8009c24:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009c26:	f000 fbe7 	bl	800a3f8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009c2a:	e00c      	b.n	8009c46 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009c2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c2e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009c32:	f023 0301 	bic.w	r3, r3, #1
 8009c36:	b2da      	uxtb	r2, r3
 8009c38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c3a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009c3e:	e002      	b.n	8009c46 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8009c40:	bf00      	nop
 8009c42:	e000      	b.n	8009c46 <prvProcessReceivedCommands+0x1a6>
					break;
 8009c44:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009c46:	4b08      	ldr	r3, [pc, #32]	@ (8009c68 <prvProcessReceivedCommands+0x1c8>)
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	1d39      	adds	r1, r7, #4
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	4618      	mov	r0, r3
 8009c50:	f7fe fbd4 	bl	80083fc <xQueueReceive>
 8009c54:	4603      	mov	r3, r0
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	f47f af26 	bne.w	8009aa8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009c5c:	bf00      	nop
 8009c5e:	bf00      	nop
 8009c60:	3730      	adds	r7, #48	@ 0x30
 8009c62:	46bd      	mov	sp, r7
 8009c64:	bd80      	pop	{r7, pc}
 8009c66:	bf00      	nop
 8009c68:	20009738 	.word	0x20009738

08009c6c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b088      	sub	sp, #32
 8009c70:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009c72:	e049      	b.n	8009d08 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009c74:	4b2e      	ldr	r3, [pc, #184]	@ (8009d30 <prvSwitchTimerLists+0xc4>)
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	68db      	ldr	r3, [r3, #12]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c7e:	4b2c      	ldr	r3, [pc, #176]	@ (8009d30 <prvSwitchTimerLists+0xc4>)
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	68db      	ldr	r3, [r3, #12]
 8009c84:	68db      	ldr	r3, [r3, #12]
 8009c86:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	3304      	adds	r3, #4
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	f7fe f8e1 	bl	8007e54 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	6a1b      	ldr	r3, [r3, #32]
 8009c96:	68f8      	ldr	r0, [r7, #12]
 8009c98:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009ca0:	f003 0304 	and.w	r3, r3, #4
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d02f      	beq.n	8009d08 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	699b      	ldr	r3, [r3, #24]
 8009cac:	693a      	ldr	r2, [r7, #16]
 8009cae:	4413      	add	r3, r2
 8009cb0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009cb2:	68ba      	ldr	r2, [r7, #8]
 8009cb4:	693b      	ldr	r3, [r7, #16]
 8009cb6:	429a      	cmp	r2, r3
 8009cb8:	d90e      	bls.n	8009cd8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	68ba      	ldr	r2, [r7, #8]
 8009cbe:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	68fa      	ldr	r2, [r7, #12]
 8009cc4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009cc6:	4b1a      	ldr	r3, [pc, #104]	@ (8009d30 <prvSwitchTimerLists+0xc4>)
 8009cc8:	681a      	ldr	r2, [r3, #0]
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	3304      	adds	r3, #4
 8009cce:	4619      	mov	r1, r3
 8009cd0:	4610      	mov	r0, r2
 8009cd2:	f7fe f886 	bl	8007de2 <vListInsert>
 8009cd6:	e017      	b.n	8009d08 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009cd8:	2300      	movs	r3, #0
 8009cda:	9300      	str	r3, [sp, #0]
 8009cdc:	2300      	movs	r3, #0
 8009cde:	693a      	ldr	r2, [r7, #16]
 8009ce0:	2100      	movs	r1, #0
 8009ce2:	68f8      	ldr	r0, [r7, #12]
 8009ce4:	f7ff fd58 	bl	8009798 <xTimerGenericCommand>
 8009ce8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d10b      	bne.n	8009d08 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8009cf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cf4:	f383 8811 	msr	BASEPRI, r3
 8009cf8:	f3bf 8f6f 	isb	sy
 8009cfc:	f3bf 8f4f 	dsb	sy
 8009d00:	603b      	str	r3, [r7, #0]
}
 8009d02:	bf00      	nop
 8009d04:	bf00      	nop
 8009d06:	e7fd      	b.n	8009d04 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009d08:	4b09      	ldr	r3, [pc, #36]	@ (8009d30 <prvSwitchTimerLists+0xc4>)
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d1b0      	bne.n	8009c74 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009d12:	4b07      	ldr	r3, [pc, #28]	@ (8009d30 <prvSwitchTimerLists+0xc4>)
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009d18:	4b06      	ldr	r3, [pc, #24]	@ (8009d34 <prvSwitchTimerLists+0xc8>)
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	4a04      	ldr	r2, [pc, #16]	@ (8009d30 <prvSwitchTimerLists+0xc4>)
 8009d1e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009d20:	4a04      	ldr	r2, [pc, #16]	@ (8009d34 <prvSwitchTimerLists+0xc8>)
 8009d22:	697b      	ldr	r3, [r7, #20]
 8009d24:	6013      	str	r3, [r2, #0]
}
 8009d26:	bf00      	nop
 8009d28:	3718      	adds	r7, #24
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	bd80      	pop	{r7, pc}
 8009d2e:	bf00      	nop
 8009d30:	20009730 	.word	0x20009730
 8009d34:	20009734 	.word	0x20009734

08009d38 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	b082      	sub	sp, #8
 8009d3c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009d3e:	f000 f96b 	bl	800a018 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009d42:	4b15      	ldr	r3, [pc, #84]	@ (8009d98 <prvCheckForValidListAndQueue+0x60>)
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d120      	bne.n	8009d8c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009d4a:	4814      	ldr	r0, [pc, #80]	@ (8009d9c <prvCheckForValidListAndQueue+0x64>)
 8009d4c:	f7fd fff8 	bl	8007d40 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009d50:	4813      	ldr	r0, [pc, #76]	@ (8009da0 <prvCheckForValidListAndQueue+0x68>)
 8009d52:	f7fd fff5 	bl	8007d40 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009d56:	4b13      	ldr	r3, [pc, #76]	@ (8009da4 <prvCheckForValidListAndQueue+0x6c>)
 8009d58:	4a10      	ldr	r2, [pc, #64]	@ (8009d9c <prvCheckForValidListAndQueue+0x64>)
 8009d5a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009d5c:	4b12      	ldr	r3, [pc, #72]	@ (8009da8 <prvCheckForValidListAndQueue+0x70>)
 8009d5e:	4a10      	ldr	r2, [pc, #64]	@ (8009da0 <prvCheckForValidListAndQueue+0x68>)
 8009d60:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009d62:	2300      	movs	r3, #0
 8009d64:	9300      	str	r3, [sp, #0]
 8009d66:	4b11      	ldr	r3, [pc, #68]	@ (8009dac <prvCheckForValidListAndQueue+0x74>)
 8009d68:	4a11      	ldr	r2, [pc, #68]	@ (8009db0 <prvCheckForValidListAndQueue+0x78>)
 8009d6a:	2110      	movs	r1, #16
 8009d6c:	200a      	movs	r0, #10
 8009d6e:	f7fe f905 	bl	8007f7c <xQueueGenericCreateStatic>
 8009d72:	4603      	mov	r3, r0
 8009d74:	4a08      	ldr	r2, [pc, #32]	@ (8009d98 <prvCheckForValidListAndQueue+0x60>)
 8009d76:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009d78:	4b07      	ldr	r3, [pc, #28]	@ (8009d98 <prvCheckForValidListAndQueue+0x60>)
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d005      	beq.n	8009d8c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009d80:	4b05      	ldr	r3, [pc, #20]	@ (8009d98 <prvCheckForValidListAndQueue+0x60>)
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	490b      	ldr	r1, [pc, #44]	@ (8009db4 <prvCheckForValidListAndQueue+0x7c>)
 8009d86:	4618      	mov	r0, r3
 8009d88:	f7fe fd2a 	bl	80087e0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009d8c:	f000 f976 	bl	800a07c <vPortExitCritical>
}
 8009d90:	bf00      	nop
 8009d92:	46bd      	mov	sp, r7
 8009d94:	bd80      	pop	{r7, pc}
 8009d96:	bf00      	nop
 8009d98:	20009738 	.word	0x20009738
 8009d9c:	20009708 	.word	0x20009708
 8009da0:	2000971c 	.word	0x2000971c
 8009da4:	20009730 	.word	0x20009730
 8009da8:	20009734 	.word	0x20009734
 8009dac:	200097e4 	.word	0x200097e4
 8009db0:	20009744 	.word	0x20009744
 8009db4:	0801c5f8 	.word	0x0801c5f8

08009db8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009db8:	b480      	push	{r7}
 8009dba:	b085      	sub	sp, #20
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	60f8      	str	r0, [r7, #12]
 8009dc0:	60b9      	str	r1, [r7, #8]
 8009dc2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	3b04      	subs	r3, #4
 8009dc8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009dd0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	3b04      	subs	r3, #4
 8009dd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009dd8:	68bb      	ldr	r3, [r7, #8]
 8009dda:	f023 0201 	bic.w	r2, r3, #1
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	3b04      	subs	r3, #4
 8009de6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009de8:	4a0c      	ldr	r2, [pc, #48]	@ (8009e1c <pxPortInitialiseStack+0x64>)
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	3b14      	subs	r3, #20
 8009df2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009df4:	687a      	ldr	r2, [r7, #4]
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	3b04      	subs	r3, #4
 8009dfe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	f06f 0202 	mvn.w	r2, #2
 8009e06:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	3b20      	subs	r3, #32
 8009e0c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009e0e:	68fb      	ldr	r3, [r7, #12]
}
 8009e10:	4618      	mov	r0, r3
 8009e12:	3714      	adds	r7, #20
 8009e14:	46bd      	mov	sp, r7
 8009e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1a:	4770      	bx	lr
 8009e1c:	08009e21 	.word	0x08009e21

08009e20 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009e20:	b480      	push	{r7}
 8009e22:	b085      	sub	sp, #20
 8009e24:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009e26:	2300      	movs	r3, #0
 8009e28:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009e2a:	4b13      	ldr	r3, [pc, #76]	@ (8009e78 <prvTaskExitError+0x58>)
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009e32:	d00b      	beq.n	8009e4c <prvTaskExitError+0x2c>
	__asm volatile
 8009e34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e38:	f383 8811 	msr	BASEPRI, r3
 8009e3c:	f3bf 8f6f 	isb	sy
 8009e40:	f3bf 8f4f 	dsb	sy
 8009e44:	60fb      	str	r3, [r7, #12]
}
 8009e46:	bf00      	nop
 8009e48:	bf00      	nop
 8009e4a:	e7fd      	b.n	8009e48 <prvTaskExitError+0x28>
	__asm volatile
 8009e4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e50:	f383 8811 	msr	BASEPRI, r3
 8009e54:	f3bf 8f6f 	isb	sy
 8009e58:	f3bf 8f4f 	dsb	sy
 8009e5c:	60bb      	str	r3, [r7, #8]
}
 8009e5e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009e60:	bf00      	nop
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d0fc      	beq.n	8009e62 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009e68:	bf00      	nop
 8009e6a:	bf00      	nop
 8009e6c:	3714      	adds	r7, #20
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e74:	4770      	bx	lr
 8009e76:	bf00      	nop
 8009e78:	200000d8 	.word	0x200000d8
 8009e7c:	00000000 	.word	0x00000000

08009e80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009e80:	4b07      	ldr	r3, [pc, #28]	@ (8009ea0 <pxCurrentTCBConst2>)
 8009e82:	6819      	ldr	r1, [r3, #0]
 8009e84:	6808      	ldr	r0, [r1, #0]
 8009e86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e8a:	f380 8809 	msr	PSP, r0
 8009e8e:	f3bf 8f6f 	isb	sy
 8009e92:	f04f 0000 	mov.w	r0, #0
 8009e96:	f380 8811 	msr	BASEPRI, r0
 8009e9a:	4770      	bx	lr
 8009e9c:	f3af 8000 	nop.w

08009ea0 <pxCurrentTCBConst2>:
 8009ea0:	20009208 	.word	0x20009208
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009ea4:	bf00      	nop
 8009ea6:	bf00      	nop

08009ea8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009ea8:	4808      	ldr	r0, [pc, #32]	@ (8009ecc <prvPortStartFirstTask+0x24>)
 8009eaa:	6800      	ldr	r0, [r0, #0]
 8009eac:	6800      	ldr	r0, [r0, #0]
 8009eae:	f380 8808 	msr	MSP, r0
 8009eb2:	f04f 0000 	mov.w	r0, #0
 8009eb6:	f380 8814 	msr	CONTROL, r0
 8009eba:	b662      	cpsie	i
 8009ebc:	b661      	cpsie	f
 8009ebe:	f3bf 8f4f 	dsb	sy
 8009ec2:	f3bf 8f6f 	isb	sy
 8009ec6:	df00      	svc	0
 8009ec8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009eca:	bf00      	nop
 8009ecc:	e000ed08 	.word	0xe000ed08

08009ed0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	b086      	sub	sp, #24
 8009ed4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009ed6:	4b47      	ldr	r3, [pc, #284]	@ (8009ff4 <xPortStartScheduler+0x124>)
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	4a47      	ldr	r2, [pc, #284]	@ (8009ff8 <xPortStartScheduler+0x128>)
 8009edc:	4293      	cmp	r3, r2
 8009ede:	d10b      	bne.n	8009ef8 <xPortStartScheduler+0x28>
	__asm volatile
 8009ee0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ee4:	f383 8811 	msr	BASEPRI, r3
 8009ee8:	f3bf 8f6f 	isb	sy
 8009eec:	f3bf 8f4f 	dsb	sy
 8009ef0:	60fb      	str	r3, [r7, #12]
}
 8009ef2:	bf00      	nop
 8009ef4:	bf00      	nop
 8009ef6:	e7fd      	b.n	8009ef4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009ef8:	4b3e      	ldr	r3, [pc, #248]	@ (8009ff4 <xPortStartScheduler+0x124>)
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	4a3f      	ldr	r2, [pc, #252]	@ (8009ffc <xPortStartScheduler+0x12c>)
 8009efe:	4293      	cmp	r3, r2
 8009f00:	d10b      	bne.n	8009f1a <xPortStartScheduler+0x4a>
	__asm volatile
 8009f02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f06:	f383 8811 	msr	BASEPRI, r3
 8009f0a:	f3bf 8f6f 	isb	sy
 8009f0e:	f3bf 8f4f 	dsb	sy
 8009f12:	613b      	str	r3, [r7, #16]
}
 8009f14:	bf00      	nop
 8009f16:	bf00      	nop
 8009f18:	e7fd      	b.n	8009f16 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009f1a:	4b39      	ldr	r3, [pc, #228]	@ (800a000 <xPortStartScheduler+0x130>)
 8009f1c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009f1e:	697b      	ldr	r3, [r7, #20]
 8009f20:	781b      	ldrb	r3, [r3, #0]
 8009f22:	b2db      	uxtb	r3, r3
 8009f24:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009f26:	697b      	ldr	r3, [r7, #20]
 8009f28:	22ff      	movs	r2, #255	@ 0xff
 8009f2a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009f2c:	697b      	ldr	r3, [r7, #20]
 8009f2e:	781b      	ldrb	r3, [r3, #0]
 8009f30:	b2db      	uxtb	r3, r3
 8009f32:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009f34:	78fb      	ldrb	r3, [r7, #3]
 8009f36:	b2db      	uxtb	r3, r3
 8009f38:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8009f3c:	b2da      	uxtb	r2, r3
 8009f3e:	4b31      	ldr	r3, [pc, #196]	@ (800a004 <xPortStartScheduler+0x134>)
 8009f40:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009f42:	4b31      	ldr	r3, [pc, #196]	@ (800a008 <xPortStartScheduler+0x138>)
 8009f44:	2207      	movs	r2, #7
 8009f46:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009f48:	e009      	b.n	8009f5e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8009f4a:	4b2f      	ldr	r3, [pc, #188]	@ (800a008 <xPortStartScheduler+0x138>)
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	3b01      	subs	r3, #1
 8009f50:	4a2d      	ldr	r2, [pc, #180]	@ (800a008 <xPortStartScheduler+0x138>)
 8009f52:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009f54:	78fb      	ldrb	r3, [r7, #3]
 8009f56:	b2db      	uxtb	r3, r3
 8009f58:	005b      	lsls	r3, r3, #1
 8009f5a:	b2db      	uxtb	r3, r3
 8009f5c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009f5e:	78fb      	ldrb	r3, [r7, #3]
 8009f60:	b2db      	uxtb	r3, r3
 8009f62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009f66:	2b80      	cmp	r3, #128	@ 0x80
 8009f68:	d0ef      	beq.n	8009f4a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009f6a:	4b27      	ldr	r3, [pc, #156]	@ (800a008 <xPortStartScheduler+0x138>)
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	f1c3 0307 	rsb	r3, r3, #7
 8009f72:	2b04      	cmp	r3, #4
 8009f74:	d00b      	beq.n	8009f8e <xPortStartScheduler+0xbe>
	__asm volatile
 8009f76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f7a:	f383 8811 	msr	BASEPRI, r3
 8009f7e:	f3bf 8f6f 	isb	sy
 8009f82:	f3bf 8f4f 	dsb	sy
 8009f86:	60bb      	str	r3, [r7, #8]
}
 8009f88:	bf00      	nop
 8009f8a:	bf00      	nop
 8009f8c:	e7fd      	b.n	8009f8a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009f8e:	4b1e      	ldr	r3, [pc, #120]	@ (800a008 <xPortStartScheduler+0x138>)
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	021b      	lsls	r3, r3, #8
 8009f94:	4a1c      	ldr	r2, [pc, #112]	@ (800a008 <xPortStartScheduler+0x138>)
 8009f96:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009f98:	4b1b      	ldr	r3, [pc, #108]	@ (800a008 <xPortStartScheduler+0x138>)
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009fa0:	4a19      	ldr	r2, [pc, #100]	@ (800a008 <xPortStartScheduler+0x138>)
 8009fa2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	b2da      	uxtb	r2, r3
 8009fa8:	697b      	ldr	r3, [r7, #20]
 8009faa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009fac:	4b17      	ldr	r3, [pc, #92]	@ (800a00c <xPortStartScheduler+0x13c>)
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	4a16      	ldr	r2, [pc, #88]	@ (800a00c <xPortStartScheduler+0x13c>)
 8009fb2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009fb6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009fb8:	4b14      	ldr	r3, [pc, #80]	@ (800a00c <xPortStartScheduler+0x13c>)
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	4a13      	ldr	r2, [pc, #76]	@ (800a00c <xPortStartScheduler+0x13c>)
 8009fbe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009fc2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009fc4:	f000 f8da 	bl	800a17c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009fc8:	4b11      	ldr	r3, [pc, #68]	@ (800a010 <xPortStartScheduler+0x140>)
 8009fca:	2200      	movs	r2, #0
 8009fcc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009fce:	f000 f8f9 	bl	800a1c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009fd2:	4b10      	ldr	r3, [pc, #64]	@ (800a014 <xPortStartScheduler+0x144>)
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	4a0f      	ldr	r2, [pc, #60]	@ (800a014 <xPortStartScheduler+0x144>)
 8009fd8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8009fdc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009fde:	f7ff ff63 	bl	8009ea8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009fe2:	f7ff f815 	bl	8009010 <vTaskSwitchContext>
	prvTaskExitError();
 8009fe6:	f7ff ff1b 	bl	8009e20 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009fea:	2300      	movs	r3, #0
}
 8009fec:	4618      	mov	r0, r3
 8009fee:	3718      	adds	r7, #24
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	bd80      	pop	{r7, pc}
 8009ff4:	e000ed00 	.word	0xe000ed00
 8009ff8:	410fc271 	.word	0x410fc271
 8009ffc:	410fc270 	.word	0x410fc270
 800a000:	e000e400 	.word	0xe000e400
 800a004:	20009834 	.word	0x20009834
 800a008:	20009838 	.word	0x20009838
 800a00c:	e000ed20 	.word	0xe000ed20
 800a010:	200000d8 	.word	0x200000d8
 800a014:	e000ef34 	.word	0xe000ef34

0800a018 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a018:	b480      	push	{r7}
 800a01a:	b083      	sub	sp, #12
 800a01c:	af00      	add	r7, sp, #0
	__asm volatile
 800a01e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a022:	f383 8811 	msr	BASEPRI, r3
 800a026:	f3bf 8f6f 	isb	sy
 800a02a:	f3bf 8f4f 	dsb	sy
 800a02e:	607b      	str	r3, [r7, #4]
}
 800a030:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a032:	4b10      	ldr	r3, [pc, #64]	@ (800a074 <vPortEnterCritical+0x5c>)
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	3301      	adds	r3, #1
 800a038:	4a0e      	ldr	r2, [pc, #56]	@ (800a074 <vPortEnterCritical+0x5c>)
 800a03a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a03c:	4b0d      	ldr	r3, [pc, #52]	@ (800a074 <vPortEnterCritical+0x5c>)
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	2b01      	cmp	r3, #1
 800a042:	d110      	bne.n	800a066 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a044:	4b0c      	ldr	r3, [pc, #48]	@ (800a078 <vPortEnterCritical+0x60>)
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	b2db      	uxtb	r3, r3
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d00b      	beq.n	800a066 <vPortEnterCritical+0x4e>
	__asm volatile
 800a04e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a052:	f383 8811 	msr	BASEPRI, r3
 800a056:	f3bf 8f6f 	isb	sy
 800a05a:	f3bf 8f4f 	dsb	sy
 800a05e:	603b      	str	r3, [r7, #0]
}
 800a060:	bf00      	nop
 800a062:	bf00      	nop
 800a064:	e7fd      	b.n	800a062 <vPortEnterCritical+0x4a>
	}
}
 800a066:	bf00      	nop
 800a068:	370c      	adds	r7, #12
 800a06a:	46bd      	mov	sp, r7
 800a06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a070:	4770      	bx	lr
 800a072:	bf00      	nop
 800a074:	200000d8 	.word	0x200000d8
 800a078:	e000ed04 	.word	0xe000ed04

0800a07c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a07c:	b480      	push	{r7}
 800a07e:	b083      	sub	sp, #12
 800a080:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a082:	4b12      	ldr	r3, [pc, #72]	@ (800a0cc <vPortExitCritical+0x50>)
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	2b00      	cmp	r3, #0
 800a088:	d10b      	bne.n	800a0a2 <vPortExitCritical+0x26>
	__asm volatile
 800a08a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a08e:	f383 8811 	msr	BASEPRI, r3
 800a092:	f3bf 8f6f 	isb	sy
 800a096:	f3bf 8f4f 	dsb	sy
 800a09a:	607b      	str	r3, [r7, #4]
}
 800a09c:	bf00      	nop
 800a09e:	bf00      	nop
 800a0a0:	e7fd      	b.n	800a09e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a0a2:	4b0a      	ldr	r3, [pc, #40]	@ (800a0cc <vPortExitCritical+0x50>)
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	3b01      	subs	r3, #1
 800a0a8:	4a08      	ldr	r2, [pc, #32]	@ (800a0cc <vPortExitCritical+0x50>)
 800a0aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a0ac:	4b07      	ldr	r3, [pc, #28]	@ (800a0cc <vPortExitCritical+0x50>)
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d105      	bne.n	800a0c0 <vPortExitCritical+0x44>
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a0b8:	683b      	ldr	r3, [r7, #0]
 800a0ba:	f383 8811 	msr	BASEPRI, r3
}
 800a0be:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a0c0:	bf00      	nop
 800a0c2:	370c      	adds	r7, #12
 800a0c4:	46bd      	mov	sp, r7
 800a0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ca:	4770      	bx	lr
 800a0cc:	200000d8 	.word	0x200000d8

0800a0d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a0d0:	f3ef 8009 	mrs	r0, PSP
 800a0d4:	f3bf 8f6f 	isb	sy
 800a0d8:	4b15      	ldr	r3, [pc, #84]	@ (800a130 <pxCurrentTCBConst>)
 800a0da:	681a      	ldr	r2, [r3, #0]
 800a0dc:	f01e 0f10 	tst.w	lr, #16
 800a0e0:	bf08      	it	eq
 800a0e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a0e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0ea:	6010      	str	r0, [r2, #0]
 800a0ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a0f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a0f4:	f380 8811 	msr	BASEPRI, r0
 800a0f8:	f3bf 8f4f 	dsb	sy
 800a0fc:	f3bf 8f6f 	isb	sy
 800a100:	f7fe ff86 	bl	8009010 <vTaskSwitchContext>
 800a104:	f04f 0000 	mov.w	r0, #0
 800a108:	f380 8811 	msr	BASEPRI, r0
 800a10c:	bc09      	pop	{r0, r3}
 800a10e:	6819      	ldr	r1, [r3, #0]
 800a110:	6808      	ldr	r0, [r1, #0]
 800a112:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a116:	f01e 0f10 	tst.w	lr, #16
 800a11a:	bf08      	it	eq
 800a11c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a120:	f380 8809 	msr	PSP, r0
 800a124:	f3bf 8f6f 	isb	sy
 800a128:	4770      	bx	lr
 800a12a:	bf00      	nop
 800a12c:	f3af 8000 	nop.w

0800a130 <pxCurrentTCBConst>:
 800a130:	20009208 	.word	0x20009208
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a134:	bf00      	nop
 800a136:	bf00      	nop

0800a138 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a138:	b580      	push	{r7, lr}
 800a13a:	b082      	sub	sp, #8
 800a13c:	af00      	add	r7, sp, #0
	__asm volatile
 800a13e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a142:	f383 8811 	msr	BASEPRI, r3
 800a146:	f3bf 8f6f 	isb	sy
 800a14a:	f3bf 8f4f 	dsb	sy
 800a14e:	607b      	str	r3, [r7, #4]
}
 800a150:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a152:	f7fe fea3 	bl	8008e9c <xTaskIncrementTick>
 800a156:	4603      	mov	r3, r0
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d003      	beq.n	800a164 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a15c:	4b06      	ldr	r3, [pc, #24]	@ (800a178 <xPortSysTickHandler+0x40>)
 800a15e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a162:	601a      	str	r2, [r3, #0]
 800a164:	2300      	movs	r3, #0
 800a166:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	f383 8811 	msr	BASEPRI, r3
}
 800a16e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a170:	bf00      	nop
 800a172:	3708      	adds	r7, #8
 800a174:	46bd      	mov	sp, r7
 800a176:	bd80      	pop	{r7, pc}
 800a178:	e000ed04 	.word	0xe000ed04

0800a17c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a17c:	b480      	push	{r7}
 800a17e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a180:	4b0b      	ldr	r3, [pc, #44]	@ (800a1b0 <vPortSetupTimerInterrupt+0x34>)
 800a182:	2200      	movs	r2, #0
 800a184:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a186:	4b0b      	ldr	r3, [pc, #44]	@ (800a1b4 <vPortSetupTimerInterrupt+0x38>)
 800a188:	2200      	movs	r2, #0
 800a18a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a18c:	4b0a      	ldr	r3, [pc, #40]	@ (800a1b8 <vPortSetupTimerInterrupt+0x3c>)
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	4a0a      	ldr	r2, [pc, #40]	@ (800a1bc <vPortSetupTimerInterrupt+0x40>)
 800a192:	fba2 2303 	umull	r2, r3, r2, r3
 800a196:	099b      	lsrs	r3, r3, #6
 800a198:	4a09      	ldr	r2, [pc, #36]	@ (800a1c0 <vPortSetupTimerInterrupt+0x44>)
 800a19a:	3b01      	subs	r3, #1
 800a19c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a19e:	4b04      	ldr	r3, [pc, #16]	@ (800a1b0 <vPortSetupTimerInterrupt+0x34>)
 800a1a0:	2207      	movs	r2, #7
 800a1a2:	601a      	str	r2, [r3, #0]
}
 800a1a4:	bf00      	nop
 800a1a6:	46bd      	mov	sp, r7
 800a1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ac:	4770      	bx	lr
 800a1ae:	bf00      	nop
 800a1b0:	e000e010 	.word	0xe000e010
 800a1b4:	e000e018 	.word	0xe000e018
 800a1b8:	20000004 	.word	0x20000004
 800a1bc:	10624dd3 	.word	0x10624dd3
 800a1c0:	e000e014 	.word	0xe000e014

0800a1c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a1c4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a1d4 <vPortEnableVFP+0x10>
 800a1c8:	6801      	ldr	r1, [r0, #0]
 800a1ca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a1ce:	6001      	str	r1, [r0, #0]
 800a1d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a1d2:	bf00      	nop
 800a1d4:	e000ed88 	.word	0xe000ed88

0800a1d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a1d8:	b480      	push	{r7}
 800a1da:	b085      	sub	sp, #20
 800a1dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a1de:	f3ef 8305 	mrs	r3, IPSR
 800a1e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	2b0f      	cmp	r3, #15
 800a1e8:	d915      	bls.n	800a216 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a1ea:	4a18      	ldr	r2, [pc, #96]	@ (800a24c <vPortValidateInterruptPriority+0x74>)
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	4413      	add	r3, r2
 800a1f0:	781b      	ldrb	r3, [r3, #0]
 800a1f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a1f4:	4b16      	ldr	r3, [pc, #88]	@ (800a250 <vPortValidateInterruptPriority+0x78>)
 800a1f6:	781b      	ldrb	r3, [r3, #0]
 800a1f8:	7afa      	ldrb	r2, [r7, #11]
 800a1fa:	429a      	cmp	r2, r3
 800a1fc:	d20b      	bcs.n	800a216 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800a1fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a202:	f383 8811 	msr	BASEPRI, r3
 800a206:	f3bf 8f6f 	isb	sy
 800a20a:	f3bf 8f4f 	dsb	sy
 800a20e:	607b      	str	r3, [r7, #4]
}
 800a210:	bf00      	nop
 800a212:	bf00      	nop
 800a214:	e7fd      	b.n	800a212 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a216:	4b0f      	ldr	r3, [pc, #60]	@ (800a254 <vPortValidateInterruptPriority+0x7c>)
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a21e:	4b0e      	ldr	r3, [pc, #56]	@ (800a258 <vPortValidateInterruptPriority+0x80>)
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	429a      	cmp	r2, r3
 800a224:	d90b      	bls.n	800a23e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800a226:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a22a:	f383 8811 	msr	BASEPRI, r3
 800a22e:	f3bf 8f6f 	isb	sy
 800a232:	f3bf 8f4f 	dsb	sy
 800a236:	603b      	str	r3, [r7, #0]
}
 800a238:	bf00      	nop
 800a23a:	bf00      	nop
 800a23c:	e7fd      	b.n	800a23a <vPortValidateInterruptPriority+0x62>
	}
 800a23e:	bf00      	nop
 800a240:	3714      	adds	r7, #20
 800a242:	46bd      	mov	sp, r7
 800a244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a248:	4770      	bx	lr
 800a24a:	bf00      	nop
 800a24c:	e000e3f0 	.word	0xe000e3f0
 800a250:	20009834 	.word	0x20009834
 800a254:	e000ed0c 	.word	0xe000ed0c
 800a258:	20009838 	.word	0x20009838

0800a25c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b08a      	sub	sp, #40	@ 0x28
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a264:	2300      	movs	r3, #0
 800a266:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a268:	f7fe fd5c 	bl	8008d24 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a26c:	4b5c      	ldr	r3, [pc, #368]	@ (800a3e0 <pvPortMalloc+0x184>)
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d101      	bne.n	800a278 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a274:	f000 f924 	bl	800a4c0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a278:	4b5a      	ldr	r3, [pc, #360]	@ (800a3e4 <pvPortMalloc+0x188>)
 800a27a:	681a      	ldr	r2, [r3, #0]
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	4013      	ands	r3, r2
 800a280:	2b00      	cmp	r3, #0
 800a282:	f040 8095 	bne.w	800a3b0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d01e      	beq.n	800a2ca <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a28c:	2208      	movs	r2, #8
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	4413      	add	r3, r2
 800a292:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	f003 0307 	and.w	r3, r3, #7
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d015      	beq.n	800a2ca <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	f023 0307 	bic.w	r3, r3, #7
 800a2a4:	3308      	adds	r3, #8
 800a2a6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	f003 0307 	and.w	r3, r3, #7
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d00b      	beq.n	800a2ca <pvPortMalloc+0x6e>
	__asm volatile
 800a2b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2b6:	f383 8811 	msr	BASEPRI, r3
 800a2ba:	f3bf 8f6f 	isb	sy
 800a2be:	f3bf 8f4f 	dsb	sy
 800a2c2:	617b      	str	r3, [r7, #20]
}
 800a2c4:	bf00      	nop
 800a2c6:	bf00      	nop
 800a2c8:	e7fd      	b.n	800a2c6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d06f      	beq.n	800a3b0 <pvPortMalloc+0x154>
 800a2d0:	4b45      	ldr	r3, [pc, #276]	@ (800a3e8 <pvPortMalloc+0x18c>)
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	687a      	ldr	r2, [r7, #4]
 800a2d6:	429a      	cmp	r2, r3
 800a2d8:	d86a      	bhi.n	800a3b0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a2da:	4b44      	ldr	r3, [pc, #272]	@ (800a3ec <pvPortMalloc+0x190>)
 800a2dc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a2de:	4b43      	ldr	r3, [pc, #268]	@ (800a3ec <pvPortMalloc+0x190>)
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a2e4:	e004      	b.n	800a2f0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a2e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2e8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a2ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a2f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2f2:	685b      	ldr	r3, [r3, #4]
 800a2f4:	687a      	ldr	r2, [r7, #4]
 800a2f6:	429a      	cmp	r2, r3
 800a2f8:	d903      	bls.n	800a302 <pvPortMalloc+0xa6>
 800a2fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d1f1      	bne.n	800a2e6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a302:	4b37      	ldr	r3, [pc, #220]	@ (800a3e0 <pvPortMalloc+0x184>)
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a308:	429a      	cmp	r2, r3
 800a30a:	d051      	beq.n	800a3b0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a30c:	6a3b      	ldr	r3, [r7, #32]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	2208      	movs	r2, #8
 800a312:	4413      	add	r3, r2
 800a314:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a318:	681a      	ldr	r2, [r3, #0]
 800a31a:	6a3b      	ldr	r3, [r7, #32]
 800a31c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a31e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a320:	685a      	ldr	r2, [r3, #4]
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	1ad2      	subs	r2, r2, r3
 800a326:	2308      	movs	r3, #8
 800a328:	005b      	lsls	r3, r3, #1
 800a32a:	429a      	cmp	r2, r3
 800a32c:	d920      	bls.n	800a370 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a32e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	4413      	add	r3, r2
 800a334:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a336:	69bb      	ldr	r3, [r7, #24]
 800a338:	f003 0307 	and.w	r3, r3, #7
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d00b      	beq.n	800a358 <pvPortMalloc+0xfc>
	__asm volatile
 800a340:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a344:	f383 8811 	msr	BASEPRI, r3
 800a348:	f3bf 8f6f 	isb	sy
 800a34c:	f3bf 8f4f 	dsb	sy
 800a350:	613b      	str	r3, [r7, #16]
}
 800a352:	bf00      	nop
 800a354:	bf00      	nop
 800a356:	e7fd      	b.n	800a354 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a35a:	685a      	ldr	r2, [r3, #4]
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	1ad2      	subs	r2, r2, r3
 800a360:	69bb      	ldr	r3, [r7, #24]
 800a362:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a366:	687a      	ldr	r2, [r7, #4]
 800a368:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a36a:	69b8      	ldr	r0, [r7, #24]
 800a36c:	f000 f90a 	bl	800a584 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a370:	4b1d      	ldr	r3, [pc, #116]	@ (800a3e8 <pvPortMalloc+0x18c>)
 800a372:	681a      	ldr	r2, [r3, #0]
 800a374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a376:	685b      	ldr	r3, [r3, #4]
 800a378:	1ad3      	subs	r3, r2, r3
 800a37a:	4a1b      	ldr	r2, [pc, #108]	@ (800a3e8 <pvPortMalloc+0x18c>)
 800a37c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a37e:	4b1a      	ldr	r3, [pc, #104]	@ (800a3e8 <pvPortMalloc+0x18c>)
 800a380:	681a      	ldr	r2, [r3, #0]
 800a382:	4b1b      	ldr	r3, [pc, #108]	@ (800a3f0 <pvPortMalloc+0x194>)
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	429a      	cmp	r2, r3
 800a388:	d203      	bcs.n	800a392 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a38a:	4b17      	ldr	r3, [pc, #92]	@ (800a3e8 <pvPortMalloc+0x18c>)
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	4a18      	ldr	r2, [pc, #96]	@ (800a3f0 <pvPortMalloc+0x194>)
 800a390:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a394:	685a      	ldr	r2, [r3, #4]
 800a396:	4b13      	ldr	r3, [pc, #76]	@ (800a3e4 <pvPortMalloc+0x188>)
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	431a      	orrs	r2, r3
 800a39c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a39e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a3a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a3a6:	4b13      	ldr	r3, [pc, #76]	@ (800a3f4 <pvPortMalloc+0x198>)
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	3301      	adds	r3, #1
 800a3ac:	4a11      	ldr	r2, [pc, #68]	@ (800a3f4 <pvPortMalloc+0x198>)
 800a3ae:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a3b0:	f7fe fcc6 	bl	8008d40 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a3b4:	69fb      	ldr	r3, [r7, #28]
 800a3b6:	f003 0307 	and.w	r3, r3, #7
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d00b      	beq.n	800a3d6 <pvPortMalloc+0x17a>
	__asm volatile
 800a3be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3c2:	f383 8811 	msr	BASEPRI, r3
 800a3c6:	f3bf 8f6f 	isb	sy
 800a3ca:	f3bf 8f4f 	dsb	sy
 800a3ce:	60fb      	str	r3, [r7, #12]
}
 800a3d0:	bf00      	nop
 800a3d2:	bf00      	nop
 800a3d4:	e7fd      	b.n	800a3d2 <pvPortMalloc+0x176>
	return pvReturn;
 800a3d6:	69fb      	ldr	r3, [r7, #28]
}
 800a3d8:	4618      	mov	r0, r3
 800a3da:	3728      	adds	r7, #40	@ 0x28
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	bd80      	pop	{r7, pc}
 800a3e0:	20010d74 	.word	0x20010d74
 800a3e4:	20010d88 	.word	0x20010d88
 800a3e8:	20010d78 	.word	0x20010d78
 800a3ec:	20010d6c 	.word	0x20010d6c
 800a3f0:	20010d7c 	.word	0x20010d7c
 800a3f4:	20010d80 	.word	0x20010d80

0800a3f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b086      	sub	sp, #24
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d04f      	beq.n	800a4aa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a40a:	2308      	movs	r3, #8
 800a40c:	425b      	negs	r3, r3
 800a40e:	697a      	ldr	r2, [r7, #20]
 800a410:	4413      	add	r3, r2
 800a412:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a414:	697b      	ldr	r3, [r7, #20]
 800a416:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a418:	693b      	ldr	r3, [r7, #16]
 800a41a:	685a      	ldr	r2, [r3, #4]
 800a41c:	4b25      	ldr	r3, [pc, #148]	@ (800a4b4 <vPortFree+0xbc>)
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	4013      	ands	r3, r2
 800a422:	2b00      	cmp	r3, #0
 800a424:	d10b      	bne.n	800a43e <vPortFree+0x46>
	__asm volatile
 800a426:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a42a:	f383 8811 	msr	BASEPRI, r3
 800a42e:	f3bf 8f6f 	isb	sy
 800a432:	f3bf 8f4f 	dsb	sy
 800a436:	60fb      	str	r3, [r7, #12]
}
 800a438:	bf00      	nop
 800a43a:	bf00      	nop
 800a43c:	e7fd      	b.n	800a43a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a43e:	693b      	ldr	r3, [r7, #16]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d00b      	beq.n	800a45e <vPortFree+0x66>
	__asm volatile
 800a446:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a44a:	f383 8811 	msr	BASEPRI, r3
 800a44e:	f3bf 8f6f 	isb	sy
 800a452:	f3bf 8f4f 	dsb	sy
 800a456:	60bb      	str	r3, [r7, #8]
}
 800a458:	bf00      	nop
 800a45a:	bf00      	nop
 800a45c:	e7fd      	b.n	800a45a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a45e:	693b      	ldr	r3, [r7, #16]
 800a460:	685a      	ldr	r2, [r3, #4]
 800a462:	4b14      	ldr	r3, [pc, #80]	@ (800a4b4 <vPortFree+0xbc>)
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	4013      	ands	r3, r2
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d01e      	beq.n	800a4aa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a46c:	693b      	ldr	r3, [r7, #16]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	2b00      	cmp	r3, #0
 800a472:	d11a      	bne.n	800a4aa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a474:	693b      	ldr	r3, [r7, #16]
 800a476:	685a      	ldr	r2, [r3, #4]
 800a478:	4b0e      	ldr	r3, [pc, #56]	@ (800a4b4 <vPortFree+0xbc>)
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	43db      	mvns	r3, r3
 800a47e:	401a      	ands	r2, r3
 800a480:	693b      	ldr	r3, [r7, #16]
 800a482:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a484:	f7fe fc4e 	bl	8008d24 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a488:	693b      	ldr	r3, [r7, #16]
 800a48a:	685a      	ldr	r2, [r3, #4]
 800a48c:	4b0a      	ldr	r3, [pc, #40]	@ (800a4b8 <vPortFree+0xc0>)
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	4413      	add	r3, r2
 800a492:	4a09      	ldr	r2, [pc, #36]	@ (800a4b8 <vPortFree+0xc0>)
 800a494:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a496:	6938      	ldr	r0, [r7, #16]
 800a498:	f000 f874 	bl	800a584 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a49c:	4b07      	ldr	r3, [pc, #28]	@ (800a4bc <vPortFree+0xc4>)
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	3301      	adds	r3, #1
 800a4a2:	4a06      	ldr	r2, [pc, #24]	@ (800a4bc <vPortFree+0xc4>)
 800a4a4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a4a6:	f7fe fc4b 	bl	8008d40 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a4aa:	bf00      	nop
 800a4ac:	3718      	adds	r7, #24
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	bd80      	pop	{r7, pc}
 800a4b2:	bf00      	nop
 800a4b4:	20010d88 	.word	0x20010d88
 800a4b8:	20010d78 	.word	0x20010d78
 800a4bc:	20010d84 	.word	0x20010d84

0800a4c0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a4c0:	b480      	push	{r7}
 800a4c2:	b085      	sub	sp, #20
 800a4c4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a4c6:	f247 5330 	movw	r3, #30000	@ 0x7530
 800a4ca:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a4cc:	4b27      	ldr	r3, [pc, #156]	@ (800a56c <prvHeapInit+0xac>)
 800a4ce:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	f003 0307 	and.w	r3, r3, #7
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d00c      	beq.n	800a4f4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	3307      	adds	r3, #7
 800a4de:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	f023 0307 	bic.w	r3, r3, #7
 800a4e6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a4e8:	68ba      	ldr	r2, [r7, #8]
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	1ad3      	subs	r3, r2, r3
 800a4ee:	4a1f      	ldr	r2, [pc, #124]	@ (800a56c <prvHeapInit+0xac>)
 800a4f0:	4413      	add	r3, r2
 800a4f2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a4f8:	4a1d      	ldr	r2, [pc, #116]	@ (800a570 <prvHeapInit+0xb0>)
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a4fe:	4b1c      	ldr	r3, [pc, #112]	@ (800a570 <prvHeapInit+0xb0>)
 800a500:	2200      	movs	r2, #0
 800a502:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	68ba      	ldr	r2, [r7, #8]
 800a508:	4413      	add	r3, r2
 800a50a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a50c:	2208      	movs	r2, #8
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	1a9b      	subs	r3, r3, r2
 800a512:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	f023 0307 	bic.w	r3, r3, #7
 800a51a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	4a15      	ldr	r2, [pc, #84]	@ (800a574 <prvHeapInit+0xb4>)
 800a520:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a522:	4b14      	ldr	r3, [pc, #80]	@ (800a574 <prvHeapInit+0xb4>)
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	2200      	movs	r2, #0
 800a528:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a52a:	4b12      	ldr	r3, [pc, #72]	@ (800a574 <prvHeapInit+0xb4>)
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	2200      	movs	r2, #0
 800a530:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a536:	683b      	ldr	r3, [r7, #0]
 800a538:	68fa      	ldr	r2, [r7, #12]
 800a53a:	1ad2      	subs	r2, r2, r3
 800a53c:	683b      	ldr	r3, [r7, #0]
 800a53e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a540:	4b0c      	ldr	r3, [pc, #48]	@ (800a574 <prvHeapInit+0xb4>)
 800a542:	681a      	ldr	r2, [r3, #0]
 800a544:	683b      	ldr	r3, [r7, #0]
 800a546:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a548:	683b      	ldr	r3, [r7, #0]
 800a54a:	685b      	ldr	r3, [r3, #4]
 800a54c:	4a0a      	ldr	r2, [pc, #40]	@ (800a578 <prvHeapInit+0xb8>)
 800a54e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a550:	683b      	ldr	r3, [r7, #0]
 800a552:	685b      	ldr	r3, [r3, #4]
 800a554:	4a09      	ldr	r2, [pc, #36]	@ (800a57c <prvHeapInit+0xbc>)
 800a556:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a558:	4b09      	ldr	r3, [pc, #36]	@ (800a580 <prvHeapInit+0xc0>)
 800a55a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a55e:	601a      	str	r2, [r3, #0]
}
 800a560:	bf00      	nop
 800a562:	3714      	adds	r7, #20
 800a564:	46bd      	mov	sp, r7
 800a566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56a:	4770      	bx	lr
 800a56c:	2000983c 	.word	0x2000983c
 800a570:	20010d6c 	.word	0x20010d6c
 800a574:	20010d74 	.word	0x20010d74
 800a578:	20010d7c 	.word	0x20010d7c
 800a57c:	20010d78 	.word	0x20010d78
 800a580:	20010d88 	.word	0x20010d88

0800a584 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a584:	b480      	push	{r7}
 800a586:	b085      	sub	sp, #20
 800a588:	af00      	add	r7, sp, #0
 800a58a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a58c:	4b28      	ldr	r3, [pc, #160]	@ (800a630 <prvInsertBlockIntoFreeList+0xac>)
 800a58e:	60fb      	str	r3, [r7, #12]
 800a590:	e002      	b.n	800a598 <prvInsertBlockIntoFreeList+0x14>
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	60fb      	str	r3, [r7, #12]
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	687a      	ldr	r2, [r7, #4]
 800a59e:	429a      	cmp	r2, r3
 800a5a0:	d8f7      	bhi.n	800a592 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	685b      	ldr	r3, [r3, #4]
 800a5aa:	68ba      	ldr	r2, [r7, #8]
 800a5ac:	4413      	add	r3, r2
 800a5ae:	687a      	ldr	r2, [r7, #4]
 800a5b0:	429a      	cmp	r2, r3
 800a5b2:	d108      	bne.n	800a5c6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	685a      	ldr	r2, [r3, #4]
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	685b      	ldr	r3, [r3, #4]
 800a5bc:	441a      	add	r2, r3
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	685b      	ldr	r3, [r3, #4]
 800a5ce:	68ba      	ldr	r2, [r7, #8]
 800a5d0:	441a      	add	r2, r3
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	429a      	cmp	r2, r3
 800a5d8:	d118      	bne.n	800a60c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	681a      	ldr	r2, [r3, #0]
 800a5de:	4b15      	ldr	r3, [pc, #84]	@ (800a634 <prvInsertBlockIntoFreeList+0xb0>)
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	429a      	cmp	r2, r3
 800a5e4:	d00d      	beq.n	800a602 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	685a      	ldr	r2, [r3, #4]
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	685b      	ldr	r3, [r3, #4]
 800a5f0:	441a      	add	r2, r3
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	681a      	ldr	r2, [r3, #0]
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	601a      	str	r2, [r3, #0]
 800a600:	e008      	b.n	800a614 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a602:	4b0c      	ldr	r3, [pc, #48]	@ (800a634 <prvInsertBlockIntoFreeList+0xb0>)
 800a604:	681a      	ldr	r2, [r3, #0]
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	601a      	str	r2, [r3, #0]
 800a60a:	e003      	b.n	800a614 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	681a      	ldr	r2, [r3, #0]
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a614:	68fa      	ldr	r2, [r7, #12]
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	429a      	cmp	r2, r3
 800a61a:	d002      	beq.n	800a622 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	687a      	ldr	r2, [r7, #4]
 800a620:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a622:	bf00      	nop
 800a624:	3714      	adds	r7, #20
 800a626:	46bd      	mov	sp, r7
 800a628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62c:	4770      	bx	lr
 800a62e:	bf00      	nop
 800a630:	20010d6c 	.word	0x20010d6c
 800a634:	20010d74 	.word	0x20010d74

0800a638 <arm_mat_mult_f32>:
 800a638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a63c:	460c      	mov	r4, r1
 800a63e:	b08b      	sub	sp, #44	@ 0x2c
 800a640:	8825      	ldrh	r5, [r4, #0]
 800a642:	9107      	str	r1, [sp, #28]
 800a644:	8841      	ldrh	r1, [r0, #2]
 800a646:	8806      	ldrh	r6, [r0, #0]
 800a648:	6843      	ldr	r3, [r0, #4]
 800a64a:	6857      	ldr	r7, [r2, #4]
 800a64c:	6860      	ldr	r0, [r4, #4]
 800a64e:	9602      	str	r6, [sp, #8]
 800a650:	428d      	cmp	r5, r1
 800a652:	8864      	ldrh	r4, [r4, #2]
 800a654:	f040 80f9 	bne.w	800a84a <arm_mat_mult_f32+0x212>
 800a658:	8811      	ldrh	r1, [r2, #0]
 800a65a:	42b1      	cmp	r1, r6
 800a65c:	f040 80f5 	bne.w	800a84a <arm_mat_mult_f32+0x212>
 800a660:	8851      	ldrh	r1, [r2, #2]
 800a662:	42a1      	cmp	r1, r4
 800a664:	f040 80f1 	bne.w	800a84a <arm_mat_mult_f32+0x212>
 800a668:	00aa      	lsls	r2, r5, #2
 800a66a:	2901      	cmp	r1, #1
 800a66c:	ea4f 0c95 	mov.w	ip, r5, lsr #2
 800a670:	ea4f 0481 	mov.w	r4, r1, lsl #2
 800a674:	f005 0e03 	and.w	lr, r5, #3
 800a678:	9206      	str	r2, [sp, #24]
 800a67a:	d170      	bne.n	800a75e <arm_mat_mult_f32+0x126>
 800a67c:	1d01      	adds	r1, r0, #4
 800a67e:	9105      	str	r1, [sp, #20]
 800a680:	ea4f 110c 	mov.w	r1, ip, lsl #4
 800a684:	4602      	mov	r2, r0
 800a686:	f107 0904 	add.w	r9, r7, #4
 800a68a:	9101      	str	r1, [sp, #4]
 800a68c:	eb03 1b0c 	add.w	fp, r3, ip, lsl #4
 800a690:	f103 0a10 	add.w	sl, r3, #16
 800a694:	f1aa 0310 	sub.w	r3, sl, #16
 800a698:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800a69c:	9303      	str	r3, [sp, #12]
 800a69e:	f1a9 0704 	sub.w	r7, r9, #4
 800a6a2:	eddf 7a6c 	vldr	s15, [pc, #432]	@ 800a854 <arm_mat_mult_f32+0x21c>
 800a6a6:	f1bc 0f00 	cmp.w	ip, #0
 800a6aa:	d052      	beq.n	800a752 <arm_mat_mult_f32+0x11a>
 800a6ac:	f102 0008 	add.w	r0, r2, #8
 800a6b0:	4653      	mov	r3, sl
 800a6b2:	4665      	mov	r5, ip
 800a6b4:	4611      	mov	r1, r2
 800a6b6:	ed13 6a04 	vldr	s12, [r3, #-16]
 800a6ba:	ed91 7a00 	vldr	s14, [r1]
 800a6be:	ed53 4a03 	vldr	s9, [r3, #-12]
 800a6c2:	edd0 6a00 	vldr	s13, [r0]
 800a6c6:	ed13 5a02 	vldr	s10, [r3, #-8]
 800a6ca:	ed53 5a01 	vldr	s11, [r3, #-4]
 800a6ce:	190e      	adds	r6, r1, r4
 800a6d0:	ee27 7a06 	vmul.f32	s14, s14, s12
 800a6d4:	ed96 6a00 	vldr	s12, [r6]
 800a6d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a6dc:	ee26 6a24 	vmul.f32	s12, s12, s9
 800a6e0:	1906      	adds	r6, r0, r4
 800a6e2:	ee36 6a27 	vadd.f32	s12, s12, s15
 800a6e6:	ee26 7a85 	vmul.f32	s14, s13, s10
 800a6ea:	edd6 7a00 	vldr	s15, [r6]
 800a6ee:	ee37 7a06 	vadd.f32	s14, s14, s12
 800a6f2:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800a6f6:	3d01      	subs	r5, #1
 800a6f8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a6fc:	f101 0110 	add.w	r1, r1, #16
 800a700:	f100 0010 	add.w	r0, r0, #16
 800a704:	f103 0310 	add.w	r3, r3, #16
 800a708:	d1d5      	bne.n	800a6b6 <arm_mat_mult_f32+0x7e>
 800a70a:	9b01      	ldr	r3, [sp, #4]
 800a70c:	4659      	mov	r1, fp
 800a70e:	441a      	add	r2, r3
 800a710:	f1be 0f00 	cmp.w	lr, #0
 800a714:	d00b      	beq.n	800a72e <arm_mat_mult_f32+0xf6>
 800a716:	4673      	mov	r3, lr
 800a718:	ed92 7a00 	vldr	s14, [r2]
 800a71c:	ecf1 6a01 	vldmia	r1!, {s13}
 800a720:	ee27 7a26 	vmul.f32	s14, s14, s13
 800a724:	3b01      	subs	r3, #1
 800a726:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a72a:	4422      	add	r2, r4
 800a72c:	d1f4      	bne.n	800a718 <arm_mat_mult_f32+0xe0>
 800a72e:	ece7 7a01 	vstmia	r7!, {s15}
 800a732:	454f      	cmp	r7, r9
 800a734:	4642      	mov	r2, r8
 800a736:	f108 0804 	add.w	r8, r8, #4
 800a73a:	d1b2      	bne.n	800a6a2 <arm_mat_mult_f32+0x6a>
 800a73c:	9b06      	ldr	r3, [sp, #24]
 800a73e:	449b      	add	fp, r3
 800a740:	449a      	add	sl, r3
 800a742:	9b02      	ldr	r3, [sp, #8]
 800a744:	3b01      	subs	r3, #1
 800a746:	44a1      	add	r9, r4
 800a748:	9302      	str	r3, [sp, #8]
 800a74a:	d004      	beq.n	800a756 <arm_mat_mult_f32+0x11e>
 800a74c:	9b07      	ldr	r3, [sp, #28]
 800a74e:	685a      	ldr	r2, [r3, #4]
 800a750:	e7a0      	b.n	800a694 <arm_mat_mult_f32+0x5c>
 800a752:	9903      	ldr	r1, [sp, #12]
 800a754:	e7dc      	b.n	800a710 <arm_mat_mult_f32+0xd8>
 800a756:	4618      	mov	r0, r3
 800a758:	b00b      	add	sp, #44	@ 0x2c
 800a75a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a75e:	ebc1 7281 	rsb	r2, r1, r1, lsl #30
 800a762:	0092      	lsls	r2, r2, #2
 800a764:	010e      	lsls	r6, r1, #4
 800a766:	9209      	str	r2, [sp, #36]	@ 0x24
 800a768:	00ca      	lsls	r2, r1, #3
 800a76a:	9204      	str	r2, [sp, #16]
 800a76c:	fb06 f20c 	mul.w	r2, r6, ip
 800a770:	1d05      	adds	r5, r0, #4
 800a772:	9203      	str	r2, [sp, #12]
 800a774:	eb03 120c 	add.w	r2, r3, ip, lsl #4
 800a778:	eb07 0b04 	add.w	fp, r7, r4
 800a77c:	9505      	str	r5, [sp, #20]
 800a77e:	9201      	str	r2, [sp, #4]
 800a780:	f103 0a10 	add.w	sl, r3, #16
 800a784:	f1aa 0310 	sub.w	r3, sl, #16
 800a788:	9308      	str	r3, [sp, #32]
 800a78a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a78c:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800a790:	eb0b 0803 	add.w	r8, fp, r3
 800a794:	eddf 7a2f 	vldr	s15, [pc, #188]	@ 800a854 <arm_mat_mult_f32+0x21c>
 800a798:	f1bc 0f00 	cmp.w	ip, #0
 800a79c:	d053      	beq.n	800a846 <arm_mat_mult_f32+0x20e>
 800a79e:	9b04      	ldr	r3, [sp, #16]
 800a7a0:	4665      	mov	r5, ip
 800a7a2:	18c1      	adds	r1, r0, r3
 800a7a4:	4602      	mov	r2, r0
 800a7a6:	4653      	mov	r3, sl
 800a7a8:	ed92 6a00 	vldr	s12, [r2]
 800a7ac:	ed13 7a04 	vldr	s14, [r3, #-16]
 800a7b0:	ed53 4a03 	vldr	s9, [r3, #-12]
 800a7b4:	ed53 6a02 	vldr	s13, [r3, #-8]
 800a7b8:	ed91 5a00 	vldr	s10, [r1]
 800a7bc:	ed53 5a01 	vldr	s11, [r3, #-4]
 800a7c0:	1917      	adds	r7, r2, r4
 800a7c2:	ee27 7a06 	vmul.f32	s14, s14, s12
 800a7c6:	ed97 6a00 	vldr	s12, [r7]
 800a7ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a7ce:	ee26 6a24 	vmul.f32	s12, s12, s9
 800a7d2:	190f      	adds	r7, r1, r4
 800a7d4:	ee36 6a27 	vadd.f32	s12, s12, s15
 800a7d8:	ee26 7a85 	vmul.f32	s14, s13, s10
 800a7dc:	edd7 7a00 	vldr	s15, [r7]
 800a7e0:	ee37 7a06 	vadd.f32	s14, s14, s12
 800a7e4:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800a7e8:	3d01      	subs	r5, #1
 800a7ea:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a7ee:	4432      	add	r2, r6
 800a7f0:	4431      	add	r1, r6
 800a7f2:	f103 0310 	add.w	r3, r3, #16
 800a7f6:	d1d7      	bne.n	800a7a8 <arm_mat_mult_f32+0x170>
 800a7f8:	9b03      	ldr	r3, [sp, #12]
 800a7fa:	9a01      	ldr	r2, [sp, #4]
 800a7fc:	4418      	add	r0, r3
 800a7fe:	f1be 0f00 	cmp.w	lr, #0
 800a802:	d00b      	beq.n	800a81c <arm_mat_mult_f32+0x1e4>
 800a804:	4673      	mov	r3, lr
 800a806:	edd0 6a00 	vldr	s13, [r0]
 800a80a:	ecb2 7a01 	vldmia	r2!, {s14}
 800a80e:	ee27 7a26 	vmul.f32	s14, s14, s13
 800a812:	3b01      	subs	r3, #1
 800a814:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a818:	4420      	add	r0, r4
 800a81a:	d1f4      	bne.n	800a806 <arm_mat_mult_f32+0x1ce>
 800a81c:	ece8 7a01 	vstmia	r8!, {s15}
 800a820:	45d8      	cmp	r8, fp
 800a822:	4648      	mov	r0, r9
 800a824:	f109 0904 	add.w	r9, r9, #4
 800a828:	d1b4      	bne.n	800a794 <arm_mat_mult_f32+0x15c>
 800a82a:	9a01      	ldr	r2, [sp, #4]
 800a82c:	9b06      	ldr	r3, [sp, #24]
 800a82e:	4611      	mov	r1, r2
 800a830:	4419      	add	r1, r3
 800a832:	449a      	add	sl, r3
 800a834:	9b02      	ldr	r3, [sp, #8]
 800a836:	9101      	str	r1, [sp, #4]
 800a838:	3b01      	subs	r3, #1
 800a83a:	44a3      	add	fp, r4
 800a83c:	9302      	str	r3, [sp, #8]
 800a83e:	d08a      	beq.n	800a756 <arm_mat_mult_f32+0x11e>
 800a840:	9b07      	ldr	r3, [sp, #28]
 800a842:	6858      	ldr	r0, [r3, #4]
 800a844:	e79e      	b.n	800a784 <arm_mat_mult_f32+0x14c>
 800a846:	9a08      	ldr	r2, [sp, #32]
 800a848:	e7d9      	b.n	800a7fe <arm_mat_mult_f32+0x1c6>
 800a84a:	f06f 0002 	mvn.w	r0, #2
 800a84e:	b00b      	add	sp, #44	@ 0x2c
 800a850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a854:	00000000 	.word	0x00000000

0800a858 <arm_mat_init_f32>:
 800a858:	8001      	strh	r1, [r0, #0]
 800a85a:	8042      	strh	r2, [r0, #2]
 800a85c:	6043      	str	r3, [r0, #4]
 800a85e:	4770      	bx	lr

0800a860 <handle_message_memory.constprop.4>:
 800a860:	b082      	sub	sp, #8
 800a862:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a866:	b0a7      	sub	sp, #156	@ 0x9c
 800a868:	ac30      	add	r4, sp, #192	@ 0xc0
 800a86a:	e884 000c 	stmia.w	r4, {r2, r3}
 800a86e:	9213      	str	r2, [sp, #76]	@ 0x4c
 800a870:	e9dd 9236 	ldrd	r9, r2, [sp, #216]	@ 0xd8
 800a874:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 800a876:	900b      	str	r0, [sp, #44]	@ 0x2c
 800a878:	e9dd a733 	ldrd	sl, r7, [sp, #204]	@ 0xcc
 800a87c:	9117      	str	r1, [sp, #92]	@ 0x5c
 800a87e:	9314      	str	r3, [sp, #80]	@ 0x50
 800a880:	920d      	str	r2, [sp, #52]	@ 0x34
 800a882:	2b00      	cmp	r3, #0
 800a884:	f000 81a5 	beq.w	800abd2 <handle_message_memory.constprop.4+0x372>
 800a888:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a88a:	689b      	ldr	r3, [r3, #8]
 800a88c:	930a      	str	r3, [sp, #40]	@ 0x28
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d036      	beq.n	800a900 <handle_message_memory.constprop.4+0xa0>
 800a892:	2300      	movs	r3, #0
 800a894:	930a      	str	r3, [sp, #40]	@ 0x28
 800a896:	469b      	mov	fp, r3
 800a898:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a89a:	691a      	ldr	r2, [r3, #16]
 800a89c:	ebcb 110b 	rsb	r1, fp, fp, lsl #4
 800a8a0:	eb02 0381 	add.w	r3, r2, r1, lsl #2
 800a8a4:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800a8a8:	6899      	ldr	r1, [r3, #8]
 800a8aa:	920e      	str	r2, [sp, #56]	@ 0x38
 800a8ac:	910f      	str	r1, [sp, #60]	@ 0x3c
 800a8ae:	7c1a      	ldrb	r2, [r3, #16]
 800a8b0:	68d9      	ldr	r1, [r3, #12]
 800a8b2:	791d      	ldrb	r5, [r3, #4]
 800a8b4:	7e1c      	ldrb	r4, [r3, #24]
 800a8b6:	9110      	str	r1, [sp, #64]	@ 0x40
 800a8b8:	6959      	ldr	r1, [r3, #20]
 800a8ba:	69db      	ldr	r3, [r3, #28]
 800a8bc:	9109      	str	r1, [sp, #36]	@ 0x24
 800a8be:	9312      	str	r3, [sp, #72]	@ 0x48
 800a8c0:	2a00      	cmp	r2, #0
 800a8c2:	d06e      	beq.n	800a9a2 <handle_message_memory.constprop.4+0x142>
 800a8c4:	2900      	cmp	r1, #0
 800a8c6:	f000 80c8 	beq.w	800aa5a <handle_message_memory.constprop.4+0x1fa>
 800a8ca:	2c00      	cmp	r4, #0
 800a8cc:	f040 80c5 	bne.w	800aa5a <handle_message_memory.constprop.4+0x1fa>
 800a8d0:	940c      	str	r4, [sp, #48]	@ 0x30
 800a8d2:	2f00      	cmp	r7, #0
 800a8d4:	d168      	bne.n	800a9a8 <handle_message_memory.constprop.4+0x148>
 800a8d6:	2d10      	cmp	r5, #16
 800a8d8:	f000 8084 	beq.w	800a9e4 <handle_message_memory.constprop.4+0x184>
 800a8dc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	f040 80c0 	bne.w	800aa64 <handle_message_memory.constprop.4+0x204>
 800a8e4:	2d12      	cmp	r5, #18
 800a8e6:	f000 8157 	beq.w	800ab98 <handle_message_memory.constprop.4+0x338>
 800a8ea:	9309      	str	r3, [sp, #36]	@ 0x24
 800a8ec:	2d64      	cmp	r5, #100	@ 0x64
 800a8ee:	d00d      	beq.n	800a90c <handle_message_memory.constprop.4+0xac>
 800a8f0:	2f00      	cmp	r7, #0
 800a8f2:	d138      	bne.n	800a966 <handle_message_memory.constprop.4+0x106>
 800a8f4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a8f6:	689b      	ldr	r3, [r3, #8]
 800a8f8:	f10b 0b01 	add.w	fp, fp, #1
 800a8fc:	459b      	cmp	fp, r3
 800a8fe:	d3cb      	bcc.n	800a898 <handle_message_memory.constprop.4+0x38>
 800a900:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a902:	b027      	add	sp, #156	@ 0x9c
 800a904:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a908:	b002      	add	sp, #8
 800a90a:	4770      	bx	lr
 800a90c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a90e:	2b00      	cmp	r3, #0
 800a910:	f000 814f 	beq.w	800abb2 <handle_message_memory.constprop.4+0x352>
 800a914:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a916:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800a918:	4613      	mov	r3, r2
 800a91a:	2a00      	cmp	r2, #0
 800a91c:	bf08      	it	eq
 800a91e:	460b      	moveq	r3, r1
 800a920:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a922:	b1c7      	cbz	r7, 800a956 <handle_message_memory.constprop.4+0xf6>
 800a924:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a926:	2400      	movs	r4, #0
 800a928:	1e5d      	subs	r5, r3, #1
 800a92a:	f85a 6034 	ldr.w	r6, [sl, r4, lsl #3]
 800a92e:	462a      	mov	r2, r5
 800a930:	4649      	mov	r1, r9
 800a932:	4630      	mov	r0, r6
 800a934:	f010 fd0a 	bl	801b34c <memcmp>
 800a938:	4603      	mov	r3, r0
 800a93a:	49a8      	ldr	r1, [pc, #672]	@ (800abdc <handle_message_memory.constprop.4+0x37c>)
 800a93c:	1970      	adds	r0, r6, r5
 800a93e:	2205      	movs	r2, #5
 800a940:	eb0a 06c4 	add.w	r6, sl, r4, lsl #3
 800a944:	3401      	adds	r4, #1
 800a946:	b923      	cbnz	r3, 800a952 <handle_message_memory.constprop.4+0xf2>
 800a948:	f010 fd00 	bl	801b34c <memcmp>
 800a94c:	2800      	cmp	r0, #0
 800a94e:	f000 8134 	beq.w	800abba <handle_message_memory.constprop.4+0x35a>
 800a952:	42a7      	cmp	r7, r4
 800a954:	d1e9      	bne.n	800a92a <handle_message_memory.constprop.4+0xca>
 800a956:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	@ 0x24
 800a95a:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a95c:	fb01 3302 	mla	r3, r1, r2, r3
 800a960:	930a      	str	r3, [sp, #40]	@ 0x28
 800a962:	2f00      	cmp	r7, #0
 800a964:	d0c6      	beq.n	800a8f4 <handle_message_memory.constprop.4+0x94>
 800a966:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800a968:	f7f5 fc54 	bl	8000214 <strlen>
 800a96c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a96e:	f8cd 90d8 	str.w	r9, [sp, #216]	@ 0xd8
 800a972:	3001      	adds	r0, #1
 800a974:	9000      	str	r0, [sp, #0]
 800a976:	9337      	str	r3, [sp, #220]	@ 0xdc
 800a978:	ae36      	add	r6, sp, #216	@ 0xd8
 800a97a:	ac18      	add	r4, sp, #96	@ 0x60
 800a97c:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800a980:	4620      	mov	r0, r4
 800a982:	f003 fe39 	bl	800e5f8 <micro_ros_string_utilities_remove_tail_chars>
 800a986:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a988:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800a98c:	689b      	ldr	r3, [r3, #8]
 800a98e:	910d      	str	r1, [sp, #52]	@ 0x34
 800a990:	f10b 0b01 	add.w	fp, fp, #1
 800a994:	455b      	cmp	r3, fp
 800a996:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 800a99a:	4681      	mov	r9, r0
 800a99c:	f63f af7c 	bhi.w	800a898 <handle_message_memory.constprop.4+0x38>
 800a9a0:	e7ae      	b.n	800a900 <handle_message_memory.constprop.4+0xa0>
 800a9a2:	920c      	str	r2, [sp, #48]	@ 0x30
 800a9a4:	2f00      	cmp	r7, #0
 800a9a6:	d096      	beq.n	800a8d6 <handle_message_memory.constprop.4+0x76>
 800a9a8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a9aa:	9337      	str	r3, [sp, #220]	@ 0xdc
 800a9ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a9ae:	f8cd 90d8 	str.w	r9, [sp, #216]	@ 0xd8
 800a9b2:	ae36      	add	r6, sp, #216	@ 0xd8
 800a9b4:	9300      	str	r3, [sp, #0]
 800a9b6:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800a9ba:	4630      	mov	r0, r6
 800a9bc:	f003 fdee 	bl	800e59c <micro_ros_string_utilities_append>
 800a9c0:	4b87      	ldr	r3, [pc, #540]	@ (800abe0 <handle_message_memory.constprop.4+0x380>)
 800a9c2:	9300      	str	r3, [sp, #0]
 800a9c4:	f10d 0860 	add.w	r8, sp, #96	@ 0x60
 800a9c8:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800a9cc:	4640      	mov	r0, r8
 800a9ce:	f003 fde5 	bl	800e59c <micro_ros_string_utilities_append>
 800a9d2:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 800a9d6:	2d10      	cmp	r5, #16
 800a9d8:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 800a9dc:	4681      	mov	r9, r0
 800a9de:	910d      	str	r1, [sp, #52]	@ 0x34
 800a9e0:	f47f af7c 	bne.w	800a8dc <handle_message_memory.constprop.4+0x7c>
 800a9e4:	2c00      	cmp	r4, #0
 800a9e6:	f000 80c7 	beq.w	800ab78 <handle_message_memory.constprop.4+0x318>
 800a9ea:	2301      	movs	r3, #1
 800a9ec:	9311      	str	r3, [sp, #68]	@ 0x44
 800a9ee:	2f00      	cmp	r7, #0
 800a9f0:	d144      	bne.n	800aa7c <handle_message_memory.constprop.4+0x21c>
 800a9f2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	@ 0x24
 800a9f6:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800a9f8:	2d12      	cmp	r5, #18
 800a9fa:	fb01 3302 	mla	r3, r1, r2, r3
 800a9fe:	930a      	str	r3, [sp, #40]	@ 0x28
 800aa00:	f47f af74 	bne.w	800a8ec <handle_message_memory.constprop.4+0x8c>
 800aa04:	4b77      	ldr	r3, [pc, #476]	@ (800abe4 <handle_message_memory.constprop.4+0x384>)
 800aa06:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800aa08:	6819      	ldr	r1, [r3, #0]
 800aa0a:	f003 f807 	bl	800da1c <get_message_typesupport_handle>
 800aa0e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800aa10:	6845      	ldr	r5, [r0, #4]
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	f040 80ea 	bne.w	800abec <handle_message_memory.constprop.4+0x38c>
 800aa18:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800aa1a:	9337      	str	r3, [sp, #220]	@ 0xdc
 800aa1c:	f8cd 90d8 	str.w	r9, [sp, #216]	@ 0xd8
 800aa20:	ae36      	add	r6, sp, #216	@ 0xd8
 800aa22:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800aa26:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800aa28:	9335      	str	r3, [sp, #212]	@ 0xd4
 800aa2a:	f10d 0810 	add.w	r8, sp, #16
 800aa2e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800aa30:	9330      	str	r3, [sp, #192]	@ 0xc0
 800aa32:	e9cd a733 	strd	sl, r7, [sp, #204]	@ 0xcc
 800aa36:	e888 0007 	stmia.w	r8, {r0, r1, r2}
 800aa3a:	ab32      	add	r3, sp, #200	@ 0xc8
 800aa3c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800aa3e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800aa42:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800aa44:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800aa46:	4419      	add	r1, r3
 800aa48:	ab30      	add	r3, sp, #192	@ 0xc0
 800aa4a:	cb0c      	ldmia	r3, {r2, r3}
 800aa4c:	4628      	mov	r0, r5
 800aa4e:	f7ff ff07 	bl	800a860 <handle_message_memory.constprop.4>
 800aa52:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aa54:	4403      	add	r3, r0
 800aa56:	930a      	str	r3, [sp, #40]	@ 0x28
 800aa58:	e74a      	b.n	800a8f0 <handle_message_memory.constprop.4+0x90>
 800aa5a:	2d10      	cmp	r5, #16
 800aa5c:	d07a      	beq.n	800ab54 <handle_message_memory.constprop.4+0x2f4>
 800aa5e:	2f00      	cmp	r7, #0
 800aa60:	f040 8097 	bne.w	800ab92 <handle_message_memory.constprop.4+0x332>
 800aa64:	2d12      	cmp	r5, #18
 800aa66:	d029      	beq.n	800aabc <handle_message_memory.constprop.4+0x25c>
 800aa68:	2d64      	cmp	r5, #100	@ 0x64
 800aa6a:	d177      	bne.n	800ab5c <handle_message_memory.constprop.4+0x2fc>
 800aa6c:	230c      	movs	r3, #12
 800aa6e:	9311      	str	r3, [sp, #68]	@ 0x44
 800aa70:	2c00      	cmp	r4, #0
 800aa72:	d079      	beq.n	800ab68 <handle_message_memory.constprop.4+0x308>
 800aa74:	2301      	movs	r3, #1
 800aa76:	930c      	str	r3, [sp, #48]	@ 0x30
 800aa78:	2f00      	cmp	r7, #0
 800aa7a:	d0ba      	beq.n	800a9f2 <handle_message_memory.constprop.4+0x192>
 800aa7c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800aa7e:	e9cd b515 	strd	fp, r5, [sp, #84]	@ 0x54
 800aa82:	2400      	movs	r4, #0
 800aa84:	1e5e      	subs	r6, r3, #1
 800aa86:	f85a b034 	ldr.w	fp, [sl, r4, lsl #3]
 800aa8a:	4658      	mov	r0, fp
 800aa8c:	f7f5 fbc2 	bl	8000214 <strlen>
 800aa90:	4649      	mov	r1, r9
 800aa92:	4602      	mov	r2, r0
 800aa94:	4658      	mov	r0, fp
 800aa96:	f010 fc59 	bl	801b34c <memcmp>
 800aa9a:	4605      	mov	r5, r0
 800aa9c:	eb0a 08c4 	add.w	r8, sl, r4, lsl #3
 800aaa0:	4632      	mov	r2, r6
 800aaa2:	3401      	adds	r4, #1
 800aaa4:	4649      	mov	r1, r9
 800aaa6:	4658      	mov	r0, fp
 800aaa8:	b91d      	cbnz	r5, 800aab2 <handle_message_memory.constprop.4+0x252>
 800aaaa:	f010 fc4f 	bl	801b34c <memcmp>
 800aaae:	2800      	cmp	r0, #0
 800aab0:	d079      	beq.n	800aba6 <handle_message_memory.constprop.4+0x346>
 800aab2:	42a7      	cmp	r7, r4
 800aab4:	d8e7      	bhi.n	800aa86 <handle_message_memory.constprop.4+0x226>
 800aab6:	e9dd b515 	ldrd	fp, r5, [sp, #84]	@ 0x54
 800aaba:	e79a      	b.n	800a9f2 <handle_message_memory.constprop.4+0x192>
 800aabc:	4b49      	ldr	r3, [pc, #292]	@ (800abe4 <handle_message_memory.constprop.4+0x384>)
 800aabe:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800aac0:	6819      	ldr	r1, [r3, #0]
 800aac2:	f002 ffab 	bl	800da1c <get_message_typesupport_handle>
 800aac6:	6843      	ldr	r3, [r0, #4]
 800aac8:	68db      	ldr	r3, [r3, #12]
 800aaca:	9311      	str	r3, [sp, #68]	@ 0x44
 800aacc:	b90c      	cbnz	r4, 800aad2 <handle_message_memory.constprop.4+0x272>
 800aace:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 800aad0:	9309      	str	r3, [sp, #36]	@ 0x24
 800aad2:	2f00      	cmp	r7, #0
 800aad4:	d14d      	bne.n	800ab72 <handle_message_memory.constprop.4+0x312>
 800aad6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aad8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800aada:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800aadc:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800aade:	fb04 3302 	mla	r3, r4, r2, r3
 800aae2:	930a      	str	r3, [sp, #40]	@ 0x28
 800aae4:	4b3f      	ldr	r3, [pc, #252]	@ (800abe4 <handle_message_memory.constprop.4+0x384>)
 800aae6:	6819      	ldr	r1, [r3, #0]
 800aae8:	f002 ff98 	bl	800da1c <get_message_typesupport_handle>
 800aaec:	6845      	ldr	r5, [r0, #4]
 800aaee:	2c00      	cmp	r4, #0
 800aaf0:	f43f af00 	beq.w	800a8f4 <handle_message_memory.constprop.4+0x94>
 800aaf4:	ab32      	add	r3, sp, #200	@ 0xc8
 800aaf6:	f8cd b03c 	str.w	fp, [sp, #60]	@ 0x3c
 800aafa:	46cb      	mov	fp, r9
 800aafc:	46d1      	mov	r9, sl
 800aafe:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ab02:	930c      	str	r3, [sp, #48]	@ 0x30
 800ab04:	2400      	movs	r4, #0
 800ab06:	ae36      	add	r6, sp, #216	@ 0xd8
 800ab08:	f10d 0810 	add.w	r8, sp, #16
 800ab0c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ab0e:	9337      	str	r3, [sp, #220]	@ 0xdc
 800ab10:	f8cd b0d8 	str.w	fp, [sp, #216]	@ 0xd8
 800ab14:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800ab18:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ab1a:	9335      	str	r3, [sp, #212]	@ 0xd4
 800ab1c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ab1e:	9330      	str	r3, [sp, #192]	@ 0xc0
 800ab20:	e9cd 9733 	strd	r9, r7, [sp, #204]	@ 0xcc
 800ab24:	e888 0007 	stmia.w	r8, {r0, r1, r2}
 800ab28:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ab2a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ab2c:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800ab30:	ab30      	add	r3, sp, #192	@ 0xc0
 800ab32:	cb0c      	ldmia	r3, {r2, r3}
 800ab34:	2100      	movs	r1, #0
 800ab36:	4628      	mov	r0, r5
 800ab38:	f7ff fe92 	bl	800a860 <handle_message_memory.constprop.4>
 800ab3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab3e:	3401      	adds	r4, #1
 800ab40:	429c      	cmp	r4, r3
 800ab42:	4482      	add	sl, r0
 800ab44:	d1e2      	bne.n	800ab0c <handle_message_memory.constprop.4+0x2ac>
 800ab46:	f8cd a028 	str.w	sl, [sp, #40]	@ 0x28
 800ab4a:	46ca      	mov	sl, r9
 800ab4c:	46d9      	mov	r9, fp
 800ab4e:	f8dd b03c 	ldr.w	fp, [sp, #60]	@ 0x3c
 800ab52:	e6cd      	b.n	800a8f0 <handle_message_memory.constprop.4+0x90>
 800ab54:	2301      	movs	r3, #1
 800ab56:	930c      	str	r3, [sp, #48]	@ 0x30
 800ab58:	2564      	movs	r5, #100	@ 0x64
 800ab5a:	e6ba      	b.n	800a8d2 <handle_message_memory.constprop.4+0x72>
 800ab5c:	4b22      	ldr	r3, [pc, #136]	@ (800abe8 <handle_message_memory.constprop.4+0x388>)
 800ab5e:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800ab62:	9311      	str	r3, [sp, #68]	@ 0x44
 800ab64:	2c00      	cmp	r4, #0
 800ab66:	d185      	bne.n	800aa74 <handle_message_memory.constprop.4+0x214>
 800ab68:	9b32      	ldr	r3, [sp, #200]	@ 0xc8
 800ab6a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ab6c:	2301      	movs	r3, #1
 800ab6e:	930c      	str	r3, [sp, #48]	@ 0x30
 800ab70:	e73d      	b.n	800a9ee <handle_message_memory.constprop.4+0x18e>
 800ab72:	2301      	movs	r3, #1
 800ab74:	930c      	str	r3, [sp, #48]	@ 0x30
 800ab76:	e781      	b.n	800aa7c <handle_message_memory.constprop.4+0x21c>
 800ab78:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800ab7a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800ab7c:	4613      	mov	r3, r2
 800ab7e:	2a00      	cmp	r2, #0
 800ab80:	bf08      	it	eq
 800ab82:	460b      	moveq	r3, r1
 800ab84:	9309      	str	r3, [sp, #36]	@ 0x24
 800ab86:	bb0f      	cbnz	r7, 800abcc <handle_message_memory.constprop.4+0x36c>
 800ab88:	461a      	mov	r2, r3
 800ab8a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ab8c:	4413      	add	r3, r2
 800ab8e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ab90:	e6b0      	b.n	800a8f4 <handle_message_memory.constprop.4+0x94>
 800ab92:	2301      	movs	r3, #1
 800ab94:	930c      	str	r3, [sp, #48]	@ 0x30
 800ab96:	e707      	b.n	800a9a8 <handle_message_memory.constprop.4+0x148>
 800ab98:	4b12      	ldr	r3, [pc, #72]	@ (800abe4 <handle_message_memory.constprop.4+0x384>)
 800ab9a:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800ab9c:	6819      	ldr	r1, [r3, #0]
 800ab9e:	f002 ff3d 	bl	800da1c <get_message_typesupport_handle>
 800aba2:	6845      	ldr	r5, [r0, #4]
 800aba4:	e738      	b.n	800aa18 <handle_message_memory.constprop.4+0x1b8>
 800aba6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800abaa:	9309      	str	r3, [sp, #36]	@ 0x24
 800abac:	e9dd b515 	ldrd	fp, r5, [sp, #84]	@ 0x54
 800abb0:	e71f      	b.n	800a9f2 <handle_message_memory.constprop.4+0x192>
 800abb2:	a821      	add	r0, sp, #132	@ 0x84
 800abb4:	f002 f8d6 	bl	800cd64 <rcutils_get_default_allocator>
 800abb8:	e6ac      	b.n	800a914 <handle_message_memory.constprop.4+0xb4>
 800abba:	6873      	ldr	r3, [r6, #4]
 800abbc:	930f      	str	r3, [sp, #60]	@ 0x3c
 800abbe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	@ 0x24
 800abc2:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800abc4:	fb01 3302 	mla	r3, r1, r2, r3
 800abc8:	930a      	str	r3, [sp, #40]	@ 0x28
 800abca:	e6ca      	b.n	800a962 <handle_message_memory.constprop.4+0x102>
 800abcc:	2301      	movs	r3, #1
 800abce:	9311      	str	r3, [sp, #68]	@ 0x44
 800abd0:	e754      	b.n	800aa7c <handle_message_memory.constprop.4+0x21c>
 800abd2:	a81c      	add	r0, sp, #112	@ 0x70
 800abd4:	f002 f8c6 	bl	800cd64 <rcutils_get_default_allocator>
 800abd8:	e656      	b.n	800a888 <handle_message_memory.constprop.4+0x28>
 800abda:	bf00      	nop
 800abdc:	0801c668 	.word	0x0801c668
 800abe0:	0801c664 	.word	0x0801c664
 800abe4:	2000038c 	.word	0x2000038c
 800abe8:	0801d64c 	.word	0x0801d64c
 800abec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d180      	bne.n	800aaf4 <handle_message_memory.constprop.4+0x294>
 800abf2:	e67d      	b.n	800a8f0 <handle_message_memory.constprop.4+0x90>

0800abf4 <handle_message_memory.constprop.2>:
 800abf4:	b082      	sub	sp, #8
 800abf6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abfa:	ed2d 8b02 	vpush	{d8}
 800abfe:	b0a9      	sub	sp, #164	@ 0xa4
 800ac00:	ac34      	add	r4, sp, #208	@ 0xd0
 800ac02:	e884 000c 	stmia.w	r4, {r2, r3}
 800ac06:	e9dd b337 	ldrd	fp, r3, [sp, #220]	@ 0xdc
 800ac0a:	9216      	str	r2, [sp, #88]	@ 0x58
 800ac0c:	e9dd 723a 	ldrd	r7, r2, [sp, #232]	@ 0xe8
 800ac10:	9308      	str	r3, [sp, #32]
 800ac12:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 800ac14:	900b      	str	r0, [sp, #44]	@ 0x2c
 800ac16:	9112      	str	r1, [sp, #72]	@ 0x48
 800ac18:	9314      	str	r3, [sp, #80]	@ 0x50
 800ac1a:	920c      	str	r2, [sp, #48]	@ 0x30
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	f000 8210 	beq.w	800b042 <handle_message_memory.constprop.2+0x44e>
 800ac22:	681a      	ldr	r2, [r3, #0]
 800ac24:	691b      	ldr	r3, [r3, #16]
 800ac26:	9215      	str	r2, [sp, #84]	@ 0x54
 800ac28:	ee08 3a10 	vmov	s16, r3
 800ac2c:	4603      	mov	r3, r0
 800ac2e:	689b      	ldr	r3, [r3, #8]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	f000 81c0 	beq.w	800afb6 <handle_message_memory.constprop.2+0x3c2>
 800ac36:	2300      	movs	r3, #0
 800ac38:	e9cd 3309 	strd	r3, r3, [sp, #36]	@ 0x24
 800ac3c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ac3e:	691a      	ldr	r2, [r3, #16]
 800ac40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac42:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
 800ac46:	eb02 0381 	add.w	r3, r2, r1, lsl #2
 800ac4a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800ac4e:	920f      	str	r2, [sp, #60]	@ 0x3c
 800ac50:	e9d3 5102 	ldrd	r5, r1, [r3, #8]
 800ac54:	7c1a      	ldrb	r2, [r3, #16]
 800ac56:	791e      	ldrb	r6, [r3, #4]
 800ac58:	f8d3 8014 	ldr.w	r8, [r3, #20]
 800ac5c:	f893 9018 	ldrb.w	r9, [r3, #24]
 800ac60:	69db      	ldr	r3, [r3, #28]
 800ac62:	9110      	str	r1, [sp, #64]	@ 0x40
 800ac64:	930d      	str	r3, [sp, #52]	@ 0x34
 800ac66:	2a00      	cmp	r2, #0
 800ac68:	d056      	beq.n	800ad18 <handle_message_memory.constprop.2+0x124>
 800ac6a:	f1b8 0f00 	cmp.w	r8, #0
 800ac6e:	d002      	beq.n	800ac76 <handle_message_memory.constprop.2+0x82>
 800ac70:	f1b9 0f00 	cmp.w	r9, #0
 800ac74:	d050      	beq.n	800ad18 <handle_message_memory.constprop.2+0x124>
 800ac76:	9b08      	ldr	r3, [sp, #32]
 800ac78:	2e10      	cmp	r6, #16
 800ac7a:	bf08      	it	eq
 800ac7c:	2664      	moveq	r6, #100	@ 0x64
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	f040 8154 	bne.w	800af2c <handle_message_memory.constprop.2+0x338>
 800ac84:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ac86:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ac88:	2e12      	cmp	r6, #18
 800ac8a:	4413      	add	r3, r2
 800ac8c:	930e      	str	r3, [sp, #56]	@ 0x38
 800ac8e:	f000 80f8 	beq.w	800ae82 <handle_message_memory.constprop.2+0x28e>
 800ac92:	2e64      	cmp	r6, #100	@ 0x64
 800ac94:	f040 8164 	bne.w	800af60 <handle_message_memory.constprop.2+0x36c>
 800ac98:	f1b9 0f00 	cmp.w	r9, #0
 800ac9c:	f040 816b 	bne.w	800af76 <handle_message_memory.constprop.2+0x382>
 800aca0:	230c      	movs	r3, #12
 800aca2:	9311      	str	r3, [sp, #68]	@ 0x44
 800aca4:	2301      	movs	r3, #1
 800aca6:	f8dd 80d8 	ldr.w	r8, [sp, #216]	@ 0xd8
 800acaa:	9313      	str	r3, [sp, #76]	@ 0x4c
 800acac:	9b08      	ldr	r3, [sp, #32]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d148      	bne.n	800ad44 <handle_message_memory.constprop.2+0x150>
 800acb2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800acb4:	fb03 f208 	mul.w	r2, r3, r8
 800acb8:	ee18 1a10 	vmov	r1, s16
 800acbc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800acbe:	9211      	str	r2, [sp, #68]	@ 0x44
 800acc0:	4610      	mov	r0, r2
 800acc2:	4798      	blx	r3
 800acc4:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 800acc6:	6020      	str	r0, [r4, #0]
 800acc8:	2800      	cmp	r0, #0
 800acca:	f000 8174 	beq.w	800afb6 <handle_message_memory.constprop.2+0x3c2>
 800acce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800acd0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800acd2:	2100      	movs	r1, #0
 800acd4:	4413      	add	r3, r2
 800acd6:	930a      	str	r3, [sp, #40]	@ 0x28
 800acd8:	f010 fb62 	bl	801b3a0 <memset>
 800acdc:	4623      	mov	r3, r4
 800acde:	f8c4 8008 	str.w	r8, [r4, #8]
 800ace2:	2e12      	cmp	r6, #18
 800ace4:	f04f 0400 	mov.w	r4, #0
 800ace8:	605c      	str	r4, [r3, #4]
 800acea:	f000 80f4 	beq.w	800aed6 <handle_message_memory.constprop.2+0x2e2>
 800acee:	2e64      	cmp	r6, #100	@ 0x64
 800acf0:	d054      	beq.n	800ad9c <handle_message_memory.constprop.2+0x1a8>
 800acf2:	9b08      	ldr	r3, [sp, #32]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	f040 80a6 	bne.w	800ae46 <handle_message_memory.constprop.2+0x252>
 800acfa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800acfc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800acfe:	689b      	ldr	r3, [r3, #8]
 800ad00:	3201      	adds	r2, #1
 800ad02:	429a      	cmp	r2, r3
 800ad04:	9209      	str	r2, [sp, #36]	@ 0x24
 800ad06:	d399      	bcc.n	800ac3c <handle_message_memory.constprop.2+0x48>
 800ad08:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ad0a:	b029      	add	sp, #164	@ 0xa4
 800ad0c:	ecbd 8b02 	vpop	{d8}
 800ad10:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad14:	b002      	add	sp, #8
 800ad16:	4770      	bx	lr
 800ad18:	9b08      	ldr	r3, [sp, #32]
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	f040 80c1 	bne.w	800aea2 <handle_message_memory.constprop.2+0x2ae>
 800ad20:	2e10      	cmp	r6, #16
 800ad22:	d134      	bne.n	800ad8e <handle_message_memory.constprop.2+0x19a>
 800ad24:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ad26:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ad28:	4413      	add	r3, r2
 800ad2a:	930e      	str	r3, [sp, #56]	@ 0x38
 800ad2c:	f1b9 0f00 	cmp.w	r9, #0
 800ad30:	f000 8126 	beq.w	800af80 <handle_message_memory.constprop.2+0x38c>
 800ad34:	2300      	movs	r3, #0
 800ad36:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ad38:	2301      	movs	r3, #1
 800ad3a:	9311      	str	r3, [sp, #68]	@ 0x44
 800ad3c:	9b08      	ldr	r3, [sp, #32]
 800ad3e:	2610      	movs	r6, #16
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d0b6      	beq.n	800acb2 <handle_message_memory.constprop.2+0xbe>
 800ad44:	469a      	mov	sl, r3
 800ad46:	e9cd 5818 	strd	r5, r8, [sp, #96]	@ 0x60
 800ad4a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ad4c:	9617      	str	r6, [sp, #92]	@ 0x5c
 800ad4e:	2400      	movs	r4, #0
 800ad50:	f103 39ff 	add.w	r9, r3, #4294967295	@ 0xffffffff
 800ad54:	f85b 6034 	ldr.w	r6, [fp, r4, lsl #3]
 800ad58:	4630      	mov	r0, r6
 800ad5a:	f7f5 fa5b 	bl	8000214 <strlen>
 800ad5e:	4639      	mov	r1, r7
 800ad60:	4602      	mov	r2, r0
 800ad62:	4630      	mov	r0, r6
 800ad64:	f010 faf2 	bl	801b34c <memcmp>
 800ad68:	4605      	mov	r5, r0
 800ad6a:	eb0b 08c4 	add.w	r8, fp, r4, lsl #3
 800ad6e:	464a      	mov	r2, r9
 800ad70:	3401      	adds	r4, #1
 800ad72:	4639      	mov	r1, r7
 800ad74:	4630      	mov	r0, r6
 800ad76:	b925      	cbnz	r5, 800ad82 <handle_message_memory.constprop.2+0x18e>
 800ad78:	f010 fae8 	bl	801b34c <memcmp>
 800ad7c:	2800      	cmp	r0, #0
 800ad7e:	f000 811d 	beq.w	800afbc <handle_message_memory.constprop.2+0x3c8>
 800ad82:	4554      	cmp	r4, sl
 800ad84:	d1e6      	bne.n	800ad54 <handle_message_memory.constprop.2+0x160>
 800ad86:	e9dd 5818 	ldrd	r5, r8, [sp, #96]	@ 0x60
 800ad8a:	9e17      	ldr	r6, [sp, #92]	@ 0x5c
 800ad8c:	e791      	b.n	800acb2 <handle_message_memory.constprop.2+0xbe>
 800ad8e:	2e12      	cmp	r6, #18
 800ad90:	f000 80fe 	beq.w	800af90 <handle_message_memory.constprop.2+0x39c>
 800ad94:	2e64      	cmp	r6, #100	@ 0x64
 800ad96:	f04f 0800 	mov.w	r8, #0
 800ad9a:	d1aa      	bne.n	800acf2 <handle_message_memory.constprop.2+0xfe>
 800ad9c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	f000 8146 	beq.w	800b030 <handle_message_memory.constprop.2+0x43c>
 800ada4:	681a      	ldr	r2, [r3, #0]
 800ada6:	691e      	ldr	r6, [r3, #16]
 800ada8:	920e      	str	r2, [sp, #56]	@ 0x38
 800adaa:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800adac:	2d00      	cmp	r5, #0
 800adae:	bf08      	it	eq
 800adb0:	461d      	moveq	r5, r3
 800adb2:	9b08      	ldr	r3, [sp, #32]
 800adb4:	b1eb      	cbz	r3, 800adf2 <handle_message_memory.constprop.2+0x1fe>
 800adb6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800adb8:	9510      	str	r5, [sp, #64]	@ 0x40
 800adba:	f102 39ff 	add.w	r9, r2, #4294967295	@ 0xffffffff
 800adbe:	2400      	movs	r4, #0
 800adc0:	469a      	mov	sl, r3
 800adc2:	f85b 5034 	ldr.w	r5, [fp, r4, lsl #3]
 800adc6:	464a      	mov	r2, r9
 800adc8:	4639      	mov	r1, r7
 800adca:	4628      	mov	r0, r5
 800adcc:	f010 fabe 	bl	801b34c <memcmp>
 800add0:	4603      	mov	r3, r0
 800add2:	49a1      	ldr	r1, [pc, #644]	@ (800b058 <handle_message_memory.constprop.2+0x464>)
 800add4:	eb05 0009 	add.w	r0, r5, r9
 800add8:	2205      	movs	r2, #5
 800adda:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 800adde:	3401      	adds	r4, #1
 800ade0:	b923      	cbnz	r3, 800adec <handle_message_memory.constprop.2+0x1f8>
 800ade2:	f010 fab3 	bl	801b34c <memcmp>
 800ade6:	2800      	cmp	r0, #0
 800ade8:	f000 8129 	beq.w	800b03e <handle_message_memory.constprop.2+0x44a>
 800adec:	4554      	cmp	r4, sl
 800adee:	d1e8      	bne.n	800adc2 <handle_message_memory.constprop.2+0x1ce>
 800adf0:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800adf2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800adf4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800adf6:	589c      	ldr	r4, [r3, r2]
 800adf8:	fb08 f305 	mul.w	r3, r8, r5
 800adfc:	930d      	str	r3, [sp, #52]	@ 0x34
 800adfe:	f1b8 0f00 	cmp.w	r8, #0
 800ae02:	d018      	beq.n	800ae36 <handle_message_memory.constprop.2+0x242>
 800ae04:	f04f 0a00 	mov.w	sl, #0
 800ae08:	f8cd b040 	str.w	fp, [sp, #64]	@ 0x40
 800ae0c:	46b3      	mov	fp, r6
 800ae0e:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 800ae10:	46d1      	mov	r9, sl
 800ae12:	4659      	mov	r1, fp
 800ae14:	4628      	mov	r0, r5
 800ae16:	47b0      	blx	r6
 800ae18:	f10a 0a01 	add.w	sl, sl, #1
 800ae1c:	e9c4 9501 	strd	r9, r5, [r4, #4]
 800ae20:	6020      	str	r0, [r4, #0]
 800ae22:	462a      	mov	r2, r5
 800ae24:	2100      	movs	r1, #0
 800ae26:	f010 fabb 	bl	801b3a0 <memset>
 800ae2a:	45c2      	cmp	sl, r8
 800ae2c:	f104 040c 	add.w	r4, r4, #12
 800ae30:	d1ef      	bne.n	800ae12 <handle_message_memory.constprop.2+0x21e>
 800ae32:	f8dd b040 	ldr.w	fp, [sp, #64]	@ 0x40
 800ae36:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ae38:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ae3a:	4413      	add	r3, r2
 800ae3c:	930a      	str	r3, [sp, #40]	@ 0x28
 800ae3e:	9b08      	ldr	r3, [sp, #32]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	f43f af5a 	beq.w	800acfa <handle_message_memory.constprop.2+0x106>
 800ae46:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 800ae48:	f7f5 f9e4 	bl	8000214 <strlen>
 800ae4c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ae4e:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 800ae50:	973a      	str	r7, [sp, #232]	@ 0xe8
 800ae52:	3001      	adds	r0, #1
 800ae54:	9000      	str	r0, [sp, #0]
 800ae56:	933b      	str	r3, [sp, #236]	@ 0xec
 800ae58:	ad1a      	add	r5, sp, #104	@ 0x68
 800ae5a:	ac3a      	add	r4, sp, #232	@ 0xe8
 800ae5c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800ae60:	3601      	adds	r6, #1
 800ae62:	4628      	mov	r0, r5
 800ae64:	9609      	str	r6, [sp, #36]	@ 0x24
 800ae66:	f003 fbc7 	bl	800e5f8 <micro_ros_string_utilities_remove_tail_chars>
 800ae6a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ae6c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800ae70:	689b      	ldr	r3, [r3, #8]
 800ae72:	910c      	str	r1, [sp, #48]	@ 0x30
 800ae74:	429e      	cmp	r6, r3
 800ae76:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ae7a:	4607      	mov	r7, r0
 800ae7c:	f4ff aede 	bcc.w	800ac3c <handle_message_memory.constprop.2+0x48>
 800ae80:	e742      	b.n	800ad08 <handle_message_memory.constprop.2+0x114>
 800ae82:	4b76      	ldr	r3, [pc, #472]	@ (800b05c <handle_message_memory.constprop.2+0x468>)
 800ae84:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800ae86:	6819      	ldr	r1, [r3, #0]
 800ae88:	f002 fdc8 	bl	800da1c <get_message_typesupport_handle>
 800ae8c:	6843      	ldr	r3, [r0, #4]
 800ae8e:	68db      	ldr	r3, [r3, #12]
 800ae90:	9311      	str	r3, [sp, #68]	@ 0x44
 800ae92:	f1b9 0f00 	cmp.w	r9, #0
 800ae96:	d16b      	bne.n	800af70 <handle_message_memory.constprop.2+0x37c>
 800ae98:	2301      	movs	r3, #1
 800ae9a:	f8dd 80d4 	ldr.w	r8, [sp, #212]	@ 0xd4
 800ae9e:	9313      	str	r3, [sp, #76]	@ 0x4c
 800aea0:	e704      	b.n	800acac <handle_message_memory.constprop.2+0xb8>
 800aea2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800aea4:	933b      	str	r3, [sp, #236]	@ 0xec
 800aea6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aea8:	973a      	str	r7, [sp, #232]	@ 0xe8
 800aeaa:	ac3a      	add	r4, sp, #232	@ 0xe8
 800aeac:	9300      	str	r3, [sp, #0]
 800aeae:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800aeb2:	4620      	mov	r0, r4
 800aeb4:	f003 fb72 	bl	800e59c <micro_ros_string_utilities_append>
 800aeb8:	4b69      	ldr	r3, [pc, #420]	@ (800b060 <handle_message_memory.constprop.2+0x46c>)
 800aeba:	9300      	str	r3, [sp, #0]
 800aebc:	af1a      	add	r7, sp, #104	@ 0x68
 800aebe:	4638      	mov	r0, r7
 800aec0:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800aec4:	f003 fb6a 	bl	800e59c <micro_ros_string_utilities_append>
 800aec8:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800aecc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800aed0:	4607      	mov	r7, r0
 800aed2:	910c      	str	r1, [sp, #48]	@ 0x30
 800aed4:	e724      	b.n	800ad20 <handle_message_memory.constprop.2+0x12c>
 800aed6:	4b61      	ldr	r3, [pc, #388]	@ (800b05c <handle_message_memory.constprop.2+0x468>)
 800aed8:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800aeda:	6819      	ldr	r1, [r3, #0]
 800aedc:	f002 fd9e 	bl	800da1c <get_message_typesupport_handle>
 800aee0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800aee2:	f8d0 9004 	ldr.w	r9, [r0, #4]
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d16d      	bne.n	800afc6 <handle_message_memory.constprop.2+0x3d2>
 800aeea:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800aeec:	933b      	str	r3, [sp, #236]	@ 0xec
 800aeee:	973a      	str	r7, [sp, #232]	@ 0xe8
 800aef0:	ac3a      	add	r4, sp, #232	@ 0xe8
 800aef2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800aef6:	9b08      	ldr	r3, [sp, #32]
 800aef8:	9338      	str	r3, [sp, #224]	@ 0xe0
 800aefa:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800aefc:	9339      	str	r3, [sp, #228]	@ 0xe4
 800aefe:	f10d 0a10 	add.w	sl, sp, #16
 800af02:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800af04:	9334      	str	r3, [sp, #208]	@ 0xd0
 800af06:	f8cd b0dc 	str.w	fp, [sp, #220]	@ 0xdc
 800af0a:	e88a 0007 	stmia.w	sl, {r0, r1, r2}
 800af0e:	ae36      	add	r6, sp, #216	@ 0xd8
 800af10:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800af14:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800af18:	ab34      	add	r3, sp, #208	@ 0xd0
 800af1a:	cb0c      	ldmia	r3, {r2, r3}
 800af1c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800af1e:	4648      	mov	r0, r9
 800af20:	f7ff fe68 	bl	800abf4 <handle_message_memory.constprop.2>
 800af24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800af26:	4403      	add	r3, r0
 800af28:	930a      	str	r3, [sp, #40]	@ 0x28
 800af2a:	e6e2      	b.n	800acf2 <handle_message_memory.constprop.2+0xfe>
 800af2c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800af2e:	933b      	str	r3, [sp, #236]	@ 0xec
 800af30:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800af32:	973a      	str	r7, [sp, #232]	@ 0xe8
 800af34:	ac3a      	add	r4, sp, #232	@ 0xe8
 800af36:	9300      	str	r3, [sp, #0]
 800af38:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800af3c:	4620      	mov	r0, r4
 800af3e:	f003 fb2d 	bl	800e59c <micro_ros_string_utilities_append>
 800af42:	4b47      	ldr	r3, [pc, #284]	@ (800b060 <handle_message_memory.constprop.2+0x46c>)
 800af44:	9300      	str	r3, [sp, #0]
 800af46:	af1a      	add	r7, sp, #104	@ 0x68
 800af48:	4638      	mov	r0, r7
 800af4a:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800af4e:	f003 fb25 	bl	800e59c <micro_ros_string_utilities_append>
 800af52:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800af56:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800af5a:	4607      	mov	r7, r0
 800af5c:	910c      	str	r1, [sp, #48]	@ 0x30
 800af5e:	e691      	b.n	800ac84 <handle_message_memory.constprop.2+0x90>
 800af60:	4b40      	ldr	r3, [pc, #256]	@ (800b064 <handle_message_memory.constprop.2+0x470>)
 800af62:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 800af66:	9311      	str	r3, [sp, #68]	@ 0x44
 800af68:	f1b9 0f00 	cmp.w	r9, #0
 800af6c:	f43f ae9a 	beq.w	800aca4 <handle_message_memory.constprop.2+0xb0>
 800af70:	2301      	movs	r3, #1
 800af72:	9313      	str	r3, [sp, #76]	@ 0x4c
 800af74:	e69a      	b.n	800acac <handle_message_memory.constprop.2+0xb8>
 800af76:	2301      	movs	r3, #1
 800af78:	9313      	str	r3, [sp, #76]	@ 0x4c
 800af7a:	230c      	movs	r3, #12
 800af7c:	9311      	str	r3, [sp, #68]	@ 0x44
 800af7e:	e695      	b.n	800acac <handle_message_memory.constprop.2+0xb8>
 800af80:	b195      	cbz	r5, 800afa8 <handle_message_memory.constprop.2+0x3b4>
 800af82:	2301      	movs	r3, #1
 800af84:	f8cd 904c 	str.w	r9, [sp, #76]	@ 0x4c
 800af88:	46a8      	mov	r8, r5
 800af8a:	2610      	movs	r6, #16
 800af8c:	9311      	str	r3, [sp, #68]	@ 0x44
 800af8e:	e68d      	b.n	800acac <handle_message_memory.constprop.2+0xb8>
 800af90:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800af92:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800af94:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800af96:	4413      	add	r3, r2
 800af98:	930e      	str	r3, [sp, #56]	@ 0x38
 800af9a:	4b30      	ldr	r3, [pc, #192]	@ (800b05c <handle_message_memory.constprop.2+0x468>)
 800af9c:	6819      	ldr	r1, [r3, #0]
 800af9e:	f002 fd3d 	bl	800da1c <get_message_typesupport_handle>
 800afa2:	f8d0 9004 	ldr.w	r9, [r0, #4]
 800afa6:	e7a0      	b.n	800aeea <handle_message_memory.constprop.2+0x2f6>
 800afa8:	2301      	movs	r3, #1
 800afaa:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800afae:	9513      	str	r5, [sp, #76]	@ 0x4c
 800afb0:	2610      	movs	r6, #16
 800afb2:	9311      	str	r3, [sp, #68]	@ 0x44
 800afb4:	e67a      	b.n	800acac <handle_message_memory.constprop.2+0xb8>
 800afb6:	2300      	movs	r3, #0
 800afb8:	930a      	str	r3, [sp, #40]	@ 0x28
 800afba:	e6a5      	b.n	800ad08 <handle_message_memory.constprop.2+0x114>
 800afbc:	e9dd 6517 	ldrd	r6, r5, [sp, #92]	@ 0x5c
 800afc0:	f8d8 8004 	ldr.w	r8, [r8, #4]
 800afc4:	e675      	b.n	800acb2 <handle_message_memory.constprop.2+0xbe>
 800afc6:	f1b8 0f00 	cmp.w	r8, #0
 800afca:	f43f ae92 	beq.w	800acf2 <handle_message_memory.constprop.2+0xfe>
 800afce:	4625      	mov	r5, r4
 800afd0:	ac3a      	add	r4, sp, #232	@ 0xe8
 800afd2:	940d      	str	r4, [sp, #52]	@ 0x34
 800afd4:	465c      	mov	r4, fp
 800afd6:	46bb      	mov	fp, r7
 800afd8:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 800afda:	f10d 0a10 	add.w	sl, sp, #16
 800afde:	ae36      	add	r6, sp, #216	@ 0xd8
 800afe0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800afe2:	933b      	str	r3, [sp, #236]	@ 0xec
 800afe4:	9b08      	ldr	r3, [sp, #32]
 800afe6:	9338      	str	r3, [sp, #224]	@ 0xe0
 800afe8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800afea:	9339      	str	r3, [sp, #228]	@ 0xe4
 800afec:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800afee:	9334      	str	r3, [sp, #208]	@ 0xd0
 800aff0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aff2:	f8cd b0e8 	str.w	fp, [sp, #232]	@ 0xe8
 800aff6:	f8d3 c000 	ldr.w	ip, [r3]
 800affa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800affc:	f8d9 e00c 	ldr.w	lr, [r9, #12]
 800b000:	9437      	str	r4, [sp, #220]	@ 0xdc
 800b002:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b006:	e88a 0007 	stmia.w	sl, {r0, r1, r2}
 800b00a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800b00e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800b012:	ab34      	add	r3, sp, #208	@ 0xd0
 800b014:	fb0e c105 	mla	r1, lr, r5, ip
 800b018:	cb0c      	ldmia	r3, {r2, r3}
 800b01a:	4648      	mov	r0, r9
 800b01c:	f7ff fdea 	bl	800abf4 <handle_message_memory.constprop.2>
 800b020:	3501      	adds	r5, #1
 800b022:	45a8      	cmp	r8, r5
 800b024:	4407      	add	r7, r0
 800b026:	d1db      	bne.n	800afe0 <handle_message_memory.constprop.2+0x3ec>
 800b028:	970a      	str	r7, [sp, #40]	@ 0x28
 800b02a:	465f      	mov	r7, fp
 800b02c:	46a3      	mov	fp, r4
 800b02e:	e660      	b.n	800acf2 <handle_message_memory.constprop.2+0xfe>
 800b030:	a823      	add	r0, sp, #140	@ 0x8c
 800b032:	f001 fe97 	bl	800cd64 <rcutils_get_default_allocator>
 800b036:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b038:	9e27      	ldr	r6, [sp, #156]	@ 0x9c
 800b03a:	930e      	str	r3, [sp, #56]	@ 0x38
 800b03c:	e6b5      	b.n	800adaa <handle_message_memory.constprop.2+0x1b6>
 800b03e:	686d      	ldr	r5, [r5, #4]
 800b040:	e6d7      	b.n	800adf2 <handle_message_memory.constprop.2+0x1fe>
 800b042:	a81e      	add	r0, sp, #120	@ 0x78
 800b044:	f001 fe8e 	bl	800cd64 <rcutils_get_default_allocator>
 800b048:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800b04a:	9315      	str	r3, [sp, #84]	@ 0x54
 800b04c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800b04e:	ee08 3a10 	vmov	s16, r3
 800b052:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b054:	e5eb      	b.n	800ac2e <handle_message_memory.constprop.2+0x3a>
 800b056:	bf00      	nop
 800b058:	0801c668 	.word	0x0801c668
 800b05c:	2000038c 	.word	0x2000038c
 800b060:	0801c664 	.word	0x0801c664
 800b064:	0801d64c 	.word	0x0801d64c

0800b068 <get_longest_member_name>:
 800b068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b06c:	ed2d 8b06 	vpush	{d8-d10}
 800b070:	6885      	ldr	r5, [r0, #8]
 800b072:	b099      	sub	sp, #100	@ 0x64
 800b074:	2d00      	cmp	r5, #0
 800b076:	f000 810f 	beq.w	800b298 <get_longest_member_name+0x230>
 800b07a:	f04f 0a00 	mov.w	sl, #0
 800b07e:	46d3      	mov	fp, sl
 800b080:	f8cd a004 	str.w	sl, [sp, #4]
 800b084:	9003      	str	r0, [sp, #12]
 800b086:	9b03      	ldr	r3, [sp, #12]
 800b088:	691b      	ldr	r3, [r3, #16]
 800b08a:	eb03 020a 	add.w	r2, r3, sl
 800b08e:	f853 700a 	ldr.w	r7, [r3, sl]
 800b092:	7913      	ldrb	r3, [r2, #4]
 800b094:	2b12      	cmp	r3, #18
 800b096:	d018      	beq.n	800b0ca <get_longest_member_name+0x62>
 800b098:	f04f 0900 	mov.w	r9, #0
 800b09c:	4638      	mov	r0, r7
 800b09e:	f7f5 f8b9 	bl	8000214 <strlen>
 800b0a2:	9b01      	ldr	r3, [sp, #4]
 800b0a4:	4448      	add	r0, r9
 800b0a6:	3001      	adds	r0, #1
 800b0a8:	4283      	cmp	r3, r0
 800b0aa:	f10b 0b01 	add.w	fp, fp, #1
 800b0ae:	bf38      	it	cc
 800b0b0:	4603      	movcc	r3, r0
 800b0b2:	455d      	cmp	r5, fp
 800b0b4:	9301      	str	r3, [sp, #4]
 800b0b6:	f10a 0a3c 	add.w	sl, sl, #60	@ 0x3c
 800b0ba:	d8e4      	bhi.n	800b086 <get_longest_member_name+0x1e>
 800b0bc:	469b      	mov	fp, r3
 800b0be:	4658      	mov	r0, fp
 800b0c0:	b019      	add	sp, #100	@ 0x64
 800b0c2:	ecbd 8b06 	vpop	{d8-d10}
 800b0c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0ca:	4bbc      	ldr	r3, [pc, #752]	@ (800b3bc <get_longest_member_name+0x354>)
 800b0cc:	68d0      	ldr	r0, [r2, #12]
 800b0ce:	6819      	ldr	r1, [r3, #0]
 800b0d0:	f002 fca4 	bl	800da1c <get_message_typesupport_handle>
 800b0d4:	6843      	ldr	r3, [r0, #4]
 800b0d6:	9305      	str	r3, [sp, #20]
 800b0d8:	689d      	ldr	r5, [r3, #8]
 800b0da:	2d00      	cmp	r5, #0
 800b0dc:	f000 811a 	beq.w	800b314 <get_longest_member_name+0x2ac>
 800b0e0:	f04f 0800 	mov.w	r8, #0
 800b0e4:	ee08 7a10 	vmov	s16, r7
 800b0e8:	f8cd a02c 	str.w	sl, [sp, #44]	@ 0x2c
 800b0ec:	46c1      	mov	r9, r8
 800b0ee:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800b0f2:	f8cd 8008 	str.w	r8, [sp, #8]
 800b0f6:	46c2      	mov	sl, r8
 800b0f8:	9b05      	ldr	r3, [sp, #20]
 800b0fa:	691b      	ldr	r3, [r3, #16]
 800b0fc:	eb03 020a 	add.w	r2, r3, sl
 800b100:	f853 300a 	ldr.w	r3, [r3, sl]
 800b104:	ee0a 3a10 	vmov	s20, r3
 800b108:	7913      	ldrb	r3, [r2, #4]
 800b10a:	2b12      	cmp	r3, #18
 800b10c:	d01b      	beq.n	800b146 <get_longest_member_name+0xde>
 800b10e:	2700      	movs	r7, #0
 800b110:	ee1a 0a10 	vmov	r0, s20
 800b114:	f7f5 f87e 	bl	8000214 <strlen>
 800b118:	9b02      	ldr	r3, [sp, #8]
 800b11a:	4438      	add	r0, r7
 800b11c:	3001      	adds	r0, #1
 800b11e:	4283      	cmp	r3, r0
 800b120:	f109 0901 	add.w	r9, r9, #1
 800b124:	bf38      	it	cc
 800b126:	4603      	movcc	r3, r0
 800b128:	45a9      	cmp	r9, r5
 800b12a:	9302      	str	r3, [sp, #8]
 800b12c:	f10a 0a3c 	add.w	sl, sl, #60	@ 0x3c
 800b130:	d3e2      	bcc.n	800b0f8 <get_longest_member_name+0x90>
 800b132:	4699      	mov	r9, r3
 800b134:	9b03      	ldr	r3, [sp, #12]
 800b136:	f8dd b028 	ldr.w	fp, [sp, #40]	@ 0x28
 800b13a:	f8dd a02c 	ldr.w	sl, [sp, #44]	@ 0x2c
 800b13e:	689d      	ldr	r5, [r3, #8]
 800b140:	ee18 7a10 	vmov	r7, s16
 800b144:	e7aa      	b.n	800b09c <get_longest_member_name+0x34>
 800b146:	4b9d      	ldr	r3, [pc, #628]	@ (800b3bc <get_longest_member_name+0x354>)
 800b148:	68d0      	ldr	r0, [r2, #12]
 800b14a:	6819      	ldr	r1, [r3, #0]
 800b14c:	f002 fc66 	bl	800da1c <get_message_typesupport_handle>
 800b150:	6843      	ldr	r3, [r0, #4]
 800b152:	9307      	str	r3, [sp, #28]
 800b154:	689d      	ldr	r5, [r3, #8]
 800b156:	2d00      	cmp	r5, #0
 800b158:	f000 80a5 	beq.w	800b2a6 <get_longest_member_name+0x23e>
 800b15c:	f04f 0b00 	mov.w	fp, #0
 800b160:	f8cd 9030 	str.w	r9, [sp, #48]	@ 0x30
 800b164:	46d8      	mov	r8, fp
 800b166:	f8cd b010 	str.w	fp, [sp, #16]
 800b16a:	f8cd a034 	str.w	sl, [sp, #52]	@ 0x34
 800b16e:	46d9      	mov	r9, fp
 800b170:	9b07      	ldr	r3, [sp, #28]
 800b172:	691b      	ldr	r3, [r3, #16]
 800b174:	eb03 0209 	add.w	r2, r3, r9
 800b178:	f853 7009 	ldr.w	r7, [r3, r9]
 800b17c:	7913      	ldrb	r3, [r2, #4]
 800b17e:	2b12      	cmp	r3, #18
 800b180:	d019      	beq.n	800b1b6 <get_longest_member_name+0x14e>
 800b182:	f04f 0a00 	mov.w	sl, #0
 800b186:	4638      	mov	r0, r7
 800b188:	f7f5 f844 	bl	8000214 <strlen>
 800b18c:	9b04      	ldr	r3, [sp, #16]
 800b18e:	4450      	add	r0, sl
 800b190:	3001      	adds	r0, #1
 800b192:	4283      	cmp	r3, r0
 800b194:	f108 0801 	add.w	r8, r8, #1
 800b198:	bf38      	it	cc
 800b19a:	4603      	movcc	r3, r0
 800b19c:	45a8      	cmp	r8, r5
 800b19e:	9304      	str	r3, [sp, #16]
 800b1a0:	f109 093c 	add.w	r9, r9, #60	@ 0x3c
 800b1a4:	d3e4      	bcc.n	800b170 <get_longest_member_name+0x108>
 800b1a6:	461f      	mov	r7, r3
 800b1a8:	9b05      	ldr	r3, [sp, #20]
 800b1aa:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
 800b1ae:	f8dd a034 	ldr.w	sl, [sp, #52]	@ 0x34
 800b1b2:	689d      	ldr	r5, [r3, #8]
 800b1b4:	e7ac      	b.n	800b110 <get_longest_member_name+0xa8>
 800b1b6:	4b81      	ldr	r3, [pc, #516]	@ (800b3bc <get_longest_member_name+0x354>)
 800b1b8:	68d0      	ldr	r0, [r2, #12]
 800b1ba:	6819      	ldr	r1, [r3, #0]
 800b1bc:	f002 fc2e 	bl	800da1c <get_message_typesupport_handle>
 800b1c0:	6843      	ldr	r3, [r0, #4]
 800b1c2:	9308      	str	r3, [sp, #32]
 800b1c4:	689d      	ldr	r5, [r3, #8]
 800b1c6:	2d00      	cmp	r5, #0
 800b1c8:	f000 80f2 	beq.w	800b3b0 <get_longest_member_name+0x348>
 800b1cc:	f04f 0b00 	mov.w	fp, #0
 800b1d0:	ee08 7a90 	vmov	s17, r7
 800b1d4:	f8cd 903c 	str.w	r9, [sp, #60]	@ 0x3c
 800b1d8:	46da      	mov	sl, fp
 800b1da:	f8cd 8038 	str.w	r8, [sp, #56]	@ 0x38
 800b1de:	f8cd b018 	str.w	fp, [sp, #24]
 800b1e2:	46d9      	mov	r9, fp
 800b1e4:	9b08      	ldr	r3, [sp, #32]
 800b1e6:	691b      	ldr	r3, [r3, #16]
 800b1e8:	eb03 020a 	add.w	r2, r3, sl
 800b1ec:	f853 700a 	ldr.w	r7, [r3, sl]
 800b1f0:	7913      	ldrb	r3, [r2, #4]
 800b1f2:	2b12      	cmp	r3, #18
 800b1f4:	d01b      	beq.n	800b22e <get_longest_member_name+0x1c6>
 800b1f6:	f04f 0b00 	mov.w	fp, #0
 800b1fa:	4638      	mov	r0, r7
 800b1fc:	f7f5 f80a 	bl	8000214 <strlen>
 800b200:	9b06      	ldr	r3, [sp, #24]
 800b202:	4458      	add	r0, fp
 800b204:	3001      	adds	r0, #1
 800b206:	4283      	cmp	r3, r0
 800b208:	f109 0901 	add.w	r9, r9, #1
 800b20c:	bf38      	it	cc
 800b20e:	4603      	movcc	r3, r0
 800b210:	45a9      	cmp	r9, r5
 800b212:	9306      	str	r3, [sp, #24]
 800b214:	f10a 0a3c 	add.w	sl, sl, #60	@ 0x3c
 800b218:	d3e4      	bcc.n	800b1e4 <get_longest_member_name+0x17c>
 800b21a:	469a      	mov	sl, r3
 800b21c:	9b07      	ldr	r3, [sp, #28]
 800b21e:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
 800b222:	f8dd 903c 	ldr.w	r9, [sp, #60]	@ 0x3c
 800b226:	689d      	ldr	r5, [r3, #8]
 800b228:	ee18 7a90 	vmov	r7, s17
 800b22c:	e7ab      	b.n	800b186 <get_longest_member_name+0x11e>
 800b22e:	4b63      	ldr	r3, [pc, #396]	@ (800b3bc <get_longest_member_name+0x354>)
 800b230:	68d0      	ldr	r0, [r2, #12]
 800b232:	6819      	ldr	r1, [r3, #0]
 800b234:	f002 fbf2 	bl	800da1c <get_message_typesupport_handle>
 800b238:	6843      	ldr	r3, [r0, #4]
 800b23a:	9309      	str	r3, [sp, #36]	@ 0x24
 800b23c:	689d      	ldr	r5, [r3, #8]
 800b23e:	2d00      	cmp	r5, #0
 800b240:	f000 80b9 	beq.w	800b3b6 <get_longest_member_name+0x34e>
 800b244:	f04f 0800 	mov.w	r8, #0
 800b248:	ee09 7a10 	vmov	s18, r7
 800b24c:	e9cd 9a11 	strd	r9, sl, [sp, #68]	@ 0x44
 800b250:	46c3      	mov	fp, r8
 800b252:	46c2      	mov	sl, r8
 800b254:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b256:	691b      	ldr	r3, [r3, #16]
 800b258:	eb03 0208 	add.w	r2, r3, r8
 800b25c:	f853 9008 	ldr.w	r9, [r3, r8]
 800b260:	7913      	ldrb	r3, [r2, #4]
 800b262:	2b12      	cmp	r3, #18
 800b264:	d022      	beq.n	800b2ac <get_longest_member_name+0x244>
 800b266:	2700      	movs	r7, #0
 800b268:	4648      	mov	r0, r9
 800b26a:	f7f4 ffd3 	bl	8000214 <strlen>
 800b26e:	4438      	add	r0, r7
 800b270:	3001      	adds	r0, #1
 800b272:	4582      	cmp	sl, r0
 800b274:	f10b 0b01 	add.w	fp, fp, #1
 800b278:	bf38      	it	cc
 800b27a:	4682      	movcc	sl, r0
 800b27c:	45ab      	cmp	fp, r5
 800b27e:	f108 083c 	add.w	r8, r8, #60	@ 0x3c
 800b282:	d3e7      	bcc.n	800b254 <get_longest_member_name+0x1ec>
 800b284:	9b08      	ldr	r3, [sp, #32]
 800b286:	f8dd 9044 	ldr.w	r9, [sp, #68]	@ 0x44
 800b28a:	689d      	ldr	r5, [r3, #8]
 800b28c:	46d3      	mov	fp, sl
 800b28e:	ee19 7a10 	vmov	r7, s18
 800b292:	f8dd a048 	ldr.w	sl, [sp, #72]	@ 0x48
 800b296:	e7b0      	b.n	800b1fa <get_longest_member_name+0x192>
 800b298:	46ab      	mov	fp, r5
 800b29a:	4658      	mov	r0, fp
 800b29c:	b019      	add	sp, #100	@ 0x64
 800b29e:	ecbd 8b06 	vpop	{d8-d10}
 800b2a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2a6:	9b05      	ldr	r3, [sp, #20]
 800b2a8:	689d      	ldr	r5, [r3, #8]
 800b2aa:	e730      	b.n	800b10e <get_longest_member_name+0xa6>
 800b2ac:	4b43      	ldr	r3, [pc, #268]	@ (800b3bc <get_longest_member_name+0x354>)
 800b2ae:	68d0      	ldr	r0, [r2, #12]
 800b2b0:	6819      	ldr	r1, [r3, #0]
 800b2b2:	f002 fbb3 	bl	800da1c <get_message_typesupport_handle>
 800b2b6:	6843      	ldr	r3, [r0, #4]
 800b2b8:	689e      	ldr	r6, [r3, #8]
 800b2ba:	461a      	mov	r2, r3
 800b2bc:	2e00      	cmp	r6, #0
 800b2be:	d07f      	beq.n	800b3c0 <get_longest_member_name+0x358>
 800b2c0:	e9cd ab13 	strd	sl, fp, [sp, #76]	@ 0x4c
 800b2c4:	2400      	movs	r4, #0
 800b2c6:	ee09 9a90 	vmov	s19, r9
 800b2ca:	f8cd 8054 	str.w	r8, [sp, #84]	@ 0x54
 800b2ce:	4627      	mov	r7, r4
 800b2d0:	4691      	mov	r9, r2
 800b2d2:	46a0      	mov	r8, r4
 800b2d4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b2d8:	191a      	adds	r2, r3, r4
 800b2da:	f853 b004 	ldr.w	fp, [r3, r4]
 800b2de:	7913      	ldrb	r3, [r2, #4]
 800b2e0:	2b12      	cmp	r3, #18
 800b2e2:	d01a      	beq.n	800b31a <get_longest_member_name+0x2b2>
 800b2e4:	2500      	movs	r5, #0
 800b2e6:	4658      	mov	r0, fp
 800b2e8:	f7f4 ff94 	bl	8000214 <strlen>
 800b2ec:	4405      	add	r5, r0
 800b2ee:	3501      	adds	r5, #1
 800b2f0:	42af      	cmp	r7, r5
 800b2f2:	f108 0801 	add.w	r8, r8, #1
 800b2f6:	bf38      	it	cc
 800b2f8:	462f      	movcc	r7, r5
 800b2fa:	45b0      	cmp	r8, r6
 800b2fc:	f104 043c 	add.w	r4, r4, #60	@ 0x3c
 800b300:	d3e8      	bcc.n	800b2d4 <get_longest_member_name+0x26c>
 800b302:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b304:	f8dd 8054 	ldr.w	r8, [sp, #84]	@ 0x54
 800b308:	689d      	ldr	r5, [r3, #8]
 800b30a:	e9dd ab13 	ldrd	sl, fp, [sp, #76]	@ 0x4c
 800b30e:	ee19 9a90 	vmov	r9, s19
 800b312:	e7a9      	b.n	800b268 <get_longest_member_name+0x200>
 800b314:	9b03      	ldr	r3, [sp, #12]
 800b316:	689d      	ldr	r5, [r3, #8]
 800b318:	e6be      	b.n	800b098 <get_longest_member_name+0x30>
 800b31a:	4b28      	ldr	r3, [pc, #160]	@ (800b3bc <get_longest_member_name+0x354>)
 800b31c:	68d0      	ldr	r0, [r2, #12]
 800b31e:	6819      	ldr	r1, [r3, #0]
 800b320:	f002 fb7c 	bl	800da1c <get_message_typesupport_handle>
 800b324:	6843      	ldr	r3, [r0, #4]
 800b326:	9310      	str	r3, [sp, #64]	@ 0x40
 800b328:	6899      	ldr	r1, [r3, #8]
 800b32a:	2900      	cmp	r1, #0
 800b32c:	d04b      	beq.n	800b3c6 <get_longest_member_name+0x35e>
 800b32e:	691b      	ldr	r3, [r3, #16]
 800b330:	9416      	str	r4, [sp, #88]	@ 0x58
 800b332:	2600      	movs	r6, #0
 800b334:	ee0a ba90 	vmov	s21, fp
 800b338:	46b2      	mov	sl, r6
 800b33a:	46b3      	mov	fp, r6
 800b33c:	460c      	mov	r4, r1
 800b33e:	461d      	mov	r5, r3
 800b340:	19aa      	adds	r2, r5, r6
 800b342:	59ab      	ldr	r3, [r5, r6]
 800b344:	f892 c004 	ldrb.w	ip, [r2, #4]
 800b348:	f1bc 0f12 	cmp.w	ip, #18
 800b34c:	4618      	mov	r0, r3
 800b34e:	d012      	beq.n	800b376 <get_longest_member_name+0x30e>
 800b350:	f7f4 ff60 	bl	8000214 <strlen>
 800b354:	3001      	adds	r0, #1
 800b356:	4583      	cmp	fp, r0
 800b358:	f10a 0a01 	add.w	sl, sl, #1
 800b35c:	bf38      	it	cc
 800b35e:	4683      	movcc	fp, r0
 800b360:	45a2      	cmp	sl, r4
 800b362:	f106 063c 	add.w	r6, r6, #60	@ 0x3c
 800b366:	d3eb      	bcc.n	800b340 <get_longest_member_name+0x2d8>
 800b368:	465d      	mov	r5, fp
 800b36a:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 800b36c:	f8d9 6008 	ldr.w	r6, [r9, #8]
 800b370:	ee1a ba90 	vmov	fp, s21
 800b374:	e7b7      	b.n	800b2e6 <get_longest_member_name+0x27e>
 800b376:	9317      	str	r3, [sp, #92]	@ 0x5c
 800b378:	4b10      	ldr	r3, [pc, #64]	@ (800b3bc <get_longest_member_name+0x354>)
 800b37a:	68d0      	ldr	r0, [r2, #12]
 800b37c:	6819      	ldr	r1, [r3, #0]
 800b37e:	f002 fb4d 	bl	800da1c <get_message_typesupport_handle>
 800b382:	6840      	ldr	r0, [r0, #4]
 800b384:	f7ff fe70 	bl	800b068 <get_longest_member_name>
 800b388:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b38a:	4605      	mov	r5, r0
 800b38c:	4618      	mov	r0, r3
 800b38e:	f7f4 ff41 	bl	8000214 <strlen>
 800b392:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b394:	4405      	add	r5, r0
 800b396:	3501      	adds	r5, #1
 800b398:	689c      	ldr	r4, [r3, #8]
 800b39a:	45ab      	cmp	fp, r5
 800b39c:	f10a 0a01 	add.w	sl, sl, #1
 800b3a0:	bf38      	it	cc
 800b3a2:	46ab      	movcc	fp, r5
 800b3a4:	4554      	cmp	r4, sl
 800b3a6:	f106 063c 	add.w	r6, r6, #60	@ 0x3c
 800b3aa:	d9dd      	bls.n	800b368 <get_longest_member_name+0x300>
 800b3ac:	691d      	ldr	r5, [r3, #16]
 800b3ae:	e7c7      	b.n	800b340 <get_longest_member_name+0x2d8>
 800b3b0:	9b07      	ldr	r3, [sp, #28]
 800b3b2:	689d      	ldr	r5, [r3, #8]
 800b3b4:	e6e5      	b.n	800b182 <get_longest_member_name+0x11a>
 800b3b6:	9b08      	ldr	r3, [sp, #32]
 800b3b8:	689d      	ldr	r5, [r3, #8]
 800b3ba:	e71c      	b.n	800b1f6 <get_longest_member_name+0x18e>
 800b3bc:	2000038c 	.word	0x2000038c
 800b3c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b3c2:	689d      	ldr	r5, [r3, #8]
 800b3c4:	e74f      	b.n	800b266 <get_longest_member_name+0x1fe>
 800b3c6:	f8d9 6008 	ldr.w	r6, [r9, #8]
 800b3ca:	e78b      	b.n	800b2e4 <get_longest_member_name+0x27c>

0800b3cc <micro_ros_utilities_get_dynamic_size>:
 800b3cc:	b084      	sub	sp, #16
 800b3ce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3d2:	ed2d 8b02 	vpush	{d8}
 800b3d6:	b09f      	sub	sp, #124	@ 0x7c
 800b3d8:	ac2b      	add	r4, sp, #172	@ 0xac
 800b3da:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 800b3de:	4619      	mov	r1, r3
 800b3e0:	2900      	cmp	r1, #0
 800b3e2:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 800b3e4:	9c2f      	ldr	r4, [sp, #188]	@ 0xbc
 800b3e6:	941c      	str	r4, [sp, #112]	@ 0x70
 800b3e8:	bf08      	it	eq
 800b3ea:	2105      	moveq	r1, #5
 800b3ec:	2a00      	cmp	r2, #0
 800b3ee:	bf08      	it	eq
 800b3f0:	2205      	moveq	r2, #5
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	bf08      	it	eq
 800b3f6:	2314      	moveq	r3, #20
 800b3f8:	9318      	str	r3, [sp, #96]	@ 0x60
 800b3fa:	4b78      	ldr	r3, [pc, #480]	@ (800b5dc <micro_ros_utilities_get_dynamic_size+0x210>)
 800b3fc:	911a      	str	r1, [sp, #104]	@ 0x68
 800b3fe:	6819      	ldr	r1, [r3, #0]
 800b400:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 800b402:	931b      	str	r3, [sp, #108]	@ 0x6c
 800b404:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 800b406:	931d      	str	r3, [sp, #116]	@ 0x74
 800b408:	9219      	str	r2, [sp, #100]	@ 0x64
 800b40a:	f002 fb07 	bl	800da1c <get_message_typesupport_handle>
 800b40e:	f10d 0b54 	add.w	fp, sp, #84	@ 0x54
 800b412:	2300      	movs	r3, #0
 800b414:	f8d0 a004 	ldr.w	sl, [r0, #4]
 800b418:	9315      	str	r3, [sp, #84]	@ 0x54
 800b41a:	e9cb 3301 	strd	r3, r3, [fp, #4]
 800b41e:	b9c4      	cbnz	r4, 800b452 <micro_ros_utilities_get_dynamic_size+0x86>
 800b420:	e89b 0007 	ldmia.w	fp, {r0, r1, r2}
 800b424:	ab04      	add	r3, sp, #16
 800b426:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800b42a:	ab1e      	add	r3, sp, #120	@ 0x78
 800b42c:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 800b430:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800b434:	ab18      	add	r3, sp, #96	@ 0x60
 800b436:	4621      	mov	r1, r4
 800b438:	cb0c      	ldmia	r3, {r2, r3}
 800b43a:	4650      	mov	r0, sl
 800b43c:	f7ff fa10 	bl	800a860 <handle_message_memory.constprop.4>
 800b440:	4604      	mov	r4, r0
 800b442:	4620      	mov	r0, r4
 800b444:	b01f      	add	sp, #124	@ 0x7c
 800b446:	ecbd 8b02 	vpop	{d8}
 800b44a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b44e:	b004      	add	sp, #16
 800b450:	4770      	bx	lr
 800b452:	f8da 5008 	ldr.w	r5, [sl, #8]
 800b456:	9508      	str	r5, [sp, #32]
 800b458:	b30d      	cbz	r5, 800b49e <micro_ros_utilities_get_dynamic_size+0xd2>
 800b45a:	4698      	mov	r8, r3
 800b45c:	9308      	str	r3, [sp, #32]
 800b45e:	f8cd a024 	str.w	sl, [sp, #36]	@ 0x24
 800b462:	461f      	mov	r7, r3
 800b464:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b466:	691b      	ldr	r3, [r3, #16]
 800b468:	eb03 0208 	add.w	r2, r3, r8
 800b46c:	f853 6008 	ldr.w	r6, [r3, r8]
 800b470:	7913      	ldrb	r3, [r2, #4]
 800b472:	2b12      	cmp	r3, #18
 800b474:	d030      	beq.n	800b4d8 <micro_ros_utilities_get_dynamic_size+0x10c>
 800b476:	f04f 0900 	mov.w	r9, #0
 800b47a:	4630      	mov	r0, r6
 800b47c:	f7f4 feca 	bl	8000214 <strlen>
 800b480:	9b08      	ldr	r3, [sp, #32]
 800b482:	4448      	add	r0, r9
 800b484:	3001      	adds	r0, #1
 800b486:	4283      	cmp	r3, r0
 800b488:	f107 0701 	add.w	r7, r7, #1
 800b48c:	bf38      	it	cc
 800b48e:	4603      	movcc	r3, r0
 800b490:	42af      	cmp	r7, r5
 800b492:	9308      	str	r3, [sp, #32]
 800b494:	f108 083c 	add.w	r8, r8, #60	@ 0x3c
 800b498:	d3e4      	bcc.n	800b464 <micro_ros_utilities_get_dynamic_size+0x98>
 800b49a:	f8dd a024 	ldr.w	sl, [sp, #36]	@ 0x24
 800b49e:	9908      	ldr	r1, [sp, #32]
 800b4a0:	ac10      	add	r4, sp, #64	@ 0x40
 800b4a2:	4620      	mov	r0, r4
 800b4a4:	f003 f862 	bl	800e56c <micro_ros_string_utilities_init_with_size>
 800b4a8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800b4ac:	ab04      	add	r3, sp, #16
 800b4ae:	e88b 0007 	stmia.w	fp, {r0, r1, r2}
 800b4b2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800b4b6:	ab1e      	add	r3, sp, #120	@ 0x78
 800b4b8:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 800b4bc:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800b4c0:	ac18      	add	r4, sp, #96	@ 0x60
 800b4c2:	e894 000c 	ldmia.w	r4, {r2, r3}
 800b4c6:	2100      	movs	r1, #0
 800b4c8:	4650      	mov	r0, sl
 800b4ca:	f7ff f9c9 	bl	800a860 <handle_message_memory.constprop.4>
 800b4ce:	4604      	mov	r4, r0
 800b4d0:	4658      	mov	r0, fp
 800b4d2:	f003 f8a9 	bl	800e628 <micro_ros_string_utilities_destroy>
 800b4d6:	e7b4      	b.n	800b442 <micro_ros_utilities_get_dynamic_size+0x76>
 800b4d8:	4b40      	ldr	r3, [pc, #256]	@ (800b5dc <micro_ros_utilities_get_dynamic_size+0x210>)
 800b4da:	68d0      	ldr	r0, [r2, #12]
 800b4dc:	6819      	ldr	r1, [r3, #0]
 800b4de:	f002 fa9d 	bl	800da1c <get_message_typesupport_handle>
 800b4e2:	6843      	ldr	r3, [r0, #4]
 800b4e4:	930a      	str	r3, [sp, #40]	@ 0x28
 800b4e6:	689d      	ldr	r5, [r3, #8]
 800b4e8:	b33d      	cbz	r5, 800b53a <micro_ros_utilities_get_dynamic_size+0x16e>
 800b4ea:	f04f 0a00 	mov.w	sl, #0
 800b4ee:	ee08 6a10 	vmov	s16, r6
 800b4f2:	970c      	str	r7, [sp, #48]	@ 0x30
 800b4f4:	46d1      	mov	r9, sl
 800b4f6:	4657      	mov	r7, sl
 800b4f8:	f8cd 8034 	str.w	r8, [sp, #52]	@ 0x34
 800b4fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b4fe:	691b      	ldr	r3, [r3, #16]
 800b500:	eb03 020a 	add.w	r2, r3, sl
 800b504:	f853 800a 	ldr.w	r8, [r3, sl]
 800b508:	7913      	ldrb	r3, [r2, #4]
 800b50a:	2b12      	cmp	r3, #18
 800b50c:	d018      	beq.n	800b540 <micro_ros_utilities_get_dynamic_size+0x174>
 800b50e:	2400      	movs	r4, #0
 800b510:	4640      	mov	r0, r8
 800b512:	f7f4 fe7f 	bl	8000214 <strlen>
 800b516:	4404      	add	r4, r0
 800b518:	3401      	adds	r4, #1
 800b51a:	45a1      	cmp	r9, r4
 800b51c:	f107 0701 	add.w	r7, r7, #1
 800b520:	bf38      	it	cc
 800b522:	46a1      	movcc	r9, r4
 800b524:	42af      	cmp	r7, r5
 800b526:	f10a 0a3c 	add.w	sl, sl, #60	@ 0x3c
 800b52a:	d3e7      	bcc.n	800b4fc <micro_ros_utilities_get_dynamic_size+0x130>
 800b52c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b52e:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	@ 0x30
 800b532:	ee18 6a10 	vmov	r6, s16
 800b536:	689d      	ldr	r5, [r3, #8]
 800b538:	e79f      	b.n	800b47a <micro_ros_utilities_get_dynamic_size+0xae>
 800b53a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b53c:	689d      	ldr	r5, [r3, #8]
 800b53e:	e79a      	b.n	800b476 <micro_ros_utilities_get_dynamic_size+0xaa>
 800b540:	4b26      	ldr	r3, [pc, #152]	@ (800b5dc <micro_ros_utilities_get_dynamic_size+0x210>)
 800b542:	68d0      	ldr	r0, [r2, #12]
 800b544:	6819      	ldr	r1, [r3, #0]
 800b546:	f002 fa69 	bl	800da1c <get_message_typesupport_handle>
 800b54a:	6843      	ldr	r3, [r0, #4]
 800b54c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b54e:	6899      	ldr	r1, [r3, #8]
 800b550:	2900      	cmp	r1, #0
 800b552:	d040      	beq.n	800b5d6 <micro_ros_utilities_get_dynamic_size+0x20a>
 800b554:	691b      	ldr	r3, [r3, #16]
 800b556:	970e      	str	r7, [sp, #56]	@ 0x38
 800b558:	2500      	movs	r5, #0
 800b55a:	ee08 8a90 	vmov	s17, r8
 800b55e:	462e      	mov	r6, r5
 800b560:	46a8      	mov	r8, r5
 800b562:	460f      	mov	r7, r1
 800b564:	461c      	mov	r4, r3
 800b566:	1962      	adds	r2, r4, r5
 800b568:	5963      	ldr	r3, [r4, r5]
 800b56a:	f892 c004 	ldrb.w	ip, [r2, #4]
 800b56e:	f1bc 0f12 	cmp.w	ip, #18
 800b572:	4618      	mov	r0, r3
 800b574:	d012      	beq.n	800b59c <micro_ros_utilities_get_dynamic_size+0x1d0>
 800b576:	f7f4 fe4d 	bl	8000214 <strlen>
 800b57a:	3001      	adds	r0, #1
 800b57c:	4580      	cmp	r8, r0
 800b57e:	f106 0601 	add.w	r6, r6, #1
 800b582:	bf38      	it	cc
 800b584:	4680      	movcc	r8, r0
 800b586:	42be      	cmp	r6, r7
 800b588:	f105 053c 	add.w	r5, r5, #60	@ 0x3c
 800b58c:	d3eb      	bcc.n	800b566 <micro_ros_utilities_get_dynamic_size+0x19a>
 800b58e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b590:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 800b592:	689d      	ldr	r5, [r3, #8]
 800b594:	4644      	mov	r4, r8
 800b596:	ee18 8a90 	vmov	r8, s17
 800b59a:	e7b9      	b.n	800b510 <micro_ros_utilities_get_dynamic_size+0x144>
 800b59c:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b59e:	4b0f      	ldr	r3, [pc, #60]	@ (800b5dc <micro_ros_utilities_get_dynamic_size+0x210>)
 800b5a0:	68d0      	ldr	r0, [r2, #12]
 800b5a2:	6819      	ldr	r1, [r3, #0]
 800b5a4:	f002 fa3a 	bl	800da1c <get_message_typesupport_handle>
 800b5a8:	6840      	ldr	r0, [r0, #4]
 800b5aa:	f7ff fd5d 	bl	800b068 <get_longest_member_name>
 800b5ae:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b5b0:	4604      	mov	r4, r0
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	f7f4 fe2e 	bl	8000214 <strlen>
 800b5b8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b5ba:	4404      	add	r4, r0
 800b5bc:	3401      	adds	r4, #1
 800b5be:	689f      	ldr	r7, [r3, #8]
 800b5c0:	45a0      	cmp	r8, r4
 800b5c2:	f106 0601 	add.w	r6, r6, #1
 800b5c6:	bf38      	it	cc
 800b5c8:	46a0      	movcc	r8, r4
 800b5ca:	42b7      	cmp	r7, r6
 800b5cc:	f105 053c 	add.w	r5, r5, #60	@ 0x3c
 800b5d0:	d9dd      	bls.n	800b58e <micro_ros_utilities_get_dynamic_size+0x1c2>
 800b5d2:	691c      	ldr	r4, [r3, #16]
 800b5d4:	e7c7      	b.n	800b566 <micro_ros_utilities_get_dynamic_size+0x19a>
 800b5d6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b5d8:	689d      	ldr	r5, [r3, #8]
 800b5da:	e798      	b.n	800b50e <micro_ros_utilities_get_dynamic_size+0x142>
 800b5dc:	2000038c 	.word	0x2000038c

0800b5e0 <micro_ros_utilities_create_message_memory>:
 800b5e0:	b082      	sub	sp, #8
 800b5e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5e6:	ed2d 8b04 	vpush	{d8-d9}
 800b5ea:	b0a1      	sub	sp, #132	@ 0x84
 800b5ec:	ac2e      	add	r4, sp, #184	@ 0xb8
 800b5ee:	ae31      	add	r6, sp, #196	@ 0xc4
 800b5f0:	e884 000c 	stmia.w	r4, {r2, r3}
 800b5f4:	4605      	mov	r5, r0
 800b5f6:	468b      	mov	fp, r1
 800b5f8:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800b5fc:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800b600:	ab2e      	add	r3, sp, #184	@ 0xb8
 800b602:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b604:	4628      	mov	r0, r5
 800b606:	9c32      	ldr	r4, [sp, #200]	@ 0xc8
 800b608:	f7ff fee0 	bl	800b3cc <micro_ros_utilities_get_dynamic_size>
 800b60c:	4603      	mov	r3, r0
 800b60e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b610:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 800b612:	941e      	str	r4, [sp, #120]	@ 0x78
 800b614:	2b00      	cmp	r3, #0
 800b616:	bf08      	it	eq
 800b618:	2305      	moveq	r3, #5
 800b61a:	931c      	str	r3, [sp, #112]	@ 0x70
 800b61c:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
 800b61e:	2b00      	cmp	r3, #0
 800b620:	bf08      	it	eq
 800b622:	2305      	moveq	r3, #5
 800b624:	931b      	str	r3, [sp, #108]	@ 0x6c
 800b626:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 800b628:	2b00      	cmp	r3, #0
 800b62a:	bf08      	it	eq
 800b62c:	2314      	moveq	r3, #20
 800b62e:	931a      	str	r3, [sp, #104]	@ 0x68
 800b630:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 800b632:	931d      	str	r3, [sp, #116]	@ 0x74
 800b634:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
 800b636:	931f      	str	r3, [sp, #124]	@ 0x7c
 800b638:	4b81      	ldr	r3, [pc, #516]	@ (800b840 <micro_ros_utilities_create_message_memory+0x260>)
 800b63a:	4628      	mov	r0, r5
 800b63c:	6819      	ldr	r1, [r3, #0]
 800b63e:	f002 f9ed 	bl	800da1c <get_message_typesupport_handle>
 800b642:	f10d 085c 	add.w	r8, sp, #92	@ 0x5c
 800b646:	2300      	movs	r3, #0
 800b648:	f8d0 a004 	ldr.w	sl, [r0, #4]
 800b64c:	9317      	str	r3, [sp, #92]	@ 0x5c
 800b64e:	e9c8 3301 	strd	r3, r3, [r8, #4]
 800b652:	bb1c      	cbnz	r4, 800b69c <micro_ros_utilities_create_message_memory+0xbc>
 800b654:	4621      	mov	r1, r4
 800b656:	f8da 200c 	ldr.w	r2, [sl, #12]
 800b65a:	4658      	mov	r0, fp
 800b65c:	f00f fea0 	bl	801b3a0 <memset>
 800b660:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 800b664:	ab04      	add	r3, sp, #16
 800b666:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800b66a:	ab20      	add	r3, sp, #128	@ 0x80
 800b66c:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 800b670:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800b674:	ac1a      	add	r4, sp, #104	@ 0x68
 800b676:	e894 000c 	ldmia.w	r4, {r2, r3}
 800b67a:	4659      	mov	r1, fp
 800b67c:	4650      	mov	r0, sl
 800b67e:	f7ff fab9 	bl	800abf4 <handle_message_memory.constprop.2>
 800b682:	4604      	mov	r4, r0
 800b684:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b686:	1b18      	subs	r0, r3, r4
 800b688:	fab0 f080 	clz	r0, r0
 800b68c:	0940      	lsrs	r0, r0, #5
 800b68e:	b021      	add	sp, #132	@ 0x84
 800b690:	ecbd 8b04 	vpop	{d8-d9}
 800b694:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b698:	b002      	add	sp, #8
 800b69a:	4770      	bx	lr
 800b69c:	f8da 5008 	ldr.w	r5, [sl, #8]
 800b6a0:	9509      	str	r5, [sp, #36]	@ 0x24
 800b6a2:	b32d      	cbz	r5, 800b6f0 <micro_ros_utilities_create_message_memory+0x110>
 800b6a4:	ee08 ba10 	vmov	s16, fp
 800b6a8:	4699      	mov	r9, r3
 800b6aa:	9309      	str	r3, [sp, #36]	@ 0x24
 800b6ac:	461f      	mov	r7, r3
 800b6ae:	f8cd a02c 	str.w	sl, [sp, #44]	@ 0x2c
 800b6b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b6b4:	691b      	ldr	r3, [r3, #16]
 800b6b6:	eb03 0209 	add.w	r2, r3, r9
 800b6ba:	f853 6009 	ldr.w	r6, [r3, r9]
 800b6be:	7913      	ldrb	r3, [r2, #4]
 800b6c0:	2b12      	cmp	r3, #18
 800b6c2:	d03a      	beq.n	800b73a <micro_ros_utilities_create_message_memory+0x15a>
 800b6c4:	f04f 0a00 	mov.w	sl, #0
 800b6c8:	4630      	mov	r0, r6
 800b6ca:	f7f4 fda3 	bl	8000214 <strlen>
 800b6ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b6d0:	4450      	add	r0, sl
 800b6d2:	3001      	adds	r0, #1
 800b6d4:	4283      	cmp	r3, r0
 800b6d6:	f107 0701 	add.w	r7, r7, #1
 800b6da:	bf38      	it	cc
 800b6dc:	4603      	movcc	r3, r0
 800b6de:	42af      	cmp	r7, r5
 800b6e0:	9309      	str	r3, [sp, #36]	@ 0x24
 800b6e2:	f109 093c 	add.w	r9, r9, #60	@ 0x3c
 800b6e6:	d3e4      	bcc.n	800b6b2 <micro_ros_utilities_create_message_memory+0xd2>
 800b6e8:	f8dd a02c 	ldr.w	sl, [sp, #44]	@ 0x2c
 800b6ec:	ee18 ba10 	vmov	fp, s16
 800b6f0:	ac12      	add	r4, sp, #72	@ 0x48
 800b6f2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b6f4:	4620      	mov	r0, r4
 800b6f6:	f002 ff39 	bl	800e56c <micro_ros_string_utilities_init_with_size>
 800b6fa:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800b6fe:	e888 0007 	stmia.w	r8, {r0, r1, r2}
 800b702:	f8da 200c 	ldr.w	r2, [sl, #12]
 800b706:	2100      	movs	r1, #0
 800b708:	4658      	mov	r0, fp
 800b70a:	f00f fe49 	bl	801b3a0 <memset>
 800b70e:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 800b712:	ab04      	add	r3, sp, #16
 800b714:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800b718:	ab20      	add	r3, sp, #128	@ 0x80
 800b71a:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 800b71e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800b722:	ac1a      	add	r4, sp, #104	@ 0x68
 800b724:	e894 000c 	ldmia.w	r4, {r2, r3}
 800b728:	4659      	mov	r1, fp
 800b72a:	4650      	mov	r0, sl
 800b72c:	f7ff fa62 	bl	800abf4 <handle_message_memory.constprop.2>
 800b730:	4604      	mov	r4, r0
 800b732:	4640      	mov	r0, r8
 800b734:	f002 ff78 	bl	800e628 <micro_ros_string_utilities_destroy>
 800b738:	e7a4      	b.n	800b684 <micro_ros_utilities_create_message_memory+0xa4>
 800b73a:	4b41      	ldr	r3, [pc, #260]	@ (800b840 <micro_ros_utilities_create_message_memory+0x260>)
 800b73c:	68d0      	ldr	r0, [r2, #12]
 800b73e:	6819      	ldr	r1, [r3, #0]
 800b740:	f002 f96c 	bl	800da1c <get_message_typesupport_handle>
 800b744:	6843      	ldr	r3, [r0, #4]
 800b746:	930c      	str	r3, [sp, #48]	@ 0x30
 800b748:	689d      	ldr	r5, [r3, #8]
 800b74a:	b33d      	cbz	r5, 800b79c <micro_ros_utilities_create_message_memory+0x1bc>
 800b74c:	f04f 0b00 	mov.w	fp, #0
 800b750:	ee08 6a90 	vmov	s17, r6
 800b754:	970e      	str	r7, [sp, #56]	@ 0x38
 800b756:	46da      	mov	sl, fp
 800b758:	465f      	mov	r7, fp
 800b75a:	f8cd 903c 	str.w	r9, [sp, #60]	@ 0x3c
 800b75e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b760:	691b      	ldr	r3, [r3, #16]
 800b762:	eb03 020b 	add.w	r2, r3, fp
 800b766:	f853 600b 	ldr.w	r6, [r3, fp]
 800b76a:	7913      	ldrb	r3, [r2, #4]
 800b76c:	2b12      	cmp	r3, #18
 800b76e:	d018      	beq.n	800b7a2 <micro_ros_utilities_create_message_memory+0x1c2>
 800b770:	2400      	movs	r4, #0
 800b772:	4630      	mov	r0, r6
 800b774:	f7f4 fd4e 	bl	8000214 <strlen>
 800b778:	4404      	add	r4, r0
 800b77a:	3401      	adds	r4, #1
 800b77c:	45a2      	cmp	sl, r4
 800b77e:	f107 0701 	add.w	r7, r7, #1
 800b782:	bf38      	it	cc
 800b784:	46a2      	movcc	sl, r4
 800b786:	42af      	cmp	r7, r5
 800b788:	f10b 0b3c 	add.w	fp, fp, #60	@ 0x3c
 800b78c:	d3e7      	bcc.n	800b75e <micro_ros_utilities_create_message_memory+0x17e>
 800b78e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b790:	e9dd 790e 	ldrd	r7, r9, [sp, #56]	@ 0x38
 800b794:	ee18 6a90 	vmov	r6, s17
 800b798:	689d      	ldr	r5, [r3, #8]
 800b79a:	e795      	b.n	800b6c8 <micro_ros_utilities_create_message_memory+0xe8>
 800b79c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b79e:	689d      	ldr	r5, [r3, #8]
 800b7a0:	e790      	b.n	800b6c4 <micro_ros_utilities_create_message_memory+0xe4>
 800b7a2:	4b27      	ldr	r3, [pc, #156]	@ (800b840 <micro_ros_utilities_create_message_memory+0x260>)
 800b7a4:	68d0      	ldr	r0, [r2, #12]
 800b7a6:	6819      	ldr	r1, [r3, #0]
 800b7a8:	f002 f938 	bl	800da1c <get_message_typesupport_handle>
 800b7ac:	6843      	ldr	r3, [r0, #4]
 800b7ae:	930d      	str	r3, [sp, #52]	@ 0x34
 800b7b0:	6899      	ldr	r1, [r3, #8]
 800b7b2:	2900      	cmp	r1, #0
 800b7b4:	d040      	beq.n	800b838 <micro_ros_utilities_create_message_memory+0x258>
 800b7b6:	691b      	ldr	r3, [r3, #16]
 800b7b8:	9710      	str	r7, [sp, #64]	@ 0x40
 800b7ba:	2500      	movs	r5, #0
 800b7bc:	ee09 6a10 	vmov	s18, r6
 800b7c0:	46a9      	mov	r9, r5
 800b7c2:	462e      	mov	r6, r5
 800b7c4:	460f      	mov	r7, r1
 800b7c6:	461c      	mov	r4, r3
 800b7c8:	1962      	adds	r2, r4, r5
 800b7ca:	5963      	ldr	r3, [r4, r5]
 800b7cc:	f892 c004 	ldrb.w	ip, [r2, #4]
 800b7d0:	f1bc 0f12 	cmp.w	ip, #18
 800b7d4:	4618      	mov	r0, r3
 800b7d6:	d012      	beq.n	800b7fe <micro_ros_utilities_create_message_memory+0x21e>
 800b7d8:	f7f4 fd1c 	bl	8000214 <strlen>
 800b7dc:	3001      	adds	r0, #1
 800b7de:	4286      	cmp	r6, r0
 800b7e0:	f109 0901 	add.w	r9, r9, #1
 800b7e4:	bf38      	it	cc
 800b7e6:	4606      	movcc	r6, r0
 800b7e8:	45b9      	cmp	r9, r7
 800b7ea:	f105 053c 	add.w	r5, r5, #60	@ 0x3c
 800b7ee:	d3eb      	bcc.n	800b7c8 <micro_ros_utilities_create_message_memory+0x1e8>
 800b7f0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b7f2:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 800b7f4:	689d      	ldr	r5, [r3, #8]
 800b7f6:	4634      	mov	r4, r6
 800b7f8:	ee19 6a10 	vmov	r6, s18
 800b7fc:	e7b9      	b.n	800b772 <micro_ros_utilities_create_message_memory+0x192>
 800b7fe:	9311      	str	r3, [sp, #68]	@ 0x44
 800b800:	4b0f      	ldr	r3, [pc, #60]	@ (800b840 <micro_ros_utilities_create_message_memory+0x260>)
 800b802:	68d0      	ldr	r0, [r2, #12]
 800b804:	6819      	ldr	r1, [r3, #0]
 800b806:	f002 f909 	bl	800da1c <get_message_typesupport_handle>
 800b80a:	6840      	ldr	r0, [r0, #4]
 800b80c:	f7ff fc2c 	bl	800b068 <get_longest_member_name>
 800b810:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b812:	4604      	mov	r4, r0
 800b814:	4618      	mov	r0, r3
 800b816:	f7f4 fcfd 	bl	8000214 <strlen>
 800b81a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b81c:	4404      	add	r4, r0
 800b81e:	3401      	adds	r4, #1
 800b820:	689f      	ldr	r7, [r3, #8]
 800b822:	42a6      	cmp	r6, r4
 800b824:	f109 0901 	add.w	r9, r9, #1
 800b828:	bf38      	it	cc
 800b82a:	4626      	movcc	r6, r4
 800b82c:	454f      	cmp	r7, r9
 800b82e:	f105 053c 	add.w	r5, r5, #60	@ 0x3c
 800b832:	d9dd      	bls.n	800b7f0 <micro_ros_utilities_create_message_memory+0x210>
 800b834:	691c      	ldr	r4, [r3, #16]
 800b836:	e7c7      	b.n	800b7c8 <micro_ros_utilities_create_message_memory+0x1e8>
 800b838:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b83a:	689d      	ldr	r5, [r3, #8]
 800b83c:	e798      	b.n	800b770 <micro_ros_utilities_create_message_memory+0x190>
 800b83e:	bf00      	nop
 800b840:	2000038c 	.word	0x2000038c

0800b844 <rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity>:
 800b844:	4b04      	ldr	r3, [pc, #16]	@ (800b858 <rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity+0x14>)
 800b846:	681a      	ldr	r2, [r3, #0]
 800b848:	b10a      	cbz	r2, 800b84e <rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity+0xa>
 800b84a:	4803      	ldr	r0, [pc, #12]	@ (800b858 <rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity+0x14>)
 800b84c:	4770      	bx	lr
 800b84e:	4a03      	ldr	r2, [pc, #12]	@ (800b85c <rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity+0x18>)
 800b850:	4801      	ldr	r0, [pc, #4]	@ (800b858 <rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity+0x14>)
 800b852:	6812      	ldr	r2, [r2, #0]
 800b854:	601a      	str	r2, [r3, #0]
 800b856:	4770      	bx	lr
 800b858:	200000e4 	.word	0x200000e4
 800b85c:	20000388 	.word	0x20000388

0800b860 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity>:
 800b860:	4a02      	ldr	r2, [pc, #8]	@ (800b86c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity+0xc>)
 800b862:	4b03      	ldr	r3, [pc, #12]	@ (800b870 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity+0x10>)
 800b864:	6812      	ldr	r2, [r2, #0]
 800b866:	601a      	str	r2, [r3, #0]
 800b868:	4770      	bx	lr
 800b86a:	bf00      	nop
 800b86c:	20000388 	.word	0x20000388
 800b870:	200000e4 	.word	0x200000e4

0800b874 <rosidl_typesupport_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode>:
 800b874:	4b04      	ldr	r3, [pc, #16]	@ (800b888 <rosidl_typesupport_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x14>)
 800b876:	681a      	ldr	r2, [r3, #0]
 800b878:	b10a      	cbz	r2, 800b87e <rosidl_typesupport_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0xa>
 800b87a:	4803      	ldr	r0, [pc, #12]	@ (800b888 <rosidl_typesupport_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x14>)
 800b87c:	4770      	bx	lr
 800b87e:	4a03      	ldr	r2, [pc, #12]	@ (800b88c <rosidl_typesupport_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x18>)
 800b880:	4801      	ldr	r0, [pc, #4]	@ (800b888 <rosidl_typesupport_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x14>)
 800b882:	6812      	ldr	r2, [r2, #0]
 800b884:	601a      	str	r2, [r3, #0]
 800b886:	4770      	bx	lr
 800b888:	200000f8 	.word	0x200000f8
 800b88c:	20000388 	.word	0x20000388

0800b890 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Request>:
 800b890:	4b04      	ldr	r3, [pc, #16]	@ (800b8a4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Request+0x14>)
 800b892:	4805      	ldr	r0, [pc, #20]	@ (800b8a8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Request+0x18>)
 800b894:	4905      	ldr	r1, [pc, #20]	@ (800b8ac <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Request+0x1c>)
 800b896:	4a06      	ldr	r2, [pc, #24]	@ (800b8b0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Request+0x20>)
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	6003      	str	r3, [r0, #0]
 800b89c:	600b      	str	r3, [r1, #0]
 800b89e:	6013      	str	r3, [r2, #0]
 800b8a0:	4770      	bx	lr
 800b8a2:	bf00      	nop
 800b8a4:	20000388 	.word	0x20000388
 800b8a8:	20000114 	.word	0x20000114
 800b8ac:	20000120 	.word	0x20000120
 800b8b0:	200000f8 	.word	0x200000f8

0800b8b4 <rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses>:
 800b8b4:	4b04      	ldr	r3, [pc, #16]	@ (800b8c8 <rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses+0x14>)
 800b8b6:	681a      	ldr	r2, [r3, #0]
 800b8b8:	b10a      	cbz	r2, 800b8be <rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses+0xa>
 800b8ba:	4803      	ldr	r0, [pc, #12]	@ (800b8c8 <rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses+0x14>)
 800b8bc:	4770      	bx	lr
 800b8be:	4a03      	ldr	r2, [pc, #12]	@ (800b8cc <rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses+0x18>)
 800b8c0:	4801      	ldr	r0, [pc, #4]	@ (800b8c8 <rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses+0x14>)
 800b8c2:	6812      	ldr	r2, [r2, #0]
 800b8c4:	601a      	str	r2, [r3, #0]
 800b8c6:	4770      	bx	lr
 800b8c8:	20000134 	.word	0x20000134
 800b8cc:	20000388 	.word	0x20000388

0800b8d0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses>:
 800b8d0:	4a02      	ldr	r2, [pc, #8]	@ (800b8dc <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses+0xc>)
 800b8d2:	4b03      	ldr	r3, [pc, #12]	@ (800b8e0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses+0x10>)
 800b8d4:	6812      	ldr	r2, [r2, #0]
 800b8d6:	601a      	str	r2, [r3, #0]
 800b8d8:	4770      	bx	lr
 800b8da:	bf00      	nop
 800b8dc:	20000388 	.word	0x20000388
 800b8e0:	20000134 	.word	0x20000134

0800b8e4 <nereo_interfaces__msg__CommandVelocity__rosidl_typesupport_introspection_c__size_function__CommandVelocity__cmd_vel>:
 800b8e4:	2006      	movs	r0, #6
 800b8e6:	4770      	bx	lr

0800b8e8 <nereo_interfaces__msg__CommandVelocity__rosidl_typesupport_introspection_c__get_const_function__CommandVelocity__cmd_vel>:
 800b8e8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800b8ec:	4770      	bx	lr
 800b8ee:	bf00      	nop

0800b8f0 <nereo_interfaces__msg__CommandVelocity__rosidl_typesupport_introspection_c__fetch_function__CommandVelocity__cmd_vel>:
 800b8f0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b8f4:	680b      	ldr	r3, [r1, #0]
 800b8f6:	6013      	str	r3, [r2, #0]
 800b8f8:	4770      	bx	lr
 800b8fa:	bf00      	nop

0800b8fc <nereo_interfaces__msg__CommandVelocity__rosidl_typesupport_introspection_c__assign_function__CommandVelocity__cmd_vel>:
 800b8fc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b900:	6813      	ldr	r3, [r2, #0]
 800b902:	600b      	str	r3, [r1, #0]
 800b904:	4770      	bx	lr
 800b906:	bf00      	nop

0800b908 <nereo_interfaces__msg__CommandVelocity__rosidl_typesupport_introspection_c__CommandVelocity_init_function>:
 800b908:	f007 bdc6 	b.w	8013498 <nereo_interfaces__msg__CommandVelocity__init>

0800b90c <nereo_interfaces__msg__CommandVelocity__rosidl_typesupport_introspection_c__CommandVelocity_fini_function>:
 800b90c:	f007 bdc8 	b.w	80134a0 <nereo_interfaces__msg__CommandVelocity__fini>

0800b910 <nereo_interfaces__msg__CommandVelocity__rosidl_typesupport_introspection_c__get_function__CommandVelocity__cmd_vel>:
 800b910:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800b914:	4770      	bx	lr
 800b916:	bf00      	nop

0800b918 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity>:
 800b918:	4b04      	ldr	r3, [pc, #16]	@ (800b92c <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity+0x14>)
 800b91a:	681a      	ldr	r2, [r3, #0]
 800b91c:	b10a      	cbz	r2, 800b922 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity+0xa>
 800b91e:	4803      	ldr	r0, [pc, #12]	@ (800b92c <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity+0x14>)
 800b920:	4770      	bx	lr
 800b922:	4a03      	ldr	r2, [pc, #12]	@ (800b930 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity+0x18>)
 800b924:	4801      	ldr	r0, [pc, #4]	@ (800b92c <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity+0x14>)
 800b926:	6812      	ldr	r2, [r2, #0]
 800b928:	601a      	str	r2, [r3, #0]
 800b92a:	4770      	bx	lr
 800b92c:	2000017c 	.word	0x2000017c
 800b930:	2000038c 	.word	0x2000038c

0800b934 <nereo_interfaces__srv__SetNavigationMode_Request__rosidl_typesupport_introspection_c__SetNavigationMode_Request_init_function>:
 800b934:	f007 bdb6 	b.w	80134a4 <nereo_interfaces__srv__SetNavigationMode_Request__init>

0800b938 <nereo_interfaces__srv__SetNavigationMode_Request__rosidl_typesupport_introspection_c__SetNavigationMode_Request_fini_function>:
 800b938:	f007 bdb8 	b.w	80134ac <nereo_interfaces__srv__SetNavigationMode_Request__fini>

0800b93c <nereo_interfaces__srv__SetNavigationMode_Response__rosidl_typesupport_introspection_c__SetNavigationMode_Response_init_function>:
 800b93c:	f007 bdb8 	b.w	80134b0 <nereo_interfaces__srv__SetNavigationMode_Response__init>

0800b940 <nereo_interfaces__srv__SetNavigationMode_Response__rosidl_typesupport_introspection_c__SetNavigationMode_Response_fini_function>:
 800b940:	f007 bdba 	b.w	80134b8 <nereo_interfaces__srv__SetNavigationMode_Response__fini>

0800b944 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Request>:
 800b944:	4b04      	ldr	r3, [pc, #16]	@ (800b958 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Request+0x14>)
 800b946:	681a      	ldr	r2, [r3, #0]
 800b948:	b10a      	cbz	r2, 800b94e <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Request+0xa>
 800b94a:	4803      	ldr	r0, [pc, #12]	@ (800b958 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Request+0x14>)
 800b94c:	4770      	bx	lr
 800b94e:	4a03      	ldr	r2, [pc, #12]	@ (800b95c <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Request+0x18>)
 800b950:	4801      	ldr	r0, [pc, #4]	@ (800b958 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Request+0x14>)
 800b952:	6812      	ldr	r2, [r2, #0]
 800b954:	601a      	str	r2, [r3, #0]
 800b956:	4770      	bx	lr
 800b958:	200001c4 	.word	0x200001c4
 800b95c:	2000038c 	.word	0x2000038c

0800b960 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Response>:
 800b960:	4b04      	ldr	r3, [pc, #16]	@ (800b974 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Response+0x14>)
 800b962:	681a      	ldr	r2, [r3, #0]
 800b964:	b10a      	cbz	r2, 800b96a <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Response+0xa>
 800b966:	4803      	ldr	r0, [pc, #12]	@ (800b974 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Response+0x14>)
 800b968:	4770      	bx	lr
 800b96a:	4a03      	ldr	r2, [pc, #12]	@ (800b978 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Response+0x18>)
 800b96c:	4801      	ldr	r0, [pc, #4]	@ (800b974 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Response+0x14>)
 800b96e:	6812      	ldr	r2, [r2, #0]
 800b970:	601a      	str	r2, [r3, #0]
 800b972:	4770      	bx	lr
 800b974:	20000248 	.word	0x20000248
 800b978:	2000038c 	.word	0x2000038c

0800b97c <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode>:
 800b97c:	4b13      	ldr	r3, [pc, #76]	@ (800b9cc <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x50>)
 800b97e:	681a      	ldr	r2, [r3, #0]
 800b980:	b132      	cbz	r2, 800b990 <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x14>
 800b982:	685b      	ldr	r3, [r3, #4]
 800b984:	689a      	ldr	r2, [r3, #8]
 800b986:	b152      	cbz	r2, 800b99e <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x22>
 800b988:	68da      	ldr	r2, [r3, #12]
 800b98a:	b182      	cbz	r2, 800b9ae <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x32>
 800b98c:	480f      	ldr	r0, [pc, #60]	@ (800b9cc <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x50>)
 800b98e:	4770      	bx	lr
 800b990:	4a0f      	ldr	r2, [pc, #60]	@ (800b9d0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x54>)
 800b992:	6812      	ldr	r2, [r2, #0]
 800b994:	601a      	str	r2, [r3, #0]
 800b996:	685b      	ldr	r3, [r3, #4]
 800b998:	689a      	ldr	r2, [r3, #8]
 800b99a:	2a00      	cmp	r2, #0
 800b99c:	d1f4      	bne.n	800b988 <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0xc>
 800b99e:	4a0d      	ldr	r2, [pc, #52]	@ (800b9d4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x58>)
 800b9a0:	6811      	ldr	r1, [r2, #0]
 800b9a2:	b179      	cbz	r1, 800b9c4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x48>
 800b9a4:	6852      	ldr	r2, [r2, #4]
 800b9a6:	609a      	str	r2, [r3, #8]
 800b9a8:	68da      	ldr	r2, [r3, #12]
 800b9aa:	2a00      	cmp	r2, #0
 800b9ac:	d1ee      	bne.n	800b98c <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x10>
 800b9ae:	4a0a      	ldr	r2, [pc, #40]	@ (800b9d8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x5c>)
 800b9b0:	6811      	ldr	r1, [r2, #0]
 800b9b2:	b119      	cbz	r1, 800b9bc <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x40>
 800b9b4:	6852      	ldr	r2, [r2, #4]
 800b9b6:	4805      	ldr	r0, [pc, #20]	@ (800b9cc <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x50>)
 800b9b8:	60da      	str	r2, [r3, #12]
 800b9ba:	4770      	bx	lr
 800b9bc:	4904      	ldr	r1, [pc, #16]	@ (800b9d0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x54>)
 800b9be:	6809      	ldr	r1, [r1, #0]
 800b9c0:	6011      	str	r1, [r2, #0]
 800b9c2:	e7f7      	b.n	800b9b4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x38>
 800b9c4:	4902      	ldr	r1, [pc, #8]	@ (800b9d0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x54>)
 800b9c6:	6809      	ldr	r1, [r1, #0]
 800b9c8:	6011      	str	r1, [r2, #0]
 800b9ca:	e7eb      	b.n	800b9a4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x28>
 800b9cc:	20000264 	.word	0x20000264
 800b9d0:	2000038c 	.word	0x2000038c
 800b9d4:	200001c4 	.word	0x200001c4
 800b9d8:	20000248 	.word	0x20000248

0800b9dc <nereo_interfaces__msg__ThrusterStatuses__rosidl_typesupport_introspection_c__size_function__ThrusterStatuses__thruster_pwms>:
 800b9dc:	2008      	movs	r0, #8
 800b9de:	4770      	bx	lr

0800b9e0 <nereo_interfaces__msg__ThrusterStatuses__rosidl_typesupport_introspection_c__get_const_function__ThrusterStatuses__thruster_pwms>:
 800b9e0:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 800b9e4:	4770      	bx	lr
 800b9e6:	bf00      	nop

0800b9e8 <nereo_interfaces__msg__ThrusterStatuses__rosidl_typesupport_introspection_c__fetch_function__ThrusterStatuses__thruster_pwms>:
 800b9e8:	f830 3011 	ldrh.w	r3, [r0, r1, lsl #1]
 800b9ec:	8013      	strh	r3, [r2, #0]
 800b9ee:	4770      	bx	lr

0800b9f0 <nereo_interfaces__msg__ThrusterStatuses__rosidl_typesupport_introspection_c__assign_function__ThrusterStatuses__thruster_pwms>:
 800b9f0:	8813      	ldrh	r3, [r2, #0]
 800b9f2:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 800b9f6:	4770      	bx	lr

0800b9f8 <nereo_interfaces__msg__ThrusterStatuses__rosidl_typesupport_introspection_c__ThrusterStatuses_init_function>:
 800b9f8:	f007 bd60 	b.w	80134bc <nereo_interfaces__msg__ThrusterStatuses__init>

0800b9fc <nereo_interfaces__msg__ThrusterStatuses__rosidl_typesupport_introspection_c__ThrusterStatuses_fini_function>:
 800b9fc:	f007 bd62 	b.w	80134c4 <nereo_interfaces__msg__ThrusterStatuses__fini>

0800ba00 <nereo_interfaces__msg__ThrusterStatuses__rosidl_typesupport_introspection_c__get_function__ThrusterStatuses__thruster_pwms>:
 800ba00:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 800ba04:	4770      	bx	lr
 800ba06:	bf00      	nop

0800ba08 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses>:
 800ba08:	4b04      	ldr	r3, [pc, #16]	@ (800ba1c <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses+0x14>)
 800ba0a:	681a      	ldr	r2, [r3, #0]
 800ba0c:	b10a      	cbz	r2, 800ba12 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses+0xa>
 800ba0e:	4803      	ldr	r0, [pc, #12]	@ (800ba1c <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses+0x14>)
 800ba10:	4770      	bx	lr
 800ba12:	4a03      	ldr	r2, [pc, #12]	@ (800ba20 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses+0x18>)
 800ba14:	4801      	ldr	r0, [pc, #4]	@ (800ba1c <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses+0x14>)
 800ba16:	6812      	ldr	r2, [r2, #0]
 800ba18:	601a      	str	r2, [r3, #0]
 800ba1a:	4770      	bx	lr
 800ba1c:	200002ac 	.word	0x200002ac
 800ba20:	2000038c 	.word	0x2000038c

0800ba24 <_CommandVelocity__max_serialized_size>:
 800ba24:	b508      	push	{r3, lr}
 800ba26:	2104      	movs	r1, #4
 800ba28:	2000      	movs	r0, #0
 800ba2a:	f004 fd7d 	bl	8010528 <ucdr_alignment>
 800ba2e:	3018      	adds	r0, #24
 800ba30:	bd08      	pop	{r3, pc}
 800ba32:	bf00      	nop

0800ba34 <get_serialized_size_nereo_interfaces__msg__CommandVelocity>:
 800ba34:	b138      	cbz	r0, 800ba46 <get_serialized_size_nereo_interfaces__msg__CommandVelocity+0x12>
 800ba36:	b508      	push	{r3, lr}
 800ba38:	460b      	mov	r3, r1
 800ba3a:	4618      	mov	r0, r3
 800ba3c:	2104      	movs	r1, #4
 800ba3e:	f004 fd73 	bl	8010528 <ucdr_alignment>
 800ba42:	3018      	adds	r0, #24
 800ba44:	bd08      	pop	{r3, pc}
 800ba46:	4770      	bx	lr

0800ba48 <_CommandVelocity__cdr_deserialize>:
 800ba48:	b111      	cbz	r1, 800ba50 <_CommandVelocity__cdr_deserialize+0x8>
 800ba4a:	2206      	movs	r2, #6
 800ba4c:	f003 b828 	b.w	800eaa0 <ucdr_deserialize_array_float>
 800ba50:	4608      	mov	r0, r1
 800ba52:	4770      	bx	lr

0800ba54 <_CommandVelocity__cdr_serialize>:
 800ba54:	468c      	mov	ip, r1
 800ba56:	4601      	mov	r1, r0
 800ba58:	b118      	cbz	r0, 800ba62 <_CommandVelocity__cdr_serialize+0xe>
 800ba5a:	2206      	movs	r2, #6
 800ba5c:	4660      	mov	r0, ip
 800ba5e:	f002 bfcb 	b.w	800e9f8 <ucdr_serialize_array_float>
 800ba62:	4770      	bx	lr

0800ba64 <_CommandVelocity__get_serialized_size>:
 800ba64:	b130      	cbz	r0, 800ba74 <_CommandVelocity__get_serialized_size+0x10>
 800ba66:	b508      	push	{r3, lr}
 800ba68:	2104      	movs	r1, #4
 800ba6a:	2000      	movs	r0, #0
 800ba6c:	f004 fd5c 	bl	8010528 <ucdr_alignment>
 800ba70:	3018      	adds	r0, #24
 800ba72:	bd08      	pop	{r3, pc}
 800ba74:	4770      	bx	lr
 800ba76:	bf00      	nop

0800ba78 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity>:
 800ba78:	4800      	ldr	r0, [pc, #0]	@ (800ba7c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity+0x4>)
 800ba7a:	4770      	bx	lr
 800ba7c:	200002b8 	.word	0x200002b8

0800ba80 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Request>:
 800ba80:	4800      	ldr	r0, [pc, #0]	@ (800ba84 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Request+0x4>)
 800ba82:	4770      	bx	lr
 800ba84:	200002fc 	.word	0x200002fc

0800ba88 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Response>:
 800ba88:	4800      	ldr	r0, [pc, #0]	@ (800ba8c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Response+0x4>)
 800ba8a:	4770      	bx	lr
 800ba8c:	20000308 	.word	0x20000308

0800ba90 <_SetNavigationMode_Request__max_serialized_size>:
 800ba90:	b508      	push	{r3, lr}
 800ba92:	2101      	movs	r1, #1
 800ba94:	2000      	movs	r0, #0
 800ba96:	f004 fd47 	bl	8010528 <ucdr_alignment>
 800ba9a:	3001      	adds	r0, #1
 800ba9c:	bd08      	pop	{r3, pc}
 800ba9e:	bf00      	nop

0800baa0 <_SetNavigationMode_Request__cdr_deserialize>:
 800baa0:	b109      	cbz	r1, 800baa6 <_SetNavigationMode_Request__cdr_deserialize+0x6>
 800baa2:	f003 b941 	b.w	800ed28 <ucdr_deserialize_uint8_t>
 800baa6:	4608      	mov	r0, r1
 800baa8:	4770      	bx	lr
 800baaa:	bf00      	nop

0800baac <get_serialized_size_nereo_interfaces__srv__SetNavigationMode_Request>:
 800baac:	b138      	cbz	r0, 800babe <get_serialized_size_nereo_interfaces__srv__SetNavigationMode_Request+0x12>
 800baae:	b508      	push	{r3, lr}
 800bab0:	460b      	mov	r3, r1
 800bab2:	4618      	mov	r0, r3
 800bab4:	2101      	movs	r1, #1
 800bab6:	f004 fd37 	bl	8010528 <ucdr_alignment>
 800baba:	3001      	adds	r0, #1
 800babc:	bd08      	pop	{r3, pc}
 800babe:	4770      	bx	lr

0800bac0 <get_serialized_size_nereo_interfaces__srv__SetNavigationMode_Response>:
 800bac0:	b180      	cbz	r0, 800bae4 <get_serialized_size_nereo_interfaces__srv__SetNavigationMode_Response+0x24>
 800bac2:	b538      	push	{r3, r4, r5, lr}
 800bac4:	460d      	mov	r5, r1
 800bac6:	4628      	mov	r0, r5
 800bac8:	2101      	movs	r1, #1
 800baca:	f004 fd2d 	bl	8010528 <ucdr_alignment>
 800bace:	1c6b      	adds	r3, r5, #1
 800bad0:	181c      	adds	r4, r3, r0
 800bad2:	2101      	movs	r1, #1
 800bad4:	4620      	mov	r0, r4
 800bad6:	f004 fd27 	bl	8010528 <ucdr_alignment>
 800bada:	f1c5 0501 	rsb	r5, r5, #1
 800bade:	4428      	add	r0, r5
 800bae0:	4420      	add	r0, r4
 800bae2:	bd38      	pop	{r3, r4, r5, pc}
 800bae4:	4770      	bx	lr
 800bae6:	bf00      	nop

0800bae8 <_SetNavigationMode_Request__cdr_serialize>:
 800bae8:	460a      	mov	r2, r1
 800baea:	b118      	cbz	r0, 800baf4 <_SetNavigationMode_Request__cdr_serialize+0xc>
 800baec:	7801      	ldrb	r1, [r0, #0]
 800baee:	4610      	mov	r0, r2
 800baf0:	f003 b904 	b.w	800ecfc <ucdr_serialize_uint8_t>
 800baf4:	4770      	bx	lr
 800baf6:	bf00      	nop

0800baf8 <_SetNavigationMode_Response__cdr_deserialize>:
 800baf8:	b538      	push	{r3, r4, r5, lr}
 800bafa:	460c      	mov	r4, r1
 800bafc:	b141      	cbz	r1, 800bb10 <_SetNavigationMode_Response__cdr_deserialize+0x18>
 800bafe:	4605      	mov	r5, r0
 800bb00:	f003 f8e4 	bl	800eccc <ucdr_deserialize_bool>
 800bb04:	1c61      	adds	r1, r4, #1
 800bb06:	4628      	mov	r0, r5
 800bb08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bb0c:	f003 b90c 	b.w	800ed28 <ucdr_deserialize_uint8_t>
 800bb10:	4608      	mov	r0, r1
 800bb12:	bd38      	pop	{r3, r4, r5, pc}

0800bb14 <_SetNavigationMode_Response__cdr_serialize>:
 800bb14:	b160      	cbz	r0, 800bb30 <_SetNavigationMode_Response__cdr_serialize+0x1c>
 800bb16:	b538      	push	{r3, r4, r5, lr}
 800bb18:	460d      	mov	r5, r1
 800bb1a:	4604      	mov	r4, r0
 800bb1c:	7801      	ldrb	r1, [r0, #0]
 800bb1e:	4628      	mov	r0, r5
 800bb20:	f003 f8be 	bl	800eca0 <ucdr_serialize_bool>
 800bb24:	7861      	ldrb	r1, [r4, #1]
 800bb26:	4628      	mov	r0, r5
 800bb28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bb2c:	f003 b8e6 	b.w	800ecfc <ucdr_serialize_uint8_t>
 800bb30:	4770      	bx	lr
 800bb32:	bf00      	nop

0800bb34 <_SetNavigationMode_Request__get_serialized_size>:
 800bb34:	b130      	cbz	r0, 800bb44 <_SetNavigationMode_Request__get_serialized_size+0x10>
 800bb36:	b508      	push	{r3, lr}
 800bb38:	2101      	movs	r1, #1
 800bb3a:	2000      	movs	r0, #0
 800bb3c:	f004 fcf4 	bl	8010528 <ucdr_alignment>
 800bb40:	3001      	adds	r0, #1
 800bb42:	bd08      	pop	{r3, pc}
 800bb44:	4770      	bx	lr
 800bb46:	bf00      	nop

0800bb48 <_SetNavigationMode_Response__get_serialized_size>:
 800bb48:	b160      	cbz	r0, 800bb64 <_SetNavigationMode_Response__get_serialized_size+0x1c>
 800bb4a:	b510      	push	{r4, lr}
 800bb4c:	2101      	movs	r1, #1
 800bb4e:	2000      	movs	r0, #0
 800bb50:	f004 fcea 	bl	8010528 <ucdr_alignment>
 800bb54:	1c44      	adds	r4, r0, #1
 800bb56:	2101      	movs	r1, #1
 800bb58:	4620      	mov	r0, r4
 800bb5a:	f004 fce5 	bl	8010528 <ucdr_alignment>
 800bb5e:	3001      	adds	r0, #1
 800bb60:	4420      	add	r0, r4
 800bb62:	bd10      	pop	{r4, pc}
 800bb64:	4770      	bx	lr
 800bb66:	bf00      	nop

0800bb68 <_SetNavigationMode_Response__max_serialized_size>:
 800bb68:	b510      	push	{r4, lr}
 800bb6a:	2101      	movs	r1, #1
 800bb6c:	2000      	movs	r0, #0
 800bb6e:	f004 fcdb 	bl	8010528 <ucdr_alignment>
 800bb72:	1c44      	adds	r4, r0, #1
 800bb74:	2101      	movs	r1, #1
 800bb76:	4620      	mov	r0, r4
 800bb78:	f004 fcd6 	bl	8010528 <ucdr_alignment>
 800bb7c:	3001      	adds	r0, #1
 800bb7e:	4420      	add	r0, r4
 800bb80:	bd10      	pop	{r4, pc}
 800bb82:	bf00      	nop

0800bb84 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode>:
 800bb84:	4800      	ldr	r0, [pc, #0]	@ (800bb88 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x4>)
 800bb86:	4770      	bx	lr
 800bb88:	200002f0 	.word	0x200002f0

0800bb8c <_ThrusterStatuses__max_serialized_size>:
 800bb8c:	b508      	push	{r3, lr}
 800bb8e:	2102      	movs	r1, #2
 800bb90:	2000      	movs	r0, #0
 800bb92:	f004 fcc9 	bl	8010528 <ucdr_alignment>
 800bb96:	3010      	adds	r0, #16
 800bb98:	bd08      	pop	{r3, pc}
 800bb9a:	bf00      	nop

0800bb9c <get_serialized_size_nereo_interfaces__msg__ThrusterStatuses>:
 800bb9c:	b138      	cbz	r0, 800bbae <get_serialized_size_nereo_interfaces__msg__ThrusterStatuses+0x12>
 800bb9e:	b508      	push	{r3, lr}
 800bba0:	460b      	mov	r3, r1
 800bba2:	4618      	mov	r0, r3
 800bba4:	2102      	movs	r1, #2
 800bba6:	f004 fcbf 	bl	8010528 <ucdr_alignment>
 800bbaa:	3010      	adds	r0, #16
 800bbac:	bd08      	pop	{r3, pc}
 800bbae:	4770      	bx	lr

0800bbb0 <_ThrusterStatuses__cdr_deserialize>:
 800bbb0:	b111      	cbz	r1, 800bbb8 <_ThrusterStatuses__cdr_deserialize+0x8>
 800bbb2:	2208      	movs	r2, #8
 800bbb4:	f002 beca 	b.w	800e94c <ucdr_deserialize_array_uint16_t>
 800bbb8:	4608      	mov	r0, r1
 800bbba:	4770      	bx	lr

0800bbbc <_ThrusterStatuses__cdr_serialize>:
 800bbbc:	468c      	mov	ip, r1
 800bbbe:	4601      	mov	r1, r0
 800bbc0:	b118      	cbz	r0, 800bbca <_ThrusterStatuses__cdr_serialize+0xe>
 800bbc2:	2208      	movs	r2, #8
 800bbc4:	4660      	mov	r0, ip
 800bbc6:	f002 be6b 	b.w	800e8a0 <ucdr_serialize_array_uint16_t>
 800bbca:	4770      	bx	lr

0800bbcc <_ThrusterStatuses__get_serialized_size>:
 800bbcc:	b130      	cbz	r0, 800bbdc <_ThrusterStatuses__get_serialized_size+0x10>
 800bbce:	b508      	push	{r3, lr}
 800bbd0:	2102      	movs	r1, #2
 800bbd2:	2000      	movs	r0, #0
 800bbd4:	f004 fca8 	bl	8010528 <ucdr_alignment>
 800bbd8:	3010      	adds	r0, #16
 800bbda:	bd08      	pop	{r3, pc}
 800bbdc:	4770      	bx	lr
 800bbde:	bf00      	nop

0800bbe0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses>:
 800bbe0:	4800      	ldr	r0, [pc, #0]	@ (800bbe4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses+0x4>)
 800bbe2:	4770      	bx	lr
 800bbe4:	2000034c 	.word	0x2000034c

0800bbe8 <rcl_get_zero_initialized_publisher>:
 800bbe8:	4b01      	ldr	r3, [pc, #4]	@ (800bbf0 <rcl_get_zero_initialized_publisher+0x8>)
 800bbea:	6818      	ldr	r0, [r3, #0]
 800bbec:	4770      	bx	lr
 800bbee:	bf00      	nop
 800bbf0:	0801d7bc 	.word	0x0801d7bc

0800bbf4 <rcl_publisher_init>:
 800bbf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bbf8:	b088      	sub	sp, #32
 800bbfa:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800bbfc:	2d00      	cmp	r5, #0
 800bbfe:	d069      	beq.n	800bcd4 <rcl_publisher_init+0xe0>
 800bc00:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 800bc04:	4604      	mov	r4, r0
 800bc06:	4648      	mov	r0, r9
 800bc08:	460e      	mov	r6, r1
 800bc0a:	4690      	mov	r8, r2
 800bc0c:	461f      	mov	r7, r3
 800bc0e:	f001 f8b7 	bl	800cd80 <rcutils_allocator_is_valid>
 800bc12:	2800      	cmp	r0, #0
 800bc14:	d05e      	beq.n	800bcd4 <rcl_publisher_init+0xe0>
 800bc16:	2c00      	cmp	r4, #0
 800bc18:	d05c      	beq.n	800bcd4 <rcl_publisher_init+0xe0>
 800bc1a:	f8d4 a000 	ldr.w	sl, [r4]
 800bc1e:	f1ba 0f00 	cmp.w	sl, #0
 800bc22:	d004      	beq.n	800bc2e <rcl_publisher_init+0x3a>
 800bc24:	2764      	movs	r7, #100	@ 0x64
 800bc26:	4638      	mov	r0, r7
 800bc28:	b008      	add	sp, #32
 800bc2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc2e:	4630      	mov	r0, r6
 800bc30:	f008 f8d0 	bl	8013dd4 <rcl_node_is_valid>
 800bc34:	2800      	cmp	r0, #0
 800bc36:	d052      	beq.n	800bcde <rcl_publisher_init+0xea>
 800bc38:	f1b8 0f00 	cmp.w	r8, #0
 800bc3c:	d04a      	beq.n	800bcd4 <rcl_publisher_init+0xe0>
 800bc3e:	2f00      	cmp	r7, #0
 800bc40:	d048      	beq.n	800bcd4 <rcl_publisher_init+0xe0>
 800bc42:	e9cd aa03 	strd	sl, sl, [sp, #12]
 800bc46:	aa07      	add	r2, sp, #28
 800bc48:	9205      	str	r2, [sp, #20]
 800bc4a:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 800bc4e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800bc52:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800bc56:	f8cd a01c 	str.w	sl, [sp, #28]
 800bc5a:	4639      	mov	r1, r7
 800bc5c:	e899 000c 	ldmia.w	r9, {r2, r3}
 800bc60:	4630      	mov	r0, r6
 800bc62:	f008 f90b 	bl	8013e7c <rcl_node_resolve_name>
 800bc66:	4607      	mov	r7, r0
 800bc68:	2800      	cmp	r0, #0
 800bc6a:	d14f      	bne.n	800bd0c <rcl_publisher_init+0x118>
 800bc6c:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 800bc6e:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800bc70:	20c8      	movs	r0, #200	@ 0xc8
 800bc72:	4798      	blx	r3
 800bc74:	6020      	str	r0, [r4, #0]
 800bc76:	2800      	cmp	r0, #0
 800bc78:	d04e      	beq.n	800bd18 <rcl_publisher_init+0x124>
 800bc7a:	4630      	mov	r0, r6
 800bc7c:	f008 f8cc 	bl	8013e18 <rcl_node_get_rmw_handle>
 800bc80:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800bc84:	9300      	str	r3, [sp, #0]
 800bc86:	9a07      	ldr	r2, [sp, #28]
 800bc88:	6827      	ldr	r7, [r4, #0]
 800bc8a:	462b      	mov	r3, r5
 800bc8c:	4641      	mov	r1, r8
 800bc8e:	f001 f985 	bl	800cf9c <rmw_create_publisher>
 800bc92:	6823      	ldr	r3, [r4, #0]
 800bc94:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
 800bc98:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800bc9c:	b370      	cbz	r0, 800bcfc <rcl_publisher_init+0x108>
 800bc9e:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 800bca2:	f001 fa59 	bl	800d158 <rmw_publisher_get_actual_qos>
 800bca6:	6823      	ldr	r3, [r4, #0]
 800bca8:	4607      	mov	r7, r0
 800bcaa:	b9d0      	cbnz	r0, 800bce2 <rcl_publisher_init+0xee>
 800bcac:	f895 2048 	ldrb.w	r2, [r5, #72]	@ 0x48
 800bcb0:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800bcb4:	4629      	mov	r1, r5
 800bcb6:	2270      	movs	r2, #112	@ 0x70
 800bcb8:	4618      	mov	r0, r3
 800bcba:	f00f fbf4 	bl	801b4a6 <memcpy>
 800bcbe:	6832      	ldr	r2, [r6, #0]
 800bcc0:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 800bcc4:	9807      	ldr	r0, [sp, #28]
 800bcc6:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 800bcc8:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800bcca:	4798      	blx	r3
 800bccc:	4638      	mov	r0, r7
 800bcce:	b008      	add	sp, #32
 800bcd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bcd4:	270b      	movs	r7, #11
 800bcd6:	4638      	mov	r0, r7
 800bcd8:	b008      	add	sp, #32
 800bcda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bcde:	27c8      	movs	r7, #200	@ 0xc8
 800bce0:	e7a1      	b.n	800bc26 <rcl_publisher_init+0x32>
 800bce2:	b18b      	cbz	r3, 800bd08 <rcl_publisher_init+0x114>
 800bce4:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800bce8:	b142      	cbz	r2, 800bcfc <rcl_publisher_init+0x108>
 800bcea:	4630      	mov	r0, r6
 800bcec:	f008 f894 	bl	8013e18 <rcl_node_get_rmw_handle>
 800bcf0:	6823      	ldr	r3, [r4, #0]
 800bcf2:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 800bcf6:	f001 fa3f 	bl	800d178 <rmw_destroy_publisher>
 800bcfa:	6823      	ldr	r3, [r4, #0]
 800bcfc:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 800bcfe:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800bd00:	4618      	mov	r0, r3
 800bd02:	4790      	blx	r2
 800bd04:	2300      	movs	r3, #0
 800bd06:	6023      	str	r3, [r4, #0]
 800bd08:	2701      	movs	r7, #1
 800bd0a:	e7db      	b.n	800bcc4 <rcl_publisher_init+0xd0>
 800bd0c:	2867      	cmp	r0, #103	@ 0x67
 800bd0e:	d0d9      	beq.n	800bcc4 <rcl_publisher_init+0xd0>
 800bd10:	2869      	cmp	r0, #105	@ 0x69
 800bd12:	d003      	beq.n	800bd1c <rcl_publisher_init+0x128>
 800bd14:	280a      	cmp	r0, #10
 800bd16:	d1f7      	bne.n	800bd08 <rcl_publisher_init+0x114>
 800bd18:	270a      	movs	r7, #10
 800bd1a:	e7d3      	b.n	800bcc4 <rcl_publisher_init+0xd0>
 800bd1c:	2767      	movs	r7, #103	@ 0x67
 800bd1e:	e7d1      	b.n	800bcc4 <rcl_publisher_init+0xd0>

0800bd20 <rcl_publisher_get_default_options>:
 800bd20:	b570      	push	{r4, r5, r6, lr}
 800bd22:	4d14      	ldr	r5, [pc, #80]	@ (800bd74 <rcl_publisher_get_default_options+0x54>)
 800bd24:	4914      	ldr	r1, [pc, #80]	@ (800bd78 <rcl_publisher_get_default_options+0x58>)
 800bd26:	b088      	sub	sp, #32
 800bd28:	4604      	mov	r4, r0
 800bd2a:	2250      	movs	r2, #80	@ 0x50
 800bd2c:	4628      	mov	r0, r5
 800bd2e:	f00f fbba 	bl	801b4a6 <memcpy>
 800bd32:	a802      	add	r0, sp, #8
 800bd34:	f001 f816 	bl	800cd64 <rcutils_get_default_allocator>
 800bd38:	f10d 0c08 	add.w	ip, sp, #8
 800bd3c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800bd40:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 800bd44:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800bd48:	466e      	mov	r6, sp
 800bd4a:	f8dc 3000 	ldr.w	r3, [ip]
 800bd4e:	f8ce 3000 	str.w	r3, [lr]
 800bd52:	4630      	mov	r0, r6
 800bd54:	f001 f8a4 	bl	800cea0 <rmw_get_default_publisher_options>
 800bd58:	e896 0003 	ldmia.w	r6, {r0, r1}
 800bd5c:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800bd60:	e883 0003 	stmia.w	r3, {r0, r1}
 800bd64:	2270      	movs	r2, #112	@ 0x70
 800bd66:	4629      	mov	r1, r5
 800bd68:	4620      	mov	r0, r4
 800bd6a:	f00f fb9c 	bl	801b4a6 <memcpy>
 800bd6e:	4620      	mov	r0, r4
 800bd70:	b008      	add	sp, #32
 800bd72:	bd70      	pop	{r4, r5, r6, pc}
 800bd74:	20010d90 	.word	0x20010d90
 800bd78:	0801d7c0 	.word	0x0801d7c0

0800bd7c <rcl_publish>:
 800bd7c:	b1f8      	cbz	r0, 800bdbe <rcl_publish+0x42>
 800bd7e:	6803      	ldr	r3, [r0, #0]
 800bd80:	b570      	push	{r4, r5, r6, lr}
 800bd82:	4604      	mov	r4, r0
 800bd84:	b1b3      	cbz	r3, 800bdb4 <rcl_publish+0x38>
 800bd86:	4616      	mov	r6, r2
 800bd88:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800bd8c:	b192      	cbz	r2, 800bdb4 <rcl_publish+0x38>
 800bd8e:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800bd92:	460d      	mov	r5, r1
 800bd94:	f007 fc44 	bl	8013620 <rcl_context_is_valid>
 800bd98:	b160      	cbz	r0, 800bdb4 <rcl_publish+0x38>
 800bd9a:	6823      	ldr	r3, [r4, #0]
 800bd9c:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800bda0:	b140      	cbz	r0, 800bdb4 <rcl_publish+0x38>
 800bda2:	b155      	cbz	r5, 800bdba <rcl_publish+0x3e>
 800bda4:	4632      	mov	r2, r6
 800bda6:	4629      	mov	r1, r5
 800bda8:	f001 f898 	bl	800cedc <rmw_publish>
 800bdac:	3800      	subs	r0, #0
 800bdae:	bf18      	it	ne
 800bdb0:	2001      	movne	r0, #1
 800bdb2:	bd70      	pop	{r4, r5, r6, pc}
 800bdb4:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800bdb8:	bd70      	pop	{r4, r5, r6, pc}
 800bdba:	200b      	movs	r0, #11
 800bdbc:	bd70      	pop	{r4, r5, r6, pc}
 800bdbe:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800bdc2:	4770      	bx	lr

0800bdc4 <rcl_publisher_is_valid>:
 800bdc4:	b1a0      	cbz	r0, 800bdf0 <rcl_publisher_is_valid+0x2c>
 800bdc6:	6803      	ldr	r3, [r0, #0]
 800bdc8:	b510      	push	{r4, lr}
 800bdca:	4604      	mov	r4, r0
 800bdcc:	b173      	cbz	r3, 800bdec <rcl_publisher_is_valid+0x28>
 800bdce:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800bdd2:	b15a      	cbz	r2, 800bdec <rcl_publisher_is_valid+0x28>
 800bdd4:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800bdd8:	f007 fc22 	bl	8013620 <rcl_context_is_valid>
 800bddc:	b130      	cbz	r0, 800bdec <rcl_publisher_is_valid+0x28>
 800bdde:	6823      	ldr	r3, [r4, #0]
 800bde0:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800bde4:	3800      	subs	r0, #0
 800bde6:	bf18      	it	ne
 800bde8:	2001      	movne	r0, #1
 800bdea:	bd10      	pop	{r4, pc}
 800bdec:	2000      	movs	r0, #0
 800bdee:	bd10      	pop	{r4, pc}
 800bdf0:	2000      	movs	r0, #0
 800bdf2:	4770      	bx	lr

0800bdf4 <rcl_publisher_is_valid_except_context>:
 800bdf4:	b130      	cbz	r0, 800be04 <rcl_publisher_is_valid_except_context+0x10>
 800bdf6:	6800      	ldr	r0, [r0, #0]
 800bdf8:	b120      	cbz	r0, 800be04 <rcl_publisher_is_valid_except_context+0x10>
 800bdfa:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 800bdfe:	3800      	subs	r0, #0
 800be00:	bf18      	it	ne
 800be02:	2001      	movne	r0, #1
 800be04:	4770      	bx	lr
 800be06:	bf00      	nop

0800be08 <_rclc_check_for_new_data>:
 800be08:	2800      	cmp	r0, #0
 800be0a:	d046      	beq.n	800be9a <_rclc_check_for_new_data+0x92>
 800be0c:	b510      	push	{r4, lr}
 800be0e:	7802      	ldrb	r2, [r0, #0]
 800be10:	b084      	sub	sp, #16
 800be12:	4603      	mov	r3, r0
 800be14:	2a0a      	cmp	r2, #10
 800be16:	d842      	bhi.n	800be9e <_rclc_check_for_new_data+0x96>
 800be18:	e8df f002 	tbb	[pc, r2]
 800be1c:	14181212 	.word	0x14181212
 800be20:	06060614 	.word	0x06060614
 800be24:	2e1a      	.short	0x2e1a
 800be26:	16          	.byte	0x16
 800be27:	00          	.byte	0x00
 800be28:	6a0a      	ldr	r2, [r1, #32]
 800be2a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800be2c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800be30:	2000      	movs	r0, #0
 800be32:	1a12      	subs	r2, r2, r0
 800be34:	bf18      	it	ne
 800be36:	2201      	movne	r2, #1
 800be38:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800be3c:	b004      	add	sp, #16
 800be3e:	bd10      	pop	{r4, pc}
 800be40:	680a      	ldr	r2, [r1, #0]
 800be42:	e7f2      	b.n	800be2a <_rclc_check_for_new_data+0x22>
 800be44:	698a      	ldr	r2, [r1, #24]
 800be46:	e7f0      	b.n	800be2a <_rclc_check_for_new_data+0x22>
 800be48:	688a      	ldr	r2, [r1, #8]
 800be4a:	e7ee      	b.n	800be2a <_rclc_check_for_new_data+0x22>
 800be4c:	690a      	ldr	r2, [r1, #16]
 800be4e:	e7ec      	b.n	800be2a <_rclc_check_for_new_data+0x22>
 800be50:	685c      	ldr	r4, [r3, #4]
 800be52:	4608      	mov	r0, r1
 800be54:	f104 0244 	add.w	r2, r4, #68	@ 0x44
 800be58:	f104 0143 	add.w	r1, r4, #67	@ 0x43
 800be5c:	f104 0342 	add.w	r3, r4, #66	@ 0x42
 800be60:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800be64:	9300      	str	r3, [sp, #0]
 800be66:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 800be6a:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 800be6e:	f104 0110 	add.w	r1, r4, #16
 800be72:	f009 fd81 	bl	8015978 <rcl_action_client_wait_set_get_entities_ready>
 800be76:	e7e1      	b.n	800be3c <_rclc_check_for_new_data+0x34>
 800be78:	685c      	ldr	r4, [r3, #4]
 800be7a:	f104 0223 	add.w	r2, r4, #35	@ 0x23
 800be7e:	f104 0322 	add.w	r3, r4, #34	@ 0x22
 800be82:	e9cd 3200 	strd	r3, r2, [sp]
 800be86:	4608      	mov	r0, r1
 800be88:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 800be8c:	f104 0220 	add.w	r2, r4, #32
 800be90:	f104 0110 	add.w	r1, r4, #16
 800be94:	f009 ff88 	bl	8015da8 <rcl_action_server_wait_set_get_entities_ready>
 800be98:	e7d0      	b.n	800be3c <_rclc_check_for_new_data+0x34>
 800be9a:	200b      	movs	r0, #11
 800be9c:	4770      	bx	lr
 800be9e:	2001      	movs	r0, #1
 800bea0:	e7cc      	b.n	800be3c <_rclc_check_for_new_data+0x34>
 800bea2:	bf00      	nop

0800bea4 <_rclc_take_new_data>:
 800bea4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bea6:	b09b      	sub	sp, #108	@ 0x6c
 800bea8:	2800      	cmp	r0, #0
 800beaa:	f000 8088 	beq.w	800bfbe <_rclc_take_new_data+0x11a>
 800beae:	7803      	ldrb	r3, [r0, #0]
 800beb0:	4604      	mov	r4, r0
 800beb2:	2b0a      	cmp	r3, #10
 800beb4:	f200 8167 	bhi.w	800c186 <_rclc_take_new_data+0x2e2>
 800beb8:	e8df f003 	tbb	[pc, r3]
 800bebc:	44152d2d 	.word	0x44152d2d
 800bec0:	19191944 	.word	0x19191944
 800bec4:	065a      	.short	0x065a
 800bec6:	15          	.byte	0x15
 800bec7:	00          	.byte	0x00
 800bec8:	6840      	ldr	r0, [r0, #4]
 800beca:	f890 3020 	ldrb.w	r3, [r0, #32]
 800bece:	2b00      	cmp	r3, #0
 800bed0:	f040 80b2 	bne.w	800c038 <_rclc_take_new_data+0x194>
 800bed4:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 800bed8:	2b00      	cmp	r3, #0
 800beda:	f040 80e4 	bne.w	800c0a6 <_rclc_take_new_data+0x202>
 800bede:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d16f      	bne.n	800bfc6 <_rclc_take_new_data+0x122>
 800bee6:	2500      	movs	r5, #0
 800bee8:	4628      	mov	r0, r5
 800beea:	b01b      	add	sp, #108	@ 0x6c
 800beec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800beee:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800bef0:	6a0b      	ldr	r3, [r1, #32]
 800bef2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d0f5      	beq.n	800bee6 <_rclc_take_new_data+0x42>
 800befa:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800befe:	f104 0110 	add.w	r1, r4, #16
 800bf02:	f008 fa17 	bl	8014334 <rcl_take_request>
 800bf06:	4605      	mov	r5, r0
 800bf08:	2800      	cmp	r0, #0
 800bf0a:	d0ec      	beq.n	800bee6 <_rclc_take_new_data+0x42>
 800bf0c:	f240 2359 	movw	r3, #601	@ 0x259
 800bf10:	4298      	cmp	r0, r3
 800bf12:	d013      	beq.n	800bf3c <_rclc_take_new_data+0x98>
 800bf14:	e029      	b.n	800bf6a <_rclc_take_new_data+0xc6>
 800bf16:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800bf18:	680b      	ldr	r3, [r1, #0]
 800bf1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d0e1      	beq.n	800bee6 <_rclc_take_new_data+0x42>
 800bf22:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800bf26:	2300      	movs	r3, #0
 800bf28:	aa0a      	add	r2, sp, #40	@ 0x28
 800bf2a:	f008 fb41 	bl	80145b0 <rcl_take>
 800bf2e:	4605      	mov	r5, r0
 800bf30:	2800      	cmp	r0, #0
 800bf32:	d0d9      	beq.n	800bee8 <_rclc_take_new_data+0x44>
 800bf34:	f240 1391 	movw	r3, #401	@ 0x191
 800bf38:	4298      	cmp	r0, r3
 800bf3a:	d116      	bne.n	800bf6a <_rclc_take_new_data+0xc6>
 800bf3c:	2300      	movs	r3, #0
 800bf3e:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 800bf42:	e7d1      	b.n	800bee8 <_rclc_take_new_data+0x44>
 800bf44:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800bf46:	698b      	ldr	r3, [r1, #24]
 800bf48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d0ca      	beq.n	800bee6 <_rclc_take_new_data+0x42>
 800bf50:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800bf54:	f104 0110 	add.w	r1, r4, #16
 800bf58:	f007 faf2 	bl	8013540 <rcl_take_response>
 800bf5c:	4605      	mov	r5, r0
 800bf5e:	2800      	cmp	r0, #0
 800bf60:	d0c1      	beq.n	800bee6 <_rclc_take_new_data+0x42>
 800bf62:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800bf66:	4298      	cmp	r0, r3
 800bf68:	d0be      	beq.n	800bee8 <_rclc_take_new_data+0x44>
 800bf6a:	f000 ff2d 	bl	800cdc8 <rcutils_reset_error>
 800bf6e:	e7bb      	b.n	800bee8 <_rclc_take_new_data+0x44>
 800bf70:	6840      	ldr	r0, [r0, #4]
 800bf72:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d17d      	bne.n	800c076 <_rclc_take_new_data+0x1d2>
 800bf7a:	69c3      	ldr	r3, [r0, #28]
 800bf7c:	b11b      	cbz	r3, 800bf86 <_rclc_take_new_data+0xe2>
 800bf7e:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d144      	bne.n	800c010 <_rclc_take_new_data+0x16c>
 800bf86:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	f040 80ac 	bne.w	800c0e8 <_rclc_take_new_data+0x244>
 800bf90:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d0a6      	beq.n	800bee6 <_rclc_take_new_data+0x42>
 800bf98:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800bf9a:	a90a      	add	r1, sp, #40	@ 0x28
 800bf9c:	3010      	adds	r0, #16
 800bf9e:	f009 fbc3 	bl	8015728 <rcl_action_take_result_response>
 800bfa2:	4605      	mov	r5, r0
 800bfa4:	2800      	cmp	r0, #0
 800bfa6:	d1e0      	bne.n	800bf6a <_rclc_take_new_data+0xc6>
 800bfa8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800bfac:	6860      	ldr	r0, [r4, #4]
 800bfae:	f00a f81f 	bl	8015ff0 <rclc_action_find_handle_by_result_request_sequence_number>
 800bfb2:	2800      	cmp	r0, #0
 800bfb4:	d098      	beq.n	800bee8 <_rclc_take_new_data+0x44>
 800bfb6:	2301      	movs	r3, #1
 800bfb8:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 800bfbc:	e794      	b.n	800bee8 <_rclc_take_new_data+0x44>
 800bfbe:	250b      	movs	r5, #11
 800bfc0:	4628      	mov	r0, r5
 800bfc2:	b01b      	add	sp, #108	@ 0x6c
 800bfc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bfc6:	ae04      	add	r6, sp, #16
 800bfc8:	aa0a      	add	r2, sp, #40	@ 0x28
 800bfca:	3010      	adds	r0, #16
 800bfcc:	4631      	mov	r1, r6
 800bfce:	f009 fe1f 	bl	8015c10 <rcl_action_take_cancel_request>
 800bfd2:	4605      	mov	r5, r0
 800bfd4:	2800      	cmp	r0, #0
 800bfd6:	d1c8      	bne.n	800bf6a <_rclc_take_new_data+0xc6>
 800bfd8:	6860      	ldr	r0, [r4, #4]
 800bfda:	a90a      	add	r1, sp, #40	@ 0x28
 800bfdc:	f009 ffc6 	bl	8015f6c <rclc_action_find_goal_handle_by_uuid>
 800bfe0:	4607      	mov	r7, r0
 800bfe2:	2800      	cmp	r0, #0
 800bfe4:	f000 80bb 	beq.w	800c15e <_rclc_take_new_data+0x2ba>
 800bfe8:	f990 0008 	ldrsb.w	r0, [r0, #8]
 800bfec:	2101      	movs	r1, #1
 800bfee:	f009 ff47 	bl	8015e80 <rcl_action_transition_goal_state>
 800bff2:	2803      	cmp	r0, #3
 800bff4:	4684      	mov	ip, r0
 800bff6:	f040 80a7 	bne.w	800c148 <_rclc_take_new_data+0x2a4>
 800bffa:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800bffc:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 800c000:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c002:	e896 0003 	ldmia.w	r6, {r0, r1}
 800c006:	e884 0003 	stmia.w	r4, {r0, r1}
 800c00a:	f887 c008 	strb.w	ip, [r7, #8]
 800c00e:	e76b      	b.n	800bee8 <_rclc_take_new_data+0x44>
 800c010:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800c012:	3010      	adds	r0, #16
 800c014:	f009 fc08 	bl	8015828 <rcl_action_take_feedback>
 800c018:	4605      	mov	r5, r0
 800c01a:	2800      	cmp	r0, #0
 800c01c:	d1a5      	bne.n	800bf6a <_rclc_take_new_data+0xc6>
 800c01e:	6860      	ldr	r0, [r4, #4]
 800c020:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800c022:	f009 ffa3 	bl	8015f6c <rclc_action_find_goal_handle_by_uuid>
 800c026:	4603      	mov	r3, r0
 800c028:	2800      	cmp	r0, #0
 800c02a:	f000 80a3 	beq.w	800c174 <_rclc_take_new_data+0x2d0>
 800c02e:	2201      	movs	r2, #1
 800c030:	6860      	ldr	r0, [r4, #4]
 800c032:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 800c036:	e7a6      	b.n	800bf86 <_rclc_take_new_data+0xe2>
 800c038:	f009 ff72 	bl	8015f20 <rclc_action_take_goal_handle>
 800c03c:	4606      	mov	r6, r0
 800c03e:	6860      	ldr	r0, [r4, #4]
 800c040:	2e00      	cmp	r6, #0
 800c042:	f43f af47 	beq.w	800bed4 <_rclc_take_new_data+0x30>
 800c046:	6070      	str	r0, [r6, #4]
 800c048:	69f2      	ldr	r2, [r6, #28]
 800c04a:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 800c04e:	3010      	adds	r0, #16
 800c050:	f009 fd26 	bl	8015aa0 <rcl_action_take_goal_request>
 800c054:	4605      	mov	r5, r0
 800c056:	2800      	cmp	r0, #0
 800c058:	f040 808e 	bne.w	800c178 <_rclc_take_new_data+0x2d4>
 800c05c:	69f7      	ldr	r7, [r6, #28]
 800c05e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800c060:	7235      	strb	r5, [r6, #8]
 800c062:	f8c6 0009 	str.w	r0, [r6, #9]
 800c066:	f8c6 100d 	str.w	r1, [r6, #13]
 800c06a:	6860      	ldr	r0, [r4, #4]
 800c06c:	f8c6 2011 	str.w	r2, [r6, #17]
 800c070:	f8c6 3015 	str.w	r3, [r6, #21]
 800c074:	e72e      	b.n	800bed4 <_rclc_take_new_data+0x30>
 800c076:	aa04      	add	r2, sp, #16
 800c078:	a90a      	add	r1, sp, #40	@ 0x28
 800c07a:	3010      	adds	r0, #16
 800c07c:	f009 fadc 	bl	8015638 <rcl_action_take_goal_response>
 800c080:	4605      	mov	r5, r0
 800c082:	2800      	cmp	r0, #0
 800c084:	f47f af71 	bne.w	800bf6a <_rclc_take_new_data+0xc6>
 800c088:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c08c:	6860      	ldr	r0, [r4, #4]
 800c08e:	f009 ff9d 	bl	8015fcc <rclc_action_find_handle_by_goal_request_sequence_number>
 800c092:	b130      	cbz	r0, 800c0a2 <_rclc_take_new_data+0x1fe>
 800c094:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800c098:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800c09c:	2201      	movs	r2, #1
 800c09e:	f880 2020 	strb.w	r2, [r0, #32]
 800c0a2:	6860      	ldr	r0, [r4, #4]
 800c0a4:	e769      	b.n	800bf7a <_rclc_take_new_data+0xd6>
 800c0a6:	aa04      	add	r2, sp, #16
 800c0a8:	3010      	adds	r0, #16
 800c0aa:	a90a      	add	r1, sp, #40	@ 0x28
 800c0ac:	f009 fd70 	bl	8015b90 <rcl_action_take_result_request>
 800c0b0:	4605      	mov	r5, r0
 800c0b2:	2800      	cmp	r0, #0
 800c0b4:	f47f af59 	bne.w	800bf6a <_rclc_take_new_data+0xc6>
 800c0b8:	6860      	ldr	r0, [r4, #4]
 800c0ba:	a904      	add	r1, sp, #16
 800c0bc:	f009 ff56 	bl	8015f6c <rclc_action_find_goal_handle_by_uuid>
 800c0c0:	4607      	mov	r7, r0
 800c0c2:	b160      	cbz	r0, 800c0de <_rclc_take_new_data+0x23a>
 800c0c4:	ad0a      	add	r5, sp, #40	@ 0x28
 800c0c6:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 800c0ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c0cc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800c0ce:	e895 0003 	ldmia.w	r5, {r0, r1}
 800c0d2:	f04f 0c02 	mov.w	ip, #2
 800c0d6:	e886 0003 	stmia.w	r6, {r0, r1}
 800c0da:	f887 c008 	strb.w	ip, [r7, #8]
 800c0de:	6860      	ldr	r0, [r4, #4]
 800c0e0:	2300      	movs	r3, #0
 800c0e2:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 800c0e6:	e6fa      	b.n	800bede <_rclc_take_new_data+0x3a>
 800c0e8:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 800c0ec:	a90a      	add	r1, sp, #40	@ 0x28
 800c0ee:	3010      	adds	r0, #16
 800c0f0:	f009 fb5a 	bl	80157a8 <rcl_action_take_cancel_response>
 800c0f4:	4605      	mov	r5, r0
 800c0f6:	2800      	cmp	r0, #0
 800c0f8:	f47f af37 	bne.w	800bf6a <_rclc_take_new_data+0xc6>
 800c0fc:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c100:	6860      	ldr	r0, [r4, #4]
 800c102:	f009 ff87 	bl	8016014 <rclc_action_find_handle_by_cancel_request_sequence_number>
 800c106:	4606      	mov	r6, r0
 800c108:	6860      	ldr	r0, [r4, #4]
 800c10a:	2e00      	cmp	r6, #0
 800c10c:	f43f af40 	beq.w	800bf90 <_rclc_take_new_data+0xec>
 800c110:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800c112:	2701      	movs	r7, #1
 800c114:	84b7      	strh	r7, [r6, #36]	@ 0x24
 800c116:	2b00      	cmp	r3, #0
 800c118:	f43f af3a 	beq.w	800bf90 <_rclc_take_new_data+0xec>
 800c11c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800c11e:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800c122:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800c126:	f009 ff21 	bl	8015f6c <rclc_action_find_goal_handle_by_uuid>
 800c12a:	b138      	cbz	r0, 800c13c <_rclc_take_new_data+0x298>
 800c12c:	6860      	ldr	r0, [r4, #4]
 800c12e:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800c130:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 800c134:	3501      	adds	r5, #1
 800c136:	42ab      	cmp	r3, r5
 800c138:	d8f0      	bhi.n	800c11c <_rclc_take_new_data+0x278>
 800c13a:	e729      	b.n	800bf90 <_rclc_take_new_data+0xec>
 800c13c:	6860      	ldr	r0, [r4, #4]
 800c13e:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800c140:	3501      	adds	r5, #1
 800c142:	42ab      	cmp	r3, r5
 800c144:	d8ea      	bhi.n	800c11c <_rclc_take_new_data+0x278>
 800c146:	e723      	b.n	800bf90 <_rclc_take_new_data+0xec>
 800c148:	ab06      	add	r3, sp, #24
 800c14a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c14c:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800c150:	2103      	movs	r1, #3
 800c152:	e896 000c 	ldmia.w	r6, {r2, r3}
 800c156:	6860      	ldr	r0, [r4, #4]
 800c158:	f009 ffd2 	bl	8016100 <rclc_action_server_goal_cancel_reject>
 800c15c:	e6c4      	b.n	800bee8 <_rclc_take_new_data+0x44>
 800c15e:	ab06      	add	r3, sp, #24
 800c160:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c162:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800c166:	2102      	movs	r1, #2
 800c168:	e896 000c 	ldmia.w	r6, {r2, r3}
 800c16c:	6860      	ldr	r0, [r4, #4]
 800c16e:	f009 ffc7 	bl	8016100 <rclc_action_server_goal_cancel_reject>
 800c172:	e6b9      	b.n	800bee8 <_rclc_take_new_data+0x44>
 800c174:	6860      	ldr	r0, [r4, #4]
 800c176:	e706      	b.n	800bf86 <_rclc_take_new_data+0xe2>
 800c178:	6860      	ldr	r0, [r4, #4]
 800c17a:	4631      	mov	r1, r6
 800c17c:	f009 fee0 	bl	8015f40 <rclc_action_remove_used_goal_handle>
 800c180:	f000 fe22 	bl	800cdc8 <rcutils_reset_error>
 800c184:	e6b0      	b.n	800bee8 <_rclc_take_new_data+0x44>
 800c186:	2501      	movs	r5, #1
 800c188:	e6ae      	b.n	800bee8 <_rclc_take_new_data+0x44>
 800c18a:	bf00      	nop

0800c18c <_rclc_execute.part.0>:
 800c18c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c18e:	7803      	ldrb	r3, [r0, #0]
 800c190:	b087      	sub	sp, #28
 800c192:	4604      	mov	r4, r0
 800c194:	2b0a      	cmp	r3, #10
 800c196:	f200 8136 	bhi.w	800c406 <_rclc_execute.part.0+0x27a>
 800c19a:	e8df f003 	tbb	[pc, r3]
 800c19e:	435e      	.short	0x435e
 800c1a0:	06a1664f 	.word	0x06a1664f
 800c1a4:	6c1e0606 	.word	0x6c1e0606
 800c1a8:	59          	.byte	0x59
 800c1a9:	00          	.byte	0x00
 800c1aa:	2b06      	cmp	r3, #6
 800c1ac:	f000 8122 	beq.w	800c3f4 <_rclc_execute.part.0+0x268>
 800c1b0:	2b07      	cmp	r3, #7
 800c1b2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800c1b4:	f040 8118 	bne.w	800c3e8 <_rclc_execute.part.0+0x25c>
 800c1b8:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	@ 0x28
 800c1bc:	6880      	ldr	r0, [r0, #8]
 800c1be:	4798      	blx	r3
 800c1c0:	f104 0110 	add.w	r1, r4, #16
 800c1c4:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800c1c6:	6860      	ldr	r0, [r4, #4]
 800c1c8:	f008 f8f4 	bl	80143b4 <rcl_send_response>
 800c1cc:	2800      	cmp	r0, #0
 800c1ce:	d033      	beq.n	800c238 <_rclc_execute.part.0+0xac>
 800c1d0:	9005      	str	r0, [sp, #20]
 800c1d2:	f000 fdf9 	bl	800cdc8 <rcutils_reset_error>
 800c1d6:	9805      	ldr	r0, [sp, #20]
 800c1d8:	e02e      	b.n	800c238 <_rclc_execute.part.0+0xac>
 800c1da:	6840      	ldr	r0, [r0, #4]
 800c1dc:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	f000 8086 	beq.w	800c2f2 <_rclc_execute.part.0+0x166>
 800c1e6:	2600      	movs	r6, #0
 800c1e8:	2701      	movs	r7, #1
 800c1ea:	e004      	b.n	800c1f6 <_rclc_execute.part.0+0x6a>
 800c1ec:	f009 fe72 	bl	8015ed4 <rclc_action_send_result_request>
 800c1f0:	b998      	cbnz	r0, 800c21a <_rclc_execute.part.0+0x8e>
 800c1f2:	722f      	strb	r7, [r5, #8]
 800c1f4:	6860      	ldr	r0, [r4, #4]
 800c1f6:	f009 ff1f 	bl	8016038 <rclc_action_find_first_handle_with_goal_response>
 800c1fa:	4605      	mov	r5, r0
 800c1fc:	2800      	cmp	r0, #0
 800c1fe:	d077      	beq.n	800c2f0 <_rclc_execute.part.0+0x164>
 800c200:	6863      	ldr	r3, [r4, #4]
 800c202:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800c204:	699b      	ldr	r3, [r3, #24]
 800c206:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 800c20a:	f885 6020 	strb.w	r6, [r5, #32]
 800c20e:	4798      	blx	r3
 800c210:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 800c214:	4628      	mov	r0, r5
 800c216:	2b00      	cmp	r3, #0
 800c218:	d1e8      	bne.n	800c1ec <_rclc_execute.part.0+0x60>
 800c21a:	6860      	ldr	r0, [r4, #4]
 800c21c:	4629      	mov	r1, r5
 800c21e:	f009 fe8f 	bl	8015f40 <rclc_action_remove_used_goal_handle>
 800c222:	e7e7      	b.n	800c1f4 <_rclc_execute.part.0+0x68>
 800c224:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800c228:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	@ 0x2c
 800c22c:	2d00      	cmp	r5, #0
 800c22e:	f000 80c9 	beq.w	800c3c4 <_rclc_execute.part.0+0x238>
 800c232:	6880      	ldr	r0, [r0, #8]
 800c234:	4798      	blx	r3
 800c236:	2000      	movs	r0, #0
 800c238:	b007      	add	sp, #28
 800c23a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c23c:	6840      	ldr	r0, [r0, #4]
 800c23e:	f008 fabb 	bl	80147b8 <rcl_timer_call>
 800c242:	f240 3321 	movw	r3, #801	@ 0x321
 800c246:	4298      	cmp	r0, r3
 800c248:	d004      	beq.n	800c254 <_rclc_execute.part.0+0xc8>
 800c24a:	2800      	cmp	r0, #0
 800c24c:	d0f4      	beq.n	800c238 <_rclc_execute.part.0+0xac>
 800c24e:	e7bf      	b.n	800c1d0 <_rclc_execute.part.0+0x44>
 800c250:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800c252:	4798      	blx	r3
 800c254:	2000      	movs	r0, #0
 800c256:	b007      	add	sp, #28
 800c258:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c25a:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800c25e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800c260:	b925      	cbnz	r5, 800c26c <_rclc_execute.part.0+0xe0>
 800c262:	4628      	mov	r0, r5
 800c264:	4798      	blx	r3
 800c266:	4628      	mov	r0, r5
 800c268:	e7e6      	b.n	800c238 <_rclc_execute.part.0+0xac>
 800c26a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800c26c:	68a0      	ldr	r0, [r4, #8]
 800c26e:	4798      	blx	r3
 800c270:	2000      	movs	r0, #0
 800c272:	b007      	add	sp, #28
 800c274:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c276:	6840      	ldr	r0, [r0, #4]
 800c278:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800c27c:	bb3b      	cbnz	r3, 800c2ce <_rclc_execute.part.0+0x142>
 800c27e:	f890 3020 	ldrb.w	r3, [r0, #32]
 800c282:	2b00      	cmp	r3, #0
 800c284:	d07b      	beq.n	800c37e <_rclc_execute.part.0+0x1f2>
 800c286:	f640 0634 	movw	r6, #2100	@ 0x834
 800c28a:	2701      	movs	r7, #1
 800c28c:	e007      	b.n	800c29e <_rclc_execute.part.0+0x112>
 800c28e:	4628      	mov	r0, r5
 800c290:	f009 feea 	bl	8016068 <rclc_action_server_response_goal_request>
 800c294:	6860      	ldr	r0, [r4, #4]
 800c296:	4629      	mov	r1, r5
 800c298:	f009 fe52 	bl	8015f40 <rclc_action_remove_used_goal_handle>
 800c29c:	6860      	ldr	r0, [r4, #4]
 800c29e:	2100      	movs	r1, #0
 800c2a0:	f009 fe7c 	bl	8015f9c <rclc_action_find_first_handle_by_status>
 800c2a4:	4605      	mov	r5, r0
 800c2a6:	2800      	cmp	r0, #0
 800c2a8:	d066      	beq.n	800c378 <_rclc_execute.part.0+0x1ec>
 800c2aa:	6863      	ldr	r3, [r4, #4]
 800c2ac:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800c2ae:	699b      	ldr	r3, [r3, #24]
 800c2b0:	4798      	blx	r3
 800c2b2:	42b0      	cmp	r0, r6
 800c2b4:	f04f 0100 	mov.w	r1, #0
 800c2b8:	d1e9      	bne.n	800c28e <_rclc_execute.part.0+0x102>
 800c2ba:	2101      	movs	r1, #1
 800c2bc:	4628      	mov	r0, r5
 800c2be:	f009 fed3 	bl	8016068 <rclc_action_server_response_goal_request>
 800c2c2:	722f      	strb	r7, [r5, #8]
 800c2c4:	e7ea      	b.n	800c29c <_rclc_execute.part.0+0x110>
 800c2c6:	6848      	ldr	r0, [r1, #4]
 800c2c8:	f009 fe3a 	bl	8015f40 <rclc_action_remove_used_goal_handle>
 800c2cc:	6860      	ldr	r0, [r4, #4]
 800c2ce:	f009 fe71 	bl	8015fb4 <rclc_action_find_first_terminated_handle>
 800c2d2:	4601      	mov	r1, r0
 800c2d4:	2800      	cmp	r0, #0
 800c2d6:	d1f6      	bne.n	800c2c6 <_rclc_execute.part.0+0x13a>
 800c2d8:	6860      	ldr	r0, [r4, #4]
 800c2da:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 800c2de:	e7ce      	b.n	800c27e <_rclc_execute.part.0+0xf2>
 800c2e0:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800c2e2:	6880      	ldr	r0, [r0, #8]
 800c2e4:	f104 0110 	add.w	r1, r4, #16
 800c2e8:	4798      	blx	r3
 800c2ea:	2000      	movs	r0, #0
 800c2ec:	b007      	add	sp, #28
 800c2ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c2f0:	6860      	ldr	r0, [r4, #4]
 800c2f2:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800c2f6:	b18b      	cbz	r3, 800c31c <_rclc_execute.part.0+0x190>
 800c2f8:	68c5      	ldr	r5, [r0, #12]
 800c2fa:	b32d      	cbz	r5, 800c348 <_rclc_execute.part.0+0x1bc>
 800c2fc:	2600      	movs	r6, #0
 800c2fe:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 800c302:	b143      	cbz	r3, 800c316 <_rclc_execute.part.0+0x18a>
 800c304:	69c3      	ldr	r3, [r0, #28]
 800c306:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 800c30a:	b123      	cbz	r3, 800c316 <_rclc_execute.part.0+0x18a>
 800c30c:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800c30e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800c310:	4628      	mov	r0, r5
 800c312:	4798      	blx	r3
 800c314:	6860      	ldr	r0, [r4, #4]
 800c316:	682d      	ldr	r5, [r5, #0]
 800c318:	2d00      	cmp	r5, #0
 800c31a:	d1f0      	bne.n	800c2fe <_rclc_execute.part.0+0x172>
 800c31c:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800c320:	b193      	cbz	r3, 800c348 <_rclc_execute.part.0+0x1bc>
 800c322:	68c5      	ldr	r5, [r0, #12]
 800c324:	b185      	cbz	r5, 800c348 <_rclc_execute.part.0+0x1bc>
 800c326:	2600      	movs	r6, #0
 800c328:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 800c32c:	b14b      	cbz	r3, 800c342 <_rclc_execute.part.0+0x1b6>
 800c32e:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800c330:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 800c334:	b12b      	cbz	r3, 800c342 <_rclc_execute.part.0+0x1b6>
 800c336:	4628      	mov	r0, r5
 800c338:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 800c33c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800c33e:	4798      	blx	r3
 800c340:	6860      	ldr	r0, [r4, #4]
 800c342:	682d      	ldr	r5, [r5, #0]
 800c344:	2d00      	cmp	r5, #0
 800c346:	d1ef      	bne.n	800c328 <_rclc_execute.part.0+0x19c>
 800c348:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d081      	beq.n	800c254 <_rclc_execute.part.0+0xc8>
 800c350:	2700      	movs	r7, #0
 800c352:	e00b      	b.n	800c36c <_rclc_execute.part.0+0x1e0>
 800c354:	6863      	ldr	r3, [r4, #4]
 800c356:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800c358:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800c35a:	6a1e      	ldr	r6, [r3, #32]
 800c35c:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 800c360:	47b0      	blx	r6
 800c362:	6860      	ldr	r0, [r4, #4]
 800c364:	4629      	mov	r1, r5
 800c366:	f009 fdeb 	bl	8015f40 <rclc_action_remove_used_goal_handle>
 800c36a:	6860      	ldr	r0, [r4, #4]
 800c36c:	f009 fe70 	bl	8016050 <rclc_action_find_first_handle_with_result_response>
 800c370:	4605      	mov	r5, r0
 800c372:	2800      	cmp	r0, #0
 800c374:	d1ee      	bne.n	800c354 <_rclc_execute.part.0+0x1c8>
 800c376:	e76d      	b.n	800c254 <_rclc_execute.part.0+0xc8>
 800c378:	6860      	ldr	r0, [r4, #4]
 800c37a:	f880 5020 	strb.w	r5, [r0, #32]
 800c37e:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800c382:	2b00      	cmp	r3, #0
 800c384:	f43f af66 	beq.w	800c254 <_rclc_execute.part.0+0xc8>
 800c388:	68c5      	ldr	r5, [r0, #12]
 800c38a:	b1b5      	cbz	r5, 800c3ba <_rclc_execute.part.0+0x22e>
 800c38c:	2602      	movs	r6, #2
 800c38e:	e001      	b.n	800c394 <_rclc_execute.part.0+0x208>
 800c390:	682d      	ldr	r5, [r5, #0]
 800c392:	b195      	cbz	r5, 800c3ba <_rclc_execute.part.0+0x22e>
 800c394:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800c398:	2b03      	cmp	r3, #3
 800c39a:	d1f9      	bne.n	800c390 <_rclc_execute.part.0+0x204>
 800c39c:	69c3      	ldr	r3, [r0, #28]
 800c39e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800c3a0:	4628      	mov	r0, r5
 800c3a2:	4798      	blx	r3
 800c3a4:	4603      	mov	r3, r0
 800c3a6:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 800c3aa:	4628      	mov	r0, r5
 800c3ac:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 800c3b0:	b163      	cbz	r3, 800c3cc <_rclc_execute.part.0+0x240>
 800c3b2:	f009 fe79 	bl	80160a8 <rclc_action_server_goal_cancel_accept>
 800c3b6:	6860      	ldr	r0, [r4, #4]
 800c3b8:	e7ea      	b.n	800c390 <_rclc_execute.part.0+0x204>
 800c3ba:	2300      	movs	r3, #0
 800c3bc:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800c3c0:	4618      	mov	r0, r3
 800c3c2:	e739      	b.n	800c238 <_rclc_execute.part.0+0xac>
 800c3c4:	4628      	mov	r0, r5
 800c3c6:	4798      	blx	r3
 800c3c8:	4628      	mov	r0, r5
 800c3ca:	e735      	b.n	800c238 <_rclc_execute.part.0+0xac>
 800c3cc:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800c3ce:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800c3d2:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 800c3d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c3da:	6860      	ldr	r0, [r4, #4]
 800c3dc:	2101      	movs	r1, #1
 800c3de:	f009 fe8f 	bl	8016100 <rclc_action_server_goal_cancel_reject>
 800c3e2:	722e      	strb	r6, [r5, #8]
 800c3e4:	6860      	ldr	r0, [r4, #4]
 800c3e6:	e7d3      	b.n	800c390 <_rclc_execute.part.0+0x204>
 800c3e8:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800c3ea:	6880      	ldr	r0, [r0, #8]
 800c3ec:	4798      	blx	r3
 800c3ee:	f104 0110 	add.w	r1, r4, #16
 800c3f2:	e6e7      	b.n	800c1c4 <_rclc_execute.part.0+0x38>
 800c3f4:	f100 0110 	add.w	r1, r0, #16
 800c3f8:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800c3fa:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 800c3fc:	6880      	ldr	r0, [r0, #8]
 800c3fe:	9105      	str	r1, [sp, #20]
 800c400:	4798      	blx	r3
 800c402:	9905      	ldr	r1, [sp, #20]
 800c404:	e6de      	b.n	800c1c4 <_rclc_execute.part.0+0x38>
 800c406:	2001      	movs	r0, #1
 800c408:	e716      	b.n	800c238 <_rclc_execute.part.0+0xac>
 800c40a:	bf00      	nop

0800c40c <rclc_executor_trigger_any>:
 800c40c:	2800      	cmp	r0, #0
 800c40e:	d03f      	beq.n	800c490 <rclc_executor_trigger_any+0x84>
 800c410:	2900      	cmp	r1, #0
 800c412:	d03e      	beq.n	800c492 <rclc_executor_trigger_any+0x86>
 800c414:	4603      	mov	r3, r0
 800c416:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 800c41a:	2200      	movs	r2, #0
 800c41c:	2800      	cmp	r0, #0
 800c41e:	d037      	beq.n	800c490 <rclc_executor_trigger_any+0x84>
 800c420:	b430      	push	{r4, r5}
 800c422:	f893 c000 	ldrb.w	ip, [r3]
 800c426:	f1bc 0f08 	cmp.w	ip, #8
 800c42a:	d11e      	bne.n	800c46a <rclc_executor_trigger_any+0x5e>
 800c42c:	685c      	ldr	r4, [r3, #4]
 800c42e:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 800c430:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 800c434:	d105      	bne.n	800c442 <rclc_executor_trigger_any+0x36>
 800c436:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 800c43a:	b910      	cbnz	r0, 800c442 <rclc_executor_trigger_any+0x36>
 800c43c:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 800c440:	b128      	cbz	r0, 800c44e <rclc_executor_trigger_any+0x42>
 800c442:	bc30      	pop	{r4, r5}
 800c444:	4770      	bx	lr
 800c446:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 800c44a:	2800      	cmp	r0, #0
 800c44c:	d1f9      	bne.n	800c442 <rclc_executor_trigger_any+0x36>
 800c44e:	3201      	adds	r2, #1
 800c450:	4291      	cmp	r1, r2
 800c452:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800c456:	d018      	beq.n	800c48a <rclc_executor_trigger_any+0x7e>
 800c458:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 800c45c:	2800      	cmp	r0, #0
 800c45e:	d0f0      	beq.n	800c442 <rclc_executor_trigger_any+0x36>
 800c460:	f893 c000 	ldrb.w	ip, [r3]
 800c464:	f1bc 0f08 	cmp.w	ip, #8
 800c468:	d0e0      	beq.n	800c42c <rclc_executor_trigger_any+0x20>
 800c46a:	f1bc 0f09 	cmp.w	ip, #9
 800c46e:	d1ea      	bne.n	800c446 <rclc_executor_trigger_any+0x3a>
 800c470:	685c      	ldr	r4, [r3, #4]
 800c472:	6a25      	ldr	r5, [r4, #32]
 800c474:	2d00      	cmp	r5, #0
 800c476:	d1e4      	bne.n	800c442 <rclc_executor_trigger_any+0x36>
 800c478:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 800c47c:	2800      	cmp	r0, #0
 800c47e:	d1e0      	bne.n	800c442 <rclc_executor_trigger_any+0x36>
 800c480:	3201      	adds	r2, #1
 800c482:	4291      	cmp	r1, r2
 800c484:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800c488:	d1e6      	bne.n	800c458 <rclc_executor_trigger_any+0x4c>
 800c48a:	2000      	movs	r0, #0
 800c48c:	bc30      	pop	{r4, r5}
 800c48e:	4770      	bx	lr
 800c490:	4770      	bx	lr
 800c492:	4608      	mov	r0, r1
 800c494:	4770      	bx	lr
 800c496:	bf00      	nop

0800c498 <rclc_executor_get_zero_initialized_executor>:
 800c498:	b510      	push	{r4, lr}
 800c49a:	4903      	ldr	r1, [pc, #12]	@ (800c4a8 <rclc_executor_get_zero_initialized_executor+0x10>)
 800c49c:	4604      	mov	r4, r0
 800c49e:	2288      	movs	r2, #136	@ 0x88
 800c4a0:	f00f f801 	bl	801b4a6 <memcpy>
 800c4a4:	4620      	mov	r0, r4
 800c4a6:	bd10      	pop	{r4, pc}
 800c4a8:	0801d810 	.word	0x0801d810
 800c4ac:	00000000 	.word	0x00000000

0800c4b0 <rclc_executor_init>:
 800c4b0:	2800      	cmp	r0, #0
 800c4b2:	d05f      	beq.n	800c574 <rclc_executor_init+0xc4>
 800c4b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c4b8:	460c      	mov	r4, r1
 800c4ba:	b0b0      	sub	sp, #192	@ 0xc0
 800c4bc:	2900      	cmp	r1, #0
 800c4be:	d051      	beq.n	800c564 <rclc_executor_init+0xb4>
 800c4c0:	4605      	mov	r5, r0
 800c4c2:	4618      	mov	r0, r3
 800c4c4:	4616      	mov	r6, r2
 800c4c6:	461f      	mov	r7, r3
 800c4c8:	f000 fc5a 	bl	800cd80 <rcutils_allocator_is_valid>
 800c4cc:	2800      	cmp	r0, #0
 800c4ce:	d049      	beq.n	800c564 <rclc_executor_init+0xb4>
 800c4d0:	2e00      	cmp	r6, #0
 800c4d2:	d047      	beq.n	800c564 <rclc_executor_init+0xb4>
 800c4d4:	492c      	ldr	r1, [pc, #176]	@ (800c588 <rclc_executor_init+0xd8>)
 800c4d6:	2288      	movs	r2, #136	@ 0x88
 800c4d8:	a80e      	add	r0, sp, #56	@ 0x38
 800c4da:	f00e ffe4 	bl	801b4a6 <memcpy>
 800c4de:	a90e      	add	r1, sp, #56	@ 0x38
 800c4e0:	2288      	movs	r2, #136	@ 0x88
 800c4e2:	4628      	mov	r0, r5
 800c4e4:	f00e ffdf 	bl	801b4a6 <memcpy>
 800c4e8:	602c      	str	r4, [r5, #0]
 800c4ea:	4668      	mov	r0, sp
 800c4ec:	60ae      	str	r6, [r5, #8]
 800c4ee:	466c      	mov	r4, sp
 800c4f0:	f008 fad4 	bl	8014a9c <rcl_get_zero_initialized_wait_set>
 800c4f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c4f6:	f105 0c14 	add.w	ip, r5, #20
 800c4fa:	f8d7 8000 	ldr.w	r8, [r7]
 800c4fe:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c502:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c504:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c508:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c50a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c50e:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800c580 <rclc_executor_init+0xd0>
 800c512:	6823      	ldr	r3, [r4, #0]
 800c514:	f8cc 3000 	str.w	r3, [ip]
 800c518:	6939      	ldr	r1, [r7, #16]
 800c51a:	612f      	str	r7, [r5, #16]
 800c51c:	ed85 7b1a 	vstr	d7, [r5, #104]	@ 0x68
 800c520:	01b0      	lsls	r0, r6, #6
 800c522:	47c0      	blx	r8
 800c524:	6068      	str	r0, [r5, #4]
 800c526:	b338      	cbz	r0, 800c578 <rclc_executor_init+0xc8>
 800c528:	2400      	movs	r4, #0
 800c52a:	e000      	b.n	800c52e <rclc_executor_init+0x7e>
 800c52c:	6868      	ldr	r0, [r5, #4]
 800c52e:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800c532:	4631      	mov	r1, r6
 800c534:	3401      	adds	r4, #1
 800c536:	f000 faa7 	bl	800ca88 <rclc_executor_handle_init>
 800c53a:	42a6      	cmp	r6, r4
 800c53c:	d1f6      	bne.n	800c52c <rclc_executor_init+0x7c>
 800c53e:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 800c542:	f000 fa95 	bl	800ca70 <rclc_executor_handle_counters_zero_init>
 800c546:	4a11      	ldr	r2, [pc, #68]	@ (800c58c <rclc_executor_init+0xdc>)
 800c548:	686b      	ldr	r3, [r5, #4]
 800c54a:	2000      	movs	r0, #0
 800c54c:	e9c5 201e 	strd	r2, r0, [r5, #120]	@ 0x78
 800c550:	b163      	cbz	r3, 800c56c <rclc_executor_init+0xbc>
 800c552:	692b      	ldr	r3, [r5, #16]
 800c554:	b153      	cbz	r3, 800c56c <rclc_executor_init+0xbc>
 800c556:	68ab      	ldr	r3, [r5, #8]
 800c558:	b143      	cbz	r3, 800c56c <rclc_executor_init+0xbc>
 800c55a:	f885 0080 	strb.w	r0, [r5, #128]	@ 0x80
 800c55e:	b030      	add	sp, #192	@ 0xc0
 800c560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c564:	200b      	movs	r0, #11
 800c566:	b030      	add	sp, #192	@ 0xc0
 800c568:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c56c:	4618      	mov	r0, r3
 800c56e:	b030      	add	sp, #192	@ 0xc0
 800c570:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c574:	200b      	movs	r0, #11
 800c576:	4770      	bx	lr
 800c578:	200a      	movs	r0, #10
 800c57a:	e7f4      	b.n	800c566 <rclc_executor_init+0xb6>
 800c57c:	f3af 8000 	nop.w
 800c580:	3b9aca00 	.word	0x3b9aca00
 800c584:	00000000 	.word	0x00000000
 800c588:	0801d810 	.word	0x0801d810
 800c58c:	0800c40d 	.word	0x0800c40d

0800c590 <rclc_executor_add_subscription>:
 800c590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c592:	f89d e018 	ldrb.w	lr, [sp, #24]
 800c596:	b338      	cbz	r0, 800c5e8 <rclc_executor_add_subscription+0x58>
 800c598:	b331      	cbz	r1, 800c5e8 <rclc_executor_add_subscription+0x58>
 800c59a:	b32a      	cbz	r2, 800c5e8 <rclc_executor_add_subscription+0x58>
 800c59c:	b323      	cbz	r3, 800c5e8 <rclc_executor_add_subscription+0x58>
 800c59e:	4604      	mov	r4, r0
 800c5a0:	e9d0 5002 	ldrd	r5, r0, [r0, #8]
 800c5a4:	42a8      	cmp	r0, r5
 800c5a6:	d301      	bcc.n	800c5ac <rclc_executor_add_subscription+0x1c>
 800c5a8:	2001      	movs	r0, #1
 800c5aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c5ac:	6866      	ldr	r6, [r4, #4]
 800c5ae:	0187      	lsls	r7, r0, #6
 800c5b0:	eb06 1c80 	add.w	ip, r6, r0, lsl #6
 800c5b4:	2500      	movs	r5, #0
 800c5b6:	55f5      	strb	r5, [r6, r7]
 800c5b8:	3001      	adds	r0, #1
 800c5ba:	f8cc 3030 	str.w	r3, [ip, #48]	@ 0x30
 800c5be:	f8cc 502c 	str.w	r5, [ip, #44]	@ 0x2c
 800c5c2:	2301      	movs	r3, #1
 800c5c4:	f104 0514 	add.w	r5, r4, #20
 800c5c8:	e9cc 1201 	strd	r1, r2, [ip, #4]
 800c5cc:	f88c e001 	strb.w	lr, [ip, #1]
 800c5d0:	f8ac 3038 	strh.w	r3, [ip, #56]	@ 0x38
 800c5d4:	60e0      	str	r0, [r4, #12]
 800c5d6:	4628      	mov	r0, r5
 800c5d8:	f008 fa74 	bl	8014ac4 <rcl_wait_set_is_valid>
 800c5dc:	b930      	cbnz	r0, 800c5ec <rclc_executor_add_subscription+0x5c>
 800c5de:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800c5e0:	3301      	adds	r3, #1
 800c5e2:	2000      	movs	r0, #0
 800c5e4:	64a3      	str	r3, [r4, #72]	@ 0x48
 800c5e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c5e8:	200b      	movs	r0, #11
 800c5ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c5ec:	4628      	mov	r0, r5
 800c5ee:	f008 fa6f 	bl	8014ad0 <rcl_wait_set_fini>
 800c5f2:	2800      	cmp	r0, #0
 800c5f4:	d0f3      	beq.n	800c5de <rclc_executor_add_subscription+0x4e>
 800c5f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c5f8 <rclc_executor_add_service>:
 800c5f8:	b370      	cbz	r0, 800c658 <rclc_executor_add_service+0x60>
 800c5fa:	b369      	cbz	r1, 800c658 <rclc_executor_add_service+0x60>
 800c5fc:	b362      	cbz	r2, 800c658 <rclc_executor_add_service+0x60>
 800c5fe:	b35b      	cbz	r3, 800c658 <rclc_executor_add_service+0x60>
 800c600:	b538      	push	{r3, r4, r5, lr}
 800c602:	4604      	mov	r4, r0
 800c604:	9804      	ldr	r0, [sp, #16]
 800c606:	b378      	cbz	r0, 800c668 <rclc_executor_add_service+0x70>
 800c608:	e9d4 5002 	ldrd	r5, r0, [r4, #8]
 800c60c:	42a8      	cmp	r0, r5
 800c60e:	d301      	bcc.n	800c614 <rclc_executor_add_service+0x1c>
 800c610:	2001      	movs	r0, #1
 800c612:	bd38      	pop	{r3, r4, r5, pc}
 800c614:	6865      	ldr	r5, [r4, #4]
 800c616:	eb05 1c80 	add.w	ip, r5, r0, lsl #6
 800c61a:	ea4f 1e80 	mov.w	lr, r0, lsl #6
 800c61e:	f8cc 3028 	str.w	r3, [ip, #40]	@ 0x28
 800c622:	9b04      	ldr	r3, [sp, #16]
 800c624:	f8cc 3030 	str.w	r3, [ip, #48]	@ 0x30
 800c628:	2305      	movs	r3, #5
 800c62a:	e9cc 1201 	strd	r1, r2, [ip, #4]
 800c62e:	3001      	adds	r0, #1
 800c630:	f825 300e 	strh.w	r3, [r5, lr]
 800c634:	2201      	movs	r2, #1
 800c636:	2300      	movs	r3, #0
 800c638:	f104 0514 	add.w	r5, r4, #20
 800c63c:	f88c 2038 	strb.w	r2, [ip, #56]	@ 0x38
 800c640:	f8cc 302c 	str.w	r3, [ip, #44]	@ 0x2c
 800c644:	60e0      	str	r0, [r4, #12]
 800c646:	4628      	mov	r0, r5
 800c648:	f008 fa3c 	bl	8014ac4 <rcl_wait_set_is_valid>
 800c64c:	b930      	cbnz	r0, 800c65c <rclc_executor_add_service+0x64>
 800c64e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800c650:	3301      	adds	r3, #1
 800c652:	2000      	movs	r0, #0
 800c654:	6563      	str	r3, [r4, #84]	@ 0x54
 800c656:	bd38      	pop	{r3, r4, r5, pc}
 800c658:	200b      	movs	r0, #11
 800c65a:	4770      	bx	lr
 800c65c:	4628      	mov	r0, r5
 800c65e:	f008 fa37 	bl	8014ad0 <rcl_wait_set_fini>
 800c662:	2800      	cmp	r0, #0
 800c664:	d0f3      	beq.n	800c64e <rclc_executor_add_service+0x56>
 800c666:	e7d4      	b.n	800c612 <rclc_executor_add_service+0x1a>
 800c668:	200b      	movs	r0, #11
 800c66a:	bd38      	pop	{r3, r4, r5, pc}

0800c66c <rclc_executor_prepare>:
 800c66c:	2800      	cmp	r0, #0
 800c66e:	d044      	beq.n	800c6fa <rclc_executor_prepare+0x8e>
 800c670:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c672:	f100 0514 	add.w	r5, r0, #20
 800c676:	b09b      	sub	sp, #108	@ 0x6c
 800c678:	4604      	mov	r4, r0
 800c67a:	4628      	mov	r0, r5
 800c67c:	f008 fa22 	bl	8014ac4 <rcl_wait_set_is_valid>
 800c680:	b110      	cbz	r0, 800c688 <rclc_executor_prepare+0x1c>
 800c682:	2000      	movs	r0, #0
 800c684:	b01b      	add	sp, #108	@ 0x6c
 800c686:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c688:	4628      	mov	r0, r5
 800c68a:	f008 fa21 	bl	8014ad0 <rcl_wait_set_fini>
 800c68e:	2800      	cmp	r0, #0
 800c690:	d130      	bne.n	800c6f4 <rclc_executor_prepare+0x88>
 800c692:	a80c      	add	r0, sp, #48	@ 0x30
 800c694:	f008 fa02 	bl	8014a9c <rcl_get_zero_initialized_wait_set>
 800c698:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800c69c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c6a0:	46ae      	mov	lr, r5
 800c6a2:	6927      	ldr	r7, [r4, #16]
 800c6a4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c6a8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c6ac:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c6b0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c6b4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c6b8:	f8dc 3000 	ldr.w	r3, [ip]
 800c6bc:	f8ce 3000 	str.w	r3, [lr]
 800c6c0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800c6c2:	ae04      	add	r6, sp, #16
 800c6c4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800c6c6:	683b      	ldr	r3, [r7, #0]
 800c6c8:	6822      	ldr	r2, [r4, #0]
 800c6ca:	6033      	str	r3, [r6, #0]
 800c6cc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c6ce:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 800c6d0:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800c6d4:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	@ 0x4c
 800c6d8:	e9cd 2100 	strd	r2, r1, [sp]
 800c6dc:	4628      	mov	r0, r5
 800c6de:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 800c6e0:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800c6e2:	f008 fcf3 	bl	80150cc <rcl_wait_set_init>
 800c6e6:	2800      	cmp	r0, #0
 800c6e8:	d0cc      	beq.n	800c684 <rclc_executor_prepare+0x18>
 800c6ea:	900b      	str	r0, [sp, #44]	@ 0x2c
 800c6ec:	f000 fb6c 	bl	800cdc8 <rcutils_reset_error>
 800c6f0:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800c6f2:	e7c7      	b.n	800c684 <rclc_executor_prepare+0x18>
 800c6f4:	f000 fb68 	bl	800cdc8 <rcutils_reset_error>
 800c6f8:	e7cb      	b.n	800c692 <rclc_executor_prepare+0x26>
 800c6fa:	200b      	movs	r0, #11
 800c6fc:	4770      	bx	lr
 800c6fe:	bf00      	nop

0800c700 <rclc_executor_spin_some.part.0>:
 800c700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c704:	f100 0614 	add.w	r6, r0, #20
 800c708:	b083      	sub	sp, #12
 800c70a:	4691      	mov	r9, r2
 800c70c:	4698      	mov	r8, r3
 800c70e:	4605      	mov	r5, r0
 800c710:	f7ff ffac 	bl	800c66c <rclc_executor_prepare>
 800c714:	4630      	mov	r0, r6
 800c716:	f008 faa7 	bl	8014c68 <rcl_wait_set_clear>
 800c71a:	4607      	mov	r7, r0
 800c71c:	2800      	cmp	r0, #0
 800c71e:	f040 80ed 	bne.w	800c8fc <rclc_executor_spin_some.part.0+0x1fc>
 800c722:	68ab      	ldr	r3, [r5, #8]
 800c724:	4604      	mov	r4, r0
 800c726:	b303      	cbz	r3, 800c76a <rclc_executor_spin_some.part.0+0x6a>
 800c728:	6869      	ldr	r1, [r5, #4]
 800c72a:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 800c72e:	01a2      	lsls	r2, r4, #6
 800c730:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 800c734:	b1cb      	cbz	r3, 800c76a <rclc_executor_spin_some.part.0+0x6a>
 800c736:	5c8b      	ldrb	r3, [r1, r2]
 800c738:	2b0a      	cmp	r3, #10
 800c73a:	f200 80d8 	bhi.w	800c8ee <rclc_executor_spin_some.part.0+0x1ee>
 800c73e:	e8df f003 	tbb	[pc, r3]
 800c742:	9c9c      	.short	0x9c9c
 800c744:	068c8ca7 	.word	0x068c8ca7
 800c748:	bdc90606 	.word	0xbdc90606
 800c74c:	b2          	.byte	0xb2
 800c74d:	00          	.byte	0x00
 800c74e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800c752:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800c756:	4630      	mov	r0, r6
 800c758:	f008 fdce 	bl	80152f8 <rcl_wait_set_add_service>
 800c75c:	2800      	cmp	r0, #0
 800c75e:	f040 8086 	bne.w	800c86e <rclc_executor_spin_some.part.0+0x16e>
 800c762:	68ab      	ldr	r3, [r5, #8]
 800c764:	3401      	adds	r4, #1
 800c766:	429c      	cmp	r4, r3
 800c768:	d3de      	bcc.n	800c728 <rclc_executor_spin_some.part.0+0x28>
 800c76a:	4643      	mov	r3, r8
 800c76c:	464a      	mov	r2, r9
 800c76e:	4630      	mov	r0, r6
 800c770:	f008 fdee 	bl	8015350 <rcl_wait>
 800c774:	f895 3080 	ldrb.w	r3, [r5, #128]	@ 0x80
 800c778:	2b00      	cmp	r3, #0
 800c77a:	f000 80c7 	beq.w	800c90c <rclc_executor_spin_some.part.0+0x20c>
 800c77e:	2b01      	cmp	r3, #1
 800c780:	f040 80b5 	bne.w	800c8ee <rclc_executor_spin_some.part.0+0x1ee>
 800c784:	68ab      	ldr	r3, [r5, #8]
 800c786:	2b00      	cmp	r3, #0
 800c788:	f000 8159 	beq.w	800ca3e <rclc_executor_spin_some.part.0+0x33e>
 800c78c:	2400      	movs	r4, #0
 800c78e:	46a0      	mov	r8, r4
 800c790:	f240 1991 	movw	r9, #401	@ 0x191
 800c794:	e00a      	b.n	800c7ac <rclc_executor_spin_some.part.0+0xac>
 800c796:	f7ff fb37 	bl	800be08 <_rclc_check_for_new_data>
 800c79a:	4604      	mov	r4, r0
 800c79c:	b110      	cbz	r0, 800c7a4 <rclc_executor_spin_some.part.0+0xa4>
 800c79e:	4548      	cmp	r0, r9
 800c7a0:	f040 80b2 	bne.w	800c908 <rclc_executor_spin_some.part.0+0x208>
 800c7a4:	68ab      	ldr	r3, [r5, #8]
 800c7a6:	4598      	cmp	r8, r3
 800c7a8:	f080 8126 	bcs.w	800c9f8 <rclc_executor_spin_some.part.0+0x2f8>
 800c7ac:	686a      	ldr	r2, [r5, #4]
 800c7ae:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800c7b2:	4631      	mov	r1, r6
 800c7b4:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800c7b8:	f108 0801 	add.w	r8, r8, #1
 800c7bc:	f1bc 0f00 	cmp.w	ip, #0
 800c7c0:	d1e9      	bne.n	800c796 <rclc_executor_spin_some.part.0+0x96>
 800c7c2:	4619      	mov	r1, r3
 800c7c4:	4610      	mov	r0, r2
 800c7c6:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800c7ca:	4798      	blx	r3
 800c7cc:	2800      	cmp	r0, #0
 800c7ce:	f000 809b 	beq.w	800c908 <rclc_executor_spin_some.part.0+0x208>
 800c7d2:	68ab      	ldr	r3, [r5, #8]
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	f000 8097 	beq.w	800c908 <rclc_executor_spin_some.part.0+0x208>
 800c7da:	f04f 0800 	mov.w	r8, #0
 800c7de:	f240 1991 	movw	r9, #401	@ 0x191
 800c7e2:	e009      	b.n	800c7f8 <rclc_executor_spin_some.part.0+0xf8>
 800c7e4:	f7ff fb5e 	bl	800bea4 <_rclc_take_new_data>
 800c7e8:	4604      	mov	r4, r0
 800c7ea:	b110      	cbz	r0, 800c7f2 <rclc_executor_spin_some.part.0+0xf2>
 800c7ec:	4548      	cmp	r0, r9
 800c7ee:	f040 808b 	bne.w	800c908 <rclc_executor_spin_some.part.0+0x208>
 800c7f2:	68ab      	ldr	r3, [r5, #8]
 800c7f4:	4598      	cmp	r8, r3
 800c7f6:	d209      	bcs.n	800c80c <rclc_executor_spin_some.part.0+0x10c>
 800c7f8:	6868      	ldr	r0, [r5, #4]
 800c7fa:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800c7fe:	4631      	mov	r1, r6
 800c800:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 800c804:	f108 0801 	add.w	r8, r8, #1
 800c808:	2a00      	cmp	r2, #0
 800c80a:	d1eb      	bne.n	800c7e4 <rclc_executor_spin_some.part.0+0xe4>
 800c80c:	2600      	movs	r6, #0
 800c80e:	b97b      	cbnz	r3, 800c830 <rclc_executor_spin_some.part.0+0x130>
 800c810:	e07a      	b.n	800c908 <rclc_executor_spin_some.part.0+0x208>
 800c812:	f812 200c 	ldrb.w	r2, [r2, ip]
 800c816:	2a08      	cmp	r2, #8
 800c818:	f000 80fd 	beq.w	800ca16 <rclc_executor_spin_some.part.0+0x316>
 800c81c:	2a09      	cmp	r2, #9
 800c81e:	f000 80ef 	beq.w	800ca00 <rclc_executor_spin_some.part.0+0x300>
 800c822:	f890 2039 	ldrb.w	r2, [r0, #57]	@ 0x39
 800c826:	b98a      	cbnz	r2, 800c84c <rclc_executor_spin_some.part.0+0x14c>
 800c828:	3601      	adds	r6, #1
 800c82a:	429e      	cmp	r6, r3
 800c82c:	d262      	bcs.n	800c8f4 <rclc_executor_spin_some.part.0+0x1f4>
 800c82e:	2400      	movs	r4, #0
 800c830:	686a      	ldr	r2, [r5, #4]
 800c832:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800c836:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 800c83a:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
 800c83e:	2900      	cmp	r1, #0
 800c840:	d062      	beq.n	800c908 <rclc_executor_spin_some.part.0+0x208>
 800c842:	7841      	ldrb	r1, [r0, #1]
 800c844:	2900      	cmp	r1, #0
 800c846:	d0e4      	beq.n	800c812 <rclc_executor_spin_some.part.0+0x112>
 800c848:	2901      	cmp	r1, #1
 800c84a:	d1ed      	bne.n	800c828 <rclc_executor_spin_some.part.0+0x128>
 800c84c:	f7ff fc9e 	bl	800c18c <_rclc_execute.part.0>
 800c850:	2800      	cmp	r0, #0
 800c852:	f040 80b6 	bne.w	800c9c2 <rclc_executor_spin_some.part.0+0x2c2>
 800c856:	68ab      	ldr	r3, [r5, #8]
 800c858:	e7e6      	b.n	800c828 <rclc_executor_spin_some.part.0+0x128>
 800c85a:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800c85e:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800c862:	4630      	mov	r0, r6
 800c864:	f008 fd1c 	bl	80152a0 <rcl_wait_set_add_client>
 800c868:	2800      	cmp	r0, #0
 800c86a:	f43f af7a 	beq.w	800c762 <rclc_executor_spin_some.part.0+0x62>
 800c86e:	9001      	str	r0, [sp, #4]
 800c870:	f000 faaa 	bl	800cdc8 <rcutils_reset_error>
 800c874:	9801      	ldr	r0, [sp, #4]
 800c876:	4607      	mov	r7, r0
 800c878:	e03c      	b.n	800c8f4 <rclc_executor_spin_some.part.0+0x1f4>
 800c87a:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800c87e:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800c882:	4630      	mov	r0, r6
 800c884:	f008 f9c4 	bl	8014c10 <rcl_wait_set_add_subscription>
 800c888:	2800      	cmp	r0, #0
 800c88a:	f43f af6a 	beq.w	800c762 <rclc_executor_spin_some.part.0+0x62>
 800c88e:	e7ee      	b.n	800c86e <rclc_executor_spin_some.part.0+0x16e>
 800c890:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800c894:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800c898:	4630      	mov	r0, r6
 800c89a:	f008 fcd1 	bl	8015240 <rcl_wait_set_add_timer>
 800c89e:	2800      	cmp	r0, #0
 800c8a0:	f43f af5f 	beq.w	800c762 <rclc_executor_spin_some.part.0+0x62>
 800c8a4:	e7e3      	b.n	800c86e <rclc_executor_spin_some.part.0+0x16e>
 800c8a6:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800c8aa:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800c8ae:	4630      	mov	r0, r6
 800c8b0:	f008 fc9a 	bl	80151e8 <rcl_wait_set_add_guard_condition>
 800c8b4:	2800      	cmp	r0, #0
 800c8b6:	f43f af54 	beq.w	800c762 <rclc_executor_spin_some.part.0+0x62>
 800c8ba:	e7d8      	b.n	800c86e <rclc_executor_spin_some.part.0+0x16e>
 800c8bc:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800c8c0:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800c8c4:	3110      	adds	r1, #16
 800c8c6:	4630      	mov	r0, r6
 800c8c8:	f009 fa1a 	bl	8015d00 <rcl_action_wait_set_add_action_server>
 800c8cc:	2800      	cmp	r0, #0
 800c8ce:	f43f af48 	beq.w	800c762 <rclc_executor_spin_some.part.0+0x62>
 800c8d2:	e7cc      	b.n	800c86e <rclc_executor_spin_some.part.0+0x16e>
 800c8d4:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800c8d8:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800c8dc:	3110      	adds	r1, #16
 800c8de:	2300      	movs	r3, #0
 800c8e0:	4630      	mov	r0, r6
 800c8e2:	f008 ffe5 	bl	80158b0 <rcl_action_wait_set_add_action_client>
 800c8e6:	2800      	cmp	r0, #0
 800c8e8:	f43f af3b 	beq.w	800c762 <rclc_executor_spin_some.part.0+0x62>
 800c8ec:	e7bf      	b.n	800c86e <rclc_executor_spin_some.part.0+0x16e>
 800c8ee:	f000 fa6b 	bl	800cdc8 <rcutils_reset_error>
 800c8f2:	2701      	movs	r7, #1
 800c8f4:	4638      	mov	r0, r7
 800c8f6:	b003      	add	sp, #12
 800c8f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8fc:	f000 fa64 	bl	800cdc8 <rcutils_reset_error>
 800c900:	4638      	mov	r0, r7
 800c902:	b003      	add	sp, #12
 800c904:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c908:	4627      	mov	r7, r4
 800c90a:	e7f3      	b.n	800c8f4 <rclc_executor_spin_some.part.0+0x1f4>
 800c90c:	68ab      	ldr	r3, [r5, #8]
 800c90e:	2b00      	cmp	r3, #0
 800c910:	f000 8092 	beq.w	800ca38 <rclc_executor_spin_some.part.0+0x338>
 800c914:	2400      	movs	r4, #0
 800c916:	46a0      	mov	r8, r4
 800c918:	f240 1991 	movw	r9, #401	@ 0x191
 800c91c:	e008      	b.n	800c930 <rclc_executor_spin_some.part.0+0x230>
 800c91e:	f7ff fa73 	bl	800be08 <_rclc_check_for_new_data>
 800c922:	4604      	mov	r4, r0
 800c924:	b108      	cbz	r0, 800c92a <rclc_executor_spin_some.part.0+0x22a>
 800c926:	4548      	cmp	r0, r9
 800c928:	d1ee      	bne.n	800c908 <rclc_executor_spin_some.part.0+0x208>
 800c92a:	68ab      	ldr	r3, [r5, #8]
 800c92c:	4598      	cmp	r8, r3
 800c92e:	d265      	bcs.n	800c9fc <rclc_executor_spin_some.part.0+0x2fc>
 800c930:	686a      	ldr	r2, [r5, #4]
 800c932:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800c936:	4631      	mov	r1, r6
 800c938:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800c93c:	f108 0801 	add.w	r8, r8, #1
 800c940:	f1bc 0f00 	cmp.w	ip, #0
 800c944:	d1eb      	bne.n	800c91e <rclc_executor_spin_some.part.0+0x21e>
 800c946:	4619      	mov	r1, r3
 800c948:	4610      	mov	r0, r2
 800c94a:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800c94e:	4798      	blx	r3
 800c950:	2800      	cmp	r0, #0
 800c952:	d0d9      	beq.n	800c908 <rclc_executor_spin_some.part.0+0x208>
 800c954:	68ab      	ldr	r3, [r5, #8]
 800c956:	2b00      	cmp	r3, #0
 800c958:	d0d6      	beq.n	800c908 <rclc_executor_spin_some.part.0+0x208>
 800c95a:	f04f 0800 	mov.w	r8, #0
 800c95e:	f240 1991 	movw	r9, #401	@ 0x191
 800c962:	f240 2a59 	movw	sl, #601	@ 0x259
 800c966:	e00e      	b.n	800c986 <rclc_executor_spin_some.part.0+0x286>
 800c968:	f813 300b 	ldrb.w	r3, [r3, fp]
 800c96c:	2b08      	cmp	r3, #8
 800c96e:	d033      	beq.n	800c9d8 <rclc_executor_spin_some.part.0+0x2d8>
 800c970:	2b09      	cmp	r3, #9
 800c972:	d028      	beq.n	800c9c6 <rclc_executor_spin_some.part.0+0x2c6>
 800c974:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 800c978:	b9fb      	cbnz	r3, 800c9ba <rclc_executor_spin_some.part.0+0x2ba>
 800c97a:	68ab      	ldr	r3, [r5, #8]
 800c97c:	f108 0801 	add.w	r8, r8, #1
 800c980:	4598      	cmp	r8, r3
 800c982:	d2b7      	bcs.n	800c8f4 <rclc_executor_spin_some.part.0+0x1f4>
 800c984:	2400      	movs	r4, #0
 800c986:	6868      	ldr	r0, [r5, #4]
 800c988:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800c98c:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 800c990:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800c994:	2b00      	cmp	r3, #0
 800c996:	d0b7      	beq.n	800c908 <rclc_executor_spin_some.part.0+0x208>
 800c998:	4631      	mov	r1, r6
 800c99a:	f7ff fa83 	bl	800bea4 <_rclc_take_new_data>
 800c99e:	b118      	cbz	r0, 800c9a8 <rclc_executor_spin_some.part.0+0x2a8>
 800c9a0:	4548      	cmp	r0, r9
 800c9a2:	d001      	beq.n	800c9a8 <rclc_executor_spin_some.part.0+0x2a8>
 800c9a4:	4550      	cmp	r0, sl
 800c9a6:	d10c      	bne.n	800c9c2 <rclc_executor_spin_some.part.0+0x2c2>
 800c9a8:	686b      	ldr	r3, [r5, #4]
 800c9aa:	eb13 000b 	adds.w	r0, r3, fp
 800c9ae:	d021      	beq.n	800c9f4 <rclc_executor_spin_some.part.0+0x2f4>
 800c9b0:	7842      	ldrb	r2, [r0, #1]
 800c9b2:	2a00      	cmp	r2, #0
 800c9b4:	d0d8      	beq.n	800c968 <rclc_executor_spin_some.part.0+0x268>
 800c9b6:	2a01      	cmp	r2, #1
 800c9b8:	d1df      	bne.n	800c97a <rclc_executor_spin_some.part.0+0x27a>
 800c9ba:	f7ff fbe7 	bl	800c18c <_rclc_execute.part.0>
 800c9be:	2800      	cmp	r0, #0
 800c9c0:	d0db      	beq.n	800c97a <rclc_executor_spin_some.part.0+0x27a>
 800c9c2:	4607      	mov	r7, r0
 800c9c4:	e796      	b.n	800c8f4 <rclc_executor_spin_some.part.0+0x1f4>
 800c9c6:	6843      	ldr	r3, [r0, #4]
 800c9c8:	6a1a      	ldr	r2, [r3, #32]
 800c9ca:	2a00      	cmp	r2, #0
 800c9cc:	d1f5      	bne.n	800c9ba <rclc_executor_spin_some.part.0+0x2ba>
 800c9ce:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d0d1      	beq.n	800c97a <rclc_executor_spin_some.part.0+0x27a>
 800c9d6:	e7f0      	b.n	800c9ba <rclc_executor_spin_some.part.0+0x2ba>
 800c9d8:	6843      	ldr	r3, [r0, #4]
 800c9da:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c9dc:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800c9e0:	d1eb      	bne.n	800c9ba <rclc_executor_spin_some.part.0+0x2ba>
 800c9e2:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800c9e6:	2a00      	cmp	r2, #0
 800c9e8:	d1e7      	bne.n	800c9ba <rclc_executor_spin_some.part.0+0x2ba>
 800c9ea:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d0c3      	beq.n	800c97a <rclc_executor_spin_some.part.0+0x27a>
 800c9f2:	e7e2      	b.n	800c9ba <rclc_executor_spin_some.part.0+0x2ba>
 800c9f4:	270b      	movs	r7, #11
 800c9f6:	e77d      	b.n	800c8f4 <rclc_executor_spin_some.part.0+0x1f4>
 800c9f8:	686a      	ldr	r2, [r5, #4]
 800c9fa:	e6e2      	b.n	800c7c2 <rclc_executor_spin_some.part.0+0xc2>
 800c9fc:	686a      	ldr	r2, [r5, #4]
 800c9fe:	e7a2      	b.n	800c946 <rclc_executor_spin_some.part.0+0x246>
 800ca00:	6842      	ldr	r2, [r0, #4]
 800ca02:	6a11      	ldr	r1, [r2, #32]
 800ca04:	2900      	cmp	r1, #0
 800ca06:	f47f af21 	bne.w	800c84c <rclc_executor_spin_some.part.0+0x14c>
 800ca0a:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 800ca0e:	2a00      	cmp	r2, #0
 800ca10:	f43f af0a 	beq.w	800c828 <rclc_executor_spin_some.part.0+0x128>
 800ca14:	e71a      	b.n	800c84c <rclc_executor_spin_some.part.0+0x14c>
 800ca16:	6842      	ldr	r2, [r0, #4]
 800ca18:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 800ca1a:	f031 417f 	bics.w	r1, r1, #4278190080	@ 0xff000000
 800ca1e:	f47f af15 	bne.w	800c84c <rclc_executor_spin_some.part.0+0x14c>
 800ca22:	f892 1044 	ldrb.w	r1, [r2, #68]	@ 0x44
 800ca26:	2900      	cmp	r1, #0
 800ca28:	f47f af10 	bne.w	800c84c <rclc_executor_spin_some.part.0+0x14c>
 800ca2c:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 800ca30:	2a00      	cmp	r2, #0
 800ca32:	f43f aef9 	beq.w	800c828 <rclc_executor_spin_some.part.0+0x128>
 800ca36:	e709      	b.n	800c84c <rclc_executor_spin_some.part.0+0x14c>
 800ca38:	686a      	ldr	r2, [r5, #4]
 800ca3a:	461c      	mov	r4, r3
 800ca3c:	e783      	b.n	800c946 <rclc_executor_spin_some.part.0+0x246>
 800ca3e:	686a      	ldr	r2, [r5, #4]
 800ca40:	461c      	mov	r4, r3
 800ca42:	e6be      	b.n	800c7c2 <rclc_executor_spin_some.part.0+0xc2>

0800ca44 <rclc_executor_spin_some>:
 800ca44:	b190      	cbz	r0, 800ca6c <rclc_executor_spin_some+0x28>
 800ca46:	b570      	push	{r4, r5, r6, lr}
 800ca48:	4604      	mov	r4, r0
 800ca4a:	6800      	ldr	r0, [r0, #0]
 800ca4c:	4616      	mov	r6, r2
 800ca4e:	461d      	mov	r5, r3
 800ca50:	f006 fde6 	bl	8013620 <rcl_context_is_valid>
 800ca54:	b130      	cbz	r0, 800ca64 <rclc_executor_spin_some+0x20>
 800ca56:	4632      	mov	r2, r6
 800ca58:	462b      	mov	r3, r5
 800ca5a:	4620      	mov	r0, r4
 800ca5c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ca60:	f7ff be4e 	b.w	800c700 <rclc_executor_spin_some.part.0>
 800ca64:	f000 f9b0 	bl	800cdc8 <rcutils_reset_error>
 800ca68:	2001      	movs	r0, #1
 800ca6a:	bd70      	pop	{r4, r5, r6, pc}
 800ca6c:	200b      	movs	r0, #11
 800ca6e:	4770      	bx	lr

0800ca70 <rclc_executor_handle_counters_zero_init>:
 800ca70:	b130      	cbz	r0, 800ca80 <rclc_executor_handle_counters_zero_init+0x10>
 800ca72:	b508      	push	{r3, lr}
 800ca74:	2220      	movs	r2, #32
 800ca76:	2100      	movs	r1, #0
 800ca78:	f00e fc92 	bl	801b3a0 <memset>
 800ca7c:	2000      	movs	r0, #0
 800ca7e:	bd08      	pop	{r3, pc}
 800ca80:	200b      	movs	r0, #11
 800ca82:	4770      	bx	lr
 800ca84:	0000      	movs	r0, r0
	...

0800ca88 <rclc_executor_handle_init>:
 800ca88:	b168      	cbz	r0, 800caa6 <rclc_executor_handle_init+0x1e>
 800ca8a:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 800cab0 <rclc_executor_handle_init+0x28>
 800ca8e:	2300      	movs	r3, #0
 800ca90:	220b      	movs	r2, #11
 800ca92:	ed80 7b0a 	vstr	d7, [r0, #40]	@ 0x28
 800ca96:	e9c0 3301 	strd	r3, r3, [r0, #4]
 800ca9a:	e9c0 310c 	strd	r3, r1, [r0, #48]	@ 0x30
 800ca9e:	8002      	strh	r2, [r0, #0]
 800caa0:	8703      	strh	r3, [r0, #56]	@ 0x38
 800caa2:	4618      	mov	r0, r3
 800caa4:	4770      	bx	lr
 800caa6:	200b      	movs	r0, #11
 800caa8:	4770      	bx	lr
 800caaa:	bf00      	nop
 800caac:	f3af 8000 	nop.w
	...

0800cab8 <rclc_support_init>:
 800cab8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cabc:	b086      	sub	sp, #24
 800cabe:	b3b8      	cbz	r0, 800cb30 <rclc_support_init+0x78>
 800cac0:	461c      	mov	r4, r3
 800cac2:	b3ab      	cbz	r3, 800cb30 <rclc_support_init+0x78>
 800cac4:	460f      	mov	r7, r1
 800cac6:	4690      	mov	r8, r2
 800cac8:	4606      	mov	r6, r0
 800caca:	f006 ff13 	bl	80138f4 <rcl_get_zero_initialized_init_options>
 800cace:	f104 030c 	add.w	r3, r4, #12
 800cad2:	9005      	str	r0, [sp, #20]
 800cad4:	e893 0003 	ldmia.w	r3, {r0, r1}
 800cad8:	e88d 0003 	stmia.w	sp, {r0, r1}
 800cadc:	a805      	add	r0, sp, #20
 800cade:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800cae2:	f006 ff09 	bl	80138f8 <rcl_init_options_init>
 800cae6:	4605      	mov	r5, r0
 800cae8:	b9e0      	cbnz	r0, 800cb24 <rclc_support_init+0x6c>
 800caea:	ad02      	add	r5, sp, #8
 800caec:	4628      	mov	r0, r5
 800caee:	f006 fd8d 	bl	801360c <rcl_get_zero_initialized_context>
 800caf2:	e895 0003 	ldmia.w	r5, {r0, r1}
 800caf6:	4633      	mov	r3, r6
 800caf8:	e886 0003 	stmia.w	r6, {r0, r1}
 800cafc:	aa05      	add	r2, sp, #20
 800cafe:	4641      	mov	r1, r8
 800cb00:	4638      	mov	r0, r7
 800cb02:	f006 fdf3 	bl	80136ec <rcl_init>
 800cb06:	4605      	mov	r5, r0
 800cb08:	b9b8      	cbnz	r0, 800cb3a <rclc_support_init+0x82>
 800cb0a:	60b4      	str	r4, [r6, #8]
 800cb0c:	4622      	mov	r2, r4
 800cb0e:	f106 010c 	add.w	r1, r6, #12
 800cb12:	2003      	movs	r0, #3
 800cb14:	f007 fdcc 	bl	80146b0 <rcl_clock_init>
 800cb18:	4605      	mov	r5, r0
 800cb1a:	b970      	cbnz	r0, 800cb3a <rclc_support_init+0x82>
 800cb1c:	a805      	add	r0, sp, #20
 800cb1e:	f006 ff51 	bl	80139c4 <rcl_init_options_fini>
 800cb22:	b108      	cbz	r0, 800cb28 <rclc_support_init+0x70>
 800cb24:	f000 f950 	bl	800cdc8 <rcutils_reset_error>
 800cb28:	4628      	mov	r0, r5
 800cb2a:	b006      	add	sp, #24
 800cb2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb30:	250b      	movs	r5, #11
 800cb32:	4628      	mov	r0, r5
 800cb34:	b006      	add	sp, #24
 800cb36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb3a:	f000 f945 	bl	800cdc8 <rcutils_reset_error>
 800cb3e:	a805      	add	r0, sp, #20
 800cb40:	f006 ff40 	bl	80139c4 <rcl_init_options_fini>
 800cb44:	2800      	cmp	r0, #0
 800cb46:	d0ef      	beq.n	800cb28 <rclc_support_init+0x70>
 800cb48:	e7ec      	b.n	800cb24 <rclc_support_init+0x6c>
 800cb4a:	bf00      	nop

0800cb4c <rclc_node_init_default>:
 800cb4c:	b3b8      	cbz	r0, 800cbbe <rclc_node_init_default+0x72>
 800cb4e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cb52:	460d      	mov	r5, r1
 800cb54:	b0a1      	sub	sp, #132	@ 0x84
 800cb56:	b329      	cbz	r1, 800cba4 <rclc_node_init_default+0x58>
 800cb58:	4616      	mov	r6, r2
 800cb5a:	b31a      	cbz	r2, 800cba4 <rclc_node_init_default+0x58>
 800cb5c:	461f      	mov	r7, r3
 800cb5e:	b30b      	cbz	r3, 800cba4 <rclc_node_init_default+0x58>
 800cb60:	f10d 0810 	add.w	r8, sp, #16
 800cb64:	4604      	mov	r4, r0
 800cb66:	4640      	mov	r0, r8
 800cb68:	f006 ffe4 	bl	8013b34 <rcl_get_zero_initialized_node>
 800cb6c:	e898 0003 	ldmia.w	r8, {r0, r1}
 800cb70:	f10d 0918 	add.w	r9, sp, #24
 800cb74:	e884 0003 	stmia.w	r4, {r0, r1}
 800cb78:	4648      	mov	r0, r9
 800cb7a:	f007 f953 	bl	8013e24 <rcl_node_get_default_options>
 800cb7e:	4640      	mov	r0, r8
 800cb80:	f006 ffd8 	bl	8013b34 <rcl_get_zero_initialized_node>
 800cb84:	f8cd 9000 	str.w	r9, [sp]
 800cb88:	e898 0003 	ldmia.w	r8, {r0, r1}
 800cb8c:	463b      	mov	r3, r7
 800cb8e:	e884 0003 	stmia.w	r4, {r0, r1}
 800cb92:	4632      	mov	r2, r6
 800cb94:	4629      	mov	r1, r5
 800cb96:	4620      	mov	r0, r4
 800cb98:	f006 ffd6 	bl	8013b48 <rcl_node_init>
 800cb9c:	b930      	cbnz	r0, 800cbac <rclc_node_init_default+0x60>
 800cb9e:	b021      	add	sp, #132	@ 0x84
 800cba0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cba4:	200b      	movs	r0, #11
 800cba6:	b021      	add	sp, #132	@ 0x84
 800cba8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cbac:	9003      	str	r0, [sp, #12]
 800cbae:	f000 f90b 	bl	800cdc8 <rcutils_reset_error>
 800cbb2:	f000 f909 	bl	800cdc8 <rcutils_reset_error>
 800cbb6:	9803      	ldr	r0, [sp, #12]
 800cbb8:	b021      	add	sp, #132	@ 0x84
 800cbba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cbbe:	200b      	movs	r0, #11
 800cbc0:	4770      	bx	lr
 800cbc2:	bf00      	nop

0800cbc4 <rclc_publisher_init_best_effort>:
 800cbc4:	b368      	cbz	r0, 800cc22 <rclc_publisher_init_best_effort+0x5e>
 800cbc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbca:	460d      	mov	r5, r1
 800cbcc:	b0a0      	sub	sp, #128	@ 0x80
 800cbce:	b321      	cbz	r1, 800cc1a <rclc_publisher_init_best_effort+0x56>
 800cbd0:	4616      	mov	r6, r2
 800cbd2:	b312      	cbz	r2, 800cc1a <rclc_publisher_init_best_effort+0x56>
 800cbd4:	461f      	mov	r7, r3
 800cbd6:	b303      	cbz	r3, 800cc1a <rclc_publisher_init_best_effort+0x56>
 800cbd8:	4604      	mov	r4, r0
 800cbda:	f7ff f805 	bl	800bbe8 <rcl_get_zero_initialized_publisher>
 800cbde:	f10d 0810 	add.w	r8, sp, #16
 800cbe2:	6020      	str	r0, [r4, #0]
 800cbe4:	4640      	mov	r0, r8
 800cbe6:	f7ff f89b 	bl	800bd20 <rcl_publisher_get_default_options>
 800cbea:	490f      	ldr	r1, [pc, #60]	@ (800cc28 <rclc_publisher_init_best_effort+0x64>)
 800cbec:	2250      	movs	r2, #80	@ 0x50
 800cbee:	4640      	mov	r0, r8
 800cbf0:	f00e fc59 	bl	801b4a6 <memcpy>
 800cbf4:	f8cd 8000 	str.w	r8, [sp]
 800cbf8:	463b      	mov	r3, r7
 800cbfa:	4632      	mov	r2, r6
 800cbfc:	4629      	mov	r1, r5
 800cbfe:	4620      	mov	r0, r4
 800cc00:	f7fe fff8 	bl	800bbf4 <rcl_publisher_init>
 800cc04:	b910      	cbnz	r0, 800cc0c <rclc_publisher_init_best_effort+0x48>
 800cc06:	b020      	add	sp, #128	@ 0x80
 800cc08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc0c:	9003      	str	r0, [sp, #12]
 800cc0e:	f000 f8db 	bl	800cdc8 <rcutils_reset_error>
 800cc12:	9803      	ldr	r0, [sp, #12]
 800cc14:	b020      	add	sp, #128	@ 0x80
 800cc16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc1a:	200b      	movs	r0, #11
 800cc1c:	b020      	add	sp, #128	@ 0x80
 800cc1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc22:	200b      	movs	r0, #11
 800cc24:	4770      	bx	lr
 800cc26:	bf00      	nop
 800cc28:	0801d898 	.word	0x0801d898

0800cc2c <rclc_service_init_default>:
 800cc2c:	b368      	cbz	r0, 800cc8a <rclc_service_init_default+0x5e>
 800cc2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc32:	460d      	mov	r5, r1
 800cc34:	b09e      	sub	sp, #120	@ 0x78
 800cc36:	b321      	cbz	r1, 800cc82 <rclc_service_init_default+0x56>
 800cc38:	4616      	mov	r6, r2
 800cc3a:	b312      	cbz	r2, 800cc82 <rclc_service_init_default+0x56>
 800cc3c:	461f      	mov	r7, r3
 800cc3e:	b303      	cbz	r3, 800cc82 <rclc_service_init_default+0x56>
 800cc40:	4604      	mov	r4, r0
 800cc42:	f007 fabf 	bl	80141c4 <rcl_get_zero_initialized_service>
 800cc46:	f10d 0810 	add.w	r8, sp, #16
 800cc4a:	6020      	str	r0, [r4, #0]
 800cc4c:	4640      	mov	r0, r8
 800cc4e:	f007 fb47 	bl	80142e0 <rcl_service_get_default_options>
 800cc52:	490f      	ldr	r1, [pc, #60]	@ (800cc90 <rclc_service_init_default+0x64>)
 800cc54:	2250      	movs	r2, #80	@ 0x50
 800cc56:	4640      	mov	r0, r8
 800cc58:	f00e fc25 	bl	801b4a6 <memcpy>
 800cc5c:	f8cd 8000 	str.w	r8, [sp]
 800cc60:	463b      	mov	r3, r7
 800cc62:	4632      	mov	r2, r6
 800cc64:	4629      	mov	r1, r5
 800cc66:	4620      	mov	r0, r4
 800cc68:	f007 fab2 	bl	80141d0 <rcl_service_init>
 800cc6c:	b910      	cbnz	r0, 800cc74 <rclc_service_init_default+0x48>
 800cc6e:	b01e      	add	sp, #120	@ 0x78
 800cc70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc74:	9003      	str	r0, [sp, #12]
 800cc76:	f000 f8a7 	bl	800cdc8 <rcutils_reset_error>
 800cc7a:	9803      	ldr	r0, [sp, #12]
 800cc7c:	b01e      	add	sp, #120	@ 0x78
 800cc7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc82:	200b      	movs	r0, #11
 800cc84:	b01e      	add	sp, #120	@ 0x78
 800cc86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc8a:	200b      	movs	r0, #11
 800cc8c:	4770      	bx	lr
 800cc8e:	bf00      	nop
 800cc90:	0801d8e8 	.word	0x0801d8e8

0800cc94 <rclc_subscription_init_default>:
 800cc94:	b368      	cbz	r0, 800ccf2 <rclc_subscription_init_default+0x5e>
 800cc96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc9a:	460d      	mov	r5, r1
 800cc9c:	b0a0      	sub	sp, #128	@ 0x80
 800cc9e:	b321      	cbz	r1, 800ccea <rclc_subscription_init_default+0x56>
 800cca0:	4616      	mov	r6, r2
 800cca2:	b312      	cbz	r2, 800ccea <rclc_subscription_init_default+0x56>
 800cca4:	461f      	mov	r7, r3
 800cca6:	b303      	cbz	r3, 800ccea <rclc_subscription_init_default+0x56>
 800cca8:	4604      	mov	r4, r0
 800ccaa:	f007 fba5 	bl	80143f8 <rcl_get_zero_initialized_subscription>
 800ccae:	f10d 0810 	add.w	r8, sp, #16
 800ccb2:	6020      	str	r0, [r4, #0]
 800ccb4:	4640      	mov	r0, r8
 800ccb6:	f007 fc4d 	bl	8014554 <rcl_subscription_get_default_options>
 800ccba:	490f      	ldr	r1, [pc, #60]	@ (800ccf8 <rclc_subscription_init_default+0x64>)
 800ccbc:	2250      	movs	r2, #80	@ 0x50
 800ccbe:	4640      	mov	r0, r8
 800ccc0:	f00e fbf1 	bl	801b4a6 <memcpy>
 800ccc4:	f8cd 8000 	str.w	r8, [sp]
 800ccc8:	463b      	mov	r3, r7
 800ccca:	4632      	mov	r2, r6
 800cccc:	4629      	mov	r1, r5
 800ccce:	4620      	mov	r0, r4
 800ccd0:	f007 fb98 	bl	8014404 <rcl_subscription_init>
 800ccd4:	b910      	cbnz	r0, 800ccdc <rclc_subscription_init_default+0x48>
 800ccd6:	b020      	add	sp, #128	@ 0x80
 800ccd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ccdc:	9003      	str	r0, [sp, #12]
 800ccde:	f000 f873 	bl	800cdc8 <rcutils_reset_error>
 800cce2:	9803      	ldr	r0, [sp, #12]
 800cce4:	b020      	add	sp, #128	@ 0x80
 800cce6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ccea:	200b      	movs	r0, #11
 800ccec:	b020      	add	sp, #128	@ 0x80
 800ccee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ccf2:	200b      	movs	r0, #11
 800ccf4:	4770      	bx	lr
 800ccf6:	bf00      	nop
 800ccf8:	0801d938 	.word	0x0801d938

0800ccfc <__default_zero_allocate>:
 800ccfc:	f00d beda 	b.w	801aab4 <calloc>

0800cd00 <__default_reallocate>:
 800cd00:	f00e b8ae 	b.w	801ae60 <realloc>

0800cd04 <__default_deallocate>:
 800cd04:	f00d bf54 	b.w	801abb0 <free>

0800cd08 <__default_allocate>:
 800cd08:	f00d bf4a 	b.w	801aba0 <malloc>

0800cd0c <rcutils_get_zero_initialized_allocator>:
 800cd0c:	b510      	push	{r4, lr}
 800cd0e:	4c05      	ldr	r4, [pc, #20]	@ (800cd24 <rcutils_get_zero_initialized_allocator+0x18>)
 800cd10:	4686      	mov	lr, r0
 800cd12:	4684      	mov	ip, r0
 800cd14:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cd16:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cd1a:	6823      	ldr	r3, [r4, #0]
 800cd1c:	f8cc 3000 	str.w	r3, [ip]
 800cd20:	4670      	mov	r0, lr
 800cd22:	bd10      	pop	{r4, pc}
 800cd24:	0801d988 	.word	0x0801d988

0800cd28 <rcutils_set_default_allocator>:
 800cd28:	b1a8      	cbz	r0, 800cd56 <rcutils_set_default_allocator+0x2e>
 800cd2a:	6802      	ldr	r2, [r0, #0]
 800cd2c:	b1a2      	cbz	r2, 800cd58 <rcutils_set_default_allocator+0x30>
 800cd2e:	6841      	ldr	r1, [r0, #4]
 800cd30:	b1a1      	cbz	r1, 800cd5c <rcutils_set_default_allocator+0x34>
 800cd32:	b410      	push	{r4}
 800cd34:	68c4      	ldr	r4, [r0, #12]
 800cd36:	b164      	cbz	r4, 800cd52 <rcutils_set_default_allocator+0x2a>
 800cd38:	6880      	ldr	r0, [r0, #8]
 800cd3a:	b138      	cbz	r0, 800cd4c <rcutils_set_default_allocator+0x24>
 800cd3c:	4b08      	ldr	r3, [pc, #32]	@ (800cd60 <rcutils_set_default_allocator+0x38>)
 800cd3e:	601a      	str	r2, [r3, #0]
 800cd40:	2200      	movs	r2, #0
 800cd42:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800cd46:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800cd4a:	2001      	movs	r0, #1
 800cd4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cd50:	4770      	bx	lr
 800cd52:	4620      	mov	r0, r4
 800cd54:	e7fa      	b.n	800cd4c <rcutils_set_default_allocator+0x24>
 800cd56:	4770      	bx	lr
 800cd58:	4610      	mov	r0, r2
 800cd5a:	4770      	bx	lr
 800cd5c:	4608      	mov	r0, r1
 800cd5e:	4770      	bx	lr
 800cd60:	20000374 	.word	0x20000374

0800cd64 <rcutils_get_default_allocator>:
 800cd64:	b510      	push	{r4, lr}
 800cd66:	4c05      	ldr	r4, [pc, #20]	@ (800cd7c <rcutils_get_default_allocator+0x18>)
 800cd68:	4686      	mov	lr, r0
 800cd6a:	4684      	mov	ip, r0
 800cd6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cd6e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cd72:	6823      	ldr	r3, [r4, #0]
 800cd74:	f8cc 3000 	str.w	r3, [ip]
 800cd78:	4670      	mov	r0, lr
 800cd7a:	bd10      	pop	{r4, pc}
 800cd7c:	20000374 	.word	0x20000374

0800cd80 <rcutils_allocator_is_valid>:
 800cd80:	b158      	cbz	r0, 800cd9a <rcutils_allocator_is_valid+0x1a>
 800cd82:	6803      	ldr	r3, [r0, #0]
 800cd84:	b143      	cbz	r3, 800cd98 <rcutils_allocator_is_valid+0x18>
 800cd86:	6843      	ldr	r3, [r0, #4]
 800cd88:	b133      	cbz	r3, 800cd98 <rcutils_allocator_is_valid+0x18>
 800cd8a:	68c3      	ldr	r3, [r0, #12]
 800cd8c:	b123      	cbz	r3, 800cd98 <rcutils_allocator_is_valid+0x18>
 800cd8e:	6880      	ldr	r0, [r0, #8]
 800cd90:	3800      	subs	r0, #0
 800cd92:	bf18      	it	ne
 800cd94:	2001      	movne	r0, #1
 800cd96:	4770      	bx	lr
 800cd98:	4618      	mov	r0, r3
 800cd9a:	4770      	bx	lr

0800cd9c <rcutils_get_error_string>:
 800cd9c:	4b06      	ldr	r3, [pc, #24]	@ (800cdb8 <rcutils_get_error_string+0x1c>)
 800cd9e:	781b      	ldrb	r3, [r3, #0]
 800cda0:	b13b      	cbz	r3, 800cdb2 <rcutils_get_error_string+0x16>
 800cda2:	4b06      	ldr	r3, [pc, #24]	@ (800cdbc <rcutils_get_error_string+0x20>)
 800cda4:	781a      	ldrb	r2, [r3, #0]
 800cda6:	b90a      	cbnz	r2, 800cdac <rcutils_get_error_string+0x10>
 800cda8:	2201      	movs	r2, #1
 800cdaa:	701a      	strb	r2, [r3, #0]
 800cdac:	4b04      	ldr	r3, [pc, #16]	@ (800cdc0 <rcutils_get_error_string+0x24>)
 800cdae:	7818      	ldrb	r0, [r3, #0]
 800cdb0:	4770      	bx	lr
 800cdb2:	4b04      	ldr	r3, [pc, #16]	@ (800cdc4 <rcutils_get_error_string+0x28>)
 800cdb4:	7818      	ldrb	r0, [r3, #0]
 800cdb6:	4770      	bx	lr
 800cdb8:	20010e00 	.word	0x20010e00
 800cdbc:	20010e19 	.word	0x20010e19
 800cdc0:	20010e18 	.word	0x20010e18
 800cdc4:	0801c810 	.word	0x0801c810

0800cdc8 <rcutils_reset_error>:
 800cdc8:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 800cde8 <rcutils_reset_error+0x20>
 800cdcc:	4a08      	ldr	r2, [pc, #32]	@ (800cdf0 <rcutils_reset_error+0x28>)
 800cdce:	4809      	ldr	r0, [pc, #36]	@ (800cdf4 <rcutils_reset_error+0x2c>)
 800cdd0:	4909      	ldr	r1, [pc, #36]	@ (800cdf8 <rcutils_reset_error+0x30>)
 800cdd2:	2300      	movs	r3, #0
 800cdd4:	8013      	strh	r3, [r2, #0]
 800cdd6:	ed82 7b02 	vstr	d7, [r2, #8]
 800cdda:	4a08      	ldr	r2, [pc, #32]	@ (800cdfc <rcutils_reset_error+0x34>)
 800cddc:	7003      	strb	r3, [r0, #0]
 800cdde:	700b      	strb	r3, [r1, #0]
 800cde0:	7013      	strb	r3, [r2, #0]
 800cde2:	4770      	bx	lr
 800cde4:	f3af 8000 	nop.w
	...
 800cdf0:	20010e08 	.word	0x20010e08
 800cdf4:	20010e19 	.word	0x20010e19
 800cdf8:	20010e18 	.word	0x20010e18
 800cdfc:	20010e00 	.word	0x20010e00

0800ce00 <rcutils_system_time_now>:
 800ce00:	b308      	cbz	r0, 800ce46 <rcutils_system_time_now+0x46>
 800ce02:	b570      	push	{r4, r5, r6, lr}
 800ce04:	b084      	sub	sp, #16
 800ce06:	4604      	mov	r4, r0
 800ce08:	4669      	mov	r1, sp
 800ce0a:	2001      	movs	r0, #1
 800ce0c:	f7f5 fb0c 	bl	8002428 <clock_gettime>
 800ce10:	e9dd 3500 	ldrd	r3, r5, [sp]
 800ce14:	2d00      	cmp	r5, #0
 800ce16:	db13      	blt.n	800ce40 <rcutils_system_time_now+0x40>
 800ce18:	9902      	ldr	r1, [sp, #8]
 800ce1a:	2900      	cmp	r1, #0
 800ce1c:	db0d      	blt.n	800ce3a <rcutils_system_time_now+0x3a>
 800ce1e:	4e0b      	ldr	r6, [pc, #44]	@ (800ce4c <rcutils_system_time_now+0x4c>)
 800ce20:	fba3 3206 	umull	r3, r2, r3, r6
 800ce24:	185b      	adds	r3, r3, r1
 800ce26:	fb06 2205 	mla	r2, r6, r5, r2
 800ce2a:	f04f 0000 	mov.w	r0, #0
 800ce2e:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800ce32:	e9c4 3200 	strd	r3, r2, [r4]
 800ce36:	b004      	add	sp, #16
 800ce38:	bd70      	pop	{r4, r5, r6, pc}
 800ce3a:	ea53 0205 	orrs.w	r2, r3, r5
 800ce3e:	d1ee      	bne.n	800ce1e <rcutils_system_time_now+0x1e>
 800ce40:	2002      	movs	r0, #2
 800ce42:	b004      	add	sp, #16
 800ce44:	bd70      	pop	{r4, r5, r6, pc}
 800ce46:	200b      	movs	r0, #11
 800ce48:	4770      	bx	lr
 800ce4a:	bf00      	nop
 800ce4c:	3b9aca00 	.word	0x3b9aca00

0800ce50 <rcutils_steady_time_now>:
 800ce50:	b308      	cbz	r0, 800ce96 <rcutils_steady_time_now+0x46>
 800ce52:	b570      	push	{r4, r5, r6, lr}
 800ce54:	b084      	sub	sp, #16
 800ce56:	4604      	mov	r4, r0
 800ce58:	4669      	mov	r1, sp
 800ce5a:	2000      	movs	r0, #0
 800ce5c:	f7f5 fae4 	bl	8002428 <clock_gettime>
 800ce60:	e9dd 3500 	ldrd	r3, r5, [sp]
 800ce64:	2d00      	cmp	r5, #0
 800ce66:	db13      	blt.n	800ce90 <rcutils_steady_time_now+0x40>
 800ce68:	9902      	ldr	r1, [sp, #8]
 800ce6a:	2900      	cmp	r1, #0
 800ce6c:	db0d      	blt.n	800ce8a <rcutils_steady_time_now+0x3a>
 800ce6e:	4e0b      	ldr	r6, [pc, #44]	@ (800ce9c <rcutils_steady_time_now+0x4c>)
 800ce70:	fba3 3206 	umull	r3, r2, r3, r6
 800ce74:	185b      	adds	r3, r3, r1
 800ce76:	fb06 2205 	mla	r2, r6, r5, r2
 800ce7a:	f04f 0000 	mov.w	r0, #0
 800ce7e:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800ce82:	e9c4 3200 	strd	r3, r2, [r4]
 800ce86:	b004      	add	sp, #16
 800ce88:	bd70      	pop	{r4, r5, r6, pc}
 800ce8a:	ea53 0205 	orrs.w	r2, r3, r5
 800ce8e:	d1ee      	bne.n	800ce6e <rcutils_steady_time_now+0x1e>
 800ce90:	2002      	movs	r0, #2
 800ce92:	b004      	add	sp, #16
 800ce94:	bd70      	pop	{r4, r5, r6, pc}
 800ce96:	200b      	movs	r0, #11
 800ce98:	4770      	bx	lr
 800ce9a:	bf00      	nop
 800ce9c:	3b9aca00 	.word	0x3b9aca00

0800cea0 <rmw_get_default_publisher_options>:
 800cea0:	2200      	movs	r2, #0
 800cea2:	6002      	str	r2, [r0, #0]
 800cea4:	7102      	strb	r2, [r0, #4]
 800cea6:	4770      	bx	lr

0800cea8 <rmw_uros_set_custom_transport>:
 800cea8:	b470      	push	{r4, r5, r6}
 800ceaa:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800ceae:	b162      	cbz	r2, 800ceca <rmw_uros_set_custom_transport+0x22>
 800ceb0:	b15b      	cbz	r3, 800ceca <rmw_uros_set_custom_transport+0x22>
 800ceb2:	b155      	cbz	r5, 800ceca <rmw_uros_set_custom_transport+0x22>
 800ceb4:	b14e      	cbz	r6, 800ceca <rmw_uros_set_custom_transport+0x22>
 800ceb6:	4c06      	ldr	r4, [pc, #24]	@ (800ced0 <rmw_uros_set_custom_transport+0x28>)
 800ceb8:	7020      	strb	r0, [r4, #0]
 800ceba:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800cebe:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800cec2:	6166      	str	r6, [r4, #20]
 800cec4:	2000      	movs	r0, #0
 800cec6:	bc70      	pop	{r4, r5, r6}
 800cec8:	4770      	bx	lr
 800ceca:	200b      	movs	r0, #11
 800cecc:	bc70      	pop	{r4, r5, r6}
 800cece:	4770      	bx	lr
 800ced0:	20010e1c 	.word	0x20010e1c

0800ced4 <flush_session>:
 800ced4:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 800ced6:	f004 bb37 	b.w	8011548 <uxr_run_session_until_confirm_delivery>
 800ceda:	bf00      	nop

0800cedc <rmw_publish>:
 800cedc:	2800      	cmp	r0, #0
 800cede:	d053      	beq.n	800cf88 <rmw_publish+0xac>
 800cee0:	b570      	push	{r4, r5, r6, lr}
 800cee2:	460d      	mov	r5, r1
 800cee4:	b08e      	sub	sp, #56	@ 0x38
 800cee6:	2900      	cmp	r1, #0
 800cee8:	d04b      	beq.n	800cf82 <rmw_publish+0xa6>
 800ceea:	4604      	mov	r4, r0
 800ceec:	6800      	ldr	r0, [r0, #0]
 800ceee:	f000 fd87 	bl	800da00 <is_uxrce_rmw_identifier_valid>
 800cef2:	2800      	cmp	r0, #0
 800cef4:	d045      	beq.n	800cf82 <rmw_publish+0xa6>
 800cef6:	6866      	ldr	r6, [r4, #4]
 800cef8:	2e00      	cmp	r6, #0
 800cefa:	d042      	beq.n	800cf82 <rmw_publish+0xa6>
 800cefc:	69b4      	ldr	r4, [r6, #24]
 800cefe:	4628      	mov	r0, r5
 800cf00:	6923      	ldr	r3, [r4, #16]
 800cf02:	4798      	blx	r3
 800cf04:	69f3      	ldr	r3, [r6, #28]
 800cf06:	9005      	str	r0, [sp, #20]
 800cf08:	b113      	cbz	r3, 800cf10 <rmw_publish+0x34>
 800cf0a:	a805      	add	r0, sp, #20
 800cf0c:	4798      	blx	r3
 800cf0e:	9805      	ldr	r0, [sp, #20]
 800cf10:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800cf14:	691b      	ldr	r3, [r3, #16]
 800cf16:	9000      	str	r0, [sp, #0]
 800cf18:	6972      	ldr	r2, [r6, #20]
 800cf1a:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800cf1c:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800cf20:	ab06      	add	r3, sp, #24
 800cf22:	f005 f8fd 	bl	8012120 <uxr_prepare_output_stream>
 800cf26:	b1d8      	cbz	r0, 800cf60 <rmw_publish+0x84>
 800cf28:	68a3      	ldr	r3, [r4, #8]
 800cf2a:	a906      	add	r1, sp, #24
 800cf2c:	4628      	mov	r0, r5
 800cf2e:	4798      	blx	r3
 800cf30:	6a33      	ldr	r3, [r6, #32]
 800cf32:	4604      	mov	r4, r0
 800cf34:	b10b      	cbz	r3, 800cf3a <rmw_publish+0x5e>
 800cf36:	a806      	add	r0, sp, #24
 800cf38:	4798      	blx	r3
 800cf3a:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 800cf3e:	2b01      	cmp	r3, #1
 800cf40:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800cf44:	d022      	beq.n	800cf8c <rmw_publish+0xb0>
 800cf46:	6918      	ldr	r0, [r3, #16]
 800cf48:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 800cf4a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800cf4e:	f004 fafb 	bl	8011548 <uxr_run_session_until_confirm_delivery>
 800cf52:	4020      	ands	r0, r4
 800cf54:	b2c4      	uxtb	r4, r0
 800cf56:	f084 0001 	eor.w	r0, r4, #1
 800cf5a:	b2c0      	uxtb	r0, r0
 800cf5c:	b00e      	add	sp, #56	@ 0x38
 800cf5e:	bd70      	pop	{r4, r5, r6, pc}
 800cf60:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800cf64:	6918      	ldr	r0, [r3, #16]
 800cf66:	9b05      	ldr	r3, [sp, #20]
 800cf68:	9300      	str	r3, [sp, #0]
 800cf6a:	4b0b      	ldr	r3, [pc, #44]	@ (800cf98 <rmw_publish+0xbc>)
 800cf6c:	9301      	str	r3, [sp, #4]
 800cf6e:	9602      	str	r6, [sp, #8]
 800cf70:	6972      	ldr	r2, [r6, #20]
 800cf72:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800cf74:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800cf78:	ab06      	add	r3, sp, #24
 800cf7a:	f005 f901 	bl	8012180 <uxr_prepare_output_stream_fragmented>
 800cf7e:	2800      	cmp	r0, #0
 800cf80:	d1d2      	bne.n	800cf28 <rmw_publish+0x4c>
 800cf82:	2001      	movs	r0, #1
 800cf84:	b00e      	add	sp, #56	@ 0x38
 800cf86:	bd70      	pop	{r4, r5, r6, pc}
 800cf88:	2001      	movs	r0, #1
 800cf8a:	4770      	bx	lr
 800cf8c:	6918      	ldr	r0, [r3, #16]
 800cf8e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800cf92:	f003 ff19 	bl	8010dc8 <uxr_flash_output_streams>
 800cf96:	e7de      	b.n	800cf56 <rmw_publish+0x7a>
 800cf98:	0800ced5 	.word	0x0800ced5

0800cf9c <rmw_create_publisher>:
 800cf9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfa0:	b087      	sub	sp, #28
 800cfa2:	2800      	cmp	r0, #0
 800cfa4:	f000 80cc 	beq.w	800d140 <rmw_create_publisher+0x1a4>
 800cfa8:	460e      	mov	r6, r1
 800cfaa:	2900      	cmp	r1, #0
 800cfac:	f000 80c8 	beq.w	800d140 <rmw_create_publisher+0x1a4>
 800cfb0:	4604      	mov	r4, r0
 800cfb2:	6800      	ldr	r0, [r0, #0]
 800cfb4:	4615      	mov	r5, r2
 800cfb6:	4698      	mov	r8, r3
 800cfb8:	f000 fd22 	bl	800da00 <is_uxrce_rmw_identifier_valid>
 800cfbc:	2800      	cmp	r0, #0
 800cfbe:	f000 80bf 	beq.w	800d140 <rmw_create_publisher+0x1a4>
 800cfc2:	2d00      	cmp	r5, #0
 800cfc4:	f000 80bc 	beq.w	800d140 <rmw_create_publisher+0x1a4>
 800cfc8:	782b      	ldrb	r3, [r5, #0]
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	f000 80b8 	beq.w	800d140 <rmw_create_publisher+0x1a4>
 800cfd0:	f1b8 0f00 	cmp.w	r8, #0
 800cfd4:	f000 80b4 	beq.w	800d140 <rmw_create_publisher+0x1a4>
 800cfd8:	485c      	ldr	r0, [pc, #368]	@ (800d14c <rmw_create_publisher+0x1b0>)
 800cfda:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800cfde:	f009 fe0f 	bl	8016c00 <get_memory>
 800cfe2:	2800      	cmp	r0, #0
 800cfe4:	f000 80ac 	beq.w	800d140 <rmw_create_publisher+0x1a4>
 800cfe8:	6884      	ldr	r4, [r0, #8]
 800cfea:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 800cfee:	f009 fe6f 	bl	8016cd0 <rmw_get_implementation_identifier>
 800cff2:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 800cff6:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 800cffa:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 800cffe:	4628      	mov	r0, r5
 800d000:	f7f3 f908 	bl	8000214 <strlen>
 800d004:	3001      	adds	r0, #1
 800d006:	283c      	cmp	r0, #60	@ 0x3c
 800d008:	f104 0784 	add.w	r7, r4, #132	@ 0x84
 800d00c:	f200 8091 	bhi.w	800d132 <rmw_create_publisher+0x196>
 800d010:	4a4f      	ldr	r2, [pc, #316]	@ (800d150 <rmw_create_publisher+0x1b4>)
 800d012:	462b      	mov	r3, r5
 800d014:	213c      	movs	r1, #60	@ 0x3c
 800d016:	4650      	mov	r0, sl
 800d018:	f00d fe74 	bl	801ad04 <sniprintf>
 800d01c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800d020:	67e3      	str	r3, [r4, #124]	@ 0x7c
 800d022:	4641      	mov	r1, r8
 800d024:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 800d028:	2250      	movs	r2, #80	@ 0x50
 800d02a:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800d02e:	f00e fa3a 	bl	801b4a6 <memcpy>
 800d032:	f898 3008 	ldrb.w	r3, [r8, #8]
 800d036:	4947      	ldr	r1, [pc, #284]	@ (800d154 <rmw_create_publisher+0x1b8>)
 800d038:	2b02      	cmp	r3, #2
 800d03a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d03e:	bf0c      	ite	eq
 800d040:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 800d044:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 800d048:	67a3      	str	r3, [r4, #120]	@ 0x78
 800d04a:	2300      	movs	r3, #0
 800d04c:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800d050:	4630      	mov	r0, r6
 800d052:	f000 fce3 	bl	800da1c <get_message_typesupport_handle>
 800d056:	2800      	cmp	r0, #0
 800d058:	d06b      	beq.n	800d132 <rmw_create_publisher+0x196>
 800d05a:	6842      	ldr	r2, [r0, #4]
 800d05c:	61a2      	str	r2, [r4, #24]
 800d05e:	2a00      	cmp	r2, #0
 800d060:	d067      	beq.n	800d132 <rmw_create_publisher+0x196>
 800d062:	4629      	mov	r1, r5
 800d064:	4643      	mov	r3, r8
 800d066:	4648      	mov	r0, r9
 800d068:	f00a f898 	bl	801719c <create_topic>
 800d06c:	6260      	str	r0, [r4, #36]	@ 0x24
 800d06e:	2800      	cmp	r0, #0
 800d070:	d063      	beq.n	800d13a <rmw_create_publisher+0x19e>
 800d072:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d076:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d07a:	2103      	movs	r1, #3
 800d07c:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 800d080:	1c42      	adds	r2, r0, #1
 800d082:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 800d086:	f003 fd4f 	bl	8010b28 <uxr_object_id>
 800d08a:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 800d08e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d092:	6120      	str	r0, [r4, #16]
 800d094:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 800d098:	6910      	ldr	r0, [r2, #16]
 800d09a:	2506      	movs	r5, #6
 800d09c:	9500      	str	r5, [sp, #0]
 800d09e:	6819      	ldr	r1, [r3, #0]
 800d0a0:	6922      	ldr	r2, [r4, #16]
 800d0a2:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800d0a6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800d0aa:	f003 fbb5 	bl	8010818 <uxr_buffer_create_publisher_bin>
 800d0ae:	4602      	mov	r2, r0
 800d0b0:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800d0b4:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800d0b8:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800d0bc:	f000 fb86 	bl	800d7cc <run_xrce_session>
 800d0c0:	b3b8      	cbz	r0, 800d132 <rmw_create_publisher+0x196>
 800d0c2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d0c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d0ca:	2105      	movs	r1, #5
 800d0cc:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 800d0d0:	1c42      	adds	r2, r0, #1
 800d0d2:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 800d0d6:	f003 fd27 	bl	8010b28 <uxr_object_id>
 800d0da:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800d0de:	6160      	str	r0, [r4, #20]
 800d0e0:	691e      	ldr	r6, [r3, #16]
 800d0e2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d0e6:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 800d0ea:	f10d 0a10 	add.w	sl, sp, #16
 800d0ee:	4641      	mov	r1, r8
 800d0f0:	4650      	mov	r0, sl
 800d0f2:	f8d3 8384 	ldr.w	r8, [r3, #900]	@ 0x384
 800d0f6:	f000 fb85 	bl	800d804 <convert_qos_profile>
 800d0fa:	9503      	str	r5, [sp, #12]
 800d0fc:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800d100:	9001      	str	r0, [sp, #4]
 800d102:	f8ad 1008 	strh.w	r1, [sp, #8]
 800d106:	f8db 3010 	ldr.w	r3, [fp, #16]
 800d10a:	9300      	str	r3, [sp, #0]
 800d10c:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 800d110:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800d114:	f8d8 1000 	ldr.w	r1, [r8]
 800d118:	4630      	mov	r0, r6
 800d11a:	f003 fbdd 	bl	80108d8 <uxr_buffer_create_datawriter_bin>
 800d11e:	4602      	mov	r2, r0
 800d120:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800d124:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800d128:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800d12c:	f000 fb4e 	bl	800d7cc <run_xrce_session>
 800d130:	b938      	cbnz	r0, 800d142 <rmw_create_publisher+0x1a6>
 800d132:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800d134:	b108      	cbz	r0, 800d13a <rmw_create_publisher+0x19e>
 800d136:	f000 fa47 	bl	800d5c8 <rmw_uxrce_fini_topic_memory>
 800d13a:	4638      	mov	r0, r7
 800d13c:	f000 f9ec 	bl	800d518 <rmw_uxrce_fini_publisher_memory>
 800d140:	2700      	movs	r7, #0
 800d142:	4638      	mov	r0, r7
 800d144:	b007      	add	sp, #28
 800d146:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d14a:	bf00      	nop
 800d14c:	20015bc4 	.word	0x20015bc4
 800d150:	0801cbf0 	.word	0x0801cbf0
 800d154:	0801c780 	.word	0x0801c780

0800d158 <rmw_publisher_get_actual_qos>:
 800d158:	b150      	cbz	r0, 800d170 <rmw_publisher_get_actual_qos+0x18>
 800d15a:	b508      	push	{r3, lr}
 800d15c:	460b      	mov	r3, r1
 800d15e:	b149      	cbz	r1, 800d174 <rmw_publisher_get_actual_qos+0x1c>
 800d160:	6841      	ldr	r1, [r0, #4]
 800d162:	2250      	movs	r2, #80	@ 0x50
 800d164:	3128      	adds	r1, #40	@ 0x28
 800d166:	4618      	mov	r0, r3
 800d168:	f00e f99d 	bl	801b4a6 <memcpy>
 800d16c:	2000      	movs	r0, #0
 800d16e:	bd08      	pop	{r3, pc}
 800d170:	200b      	movs	r0, #11
 800d172:	4770      	bx	lr
 800d174:	200b      	movs	r0, #11
 800d176:	bd08      	pop	{r3, pc}

0800d178 <rmw_destroy_publisher>:
 800d178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d17a:	b128      	cbz	r0, 800d188 <rmw_destroy_publisher+0x10>
 800d17c:	4604      	mov	r4, r0
 800d17e:	6800      	ldr	r0, [r0, #0]
 800d180:	460d      	mov	r5, r1
 800d182:	f000 fc3d 	bl	800da00 <is_uxrce_rmw_identifier_valid>
 800d186:	b910      	cbnz	r0, 800d18e <rmw_destroy_publisher+0x16>
 800d188:	2401      	movs	r4, #1
 800d18a:	4620      	mov	r0, r4
 800d18c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d18e:	6863      	ldr	r3, [r4, #4]
 800d190:	2b00      	cmp	r3, #0
 800d192:	d0f9      	beq.n	800d188 <rmw_destroy_publisher+0x10>
 800d194:	2d00      	cmp	r5, #0
 800d196:	d0f7      	beq.n	800d188 <rmw_destroy_publisher+0x10>
 800d198:	6828      	ldr	r0, [r5, #0]
 800d19a:	f000 fc31 	bl	800da00 <is_uxrce_rmw_identifier_valid>
 800d19e:	2800      	cmp	r0, #0
 800d1a0:	d0f2      	beq.n	800d188 <rmw_destroy_publisher+0x10>
 800d1a2:	686c      	ldr	r4, [r5, #4]
 800d1a4:	2c00      	cmp	r4, #0
 800d1a6:	d0ef      	beq.n	800d188 <rmw_destroy_publisher+0x10>
 800d1a8:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800d1aa:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 800d1ae:	f00a f845 	bl	801723c <destroy_topic>
 800d1b2:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800d1b6:	6962      	ldr	r2, [r4, #20]
 800d1b8:	6918      	ldr	r0, [r3, #16]
 800d1ba:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800d1be:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800d1c2:	6819      	ldr	r1, [r3, #0]
 800d1c4:	f003 fa74 	bl	80106b0 <uxr_buffer_delete_entity>
 800d1c8:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800d1cc:	6922      	ldr	r2, [r4, #16]
 800d1ce:	691b      	ldr	r3, [r3, #16]
 800d1d0:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800d1d4:	4604      	mov	r4, r0
 800d1d6:	6809      	ldr	r1, [r1, #0]
 800d1d8:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800d1dc:	f003 fa68 	bl	80106b0 <uxr_buffer_delete_entity>
 800d1e0:	693e      	ldr	r6, [r7, #16]
 800d1e2:	4622      	mov	r2, r4
 800d1e4:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800d1e8:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800d1ec:	4604      	mov	r4, r0
 800d1ee:	4630      	mov	r0, r6
 800d1f0:	f000 faec 	bl	800d7cc <run_xrce_session>
 800d1f4:	693e      	ldr	r6, [r7, #16]
 800d1f6:	4622      	mov	r2, r4
 800d1f8:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800d1fc:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800d200:	4604      	mov	r4, r0
 800d202:	4630      	mov	r0, r6
 800d204:	f000 fae2 	bl	800d7cc <run_xrce_session>
 800d208:	b12c      	cbz	r4, 800d216 <rmw_destroy_publisher+0x9e>
 800d20a:	b120      	cbz	r0, 800d216 <rmw_destroy_publisher+0x9e>
 800d20c:	2400      	movs	r4, #0
 800d20e:	4628      	mov	r0, r5
 800d210:	f000 f982 	bl	800d518 <rmw_uxrce_fini_publisher_memory>
 800d214:	e7b9      	b.n	800d18a <rmw_destroy_publisher+0x12>
 800d216:	2402      	movs	r4, #2
 800d218:	e7f9      	b.n	800d20e <rmw_destroy_publisher+0x96>
 800d21a:	bf00      	nop

0800d21c <rmw_uxrce_init_service_memory>:
 800d21c:	b1e2      	cbz	r2, 800d258 <rmw_uxrce_init_service_memory+0x3c>
 800d21e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d222:	7b05      	ldrb	r5, [r0, #12]
 800d224:	4606      	mov	r6, r0
 800d226:	b9ad      	cbnz	r5, 800d254 <rmw_uxrce_init_service_memory+0x38>
 800d228:	23c8      	movs	r3, #200	@ 0xc8
 800d22a:	e9c0 5500 	strd	r5, r5, [r0]
 800d22e:	6083      	str	r3, [r0, #8]
 800d230:	f240 1301 	movw	r3, #257	@ 0x101
 800d234:	4617      	mov	r7, r2
 800d236:	8183      	strh	r3, [r0, #12]
 800d238:	460c      	mov	r4, r1
 800d23a:	46a8      	mov	r8, r5
 800d23c:	4621      	mov	r1, r4
 800d23e:	4630      	mov	r0, r6
 800d240:	3501      	adds	r5, #1
 800d242:	f009 fced 	bl	8016c20 <put_memory>
 800d246:	42af      	cmp	r7, r5
 800d248:	60a4      	str	r4, [r4, #8]
 800d24a:	f884 800c 	strb.w	r8, [r4, #12]
 800d24e:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800d252:	d1f3      	bne.n	800d23c <rmw_uxrce_init_service_memory+0x20>
 800d254:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d258:	4770      	bx	lr
 800d25a:	bf00      	nop

0800d25c <rmw_uxrce_init_client_memory>:
 800d25c:	b1e2      	cbz	r2, 800d298 <rmw_uxrce_init_client_memory+0x3c>
 800d25e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d262:	7b05      	ldrb	r5, [r0, #12]
 800d264:	4606      	mov	r6, r0
 800d266:	b9ad      	cbnz	r5, 800d294 <rmw_uxrce_init_client_memory+0x38>
 800d268:	23c8      	movs	r3, #200	@ 0xc8
 800d26a:	e9c0 5500 	strd	r5, r5, [r0]
 800d26e:	6083      	str	r3, [r0, #8]
 800d270:	f240 1301 	movw	r3, #257	@ 0x101
 800d274:	4617      	mov	r7, r2
 800d276:	8183      	strh	r3, [r0, #12]
 800d278:	460c      	mov	r4, r1
 800d27a:	46a8      	mov	r8, r5
 800d27c:	4621      	mov	r1, r4
 800d27e:	4630      	mov	r0, r6
 800d280:	3501      	adds	r5, #1
 800d282:	f009 fccd 	bl	8016c20 <put_memory>
 800d286:	42af      	cmp	r7, r5
 800d288:	60a4      	str	r4, [r4, #8]
 800d28a:	f884 800c 	strb.w	r8, [r4, #12]
 800d28e:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800d292:	d1f3      	bne.n	800d27c <rmw_uxrce_init_client_memory+0x20>
 800d294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d298:	4770      	bx	lr
 800d29a:	bf00      	nop

0800d29c <rmw_uxrce_init_publisher_memory>:
 800d29c:	b1e2      	cbz	r2, 800d2d8 <rmw_uxrce_init_publisher_memory+0x3c>
 800d29e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d2a2:	7b05      	ldrb	r5, [r0, #12]
 800d2a4:	4606      	mov	r6, r0
 800d2a6:	b9ad      	cbnz	r5, 800d2d4 <rmw_uxrce_init_publisher_memory+0x38>
 800d2a8:	23d8      	movs	r3, #216	@ 0xd8
 800d2aa:	e9c0 5500 	strd	r5, r5, [r0]
 800d2ae:	6083      	str	r3, [r0, #8]
 800d2b0:	f240 1301 	movw	r3, #257	@ 0x101
 800d2b4:	4617      	mov	r7, r2
 800d2b6:	8183      	strh	r3, [r0, #12]
 800d2b8:	460c      	mov	r4, r1
 800d2ba:	46a8      	mov	r8, r5
 800d2bc:	4621      	mov	r1, r4
 800d2be:	4630      	mov	r0, r6
 800d2c0:	3501      	adds	r5, #1
 800d2c2:	f009 fcad 	bl	8016c20 <put_memory>
 800d2c6:	42af      	cmp	r7, r5
 800d2c8:	60a4      	str	r4, [r4, #8]
 800d2ca:	f884 800c 	strb.w	r8, [r4, #12]
 800d2ce:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800d2d2:	d1f3      	bne.n	800d2bc <rmw_uxrce_init_publisher_memory+0x20>
 800d2d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2d8:	4770      	bx	lr
 800d2da:	bf00      	nop

0800d2dc <rmw_uxrce_init_subscription_memory>:
 800d2dc:	b1e2      	cbz	r2, 800d318 <rmw_uxrce_init_subscription_memory+0x3c>
 800d2de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d2e2:	7b05      	ldrb	r5, [r0, #12]
 800d2e4:	4606      	mov	r6, r0
 800d2e6:	b9ad      	cbnz	r5, 800d314 <rmw_uxrce_init_subscription_memory+0x38>
 800d2e8:	23d8      	movs	r3, #216	@ 0xd8
 800d2ea:	e9c0 5500 	strd	r5, r5, [r0]
 800d2ee:	6083      	str	r3, [r0, #8]
 800d2f0:	f240 1301 	movw	r3, #257	@ 0x101
 800d2f4:	4617      	mov	r7, r2
 800d2f6:	8183      	strh	r3, [r0, #12]
 800d2f8:	460c      	mov	r4, r1
 800d2fa:	46a8      	mov	r8, r5
 800d2fc:	4621      	mov	r1, r4
 800d2fe:	4630      	mov	r0, r6
 800d300:	3501      	adds	r5, #1
 800d302:	f009 fc8d 	bl	8016c20 <put_memory>
 800d306:	42af      	cmp	r7, r5
 800d308:	60a4      	str	r4, [r4, #8]
 800d30a:	f884 800c 	strb.w	r8, [r4, #12]
 800d30e:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800d312:	d1f3      	bne.n	800d2fc <rmw_uxrce_init_subscription_memory+0x20>
 800d314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d318:	4770      	bx	lr
 800d31a:	bf00      	nop

0800d31c <rmw_uxrce_init_node_memory>:
 800d31c:	b1e2      	cbz	r2, 800d358 <rmw_uxrce_init_node_memory+0x3c>
 800d31e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d322:	7b05      	ldrb	r5, [r0, #12]
 800d324:	4606      	mov	r6, r0
 800d326:	b9ad      	cbnz	r5, 800d354 <rmw_uxrce_init_node_memory+0x38>
 800d328:	23a4      	movs	r3, #164	@ 0xa4
 800d32a:	e9c0 5500 	strd	r5, r5, [r0]
 800d32e:	6083      	str	r3, [r0, #8]
 800d330:	f240 1301 	movw	r3, #257	@ 0x101
 800d334:	4617      	mov	r7, r2
 800d336:	8183      	strh	r3, [r0, #12]
 800d338:	460c      	mov	r4, r1
 800d33a:	46a8      	mov	r8, r5
 800d33c:	4621      	mov	r1, r4
 800d33e:	4630      	mov	r0, r6
 800d340:	3501      	adds	r5, #1
 800d342:	f009 fc6d 	bl	8016c20 <put_memory>
 800d346:	42af      	cmp	r7, r5
 800d348:	60a4      	str	r4, [r4, #8]
 800d34a:	f884 800c 	strb.w	r8, [r4, #12]
 800d34e:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 800d352:	d1f3      	bne.n	800d33c <rmw_uxrce_init_node_memory+0x20>
 800d354:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d358:	4770      	bx	lr
 800d35a:	bf00      	nop

0800d35c <rmw_uxrce_init_session_memory>:
 800d35c:	b1ea      	cbz	r2, 800d39a <rmw_uxrce_init_session_memory+0x3e>
 800d35e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d362:	7b05      	ldrb	r5, [r0, #12]
 800d364:	4606      	mov	r6, r0
 800d366:	b9b5      	cbnz	r5, 800d396 <rmw_uxrce_init_session_memory+0x3a>
 800d368:	e9c0 5500 	strd	r5, r5, [r0]
 800d36c:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 800d370:	f240 1301 	movw	r3, #257	@ 0x101
 800d374:	4617      	mov	r7, r2
 800d376:	f8c0 8008 	str.w	r8, [r0, #8]
 800d37a:	460c      	mov	r4, r1
 800d37c:	8183      	strh	r3, [r0, #12]
 800d37e:	46a9      	mov	r9, r5
 800d380:	4621      	mov	r1, r4
 800d382:	4630      	mov	r0, r6
 800d384:	3501      	adds	r5, #1
 800d386:	f009 fc4b 	bl	8016c20 <put_memory>
 800d38a:	42af      	cmp	r7, r5
 800d38c:	60a4      	str	r4, [r4, #8]
 800d38e:	f884 900c 	strb.w	r9, [r4, #12]
 800d392:	4444      	add	r4, r8
 800d394:	d1f4      	bne.n	800d380 <rmw_uxrce_init_session_memory+0x24>
 800d396:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d39a:	4770      	bx	lr

0800d39c <rmw_uxrce_init_topic_memory>:
 800d39c:	b1e2      	cbz	r2, 800d3d8 <rmw_uxrce_init_topic_memory+0x3c>
 800d39e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d3a2:	7b05      	ldrb	r5, [r0, #12]
 800d3a4:	4606      	mov	r6, r0
 800d3a6:	b9ad      	cbnz	r5, 800d3d4 <rmw_uxrce_init_topic_memory+0x38>
 800d3a8:	231c      	movs	r3, #28
 800d3aa:	e9c0 5500 	strd	r5, r5, [r0]
 800d3ae:	6083      	str	r3, [r0, #8]
 800d3b0:	f240 1301 	movw	r3, #257	@ 0x101
 800d3b4:	4617      	mov	r7, r2
 800d3b6:	8183      	strh	r3, [r0, #12]
 800d3b8:	460c      	mov	r4, r1
 800d3ba:	46a8      	mov	r8, r5
 800d3bc:	4621      	mov	r1, r4
 800d3be:	4630      	mov	r0, r6
 800d3c0:	3501      	adds	r5, #1
 800d3c2:	f009 fc2d 	bl	8016c20 <put_memory>
 800d3c6:	42af      	cmp	r7, r5
 800d3c8:	60a4      	str	r4, [r4, #8]
 800d3ca:	f884 800c 	strb.w	r8, [r4, #12]
 800d3ce:	f104 041c 	add.w	r4, r4, #28
 800d3d2:	d1f3      	bne.n	800d3bc <rmw_uxrce_init_topic_memory+0x20>
 800d3d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d3d8:	4770      	bx	lr
 800d3da:	bf00      	nop

0800d3dc <rmw_uxrce_init_static_input_buffer_memory>:
 800d3dc:	b1ea      	cbz	r2, 800d41a <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800d3de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d3e2:	7b05      	ldrb	r5, [r0, #12]
 800d3e4:	4606      	mov	r6, r0
 800d3e6:	b9b5      	cbnz	r5, 800d416 <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800d3e8:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 800d3ec:	e9c0 5500 	strd	r5, r5, [r0]
 800d3f0:	6083      	str	r3, [r0, #8]
 800d3f2:	f240 1301 	movw	r3, #257	@ 0x101
 800d3f6:	4617      	mov	r7, r2
 800d3f8:	8183      	strh	r3, [r0, #12]
 800d3fa:	460c      	mov	r4, r1
 800d3fc:	46a8      	mov	r8, r5
 800d3fe:	4621      	mov	r1, r4
 800d400:	4630      	mov	r0, r6
 800d402:	3501      	adds	r5, #1
 800d404:	f009 fc0c 	bl	8016c20 <put_memory>
 800d408:	42af      	cmp	r7, r5
 800d40a:	60a4      	str	r4, [r4, #8]
 800d40c:	f884 800c 	strb.w	r8, [r4, #12]
 800d410:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 800d414:	d1f3      	bne.n	800d3fe <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800d416:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d41a:	4770      	bx	lr

0800d41c <rmw_uxrce_init_init_options_impl_memory>:
 800d41c:	b1e2      	cbz	r2, 800d458 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800d41e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d422:	7b05      	ldrb	r5, [r0, #12]
 800d424:	4606      	mov	r6, r0
 800d426:	b9ad      	cbnz	r5, 800d454 <rmw_uxrce_init_init_options_impl_memory+0x38>
 800d428:	232c      	movs	r3, #44	@ 0x2c
 800d42a:	e9c0 5500 	strd	r5, r5, [r0]
 800d42e:	6083      	str	r3, [r0, #8]
 800d430:	f240 1301 	movw	r3, #257	@ 0x101
 800d434:	4617      	mov	r7, r2
 800d436:	8183      	strh	r3, [r0, #12]
 800d438:	460c      	mov	r4, r1
 800d43a:	46a8      	mov	r8, r5
 800d43c:	4621      	mov	r1, r4
 800d43e:	4630      	mov	r0, r6
 800d440:	3501      	adds	r5, #1
 800d442:	f009 fbed 	bl	8016c20 <put_memory>
 800d446:	42af      	cmp	r7, r5
 800d448:	60a4      	str	r4, [r4, #8]
 800d44a:	f884 800c 	strb.w	r8, [r4, #12]
 800d44e:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 800d452:	d1f3      	bne.n	800d43c <rmw_uxrce_init_init_options_impl_memory+0x20>
 800d454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d458:	4770      	bx	lr
 800d45a:	bf00      	nop

0800d45c <rmw_uxrce_init_wait_set_memory>:
 800d45c:	b1e2      	cbz	r2, 800d498 <rmw_uxrce_init_wait_set_memory+0x3c>
 800d45e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d462:	7b05      	ldrb	r5, [r0, #12]
 800d464:	4606      	mov	r6, r0
 800d466:	b9ad      	cbnz	r5, 800d494 <rmw_uxrce_init_wait_set_memory+0x38>
 800d468:	231c      	movs	r3, #28
 800d46a:	e9c0 5500 	strd	r5, r5, [r0]
 800d46e:	6083      	str	r3, [r0, #8]
 800d470:	f240 1301 	movw	r3, #257	@ 0x101
 800d474:	4617      	mov	r7, r2
 800d476:	8183      	strh	r3, [r0, #12]
 800d478:	460c      	mov	r4, r1
 800d47a:	46a8      	mov	r8, r5
 800d47c:	4621      	mov	r1, r4
 800d47e:	4630      	mov	r0, r6
 800d480:	3501      	adds	r5, #1
 800d482:	f009 fbcd 	bl	8016c20 <put_memory>
 800d486:	42af      	cmp	r7, r5
 800d488:	60a4      	str	r4, [r4, #8]
 800d48a:	f884 800c 	strb.w	r8, [r4, #12]
 800d48e:	f104 041c 	add.w	r4, r4, #28
 800d492:	d1f3      	bne.n	800d47c <rmw_uxrce_init_wait_set_memory+0x20>
 800d494:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d498:	4770      	bx	lr
 800d49a:	bf00      	nop

0800d49c <rmw_uxrce_init_guard_condition_memory>:
 800d49c:	b1e2      	cbz	r2, 800d4d8 <rmw_uxrce_init_guard_condition_memory+0x3c>
 800d49e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4a2:	7b05      	ldrb	r5, [r0, #12]
 800d4a4:	4606      	mov	r6, r0
 800d4a6:	b9ad      	cbnz	r5, 800d4d4 <rmw_uxrce_init_guard_condition_memory+0x38>
 800d4a8:	2320      	movs	r3, #32
 800d4aa:	e9c0 5500 	strd	r5, r5, [r0]
 800d4ae:	6083      	str	r3, [r0, #8]
 800d4b0:	f240 1301 	movw	r3, #257	@ 0x101
 800d4b4:	4617      	mov	r7, r2
 800d4b6:	8183      	strh	r3, [r0, #12]
 800d4b8:	460c      	mov	r4, r1
 800d4ba:	46a8      	mov	r8, r5
 800d4bc:	4621      	mov	r1, r4
 800d4be:	4630      	mov	r0, r6
 800d4c0:	3501      	adds	r5, #1
 800d4c2:	f009 fbad 	bl	8016c20 <put_memory>
 800d4c6:	42af      	cmp	r7, r5
 800d4c8:	60a4      	str	r4, [r4, #8]
 800d4ca:	f884 800c 	strb.w	r8, [r4, #12]
 800d4ce:	f104 0420 	add.w	r4, r4, #32
 800d4d2:	d1f3      	bne.n	800d4bc <rmw_uxrce_init_guard_condition_memory+0x20>
 800d4d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4d8:	4770      	bx	lr
 800d4da:	bf00      	nop

0800d4dc <rmw_uxrce_fini_session_memory>:
 800d4dc:	4601      	mov	r1, r0
 800d4de:	4801      	ldr	r0, [pc, #4]	@ (800d4e4 <rmw_uxrce_fini_session_memory+0x8>)
 800d4e0:	f009 bb9e 	b.w	8016c20 <put_memory>
 800d4e4:	20015be4 	.word	0x20015be4

0800d4e8 <rmw_uxrce_fini_node_memory>:
 800d4e8:	b538      	push	{r3, r4, r5, lr}
 800d4ea:	4604      	mov	r4, r0
 800d4ec:	6800      	ldr	r0, [r0, #0]
 800d4ee:	b128      	cbz	r0, 800d4fc <rmw_uxrce_fini_node_memory+0x14>
 800d4f0:	4b07      	ldr	r3, [pc, #28]	@ (800d510 <rmw_uxrce_fini_node_memory+0x28>)
 800d4f2:	6819      	ldr	r1, [r3, #0]
 800d4f4:	f7f2 fe84 	bl	8000200 <strcmp>
 800d4f8:	b940      	cbnz	r0, 800d50c <rmw_uxrce_fini_node_memory+0x24>
 800d4fa:	6020      	str	r0, [r4, #0]
 800d4fc:	6861      	ldr	r1, [r4, #4]
 800d4fe:	b129      	cbz	r1, 800d50c <rmw_uxrce_fini_node_memory+0x24>
 800d500:	2500      	movs	r5, #0
 800d502:	4804      	ldr	r0, [pc, #16]	@ (800d514 <rmw_uxrce_fini_node_memory+0x2c>)
 800d504:	610d      	str	r5, [r1, #16]
 800d506:	f009 fb8b 	bl	8016c20 <put_memory>
 800d50a:	6065      	str	r5, [r4, #4]
 800d50c:	bd38      	pop	{r3, r4, r5, pc}
 800d50e:	bf00      	nop
 800d510:	0801dce0 	.word	0x0801dce0
 800d514:	20015bb4 	.word	0x20015bb4

0800d518 <rmw_uxrce_fini_publisher_memory>:
 800d518:	b510      	push	{r4, lr}
 800d51a:	4604      	mov	r4, r0
 800d51c:	6800      	ldr	r0, [r0, #0]
 800d51e:	b128      	cbz	r0, 800d52c <rmw_uxrce_fini_publisher_memory+0x14>
 800d520:	4b06      	ldr	r3, [pc, #24]	@ (800d53c <rmw_uxrce_fini_publisher_memory+0x24>)
 800d522:	6819      	ldr	r1, [r3, #0]
 800d524:	f7f2 fe6c 	bl	8000200 <strcmp>
 800d528:	b938      	cbnz	r0, 800d53a <rmw_uxrce_fini_publisher_memory+0x22>
 800d52a:	6020      	str	r0, [r4, #0]
 800d52c:	6861      	ldr	r1, [r4, #4]
 800d52e:	b121      	cbz	r1, 800d53a <rmw_uxrce_fini_publisher_memory+0x22>
 800d530:	4803      	ldr	r0, [pc, #12]	@ (800d540 <rmw_uxrce_fini_publisher_memory+0x28>)
 800d532:	f009 fb75 	bl	8016c20 <put_memory>
 800d536:	2300      	movs	r3, #0
 800d538:	6063      	str	r3, [r4, #4]
 800d53a:	bd10      	pop	{r4, pc}
 800d53c:	0801dce0 	.word	0x0801dce0
 800d540:	20015bc4 	.word	0x20015bc4

0800d544 <rmw_uxrce_fini_subscription_memory>:
 800d544:	b510      	push	{r4, lr}
 800d546:	4604      	mov	r4, r0
 800d548:	6800      	ldr	r0, [r0, #0]
 800d54a:	b128      	cbz	r0, 800d558 <rmw_uxrce_fini_subscription_memory+0x14>
 800d54c:	4b06      	ldr	r3, [pc, #24]	@ (800d568 <rmw_uxrce_fini_subscription_memory+0x24>)
 800d54e:	6819      	ldr	r1, [r3, #0]
 800d550:	f7f2 fe56 	bl	8000200 <strcmp>
 800d554:	b938      	cbnz	r0, 800d566 <rmw_uxrce_fini_subscription_memory+0x22>
 800d556:	6020      	str	r0, [r4, #0]
 800d558:	6861      	ldr	r1, [r4, #4]
 800d55a:	b121      	cbz	r1, 800d566 <rmw_uxrce_fini_subscription_memory+0x22>
 800d55c:	4803      	ldr	r0, [pc, #12]	@ (800d56c <rmw_uxrce_fini_subscription_memory+0x28>)
 800d55e:	f009 fb5f 	bl	8016c20 <put_memory>
 800d562:	2300      	movs	r3, #0
 800d564:	6063      	str	r3, [r4, #4]
 800d566:	bd10      	pop	{r4, pc}
 800d568:	0801dce0 	.word	0x0801dce0
 800d56c:	20015c04 	.word	0x20015c04

0800d570 <rmw_uxrce_fini_service_memory>:
 800d570:	b510      	push	{r4, lr}
 800d572:	4604      	mov	r4, r0
 800d574:	6800      	ldr	r0, [r0, #0]
 800d576:	b128      	cbz	r0, 800d584 <rmw_uxrce_fini_service_memory+0x14>
 800d578:	4b06      	ldr	r3, [pc, #24]	@ (800d594 <rmw_uxrce_fini_service_memory+0x24>)
 800d57a:	6819      	ldr	r1, [r3, #0]
 800d57c:	f7f2 fe40 	bl	8000200 <strcmp>
 800d580:	b938      	cbnz	r0, 800d592 <rmw_uxrce_fini_service_memory+0x22>
 800d582:	6020      	str	r0, [r4, #0]
 800d584:	6861      	ldr	r1, [r4, #4]
 800d586:	b121      	cbz	r1, 800d592 <rmw_uxrce_fini_service_memory+0x22>
 800d588:	4803      	ldr	r0, [pc, #12]	@ (800d598 <rmw_uxrce_fini_service_memory+0x28>)
 800d58a:	f009 fb49 	bl	8016c20 <put_memory>
 800d58e:	2300      	movs	r3, #0
 800d590:	6063      	str	r3, [r4, #4]
 800d592:	bd10      	pop	{r4, pc}
 800d594:	0801dce0 	.word	0x0801dce0
 800d598:	20015bd4 	.word	0x20015bd4

0800d59c <rmw_uxrce_fini_client_memory>:
 800d59c:	b510      	push	{r4, lr}
 800d59e:	4604      	mov	r4, r0
 800d5a0:	6800      	ldr	r0, [r0, #0]
 800d5a2:	b128      	cbz	r0, 800d5b0 <rmw_uxrce_fini_client_memory+0x14>
 800d5a4:	4b06      	ldr	r3, [pc, #24]	@ (800d5c0 <rmw_uxrce_fini_client_memory+0x24>)
 800d5a6:	6819      	ldr	r1, [r3, #0]
 800d5a8:	f7f2 fe2a 	bl	8000200 <strcmp>
 800d5ac:	b938      	cbnz	r0, 800d5be <rmw_uxrce_fini_client_memory+0x22>
 800d5ae:	6020      	str	r0, [r4, #0]
 800d5b0:	6861      	ldr	r1, [r4, #4]
 800d5b2:	b121      	cbz	r1, 800d5be <rmw_uxrce_fini_client_memory+0x22>
 800d5b4:	4803      	ldr	r0, [pc, #12]	@ (800d5c4 <rmw_uxrce_fini_client_memory+0x28>)
 800d5b6:	f009 fb33 	bl	8016c20 <put_memory>
 800d5ba:	2300      	movs	r3, #0
 800d5bc:	6063      	str	r3, [r4, #4]
 800d5be:	bd10      	pop	{r4, pc}
 800d5c0:	0801dce0 	.word	0x0801dce0
 800d5c4:	20010e38 	.word	0x20010e38

0800d5c8 <rmw_uxrce_fini_topic_memory>:
 800d5c8:	b510      	push	{r4, lr}
 800d5ca:	4604      	mov	r4, r0
 800d5cc:	4621      	mov	r1, r4
 800d5ce:	4803      	ldr	r0, [pc, #12]	@ (800d5dc <rmw_uxrce_fini_topic_memory+0x14>)
 800d5d0:	f009 fb26 	bl	8016c20 <put_memory>
 800d5d4:	2300      	movs	r3, #0
 800d5d6:	61a3      	str	r3, [r4, #24]
 800d5d8:	bd10      	pop	{r4, pc}
 800d5da:	bf00      	nop
 800d5dc:	20015c14 	.word	0x20015c14

0800d5e0 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800d5e0:	b082      	sub	sp, #8
 800d5e2:	b530      	push	{r4, r5, lr}
 800d5e4:	4925      	ldr	r1, [pc, #148]	@ (800d67c <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800d5e6:	680d      	ldr	r5, [r1, #0]
 800d5e8:	ac03      	add	r4, sp, #12
 800d5ea:	e884 000c 	stmia.w	r4, {r2, r3}
 800d5ee:	461c      	mov	r4, r3
 800d5f0:	2d00      	cmp	r5, #0
 800d5f2:	d041      	beq.n	800d678 <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 800d5f4:	462b      	mov	r3, r5
 800d5f6:	2100      	movs	r1, #0
 800d5f8:	689a      	ldr	r2, [r3, #8]
 800d5fa:	685b      	ldr	r3, [r3, #4]
 800d5fc:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 800d600:	4290      	cmp	r0, r2
 800d602:	bf08      	it	eq
 800d604:	3101      	addeq	r1, #1
 800d606:	2b00      	cmp	r3, #0
 800d608:	d1f6      	bne.n	800d5f8 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800d60a:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800d60e:	2b02      	cmp	r3, #2
 800d610:	d029      	beq.n	800d666 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800d612:	d907      	bls.n	800d624 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800d614:	2b03      	cmp	r3, #3
 800d616:	d005      	beq.n	800d624 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800d618:	2100      	movs	r1, #0
 800d61a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d61e:	4608      	mov	r0, r1
 800d620:	b002      	add	sp, #8
 800d622:	4770      	bx	lr
 800d624:	b314      	cbz	r4, 800d66c <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800d626:	428c      	cmp	r4, r1
 800d628:	d820      	bhi.n	800d66c <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800d62a:	2d00      	cmp	r5, #0
 800d62c:	d0f4      	beq.n	800d618 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800d62e:	2100      	movs	r1, #0
 800d630:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 800d634:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 800d638:	e002      	b.n	800d640 <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 800d63a:	686d      	ldr	r5, [r5, #4]
 800d63c:	2d00      	cmp	r5, #0
 800d63e:	d0ec      	beq.n	800d61a <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800d640:	68ab      	ldr	r3, [r5, #8]
 800d642:	f8d3 2814 	ldr.w	r2, [r3, #2068]	@ 0x814
 800d646:	4290      	cmp	r0, r2
 800d648:	d1f7      	bne.n	800d63a <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800d64a:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 800d64e:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 800d652:	4562      	cmp	r2, ip
 800d654:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800d658:	eb73 0e04 	sbcs.w	lr, r3, r4
 800d65c:	daed      	bge.n	800d63a <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800d65e:	4694      	mov	ip, r2
 800d660:	461c      	mov	r4, r3
 800d662:	4629      	mov	r1, r5
 800d664:	e7e9      	b.n	800d63a <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800d666:	b10c      	cbz	r4, 800d66c <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800d668:	428c      	cmp	r4, r1
 800d66a:	d9d5      	bls.n	800d618 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800d66c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d670:	4802      	ldr	r0, [pc, #8]	@ (800d67c <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800d672:	b002      	add	sp, #8
 800d674:	f009 bac4 	b.w	8016c00 <get_memory>
 800d678:	4629      	mov	r1, r5
 800d67a:	e7c6      	b.n	800d60a <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800d67c:	20015bf4 	.word	0x20015bf4

0800d680 <rmw_uxrce_find_static_input_buffer_by_owner>:
 800d680:	4b11      	ldr	r3, [pc, #68]	@ (800d6c8 <rmw_uxrce_find_static_input_buffer_by_owner+0x48>)
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	b530      	push	{r4, r5, lr}
 800d686:	b1e3      	cbz	r3, 800d6c2 <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 800d688:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 800d68c:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 800d690:	2400      	movs	r4, #0
 800d692:	e001      	b.n	800d698 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800d694:	685b      	ldr	r3, [r3, #4]
 800d696:	b193      	cbz	r3, 800d6be <rmw_uxrce_find_static_input_buffer_by_owner+0x3e>
 800d698:	689a      	ldr	r2, [r3, #8]
 800d69a:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 800d69e:	4288      	cmp	r0, r1
 800d6a0:	d1f8      	bne.n	800d694 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800d6a2:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 800d6a6:	f8d2 281c 	ldr.w	r2, [r2, #2076]	@ 0x81c
 800d6aa:	4571      	cmp	r1, lr
 800d6ac:	eb72 050c 	sbcs.w	r5, r2, ip
 800d6b0:	daf0      	bge.n	800d694 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800d6b2:	461c      	mov	r4, r3
 800d6b4:	685b      	ldr	r3, [r3, #4]
 800d6b6:	468e      	mov	lr, r1
 800d6b8:	4694      	mov	ip, r2
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d1ec      	bne.n	800d698 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800d6be:	4620      	mov	r0, r4
 800d6c0:	bd30      	pop	{r4, r5, pc}
 800d6c2:	461c      	mov	r4, r3
 800d6c4:	4620      	mov	r0, r4
 800d6c6:	bd30      	pop	{r4, r5, pc}
 800d6c8:	20015bf4 	.word	0x20015bf4
 800d6cc:	00000000 	.word	0x00000000

0800d6d0 <rmw_uxrce_clean_expired_static_input_buffer>:
 800d6d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6d4:	4b3c      	ldr	r3, [pc, #240]	@ (800d7c8 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800d6d6:	ed2d 8b06 	vpush	{d8-d10}
 800d6da:	681f      	ldr	r7, [r3, #0]
 800d6dc:	b08d      	sub	sp, #52	@ 0x34
 800d6de:	f00a fcbf 	bl	8018060 <rmw_uros_epoch_nanos>
 800d6e2:	2f00      	cmp	r7, #0
 800d6e4:	d05d      	beq.n	800d7a2 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800d6e6:	46b8      	mov	r8, r7
 800d6e8:	ed9f 8b31 	vldr	d8, [pc, #196]	@ 800d7b0 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 800d6ec:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800d6f0:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800d6f4:	2b04      	cmp	r3, #4
 800d6f6:	ed9f ab30 	vldr	d10, [pc, #192]	@ 800d7b8 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 800d6fa:	ed9f 9b31 	vldr	d9, [pc, #196]	@ 800d7c0 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 800d6fe:	4681      	mov	r9, r0
 800d700:	468a      	mov	sl, r1
 800d702:	ac04      	add	r4, sp, #16
 800d704:	d03f      	beq.n	800d786 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800d706:	2b05      	cmp	r3, #5
 800d708:	d044      	beq.n	800d794 <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 800d70a:	2b03      	cmp	r3, #3
 800d70c:	d03b      	beq.n	800d786 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800d70e:	ed8d 8b04 	vstr	d8, [sp, #16]
 800d712:	ed8d ab06 	vstr	d10, [sp, #24]
 800d716:	ed8d 8b08 	vstr	d8, [sp, #32]
 800d71a:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 800d71e:	ab08      	add	r3, sp, #32
 800d720:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d722:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800d726:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800d72a:	f009 f89d 	bl	8016868 <rmw_time_equal>
 800d72e:	b118      	cbz	r0, 800d738 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 800d730:	ed8d 9b04 	vstr	d9, [sp, #16]
 800d734:	ed8d 8b06 	vstr	d8, [sp, #24]
 800d738:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800d73c:	f8d5 6818 	ldr.w	r6, [r5, #2072]	@ 0x818
 800d740:	f8d5 781c 	ldr.w	r7, [r5, #2076]	@ 0x81c
 800d744:	f8d8 b004 	ldr.w	fp, [r8, #4]
 800d748:	f009 f8e2 	bl	8016910 <rmw_time_total_nsec>
 800d74c:	1830      	adds	r0, r6, r0
 800d74e:	eb47 0101 	adc.w	r1, r7, r1
 800d752:	4548      	cmp	r0, r9
 800d754:	eb71 030a 	sbcs.w	r3, r1, sl
 800d758:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 800d75c:	db05      	blt.n	800d76a <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 800d75e:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 800d762:	4591      	cmp	r9, r2
 800d764:	eb7a 0303 	sbcs.w	r3, sl, r3
 800d768:	da03      	bge.n	800d772 <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 800d76a:	4817      	ldr	r0, [pc, #92]	@ (800d7c8 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800d76c:	4641      	mov	r1, r8
 800d76e:	f009 fa57 	bl	8016c20 <put_memory>
 800d772:	f1bb 0f00 	cmp.w	fp, #0
 800d776:	d014      	beq.n	800d7a2 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800d778:	46d8      	mov	r8, fp
 800d77a:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800d77e:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800d782:	2b04      	cmp	r3, #4
 800d784:	d1bf      	bne.n	800d706 <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 800d786:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800d78a:	3340      	adds	r3, #64	@ 0x40
 800d78c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d78e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800d792:	e7c0      	b.n	800d716 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800d794:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800d798:	3348      	adds	r3, #72	@ 0x48
 800d79a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d79c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800d7a0:	e7b9      	b.n	800d716 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800d7a2:	b00d      	add	sp, #52	@ 0x34
 800d7a4:	ecbd 8b06 	vpop	{d8-d10}
 800d7a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7ac:	f3af 8000 	nop.w
	...
 800d7b8:	00000001 	.word	0x00000001
 800d7bc:	00000000 	.word	0x00000000
 800d7c0:	0000001e 	.word	0x0000001e
 800d7c4:	00000000 	.word	0x00000000
 800d7c8:	20015bf4 	.word	0x20015bf4

0800d7cc <run_xrce_session>:
 800d7cc:	b510      	push	{r4, lr}
 800d7ce:	788c      	ldrb	r4, [r1, #2]
 800d7d0:	b086      	sub	sp, #24
 800d7d2:	2c01      	cmp	r4, #1
 800d7d4:	f8ad 200e 	strh.w	r2, [sp, #14]
 800d7d8:	d00c      	beq.n	800d7f4 <run_xrce_session+0x28>
 800d7da:	4619      	mov	r1, r3
 800d7dc:	2301      	movs	r3, #1
 800d7de:	9300      	str	r3, [sp, #0]
 800d7e0:	f10d 020e 	add.w	r2, sp, #14
 800d7e4:	f10d 0317 	add.w	r3, sp, #23
 800d7e8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800d7ec:	f003 fed2 	bl	8011594 <uxr_run_session_until_all_status>
 800d7f0:	b006      	add	sp, #24
 800d7f2:	bd10      	pop	{r4, pc}
 800d7f4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800d7f8:	f003 fae6 	bl	8010dc8 <uxr_flash_output_streams>
 800d7fc:	4620      	mov	r0, r4
 800d7fe:	b006      	add	sp, #24
 800d800:	bd10      	pop	{r4, pc}
 800d802:	bf00      	nop

0800d804 <convert_qos_profile>:
 800d804:	7a4a      	ldrb	r2, [r1, #9]
 800d806:	f891 c008 	ldrb.w	ip, [r1, #8]
 800d80a:	2a02      	cmp	r2, #2
 800d80c:	bf18      	it	ne
 800d80e:	2200      	movne	r2, #0
 800d810:	7002      	strb	r2, [r0, #0]
 800d812:	780a      	ldrb	r2, [r1, #0]
 800d814:	8889      	ldrh	r1, [r1, #4]
 800d816:	8081      	strh	r1, [r0, #4]
 800d818:	f1ac 0c02 	sub.w	ip, ip, #2
 800d81c:	f1a2 0202 	sub.w	r2, r2, #2
 800d820:	fabc fc8c 	clz	ip, ip
 800d824:	fab2 f282 	clz	r2, r2
 800d828:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800d82c:	0952      	lsrs	r2, r2, #5
 800d82e:	f880 c001 	strb.w	ip, [r0, #1]
 800d832:	7082      	strb	r2, [r0, #2]
 800d834:	4770      	bx	lr
 800d836:	bf00      	nop

0800d838 <generate_service_topics>:
 800d838:	b570      	push	{r4, r5, r6, lr}
 800d83a:	b082      	sub	sp, #8
 800d83c:	461c      	mov	r4, r3
 800d83e:	4b12      	ldr	r3, [pc, #72]	@ (800d888 <generate_service_topics+0x50>)
 800d840:	9301      	str	r3, [sp, #4]
 800d842:	4605      	mov	r5, r0
 800d844:	4b11      	ldr	r3, [pc, #68]	@ (800d88c <generate_service_topics+0x54>)
 800d846:	9000      	str	r0, [sp, #0]
 800d848:	4616      	mov	r6, r2
 800d84a:	4608      	mov	r0, r1
 800d84c:	4a10      	ldr	r2, [pc, #64]	@ (800d890 <generate_service_topics+0x58>)
 800d84e:	4621      	mov	r1, r4
 800d850:	f00d fa58 	bl	801ad04 <sniprintf>
 800d854:	4b0f      	ldr	r3, [pc, #60]	@ (800d894 <generate_service_topics+0x5c>)
 800d856:	9301      	str	r3, [sp, #4]
 800d858:	4601      	mov	r1, r0
 800d85a:	9500      	str	r5, [sp, #0]
 800d85c:	4b0e      	ldr	r3, [pc, #56]	@ (800d898 <generate_service_topics+0x60>)
 800d85e:	4a0c      	ldr	r2, [pc, #48]	@ (800d890 <generate_service_topics+0x58>)
 800d860:	460d      	mov	r5, r1
 800d862:	4630      	mov	r0, r6
 800d864:	4621      	mov	r1, r4
 800d866:	f00d fa4d 	bl	801ad04 <sniprintf>
 800d86a:	2d00      	cmp	r5, #0
 800d86c:	db01      	blt.n	800d872 <generate_service_topics+0x3a>
 800d86e:	42ac      	cmp	r4, r5
 800d870:	dc02      	bgt.n	800d878 <generate_service_topics+0x40>
 800d872:	2000      	movs	r0, #0
 800d874:	b002      	add	sp, #8
 800d876:	bd70      	pop	{r4, r5, r6, pc}
 800d878:	2800      	cmp	r0, #0
 800d87a:	dbfa      	blt.n	800d872 <generate_service_topics+0x3a>
 800d87c:	4284      	cmp	r4, r0
 800d87e:	bfd4      	ite	le
 800d880:	2000      	movle	r0, #0
 800d882:	2001      	movgt	r0, #1
 800d884:	b002      	add	sp, #8
 800d886:	bd70      	pop	{r4, r5, r6, pc}
 800d888:	0801d9ac 	.word	0x0801d9ac
 800d88c:	0801d9a8 	.word	0x0801d9a8
 800d890:	0801cbec 	.word	0x0801cbec
 800d894:	0801d9a0 	.word	0x0801d9a0
 800d898:	0801d99c 	.word	0x0801d99c

0800d89c <generate_service_types>:
 800d89c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d8a0:	4605      	mov	r5, r0
 800d8a2:	b086      	sub	sp, #24
 800d8a4:	6880      	ldr	r0, [r0, #8]
 800d8a6:	460c      	mov	r4, r1
 800d8a8:	4617      	mov	r7, r2
 800d8aa:	461e      	mov	r6, r3
 800d8ac:	4780      	blx	r0
 800d8ae:	68eb      	ldr	r3, [r5, #12]
 800d8b0:	4680      	mov	r8, r0
 800d8b2:	4798      	blx	r3
 800d8b4:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800d8b8:	f8d0 9004 	ldr.w	r9, [r0, #4]
 800d8bc:	2300      	movs	r3, #0
 800d8be:	7023      	strb	r3, [r4, #0]
 800d8c0:	6813      	ldr	r3, [r2, #0]
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d042      	beq.n	800d94c <generate_service_types+0xb0>
 800d8c6:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 800d960 <generate_service_types+0xc4>
 800d8ca:	4641      	mov	r1, r8
 800d8cc:	4620      	mov	r0, r4
 800d8ce:	4c22      	ldr	r4, [pc, #136]	@ (800d958 <generate_service_types+0xbc>)
 800d8d0:	9405      	str	r4, [sp, #20]
 800d8d2:	6852      	ldr	r2, [r2, #4]
 800d8d4:	f8df a090 	ldr.w	sl, [pc, #144]	@ 800d968 <generate_service_types+0xcc>
 800d8d8:	9204      	str	r2, [sp, #16]
 800d8da:	9100      	str	r1, [sp, #0]
 800d8dc:	e9cd 4802 	strd	r4, r8, [sp, #8]
 800d8e0:	4a1e      	ldr	r2, [pc, #120]	@ (800d95c <generate_service_types+0xc0>)
 800d8e2:	f8cd a004 	str.w	sl, [sp, #4]
 800d8e6:	4631      	mov	r1, r6
 800d8e8:	f00d fa0c 	bl	801ad04 <sniprintf>
 800d8ec:	2800      	cmp	r0, #0
 800d8ee:	db1f      	blt.n	800d930 <generate_service_types+0x94>
 800d8f0:	2300      	movs	r3, #0
 800d8f2:	703b      	strb	r3, [r7, #0]
 800d8f4:	f8d9 3000 	ldr.w	r3, [r9]
 800d8f8:	42b0      	cmp	r0, r6
 800d8fa:	bfac      	ite	ge
 800d8fc:	2500      	movge	r5, #0
 800d8fe:	2501      	movlt	r5, #1
 800d900:	b1eb      	cbz	r3, 800d93e <generate_service_types+0xa2>
 800d902:	4a17      	ldr	r2, [pc, #92]	@ (800d960 <generate_service_types+0xc4>)
 800d904:	9405      	str	r4, [sp, #20]
 800d906:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d90a:	9200      	str	r2, [sp, #0]
 800d90c:	e9cd 8103 	strd	r8, r1, [sp, #12]
 800d910:	e9cd a401 	strd	sl, r4, [sp, #4]
 800d914:	4a11      	ldr	r2, [pc, #68]	@ (800d95c <generate_service_types+0xc0>)
 800d916:	4638      	mov	r0, r7
 800d918:	4631      	mov	r1, r6
 800d91a:	f00d f9f3 	bl	801ad04 <sniprintf>
 800d91e:	2800      	cmp	r0, #0
 800d920:	db10      	blt.n	800d944 <generate_service_types+0xa8>
 800d922:	42b0      	cmp	r0, r6
 800d924:	bfb4      	ite	lt
 800d926:	4628      	movlt	r0, r5
 800d928:	2000      	movge	r0, #0
 800d92a:	b006      	add	sp, #24
 800d92c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d930:	2300      	movs	r3, #0
 800d932:	703b      	strb	r3, [r7, #0]
 800d934:	f8d9 3000 	ldr.w	r3, [r9]
 800d938:	2500      	movs	r5, #0
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d1e1      	bne.n	800d902 <generate_service_types+0x66>
 800d93e:	4b09      	ldr	r3, [pc, #36]	@ (800d964 <generate_service_types+0xc8>)
 800d940:	461a      	mov	r2, r3
 800d942:	e7df      	b.n	800d904 <generate_service_types+0x68>
 800d944:	2000      	movs	r0, #0
 800d946:	b006      	add	sp, #24
 800d948:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d94c:	4b05      	ldr	r3, [pc, #20]	@ (800d964 <generate_service_types+0xc8>)
 800d94e:	f8df 8010 	ldr.w	r8, [pc, #16]	@ 800d960 <generate_service_types+0xc4>
 800d952:	4619      	mov	r1, r3
 800d954:	e7ba      	b.n	800d8cc <generate_service_types+0x30>
 800d956:	bf00      	nop
 800d958:	0801cbf4 	.word	0x0801cbf4
 800d95c:	0801cbe4 	.word	0x0801cbe4
 800d960:	0801cbe0 	.word	0x0801cbe0
 800d964:	0801d5a4 	.word	0x0801d5a4
 800d968:	0801cbf8 	.word	0x0801cbf8

0800d96c <generate_type_name>:
 800d96c:	b530      	push	{r4, r5, lr}
 800d96e:	2300      	movs	r3, #0
 800d970:	700b      	strb	r3, [r1, #0]
 800d972:	6803      	ldr	r3, [r0, #0]
 800d974:	b087      	sub	sp, #28
 800d976:	4614      	mov	r4, r2
 800d978:	b1d3      	cbz	r3, 800d9b0 <generate_type_name+0x44>
 800d97a:	4a0f      	ldr	r2, [pc, #60]	@ (800d9b8 <generate_type_name+0x4c>)
 800d97c:	4615      	mov	r5, r2
 800d97e:	9203      	str	r2, [sp, #12]
 800d980:	9500      	str	r5, [sp, #0]
 800d982:	6842      	ldr	r2, [r0, #4]
 800d984:	480d      	ldr	r0, [pc, #52]	@ (800d9bc <generate_type_name+0x50>)
 800d986:	9001      	str	r0, [sp, #4]
 800d988:	4608      	mov	r0, r1
 800d98a:	490d      	ldr	r1, [pc, #52]	@ (800d9c0 <generate_type_name+0x54>)
 800d98c:	9204      	str	r2, [sp, #16]
 800d98e:	9105      	str	r1, [sp, #20]
 800d990:	9102      	str	r1, [sp, #8]
 800d992:	4a0c      	ldr	r2, [pc, #48]	@ (800d9c4 <generate_type_name+0x58>)
 800d994:	4621      	mov	r1, r4
 800d996:	f00d f9b5 	bl	801ad04 <sniprintf>
 800d99a:	2800      	cmp	r0, #0
 800d99c:	db05      	blt.n	800d9aa <generate_type_name+0x3e>
 800d99e:	4284      	cmp	r4, r0
 800d9a0:	bfd4      	ite	le
 800d9a2:	2000      	movle	r0, #0
 800d9a4:	2001      	movgt	r0, #1
 800d9a6:	b007      	add	sp, #28
 800d9a8:	bd30      	pop	{r4, r5, pc}
 800d9aa:	2000      	movs	r0, #0
 800d9ac:	b007      	add	sp, #28
 800d9ae:	bd30      	pop	{r4, r5, pc}
 800d9b0:	4b05      	ldr	r3, [pc, #20]	@ (800d9c8 <generate_type_name+0x5c>)
 800d9b2:	4a01      	ldr	r2, [pc, #4]	@ (800d9b8 <generate_type_name+0x4c>)
 800d9b4:	461d      	mov	r5, r3
 800d9b6:	e7e2      	b.n	800d97e <generate_type_name+0x12>
 800d9b8:	0801cbe0 	.word	0x0801cbe0
 800d9bc:	0801cbf8 	.word	0x0801cbf8
 800d9c0:	0801cbf4 	.word	0x0801cbf4
 800d9c4:	0801cbe4 	.word	0x0801cbe4
 800d9c8:	0801d5a4 	.word	0x0801d5a4

0800d9cc <generate_topic_name>:
 800d9cc:	b510      	push	{r4, lr}
 800d9ce:	b082      	sub	sp, #8
 800d9d0:	4614      	mov	r4, r2
 800d9d2:	9000      	str	r0, [sp, #0]
 800d9d4:	4b08      	ldr	r3, [pc, #32]	@ (800d9f8 <generate_topic_name+0x2c>)
 800d9d6:	4a09      	ldr	r2, [pc, #36]	@ (800d9fc <generate_topic_name+0x30>)
 800d9d8:	4608      	mov	r0, r1
 800d9da:	4621      	mov	r1, r4
 800d9dc:	f00d f992 	bl	801ad04 <sniprintf>
 800d9e0:	2800      	cmp	r0, #0
 800d9e2:	db05      	blt.n	800d9f0 <generate_topic_name+0x24>
 800d9e4:	4284      	cmp	r4, r0
 800d9e6:	bfd4      	ite	le
 800d9e8:	2000      	movle	r0, #0
 800d9ea:	2001      	movgt	r0, #1
 800d9ec:	b002      	add	sp, #8
 800d9ee:	bd10      	pop	{r4, pc}
 800d9f0:	2000      	movs	r0, #0
 800d9f2:	b002      	add	sp, #8
 800d9f4:	bd10      	pop	{r4, pc}
 800d9f6:	bf00      	nop
 800d9f8:	0801d9b4 	.word	0x0801d9b4
 800d9fc:	0801cbfc 	.word	0x0801cbfc

0800da00 <is_uxrce_rmw_identifier_valid>:
 800da00:	b510      	push	{r4, lr}
 800da02:	4604      	mov	r4, r0
 800da04:	b140      	cbz	r0, 800da18 <is_uxrce_rmw_identifier_valid+0x18>
 800da06:	f009 f963 	bl	8016cd0 <rmw_get_implementation_identifier>
 800da0a:	4601      	mov	r1, r0
 800da0c:	4620      	mov	r0, r4
 800da0e:	f7f2 fbf7 	bl	8000200 <strcmp>
 800da12:	fab0 f080 	clz	r0, r0
 800da16:	0940      	lsrs	r0, r0, #5
 800da18:	bd10      	pop	{r4, pc}
 800da1a:	bf00      	nop

0800da1c <get_message_typesupport_handle>:
 800da1c:	6883      	ldr	r3, [r0, #8]
 800da1e:	4718      	bx	r3

0800da20 <get_message_typesupport_handle_function>:
 800da20:	b510      	push	{r4, lr}
 800da22:	4604      	mov	r4, r0
 800da24:	6800      	ldr	r0, [r0, #0]
 800da26:	f7f2 fbeb 	bl	8000200 <strcmp>
 800da2a:	2800      	cmp	r0, #0
 800da2c:	bf0c      	ite	eq
 800da2e:	4620      	moveq	r0, r4
 800da30:	2000      	movne	r0, #0
 800da32:	bd10      	pop	{r4, pc}

0800da34 <get_service_typesupport_handle>:
 800da34:	6883      	ldr	r3, [r0, #8]
 800da36:	4718      	bx	r3

0800da38 <get_service_typesupport_handle_function>:
 800da38:	b510      	push	{r4, lr}
 800da3a:	4604      	mov	r4, r0
 800da3c:	6800      	ldr	r0, [r0, #0]
 800da3e:	f7f2 fbdf 	bl	8000200 <strcmp>
 800da42:	2800      	cmp	r0, #0
 800da44:	bf0c      	ite	eq
 800da46:	4620      	moveq	r0, r4
 800da48:	2000      	movne	r0, #0
 800da4a:	bd10      	pop	{r4, pc}

0800da4c <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 800da4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da50:	6805      	ldr	r5, [r0, #0]
 800da52:	4604      	mov	r4, r0
 800da54:	4628      	mov	r0, r5
 800da56:	460e      	mov	r6, r1
 800da58:	f7f2 fbd2 	bl	8000200 <strcmp>
 800da5c:	b1c8      	cbz	r0, 800da92 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 800da5e:	4b11      	ldr	r3, [pc, #68]	@ (800daa4 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	429d      	cmp	r5, r3
 800da64:	d112      	bne.n	800da8c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800da66:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800da6a:	f8d8 4000 	ldr.w	r4, [r8]
 800da6e:	b16c      	cbz	r4, 800da8c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800da70:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800da74:	2700      	movs	r7, #0
 800da76:	3d04      	subs	r5, #4
 800da78:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800da7c:	4631      	mov	r1, r6
 800da7e:	f7f2 fbbf 	bl	8000200 <strcmp>
 800da82:	00bb      	lsls	r3, r7, #2
 800da84:	b140      	cbz	r0, 800da98 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 800da86:	3701      	adds	r7, #1
 800da88:	42bc      	cmp	r4, r7
 800da8a:	d1f5      	bne.n	800da78 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 800da8c:	2000      	movs	r0, #0
 800da8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da92:	4620      	mov	r0, r4
 800da94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da98:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800da9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800daa0:	58d3      	ldr	r3, [r2, r3]
 800daa2:	4718      	bx	r3
 800daa4:	20000388 	.word	0x20000388

0800daa8 <rosidl_typesupport_c__get_service_typesupport_handle_function>:
 800daa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800daac:	6805      	ldr	r5, [r0, #0]
 800daae:	4604      	mov	r4, r0
 800dab0:	4628      	mov	r0, r5
 800dab2:	460e      	mov	r6, r1
 800dab4:	f7f2 fba4 	bl	8000200 <strcmp>
 800dab8:	b1c8      	cbz	r0, 800daee <rosidl_typesupport_c__get_service_typesupport_handle_function+0x46>
 800daba:	4b11      	ldr	r3, [pc, #68]	@ (800db00 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x58>)
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	429d      	cmp	r5, r3
 800dac0:	d112      	bne.n	800dae8 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 800dac2:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800dac6:	f8d8 4000 	ldr.w	r4, [r8]
 800daca:	b16c      	cbz	r4, 800dae8 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 800dacc:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800dad0:	2700      	movs	r7, #0
 800dad2:	3d04      	subs	r5, #4
 800dad4:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800dad8:	4631      	mov	r1, r6
 800dada:	f7f2 fb91 	bl	8000200 <strcmp>
 800dade:	00bb      	lsls	r3, r7, #2
 800dae0:	b140      	cbz	r0, 800daf4 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x4c>
 800dae2:	3701      	adds	r7, #1
 800dae4:	42bc      	cmp	r4, r7
 800dae6:	d1f5      	bne.n	800dad4 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x2c>
 800dae8:	2000      	movs	r0, #0
 800daea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800daee:	4620      	mov	r0, r4
 800daf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800daf4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800daf8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dafc:	58d3      	ldr	r3, [r2, r3]
 800dafe:	4718      	bx	r3
 800db00:	20000388 	.word	0x20000388

0800db04 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 800db04:	4b04      	ldr	r3, [pc, #16]	@ (800db18 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x14>)
 800db06:	681a      	ldr	r2, [r3, #0]
 800db08:	b10a      	cbz	r2, 800db0e <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0xa>
 800db0a:	4803      	ldr	r0, [pc, #12]	@ (800db18 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x14>)
 800db0c:	4770      	bx	lr
 800db0e:	4a03      	ldr	r2, [pc, #12]	@ (800db1c <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x18>)
 800db10:	4801      	ldr	r0, [pc, #4]	@ (800db18 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x14>)
 800db12:	6812      	ldr	r2, [r2, #0]
 800db14:	601a      	str	r2, [r3, #0]
 800db16:	4770      	bx	lr
 800db18:	20000398 	.word	0x20000398
 800db1c:	20000388 	.word	0x20000388

0800db20 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 800db20:	4a02      	ldr	r2, [pc, #8]	@ (800db2c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0xc>)
 800db22:	4b03      	ldr	r3, [pc, #12]	@ (800db30 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x10>)
 800db24:	6812      	ldr	r2, [r2, #0]
 800db26:	601a      	str	r2, [r3, #0]
 800db28:	4770      	bx	lr
 800db2a:	bf00      	nop
 800db2c:	20000388 	.word	0x20000388
 800db30:	20000398 	.word	0x20000398

0800db34 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__size_function__Imu__orientation_covariance>:
 800db34:	2009      	movs	r0, #9
 800db36:	4770      	bx	lr

0800db38 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_const_function__Imu__orientation_covariance>:
 800db38:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800db3c:	4770      	bx	lr
 800db3e:	bf00      	nop

0800db40 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__fetch_function__Imu__orientation_covariance>:
 800db40:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800db44:	e9d1 0100 	ldrd	r0, r1, [r1]
 800db48:	e9c2 0100 	strd	r0, r1, [r2]
 800db4c:	4770      	bx	lr
 800db4e:	bf00      	nop

0800db50 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__assign_function__Imu__orientation_covariance>:
 800db50:	e9d2 2300 	ldrd	r2, r3, [r2]
 800db54:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800db58:	e9c1 2300 	strd	r2, r3, [r1]
 800db5c:	4770      	bx	lr
 800db5e:	bf00      	nop

0800db60 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__Imu_init_function>:
 800db60:	f00a ba8c 	b.w	801807c <sensor_msgs__msg__Imu__init>

0800db64 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__Imu_fini_function>:
 800db64:	f00a bae0 	b.w	8018128 <sensor_msgs__msg__Imu__fini>

0800db68 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__size_function__Imu__angular_velocity_covariance>:
 800db68:	2009      	movs	r0, #9
 800db6a:	4770      	bx	lr

0800db6c <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__size_function__Imu__linear_acceleration_covariance>:
 800db6c:	2009      	movs	r0, #9
 800db6e:	4770      	bx	lr

0800db70 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_function__Imu__orientation_covariance>:
 800db70:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800db74:	4770      	bx	lr
 800db76:	bf00      	nop

0800db78 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_const_function__Imu__linear_acceleration_covariance>:
 800db78:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800db7c:	4770      	bx	lr
 800db7e:	bf00      	nop

0800db80 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_function__Imu__linear_acceleration_covariance>:
 800db80:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800db84:	4770      	bx	lr
 800db86:	bf00      	nop

0800db88 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_const_function__Imu__angular_velocity_covariance>:
 800db88:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800db8c:	4770      	bx	lr
 800db8e:	bf00      	nop

0800db90 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_function__Imu__angular_velocity_covariance>:
 800db90:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800db94:	4770      	bx	lr
 800db96:	bf00      	nop

0800db98 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__fetch_function__Imu__linear_acceleration_covariance>:
 800db98:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800db9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dba0:	e9c2 0100 	strd	r0, r1, [r2]
 800dba4:	4770      	bx	lr
 800dba6:	bf00      	nop

0800dba8 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__assign_function__Imu__linear_acceleration_covariance>:
 800dba8:	e9d2 2300 	ldrd	r2, r3, [r2]
 800dbac:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800dbb0:	e9c1 2300 	strd	r2, r3, [r1]
 800dbb4:	4770      	bx	lr
 800dbb6:	bf00      	nop

0800dbb8 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__fetch_function__Imu__angular_velocity_covariance>:
 800dbb8:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800dbbc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dbc0:	e9c2 0100 	strd	r0, r1, [r2]
 800dbc4:	4770      	bx	lr
 800dbc6:	bf00      	nop

0800dbc8 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__assign_function__Imu__angular_velocity_covariance>:
 800dbc8:	e9d2 2300 	ldrd	r2, r3, [r2]
 800dbcc:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800dbd0:	e9c1 2300 	strd	r2, r3, [r1]
 800dbd4:	4770      	bx	lr
 800dbd6:	bf00      	nop

0800dbd8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 800dbd8:	b510      	push	{r4, lr}
 800dbda:	f000 f90f 	bl	800ddfc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 800dbde:	4c0b      	ldr	r4, [pc, #44]	@ (800dc0c <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x34>)
 800dbe0:	60e0      	str	r0, [r4, #12]
 800dbe2:	f000 fb5b 	bl	800e29c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 800dbe6:	64a0      	str	r0, [r4, #72]	@ 0x48
 800dbe8:	f000 fb6a 	bl	800e2c0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800dbec:	f8c4 00c0 	str.w	r0, [r4, #192]	@ 0xc0
 800dbf0:	f000 fb66 	bl	800e2c0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800dbf4:	4b06      	ldr	r3, [pc, #24]	@ (800dc10 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x38>)
 800dbf6:	f8c4 0138 	str.w	r0, [r4, #312]	@ 0x138
 800dbfa:	681a      	ldr	r2, [r3, #0]
 800dbfc:	b10a      	cbz	r2, 800dc02 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x2a>
 800dbfe:	4804      	ldr	r0, [pc, #16]	@ (800dc10 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x38>)
 800dc00:	bd10      	pop	{r4, pc}
 800dc02:	4a04      	ldr	r2, [pc, #16]	@ (800dc14 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x3c>)
 800dc04:	4802      	ldr	r0, [pc, #8]	@ (800dc10 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x38>)
 800dc06:	6812      	ldr	r2, [r2, #0]
 800dc08:	601a      	str	r2, [r3, #0]
 800dc0a:	bd10      	pop	{r4, pc}
 800dc0c:	200003a4 	.word	0x200003a4
 800dc10:	20000548 	.word	0x20000548
 800dc14:	2000038c 	.word	0x2000038c

0800dc18 <get_serialized_size_sensor_msgs__msg__Imu.part.0>:
 800dc18:	e92d 41b8 	stmdb	sp!, {r3, r4, r5, r7, r8, lr}
 800dc1c:	4680      	mov	r8, r0
 800dc1e:	460f      	mov	r7, r1
 800dc20:	f000 f910 	bl	800de44 <get_serialized_size_std_msgs__msg__Header>
 800dc24:	183c      	adds	r4, r7, r0
 800dc26:	4621      	mov	r1, r4
 800dc28:	f108 0018 	add.w	r0, r8, #24
 800dc2c:	f000 fb56 	bl	800e2dc <get_serialized_size_geometry_msgs__msg__Quaternion>
 800dc30:	4404      	add	r4, r0
 800dc32:	2108      	movs	r1, #8
 800dc34:	4620      	mov	r0, r4
 800dc36:	f002 fc77 	bl	8010528 <ucdr_alignment>
 800dc3a:	f100 0548 	add.w	r5, r0, #72	@ 0x48
 800dc3e:	4425      	add	r5, r4
 800dc40:	4629      	mov	r1, r5
 800dc42:	f108 0080 	add.w	r0, r8, #128	@ 0x80
 800dc46:	f000 fc01 	bl	800e44c <get_serialized_size_geometry_msgs__msg__Vector3>
 800dc4a:	4405      	add	r5, r0
 800dc4c:	2108      	movs	r1, #8
 800dc4e:	4628      	mov	r0, r5
 800dc50:	f002 fc6a 	bl	8010528 <ucdr_alignment>
 800dc54:	f100 0448 	add.w	r4, r0, #72	@ 0x48
 800dc58:	4425      	add	r5, r4
 800dc5a:	4629      	mov	r1, r5
 800dc5c:	f108 00e0 	add.w	r0, r8, #224	@ 0xe0
 800dc60:	f000 fbf4 	bl	800e44c <get_serialized_size_geometry_msgs__msg__Vector3>
 800dc64:	4405      	add	r5, r0
 800dc66:	2108      	movs	r1, #8
 800dc68:	4628      	mov	r0, r5
 800dc6a:	f002 fc5d 	bl	8010528 <ucdr_alignment>
 800dc6e:	f1c7 0748 	rsb	r7, r7, #72	@ 0x48
 800dc72:	4438      	add	r0, r7
 800dc74:	4428      	add	r0, r5
 800dc76:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 800dc7a:	bf00      	nop

0800dc7c <get_serialized_size_sensor_msgs__msg__Imu>:
 800dc7c:	b108      	cbz	r0, 800dc82 <get_serialized_size_sensor_msgs__msg__Imu+0x6>
 800dc7e:	f7ff bfcb 	b.w	800dc18 <get_serialized_size_sensor_msgs__msg__Imu.part.0>
 800dc82:	4770      	bx	lr

0800dc84 <_Imu__get_serialized_size>:
 800dc84:	b110      	cbz	r0, 800dc8c <_Imu__get_serialized_size+0x8>
 800dc86:	2100      	movs	r1, #0
 800dc88:	f7ff bfc6 	b.w	800dc18 <get_serialized_size_sensor_msgs__msg__Imu.part.0>
 800dc8c:	4770      	bx	lr
 800dc8e:	bf00      	nop

0800dc90 <_Imu__cdr_deserialize>:
 800dc90:	b538      	push	{r3, r4, r5, lr}
 800dc92:	460c      	mov	r4, r1
 800dc94:	b399      	cbz	r1, 800dcfe <_Imu__cdr_deserialize+0x6e>
 800dc96:	4605      	mov	r5, r0
 800dc98:	f000 f956 	bl	800df48 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800dc9c:	6843      	ldr	r3, [r0, #4]
 800dc9e:	4621      	mov	r1, r4
 800dca0:	68db      	ldr	r3, [r3, #12]
 800dca2:	4628      	mov	r0, r5
 800dca4:	4798      	blx	r3
 800dca6:	f000 fbcd 	bl	800e444 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 800dcaa:	6843      	ldr	r3, [r0, #4]
 800dcac:	f104 0118 	add.w	r1, r4, #24
 800dcb0:	68db      	ldr	r3, [r3, #12]
 800dcb2:	4628      	mov	r0, r5
 800dcb4:	4798      	blx	r3
 800dcb6:	2209      	movs	r2, #9
 800dcb8:	f104 0138 	add.w	r1, r4, #56	@ 0x38
 800dcbc:	4628      	mov	r0, r5
 800dcbe:	f000 ff99 	bl	800ebf4 <ucdr_deserialize_array_double>
 800dcc2:	f000 fc4f 	bl	800e564 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800dcc6:	6843      	ldr	r3, [r0, #4]
 800dcc8:	f104 0180 	add.w	r1, r4, #128	@ 0x80
 800dccc:	68db      	ldr	r3, [r3, #12]
 800dcce:	4628      	mov	r0, r5
 800dcd0:	4798      	blx	r3
 800dcd2:	2209      	movs	r2, #9
 800dcd4:	f104 0198 	add.w	r1, r4, #152	@ 0x98
 800dcd8:	4628      	mov	r0, r5
 800dcda:	f000 ff8b 	bl	800ebf4 <ucdr_deserialize_array_double>
 800dcde:	f000 fc41 	bl	800e564 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800dce2:	6843      	ldr	r3, [r0, #4]
 800dce4:	f104 01e0 	add.w	r1, r4, #224	@ 0xe0
 800dce8:	68db      	ldr	r3, [r3, #12]
 800dcea:	4628      	mov	r0, r5
 800dcec:	4798      	blx	r3
 800dcee:	f104 01f8 	add.w	r1, r4, #248	@ 0xf8
 800dcf2:	4628      	mov	r0, r5
 800dcf4:	2209      	movs	r2, #9
 800dcf6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dcfa:	f000 bf7b 	b.w	800ebf4 <ucdr_deserialize_array_double>
 800dcfe:	4608      	mov	r0, r1
 800dd00:	bd38      	pop	{r3, r4, r5, pc}
 800dd02:	bf00      	nop

0800dd04 <_Imu__cdr_serialize>:
 800dd04:	2800      	cmp	r0, #0
 800dd06:	d035      	beq.n	800dd74 <_Imu__cdr_serialize+0x70>
 800dd08:	b538      	push	{r3, r4, r5, lr}
 800dd0a:	460d      	mov	r5, r1
 800dd0c:	4604      	mov	r4, r0
 800dd0e:	f000 f91b 	bl	800df48 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800dd12:	6843      	ldr	r3, [r0, #4]
 800dd14:	4629      	mov	r1, r5
 800dd16:	689b      	ldr	r3, [r3, #8]
 800dd18:	4620      	mov	r0, r4
 800dd1a:	4798      	blx	r3
 800dd1c:	f000 fb92 	bl	800e444 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 800dd20:	6843      	ldr	r3, [r0, #4]
 800dd22:	4629      	mov	r1, r5
 800dd24:	689b      	ldr	r3, [r3, #8]
 800dd26:	f104 0018 	add.w	r0, r4, #24
 800dd2a:	4798      	blx	r3
 800dd2c:	2209      	movs	r2, #9
 800dd2e:	f104 0138 	add.w	r1, r4, #56	@ 0x38
 800dd32:	4628      	mov	r0, r5
 800dd34:	f000 ff0a 	bl	800eb4c <ucdr_serialize_array_double>
 800dd38:	f000 fc14 	bl	800e564 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800dd3c:	6843      	ldr	r3, [r0, #4]
 800dd3e:	4629      	mov	r1, r5
 800dd40:	689b      	ldr	r3, [r3, #8]
 800dd42:	f104 0080 	add.w	r0, r4, #128	@ 0x80
 800dd46:	4798      	blx	r3
 800dd48:	2209      	movs	r2, #9
 800dd4a:	f104 0198 	add.w	r1, r4, #152	@ 0x98
 800dd4e:	4628      	mov	r0, r5
 800dd50:	f000 fefc 	bl	800eb4c <ucdr_serialize_array_double>
 800dd54:	f000 fc06 	bl	800e564 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800dd58:	6843      	ldr	r3, [r0, #4]
 800dd5a:	4629      	mov	r1, r5
 800dd5c:	689b      	ldr	r3, [r3, #8]
 800dd5e:	f104 00e0 	add.w	r0, r4, #224	@ 0xe0
 800dd62:	4798      	blx	r3
 800dd64:	f104 01f8 	add.w	r1, r4, #248	@ 0xf8
 800dd68:	4628      	mov	r0, r5
 800dd6a:	2209      	movs	r2, #9
 800dd6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dd70:	f000 beec 	b.w	800eb4c <ucdr_serialize_array_double>
 800dd74:	4770      	bx	lr
 800dd76:	bf00      	nop

0800dd78 <max_serialized_size_sensor_msgs__msg__Imu>:
 800dd78:	e92d 41b8 	stmdb	sp!, {r3, r4, r5, r7, r8, lr}
 800dd7c:	2301      	movs	r3, #1
 800dd7e:	7003      	strb	r3, [r0, #0]
 800dd80:	4680      	mov	r8, r0
 800dd82:	460f      	mov	r7, r1
 800dd84:	f000 f8d6 	bl	800df34 <max_serialized_size_std_msgs__msg__Header>
 800dd88:	183c      	adds	r4, r7, r0
 800dd8a:	4621      	mov	r1, r4
 800dd8c:	4640      	mov	r0, r8
 800dd8e:	f000 fb37 	bl	800e400 <max_serialized_size_geometry_msgs__msg__Quaternion>
 800dd92:	4404      	add	r4, r0
 800dd94:	2108      	movs	r1, #8
 800dd96:	4620      	mov	r0, r4
 800dd98:	f002 fbc6 	bl	8010528 <ucdr_alignment>
 800dd9c:	f100 0548 	add.w	r5, r0, #72	@ 0x48
 800dda0:	4425      	add	r5, r4
 800dda2:	4629      	mov	r1, r5
 800dda4:	4640      	mov	r0, r8
 800dda6:	f000 fbc1 	bl	800e52c <max_serialized_size_geometry_msgs__msg__Vector3>
 800ddaa:	4405      	add	r5, r0
 800ddac:	2108      	movs	r1, #8
 800ddae:	4628      	mov	r0, r5
 800ddb0:	f002 fbba 	bl	8010528 <ucdr_alignment>
 800ddb4:	f100 0448 	add.w	r4, r0, #72	@ 0x48
 800ddb8:	4425      	add	r5, r4
 800ddba:	4629      	mov	r1, r5
 800ddbc:	4640      	mov	r0, r8
 800ddbe:	f000 fbb5 	bl	800e52c <max_serialized_size_geometry_msgs__msg__Vector3>
 800ddc2:	4405      	add	r5, r0
 800ddc4:	2108      	movs	r1, #8
 800ddc6:	4628      	mov	r0, r5
 800ddc8:	f002 fbae 	bl	8010528 <ucdr_alignment>
 800ddcc:	f1c7 0748 	rsb	r7, r7, #72	@ 0x48
 800ddd0:	4438      	add	r0, r7
 800ddd2:	4428      	add	r0, r5
 800ddd4:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}

0800ddd8 <_Imu__max_serialized_size>:
 800ddd8:	b500      	push	{lr}
 800ddda:	b083      	sub	sp, #12
 800dddc:	2100      	movs	r1, #0
 800ddde:	f10d 0007 	add.w	r0, sp, #7
 800dde2:	f7ff ffc9 	bl	800dd78 <max_serialized_size_sensor_msgs__msg__Imu>
 800dde6:	b003      	add	sp, #12
 800dde8:	f85d fb04 	ldr.w	pc, [sp], #4

0800ddec <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 800ddec:	4800      	ldr	r0, [pc, #0]	@ (800ddf0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x4>)
 800ddee:	4770      	bx	lr
 800ddf0:	20000554 	.word	0x20000554

0800ddf4 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_init_function>:
 800ddf4:	f00a b9ac 	b.w	8018150 <std_msgs__msg__Header__init>

0800ddf8 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_fini_function>:
 800ddf8:	f00a b9ce 	b.w	8018198 <std_msgs__msg__Header__fini>

0800ddfc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>:
 800ddfc:	b508      	push	{r3, lr}
 800ddfe:	f000 f9d3 	bl	800e1a8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800de02:	4b06      	ldr	r3, [pc, #24]	@ (800de1c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 800de04:	4906      	ldr	r1, [pc, #24]	@ (800de20 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x24>)
 800de06:	681a      	ldr	r2, [r3, #0]
 800de08:	60c8      	str	r0, [r1, #12]
 800de0a:	b10a      	cbz	r2, 800de10 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x14>
 800de0c:	4803      	ldr	r0, [pc, #12]	@ (800de1c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 800de0e:	bd08      	pop	{r3, pc}
 800de10:	4a04      	ldr	r2, [pc, #16]	@ (800de24 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x28>)
 800de12:	4802      	ldr	r0, [pc, #8]	@ (800de1c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 800de14:	6812      	ldr	r2, [r2, #0]
 800de16:	601a      	str	r2, [r3, #0]
 800de18:	bd08      	pop	{r3, pc}
 800de1a:	bf00      	nop
 800de1c:	200005f4 	.word	0x200005f4
 800de20:	2000057c 	.word	0x2000057c
 800de24:	2000038c 	.word	0x2000038c

0800de28 <_Header__max_serialized_size>:
 800de28:	b500      	push	{lr}
 800de2a:	b083      	sub	sp, #12
 800de2c:	2301      	movs	r3, #1
 800de2e:	2100      	movs	r1, #0
 800de30:	f10d 0007 	add.w	r0, sp, #7
 800de34:	f88d 3007 	strb.w	r3, [sp, #7]
 800de38:	f000 fa14 	bl	800e264 <max_serialized_size_builtin_interfaces__msg__Time>
 800de3c:	b003      	add	sp, #12
 800de3e:	f85d fb04 	ldr.w	pc, [sp], #4
 800de42:	bf00      	nop

0800de44 <get_serialized_size_std_msgs__msg__Header>:
 800de44:	b570      	push	{r4, r5, r6, lr}
 800de46:	4605      	mov	r5, r0
 800de48:	b168      	cbz	r0, 800de66 <get_serialized_size_std_msgs__msg__Header+0x22>
 800de4a:	460c      	mov	r4, r1
 800de4c:	f000 f9ba 	bl	800e1c4 <get_serialized_size_builtin_interfaces__msg__Time>
 800de50:	1826      	adds	r6, r4, r0
 800de52:	2104      	movs	r1, #4
 800de54:	4630      	mov	r0, r6
 800de56:	f002 fb67 	bl	8010528 <ucdr_alignment>
 800de5a:	68e9      	ldr	r1, [r5, #12]
 800de5c:	f1c4 0405 	rsb	r4, r4, #5
 800de60:	440c      	add	r4, r1
 800de62:	4404      	add	r4, r0
 800de64:	19a0      	adds	r0, r4, r6
 800de66:	bd70      	pop	{r4, r5, r6, pc}

0800de68 <_Header__cdr_deserialize>:
 800de68:	b5f0      	push	{r4, r5, r6, r7, lr}
 800de6a:	460c      	mov	r4, r1
 800de6c:	b083      	sub	sp, #12
 800de6e:	b1e1      	cbz	r1, 800deaa <_Header__cdr_deserialize+0x42>
 800de70:	4606      	mov	r6, r0
 800de72:	f000 fa0b 	bl	800e28c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800de76:	6843      	ldr	r3, [r0, #4]
 800de78:	4621      	mov	r1, r4
 800de7a:	68db      	ldr	r3, [r3, #12]
 800de7c:	4630      	mov	r0, r6
 800de7e:	4798      	blx	r3
 800de80:	6927      	ldr	r7, [r4, #16]
 800de82:	68a1      	ldr	r1, [r4, #8]
 800de84:	ab01      	add	r3, sp, #4
 800de86:	463a      	mov	r2, r7
 800de88:	4630      	mov	r0, r6
 800de8a:	f002 fbcb 	bl	8010624 <ucdr_deserialize_sequence_char>
 800de8e:	9b01      	ldr	r3, [sp, #4]
 800de90:	4605      	mov	r5, r0
 800de92:	b920      	cbnz	r0, 800de9e <_Header__cdr_deserialize+0x36>
 800de94:	429f      	cmp	r7, r3
 800de96:	d30c      	bcc.n	800deb2 <_Header__cdr_deserialize+0x4a>
 800de98:	4628      	mov	r0, r5
 800de9a:	b003      	add	sp, #12
 800de9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800de9e:	b103      	cbz	r3, 800dea2 <_Header__cdr_deserialize+0x3a>
 800dea0:	3b01      	subs	r3, #1
 800dea2:	4628      	mov	r0, r5
 800dea4:	60e3      	str	r3, [r4, #12]
 800dea6:	b003      	add	sp, #12
 800dea8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800deaa:	460d      	mov	r5, r1
 800deac:	4628      	mov	r0, r5
 800deae:	b003      	add	sp, #12
 800deb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800deb2:	2101      	movs	r1, #1
 800deb4:	75b0      	strb	r0, [r6, #22]
 800deb6:	7571      	strb	r1, [r6, #21]
 800deb8:	4630      	mov	r0, r6
 800deba:	60e5      	str	r5, [r4, #12]
 800debc:	f002 fb4a 	bl	8010554 <ucdr_align_to>
 800dec0:	4630      	mov	r0, r6
 800dec2:	9901      	ldr	r1, [sp, #4]
 800dec4:	f002 fb7c 	bl	80105c0 <ucdr_advance_buffer>
 800dec8:	4628      	mov	r0, r5
 800deca:	b003      	add	sp, #12
 800decc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dece:	bf00      	nop

0800ded0 <_Header__cdr_serialize>:
 800ded0:	b1f8      	cbz	r0, 800df12 <_Header__cdr_serialize+0x42>
 800ded2:	b570      	push	{r4, r5, r6, lr}
 800ded4:	4604      	mov	r4, r0
 800ded6:	460d      	mov	r5, r1
 800ded8:	f000 f9d8 	bl	800e28c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800dedc:	6843      	ldr	r3, [r0, #4]
 800dede:	4629      	mov	r1, r5
 800dee0:	689b      	ldr	r3, [r3, #8]
 800dee2:	4620      	mov	r0, r4
 800dee4:	4798      	blx	r3
 800dee6:	68a6      	ldr	r6, [r4, #8]
 800dee8:	b156      	cbz	r6, 800df00 <_Header__cdr_serialize+0x30>
 800deea:	4630      	mov	r0, r6
 800deec:	f7f2 f992 	bl	8000214 <strlen>
 800def0:	4631      	mov	r1, r6
 800def2:	60e0      	str	r0, [r4, #12]
 800def4:	1c42      	adds	r2, r0, #1
 800def6:	4628      	mov	r0, r5
 800def8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800defc:	f002 bb80 	b.w	8010600 <ucdr_serialize_sequence_char>
 800df00:	4630      	mov	r0, r6
 800df02:	60e0      	str	r0, [r4, #12]
 800df04:	4632      	mov	r2, r6
 800df06:	4631      	mov	r1, r6
 800df08:	4628      	mov	r0, r5
 800df0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800df0e:	f002 bb77 	b.w	8010600 <ucdr_serialize_sequence_char>
 800df12:	4770      	bx	lr

0800df14 <_Header__get_serialized_size>:
 800df14:	b538      	push	{r3, r4, r5, lr}
 800df16:	4604      	mov	r4, r0
 800df18:	b150      	cbz	r0, 800df30 <_Header__get_serialized_size+0x1c>
 800df1a:	2100      	movs	r1, #0
 800df1c:	f000 f952 	bl	800e1c4 <get_serialized_size_builtin_interfaces__msg__Time>
 800df20:	2104      	movs	r1, #4
 800df22:	4605      	mov	r5, r0
 800df24:	f002 fb00 	bl	8010528 <ucdr_alignment>
 800df28:	68e2      	ldr	r2, [r4, #12]
 800df2a:	3205      	adds	r2, #5
 800df2c:	1953      	adds	r3, r2, r5
 800df2e:	4418      	add	r0, r3
 800df30:	bd38      	pop	{r3, r4, r5, pc}
 800df32:	bf00      	nop

0800df34 <max_serialized_size_std_msgs__msg__Header>:
 800df34:	b510      	push	{r4, lr}
 800df36:	2301      	movs	r3, #1
 800df38:	4604      	mov	r4, r0
 800df3a:	7003      	strb	r3, [r0, #0]
 800df3c:	f000 f992 	bl	800e264 <max_serialized_size_builtin_interfaces__msg__Time>
 800df40:	2300      	movs	r3, #0
 800df42:	7023      	strb	r3, [r4, #0]
 800df44:	bd10      	pop	{r4, pc}
 800df46:	bf00      	nop

0800df48 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>:
 800df48:	4800      	ldr	r0, [pc, #0]	@ (800df4c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header+0x4>)
 800df4a:	4770      	bx	lr
 800df4c:	20000600 	.word	0x20000600

0800df50 <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__SetBool>:
 800df50:	4b04      	ldr	r3, [pc, #16]	@ (800df64 <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x14>)
 800df52:	681a      	ldr	r2, [r3, #0]
 800df54:	b10a      	cbz	r2, 800df5a <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__SetBool+0xa>
 800df56:	4803      	ldr	r0, [pc, #12]	@ (800df64 <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x14>)
 800df58:	4770      	bx	lr
 800df5a:	4a03      	ldr	r2, [pc, #12]	@ (800df68 <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x18>)
 800df5c:	4801      	ldr	r0, [pc, #4]	@ (800df64 <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x14>)
 800df5e:	6812      	ldr	r2, [r2, #0]
 800df60:	601a      	str	r2, [r3, #0]
 800df62:	4770      	bx	lr
 800df64:	20000630 	.word	0x20000630
 800df68:	20000388 	.word	0x20000388

0800df6c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request>:
 800df6c:	4b04      	ldr	r3, [pc, #16]	@ (800df80 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0x14>)
 800df6e:	4805      	ldr	r0, [pc, #20]	@ (800df84 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0x18>)
 800df70:	4905      	ldr	r1, [pc, #20]	@ (800df88 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0x1c>)
 800df72:	4a06      	ldr	r2, [pc, #24]	@ (800df8c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0x20>)
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	6003      	str	r3, [r0, #0]
 800df78:	600b      	str	r3, [r1, #0]
 800df7a:	6013      	str	r3, [r2, #0]
 800df7c:	4770      	bx	lr
 800df7e:	bf00      	nop
 800df80:	20000388 	.word	0x20000388
 800df84:	2000064c 	.word	0x2000064c
 800df88:	20000658 	.word	0x20000658
 800df8c:	20000630 	.word	0x20000630

0800df90 <std_srvs__srv__SetBool_Request__rosidl_typesupport_introspection_c__SetBool_Request_init_function>:
 800df90:	f00a b90e 	b.w	80181b0 <std_srvs__srv__SetBool_Request__init>

0800df94 <std_srvs__srv__SetBool_Request__rosidl_typesupport_introspection_c__SetBool_Request_fini_function>:
 800df94:	f00a b910 	b.w	80181b8 <std_srvs__srv__SetBool_Request__fini>

0800df98 <std_srvs__srv__SetBool_Response__rosidl_typesupport_introspection_c__SetBool_Response_init_function>:
 800df98:	f00a b910 	b.w	80181bc <std_srvs__srv__SetBool_Response__init>

0800df9c <std_srvs__srv__SetBool_Response__rosidl_typesupport_introspection_c__SetBool_Response_fini_function>:
 800df9c:	f00a b920 	b.w	80181e0 <std_srvs__srv__SetBool_Response__fini>

0800dfa0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request>:
 800dfa0:	4b04      	ldr	r3, [pc, #16]	@ (800dfb4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0x14>)
 800dfa2:	681a      	ldr	r2, [r3, #0]
 800dfa4:	b10a      	cbz	r2, 800dfaa <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0xa>
 800dfa6:	4803      	ldr	r0, [pc, #12]	@ (800dfb4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0x14>)
 800dfa8:	4770      	bx	lr
 800dfaa:	4a03      	ldr	r2, [pc, #12]	@ (800dfb8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0x18>)
 800dfac:	4801      	ldr	r0, [pc, #4]	@ (800dfb4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0x14>)
 800dfae:	6812      	ldr	r2, [r2, #0]
 800dfb0:	601a      	str	r2, [r3, #0]
 800dfb2:	4770      	bx	lr
 800dfb4:	200006a0 	.word	0x200006a0
 800dfb8:	2000038c 	.word	0x2000038c

0800dfbc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Response>:
 800dfbc:	4b04      	ldr	r3, [pc, #16]	@ (800dfd0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Response+0x14>)
 800dfbe:	681a      	ldr	r2, [r3, #0]
 800dfc0:	b10a      	cbz	r2, 800dfc6 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Response+0xa>
 800dfc2:	4803      	ldr	r0, [pc, #12]	@ (800dfd0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Response+0x14>)
 800dfc4:	4770      	bx	lr
 800dfc6:	4a03      	ldr	r2, [pc, #12]	@ (800dfd4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Response+0x18>)
 800dfc8:	4801      	ldr	r0, [pc, #4]	@ (800dfd0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Response+0x14>)
 800dfca:	6812      	ldr	r2, [r2, #0]
 800dfcc:	601a      	str	r2, [r3, #0]
 800dfce:	4770      	bx	lr
 800dfd0:	20000724 	.word	0x20000724
 800dfd4:	2000038c 	.word	0x2000038c

0800dfd8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool>:
 800dfd8:	4b13      	ldr	r3, [pc, #76]	@ (800e028 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x50>)
 800dfda:	681a      	ldr	r2, [r3, #0]
 800dfdc:	b132      	cbz	r2, 800dfec <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x14>
 800dfde:	685b      	ldr	r3, [r3, #4]
 800dfe0:	689a      	ldr	r2, [r3, #8]
 800dfe2:	b152      	cbz	r2, 800dffa <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x22>
 800dfe4:	68da      	ldr	r2, [r3, #12]
 800dfe6:	b182      	cbz	r2, 800e00a <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x32>
 800dfe8:	480f      	ldr	r0, [pc, #60]	@ (800e028 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x50>)
 800dfea:	4770      	bx	lr
 800dfec:	4a0f      	ldr	r2, [pc, #60]	@ (800e02c <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x54>)
 800dfee:	6812      	ldr	r2, [r2, #0]
 800dff0:	601a      	str	r2, [r3, #0]
 800dff2:	685b      	ldr	r3, [r3, #4]
 800dff4:	689a      	ldr	r2, [r3, #8]
 800dff6:	2a00      	cmp	r2, #0
 800dff8:	d1f4      	bne.n	800dfe4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0xc>
 800dffa:	4a0d      	ldr	r2, [pc, #52]	@ (800e030 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x58>)
 800dffc:	6811      	ldr	r1, [r2, #0]
 800dffe:	b179      	cbz	r1, 800e020 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x48>
 800e000:	6852      	ldr	r2, [r2, #4]
 800e002:	609a      	str	r2, [r3, #8]
 800e004:	68da      	ldr	r2, [r3, #12]
 800e006:	2a00      	cmp	r2, #0
 800e008:	d1ee      	bne.n	800dfe8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x10>
 800e00a:	4a0a      	ldr	r2, [pc, #40]	@ (800e034 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x5c>)
 800e00c:	6811      	ldr	r1, [r2, #0]
 800e00e:	b119      	cbz	r1, 800e018 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x40>
 800e010:	6852      	ldr	r2, [r2, #4]
 800e012:	4805      	ldr	r0, [pc, #20]	@ (800e028 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x50>)
 800e014:	60da      	str	r2, [r3, #12]
 800e016:	4770      	bx	lr
 800e018:	4904      	ldr	r1, [pc, #16]	@ (800e02c <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x54>)
 800e01a:	6809      	ldr	r1, [r1, #0]
 800e01c:	6011      	str	r1, [r2, #0]
 800e01e:	e7f7      	b.n	800e010 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x38>
 800e020:	4902      	ldr	r1, [pc, #8]	@ (800e02c <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x54>)
 800e022:	6809      	ldr	r1, [r1, #0]
 800e024:	6011      	str	r1, [r2, #0]
 800e026:	e7eb      	b.n	800e000 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x28>
 800e028:	20000740 	.word	0x20000740
 800e02c:	2000038c 	.word	0x2000038c
 800e030:	200006a0 	.word	0x200006a0
 800e034:	20000724 	.word	0x20000724

0800e038 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request>:
 800e038:	4800      	ldr	r0, [pc, #0]	@ (800e03c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0x4>)
 800e03a:	4770      	bx	lr
 800e03c:	20000768 	.word	0x20000768

0800e040 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_srvs__srv__SetBool_Response>:
 800e040:	4800      	ldr	r0, [pc, #0]	@ (800e044 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_srvs__srv__SetBool_Response+0x4>)
 800e042:	4770      	bx	lr
 800e044:	20000774 	.word	0x20000774

0800e048 <_SetBool_Request__max_serialized_size>:
 800e048:	b508      	push	{r3, lr}
 800e04a:	2101      	movs	r1, #1
 800e04c:	2000      	movs	r0, #0
 800e04e:	f002 fa6b 	bl	8010528 <ucdr_alignment>
 800e052:	3001      	adds	r0, #1
 800e054:	bd08      	pop	{r3, pc}
 800e056:	bf00      	nop

0800e058 <_SetBool_Request__cdr_deserialize>:
 800e058:	b109      	cbz	r1, 800e05e <_SetBool_Request__cdr_deserialize+0x6>
 800e05a:	f000 be37 	b.w	800eccc <ucdr_deserialize_bool>
 800e05e:	4608      	mov	r0, r1
 800e060:	4770      	bx	lr
 800e062:	bf00      	nop

0800e064 <get_serialized_size_std_srvs__srv__SetBool_Request>:
 800e064:	b138      	cbz	r0, 800e076 <get_serialized_size_std_srvs__srv__SetBool_Request+0x12>
 800e066:	b508      	push	{r3, lr}
 800e068:	460b      	mov	r3, r1
 800e06a:	4618      	mov	r0, r3
 800e06c:	2101      	movs	r1, #1
 800e06e:	f002 fa5b 	bl	8010528 <ucdr_alignment>
 800e072:	3001      	adds	r0, #1
 800e074:	bd08      	pop	{r3, pc}
 800e076:	4770      	bx	lr

0800e078 <get_serialized_size_std_srvs__srv__SetBool_Response>:
 800e078:	b570      	push	{r4, r5, r6, lr}
 800e07a:	4605      	mov	r5, r0
 800e07c:	b180      	cbz	r0, 800e0a0 <get_serialized_size_std_srvs__srv__SetBool_Response+0x28>
 800e07e:	460c      	mov	r4, r1
 800e080:	4620      	mov	r0, r4
 800e082:	2101      	movs	r1, #1
 800e084:	f002 fa50 	bl	8010528 <ucdr_alignment>
 800e088:	1c63      	adds	r3, r4, #1
 800e08a:	181e      	adds	r6, r3, r0
 800e08c:	2104      	movs	r1, #4
 800e08e:	4630      	mov	r0, r6
 800e090:	f002 fa4a 	bl	8010528 <ucdr_alignment>
 800e094:	68a9      	ldr	r1, [r5, #8]
 800e096:	f1c4 0405 	rsb	r4, r4, #5
 800e09a:	440c      	add	r4, r1
 800e09c:	4404      	add	r4, r0
 800e09e:	19a0      	adds	r0, r4, r6
 800e0a0:	bd70      	pop	{r4, r5, r6, pc}
 800e0a2:	bf00      	nop

0800e0a4 <_SetBool_Request__cdr_serialize>:
 800e0a4:	460a      	mov	r2, r1
 800e0a6:	b118      	cbz	r0, 800e0b0 <_SetBool_Request__cdr_serialize+0xc>
 800e0a8:	7801      	ldrb	r1, [r0, #0]
 800e0aa:	4610      	mov	r0, r2
 800e0ac:	f000 bdf8 	b.w	800eca0 <ucdr_serialize_bool>
 800e0b0:	4770      	bx	lr
 800e0b2:	bf00      	nop

0800e0b4 <_SetBool_Response__cdr_deserialize>:
 800e0b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e0b6:	460c      	mov	r4, r1
 800e0b8:	b083      	sub	sp, #12
 800e0ba:	b1b9      	cbz	r1, 800e0ec <_SetBool_Response__cdr_deserialize+0x38>
 800e0bc:	4606      	mov	r6, r0
 800e0be:	f000 fe05 	bl	800eccc <ucdr_deserialize_bool>
 800e0c2:	68e7      	ldr	r7, [r4, #12]
 800e0c4:	6861      	ldr	r1, [r4, #4]
 800e0c6:	ab01      	add	r3, sp, #4
 800e0c8:	463a      	mov	r2, r7
 800e0ca:	4630      	mov	r0, r6
 800e0cc:	f002 faaa 	bl	8010624 <ucdr_deserialize_sequence_char>
 800e0d0:	9b01      	ldr	r3, [sp, #4]
 800e0d2:	4605      	mov	r5, r0
 800e0d4:	b920      	cbnz	r0, 800e0e0 <_SetBool_Response__cdr_deserialize+0x2c>
 800e0d6:	429f      	cmp	r7, r3
 800e0d8:	d30c      	bcc.n	800e0f4 <_SetBool_Response__cdr_deserialize+0x40>
 800e0da:	4628      	mov	r0, r5
 800e0dc:	b003      	add	sp, #12
 800e0de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e0e0:	b103      	cbz	r3, 800e0e4 <_SetBool_Response__cdr_deserialize+0x30>
 800e0e2:	3b01      	subs	r3, #1
 800e0e4:	4628      	mov	r0, r5
 800e0e6:	60a3      	str	r3, [r4, #8]
 800e0e8:	b003      	add	sp, #12
 800e0ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e0ec:	460d      	mov	r5, r1
 800e0ee:	4628      	mov	r0, r5
 800e0f0:	b003      	add	sp, #12
 800e0f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e0f4:	2101      	movs	r1, #1
 800e0f6:	75b0      	strb	r0, [r6, #22]
 800e0f8:	7571      	strb	r1, [r6, #21]
 800e0fa:	4630      	mov	r0, r6
 800e0fc:	60a5      	str	r5, [r4, #8]
 800e0fe:	f002 fa29 	bl	8010554 <ucdr_align_to>
 800e102:	4630      	mov	r0, r6
 800e104:	9901      	ldr	r1, [sp, #4]
 800e106:	f002 fa5b 	bl	80105c0 <ucdr_advance_buffer>
 800e10a:	4628      	mov	r0, r5
 800e10c:	b003      	add	sp, #12
 800e10e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e110 <_SetBool_Response__cdr_serialize>:
 800e110:	b1e0      	cbz	r0, 800e14c <_SetBool_Response__cdr_serialize+0x3c>
 800e112:	b570      	push	{r4, r5, r6, lr}
 800e114:	460d      	mov	r5, r1
 800e116:	4604      	mov	r4, r0
 800e118:	7801      	ldrb	r1, [r0, #0]
 800e11a:	4628      	mov	r0, r5
 800e11c:	f000 fdc0 	bl	800eca0 <ucdr_serialize_bool>
 800e120:	6866      	ldr	r6, [r4, #4]
 800e122:	b156      	cbz	r6, 800e13a <_SetBool_Response__cdr_serialize+0x2a>
 800e124:	4630      	mov	r0, r6
 800e126:	f7f2 f875 	bl	8000214 <strlen>
 800e12a:	4631      	mov	r1, r6
 800e12c:	60a0      	str	r0, [r4, #8]
 800e12e:	1c42      	adds	r2, r0, #1
 800e130:	4628      	mov	r0, r5
 800e132:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e136:	f002 ba63 	b.w	8010600 <ucdr_serialize_sequence_char>
 800e13a:	4630      	mov	r0, r6
 800e13c:	60a0      	str	r0, [r4, #8]
 800e13e:	4632      	mov	r2, r6
 800e140:	4631      	mov	r1, r6
 800e142:	4628      	mov	r0, r5
 800e144:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e148:	f002 ba5a 	b.w	8010600 <ucdr_serialize_sequence_char>
 800e14c:	4770      	bx	lr
 800e14e:	bf00      	nop

0800e150 <_SetBool_Request__get_serialized_size>:
 800e150:	b130      	cbz	r0, 800e160 <_SetBool_Request__get_serialized_size+0x10>
 800e152:	b508      	push	{r3, lr}
 800e154:	2101      	movs	r1, #1
 800e156:	2000      	movs	r0, #0
 800e158:	f002 f9e6 	bl	8010528 <ucdr_alignment>
 800e15c:	3001      	adds	r0, #1
 800e15e:	bd08      	pop	{r3, pc}
 800e160:	4770      	bx	lr
 800e162:	bf00      	nop

0800e164 <_SetBool_Response__max_serialized_size>:
 800e164:	b508      	push	{r3, lr}
 800e166:	2101      	movs	r1, #1
 800e168:	2000      	movs	r0, #0
 800e16a:	f002 f9dd 	bl	8010528 <ucdr_alignment>
 800e16e:	3001      	adds	r0, #1
 800e170:	bd08      	pop	{r3, pc}
 800e172:	bf00      	nop

0800e174 <_SetBool_Response__get_serialized_size>:
 800e174:	b538      	push	{r3, r4, r5, lr}
 800e176:	4604      	mov	r4, r0
 800e178:	b160      	cbz	r0, 800e194 <_SetBool_Response__get_serialized_size+0x20>
 800e17a:	2101      	movs	r1, #1
 800e17c:	2000      	movs	r0, #0
 800e17e:	f002 f9d3 	bl	8010528 <ucdr_alignment>
 800e182:	1c45      	adds	r5, r0, #1
 800e184:	2104      	movs	r1, #4
 800e186:	4628      	mov	r0, r5
 800e188:	f002 f9ce 	bl	8010528 <ucdr_alignment>
 800e18c:	68a3      	ldr	r3, [r4, #8]
 800e18e:	3305      	adds	r3, #5
 800e190:	4418      	add	r0, r3
 800e192:	4428      	add	r0, r5
 800e194:	bd38      	pop	{r3, r4, r5, pc}
 800e196:	bf00      	nop

0800e198 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__std_srvs__srv__SetBool>:
 800e198:	4800      	ldr	r0, [pc, #0]	@ (800e19c <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x4>)
 800e19a:	4770      	bx	lr
 800e19c:	2000075c 	.word	0x2000075c

0800e1a0 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_init_function>:
 800e1a0:	f00a b824 	b.w	80181ec <builtin_interfaces__msg__Time__init>

0800e1a4 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_fini_function>:
 800e1a4:	f00a b826 	b.w	80181f4 <builtin_interfaces__msg__Time__fini>

0800e1a8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 800e1a8:	4b04      	ldr	r3, [pc, #16]	@ (800e1bc <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800e1aa:	681a      	ldr	r2, [r3, #0]
 800e1ac:	b10a      	cbz	r2, 800e1b2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0xa>
 800e1ae:	4803      	ldr	r0, [pc, #12]	@ (800e1bc <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800e1b0:	4770      	bx	lr
 800e1b2:	4a03      	ldr	r2, [pc, #12]	@ (800e1c0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x18>)
 800e1b4:	4801      	ldr	r0, [pc, #4]	@ (800e1bc <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800e1b6:	6812      	ldr	r2, [r2, #0]
 800e1b8:	601a      	str	r2, [r3, #0]
 800e1ba:	4770      	bx	lr
 800e1bc:	20000830 	.word	0x20000830
 800e1c0:	2000038c 	.word	0x2000038c

0800e1c4 <get_serialized_size_builtin_interfaces__msg__Time>:
 800e1c4:	b180      	cbz	r0, 800e1e8 <get_serialized_size_builtin_interfaces__msg__Time+0x24>
 800e1c6:	b538      	push	{r3, r4, r5, lr}
 800e1c8:	460d      	mov	r5, r1
 800e1ca:	4628      	mov	r0, r5
 800e1cc:	2104      	movs	r1, #4
 800e1ce:	f002 f9ab 	bl	8010528 <ucdr_alignment>
 800e1d2:	1d2b      	adds	r3, r5, #4
 800e1d4:	181c      	adds	r4, r3, r0
 800e1d6:	2104      	movs	r1, #4
 800e1d8:	4620      	mov	r0, r4
 800e1da:	f002 f9a5 	bl	8010528 <ucdr_alignment>
 800e1de:	f1c5 0504 	rsb	r5, r5, #4
 800e1e2:	4428      	add	r0, r5
 800e1e4:	4420      	add	r0, r4
 800e1e6:	bd38      	pop	{r3, r4, r5, pc}
 800e1e8:	4770      	bx	lr
 800e1ea:	bf00      	nop

0800e1ec <_Time__cdr_deserialize>:
 800e1ec:	b538      	push	{r3, r4, r5, lr}
 800e1ee:	460c      	mov	r4, r1
 800e1f0:	b141      	cbz	r1, 800e204 <_Time__cdr_deserialize+0x18>
 800e1f2:	4605      	mov	r5, r0
 800e1f4:	f001 fc4a 	bl	800fa8c <ucdr_deserialize_int32_t>
 800e1f8:	1d21      	adds	r1, r4, #4
 800e1fa:	4628      	mov	r0, r5
 800e1fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e200:	f001 b8c2 	b.w	800f388 <ucdr_deserialize_uint32_t>
 800e204:	4608      	mov	r0, r1
 800e206:	bd38      	pop	{r3, r4, r5, pc}

0800e208 <_Time__cdr_serialize>:
 800e208:	b160      	cbz	r0, 800e224 <_Time__cdr_serialize+0x1c>
 800e20a:	b538      	push	{r3, r4, r5, lr}
 800e20c:	460d      	mov	r5, r1
 800e20e:	4604      	mov	r4, r0
 800e210:	6801      	ldr	r1, [r0, #0]
 800e212:	4628      	mov	r0, r5
 800e214:	f001 fba2 	bl	800f95c <ucdr_serialize_int32_t>
 800e218:	6861      	ldr	r1, [r4, #4]
 800e21a:	4628      	mov	r0, r5
 800e21c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e220:	f000 bf82 	b.w	800f128 <ucdr_serialize_uint32_t>
 800e224:	4770      	bx	lr
 800e226:	bf00      	nop

0800e228 <_Time__get_serialized_size>:
 800e228:	b160      	cbz	r0, 800e244 <_Time__get_serialized_size+0x1c>
 800e22a:	b510      	push	{r4, lr}
 800e22c:	2104      	movs	r1, #4
 800e22e:	2000      	movs	r0, #0
 800e230:	f002 f97a 	bl	8010528 <ucdr_alignment>
 800e234:	1d04      	adds	r4, r0, #4
 800e236:	2104      	movs	r1, #4
 800e238:	4620      	mov	r0, r4
 800e23a:	f002 f975 	bl	8010528 <ucdr_alignment>
 800e23e:	3004      	adds	r0, #4
 800e240:	4420      	add	r0, r4
 800e242:	bd10      	pop	{r4, pc}
 800e244:	4770      	bx	lr
 800e246:	bf00      	nop

0800e248 <_Time__max_serialized_size>:
 800e248:	b510      	push	{r4, lr}
 800e24a:	2104      	movs	r1, #4
 800e24c:	2000      	movs	r0, #0
 800e24e:	f002 f96b 	bl	8010528 <ucdr_alignment>
 800e252:	1d04      	adds	r4, r0, #4
 800e254:	2104      	movs	r1, #4
 800e256:	4620      	mov	r0, r4
 800e258:	f002 f966 	bl	8010528 <ucdr_alignment>
 800e25c:	3004      	adds	r0, #4
 800e25e:	4420      	add	r0, r4
 800e260:	bd10      	pop	{r4, pc}
 800e262:	bf00      	nop

0800e264 <max_serialized_size_builtin_interfaces__msg__Time>:
 800e264:	b538      	push	{r3, r4, r5, lr}
 800e266:	460c      	mov	r4, r1
 800e268:	2301      	movs	r3, #1
 800e26a:	7003      	strb	r3, [r0, #0]
 800e26c:	2104      	movs	r1, #4
 800e26e:	4620      	mov	r0, r4
 800e270:	f002 f95a 	bl	8010528 <ucdr_alignment>
 800e274:	1d25      	adds	r5, r4, #4
 800e276:	4405      	add	r5, r0
 800e278:	2104      	movs	r1, #4
 800e27a:	4628      	mov	r0, r5
 800e27c:	f002 f954 	bl	8010528 <ucdr_alignment>
 800e280:	f1c4 0404 	rsb	r4, r4, #4
 800e284:	4420      	add	r0, r4
 800e286:	4428      	add	r0, r5
 800e288:	bd38      	pop	{r3, r4, r5, pc}
 800e28a:	bf00      	nop

0800e28c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 800e28c:	4800      	ldr	r0, [pc, #0]	@ (800e290 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x4>)
 800e28e:	4770      	bx	lr
 800e290:	2000083c 	.word	0x2000083c

0800e294 <geometry_msgs__msg__Quaternion__rosidl_typesupport_introspection_c__Quaternion_init_function>:
 800e294:	f009 bfb0 	b.w	80181f8 <geometry_msgs__msg__Quaternion__init>

0800e298 <geometry_msgs__msg__Quaternion__rosidl_typesupport_introspection_c__Quaternion_fini_function>:
 800e298:	f009 bfc2 	b.w	8018220 <geometry_msgs__msg__Quaternion__fini>

0800e29c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>:
 800e29c:	4b04      	ldr	r3, [pc, #16]	@ (800e2b0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 800e29e:	681a      	ldr	r2, [r3, #0]
 800e2a0:	b10a      	cbz	r2, 800e2a6 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0xa>
 800e2a2:	4803      	ldr	r0, [pc, #12]	@ (800e2b0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 800e2a4:	4770      	bx	lr
 800e2a6:	4a03      	ldr	r2, [pc, #12]	@ (800e2b4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x18>)
 800e2a8:	4801      	ldr	r0, [pc, #4]	@ (800e2b0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 800e2aa:	6812      	ldr	r2, [r2, #0]
 800e2ac:	601a      	str	r2, [r3, #0]
 800e2ae:	4770      	bx	lr
 800e2b0:	20000954 	.word	0x20000954
 800e2b4:	2000038c 	.word	0x2000038c

0800e2b8 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_init_function>:
 800e2b8:	f009 bfb4 	b.w	8018224 <geometry_msgs__msg__Vector3__init>

0800e2bc <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_fini_function>:
 800e2bc:	f009 bfb6 	b.w	801822c <geometry_msgs__msg__Vector3__fini>

0800e2c0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800e2c0:	4b04      	ldr	r3, [pc, #16]	@ (800e2d4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800e2c2:	681a      	ldr	r2, [r3, #0]
 800e2c4:	b10a      	cbz	r2, 800e2ca <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0xa>
 800e2c6:	4803      	ldr	r0, [pc, #12]	@ (800e2d4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800e2c8:	4770      	bx	lr
 800e2ca:	4a03      	ldr	r2, [pc, #12]	@ (800e2d8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x18>)
 800e2cc:	4801      	ldr	r0, [pc, #4]	@ (800e2d4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800e2ce:	6812      	ldr	r2, [r2, #0]
 800e2d0:	601a      	str	r2, [r3, #0]
 800e2d2:	4770      	bx	lr
 800e2d4:	20000a14 	.word	0x20000a14
 800e2d8:	2000038c 	.word	0x2000038c

0800e2dc <get_serialized_size_geometry_msgs__msg__Quaternion>:
 800e2dc:	b1f0      	cbz	r0, 800e31c <get_serialized_size_geometry_msgs__msg__Quaternion+0x40>
 800e2de:	b570      	push	{r4, r5, r6, lr}
 800e2e0:	460d      	mov	r5, r1
 800e2e2:	4628      	mov	r0, r5
 800e2e4:	2108      	movs	r1, #8
 800e2e6:	f002 f91f 	bl	8010528 <ucdr_alignment>
 800e2ea:	f105 0308 	add.w	r3, r5, #8
 800e2ee:	181e      	adds	r6, r3, r0
 800e2f0:	2108      	movs	r1, #8
 800e2f2:	4630      	mov	r0, r6
 800e2f4:	f002 f918 	bl	8010528 <ucdr_alignment>
 800e2f8:	f100 0408 	add.w	r4, r0, #8
 800e2fc:	4434      	add	r4, r6
 800e2fe:	2108      	movs	r1, #8
 800e300:	4620      	mov	r0, r4
 800e302:	f002 f911 	bl	8010528 <ucdr_alignment>
 800e306:	3008      	adds	r0, #8
 800e308:	4404      	add	r4, r0
 800e30a:	2108      	movs	r1, #8
 800e30c:	4620      	mov	r0, r4
 800e30e:	f002 f90b 	bl	8010528 <ucdr_alignment>
 800e312:	f1c5 0508 	rsb	r5, r5, #8
 800e316:	4428      	add	r0, r5
 800e318:	4420      	add	r0, r4
 800e31a:	bd70      	pop	{r4, r5, r6, pc}
 800e31c:	4770      	bx	lr
 800e31e:	bf00      	nop

0800e320 <_Quaternion__cdr_deserialize>:
 800e320:	b538      	push	{r3, r4, r5, lr}
 800e322:	460c      	mov	r4, r1
 800e324:	b199      	cbz	r1, 800e34e <_Quaternion__cdr_deserialize+0x2e>
 800e326:	4605      	mov	r5, r0
 800e328:	f001 ff12 	bl	8010150 <ucdr_deserialize_double>
 800e32c:	f104 0108 	add.w	r1, r4, #8
 800e330:	4628      	mov	r0, r5
 800e332:	f001 ff0d 	bl	8010150 <ucdr_deserialize_double>
 800e336:	f104 0110 	add.w	r1, r4, #16
 800e33a:	4628      	mov	r0, r5
 800e33c:	f001 ff08 	bl	8010150 <ucdr_deserialize_double>
 800e340:	f104 0118 	add.w	r1, r4, #24
 800e344:	4628      	mov	r0, r5
 800e346:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e34a:	f001 bf01 	b.w	8010150 <ucdr_deserialize_double>
 800e34e:	4608      	mov	r0, r1
 800e350:	bd38      	pop	{r3, r4, r5, pc}
 800e352:	bf00      	nop

0800e354 <_Quaternion__cdr_serialize>:
 800e354:	b1c0      	cbz	r0, 800e388 <_Quaternion__cdr_serialize+0x34>
 800e356:	b538      	push	{r3, r4, r5, lr}
 800e358:	ed90 0b00 	vldr	d0, [r0]
 800e35c:	460d      	mov	r5, r1
 800e35e:	4604      	mov	r4, r0
 800e360:	4608      	mov	r0, r1
 800e362:	f001 fd53 	bl	800fe0c <ucdr_serialize_double>
 800e366:	ed94 0b02 	vldr	d0, [r4, #8]
 800e36a:	4628      	mov	r0, r5
 800e36c:	f001 fd4e 	bl	800fe0c <ucdr_serialize_double>
 800e370:	ed94 0b04 	vldr	d0, [r4, #16]
 800e374:	4628      	mov	r0, r5
 800e376:	f001 fd49 	bl	800fe0c <ucdr_serialize_double>
 800e37a:	ed94 0b06 	vldr	d0, [r4, #24]
 800e37e:	4628      	mov	r0, r5
 800e380:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e384:	f001 bd42 	b.w	800fe0c <ucdr_serialize_double>
 800e388:	4770      	bx	lr
 800e38a:	bf00      	nop

0800e38c <_Quaternion__get_serialized_size>:
 800e38c:	b1d0      	cbz	r0, 800e3c4 <_Quaternion__get_serialized_size+0x38>
 800e38e:	b538      	push	{r3, r4, r5, lr}
 800e390:	2108      	movs	r1, #8
 800e392:	2000      	movs	r0, #0
 800e394:	f002 f8c8 	bl	8010528 <ucdr_alignment>
 800e398:	f100 0508 	add.w	r5, r0, #8
 800e39c:	2108      	movs	r1, #8
 800e39e:	4628      	mov	r0, r5
 800e3a0:	f002 f8c2 	bl	8010528 <ucdr_alignment>
 800e3a4:	f100 0408 	add.w	r4, r0, #8
 800e3a8:	442c      	add	r4, r5
 800e3aa:	2108      	movs	r1, #8
 800e3ac:	4620      	mov	r0, r4
 800e3ae:	f002 f8bb 	bl	8010528 <ucdr_alignment>
 800e3b2:	3008      	adds	r0, #8
 800e3b4:	4404      	add	r4, r0
 800e3b6:	2108      	movs	r1, #8
 800e3b8:	4620      	mov	r0, r4
 800e3ba:	f002 f8b5 	bl	8010528 <ucdr_alignment>
 800e3be:	3008      	adds	r0, #8
 800e3c0:	4420      	add	r0, r4
 800e3c2:	bd38      	pop	{r3, r4, r5, pc}
 800e3c4:	4770      	bx	lr
 800e3c6:	bf00      	nop

0800e3c8 <_Quaternion__max_serialized_size>:
 800e3c8:	b538      	push	{r3, r4, r5, lr}
 800e3ca:	2108      	movs	r1, #8
 800e3cc:	2000      	movs	r0, #0
 800e3ce:	f002 f8ab 	bl	8010528 <ucdr_alignment>
 800e3d2:	f100 0508 	add.w	r5, r0, #8
 800e3d6:	2108      	movs	r1, #8
 800e3d8:	4628      	mov	r0, r5
 800e3da:	f002 f8a5 	bl	8010528 <ucdr_alignment>
 800e3de:	f100 0408 	add.w	r4, r0, #8
 800e3e2:	442c      	add	r4, r5
 800e3e4:	2108      	movs	r1, #8
 800e3e6:	4620      	mov	r0, r4
 800e3e8:	f002 f89e 	bl	8010528 <ucdr_alignment>
 800e3ec:	3008      	adds	r0, #8
 800e3ee:	4404      	add	r4, r0
 800e3f0:	2108      	movs	r1, #8
 800e3f2:	4620      	mov	r0, r4
 800e3f4:	f002 f898 	bl	8010528 <ucdr_alignment>
 800e3f8:	3008      	adds	r0, #8
 800e3fa:	4420      	add	r0, r4
 800e3fc:	bd38      	pop	{r3, r4, r5, pc}
 800e3fe:	bf00      	nop

0800e400 <max_serialized_size_geometry_msgs__msg__Quaternion>:
 800e400:	b570      	push	{r4, r5, r6, lr}
 800e402:	2301      	movs	r3, #1
 800e404:	460c      	mov	r4, r1
 800e406:	7003      	strb	r3, [r0, #0]
 800e408:	2108      	movs	r1, #8
 800e40a:	4620      	mov	r0, r4
 800e40c:	f002 f88c 	bl	8010528 <ucdr_alignment>
 800e410:	f104 0508 	add.w	r5, r4, #8
 800e414:	1946      	adds	r6, r0, r5
 800e416:	2108      	movs	r1, #8
 800e418:	4630      	mov	r0, r6
 800e41a:	f002 f885 	bl	8010528 <ucdr_alignment>
 800e41e:	f100 0508 	add.w	r5, r0, #8
 800e422:	4435      	add	r5, r6
 800e424:	2108      	movs	r1, #8
 800e426:	4628      	mov	r0, r5
 800e428:	f002 f87e 	bl	8010528 <ucdr_alignment>
 800e42c:	3008      	adds	r0, #8
 800e42e:	4405      	add	r5, r0
 800e430:	2108      	movs	r1, #8
 800e432:	4628      	mov	r0, r5
 800e434:	f002 f878 	bl	8010528 <ucdr_alignment>
 800e438:	f1c4 0408 	rsb	r4, r4, #8
 800e43c:	4420      	add	r0, r4
 800e43e:	4428      	add	r0, r5
 800e440:	bd70      	pop	{r4, r5, r6, pc}
 800e442:	bf00      	nop

0800e444 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>:
 800e444:	4800      	ldr	r0, [pc, #0]	@ (800e448 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x4>)
 800e446:	4770      	bx	lr
 800e448:	20000a20 	.word	0x20000a20

0800e44c <get_serialized_size_geometry_msgs__msg__Vector3>:
 800e44c:	b1b8      	cbz	r0, 800e47e <get_serialized_size_geometry_msgs__msg__Vector3+0x32>
 800e44e:	b538      	push	{r3, r4, r5, lr}
 800e450:	460d      	mov	r5, r1
 800e452:	4628      	mov	r0, r5
 800e454:	2108      	movs	r1, #8
 800e456:	f002 f867 	bl	8010528 <ucdr_alignment>
 800e45a:	f105 0308 	add.w	r3, r5, #8
 800e45e:	181c      	adds	r4, r3, r0
 800e460:	2108      	movs	r1, #8
 800e462:	4620      	mov	r0, r4
 800e464:	f002 f860 	bl	8010528 <ucdr_alignment>
 800e468:	3008      	adds	r0, #8
 800e46a:	4404      	add	r4, r0
 800e46c:	2108      	movs	r1, #8
 800e46e:	4620      	mov	r0, r4
 800e470:	f002 f85a 	bl	8010528 <ucdr_alignment>
 800e474:	f1c5 0508 	rsb	r5, r5, #8
 800e478:	4428      	add	r0, r5
 800e47a:	4420      	add	r0, r4
 800e47c:	bd38      	pop	{r3, r4, r5, pc}
 800e47e:	4770      	bx	lr

0800e480 <_Vector3__cdr_deserialize>:
 800e480:	b538      	push	{r3, r4, r5, lr}
 800e482:	460c      	mov	r4, r1
 800e484:	b171      	cbz	r1, 800e4a4 <_Vector3__cdr_deserialize+0x24>
 800e486:	4605      	mov	r5, r0
 800e488:	f001 fe62 	bl	8010150 <ucdr_deserialize_double>
 800e48c:	f104 0108 	add.w	r1, r4, #8
 800e490:	4628      	mov	r0, r5
 800e492:	f001 fe5d 	bl	8010150 <ucdr_deserialize_double>
 800e496:	f104 0110 	add.w	r1, r4, #16
 800e49a:	4628      	mov	r0, r5
 800e49c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e4a0:	f001 be56 	b.w	8010150 <ucdr_deserialize_double>
 800e4a4:	4608      	mov	r0, r1
 800e4a6:	bd38      	pop	{r3, r4, r5, pc}

0800e4a8 <_Vector3__cdr_serialize>:
 800e4a8:	b198      	cbz	r0, 800e4d2 <_Vector3__cdr_serialize+0x2a>
 800e4aa:	b538      	push	{r3, r4, r5, lr}
 800e4ac:	ed90 0b00 	vldr	d0, [r0]
 800e4b0:	460d      	mov	r5, r1
 800e4b2:	4604      	mov	r4, r0
 800e4b4:	4608      	mov	r0, r1
 800e4b6:	f001 fca9 	bl	800fe0c <ucdr_serialize_double>
 800e4ba:	ed94 0b02 	vldr	d0, [r4, #8]
 800e4be:	4628      	mov	r0, r5
 800e4c0:	f001 fca4 	bl	800fe0c <ucdr_serialize_double>
 800e4c4:	ed94 0b04 	vldr	d0, [r4, #16]
 800e4c8:	4628      	mov	r0, r5
 800e4ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e4ce:	f001 bc9d 	b.w	800fe0c <ucdr_serialize_double>
 800e4d2:	4770      	bx	lr

0800e4d4 <_Vector3__get_serialized_size>:
 800e4d4:	b198      	cbz	r0, 800e4fe <_Vector3__get_serialized_size+0x2a>
 800e4d6:	b510      	push	{r4, lr}
 800e4d8:	2108      	movs	r1, #8
 800e4da:	2000      	movs	r0, #0
 800e4dc:	f002 f824 	bl	8010528 <ucdr_alignment>
 800e4e0:	f100 0408 	add.w	r4, r0, #8
 800e4e4:	2108      	movs	r1, #8
 800e4e6:	4620      	mov	r0, r4
 800e4e8:	f002 f81e 	bl	8010528 <ucdr_alignment>
 800e4ec:	3008      	adds	r0, #8
 800e4ee:	4404      	add	r4, r0
 800e4f0:	2108      	movs	r1, #8
 800e4f2:	4620      	mov	r0, r4
 800e4f4:	f002 f818 	bl	8010528 <ucdr_alignment>
 800e4f8:	3008      	adds	r0, #8
 800e4fa:	4420      	add	r0, r4
 800e4fc:	bd10      	pop	{r4, pc}
 800e4fe:	4770      	bx	lr

0800e500 <_Vector3__max_serialized_size>:
 800e500:	b538      	push	{r3, r4, r5, lr}
 800e502:	2108      	movs	r1, #8
 800e504:	2000      	movs	r0, #0
 800e506:	f002 f80f 	bl	8010528 <ucdr_alignment>
 800e50a:	f100 0508 	add.w	r5, r0, #8
 800e50e:	2108      	movs	r1, #8
 800e510:	4628      	mov	r0, r5
 800e512:	f002 f809 	bl	8010528 <ucdr_alignment>
 800e516:	f100 0408 	add.w	r4, r0, #8
 800e51a:	442c      	add	r4, r5
 800e51c:	2108      	movs	r1, #8
 800e51e:	4620      	mov	r0, r4
 800e520:	f002 f802 	bl	8010528 <ucdr_alignment>
 800e524:	3008      	adds	r0, #8
 800e526:	4420      	add	r0, r4
 800e528:	bd38      	pop	{r3, r4, r5, pc}
 800e52a:	bf00      	nop

0800e52c <max_serialized_size_geometry_msgs__msg__Vector3>:
 800e52c:	b570      	push	{r4, r5, r6, lr}
 800e52e:	2301      	movs	r3, #1
 800e530:	460c      	mov	r4, r1
 800e532:	7003      	strb	r3, [r0, #0]
 800e534:	2108      	movs	r1, #8
 800e536:	4620      	mov	r0, r4
 800e538:	f001 fff6 	bl	8010528 <ucdr_alignment>
 800e53c:	f104 0508 	add.w	r5, r4, #8
 800e540:	1946      	adds	r6, r0, r5
 800e542:	2108      	movs	r1, #8
 800e544:	4630      	mov	r0, r6
 800e546:	f001 ffef 	bl	8010528 <ucdr_alignment>
 800e54a:	f100 0508 	add.w	r5, r0, #8
 800e54e:	4435      	add	r5, r6
 800e550:	2108      	movs	r1, #8
 800e552:	4628      	mov	r0, r5
 800e554:	f001 ffe8 	bl	8010528 <ucdr_alignment>
 800e558:	f1c4 0408 	rsb	r4, r4, #8
 800e55c:	4420      	add	r0, r4
 800e55e:	4428      	add	r0, r5
 800e560:	bd70      	pop	{r4, r5, r6, pc}
 800e562:	bf00      	nop

0800e564 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800e564:	4800      	ldr	r0, [pc, #0]	@ (800e568 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x4>)
 800e566:	4770      	bx	lr
 800e568:	20000a48 	.word	0x20000a48

0800e56c <micro_ros_string_utilities_init_with_size>:
 800e56c:	b570      	push	{r4, r5, r6, lr}
 800e56e:	b086      	sub	sp, #24
 800e570:	1c4c      	adds	r4, r1, #1
 800e572:	4605      	mov	r5, r0
 800e574:	a801      	add	r0, sp, #4
 800e576:	f7fe fbf5 	bl	800cd64 <rcutils_get_default_allocator>
 800e57a:	9b01      	ldr	r3, [sp, #4]
 800e57c:	9905      	ldr	r1, [sp, #20]
 800e57e:	4620      	mov	r0, r4
 800e580:	4798      	blx	r3
 800e582:	4622      	mov	r2, r4
 800e584:	2100      	movs	r1, #0
 800e586:	4606      	mov	r6, r0
 800e588:	f00c ff0a 	bl	801b3a0 <memset>
 800e58c:	2300      	movs	r3, #0
 800e58e:	4628      	mov	r0, r5
 800e590:	e9c5 6300 	strd	r6, r3, [r5]
 800e594:	60ac      	str	r4, [r5, #8]
 800e596:	b006      	add	sp, #24
 800e598:	bd70      	pop	{r4, r5, r6, pc}
 800e59a:	bf00      	nop

0800e59c <micro_ros_string_utilities_append>:
 800e59c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e5a0:	b08a      	sub	sp, #40	@ 0x28
 800e5a2:	4604      	mov	r4, r0
 800e5a4:	f8dd 8048 	ldr.w	r8, [sp, #72]	@ 0x48
 800e5a8:	a801      	add	r0, sp, #4
 800e5aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800e5ae:	a805      	add	r0, sp, #20
 800e5b0:	f7fe fbd8 	bl	800cd64 <rcutils_get_default_allocator>
 800e5b4:	4640      	mov	r0, r8
 800e5b6:	f7f1 fe2d 	bl	8000214 <strlen>
 800e5ba:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800e5be:	9f03      	ldr	r7, [sp, #12]
 800e5c0:	9d01      	ldr	r5, [sp, #4]
 800e5c2:	eb00 0a09 	add.w	sl, r0, r9
 800e5c6:	45ba      	cmp	sl, r7
 800e5c8:	4606      	mov	r6, r0
 800e5ca:	d307      	bcc.n	800e5dc <micro_ros_string_utilities_append+0x40>
 800e5cc:	f10a 0701 	add.w	r7, sl, #1
 800e5d0:	4628      	mov	r0, r5
 800e5d2:	9b07      	ldr	r3, [sp, #28]
 800e5d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e5d6:	4639      	mov	r1, r7
 800e5d8:	4798      	blx	r3
 800e5da:	4605      	mov	r5, r0
 800e5dc:	1c72      	adds	r2, r6, #1
 800e5de:	4641      	mov	r1, r8
 800e5e0:	eb05 0009 	add.w	r0, r5, r9
 800e5e4:	f00c ff5f 	bl	801b4a6 <memcpy>
 800e5e8:	4620      	mov	r0, r4
 800e5ea:	e9c4 5a00 	strd	r5, sl, [r4]
 800e5ee:	60a7      	str	r7, [r4, #8]
 800e5f0:	b00a      	add	sp, #40	@ 0x28
 800e5f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e5f6:	bf00      	nop

0800e5f8 <micro_ros_string_utilities_remove_tail_chars>:
 800e5f8:	b500      	push	{lr}
 800e5fa:	b085      	sub	sp, #20
 800e5fc:	f10d 0e04 	add.w	lr, sp, #4
 800e600:	e88e 000e 	stmia.w	lr, {r1, r2, r3}
 800e604:	4684      	mov	ip, r0
 800e606:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 800e60a:	e88c 000b 	stmia.w	ip, {r0, r1, r3}
 800e60e:	460b      	mov	r3, r1
 800e610:	9906      	ldr	r1, [sp, #24]
 800e612:	1a5b      	subs	r3, r3, r1
 800e614:	9901      	ldr	r1, [sp, #4]
 800e616:	f8cc 3004 	str.w	r3, [ip, #4]
 800e61a:	2200      	movs	r2, #0
 800e61c:	4660      	mov	r0, ip
 800e61e:	54ca      	strb	r2, [r1, r3]
 800e620:	b005      	add	sp, #20
 800e622:	f85d fb04 	ldr.w	pc, [sp], #4
 800e626:	bf00      	nop

0800e628 <micro_ros_string_utilities_destroy>:
 800e628:	b510      	push	{r4, lr}
 800e62a:	4604      	mov	r4, r0
 800e62c:	b086      	sub	sp, #24
 800e62e:	a801      	add	r0, sp, #4
 800e630:	f7fe fb98 	bl	800cd64 <rcutils_get_default_allocator>
 800e634:	9b02      	ldr	r3, [sp, #8]
 800e636:	9905      	ldr	r1, [sp, #20]
 800e638:	6820      	ldr	r0, [r4, #0]
 800e63a:	4798      	blx	r3
 800e63c:	2300      	movs	r3, #0
 800e63e:	e9c4 3300 	strd	r3, r3, [r4]
 800e642:	60a3      	str	r3, [r4, #8]
 800e644:	b006      	add	sp, #24
 800e646:	bd10      	pop	{r4, pc}

0800e648 <ucdr_serialize_endian_array_char>:
 800e648:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e64c:	4619      	mov	r1, r3
 800e64e:	461f      	mov	r7, r3
 800e650:	4605      	mov	r5, r0
 800e652:	4690      	mov	r8, r2
 800e654:	f001 ff10 	bl	8010478 <ucdr_check_buffer_available_for>
 800e658:	b9e0      	cbnz	r0, 800e694 <ucdr_serialize_endian_array_char+0x4c>
 800e65a:	463e      	mov	r6, r7
 800e65c:	e009      	b.n	800e672 <ucdr_serialize_endian_array_char+0x2a>
 800e65e:	68a8      	ldr	r0, [r5, #8]
 800e660:	f00c ff21 	bl	801b4a6 <memcpy>
 800e664:	68ab      	ldr	r3, [r5, #8]
 800e666:	6928      	ldr	r0, [r5, #16]
 800e668:	4423      	add	r3, r4
 800e66a:	4420      	add	r0, r4
 800e66c:	1b36      	subs	r6, r6, r4
 800e66e:	60ab      	str	r3, [r5, #8]
 800e670:	6128      	str	r0, [r5, #16]
 800e672:	4631      	mov	r1, r6
 800e674:	2201      	movs	r2, #1
 800e676:	4628      	mov	r0, r5
 800e678:	f001 ff86 	bl	8010588 <ucdr_check_final_buffer_behavior_array>
 800e67c:	1bb9      	subs	r1, r7, r6
 800e67e:	4441      	add	r1, r8
 800e680:	4604      	mov	r4, r0
 800e682:	4602      	mov	r2, r0
 800e684:	2800      	cmp	r0, #0
 800e686:	d1ea      	bne.n	800e65e <ucdr_serialize_endian_array_char+0x16>
 800e688:	2301      	movs	r3, #1
 800e68a:	7da8      	ldrb	r0, [r5, #22]
 800e68c:	756b      	strb	r3, [r5, #21]
 800e68e:	4058      	eors	r0, r3
 800e690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e694:	463a      	mov	r2, r7
 800e696:	68a8      	ldr	r0, [r5, #8]
 800e698:	4641      	mov	r1, r8
 800e69a:	f00c ff04 	bl	801b4a6 <memcpy>
 800e69e:	68aa      	ldr	r2, [r5, #8]
 800e6a0:	692b      	ldr	r3, [r5, #16]
 800e6a2:	443a      	add	r2, r7
 800e6a4:	443b      	add	r3, r7
 800e6a6:	60aa      	str	r2, [r5, #8]
 800e6a8:	612b      	str	r3, [r5, #16]
 800e6aa:	e7ed      	b.n	800e688 <ucdr_serialize_endian_array_char+0x40>

0800e6ac <ucdr_deserialize_endian_array_char>:
 800e6ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e6b0:	4619      	mov	r1, r3
 800e6b2:	461f      	mov	r7, r3
 800e6b4:	4605      	mov	r5, r0
 800e6b6:	4690      	mov	r8, r2
 800e6b8:	f001 fede 	bl	8010478 <ucdr_check_buffer_available_for>
 800e6bc:	b9e0      	cbnz	r0, 800e6f8 <ucdr_deserialize_endian_array_char+0x4c>
 800e6be:	463e      	mov	r6, r7
 800e6c0:	e009      	b.n	800e6d6 <ucdr_deserialize_endian_array_char+0x2a>
 800e6c2:	68a9      	ldr	r1, [r5, #8]
 800e6c4:	f00c feef 	bl	801b4a6 <memcpy>
 800e6c8:	68ab      	ldr	r3, [r5, #8]
 800e6ca:	6928      	ldr	r0, [r5, #16]
 800e6cc:	4423      	add	r3, r4
 800e6ce:	4420      	add	r0, r4
 800e6d0:	1b36      	subs	r6, r6, r4
 800e6d2:	60ab      	str	r3, [r5, #8]
 800e6d4:	6128      	str	r0, [r5, #16]
 800e6d6:	2201      	movs	r2, #1
 800e6d8:	4631      	mov	r1, r6
 800e6da:	4628      	mov	r0, r5
 800e6dc:	f001 ff54 	bl	8010588 <ucdr_check_final_buffer_behavior_array>
 800e6e0:	4604      	mov	r4, r0
 800e6e2:	1bb8      	subs	r0, r7, r6
 800e6e4:	4440      	add	r0, r8
 800e6e6:	4622      	mov	r2, r4
 800e6e8:	2c00      	cmp	r4, #0
 800e6ea:	d1ea      	bne.n	800e6c2 <ucdr_deserialize_endian_array_char+0x16>
 800e6ec:	2301      	movs	r3, #1
 800e6ee:	7da8      	ldrb	r0, [r5, #22]
 800e6f0:	756b      	strb	r3, [r5, #21]
 800e6f2:	4058      	eors	r0, r3
 800e6f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e6f8:	463a      	mov	r2, r7
 800e6fa:	68a9      	ldr	r1, [r5, #8]
 800e6fc:	4640      	mov	r0, r8
 800e6fe:	f00c fed2 	bl	801b4a6 <memcpy>
 800e702:	68aa      	ldr	r2, [r5, #8]
 800e704:	692b      	ldr	r3, [r5, #16]
 800e706:	443a      	add	r2, r7
 800e708:	443b      	add	r3, r7
 800e70a:	60aa      	str	r2, [r5, #8]
 800e70c:	612b      	str	r3, [r5, #16]
 800e70e:	e7ed      	b.n	800e6ec <ucdr_deserialize_endian_array_char+0x40>

0800e710 <ucdr_serialize_array_uint8_t>:
 800e710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e714:	4688      	mov	r8, r1
 800e716:	4611      	mov	r1, r2
 800e718:	4617      	mov	r7, r2
 800e71a:	4605      	mov	r5, r0
 800e71c:	f001 feac 	bl	8010478 <ucdr_check_buffer_available_for>
 800e720:	b9e0      	cbnz	r0, 800e75c <ucdr_serialize_array_uint8_t+0x4c>
 800e722:	463e      	mov	r6, r7
 800e724:	e009      	b.n	800e73a <ucdr_serialize_array_uint8_t+0x2a>
 800e726:	68a8      	ldr	r0, [r5, #8]
 800e728:	f00c febd 	bl	801b4a6 <memcpy>
 800e72c:	68aa      	ldr	r2, [r5, #8]
 800e72e:	692b      	ldr	r3, [r5, #16]
 800e730:	4422      	add	r2, r4
 800e732:	4423      	add	r3, r4
 800e734:	1b36      	subs	r6, r6, r4
 800e736:	60aa      	str	r2, [r5, #8]
 800e738:	612b      	str	r3, [r5, #16]
 800e73a:	4631      	mov	r1, r6
 800e73c:	2201      	movs	r2, #1
 800e73e:	4628      	mov	r0, r5
 800e740:	f001 ff22 	bl	8010588 <ucdr_check_final_buffer_behavior_array>
 800e744:	1bb9      	subs	r1, r7, r6
 800e746:	4441      	add	r1, r8
 800e748:	4604      	mov	r4, r0
 800e74a:	4602      	mov	r2, r0
 800e74c:	2800      	cmp	r0, #0
 800e74e:	d1ea      	bne.n	800e726 <ucdr_serialize_array_uint8_t+0x16>
 800e750:	2301      	movs	r3, #1
 800e752:	7da8      	ldrb	r0, [r5, #22]
 800e754:	756b      	strb	r3, [r5, #21]
 800e756:	4058      	eors	r0, r3
 800e758:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e75c:	463a      	mov	r2, r7
 800e75e:	68a8      	ldr	r0, [r5, #8]
 800e760:	4641      	mov	r1, r8
 800e762:	f00c fea0 	bl	801b4a6 <memcpy>
 800e766:	68aa      	ldr	r2, [r5, #8]
 800e768:	692b      	ldr	r3, [r5, #16]
 800e76a:	443a      	add	r2, r7
 800e76c:	443b      	add	r3, r7
 800e76e:	60aa      	str	r2, [r5, #8]
 800e770:	612b      	str	r3, [r5, #16]
 800e772:	e7ed      	b.n	800e750 <ucdr_serialize_array_uint8_t+0x40>

0800e774 <ucdr_serialize_endian_array_uint8_t>:
 800e774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e778:	4619      	mov	r1, r3
 800e77a:	461f      	mov	r7, r3
 800e77c:	4605      	mov	r5, r0
 800e77e:	4690      	mov	r8, r2
 800e780:	f001 fe7a 	bl	8010478 <ucdr_check_buffer_available_for>
 800e784:	b9e0      	cbnz	r0, 800e7c0 <ucdr_serialize_endian_array_uint8_t+0x4c>
 800e786:	463e      	mov	r6, r7
 800e788:	e009      	b.n	800e79e <ucdr_serialize_endian_array_uint8_t+0x2a>
 800e78a:	68a8      	ldr	r0, [r5, #8]
 800e78c:	f00c fe8b 	bl	801b4a6 <memcpy>
 800e790:	68ab      	ldr	r3, [r5, #8]
 800e792:	6928      	ldr	r0, [r5, #16]
 800e794:	4423      	add	r3, r4
 800e796:	4420      	add	r0, r4
 800e798:	1b36      	subs	r6, r6, r4
 800e79a:	60ab      	str	r3, [r5, #8]
 800e79c:	6128      	str	r0, [r5, #16]
 800e79e:	4631      	mov	r1, r6
 800e7a0:	2201      	movs	r2, #1
 800e7a2:	4628      	mov	r0, r5
 800e7a4:	f001 fef0 	bl	8010588 <ucdr_check_final_buffer_behavior_array>
 800e7a8:	1bb9      	subs	r1, r7, r6
 800e7aa:	4441      	add	r1, r8
 800e7ac:	4604      	mov	r4, r0
 800e7ae:	4602      	mov	r2, r0
 800e7b0:	2800      	cmp	r0, #0
 800e7b2:	d1ea      	bne.n	800e78a <ucdr_serialize_endian_array_uint8_t+0x16>
 800e7b4:	2301      	movs	r3, #1
 800e7b6:	7da8      	ldrb	r0, [r5, #22]
 800e7b8:	756b      	strb	r3, [r5, #21]
 800e7ba:	4058      	eors	r0, r3
 800e7bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e7c0:	463a      	mov	r2, r7
 800e7c2:	68a8      	ldr	r0, [r5, #8]
 800e7c4:	4641      	mov	r1, r8
 800e7c6:	f00c fe6e 	bl	801b4a6 <memcpy>
 800e7ca:	68aa      	ldr	r2, [r5, #8]
 800e7cc:	692b      	ldr	r3, [r5, #16]
 800e7ce:	443a      	add	r2, r7
 800e7d0:	443b      	add	r3, r7
 800e7d2:	60aa      	str	r2, [r5, #8]
 800e7d4:	612b      	str	r3, [r5, #16]
 800e7d6:	e7ed      	b.n	800e7b4 <ucdr_serialize_endian_array_uint8_t+0x40>

0800e7d8 <ucdr_deserialize_array_uint8_t>:
 800e7d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e7dc:	4688      	mov	r8, r1
 800e7de:	4611      	mov	r1, r2
 800e7e0:	4617      	mov	r7, r2
 800e7e2:	4605      	mov	r5, r0
 800e7e4:	f001 fe48 	bl	8010478 <ucdr_check_buffer_available_for>
 800e7e8:	b9e0      	cbnz	r0, 800e824 <ucdr_deserialize_array_uint8_t+0x4c>
 800e7ea:	463e      	mov	r6, r7
 800e7ec:	e009      	b.n	800e802 <ucdr_deserialize_array_uint8_t+0x2a>
 800e7ee:	68a9      	ldr	r1, [r5, #8]
 800e7f0:	f00c fe59 	bl	801b4a6 <memcpy>
 800e7f4:	68aa      	ldr	r2, [r5, #8]
 800e7f6:	692b      	ldr	r3, [r5, #16]
 800e7f8:	4422      	add	r2, r4
 800e7fa:	4423      	add	r3, r4
 800e7fc:	1b36      	subs	r6, r6, r4
 800e7fe:	60aa      	str	r2, [r5, #8]
 800e800:	612b      	str	r3, [r5, #16]
 800e802:	2201      	movs	r2, #1
 800e804:	4631      	mov	r1, r6
 800e806:	4628      	mov	r0, r5
 800e808:	f001 febe 	bl	8010588 <ucdr_check_final_buffer_behavior_array>
 800e80c:	4604      	mov	r4, r0
 800e80e:	1bb8      	subs	r0, r7, r6
 800e810:	4440      	add	r0, r8
 800e812:	4622      	mov	r2, r4
 800e814:	2c00      	cmp	r4, #0
 800e816:	d1ea      	bne.n	800e7ee <ucdr_deserialize_array_uint8_t+0x16>
 800e818:	2301      	movs	r3, #1
 800e81a:	7da8      	ldrb	r0, [r5, #22]
 800e81c:	756b      	strb	r3, [r5, #21]
 800e81e:	4058      	eors	r0, r3
 800e820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e824:	463a      	mov	r2, r7
 800e826:	68a9      	ldr	r1, [r5, #8]
 800e828:	4640      	mov	r0, r8
 800e82a:	f00c fe3c 	bl	801b4a6 <memcpy>
 800e82e:	68aa      	ldr	r2, [r5, #8]
 800e830:	692b      	ldr	r3, [r5, #16]
 800e832:	443a      	add	r2, r7
 800e834:	443b      	add	r3, r7
 800e836:	60aa      	str	r2, [r5, #8]
 800e838:	612b      	str	r3, [r5, #16]
 800e83a:	e7ed      	b.n	800e818 <ucdr_deserialize_array_uint8_t+0x40>

0800e83c <ucdr_deserialize_endian_array_uint8_t>:
 800e83c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e840:	4619      	mov	r1, r3
 800e842:	461f      	mov	r7, r3
 800e844:	4605      	mov	r5, r0
 800e846:	4690      	mov	r8, r2
 800e848:	f001 fe16 	bl	8010478 <ucdr_check_buffer_available_for>
 800e84c:	b9e0      	cbnz	r0, 800e888 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 800e84e:	463e      	mov	r6, r7
 800e850:	e009      	b.n	800e866 <ucdr_deserialize_endian_array_uint8_t+0x2a>
 800e852:	68a9      	ldr	r1, [r5, #8]
 800e854:	f00c fe27 	bl	801b4a6 <memcpy>
 800e858:	68ab      	ldr	r3, [r5, #8]
 800e85a:	6928      	ldr	r0, [r5, #16]
 800e85c:	4423      	add	r3, r4
 800e85e:	4420      	add	r0, r4
 800e860:	1b36      	subs	r6, r6, r4
 800e862:	60ab      	str	r3, [r5, #8]
 800e864:	6128      	str	r0, [r5, #16]
 800e866:	2201      	movs	r2, #1
 800e868:	4631      	mov	r1, r6
 800e86a:	4628      	mov	r0, r5
 800e86c:	f001 fe8c 	bl	8010588 <ucdr_check_final_buffer_behavior_array>
 800e870:	4604      	mov	r4, r0
 800e872:	1bb8      	subs	r0, r7, r6
 800e874:	4440      	add	r0, r8
 800e876:	4622      	mov	r2, r4
 800e878:	2c00      	cmp	r4, #0
 800e87a:	d1ea      	bne.n	800e852 <ucdr_deserialize_endian_array_uint8_t+0x16>
 800e87c:	2301      	movs	r3, #1
 800e87e:	7da8      	ldrb	r0, [r5, #22]
 800e880:	756b      	strb	r3, [r5, #21]
 800e882:	4058      	eors	r0, r3
 800e884:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e888:	463a      	mov	r2, r7
 800e88a:	68a9      	ldr	r1, [r5, #8]
 800e88c:	4640      	mov	r0, r8
 800e88e:	f00c fe0a 	bl	801b4a6 <memcpy>
 800e892:	68aa      	ldr	r2, [r5, #8]
 800e894:	692b      	ldr	r3, [r5, #16]
 800e896:	443a      	add	r2, r7
 800e898:	443b      	add	r3, r7
 800e89a:	60aa      	str	r2, [r5, #8]
 800e89c:	612b      	str	r3, [r5, #16]
 800e89e:	e7ed      	b.n	800e87c <ucdr_deserialize_endian_array_uint8_t+0x40>

0800e8a0 <ucdr_serialize_array_uint16_t>:
 800e8a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e8a4:	460e      	mov	r6, r1
 800e8a6:	2102      	movs	r1, #2
 800e8a8:	4604      	mov	r4, r0
 800e8aa:	4617      	mov	r7, r2
 800e8ac:	f001 fe44 	bl	8010538 <ucdr_buffer_alignment>
 800e8b0:	4601      	mov	r1, r0
 800e8b2:	4620      	mov	r0, r4
 800e8b4:	7d65      	ldrb	r5, [r4, #21]
 800e8b6:	f001 fe83 	bl	80105c0 <ucdr_advance_buffer>
 800e8ba:	7d21      	ldrb	r1, [r4, #20]
 800e8bc:	7565      	strb	r5, [r4, #21]
 800e8be:	2901      	cmp	r1, #1
 800e8c0:	d011      	beq.n	800e8e6 <ucdr_serialize_array_uint16_t+0x46>
 800e8c2:	b15f      	cbz	r7, 800e8dc <ucdr_serialize_array_uint16_t+0x3c>
 800e8c4:	3e02      	subs	r6, #2
 800e8c6:	2500      	movs	r5, #0
 800e8c8:	e000      	b.n	800e8cc <ucdr_serialize_array_uint16_t+0x2c>
 800e8ca:	7d21      	ldrb	r1, [r4, #20]
 800e8cc:	f836 2f02 	ldrh.w	r2, [r6, #2]!
 800e8d0:	4620      	mov	r0, r4
 800e8d2:	3501      	adds	r5, #1
 800e8d4:	f000 fabe 	bl	800ee54 <ucdr_serialize_endian_uint16_t>
 800e8d8:	42af      	cmp	r7, r5
 800e8da:	d1f6      	bne.n	800e8ca <ucdr_serialize_array_uint16_t+0x2a>
 800e8dc:	7da0      	ldrb	r0, [r4, #22]
 800e8de:	f080 0001 	eor.w	r0, r0, #1
 800e8e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e8e6:	007f      	lsls	r7, r7, #1
 800e8e8:	4639      	mov	r1, r7
 800e8ea:	4620      	mov	r0, r4
 800e8ec:	f001 fdc4 	bl	8010478 <ucdr_check_buffer_available_for>
 800e8f0:	b9f8      	cbnz	r0, 800e932 <ucdr_serialize_array_uint16_t+0x92>
 800e8f2:	46b8      	mov	r8, r7
 800e8f4:	e00a      	b.n	800e90c <ucdr_serialize_array_uint16_t+0x6c>
 800e8f6:	68a0      	ldr	r0, [r4, #8]
 800e8f8:	f00c fdd5 	bl	801b4a6 <memcpy>
 800e8fc:	68a2      	ldr	r2, [r4, #8]
 800e8fe:	6923      	ldr	r3, [r4, #16]
 800e900:	442a      	add	r2, r5
 800e902:	442b      	add	r3, r5
 800e904:	eba8 0805 	sub.w	r8, r8, r5
 800e908:	60a2      	str	r2, [r4, #8]
 800e90a:	6123      	str	r3, [r4, #16]
 800e90c:	4641      	mov	r1, r8
 800e90e:	2202      	movs	r2, #2
 800e910:	4620      	mov	r0, r4
 800e912:	f001 fe39 	bl	8010588 <ucdr_check_final_buffer_behavior_array>
 800e916:	eba7 0108 	sub.w	r1, r7, r8
 800e91a:	4431      	add	r1, r6
 800e91c:	4605      	mov	r5, r0
 800e91e:	4602      	mov	r2, r0
 800e920:	2800      	cmp	r0, #0
 800e922:	d1e8      	bne.n	800e8f6 <ucdr_serialize_array_uint16_t+0x56>
 800e924:	7da0      	ldrb	r0, [r4, #22]
 800e926:	2302      	movs	r3, #2
 800e928:	7563      	strb	r3, [r4, #21]
 800e92a:	f080 0001 	eor.w	r0, r0, #1
 800e92e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e932:	463a      	mov	r2, r7
 800e934:	68a0      	ldr	r0, [r4, #8]
 800e936:	4631      	mov	r1, r6
 800e938:	f00c fdb5 	bl	801b4a6 <memcpy>
 800e93c:	68a2      	ldr	r2, [r4, #8]
 800e93e:	6923      	ldr	r3, [r4, #16]
 800e940:	443a      	add	r2, r7
 800e942:	441f      	add	r7, r3
 800e944:	60a2      	str	r2, [r4, #8]
 800e946:	6127      	str	r7, [r4, #16]
 800e948:	e7ec      	b.n	800e924 <ucdr_serialize_array_uint16_t+0x84>
 800e94a:	bf00      	nop

0800e94c <ucdr_deserialize_array_uint16_t>:
 800e94c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e950:	460e      	mov	r6, r1
 800e952:	2102      	movs	r1, #2
 800e954:	4604      	mov	r4, r0
 800e956:	4617      	mov	r7, r2
 800e958:	f001 fdee 	bl	8010538 <ucdr_buffer_alignment>
 800e95c:	4601      	mov	r1, r0
 800e95e:	4620      	mov	r0, r4
 800e960:	7d65      	ldrb	r5, [r4, #21]
 800e962:	f001 fe2d 	bl	80105c0 <ucdr_advance_buffer>
 800e966:	7d21      	ldrb	r1, [r4, #20]
 800e968:	7565      	strb	r5, [r4, #21]
 800e96a:	2901      	cmp	r1, #1
 800e96c:	d011      	beq.n	800e992 <ucdr_deserialize_array_uint16_t+0x46>
 800e96e:	b15f      	cbz	r7, 800e988 <ucdr_deserialize_array_uint16_t+0x3c>
 800e970:	2500      	movs	r5, #0
 800e972:	e000      	b.n	800e976 <ucdr_deserialize_array_uint16_t+0x2a>
 800e974:	7d21      	ldrb	r1, [r4, #20]
 800e976:	4632      	mov	r2, r6
 800e978:	4620      	mov	r0, r4
 800e97a:	3501      	adds	r5, #1
 800e97c:	f000 fb5e 	bl	800f03c <ucdr_deserialize_endian_uint16_t>
 800e980:	42af      	cmp	r7, r5
 800e982:	f106 0602 	add.w	r6, r6, #2
 800e986:	d1f5      	bne.n	800e974 <ucdr_deserialize_array_uint16_t+0x28>
 800e988:	7da0      	ldrb	r0, [r4, #22]
 800e98a:	f080 0001 	eor.w	r0, r0, #1
 800e98e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e992:	007f      	lsls	r7, r7, #1
 800e994:	4639      	mov	r1, r7
 800e996:	4620      	mov	r0, r4
 800e998:	f001 fd6e 	bl	8010478 <ucdr_check_buffer_available_for>
 800e99c:	b9f8      	cbnz	r0, 800e9de <ucdr_deserialize_array_uint16_t+0x92>
 800e99e:	46b8      	mov	r8, r7
 800e9a0:	e00a      	b.n	800e9b8 <ucdr_deserialize_array_uint16_t+0x6c>
 800e9a2:	68a1      	ldr	r1, [r4, #8]
 800e9a4:	f00c fd7f 	bl	801b4a6 <memcpy>
 800e9a8:	68a2      	ldr	r2, [r4, #8]
 800e9aa:	6923      	ldr	r3, [r4, #16]
 800e9ac:	442a      	add	r2, r5
 800e9ae:	442b      	add	r3, r5
 800e9b0:	eba8 0805 	sub.w	r8, r8, r5
 800e9b4:	60a2      	str	r2, [r4, #8]
 800e9b6:	6123      	str	r3, [r4, #16]
 800e9b8:	2202      	movs	r2, #2
 800e9ba:	4641      	mov	r1, r8
 800e9bc:	4620      	mov	r0, r4
 800e9be:	f001 fde3 	bl	8010588 <ucdr_check_final_buffer_behavior_array>
 800e9c2:	4605      	mov	r5, r0
 800e9c4:	eba7 0008 	sub.w	r0, r7, r8
 800e9c8:	4430      	add	r0, r6
 800e9ca:	462a      	mov	r2, r5
 800e9cc:	2d00      	cmp	r5, #0
 800e9ce:	d1e8      	bne.n	800e9a2 <ucdr_deserialize_array_uint16_t+0x56>
 800e9d0:	7da0      	ldrb	r0, [r4, #22]
 800e9d2:	2302      	movs	r3, #2
 800e9d4:	7563      	strb	r3, [r4, #21]
 800e9d6:	f080 0001 	eor.w	r0, r0, #1
 800e9da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e9de:	463a      	mov	r2, r7
 800e9e0:	68a1      	ldr	r1, [r4, #8]
 800e9e2:	4630      	mov	r0, r6
 800e9e4:	f00c fd5f 	bl	801b4a6 <memcpy>
 800e9e8:	68a2      	ldr	r2, [r4, #8]
 800e9ea:	6923      	ldr	r3, [r4, #16]
 800e9ec:	443a      	add	r2, r7
 800e9ee:	441f      	add	r7, r3
 800e9f0:	60a2      	str	r2, [r4, #8]
 800e9f2:	6127      	str	r7, [r4, #16]
 800e9f4:	e7ec      	b.n	800e9d0 <ucdr_deserialize_array_uint16_t+0x84>
 800e9f6:	bf00      	nop

0800e9f8 <ucdr_serialize_array_float>:
 800e9f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e9fc:	460e      	mov	r6, r1
 800e9fe:	2104      	movs	r1, #4
 800ea00:	4604      	mov	r4, r0
 800ea02:	4617      	mov	r7, r2
 800ea04:	f001 fd98 	bl	8010538 <ucdr_buffer_alignment>
 800ea08:	4601      	mov	r1, r0
 800ea0a:	4620      	mov	r0, r4
 800ea0c:	7d65      	ldrb	r5, [r4, #21]
 800ea0e:	f001 fdd7 	bl	80105c0 <ucdr_advance_buffer>
 800ea12:	7d21      	ldrb	r1, [r4, #20]
 800ea14:	7565      	strb	r5, [r4, #21]
 800ea16:	2901      	cmp	r1, #1
 800ea18:	d010      	beq.n	800ea3c <ucdr_serialize_array_float+0x44>
 800ea1a:	b157      	cbz	r7, 800ea32 <ucdr_serialize_array_float+0x3a>
 800ea1c:	2500      	movs	r5, #0
 800ea1e:	e000      	b.n	800ea22 <ucdr_serialize_array_float+0x2a>
 800ea20:	7d21      	ldrb	r1, [r4, #20]
 800ea22:	ecb6 0a01 	vldmia	r6!, {s0}
 800ea26:	4620      	mov	r0, r4
 800ea28:	3501      	adds	r5, #1
 800ea2a:	f001 f8bf 	bl	800fbac <ucdr_serialize_endian_float>
 800ea2e:	42af      	cmp	r7, r5
 800ea30:	d1f6      	bne.n	800ea20 <ucdr_serialize_array_float+0x28>
 800ea32:	7da0      	ldrb	r0, [r4, #22]
 800ea34:	f080 0001 	eor.w	r0, r0, #1
 800ea38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea3c:	00bf      	lsls	r7, r7, #2
 800ea3e:	4639      	mov	r1, r7
 800ea40:	4620      	mov	r0, r4
 800ea42:	f001 fd19 	bl	8010478 <ucdr_check_buffer_available_for>
 800ea46:	b9f8      	cbnz	r0, 800ea88 <ucdr_serialize_array_float+0x90>
 800ea48:	46b8      	mov	r8, r7
 800ea4a:	e00a      	b.n	800ea62 <ucdr_serialize_array_float+0x6a>
 800ea4c:	68a0      	ldr	r0, [r4, #8]
 800ea4e:	f00c fd2a 	bl	801b4a6 <memcpy>
 800ea52:	68a2      	ldr	r2, [r4, #8]
 800ea54:	6923      	ldr	r3, [r4, #16]
 800ea56:	442a      	add	r2, r5
 800ea58:	442b      	add	r3, r5
 800ea5a:	eba8 0805 	sub.w	r8, r8, r5
 800ea5e:	60a2      	str	r2, [r4, #8]
 800ea60:	6123      	str	r3, [r4, #16]
 800ea62:	4641      	mov	r1, r8
 800ea64:	2204      	movs	r2, #4
 800ea66:	4620      	mov	r0, r4
 800ea68:	f001 fd8e 	bl	8010588 <ucdr_check_final_buffer_behavior_array>
 800ea6c:	eba7 0108 	sub.w	r1, r7, r8
 800ea70:	4431      	add	r1, r6
 800ea72:	4605      	mov	r5, r0
 800ea74:	4602      	mov	r2, r0
 800ea76:	2800      	cmp	r0, #0
 800ea78:	d1e8      	bne.n	800ea4c <ucdr_serialize_array_float+0x54>
 800ea7a:	7da0      	ldrb	r0, [r4, #22]
 800ea7c:	2304      	movs	r3, #4
 800ea7e:	7563      	strb	r3, [r4, #21]
 800ea80:	f080 0001 	eor.w	r0, r0, #1
 800ea84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea88:	463a      	mov	r2, r7
 800ea8a:	68a0      	ldr	r0, [r4, #8]
 800ea8c:	4631      	mov	r1, r6
 800ea8e:	f00c fd0a 	bl	801b4a6 <memcpy>
 800ea92:	68a2      	ldr	r2, [r4, #8]
 800ea94:	6923      	ldr	r3, [r4, #16]
 800ea96:	443a      	add	r2, r7
 800ea98:	441f      	add	r7, r3
 800ea9a:	60a2      	str	r2, [r4, #8]
 800ea9c:	6127      	str	r7, [r4, #16]
 800ea9e:	e7ec      	b.n	800ea7a <ucdr_serialize_array_float+0x82>

0800eaa0 <ucdr_deserialize_array_float>:
 800eaa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eaa4:	460e      	mov	r6, r1
 800eaa6:	2104      	movs	r1, #4
 800eaa8:	4604      	mov	r4, r0
 800eaaa:	4617      	mov	r7, r2
 800eaac:	f001 fd44 	bl	8010538 <ucdr_buffer_alignment>
 800eab0:	4601      	mov	r1, r0
 800eab2:	4620      	mov	r0, r4
 800eab4:	7d65      	ldrb	r5, [r4, #21]
 800eab6:	f001 fd83 	bl	80105c0 <ucdr_advance_buffer>
 800eaba:	7d21      	ldrb	r1, [r4, #20]
 800eabc:	7565      	strb	r5, [r4, #21]
 800eabe:	2901      	cmp	r1, #1
 800eac0:	d011      	beq.n	800eae6 <ucdr_deserialize_array_float+0x46>
 800eac2:	b15f      	cbz	r7, 800eadc <ucdr_deserialize_array_float+0x3c>
 800eac4:	2500      	movs	r5, #0
 800eac6:	e000      	b.n	800eaca <ucdr_deserialize_array_float+0x2a>
 800eac8:	7d21      	ldrb	r1, [r4, #20]
 800eaca:	4632      	mov	r2, r6
 800eacc:	4620      	mov	r0, r4
 800eace:	3501      	adds	r5, #1
 800ead0:	f001 f906 	bl	800fce0 <ucdr_deserialize_endian_float>
 800ead4:	42af      	cmp	r7, r5
 800ead6:	f106 0604 	add.w	r6, r6, #4
 800eada:	d1f5      	bne.n	800eac8 <ucdr_deserialize_array_float+0x28>
 800eadc:	7da0      	ldrb	r0, [r4, #22]
 800eade:	f080 0001 	eor.w	r0, r0, #1
 800eae2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eae6:	00bf      	lsls	r7, r7, #2
 800eae8:	4639      	mov	r1, r7
 800eaea:	4620      	mov	r0, r4
 800eaec:	f001 fcc4 	bl	8010478 <ucdr_check_buffer_available_for>
 800eaf0:	b9f8      	cbnz	r0, 800eb32 <ucdr_deserialize_array_float+0x92>
 800eaf2:	46b8      	mov	r8, r7
 800eaf4:	e00a      	b.n	800eb0c <ucdr_deserialize_array_float+0x6c>
 800eaf6:	68a1      	ldr	r1, [r4, #8]
 800eaf8:	f00c fcd5 	bl	801b4a6 <memcpy>
 800eafc:	68a2      	ldr	r2, [r4, #8]
 800eafe:	6923      	ldr	r3, [r4, #16]
 800eb00:	442a      	add	r2, r5
 800eb02:	442b      	add	r3, r5
 800eb04:	eba8 0805 	sub.w	r8, r8, r5
 800eb08:	60a2      	str	r2, [r4, #8]
 800eb0a:	6123      	str	r3, [r4, #16]
 800eb0c:	2204      	movs	r2, #4
 800eb0e:	4641      	mov	r1, r8
 800eb10:	4620      	mov	r0, r4
 800eb12:	f001 fd39 	bl	8010588 <ucdr_check_final_buffer_behavior_array>
 800eb16:	4605      	mov	r5, r0
 800eb18:	eba7 0008 	sub.w	r0, r7, r8
 800eb1c:	4430      	add	r0, r6
 800eb1e:	462a      	mov	r2, r5
 800eb20:	2d00      	cmp	r5, #0
 800eb22:	d1e8      	bne.n	800eaf6 <ucdr_deserialize_array_float+0x56>
 800eb24:	7da0      	ldrb	r0, [r4, #22]
 800eb26:	2304      	movs	r3, #4
 800eb28:	7563      	strb	r3, [r4, #21]
 800eb2a:	f080 0001 	eor.w	r0, r0, #1
 800eb2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb32:	463a      	mov	r2, r7
 800eb34:	68a1      	ldr	r1, [r4, #8]
 800eb36:	4630      	mov	r0, r6
 800eb38:	f00c fcb5 	bl	801b4a6 <memcpy>
 800eb3c:	68a2      	ldr	r2, [r4, #8]
 800eb3e:	6923      	ldr	r3, [r4, #16]
 800eb40:	443a      	add	r2, r7
 800eb42:	441f      	add	r7, r3
 800eb44:	60a2      	str	r2, [r4, #8]
 800eb46:	6127      	str	r7, [r4, #16]
 800eb48:	e7ec      	b.n	800eb24 <ucdr_deserialize_array_float+0x84>
 800eb4a:	bf00      	nop

0800eb4c <ucdr_serialize_array_double>:
 800eb4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb50:	460e      	mov	r6, r1
 800eb52:	2108      	movs	r1, #8
 800eb54:	4604      	mov	r4, r0
 800eb56:	4617      	mov	r7, r2
 800eb58:	f001 fcee 	bl	8010538 <ucdr_buffer_alignment>
 800eb5c:	4601      	mov	r1, r0
 800eb5e:	4620      	mov	r0, r4
 800eb60:	7d65      	ldrb	r5, [r4, #21]
 800eb62:	f001 fd2d 	bl	80105c0 <ucdr_advance_buffer>
 800eb66:	7d21      	ldrb	r1, [r4, #20]
 800eb68:	7565      	strb	r5, [r4, #21]
 800eb6a:	2901      	cmp	r1, #1
 800eb6c:	d010      	beq.n	800eb90 <ucdr_serialize_array_double+0x44>
 800eb6e:	b157      	cbz	r7, 800eb86 <ucdr_serialize_array_double+0x3a>
 800eb70:	2500      	movs	r5, #0
 800eb72:	e000      	b.n	800eb76 <ucdr_serialize_array_double+0x2a>
 800eb74:	7d21      	ldrb	r1, [r4, #20]
 800eb76:	ecb6 0b02 	vldmia	r6!, {d0}
 800eb7a:	4620      	mov	r0, r4
 800eb7c:	3501      	adds	r5, #1
 800eb7e:	f001 fa15 	bl	800ffac <ucdr_serialize_endian_double>
 800eb82:	42af      	cmp	r7, r5
 800eb84:	d1f6      	bne.n	800eb74 <ucdr_serialize_array_double+0x28>
 800eb86:	7da0      	ldrb	r0, [r4, #22]
 800eb88:	f080 0001 	eor.w	r0, r0, #1
 800eb8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb90:	00ff      	lsls	r7, r7, #3
 800eb92:	4639      	mov	r1, r7
 800eb94:	4620      	mov	r0, r4
 800eb96:	f001 fc6f 	bl	8010478 <ucdr_check_buffer_available_for>
 800eb9a:	b9f8      	cbnz	r0, 800ebdc <ucdr_serialize_array_double+0x90>
 800eb9c:	46b8      	mov	r8, r7
 800eb9e:	e00a      	b.n	800ebb6 <ucdr_serialize_array_double+0x6a>
 800eba0:	68a0      	ldr	r0, [r4, #8]
 800eba2:	f00c fc80 	bl	801b4a6 <memcpy>
 800eba6:	68a2      	ldr	r2, [r4, #8]
 800eba8:	6923      	ldr	r3, [r4, #16]
 800ebaa:	442a      	add	r2, r5
 800ebac:	442b      	add	r3, r5
 800ebae:	eba8 0805 	sub.w	r8, r8, r5
 800ebb2:	60a2      	str	r2, [r4, #8]
 800ebb4:	6123      	str	r3, [r4, #16]
 800ebb6:	4641      	mov	r1, r8
 800ebb8:	2208      	movs	r2, #8
 800ebba:	4620      	mov	r0, r4
 800ebbc:	f001 fce4 	bl	8010588 <ucdr_check_final_buffer_behavior_array>
 800ebc0:	eba7 0108 	sub.w	r1, r7, r8
 800ebc4:	4431      	add	r1, r6
 800ebc6:	4605      	mov	r5, r0
 800ebc8:	4602      	mov	r2, r0
 800ebca:	2800      	cmp	r0, #0
 800ebcc:	d1e8      	bne.n	800eba0 <ucdr_serialize_array_double+0x54>
 800ebce:	7da0      	ldrb	r0, [r4, #22]
 800ebd0:	2308      	movs	r3, #8
 800ebd2:	7563      	strb	r3, [r4, #21]
 800ebd4:	f080 0001 	eor.w	r0, r0, #1
 800ebd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ebdc:	463a      	mov	r2, r7
 800ebde:	68a0      	ldr	r0, [r4, #8]
 800ebe0:	4631      	mov	r1, r6
 800ebe2:	f00c fc60 	bl	801b4a6 <memcpy>
 800ebe6:	68a2      	ldr	r2, [r4, #8]
 800ebe8:	6923      	ldr	r3, [r4, #16]
 800ebea:	443a      	add	r2, r7
 800ebec:	441f      	add	r7, r3
 800ebee:	60a2      	str	r2, [r4, #8]
 800ebf0:	6127      	str	r7, [r4, #16]
 800ebf2:	e7ec      	b.n	800ebce <ucdr_serialize_array_double+0x82>

0800ebf4 <ucdr_deserialize_array_double>:
 800ebf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ebf8:	460e      	mov	r6, r1
 800ebfa:	2108      	movs	r1, #8
 800ebfc:	4604      	mov	r4, r0
 800ebfe:	4617      	mov	r7, r2
 800ec00:	f001 fc9a 	bl	8010538 <ucdr_buffer_alignment>
 800ec04:	4601      	mov	r1, r0
 800ec06:	4620      	mov	r0, r4
 800ec08:	7d65      	ldrb	r5, [r4, #21]
 800ec0a:	f001 fcd9 	bl	80105c0 <ucdr_advance_buffer>
 800ec0e:	7d21      	ldrb	r1, [r4, #20]
 800ec10:	7565      	strb	r5, [r4, #21]
 800ec12:	2901      	cmp	r1, #1
 800ec14:	d011      	beq.n	800ec3a <ucdr_deserialize_array_double+0x46>
 800ec16:	b15f      	cbz	r7, 800ec30 <ucdr_deserialize_array_double+0x3c>
 800ec18:	2500      	movs	r5, #0
 800ec1a:	e000      	b.n	800ec1e <ucdr_deserialize_array_double+0x2a>
 800ec1c:	7d21      	ldrb	r1, [r4, #20]
 800ec1e:	4632      	mov	r2, r6
 800ec20:	4620      	mov	r0, r4
 800ec22:	3501      	adds	r5, #1
 800ec24:	f001 fb5a 	bl	80102dc <ucdr_deserialize_endian_double>
 800ec28:	42af      	cmp	r7, r5
 800ec2a:	f106 0608 	add.w	r6, r6, #8
 800ec2e:	d1f5      	bne.n	800ec1c <ucdr_deserialize_array_double+0x28>
 800ec30:	7da0      	ldrb	r0, [r4, #22]
 800ec32:	f080 0001 	eor.w	r0, r0, #1
 800ec36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec3a:	00ff      	lsls	r7, r7, #3
 800ec3c:	4639      	mov	r1, r7
 800ec3e:	4620      	mov	r0, r4
 800ec40:	f001 fc1a 	bl	8010478 <ucdr_check_buffer_available_for>
 800ec44:	b9f8      	cbnz	r0, 800ec86 <ucdr_deserialize_array_double+0x92>
 800ec46:	46b8      	mov	r8, r7
 800ec48:	e00a      	b.n	800ec60 <ucdr_deserialize_array_double+0x6c>
 800ec4a:	68a1      	ldr	r1, [r4, #8]
 800ec4c:	f00c fc2b 	bl	801b4a6 <memcpy>
 800ec50:	68a2      	ldr	r2, [r4, #8]
 800ec52:	6923      	ldr	r3, [r4, #16]
 800ec54:	442a      	add	r2, r5
 800ec56:	442b      	add	r3, r5
 800ec58:	eba8 0805 	sub.w	r8, r8, r5
 800ec5c:	60a2      	str	r2, [r4, #8]
 800ec5e:	6123      	str	r3, [r4, #16]
 800ec60:	2208      	movs	r2, #8
 800ec62:	4641      	mov	r1, r8
 800ec64:	4620      	mov	r0, r4
 800ec66:	f001 fc8f 	bl	8010588 <ucdr_check_final_buffer_behavior_array>
 800ec6a:	4605      	mov	r5, r0
 800ec6c:	eba7 0008 	sub.w	r0, r7, r8
 800ec70:	4430      	add	r0, r6
 800ec72:	462a      	mov	r2, r5
 800ec74:	2d00      	cmp	r5, #0
 800ec76:	d1e8      	bne.n	800ec4a <ucdr_deserialize_array_double+0x56>
 800ec78:	7da0      	ldrb	r0, [r4, #22]
 800ec7a:	2308      	movs	r3, #8
 800ec7c:	7563      	strb	r3, [r4, #21]
 800ec7e:	f080 0001 	eor.w	r0, r0, #1
 800ec82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec86:	463a      	mov	r2, r7
 800ec88:	68a1      	ldr	r1, [r4, #8]
 800ec8a:	4630      	mov	r0, r6
 800ec8c:	f00c fc0b 	bl	801b4a6 <memcpy>
 800ec90:	68a2      	ldr	r2, [r4, #8]
 800ec92:	6923      	ldr	r3, [r4, #16]
 800ec94:	443a      	add	r2, r7
 800ec96:	441f      	add	r7, r3
 800ec98:	60a2      	str	r2, [r4, #8]
 800ec9a:	6127      	str	r7, [r4, #16]
 800ec9c:	e7ec      	b.n	800ec78 <ucdr_deserialize_array_double+0x84>
 800ec9e:	bf00      	nop

0800eca0 <ucdr_serialize_bool>:
 800eca0:	b538      	push	{r3, r4, r5, lr}
 800eca2:	460d      	mov	r5, r1
 800eca4:	2101      	movs	r1, #1
 800eca6:	4604      	mov	r4, r0
 800eca8:	f001 fbf2 	bl	8010490 <ucdr_check_final_buffer_behavior>
 800ecac:	b148      	cbz	r0, 800ecc2 <ucdr_serialize_bool+0x22>
 800ecae:	68a3      	ldr	r3, [r4, #8]
 800ecb0:	701d      	strb	r5, [r3, #0]
 800ecb2:	68a2      	ldr	r2, [r4, #8]
 800ecb4:	6923      	ldr	r3, [r4, #16]
 800ecb6:	2101      	movs	r1, #1
 800ecb8:	440a      	add	r2, r1
 800ecba:	440b      	add	r3, r1
 800ecbc:	60a2      	str	r2, [r4, #8]
 800ecbe:	6123      	str	r3, [r4, #16]
 800ecc0:	7561      	strb	r1, [r4, #21]
 800ecc2:	7da0      	ldrb	r0, [r4, #22]
 800ecc4:	f080 0001 	eor.w	r0, r0, #1
 800ecc8:	bd38      	pop	{r3, r4, r5, pc}
 800ecca:	bf00      	nop

0800eccc <ucdr_deserialize_bool>:
 800eccc:	b538      	push	{r3, r4, r5, lr}
 800ecce:	460d      	mov	r5, r1
 800ecd0:	2101      	movs	r1, #1
 800ecd2:	4604      	mov	r4, r0
 800ecd4:	f001 fbdc 	bl	8010490 <ucdr_check_final_buffer_behavior>
 800ecd8:	b160      	cbz	r0, 800ecf4 <ucdr_deserialize_bool+0x28>
 800ecda:	68a2      	ldr	r2, [r4, #8]
 800ecdc:	6923      	ldr	r3, [r4, #16]
 800ecde:	f812 1b01 	ldrb.w	r1, [r2], #1
 800ece2:	3900      	subs	r1, #0
 800ece4:	bf18      	it	ne
 800ece6:	2101      	movne	r1, #1
 800ece8:	7029      	strb	r1, [r5, #0]
 800ecea:	3301      	adds	r3, #1
 800ecec:	2101      	movs	r1, #1
 800ecee:	60a2      	str	r2, [r4, #8]
 800ecf0:	6123      	str	r3, [r4, #16]
 800ecf2:	7561      	strb	r1, [r4, #21]
 800ecf4:	7da0      	ldrb	r0, [r4, #22]
 800ecf6:	f080 0001 	eor.w	r0, r0, #1
 800ecfa:	bd38      	pop	{r3, r4, r5, pc}

0800ecfc <ucdr_serialize_uint8_t>:
 800ecfc:	b538      	push	{r3, r4, r5, lr}
 800ecfe:	460d      	mov	r5, r1
 800ed00:	2101      	movs	r1, #1
 800ed02:	4604      	mov	r4, r0
 800ed04:	f001 fbc4 	bl	8010490 <ucdr_check_final_buffer_behavior>
 800ed08:	b148      	cbz	r0, 800ed1e <ucdr_serialize_uint8_t+0x22>
 800ed0a:	68a3      	ldr	r3, [r4, #8]
 800ed0c:	701d      	strb	r5, [r3, #0]
 800ed0e:	68a2      	ldr	r2, [r4, #8]
 800ed10:	6923      	ldr	r3, [r4, #16]
 800ed12:	2101      	movs	r1, #1
 800ed14:	440a      	add	r2, r1
 800ed16:	440b      	add	r3, r1
 800ed18:	60a2      	str	r2, [r4, #8]
 800ed1a:	6123      	str	r3, [r4, #16]
 800ed1c:	7561      	strb	r1, [r4, #21]
 800ed1e:	7da0      	ldrb	r0, [r4, #22]
 800ed20:	f080 0001 	eor.w	r0, r0, #1
 800ed24:	bd38      	pop	{r3, r4, r5, pc}
 800ed26:	bf00      	nop

0800ed28 <ucdr_deserialize_uint8_t>:
 800ed28:	b538      	push	{r3, r4, r5, lr}
 800ed2a:	460d      	mov	r5, r1
 800ed2c:	2101      	movs	r1, #1
 800ed2e:	4604      	mov	r4, r0
 800ed30:	f001 fbae 	bl	8010490 <ucdr_check_final_buffer_behavior>
 800ed34:	b150      	cbz	r0, 800ed4c <ucdr_deserialize_uint8_t+0x24>
 800ed36:	68a3      	ldr	r3, [r4, #8]
 800ed38:	781b      	ldrb	r3, [r3, #0]
 800ed3a:	702b      	strb	r3, [r5, #0]
 800ed3c:	68a2      	ldr	r2, [r4, #8]
 800ed3e:	6923      	ldr	r3, [r4, #16]
 800ed40:	2101      	movs	r1, #1
 800ed42:	440a      	add	r2, r1
 800ed44:	440b      	add	r3, r1
 800ed46:	60a2      	str	r2, [r4, #8]
 800ed48:	6123      	str	r3, [r4, #16]
 800ed4a:	7561      	strb	r1, [r4, #21]
 800ed4c:	7da0      	ldrb	r0, [r4, #22]
 800ed4e:	f080 0001 	eor.w	r0, r0, #1
 800ed52:	bd38      	pop	{r3, r4, r5, pc}

0800ed54 <ucdr_serialize_uint16_t>:
 800ed54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed58:	b082      	sub	sp, #8
 800ed5a:	460b      	mov	r3, r1
 800ed5c:	2102      	movs	r1, #2
 800ed5e:	4604      	mov	r4, r0
 800ed60:	f8ad 3006 	strh.w	r3, [sp, #6]
 800ed64:	f001 fbe8 	bl	8010538 <ucdr_buffer_alignment>
 800ed68:	4601      	mov	r1, r0
 800ed6a:	4620      	mov	r0, r4
 800ed6c:	7d67      	ldrb	r7, [r4, #21]
 800ed6e:	f001 fc27 	bl	80105c0 <ucdr_advance_buffer>
 800ed72:	2102      	movs	r1, #2
 800ed74:	4620      	mov	r0, r4
 800ed76:	f001 fb7f 	bl	8010478 <ucdr_check_buffer_available_for>
 800ed7a:	bb78      	cbnz	r0, 800eddc <ucdr_serialize_uint16_t+0x88>
 800ed7c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800ed80:	42ab      	cmp	r3, r5
 800ed82:	d926      	bls.n	800edd2 <ucdr_serialize_uint16_t+0x7e>
 800ed84:	1b5e      	subs	r6, r3, r5
 800ed86:	60a3      	str	r3, [r4, #8]
 800ed88:	6923      	ldr	r3, [r4, #16]
 800ed8a:	f1c6 0802 	rsb	r8, r6, #2
 800ed8e:	4433      	add	r3, r6
 800ed90:	6123      	str	r3, [r4, #16]
 800ed92:	4641      	mov	r1, r8
 800ed94:	4620      	mov	r0, r4
 800ed96:	f001 fb7b 	bl	8010490 <ucdr_check_final_buffer_behavior>
 800ed9a:	2800      	cmp	r0, #0
 800ed9c:	d03b      	beq.n	800ee16 <ucdr_serialize_uint16_t+0xc2>
 800ed9e:	7d23      	ldrb	r3, [r4, #20]
 800eda0:	2b01      	cmp	r3, #1
 800eda2:	d04a      	beq.n	800ee3a <ucdr_serialize_uint16_t+0xe6>
 800eda4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800eda8:	702b      	strb	r3, [r5, #0]
 800edaa:	2e00      	cmp	r6, #0
 800edac:	d040      	beq.n	800ee30 <ucdr_serialize_uint16_t+0xdc>
 800edae:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800edb2:	706b      	strb	r3, [r5, #1]
 800edb4:	6923      	ldr	r3, [r4, #16]
 800edb6:	68a2      	ldr	r2, [r4, #8]
 800edb8:	7da0      	ldrb	r0, [r4, #22]
 800edba:	3302      	adds	r3, #2
 800edbc:	1b9e      	subs	r6, r3, r6
 800edbe:	4442      	add	r2, r8
 800edc0:	2302      	movs	r3, #2
 800edc2:	f080 0001 	eor.w	r0, r0, #1
 800edc6:	60a2      	str	r2, [r4, #8]
 800edc8:	6126      	str	r6, [r4, #16]
 800edca:	7563      	strb	r3, [r4, #21]
 800edcc:	b002      	add	sp, #8
 800edce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800edd2:	2102      	movs	r1, #2
 800edd4:	4620      	mov	r0, r4
 800edd6:	f001 fb5b 	bl	8010490 <ucdr_check_final_buffer_behavior>
 800edda:	b190      	cbz	r0, 800ee02 <ucdr_serialize_uint16_t+0xae>
 800eddc:	7d23      	ldrb	r3, [r4, #20]
 800edde:	2b01      	cmp	r3, #1
 800ede0:	68a3      	ldr	r3, [r4, #8]
 800ede2:	d014      	beq.n	800ee0e <ucdr_serialize_uint16_t+0xba>
 800ede4:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800ede8:	701a      	strb	r2, [r3, #0]
 800edea:	68a3      	ldr	r3, [r4, #8]
 800edec:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800edf0:	705a      	strb	r2, [r3, #1]
 800edf2:	68a2      	ldr	r2, [r4, #8]
 800edf4:	6923      	ldr	r3, [r4, #16]
 800edf6:	3202      	adds	r2, #2
 800edf8:	3302      	adds	r3, #2
 800edfa:	2102      	movs	r1, #2
 800edfc:	60a2      	str	r2, [r4, #8]
 800edfe:	6123      	str	r3, [r4, #16]
 800ee00:	7561      	strb	r1, [r4, #21]
 800ee02:	7da0      	ldrb	r0, [r4, #22]
 800ee04:	f080 0001 	eor.w	r0, r0, #1
 800ee08:	b002      	add	sp, #8
 800ee0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee0e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800ee12:	801a      	strh	r2, [r3, #0]
 800ee14:	e7ed      	b.n	800edf2 <ucdr_serialize_uint16_t+0x9e>
 800ee16:	68a2      	ldr	r2, [r4, #8]
 800ee18:	6923      	ldr	r3, [r4, #16]
 800ee1a:	7da0      	ldrb	r0, [r4, #22]
 800ee1c:	7567      	strb	r7, [r4, #21]
 800ee1e:	1b92      	subs	r2, r2, r6
 800ee20:	1b9b      	subs	r3, r3, r6
 800ee22:	f080 0001 	eor.w	r0, r0, #1
 800ee26:	60a2      	str	r2, [r4, #8]
 800ee28:	6123      	str	r3, [r4, #16]
 800ee2a:	b002      	add	sp, #8
 800ee2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee30:	68a3      	ldr	r3, [r4, #8]
 800ee32:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ee36:	701a      	strb	r2, [r3, #0]
 800ee38:	e7bc      	b.n	800edb4 <ucdr_serialize_uint16_t+0x60>
 800ee3a:	4628      	mov	r0, r5
 800ee3c:	f10d 0506 	add.w	r5, sp, #6
 800ee40:	4629      	mov	r1, r5
 800ee42:	4632      	mov	r2, r6
 800ee44:	f00c fb2f 	bl	801b4a6 <memcpy>
 800ee48:	68a0      	ldr	r0, [r4, #8]
 800ee4a:	4642      	mov	r2, r8
 800ee4c:	19a9      	adds	r1, r5, r6
 800ee4e:	f00c fb2a 	bl	801b4a6 <memcpy>
 800ee52:	e7af      	b.n	800edb4 <ucdr_serialize_uint16_t+0x60>

0800ee54 <ucdr_serialize_endian_uint16_t>:
 800ee54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ee58:	b083      	sub	sp, #12
 800ee5a:	460d      	mov	r5, r1
 800ee5c:	2102      	movs	r1, #2
 800ee5e:	4604      	mov	r4, r0
 800ee60:	f8ad 2006 	strh.w	r2, [sp, #6]
 800ee64:	f001 fb68 	bl	8010538 <ucdr_buffer_alignment>
 800ee68:	4601      	mov	r1, r0
 800ee6a:	4620      	mov	r0, r4
 800ee6c:	f894 8015 	ldrb.w	r8, [r4, #21]
 800ee70:	f001 fba6 	bl	80105c0 <ucdr_advance_buffer>
 800ee74:	2102      	movs	r1, #2
 800ee76:	4620      	mov	r0, r4
 800ee78:	f001 fafe 	bl	8010478 <ucdr_check_buffer_available_for>
 800ee7c:	bb70      	cbnz	r0, 800eedc <ucdr_serialize_endian_uint16_t+0x88>
 800ee7e:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800ee82:	42be      	cmp	r6, r7
 800ee84:	d925      	bls.n	800eed2 <ucdr_serialize_endian_uint16_t+0x7e>
 800ee86:	6923      	ldr	r3, [r4, #16]
 800ee88:	60a6      	str	r6, [r4, #8]
 800ee8a:	1bf6      	subs	r6, r6, r7
 800ee8c:	4433      	add	r3, r6
 800ee8e:	f1c6 0902 	rsb	r9, r6, #2
 800ee92:	6123      	str	r3, [r4, #16]
 800ee94:	4649      	mov	r1, r9
 800ee96:	4620      	mov	r0, r4
 800ee98:	f001 fafa 	bl	8010490 <ucdr_check_final_buffer_behavior>
 800ee9c:	2800      	cmp	r0, #0
 800ee9e:	d039      	beq.n	800ef14 <ucdr_serialize_endian_uint16_t+0xc0>
 800eea0:	2d01      	cmp	r5, #1
 800eea2:	d04a      	beq.n	800ef3a <ucdr_serialize_endian_uint16_t+0xe6>
 800eea4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800eea8:	703b      	strb	r3, [r7, #0]
 800eeaa:	2e00      	cmp	r6, #0
 800eeac:	d040      	beq.n	800ef30 <ucdr_serialize_endian_uint16_t+0xdc>
 800eeae:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800eeb2:	707b      	strb	r3, [r7, #1]
 800eeb4:	6923      	ldr	r3, [r4, #16]
 800eeb6:	68a2      	ldr	r2, [r4, #8]
 800eeb8:	7da0      	ldrb	r0, [r4, #22]
 800eeba:	3302      	adds	r3, #2
 800eebc:	444a      	add	r2, r9
 800eebe:	1b9b      	subs	r3, r3, r6
 800eec0:	2102      	movs	r1, #2
 800eec2:	f080 0001 	eor.w	r0, r0, #1
 800eec6:	60a2      	str	r2, [r4, #8]
 800eec8:	6123      	str	r3, [r4, #16]
 800eeca:	7561      	strb	r1, [r4, #21]
 800eecc:	b003      	add	sp, #12
 800eece:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eed2:	2102      	movs	r1, #2
 800eed4:	4620      	mov	r0, r4
 800eed6:	f001 fadb 	bl	8010490 <ucdr_check_final_buffer_behavior>
 800eeda:	b188      	cbz	r0, 800ef00 <ucdr_serialize_endian_uint16_t+0xac>
 800eedc:	2d01      	cmp	r5, #1
 800eede:	68a3      	ldr	r3, [r4, #8]
 800eee0:	d014      	beq.n	800ef0c <ucdr_serialize_endian_uint16_t+0xb8>
 800eee2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800eee6:	701a      	strb	r2, [r3, #0]
 800eee8:	68a3      	ldr	r3, [r4, #8]
 800eeea:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800eeee:	705a      	strb	r2, [r3, #1]
 800eef0:	68a2      	ldr	r2, [r4, #8]
 800eef2:	6923      	ldr	r3, [r4, #16]
 800eef4:	3202      	adds	r2, #2
 800eef6:	3302      	adds	r3, #2
 800eef8:	2102      	movs	r1, #2
 800eefa:	60a2      	str	r2, [r4, #8]
 800eefc:	6123      	str	r3, [r4, #16]
 800eefe:	7561      	strb	r1, [r4, #21]
 800ef00:	7da0      	ldrb	r0, [r4, #22]
 800ef02:	f080 0001 	eor.w	r0, r0, #1
 800ef06:	b003      	add	sp, #12
 800ef08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ef0c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800ef10:	801a      	strh	r2, [r3, #0]
 800ef12:	e7ed      	b.n	800eef0 <ucdr_serialize_endian_uint16_t+0x9c>
 800ef14:	68a2      	ldr	r2, [r4, #8]
 800ef16:	6923      	ldr	r3, [r4, #16]
 800ef18:	7da0      	ldrb	r0, [r4, #22]
 800ef1a:	f884 8015 	strb.w	r8, [r4, #21]
 800ef1e:	1b92      	subs	r2, r2, r6
 800ef20:	1b9b      	subs	r3, r3, r6
 800ef22:	f080 0001 	eor.w	r0, r0, #1
 800ef26:	60a2      	str	r2, [r4, #8]
 800ef28:	6123      	str	r3, [r4, #16]
 800ef2a:	b003      	add	sp, #12
 800ef2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ef30:	68a3      	ldr	r3, [r4, #8]
 800ef32:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ef36:	701a      	strb	r2, [r3, #0]
 800ef38:	e7bc      	b.n	800eeb4 <ucdr_serialize_endian_uint16_t+0x60>
 800ef3a:	f10d 0506 	add.w	r5, sp, #6
 800ef3e:	4629      	mov	r1, r5
 800ef40:	4632      	mov	r2, r6
 800ef42:	4638      	mov	r0, r7
 800ef44:	f00c faaf 	bl	801b4a6 <memcpy>
 800ef48:	68a0      	ldr	r0, [r4, #8]
 800ef4a:	464a      	mov	r2, r9
 800ef4c:	19a9      	adds	r1, r5, r6
 800ef4e:	f00c faaa 	bl	801b4a6 <memcpy>
 800ef52:	e7af      	b.n	800eeb4 <ucdr_serialize_endian_uint16_t+0x60>

0800ef54 <ucdr_deserialize_uint16_t>:
 800ef54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ef58:	460d      	mov	r5, r1
 800ef5a:	2102      	movs	r1, #2
 800ef5c:	4604      	mov	r4, r0
 800ef5e:	f001 faeb 	bl	8010538 <ucdr_buffer_alignment>
 800ef62:	4601      	mov	r1, r0
 800ef64:	4620      	mov	r0, r4
 800ef66:	f894 8015 	ldrb.w	r8, [r4, #21]
 800ef6a:	f001 fb29 	bl	80105c0 <ucdr_advance_buffer>
 800ef6e:	2102      	movs	r1, #2
 800ef70:	4620      	mov	r0, r4
 800ef72:	f001 fa81 	bl	8010478 <ucdr_check_buffer_available_for>
 800ef76:	bb60      	cbnz	r0, 800efd2 <ucdr_deserialize_uint16_t+0x7e>
 800ef78:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800ef7c:	42be      	cmp	r6, r7
 800ef7e:	d923      	bls.n	800efc8 <ucdr_deserialize_uint16_t+0x74>
 800ef80:	6923      	ldr	r3, [r4, #16]
 800ef82:	60a6      	str	r6, [r4, #8]
 800ef84:	1bf6      	subs	r6, r6, r7
 800ef86:	4433      	add	r3, r6
 800ef88:	f1c6 0902 	rsb	r9, r6, #2
 800ef8c:	6123      	str	r3, [r4, #16]
 800ef8e:	4649      	mov	r1, r9
 800ef90:	4620      	mov	r0, r4
 800ef92:	f001 fa7d 	bl	8010490 <ucdr_check_final_buffer_behavior>
 800ef96:	2800      	cmp	r0, #0
 800ef98:	d034      	beq.n	800f004 <ucdr_deserialize_uint16_t+0xb0>
 800ef9a:	7d23      	ldrb	r3, [r4, #20]
 800ef9c:	2b01      	cmp	r3, #1
 800ef9e:	d042      	beq.n	800f026 <ucdr_deserialize_uint16_t+0xd2>
 800efa0:	787b      	ldrb	r3, [r7, #1]
 800efa2:	702b      	strb	r3, [r5, #0]
 800efa4:	2e00      	cmp	r6, #0
 800efa6:	d03a      	beq.n	800f01e <ucdr_deserialize_uint16_t+0xca>
 800efa8:	783b      	ldrb	r3, [r7, #0]
 800efaa:	706b      	strb	r3, [r5, #1]
 800efac:	6923      	ldr	r3, [r4, #16]
 800efae:	68a2      	ldr	r2, [r4, #8]
 800efb0:	7da0      	ldrb	r0, [r4, #22]
 800efb2:	2102      	movs	r1, #2
 800efb4:	3302      	adds	r3, #2
 800efb6:	444a      	add	r2, r9
 800efb8:	1b9b      	subs	r3, r3, r6
 800efba:	7561      	strb	r1, [r4, #21]
 800efbc:	60a2      	str	r2, [r4, #8]
 800efbe:	6123      	str	r3, [r4, #16]
 800efc0:	f080 0001 	eor.w	r0, r0, #1
 800efc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800efc8:	2102      	movs	r1, #2
 800efca:	4620      	mov	r0, r4
 800efcc:	f001 fa60 	bl	8010490 <ucdr_check_final_buffer_behavior>
 800efd0:	b180      	cbz	r0, 800eff4 <ucdr_deserialize_uint16_t+0xa0>
 800efd2:	7d23      	ldrb	r3, [r4, #20]
 800efd4:	2b01      	cmp	r3, #1
 800efd6:	68a3      	ldr	r3, [r4, #8]
 800efd8:	d011      	beq.n	800effe <ucdr_deserialize_uint16_t+0xaa>
 800efda:	785b      	ldrb	r3, [r3, #1]
 800efdc:	702b      	strb	r3, [r5, #0]
 800efde:	68a3      	ldr	r3, [r4, #8]
 800efe0:	781b      	ldrb	r3, [r3, #0]
 800efe2:	706b      	strb	r3, [r5, #1]
 800efe4:	68a2      	ldr	r2, [r4, #8]
 800efe6:	6923      	ldr	r3, [r4, #16]
 800efe8:	3202      	adds	r2, #2
 800efea:	3302      	adds	r3, #2
 800efec:	2102      	movs	r1, #2
 800efee:	60a2      	str	r2, [r4, #8]
 800eff0:	6123      	str	r3, [r4, #16]
 800eff2:	7561      	strb	r1, [r4, #21]
 800eff4:	7da0      	ldrb	r0, [r4, #22]
 800eff6:	f080 0001 	eor.w	r0, r0, #1
 800effa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800effe:	881b      	ldrh	r3, [r3, #0]
 800f000:	802b      	strh	r3, [r5, #0]
 800f002:	e7ef      	b.n	800efe4 <ucdr_deserialize_uint16_t+0x90>
 800f004:	68a2      	ldr	r2, [r4, #8]
 800f006:	6923      	ldr	r3, [r4, #16]
 800f008:	7da0      	ldrb	r0, [r4, #22]
 800f00a:	f884 8015 	strb.w	r8, [r4, #21]
 800f00e:	1b92      	subs	r2, r2, r6
 800f010:	1b9b      	subs	r3, r3, r6
 800f012:	60a2      	str	r2, [r4, #8]
 800f014:	6123      	str	r3, [r4, #16]
 800f016:	f080 0001 	eor.w	r0, r0, #1
 800f01a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f01e:	68a3      	ldr	r3, [r4, #8]
 800f020:	781b      	ldrb	r3, [r3, #0]
 800f022:	706b      	strb	r3, [r5, #1]
 800f024:	e7c2      	b.n	800efac <ucdr_deserialize_uint16_t+0x58>
 800f026:	4639      	mov	r1, r7
 800f028:	4632      	mov	r2, r6
 800f02a:	4628      	mov	r0, r5
 800f02c:	f00c fa3b 	bl	801b4a6 <memcpy>
 800f030:	68a1      	ldr	r1, [r4, #8]
 800f032:	464a      	mov	r2, r9
 800f034:	19a8      	adds	r0, r5, r6
 800f036:	f00c fa36 	bl	801b4a6 <memcpy>
 800f03a:	e7b7      	b.n	800efac <ucdr_deserialize_uint16_t+0x58>

0800f03c <ucdr_deserialize_endian_uint16_t>:
 800f03c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f040:	460e      	mov	r6, r1
 800f042:	2102      	movs	r1, #2
 800f044:	4604      	mov	r4, r0
 800f046:	4615      	mov	r5, r2
 800f048:	f001 fa76 	bl	8010538 <ucdr_buffer_alignment>
 800f04c:	4601      	mov	r1, r0
 800f04e:	4620      	mov	r0, r4
 800f050:	f894 9015 	ldrb.w	r9, [r4, #21]
 800f054:	f001 fab4 	bl	80105c0 <ucdr_advance_buffer>
 800f058:	2102      	movs	r1, #2
 800f05a:	4620      	mov	r0, r4
 800f05c:	f001 fa0c 	bl	8010478 <ucdr_check_buffer_available_for>
 800f060:	bb70      	cbnz	r0, 800f0c0 <ucdr_deserialize_endian_uint16_t+0x84>
 800f062:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 800f066:	4547      	cmp	r7, r8
 800f068:	d925      	bls.n	800f0b6 <ucdr_deserialize_endian_uint16_t+0x7a>
 800f06a:	6923      	ldr	r3, [r4, #16]
 800f06c:	60a7      	str	r7, [r4, #8]
 800f06e:	eba7 0708 	sub.w	r7, r7, r8
 800f072:	443b      	add	r3, r7
 800f074:	f1c7 0a02 	rsb	sl, r7, #2
 800f078:	6123      	str	r3, [r4, #16]
 800f07a:	4651      	mov	r1, sl
 800f07c:	4620      	mov	r0, r4
 800f07e:	f001 fa07 	bl	8010490 <ucdr_check_final_buffer_behavior>
 800f082:	2800      	cmp	r0, #0
 800f084:	d034      	beq.n	800f0f0 <ucdr_deserialize_endian_uint16_t+0xb4>
 800f086:	2e01      	cmp	r6, #1
 800f088:	d043      	beq.n	800f112 <ucdr_deserialize_endian_uint16_t+0xd6>
 800f08a:	f898 3001 	ldrb.w	r3, [r8, #1]
 800f08e:	702b      	strb	r3, [r5, #0]
 800f090:	2f00      	cmp	r7, #0
 800f092:	d03a      	beq.n	800f10a <ucdr_deserialize_endian_uint16_t+0xce>
 800f094:	f898 3000 	ldrb.w	r3, [r8]
 800f098:	706b      	strb	r3, [r5, #1]
 800f09a:	6923      	ldr	r3, [r4, #16]
 800f09c:	68a2      	ldr	r2, [r4, #8]
 800f09e:	7da0      	ldrb	r0, [r4, #22]
 800f0a0:	2102      	movs	r1, #2
 800f0a2:	3302      	adds	r3, #2
 800f0a4:	4452      	add	r2, sl
 800f0a6:	1bdb      	subs	r3, r3, r7
 800f0a8:	7561      	strb	r1, [r4, #21]
 800f0aa:	60a2      	str	r2, [r4, #8]
 800f0ac:	6123      	str	r3, [r4, #16]
 800f0ae:	f080 0001 	eor.w	r0, r0, #1
 800f0b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f0b6:	2102      	movs	r1, #2
 800f0b8:	4620      	mov	r0, r4
 800f0ba:	f001 f9e9 	bl	8010490 <ucdr_check_final_buffer_behavior>
 800f0be:	b178      	cbz	r0, 800f0e0 <ucdr_deserialize_endian_uint16_t+0xa4>
 800f0c0:	2e01      	cmp	r6, #1
 800f0c2:	68a3      	ldr	r3, [r4, #8]
 800f0c4:	d011      	beq.n	800f0ea <ucdr_deserialize_endian_uint16_t+0xae>
 800f0c6:	785b      	ldrb	r3, [r3, #1]
 800f0c8:	702b      	strb	r3, [r5, #0]
 800f0ca:	68a3      	ldr	r3, [r4, #8]
 800f0cc:	781b      	ldrb	r3, [r3, #0]
 800f0ce:	706b      	strb	r3, [r5, #1]
 800f0d0:	68a2      	ldr	r2, [r4, #8]
 800f0d2:	6923      	ldr	r3, [r4, #16]
 800f0d4:	3202      	adds	r2, #2
 800f0d6:	3302      	adds	r3, #2
 800f0d8:	2102      	movs	r1, #2
 800f0da:	60a2      	str	r2, [r4, #8]
 800f0dc:	6123      	str	r3, [r4, #16]
 800f0de:	7561      	strb	r1, [r4, #21]
 800f0e0:	7da0      	ldrb	r0, [r4, #22]
 800f0e2:	f080 0001 	eor.w	r0, r0, #1
 800f0e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f0ea:	881b      	ldrh	r3, [r3, #0]
 800f0ec:	802b      	strh	r3, [r5, #0]
 800f0ee:	e7ef      	b.n	800f0d0 <ucdr_deserialize_endian_uint16_t+0x94>
 800f0f0:	68a2      	ldr	r2, [r4, #8]
 800f0f2:	6923      	ldr	r3, [r4, #16]
 800f0f4:	7da0      	ldrb	r0, [r4, #22]
 800f0f6:	f884 9015 	strb.w	r9, [r4, #21]
 800f0fa:	1bd2      	subs	r2, r2, r7
 800f0fc:	1bdb      	subs	r3, r3, r7
 800f0fe:	60a2      	str	r2, [r4, #8]
 800f100:	6123      	str	r3, [r4, #16]
 800f102:	f080 0001 	eor.w	r0, r0, #1
 800f106:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f10a:	68a3      	ldr	r3, [r4, #8]
 800f10c:	781b      	ldrb	r3, [r3, #0]
 800f10e:	706b      	strb	r3, [r5, #1]
 800f110:	e7c3      	b.n	800f09a <ucdr_deserialize_endian_uint16_t+0x5e>
 800f112:	4641      	mov	r1, r8
 800f114:	463a      	mov	r2, r7
 800f116:	4628      	mov	r0, r5
 800f118:	f00c f9c5 	bl	801b4a6 <memcpy>
 800f11c:	68a1      	ldr	r1, [r4, #8]
 800f11e:	4652      	mov	r2, sl
 800f120:	19e8      	adds	r0, r5, r7
 800f122:	f00c f9c0 	bl	801b4a6 <memcpy>
 800f126:	e7b8      	b.n	800f09a <ucdr_deserialize_endian_uint16_t+0x5e>

0800f128 <ucdr_serialize_uint32_t>:
 800f128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f12c:	b082      	sub	sp, #8
 800f12e:	4604      	mov	r4, r0
 800f130:	9101      	str	r1, [sp, #4]
 800f132:	2104      	movs	r1, #4
 800f134:	f001 fa00 	bl	8010538 <ucdr_buffer_alignment>
 800f138:	4601      	mov	r1, r0
 800f13a:	4620      	mov	r0, r4
 800f13c:	7d67      	ldrb	r7, [r4, #21]
 800f13e:	f001 fa3f 	bl	80105c0 <ucdr_advance_buffer>
 800f142:	2104      	movs	r1, #4
 800f144:	4620      	mov	r0, r4
 800f146:	f001 f997 	bl	8010478 <ucdr_check_buffer_available_for>
 800f14a:	2800      	cmp	r0, #0
 800f14c:	d139      	bne.n	800f1c2 <ucdr_serialize_uint32_t+0x9a>
 800f14e:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800f152:	42ab      	cmp	r3, r5
 800f154:	d930      	bls.n	800f1b8 <ucdr_serialize_uint32_t+0x90>
 800f156:	1b5e      	subs	r6, r3, r5
 800f158:	60a3      	str	r3, [r4, #8]
 800f15a:	6923      	ldr	r3, [r4, #16]
 800f15c:	f1c6 0804 	rsb	r8, r6, #4
 800f160:	4433      	add	r3, r6
 800f162:	6123      	str	r3, [r4, #16]
 800f164:	4641      	mov	r1, r8
 800f166:	4620      	mov	r0, r4
 800f168:	f001 f992 	bl	8010490 <ucdr_check_final_buffer_behavior>
 800f16c:	2800      	cmp	r0, #0
 800f16e:	d04c      	beq.n	800f20a <ucdr_serialize_uint32_t+0xe2>
 800f170:	7d23      	ldrb	r3, [r4, #20]
 800f172:	2b01      	cmp	r3, #1
 800f174:	d063      	beq.n	800f23e <ucdr_serialize_uint32_t+0x116>
 800f176:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f17a:	702b      	strb	r3, [r5, #0]
 800f17c:	2e00      	cmp	r6, #0
 800f17e:	d051      	beq.n	800f224 <ucdr_serialize_uint32_t+0xfc>
 800f180:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f184:	706b      	strb	r3, [r5, #1]
 800f186:	2e01      	cmp	r6, #1
 800f188:	d050      	beq.n	800f22c <ucdr_serialize_uint32_t+0x104>
 800f18a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800f18e:	70ab      	strb	r3, [r5, #2]
 800f190:	2e02      	cmp	r6, #2
 800f192:	d04f      	beq.n	800f234 <ucdr_serialize_uint32_t+0x10c>
 800f194:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f198:	70eb      	strb	r3, [r5, #3]
 800f19a:	6923      	ldr	r3, [r4, #16]
 800f19c:	68a2      	ldr	r2, [r4, #8]
 800f19e:	7da0      	ldrb	r0, [r4, #22]
 800f1a0:	3304      	adds	r3, #4
 800f1a2:	1b9e      	subs	r6, r3, r6
 800f1a4:	4442      	add	r2, r8
 800f1a6:	2304      	movs	r3, #4
 800f1a8:	f080 0001 	eor.w	r0, r0, #1
 800f1ac:	60a2      	str	r2, [r4, #8]
 800f1ae:	6126      	str	r6, [r4, #16]
 800f1b0:	7563      	strb	r3, [r4, #21]
 800f1b2:	b002      	add	sp, #8
 800f1b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f1b8:	2104      	movs	r1, #4
 800f1ba:	4620      	mov	r0, r4
 800f1bc:	f001 f968 	bl	8010490 <ucdr_check_final_buffer_behavior>
 800f1c0:	b1d0      	cbz	r0, 800f1f8 <ucdr_serialize_uint32_t+0xd0>
 800f1c2:	7d23      	ldrb	r3, [r4, #20]
 800f1c4:	2b01      	cmp	r3, #1
 800f1c6:	68a3      	ldr	r3, [r4, #8]
 800f1c8:	d01c      	beq.n	800f204 <ucdr_serialize_uint32_t+0xdc>
 800f1ca:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800f1ce:	701a      	strb	r2, [r3, #0]
 800f1d0:	68a3      	ldr	r3, [r4, #8]
 800f1d2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f1d6:	705a      	strb	r2, [r3, #1]
 800f1d8:	68a3      	ldr	r3, [r4, #8]
 800f1da:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f1de:	709a      	strb	r2, [r3, #2]
 800f1e0:	68a3      	ldr	r3, [r4, #8]
 800f1e2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f1e6:	70da      	strb	r2, [r3, #3]
 800f1e8:	68a2      	ldr	r2, [r4, #8]
 800f1ea:	6923      	ldr	r3, [r4, #16]
 800f1ec:	3204      	adds	r2, #4
 800f1ee:	3304      	adds	r3, #4
 800f1f0:	2104      	movs	r1, #4
 800f1f2:	60a2      	str	r2, [r4, #8]
 800f1f4:	6123      	str	r3, [r4, #16]
 800f1f6:	7561      	strb	r1, [r4, #21]
 800f1f8:	7da0      	ldrb	r0, [r4, #22]
 800f1fa:	f080 0001 	eor.w	r0, r0, #1
 800f1fe:	b002      	add	sp, #8
 800f200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f204:	9a01      	ldr	r2, [sp, #4]
 800f206:	601a      	str	r2, [r3, #0]
 800f208:	e7ee      	b.n	800f1e8 <ucdr_serialize_uint32_t+0xc0>
 800f20a:	68a2      	ldr	r2, [r4, #8]
 800f20c:	6923      	ldr	r3, [r4, #16]
 800f20e:	7da0      	ldrb	r0, [r4, #22]
 800f210:	7567      	strb	r7, [r4, #21]
 800f212:	1b92      	subs	r2, r2, r6
 800f214:	1b9b      	subs	r3, r3, r6
 800f216:	f080 0001 	eor.w	r0, r0, #1
 800f21a:	60a2      	str	r2, [r4, #8]
 800f21c:	6123      	str	r3, [r4, #16]
 800f21e:	b002      	add	sp, #8
 800f220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f224:	68a3      	ldr	r3, [r4, #8]
 800f226:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f22a:	701a      	strb	r2, [r3, #0]
 800f22c:	68a3      	ldr	r3, [r4, #8]
 800f22e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f232:	701a      	strb	r2, [r3, #0]
 800f234:	68a3      	ldr	r3, [r4, #8]
 800f236:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f23a:	701a      	strb	r2, [r3, #0]
 800f23c:	e7ad      	b.n	800f19a <ucdr_serialize_uint32_t+0x72>
 800f23e:	4628      	mov	r0, r5
 800f240:	ad01      	add	r5, sp, #4
 800f242:	4629      	mov	r1, r5
 800f244:	4632      	mov	r2, r6
 800f246:	f00c f92e 	bl	801b4a6 <memcpy>
 800f24a:	68a0      	ldr	r0, [r4, #8]
 800f24c:	4642      	mov	r2, r8
 800f24e:	19a9      	adds	r1, r5, r6
 800f250:	f00c f929 	bl	801b4a6 <memcpy>
 800f254:	e7a1      	b.n	800f19a <ucdr_serialize_uint32_t+0x72>
 800f256:	bf00      	nop

0800f258 <ucdr_serialize_endian_uint32_t>:
 800f258:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f25c:	b083      	sub	sp, #12
 800f25e:	460d      	mov	r5, r1
 800f260:	2104      	movs	r1, #4
 800f262:	4604      	mov	r4, r0
 800f264:	9201      	str	r2, [sp, #4]
 800f266:	f001 f967 	bl	8010538 <ucdr_buffer_alignment>
 800f26a:	4601      	mov	r1, r0
 800f26c:	4620      	mov	r0, r4
 800f26e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f272:	f001 f9a5 	bl	80105c0 <ucdr_advance_buffer>
 800f276:	2104      	movs	r1, #4
 800f278:	4620      	mov	r0, r4
 800f27a:	f001 f8fd 	bl	8010478 <ucdr_check_buffer_available_for>
 800f27e:	2800      	cmp	r0, #0
 800f280:	d138      	bne.n	800f2f4 <ucdr_serialize_endian_uint32_t+0x9c>
 800f282:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800f286:	42b7      	cmp	r7, r6
 800f288:	d92f      	bls.n	800f2ea <ucdr_serialize_endian_uint32_t+0x92>
 800f28a:	6923      	ldr	r3, [r4, #16]
 800f28c:	60a7      	str	r7, [r4, #8]
 800f28e:	1bbf      	subs	r7, r7, r6
 800f290:	443b      	add	r3, r7
 800f292:	f1c7 0904 	rsb	r9, r7, #4
 800f296:	6123      	str	r3, [r4, #16]
 800f298:	4649      	mov	r1, r9
 800f29a:	4620      	mov	r0, r4
 800f29c:	f001 f8f8 	bl	8010490 <ucdr_check_final_buffer_behavior>
 800f2a0:	2800      	cmp	r0, #0
 800f2a2:	d04a      	beq.n	800f33a <ucdr_serialize_endian_uint32_t+0xe2>
 800f2a4:	2d01      	cmp	r5, #1
 800f2a6:	d063      	beq.n	800f370 <ucdr_serialize_endian_uint32_t+0x118>
 800f2a8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f2ac:	7033      	strb	r3, [r6, #0]
 800f2ae:	2f00      	cmp	r7, #0
 800f2b0:	d051      	beq.n	800f356 <ucdr_serialize_endian_uint32_t+0xfe>
 800f2b2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f2b6:	7073      	strb	r3, [r6, #1]
 800f2b8:	2f01      	cmp	r7, #1
 800f2ba:	d050      	beq.n	800f35e <ucdr_serialize_endian_uint32_t+0x106>
 800f2bc:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800f2c0:	70b3      	strb	r3, [r6, #2]
 800f2c2:	2f02      	cmp	r7, #2
 800f2c4:	d04f      	beq.n	800f366 <ucdr_serialize_endian_uint32_t+0x10e>
 800f2c6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f2ca:	70f3      	strb	r3, [r6, #3]
 800f2cc:	6923      	ldr	r3, [r4, #16]
 800f2ce:	68a2      	ldr	r2, [r4, #8]
 800f2d0:	7da0      	ldrb	r0, [r4, #22]
 800f2d2:	3304      	adds	r3, #4
 800f2d4:	444a      	add	r2, r9
 800f2d6:	1bdb      	subs	r3, r3, r7
 800f2d8:	2104      	movs	r1, #4
 800f2da:	f080 0001 	eor.w	r0, r0, #1
 800f2de:	60a2      	str	r2, [r4, #8]
 800f2e0:	6123      	str	r3, [r4, #16]
 800f2e2:	7561      	strb	r1, [r4, #21]
 800f2e4:	b003      	add	sp, #12
 800f2e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f2ea:	2104      	movs	r1, #4
 800f2ec:	4620      	mov	r0, r4
 800f2ee:	f001 f8cf 	bl	8010490 <ucdr_check_final_buffer_behavior>
 800f2f2:	b1c8      	cbz	r0, 800f328 <ucdr_serialize_endian_uint32_t+0xd0>
 800f2f4:	2d01      	cmp	r5, #1
 800f2f6:	68a3      	ldr	r3, [r4, #8]
 800f2f8:	d01c      	beq.n	800f334 <ucdr_serialize_endian_uint32_t+0xdc>
 800f2fa:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800f2fe:	701a      	strb	r2, [r3, #0]
 800f300:	68a3      	ldr	r3, [r4, #8]
 800f302:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f306:	705a      	strb	r2, [r3, #1]
 800f308:	68a3      	ldr	r3, [r4, #8]
 800f30a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f30e:	709a      	strb	r2, [r3, #2]
 800f310:	68a3      	ldr	r3, [r4, #8]
 800f312:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f316:	70da      	strb	r2, [r3, #3]
 800f318:	68a2      	ldr	r2, [r4, #8]
 800f31a:	6923      	ldr	r3, [r4, #16]
 800f31c:	3204      	adds	r2, #4
 800f31e:	3304      	adds	r3, #4
 800f320:	2104      	movs	r1, #4
 800f322:	60a2      	str	r2, [r4, #8]
 800f324:	6123      	str	r3, [r4, #16]
 800f326:	7561      	strb	r1, [r4, #21]
 800f328:	7da0      	ldrb	r0, [r4, #22]
 800f32a:	f080 0001 	eor.w	r0, r0, #1
 800f32e:	b003      	add	sp, #12
 800f330:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f334:	9a01      	ldr	r2, [sp, #4]
 800f336:	601a      	str	r2, [r3, #0]
 800f338:	e7ee      	b.n	800f318 <ucdr_serialize_endian_uint32_t+0xc0>
 800f33a:	68a2      	ldr	r2, [r4, #8]
 800f33c:	6923      	ldr	r3, [r4, #16]
 800f33e:	7da0      	ldrb	r0, [r4, #22]
 800f340:	f884 8015 	strb.w	r8, [r4, #21]
 800f344:	1bd2      	subs	r2, r2, r7
 800f346:	1bdb      	subs	r3, r3, r7
 800f348:	f080 0001 	eor.w	r0, r0, #1
 800f34c:	60a2      	str	r2, [r4, #8]
 800f34e:	6123      	str	r3, [r4, #16]
 800f350:	b003      	add	sp, #12
 800f352:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f356:	68a3      	ldr	r3, [r4, #8]
 800f358:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f35c:	701a      	strb	r2, [r3, #0]
 800f35e:	68a3      	ldr	r3, [r4, #8]
 800f360:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f364:	701a      	strb	r2, [r3, #0]
 800f366:	68a3      	ldr	r3, [r4, #8]
 800f368:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f36c:	701a      	strb	r2, [r3, #0]
 800f36e:	e7ad      	b.n	800f2cc <ucdr_serialize_endian_uint32_t+0x74>
 800f370:	ad01      	add	r5, sp, #4
 800f372:	4629      	mov	r1, r5
 800f374:	463a      	mov	r2, r7
 800f376:	4630      	mov	r0, r6
 800f378:	f00c f895 	bl	801b4a6 <memcpy>
 800f37c:	68a0      	ldr	r0, [r4, #8]
 800f37e:	464a      	mov	r2, r9
 800f380:	19e9      	adds	r1, r5, r7
 800f382:	f00c f890 	bl	801b4a6 <memcpy>
 800f386:	e7a1      	b.n	800f2cc <ucdr_serialize_endian_uint32_t+0x74>

0800f388 <ucdr_deserialize_uint32_t>:
 800f388:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f38c:	460d      	mov	r5, r1
 800f38e:	2104      	movs	r1, #4
 800f390:	4604      	mov	r4, r0
 800f392:	f001 f8d1 	bl	8010538 <ucdr_buffer_alignment>
 800f396:	4601      	mov	r1, r0
 800f398:	4620      	mov	r0, r4
 800f39a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f39e:	f001 f90f 	bl	80105c0 <ucdr_advance_buffer>
 800f3a2:	2104      	movs	r1, #4
 800f3a4:	4620      	mov	r0, r4
 800f3a6:	f001 f867 	bl	8010478 <ucdr_check_buffer_available_for>
 800f3aa:	2800      	cmp	r0, #0
 800f3ac:	d138      	bne.n	800f420 <ucdr_deserialize_uint32_t+0x98>
 800f3ae:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800f3b2:	42b7      	cmp	r7, r6
 800f3b4:	d92f      	bls.n	800f416 <ucdr_deserialize_uint32_t+0x8e>
 800f3b6:	6923      	ldr	r3, [r4, #16]
 800f3b8:	60a7      	str	r7, [r4, #8]
 800f3ba:	1bbf      	subs	r7, r7, r6
 800f3bc:	443b      	add	r3, r7
 800f3be:	f1c7 0904 	rsb	r9, r7, #4
 800f3c2:	6123      	str	r3, [r4, #16]
 800f3c4:	4649      	mov	r1, r9
 800f3c6:	4620      	mov	r0, r4
 800f3c8:	f001 f862 	bl	8010490 <ucdr_check_final_buffer_behavior>
 800f3cc:	2800      	cmp	r0, #0
 800f3ce:	d046      	beq.n	800f45e <ucdr_deserialize_uint32_t+0xd6>
 800f3d0:	7d23      	ldrb	r3, [r4, #20]
 800f3d2:	2b01      	cmp	r3, #1
 800f3d4:	d05c      	beq.n	800f490 <ucdr_deserialize_uint32_t+0x108>
 800f3d6:	78f3      	ldrb	r3, [r6, #3]
 800f3d8:	702b      	strb	r3, [r5, #0]
 800f3da:	2f00      	cmp	r7, #0
 800f3dc:	d04c      	beq.n	800f478 <ucdr_deserialize_uint32_t+0xf0>
 800f3de:	78b3      	ldrb	r3, [r6, #2]
 800f3e0:	706b      	strb	r3, [r5, #1]
 800f3e2:	2f01      	cmp	r7, #1
 800f3e4:	f105 0302 	add.w	r3, r5, #2
 800f3e8:	d04a      	beq.n	800f480 <ucdr_deserialize_uint32_t+0xf8>
 800f3ea:	7873      	ldrb	r3, [r6, #1]
 800f3ec:	70ab      	strb	r3, [r5, #2]
 800f3ee:	2f02      	cmp	r7, #2
 800f3f0:	f105 0303 	add.w	r3, r5, #3
 800f3f4:	d048      	beq.n	800f488 <ucdr_deserialize_uint32_t+0x100>
 800f3f6:	7833      	ldrb	r3, [r6, #0]
 800f3f8:	70eb      	strb	r3, [r5, #3]
 800f3fa:	6923      	ldr	r3, [r4, #16]
 800f3fc:	68a2      	ldr	r2, [r4, #8]
 800f3fe:	7da0      	ldrb	r0, [r4, #22]
 800f400:	2104      	movs	r1, #4
 800f402:	3304      	adds	r3, #4
 800f404:	444a      	add	r2, r9
 800f406:	1bdb      	subs	r3, r3, r7
 800f408:	7561      	strb	r1, [r4, #21]
 800f40a:	60a2      	str	r2, [r4, #8]
 800f40c:	6123      	str	r3, [r4, #16]
 800f40e:	f080 0001 	eor.w	r0, r0, #1
 800f412:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f416:	2104      	movs	r1, #4
 800f418:	4620      	mov	r0, r4
 800f41a:	f001 f839 	bl	8010490 <ucdr_check_final_buffer_behavior>
 800f41e:	b1b0      	cbz	r0, 800f44e <ucdr_deserialize_uint32_t+0xc6>
 800f420:	7d23      	ldrb	r3, [r4, #20]
 800f422:	2b01      	cmp	r3, #1
 800f424:	68a3      	ldr	r3, [r4, #8]
 800f426:	d017      	beq.n	800f458 <ucdr_deserialize_uint32_t+0xd0>
 800f428:	78db      	ldrb	r3, [r3, #3]
 800f42a:	702b      	strb	r3, [r5, #0]
 800f42c:	68a3      	ldr	r3, [r4, #8]
 800f42e:	789b      	ldrb	r3, [r3, #2]
 800f430:	706b      	strb	r3, [r5, #1]
 800f432:	68a3      	ldr	r3, [r4, #8]
 800f434:	785b      	ldrb	r3, [r3, #1]
 800f436:	70ab      	strb	r3, [r5, #2]
 800f438:	68a3      	ldr	r3, [r4, #8]
 800f43a:	781b      	ldrb	r3, [r3, #0]
 800f43c:	70eb      	strb	r3, [r5, #3]
 800f43e:	68a2      	ldr	r2, [r4, #8]
 800f440:	6923      	ldr	r3, [r4, #16]
 800f442:	3204      	adds	r2, #4
 800f444:	3304      	adds	r3, #4
 800f446:	2104      	movs	r1, #4
 800f448:	60a2      	str	r2, [r4, #8]
 800f44a:	6123      	str	r3, [r4, #16]
 800f44c:	7561      	strb	r1, [r4, #21]
 800f44e:	7da0      	ldrb	r0, [r4, #22]
 800f450:	f080 0001 	eor.w	r0, r0, #1
 800f454:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f458:	681b      	ldr	r3, [r3, #0]
 800f45a:	602b      	str	r3, [r5, #0]
 800f45c:	e7ef      	b.n	800f43e <ucdr_deserialize_uint32_t+0xb6>
 800f45e:	68a2      	ldr	r2, [r4, #8]
 800f460:	6923      	ldr	r3, [r4, #16]
 800f462:	7da0      	ldrb	r0, [r4, #22]
 800f464:	f884 8015 	strb.w	r8, [r4, #21]
 800f468:	1bd2      	subs	r2, r2, r7
 800f46a:	1bdb      	subs	r3, r3, r7
 800f46c:	60a2      	str	r2, [r4, #8]
 800f46e:	6123      	str	r3, [r4, #16]
 800f470:	f080 0001 	eor.w	r0, r0, #1
 800f474:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f478:	68a3      	ldr	r3, [r4, #8]
 800f47a:	789b      	ldrb	r3, [r3, #2]
 800f47c:	706b      	strb	r3, [r5, #1]
 800f47e:	1cab      	adds	r3, r5, #2
 800f480:	68a2      	ldr	r2, [r4, #8]
 800f482:	7852      	ldrb	r2, [r2, #1]
 800f484:	f803 2b01 	strb.w	r2, [r3], #1
 800f488:	68a2      	ldr	r2, [r4, #8]
 800f48a:	7812      	ldrb	r2, [r2, #0]
 800f48c:	701a      	strb	r2, [r3, #0]
 800f48e:	e7b4      	b.n	800f3fa <ucdr_deserialize_uint32_t+0x72>
 800f490:	4631      	mov	r1, r6
 800f492:	463a      	mov	r2, r7
 800f494:	4628      	mov	r0, r5
 800f496:	f00c f806 	bl	801b4a6 <memcpy>
 800f49a:	68a1      	ldr	r1, [r4, #8]
 800f49c:	464a      	mov	r2, r9
 800f49e:	19e8      	adds	r0, r5, r7
 800f4a0:	f00c f801 	bl	801b4a6 <memcpy>
 800f4a4:	e7a9      	b.n	800f3fa <ucdr_deserialize_uint32_t+0x72>
 800f4a6:	bf00      	nop

0800f4a8 <ucdr_deserialize_endian_uint32_t>:
 800f4a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f4ac:	460e      	mov	r6, r1
 800f4ae:	2104      	movs	r1, #4
 800f4b0:	4604      	mov	r4, r0
 800f4b2:	4615      	mov	r5, r2
 800f4b4:	f001 f840 	bl	8010538 <ucdr_buffer_alignment>
 800f4b8:	4601      	mov	r1, r0
 800f4ba:	4620      	mov	r0, r4
 800f4bc:	f894 9015 	ldrb.w	r9, [r4, #21]
 800f4c0:	f001 f87e 	bl	80105c0 <ucdr_advance_buffer>
 800f4c4:	2104      	movs	r1, #4
 800f4c6:	4620      	mov	r0, r4
 800f4c8:	f000 ffd6 	bl	8010478 <ucdr_check_buffer_available_for>
 800f4cc:	2800      	cmp	r0, #0
 800f4ce:	d13c      	bne.n	800f54a <ucdr_deserialize_endian_uint32_t+0xa2>
 800f4d0:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800f4d4:	42bb      	cmp	r3, r7
 800f4d6:	d933      	bls.n	800f540 <ucdr_deserialize_endian_uint32_t+0x98>
 800f4d8:	eba3 0807 	sub.w	r8, r3, r7
 800f4dc:	60a3      	str	r3, [r4, #8]
 800f4de:	6923      	ldr	r3, [r4, #16]
 800f4e0:	f1c8 0a04 	rsb	sl, r8, #4
 800f4e4:	4443      	add	r3, r8
 800f4e6:	6123      	str	r3, [r4, #16]
 800f4e8:	4651      	mov	r1, sl
 800f4ea:	4620      	mov	r0, r4
 800f4ec:	f000 ffd0 	bl	8010490 <ucdr_check_final_buffer_behavior>
 800f4f0:	2800      	cmp	r0, #0
 800f4f2:	d048      	beq.n	800f586 <ucdr_deserialize_endian_uint32_t+0xde>
 800f4f4:	2e01      	cmp	r6, #1
 800f4f6:	d061      	beq.n	800f5bc <ucdr_deserialize_endian_uint32_t+0x114>
 800f4f8:	78fb      	ldrb	r3, [r7, #3]
 800f4fa:	702b      	strb	r3, [r5, #0]
 800f4fc:	f1b8 0f00 	cmp.w	r8, #0
 800f500:	d050      	beq.n	800f5a4 <ucdr_deserialize_endian_uint32_t+0xfc>
 800f502:	78bb      	ldrb	r3, [r7, #2]
 800f504:	706b      	strb	r3, [r5, #1]
 800f506:	f1b8 0f01 	cmp.w	r8, #1
 800f50a:	f105 0302 	add.w	r3, r5, #2
 800f50e:	d04d      	beq.n	800f5ac <ucdr_deserialize_endian_uint32_t+0x104>
 800f510:	787b      	ldrb	r3, [r7, #1]
 800f512:	70ab      	strb	r3, [r5, #2]
 800f514:	f1b8 0f02 	cmp.w	r8, #2
 800f518:	f105 0303 	add.w	r3, r5, #3
 800f51c:	d04a      	beq.n	800f5b4 <ucdr_deserialize_endian_uint32_t+0x10c>
 800f51e:	783b      	ldrb	r3, [r7, #0]
 800f520:	70eb      	strb	r3, [r5, #3]
 800f522:	6923      	ldr	r3, [r4, #16]
 800f524:	68a2      	ldr	r2, [r4, #8]
 800f526:	7da0      	ldrb	r0, [r4, #22]
 800f528:	2104      	movs	r1, #4
 800f52a:	3304      	adds	r3, #4
 800f52c:	4452      	add	r2, sl
 800f52e:	eba3 0308 	sub.w	r3, r3, r8
 800f532:	7561      	strb	r1, [r4, #21]
 800f534:	60a2      	str	r2, [r4, #8]
 800f536:	6123      	str	r3, [r4, #16]
 800f538:	f080 0001 	eor.w	r0, r0, #1
 800f53c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f540:	2104      	movs	r1, #4
 800f542:	4620      	mov	r0, r4
 800f544:	f000 ffa4 	bl	8010490 <ucdr_check_final_buffer_behavior>
 800f548:	b1a8      	cbz	r0, 800f576 <ucdr_deserialize_endian_uint32_t+0xce>
 800f54a:	2e01      	cmp	r6, #1
 800f54c:	68a3      	ldr	r3, [r4, #8]
 800f54e:	d017      	beq.n	800f580 <ucdr_deserialize_endian_uint32_t+0xd8>
 800f550:	78db      	ldrb	r3, [r3, #3]
 800f552:	702b      	strb	r3, [r5, #0]
 800f554:	68a3      	ldr	r3, [r4, #8]
 800f556:	789b      	ldrb	r3, [r3, #2]
 800f558:	706b      	strb	r3, [r5, #1]
 800f55a:	68a3      	ldr	r3, [r4, #8]
 800f55c:	785b      	ldrb	r3, [r3, #1]
 800f55e:	70ab      	strb	r3, [r5, #2]
 800f560:	68a3      	ldr	r3, [r4, #8]
 800f562:	781b      	ldrb	r3, [r3, #0]
 800f564:	70eb      	strb	r3, [r5, #3]
 800f566:	68a2      	ldr	r2, [r4, #8]
 800f568:	6923      	ldr	r3, [r4, #16]
 800f56a:	3204      	adds	r2, #4
 800f56c:	3304      	adds	r3, #4
 800f56e:	2104      	movs	r1, #4
 800f570:	60a2      	str	r2, [r4, #8]
 800f572:	6123      	str	r3, [r4, #16]
 800f574:	7561      	strb	r1, [r4, #21]
 800f576:	7da0      	ldrb	r0, [r4, #22]
 800f578:	f080 0001 	eor.w	r0, r0, #1
 800f57c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f580:	681b      	ldr	r3, [r3, #0]
 800f582:	602b      	str	r3, [r5, #0]
 800f584:	e7ef      	b.n	800f566 <ucdr_deserialize_endian_uint32_t+0xbe>
 800f586:	68a2      	ldr	r2, [r4, #8]
 800f588:	6923      	ldr	r3, [r4, #16]
 800f58a:	7da0      	ldrb	r0, [r4, #22]
 800f58c:	f884 9015 	strb.w	r9, [r4, #21]
 800f590:	eba2 0208 	sub.w	r2, r2, r8
 800f594:	eba3 0308 	sub.w	r3, r3, r8
 800f598:	60a2      	str	r2, [r4, #8]
 800f59a:	6123      	str	r3, [r4, #16]
 800f59c:	f080 0001 	eor.w	r0, r0, #1
 800f5a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f5a4:	68a3      	ldr	r3, [r4, #8]
 800f5a6:	789b      	ldrb	r3, [r3, #2]
 800f5a8:	706b      	strb	r3, [r5, #1]
 800f5aa:	1cab      	adds	r3, r5, #2
 800f5ac:	68a2      	ldr	r2, [r4, #8]
 800f5ae:	7852      	ldrb	r2, [r2, #1]
 800f5b0:	f803 2b01 	strb.w	r2, [r3], #1
 800f5b4:	68a2      	ldr	r2, [r4, #8]
 800f5b6:	7812      	ldrb	r2, [r2, #0]
 800f5b8:	701a      	strb	r2, [r3, #0]
 800f5ba:	e7b2      	b.n	800f522 <ucdr_deserialize_endian_uint32_t+0x7a>
 800f5bc:	4639      	mov	r1, r7
 800f5be:	4642      	mov	r2, r8
 800f5c0:	4628      	mov	r0, r5
 800f5c2:	f00b ff70 	bl	801b4a6 <memcpy>
 800f5c6:	68a1      	ldr	r1, [r4, #8]
 800f5c8:	4652      	mov	r2, sl
 800f5ca:	eb05 0008 	add.w	r0, r5, r8
 800f5ce:	f00b ff6a 	bl	801b4a6 <memcpy>
 800f5d2:	e7a6      	b.n	800f522 <ucdr_deserialize_endian_uint32_t+0x7a>

0800f5d4 <ucdr_serialize_uint64_t>:
 800f5d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f5d8:	2108      	movs	r1, #8
 800f5da:	b082      	sub	sp, #8
 800f5dc:	4604      	mov	r4, r0
 800f5de:	e9cd 2300 	strd	r2, r3, [sp]
 800f5e2:	f000 ffa9 	bl	8010538 <ucdr_buffer_alignment>
 800f5e6:	4601      	mov	r1, r0
 800f5e8:	4620      	mov	r0, r4
 800f5ea:	7d67      	ldrb	r7, [r4, #21]
 800f5ec:	f000 ffe8 	bl	80105c0 <ucdr_advance_buffer>
 800f5f0:	2108      	movs	r1, #8
 800f5f2:	4620      	mov	r0, r4
 800f5f4:	f000 ff40 	bl	8010478 <ucdr_check_buffer_available_for>
 800f5f8:	2800      	cmp	r0, #0
 800f5fa:	d14e      	bne.n	800f69a <ucdr_serialize_uint64_t+0xc6>
 800f5fc:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800f600:	42ab      	cmp	r3, r5
 800f602:	d945      	bls.n	800f690 <ucdr_serialize_uint64_t+0xbc>
 800f604:	1b5e      	subs	r6, r3, r5
 800f606:	60a3      	str	r3, [r4, #8]
 800f608:	6923      	ldr	r3, [r4, #16]
 800f60a:	f1c6 0808 	rsb	r8, r6, #8
 800f60e:	4433      	add	r3, r6
 800f610:	6123      	str	r3, [r4, #16]
 800f612:	4641      	mov	r1, r8
 800f614:	4620      	mov	r0, r4
 800f616:	f000 ff3b 	bl	8010490 <ucdr_check_final_buffer_behavior>
 800f61a:	2800      	cmp	r0, #0
 800f61c:	d074      	beq.n	800f708 <ucdr_serialize_uint64_t+0x134>
 800f61e:	7d23      	ldrb	r3, [r4, #20]
 800f620:	2b01      	cmp	r3, #1
 800f622:	f000 809b 	beq.w	800f75c <ucdr_serialize_uint64_t+0x188>
 800f626:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f62a:	702b      	strb	r3, [r5, #0]
 800f62c:	2e00      	cmp	r6, #0
 800f62e:	d078      	beq.n	800f722 <ucdr_serialize_uint64_t+0x14e>
 800f630:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f634:	706b      	strb	r3, [r5, #1]
 800f636:	2e01      	cmp	r6, #1
 800f638:	d077      	beq.n	800f72a <ucdr_serialize_uint64_t+0x156>
 800f63a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800f63e:	70ab      	strb	r3, [r5, #2]
 800f640:	2e02      	cmp	r6, #2
 800f642:	d076      	beq.n	800f732 <ucdr_serialize_uint64_t+0x15e>
 800f644:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f648:	70eb      	strb	r3, [r5, #3]
 800f64a:	2e03      	cmp	r6, #3
 800f64c:	d075      	beq.n	800f73a <ucdr_serialize_uint64_t+0x166>
 800f64e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800f652:	712b      	strb	r3, [r5, #4]
 800f654:	2e04      	cmp	r6, #4
 800f656:	d074      	beq.n	800f742 <ucdr_serialize_uint64_t+0x16e>
 800f658:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800f65c:	716b      	strb	r3, [r5, #5]
 800f65e:	2e05      	cmp	r6, #5
 800f660:	d073      	beq.n	800f74a <ucdr_serialize_uint64_t+0x176>
 800f662:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800f666:	71ab      	strb	r3, [r5, #6]
 800f668:	2e06      	cmp	r6, #6
 800f66a:	d072      	beq.n	800f752 <ucdr_serialize_uint64_t+0x17e>
 800f66c:	f89d 3000 	ldrb.w	r3, [sp]
 800f670:	71eb      	strb	r3, [r5, #7]
 800f672:	6923      	ldr	r3, [r4, #16]
 800f674:	68a2      	ldr	r2, [r4, #8]
 800f676:	7da0      	ldrb	r0, [r4, #22]
 800f678:	3308      	adds	r3, #8
 800f67a:	1b9e      	subs	r6, r3, r6
 800f67c:	4442      	add	r2, r8
 800f67e:	2308      	movs	r3, #8
 800f680:	f080 0001 	eor.w	r0, r0, #1
 800f684:	60a2      	str	r2, [r4, #8]
 800f686:	6126      	str	r6, [r4, #16]
 800f688:	7563      	strb	r3, [r4, #21]
 800f68a:	b002      	add	sp, #8
 800f68c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f690:	2108      	movs	r1, #8
 800f692:	4620      	mov	r0, r4
 800f694:	f000 fefc 	bl	8010490 <ucdr_check_final_buffer_behavior>
 800f698:	b350      	cbz	r0, 800f6f0 <ucdr_serialize_uint64_t+0x11c>
 800f69a:	7d23      	ldrb	r3, [r4, #20]
 800f69c:	2b01      	cmp	r3, #1
 800f69e:	d02d      	beq.n	800f6fc <ucdr_serialize_uint64_t+0x128>
 800f6a0:	68a3      	ldr	r3, [r4, #8]
 800f6a2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800f6a6:	701a      	strb	r2, [r3, #0]
 800f6a8:	68a3      	ldr	r3, [r4, #8]
 800f6aa:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f6ae:	705a      	strb	r2, [r3, #1]
 800f6b0:	68a3      	ldr	r3, [r4, #8]
 800f6b2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f6b6:	709a      	strb	r2, [r3, #2]
 800f6b8:	68a3      	ldr	r3, [r4, #8]
 800f6ba:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f6be:	70da      	strb	r2, [r3, #3]
 800f6c0:	68a3      	ldr	r3, [r4, #8]
 800f6c2:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800f6c6:	711a      	strb	r2, [r3, #4]
 800f6c8:	68a3      	ldr	r3, [r4, #8]
 800f6ca:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800f6ce:	715a      	strb	r2, [r3, #5]
 800f6d0:	68a3      	ldr	r3, [r4, #8]
 800f6d2:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800f6d6:	719a      	strb	r2, [r3, #6]
 800f6d8:	68a3      	ldr	r3, [r4, #8]
 800f6da:	f89d 2000 	ldrb.w	r2, [sp]
 800f6de:	71da      	strb	r2, [r3, #7]
 800f6e0:	68a2      	ldr	r2, [r4, #8]
 800f6e2:	6923      	ldr	r3, [r4, #16]
 800f6e4:	3208      	adds	r2, #8
 800f6e6:	3308      	adds	r3, #8
 800f6e8:	2108      	movs	r1, #8
 800f6ea:	60a2      	str	r2, [r4, #8]
 800f6ec:	6123      	str	r3, [r4, #16]
 800f6ee:	7561      	strb	r1, [r4, #21]
 800f6f0:	7da0      	ldrb	r0, [r4, #22]
 800f6f2:	f080 0001 	eor.w	r0, r0, #1
 800f6f6:	b002      	add	sp, #8
 800f6f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f6fc:	466b      	mov	r3, sp
 800f6fe:	cb03      	ldmia	r3!, {r0, r1}
 800f700:	68a3      	ldr	r3, [r4, #8]
 800f702:	6018      	str	r0, [r3, #0]
 800f704:	6059      	str	r1, [r3, #4]
 800f706:	e7eb      	b.n	800f6e0 <ucdr_serialize_uint64_t+0x10c>
 800f708:	68a2      	ldr	r2, [r4, #8]
 800f70a:	6923      	ldr	r3, [r4, #16]
 800f70c:	7da0      	ldrb	r0, [r4, #22]
 800f70e:	7567      	strb	r7, [r4, #21]
 800f710:	1b92      	subs	r2, r2, r6
 800f712:	1b9b      	subs	r3, r3, r6
 800f714:	f080 0001 	eor.w	r0, r0, #1
 800f718:	60a2      	str	r2, [r4, #8]
 800f71a:	6123      	str	r3, [r4, #16]
 800f71c:	b002      	add	sp, #8
 800f71e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f722:	68a3      	ldr	r3, [r4, #8]
 800f724:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f728:	701a      	strb	r2, [r3, #0]
 800f72a:	68a3      	ldr	r3, [r4, #8]
 800f72c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f730:	701a      	strb	r2, [r3, #0]
 800f732:	68a3      	ldr	r3, [r4, #8]
 800f734:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f738:	701a      	strb	r2, [r3, #0]
 800f73a:	68a3      	ldr	r3, [r4, #8]
 800f73c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800f740:	701a      	strb	r2, [r3, #0]
 800f742:	68a3      	ldr	r3, [r4, #8]
 800f744:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800f748:	701a      	strb	r2, [r3, #0]
 800f74a:	68a3      	ldr	r3, [r4, #8]
 800f74c:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800f750:	701a      	strb	r2, [r3, #0]
 800f752:	68a3      	ldr	r3, [r4, #8]
 800f754:	f89d 2000 	ldrb.w	r2, [sp]
 800f758:	701a      	strb	r2, [r3, #0]
 800f75a:	e78a      	b.n	800f672 <ucdr_serialize_uint64_t+0x9e>
 800f75c:	4628      	mov	r0, r5
 800f75e:	466d      	mov	r5, sp
 800f760:	4629      	mov	r1, r5
 800f762:	4632      	mov	r2, r6
 800f764:	f00b fe9f 	bl	801b4a6 <memcpy>
 800f768:	68a0      	ldr	r0, [r4, #8]
 800f76a:	4642      	mov	r2, r8
 800f76c:	19a9      	adds	r1, r5, r6
 800f76e:	f00b fe9a 	bl	801b4a6 <memcpy>
 800f772:	e77e      	b.n	800f672 <ucdr_serialize_uint64_t+0x9e>

0800f774 <ucdr_serialize_int16_t>:
 800f774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f778:	b082      	sub	sp, #8
 800f77a:	460b      	mov	r3, r1
 800f77c:	2102      	movs	r1, #2
 800f77e:	4604      	mov	r4, r0
 800f780:	f8ad 3006 	strh.w	r3, [sp, #6]
 800f784:	f000 fed8 	bl	8010538 <ucdr_buffer_alignment>
 800f788:	4601      	mov	r1, r0
 800f78a:	4620      	mov	r0, r4
 800f78c:	7d67      	ldrb	r7, [r4, #21]
 800f78e:	f000 ff17 	bl	80105c0 <ucdr_advance_buffer>
 800f792:	2102      	movs	r1, #2
 800f794:	4620      	mov	r0, r4
 800f796:	f000 fe6f 	bl	8010478 <ucdr_check_buffer_available_for>
 800f79a:	bb78      	cbnz	r0, 800f7fc <ucdr_serialize_int16_t+0x88>
 800f79c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800f7a0:	42ab      	cmp	r3, r5
 800f7a2:	d926      	bls.n	800f7f2 <ucdr_serialize_int16_t+0x7e>
 800f7a4:	1b5e      	subs	r6, r3, r5
 800f7a6:	60a3      	str	r3, [r4, #8]
 800f7a8:	6923      	ldr	r3, [r4, #16]
 800f7aa:	f1c6 0802 	rsb	r8, r6, #2
 800f7ae:	4433      	add	r3, r6
 800f7b0:	6123      	str	r3, [r4, #16]
 800f7b2:	4641      	mov	r1, r8
 800f7b4:	4620      	mov	r0, r4
 800f7b6:	f000 fe6b 	bl	8010490 <ucdr_check_final_buffer_behavior>
 800f7ba:	2800      	cmp	r0, #0
 800f7bc:	d03b      	beq.n	800f836 <ucdr_serialize_int16_t+0xc2>
 800f7be:	7d23      	ldrb	r3, [r4, #20]
 800f7c0:	2b01      	cmp	r3, #1
 800f7c2:	d04a      	beq.n	800f85a <ucdr_serialize_int16_t+0xe6>
 800f7c4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f7c8:	702b      	strb	r3, [r5, #0]
 800f7ca:	2e00      	cmp	r6, #0
 800f7cc:	d040      	beq.n	800f850 <ucdr_serialize_int16_t+0xdc>
 800f7ce:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f7d2:	706b      	strb	r3, [r5, #1]
 800f7d4:	6923      	ldr	r3, [r4, #16]
 800f7d6:	68a2      	ldr	r2, [r4, #8]
 800f7d8:	7da0      	ldrb	r0, [r4, #22]
 800f7da:	3302      	adds	r3, #2
 800f7dc:	1b9e      	subs	r6, r3, r6
 800f7de:	4442      	add	r2, r8
 800f7e0:	2302      	movs	r3, #2
 800f7e2:	f080 0001 	eor.w	r0, r0, #1
 800f7e6:	60a2      	str	r2, [r4, #8]
 800f7e8:	6126      	str	r6, [r4, #16]
 800f7ea:	7563      	strb	r3, [r4, #21]
 800f7ec:	b002      	add	sp, #8
 800f7ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f7f2:	2102      	movs	r1, #2
 800f7f4:	4620      	mov	r0, r4
 800f7f6:	f000 fe4b 	bl	8010490 <ucdr_check_final_buffer_behavior>
 800f7fa:	b190      	cbz	r0, 800f822 <ucdr_serialize_int16_t+0xae>
 800f7fc:	7d23      	ldrb	r3, [r4, #20]
 800f7fe:	2b01      	cmp	r3, #1
 800f800:	68a3      	ldr	r3, [r4, #8]
 800f802:	d014      	beq.n	800f82e <ucdr_serialize_int16_t+0xba>
 800f804:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800f808:	701a      	strb	r2, [r3, #0]
 800f80a:	68a3      	ldr	r3, [r4, #8]
 800f80c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f810:	705a      	strb	r2, [r3, #1]
 800f812:	68a2      	ldr	r2, [r4, #8]
 800f814:	6923      	ldr	r3, [r4, #16]
 800f816:	3202      	adds	r2, #2
 800f818:	3302      	adds	r3, #2
 800f81a:	2102      	movs	r1, #2
 800f81c:	60a2      	str	r2, [r4, #8]
 800f81e:	6123      	str	r3, [r4, #16]
 800f820:	7561      	strb	r1, [r4, #21]
 800f822:	7da0      	ldrb	r0, [r4, #22]
 800f824:	f080 0001 	eor.w	r0, r0, #1
 800f828:	b002      	add	sp, #8
 800f82a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f82e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800f832:	801a      	strh	r2, [r3, #0]
 800f834:	e7ed      	b.n	800f812 <ucdr_serialize_int16_t+0x9e>
 800f836:	68a2      	ldr	r2, [r4, #8]
 800f838:	6923      	ldr	r3, [r4, #16]
 800f83a:	7da0      	ldrb	r0, [r4, #22]
 800f83c:	7567      	strb	r7, [r4, #21]
 800f83e:	1b92      	subs	r2, r2, r6
 800f840:	1b9b      	subs	r3, r3, r6
 800f842:	f080 0001 	eor.w	r0, r0, #1
 800f846:	60a2      	str	r2, [r4, #8]
 800f848:	6123      	str	r3, [r4, #16]
 800f84a:	b002      	add	sp, #8
 800f84c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f850:	68a3      	ldr	r3, [r4, #8]
 800f852:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f856:	701a      	strb	r2, [r3, #0]
 800f858:	e7bc      	b.n	800f7d4 <ucdr_serialize_int16_t+0x60>
 800f85a:	4628      	mov	r0, r5
 800f85c:	f10d 0506 	add.w	r5, sp, #6
 800f860:	4629      	mov	r1, r5
 800f862:	4632      	mov	r2, r6
 800f864:	f00b fe1f 	bl	801b4a6 <memcpy>
 800f868:	68a0      	ldr	r0, [r4, #8]
 800f86a:	4642      	mov	r2, r8
 800f86c:	19a9      	adds	r1, r5, r6
 800f86e:	f00b fe1a 	bl	801b4a6 <memcpy>
 800f872:	e7af      	b.n	800f7d4 <ucdr_serialize_int16_t+0x60>

0800f874 <ucdr_deserialize_int16_t>:
 800f874:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f878:	460d      	mov	r5, r1
 800f87a:	2102      	movs	r1, #2
 800f87c:	4604      	mov	r4, r0
 800f87e:	f000 fe5b 	bl	8010538 <ucdr_buffer_alignment>
 800f882:	4601      	mov	r1, r0
 800f884:	4620      	mov	r0, r4
 800f886:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f88a:	f000 fe99 	bl	80105c0 <ucdr_advance_buffer>
 800f88e:	2102      	movs	r1, #2
 800f890:	4620      	mov	r0, r4
 800f892:	f000 fdf1 	bl	8010478 <ucdr_check_buffer_available_for>
 800f896:	bb60      	cbnz	r0, 800f8f2 <ucdr_deserialize_int16_t+0x7e>
 800f898:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800f89c:	42be      	cmp	r6, r7
 800f89e:	d923      	bls.n	800f8e8 <ucdr_deserialize_int16_t+0x74>
 800f8a0:	6923      	ldr	r3, [r4, #16]
 800f8a2:	60a6      	str	r6, [r4, #8]
 800f8a4:	1bf6      	subs	r6, r6, r7
 800f8a6:	4433      	add	r3, r6
 800f8a8:	f1c6 0902 	rsb	r9, r6, #2
 800f8ac:	6123      	str	r3, [r4, #16]
 800f8ae:	4649      	mov	r1, r9
 800f8b0:	4620      	mov	r0, r4
 800f8b2:	f000 fded 	bl	8010490 <ucdr_check_final_buffer_behavior>
 800f8b6:	2800      	cmp	r0, #0
 800f8b8:	d034      	beq.n	800f924 <ucdr_deserialize_int16_t+0xb0>
 800f8ba:	7d23      	ldrb	r3, [r4, #20]
 800f8bc:	2b01      	cmp	r3, #1
 800f8be:	d042      	beq.n	800f946 <ucdr_deserialize_int16_t+0xd2>
 800f8c0:	787b      	ldrb	r3, [r7, #1]
 800f8c2:	702b      	strb	r3, [r5, #0]
 800f8c4:	2e00      	cmp	r6, #0
 800f8c6:	d03a      	beq.n	800f93e <ucdr_deserialize_int16_t+0xca>
 800f8c8:	783b      	ldrb	r3, [r7, #0]
 800f8ca:	706b      	strb	r3, [r5, #1]
 800f8cc:	6923      	ldr	r3, [r4, #16]
 800f8ce:	68a2      	ldr	r2, [r4, #8]
 800f8d0:	7da0      	ldrb	r0, [r4, #22]
 800f8d2:	2102      	movs	r1, #2
 800f8d4:	3302      	adds	r3, #2
 800f8d6:	444a      	add	r2, r9
 800f8d8:	1b9b      	subs	r3, r3, r6
 800f8da:	7561      	strb	r1, [r4, #21]
 800f8dc:	60a2      	str	r2, [r4, #8]
 800f8de:	6123      	str	r3, [r4, #16]
 800f8e0:	f080 0001 	eor.w	r0, r0, #1
 800f8e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f8e8:	2102      	movs	r1, #2
 800f8ea:	4620      	mov	r0, r4
 800f8ec:	f000 fdd0 	bl	8010490 <ucdr_check_final_buffer_behavior>
 800f8f0:	b180      	cbz	r0, 800f914 <ucdr_deserialize_int16_t+0xa0>
 800f8f2:	7d23      	ldrb	r3, [r4, #20]
 800f8f4:	2b01      	cmp	r3, #1
 800f8f6:	68a3      	ldr	r3, [r4, #8]
 800f8f8:	d011      	beq.n	800f91e <ucdr_deserialize_int16_t+0xaa>
 800f8fa:	785b      	ldrb	r3, [r3, #1]
 800f8fc:	702b      	strb	r3, [r5, #0]
 800f8fe:	68a3      	ldr	r3, [r4, #8]
 800f900:	781b      	ldrb	r3, [r3, #0]
 800f902:	706b      	strb	r3, [r5, #1]
 800f904:	68a2      	ldr	r2, [r4, #8]
 800f906:	6923      	ldr	r3, [r4, #16]
 800f908:	3202      	adds	r2, #2
 800f90a:	3302      	adds	r3, #2
 800f90c:	2102      	movs	r1, #2
 800f90e:	60a2      	str	r2, [r4, #8]
 800f910:	6123      	str	r3, [r4, #16]
 800f912:	7561      	strb	r1, [r4, #21]
 800f914:	7da0      	ldrb	r0, [r4, #22]
 800f916:	f080 0001 	eor.w	r0, r0, #1
 800f91a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f91e:	881b      	ldrh	r3, [r3, #0]
 800f920:	802b      	strh	r3, [r5, #0]
 800f922:	e7ef      	b.n	800f904 <ucdr_deserialize_int16_t+0x90>
 800f924:	68a2      	ldr	r2, [r4, #8]
 800f926:	6923      	ldr	r3, [r4, #16]
 800f928:	7da0      	ldrb	r0, [r4, #22]
 800f92a:	f884 8015 	strb.w	r8, [r4, #21]
 800f92e:	1b92      	subs	r2, r2, r6
 800f930:	1b9b      	subs	r3, r3, r6
 800f932:	60a2      	str	r2, [r4, #8]
 800f934:	6123      	str	r3, [r4, #16]
 800f936:	f080 0001 	eor.w	r0, r0, #1
 800f93a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f93e:	68a3      	ldr	r3, [r4, #8]
 800f940:	781b      	ldrb	r3, [r3, #0]
 800f942:	706b      	strb	r3, [r5, #1]
 800f944:	e7c2      	b.n	800f8cc <ucdr_deserialize_int16_t+0x58>
 800f946:	4639      	mov	r1, r7
 800f948:	4632      	mov	r2, r6
 800f94a:	4628      	mov	r0, r5
 800f94c:	f00b fdab 	bl	801b4a6 <memcpy>
 800f950:	68a1      	ldr	r1, [r4, #8]
 800f952:	464a      	mov	r2, r9
 800f954:	19a8      	adds	r0, r5, r6
 800f956:	f00b fda6 	bl	801b4a6 <memcpy>
 800f95a:	e7b7      	b.n	800f8cc <ucdr_deserialize_int16_t+0x58>

0800f95c <ucdr_serialize_int32_t>:
 800f95c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f960:	b082      	sub	sp, #8
 800f962:	4604      	mov	r4, r0
 800f964:	9101      	str	r1, [sp, #4]
 800f966:	2104      	movs	r1, #4
 800f968:	f000 fde6 	bl	8010538 <ucdr_buffer_alignment>
 800f96c:	4601      	mov	r1, r0
 800f96e:	4620      	mov	r0, r4
 800f970:	7d67      	ldrb	r7, [r4, #21]
 800f972:	f000 fe25 	bl	80105c0 <ucdr_advance_buffer>
 800f976:	2104      	movs	r1, #4
 800f978:	4620      	mov	r0, r4
 800f97a:	f000 fd7d 	bl	8010478 <ucdr_check_buffer_available_for>
 800f97e:	2800      	cmp	r0, #0
 800f980:	d139      	bne.n	800f9f6 <ucdr_serialize_int32_t+0x9a>
 800f982:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800f986:	42ab      	cmp	r3, r5
 800f988:	d930      	bls.n	800f9ec <ucdr_serialize_int32_t+0x90>
 800f98a:	1b5e      	subs	r6, r3, r5
 800f98c:	60a3      	str	r3, [r4, #8]
 800f98e:	6923      	ldr	r3, [r4, #16]
 800f990:	f1c6 0804 	rsb	r8, r6, #4
 800f994:	4433      	add	r3, r6
 800f996:	6123      	str	r3, [r4, #16]
 800f998:	4641      	mov	r1, r8
 800f99a:	4620      	mov	r0, r4
 800f99c:	f000 fd78 	bl	8010490 <ucdr_check_final_buffer_behavior>
 800f9a0:	2800      	cmp	r0, #0
 800f9a2:	d04c      	beq.n	800fa3e <ucdr_serialize_int32_t+0xe2>
 800f9a4:	7d23      	ldrb	r3, [r4, #20]
 800f9a6:	2b01      	cmp	r3, #1
 800f9a8:	d063      	beq.n	800fa72 <ucdr_serialize_int32_t+0x116>
 800f9aa:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f9ae:	702b      	strb	r3, [r5, #0]
 800f9b0:	2e00      	cmp	r6, #0
 800f9b2:	d051      	beq.n	800fa58 <ucdr_serialize_int32_t+0xfc>
 800f9b4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f9b8:	706b      	strb	r3, [r5, #1]
 800f9ba:	2e01      	cmp	r6, #1
 800f9bc:	d050      	beq.n	800fa60 <ucdr_serialize_int32_t+0x104>
 800f9be:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800f9c2:	70ab      	strb	r3, [r5, #2]
 800f9c4:	2e02      	cmp	r6, #2
 800f9c6:	d04f      	beq.n	800fa68 <ucdr_serialize_int32_t+0x10c>
 800f9c8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f9cc:	70eb      	strb	r3, [r5, #3]
 800f9ce:	6923      	ldr	r3, [r4, #16]
 800f9d0:	68a2      	ldr	r2, [r4, #8]
 800f9d2:	7da0      	ldrb	r0, [r4, #22]
 800f9d4:	3304      	adds	r3, #4
 800f9d6:	1b9e      	subs	r6, r3, r6
 800f9d8:	4442      	add	r2, r8
 800f9da:	2304      	movs	r3, #4
 800f9dc:	f080 0001 	eor.w	r0, r0, #1
 800f9e0:	60a2      	str	r2, [r4, #8]
 800f9e2:	6126      	str	r6, [r4, #16]
 800f9e4:	7563      	strb	r3, [r4, #21]
 800f9e6:	b002      	add	sp, #8
 800f9e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f9ec:	2104      	movs	r1, #4
 800f9ee:	4620      	mov	r0, r4
 800f9f0:	f000 fd4e 	bl	8010490 <ucdr_check_final_buffer_behavior>
 800f9f4:	b1d0      	cbz	r0, 800fa2c <ucdr_serialize_int32_t+0xd0>
 800f9f6:	7d23      	ldrb	r3, [r4, #20]
 800f9f8:	2b01      	cmp	r3, #1
 800f9fa:	68a3      	ldr	r3, [r4, #8]
 800f9fc:	d01c      	beq.n	800fa38 <ucdr_serialize_int32_t+0xdc>
 800f9fe:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800fa02:	701a      	strb	r2, [r3, #0]
 800fa04:	68a3      	ldr	r3, [r4, #8]
 800fa06:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800fa0a:	705a      	strb	r2, [r3, #1]
 800fa0c:	68a3      	ldr	r3, [r4, #8]
 800fa0e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800fa12:	709a      	strb	r2, [r3, #2]
 800fa14:	68a3      	ldr	r3, [r4, #8]
 800fa16:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800fa1a:	70da      	strb	r2, [r3, #3]
 800fa1c:	68a2      	ldr	r2, [r4, #8]
 800fa1e:	6923      	ldr	r3, [r4, #16]
 800fa20:	3204      	adds	r2, #4
 800fa22:	3304      	adds	r3, #4
 800fa24:	2104      	movs	r1, #4
 800fa26:	60a2      	str	r2, [r4, #8]
 800fa28:	6123      	str	r3, [r4, #16]
 800fa2a:	7561      	strb	r1, [r4, #21]
 800fa2c:	7da0      	ldrb	r0, [r4, #22]
 800fa2e:	f080 0001 	eor.w	r0, r0, #1
 800fa32:	b002      	add	sp, #8
 800fa34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa38:	9a01      	ldr	r2, [sp, #4]
 800fa3a:	601a      	str	r2, [r3, #0]
 800fa3c:	e7ee      	b.n	800fa1c <ucdr_serialize_int32_t+0xc0>
 800fa3e:	68a2      	ldr	r2, [r4, #8]
 800fa40:	6923      	ldr	r3, [r4, #16]
 800fa42:	7da0      	ldrb	r0, [r4, #22]
 800fa44:	7567      	strb	r7, [r4, #21]
 800fa46:	1b92      	subs	r2, r2, r6
 800fa48:	1b9b      	subs	r3, r3, r6
 800fa4a:	f080 0001 	eor.w	r0, r0, #1
 800fa4e:	60a2      	str	r2, [r4, #8]
 800fa50:	6123      	str	r3, [r4, #16]
 800fa52:	b002      	add	sp, #8
 800fa54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa58:	68a3      	ldr	r3, [r4, #8]
 800fa5a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800fa5e:	701a      	strb	r2, [r3, #0]
 800fa60:	68a3      	ldr	r3, [r4, #8]
 800fa62:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800fa66:	701a      	strb	r2, [r3, #0]
 800fa68:	68a3      	ldr	r3, [r4, #8]
 800fa6a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800fa6e:	701a      	strb	r2, [r3, #0]
 800fa70:	e7ad      	b.n	800f9ce <ucdr_serialize_int32_t+0x72>
 800fa72:	4628      	mov	r0, r5
 800fa74:	ad01      	add	r5, sp, #4
 800fa76:	4629      	mov	r1, r5
 800fa78:	4632      	mov	r2, r6
 800fa7a:	f00b fd14 	bl	801b4a6 <memcpy>
 800fa7e:	68a0      	ldr	r0, [r4, #8]
 800fa80:	4642      	mov	r2, r8
 800fa82:	19a9      	adds	r1, r5, r6
 800fa84:	f00b fd0f 	bl	801b4a6 <memcpy>
 800fa88:	e7a1      	b.n	800f9ce <ucdr_serialize_int32_t+0x72>
 800fa8a:	bf00      	nop

0800fa8c <ucdr_deserialize_int32_t>:
 800fa8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fa90:	460d      	mov	r5, r1
 800fa92:	2104      	movs	r1, #4
 800fa94:	4604      	mov	r4, r0
 800fa96:	f000 fd4f 	bl	8010538 <ucdr_buffer_alignment>
 800fa9a:	4601      	mov	r1, r0
 800fa9c:	4620      	mov	r0, r4
 800fa9e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800faa2:	f000 fd8d 	bl	80105c0 <ucdr_advance_buffer>
 800faa6:	2104      	movs	r1, #4
 800faa8:	4620      	mov	r0, r4
 800faaa:	f000 fce5 	bl	8010478 <ucdr_check_buffer_available_for>
 800faae:	2800      	cmp	r0, #0
 800fab0:	d138      	bne.n	800fb24 <ucdr_deserialize_int32_t+0x98>
 800fab2:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800fab6:	42b7      	cmp	r7, r6
 800fab8:	d92f      	bls.n	800fb1a <ucdr_deserialize_int32_t+0x8e>
 800faba:	6923      	ldr	r3, [r4, #16]
 800fabc:	60a7      	str	r7, [r4, #8]
 800fabe:	1bbf      	subs	r7, r7, r6
 800fac0:	443b      	add	r3, r7
 800fac2:	f1c7 0904 	rsb	r9, r7, #4
 800fac6:	6123      	str	r3, [r4, #16]
 800fac8:	4649      	mov	r1, r9
 800faca:	4620      	mov	r0, r4
 800facc:	f000 fce0 	bl	8010490 <ucdr_check_final_buffer_behavior>
 800fad0:	2800      	cmp	r0, #0
 800fad2:	d046      	beq.n	800fb62 <ucdr_deserialize_int32_t+0xd6>
 800fad4:	7d23      	ldrb	r3, [r4, #20]
 800fad6:	2b01      	cmp	r3, #1
 800fad8:	d05c      	beq.n	800fb94 <ucdr_deserialize_int32_t+0x108>
 800fada:	78f3      	ldrb	r3, [r6, #3]
 800fadc:	702b      	strb	r3, [r5, #0]
 800fade:	2f00      	cmp	r7, #0
 800fae0:	d04c      	beq.n	800fb7c <ucdr_deserialize_int32_t+0xf0>
 800fae2:	78b3      	ldrb	r3, [r6, #2]
 800fae4:	706b      	strb	r3, [r5, #1]
 800fae6:	2f01      	cmp	r7, #1
 800fae8:	f105 0302 	add.w	r3, r5, #2
 800faec:	d04a      	beq.n	800fb84 <ucdr_deserialize_int32_t+0xf8>
 800faee:	7873      	ldrb	r3, [r6, #1]
 800faf0:	70ab      	strb	r3, [r5, #2]
 800faf2:	2f02      	cmp	r7, #2
 800faf4:	f105 0303 	add.w	r3, r5, #3
 800faf8:	d048      	beq.n	800fb8c <ucdr_deserialize_int32_t+0x100>
 800fafa:	7833      	ldrb	r3, [r6, #0]
 800fafc:	70eb      	strb	r3, [r5, #3]
 800fafe:	6923      	ldr	r3, [r4, #16]
 800fb00:	68a2      	ldr	r2, [r4, #8]
 800fb02:	7da0      	ldrb	r0, [r4, #22]
 800fb04:	2104      	movs	r1, #4
 800fb06:	3304      	adds	r3, #4
 800fb08:	444a      	add	r2, r9
 800fb0a:	1bdb      	subs	r3, r3, r7
 800fb0c:	7561      	strb	r1, [r4, #21]
 800fb0e:	60a2      	str	r2, [r4, #8]
 800fb10:	6123      	str	r3, [r4, #16]
 800fb12:	f080 0001 	eor.w	r0, r0, #1
 800fb16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fb1a:	2104      	movs	r1, #4
 800fb1c:	4620      	mov	r0, r4
 800fb1e:	f000 fcb7 	bl	8010490 <ucdr_check_final_buffer_behavior>
 800fb22:	b1b0      	cbz	r0, 800fb52 <ucdr_deserialize_int32_t+0xc6>
 800fb24:	7d23      	ldrb	r3, [r4, #20]
 800fb26:	2b01      	cmp	r3, #1
 800fb28:	68a3      	ldr	r3, [r4, #8]
 800fb2a:	d017      	beq.n	800fb5c <ucdr_deserialize_int32_t+0xd0>
 800fb2c:	78db      	ldrb	r3, [r3, #3]
 800fb2e:	702b      	strb	r3, [r5, #0]
 800fb30:	68a3      	ldr	r3, [r4, #8]
 800fb32:	789b      	ldrb	r3, [r3, #2]
 800fb34:	706b      	strb	r3, [r5, #1]
 800fb36:	68a3      	ldr	r3, [r4, #8]
 800fb38:	785b      	ldrb	r3, [r3, #1]
 800fb3a:	70ab      	strb	r3, [r5, #2]
 800fb3c:	68a3      	ldr	r3, [r4, #8]
 800fb3e:	781b      	ldrb	r3, [r3, #0]
 800fb40:	70eb      	strb	r3, [r5, #3]
 800fb42:	68a2      	ldr	r2, [r4, #8]
 800fb44:	6923      	ldr	r3, [r4, #16]
 800fb46:	3204      	adds	r2, #4
 800fb48:	3304      	adds	r3, #4
 800fb4a:	2104      	movs	r1, #4
 800fb4c:	60a2      	str	r2, [r4, #8]
 800fb4e:	6123      	str	r3, [r4, #16]
 800fb50:	7561      	strb	r1, [r4, #21]
 800fb52:	7da0      	ldrb	r0, [r4, #22]
 800fb54:	f080 0001 	eor.w	r0, r0, #1
 800fb58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fb5c:	681b      	ldr	r3, [r3, #0]
 800fb5e:	602b      	str	r3, [r5, #0]
 800fb60:	e7ef      	b.n	800fb42 <ucdr_deserialize_int32_t+0xb6>
 800fb62:	68a2      	ldr	r2, [r4, #8]
 800fb64:	6923      	ldr	r3, [r4, #16]
 800fb66:	7da0      	ldrb	r0, [r4, #22]
 800fb68:	f884 8015 	strb.w	r8, [r4, #21]
 800fb6c:	1bd2      	subs	r2, r2, r7
 800fb6e:	1bdb      	subs	r3, r3, r7
 800fb70:	60a2      	str	r2, [r4, #8]
 800fb72:	6123      	str	r3, [r4, #16]
 800fb74:	f080 0001 	eor.w	r0, r0, #1
 800fb78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fb7c:	68a3      	ldr	r3, [r4, #8]
 800fb7e:	789b      	ldrb	r3, [r3, #2]
 800fb80:	706b      	strb	r3, [r5, #1]
 800fb82:	1cab      	adds	r3, r5, #2
 800fb84:	68a2      	ldr	r2, [r4, #8]
 800fb86:	7852      	ldrb	r2, [r2, #1]
 800fb88:	f803 2b01 	strb.w	r2, [r3], #1
 800fb8c:	68a2      	ldr	r2, [r4, #8]
 800fb8e:	7812      	ldrb	r2, [r2, #0]
 800fb90:	701a      	strb	r2, [r3, #0]
 800fb92:	e7b4      	b.n	800fafe <ucdr_deserialize_int32_t+0x72>
 800fb94:	4631      	mov	r1, r6
 800fb96:	463a      	mov	r2, r7
 800fb98:	4628      	mov	r0, r5
 800fb9a:	f00b fc84 	bl	801b4a6 <memcpy>
 800fb9e:	68a1      	ldr	r1, [r4, #8]
 800fba0:	464a      	mov	r2, r9
 800fba2:	19e8      	adds	r0, r5, r7
 800fba4:	f00b fc7f 	bl	801b4a6 <memcpy>
 800fba8:	e7a9      	b.n	800fafe <ucdr_deserialize_int32_t+0x72>
 800fbaa:	bf00      	nop

0800fbac <ucdr_serialize_endian_float>:
 800fbac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fbb0:	460d      	mov	r5, r1
 800fbb2:	b083      	sub	sp, #12
 800fbb4:	2104      	movs	r1, #4
 800fbb6:	4604      	mov	r4, r0
 800fbb8:	ed8d 0a01 	vstr	s0, [sp, #4]
 800fbbc:	f000 fcbc 	bl	8010538 <ucdr_buffer_alignment>
 800fbc0:	4601      	mov	r1, r0
 800fbc2:	4620      	mov	r0, r4
 800fbc4:	f894 8015 	ldrb.w	r8, [r4, #21]
 800fbc8:	f000 fcfa 	bl	80105c0 <ucdr_advance_buffer>
 800fbcc:	2104      	movs	r1, #4
 800fbce:	4620      	mov	r0, r4
 800fbd0:	f000 fc52 	bl	8010478 <ucdr_check_buffer_available_for>
 800fbd4:	2800      	cmp	r0, #0
 800fbd6:	d138      	bne.n	800fc4a <ucdr_serialize_endian_float+0x9e>
 800fbd8:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800fbdc:	42b7      	cmp	r7, r6
 800fbde:	d92f      	bls.n	800fc40 <ucdr_serialize_endian_float+0x94>
 800fbe0:	6923      	ldr	r3, [r4, #16]
 800fbe2:	60a7      	str	r7, [r4, #8]
 800fbe4:	1bbf      	subs	r7, r7, r6
 800fbe6:	443b      	add	r3, r7
 800fbe8:	f1c7 0904 	rsb	r9, r7, #4
 800fbec:	6123      	str	r3, [r4, #16]
 800fbee:	4649      	mov	r1, r9
 800fbf0:	4620      	mov	r0, r4
 800fbf2:	f000 fc4d 	bl	8010490 <ucdr_check_final_buffer_behavior>
 800fbf6:	2800      	cmp	r0, #0
 800fbf8:	d04a      	beq.n	800fc90 <ucdr_serialize_endian_float+0xe4>
 800fbfa:	2d01      	cmp	r5, #1
 800fbfc:	d063      	beq.n	800fcc6 <ucdr_serialize_endian_float+0x11a>
 800fbfe:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800fc02:	7033      	strb	r3, [r6, #0]
 800fc04:	2f00      	cmp	r7, #0
 800fc06:	d051      	beq.n	800fcac <ucdr_serialize_endian_float+0x100>
 800fc08:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800fc0c:	7073      	strb	r3, [r6, #1]
 800fc0e:	2f01      	cmp	r7, #1
 800fc10:	d050      	beq.n	800fcb4 <ucdr_serialize_endian_float+0x108>
 800fc12:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800fc16:	70b3      	strb	r3, [r6, #2]
 800fc18:	2f02      	cmp	r7, #2
 800fc1a:	d04f      	beq.n	800fcbc <ucdr_serialize_endian_float+0x110>
 800fc1c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800fc20:	70f3      	strb	r3, [r6, #3]
 800fc22:	6923      	ldr	r3, [r4, #16]
 800fc24:	68a2      	ldr	r2, [r4, #8]
 800fc26:	7da0      	ldrb	r0, [r4, #22]
 800fc28:	3304      	adds	r3, #4
 800fc2a:	444a      	add	r2, r9
 800fc2c:	1bdb      	subs	r3, r3, r7
 800fc2e:	2104      	movs	r1, #4
 800fc30:	f080 0001 	eor.w	r0, r0, #1
 800fc34:	60a2      	str	r2, [r4, #8]
 800fc36:	6123      	str	r3, [r4, #16]
 800fc38:	7561      	strb	r1, [r4, #21]
 800fc3a:	b003      	add	sp, #12
 800fc3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fc40:	2104      	movs	r1, #4
 800fc42:	4620      	mov	r0, r4
 800fc44:	f000 fc24 	bl	8010490 <ucdr_check_final_buffer_behavior>
 800fc48:	b1c8      	cbz	r0, 800fc7e <ucdr_serialize_endian_float+0xd2>
 800fc4a:	2d01      	cmp	r5, #1
 800fc4c:	68a3      	ldr	r3, [r4, #8]
 800fc4e:	d01c      	beq.n	800fc8a <ucdr_serialize_endian_float+0xde>
 800fc50:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800fc54:	701a      	strb	r2, [r3, #0]
 800fc56:	68a3      	ldr	r3, [r4, #8]
 800fc58:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800fc5c:	705a      	strb	r2, [r3, #1]
 800fc5e:	68a3      	ldr	r3, [r4, #8]
 800fc60:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800fc64:	709a      	strb	r2, [r3, #2]
 800fc66:	68a3      	ldr	r3, [r4, #8]
 800fc68:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800fc6c:	70da      	strb	r2, [r3, #3]
 800fc6e:	68a2      	ldr	r2, [r4, #8]
 800fc70:	6923      	ldr	r3, [r4, #16]
 800fc72:	3204      	adds	r2, #4
 800fc74:	3304      	adds	r3, #4
 800fc76:	2104      	movs	r1, #4
 800fc78:	60a2      	str	r2, [r4, #8]
 800fc7a:	6123      	str	r3, [r4, #16]
 800fc7c:	7561      	strb	r1, [r4, #21]
 800fc7e:	7da0      	ldrb	r0, [r4, #22]
 800fc80:	f080 0001 	eor.w	r0, r0, #1
 800fc84:	b003      	add	sp, #12
 800fc86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fc8a:	9a01      	ldr	r2, [sp, #4]
 800fc8c:	601a      	str	r2, [r3, #0]
 800fc8e:	e7ee      	b.n	800fc6e <ucdr_serialize_endian_float+0xc2>
 800fc90:	68a2      	ldr	r2, [r4, #8]
 800fc92:	6923      	ldr	r3, [r4, #16]
 800fc94:	7da0      	ldrb	r0, [r4, #22]
 800fc96:	f884 8015 	strb.w	r8, [r4, #21]
 800fc9a:	1bd2      	subs	r2, r2, r7
 800fc9c:	1bdb      	subs	r3, r3, r7
 800fc9e:	f080 0001 	eor.w	r0, r0, #1
 800fca2:	60a2      	str	r2, [r4, #8]
 800fca4:	6123      	str	r3, [r4, #16]
 800fca6:	b003      	add	sp, #12
 800fca8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fcac:	68a3      	ldr	r3, [r4, #8]
 800fcae:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800fcb2:	701a      	strb	r2, [r3, #0]
 800fcb4:	68a3      	ldr	r3, [r4, #8]
 800fcb6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800fcba:	701a      	strb	r2, [r3, #0]
 800fcbc:	68a3      	ldr	r3, [r4, #8]
 800fcbe:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800fcc2:	701a      	strb	r2, [r3, #0]
 800fcc4:	e7ad      	b.n	800fc22 <ucdr_serialize_endian_float+0x76>
 800fcc6:	ad01      	add	r5, sp, #4
 800fcc8:	4629      	mov	r1, r5
 800fcca:	463a      	mov	r2, r7
 800fccc:	4630      	mov	r0, r6
 800fcce:	f00b fbea 	bl	801b4a6 <memcpy>
 800fcd2:	68a0      	ldr	r0, [r4, #8]
 800fcd4:	464a      	mov	r2, r9
 800fcd6:	19e9      	adds	r1, r5, r7
 800fcd8:	f00b fbe5 	bl	801b4a6 <memcpy>
 800fcdc:	e7a1      	b.n	800fc22 <ucdr_serialize_endian_float+0x76>
 800fcde:	bf00      	nop

0800fce0 <ucdr_deserialize_endian_float>:
 800fce0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fce4:	460e      	mov	r6, r1
 800fce6:	2104      	movs	r1, #4
 800fce8:	4604      	mov	r4, r0
 800fcea:	4615      	mov	r5, r2
 800fcec:	f000 fc24 	bl	8010538 <ucdr_buffer_alignment>
 800fcf0:	4601      	mov	r1, r0
 800fcf2:	4620      	mov	r0, r4
 800fcf4:	f894 9015 	ldrb.w	r9, [r4, #21]
 800fcf8:	f000 fc62 	bl	80105c0 <ucdr_advance_buffer>
 800fcfc:	2104      	movs	r1, #4
 800fcfe:	4620      	mov	r0, r4
 800fd00:	f000 fbba 	bl	8010478 <ucdr_check_buffer_available_for>
 800fd04:	2800      	cmp	r0, #0
 800fd06:	d13c      	bne.n	800fd82 <ucdr_deserialize_endian_float+0xa2>
 800fd08:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800fd0c:	42bb      	cmp	r3, r7
 800fd0e:	d933      	bls.n	800fd78 <ucdr_deserialize_endian_float+0x98>
 800fd10:	eba3 0807 	sub.w	r8, r3, r7
 800fd14:	60a3      	str	r3, [r4, #8]
 800fd16:	6923      	ldr	r3, [r4, #16]
 800fd18:	f1c8 0a04 	rsb	sl, r8, #4
 800fd1c:	4443      	add	r3, r8
 800fd1e:	6123      	str	r3, [r4, #16]
 800fd20:	4651      	mov	r1, sl
 800fd22:	4620      	mov	r0, r4
 800fd24:	f000 fbb4 	bl	8010490 <ucdr_check_final_buffer_behavior>
 800fd28:	2800      	cmp	r0, #0
 800fd2a:	d048      	beq.n	800fdbe <ucdr_deserialize_endian_float+0xde>
 800fd2c:	2e01      	cmp	r6, #1
 800fd2e:	d061      	beq.n	800fdf4 <ucdr_deserialize_endian_float+0x114>
 800fd30:	78fb      	ldrb	r3, [r7, #3]
 800fd32:	702b      	strb	r3, [r5, #0]
 800fd34:	f1b8 0f00 	cmp.w	r8, #0
 800fd38:	d050      	beq.n	800fddc <ucdr_deserialize_endian_float+0xfc>
 800fd3a:	78bb      	ldrb	r3, [r7, #2]
 800fd3c:	706b      	strb	r3, [r5, #1]
 800fd3e:	f1b8 0f01 	cmp.w	r8, #1
 800fd42:	f105 0302 	add.w	r3, r5, #2
 800fd46:	d04d      	beq.n	800fde4 <ucdr_deserialize_endian_float+0x104>
 800fd48:	787b      	ldrb	r3, [r7, #1]
 800fd4a:	70ab      	strb	r3, [r5, #2]
 800fd4c:	f1b8 0f02 	cmp.w	r8, #2
 800fd50:	f105 0303 	add.w	r3, r5, #3
 800fd54:	d04a      	beq.n	800fdec <ucdr_deserialize_endian_float+0x10c>
 800fd56:	783b      	ldrb	r3, [r7, #0]
 800fd58:	70eb      	strb	r3, [r5, #3]
 800fd5a:	6923      	ldr	r3, [r4, #16]
 800fd5c:	68a2      	ldr	r2, [r4, #8]
 800fd5e:	7da0      	ldrb	r0, [r4, #22]
 800fd60:	2104      	movs	r1, #4
 800fd62:	3304      	adds	r3, #4
 800fd64:	4452      	add	r2, sl
 800fd66:	eba3 0308 	sub.w	r3, r3, r8
 800fd6a:	7561      	strb	r1, [r4, #21]
 800fd6c:	60a2      	str	r2, [r4, #8]
 800fd6e:	6123      	str	r3, [r4, #16]
 800fd70:	f080 0001 	eor.w	r0, r0, #1
 800fd74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd78:	2104      	movs	r1, #4
 800fd7a:	4620      	mov	r0, r4
 800fd7c:	f000 fb88 	bl	8010490 <ucdr_check_final_buffer_behavior>
 800fd80:	b1a8      	cbz	r0, 800fdae <ucdr_deserialize_endian_float+0xce>
 800fd82:	2e01      	cmp	r6, #1
 800fd84:	68a3      	ldr	r3, [r4, #8]
 800fd86:	d017      	beq.n	800fdb8 <ucdr_deserialize_endian_float+0xd8>
 800fd88:	78db      	ldrb	r3, [r3, #3]
 800fd8a:	702b      	strb	r3, [r5, #0]
 800fd8c:	68a3      	ldr	r3, [r4, #8]
 800fd8e:	789b      	ldrb	r3, [r3, #2]
 800fd90:	706b      	strb	r3, [r5, #1]
 800fd92:	68a3      	ldr	r3, [r4, #8]
 800fd94:	785b      	ldrb	r3, [r3, #1]
 800fd96:	70ab      	strb	r3, [r5, #2]
 800fd98:	68a3      	ldr	r3, [r4, #8]
 800fd9a:	781b      	ldrb	r3, [r3, #0]
 800fd9c:	70eb      	strb	r3, [r5, #3]
 800fd9e:	68a2      	ldr	r2, [r4, #8]
 800fda0:	6923      	ldr	r3, [r4, #16]
 800fda2:	3204      	adds	r2, #4
 800fda4:	3304      	adds	r3, #4
 800fda6:	2104      	movs	r1, #4
 800fda8:	60a2      	str	r2, [r4, #8]
 800fdaa:	6123      	str	r3, [r4, #16]
 800fdac:	7561      	strb	r1, [r4, #21]
 800fdae:	7da0      	ldrb	r0, [r4, #22]
 800fdb0:	f080 0001 	eor.w	r0, r0, #1
 800fdb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fdb8:	681b      	ldr	r3, [r3, #0]
 800fdba:	602b      	str	r3, [r5, #0]
 800fdbc:	e7ef      	b.n	800fd9e <ucdr_deserialize_endian_float+0xbe>
 800fdbe:	68a2      	ldr	r2, [r4, #8]
 800fdc0:	6923      	ldr	r3, [r4, #16]
 800fdc2:	7da0      	ldrb	r0, [r4, #22]
 800fdc4:	f884 9015 	strb.w	r9, [r4, #21]
 800fdc8:	eba2 0208 	sub.w	r2, r2, r8
 800fdcc:	eba3 0308 	sub.w	r3, r3, r8
 800fdd0:	60a2      	str	r2, [r4, #8]
 800fdd2:	6123      	str	r3, [r4, #16]
 800fdd4:	f080 0001 	eor.w	r0, r0, #1
 800fdd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fddc:	68a3      	ldr	r3, [r4, #8]
 800fdde:	789b      	ldrb	r3, [r3, #2]
 800fde0:	706b      	strb	r3, [r5, #1]
 800fde2:	1cab      	adds	r3, r5, #2
 800fde4:	68a2      	ldr	r2, [r4, #8]
 800fde6:	7852      	ldrb	r2, [r2, #1]
 800fde8:	f803 2b01 	strb.w	r2, [r3], #1
 800fdec:	68a2      	ldr	r2, [r4, #8]
 800fdee:	7812      	ldrb	r2, [r2, #0]
 800fdf0:	701a      	strb	r2, [r3, #0]
 800fdf2:	e7b2      	b.n	800fd5a <ucdr_deserialize_endian_float+0x7a>
 800fdf4:	4639      	mov	r1, r7
 800fdf6:	4642      	mov	r2, r8
 800fdf8:	4628      	mov	r0, r5
 800fdfa:	f00b fb54 	bl	801b4a6 <memcpy>
 800fdfe:	68a1      	ldr	r1, [r4, #8]
 800fe00:	4652      	mov	r2, sl
 800fe02:	eb05 0008 	add.w	r0, r5, r8
 800fe06:	f00b fb4e 	bl	801b4a6 <memcpy>
 800fe0a:	e7a6      	b.n	800fd5a <ucdr_deserialize_endian_float+0x7a>

0800fe0c <ucdr_serialize_double>:
 800fe0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe10:	2108      	movs	r1, #8
 800fe12:	b082      	sub	sp, #8
 800fe14:	4604      	mov	r4, r0
 800fe16:	ed8d 0b00 	vstr	d0, [sp]
 800fe1a:	f000 fb8d 	bl	8010538 <ucdr_buffer_alignment>
 800fe1e:	4601      	mov	r1, r0
 800fe20:	4620      	mov	r0, r4
 800fe22:	7d67      	ldrb	r7, [r4, #21]
 800fe24:	f000 fbcc 	bl	80105c0 <ucdr_advance_buffer>
 800fe28:	2108      	movs	r1, #8
 800fe2a:	4620      	mov	r0, r4
 800fe2c:	f000 fb24 	bl	8010478 <ucdr_check_buffer_available_for>
 800fe30:	2800      	cmp	r0, #0
 800fe32:	d14e      	bne.n	800fed2 <ucdr_serialize_double+0xc6>
 800fe34:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800fe38:	42ab      	cmp	r3, r5
 800fe3a:	d945      	bls.n	800fec8 <ucdr_serialize_double+0xbc>
 800fe3c:	1b5e      	subs	r6, r3, r5
 800fe3e:	60a3      	str	r3, [r4, #8]
 800fe40:	6923      	ldr	r3, [r4, #16]
 800fe42:	f1c6 0808 	rsb	r8, r6, #8
 800fe46:	4433      	add	r3, r6
 800fe48:	6123      	str	r3, [r4, #16]
 800fe4a:	4641      	mov	r1, r8
 800fe4c:	4620      	mov	r0, r4
 800fe4e:	f000 fb1f 	bl	8010490 <ucdr_check_final_buffer_behavior>
 800fe52:	2800      	cmp	r0, #0
 800fe54:	d074      	beq.n	800ff40 <ucdr_serialize_double+0x134>
 800fe56:	7d23      	ldrb	r3, [r4, #20]
 800fe58:	2b01      	cmp	r3, #1
 800fe5a:	f000 809b 	beq.w	800ff94 <ucdr_serialize_double+0x188>
 800fe5e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800fe62:	702b      	strb	r3, [r5, #0]
 800fe64:	2e00      	cmp	r6, #0
 800fe66:	d078      	beq.n	800ff5a <ucdr_serialize_double+0x14e>
 800fe68:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800fe6c:	706b      	strb	r3, [r5, #1]
 800fe6e:	2e01      	cmp	r6, #1
 800fe70:	d077      	beq.n	800ff62 <ucdr_serialize_double+0x156>
 800fe72:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800fe76:	70ab      	strb	r3, [r5, #2]
 800fe78:	2e02      	cmp	r6, #2
 800fe7a:	d076      	beq.n	800ff6a <ucdr_serialize_double+0x15e>
 800fe7c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800fe80:	70eb      	strb	r3, [r5, #3]
 800fe82:	2e03      	cmp	r6, #3
 800fe84:	d075      	beq.n	800ff72 <ucdr_serialize_double+0x166>
 800fe86:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800fe8a:	712b      	strb	r3, [r5, #4]
 800fe8c:	2e04      	cmp	r6, #4
 800fe8e:	d074      	beq.n	800ff7a <ucdr_serialize_double+0x16e>
 800fe90:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800fe94:	716b      	strb	r3, [r5, #5]
 800fe96:	2e05      	cmp	r6, #5
 800fe98:	d073      	beq.n	800ff82 <ucdr_serialize_double+0x176>
 800fe9a:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800fe9e:	71ab      	strb	r3, [r5, #6]
 800fea0:	2e06      	cmp	r6, #6
 800fea2:	d072      	beq.n	800ff8a <ucdr_serialize_double+0x17e>
 800fea4:	f89d 3000 	ldrb.w	r3, [sp]
 800fea8:	71eb      	strb	r3, [r5, #7]
 800feaa:	6923      	ldr	r3, [r4, #16]
 800feac:	68a2      	ldr	r2, [r4, #8]
 800feae:	7da0      	ldrb	r0, [r4, #22]
 800feb0:	3308      	adds	r3, #8
 800feb2:	1b9e      	subs	r6, r3, r6
 800feb4:	4442      	add	r2, r8
 800feb6:	2308      	movs	r3, #8
 800feb8:	f080 0001 	eor.w	r0, r0, #1
 800febc:	60a2      	str	r2, [r4, #8]
 800febe:	6126      	str	r6, [r4, #16]
 800fec0:	7563      	strb	r3, [r4, #21]
 800fec2:	b002      	add	sp, #8
 800fec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fec8:	2108      	movs	r1, #8
 800feca:	4620      	mov	r0, r4
 800fecc:	f000 fae0 	bl	8010490 <ucdr_check_final_buffer_behavior>
 800fed0:	b350      	cbz	r0, 800ff28 <ucdr_serialize_double+0x11c>
 800fed2:	7d23      	ldrb	r3, [r4, #20]
 800fed4:	2b01      	cmp	r3, #1
 800fed6:	d02d      	beq.n	800ff34 <ucdr_serialize_double+0x128>
 800fed8:	68a3      	ldr	r3, [r4, #8]
 800feda:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800fede:	701a      	strb	r2, [r3, #0]
 800fee0:	68a3      	ldr	r3, [r4, #8]
 800fee2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800fee6:	705a      	strb	r2, [r3, #1]
 800fee8:	68a3      	ldr	r3, [r4, #8]
 800feea:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800feee:	709a      	strb	r2, [r3, #2]
 800fef0:	68a3      	ldr	r3, [r4, #8]
 800fef2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800fef6:	70da      	strb	r2, [r3, #3]
 800fef8:	68a3      	ldr	r3, [r4, #8]
 800fefa:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800fefe:	711a      	strb	r2, [r3, #4]
 800ff00:	68a3      	ldr	r3, [r4, #8]
 800ff02:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800ff06:	715a      	strb	r2, [r3, #5]
 800ff08:	68a3      	ldr	r3, [r4, #8]
 800ff0a:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800ff0e:	719a      	strb	r2, [r3, #6]
 800ff10:	68a3      	ldr	r3, [r4, #8]
 800ff12:	f89d 2000 	ldrb.w	r2, [sp]
 800ff16:	71da      	strb	r2, [r3, #7]
 800ff18:	68a2      	ldr	r2, [r4, #8]
 800ff1a:	6923      	ldr	r3, [r4, #16]
 800ff1c:	3208      	adds	r2, #8
 800ff1e:	3308      	adds	r3, #8
 800ff20:	2108      	movs	r1, #8
 800ff22:	60a2      	str	r2, [r4, #8]
 800ff24:	6123      	str	r3, [r4, #16]
 800ff26:	7561      	strb	r1, [r4, #21]
 800ff28:	7da0      	ldrb	r0, [r4, #22]
 800ff2a:	f080 0001 	eor.w	r0, r0, #1
 800ff2e:	b002      	add	sp, #8
 800ff30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff34:	466b      	mov	r3, sp
 800ff36:	cb03      	ldmia	r3!, {r0, r1}
 800ff38:	68a3      	ldr	r3, [r4, #8]
 800ff3a:	6018      	str	r0, [r3, #0]
 800ff3c:	6059      	str	r1, [r3, #4]
 800ff3e:	e7eb      	b.n	800ff18 <ucdr_serialize_double+0x10c>
 800ff40:	68a2      	ldr	r2, [r4, #8]
 800ff42:	6923      	ldr	r3, [r4, #16]
 800ff44:	7da0      	ldrb	r0, [r4, #22]
 800ff46:	7567      	strb	r7, [r4, #21]
 800ff48:	1b92      	subs	r2, r2, r6
 800ff4a:	1b9b      	subs	r3, r3, r6
 800ff4c:	f080 0001 	eor.w	r0, r0, #1
 800ff50:	60a2      	str	r2, [r4, #8]
 800ff52:	6123      	str	r3, [r4, #16]
 800ff54:	b002      	add	sp, #8
 800ff56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff5a:	68a3      	ldr	r3, [r4, #8]
 800ff5c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ff60:	701a      	strb	r2, [r3, #0]
 800ff62:	68a3      	ldr	r3, [r4, #8]
 800ff64:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ff68:	701a      	strb	r2, [r3, #0]
 800ff6a:	68a3      	ldr	r3, [r4, #8]
 800ff6c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ff70:	701a      	strb	r2, [r3, #0]
 800ff72:	68a3      	ldr	r3, [r4, #8]
 800ff74:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800ff78:	701a      	strb	r2, [r3, #0]
 800ff7a:	68a3      	ldr	r3, [r4, #8]
 800ff7c:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800ff80:	701a      	strb	r2, [r3, #0]
 800ff82:	68a3      	ldr	r3, [r4, #8]
 800ff84:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800ff88:	701a      	strb	r2, [r3, #0]
 800ff8a:	68a3      	ldr	r3, [r4, #8]
 800ff8c:	f89d 2000 	ldrb.w	r2, [sp]
 800ff90:	701a      	strb	r2, [r3, #0]
 800ff92:	e78a      	b.n	800feaa <ucdr_serialize_double+0x9e>
 800ff94:	4628      	mov	r0, r5
 800ff96:	466d      	mov	r5, sp
 800ff98:	4629      	mov	r1, r5
 800ff9a:	4632      	mov	r2, r6
 800ff9c:	f00b fa83 	bl	801b4a6 <memcpy>
 800ffa0:	68a0      	ldr	r0, [r4, #8]
 800ffa2:	4642      	mov	r2, r8
 800ffa4:	19a9      	adds	r1, r5, r6
 800ffa6:	f00b fa7e 	bl	801b4a6 <memcpy>
 800ffaa:	e77e      	b.n	800feaa <ucdr_serialize_double+0x9e>

0800ffac <ucdr_serialize_endian_double>:
 800ffac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ffb0:	460e      	mov	r6, r1
 800ffb2:	b083      	sub	sp, #12
 800ffb4:	2108      	movs	r1, #8
 800ffb6:	4604      	mov	r4, r0
 800ffb8:	ed8d 0b00 	vstr	d0, [sp]
 800ffbc:	f000 fabc 	bl	8010538 <ucdr_buffer_alignment>
 800ffc0:	4601      	mov	r1, r0
 800ffc2:	4620      	mov	r0, r4
 800ffc4:	f894 8015 	ldrb.w	r8, [r4, #21]
 800ffc8:	f000 fafa 	bl	80105c0 <ucdr_advance_buffer>
 800ffcc:	2108      	movs	r1, #8
 800ffce:	4620      	mov	r0, r4
 800ffd0:	f000 fa52 	bl	8010478 <ucdr_check_buffer_available_for>
 800ffd4:	2800      	cmp	r0, #0
 800ffd6:	d14d      	bne.n	8010074 <ucdr_serialize_endian_double+0xc8>
 800ffd8:	e9d4 5701 	ldrd	r5, r7, [r4, #4]
 800ffdc:	42bd      	cmp	r5, r7
 800ffde:	d944      	bls.n	801006a <ucdr_serialize_endian_double+0xbe>
 800ffe0:	6923      	ldr	r3, [r4, #16]
 800ffe2:	60a5      	str	r5, [r4, #8]
 800ffe4:	1bed      	subs	r5, r5, r7
 800ffe6:	442b      	add	r3, r5
 800ffe8:	f1c5 0908 	rsb	r9, r5, #8
 800ffec:	6123      	str	r3, [r4, #16]
 800ffee:	4649      	mov	r1, r9
 800fff0:	4620      	mov	r0, r4
 800fff2:	f000 fa4d 	bl	8010490 <ucdr_check_final_buffer_behavior>
 800fff6:	2800      	cmp	r0, #0
 800fff8:	d072      	beq.n	80100e0 <ucdr_serialize_endian_double+0x134>
 800fffa:	2e01      	cmp	r6, #1
 800fffc:	f000 809b 	beq.w	8010136 <ucdr_serialize_endian_double+0x18a>
 8010000:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010004:	703b      	strb	r3, [r7, #0]
 8010006:	2d00      	cmp	r5, #0
 8010008:	d078      	beq.n	80100fc <ucdr_serialize_endian_double+0x150>
 801000a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801000e:	707b      	strb	r3, [r7, #1]
 8010010:	2d01      	cmp	r5, #1
 8010012:	d077      	beq.n	8010104 <ucdr_serialize_endian_double+0x158>
 8010014:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8010018:	70bb      	strb	r3, [r7, #2]
 801001a:	2d02      	cmp	r5, #2
 801001c:	d076      	beq.n	801010c <ucdr_serialize_endian_double+0x160>
 801001e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8010022:	70fb      	strb	r3, [r7, #3]
 8010024:	2d03      	cmp	r5, #3
 8010026:	d075      	beq.n	8010114 <ucdr_serialize_endian_double+0x168>
 8010028:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801002c:	713b      	strb	r3, [r7, #4]
 801002e:	2d04      	cmp	r5, #4
 8010030:	d074      	beq.n	801011c <ucdr_serialize_endian_double+0x170>
 8010032:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8010036:	717b      	strb	r3, [r7, #5]
 8010038:	2d05      	cmp	r5, #5
 801003a:	d073      	beq.n	8010124 <ucdr_serialize_endian_double+0x178>
 801003c:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8010040:	71bb      	strb	r3, [r7, #6]
 8010042:	2d06      	cmp	r5, #6
 8010044:	d072      	beq.n	801012c <ucdr_serialize_endian_double+0x180>
 8010046:	f89d 3000 	ldrb.w	r3, [sp]
 801004a:	71fb      	strb	r3, [r7, #7]
 801004c:	6923      	ldr	r3, [r4, #16]
 801004e:	68a2      	ldr	r2, [r4, #8]
 8010050:	7da0      	ldrb	r0, [r4, #22]
 8010052:	3308      	adds	r3, #8
 8010054:	1b5d      	subs	r5, r3, r5
 8010056:	444a      	add	r2, r9
 8010058:	2308      	movs	r3, #8
 801005a:	f080 0001 	eor.w	r0, r0, #1
 801005e:	60a2      	str	r2, [r4, #8]
 8010060:	6125      	str	r5, [r4, #16]
 8010062:	7563      	strb	r3, [r4, #21]
 8010064:	b003      	add	sp, #12
 8010066:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801006a:	2108      	movs	r1, #8
 801006c:	4620      	mov	r0, r4
 801006e:	f000 fa0f 	bl	8010490 <ucdr_check_final_buffer_behavior>
 8010072:	b348      	cbz	r0, 80100c8 <ucdr_serialize_endian_double+0x11c>
 8010074:	2e01      	cmp	r6, #1
 8010076:	d02d      	beq.n	80100d4 <ucdr_serialize_endian_double+0x128>
 8010078:	68a3      	ldr	r3, [r4, #8]
 801007a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801007e:	701a      	strb	r2, [r3, #0]
 8010080:	68a3      	ldr	r3, [r4, #8]
 8010082:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010086:	705a      	strb	r2, [r3, #1]
 8010088:	68a3      	ldr	r3, [r4, #8]
 801008a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801008e:	709a      	strb	r2, [r3, #2]
 8010090:	68a3      	ldr	r3, [r4, #8]
 8010092:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8010096:	70da      	strb	r2, [r3, #3]
 8010098:	68a3      	ldr	r3, [r4, #8]
 801009a:	f89d 2003 	ldrb.w	r2, [sp, #3]
 801009e:	711a      	strb	r2, [r3, #4]
 80100a0:	68a3      	ldr	r3, [r4, #8]
 80100a2:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80100a6:	715a      	strb	r2, [r3, #5]
 80100a8:	68a3      	ldr	r3, [r4, #8]
 80100aa:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80100ae:	719a      	strb	r2, [r3, #6]
 80100b0:	68a3      	ldr	r3, [r4, #8]
 80100b2:	f89d 2000 	ldrb.w	r2, [sp]
 80100b6:	71da      	strb	r2, [r3, #7]
 80100b8:	68a2      	ldr	r2, [r4, #8]
 80100ba:	6923      	ldr	r3, [r4, #16]
 80100bc:	3208      	adds	r2, #8
 80100be:	3308      	adds	r3, #8
 80100c0:	2108      	movs	r1, #8
 80100c2:	60a2      	str	r2, [r4, #8]
 80100c4:	6123      	str	r3, [r4, #16]
 80100c6:	7561      	strb	r1, [r4, #21]
 80100c8:	7da0      	ldrb	r0, [r4, #22]
 80100ca:	f080 0001 	eor.w	r0, r0, #1
 80100ce:	b003      	add	sp, #12
 80100d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80100d4:	466b      	mov	r3, sp
 80100d6:	cb03      	ldmia	r3!, {r0, r1}
 80100d8:	68a3      	ldr	r3, [r4, #8]
 80100da:	6018      	str	r0, [r3, #0]
 80100dc:	6059      	str	r1, [r3, #4]
 80100de:	e7eb      	b.n	80100b8 <ucdr_serialize_endian_double+0x10c>
 80100e0:	68a2      	ldr	r2, [r4, #8]
 80100e2:	6923      	ldr	r3, [r4, #16]
 80100e4:	7da0      	ldrb	r0, [r4, #22]
 80100e6:	f884 8015 	strb.w	r8, [r4, #21]
 80100ea:	1b52      	subs	r2, r2, r5
 80100ec:	1b5b      	subs	r3, r3, r5
 80100ee:	f080 0001 	eor.w	r0, r0, #1
 80100f2:	60a2      	str	r2, [r4, #8]
 80100f4:	6123      	str	r3, [r4, #16]
 80100f6:	b003      	add	sp, #12
 80100f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80100fc:	68a3      	ldr	r3, [r4, #8]
 80100fe:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010102:	701a      	strb	r2, [r3, #0]
 8010104:	68a3      	ldr	r3, [r4, #8]
 8010106:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801010a:	701a      	strb	r2, [r3, #0]
 801010c:	68a3      	ldr	r3, [r4, #8]
 801010e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8010112:	701a      	strb	r2, [r3, #0]
 8010114:	68a3      	ldr	r3, [r4, #8]
 8010116:	f89d 2003 	ldrb.w	r2, [sp, #3]
 801011a:	701a      	strb	r2, [r3, #0]
 801011c:	68a3      	ldr	r3, [r4, #8]
 801011e:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8010122:	701a      	strb	r2, [r3, #0]
 8010124:	68a3      	ldr	r3, [r4, #8]
 8010126:	f89d 2001 	ldrb.w	r2, [sp, #1]
 801012a:	701a      	strb	r2, [r3, #0]
 801012c:	68a3      	ldr	r3, [r4, #8]
 801012e:	f89d 2000 	ldrb.w	r2, [sp]
 8010132:	701a      	strb	r2, [r3, #0]
 8010134:	e78a      	b.n	801004c <ucdr_serialize_endian_double+0xa0>
 8010136:	466e      	mov	r6, sp
 8010138:	4631      	mov	r1, r6
 801013a:	462a      	mov	r2, r5
 801013c:	4638      	mov	r0, r7
 801013e:	f00b f9b2 	bl	801b4a6 <memcpy>
 8010142:	68a0      	ldr	r0, [r4, #8]
 8010144:	464a      	mov	r2, r9
 8010146:	1971      	adds	r1, r6, r5
 8010148:	f00b f9ad 	bl	801b4a6 <memcpy>
 801014c:	e77e      	b.n	801004c <ucdr_serialize_endian_double+0xa0>
 801014e:	bf00      	nop

08010150 <ucdr_deserialize_double>:
 8010150:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010154:	460d      	mov	r5, r1
 8010156:	2108      	movs	r1, #8
 8010158:	4604      	mov	r4, r0
 801015a:	f000 f9ed 	bl	8010538 <ucdr_buffer_alignment>
 801015e:	4601      	mov	r1, r0
 8010160:	4620      	mov	r0, r4
 8010162:	f894 9015 	ldrb.w	r9, [r4, #21]
 8010166:	f000 fa2b 	bl	80105c0 <ucdr_advance_buffer>
 801016a:	2108      	movs	r1, #8
 801016c:	4620      	mov	r0, r4
 801016e:	f000 f983 	bl	8010478 <ucdr_check_buffer_available_for>
 8010172:	2800      	cmp	r0, #0
 8010174:	d151      	bne.n	801021a <ucdr_deserialize_double+0xca>
 8010176:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 801017a:	42be      	cmp	r6, r7
 801017c:	d948      	bls.n	8010210 <ucdr_deserialize_double+0xc0>
 801017e:	6923      	ldr	r3, [r4, #16]
 8010180:	60a6      	str	r6, [r4, #8]
 8010182:	1bf6      	subs	r6, r6, r7
 8010184:	4433      	add	r3, r6
 8010186:	f1c6 0808 	rsb	r8, r6, #8
 801018a:	6123      	str	r3, [r4, #16]
 801018c:	4641      	mov	r1, r8
 801018e:	4620      	mov	r0, r4
 8010190:	f000 f97e 	bl	8010490 <ucdr_check_final_buffer_behavior>
 8010194:	2800      	cmp	r0, #0
 8010196:	d06d      	beq.n	8010274 <ucdr_deserialize_double+0x124>
 8010198:	7d23      	ldrb	r3, [r4, #20]
 801019a:	2b01      	cmp	r3, #1
 801019c:	f000 8093 	beq.w	80102c6 <ucdr_deserialize_double+0x176>
 80101a0:	79fb      	ldrb	r3, [r7, #7]
 80101a2:	702b      	strb	r3, [r5, #0]
 80101a4:	2e00      	cmp	r6, #0
 80101a6:	d072      	beq.n	801028e <ucdr_deserialize_double+0x13e>
 80101a8:	79bb      	ldrb	r3, [r7, #6]
 80101aa:	706b      	strb	r3, [r5, #1]
 80101ac:	2e01      	cmp	r6, #1
 80101ae:	f105 0302 	add.w	r3, r5, #2
 80101b2:	d070      	beq.n	8010296 <ucdr_deserialize_double+0x146>
 80101b4:	797b      	ldrb	r3, [r7, #5]
 80101b6:	70ab      	strb	r3, [r5, #2]
 80101b8:	2e02      	cmp	r6, #2
 80101ba:	f105 0303 	add.w	r3, r5, #3
 80101be:	d06e      	beq.n	801029e <ucdr_deserialize_double+0x14e>
 80101c0:	793b      	ldrb	r3, [r7, #4]
 80101c2:	70eb      	strb	r3, [r5, #3]
 80101c4:	2e03      	cmp	r6, #3
 80101c6:	f105 0304 	add.w	r3, r5, #4
 80101ca:	d06c      	beq.n	80102a6 <ucdr_deserialize_double+0x156>
 80101cc:	78fb      	ldrb	r3, [r7, #3]
 80101ce:	712b      	strb	r3, [r5, #4]
 80101d0:	2e04      	cmp	r6, #4
 80101d2:	f105 0305 	add.w	r3, r5, #5
 80101d6:	d06a      	beq.n	80102ae <ucdr_deserialize_double+0x15e>
 80101d8:	78bb      	ldrb	r3, [r7, #2]
 80101da:	716b      	strb	r3, [r5, #5]
 80101dc:	2e05      	cmp	r6, #5
 80101de:	f105 0306 	add.w	r3, r5, #6
 80101e2:	d068      	beq.n	80102b6 <ucdr_deserialize_double+0x166>
 80101e4:	787b      	ldrb	r3, [r7, #1]
 80101e6:	71ab      	strb	r3, [r5, #6]
 80101e8:	2e06      	cmp	r6, #6
 80101ea:	f105 0307 	add.w	r3, r5, #7
 80101ee:	d066      	beq.n	80102be <ucdr_deserialize_double+0x16e>
 80101f0:	783b      	ldrb	r3, [r7, #0]
 80101f2:	71eb      	strb	r3, [r5, #7]
 80101f4:	6923      	ldr	r3, [r4, #16]
 80101f6:	68a2      	ldr	r2, [r4, #8]
 80101f8:	7da0      	ldrb	r0, [r4, #22]
 80101fa:	3308      	adds	r3, #8
 80101fc:	1b9e      	subs	r6, r3, r6
 80101fe:	2308      	movs	r3, #8
 8010200:	4442      	add	r2, r8
 8010202:	7563      	strb	r3, [r4, #21]
 8010204:	60a2      	str	r2, [r4, #8]
 8010206:	6126      	str	r6, [r4, #16]
 8010208:	f080 0001 	eor.w	r0, r0, #1
 801020c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010210:	2108      	movs	r1, #8
 8010212:	4620      	mov	r0, r4
 8010214:	f000 f93c 	bl	8010490 <ucdr_check_final_buffer_behavior>
 8010218:	b310      	cbz	r0, 8010260 <ucdr_deserialize_double+0x110>
 801021a:	7d23      	ldrb	r3, [r4, #20]
 801021c:	2b01      	cmp	r3, #1
 801021e:	68a3      	ldr	r3, [r4, #8]
 8010220:	d023      	beq.n	801026a <ucdr_deserialize_double+0x11a>
 8010222:	79db      	ldrb	r3, [r3, #7]
 8010224:	702b      	strb	r3, [r5, #0]
 8010226:	68a3      	ldr	r3, [r4, #8]
 8010228:	799b      	ldrb	r3, [r3, #6]
 801022a:	706b      	strb	r3, [r5, #1]
 801022c:	68a3      	ldr	r3, [r4, #8]
 801022e:	795b      	ldrb	r3, [r3, #5]
 8010230:	70ab      	strb	r3, [r5, #2]
 8010232:	68a3      	ldr	r3, [r4, #8]
 8010234:	791b      	ldrb	r3, [r3, #4]
 8010236:	70eb      	strb	r3, [r5, #3]
 8010238:	68a3      	ldr	r3, [r4, #8]
 801023a:	78db      	ldrb	r3, [r3, #3]
 801023c:	712b      	strb	r3, [r5, #4]
 801023e:	68a3      	ldr	r3, [r4, #8]
 8010240:	789b      	ldrb	r3, [r3, #2]
 8010242:	716b      	strb	r3, [r5, #5]
 8010244:	68a3      	ldr	r3, [r4, #8]
 8010246:	785b      	ldrb	r3, [r3, #1]
 8010248:	71ab      	strb	r3, [r5, #6]
 801024a:	68a3      	ldr	r3, [r4, #8]
 801024c:	781b      	ldrb	r3, [r3, #0]
 801024e:	71eb      	strb	r3, [r5, #7]
 8010250:	68a2      	ldr	r2, [r4, #8]
 8010252:	6923      	ldr	r3, [r4, #16]
 8010254:	3208      	adds	r2, #8
 8010256:	3308      	adds	r3, #8
 8010258:	2108      	movs	r1, #8
 801025a:	60a2      	str	r2, [r4, #8]
 801025c:	6123      	str	r3, [r4, #16]
 801025e:	7561      	strb	r1, [r4, #21]
 8010260:	7da0      	ldrb	r0, [r4, #22]
 8010262:	f080 0001 	eor.w	r0, r0, #1
 8010266:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801026a:	681a      	ldr	r2, [r3, #0]
 801026c:	685b      	ldr	r3, [r3, #4]
 801026e:	606b      	str	r3, [r5, #4]
 8010270:	602a      	str	r2, [r5, #0]
 8010272:	e7ed      	b.n	8010250 <ucdr_deserialize_double+0x100>
 8010274:	68a2      	ldr	r2, [r4, #8]
 8010276:	6923      	ldr	r3, [r4, #16]
 8010278:	7da0      	ldrb	r0, [r4, #22]
 801027a:	f884 9015 	strb.w	r9, [r4, #21]
 801027e:	1b92      	subs	r2, r2, r6
 8010280:	1b9b      	subs	r3, r3, r6
 8010282:	60a2      	str	r2, [r4, #8]
 8010284:	6123      	str	r3, [r4, #16]
 8010286:	f080 0001 	eor.w	r0, r0, #1
 801028a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801028e:	68a3      	ldr	r3, [r4, #8]
 8010290:	799b      	ldrb	r3, [r3, #6]
 8010292:	706b      	strb	r3, [r5, #1]
 8010294:	1cab      	adds	r3, r5, #2
 8010296:	68a2      	ldr	r2, [r4, #8]
 8010298:	7952      	ldrb	r2, [r2, #5]
 801029a:	f803 2b01 	strb.w	r2, [r3], #1
 801029e:	68a2      	ldr	r2, [r4, #8]
 80102a0:	7912      	ldrb	r2, [r2, #4]
 80102a2:	f803 2b01 	strb.w	r2, [r3], #1
 80102a6:	68a2      	ldr	r2, [r4, #8]
 80102a8:	78d2      	ldrb	r2, [r2, #3]
 80102aa:	f803 2b01 	strb.w	r2, [r3], #1
 80102ae:	68a2      	ldr	r2, [r4, #8]
 80102b0:	7892      	ldrb	r2, [r2, #2]
 80102b2:	f803 2b01 	strb.w	r2, [r3], #1
 80102b6:	68a2      	ldr	r2, [r4, #8]
 80102b8:	7852      	ldrb	r2, [r2, #1]
 80102ba:	f803 2b01 	strb.w	r2, [r3], #1
 80102be:	68a2      	ldr	r2, [r4, #8]
 80102c0:	7812      	ldrb	r2, [r2, #0]
 80102c2:	701a      	strb	r2, [r3, #0]
 80102c4:	e796      	b.n	80101f4 <ucdr_deserialize_double+0xa4>
 80102c6:	4639      	mov	r1, r7
 80102c8:	4632      	mov	r2, r6
 80102ca:	4628      	mov	r0, r5
 80102cc:	f00b f8eb 	bl	801b4a6 <memcpy>
 80102d0:	68a1      	ldr	r1, [r4, #8]
 80102d2:	4642      	mov	r2, r8
 80102d4:	19a8      	adds	r0, r5, r6
 80102d6:	f00b f8e6 	bl	801b4a6 <memcpy>
 80102da:	e78b      	b.n	80101f4 <ucdr_deserialize_double+0xa4>

080102dc <ucdr_deserialize_endian_double>:
 80102dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80102e0:	460f      	mov	r7, r1
 80102e2:	2108      	movs	r1, #8
 80102e4:	4604      	mov	r4, r0
 80102e6:	4615      	mov	r5, r2
 80102e8:	f000 f926 	bl	8010538 <ucdr_buffer_alignment>
 80102ec:	4601      	mov	r1, r0
 80102ee:	4620      	mov	r0, r4
 80102f0:	f894 9015 	ldrb.w	r9, [r4, #21]
 80102f4:	f000 f964 	bl	80105c0 <ucdr_advance_buffer>
 80102f8:	2108      	movs	r1, #8
 80102fa:	4620      	mov	r0, r4
 80102fc:	f000 f8bc 	bl	8010478 <ucdr_check_buffer_available_for>
 8010300:	2800      	cmp	r0, #0
 8010302:	d159      	bne.n	80103b8 <ucdr_deserialize_endian_double+0xdc>
 8010304:	e9d4 6801 	ldrd	r6, r8, [r4, #4]
 8010308:	4546      	cmp	r6, r8
 801030a:	d950      	bls.n	80103ae <ucdr_deserialize_endian_double+0xd2>
 801030c:	6923      	ldr	r3, [r4, #16]
 801030e:	60a6      	str	r6, [r4, #8]
 8010310:	eba6 0608 	sub.w	r6, r6, r8
 8010314:	4433      	add	r3, r6
 8010316:	f1c6 0a08 	rsb	sl, r6, #8
 801031a:	6123      	str	r3, [r4, #16]
 801031c:	4651      	mov	r1, sl
 801031e:	4620      	mov	r0, r4
 8010320:	f000 f8b6 	bl	8010490 <ucdr_check_final_buffer_behavior>
 8010324:	2800      	cmp	r0, #0
 8010326:	d073      	beq.n	8010410 <ucdr_deserialize_endian_double+0x134>
 8010328:	2f01      	cmp	r7, #1
 801032a:	f000 809a 	beq.w	8010462 <ucdr_deserialize_endian_double+0x186>
 801032e:	f898 3007 	ldrb.w	r3, [r8, #7]
 8010332:	702b      	strb	r3, [r5, #0]
 8010334:	2e00      	cmp	r6, #0
 8010336:	d078      	beq.n	801042a <ucdr_deserialize_endian_double+0x14e>
 8010338:	f898 3006 	ldrb.w	r3, [r8, #6]
 801033c:	706b      	strb	r3, [r5, #1]
 801033e:	2e01      	cmp	r6, #1
 8010340:	f105 0302 	add.w	r3, r5, #2
 8010344:	d075      	beq.n	8010432 <ucdr_deserialize_endian_double+0x156>
 8010346:	f898 3005 	ldrb.w	r3, [r8, #5]
 801034a:	70ab      	strb	r3, [r5, #2]
 801034c:	2e02      	cmp	r6, #2
 801034e:	f105 0303 	add.w	r3, r5, #3
 8010352:	d072      	beq.n	801043a <ucdr_deserialize_endian_double+0x15e>
 8010354:	f898 3004 	ldrb.w	r3, [r8, #4]
 8010358:	70eb      	strb	r3, [r5, #3]
 801035a:	2e03      	cmp	r6, #3
 801035c:	f105 0304 	add.w	r3, r5, #4
 8010360:	d06f      	beq.n	8010442 <ucdr_deserialize_endian_double+0x166>
 8010362:	f898 3003 	ldrb.w	r3, [r8, #3]
 8010366:	712b      	strb	r3, [r5, #4]
 8010368:	2e04      	cmp	r6, #4
 801036a:	f105 0305 	add.w	r3, r5, #5
 801036e:	d06c      	beq.n	801044a <ucdr_deserialize_endian_double+0x16e>
 8010370:	f898 3002 	ldrb.w	r3, [r8, #2]
 8010374:	716b      	strb	r3, [r5, #5]
 8010376:	2e05      	cmp	r6, #5
 8010378:	f105 0306 	add.w	r3, r5, #6
 801037c:	d069      	beq.n	8010452 <ucdr_deserialize_endian_double+0x176>
 801037e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8010382:	71ab      	strb	r3, [r5, #6]
 8010384:	2e06      	cmp	r6, #6
 8010386:	f105 0307 	add.w	r3, r5, #7
 801038a:	d066      	beq.n	801045a <ucdr_deserialize_endian_double+0x17e>
 801038c:	f898 3000 	ldrb.w	r3, [r8]
 8010390:	71eb      	strb	r3, [r5, #7]
 8010392:	6923      	ldr	r3, [r4, #16]
 8010394:	68a2      	ldr	r2, [r4, #8]
 8010396:	7da0      	ldrb	r0, [r4, #22]
 8010398:	3308      	adds	r3, #8
 801039a:	1b9e      	subs	r6, r3, r6
 801039c:	2308      	movs	r3, #8
 801039e:	4452      	add	r2, sl
 80103a0:	7563      	strb	r3, [r4, #21]
 80103a2:	60a2      	str	r2, [r4, #8]
 80103a4:	6126      	str	r6, [r4, #16]
 80103a6:	f080 0001 	eor.w	r0, r0, #1
 80103aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80103ae:	2108      	movs	r1, #8
 80103b0:	4620      	mov	r0, r4
 80103b2:	f000 f86d 	bl	8010490 <ucdr_check_final_buffer_behavior>
 80103b6:	b308      	cbz	r0, 80103fc <ucdr_deserialize_endian_double+0x120>
 80103b8:	2f01      	cmp	r7, #1
 80103ba:	68a3      	ldr	r3, [r4, #8]
 80103bc:	d023      	beq.n	8010406 <ucdr_deserialize_endian_double+0x12a>
 80103be:	79db      	ldrb	r3, [r3, #7]
 80103c0:	702b      	strb	r3, [r5, #0]
 80103c2:	68a3      	ldr	r3, [r4, #8]
 80103c4:	799b      	ldrb	r3, [r3, #6]
 80103c6:	706b      	strb	r3, [r5, #1]
 80103c8:	68a3      	ldr	r3, [r4, #8]
 80103ca:	795b      	ldrb	r3, [r3, #5]
 80103cc:	70ab      	strb	r3, [r5, #2]
 80103ce:	68a3      	ldr	r3, [r4, #8]
 80103d0:	791b      	ldrb	r3, [r3, #4]
 80103d2:	70eb      	strb	r3, [r5, #3]
 80103d4:	68a3      	ldr	r3, [r4, #8]
 80103d6:	78db      	ldrb	r3, [r3, #3]
 80103d8:	712b      	strb	r3, [r5, #4]
 80103da:	68a3      	ldr	r3, [r4, #8]
 80103dc:	789b      	ldrb	r3, [r3, #2]
 80103de:	716b      	strb	r3, [r5, #5]
 80103e0:	68a3      	ldr	r3, [r4, #8]
 80103e2:	785b      	ldrb	r3, [r3, #1]
 80103e4:	71ab      	strb	r3, [r5, #6]
 80103e6:	68a3      	ldr	r3, [r4, #8]
 80103e8:	781b      	ldrb	r3, [r3, #0]
 80103ea:	71eb      	strb	r3, [r5, #7]
 80103ec:	68a2      	ldr	r2, [r4, #8]
 80103ee:	6923      	ldr	r3, [r4, #16]
 80103f0:	3208      	adds	r2, #8
 80103f2:	3308      	adds	r3, #8
 80103f4:	2108      	movs	r1, #8
 80103f6:	60a2      	str	r2, [r4, #8]
 80103f8:	6123      	str	r3, [r4, #16]
 80103fa:	7561      	strb	r1, [r4, #21]
 80103fc:	7da0      	ldrb	r0, [r4, #22]
 80103fe:	f080 0001 	eor.w	r0, r0, #1
 8010402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010406:	681a      	ldr	r2, [r3, #0]
 8010408:	685b      	ldr	r3, [r3, #4]
 801040a:	606b      	str	r3, [r5, #4]
 801040c:	602a      	str	r2, [r5, #0]
 801040e:	e7ed      	b.n	80103ec <ucdr_deserialize_endian_double+0x110>
 8010410:	68a2      	ldr	r2, [r4, #8]
 8010412:	6923      	ldr	r3, [r4, #16]
 8010414:	7da0      	ldrb	r0, [r4, #22]
 8010416:	f884 9015 	strb.w	r9, [r4, #21]
 801041a:	1b92      	subs	r2, r2, r6
 801041c:	1b9b      	subs	r3, r3, r6
 801041e:	60a2      	str	r2, [r4, #8]
 8010420:	6123      	str	r3, [r4, #16]
 8010422:	f080 0001 	eor.w	r0, r0, #1
 8010426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801042a:	68a3      	ldr	r3, [r4, #8]
 801042c:	799b      	ldrb	r3, [r3, #6]
 801042e:	706b      	strb	r3, [r5, #1]
 8010430:	1cab      	adds	r3, r5, #2
 8010432:	68a2      	ldr	r2, [r4, #8]
 8010434:	7952      	ldrb	r2, [r2, #5]
 8010436:	f803 2b01 	strb.w	r2, [r3], #1
 801043a:	68a2      	ldr	r2, [r4, #8]
 801043c:	7912      	ldrb	r2, [r2, #4]
 801043e:	f803 2b01 	strb.w	r2, [r3], #1
 8010442:	68a2      	ldr	r2, [r4, #8]
 8010444:	78d2      	ldrb	r2, [r2, #3]
 8010446:	f803 2b01 	strb.w	r2, [r3], #1
 801044a:	68a2      	ldr	r2, [r4, #8]
 801044c:	7892      	ldrb	r2, [r2, #2]
 801044e:	f803 2b01 	strb.w	r2, [r3], #1
 8010452:	68a2      	ldr	r2, [r4, #8]
 8010454:	7852      	ldrb	r2, [r2, #1]
 8010456:	f803 2b01 	strb.w	r2, [r3], #1
 801045a:	68a2      	ldr	r2, [r4, #8]
 801045c:	7812      	ldrb	r2, [r2, #0]
 801045e:	701a      	strb	r2, [r3, #0]
 8010460:	e797      	b.n	8010392 <ucdr_deserialize_endian_double+0xb6>
 8010462:	4641      	mov	r1, r8
 8010464:	4632      	mov	r2, r6
 8010466:	4628      	mov	r0, r5
 8010468:	f00b f81d 	bl	801b4a6 <memcpy>
 801046c:	68a1      	ldr	r1, [r4, #8]
 801046e:	4652      	mov	r2, sl
 8010470:	19a8      	adds	r0, r5, r6
 8010472:	f00b f818 	bl	801b4a6 <memcpy>
 8010476:	e78c      	b.n	8010392 <ucdr_deserialize_endian_double+0xb6>

08010478 <ucdr_check_buffer_available_for>:
 8010478:	7d83      	ldrb	r3, [r0, #22]
 801047a:	b93b      	cbnz	r3, 801048c <ucdr_check_buffer_available_for+0x14>
 801047c:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 8010480:	4419      	add	r1, r3
 8010482:	4288      	cmp	r0, r1
 8010484:	bf34      	ite	cc
 8010486:	2000      	movcc	r0, #0
 8010488:	2001      	movcs	r0, #1
 801048a:	4770      	bx	lr
 801048c:	2000      	movs	r0, #0
 801048e:	4770      	bx	lr

08010490 <ucdr_check_final_buffer_behavior>:
 8010490:	7d83      	ldrb	r3, [r0, #22]
 8010492:	b943      	cbnz	r3, 80104a6 <ucdr_check_final_buffer_behavior+0x16>
 8010494:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 8010498:	4291      	cmp	r1, r2
 801049a:	b510      	push	{r4, lr}
 801049c:	4604      	mov	r4, r0
 801049e:	d205      	bcs.n	80104ac <ucdr_check_final_buffer_behavior+0x1c>
 80104a0:	2301      	movs	r3, #1
 80104a2:	4618      	mov	r0, r3
 80104a4:	bd10      	pop	{r4, pc}
 80104a6:	2300      	movs	r3, #0
 80104a8:	4618      	mov	r0, r3
 80104aa:	4770      	bx	lr
 80104ac:	6982      	ldr	r2, [r0, #24]
 80104ae:	b13a      	cbz	r2, 80104c0 <ucdr_check_final_buffer_behavior+0x30>
 80104b0:	69c1      	ldr	r1, [r0, #28]
 80104b2:	4790      	blx	r2
 80104b4:	f080 0301 	eor.w	r3, r0, #1
 80104b8:	b2db      	uxtb	r3, r3
 80104ba:	75a0      	strb	r0, [r4, #22]
 80104bc:	4618      	mov	r0, r3
 80104be:	bd10      	pop	{r4, pc}
 80104c0:	2001      	movs	r0, #1
 80104c2:	75a0      	strb	r0, [r4, #22]
 80104c4:	e7fa      	b.n	80104bc <ucdr_check_final_buffer_behavior+0x2c>
 80104c6:	bf00      	nop

080104c8 <ucdr_set_on_full_buffer_callback>:
 80104c8:	e9c0 1206 	strd	r1, r2, [r0, #24]
 80104cc:	4770      	bx	lr
 80104ce:	bf00      	nop

080104d0 <ucdr_init_buffer_origin_offset_endian>:
 80104d0:	b410      	push	{r4}
 80104d2:	9c01      	ldr	r4, [sp, #4]
 80104d4:	6001      	str	r1, [r0, #0]
 80104d6:	440a      	add	r2, r1
 80104d8:	6042      	str	r2, [r0, #4]
 80104da:	190a      	adds	r2, r1, r4
 80104dc:	441c      	add	r4, r3
 80104de:	e9c0 3403 	strd	r3, r4, [r0, #12]
 80104e2:	6082      	str	r2, [r0, #8]
 80104e4:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80104e8:	7503      	strb	r3, [r0, #20]
 80104ea:	2200      	movs	r2, #0
 80104ec:	e9c0 2206 	strd	r2, r2, [r0, #24]
 80104f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80104f4:	7542      	strb	r2, [r0, #21]
 80104f6:	7582      	strb	r2, [r0, #22]
 80104f8:	4770      	bx	lr
 80104fa:	bf00      	nop

080104fc <ucdr_init_buffer_origin_offset>:
 80104fc:	b510      	push	{r4, lr}
 80104fe:	b082      	sub	sp, #8
 8010500:	9c04      	ldr	r4, [sp, #16]
 8010502:	9400      	str	r4, [sp, #0]
 8010504:	2401      	movs	r4, #1
 8010506:	9401      	str	r4, [sp, #4]
 8010508:	f7ff ffe2 	bl	80104d0 <ucdr_init_buffer_origin_offset_endian>
 801050c:	b002      	add	sp, #8
 801050e:	bd10      	pop	{r4, pc}

08010510 <ucdr_init_buffer_origin>:
 8010510:	b510      	push	{r4, lr}
 8010512:	b082      	sub	sp, #8
 8010514:	2400      	movs	r4, #0
 8010516:	9400      	str	r4, [sp, #0]
 8010518:	f7ff fff0 	bl	80104fc <ucdr_init_buffer_origin_offset>
 801051c:	b002      	add	sp, #8
 801051e:	bd10      	pop	{r4, pc}

08010520 <ucdr_init_buffer>:
 8010520:	2300      	movs	r3, #0
 8010522:	f7ff bff5 	b.w	8010510 <ucdr_init_buffer_origin>
 8010526:	bf00      	nop

08010528 <ucdr_alignment>:
 8010528:	fbb0 f3f1 	udiv	r3, r0, r1
 801052c:	fb03 0011 	mls	r0, r3, r1, r0
 8010530:	1a08      	subs	r0, r1, r0
 8010532:	3901      	subs	r1, #1
 8010534:	4008      	ands	r0, r1
 8010536:	4770      	bx	lr

08010538 <ucdr_buffer_alignment>:
 8010538:	7d43      	ldrb	r3, [r0, #21]
 801053a:	428b      	cmp	r3, r1
 801053c:	d208      	bcs.n	8010550 <ucdr_buffer_alignment+0x18>
 801053e:	6900      	ldr	r0, [r0, #16]
 8010540:	fbb0 f3f1 	udiv	r3, r0, r1
 8010544:	fb01 0013 	mls	r0, r1, r3, r0
 8010548:	1a08      	subs	r0, r1, r0
 801054a:	3901      	subs	r1, #1
 801054c:	4008      	ands	r0, r1
 801054e:	4770      	bx	lr
 8010550:	2000      	movs	r0, #0
 8010552:	4770      	bx	lr

08010554 <ucdr_align_to>:
 8010554:	b538      	push	{r3, r4, r5, lr}
 8010556:	4604      	mov	r4, r0
 8010558:	460d      	mov	r5, r1
 801055a:	f7ff ffed 	bl	8010538 <ucdr_buffer_alignment>
 801055e:	68a3      	ldr	r3, [r4, #8]
 8010560:	6921      	ldr	r1, [r4, #16]
 8010562:	7565      	strb	r5, [r4, #21]
 8010564:	181a      	adds	r2, r3, r0
 8010566:	6863      	ldr	r3, [r4, #4]
 8010568:	4293      	cmp	r3, r2
 801056a:	4408      	add	r0, r1
 801056c:	bf28      	it	cs
 801056e:	4613      	movcs	r3, r2
 8010570:	6120      	str	r0, [r4, #16]
 8010572:	60a3      	str	r3, [r4, #8]
 8010574:	bd38      	pop	{r3, r4, r5, pc}
 8010576:	bf00      	nop

08010578 <ucdr_buffer_length>:
 8010578:	6882      	ldr	r2, [r0, #8]
 801057a:	6800      	ldr	r0, [r0, #0]
 801057c:	1a10      	subs	r0, r2, r0
 801057e:	4770      	bx	lr

08010580 <ucdr_buffer_remaining>:
 8010580:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 8010584:	1a10      	subs	r0, r2, r0
 8010586:	4770      	bx	lr

08010588 <ucdr_check_final_buffer_behavior_array>:
 8010588:	b538      	push	{r3, r4, r5, lr}
 801058a:	7d83      	ldrb	r3, [r0, #22]
 801058c:	b963      	cbnz	r3, 80105a8 <ucdr_check_final_buffer_behavior_array+0x20>
 801058e:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8010592:	429a      	cmp	r2, r3
 8010594:	4604      	mov	r4, r0
 8010596:	460d      	mov	r5, r1
 8010598:	d308      	bcc.n	80105ac <ucdr_check_final_buffer_behavior_array+0x24>
 801059a:	b139      	cbz	r1, 80105ac <ucdr_check_final_buffer_behavior_array+0x24>
 801059c:	6983      	ldr	r3, [r0, #24]
 801059e:	b163      	cbz	r3, 80105ba <ucdr_check_final_buffer_behavior_array+0x32>
 80105a0:	69c1      	ldr	r1, [r0, #28]
 80105a2:	4798      	blx	r3
 80105a4:	75a0      	strb	r0, [r4, #22]
 80105a6:	b108      	cbz	r0, 80105ac <ucdr_check_final_buffer_behavior_array+0x24>
 80105a8:	2000      	movs	r0, #0
 80105aa:	bd38      	pop	{r3, r4, r5, pc}
 80105ac:	4620      	mov	r0, r4
 80105ae:	f7ff ffe7 	bl	8010580 <ucdr_buffer_remaining>
 80105b2:	42a8      	cmp	r0, r5
 80105b4:	bf28      	it	cs
 80105b6:	4628      	movcs	r0, r5
 80105b8:	bd38      	pop	{r3, r4, r5, pc}
 80105ba:	2301      	movs	r3, #1
 80105bc:	7583      	strb	r3, [r0, #22]
 80105be:	e7f3      	b.n	80105a8 <ucdr_check_final_buffer_behavior_array+0x20>

080105c0 <ucdr_advance_buffer>:
 80105c0:	b538      	push	{r3, r4, r5, lr}
 80105c2:	4604      	mov	r4, r0
 80105c4:	460d      	mov	r5, r1
 80105c6:	f7ff ff57 	bl	8010478 <ucdr_check_buffer_available_for>
 80105ca:	b178      	cbz	r0, 80105ec <ucdr_advance_buffer+0x2c>
 80105cc:	6923      	ldr	r3, [r4, #16]
 80105ce:	68a2      	ldr	r2, [r4, #8]
 80105d0:	442b      	add	r3, r5
 80105d2:	6123      	str	r3, [r4, #16]
 80105d4:	2301      	movs	r3, #1
 80105d6:	442a      	add	r2, r5
 80105d8:	7563      	strb	r3, [r4, #21]
 80105da:	60a2      	str	r2, [r4, #8]
 80105dc:	bd38      	pop	{r3, r4, r5, pc}
 80105de:	68a2      	ldr	r2, [r4, #8]
 80105e0:	6923      	ldr	r3, [r4, #16]
 80105e2:	4402      	add	r2, r0
 80105e4:	4403      	add	r3, r0
 80105e6:	1a2d      	subs	r5, r5, r0
 80105e8:	60a2      	str	r2, [r4, #8]
 80105ea:	6123      	str	r3, [r4, #16]
 80105ec:	4629      	mov	r1, r5
 80105ee:	2201      	movs	r2, #1
 80105f0:	4620      	mov	r0, r4
 80105f2:	f7ff ffc9 	bl	8010588 <ucdr_check_final_buffer_behavior_array>
 80105f6:	2800      	cmp	r0, #0
 80105f8:	d1f1      	bne.n	80105de <ucdr_advance_buffer+0x1e>
 80105fa:	2301      	movs	r3, #1
 80105fc:	7563      	strb	r3, [r4, #21]
 80105fe:	bd38      	pop	{r3, r4, r5, pc}

08010600 <ucdr_serialize_sequence_char>:
 8010600:	b570      	push	{r4, r5, r6, lr}
 8010602:	4615      	mov	r5, r2
 8010604:	460e      	mov	r6, r1
 8010606:	7d01      	ldrb	r1, [r0, #20]
 8010608:	4604      	mov	r4, r0
 801060a:	f7fe fe25 	bl	800f258 <ucdr_serialize_endian_uint32_t>
 801060e:	b90d      	cbnz	r5, 8010614 <ucdr_serialize_sequence_char+0x14>
 8010610:	2001      	movs	r0, #1
 8010612:	bd70      	pop	{r4, r5, r6, pc}
 8010614:	7d21      	ldrb	r1, [r4, #20]
 8010616:	462b      	mov	r3, r5
 8010618:	4632      	mov	r2, r6
 801061a:	4620      	mov	r0, r4
 801061c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010620:	f7fe b812 	b.w	800e648 <ucdr_serialize_endian_array_char>

08010624 <ucdr_deserialize_sequence_char>:
 8010624:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010628:	461d      	mov	r5, r3
 801062a:	4616      	mov	r6, r2
 801062c:	460f      	mov	r7, r1
 801062e:	461a      	mov	r2, r3
 8010630:	7d01      	ldrb	r1, [r0, #20]
 8010632:	4604      	mov	r4, r0
 8010634:	f7fe ff38 	bl	800f4a8 <ucdr_deserialize_endian_uint32_t>
 8010638:	682b      	ldr	r3, [r5, #0]
 801063a:	429e      	cmp	r6, r3
 801063c:	bf3c      	itt	cc
 801063e:	2201      	movcc	r2, #1
 8010640:	75a2      	strbcc	r2, [r4, #22]
 8010642:	b913      	cbnz	r3, 801064a <ucdr_deserialize_sequence_char+0x26>
 8010644:	2001      	movs	r0, #1
 8010646:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801064a:	7d21      	ldrb	r1, [r4, #20]
 801064c:	463a      	mov	r2, r7
 801064e:	4620      	mov	r0, r4
 8010650:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010654:	f7fe b82a 	b.w	800e6ac <ucdr_deserialize_endian_array_char>

08010658 <ucdr_serialize_sequence_uint8_t>:
 8010658:	b570      	push	{r4, r5, r6, lr}
 801065a:	4615      	mov	r5, r2
 801065c:	460e      	mov	r6, r1
 801065e:	7d01      	ldrb	r1, [r0, #20]
 8010660:	4604      	mov	r4, r0
 8010662:	f7fe fdf9 	bl	800f258 <ucdr_serialize_endian_uint32_t>
 8010666:	b90d      	cbnz	r5, 801066c <ucdr_serialize_sequence_uint8_t+0x14>
 8010668:	2001      	movs	r0, #1
 801066a:	bd70      	pop	{r4, r5, r6, pc}
 801066c:	7d21      	ldrb	r1, [r4, #20]
 801066e:	462b      	mov	r3, r5
 8010670:	4632      	mov	r2, r6
 8010672:	4620      	mov	r0, r4
 8010674:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010678:	f7fe b87c 	b.w	800e774 <ucdr_serialize_endian_array_uint8_t>

0801067c <ucdr_deserialize_sequence_uint8_t>:
 801067c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010680:	461d      	mov	r5, r3
 8010682:	4616      	mov	r6, r2
 8010684:	460f      	mov	r7, r1
 8010686:	461a      	mov	r2, r3
 8010688:	7d01      	ldrb	r1, [r0, #20]
 801068a:	4604      	mov	r4, r0
 801068c:	f7fe ff0c 	bl	800f4a8 <ucdr_deserialize_endian_uint32_t>
 8010690:	682b      	ldr	r3, [r5, #0]
 8010692:	429e      	cmp	r6, r3
 8010694:	bf3c      	itt	cc
 8010696:	2201      	movcc	r2, #1
 8010698:	75a2      	strbcc	r2, [r4, #22]
 801069a:	b913      	cbnz	r3, 80106a2 <ucdr_deserialize_sequence_uint8_t+0x26>
 801069c:	2001      	movs	r0, #1
 801069e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80106a2:	7d21      	ldrb	r1, [r4, #20]
 80106a4:	463a      	mov	r2, r7
 80106a6:	4620      	mov	r0, r4
 80106a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80106ac:	f7fe b8c6 	b.w	800e83c <ucdr_deserialize_endian_array_uint8_t>

080106b0 <uxr_buffer_delete_entity>:
 80106b0:	b510      	push	{r4, lr}
 80106b2:	2300      	movs	r3, #0
 80106b4:	b08e      	sub	sp, #56	@ 0x38
 80106b6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80106ba:	2303      	movs	r3, #3
 80106bc:	9300      	str	r3, [sp, #0]
 80106be:	2204      	movs	r2, #4
 80106c0:	ab06      	add	r3, sp, #24
 80106c2:	4604      	mov	r4, r0
 80106c4:	9103      	str	r1, [sp, #12]
 80106c6:	f001 f98d 	bl	80119e4 <uxr_prepare_stream_to_write_submessage>
 80106ca:	b918      	cbnz	r0, 80106d4 <uxr_buffer_delete_entity+0x24>
 80106cc:	4604      	mov	r4, r0
 80106ce:	4620      	mov	r0, r4
 80106d0:	b00e      	add	sp, #56	@ 0x38
 80106d2:	bd10      	pop	{r4, pc}
 80106d4:	9902      	ldr	r1, [sp, #8]
 80106d6:	aa05      	add	r2, sp, #20
 80106d8:	4620      	mov	r0, r4
 80106da:	f001 fab9 	bl	8011c50 <uxr_init_base_object_request>
 80106de:	a905      	add	r1, sp, #20
 80106e0:	4604      	mov	r4, r0
 80106e2:	a806      	add	r0, sp, #24
 80106e4:	f002 fd3e 	bl	8013164 <uxr_serialize_DELETE_Payload>
 80106e8:	4620      	mov	r0, r4
 80106ea:	b00e      	add	sp, #56	@ 0x38
 80106ec:	bd10      	pop	{r4, pc}
 80106ee:	bf00      	nop

080106f0 <uxr_common_create_entity>:
 80106f0:	b510      	push	{r4, lr}
 80106f2:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 80106f6:	b08c      	sub	sp, #48	@ 0x30
 80106f8:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80106fc:	f1bc 0f01 	cmp.w	ip, #1
 8010700:	bf0c      	ite	eq
 8010702:	f003 0201 	andeq.w	r2, r3, #1
 8010706:	2200      	movne	r2, #0
 8010708:	330e      	adds	r3, #14
 801070a:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 801070e:	9101      	str	r1, [sp, #4]
 8010710:	441a      	add	r2, r3
 8010712:	2301      	movs	r3, #1
 8010714:	9300      	str	r3, [sp, #0]
 8010716:	9903      	ldr	r1, [sp, #12]
 8010718:	ab04      	add	r3, sp, #16
 801071a:	b292      	uxth	r2, r2
 801071c:	4604      	mov	r4, r0
 801071e:	f001 f961 	bl	80119e4 <uxr_prepare_stream_to_write_submessage>
 8010722:	b918      	cbnz	r0, 801072c <uxr_common_create_entity+0x3c>
 8010724:	4604      	mov	r4, r0
 8010726:	4620      	mov	r0, r4
 8010728:	b00c      	add	sp, #48	@ 0x30
 801072a:	bd10      	pop	{r4, pc}
 801072c:	9902      	ldr	r1, [sp, #8]
 801072e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8010730:	4620      	mov	r0, r4
 8010732:	f001 fa8d 	bl	8011c50 <uxr_init_base_object_request>
 8010736:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8010738:	4604      	mov	r4, r0
 801073a:	a804      	add	r0, sp, #16
 801073c:	f002 fc6e 	bl	801301c <uxr_serialize_CREATE_Payload>
 8010740:	4620      	mov	r0, r4
 8010742:	b00c      	add	sp, #48	@ 0x30
 8010744:	bd10      	pop	{r4, pc}
 8010746:	bf00      	nop

08010748 <uxr_buffer_create_participant_bin>:
 8010748:	b570      	push	{r4, r5, r6, lr}
 801074a:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 801074e:	ac11      	add	r4, sp, #68	@ 0x44
 8010750:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 8010754:	2303      	movs	r3, #3
 8010756:	e9cd 2102 	strd	r2, r1, [sp, #8]
 801075a:	7223      	strb	r3, [r4, #8]
 801075c:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 801075e:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 8010762:	2201      	movs	r2, #1
 8010764:	2100      	movs	r1, #0
 8010766:	4605      	mov	r5, r0
 8010768:	7122      	strb	r2, [r4, #4]
 801076a:	f88d 1014 	strb.w	r1, [sp, #20]
 801076e:	b1cb      	cbz	r3, 80107a4 <uxr_buffer_create_participant_bin+0x5c>
 8010770:	f88d 201c 	strb.w	r2, [sp, #28]
 8010774:	9308      	str	r3, [sp, #32]
 8010776:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801077a:	a915      	add	r1, sp, #84	@ 0x54
 801077c:	a809      	add	r0, sp, #36	@ 0x24
 801077e:	f7ff fecf 	bl	8010520 <ucdr_init_buffer>
 8010782:	a905      	add	r1, sp, #20
 8010784:	a809      	add	r0, sp, #36	@ 0x24
 8010786:	f001 fff7 	bl	8012778 <uxr_serialize_OBJK_DomainParticipant_Binary>
 801078a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801078c:	9600      	str	r6, [sp, #0]
 801078e:	9401      	str	r4, [sp, #4]
 8010790:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8010794:	60e3      	str	r3, [r4, #12]
 8010796:	4628      	mov	r0, r5
 8010798:	b29b      	uxth	r3, r3
 801079a:	f7ff ffa9 	bl	80106f0 <uxr_common_create_entity>
 801079e:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 80107a2:	bd70      	pop	{r4, r5, r6, pc}
 80107a4:	f88d 301c 	strb.w	r3, [sp, #28]
 80107a8:	e7e5      	b.n	8010776 <uxr_buffer_create_participant_bin+0x2e>
 80107aa:	bf00      	nop

080107ac <uxr_buffer_create_topic_bin>:
 80107ac:	b570      	push	{r4, r5, r6, lr}
 80107ae:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 80107b2:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80107b6:	9105      	str	r1, [sp, #20]
 80107b8:	4605      	mov	r5, r0
 80107ba:	a997      	add	r1, sp, #604	@ 0x25c
 80107bc:	4618      	mov	r0, r3
 80107be:	2302      	movs	r3, #2
 80107c0:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 80107c4:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 80107c8:	f000 f9d0 	bl	8010b6c <uxr_object_id_to_raw>
 80107cc:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 80107ce:	9306      	str	r3, [sp, #24]
 80107d0:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 80107d2:	930a      	str	r3, [sp, #40]	@ 0x28
 80107d4:	2303      	movs	r3, #3
 80107d6:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 80107da:	2301      	movs	r3, #1
 80107dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80107e0:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 80107e4:	a917      	add	r1, sp, #92	@ 0x5c
 80107e6:	2300      	movs	r3, #0
 80107e8:	a80b      	add	r0, sp, #44	@ 0x2c
 80107ea:	f88d 301c 	strb.w	r3, [sp, #28]
 80107ee:	f7ff fe97 	bl	8010520 <ucdr_init_buffer>
 80107f2:	a906      	add	r1, sp, #24
 80107f4:	a80b      	add	r0, sp, #44	@ 0x2c
 80107f6:	f001 ffe1 	bl	80127bc <uxr_serialize_OBJK_Topic_Binary>
 80107fa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80107fc:	9316      	str	r3, [sp, #88]	@ 0x58
 80107fe:	ac13      	add	r4, sp, #76	@ 0x4c
 8010800:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8010804:	9600      	str	r6, [sp, #0]
 8010806:	9401      	str	r4, [sp, #4]
 8010808:	b29b      	uxth	r3, r3
 801080a:	4628      	mov	r0, r5
 801080c:	f7ff ff70 	bl	80106f0 <uxr_common_create_entity>
 8010810:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 8010814:	bd70      	pop	{r4, r5, r6, pc}
 8010816:	bf00      	nop

08010818 <uxr_buffer_create_publisher_bin>:
 8010818:	b5f0      	push	{r4, r5, r6, r7, lr}
 801081a:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 801081e:	4605      	mov	r5, r0
 8010820:	9105      	str	r1, [sp, #20]
 8010822:	4618      	mov	r0, r3
 8010824:	2603      	movs	r6, #3
 8010826:	a992      	add	r1, sp, #584	@ 0x248
 8010828:	e9cd 3203 	strd	r3, r2, [sp, #12]
 801082c:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 8010830:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 8010834:	f000 f99a 	bl	8010b6c <uxr_object_id_to_raw>
 8010838:	2300      	movs	r3, #0
 801083a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801083e:	a912      	add	r1, sp, #72	@ 0x48
 8010840:	a806      	add	r0, sp, #24
 8010842:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 8010846:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 801084a:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 801084e:	f7ff fe67 	bl	8010520 <ucdr_init_buffer>
 8010852:	a993      	add	r1, sp, #588	@ 0x24c
 8010854:	a806      	add	r0, sp, #24
 8010856:	f002 f865 	bl	8012924 <uxr_serialize_OBJK_Publisher_Binary>
 801085a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801085c:	9311      	str	r3, [sp, #68]	@ 0x44
 801085e:	ac0e      	add	r4, sp, #56	@ 0x38
 8010860:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8010864:	9700      	str	r7, [sp, #0]
 8010866:	9401      	str	r4, [sp, #4]
 8010868:	b29b      	uxth	r3, r3
 801086a:	4628      	mov	r0, r5
 801086c:	f7ff ff40 	bl	80106f0 <uxr_common_create_entity>
 8010870:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 8010874:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010876:	bf00      	nop

08010878 <uxr_buffer_create_subscriber_bin>:
 8010878:	b570      	push	{r4, r5, r6, lr}
 801087a:	f5ad 6d91 	sub.w	sp, sp, #1160	@ 0x488
 801087e:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8010882:	9105      	str	r1, [sp, #20]
 8010884:	4605      	mov	r5, r0
 8010886:	a992      	add	r1, sp, #584	@ 0x248
 8010888:	4618      	mov	r0, r3
 801088a:	2304      	movs	r3, #4
 801088c:	f89d 6498 	ldrb.w	r6, [sp, #1176]	@ 0x498
 8010890:	f88d 303c 	strb.w	r3, [sp, #60]	@ 0x3c
 8010894:	f000 f96a 	bl	8010b6c <uxr_object_id_to_raw>
 8010898:	2300      	movs	r3, #0
 801089a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801089e:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 80108a2:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 80108a6:	a912      	add	r1, sp, #72	@ 0x48
 80108a8:	2303      	movs	r3, #3
 80108aa:	a806      	add	r0, sp, #24
 80108ac:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 80108b0:	f7ff fe36 	bl	8010520 <ucdr_init_buffer>
 80108b4:	a993      	add	r1, sp, #588	@ 0x24c
 80108b6:	a806      	add	r0, sp, #24
 80108b8:	f002 f8e4 	bl	8012a84 <uxr_serialize_OBJK_Subscriber_Binary>
 80108bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80108be:	9311      	str	r3, [sp, #68]	@ 0x44
 80108c0:	ac0e      	add	r4, sp, #56	@ 0x38
 80108c2:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80108c6:	9600      	str	r6, [sp, #0]
 80108c8:	9401      	str	r4, [sp, #4]
 80108ca:	b29b      	uxth	r3, r3
 80108cc:	4628      	mov	r0, r5
 80108ce:	f7ff ff0f 	bl	80106f0 <uxr_common_create_entity>
 80108d2:	f50d 6d91 	add.w	sp, sp, #1160	@ 0x488
 80108d6:	bd70      	pop	{r4, r5, r6, pc}

080108d8 <uxr_buffer_create_datawriter_bin>:
 80108d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80108dc:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 80108e0:	ac1d      	add	r4, sp, #116	@ 0x74
 80108e2:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80108e6:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 80108ea:	9105      	str	r1, [sp, #20]
 80108ec:	4606      	mov	r6, r0
 80108ee:	a9a1      	add	r1, sp, #644	@ 0x284
 80108f0:	4618      	mov	r0, r3
 80108f2:	2305      	movs	r3, #5
 80108f4:	7123      	strb	r3, [r4, #4]
 80108f6:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 80108fa:	2703      	movs	r7, #3
 80108fc:	f000 f936 	bl	8010b6c <uxr_object_id_to_raw>
 8010900:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 8010902:	7227      	strb	r7, [r4, #8]
 8010904:	a90e      	add	r1, sp, #56	@ 0x38
 8010906:	f000 f931 	bl	8010b6c <uxr_object_id_to_raw>
 801090a:	2300      	movs	r3, #0
 801090c:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 8010910:	f89d 22a5 	ldrb.w	r2, [sp, #677]	@ 0x2a5
 8010914:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 8010918:	3d00      	subs	r5, #0
 801091a:	bf18      	it	ne
 801091c:	2501      	movne	r5, #1
 801091e:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 8010922:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 8010926:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 801092a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 801092e:	2301      	movs	r3, #1
 8010930:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 8010934:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 8010938:	bb8a      	cbnz	r2, 801099e <uxr_buffer_create_datawriter_bin+0xc6>
 801093a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 801093e:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 8010942:	f04f 0c13 	mov.w	ip, #19
 8010946:	250b      	movs	r5, #11
 8010948:	2221      	movs	r2, #33	@ 0x21
 801094a:	2111      	movs	r1, #17
 801094c:	2009      	movs	r0, #9
 801094e:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 8010952:	b923      	cbnz	r3, 801095e <uxr_buffer_create_datawriter_bin+0x86>
 8010954:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 8010958:	4672      	mov	r2, lr
 801095a:	4661      	mov	r1, ip
 801095c:	4628      	mov	r0, r5
 801095e:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 8010962:	2b01      	cmp	r3, #1
 8010964:	d025      	beq.n	80109b2 <uxr_buffer_create_datawriter_bin+0xda>
 8010966:	2b03      	cmp	r3, #3
 8010968:	d029      	beq.n	80109be <uxr_buffer_create_datawriter_bin+0xe6>
 801096a:	b32b      	cbz	r3, 80109b8 <uxr_buffer_create_datawriter_bin+0xe0>
 801096c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010970:	a921      	add	r1, sp, #132	@ 0x84
 8010972:	a806      	add	r0, sp, #24
 8010974:	f7ff fdd4 	bl	8010520 <ucdr_init_buffer>
 8010978:	a90e      	add	r1, sp, #56	@ 0x38
 801097a:	a806      	add	r0, sp, #24
 801097c:	f002 f934 	bl	8012be8 <uxr_serialize_OBJK_DataWriter_Binary>
 8010980:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010982:	f8cd 8000 	str.w	r8, [sp]
 8010986:	9401      	str	r4, [sp, #4]
 8010988:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 801098c:	60e3      	str	r3, [r4, #12]
 801098e:	4630      	mov	r0, r6
 8010990:	b29b      	uxth	r3, r3
 8010992:	f7ff fead 	bl	80106f0 <uxr_common_create_entity>
 8010996:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 801099a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801099e:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 80109a2:	f04f 0c12 	mov.w	ip, #18
 80109a6:	250a      	movs	r5, #10
 80109a8:	2220      	movs	r2, #32
 80109aa:	2110      	movs	r1, #16
 80109ac:	2008      	movs	r0, #8
 80109ae:	2702      	movs	r7, #2
 80109b0:	e7cd      	b.n	801094e <uxr_buffer_create_datawriter_bin+0x76>
 80109b2:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 80109b6:	e7d9      	b.n	801096c <uxr_buffer_create_datawriter_bin+0x94>
 80109b8:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 80109bc:	e7d6      	b.n	801096c <uxr_buffer_create_datawriter_bin+0x94>
 80109be:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 80109c2:	e7d3      	b.n	801096c <uxr_buffer_create_datawriter_bin+0x94>

080109c4 <uxr_buffer_create_datareader_bin>:
 80109c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80109c8:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 80109cc:	ac1f      	add	r4, sp, #124	@ 0x7c
 80109ce:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80109d2:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	@ 0x2b0
 80109d6:	9105      	str	r1, [sp, #20]
 80109d8:	4606      	mov	r6, r0
 80109da:	a9a3      	add	r1, sp, #652	@ 0x28c
 80109dc:	4618      	mov	r0, r3
 80109de:	2306      	movs	r3, #6
 80109e0:	7123      	strb	r3, [r4, #4]
 80109e2:	f89d 82b4 	ldrb.w	r8, [sp, #692]	@ 0x2b4
 80109e6:	2703      	movs	r7, #3
 80109e8:	f000 f8c0 	bl	8010b6c <uxr_object_id_to_raw>
 80109ec:	98aa      	ldr	r0, [sp, #680]	@ 0x2a8
 80109ee:	7227      	strb	r7, [r4, #8]
 80109f0:	a90e      	add	r1, sp, #56	@ 0x38
 80109f2:	f000 f8bb 	bl	8010b6c <uxr_object_id_to_raw>
 80109f6:	2300      	movs	r3, #0
 80109f8:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 80109fc:	f89d 22ad 	ldrb.w	r2, [sp, #685]	@ 0x2ad
 8010a00:	f88d 3070 	strb.w	r3, [sp, #112]	@ 0x70
 8010a04:	3d00      	subs	r5, #0
 8010a06:	bf18      	it	ne
 8010a08:	2501      	movne	r5, #1
 8010a0a:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 8010a0e:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 8010a12:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 8010a16:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 8010a1a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8010a1e:	2301      	movs	r3, #1
 8010a20:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 8010a24:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 8010a28:	bb8a      	cbnz	r2, 8010a8e <uxr_buffer_create_datareader_bin+0xca>
 8010a2a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8010a2e:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 8010a32:	f04f 0c13 	mov.w	ip, #19
 8010a36:	250b      	movs	r5, #11
 8010a38:	2221      	movs	r2, #33	@ 0x21
 8010a3a:	2111      	movs	r1, #17
 8010a3c:	2009      	movs	r0, #9
 8010a3e:	f89d 32ae 	ldrb.w	r3, [sp, #686]	@ 0x2ae
 8010a42:	b923      	cbnz	r3, 8010a4e <uxr_buffer_create_datareader_bin+0x8a>
 8010a44:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 8010a48:	4672      	mov	r2, lr
 8010a4a:	4661      	mov	r1, ip
 8010a4c:	4628      	mov	r0, r5
 8010a4e:	f89d 32ac 	ldrb.w	r3, [sp, #684]	@ 0x2ac
 8010a52:	2b01      	cmp	r3, #1
 8010a54:	d025      	beq.n	8010aa2 <uxr_buffer_create_datareader_bin+0xde>
 8010a56:	2b03      	cmp	r3, #3
 8010a58:	d029      	beq.n	8010aae <uxr_buffer_create_datareader_bin+0xea>
 8010a5a:	b32b      	cbz	r3, 8010aa8 <uxr_buffer_create_datareader_bin+0xe4>
 8010a5c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010a60:	a923      	add	r1, sp, #140	@ 0x8c
 8010a62:	a806      	add	r0, sp, #24
 8010a64:	f7ff fd5c 	bl	8010520 <ucdr_init_buffer>
 8010a68:	a90e      	add	r1, sp, #56	@ 0x38
 8010a6a:	a806      	add	r0, sp, #24
 8010a6c:	f002 f880 	bl	8012b70 <uxr_serialize_OBJK_DataReader_Binary>
 8010a70:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010a72:	f8cd 8000 	str.w	r8, [sp]
 8010a76:	9401      	str	r4, [sp, #4]
 8010a78:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8010a7c:	60e3      	str	r3, [r4, #12]
 8010a7e:	4630      	mov	r0, r6
 8010a80:	b29b      	uxth	r3, r3
 8010a82:	f7ff fe35 	bl	80106f0 <uxr_common_create_entity>
 8010a86:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 8010a8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a8e:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 8010a92:	f04f 0c12 	mov.w	ip, #18
 8010a96:	250a      	movs	r5, #10
 8010a98:	2220      	movs	r2, #32
 8010a9a:	2110      	movs	r1, #16
 8010a9c:	2008      	movs	r0, #8
 8010a9e:	2702      	movs	r7, #2
 8010aa0:	e7cd      	b.n	8010a3e <uxr_buffer_create_datareader_bin+0x7a>
 8010aa2:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 8010aa6:	e7d9      	b.n	8010a5c <uxr_buffer_create_datareader_bin+0x98>
 8010aa8:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 8010aac:	e7d6      	b.n	8010a5c <uxr_buffer_create_datareader_bin+0x98>
 8010aae:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 8010ab2:	e7d3      	b.n	8010a5c <uxr_buffer_create_datareader_bin+0x98>

08010ab4 <uxr_buffer_create_replier_bin>:
 8010ab4:	b570      	push	{r4, r5, r6, lr}
 8010ab6:	f5ad 7d1a 	sub.w	sp, sp, #616	@ 0x268
 8010aba:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8010abe:	9105      	str	r1, [sp, #20]
 8010ac0:	4605      	mov	r5, r0
 8010ac2:	a999      	add	r1, sp, #612	@ 0x264
 8010ac4:	4618      	mov	r0, r3
 8010ac6:	2308      	movs	r3, #8
 8010ac8:	f89d 6294 	ldrb.w	r6, [sp, #660]	@ 0x294
 8010acc:	f88d 3058 	strb.w	r3, [sp, #88]	@ 0x58
 8010ad0:	f000 f84c 	bl	8010b6c <uxr_object_id_to_raw>
 8010ad4:	9b9e      	ldr	r3, [sp, #632]	@ 0x278
 8010ad6:	9306      	str	r3, [sp, #24]
 8010ad8:	9b9f      	ldr	r3, [sp, #636]	@ 0x27c
 8010ada:	9307      	str	r3, [sp, #28]
 8010adc:	9ba0      	ldr	r3, [sp, #640]	@ 0x280
 8010ade:	9308      	str	r3, [sp, #32]
 8010ae0:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 8010ae2:	930c      	str	r3, [sp, #48]	@ 0x30
 8010ae4:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8010ae6:	930a      	str	r3, [sp, #40]	@ 0x28
 8010ae8:	2301      	movs	r3, #1
 8010aea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010aee:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 8010af2:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8010af6:	a919      	add	r1, sp, #100	@ 0x64
 8010af8:	2303      	movs	r3, #3
 8010afa:	a80d      	add	r0, sp, #52	@ 0x34
 8010afc:	f88d 305c 	strb.w	r3, [sp, #92]	@ 0x5c
 8010b00:	f7ff fd0e 	bl	8010520 <ucdr_init_buffer>
 8010b04:	a906      	add	r1, sp, #24
 8010b06:	a80d      	add	r0, sp, #52	@ 0x34
 8010b08:	f002 f89a 	bl	8012c40 <uxr_serialize_OBJK_Replier_Binary>
 8010b0c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010b0e:	9318      	str	r3, [sp, #96]	@ 0x60
 8010b10:	ac15      	add	r4, sp, #84	@ 0x54
 8010b12:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8010b16:	9600      	str	r6, [sp, #0]
 8010b18:	9401      	str	r4, [sp, #4]
 8010b1a:	b29b      	uxth	r3, r3
 8010b1c:	4628      	mov	r0, r5
 8010b1e:	f7ff fde7 	bl	80106f0 <uxr_common_create_entity>
 8010b22:	f50d 7d1a 	add.w	sp, sp, #616	@ 0x268
 8010b26:	bd70      	pop	{r4, r5, r6, pc}

08010b28 <uxr_object_id>:
 8010b28:	b082      	sub	sp, #8
 8010b2a:	2300      	movs	r3, #0
 8010b2c:	f88d 1006 	strb.w	r1, [sp, #6]
 8010b30:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8010b34:	f360 030f 	bfi	r3, r0, #0, #16
 8010b38:	f362 431f 	bfi	r3, r2, #16, #16
 8010b3c:	4618      	mov	r0, r3
 8010b3e:	b002      	add	sp, #8
 8010b40:	4770      	bx	lr
 8010b42:	bf00      	nop

08010b44 <uxr_object_id_from_raw>:
 8010b44:	7843      	ldrb	r3, [r0, #1]
 8010b46:	7801      	ldrb	r1, [r0, #0]
 8010b48:	b082      	sub	sp, #8
 8010b4a:	f003 020f 	and.w	r2, r3, #15
 8010b4e:	f88d 2006 	strb.w	r2, [sp, #6]
 8010b52:	091b      	lsrs	r3, r3, #4
 8010b54:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8010b58:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8010b5c:	2000      	movs	r0, #0
 8010b5e:	f363 000f 	bfi	r0, r3, #0, #16
 8010b62:	f362 401f 	bfi	r0, r2, #16, #16
 8010b66:	b002      	add	sp, #8
 8010b68:	4770      	bx	lr
 8010b6a:	bf00      	nop

08010b6c <uxr_object_id_to_raw>:
 8010b6c:	4602      	mov	r2, r0
 8010b6e:	f3c0 4303 	ubfx	r3, r0, #16, #4
 8010b72:	b082      	sub	sp, #8
 8010b74:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 8010b78:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 8010b7c:	f881 c000 	strb.w	ip, [r1]
 8010b80:	7048      	strb	r0, [r1, #1]
 8010b82:	b002      	add	sp, #8
 8010b84:	4770      	bx	lr
 8010b86:	bf00      	nop

08010b88 <on_get_fragmentation_info>:
 8010b88:	b500      	push	{lr}
 8010b8a:	b08b      	sub	sp, #44	@ 0x2c
 8010b8c:	4601      	mov	r1, r0
 8010b8e:	2204      	movs	r2, #4
 8010b90:	a802      	add	r0, sp, #8
 8010b92:	f7ff fcc5 	bl	8010520 <ucdr_init_buffer>
 8010b96:	f10d 0305 	add.w	r3, sp, #5
 8010b9a:	f10d 0206 	add.w	r2, sp, #6
 8010b9e:	a901      	add	r1, sp, #4
 8010ba0:	a802      	add	r0, sp, #8
 8010ba2:	f001 f9d7 	bl	8011f54 <uxr_read_submessage_header>
 8010ba6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8010baa:	2b0d      	cmp	r3, #13
 8010bac:	d003      	beq.n	8010bb6 <on_get_fragmentation_info+0x2e>
 8010bae:	2000      	movs	r0, #0
 8010bb0:	b00b      	add	sp, #44	@ 0x2c
 8010bb2:	f85d fb04 	ldr.w	pc, [sp], #4
 8010bb6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8010bba:	f013 0f02 	tst.w	r3, #2
 8010bbe:	bf14      	ite	ne
 8010bc0:	2002      	movne	r0, #2
 8010bc2:	2001      	moveq	r0, #1
 8010bc4:	b00b      	add	sp, #44	@ 0x2c
 8010bc6:	f85d fb04 	ldr.w	pc, [sp], #4
 8010bca:	bf00      	nop

08010bcc <read_submessage_get_info>:
 8010bcc:	b570      	push	{r4, r5, r6, lr}
 8010bce:	2500      	movs	r5, #0
 8010bd0:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 8010bd4:	4604      	mov	r4, r0
 8010bd6:	f44f 7224 	mov.w	r2, #656	@ 0x290
 8010bda:	460e      	mov	r6, r1
 8010bdc:	a810      	add	r0, sp, #64	@ 0x40
 8010bde:	4629      	mov	r1, r5
 8010be0:	e9cd 5503 	strd	r5, r5, [sp, #12]
 8010be4:	f00a fbdc 	bl	801b3a0 <memset>
 8010be8:	a903      	add	r1, sp, #12
 8010bea:	4630      	mov	r0, r6
 8010bec:	f002 faa6 	bl	801313c <uxr_deserialize_GET_INFO_Payload>
 8010bf0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8010bf4:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8010bf8:	4620      	mov	r0, r4
 8010bfa:	f001 f821 	bl	8011c40 <uxr_session_header_offset>
 8010bfe:	462b      	mov	r3, r5
 8010c00:	9000      	str	r0, [sp, #0]
 8010c02:	220c      	movs	r2, #12
 8010c04:	a905      	add	r1, sp, #20
 8010c06:	a808      	add	r0, sp, #32
 8010c08:	f7ff fc78 	bl	80104fc <ucdr_init_buffer_origin_offset>
 8010c0c:	a910      	add	r1, sp, #64	@ 0x40
 8010c0e:	a808      	add	r0, sp, #32
 8010c10:	f002 fb06 	bl	8013220 <uxr_serialize_INFO_Payload>
 8010c14:	9b08      	ldr	r3, [sp, #32]
 8010c16:	462a      	mov	r2, r5
 8010c18:	4629      	mov	r1, r5
 8010c1a:	4620      	mov	r0, r4
 8010c1c:	f000 ffba 	bl	8011b94 <uxr_stamp_session_header>
 8010c20:	a808      	add	r0, sp, #32
 8010c22:	f7ff fca9 	bl	8010578 <ucdr_buffer_length>
 8010c26:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010c28:	4602      	mov	r2, r0
 8010c2a:	a905      	add	r1, sp, #20
 8010c2c:	e9d3 0400 	ldrd	r0, r4, [r3]
 8010c30:	47a0      	blx	r4
 8010c32:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 8010c36:	bd70      	pop	{r4, r5, r6, pc}

08010c38 <write_submessage_acknack.isra.0>:
 8010c38:	b570      	push	{r4, r5, r6, lr}
 8010c3a:	b092      	sub	sp, #72	@ 0x48
 8010c3c:	4605      	mov	r5, r0
 8010c3e:	460e      	mov	r6, r1
 8010c40:	4614      	mov	r4, r2
 8010c42:	f000 fffd 	bl	8011c40 <uxr_session_header_offset>
 8010c46:	a905      	add	r1, sp, #20
 8010c48:	9000      	str	r0, [sp, #0]
 8010c4a:	2300      	movs	r3, #0
 8010c4c:	a80a      	add	r0, sp, #40	@ 0x28
 8010c4e:	2211      	movs	r2, #17
 8010c50:	f7ff fc54 	bl	80104fc <ucdr_init_buffer_origin_offset>
 8010c54:	2218      	movs	r2, #24
 8010c56:	fb02 5404 	mla	r4, r2, r4, r5
 8010c5a:	2300      	movs	r3, #0
 8010c5c:	2205      	movs	r2, #5
 8010c5e:	3450      	adds	r4, #80	@ 0x50
 8010c60:	210a      	movs	r1, #10
 8010c62:	a80a      	add	r0, sp, #40	@ 0x28
 8010c64:	f001 f95c 	bl	8011f20 <uxr_buffer_submessage_header>
 8010c68:	a903      	add	r1, sp, #12
 8010c6a:	4620      	mov	r0, r4
 8010c6c:	f007 fd5c 	bl	8018728 <uxr_compute_acknack>
 8010c70:	ba40      	rev16	r0, r0
 8010c72:	f8ad 000e 	strh.w	r0, [sp, #14]
 8010c76:	a903      	add	r1, sp, #12
 8010c78:	a80a      	add	r0, sp, #40	@ 0x28
 8010c7a:	f88d 6010 	strb.w	r6, [sp, #16]
 8010c7e:	f002 fb3f 	bl	8013300 <uxr_serialize_ACKNACK_Payload>
 8010c82:	2200      	movs	r2, #0
 8010c84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010c86:	4611      	mov	r1, r2
 8010c88:	4628      	mov	r0, r5
 8010c8a:	f000 ff83 	bl	8011b94 <uxr_stamp_session_header>
 8010c8e:	a80a      	add	r0, sp, #40	@ 0x28
 8010c90:	f7ff fc72 	bl	8010578 <ucdr_buffer_length>
 8010c94:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8010c96:	4602      	mov	r2, r0
 8010c98:	a905      	add	r1, sp, #20
 8010c9a:	e9d3 0400 	ldrd	r0, r4, [r3]
 8010c9e:	47a0      	blx	r4
 8010ca0:	b012      	add	sp, #72	@ 0x48
 8010ca2:	bd70      	pop	{r4, r5, r6, pc}
 8010ca4:	0000      	movs	r0, r0
	...

08010ca8 <uxr_init_session>:
 8010ca8:	b510      	push	{r4, lr}
 8010caa:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 8010ce0 <uxr_init_session+0x38>
 8010cae:	2300      	movs	r3, #0
 8010cb0:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 8010cb4:	4604      	mov	r4, r0
 8010cb6:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 8010cba:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 8010cbe:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 8010cc2:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 8010cc6:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 8010cca:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 8010cce:	2181      	movs	r1, #129	@ 0x81
 8010cd0:	f000 fecc 	bl	8011a6c <uxr_init_session_info>
 8010cd4:	f104 0008 	add.w	r0, r4, #8
 8010cd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010cdc:	f001 b83c 	b.w	8011d58 <uxr_init_stream_storage>
	...

08010ce8 <uxr_set_status_callback>:
 8010ce8:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 8010cec:	4770      	bx	lr
 8010cee:	bf00      	nop

08010cf0 <uxr_set_topic_callback>:
 8010cf0:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 8010cf4:	4770      	bx	lr
 8010cf6:	bf00      	nop

08010cf8 <uxr_set_request_callback>:
 8010cf8:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 8010cfc:	4770      	bx	lr
 8010cfe:	bf00      	nop

08010d00 <uxr_set_reply_callback>:
 8010d00:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 8010d04:	4770      	bx	lr
 8010d06:	bf00      	nop

08010d08 <uxr_create_output_best_effort_stream>:
 8010d08:	b510      	push	{r4, lr}
 8010d0a:	b084      	sub	sp, #16
 8010d0c:	e9cd 2100 	strd	r2, r1, [sp]
 8010d10:	4604      	mov	r4, r0
 8010d12:	f000 ff95 	bl	8011c40 <uxr_session_header_offset>
 8010d16:	e9dd 2100 	ldrd	r2, r1, [sp]
 8010d1a:	4603      	mov	r3, r0
 8010d1c:	f104 0008 	add.w	r0, r4, #8
 8010d20:	b004      	add	sp, #16
 8010d22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010d26:	f001 b861 	b.w	8011dec <uxr_add_output_best_effort_buffer>
 8010d2a:	bf00      	nop

08010d2c <uxr_create_output_reliable_stream>:
 8010d2c:	b510      	push	{r4, lr}
 8010d2e:	b088      	sub	sp, #32
 8010d30:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8010d34:	4604      	mov	r4, r0
 8010d36:	9303      	str	r3, [sp, #12]
 8010d38:	f000 ff82 	bl	8011c40 <uxr_session_header_offset>
 8010d3c:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8010d40:	9000      	str	r0, [sp, #0]
 8010d42:	9905      	ldr	r1, [sp, #20]
 8010d44:	f104 0008 	add.w	r0, r4, #8
 8010d48:	f001 f864 	bl	8011e14 <uxr_add_output_reliable_buffer>
 8010d4c:	2200      	movs	r2, #0
 8010d4e:	b2c3      	uxtb	r3, r0
 8010d50:	f363 0207 	bfi	r2, r3, #0, #8
 8010d54:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8010d58:	f363 220f 	bfi	r2, r3, #8, #8
 8010d5c:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8010d60:	f363 4217 	bfi	r2, r3, #16, #8
 8010d64:	0e03      	lsrs	r3, r0, #24
 8010d66:	f363 621f 	bfi	r2, r3, #24, #8
 8010d6a:	4610      	mov	r0, r2
 8010d6c:	b008      	add	sp, #32
 8010d6e:	bd10      	pop	{r4, pc}

08010d70 <uxr_create_input_best_effort_stream>:
 8010d70:	b082      	sub	sp, #8
 8010d72:	3008      	adds	r0, #8
 8010d74:	b002      	add	sp, #8
 8010d76:	f001 b867 	b.w	8011e48 <uxr_add_input_best_effort_buffer>
 8010d7a:	bf00      	nop

08010d7c <uxr_create_input_reliable_stream>:
 8010d7c:	b510      	push	{r4, lr}
 8010d7e:	b084      	sub	sp, #16
 8010d80:	4c0b      	ldr	r4, [pc, #44]	@ (8010db0 <uxr_create_input_reliable_stream+0x34>)
 8010d82:	9400      	str	r4, [sp, #0]
 8010d84:	3008      	adds	r0, #8
 8010d86:	f001 f875 	bl	8011e74 <uxr_add_input_reliable_buffer>
 8010d8a:	2200      	movs	r2, #0
 8010d8c:	b2c3      	uxtb	r3, r0
 8010d8e:	f363 0207 	bfi	r2, r3, #0, #8
 8010d92:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8010d96:	f363 220f 	bfi	r2, r3, #8, #8
 8010d9a:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8010d9e:	f363 4217 	bfi	r2, r3, #16, #8
 8010da2:	0e03      	lsrs	r3, r0, #24
 8010da4:	f363 621f 	bfi	r2, r3, #24, #8
 8010da8:	4610      	mov	r0, r2
 8010daa:	b004      	add	sp, #16
 8010dac:	bd10      	pop	{r4, pc}
 8010dae:	bf00      	nop
 8010db0:	08010b89 	.word	0x08010b89

08010db4 <uxr_epoch_nanos>:
 8010db4:	b510      	push	{r4, lr}
 8010db6:	4604      	mov	r4, r0
 8010db8:	f001 f912 	bl	8011fe0 <uxr_nanos>
 8010dbc:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 8010dc0:	1ac0      	subs	r0, r0, r3
 8010dc2:	eb61 0102 	sbc.w	r1, r1, r2
 8010dc6:	bd10      	pop	{r4, pc}

08010dc8 <uxr_flash_output_streams>:
 8010dc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010dcc:	7e03      	ldrb	r3, [r0, #24]
 8010dce:	b084      	sub	sp, #16
 8010dd0:	4604      	mov	r4, r0
 8010dd2:	2b00      	cmp	r3, #0
 8010dd4:	d035      	beq.n	8010e42 <uxr_flash_output_streams+0x7a>
 8010dd6:	f04f 0900 	mov.w	r9, #0
 8010dda:	4648      	mov	r0, r9
 8010ddc:	f10d 0802 	add.w	r8, sp, #2
 8010de0:	af03      	add	r7, sp, #12
 8010de2:	ae02      	add	r6, sp, #8
 8010de4:	e006      	b.n	8010df4 <uxr_flash_output_streams+0x2c>
 8010de6:	7e23      	ldrb	r3, [r4, #24]
 8010de8:	f109 0901 	add.w	r9, r9, #1
 8010dec:	fa5f f089 	uxtb.w	r0, r9
 8010df0:	4283      	cmp	r3, r0
 8010df2:	d926      	bls.n	8010e42 <uxr_flash_output_streams+0x7a>
 8010df4:	2201      	movs	r2, #1
 8010df6:	4611      	mov	r1, r2
 8010df8:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 8010dfc:	f000 ff58 	bl	8011cb0 <uxr_stream_id>
 8010e00:	3508      	adds	r5, #8
 8010e02:	4684      	mov	ip, r0
 8010e04:	4643      	mov	r3, r8
 8010e06:	463a      	mov	r2, r7
 8010e08:	4631      	mov	r1, r6
 8010e0a:	4628      	mov	r0, r5
 8010e0c:	f8cd c004 	str.w	ip, [sp, #4]
 8010e10:	f007 fd10 	bl	8018834 <uxr_prepare_best_effort_buffer_to_send>
 8010e14:	2800      	cmp	r0, #0
 8010e16:	d0e6      	beq.n	8010de6 <uxr_flash_output_streams+0x1e>
 8010e18:	9b02      	ldr	r3, [sp, #8]
 8010e1a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8010e1e:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8010e22:	4620      	mov	r0, r4
 8010e24:	f000 feb6 	bl	8011b94 <uxr_stamp_session_header>
 8010e28:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010e2a:	9a03      	ldr	r2, [sp, #12]
 8010e2c:	685d      	ldr	r5, [r3, #4]
 8010e2e:	6818      	ldr	r0, [r3, #0]
 8010e30:	9902      	ldr	r1, [sp, #8]
 8010e32:	47a8      	blx	r5
 8010e34:	f109 0901 	add.w	r9, r9, #1
 8010e38:	7e23      	ldrb	r3, [r4, #24]
 8010e3a:	fa5f f089 	uxtb.w	r0, r9
 8010e3e:	4283      	cmp	r3, r0
 8010e40:	d8d8      	bhi.n	8010df4 <uxr_flash_output_streams+0x2c>
 8010e42:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8010e46:	b38b      	cbz	r3, 8010eac <uxr_flash_output_streams+0xe4>
 8010e48:	f04f 0900 	mov.w	r9, #0
 8010e4c:	f10d 0802 	add.w	r8, sp, #2
 8010e50:	af03      	add	r7, sp, #12
 8010e52:	ae02      	add	r6, sp, #8
 8010e54:	4648      	mov	r0, r9
 8010e56:	2201      	movs	r2, #1
 8010e58:	2102      	movs	r1, #2
 8010e5a:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 8010e5e:	f000 ff27 	bl	8011cb0 <uxr_stream_id>
 8010e62:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8010e66:	3520      	adds	r5, #32
 8010e68:	9001      	str	r0, [sp, #4]
 8010e6a:	e00d      	b.n	8010e88 <uxr_flash_output_streams+0xc0>
 8010e6c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8010e70:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8010e74:	9b02      	ldr	r3, [sp, #8]
 8010e76:	f000 fe8d 	bl	8011b94 <uxr_stamp_session_header>
 8010e7a:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010e7c:	9a03      	ldr	r2, [sp, #12]
 8010e7e:	f8d3 a004 	ldr.w	sl, [r3, #4]
 8010e82:	9902      	ldr	r1, [sp, #8]
 8010e84:	6818      	ldr	r0, [r3, #0]
 8010e86:	47d0      	blx	sl
 8010e88:	4643      	mov	r3, r8
 8010e8a:	463a      	mov	r2, r7
 8010e8c:	4631      	mov	r1, r6
 8010e8e:	4628      	mov	r0, r5
 8010e90:	f007 feee 	bl	8018c70 <uxr_prepare_next_reliable_buffer_to_send>
 8010e94:	4603      	mov	r3, r0
 8010e96:	4620      	mov	r0, r4
 8010e98:	2b00      	cmp	r3, #0
 8010e9a:	d1e7      	bne.n	8010e6c <uxr_flash_output_streams+0xa4>
 8010e9c:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8010ea0:	f109 0901 	add.w	r9, r9, #1
 8010ea4:	fa5f f089 	uxtb.w	r0, r9
 8010ea8:	4283      	cmp	r3, r0
 8010eaa:	d8d4      	bhi.n	8010e56 <uxr_flash_output_streams+0x8e>
 8010eac:	b004      	add	sp, #16
 8010eae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010eb2:	bf00      	nop

08010eb4 <read_submessage_info>:
 8010eb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010eb8:	460d      	mov	r5, r1
 8010eba:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 8010ebe:	4669      	mov	r1, sp
 8010ec0:	4607      	mov	r7, r0
 8010ec2:	4628      	mov	r0, r5
 8010ec4:	f002 f848 	bl	8012f58 <uxr_deserialize_BaseObjectReply>
 8010ec8:	a902      	add	r1, sp, #8
 8010eca:	4604      	mov	r4, r0
 8010ecc:	4628      	mov	r0, r5
 8010ece:	f89d 8005 	ldrb.w	r8, [sp, #5]
 8010ed2:	f7fd fefb 	bl	800eccc <ucdr_deserialize_bool>
 8010ed6:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8010eda:	4004      	ands	r4, r0
 8010edc:	b2e4      	uxtb	r4, r4
 8010ede:	b95b      	cbnz	r3, 8010ef8 <read_submessage_info+0x44>
 8010ee0:	a987      	add	r1, sp, #540	@ 0x21c
 8010ee2:	4628      	mov	r0, r5
 8010ee4:	f7fd fef2 	bl	800eccc <ucdr_deserialize_bool>
 8010ee8:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 8010eec:	4606      	mov	r6, r0
 8010eee:	b94b      	cbnz	r3, 8010f04 <read_submessage_info+0x50>
 8010ef0:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 8010ef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ef8:	a903      	add	r1, sp, #12
 8010efa:	4628      	mov	r0, r5
 8010efc:	f001 fed4 	bl	8012ca8 <uxr_deserialize_ObjectVariant>
 8010f00:	4004      	ands	r4, r0
 8010f02:	e7ed      	b.n	8010ee0 <read_submessage_info+0x2c>
 8010f04:	a988      	add	r1, sp, #544	@ 0x220
 8010f06:	4628      	mov	r0, r5
 8010f08:	f7fd ff0e 	bl	800ed28 <ucdr_deserialize_uint8_t>
 8010f0c:	4234      	tst	r4, r6
 8010f0e:	d0ef      	beq.n	8010ef0 <read_submessage_info+0x3c>
 8010f10:	2800      	cmp	r0, #0
 8010f12:	d0ed      	beq.n	8010ef0 <read_submessage_info+0x3c>
 8010f14:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 8010f18:	2b0d      	cmp	r3, #13
 8010f1a:	d1e9      	bne.n	8010ef0 <read_submessage_info+0x3c>
 8010f1c:	a98a      	add	r1, sp, #552	@ 0x228
 8010f1e:	4628      	mov	r0, r5
 8010f20:	f7fe fca8 	bl	800f874 <ucdr_deserialize_int16_t>
 8010f24:	b140      	cbz	r0, 8010f38 <read_submessage_info+0x84>
 8010f26:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 8010f2a:	2b00      	cmp	r3, #0
 8010f2c:	dd07      	ble.n	8010f3e <read_submessage_info+0x8a>
 8010f2e:	f1b8 0f00 	cmp.w	r8, #0
 8010f32:	bf14      	ite	ne
 8010f34:	2001      	movne	r0, #1
 8010f36:	2002      	moveq	r0, #2
 8010f38:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 8010f3c:	e7d8      	b.n	8010ef0 <read_submessage_info+0x3c>
 8010f3e:	2000      	movs	r0, #0
 8010f40:	e7fa      	b.n	8010f38 <read_submessage_info+0x84>
 8010f42:	bf00      	nop

08010f44 <read_submessage_list>:
 8010f44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f48:	b097      	sub	sp, #92	@ 0x5c
 8010f4a:	4ec1      	ldr	r6, [pc, #772]	@ (8011250 <read_submessage_list+0x30c>)
 8010f4c:	9209      	str	r2, [sp, #36]	@ 0x24
 8010f4e:	4604      	mov	r4, r0
 8010f50:	460d      	mov	r5, r1
 8010f52:	f04f 0801 	mov.w	r8, #1
 8010f56:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 8010f5a:	aa0c      	add	r2, sp, #48	@ 0x30
 8010f5c:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 8010f60:	4628      	mov	r0, r5
 8010f62:	f000 fff7 	bl	8011f54 <uxr_read_submessage_header>
 8010f66:	2800      	cmp	r0, #0
 8010f68:	f000 813e 	beq.w	80111e8 <read_submessage_list+0x2a4>
 8010f6c:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 8010f70:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 8010f74:	3b02      	subs	r3, #2
 8010f76:	2b0d      	cmp	r3, #13
 8010f78:	d8ed      	bhi.n	8010f56 <read_submessage_list+0x12>
 8010f7a:	a101      	add	r1, pc, #4	@ (adr r1, 8010f80 <read_submessage_list+0x3c>)
 8010f7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010f80:	080111df 	.word	0x080111df
 8010f84:	08010f57 	.word	0x08010f57
 8010f88:	080111cf 	.word	0x080111cf
 8010f8c:	0801116d 	.word	0x0801116d
 8010f90:	08011163 	.word	0x08011163
 8010f94:	08010f57 	.word	0x08010f57
 8010f98:	08010f57 	.word	0x08010f57
 8010f9c:	080110c3 	.word	0x080110c3
 8010fa0:	08011053 	.word	0x08011053
 8010fa4:	08011013 	.word	0x08011013
 8010fa8:	08010f57 	.word	0x08010f57
 8010fac:	08010f57 	.word	0x08010f57
 8010fb0:	08010f57 	.word	0x08010f57
 8010fb4:	08010fb9 	.word	0x08010fb9
 8010fb8:	a910      	add	r1, sp, #64	@ 0x40
 8010fba:	4628      	mov	r0, r5
 8010fbc:	f002 f9f0 	bl	80133a0 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 8010fc0:	f8d4 9090 	ldr.w	r9, [r4, #144]	@ 0x90
 8010fc4:	f1b9 0f00 	cmp.w	r9, #0
 8010fc8:	f000 8116 	beq.w	80111f8 <read_submessage_list+0x2b4>
 8010fcc:	f001 f808 	bl	8011fe0 <uxr_nanos>
 8010fd0:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 8010fd2:	4602      	mov	r2, r0
 8010fd4:	460b      	mov	r3, r1
 8010fd6:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8010fd8:	2100      	movs	r1, #0
 8010fda:	468c      	mov	ip, r1
 8010fdc:	fbc0 7c06 	smlal	r7, ip, r0, r6
 8010fe0:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 8010fe4:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8010fe6:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 8010fe8:	468c      	mov	ip, r1
 8010fea:	fbc0 7c06 	smlal	r7, ip, r0, r6
 8010fee:	46e2      	mov	sl, ip
 8010ff0:	46bc      	mov	ip, r7
 8010ff2:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	@ 0x48
 8010ff6:	fbc0 7106 	smlal	r7, r1, r0, r6
 8010ffa:	e9cd ca02 	strd	ip, sl, [sp, #8]
 8010ffe:	e9cd 7100 	strd	r7, r1, [sp]
 8011002:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 8011006:	9106      	str	r1, [sp, #24]
 8011008:	4620      	mov	r0, r4
 801100a:	47c8      	blx	r9
 801100c:	f884 80a0 	strb.w	r8, [r4, #160]	@ 0xa0
 8011010:	e7a1      	b.n	8010f56 <read_submessage_list+0x12>
 8011012:	a910      	add	r1, sp, #64	@ 0x40
 8011014:	4628      	mov	r0, r5
 8011016:	f002 f9b1 	bl	801337c <uxr_deserialize_HEARTBEAT_Payload>
 801101a:	2100      	movs	r1, #0
 801101c:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8011020:	f000 fe70 	bl	8011d04 <uxr_stream_id_from_raw>
 8011024:	f3c0 2707 	ubfx	r7, r0, #8, #8
 8011028:	900f      	str	r0, [sp, #60]	@ 0x3c
 801102a:	4639      	mov	r1, r7
 801102c:	f104 0008 	add.w	r0, r4, #8
 8011030:	f000 ff56 	bl	8011ee0 <uxr_get_input_reliable_stream>
 8011034:	2800      	cmp	r0, #0
 8011036:	d08e      	beq.n	8010f56 <read_submessage_list+0x12>
 8011038:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 801103c:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 8011040:	f007 fb66 	bl	8018710 <uxr_process_heartbeat>
 8011044:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 8011048:	463a      	mov	r2, r7
 801104a:	4620      	mov	r0, r4
 801104c:	f7ff fdf4 	bl	8010c38 <write_submessage_acknack.isra.0>
 8011050:	e781      	b.n	8010f56 <read_submessage_list+0x12>
 8011052:	a910      	add	r1, sp, #64	@ 0x40
 8011054:	4628      	mov	r0, r5
 8011056:	f002 f969 	bl	801332c <uxr_deserialize_ACKNACK_Payload>
 801105a:	2100      	movs	r1, #0
 801105c:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8011060:	f000 fe50 	bl	8011d04 <uxr_stream_id_from_raw>
 8011064:	900d      	str	r0, [sp, #52]	@ 0x34
 8011066:	f3c0 2107 	ubfx	r1, r0, #8, #8
 801106a:	f104 0008 	add.w	r0, r4, #8
 801106e:	f000 ff23 	bl	8011eb8 <uxr_get_output_reliable_stream>
 8011072:	4607      	mov	r7, r0
 8011074:	2800      	cmp	r0, #0
 8011076:	f43f af6e 	beq.w	8010f56 <read_submessage_list+0x12>
 801107a:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 801107e:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 8011082:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 8011086:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 801108a:	b289      	uxth	r1, r1
 801108c:	f007 fe9a 	bl	8018dc4 <uxr_process_acknack>
 8011090:	4638      	mov	r0, r7
 8011092:	f007 fe57 	bl	8018d44 <uxr_begin_output_nack_buffer_it>
 8011096:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 801109a:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 801109e:	e006      	b.n	80110ae <read_submessage_list+0x16a>
 80110a0:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80110a2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80110a4:	f8d3 9004 	ldr.w	r9, [r3, #4]
 80110a8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80110aa:	6818      	ldr	r0, [r3, #0]
 80110ac:	47c8      	blx	r9
 80110ae:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 80110b2:	aa0f      	add	r2, sp, #60	@ 0x3c
 80110b4:	4651      	mov	r1, sl
 80110b6:	4638      	mov	r0, r7
 80110b8:	f007 fe46 	bl	8018d48 <uxr_next_reliable_nack_buffer_to_send>
 80110bc:	2800      	cmp	r0, #0
 80110be:	d1ef      	bne.n	80110a0 <read_submessage_list+0x15c>
 80110c0:	e749      	b.n	8010f56 <read_submessage_list+0x12>
 80110c2:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 80110c6:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 80110ca:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 80110ce:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 80110d2:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 80110d6:	4651      	mov	r1, sl
 80110d8:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 80110dc:	f8bd 7030 	ldrh.w	r7, [sp, #48]	@ 0x30
 80110e0:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 80110e4:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 80110e8:	4628      	mov	r0, r5
 80110ea:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 80110ee:	f001 fe7d 	bl	8012dec <uxr_deserialize_BaseObjectRequest>
 80110f2:	4650      	mov	r0, sl
 80110f4:	a90f      	add	r1, sp, #60	@ 0x3c
 80110f6:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 80110fa:	f000 fdc7 	bl	8011c8c <uxr_parse_base_object_request>
 80110fe:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 8011102:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8011104:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 8011108:	9110      	str	r1, [sp, #64]	@ 0x40
 801110a:	3f04      	subs	r7, #4
 801110c:	f009 090e 	and.w	r9, r9, #14
 8011110:	b2bf      	uxth	r7, r7
 8011112:	f1bb 0f00 	cmp.w	fp, #0
 8011116:	d006      	beq.n	8011126 <read_submessage_list+0x1e2>
 8011118:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 801111c:	9300      	str	r3, [sp, #0]
 801111e:	4652      	mov	r2, sl
 8011120:	2300      	movs	r3, #0
 8011122:	4620      	mov	r0, r4
 8011124:	47d8      	blx	fp
 8011126:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8011128:	b16a      	cbz	r2, 8011146 <read_submessage_list+0x202>
 801112a:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 801112c:	2100      	movs	r1, #0
 801112e:	3802      	subs	r0, #2
 8011130:	e002      	b.n	8011138 <read_submessage_list+0x1f4>
 8011132:	3101      	adds	r1, #1
 8011134:	4291      	cmp	r1, r2
 8011136:	d006      	beq.n	8011146 <read_submessage_list+0x202>
 8011138:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 801113c:	4553      	cmp	r3, sl
 801113e:	d1f8      	bne.n	8011132 <read_submessage_list+0x1ee>
 8011140:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8011142:	2200      	movs	r2, #0
 8011144:	545a      	strb	r2, [r3, r1]
 8011146:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 801114a:	9102      	str	r1, [sp, #8]
 801114c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801114e:	9101      	str	r1, [sp, #4]
 8011150:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8011152:	9100      	str	r1, [sp, #0]
 8011154:	464b      	mov	r3, r9
 8011156:	463a      	mov	r2, r7
 8011158:	4629      	mov	r1, r5
 801115a:	4620      	mov	r0, r4
 801115c:	f007 fef0 	bl	8018f40 <read_submessage_format>
 8011160:	e6f9      	b.n	8010f56 <read_submessage_list+0x12>
 8011162:	4629      	mov	r1, r5
 8011164:	4620      	mov	r0, r4
 8011166:	f7ff fea5 	bl	8010eb4 <read_submessage_info>
 801116a:	e6f4      	b.n	8010f56 <read_submessage_list+0x12>
 801116c:	2a00      	cmp	r2, #0
 801116e:	d03e      	beq.n	80111ee <read_submessage_list+0x2aa>
 8011170:	a910      	add	r1, sp, #64	@ 0x40
 8011172:	4628      	mov	r0, r5
 8011174:	f002 f836 	bl	80131e4 <uxr_deserialize_STATUS_Payload>
 8011178:	a90e      	add	r1, sp, #56	@ 0x38
 801117a:	aa0d      	add	r2, sp, #52	@ 0x34
 801117c:	a810      	add	r0, sp, #64	@ 0x40
 801117e:	f000 fd85 	bl	8011c8c <uxr_parse_base_object_request>
 8011182:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 8011186:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8011188:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 801118c:	f8bd 7034 	ldrh.w	r7, [sp, #52]	@ 0x34
 8011190:	910f      	str	r1, [sp, #60]	@ 0x3c
 8011192:	f1ba 0f00 	cmp.w	sl, #0
 8011196:	d006      	beq.n	80111a6 <read_submessage_list+0x262>
 8011198:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 801119c:	9300      	str	r3, [sp, #0]
 801119e:	463a      	mov	r2, r7
 80111a0:	464b      	mov	r3, r9
 80111a2:	4620      	mov	r0, r4
 80111a4:	47d0      	blx	sl
 80111a6:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 80111a8:	2a00      	cmp	r2, #0
 80111aa:	f43f aed4 	beq.w	8010f56 <read_submessage_list+0x12>
 80111ae:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 80111b0:	2100      	movs	r1, #0
 80111b2:	3802      	subs	r0, #2
 80111b4:	e003      	b.n	80111be <read_submessage_list+0x27a>
 80111b6:	3101      	adds	r1, #1
 80111b8:	4291      	cmp	r1, r2
 80111ba:	f43f aecc 	beq.w	8010f56 <read_submessage_list+0x12>
 80111be:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 80111c2:	42bb      	cmp	r3, r7
 80111c4:	d1f7      	bne.n	80111b6 <read_submessage_list+0x272>
 80111c6:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 80111c8:	f803 9001 	strb.w	r9, [r3, r1]
 80111cc:	e6c3      	b.n	8010f56 <read_submessage_list+0x12>
 80111ce:	2a00      	cmp	r2, #0
 80111d0:	f47f aec1 	bne.w	8010f56 <read_submessage_list+0x12>
 80111d4:	4629      	mov	r1, r5
 80111d6:	4620      	mov	r0, r4
 80111d8:	f000 fc9e 	bl	8011b18 <uxr_read_create_session_status>
 80111dc:	e6bb      	b.n	8010f56 <read_submessage_list+0x12>
 80111de:	4629      	mov	r1, r5
 80111e0:	4620      	mov	r0, r4
 80111e2:	f7ff fcf3 	bl	8010bcc <read_submessage_get_info>
 80111e6:	e6b6      	b.n	8010f56 <read_submessage_list+0x12>
 80111e8:	b017      	add	sp, #92	@ 0x5c
 80111ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80111ee:	4629      	mov	r1, r5
 80111f0:	4620      	mov	r0, r4
 80111f2:	f000 fc9d 	bl	8011b30 <uxr_read_delete_session_status>
 80111f6:	e6ae      	b.n	8010f56 <read_submessage_list+0x12>
 80111f8:	f000 fef2 	bl	8011fe0 <uxr_nanos>
 80111fc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80111fe:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8011200:	464f      	mov	r7, r9
 8011202:	fbc3 2706 	smlal	r2, r7, r3, r6
 8011206:	1812      	adds	r2, r2, r0
 8011208:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801120a:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801120c:	eb47 0101 	adc.w	r1, r7, r1
 8011210:	464f      	mov	r7, r9
 8011212:	fbc3 0706 	smlal	r0, r7, r3, r6
 8011216:	463b      	mov	r3, r7
 8011218:	4684      	mov	ip, r0
 801121a:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 801121e:	fbc7 0906 	smlal	r0, r9, r7, r6
 8011222:	eb1c 0c00 	adds.w	ip, ip, r0
 8011226:	464f      	mov	r7, r9
 8011228:	eb43 0307 	adc.w	r3, r3, r7
 801122c:	ebb2 0c0c 	subs.w	ip, r2, ip
 8011230:	eb61 0303 	sbc.w	r3, r1, r3
 8011234:	0fda      	lsrs	r2, r3, #31
 8011236:	eb12 020c 	adds.w	r2, r2, ip
 801123a:	f143 0300 	adc.w	r3, r3, #0
 801123e:	0852      	lsrs	r2, r2, #1
 8011240:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 8011244:	105b      	asrs	r3, r3, #1
 8011246:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 801124a:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 801124e:	e6dd      	b.n	801100c <read_submessage_list+0xc8>
 8011250:	3b9aca00 	.word	0x3b9aca00

08011254 <listen_message_reliably>:
 8011254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011258:	1e0b      	subs	r3, r1, #0
 801125a:	b09d      	sub	sp, #116	@ 0x74
 801125c:	bfb8      	it	lt
 801125e:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 8011262:	4680      	mov	r8, r0
 8011264:	9305      	str	r3, [sp, #20]
 8011266:	f000 fea1 	bl	8011fac <uxr_millis>
 801126a:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 801126e:	4681      	mov	r9, r0
 8011270:	2a00      	cmp	r2, #0
 8011272:	f000 80a1 	beq.w	80113b8 <listen_message_reliably+0x164>
 8011276:	2600      	movs	r6, #0
 8011278:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801127c:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8011280:	9303      	str	r3, [sp, #12]
 8011282:	4630      	mov	r0, r6
 8011284:	460f      	mov	r7, r1
 8011286:	e00f      	b.n	80112a8 <listen_message_reliably+0x54>
 8011288:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 801128c:	9903      	ldr	r1, [sp, #12]
 801128e:	455a      	cmp	r2, fp
 8011290:	f106 0601 	add.w	r6, r6, #1
 8011294:	eb73 0101 	sbcs.w	r1, r3, r1
 8011298:	b2f0      	uxtb	r0, r6
 801129a:	da01      	bge.n	80112a0 <listen_message_reliably+0x4c>
 801129c:	4693      	mov	fp, r2
 801129e:	9303      	str	r3, [sp, #12]
 80112a0:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 80112a4:	4283      	cmp	r3, r0
 80112a6:	d960      	bls.n	801136a <listen_message_reliably+0x116>
 80112a8:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 80112ac:	2102      	movs	r1, #2
 80112ae:	2201      	movs	r2, #1
 80112b0:	f000 fcfe 	bl	8011cb0 <uxr_stream_id>
 80112b4:	00e4      	lsls	r4, r4, #3
 80112b6:	f104 0520 	add.w	r5, r4, #32
 80112ba:	4445      	add	r5, r8
 80112bc:	4601      	mov	r1, r0
 80112be:	463b      	mov	r3, r7
 80112c0:	464a      	mov	r2, r9
 80112c2:	4628      	mov	r0, r5
 80112c4:	9109      	str	r1, [sp, #36]	@ 0x24
 80112c6:	f007 fd13 	bl	8018cf0 <uxr_update_output_stream_heartbeat_timestamp>
 80112ca:	eb08 0304 	add.w	r3, r8, r4
 80112ce:	2800      	cmp	r0, #0
 80112d0:	d0da      	beq.n	8011288 <listen_message_reliably+0x34>
 80112d2:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 80112d6:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 80112da:	9304      	str	r3, [sp, #16]
 80112dc:	4640      	mov	r0, r8
 80112de:	f000 fcaf 	bl	8011c40 <uxr_session_header_offset>
 80112e2:	3501      	adds	r5, #1
 80112e4:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 80112e8:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80112ec:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 80112f0:	2300      	movs	r3, #0
 80112f2:	2211      	movs	r2, #17
 80112f4:	9000      	str	r0, [sp, #0]
 80112f6:	a90c      	add	r1, sp, #48	@ 0x30
 80112f8:	4650      	mov	r0, sl
 80112fa:	f7ff f8ff 	bl	80104fc <ucdr_init_buffer_origin_offset>
 80112fe:	2300      	movs	r3, #0
 8011300:	2205      	movs	r2, #5
 8011302:	210b      	movs	r1, #11
 8011304:	4650      	mov	r0, sl
 8011306:	f000 fe0b 	bl	8011f20 <uxr_buffer_submessage_header>
 801130a:	8968      	ldrh	r0, [r5, #10]
 801130c:	2101      	movs	r1, #1
 801130e:	f007 fee1 	bl	80190d4 <uxr_seq_num_add>
 8011312:	892b      	ldrh	r3, [r5, #8]
 8011314:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8011318:	4602      	mov	r2, r0
 801131a:	9b04      	ldr	r3, [sp, #16]
 801131c:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8011320:	a90a      	add	r1, sp, #40	@ 0x28
 8011322:	4650      	mov	r0, sl
 8011324:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 8011328:	f002 f814 	bl	8013354 <uxr_serialize_HEARTBEAT_Payload>
 801132c:	2200      	movs	r2, #0
 801132e:	4611      	mov	r1, r2
 8011330:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8011332:	4640      	mov	r0, r8
 8011334:	f000 fc2e 	bl	8011b94 <uxr_stamp_session_header>
 8011338:	4650      	mov	r0, sl
 801133a:	f7ff f91d 	bl	8010578 <ucdr_buffer_length>
 801133e:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 8011342:	4602      	mov	r2, r0
 8011344:	a90c      	add	r1, sp, #48	@ 0x30
 8011346:	e9d3 0500 	ldrd	r0, r5, [r3]
 801134a:	4444      	add	r4, r8
 801134c:	47a8      	blx	r5
 801134e:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 8011352:	9903      	ldr	r1, [sp, #12]
 8011354:	455a      	cmp	r2, fp
 8011356:	f106 0601 	add.w	r6, r6, #1
 801135a:	eb73 0101 	sbcs.w	r1, r3, r1
 801135e:	b2f0      	uxtb	r0, r6
 8011360:	db9c      	blt.n	801129c <listen_message_reliably+0x48>
 8011362:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 8011366:	4283      	cmp	r3, r0
 8011368:	d89e      	bhi.n	80112a8 <listen_message_reliably+0x54>
 801136a:	9a03      	ldr	r2, [sp, #12]
 801136c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8011370:	429a      	cmp	r2, r3
 8011372:	bf08      	it	eq
 8011374:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 8011378:	d01e      	beq.n	80113b8 <listen_message_reliably+0x164>
 801137a:	ebab 0309 	sub.w	r3, fp, r9
 801137e:	9905      	ldr	r1, [sp, #20]
 8011380:	f8d8 2070 	ldr.w	r2, [r8, #112]	@ 0x70
 8011384:	2b00      	cmp	r3, #0
 8011386:	bf08      	it	eq
 8011388:	2301      	moveq	r3, #1
 801138a:	4299      	cmp	r1, r3
 801138c:	bfa8      	it	ge
 801138e:	4619      	movge	r1, r3
 8011390:	6894      	ldr	r4, [r2, #8]
 8011392:	6810      	ldr	r0, [r2, #0]
 8011394:	4689      	mov	r9, r1
 8011396:	460b      	mov	r3, r1
 8011398:	aa08      	add	r2, sp, #32
 801139a:	a907      	add	r1, sp, #28
 801139c:	47a0      	blx	r4
 801139e:	b968      	cbnz	r0, 80113bc <listen_message_reliably+0x168>
 80113a0:	9b05      	ldr	r3, [sp, #20]
 80113a2:	eba3 0309 	sub.w	r3, r3, r9
 80113a6:	2b00      	cmp	r3, #0
 80113a8:	9305      	str	r3, [sp, #20]
 80113aa:	f73f af5c 	bgt.w	8011266 <listen_message_reliably+0x12>
 80113ae:	4604      	mov	r4, r0
 80113b0:	4620      	mov	r0, r4
 80113b2:	b01d      	add	sp, #116	@ 0x74
 80113b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80113b8:	9b05      	ldr	r3, [sp, #20]
 80113ba:	e7e0      	b.n	801137e <listen_message_reliably+0x12a>
 80113bc:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 80113c0:	4604      	mov	r4, r0
 80113c2:	a80c      	add	r0, sp, #48	@ 0x30
 80113c4:	f7ff f8ac 	bl	8010520 <ucdr_init_buffer>
 80113c8:	2500      	movs	r5, #0
 80113ca:	f10d 031a 	add.w	r3, sp, #26
 80113ce:	aa06      	add	r2, sp, #24
 80113d0:	a90c      	add	r1, sp, #48	@ 0x30
 80113d2:	4640      	mov	r0, r8
 80113d4:	f88d 5018 	strb.w	r5, [sp, #24]
 80113d8:	f000 fbf0 	bl	8011bbc <uxr_read_session_header>
 80113dc:	b918      	cbnz	r0, 80113e6 <listen_message_reliably+0x192>
 80113de:	4620      	mov	r0, r4
 80113e0:	b01d      	add	sp, #116	@ 0x74
 80113e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80113e6:	4629      	mov	r1, r5
 80113e8:	f89d 0018 	ldrb.w	r0, [sp, #24]
 80113ec:	f000 fc8a 	bl	8011d04 <uxr_stream_id_from_raw>
 80113f0:	f3c0 4507 	ubfx	r5, r0, #16, #8
 80113f4:	2d01      	cmp	r5, #1
 80113f6:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 80113fa:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 80113fe:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8011402:	d04b      	beq.n	801149c <listen_message_reliably+0x248>
 8011404:	2d02      	cmp	r5, #2
 8011406:	d00f      	beq.n	8011428 <listen_message_reliably+0x1d4>
 8011408:	2d00      	cmp	r5, #0
 801140a:	d1e8      	bne.n	80113de <listen_message_reliably+0x18a>
 801140c:	4629      	mov	r1, r5
 801140e:	4628      	mov	r0, r5
 8011410:	f000 fc78 	bl	8011d04 <uxr_stream_id_from_raw>
 8011414:	a90c      	add	r1, sp, #48	@ 0x30
 8011416:	4602      	mov	r2, r0
 8011418:	4640      	mov	r0, r8
 801141a:	920a      	str	r2, [sp, #40]	@ 0x28
 801141c:	f7ff fd92 	bl	8010f44 <read_submessage_list>
 8011420:	4620      	mov	r0, r4
 8011422:	b01d      	add	sp, #116	@ 0x74
 8011424:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011428:	4631      	mov	r1, r6
 801142a:	f108 0008 	add.w	r0, r8, #8
 801142e:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 8011432:	f000 fd55 	bl	8011ee0 <uxr_get_input_reliable_stream>
 8011436:	4607      	mov	r7, r0
 8011438:	b338      	cbz	r0, 801148a <listen_message_reliably+0x236>
 801143a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801143c:	9203      	str	r2, [sp, #12]
 801143e:	a80c      	add	r0, sp, #48	@ 0x30
 8011440:	f7ff f89e 	bl	8010580 <ucdr_buffer_remaining>
 8011444:	4603      	mov	r3, r0
 8011446:	f10d 0019 	add.w	r0, sp, #25
 801144a:	9000      	str	r0, [sp, #0]
 801144c:	9a03      	ldr	r2, [sp, #12]
 801144e:	4651      	mov	r1, sl
 8011450:	4638      	mov	r0, r7
 8011452:	f007 f863 	bl	801851c <uxr_receive_reliable_message>
 8011456:	b1c0      	cbz	r0, 801148a <listen_message_reliably+0x236>
 8011458:	f89d 3019 	ldrb.w	r3, [sp, #25]
 801145c:	b393      	cbz	r3, 80114c4 <listen_message_reliably+0x270>
 801145e:	ad14      	add	r5, sp, #80	@ 0x50
 8011460:	f04f 0a02 	mov.w	sl, #2
 8011464:	e00a      	b.n	801147c <listen_message_reliably+0x228>
 8011466:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 801146a:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 801146e:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 8011472:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011474:	4629      	mov	r1, r5
 8011476:	4640      	mov	r0, r8
 8011478:	f7ff fd64 	bl	8010f44 <read_submessage_list>
 801147c:	2204      	movs	r2, #4
 801147e:	4629      	mov	r1, r5
 8011480:	4638      	mov	r0, r7
 8011482:	f007 f8cb 	bl	801861c <uxr_next_input_reliable_buffer_available>
 8011486:	2800      	cmp	r0, #0
 8011488:	d1ed      	bne.n	8011466 <listen_message_reliably+0x212>
 801148a:	4640      	mov	r0, r8
 801148c:	4632      	mov	r2, r6
 801148e:	4649      	mov	r1, r9
 8011490:	f7ff fbd2 	bl	8010c38 <write_submessage_acknack.isra.0>
 8011494:	4620      	mov	r0, r4
 8011496:	b01d      	add	sp, #116	@ 0x74
 8011498:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801149c:	4631      	mov	r1, r6
 801149e:	f108 0008 	add.w	r0, r8, #8
 80114a2:	f000 fd13 	bl	8011ecc <uxr_get_input_best_effort_stream>
 80114a6:	2800      	cmp	r0, #0
 80114a8:	d099      	beq.n	80113de <listen_message_reliably+0x18a>
 80114aa:	4651      	mov	r1, sl
 80114ac:	f006 ffa2 	bl	80183f4 <uxr_receive_best_effort_message>
 80114b0:	2800      	cmp	r0, #0
 80114b2:	d094      	beq.n	80113de <listen_message_reliably+0x18a>
 80114b4:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 80114b8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80114ba:	a90c      	add	r1, sp, #48	@ 0x30
 80114bc:	4640      	mov	r0, r8
 80114be:	f7ff fd41 	bl	8010f44 <read_submessage_list>
 80114c2:	e78c      	b.n	80113de <listen_message_reliably+0x18a>
 80114c4:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 80114c8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80114ca:	a90c      	add	r1, sp, #48	@ 0x30
 80114cc:	4640      	mov	r0, r8
 80114ce:	f7ff fd39 	bl	8010f44 <read_submessage_list>
 80114d2:	e7c4      	b.n	801145e <listen_message_reliably+0x20a>

080114d4 <uxr_run_session_timeout>:
 80114d4:	b570      	push	{r4, r5, r6, lr}
 80114d6:	4604      	mov	r4, r0
 80114d8:	460d      	mov	r5, r1
 80114da:	f000 fd67 	bl	8011fac <uxr_millis>
 80114de:	4606      	mov	r6, r0
 80114e0:	4620      	mov	r0, r4
 80114e2:	f7ff fc71 	bl	8010dc8 <uxr_flash_output_streams>
 80114e6:	4629      	mov	r1, r5
 80114e8:	4620      	mov	r0, r4
 80114ea:	f7ff feb3 	bl	8011254 <listen_message_reliably>
 80114ee:	f000 fd5d 	bl	8011fac <uxr_millis>
 80114f2:	1b83      	subs	r3, r0, r6
 80114f4:	1ae9      	subs	r1, r5, r3
 80114f6:	2900      	cmp	r1, #0
 80114f8:	dcf6      	bgt.n	80114e8 <uxr_run_session_timeout+0x14>
 80114fa:	f104 0008 	add.w	r0, r4, #8
 80114fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011502:	f000 bcf7 	b.w	8011ef4 <uxr_output_streams_confirmed>
 8011506:	bf00      	nop

08011508 <uxr_run_session_until_data>:
 8011508:	b570      	push	{r4, r5, r6, lr}
 801150a:	4604      	mov	r4, r0
 801150c:	460d      	mov	r5, r1
 801150e:	f000 fd4d 	bl	8011fac <uxr_millis>
 8011512:	4606      	mov	r6, r0
 8011514:	4620      	mov	r0, r4
 8011516:	f7ff fc57 	bl	8010dc8 <uxr_flash_output_streams>
 801151a:	2300      	movs	r3, #0
 801151c:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 8011520:	4629      	mov	r1, r5
 8011522:	e005      	b.n	8011530 <uxr_run_session_until_data+0x28>
 8011524:	f000 fd42 	bl	8011fac <uxr_millis>
 8011528:	1b83      	subs	r3, r0, r6
 801152a:	1ae9      	subs	r1, r5, r3
 801152c:	2900      	cmp	r1, #0
 801152e:	dd07      	ble.n	8011540 <uxr_run_session_until_data+0x38>
 8011530:	4620      	mov	r0, r4
 8011532:	f7ff fe8f 	bl	8011254 <listen_message_reliably>
 8011536:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 801153a:	2800      	cmp	r0, #0
 801153c:	d0f2      	beq.n	8011524 <uxr_run_session_until_data+0x1c>
 801153e:	bd70      	pop	{r4, r5, r6, pc}
 8011540:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 8011544:	bd70      	pop	{r4, r5, r6, pc}
 8011546:	bf00      	nop

08011548 <uxr_run_session_until_confirm_delivery>:
 8011548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801154c:	4606      	mov	r6, r0
 801154e:	460d      	mov	r5, r1
 8011550:	f000 fd2c 	bl	8011fac <uxr_millis>
 8011554:	4607      	mov	r7, r0
 8011556:	4630      	mov	r0, r6
 8011558:	f7ff fc36 	bl	8010dc8 <uxr_flash_output_streams>
 801155c:	2d00      	cmp	r5, #0
 801155e:	f106 0808 	add.w	r8, r6, #8
 8011562:	bfa8      	it	ge
 8011564:	462c      	movge	r4, r5
 8011566:	da07      	bge.n	8011578 <uxr_run_session_until_confirm_delivery+0x30>
 8011568:	e00e      	b.n	8011588 <uxr_run_session_until_confirm_delivery+0x40>
 801156a:	f7ff fe73 	bl	8011254 <listen_message_reliably>
 801156e:	f000 fd1d 	bl	8011fac <uxr_millis>
 8011572:	1bc3      	subs	r3, r0, r7
 8011574:	1aec      	subs	r4, r5, r3
 8011576:	d407      	bmi.n	8011588 <uxr_run_session_until_confirm_delivery+0x40>
 8011578:	4640      	mov	r0, r8
 801157a:	f000 fcbb 	bl	8011ef4 <uxr_output_streams_confirmed>
 801157e:	4603      	mov	r3, r0
 8011580:	4621      	mov	r1, r4
 8011582:	4630      	mov	r0, r6
 8011584:	2b00      	cmp	r3, #0
 8011586:	d0f0      	beq.n	801156a <uxr_run_session_until_confirm_delivery+0x22>
 8011588:	4640      	mov	r0, r8
 801158a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801158e:	f000 bcb1 	b.w	8011ef4 <uxr_output_streams_confirmed>
 8011592:	bf00      	nop

08011594 <uxr_run_session_until_all_status>:
 8011594:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011598:	9c08      	ldr	r4, [sp, #32]
 801159a:	4606      	mov	r6, r0
 801159c:	460f      	mov	r7, r1
 801159e:	4691      	mov	r9, r2
 80115a0:	461d      	mov	r5, r3
 80115a2:	f7ff fc11 	bl	8010dc8 <uxr_flash_output_streams>
 80115a6:	b124      	cbz	r4, 80115b2 <uxr_run_session_until_all_status+0x1e>
 80115a8:	4622      	mov	r2, r4
 80115aa:	21ff      	movs	r1, #255	@ 0xff
 80115ac:	4628      	mov	r0, r5
 80115ae:	f009 fef7 	bl	801b3a0 <memset>
 80115b2:	e9c6 951d 	strd	r9, r5, [r6, #116]	@ 0x74
 80115b6:	67f4      	str	r4, [r6, #124]	@ 0x7c
 80115b8:	f000 fcf8 	bl	8011fac <uxr_millis>
 80115bc:	3d01      	subs	r5, #1
 80115be:	f1a9 0902 	sub.w	r9, r9, #2
 80115c2:	4680      	mov	r8, r0
 80115c4:	4639      	mov	r1, r7
 80115c6:	4630      	mov	r0, r6
 80115c8:	f7ff fe44 	bl	8011254 <listen_message_reliably>
 80115cc:	f000 fcee 	bl	8011fac <uxr_millis>
 80115d0:	eba0 0008 	sub.w	r0, r0, r8
 80115d4:	1a39      	subs	r1, r7, r0
 80115d6:	b344      	cbz	r4, 801162a <uxr_run_session_until_all_status+0x96>
 80115d8:	4628      	mov	r0, r5
 80115da:	46ac      	mov	ip, r5
 80115dc:	2301      	movs	r3, #1
 80115de:	e002      	b.n	80115e6 <uxr_run_session_until_all_status+0x52>
 80115e0:	42a3      	cmp	r3, r4
 80115e2:	d20d      	bcs.n	8011600 <uxr_run_session_until_all_status+0x6c>
 80115e4:	3301      	adds	r3, #1
 80115e6:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 80115ea:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 80115ee:	d1f7      	bne.n	80115e0 <uxr_run_session_until_all_status+0x4c>
 80115f0:	42a3      	cmp	r3, r4
 80115f2:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 80115f6:	d213      	bcs.n	8011620 <uxr_run_session_until_all_status+0x8c>
 80115f8:	2a00      	cmp	r2, #0
 80115fa:	d0f3      	beq.n	80115e4 <uxr_run_session_until_all_status+0x50>
 80115fc:	2900      	cmp	r1, #0
 80115fe:	dce2      	bgt.n	80115c6 <uxr_run_session_until_all_status+0x32>
 8011600:	2300      	movs	r3, #0
 8011602:	67f3      	str	r3, [r6, #124]	@ 0x7c
 8011604:	442c      	add	r4, r5
 8011606:	e001      	b.n	801160c <uxr_run_session_until_all_status+0x78>
 8011608:	2b01      	cmp	r3, #1
 801160a:	d812      	bhi.n	8011632 <uxr_run_session_until_all_status+0x9e>
 801160c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8011610:	4284      	cmp	r4, r0
 8011612:	d1f9      	bne.n	8011608 <uxr_run_session_until_all_status+0x74>
 8011614:	2b01      	cmp	r3, #1
 8011616:	bf8c      	ite	hi
 8011618:	2000      	movhi	r0, #0
 801161a:	2001      	movls	r0, #1
 801161c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011620:	2900      	cmp	r1, #0
 8011622:	dded      	ble.n	8011600 <uxr_run_session_until_all_status+0x6c>
 8011624:	2a00      	cmp	r2, #0
 8011626:	d1ce      	bne.n	80115c6 <uxr_run_session_until_all_status+0x32>
 8011628:	e7ea      	b.n	8011600 <uxr_run_session_until_all_status+0x6c>
 801162a:	67f4      	str	r4, [r6, #124]	@ 0x7c
 801162c:	2001      	movs	r0, #1
 801162e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011632:	2000      	movs	r0, #0
 8011634:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08011638 <wait_session_status>:
 8011638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801163c:	4604      	mov	r4, r0
 801163e:	b09d      	sub	sp, #116	@ 0x74
 8011640:	20ff      	movs	r0, #255	@ 0xff
 8011642:	7160      	strb	r0, [r4, #5]
 8011644:	9303      	str	r3, [sp, #12]
 8011646:	2b00      	cmp	r3, #0
 8011648:	f000 80b6 	beq.w	80117b8 <wait_session_status+0x180>
 801164c:	468a      	mov	sl, r1
 801164e:	4691      	mov	r9, r2
 8011650:	f04f 0b00 	mov.w	fp, #0
 8011654:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8011656:	464a      	mov	r2, r9
 8011658:	e9d3 0500 	ldrd	r0, r5, [r3]
 801165c:	4651      	mov	r1, sl
 801165e:	47a8      	blx	r5
 8011660:	f000 fca4 	bl	8011fac <uxr_millis>
 8011664:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8011668:	4605      	mov	r5, r0
 801166a:	e009      	b.n	8011680 <wait_session_status+0x48>
 801166c:	f000 fc9e 	bl	8011fac <uxr_millis>
 8011670:	1b40      	subs	r0, r0, r5
 8011672:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8011676:	2b00      	cmp	r3, #0
 8011678:	dd40      	ble.n	80116fc <wait_session_status+0xc4>
 801167a:	7960      	ldrb	r0, [r4, #5]
 801167c:	28ff      	cmp	r0, #255	@ 0xff
 801167e:	d145      	bne.n	801170c <wait_session_status+0xd4>
 8011680:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8011682:	a908      	add	r1, sp, #32
 8011684:	6896      	ldr	r6, [r2, #8]
 8011686:	6810      	ldr	r0, [r2, #0]
 8011688:	aa09      	add	r2, sp, #36	@ 0x24
 801168a:	47b0      	blx	r6
 801168c:	2800      	cmp	r0, #0
 801168e:	d0ed      	beq.n	801166c <wait_session_status+0x34>
 8011690:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8011694:	a80c      	add	r0, sp, #48	@ 0x30
 8011696:	f7fe ff43 	bl	8010520 <ucdr_init_buffer>
 801169a:	2600      	movs	r6, #0
 801169c:	f10d 031e 	add.w	r3, sp, #30
 80116a0:	aa07      	add	r2, sp, #28
 80116a2:	a90c      	add	r1, sp, #48	@ 0x30
 80116a4:	4620      	mov	r0, r4
 80116a6:	f88d 601c 	strb.w	r6, [sp, #28]
 80116aa:	f000 fa87 	bl	8011bbc <uxr_read_session_header>
 80116ae:	2800      	cmp	r0, #0
 80116b0:	d0dc      	beq.n	801166c <wait_session_status+0x34>
 80116b2:	4631      	mov	r1, r6
 80116b4:	f89d 001c 	ldrb.w	r0, [sp, #28]
 80116b8:	f000 fb24 	bl	8011d04 <uxr_stream_id_from_raw>
 80116bc:	f3c0 4707 	ubfx	r7, r0, #16, #8
 80116c0:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80116c4:	9302      	str	r3, [sp, #8]
 80116c6:	2f01      	cmp	r7, #1
 80116c8:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 80116cc:	f3c0 2607 	ubfx	r6, r0, #8, #8
 80116d0:	d05c      	beq.n	801178c <wait_session_status+0x154>
 80116d2:	2f02      	cmp	r7, #2
 80116d4:	d020      	beq.n	8011718 <wait_session_status+0xe0>
 80116d6:	2f00      	cmp	r7, #0
 80116d8:	d1c8      	bne.n	801166c <wait_session_status+0x34>
 80116da:	4639      	mov	r1, r7
 80116dc:	4638      	mov	r0, r7
 80116de:	f000 fb11 	bl	8011d04 <uxr_stream_id_from_raw>
 80116e2:	a90c      	add	r1, sp, #48	@ 0x30
 80116e4:	4602      	mov	r2, r0
 80116e6:	900b      	str	r0, [sp, #44]	@ 0x2c
 80116e8:	4620      	mov	r0, r4
 80116ea:	f7ff fc2b 	bl	8010f44 <read_submessage_list>
 80116ee:	f000 fc5d 	bl	8011fac <uxr_millis>
 80116f2:	1b40      	subs	r0, r0, r5
 80116f4:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 80116f8:	2b00      	cmp	r3, #0
 80116fa:	dcbe      	bgt.n	801167a <wait_session_status+0x42>
 80116fc:	9b03      	ldr	r3, [sp, #12]
 80116fe:	7960      	ldrb	r0, [r4, #5]
 8011700:	f10b 0b01 	add.w	fp, fp, #1
 8011704:	455b      	cmp	r3, fp
 8011706:	d001      	beq.n	801170c <wait_session_status+0xd4>
 8011708:	28ff      	cmp	r0, #255	@ 0xff
 801170a:	d0a3      	beq.n	8011654 <wait_session_status+0x1c>
 801170c:	38ff      	subs	r0, #255	@ 0xff
 801170e:	bf18      	it	ne
 8011710:	2001      	movne	r0, #1
 8011712:	b01d      	add	sp, #116	@ 0x74
 8011714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011718:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 801171c:	9304      	str	r3, [sp, #16]
 801171e:	4631      	mov	r1, r6
 8011720:	f104 0008 	add.w	r0, r4, #8
 8011724:	f000 fbdc 	bl	8011ee0 <uxr_get_input_reliable_stream>
 8011728:	4680      	mov	r8, r0
 801172a:	b348      	cbz	r0, 8011780 <wait_session_status+0x148>
 801172c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801172e:	9205      	str	r2, [sp, #20]
 8011730:	a80c      	add	r0, sp, #48	@ 0x30
 8011732:	f7fe ff25 	bl	8010580 <ucdr_buffer_remaining>
 8011736:	4603      	mov	r3, r0
 8011738:	f10d 001d 	add.w	r0, sp, #29
 801173c:	9000      	str	r0, [sp, #0]
 801173e:	9a05      	ldr	r2, [sp, #20]
 8011740:	9902      	ldr	r1, [sp, #8]
 8011742:	4640      	mov	r0, r8
 8011744:	f006 feea 	bl	801851c <uxr_receive_reliable_message>
 8011748:	b1d0      	cbz	r0, 8011780 <wait_session_status+0x148>
 801174a:	f89d 301d 	ldrb.w	r3, [sp, #29]
 801174e:	2b00      	cmp	r3, #0
 8011750:	d03a      	beq.n	80117c8 <wait_session_status+0x190>
 8011752:	9f04      	ldr	r7, [sp, #16]
 8011754:	e00a      	b.n	801176c <wait_session_status+0x134>
 8011756:	f04f 0302 	mov.w	r3, #2
 801175a:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 801175e:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 8011762:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 8011766:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8011768:	f7ff fbec 	bl	8010f44 <read_submessage_list>
 801176c:	a914      	add	r1, sp, #80	@ 0x50
 801176e:	2204      	movs	r2, #4
 8011770:	4640      	mov	r0, r8
 8011772:	f006 ff53 	bl	801861c <uxr_next_input_reliable_buffer_available>
 8011776:	4603      	mov	r3, r0
 8011778:	a914      	add	r1, sp, #80	@ 0x50
 801177a:	4620      	mov	r0, r4
 801177c:	2b00      	cmp	r3, #0
 801177e:	d1ea      	bne.n	8011756 <wait_session_status+0x11e>
 8011780:	9904      	ldr	r1, [sp, #16]
 8011782:	4632      	mov	r2, r6
 8011784:	4620      	mov	r0, r4
 8011786:	f7ff fa57 	bl	8010c38 <write_submessage_acknack.isra.0>
 801178a:	e76f      	b.n	801166c <wait_session_status+0x34>
 801178c:	4631      	mov	r1, r6
 801178e:	f104 0008 	add.w	r0, r4, #8
 8011792:	f000 fb9b 	bl	8011ecc <uxr_get_input_best_effort_stream>
 8011796:	2800      	cmp	r0, #0
 8011798:	f43f af68 	beq.w	801166c <wait_session_status+0x34>
 801179c:	9902      	ldr	r1, [sp, #8]
 801179e:	f006 fe29 	bl	80183f4 <uxr_receive_best_effort_message>
 80117a2:	2800      	cmp	r0, #0
 80117a4:	f43f af62 	beq.w	801166c <wait_session_status+0x34>
 80117a8:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 80117ac:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80117ae:	a90c      	add	r1, sp, #48	@ 0x30
 80117b0:	4620      	mov	r0, r4
 80117b2:	f7ff fbc7 	bl	8010f44 <read_submessage_list>
 80117b6:	e759      	b.n	801166c <wait_session_status+0x34>
 80117b8:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80117ba:	e9d3 0400 	ldrd	r0, r4, [r3]
 80117be:	47a0      	blx	r4
 80117c0:	2001      	movs	r0, #1
 80117c2:	b01d      	add	sp, #116	@ 0x74
 80117c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80117c8:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 80117cc:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80117ce:	a90c      	add	r1, sp, #48	@ 0x30
 80117d0:	4620      	mov	r0, r4
 80117d2:	f7ff fbb7 	bl	8010f44 <read_submessage_list>
 80117d6:	e7bc      	b.n	8011752 <wait_session_status+0x11a>

080117d8 <uxr_delete_session_retries>:
 80117d8:	b530      	push	{r4, r5, lr}
 80117da:	b08f      	sub	sp, #60	@ 0x3c
 80117dc:	4604      	mov	r4, r0
 80117de:	460d      	mov	r5, r1
 80117e0:	f000 fa2e 	bl	8011c40 <uxr_session_header_offset>
 80117e4:	2300      	movs	r3, #0
 80117e6:	2210      	movs	r2, #16
 80117e8:	9000      	str	r0, [sp, #0]
 80117ea:	a902      	add	r1, sp, #8
 80117ec:	a806      	add	r0, sp, #24
 80117ee:	f7fe fe85 	bl	80104fc <ucdr_init_buffer_origin_offset>
 80117f2:	a906      	add	r1, sp, #24
 80117f4:	4620      	mov	r0, r4
 80117f6:	f000 f973 	bl	8011ae0 <uxr_buffer_delete_session>
 80117fa:	2200      	movs	r2, #0
 80117fc:	4611      	mov	r1, r2
 80117fe:	9b06      	ldr	r3, [sp, #24]
 8011800:	4620      	mov	r0, r4
 8011802:	f000 f9c7 	bl	8011b94 <uxr_stamp_session_header>
 8011806:	a806      	add	r0, sp, #24
 8011808:	f7fe feb6 	bl	8010578 <ucdr_buffer_length>
 801180c:	462b      	mov	r3, r5
 801180e:	4602      	mov	r2, r0
 8011810:	a902      	add	r1, sp, #8
 8011812:	4620      	mov	r0, r4
 8011814:	f7ff ff10 	bl	8011638 <wait_session_status>
 8011818:	b118      	cbz	r0, 8011822 <uxr_delete_session_retries+0x4a>
 801181a:	7960      	ldrb	r0, [r4, #5]
 801181c:	fab0 f080 	clz	r0, r0
 8011820:	0940      	lsrs	r0, r0, #5
 8011822:	b00f      	add	sp, #60	@ 0x3c
 8011824:	bd30      	pop	{r4, r5, pc}
 8011826:	bf00      	nop

08011828 <uxr_create_session>:
 8011828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801182c:	f100 0b08 	add.w	fp, r0, #8
 8011830:	b0ab      	sub	sp, #172	@ 0xac
 8011832:	4604      	mov	r4, r0
 8011834:	4658      	mov	r0, fp
 8011836:	f000 fa99 	bl	8011d6c <uxr_reset_stream_storage>
 801183a:	4620      	mov	r0, r4
 801183c:	f000 fa00 	bl	8011c40 <uxr_session_header_offset>
 8011840:	2300      	movs	r3, #0
 8011842:	9000      	str	r0, [sp, #0]
 8011844:	221c      	movs	r2, #28
 8011846:	a90b      	add	r1, sp, #44	@ 0x2c
 8011848:	a812      	add	r0, sp, #72	@ 0x48
 801184a:	f7fe fe57 	bl	80104fc <ucdr_init_buffer_origin_offset>
 801184e:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8011850:	8a1a      	ldrh	r2, [r3, #16]
 8011852:	3a04      	subs	r2, #4
 8011854:	b292      	uxth	r2, r2
 8011856:	a912      	add	r1, sp, #72	@ 0x48
 8011858:	4620      	mov	r0, r4
 801185a:	f000 f917 	bl	8011a8c <uxr_buffer_create_session>
 801185e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8011860:	4620      	mov	r0, r4
 8011862:	f000 f983 	bl	8011b6c <uxr_stamp_create_session_header>
 8011866:	a812      	add	r0, sp, #72	@ 0x48
 8011868:	f7fe fe86 	bl	8010578 <ucdr_buffer_length>
 801186c:	23ff      	movs	r3, #255	@ 0xff
 801186e:	7163      	strb	r3, [r4, #5]
 8011870:	230a      	movs	r3, #10
 8011872:	46da      	mov	sl, fp
 8011874:	9303      	str	r3, [sp, #12]
 8011876:	4683      	mov	fp, r0
 8011878:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801187a:	465a      	mov	r2, fp
 801187c:	e9d3 0500 	ldrd	r0, r5, [r3]
 8011880:	a90b      	add	r1, sp, #44	@ 0x2c
 8011882:	47a8      	blx	r5
 8011884:	f000 fb92 	bl	8011fac <uxr_millis>
 8011888:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801188c:	4605      	mov	r5, r0
 801188e:	e009      	b.n	80118a4 <uxr_create_session+0x7c>
 8011890:	f000 fb8c 	bl	8011fac <uxr_millis>
 8011894:	1b40      	subs	r0, r0, r5
 8011896:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 801189a:	2b00      	cmp	r3, #0
 801189c:	7962      	ldrb	r2, [r4, #5]
 801189e:	dd38      	ble.n	8011912 <uxr_create_session+0xea>
 80118a0:	2aff      	cmp	r2, #255	@ 0xff
 80118a2:	d13c      	bne.n	801191e <uxr_create_session+0xf6>
 80118a4:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 80118a6:	a907      	add	r1, sp, #28
 80118a8:	6896      	ldr	r6, [r2, #8]
 80118aa:	6810      	ldr	r0, [r2, #0]
 80118ac:	aa08      	add	r2, sp, #32
 80118ae:	47b0      	blx	r6
 80118b0:	2800      	cmp	r0, #0
 80118b2:	d0ed      	beq.n	8011890 <uxr_create_session+0x68>
 80118b4:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 80118b8:	a81a      	add	r0, sp, #104	@ 0x68
 80118ba:	f7fe fe31 	bl	8010520 <ucdr_init_buffer>
 80118be:	2600      	movs	r6, #0
 80118c0:	f10d 031a 	add.w	r3, sp, #26
 80118c4:	aa06      	add	r2, sp, #24
 80118c6:	a91a      	add	r1, sp, #104	@ 0x68
 80118c8:	4620      	mov	r0, r4
 80118ca:	f88d 6018 	strb.w	r6, [sp, #24]
 80118ce:	f000 f975 	bl	8011bbc <uxr_read_session_header>
 80118d2:	2800      	cmp	r0, #0
 80118d4:	d0dc      	beq.n	8011890 <uxr_create_session+0x68>
 80118d6:	4631      	mov	r1, r6
 80118d8:	f89d 0018 	ldrb.w	r0, [sp, #24]
 80118dc:	f000 fa12 	bl	8011d04 <uxr_stream_id_from_raw>
 80118e0:	f3c0 4607 	ubfx	r6, r0, #16, #8
 80118e4:	2e01      	cmp	r6, #1
 80118e6:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 80118ea:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 80118ee:	f3c0 2707 	ubfx	r7, r0, #8, #8
 80118f2:	d053      	beq.n	801199c <uxr_create_session+0x174>
 80118f4:	2e02      	cmp	r6, #2
 80118f6:	d018      	beq.n	801192a <uxr_create_session+0x102>
 80118f8:	2e00      	cmp	r6, #0
 80118fa:	d1c9      	bne.n	8011890 <uxr_create_session+0x68>
 80118fc:	4631      	mov	r1, r6
 80118fe:	4630      	mov	r0, r6
 8011900:	f000 fa00 	bl	8011d04 <uxr_stream_id_from_raw>
 8011904:	a91a      	add	r1, sp, #104	@ 0x68
 8011906:	4602      	mov	r2, r0
 8011908:	900a      	str	r0, [sp, #40]	@ 0x28
 801190a:	4620      	mov	r0, r4
 801190c:	f7ff fb1a 	bl	8010f44 <read_submessage_list>
 8011910:	e7be      	b.n	8011890 <uxr_create_session+0x68>
 8011912:	9b03      	ldr	r3, [sp, #12]
 8011914:	3b01      	subs	r3, #1
 8011916:	9303      	str	r3, [sp, #12]
 8011918:	d001      	beq.n	801191e <uxr_create_session+0xf6>
 801191a:	2aff      	cmp	r2, #255	@ 0xff
 801191c:	d0ac      	beq.n	8011878 <uxr_create_session+0x50>
 801191e:	2a00      	cmp	r2, #0
 8011920:	d051      	beq.n	80119c6 <uxr_create_session+0x19e>
 8011922:	2000      	movs	r0, #0
 8011924:	b02b      	add	sp, #172	@ 0xac
 8011926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801192a:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 801192e:	9304      	str	r3, [sp, #16]
 8011930:	4639      	mov	r1, r7
 8011932:	4650      	mov	r0, sl
 8011934:	f000 fad4 	bl	8011ee0 <uxr_get_input_reliable_stream>
 8011938:	4680      	mov	r8, r0
 801193a:	b348      	cbz	r0, 8011990 <uxr_create_session+0x168>
 801193c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801193e:	9205      	str	r2, [sp, #20]
 8011940:	a81a      	add	r0, sp, #104	@ 0x68
 8011942:	f7fe fe1d 	bl	8010580 <ucdr_buffer_remaining>
 8011946:	4603      	mov	r3, r0
 8011948:	f10d 0019 	add.w	r0, sp, #25
 801194c:	9000      	str	r0, [sp, #0]
 801194e:	9a05      	ldr	r2, [sp, #20]
 8011950:	4649      	mov	r1, r9
 8011952:	4640      	mov	r0, r8
 8011954:	f006 fde2 	bl	801851c <uxr_receive_reliable_message>
 8011958:	b1d0      	cbz	r0, 8011990 <uxr_create_session+0x168>
 801195a:	f89d 3019 	ldrb.w	r3, [sp, #25]
 801195e:	2b00      	cmp	r3, #0
 8011960:	d038      	beq.n	80119d4 <uxr_create_session+0x1ac>
 8011962:	9e04      	ldr	r6, [sp, #16]
 8011964:	e00a      	b.n	801197c <uxr_create_session+0x154>
 8011966:	f04f 0302 	mov.w	r3, #2
 801196a:	f88d 6028 	strb.w	r6, [sp, #40]	@ 0x28
 801196e:	f88d 7029 	strb.w	r7, [sp, #41]	@ 0x29
 8011972:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011976:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011978:	f7ff fae4 	bl	8010f44 <read_submessage_list>
 801197c:	a922      	add	r1, sp, #136	@ 0x88
 801197e:	2204      	movs	r2, #4
 8011980:	4640      	mov	r0, r8
 8011982:	f006 fe4b 	bl	801861c <uxr_next_input_reliable_buffer_available>
 8011986:	4603      	mov	r3, r0
 8011988:	a922      	add	r1, sp, #136	@ 0x88
 801198a:	4620      	mov	r0, r4
 801198c:	2b00      	cmp	r3, #0
 801198e:	d1ea      	bne.n	8011966 <uxr_create_session+0x13e>
 8011990:	9904      	ldr	r1, [sp, #16]
 8011992:	463a      	mov	r2, r7
 8011994:	4620      	mov	r0, r4
 8011996:	f7ff f94f 	bl	8010c38 <write_submessage_acknack.isra.0>
 801199a:	e779      	b.n	8011890 <uxr_create_session+0x68>
 801199c:	4639      	mov	r1, r7
 801199e:	4650      	mov	r0, sl
 80119a0:	f000 fa94 	bl	8011ecc <uxr_get_input_best_effort_stream>
 80119a4:	2800      	cmp	r0, #0
 80119a6:	f43f af73 	beq.w	8011890 <uxr_create_session+0x68>
 80119aa:	4649      	mov	r1, r9
 80119ac:	f006 fd22 	bl	80183f4 <uxr_receive_best_effort_message>
 80119b0:	2800      	cmp	r0, #0
 80119b2:	f43f af6d 	beq.w	8011890 <uxr_create_session+0x68>
 80119b6:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 80119ba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80119bc:	a91a      	add	r1, sp, #104	@ 0x68
 80119be:	4620      	mov	r0, r4
 80119c0:	f7ff fac0 	bl	8010f44 <read_submessage_list>
 80119c4:	e764      	b.n	8011890 <uxr_create_session+0x68>
 80119c6:	4650      	mov	r0, sl
 80119c8:	f000 f9d0 	bl	8011d6c <uxr_reset_stream_storage>
 80119cc:	2001      	movs	r0, #1
 80119ce:	b02b      	add	sp, #172	@ 0xac
 80119d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80119d4:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 80119d8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80119da:	a91a      	add	r1, sp, #104	@ 0x68
 80119dc:	4620      	mov	r0, r4
 80119de:	f7ff fab1 	bl	8010f44 <read_submessage_list>
 80119e2:	e7be      	b.n	8011962 <uxr_create_session+0x13a>

080119e4 <uxr_prepare_stream_to_write_submessage>:
 80119e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80119e8:	b082      	sub	sp, #8
 80119ea:	4682      	mov	sl, r0
 80119ec:	4610      	mov	r0, r2
 80119ee:	4615      	mov	r5, r2
 80119f0:	461e      	mov	r6, r3
 80119f2:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 80119f6:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 80119fa:	9101      	str	r1, [sp, #4]
 80119fc:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8011a00:	f000 face 	bl	8011fa0 <uxr_submessage_padding>
 8011a04:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011a08:	f105 0904 	add.w	r9, r5, #4
 8011a0c:	2b01      	cmp	r3, #1
 8011a0e:	4481      	add	r9, r0
 8011a10:	d01d      	beq.n	8011a4e <uxr_prepare_stream_to_write_submessage+0x6a>
 8011a12:	2b02      	cmp	r3, #2
 8011a14:	d116      	bne.n	8011a44 <uxr_prepare_stream_to_write_submessage+0x60>
 8011a16:	4621      	mov	r1, r4
 8011a18:	f10a 0008 	add.w	r0, sl, #8
 8011a1c:	f000 fa4c 	bl	8011eb8 <uxr_get_output_reliable_stream>
 8011a20:	4604      	mov	r4, r0
 8011a22:	b158      	cbz	r0, 8011a3c <uxr_prepare_stream_to_write_submessage+0x58>
 8011a24:	4649      	mov	r1, r9
 8011a26:	4632      	mov	r2, r6
 8011a28:	f006 ffb4 	bl	8018994 <uxr_prepare_reliable_buffer_to_write>
 8011a2c:	4604      	mov	r4, r0
 8011a2e:	b12c      	cbz	r4, 8011a3c <uxr_prepare_stream_to_write_submessage+0x58>
 8011a30:	4643      	mov	r3, r8
 8011a32:	b2aa      	uxth	r2, r5
 8011a34:	4639      	mov	r1, r7
 8011a36:	4630      	mov	r0, r6
 8011a38:	f000 fa72 	bl	8011f20 <uxr_buffer_submessage_header>
 8011a3c:	4620      	mov	r0, r4
 8011a3e:	b002      	add	sp, #8
 8011a40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011a44:	2400      	movs	r4, #0
 8011a46:	4620      	mov	r0, r4
 8011a48:	b002      	add	sp, #8
 8011a4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011a4e:	4621      	mov	r1, r4
 8011a50:	f10a 0008 	add.w	r0, sl, #8
 8011a54:	f000 fa28 	bl	8011ea8 <uxr_get_output_best_effort_stream>
 8011a58:	4604      	mov	r4, r0
 8011a5a:	2800      	cmp	r0, #0
 8011a5c:	d0ee      	beq.n	8011a3c <uxr_prepare_stream_to_write_submessage+0x58>
 8011a5e:	4649      	mov	r1, r9
 8011a60:	4632      	mov	r2, r6
 8011a62:	f006 fec7 	bl	80187f4 <uxr_prepare_best_effort_buffer_to_write>
 8011a66:	4604      	mov	r4, r0
 8011a68:	e7e1      	b.n	8011a2e <uxr_prepare_stream_to_write_submessage+0x4a>
 8011a6a:	bf00      	nop

08011a6c <uxr_init_session_info>:
 8011a6c:	0e13      	lsrs	r3, r2, #24
 8011a6e:	7043      	strb	r3, [r0, #1]
 8011a70:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8011a74:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8011a78:	7001      	strb	r1, [r0, #0]
 8011a7a:	70c3      	strb	r3, [r0, #3]
 8011a7c:	2109      	movs	r1, #9
 8011a7e:	23ff      	movs	r3, #255	@ 0xff
 8011a80:	f880 c002 	strb.w	ip, [r0, #2]
 8011a84:	7102      	strb	r2, [r0, #4]
 8011a86:	80c1      	strh	r1, [r0, #6]
 8011a88:	7143      	strb	r3, [r0, #5]
 8011a8a:	4770      	bx	lr

08011a8c <uxr_buffer_create_session>:
 8011a8c:	b530      	push	{r4, r5, lr}
 8011a8e:	b089      	sub	sp, #36	@ 0x24
 8011a90:	2300      	movs	r3, #0
 8011a92:	4d12      	ldr	r5, [pc, #72]	@ (8011adc <uxr_buffer_create_session+0x50>)
 8011a94:	9307      	str	r3, [sp, #28]
 8011a96:	f8ad 201c 	strh.w	r2, [sp, #28]
 8011a9a:	2201      	movs	r2, #1
 8011a9c:	9301      	str	r3, [sp, #4]
 8011a9e:	80c2      	strh	r2, [r0, #6]
 8011aa0:	f88d 2004 	strb.w	r2, [sp, #4]
 8011aa4:	682a      	ldr	r2, [r5, #0]
 8011aa6:	9200      	str	r2, [sp, #0]
 8011aa8:	88aa      	ldrh	r2, [r5, #4]
 8011aaa:	f8ad 2006 	strh.w	r2, [sp, #6]
 8011aae:	f8d0 2001 	ldr.w	r2, [r0, #1]
 8011ab2:	9202      	str	r2, [sp, #8]
 8011ab4:	460c      	mov	r4, r1
 8011ab6:	7802      	ldrb	r2, [r0, #0]
 8011ab8:	9303      	str	r3, [sp, #12]
 8011aba:	4619      	mov	r1, r3
 8011abc:	f88d 200c 	strb.w	r2, [sp, #12]
 8011ac0:	4620      	mov	r0, r4
 8011ac2:	2210      	movs	r2, #16
 8011ac4:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8011ac8:	9306      	str	r3, [sp, #24]
 8011aca:	f000 fa29 	bl	8011f20 <uxr_buffer_submessage_header>
 8011ace:	4669      	mov	r1, sp
 8011ad0:	4620      	mov	r0, r4
 8011ad2:	f001 faa1 	bl	8013018 <uxr_serialize_CREATE_CLIENT_Payload>
 8011ad6:	b009      	add	sp, #36	@ 0x24
 8011ad8:	bd30      	pop	{r4, r5, pc}
 8011ada:	bf00      	nop
 8011adc:	0801c600 	.word	0x0801c600

08011ae0 <uxr_buffer_delete_session>:
 8011ae0:	b510      	push	{r4, lr}
 8011ae2:	4b0c      	ldr	r3, [pc, #48]	@ (8011b14 <uxr_buffer_delete_session+0x34>)
 8011ae4:	b082      	sub	sp, #8
 8011ae6:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 8011aea:	f8ad c006 	strh.w	ip, [sp, #6]
 8011aee:	460c      	mov	r4, r1
 8011af0:	2202      	movs	r2, #2
 8011af2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8011af6:	80c2      	strh	r2, [r0, #6]
 8011af8:	f8ad 3004 	strh.w	r3, [sp, #4]
 8011afc:	2204      	movs	r2, #4
 8011afe:	2300      	movs	r3, #0
 8011b00:	2103      	movs	r1, #3
 8011b02:	4620      	mov	r0, r4
 8011b04:	f000 fa0c 	bl	8011f20 <uxr_buffer_submessage_header>
 8011b08:	a901      	add	r1, sp, #4
 8011b0a:	4620      	mov	r0, r4
 8011b0c:	f001 fb2a 	bl	8013164 <uxr_serialize_DELETE_Payload>
 8011b10:	b002      	add	sp, #8
 8011b12:	bd10      	pop	{r4, pc}
 8011b14:	0801c600 	.word	0x0801c600

08011b18 <uxr_read_create_session_status>:
 8011b18:	b510      	push	{r4, lr}
 8011b1a:	b088      	sub	sp, #32
 8011b1c:	4604      	mov	r4, r0
 8011b1e:	4608      	mov	r0, r1
 8011b20:	a901      	add	r1, sp, #4
 8011b22:	f001 fb2f 	bl	8013184 <uxr_deserialize_STATUS_AGENT_Payload>
 8011b26:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8011b2a:	7163      	strb	r3, [r4, #5]
 8011b2c:	b008      	add	sp, #32
 8011b2e:	bd10      	pop	{r4, pc}

08011b30 <uxr_read_delete_session_status>:
 8011b30:	b510      	push	{r4, lr}
 8011b32:	4604      	mov	r4, r0
 8011b34:	b084      	sub	sp, #16
 8011b36:	4608      	mov	r0, r1
 8011b38:	a902      	add	r1, sp, #8
 8011b3a:	f001 fb53 	bl	80131e4 <uxr_deserialize_STATUS_Payload>
 8011b3e:	88e3      	ldrh	r3, [r4, #6]
 8011b40:	2b02      	cmp	r3, #2
 8011b42:	d001      	beq.n	8011b48 <uxr_read_delete_session_status+0x18>
 8011b44:	b004      	add	sp, #16
 8011b46:	bd10      	pop	{r4, pc}
 8011b48:	f10d 000a 	add.w	r0, sp, #10
 8011b4c:	f7fe fffa 	bl	8010b44 <uxr_object_id_from_raw>
 8011b50:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8011b54:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8011b58:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8011b5c:	b29b      	uxth	r3, r3
 8011b5e:	2b02      	cmp	r3, #2
 8011b60:	bf04      	itt	eq
 8011b62:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 8011b66:	7163      	strbeq	r3, [r4, #5]
 8011b68:	b004      	add	sp, #16
 8011b6a:	bd10      	pop	{r4, pc}

08011b6c <uxr_stamp_create_session_header>:
 8011b6c:	b510      	push	{r4, lr}
 8011b6e:	2208      	movs	r2, #8
 8011b70:	b08a      	sub	sp, #40	@ 0x28
 8011b72:	4604      	mov	r4, r0
 8011b74:	eb0d 0002 	add.w	r0, sp, r2
 8011b78:	f7fe fcd2 	bl	8010520 <ucdr_init_buffer>
 8011b7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011b80:	9400      	str	r4, [sp, #0]
 8011b82:	2300      	movs	r3, #0
 8011b84:	461a      	mov	r2, r3
 8011b86:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 8011b8a:	a802      	add	r0, sp, #8
 8011b8c:	f000 fbc2 	bl	8012314 <uxr_serialize_message_header>
 8011b90:	b00a      	add	sp, #40	@ 0x28
 8011b92:	bd10      	pop	{r4, pc}

08011b94 <uxr_stamp_session_header>:
 8011b94:	b530      	push	{r4, r5, lr}
 8011b96:	b08d      	sub	sp, #52	@ 0x34
 8011b98:	4604      	mov	r4, r0
 8011b9a:	460d      	mov	r5, r1
 8011b9c:	9203      	str	r2, [sp, #12]
 8011b9e:	4619      	mov	r1, r3
 8011ba0:	a804      	add	r0, sp, #16
 8011ba2:	2208      	movs	r2, #8
 8011ba4:	f7fe fcbc 	bl	8010520 <ucdr_init_buffer>
 8011ba8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011bac:	9b03      	ldr	r3, [sp, #12]
 8011bae:	9400      	str	r4, [sp, #0]
 8011bb0:	462a      	mov	r2, r5
 8011bb2:	a804      	add	r0, sp, #16
 8011bb4:	f000 fbae 	bl	8012314 <uxr_serialize_message_header>
 8011bb8:	b00d      	add	sp, #52	@ 0x34
 8011bba:	bd30      	pop	{r4, r5, pc}

08011bbc <uxr_read_session_header>:
 8011bbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011bc0:	4607      	mov	r7, r0
 8011bc2:	b084      	sub	sp, #16
 8011bc4:	4608      	mov	r0, r1
 8011bc6:	460c      	mov	r4, r1
 8011bc8:	4615      	mov	r5, r2
 8011bca:	461e      	mov	r6, r3
 8011bcc:	f7fe fcd8 	bl	8010580 <ucdr_buffer_remaining>
 8011bd0:	2808      	cmp	r0, #8
 8011bd2:	d803      	bhi.n	8011bdc <uxr_read_session_header+0x20>
 8011bd4:	2000      	movs	r0, #0
 8011bd6:	b004      	add	sp, #16
 8011bd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011bdc:	f10d 080c 	add.w	r8, sp, #12
 8011be0:	4633      	mov	r3, r6
 8011be2:	462a      	mov	r2, r5
 8011be4:	f8cd 8000 	str.w	r8, [sp]
 8011be8:	4620      	mov	r0, r4
 8011bea:	f10d 010b 	add.w	r1, sp, #11
 8011bee:	f000 fbaf 	bl	8012350 <uxr_deserialize_message_header>
 8011bf2:	783a      	ldrb	r2, [r7, #0]
 8011bf4:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8011bf8:	4293      	cmp	r3, r2
 8011bfa:	d1eb      	bne.n	8011bd4 <uxr_read_session_header+0x18>
 8011bfc:	061b      	lsls	r3, r3, #24
 8011bfe:	d41c      	bmi.n	8011c3a <uxr_read_session_header+0x7e>
 8011c00:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8011c04:	787b      	ldrb	r3, [r7, #1]
 8011c06:	429a      	cmp	r2, r3
 8011c08:	d003      	beq.n	8011c12 <uxr_read_session_header+0x56>
 8011c0a:	2001      	movs	r0, #1
 8011c0c:	f080 0001 	eor.w	r0, r0, #1
 8011c10:	e7e1      	b.n	8011bd6 <uxr_read_session_header+0x1a>
 8011c12:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8011c16:	78bb      	ldrb	r3, [r7, #2]
 8011c18:	429a      	cmp	r2, r3
 8011c1a:	f107 0102 	add.w	r1, r7, #2
 8011c1e:	d1f4      	bne.n	8011c0a <uxr_read_session_header+0x4e>
 8011c20:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8011c24:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8011c28:	429a      	cmp	r2, r3
 8011c2a:	d1ee      	bne.n	8011c0a <uxr_read_session_header+0x4e>
 8011c2c:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8011c30:	784b      	ldrb	r3, [r1, #1]
 8011c32:	429a      	cmp	r2, r3
 8011c34:	d1e9      	bne.n	8011c0a <uxr_read_session_header+0x4e>
 8011c36:	2000      	movs	r0, #0
 8011c38:	e7e8      	b.n	8011c0c <uxr_read_session_header+0x50>
 8011c3a:	2001      	movs	r0, #1
 8011c3c:	e7cb      	b.n	8011bd6 <uxr_read_session_header+0x1a>
 8011c3e:	bf00      	nop

08011c40 <uxr_session_header_offset>:
 8011c40:	f990 3000 	ldrsb.w	r3, [r0]
 8011c44:	2b00      	cmp	r3, #0
 8011c46:	bfac      	ite	ge
 8011c48:	2008      	movge	r0, #8
 8011c4a:	2004      	movlt	r0, #4
 8011c4c:	4770      	bx	lr
 8011c4e:	bf00      	nop

08011c50 <uxr_init_base_object_request>:
 8011c50:	b510      	push	{r4, lr}
 8011c52:	88c3      	ldrh	r3, [r0, #6]
 8011c54:	b082      	sub	sp, #8
 8011c56:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 8011c5a:	9101      	str	r1, [sp, #4]
 8011c5c:	f1a3 010a 	sub.w	r1, r3, #10
 8011c60:	b289      	uxth	r1, r1
 8011c62:	42a1      	cmp	r1, r4
 8011c64:	d80e      	bhi.n	8011c84 <uxr_init_base_object_request+0x34>
 8011c66:	3301      	adds	r3, #1
 8011c68:	b29c      	uxth	r4, r3
 8011c6a:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8011c6e:	b2db      	uxtb	r3, r3
 8011c70:	80c4      	strh	r4, [r0, #6]
 8011c72:	9801      	ldr	r0, [sp, #4]
 8011c74:	7011      	strb	r1, [r2, #0]
 8011c76:	7053      	strb	r3, [r2, #1]
 8011c78:	1c91      	adds	r1, r2, #2
 8011c7a:	f7fe ff77 	bl	8010b6c <uxr_object_id_to_raw>
 8011c7e:	4620      	mov	r0, r4
 8011c80:	b002      	add	sp, #8
 8011c82:	bd10      	pop	{r4, pc}
 8011c84:	230a      	movs	r3, #10
 8011c86:	2100      	movs	r1, #0
 8011c88:	461c      	mov	r4, r3
 8011c8a:	e7f1      	b.n	8011c70 <uxr_init_base_object_request+0x20>

08011c8c <uxr_parse_base_object_request>:
 8011c8c:	b570      	push	{r4, r5, r6, lr}
 8011c8e:	4604      	mov	r4, r0
 8011c90:	3002      	adds	r0, #2
 8011c92:	460d      	mov	r5, r1
 8011c94:	4616      	mov	r6, r2
 8011c96:	f7fe ff55 	bl	8010b44 <uxr_object_id_from_raw>
 8011c9a:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8011c9e:	8028      	strh	r0, [r5, #0]
 8011ca0:	806b      	strh	r3, [r5, #2]
 8011ca2:	7822      	ldrb	r2, [r4, #0]
 8011ca4:	7863      	ldrb	r3, [r4, #1]
 8011ca6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8011caa:	8033      	strh	r3, [r6, #0]
 8011cac:	bd70      	pop	{r4, r5, r6, pc}
 8011cae:	bf00      	nop

08011cb0 <uxr_stream_id>:
 8011cb0:	2901      	cmp	r1, #1
 8011cb2:	b082      	sub	sp, #8
 8011cb4:	d01d      	beq.n	8011cf2 <uxr_stream_id+0x42>
 8011cb6:	2902      	cmp	r1, #2
 8011cb8:	f04f 0c00 	mov.w	ip, #0
 8011cbc:	d01e      	beq.n	8011cfc <uxr_stream_id+0x4c>
 8011cbe:	2300      	movs	r3, #0
 8011cc0:	f36c 0307 	bfi	r3, ip, #0, #8
 8011cc4:	f360 230f 	bfi	r3, r0, #8, #8
 8011cc8:	f361 4317 	bfi	r3, r1, #16, #8
 8011ccc:	f362 631f 	bfi	r3, r2, #24, #8
 8011cd0:	b2da      	uxtb	r2, r3
 8011cd2:	2000      	movs	r0, #0
 8011cd4:	f362 0007 	bfi	r0, r2, #0, #8
 8011cd8:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8011cdc:	f362 200f 	bfi	r0, r2, #8, #8
 8011ce0:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8011ce4:	f362 4017 	bfi	r0, r2, #16, #8
 8011ce8:	0e1b      	lsrs	r3, r3, #24
 8011cea:	f363 601f 	bfi	r0, r3, #24, #8
 8011cee:	b002      	add	sp, #8
 8011cf0:	4770      	bx	lr
 8011cf2:	f100 0c01 	add.w	ip, r0, #1
 8011cf6:	fa5f fc8c 	uxtb.w	ip, ip
 8011cfa:	e7e0      	b.n	8011cbe <uxr_stream_id+0xe>
 8011cfc:	f080 0c80 	eor.w	ip, r0, #128	@ 0x80
 8011d00:	e7dd      	b.n	8011cbe <uxr_stream_id+0xe>
 8011d02:	bf00      	nop

08011d04 <uxr_stream_id_from_raw>:
 8011d04:	b082      	sub	sp, #8
 8011d06:	b130      	cbz	r0, 8011d16 <uxr_stream_id_from_raw+0x12>
 8011d08:	0603      	lsls	r3, r0, #24
 8011d0a:	d420      	bmi.n	8011d4e <uxr_stream_id_from_raw+0x4a>
 8011d0c:	1e42      	subs	r2, r0, #1
 8011d0e:	b2d2      	uxtb	r2, r2
 8011d10:	f04f 0c01 	mov.w	ip, #1
 8011d14:	e001      	b.n	8011d1a <uxr_stream_id_from_raw+0x16>
 8011d16:	4684      	mov	ip, r0
 8011d18:	4602      	mov	r2, r0
 8011d1a:	2300      	movs	r3, #0
 8011d1c:	f360 0307 	bfi	r3, r0, #0, #8
 8011d20:	f362 230f 	bfi	r3, r2, #8, #8
 8011d24:	f36c 4317 	bfi	r3, ip, #16, #8
 8011d28:	f361 631f 	bfi	r3, r1, #24, #8
 8011d2c:	b2da      	uxtb	r2, r3
 8011d2e:	2000      	movs	r0, #0
 8011d30:	f362 0007 	bfi	r0, r2, #0, #8
 8011d34:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8011d38:	f362 200f 	bfi	r0, r2, #8, #8
 8011d3c:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8011d40:	f362 4017 	bfi	r0, r2, #16, #8
 8011d44:	0e1b      	lsrs	r3, r3, #24
 8011d46:	f363 601f 	bfi	r0, r3, #24, #8
 8011d4a:	b002      	add	sp, #8
 8011d4c:	4770      	bx	lr
 8011d4e:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 8011d52:	f04f 0c02 	mov.w	ip, #2
 8011d56:	e7e0      	b.n	8011d1a <uxr_stream_id_from_raw+0x16>

08011d58 <uxr_init_stream_storage>:
 8011d58:	2300      	movs	r3, #0
 8011d5a:	7403      	strb	r3, [r0, #16]
 8011d5c:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 8011d60:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 8011d64:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 8011d68:	4770      	bx	lr
 8011d6a:	bf00      	nop

08011d6c <uxr_reset_stream_storage>:
 8011d6c:	b570      	push	{r4, r5, r6, lr}
 8011d6e:	7c03      	ldrb	r3, [r0, #16]
 8011d70:	4604      	mov	r4, r0
 8011d72:	b153      	cbz	r3, 8011d8a <uxr_reset_stream_storage+0x1e>
 8011d74:	4606      	mov	r6, r0
 8011d76:	2500      	movs	r5, #0
 8011d78:	4630      	mov	r0, r6
 8011d7a:	f006 fd35 	bl	80187e8 <uxr_reset_output_best_effort_stream>
 8011d7e:	7c23      	ldrb	r3, [r4, #16]
 8011d80:	3501      	adds	r5, #1
 8011d82:	42ab      	cmp	r3, r5
 8011d84:	f106 0610 	add.w	r6, r6, #16
 8011d88:	d8f6      	bhi.n	8011d78 <uxr_reset_stream_storage+0xc>
 8011d8a:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8011d8e:	b163      	cbz	r3, 8011daa <uxr_reset_stream_storage+0x3e>
 8011d90:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011d94:	2500      	movs	r5, #0
 8011d96:	4630      	mov	r0, r6
 8011d98:	f006 fb28 	bl	80183ec <uxr_reset_input_best_effort_stream>
 8011d9c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8011da0:	3501      	adds	r5, #1
 8011da2:	42ab      	cmp	r3, r5
 8011da4:	f106 0602 	add.w	r6, r6, #2
 8011da8:	d8f5      	bhi.n	8011d96 <uxr_reset_stream_storage+0x2a>
 8011daa:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8011dae:	b163      	cbz	r3, 8011dca <uxr_reset_stream_storage+0x5e>
 8011db0:	f104 0618 	add.w	r6, r4, #24
 8011db4:	2500      	movs	r5, #0
 8011db6:	4630      	mov	r0, r6
 8011db8:	f006 fdc2 	bl	8018940 <uxr_reset_output_reliable_stream>
 8011dbc:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8011dc0:	3501      	adds	r5, #1
 8011dc2:	42ab      	cmp	r3, r5
 8011dc4:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 8011dc8:	d8f5      	bhi.n	8011db6 <uxr_reset_stream_storage+0x4a>
 8011dca:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8011dce:	b163      	cbz	r3, 8011dea <uxr_reset_stream_storage+0x7e>
 8011dd0:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 8011dd4:	2500      	movs	r5, #0
 8011dd6:	4630      	mov	r0, r6
 8011dd8:	f006 fb7c 	bl	80184d4 <uxr_reset_input_reliable_stream>
 8011ddc:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8011de0:	3501      	adds	r5, #1
 8011de2:	42ab      	cmp	r3, r5
 8011de4:	f106 0618 	add.w	r6, r6, #24
 8011de8:	d8f5      	bhi.n	8011dd6 <uxr_reset_stream_storage+0x6a>
 8011dea:	bd70      	pop	{r4, r5, r6, pc}

08011dec <uxr_add_output_best_effort_buffer>:
 8011dec:	b510      	push	{r4, lr}
 8011dee:	7c04      	ldrb	r4, [r0, #16]
 8011df0:	f104 0c01 	add.w	ip, r4, #1
 8011df4:	b082      	sub	sp, #8
 8011df6:	f880 c010 	strb.w	ip, [r0, #16]
 8011dfa:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8011dfe:	f006 fce9 	bl	80187d4 <uxr_init_output_best_effort_stream>
 8011e02:	2201      	movs	r2, #1
 8011e04:	4611      	mov	r1, r2
 8011e06:	4620      	mov	r0, r4
 8011e08:	b002      	add	sp, #8
 8011e0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011e0e:	f7ff bf4f 	b.w	8011cb0 <uxr_stream_id>
 8011e12:	bf00      	nop

08011e14 <uxr_add_output_reliable_buffer>:
 8011e14:	b510      	push	{r4, lr}
 8011e16:	b084      	sub	sp, #16
 8011e18:	4684      	mov	ip, r0
 8011e1a:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8011e1e:	9000      	str	r0, [sp, #0]
 8011e20:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 8011e24:	2028      	movs	r0, #40	@ 0x28
 8011e26:	fb00 c004 	mla	r0, r0, r4, ip
 8011e2a:	f104 0e01 	add.w	lr, r4, #1
 8011e2e:	3018      	adds	r0, #24
 8011e30:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 8011e34:	f006 fd4c 	bl	80188d0 <uxr_init_output_reliable_stream>
 8011e38:	2201      	movs	r2, #1
 8011e3a:	2102      	movs	r1, #2
 8011e3c:	4620      	mov	r0, r4
 8011e3e:	b004      	add	sp, #16
 8011e40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011e44:	f7ff bf34 	b.w	8011cb0 <uxr_stream_id>

08011e48 <uxr_add_input_best_effort_buffer>:
 8011e48:	b510      	push	{r4, lr}
 8011e4a:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 8011e4e:	4603      	mov	r3, r0
 8011e50:	1c62      	adds	r2, r4, #1
 8011e52:	f104 0021 	add.w	r0, r4, #33	@ 0x21
 8011e56:	b082      	sub	sp, #8
 8011e58:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8011e5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8011e60:	f006 fac0 	bl	80183e4 <uxr_init_input_best_effort_stream>
 8011e64:	2200      	movs	r2, #0
 8011e66:	2101      	movs	r1, #1
 8011e68:	4620      	mov	r0, r4
 8011e6a:	b002      	add	sp, #8
 8011e6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011e70:	f7ff bf1e 	b.w	8011cb0 <uxr_stream_id>

08011e74 <uxr_add_input_reliable_buffer>:
 8011e74:	b510      	push	{r4, lr}
 8011e76:	b084      	sub	sp, #16
 8011e78:	4684      	mov	ip, r0
 8011e7a:	9806      	ldr	r0, [sp, #24]
 8011e7c:	9000      	str	r0, [sp, #0]
 8011e7e:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 8011e82:	2018      	movs	r0, #24
 8011e84:	fb00 c004 	mla	r0, r0, r4, ip
 8011e88:	f104 0e01 	add.w	lr, r4, #1
 8011e8c:	3048      	adds	r0, #72	@ 0x48
 8011e8e:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 8011e92:	f006 faf3 	bl	801847c <uxr_init_input_reliable_stream>
 8011e96:	2200      	movs	r2, #0
 8011e98:	2102      	movs	r1, #2
 8011e9a:	4620      	mov	r0, r4
 8011e9c:	b004      	add	sp, #16
 8011e9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011ea2:	f7ff bf05 	b.w	8011cb0 <uxr_stream_id>
 8011ea6:	bf00      	nop

08011ea8 <uxr_get_output_best_effort_stream>:
 8011ea8:	7c03      	ldrb	r3, [r0, #16]
 8011eaa:	428b      	cmp	r3, r1
 8011eac:	bf8c      	ite	hi
 8011eae:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 8011eb2:	2000      	movls	r0, #0
 8011eb4:	4770      	bx	lr
 8011eb6:	bf00      	nop

08011eb8 <uxr_get_output_reliable_stream>:
 8011eb8:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8011ebc:	428b      	cmp	r3, r1
 8011ebe:	bf83      	ittte	hi
 8011ec0:	2328      	movhi	r3, #40	@ 0x28
 8011ec2:	fb03 0001 	mlahi	r0, r3, r1, r0
 8011ec6:	3018      	addhi	r0, #24
 8011ec8:	2000      	movls	r0, #0
 8011eca:	4770      	bx	lr

08011ecc <uxr_get_input_best_effort_stream>:
 8011ecc:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8011ed0:	428b      	cmp	r3, r1
 8011ed2:	bf86      	itte	hi
 8011ed4:	3121      	addhi	r1, #33	@ 0x21
 8011ed6:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 8011eda:	2000      	movls	r0, #0
 8011edc:	4770      	bx	lr
 8011ede:	bf00      	nop

08011ee0 <uxr_get_input_reliable_stream>:
 8011ee0:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 8011ee4:	428b      	cmp	r3, r1
 8011ee6:	bf83      	ittte	hi
 8011ee8:	2318      	movhi	r3, #24
 8011eea:	fb03 0001 	mlahi	r0, r3, r1, r0
 8011eee:	3048      	addhi	r0, #72	@ 0x48
 8011ef0:	2000      	movls	r0, #0
 8011ef2:	4770      	bx	lr

08011ef4 <uxr_output_streams_confirmed>:
 8011ef4:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8011ef8:	b183      	cbz	r3, 8011f1c <uxr_output_streams_confirmed+0x28>
 8011efa:	b570      	push	{r4, r5, r6, lr}
 8011efc:	4606      	mov	r6, r0
 8011efe:	f100 0518 	add.w	r5, r0, #24
 8011f02:	2400      	movs	r4, #0
 8011f04:	e001      	b.n	8011f0a <uxr_output_streams_confirmed+0x16>
 8011f06:	3528      	adds	r5, #40	@ 0x28
 8011f08:	b138      	cbz	r0, 8011f1a <uxr_output_streams_confirmed+0x26>
 8011f0a:	4628      	mov	r0, r5
 8011f0c:	f006 ff88 	bl	8018e20 <uxr_is_output_up_to_date>
 8011f10:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 8011f14:	3401      	adds	r4, #1
 8011f16:	42a3      	cmp	r3, r4
 8011f18:	d8f5      	bhi.n	8011f06 <uxr_output_streams_confirmed+0x12>
 8011f1a:	bd70      	pop	{r4, r5, r6, pc}
 8011f1c:	2001      	movs	r0, #1
 8011f1e:	4770      	bx	lr

08011f20 <uxr_buffer_submessage_header>:
 8011f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f22:	4604      	mov	r4, r0
 8011f24:	460e      	mov	r6, r1
 8011f26:	2104      	movs	r1, #4
 8011f28:	4615      	mov	r5, r2
 8011f2a:	461f      	mov	r7, r3
 8011f2c:	f7fe fb12 	bl	8010554 <ucdr_align_to>
 8011f30:	2301      	movs	r3, #1
 8011f32:	ea47 0203 	orr.w	r2, r7, r3
 8011f36:	4631      	mov	r1, r6
 8011f38:	7523      	strb	r3, [r4, #20]
 8011f3a:	4620      	mov	r0, r4
 8011f3c:	462b      	mov	r3, r5
 8011f3e:	f000 fa27 	bl	8012390 <uxr_serialize_submessage_header>
 8011f42:	4620      	mov	r0, r4
 8011f44:	f7fe fb1c 	bl	8010580 <ucdr_buffer_remaining>
 8011f48:	42a8      	cmp	r0, r5
 8011f4a:	bf34      	ite	cc
 8011f4c:	2000      	movcc	r0, #0
 8011f4e:	2001      	movcs	r0, #1
 8011f50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011f52:	bf00      	nop

08011f54 <uxr_read_submessage_header>:
 8011f54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f58:	4604      	mov	r4, r0
 8011f5a:	460d      	mov	r5, r1
 8011f5c:	2104      	movs	r1, #4
 8011f5e:	4616      	mov	r6, r2
 8011f60:	4698      	mov	r8, r3
 8011f62:	f7fe faf7 	bl	8010554 <ucdr_align_to>
 8011f66:	4620      	mov	r0, r4
 8011f68:	f7fe fb0a 	bl	8010580 <ucdr_buffer_remaining>
 8011f6c:	2803      	cmp	r0, #3
 8011f6e:	bf8c      	ite	hi
 8011f70:	2701      	movhi	r7, #1
 8011f72:	2700      	movls	r7, #0
 8011f74:	d802      	bhi.n	8011f7c <uxr_read_submessage_header+0x28>
 8011f76:	4638      	mov	r0, r7
 8011f78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011f7c:	4633      	mov	r3, r6
 8011f7e:	4642      	mov	r2, r8
 8011f80:	4620      	mov	r0, r4
 8011f82:	4629      	mov	r1, r5
 8011f84:	f000 fa18 	bl	80123b8 <uxr_deserialize_submessage_header>
 8011f88:	f898 3000 	ldrb.w	r3, [r8]
 8011f8c:	f003 0201 	and.w	r2, r3, #1
 8011f90:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8011f94:	f888 3000 	strb.w	r3, [r8]
 8011f98:	7522      	strb	r2, [r4, #20]
 8011f9a:	4638      	mov	r0, r7
 8011f9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011fa0 <uxr_submessage_padding>:
 8011fa0:	f010 0003 	ands.w	r0, r0, #3
 8011fa4:	bf18      	it	ne
 8011fa6:	f1c0 0004 	rsbne	r0, r0, #4
 8011faa:	4770      	bx	lr

08011fac <uxr_millis>:
 8011fac:	b510      	push	{r4, lr}
 8011fae:	b084      	sub	sp, #16
 8011fb0:	4669      	mov	r1, sp
 8011fb2:	2001      	movs	r0, #1
 8011fb4:	f7f0 fa38 	bl	8002428 <clock_gettime>
 8011fb8:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 8011fbc:	4906      	ldr	r1, [pc, #24]	@ (8011fd8 <uxr_millis+0x2c>)
 8011fbe:	fba0 0301 	umull	r0, r3, r0, r1
 8011fc2:	1900      	adds	r0, r0, r4
 8011fc4:	fb01 3102 	mla	r1, r1, r2, r3
 8011fc8:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8011fcc:	4a03      	ldr	r2, [pc, #12]	@ (8011fdc <uxr_millis+0x30>)
 8011fce:	2300      	movs	r3, #0
 8011fd0:	f7ee fe24 	bl	8000c1c <__aeabi_ldivmod>
 8011fd4:	b004      	add	sp, #16
 8011fd6:	bd10      	pop	{r4, pc}
 8011fd8:	3b9aca00 	.word	0x3b9aca00
 8011fdc:	000f4240 	.word	0x000f4240

08011fe0 <uxr_nanos>:
 8011fe0:	b510      	push	{r4, lr}
 8011fe2:	b084      	sub	sp, #16
 8011fe4:	4669      	mov	r1, sp
 8011fe6:	2001      	movs	r0, #1
 8011fe8:	f7f0 fa1e 	bl	8002428 <clock_gettime>
 8011fec:	4a06      	ldr	r2, [pc, #24]	@ (8012008 <uxr_nanos+0x28>)
 8011fee:	9800      	ldr	r0, [sp, #0]
 8011ff0:	9902      	ldr	r1, [sp, #8]
 8011ff2:	9c01      	ldr	r4, [sp, #4]
 8011ff4:	fba0 0302 	umull	r0, r3, r0, r2
 8011ff8:	1840      	adds	r0, r0, r1
 8011ffa:	fb02 3304 	mla	r3, r2, r4, r3
 8011ffe:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 8012002:	b004      	add	sp, #16
 8012004:	bd10      	pop	{r4, pc}
 8012006:	bf00      	nop
 8012008:	3b9aca00 	.word	0x3b9aca00

0801200c <on_full_output_buffer_fragmented>:
 801200c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012010:	460c      	mov	r4, r1
 8012012:	b08a      	sub	sp, #40	@ 0x28
 8012014:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 8012018:	4606      	mov	r6, r0
 801201a:	f104 0008 	add.w	r0, r4, #8
 801201e:	f7ff ff4b 	bl	8011eb8 <uxr_get_output_reliable_stream>
 8012022:	4605      	mov	r5, r0
 8012024:	f006 ff06 	bl	8018e34 <get_available_free_slots>
 8012028:	b968      	cbnz	r0, 8012046 <on_full_output_buffer_fragmented+0x3a>
 801202a:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 801202e:	4620      	mov	r0, r4
 8012030:	4798      	blx	r3
 8012032:	b918      	cbnz	r0, 801203c <on_full_output_buffer_fragmented+0x30>
 8012034:	2001      	movs	r0, #1
 8012036:	b00a      	add	sp, #40	@ 0x28
 8012038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801203c:	4628      	mov	r0, r5
 801203e:	f006 fef9 	bl	8018e34 <get_available_free_slots>
 8012042:	2800      	cmp	r0, #0
 8012044:	d0f6      	beq.n	8012034 <on_full_output_buffer_fragmented+0x28>
 8012046:	8929      	ldrh	r1, [r5, #8]
 8012048:	89eb      	ldrh	r3, [r5, #14]
 801204a:	7b28      	ldrb	r0, [r5, #12]
 801204c:	686a      	ldr	r2, [r5, #4]
 801204e:	fbb2 f8f1 	udiv	r8, r2, r1
 8012052:	fbb3 f2f1 	udiv	r2, r3, r1
 8012056:	fb01 3112 	mls	r1, r1, r2, r3
 801205a:	f5c0 407f 	rsb	r0, r0, #65280	@ 0xff00
 801205e:	b289      	uxth	r1, r1
 8012060:	fb08 f101 	mul.w	r1, r8, r1
 8012064:	30fc      	adds	r0, #252	@ 0xfc
 8012066:	f1a8 0804 	sub.w	r8, r8, #4
 801206a:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 801206e:	4440      	add	r0, r8
 8012070:	b287      	uxth	r7, r0
 8012072:	1bdb      	subs	r3, r3, r7
 8012074:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 8012078:	682b      	ldr	r3, [r5, #0]
 801207a:	3104      	adds	r1, #4
 801207c:	4419      	add	r1, r3
 801207e:	4642      	mov	r2, r8
 8012080:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012084:	9300      	str	r3, [sp, #0]
 8012086:	a802      	add	r0, sp, #8
 8012088:	2300      	movs	r3, #0
 801208a:	f7fe fa37 	bl	80104fc <ucdr_init_buffer_origin_offset>
 801208e:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8012092:	f102 0308 	add.w	r3, r2, #8
 8012096:	4543      	cmp	r3, r8
 8012098:	d928      	bls.n	80120ec <on_full_output_buffer_fragmented+0xe0>
 801209a:	463a      	mov	r2, r7
 801209c:	2300      	movs	r3, #0
 801209e:	210d      	movs	r1, #13
 80120a0:	a802      	add	r0, sp, #8
 80120a2:	f7ff ff3d 	bl	8011f20 <uxr_buffer_submessage_header>
 80120a6:	8929      	ldrh	r1, [r5, #8]
 80120a8:	89eb      	ldrh	r3, [r5, #14]
 80120aa:	fbb3 f2f1 	udiv	r2, r3, r1
 80120ae:	fb01 3312 	mls	r3, r1, r2, r3
 80120b2:	b29b      	uxth	r3, r3
 80120b4:	686a      	ldr	r2, [r5, #4]
 80120b6:	fbb2 f2f1 	udiv	r2, r2, r1
 80120ba:	fb02 f303 	mul.w	r3, r2, r3
 80120be:	682a      	ldr	r2, [r5, #0]
 80120c0:	f842 8003 	str.w	r8, [r2, r3]
 80120c4:	89e8      	ldrh	r0, [r5, #14]
 80120c6:	2101      	movs	r1, #1
 80120c8:	f007 f804 	bl	80190d4 <uxr_seq_num_add>
 80120cc:	9904      	ldr	r1, [sp, #16]
 80120ce:	9a03      	ldr	r2, [sp, #12]
 80120d0:	81e8      	strh	r0, [r5, #14]
 80120d2:	1a52      	subs	r2, r2, r1
 80120d4:	4630      	mov	r0, r6
 80120d6:	f7fe fa23 	bl	8010520 <ucdr_init_buffer>
 80120da:	4630      	mov	r0, r6
 80120dc:	490f      	ldr	r1, [pc, #60]	@ (801211c <on_full_output_buffer_fragmented+0x110>)
 80120de:	4622      	mov	r2, r4
 80120e0:	f7fe f9f2 	bl	80104c8 <ucdr_set_on_full_buffer_callback>
 80120e4:	2000      	movs	r0, #0
 80120e6:	b00a      	add	sp, #40	@ 0x28
 80120e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80120ec:	b292      	uxth	r2, r2
 80120ee:	2302      	movs	r3, #2
 80120f0:	210d      	movs	r1, #13
 80120f2:	a802      	add	r0, sp, #8
 80120f4:	f7ff ff14 	bl	8011f20 <uxr_buffer_submessage_header>
 80120f8:	8928      	ldrh	r0, [r5, #8]
 80120fa:	89eb      	ldrh	r3, [r5, #14]
 80120fc:	fbb3 f1f0 	udiv	r1, r3, r0
 8012100:	fb00 3311 	mls	r3, r0, r1, r3
 8012104:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8012108:	6869      	ldr	r1, [r5, #4]
 801210a:	fbb1 f1f0 	udiv	r1, r1, r0
 801210e:	b29b      	uxth	r3, r3
 8012110:	fb01 f303 	mul.w	r3, r1, r3
 8012114:	6829      	ldr	r1, [r5, #0]
 8012116:	3208      	adds	r2, #8
 8012118:	50ca      	str	r2, [r1, r3]
 801211a:	e7d3      	b.n	80120c4 <on_full_output_buffer_fragmented+0xb8>
 801211c:	0801200d 	.word	0x0801200d

08012120 <uxr_prepare_output_stream>:
 8012120:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012122:	b087      	sub	sp, #28
 8012124:	2707      	movs	r7, #7
 8012126:	9202      	str	r2, [sp, #8]
 8012128:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801212a:	9103      	str	r1, [sp, #12]
 801212c:	2500      	movs	r5, #0
 801212e:	3204      	adds	r2, #4
 8012130:	e9cd 7500 	strd	r7, r5, [sp]
 8012134:	461c      	mov	r4, r3
 8012136:	4606      	mov	r6, r0
 8012138:	f7ff fc54 	bl	80119e4 <uxr_prepare_stream_to_write_submessage>
 801213c:	f080 0201 	eor.w	r2, r0, #1
 8012140:	b2d2      	uxtb	r2, r2
 8012142:	75a2      	strb	r2, [r4, #22]
 8012144:	b112      	cbz	r2, 801214c <uxr_prepare_output_stream+0x2c>
 8012146:	4628      	mov	r0, r5
 8012148:	b007      	add	sp, #28
 801214a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801214c:	aa05      	add	r2, sp, #20
 801214e:	9902      	ldr	r1, [sp, #8]
 8012150:	4630      	mov	r0, r6
 8012152:	f7ff fd7d 	bl	8011c50 <uxr_init_base_object_request>
 8012156:	a905      	add	r1, sp, #20
 8012158:	4605      	mov	r5, r0
 801215a:	4620      	mov	r0, r4
 801215c:	f001 f8c0 	bl	80132e0 <uxr_serialize_WRITE_DATA_Payload_Data>
 8012160:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8012164:	69a6      	ldr	r6, [r4, #24]
 8012166:	69e7      	ldr	r7, [r4, #28]
 8012168:	1a52      	subs	r2, r2, r1
 801216a:	4620      	mov	r0, r4
 801216c:	f7fe f9d8 	bl	8010520 <ucdr_init_buffer>
 8012170:	4620      	mov	r0, r4
 8012172:	463a      	mov	r2, r7
 8012174:	4631      	mov	r1, r6
 8012176:	f7fe f9a7 	bl	80104c8 <ucdr_set_on_full_buffer_callback>
 801217a:	4628      	mov	r0, r5
 801217c:	b007      	add	sp, #28
 801217e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012180 <uxr_prepare_output_stream_fragmented>:
 8012180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012184:	b091      	sub	sp, #68	@ 0x44
 8012186:	4605      	mov	r5, r0
 8012188:	9105      	str	r1, [sp, #20]
 801218a:	3008      	adds	r0, #8
 801218c:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8012190:	461e      	mov	r6, r3
 8012192:	9204      	str	r2, [sp, #16]
 8012194:	f7ff fe90 	bl	8011eb8 <uxr_get_output_reliable_stream>
 8012198:	f89d 3016 	ldrb.w	r3, [sp, #22]
 801219c:	2b01      	cmp	r3, #1
 801219e:	f000 8091 	beq.w	80122c4 <uxr_prepare_output_stream_fragmented+0x144>
 80121a2:	4604      	mov	r4, r0
 80121a4:	2800      	cmp	r0, #0
 80121a6:	f000 808d 	beq.w	80122c4 <uxr_prepare_output_stream_fragmented+0x144>
 80121aa:	f006 fe43 	bl	8018e34 <get_available_free_slots>
 80121ae:	2800      	cmp	r0, #0
 80121b0:	f000 8083 	beq.w	80122ba <uxr_prepare_output_stream_fragmented+0x13a>
 80121b4:	8922      	ldrh	r2, [r4, #8]
 80121b6:	89e7      	ldrh	r7, [r4, #14]
 80121b8:	fbb7 f9f2 	udiv	r9, r7, r2
 80121bc:	fb02 7919 	mls	r9, r2, r9, r7
 80121c0:	fa1f f989 	uxth.w	r9, r9
 80121c4:	6863      	ldr	r3, [r4, #4]
 80121c6:	fbb3 f2f2 	udiv	r2, r3, r2
 80121ca:	6823      	ldr	r3, [r4, #0]
 80121cc:	9203      	str	r2, [sp, #12]
 80121ce:	fb02 f909 	mul.w	r9, r2, r9
 80121d2:	f109 0904 	add.w	r9, r9, #4
 80121d6:	4499      	add	r9, r3
 80121d8:	7b23      	ldrb	r3, [r4, #12]
 80121da:	f859 8c04 	ldr.w	r8, [r9, #-4]
 80121de:	4543      	cmp	r3, r8
 80121e0:	f1a2 0b04 	sub.w	fp, r2, #4
 80121e4:	d37a      	bcc.n	80122dc <uxr_prepare_output_stream_fragmented+0x15c>
 80121e6:	f1ab 0a04 	sub.w	sl, fp, #4
 80121ea:	ebaa 0a03 	sub.w	sl, sl, r3
 80121ee:	465a      	mov	r2, fp
 80121f0:	2300      	movs	r3, #0
 80121f2:	4649      	mov	r1, r9
 80121f4:	a808      	add	r0, sp, #32
 80121f6:	f8cd 8000 	str.w	r8, [sp]
 80121fa:	f7fe f97f 	bl	80104fc <ucdr_init_buffer_origin_offset>
 80121fe:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8012200:	fa1f fa8a 	uxth.w	sl, sl
 8012204:	4652      	mov	r2, sl
 8012206:	f103 0a08 	add.w	sl, r3, #8
 801220a:	45da      	cmp	sl, fp
 801220c:	bf34      	ite	cc
 801220e:	2302      	movcc	r3, #2
 8012210:	2300      	movcs	r3, #0
 8012212:	210d      	movs	r1, #13
 8012214:	a808      	add	r0, sp, #32
 8012216:	f7ff fe83 	bl	8011f20 <uxr_buffer_submessage_header>
 801221a:	8921      	ldrh	r1, [r4, #8]
 801221c:	fbb7 f2f1 	udiv	r2, r7, r1
 8012220:	fb01 7212 	mls	r2, r1, r2, r7
 8012224:	b292      	uxth	r2, r2
 8012226:	6863      	ldr	r3, [r4, #4]
 8012228:	fbb3 f3f1 	udiv	r3, r3, r1
 801222c:	fb02 f303 	mul.w	r3, r2, r3
 8012230:	6822      	ldr	r2, [r4, #0]
 8012232:	4638      	mov	r0, r7
 8012234:	f842 b003 	str.w	fp, [r2, r3]
 8012238:	2101      	movs	r1, #1
 801223a:	f006 ff4b 	bl	80190d4 <uxr_seq_num_add>
 801223e:	9b03      	ldr	r3, [sp, #12]
 8012240:	f108 0104 	add.w	r1, r8, #4
 8012244:	f1a3 0208 	sub.w	r2, r3, #8
 8012248:	eba2 0208 	sub.w	r2, r2, r8
 801224c:	4449      	add	r1, r9
 801224e:	4607      	mov	r7, r0
 8012250:	4630      	mov	r0, r6
 8012252:	f7fe f965 	bl	8010520 <ucdr_init_buffer>
 8012256:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8012258:	81e7      	strh	r7, [r4, #14]
 801225a:	1d1a      	adds	r2, r3, #4
 801225c:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8012260:	bf28      	it	cs
 8012262:	2200      	movcs	r2, #0
 8012264:	2300      	movs	r3, #0
 8012266:	b292      	uxth	r2, r2
 8012268:	2107      	movs	r1, #7
 801226a:	4630      	mov	r0, r6
 801226c:	f7ff fe58 	bl	8011f20 <uxr_buffer_submessage_header>
 8012270:	9904      	ldr	r1, [sp, #16]
 8012272:	aa07      	add	r2, sp, #28
 8012274:	4628      	mov	r0, r5
 8012276:	f7ff fceb 	bl	8011c50 <uxr_init_base_object_request>
 801227a:	4604      	mov	r4, r0
 801227c:	b318      	cbz	r0, 80122c6 <uxr_prepare_output_stream_fragmented+0x146>
 801227e:	a907      	add	r1, sp, #28
 8012280:	4630      	mov	r0, r6
 8012282:	f001 f82d 	bl	80132e0 <uxr_serialize_WRITE_DATA_Payload_Data>
 8012286:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 801228a:	4630      	mov	r0, r6
 801228c:	1a52      	subs	r2, r2, r1
 801228e:	f7fe f947 	bl	8010520 <ucdr_init_buffer>
 8012292:	9b05      	ldr	r3, [sp, #20]
 8012294:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 8012298:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801229a:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 801229e:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80122a0:	491b      	ldr	r1, [pc, #108]	@ (8012310 <uxr_prepare_output_stream_fragmented+0x190>)
 80122a2:	f8c5 a0c4 	str.w	sl, [r5, #196]	@ 0xc4
 80122a6:	4630      	mov	r0, r6
 80122a8:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 80122ac:	462a      	mov	r2, r5
 80122ae:	f7fe f90b 	bl	80104c8 <ucdr_set_on_full_buffer_callback>
 80122b2:	4620      	mov	r0, r4
 80122b4:	b011      	add	sp, #68	@ 0x44
 80122b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80122ba:	991c      	ldr	r1, [sp, #112]	@ 0x70
 80122bc:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80122be:	4628      	mov	r0, r5
 80122c0:	4798      	blx	r3
 80122c2:	b920      	cbnz	r0, 80122ce <uxr_prepare_output_stream_fragmented+0x14e>
 80122c4:	2400      	movs	r4, #0
 80122c6:	4620      	mov	r0, r4
 80122c8:	b011      	add	sp, #68	@ 0x44
 80122ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80122ce:	4620      	mov	r0, r4
 80122d0:	f006 fdb0 	bl	8018e34 <get_available_free_slots>
 80122d4:	2800      	cmp	r0, #0
 80122d6:	f47f af6d 	bne.w	80121b4 <uxr_prepare_output_stream_fragmented+0x34>
 80122da:	e7f3      	b.n	80122c4 <uxr_prepare_output_stream_fragmented+0x144>
 80122dc:	4638      	mov	r0, r7
 80122de:	2101      	movs	r1, #1
 80122e0:	f006 fef8 	bl	80190d4 <uxr_seq_num_add>
 80122e4:	8921      	ldrh	r1, [r4, #8]
 80122e6:	fbb0 f2f1 	udiv	r2, r0, r1
 80122ea:	fb01 0912 	mls	r9, r1, r2, r0
 80122ee:	fa1f f289 	uxth.w	r2, r9
 80122f2:	6863      	ldr	r3, [r4, #4]
 80122f4:	fbb3 f9f1 	udiv	r9, r3, r1
 80122f8:	6823      	ldr	r3, [r4, #0]
 80122fa:	fb02 f909 	mul.w	r9, r2, r9
 80122fe:	f109 0904 	add.w	r9, r9, #4
 8012302:	4499      	add	r9, r3
 8012304:	4607      	mov	r7, r0
 8012306:	7b23      	ldrb	r3, [r4, #12]
 8012308:	f859 8c04 	ldr.w	r8, [r9, #-4]
 801230c:	e76b      	b.n	80121e6 <uxr_prepare_output_stream_fragmented+0x66>
 801230e:	bf00      	nop
 8012310:	0801200d 	.word	0x0801200d

08012314 <uxr_serialize_message_header>:
 8012314:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012316:	b083      	sub	sp, #12
 8012318:	4616      	mov	r6, r2
 801231a:	4604      	mov	r4, r0
 801231c:	9301      	str	r3, [sp, #4]
 801231e:	460d      	mov	r5, r1
 8012320:	9f08      	ldr	r7, [sp, #32]
 8012322:	f7fc fceb 	bl	800ecfc <ucdr_serialize_uint8_t>
 8012326:	4631      	mov	r1, r6
 8012328:	4620      	mov	r0, r4
 801232a:	f7fc fce7 	bl	800ecfc <ucdr_serialize_uint8_t>
 801232e:	9a01      	ldr	r2, [sp, #4]
 8012330:	2101      	movs	r1, #1
 8012332:	4620      	mov	r0, r4
 8012334:	f7fc fd8e 	bl	800ee54 <ucdr_serialize_endian_uint16_t>
 8012338:	062b      	lsls	r3, r5, #24
 801233a:	d501      	bpl.n	8012340 <uxr_serialize_message_header+0x2c>
 801233c:	b003      	add	sp, #12
 801233e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012340:	2204      	movs	r2, #4
 8012342:	4639      	mov	r1, r7
 8012344:	4620      	mov	r0, r4
 8012346:	b003      	add	sp, #12
 8012348:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801234c:	f7fc b9e0 	b.w	800e710 <ucdr_serialize_array_uint8_t>

08012350 <uxr_deserialize_message_header>:
 8012350:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012352:	b083      	sub	sp, #12
 8012354:	4616      	mov	r6, r2
 8012356:	4604      	mov	r4, r0
 8012358:	9301      	str	r3, [sp, #4]
 801235a:	460d      	mov	r5, r1
 801235c:	9f08      	ldr	r7, [sp, #32]
 801235e:	f7fc fce3 	bl	800ed28 <ucdr_deserialize_uint8_t>
 8012362:	4631      	mov	r1, r6
 8012364:	4620      	mov	r0, r4
 8012366:	f7fc fcdf 	bl	800ed28 <ucdr_deserialize_uint8_t>
 801236a:	9a01      	ldr	r2, [sp, #4]
 801236c:	2101      	movs	r1, #1
 801236e:	4620      	mov	r0, r4
 8012370:	f7fc fe64 	bl	800f03c <ucdr_deserialize_endian_uint16_t>
 8012374:	f995 3000 	ldrsb.w	r3, [r5]
 8012378:	2b00      	cmp	r3, #0
 801237a:	da01      	bge.n	8012380 <uxr_deserialize_message_header+0x30>
 801237c:	b003      	add	sp, #12
 801237e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012380:	2204      	movs	r2, #4
 8012382:	4639      	mov	r1, r7
 8012384:	4620      	mov	r0, r4
 8012386:	b003      	add	sp, #12
 8012388:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801238c:	f7fc ba24 	b.w	800e7d8 <ucdr_deserialize_array_uint8_t>

08012390 <uxr_serialize_submessage_header>:
 8012390:	b530      	push	{r4, r5, lr}
 8012392:	b083      	sub	sp, #12
 8012394:	4615      	mov	r5, r2
 8012396:	4604      	mov	r4, r0
 8012398:	9301      	str	r3, [sp, #4]
 801239a:	f7fc fcaf 	bl	800ecfc <ucdr_serialize_uint8_t>
 801239e:	4629      	mov	r1, r5
 80123a0:	4620      	mov	r0, r4
 80123a2:	f7fc fcab 	bl	800ecfc <ucdr_serialize_uint8_t>
 80123a6:	9a01      	ldr	r2, [sp, #4]
 80123a8:	2101      	movs	r1, #1
 80123aa:	4620      	mov	r0, r4
 80123ac:	b003      	add	sp, #12
 80123ae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80123b2:	f7fc bd4f 	b.w	800ee54 <ucdr_serialize_endian_uint16_t>
 80123b6:	bf00      	nop

080123b8 <uxr_deserialize_submessage_header>:
 80123b8:	b530      	push	{r4, r5, lr}
 80123ba:	b083      	sub	sp, #12
 80123bc:	4615      	mov	r5, r2
 80123be:	4604      	mov	r4, r0
 80123c0:	9301      	str	r3, [sp, #4]
 80123c2:	f7fc fcb1 	bl	800ed28 <ucdr_deserialize_uint8_t>
 80123c6:	4629      	mov	r1, r5
 80123c8:	4620      	mov	r0, r4
 80123ca:	f7fc fcad 	bl	800ed28 <ucdr_deserialize_uint8_t>
 80123ce:	9a01      	ldr	r2, [sp, #4]
 80123d0:	2101      	movs	r1, #1
 80123d2:	4620      	mov	r0, r4
 80123d4:	b003      	add	sp, #12
 80123d6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80123da:	f7fc be2f 	b.w	800f03c <ucdr_deserialize_endian_uint16_t>
 80123de:	bf00      	nop

080123e0 <uxr_serialize_CLIENT_Representation>:
 80123e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80123e4:	2204      	movs	r2, #4
 80123e6:	460e      	mov	r6, r1
 80123e8:	4605      	mov	r5, r0
 80123ea:	f7fc f991 	bl	800e710 <ucdr_serialize_array_uint8_t>
 80123ee:	2202      	movs	r2, #2
 80123f0:	4607      	mov	r7, r0
 80123f2:	1d31      	adds	r1, r6, #4
 80123f4:	4628      	mov	r0, r5
 80123f6:	f7fc f98b 	bl	800e710 <ucdr_serialize_array_uint8_t>
 80123fa:	4038      	ands	r0, r7
 80123fc:	2202      	movs	r2, #2
 80123fe:	1db1      	adds	r1, r6, #6
 8012400:	b2c7      	uxtb	r7, r0
 8012402:	4628      	mov	r0, r5
 8012404:	f7fc f984 	bl	800e710 <ucdr_serialize_array_uint8_t>
 8012408:	2204      	movs	r2, #4
 801240a:	4007      	ands	r7, r0
 801240c:	f106 0108 	add.w	r1, r6, #8
 8012410:	4628      	mov	r0, r5
 8012412:	f7fc f97d 	bl	800e710 <ucdr_serialize_array_uint8_t>
 8012416:	7b31      	ldrb	r1, [r6, #12]
 8012418:	4007      	ands	r7, r0
 801241a:	4628      	mov	r0, r5
 801241c:	f7fc fc6e 	bl	800ecfc <ucdr_serialize_uint8_t>
 8012420:	7b71      	ldrb	r1, [r6, #13]
 8012422:	4007      	ands	r7, r0
 8012424:	4628      	mov	r0, r5
 8012426:	f7fc fc3b 	bl	800eca0 <ucdr_serialize_bool>
 801242a:	7b73      	ldrb	r3, [r6, #13]
 801242c:	ea07 0800 	and.w	r8, r7, r0
 8012430:	b93b      	cbnz	r3, 8012442 <uxr_serialize_CLIENT_Representation+0x62>
 8012432:	8bb1      	ldrh	r1, [r6, #28]
 8012434:	4628      	mov	r0, r5
 8012436:	f7fc fc8d 	bl	800ed54 <ucdr_serialize_uint16_t>
 801243a:	ea08 0000 	and.w	r0, r8, r0
 801243e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012442:	6931      	ldr	r1, [r6, #16]
 8012444:	4628      	mov	r0, r5
 8012446:	f7fc fe6f 	bl	800f128 <ucdr_serialize_uint32_t>
 801244a:	6933      	ldr	r3, [r6, #16]
 801244c:	b1e3      	cbz	r3, 8012488 <uxr_serialize_CLIENT_Representation+0xa8>
 801244e:	b1c0      	cbz	r0, 8012482 <uxr_serialize_CLIENT_Representation+0xa2>
 8012450:	4637      	mov	r7, r6
 8012452:	f04f 0900 	mov.w	r9, #0
 8012456:	e001      	b.n	801245c <uxr_serialize_CLIENT_Representation+0x7c>
 8012458:	3708      	adds	r7, #8
 801245a:	b194      	cbz	r4, 8012482 <uxr_serialize_CLIENT_Representation+0xa2>
 801245c:	6979      	ldr	r1, [r7, #20]
 801245e:	4628      	mov	r0, r5
 8012460:	f005 fee6 	bl	8018230 <ucdr_serialize_string>
 8012464:	69b9      	ldr	r1, [r7, #24]
 8012466:	4604      	mov	r4, r0
 8012468:	4628      	mov	r0, r5
 801246a:	f005 fee1 	bl	8018230 <ucdr_serialize_string>
 801246e:	6933      	ldr	r3, [r6, #16]
 8012470:	f109 0901 	add.w	r9, r9, #1
 8012474:	4004      	ands	r4, r0
 8012476:	4599      	cmp	r9, r3
 8012478:	b2e4      	uxtb	r4, r4
 801247a:	d3ed      	bcc.n	8012458 <uxr_serialize_CLIENT_Representation+0x78>
 801247c:	ea08 0804 	and.w	r8, r8, r4
 8012480:	e7d7      	b.n	8012432 <uxr_serialize_CLIENT_Representation+0x52>
 8012482:	f04f 0800 	mov.w	r8, #0
 8012486:	e7d4      	b.n	8012432 <uxr_serialize_CLIENT_Representation+0x52>
 8012488:	ea08 0800 	and.w	r8, r8, r0
 801248c:	e7d1      	b.n	8012432 <uxr_serialize_CLIENT_Representation+0x52>
 801248e:	bf00      	nop

08012490 <uxr_deserialize_CLIENT_Representation>:
 8012490:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012494:	2204      	movs	r2, #4
 8012496:	460c      	mov	r4, r1
 8012498:	4605      	mov	r5, r0
 801249a:	f7fc f99d 	bl	800e7d8 <ucdr_deserialize_array_uint8_t>
 801249e:	2202      	movs	r2, #2
 80124a0:	4607      	mov	r7, r0
 80124a2:	1d21      	adds	r1, r4, #4
 80124a4:	4628      	mov	r0, r5
 80124a6:	f7fc f997 	bl	800e7d8 <ucdr_deserialize_array_uint8_t>
 80124aa:	4038      	ands	r0, r7
 80124ac:	2202      	movs	r2, #2
 80124ae:	1da1      	adds	r1, r4, #6
 80124b0:	b2c6      	uxtb	r6, r0
 80124b2:	4628      	mov	r0, r5
 80124b4:	f7fc f990 	bl	800e7d8 <ucdr_deserialize_array_uint8_t>
 80124b8:	2204      	movs	r2, #4
 80124ba:	4006      	ands	r6, r0
 80124bc:	f104 0108 	add.w	r1, r4, #8
 80124c0:	4628      	mov	r0, r5
 80124c2:	f7fc f989 	bl	800e7d8 <ucdr_deserialize_array_uint8_t>
 80124c6:	f104 010c 	add.w	r1, r4, #12
 80124ca:	4006      	ands	r6, r0
 80124cc:	4628      	mov	r0, r5
 80124ce:	f7fc fc2b 	bl	800ed28 <ucdr_deserialize_uint8_t>
 80124d2:	f104 010d 	add.w	r1, r4, #13
 80124d6:	ea06 0700 	and.w	r7, r6, r0
 80124da:	4628      	mov	r0, r5
 80124dc:	f7fc fbf6 	bl	800eccc <ucdr_deserialize_bool>
 80124e0:	7b63      	ldrb	r3, [r4, #13]
 80124e2:	4007      	ands	r7, r0
 80124e4:	b93b      	cbnz	r3, 80124f6 <uxr_deserialize_CLIENT_Representation+0x66>
 80124e6:	f104 011c 	add.w	r1, r4, #28
 80124ea:	4628      	mov	r0, r5
 80124ec:	f7fc fd32 	bl	800ef54 <ucdr_deserialize_uint16_t>
 80124f0:	4038      	ands	r0, r7
 80124f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80124f6:	f104 0110 	add.w	r1, r4, #16
 80124fa:	4628      	mov	r0, r5
 80124fc:	f7fc ff44 	bl	800f388 <ucdr_deserialize_uint32_t>
 8012500:	6923      	ldr	r3, [r4, #16]
 8012502:	2b01      	cmp	r3, #1
 8012504:	d903      	bls.n	801250e <uxr_deserialize_CLIENT_Representation+0x7e>
 8012506:	2301      	movs	r3, #1
 8012508:	75ab      	strb	r3, [r5, #22]
 801250a:	2700      	movs	r7, #0
 801250c:	e7eb      	b.n	80124e6 <uxr_deserialize_CLIENT_Representation+0x56>
 801250e:	b30b      	cbz	r3, 8012554 <uxr_deserialize_CLIENT_Representation+0xc4>
 8012510:	2800      	cmp	r0, #0
 8012512:	d0fa      	beq.n	801250a <uxr_deserialize_CLIENT_Representation+0x7a>
 8012514:	46a0      	mov	r8, r4
 8012516:	f04f 0900 	mov.w	r9, #0
 801251a:	e001      	b.n	8012520 <uxr_deserialize_CLIENT_Representation+0x90>
 801251c:	2e00      	cmp	r6, #0
 801251e:	d0f4      	beq.n	801250a <uxr_deserialize_CLIENT_Representation+0x7a>
 8012520:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8012524:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012528:	4628      	mov	r0, r5
 801252a:	f005 fe91 	bl	8018250 <ucdr_deserialize_string>
 801252e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012532:	4606      	mov	r6, r0
 8012534:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8012538:	4628      	mov	r0, r5
 801253a:	f005 fe89 	bl	8018250 <ucdr_deserialize_string>
 801253e:	6923      	ldr	r3, [r4, #16]
 8012540:	f109 0901 	add.w	r9, r9, #1
 8012544:	4006      	ands	r6, r0
 8012546:	4599      	cmp	r9, r3
 8012548:	f108 0808 	add.w	r8, r8, #8
 801254c:	b2f6      	uxtb	r6, r6
 801254e:	d3e5      	bcc.n	801251c <uxr_deserialize_CLIENT_Representation+0x8c>
 8012550:	4037      	ands	r7, r6
 8012552:	e7c8      	b.n	80124e6 <uxr_deserialize_CLIENT_Representation+0x56>
 8012554:	4007      	ands	r7, r0
 8012556:	e7c6      	b.n	80124e6 <uxr_deserialize_CLIENT_Representation+0x56>

08012558 <uxr_serialize_AGENT_Representation>:
 8012558:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801255c:	2204      	movs	r2, #4
 801255e:	460f      	mov	r7, r1
 8012560:	4605      	mov	r5, r0
 8012562:	f7fc f8d5 	bl	800e710 <ucdr_serialize_array_uint8_t>
 8012566:	2202      	movs	r2, #2
 8012568:	4604      	mov	r4, r0
 801256a:	1d39      	adds	r1, r7, #4
 801256c:	4628      	mov	r0, r5
 801256e:	f7fc f8cf 	bl	800e710 <ucdr_serialize_array_uint8_t>
 8012572:	4020      	ands	r0, r4
 8012574:	2202      	movs	r2, #2
 8012576:	1db9      	adds	r1, r7, #6
 8012578:	b2c4      	uxtb	r4, r0
 801257a:	4628      	mov	r0, r5
 801257c:	f7fc f8c8 	bl	800e710 <ucdr_serialize_array_uint8_t>
 8012580:	7a39      	ldrb	r1, [r7, #8]
 8012582:	4004      	ands	r4, r0
 8012584:	4628      	mov	r0, r5
 8012586:	f7fc fb8b 	bl	800eca0 <ucdr_serialize_bool>
 801258a:	7a3b      	ldrb	r3, [r7, #8]
 801258c:	ea00 0804 	and.w	r8, r0, r4
 8012590:	b913      	cbnz	r3, 8012598 <uxr_serialize_AGENT_Representation+0x40>
 8012592:	4640      	mov	r0, r8
 8012594:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012598:	68f9      	ldr	r1, [r7, #12]
 801259a:	4628      	mov	r0, r5
 801259c:	f7fc fdc4 	bl	800f128 <ucdr_serialize_uint32_t>
 80125a0:	68fb      	ldr	r3, [r7, #12]
 80125a2:	b303      	cbz	r3, 80125e6 <uxr_serialize_AGENT_Representation+0x8e>
 80125a4:	b1d0      	cbz	r0, 80125dc <uxr_serialize_AGENT_Representation+0x84>
 80125a6:	463e      	mov	r6, r7
 80125a8:	f04f 0900 	mov.w	r9, #0
 80125ac:	e001      	b.n	80125b2 <uxr_serialize_AGENT_Representation+0x5a>
 80125ae:	3608      	adds	r6, #8
 80125b0:	b1a4      	cbz	r4, 80125dc <uxr_serialize_AGENT_Representation+0x84>
 80125b2:	6931      	ldr	r1, [r6, #16]
 80125b4:	4628      	mov	r0, r5
 80125b6:	f005 fe3b 	bl	8018230 <ucdr_serialize_string>
 80125ba:	6971      	ldr	r1, [r6, #20]
 80125bc:	4604      	mov	r4, r0
 80125be:	4628      	mov	r0, r5
 80125c0:	f005 fe36 	bl	8018230 <ucdr_serialize_string>
 80125c4:	68fb      	ldr	r3, [r7, #12]
 80125c6:	f109 0901 	add.w	r9, r9, #1
 80125ca:	4004      	ands	r4, r0
 80125cc:	4599      	cmp	r9, r3
 80125ce:	b2e4      	uxtb	r4, r4
 80125d0:	d3ed      	bcc.n	80125ae <uxr_serialize_AGENT_Representation+0x56>
 80125d2:	ea08 0804 	and.w	r8, r8, r4
 80125d6:	4640      	mov	r0, r8
 80125d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80125dc:	f04f 0800 	mov.w	r8, #0
 80125e0:	4640      	mov	r0, r8
 80125e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80125e6:	ea08 0800 	and.w	r8, r8, r0
 80125ea:	e7d2      	b.n	8012592 <uxr_serialize_AGENT_Representation+0x3a>

080125ec <uxr_serialize_DATAWRITER_Representation>:
 80125ec:	b570      	push	{r4, r5, r6, lr}
 80125ee:	460d      	mov	r5, r1
 80125f0:	7809      	ldrb	r1, [r1, #0]
 80125f2:	4606      	mov	r6, r0
 80125f4:	f7fc fb82 	bl	800ecfc <ucdr_serialize_uint8_t>
 80125f8:	4604      	mov	r4, r0
 80125fa:	b130      	cbz	r0, 801260a <uxr_serialize_DATAWRITER_Representation+0x1e>
 80125fc:	782b      	ldrb	r3, [r5, #0]
 80125fe:	2b02      	cmp	r3, #2
 8012600:	d00c      	beq.n	801261c <uxr_serialize_DATAWRITER_Representation+0x30>
 8012602:	2b03      	cmp	r3, #3
 8012604:	d010      	beq.n	8012628 <uxr_serialize_DATAWRITER_Representation+0x3c>
 8012606:	2b01      	cmp	r3, #1
 8012608:	d008      	beq.n	801261c <uxr_serialize_DATAWRITER_Representation+0x30>
 801260a:	2202      	movs	r2, #2
 801260c:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 8012610:	4630      	mov	r0, r6
 8012612:	f7fc f87d 	bl	800e710 <ucdr_serialize_array_uint8_t>
 8012616:	4020      	ands	r0, r4
 8012618:	b2c0      	uxtb	r0, r0
 801261a:	bd70      	pop	{r4, r5, r6, pc}
 801261c:	6869      	ldr	r1, [r5, #4]
 801261e:	4630      	mov	r0, r6
 8012620:	f005 fe06 	bl	8018230 <ucdr_serialize_string>
 8012624:	4604      	mov	r4, r0
 8012626:	e7f0      	b.n	801260a <uxr_serialize_DATAWRITER_Representation+0x1e>
 8012628:	4629      	mov	r1, r5
 801262a:	4630      	mov	r0, r6
 801262c:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8012630:	3104      	adds	r1, #4
 8012632:	f7fe f811 	bl	8010658 <ucdr_serialize_sequence_uint8_t>
 8012636:	4604      	mov	r4, r0
 8012638:	e7e7      	b.n	801260a <uxr_serialize_DATAWRITER_Representation+0x1e>
 801263a:	bf00      	nop

0801263c <uxr_serialize_ObjectVariant.part.0>:
 801263c:	b570      	push	{r4, r5, r6, lr}
 801263e:	780b      	ldrb	r3, [r1, #0]
 8012640:	3b01      	subs	r3, #1
 8012642:	460c      	mov	r4, r1
 8012644:	4605      	mov	r5, r0
 8012646:	2b0d      	cmp	r3, #13
 8012648:	d854      	bhi.n	80126f4 <uxr_serialize_ObjectVariant.part.0+0xb8>
 801264a:	e8df f003 	tbb	[pc, r3]
 801264e:	0730      	.short	0x0730
 8012650:	07071b1b 	.word	0x07071b1b
 8012654:	0c530707 	.word	0x0c530707
 8012658:	494e0c0c 	.word	0x494e0c0c
 801265c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012660:	3104      	adds	r1, #4
 8012662:	f7ff bfc3 	b.w	80125ec <uxr_serialize_DATAWRITER_Representation>
 8012666:	7909      	ldrb	r1, [r1, #4]
 8012668:	f7fc fb48 	bl	800ecfc <ucdr_serialize_uint8_t>
 801266c:	b1e8      	cbz	r0, 80126aa <uxr_serialize_ObjectVariant.part.0+0x6e>
 801266e:	7923      	ldrb	r3, [r4, #4]
 8012670:	2b01      	cmp	r3, #1
 8012672:	d001      	beq.n	8012678 <uxr_serialize_ObjectVariant.part.0+0x3c>
 8012674:	2b02      	cmp	r3, #2
 8012676:	d13d      	bne.n	80126f4 <uxr_serialize_ObjectVariant.part.0+0xb8>
 8012678:	68a1      	ldr	r1, [r4, #8]
 801267a:	4628      	mov	r0, r5
 801267c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012680:	f005 bdd6 	b.w	8018230 <ucdr_serialize_string>
 8012684:	7909      	ldrb	r1, [r1, #4]
 8012686:	f7fc fb39 	bl	800ecfc <ucdr_serialize_uint8_t>
 801268a:	4606      	mov	r6, r0
 801268c:	b120      	cbz	r0, 8012698 <uxr_serialize_ObjectVariant.part.0+0x5c>
 801268e:	7923      	ldrb	r3, [r4, #4]
 8012690:	2b02      	cmp	r3, #2
 8012692:	d039      	beq.n	8012708 <uxr_serialize_ObjectVariant.part.0+0xcc>
 8012694:	2b03      	cmp	r3, #3
 8012696:	d02f      	beq.n	80126f8 <uxr_serialize_ObjectVariant.part.0+0xbc>
 8012698:	2202      	movs	r2, #2
 801269a:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 801269e:	4628      	mov	r0, r5
 80126a0:	f7fc f836 	bl	800e710 <ucdr_serialize_array_uint8_t>
 80126a4:	4030      	ands	r0, r6
 80126a6:	b2c0      	uxtb	r0, r0
 80126a8:	bd70      	pop	{r4, r5, r6, pc}
 80126aa:	2000      	movs	r0, #0
 80126ac:	bd70      	pop	{r4, r5, r6, pc}
 80126ae:	7909      	ldrb	r1, [r1, #4]
 80126b0:	f7fc fb24 	bl	800ecfc <ucdr_serialize_uint8_t>
 80126b4:	4606      	mov	r6, r0
 80126b6:	b158      	cbz	r0, 80126d0 <uxr_serialize_ObjectVariant.part.0+0x94>
 80126b8:	7923      	ldrb	r3, [r4, #4]
 80126ba:	2b02      	cmp	r3, #2
 80126bc:	d003      	beq.n	80126c6 <uxr_serialize_ObjectVariant.part.0+0x8a>
 80126be:	2b03      	cmp	r3, #3
 80126c0:	d028      	beq.n	8012714 <uxr_serialize_ObjectVariant.part.0+0xd8>
 80126c2:	2b01      	cmp	r3, #1
 80126c4:	d104      	bne.n	80126d0 <uxr_serialize_ObjectVariant.part.0+0x94>
 80126c6:	68a1      	ldr	r1, [r4, #8]
 80126c8:	4628      	mov	r0, r5
 80126ca:	f005 fdb1 	bl	8018230 <ucdr_serialize_string>
 80126ce:	4606      	mov	r6, r0
 80126d0:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 80126d4:	4628      	mov	r0, r5
 80126d6:	f7fd f84d 	bl	800f774 <ucdr_serialize_int16_t>
 80126da:	4030      	ands	r0, r6
 80126dc:	b2c0      	uxtb	r0, r0
 80126de:	bd70      	pop	{r4, r5, r6, pc}
 80126e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80126e4:	3104      	adds	r1, #4
 80126e6:	f7ff be7b 	b.w	80123e0 <uxr_serialize_CLIENT_Representation>
 80126ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80126ee:	3104      	adds	r1, #4
 80126f0:	f7ff bf32 	b.w	8012558 <uxr_serialize_AGENT_Representation>
 80126f4:	2001      	movs	r0, #1
 80126f6:	bd70      	pop	{r4, r5, r6, pc}
 80126f8:	68a2      	ldr	r2, [r4, #8]
 80126fa:	f104 010c 	add.w	r1, r4, #12
 80126fe:	4628      	mov	r0, r5
 8012700:	f7fd ffaa 	bl	8010658 <ucdr_serialize_sequence_uint8_t>
 8012704:	4606      	mov	r6, r0
 8012706:	e7c7      	b.n	8012698 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8012708:	68a1      	ldr	r1, [r4, #8]
 801270a:	4628      	mov	r0, r5
 801270c:	f005 fd90 	bl	8018230 <ucdr_serialize_string>
 8012710:	4606      	mov	r6, r0
 8012712:	e7c1      	b.n	8012698 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8012714:	68a2      	ldr	r2, [r4, #8]
 8012716:	f104 010c 	add.w	r1, r4, #12
 801271a:	4628      	mov	r0, r5
 801271c:	f7fd ff9c 	bl	8010658 <ucdr_serialize_sequence_uint8_t>
 8012720:	4606      	mov	r6, r0
 8012722:	e7d5      	b.n	80126d0 <uxr_serialize_ObjectVariant.part.0+0x94>

08012724 <uxr_deserialize_DATAWRITER_Representation>:
 8012724:	b570      	push	{r4, r5, r6, lr}
 8012726:	4606      	mov	r6, r0
 8012728:	460d      	mov	r5, r1
 801272a:	f7fc fafd 	bl	800ed28 <ucdr_deserialize_uint8_t>
 801272e:	4604      	mov	r4, r0
 8012730:	b130      	cbz	r0, 8012740 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8012732:	782b      	ldrb	r3, [r5, #0]
 8012734:	2b02      	cmp	r3, #2
 8012736:	d00c      	beq.n	8012752 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8012738:	2b03      	cmp	r3, #3
 801273a:	d012      	beq.n	8012762 <uxr_deserialize_DATAWRITER_Representation+0x3e>
 801273c:	2b01      	cmp	r3, #1
 801273e:	d008      	beq.n	8012752 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8012740:	2202      	movs	r2, #2
 8012742:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 8012746:	4630      	mov	r0, r6
 8012748:	f7fc f846 	bl	800e7d8 <ucdr_deserialize_array_uint8_t>
 801274c:	4020      	ands	r0, r4
 801274e:	b2c0      	uxtb	r0, r0
 8012750:	bd70      	pop	{r4, r5, r6, pc}
 8012752:	6869      	ldr	r1, [r5, #4]
 8012754:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012758:	4630      	mov	r0, r6
 801275a:	f005 fd79 	bl	8018250 <ucdr_deserialize_string>
 801275e:	4604      	mov	r4, r0
 8012760:	e7ee      	b.n	8012740 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8012762:	1d2b      	adds	r3, r5, #4
 8012764:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012768:	f105 0108 	add.w	r1, r5, #8
 801276c:	4630      	mov	r0, r6
 801276e:	f7fd ff85 	bl	801067c <ucdr_deserialize_sequence_uint8_t>
 8012772:	4604      	mov	r4, r0
 8012774:	e7e4      	b.n	8012740 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8012776:	bf00      	nop

08012778 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 8012778:	b570      	push	{r4, r5, r6, lr}
 801277a:	460d      	mov	r5, r1
 801277c:	7809      	ldrb	r1, [r1, #0]
 801277e:	4606      	mov	r6, r0
 8012780:	f7fc fa8e 	bl	800eca0 <ucdr_serialize_bool>
 8012784:	782b      	ldrb	r3, [r5, #0]
 8012786:	4604      	mov	r4, r0
 8012788:	b94b      	cbnz	r3, 801279e <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 801278a:	7a29      	ldrb	r1, [r5, #8]
 801278c:	4630      	mov	r0, r6
 801278e:	f7fc fa87 	bl	800eca0 <ucdr_serialize_bool>
 8012792:	7a2b      	ldrb	r3, [r5, #8]
 8012794:	4004      	ands	r4, r0
 8012796:	b2e4      	uxtb	r4, r4
 8012798:	b943      	cbnz	r3, 80127ac <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 801279a:	4620      	mov	r0, r4
 801279c:	bd70      	pop	{r4, r5, r6, pc}
 801279e:	6869      	ldr	r1, [r5, #4]
 80127a0:	4630      	mov	r0, r6
 80127a2:	f005 fd45 	bl	8018230 <ucdr_serialize_string>
 80127a6:	4004      	ands	r4, r0
 80127a8:	b2e4      	uxtb	r4, r4
 80127aa:	e7ee      	b.n	801278a <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 80127ac:	68e9      	ldr	r1, [r5, #12]
 80127ae:	4630      	mov	r0, r6
 80127b0:	f005 fd3e 	bl	8018230 <ucdr_serialize_string>
 80127b4:	4004      	ands	r4, r0
 80127b6:	4620      	mov	r0, r4
 80127b8:	bd70      	pop	{r4, r5, r6, pc}
 80127ba:	bf00      	nop

080127bc <uxr_serialize_OBJK_Topic_Binary>:
 80127bc:	b570      	push	{r4, r5, r6, lr}
 80127be:	460d      	mov	r5, r1
 80127c0:	6809      	ldr	r1, [r1, #0]
 80127c2:	4606      	mov	r6, r0
 80127c4:	f005 fd34 	bl	8018230 <ucdr_serialize_string>
 80127c8:	7929      	ldrb	r1, [r5, #4]
 80127ca:	4604      	mov	r4, r0
 80127cc:	4630      	mov	r0, r6
 80127ce:	f7fc fa67 	bl	800eca0 <ucdr_serialize_bool>
 80127d2:	792b      	ldrb	r3, [r5, #4]
 80127d4:	4004      	ands	r4, r0
 80127d6:	b2e4      	uxtb	r4, r4
 80127d8:	b943      	cbnz	r3, 80127ec <uxr_serialize_OBJK_Topic_Binary+0x30>
 80127da:	7b29      	ldrb	r1, [r5, #12]
 80127dc:	4630      	mov	r0, r6
 80127de:	f7fc fa5f 	bl	800eca0 <ucdr_serialize_bool>
 80127e2:	7b2b      	ldrb	r3, [r5, #12]
 80127e4:	4004      	ands	r4, r0
 80127e6:	b93b      	cbnz	r3, 80127f8 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 80127e8:	4620      	mov	r0, r4
 80127ea:	bd70      	pop	{r4, r5, r6, pc}
 80127ec:	68a9      	ldr	r1, [r5, #8]
 80127ee:	4630      	mov	r0, r6
 80127f0:	f005 fd1e 	bl	8018230 <ucdr_serialize_string>
 80127f4:	4004      	ands	r4, r0
 80127f6:	e7f0      	b.n	80127da <uxr_serialize_OBJK_Topic_Binary+0x1e>
 80127f8:	6929      	ldr	r1, [r5, #16]
 80127fa:	4630      	mov	r0, r6
 80127fc:	f005 fd18 	bl	8018230 <ucdr_serialize_string>
 8012800:	4004      	ands	r4, r0
 8012802:	b2e4      	uxtb	r4, r4
 8012804:	4620      	mov	r0, r4
 8012806:	bd70      	pop	{r4, r5, r6, pc}

08012808 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 8012808:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801280c:	460c      	mov	r4, r1
 801280e:	7809      	ldrb	r1, [r1, #0]
 8012810:	4606      	mov	r6, r0
 8012812:	f7fc fa45 	bl	800eca0 <ucdr_serialize_bool>
 8012816:	7823      	ldrb	r3, [r4, #0]
 8012818:	4605      	mov	r5, r0
 801281a:	b96b      	cbnz	r3, 8012838 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 801281c:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 8012820:	4630      	mov	r0, r6
 8012822:	f7fc fa3d 	bl	800eca0 <ucdr_serialize_bool>
 8012826:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 801282a:	4005      	ands	r5, r0
 801282c:	b2ed      	uxtb	r5, r5
 801282e:	2b00      	cmp	r3, #0
 8012830:	d169      	bne.n	8012906 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 8012832:	4628      	mov	r0, r5
 8012834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012838:	6861      	ldr	r1, [r4, #4]
 801283a:	4630      	mov	r0, r6
 801283c:	f7fc fc74 	bl	800f128 <ucdr_serialize_uint32_t>
 8012840:	6863      	ldr	r3, [r4, #4]
 8012842:	2b00      	cmp	r3, #0
 8012844:	d06b      	beq.n	801291e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 8012846:	2800      	cmp	r0, #0
 8012848:	d067      	beq.n	801291a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801284a:	68a1      	ldr	r1, [r4, #8]
 801284c:	4630      	mov	r0, r6
 801284e:	f005 fcef 	bl	8018230 <ucdr_serialize_string>
 8012852:	6863      	ldr	r3, [r4, #4]
 8012854:	2b01      	cmp	r3, #1
 8012856:	d953      	bls.n	8012900 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012858:	2800      	cmp	r0, #0
 801285a:	d05e      	beq.n	801291a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801285c:	68e1      	ldr	r1, [r4, #12]
 801285e:	4630      	mov	r0, r6
 8012860:	f005 fce6 	bl	8018230 <ucdr_serialize_string>
 8012864:	6863      	ldr	r3, [r4, #4]
 8012866:	2b02      	cmp	r3, #2
 8012868:	d94a      	bls.n	8012900 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801286a:	2800      	cmp	r0, #0
 801286c:	d055      	beq.n	801291a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801286e:	6921      	ldr	r1, [r4, #16]
 8012870:	4630      	mov	r0, r6
 8012872:	f005 fcdd 	bl	8018230 <ucdr_serialize_string>
 8012876:	6863      	ldr	r3, [r4, #4]
 8012878:	2b03      	cmp	r3, #3
 801287a:	d941      	bls.n	8012900 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801287c:	2800      	cmp	r0, #0
 801287e:	d04c      	beq.n	801291a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012880:	6961      	ldr	r1, [r4, #20]
 8012882:	4630      	mov	r0, r6
 8012884:	f005 fcd4 	bl	8018230 <ucdr_serialize_string>
 8012888:	6863      	ldr	r3, [r4, #4]
 801288a:	2b04      	cmp	r3, #4
 801288c:	d938      	bls.n	8012900 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801288e:	2800      	cmp	r0, #0
 8012890:	d043      	beq.n	801291a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012892:	69a1      	ldr	r1, [r4, #24]
 8012894:	4630      	mov	r0, r6
 8012896:	f005 fccb 	bl	8018230 <ucdr_serialize_string>
 801289a:	6863      	ldr	r3, [r4, #4]
 801289c:	2b05      	cmp	r3, #5
 801289e:	d92f      	bls.n	8012900 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80128a0:	2800      	cmp	r0, #0
 80128a2:	d03a      	beq.n	801291a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80128a4:	69e1      	ldr	r1, [r4, #28]
 80128a6:	4630      	mov	r0, r6
 80128a8:	f005 fcc2 	bl	8018230 <ucdr_serialize_string>
 80128ac:	6863      	ldr	r3, [r4, #4]
 80128ae:	2b06      	cmp	r3, #6
 80128b0:	d926      	bls.n	8012900 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80128b2:	b390      	cbz	r0, 801291a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80128b4:	6a21      	ldr	r1, [r4, #32]
 80128b6:	4630      	mov	r0, r6
 80128b8:	f005 fcba 	bl	8018230 <ucdr_serialize_string>
 80128bc:	6863      	ldr	r3, [r4, #4]
 80128be:	2b07      	cmp	r3, #7
 80128c0:	d91e      	bls.n	8012900 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80128c2:	b350      	cbz	r0, 801291a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80128c4:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80128c6:	4630      	mov	r0, r6
 80128c8:	f005 fcb2 	bl	8018230 <ucdr_serialize_string>
 80128cc:	6863      	ldr	r3, [r4, #4]
 80128ce:	2b08      	cmp	r3, #8
 80128d0:	d916      	bls.n	8012900 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80128d2:	b310      	cbz	r0, 801291a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80128d4:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80128d6:	4630      	mov	r0, r6
 80128d8:	f005 fcaa 	bl	8018230 <ucdr_serialize_string>
 80128dc:	6863      	ldr	r3, [r4, #4]
 80128de:	2b09      	cmp	r3, #9
 80128e0:	d90e      	bls.n	8012900 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80128e2:	b1d0      	cbz	r0, 801291a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80128e4:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 80128e8:	2709      	movs	r7, #9
 80128ea:	e000      	b.n	80128ee <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 80128ec:	b1a8      	cbz	r0, 801291a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80128ee:	f858 1b04 	ldr.w	r1, [r8], #4
 80128f2:	4630      	mov	r0, r6
 80128f4:	f005 fc9c 	bl	8018230 <ucdr_serialize_string>
 80128f8:	6862      	ldr	r2, [r4, #4]
 80128fa:	3701      	adds	r7, #1
 80128fc:	4297      	cmp	r7, r2
 80128fe:	d3f5      	bcc.n	80128ec <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 8012900:	4005      	ands	r5, r0
 8012902:	b2ed      	uxtb	r5, r5
 8012904:	e78a      	b.n	801281c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8012906:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8012908:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 801290c:	4630      	mov	r0, r6
 801290e:	f7fd fea3 	bl	8010658 <ucdr_serialize_sequence_uint8_t>
 8012912:	4005      	ands	r5, r0
 8012914:	4628      	mov	r0, r5
 8012916:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801291a:	2500      	movs	r5, #0
 801291c:	e77e      	b.n	801281c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 801291e:	4028      	ands	r0, r5
 8012920:	b2c5      	uxtb	r5, r0
 8012922:	e77b      	b.n	801281c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

08012924 <uxr_serialize_OBJK_Publisher_Binary>:
 8012924:	b570      	push	{r4, r5, r6, lr}
 8012926:	460d      	mov	r5, r1
 8012928:	7809      	ldrb	r1, [r1, #0]
 801292a:	4606      	mov	r6, r0
 801292c:	f7fc f9b8 	bl	800eca0 <ucdr_serialize_bool>
 8012930:	782b      	ldrb	r3, [r5, #0]
 8012932:	4604      	mov	r4, r0
 8012934:	b94b      	cbnz	r3, 801294a <uxr_serialize_OBJK_Publisher_Binary+0x26>
 8012936:	7a29      	ldrb	r1, [r5, #8]
 8012938:	4630      	mov	r0, r6
 801293a:	f7fc f9b1 	bl	800eca0 <ucdr_serialize_bool>
 801293e:	7a2b      	ldrb	r3, [r5, #8]
 8012940:	4004      	ands	r4, r0
 8012942:	b2e4      	uxtb	r4, r4
 8012944:	b943      	cbnz	r3, 8012958 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 8012946:	4620      	mov	r0, r4
 8012948:	bd70      	pop	{r4, r5, r6, pc}
 801294a:	6869      	ldr	r1, [r5, #4]
 801294c:	4630      	mov	r0, r6
 801294e:	f005 fc6f 	bl	8018230 <ucdr_serialize_string>
 8012952:	4004      	ands	r4, r0
 8012954:	b2e4      	uxtb	r4, r4
 8012956:	e7ee      	b.n	8012936 <uxr_serialize_OBJK_Publisher_Binary+0x12>
 8012958:	f105 010c 	add.w	r1, r5, #12
 801295c:	4630      	mov	r0, r6
 801295e:	f7ff ff53 	bl	8012808 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 8012962:	4004      	ands	r4, r0
 8012964:	4620      	mov	r0, r4
 8012966:	bd70      	pop	{r4, r5, r6, pc}

08012968 <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 8012968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801296c:	460c      	mov	r4, r1
 801296e:	7809      	ldrb	r1, [r1, #0]
 8012970:	4606      	mov	r6, r0
 8012972:	f7fc f995 	bl	800eca0 <ucdr_serialize_bool>
 8012976:	7823      	ldrb	r3, [r4, #0]
 8012978:	4605      	mov	r5, r0
 801297a:	b96b      	cbnz	r3, 8012998 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 801297c:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 8012980:	4630      	mov	r0, r6
 8012982:	f7fc f98d 	bl	800eca0 <ucdr_serialize_bool>
 8012986:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 801298a:	4005      	ands	r5, r0
 801298c:	b2ed      	uxtb	r5, r5
 801298e:	2b00      	cmp	r3, #0
 8012990:	d169      	bne.n	8012a66 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 8012992:	4628      	mov	r0, r5
 8012994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012998:	6861      	ldr	r1, [r4, #4]
 801299a:	4630      	mov	r0, r6
 801299c:	f7fc fbc4 	bl	800f128 <ucdr_serialize_uint32_t>
 80129a0:	6863      	ldr	r3, [r4, #4]
 80129a2:	2b00      	cmp	r3, #0
 80129a4:	d06b      	beq.n	8012a7e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 80129a6:	2800      	cmp	r0, #0
 80129a8:	d067      	beq.n	8012a7a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80129aa:	68a1      	ldr	r1, [r4, #8]
 80129ac:	4630      	mov	r0, r6
 80129ae:	f005 fc3f 	bl	8018230 <ucdr_serialize_string>
 80129b2:	6863      	ldr	r3, [r4, #4]
 80129b4:	2b01      	cmp	r3, #1
 80129b6:	d953      	bls.n	8012a60 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80129b8:	2800      	cmp	r0, #0
 80129ba:	d05e      	beq.n	8012a7a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80129bc:	68e1      	ldr	r1, [r4, #12]
 80129be:	4630      	mov	r0, r6
 80129c0:	f005 fc36 	bl	8018230 <ucdr_serialize_string>
 80129c4:	6863      	ldr	r3, [r4, #4]
 80129c6:	2b02      	cmp	r3, #2
 80129c8:	d94a      	bls.n	8012a60 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80129ca:	2800      	cmp	r0, #0
 80129cc:	d055      	beq.n	8012a7a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80129ce:	6921      	ldr	r1, [r4, #16]
 80129d0:	4630      	mov	r0, r6
 80129d2:	f005 fc2d 	bl	8018230 <ucdr_serialize_string>
 80129d6:	6863      	ldr	r3, [r4, #4]
 80129d8:	2b03      	cmp	r3, #3
 80129da:	d941      	bls.n	8012a60 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80129dc:	2800      	cmp	r0, #0
 80129de:	d04c      	beq.n	8012a7a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80129e0:	6961      	ldr	r1, [r4, #20]
 80129e2:	4630      	mov	r0, r6
 80129e4:	f005 fc24 	bl	8018230 <ucdr_serialize_string>
 80129e8:	6863      	ldr	r3, [r4, #4]
 80129ea:	2b04      	cmp	r3, #4
 80129ec:	d938      	bls.n	8012a60 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80129ee:	2800      	cmp	r0, #0
 80129f0:	d043      	beq.n	8012a7a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80129f2:	69a1      	ldr	r1, [r4, #24]
 80129f4:	4630      	mov	r0, r6
 80129f6:	f005 fc1b 	bl	8018230 <ucdr_serialize_string>
 80129fa:	6863      	ldr	r3, [r4, #4]
 80129fc:	2b05      	cmp	r3, #5
 80129fe:	d92f      	bls.n	8012a60 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012a00:	2800      	cmp	r0, #0
 8012a02:	d03a      	beq.n	8012a7a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012a04:	69e1      	ldr	r1, [r4, #28]
 8012a06:	4630      	mov	r0, r6
 8012a08:	f005 fc12 	bl	8018230 <ucdr_serialize_string>
 8012a0c:	6863      	ldr	r3, [r4, #4]
 8012a0e:	2b06      	cmp	r3, #6
 8012a10:	d926      	bls.n	8012a60 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012a12:	b390      	cbz	r0, 8012a7a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012a14:	6a21      	ldr	r1, [r4, #32]
 8012a16:	4630      	mov	r0, r6
 8012a18:	f005 fc0a 	bl	8018230 <ucdr_serialize_string>
 8012a1c:	6863      	ldr	r3, [r4, #4]
 8012a1e:	2b07      	cmp	r3, #7
 8012a20:	d91e      	bls.n	8012a60 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012a22:	b350      	cbz	r0, 8012a7a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012a24:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8012a26:	4630      	mov	r0, r6
 8012a28:	f005 fc02 	bl	8018230 <ucdr_serialize_string>
 8012a2c:	6863      	ldr	r3, [r4, #4]
 8012a2e:	2b08      	cmp	r3, #8
 8012a30:	d916      	bls.n	8012a60 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012a32:	b310      	cbz	r0, 8012a7a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012a34:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8012a36:	4630      	mov	r0, r6
 8012a38:	f005 fbfa 	bl	8018230 <ucdr_serialize_string>
 8012a3c:	6863      	ldr	r3, [r4, #4]
 8012a3e:	2b09      	cmp	r3, #9
 8012a40:	d90e      	bls.n	8012a60 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012a42:	b1d0      	cbz	r0, 8012a7a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012a44:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 8012a48:	2709      	movs	r7, #9
 8012a4a:	e000      	b.n	8012a4e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 8012a4c:	b1a8      	cbz	r0, 8012a7a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012a4e:	f858 1b04 	ldr.w	r1, [r8], #4
 8012a52:	4630      	mov	r0, r6
 8012a54:	f005 fbec 	bl	8018230 <ucdr_serialize_string>
 8012a58:	6862      	ldr	r2, [r4, #4]
 8012a5a:	3701      	adds	r7, #1
 8012a5c:	4297      	cmp	r7, r2
 8012a5e:	d3f5      	bcc.n	8012a4c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 8012a60:	4005      	ands	r5, r0
 8012a62:	b2ed      	uxtb	r5, r5
 8012a64:	e78a      	b.n	801297c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8012a66:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8012a68:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8012a6c:	4630      	mov	r0, r6
 8012a6e:	f7fd fdf3 	bl	8010658 <ucdr_serialize_sequence_uint8_t>
 8012a72:	4005      	ands	r5, r0
 8012a74:	4628      	mov	r0, r5
 8012a76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a7a:	2500      	movs	r5, #0
 8012a7c:	e77e      	b.n	801297c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8012a7e:	4028      	ands	r0, r5
 8012a80:	b2c5      	uxtb	r5, r0
 8012a82:	e77b      	b.n	801297c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

08012a84 <uxr_serialize_OBJK_Subscriber_Binary>:
 8012a84:	b570      	push	{r4, r5, r6, lr}
 8012a86:	460d      	mov	r5, r1
 8012a88:	7809      	ldrb	r1, [r1, #0]
 8012a8a:	4606      	mov	r6, r0
 8012a8c:	f7fc f908 	bl	800eca0 <ucdr_serialize_bool>
 8012a90:	782b      	ldrb	r3, [r5, #0]
 8012a92:	4604      	mov	r4, r0
 8012a94:	b94b      	cbnz	r3, 8012aaa <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 8012a96:	7a29      	ldrb	r1, [r5, #8]
 8012a98:	4630      	mov	r0, r6
 8012a9a:	f7fc f901 	bl	800eca0 <ucdr_serialize_bool>
 8012a9e:	7a2b      	ldrb	r3, [r5, #8]
 8012aa0:	4004      	ands	r4, r0
 8012aa2:	b2e4      	uxtb	r4, r4
 8012aa4:	b943      	cbnz	r3, 8012ab8 <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 8012aa6:	4620      	mov	r0, r4
 8012aa8:	bd70      	pop	{r4, r5, r6, pc}
 8012aaa:	6869      	ldr	r1, [r5, #4]
 8012aac:	4630      	mov	r0, r6
 8012aae:	f005 fbbf 	bl	8018230 <ucdr_serialize_string>
 8012ab2:	4004      	ands	r4, r0
 8012ab4:	b2e4      	uxtb	r4, r4
 8012ab6:	e7ee      	b.n	8012a96 <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 8012ab8:	f105 010c 	add.w	r1, r5, #12
 8012abc:	4630      	mov	r0, r6
 8012abe:	f7ff ff53 	bl	8012968 <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 8012ac2:	4004      	ands	r4, r0
 8012ac4:	4620      	mov	r0, r4
 8012ac6:	bd70      	pop	{r4, r5, r6, pc}

08012ac8 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 8012ac8:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 8012acc:	4688      	mov	r8, r1
 8012ace:	8809      	ldrh	r1, [r1, #0]
 8012ad0:	4681      	mov	r9, r0
 8012ad2:	f7fc f93f 	bl	800ed54 <ucdr_serialize_uint16_t>
 8012ad6:	f898 1002 	ldrb.w	r1, [r8, #2]
 8012ada:	4606      	mov	r6, r0
 8012adc:	4648      	mov	r0, r9
 8012ade:	f7fc f8df 	bl	800eca0 <ucdr_serialize_bool>
 8012ae2:	f898 3002 	ldrb.w	r3, [r8, #2]
 8012ae6:	4006      	ands	r6, r0
 8012ae8:	b2f5      	uxtb	r5, r6
 8012aea:	b9eb      	cbnz	r3, 8012b28 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 8012aec:	f898 1006 	ldrb.w	r1, [r8, #6]
 8012af0:	4648      	mov	r0, r9
 8012af2:	f7fc f8d5 	bl	800eca0 <ucdr_serialize_bool>
 8012af6:	f898 3006 	ldrb.w	r3, [r8, #6]
 8012afa:	4005      	ands	r5, r0
 8012afc:	bb7b      	cbnz	r3, 8012b5e <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 8012afe:	f898 100c 	ldrb.w	r1, [r8, #12]
 8012b02:	4648      	mov	r0, r9
 8012b04:	f7fc f8cc 	bl	800eca0 <ucdr_serialize_bool>
 8012b08:	f898 300c 	ldrb.w	r3, [r8, #12]
 8012b0c:	4005      	ands	r5, r0
 8012b0e:	b9f3      	cbnz	r3, 8012b4e <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 8012b10:	f898 1014 	ldrb.w	r1, [r8, #20]
 8012b14:	4648      	mov	r0, r9
 8012b16:	f7fc f8c3 	bl	800eca0 <ucdr_serialize_bool>
 8012b1a:	f898 3014 	ldrb.w	r3, [r8, #20]
 8012b1e:	4005      	ands	r5, r0
 8012b20:	b94b      	cbnz	r3, 8012b36 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 8012b22:	4628      	mov	r0, r5
 8012b24:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8012b28:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 8012b2c:	4648      	mov	r0, r9
 8012b2e:	f7fc f911 	bl	800ed54 <ucdr_serialize_uint16_t>
 8012b32:	4005      	ands	r5, r0
 8012b34:	e7da      	b.n	8012aec <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 8012b36:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8012b3a:	f108 011c 	add.w	r1, r8, #28
 8012b3e:	4648      	mov	r0, r9
 8012b40:	f7fd fd8a 	bl	8010658 <ucdr_serialize_sequence_uint8_t>
 8012b44:	4028      	ands	r0, r5
 8012b46:	b2c5      	uxtb	r5, r0
 8012b48:	4628      	mov	r0, r5
 8012b4a:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8012b4e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8012b52:	4648      	mov	r0, r9
 8012b54:	f7fc fae8 	bl	800f128 <ucdr_serialize_uint32_t>
 8012b58:	4028      	ands	r0, r5
 8012b5a:	b2c5      	uxtb	r5, r0
 8012b5c:	e7d8      	b.n	8012b10 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 8012b5e:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8012b62:	4648      	mov	r0, r9
 8012b64:	f7fc fae0 	bl	800f128 <ucdr_serialize_uint32_t>
 8012b68:	4028      	ands	r0, r5
 8012b6a:	b2c5      	uxtb	r5, r0
 8012b6c:	e7c7      	b.n	8012afe <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 8012b6e:	bf00      	nop

08012b70 <uxr_serialize_OBJK_DataReader_Binary>:
 8012b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b72:	2202      	movs	r2, #2
 8012b74:	460c      	mov	r4, r1
 8012b76:	4606      	mov	r6, r0
 8012b78:	f7fb fdca 	bl	800e710 <ucdr_serialize_array_uint8_t>
 8012b7c:	78a1      	ldrb	r1, [r4, #2]
 8012b7e:	4605      	mov	r5, r0
 8012b80:	4630      	mov	r0, r6
 8012b82:	f7fc f88d 	bl	800eca0 <ucdr_serialize_bool>
 8012b86:	78a3      	ldrb	r3, [r4, #2]
 8012b88:	4005      	ands	r5, r0
 8012b8a:	b2ed      	uxtb	r5, r5
 8012b8c:	b90b      	cbnz	r3, 8012b92 <uxr_serialize_OBJK_DataReader_Binary+0x22>
 8012b8e:	4628      	mov	r0, r5
 8012b90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012b92:	f104 0108 	add.w	r1, r4, #8
 8012b96:	4630      	mov	r0, r6
 8012b98:	f7ff ff96 	bl	8012ac8 <uxr_serialize_OBJK_Endpoint_QosBinary>
 8012b9c:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8012ba0:	4607      	mov	r7, r0
 8012ba2:	4630      	mov	r0, r6
 8012ba4:	f7fc f87c 	bl	800eca0 <ucdr_serialize_bool>
 8012ba8:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8012bac:	4038      	ands	r0, r7
 8012bae:	b2c7      	uxtb	r7, r0
 8012bb0:	b95b      	cbnz	r3, 8012bca <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 8012bb2:	f894 1038 	ldrb.w	r1, [r4, #56]	@ 0x38
 8012bb6:	4630      	mov	r0, r6
 8012bb8:	f7fc f872 	bl	800eca0 <ucdr_serialize_bool>
 8012bbc:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8012bc0:	4007      	ands	r7, r0
 8012bc2:	b94b      	cbnz	r3, 8012bd8 <uxr_serialize_OBJK_DataReader_Binary+0x68>
 8012bc4:	403d      	ands	r5, r7
 8012bc6:	4628      	mov	r0, r5
 8012bc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012bca:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	@ 0x30
 8012bce:	4630      	mov	r0, r6
 8012bd0:	f7fc fd00 	bl	800f5d4 <ucdr_serialize_uint64_t>
 8012bd4:	4007      	ands	r7, r0
 8012bd6:	e7ec      	b.n	8012bb2 <uxr_serialize_OBJK_DataReader_Binary+0x42>
 8012bd8:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8012bda:	4630      	mov	r0, r6
 8012bdc:	f005 fb28 	bl	8018230 <ucdr_serialize_string>
 8012be0:	4007      	ands	r7, r0
 8012be2:	b2ff      	uxtb	r7, r7
 8012be4:	e7ee      	b.n	8012bc4 <uxr_serialize_OBJK_DataReader_Binary+0x54>
 8012be6:	bf00      	nop

08012be8 <uxr_serialize_OBJK_DataWriter_Binary>:
 8012be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012bea:	2202      	movs	r2, #2
 8012bec:	460d      	mov	r5, r1
 8012bee:	4606      	mov	r6, r0
 8012bf0:	f7fb fd8e 	bl	800e710 <ucdr_serialize_array_uint8_t>
 8012bf4:	78a9      	ldrb	r1, [r5, #2]
 8012bf6:	4604      	mov	r4, r0
 8012bf8:	4630      	mov	r0, r6
 8012bfa:	f7fc f851 	bl	800eca0 <ucdr_serialize_bool>
 8012bfe:	78ab      	ldrb	r3, [r5, #2]
 8012c00:	4004      	ands	r4, r0
 8012c02:	b2e4      	uxtb	r4, r4
 8012c04:	b90b      	cbnz	r3, 8012c0a <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 8012c06:	4620      	mov	r0, r4
 8012c08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012c0a:	f105 0108 	add.w	r1, r5, #8
 8012c0e:	4630      	mov	r0, r6
 8012c10:	f7ff ff5a 	bl	8012ac8 <uxr_serialize_OBJK_Endpoint_QosBinary>
 8012c14:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 8012c18:	4607      	mov	r7, r0
 8012c1a:	4630      	mov	r0, r6
 8012c1c:	f7fc f840 	bl	800eca0 <ucdr_serialize_bool>
 8012c20:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 8012c24:	4038      	ands	r0, r7
 8012c26:	b2c7      	uxtb	r7, r0
 8012c28:	b913      	cbnz	r3, 8012c30 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 8012c2a:	403c      	ands	r4, r7
 8012c2c:	4620      	mov	r0, r4
 8012c2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012c30:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 8012c34:	4630      	mov	r0, r6
 8012c36:	f7fc fccd 	bl	800f5d4 <ucdr_serialize_uint64_t>
 8012c3a:	4007      	ands	r7, r0
 8012c3c:	e7f5      	b.n	8012c2a <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 8012c3e:	bf00      	nop

08012c40 <uxr_serialize_OBJK_Replier_Binary>:
 8012c40:	e92d 41b8 	stmdb	sp!, {r3, r4, r5, r7, r8, lr}
 8012c44:	460f      	mov	r7, r1
 8012c46:	6809      	ldr	r1, [r1, #0]
 8012c48:	4680      	mov	r8, r0
 8012c4a:	f005 faf1 	bl	8018230 <ucdr_serialize_string>
 8012c4e:	6879      	ldr	r1, [r7, #4]
 8012c50:	4605      	mov	r5, r0
 8012c52:	4640      	mov	r0, r8
 8012c54:	f005 faec 	bl	8018230 <ucdr_serialize_string>
 8012c58:	68b9      	ldr	r1, [r7, #8]
 8012c5a:	4005      	ands	r5, r0
 8012c5c:	4640      	mov	r0, r8
 8012c5e:	f005 fae7 	bl	8018230 <ucdr_serialize_string>
 8012c62:	b2ec      	uxtb	r4, r5
 8012c64:	4004      	ands	r4, r0
 8012c66:	7b39      	ldrb	r1, [r7, #12]
 8012c68:	4640      	mov	r0, r8
 8012c6a:	f7fc f819 	bl	800eca0 <ucdr_serialize_bool>
 8012c6e:	7b3b      	ldrb	r3, [r7, #12]
 8012c70:	4004      	ands	r4, r0
 8012c72:	b94b      	cbnz	r3, 8012c88 <uxr_serialize_OBJK_Replier_Binary+0x48>
 8012c74:	7d39      	ldrb	r1, [r7, #20]
 8012c76:	4640      	mov	r0, r8
 8012c78:	f7fc f812 	bl	800eca0 <ucdr_serialize_bool>
 8012c7c:	7d3b      	ldrb	r3, [r7, #20]
 8012c7e:	4004      	ands	r4, r0
 8012c80:	b943      	cbnz	r3, 8012c94 <uxr_serialize_OBJK_Replier_Binary+0x54>
 8012c82:	4620      	mov	r0, r4
 8012c84:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 8012c88:	6939      	ldr	r1, [r7, #16]
 8012c8a:	4640      	mov	r0, r8
 8012c8c:	f005 fad0 	bl	8018230 <ucdr_serialize_string>
 8012c90:	4004      	ands	r4, r0
 8012c92:	e7ef      	b.n	8012c74 <uxr_serialize_OBJK_Replier_Binary+0x34>
 8012c94:	69b9      	ldr	r1, [r7, #24]
 8012c96:	4640      	mov	r0, r8
 8012c98:	f005 faca 	bl	8018230 <ucdr_serialize_string>
 8012c9c:	4004      	ands	r4, r0
 8012c9e:	b2e4      	uxtb	r4, r4
 8012ca0:	4620      	mov	r0, r4
 8012ca2:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 8012ca6:	bf00      	nop

08012ca8 <uxr_deserialize_ObjectVariant>:
 8012ca8:	b570      	push	{r4, r5, r6, lr}
 8012caa:	4605      	mov	r5, r0
 8012cac:	460e      	mov	r6, r1
 8012cae:	f7fc f83b 	bl	800ed28 <ucdr_deserialize_uint8_t>
 8012cb2:	b168      	cbz	r0, 8012cd0 <uxr_deserialize_ObjectVariant+0x28>
 8012cb4:	7833      	ldrb	r3, [r6, #0]
 8012cb6:	3b01      	subs	r3, #1
 8012cb8:	4604      	mov	r4, r0
 8012cba:	2b0d      	cmp	r3, #13
 8012cbc:	d809      	bhi.n	8012cd2 <uxr_deserialize_ObjectVariant+0x2a>
 8012cbe:	e8df f003 	tbb	[pc, r3]
 8012cc2:	0a41      	.short	0x0a41
 8012cc4:	0a0a2323 	.word	0x0a0a2323
 8012cc8:	10080a0a 	.word	0x10080a0a
 8012ccc:	565c1010 	.word	0x565c1010
 8012cd0:	2400      	movs	r4, #0
 8012cd2:	4620      	mov	r0, r4
 8012cd4:	bd70      	pop	{r4, r5, r6, pc}
 8012cd6:	1d31      	adds	r1, r6, #4
 8012cd8:	4628      	mov	r0, r5
 8012cda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012cde:	f7ff bd21 	b.w	8012724 <uxr_deserialize_DATAWRITER_Representation>
 8012ce2:	1d31      	adds	r1, r6, #4
 8012ce4:	4628      	mov	r0, r5
 8012ce6:	f7fc f81f 	bl	800ed28 <ucdr_deserialize_uint8_t>
 8012cea:	2800      	cmp	r0, #0
 8012cec:	d0f0      	beq.n	8012cd0 <uxr_deserialize_ObjectVariant+0x28>
 8012cee:	7933      	ldrb	r3, [r6, #4]
 8012cf0:	2b01      	cmp	r3, #1
 8012cf2:	d001      	beq.n	8012cf8 <uxr_deserialize_ObjectVariant+0x50>
 8012cf4:	2b02      	cmp	r3, #2
 8012cf6:	d1ec      	bne.n	8012cd2 <uxr_deserialize_ObjectVariant+0x2a>
 8012cf8:	68b1      	ldr	r1, [r6, #8]
 8012cfa:	4628      	mov	r0, r5
 8012cfc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012d00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012d04:	f005 baa4 	b.w	8018250 <ucdr_deserialize_string>
 8012d08:	1d31      	adds	r1, r6, #4
 8012d0a:	4628      	mov	r0, r5
 8012d0c:	f7fc f80c 	bl	800ed28 <ucdr_deserialize_uint8_t>
 8012d10:	4604      	mov	r4, r0
 8012d12:	b170      	cbz	r0, 8012d32 <uxr_deserialize_ObjectVariant+0x8a>
 8012d14:	7933      	ldrb	r3, [r6, #4]
 8012d16:	2b02      	cmp	r3, #2
 8012d18:	d04c      	beq.n	8012db4 <uxr_deserialize_ObjectVariant+0x10c>
 8012d1a:	2b03      	cmp	r3, #3
 8012d1c:	d109      	bne.n	8012d32 <uxr_deserialize_ObjectVariant+0x8a>
 8012d1e:	f106 0308 	add.w	r3, r6, #8
 8012d22:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012d26:	f106 010c 	add.w	r1, r6, #12
 8012d2a:	4628      	mov	r0, r5
 8012d2c:	f7fd fca6 	bl	801067c <ucdr_deserialize_sequence_uint8_t>
 8012d30:	4604      	mov	r4, r0
 8012d32:	2202      	movs	r2, #2
 8012d34:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8012d38:	4628      	mov	r0, r5
 8012d3a:	f7fb fd4d 	bl	800e7d8 <ucdr_deserialize_array_uint8_t>
 8012d3e:	4020      	ands	r0, r4
 8012d40:	b2c4      	uxtb	r4, r0
 8012d42:	e7c6      	b.n	8012cd2 <uxr_deserialize_ObjectVariant+0x2a>
 8012d44:	1d31      	adds	r1, r6, #4
 8012d46:	4628      	mov	r0, r5
 8012d48:	f7fb ffee 	bl	800ed28 <ucdr_deserialize_uint8_t>
 8012d4c:	4604      	mov	r4, r0
 8012d4e:	b130      	cbz	r0, 8012d5e <uxr_deserialize_ObjectVariant+0xb6>
 8012d50:	7933      	ldrb	r3, [r6, #4]
 8012d52:	2b02      	cmp	r3, #2
 8012d54:	d036      	beq.n	8012dc4 <uxr_deserialize_ObjectVariant+0x11c>
 8012d56:	2b03      	cmp	r3, #3
 8012d58:	d03c      	beq.n	8012dd4 <uxr_deserialize_ObjectVariant+0x12c>
 8012d5a:	2b01      	cmp	r3, #1
 8012d5c:	d032      	beq.n	8012dc4 <uxr_deserialize_ObjectVariant+0x11c>
 8012d5e:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8012d62:	4628      	mov	r0, r5
 8012d64:	f7fc fd86 	bl	800f874 <ucdr_deserialize_int16_t>
 8012d68:	4020      	ands	r0, r4
 8012d6a:	b2c4      	uxtb	r4, r0
 8012d6c:	e7b1      	b.n	8012cd2 <uxr_deserialize_ObjectVariant+0x2a>
 8012d6e:	1d31      	adds	r1, r6, #4
 8012d70:	4628      	mov	r0, r5
 8012d72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012d76:	f7ff bb8b 	b.w	8012490 <uxr_deserialize_CLIENT_Representation>
 8012d7a:	2204      	movs	r2, #4
 8012d7c:	18b1      	adds	r1, r6, r2
 8012d7e:	4628      	mov	r0, r5
 8012d80:	f7fb fd2a 	bl	800e7d8 <ucdr_deserialize_array_uint8_t>
 8012d84:	2202      	movs	r2, #2
 8012d86:	f106 0108 	add.w	r1, r6, #8
 8012d8a:	4604      	mov	r4, r0
 8012d8c:	4628      	mov	r0, r5
 8012d8e:	f7fb fd23 	bl	800e7d8 <ucdr_deserialize_array_uint8_t>
 8012d92:	2202      	movs	r2, #2
 8012d94:	4004      	ands	r4, r0
 8012d96:	f106 010a 	add.w	r1, r6, #10
 8012d9a:	4628      	mov	r0, r5
 8012d9c:	f7fb fd1c 	bl	800e7d8 <ucdr_deserialize_array_uint8_t>
 8012da0:	b2e4      	uxtb	r4, r4
 8012da2:	4603      	mov	r3, r0
 8012da4:	f106 010c 	add.w	r1, r6, #12
 8012da8:	4628      	mov	r0, r5
 8012daa:	401c      	ands	r4, r3
 8012dac:	f7fb ff8e 	bl	800eccc <ucdr_deserialize_bool>
 8012db0:	4004      	ands	r4, r0
 8012db2:	e78e      	b.n	8012cd2 <uxr_deserialize_ObjectVariant+0x2a>
 8012db4:	68b1      	ldr	r1, [r6, #8]
 8012db6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012dba:	4628      	mov	r0, r5
 8012dbc:	f005 fa48 	bl	8018250 <ucdr_deserialize_string>
 8012dc0:	4604      	mov	r4, r0
 8012dc2:	e7b6      	b.n	8012d32 <uxr_deserialize_ObjectVariant+0x8a>
 8012dc4:	68b1      	ldr	r1, [r6, #8]
 8012dc6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012dca:	4628      	mov	r0, r5
 8012dcc:	f005 fa40 	bl	8018250 <ucdr_deserialize_string>
 8012dd0:	4604      	mov	r4, r0
 8012dd2:	e7c4      	b.n	8012d5e <uxr_deserialize_ObjectVariant+0xb6>
 8012dd4:	f106 0308 	add.w	r3, r6, #8
 8012dd8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012ddc:	f106 010c 	add.w	r1, r6, #12
 8012de0:	4628      	mov	r0, r5
 8012de2:	f7fd fc4b 	bl	801067c <ucdr_deserialize_sequence_uint8_t>
 8012de6:	4604      	mov	r4, r0
 8012de8:	e7b9      	b.n	8012d5e <uxr_deserialize_ObjectVariant+0xb6>
 8012dea:	bf00      	nop

08012dec <uxr_deserialize_BaseObjectRequest>:
 8012dec:	b570      	push	{r4, r5, r6, lr}
 8012dee:	2202      	movs	r2, #2
 8012df0:	4605      	mov	r5, r0
 8012df2:	460e      	mov	r6, r1
 8012df4:	f7fb fcf0 	bl	800e7d8 <ucdr_deserialize_array_uint8_t>
 8012df8:	2202      	movs	r2, #2
 8012dfa:	4604      	mov	r4, r0
 8012dfc:	18b1      	adds	r1, r6, r2
 8012dfe:	4628      	mov	r0, r5
 8012e00:	f7fb fcea 	bl	800e7d8 <ucdr_deserialize_array_uint8_t>
 8012e04:	4020      	ands	r0, r4
 8012e06:	b2c0      	uxtb	r0, r0
 8012e08:	bd70      	pop	{r4, r5, r6, pc}
 8012e0a:	bf00      	nop

08012e0c <uxr_serialize_ActivityInfoVariant>:
 8012e0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012e10:	460d      	mov	r5, r1
 8012e12:	7809      	ldrb	r1, [r1, #0]
 8012e14:	4607      	mov	r7, r0
 8012e16:	f7fb ff71 	bl	800ecfc <ucdr_serialize_uint8_t>
 8012e1a:	4681      	mov	r9, r0
 8012e1c:	b138      	cbz	r0, 8012e2e <uxr_serialize_ActivityInfoVariant+0x22>
 8012e1e:	782b      	ldrb	r3, [r5, #0]
 8012e20:	2b06      	cmp	r3, #6
 8012e22:	f000 8082 	beq.w	8012f2a <uxr_serialize_ActivityInfoVariant+0x11e>
 8012e26:	2b0d      	cmp	r3, #13
 8012e28:	d016      	beq.n	8012e58 <uxr_serialize_ActivityInfoVariant+0x4c>
 8012e2a:	2b05      	cmp	r3, #5
 8012e2c:	d002      	beq.n	8012e34 <uxr_serialize_ActivityInfoVariant+0x28>
 8012e2e:	4648      	mov	r0, r9
 8012e30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012e34:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8012e38:	4638      	mov	r0, r7
 8012e3a:	f7fc fc9b 	bl	800f774 <ucdr_serialize_int16_t>
 8012e3e:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 8012e42:	4681      	mov	r9, r0
 8012e44:	4638      	mov	r0, r7
 8012e46:	f7fc fbc5 	bl	800f5d4 <ucdr_serialize_uint64_t>
 8012e4a:	ea09 0000 	and.w	r0, r9, r0
 8012e4e:	fa5f f980 	uxtb.w	r9, r0
 8012e52:	4648      	mov	r0, r9
 8012e54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012e58:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8012e5c:	4638      	mov	r0, r7
 8012e5e:	f7fc fc89 	bl	800f774 <ucdr_serialize_int16_t>
 8012e62:	68e9      	ldr	r1, [r5, #12]
 8012e64:	4681      	mov	r9, r0
 8012e66:	4638      	mov	r0, r7
 8012e68:	f7fc f95e 	bl	800f128 <ucdr_serialize_uint32_t>
 8012e6c:	68eb      	ldr	r3, [r5, #12]
 8012e6e:	2b00      	cmp	r3, #0
 8012e70:	d0eb      	beq.n	8012e4a <uxr_serialize_ActivityInfoVariant+0x3e>
 8012e72:	b320      	cbz	r0, 8012ebe <uxr_serialize_ActivityInfoVariant+0xb2>
 8012e74:	f105 080c 	add.w	r8, r5, #12
 8012e78:	2600      	movs	r6, #0
 8012e7a:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 8012e7e:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 8012e82:	f89a 1010 	ldrb.w	r1, [sl, #16]
 8012e86:	4638      	mov	r0, r7
 8012e88:	f7fb ff38 	bl	800ecfc <ucdr_serialize_uint8_t>
 8012e8c:	2800      	cmp	r0, #0
 8012e8e:	d053      	beq.n	8012f38 <uxr_serialize_ActivityInfoVariant+0x12c>
 8012e90:	f89a 3010 	ldrb.w	r3, [sl, #16]
 8012e94:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 8012e98:	0074      	lsls	r4, r6, #1
 8012e9a:	00c9      	lsls	r1, r1, #3
 8012e9c:	2b03      	cmp	r3, #3
 8012e9e:	d854      	bhi.n	8012f4a <uxr_serialize_ActivityInfoVariant+0x13e>
 8012ea0:	e8df f003 	tbb	[pc, r3]
 8012ea4:	02102132 	.word	0x02102132
 8012ea8:	4441      	add	r1, r8
 8012eaa:	4638      	mov	r0, r7
 8012eac:	6889      	ldr	r1, [r1, #8]
 8012eae:	f005 f9bf 	bl	8018230 <ucdr_serialize_string>
 8012eb2:	68ea      	ldr	r2, [r5, #12]
 8012eb4:	3601      	adds	r6, #1
 8012eb6:	4296      	cmp	r6, r2
 8012eb8:	d242      	bcs.n	8012f40 <uxr_serialize_ActivityInfoVariant+0x134>
 8012eba:	2800      	cmp	r0, #0
 8012ebc:	d1dd      	bne.n	8012e7a <uxr_serialize_ActivityInfoVariant+0x6e>
 8012ebe:	f04f 0900 	mov.w	r9, #0
 8012ec2:	e7b4      	b.n	8012e2e <uxr_serialize_ActivityInfoVariant+0x22>
 8012ec4:	3108      	adds	r1, #8
 8012ec6:	4441      	add	r1, r8
 8012ec8:	2210      	movs	r2, #16
 8012eca:	4638      	mov	r0, r7
 8012ecc:	f7fb fc20 	bl	800e710 <ucdr_serialize_array_uint8_t>
 8012ed0:	4434      	add	r4, r6
 8012ed2:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8012ed6:	4604      	mov	r4, r0
 8012ed8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8012eda:	4638      	mov	r0, r7
 8012edc:	f7fc f924 	bl	800f128 <ucdr_serialize_uint32_t>
 8012ee0:	4020      	ands	r0, r4
 8012ee2:	b2c0      	uxtb	r0, r0
 8012ee4:	e7e5      	b.n	8012eb2 <uxr_serialize_ActivityInfoVariant+0xa6>
 8012ee6:	3108      	adds	r1, #8
 8012ee8:	4441      	add	r1, r8
 8012eea:	2204      	movs	r2, #4
 8012eec:	4638      	mov	r0, r7
 8012eee:	f7fb fc0f 	bl	800e710 <ucdr_serialize_array_uint8_t>
 8012ef2:	4434      	add	r4, r6
 8012ef4:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8012ef8:	4604      	mov	r4, r0
 8012efa:	8b19      	ldrh	r1, [r3, #24]
 8012efc:	4638      	mov	r0, r7
 8012efe:	f7fb ff29 	bl	800ed54 <ucdr_serialize_uint16_t>
 8012f02:	4020      	ands	r0, r4
 8012f04:	b2c0      	uxtb	r0, r0
 8012f06:	e7d4      	b.n	8012eb2 <uxr_serialize_ActivityInfoVariant+0xa6>
 8012f08:	3108      	adds	r1, #8
 8012f0a:	4441      	add	r1, r8
 8012f0c:	2202      	movs	r2, #2
 8012f0e:	4638      	mov	r0, r7
 8012f10:	f7fb fbfe 	bl	800e710 <ucdr_serialize_array_uint8_t>
 8012f14:	4434      	add	r4, r6
 8012f16:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8012f1a:	4604      	mov	r4, r0
 8012f1c:	7d99      	ldrb	r1, [r3, #22]
 8012f1e:	4638      	mov	r0, r7
 8012f20:	f7fb feec 	bl	800ecfc <ucdr_serialize_uint8_t>
 8012f24:	4020      	ands	r0, r4
 8012f26:	b2c0      	uxtb	r0, r0
 8012f28:	e7c3      	b.n	8012eb2 <uxr_serialize_ActivityInfoVariant+0xa6>
 8012f2a:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8012f2e:	4638      	mov	r0, r7
 8012f30:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012f34:	f7fc bc1e 	b.w	800f774 <ucdr_serialize_int16_t>
 8012f38:	68ea      	ldr	r2, [r5, #12]
 8012f3a:	3601      	adds	r6, #1
 8012f3c:	42b2      	cmp	r2, r6
 8012f3e:	d8be      	bhi.n	8012ebe <uxr_serialize_ActivityInfoVariant+0xb2>
 8012f40:	ea09 0900 	and.w	r9, r9, r0
 8012f44:	fa5f f989 	uxtb.w	r9, r9
 8012f48:	e771      	b.n	8012e2e <uxr_serialize_ActivityInfoVariant+0x22>
 8012f4a:	68eb      	ldr	r3, [r5, #12]
 8012f4c:	3601      	adds	r6, #1
 8012f4e:	429e      	cmp	r6, r3
 8012f50:	f10a 0a18 	add.w	sl, sl, #24
 8012f54:	d395      	bcc.n	8012e82 <uxr_serialize_ActivityInfoVariant+0x76>
 8012f56:	e76a      	b.n	8012e2e <uxr_serialize_ActivityInfoVariant+0x22>

08012f58 <uxr_deserialize_BaseObjectReply>:
 8012f58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f5c:	2202      	movs	r2, #2
 8012f5e:	4606      	mov	r6, r0
 8012f60:	460f      	mov	r7, r1
 8012f62:	f7fb fc39 	bl	800e7d8 <ucdr_deserialize_array_uint8_t>
 8012f66:	2202      	movs	r2, #2
 8012f68:	18b9      	adds	r1, r7, r2
 8012f6a:	4605      	mov	r5, r0
 8012f6c:	4630      	mov	r0, r6
 8012f6e:	f7fb fc33 	bl	800e7d8 <ucdr_deserialize_array_uint8_t>
 8012f72:	1d39      	adds	r1, r7, #4
 8012f74:	4680      	mov	r8, r0
 8012f76:	4630      	mov	r0, r6
 8012f78:	f7fb fed6 	bl	800ed28 <ucdr_deserialize_uint8_t>
 8012f7c:	1d79      	adds	r1, r7, #5
 8012f7e:	4604      	mov	r4, r0
 8012f80:	4630      	mov	r0, r6
 8012f82:	f7fb fed1 	bl	800ed28 <ucdr_deserialize_uint8_t>
 8012f86:	ea05 0508 	and.w	r5, r5, r8
 8012f8a:	402c      	ands	r4, r5
 8012f8c:	4020      	ands	r0, r4
 8012f8e:	b2c0      	uxtb	r0, r0
 8012f90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012f94 <uxr_serialize_ReadSpecification>:
 8012f94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f98:	460e      	mov	r6, r1
 8012f9a:	7809      	ldrb	r1, [r1, #0]
 8012f9c:	4607      	mov	r7, r0
 8012f9e:	f7fb fead 	bl	800ecfc <ucdr_serialize_uint8_t>
 8012fa2:	7871      	ldrb	r1, [r6, #1]
 8012fa4:	4604      	mov	r4, r0
 8012fa6:	4638      	mov	r0, r7
 8012fa8:	f7fb fea8 	bl	800ecfc <ucdr_serialize_uint8_t>
 8012fac:	78b1      	ldrb	r1, [r6, #2]
 8012fae:	4004      	ands	r4, r0
 8012fb0:	4638      	mov	r0, r7
 8012fb2:	f7fb fe75 	bl	800eca0 <ucdr_serialize_bool>
 8012fb6:	78b3      	ldrb	r3, [r6, #2]
 8012fb8:	b2e4      	uxtb	r4, r4
 8012fba:	4004      	ands	r4, r0
 8012fbc:	b94b      	cbnz	r3, 8012fd2 <uxr_serialize_ReadSpecification+0x3e>
 8012fbe:	7a31      	ldrb	r1, [r6, #8]
 8012fc0:	4638      	mov	r0, r7
 8012fc2:	f7fb fe6d 	bl	800eca0 <ucdr_serialize_bool>
 8012fc6:	7a33      	ldrb	r3, [r6, #8]
 8012fc8:	4004      	ands	r4, r0
 8012fca:	b943      	cbnz	r3, 8012fde <uxr_serialize_ReadSpecification+0x4a>
 8012fcc:	4620      	mov	r0, r4
 8012fce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012fd2:	6871      	ldr	r1, [r6, #4]
 8012fd4:	4638      	mov	r0, r7
 8012fd6:	f005 f92b 	bl	8018230 <ucdr_serialize_string>
 8012fda:	4004      	ands	r4, r0
 8012fdc:	e7ef      	b.n	8012fbe <uxr_serialize_ReadSpecification+0x2a>
 8012fde:	8971      	ldrh	r1, [r6, #10]
 8012fe0:	4638      	mov	r0, r7
 8012fe2:	f7fb feb7 	bl	800ed54 <ucdr_serialize_uint16_t>
 8012fe6:	89b1      	ldrh	r1, [r6, #12]
 8012fe8:	4605      	mov	r5, r0
 8012fea:	4638      	mov	r0, r7
 8012fec:	f7fb feb2 	bl	800ed54 <ucdr_serialize_uint16_t>
 8012ff0:	89f1      	ldrh	r1, [r6, #14]
 8012ff2:	4005      	ands	r5, r0
 8012ff4:	4638      	mov	r0, r7
 8012ff6:	f7fb fead 	bl	800ed54 <ucdr_serialize_uint16_t>
 8012ffa:	8a31      	ldrh	r1, [r6, #16]
 8012ffc:	4680      	mov	r8, r0
 8012ffe:	4638      	mov	r0, r7
 8013000:	f7fb fea8 	bl	800ed54 <ucdr_serialize_uint16_t>
 8013004:	b2ed      	uxtb	r5, r5
 8013006:	4025      	ands	r5, r4
 8013008:	ea08 0505 	and.w	r5, r8, r5
 801300c:	ea00 0405 	and.w	r4, r0, r5
 8013010:	4620      	mov	r0, r4
 8013012:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013016:	bf00      	nop

08013018 <uxr_serialize_CREATE_CLIENT_Payload>:
 8013018:	f7ff b9e2 	b.w	80123e0 <uxr_serialize_CLIENT_Representation>

0801301c <uxr_serialize_CREATE_Payload>:
 801301c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801301e:	2202      	movs	r2, #2
 8013020:	4607      	mov	r7, r0
 8013022:	460e      	mov	r6, r1
 8013024:	f7fb fb74 	bl	800e710 <ucdr_serialize_array_uint8_t>
 8013028:	2202      	movs	r2, #2
 801302a:	18b1      	adds	r1, r6, r2
 801302c:	4605      	mov	r5, r0
 801302e:	4638      	mov	r0, r7
 8013030:	f7fb fb6e 	bl	800e710 <ucdr_serialize_array_uint8_t>
 8013034:	7931      	ldrb	r1, [r6, #4]
 8013036:	4604      	mov	r4, r0
 8013038:	4638      	mov	r0, r7
 801303a:	f7fb fe5f 	bl	800ecfc <ucdr_serialize_uint8_t>
 801303e:	b170      	cbz	r0, 801305e <uxr_serialize_CREATE_Payload+0x42>
 8013040:	7933      	ldrb	r3, [r6, #4]
 8013042:	402c      	ands	r4, r5
 8013044:	3b01      	subs	r3, #1
 8013046:	b2e4      	uxtb	r4, r4
 8013048:	2b0d      	cmp	r3, #13
 801304a:	d809      	bhi.n	8013060 <uxr_serialize_CREATE_Payload+0x44>
 801304c:	e8df f003 	tbb	[pc, r3]
 8013050:	23230a4c 	.word	0x23230a4c
 8013054:	0a0a0a0a 	.word	0x0a0a0a0a
 8013058:	12121208 	.word	0x12121208
 801305c:	3e45      	.short	0x3e45
 801305e:	2400      	movs	r4, #0
 8013060:	4620      	mov	r0, r4
 8013062:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013064:	f106 0108 	add.w	r1, r6, #8
 8013068:	4638      	mov	r0, r7
 801306a:	f7ff fabf 	bl	80125ec <uxr_serialize_DATAWRITER_Representation>
 801306e:	4004      	ands	r4, r0
 8013070:	4620      	mov	r0, r4
 8013072:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013074:	7a31      	ldrb	r1, [r6, #8]
 8013076:	4638      	mov	r0, r7
 8013078:	f7fb fe40 	bl	800ecfc <ucdr_serialize_uint8_t>
 801307c:	2800      	cmp	r0, #0
 801307e:	d0ee      	beq.n	801305e <uxr_serialize_CREATE_Payload+0x42>
 8013080:	7a33      	ldrb	r3, [r6, #8]
 8013082:	2b01      	cmp	r3, #1
 8013084:	d001      	beq.n	801308a <uxr_serialize_CREATE_Payload+0x6e>
 8013086:	2b02      	cmp	r3, #2
 8013088:	d1ea      	bne.n	8013060 <uxr_serialize_CREATE_Payload+0x44>
 801308a:	68f1      	ldr	r1, [r6, #12]
 801308c:	4638      	mov	r0, r7
 801308e:	f005 f8cf 	bl	8018230 <ucdr_serialize_string>
 8013092:	4004      	ands	r4, r0
 8013094:	e7e4      	b.n	8013060 <uxr_serialize_CREATE_Payload+0x44>
 8013096:	7a31      	ldrb	r1, [r6, #8]
 8013098:	4638      	mov	r0, r7
 801309a:	f7fb fe2f 	bl	800ecfc <ucdr_serialize_uint8_t>
 801309e:	4605      	mov	r5, r0
 80130a0:	b158      	cbz	r0, 80130ba <uxr_serialize_CREATE_Payload+0x9e>
 80130a2:	7a33      	ldrb	r3, [r6, #8]
 80130a4:	2b02      	cmp	r3, #2
 80130a6:	d034      	beq.n	8013112 <uxr_serialize_CREATE_Payload+0xf6>
 80130a8:	2b03      	cmp	r3, #3
 80130aa:	d106      	bne.n	80130ba <uxr_serialize_CREATE_Payload+0x9e>
 80130ac:	68f2      	ldr	r2, [r6, #12]
 80130ae:	f106 0110 	add.w	r1, r6, #16
 80130b2:	4638      	mov	r0, r7
 80130b4:	f7fd fad0 	bl	8010658 <ucdr_serialize_sequence_uint8_t>
 80130b8:	4605      	mov	r5, r0
 80130ba:	2202      	movs	r2, #2
 80130bc:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 80130c0:	4638      	mov	r0, r7
 80130c2:	f7fb fb25 	bl	800e710 <ucdr_serialize_array_uint8_t>
 80130c6:	4028      	ands	r0, r5
 80130c8:	4004      	ands	r4, r0
 80130ca:	e7c9      	b.n	8013060 <uxr_serialize_CREATE_Payload+0x44>
 80130cc:	f106 0108 	add.w	r1, r6, #8
 80130d0:	4638      	mov	r0, r7
 80130d2:	f7ff f985 	bl	80123e0 <uxr_serialize_CLIENT_Representation>
 80130d6:	4004      	ands	r4, r0
 80130d8:	e7c2      	b.n	8013060 <uxr_serialize_CREATE_Payload+0x44>
 80130da:	f106 0108 	add.w	r1, r6, #8
 80130de:	4638      	mov	r0, r7
 80130e0:	f7ff fa3a 	bl	8012558 <uxr_serialize_AGENT_Representation>
 80130e4:	4004      	ands	r4, r0
 80130e6:	e7bb      	b.n	8013060 <uxr_serialize_CREATE_Payload+0x44>
 80130e8:	7a31      	ldrb	r1, [r6, #8]
 80130ea:	4638      	mov	r0, r7
 80130ec:	f7fb fe06 	bl	800ecfc <ucdr_serialize_uint8_t>
 80130f0:	4605      	mov	r5, r0
 80130f2:	b130      	cbz	r0, 8013102 <uxr_serialize_CREATE_Payload+0xe6>
 80130f4:	7a33      	ldrb	r3, [r6, #8]
 80130f6:	2b02      	cmp	r3, #2
 80130f8:	d011      	beq.n	801311e <uxr_serialize_CREATE_Payload+0x102>
 80130fa:	2b03      	cmp	r3, #3
 80130fc:	d015      	beq.n	801312a <uxr_serialize_CREATE_Payload+0x10e>
 80130fe:	2b01      	cmp	r3, #1
 8013100:	d00d      	beq.n	801311e <uxr_serialize_CREATE_Payload+0x102>
 8013102:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 8013106:	4638      	mov	r0, r7
 8013108:	f7fc fb34 	bl	800f774 <ucdr_serialize_int16_t>
 801310c:	4028      	ands	r0, r5
 801310e:	4004      	ands	r4, r0
 8013110:	e7a6      	b.n	8013060 <uxr_serialize_CREATE_Payload+0x44>
 8013112:	68f1      	ldr	r1, [r6, #12]
 8013114:	4638      	mov	r0, r7
 8013116:	f005 f88b 	bl	8018230 <ucdr_serialize_string>
 801311a:	4605      	mov	r5, r0
 801311c:	e7cd      	b.n	80130ba <uxr_serialize_CREATE_Payload+0x9e>
 801311e:	68f1      	ldr	r1, [r6, #12]
 8013120:	4638      	mov	r0, r7
 8013122:	f005 f885 	bl	8018230 <ucdr_serialize_string>
 8013126:	4605      	mov	r5, r0
 8013128:	e7eb      	b.n	8013102 <uxr_serialize_CREATE_Payload+0xe6>
 801312a:	68f2      	ldr	r2, [r6, #12]
 801312c:	f106 0110 	add.w	r1, r6, #16
 8013130:	4638      	mov	r0, r7
 8013132:	f7fd fa91 	bl	8010658 <ucdr_serialize_sequence_uint8_t>
 8013136:	4605      	mov	r5, r0
 8013138:	e7e3      	b.n	8013102 <uxr_serialize_CREATE_Payload+0xe6>
 801313a:	bf00      	nop

0801313c <uxr_deserialize_GET_INFO_Payload>:
 801313c:	b570      	push	{r4, r5, r6, lr}
 801313e:	2202      	movs	r2, #2
 8013140:	4605      	mov	r5, r0
 8013142:	460e      	mov	r6, r1
 8013144:	f7fb fb48 	bl	800e7d8 <ucdr_deserialize_array_uint8_t>
 8013148:	2202      	movs	r2, #2
 801314a:	18b1      	adds	r1, r6, r2
 801314c:	4604      	mov	r4, r0
 801314e:	4628      	mov	r0, r5
 8013150:	f7fb fb42 	bl	800e7d8 <ucdr_deserialize_array_uint8_t>
 8013154:	1d31      	adds	r1, r6, #4
 8013156:	4004      	ands	r4, r0
 8013158:	4628      	mov	r0, r5
 801315a:	f7fc f915 	bl	800f388 <ucdr_deserialize_uint32_t>
 801315e:	b2e4      	uxtb	r4, r4
 8013160:	4020      	ands	r0, r4
 8013162:	bd70      	pop	{r4, r5, r6, pc}

08013164 <uxr_serialize_DELETE_Payload>:
 8013164:	b570      	push	{r4, r5, r6, lr}
 8013166:	2202      	movs	r2, #2
 8013168:	4605      	mov	r5, r0
 801316a:	460e      	mov	r6, r1
 801316c:	f7fb fad0 	bl	800e710 <ucdr_serialize_array_uint8_t>
 8013170:	2202      	movs	r2, #2
 8013172:	4604      	mov	r4, r0
 8013174:	18b1      	adds	r1, r6, r2
 8013176:	4628      	mov	r0, r5
 8013178:	f7fb faca 	bl	800e710 <ucdr_serialize_array_uint8_t>
 801317c:	4020      	ands	r0, r4
 801317e:	b2c0      	uxtb	r0, r0
 8013180:	bd70      	pop	{r4, r5, r6, pc}
 8013182:	bf00      	nop

08013184 <uxr_deserialize_STATUS_AGENT_Payload>:
 8013184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013188:	4605      	mov	r5, r0
 801318a:	460e      	mov	r6, r1
 801318c:	f7fb fdcc 	bl	800ed28 <ucdr_deserialize_uint8_t>
 8013190:	1c71      	adds	r1, r6, #1
 8013192:	4604      	mov	r4, r0
 8013194:	4628      	mov	r0, r5
 8013196:	f7fb fdc7 	bl	800ed28 <ucdr_deserialize_uint8_t>
 801319a:	2204      	movs	r2, #4
 801319c:	18b1      	adds	r1, r6, r2
 801319e:	4680      	mov	r8, r0
 80131a0:	4628      	mov	r0, r5
 80131a2:	f7fb fb19 	bl	800e7d8 <ucdr_deserialize_array_uint8_t>
 80131a6:	f106 0108 	add.w	r1, r6, #8
 80131aa:	4607      	mov	r7, r0
 80131ac:	2202      	movs	r2, #2
 80131ae:	4628      	mov	r0, r5
 80131b0:	f7fb fb12 	bl	800e7d8 <ucdr_deserialize_array_uint8_t>
 80131b4:	ea04 0308 	and.w	r3, r4, r8
 80131b8:	b2db      	uxtb	r3, r3
 80131ba:	ea03 0407 	and.w	r4, r3, r7
 80131be:	2202      	movs	r2, #2
 80131c0:	4607      	mov	r7, r0
 80131c2:	f106 010a 	add.w	r1, r6, #10
 80131c6:	4628      	mov	r0, r5
 80131c8:	f7fb fb06 	bl	800e7d8 <ucdr_deserialize_array_uint8_t>
 80131cc:	f106 010c 	add.w	r1, r6, #12
 80131d0:	4603      	mov	r3, r0
 80131d2:	4628      	mov	r0, r5
 80131d4:	461d      	mov	r5, r3
 80131d6:	f7fb fd79 	bl	800eccc <ucdr_deserialize_bool>
 80131da:	403c      	ands	r4, r7
 80131dc:	4025      	ands	r5, r4
 80131de:	4028      	ands	r0, r5
 80131e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080131e4 <uxr_deserialize_STATUS_Payload>:
 80131e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80131e8:	2202      	movs	r2, #2
 80131ea:	4606      	mov	r6, r0
 80131ec:	460f      	mov	r7, r1
 80131ee:	f7fb faf3 	bl	800e7d8 <ucdr_deserialize_array_uint8_t>
 80131f2:	2202      	movs	r2, #2
 80131f4:	18b9      	adds	r1, r7, r2
 80131f6:	4605      	mov	r5, r0
 80131f8:	4630      	mov	r0, r6
 80131fa:	f7fb faed 	bl	800e7d8 <ucdr_deserialize_array_uint8_t>
 80131fe:	1d39      	adds	r1, r7, #4
 8013200:	4680      	mov	r8, r0
 8013202:	4630      	mov	r0, r6
 8013204:	f7fb fd90 	bl	800ed28 <ucdr_deserialize_uint8_t>
 8013208:	1d79      	adds	r1, r7, #5
 801320a:	4604      	mov	r4, r0
 801320c:	4630      	mov	r0, r6
 801320e:	f7fb fd8b 	bl	800ed28 <ucdr_deserialize_uint8_t>
 8013212:	ea05 0508 	and.w	r5, r5, r8
 8013216:	402c      	ands	r4, r5
 8013218:	4020      	ands	r0, r4
 801321a:	b2c0      	uxtb	r0, r0
 801321c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013220 <uxr_serialize_INFO_Payload>:
 8013220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013224:	2202      	movs	r2, #2
 8013226:	460c      	mov	r4, r1
 8013228:	4605      	mov	r5, r0
 801322a:	f7fb fa71 	bl	800e710 <ucdr_serialize_array_uint8_t>
 801322e:	2202      	movs	r2, #2
 8013230:	18a1      	adds	r1, r4, r2
 8013232:	4680      	mov	r8, r0
 8013234:	4628      	mov	r0, r5
 8013236:	f7fb fa6b 	bl	800e710 <ucdr_serialize_array_uint8_t>
 801323a:	7921      	ldrb	r1, [r4, #4]
 801323c:	4607      	mov	r7, r0
 801323e:	4628      	mov	r0, r5
 8013240:	f7fb fd5c 	bl	800ecfc <ucdr_serialize_uint8_t>
 8013244:	7961      	ldrb	r1, [r4, #5]
 8013246:	4606      	mov	r6, r0
 8013248:	4628      	mov	r0, r5
 801324a:	f7fb fd57 	bl	800ecfc <ucdr_serialize_uint8_t>
 801324e:	ea08 0807 	and.w	r8, r8, r7
 8013252:	ea06 0608 	and.w	r6, r6, r8
 8013256:	4006      	ands	r6, r0
 8013258:	7a21      	ldrb	r1, [r4, #8]
 801325a:	4628      	mov	r0, r5
 801325c:	f7fb fd20 	bl	800eca0 <ucdr_serialize_bool>
 8013260:	7a23      	ldrb	r3, [r4, #8]
 8013262:	b2f7      	uxtb	r7, r6
 8013264:	4606      	mov	r6, r0
 8013266:	b96b      	cbnz	r3, 8013284 <uxr_serialize_INFO_Payload+0x64>
 8013268:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 801326c:	4628      	mov	r0, r5
 801326e:	f7fb fd17 	bl	800eca0 <ucdr_serialize_bool>
 8013272:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 8013276:	4030      	ands	r0, r6
 8013278:	b2c6      	uxtb	r6, r0
 801327a:	b983      	cbnz	r3, 801329e <uxr_serialize_INFO_Payload+0x7e>
 801327c:	ea06 0007 	and.w	r0, r6, r7
 8013280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013284:	7b21      	ldrb	r1, [r4, #12]
 8013286:	4628      	mov	r0, r5
 8013288:	f7fb fd38 	bl	800ecfc <ucdr_serialize_uint8_t>
 801328c:	b188      	cbz	r0, 80132b2 <uxr_serialize_INFO_Payload+0x92>
 801328e:	f104 010c 	add.w	r1, r4, #12
 8013292:	4628      	mov	r0, r5
 8013294:	f7ff f9d2 	bl	801263c <uxr_serialize_ObjectVariant.part.0>
 8013298:	4030      	ands	r0, r6
 801329a:	b2c6      	uxtb	r6, r0
 801329c:	e7e4      	b.n	8013268 <uxr_serialize_INFO_Payload+0x48>
 801329e:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 80132a2:	4628      	mov	r0, r5
 80132a4:	f7ff fdb2 	bl	8012e0c <uxr_serialize_ActivityInfoVariant>
 80132a8:	4006      	ands	r6, r0
 80132aa:	ea06 0007 	and.w	r0, r6, r7
 80132ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80132b2:	4606      	mov	r6, r0
 80132b4:	e7d8      	b.n	8013268 <uxr_serialize_INFO_Payload+0x48>
 80132b6:	bf00      	nop

080132b8 <uxr_serialize_READ_DATA_Payload>:
 80132b8:	b570      	push	{r4, r5, r6, lr}
 80132ba:	2202      	movs	r2, #2
 80132bc:	4605      	mov	r5, r0
 80132be:	460e      	mov	r6, r1
 80132c0:	f7fb fa26 	bl	800e710 <ucdr_serialize_array_uint8_t>
 80132c4:	2202      	movs	r2, #2
 80132c6:	18b1      	adds	r1, r6, r2
 80132c8:	4604      	mov	r4, r0
 80132ca:	4628      	mov	r0, r5
 80132cc:	f7fb fa20 	bl	800e710 <ucdr_serialize_array_uint8_t>
 80132d0:	1d31      	adds	r1, r6, #4
 80132d2:	4004      	ands	r4, r0
 80132d4:	4628      	mov	r0, r5
 80132d6:	f7ff fe5d 	bl	8012f94 <uxr_serialize_ReadSpecification>
 80132da:	b2e4      	uxtb	r4, r4
 80132dc:	4020      	ands	r0, r4
 80132de:	bd70      	pop	{r4, r5, r6, pc}

080132e0 <uxr_serialize_WRITE_DATA_Payload_Data>:
 80132e0:	b570      	push	{r4, r5, r6, lr}
 80132e2:	2202      	movs	r2, #2
 80132e4:	4605      	mov	r5, r0
 80132e6:	460e      	mov	r6, r1
 80132e8:	f7fb fa12 	bl	800e710 <ucdr_serialize_array_uint8_t>
 80132ec:	2202      	movs	r2, #2
 80132ee:	4604      	mov	r4, r0
 80132f0:	18b1      	adds	r1, r6, r2
 80132f2:	4628      	mov	r0, r5
 80132f4:	f7fb fa0c 	bl	800e710 <ucdr_serialize_array_uint8_t>
 80132f8:	4020      	ands	r0, r4
 80132fa:	b2c0      	uxtb	r0, r0
 80132fc:	bd70      	pop	{r4, r5, r6, pc}
 80132fe:	bf00      	nop

08013300 <uxr_serialize_ACKNACK_Payload>:
 8013300:	b570      	push	{r4, r5, r6, lr}
 8013302:	460c      	mov	r4, r1
 8013304:	460e      	mov	r6, r1
 8013306:	f834 1b02 	ldrh.w	r1, [r4], #2
 801330a:	4605      	mov	r5, r0
 801330c:	f7fb fd22 	bl	800ed54 <ucdr_serialize_uint16_t>
 8013310:	2202      	movs	r2, #2
 8013312:	4621      	mov	r1, r4
 8013314:	4604      	mov	r4, r0
 8013316:	4628      	mov	r0, r5
 8013318:	f7fb f9fa 	bl	800e710 <ucdr_serialize_array_uint8_t>
 801331c:	7931      	ldrb	r1, [r6, #4]
 801331e:	4004      	ands	r4, r0
 8013320:	4628      	mov	r0, r5
 8013322:	f7fb fceb 	bl	800ecfc <ucdr_serialize_uint8_t>
 8013326:	b2e4      	uxtb	r4, r4
 8013328:	4020      	ands	r0, r4
 801332a:	bd70      	pop	{r4, r5, r6, pc}

0801332c <uxr_deserialize_ACKNACK_Payload>:
 801332c:	b570      	push	{r4, r5, r6, lr}
 801332e:	4605      	mov	r5, r0
 8013330:	460e      	mov	r6, r1
 8013332:	f7fb fe0f 	bl	800ef54 <ucdr_deserialize_uint16_t>
 8013336:	2202      	movs	r2, #2
 8013338:	18b1      	adds	r1, r6, r2
 801333a:	4604      	mov	r4, r0
 801333c:	4628      	mov	r0, r5
 801333e:	f7fb fa4b 	bl	800e7d8 <ucdr_deserialize_array_uint8_t>
 8013342:	1d31      	adds	r1, r6, #4
 8013344:	4004      	ands	r4, r0
 8013346:	4628      	mov	r0, r5
 8013348:	f7fb fcee 	bl	800ed28 <ucdr_deserialize_uint8_t>
 801334c:	b2e4      	uxtb	r4, r4
 801334e:	4020      	ands	r0, r4
 8013350:	bd70      	pop	{r4, r5, r6, pc}
 8013352:	bf00      	nop

08013354 <uxr_serialize_HEARTBEAT_Payload>:
 8013354:	b570      	push	{r4, r5, r6, lr}
 8013356:	460d      	mov	r5, r1
 8013358:	8809      	ldrh	r1, [r1, #0]
 801335a:	4606      	mov	r6, r0
 801335c:	f7fb fcfa 	bl	800ed54 <ucdr_serialize_uint16_t>
 8013360:	8869      	ldrh	r1, [r5, #2]
 8013362:	4604      	mov	r4, r0
 8013364:	4630      	mov	r0, r6
 8013366:	f7fb fcf5 	bl	800ed54 <ucdr_serialize_uint16_t>
 801336a:	7929      	ldrb	r1, [r5, #4]
 801336c:	4004      	ands	r4, r0
 801336e:	4630      	mov	r0, r6
 8013370:	f7fb fcc4 	bl	800ecfc <ucdr_serialize_uint8_t>
 8013374:	b2e4      	uxtb	r4, r4
 8013376:	4020      	ands	r0, r4
 8013378:	bd70      	pop	{r4, r5, r6, pc}
 801337a:	bf00      	nop

0801337c <uxr_deserialize_HEARTBEAT_Payload>:
 801337c:	b570      	push	{r4, r5, r6, lr}
 801337e:	4605      	mov	r5, r0
 8013380:	460e      	mov	r6, r1
 8013382:	f7fb fde7 	bl	800ef54 <ucdr_deserialize_uint16_t>
 8013386:	1cb1      	adds	r1, r6, #2
 8013388:	4604      	mov	r4, r0
 801338a:	4628      	mov	r0, r5
 801338c:	f7fb fde2 	bl	800ef54 <ucdr_deserialize_uint16_t>
 8013390:	1d31      	adds	r1, r6, #4
 8013392:	4004      	ands	r4, r0
 8013394:	4628      	mov	r0, r5
 8013396:	f7fb fcc7 	bl	800ed28 <ucdr_deserialize_uint8_t>
 801339a:	b2e4      	uxtb	r4, r4
 801339c:	4020      	ands	r0, r4
 801339e:	bd70      	pop	{r4, r5, r6, pc}

080133a0 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 80133a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80133a4:	4605      	mov	r5, r0
 80133a6:	460e      	mov	r6, r1
 80133a8:	f7fc fb70 	bl	800fa8c <ucdr_deserialize_int32_t>
 80133ac:	1d31      	adds	r1, r6, #4
 80133ae:	4607      	mov	r7, r0
 80133b0:	4628      	mov	r0, r5
 80133b2:	f7fb ffe9 	bl	800f388 <ucdr_deserialize_uint32_t>
 80133b6:	f106 0108 	add.w	r1, r6, #8
 80133ba:	4680      	mov	r8, r0
 80133bc:	4628      	mov	r0, r5
 80133be:	f7fc fb65 	bl	800fa8c <ucdr_deserialize_int32_t>
 80133c2:	f106 010c 	add.w	r1, r6, #12
 80133c6:	4604      	mov	r4, r0
 80133c8:	4628      	mov	r0, r5
 80133ca:	f7fb ffdd 	bl	800f388 <ucdr_deserialize_uint32_t>
 80133ce:	ea07 0708 	and.w	r7, r7, r8
 80133d2:	403c      	ands	r4, r7
 80133d4:	f106 0110 	add.w	r1, r6, #16
 80133d8:	4004      	ands	r4, r0
 80133da:	4628      	mov	r0, r5
 80133dc:	f7fc fb56 	bl	800fa8c <ucdr_deserialize_int32_t>
 80133e0:	f106 0114 	add.w	r1, r6, #20
 80133e4:	4607      	mov	r7, r0
 80133e6:	4628      	mov	r0, r5
 80133e8:	f7fb ffce 	bl	800f388 <ucdr_deserialize_uint32_t>
 80133ec:	b2e4      	uxtb	r4, r4
 80133ee:	403c      	ands	r4, r7
 80133f0:	4020      	ands	r0, r4
 80133f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80133f6:	bf00      	nop

080133f8 <uxr_serialize_SampleIdentity>:
 80133f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80133fc:	220c      	movs	r2, #12
 80133fe:	4604      	mov	r4, r0
 8013400:	460d      	mov	r5, r1
 8013402:	f7fb f985 	bl	800e710 <ucdr_serialize_array_uint8_t>
 8013406:	2203      	movs	r2, #3
 8013408:	f105 010c 	add.w	r1, r5, #12
 801340c:	4607      	mov	r7, r0
 801340e:	4620      	mov	r0, r4
 8013410:	f7fb f97e 	bl	800e710 <ucdr_serialize_array_uint8_t>
 8013414:	7be9      	ldrb	r1, [r5, #15]
 8013416:	4680      	mov	r8, r0
 8013418:	4620      	mov	r0, r4
 801341a:	f7fb fc6f 	bl	800ecfc <ucdr_serialize_uint8_t>
 801341e:	6929      	ldr	r1, [r5, #16]
 8013420:	4606      	mov	r6, r0
 8013422:	4620      	mov	r0, r4
 8013424:	f7fc fa9a 	bl	800f95c <ucdr_serialize_int32_t>
 8013428:	6969      	ldr	r1, [r5, #20]
 801342a:	4603      	mov	r3, r0
 801342c:	4620      	mov	r0, r4
 801342e:	ea07 0708 	and.w	r7, r7, r8
 8013432:	461c      	mov	r4, r3
 8013434:	f7fb fe78 	bl	800f128 <ucdr_serialize_uint32_t>
 8013438:	403e      	ands	r6, r7
 801343a:	4034      	ands	r4, r6
 801343c:	4020      	ands	r0, r4
 801343e:	b2c0      	uxtb	r0, r0
 8013440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013444 <uxr_deserialize_SampleIdentity>:
 8013444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013448:	220c      	movs	r2, #12
 801344a:	4604      	mov	r4, r0
 801344c:	460d      	mov	r5, r1
 801344e:	f7fb f9c3 	bl	800e7d8 <ucdr_deserialize_array_uint8_t>
 8013452:	2203      	movs	r2, #3
 8013454:	f105 010c 	add.w	r1, r5, #12
 8013458:	4607      	mov	r7, r0
 801345a:	4620      	mov	r0, r4
 801345c:	f7fb f9bc 	bl	800e7d8 <ucdr_deserialize_array_uint8_t>
 8013460:	f105 010f 	add.w	r1, r5, #15
 8013464:	4680      	mov	r8, r0
 8013466:	4620      	mov	r0, r4
 8013468:	f7fb fc5e 	bl	800ed28 <ucdr_deserialize_uint8_t>
 801346c:	f105 0110 	add.w	r1, r5, #16
 8013470:	4606      	mov	r6, r0
 8013472:	4620      	mov	r0, r4
 8013474:	f7fc fb0a 	bl	800fa8c <ucdr_deserialize_int32_t>
 8013478:	f105 0114 	add.w	r1, r5, #20
 801347c:	4603      	mov	r3, r0
 801347e:	4620      	mov	r0, r4
 8013480:	ea07 0708 	and.w	r7, r7, r8
 8013484:	461c      	mov	r4, r3
 8013486:	f7fb ff7f 	bl	800f388 <ucdr_deserialize_uint32_t>
 801348a:	403e      	ands	r6, r7
 801348c:	4034      	ands	r4, r6
 801348e:	4020      	ands	r0, r4
 8013490:	b2c0      	uxtb	r0, r0
 8013492:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013496:	bf00      	nop

08013498 <nereo_interfaces__msg__CommandVelocity__init>:
 8013498:	3800      	subs	r0, #0
 801349a:	bf18      	it	ne
 801349c:	2001      	movne	r0, #1
 801349e:	4770      	bx	lr

080134a0 <nereo_interfaces__msg__CommandVelocity__fini>:
 80134a0:	4770      	bx	lr
 80134a2:	bf00      	nop

080134a4 <nereo_interfaces__srv__SetNavigationMode_Request__init>:
 80134a4:	3800      	subs	r0, #0
 80134a6:	bf18      	it	ne
 80134a8:	2001      	movne	r0, #1
 80134aa:	4770      	bx	lr

080134ac <nereo_interfaces__srv__SetNavigationMode_Request__fini>:
 80134ac:	4770      	bx	lr
 80134ae:	bf00      	nop

080134b0 <nereo_interfaces__srv__SetNavigationMode_Response__init>:
 80134b0:	3800      	subs	r0, #0
 80134b2:	bf18      	it	ne
 80134b4:	2001      	movne	r0, #1
 80134b6:	4770      	bx	lr

080134b8 <nereo_interfaces__srv__SetNavigationMode_Response__fini>:
 80134b8:	4770      	bx	lr
 80134ba:	bf00      	nop

080134bc <nereo_interfaces__msg__ThrusterStatuses__init>:
 80134bc:	3800      	subs	r0, #0
 80134be:	bf18      	it	ne
 80134c0:	2001      	movne	r0, #1
 80134c2:	4770      	bx	lr

080134c4 <nereo_interfaces__msg__ThrusterStatuses__fini>:
 80134c4:	4770      	bx	lr
 80134c6:	bf00      	nop

080134c8 <rcl_client_get_rmw_handle>:
 80134c8:	b118      	cbz	r0, 80134d2 <rcl_client_get_rmw_handle+0xa>
 80134ca:	6800      	ldr	r0, [r0, #0]
 80134cc:	b108      	cbz	r0, 80134d2 <rcl_client_get_rmw_handle+0xa>
 80134ce:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80134d2:	4770      	bx	lr

080134d4 <rcl_send_request>:
 80134d4:	b570      	push	{r4, r5, r6, lr}
 80134d6:	b082      	sub	sp, #8
 80134d8:	b1e8      	cbz	r0, 8013516 <rcl_send_request+0x42>
 80134da:	4604      	mov	r4, r0
 80134dc:	6800      	ldr	r0, [r0, #0]
 80134de:	b1d0      	cbz	r0, 8013516 <rcl_send_request+0x42>
 80134e0:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 80134e4:	b1bb      	cbz	r3, 8013516 <rcl_send_request+0x42>
 80134e6:	460e      	mov	r6, r1
 80134e8:	b1d1      	cbz	r1, 8013520 <rcl_send_request+0x4c>
 80134ea:	4615      	mov	r5, r2
 80134ec:	b1c2      	cbz	r2, 8013520 <rcl_send_request+0x4c>
 80134ee:	2105      	movs	r1, #5
 80134f0:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 80134f4:	f002 fe24 	bl	8016140 <__atomic_load_8>
 80134f8:	6823      	ldr	r3, [r4, #0]
 80134fa:	e9c5 0100 	strd	r0, r1, [r5]
 80134fe:	462a      	mov	r2, r5
 8013500:	4631      	mov	r1, r6
 8013502:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8013506:	f003 ffcf 	bl	80174a8 <rmw_send_request>
 801350a:	4606      	mov	r6, r0
 801350c:	b160      	cbz	r0, 8013528 <rcl_send_request+0x54>
 801350e:	2601      	movs	r6, #1
 8013510:	4630      	mov	r0, r6
 8013512:	b002      	add	sp, #8
 8013514:	bd70      	pop	{r4, r5, r6, pc}
 8013516:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 801351a:	4630      	mov	r0, r6
 801351c:	b002      	add	sp, #8
 801351e:	bd70      	pop	{r4, r5, r6, pc}
 8013520:	260b      	movs	r6, #11
 8013522:	4630      	mov	r0, r6
 8013524:	b002      	add	sp, #8
 8013526:	bd70      	pop	{r4, r5, r6, pc}
 8013528:	6820      	ldr	r0, [r4, #0]
 801352a:	2105      	movs	r1, #5
 801352c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013530:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8013534:	9100      	str	r1, [sp, #0]
 8013536:	f002 fe6f 	bl	8016218 <__atomic_exchange_8>
 801353a:	4630      	mov	r0, r6
 801353c:	b002      	add	sp, #8
 801353e:	bd70      	pop	{r4, r5, r6, pc}

08013540 <rcl_take_response>:
 8013540:	b570      	push	{r4, r5, r6, lr}
 8013542:	468e      	mov	lr, r1
 8013544:	460c      	mov	r4, r1
 8013546:	4616      	mov	r6, r2
 8013548:	4605      	mov	r5, r0
 801354a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801354e:	b08c      	sub	sp, #48	@ 0x30
 8013550:	f10d 0c18 	add.w	ip, sp, #24
 8013554:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013558:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801355c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8013560:	b35d      	cbz	r5, 80135ba <rcl_take_response+0x7a>
 8013562:	682b      	ldr	r3, [r5, #0]
 8013564:	b34b      	cbz	r3, 80135ba <rcl_take_response+0x7a>
 8013566:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801356a:	b330      	cbz	r0, 80135ba <rcl_take_response+0x7a>
 801356c:	b346      	cbz	r6, 80135c0 <rcl_take_response+0x80>
 801356e:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 80135c8 <rcl_take_response+0x88>
 8013572:	2300      	movs	r3, #0
 8013574:	f88d 3007 	strb.w	r3, [sp, #7]
 8013578:	4632      	mov	r2, r6
 801357a:	f10d 0307 	add.w	r3, sp, #7
 801357e:	a902      	add	r1, sp, #8
 8013580:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013584:	ed8d 7b04 	vstr	d7, [sp, #16]
 8013588:	f004 f896 	bl	80176b8 <rmw_take_response>
 801358c:	4605      	mov	r5, r0
 801358e:	b9c8      	cbnz	r0, 80135c4 <rcl_take_response+0x84>
 8013590:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8013594:	f240 13f5 	movw	r3, #501	@ 0x1f5
 8013598:	2a00      	cmp	r2, #0
 801359a:	bf08      	it	eq
 801359c:	461d      	moveq	r5, r3
 801359e:	f10d 0e18 	add.w	lr, sp, #24
 80135a2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80135a6:	46a4      	mov	ip, r4
 80135a8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80135ac:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80135b0:	e88c 0003 	stmia.w	ip, {r0, r1}
 80135b4:	4628      	mov	r0, r5
 80135b6:	b00c      	add	sp, #48	@ 0x30
 80135b8:	bd70      	pop	{r4, r5, r6, pc}
 80135ba:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 80135be:	e7ee      	b.n	801359e <rcl_take_response+0x5e>
 80135c0:	250b      	movs	r5, #11
 80135c2:	e7ec      	b.n	801359e <rcl_take_response+0x5e>
 80135c4:	2501      	movs	r5, #1
 80135c6:	e7ea      	b.n	801359e <rcl_take_response+0x5e>
	...

080135d0 <rcl_client_is_valid>:
 80135d0:	b130      	cbz	r0, 80135e0 <rcl_client_is_valid+0x10>
 80135d2:	6800      	ldr	r0, [r0, #0]
 80135d4:	b120      	cbz	r0, 80135e0 <rcl_client_is_valid+0x10>
 80135d6:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80135da:	3800      	subs	r0, #0
 80135dc:	bf18      	it	ne
 80135de:	2001      	movne	r0, #1
 80135e0:	4770      	bx	lr
 80135e2:	bf00      	nop

080135e4 <rcl_convert_rmw_ret_to_rcl_ret>:
 80135e4:	280b      	cmp	r0, #11
 80135e6:	dc0d      	bgt.n	8013604 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 80135e8:	2800      	cmp	r0, #0
 80135ea:	db09      	blt.n	8013600 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 80135ec:	280b      	cmp	r0, #11
 80135ee:	d807      	bhi.n	8013600 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 80135f0:	e8df f000 	tbb	[pc, r0]
 80135f4:	07060607 	.word	0x07060607
 80135f8:	06060606 	.word	0x06060606
 80135fc:	07070606 	.word	0x07070606
 8013600:	2001      	movs	r0, #1
 8013602:	4770      	bx	lr
 8013604:	28cb      	cmp	r0, #203	@ 0xcb
 8013606:	bf18      	it	ne
 8013608:	2001      	movne	r0, #1
 801360a:	4770      	bx	lr

0801360c <rcl_get_zero_initialized_context>:
 801360c:	4a03      	ldr	r2, [pc, #12]	@ (801361c <rcl_get_zero_initialized_context+0x10>)
 801360e:	4603      	mov	r3, r0
 8013610:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013614:	e883 0003 	stmia.w	r3, {r0, r1}
 8013618:	4618      	mov	r0, r3
 801361a:	4770      	bx	lr
 801361c:	0801db0c 	.word	0x0801db0c

08013620 <rcl_context_is_valid>:
 8013620:	b118      	cbz	r0, 801362a <rcl_context_is_valid+0xa>
 8013622:	6840      	ldr	r0, [r0, #4]
 8013624:	3800      	subs	r0, #0
 8013626:	bf18      	it	ne
 8013628:	2001      	movne	r0, #1
 801362a:	4770      	bx	lr

0801362c <__cleanup_context>:
 801362c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013630:	4606      	mov	r6, r0
 8013632:	6800      	ldr	r0, [r0, #0]
 8013634:	2300      	movs	r3, #0
 8013636:	6073      	str	r3, [r6, #4]
 8013638:	2800      	cmp	r0, #0
 801363a:	d049      	beq.n	80136d0 <__cleanup_context+0xa4>
 801363c:	6947      	ldr	r7, [r0, #20]
 801363e:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8013642:	f8d0 9010 	ldr.w	r9, [r0, #16]
 8013646:	b137      	cbz	r7, 8013656 <__cleanup_context+0x2a>
 8013648:	3014      	adds	r0, #20
 801364a:	f000 f9bb 	bl	80139c4 <rcl_init_options_fini>
 801364e:	4607      	mov	r7, r0
 8013650:	2800      	cmp	r0, #0
 8013652:	d144      	bne.n	80136de <__cleanup_context+0xb2>
 8013654:	6830      	ldr	r0, [r6, #0]
 8013656:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8013658:	b143      	cbz	r3, 801366c <__cleanup_context+0x40>
 801365a:	3028      	adds	r0, #40	@ 0x28
 801365c:	f003 fd6c 	bl	8017138 <rmw_context_fini>
 8013660:	b118      	cbz	r0, 801366a <__cleanup_context+0x3e>
 8013662:	2f00      	cmp	r7, #0
 8013664:	d03e      	beq.n	80136e4 <__cleanup_context+0xb8>
 8013666:	f7f9 fbaf 	bl	800cdc8 <rcutils_reset_error>
 801366a:	6830      	ldr	r0, [r6, #0]
 801366c:	6a03      	ldr	r3, [r0, #32]
 801366e:	b1db      	cbz	r3, 80136a8 <__cleanup_context+0x7c>
 8013670:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 8013674:	2a01      	cmp	r2, #1
 8013676:	f17c 0100 	sbcs.w	r1, ip, #0
 801367a:	db11      	blt.n	80136a0 <__cleanup_context+0x74>
 801367c:	2400      	movs	r4, #0
 801367e:	4625      	mov	r5, r4
 8013680:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8013684:	4649      	mov	r1, r9
 8013686:	b1b8      	cbz	r0, 80136b8 <__cleanup_context+0x8c>
 8013688:	47c0      	blx	r8
 801368a:	6833      	ldr	r3, [r6, #0]
 801368c:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 8013690:	3401      	adds	r4, #1
 8013692:	f145 0500 	adc.w	r5, r5, #0
 8013696:	4294      	cmp	r4, r2
 8013698:	eb75 010c 	sbcs.w	r1, r5, ip
 801369c:	6a1b      	ldr	r3, [r3, #32]
 801369e:	dbef      	blt.n	8013680 <__cleanup_context+0x54>
 80136a0:	4618      	mov	r0, r3
 80136a2:	4649      	mov	r1, r9
 80136a4:	47c0      	blx	r8
 80136a6:	6830      	ldr	r0, [r6, #0]
 80136a8:	4649      	mov	r1, r9
 80136aa:	47c0      	blx	r8
 80136ac:	2300      	movs	r3, #0
 80136ae:	e9c6 3300 	strd	r3, r3, [r6]
 80136b2:	4638      	mov	r0, r7
 80136b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80136b8:	3401      	adds	r4, #1
 80136ba:	f145 0500 	adc.w	r5, r5, #0
 80136be:	4294      	cmp	r4, r2
 80136c0:	eb75 010c 	sbcs.w	r1, r5, ip
 80136c4:	dbdc      	blt.n	8013680 <__cleanup_context+0x54>
 80136c6:	4618      	mov	r0, r3
 80136c8:	4649      	mov	r1, r9
 80136ca:	47c0      	blx	r8
 80136cc:	6830      	ldr	r0, [r6, #0]
 80136ce:	e7eb      	b.n	80136a8 <__cleanup_context+0x7c>
 80136d0:	4607      	mov	r7, r0
 80136d2:	2300      	movs	r3, #0
 80136d4:	e9c6 3300 	strd	r3, r3, [r6]
 80136d8:	4638      	mov	r0, r7
 80136da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80136de:	f7f9 fb73 	bl	800cdc8 <rcutils_reset_error>
 80136e2:	e7b7      	b.n	8013654 <__cleanup_context+0x28>
 80136e4:	f7ff ff7e 	bl	80135e4 <rcl_convert_rmw_ret_to_rcl_ret>
 80136e8:	4607      	mov	r7, r0
 80136ea:	e7bc      	b.n	8013666 <__cleanup_context+0x3a>

080136ec <rcl_init>:
 80136ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80136f0:	1e05      	subs	r5, r0, #0
 80136f2:	b09e      	sub	sp, #120	@ 0x78
 80136f4:	460e      	mov	r6, r1
 80136f6:	4690      	mov	r8, r2
 80136f8:	461f      	mov	r7, r3
 80136fa:	f340 809c 	ble.w	8013836 <rcl_init+0x14a>
 80136fe:	2900      	cmp	r1, #0
 8013700:	f000 809c 	beq.w	801383c <rcl_init+0x150>
 8013704:	f1a1 0e04 	sub.w	lr, r1, #4
 8013708:	f04f 0c00 	mov.w	ip, #0
 801370c:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 8013710:	f10c 0c01 	add.w	ip, ip, #1
 8013714:	2c00      	cmp	r4, #0
 8013716:	f000 8091 	beq.w	801383c <rcl_init+0x150>
 801371a:	4565      	cmp	r5, ip
 801371c:	d1f6      	bne.n	801370c <rcl_init+0x20>
 801371e:	f1b8 0f00 	cmp.w	r8, #0
 8013722:	f000 808b 	beq.w	801383c <rcl_init+0x150>
 8013726:	f8d8 4000 	ldr.w	r4, [r8]
 801372a:	2c00      	cmp	r4, #0
 801372c:	f000 8086 	beq.w	801383c <rcl_init+0x150>
 8013730:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013732:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 8013736:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801373a:	6823      	ldr	r3, [r4, #0]
 801373c:	f8cc 3000 	str.w	r3, [ip]
 8013740:	a819      	add	r0, sp, #100	@ 0x64
 8013742:	f7f9 fb1d 	bl	800cd80 <rcutils_allocator_is_valid>
 8013746:	2800      	cmp	r0, #0
 8013748:	d078      	beq.n	801383c <rcl_init+0x150>
 801374a:	2f00      	cmp	r7, #0
 801374c:	d076      	beq.n	801383c <rcl_init+0x150>
 801374e:	683b      	ldr	r3, [r7, #0]
 8013750:	2b00      	cmp	r3, #0
 8013752:	d178      	bne.n	8013846 <rcl_init+0x15a>
 8013754:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 8013758:	2178      	movs	r1, #120	@ 0x78
 801375a:	2001      	movs	r0, #1
 801375c:	4798      	blx	r3
 801375e:	4604      	mov	r4, r0
 8013760:	6038      	str	r0, [r7, #0]
 8013762:	2800      	cmp	r0, #0
 8013764:	f000 80b6 	beq.w	80138d4 <rcl_init+0x1e8>
 8013768:	a802      	add	r0, sp, #8
 801376a:	f003 f839 	bl	80167e0 <rmw_get_zero_initialized_context>
 801376e:	a902      	add	r1, sp, #8
 8013770:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8013774:	2250      	movs	r2, #80	@ 0x50
 8013776:	ac19      	add	r4, sp, #100	@ 0x64
 8013778:	f007 fe95 	bl	801b4a6 <memcpy>
 801377c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801377e:	f8d7 e000 	ldr.w	lr, [r7]
 8013782:	46f4      	mov	ip, lr
 8013784:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013788:	6823      	ldr	r3, [r4, #0]
 801378a:	f8cc 3000 	str.w	r3, [ip]
 801378e:	f10e 0114 	add.w	r1, lr, #20
 8013792:	4640      	mov	r0, r8
 8013794:	f000 f940 	bl	8013a18 <rcl_init_options_copy>
 8013798:	4604      	mov	r4, r0
 801379a:	2800      	cmp	r0, #0
 801379c:	d144      	bne.n	8013828 <rcl_init+0x13c>
 801379e:	f8d7 9000 	ldr.w	r9, [r7]
 80137a2:	ea4f 78e5 	mov.w	r8, r5, asr #31
 80137a6:	f8c9 0020 	str.w	r0, [r9, #32]
 80137aa:	f8c9 5018 	str.w	r5, [r9, #24]
 80137ae:	f8c9 801c 	str.w	r8, [r9, #28]
 80137b2:	2d00      	cmp	r5, #0
 80137b4:	d04e      	beq.n	8013854 <rcl_init+0x168>
 80137b6:	2e00      	cmp	r6, #0
 80137b8:	d04c      	beq.n	8013854 <rcl_init+0x168>
 80137ba:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 80137be:	2104      	movs	r1, #4
 80137c0:	4628      	mov	r0, r5
 80137c2:	4798      	blx	r3
 80137c4:	f8c9 0020 	str.w	r0, [r9, #32]
 80137c8:	f8d7 9000 	ldr.w	r9, [r7]
 80137cc:	f8d9 3020 	ldr.w	r3, [r9, #32]
 80137d0:	46ca      	mov	sl, r9
 80137d2:	b343      	cbz	r3, 8013826 <rcl_init+0x13a>
 80137d4:	2d01      	cmp	r5, #1
 80137d6:	f178 0300 	sbcs.w	r3, r8, #0
 80137da:	db3b      	blt.n	8013854 <rcl_init+0x168>
 80137dc:	2400      	movs	r4, #0
 80137de:	3e04      	subs	r6, #4
 80137e0:	46a1      	mov	r9, r4
 80137e2:	e00b      	b.n	80137fc <rcl_init+0x110>
 80137e4:	6831      	ldr	r1, [r6, #0]
 80137e6:	f007 fe5e 	bl	801b4a6 <memcpy>
 80137ea:	3401      	adds	r4, #1
 80137ec:	f149 0900 	adc.w	r9, r9, #0
 80137f0:	45c8      	cmp	r8, r9
 80137f2:	bf08      	it	eq
 80137f4:	42a5      	cmpeq	r5, r4
 80137f6:	d02b      	beq.n	8013850 <rcl_init+0x164>
 80137f8:	f8d7 a000 	ldr.w	sl, [r7]
 80137fc:	f856 0f04 	ldr.w	r0, [r6, #4]!
 8013800:	f7ec fd08 	bl	8000214 <strlen>
 8013804:	1c42      	adds	r2, r0, #1
 8013806:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013808:	991d      	ldr	r1, [sp, #116]	@ 0x74
 801380a:	f8da a020 	ldr.w	sl, [sl, #32]
 801380e:	9201      	str	r2, [sp, #4]
 8013810:	4610      	mov	r0, r2
 8013812:	4798      	blx	r3
 8013814:	683b      	ldr	r3, [r7, #0]
 8013816:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 801381a:	6a1b      	ldr	r3, [r3, #32]
 801381c:	9a01      	ldr	r2, [sp, #4]
 801381e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8013822:	2800      	cmp	r0, #0
 8013824:	d1de      	bne.n	80137e4 <rcl_init+0xf8>
 8013826:	240a      	movs	r4, #10
 8013828:	4638      	mov	r0, r7
 801382a:	f7ff feff 	bl	801362c <__cleanup_context>
 801382e:	4620      	mov	r0, r4
 8013830:	b01e      	add	sp, #120	@ 0x78
 8013832:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013836:	2900      	cmp	r1, #0
 8013838:	f43f af71 	beq.w	801371e <rcl_init+0x32>
 801383c:	240b      	movs	r4, #11
 801383e:	4620      	mov	r0, r4
 8013840:	b01e      	add	sp, #120	@ 0x78
 8013842:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013846:	2464      	movs	r4, #100	@ 0x64
 8013848:	4620      	mov	r0, r4
 801384a:	b01e      	add	sp, #120	@ 0x78
 801384c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013850:	f8d7 9000 	ldr.w	r9, [r7]
 8013854:	4926      	ldr	r1, [pc, #152]	@ (80138f0 <rcl_init+0x204>)
 8013856:	680b      	ldr	r3, [r1, #0]
 8013858:	3301      	adds	r3, #1
 801385a:	d036      	beq.n	80138ca <rcl_init+0x1de>
 801385c:	600b      	str	r3, [r1, #0]
 801385e:	461a      	mov	r2, r3
 8013860:	2400      	movs	r4, #0
 8013862:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8013866:	607b      	str	r3, [r7, #4]
 8013868:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801386a:	3301      	adds	r3, #1
 801386c:	e9c0 2406 	strd	r2, r4, [r0, #24]
 8013870:	d034      	beq.n	80138dc <rcl_init+0x1f0>
 8013872:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 8013876:	b93b      	cbnz	r3, 8013888 <rcl_init+0x19c>
 8013878:	3030      	adds	r0, #48	@ 0x30
 801387a:	f000 f939 	bl	8013af0 <rcl_get_localhost_only>
 801387e:	4604      	mov	r4, r0
 8013880:	2800      	cmp	r0, #0
 8013882:	d1d1      	bne.n	8013828 <rcl_init+0x13c>
 8013884:	683b      	ldr	r3, [r7, #0]
 8013886:	6958      	ldr	r0, [r3, #20]
 8013888:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 801388a:	aa18      	add	r2, sp, #96	@ 0x60
 801388c:	a917      	add	r1, sp, #92	@ 0x5c
 801388e:	f001 f8f3 	bl	8014a78 <rcl_validate_enclave_name>
 8013892:	4604      	mov	r4, r0
 8013894:	2800      	cmp	r0, #0
 8013896:	d1c7      	bne.n	8013828 <rcl_init+0x13c>
 8013898:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801389a:	b9eb      	cbnz	r3, 80138d8 <rcl_init+0x1ec>
 801389c:	6839      	ldr	r1, [r7, #0]
 801389e:	694b      	ldr	r3, [r1, #20]
 80138a0:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 80138a2:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 80138a6:	f000 fc3d 	bl	8014124 <rcl_get_security_options_from_environment>
 80138aa:	4604      	mov	r4, r0
 80138ac:	2800      	cmp	r0, #0
 80138ae:	d1bb      	bne.n	8013828 <rcl_init+0x13c>
 80138b0:	6839      	ldr	r1, [r7, #0]
 80138b2:	6948      	ldr	r0, [r1, #20]
 80138b4:	3128      	adds	r1, #40	@ 0x28
 80138b6:	3018      	adds	r0, #24
 80138b8:	f003 fb08 	bl	8016ecc <rmw_init>
 80138bc:	4604      	mov	r4, r0
 80138be:	2800      	cmp	r0, #0
 80138c0:	d0bd      	beq.n	801383e <rcl_init+0x152>
 80138c2:	f7ff fe8f 	bl	80135e4 <rcl_convert_rmw_ret_to_rcl_ret>
 80138c6:	4604      	mov	r4, r0
 80138c8:	e7ae      	b.n	8013828 <rcl_init+0x13c>
 80138ca:	2201      	movs	r2, #1
 80138cc:	461c      	mov	r4, r3
 80138ce:	600a      	str	r2, [r1, #0]
 80138d0:	4613      	mov	r3, r2
 80138d2:	e7c6      	b.n	8013862 <rcl_init+0x176>
 80138d4:	240a      	movs	r4, #10
 80138d6:	e7b2      	b.n	801383e <rcl_init+0x152>
 80138d8:	2401      	movs	r4, #1
 80138da:	e7a5      	b.n	8013828 <rcl_init+0x13c>
 80138dc:	3024      	adds	r0, #36	@ 0x24
 80138de:	f006 f8ab 	bl	8019a38 <rcl_get_default_domain_id>
 80138e2:	4604      	mov	r4, r0
 80138e4:	2800      	cmp	r0, #0
 80138e6:	d19f      	bne.n	8013828 <rcl_init+0x13c>
 80138e8:	683b      	ldr	r3, [r7, #0]
 80138ea:	6958      	ldr	r0, [r3, #20]
 80138ec:	e7c1      	b.n	8013872 <rcl_init+0x186>
 80138ee:	bf00      	nop
 80138f0:	20015c34 	.word	0x20015c34

080138f4 <rcl_get_zero_initialized_init_options>:
 80138f4:	2000      	movs	r0, #0
 80138f6:	4770      	bx	lr

080138f8 <rcl_init_options_init>:
 80138f8:	b084      	sub	sp, #16
 80138fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80138fc:	b097      	sub	sp, #92	@ 0x5c
 80138fe:	ae1d      	add	r6, sp, #116	@ 0x74
 8013900:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 8013904:	2800      	cmp	r0, #0
 8013906:	d058      	beq.n	80139ba <rcl_init_options_init+0xc2>
 8013908:	6803      	ldr	r3, [r0, #0]
 801390a:	4605      	mov	r5, r0
 801390c:	b133      	cbz	r3, 801391c <rcl_init_options_init+0x24>
 801390e:	2464      	movs	r4, #100	@ 0x64
 8013910:	4620      	mov	r0, r4
 8013912:	b017      	add	sp, #92	@ 0x5c
 8013914:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8013918:	b004      	add	sp, #16
 801391a:	4770      	bx	lr
 801391c:	4630      	mov	r0, r6
 801391e:	f7f9 fa2f 	bl	800cd80 <rcutils_allocator_is_valid>
 8013922:	2800      	cmp	r0, #0
 8013924:	d049      	beq.n	80139ba <rcl_init_options_init+0xc2>
 8013926:	46b4      	mov	ip, r6
 8013928:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801392c:	ac11      	add	r4, sp, #68	@ 0x44
 801392e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013930:	f8dc 3000 	ldr.w	r3, [ip]
 8013934:	6023      	str	r3, [r4, #0]
 8013936:	9921      	ldr	r1, [sp, #132]	@ 0x84
 8013938:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801393a:	2050      	movs	r0, #80	@ 0x50
 801393c:	4798      	blx	r3
 801393e:	4604      	mov	r4, r0
 8013940:	6028      	str	r0, [r5, #0]
 8013942:	2800      	cmp	r0, #0
 8013944:	d03b      	beq.n	80139be <rcl_init_options_init+0xc6>
 8013946:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 801394a:	4686      	mov	lr, r0
 801394c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013950:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013954:	f8dc 3000 	ldr.w	r3, [ip]
 8013958:	f8ce 3000 	str.w	r3, [lr]
 801395c:	a802      	add	r0, sp, #8
 801395e:	f002 ff4f 	bl	8016800 <rmw_get_zero_initialized_init_options>
 8013962:	f10d 0e08 	add.w	lr, sp, #8
 8013966:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801396a:	f104 0c18 	add.w	ip, r4, #24
 801396e:	682f      	ldr	r7, [r5, #0]
 8013970:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013974:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013978:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801397c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013980:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013984:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8013988:	ac20      	add	r4, sp, #128	@ 0x80
 801398a:	e88c 0003 	stmia.w	ip, {r0, r1}
 801398e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013992:	e88d 0003 	stmia.w	sp, {r0, r1}
 8013996:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 801399a:	f107 0018 	add.w	r0, r7, #24
 801399e:	f003 f99d 	bl	8016cdc <rmw_init_options_init>
 80139a2:	4604      	mov	r4, r0
 80139a4:	2800      	cmp	r0, #0
 80139a6:	d0b3      	beq.n	8013910 <rcl_init_options_init+0x18>
 80139a8:	9921      	ldr	r1, [sp, #132]	@ 0x84
 80139aa:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80139ac:	6828      	ldr	r0, [r5, #0]
 80139ae:	4798      	blx	r3
 80139b0:	4620      	mov	r0, r4
 80139b2:	f7ff fe17 	bl	80135e4 <rcl_convert_rmw_ret_to_rcl_ret>
 80139b6:	4604      	mov	r4, r0
 80139b8:	e7aa      	b.n	8013910 <rcl_init_options_init+0x18>
 80139ba:	240b      	movs	r4, #11
 80139bc:	e7a8      	b.n	8013910 <rcl_init_options_init+0x18>
 80139be:	240a      	movs	r4, #10
 80139c0:	e7a6      	b.n	8013910 <rcl_init_options_init+0x18>
 80139c2:	bf00      	nop

080139c4 <rcl_init_options_fini>:
 80139c4:	b530      	push	{r4, r5, lr}
 80139c6:	b087      	sub	sp, #28
 80139c8:	b1f0      	cbz	r0, 8013a08 <rcl_init_options_fini+0x44>
 80139ca:	6803      	ldr	r3, [r0, #0]
 80139cc:	4604      	mov	r4, r0
 80139ce:	b1db      	cbz	r3, 8013a08 <rcl_init_options_fini+0x44>
 80139d0:	469c      	mov	ip, r3
 80139d2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80139d6:	f10d 0e04 	add.w	lr, sp, #4
 80139da:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80139de:	f8dc 3000 	ldr.w	r3, [ip]
 80139e2:	f8ce 3000 	str.w	r3, [lr]
 80139e6:	a801      	add	r0, sp, #4
 80139e8:	f7f9 f9ca 	bl	800cd80 <rcutils_allocator_is_valid>
 80139ec:	b160      	cbz	r0, 8013a08 <rcl_init_options_fini+0x44>
 80139ee:	6820      	ldr	r0, [r4, #0]
 80139f0:	3018      	adds	r0, #24
 80139f2:	f003 fa23 	bl	8016e3c <rmw_init_options_fini>
 80139f6:	4605      	mov	r5, r0
 80139f8:	b950      	cbnz	r0, 8013a10 <rcl_init_options_fini+0x4c>
 80139fa:	6820      	ldr	r0, [r4, #0]
 80139fc:	9b02      	ldr	r3, [sp, #8]
 80139fe:	9905      	ldr	r1, [sp, #20]
 8013a00:	4798      	blx	r3
 8013a02:	4628      	mov	r0, r5
 8013a04:	b007      	add	sp, #28
 8013a06:	bd30      	pop	{r4, r5, pc}
 8013a08:	250b      	movs	r5, #11
 8013a0a:	4628      	mov	r0, r5
 8013a0c:	b007      	add	sp, #28
 8013a0e:	bd30      	pop	{r4, r5, pc}
 8013a10:	f7ff fde8 	bl	80135e4 <rcl_convert_rmw_ret_to_rcl_ret>
 8013a14:	4605      	mov	r5, r0
 8013a16:	e7f8      	b.n	8013a0a <rcl_init_options_fini+0x46>

08013a18 <rcl_init_options_copy>:
 8013a18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013a1c:	b094      	sub	sp, #80	@ 0x50
 8013a1e:	2800      	cmp	r0, #0
 8013a20:	d058      	beq.n	8013ad4 <rcl_init_options_copy+0xbc>
 8013a22:	4604      	mov	r4, r0
 8013a24:	6800      	ldr	r0, [r0, #0]
 8013a26:	2800      	cmp	r0, #0
 8013a28:	d054      	beq.n	8013ad4 <rcl_init_options_copy+0xbc>
 8013a2a:	460e      	mov	r6, r1
 8013a2c:	f7f9 f9a8 	bl	800cd80 <rcutils_allocator_is_valid>
 8013a30:	2800      	cmp	r0, #0
 8013a32:	d04f      	beq.n	8013ad4 <rcl_init_options_copy+0xbc>
 8013a34:	2e00      	cmp	r6, #0
 8013a36:	d04d      	beq.n	8013ad4 <rcl_init_options_copy+0xbc>
 8013a38:	6833      	ldr	r3, [r6, #0]
 8013a3a:	b123      	cbz	r3, 8013a46 <rcl_init_options_copy+0x2e>
 8013a3c:	2464      	movs	r4, #100	@ 0x64
 8013a3e:	4620      	mov	r0, r4
 8013a40:	b014      	add	sp, #80	@ 0x50
 8013a42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a46:	6827      	ldr	r7, [r4, #0]
 8013a48:	46bc      	mov	ip, r7
 8013a4a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013a4e:	ad0f      	add	r5, sp, #60	@ 0x3c
 8013a50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013a52:	f8dc 3000 	ldr.w	r3, [ip]
 8013a56:	f8d7 8000 	ldr.w	r8, [r7]
 8013a5a:	602b      	str	r3, [r5, #0]
 8013a5c:	4619      	mov	r1, r3
 8013a5e:	2050      	movs	r0, #80	@ 0x50
 8013a60:	47c0      	blx	r8
 8013a62:	4605      	mov	r5, r0
 8013a64:	6030      	str	r0, [r6, #0]
 8013a66:	b3d0      	cbz	r0, 8013ade <rcl_init_options_copy+0xc6>
 8013a68:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 8013a6c:	4686      	mov	lr, r0
 8013a6e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013a72:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013a76:	f8dc 3000 	ldr.w	r3, [ip]
 8013a7a:	f8ce 3000 	str.w	r3, [lr]
 8013a7e:	4668      	mov	r0, sp
 8013a80:	f002 febe 	bl	8016800 <rmw_get_zero_initialized_init_options>
 8013a84:	46ee      	mov	lr, sp
 8013a86:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013a8a:	f105 0c18 	add.w	ip, r5, #24
 8013a8e:	6824      	ldr	r4, [r4, #0]
 8013a90:	6835      	ldr	r5, [r6, #0]
 8013a92:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013a96:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013a9a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013a9e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013aa2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013aa6:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8013aaa:	e88c 0003 	stmia.w	ip, {r0, r1}
 8013aae:	f104 0018 	add.w	r0, r4, #24
 8013ab2:	f105 0118 	add.w	r1, r5, #24
 8013ab6:	f003 f979 	bl	8016dac <rmw_init_options_copy>
 8013aba:	4604      	mov	r4, r0
 8013abc:	2800      	cmp	r0, #0
 8013abe:	d0be      	beq.n	8013a3e <rcl_init_options_copy+0x26>
 8013ac0:	f7f9 f96c 	bl	800cd9c <rcutils_get_error_string>
 8013ac4:	f7f9 f980 	bl	800cdc8 <rcutils_reset_error>
 8013ac8:	4630      	mov	r0, r6
 8013aca:	f7ff ff7b 	bl	80139c4 <rcl_init_options_fini>
 8013ace:	b140      	cbz	r0, 8013ae2 <rcl_init_options_copy+0xca>
 8013ad0:	4604      	mov	r4, r0
 8013ad2:	e7b4      	b.n	8013a3e <rcl_init_options_copy+0x26>
 8013ad4:	240b      	movs	r4, #11
 8013ad6:	4620      	mov	r0, r4
 8013ad8:	b014      	add	sp, #80	@ 0x50
 8013ada:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013ade:	240a      	movs	r4, #10
 8013ae0:	e7ad      	b.n	8013a3e <rcl_init_options_copy+0x26>
 8013ae2:	4620      	mov	r0, r4
 8013ae4:	b014      	add	sp, #80	@ 0x50
 8013ae6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013aea:	f7ff bd7b 	b.w	80135e4 <rcl_convert_rmw_ret_to_rcl_ret>
 8013aee:	bf00      	nop

08013af0 <rcl_get_localhost_only>:
 8013af0:	b510      	push	{r4, lr}
 8013af2:	b082      	sub	sp, #8
 8013af4:	2300      	movs	r3, #0
 8013af6:	9301      	str	r3, [sp, #4]
 8013af8:	b1b8      	cbz	r0, 8013b2a <rcl_get_localhost_only+0x3a>
 8013afa:	4604      	mov	r4, r0
 8013afc:	a901      	add	r1, sp, #4
 8013afe:	480c      	ldr	r0, [pc, #48]	@ (8013b30 <rcl_get_localhost_only+0x40>)
 8013b00:	f002 fbc2 	bl	8016288 <rcutils_get_env>
 8013b04:	b110      	cbz	r0, 8013b0c <rcl_get_localhost_only+0x1c>
 8013b06:	2001      	movs	r0, #1
 8013b08:	b002      	add	sp, #8
 8013b0a:	bd10      	pop	{r4, pc}
 8013b0c:	9b01      	ldr	r3, [sp, #4]
 8013b0e:	b113      	cbz	r3, 8013b16 <rcl_get_localhost_only+0x26>
 8013b10:	781a      	ldrb	r2, [r3, #0]
 8013b12:	2a31      	cmp	r2, #49	@ 0x31
 8013b14:	d004      	beq.n	8013b20 <rcl_get_localhost_only+0x30>
 8013b16:	2302      	movs	r3, #2
 8013b18:	2000      	movs	r0, #0
 8013b1a:	7023      	strb	r3, [r4, #0]
 8013b1c:	b002      	add	sp, #8
 8013b1e:	bd10      	pop	{r4, pc}
 8013b20:	785b      	ldrb	r3, [r3, #1]
 8013b22:	2b00      	cmp	r3, #0
 8013b24:	d1f7      	bne.n	8013b16 <rcl_get_localhost_only+0x26>
 8013b26:	2301      	movs	r3, #1
 8013b28:	e7f6      	b.n	8013b18 <rcl_get_localhost_only+0x28>
 8013b2a:	200b      	movs	r0, #11
 8013b2c:	b002      	add	sp, #8
 8013b2e:	bd10      	pop	{r4, pc}
 8013b30:	0801d0ec 	.word	0x0801d0ec

08013b34 <rcl_get_zero_initialized_node>:
 8013b34:	4a03      	ldr	r2, [pc, #12]	@ (8013b44 <rcl_get_zero_initialized_node+0x10>)
 8013b36:	4603      	mov	r3, r0
 8013b38:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013b3c:	e883 0003 	stmia.w	r3, {r0, r1}
 8013b40:	4618      	mov	r0, r3
 8013b42:	4770      	bx	lr
 8013b44:	0801db14 	.word	0x0801db14

08013b48 <rcl_node_init>:
 8013b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b4c:	b0a9      	sub	sp, #164	@ 0xa4
 8013b4e:	4604      	mov	r4, r0
 8013b50:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 8013b54:	a823      	add	r0, sp, #140	@ 0x8c
 8013b56:	460e      	mov	r6, r1
 8013b58:	4615      	mov	r5, r2
 8013b5a:	461f      	mov	r7, r3
 8013b5c:	f006 f994 	bl	8019e88 <rcl_guard_condition_get_default_options>
 8013b60:	f1b8 0f00 	cmp.w	r8, #0
 8013b64:	f000 80e6 	beq.w	8013d34 <rcl_node_init+0x1ec>
 8013b68:	4640      	mov	r0, r8
 8013b6a:	f7f9 f909 	bl	800cd80 <rcutils_allocator_is_valid>
 8013b6e:	2800      	cmp	r0, #0
 8013b70:	f000 80e0 	beq.w	8013d34 <rcl_node_init+0x1ec>
 8013b74:	2e00      	cmp	r6, #0
 8013b76:	f000 80dd 	beq.w	8013d34 <rcl_node_init+0x1ec>
 8013b7a:	2d00      	cmp	r5, #0
 8013b7c:	f000 80da 	beq.w	8013d34 <rcl_node_init+0x1ec>
 8013b80:	2c00      	cmp	r4, #0
 8013b82:	f000 80d7 	beq.w	8013d34 <rcl_node_init+0x1ec>
 8013b86:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8013b8a:	f1b9 0f00 	cmp.w	r9, #0
 8013b8e:	f040 80fd 	bne.w	8013d8c <rcl_node_init+0x244>
 8013b92:	2f00      	cmp	r7, #0
 8013b94:	f000 80ce 	beq.w	8013d34 <rcl_node_init+0x1ec>
 8013b98:	4638      	mov	r0, r7
 8013b9a:	f7ff fd41 	bl	8013620 <rcl_context_is_valid>
 8013b9e:	4682      	mov	sl, r0
 8013ba0:	2800      	cmp	r0, #0
 8013ba2:	f000 80cd 	beq.w	8013d40 <rcl_node_init+0x1f8>
 8013ba6:	464a      	mov	r2, r9
 8013ba8:	a922      	add	r1, sp, #136	@ 0x88
 8013baa:	4630      	mov	r0, r6
 8013bac:	f8cd 9088 	str.w	r9, [sp, #136]	@ 0x88
 8013bb0:	f002 ffc8 	bl	8016b44 <rmw_validate_node_name>
 8013bb4:	4681      	mov	r9, r0
 8013bb6:	2800      	cmp	r0, #0
 8013bb8:	f040 80be 	bne.w	8013d38 <rcl_node_init+0x1f0>
 8013bbc:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8013bbe:	2800      	cmp	r0, #0
 8013bc0:	f040 80f0 	bne.w	8013da4 <rcl_node_init+0x25c>
 8013bc4:	4628      	mov	r0, r5
 8013bc6:	f7ec fb25 	bl	8000214 <strlen>
 8013bca:	2800      	cmp	r0, #0
 8013bcc:	f040 80bb 	bne.w	8013d46 <rcl_node_init+0x1fe>
 8013bd0:	4d7c      	ldr	r5, [pc, #496]	@ (8013dc4 <rcl_node_init+0x27c>)
 8013bd2:	a922      	add	r1, sp, #136	@ 0x88
 8013bd4:	2200      	movs	r2, #0
 8013bd6:	4628      	mov	r0, r5
 8013bd8:	f002 ff96 	bl	8016b08 <rmw_validate_namespace>
 8013bdc:	4681      	mov	r9, r0
 8013bde:	2800      	cmp	r0, #0
 8013be0:	f040 80aa 	bne.w	8013d38 <rcl_node_init+0x1f0>
 8013be4:	4682      	mov	sl, r0
 8013be6:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8013be8:	2800      	cmp	r0, #0
 8013bea:	f040 80e0 	bne.w	8013dae <rcl_node_init+0x266>
 8013bee:	f8d8 3000 	ldr.w	r3, [r8]
 8013bf2:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8013bf6:	2078      	movs	r0, #120	@ 0x78
 8013bf8:	4798      	blx	r3
 8013bfa:	4681      	mov	r9, r0
 8013bfc:	6060      	str	r0, [r4, #4]
 8013bfe:	2800      	cmp	r0, #0
 8013c00:	f000 80ca 	beq.w	8013d98 <rcl_node_init+0x250>
 8013c04:	2200      	movs	r2, #0
 8013c06:	2300      	movs	r3, #0
 8013c08:	e9c9 231a 	strd	r2, r3, [r9, #104]	@ 0x68
 8013c0c:	e9c9 231c 	strd	r2, r3, [r9, #112]	@ 0x70
 8013c10:	a808      	add	r0, sp, #32
 8013c12:	f000 f907 	bl	8013e24 <rcl_node_get_default_options>
 8013c16:	a908      	add	r1, sp, #32
 8013c18:	4648      	mov	r0, r9
 8013c1a:	2268      	movs	r2, #104	@ 0x68
 8013c1c:	f007 fc43 	bl	801b4a6 <memcpy>
 8013c20:	6861      	ldr	r1, [r4, #4]
 8013c22:	6027      	str	r7, [r4, #0]
 8013c24:	4640      	mov	r0, r8
 8013c26:	f000 f90b 	bl	8013e40 <rcl_node_options_copy>
 8013c2a:	2800      	cmp	r0, #0
 8013c2c:	d158      	bne.n	8013ce0 <rcl_node_init+0x198>
 8013c2e:	4628      	mov	r0, r5
 8013c30:	f7ec faf0 	bl	8000214 <strlen>
 8013c34:	4428      	add	r0, r5
 8013c36:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 8013c3a:	e9cd 5603 	strd	r5, r6, [sp, #12]
 8013c3e:	2b2f      	cmp	r3, #47	@ 0x2f
 8013c40:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8013c44:	9300      	str	r3, [sp, #0]
 8013c46:	bf0c      	ite	eq
 8013c48:	4b5f      	ldreq	r3, [pc, #380]	@ (8013dc8 <rcl_node_init+0x280>)
 8013c4a:	4b60      	ldrne	r3, [pc, #384]	@ (8013dcc <rcl_node_init+0x284>)
 8013c4c:	9302      	str	r3, [sp, #8]
 8013c4e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8013c52:	9301      	str	r3, [sp, #4]
 8013c54:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8013c58:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8013c5c:	f002 fb3c 	bl	80162d8 <rcutils_format_string_limit>
 8013c60:	6823      	ldr	r3, [r4, #0]
 8013c62:	f8c9 0074 	str.w	r0, [r9, #116]	@ 0x74
 8013c66:	6818      	ldr	r0, [r3, #0]
 8013c68:	4631      	mov	r1, r6
 8013c6a:	3028      	adds	r0, #40	@ 0x28
 8013c6c:	462a      	mov	r2, r5
 8013c6e:	6866      	ldr	r6, [r4, #4]
 8013c70:	f003 fb80 	bl	8017374 <rmw_create_node>
 8013c74:	6863      	ldr	r3, [r4, #4]
 8013c76:	66b0      	str	r0, [r6, #104]	@ 0x68
 8013c78:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8013c7a:	2800      	cmp	r0, #0
 8013c7c:	d032      	beq.n	8013ce4 <rcl_node_init+0x19c>
 8013c7e:	f003 fc0d 	bl	801749c <rmw_node_get_graph_guard_condition>
 8013c82:	4681      	mov	r9, r0
 8013c84:	b360      	cbz	r0, 8013ce0 <rcl_node_init+0x198>
 8013c86:	f8d8 3000 	ldr.w	r3, [r8]
 8013c8a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8013c8e:	6866      	ldr	r6, [r4, #4]
 8013c90:	2008      	movs	r0, #8
 8013c92:	4798      	blx	r3
 8013c94:	6863      	ldr	r3, [r4, #4]
 8013c96:	66f0      	str	r0, [r6, #108]	@ 0x6c
 8013c98:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 8013c9c:	f1bb 0f00 	cmp.w	fp, #0
 8013ca0:	d020      	beq.n	8013ce4 <rcl_node_init+0x19c>
 8013ca2:	a806      	add	r0, sp, #24
 8013ca4:	f006 f860 	bl	8019d68 <rcl_get_zero_initialized_guard_condition>
 8013ca8:	a806      	add	r0, sp, #24
 8013caa:	c803      	ldmia	r0, {r0, r1}
 8013cac:	6863      	ldr	r3, [r4, #4]
 8013cae:	46c4      	mov	ip, r8
 8013cb0:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 8013cb4:	e88b 0003 	stmia.w	fp, {r0, r1}
 8013cb8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013cbc:	ae23      	add	r6, sp, #140	@ 0x8c
 8013cbe:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8013cc0:	f8dc 3000 	ldr.w	r3, [ip]
 8013cc4:	6033      	str	r3, [r6, #0]
 8013cc6:	ab28      	add	r3, sp, #160	@ 0xa0
 8013cc8:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 8013ccc:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8013cd0:	4649      	mov	r1, r9
 8013cd2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8013cd4:	463a      	mov	r2, r7
 8013cd6:	4670      	mov	r0, lr
 8013cd8:	f006 f850 	bl	8019d7c <rcl_guard_condition_init_from_rmw>
 8013cdc:	4681      	mov	r9, r0
 8013cde:	b328      	cbz	r0, 8013d2c <rcl_node_init+0x1e4>
 8013ce0:	6863      	ldr	r3, [r4, #4]
 8013ce2:	b1f3      	cbz	r3, 8013d22 <rcl_node_init+0x1da>
 8013ce4:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8013ce6:	b128      	cbz	r0, 8013cf4 <rcl_node_init+0x1ac>
 8013ce8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013cec:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8013cf0:	4798      	blx	r3
 8013cf2:	6863      	ldr	r3, [r4, #4]
 8013cf4:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8013cf6:	b110      	cbz	r0, 8013cfe <rcl_node_init+0x1b6>
 8013cf8:	f003 fb54 	bl	80173a4 <rmw_destroy_node>
 8013cfc:	6863      	ldr	r3, [r4, #4]
 8013cfe:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8013d00:	b148      	cbz	r0, 8013d16 <rcl_node_init+0x1ce>
 8013d02:	f006 f89b 	bl	8019e3c <rcl_guard_condition_fini>
 8013d06:	6863      	ldr	r3, [r4, #4]
 8013d08:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8013d0c:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8013d0e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013d12:	4798      	blx	r3
 8013d14:	6863      	ldr	r3, [r4, #4]
 8013d16:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8013d1a:	4618      	mov	r0, r3
 8013d1c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013d20:	4798      	blx	r3
 8013d22:	2300      	movs	r3, #0
 8013d24:	e9c4 3300 	strd	r3, r3, [r4]
 8013d28:	f04f 0901 	mov.w	r9, #1
 8013d2c:	f1ba 0f00 	cmp.w	sl, #0
 8013d30:	d125      	bne.n	8013d7e <rcl_node_init+0x236>
 8013d32:	e001      	b.n	8013d38 <rcl_node_init+0x1f0>
 8013d34:	f04f 090b 	mov.w	r9, #11
 8013d38:	4648      	mov	r0, r9
 8013d3a:	b029      	add	sp, #164	@ 0xa4
 8013d3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d40:	f04f 0965 	mov.w	r9, #101	@ 0x65
 8013d44:	e7f8      	b.n	8013d38 <rcl_node_init+0x1f0>
 8013d46:	782b      	ldrb	r3, [r5, #0]
 8013d48:	2b2f      	cmp	r3, #47	@ 0x2f
 8013d4a:	f43f af42 	beq.w	8013bd2 <rcl_node_init+0x8a>
 8013d4e:	9503      	str	r5, [sp, #12]
 8013d50:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8013d54:	9300      	str	r3, [sp, #0]
 8013d56:	4b1e      	ldr	r3, [pc, #120]	@ (8013dd0 <rcl_node_init+0x288>)
 8013d58:	9302      	str	r3, [sp, #8]
 8013d5a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8013d5e:	9301      	str	r3, [sp, #4]
 8013d60:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8013d64:	f002 fab8 	bl	80162d8 <rcutils_format_string_limit>
 8013d68:	4605      	mov	r5, r0
 8013d6a:	b340      	cbz	r0, 8013dbe <rcl_node_init+0x276>
 8013d6c:	2200      	movs	r2, #0
 8013d6e:	a922      	add	r1, sp, #136	@ 0x88
 8013d70:	9222      	str	r2, [sp, #136]	@ 0x88
 8013d72:	f002 fec9 	bl	8016b08 <rmw_validate_namespace>
 8013d76:	4681      	mov	r9, r0
 8013d78:	2800      	cmp	r0, #0
 8013d7a:	f43f af34 	beq.w	8013be6 <rcl_node_init+0x9e>
 8013d7e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013d82:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8013d86:	4628      	mov	r0, r5
 8013d88:	4798      	blx	r3
 8013d8a:	e7d5      	b.n	8013d38 <rcl_node_init+0x1f0>
 8013d8c:	f04f 0964 	mov.w	r9, #100	@ 0x64
 8013d90:	4648      	mov	r0, r9
 8013d92:	b029      	add	sp, #164	@ 0xa4
 8013d94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d98:	f04f 090a 	mov.w	r9, #10
 8013d9c:	f1ba 0f00 	cmp.w	sl, #0
 8013da0:	d1ed      	bne.n	8013d7e <rcl_node_init+0x236>
 8013da2:	e7c9      	b.n	8013d38 <rcl_node_init+0x1f0>
 8013da4:	f002 ff20 	bl	8016be8 <rmw_node_name_validation_result_string>
 8013da8:	f04f 09c9 	mov.w	r9, #201	@ 0xc9
 8013dac:	e7c4      	b.n	8013d38 <rcl_node_init+0x1f0>
 8013dae:	f002 febd 	bl	8016b2c <rmw_namespace_validation_result_string>
 8013db2:	f04f 09ca 	mov.w	r9, #202	@ 0xca
 8013db6:	f1ba 0f00 	cmp.w	sl, #0
 8013dba:	d1e0      	bne.n	8013d7e <rcl_node_init+0x236>
 8013dbc:	e7bc      	b.n	8013d38 <rcl_node_init+0x1f0>
 8013dbe:	f04f 090a 	mov.w	r9, #10
 8013dc2:	e7b9      	b.n	8013d38 <rcl_node_init+0x1f0>
 8013dc4:	0801d100 	.word	0x0801d100
 8013dc8:	0801cbfc 	.word	0x0801cbfc
 8013dcc:	0801d108 	.word	0x0801d108
 8013dd0:	0801d104 	.word	0x0801d104

08013dd4 <rcl_node_is_valid>:
 8013dd4:	b130      	cbz	r0, 8013de4 <rcl_node_is_valid+0x10>
 8013dd6:	6843      	ldr	r3, [r0, #4]
 8013dd8:	b123      	cbz	r3, 8013de4 <rcl_node_is_valid+0x10>
 8013dda:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013ddc:	b113      	cbz	r3, 8013de4 <rcl_node_is_valid+0x10>
 8013dde:	6800      	ldr	r0, [r0, #0]
 8013de0:	f7ff bc1e 	b.w	8013620 <rcl_context_is_valid>
 8013de4:	2000      	movs	r0, #0
 8013de6:	4770      	bx	lr

08013de8 <rcl_node_get_name>:
 8013de8:	b120      	cbz	r0, 8013df4 <rcl_node_get_name+0xc>
 8013dea:	6840      	ldr	r0, [r0, #4]
 8013dec:	b110      	cbz	r0, 8013df4 <rcl_node_get_name+0xc>
 8013dee:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8013df0:	b100      	cbz	r0, 8013df4 <rcl_node_get_name+0xc>
 8013df2:	6880      	ldr	r0, [r0, #8]
 8013df4:	4770      	bx	lr
 8013df6:	bf00      	nop

08013df8 <rcl_node_get_namespace>:
 8013df8:	b120      	cbz	r0, 8013e04 <rcl_node_get_namespace+0xc>
 8013dfa:	6840      	ldr	r0, [r0, #4]
 8013dfc:	b110      	cbz	r0, 8013e04 <rcl_node_get_namespace+0xc>
 8013dfe:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8013e00:	b100      	cbz	r0, 8013e04 <rcl_node_get_namespace+0xc>
 8013e02:	68c0      	ldr	r0, [r0, #12]
 8013e04:	4770      	bx	lr
 8013e06:	bf00      	nop

08013e08 <rcl_node_get_options>:
 8013e08:	b128      	cbz	r0, 8013e16 <rcl_node_get_options+0xe>
 8013e0a:	6840      	ldr	r0, [r0, #4]
 8013e0c:	b118      	cbz	r0, 8013e16 <rcl_node_get_options+0xe>
 8013e0e:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8013e10:	2b00      	cmp	r3, #0
 8013e12:	bf08      	it	eq
 8013e14:	2000      	moveq	r0, #0
 8013e16:	4770      	bx	lr

08013e18 <rcl_node_get_rmw_handle>:
 8013e18:	b110      	cbz	r0, 8013e20 <rcl_node_get_rmw_handle+0x8>
 8013e1a:	6840      	ldr	r0, [r0, #4]
 8013e1c:	b100      	cbz	r0, 8013e20 <rcl_node_get_rmw_handle+0x8>
 8013e1e:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8013e20:	4770      	bx	lr
 8013e22:	bf00      	nop

08013e24 <rcl_node_get_default_options>:
 8013e24:	b510      	push	{r4, lr}
 8013e26:	2268      	movs	r2, #104	@ 0x68
 8013e28:	4604      	mov	r4, r0
 8013e2a:	2100      	movs	r1, #0
 8013e2c:	f007 fab8 	bl	801b3a0 <memset>
 8013e30:	4620      	mov	r0, r4
 8013e32:	f7f8 ff97 	bl	800cd64 <rcutils_get_default_allocator>
 8013e36:	2301      	movs	r3, #1
 8013e38:	7523      	strb	r3, [r4, #20]
 8013e3a:	4620      	mov	r0, r4
 8013e3c:	bd10      	pop	{r4, pc}
 8013e3e:	bf00      	nop

08013e40 <rcl_node_options_copy>:
 8013e40:	b1d0      	cbz	r0, 8013e78 <rcl_node_options_copy+0x38>
 8013e42:	b570      	push	{r4, r5, r6, lr}
 8013e44:	460c      	mov	r4, r1
 8013e46:	b1a9      	cbz	r1, 8013e74 <rcl_node_options_copy+0x34>
 8013e48:	4288      	cmp	r0, r1
 8013e4a:	4684      	mov	ip, r0
 8013e4c:	d012      	beq.n	8013e74 <rcl_node_options_copy+0x34>
 8013e4e:	4605      	mov	r5, r0
 8013e50:	8a86      	ldrh	r6, [r0, #20]
 8013e52:	468e      	mov	lr, r1
 8013e54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013e56:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013e5a:	682b      	ldr	r3, [r5, #0]
 8013e5c:	f8ce 3000 	str.w	r3, [lr]
 8013e60:	f10c 0118 	add.w	r1, ip, #24
 8013e64:	2250      	movs	r2, #80	@ 0x50
 8013e66:	82a6      	strh	r6, [r4, #20]
 8013e68:	f104 0018 	add.w	r0, r4, #24
 8013e6c:	f007 fb1b 	bl	801b4a6 <memcpy>
 8013e70:	2000      	movs	r0, #0
 8013e72:	bd70      	pop	{r4, r5, r6, pc}
 8013e74:	200b      	movs	r0, #11
 8013e76:	bd70      	pop	{r4, r5, r6, pc}
 8013e78:	200b      	movs	r0, #11
 8013e7a:	4770      	bx	lr

08013e7c <rcl_node_resolve_name>:
 8013e7c:	b082      	sub	sp, #8
 8013e7e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e82:	b091      	sub	sp, #68	@ 0x44
 8013e84:	ac1a      	add	r4, sp, #104	@ 0x68
 8013e86:	e884 000c 	stmia.w	r4, {r2, r3}
 8013e8a:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 8013e8e:	2800      	cmp	r0, #0
 8013e90:	d03b      	beq.n	8013f0a <rcl_node_resolve_name+0x8e>
 8013e92:	460c      	mov	r4, r1
 8013e94:	4605      	mov	r5, r0
 8013e96:	f7ff ffb7 	bl	8013e08 <rcl_node_get_options>
 8013e9a:	2800      	cmp	r0, #0
 8013e9c:	d037      	beq.n	8013f0e <rcl_node_resolve_name+0x92>
 8013e9e:	4628      	mov	r0, r5
 8013ea0:	f7ff ffa2 	bl	8013de8 <rcl_node_get_name>
 8013ea4:	4606      	mov	r6, r0
 8013ea6:	4628      	mov	r0, r5
 8013ea8:	f7ff ffa6 	bl	8013df8 <rcl_node_get_namespace>
 8013eac:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 8013eb0:	4681      	mov	r9, r0
 8013eb2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013eb6:	ad0b      	add	r5, sp, #44	@ 0x2c
 8013eb8:	46ac      	mov	ip, r5
 8013eba:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013ebe:	f8de 3000 	ldr.w	r3, [lr]
 8013ec2:	f8cc 3000 	str.w	r3, [ip]
 8013ec6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8013ec8:	b1fb      	cbz	r3, 8013f0a <rcl_node_resolve_name+0x8e>
 8013eca:	468a      	mov	sl, r1
 8013ecc:	f8dd b078 	ldr.w	fp, [sp, #120]	@ 0x78
 8013ed0:	f002 fb5a 	bl	8016588 <rcutils_get_zero_initialized_string_map>
 8013ed4:	ab10      	add	r3, sp, #64	@ 0x40
 8013ed6:	9008      	str	r0, [sp, #32]
 8013ed8:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8013edc:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8013ee0:	2100      	movs	r1, #0
 8013ee2:	e895 000c 	ldmia.w	r5, {r2, r3}
 8013ee6:	a808      	add	r0, sp, #32
 8013ee8:	f002 fbc6 	bl	8016678 <rcutils_string_map_init>
 8013eec:	4607      	mov	r7, r0
 8013eee:	b180      	cbz	r0, 8013f12 <rcl_node_resolve_name+0x96>
 8013ef0:	f7f8 ff54 	bl	800cd9c <rcutils_get_error_string>
 8013ef4:	f7f8 ff68 	bl	800cdc8 <rcutils_reset_error>
 8013ef8:	2f0a      	cmp	r7, #10
 8013efa:	bf18      	it	ne
 8013efc:	2701      	movne	r7, #1
 8013efe:	4638      	mov	r0, r7
 8013f00:	b011      	add	sp, #68	@ 0x44
 8013f02:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f06:	b002      	add	sp, #8
 8013f08:	4770      	bx	lr
 8013f0a:	270b      	movs	r7, #11
 8013f0c:	e7f7      	b.n	8013efe <rcl_node_resolve_name+0x82>
 8013f0e:	2701      	movs	r7, #1
 8013f10:	e7f5      	b.n	8013efe <rcl_node_resolve_name+0x82>
 8013f12:	9009      	str	r0, [sp, #36]	@ 0x24
 8013f14:	9007      	str	r0, [sp, #28]
 8013f16:	a808      	add	r0, sp, #32
 8013f18:	f005 ff20 	bl	8019d5c <rcl_get_default_topic_name_substitutions>
 8013f1c:	4607      	mov	r7, r0
 8013f1e:	b1a8      	cbz	r0, 8013f4c <rcl_node_resolve_name+0xd0>
 8013f20:	280a      	cmp	r0, #10
 8013f22:	9c07      	ldr	r4, [sp, #28]
 8013f24:	d000      	beq.n	8013f28 <rcl_node_resolve_name+0xac>
 8013f26:	2701      	movs	r7, #1
 8013f28:	a808      	add	r0, sp, #32
 8013f2a:	f002 fbe5 	bl	80166f8 <rcutils_string_map_fini>
 8013f2e:	2800      	cmp	r0, #0
 8013f30:	d13d      	bne.n	8013fae <rcl_node_resolve_name+0x132>
 8013f32:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013f34:	4659      	mov	r1, fp
 8013f36:	47d0      	blx	sl
 8013f38:	4659      	mov	r1, fp
 8013f3a:	4620      	mov	r0, r4
 8013f3c:	47d0      	blx	sl
 8013f3e:	f1b8 0f00 	cmp.w	r8, #0
 8013f42:	d0dc      	beq.n	8013efe <rcl_node_resolve_name+0x82>
 8013f44:	2f67      	cmp	r7, #103	@ 0x67
 8013f46:	bf08      	it	eq
 8013f48:	2768      	moveq	r7, #104	@ 0x68
 8013f4a:	e7d8      	b.n	8013efe <rcl_node_resolve_name+0x82>
 8013f4c:	ab09      	add	r3, sp, #36	@ 0x24
 8013f4e:	9305      	str	r3, [sp, #20]
 8013f50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013f52:	46ec      	mov	ip, sp
 8013f54:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013f58:	682b      	ldr	r3, [r5, #0]
 8013f5a:	f8cc 3000 	str.w	r3, [ip]
 8013f5e:	464a      	mov	r2, r9
 8013f60:	4631      	mov	r1, r6
 8013f62:	4620      	mov	r0, r4
 8013f64:	ab08      	add	r3, sp, #32
 8013f66:	f005 fd9b 	bl	8019aa0 <rcl_expand_topic_name>
 8013f6a:	4607      	mov	r7, r0
 8013f6c:	b9b8      	cbnz	r0, 8013f9e <rcl_node_resolve_name+0x122>
 8013f6e:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8013f70:	9009      	str	r0, [sp, #36]	@ 0x24
 8013f72:	4602      	mov	r2, r0
 8013f74:	a90a      	add	r1, sp, #40	@ 0x28
 8013f76:	4620      	mov	r0, r4
 8013f78:	f002 fd02 	bl	8016980 <rmw_validate_full_topic_name>
 8013f7c:	b988      	cbnz	r0, 8013fa2 <rcl_node_resolve_name+0x126>
 8013f7e:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8013f80:	b9d5      	cbnz	r5, 8013fb8 <rcl_node_resolve_name+0x13c>
 8013f82:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8013f84:	a808      	add	r0, sp, #32
 8013f86:	601c      	str	r4, [r3, #0]
 8013f88:	f002 fbb6 	bl	80166f8 <rcutils_string_map_fini>
 8013f8c:	4607      	mov	r7, r0
 8013f8e:	b1a8      	cbz	r0, 8013fbc <rcl_node_resolve_name+0x140>
 8013f90:	f7f8 ff04 	bl	800cd9c <rcutils_get_error_string>
 8013f94:	462c      	mov	r4, r5
 8013f96:	f7f8 ff17 	bl	800cdc8 <rcutils_reset_error>
 8013f9a:	2701      	movs	r7, #1
 8013f9c:	e7c9      	b.n	8013f32 <rcl_node_resolve_name+0xb6>
 8013f9e:	9c07      	ldr	r4, [sp, #28]
 8013fa0:	e7c2      	b.n	8013f28 <rcl_node_resolve_name+0xac>
 8013fa2:	f7f8 fefb 	bl	800cd9c <rcutils_get_error_string>
 8013fa6:	2701      	movs	r7, #1
 8013fa8:	f7f8 ff0e 	bl	800cdc8 <rcutils_reset_error>
 8013fac:	e7bc      	b.n	8013f28 <rcl_node_resolve_name+0xac>
 8013fae:	f7f8 fef5 	bl	800cd9c <rcutils_get_error_string>
 8013fb2:	f7f8 ff09 	bl	800cdc8 <rcutils_reset_error>
 8013fb6:	e7bc      	b.n	8013f32 <rcl_node_resolve_name+0xb6>
 8013fb8:	2767      	movs	r7, #103	@ 0x67
 8013fba:	e7b5      	b.n	8013f28 <rcl_node_resolve_name+0xac>
 8013fbc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013fbe:	4659      	mov	r1, fp
 8013fc0:	47d0      	blx	sl
 8013fc2:	4659      	mov	r1, fp
 8013fc4:	4638      	mov	r0, r7
 8013fc6:	47d0      	blx	sl
 8013fc8:	e799      	b.n	8013efe <rcl_node_resolve_name+0x82>
 8013fca:	bf00      	nop

08013fcc <exact_match_lookup>:
 8013fcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013fce:	f102 0708 	add.w	r7, r2, #8
 8013fd2:	460b      	mov	r3, r1
 8013fd4:	4614      	mov	r4, r2
 8013fd6:	4606      	mov	r6, r0
 8013fd8:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8013fdc:	b085      	sub	sp, #20
 8013fde:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8013fe2:	4618      	mov	r0, r3
 8013fe4:	4919      	ldr	r1, [pc, #100]	@ (801404c <exact_match_lookup+0x80>)
 8013fe6:	e894 000c 	ldmia.w	r4, {r2, r3}
 8013fea:	f002 f967 	bl	80162bc <rcutils_join_path>
 8013fee:	7833      	ldrb	r3, [r6, #0]
 8013ff0:	2b2f      	cmp	r3, #47	@ 0x2f
 8013ff2:	4605      	mov	r5, r0
 8013ff4:	d023      	beq.n	801403e <exact_match_lookup+0x72>
 8013ff6:	f104 030c 	add.w	r3, r4, #12
 8013ffa:	e893 0003 	ldmia.w	r3, {r0, r1}
 8013ffe:	e88d 0003 	stmia.w	sp, {r0, r1}
 8014002:	1c70      	adds	r0, r6, #1
 8014004:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8014008:	f002 f95e 	bl	80162c8 <rcutils_to_native_path>
 801400c:	4606      	mov	r6, r0
 801400e:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8014012:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8014016:	4631      	mov	r1, r6
 8014018:	e894 000c 	ldmia.w	r4, {r2, r3}
 801401c:	4628      	mov	r0, r5
 801401e:	f002 f94d 	bl	80162bc <rcutils_join_path>
 8014022:	6862      	ldr	r2, [r4, #4]
 8014024:	6921      	ldr	r1, [r4, #16]
 8014026:	4603      	mov	r3, r0
 8014028:	4630      	mov	r0, r6
 801402a:	461e      	mov	r6, r3
 801402c:	4790      	blx	r2
 801402e:	4628      	mov	r0, r5
 8014030:	6863      	ldr	r3, [r4, #4]
 8014032:	6921      	ldr	r1, [r4, #16]
 8014034:	4798      	blx	r3
 8014036:	4635      	mov	r5, r6
 8014038:	4628      	mov	r0, r5
 801403a:	b005      	add	sp, #20
 801403c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801403e:	7873      	ldrb	r3, [r6, #1]
 8014040:	2b00      	cmp	r3, #0
 8014042:	d1d8      	bne.n	8013ff6 <exact_match_lookup+0x2a>
 8014044:	4628      	mov	r0, r5
 8014046:	b005      	add	sp, #20
 8014048:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801404a:	bf00      	nop
 801404c:	0801d14c 	.word	0x0801d14c

08014050 <rcl_get_secure_root>:
 8014050:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014054:	b085      	sub	sp, #20
 8014056:	b168      	cbz	r0, 8014074 <rcl_get_secure_root+0x24>
 8014058:	4607      	mov	r7, r0
 801405a:	4608      	mov	r0, r1
 801405c:	460c      	mov	r4, r1
 801405e:	f7f8 fe8f 	bl	800cd80 <rcutils_allocator_is_valid>
 8014062:	b138      	cbz	r0, 8014074 <rcl_get_secure_root+0x24>
 8014064:	2300      	movs	r3, #0
 8014066:	482d      	ldr	r0, [pc, #180]	@ (801411c <rcl_get_secure_root+0xcc>)
 8014068:	9303      	str	r3, [sp, #12]
 801406a:	a903      	add	r1, sp, #12
 801406c:	f002 f90c 	bl	8016288 <rcutils_get_env>
 8014070:	4605      	mov	r5, r0
 8014072:	b120      	cbz	r0, 801407e <rcl_get_secure_root+0x2e>
 8014074:	2500      	movs	r5, #0
 8014076:	4628      	mov	r0, r5
 8014078:	b005      	add	sp, #20
 801407a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801407e:	9b03      	ldr	r3, [sp, #12]
 8014080:	781a      	ldrb	r2, [r3, #0]
 8014082:	2a00      	cmp	r2, #0
 8014084:	d0f6      	beq.n	8014074 <rcl_get_secure_root+0x24>
 8014086:	f104 090c 	add.w	r9, r4, #12
 801408a:	e899 0003 	ldmia.w	r9, {r0, r1}
 801408e:	e88d 0003 	stmia.w	sp, {r0, r1}
 8014092:	4618      	mov	r0, r3
 8014094:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8014098:	f002 fa38 	bl	801650c <rcutils_strdup>
 801409c:	4680      	mov	r8, r0
 801409e:	2800      	cmp	r0, #0
 80140a0:	d0e8      	beq.n	8014074 <rcl_get_secure_root+0x24>
 80140a2:	481f      	ldr	r0, [pc, #124]	@ (8014120 <rcl_get_secure_root+0xd0>)
 80140a4:	9503      	str	r5, [sp, #12]
 80140a6:	a903      	add	r1, sp, #12
 80140a8:	f002 f8ee 	bl	8016288 <rcutils_get_env>
 80140ac:	b160      	cbz	r0, 80140c8 <rcl_get_secure_root+0x78>
 80140ae:	2600      	movs	r6, #0
 80140b0:	6863      	ldr	r3, [r4, #4]
 80140b2:	6921      	ldr	r1, [r4, #16]
 80140b4:	4630      	mov	r0, r6
 80140b6:	4798      	blx	r3
 80140b8:	4640      	mov	r0, r8
 80140ba:	6863      	ldr	r3, [r4, #4]
 80140bc:	6921      	ldr	r1, [r4, #16]
 80140be:	4798      	blx	r3
 80140c0:	4628      	mov	r0, r5
 80140c2:	b005      	add	sp, #20
 80140c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80140c8:	9b03      	ldr	r3, [sp, #12]
 80140ca:	781e      	ldrb	r6, [r3, #0]
 80140cc:	b1f6      	cbz	r6, 801410c <rcl_get_secure_root+0xbc>
 80140ce:	e899 0003 	ldmia.w	r9, {r0, r1}
 80140d2:	e88d 0003 	stmia.w	sp, {r0, r1}
 80140d6:	4618      	mov	r0, r3
 80140d8:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80140dc:	f002 fa16 	bl	801650c <rcutils_strdup>
 80140e0:	4606      	mov	r6, r0
 80140e2:	2800      	cmp	r0, #0
 80140e4:	d0e3      	beq.n	80140ae <rcl_get_secure_root+0x5e>
 80140e6:	4622      	mov	r2, r4
 80140e8:	4641      	mov	r1, r8
 80140ea:	f7ff ff6f 	bl	8013fcc <exact_match_lookup>
 80140ee:	4605      	mov	r5, r0
 80140f0:	2d00      	cmp	r5, #0
 80140f2:	d0dd      	beq.n	80140b0 <rcl_get_secure_root+0x60>
 80140f4:	4628      	mov	r0, r5
 80140f6:	f002 f8df 	bl	80162b8 <rcutils_is_directory>
 80140fa:	4603      	mov	r3, r0
 80140fc:	2800      	cmp	r0, #0
 80140fe:	d1d7      	bne.n	80140b0 <rcl_get_secure_root+0x60>
 8014100:	4628      	mov	r0, r5
 8014102:	6921      	ldr	r1, [r4, #16]
 8014104:	461d      	mov	r5, r3
 8014106:	6863      	ldr	r3, [r4, #4]
 8014108:	4798      	blx	r3
 801410a:	e7d1      	b.n	80140b0 <rcl_get_secure_root+0x60>
 801410c:	4622      	mov	r2, r4
 801410e:	4638      	mov	r0, r7
 8014110:	4641      	mov	r1, r8
 8014112:	f7ff ff5b 	bl	8013fcc <exact_match_lookup>
 8014116:	4605      	mov	r5, r0
 8014118:	e7ea      	b.n	80140f0 <rcl_get_secure_root+0xa0>
 801411a:	bf00      	nop
 801411c:	0801d158 	.word	0x0801d158
 8014120:	0801d170 	.word	0x0801d170

08014124 <rcl_get_security_options_from_environment>:
 8014124:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014128:	b082      	sub	sp, #8
 801412a:	2300      	movs	r3, #0
 801412c:	4606      	mov	r6, r0
 801412e:	460f      	mov	r7, r1
 8014130:	4820      	ldr	r0, [pc, #128]	@ (80141b4 <rcl_get_security_options_from_environment+0x90>)
 8014132:	9301      	str	r3, [sp, #4]
 8014134:	a901      	add	r1, sp, #4
 8014136:	4690      	mov	r8, r2
 8014138:	f002 f8a6 	bl	8016288 <rcutils_get_env>
 801413c:	b120      	cbz	r0, 8014148 <rcl_get_security_options_from_environment+0x24>
 801413e:	2501      	movs	r5, #1
 8014140:	4628      	mov	r0, r5
 8014142:	b002      	add	sp, #8
 8014144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014148:	491b      	ldr	r1, [pc, #108]	@ (80141b8 <rcl_get_security_options_from_environment+0x94>)
 801414a:	4604      	mov	r4, r0
 801414c:	9801      	ldr	r0, [sp, #4]
 801414e:	f7ec f857 	bl	8000200 <strcmp>
 8014152:	4605      	mov	r5, r0
 8014154:	b9e8      	cbnz	r0, 8014192 <rcl_get_security_options_from_environment+0x6e>
 8014156:	9001      	str	r0, [sp, #4]
 8014158:	f1b8 0f00 	cmp.w	r8, #0
 801415c:	d020      	beq.n	80141a0 <rcl_get_security_options_from_environment+0x7c>
 801415e:	4817      	ldr	r0, [pc, #92]	@ (80141bc <rcl_get_security_options_from_environment+0x98>)
 8014160:	a901      	add	r1, sp, #4
 8014162:	f002 f891 	bl	8016288 <rcutils_get_env>
 8014166:	2800      	cmp	r0, #0
 8014168:	d1e9      	bne.n	801413e <rcl_get_security_options_from_environment+0x1a>
 801416a:	4915      	ldr	r1, [pc, #84]	@ (80141c0 <rcl_get_security_options_from_environment+0x9c>)
 801416c:	9801      	ldr	r0, [sp, #4]
 801416e:	f7ec f847 	bl	8000200 <strcmp>
 8014172:	fab0 f080 	clz	r0, r0
 8014176:	0940      	lsrs	r0, r0, #5
 8014178:	f888 0000 	strb.w	r0, [r8]
 801417c:	4639      	mov	r1, r7
 801417e:	4630      	mov	r0, r6
 8014180:	f7ff ff66 	bl	8014050 <rcl_get_secure_root>
 8014184:	b170      	cbz	r0, 80141a4 <rcl_get_security_options_from_environment+0x80>
 8014186:	f8c8 0004 	str.w	r0, [r8, #4]
 801418a:	4628      	mov	r0, r5
 801418c:	b002      	add	sp, #8
 801418e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014192:	4625      	mov	r5, r4
 8014194:	4628      	mov	r0, r5
 8014196:	f888 4000 	strb.w	r4, [r8]
 801419a:	b002      	add	sp, #8
 801419c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80141a0:	250b      	movs	r5, #11
 80141a2:	e7cd      	b.n	8014140 <rcl_get_security_options_from_environment+0x1c>
 80141a4:	f898 5000 	ldrb.w	r5, [r8]
 80141a8:	f1a5 0501 	sub.w	r5, r5, #1
 80141ac:	fab5 f585 	clz	r5, r5
 80141b0:	096d      	lsrs	r5, r5, #5
 80141b2:	e7c5      	b.n	8014140 <rcl_get_security_options_from_environment+0x1c>
 80141b4:	0801d110 	.word	0x0801d110
 80141b8:	0801d124 	.word	0x0801d124
 80141bc:	0801d12c 	.word	0x0801d12c
 80141c0:	0801d144 	.word	0x0801d144

080141c4 <rcl_get_zero_initialized_service>:
 80141c4:	4b01      	ldr	r3, [pc, #4]	@ (80141cc <rcl_get_zero_initialized_service+0x8>)
 80141c6:	6818      	ldr	r0, [r3, #0]
 80141c8:	4770      	bx	lr
 80141ca:	bf00      	nop
 80141cc:	0801db1c 	.word	0x0801db1c

080141d0 <rcl_service_init>:
 80141d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80141d4:	b089      	sub	sp, #36	@ 0x24
 80141d6:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 80141d8:	b1c5      	cbz	r5, 801420c <rcl_service_init+0x3c>
 80141da:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 80141de:	4604      	mov	r4, r0
 80141e0:	4648      	mov	r0, r9
 80141e2:	4688      	mov	r8, r1
 80141e4:	4617      	mov	r7, r2
 80141e6:	461e      	mov	r6, r3
 80141e8:	f7f8 fdca 	bl	800cd80 <rcutils_allocator_is_valid>
 80141ec:	b170      	cbz	r0, 801420c <rcl_service_init+0x3c>
 80141ee:	b16c      	cbz	r4, 801420c <rcl_service_init+0x3c>
 80141f0:	4640      	mov	r0, r8
 80141f2:	f7ff fdef 	bl	8013dd4 <rcl_node_is_valid>
 80141f6:	2800      	cmp	r0, #0
 80141f8:	d058      	beq.n	80142ac <rcl_service_init+0xdc>
 80141fa:	b13f      	cbz	r7, 801420c <rcl_service_init+0x3c>
 80141fc:	b136      	cbz	r6, 801420c <rcl_service_init+0x3c>
 80141fe:	6823      	ldr	r3, [r4, #0]
 8014200:	b14b      	cbz	r3, 8014216 <rcl_service_init+0x46>
 8014202:	2664      	movs	r6, #100	@ 0x64
 8014204:	4630      	mov	r0, r6
 8014206:	b009      	add	sp, #36	@ 0x24
 8014208:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801420c:	260b      	movs	r6, #11
 801420e:	4630      	mov	r0, r6
 8014210:	b009      	add	sp, #36	@ 0x24
 8014212:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014216:	aa07      	add	r2, sp, #28
 8014218:	9205      	str	r2, [sp, #20]
 801421a:	2201      	movs	r2, #1
 801421c:	9304      	str	r3, [sp, #16]
 801421e:	9203      	str	r2, [sp, #12]
 8014220:	9307      	str	r3, [sp, #28]
 8014222:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 8014226:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801422a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801422e:	4631      	mov	r1, r6
 8014230:	e899 000c 	ldmia.w	r9, {r2, r3}
 8014234:	4640      	mov	r0, r8
 8014236:	f7ff fe21 	bl	8013e7c <rcl_node_resolve_name>
 801423a:	2800      	cmp	r0, #0
 801423c:	d145      	bne.n	80142ca <rcl_service_init+0xfa>
 801423e:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 8014240:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 8014242:	f44f 7088 	mov.w	r0, #272	@ 0x110
 8014246:	4798      	blx	r3
 8014248:	6020      	str	r0, [r4, #0]
 801424a:	2800      	cmp	r0, #0
 801424c:	d043      	beq.n	80142d6 <rcl_service_init+0x106>
 801424e:	4640      	mov	r0, r8
 8014250:	f7ff fde2 	bl	8013e18 <rcl_node_get_rmw_handle>
 8014254:	462b      	mov	r3, r5
 8014256:	9a07      	ldr	r2, [sp, #28]
 8014258:	6826      	ldr	r6, [r4, #0]
 801425a:	4639      	mov	r1, r7
 801425c:	f003 fa76 	bl	801774c <rmw_create_service>
 8014260:	6823      	ldr	r3, [r4, #0]
 8014262:	f8c6 0108 	str.w	r0, [r6, #264]	@ 0x108
 8014266:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801426a:	b330      	cbz	r0, 80142ba <rcl_service_init+0xea>
 801426c:	f103 0168 	add.w	r1, r3, #104	@ 0x68
 8014270:	f003 fb92 	bl	8017998 <rmw_service_request_subscription_get_actual_qos>
 8014274:	b9f8      	cbnz	r0, 80142b6 <rcl_service_init+0xe6>
 8014276:	6821      	ldr	r1, [r4, #0]
 8014278:	f8d1 0108 	ldr.w	r0, [r1, #264]	@ 0x108
 801427c:	31b8      	adds	r1, #184	@ 0xb8
 801427e:	f003 fb7b 	bl	8017978 <rmw_service_response_publisher_get_actual_qos>
 8014282:	4606      	mov	r6, r0
 8014284:	b9b8      	cbnz	r0, 80142b6 <rcl_service_init+0xe6>
 8014286:	6820      	ldr	r0, [r4, #0]
 8014288:	f895 3048 	ldrb.w	r3, [r5, #72]	@ 0x48
 801428c:	f880 30b0 	strb.w	r3, [r0, #176]	@ 0xb0
 8014290:	f880 3100 	strb.w	r3, [r0, #256]	@ 0x100
 8014294:	2268      	movs	r2, #104	@ 0x68
 8014296:	4629      	mov	r1, r5
 8014298:	f007 f905 	bl	801b4a6 <memcpy>
 801429c:	9807      	ldr	r0, [sp, #28]
 801429e:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 80142a0:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 80142a2:	4798      	blx	r3
 80142a4:	4630      	mov	r0, r6
 80142a6:	b009      	add	sp, #36	@ 0x24
 80142a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80142ac:	26c8      	movs	r6, #200	@ 0xc8
 80142ae:	4630      	mov	r0, r6
 80142b0:	b009      	add	sp, #36	@ 0x24
 80142b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80142b6:	6823      	ldr	r3, [r4, #0]
 80142b8:	b12b      	cbz	r3, 80142c6 <rcl_service_init+0xf6>
 80142ba:	4618      	mov	r0, r3
 80142bc:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 80142be:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 80142c0:	4790      	blx	r2
 80142c2:	2300      	movs	r3, #0
 80142c4:	6023      	str	r3, [r4, #0]
 80142c6:	2601      	movs	r6, #1
 80142c8:	e7e8      	b.n	801429c <rcl_service_init+0xcc>
 80142ca:	f1a0 0368 	sub.w	r3, r0, #104	@ 0x68
 80142ce:	2b01      	cmp	r3, #1
 80142d0:	d903      	bls.n	80142da <rcl_service_init+0x10a>
 80142d2:	280a      	cmp	r0, #10
 80142d4:	d1f7      	bne.n	80142c6 <rcl_service_init+0xf6>
 80142d6:	260a      	movs	r6, #10
 80142d8:	e7e0      	b.n	801429c <rcl_service_init+0xcc>
 80142da:	2668      	movs	r6, #104	@ 0x68
 80142dc:	e7de      	b.n	801429c <rcl_service_init+0xcc>
 80142de:	bf00      	nop

080142e0 <rcl_service_get_default_options>:
 80142e0:	b530      	push	{r4, r5, lr}
 80142e2:	4d0f      	ldr	r5, [pc, #60]	@ (8014320 <rcl_service_get_default_options+0x40>)
 80142e4:	490f      	ldr	r1, [pc, #60]	@ (8014324 <rcl_service_get_default_options+0x44>)
 80142e6:	b087      	sub	sp, #28
 80142e8:	4604      	mov	r4, r0
 80142ea:	2250      	movs	r2, #80	@ 0x50
 80142ec:	4628      	mov	r0, r5
 80142ee:	f007 f8da 	bl	801b4a6 <memcpy>
 80142f2:	4668      	mov	r0, sp
 80142f4:	f7f8 fd36 	bl	800cd64 <rcutils_get_default_allocator>
 80142f8:	46ec      	mov	ip, sp
 80142fa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80142fe:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 8014302:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014306:	2268      	movs	r2, #104	@ 0x68
 8014308:	f8dc 3000 	ldr.w	r3, [ip]
 801430c:	f8ce 3000 	str.w	r3, [lr]
 8014310:	4629      	mov	r1, r5
 8014312:	4620      	mov	r0, r4
 8014314:	f007 f8c7 	bl	801b4a6 <memcpy>
 8014318:	4620      	mov	r0, r4
 801431a:	b007      	add	sp, #28
 801431c:	bd30      	pop	{r4, r5, pc}
 801431e:	bf00      	nop
 8014320:	20015c38 	.word	0x20015c38
 8014324:	0801db20 	.word	0x0801db20

08014328 <rcl_service_get_rmw_handle>:
 8014328:	b118      	cbz	r0, 8014332 <rcl_service_get_rmw_handle+0xa>
 801432a:	6800      	ldr	r0, [r0, #0]
 801432c:	b108      	cbz	r0, 8014332 <rcl_service_get_rmw_handle+0xa>
 801432e:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8014332:	4770      	bx	lr

08014334 <rcl_take_request>:
 8014334:	b570      	push	{r4, r5, r6, lr}
 8014336:	468e      	mov	lr, r1
 8014338:	460c      	mov	r4, r1
 801433a:	4616      	mov	r6, r2
 801433c:	4605      	mov	r5, r0
 801433e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014342:	b08c      	sub	sp, #48	@ 0x30
 8014344:	f10d 0c18 	add.w	ip, sp, #24
 8014348:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801434c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8014350:	e88c 0003 	stmia.w	ip, {r0, r1}
 8014354:	b30d      	cbz	r5, 801439a <rcl_take_request+0x66>
 8014356:	682b      	ldr	r3, [r5, #0]
 8014358:	b1fb      	cbz	r3, 801439a <rcl_take_request+0x66>
 801435a:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801435e:	b1e0      	cbz	r0, 801439a <rcl_take_request+0x66>
 8014360:	b336      	cbz	r6, 80143b0 <rcl_take_request+0x7c>
 8014362:	2300      	movs	r3, #0
 8014364:	f88d 3007 	strb.w	r3, [sp, #7]
 8014368:	4632      	mov	r2, r6
 801436a:	f10d 0307 	add.w	r3, sp, #7
 801436e:	a902      	add	r1, sp, #8
 8014370:	f003 f8e8 	bl	8017544 <rmw_take_request>
 8014374:	4605      	mov	r5, r0
 8014376:	b198      	cbz	r0, 80143a0 <rcl_take_request+0x6c>
 8014378:	280a      	cmp	r0, #10
 801437a:	bf18      	it	ne
 801437c:	2501      	movne	r5, #1
 801437e:	f10d 0e18 	add.w	lr, sp, #24
 8014382:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014386:	46a4      	mov	ip, r4
 8014388:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801438c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8014390:	e88c 0003 	stmia.w	ip, {r0, r1}
 8014394:	4628      	mov	r0, r5
 8014396:	b00c      	add	sp, #48	@ 0x30
 8014398:	bd70      	pop	{r4, r5, r6, pc}
 801439a:	f44f 7516 	mov.w	r5, #600	@ 0x258
 801439e:	e7ee      	b.n	801437e <rcl_take_request+0x4a>
 80143a0:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80143a4:	f240 2359 	movw	r3, #601	@ 0x259
 80143a8:	2a00      	cmp	r2, #0
 80143aa:	bf08      	it	eq
 80143ac:	461d      	moveq	r5, r3
 80143ae:	e7e6      	b.n	801437e <rcl_take_request+0x4a>
 80143b0:	250b      	movs	r5, #11
 80143b2:	e7e4      	b.n	801437e <rcl_take_request+0x4a>

080143b4 <rcl_send_response>:
 80143b4:	b170      	cbz	r0, 80143d4 <rcl_send_response+0x20>
 80143b6:	6800      	ldr	r0, [r0, #0]
 80143b8:	b160      	cbz	r0, 80143d4 <rcl_send_response+0x20>
 80143ba:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80143be:	b148      	cbz	r0, 80143d4 <rcl_send_response+0x20>
 80143c0:	b159      	cbz	r1, 80143da <rcl_send_response+0x26>
 80143c2:	b510      	push	{r4, lr}
 80143c4:	b15a      	cbz	r2, 80143de <rcl_send_response+0x2a>
 80143c6:	f003 f91b 	bl	8017600 <rmw_send_response>
 80143ca:	b110      	cbz	r0, 80143d2 <rcl_send_response+0x1e>
 80143cc:	2802      	cmp	r0, #2
 80143ce:	bf18      	it	ne
 80143d0:	2001      	movne	r0, #1
 80143d2:	bd10      	pop	{r4, pc}
 80143d4:	f44f 7016 	mov.w	r0, #600	@ 0x258
 80143d8:	4770      	bx	lr
 80143da:	200b      	movs	r0, #11
 80143dc:	4770      	bx	lr
 80143de:	200b      	movs	r0, #11
 80143e0:	bd10      	pop	{r4, pc}
 80143e2:	bf00      	nop

080143e4 <rcl_service_is_valid>:
 80143e4:	b130      	cbz	r0, 80143f4 <rcl_service_is_valid+0x10>
 80143e6:	6800      	ldr	r0, [r0, #0]
 80143e8:	b120      	cbz	r0, 80143f4 <rcl_service_is_valid+0x10>
 80143ea:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80143ee:	3800      	subs	r0, #0
 80143f0:	bf18      	it	ne
 80143f2:	2001      	movne	r0, #1
 80143f4:	4770      	bx	lr
 80143f6:	bf00      	nop

080143f8 <rcl_get_zero_initialized_subscription>:
 80143f8:	4b01      	ldr	r3, [pc, #4]	@ (8014400 <rcl_get_zero_initialized_subscription+0x8>)
 80143fa:	6818      	ldr	r0, [r3, #0]
 80143fc:	4770      	bx	lr
 80143fe:	bf00      	nop
 8014400:	0801db70 	.word	0x0801db70

08014404 <rcl_subscription_init>:
 8014404:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014408:	b089      	sub	sp, #36	@ 0x24
 801440a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 801440c:	b1d6      	cbz	r6, 8014444 <rcl_subscription_init+0x40>
 801440e:	f106 0950 	add.w	r9, r6, #80	@ 0x50
 8014412:	4604      	mov	r4, r0
 8014414:	4648      	mov	r0, r9
 8014416:	460d      	mov	r5, r1
 8014418:	4690      	mov	r8, r2
 801441a:	461f      	mov	r7, r3
 801441c:	f7f8 fcb0 	bl	800cd80 <rcutils_allocator_is_valid>
 8014420:	b180      	cbz	r0, 8014444 <rcl_subscription_init+0x40>
 8014422:	b17c      	cbz	r4, 8014444 <rcl_subscription_init+0x40>
 8014424:	4628      	mov	r0, r5
 8014426:	f7ff fcd5 	bl	8013dd4 <rcl_node_is_valid>
 801442a:	2800      	cmp	r0, #0
 801442c:	d054      	beq.n	80144d8 <rcl_subscription_init+0xd4>
 801442e:	f1b8 0f00 	cmp.w	r8, #0
 8014432:	d007      	beq.n	8014444 <rcl_subscription_init+0x40>
 8014434:	b137      	cbz	r7, 8014444 <rcl_subscription_init+0x40>
 8014436:	6823      	ldr	r3, [r4, #0]
 8014438:	b14b      	cbz	r3, 801444e <rcl_subscription_init+0x4a>
 801443a:	2764      	movs	r7, #100	@ 0x64
 801443c:	4638      	mov	r0, r7
 801443e:	b009      	add	sp, #36	@ 0x24
 8014440:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014444:	270b      	movs	r7, #11
 8014446:	4638      	mov	r0, r7
 8014448:	b009      	add	sp, #36	@ 0x24
 801444a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801444e:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8014452:	aa07      	add	r2, sp, #28
 8014454:	9205      	str	r2, [sp, #20]
 8014456:	9307      	str	r3, [sp, #28]
 8014458:	f106 0358 	add.w	r3, r6, #88	@ 0x58
 801445c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8014460:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8014464:	4639      	mov	r1, r7
 8014466:	e899 000c 	ldmia.w	r9, {r2, r3}
 801446a:	4628      	mov	r0, r5
 801446c:	f7ff fd06 	bl	8013e7c <rcl_node_resolve_name>
 8014470:	4607      	mov	r7, r0
 8014472:	2800      	cmp	r0, #0
 8014474:	d15f      	bne.n	8014536 <rcl_subscription_init+0x132>
 8014476:	e9d6 3217 	ldrd	r3, r2, [r6, #92]	@ 0x5c
 801447a:	21c8      	movs	r1, #200	@ 0xc8
 801447c:	2001      	movs	r0, #1
 801447e:	4798      	blx	r3
 8014480:	6020      	str	r0, [r4, #0]
 8014482:	2800      	cmp	r0, #0
 8014484:	d05d      	beq.n	8014542 <rcl_subscription_init+0x13e>
 8014486:	4628      	mov	r0, r5
 8014488:	f7ff fcc6 	bl	8013e18 <rcl_node_get_rmw_handle>
 801448c:	f106 0364 	add.w	r3, r6, #100	@ 0x64
 8014490:	9300      	str	r3, [sp, #0]
 8014492:	9a07      	ldr	r2, [sp, #28]
 8014494:	6827      	ldr	r7, [r4, #0]
 8014496:	4641      	mov	r1, r8
 8014498:	4633      	mov	r3, r6
 801449a:	f003 fa8d 	bl	80179b8 <rmw_create_subscription>
 801449e:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0
 80144a2:	6827      	ldr	r7, [r4, #0]
 80144a4:	f8d7 00c0 	ldr.w	r0, [r7, #192]	@ 0xc0
 80144a8:	b348      	cbz	r0, 80144fe <rcl_subscription_init+0xfa>
 80144aa:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 80144ae:	f003 fb65 	bl	8017b7c <rmw_subscription_get_actual_qos>
 80144b2:	4607      	mov	r7, r0
 80144b4:	b9a8      	cbnz	r0, 80144e2 <rcl_subscription_init+0xde>
 80144b6:	6820      	ldr	r0, [r4, #0]
 80144b8:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 80144bc:	f880 30b8 	strb.w	r3, [r0, #184]	@ 0xb8
 80144c0:	2270      	movs	r2, #112	@ 0x70
 80144c2:	4631      	mov	r1, r6
 80144c4:	f006 ffef 	bl	801b4a6 <memcpy>
 80144c8:	9807      	ldr	r0, [sp, #28]
 80144ca:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 80144cc:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 80144ce:	4798      	blx	r3
 80144d0:	4638      	mov	r0, r7
 80144d2:	b009      	add	sp, #36	@ 0x24
 80144d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80144d8:	27c8      	movs	r7, #200	@ 0xc8
 80144da:	4638      	mov	r0, r7
 80144dc:	b009      	add	sp, #36	@ 0x24
 80144de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80144e2:	6827      	ldr	r7, [r4, #0]
 80144e4:	b32f      	cbz	r7, 8014532 <rcl_subscription_init+0x12e>
 80144e6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80144ea:	b14b      	cbz	r3, 8014500 <rcl_subscription_init+0xfc>
 80144ec:	4628      	mov	r0, r5
 80144ee:	f7ff fc93 	bl	8013e18 <rcl_node_get_rmw_handle>
 80144f2:	6823      	ldr	r3, [r4, #0]
 80144f4:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80144f8:	f003 fb50 	bl	8017b9c <rmw_destroy_subscription>
 80144fc:	6827      	ldr	r7, [r4, #0]
 80144fe:	b197      	cbz	r7, 8014526 <rcl_subscription_init+0x122>
 8014500:	f107 0550 	add.w	r5, r7, #80	@ 0x50
 8014504:	4628      	mov	r0, r5
 8014506:	f7f8 fc3b 	bl	800cd80 <rcutils_allocator_is_valid>
 801450a:	b158      	cbz	r0, 8014524 <rcl_subscription_init+0x120>
 801450c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 801450e:	b148      	cbz	r0, 8014524 <rcl_subscription_init+0x120>
 8014510:	4629      	mov	r1, r5
 8014512:	f002 f989 	bl	8016828 <rmw_subscription_content_filter_options_fini>
 8014516:	4605      	mov	r5, r0
 8014518:	b9b8      	cbnz	r0, 801454a <rcl_subscription_init+0x146>
 801451a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801451c:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 801451e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8014520:	4798      	blx	r3
 8014522:	66fd      	str	r5, [r7, #108]	@ 0x6c
 8014524:	6827      	ldr	r7, [r4, #0]
 8014526:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 8014528:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 801452a:	4638      	mov	r0, r7
 801452c:	4798      	blx	r3
 801452e:	2300      	movs	r3, #0
 8014530:	6023      	str	r3, [r4, #0]
 8014532:	2701      	movs	r7, #1
 8014534:	e7c8      	b.n	80144c8 <rcl_subscription_init+0xc4>
 8014536:	2867      	cmp	r0, #103	@ 0x67
 8014538:	d0c6      	beq.n	80144c8 <rcl_subscription_init+0xc4>
 801453a:	2869      	cmp	r0, #105	@ 0x69
 801453c:	d003      	beq.n	8014546 <rcl_subscription_init+0x142>
 801453e:	280a      	cmp	r0, #10
 8014540:	d1f7      	bne.n	8014532 <rcl_subscription_init+0x12e>
 8014542:	270a      	movs	r7, #10
 8014544:	e7c0      	b.n	80144c8 <rcl_subscription_init+0xc4>
 8014546:	2767      	movs	r7, #103	@ 0x67
 8014548:	e7be      	b.n	80144c8 <rcl_subscription_init+0xc4>
 801454a:	f7ff f84b 	bl	80135e4 <rcl_convert_rmw_ret_to_rcl_ret>
 801454e:	6827      	ldr	r7, [r4, #0]
 8014550:	e7e9      	b.n	8014526 <rcl_subscription_init+0x122>
 8014552:	bf00      	nop

08014554 <rcl_subscription_get_default_options>:
 8014554:	b570      	push	{r4, r5, r6, lr}
 8014556:	4d14      	ldr	r5, [pc, #80]	@ (80145a8 <rcl_subscription_get_default_options+0x54>)
 8014558:	4914      	ldr	r1, [pc, #80]	@ (80145ac <rcl_subscription_get_default_options+0x58>)
 801455a:	b08a      	sub	sp, #40	@ 0x28
 801455c:	4604      	mov	r4, r0
 801455e:	2250      	movs	r2, #80	@ 0x50
 8014560:	4628      	mov	r0, r5
 8014562:	f006 ffa0 	bl	801b4a6 <memcpy>
 8014566:	a804      	add	r0, sp, #16
 8014568:	f7f8 fbfc 	bl	800cd64 <rcutils_get_default_allocator>
 801456c:	f10d 0c10 	add.w	ip, sp, #16
 8014570:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014574:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 8014578:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801457c:	466e      	mov	r6, sp
 801457e:	f8dc 3000 	ldr.w	r3, [ip]
 8014582:	f8ce 3000 	str.w	r3, [lr]
 8014586:	4630      	mov	r0, r6
 8014588:	f002 f968 	bl	801685c <rmw_get_default_subscription_options>
 801458c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8014590:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 8014594:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8014598:	2270      	movs	r2, #112	@ 0x70
 801459a:	4629      	mov	r1, r5
 801459c:	4620      	mov	r0, r4
 801459e:	f006 ff82 	bl	801b4a6 <memcpy>
 80145a2:	4620      	mov	r0, r4
 80145a4:	b00a      	add	sp, #40	@ 0x28
 80145a6:	bd70      	pop	{r4, r5, r6, pc}
 80145a8:	20015ca0 	.word	0x20015ca0
 80145ac:	0801db78 	.word	0x0801db78

080145b0 <rcl_take>:
 80145b0:	2800      	cmp	r0, #0
 80145b2:	d04a      	beq.n	801464a <rcl_take+0x9a>
 80145b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80145b8:	4604      	mov	r4, r0
 80145ba:	6800      	ldr	r0, [r0, #0]
 80145bc:	b0a4      	sub	sp, #144	@ 0x90
 80145be:	2800      	cmp	r0, #0
 80145c0:	d03b      	beq.n	801463a <rcl_take+0x8a>
 80145c2:	461f      	mov	r7, r3
 80145c4:	f8d0 30c0 	ldr.w	r3, [r0, #192]	@ 0xc0
 80145c8:	2b00      	cmp	r3, #0
 80145ca:	d036      	beq.n	801463a <rcl_take+0x8a>
 80145cc:	460e      	mov	r6, r1
 80145ce:	2900      	cmp	r1, #0
 80145d0:	d039      	beq.n	8014646 <rcl_take+0x96>
 80145d2:	4615      	mov	r5, r2
 80145d4:	2a00      	cmp	r2, #0
 80145d6:	d03c      	beq.n	8014652 <rcl_take+0xa2>
 80145d8:	a802      	add	r0, sp, #8
 80145da:	f002 f9c9 	bl	8016970 <rmw_get_zero_initialized_message_info>
 80145de:	f10d 0c08 	add.w	ip, sp, #8
 80145e2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80145e6:	46ae      	mov	lr, r5
 80145e8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80145ec:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80145f0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80145f4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80145f8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80145fc:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8014600:	f04f 0800 	mov.w	r8, #0
 8014604:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8014608:	f88d 804f 	strb.w	r8, [sp, #79]	@ 0x4f
 801460c:	6822      	ldr	r2, [r4, #0]
 801460e:	462b      	mov	r3, r5
 8014610:	f8d2 00c0 	ldr.w	r0, [r2, #192]	@ 0xc0
 8014614:	9700      	str	r7, [sp, #0]
 8014616:	f10d 024f 	add.w	r2, sp, #79	@ 0x4f
 801461a:	4631      	mov	r1, r6
 801461c:	f003 fb1e 	bl	8017c5c <rmw_take_with_info>
 8014620:	4603      	mov	r3, r0
 8014622:	b9c0      	cbnz	r0, 8014656 <rcl_take+0xa6>
 8014624:	f89d 104f 	ldrb.w	r1, [sp, #79]	@ 0x4f
 8014628:	f240 1291 	movw	r2, #401	@ 0x191
 801462c:	2900      	cmp	r1, #0
 801462e:	bf08      	it	eq
 8014630:	4613      	moveq	r3, r2
 8014632:	4618      	mov	r0, r3
 8014634:	b024      	add	sp, #144	@ 0x90
 8014636:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801463a:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 801463e:	4618      	mov	r0, r3
 8014640:	b024      	add	sp, #144	@ 0x90
 8014642:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014646:	230b      	movs	r3, #11
 8014648:	e7f3      	b.n	8014632 <rcl_take+0x82>
 801464a:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 801464e:	4618      	mov	r0, r3
 8014650:	4770      	bx	lr
 8014652:	ad14      	add	r5, sp, #80	@ 0x50
 8014654:	e7c0      	b.n	80145d8 <rcl_take+0x28>
 8014656:	f7fe ffc5 	bl	80135e4 <rcl_convert_rmw_ret_to_rcl_ret>
 801465a:	4603      	mov	r3, r0
 801465c:	e7e9      	b.n	8014632 <rcl_take+0x82>
 801465e:	bf00      	nop

08014660 <rcl_subscription_get_rmw_handle>:
 8014660:	b118      	cbz	r0, 801466a <rcl_subscription_get_rmw_handle+0xa>
 8014662:	6800      	ldr	r0, [r0, #0]
 8014664:	b108      	cbz	r0, 801466a <rcl_subscription_get_rmw_handle+0xa>
 8014666:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 801466a:	4770      	bx	lr

0801466c <rcl_subscription_is_valid>:
 801466c:	b130      	cbz	r0, 801467c <rcl_subscription_is_valid+0x10>
 801466e:	6800      	ldr	r0, [r0, #0]
 8014670:	b120      	cbz	r0, 801467c <rcl_subscription_is_valid+0x10>
 8014672:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 8014676:	3800      	subs	r0, #0
 8014678:	bf18      	it	ne
 801467a:	2001      	movne	r0, #1
 801467c:	4770      	bx	lr
 801467e:	bf00      	nop

08014680 <rcl_get_system_time>:
 8014680:	4608      	mov	r0, r1
 8014682:	f7f8 bbbd 	b.w	800ce00 <rcutils_system_time_now>
 8014686:	bf00      	nop

08014688 <rcl_get_steady_time>:
 8014688:	4608      	mov	r0, r1
 801468a:	f7f8 bbe1 	b.w	800ce50 <rcutils_steady_time_now>
 801468e:	bf00      	nop

08014690 <rcl_get_ros_time>:
 8014690:	7a03      	ldrb	r3, [r0, #8]
 8014692:	b510      	push	{r4, lr}
 8014694:	460c      	mov	r4, r1
 8014696:	b133      	cbz	r3, 80146a6 <rcl_get_ros_time+0x16>
 8014698:	2105      	movs	r1, #5
 801469a:	f001 fd51 	bl	8016140 <__atomic_load_8>
 801469e:	e9c4 0100 	strd	r0, r1, [r4]
 80146a2:	2000      	movs	r0, #0
 80146a4:	bd10      	pop	{r4, pc}
 80146a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80146aa:	4608      	mov	r0, r1
 80146ac:	f7f8 bba8 	b.w	800ce00 <rcutils_system_time_now>

080146b0 <rcl_clock_init>:
 80146b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80146b2:	4605      	mov	r5, r0
 80146b4:	4610      	mov	r0, r2
 80146b6:	4614      	mov	r4, r2
 80146b8:	460e      	mov	r6, r1
 80146ba:	f7f8 fb61 	bl	800cd80 <rcutils_allocator_is_valid>
 80146be:	b128      	cbz	r0, 80146cc <rcl_clock_init+0x1c>
 80146c0:	2d03      	cmp	r5, #3
 80146c2:	d803      	bhi.n	80146cc <rcl_clock_init+0x1c>
 80146c4:	e8df f005 	tbb	[pc, r5]
 80146c8:	06532e1d 	.word	0x06532e1d
 80146cc:	f04f 0c0b 	mov.w	ip, #11
 80146d0:	4660      	mov	r0, ip
 80146d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80146d4:	2e00      	cmp	r6, #0
 80146d6:	d0f9      	beq.n	80146cc <rcl_clock_init+0x1c>
 80146d8:	2c00      	cmp	r4, #0
 80146da:	d0f7      	beq.n	80146cc <rcl_clock_init+0x1c>
 80146dc:	2300      	movs	r3, #0
 80146de:	e9c6 3301 	strd	r3, r3, [r6, #4]
 80146e2:	f8df e0b4 	ldr.w	lr, [pc, #180]	@ 8014798 <rcl_clock_init+0xe8>
 80146e6:	6133      	str	r3, [r6, #16]
 80146e8:	f106 0514 	add.w	r5, r6, #20
 80146ec:	469c      	mov	ip, r3
 80146ee:	2703      	movs	r7, #3
 80146f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80146f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80146f4:	6823      	ldr	r3, [r4, #0]
 80146f6:	602b      	str	r3, [r5, #0]
 80146f8:	7037      	strb	r7, [r6, #0]
 80146fa:	f8c6 e00c 	str.w	lr, [r6, #12]
 80146fe:	4660      	mov	r0, ip
 8014700:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014702:	2e00      	cmp	r6, #0
 8014704:	d0e2      	beq.n	80146cc <rcl_clock_init+0x1c>
 8014706:	2300      	movs	r3, #0
 8014708:	7033      	strb	r3, [r6, #0]
 801470a:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801470e:	e9c6 3303 	strd	r3, r3, [r6, #12]
 8014712:	469c      	mov	ip, r3
 8014714:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014716:	f106 0514 	add.w	r5, r6, #20
 801471a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801471c:	6823      	ldr	r3, [r4, #0]
 801471e:	602b      	str	r3, [r5, #0]
 8014720:	4660      	mov	r0, ip
 8014722:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014724:	2e00      	cmp	r6, #0
 8014726:	d0d1      	beq.n	80146cc <rcl_clock_init+0x1c>
 8014728:	2c00      	cmp	r4, #0
 801472a:	d0cf      	beq.n	80146cc <rcl_clock_init+0x1c>
 801472c:	2700      	movs	r7, #0
 801472e:	7037      	strb	r7, [r6, #0]
 8014730:	46a4      	mov	ip, r4
 8014732:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014736:	f106 0514 	add.w	r5, r6, #20
 801473a:	e9c6 7701 	strd	r7, r7, [r6, #4]
 801473e:	e9c6 7703 	strd	r7, r7, [r6, #12]
 8014742:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014744:	f8dc 3000 	ldr.w	r3, [ip]
 8014748:	602b      	str	r3, [r5, #0]
 801474a:	6921      	ldr	r1, [r4, #16]
 801474c:	6823      	ldr	r3, [r4, #0]
 801474e:	2010      	movs	r0, #16
 8014750:	4798      	blx	r3
 8014752:	6130      	str	r0, [r6, #16]
 8014754:	b1d0      	cbz	r0, 801478c <rcl_clock_init+0xdc>
 8014756:	2200      	movs	r2, #0
 8014758:	2300      	movs	r3, #0
 801475a:	e9c0 2300 	strd	r2, r3, [r0]
 801475e:	2301      	movs	r3, #1
 8014760:	7207      	strb	r7, [r0, #8]
 8014762:	4a0c      	ldr	r2, [pc, #48]	@ (8014794 <rcl_clock_init+0xe4>)
 8014764:	7033      	strb	r3, [r6, #0]
 8014766:	46bc      	mov	ip, r7
 8014768:	60f2      	str	r2, [r6, #12]
 801476a:	4660      	mov	r0, ip
 801476c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801476e:	2e00      	cmp	r6, #0
 8014770:	d0ac      	beq.n	80146cc <rcl_clock_init+0x1c>
 8014772:	2c00      	cmp	r4, #0
 8014774:	d0aa      	beq.n	80146cc <rcl_clock_init+0x1c>
 8014776:	2300      	movs	r3, #0
 8014778:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801477c:	f8df e01c 	ldr.w	lr, [pc, #28]	@ 801479c <rcl_clock_init+0xec>
 8014780:	6133      	str	r3, [r6, #16]
 8014782:	f106 0514 	add.w	r5, r6, #20
 8014786:	469c      	mov	ip, r3
 8014788:	2702      	movs	r7, #2
 801478a:	e7b1      	b.n	80146f0 <rcl_clock_init+0x40>
 801478c:	f04f 0c0a 	mov.w	ip, #10
 8014790:	e79e      	b.n	80146d0 <rcl_clock_init+0x20>
 8014792:	bf00      	nop
 8014794:	08014691 	.word	0x08014691
 8014798:	08014689 	.word	0x08014689
 801479c:	08014681 	.word	0x08014681

080147a0 <rcl_clock_get_now>:
 80147a0:	b140      	cbz	r0, 80147b4 <rcl_clock_get_now+0x14>
 80147a2:	b139      	cbz	r1, 80147b4 <rcl_clock_get_now+0x14>
 80147a4:	7803      	ldrb	r3, [r0, #0]
 80147a6:	b11b      	cbz	r3, 80147b0 <rcl_clock_get_now+0x10>
 80147a8:	68c3      	ldr	r3, [r0, #12]
 80147aa:	b10b      	cbz	r3, 80147b0 <rcl_clock_get_now+0x10>
 80147ac:	6900      	ldr	r0, [r0, #16]
 80147ae:	4718      	bx	r3
 80147b0:	2001      	movs	r0, #1
 80147b2:	4770      	bx	lr
 80147b4:	200b      	movs	r0, #11
 80147b6:	4770      	bx	lr

080147b8 <rcl_timer_call>:
 80147b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80147bc:	b087      	sub	sp, #28
 80147be:	2800      	cmp	r0, #0
 80147c0:	d06d      	beq.n	801489e <rcl_timer_call+0xe6>
 80147c2:	6803      	ldr	r3, [r0, #0]
 80147c4:	4604      	mov	r4, r0
 80147c6:	2b00      	cmp	r3, #0
 80147c8:	d063      	beq.n	8014892 <rcl_timer_call+0xda>
 80147ca:	f3bf 8f5b 	dmb	ish
 80147ce:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80147d2:	f3bf 8f5b 	dmb	ish
 80147d6:	2b00      	cmp	r3, #0
 80147d8:	d150      	bne.n	801487c <rcl_timer_call+0xc4>
 80147da:	6803      	ldr	r3, [r0, #0]
 80147dc:	a904      	add	r1, sp, #16
 80147de:	6818      	ldr	r0, [r3, #0]
 80147e0:	f7ff ffde 	bl	80147a0 <rcl_clock_get_now>
 80147e4:	4605      	mov	r5, r0
 80147e6:	2800      	cmp	r0, #0
 80147e8:	d14a      	bne.n	8014880 <rcl_timer_call+0xc8>
 80147ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80147ee:	2b00      	cmp	r3, #0
 80147f0:	db4a      	blt.n	8014888 <rcl_timer_call+0xd0>
 80147f2:	6820      	ldr	r0, [r4, #0]
 80147f4:	f04f 0a05 	mov.w	sl, #5
 80147f8:	f8cd a000 	str.w	sl, [sp]
 80147fc:	3020      	adds	r0, #32
 80147fe:	f001 fd0b 	bl	8016218 <__atomic_exchange_8>
 8014802:	6823      	ldr	r3, [r4, #0]
 8014804:	f3bf 8f5b 	dmb	ish
 8014808:	4680      	mov	r8, r0
 801480a:	f8d3 b010 	ldr.w	fp, [r3, #16]
 801480e:	f3bf 8f5b 	dmb	ish
 8014812:	6820      	ldr	r0, [r4, #0]
 8014814:	4689      	mov	r9, r1
 8014816:	3028      	adds	r0, #40	@ 0x28
 8014818:	4651      	mov	r1, sl
 801481a:	f001 fc91 	bl	8016140 <__atomic_load_8>
 801481e:	4606      	mov	r6, r0
 8014820:	6820      	ldr	r0, [r4, #0]
 8014822:	460f      	mov	r7, r1
 8014824:	3018      	adds	r0, #24
 8014826:	4651      	mov	r1, sl
 8014828:	f001 fc8a 	bl	8016140 <__atomic_load_8>
 801482c:	1836      	adds	r6, r6, r0
 801482e:	4602      	mov	r2, r0
 8014830:	4682      	mov	sl, r0
 8014832:	e9dd 0c04 	ldrd	r0, ip, [sp, #16]
 8014836:	eb47 0701 	adc.w	r7, r7, r1
 801483a:	4286      	cmp	r6, r0
 801483c:	460b      	mov	r3, r1
 801483e:	eb77 010c 	sbcs.w	r1, r7, ip
 8014842:	da04      	bge.n	801484e <rcl_timer_call+0x96>
 8014844:	ea53 0102 	orrs.w	r1, r3, r2
 8014848:	d12e      	bne.n	80148a8 <rcl_timer_call+0xf0>
 801484a:	4606      	mov	r6, r0
 801484c:	4667      	mov	r7, ip
 801484e:	6820      	ldr	r0, [r4, #0]
 8014850:	2105      	movs	r1, #5
 8014852:	4632      	mov	r2, r6
 8014854:	463b      	mov	r3, r7
 8014856:	3028      	adds	r0, #40	@ 0x28
 8014858:	9100      	str	r1, [sp, #0]
 801485a:	f001 fca7 	bl	80161ac <__atomic_store_8>
 801485e:	f1bb 0f00 	cmp.w	fp, #0
 8014862:	d00d      	beq.n	8014880 <rcl_timer_call+0xc8>
 8014864:	9a04      	ldr	r2, [sp, #16]
 8014866:	9b05      	ldr	r3, [sp, #20]
 8014868:	ebb2 0208 	subs.w	r2, r2, r8
 801486c:	4620      	mov	r0, r4
 801486e:	eb63 0309 	sbc.w	r3, r3, r9
 8014872:	47d8      	blx	fp
 8014874:	4628      	mov	r0, r5
 8014876:	b007      	add	sp, #28
 8014878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801487c:	f240 3521 	movw	r5, #801	@ 0x321
 8014880:	4628      	mov	r0, r5
 8014882:	b007      	add	sp, #28
 8014884:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014888:	2501      	movs	r5, #1
 801488a:	4628      	mov	r0, r5
 801488c:	b007      	add	sp, #28
 801488e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014892:	f44f 7548 	mov.w	r5, #800	@ 0x320
 8014896:	4628      	mov	r0, r5
 8014898:	b007      	add	sp, #28
 801489a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801489e:	250b      	movs	r5, #11
 80148a0:	4628      	mov	r0, r5
 80148a2:	b007      	add	sp, #28
 80148a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80148a8:	1b80      	subs	r0, r0, r6
 80148aa:	eb6c 0107 	sbc.w	r1, ip, r7
 80148ae:	3801      	subs	r0, #1
 80148b0:	f161 0100 	sbc.w	r1, r1, #0
 80148b4:	e9cd 3202 	strd	r3, r2, [sp, #8]
 80148b8:	f7ec f9b0 	bl	8000c1c <__aeabi_ldivmod>
 80148bc:	9b02      	ldr	r3, [sp, #8]
 80148be:	3001      	adds	r0, #1
 80148c0:	f141 0100 	adc.w	r1, r1, #0
 80148c4:	fb00 f303 	mul.w	r3, r0, r3
 80148c8:	fb01 330a 	mla	r3, r1, sl, r3
 80148cc:	fba0 0a0a 	umull	r0, sl, r0, sl
 80148d0:	1986      	adds	r6, r0, r6
 80148d2:	4453      	add	r3, sl
 80148d4:	eb43 0707 	adc.w	r7, r3, r7
 80148d8:	e7b9      	b.n	801484e <rcl_timer_call+0x96>
 80148da:	bf00      	nop

080148dc <rcl_timer_is_ready>:
 80148dc:	b570      	push	{r4, r5, r6, lr}
 80148de:	b082      	sub	sp, #8
 80148e0:	b378      	cbz	r0, 8014942 <rcl_timer_is_ready+0x66>
 80148e2:	6803      	ldr	r3, [r0, #0]
 80148e4:	4604      	mov	r4, r0
 80148e6:	b383      	cbz	r3, 801494a <rcl_timer_is_ready+0x6e>
 80148e8:	460d      	mov	r5, r1
 80148ea:	b351      	cbz	r1, 8014942 <rcl_timer_is_ready+0x66>
 80148ec:	f3bf 8f5b 	dmb	ish
 80148f0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80148f4:	f3bf 8f5b 	dmb	ish
 80148f8:	b953      	cbnz	r3, 8014910 <rcl_timer_is_ready+0x34>
 80148fa:	6803      	ldr	r3, [r0, #0]
 80148fc:	4669      	mov	r1, sp
 80148fe:	6818      	ldr	r0, [r3, #0]
 8014900:	f7ff ff4e 	bl	80147a0 <rcl_clock_get_now>
 8014904:	4606      	mov	r6, r0
 8014906:	b140      	cbz	r0, 801491a <rcl_timer_is_ready+0x3e>
 8014908:	f240 3321 	movw	r3, #801	@ 0x321
 801490c:	4298      	cmp	r0, r3
 801490e:	d101      	bne.n	8014914 <rcl_timer_is_ready+0x38>
 8014910:	2600      	movs	r6, #0
 8014912:	702e      	strb	r6, [r5, #0]
 8014914:	4630      	mov	r0, r6
 8014916:	b002      	add	sp, #8
 8014918:	bd70      	pop	{r4, r5, r6, pc}
 801491a:	6820      	ldr	r0, [r4, #0]
 801491c:	2105      	movs	r1, #5
 801491e:	3028      	adds	r0, #40	@ 0x28
 8014920:	f001 fc0e 	bl	8016140 <__atomic_load_8>
 8014924:	9b00      	ldr	r3, [sp, #0]
 8014926:	1ac0      	subs	r0, r0, r3
 8014928:	9b01      	ldr	r3, [sp, #4]
 801492a:	eb61 0103 	sbc.w	r1, r1, r3
 801492e:	2801      	cmp	r0, #1
 8014930:	f171 0300 	sbcs.w	r3, r1, #0
 8014934:	bfb4      	ite	lt
 8014936:	2301      	movlt	r3, #1
 8014938:	2300      	movge	r3, #0
 801493a:	4630      	mov	r0, r6
 801493c:	702b      	strb	r3, [r5, #0]
 801493e:	b002      	add	sp, #8
 8014940:	bd70      	pop	{r4, r5, r6, pc}
 8014942:	260b      	movs	r6, #11
 8014944:	4630      	mov	r0, r6
 8014946:	b002      	add	sp, #8
 8014948:	bd70      	pop	{r4, r5, r6, pc}
 801494a:	f44f 7648 	mov.w	r6, #800	@ 0x320
 801494e:	e7e1      	b.n	8014914 <rcl_timer_is_ready+0x38>

08014950 <rcl_timer_get_time_until_next_call>:
 8014950:	b570      	push	{r4, r5, r6, lr}
 8014952:	b082      	sub	sp, #8
 8014954:	b330      	cbz	r0, 80149a4 <rcl_timer_get_time_until_next_call+0x54>
 8014956:	6803      	ldr	r3, [r0, #0]
 8014958:	4604      	mov	r4, r0
 801495a:	b33b      	cbz	r3, 80149ac <rcl_timer_get_time_until_next_call+0x5c>
 801495c:	460d      	mov	r5, r1
 801495e:	b309      	cbz	r1, 80149a4 <rcl_timer_get_time_until_next_call+0x54>
 8014960:	f3bf 8f5b 	dmb	ish
 8014964:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8014968:	f3bf 8f5b 	dmb	ish
 801496c:	b9ab      	cbnz	r3, 801499a <rcl_timer_get_time_until_next_call+0x4a>
 801496e:	6803      	ldr	r3, [r0, #0]
 8014970:	4669      	mov	r1, sp
 8014972:	6818      	ldr	r0, [r3, #0]
 8014974:	f7ff ff14 	bl	80147a0 <rcl_clock_get_now>
 8014978:	4606      	mov	r6, r0
 801497a:	b958      	cbnz	r0, 8014994 <rcl_timer_get_time_until_next_call+0x44>
 801497c:	6820      	ldr	r0, [r4, #0]
 801497e:	2105      	movs	r1, #5
 8014980:	3028      	adds	r0, #40	@ 0x28
 8014982:	f001 fbdd 	bl	8016140 <__atomic_load_8>
 8014986:	9b00      	ldr	r3, [sp, #0]
 8014988:	1ac0      	subs	r0, r0, r3
 801498a:	9b01      	ldr	r3, [sp, #4]
 801498c:	6028      	str	r0, [r5, #0]
 801498e:	eb61 0103 	sbc.w	r1, r1, r3
 8014992:	6069      	str	r1, [r5, #4]
 8014994:	4630      	mov	r0, r6
 8014996:	b002      	add	sp, #8
 8014998:	bd70      	pop	{r4, r5, r6, pc}
 801499a:	f240 3621 	movw	r6, #801	@ 0x321
 801499e:	4630      	mov	r0, r6
 80149a0:	b002      	add	sp, #8
 80149a2:	bd70      	pop	{r4, r5, r6, pc}
 80149a4:	260b      	movs	r6, #11
 80149a6:	4630      	mov	r0, r6
 80149a8:	b002      	add	sp, #8
 80149aa:	bd70      	pop	{r4, r5, r6, pc}
 80149ac:	f44f 7648 	mov.w	r6, #800	@ 0x320
 80149b0:	e7f0      	b.n	8014994 <rcl_timer_get_time_until_next_call+0x44>
 80149b2:	bf00      	nop

080149b4 <rcl_timer_get_guard_condition>:
 80149b4:	b130      	cbz	r0, 80149c4 <rcl_timer_get_guard_condition+0x10>
 80149b6:	6800      	ldr	r0, [r0, #0]
 80149b8:	b120      	cbz	r0, 80149c4 <rcl_timer_get_guard_condition+0x10>
 80149ba:	68c3      	ldr	r3, [r0, #12]
 80149bc:	b10b      	cbz	r3, 80149c2 <rcl_timer_get_guard_condition+0xe>
 80149be:	3008      	adds	r0, #8
 80149c0:	4770      	bx	lr
 80149c2:	4618      	mov	r0, r3
 80149c4:	4770      	bx	lr
 80149c6:	bf00      	nop

080149c8 <rcl_validate_enclave_name_with_size>:
 80149c8:	b378      	cbz	r0, 8014a2a <rcl_validate_enclave_name_with_size+0x62>
 80149ca:	b570      	push	{r4, r5, r6, lr}
 80149cc:	4615      	mov	r5, r2
 80149ce:	b0c2      	sub	sp, #264	@ 0x108
 80149d0:	b302      	cbz	r2, 8014a14 <rcl_validate_enclave_name_with_size+0x4c>
 80149d2:	461e      	mov	r6, r3
 80149d4:	466a      	mov	r2, sp
 80149d6:	ab01      	add	r3, sp, #4
 80149d8:	460c      	mov	r4, r1
 80149da:	f002 f847 	bl	8016a6c <rmw_validate_namespace_with_size>
 80149de:	4684      	mov	ip, r0
 80149e0:	b9e8      	cbnz	r0, 8014a1e <rcl_validate_enclave_name_with_size+0x56>
 80149e2:	9b00      	ldr	r3, [sp, #0]
 80149e4:	b923      	cbnz	r3, 80149f0 <rcl_validate_enclave_name_with_size+0x28>
 80149e6:	2300      	movs	r3, #0
 80149e8:	602b      	str	r3, [r5, #0]
 80149ea:	4660      	mov	r0, ip
 80149ec:	b042      	add	sp, #264	@ 0x108
 80149ee:	bd70      	pop	{r4, r5, r6, pc}
 80149f0:	2b07      	cmp	r3, #7
 80149f2:	d007      	beq.n	8014a04 <rcl_validate_enclave_name_with_size+0x3c>
 80149f4:	1e5a      	subs	r2, r3, #1
 80149f6:	2a05      	cmp	r2, #5
 80149f8:	d833      	bhi.n	8014a62 <rcl_validate_enclave_name_with_size+0x9a>
 80149fa:	e8df f002 	tbb	[pc, r2]
 80149fe:	2c2f      	.short	0x2c2f
 8014a00:	1a232629 	.word	0x1a232629
 8014a04:	2cff      	cmp	r4, #255	@ 0xff
 8014a06:	d9ee      	bls.n	80149e6 <rcl_validate_enclave_name_with_size+0x1e>
 8014a08:	602b      	str	r3, [r5, #0]
 8014a0a:	2e00      	cmp	r6, #0
 8014a0c:	d0ed      	beq.n	80149ea <rcl_validate_enclave_name_with_size+0x22>
 8014a0e:	23fe      	movs	r3, #254	@ 0xfe
 8014a10:	6033      	str	r3, [r6, #0]
 8014a12:	e7ea      	b.n	80149ea <rcl_validate_enclave_name_with_size+0x22>
 8014a14:	f04f 0c0b 	mov.w	ip, #11
 8014a18:	4660      	mov	r0, ip
 8014a1a:	b042      	add	sp, #264	@ 0x108
 8014a1c:	bd70      	pop	{r4, r5, r6, pc}
 8014a1e:	f7fe fde1 	bl	80135e4 <rcl_convert_rmw_ret_to_rcl_ret>
 8014a22:	4684      	mov	ip, r0
 8014a24:	4660      	mov	r0, ip
 8014a26:	b042      	add	sp, #264	@ 0x108
 8014a28:	bd70      	pop	{r4, r5, r6, pc}
 8014a2a:	f04f 0c0b 	mov.w	ip, #11
 8014a2e:	4660      	mov	r0, ip
 8014a30:	4770      	bx	lr
 8014a32:	2306      	movs	r3, #6
 8014a34:	602b      	str	r3, [r5, #0]
 8014a36:	2e00      	cmp	r6, #0
 8014a38:	d0d7      	beq.n	80149ea <rcl_validate_enclave_name_with_size+0x22>
 8014a3a:	9b01      	ldr	r3, [sp, #4]
 8014a3c:	6033      	str	r3, [r6, #0]
 8014a3e:	4660      	mov	r0, ip
 8014a40:	b042      	add	sp, #264	@ 0x108
 8014a42:	bd70      	pop	{r4, r5, r6, pc}
 8014a44:	2305      	movs	r3, #5
 8014a46:	602b      	str	r3, [r5, #0]
 8014a48:	e7f5      	b.n	8014a36 <rcl_validate_enclave_name_with_size+0x6e>
 8014a4a:	2304      	movs	r3, #4
 8014a4c:	602b      	str	r3, [r5, #0]
 8014a4e:	e7f2      	b.n	8014a36 <rcl_validate_enclave_name_with_size+0x6e>
 8014a50:	2303      	movs	r3, #3
 8014a52:	602b      	str	r3, [r5, #0]
 8014a54:	e7ef      	b.n	8014a36 <rcl_validate_enclave_name_with_size+0x6e>
 8014a56:	2302      	movs	r3, #2
 8014a58:	602b      	str	r3, [r5, #0]
 8014a5a:	e7ec      	b.n	8014a36 <rcl_validate_enclave_name_with_size+0x6e>
 8014a5c:	2301      	movs	r3, #1
 8014a5e:	602b      	str	r3, [r5, #0]
 8014a60:	e7e9      	b.n	8014a36 <rcl_validate_enclave_name_with_size+0x6e>
 8014a62:	4a04      	ldr	r2, [pc, #16]	@ (8014a74 <rcl_validate_enclave_name_with_size+0xac>)
 8014a64:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8014a68:	a802      	add	r0, sp, #8
 8014a6a:	f001 fd23 	bl	80164b4 <rcutils_snprintf>
 8014a6e:	f04f 0c01 	mov.w	ip, #1
 8014a72:	e7ba      	b.n	80149ea <rcl_validate_enclave_name_with_size+0x22>
 8014a74:	0801d190 	.word	0x0801d190

08014a78 <rcl_validate_enclave_name>:
 8014a78:	b168      	cbz	r0, 8014a96 <rcl_validate_enclave_name+0x1e>
 8014a7a:	b570      	push	{r4, r5, r6, lr}
 8014a7c:	460d      	mov	r5, r1
 8014a7e:	4616      	mov	r6, r2
 8014a80:	4604      	mov	r4, r0
 8014a82:	f7eb fbc7 	bl	8000214 <strlen>
 8014a86:	4633      	mov	r3, r6
 8014a88:	4601      	mov	r1, r0
 8014a8a:	462a      	mov	r2, r5
 8014a8c:	4620      	mov	r0, r4
 8014a8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014a92:	f7ff bf99 	b.w	80149c8 <rcl_validate_enclave_name_with_size>
 8014a96:	200b      	movs	r0, #11
 8014a98:	4770      	bx	lr
 8014a9a:	bf00      	nop

08014a9c <rcl_get_zero_initialized_wait_set>:
 8014a9c:	b510      	push	{r4, lr}
 8014a9e:	4c08      	ldr	r4, [pc, #32]	@ (8014ac0 <rcl_get_zero_initialized_wait_set+0x24>)
 8014aa0:	4686      	mov	lr, r0
 8014aa2:	4684      	mov	ip, r0
 8014aa4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014aa6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014aaa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014aac:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014ab0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014ab2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014ab6:	6823      	ldr	r3, [r4, #0]
 8014ab8:	f8cc 3000 	str.w	r3, [ip]
 8014abc:	4670      	mov	r0, lr
 8014abe:	bd10      	pop	{r4, pc}
 8014ac0:	0801dbc8 	.word	0x0801dbc8

08014ac4 <rcl_wait_set_is_valid>:
 8014ac4:	b118      	cbz	r0, 8014ace <rcl_wait_set_is_valid+0xa>
 8014ac6:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8014ac8:	3800      	subs	r0, #0
 8014aca:	bf18      	it	ne
 8014acc:	2001      	movne	r0, #1
 8014ace:	4770      	bx	lr

08014ad0 <rcl_wait_set_fini>:
 8014ad0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014ad4:	b082      	sub	sp, #8
 8014ad6:	2800      	cmp	r0, #0
 8014ad8:	f000 8095 	beq.w	8014c06 <rcl_wait_set_fini+0x136>
 8014adc:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8014ade:	4604      	mov	r4, r0
 8014ae0:	2e00      	cmp	r6, #0
 8014ae2:	f000 808c 	beq.w	8014bfe <rcl_wait_set_fini+0x12e>
 8014ae6:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 8014ae8:	f003 faa6 	bl	8018038 <rmw_destroy_wait_set>
 8014aec:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014aee:	1e06      	subs	r6, r0, #0
 8014af0:	bf18      	it	ne
 8014af2:	f44f 7661 	movne.w	r6, #900	@ 0x384
 8014af6:	2d00      	cmp	r5, #0
 8014af8:	f000 8081 	beq.w	8014bfe <rcl_wait_set_fini+0x12e>
 8014afc:	6820      	ldr	r0, [r4, #0]
 8014afe:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8014b02:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8014b04:	2700      	movs	r7, #0
 8014b06:	6067      	str	r7, [r4, #4]
 8014b08:	602f      	str	r7, [r5, #0]
 8014b0a:	b120      	cbz	r0, 8014b16 <rcl_wait_set_fini+0x46>
 8014b0c:	9101      	str	r1, [sp, #4]
 8014b0e:	47c0      	blx	r8
 8014b10:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014b12:	9901      	ldr	r1, [sp, #4]
 8014b14:	6027      	str	r7, [r4, #0]
 8014b16:	68a8      	ldr	r0, [r5, #8]
 8014b18:	b120      	cbz	r0, 8014b24 <rcl_wait_set_fini+0x54>
 8014b1a:	47c0      	blx	r8
 8014b1c:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014b1e:	2300      	movs	r3, #0
 8014b20:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8014b24:	68a0      	ldr	r0, [r4, #8]
 8014b26:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8014b28:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8014b2a:	f04f 0800 	mov.w	r8, #0
 8014b2e:	f8c4 800c 	str.w	r8, [r4, #12]
 8014b32:	f8c5 800c 	str.w	r8, [r5, #12]
 8014b36:	b128      	cbz	r0, 8014b44 <rcl_wait_set_fini+0x74>
 8014b38:	47b8      	blx	r7
 8014b3a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014b3c:	f8c4 8008 	str.w	r8, [r4, #8]
 8014b40:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8014b42:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8014b44:	6968      	ldr	r0, [r5, #20]
 8014b46:	f04f 0800 	mov.w	r8, #0
 8014b4a:	f8c5 8010 	str.w	r8, [r5, #16]
 8014b4e:	b128      	cbz	r0, 8014b5c <rcl_wait_set_fini+0x8c>
 8014b50:	47b8      	blx	r7
 8014b52:	f8c5 8014 	str.w	r8, [r5, #20]
 8014b56:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014b58:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8014b5a:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8014b5c:	6920      	ldr	r0, [r4, #16]
 8014b5e:	f04f 0800 	mov.w	r8, #0
 8014b62:	f8c4 8014 	str.w	r8, [r4, #20]
 8014b66:	f8c5 8040 	str.w	r8, [r5, #64]	@ 0x40
 8014b6a:	b128      	cbz	r0, 8014b78 <rcl_wait_set_fini+0xa8>
 8014b6c:	47b8      	blx	r7
 8014b6e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014b70:	f8c4 8010 	str.w	r8, [r4, #16]
 8014b74:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8014b76:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8014b78:	69a0      	ldr	r0, [r4, #24]
 8014b7a:	f04f 0800 	mov.w	r8, #0
 8014b7e:	f8c4 801c 	str.w	r8, [r4, #28]
 8014b82:	f8c5 8018 	str.w	r8, [r5, #24]
 8014b86:	b128      	cbz	r0, 8014b94 <rcl_wait_set_fini+0xc4>
 8014b88:	9101      	str	r1, [sp, #4]
 8014b8a:	47b8      	blx	r7
 8014b8c:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014b8e:	9901      	ldr	r1, [sp, #4]
 8014b90:	f8c4 8018 	str.w	r8, [r4, #24]
 8014b94:	6a28      	ldr	r0, [r5, #32]
 8014b96:	b120      	cbz	r0, 8014ba2 <rcl_wait_set_fini+0xd2>
 8014b98:	47b8      	blx	r7
 8014b9a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014b9c:	2300      	movs	r3, #0
 8014b9e:	e9c5 3307 	strd	r3, r3, [r5, #28]
 8014ba2:	6a20      	ldr	r0, [r4, #32]
 8014ba4:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8014ba8:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8014baa:	2700      	movs	r7, #0
 8014bac:	6267      	str	r7, [r4, #36]	@ 0x24
 8014bae:	626f      	str	r7, [r5, #36]	@ 0x24
 8014bb0:	b120      	cbz	r0, 8014bbc <rcl_wait_set_fini+0xec>
 8014bb2:	9101      	str	r1, [sp, #4]
 8014bb4:	47c0      	blx	r8
 8014bb6:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014bb8:	9901      	ldr	r1, [sp, #4]
 8014bba:	6227      	str	r7, [r4, #32]
 8014bbc:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8014bbe:	b120      	cbz	r0, 8014bca <rcl_wait_set_fini+0xfa>
 8014bc0:	47c0      	blx	r8
 8014bc2:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014bc4:	2300      	movs	r3, #0
 8014bc6:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 8014bca:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8014bcc:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8014bd0:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8014bd2:	2700      	movs	r7, #0
 8014bd4:	62e7      	str	r7, [r4, #44]	@ 0x2c
 8014bd6:	632f      	str	r7, [r5, #48]	@ 0x30
 8014bd8:	b120      	cbz	r0, 8014be4 <rcl_wait_set_fini+0x114>
 8014bda:	9101      	str	r1, [sp, #4]
 8014bdc:	47c0      	blx	r8
 8014bde:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014be0:	9901      	ldr	r1, [sp, #4]
 8014be2:	62a7      	str	r7, [r4, #40]	@ 0x28
 8014be4:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 8014be6:	b120      	cbz	r0, 8014bf2 <rcl_wait_set_fini+0x122>
 8014be8:	47c0      	blx	r8
 8014bea:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014bec:	2300      	movs	r3, #0
 8014bee:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 8014bf2:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8014bf4:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8014bf6:	4628      	mov	r0, r5
 8014bf8:	4798      	blx	r3
 8014bfa:	2300      	movs	r3, #0
 8014bfc:	6323      	str	r3, [r4, #48]	@ 0x30
 8014bfe:	4630      	mov	r0, r6
 8014c00:	b002      	add	sp, #8
 8014c02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014c06:	260b      	movs	r6, #11
 8014c08:	4630      	mov	r0, r6
 8014c0a:	b002      	add	sp, #8
 8014c0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014c10 <rcl_wait_set_add_subscription>:
 8014c10:	b318      	cbz	r0, 8014c5a <rcl_wait_set_add_subscription+0x4a>
 8014c12:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8014c14:	b570      	push	{r4, r5, r6, lr}
 8014c16:	4604      	mov	r4, r0
 8014c18:	b30b      	cbz	r3, 8014c5e <rcl_wait_set_add_subscription+0x4e>
 8014c1a:	b319      	cbz	r1, 8014c64 <rcl_wait_set_add_subscription+0x54>
 8014c1c:	681d      	ldr	r5, [r3, #0]
 8014c1e:	6840      	ldr	r0, [r0, #4]
 8014c20:	4285      	cmp	r5, r0
 8014c22:	d217      	bcs.n	8014c54 <rcl_wait_set_add_subscription+0x44>
 8014c24:	6820      	ldr	r0, [r4, #0]
 8014c26:	1c6e      	adds	r6, r5, #1
 8014c28:	601e      	str	r6, [r3, #0]
 8014c2a:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8014c2e:	b102      	cbz	r2, 8014c32 <rcl_wait_set_add_subscription+0x22>
 8014c30:	6015      	str	r5, [r2, #0]
 8014c32:	4608      	mov	r0, r1
 8014c34:	f7ff fd14 	bl	8014660 <rcl_subscription_get_rmw_handle>
 8014c38:	b150      	cbz	r0, 8014c50 <rcl_wait_set_add_subscription+0x40>
 8014c3a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014c3c:	6842      	ldr	r2, [r0, #4]
 8014c3e:	689b      	ldr	r3, [r3, #8]
 8014c40:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014c44:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8014c46:	6853      	ldr	r3, [r2, #4]
 8014c48:	3301      	adds	r3, #1
 8014c4a:	2000      	movs	r0, #0
 8014c4c:	6053      	str	r3, [r2, #4]
 8014c4e:	bd70      	pop	{r4, r5, r6, pc}
 8014c50:	2001      	movs	r0, #1
 8014c52:	bd70      	pop	{r4, r5, r6, pc}
 8014c54:	f240 3086 	movw	r0, #902	@ 0x386
 8014c58:	bd70      	pop	{r4, r5, r6, pc}
 8014c5a:	200b      	movs	r0, #11
 8014c5c:	4770      	bx	lr
 8014c5e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8014c62:	bd70      	pop	{r4, r5, r6, pc}
 8014c64:	200b      	movs	r0, #11
 8014c66:	bd70      	pop	{r4, r5, r6, pc}

08014c68 <rcl_wait_set_clear>:
 8014c68:	2800      	cmp	r0, #0
 8014c6a:	d073      	beq.n	8014d54 <rcl_wait_set_clear+0xec>
 8014c6c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8014c6e:	b510      	push	{r4, lr}
 8014c70:	4604      	mov	r4, r0
 8014c72:	2b00      	cmp	r3, #0
 8014c74:	d070      	beq.n	8014d58 <rcl_wait_set_clear+0xf0>
 8014c76:	6800      	ldr	r0, [r0, #0]
 8014c78:	b138      	cbz	r0, 8014c8a <rcl_wait_set_clear+0x22>
 8014c7a:	6862      	ldr	r2, [r4, #4]
 8014c7c:	2100      	movs	r1, #0
 8014c7e:	0092      	lsls	r2, r2, #2
 8014c80:	f006 fb8e 	bl	801b3a0 <memset>
 8014c84:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014c86:	2200      	movs	r2, #0
 8014c88:	601a      	str	r2, [r3, #0]
 8014c8a:	68a0      	ldr	r0, [r4, #8]
 8014c8c:	b138      	cbz	r0, 8014c9e <rcl_wait_set_clear+0x36>
 8014c8e:	68e2      	ldr	r2, [r4, #12]
 8014c90:	2100      	movs	r1, #0
 8014c92:	0092      	lsls	r2, r2, #2
 8014c94:	f006 fb84 	bl	801b3a0 <memset>
 8014c98:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014c9a:	2200      	movs	r2, #0
 8014c9c:	60da      	str	r2, [r3, #12]
 8014c9e:	69a0      	ldr	r0, [r4, #24]
 8014ca0:	b138      	cbz	r0, 8014cb2 <rcl_wait_set_clear+0x4a>
 8014ca2:	69e2      	ldr	r2, [r4, #28]
 8014ca4:	2100      	movs	r1, #0
 8014ca6:	0092      	lsls	r2, r2, #2
 8014ca8:	f006 fb7a 	bl	801b3a0 <memset>
 8014cac:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014cae:	2200      	movs	r2, #0
 8014cb0:	619a      	str	r2, [r3, #24]
 8014cb2:	6a20      	ldr	r0, [r4, #32]
 8014cb4:	b138      	cbz	r0, 8014cc6 <rcl_wait_set_clear+0x5e>
 8014cb6:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8014cb8:	2100      	movs	r1, #0
 8014cba:	0092      	lsls	r2, r2, #2
 8014cbc:	f006 fb70 	bl	801b3a0 <memset>
 8014cc0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014cc2:	2200      	movs	r2, #0
 8014cc4:	625a      	str	r2, [r3, #36]	@ 0x24
 8014cc6:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8014cc8:	b138      	cbz	r0, 8014cda <rcl_wait_set_clear+0x72>
 8014cca:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8014ccc:	2100      	movs	r1, #0
 8014cce:	0092      	lsls	r2, r2, #2
 8014cd0:	f006 fb66 	bl	801b3a0 <memset>
 8014cd4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014cd6:	2200      	movs	r2, #0
 8014cd8:	631a      	str	r2, [r3, #48]	@ 0x30
 8014cda:	6920      	ldr	r0, [r4, #16]
 8014cdc:	b138      	cbz	r0, 8014cee <rcl_wait_set_clear+0x86>
 8014cde:	6962      	ldr	r2, [r4, #20]
 8014ce0:	2100      	movs	r1, #0
 8014ce2:	0092      	lsls	r2, r2, #2
 8014ce4:	f006 fb5c 	bl	801b3a0 <memset>
 8014ce8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014cea:	2200      	movs	r2, #0
 8014cec:	641a      	str	r2, [r3, #64]	@ 0x40
 8014cee:	6898      	ldr	r0, [r3, #8]
 8014cf0:	b138      	cbz	r0, 8014d02 <rcl_wait_set_clear+0x9a>
 8014cf2:	685a      	ldr	r2, [r3, #4]
 8014cf4:	2100      	movs	r1, #0
 8014cf6:	0092      	lsls	r2, r2, #2
 8014cf8:	f006 fb52 	bl	801b3a0 <memset>
 8014cfc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014cfe:	2200      	movs	r2, #0
 8014d00:	605a      	str	r2, [r3, #4]
 8014d02:	6958      	ldr	r0, [r3, #20]
 8014d04:	b138      	cbz	r0, 8014d16 <rcl_wait_set_clear+0xae>
 8014d06:	691a      	ldr	r2, [r3, #16]
 8014d08:	2100      	movs	r1, #0
 8014d0a:	0092      	lsls	r2, r2, #2
 8014d0c:	f006 fb48 	bl	801b3a0 <memset>
 8014d10:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014d12:	2200      	movs	r2, #0
 8014d14:	611a      	str	r2, [r3, #16]
 8014d16:	6a18      	ldr	r0, [r3, #32]
 8014d18:	b138      	cbz	r0, 8014d2a <rcl_wait_set_clear+0xc2>
 8014d1a:	69da      	ldr	r2, [r3, #28]
 8014d1c:	2100      	movs	r1, #0
 8014d1e:	0092      	lsls	r2, r2, #2
 8014d20:	f006 fb3e 	bl	801b3a0 <memset>
 8014d24:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014d26:	2200      	movs	r2, #0
 8014d28:	61da      	str	r2, [r3, #28]
 8014d2a:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8014d2c:	b138      	cbz	r0, 8014d3e <rcl_wait_set_clear+0xd6>
 8014d2e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8014d30:	2100      	movs	r1, #0
 8014d32:	0092      	lsls	r2, r2, #2
 8014d34:	f006 fb34 	bl	801b3a0 <memset>
 8014d38:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014d3a:	2200      	movs	r2, #0
 8014d3c:	629a      	str	r2, [r3, #40]	@ 0x28
 8014d3e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8014d40:	b138      	cbz	r0, 8014d52 <rcl_wait_set_clear+0xea>
 8014d42:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8014d44:	2100      	movs	r1, #0
 8014d46:	0092      	lsls	r2, r2, #2
 8014d48:	f006 fb2a 	bl	801b3a0 <memset>
 8014d4c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014d4e:	2000      	movs	r0, #0
 8014d50:	6358      	str	r0, [r3, #52]	@ 0x34
 8014d52:	bd10      	pop	{r4, pc}
 8014d54:	200b      	movs	r0, #11
 8014d56:	4770      	bx	lr
 8014d58:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8014d5c:	bd10      	pop	{r4, pc}
 8014d5e:	bf00      	nop

08014d60 <rcl_wait_set_resize>:
 8014d60:	2800      	cmp	r0, #0
 8014d62:	f000 8185 	beq.w	8015070 <rcl_wait_set_resize+0x310>
 8014d66:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d6a:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8014d6c:	b083      	sub	sp, #12
 8014d6e:	4605      	mov	r5, r0
 8014d70:	2c00      	cmp	r4, #0
 8014d72:	f000 817f 	beq.w	8015074 <rcl_wait_set_resize+0x314>
 8014d76:	f04f 0900 	mov.w	r9, #0
 8014d7a:	f8d4 a058 	ldr.w	sl, [r4, #88]	@ 0x58
 8014d7e:	461f      	mov	r7, r3
 8014d80:	4688      	mov	r8, r1
 8014d82:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	@ 0x4c
 8014d86:	4616      	mov	r6, r2
 8014d88:	f8c0 9004 	str.w	r9, [r0, #4]
 8014d8c:	f8c4 9000 	str.w	r9, [r4]
 8014d90:	2900      	cmp	r1, #0
 8014d92:	f000 80bd 	beq.w	8014f10 <rcl_wait_set_resize+0x1b0>
 8014d96:	008c      	lsls	r4, r1, #2
 8014d98:	6800      	ldr	r0, [r0, #0]
 8014d9a:	9301      	str	r3, [sp, #4]
 8014d9c:	4652      	mov	r2, sl
 8014d9e:	4621      	mov	r1, r4
 8014da0:	4798      	blx	r3
 8014da2:	9b01      	ldr	r3, [sp, #4]
 8014da4:	6028      	str	r0, [r5, #0]
 8014da6:	2800      	cmp	r0, #0
 8014da8:	f000 80cb 	beq.w	8014f42 <rcl_wait_set_resize+0x1e2>
 8014dac:	4622      	mov	r2, r4
 8014dae:	4649      	mov	r1, r9
 8014db0:	9301      	str	r3, [sp, #4]
 8014db2:	f006 faf5 	bl	801b3a0 <memset>
 8014db6:	f8c5 8004 	str.w	r8, [r5, #4]
 8014dba:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 8014dbe:	9b01      	ldr	r3, [sp, #4]
 8014dc0:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8014dc4:	f8c8 9004 	str.w	r9, [r8, #4]
 8014dc8:	4652      	mov	r2, sl
 8014dca:	4621      	mov	r1, r4
 8014dcc:	4798      	blx	r3
 8014dce:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8014dd0:	f8c8 0008 	str.w	r0, [r8, #8]
 8014dd4:	689b      	ldr	r3, [r3, #8]
 8014dd6:	2b00      	cmp	r3, #0
 8014dd8:	f000 80ac 	beq.w	8014f34 <rcl_wait_set_resize+0x1d4>
 8014ddc:	4622      	mov	r2, r4
 8014dde:	4649      	mov	r1, r9
 8014de0:	4618      	mov	r0, r3
 8014de2:	f006 fadd 	bl	801b3a0 <memset>
 8014de6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014de8:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8014dec:	f04f 0800 	mov.w	r8, #0
 8014df0:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	@ 0x4c
 8014df4:	f8c5 800c 	str.w	r8, [r5, #12]
 8014df8:	f8c4 800c 	str.w	r8, [r4, #12]
 8014dfc:	2e00      	cmp	r6, #0
 8014dfe:	f040 80a4 	bne.w	8014f4a <rcl_wait_set_resize+0x1ea>
 8014e02:	68a8      	ldr	r0, [r5, #8]
 8014e04:	b128      	cbz	r0, 8014e12 <rcl_wait_set_resize+0xb2>
 8014e06:	4649      	mov	r1, r9
 8014e08:	4790      	blx	r2
 8014e0a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014e0c:	60ae      	str	r6, [r5, #8]
 8014e0e:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8014e12:	f04f 0800 	mov.w	r8, #0
 8014e16:	19f6      	adds	r6, r6, r7
 8014e18:	f8c4 8010 	str.w	r8, [r4, #16]
 8014e1c:	f040 80ac 	bne.w	8014f78 <rcl_wait_set_resize+0x218>
 8014e20:	6960      	ldr	r0, [r4, #20]
 8014e22:	b130      	cbz	r0, 8014e32 <rcl_wait_set_resize+0xd2>
 8014e24:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8014e26:	4649      	mov	r1, r9
 8014e28:	4798      	blx	r3
 8014e2a:	6166      	str	r6, [r4, #20]
 8014e2c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014e2e:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8014e32:	2600      	movs	r6, #0
 8014e34:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8014e38:	616e      	str	r6, [r5, #20]
 8014e3a:	6426      	str	r6, [r4, #64]	@ 0x40
 8014e3c:	2f00      	cmp	r7, #0
 8014e3e:	f040 80ad 	bne.w	8014f9c <rcl_wait_set_resize+0x23c>
 8014e42:	6928      	ldr	r0, [r5, #16]
 8014e44:	b138      	cbz	r0, 8014e56 <rcl_wait_set_resize+0xf6>
 8014e46:	4649      	mov	r1, r9
 8014e48:	47d0      	blx	sl
 8014e4a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014e4c:	612f      	str	r7, [r5, #16]
 8014e4e:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8014e52:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8014e56:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014e58:	2600      	movs	r6, #0
 8014e5a:	61ee      	str	r6, [r5, #28]
 8014e5c:	61a6      	str	r6, [r4, #24]
 8014e5e:	2b00      	cmp	r3, #0
 8014e60:	f040 80af 	bne.w	8014fc2 <rcl_wait_set_resize+0x262>
 8014e64:	69a8      	ldr	r0, [r5, #24]
 8014e66:	b120      	cbz	r0, 8014e72 <rcl_wait_set_resize+0x112>
 8014e68:	4649      	mov	r1, r9
 8014e6a:	47d0      	blx	sl
 8014e6c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014e6e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014e70:	61ab      	str	r3, [r5, #24]
 8014e72:	6a20      	ldr	r0, [r4, #32]
 8014e74:	b128      	cbz	r0, 8014e82 <rcl_wait_set_resize+0x122>
 8014e76:	4649      	mov	r1, r9
 8014e78:	47d0      	blx	sl
 8014e7a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014e7c:	2300      	movs	r3, #0
 8014e7e:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8014e82:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014e84:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8014e86:	2600      	movs	r6, #0
 8014e88:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 8014e8c:	626e      	str	r6, [r5, #36]	@ 0x24
 8014e8e:	6266      	str	r6, [r4, #36]	@ 0x24
 8014e90:	2b00      	cmp	r3, #0
 8014e92:	f000 80b6 	beq.w	8015002 <rcl_wait_set_resize+0x2a2>
 8014e96:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 8014e9a:	6a28      	ldr	r0, [r5, #32]
 8014e9c:	463a      	mov	r2, r7
 8014e9e:	4651      	mov	r1, sl
 8014ea0:	47c8      	blx	r9
 8014ea2:	6228      	str	r0, [r5, #32]
 8014ea4:	2800      	cmp	r0, #0
 8014ea6:	d04c      	beq.n	8014f42 <rcl_wait_set_resize+0x1e2>
 8014ea8:	4652      	mov	r2, sl
 8014eaa:	4631      	mov	r1, r6
 8014eac:	f006 fa78 	bl	801b3a0 <memset>
 8014eb0:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014eb2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014eb4:	626b      	str	r3, [r5, #36]	@ 0x24
 8014eb6:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8014eb8:	62a6      	str	r6, [r4, #40]	@ 0x28
 8014eba:	463a      	mov	r2, r7
 8014ebc:	4651      	mov	r1, sl
 8014ebe:	47c8      	blx	r9
 8014ec0:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8014ec2:	62e0      	str	r0, [r4, #44]	@ 0x2c
 8014ec4:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8014ec6:	2c00      	cmp	r4, #0
 8014ec8:	f000 80f0 	beq.w	80150ac <rcl_wait_set_resize+0x34c>
 8014ecc:	4620      	mov	r0, r4
 8014ece:	4652      	mov	r2, sl
 8014ed0:	4631      	mov	r1, r6
 8014ed2:	f006 fa65 	bl	801b3a0 <memset>
 8014ed6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014ed8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014eda:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8014edc:	2600      	movs	r6, #0
 8014ede:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 8014ee2:	62ee      	str	r6, [r5, #44]	@ 0x2c
 8014ee4:	6326      	str	r6, [r4, #48]	@ 0x30
 8014ee6:	2b00      	cmp	r3, #0
 8014ee8:	f040 809d 	bne.w	8015026 <rcl_wait_set_resize+0x2c6>
 8014eec:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8014eee:	b120      	cbz	r0, 8014efa <rcl_wait_set_resize+0x19a>
 8014ef0:	4639      	mov	r1, r7
 8014ef2:	47c0      	blx	r8
 8014ef4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014ef6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014ef8:	62ab      	str	r3, [r5, #40]	@ 0x28
 8014efa:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8014efc:	b310      	cbz	r0, 8014f44 <rcl_wait_set_resize+0x1e4>
 8014efe:	4639      	mov	r1, r7
 8014f00:	47c0      	blx	r8
 8014f02:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8014f04:	2000      	movs	r0, #0
 8014f06:	e9c3 000d 	strd	r0, r0, [r3, #52]	@ 0x34
 8014f0a:	b003      	add	sp, #12
 8014f0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f10:	6800      	ldr	r0, [r0, #0]
 8014f12:	b120      	cbz	r0, 8014f1e <rcl_wait_set_resize+0x1be>
 8014f14:	4651      	mov	r1, sl
 8014f16:	47d8      	blx	fp
 8014f18:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014f1a:	f8c5 8000 	str.w	r8, [r5]
 8014f1e:	68a0      	ldr	r0, [r4, #8]
 8014f20:	2800      	cmp	r0, #0
 8014f22:	f43f af61 	beq.w	8014de8 <rcl_wait_set_resize+0x88>
 8014f26:	4651      	mov	r1, sl
 8014f28:	47d8      	blx	fp
 8014f2a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014f2c:	2300      	movs	r3, #0
 8014f2e:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8014f32:	e759      	b.n	8014de8 <rcl_wait_set_resize+0x88>
 8014f34:	6828      	ldr	r0, [r5, #0]
 8014f36:	9301      	str	r3, [sp, #4]
 8014f38:	4651      	mov	r1, sl
 8014f3a:	47d8      	blx	fp
 8014f3c:	9b01      	ldr	r3, [sp, #4]
 8014f3e:	e9c5 3300 	strd	r3, r3, [r5]
 8014f42:	200a      	movs	r0, #10
 8014f44:	b003      	add	sp, #12
 8014f46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f4a:	00b4      	lsls	r4, r6, #2
 8014f4c:	68a8      	ldr	r0, [r5, #8]
 8014f4e:	464a      	mov	r2, r9
 8014f50:	4621      	mov	r1, r4
 8014f52:	4798      	blx	r3
 8014f54:	60a8      	str	r0, [r5, #8]
 8014f56:	2800      	cmp	r0, #0
 8014f58:	d0f3      	beq.n	8014f42 <rcl_wait_set_resize+0x1e2>
 8014f5a:	4622      	mov	r2, r4
 8014f5c:	4641      	mov	r1, r8
 8014f5e:	f006 fa1f 	bl	801b3a0 <memset>
 8014f62:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014f64:	60ee      	str	r6, [r5, #12]
 8014f66:	f04f 0800 	mov.w	r8, #0
 8014f6a:	19f6      	adds	r6, r6, r7
 8014f6c:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8014f70:	f8c4 8010 	str.w	r8, [r4, #16]
 8014f74:	f43f af54 	beq.w	8014e20 <rcl_wait_set_resize+0xc0>
 8014f78:	00b6      	lsls	r6, r6, #2
 8014f7a:	464a      	mov	r2, r9
 8014f7c:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8014f7e:	6960      	ldr	r0, [r4, #20]
 8014f80:	4631      	mov	r1, r6
 8014f82:	4798      	blx	r3
 8014f84:	4681      	mov	r9, r0
 8014f86:	6160      	str	r0, [r4, #20]
 8014f88:	2800      	cmp	r0, #0
 8014f8a:	d076      	beq.n	801507a <rcl_wait_set_resize+0x31a>
 8014f8c:	4632      	mov	r2, r6
 8014f8e:	4641      	mov	r1, r8
 8014f90:	f006 fa06 	bl	801b3a0 <memset>
 8014f94:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014f96:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8014f9a:	e74a      	b.n	8014e32 <rcl_wait_set_resize+0xd2>
 8014f9c:	00bc      	lsls	r4, r7, #2
 8014f9e:	6928      	ldr	r0, [r5, #16]
 8014fa0:	464a      	mov	r2, r9
 8014fa2:	4621      	mov	r1, r4
 8014fa4:	47c0      	blx	r8
 8014fa6:	6128      	str	r0, [r5, #16]
 8014fa8:	2800      	cmp	r0, #0
 8014faa:	d0ca      	beq.n	8014f42 <rcl_wait_set_resize+0x1e2>
 8014fac:	4622      	mov	r2, r4
 8014fae:	4631      	mov	r1, r6
 8014fb0:	f006 f9f6 	bl	801b3a0 <memset>
 8014fb4:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014fb6:	616f      	str	r7, [r5, #20]
 8014fb8:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8014fbc:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8014fc0:	e749      	b.n	8014e56 <rcl_wait_set_resize+0xf6>
 8014fc2:	009c      	lsls	r4, r3, #2
 8014fc4:	69a8      	ldr	r0, [r5, #24]
 8014fc6:	464a      	mov	r2, r9
 8014fc8:	4621      	mov	r1, r4
 8014fca:	47c0      	blx	r8
 8014fcc:	61a8      	str	r0, [r5, #24]
 8014fce:	2800      	cmp	r0, #0
 8014fd0:	d0b7      	beq.n	8014f42 <rcl_wait_set_resize+0x1e2>
 8014fd2:	4622      	mov	r2, r4
 8014fd4:	4631      	mov	r1, r6
 8014fd6:	f006 f9e3 	bl	801b3a0 <memset>
 8014fda:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
 8014fdc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014fde:	61eb      	str	r3, [r5, #28]
 8014fe0:	6a38      	ldr	r0, [r7, #32]
 8014fe2:	61fe      	str	r6, [r7, #28]
 8014fe4:	464a      	mov	r2, r9
 8014fe6:	4621      	mov	r1, r4
 8014fe8:	47c0      	blx	r8
 8014fea:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8014fec:	6238      	str	r0, [r7, #32]
 8014fee:	6a1f      	ldr	r7, [r3, #32]
 8014ff0:	2f00      	cmp	r7, #0
 8014ff2:	d054      	beq.n	801509e <rcl_wait_set_resize+0x33e>
 8014ff4:	4622      	mov	r2, r4
 8014ff6:	4631      	mov	r1, r6
 8014ff8:	4638      	mov	r0, r7
 8014ffa:	f006 f9d1 	bl	801b3a0 <memset>
 8014ffe:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015000:	e73f      	b.n	8014e82 <rcl_wait_set_resize+0x122>
 8015002:	6a28      	ldr	r0, [r5, #32]
 8015004:	b120      	cbz	r0, 8015010 <rcl_wait_set_resize+0x2b0>
 8015006:	4639      	mov	r1, r7
 8015008:	47c0      	blx	r8
 801500a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801500c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801500e:	622b      	str	r3, [r5, #32]
 8015010:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8015012:	2800      	cmp	r0, #0
 8015014:	f43f af60 	beq.w	8014ed8 <rcl_wait_set_resize+0x178>
 8015018:	4639      	mov	r1, r7
 801501a:	47c0      	blx	r8
 801501c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801501e:	2300      	movs	r3, #0
 8015020:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 8015024:	e758      	b.n	8014ed8 <rcl_wait_set_resize+0x178>
 8015026:	009c      	lsls	r4, r3, #2
 8015028:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 801502a:	463a      	mov	r2, r7
 801502c:	4621      	mov	r1, r4
 801502e:	47c8      	blx	r9
 8015030:	62a8      	str	r0, [r5, #40]	@ 0x28
 8015032:	2800      	cmp	r0, #0
 8015034:	d085      	beq.n	8014f42 <rcl_wait_set_resize+0x1e2>
 8015036:	4622      	mov	r2, r4
 8015038:	4631      	mov	r1, r6
 801503a:	f006 f9b1 	bl	801b3a0 <memset>
 801503e:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 8015042:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015044:	62eb      	str	r3, [r5, #44]	@ 0x2c
 8015046:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 801504a:	f8ca 6034 	str.w	r6, [sl, #52]	@ 0x34
 801504e:	463a      	mov	r2, r7
 8015050:	4621      	mov	r1, r4
 8015052:	47c8      	blx	r9
 8015054:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8015056:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 801505a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801505c:	b36b      	cbz	r3, 80150ba <rcl_wait_set_resize+0x35a>
 801505e:	4622      	mov	r2, r4
 8015060:	4631      	mov	r1, r6
 8015062:	4618      	mov	r0, r3
 8015064:	f006 f99c 	bl	801b3a0 <memset>
 8015068:	4630      	mov	r0, r6
 801506a:	b003      	add	sp, #12
 801506c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015070:	200b      	movs	r0, #11
 8015072:	4770      	bx	lr
 8015074:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015078:	e764      	b.n	8014f44 <rcl_wait_set_resize+0x1e4>
 801507a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801507c:	68a8      	ldr	r0, [r5, #8]
 801507e:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8015080:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015082:	4798      	blx	r3
 8015084:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8015086:	6928      	ldr	r0, [r5, #16]
 8015088:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801508a:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 801508c:	f8c5 900c 	str.w	r9, [r5, #12]
 8015090:	f8c5 9008 	str.w	r9, [r5, #8]
 8015094:	4790      	blx	r2
 8015096:	e9c5 9904 	strd	r9, r9, [r5, #16]
 801509a:	200a      	movs	r0, #10
 801509c:	e752      	b.n	8014f44 <rcl_wait_set_resize+0x1e4>
 801509e:	69a8      	ldr	r0, [r5, #24]
 80150a0:	4649      	mov	r1, r9
 80150a2:	47d0      	blx	sl
 80150a4:	e9c5 7706 	strd	r7, r7, [r5, #24]
 80150a8:	200a      	movs	r0, #10
 80150aa:	e74b      	b.n	8014f44 <rcl_wait_set_resize+0x1e4>
 80150ac:	6a28      	ldr	r0, [r5, #32]
 80150ae:	4639      	mov	r1, r7
 80150b0:	47c0      	blx	r8
 80150b2:	e9c5 4408 	strd	r4, r4, [r5, #32]
 80150b6:	200a      	movs	r0, #10
 80150b8:	e744      	b.n	8014f44 <rcl_wait_set_resize+0x1e4>
 80150ba:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 80150bc:	9301      	str	r3, [sp, #4]
 80150be:	4639      	mov	r1, r7
 80150c0:	47c0      	blx	r8
 80150c2:	9b01      	ldr	r3, [sp, #4]
 80150c4:	200a      	movs	r0, #10
 80150c6:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 80150ca:	e73b      	b.n	8014f44 <rcl_wait_set_resize+0x1e4>

080150cc <rcl_wait_set_init>:
 80150cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80150d0:	b084      	sub	sp, #16
 80150d2:	4604      	mov	r4, r0
 80150d4:	a810      	add	r0, sp, #64	@ 0x40
 80150d6:	f8dd a03c 	ldr.w	sl, [sp, #60]	@ 0x3c
 80150da:	460f      	mov	r7, r1
 80150dc:	4690      	mov	r8, r2
 80150de:	4699      	mov	r9, r3
 80150e0:	f7f7 fe4e 	bl	800cd80 <rcutils_allocator_is_valid>
 80150e4:	2800      	cmp	r0, #0
 80150e6:	d06b      	beq.n	80151c0 <rcl_wait_set_init+0xf4>
 80150e8:	2c00      	cmp	r4, #0
 80150ea:	d069      	beq.n	80151c0 <rcl_wait_set_init+0xf4>
 80150ec:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80150ee:	b125      	cbz	r5, 80150fa <rcl_wait_set_init+0x2e>
 80150f0:	2564      	movs	r5, #100	@ 0x64
 80150f2:	4628      	mov	r0, r5
 80150f4:	b004      	add	sp, #16
 80150f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80150fa:	f1ba 0f00 	cmp.w	sl, #0
 80150fe:	d05f      	beq.n	80151c0 <rcl_wait_set_init+0xf4>
 8015100:	4650      	mov	r0, sl
 8015102:	f7fe fa8d 	bl	8013620 <rcl_context_is_valid>
 8015106:	2800      	cmp	r0, #0
 8015108:	d067      	beq.n	80151da <rcl_wait_set_init+0x10e>
 801510a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801510c:	9914      	ldr	r1, [sp, #80]	@ 0x50
 801510e:	205c      	movs	r0, #92	@ 0x5c
 8015110:	4798      	blx	r3
 8015112:	6320      	str	r0, [r4, #48]	@ 0x30
 8015114:	2800      	cmp	r0, #0
 8015116:	d062      	beq.n	80151de <rcl_wait_set_init+0x112>
 8015118:	4629      	mov	r1, r5
 801511a:	225c      	movs	r2, #92	@ 0x5c
 801511c:	f006 f940 	bl	801b3a0 <memset>
 8015120:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
 8015124:	eb03 0e02 	add.w	lr, r3, r2
 8015128:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801512a:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 801512c:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 8015130:	449e      	add	lr, r3
 8015132:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015136:	e9c6 5501 	strd	r5, r5, [r6, #4]
 801513a:	e9c6 5504 	strd	r5, r5, [r6, #16]
 801513e:	e9c6 5507 	strd	r5, r5, [r6, #28]
 8015142:	e9c6 550a 	strd	r5, r5, [r6, #40]	@ 0x28
 8015146:	e9c6 550d 	strd	r5, r5, [r6, #52]	@ 0x34
 801514a:	f106 0548 	add.w	r5, r6, #72	@ 0x48
 801514e:	f8c6 a044 	str.w	sl, [r6, #68]	@ 0x44
 8015152:	f8da a000 	ldr.w	sl, [sl]
 8015156:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015158:	44c6      	add	lr, r8
 801515a:	f8dc 3000 	ldr.w	r3, [ip]
 801515e:	602b      	str	r3, [r5, #0]
 8015160:	eb0e 0147 	add.w	r1, lr, r7, lsl #1
 8015164:	f10a 0028 	add.w	r0, sl, #40	@ 0x28
 8015168:	f002 ff5c 	bl	8018024 <rmw_create_wait_set>
 801516c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801516e:	63f0      	str	r0, [r6, #60]	@ 0x3c
 8015170:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8015172:	b350      	cbz	r0, 80151ca <rcl_wait_set_init+0xfe>
 8015174:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015176:	9302      	str	r3, [sp, #8]
 8015178:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801517a:	9301      	str	r3, [sp, #4]
 801517c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801517e:	9300      	str	r3, [sp, #0]
 8015180:	4642      	mov	r2, r8
 8015182:	464b      	mov	r3, r9
 8015184:	4639      	mov	r1, r7
 8015186:	4620      	mov	r0, r4
 8015188:	f7ff fdea 	bl	8014d60 <rcl_wait_set_resize>
 801518c:	4605      	mov	r5, r0
 801518e:	2800      	cmp	r0, #0
 8015190:	d0af      	beq.n	80150f2 <rcl_wait_set_init+0x26>
 8015192:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015194:	bb2b      	cbnz	r3, 80151e2 <rcl_wait_set_init+0x116>
 8015196:	2600      	movs	r6, #0
 8015198:	e9cd 6601 	strd	r6, r6, [sp, #4]
 801519c:	9600      	str	r6, [sp, #0]
 801519e:	4633      	mov	r3, r6
 80151a0:	4632      	mov	r2, r6
 80151a2:	4631      	mov	r1, r6
 80151a4:	4620      	mov	r0, r4
 80151a6:	f7ff fddb 	bl	8014d60 <rcl_wait_set_resize>
 80151aa:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80151ac:	2800      	cmp	r0, #0
 80151ae:	d0a0      	beq.n	80150f2 <rcl_wait_set_init+0x26>
 80151b0:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 80151b2:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 80151b4:	4798      	blx	r3
 80151b6:	4628      	mov	r0, r5
 80151b8:	6326      	str	r6, [r4, #48]	@ 0x30
 80151ba:	b004      	add	sp, #16
 80151bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80151c0:	250b      	movs	r5, #11
 80151c2:	4628      	mov	r0, r5
 80151c4:	b004      	add	sp, #16
 80151c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80151ca:	2501      	movs	r5, #1
 80151cc:	f002 ff34 	bl	8018038 <rmw_destroy_wait_set>
 80151d0:	2800      	cmp	r0, #0
 80151d2:	bf18      	it	ne
 80151d4:	f44f 7561 	movne.w	r5, #900	@ 0x384
 80151d8:	e7dd      	b.n	8015196 <rcl_wait_set_init+0xca>
 80151da:	2565      	movs	r5, #101	@ 0x65
 80151dc:	e789      	b.n	80150f2 <rcl_wait_set_init+0x26>
 80151de:	250a      	movs	r5, #10
 80151e0:	e787      	b.n	80150f2 <rcl_wait_set_init+0x26>
 80151e2:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80151e4:	e7f2      	b.n	80151cc <rcl_wait_set_init+0x100>
 80151e6:	bf00      	nop

080151e8 <rcl_wait_set_add_guard_condition>:
 80151e8:	b318      	cbz	r0, 8015232 <rcl_wait_set_add_guard_condition+0x4a>
 80151ea:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80151ec:	b570      	push	{r4, r5, r6, lr}
 80151ee:	4604      	mov	r4, r0
 80151f0:	b30b      	cbz	r3, 8015236 <rcl_wait_set_add_guard_condition+0x4e>
 80151f2:	b319      	cbz	r1, 801523c <rcl_wait_set_add_guard_condition+0x54>
 80151f4:	68dd      	ldr	r5, [r3, #12]
 80151f6:	68c0      	ldr	r0, [r0, #12]
 80151f8:	4285      	cmp	r5, r0
 80151fa:	d217      	bcs.n	801522c <rcl_wait_set_add_guard_condition+0x44>
 80151fc:	68a0      	ldr	r0, [r4, #8]
 80151fe:	1c6e      	adds	r6, r5, #1
 8015200:	60de      	str	r6, [r3, #12]
 8015202:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8015206:	b102      	cbz	r2, 801520a <rcl_wait_set_add_guard_condition+0x22>
 8015208:	6015      	str	r5, [r2, #0]
 801520a:	4608      	mov	r0, r1
 801520c:	f004 fe58 	bl	8019ec0 <rcl_guard_condition_get_rmw_handle>
 8015210:	b150      	cbz	r0, 8015228 <rcl_wait_set_add_guard_condition+0x40>
 8015212:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015214:	6842      	ldr	r2, [r0, #4]
 8015216:	695b      	ldr	r3, [r3, #20]
 8015218:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801521c:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801521e:	6913      	ldr	r3, [r2, #16]
 8015220:	3301      	adds	r3, #1
 8015222:	2000      	movs	r0, #0
 8015224:	6113      	str	r3, [r2, #16]
 8015226:	bd70      	pop	{r4, r5, r6, pc}
 8015228:	2001      	movs	r0, #1
 801522a:	bd70      	pop	{r4, r5, r6, pc}
 801522c:	f240 3086 	movw	r0, #902	@ 0x386
 8015230:	bd70      	pop	{r4, r5, r6, pc}
 8015232:	200b      	movs	r0, #11
 8015234:	4770      	bx	lr
 8015236:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801523a:	bd70      	pop	{r4, r5, r6, pc}
 801523c:	200b      	movs	r0, #11
 801523e:	bd70      	pop	{r4, r5, r6, pc}

08015240 <rcl_wait_set_add_timer>:
 8015240:	b328      	cbz	r0, 801528e <rcl_wait_set_add_timer+0x4e>
 8015242:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8015244:	b570      	push	{r4, r5, r6, lr}
 8015246:	4604      	mov	r4, r0
 8015248:	b31b      	cbz	r3, 8015292 <rcl_wait_set_add_timer+0x52>
 801524a:	b329      	cbz	r1, 8015298 <rcl_wait_set_add_timer+0x58>
 801524c:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 801524e:	6965      	ldr	r5, [r4, #20]
 8015250:	42a8      	cmp	r0, r5
 8015252:	d219      	bcs.n	8015288 <rcl_wait_set_add_timer+0x48>
 8015254:	6925      	ldr	r5, [r4, #16]
 8015256:	1c46      	adds	r6, r0, #1
 8015258:	641e      	str	r6, [r3, #64]	@ 0x40
 801525a:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 801525e:	b102      	cbz	r2, 8015262 <rcl_wait_set_add_timer+0x22>
 8015260:	6010      	str	r0, [r2, #0]
 8015262:	4608      	mov	r0, r1
 8015264:	f7ff fba6 	bl	80149b4 <rcl_timer_get_guard_condition>
 8015268:	b168      	cbz	r0, 8015286 <rcl_wait_set_add_timer+0x46>
 801526a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801526c:	68e3      	ldr	r3, [r4, #12]
 801526e:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 8015270:	3b01      	subs	r3, #1
 8015272:	441d      	add	r5, r3
 8015274:	f004 fe24 	bl	8019ec0 <rcl_guard_condition_get_rmw_handle>
 8015278:	b180      	cbz	r0, 801529c <rcl_wait_set_add_timer+0x5c>
 801527a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801527c:	6842      	ldr	r2, [r0, #4]
 801527e:	695b      	ldr	r3, [r3, #20]
 8015280:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015284:	2000      	movs	r0, #0
 8015286:	bd70      	pop	{r4, r5, r6, pc}
 8015288:	f240 3086 	movw	r0, #902	@ 0x386
 801528c:	bd70      	pop	{r4, r5, r6, pc}
 801528e:	200b      	movs	r0, #11
 8015290:	4770      	bx	lr
 8015292:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015296:	bd70      	pop	{r4, r5, r6, pc}
 8015298:	200b      	movs	r0, #11
 801529a:	bd70      	pop	{r4, r5, r6, pc}
 801529c:	2001      	movs	r0, #1
 801529e:	bd70      	pop	{r4, r5, r6, pc}

080152a0 <rcl_wait_set_add_client>:
 80152a0:	b318      	cbz	r0, 80152ea <rcl_wait_set_add_client+0x4a>
 80152a2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80152a4:	b570      	push	{r4, r5, r6, lr}
 80152a6:	4604      	mov	r4, r0
 80152a8:	b30b      	cbz	r3, 80152ee <rcl_wait_set_add_client+0x4e>
 80152aa:	b319      	cbz	r1, 80152f4 <rcl_wait_set_add_client+0x54>
 80152ac:	699d      	ldr	r5, [r3, #24]
 80152ae:	69c0      	ldr	r0, [r0, #28]
 80152b0:	4285      	cmp	r5, r0
 80152b2:	d217      	bcs.n	80152e4 <rcl_wait_set_add_client+0x44>
 80152b4:	69a0      	ldr	r0, [r4, #24]
 80152b6:	1c6e      	adds	r6, r5, #1
 80152b8:	619e      	str	r6, [r3, #24]
 80152ba:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80152be:	b102      	cbz	r2, 80152c2 <rcl_wait_set_add_client+0x22>
 80152c0:	6015      	str	r5, [r2, #0]
 80152c2:	4608      	mov	r0, r1
 80152c4:	f7fe f900 	bl	80134c8 <rcl_client_get_rmw_handle>
 80152c8:	b150      	cbz	r0, 80152e0 <rcl_wait_set_add_client+0x40>
 80152ca:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80152cc:	6842      	ldr	r2, [r0, #4]
 80152ce:	6a1b      	ldr	r3, [r3, #32]
 80152d0:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80152d4:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80152d6:	69d3      	ldr	r3, [r2, #28]
 80152d8:	3301      	adds	r3, #1
 80152da:	2000      	movs	r0, #0
 80152dc:	61d3      	str	r3, [r2, #28]
 80152de:	bd70      	pop	{r4, r5, r6, pc}
 80152e0:	2001      	movs	r0, #1
 80152e2:	bd70      	pop	{r4, r5, r6, pc}
 80152e4:	f240 3086 	movw	r0, #902	@ 0x386
 80152e8:	bd70      	pop	{r4, r5, r6, pc}
 80152ea:	200b      	movs	r0, #11
 80152ec:	4770      	bx	lr
 80152ee:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80152f2:	bd70      	pop	{r4, r5, r6, pc}
 80152f4:	200b      	movs	r0, #11
 80152f6:	bd70      	pop	{r4, r5, r6, pc}

080152f8 <rcl_wait_set_add_service>:
 80152f8:	b318      	cbz	r0, 8015342 <rcl_wait_set_add_service+0x4a>
 80152fa:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80152fc:	b570      	push	{r4, r5, r6, lr}
 80152fe:	4604      	mov	r4, r0
 8015300:	b30b      	cbz	r3, 8015346 <rcl_wait_set_add_service+0x4e>
 8015302:	b319      	cbz	r1, 801534c <rcl_wait_set_add_service+0x54>
 8015304:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8015306:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8015308:	4285      	cmp	r5, r0
 801530a:	d217      	bcs.n	801533c <rcl_wait_set_add_service+0x44>
 801530c:	6a20      	ldr	r0, [r4, #32]
 801530e:	1c6e      	adds	r6, r5, #1
 8015310:	625e      	str	r6, [r3, #36]	@ 0x24
 8015312:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8015316:	b102      	cbz	r2, 801531a <rcl_wait_set_add_service+0x22>
 8015318:	6015      	str	r5, [r2, #0]
 801531a:	4608      	mov	r0, r1
 801531c:	f7ff f804 	bl	8014328 <rcl_service_get_rmw_handle>
 8015320:	b150      	cbz	r0, 8015338 <rcl_wait_set_add_service+0x40>
 8015322:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015324:	6842      	ldr	r2, [r0, #4]
 8015326:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015328:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801532c:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801532e:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8015330:	3301      	adds	r3, #1
 8015332:	2000      	movs	r0, #0
 8015334:	6293      	str	r3, [r2, #40]	@ 0x28
 8015336:	bd70      	pop	{r4, r5, r6, pc}
 8015338:	2001      	movs	r0, #1
 801533a:	bd70      	pop	{r4, r5, r6, pc}
 801533c:	f240 3086 	movw	r0, #902	@ 0x386
 8015340:	bd70      	pop	{r4, r5, r6, pc}
 8015342:	200b      	movs	r0, #11
 8015344:	4770      	bx	lr
 8015346:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801534a:	bd70      	pop	{r4, r5, r6, pc}
 801534c:	200b      	movs	r0, #11
 801534e:	bd70      	pop	{r4, r5, r6, pc}

08015350 <rcl_wait>:
 8015350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015354:	ed2d 8b02 	vpush	{d8}
 8015358:	b08d      	sub	sp, #52	@ 0x34
 801535a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801535e:	2800      	cmp	r0, #0
 8015360:	f000 8143 	beq.w	80155ea <rcl_wait+0x29a>
 8015364:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8015366:	4605      	mov	r5, r0
 8015368:	2e00      	cmp	r6, #0
 801536a:	f000 8112 	beq.w	8015592 <rcl_wait+0x242>
 801536e:	6843      	ldr	r3, [r0, #4]
 8015370:	b983      	cbnz	r3, 8015394 <rcl_wait+0x44>
 8015372:	68eb      	ldr	r3, [r5, #12]
 8015374:	b973      	cbnz	r3, 8015394 <rcl_wait+0x44>
 8015376:	696b      	ldr	r3, [r5, #20]
 8015378:	b963      	cbnz	r3, 8015394 <rcl_wait+0x44>
 801537a:	69eb      	ldr	r3, [r5, #28]
 801537c:	b953      	cbnz	r3, 8015394 <rcl_wait+0x44>
 801537e:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8015380:	b943      	cbnz	r3, 8015394 <rcl_wait+0x44>
 8015382:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8015384:	b933      	cbnz	r3, 8015394 <rcl_wait+0x44>
 8015386:	f240 3085 	movw	r0, #901	@ 0x385
 801538a:	b00d      	add	sp, #52	@ 0x34
 801538c:	ecbd 8b02 	vpop	{d8}
 8015390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015394:	9b04      	ldr	r3, [sp, #16]
 8015396:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8015398:	2b01      	cmp	r3, #1
 801539a:	9b05      	ldr	r3, [sp, #20]
 801539c:	f173 0300 	sbcs.w	r3, r3, #0
 80153a0:	f2c0 80f0 	blt.w	8015584 <rcl_wait+0x234>
 80153a4:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 80153a8:	4643      	mov	r3, r8
 80153aa:	2a00      	cmp	r2, #0
 80153ac:	f000 8133 	beq.w	8015616 <rcl_wait+0x2c6>
 80153b0:	2400      	movs	r4, #0
 80153b2:	4613      	mov	r3, r2
 80153b4:	ed9f 8b9c 	vldr	d8, [pc, #624]	@ 8015628 <rcl_wait+0x2d8>
 80153b8:	46a2      	mov	sl, r4
 80153ba:	46a3      	mov	fp, r4
 80153bc:	f240 3921 	movw	r9, #801	@ 0x321
 80153c0:	4632      	mov	r2, r6
 80153c2:	e014      	b.n	80153ee <rcl_wait+0x9e>
 80153c4:	2800      	cmp	r0, #0
 80153c6:	d1e0      	bne.n	801538a <rcl_wait+0x3a>
 80153c8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80153cc:	4542      	cmp	r2, r8
 80153ce:	eb73 0107 	sbcs.w	r1, r3, r7
 80153d2:	da03      	bge.n	80153dc <rcl_wait+0x8c>
 80153d4:	4690      	mov	r8, r2
 80153d6:	461f      	mov	r7, r3
 80153d8:	f04f 0b01 	mov.w	fp, #1
 80153dc:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 80153de:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80153e0:	3401      	adds	r4, #1
 80153e2:	f14a 0a00 	adc.w	sl, sl, #0
 80153e6:	429c      	cmp	r4, r3
 80153e8:	f17a 0100 	sbcs.w	r1, sl, #0
 80153ec:	d228      	bcs.n	8015440 <rcl_wait+0xf0>
 80153ee:	6928      	ldr	r0, [r5, #16]
 80153f0:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 80153f4:	a908      	add	r1, sp, #32
 80153f6:	00a6      	lsls	r6, r4, #2
 80153f8:	2800      	cmp	r0, #0
 80153fa:	d0f1      	beq.n	80153e0 <rcl_wait+0x90>
 80153fc:	68eb      	ldr	r3, [r5, #12]
 80153fe:	f8d2 c014 	ldr.w	ip, [r2, #20]
 8015402:	4423      	add	r3, r4
 8015404:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 8015408:	f1be 0f00 	cmp.w	lr, #0
 801540c:	d006      	beq.n	801541c <rcl_wait+0xcc>
 801540e:	6913      	ldr	r3, [r2, #16]
 8015410:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 8015414:	3301      	adds	r3, #1
 8015416:	6113      	str	r3, [r2, #16]
 8015418:	692b      	ldr	r3, [r5, #16]
 801541a:	5998      	ldr	r0, [r3, r6]
 801541c:	ed8d 8b08 	vstr	d8, [sp, #32]
 8015420:	f7ff fa96 	bl	8014950 <rcl_timer_get_time_until_next_call>
 8015424:	4548      	cmp	r0, r9
 8015426:	d1cd      	bne.n	80153c4 <rcl_wait+0x74>
 8015428:	692b      	ldr	r3, [r5, #16]
 801542a:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 801542c:	2100      	movs	r1, #0
 801542e:	5199      	str	r1, [r3, r6]
 8015430:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8015432:	3401      	adds	r4, #1
 8015434:	f14a 0a00 	adc.w	sl, sl, #0
 8015438:	429c      	cmp	r4, r3
 801543a:	f17a 0100 	sbcs.w	r1, sl, #0
 801543e:	d3d6      	bcc.n	80153ee <rcl_wait+0x9e>
 8015440:	4616      	mov	r6, r2
 8015442:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8015446:	4313      	orrs	r3, r2
 8015448:	46d9      	mov	r9, fp
 801544a:	f040 80a9 	bne.w	80155a0 <rcl_wait+0x250>
 801544e:	2300      	movs	r3, #0
 8015450:	2200      	movs	r2, #0
 8015452:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8015456:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 801545a:	ab08      	add	r3, sp, #32
 801545c:	9302      	str	r3, [sp, #8]
 801545e:	6bf2      	ldr	r2, [r6, #60]	@ 0x3c
 8015460:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 8015464:	e9cd 3200 	strd	r3, r2, [sp]
 8015468:	f106 0110 	add.w	r1, r6, #16
 801546c:	f106 031c 	add.w	r3, r6, #28
 8015470:	f106 0228 	add.w	r2, r6, #40	@ 0x28
 8015474:	1d30      	adds	r0, r6, #4
 8015476:	f002 fc5d 	bl	8017d34 <rmw_wait>
 801547a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801547c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801547e:	4680      	mov	r8, r0
 8015480:	b1ca      	cbz	r2, 80154b6 <rcl_wait+0x166>
 8015482:	2400      	movs	r4, #0
 8015484:	4627      	mov	r7, r4
 8015486:	692a      	ldr	r2, [r5, #16]
 8015488:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 801548c:	f10d 011f 	add.w	r1, sp, #31
 8015490:	00a6      	lsls	r6, r4, #2
 8015492:	b160      	cbz	r0, 80154ae <rcl_wait+0x15e>
 8015494:	f88d 701f 	strb.w	r7, [sp, #31]
 8015498:	f7ff fa20 	bl	80148dc <rcl_timer_is_ready>
 801549c:	2800      	cmp	r0, #0
 801549e:	f47f af74 	bne.w	801538a <rcl_wait+0x3a>
 80154a2:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80154a6:	b90b      	cbnz	r3, 80154ac <rcl_wait+0x15c>
 80154a8:	692a      	ldr	r2, [r5, #16]
 80154aa:	5193      	str	r3, [r2, r6]
 80154ac:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80154ae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80154b0:	3401      	adds	r4, #1
 80154b2:	42a2      	cmp	r2, r4
 80154b4:	d8e7      	bhi.n	8015486 <rcl_wait+0x136>
 80154b6:	f038 0002 	bics.w	r0, r8, #2
 80154ba:	f040 8090 	bne.w	80155de <rcl_wait+0x28e>
 80154be:	686e      	ldr	r6, [r5, #4]
 80154c0:	4602      	mov	r2, r0
 80154c2:	b91e      	cbnz	r6, 80154cc <rcl_wait+0x17c>
 80154c4:	e00d      	b.n	80154e2 <rcl_wait+0x192>
 80154c6:	3201      	adds	r2, #1
 80154c8:	42b2      	cmp	r2, r6
 80154ca:	d00a      	beq.n	80154e2 <rcl_wait+0x192>
 80154cc:	6899      	ldr	r1, [r3, #8]
 80154ce:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80154d2:	2900      	cmp	r1, #0
 80154d4:	d1f7      	bne.n	80154c6 <rcl_wait+0x176>
 80154d6:	682c      	ldr	r4, [r5, #0]
 80154d8:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 80154dc:	3201      	adds	r2, #1
 80154de:	42b2      	cmp	r2, r6
 80154e0:	d1f4      	bne.n	80154cc <rcl_wait+0x17c>
 80154e2:	68ee      	ldr	r6, [r5, #12]
 80154e4:	2200      	movs	r2, #0
 80154e6:	b91e      	cbnz	r6, 80154f0 <rcl_wait+0x1a0>
 80154e8:	e00d      	b.n	8015506 <rcl_wait+0x1b6>
 80154ea:	3201      	adds	r2, #1
 80154ec:	42b2      	cmp	r2, r6
 80154ee:	d00a      	beq.n	8015506 <rcl_wait+0x1b6>
 80154f0:	6959      	ldr	r1, [r3, #20]
 80154f2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80154f6:	2900      	cmp	r1, #0
 80154f8:	d1f7      	bne.n	80154ea <rcl_wait+0x19a>
 80154fa:	68ac      	ldr	r4, [r5, #8]
 80154fc:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8015500:	3201      	adds	r2, #1
 8015502:	42b2      	cmp	r2, r6
 8015504:	d1f4      	bne.n	80154f0 <rcl_wait+0x1a0>
 8015506:	69ee      	ldr	r6, [r5, #28]
 8015508:	2200      	movs	r2, #0
 801550a:	b91e      	cbnz	r6, 8015514 <rcl_wait+0x1c4>
 801550c:	e00d      	b.n	801552a <rcl_wait+0x1da>
 801550e:	3201      	adds	r2, #1
 8015510:	42b2      	cmp	r2, r6
 8015512:	d00a      	beq.n	801552a <rcl_wait+0x1da>
 8015514:	6a19      	ldr	r1, [r3, #32]
 8015516:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801551a:	2900      	cmp	r1, #0
 801551c:	d1f7      	bne.n	801550e <rcl_wait+0x1be>
 801551e:	69ac      	ldr	r4, [r5, #24]
 8015520:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8015524:	3201      	adds	r2, #1
 8015526:	42b2      	cmp	r2, r6
 8015528:	d1f4      	bne.n	8015514 <rcl_wait+0x1c4>
 801552a:	6a6e      	ldr	r6, [r5, #36]	@ 0x24
 801552c:	2200      	movs	r2, #0
 801552e:	b91e      	cbnz	r6, 8015538 <rcl_wait+0x1e8>
 8015530:	e00d      	b.n	801554e <rcl_wait+0x1fe>
 8015532:	3201      	adds	r2, #1
 8015534:	4296      	cmp	r6, r2
 8015536:	d00a      	beq.n	801554e <rcl_wait+0x1fe>
 8015538:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 801553a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801553e:	2900      	cmp	r1, #0
 8015540:	d1f7      	bne.n	8015532 <rcl_wait+0x1e2>
 8015542:	6a2c      	ldr	r4, [r5, #32]
 8015544:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8015548:	3201      	adds	r2, #1
 801554a:	4296      	cmp	r6, r2
 801554c:	d1f4      	bne.n	8015538 <rcl_wait+0x1e8>
 801554e:	6aee      	ldr	r6, [r5, #44]	@ 0x2c
 8015550:	2200      	movs	r2, #0
 8015552:	b91e      	cbnz	r6, 801555c <rcl_wait+0x20c>
 8015554:	e00d      	b.n	8015572 <rcl_wait+0x222>
 8015556:	3201      	adds	r2, #1
 8015558:	42b2      	cmp	r2, r6
 801555a:	d00a      	beq.n	8015572 <rcl_wait+0x222>
 801555c:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 801555e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8015562:	2900      	cmp	r1, #0
 8015564:	d1f7      	bne.n	8015556 <rcl_wait+0x206>
 8015566:	6aac      	ldr	r4, [r5, #40]	@ 0x28
 8015568:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 801556c:	3201      	adds	r2, #1
 801556e:	42b2      	cmp	r2, r6
 8015570:	d1f4      	bne.n	801555c <rcl_wait+0x20c>
 8015572:	f1b8 0f02 	cmp.w	r8, #2
 8015576:	f47f af08 	bne.w	801538a <rcl_wait+0x3a>
 801557a:	464b      	mov	r3, r9
 801557c:	2b00      	cmp	r3, #0
 801557e:	bf08      	it	eq
 8015580:	2002      	moveq	r0, #2
 8015582:	e702      	b.n	801538a <rcl_wait+0x3a>
 8015584:	2a00      	cmp	r2, #0
 8015586:	d03a      	beq.n	80155fe <rcl_wait+0x2ae>
 8015588:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 801558c:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8015590:	e70e      	b.n	80153b0 <rcl_wait+0x60>
 8015592:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015596:	b00d      	add	sp, #52	@ 0x34
 8015598:	ecbd 8b02 	vpop	{d8}
 801559c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80155a0:	9b04      	ldr	r3, [sp, #16]
 80155a2:	2b01      	cmp	r3, #1
 80155a4:	9b05      	ldr	r3, [sp, #20]
 80155a6:	f173 0300 	sbcs.w	r3, r3, #0
 80155aa:	db24      	blt.n	80155f6 <rcl_wait+0x2a6>
 80155ac:	2f00      	cmp	r7, #0
 80155ae:	bfbc      	itt	lt
 80155b0:	f04f 0800 	movlt.w	r8, #0
 80155b4:	4647      	movlt	r7, r8
 80155b6:	a31e      	add	r3, pc, #120	@ (adr r3, 8015630 <rcl_wait+0x2e0>)
 80155b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80155bc:	4640      	mov	r0, r8
 80155be:	4639      	mov	r1, r7
 80155c0:	f7eb fb2c 	bl	8000c1c <__aeabi_ldivmod>
 80155c4:	a31a      	add	r3, pc, #104	@ (adr r3, 8015630 <rcl_wait+0x2e0>)
 80155c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80155ca:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80155ce:	4640      	mov	r0, r8
 80155d0:	4639      	mov	r1, r7
 80155d2:	f7eb fb23 	bl	8000c1c <__aeabi_ldivmod>
 80155d6:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 80155da:	ab08      	add	r3, sp, #32
 80155dc:	e73e      	b.n	801545c <rcl_wait+0x10c>
 80155de:	2001      	movs	r0, #1
 80155e0:	b00d      	add	sp, #52	@ 0x34
 80155e2:	ecbd 8b02 	vpop	{d8}
 80155e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80155ea:	200b      	movs	r0, #11
 80155ec:	b00d      	add	sp, #52	@ 0x34
 80155ee:	ecbd 8b02 	vpop	{d8}
 80155f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80155f6:	465b      	mov	r3, fp
 80155f8:	2b00      	cmp	r3, #0
 80155fa:	d1d7      	bne.n	80155ac <rcl_wait+0x25c>
 80155fc:	e72e      	b.n	801545c <rcl_wait+0x10c>
 80155fe:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8015602:	430b      	orrs	r3, r1
 8015604:	bf08      	it	eq
 8015606:	4691      	moveq	r9, r2
 8015608:	f43f af21 	beq.w	801544e <rcl_wait+0xfe>
 801560c:	9b04      	ldr	r3, [sp, #16]
 801560e:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8015612:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8015616:	2b01      	cmp	r3, #1
 8015618:	9b05      	ldr	r3, [sp, #20]
 801561a:	f173 0300 	sbcs.w	r3, r3, #0
 801561e:	f04f 0300 	mov.w	r3, #0
 8015622:	4699      	mov	r9, r3
 8015624:	dac2      	bge.n	80155ac <rcl_wait+0x25c>
 8015626:	e719      	b.n	801545c <rcl_wait+0x10c>
 8015628:	ffffffff 	.word	0xffffffff
 801562c:	7fffffff 	.word	0x7fffffff
 8015630:	3b9aca00 	.word	0x3b9aca00
 8015634:	00000000 	.word	0x00000000

08015638 <rcl_action_take_goal_response>:
 8015638:	2800      	cmp	r0, #0
 801563a:	d039      	beq.n	80156b0 <rcl_action_take_goal_response+0x78>
 801563c:	b570      	push	{r4, r5, r6, lr}
 801563e:	4604      	mov	r4, r0
 8015640:	6800      	ldr	r0, [r0, #0]
 8015642:	b380      	cbz	r0, 80156a6 <rcl_action_take_goal_response+0x6e>
 8015644:	460d      	mov	r5, r1
 8015646:	4616      	mov	r6, r2
 8015648:	f7fd ffc2 	bl	80135d0 <rcl_client_is_valid>
 801564c:	b330      	cbz	r0, 801569c <rcl_action_take_goal_response+0x64>
 801564e:	6820      	ldr	r0, [r4, #0]
 8015650:	3004      	adds	r0, #4
 8015652:	f7fd ffbd 	bl	80135d0 <rcl_client_is_valid>
 8015656:	b308      	cbz	r0, 801569c <rcl_action_take_goal_response+0x64>
 8015658:	6820      	ldr	r0, [r4, #0]
 801565a:	3008      	adds	r0, #8
 801565c:	f7fd ffb8 	bl	80135d0 <rcl_client_is_valid>
 8015660:	b1e0      	cbz	r0, 801569c <rcl_action_take_goal_response+0x64>
 8015662:	6820      	ldr	r0, [r4, #0]
 8015664:	300c      	adds	r0, #12
 8015666:	f7ff f801 	bl	801466c <rcl_subscription_is_valid>
 801566a:	b1b8      	cbz	r0, 801569c <rcl_action_take_goal_response+0x64>
 801566c:	6820      	ldr	r0, [r4, #0]
 801566e:	3010      	adds	r0, #16
 8015670:	f7fe fffc 	bl	801466c <rcl_subscription_is_valid>
 8015674:	b190      	cbz	r0, 801569c <rcl_action_take_goal_response+0x64>
 8015676:	b1cd      	cbz	r5, 80156ac <rcl_action_take_goal_response+0x74>
 8015678:	b1c6      	cbz	r6, 80156ac <rcl_action_take_goal_response+0x74>
 801567a:	6820      	ldr	r0, [r4, #0]
 801567c:	4632      	mov	r2, r6
 801567e:	4629      	mov	r1, r5
 8015680:	f7fd ff5e 	bl	8013540 <rcl_take_response>
 8015684:	b148      	cbz	r0, 801569a <rcl_action_take_goal_response+0x62>
 8015686:	280a      	cmp	r0, #10
 8015688:	d007      	beq.n	801569a <rcl_action_take_goal_response+0x62>
 801568a:	f240 12f5 	movw	r2, #501	@ 0x1f5
 801568e:	f640 0337 	movw	r3, #2103	@ 0x837
 8015692:	4290      	cmp	r0, r2
 8015694:	bf0c      	ite	eq
 8015696:	4618      	moveq	r0, r3
 8015698:	2001      	movne	r0, #1
 801569a:	bd70      	pop	{r4, r5, r6, pc}
 801569c:	f7f7 fb94 	bl	800cdc8 <rcutils_reset_error>
 80156a0:	f640 0036 	movw	r0, #2102	@ 0x836
 80156a4:	bd70      	pop	{r4, r5, r6, pc}
 80156a6:	f640 0036 	movw	r0, #2102	@ 0x836
 80156aa:	bd70      	pop	{r4, r5, r6, pc}
 80156ac:	200b      	movs	r0, #11
 80156ae:	bd70      	pop	{r4, r5, r6, pc}
 80156b0:	f640 0036 	movw	r0, #2102	@ 0x836
 80156b4:	4770      	bx	lr
 80156b6:	bf00      	nop

080156b8 <rcl_action_send_result_request>:
 80156b8:	b390      	cbz	r0, 8015720 <rcl_action_send_result_request+0x68>
 80156ba:	b570      	push	{r4, r5, r6, lr}
 80156bc:	4604      	mov	r4, r0
 80156be:	6800      	ldr	r0, [r0, #0]
 80156c0:	b348      	cbz	r0, 8015716 <rcl_action_send_result_request+0x5e>
 80156c2:	460d      	mov	r5, r1
 80156c4:	4616      	mov	r6, r2
 80156c6:	f7fd ff83 	bl	80135d0 <rcl_client_is_valid>
 80156ca:	b1f8      	cbz	r0, 801570c <rcl_action_send_result_request+0x54>
 80156cc:	6820      	ldr	r0, [r4, #0]
 80156ce:	3004      	adds	r0, #4
 80156d0:	f7fd ff7e 	bl	80135d0 <rcl_client_is_valid>
 80156d4:	b1d0      	cbz	r0, 801570c <rcl_action_send_result_request+0x54>
 80156d6:	6820      	ldr	r0, [r4, #0]
 80156d8:	3008      	adds	r0, #8
 80156da:	f7fd ff79 	bl	80135d0 <rcl_client_is_valid>
 80156de:	b1a8      	cbz	r0, 801570c <rcl_action_send_result_request+0x54>
 80156e0:	6820      	ldr	r0, [r4, #0]
 80156e2:	300c      	adds	r0, #12
 80156e4:	f7fe ffc2 	bl	801466c <rcl_subscription_is_valid>
 80156e8:	b180      	cbz	r0, 801570c <rcl_action_send_result_request+0x54>
 80156ea:	6820      	ldr	r0, [r4, #0]
 80156ec:	3010      	adds	r0, #16
 80156ee:	f7fe ffbd 	bl	801466c <rcl_subscription_is_valid>
 80156f2:	b158      	cbz	r0, 801570c <rcl_action_send_result_request+0x54>
 80156f4:	b195      	cbz	r5, 801571c <rcl_action_send_result_request+0x64>
 80156f6:	b18e      	cbz	r6, 801571c <rcl_action_send_result_request+0x64>
 80156f8:	6820      	ldr	r0, [r4, #0]
 80156fa:	4632      	mov	r2, r6
 80156fc:	4629      	mov	r1, r5
 80156fe:	3008      	adds	r0, #8
 8015700:	f7fd fee8 	bl	80134d4 <rcl_send_request>
 8015704:	3800      	subs	r0, #0
 8015706:	bf18      	it	ne
 8015708:	2001      	movne	r0, #1
 801570a:	bd70      	pop	{r4, r5, r6, pc}
 801570c:	f7f7 fb5c 	bl	800cdc8 <rcutils_reset_error>
 8015710:	f640 0036 	movw	r0, #2102	@ 0x836
 8015714:	bd70      	pop	{r4, r5, r6, pc}
 8015716:	f640 0036 	movw	r0, #2102	@ 0x836
 801571a:	bd70      	pop	{r4, r5, r6, pc}
 801571c:	200b      	movs	r0, #11
 801571e:	bd70      	pop	{r4, r5, r6, pc}
 8015720:	f640 0036 	movw	r0, #2102	@ 0x836
 8015724:	4770      	bx	lr
 8015726:	bf00      	nop

08015728 <rcl_action_take_result_response>:
 8015728:	2800      	cmp	r0, #0
 801572a:	d03a      	beq.n	80157a2 <rcl_action_take_result_response+0x7a>
 801572c:	b570      	push	{r4, r5, r6, lr}
 801572e:	4604      	mov	r4, r0
 8015730:	6800      	ldr	r0, [r0, #0]
 8015732:	b388      	cbz	r0, 8015798 <rcl_action_take_result_response+0x70>
 8015734:	460d      	mov	r5, r1
 8015736:	4616      	mov	r6, r2
 8015738:	f7fd ff4a 	bl	80135d0 <rcl_client_is_valid>
 801573c:	b338      	cbz	r0, 801578e <rcl_action_take_result_response+0x66>
 801573e:	6820      	ldr	r0, [r4, #0]
 8015740:	3004      	adds	r0, #4
 8015742:	f7fd ff45 	bl	80135d0 <rcl_client_is_valid>
 8015746:	b310      	cbz	r0, 801578e <rcl_action_take_result_response+0x66>
 8015748:	6820      	ldr	r0, [r4, #0]
 801574a:	3008      	adds	r0, #8
 801574c:	f7fd ff40 	bl	80135d0 <rcl_client_is_valid>
 8015750:	b1e8      	cbz	r0, 801578e <rcl_action_take_result_response+0x66>
 8015752:	6820      	ldr	r0, [r4, #0]
 8015754:	300c      	adds	r0, #12
 8015756:	f7fe ff89 	bl	801466c <rcl_subscription_is_valid>
 801575a:	b1c0      	cbz	r0, 801578e <rcl_action_take_result_response+0x66>
 801575c:	6820      	ldr	r0, [r4, #0]
 801575e:	3010      	adds	r0, #16
 8015760:	f7fe ff84 	bl	801466c <rcl_subscription_is_valid>
 8015764:	b198      	cbz	r0, 801578e <rcl_action_take_result_response+0x66>
 8015766:	b1d5      	cbz	r5, 801579e <rcl_action_take_result_response+0x76>
 8015768:	b1ce      	cbz	r6, 801579e <rcl_action_take_result_response+0x76>
 801576a:	6820      	ldr	r0, [r4, #0]
 801576c:	4632      	mov	r2, r6
 801576e:	4629      	mov	r1, r5
 8015770:	3008      	adds	r0, #8
 8015772:	f7fd fee5 	bl	8013540 <rcl_take_response>
 8015776:	b148      	cbz	r0, 801578c <rcl_action_take_result_response+0x64>
 8015778:	280a      	cmp	r0, #10
 801577a:	d007      	beq.n	801578c <rcl_action_take_result_response+0x64>
 801577c:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8015780:	f640 0337 	movw	r3, #2103	@ 0x837
 8015784:	4290      	cmp	r0, r2
 8015786:	bf0c      	ite	eq
 8015788:	4618      	moveq	r0, r3
 801578a:	2001      	movne	r0, #1
 801578c:	bd70      	pop	{r4, r5, r6, pc}
 801578e:	f7f7 fb1b 	bl	800cdc8 <rcutils_reset_error>
 8015792:	f640 0036 	movw	r0, #2102	@ 0x836
 8015796:	bd70      	pop	{r4, r5, r6, pc}
 8015798:	f640 0036 	movw	r0, #2102	@ 0x836
 801579c:	bd70      	pop	{r4, r5, r6, pc}
 801579e:	200b      	movs	r0, #11
 80157a0:	bd70      	pop	{r4, r5, r6, pc}
 80157a2:	f640 0036 	movw	r0, #2102	@ 0x836
 80157a6:	4770      	bx	lr

080157a8 <rcl_action_take_cancel_response>:
 80157a8:	2800      	cmp	r0, #0
 80157aa:	d03a      	beq.n	8015822 <rcl_action_take_cancel_response+0x7a>
 80157ac:	b570      	push	{r4, r5, r6, lr}
 80157ae:	4604      	mov	r4, r0
 80157b0:	6800      	ldr	r0, [r0, #0]
 80157b2:	b388      	cbz	r0, 8015818 <rcl_action_take_cancel_response+0x70>
 80157b4:	460d      	mov	r5, r1
 80157b6:	4616      	mov	r6, r2
 80157b8:	f7fd ff0a 	bl	80135d0 <rcl_client_is_valid>
 80157bc:	b338      	cbz	r0, 801580e <rcl_action_take_cancel_response+0x66>
 80157be:	6820      	ldr	r0, [r4, #0]
 80157c0:	3004      	adds	r0, #4
 80157c2:	f7fd ff05 	bl	80135d0 <rcl_client_is_valid>
 80157c6:	b310      	cbz	r0, 801580e <rcl_action_take_cancel_response+0x66>
 80157c8:	6820      	ldr	r0, [r4, #0]
 80157ca:	3008      	adds	r0, #8
 80157cc:	f7fd ff00 	bl	80135d0 <rcl_client_is_valid>
 80157d0:	b1e8      	cbz	r0, 801580e <rcl_action_take_cancel_response+0x66>
 80157d2:	6820      	ldr	r0, [r4, #0]
 80157d4:	300c      	adds	r0, #12
 80157d6:	f7fe ff49 	bl	801466c <rcl_subscription_is_valid>
 80157da:	b1c0      	cbz	r0, 801580e <rcl_action_take_cancel_response+0x66>
 80157dc:	6820      	ldr	r0, [r4, #0]
 80157de:	3010      	adds	r0, #16
 80157e0:	f7fe ff44 	bl	801466c <rcl_subscription_is_valid>
 80157e4:	b198      	cbz	r0, 801580e <rcl_action_take_cancel_response+0x66>
 80157e6:	b1d5      	cbz	r5, 801581e <rcl_action_take_cancel_response+0x76>
 80157e8:	b1ce      	cbz	r6, 801581e <rcl_action_take_cancel_response+0x76>
 80157ea:	6820      	ldr	r0, [r4, #0]
 80157ec:	4632      	mov	r2, r6
 80157ee:	4629      	mov	r1, r5
 80157f0:	3004      	adds	r0, #4
 80157f2:	f7fd fea5 	bl	8013540 <rcl_take_response>
 80157f6:	b148      	cbz	r0, 801580c <rcl_action_take_cancel_response+0x64>
 80157f8:	280a      	cmp	r0, #10
 80157fa:	d007      	beq.n	801580c <rcl_action_take_cancel_response+0x64>
 80157fc:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8015800:	f640 0337 	movw	r3, #2103	@ 0x837
 8015804:	4290      	cmp	r0, r2
 8015806:	bf0c      	ite	eq
 8015808:	4618      	moveq	r0, r3
 801580a:	2001      	movne	r0, #1
 801580c:	bd70      	pop	{r4, r5, r6, pc}
 801580e:	f7f7 fadb 	bl	800cdc8 <rcutils_reset_error>
 8015812:	f640 0036 	movw	r0, #2102	@ 0x836
 8015816:	bd70      	pop	{r4, r5, r6, pc}
 8015818:	f640 0036 	movw	r0, #2102	@ 0x836
 801581c:	bd70      	pop	{r4, r5, r6, pc}
 801581e:	200b      	movs	r0, #11
 8015820:	bd70      	pop	{r4, r5, r6, pc}
 8015822:	f640 0036 	movw	r0, #2102	@ 0x836
 8015826:	4770      	bx	lr

08015828 <rcl_action_take_feedback>:
 8015828:	2800      	cmp	r0, #0
 801582a:	d038      	beq.n	801589e <rcl_action_take_feedback+0x76>
 801582c:	b530      	push	{r4, r5, lr}
 801582e:	4604      	mov	r4, r0
 8015830:	6800      	ldr	r0, [r0, #0]
 8015832:	b091      	sub	sp, #68	@ 0x44
 8015834:	b378      	cbz	r0, 8015896 <rcl_action_take_feedback+0x6e>
 8015836:	460d      	mov	r5, r1
 8015838:	f7fd feca 	bl	80135d0 <rcl_client_is_valid>
 801583c:	b328      	cbz	r0, 801588a <rcl_action_take_feedback+0x62>
 801583e:	6820      	ldr	r0, [r4, #0]
 8015840:	3004      	adds	r0, #4
 8015842:	f7fd fec5 	bl	80135d0 <rcl_client_is_valid>
 8015846:	b300      	cbz	r0, 801588a <rcl_action_take_feedback+0x62>
 8015848:	6820      	ldr	r0, [r4, #0]
 801584a:	3008      	adds	r0, #8
 801584c:	f7fd fec0 	bl	80135d0 <rcl_client_is_valid>
 8015850:	b1d8      	cbz	r0, 801588a <rcl_action_take_feedback+0x62>
 8015852:	6820      	ldr	r0, [r4, #0]
 8015854:	300c      	adds	r0, #12
 8015856:	f7fe ff09 	bl	801466c <rcl_subscription_is_valid>
 801585a:	b1b0      	cbz	r0, 801588a <rcl_action_take_feedback+0x62>
 801585c:	6820      	ldr	r0, [r4, #0]
 801585e:	3010      	adds	r0, #16
 8015860:	f7fe ff04 	bl	801466c <rcl_subscription_is_valid>
 8015864:	b188      	cbz	r0, 801588a <rcl_action_take_feedback+0x62>
 8015866:	b1ed      	cbz	r5, 80158a4 <rcl_action_take_feedback+0x7c>
 8015868:	6820      	ldr	r0, [r4, #0]
 801586a:	2300      	movs	r3, #0
 801586c:	466a      	mov	r2, sp
 801586e:	4629      	mov	r1, r5
 8015870:	300c      	adds	r0, #12
 8015872:	f7fe fe9d 	bl	80145b0 <rcl_take>
 8015876:	b160      	cbz	r0, 8015892 <rcl_action_take_feedback+0x6a>
 8015878:	f240 1391 	movw	r3, #401	@ 0x191
 801587c:	4298      	cmp	r0, r3
 801587e:	d014      	beq.n	80158aa <rcl_action_take_feedback+0x82>
 8015880:	280a      	cmp	r0, #10
 8015882:	bf18      	it	ne
 8015884:	2001      	movne	r0, #1
 8015886:	b011      	add	sp, #68	@ 0x44
 8015888:	bd30      	pop	{r4, r5, pc}
 801588a:	f7f7 fa9d 	bl	800cdc8 <rcutils_reset_error>
 801588e:	f640 0036 	movw	r0, #2102	@ 0x836
 8015892:	b011      	add	sp, #68	@ 0x44
 8015894:	bd30      	pop	{r4, r5, pc}
 8015896:	f640 0036 	movw	r0, #2102	@ 0x836
 801589a:	b011      	add	sp, #68	@ 0x44
 801589c:	bd30      	pop	{r4, r5, pc}
 801589e:	f640 0036 	movw	r0, #2102	@ 0x836
 80158a2:	4770      	bx	lr
 80158a4:	200b      	movs	r0, #11
 80158a6:	b011      	add	sp, #68	@ 0x44
 80158a8:	bd30      	pop	{r4, r5, pc}
 80158aa:	f640 0037 	movw	r0, #2103	@ 0x837
 80158ae:	e7f0      	b.n	8015892 <rcl_action_take_feedback+0x6a>

080158b0 <rcl_action_wait_set_add_action_client>:
 80158b0:	2800      	cmp	r0, #0
 80158b2:	d048      	beq.n	8015946 <rcl_action_wait_set_add_action_client+0x96>
 80158b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80158b6:	460c      	mov	r4, r1
 80158b8:	2900      	cmp	r1, #0
 80158ba:	d03c      	beq.n	8015936 <rcl_action_wait_set_add_action_client+0x86>
 80158bc:	4605      	mov	r5, r0
 80158be:	6808      	ldr	r0, [r1, #0]
 80158c0:	2800      	cmp	r0, #0
 80158c2:	d038      	beq.n	8015936 <rcl_action_wait_set_add_action_client+0x86>
 80158c4:	4617      	mov	r7, r2
 80158c6:	461e      	mov	r6, r3
 80158c8:	f7fd fe82 	bl	80135d0 <rcl_client_is_valid>
 80158cc:	b3b0      	cbz	r0, 801593c <rcl_action_wait_set_add_action_client+0x8c>
 80158ce:	6820      	ldr	r0, [r4, #0]
 80158d0:	3004      	adds	r0, #4
 80158d2:	f7fd fe7d 	bl	80135d0 <rcl_client_is_valid>
 80158d6:	b388      	cbz	r0, 801593c <rcl_action_wait_set_add_action_client+0x8c>
 80158d8:	6820      	ldr	r0, [r4, #0]
 80158da:	3008      	adds	r0, #8
 80158dc:	f7fd fe78 	bl	80135d0 <rcl_client_is_valid>
 80158e0:	b360      	cbz	r0, 801593c <rcl_action_wait_set_add_action_client+0x8c>
 80158e2:	6820      	ldr	r0, [r4, #0]
 80158e4:	300c      	adds	r0, #12
 80158e6:	f7fe fec1 	bl	801466c <rcl_subscription_is_valid>
 80158ea:	b338      	cbz	r0, 801593c <rcl_action_wait_set_add_action_client+0x8c>
 80158ec:	6820      	ldr	r0, [r4, #0]
 80158ee:	3010      	adds	r0, #16
 80158f0:	f7fe febc 	bl	801466c <rcl_subscription_is_valid>
 80158f4:	b310      	cbz	r0, 801593c <rcl_action_wait_set_add_action_client+0x8c>
 80158f6:	6821      	ldr	r1, [r4, #0]
 80158f8:	4628      	mov	r0, r5
 80158fa:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 80158fe:	f7ff fccf 	bl	80152a0 <rcl_wait_set_add_client>
 8015902:	b9b8      	cbnz	r0, 8015934 <rcl_action_wait_set_add_action_client+0x84>
 8015904:	6821      	ldr	r1, [r4, #0]
 8015906:	4628      	mov	r0, r5
 8015908:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 801590c:	3104      	adds	r1, #4
 801590e:	f7ff fcc7 	bl	80152a0 <rcl_wait_set_add_client>
 8015912:	b978      	cbnz	r0, 8015934 <rcl_action_wait_set_add_action_client+0x84>
 8015914:	6821      	ldr	r1, [r4, #0]
 8015916:	4628      	mov	r0, r5
 8015918:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 801591c:	3108      	adds	r1, #8
 801591e:	f7ff fcbf 	bl	80152a0 <rcl_wait_set_add_client>
 8015922:	b938      	cbnz	r0, 8015934 <rcl_action_wait_set_add_action_client+0x84>
 8015924:	6821      	ldr	r1, [r4, #0]
 8015926:	4628      	mov	r0, r5
 8015928:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 801592c:	310c      	adds	r1, #12
 801592e:	f7ff f96f 	bl	8014c10 <rcl_wait_set_add_subscription>
 8015932:	b158      	cbz	r0, 801594c <rcl_action_wait_set_add_action_client+0x9c>
 8015934:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015936:	f640 0036 	movw	r0, #2102	@ 0x836
 801593a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801593c:	f7f7 fa44 	bl	800cdc8 <rcutils_reset_error>
 8015940:	f640 0036 	movw	r0, #2102	@ 0x836
 8015944:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015946:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801594a:	4770      	bx	lr
 801594c:	6821      	ldr	r1, [r4, #0]
 801594e:	4628      	mov	r0, r5
 8015950:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 8015954:	3110      	adds	r1, #16
 8015956:	f7ff f95b 	bl	8014c10 <rcl_wait_set_add_subscription>
 801595a:	2800      	cmp	r0, #0
 801595c:	d1ea      	bne.n	8015934 <rcl_action_wait_set_add_action_client+0x84>
 801595e:	b11f      	cbz	r7, 8015968 <rcl_action_wait_set_add_action_client+0xb8>
 8015960:	6823      	ldr	r3, [r4, #0]
 8015962:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 8015966:	603b      	str	r3, [r7, #0]
 8015968:	2e00      	cmp	r6, #0
 801596a:	d0e3      	beq.n	8015934 <rcl_action_wait_set_add_action_client+0x84>
 801596c:	6823      	ldr	r3, [r4, #0]
 801596e:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 8015972:	6033      	str	r3, [r6, #0]
 8015974:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015976:	bf00      	nop

08015978 <rcl_action_client_wait_set_get_entities_ready>:
 8015978:	2800      	cmp	r0, #0
 801597a:	f000 808d 	beq.w	8015a98 <rcl_action_client_wait_set_get_entities_ready+0x120>
 801597e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015982:	460c      	mov	r4, r1
 8015984:	2900      	cmp	r1, #0
 8015986:	d077      	beq.n	8015a78 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8015988:	4605      	mov	r5, r0
 801598a:	6808      	ldr	r0, [r1, #0]
 801598c:	2800      	cmp	r0, #0
 801598e:	d073      	beq.n	8015a78 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8015990:	4616      	mov	r6, r2
 8015992:	461f      	mov	r7, r3
 8015994:	f7fd fe1c 	bl	80135d0 <rcl_client_is_valid>
 8015998:	2800      	cmp	r0, #0
 801599a:	d071      	beq.n	8015a80 <rcl_action_client_wait_set_get_entities_ready+0x108>
 801599c:	6820      	ldr	r0, [r4, #0]
 801599e:	3004      	adds	r0, #4
 80159a0:	f7fd fe16 	bl	80135d0 <rcl_client_is_valid>
 80159a4:	2800      	cmp	r0, #0
 80159a6:	d06b      	beq.n	8015a80 <rcl_action_client_wait_set_get_entities_ready+0x108>
 80159a8:	6820      	ldr	r0, [r4, #0]
 80159aa:	3008      	adds	r0, #8
 80159ac:	f7fd fe10 	bl	80135d0 <rcl_client_is_valid>
 80159b0:	2800      	cmp	r0, #0
 80159b2:	d065      	beq.n	8015a80 <rcl_action_client_wait_set_get_entities_ready+0x108>
 80159b4:	6820      	ldr	r0, [r4, #0]
 80159b6:	300c      	adds	r0, #12
 80159b8:	f7fe fe58 	bl	801466c <rcl_subscription_is_valid>
 80159bc:	2800      	cmp	r0, #0
 80159be:	d05f      	beq.n	8015a80 <rcl_action_client_wait_set_get_entities_ready+0x108>
 80159c0:	6820      	ldr	r0, [r4, #0]
 80159c2:	3010      	adds	r0, #16
 80159c4:	f7fe fe52 	bl	801466c <rcl_subscription_is_valid>
 80159c8:	2800      	cmp	r0, #0
 80159ca:	d059      	beq.n	8015a80 <rcl_action_client_wait_set_get_entities_ready+0x108>
 80159cc:	2e00      	cmp	r6, #0
 80159ce:	d060      	beq.n	8015a92 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 80159d0:	2f00      	cmp	r7, #0
 80159d2:	d05e      	beq.n	8015a92 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 80159d4:	9b06      	ldr	r3, [sp, #24]
 80159d6:	2b00      	cmp	r3, #0
 80159d8:	d05b      	beq.n	8015a92 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 80159da:	9b07      	ldr	r3, [sp, #28]
 80159dc:	2b00      	cmp	r3, #0
 80159de:	d058      	beq.n	8015a92 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 80159e0:	9b08      	ldr	r3, [sp, #32]
 80159e2:	2b00      	cmp	r3, #0
 80159e4:	d055      	beq.n	8015a92 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 80159e6:	6823      	ldr	r3, [r4, #0]
 80159e8:	686a      	ldr	r2, [r5, #4]
 80159ea:	f8d3 11d0 	ldr.w	r1, [r3, #464]	@ 0x1d0
 80159ee:	428a      	cmp	r2, r1
 80159f0:	d94c      	bls.n	8015a8c <rcl_action_client_wait_set_get_entities_ready+0x114>
 80159f2:	f8d3 01d4 	ldr.w	r0, [r3, #468]	@ 0x1d4
 80159f6:	4282      	cmp	r2, r0
 80159f8:	d948      	bls.n	8015a8c <rcl_action_client_wait_set_get_entities_ready+0x114>
 80159fa:	f8d3 41c4 	ldr.w	r4, [r3, #452]	@ 0x1c4
 80159fe:	69ea      	ldr	r2, [r5, #28]
 8015a00:	42a2      	cmp	r2, r4
 8015a02:	d943      	bls.n	8015a8c <rcl_action_client_wait_set_get_entities_ready+0x114>
 8015a04:	f8d3 c1c8 	ldr.w	ip, [r3, #456]	@ 0x1c8
 8015a08:	4562      	cmp	r2, ip
 8015a0a:	d93f      	bls.n	8015a8c <rcl_action_client_wait_set_get_entities_ready+0x114>
 8015a0c:	f8d3 e1cc 	ldr.w	lr, [r3, #460]	@ 0x1cc
 8015a10:	4572      	cmp	r2, lr
 8015a12:	d93b      	bls.n	8015a8c <rcl_action_client_wait_set_get_entities_ready+0x114>
 8015a14:	69aa      	ldr	r2, [r5, #24]
 8015a16:	682d      	ldr	r5, [r5, #0]
 8015a18:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]
 8015a1c:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 8015a20:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 8015a24:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 8015a28:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 8015a2c:	f103 0c0c 	add.w	ip, r3, #12
 8015a30:	eba5 050c 	sub.w	r5, r5, ip
 8015a34:	fab5 f585 	clz	r5, r5
 8015a38:	096d      	lsrs	r5, r5, #5
 8015a3a:	7035      	strb	r5, [r6, #0]
 8015a3c:	f103 0510 	add.w	r5, r3, #16
 8015a40:	1b64      	subs	r4, r4, r5
 8015a42:	fab4 f484 	clz	r4, r4
 8015a46:	0964      	lsrs	r4, r4, #5
 8015a48:	703c      	strb	r4, [r7, #0]
 8015a4a:	eba3 0008 	sub.w	r0, r3, r8
 8015a4e:	1d1c      	adds	r4, r3, #4
 8015a50:	3308      	adds	r3, #8
 8015a52:	1ad3      	subs	r3, r2, r3
 8015a54:	fab0 f080 	clz	r0, r0
 8015a58:	9a06      	ldr	r2, [sp, #24]
 8015a5a:	0940      	lsrs	r0, r0, #5
 8015a5c:	1b09      	subs	r1, r1, r4
 8015a5e:	7010      	strb	r0, [r2, #0]
 8015a60:	fab1 f181 	clz	r1, r1
 8015a64:	9a07      	ldr	r2, [sp, #28]
 8015a66:	0949      	lsrs	r1, r1, #5
 8015a68:	7011      	strb	r1, [r2, #0]
 8015a6a:	fab3 f383 	clz	r3, r3
 8015a6e:	9a08      	ldr	r2, [sp, #32]
 8015a70:	095b      	lsrs	r3, r3, #5
 8015a72:	2000      	movs	r0, #0
 8015a74:	7013      	strb	r3, [r2, #0]
 8015a76:	e001      	b.n	8015a7c <rcl_action_client_wait_set_get_entities_ready+0x104>
 8015a78:	f640 0036 	movw	r0, #2102	@ 0x836
 8015a7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015a80:	f7f7 f9a2 	bl	800cdc8 <rcutils_reset_error>
 8015a84:	f640 0036 	movw	r0, #2102	@ 0x836
 8015a88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015a8c:	2001      	movs	r0, #1
 8015a8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015a92:	200b      	movs	r0, #11
 8015a94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015a98:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015a9c:	4770      	bx	lr
 8015a9e:	bf00      	nop

08015aa0 <rcl_action_take_goal_request>:
 8015aa0:	2800      	cmp	r0, #0
 8015aa2:	d039      	beq.n	8015b18 <rcl_action_take_goal_request+0x78>
 8015aa4:	b570      	push	{r4, r5, r6, lr}
 8015aa6:	4604      	mov	r4, r0
 8015aa8:	6800      	ldr	r0, [r0, #0]
 8015aaa:	b380      	cbz	r0, 8015b0e <rcl_action_take_goal_request+0x6e>
 8015aac:	460d      	mov	r5, r1
 8015aae:	4616      	mov	r6, r2
 8015ab0:	f7fe fc98 	bl	80143e4 <rcl_service_is_valid>
 8015ab4:	b330      	cbz	r0, 8015b04 <rcl_action_take_goal_request+0x64>
 8015ab6:	6820      	ldr	r0, [r4, #0]
 8015ab8:	3004      	adds	r0, #4
 8015aba:	f7fe fc93 	bl	80143e4 <rcl_service_is_valid>
 8015abe:	b308      	cbz	r0, 8015b04 <rcl_action_take_goal_request+0x64>
 8015ac0:	6820      	ldr	r0, [r4, #0]
 8015ac2:	3008      	adds	r0, #8
 8015ac4:	f7fe fc8e 	bl	80143e4 <rcl_service_is_valid>
 8015ac8:	b1e0      	cbz	r0, 8015b04 <rcl_action_take_goal_request+0x64>
 8015aca:	6820      	ldr	r0, [r4, #0]
 8015acc:	300c      	adds	r0, #12
 8015ace:	f7f6 f979 	bl	800bdc4 <rcl_publisher_is_valid>
 8015ad2:	b1b8      	cbz	r0, 8015b04 <rcl_action_take_goal_request+0x64>
 8015ad4:	6820      	ldr	r0, [r4, #0]
 8015ad6:	3010      	adds	r0, #16
 8015ad8:	f7f6 f974 	bl	800bdc4 <rcl_publisher_is_valid>
 8015adc:	b190      	cbz	r0, 8015b04 <rcl_action_take_goal_request+0x64>
 8015ade:	b1cd      	cbz	r5, 8015b14 <rcl_action_take_goal_request+0x74>
 8015ae0:	b1c6      	cbz	r6, 8015b14 <rcl_action_take_goal_request+0x74>
 8015ae2:	6820      	ldr	r0, [r4, #0]
 8015ae4:	4632      	mov	r2, r6
 8015ae6:	4629      	mov	r1, r5
 8015ae8:	f7fe fc24 	bl	8014334 <rcl_take_request>
 8015aec:	b148      	cbz	r0, 8015b02 <rcl_action_take_goal_request+0x62>
 8015aee:	280a      	cmp	r0, #10
 8015af0:	d007      	beq.n	8015b02 <rcl_action_take_goal_request+0x62>
 8015af2:	f240 2259 	movw	r2, #601	@ 0x259
 8015af6:	f640 0399 	movw	r3, #2201	@ 0x899
 8015afa:	4290      	cmp	r0, r2
 8015afc:	bf0c      	ite	eq
 8015afe:	4618      	moveq	r0, r3
 8015b00:	2001      	movne	r0, #1
 8015b02:	bd70      	pop	{r4, r5, r6, pc}
 8015b04:	f7f7 f960 	bl	800cdc8 <rcutils_reset_error>
 8015b08:	f640 0098 	movw	r0, #2200	@ 0x898
 8015b0c:	bd70      	pop	{r4, r5, r6, pc}
 8015b0e:	f640 0098 	movw	r0, #2200	@ 0x898
 8015b12:	bd70      	pop	{r4, r5, r6, pc}
 8015b14:	200b      	movs	r0, #11
 8015b16:	bd70      	pop	{r4, r5, r6, pc}
 8015b18:	f640 0098 	movw	r0, #2200	@ 0x898
 8015b1c:	4770      	bx	lr
 8015b1e:	bf00      	nop

08015b20 <rcl_action_send_goal_response>:
 8015b20:	b390      	cbz	r0, 8015b88 <rcl_action_send_goal_response+0x68>
 8015b22:	b570      	push	{r4, r5, r6, lr}
 8015b24:	4604      	mov	r4, r0
 8015b26:	6800      	ldr	r0, [r0, #0]
 8015b28:	b348      	cbz	r0, 8015b7e <rcl_action_send_goal_response+0x5e>
 8015b2a:	460d      	mov	r5, r1
 8015b2c:	4616      	mov	r6, r2
 8015b2e:	f7fe fc59 	bl	80143e4 <rcl_service_is_valid>
 8015b32:	b1f8      	cbz	r0, 8015b74 <rcl_action_send_goal_response+0x54>
 8015b34:	6820      	ldr	r0, [r4, #0]
 8015b36:	3004      	adds	r0, #4
 8015b38:	f7fe fc54 	bl	80143e4 <rcl_service_is_valid>
 8015b3c:	b1d0      	cbz	r0, 8015b74 <rcl_action_send_goal_response+0x54>
 8015b3e:	6820      	ldr	r0, [r4, #0]
 8015b40:	3008      	adds	r0, #8
 8015b42:	f7fe fc4f 	bl	80143e4 <rcl_service_is_valid>
 8015b46:	b1a8      	cbz	r0, 8015b74 <rcl_action_send_goal_response+0x54>
 8015b48:	6820      	ldr	r0, [r4, #0]
 8015b4a:	300c      	adds	r0, #12
 8015b4c:	f7f6 f93a 	bl	800bdc4 <rcl_publisher_is_valid>
 8015b50:	b180      	cbz	r0, 8015b74 <rcl_action_send_goal_response+0x54>
 8015b52:	6820      	ldr	r0, [r4, #0]
 8015b54:	3010      	adds	r0, #16
 8015b56:	f7f6 f935 	bl	800bdc4 <rcl_publisher_is_valid>
 8015b5a:	b158      	cbz	r0, 8015b74 <rcl_action_send_goal_response+0x54>
 8015b5c:	b195      	cbz	r5, 8015b84 <rcl_action_send_goal_response+0x64>
 8015b5e:	b18e      	cbz	r6, 8015b84 <rcl_action_send_goal_response+0x64>
 8015b60:	6820      	ldr	r0, [r4, #0]
 8015b62:	4632      	mov	r2, r6
 8015b64:	4629      	mov	r1, r5
 8015b66:	f7fe fc25 	bl	80143b4 <rcl_send_response>
 8015b6a:	b110      	cbz	r0, 8015b72 <rcl_action_send_goal_response+0x52>
 8015b6c:	2802      	cmp	r0, #2
 8015b6e:	bf18      	it	ne
 8015b70:	2001      	movne	r0, #1
 8015b72:	bd70      	pop	{r4, r5, r6, pc}
 8015b74:	f7f7 f928 	bl	800cdc8 <rcutils_reset_error>
 8015b78:	f640 0098 	movw	r0, #2200	@ 0x898
 8015b7c:	bd70      	pop	{r4, r5, r6, pc}
 8015b7e:	f640 0098 	movw	r0, #2200	@ 0x898
 8015b82:	bd70      	pop	{r4, r5, r6, pc}
 8015b84:	200b      	movs	r0, #11
 8015b86:	bd70      	pop	{r4, r5, r6, pc}
 8015b88:	f640 0098 	movw	r0, #2200	@ 0x898
 8015b8c:	4770      	bx	lr
 8015b8e:	bf00      	nop

08015b90 <rcl_action_take_result_request>:
 8015b90:	2800      	cmp	r0, #0
 8015b92:	d03a      	beq.n	8015c0a <rcl_action_take_result_request+0x7a>
 8015b94:	b570      	push	{r4, r5, r6, lr}
 8015b96:	4604      	mov	r4, r0
 8015b98:	6800      	ldr	r0, [r0, #0]
 8015b9a:	b388      	cbz	r0, 8015c00 <rcl_action_take_result_request+0x70>
 8015b9c:	460d      	mov	r5, r1
 8015b9e:	4616      	mov	r6, r2
 8015ba0:	f7fe fc20 	bl	80143e4 <rcl_service_is_valid>
 8015ba4:	b338      	cbz	r0, 8015bf6 <rcl_action_take_result_request+0x66>
 8015ba6:	6820      	ldr	r0, [r4, #0]
 8015ba8:	3004      	adds	r0, #4
 8015baa:	f7fe fc1b 	bl	80143e4 <rcl_service_is_valid>
 8015bae:	b310      	cbz	r0, 8015bf6 <rcl_action_take_result_request+0x66>
 8015bb0:	6820      	ldr	r0, [r4, #0]
 8015bb2:	3008      	adds	r0, #8
 8015bb4:	f7fe fc16 	bl	80143e4 <rcl_service_is_valid>
 8015bb8:	b1e8      	cbz	r0, 8015bf6 <rcl_action_take_result_request+0x66>
 8015bba:	6820      	ldr	r0, [r4, #0]
 8015bbc:	300c      	adds	r0, #12
 8015bbe:	f7f6 f901 	bl	800bdc4 <rcl_publisher_is_valid>
 8015bc2:	b1c0      	cbz	r0, 8015bf6 <rcl_action_take_result_request+0x66>
 8015bc4:	6820      	ldr	r0, [r4, #0]
 8015bc6:	3010      	adds	r0, #16
 8015bc8:	f7f6 f8fc 	bl	800bdc4 <rcl_publisher_is_valid>
 8015bcc:	b198      	cbz	r0, 8015bf6 <rcl_action_take_result_request+0x66>
 8015bce:	b1d5      	cbz	r5, 8015c06 <rcl_action_take_result_request+0x76>
 8015bd0:	b1ce      	cbz	r6, 8015c06 <rcl_action_take_result_request+0x76>
 8015bd2:	6820      	ldr	r0, [r4, #0]
 8015bd4:	4632      	mov	r2, r6
 8015bd6:	4629      	mov	r1, r5
 8015bd8:	3008      	adds	r0, #8
 8015bda:	f7fe fbab 	bl	8014334 <rcl_take_request>
 8015bde:	b148      	cbz	r0, 8015bf4 <rcl_action_take_result_request+0x64>
 8015be0:	280a      	cmp	r0, #10
 8015be2:	d007      	beq.n	8015bf4 <rcl_action_take_result_request+0x64>
 8015be4:	f240 2259 	movw	r2, #601	@ 0x259
 8015be8:	f640 0399 	movw	r3, #2201	@ 0x899
 8015bec:	4290      	cmp	r0, r2
 8015bee:	bf0c      	ite	eq
 8015bf0:	4618      	moveq	r0, r3
 8015bf2:	2001      	movne	r0, #1
 8015bf4:	bd70      	pop	{r4, r5, r6, pc}
 8015bf6:	f7f7 f8e7 	bl	800cdc8 <rcutils_reset_error>
 8015bfa:	f640 0098 	movw	r0, #2200	@ 0x898
 8015bfe:	bd70      	pop	{r4, r5, r6, pc}
 8015c00:	f640 0098 	movw	r0, #2200	@ 0x898
 8015c04:	bd70      	pop	{r4, r5, r6, pc}
 8015c06:	200b      	movs	r0, #11
 8015c08:	bd70      	pop	{r4, r5, r6, pc}
 8015c0a:	f640 0098 	movw	r0, #2200	@ 0x898
 8015c0e:	4770      	bx	lr

08015c10 <rcl_action_take_cancel_request>:
 8015c10:	2800      	cmp	r0, #0
 8015c12:	d03a      	beq.n	8015c8a <rcl_action_take_cancel_request+0x7a>
 8015c14:	b570      	push	{r4, r5, r6, lr}
 8015c16:	4604      	mov	r4, r0
 8015c18:	6800      	ldr	r0, [r0, #0]
 8015c1a:	b388      	cbz	r0, 8015c80 <rcl_action_take_cancel_request+0x70>
 8015c1c:	460d      	mov	r5, r1
 8015c1e:	4616      	mov	r6, r2
 8015c20:	f7fe fbe0 	bl	80143e4 <rcl_service_is_valid>
 8015c24:	b338      	cbz	r0, 8015c76 <rcl_action_take_cancel_request+0x66>
 8015c26:	6820      	ldr	r0, [r4, #0]
 8015c28:	3004      	adds	r0, #4
 8015c2a:	f7fe fbdb 	bl	80143e4 <rcl_service_is_valid>
 8015c2e:	b310      	cbz	r0, 8015c76 <rcl_action_take_cancel_request+0x66>
 8015c30:	6820      	ldr	r0, [r4, #0]
 8015c32:	3008      	adds	r0, #8
 8015c34:	f7fe fbd6 	bl	80143e4 <rcl_service_is_valid>
 8015c38:	b1e8      	cbz	r0, 8015c76 <rcl_action_take_cancel_request+0x66>
 8015c3a:	6820      	ldr	r0, [r4, #0]
 8015c3c:	300c      	adds	r0, #12
 8015c3e:	f7f6 f8c1 	bl	800bdc4 <rcl_publisher_is_valid>
 8015c42:	b1c0      	cbz	r0, 8015c76 <rcl_action_take_cancel_request+0x66>
 8015c44:	6820      	ldr	r0, [r4, #0]
 8015c46:	3010      	adds	r0, #16
 8015c48:	f7f6 f8bc 	bl	800bdc4 <rcl_publisher_is_valid>
 8015c4c:	b198      	cbz	r0, 8015c76 <rcl_action_take_cancel_request+0x66>
 8015c4e:	b1d5      	cbz	r5, 8015c86 <rcl_action_take_cancel_request+0x76>
 8015c50:	b1ce      	cbz	r6, 8015c86 <rcl_action_take_cancel_request+0x76>
 8015c52:	6820      	ldr	r0, [r4, #0]
 8015c54:	4632      	mov	r2, r6
 8015c56:	4629      	mov	r1, r5
 8015c58:	3004      	adds	r0, #4
 8015c5a:	f7fe fb6b 	bl	8014334 <rcl_take_request>
 8015c5e:	b148      	cbz	r0, 8015c74 <rcl_action_take_cancel_request+0x64>
 8015c60:	280a      	cmp	r0, #10
 8015c62:	d007      	beq.n	8015c74 <rcl_action_take_cancel_request+0x64>
 8015c64:	f240 2259 	movw	r2, #601	@ 0x259
 8015c68:	f640 0399 	movw	r3, #2201	@ 0x899
 8015c6c:	4290      	cmp	r0, r2
 8015c6e:	bf0c      	ite	eq
 8015c70:	4618      	moveq	r0, r3
 8015c72:	2001      	movne	r0, #1
 8015c74:	bd70      	pop	{r4, r5, r6, pc}
 8015c76:	f7f7 f8a7 	bl	800cdc8 <rcutils_reset_error>
 8015c7a:	f640 0098 	movw	r0, #2200	@ 0x898
 8015c7e:	bd70      	pop	{r4, r5, r6, pc}
 8015c80:	f640 0098 	movw	r0, #2200	@ 0x898
 8015c84:	bd70      	pop	{r4, r5, r6, pc}
 8015c86:	200b      	movs	r0, #11
 8015c88:	bd70      	pop	{r4, r5, r6, pc}
 8015c8a:	f640 0098 	movw	r0, #2200	@ 0x898
 8015c8e:	4770      	bx	lr

08015c90 <rcl_action_send_cancel_response>:
 8015c90:	b398      	cbz	r0, 8015cfa <rcl_action_send_cancel_response+0x6a>
 8015c92:	b570      	push	{r4, r5, r6, lr}
 8015c94:	4604      	mov	r4, r0
 8015c96:	6800      	ldr	r0, [r0, #0]
 8015c98:	b350      	cbz	r0, 8015cf0 <rcl_action_send_cancel_response+0x60>
 8015c9a:	460d      	mov	r5, r1
 8015c9c:	4616      	mov	r6, r2
 8015c9e:	f7fe fba1 	bl	80143e4 <rcl_service_is_valid>
 8015ca2:	b300      	cbz	r0, 8015ce6 <rcl_action_send_cancel_response+0x56>
 8015ca4:	6820      	ldr	r0, [r4, #0]
 8015ca6:	3004      	adds	r0, #4
 8015ca8:	f7fe fb9c 	bl	80143e4 <rcl_service_is_valid>
 8015cac:	b1d8      	cbz	r0, 8015ce6 <rcl_action_send_cancel_response+0x56>
 8015cae:	6820      	ldr	r0, [r4, #0]
 8015cb0:	3008      	adds	r0, #8
 8015cb2:	f7fe fb97 	bl	80143e4 <rcl_service_is_valid>
 8015cb6:	b1b0      	cbz	r0, 8015ce6 <rcl_action_send_cancel_response+0x56>
 8015cb8:	6820      	ldr	r0, [r4, #0]
 8015cba:	300c      	adds	r0, #12
 8015cbc:	f7f6 f882 	bl	800bdc4 <rcl_publisher_is_valid>
 8015cc0:	b188      	cbz	r0, 8015ce6 <rcl_action_send_cancel_response+0x56>
 8015cc2:	6820      	ldr	r0, [r4, #0]
 8015cc4:	3010      	adds	r0, #16
 8015cc6:	f7f6 f87d 	bl	800bdc4 <rcl_publisher_is_valid>
 8015cca:	b160      	cbz	r0, 8015ce6 <rcl_action_send_cancel_response+0x56>
 8015ccc:	b19d      	cbz	r5, 8015cf6 <rcl_action_send_cancel_response+0x66>
 8015cce:	b196      	cbz	r6, 8015cf6 <rcl_action_send_cancel_response+0x66>
 8015cd0:	6820      	ldr	r0, [r4, #0]
 8015cd2:	4632      	mov	r2, r6
 8015cd4:	4629      	mov	r1, r5
 8015cd6:	3004      	adds	r0, #4
 8015cd8:	f7fe fb6c 	bl	80143b4 <rcl_send_response>
 8015cdc:	b110      	cbz	r0, 8015ce4 <rcl_action_send_cancel_response+0x54>
 8015cde:	2802      	cmp	r0, #2
 8015ce0:	bf18      	it	ne
 8015ce2:	2001      	movne	r0, #1
 8015ce4:	bd70      	pop	{r4, r5, r6, pc}
 8015ce6:	f7f7 f86f 	bl	800cdc8 <rcutils_reset_error>
 8015cea:	f640 0098 	movw	r0, #2200	@ 0x898
 8015cee:	bd70      	pop	{r4, r5, r6, pc}
 8015cf0:	f640 0098 	movw	r0, #2200	@ 0x898
 8015cf4:	bd70      	pop	{r4, r5, r6, pc}
 8015cf6:	200b      	movs	r0, #11
 8015cf8:	bd70      	pop	{r4, r5, r6, pc}
 8015cfa:	f640 0098 	movw	r0, #2200	@ 0x898
 8015cfe:	4770      	bx	lr

08015d00 <rcl_action_wait_set_add_action_server>:
 8015d00:	2800      	cmp	r0, #0
 8015d02:	d04d      	beq.n	8015da0 <rcl_action_wait_set_add_action_server+0xa0>
 8015d04:	b570      	push	{r4, r5, r6, lr}
 8015d06:	460c      	mov	r4, r1
 8015d08:	b159      	cbz	r1, 8015d22 <rcl_action_wait_set_add_action_server+0x22>
 8015d0a:	4605      	mov	r5, r0
 8015d0c:	6808      	ldr	r0, [r1, #0]
 8015d0e:	b140      	cbz	r0, 8015d22 <rcl_action_wait_set_add_action_server+0x22>
 8015d10:	4616      	mov	r6, r2
 8015d12:	f7fe fb67 	bl	80143e4 <rcl_service_is_valid>
 8015d16:	b120      	cbz	r0, 8015d22 <rcl_action_wait_set_add_action_server+0x22>
 8015d18:	6820      	ldr	r0, [r4, #0]
 8015d1a:	3004      	adds	r0, #4
 8015d1c:	f7fe fb62 	bl	80143e4 <rcl_service_is_valid>
 8015d20:	b910      	cbnz	r0, 8015d28 <rcl_action_wait_set_add_action_server+0x28>
 8015d22:	f640 0098 	movw	r0, #2200	@ 0x898
 8015d26:	bd70      	pop	{r4, r5, r6, pc}
 8015d28:	6820      	ldr	r0, [r4, #0]
 8015d2a:	3008      	adds	r0, #8
 8015d2c:	f7fe fb5a 	bl	80143e4 <rcl_service_is_valid>
 8015d30:	2800      	cmp	r0, #0
 8015d32:	d0f6      	beq.n	8015d22 <rcl_action_wait_set_add_action_server+0x22>
 8015d34:	6820      	ldr	r0, [r4, #0]
 8015d36:	300c      	adds	r0, #12
 8015d38:	f7f6 f85c 	bl	800bdf4 <rcl_publisher_is_valid_except_context>
 8015d3c:	2800      	cmp	r0, #0
 8015d3e:	d0f0      	beq.n	8015d22 <rcl_action_wait_set_add_action_server+0x22>
 8015d40:	6820      	ldr	r0, [r4, #0]
 8015d42:	3010      	adds	r0, #16
 8015d44:	f7f6 f856 	bl	800bdf4 <rcl_publisher_is_valid_except_context>
 8015d48:	2800      	cmp	r0, #0
 8015d4a:	d0ea      	beq.n	8015d22 <rcl_action_wait_set_add_action_server+0x22>
 8015d4c:	6821      	ldr	r1, [r4, #0]
 8015d4e:	4628      	mov	r0, r5
 8015d50:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 8015d54:	f7ff fad0 	bl	80152f8 <rcl_wait_set_add_service>
 8015d58:	2800      	cmp	r0, #0
 8015d5a:	d1e4      	bne.n	8015d26 <rcl_action_wait_set_add_action_server+0x26>
 8015d5c:	6821      	ldr	r1, [r4, #0]
 8015d5e:	4628      	mov	r0, r5
 8015d60:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 8015d64:	3104      	adds	r1, #4
 8015d66:	f7ff fac7 	bl	80152f8 <rcl_wait_set_add_service>
 8015d6a:	2800      	cmp	r0, #0
 8015d6c:	d1db      	bne.n	8015d26 <rcl_action_wait_set_add_action_server+0x26>
 8015d6e:	6821      	ldr	r1, [r4, #0]
 8015d70:	4628      	mov	r0, r5
 8015d72:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 8015d76:	3108      	adds	r1, #8
 8015d78:	f7ff fabe 	bl	80152f8 <rcl_wait_set_add_service>
 8015d7c:	2800      	cmp	r0, #0
 8015d7e:	d1d2      	bne.n	8015d26 <rcl_action_wait_set_add_action_server+0x26>
 8015d80:	6821      	ldr	r1, [r4, #0]
 8015d82:	4628      	mov	r0, r5
 8015d84:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 8015d88:	3114      	adds	r1, #20
 8015d8a:	f7ff fa59 	bl	8015240 <rcl_wait_set_add_timer>
 8015d8e:	2800      	cmp	r0, #0
 8015d90:	d1c9      	bne.n	8015d26 <rcl_action_wait_set_add_action_server+0x26>
 8015d92:	2e00      	cmp	r6, #0
 8015d94:	d0c7      	beq.n	8015d26 <rcl_action_wait_set_add_action_server+0x26>
 8015d96:	6823      	ldr	r3, [r4, #0]
 8015d98:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 8015d9c:	6033      	str	r3, [r6, #0]
 8015d9e:	bd70      	pop	{r4, r5, r6, pc}
 8015da0:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015da4:	4770      	bx	lr
 8015da6:	bf00      	nop

08015da8 <rcl_action_server_wait_set_get_entities_ready>:
 8015da8:	2800      	cmp	r0, #0
 8015daa:	d05a      	beq.n	8015e62 <rcl_action_server_wait_set_get_entities_ready+0xba>
 8015dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015dae:	460c      	mov	r4, r1
 8015db0:	b161      	cbz	r1, 8015dcc <rcl_action_server_wait_set_get_entities_ready+0x24>
 8015db2:	4605      	mov	r5, r0
 8015db4:	6808      	ldr	r0, [r1, #0]
 8015db6:	b148      	cbz	r0, 8015dcc <rcl_action_server_wait_set_get_entities_ready+0x24>
 8015db8:	4616      	mov	r6, r2
 8015dba:	461f      	mov	r7, r3
 8015dbc:	f7fe fb12 	bl	80143e4 <rcl_service_is_valid>
 8015dc0:	b120      	cbz	r0, 8015dcc <rcl_action_server_wait_set_get_entities_ready+0x24>
 8015dc2:	6820      	ldr	r0, [r4, #0]
 8015dc4:	3004      	adds	r0, #4
 8015dc6:	f7fe fb0d 	bl	80143e4 <rcl_service_is_valid>
 8015dca:	b910      	cbnz	r0, 8015dd2 <rcl_action_server_wait_set_get_entities_ready+0x2a>
 8015dcc:	f640 0098 	movw	r0, #2200	@ 0x898
 8015dd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015dd2:	6820      	ldr	r0, [r4, #0]
 8015dd4:	3008      	adds	r0, #8
 8015dd6:	f7fe fb05 	bl	80143e4 <rcl_service_is_valid>
 8015dda:	2800      	cmp	r0, #0
 8015ddc:	d0f6      	beq.n	8015dcc <rcl_action_server_wait_set_get_entities_ready+0x24>
 8015dde:	6820      	ldr	r0, [r4, #0]
 8015de0:	300c      	adds	r0, #12
 8015de2:	f7f6 f807 	bl	800bdf4 <rcl_publisher_is_valid_except_context>
 8015de6:	2800      	cmp	r0, #0
 8015de8:	d0f0      	beq.n	8015dcc <rcl_action_server_wait_set_get_entities_ready+0x24>
 8015dea:	6820      	ldr	r0, [r4, #0]
 8015dec:	3010      	adds	r0, #16
 8015dee:	f7f6 f801 	bl	800bdf4 <rcl_publisher_is_valid_except_context>
 8015df2:	2800      	cmp	r0, #0
 8015df4:	d0ea      	beq.n	8015dcc <rcl_action_server_wait_set_get_entities_ready+0x24>
 8015df6:	b3be      	cbz	r6, 8015e68 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8015df8:	b3b7      	cbz	r7, 8015e68 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8015dfa:	9b06      	ldr	r3, [sp, #24]
 8015dfc:	b3a3      	cbz	r3, 8015e68 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8015dfe:	9b07      	ldr	r3, [sp, #28]
 8015e00:	b393      	cbz	r3, 8015e68 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8015e02:	6821      	ldr	r1, [r4, #0]
 8015e04:	692a      	ldr	r2, [r5, #16]
 8015e06:	6a2c      	ldr	r4, [r5, #32]
 8015e08:	f8d1 51e8 	ldr.w	r5, [r1, #488]	@ 0x1e8
 8015e0c:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 8015e10:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 8015e14:	f8d1 01e4 	ldr.w	r0, [r1, #484]	@ 0x1e4
 8015e18:	f8d1 51dc 	ldr.w	r5, [r1, #476]	@ 0x1dc
 8015e1c:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8015e20:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8015e24:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 8015e28:	1a64      	subs	r4, r4, r1
 8015e2a:	fab4 f484 	clz	r4, r4
 8015e2e:	0964      	lsrs	r4, r4, #5
 8015e30:	7034      	strb	r4, [r6, #0]
 8015e32:	1d0c      	adds	r4, r1, #4
 8015e34:	1b1b      	subs	r3, r3, r4
 8015e36:	fab3 f383 	clz	r3, r3
 8015e3a:	095b      	lsrs	r3, r3, #5
 8015e3c:	f101 0408 	add.w	r4, r1, #8
 8015e40:	703b      	strb	r3, [r7, #0]
 8015e42:	f101 0314 	add.w	r3, r1, #20
 8015e46:	1b01      	subs	r1, r0, r4
 8015e48:	1ad3      	subs	r3, r2, r3
 8015e4a:	fab1 f181 	clz	r1, r1
 8015e4e:	9a06      	ldr	r2, [sp, #24]
 8015e50:	0949      	lsrs	r1, r1, #5
 8015e52:	7011      	strb	r1, [r2, #0]
 8015e54:	fab3 f383 	clz	r3, r3
 8015e58:	9a07      	ldr	r2, [sp, #28]
 8015e5a:	095b      	lsrs	r3, r3, #5
 8015e5c:	2000      	movs	r0, #0
 8015e5e:	7013      	strb	r3, [r2, #0]
 8015e60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015e62:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015e66:	4770      	bx	lr
 8015e68:	200b      	movs	r0, #11
 8015e6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08015e6c <_execute_event_handler>:
 8015e6c:	2002      	movs	r0, #2
 8015e6e:	4770      	bx	lr

08015e70 <_cancel_goal_event_handler>:
 8015e70:	2003      	movs	r0, #3
 8015e72:	4770      	bx	lr

08015e74 <_succeed_event_handler>:
 8015e74:	2004      	movs	r0, #4
 8015e76:	4770      	bx	lr

08015e78 <_abort_event_handler>:
 8015e78:	2006      	movs	r0, #6
 8015e7a:	4770      	bx	lr

08015e7c <_canceled_event_handler>:
 8015e7c:	2005      	movs	r0, #5
 8015e7e:	4770      	bx	lr

08015e80 <rcl_action_transition_goal_state>:
 8015e80:	b2c2      	uxtb	r2, r0
 8015e82:	2a06      	cmp	r2, #6
 8015e84:	d80c      	bhi.n	8015ea0 <rcl_action_transition_goal_state+0x20>
 8015e86:	2904      	cmp	r1, #4
 8015e88:	d80a      	bhi.n	8015ea0 <rcl_action_transition_goal_state+0x20>
 8015e8a:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 8015e8e:	b410      	push	{r4}
 8015e90:	1853      	adds	r3, r2, r1
 8015e92:	4c06      	ldr	r4, [pc, #24]	@ (8015eac <rcl_action_transition_goal_state+0x2c>)
 8015e94:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8015e98:	b123      	cbz	r3, 8015ea4 <rcl_action_transition_goal_state+0x24>
 8015e9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015e9e:	4718      	bx	r3
 8015ea0:	2000      	movs	r0, #0
 8015ea2:	4770      	bx	lr
 8015ea4:	2000      	movs	r0, #0
 8015ea6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015eaa:	4770      	bx	lr
 8015eac:	0801dbfc 	.word	0x0801dbfc

08015eb0 <rcl_action_get_zero_initialized_cancel_response>:
 8015eb0:	b510      	push	{r4, lr}
 8015eb2:	4c07      	ldr	r4, [pc, #28]	@ (8015ed0 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 8015eb4:	4686      	mov	lr, r0
 8015eb6:	4684      	mov	ip, r0
 8015eb8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015eba:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015ebe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015ec0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015ec4:	6823      	ldr	r3, [r4, #0]
 8015ec6:	f8cc 3000 	str.w	r3, [ip]
 8015eca:	4670      	mov	r0, lr
 8015ecc:	bd10      	pop	{r4, pc}
 8015ece:	bf00      	nop
 8015ed0:	0801dc88 	.word	0x0801dc88

08015ed4 <rclc_action_send_result_request>:
 8015ed4:	b1d0      	cbz	r0, 8015f0c <rclc_action_send_result_request+0x38>
 8015ed6:	b500      	push	{lr}
 8015ed8:	4684      	mov	ip, r0
 8015eda:	b087      	sub	sp, #28
 8015edc:	f8d0 0009 	ldr.w	r0, [r0, #9]
 8015ee0:	f8dc 100d 	ldr.w	r1, [ip, #13]
 8015ee4:	f8dc 2011 	ldr.w	r2, [ip, #17]
 8015ee8:	f8dc 3015 	ldr.w	r3, [ip, #21]
 8015eec:	f10d 0e08 	add.w	lr, sp, #8
 8015ef0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8015ef4:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8015ef8:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 8015efc:	a902      	add	r1, sp, #8
 8015efe:	3010      	adds	r0, #16
 8015f00:	f7ff fbda 	bl	80156b8 <rcl_action_send_result_request>
 8015f04:	b920      	cbnz	r0, 8015f10 <rclc_action_send_result_request+0x3c>
 8015f06:	b007      	add	sp, #28
 8015f08:	f85d fb04 	ldr.w	pc, [sp], #4
 8015f0c:	200b      	movs	r0, #11
 8015f0e:	4770      	bx	lr
 8015f10:	9001      	str	r0, [sp, #4]
 8015f12:	f7f6 ff59 	bl	800cdc8 <rcutils_reset_error>
 8015f16:	9801      	ldr	r0, [sp, #4]
 8015f18:	b007      	add	sp, #28
 8015f1a:	f85d fb04 	ldr.w	pc, [sp], #4
 8015f1e:	bf00      	nop

08015f20 <rclc_action_take_goal_handle>:
 8015f20:	b160      	cbz	r0, 8015f3c <rclc_action_take_goal_handle+0x1c>
 8015f22:	6883      	ldr	r3, [r0, #8]
 8015f24:	b143      	cbz	r3, 8015f38 <rclc_action_take_goal_handle+0x18>
 8015f26:	6819      	ldr	r1, [r3, #0]
 8015f28:	6081      	str	r1, [r0, #8]
 8015f2a:	2200      	movs	r2, #0
 8015f2c:	721a      	strb	r2, [r3, #8]
 8015f2e:	68c1      	ldr	r1, [r0, #12]
 8015f30:	6019      	str	r1, [r3, #0]
 8015f32:	621a      	str	r2, [r3, #32]
 8015f34:	849a      	strh	r2, [r3, #36]	@ 0x24
 8015f36:	60c3      	str	r3, [r0, #12]
 8015f38:	4618      	mov	r0, r3
 8015f3a:	4770      	bx	lr
 8015f3c:	4603      	mov	r3, r0
 8015f3e:	e7fb      	b.n	8015f38 <rclc_action_take_goal_handle+0x18>

08015f40 <rclc_action_remove_used_goal_handle>:
 8015f40:	b180      	cbz	r0, 8015f64 <rclc_action_remove_used_goal_handle+0x24>
 8015f42:	b179      	cbz	r1, 8015f64 <rclc_action_remove_used_goal_handle+0x24>
 8015f44:	68c3      	ldr	r3, [r0, #12]
 8015f46:	4299      	cmp	r1, r3
 8015f48:	d00d      	beq.n	8015f66 <rclc_action_remove_used_goal_handle+0x26>
 8015f4a:	b12b      	cbz	r3, 8015f58 <rclc_action_remove_used_goal_handle+0x18>
 8015f4c:	681a      	ldr	r2, [r3, #0]
 8015f4e:	4291      	cmp	r1, r2
 8015f50:	d003      	beq.n	8015f5a <rclc_action_remove_used_goal_handle+0x1a>
 8015f52:	4613      	mov	r3, r2
 8015f54:	2b00      	cmp	r3, #0
 8015f56:	d1f9      	bne.n	8015f4c <rclc_action_remove_used_goal_handle+0xc>
 8015f58:	4770      	bx	lr
 8015f5a:	680a      	ldr	r2, [r1, #0]
 8015f5c:	601a      	str	r2, [r3, #0]
 8015f5e:	6883      	ldr	r3, [r0, #8]
 8015f60:	600b      	str	r3, [r1, #0]
 8015f62:	6081      	str	r1, [r0, #8]
 8015f64:	4770      	bx	lr
 8015f66:	680b      	ldr	r3, [r1, #0]
 8015f68:	60c3      	str	r3, [r0, #12]
 8015f6a:	e7f8      	b.n	8015f5e <rclc_action_remove_used_goal_handle+0x1e>

08015f6c <rclc_action_find_goal_handle_by_uuid>:
 8015f6c:	b538      	push	{r3, r4, r5, lr}
 8015f6e:	b180      	cbz	r0, 8015f92 <rclc_action_find_goal_handle_by_uuid+0x26>
 8015f70:	460d      	mov	r5, r1
 8015f72:	b181      	cbz	r1, 8015f96 <rclc_action_find_goal_handle_by_uuid+0x2a>
 8015f74:	68c4      	ldr	r4, [r0, #12]
 8015f76:	b914      	cbnz	r4, 8015f7e <rclc_action_find_goal_handle_by_uuid+0x12>
 8015f78:	e009      	b.n	8015f8e <rclc_action_find_goal_handle_by_uuid+0x22>
 8015f7a:	6824      	ldr	r4, [r4, #0]
 8015f7c:	b13c      	cbz	r4, 8015f8e <rclc_action_find_goal_handle_by_uuid+0x22>
 8015f7e:	f104 0009 	add.w	r0, r4, #9
 8015f82:	2210      	movs	r2, #16
 8015f84:	4629      	mov	r1, r5
 8015f86:	f005 f9e1 	bl	801b34c <memcmp>
 8015f8a:	2800      	cmp	r0, #0
 8015f8c:	d1f5      	bne.n	8015f7a <rclc_action_find_goal_handle_by_uuid+0xe>
 8015f8e:	4620      	mov	r0, r4
 8015f90:	bd38      	pop	{r3, r4, r5, pc}
 8015f92:	4604      	mov	r4, r0
 8015f94:	e7fb      	b.n	8015f8e <rclc_action_find_goal_handle_by_uuid+0x22>
 8015f96:	460c      	mov	r4, r1
 8015f98:	e7f9      	b.n	8015f8e <rclc_action_find_goal_handle_by_uuid+0x22>
 8015f9a:	bf00      	nop

08015f9c <rclc_action_find_first_handle_by_status>:
 8015f9c:	b140      	cbz	r0, 8015fb0 <rclc_action_find_first_handle_by_status+0x14>
 8015f9e:	68c0      	ldr	r0, [r0, #12]
 8015fa0:	b910      	cbnz	r0, 8015fa8 <rclc_action_find_first_handle_by_status+0xc>
 8015fa2:	e005      	b.n	8015fb0 <rclc_action_find_first_handle_by_status+0x14>
 8015fa4:	6800      	ldr	r0, [r0, #0]
 8015fa6:	b118      	cbz	r0, 8015fb0 <rclc_action_find_first_handle_by_status+0x14>
 8015fa8:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8015fac:	428b      	cmp	r3, r1
 8015fae:	d1f9      	bne.n	8015fa4 <rclc_action_find_first_handle_by_status+0x8>
 8015fb0:	4770      	bx	lr
 8015fb2:	bf00      	nop

08015fb4 <rclc_action_find_first_terminated_handle>:
 8015fb4:	b140      	cbz	r0, 8015fc8 <rclc_action_find_first_terminated_handle+0x14>
 8015fb6:	68c0      	ldr	r0, [r0, #12]
 8015fb8:	b910      	cbnz	r0, 8015fc0 <rclc_action_find_first_terminated_handle+0xc>
 8015fba:	e005      	b.n	8015fc8 <rclc_action_find_first_terminated_handle+0x14>
 8015fbc:	6800      	ldr	r0, [r0, #0]
 8015fbe:	b118      	cbz	r0, 8015fc8 <rclc_action_find_first_terminated_handle+0x14>
 8015fc0:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8015fc4:	2b03      	cmp	r3, #3
 8015fc6:	ddf9      	ble.n	8015fbc <rclc_action_find_first_terminated_handle+0x8>
 8015fc8:	4770      	bx	lr
 8015fca:	bf00      	nop

08015fcc <rclc_action_find_handle_by_goal_request_sequence_number>:
 8015fcc:	b170      	cbz	r0, 8015fec <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8015fce:	68c0      	ldr	r0, [r0, #12]
 8015fd0:	b160      	cbz	r0, 8015fec <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8015fd2:	b410      	push	{r4}
 8015fd4:	e001      	b.n	8015fda <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 8015fd6:	6800      	ldr	r0, [r0, #0]
 8015fd8:	b128      	cbz	r0, 8015fe6 <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 8015fda:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 8015fde:	4299      	cmp	r1, r3
 8015fe0:	bf08      	it	eq
 8015fe2:	4294      	cmpeq	r4, r2
 8015fe4:	d1f7      	bne.n	8015fd6 <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 8015fe6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015fea:	4770      	bx	lr
 8015fec:	4770      	bx	lr
 8015fee:	bf00      	nop

08015ff0 <rclc_action_find_handle_by_result_request_sequence_number>:
 8015ff0:	b170      	cbz	r0, 8016010 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8015ff2:	68c0      	ldr	r0, [r0, #12]
 8015ff4:	b160      	cbz	r0, 8016010 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8015ff6:	b410      	push	{r4}
 8015ff8:	e001      	b.n	8015ffe <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 8015ffa:	6800      	ldr	r0, [r0, #0]
 8015ffc:	b128      	cbz	r0, 801600a <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 8015ffe:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 8016002:	4299      	cmp	r1, r3
 8016004:	bf08      	it	eq
 8016006:	4294      	cmpeq	r4, r2
 8016008:	d1f7      	bne.n	8015ffa <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 801600a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801600e:	4770      	bx	lr
 8016010:	4770      	bx	lr
 8016012:	bf00      	nop

08016014 <rclc_action_find_handle_by_cancel_request_sequence_number>:
 8016014:	b170      	cbz	r0, 8016034 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8016016:	68c0      	ldr	r0, [r0, #12]
 8016018:	b160      	cbz	r0, 8016034 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 801601a:	b410      	push	{r4}
 801601c:	e001      	b.n	8016022 <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 801601e:	6800      	ldr	r0, [r0, #0]
 8016020:	b128      	cbz	r0, 801602e <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 8016022:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 8016026:	4299      	cmp	r1, r3
 8016028:	bf08      	it	eq
 801602a:	4294      	cmpeq	r4, r2
 801602c:	d1f7      	bne.n	801601e <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 801602e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016032:	4770      	bx	lr
 8016034:	4770      	bx	lr
 8016036:	bf00      	nop

08016038 <rclc_action_find_first_handle_with_goal_response>:
 8016038:	b140      	cbz	r0, 801604c <rclc_action_find_first_handle_with_goal_response+0x14>
 801603a:	68c0      	ldr	r0, [r0, #12]
 801603c:	b910      	cbnz	r0, 8016044 <rclc_action_find_first_handle_with_goal_response+0xc>
 801603e:	e005      	b.n	801604c <rclc_action_find_first_handle_with_goal_response+0x14>
 8016040:	6800      	ldr	r0, [r0, #0]
 8016042:	b118      	cbz	r0, 801604c <rclc_action_find_first_handle_with_goal_response+0x14>
 8016044:	f890 3020 	ldrb.w	r3, [r0, #32]
 8016048:	2b00      	cmp	r3, #0
 801604a:	d0f9      	beq.n	8016040 <rclc_action_find_first_handle_with_goal_response+0x8>
 801604c:	4770      	bx	lr
 801604e:	bf00      	nop

08016050 <rclc_action_find_first_handle_with_result_response>:
 8016050:	b140      	cbz	r0, 8016064 <rclc_action_find_first_handle_with_result_response+0x14>
 8016052:	68c0      	ldr	r0, [r0, #12]
 8016054:	b910      	cbnz	r0, 801605c <rclc_action_find_first_handle_with_result_response+0xc>
 8016056:	e005      	b.n	8016064 <rclc_action_find_first_handle_with_result_response+0x14>
 8016058:	6800      	ldr	r0, [r0, #0]
 801605a:	b118      	cbz	r0, 8016064 <rclc_action_find_first_handle_with_result_response+0x14>
 801605c:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 8016060:	2b00      	cmp	r3, #0
 8016062:	d0f9      	beq.n	8016058 <rclc_action_find_first_handle_with_result_response+0x8>
 8016064:	4770      	bx	lr
 8016066:	bf00      	nop

08016068 <rclc_action_server_response_goal_request>:
 8016068:	b198      	cbz	r0, 8016092 <rclc_action_server_response_goal_request+0x2a>
 801606a:	b510      	push	{r4, lr}
 801606c:	6844      	ldr	r4, [r0, #4]
 801606e:	b086      	sub	sp, #24
 8016070:	2200      	movs	r2, #0
 8016072:	e9cd 2203 	strd	r2, r2, [sp, #12]
 8016076:	460b      	mov	r3, r1
 8016078:	9205      	str	r2, [sp, #20]
 801607a:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 801607e:	aa03      	add	r2, sp, #12
 8016080:	f104 0010 	add.w	r0, r4, #16
 8016084:	f88d 300c 	strb.w	r3, [sp, #12]
 8016088:	f7ff fd4a 	bl	8015b20 <rcl_action_send_goal_response>
 801608c:	b918      	cbnz	r0, 8016096 <rclc_action_server_response_goal_request+0x2e>
 801608e:	b006      	add	sp, #24
 8016090:	bd10      	pop	{r4, pc}
 8016092:	200b      	movs	r0, #11
 8016094:	4770      	bx	lr
 8016096:	9001      	str	r0, [sp, #4]
 8016098:	f7f6 fe96 	bl	800cdc8 <rcutils_reset_error>
 801609c:	9801      	ldr	r0, [sp, #4]
 801609e:	b006      	add	sp, #24
 80160a0:	bd10      	pop	{r4, pc}
 80160a2:	bf00      	nop
 80160a4:	0000      	movs	r0, r0
	...

080160a8 <rclc_action_server_goal_cancel_accept>:
 80160a8:	b310      	cbz	r0, 80160f0 <rclc_action_server_goal_cancel_accept+0x48>
 80160aa:	b510      	push	{r4, lr}
 80160ac:	b090      	sub	sp, #64	@ 0x40
 80160ae:	4604      	mov	r4, r0
 80160b0:	a806      	add	r0, sp, #24
 80160b2:	f7ff fefd 	bl	8015eb0 <rcl_action_get_zero_initialized_cancel_response>
 80160b6:	2300      	movs	r3, #0
 80160b8:	f8d4 0009 	ldr.w	r0, [r4, #9]
 80160bc:	f8d4 100d 	ldr.w	r1, [r4, #13]
 80160c0:	f8d4 2011 	ldr.w	r2, [r4, #17]
 80160c4:	f88d 3018 	strb.w	r3, [sp, #24]
 80160c8:	f8d4 3015 	ldr.w	r3, [r4, #21]
 80160cc:	f8cd d01c 	str.w	sp, [sp, #28]
 80160d0:	46ec      	mov	ip, sp
 80160d2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80160d6:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 80160f8 <rclc_action_server_goal_cancel_accept+0x50>
 80160da:	6860      	ldr	r0, [r4, #4]
 80160dc:	aa06      	add	r2, sp, #24
 80160de:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 80160e2:	3010      	adds	r0, #16
 80160e4:	ed8d 7b08 	vstr	d7, [sp, #32]
 80160e8:	f7ff fdd2 	bl	8015c90 <rcl_action_send_cancel_response>
 80160ec:	b010      	add	sp, #64	@ 0x40
 80160ee:	bd10      	pop	{r4, pc}
 80160f0:	200b      	movs	r0, #11
 80160f2:	4770      	bx	lr
 80160f4:	f3af 8000 	nop.w
 80160f8:	00000001 	.word	0x00000001
 80160fc:	00000001 	.word	0x00000001

08016100 <rclc_action_server_goal_cancel_reject>:
 8016100:	b082      	sub	sp, #8
 8016102:	b530      	push	{r4, r5, lr}
 8016104:	b08b      	sub	sp, #44	@ 0x2c
 8016106:	ac0e      	add	r4, sp, #56	@ 0x38
 8016108:	e884 000c 	stmia.w	r4, {r2, r3}
 801610c:	b188      	cbz	r0, 8016132 <rclc_action_server_goal_cancel_reject+0x32>
 801610e:	4604      	mov	r4, r0
 8016110:	a801      	add	r0, sp, #4
 8016112:	460d      	mov	r5, r1
 8016114:	f7ff fecc 	bl	8015eb0 <rcl_action_get_zero_initialized_cancel_response>
 8016118:	aa01      	add	r2, sp, #4
 801611a:	a90e      	add	r1, sp, #56	@ 0x38
 801611c:	f104 0010 	add.w	r0, r4, #16
 8016120:	f88d 5004 	strb.w	r5, [sp, #4]
 8016124:	f7ff fdb4 	bl	8015c90 <rcl_action_send_cancel_response>
 8016128:	b00b      	add	sp, #44	@ 0x2c
 801612a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801612e:	b002      	add	sp, #8
 8016130:	4770      	bx	lr
 8016132:	200b      	movs	r0, #11
 8016134:	b00b      	add	sp, #44	@ 0x2c
 8016136:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801613a:	b002      	add	sp, #8
 801613c:	4770      	bx	lr
 801613e:	bf00      	nop

08016140 <__atomic_load_8>:
 8016140:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8016144:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8016148:	4a15      	ldr	r2, [pc, #84]	@ (80161a0 <__atomic_load_8+0x60>)
 801614a:	4b16      	ldr	r3, [pc, #88]	@ (80161a4 <__atomic_load_8+0x64>)
 801614c:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8016150:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8016154:	fb02 f101 	mul.w	r1, r2, r1
 8016158:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 801615c:	fba3 2301 	umull	r2, r3, r3, r1
 8016160:	091b      	lsrs	r3, r3, #4
 8016162:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8016166:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 801616a:	b4d0      	push	{r4, r6, r7}
 801616c:	4c0e      	ldr	r4, [pc, #56]	@ (80161a8 <__atomic_load_8+0x68>)
 801616e:	1ac9      	subs	r1, r1, r3
 8016170:	1862      	adds	r2, r4, r1
 8016172:	f04f 0c01 	mov.w	ip, #1
 8016176:	e8d2 3f4f 	ldrexb	r3, [r2]
 801617a:	e8c2 cf46 	strexb	r6, ip, [r2]
 801617e:	2e00      	cmp	r6, #0
 8016180:	d1f9      	bne.n	8016176 <__atomic_load_8+0x36>
 8016182:	f3bf 8f5b 	dmb	ish
 8016186:	b2db      	uxtb	r3, r3
 8016188:	2b00      	cmp	r3, #0
 801618a:	d1f4      	bne.n	8016176 <__atomic_load_8+0x36>
 801618c:	e9d0 6700 	ldrd	r6, r7, [r0]
 8016190:	f3bf 8f5b 	dmb	ish
 8016194:	5463      	strb	r3, [r4, r1]
 8016196:	4630      	mov	r0, r6
 8016198:	4639      	mov	r1, r7
 801619a:	bcd0      	pop	{r4, r6, r7}
 801619c:	4770      	bx	lr
 801619e:	bf00      	nop
 80161a0:	27d4eb2d 	.word	0x27d4eb2d
 80161a4:	b21642c9 	.word	0xb21642c9
 80161a8:	20015d10 	.word	0x20015d10

080161ac <__atomic_store_8>:
 80161ac:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 80161b0:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 80161b4:	b570      	push	{r4, r5, r6, lr}
 80161b6:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80161ba:	4c14      	ldr	r4, [pc, #80]	@ (801620c <__atomic_store_8+0x60>)
 80161bc:	4d14      	ldr	r5, [pc, #80]	@ (8016210 <__atomic_store_8+0x64>)
 80161be:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 80161c2:	fb04 f101 	mul.w	r1, r4, r1
 80161c6:	4c13      	ldr	r4, [pc, #76]	@ (8016214 <__atomic_store_8+0x68>)
 80161c8:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 80161cc:	fba4 4e01 	umull	r4, lr, r4, r1
 80161d0:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 80161d4:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 80161d8:	ebce 0ec4 	rsb	lr, lr, r4, lsl #3
 80161dc:	eba1 0e0e 	sub.w	lr, r1, lr
 80161e0:	eb05 0c0e 	add.w	ip, r5, lr
 80161e4:	f04f 0401 	mov.w	r4, #1
 80161e8:	e8dc 1f4f 	ldrexb	r1, [ip]
 80161ec:	e8cc 4f46 	strexb	r6, r4, [ip]
 80161f0:	2e00      	cmp	r6, #0
 80161f2:	d1f9      	bne.n	80161e8 <__atomic_store_8+0x3c>
 80161f4:	f3bf 8f5b 	dmb	ish
 80161f8:	b2c9      	uxtb	r1, r1
 80161fa:	2900      	cmp	r1, #0
 80161fc:	d1f4      	bne.n	80161e8 <__atomic_store_8+0x3c>
 80161fe:	e9c0 2300 	strd	r2, r3, [r0]
 8016202:	f3bf 8f5b 	dmb	ish
 8016206:	f805 100e 	strb.w	r1, [r5, lr]
 801620a:	bd70      	pop	{r4, r5, r6, pc}
 801620c:	27d4eb2d 	.word	0x27d4eb2d
 8016210:	20015d10 	.word	0x20015d10
 8016214:	b21642c9 	.word	0xb21642c9

08016218 <__atomic_exchange_8>:
 8016218:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 801621c:	f08c 0c3d 	eor.w	ip, ip, #61	@ 0x3d
 8016220:	4916      	ldr	r1, [pc, #88]	@ (801627c <__atomic_exchange_8+0x64>)
 8016222:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 8016226:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 801622a:	fb01 fc0c 	mul.w	ip, r1, ip
 801622e:	4914      	ldr	r1, [pc, #80]	@ (8016280 <__atomic_exchange_8+0x68>)
 8016230:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 8016234:	b570      	push	{r4, r5, r6, lr}
 8016236:	4605      	mov	r5, r0
 8016238:	fba1 010c 	umull	r0, r1, r1, ip
 801623c:	0909      	lsrs	r1, r1, #4
 801623e:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 8016242:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
 8016246:	4e0f      	ldr	r6, [pc, #60]	@ (8016284 <__atomic_exchange_8+0x6c>)
 8016248:	ebac 0c01 	sub.w	ip, ip, r1
 801624c:	eb06 010c 	add.w	r1, r6, ip
 8016250:	f04f 0e01 	mov.w	lr, #1
 8016254:	e8d1 4f4f 	ldrexb	r4, [r1]
 8016258:	e8c1 ef40 	strexb	r0, lr, [r1]
 801625c:	2800      	cmp	r0, #0
 801625e:	d1f9      	bne.n	8016254 <__atomic_exchange_8+0x3c>
 8016260:	f3bf 8f5b 	dmb	ish
 8016264:	b2e4      	uxtb	r4, r4
 8016266:	2c00      	cmp	r4, #0
 8016268:	d1f4      	bne.n	8016254 <__atomic_exchange_8+0x3c>
 801626a:	e9d5 0100 	ldrd	r0, r1, [r5]
 801626e:	e9c5 2300 	strd	r2, r3, [r5]
 8016272:	f3bf 8f5b 	dmb	ish
 8016276:	f806 400c 	strb.w	r4, [r6, ip]
 801627a:	bd70      	pop	{r4, r5, r6, pc}
 801627c:	27d4eb2d 	.word	0x27d4eb2d
 8016280:	b21642c9 	.word	0xb21642c9
 8016284:	20015d10 	.word	0x20015d10

08016288 <rcutils_get_env>:
 8016288:	b168      	cbz	r0, 80162a6 <rcutils_get_env+0x1e>
 801628a:	b510      	push	{r4, lr}
 801628c:	460c      	mov	r4, r1
 801628e:	b129      	cbz	r1, 801629c <rcutils_get_env+0x14>
 8016290:	f004 fc3e 	bl	801ab10 <getenv>
 8016294:	b120      	cbz	r0, 80162a0 <rcutils_get_env+0x18>
 8016296:	6020      	str	r0, [r4, #0]
 8016298:	2000      	movs	r0, #0
 801629a:	bd10      	pop	{r4, pc}
 801629c:	4803      	ldr	r0, [pc, #12]	@ (80162ac <rcutils_get_env+0x24>)
 801629e:	bd10      	pop	{r4, pc}
 80162a0:	4b03      	ldr	r3, [pc, #12]	@ (80162b0 <rcutils_get_env+0x28>)
 80162a2:	6023      	str	r3, [r4, #0]
 80162a4:	bd10      	pop	{r4, pc}
 80162a6:	4803      	ldr	r0, [pc, #12]	@ (80162b4 <rcutils_get_env+0x2c>)
 80162a8:	4770      	bx	lr
 80162aa:	bf00      	nop
 80162ac:	0801d20c 	.word	0x0801d20c
 80162b0:	0801d5a4 	.word	0x0801d5a4
 80162b4:	0801d1f0 	.word	0x0801d1f0

080162b8 <rcutils_is_directory>:
 80162b8:	2000      	movs	r0, #0
 80162ba:	4770      	bx	lr

080162bc <rcutils_join_path>:
 80162bc:	b082      	sub	sp, #8
 80162be:	e88d 000c 	stmia.w	sp, {r2, r3}
 80162c2:	2000      	movs	r0, #0
 80162c4:	b002      	add	sp, #8
 80162c6:	4770      	bx	lr

080162c8 <rcutils_to_native_path>:
 80162c8:	b084      	sub	sp, #16
 80162ca:	a801      	add	r0, sp, #4
 80162cc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80162d0:	b004      	add	sp, #16
 80162d2:	2000      	movs	r0, #0
 80162d4:	4770      	bx	lr
 80162d6:	bf00      	nop

080162d8 <rcutils_format_string_limit>:
 80162d8:	b40f      	push	{r0, r1, r2, r3}
 80162da:	b5f0      	push	{r4, r5, r6, r7, lr}
 80162dc:	b083      	sub	sp, #12
 80162de:	ac08      	add	r4, sp, #32
 80162e0:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 80162e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80162e6:	b34e      	cbz	r6, 801633c <rcutils_format_string_limit+0x64>
 80162e8:	a808      	add	r0, sp, #32
 80162ea:	f7f6 fd49 	bl	800cd80 <rcutils_allocator_is_valid>
 80162ee:	b328      	cbz	r0, 801633c <rcutils_format_string_limit+0x64>
 80162f0:	2100      	movs	r1, #0
 80162f2:	ab0f      	add	r3, sp, #60	@ 0x3c
 80162f4:	4632      	mov	r2, r6
 80162f6:	4608      	mov	r0, r1
 80162f8:	e9cd 3300 	strd	r3, r3, [sp]
 80162fc:	f000 f8f4 	bl	80164e8 <rcutils_vsnprintf>
 8016300:	1c43      	adds	r3, r0, #1
 8016302:	4605      	mov	r5, r0
 8016304:	d01a      	beq.n	801633c <rcutils_format_string_limit+0x64>
 8016306:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8016308:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801630a:	1c47      	adds	r7, r0, #1
 801630c:	429f      	cmp	r7, r3
 801630e:	bf84      	itt	hi
 8016310:	461f      	movhi	r7, r3
 8016312:	f103 35ff 	addhi.w	r5, r3, #4294967295	@ 0xffffffff
 8016316:	4638      	mov	r0, r7
 8016318:	9b08      	ldr	r3, [sp, #32]
 801631a:	4798      	blx	r3
 801631c:	4604      	mov	r4, r0
 801631e:	b168      	cbz	r0, 801633c <rcutils_format_string_limit+0x64>
 8016320:	9b01      	ldr	r3, [sp, #4]
 8016322:	4632      	mov	r2, r6
 8016324:	4639      	mov	r1, r7
 8016326:	f000 f8df 	bl	80164e8 <rcutils_vsnprintf>
 801632a:	2800      	cmp	r0, #0
 801632c:	db02      	blt.n	8016334 <rcutils_format_string_limit+0x5c>
 801632e:	2300      	movs	r3, #0
 8016330:	5563      	strb	r3, [r4, r5]
 8016332:	e004      	b.n	801633e <rcutils_format_string_limit+0x66>
 8016334:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016336:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8016338:	4620      	mov	r0, r4
 801633a:	4798      	blx	r3
 801633c:	2400      	movs	r4, #0
 801633e:	4620      	mov	r0, r4
 8016340:	b003      	add	sp, #12
 8016342:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8016346:	b004      	add	sp, #16
 8016348:	4770      	bx	lr
 801634a:	bf00      	nop

0801634c <rcutils_repl_str>:
 801634c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016350:	ed2d 8b02 	vpush	{d8}
 8016354:	b087      	sub	sp, #28
 8016356:	4680      	mov	r8, r0
 8016358:	4608      	mov	r0, r1
 801635a:	f8cd 8004 	str.w	r8, [sp, #4]
 801635e:	ee08 2a10 	vmov	s16, r2
 8016362:	468a      	mov	sl, r1
 8016364:	4699      	mov	r9, r3
 8016366:	f7e9 ff55 	bl	8000214 <strlen>
 801636a:	2600      	movs	r6, #0
 801636c:	4647      	mov	r7, r8
 801636e:	9002      	str	r0, [sp, #8]
 8016370:	46b3      	mov	fp, r6
 8016372:	2510      	movs	r5, #16
 8016374:	46b0      	mov	r8, r6
 8016376:	e01d      	b.n	80163b4 <rcutils_repl_str+0x68>
 8016378:	f10b 0b01 	add.w	fp, fp, #1
 801637c:	455e      	cmp	r6, fp
 801637e:	d211      	bcs.n	80163a4 <rcutils_repl_str+0x58>
 8016380:	442e      	add	r6, r5
 8016382:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8016386:	f8d9 2010 	ldr.w	r2, [r9, #16]
 801638a:	00b1      	lsls	r1, r6, #2
 801638c:	4798      	blx	r3
 801638e:	2800      	cmp	r0, #0
 8016390:	f000 8088 	beq.w	80164a4 <rcutils_repl_str+0x158>
 8016394:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016398:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 801639c:	4680      	mov	r8, r0
 801639e:	bf28      	it	cs
 80163a0:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 80163a4:	9a01      	ldr	r2, [sp, #4]
 80163a6:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 80163aa:	1aa2      	subs	r2, r4, r2
 80163ac:	f843 2c04 	str.w	r2, [r3, #-4]
 80163b0:	9b02      	ldr	r3, [sp, #8]
 80163b2:	18e7      	adds	r7, r4, r3
 80163b4:	4651      	mov	r1, sl
 80163b6:	4638      	mov	r0, r7
 80163b8:	f005 f819 	bl	801b3ee <strstr>
 80163bc:	4604      	mov	r4, r0
 80163be:	4640      	mov	r0, r8
 80163c0:	2c00      	cmp	r4, #0
 80163c2:	d1d9      	bne.n	8016378 <rcutils_repl_str+0x2c>
 80163c4:	46b8      	mov	r8, r7
 80163c6:	4607      	mov	r7, r0
 80163c8:	4640      	mov	r0, r8
 80163ca:	f7e9 ff23 	bl	8000214 <strlen>
 80163ce:	9b01      	ldr	r3, [sp, #4]
 80163d0:	eba8 0303 	sub.w	r3, r8, r3
 80163d4:	181c      	adds	r4, r3, r0
 80163d6:	9404      	str	r4, [sp, #16]
 80163d8:	f1bb 0f00 	cmp.w	fp, #0
 80163dc:	d04a      	beq.n	8016474 <rcutils_repl_str+0x128>
 80163de:	ee18 0a10 	vmov	r0, s16
 80163e2:	f7e9 ff17 	bl	8000214 <strlen>
 80163e6:	9b02      	ldr	r3, [sp, #8]
 80163e8:	f8d9 1010 	ldr.w	r1, [r9, #16]
 80163ec:	1ac3      	subs	r3, r0, r3
 80163ee:	fb0b 4303 	mla	r3, fp, r3, r4
 80163f2:	461a      	mov	r2, r3
 80163f4:	9305      	str	r3, [sp, #20]
 80163f6:	4606      	mov	r6, r0
 80163f8:	f8d9 3000 	ldr.w	r3, [r9]
 80163fc:	1c50      	adds	r0, r2, #1
 80163fe:	4798      	blx	r3
 8016400:	9003      	str	r0, [sp, #12]
 8016402:	2800      	cmp	r0, #0
 8016404:	d04f      	beq.n	80164a6 <rcutils_repl_str+0x15a>
 8016406:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801640a:	683a      	ldr	r2, [r7, #0]
 801640c:	4641      	mov	r1, r8
 801640e:	f005 f84a 	bl	801b4a6 <memcpy>
 8016412:	683d      	ldr	r5, [r7, #0]
 8016414:	9b03      	ldr	r3, [sp, #12]
 8016416:	9701      	str	r7, [sp, #4]
 8016418:	46ba      	mov	sl, r7
 801641a:	441d      	add	r5, r3
 801641c:	9f02      	ldr	r7, [sp, #8]
 801641e:	f8cd 9008 	str.w	r9, [sp, #8]
 8016422:	2401      	movs	r4, #1
 8016424:	46d1      	mov	r9, sl
 8016426:	ee18 aa10 	vmov	sl, s16
 801642a:	e00a      	b.n	8016442 <rcutils_repl_str+0xf6>
 801642c:	f8d9 5000 	ldr.w	r5, [r9]
 8016430:	1aaa      	subs	r2, r5, r2
 8016432:	1885      	adds	r5, r0, r2
 8016434:	f005 f837 	bl	801b4a6 <memcpy>
 8016438:	45a3      	cmp	fp, r4
 801643a:	f104 0201 	add.w	r2, r4, #1
 801643e:	d935      	bls.n	80164ac <rcutils_repl_str+0x160>
 8016440:	4614      	mov	r4, r2
 8016442:	4632      	mov	r2, r6
 8016444:	4651      	mov	r1, sl
 8016446:	4628      	mov	r0, r5
 8016448:	f005 f82d 	bl	801b4a6 <memcpy>
 801644c:	f859 2b04 	ldr.w	r2, [r9], #4
 8016450:	45a3      	cmp	fp, r4
 8016452:	443a      	add	r2, r7
 8016454:	eb05 0006 	add.w	r0, r5, r6
 8016458:	eb08 0102 	add.w	r1, r8, r2
 801645c:	d1e6      	bne.n	801642c <rcutils_repl_str+0xe0>
 801645e:	9b04      	ldr	r3, [sp, #16]
 8016460:	1a9a      	subs	r2, r3, r2
 8016462:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 8016466:	f005 f81e 	bl	801b4a6 <memcpy>
 801646a:	9a03      	ldr	r2, [sp, #12]
 801646c:	9905      	ldr	r1, [sp, #20]
 801646e:	2300      	movs	r3, #0
 8016470:	5453      	strb	r3, [r2, r1]
 8016472:	e00b      	b.n	801648c <rcutils_repl_str+0x140>
 8016474:	4620      	mov	r0, r4
 8016476:	f8d9 3000 	ldr.w	r3, [r9]
 801647a:	f8d9 1010 	ldr.w	r1, [r9, #16]
 801647e:	3001      	adds	r0, #1
 8016480:	4798      	blx	r3
 8016482:	9003      	str	r0, [sp, #12]
 8016484:	b110      	cbz	r0, 801648c <rcutils_repl_str+0x140>
 8016486:	9901      	ldr	r1, [sp, #4]
 8016488:	f005 f805 	bl	801b496 <strcpy>
 801648c:	4638      	mov	r0, r7
 801648e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8016492:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8016496:	4798      	blx	r3
 8016498:	9803      	ldr	r0, [sp, #12]
 801649a:	b007      	add	sp, #28
 801649c:	ecbd 8b02 	vpop	{d8}
 80164a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80164a4:	4647      	mov	r7, r8
 80164a6:	2300      	movs	r3, #0
 80164a8:	9303      	str	r3, [sp, #12]
 80164aa:	e7ef      	b.n	801648c <rcutils_repl_str+0x140>
 80164ac:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 80164b0:	e7db      	b.n	801646a <rcutils_repl_str+0x11e>
 80164b2:	bf00      	nop

080164b4 <rcutils_snprintf>:
 80164b4:	b40c      	push	{r2, r3}
 80164b6:	b530      	push	{r4, r5, lr}
 80164b8:	b083      	sub	sp, #12
 80164ba:	ab06      	add	r3, sp, #24
 80164bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80164c0:	9301      	str	r3, [sp, #4]
 80164c2:	b152      	cbz	r2, 80164da <rcutils_snprintf+0x26>
 80164c4:	b138      	cbz	r0, 80164d6 <rcutils_snprintf+0x22>
 80164c6:	b141      	cbz	r1, 80164da <rcutils_snprintf+0x26>
 80164c8:	f004 fda4 	bl	801b014 <vsniprintf>
 80164cc:	b003      	add	sp, #12
 80164ce:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80164d2:	b002      	add	sp, #8
 80164d4:	4770      	bx	lr
 80164d6:	2900      	cmp	r1, #0
 80164d8:	d0f6      	beq.n	80164c8 <rcutils_snprintf+0x14>
 80164da:	f004 ffaf 	bl	801b43c <__errno>
 80164de:	2316      	movs	r3, #22
 80164e0:	6003      	str	r3, [r0, #0]
 80164e2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80164e6:	e7f1      	b.n	80164cc <rcutils_snprintf+0x18>

080164e8 <rcutils_vsnprintf>:
 80164e8:	b570      	push	{r4, r5, r6, lr}
 80164ea:	b13a      	cbz	r2, 80164fc <rcutils_vsnprintf+0x14>
 80164ec:	b120      	cbz	r0, 80164f8 <rcutils_vsnprintf+0x10>
 80164ee:	b129      	cbz	r1, 80164fc <rcutils_vsnprintf+0x14>
 80164f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80164f4:	f004 bd8e 	b.w	801b014 <vsniprintf>
 80164f8:	2900      	cmp	r1, #0
 80164fa:	d0f9      	beq.n	80164f0 <rcutils_vsnprintf+0x8>
 80164fc:	f004 ff9e 	bl	801b43c <__errno>
 8016500:	2316      	movs	r3, #22
 8016502:	6003      	str	r3, [r0, #0]
 8016504:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016508:	bd70      	pop	{r4, r5, r6, pc}
 801650a:	bf00      	nop

0801650c <rcutils_strdup>:
 801650c:	b084      	sub	sp, #16
 801650e:	b570      	push	{r4, r5, r6, lr}
 8016510:	b082      	sub	sp, #8
 8016512:	ac07      	add	r4, sp, #28
 8016514:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8016518:	4605      	mov	r5, r0
 801651a:	b1b0      	cbz	r0, 801654a <rcutils_strdup+0x3e>
 801651c:	f7e9 fe7a 	bl	8000214 <strlen>
 8016520:	1c42      	adds	r2, r0, #1
 8016522:	9b07      	ldr	r3, [sp, #28]
 8016524:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8016526:	9201      	str	r2, [sp, #4]
 8016528:	4606      	mov	r6, r0
 801652a:	4610      	mov	r0, r2
 801652c:	4798      	blx	r3
 801652e:	4604      	mov	r4, r0
 8016530:	b128      	cbz	r0, 801653e <rcutils_strdup+0x32>
 8016532:	9a01      	ldr	r2, [sp, #4]
 8016534:	4629      	mov	r1, r5
 8016536:	f004 ffb6 	bl	801b4a6 <memcpy>
 801653a:	2300      	movs	r3, #0
 801653c:	55a3      	strb	r3, [r4, r6]
 801653e:	4620      	mov	r0, r4
 8016540:	b002      	add	sp, #8
 8016542:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016546:	b004      	add	sp, #16
 8016548:	4770      	bx	lr
 801654a:	4604      	mov	r4, r0
 801654c:	e7f7      	b.n	801653e <rcutils_strdup+0x32>
 801654e:	bf00      	nop

08016550 <rcutils_strndup>:
 8016550:	b082      	sub	sp, #8
 8016552:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016554:	ac06      	add	r4, sp, #24
 8016556:	e884 000c 	stmia.w	r4, {r2, r3}
 801655a:	4605      	mov	r5, r0
 801655c:	b188      	cbz	r0, 8016582 <rcutils_strndup+0x32>
 801655e:	1c4f      	adds	r7, r1, #1
 8016560:	460e      	mov	r6, r1
 8016562:	4638      	mov	r0, r7
 8016564:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8016566:	4790      	blx	r2
 8016568:	4604      	mov	r4, r0
 801656a:	b128      	cbz	r0, 8016578 <rcutils_strndup+0x28>
 801656c:	463a      	mov	r2, r7
 801656e:	4629      	mov	r1, r5
 8016570:	f004 ff99 	bl	801b4a6 <memcpy>
 8016574:	2300      	movs	r3, #0
 8016576:	55a3      	strb	r3, [r4, r6]
 8016578:	4620      	mov	r0, r4
 801657a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801657e:	b002      	add	sp, #8
 8016580:	4770      	bx	lr
 8016582:	4604      	mov	r4, r0
 8016584:	e7f8      	b.n	8016578 <rcutils_strndup+0x28>
 8016586:	bf00      	nop

08016588 <rcutils_get_zero_initialized_string_map>:
 8016588:	4b01      	ldr	r3, [pc, #4]	@ (8016590 <rcutils_get_zero_initialized_string_map+0x8>)
 801658a:	2000      	movs	r0, #0
 801658c:	6018      	str	r0, [r3, #0]
 801658e:	4770      	bx	lr
 8016590:	20015d28 	.word	0x20015d28

08016594 <rcutils_string_map_reserve>:
 8016594:	2800      	cmp	r0, #0
 8016596:	d05f      	beq.n	8016658 <rcutils_string_map_reserve+0xc4>
 8016598:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801659c:	460c      	mov	r4, r1
 801659e:	6801      	ldr	r1, [r0, #0]
 80165a0:	b082      	sub	sp, #8
 80165a2:	4605      	mov	r5, r0
 80165a4:	b129      	cbz	r1, 80165b2 <rcutils_string_map_reserve+0x1e>
 80165a6:	68cb      	ldr	r3, [r1, #12]
 80165a8:	42a3      	cmp	r3, r4
 80165aa:	d906      	bls.n	80165ba <rcutils_string_map_reserve+0x26>
 80165ac:	461c      	mov	r4, r3
 80165ae:	2900      	cmp	r1, #0
 80165b0:	d1f9      	bne.n	80165a6 <rcutils_string_map_reserve+0x12>
 80165b2:	201f      	movs	r0, #31
 80165b4:	b002      	add	sp, #8
 80165b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80165ba:	688b      	ldr	r3, [r1, #8]
 80165bc:	42a3      	cmp	r3, r4
 80165be:	d047      	beq.n	8016650 <rcutils_string_map_reserve+0xbc>
 80165c0:	6a0e      	ldr	r6, [r1, #32]
 80165c2:	2c00      	cmp	r4, #0
 80165c4:	d034      	beq.n	8016630 <rcutils_string_map_reserve+0x9c>
 80165c6:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 80165ca:	d243      	bcs.n	8016654 <rcutils_string_map_reserve+0xc0>
 80165cc:	00a7      	lsls	r7, r4, #2
 80165ce:	f8d1 8018 	ldr.w	r8, [r1, #24]
 80165d2:	6808      	ldr	r0, [r1, #0]
 80165d4:	4632      	mov	r2, r6
 80165d6:	4639      	mov	r1, r7
 80165d8:	47c0      	blx	r8
 80165da:	2800      	cmp	r0, #0
 80165dc:	d03a      	beq.n	8016654 <rcutils_string_map_reserve+0xc0>
 80165de:	682b      	ldr	r3, [r5, #0]
 80165e0:	4632      	mov	r2, r6
 80165e2:	6018      	str	r0, [r3, #0]
 80165e4:	4639      	mov	r1, r7
 80165e6:	6858      	ldr	r0, [r3, #4]
 80165e8:	47c0      	blx	r8
 80165ea:	2800      	cmp	r0, #0
 80165ec:	d032      	beq.n	8016654 <rcutils_string_map_reserve+0xc0>
 80165ee:	682d      	ldr	r5, [r5, #0]
 80165f0:	68ab      	ldr	r3, [r5, #8]
 80165f2:	6068      	str	r0, [r5, #4]
 80165f4:	42a3      	cmp	r3, r4
 80165f6:	d226      	bcs.n	8016646 <rcutils_string_map_reserve+0xb2>
 80165f8:	682a      	ldr	r2, [r5, #0]
 80165fa:	eb00 0c07 	add.w	ip, r0, r7
 80165fe:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 8016602:	45e6      	cmp	lr, ip
 8016604:	ea4f 0183 	mov.w	r1, r3, lsl #2
 8016608:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 801660c:	d203      	bcs.n	8016616 <rcutils_string_map_reserve+0x82>
 801660e:	eb02 0c07 	add.w	ip, r2, r7
 8016612:	4566      	cmp	r6, ip
 8016614:	d322      	bcc.n	801665c <rcutils_string_map_reserve+0xc8>
 8016616:	1ae3      	subs	r3, r4, r3
 8016618:	009a      	lsls	r2, r3, #2
 801661a:	4670      	mov	r0, lr
 801661c:	2100      	movs	r1, #0
 801661e:	9201      	str	r2, [sp, #4]
 8016620:	f004 febe 	bl	801b3a0 <memset>
 8016624:	9a01      	ldr	r2, [sp, #4]
 8016626:	2100      	movs	r1, #0
 8016628:	4630      	mov	r0, r6
 801662a:	f004 feb9 	bl	801b3a0 <memset>
 801662e:	e00a      	b.n	8016646 <rcutils_string_map_reserve+0xb2>
 8016630:	694f      	ldr	r7, [r1, #20]
 8016632:	6808      	ldr	r0, [r1, #0]
 8016634:	4631      	mov	r1, r6
 8016636:	47b8      	blx	r7
 8016638:	682b      	ldr	r3, [r5, #0]
 801663a:	4631      	mov	r1, r6
 801663c:	6858      	ldr	r0, [r3, #4]
 801663e:	601c      	str	r4, [r3, #0]
 8016640:	47b8      	blx	r7
 8016642:	682d      	ldr	r5, [r5, #0]
 8016644:	606c      	str	r4, [r5, #4]
 8016646:	2000      	movs	r0, #0
 8016648:	60ac      	str	r4, [r5, #8]
 801664a:	b002      	add	sp, #8
 801664c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016650:	2000      	movs	r0, #0
 8016652:	e7af      	b.n	80165b4 <rcutils_string_map_reserve+0x20>
 8016654:	200a      	movs	r0, #10
 8016656:	e7ad      	b.n	80165b4 <rcutils_string_map_reserve+0x20>
 8016658:	200b      	movs	r0, #11
 801665a:	4770      	bx	lr
 801665c:	1f0b      	subs	r3, r1, #4
 801665e:	4418      	add	r0, r3
 8016660:	4413      	add	r3, r2
 8016662:	3a04      	subs	r2, #4
 8016664:	4417      	add	r7, r2
 8016666:	2200      	movs	r2, #0
 8016668:	f843 2f04 	str.w	r2, [r3, #4]!
 801666c:	42bb      	cmp	r3, r7
 801666e:	f840 2f04 	str.w	r2, [r0, #4]!
 8016672:	d1f9      	bne.n	8016668 <rcutils_string_map_reserve+0xd4>
 8016674:	e7e7      	b.n	8016646 <rcutils_string_map_reserve+0xb2>
 8016676:	bf00      	nop

08016678 <rcutils_string_map_init>:
 8016678:	b082      	sub	sp, #8
 801667a:	b570      	push	{r4, r5, r6, lr}
 801667c:	ac04      	add	r4, sp, #16
 801667e:	e884 000c 	stmia.w	r4, {r2, r3}
 8016682:	b380      	cbz	r0, 80166e6 <rcutils_string_map_init+0x6e>
 8016684:	6806      	ldr	r6, [r0, #0]
 8016686:	4604      	mov	r4, r0
 8016688:	b12e      	cbz	r6, 8016696 <rcutils_string_map_init+0x1e>
 801668a:	251e      	movs	r5, #30
 801668c:	4628      	mov	r0, r5
 801668e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016692:	b002      	add	sp, #8
 8016694:	4770      	bx	lr
 8016696:	a804      	add	r0, sp, #16
 8016698:	460d      	mov	r5, r1
 801669a:	f7f6 fb71 	bl	800cd80 <rcutils_allocator_is_valid>
 801669e:	b310      	cbz	r0, 80166e6 <rcutils_string_map_init+0x6e>
 80166a0:	9b04      	ldr	r3, [sp, #16]
 80166a2:	9908      	ldr	r1, [sp, #32]
 80166a4:	2024      	movs	r0, #36	@ 0x24
 80166a6:	4798      	blx	r3
 80166a8:	6020      	str	r0, [r4, #0]
 80166aa:	b310      	cbz	r0, 80166f2 <rcutils_string_map_init+0x7a>
 80166ac:	f10d 0e10 	add.w	lr, sp, #16
 80166b0:	e9c0 6600 	strd	r6, r6, [r0]
 80166b4:	e9c0 6602 	strd	r6, r6, [r0, #8]
 80166b8:	f100 0c10 	add.w	ip, r0, #16
 80166bc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80166c0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80166c4:	f8de 3000 	ldr.w	r3, [lr]
 80166c8:	f8cc 3000 	str.w	r3, [ip]
 80166cc:	4629      	mov	r1, r5
 80166ce:	4620      	mov	r0, r4
 80166d0:	f7ff ff60 	bl	8016594 <rcutils_string_map_reserve>
 80166d4:	4605      	mov	r5, r0
 80166d6:	2800      	cmp	r0, #0
 80166d8:	d0d8      	beq.n	801668c <rcutils_string_map_init+0x14>
 80166da:	9b05      	ldr	r3, [sp, #20]
 80166dc:	9908      	ldr	r1, [sp, #32]
 80166de:	6820      	ldr	r0, [r4, #0]
 80166e0:	4798      	blx	r3
 80166e2:	6026      	str	r6, [r4, #0]
 80166e4:	e7d2      	b.n	801668c <rcutils_string_map_init+0x14>
 80166e6:	250b      	movs	r5, #11
 80166e8:	4628      	mov	r0, r5
 80166ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80166ee:	b002      	add	sp, #8
 80166f0:	4770      	bx	lr
 80166f2:	250a      	movs	r5, #10
 80166f4:	e7ca      	b.n	801668c <rcutils_string_map_init+0x14>
 80166f6:	bf00      	nop

080166f8 <rcutils_string_map_fini>:
 80166f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80166fc:	b082      	sub	sp, #8
 80166fe:	2800      	cmp	r0, #0
 8016700:	d03a      	beq.n	8016778 <rcutils_string_map_fini+0x80>
 8016702:	6804      	ldr	r4, [r0, #0]
 8016704:	4606      	mov	r6, r0
 8016706:	2c00      	cmp	r4, #0
 8016708:	d032      	beq.n	8016770 <rcutils_string_map_fini+0x78>
 801670a:	68a3      	ldr	r3, [r4, #8]
 801670c:	b32b      	cbz	r3, 801675a <rcutils_string_map_fini+0x62>
 801670e:	2500      	movs	r5, #0
 8016710:	6822      	ldr	r2, [r4, #0]
 8016712:	462f      	mov	r7, r5
 8016714:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8016718:	b1e0      	cbz	r0, 8016754 <rcutils_string_map_fini+0x5c>
 801671a:	6a21      	ldr	r1, [r4, #32]
 801671c:	f8d4 8014 	ldr.w	r8, [r4, #20]
 8016720:	9101      	str	r1, [sp, #4]
 8016722:	47c0      	blx	r8
 8016724:	e9d4 2300 	ldrd	r2, r3, [r4]
 8016728:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 801672c:	9901      	ldr	r1, [sp, #4]
 801672e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8016732:	47c0      	blx	r8
 8016734:	68e3      	ldr	r3, [r4, #12]
 8016736:	6862      	ldr	r2, [r4, #4]
 8016738:	3b01      	subs	r3, #1
 801673a:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 801673e:	60e3      	str	r3, [r4, #12]
 8016740:	6834      	ldr	r4, [r6, #0]
 8016742:	68a3      	ldr	r3, [r4, #8]
 8016744:	3501      	adds	r5, #1
 8016746:	429d      	cmp	r5, r3
 8016748:	d207      	bcs.n	801675a <rcutils_string_map_fini+0x62>
 801674a:	6822      	ldr	r2, [r4, #0]
 801674c:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8016750:	2800      	cmp	r0, #0
 8016752:	d1e2      	bne.n	801671a <rcutils_string_map_fini+0x22>
 8016754:	3501      	adds	r5, #1
 8016756:	429d      	cmp	r5, r3
 8016758:	d3dc      	bcc.n	8016714 <rcutils_string_map_fini+0x1c>
 801675a:	2100      	movs	r1, #0
 801675c:	4630      	mov	r0, r6
 801675e:	f7ff ff19 	bl	8016594 <rcutils_string_map_reserve>
 8016762:	4604      	mov	r4, r0
 8016764:	b920      	cbnz	r0, 8016770 <rcutils_string_map_fini+0x78>
 8016766:	6830      	ldr	r0, [r6, #0]
 8016768:	6943      	ldr	r3, [r0, #20]
 801676a:	6a01      	ldr	r1, [r0, #32]
 801676c:	4798      	blx	r3
 801676e:	6034      	str	r4, [r6, #0]
 8016770:	4620      	mov	r0, r4
 8016772:	b002      	add	sp, #8
 8016774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016778:	240b      	movs	r4, #11
 801677a:	4620      	mov	r0, r4
 801677c:	b002      	add	sp, #8
 801677e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016782:	bf00      	nop

08016784 <rcutils_string_map_getn>:
 8016784:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016788:	b300      	cbz	r0, 80167cc <rcutils_string_map_getn+0x48>
 801678a:	6807      	ldr	r7, [r0, #0]
 801678c:	b1ff      	cbz	r7, 80167ce <rcutils_string_map_getn+0x4a>
 801678e:	4688      	mov	r8, r1
 8016790:	b1e1      	cbz	r1, 80167cc <rcutils_string_map_getn+0x48>
 8016792:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8016796:	683e      	ldr	r6, [r7, #0]
 8016798:	f1ba 0f00 	cmp.w	sl, #0
 801679c:	d016      	beq.n	80167cc <rcutils_string_map_getn+0x48>
 801679e:	4691      	mov	r9, r2
 80167a0:	3e04      	subs	r6, #4
 80167a2:	2400      	movs	r4, #0
 80167a4:	f856 5f04 	ldr.w	r5, [r6, #4]!
 80167a8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80167ac:	4628      	mov	r0, r5
 80167ae:	3401      	adds	r4, #1
 80167b0:	b155      	cbz	r5, 80167c8 <rcutils_string_map_getn+0x44>
 80167b2:	f7e9 fd2f 	bl	8000214 <strlen>
 80167b6:	4548      	cmp	r0, r9
 80167b8:	4602      	mov	r2, r0
 80167ba:	4629      	mov	r1, r5
 80167bc:	bf38      	it	cc
 80167be:	464a      	movcc	r2, r9
 80167c0:	4640      	mov	r0, r8
 80167c2:	f004 fe02 	bl	801b3ca <strncmp>
 80167c6:	b128      	cbz	r0, 80167d4 <rcutils_string_map_getn+0x50>
 80167c8:	45a2      	cmp	sl, r4
 80167ca:	d1eb      	bne.n	80167a4 <rcutils_string_map_getn+0x20>
 80167cc:	2700      	movs	r7, #0
 80167ce:	4638      	mov	r0, r7
 80167d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80167d4:	687b      	ldr	r3, [r7, #4]
 80167d6:	f853 700b 	ldr.w	r7, [r3, fp]
 80167da:	4638      	mov	r0, r7
 80167dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080167e0 <rmw_get_zero_initialized_context>:
 80167e0:	b510      	push	{r4, lr}
 80167e2:	4604      	mov	r4, r0
 80167e4:	3010      	adds	r0, #16
 80167e6:	f000 f80b 	bl	8016800 <rmw_get_zero_initialized_init_options>
 80167ea:	2300      	movs	r3, #0
 80167ec:	2000      	movs	r0, #0
 80167ee:	2100      	movs	r1, #0
 80167f0:	e9c4 0100 	strd	r0, r1, [r4]
 80167f4:	e9c4 3312 	strd	r3, r3, [r4, #72]	@ 0x48
 80167f8:	60a3      	str	r3, [r4, #8]
 80167fa:	4620      	mov	r0, r4
 80167fc:	bd10      	pop	{r4, pc}
 80167fe:	bf00      	nop

08016800 <rmw_get_zero_initialized_init_options>:
 8016800:	b510      	push	{r4, lr}
 8016802:	2238      	movs	r2, #56	@ 0x38
 8016804:	4604      	mov	r4, r0
 8016806:	2100      	movs	r1, #0
 8016808:	f004 fdca 	bl	801b3a0 <memset>
 801680c:	f104 0010 	add.w	r0, r4, #16
 8016810:	f000 f806 	bl	8016820 <rmw_get_default_security_options>
 8016814:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8016818:	60e3      	str	r3, [r4, #12]
 801681a:	4620      	mov	r0, r4
 801681c:	bd10      	pop	{r4, pc}
 801681e:	bf00      	nop

08016820 <rmw_get_default_security_options>:
 8016820:	2200      	movs	r2, #0
 8016822:	7002      	strb	r2, [r0, #0]
 8016824:	6042      	str	r2, [r0, #4]
 8016826:	4770      	bx	lr

08016828 <rmw_subscription_content_filter_options_fini>:
 8016828:	b1b0      	cbz	r0, 8016858 <rmw_subscription_content_filter_options_fini+0x30>
 801682a:	b538      	push	{r3, r4, r5, lr}
 801682c:	4604      	mov	r4, r0
 801682e:	4608      	mov	r0, r1
 8016830:	460d      	mov	r5, r1
 8016832:	f7f6 faa5 	bl	800cd80 <rcutils_allocator_is_valid>
 8016836:	b168      	cbz	r0, 8016854 <rmw_subscription_content_filter_options_fini+0x2c>
 8016838:	6820      	ldr	r0, [r4, #0]
 801683a:	b120      	cbz	r0, 8016846 <rmw_subscription_content_filter_options_fini+0x1e>
 801683c:	686b      	ldr	r3, [r5, #4]
 801683e:	6929      	ldr	r1, [r5, #16]
 8016840:	4798      	blx	r3
 8016842:	2300      	movs	r3, #0
 8016844:	6023      	str	r3, [r4, #0]
 8016846:	1d20      	adds	r0, r4, #4
 8016848:	f003 fc12 	bl	801a070 <rcutils_string_array_fini>
 801684c:	3800      	subs	r0, #0
 801684e:	bf18      	it	ne
 8016850:	2001      	movne	r0, #1
 8016852:	bd38      	pop	{r3, r4, r5, pc}
 8016854:	200b      	movs	r0, #11
 8016856:	bd38      	pop	{r3, r4, r5, pc}
 8016858:	200b      	movs	r0, #11
 801685a:	4770      	bx	lr

0801685c <rmw_get_default_subscription_options>:
 801685c:	2200      	movs	r2, #0
 801685e:	e9c0 2200 	strd	r2, r2, [r0]
 8016862:	6082      	str	r2, [r0, #8]
 8016864:	4770      	bx	lr
 8016866:	bf00      	nop

08016868 <rmw_time_equal>:
 8016868:	b4f0      	push	{r4, r5, r6, r7}
 801686a:	b084      	sub	sp, #16
 801686c:	ac04      	add	r4, sp, #16
 801686e:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8016872:	4603      	mov	r3, r0
 8016874:	4924      	ldr	r1, [pc, #144]	@ (8016908 <rmw_time_equal+0xa0>)
 8016876:	9e03      	ldr	r6, [sp, #12]
 8016878:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 801687c:	2202      	movs	r2, #2
 801687e:	4299      	cmp	r1, r3
 8016880:	41aa      	sbcs	r2, r5
 8016882:	d330      	bcc.n	80168e6 <rmw_time_equal+0x7e>
 8016884:	4c21      	ldr	r4, [pc, #132]	@ (801690c <rmw_time_equal+0xa4>)
 8016886:	fba3 3204 	umull	r3, r2, r3, r4
 801688a:	fb04 2205 	mla	r2, r4, r5, r2
 801688e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8016892:	43dd      	mvns	r5, r3
 8016894:	1a8c      	subs	r4, r1, r2
 8016896:	4285      	cmp	r5, r0
 8016898:	41b4      	sbcs	r4, r6
 801689a:	d332      	bcc.n	8016902 <rmw_time_equal+0x9a>
 801689c:	eb10 0c03 	adds.w	ip, r0, r3
 80168a0:	eb42 0106 	adc.w	r1, r2, r6
 80168a4:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 80168a8:	4817      	ldr	r0, [pc, #92]	@ (8016908 <rmw_time_equal+0xa0>)
 80168aa:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80168ac:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80168ae:	2202      	movs	r2, #2
 80168b0:	4298      	cmp	r0, r3
 80168b2:	41b2      	sbcs	r2, r6
 80168b4:	d31c      	bcc.n	80168f0 <rmw_time_equal+0x88>
 80168b6:	4c15      	ldr	r4, [pc, #84]	@ (801690c <rmw_time_equal+0xa4>)
 80168b8:	fba3 3204 	umull	r3, r2, r3, r4
 80168bc:	fb04 2206 	mla	r2, r4, r6, r2
 80168c0:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 80168c4:	43de      	mvns	r6, r3
 80168c6:	1a84      	subs	r4, r0, r2
 80168c8:	42ae      	cmp	r6, r5
 80168ca:	41bc      	sbcs	r4, r7
 80168cc:	d315      	bcc.n	80168fa <rmw_time_equal+0x92>
 80168ce:	195b      	adds	r3, r3, r5
 80168d0:	eb42 0207 	adc.w	r2, r2, r7
 80168d4:	428a      	cmp	r2, r1
 80168d6:	bf08      	it	eq
 80168d8:	4563      	cmpeq	r3, ip
 80168da:	bf0c      	ite	eq
 80168dc:	2001      	moveq	r0, #1
 80168de:	2000      	movne	r0, #0
 80168e0:	b004      	add	sp, #16
 80168e2:	bcf0      	pop	{r4, r5, r6, r7}
 80168e4:	4770      	bx	lr
 80168e6:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80168ea:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80168ee:	e7d9      	b.n	80168a4 <rmw_time_equal+0x3c>
 80168f0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80168f4:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80168f8:	e7ec      	b.n	80168d4 <rmw_time_equal+0x6c>
 80168fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80168fe:	4602      	mov	r2, r0
 8016900:	e7e8      	b.n	80168d4 <rmw_time_equal+0x6c>
 8016902:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8016906:	e7cd      	b.n	80168a4 <rmw_time_equal+0x3c>
 8016908:	25c17d04 	.word	0x25c17d04
 801690c:	3b9aca00 	.word	0x3b9aca00

08016910 <rmw_time_total_nsec>:
 8016910:	b470      	push	{r4, r5, r6}
 8016912:	b085      	sub	sp, #20
 8016914:	ac04      	add	r4, sp, #16
 8016916:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801691a:	4603      	mov	r3, r0
 801691c:	4912      	ldr	r1, [pc, #72]	@ (8016968 <rmw_time_total_nsec+0x58>)
 801691e:	9e03      	ldr	r6, [sp, #12]
 8016920:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 8016924:	2202      	movs	r2, #2
 8016926:	4299      	cmp	r1, r3
 8016928:	41aa      	sbcs	r2, r5
 801692a:	d311      	bcc.n	8016950 <rmw_time_total_nsec+0x40>
 801692c:	4c0f      	ldr	r4, [pc, #60]	@ (801696c <rmw_time_total_nsec+0x5c>)
 801692e:	fba3 3204 	umull	r3, r2, r3, r4
 8016932:	fb04 2205 	mla	r2, r4, r5, r2
 8016936:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801693a:	43dd      	mvns	r5, r3
 801693c:	1a8c      	subs	r4, r1, r2
 801693e:	4285      	cmp	r5, r0
 8016940:	41b4      	sbcs	r4, r6
 8016942:	d30c      	bcc.n	801695e <rmw_time_total_nsec+0x4e>
 8016944:	1818      	adds	r0, r3, r0
 8016946:	eb42 0106 	adc.w	r1, r2, r6
 801694a:	b005      	add	sp, #20
 801694c:	bc70      	pop	{r4, r5, r6}
 801694e:	4770      	bx	lr
 8016950:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016954:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8016958:	b005      	add	sp, #20
 801695a:	bc70      	pop	{r4, r5, r6}
 801695c:	4770      	bx	lr
 801695e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016962:	b005      	add	sp, #20
 8016964:	bc70      	pop	{r4, r5, r6}
 8016966:	4770      	bx	lr
 8016968:	25c17d04 	.word	0x25c17d04
 801696c:	3b9aca00 	.word	0x3b9aca00

08016970 <rmw_get_zero_initialized_message_info>:
 8016970:	b510      	push	{r4, lr}
 8016972:	2240      	movs	r2, #64	@ 0x40
 8016974:	4604      	mov	r4, r0
 8016976:	2100      	movs	r1, #0
 8016978:	f004 fd12 	bl	801b3a0 <memset>
 801697c:	4620      	mov	r0, r4
 801697e:	bd10      	pop	{r4, pc}

08016980 <rmw_validate_full_topic_name>:
 8016980:	2800      	cmp	r0, #0
 8016982:	d057      	beq.n	8016a34 <rmw_validate_full_topic_name+0xb4>
 8016984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016988:	460d      	mov	r5, r1
 801698a:	2900      	cmp	r1, #0
 801698c:	d054      	beq.n	8016a38 <rmw_validate_full_topic_name+0xb8>
 801698e:	4616      	mov	r6, r2
 8016990:	4604      	mov	r4, r0
 8016992:	f7e9 fc3f 	bl	8000214 <strlen>
 8016996:	b148      	cbz	r0, 80169ac <rmw_validate_full_topic_name+0x2c>
 8016998:	7823      	ldrb	r3, [r4, #0]
 801699a:	2b2f      	cmp	r3, #47	@ 0x2f
 801699c:	d00d      	beq.n	80169ba <rmw_validate_full_topic_name+0x3a>
 801699e:	2302      	movs	r3, #2
 80169a0:	602b      	str	r3, [r5, #0]
 80169a2:	b13e      	cbz	r6, 80169b4 <rmw_validate_full_topic_name+0x34>
 80169a4:	2000      	movs	r0, #0
 80169a6:	6030      	str	r0, [r6, #0]
 80169a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80169ac:	2301      	movs	r3, #1
 80169ae:	602b      	str	r3, [r5, #0]
 80169b0:	2e00      	cmp	r6, #0
 80169b2:	d1f7      	bne.n	80169a4 <rmw_validate_full_topic_name+0x24>
 80169b4:	2000      	movs	r0, #0
 80169b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80169ba:	1e43      	subs	r3, r0, #1
 80169bc:	5ce2      	ldrb	r2, [r4, r3]
 80169be:	2a2f      	cmp	r2, #47	@ 0x2f
 80169c0:	d03c      	beq.n	8016a3c <rmw_validate_full_topic_name+0xbc>
 80169c2:	1e63      	subs	r3, r4, #1
 80169c4:	eb03 0800 	add.w	r8, r3, r0
 80169c8:	f1c4 0e01 	rsb	lr, r4, #1
 80169cc:	eb0e 0703 	add.w	r7, lr, r3
 80169d0:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 80169d4:	f021 0220 	bic.w	r2, r1, #32
 80169d8:	3a41      	subs	r2, #65	@ 0x41
 80169da:	2a19      	cmp	r2, #25
 80169dc:	f1a1 0c2f 	sub.w	ip, r1, #47	@ 0x2f
 80169e0:	d90b      	bls.n	80169fa <rmw_validate_full_topic_name+0x7a>
 80169e2:	295f      	cmp	r1, #95	@ 0x5f
 80169e4:	d009      	beq.n	80169fa <rmw_validate_full_topic_name+0x7a>
 80169e6:	f1bc 0f0a 	cmp.w	ip, #10
 80169ea:	d906      	bls.n	80169fa <rmw_validate_full_topic_name+0x7a>
 80169ec:	2304      	movs	r3, #4
 80169ee:	602b      	str	r3, [r5, #0]
 80169f0:	2e00      	cmp	r6, #0
 80169f2:	d0df      	beq.n	80169b4 <rmw_validate_full_topic_name+0x34>
 80169f4:	6037      	str	r7, [r6, #0]
 80169f6:	2000      	movs	r0, #0
 80169f8:	e7d6      	b.n	80169a8 <rmw_validate_full_topic_name+0x28>
 80169fa:	4543      	cmp	r3, r8
 80169fc:	d1e6      	bne.n	80169cc <rmw_validate_full_topic_name+0x4c>
 80169fe:	4f1a      	ldr	r7, [pc, #104]	@ (8016a68 <rmw_validate_full_topic_name+0xe8>)
 8016a00:	2301      	movs	r3, #1
 8016a02:	e004      	b.n	8016a0e <rmw_validate_full_topic_name+0x8e>
 8016a04:	4298      	cmp	r0, r3
 8016a06:	f104 0401 	add.w	r4, r4, #1
 8016a0a:	d91c      	bls.n	8016a46 <rmw_validate_full_topic_name+0xc6>
 8016a0c:	4613      	mov	r3, r2
 8016a0e:	4298      	cmp	r0, r3
 8016a10:	f103 0201 	add.w	r2, r3, #1
 8016a14:	d0f6      	beq.n	8016a04 <rmw_validate_full_topic_name+0x84>
 8016a16:	7821      	ldrb	r1, [r4, #0]
 8016a18:	292f      	cmp	r1, #47	@ 0x2f
 8016a1a:	d1f3      	bne.n	8016a04 <rmw_validate_full_topic_name+0x84>
 8016a1c:	7861      	ldrb	r1, [r4, #1]
 8016a1e:	292f      	cmp	r1, #47	@ 0x2f
 8016a20:	d01c      	beq.n	8016a5c <rmw_validate_full_topic_name+0xdc>
 8016a22:	5dc9      	ldrb	r1, [r1, r7]
 8016a24:	0749      	lsls	r1, r1, #29
 8016a26:	d5ed      	bpl.n	8016a04 <rmw_validate_full_topic_name+0x84>
 8016a28:	2206      	movs	r2, #6
 8016a2a:	602a      	str	r2, [r5, #0]
 8016a2c:	2e00      	cmp	r6, #0
 8016a2e:	d0c1      	beq.n	80169b4 <rmw_validate_full_topic_name+0x34>
 8016a30:	6033      	str	r3, [r6, #0]
 8016a32:	e7bf      	b.n	80169b4 <rmw_validate_full_topic_name+0x34>
 8016a34:	200b      	movs	r0, #11
 8016a36:	4770      	bx	lr
 8016a38:	200b      	movs	r0, #11
 8016a3a:	e7b5      	b.n	80169a8 <rmw_validate_full_topic_name+0x28>
 8016a3c:	2203      	movs	r2, #3
 8016a3e:	602a      	str	r2, [r5, #0]
 8016a40:	2e00      	cmp	r6, #0
 8016a42:	d1f5      	bne.n	8016a30 <rmw_validate_full_topic_name+0xb0>
 8016a44:	e7b6      	b.n	80169b4 <rmw_validate_full_topic_name+0x34>
 8016a46:	28f7      	cmp	r0, #247	@ 0xf7
 8016a48:	d802      	bhi.n	8016a50 <rmw_validate_full_topic_name+0xd0>
 8016a4a:	2000      	movs	r0, #0
 8016a4c:	6028      	str	r0, [r5, #0]
 8016a4e:	e7ab      	b.n	80169a8 <rmw_validate_full_topic_name+0x28>
 8016a50:	2307      	movs	r3, #7
 8016a52:	602b      	str	r3, [r5, #0]
 8016a54:	2e00      	cmp	r6, #0
 8016a56:	d0ad      	beq.n	80169b4 <rmw_validate_full_topic_name+0x34>
 8016a58:	23f6      	movs	r3, #246	@ 0xf6
 8016a5a:	e7e9      	b.n	8016a30 <rmw_validate_full_topic_name+0xb0>
 8016a5c:	2205      	movs	r2, #5
 8016a5e:	602a      	str	r2, [r5, #0]
 8016a60:	2e00      	cmp	r6, #0
 8016a62:	d1e5      	bne.n	8016a30 <rmw_validate_full_topic_name+0xb0>
 8016a64:	e7a6      	b.n	80169b4 <rmw_validate_full_topic_name+0x34>
 8016a66:	bf00      	nop
 8016a68:	0801e041 	.word	0x0801e041

08016a6c <rmw_validate_namespace_with_size>:
 8016a6c:	b340      	cbz	r0, 8016ac0 <rmw_validate_namespace_with_size+0x54>
 8016a6e:	b570      	push	{r4, r5, r6, lr}
 8016a70:	4614      	mov	r4, r2
 8016a72:	b0c2      	sub	sp, #264	@ 0x108
 8016a74:	b332      	cbz	r2, 8016ac4 <rmw_validate_namespace_with_size+0x58>
 8016a76:	2901      	cmp	r1, #1
 8016a78:	460d      	mov	r5, r1
 8016a7a:	461e      	mov	r6, r3
 8016a7c:	d102      	bne.n	8016a84 <rmw_validate_namespace_with_size+0x18>
 8016a7e:	7803      	ldrb	r3, [r0, #0]
 8016a80:	2b2f      	cmp	r3, #47	@ 0x2f
 8016a82:	d012      	beq.n	8016aaa <rmw_validate_namespace_with_size+0x3e>
 8016a84:	aa01      	add	r2, sp, #4
 8016a86:	4669      	mov	r1, sp
 8016a88:	f7ff ff7a 	bl	8016980 <rmw_validate_full_topic_name>
 8016a8c:	b978      	cbnz	r0, 8016aae <rmw_validate_namespace_with_size+0x42>
 8016a8e:	9b00      	ldr	r3, [sp, #0]
 8016a90:	b14b      	cbz	r3, 8016aa6 <rmw_validate_namespace_with_size+0x3a>
 8016a92:	2b07      	cmp	r3, #7
 8016a94:	d007      	beq.n	8016aa6 <rmw_validate_namespace_with_size+0x3a>
 8016a96:	1e5a      	subs	r2, r3, #1
 8016a98:	2a05      	cmp	r2, #5
 8016a9a:	d82b      	bhi.n	8016af4 <rmw_validate_namespace_with_size+0x88>
 8016a9c:	e8df f002 	tbb	[pc, r2]
 8016aa0:	1e212427 	.word	0x1e212427
 8016aa4:	141b      	.short	0x141b
 8016aa6:	2df5      	cmp	r5, #245	@ 0xf5
 8016aa8:	d803      	bhi.n	8016ab2 <rmw_validate_namespace_with_size+0x46>
 8016aaa:	2000      	movs	r0, #0
 8016aac:	6020      	str	r0, [r4, #0]
 8016aae:	b042      	add	sp, #264	@ 0x108
 8016ab0:	bd70      	pop	{r4, r5, r6, pc}
 8016ab2:	2307      	movs	r3, #7
 8016ab4:	6023      	str	r3, [r4, #0]
 8016ab6:	2e00      	cmp	r6, #0
 8016ab8:	d0f9      	beq.n	8016aae <rmw_validate_namespace_with_size+0x42>
 8016aba:	23f4      	movs	r3, #244	@ 0xf4
 8016abc:	6033      	str	r3, [r6, #0]
 8016abe:	e7f6      	b.n	8016aae <rmw_validate_namespace_with_size+0x42>
 8016ac0:	200b      	movs	r0, #11
 8016ac2:	4770      	bx	lr
 8016ac4:	200b      	movs	r0, #11
 8016ac6:	e7f2      	b.n	8016aae <rmw_validate_namespace_with_size+0x42>
 8016ac8:	2306      	movs	r3, #6
 8016aca:	6023      	str	r3, [r4, #0]
 8016acc:	2e00      	cmp	r6, #0
 8016ace:	d0ee      	beq.n	8016aae <rmw_validate_namespace_with_size+0x42>
 8016ad0:	9b01      	ldr	r3, [sp, #4]
 8016ad2:	6033      	str	r3, [r6, #0]
 8016ad4:	e7eb      	b.n	8016aae <rmw_validate_namespace_with_size+0x42>
 8016ad6:	2305      	movs	r3, #5
 8016ad8:	6023      	str	r3, [r4, #0]
 8016ada:	e7f7      	b.n	8016acc <rmw_validate_namespace_with_size+0x60>
 8016adc:	2304      	movs	r3, #4
 8016ade:	6023      	str	r3, [r4, #0]
 8016ae0:	e7f4      	b.n	8016acc <rmw_validate_namespace_with_size+0x60>
 8016ae2:	2303      	movs	r3, #3
 8016ae4:	6023      	str	r3, [r4, #0]
 8016ae6:	e7f1      	b.n	8016acc <rmw_validate_namespace_with_size+0x60>
 8016ae8:	2302      	movs	r3, #2
 8016aea:	6023      	str	r3, [r4, #0]
 8016aec:	e7ee      	b.n	8016acc <rmw_validate_namespace_with_size+0x60>
 8016aee:	2301      	movs	r3, #1
 8016af0:	6023      	str	r3, [r4, #0]
 8016af2:	e7eb      	b.n	8016acc <rmw_validate_namespace_with_size+0x60>
 8016af4:	4a03      	ldr	r2, [pc, #12]	@ (8016b04 <rmw_validate_namespace_with_size+0x98>)
 8016af6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8016afa:	a802      	add	r0, sp, #8
 8016afc:	f7ff fcda 	bl	80164b4 <rcutils_snprintf>
 8016b00:	2001      	movs	r0, #1
 8016b02:	e7d4      	b.n	8016aae <rmw_validate_namespace_with_size+0x42>
 8016b04:	0801d228 	.word	0x0801d228

08016b08 <rmw_validate_namespace>:
 8016b08:	b168      	cbz	r0, 8016b26 <rmw_validate_namespace+0x1e>
 8016b0a:	b570      	push	{r4, r5, r6, lr}
 8016b0c:	460d      	mov	r5, r1
 8016b0e:	4616      	mov	r6, r2
 8016b10:	4604      	mov	r4, r0
 8016b12:	f7e9 fb7f 	bl	8000214 <strlen>
 8016b16:	4633      	mov	r3, r6
 8016b18:	4601      	mov	r1, r0
 8016b1a:	462a      	mov	r2, r5
 8016b1c:	4620      	mov	r0, r4
 8016b1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016b22:	f7ff bfa3 	b.w	8016a6c <rmw_validate_namespace_with_size>
 8016b26:	200b      	movs	r0, #11
 8016b28:	4770      	bx	lr
 8016b2a:	bf00      	nop

08016b2c <rmw_namespace_validation_result_string>:
 8016b2c:	2807      	cmp	r0, #7
 8016b2e:	bf9a      	itte	ls
 8016b30:	4b02      	ldrls	r3, [pc, #8]	@ (8016b3c <rmw_namespace_validation_result_string+0x10>)
 8016b32:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8016b36:	4802      	ldrhi	r0, [pc, #8]	@ (8016b40 <rmw_namespace_validation_result_string+0x14>)
 8016b38:	4770      	bx	lr
 8016b3a:	bf00      	nop
 8016b3c:	0801dcac 	.word	0x0801dcac
 8016b40:	0801d278 	.word	0x0801d278

08016b44 <rmw_validate_node_name>:
 8016b44:	2800      	cmp	r0, #0
 8016b46:	d03b      	beq.n	8016bc0 <rmw_validate_node_name+0x7c>
 8016b48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016b4c:	460d      	mov	r5, r1
 8016b4e:	2900      	cmp	r1, #0
 8016b50:	d038      	beq.n	8016bc4 <rmw_validate_node_name+0x80>
 8016b52:	4616      	mov	r6, r2
 8016b54:	4604      	mov	r4, r0
 8016b56:	f7e9 fb5d 	bl	8000214 <strlen>
 8016b5a:	b1e0      	cbz	r0, 8016b96 <rmw_validate_node_name+0x52>
 8016b5c:	1e63      	subs	r3, r4, #1
 8016b5e:	eb03 0800 	add.w	r8, r3, r0
 8016b62:	f1c4 0101 	rsb	r1, r4, #1
 8016b66:	18cf      	adds	r7, r1, r3
 8016b68:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 8016b6c:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 8016b70:	f02e 0c20 	bic.w	ip, lr, #32
 8016b74:	2a09      	cmp	r2, #9
 8016b76:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 8016b7a:	d914      	bls.n	8016ba6 <rmw_validate_node_name+0x62>
 8016b7c:	f1bc 0f19 	cmp.w	ip, #25
 8016b80:	d911      	bls.n	8016ba6 <rmw_validate_node_name+0x62>
 8016b82:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 8016b86:	d00e      	beq.n	8016ba6 <rmw_validate_node_name+0x62>
 8016b88:	2302      	movs	r3, #2
 8016b8a:	602b      	str	r3, [r5, #0]
 8016b8c:	b106      	cbz	r6, 8016b90 <rmw_validate_node_name+0x4c>
 8016b8e:	6037      	str	r7, [r6, #0]
 8016b90:	2000      	movs	r0, #0
 8016b92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016b96:	2301      	movs	r3, #1
 8016b98:	602b      	str	r3, [r5, #0]
 8016b9a:	2e00      	cmp	r6, #0
 8016b9c:	d0f8      	beq.n	8016b90 <rmw_validate_node_name+0x4c>
 8016b9e:	2000      	movs	r0, #0
 8016ba0:	6030      	str	r0, [r6, #0]
 8016ba2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016ba6:	4543      	cmp	r3, r8
 8016ba8:	d1dd      	bne.n	8016b66 <rmw_validate_node_name+0x22>
 8016baa:	7822      	ldrb	r2, [r4, #0]
 8016bac:	4b0d      	ldr	r3, [pc, #52]	@ (8016be4 <rmw_validate_node_name+0xa0>)
 8016bae:	5cd3      	ldrb	r3, [r2, r3]
 8016bb0:	f013 0304 	ands.w	r3, r3, #4
 8016bb4:	d110      	bne.n	8016bd8 <rmw_validate_node_name+0x94>
 8016bb6:	28ff      	cmp	r0, #255	@ 0xff
 8016bb8:	d806      	bhi.n	8016bc8 <rmw_validate_node_name+0x84>
 8016bba:	602b      	str	r3, [r5, #0]
 8016bbc:	4618      	mov	r0, r3
 8016bbe:	e7e8      	b.n	8016b92 <rmw_validate_node_name+0x4e>
 8016bc0:	200b      	movs	r0, #11
 8016bc2:	4770      	bx	lr
 8016bc4:	200b      	movs	r0, #11
 8016bc6:	e7e4      	b.n	8016b92 <rmw_validate_node_name+0x4e>
 8016bc8:	2204      	movs	r2, #4
 8016bca:	602a      	str	r2, [r5, #0]
 8016bcc:	2e00      	cmp	r6, #0
 8016bce:	d0df      	beq.n	8016b90 <rmw_validate_node_name+0x4c>
 8016bd0:	22fe      	movs	r2, #254	@ 0xfe
 8016bd2:	6032      	str	r2, [r6, #0]
 8016bd4:	4618      	mov	r0, r3
 8016bd6:	e7dc      	b.n	8016b92 <rmw_validate_node_name+0x4e>
 8016bd8:	2303      	movs	r3, #3
 8016bda:	602b      	str	r3, [r5, #0]
 8016bdc:	2e00      	cmp	r6, #0
 8016bde:	d1de      	bne.n	8016b9e <rmw_validate_node_name+0x5a>
 8016be0:	e7d6      	b.n	8016b90 <rmw_validate_node_name+0x4c>
 8016be2:	bf00      	nop
 8016be4:	0801e041 	.word	0x0801e041

08016be8 <rmw_node_name_validation_result_string>:
 8016be8:	2804      	cmp	r0, #4
 8016bea:	bf9a      	itte	ls
 8016bec:	4b02      	ldrls	r3, [pc, #8]	@ (8016bf8 <rmw_node_name_validation_result_string+0x10>)
 8016bee:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8016bf2:	4802      	ldrhi	r0, [pc, #8]	@ (8016bfc <rmw_node_name_validation_result_string+0x14>)
 8016bf4:	4770      	bx	lr
 8016bf6:	bf00      	nop
 8016bf8:	0801dccc 	.word	0x0801dccc
 8016bfc:	0801d420 	.word	0x0801d420

08016c00 <get_memory>:
 8016c00:	4603      	mov	r3, r0
 8016c02:	6840      	ldr	r0, [r0, #4]
 8016c04:	b158      	cbz	r0, 8016c1e <get_memory+0x1e>
 8016c06:	6842      	ldr	r2, [r0, #4]
 8016c08:	605a      	str	r2, [r3, #4]
 8016c0a:	b10a      	cbz	r2, 8016c10 <get_memory+0x10>
 8016c0c:	2100      	movs	r1, #0
 8016c0e:	6011      	str	r1, [r2, #0]
 8016c10:	681a      	ldr	r2, [r3, #0]
 8016c12:	6042      	str	r2, [r0, #4]
 8016c14:	b102      	cbz	r2, 8016c18 <get_memory+0x18>
 8016c16:	6010      	str	r0, [r2, #0]
 8016c18:	2200      	movs	r2, #0
 8016c1a:	6002      	str	r2, [r0, #0]
 8016c1c:	6018      	str	r0, [r3, #0]
 8016c1e:	4770      	bx	lr

08016c20 <put_memory>:
 8016c20:	680b      	ldr	r3, [r1, #0]
 8016c22:	b10b      	cbz	r3, 8016c28 <put_memory+0x8>
 8016c24:	684a      	ldr	r2, [r1, #4]
 8016c26:	605a      	str	r2, [r3, #4]
 8016c28:	684a      	ldr	r2, [r1, #4]
 8016c2a:	b102      	cbz	r2, 8016c2e <put_memory+0xe>
 8016c2c:	6013      	str	r3, [r2, #0]
 8016c2e:	6803      	ldr	r3, [r0, #0]
 8016c30:	428b      	cmp	r3, r1
 8016c32:	6843      	ldr	r3, [r0, #4]
 8016c34:	bf08      	it	eq
 8016c36:	6002      	streq	r2, [r0, #0]
 8016c38:	604b      	str	r3, [r1, #4]
 8016c3a:	b103      	cbz	r3, 8016c3e <put_memory+0x1e>
 8016c3c:	6019      	str	r1, [r3, #0]
 8016c3e:	2300      	movs	r3, #0
 8016c40:	600b      	str	r3, [r1, #0]
 8016c42:	6041      	str	r1, [r0, #4]
 8016c44:	4770      	bx	lr
 8016c46:	bf00      	nop

08016c48 <rmw_destroy_client>:
 8016c48:	b570      	push	{r4, r5, r6, lr}
 8016c4a:	b128      	cbz	r0, 8016c58 <rmw_destroy_client+0x10>
 8016c4c:	4604      	mov	r4, r0
 8016c4e:	6800      	ldr	r0, [r0, #0]
 8016c50:	460d      	mov	r5, r1
 8016c52:	f7f6 fed5 	bl	800da00 <is_uxrce_rmw_identifier_valid>
 8016c56:	b910      	cbnz	r0, 8016c5e <rmw_destroy_client+0x16>
 8016c58:	2401      	movs	r4, #1
 8016c5a:	4620      	mov	r0, r4
 8016c5c:	bd70      	pop	{r4, r5, r6, pc}
 8016c5e:	6863      	ldr	r3, [r4, #4]
 8016c60:	2b00      	cmp	r3, #0
 8016c62:	d0f9      	beq.n	8016c58 <rmw_destroy_client+0x10>
 8016c64:	2d00      	cmp	r5, #0
 8016c66:	d0f7      	beq.n	8016c58 <rmw_destroy_client+0x10>
 8016c68:	6828      	ldr	r0, [r5, #0]
 8016c6a:	f7f6 fec9 	bl	800da00 <is_uxrce_rmw_identifier_valid>
 8016c6e:	2800      	cmp	r0, #0
 8016c70:	d0f2      	beq.n	8016c58 <rmw_destroy_client+0x10>
 8016c72:	686e      	ldr	r6, [r5, #4]
 8016c74:	2e00      	cmp	r6, #0
 8016c76:	d0ef      	beq.n	8016c58 <rmw_destroy_client+0x10>
 8016c78:	6864      	ldr	r4, [r4, #4]
 8016c7a:	6932      	ldr	r2, [r6, #16]
 8016c7c:	6920      	ldr	r0, [r4, #16]
 8016c7e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8016c82:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016c86:	6819      	ldr	r1, [r3, #0]
 8016c88:	f002 f92e 	bl	8018ee8 <uxr_buffer_cancel_data>
 8016c8c:	4602      	mov	r2, r0
 8016c8e:	6920      	ldr	r0, [r4, #16]
 8016c90:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8016c94:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8016c98:	f7f6 fd98 	bl	800d7cc <run_xrce_session>
 8016c9c:	6920      	ldr	r0, [r4, #16]
 8016c9e:	6932      	ldr	r2, [r6, #16]
 8016ca0:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8016ca4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016ca8:	6819      	ldr	r1, [r3, #0]
 8016caa:	f7f9 fd01 	bl	80106b0 <uxr_buffer_delete_entity>
 8016cae:	4602      	mov	r2, r0
 8016cb0:	6920      	ldr	r0, [r4, #16]
 8016cb2:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8016cb6:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8016cba:	f7f6 fd87 	bl	800d7cc <run_xrce_session>
 8016cbe:	2800      	cmp	r0, #0
 8016cc0:	4628      	mov	r0, r5
 8016cc2:	bf14      	ite	ne
 8016cc4:	2400      	movne	r4, #0
 8016cc6:	2402      	moveq	r4, #2
 8016cc8:	f7f6 fc68 	bl	800d59c <rmw_uxrce_fini_client_memory>
 8016ccc:	e7c5      	b.n	8016c5a <rmw_destroy_client+0x12>
 8016cce:	bf00      	nop

08016cd0 <rmw_get_implementation_identifier>:
 8016cd0:	4b01      	ldr	r3, [pc, #4]	@ (8016cd8 <rmw_get_implementation_identifier+0x8>)
 8016cd2:	6818      	ldr	r0, [r3, #0]
 8016cd4:	4770      	bx	lr
 8016cd6:	bf00      	nop
 8016cd8:	0801dce0 	.word	0x0801dce0

08016cdc <rmw_init_options_init>:
 8016cdc:	b084      	sub	sp, #16
 8016cde:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016ce0:	b083      	sub	sp, #12
 8016ce2:	ad09      	add	r5, sp, #36	@ 0x24
 8016ce4:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 8016ce8:	b130      	cbz	r0, 8016cf8 <rmw_init_options_init+0x1c>
 8016cea:	4604      	mov	r4, r0
 8016cec:	4628      	mov	r0, r5
 8016cee:	f7f6 f847 	bl	800cd80 <rcutils_allocator_is_valid>
 8016cf2:	b108      	cbz	r0, 8016cf8 <rmw_init_options_init+0x1c>
 8016cf4:	68a6      	ldr	r6, [r4, #8]
 8016cf6:	b12e      	cbz	r6, 8016d04 <rmw_init_options_init+0x28>
 8016cf8:	200b      	movs	r0, #11
 8016cfa:	b003      	add	sp, #12
 8016cfc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8016d00:	b004      	add	sp, #16
 8016d02:	4770      	bx	lr
 8016d04:	2200      	movs	r2, #0
 8016d06:	2300      	movs	r3, #0
 8016d08:	e9c4 2300 	strd	r2, r3, [r4]
 8016d0c:	4b22      	ldr	r3, [pc, #136]	@ (8016d98 <rmw_init_options_init+0xbc>)
 8016d0e:	f8df e098 	ldr.w	lr, [pc, #152]	@ 8016da8 <rmw_init_options_init+0xcc>
 8016d12:	681b      	ldr	r3, [r3, #0]
 8016d14:	60a3      	str	r3, [r4, #8]
 8016d16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016d18:	f104 0c20 	add.w	ip, r4, #32
 8016d1c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016d20:	466f      	mov	r7, sp
 8016d22:	682b      	ldr	r3, [r5, #0]
 8016d24:	f8cc 3000 	str.w	r3, [ip]
 8016d28:	4638      	mov	r0, r7
 8016d2a:	f8c4 e01c 	str.w	lr, [r4, #28]
 8016d2e:	60e6      	str	r6, [r4, #12]
 8016d30:	f7ff fd76 	bl	8016820 <rmw_get_default_security_options>
 8016d34:	e897 0003 	ldmia.w	r7, {r0, r1}
 8016d38:	f104 0310 	add.w	r3, r4, #16
 8016d3c:	e883 0003 	stmia.w	r3, {r0, r1}
 8016d40:	2203      	movs	r2, #3
 8016d42:	4816      	ldr	r0, [pc, #88]	@ (8016d9c <rmw_init_options_init+0xc0>)
 8016d44:	4916      	ldr	r1, [pc, #88]	@ (8016da0 <rmw_init_options_init+0xc4>)
 8016d46:	7626      	strb	r6, [r4, #24]
 8016d48:	f7f6 fb68 	bl	800d41c <rmw_uxrce_init_init_options_impl_memory>
 8016d4c:	4813      	ldr	r0, [pc, #76]	@ (8016d9c <rmw_init_options_init+0xc0>)
 8016d4e:	f7ff ff57 	bl	8016c00 <get_memory>
 8016d52:	b1f0      	cbz	r0, 8016d92 <rmw_init_options_init+0xb6>
 8016d54:	4a13      	ldr	r2, [pc, #76]	@ (8016da4 <rmw_init_options_init+0xc8>)
 8016d56:	6883      	ldr	r3, [r0, #8]
 8016d58:	6851      	ldr	r1, [r2, #4]
 8016d5a:	7810      	ldrb	r0, [r2, #0]
 8016d5c:	6363      	str	r3, [r4, #52]	@ 0x34
 8016d5e:	7418      	strb	r0, [r3, #16]
 8016d60:	6159      	str	r1, [r3, #20]
 8016d62:	68d1      	ldr	r1, [r2, #12]
 8016d64:	61d9      	str	r1, [r3, #28]
 8016d66:	6911      	ldr	r1, [r2, #16]
 8016d68:	6219      	str	r1, [r3, #32]
 8016d6a:	6951      	ldr	r1, [r2, #20]
 8016d6c:	6892      	ldr	r2, [r2, #8]
 8016d6e:	619a      	str	r2, [r3, #24]
 8016d70:	6259      	str	r1, [r3, #36]	@ 0x24
 8016d72:	f7fb f935 	bl	8011fe0 <uxr_nanos>
 8016d76:	f004 f807 	bl	801ad88 <srand>
 8016d7a:	f004 f833 	bl	801ade4 <rand>
 8016d7e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8016d80:	6298      	str	r0, [r3, #40]	@ 0x28
 8016d82:	2800      	cmp	r0, #0
 8016d84:	d0f9      	beq.n	8016d7a <rmw_init_options_init+0x9e>
 8016d86:	2000      	movs	r0, #0
 8016d88:	b003      	add	sp, #12
 8016d8a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8016d8e:	b004      	add	sp, #16
 8016d90:	4770      	bx	lr
 8016d92:	2001      	movs	r0, #1
 8016d94:	e7b1      	b.n	8016cfa <rmw_init_options_init+0x1e>
 8016d96:	bf00      	nop
 8016d98:	0801dce0 	.word	0x0801dce0
 8016d9c:	20015ba4 	.word	0x20015ba4
 8016da0:	20010f90 	.word	0x20010f90
 8016da4:	20010e1c 	.word	0x20010e1c
 8016da8:	0801d100 	.word	0x0801d100

08016dac <rmw_init_options_copy>:
 8016dac:	b570      	push	{r4, r5, r6, lr}
 8016dae:	b158      	cbz	r0, 8016dc8 <rmw_init_options_copy+0x1c>
 8016db0:	460d      	mov	r5, r1
 8016db2:	b149      	cbz	r1, 8016dc8 <rmw_init_options_copy+0x1c>
 8016db4:	4604      	mov	r4, r0
 8016db6:	6880      	ldr	r0, [r0, #8]
 8016db8:	b120      	cbz	r0, 8016dc4 <rmw_init_options_copy+0x18>
 8016dba:	4b1e      	ldr	r3, [pc, #120]	@ (8016e34 <rmw_init_options_copy+0x88>)
 8016dbc:	6819      	ldr	r1, [r3, #0]
 8016dbe:	f7e9 fa1f 	bl	8000200 <strcmp>
 8016dc2:	bb90      	cbnz	r0, 8016e2a <rmw_init_options_copy+0x7e>
 8016dc4:	68ab      	ldr	r3, [r5, #8]
 8016dc6:	b113      	cbz	r3, 8016dce <rmw_init_options_copy+0x22>
 8016dc8:	250b      	movs	r5, #11
 8016dca:	4628      	mov	r0, r5
 8016dcc:	bd70      	pop	{r4, r5, r6, pc}
 8016dce:	4623      	mov	r3, r4
 8016dd0:	462a      	mov	r2, r5
 8016dd2:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 8016dd6:	f8d3 c000 	ldr.w	ip, [r3]
 8016dda:	6858      	ldr	r0, [r3, #4]
 8016ddc:	6899      	ldr	r1, [r3, #8]
 8016dde:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8016de2:	f8c2 e00c 	str.w	lr, [r2, #12]
 8016de6:	3310      	adds	r3, #16
 8016de8:	42b3      	cmp	r3, r6
 8016dea:	f8c2 c000 	str.w	ip, [r2]
 8016dee:	6050      	str	r0, [r2, #4]
 8016df0:	6091      	str	r1, [r2, #8]
 8016df2:	f102 0210 	add.w	r2, r2, #16
 8016df6:	d1ee      	bne.n	8016dd6 <rmw_init_options_copy+0x2a>
 8016df8:	6819      	ldr	r1, [r3, #0]
 8016dfa:	685b      	ldr	r3, [r3, #4]
 8016dfc:	480e      	ldr	r0, [pc, #56]	@ (8016e38 <rmw_init_options_copy+0x8c>)
 8016dfe:	6053      	str	r3, [r2, #4]
 8016e00:	6011      	str	r1, [r2, #0]
 8016e02:	f7ff fefd 	bl	8016c00 <get_memory>
 8016e06:	b198      	cbz	r0, 8016e30 <rmw_init_options_copy+0x84>
 8016e08:	6883      	ldr	r3, [r0, #8]
 8016e0a:	636b      	str	r3, [r5, #52]	@ 0x34
 8016e0c:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8016e0e:	f102 0c10 	add.w	ip, r2, #16
 8016e12:	f103 0410 	add.w	r4, r3, #16
 8016e16:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8016e1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016e1c:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8016e20:	2500      	movs	r5, #0
 8016e22:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8016e26:	4628      	mov	r0, r5
 8016e28:	bd70      	pop	{r4, r5, r6, pc}
 8016e2a:	250c      	movs	r5, #12
 8016e2c:	4628      	mov	r0, r5
 8016e2e:	bd70      	pop	{r4, r5, r6, pc}
 8016e30:	2501      	movs	r5, #1
 8016e32:	e7ca      	b.n	8016dca <rmw_init_options_copy+0x1e>
 8016e34:	0801dce0 	.word	0x0801dce0
 8016e38:	20015ba4 	.word	0x20015ba4

08016e3c <rmw_init_options_fini>:
 8016e3c:	2800      	cmp	r0, #0
 8016e3e:	d03d      	beq.n	8016ebc <rmw_init_options_fini+0x80>
 8016e40:	b510      	push	{r4, lr}
 8016e42:	4604      	mov	r4, r0
 8016e44:	b08e      	sub	sp, #56	@ 0x38
 8016e46:	3020      	adds	r0, #32
 8016e48:	f7f5 ff9a 	bl	800cd80 <rcutils_allocator_is_valid>
 8016e4c:	b360      	cbz	r0, 8016ea8 <rmw_init_options_fini+0x6c>
 8016e4e:	68a0      	ldr	r0, [r4, #8]
 8016e50:	b120      	cbz	r0, 8016e5c <rmw_init_options_fini+0x20>
 8016e52:	4b1c      	ldr	r3, [pc, #112]	@ (8016ec4 <rmw_init_options_fini+0x88>)
 8016e54:	6819      	ldr	r1, [r3, #0]
 8016e56:	f7e9 f9d3 	bl	8000200 <strcmp>
 8016e5a:	bb68      	cbnz	r0, 8016eb8 <rmw_init_options_fini+0x7c>
 8016e5c:	4b1a      	ldr	r3, [pc, #104]	@ (8016ec8 <rmw_init_options_fini+0x8c>)
 8016e5e:	6819      	ldr	r1, [r3, #0]
 8016e60:	b331      	cbz	r1, 8016eb0 <rmw_init_options_fini+0x74>
 8016e62:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8016e64:	e001      	b.n	8016e6a <rmw_init_options_fini+0x2e>
 8016e66:	6849      	ldr	r1, [r1, #4]
 8016e68:	b311      	cbz	r1, 8016eb0 <rmw_init_options_fini+0x74>
 8016e6a:	688b      	ldr	r3, [r1, #8]
 8016e6c:	429a      	cmp	r2, r3
 8016e6e:	d1fa      	bne.n	8016e66 <rmw_init_options_fini+0x2a>
 8016e70:	4815      	ldr	r0, [pc, #84]	@ (8016ec8 <rmw_init_options_fini+0x8c>)
 8016e72:	f7ff fed5 	bl	8016c20 <put_memory>
 8016e76:	4668      	mov	r0, sp
 8016e78:	f7ff fcc2 	bl	8016800 <rmw_get_zero_initialized_init_options>
 8016e7c:	46ee      	mov	lr, sp
 8016e7e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016e82:	46a4      	mov	ip, r4
 8016e84:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016e88:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016e8c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016e90:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016e94:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016e98:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8016e9c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8016ea0:	2300      	movs	r3, #0
 8016ea2:	4618      	mov	r0, r3
 8016ea4:	b00e      	add	sp, #56	@ 0x38
 8016ea6:	bd10      	pop	{r4, pc}
 8016ea8:	230b      	movs	r3, #11
 8016eaa:	4618      	mov	r0, r3
 8016eac:	b00e      	add	sp, #56	@ 0x38
 8016eae:	bd10      	pop	{r4, pc}
 8016eb0:	2301      	movs	r3, #1
 8016eb2:	4618      	mov	r0, r3
 8016eb4:	b00e      	add	sp, #56	@ 0x38
 8016eb6:	bd10      	pop	{r4, pc}
 8016eb8:	230c      	movs	r3, #12
 8016eba:	e7f2      	b.n	8016ea2 <rmw_init_options_fini+0x66>
 8016ebc:	230b      	movs	r3, #11
 8016ebe:	4618      	mov	r0, r3
 8016ec0:	4770      	bx	lr
 8016ec2:	bf00      	nop
 8016ec4:	0801dce0 	.word	0x0801dce0
 8016ec8:	20015ba4 	.word	0x20015ba4

08016ecc <rmw_init>:
 8016ecc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016ed0:	b083      	sub	sp, #12
 8016ed2:	2800      	cmp	r0, #0
 8016ed4:	f000 80d3 	beq.w	801707e <rmw_init+0x1b2>
 8016ed8:	460e      	mov	r6, r1
 8016eda:	2900      	cmp	r1, #0
 8016edc:	f000 80cf 	beq.w	801707e <rmw_init+0x1b2>
 8016ee0:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8016ee2:	4605      	mov	r5, r0
 8016ee4:	2b00      	cmp	r3, #0
 8016ee6:	f000 80ca 	beq.w	801707e <rmw_init+0x1b2>
 8016eea:	4b78      	ldr	r3, [pc, #480]	@ (80170cc <rmw_init+0x200>)
 8016eec:	6880      	ldr	r0, [r0, #8]
 8016eee:	681f      	ldr	r7, [r3, #0]
 8016ef0:	b128      	cbz	r0, 8016efe <rmw_init+0x32>
 8016ef2:	4639      	mov	r1, r7
 8016ef4:	f7e9 f984 	bl	8000200 <strcmp>
 8016ef8:	2800      	cmp	r0, #0
 8016efa:	f040 80ca 	bne.w	8017092 <rmw_init+0x1c6>
 8016efe:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016f02:	4c73      	ldr	r4, [pc, #460]	@ (80170d0 <rmw_init+0x204>)
 8016f04:	4973      	ldr	r1, [pc, #460]	@ (80170d4 <rmw_init+0x208>)
 8016f06:	4874      	ldr	r0, [pc, #464]	@ (80170d8 <rmw_init+0x20c>)
 8016f08:	60b7      	str	r7, [r6, #8]
 8016f0a:	e9c6 2300 	strd	r2, r3, [r6]
 8016f0e:	68eb      	ldr	r3, [r5, #12]
 8016f10:	64b3      	str	r3, [r6, #72]	@ 0x48
 8016f12:	2201      	movs	r2, #1
 8016f14:	f7f6 fa22 	bl	800d35c <rmw_uxrce_init_session_memory>
 8016f18:	4620      	mov	r0, r4
 8016f1a:	4970      	ldr	r1, [pc, #448]	@ (80170dc <rmw_init+0x210>)
 8016f1c:	2204      	movs	r2, #4
 8016f1e:	f7f6 fa5d 	bl	800d3dc <rmw_uxrce_init_static_input_buffer_memory>
 8016f22:	f04f 0800 	mov.w	r8, #0
 8016f26:	486c      	ldr	r0, [pc, #432]	@ (80170d8 <rmw_init+0x20c>)
 8016f28:	f884 800d 	strb.w	r8, [r4, #13]
 8016f2c:	f7ff fe68 	bl	8016c00 <get_memory>
 8016f30:	2800      	cmp	r0, #0
 8016f32:	f000 80a9 	beq.w	8017088 <rmw_init+0x1bc>
 8016f36:	6884      	ldr	r4, [r0, #8]
 8016f38:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 8016f3a:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 8016f3c:	f890 c010 	ldrb.w	ip, [r0, #16]
 8016f40:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 8016f44:	9101      	str	r1, [sp, #4]
 8016f46:	6a00      	ldr	r0, [r0, #32]
 8016f48:	9000      	str	r0, [sp, #0]
 8016f4a:	f104 0910 	add.w	r9, r4, #16
 8016f4e:	4661      	mov	r1, ip
 8016f50:	4648      	mov	r0, r9
 8016f52:	f001 fa01 	bl	8018358 <uxr_set_custom_transport_callbacks>
 8016f56:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 8016f5a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8016f5e:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 8016f62:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 8016f66:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 8016f6a:	495d      	ldr	r1, [pc, #372]	@ (80170e0 <rmw_init+0x214>)
 8016f6c:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 8016f70:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 8016f74:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 8016f78:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 8016f7c:	4859      	ldr	r0, [pc, #356]	@ (80170e4 <rmw_init+0x218>)
 8016f7e:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 8016f82:	2201      	movs	r2, #1
 8016f84:	64f4      	str	r4, [r6, #76]	@ 0x4c
 8016f86:	f7f6 f9c9 	bl	800d31c <rmw_uxrce_init_node_memory>
 8016f8a:	4957      	ldr	r1, [pc, #348]	@ (80170e8 <rmw_init+0x21c>)
 8016f8c:	4857      	ldr	r0, [pc, #348]	@ (80170ec <rmw_init+0x220>)
 8016f8e:	2205      	movs	r2, #5
 8016f90:	f7f6 f9a4 	bl	800d2dc <rmw_uxrce_init_subscription_memory>
 8016f94:	4956      	ldr	r1, [pc, #344]	@ (80170f0 <rmw_init+0x224>)
 8016f96:	4857      	ldr	r0, [pc, #348]	@ (80170f4 <rmw_init+0x228>)
 8016f98:	220a      	movs	r2, #10
 8016f9a:	f7f6 f97f 	bl	800d29c <rmw_uxrce_init_publisher_memory>
 8016f9e:	4956      	ldr	r1, [pc, #344]	@ (80170f8 <rmw_init+0x22c>)
 8016fa0:	4856      	ldr	r0, [pc, #344]	@ (80170fc <rmw_init+0x230>)
 8016fa2:	2207      	movs	r2, #7
 8016fa4:	f7f6 f93a 	bl	800d21c <rmw_uxrce_init_service_memory>
 8016fa8:	4955      	ldr	r1, [pc, #340]	@ (8017100 <rmw_init+0x234>)
 8016faa:	4856      	ldr	r0, [pc, #344]	@ (8017104 <rmw_init+0x238>)
 8016fac:	2201      	movs	r2, #1
 8016fae:	f7f6 f955 	bl	800d25c <rmw_uxrce_init_client_memory>
 8016fb2:	4955      	ldr	r1, [pc, #340]	@ (8017108 <rmw_init+0x23c>)
 8016fb4:	4855      	ldr	r0, [pc, #340]	@ (801710c <rmw_init+0x240>)
 8016fb6:	220f      	movs	r2, #15
 8016fb8:	f7f6 f9f0 	bl	800d39c <rmw_uxrce_init_topic_memory>
 8016fbc:	4954      	ldr	r1, [pc, #336]	@ (8017110 <rmw_init+0x244>)
 8016fbe:	4855      	ldr	r0, [pc, #340]	@ (8017114 <rmw_init+0x248>)
 8016fc0:	2203      	movs	r2, #3
 8016fc2:	f7f6 fa2b 	bl	800d41c <rmw_uxrce_init_init_options_impl_memory>
 8016fc6:	4954      	ldr	r1, [pc, #336]	@ (8017118 <rmw_init+0x24c>)
 8016fc8:	4854      	ldr	r0, [pc, #336]	@ (801711c <rmw_init+0x250>)
 8016fca:	2204      	movs	r2, #4
 8016fcc:	f7f6 fa46 	bl	800d45c <rmw_uxrce_init_wait_set_memory>
 8016fd0:	4953      	ldr	r1, [pc, #332]	@ (8017120 <rmw_init+0x254>)
 8016fd2:	4854      	ldr	r0, [pc, #336]	@ (8017124 <rmw_init+0x258>)
 8016fd4:	2204      	movs	r2, #4
 8016fd6:	f7f6 fa61 	bl	800d49c <rmw_uxrce_init_guard_condition_memory>
 8016fda:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 8016fdc:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 8016fde:	4642      	mov	r2, r8
 8016fe0:	f000 fe90 	bl	8017d04 <rmw_uxrce_transport_init>
 8016fe4:	4607      	mov	r7, r0
 8016fe6:	2800      	cmp	r0, #0
 8016fe8:	d158      	bne.n	801709c <rmw_init+0x1d0>
 8016fea:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8016fec:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 8016ff0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8016ff2:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 8016ff6:	4628      	mov	r0, r5
 8016ff8:	f7f9 fe56 	bl	8010ca8 <uxr_init_session>
 8016ffc:	494a      	ldr	r1, [pc, #296]	@ (8017128 <rmw_init+0x25c>)
 8016ffe:	4622      	mov	r2, r4
 8017000:	4628      	mov	r0, r5
 8017002:	f7f9 fe75 	bl	8010cf0 <uxr_set_topic_callback>
 8017006:	4949      	ldr	r1, [pc, #292]	@ (801712c <rmw_init+0x260>)
 8017008:	463a      	mov	r2, r7
 801700a:	4628      	mov	r0, r5
 801700c:	f7f9 fe6c 	bl	8010ce8 <uxr_set_status_callback>
 8017010:	4947      	ldr	r1, [pc, #284]	@ (8017130 <rmw_init+0x264>)
 8017012:	463a      	mov	r2, r7
 8017014:	4628      	mov	r0, r5
 8017016:	f7f9 fe6f 	bl	8010cf8 <uxr_set_request_callback>
 801701a:	4946      	ldr	r1, [pc, #280]	@ (8017134 <rmw_init+0x268>)
 801701c:	463a      	mov	r2, r7
 801701e:	4628      	mov	r0, r5
 8017020:	f7f9 fe6e 	bl	8010d00 <uxr_set_reply_callback>
 8017024:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8017028:	2304      	movs	r3, #4
 801702a:	0092      	lsls	r2, r2, #2
 801702c:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 8017030:	4628      	mov	r0, r5
 8017032:	f7f9 fea3 	bl	8010d7c <uxr_create_input_reliable_stream>
 8017036:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 801703a:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 801703e:	0092      	lsls	r2, r2, #2
 8017040:	2304      	movs	r3, #4
 8017042:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 8017046:	4628      	mov	r0, r5
 8017048:	f7f9 fe70 	bl	8010d2c <uxr_create_output_reliable_stream>
 801704c:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 8017050:	4628      	mov	r0, r5
 8017052:	f7f9 fe8d 	bl	8010d70 <uxr_create_input_best_effort_stream>
 8017056:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 801705a:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 801705e:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8017062:	3114      	adds	r1, #20
 8017064:	4628      	mov	r0, r5
 8017066:	f7f9 fe4f 	bl	8010d08 <uxr_create_output_best_effort_stream>
 801706a:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 801706e:	4628      	mov	r0, r5
 8017070:	f7fa fbda 	bl	8011828 <uxr_create_session>
 8017074:	b1f8      	cbz	r0, 80170b6 <rmw_init+0x1ea>
 8017076:	4638      	mov	r0, r7
 8017078:	b003      	add	sp, #12
 801707a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801707e:	270b      	movs	r7, #11
 8017080:	4638      	mov	r0, r7
 8017082:	b003      	add	sp, #12
 8017084:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017088:	2701      	movs	r7, #1
 801708a:	4638      	mov	r0, r7
 801708c:	b003      	add	sp, #12
 801708e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017092:	270c      	movs	r7, #12
 8017094:	4638      	mov	r0, r7
 8017096:	b003      	add	sp, #12
 8017098:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801709c:	4648      	mov	r0, r9
 801709e:	f001 f99d 	bl	80183dc <uxr_close_custom_transport>
 80170a2:	480d      	ldr	r0, [pc, #52]	@ (80170d8 <rmw_init+0x20c>)
 80170a4:	4621      	mov	r1, r4
 80170a6:	f7ff fdbb 	bl	8016c20 <put_memory>
 80170aa:	4638      	mov	r0, r7
 80170ac:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 80170b0:	b003      	add	sp, #12
 80170b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80170b6:	4648      	mov	r0, r9
 80170b8:	f001 f990 	bl	80183dc <uxr_close_custom_transport>
 80170bc:	4806      	ldr	r0, [pc, #24]	@ (80170d8 <rmw_init+0x20c>)
 80170be:	4621      	mov	r1, r4
 80170c0:	f7ff fdae 	bl	8016c20 <put_memory>
 80170c4:	64f7      	str	r7, [r6, #76]	@ 0x4c
 80170c6:	2701      	movs	r7, #1
 80170c8:	e7d5      	b.n	8017076 <rmw_init+0x1aa>
 80170ca:	bf00      	nop
 80170cc:	0801dce0 	.word	0x0801dce0
 80170d0:	20015bf4 	.word	0x20015bf4
 80170d4:	20011ea0 	.word	0x20011ea0
 80170d8:	20015be4 	.word	0x20015be4
 80170dc:	20013448 	.word	0x20013448
 80170e0:	20011014 	.word	0x20011014
 80170e4:	20015bb4 	.word	0x20015bb4
 80170e8:	20015548 	.word	0x20015548
 80170ec:	20015c04 	.word	0x20015c04
 80170f0:	200110b8 	.word	0x200110b8
 80170f4:	20015bc4 	.word	0x20015bc4
 80170f8:	20011928 	.word	0x20011928
 80170fc:	20015bd4 	.word	0x20015bd4
 8017100:	20010e48 	.word	0x20010e48
 8017104:	20010e38 	.word	0x20010e38
 8017108:	20015980 	.word	0x20015980
 801710c:	20015c14 	.word	0x20015c14
 8017110:	20010f90 	.word	0x20010f90
 8017114:	20015ba4 	.word	0x20015ba4
 8017118:	20015b24 	.word	0x20015b24
 801711c:	20015c24 	.word	0x20015c24
 8017120:	20010f10 	.word	0x20010f10
 8017124:	20015b94 	.word	0x20015b94
 8017128:	0801a0c9 	.word	0x0801a0c9
 801712c:	0801a0c1 	.word	0x0801a0c1
 8017130:	0801a161 	.word	0x0801a161
 8017134:	0801a1fd 	.word	0x0801a1fd

08017138 <rmw_context_fini>:
 8017138:	4b17      	ldr	r3, [pc, #92]	@ (8017198 <rmw_context_fini+0x60>)
 801713a:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 801713c:	b570      	push	{r4, r5, r6, lr}
 801713e:	681c      	ldr	r4, [r3, #0]
 8017140:	4605      	mov	r5, r0
 8017142:	b334      	cbz	r4, 8017192 <rmw_context_fini+0x5a>
 8017144:	2600      	movs	r6, #0
 8017146:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 801714a:	6902      	ldr	r2, [r0, #16]
 801714c:	428a      	cmp	r2, r1
 801714e:	d018      	beq.n	8017182 <rmw_context_fini+0x4a>
 8017150:	2c00      	cmp	r4, #0
 8017152:	d1f8      	bne.n	8017146 <rmw_context_fini+0xe>
 8017154:	b189      	cbz	r1, 801717a <rmw_context_fini+0x42>
 8017156:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 801715a:	789b      	ldrb	r3, [r3, #2]
 801715c:	2b01      	cmp	r3, #1
 801715e:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 8017162:	bf14      	ite	ne
 8017164:	210a      	movne	r1, #10
 8017166:	2100      	moveq	r1, #0
 8017168:	f7fa fb36 	bl	80117d8 <uxr_delete_session_retries>
 801716c:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 801716e:	f7f6 f9b5 	bl	800d4dc <rmw_uxrce_fini_session_memory>
 8017172:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 8017174:	3010      	adds	r0, #16
 8017176:	f001 f931 	bl	80183dc <uxr_close_custom_transport>
 801717a:	2300      	movs	r3, #0
 801717c:	64eb      	str	r3, [r5, #76]	@ 0x4c
 801717e:	4630      	mov	r0, r6
 8017180:	bd70      	pop	{r4, r5, r6, pc}
 8017182:	3018      	adds	r0, #24
 8017184:	f000 f90e 	bl	80173a4 <rmw_destroy_node>
 8017188:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 801718a:	4606      	mov	r6, r0
 801718c:	2c00      	cmp	r4, #0
 801718e:	d1da      	bne.n	8017146 <rmw_context_fini+0xe>
 8017190:	e7e0      	b.n	8017154 <rmw_context_fini+0x1c>
 8017192:	4626      	mov	r6, r4
 8017194:	e7de      	b.n	8017154 <rmw_context_fini+0x1c>
 8017196:	bf00      	nop
 8017198:	20015bb4 	.word	0x20015bb4

0801719c <create_topic>:
 801719c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80171a0:	4605      	mov	r5, r0
 80171a2:	b084      	sub	sp, #16
 80171a4:	4822      	ldr	r0, [pc, #136]	@ (8017230 <create_topic+0x94>)
 80171a6:	460f      	mov	r7, r1
 80171a8:	4616      	mov	r6, r2
 80171aa:	f7ff fd29 	bl	8016c00 <get_memory>
 80171ae:	4604      	mov	r4, r0
 80171b0:	2800      	cmp	r0, #0
 80171b2:	d039      	beq.n	8017228 <create_topic+0x8c>
 80171b4:	692b      	ldr	r3, [r5, #16]
 80171b6:	6884      	ldr	r4, [r0, #8]
 80171b8:	f8df 807c 	ldr.w	r8, [pc, #124]	@ 8017238 <create_topic+0x9c>
 80171bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80171c0:	e9c4 6505 	strd	r6, r5, [r4, #20]
 80171c4:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 80171c8:	1c42      	adds	r2, r0, #1
 80171ca:	2102      	movs	r1, #2
 80171cc:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 80171d0:	f7f9 fcaa 	bl	8010b28 <uxr_object_id>
 80171d4:	223c      	movs	r2, #60	@ 0x3c
 80171d6:	6120      	str	r0, [r4, #16]
 80171d8:	4641      	mov	r1, r8
 80171da:	4638      	mov	r0, r7
 80171dc:	f7f6 fbf6 	bl	800d9cc <generate_topic_name>
 80171e0:	b1f0      	cbz	r0, 8017220 <create_topic+0x84>
 80171e2:	4f14      	ldr	r7, [pc, #80]	@ (8017234 <create_topic+0x98>)
 80171e4:	4630      	mov	r0, r6
 80171e6:	2264      	movs	r2, #100	@ 0x64
 80171e8:	4639      	mov	r1, r7
 80171ea:	f7f6 fbbf 	bl	800d96c <generate_type_name>
 80171ee:	b1b8      	cbz	r0, 8017220 <create_topic+0x84>
 80171f0:	6928      	ldr	r0, [r5, #16]
 80171f2:	2306      	movs	r3, #6
 80171f4:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 80171f8:	f8cd 8000 	str.w	r8, [sp]
 80171fc:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8017200:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017204:	6811      	ldr	r1, [r2, #0]
 8017206:	696b      	ldr	r3, [r5, #20]
 8017208:	6922      	ldr	r2, [r4, #16]
 801720a:	f7f9 facf 	bl	80107ac <uxr_buffer_create_topic_bin>
 801720e:	4602      	mov	r2, r0
 8017210:	6928      	ldr	r0, [r5, #16]
 8017212:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8017216:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801721a:	f7f6 fad7 	bl	800d7cc <run_xrce_session>
 801721e:	b918      	cbnz	r0, 8017228 <create_topic+0x8c>
 8017220:	4620      	mov	r0, r4
 8017222:	f7f6 f9d1 	bl	800d5c8 <rmw_uxrce_fini_topic_memory>
 8017226:	2400      	movs	r4, #0
 8017228:	4620      	mov	r0, r4
 801722a:	b004      	add	sp, #16
 801722c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017230:	20015c14 	.word	0x20015c14
 8017234:	20015d68 	.word	0x20015d68
 8017238:	20015d2c 	.word	0x20015d2c

0801723c <destroy_topic>:
 801723c:	b538      	push	{r3, r4, r5, lr}
 801723e:	6985      	ldr	r5, [r0, #24]
 8017240:	b1d5      	cbz	r5, 8017278 <destroy_topic+0x3c>
 8017242:	4604      	mov	r4, r0
 8017244:	6928      	ldr	r0, [r5, #16]
 8017246:	6922      	ldr	r2, [r4, #16]
 8017248:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801724c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017250:	6819      	ldr	r1, [r3, #0]
 8017252:	f7f9 fa2d 	bl	80106b0 <uxr_buffer_delete_entity>
 8017256:	4602      	mov	r2, r0
 8017258:	6928      	ldr	r0, [r5, #16]
 801725a:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801725e:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8017262:	f7f6 fab3 	bl	800d7cc <run_xrce_session>
 8017266:	2800      	cmp	r0, #0
 8017268:	4620      	mov	r0, r4
 801726a:	bf14      	ite	ne
 801726c:	2400      	movne	r4, #0
 801726e:	2402      	moveq	r4, #2
 8017270:	f7f6 f9aa 	bl	800d5c8 <rmw_uxrce_fini_topic_memory>
 8017274:	4620      	mov	r0, r4
 8017276:	bd38      	pop	{r3, r4, r5, pc}
 8017278:	2401      	movs	r4, #1
 801727a:	4620      	mov	r0, r4
 801727c:	bd38      	pop	{r3, r4, r5, pc}
 801727e:	bf00      	nop

08017280 <create_node>:
 8017280:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017284:	b083      	sub	sp, #12
 8017286:	2b00      	cmp	r3, #0
 8017288:	d05f      	beq.n	801734a <create_node+0xca>
 801728a:	4606      	mov	r6, r0
 801728c:	4835      	ldr	r0, [pc, #212]	@ (8017364 <create_node+0xe4>)
 801728e:	460f      	mov	r7, r1
 8017290:	4690      	mov	r8, r2
 8017292:	461d      	mov	r5, r3
 8017294:	f7ff fcb4 	bl	8016c00 <get_memory>
 8017298:	2800      	cmp	r0, #0
 801729a:	d056      	beq.n	801734a <create_node+0xca>
 801729c:	6884      	ldr	r4, [r0, #8]
 801729e:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 80172a0:	6123      	str	r3, [r4, #16]
 80172a2:	f7ff fd15 	bl	8016cd0 <rmw_get_implementation_identifier>
 80172a6:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 80172aa:	e9c4 0406 	strd	r0, r4, [r4, #24]
 80172ae:	f8c4 9020 	str.w	r9, [r4, #32]
 80172b2:	4630      	mov	r0, r6
 80172b4:	f7e8 ffae 	bl	8000214 <strlen>
 80172b8:	1c42      	adds	r2, r0, #1
 80172ba:	2a3c      	cmp	r2, #60	@ 0x3c
 80172bc:	f104 0518 	add.w	r5, r4, #24
 80172c0:	d840      	bhi.n	8017344 <create_node+0xc4>
 80172c2:	4648      	mov	r0, r9
 80172c4:	4631      	mov	r1, r6
 80172c6:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 80172ca:	f004 f8ec 	bl	801b4a6 <memcpy>
 80172ce:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 80172d2:	4638      	mov	r0, r7
 80172d4:	f7e8 ff9e 	bl	8000214 <strlen>
 80172d8:	1c42      	adds	r2, r0, #1
 80172da:	2a3c      	cmp	r2, #60	@ 0x3c
 80172dc:	d832      	bhi.n	8017344 <create_node+0xc4>
 80172de:	4639      	mov	r1, r7
 80172e0:	4648      	mov	r0, r9
 80172e2:	f004 f8e0 	bl	801b4a6 <memcpy>
 80172e6:	6923      	ldr	r3, [r4, #16]
 80172e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80172ec:	2101      	movs	r1, #1
 80172ee:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 80172f2:	1842      	adds	r2, r0, r1
 80172f4:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 80172f8:	f7f9 fc16 	bl	8010b28 <uxr_object_id>
 80172fc:	6160      	str	r0, [r4, #20]
 80172fe:	783b      	ldrb	r3, [r7, #0]
 8017300:	2b2f      	cmp	r3, #47	@ 0x2f
 8017302:	d127      	bne.n	8017354 <create_node+0xd4>
 8017304:	787b      	ldrb	r3, [r7, #1]
 8017306:	bb2b      	cbnz	r3, 8017354 <create_node+0xd4>
 8017308:	4a17      	ldr	r2, [pc, #92]	@ (8017368 <create_node+0xe8>)
 801730a:	4818      	ldr	r0, [pc, #96]	@ (801736c <create_node+0xec>)
 801730c:	4633      	mov	r3, r6
 801730e:	213c      	movs	r1, #60	@ 0x3c
 8017310:	f003 fcf8 	bl	801ad04 <sniprintf>
 8017314:	6920      	ldr	r0, [r4, #16]
 8017316:	4915      	ldr	r1, [pc, #84]	@ (801736c <create_node+0xec>)
 8017318:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 801731c:	9100      	str	r1, [sp, #0]
 801731e:	2106      	movs	r1, #6
 8017320:	9101      	str	r1, [sp, #4]
 8017322:	6811      	ldr	r1, [r2, #0]
 8017324:	6962      	ldr	r2, [r4, #20]
 8017326:	fa1f f388 	uxth.w	r3, r8
 801732a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801732e:	f7f9 fa0b 	bl	8010748 <uxr_buffer_create_participant_bin>
 8017332:	4602      	mov	r2, r0
 8017334:	6920      	ldr	r0, [r4, #16]
 8017336:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801733a:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801733e:	f7f6 fa45 	bl	800d7cc <run_xrce_session>
 8017342:	b918      	cbnz	r0, 801734c <create_node+0xcc>
 8017344:	4628      	mov	r0, r5
 8017346:	f7f6 f8cf 	bl	800d4e8 <rmw_uxrce_fini_node_memory>
 801734a:	2500      	movs	r5, #0
 801734c:	4628      	mov	r0, r5
 801734e:	b003      	add	sp, #12
 8017350:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017354:	4a06      	ldr	r2, [pc, #24]	@ (8017370 <create_node+0xf0>)
 8017356:	9600      	str	r6, [sp, #0]
 8017358:	463b      	mov	r3, r7
 801735a:	213c      	movs	r1, #60	@ 0x3c
 801735c:	4803      	ldr	r0, [pc, #12]	@ (801736c <create_node+0xec>)
 801735e:	f003 fcd1 	bl	801ad04 <sniprintf>
 8017362:	e7d7      	b.n	8017314 <create_node+0x94>
 8017364:	20015bb4 	.word	0x20015bb4
 8017368:	0801cbf0 	.word	0x0801cbf0
 801736c:	20015dcc 	.word	0x20015dcc
 8017370:	0801d108 	.word	0x0801d108

08017374 <rmw_create_node>:
 8017374:	b199      	cbz	r1, 801739e <rmw_create_node+0x2a>
 8017376:	780b      	ldrb	r3, [r1, #0]
 8017378:	468c      	mov	ip, r1
 801737a:	b183      	cbz	r3, 801739e <rmw_create_node+0x2a>
 801737c:	b410      	push	{r4}
 801737e:	4614      	mov	r4, r2
 8017380:	b14a      	cbz	r2, 8017396 <rmw_create_node+0x22>
 8017382:	7813      	ldrb	r3, [r2, #0]
 8017384:	b13b      	cbz	r3, 8017396 <rmw_create_node+0x22>
 8017386:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 8017388:	4603      	mov	r3, r0
 801738a:	4621      	mov	r1, r4
 801738c:	4660      	mov	r0, ip
 801738e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017392:	f7ff bf75 	b.w	8017280 <create_node>
 8017396:	2000      	movs	r0, #0
 8017398:	f85d 4b04 	ldr.w	r4, [sp], #4
 801739c:	4770      	bx	lr
 801739e:	2000      	movs	r0, #0
 80173a0:	4770      	bx	lr
 80173a2:	bf00      	nop

080173a4 <rmw_destroy_node>:
 80173a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80173a6:	b328      	cbz	r0, 80173f4 <rmw_destroy_node+0x50>
 80173a8:	4607      	mov	r7, r0
 80173aa:	6800      	ldr	r0, [r0, #0]
 80173ac:	b120      	cbz	r0, 80173b8 <rmw_destroy_node+0x14>
 80173ae:	4b36      	ldr	r3, [pc, #216]	@ (8017488 <rmw_destroy_node+0xe4>)
 80173b0:	6819      	ldr	r1, [r3, #0]
 80173b2:	f7e8 ff25 	bl	8000200 <strcmp>
 80173b6:	b9e8      	cbnz	r0, 80173f4 <rmw_destroy_node+0x50>
 80173b8:	687d      	ldr	r5, [r7, #4]
 80173ba:	b1dd      	cbz	r5, 80173f4 <rmw_destroy_node+0x50>
 80173bc:	4b33      	ldr	r3, [pc, #204]	@ (801748c <rmw_destroy_node+0xe8>)
 80173be:	681c      	ldr	r4, [r3, #0]
 80173c0:	2c00      	cmp	r4, #0
 80173c2:	d05f      	beq.n	8017484 <rmw_destroy_node+0xe0>
 80173c4:	2600      	movs	r6, #0
 80173c6:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 80173ca:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 80173ce:	429d      	cmp	r5, r3
 80173d0:	d013      	beq.n	80173fa <rmw_destroy_node+0x56>
 80173d2:	2c00      	cmp	r4, #0
 80173d4:	d1f7      	bne.n	80173c6 <rmw_destroy_node+0x22>
 80173d6:	4b2e      	ldr	r3, [pc, #184]	@ (8017490 <rmw_destroy_node+0xec>)
 80173d8:	681c      	ldr	r4, [r3, #0]
 80173da:	b1c4      	cbz	r4, 801740e <rmw_destroy_node+0x6a>
 80173dc:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 80173e0:	6a0b      	ldr	r3, [r1, #32]
 80173e2:	429d      	cmp	r5, r3
 80173e4:	d1f9      	bne.n	80173da <rmw_destroy_node+0x36>
 80173e6:	317c      	adds	r1, #124	@ 0x7c
 80173e8:	4638      	mov	r0, r7
 80173ea:	f000 fbd7 	bl	8017b9c <rmw_destroy_subscription>
 80173ee:	2801      	cmp	r0, #1
 80173f0:	4606      	mov	r6, r0
 80173f2:	d1f2      	bne.n	80173da <rmw_destroy_node+0x36>
 80173f4:	2601      	movs	r6, #1
 80173f6:	4630      	mov	r0, r6
 80173f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80173fa:	3184      	adds	r1, #132	@ 0x84
 80173fc:	4638      	mov	r0, r7
 80173fe:	f7f5 febb 	bl	800d178 <rmw_destroy_publisher>
 8017402:	2801      	cmp	r0, #1
 8017404:	4606      	mov	r6, r0
 8017406:	d0f5      	beq.n	80173f4 <rmw_destroy_node+0x50>
 8017408:	2c00      	cmp	r4, #0
 801740a:	d1dc      	bne.n	80173c6 <rmw_destroy_node+0x22>
 801740c:	e7e3      	b.n	80173d6 <rmw_destroy_node+0x32>
 801740e:	4b21      	ldr	r3, [pc, #132]	@ (8017494 <rmw_destroy_node+0xf0>)
 8017410:	681c      	ldr	r4, [r3, #0]
 8017412:	b16c      	cbz	r4, 8017430 <rmw_destroy_node+0x8c>
 8017414:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8017418:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 801741a:	429d      	cmp	r5, r3
 801741c:	d1f9      	bne.n	8017412 <rmw_destroy_node+0x6e>
 801741e:	317c      	adds	r1, #124	@ 0x7c
 8017420:	4638      	mov	r0, r7
 8017422:	f000 fa65 	bl	80178f0 <rmw_destroy_service>
 8017426:	2801      	cmp	r0, #1
 8017428:	4606      	mov	r6, r0
 801742a:	d0e3      	beq.n	80173f4 <rmw_destroy_node+0x50>
 801742c:	2c00      	cmp	r4, #0
 801742e:	d1f1      	bne.n	8017414 <rmw_destroy_node+0x70>
 8017430:	4b19      	ldr	r3, [pc, #100]	@ (8017498 <rmw_destroy_node+0xf4>)
 8017432:	681c      	ldr	r4, [r3, #0]
 8017434:	b16c      	cbz	r4, 8017452 <rmw_destroy_node+0xae>
 8017436:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 801743a:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 801743c:	429d      	cmp	r5, r3
 801743e:	d1f9      	bne.n	8017434 <rmw_destroy_node+0x90>
 8017440:	317c      	adds	r1, #124	@ 0x7c
 8017442:	4638      	mov	r0, r7
 8017444:	f7ff fc00 	bl	8016c48 <rmw_destroy_client>
 8017448:	2801      	cmp	r0, #1
 801744a:	4606      	mov	r6, r0
 801744c:	d0d2      	beq.n	80173f4 <rmw_destroy_node+0x50>
 801744e:	2c00      	cmp	r4, #0
 8017450:	d1f1      	bne.n	8017436 <rmw_destroy_node+0x92>
 8017452:	6928      	ldr	r0, [r5, #16]
 8017454:	696a      	ldr	r2, [r5, #20]
 8017456:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801745a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801745e:	6819      	ldr	r1, [r3, #0]
 8017460:	f7f9 f926 	bl	80106b0 <uxr_buffer_delete_entity>
 8017464:	4602      	mov	r2, r0
 8017466:	6928      	ldr	r0, [r5, #16]
 8017468:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801746c:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8017470:	f7f6 f9ac 	bl	800d7cc <run_xrce_session>
 8017474:	2800      	cmp	r0, #0
 8017476:	bf08      	it	eq
 8017478:	2602      	moveq	r6, #2
 801747a:	4638      	mov	r0, r7
 801747c:	f7f6 f834 	bl	800d4e8 <rmw_uxrce_fini_node_memory>
 8017480:	4630      	mov	r0, r6
 8017482:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017484:	4626      	mov	r6, r4
 8017486:	e7a6      	b.n	80173d6 <rmw_destroy_node+0x32>
 8017488:	0801dce0 	.word	0x0801dce0
 801748c:	20015bc4 	.word	0x20015bc4
 8017490:	20015c04 	.word	0x20015c04
 8017494:	20015bd4 	.word	0x20015bd4
 8017498:	20010e38 	.word	0x20010e38

0801749c <rmw_node_get_graph_guard_condition>:
 801749c:	6843      	ldr	r3, [r0, #4]
 801749e:	6918      	ldr	r0, [r3, #16]
 80174a0:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 80174a4:	4770      	bx	lr
 80174a6:	bf00      	nop

080174a8 <rmw_send_request>:
 80174a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80174ac:	4604      	mov	r4, r0
 80174ae:	6800      	ldr	r0, [r0, #0]
 80174b0:	b08b      	sub	sp, #44	@ 0x2c
 80174b2:	460e      	mov	r6, r1
 80174b4:	4615      	mov	r5, r2
 80174b6:	b128      	cbz	r0, 80174c4 <rmw_send_request+0x1c>
 80174b8:	4b21      	ldr	r3, [pc, #132]	@ (8017540 <rmw_send_request+0x98>)
 80174ba:	6819      	ldr	r1, [r3, #0]
 80174bc:	f7e8 fea0 	bl	8000200 <strcmp>
 80174c0:	2800      	cmp	r0, #0
 80174c2:	d139      	bne.n	8017538 <rmw_send_request+0x90>
 80174c4:	6864      	ldr	r4, [r4, #4]
 80174c6:	6963      	ldr	r3, [r4, #20]
 80174c8:	f8d4 8078 	ldr.w	r8, [r4, #120]	@ 0x78
 80174cc:	689b      	ldr	r3, [r3, #8]
 80174ce:	4798      	blx	r3
 80174d0:	f8d0 9004 	ldr.w	r9, [r0, #4]
 80174d4:	4630      	mov	r0, r6
 80174d6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80174da:	4798      	blx	r3
 80174dc:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80174e0:	9000      	str	r0, [sp, #0]
 80174e2:	6922      	ldr	r2, [r4, #16]
 80174e4:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 80174e6:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 80174ea:	ab02      	add	r3, sp, #8
 80174ec:	f7fa fe18 	bl	8012120 <uxr_prepare_output_stream>
 80174f0:	2700      	movs	r7, #0
 80174f2:	6028      	str	r0, [r5, #0]
 80174f4:	606f      	str	r7, [r5, #4]
 80174f6:	b198      	cbz	r0, 8017520 <rmw_send_request+0x78>
 80174f8:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80174fc:	a902      	add	r1, sp, #8
 80174fe:	4630      	mov	r0, r6
 8017500:	4798      	blx	r3
 8017502:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 8017506:	f8d8 0010 	ldr.w	r0, [r8, #16]
 801750a:	2b01      	cmp	r3, #1
 801750c:	d00c      	beq.n	8017528 <rmw_send_request+0x80>
 801750e:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 8017510:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017514:	f7fa f818 	bl	8011548 <uxr_run_session_until_confirm_delivery>
 8017518:	4638      	mov	r0, r7
 801751a:	b00b      	add	sp, #44	@ 0x2c
 801751c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017520:	2001      	movs	r0, #1
 8017522:	b00b      	add	sp, #44	@ 0x2c
 8017524:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017528:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801752c:	f7f9 fc4c 	bl	8010dc8 <uxr_flash_output_streams>
 8017530:	4638      	mov	r0, r7
 8017532:	b00b      	add	sp, #44	@ 0x2c
 8017534:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017538:	200c      	movs	r0, #12
 801753a:	b00b      	add	sp, #44	@ 0x2c
 801753c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017540:	0801dce0 	.word	0x0801dce0

08017544 <rmw_take_request>:
 8017544:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017548:	4605      	mov	r5, r0
 801754a:	6800      	ldr	r0, [r0, #0]
 801754c:	b089      	sub	sp, #36	@ 0x24
 801754e:	460c      	mov	r4, r1
 8017550:	4690      	mov	r8, r2
 8017552:	461e      	mov	r6, r3
 8017554:	b128      	cbz	r0, 8017562 <rmw_take_request+0x1e>
 8017556:	4b28      	ldr	r3, [pc, #160]	@ (80175f8 <rmw_take_request+0xb4>)
 8017558:	6819      	ldr	r1, [r3, #0]
 801755a:	f7e8 fe51 	bl	8000200 <strcmp>
 801755e:	2800      	cmp	r0, #0
 8017560:	d146      	bne.n	80175f0 <rmw_take_request+0xac>
 8017562:	b10e      	cbz	r6, 8017568 <rmw_take_request+0x24>
 8017564:	2300      	movs	r3, #0
 8017566:	7033      	strb	r3, [r6, #0]
 8017568:	f8d5 9004 	ldr.w	r9, [r5, #4]
 801756c:	f7f6 f8b0 	bl	800d6d0 <rmw_uxrce_clean_expired_static_input_buffer>
 8017570:	4648      	mov	r0, r9
 8017572:	f7f6 f885 	bl	800d680 <rmw_uxrce_find_static_input_buffer_by_owner>
 8017576:	4607      	mov	r7, r0
 8017578:	b3b0      	cbz	r0, 80175e8 <rmw_take_request+0xa4>
 801757a:	6885      	ldr	r5, [r0, #8]
 801757c:	f8d5 3838 	ldr.w	r3, [r5, #2104]	@ 0x838
 8017580:	f8d5 283c 	ldr.w	r2, [r5, #2108]	@ 0x83c
 8017584:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8017588:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 801758c:	7423      	strb	r3, [r4, #16]
 801758e:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	@ 0x834
 8017592:	f895 2836 	ldrb.w	r2, [r5, #2102]	@ 0x836
 8017596:	74e2      	strb	r2, [r4, #19]
 8017598:	f8a4 3011 	strh.w	r3, [r4, #17]
 801759c:	f8d5 2828 	ldr.w	r2, [r5, #2088]	@ 0x828
 80175a0:	f8d5 382c 	ldr.w	r3, [r5, #2092]	@ 0x82c
 80175a4:	f8d5 1830 	ldr.w	r1, [r5, #2096]	@ 0x830
 80175a8:	61e1      	str	r1, [r4, #28]
 80175aa:	6162      	str	r2, [r4, #20]
 80175ac:	61a3      	str	r3, [r4, #24]
 80175ae:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80175b2:	689b      	ldr	r3, [r3, #8]
 80175b4:	4798      	blx	r3
 80175b6:	6844      	ldr	r4, [r0, #4]
 80175b8:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 80175bc:	f105 0110 	add.w	r1, r5, #16
 80175c0:	4668      	mov	r0, sp
 80175c2:	f7f8 ffad 	bl	8010520 <ucdr_init_buffer>
 80175c6:	68e3      	ldr	r3, [r4, #12]
 80175c8:	4641      	mov	r1, r8
 80175ca:	4668      	mov	r0, sp
 80175cc:	4798      	blx	r3
 80175ce:	4639      	mov	r1, r7
 80175d0:	4604      	mov	r4, r0
 80175d2:	480a      	ldr	r0, [pc, #40]	@ (80175fc <rmw_take_request+0xb8>)
 80175d4:	f7ff fb24 	bl	8016c20 <put_memory>
 80175d8:	b106      	cbz	r6, 80175dc <rmw_take_request+0x98>
 80175da:	7034      	strb	r4, [r6, #0]
 80175dc:	f084 0001 	eor.w	r0, r4, #1
 80175e0:	b2c0      	uxtb	r0, r0
 80175e2:	b009      	add	sp, #36	@ 0x24
 80175e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80175e8:	2001      	movs	r0, #1
 80175ea:	b009      	add	sp, #36	@ 0x24
 80175ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80175f0:	200c      	movs	r0, #12
 80175f2:	b009      	add	sp, #36	@ 0x24
 80175f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80175f8:	0801dce0 	.word	0x0801dce0
 80175fc:	20015bf4 	.word	0x20015bf4

08017600 <rmw_send_response>:
 8017600:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017602:	4605      	mov	r5, r0
 8017604:	6800      	ldr	r0, [r0, #0]
 8017606:	b091      	sub	sp, #68	@ 0x44
 8017608:	460c      	mov	r4, r1
 801760a:	4616      	mov	r6, r2
 801760c:	b128      	cbz	r0, 801761a <rmw_send_response+0x1a>
 801760e:	4b29      	ldr	r3, [pc, #164]	@ (80176b4 <rmw_send_response+0xb4>)
 8017610:	6819      	ldr	r1, [r3, #0]
 8017612:	f7e8 fdf5 	bl	8000200 <strcmp>
 8017616:	2800      	cmp	r0, #0
 8017618:	d141      	bne.n	801769e <rmw_send_response+0x9e>
 801761a:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 801761e:	9306      	str	r3, [sp, #24]
 8017620:	4623      	mov	r3, r4
 8017622:	9207      	str	r2, [sp, #28]
 8017624:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017628:	686d      	ldr	r5, [r5, #4]
 801762a:	789b      	ldrb	r3, [r3, #2]
 801762c:	68a1      	ldr	r1, [r4, #8]
 801762e:	f88d 2017 	strb.w	r2, [sp, #23]
 8017632:	f88d 3016 	strb.w	r3, [sp, #22]
 8017636:	68e2      	ldr	r2, [r4, #12]
 8017638:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 801763c:	6860      	ldr	r0, [r4, #4]
 801763e:	f8ad 3014 	strh.w	r3, [sp, #20]
 8017642:	ab02      	add	r3, sp, #8
 8017644:	c307      	stmia	r3!, {r0, r1, r2}
 8017646:	696b      	ldr	r3, [r5, #20]
 8017648:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 801764a:	68db      	ldr	r3, [r3, #12]
 801764c:	4798      	blx	r3
 801764e:	6844      	ldr	r4, [r0, #4]
 8017650:	4630      	mov	r0, r6
 8017652:	6923      	ldr	r3, [r4, #16]
 8017654:	4798      	blx	r3
 8017656:	f100 0318 	add.w	r3, r0, #24
 801765a:	6938      	ldr	r0, [r7, #16]
 801765c:	9300      	str	r3, [sp, #0]
 801765e:	692a      	ldr	r2, [r5, #16]
 8017660:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 8017662:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017666:	ab08      	add	r3, sp, #32
 8017668:	f7fa fd5a 	bl	8012120 <uxr_prepare_output_stream>
 801766c:	b910      	cbnz	r0, 8017674 <rmw_send_response+0x74>
 801766e:	2001      	movs	r0, #1
 8017670:	b011      	add	sp, #68	@ 0x44
 8017672:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017674:	a902      	add	r1, sp, #8
 8017676:	a808      	add	r0, sp, #32
 8017678:	f7fb febe 	bl	80133f8 <uxr_serialize_SampleIdentity>
 801767c:	68a3      	ldr	r3, [r4, #8]
 801767e:	a908      	add	r1, sp, #32
 8017680:	4630      	mov	r0, r6
 8017682:	4798      	blx	r3
 8017684:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 8017688:	6938      	ldr	r0, [r7, #16]
 801768a:	2b01      	cmp	r3, #1
 801768c:	d00a      	beq.n	80176a4 <rmw_send_response+0xa4>
 801768e:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 8017690:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017694:	f7f9 ff58 	bl	8011548 <uxr_run_session_until_confirm_delivery>
 8017698:	2000      	movs	r0, #0
 801769a:	b011      	add	sp, #68	@ 0x44
 801769c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801769e:	200c      	movs	r0, #12
 80176a0:	b011      	add	sp, #68	@ 0x44
 80176a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80176a4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80176a8:	f7f9 fb8e 	bl	8010dc8 <uxr_flash_output_streams>
 80176ac:	2000      	movs	r0, #0
 80176ae:	b011      	add	sp, #68	@ 0x44
 80176b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80176b2:	bf00      	nop
 80176b4:	0801dce0 	.word	0x0801dce0

080176b8 <rmw_take_response>:
 80176b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80176bc:	4604      	mov	r4, r0
 80176be:	6800      	ldr	r0, [r0, #0]
 80176c0:	b088      	sub	sp, #32
 80176c2:	4688      	mov	r8, r1
 80176c4:	4617      	mov	r7, r2
 80176c6:	461d      	mov	r5, r3
 80176c8:	b120      	cbz	r0, 80176d4 <rmw_take_response+0x1c>
 80176ca:	4b1e      	ldr	r3, [pc, #120]	@ (8017744 <rmw_take_response+0x8c>)
 80176cc:	6819      	ldr	r1, [r3, #0]
 80176ce:	f7e8 fd97 	bl	8000200 <strcmp>
 80176d2:	bb78      	cbnz	r0, 8017734 <rmw_take_response+0x7c>
 80176d4:	b10d      	cbz	r5, 80176da <rmw_take_response+0x22>
 80176d6:	2300      	movs	r3, #0
 80176d8:	702b      	strb	r3, [r5, #0]
 80176da:	6864      	ldr	r4, [r4, #4]
 80176dc:	f7f5 fff8 	bl	800d6d0 <rmw_uxrce_clean_expired_static_input_buffer>
 80176e0:	4620      	mov	r0, r4
 80176e2:	f7f5 ffcd 	bl	800d680 <rmw_uxrce_find_static_input_buffer_by_owner>
 80176e6:	4606      	mov	r6, r0
 80176e8:	b340      	cbz	r0, 801773c <rmw_take_response+0x84>
 80176ea:	6963      	ldr	r3, [r4, #20]
 80176ec:	6884      	ldr	r4, [r0, #8]
 80176ee:	68db      	ldr	r3, [r3, #12]
 80176f0:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 80176f4:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 80176f8:	e9c8 0108 	strd	r0, r1, [r8, #32]
 80176fc:	4798      	blx	r3
 80176fe:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8017702:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 8017706:	f104 0110 	add.w	r1, r4, #16
 801770a:	4668      	mov	r0, sp
 801770c:	f7f8 ff08 	bl	8010520 <ucdr_init_buffer>
 8017710:	4639      	mov	r1, r7
 8017712:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017716:	4668      	mov	r0, sp
 8017718:	4798      	blx	r3
 801771a:	4631      	mov	r1, r6
 801771c:	4604      	mov	r4, r0
 801771e:	480a      	ldr	r0, [pc, #40]	@ (8017748 <rmw_take_response+0x90>)
 8017720:	f7ff fa7e 	bl	8016c20 <put_memory>
 8017724:	b105      	cbz	r5, 8017728 <rmw_take_response+0x70>
 8017726:	702c      	strb	r4, [r5, #0]
 8017728:	f084 0001 	eor.w	r0, r4, #1
 801772c:	b2c0      	uxtb	r0, r0
 801772e:	b008      	add	sp, #32
 8017730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017734:	200c      	movs	r0, #12
 8017736:	b008      	add	sp, #32
 8017738:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801773c:	2001      	movs	r0, #1
 801773e:	b008      	add	sp, #32
 8017740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017744:	0801dce0 	.word	0x0801dce0
 8017748:	20015bf4 	.word	0x20015bf4

0801774c <rmw_create_service>:
 801774c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017750:	b091      	sub	sp, #68	@ 0x44
 8017752:	2800      	cmp	r0, #0
 8017754:	f000 80ba 	beq.w	80178cc <rmw_create_service+0x180>
 8017758:	4689      	mov	r9, r1
 801775a:	2900      	cmp	r1, #0
 801775c:	f000 80b6 	beq.w	80178cc <rmw_create_service+0x180>
 8017760:	4606      	mov	r6, r0
 8017762:	6800      	ldr	r0, [r0, #0]
 8017764:	4614      	mov	r4, r2
 8017766:	461d      	mov	r5, r3
 8017768:	f7f6 f94a 	bl	800da00 <is_uxrce_rmw_identifier_valid>
 801776c:	2800      	cmp	r0, #0
 801776e:	f000 80ad 	beq.w	80178cc <rmw_create_service+0x180>
 8017772:	2c00      	cmp	r4, #0
 8017774:	f000 80aa 	beq.w	80178cc <rmw_create_service+0x180>
 8017778:	7823      	ldrb	r3, [r4, #0]
 801777a:	2b00      	cmp	r3, #0
 801777c:	f000 80a6 	beq.w	80178cc <rmw_create_service+0x180>
 8017780:	2d00      	cmp	r5, #0
 8017782:	f000 80a3 	beq.w	80178cc <rmw_create_service+0x180>
 8017786:	4854      	ldr	r0, [pc, #336]	@ (80178d8 <rmw_create_service+0x18c>)
 8017788:	f8d6 8004 	ldr.w	r8, [r6, #4]
 801778c:	f7ff fa38 	bl	8016c00 <get_memory>
 8017790:	4606      	mov	r6, r0
 8017792:	2800      	cmp	r0, #0
 8017794:	f000 809b 	beq.w	80178ce <rmw_create_service+0x182>
 8017798:	6887      	ldr	r7, [r0, #8]
 801779a:	f8c7 7080 	str.w	r7, [r7, #128]	@ 0x80
 801779e:	f7ff fa97 	bl	8016cd0 <rmw_get_implementation_identifier>
 80177a2:	f107 0a88 	add.w	sl, r7, #136	@ 0x88
 80177a6:	67f8      	str	r0, [r7, #124]	@ 0x7c
 80177a8:	f8c7 a084 	str.w	sl, [r7, #132]	@ 0x84
 80177ac:	4620      	mov	r0, r4
 80177ae:	f7e8 fd31 	bl	8000214 <strlen>
 80177b2:	1c42      	adds	r2, r0, #1
 80177b4:	2a3c      	cmp	r2, #60	@ 0x3c
 80177b6:	f107 067c 	add.w	r6, r7, #124	@ 0x7c
 80177ba:	f200 8084 	bhi.w	80178c6 <rmw_create_service+0x17a>
 80177be:	4621      	mov	r1, r4
 80177c0:	4650      	mov	r0, sl
 80177c2:	f003 fe70 	bl	801b4a6 <memcpy>
 80177c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80177ca:	4629      	mov	r1, r5
 80177cc:	f8c7 8078 	str.w	r8, [r7, #120]	@ 0x78
 80177d0:	677b      	str	r3, [r7, #116]	@ 0x74
 80177d2:	2250      	movs	r2, #80	@ 0x50
 80177d4:	f107 0020 	add.w	r0, r7, #32
 80177d8:	f003 fe65 	bl	801b4a6 <memcpy>
 80177dc:	493f      	ldr	r1, [pc, #252]	@ (80178dc <rmw_create_service+0x190>)
 80177de:	4648      	mov	r0, r9
 80177e0:	f7f6 f928 	bl	800da34 <get_service_typesupport_handle>
 80177e4:	2800      	cmp	r0, #0
 80177e6:	d06e      	beq.n	80178c6 <rmw_create_service+0x17a>
 80177e8:	6843      	ldr	r3, [r0, #4]
 80177ea:	617b      	str	r3, [r7, #20]
 80177ec:	2b00      	cmp	r3, #0
 80177ee:	d06a      	beq.n	80178c6 <rmw_create_service+0x17a>
 80177f0:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80177f4:	f8df a0ec 	ldr.w	sl, [pc, #236]	@ 80178e4 <rmw_create_service+0x198>
 80177f8:	f8df 90ec 	ldr.w	r9, [pc, #236]	@ 80178e8 <rmw_create_service+0x19c>
 80177fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8017800:	2108      	movs	r1, #8
 8017802:	f8b3 05a2 	ldrh.w	r0, [r3, #1442]	@ 0x5a2
 8017806:	1c42      	adds	r2, r0, #1
 8017808:	f8a3 25a2 	strh.w	r2, [r3, #1442]	@ 0x5a2
 801780c:	f7f9 f98c 	bl	8010b28 <uxr_object_id>
 8017810:	2364      	movs	r3, #100	@ 0x64
 8017812:	6138      	str	r0, [r7, #16]
 8017814:	4652      	mov	r2, sl
 8017816:	6978      	ldr	r0, [r7, #20]
 8017818:	4649      	mov	r1, r9
 801781a:	f7f6 f83f 	bl	800d89c <generate_service_types>
 801781e:	2800      	cmp	r0, #0
 8017820:	d051      	beq.n	80178c6 <rmw_create_service+0x17a>
 8017822:	f8df b0c8 	ldr.w	fp, [pc, #200]	@ 80178ec <rmw_create_service+0x1a0>
 8017826:	4a2e      	ldr	r2, [pc, #184]	@ (80178e0 <rmw_create_service+0x194>)
 8017828:	233c      	movs	r3, #60	@ 0x3c
 801782a:	4659      	mov	r1, fp
 801782c:	4620      	mov	r0, r4
 801782e:	f7f6 f803 	bl	800d838 <generate_service_topics>
 8017832:	2800      	cmp	r0, #0
 8017834:	d047      	beq.n	80178c6 <rmw_create_service+0x17a>
 8017836:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801783a:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 801783e:	a80c      	add	r0, sp, #48	@ 0x30
 8017840:	4629      	mov	r1, r5
 8017842:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8017846:	f7f5 ffdd 	bl	800d804 <convert_qos_profile>
 801784a:	4a25      	ldr	r2, [pc, #148]	@ (80178e0 <rmw_create_service+0x194>)
 801784c:	9400      	str	r4, [sp, #0]
 801784e:	e9cd b203 	strd	fp, r2, [sp, #12]
 8017852:	e9cd 9a01 	strd	r9, sl, [sp, #4]
 8017856:	a80c      	add	r0, sp, #48	@ 0x30
 8017858:	c803      	ldmia	r0, {r0, r1}
 801785a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801785c:	9005      	str	r0, [sp, #20]
 801785e:	9a08      	ldr	r2, [sp, #32]
 8017860:	f8ad 1018 	strh.w	r1, [sp, #24]
 8017864:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8017868:	2306      	movs	r3, #6
 801786a:	9307      	str	r3, [sp, #28]
 801786c:	6811      	ldr	r1, [r2, #0]
 801786e:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8017872:	693a      	ldr	r2, [r7, #16]
 8017874:	f7f9 f91e 	bl	8010ab4 <uxr_buffer_create_replier_bin>
 8017878:	4602      	mov	r2, r0
 801787a:	f8d8 0010 	ldr.w	r0, [r8, #16]
 801787e:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8017882:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8017886:	f7f5 ffa1 	bl	800d7cc <run_xrce_session>
 801788a:	b1e0      	cbz	r0, 80178c6 <rmw_create_service+0x17a>
 801788c:	7a2b      	ldrb	r3, [r5, #8]
 801788e:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8017892:	2200      	movs	r2, #0
 8017894:	2b02      	cmp	r3, #2
 8017896:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 801789a:	e9cd 120e 	strd	r1, r2, [sp, #56]	@ 0x38
 801789e:	bf0c      	ite	eq
 80178a0:	e9d0 23df 	ldrdeq	r2, r3, [r0, #892]	@ 0x37c
 80178a4:	e9d0 32dd 	ldrdne	r3, r2, [r0, #884]	@ 0x374
 80178a8:	673a      	str	r2, [r7, #112]	@ 0x70
 80178aa:	930b      	str	r3, [sp, #44]	@ 0x2c
 80178ac:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 80178b0:	ab0e      	add	r3, sp, #56	@ 0x38
 80178b2:	9300      	str	r3, [sp, #0]
 80178b4:	6811      	ldr	r1, [r2, #0]
 80178b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80178b8:	693a      	ldr	r2, [r7, #16]
 80178ba:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80178be:	f001 fad9 	bl	8018e74 <uxr_buffer_request_data>
 80178c2:	8338      	strh	r0, [r7, #24]
 80178c4:	e003      	b.n	80178ce <rmw_create_service+0x182>
 80178c6:	4630      	mov	r0, r6
 80178c8:	f7f5 fe52 	bl	800d570 <rmw_uxrce_fini_service_memory>
 80178cc:	2600      	movs	r6, #0
 80178ce:	4630      	mov	r0, r6
 80178d0:	b011      	add	sp, #68	@ 0x44
 80178d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80178d6:	bf00      	nop
 80178d8:	20015bd4 	.word	0x20015bd4
 80178dc:	0801c780 	.word	0x0801c780
 80178e0:	20015ea8 	.word	0x20015ea8
 80178e4:	20015ee4 	.word	0x20015ee4
 80178e8:	20015e44 	.word	0x20015e44
 80178ec:	20015e08 	.word	0x20015e08

080178f0 <rmw_destroy_service>:
 80178f0:	b570      	push	{r4, r5, r6, lr}
 80178f2:	b128      	cbz	r0, 8017900 <rmw_destroy_service+0x10>
 80178f4:	4604      	mov	r4, r0
 80178f6:	6800      	ldr	r0, [r0, #0]
 80178f8:	460d      	mov	r5, r1
 80178fa:	f7f6 f881 	bl	800da00 <is_uxrce_rmw_identifier_valid>
 80178fe:	b910      	cbnz	r0, 8017906 <rmw_destroy_service+0x16>
 8017900:	2401      	movs	r4, #1
 8017902:	4620      	mov	r0, r4
 8017904:	bd70      	pop	{r4, r5, r6, pc}
 8017906:	6863      	ldr	r3, [r4, #4]
 8017908:	2b00      	cmp	r3, #0
 801790a:	d0f9      	beq.n	8017900 <rmw_destroy_service+0x10>
 801790c:	2d00      	cmp	r5, #0
 801790e:	d0f7      	beq.n	8017900 <rmw_destroy_service+0x10>
 8017910:	6828      	ldr	r0, [r5, #0]
 8017912:	f7f6 f875 	bl	800da00 <is_uxrce_rmw_identifier_valid>
 8017916:	2800      	cmp	r0, #0
 8017918:	d0f2      	beq.n	8017900 <rmw_destroy_service+0x10>
 801791a:	686e      	ldr	r6, [r5, #4]
 801791c:	2e00      	cmp	r6, #0
 801791e:	d0ef      	beq.n	8017900 <rmw_destroy_service+0x10>
 8017920:	6864      	ldr	r4, [r4, #4]
 8017922:	6932      	ldr	r2, [r6, #16]
 8017924:	6920      	ldr	r0, [r4, #16]
 8017926:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801792a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801792e:	6819      	ldr	r1, [r3, #0]
 8017930:	f001 fada 	bl	8018ee8 <uxr_buffer_cancel_data>
 8017934:	4602      	mov	r2, r0
 8017936:	6920      	ldr	r0, [r4, #16]
 8017938:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801793c:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8017940:	f7f5 ff44 	bl	800d7cc <run_xrce_session>
 8017944:	6920      	ldr	r0, [r4, #16]
 8017946:	6932      	ldr	r2, [r6, #16]
 8017948:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801794c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017950:	6819      	ldr	r1, [r3, #0]
 8017952:	f7f8 fead 	bl	80106b0 <uxr_buffer_delete_entity>
 8017956:	4602      	mov	r2, r0
 8017958:	6920      	ldr	r0, [r4, #16]
 801795a:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801795e:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8017962:	f7f5 ff33 	bl	800d7cc <run_xrce_session>
 8017966:	2800      	cmp	r0, #0
 8017968:	4628      	mov	r0, r5
 801796a:	bf14      	ite	ne
 801796c:	2400      	movne	r4, #0
 801796e:	2402      	moveq	r4, #2
 8017970:	f7f5 fdfe 	bl	800d570 <rmw_uxrce_fini_service_memory>
 8017974:	e7c5      	b.n	8017902 <rmw_destroy_service+0x12>
 8017976:	bf00      	nop

08017978 <rmw_service_response_publisher_get_actual_qos>:
 8017978:	b150      	cbz	r0, 8017990 <rmw_service_response_publisher_get_actual_qos+0x18>
 801797a:	b508      	push	{r3, lr}
 801797c:	460b      	mov	r3, r1
 801797e:	b149      	cbz	r1, 8017994 <rmw_service_response_publisher_get_actual_qos+0x1c>
 8017980:	6841      	ldr	r1, [r0, #4]
 8017982:	2250      	movs	r2, #80	@ 0x50
 8017984:	3120      	adds	r1, #32
 8017986:	4618      	mov	r0, r3
 8017988:	f003 fd8d 	bl	801b4a6 <memcpy>
 801798c:	2000      	movs	r0, #0
 801798e:	bd08      	pop	{r3, pc}
 8017990:	200b      	movs	r0, #11
 8017992:	4770      	bx	lr
 8017994:	200b      	movs	r0, #11
 8017996:	bd08      	pop	{r3, pc}

08017998 <rmw_service_request_subscription_get_actual_qos>:
 8017998:	b150      	cbz	r0, 80179b0 <rmw_service_request_subscription_get_actual_qos+0x18>
 801799a:	b508      	push	{r3, lr}
 801799c:	460b      	mov	r3, r1
 801799e:	b149      	cbz	r1, 80179b4 <rmw_service_request_subscription_get_actual_qos+0x1c>
 80179a0:	6841      	ldr	r1, [r0, #4]
 80179a2:	2250      	movs	r2, #80	@ 0x50
 80179a4:	3120      	adds	r1, #32
 80179a6:	4618      	mov	r0, r3
 80179a8:	f003 fd7d 	bl	801b4a6 <memcpy>
 80179ac:	2000      	movs	r0, #0
 80179ae:	bd08      	pop	{r3, pc}
 80179b0:	200b      	movs	r0, #11
 80179b2:	4770      	bx	lr
 80179b4:	200b      	movs	r0, #11
 80179b6:	bd08      	pop	{r3, pc}

080179b8 <rmw_create_subscription>:
 80179b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80179bc:	b08d      	sub	sp, #52	@ 0x34
 80179be:	2800      	cmp	r0, #0
 80179c0:	f000 80d1 	beq.w	8017b66 <rmw_create_subscription+0x1ae>
 80179c4:	460e      	mov	r6, r1
 80179c6:	2900      	cmp	r1, #0
 80179c8:	f000 80cd 	beq.w	8017b66 <rmw_create_subscription+0x1ae>
 80179cc:	4604      	mov	r4, r0
 80179ce:	6800      	ldr	r0, [r0, #0]
 80179d0:	4615      	mov	r5, r2
 80179d2:	4698      	mov	r8, r3
 80179d4:	f7f6 f814 	bl	800da00 <is_uxrce_rmw_identifier_valid>
 80179d8:	2800      	cmp	r0, #0
 80179da:	f000 80c4 	beq.w	8017b66 <rmw_create_subscription+0x1ae>
 80179de:	2d00      	cmp	r5, #0
 80179e0:	f000 80c1 	beq.w	8017b66 <rmw_create_subscription+0x1ae>
 80179e4:	782b      	ldrb	r3, [r5, #0]
 80179e6:	2b00      	cmp	r3, #0
 80179e8:	f000 80bd 	beq.w	8017b66 <rmw_create_subscription+0x1ae>
 80179ec:	f1b8 0f00 	cmp.w	r8, #0
 80179f0:	f000 80b9 	beq.w	8017b66 <rmw_create_subscription+0x1ae>
 80179f4:	485e      	ldr	r0, [pc, #376]	@ (8017b70 <rmw_create_subscription+0x1b8>)
 80179f6:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80179fa:	f7ff f901 	bl	8016c00 <get_memory>
 80179fe:	4604      	mov	r4, r0
 8017a00:	2800      	cmp	r0, #0
 8017a02:	f000 80b1 	beq.w	8017b68 <rmw_create_subscription+0x1b0>
 8017a06:	6887      	ldr	r7, [r0, #8]
 8017a08:	f8c7 7080 	str.w	r7, [r7, #128]	@ 0x80
 8017a0c:	f7ff f960 	bl	8016cd0 <rmw_get_implementation_identifier>
 8017a10:	f107 0a98 	add.w	sl, r7, #152	@ 0x98
 8017a14:	67f8      	str	r0, [r7, #124]	@ 0x7c
 8017a16:	f8c7 a084 	str.w	sl, [r7, #132]	@ 0x84
 8017a1a:	4628      	mov	r0, r5
 8017a1c:	f7e8 fbfa 	bl	8000214 <strlen>
 8017a20:	3001      	adds	r0, #1
 8017a22:	283c      	cmp	r0, #60	@ 0x3c
 8017a24:	f107 047c 	add.w	r4, r7, #124	@ 0x7c
 8017a28:	f200 8096 	bhi.w	8017b58 <rmw_create_subscription+0x1a0>
 8017a2c:	4a51      	ldr	r2, [pc, #324]	@ (8017b74 <rmw_create_subscription+0x1bc>)
 8017a2e:	462b      	mov	r3, r5
 8017a30:	213c      	movs	r1, #60	@ 0x3c
 8017a32:	4650      	mov	r0, sl
 8017a34:	f003 f966 	bl	801ad04 <sniprintf>
 8017a38:	4641      	mov	r1, r8
 8017a3a:	f8c7 9020 	str.w	r9, [r7, #32]
 8017a3e:	2250      	movs	r2, #80	@ 0x50
 8017a40:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8017a44:	f003 fd2f 	bl	801b4a6 <memcpy>
 8017a48:	494b      	ldr	r1, [pc, #300]	@ (8017b78 <rmw_create_subscription+0x1c0>)
 8017a4a:	4630      	mov	r0, r6
 8017a4c:	f7f5 ffe6 	bl	800da1c <get_message_typesupport_handle>
 8017a50:	2800      	cmp	r0, #0
 8017a52:	f000 8081 	beq.w	8017b58 <rmw_create_subscription+0x1a0>
 8017a56:	6842      	ldr	r2, [r0, #4]
 8017a58:	61ba      	str	r2, [r7, #24]
 8017a5a:	2a00      	cmp	r2, #0
 8017a5c:	d07c      	beq.n	8017b58 <rmw_create_subscription+0x1a0>
 8017a5e:	4629      	mov	r1, r5
 8017a60:	4643      	mov	r3, r8
 8017a62:	4648      	mov	r0, r9
 8017a64:	f7ff fb9a 	bl	801719c <create_topic>
 8017a68:	61f8      	str	r0, [r7, #28]
 8017a6a:	2800      	cmp	r0, #0
 8017a6c:	d078      	beq.n	8017b60 <rmw_create_subscription+0x1a8>
 8017a6e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8017a72:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8017a76:	2104      	movs	r1, #4
 8017a78:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	@ 0x59c
 8017a7c:	1c42      	adds	r2, r0, #1
 8017a7e:	f8a3 259c 	strh.w	r2, [r3, #1436]	@ 0x59c
 8017a82:	f7f9 f851 	bl	8010b28 <uxr_object_id>
 8017a86:	6138      	str	r0, [r7, #16]
 8017a88:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8017a8c:	2506      	movs	r5, #6
 8017a8e:	f8d0 3384 	ldr.w	r3, [r0, #900]	@ 0x384
 8017a92:	9500      	str	r5, [sp, #0]
 8017a94:	6819      	ldr	r1, [r3, #0]
 8017a96:	693a      	ldr	r2, [r7, #16]
 8017a98:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8017a9c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017aa0:	f7f8 feea 	bl	8010878 <uxr_buffer_create_subscriber_bin>
 8017aa4:	4602      	mov	r2, r0
 8017aa6:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8017aaa:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8017aae:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8017ab2:	f7f5 fe8b 	bl	800d7cc <run_xrce_session>
 8017ab6:	2800      	cmp	r0, #0
 8017ab8:	d04e      	beq.n	8017b58 <rmw_create_subscription+0x1a0>
 8017aba:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8017abe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8017ac2:	4629      	mov	r1, r5
 8017ac4:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	@ 0x59e
 8017ac8:	1c42      	adds	r2, r0, #1
 8017aca:	f8a3 259e 	strh.w	r2, [r3, #1438]	@ 0x59e
 8017ace:	f7f9 f82b 	bl	8010b28 <uxr_object_id>
 8017ad2:	ae08      	add	r6, sp, #32
 8017ad4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8017ad8:	69fb      	ldr	r3, [r7, #28]
 8017ada:	6178      	str	r0, [r7, #20]
 8017adc:	4641      	mov	r1, r8
 8017ade:	4630      	mov	r0, r6
 8017ae0:	f8da b384 	ldr.w	fp, [sl, #900]	@ 0x384
 8017ae4:	9305      	str	r3, [sp, #20]
 8017ae6:	f7f5 fe8d 	bl	800d804 <convert_qos_profile>
 8017aea:	9503      	str	r5, [sp, #12]
 8017aec:	e896 0003 	ldmia.w	r6, {r0, r1}
 8017af0:	9b05      	ldr	r3, [sp, #20]
 8017af2:	9001      	str	r0, [sp, #4]
 8017af4:	f8ad 1008 	strh.w	r1, [sp, #8]
 8017af8:	691b      	ldr	r3, [r3, #16]
 8017afa:	9300      	str	r3, [sp, #0]
 8017afc:	e9d7 3204 	ldrd	r3, r2, [r7, #16]
 8017b00:	f8db 1000 	ldr.w	r1, [fp]
 8017b04:	f50a 7028 	add.w	r0, sl, #672	@ 0x2a0
 8017b08:	f7f8 ff5c 	bl	80109c4 <uxr_buffer_create_datareader_bin>
 8017b0c:	4602      	mov	r2, r0
 8017b0e:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8017b12:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8017b16:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8017b1a:	f7f5 fe57 	bl	800d7cc <run_xrce_session>
 8017b1e:	b1d8      	cbz	r0, 8017b58 <rmw_create_subscription+0x1a0>
 8017b20:	f898 3008 	ldrb.w	r3, [r8, #8]
 8017b24:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8017b28:	2b02      	cmp	r3, #2
 8017b2a:	bf0c      	ite	eq
 8017b2c:	f8d0 3380 	ldreq.w	r3, [r0, #896]	@ 0x380
 8017b30:	f8d0 3374 	ldrne.w	r3, [r0, #884]	@ 0x374
 8017b34:	9307      	str	r3, [sp, #28]
 8017b36:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8017b3a:	2200      	movs	r2, #0
 8017b3c:	e9cd 120a 	strd	r1, r2, [sp, #40]	@ 0x28
 8017b40:	ab0a      	add	r3, sp, #40	@ 0x28
 8017b42:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8017b46:	9300      	str	r3, [sp, #0]
 8017b48:	697a      	ldr	r2, [r7, #20]
 8017b4a:	9b07      	ldr	r3, [sp, #28]
 8017b4c:	6809      	ldr	r1, [r1, #0]
 8017b4e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017b52:	f001 f98f 	bl	8018e74 <uxr_buffer_request_data>
 8017b56:	e007      	b.n	8017b68 <rmw_create_subscription+0x1b0>
 8017b58:	69f8      	ldr	r0, [r7, #28]
 8017b5a:	b108      	cbz	r0, 8017b60 <rmw_create_subscription+0x1a8>
 8017b5c:	f7f5 fd34 	bl	800d5c8 <rmw_uxrce_fini_topic_memory>
 8017b60:	4620      	mov	r0, r4
 8017b62:	f7f5 fcef 	bl	800d544 <rmw_uxrce_fini_subscription_memory>
 8017b66:	2400      	movs	r4, #0
 8017b68:	4620      	mov	r0, r4
 8017b6a:	b00d      	add	sp, #52	@ 0x34
 8017b6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017b70:	20015c04 	.word	0x20015c04
 8017b74:	0801cbf0 	.word	0x0801cbf0
 8017b78:	0801c780 	.word	0x0801c780

08017b7c <rmw_subscription_get_actual_qos>:
 8017b7c:	b150      	cbz	r0, 8017b94 <rmw_subscription_get_actual_qos+0x18>
 8017b7e:	b508      	push	{r3, lr}
 8017b80:	460b      	mov	r3, r1
 8017b82:	b149      	cbz	r1, 8017b98 <rmw_subscription_get_actual_qos+0x1c>
 8017b84:	6841      	ldr	r1, [r0, #4]
 8017b86:	2250      	movs	r2, #80	@ 0x50
 8017b88:	3128      	adds	r1, #40	@ 0x28
 8017b8a:	4618      	mov	r0, r3
 8017b8c:	f003 fc8b 	bl	801b4a6 <memcpy>
 8017b90:	2000      	movs	r0, #0
 8017b92:	bd08      	pop	{r3, pc}
 8017b94:	200b      	movs	r0, #11
 8017b96:	4770      	bx	lr
 8017b98:	200b      	movs	r0, #11
 8017b9a:	bd08      	pop	{r3, pc}

08017b9c <rmw_destroy_subscription>:
 8017b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017b9e:	b128      	cbz	r0, 8017bac <rmw_destroy_subscription+0x10>
 8017ba0:	4604      	mov	r4, r0
 8017ba2:	6800      	ldr	r0, [r0, #0]
 8017ba4:	460d      	mov	r5, r1
 8017ba6:	f7f5 ff2b 	bl	800da00 <is_uxrce_rmw_identifier_valid>
 8017baa:	b910      	cbnz	r0, 8017bb2 <rmw_destroy_subscription+0x16>
 8017bac:	2401      	movs	r4, #1
 8017bae:	4620      	mov	r0, r4
 8017bb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017bb2:	6863      	ldr	r3, [r4, #4]
 8017bb4:	2b00      	cmp	r3, #0
 8017bb6:	d0f9      	beq.n	8017bac <rmw_destroy_subscription+0x10>
 8017bb8:	2d00      	cmp	r5, #0
 8017bba:	d0f7      	beq.n	8017bac <rmw_destroy_subscription+0x10>
 8017bbc:	6828      	ldr	r0, [r5, #0]
 8017bbe:	f7f5 ff1f 	bl	800da00 <is_uxrce_rmw_identifier_valid>
 8017bc2:	2800      	cmp	r0, #0
 8017bc4:	d0f2      	beq.n	8017bac <rmw_destroy_subscription+0x10>
 8017bc6:	686c      	ldr	r4, [r5, #4]
 8017bc8:	2c00      	cmp	r4, #0
 8017bca:	d0ef      	beq.n	8017bac <rmw_destroy_subscription+0x10>
 8017bcc:	6a26      	ldr	r6, [r4, #32]
 8017bce:	6962      	ldr	r2, [r4, #20]
 8017bd0:	6930      	ldr	r0, [r6, #16]
 8017bd2:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8017bd6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017bda:	6819      	ldr	r1, [r3, #0]
 8017bdc:	f001 f984 	bl	8018ee8 <uxr_buffer_cancel_data>
 8017be0:	4602      	mov	r2, r0
 8017be2:	6930      	ldr	r0, [r6, #16]
 8017be4:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8017be8:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8017bec:	f7f5 fdee 	bl	800d7cc <run_xrce_session>
 8017bf0:	69e0      	ldr	r0, [r4, #28]
 8017bf2:	f7ff fb23 	bl	801723c <destroy_topic>
 8017bf6:	6a23      	ldr	r3, [r4, #32]
 8017bf8:	6962      	ldr	r2, [r4, #20]
 8017bfa:	6918      	ldr	r0, [r3, #16]
 8017bfc:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8017c00:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017c04:	6819      	ldr	r1, [r3, #0]
 8017c06:	f7f8 fd53 	bl	80106b0 <uxr_buffer_delete_entity>
 8017c0a:	6a23      	ldr	r3, [r4, #32]
 8017c0c:	6922      	ldr	r2, [r4, #16]
 8017c0e:	691b      	ldr	r3, [r3, #16]
 8017c10:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 8017c14:	4604      	mov	r4, r0
 8017c16:	6809      	ldr	r1, [r1, #0]
 8017c18:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8017c1c:	f7f8 fd48 	bl	80106b0 <uxr_buffer_delete_entity>
 8017c20:	6937      	ldr	r7, [r6, #16]
 8017c22:	4622      	mov	r2, r4
 8017c24:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 8017c28:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 8017c2c:	4604      	mov	r4, r0
 8017c2e:	4638      	mov	r0, r7
 8017c30:	f7f5 fdcc 	bl	800d7cc <run_xrce_session>
 8017c34:	6936      	ldr	r6, [r6, #16]
 8017c36:	4622      	mov	r2, r4
 8017c38:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 8017c3c:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 8017c40:	4604      	mov	r4, r0
 8017c42:	4630      	mov	r0, r6
 8017c44:	f7f5 fdc2 	bl	800d7cc <run_xrce_session>
 8017c48:	b12c      	cbz	r4, 8017c56 <rmw_destroy_subscription+0xba>
 8017c4a:	b120      	cbz	r0, 8017c56 <rmw_destroy_subscription+0xba>
 8017c4c:	2400      	movs	r4, #0
 8017c4e:	4628      	mov	r0, r5
 8017c50:	f7f5 fc78 	bl	800d544 <rmw_uxrce_fini_subscription_memory>
 8017c54:	e7ab      	b.n	8017bae <rmw_destroy_subscription+0x12>
 8017c56:	2402      	movs	r4, #2
 8017c58:	e7f9      	b.n	8017c4e <rmw_destroy_subscription+0xb2>
 8017c5a:	bf00      	nop

08017c5c <rmw_take_with_info>:
 8017c5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017c5e:	4604      	mov	r4, r0
 8017c60:	6800      	ldr	r0, [r0, #0]
 8017c62:	b089      	sub	sp, #36	@ 0x24
 8017c64:	460f      	mov	r7, r1
 8017c66:	4615      	mov	r5, r2
 8017c68:	b128      	cbz	r0, 8017c76 <rmw_take_with_info+0x1a>
 8017c6a:	4b24      	ldr	r3, [pc, #144]	@ (8017cfc <rmw_take_with_info+0xa0>)
 8017c6c:	6819      	ldr	r1, [r3, #0]
 8017c6e:	f7e8 fac7 	bl	8000200 <strcmp>
 8017c72:	2800      	cmp	r0, #0
 8017c74:	d13e      	bne.n	8017cf4 <rmw_take_with_info+0x98>
 8017c76:	b305      	cbz	r5, 8017cba <rmw_take_with_info+0x5e>
 8017c78:	6864      	ldr	r4, [r4, #4]
 8017c7a:	2300      	movs	r3, #0
 8017c7c:	702b      	strb	r3, [r5, #0]
 8017c7e:	f7f5 fd27 	bl	800d6d0 <rmw_uxrce_clean_expired_static_input_buffer>
 8017c82:	4620      	mov	r0, r4
 8017c84:	f7f5 fcfc 	bl	800d680 <rmw_uxrce_find_static_input_buffer_by_owner>
 8017c88:	4606      	mov	r6, r0
 8017c8a:	b1f0      	cbz	r0, 8017cca <rmw_take_with_info+0x6e>
 8017c8c:	6881      	ldr	r1, [r0, #8]
 8017c8e:	4668      	mov	r0, sp
 8017c90:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8017c94:	3110      	adds	r1, #16
 8017c96:	f7f8 fc43 	bl	8010520 <ucdr_init_buffer>
 8017c9a:	69a3      	ldr	r3, [r4, #24]
 8017c9c:	4639      	mov	r1, r7
 8017c9e:	68db      	ldr	r3, [r3, #12]
 8017ca0:	4668      	mov	r0, sp
 8017ca2:	4798      	blx	r3
 8017ca4:	4631      	mov	r1, r6
 8017ca6:	4604      	mov	r4, r0
 8017ca8:	4815      	ldr	r0, [pc, #84]	@ (8017d00 <rmw_take_with_info+0xa4>)
 8017caa:	f7fe ffb9 	bl	8016c20 <put_memory>
 8017cae:	702c      	strb	r4, [r5, #0]
 8017cb0:	f084 0001 	eor.w	r0, r4, #1
 8017cb4:	b2c0      	uxtb	r0, r0
 8017cb6:	b009      	add	sp, #36	@ 0x24
 8017cb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017cba:	6864      	ldr	r4, [r4, #4]
 8017cbc:	f7f5 fd08 	bl	800d6d0 <rmw_uxrce_clean_expired_static_input_buffer>
 8017cc0:	4620      	mov	r0, r4
 8017cc2:	f7f5 fcdd 	bl	800d680 <rmw_uxrce_find_static_input_buffer_by_owner>
 8017cc6:	4605      	mov	r5, r0
 8017cc8:	b910      	cbnz	r0, 8017cd0 <rmw_take_with_info+0x74>
 8017cca:	2001      	movs	r0, #1
 8017ccc:	b009      	add	sp, #36	@ 0x24
 8017cce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017cd0:	68a9      	ldr	r1, [r5, #8]
 8017cd2:	4668      	mov	r0, sp
 8017cd4:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8017cd8:	3110      	adds	r1, #16
 8017cda:	f7f8 fc21 	bl	8010520 <ucdr_init_buffer>
 8017cde:	69a3      	ldr	r3, [r4, #24]
 8017ce0:	4639      	mov	r1, r7
 8017ce2:	68db      	ldr	r3, [r3, #12]
 8017ce4:	4668      	mov	r0, sp
 8017ce6:	4798      	blx	r3
 8017ce8:	4629      	mov	r1, r5
 8017cea:	4604      	mov	r4, r0
 8017cec:	4804      	ldr	r0, [pc, #16]	@ (8017d00 <rmw_take_with_info+0xa4>)
 8017cee:	f7fe ff97 	bl	8016c20 <put_memory>
 8017cf2:	e7dd      	b.n	8017cb0 <rmw_take_with_info+0x54>
 8017cf4:	200c      	movs	r0, #12
 8017cf6:	b009      	add	sp, #36	@ 0x24
 8017cf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017cfa:	bf00      	nop
 8017cfc:	0801dce0 	.word	0x0801dce0
 8017d00:	20015bf4 	.word	0x20015bf4

08017d04 <rmw_uxrce_transport_init>:
 8017d04:	b508      	push	{r3, lr}
 8017d06:	b108      	cbz	r0, 8017d0c <rmw_uxrce_transport_init+0x8>
 8017d08:	f100 0210 	add.w	r2, r0, #16
 8017d0c:	b139      	cbz	r1, 8017d1e <rmw_uxrce_transport_init+0x1a>
 8017d0e:	6949      	ldr	r1, [r1, #20]
 8017d10:	4610      	mov	r0, r2
 8017d12:	f000 fb2f 	bl	8018374 <uxr_init_custom_transport>
 8017d16:	f080 0001 	eor.w	r0, r0, #1
 8017d1a:	b2c0      	uxtb	r0, r0
 8017d1c:	bd08      	pop	{r3, pc}
 8017d1e:	4b04      	ldr	r3, [pc, #16]	@ (8017d30 <rmw_uxrce_transport_init+0x2c>)
 8017d20:	4610      	mov	r0, r2
 8017d22:	6859      	ldr	r1, [r3, #4]
 8017d24:	f000 fb26 	bl	8018374 <uxr_init_custom_transport>
 8017d28:	f080 0001 	eor.w	r0, r0, #1
 8017d2c:	b2c0      	uxtb	r0, r0
 8017d2e:	bd08      	pop	{r3, pc}
 8017d30:	20010e1c 	.word	0x20010e1c

08017d34 <rmw_wait>:
 8017d34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017d38:	b089      	sub	sp, #36	@ 0x24
 8017d3a:	4605      	mov	r5, r0
 8017d3c:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8017d3e:	460e      	mov	r6, r1
 8017d40:	4698      	mov	r8, r3
 8017d42:	4691      	mov	r9, r2
 8017d44:	2a00      	cmp	r2, #0
 8017d46:	f000 810a 	beq.w	8017f5e <rmw_wait+0x22a>
 8017d4a:	b16c      	cbz	r4, 8017d68 <rmw_wait+0x34>
 8017d4c:	4bae      	ldr	r3, [pc, #696]	@ (8018008 <rmw_wait+0x2d4>)
 8017d4e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8017d50:	af04      	add	r7, sp, #16
 8017d52:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 8017d56:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8017d5a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8017d5e:	f7fe fd83 	bl	8016868 <rmw_time_equal>
 8017d62:	2800      	cmp	r0, #0
 8017d64:	f000 8127 	beq.w	8017fb6 <rmw_wait+0x282>
 8017d68:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8017d6c:	f7f5 fcb0 	bl	800d6d0 <rmw_uxrce_clean_expired_static_input_buffer>
 8017d70:	4ba6      	ldr	r3, [pc, #664]	@ (801800c <rmw_wait+0x2d8>)
 8017d72:	681c      	ldr	r4, [r3, #0]
 8017d74:	b14c      	cbz	r4, 8017d8a <rmw_wait+0x56>
 8017d76:	4623      	mov	r3, r4
 8017d78:	2100      	movs	r1, #0
 8017d7a:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 8017d7e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8017d82:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 8017d86:	2b00      	cmp	r3, #0
 8017d88:	d1f7      	bne.n	8017d7a <rmw_wait+0x46>
 8017d8a:	f1b9 0f00 	cmp.w	r9, #0
 8017d8e:	d011      	beq.n	8017db4 <rmw_wait+0x80>
 8017d90:	f8d9 1000 	ldr.w	r1, [r9]
 8017d94:	b171      	cbz	r1, 8017db4 <rmw_wait+0x80>
 8017d96:	f8d9 c004 	ldr.w	ip, [r9, #4]
 8017d9a:	2300      	movs	r3, #0
 8017d9c:	2001      	movs	r0, #1
 8017d9e:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8017da2:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8017da4:	6912      	ldr	r2, [r2, #16]
 8017da6:	3301      	adds	r3, #1
 8017da8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8017dac:	4299      	cmp	r1, r3
 8017dae:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8017db2:	d1f4      	bne.n	8017d9e <rmw_wait+0x6a>
 8017db4:	f1b8 0f00 	cmp.w	r8, #0
 8017db8:	d011      	beq.n	8017dde <rmw_wait+0xaa>
 8017dba:	f8d8 1000 	ldr.w	r1, [r8]
 8017dbe:	b171      	cbz	r1, 8017dde <rmw_wait+0xaa>
 8017dc0:	f8d8 c004 	ldr.w	ip, [r8, #4]
 8017dc4:	2300      	movs	r3, #0
 8017dc6:	2001      	movs	r0, #1
 8017dc8:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8017dcc:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8017dce:	6912      	ldr	r2, [r2, #16]
 8017dd0:	3301      	adds	r3, #1
 8017dd2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8017dd6:	4299      	cmp	r1, r3
 8017dd8:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8017ddc:	d1f4      	bne.n	8017dc8 <rmw_wait+0x94>
 8017dde:	b185      	cbz	r5, 8017e02 <rmw_wait+0xce>
 8017de0:	6829      	ldr	r1, [r5, #0]
 8017de2:	b171      	cbz	r1, 8017e02 <rmw_wait+0xce>
 8017de4:	f8d5 c004 	ldr.w	ip, [r5, #4]
 8017de8:	2300      	movs	r3, #0
 8017dea:	2001      	movs	r0, #1
 8017dec:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8017df0:	6a12      	ldr	r2, [r2, #32]
 8017df2:	6912      	ldr	r2, [r2, #16]
 8017df4:	3301      	adds	r3, #1
 8017df6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8017dfa:	4299      	cmp	r1, r3
 8017dfc:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8017e00:	d1f4      	bne.n	8017dec <rmw_wait+0xb8>
 8017e02:	b34c      	cbz	r4, 8017e58 <rmw_wait+0x124>
 8017e04:	4622      	mov	r2, r4
 8017e06:	2300      	movs	r3, #0
 8017e08:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 8017e0c:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 8017e10:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 8017e14:	440b      	add	r3, r1
 8017e16:	b2db      	uxtb	r3, r3
 8017e18:	2a00      	cmp	r2, #0
 8017e1a:	d1f5      	bne.n	8017e08 <rmw_wait+0xd4>
 8017e1c:	2b00      	cmp	r3, #0
 8017e1e:	f000 8084 	beq.w	8017f2a <rmw_wait+0x1f6>
 8017e22:	1c7a      	adds	r2, r7, #1
 8017e24:	d00d      	beq.n	8017e42 <rmw_wait+0x10e>
 8017e26:	ee07 7a90 	vmov	s15, r7
 8017e2a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8017e2e:	ee07 3a90 	vmov	s15, r3
 8017e32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8017e36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8017e3a:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8017e3e:	ee17 7a90 	vmov	r7, s15
 8017e42:	68a0      	ldr	r0, [r4, #8]
 8017e44:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 8017e48:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 8017e4c:	2b00      	cmp	r3, #0
 8017e4e:	f040 8090 	bne.w	8017f72 <rmw_wait+0x23e>
 8017e52:	6864      	ldr	r4, [r4, #4]
 8017e54:	2c00      	cmp	r4, #0
 8017e56:	d1f4      	bne.n	8017e42 <rmw_wait+0x10e>
 8017e58:	f1b9 0f00 	cmp.w	r9, #0
 8017e5c:	f000 80bc 	beq.w	8017fd8 <rmw_wait+0x2a4>
 8017e60:	f8d9 7000 	ldr.w	r7, [r9]
 8017e64:	2f00      	cmp	r7, #0
 8017e66:	f000 808e 	beq.w	8017f86 <rmw_wait+0x252>
 8017e6a:	2400      	movs	r4, #0
 8017e6c:	4627      	mov	r7, r4
 8017e6e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8017e72:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8017e76:	f7f5 fc03 	bl	800d680 <rmw_uxrce_find_static_input_buffer_by_owner>
 8017e7a:	2800      	cmp	r0, #0
 8017e7c:	d05f      	beq.n	8017f3e <rmw_wait+0x20a>
 8017e7e:	f8d9 3000 	ldr.w	r3, [r9]
 8017e82:	3401      	adds	r4, #1
 8017e84:	42a3      	cmp	r3, r4
 8017e86:	f04f 0701 	mov.w	r7, #1
 8017e8a:	d8f0      	bhi.n	8017e6e <rmw_wait+0x13a>
 8017e8c:	f1b8 0f00 	cmp.w	r8, #0
 8017e90:	d012      	beq.n	8017eb8 <rmw_wait+0x184>
 8017e92:	f8d8 3000 	ldr.w	r3, [r8]
 8017e96:	b17b      	cbz	r3, 8017eb8 <rmw_wait+0x184>
 8017e98:	2400      	movs	r4, #0
 8017e9a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8017e9e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8017ea2:	f7f5 fbed 	bl	800d680 <rmw_uxrce_find_static_input_buffer_by_owner>
 8017ea6:	2800      	cmp	r0, #0
 8017ea8:	d051      	beq.n	8017f4e <rmw_wait+0x21a>
 8017eaa:	f8d8 3000 	ldr.w	r3, [r8]
 8017eae:	3401      	adds	r4, #1
 8017eb0:	42a3      	cmp	r3, r4
 8017eb2:	f04f 0701 	mov.w	r7, #1
 8017eb6:	d8f0      	bhi.n	8017e9a <rmw_wait+0x166>
 8017eb8:	b1dd      	cbz	r5, 8017ef2 <rmw_wait+0x1be>
 8017eba:	682b      	ldr	r3, [r5, #0]
 8017ebc:	b1cb      	cbz	r3, 8017ef2 <rmw_wait+0x1be>
 8017ebe:	2400      	movs	r4, #0
 8017ec0:	686b      	ldr	r3, [r5, #4]
 8017ec2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8017ec6:	f7f5 fbdb 	bl	800d680 <rmw_uxrce_find_static_input_buffer_by_owner>
 8017eca:	b158      	cbz	r0, 8017ee4 <rmw_wait+0x1b0>
 8017ecc:	682b      	ldr	r3, [r5, #0]
 8017ece:	3401      	adds	r4, #1
 8017ed0:	42a3      	cmp	r3, r4
 8017ed2:	d969      	bls.n	8017fa8 <rmw_wait+0x274>
 8017ed4:	686b      	ldr	r3, [r5, #4]
 8017ed6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8017eda:	2701      	movs	r7, #1
 8017edc:	f7f5 fbd0 	bl	800d680 <rmw_uxrce_find_static_input_buffer_by_owner>
 8017ee0:	2800      	cmp	r0, #0
 8017ee2:	d1f3      	bne.n	8017ecc <rmw_wait+0x198>
 8017ee4:	e9d5 3200 	ldrd	r3, r2, [r5]
 8017ee8:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8017eec:	3401      	adds	r4, #1
 8017eee:	42a3      	cmp	r3, r4
 8017ef0:	d8e6      	bhi.n	8017ec0 <rmw_wait+0x18c>
 8017ef2:	b1a6      	cbz	r6, 8017f1e <rmw_wait+0x1ea>
 8017ef4:	6834      	ldr	r4, [r6, #0]
 8017ef6:	b194      	cbz	r4, 8017f1e <rmw_wait+0x1ea>
 8017ef8:	2300      	movs	r3, #0
 8017efa:	461d      	mov	r5, r3
 8017efc:	e004      	b.n	8017f08 <rmw_wait+0x1d4>
 8017efe:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8017f02:	3301      	adds	r3, #1
 8017f04:	42a3      	cmp	r3, r4
 8017f06:	d00a      	beq.n	8017f1e <rmw_wait+0x1ea>
 8017f08:	6870      	ldr	r0, [r6, #4]
 8017f0a:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8017f0e:	7c0a      	ldrb	r2, [r1, #16]
 8017f10:	2a00      	cmp	r2, #0
 8017f12:	d0f4      	beq.n	8017efe <rmw_wait+0x1ca>
 8017f14:	3301      	adds	r3, #1
 8017f16:	42a3      	cmp	r3, r4
 8017f18:	740d      	strb	r5, [r1, #16]
 8017f1a:	4617      	mov	r7, r2
 8017f1c:	d1f4      	bne.n	8017f08 <rmw_wait+0x1d4>
 8017f1e:	2f00      	cmp	r7, #0
 8017f20:	d03e      	beq.n	8017fa0 <rmw_wait+0x26c>
 8017f22:	2000      	movs	r0, #0
 8017f24:	b009      	add	sp, #36	@ 0x24
 8017f26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017f2a:	68a0      	ldr	r0, [r4, #8]
 8017f2c:	2100      	movs	r1, #0
 8017f2e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017f32:	f7f9 facf 	bl	80114d4 <uxr_run_session_timeout>
 8017f36:	6864      	ldr	r4, [r4, #4]
 8017f38:	2c00      	cmp	r4, #0
 8017f3a:	d1f6      	bne.n	8017f2a <rmw_wait+0x1f6>
 8017f3c:	e78c      	b.n	8017e58 <rmw_wait+0x124>
 8017f3e:	e9d9 3200 	ldrd	r3, r2, [r9]
 8017f42:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8017f46:	3401      	adds	r4, #1
 8017f48:	42a3      	cmp	r3, r4
 8017f4a:	d890      	bhi.n	8017e6e <rmw_wait+0x13a>
 8017f4c:	e79e      	b.n	8017e8c <rmw_wait+0x158>
 8017f4e:	e9d8 3200 	ldrd	r3, r2, [r8]
 8017f52:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8017f56:	3401      	adds	r4, #1
 8017f58:	429c      	cmp	r4, r3
 8017f5a:	d39e      	bcc.n	8017e9a <rmw_wait+0x166>
 8017f5c:	e7ac      	b.n	8017eb8 <rmw_wait+0x184>
 8017f5e:	2b00      	cmp	r3, #0
 8017f60:	f47f aef3 	bne.w	8017d4a <rmw_wait+0x16>
 8017f64:	2800      	cmp	r0, #0
 8017f66:	f47f aef0 	bne.w	8017d4a <rmw_wait+0x16>
 8017f6a:	2900      	cmp	r1, #0
 8017f6c:	f47f aeed 	bne.w	8017d4a <rmw_wait+0x16>
 8017f70:	e7d7      	b.n	8017f22 <rmw_wait+0x1ee>
 8017f72:	4639      	mov	r1, r7
 8017f74:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017f78:	f7f9 fac6 	bl	8011508 <uxr_run_session_until_data>
 8017f7c:	6864      	ldr	r4, [r4, #4]
 8017f7e:	2c00      	cmp	r4, #0
 8017f80:	f47f af5f 	bne.w	8017e42 <rmw_wait+0x10e>
 8017f84:	e768      	b.n	8017e58 <rmw_wait+0x124>
 8017f86:	f1b8 0f00 	cmp.w	r8, #0
 8017f8a:	d032      	beq.n	8017ff2 <rmw_wait+0x2be>
 8017f8c:	f8d8 3000 	ldr.w	r3, [r8]
 8017f90:	2b00      	cmp	r3, #0
 8017f92:	d181      	bne.n	8017e98 <rmw_wait+0x164>
 8017f94:	461f      	mov	r7, r3
 8017f96:	2d00      	cmp	r5, #0
 8017f98:	d18f      	bne.n	8017eba <rmw_wait+0x186>
 8017f9a:	462f      	mov	r7, r5
 8017f9c:	2e00      	cmp	r6, #0
 8017f9e:	d1a9      	bne.n	8017ef4 <rmw_wait+0x1c0>
 8017fa0:	2002      	movs	r0, #2
 8017fa2:	b009      	add	sp, #36	@ 0x24
 8017fa4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017fa8:	2e00      	cmp	r6, #0
 8017faa:	d0ba      	beq.n	8017f22 <rmw_wait+0x1ee>
 8017fac:	6834      	ldr	r4, [r6, #0]
 8017fae:	2701      	movs	r7, #1
 8017fb0:	2c00      	cmp	r4, #0
 8017fb2:	d1a1      	bne.n	8017ef8 <rmw_wait+0x1c4>
 8017fb4:	e7b5      	b.n	8017f22 <rmw_wait+0x1ee>
 8017fb6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8017fba:	f7fe fca9 	bl	8016910 <rmw_time_total_nsec>
 8017fbe:	2300      	movs	r3, #0
 8017fc0:	4a13      	ldr	r2, [pc, #76]	@ (8018010 <rmw_wait+0x2dc>)
 8017fc2:	f7e8 fe7b 	bl	8000cbc <__aeabi_uldivmod>
 8017fc6:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 8017fca:	f171 0300 	sbcs.w	r3, r1, #0
 8017fce:	4607      	mov	r7, r0
 8017fd0:	bfa8      	it	ge
 8017fd2:	f06f 4700 	mvnge.w	r7, #2147483648	@ 0x80000000
 8017fd6:	e6c9      	b.n	8017d6c <rmw_wait+0x38>
 8017fd8:	f1b8 0f00 	cmp.w	r8, #0
 8017fdc:	d009      	beq.n	8017ff2 <rmw_wait+0x2be>
 8017fde:	f8d8 3000 	ldr.w	r3, [r8]
 8017fe2:	464f      	mov	r7, r9
 8017fe4:	2b00      	cmp	r3, #0
 8017fe6:	f47f af57 	bne.w	8017e98 <rmw_wait+0x164>
 8017fea:	2d00      	cmp	r5, #0
 8017fec:	f47f af65 	bne.w	8017eba <rmw_wait+0x186>
 8017ff0:	e7d3      	b.n	8017f9a <rmw_wait+0x266>
 8017ff2:	b17d      	cbz	r5, 8018014 <rmw_wait+0x2e0>
 8017ff4:	682b      	ldr	r3, [r5, #0]
 8017ff6:	4647      	mov	r7, r8
 8017ff8:	2b00      	cmp	r3, #0
 8017ffa:	f47f af60 	bne.w	8017ebe <rmw_wait+0x18a>
 8017ffe:	2e00      	cmp	r6, #0
 8018000:	f47f af78 	bne.w	8017ef4 <rmw_wait+0x1c0>
 8018004:	e7cc      	b.n	8017fa0 <rmw_wait+0x26c>
 8018006:	bf00      	nop
 8018008:	0801c610 	.word	0x0801c610
 801800c:	20015be4 	.word	0x20015be4
 8018010:	000f4240 	.word	0x000f4240
 8018014:	2e00      	cmp	r6, #0
 8018016:	d0c3      	beq.n	8017fa0 <rmw_wait+0x26c>
 8018018:	6834      	ldr	r4, [r6, #0]
 801801a:	462f      	mov	r7, r5
 801801c:	2c00      	cmp	r4, #0
 801801e:	f47f af6b 	bne.w	8017ef8 <rmw_wait+0x1c4>
 8018022:	e7bd      	b.n	8017fa0 <rmw_wait+0x26c>

08018024 <rmw_create_wait_set>:
 8018024:	b508      	push	{r3, lr}
 8018026:	4803      	ldr	r0, [pc, #12]	@ (8018034 <rmw_create_wait_set+0x10>)
 8018028:	f7fe fdea 	bl	8016c00 <get_memory>
 801802c:	b108      	cbz	r0, 8018032 <rmw_create_wait_set+0xe>
 801802e:	6880      	ldr	r0, [r0, #8]
 8018030:	3010      	adds	r0, #16
 8018032:	bd08      	pop	{r3, pc}
 8018034:	20015c24 	.word	0x20015c24

08018038 <rmw_destroy_wait_set>:
 8018038:	b508      	push	{r3, lr}
 801803a:	4b08      	ldr	r3, [pc, #32]	@ (801805c <rmw_destroy_wait_set+0x24>)
 801803c:	6819      	ldr	r1, [r3, #0]
 801803e:	b911      	cbnz	r1, 8018046 <rmw_destroy_wait_set+0xe>
 8018040:	e00a      	b.n	8018058 <rmw_destroy_wait_set+0x20>
 8018042:	6849      	ldr	r1, [r1, #4]
 8018044:	b141      	cbz	r1, 8018058 <rmw_destroy_wait_set+0x20>
 8018046:	688b      	ldr	r3, [r1, #8]
 8018048:	3310      	adds	r3, #16
 801804a:	4298      	cmp	r0, r3
 801804c:	d1f9      	bne.n	8018042 <rmw_destroy_wait_set+0xa>
 801804e:	4803      	ldr	r0, [pc, #12]	@ (801805c <rmw_destroy_wait_set+0x24>)
 8018050:	f7fe fde6 	bl	8016c20 <put_memory>
 8018054:	2000      	movs	r0, #0
 8018056:	bd08      	pop	{r3, pc}
 8018058:	2001      	movs	r0, #1
 801805a:	bd08      	pop	{r3, pc}
 801805c:	20015c24 	.word	0x20015c24

08018060 <rmw_uros_epoch_nanos>:
 8018060:	4b05      	ldr	r3, [pc, #20]	@ (8018078 <rmw_uros_epoch_nanos+0x18>)
 8018062:	681b      	ldr	r3, [r3, #0]
 8018064:	b123      	cbz	r3, 8018070 <rmw_uros_epoch_nanos+0x10>
 8018066:	6898      	ldr	r0, [r3, #8]
 8018068:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801806c:	f7f8 bea2 	b.w	8010db4 <uxr_epoch_nanos>
 8018070:	2000      	movs	r0, #0
 8018072:	2100      	movs	r1, #0
 8018074:	4770      	bx	lr
 8018076:	bf00      	nop
 8018078:	20015be4 	.word	0x20015be4

0801807c <sensor_msgs__msg__Imu__init>:
 801807c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018080:	4605      	mov	r5, r0
 8018082:	b3c0      	cbz	r0, 80180f6 <sensor_msgs__msg__Imu__init+0x7a>
 8018084:	f000 f864 	bl	8018150 <std_msgs__msg__Header__init>
 8018088:	4604      	mov	r4, r0
 801808a:	b310      	cbz	r0, 80180d2 <sensor_msgs__msg__Imu__init+0x56>
 801808c:	f105 0618 	add.w	r6, r5, #24
 8018090:	4630      	mov	r0, r6
 8018092:	f000 f8b1 	bl	80181f8 <geometry_msgs__msg__Quaternion__init>
 8018096:	4604      	mov	r4, r0
 8018098:	2800      	cmp	r0, #0
 801809a:	d040      	beq.n	801811e <sensor_msgs__msg__Imu__init+0xa2>
 801809c:	f105 0780 	add.w	r7, r5, #128	@ 0x80
 80180a0:	4638      	mov	r0, r7
 80180a2:	f000 f8bf 	bl	8018224 <geometry_msgs__msg__Vector3__init>
 80180a6:	4604      	mov	r4, r0
 80180a8:	b348      	cbz	r0, 80180fe <sensor_msgs__msg__Imu__init+0x82>
 80180aa:	f105 08e0 	add.w	r8, r5, #224	@ 0xe0
 80180ae:	4640      	mov	r0, r8
 80180b0:	f000 f8b8 	bl	8018224 <geometry_msgs__msg__Vector3__init>
 80180b4:	4604      	mov	r4, r0
 80180b6:	b9d8      	cbnz	r0, 80180f0 <sensor_msgs__msg__Imu__init+0x74>
 80180b8:	4628      	mov	r0, r5
 80180ba:	f000 f86d 	bl	8018198 <std_msgs__msg__Header__fini>
 80180be:	4630      	mov	r0, r6
 80180c0:	f000 f8ae 	bl	8018220 <geometry_msgs__msg__Quaternion__fini>
 80180c4:	4638      	mov	r0, r7
 80180c6:	f000 f8b1 	bl	801822c <geometry_msgs__msg__Vector3__fini>
 80180ca:	4640      	mov	r0, r8
 80180cc:	f000 f8ae 	bl	801822c <geometry_msgs__msg__Vector3__fini>
 80180d0:	e00e      	b.n	80180f0 <sensor_msgs__msg__Imu__init+0x74>
 80180d2:	4628      	mov	r0, r5
 80180d4:	f000 f860 	bl	8018198 <std_msgs__msg__Header__fini>
 80180d8:	f105 0018 	add.w	r0, r5, #24
 80180dc:	f000 f8a0 	bl	8018220 <geometry_msgs__msg__Quaternion__fini>
 80180e0:	f105 0080 	add.w	r0, r5, #128	@ 0x80
 80180e4:	f000 f8a2 	bl	801822c <geometry_msgs__msg__Vector3__fini>
 80180e8:	f105 00e0 	add.w	r0, r5, #224	@ 0xe0
 80180ec:	f000 f89e 	bl	801822c <geometry_msgs__msg__Vector3__fini>
 80180f0:	4620      	mov	r0, r4
 80180f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80180f6:	4604      	mov	r4, r0
 80180f8:	4620      	mov	r0, r4
 80180fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80180fe:	4628      	mov	r0, r5
 8018100:	f000 f84a 	bl	8018198 <std_msgs__msg__Header__fini>
 8018104:	4630      	mov	r0, r6
 8018106:	f000 f88b 	bl	8018220 <geometry_msgs__msg__Quaternion__fini>
 801810a:	4638      	mov	r0, r7
 801810c:	f000 f88e 	bl	801822c <geometry_msgs__msg__Vector3__fini>
 8018110:	f105 00e0 	add.w	r0, r5, #224	@ 0xe0
 8018114:	f000 f88a 	bl	801822c <geometry_msgs__msg__Vector3__fini>
 8018118:	4620      	mov	r0, r4
 801811a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801811e:	4628      	mov	r0, r5
 8018120:	f000 f83a 	bl	8018198 <std_msgs__msg__Header__fini>
 8018124:	4630      	mov	r0, r6
 8018126:	e7d9      	b.n	80180dc <sensor_msgs__msg__Imu__init+0x60>

08018128 <sensor_msgs__msg__Imu__fini>:
 8018128:	b188      	cbz	r0, 801814e <sensor_msgs__msg__Imu__fini+0x26>
 801812a:	b510      	push	{r4, lr}
 801812c:	4604      	mov	r4, r0
 801812e:	f000 f833 	bl	8018198 <std_msgs__msg__Header__fini>
 8018132:	f104 0018 	add.w	r0, r4, #24
 8018136:	f000 f873 	bl	8018220 <geometry_msgs__msg__Quaternion__fini>
 801813a:	f104 0080 	add.w	r0, r4, #128	@ 0x80
 801813e:	f000 f875 	bl	801822c <geometry_msgs__msg__Vector3__fini>
 8018142:	f104 00e0 	add.w	r0, r4, #224	@ 0xe0
 8018146:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801814a:	f000 b86f 	b.w	801822c <geometry_msgs__msg__Vector3__fini>
 801814e:	4770      	bx	lr

08018150 <std_msgs__msg__Header__init>:
 8018150:	b570      	push	{r4, r5, r6, lr}
 8018152:	4605      	mov	r5, r0
 8018154:	b1a8      	cbz	r0, 8018182 <std_msgs__msg__Header__init+0x32>
 8018156:	f000 f849 	bl	80181ec <builtin_interfaces__msg__Time__init>
 801815a:	4604      	mov	r4, r0
 801815c:	b140      	cbz	r0, 8018170 <std_msgs__msg__Header__init+0x20>
 801815e:	f105 0608 	add.w	r6, r5, #8
 8018162:	4630      	mov	r0, r6
 8018164:	f002 f8bc 	bl	801a2e0 <rosidl_runtime_c__String__init>
 8018168:	4604      	mov	r4, r0
 801816a:	b168      	cbz	r0, 8018188 <std_msgs__msg__Header__init+0x38>
 801816c:	4620      	mov	r0, r4
 801816e:	bd70      	pop	{r4, r5, r6, pc}
 8018170:	4628      	mov	r0, r5
 8018172:	f000 f83f 	bl	80181f4 <builtin_interfaces__msg__Time__fini>
 8018176:	f105 0008 	add.w	r0, r5, #8
 801817a:	f002 f8c7 	bl	801a30c <rosidl_runtime_c__String__fini>
 801817e:	4620      	mov	r0, r4
 8018180:	bd70      	pop	{r4, r5, r6, pc}
 8018182:	4604      	mov	r4, r0
 8018184:	4620      	mov	r0, r4
 8018186:	bd70      	pop	{r4, r5, r6, pc}
 8018188:	4628      	mov	r0, r5
 801818a:	f000 f833 	bl	80181f4 <builtin_interfaces__msg__Time__fini>
 801818e:	4630      	mov	r0, r6
 8018190:	f002 f8bc 	bl	801a30c <rosidl_runtime_c__String__fini>
 8018194:	e7ea      	b.n	801816c <std_msgs__msg__Header__init+0x1c>
 8018196:	bf00      	nop

08018198 <std_msgs__msg__Header__fini>:
 8018198:	b148      	cbz	r0, 80181ae <std_msgs__msg__Header__fini+0x16>
 801819a:	b510      	push	{r4, lr}
 801819c:	4604      	mov	r4, r0
 801819e:	f000 f829 	bl	80181f4 <builtin_interfaces__msg__Time__fini>
 80181a2:	f104 0008 	add.w	r0, r4, #8
 80181a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80181aa:	f002 b8af 	b.w	801a30c <rosidl_runtime_c__String__fini>
 80181ae:	4770      	bx	lr

080181b0 <std_srvs__srv__SetBool_Request__init>:
 80181b0:	3800      	subs	r0, #0
 80181b2:	bf18      	it	ne
 80181b4:	2001      	movne	r0, #1
 80181b6:	4770      	bx	lr

080181b8 <std_srvs__srv__SetBool_Request__fini>:
 80181b8:	4770      	bx	lr
 80181ba:	bf00      	nop

080181bc <std_srvs__srv__SetBool_Response__init>:
 80181bc:	b538      	push	{r3, r4, r5, lr}
 80181be:	b138      	cbz	r0, 80181d0 <std_srvs__srv__SetBool_Response__init+0x14>
 80181c0:	1d05      	adds	r5, r0, #4
 80181c2:	4628      	mov	r0, r5
 80181c4:	f002 f88c 	bl	801a2e0 <rosidl_runtime_c__String__init>
 80181c8:	4604      	mov	r4, r0
 80181ca:	b120      	cbz	r0, 80181d6 <std_srvs__srv__SetBool_Response__init+0x1a>
 80181cc:	4620      	mov	r0, r4
 80181ce:	bd38      	pop	{r3, r4, r5, pc}
 80181d0:	4604      	mov	r4, r0
 80181d2:	4620      	mov	r0, r4
 80181d4:	bd38      	pop	{r3, r4, r5, pc}
 80181d6:	4628      	mov	r0, r5
 80181d8:	f002 f898 	bl	801a30c <rosidl_runtime_c__String__fini>
 80181dc:	4620      	mov	r0, r4
 80181de:	bd38      	pop	{r3, r4, r5, pc}

080181e0 <std_srvs__srv__SetBool_Response__fini>:
 80181e0:	b110      	cbz	r0, 80181e8 <std_srvs__srv__SetBool_Response__fini+0x8>
 80181e2:	3004      	adds	r0, #4
 80181e4:	f002 b892 	b.w	801a30c <rosidl_runtime_c__String__fini>
 80181e8:	4770      	bx	lr
 80181ea:	bf00      	nop

080181ec <builtin_interfaces__msg__Time__init>:
 80181ec:	3800      	subs	r0, #0
 80181ee:	bf18      	it	ne
 80181f0:	2001      	movne	r0, #1
 80181f2:	4770      	bx	lr

080181f4 <builtin_interfaces__msg__Time__fini>:
 80181f4:	4770      	bx	lr
 80181f6:	bf00      	nop

080181f8 <geometry_msgs__msg__Quaternion__init>:
 80181f8:	b160      	cbz	r0, 8018214 <geometry_msgs__msg__Quaternion__init+0x1c>
 80181fa:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 8018218 <geometry_msgs__msg__Quaternion__init+0x20>
 80181fe:	2200      	movs	r2, #0
 8018200:	2300      	movs	r3, #0
 8018202:	e9c0 2300 	strd	r2, r3, [r0]
 8018206:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801820a:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801820e:	ed80 7b06 	vstr	d7, [r0, #24]
 8018212:	2001      	movs	r0, #1
 8018214:	4770      	bx	lr
 8018216:	bf00      	nop
 8018218:	00000000 	.word	0x00000000
 801821c:	3ff00000 	.word	0x3ff00000

08018220 <geometry_msgs__msg__Quaternion__fini>:
 8018220:	4770      	bx	lr
 8018222:	bf00      	nop

08018224 <geometry_msgs__msg__Vector3__init>:
 8018224:	3800      	subs	r0, #0
 8018226:	bf18      	it	ne
 8018228:	2001      	movne	r0, #1
 801822a:	4770      	bx	lr

0801822c <geometry_msgs__msg__Vector3__fini>:
 801822c:	4770      	bx	lr
 801822e:	bf00      	nop

08018230 <ucdr_serialize_string>:
 8018230:	b510      	push	{r4, lr}
 8018232:	b082      	sub	sp, #8
 8018234:	4604      	mov	r4, r0
 8018236:	4608      	mov	r0, r1
 8018238:	9101      	str	r1, [sp, #4]
 801823a:	f7e7 ffeb 	bl	8000214 <strlen>
 801823e:	9901      	ldr	r1, [sp, #4]
 8018240:	1c42      	adds	r2, r0, #1
 8018242:	4620      	mov	r0, r4
 8018244:	b002      	add	sp, #8
 8018246:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801824a:	f7f8 b9d9 	b.w	8010600 <ucdr_serialize_sequence_char>
 801824e:	bf00      	nop

08018250 <ucdr_deserialize_string>:
 8018250:	b500      	push	{lr}
 8018252:	b083      	sub	sp, #12
 8018254:	ab01      	add	r3, sp, #4
 8018256:	f7f8 f9e5 	bl	8010624 <ucdr_deserialize_sequence_char>
 801825a:	b003      	add	sp, #12
 801825c:	f85d fb04 	ldr.w	pc, [sp], #4

08018260 <get_custom_error>:
 8018260:	4b01      	ldr	r3, [pc, #4]	@ (8018268 <get_custom_error+0x8>)
 8018262:	7818      	ldrb	r0, [r3, #0]
 8018264:	4770      	bx	lr
 8018266:	bf00      	nop
 8018268:	20015f48 	.word	0x20015f48

0801826c <recv_custom_msg>:
 801826c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018270:	4693      	mov	fp, r2
 8018272:	b089      	sub	sp, #36	@ 0x24
 8018274:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 8018278:	9305      	str	r3, [sp, #20]
 801827a:	468a      	mov	sl, r1
 801827c:	2100      	movs	r1, #0
 801827e:	4604      	mov	r4, r0
 8018280:	f88d 101e 	strb.w	r1, [sp, #30]
 8018284:	b322      	cbz	r2, 80182d0 <recv_custom_msg+0x64>
 8018286:	f200 2902 	addw	r9, r0, #514	@ 0x202
 801828a:	f10d 081f 	add.w	r8, sp, #31
 801828e:	af05      	add	r7, sp, #20
 8018290:	f10d 061e 	add.w	r6, sp, #30
 8018294:	f44f 7500 	mov.w	r5, #512	@ 0x200
 8018298:	e002      	b.n	80182a0 <recv_custom_msg+0x34>
 801829a:	9b05      	ldr	r3, [sp, #20]
 801829c:	2b00      	cmp	r3, #0
 801829e:	dd0f      	ble.n	80182c0 <recv_custom_msg+0x54>
 80182a0:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 80182a4:	4623      	mov	r3, r4
 80182a6:	e9cd 7802 	strd	r7, r8, [sp, #8]
 80182aa:	e9cd 5600 	strd	r5, r6, [sp]
 80182ae:	4622      	mov	r2, r4
 80182b0:	4648      	mov	r0, r9
 80182b2:	f001 f92d 	bl	8019510 <uxr_read_framed_msg>
 80182b6:	2800      	cmp	r0, #0
 80182b8:	d0ef      	beq.n	801829a <recv_custom_msg+0x2e>
 80182ba:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80182be:	b1b3      	cbz	r3, 80182ee <recv_custom_msg+0x82>
 80182c0:	4b0f      	ldr	r3, [pc, #60]	@ (8018300 <recv_custom_msg+0x94>)
 80182c2:	f89d 201f 	ldrb.w	r2, [sp, #31]
 80182c6:	701a      	strb	r2, [r3, #0]
 80182c8:	2000      	movs	r0, #0
 80182ca:	b009      	add	sp, #36	@ 0x24
 80182cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80182d0:	f10d 021f 	add.w	r2, sp, #31
 80182d4:	9200      	str	r2, [sp, #0]
 80182d6:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 80182da:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80182de:	4601      	mov	r1, r0
 80182e0:	47a8      	blx	r5
 80182e2:	2800      	cmp	r0, #0
 80182e4:	d0ec      	beq.n	80182c0 <recv_custom_msg+0x54>
 80182e6:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80182ea:	2b00      	cmp	r3, #0
 80182ec:	d1e8      	bne.n	80182c0 <recv_custom_msg+0x54>
 80182ee:	f8cb 0000 	str.w	r0, [fp]
 80182f2:	2001      	movs	r0, #1
 80182f4:	f8ca 4000 	str.w	r4, [sl]
 80182f8:	b009      	add	sp, #36	@ 0x24
 80182fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80182fe:	bf00      	nop
 8018300:	20015f48 	.word	0x20015f48

08018304 <send_custom_msg>:
 8018304:	b530      	push	{r4, r5, lr}
 8018306:	f890 4200 	ldrb.w	r4, [r0, #512]	@ 0x200
 801830a:	b087      	sub	sp, #28
 801830c:	4615      	mov	r5, r2
 801830e:	b974      	cbnz	r4, 801832e <send_custom_msg+0x2a>
 8018310:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 8018314:	f10d 0317 	add.w	r3, sp, #23
 8018318:	47a0      	blx	r4
 801831a:	b108      	cbz	r0, 8018320 <send_custom_msg+0x1c>
 801831c:	42a8      	cmp	r0, r5
 801831e:	d015      	beq.n	801834c <send_custom_msg+0x48>
 8018320:	4b0c      	ldr	r3, [pc, #48]	@ (8018354 <send_custom_msg+0x50>)
 8018322:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8018326:	701a      	strb	r2, [r3, #0]
 8018328:	2000      	movs	r0, #0
 801832a:	b007      	add	sp, #28
 801832c:	bd30      	pop	{r4, r5, pc}
 801832e:	460b      	mov	r3, r1
 8018330:	2200      	movs	r2, #0
 8018332:	f10d 0117 	add.w	r1, sp, #23
 8018336:	e9cd 2101 	strd	r2, r1, [sp, #4]
 801833a:	4602      	mov	r2, r0
 801833c:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 8018340:	9500      	str	r5, [sp, #0]
 8018342:	f200 2002 	addw	r0, r0, #514	@ 0x202
 8018346:	f000 feeb 	bl	8019120 <uxr_write_framed_msg>
 801834a:	e7e6      	b.n	801831a <send_custom_msg+0x16>
 801834c:	2001      	movs	r0, #1
 801834e:	b007      	add	sp, #28
 8018350:	bd30      	pop	{r4, r5, pc}
 8018352:	bf00      	nop
 8018354:	20015f48 	.word	0x20015f48

08018358 <uxr_set_custom_transport_callbacks>:
 8018358:	b410      	push	{r4}
 801835a:	9c01      	ldr	r4, [sp, #4]
 801835c:	f8c0 4270 	str.w	r4, [r0, #624]	@ 0x270
 8018360:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 8018364:	9b02      	ldr	r3, [sp, #8]
 8018366:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 801836a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801836e:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
 8018372:	4770      	bx	lr

08018374 <uxr_init_custom_transport>:
 8018374:	b538      	push	{r3, r4, r5, lr}
 8018376:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 801837a:	b303      	cbz	r3, 80183be <uxr_init_custom_transport+0x4a>
 801837c:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 8018380:	4604      	mov	r4, r0
 8018382:	b1e2      	cbz	r2, 80183be <uxr_init_custom_transport+0x4a>
 8018384:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 8018388:	b1ca      	cbz	r2, 80183be <uxr_init_custom_transport+0x4a>
 801838a:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 801838e:	b1b2      	cbz	r2, 80183be <uxr_init_custom_transport+0x4a>
 8018390:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 8018394:	4798      	blx	r3
 8018396:	4605      	mov	r5, r0
 8018398:	b188      	cbz	r0, 80183be <uxr_init_custom_transport+0x4a>
 801839a:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 801839e:	b98b      	cbnz	r3, 80183c4 <uxr_init_custom_transport+0x50>
 80183a0:	490b      	ldr	r1, [pc, #44]	@ (80183d0 <uxr_init_custom_transport+0x5c>)
 80183a2:	4b0c      	ldr	r3, [pc, #48]	@ (80183d4 <uxr_init_custom_transport+0x60>)
 80183a4:	4a0c      	ldr	r2, [pc, #48]	@ (80183d8 <uxr_init_custom_transport+0x64>)
 80183a6:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 80183aa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80183ae:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 80183b2:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 80183b6:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 80183ba:	4628      	mov	r0, r5
 80183bc:	bd38      	pop	{r3, r4, r5, pc}
 80183be:	2500      	movs	r5, #0
 80183c0:	4628      	mov	r0, r5
 80183c2:	bd38      	pop	{r3, r4, r5, pc}
 80183c4:	2100      	movs	r1, #0
 80183c6:	f204 2002 	addw	r0, r4, #514	@ 0x202
 80183ca:	f000 fea3 	bl	8019114 <uxr_init_framing_io>
 80183ce:	e7e7      	b.n	80183a0 <uxr_init_custom_transport+0x2c>
 80183d0:	08018305 	.word	0x08018305
 80183d4:	0801826d 	.word	0x0801826d
 80183d8:	08018261 	.word	0x08018261

080183dc <uxr_close_custom_transport>:
 80183dc:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 80183e0:	4718      	bx	r3
 80183e2:	bf00      	nop

080183e4 <uxr_init_input_best_effort_stream>:
 80183e4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80183e8:	8003      	strh	r3, [r0, #0]
 80183ea:	4770      	bx	lr

080183ec <uxr_reset_input_best_effort_stream>:
 80183ec:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80183f0:	8003      	strh	r3, [r0, #0]
 80183f2:	4770      	bx	lr

080183f4 <uxr_receive_best_effort_message>:
 80183f4:	b538      	push	{r3, r4, r5, lr}
 80183f6:	4604      	mov	r4, r0
 80183f8:	8800      	ldrh	r0, [r0, #0]
 80183fa:	460d      	mov	r5, r1
 80183fc:	f000 fe72 	bl	80190e4 <uxr_seq_num_cmp>
 8018400:	4603      	mov	r3, r0
 8018402:	2b00      	cmp	r3, #0
 8018404:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 8018408:	bfb8      	it	lt
 801840a:	8025      	strhlt	r5, [r4, #0]
 801840c:	bd38      	pop	{r3, r4, r5, pc}
 801840e:	bf00      	nop

08018410 <on_full_input_buffer>:
 8018410:	b570      	push	{r4, r5, r6, lr}
 8018412:	4605      	mov	r5, r0
 8018414:	460c      	mov	r4, r1
 8018416:	682b      	ldr	r3, [r5, #0]
 8018418:	6809      	ldr	r1, [r1, #0]
 801841a:	8920      	ldrh	r0, [r4, #8]
 801841c:	6862      	ldr	r2, [r4, #4]
 801841e:	fbb2 f2f0 	udiv	r2, r2, r0
 8018422:	eba3 0c01 	sub.w	ip, r3, r1
 8018426:	fbbc fcf2 	udiv	ip, ip, r2
 801842a:	f10c 0c01 	add.w	ip, ip, #1
 801842e:	fa1f f38c 	uxth.w	r3, ip
 8018432:	fbb3 f6f0 	udiv	r6, r3, r0
 8018436:	fb00 3316 	mls	r3, r0, r6, r3
 801843a:	b29b      	uxth	r3, r3
 801843c:	fb02 f303 	mul.w	r3, r2, r3
 8018440:	1d18      	adds	r0, r3, #4
 8018442:	4408      	add	r0, r1
 8018444:	7d26      	ldrb	r6, [r4, #20]
 8018446:	f850 2c04 	ldr.w	r2, [r0, #-4]
 801844a:	b116      	cbz	r6, 8018452 <on_full_input_buffer+0x42>
 801844c:	2600      	movs	r6, #0
 801844e:	f840 6c04 	str.w	r6, [r0, #-4]
 8018452:	2a03      	cmp	r2, #3
 8018454:	d801      	bhi.n	801845a <on_full_input_buffer+0x4a>
 8018456:	2001      	movs	r0, #1
 8018458:	bd70      	pop	{r4, r5, r6, pc}
 801845a:	3308      	adds	r3, #8
 801845c:	4419      	add	r1, r3
 801845e:	4628      	mov	r0, r5
 8018460:	692b      	ldr	r3, [r5, #16]
 8018462:	3a04      	subs	r2, #4
 8018464:	f7f8 f854 	bl	8010510 <ucdr_init_buffer_origin>
 8018468:	4628      	mov	r0, r5
 801846a:	4903      	ldr	r1, [pc, #12]	@ (8018478 <on_full_input_buffer+0x68>)
 801846c:	4622      	mov	r2, r4
 801846e:	f7f8 f82b 	bl	80104c8 <ucdr_set_on_full_buffer_callback>
 8018472:	2000      	movs	r0, #0
 8018474:	bd70      	pop	{r4, r5, r6, pc}
 8018476:	bf00      	nop
 8018478:	08018411 	.word	0x08018411

0801847c <uxr_init_input_reliable_stream>:
 801847c:	b500      	push	{lr}
 801847e:	e9c0 1200 	strd	r1, r2, [r0]
 8018482:	f04f 0e00 	mov.w	lr, #0
 8018486:	9a01      	ldr	r2, [sp, #4]
 8018488:	8103      	strh	r3, [r0, #8]
 801848a:	6102      	str	r2, [r0, #16]
 801848c:	f880 e014 	strb.w	lr, [r0, #20]
 8018490:	b1d3      	cbz	r3, 80184c8 <uxr_init_input_reliable_stream+0x4c>
 8018492:	f8c1 e000 	str.w	lr, [r1]
 8018496:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801849a:	f1bc 0f01 	cmp.w	ip, #1
 801849e:	d913      	bls.n	80184c8 <uxr_init_input_reliable_stream+0x4c>
 80184a0:	2301      	movs	r3, #1
 80184a2:	fbb3 f1fc 	udiv	r1, r3, ip
 80184a6:	fb0c 3111 	mls	r1, ip, r1, r3
 80184aa:	b289      	uxth	r1, r1
 80184ac:	6842      	ldr	r2, [r0, #4]
 80184ae:	fbb2 f2fc 	udiv	r2, r2, ip
 80184b2:	fb01 f202 	mul.w	r2, r1, r2
 80184b6:	6801      	ldr	r1, [r0, #0]
 80184b8:	f841 e002 	str.w	lr, [r1, r2]
 80184bc:	3301      	adds	r3, #1
 80184be:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80184c2:	b29b      	uxth	r3, r3
 80184c4:	459c      	cmp	ip, r3
 80184c6:	d8ec      	bhi.n	80184a2 <uxr_init_input_reliable_stream+0x26>
 80184c8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80184cc:	60c3      	str	r3, [r0, #12]
 80184ce:	f85d fb04 	ldr.w	pc, [sp], #4
 80184d2:	bf00      	nop

080184d4 <uxr_reset_input_reliable_stream>:
 80184d4:	8901      	ldrh	r1, [r0, #8]
 80184d6:	b1e9      	cbz	r1, 8018514 <uxr_reset_input_reliable_stream+0x40>
 80184d8:	f04f 0c00 	mov.w	ip, #0
 80184dc:	b500      	push	{lr}
 80184de:	4663      	mov	r3, ip
 80184e0:	46e6      	mov	lr, ip
 80184e2:	fbb3 f2f1 	udiv	r2, r3, r1
 80184e6:	fb01 3312 	mls	r3, r1, r2, r3
 80184ea:	b29b      	uxth	r3, r3
 80184ec:	6842      	ldr	r2, [r0, #4]
 80184ee:	fbb2 f2f1 	udiv	r2, r2, r1
 80184f2:	fb02 f303 	mul.w	r3, r2, r3
 80184f6:	6802      	ldr	r2, [r0, #0]
 80184f8:	f842 e003 	str.w	lr, [r2, r3]
 80184fc:	f10c 0c01 	add.w	ip, ip, #1
 8018500:	8901      	ldrh	r1, [r0, #8]
 8018502:	fa1f f38c 	uxth.w	r3, ip
 8018506:	4299      	cmp	r1, r3
 8018508:	d8eb      	bhi.n	80184e2 <uxr_reset_input_reliable_stream+0xe>
 801850a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801850e:	60c3      	str	r3, [r0, #12]
 8018510:	f85d fb04 	ldr.w	pc, [sp], #4
 8018514:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8018518:	60c3      	str	r3, [r0, #12]
 801851a:	4770      	bx	lr

0801851c <uxr_receive_reliable_message>:
 801851c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018520:	4604      	mov	r4, r0
 8018522:	460d      	mov	r5, r1
 8018524:	8901      	ldrh	r1, [r0, #8]
 8018526:	8980      	ldrh	r0, [r0, #12]
 8018528:	4690      	mov	r8, r2
 801852a:	461f      	mov	r7, r3
 801852c:	f000 fdd2 	bl	80190d4 <uxr_seq_num_add>
 8018530:	4629      	mov	r1, r5
 8018532:	4606      	mov	r6, r0
 8018534:	89a0      	ldrh	r0, [r4, #12]
 8018536:	f000 fdd5 	bl	80190e4 <uxr_seq_num_cmp>
 801853a:	2800      	cmp	r0, #0
 801853c:	db0a      	blt.n	8018554 <uxr_receive_reliable_message+0x38>
 801853e:	2600      	movs	r6, #0
 8018540:	89e0      	ldrh	r0, [r4, #14]
 8018542:	4629      	mov	r1, r5
 8018544:	f000 fdce 	bl	80190e4 <uxr_seq_num_cmp>
 8018548:	2800      	cmp	r0, #0
 801854a:	da00      	bge.n	801854e <uxr_receive_reliable_message+0x32>
 801854c:	81e5      	strh	r5, [r4, #14]
 801854e:	4630      	mov	r0, r6
 8018550:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018554:	4630      	mov	r0, r6
 8018556:	4629      	mov	r1, r5
 8018558:	f000 fdc4 	bl	80190e4 <uxr_seq_num_cmp>
 801855c:	2800      	cmp	r0, #0
 801855e:	dbee      	blt.n	801853e <uxr_receive_reliable_message+0x22>
 8018560:	6923      	ldr	r3, [r4, #16]
 8018562:	4640      	mov	r0, r8
 8018564:	4798      	blx	r3
 8018566:	2101      	movs	r1, #1
 8018568:	4681      	mov	r9, r0
 801856a:	89a0      	ldrh	r0, [r4, #12]
 801856c:	f000 fdb2 	bl	80190d4 <uxr_seq_num_add>
 8018570:	f1b9 0f00 	cmp.w	r9, #0
 8018574:	d101      	bne.n	801857a <uxr_receive_reliable_message+0x5e>
 8018576:	4285      	cmp	r5, r0
 8018578:	d047      	beq.n	801860a <uxr_receive_reliable_message+0xee>
 801857a:	8922      	ldrh	r2, [r4, #8]
 801857c:	fbb5 f0f2 	udiv	r0, r5, r2
 8018580:	fb02 5010 	mls	r0, r2, r0, r5
 8018584:	b280      	uxth	r0, r0
 8018586:	6863      	ldr	r3, [r4, #4]
 8018588:	fbb3 f3f2 	udiv	r3, r3, r2
 801858c:	fb00 f303 	mul.w	r3, r0, r3
 8018590:	6820      	ldr	r0, [r4, #0]
 8018592:	3304      	adds	r3, #4
 8018594:	4418      	add	r0, r3
 8018596:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801859a:	2b00      	cmp	r3, #0
 801859c:	d1cf      	bne.n	801853e <uxr_receive_reliable_message+0x22>
 801859e:	4641      	mov	r1, r8
 80185a0:	463a      	mov	r2, r7
 80185a2:	f002 ff80 	bl	801b4a6 <memcpy>
 80185a6:	8921      	ldrh	r1, [r4, #8]
 80185a8:	fbb5 f2f1 	udiv	r2, r5, r1
 80185ac:	fb01 5212 	mls	r2, r1, r2, r5
 80185b0:	b292      	uxth	r2, r2
 80185b2:	6863      	ldr	r3, [r4, #4]
 80185b4:	fbb3 f3f1 	udiv	r3, r3, r1
 80185b8:	fb02 f303 	mul.w	r3, r2, r3
 80185bc:	6822      	ldr	r2, [r4, #0]
 80185be:	50d7      	str	r7, [r2, r3]
 80185c0:	9a08      	ldr	r2, [sp, #32]
 80185c2:	2301      	movs	r3, #1
 80185c4:	7013      	strb	r3, [r2, #0]
 80185c6:	f1b9 0f00 	cmp.w	r9, #0
 80185ca:	d0b8      	beq.n	801853e <uxr_receive_reliable_message+0x22>
 80185cc:	89a6      	ldrh	r6, [r4, #12]
 80185ce:	4630      	mov	r0, r6
 80185d0:	2101      	movs	r1, #1
 80185d2:	f000 fd7f 	bl	80190d4 <uxr_seq_num_add>
 80185d6:	8922      	ldrh	r2, [r4, #8]
 80185d8:	6863      	ldr	r3, [r4, #4]
 80185da:	fbb3 f3f2 	udiv	r3, r3, r2
 80185de:	4606      	mov	r6, r0
 80185e0:	fbb0 f0f2 	udiv	r0, r0, r2
 80185e4:	fb02 6010 	mls	r0, r2, r0, r6
 80185e8:	b280      	uxth	r0, r0
 80185ea:	fb00 f303 	mul.w	r3, r0, r3
 80185ee:	6820      	ldr	r0, [r4, #0]
 80185f0:	3304      	adds	r3, #4
 80185f2:	4418      	add	r0, r3
 80185f4:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80185f8:	2b00      	cmp	r3, #0
 80185fa:	d0a0      	beq.n	801853e <uxr_receive_reliable_message+0x22>
 80185fc:	6923      	ldr	r3, [r4, #16]
 80185fe:	4798      	blx	r3
 8018600:	2802      	cmp	r0, #2
 8018602:	d008      	beq.n	8018616 <uxr_receive_reliable_message+0xfa>
 8018604:	2801      	cmp	r0, #1
 8018606:	d0e2      	beq.n	80185ce <uxr_receive_reliable_message+0xb2>
 8018608:	e799      	b.n	801853e <uxr_receive_reliable_message+0x22>
 801860a:	9b08      	ldr	r3, [sp, #32]
 801860c:	81a5      	strh	r5, [r4, #12]
 801860e:	2601      	movs	r6, #1
 8018610:	f883 9000 	strb.w	r9, [r3]
 8018614:	e794      	b.n	8018540 <uxr_receive_reliable_message+0x24>
 8018616:	2601      	movs	r6, #1
 8018618:	e792      	b.n	8018540 <uxr_receive_reliable_message+0x24>
 801861a:	bf00      	nop

0801861c <uxr_next_input_reliable_buffer_available>:
 801861c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018620:	4604      	mov	r4, r0
 8018622:	460f      	mov	r7, r1
 8018624:	8980      	ldrh	r0, [r0, #12]
 8018626:	2101      	movs	r1, #1
 8018628:	4690      	mov	r8, r2
 801862a:	f000 fd53 	bl	80190d4 <uxr_seq_num_add>
 801862e:	8922      	ldrh	r2, [r4, #8]
 8018630:	fbb0 f6f2 	udiv	r6, r0, r2
 8018634:	fb02 0616 	mls	r6, r2, r6, r0
 8018638:	b2b6      	uxth	r6, r6
 801863a:	6863      	ldr	r3, [r4, #4]
 801863c:	fbb3 f3f2 	udiv	r3, r3, r2
 8018640:	fb06 f303 	mul.w	r3, r6, r3
 8018644:	6826      	ldr	r6, [r4, #0]
 8018646:	3304      	adds	r3, #4
 8018648:	441e      	add	r6, r3
 801864a:	f856 9c04 	ldr.w	r9, [r6, #-4]
 801864e:	f1b9 0f00 	cmp.w	r9, #0
 8018652:	d023      	beq.n	801869c <uxr_next_input_reliable_buffer_available+0x80>
 8018654:	6923      	ldr	r3, [r4, #16]
 8018656:	4605      	mov	r5, r0
 8018658:	4630      	mov	r0, r6
 801865a:	4798      	blx	r3
 801865c:	4682      	mov	sl, r0
 801865e:	b300      	cbz	r0, 80186a2 <uxr_next_input_reliable_buffer_available+0x86>
 8018660:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 8018664:	2101      	movs	r1, #1
 8018666:	4650      	mov	r0, sl
 8018668:	f000 fd34 	bl	80190d4 <uxr_seq_num_add>
 801866c:	8921      	ldrh	r1, [r4, #8]
 801866e:	fbb0 f2f1 	udiv	r2, r0, r1
 8018672:	4682      	mov	sl, r0
 8018674:	fb01 0212 	mls	r2, r1, r2, r0
 8018678:	e9d4 0300 	ldrd	r0, r3, [r4]
 801867c:	b292      	uxth	r2, r2
 801867e:	fbb3 f3f1 	udiv	r3, r3, r1
 8018682:	fb02 f303 	mul.w	r3, r2, r3
 8018686:	3304      	adds	r3, #4
 8018688:	4418      	add	r0, r3
 801868a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801868e:	b12b      	cbz	r3, 801869c <uxr_next_input_reliable_buffer_available+0x80>
 8018690:	6923      	ldr	r3, [r4, #16]
 8018692:	4798      	blx	r3
 8018694:	2802      	cmp	r0, #2
 8018696:	d01b      	beq.n	80186d0 <uxr_next_input_reliable_buffer_available+0xb4>
 8018698:	2801      	cmp	r0, #1
 801869a:	d0e3      	beq.n	8018664 <uxr_next_input_reliable_buffer_available+0x48>
 801869c:	2000      	movs	r0, #0
 801869e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80186a2:	464a      	mov	r2, r9
 80186a4:	4631      	mov	r1, r6
 80186a6:	4638      	mov	r0, r7
 80186a8:	f7f7 ff3a 	bl	8010520 <ucdr_init_buffer>
 80186ac:	8921      	ldrh	r1, [r4, #8]
 80186ae:	fbb5 f2f1 	udiv	r2, r5, r1
 80186b2:	fb01 5212 	mls	r2, r1, r2, r5
 80186b6:	b292      	uxth	r2, r2
 80186b8:	6863      	ldr	r3, [r4, #4]
 80186ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80186be:	fb02 f303 	mul.w	r3, r2, r3
 80186c2:	6822      	ldr	r2, [r4, #0]
 80186c4:	f842 a003 	str.w	sl, [r2, r3]
 80186c8:	2001      	movs	r0, #1
 80186ca:	81a5      	strh	r5, [r4, #12]
 80186cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80186d0:	8920      	ldrh	r0, [r4, #8]
 80186d2:	fbb5 f3f0 	udiv	r3, r5, r0
 80186d6:	fb00 5513 	mls	r5, r0, r3, r5
 80186da:	b2ad      	uxth	r5, r5
 80186dc:	6863      	ldr	r3, [r4, #4]
 80186de:	fbb3 f3f0 	udiv	r3, r3, r0
 80186e2:	fb03 f505 	mul.w	r5, r3, r5
 80186e6:	6823      	ldr	r3, [r4, #0]
 80186e8:	2000      	movs	r0, #0
 80186ea:	5158      	str	r0, [r3, r5]
 80186ec:	eb06 0108 	add.w	r1, r6, r8
 80186f0:	eba9 0208 	sub.w	r2, r9, r8
 80186f4:	4638      	mov	r0, r7
 80186f6:	f7f7 ff13 	bl	8010520 <ucdr_init_buffer>
 80186fa:	4638      	mov	r0, r7
 80186fc:	4903      	ldr	r1, [pc, #12]	@ (801870c <uxr_next_input_reliable_buffer_available+0xf0>)
 80186fe:	4622      	mov	r2, r4
 8018700:	f7f7 fee2 	bl	80104c8 <ucdr_set_on_full_buffer_callback>
 8018704:	f8a4 a00c 	strh.w	sl, [r4, #12]
 8018708:	2001      	movs	r0, #1
 801870a:	e7c8      	b.n	801869e <uxr_next_input_reliable_buffer_available+0x82>
 801870c:	08018411 	.word	0x08018411

08018710 <uxr_process_heartbeat>:
 8018710:	b538      	push	{r3, r4, r5, lr}
 8018712:	4611      	mov	r1, r2
 8018714:	4604      	mov	r4, r0
 8018716:	89c0      	ldrh	r0, [r0, #14]
 8018718:	4615      	mov	r5, r2
 801871a:	f000 fce3 	bl	80190e4 <uxr_seq_num_cmp>
 801871e:	2800      	cmp	r0, #0
 8018720:	bfb8      	it	lt
 8018722:	81e5      	strhlt	r5, [r4, #14]
 8018724:	bd38      	pop	{r3, r4, r5, pc}
 8018726:	bf00      	nop

08018728 <uxr_compute_acknack>:
 8018728:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801872c:	8903      	ldrh	r3, [r0, #8]
 801872e:	8985      	ldrh	r5, [r0, #12]
 8018730:	4604      	mov	r4, r0
 8018732:	460e      	mov	r6, r1
 8018734:	b1d3      	cbz	r3, 801876c <uxr_compute_acknack+0x44>
 8018736:	4628      	mov	r0, r5
 8018738:	2701      	movs	r7, #1
 801873a:	e003      	b.n	8018744 <uxr_compute_acknack+0x1c>
 801873c:	4567      	cmp	r7, ip
 801873e:	d215      	bcs.n	801876c <uxr_compute_acknack+0x44>
 8018740:	89a0      	ldrh	r0, [r4, #12]
 8018742:	3701      	adds	r7, #1
 8018744:	b2b9      	uxth	r1, r7
 8018746:	f000 fcc5 	bl	80190d4 <uxr_seq_num_add>
 801874a:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801874e:	fbb0 f3fc 	udiv	r3, r0, ip
 8018752:	fb0c 0313 	mls	r3, ip, r3, r0
 8018756:	b29a      	uxth	r2, r3
 8018758:	e9d4 1300 	ldrd	r1, r3, [r4]
 801875c:	fbb3 f3fc 	udiv	r3, r3, ip
 8018760:	fb02 f303 	mul.w	r3, r2, r3
 8018764:	58cb      	ldr	r3, [r1, r3]
 8018766:	2b00      	cmp	r3, #0
 8018768:	d1e8      	bne.n	801873c <uxr_compute_acknack+0x14>
 801876a:	4605      	mov	r5, r0
 801876c:	8035      	strh	r5, [r6, #0]
 801876e:	2101      	movs	r1, #1
 8018770:	4628      	mov	r0, r5
 8018772:	89e7      	ldrh	r7, [r4, #14]
 8018774:	f000 fcb2 	bl	80190dc <uxr_seq_num_sub>
 8018778:	4601      	mov	r1, r0
 801877a:	4638      	mov	r0, r7
 801877c:	f000 fcae 	bl	80190dc <uxr_seq_num_sub>
 8018780:	4605      	mov	r5, r0
 8018782:	b318      	cbz	r0, 80187cc <uxr_compute_acknack+0xa4>
 8018784:	f04f 0900 	mov.w	r9, #0
 8018788:	464f      	mov	r7, r9
 801878a:	f04f 0801 	mov.w	r8, #1
 801878e:	fa1f f189 	uxth.w	r1, r9
 8018792:	8830      	ldrh	r0, [r6, #0]
 8018794:	f000 fc9e 	bl	80190d4 <uxr_seq_num_add>
 8018798:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801879c:	fbb0 f3fc 	udiv	r3, r0, ip
 80187a0:	e9d4 1200 	ldrd	r1, r2, [r4]
 80187a4:	fb03 001c 	mls	r0, r3, ip, r0
 80187a8:	b283      	uxth	r3, r0
 80187aa:	fbb2 f2fc 	udiv	r2, r2, ip
 80187ae:	fb02 f303 	mul.w	r3, r2, r3
 80187b2:	fa08 f209 	lsl.w	r2, r8, r9
 80187b6:	58cb      	ldr	r3, [r1, r3]
 80187b8:	f109 0901 	add.w	r9, r9, #1
 80187bc:	b90b      	cbnz	r3, 80187c2 <uxr_compute_acknack+0x9a>
 80187be:	4317      	orrs	r7, r2
 80187c0:	b2bf      	uxth	r7, r7
 80187c2:	454d      	cmp	r5, r9
 80187c4:	d1e3      	bne.n	801878e <uxr_compute_acknack+0x66>
 80187c6:	4638      	mov	r0, r7
 80187c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80187cc:	4607      	mov	r7, r0
 80187ce:	4638      	mov	r0, r7
 80187d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080187d4 <uxr_init_output_best_effort_stream>:
 80187d4:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 80187d8:	e9c0 3201 	strd	r3, r2, [r0, #4]
 80187dc:	6001      	str	r1, [r0, #0]
 80187de:	7303      	strb	r3, [r0, #12]
 80187e0:	f8a0 c00e 	strh.w	ip, [r0, #14]
 80187e4:	4770      	bx	lr
 80187e6:	bf00      	nop

080187e8 <uxr_reset_output_best_effort_stream>:
 80187e8:	7b02      	ldrb	r2, [r0, #12]
 80187ea:	6042      	str	r2, [r0, #4]
 80187ec:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80187f0:	81c3      	strh	r3, [r0, #14]
 80187f2:	4770      	bx	lr

080187f4 <uxr_prepare_best_effort_buffer_to_write>:
 80187f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80187f6:	4604      	mov	r4, r0
 80187f8:	b083      	sub	sp, #12
 80187fa:	6840      	ldr	r0, [r0, #4]
 80187fc:	460d      	mov	r5, r1
 80187fe:	4616      	mov	r6, r2
 8018800:	f7f9 fbce 	bl	8011fa0 <uxr_submessage_padding>
 8018804:	6863      	ldr	r3, [r4, #4]
 8018806:	4418      	add	r0, r3
 8018808:	68a3      	ldr	r3, [r4, #8]
 801880a:	1942      	adds	r2, r0, r5
 801880c:	4293      	cmp	r3, r2
 801880e:	bf2c      	ite	cs
 8018810:	2701      	movcs	r7, #1
 8018812:	2700      	movcc	r7, #0
 8018814:	d202      	bcs.n	801881c <uxr_prepare_best_effort_buffer_to_write+0x28>
 8018816:	4638      	mov	r0, r7
 8018818:	b003      	add	sp, #12
 801881a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801881c:	9000      	str	r0, [sp, #0]
 801881e:	6821      	ldr	r1, [r4, #0]
 8018820:	4630      	mov	r0, r6
 8018822:	2300      	movs	r3, #0
 8018824:	f7f7 fe6a 	bl	80104fc <ucdr_init_buffer_origin_offset>
 8018828:	6861      	ldr	r1, [r4, #4]
 801882a:	4638      	mov	r0, r7
 801882c:	4429      	add	r1, r5
 801882e:	6061      	str	r1, [r4, #4]
 8018830:	b003      	add	sp, #12
 8018832:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018834 <uxr_prepare_best_effort_buffer_to_send>:
 8018834:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018838:	4604      	mov	r4, r0
 801883a:	461d      	mov	r5, r3
 801883c:	6840      	ldr	r0, [r0, #4]
 801883e:	7b23      	ldrb	r3, [r4, #12]
 8018840:	4298      	cmp	r0, r3
 8018842:	bf8c      	ite	hi
 8018844:	2601      	movhi	r6, #1
 8018846:	2600      	movls	r6, #0
 8018848:	d802      	bhi.n	8018850 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 801884a:	4630      	mov	r0, r6
 801884c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018850:	4688      	mov	r8, r1
 8018852:	89e0      	ldrh	r0, [r4, #14]
 8018854:	2101      	movs	r1, #1
 8018856:	4617      	mov	r7, r2
 8018858:	f000 fc3c 	bl	80190d4 <uxr_seq_num_add>
 801885c:	6823      	ldr	r3, [r4, #0]
 801885e:	81e0      	strh	r0, [r4, #14]
 8018860:	8028      	strh	r0, [r5, #0]
 8018862:	f8c8 3000 	str.w	r3, [r8]
 8018866:	6863      	ldr	r3, [r4, #4]
 8018868:	603b      	str	r3, [r7, #0]
 801886a:	7b23      	ldrb	r3, [r4, #12]
 801886c:	6063      	str	r3, [r4, #4]
 801886e:	4630      	mov	r0, r6
 8018870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018874 <on_full_output_buffer>:
 8018874:	b538      	push	{r3, r4, r5, lr}
 8018876:	6802      	ldr	r2, [r0, #0]
 8018878:	460c      	mov	r4, r1
 801887a:	6809      	ldr	r1, [r1, #0]
 801887c:	8923      	ldrh	r3, [r4, #8]
 801887e:	eba2 0c01 	sub.w	ip, r2, r1
 8018882:	6862      	ldr	r2, [r4, #4]
 8018884:	fbb2 f2f3 	udiv	r2, r2, r3
 8018888:	fbbc fcf2 	udiv	ip, ip, r2
 801888c:	f10c 0c01 	add.w	ip, ip, #1
 8018890:	fa1f fc8c 	uxth.w	ip, ip
 8018894:	fbbc fef3 	udiv	lr, ip, r3
 8018898:	fb03 c31e 	mls	r3, r3, lr, ip
 801889c:	b29b      	uxth	r3, r3
 801889e:	fb02 f303 	mul.w	r3, r2, r3
 80188a2:	f894 c00c 	ldrb.w	ip, [r4, #12]
 80188a6:	58ca      	ldr	r2, [r1, r3]
 80188a8:	4463      	add	r3, ip
 80188aa:	eba2 020c 	sub.w	r2, r2, ip
 80188ae:	3308      	adds	r3, #8
 80188b0:	4605      	mov	r5, r0
 80188b2:	4419      	add	r1, r3
 80188b4:	3a04      	subs	r2, #4
 80188b6:	6903      	ldr	r3, [r0, #16]
 80188b8:	f7f7 fe2a 	bl	8010510 <ucdr_init_buffer_origin>
 80188bc:	4628      	mov	r0, r5
 80188be:	4903      	ldr	r1, [pc, #12]	@ (80188cc <on_full_output_buffer+0x58>)
 80188c0:	4622      	mov	r2, r4
 80188c2:	f7f7 fe01 	bl	80104c8 <ucdr_set_on_full_buffer_callback>
 80188c6:	2000      	movs	r0, #0
 80188c8:	bd38      	pop	{r3, r4, r5, pc}
 80188ca:	bf00      	nop
 80188cc:	08018875 	.word	0x08018875

080188d0 <uxr_init_output_reliable_stream>:
 80188d0:	b410      	push	{r4}
 80188d2:	f89d c004 	ldrb.w	ip, [sp, #4]
 80188d6:	8103      	strh	r3, [r0, #8]
 80188d8:	e9c0 1200 	strd	r1, r2, [r0]
 80188dc:	f880 c00c 	strb.w	ip, [r0, #12]
 80188e0:	b1d3      	cbz	r3, 8018918 <uxr_init_output_reliable_stream+0x48>
 80188e2:	f8c1 c000 	str.w	ip, [r1]
 80188e6:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80188ea:	f1bc 0f01 	cmp.w	ip, #1
 80188ee:	d913      	bls.n	8018918 <uxr_init_output_reliable_stream+0x48>
 80188f0:	2301      	movs	r3, #1
 80188f2:	fbb3 f1fc 	udiv	r1, r3, ip
 80188f6:	fb0c 3111 	mls	r1, ip, r1, r3
 80188fa:	b289      	uxth	r1, r1
 80188fc:	6842      	ldr	r2, [r0, #4]
 80188fe:	6804      	ldr	r4, [r0, #0]
 8018900:	fbb2 f2fc 	udiv	r2, r2, ip
 8018904:	fb01 f202 	mul.w	r2, r1, r2
 8018908:	7b01      	ldrb	r1, [r0, #12]
 801890a:	50a1      	str	r1, [r4, r2]
 801890c:	3301      	adds	r3, #1
 801890e:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8018912:	b29b      	uxth	r3, r3
 8018914:	459c      	cmp	ip, r3
 8018916:	d8ec      	bhi.n	80188f2 <uxr_init_output_reliable_stream+0x22>
 8018918:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801891c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8018920:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8018924:	4905      	ldr	r1, [pc, #20]	@ (801893c <uxr_init_output_reliable_stream+0x6c>)
 8018926:	f85d 4b04 	ldr.w	r4, [sp], #4
 801892a:	f8c0 100e 	str.w	r1, [r0, #14]
 801892e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8018932:	2300      	movs	r3, #0
 8018934:	8242      	strh	r2, [r0, #18]
 8018936:	8403      	strh	r3, [r0, #32]
 8018938:	4770      	bx	lr
 801893a:	bf00      	nop
 801893c:	ffff0000 	.word	0xffff0000

08018940 <uxr_reset_output_reliable_stream>:
 8018940:	8901      	ldrh	r1, [r0, #8]
 8018942:	b1b1      	cbz	r1, 8018972 <uxr_reset_output_reliable_stream+0x32>
 8018944:	f04f 0c00 	mov.w	ip, #0
 8018948:	4663      	mov	r3, ip
 801894a:	fbb3 f2f1 	udiv	r2, r3, r1
 801894e:	fb01 3312 	mls	r3, r1, r2, r3
 8018952:	b29b      	uxth	r3, r3
 8018954:	6842      	ldr	r2, [r0, #4]
 8018956:	fbb2 f2f1 	udiv	r2, r2, r1
 801895a:	6801      	ldr	r1, [r0, #0]
 801895c:	fb02 f303 	mul.w	r3, r2, r3
 8018960:	7b02      	ldrb	r2, [r0, #12]
 8018962:	50ca      	str	r2, [r1, r3]
 8018964:	f10c 0c01 	add.w	ip, ip, #1
 8018968:	8901      	ldrh	r1, [r0, #8]
 801896a:	fa1f f38c 	uxth.w	r3, ip
 801896e:	4299      	cmp	r1, r3
 8018970:	d8eb      	bhi.n	801894a <uxr_reset_output_reliable_stream+0xa>
 8018972:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8018976:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801897a:	e9c0 2306 	strd	r2, r3, [r0, #24]
 801897e:	4904      	ldr	r1, [pc, #16]	@ (8018990 <uxr_reset_output_reliable_stream+0x50>)
 8018980:	f8c0 100e 	str.w	r1, [r0, #14]
 8018984:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8018988:	2300      	movs	r3, #0
 801898a:	8242      	strh	r2, [r0, #18]
 801898c:	8403      	strh	r3, [r0, #32]
 801898e:	4770      	bx	lr
 8018990:	ffff0000 	.word	0xffff0000

08018994 <uxr_prepare_reliable_buffer_to_write>:
 8018994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018998:	4604      	mov	r4, r0
 801899a:	b091      	sub	sp, #68	@ 0x44
 801899c:	8900      	ldrh	r0, [r0, #8]
 801899e:	89e6      	ldrh	r6, [r4, #14]
 80189a0:	6823      	ldr	r3, [r4, #0]
 80189a2:	9204      	str	r2, [sp, #16]
 80189a4:	fbb6 f2f0 	udiv	r2, r6, r0
 80189a8:	fb00 6212 	mls	r2, r0, r2, r6
 80189ac:	b292      	uxth	r2, r2
 80189ae:	6865      	ldr	r5, [r4, #4]
 80189b0:	fbb5 f5f0 	udiv	r5, r5, r0
 80189b4:	fb05 3202 	mla	r2, r5, r2, r3
 80189b8:	3204      	adds	r2, #4
 80189ba:	f852 8c04 	ldr.w	r8, [r2, #-4]
 80189be:	f894 900c 	ldrb.w	r9, [r4, #12]
 80189c2:	9203      	str	r2, [sp, #12]
 80189c4:	468b      	mov	fp, r1
 80189c6:	1f2f      	subs	r7, r5, #4
 80189c8:	2800      	cmp	r0, #0
 80189ca:	f000 814c 	beq.w	8018c66 <uxr_prepare_reliable_buffer_to_write+0x2d2>
 80189ce:	f04f 0c00 	mov.w	ip, #0
 80189d2:	46e2      	mov	sl, ip
 80189d4:	4661      	mov	r1, ip
 80189d6:	fbb1 f2f0 	udiv	r2, r1, r0
 80189da:	fb00 1212 	mls	r2, r0, r2, r1
 80189de:	b292      	uxth	r2, r2
 80189e0:	fb05 f202 	mul.w	r2, r5, r2
 80189e4:	f10c 0c01 	add.w	ip, ip, #1
 80189e8:	589a      	ldr	r2, [r3, r2]
 80189ea:	454a      	cmp	r2, r9
 80189ec:	bf08      	it	eq
 80189ee:	f10a 0a01 	addeq.w	sl, sl, #1
 80189f2:	fa1f f18c 	uxth.w	r1, ip
 80189f6:	bf08      	it	eq
 80189f8:	fa1f fa8a 	uxtheq.w	sl, sl
 80189fc:	4281      	cmp	r1, r0
 80189fe:	d3ea      	bcc.n	80189d6 <uxr_prepare_reliable_buffer_to_write+0x42>
 8018a00:	4640      	mov	r0, r8
 8018a02:	2104      	movs	r1, #4
 8018a04:	f8cd a014 	str.w	sl, [sp, #20]
 8018a08:	f7f7 fd8e 	bl	8010528 <ucdr_alignment>
 8018a0c:	4480      	add	r8, r0
 8018a0e:	eb08 020b 	add.w	r2, r8, fp
 8018a12:	42ba      	cmp	r2, r7
 8018a14:	f240 80cd 	bls.w	8018bb2 <uxr_prepare_reliable_buffer_to_write+0x21e>
 8018a18:	7b22      	ldrb	r2, [r4, #12]
 8018a1a:	445a      	add	r2, fp
 8018a1c:	42ba      	cmp	r2, r7
 8018a1e:	f240 80b5 	bls.w	8018b8c <uxr_prepare_reliable_buffer_to_write+0x1f8>
 8018a22:	f5c9 437f 	rsb	r3, r9, #65280	@ 0xff00
 8018a26:	33fc      	adds	r3, #252	@ 0xfc
 8018a28:	b2ba      	uxth	r2, r7
 8018a2a:	4413      	add	r3, r2
 8018a2c:	b29b      	uxth	r3, r3
 8018a2e:	fb0a f903 	mul.w	r9, sl, r3
 8018a32:	45d9      	cmp	r9, fp
 8018a34:	9305      	str	r3, [sp, #20]
 8018a36:	9306      	str	r3, [sp, #24]
 8018a38:	f0c0 80b7 	bcc.w	8018baa <uxr_prepare_reliable_buffer_to_write+0x216>
 8018a3c:	f108 0304 	add.w	r3, r8, #4
 8018a40:	42bb      	cmp	r3, r7
 8018a42:	f080 80db 	bcs.w	8018bfc <uxr_prepare_reliable_buffer_to_write+0x268>
 8018a46:	f1a2 0904 	sub.w	r9, r2, #4
 8018a4a:	eba9 0908 	sub.w	r9, r9, r8
 8018a4e:	9b05      	ldr	r3, [sp, #20]
 8018a50:	fa1f f989 	uxth.w	r9, r9
 8018a54:	ebab 0b09 	sub.w	fp, fp, r9
 8018a58:	fbbb f2f3 	udiv	r2, fp, r3
 8018a5c:	fb03 b312 	mls	r3, r3, r2, fp
 8018a60:	2b00      	cmp	r3, #0
 8018a62:	f000 80c8 	beq.w	8018bf6 <uxr_prepare_reliable_buffer_to_write+0x262>
 8018a66:	3201      	adds	r2, #1
 8018a68:	b292      	uxth	r2, r2
 8018a6a:	9306      	str	r3, [sp, #24]
 8018a6c:	4552      	cmp	r2, sl
 8018a6e:	f200 809c 	bhi.w	8018baa <uxr_prepare_reliable_buffer_to_write+0x216>
 8018a72:	f10d 0b20 	add.w	fp, sp, #32
 8018a76:	2a00      	cmp	r2, #0
 8018a78:	d042      	beq.n	8018b00 <uxr_prepare_reliable_buffer_to_write+0x16c>
 8018a7a:	f8cd 801c 	str.w	r8, [sp, #28]
 8018a7e:	f04f 0a00 	mov.w	sl, #0
 8018a82:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8018a86:	9505      	str	r5, [sp, #20]
 8018a88:	f10d 0b20 	add.w	fp, sp, #32
 8018a8c:	4615      	mov	r5, r2
 8018a8e:	e000      	b.n	8018a92 <uxr_prepare_reliable_buffer_to_write+0xfe>
 8018a90:	46c1      	mov	r9, r8
 8018a92:	8920      	ldrh	r0, [r4, #8]
 8018a94:	fbb6 f2f0 	udiv	r2, r6, r0
 8018a98:	fb00 6112 	mls	r1, r0, r2, r6
 8018a9c:	b28a      	uxth	r2, r1
 8018a9e:	6863      	ldr	r3, [r4, #4]
 8018aa0:	fbb3 f1f0 	udiv	r1, r3, r0
 8018aa4:	6823      	ldr	r3, [r4, #0]
 8018aa6:	fb02 f101 	mul.w	r1, r2, r1
 8018aaa:	3104      	adds	r1, #4
 8018aac:	4419      	add	r1, r3
 8018aae:	4658      	mov	r0, fp
 8018ab0:	f851 2c04 	ldr.w	r2, [r1, #-4]
 8018ab4:	9200      	str	r2, [sp, #0]
 8018ab6:	2300      	movs	r3, #0
 8018ab8:	463a      	mov	r2, r7
 8018aba:	f7f7 fd1f 	bl	80104fc <ucdr_init_buffer_origin_offset>
 8018abe:	464a      	mov	r2, r9
 8018ac0:	2300      	movs	r3, #0
 8018ac2:	210d      	movs	r1, #13
 8018ac4:	4658      	mov	r0, fp
 8018ac6:	f7f9 fa2b 	bl	8011f20 <uxr_buffer_submessage_header>
 8018aca:	8921      	ldrh	r1, [r4, #8]
 8018acc:	fbb6 f2f1 	udiv	r2, r6, r1
 8018ad0:	fb01 6212 	mls	r2, r1, r2, r6
 8018ad4:	b292      	uxth	r2, r2
 8018ad6:	6863      	ldr	r3, [r4, #4]
 8018ad8:	fbb3 f3f1 	udiv	r3, r3, r1
 8018adc:	fb02 f303 	mul.w	r3, r2, r3
 8018ae0:	6822      	ldr	r2, [r4, #0]
 8018ae2:	4630      	mov	r0, r6
 8018ae4:	50d7      	str	r7, [r2, r3]
 8018ae6:	2101      	movs	r1, #1
 8018ae8:	f000 faf4 	bl	80190d4 <uxr_seq_num_add>
 8018aec:	f10a 0a01 	add.w	sl, sl, #1
 8018af0:	fa1f f38a 	uxth.w	r3, sl
 8018af4:	429d      	cmp	r5, r3
 8018af6:	4606      	mov	r6, r0
 8018af8:	d8ca      	bhi.n	8018a90 <uxr_prepare_reliable_buffer_to_write+0xfc>
 8018afa:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8018afe:	9d05      	ldr	r5, [sp, #20]
 8018b00:	8920      	ldrh	r0, [r4, #8]
 8018b02:	fbb6 f3f0 	udiv	r3, r6, r0
 8018b06:	fb00 6313 	mls	r3, r0, r3, r6
 8018b0a:	b299      	uxth	r1, r3
 8018b0c:	6863      	ldr	r3, [r4, #4]
 8018b0e:	fbb3 f3f0 	udiv	r3, r3, r0
 8018b12:	fb01 f303 	mul.w	r3, r1, r3
 8018b16:	6821      	ldr	r1, [r4, #0]
 8018b18:	3304      	adds	r3, #4
 8018b1a:	4419      	add	r1, r3
 8018b1c:	463a      	mov	r2, r7
 8018b1e:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8018b22:	9000      	str	r0, [sp, #0]
 8018b24:	2300      	movs	r3, #0
 8018b26:	4658      	mov	r0, fp
 8018b28:	f7f7 fce8 	bl	80104fc <ucdr_init_buffer_origin_offset>
 8018b2c:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8018b30:	4658      	mov	r0, fp
 8018b32:	fa1f f289 	uxth.w	r2, r9
 8018b36:	2302      	movs	r3, #2
 8018b38:	210d      	movs	r1, #13
 8018b3a:	f7f9 f9f1 	bl	8011f20 <uxr_buffer_submessage_header>
 8018b3e:	9b03      	ldr	r3, [sp, #12]
 8018b40:	8927      	ldrh	r7, [r4, #8]
 8018b42:	7b20      	ldrb	r0, [r4, #12]
 8018b44:	f108 0104 	add.w	r1, r8, #4
 8018b48:	440b      	add	r3, r1
 8018b4a:	4619      	mov	r1, r3
 8018b4c:	fbb6 f3f7 	udiv	r3, r6, r7
 8018b50:	fb07 6313 	mls	r3, r7, r3, r6
 8018b54:	f1a5 0208 	sub.w	r2, r5, #8
 8018b58:	b29d      	uxth	r5, r3
 8018b5a:	3004      	adds	r0, #4
 8018b5c:	6863      	ldr	r3, [r4, #4]
 8018b5e:	fbb3 f3f7 	udiv	r3, r3, r7
 8018b62:	fb05 f303 	mul.w	r3, r5, r3
 8018b66:	6825      	ldr	r5, [r4, #0]
 8018b68:	4448      	add	r0, r9
 8018b6a:	50e8      	str	r0, [r5, r3]
 8018b6c:	9d04      	ldr	r5, [sp, #16]
 8018b6e:	eba2 0208 	sub.w	r2, r2, r8
 8018b72:	4628      	mov	r0, r5
 8018b74:	f7f7 fcd4 	bl	8010520 <ucdr_init_buffer>
 8018b78:	4628      	mov	r0, r5
 8018b7a:	493c      	ldr	r1, [pc, #240]	@ (8018c6c <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 8018b7c:	4622      	mov	r2, r4
 8018b7e:	f7f7 fca3 	bl	80104c8 <ucdr_set_on_full_buffer_callback>
 8018b82:	2001      	movs	r0, #1
 8018b84:	81e6      	strh	r6, [r4, #14]
 8018b86:	b011      	add	sp, #68	@ 0x44
 8018b88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018b8c:	2101      	movs	r1, #1
 8018b8e:	89e0      	ldrh	r0, [r4, #14]
 8018b90:	f000 faa0 	bl	80190d4 <uxr_seq_num_add>
 8018b94:	8921      	ldrh	r1, [r4, #8]
 8018b96:	4605      	mov	r5, r0
 8018b98:	8a60      	ldrh	r0, [r4, #18]
 8018b9a:	f000 fa9b 	bl	80190d4 <uxr_seq_num_add>
 8018b9e:	4601      	mov	r1, r0
 8018ba0:	4628      	mov	r0, r5
 8018ba2:	f000 fa9f 	bl	80190e4 <uxr_seq_num_cmp>
 8018ba6:	2800      	cmp	r0, #0
 8018ba8:	dd42      	ble.n	8018c30 <uxr_prepare_reliable_buffer_to_write+0x29c>
 8018baa:	2000      	movs	r0, #0
 8018bac:	b011      	add	sp, #68	@ 0x44
 8018bae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018bb2:	8921      	ldrh	r1, [r4, #8]
 8018bb4:	8a60      	ldrh	r0, [r4, #18]
 8018bb6:	9205      	str	r2, [sp, #20]
 8018bb8:	f000 fa8c 	bl	80190d4 <uxr_seq_num_add>
 8018bbc:	4601      	mov	r1, r0
 8018bbe:	4630      	mov	r0, r6
 8018bc0:	f000 fa90 	bl	80190e4 <uxr_seq_num_cmp>
 8018bc4:	2800      	cmp	r0, #0
 8018bc6:	9a05      	ldr	r2, [sp, #20]
 8018bc8:	dcef      	bgt.n	8018baa <uxr_prepare_reliable_buffer_to_write+0x216>
 8018bca:	8927      	ldrh	r7, [r4, #8]
 8018bcc:	fbb6 f3f7 	udiv	r3, r6, r7
 8018bd0:	fb07 6313 	mls	r3, r7, r3, r6
 8018bd4:	b29d      	uxth	r5, r3
 8018bd6:	6863      	ldr	r3, [r4, #4]
 8018bd8:	6824      	ldr	r4, [r4, #0]
 8018bda:	fbb3 f3f7 	udiv	r3, r3, r7
 8018bde:	fb05 f303 	mul.w	r3, r5, r3
 8018be2:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 8018be6:	50e2      	str	r2, [r4, r3]
 8018be8:	2300      	movs	r3, #0
 8018bea:	f8cd 8000 	str.w	r8, [sp]
 8018bee:	f7f7 fc85 	bl	80104fc <ucdr_init_buffer_origin_offset>
 8018bf2:	2001      	movs	r0, #1
 8018bf4:	e7da      	b.n	8018bac <uxr_prepare_reliable_buffer_to_write+0x218>
 8018bf6:	b293      	uxth	r3, r2
 8018bf8:	461a      	mov	r2, r3
 8018bfa:	e737      	b.n	8018a6c <uxr_prepare_reliable_buffer_to_write+0xd8>
 8018bfc:	4630      	mov	r0, r6
 8018bfe:	2101      	movs	r1, #1
 8018c00:	9207      	str	r2, [sp, #28]
 8018c02:	f000 fa67 	bl	80190d4 <uxr_seq_num_add>
 8018c06:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8018c0a:	fbb0 f1fc 	udiv	r1, r0, ip
 8018c0e:	fb0c 0111 	mls	r1, ip, r1, r0
 8018c12:	4606      	mov	r6, r0
 8018c14:	b288      	uxth	r0, r1
 8018c16:	6863      	ldr	r3, [r4, #4]
 8018c18:	fbb3 f1fc 	udiv	r1, r3, ip
 8018c1c:	6823      	ldr	r3, [r4, #0]
 8018c1e:	9a07      	ldr	r2, [sp, #28]
 8018c20:	fb00 f101 	mul.w	r1, r0, r1
 8018c24:	3104      	adds	r1, #4
 8018c26:	440b      	add	r3, r1
 8018c28:	9303      	str	r3, [sp, #12]
 8018c2a:	f853 8c04 	ldr.w	r8, [r3, #-4]
 8018c2e:	e70a      	b.n	8018a46 <uxr_prepare_reliable_buffer_to_write+0xb2>
 8018c30:	8921      	ldrh	r1, [r4, #8]
 8018c32:	fbb5 f3f1 	udiv	r3, r5, r1
 8018c36:	fb01 5313 	mls	r3, r1, r3, r5
 8018c3a:	b29a      	uxth	r2, r3
 8018c3c:	6863      	ldr	r3, [r4, #4]
 8018c3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8018c42:	6821      	ldr	r1, [r4, #0]
 8018c44:	9804      	ldr	r0, [sp, #16]
 8018c46:	fb02 f303 	mul.w	r3, r2, r3
 8018c4a:	3304      	adds	r3, #4
 8018c4c:	7b22      	ldrb	r2, [r4, #12]
 8018c4e:	4419      	add	r1, r3
 8018c50:	445a      	add	r2, fp
 8018c52:	f841 2c04 	str.w	r2, [r1, #-4]
 8018c56:	7b23      	ldrb	r3, [r4, #12]
 8018c58:	9300      	str	r3, [sp, #0]
 8018c5a:	2300      	movs	r3, #0
 8018c5c:	f7f7 fc4e 	bl	80104fc <ucdr_init_buffer_origin_offset>
 8018c60:	81e5      	strh	r5, [r4, #14]
 8018c62:	2001      	movs	r0, #1
 8018c64:	e7a2      	b.n	8018bac <uxr_prepare_reliable_buffer_to_write+0x218>
 8018c66:	4682      	mov	sl, r0
 8018c68:	e6ca      	b.n	8018a00 <uxr_prepare_reliable_buffer_to_write+0x6c>
 8018c6a:	bf00      	nop
 8018c6c:	08018875 	.word	0x08018875

08018c70 <uxr_prepare_next_reliable_buffer_to_send>:
 8018c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018c72:	4604      	mov	r4, r0
 8018c74:	460f      	mov	r7, r1
 8018c76:	8a00      	ldrh	r0, [r0, #16]
 8018c78:	2101      	movs	r1, #1
 8018c7a:	4616      	mov	r6, r2
 8018c7c:	461d      	mov	r5, r3
 8018c7e:	f000 fa29 	bl	80190d4 <uxr_seq_num_add>
 8018c82:	8028      	strh	r0, [r5, #0]
 8018c84:	8922      	ldrh	r2, [r4, #8]
 8018c86:	fbb0 f3f2 	udiv	r3, r0, r2
 8018c8a:	fb02 0c13 	mls	ip, r2, r3, r0
 8018c8e:	fa1f fc8c 	uxth.w	ip, ip
 8018c92:	6863      	ldr	r3, [r4, #4]
 8018c94:	fbb3 f3f2 	udiv	r3, r3, r2
 8018c98:	fb0c fc03 	mul.w	ip, ip, r3
 8018c9c:	6823      	ldr	r3, [r4, #0]
 8018c9e:	89e1      	ldrh	r1, [r4, #14]
 8018ca0:	f10c 0c04 	add.w	ip, ip, #4
 8018ca4:	4463      	add	r3, ip
 8018ca6:	603b      	str	r3, [r7, #0]
 8018ca8:	6823      	ldr	r3, [r4, #0]
 8018caa:	449c      	add	ip, r3
 8018cac:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 8018cb0:	6033      	str	r3, [r6, #0]
 8018cb2:	f000 fa17 	bl	80190e4 <uxr_seq_num_cmp>
 8018cb6:	2800      	cmp	r0, #0
 8018cb8:	dd01      	ble.n	8018cbe <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 8018cba:	2000      	movs	r0, #0
 8018cbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018cbe:	7b23      	ldrb	r3, [r4, #12]
 8018cc0:	6832      	ldr	r2, [r6, #0]
 8018cc2:	429a      	cmp	r2, r3
 8018cc4:	d9f9      	bls.n	8018cba <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8018cc6:	8a61      	ldrh	r1, [r4, #18]
 8018cc8:	8a20      	ldrh	r0, [r4, #16]
 8018cca:	f000 fa07 	bl	80190dc <uxr_seq_num_sub>
 8018cce:	8923      	ldrh	r3, [r4, #8]
 8018cd0:	4283      	cmp	r3, r0
 8018cd2:	d0f2      	beq.n	8018cba <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8018cd4:	8828      	ldrh	r0, [r5, #0]
 8018cd6:	89e3      	ldrh	r3, [r4, #14]
 8018cd8:	8220      	strh	r0, [r4, #16]
 8018cda:	4298      	cmp	r0, r3
 8018cdc:	d001      	beq.n	8018ce2 <uxr_prepare_next_reliable_buffer_to_send+0x72>
 8018cde:	2001      	movs	r0, #1
 8018ce0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018ce2:	2101      	movs	r1, #1
 8018ce4:	f000 f9f6 	bl	80190d4 <uxr_seq_num_add>
 8018ce8:	81e0      	strh	r0, [r4, #14]
 8018cea:	2001      	movs	r0, #1
 8018cec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018cee:	bf00      	nop

08018cf0 <uxr_update_output_stream_heartbeat_timestamp>:
 8018cf0:	b570      	push	{r4, r5, r6, lr}
 8018cf2:	8a01      	ldrh	r1, [r0, #16]
 8018cf4:	4604      	mov	r4, r0
 8018cf6:	8a40      	ldrh	r0, [r0, #18]
 8018cf8:	4615      	mov	r5, r2
 8018cfa:	461e      	mov	r6, r3
 8018cfc:	f000 f9f2 	bl	80190e4 <uxr_seq_num_cmp>
 8018d00:	2800      	cmp	r0, #0
 8018d02:	db07      	blt.n	8018d14 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 8018d04:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8018d08:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8018d0c:	e9c4 2306 	strd	r2, r3, [r4, #24]
 8018d10:	2000      	movs	r0, #0
 8018d12:	bd70      	pop	{r4, r5, r6, pc}
 8018d14:	f894 0020 	ldrb.w	r0, [r4, #32]
 8018d18:	b940      	cbnz	r0, 8018d2c <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 8018d1a:	2301      	movs	r3, #1
 8018d1c:	f884 3020 	strb.w	r3, [r4, #32]
 8018d20:	3564      	adds	r5, #100	@ 0x64
 8018d22:	f146 0600 	adc.w	r6, r6, #0
 8018d26:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8018d2a:	bd70      	pop	{r4, r5, r6, pc}
 8018d2c:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8018d30:	4295      	cmp	r5, r2
 8018d32:	eb76 0303 	sbcs.w	r3, r6, r3
 8018d36:	bfa5      	ittet	ge
 8018d38:	3001      	addge	r0, #1
 8018d3a:	f884 0020 	strbge.w	r0, [r4, #32]
 8018d3e:	2000      	movlt	r0, #0
 8018d40:	2001      	movge	r0, #1
 8018d42:	e7ed      	b.n	8018d20 <uxr_update_output_stream_heartbeat_timestamp+0x30>

08018d44 <uxr_begin_output_nack_buffer_it>:
 8018d44:	8a40      	ldrh	r0, [r0, #18]
 8018d46:	4770      	bx	lr

08018d48 <uxr_next_reliable_nack_buffer_to_send>:
 8018d48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018d4c:	f890 8021 	ldrb.w	r8, [r0, #33]	@ 0x21
 8018d50:	b082      	sub	sp, #8
 8018d52:	f1b8 0f00 	cmp.w	r8, #0
 8018d56:	d011      	beq.n	8018d7c <uxr_next_reliable_nack_buffer_to_send+0x34>
 8018d58:	4604      	mov	r4, r0
 8018d5a:	8818      	ldrh	r0, [r3, #0]
 8018d5c:	460e      	mov	r6, r1
 8018d5e:	4617      	mov	r7, r2
 8018d60:	461d      	mov	r5, r3
 8018d62:	2101      	movs	r1, #1
 8018d64:	f000 f9b6 	bl	80190d4 <uxr_seq_num_add>
 8018d68:	8028      	strh	r0, [r5, #0]
 8018d6a:	8a21      	ldrh	r1, [r4, #16]
 8018d6c:	f000 f9ba 	bl	80190e4 <uxr_seq_num_cmp>
 8018d70:	2800      	cmp	r0, #0
 8018d72:	dd07      	ble.n	8018d84 <uxr_next_reliable_nack_buffer_to_send+0x3c>
 8018d74:	f04f 0800 	mov.w	r8, #0
 8018d78:	f884 8021 	strb.w	r8, [r4, #33]	@ 0x21
 8018d7c:	4640      	mov	r0, r8
 8018d7e:	b002      	add	sp, #8
 8018d80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018d84:	8921      	ldrh	r1, [r4, #8]
 8018d86:	8828      	ldrh	r0, [r5, #0]
 8018d88:	6823      	ldr	r3, [r4, #0]
 8018d8a:	fbb0 f2f1 	udiv	r2, r0, r1
 8018d8e:	fb01 0c12 	mls	ip, r1, r2, r0
 8018d92:	fa1f f28c 	uxth.w	r2, ip
 8018d96:	9301      	str	r3, [sp, #4]
 8018d98:	6863      	ldr	r3, [r4, #4]
 8018d9a:	fbb3 fcf1 	udiv	ip, r3, r1
 8018d9e:	9b01      	ldr	r3, [sp, #4]
 8018da0:	fb02 fc0c 	mul.w	ip, r2, ip
 8018da4:	f10c 0c04 	add.w	ip, ip, #4
 8018da8:	4463      	add	r3, ip
 8018daa:	6033      	str	r3, [r6, #0]
 8018dac:	6823      	ldr	r3, [r4, #0]
 8018dae:	4463      	add	r3, ip
 8018db0:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8018db4:	603b      	str	r3, [r7, #0]
 8018db6:	7b22      	ldrb	r2, [r4, #12]
 8018db8:	429a      	cmp	r2, r3
 8018dba:	d0d2      	beq.n	8018d62 <uxr_next_reliable_nack_buffer_to_send+0x1a>
 8018dbc:	4640      	mov	r0, r8
 8018dbe:	b002      	add	sp, #8
 8018dc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018dc4 <uxr_process_acknack>:
 8018dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018dc6:	4604      	mov	r4, r0
 8018dc8:	460e      	mov	r6, r1
 8018dca:	4610      	mov	r0, r2
 8018dcc:	2101      	movs	r1, #1
 8018dce:	f000 f985 	bl	80190dc <uxr_seq_num_sub>
 8018dd2:	8a61      	ldrh	r1, [r4, #18]
 8018dd4:	f000 f982 	bl	80190dc <uxr_seq_num_sub>
 8018dd8:	b1c0      	cbz	r0, 8018e0c <uxr_process_acknack+0x48>
 8018dda:	4605      	mov	r5, r0
 8018ddc:	2700      	movs	r7, #0
 8018dde:	2101      	movs	r1, #1
 8018de0:	8a60      	ldrh	r0, [r4, #18]
 8018de2:	f000 f977 	bl	80190d4 <uxr_seq_num_add>
 8018de6:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8018dea:	fbb0 f1fc 	udiv	r1, r0, ip
 8018dee:	e9d4 2300 	ldrd	r2, r3, [r4]
 8018df2:	fb0c 0111 	mls	r1, ip, r1, r0
 8018df6:	b289      	uxth	r1, r1
 8018df8:	3701      	adds	r7, #1
 8018dfa:	fbb3 f3fc 	udiv	r3, r3, ip
 8018dfe:	fb01 f303 	mul.w	r3, r1, r3
 8018e02:	42bd      	cmp	r5, r7
 8018e04:	7b21      	ldrb	r1, [r4, #12]
 8018e06:	8260      	strh	r0, [r4, #18]
 8018e08:	50d1      	str	r1, [r2, r3]
 8018e0a:	d1e8      	bne.n	8018dde <uxr_process_acknack+0x1a>
 8018e0c:	3e00      	subs	r6, #0
 8018e0e:	f04f 0300 	mov.w	r3, #0
 8018e12:	bf18      	it	ne
 8018e14:	2601      	movne	r6, #1
 8018e16:	f884 3020 	strb.w	r3, [r4, #32]
 8018e1a:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 8018e1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08018e20 <uxr_is_output_up_to_date>:
 8018e20:	8a01      	ldrh	r1, [r0, #16]
 8018e22:	8a40      	ldrh	r0, [r0, #18]
 8018e24:	b508      	push	{r3, lr}
 8018e26:	f000 f95d 	bl	80190e4 <uxr_seq_num_cmp>
 8018e2a:	fab0 f080 	clz	r0, r0
 8018e2e:	0940      	lsrs	r0, r0, #5
 8018e30:	bd08      	pop	{r3, pc}
 8018e32:	bf00      	nop

08018e34 <get_available_free_slots>:
 8018e34:	8902      	ldrh	r2, [r0, #8]
 8018e36:	b1da      	cbz	r2, 8018e70 <get_available_free_slots+0x3c>
 8018e38:	b530      	push	{r4, r5, lr}
 8018e3a:	2100      	movs	r1, #0
 8018e3c:	6843      	ldr	r3, [r0, #4]
 8018e3e:	6805      	ldr	r5, [r0, #0]
 8018e40:	7b04      	ldrb	r4, [r0, #12]
 8018e42:	fbb3 fef2 	udiv	lr, r3, r2
 8018e46:	4608      	mov	r0, r1
 8018e48:	460b      	mov	r3, r1
 8018e4a:	fbb3 fcf2 	udiv	ip, r3, r2
 8018e4e:	fb02 331c 	mls	r3, r2, ip, r3
 8018e52:	b29b      	uxth	r3, r3
 8018e54:	fb0e f303 	mul.w	r3, lr, r3
 8018e58:	3101      	adds	r1, #1
 8018e5a:	f855 c003 	ldr.w	ip, [r5, r3]
 8018e5e:	4564      	cmp	r4, ip
 8018e60:	bf08      	it	eq
 8018e62:	3001      	addeq	r0, #1
 8018e64:	b28b      	uxth	r3, r1
 8018e66:	bf08      	it	eq
 8018e68:	b280      	uxtheq	r0, r0
 8018e6a:	4293      	cmp	r3, r2
 8018e6c:	d3ed      	bcc.n	8018e4a <get_available_free_slots+0x16>
 8018e6e:	bd30      	pop	{r4, r5, pc}
 8018e70:	4610      	mov	r0, r2
 8018e72:	4770      	bx	lr

08018e74 <uxr_buffer_request_data>:
 8018e74:	b530      	push	{r4, r5, lr}
 8018e76:	b095      	sub	sp, #84	@ 0x54
 8018e78:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8018e7c:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 8018e7e:	9303      	str	r3, [sp, #12]
 8018e80:	2200      	movs	r2, #0
 8018e82:	2d00      	cmp	r5, #0
 8018e84:	bf14      	ite	ne
 8018e86:	2101      	movne	r1, #1
 8018e88:	4611      	moveq	r1, r2
 8018e8a:	4604      	mov	r4, r0
 8018e8c:	f88d 301c 	strb.w	r3, [sp, #28]
 8018e90:	f88d 201d 	strb.w	r2, [sp, #29]
 8018e94:	f88d 201e 	strb.w	r2, [sp, #30]
 8018e98:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 8018e9c:	d021      	beq.n	8018ee2 <uxr_buffer_request_data+0x6e>
 8018e9e:	682a      	ldr	r2, [r5, #0]
 8018ea0:	686b      	ldr	r3, [r5, #4]
 8018ea2:	f8cd 2026 	str.w	r2, [sp, #38]	@ 0x26
 8018ea6:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 8018eaa:	2210      	movs	r2, #16
 8018eac:	2308      	movs	r3, #8
 8018eae:	2100      	movs	r1, #0
 8018eb0:	e9cd 3100 	strd	r3, r1, [sp]
 8018eb4:	4620      	mov	r0, r4
 8018eb6:	9905      	ldr	r1, [sp, #20]
 8018eb8:	ab0c      	add	r3, sp, #48	@ 0x30
 8018eba:	f7f8 fd93 	bl	80119e4 <uxr_prepare_stream_to_write_submessage>
 8018ebe:	b918      	cbnz	r0, 8018ec8 <uxr_buffer_request_data+0x54>
 8018ec0:	4604      	mov	r4, r0
 8018ec2:	4620      	mov	r0, r4
 8018ec4:	b015      	add	sp, #84	@ 0x54
 8018ec6:	bd30      	pop	{r4, r5, pc}
 8018ec8:	9904      	ldr	r1, [sp, #16]
 8018eca:	aa06      	add	r2, sp, #24
 8018ecc:	4620      	mov	r0, r4
 8018ece:	f7f8 febf 	bl	8011c50 <uxr_init_base_object_request>
 8018ed2:	a906      	add	r1, sp, #24
 8018ed4:	4604      	mov	r4, r0
 8018ed6:	a80c      	add	r0, sp, #48	@ 0x30
 8018ed8:	f7fa f9ee 	bl	80132b8 <uxr_serialize_READ_DATA_Payload>
 8018edc:	4620      	mov	r0, r4
 8018ede:	b015      	add	sp, #84	@ 0x54
 8018ee0:	bd30      	pop	{r4, r5, pc}
 8018ee2:	2208      	movs	r2, #8
 8018ee4:	e7e2      	b.n	8018eac <uxr_buffer_request_data+0x38>
 8018ee6:	bf00      	nop

08018ee8 <uxr_buffer_cancel_data>:
 8018ee8:	b510      	push	{r4, lr}
 8018eea:	b094      	sub	sp, #80	@ 0x50
 8018eec:	2300      	movs	r3, #0
 8018eee:	9202      	str	r2, [sp, #8]
 8018ef0:	9205      	str	r2, [sp, #20]
 8018ef2:	9301      	str	r3, [sp, #4]
 8018ef4:	2201      	movs	r2, #1
 8018ef6:	f8ad 301c 	strh.w	r3, [sp, #28]
 8018efa:	f88d 301e 	strb.w	r3, [sp, #30]
 8018efe:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 8018f02:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 8018f06:	2308      	movs	r3, #8
 8018f08:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 8018f0c:	9300      	str	r3, [sp, #0]
 8018f0e:	2210      	movs	r2, #16
 8018f10:	ab0c      	add	r3, sp, #48	@ 0x30
 8018f12:	4604      	mov	r4, r0
 8018f14:	9103      	str	r1, [sp, #12]
 8018f16:	f7f8 fd65 	bl	80119e4 <uxr_prepare_stream_to_write_submessage>
 8018f1a:	b918      	cbnz	r0, 8018f24 <uxr_buffer_cancel_data+0x3c>
 8018f1c:	4604      	mov	r4, r0
 8018f1e:	4620      	mov	r0, r4
 8018f20:	b014      	add	sp, #80	@ 0x50
 8018f22:	bd10      	pop	{r4, pc}
 8018f24:	9905      	ldr	r1, [sp, #20]
 8018f26:	aa06      	add	r2, sp, #24
 8018f28:	4620      	mov	r0, r4
 8018f2a:	f7f8 fe91 	bl	8011c50 <uxr_init_base_object_request>
 8018f2e:	a906      	add	r1, sp, #24
 8018f30:	4604      	mov	r4, r0
 8018f32:	a80c      	add	r0, sp, #48	@ 0x30
 8018f34:	f7fa f9c0 	bl	80132b8 <uxr_serialize_READ_DATA_Payload>
 8018f38:	4620      	mov	r0, r4
 8018f3a:	b014      	add	sp, #80	@ 0x50
 8018f3c:	bd10      	pop	{r4, pc}
 8018f3e:	bf00      	nop

08018f40 <read_submessage_format>:
 8018f40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018f44:	b095      	sub	sp, #84	@ 0x54
 8018f46:	f8bd 6078 	ldrh.w	r6, [sp, #120]	@ 0x78
 8018f4a:	b113      	cbz	r3, 8018f52 <read_submessage_format+0x12>
 8018f4c:	b015      	add	sp, #84	@ 0x54
 8018f4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018f52:	460c      	mov	r4, r1
 8018f54:	4615      	mov	r5, r2
 8018f56:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8018f5a:	4607      	mov	r7, r0
 8018f5c:	981c      	ldr	r0, [sp, #112]	@ 0x70
 8018f5e:	9004      	str	r0, [sp, #16]
 8018f60:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8018f62:	9005      	str	r0, [sp, #20]
 8018f64:	1a52      	subs	r2, r2, r1
 8018f66:	a80c      	add	r0, sp, #48	@ 0x30
 8018f68:	4699      	mov	r9, r3
 8018f6a:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 8018f6e:	f7f7 fad7 	bl	8010520 <ucdr_init_buffer>
 8018f72:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8018f76:	a80c      	add	r0, sp, #48	@ 0x30
 8018f78:	f7f7 faa6 	bl	80104c8 <ucdr_set_on_full_buffer_callback>
 8018f7c:	69e2      	ldr	r2, [r4, #28]
 8018f7e:	b19a      	cbz	r2, 8018fa8 <read_submessage_format+0x68>
 8018f80:	f1b8 0f07 	cmp.w	r8, #7
 8018f84:	f882 9014 	strb.w	r9, [r2, #20]
 8018f88:	d040      	beq.n	801900c <read_submessage_format+0xcc>
 8018f8a:	f1b8 0f08 	cmp.w	r8, #8
 8018f8e:	d02e      	beq.n	8018fee <read_submessage_format+0xae>
 8018f90:	f1b8 0f06 	cmp.w	r8, #6
 8018f94:	d011      	beq.n	8018fba <read_submessage_format+0x7a>
 8018f96:	2301      	movs	r3, #1
 8018f98:	7513      	strb	r3, [r2, #20]
 8018f9a:	4629      	mov	r1, r5
 8018f9c:	4620      	mov	r0, r4
 8018f9e:	f7f7 fb0f 	bl	80105c0 <ucdr_advance_buffer>
 8018fa2:	b015      	add	sp, #84	@ 0x54
 8018fa4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018fa8:	f1b8 0f07 	cmp.w	r8, #7
 8018fac:	d02e      	beq.n	801900c <read_submessage_format+0xcc>
 8018fae:	f1b8 0f08 	cmp.w	r8, #8
 8018fb2:	d01c      	beq.n	8018fee <read_submessage_format+0xae>
 8018fb4:	f1b8 0f06 	cmp.w	r8, #6
 8018fb8:	d1ef      	bne.n	8018f9a <read_submessage_format+0x5a>
 8018fba:	f8d7 8088 	ldr.w	r8, [r7, #136]	@ 0x88
 8018fbe:	f1b8 0f00 	cmp.w	r8, #0
 8018fc2:	d011      	beq.n	8018fe8 <read_submessage_format+0xa8>
 8018fc4:	ab0c      	add	r3, sp, #48	@ 0x30
 8018fc6:	e9cd 3500 	strd	r3, r5, [sp]
 8018fca:	2306      	movs	r3, #6
 8018fcc:	f88d 3016 	strb.w	r3, [sp, #22]
 8018fd0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8018fd4:	9302      	str	r3, [sp, #8]
 8018fd6:	4632      	mov	r2, r6
 8018fd8:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8018fdc:	4638      	mov	r0, r7
 8018fde:	47c0      	blx	r8
 8018fe0:	2301      	movs	r3, #1
 8018fe2:	69e2      	ldr	r2, [r4, #28]
 8018fe4:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8018fe8:	2a00      	cmp	r2, #0
 8018fea:	d1d4      	bne.n	8018f96 <read_submessage_format+0x56>
 8018fec:	e7d5      	b.n	8018f9a <read_submessage_format+0x5a>
 8018fee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8018ff2:	2b00      	cmp	r3, #0
 8018ff4:	d0f8      	beq.n	8018fe8 <read_submessage_format+0xa8>
 8018ff6:	a906      	add	r1, sp, #24
 8018ff8:	a80c      	add	r0, sp, #48	@ 0x30
 8018ffa:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 8018ffe:	f7fa fa21 	bl	8013444 <uxr_deserialize_SampleIdentity>
 8019002:	b9a0      	cbnz	r0, 801902e <read_submessage_format+0xee>
 8019004:	69e2      	ldr	r2, [r4, #28]
 8019006:	2a00      	cmp	r2, #0
 8019008:	d1c5      	bne.n	8018f96 <read_submessage_format+0x56>
 801900a:	e7c6      	b.n	8018f9a <read_submessage_format+0x5a>
 801900c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8019010:	b13b      	cbz	r3, 8019022 <read_submessage_format+0xe2>
 8019012:	a906      	add	r1, sp, #24
 8019014:	a80c      	add	r0, sp, #48	@ 0x30
 8019016:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 801901a:	f7f9 fee7 	bl	8012dec <uxr_deserialize_BaseObjectRequest>
 801901e:	bb60      	cbnz	r0, 801907a <read_submessage_format+0x13a>
 8019020:	69e2      	ldr	r2, [r4, #28]
 8019022:	68a3      	ldr	r3, [r4, #8]
 8019024:	442b      	add	r3, r5
 8019026:	60a3      	str	r3, [r4, #8]
 8019028:	2a00      	cmp	r2, #0
 801902a:	d1b4      	bne.n	8018f96 <read_submessage_format+0x56>
 801902c:	e7b5      	b.n	8018f9a <read_submessage_format+0x5a>
 801902e:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8019032:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8019034:	1a52      	subs	r2, r2, r1
 8019036:	eba8 0803 	sub.w	r8, r8, r3
 801903a:	a80c      	add	r0, sp, #48	@ 0x30
 801903c:	f7f7 fa70 	bl	8010520 <ucdr_init_buffer>
 8019040:	44a8      	add	r8, r5
 8019042:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8019046:	a80c      	add	r0, sp, #48	@ 0x30
 8019048:	f7f7 fa3e 	bl	80104c8 <ucdr_set_on_full_buffer_callback>
 801904c:	fa1f f888 	uxth.w	r8, r8
 8019050:	ab0c      	add	r3, sp, #48	@ 0x30
 8019052:	9300      	str	r3, [sp, #0]
 8019054:	f8cd 8004 	str.w	r8, [sp, #4]
 8019058:	2108      	movs	r1, #8
 801905a:	f88d 1016 	strb.w	r1, [sp, #22]
 801905e:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 8019062:	9102      	str	r1, [sp, #8]
 8019064:	ab06      	add	r3, sp, #24
 8019066:	4632      	mov	r2, r6
 8019068:	9905      	ldr	r1, [sp, #20]
 801906a:	f8d7 60a4 	ldr.w	r6, [r7, #164]	@ 0xa4
 801906e:	4638      	mov	r0, r7
 8019070:	47b0      	blx	r6
 8019072:	2301      	movs	r3, #1
 8019074:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8019078:	e7c4      	b.n	8019004 <read_submessage_format+0xc4>
 801907a:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 801907e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8019080:	1a52      	subs	r2, r2, r1
 8019082:	a80c      	add	r0, sp, #48	@ 0x30
 8019084:	eba8 0803 	sub.w	r8, r8, r3
 8019088:	f7f7 fa4a 	bl	8010520 <ucdr_init_buffer>
 801908c:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8019090:	a80c      	add	r0, sp, #48	@ 0x30
 8019092:	f7f7 fa19 	bl	80104c8 <ucdr_set_on_full_buffer_callback>
 8019096:	ab0c      	add	r3, sp, #48	@ 0x30
 8019098:	9300      	str	r3, [sp, #0]
 801909a:	f89d 1018 	ldrb.w	r1, [sp, #24]
 801909e:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80190a2:	44a8      	add	r8, r5
 80190a4:	fa1f f888 	uxth.w	r8, r8
 80190a8:	f8cd 8004 	str.w	r8, [sp, #4]
 80190ac:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 80190b0:	2107      	movs	r1, #7
 80190b2:	f88d 1016 	strb.w	r1, [sp, #22]
 80190b6:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 80190ba:	9102      	str	r1, [sp, #8]
 80190bc:	4632      	mov	r2, r6
 80190be:	b29b      	uxth	r3, r3
 80190c0:	f8d7 60ac 	ldr.w	r6, [r7, #172]	@ 0xac
 80190c4:	9905      	ldr	r1, [sp, #20]
 80190c6:	4638      	mov	r0, r7
 80190c8:	47b0      	blx	r6
 80190ca:	2301      	movs	r3, #1
 80190cc:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 80190d0:	e7a6      	b.n	8019020 <read_submessage_format+0xe0>
 80190d2:	bf00      	nop

080190d4 <uxr_seq_num_add>:
 80190d4:	4408      	add	r0, r1
 80190d6:	b280      	uxth	r0, r0
 80190d8:	4770      	bx	lr
 80190da:	bf00      	nop

080190dc <uxr_seq_num_sub>:
 80190dc:	1a40      	subs	r0, r0, r1
 80190de:	b280      	uxth	r0, r0
 80190e0:	4770      	bx	lr
 80190e2:	bf00      	nop

080190e4 <uxr_seq_num_cmp>:
 80190e4:	4288      	cmp	r0, r1
 80190e6:	d011      	beq.n	801910c <uxr_seq_num_cmp+0x28>
 80190e8:	d309      	bcc.n	80190fe <uxr_seq_num_cmp+0x1a>
 80190ea:	4288      	cmp	r0, r1
 80190ec:	d910      	bls.n	8019110 <uxr_seq_num_cmp+0x2c>
 80190ee:	1a40      	subs	r0, r0, r1
 80190f0:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80190f4:	bfd4      	ite	le
 80190f6:	2001      	movle	r0, #1
 80190f8:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 80190fc:	4770      	bx	lr
 80190fe:	1a0b      	subs	r3, r1, r0
 8019100:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8019104:	daf1      	bge.n	80190ea <uxr_seq_num_cmp+0x6>
 8019106:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801910a:	4770      	bx	lr
 801910c:	2000      	movs	r0, #0
 801910e:	4770      	bx	lr
 8019110:	2001      	movs	r0, #1
 8019112:	4770      	bx	lr

08019114 <uxr_init_framing_io>:
 8019114:	2300      	movs	r3, #0
 8019116:	7041      	strb	r1, [r0, #1]
 8019118:	7003      	strb	r3, [r0, #0]
 801911a:	8583      	strh	r3, [r0, #44]	@ 0x2c
 801911c:	4770      	bx	lr
 801911e:	bf00      	nop

08019120 <uxr_write_framed_msg>:
 8019120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019124:	4617      	mov	r7, r2
 8019126:	7842      	ldrb	r2, [r0, #1]
 8019128:	b083      	sub	sp, #12
 801912a:	460e      	mov	r6, r1
 801912c:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 8019130:	469a      	mov	sl, r3
 8019132:	2901      	cmp	r1, #1
 8019134:	f04f 037e 	mov.w	r3, #126	@ 0x7e
 8019138:	4604      	mov	r4, r0
 801913a:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 801913e:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 8019142:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 8019146:	f240 8137 	bls.w	80193b8 <uxr_write_framed_msg+0x298>
 801914a:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 801914e:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 8019152:	2901      	cmp	r1, #1
 8019154:	f04f 0202 	mov.w	r2, #2
 8019158:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801915c:	f240 808f 	bls.w	801927e <uxr_write_framed_msg+0x15e>
 8019160:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019162:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 8019166:	b2dd      	uxtb	r5, r3
 8019168:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 801916c:	2203      	movs	r2, #3
 801916e:	2901      	cmp	r1, #1
 8019170:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8019174:	f240 809a 	bls.w	80192ac <uxr_write_framed_msg+0x18c>
 8019178:	18a1      	adds	r1, r4, r2
 801917a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801917c:	f881 5038 	strb.w	r5, [r1, #56]	@ 0x38
 8019180:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8019184:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 8019188:	3201      	adds	r2, #1
 801918a:	2801      	cmp	r0, #1
 801918c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8019190:	f240 80a0 	bls.w	80192d4 <uxr_write_framed_msg+0x1b4>
 8019194:	18a0      	adds	r0, r4, r2
 8019196:	3201      	adds	r2, #1
 8019198:	b2d2      	uxtb	r2, r2
 801919a:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 801919e:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80191a2:	2b00      	cmp	r3, #0
 80191a4:	f000 80a9 	beq.w	80192fa <uxr_write_framed_msg+0x1da>
 80191a8:	f04f 0900 	mov.w	r9, #0
 80191ac:	46c8      	mov	r8, r9
 80191ae:	f81a 3008 	ldrb.w	r3, [sl, r8]
 80191b2:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 80191b6:	2901      	cmp	r1, #1
 80191b8:	f240 80c3 	bls.w	8019342 <uxr_write_framed_msg+0x222>
 80191bc:	2a29      	cmp	r2, #41	@ 0x29
 80191be:	f200 809f 	bhi.w	8019300 <uxr_write_framed_msg+0x1e0>
 80191c2:	18a1      	adds	r1, r4, r2
 80191c4:	3201      	adds	r2, #1
 80191c6:	b2d2      	uxtb	r2, r2
 80191c8:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 80191cc:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80191d0:	ea89 0303 	eor.w	r3, r9, r3
 80191d4:	498c      	ldr	r1, [pc, #560]	@ (8019408 <uxr_write_framed_msg+0x2e8>)
 80191d6:	b2db      	uxtb	r3, r3
 80191d8:	f108 0801 	add.w	r8, r8, #1
 80191dc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80191e0:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 80191e4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80191e6:	4543      	cmp	r3, r8
 80191e8:	d8e1      	bhi.n	80191ae <uxr_write_framed_msg+0x8e>
 80191ea:	ea4f 2319 	mov.w	r3, r9, lsr #8
 80191ee:	fa5f f889 	uxtb.w	r8, r9
 80191f2:	9301      	str	r3, [sp, #4]
 80191f4:	f04f 0900 	mov.w	r9, #0
 80191f8:	f1a8 0a7d 	sub.w	sl, r8, #125	@ 0x7d
 80191fc:	fa5f f18a 	uxtb.w	r1, sl
 8019200:	2901      	cmp	r1, #1
 8019202:	d921      	bls.n	8019248 <uxr_write_framed_msg+0x128>
 8019204:	2a29      	cmp	r2, #41	@ 0x29
 8019206:	f240 80af 	bls.w	8019368 <uxr_write_framed_msg+0x248>
 801920a:	2500      	movs	r5, #0
 801920c:	e000      	b.n	8019210 <uxr_write_framed_msg+0xf0>
 801920e:	b160      	cbz	r0, 801922a <uxr_write_framed_msg+0x10a>
 8019210:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8019214:	1b52      	subs	r2, r2, r5
 8019216:	465b      	mov	r3, fp
 8019218:	4421      	add	r1, r4
 801921a:	4638      	mov	r0, r7
 801921c:	47b0      	blx	r6
 801921e:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8019222:	4405      	add	r5, r0
 8019224:	4295      	cmp	r5, r2
 8019226:	d3f2      	bcc.n	801920e <uxr_write_framed_msg+0xee>
 8019228:	d003      	beq.n	8019232 <uxr_write_framed_msg+0x112>
 801922a:	2000      	movs	r0, #0
 801922c:	b003      	add	sp, #12
 801922e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019232:	fa5f f18a 	uxtb.w	r1, sl
 8019236:	f04f 0300 	mov.w	r3, #0
 801923a:	2901      	cmp	r1, #1
 801923c:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8019240:	f04f 0200 	mov.w	r2, #0
 8019244:	f200 8090 	bhi.w	8019368 <uxr_write_framed_msg+0x248>
 8019248:	1c51      	adds	r1, r2, #1
 801924a:	b2c9      	uxtb	r1, r1
 801924c:	2929      	cmp	r1, #41	@ 0x29
 801924e:	d8dc      	bhi.n	801920a <uxr_write_framed_msg+0xea>
 8019250:	18a5      	adds	r5, r4, r2
 8019252:	4421      	add	r1, r4
 8019254:	3202      	adds	r2, #2
 8019256:	f088 0820 	eor.w	r8, r8, #32
 801925a:	4648      	mov	r0, r9
 801925c:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 8019260:	b2d2      	uxtb	r2, r2
 8019262:	f885 3038 	strb.w	r3, [r5, #56]	@ 0x38
 8019266:	f04f 0901 	mov.w	r9, #1
 801926a:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 801926e:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8019272:	2800      	cmp	r0, #0
 8019274:	f040 8085 	bne.w	8019382 <uxr_write_framed_msg+0x262>
 8019278:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801927c:	e7bc      	b.n	80191f8 <uxr_write_framed_msg+0xd8>
 801927e:	4611      	mov	r1, r2
 8019280:	f04f 0c03 	mov.w	ip, #3
 8019284:	2204      	movs	r2, #4
 8019286:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019288:	4421      	add	r1, r4
 801928a:	b2dd      	uxtb	r5, r3
 801928c:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 8019290:	f881 e038 	strb.w	lr, [r1, #56]	@ 0x38
 8019294:	44a4      	add	ip, r4
 8019296:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 801929a:	f080 0020 	eor.w	r0, r0, #32
 801929e:	2901      	cmp	r1, #1
 80192a0:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 80192a4:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80192a8:	f63f af66 	bhi.w	8019178 <uxr_write_framed_msg+0x58>
 80192ac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80192ae:	18a0      	adds	r0, r4, r2
 80192b0:	f085 0520 	eor.w	r5, r5, #32
 80192b4:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 80192b8:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80192bc:	f880 c038 	strb.w	ip, [r0, #56]	@ 0x38
 80192c0:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 80192c4:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 80192c8:	3202      	adds	r2, #2
 80192ca:	2801      	cmp	r0, #1
 80192cc:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80192d0:	f63f af60 	bhi.w	8019194 <uxr_write_framed_msg+0x74>
 80192d4:	1c50      	adds	r0, r2, #1
 80192d6:	18a5      	adds	r5, r4, r2
 80192d8:	fa54 f080 	uxtab	r0, r4, r0
 80192dc:	3202      	adds	r2, #2
 80192de:	f081 0120 	eor.w	r1, r1, #32
 80192e2:	b2d2      	uxtb	r2, r2
 80192e4:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 80192e8:	f885 c038 	strb.w	ip, [r5, #56]	@ 0x38
 80192ec:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 80192f0:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80192f4:	2b00      	cmp	r3, #0
 80192f6:	f47f af57 	bne.w	80191a8 <uxr_write_framed_msg+0x88>
 80192fa:	9301      	str	r3, [sp, #4]
 80192fc:	4698      	mov	r8, r3
 80192fe:	e779      	b.n	80191f4 <uxr_write_framed_msg+0xd4>
 8019300:	2500      	movs	r5, #0
 8019302:	e001      	b.n	8019308 <uxr_write_framed_msg+0x1e8>
 8019304:	2800      	cmp	r0, #0
 8019306:	d090      	beq.n	801922a <uxr_write_framed_msg+0x10a>
 8019308:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 801930c:	1b52      	subs	r2, r2, r5
 801930e:	465b      	mov	r3, fp
 8019310:	4421      	add	r1, r4
 8019312:	4638      	mov	r0, r7
 8019314:	47b0      	blx	r6
 8019316:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801931a:	4405      	add	r5, r0
 801931c:	4295      	cmp	r5, r2
 801931e:	d3f1      	bcc.n	8019304 <uxr_write_framed_msg+0x1e4>
 8019320:	d183      	bne.n	801922a <uxr_write_framed_msg+0x10a>
 8019322:	f04f 0300 	mov.w	r3, #0
 8019326:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 801932a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801932c:	4543      	cmp	r3, r8
 801932e:	d964      	bls.n	80193fa <uxr_write_framed_msg+0x2da>
 8019330:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8019334:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 8019338:	2901      	cmp	r1, #1
 801933a:	f04f 0200 	mov.w	r2, #0
 801933e:	f63f af3d 	bhi.w	80191bc <uxr_write_framed_msg+0x9c>
 8019342:	1c51      	adds	r1, r2, #1
 8019344:	b2c9      	uxtb	r1, r1
 8019346:	2929      	cmp	r1, #41	@ 0x29
 8019348:	d8da      	bhi.n	8019300 <uxr_write_framed_msg+0x1e0>
 801934a:	18a0      	adds	r0, r4, r2
 801934c:	4421      	add	r1, r4
 801934e:	f04f 057d 	mov.w	r5, #125	@ 0x7d
 8019352:	3202      	adds	r2, #2
 8019354:	f880 5038 	strb.w	r5, [r0, #56]	@ 0x38
 8019358:	b2d2      	uxtb	r2, r2
 801935a:	f083 0020 	eor.w	r0, r3, #32
 801935e:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 8019362:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8019366:	e733      	b.n	80191d0 <uxr_write_framed_msg+0xb0>
 8019368:	18a1      	adds	r1, r4, r2
 801936a:	3201      	adds	r2, #1
 801936c:	4648      	mov	r0, r9
 801936e:	b2d2      	uxtb	r2, r2
 8019370:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 8019374:	f04f 0901 	mov.w	r9, #1
 8019378:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801937c:	2800      	cmp	r0, #0
 801937e:	f43f af7b 	beq.w	8019278 <uxr_write_framed_msg+0x158>
 8019382:	2500      	movs	r5, #0
 8019384:	e002      	b.n	801938c <uxr_write_framed_msg+0x26c>
 8019386:	2800      	cmp	r0, #0
 8019388:	f43f af4f 	beq.w	801922a <uxr_write_framed_msg+0x10a>
 801938c:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8019390:	1b52      	subs	r2, r2, r5
 8019392:	465b      	mov	r3, fp
 8019394:	4421      	add	r1, r4
 8019396:	4638      	mov	r0, r7
 8019398:	47b0      	blx	r6
 801939a:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801939e:	4405      	add	r5, r0
 80193a0:	4295      	cmp	r5, r2
 80193a2:	d3f0      	bcc.n	8019386 <uxr_write_framed_msg+0x266>
 80193a4:	f47f af41 	bne.w	801922a <uxr_write_framed_msg+0x10a>
 80193a8:	2300      	movs	r3, #0
 80193aa:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 80193ae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80193b0:	b298      	uxth	r0, r3
 80193b2:	b003      	add	sp, #12
 80193b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80193b8:	217d      	movs	r1, #125	@ 0x7d
 80193ba:	f082 0220 	eor.w	r2, r2, #32
 80193be:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 80193c2:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 80193c6:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 80193ca:	2901      	cmp	r1, #1
 80193cc:	f04f 0203 	mov.w	r2, #3
 80193d0:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80193d4:	d804      	bhi.n	80193e0 <uxr_write_framed_msg+0x2c0>
 80193d6:	4611      	mov	r1, r2
 80193d8:	f04f 0c04 	mov.w	ip, #4
 80193dc:	2205      	movs	r2, #5
 80193de:	e752      	b.n	8019286 <uxr_write_framed_msg+0x166>
 80193e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80193e2:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 80193e6:	b2dd      	uxtb	r5, r3
 80193e8:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 80193ec:	2204      	movs	r2, #4
 80193ee:	2901      	cmp	r1, #1
 80193f0:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80193f4:	f63f aec0 	bhi.w	8019178 <uxr_write_framed_msg+0x58>
 80193f8:	e758      	b.n	80192ac <uxr_write_framed_msg+0x18c>
 80193fa:	ea4f 2319 	mov.w	r3, r9, lsr #8
 80193fe:	fa5f f889 	uxtb.w	r8, r9
 8019402:	9301      	str	r3, [sp, #4]
 8019404:	2200      	movs	r2, #0
 8019406:	e6f5      	b.n	80191f4 <uxr_write_framed_msg+0xd4>
 8019408:	0801dce4 	.word	0x0801dce4

0801940c <uxr_framing_read_transport>:
 801940c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019410:	4604      	mov	r4, r0
 8019412:	b083      	sub	sp, #12
 8019414:	461f      	mov	r7, r3
 8019416:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 801941a:	4689      	mov	r9, r1
 801941c:	4692      	mov	sl, r2
 801941e:	f7f8 fdc5 	bl	8011fac <uxr_millis>
 8019422:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8019426:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 801942a:	42b3      	cmp	r3, r6
 801942c:	4680      	mov	r8, r0
 801942e:	d061      	beq.n	80194f4 <uxr_framing_read_transport+0xe8>
 8019430:	d81c      	bhi.n	801946c <uxr_framing_read_transport+0x60>
 8019432:	1e75      	subs	r5, r6, #1
 8019434:	1aed      	subs	r5, r5, r3
 8019436:	b2ed      	uxtb	r5, r5
 8019438:	2600      	movs	r6, #0
 801943a:	455d      	cmp	r5, fp
 801943c:	d81f      	bhi.n	801947e <uxr_framing_read_transport+0x72>
 801943e:	19ab      	adds	r3, r5, r6
 8019440:	455b      	cmp	r3, fp
 8019442:	bf84      	itt	hi
 8019444:	ebab 0605 	subhi.w	r6, fp, r5
 8019448:	b2f6      	uxtbhi	r6, r6
 801944a:	b9ed      	cbnz	r5, 8019488 <uxr_framing_read_transport+0x7c>
 801944c:	f04f 0b00 	mov.w	fp, #0
 8019450:	f7f8 fdac 	bl	8011fac <uxr_millis>
 8019454:	683b      	ldr	r3, [r7, #0]
 8019456:	eba0 0808 	sub.w	r8, r0, r8
 801945a:	eba3 0308 	sub.w	r3, r3, r8
 801945e:	4658      	mov	r0, fp
 8019460:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019464:	603b      	str	r3, [r7, #0]
 8019466:	b003      	add	sp, #12
 8019468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801946c:	2e00      	cmp	r6, #0
 801946e:	d049      	beq.n	8019504 <uxr_framing_read_transport+0xf8>
 8019470:	f1c3 052a 	rsb	r5, r3, #42	@ 0x2a
 8019474:	b2ed      	uxtb	r5, r5
 8019476:	3e01      	subs	r6, #1
 8019478:	455d      	cmp	r5, fp
 801947a:	b2f6      	uxtb	r6, r6
 801947c:	d9df      	bls.n	801943e <uxr_framing_read_transport+0x32>
 801947e:	fa5f f58b 	uxtb.w	r5, fp
 8019482:	2600      	movs	r6, #0
 8019484:	2d00      	cmp	r5, #0
 8019486:	d0e1      	beq.n	801944c <uxr_framing_read_transport+0x40>
 8019488:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801948c:	3102      	adds	r1, #2
 801948e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019490:	9300      	str	r3, [sp, #0]
 8019492:	683b      	ldr	r3, [r7, #0]
 8019494:	4421      	add	r1, r4
 8019496:	462a      	mov	r2, r5
 8019498:	4650      	mov	r0, sl
 801949a:	47c8      	blx	r9
 801949c:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80194a0:	4a1a      	ldr	r2, [pc, #104]	@ (801950c <uxr_framing_read_transport+0x100>)
 80194a2:	4403      	add	r3, r0
 80194a4:	0859      	lsrs	r1, r3, #1
 80194a6:	fba2 2101 	umull	r2, r1, r2, r1
 80194aa:	0889      	lsrs	r1, r1, #2
 80194ac:	222a      	movs	r2, #42	@ 0x2a
 80194ae:	fb02 3111 	mls	r1, r2, r1, r3
 80194b2:	4683      	mov	fp, r0
 80194b4:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 80194b8:	2800      	cmp	r0, #0
 80194ba:	d0c7      	beq.n	801944c <uxr_framing_read_transport+0x40>
 80194bc:	42a8      	cmp	r0, r5
 80194be:	d1c7      	bne.n	8019450 <uxr_framing_read_transport+0x44>
 80194c0:	2e00      	cmp	r6, #0
 80194c2:	d0c5      	beq.n	8019450 <uxr_framing_read_transport+0x44>
 80194c4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80194c6:	9300      	str	r3, [sp, #0]
 80194c8:	3102      	adds	r1, #2
 80194ca:	4632      	mov	r2, r6
 80194cc:	4421      	add	r1, r4
 80194ce:	2300      	movs	r3, #0
 80194d0:	4650      	mov	r0, sl
 80194d2:	47c8      	blx	r9
 80194d4:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80194d8:	4a0c      	ldr	r2, [pc, #48]	@ (801950c <uxr_framing_read_transport+0x100>)
 80194da:	180b      	adds	r3, r1, r0
 80194dc:	0859      	lsrs	r1, r3, #1
 80194de:	fba2 1201 	umull	r1, r2, r2, r1
 80194e2:	0892      	lsrs	r2, r2, #2
 80194e4:	212a      	movs	r1, #42	@ 0x2a
 80194e6:	fb01 3312 	mls	r3, r1, r2, r3
 80194ea:	eb00 0b05 	add.w	fp, r0, r5
 80194ee:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 80194f2:	e7ad      	b.n	8019450 <uxr_framing_read_transport+0x44>
 80194f4:	2600      	movs	r6, #0
 80194f6:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 80194fa:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 80194fc:	d9bf      	bls.n	801947e <uxr_framing_read_transport+0x72>
 80194fe:	2102      	movs	r1, #2
 8019500:	2529      	movs	r5, #41	@ 0x29
 8019502:	e7c4      	b.n	801948e <uxr_framing_read_transport+0x82>
 8019504:	f1c3 0529 	rsb	r5, r3, #41	@ 0x29
 8019508:	b2ed      	uxtb	r5, r5
 801950a:	e796      	b.n	801943a <uxr_framing_read_transport+0x2e>
 801950c:	30c30c31 	.word	0x30c30c31

08019510 <uxr_read_framed_msg>:
 8019510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019514:	461e      	mov	r6, r3
 8019516:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 801951a:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 801951e:	429d      	cmp	r5, r3
 8019520:	b083      	sub	sp, #12
 8019522:	4604      	mov	r4, r0
 8019524:	4688      	mov	r8, r1
 8019526:	4691      	mov	r9, r2
 8019528:	f000 8188 	beq.w	801983c <uxr_read_framed_msg+0x32c>
 801952c:	7823      	ldrb	r3, [r4, #0]
 801952e:	4dc1      	ldr	r5, [pc, #772]	@ (8019834 <uxr_read_framed_msg+0x324>)
 8019530:	4fc1      	ldr	r7, [pc, #772]	@ (8019838 <uxr_read_framed_msg+0x328>)
 8019532:	2b07      	cmp	r3, #7
 8019534:	d8fd      	bhi.n	8019532 <uxr_read_framed_msg+0x22>
 8019536:	e8df f013 	tbh	[pc, r3, lsl #1]
 801953a:	0115      	.short	0x0115
 801953c:	00d600f6 	.word	0x00d600f6
 8019540:	009000b9 	.word	0x009000b9
 8019544:	0030004d 	.word	0x0030004d
 8019548:	0008      	.short	0x0008
 801954a:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801954e:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8019552:	4299      	cmp	r1, r3
 8019554:	f000 814a 	beq.w	80197ec <uxr_read_framed_msg+0x2dc>
 8019558:	18e2      	adds	r2, r4, r3
 801955a:	7892      	ldrb	r2, [r2, #2]
 801955c:	2a7d      	cmp	r2, #125	@ 0x7d
 801955e:	f000 8199 	beq.w	8019894 <uxr_read_framed_msg+0x384>
 8019562:	3301      	adds	r3, #1
 8019564:	0858      	lsrs	r0, r3, #1
 8019566:	fba5 1000 	umull	r1, r0, r5, r0
 801956a:	0880      	lsrs	r0, r0, #2
 801956c:	212a      	movs	r1, #42	@ 0x2a
 801956e:	fb01 3310 	mls	r3, r1, r0, r3
 8019572:	2a7e      	cmp	r2, #126	@ 0x7e
 8019574:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8019578:	f000 8252 	beq.w	8019a20 <uxr_read_framed_msg+0x510>
 801957c:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 801957e:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 8019580:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8019584:	b29b      	uxth	r3, r3
 8019586:	2200      	movs	r2, #0
 8019588:	4299      	cmp	r1, r3
 801958a:	86a3      	strh	r3, [r4, #52]	@ 0x34
 801958c:	7022      	strb	r2, [r4, #0]
 801958e:	f000 8179 	beq.w	8019884 <uxr_read_framed_msg+0x374>
 8019592:	2000      	movs	r0, #0
 8019594:	b003      	add	sp, #12
 8019596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801959a:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801959e:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80195a2:	4299      	cmp	r1, r3
 80195a4:	f000 8131 	beq.w	801980a <uxr_read_framed_msg+0x2fa>
 80195a8:	18e2      	adds	r2, r4, r3
 80195aa:	7890      	ldrb	r0, [r2, #2]
 80195ac:	287d      	cmp	r0, #125	@ 0x7d
 80195ae:	f000 8190 	beq.w	80198d2 <uxr_read_framed_msg+0x3c2>
 80195b2:	3301      	adds	r3, #1
 80195b4:	085a      	lsrs	r2, r3, #1
 80195b6:	fba5 1202 	umull	r1, r2, r5, r2
 80195ba:	0892      	lsrs	r2, r2, #2
 80195bc:	212a      	movs	r1, #42	@ 0x2a
 80195be:	fb01 3312 	mls	r3, r1, r2, r3
 80195c2:	287e      	cmp	r0, #126	@ 0x7e
 80195c4:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80195c8:	f000 821a 	beq.w	8019a00 <uxr_read_framed_msg+0x4f0>
 80195cc:	2307      	movs	r3, #7
 80195ce:	86a0      	strh	r0, [r4, #52]	@ 0x34
 80195d0:	7023      	strb	r3, [r4, #0]
 80195d2:	e7ae      	b.n	8019532 <uxr_read_framed_msg+0x22>
 80195d4:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 80195d6:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 80195da:	459e      	cmp	lr, r3
 80195dc:	d938      	bls.n	8019650 <uxr_read_framed_msg+0x140>
 80195de:	ee07 8a90 	vmov	s15, r8
 80195e2:	212a      	movs	r1, #42	@ 0x2a
 80195e4:	e020      	b.n	8019628 <uxr_read_framed_msg+0x118>
 80195e6:	f89b c002 	ldrb.w	ip, [fp, #2]
 80195ea:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 80195ee:	f000 80d4 	beq.w	801979a <uxr_read_framed_msg+0x28a>
 80195f2:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 80195f6:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 80195fa:	f000 8219 	beq.w	8019a30 <uxr_read_framed_msg+0x520>
 80195fe:	f806 c003 	strb.w	ip, [r6, r3]
 8019602:	f8b4 a036 	ldrh.w	sl, [r4, #54]	@ 0x36
 8019606:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8019608:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 801960c:	ea8a 000c 	eor.w	r0, sl, ip
 8019610:	b2c0      	uxtb	r0, r0
 8019612:	3301      	adds	r3, #1
 8019614:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 8019618:	b29b      	uxth	r3, r3
 801961a:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 801961e:	4573      	cmp	r3, lr
 8019620:	8663      	strh	r3, [r4, #50]	@ 0x32
 8019622:	86e2      	strh	r2, [r4, #54]	@ 0x36
 8019624:	f080 8120 	bcs.w	8019868 <uxr_read_framed_msg+0x358>
 8019628:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 801962c:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 8019630:	f100 0c01 	add.w	ip, r0, #1
 8019634:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8019638:	fba5 8202 	umull	r8, r2, r5, r2
 801963c:	0892      	lsrs	r2, r2, #2
 801963e:	4582      	cmp	sl, r0
 8019640:	eb04 0b00 	add.w	fp, r4, r0
 8019644:	fb01 c212 	mls	r2, r1, r2, ip
 8019648:	d1cd      	bne.n	80195e6 <uxr_read_framed_msg+0xd6>
 801964a:	ee17 8a90 	vmov	r8, s15
 801964e:	459e      	cmp	lr, r3
 8019650:	f040 8111 	bne.w	8019876 <uxr_read_framed_msg+0x366>
 8019654:	2306      	movs	r3, #6
 8019656:	7023      	strb	r3, [r4, #0]
 8019658:	e76b      	b.n	8019532 <uxr_read_framed_msg+0x22>
 801965a:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 801965e:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8019662:	4298      	cmp	r0, r3
 8019664:	f000 80c2 	beq.w	80197ec <uxr_read_framed_msg+0x2dc>
 8019668:	18e2      	adds	r2, r4, r3
 801966a:	7891      	ldrb	r1, [r2, #2]
 801966c:	297d      	cmp	r1, #125	@ 0x7d
 801966e:	f000 814c 	beq.w	801990a <uxr_read_framed_msg+0x3fa>
 8019672:	3301      	adds	r3, #1
 8019674:	085a      	lsrs	r2, r3, #1
 8019676:	fba5 0202 	umull	r0, r2, r5, r2
 801967a:	0892      	lsrs	r2, r2, #2
 801967c:	202a      	movs	r0, #42	@ 0x2a
 801967e:	fb00 3312 	mls	r3, r0, r2, r3
 8019682:	297e      	cmp	r1, #126	@ 0x7e
 8019684:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8019688:	f000 81ca 	beq.w	8019a20 <uxr_read_framed_msg+0x510>
 801968c:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 801968e:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8019692:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8019694:	b29b      	uxth	r3, r3
 8019696:	2000      	movs	r0, #0
 8019698:	428b      	cmp	r3, r1
 801969a:	8623      	strh	r3, [r4, #48]	@ 0x30
 801969c:	8660      	strh	r0, [r4, #50]	@ 0x32
 801969e:	86e0      	strh	r0, [r4, #54]	@ 0x36
 80196a0:	f240 80df 	bls.w	8019862 <uxr_read_framed_msg+0x352>
 80196a4:	7020      	strb	r0, [r4, #0]
 80196a6:	b003      	add	sp, #12
 80196a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80196ac:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80196b0:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80196b4:	4299      	cmp	r1, r3
 80196b6:	f000 80a8 	beq.w	801980a <uxr_read_framed_msg+0x2fa>
 80196ba:	18e2      	adds	r2, r4, r3
 80196bc:	7890      	ldrb	r0, [r2, #2]
 80196be:	287d      	cmp	r0, #125	@ 0x7d
 80196c0:	f000 8164 	beq.w	801998c <uxr_read_framed_msg+0x47c>
 80196c4:	3301      	adds	r3, #1
 80196c6:	085a      	lsrs	r2, r3, #1
 80196c8:	fba5 1202 	umull	r1, r2, r5, r2
 80196cc:	0892      	lsrs	r2, r2, #2
 80196ce:	212a      	movs	r1, #42	@ 0x2a
 80196d0:	fb01 3312 	mls	r3, r1, r2, r3
 80196d4:	287e      	cmp	r0, #126	@ 0x7e
 80196d6:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80196da:	f000 8191 	beq.w	8019a00 <uxr_read_framed_msg+0x4f0>
 80196de:	2304      	movs	r3, #4
 80196e0:	8620      	strh	r0, [r4, #48]	@ 0x30
 80196e2:	7023      	strb	r3, [r4, #0]
 80196e4:	e725      	b.n	8019532 <uxr_read_framed_msg+0x22>
 80196e6:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 80196ea:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 80196ee:	4290      	cmp	r0, r2
 80196f0:	f000 80b3 	beq.w	801985a <uxr_read_framed_msg+0x34a>
 80196f4:	18a3      	adds	r3, r4, r2
 80196f6:	7899      	ldrb	r1, [r3, #2]
 80196f8:	297d      	cmp	r1, #125	@ 0x7d
 80196fa:	f000 8164 	beq.w	80199c6 <uxr_read_framed_msg+0x4b6>
 80196fe:	3201      	adds	r2, #1
 8019700:	0850      	lsrs	r0, r2, #1
 8019702:	fba5 3000 	umull	r3, r0, r5, r0
 8019706:	0880      	lsrs	r0, r0, #2
 8019708:	232a      	movs	r3, #42	@ 0x2a
 801970a:	fb03 2210 	mls	r2, r3, r0, r2
 801970e:	297e      	cmp	r1, #126	@ 0x7e
 8019710:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8019714:	f000 8188 	beq.w	8019a28 <uxr_read_framed_msg+0x518>
 8019718:	7863      	ldrb	r3, [r4, #1]
 801971a:	428b      	cmp	r3, r1
 801971c:	bf0c      	ite	eq
 801971e:	2303      	moveq	r3, #3
 8019720:	2300      	movne	r3, #0
 8019722:	7023      	strb	r3, [r4, #0]
 8019724:	e705      	b.n	8019532 <uxr_read_framed_msg+0x22>
 8019726:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801972a:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801972e:	2200      	movs	r2, #0
 8019730:	4299      	cmp	r1, r3
 8019732:	f884 202e 	strb.w	r2, [r4, #46]	@ 0x2e
 8019736:	d06c      	beq.n	8019812 <uxr_read_framed_msg+0x302>
 8019738:	18e2      	adds	r2, r4, r3
 801973a:	7890      	ldrb	r0, [r2, #2]
 801973c:	287d      	cmp	r0, #125	@ 0x7d
 801973e:	f000 8101 	beq.w	8019944 <uxr_read_framed_msg+0x434>
 8019742:	3301      	adds	r3, #1
 8019744:	085a      	lsrs	r2, r3, #1
 8019746:	fba5 1202 	umull	r1, r2, r5, r2
 801974a:	0892      	lsrs	r2, r2, #2
 801974c:	212a      	movs	r1, #42	@ 0x2a
 801974e:	fb01 3312 	mls	r3, r1, r2, r3
 8019752:	287e      	cmp	r0, #126	@ 0x7e
 8019754:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 8019758:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801975c:	d059      	beq.n	8019812 <uxr_read_framed_msg+0x302>
 801975e:	2302      	movs	r3, #2
 8019760:	7023      	strb	r3, [r4, #0]
 8019762:	e6e6      	b.n	8019532 <uxr_read_framed_msg+0x22>
 8019764:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 8019768:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 801976c:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 8019770:	1c51      	adds	r1, r2, #1
 8019772:	084b      	lsrs	r3, r1, #1
 8019774:	fba5 c303 	umull	ip, r3, r5, r3
 8019778:	089b      	lsrs	r3, r3, #2
 801977a:	fb0e 1313 	mls	r3, lr, r3, r1
 801977e:	4592      	cmp	sl, r2
 8019780:	eb04 0002 	add.w	r0, r4, r2
 8019784:	b2da      	uxtb	r2, r3
 8019786:	f43f af04 	beq.w	8019592 <uxr_read_framed_msg+0x82>
 801978a:	7883      	ldrb	r3, [r0, #2]
 801978c:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8019790:	2b7e      	cmp	r3, #126	@ 0x7e
 8019792:	d1ed      	bne.n	8019770 <uxr_read_framed_msg+0x260>
 8019794:	2301      	movs	r3, #1
 8019796:	7023      	strb	r3, [r4, #0]
 8019798:	e6cb      	b.n	8019532 <uxr_read_framed_msg+0x22>
 801979a:	f100 0c01 	add.w	ip, r0, #1
 801979e:	ea4f 025c 	mov.w	r2, ip, lsr #1
 80197a2:	fba5 8202 	umull	r8, r2, r5, r2
 80197a6:	0892      	lsrs	r2, r2, #2
 80197a8:	fb01 c212 	mls	r2, r1, r2, ip
 80197ac:	eb04 0c02 	add.w	ip, r4, r2
 80197b0:	b2d2      	uxtb	r2, r2
 80197b2:	4592      	cmp	sl, r2
 80197b4:	f100 0002 	add.w	r0, r0, #2
 80197b8:	f43f af47 	beq.w	801964a <uxr_read_framed_msg+0x13a>
 80197bc:	0842      	lsrs	r2, r0, #1
 80197be:	f89c a002 	ldrb.w	sl, [ip, #2]
 80197c2:	fba5 8202 	umull	r8, r2, r5, r2
 80197c6:	0892      	lsrs	r2, r2, #2
 80197c8:	fb01 0012 	mls	r0, r1, r2, r0
 80197cc:	f1ba 0f7e 	cmp.w	sl, #126	@ 0x7e
 80197d0:	f08a 0c20 	eor.w	ip, sl, #32
 80197d4:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 80197d8:	f47f af11 	bne.w	80195fe <uxr_read_framed_msg+0xee>
 80197dc:	459e      	cmp	lr, r3
 80197de:	ee17 8a90 	vmov	r8, s15
 80197e2:	f43f af37 	beq.w	8019654 <uxr_read_framed_msg+0x144>
 80197e6:	2301      	movs	r3, #1
 80197e8:	7023      	strb	r3, [r4, #0]
 80197ea:	e6a2      	b.n	8019532 <uxr_read_framed_msg+0x22>
 80197ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80197ee:	9300      	str	r3, [sp, #0]
 80197f0:	2301      	movs	r3, #1
 80197f2:	9301      	str	r3, [sp, #4]
 80197f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80197f6:	464a      	mov	r2, r9
 80197f8:	4641      	mov	r1, r8
 80197fa:	4620      	mov	r0, r4
 80197fc:	f7ff fe06 	bl	801940c <uxr_framing_read_transport>
 8019800:	2800      	cmp	r0, #0
 8019802:	f43f aec6 	beq.w	8019592 <uxr_read_framed_msg+0x82>
 8019806:	7823      	ldrb	r3, [r4, #0]
 8019808:	e693      	b.n	8019532 <uxr_read_framed_msg+0x22>
 801980a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801980c:	9300      	str	r3, [sp, #0]
 801980e:	2302      	movs	r3, #2
 8019810:	e7ef      	b.n	80197f2 <uxr_read_framed_msg+0x2e2>
 8019812:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019814:	9300      	str	r3, [sp, #0]
 8019816:	2304      	movs	r3, #4
 8019818:	9301      	str	r3, [sp, #4]
 801981a:	464a      	mov	r2, r9
 801981c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801981e:	4641      	mov	r1, r8
 8019820:	4620      	mov	r0, r4
 8019822:	f7ff fdf3 	bl	801940c <uxr_framing_read_transport>
 8019826:	2800      	cmp	r0, #0
 8019828:	d1ed      	bne.n	8019806 <uxr_read_framed_msg+0x2f6>
 801982a:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 801982e:	2b7e      	cmp	r3, #126	@ 0x7e
 8019830:	d0e9      	beq.n	8019806 <uxr_read_framed_msg+0x2f6>
 8019832:	e6ae      	b.n	8019592 <uxr_read_framed_msg+0x82>
 8019834:	30c30c31 	.word	0x30c30c31
 8019838:	0801dce4 	.word	0x0801dce4
 801983c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801983e:	9300      	str	r3, [sp, #0]
 8019840:	2305      	movs	r3, #5
 8019842:	9301      	str	r3, [sp, #4]
 8019844:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019846:	f7ff fde1 	bl	801940c <uxr_framing_read_transport>
 801984a:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 801984e:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8019852:	429a      	cmp	r2, r3
 8019854:	f43f ae9d 	beq.w	8019592 <uxr_read_framed_msg+0x82>
 8019858:	e668      	b.n	801952c <uxr_read_framed_msg+0x1c>
 801985a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801985c:	9300      	str	r3, [sp, #0]
 801985e:	2303      	movs	r3, #3
 8019860:	e7c7      	b.n	80197f2 <uxr_read_framed_msg+0x2e2>
 8019862:	2305      	movs	r3, #5
 8019864:	7023      	strb	r3, [r4, #0]
 8019866:	e664      	b.n	8019532 <uxr_read_framed_msg+0x22>
 8019868:	ee17 8a90 	vmov	r8, s15
 801986c:	f43f aef2 	beq.w	8019654 <uxr_read_framed_msg+0x144>
 8019870:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8019874:	d08e      	beq.n	8019794 <uxr_read_framed_msg+0x284>
 8019876:	ebae 0303 	sub.w	r3, lr, r3
 801987a:	3302      	adds	r3, #2
 801987c:	9301      	str	r3, [sp, #4]
 801987e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019880:	9300      	str	r3, [sp, #0]
 8019882:	e7b7      	b.n	80197f4 <uxr_read_framed_msg+0x2e4>
 8019884:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8019886:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 801988a:	7013      	strb	r3, [r2, #0]
 801988c:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 801988e:	b003      	add	sp, #12
 8019890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019894:	f103 0c01 	add.w	ip, r3, #1
 8019898:	ea4f 025c 	mov.w	r2, ip, lsr #1
 801989c:	fba5 0202 	umull	r0, r2, r5, r2
 80198a0:	0892      	lsrs	r2, r2, #2
 80198a2:	202a      	movs	r0, #42	@ 0x2a
 80198a4:	fb00 c212 	mls	r2, r0, r2, ip
 80198a8:	fa5f fc82 	uxtb.w	ip, r2
 80198ac:	4561      	cmp	r1, ip
 80198ae:	d09d      	beq.n	80197ec <uxr_read_framed_msg+0x2dc>
 80198b0:	3302      	adds	r3, #2
 80198b2:	4422      	add	r2, r4
 80198b4:	0859      	lsrs	r1, r3, #1
 80198b6:	7892      	ldrb	r2, [r2, #2]
 80198b8:	fba5 c101 	umull	ip, r1, r5, r1
 80198bc:	0889      	lsrs	r1, r1, #2
 80198be:	fb00 3311 	mls	r3, r0, r1, r3
 80198c2:	2a7e      	cmp	r2, #126	@ 0x7e
 80198c4:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80198c8:	f000 80aa 	beq.w	8019a20 <uxr_read_framed_msg+0x510>
 80198cc:	f082 0220 	eor.w	r2, r2, #32
 80198d0:	e654      	b.n	801957c <uxr_read_framed_msg+0x6c>
 80198d2:	1c58      	adds	r0, r3, #1
 80198d4:	0842      	lsrs	r2, r0, #1
 80198d6:	fba5 c202 	umull	ip, r2, r5, r2
 80198da:	0892      	lsrs	r2, r2, #2
 80198dc:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 80198e0:	fb0c 0212 	mls	r2, ip, r2, r0
 80198e4:	b2d0      	uxtb	r0, r2
 80198e6:	4281      	cmp	r1, r0
 80198e8:	d08f      	beq.n	801980a <uxr_read_framed_msg+0x2fa>
 80198ea:	4422      	add	r2, r4
 80198ec:	3302      	adds	r3, #2
 80198ee:	7890      	ldrb	r0, [r2, #2]
 80198f0:	085a      	lsrs	r2, r3, #1
 80198f2:	fba5 1202 	umull	r1, r2, r5, r2
 80198f6:	0892      	lsrs	r2, r2, #2
 80198f8:	fb0c 3312 	mls	r3, ip, r2, r3
 80198fc:	287e      	cmp	r0, #126	@ 0x7e
 80198fe:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8019902:	d07d      	beq.n	8019a00 <uxr_read_framed_msg+0x4f0>
 8019904:	f080 0020 	eor.w	r0, r0, #32
 8019908:	e660      	b.n	80195cc <uxr_read_framed_msg+0xbc>
 801990a:	1c59      	adds	r1, r3, #1
 801990c:	084a      	lsrs	r2, r1, #1
 801990e:	fba5 c202 	umull	ip, r2, r5, r2
 8019912:	0892      	lsrs	r2, r2, #2
 8019914:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8019918:	fb0c 1212 	mls	r2, ip, r2, r1
 801991c:	b2d1      	uxtb	r1, r2
 801991e:	4288      	cmp	r0, r1
 8019920:	f43f af64 	beq.w	80197ec <uxr_read_framed_msg+0x2dc>
 8019924:	4422      	add	r2, r4
 8019926:	3302      	adds	r3, #2
 8019928:	7891      	ldrb	r1, [r2, #2]
 801992a:	085a      	lsrs	r2, r3, #1
 801992c:	fba5 0202 	umull	r0, r2, r5, r2
 8019930:	0892      	lsrs	r2, r2, #2
 8019932:	fb0c 3312 	mls	r3, ip, r2, r3
 8019936:	297e      	cmp	r1, #126	@ 0x7e
 8019938:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801993c:	d070      	beq.n	8019a20 <uxr_read_framed_msg+0x510>
 801993e:	f081 0120 	eor.w	r1, r1, #32
 8019942:	e6a3      	b.n	801968c <uxr_read_framed_msg+0x17c>
 8019944:	f103 0c01 	add.w	ip, r3, #1
 8019948:	ea4f 025c 	mov.w	r2, ip, lsr #1
 801994c:	fba5 0202 	umull	r0, r2, r5, r2
 8019950:	0892      	lsrs	r2, r2, #2
 8019952:	202a      	movs	r0, #42	@ 0x2a
 8019954:	fb00 c212 	mls	r2, r0, r2, ip
 8019958:	fa5f fc82 	uxtb.w	ip, r2
 801995c:	4561      	cmp	r1, ip
 801995e:	f43f af58 	beq.w	8019812 <uxr_read_framed_msg+0x302>
 8019962:	4422      	add	r2, r4
 8019964:	3302      	adds	r3, #2
 8019966:	7891      	ldrb	r1, [r2, #2]
 8019968:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 801996c:	085a      	lsrs	r2, r3, #1
 801996e:	fba5 c202 	umull	ip, r2, r5, r2
 8019972:	0892      	lsrs	r2, r2, #2
 8019974:	fb00 3312 	mls	r3, r0, r2, r3
 8019978:	297e      	cmp	r1, #126	@ 0x7e
 801997a:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801997e:	f43f af48 	beq.w	8019812 <uxr_read_framed_msg+0x302>
 8019982:	f081 0120 	eor.w	r1, r1, #32
 8019986:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 801998a:	e6e8      	b.n	801975e <uxr_read_framed_msg+0x24e>
 801998c:	1c58      	adds	r0, r3, #1
 801998e:	0842      	lsrs	r2, r0, #1
 8019990:	fba5 c202 	umull	ip, r2, r5, r2
 8019994:	0892      	lsrs	r2, r2, #2
 8019996:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 801999a:	fb0c 0212 	mls	r2, ip, r2, r0
 801999e:	b2d0      	uxtb	r0, r2
 80199a0:	4281      	cmp	r1, r0
 80199a2:	f43f af32 	beq.w	801980a <uxr_read_framed_msg+0x2fa>
 80199a6:	4422      	add	r2, r4
 80199a8:	3302      	adds	r3, #2
 80199aa:	7890      	ldrb	r0, [r2, #2]
 80199ac:	085a      	lsrs	r2, r3, #1
 80199ae:	fba5 1202 	umull	r1, r2, r5, r2
 80199b2:	0892      	lsrs	r2, r2, #2
 80199b4:	fb0c 3312 	mls	r3, ip, r2, r3
 80199b8:	287e      	cmp	r0, #126	@ 0x7e
 80199ba:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80199be:	d01f      	beq.n	8019a00 <uxr_read_framed_msg+0x4f0>
 80199c0:	f080 0020 	eor.w	r0, r0, #32
 80199c4:	e68b      	b.n	80196de <uxr_read_framed_msg+0x1ce>
 80199c6:	1c51      	adds	r1, r2, #1
 80199c8:	084b      	lsrs	r3, r1, #1
 80199ca:	fba5 c303 	umull	ip, r3, r5, r3
 80199ce:	089b      	lsrs	r3, r3, #2
 80199d0:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 80199d4:	fb0c 1313 	mls	r3, ip, r3, r1
 80199d8:	b2d9      	uxtb	r1, r3
 80199da:	4288      	cmp	r0, r1
 80199dc:	f43f af3d 	beq.w	801985a <uxr_read_framed_msg+0x34a>
 80199e0:	3202      	adds	r2, #2
 80199e2:	4423      	add	r3, r4
 80199e4:	0850      	lsrs	r0, r2, #1
 80199e6:	789b      	ldrb	r3, [r3, #2]
 80199e8:	fba5 1000 	umull	r1, r0, r5, r0
 80199ec:	0880      	lsrs	r0, r0, #2
 80199ee:	fb0c 2210 	mls	r2, ip, r0, r2
 80199f2:	2b7e      	cmp	r3, #126	@ 0x7e
 80199f4:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 80199f8:	d016      	beq.n	8019a28 <uxr_read_framed_msg+0x518>
 80199fa:	f083 0120 	eor.w	r1, r3, #32
 80199fe:	e68b      	b.n	8019718 <uxr_read_framed_msg+0x208>
 8019a00:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019a02:	9300      	str	r3, [sp, #0]
 8019a04:	2302      	movs	r3, #2
 8019a06:	9301      	str	r3, [sp, #4]
 8019a08:	464a      	mov	r2, r9
 8019a0a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019a0c:	4641      	mov	r1, r8
 8019a0e:	4620      	mov	r0, r4
 8019a10:	f7ff fcfc 	bl	801940c <uxr_framing_read_transport>
 8019a14:	2800      	cmp	r0, #0
 8019a16:	f47f aef6 	bne.w	8019806 <uxr_read_framed_msg+0x2f6>
 8019a1a:	2301      	movs	r3, #1
 8019a1c:	7023      	strb	r3, [r4, #0]
 8019a1e:	e588      	b.n	8019532 <uxr_read_framed_msg+0x22>
 8019a20:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019a22:	9300      	str	r3, [sp, #0]
 8019a24:	2301      	movs	r3, #1
 8019a26:	e7ee      	b.n	8019a06 <uxr_read_framed_msg+0x4f6>
 8019a28:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019a2a:	9300      	str	r3, [sp, #0]
 8019a2c:	2303      	movs	r3, #3
 8019a2e:	e7ea      	b.n	8019a06 <uxr_read_framed_msg+0x4f6>
 8019a30:	ee17 8a90 	vmov	r8, s15
 8019a34:	e6ae      	b.n	8019794 <uxr_read_framed_msg+0x284>
 8019a36:	bf00      	nop

08019a38 <rcl_get_default_domain_id>:
 8019a38:	b530      	push	{r4, r5, lr}
 8019a3a:	b083      	sub	sp, #12
 8019a3c:	2300      	movs	r3, #0
 8019a3e:	9300      	str	r3, [sp, #0]
 8019a40:	b1d0      	cbz	r0, 8019a78 <rcl_get_default_domain_id+0x40>
 8019a42:	4604      	mov	r4, r0
 8019a44:	4669      	mov	r1, sp
 8019a46:	4815      	ldr	r0, [pc, #84]	@ (8019a9c <rcl_get_default_domain_id+0x64>)
 8019a48:	f7fc fc1e 	bl	8016288 <rcutils_get_env>
 8019a4c:	4602      	mov	r2, r0
 8019a4e:	b110      	cbz	r0, 8019a56 <rcl_get_default_domain_id+0x1e>
 8019a50:	2001      	movs	r0, #1
 8019a52:	b003      	add	sp, #12
 8019a54:	bd30      	pop	{r4, r5, pc}
 8019a56:	9b00      	ldr	r3, [sp, #0]
 8019a58:	b18b      	cbz	r3, 8019a7e <rcl_get_default_domain_id+0x46>
 8019a5a:	7818      	ldrb	r0, [r3, #0]
 8019a5c:	2800      	cmp	r0, #0
 8019a5e:	d0f8      	beq.n	8019a52 <rcl_get_default_domain_id+0x1a>
 8019a60:	a901      	add	r1, sp, #4
 8019a62:	4618      	mov	r0, r3
 8019a64:	9201      	str	r2, [sp, #4]
 8019a66:	f001 fb7f 	bl	801b168 <strtoul>
 8019a6a:	4605      	mov	r5, r0
 8019a6c:	b150      	cbz	r0, 8019a84 <rcl_get_default_domain_id+0x4c>
 8019a6e:	1c43      	adds	r3, r0, #1
 8019a70:	d00d      	beq.n	8019a8e <rcl_get_default_domain_id+0x56>
 8019a72:	6025      	str	r5, [r4, #0]
 8019a74:	2000      	movs	r0, #0
 8019a76:	e7ec      	b.n	8019a52 <rcl_get_default_domain_id+0x1a>
 8019a78:	200b      	movs	r0, #11
 8019a7a:	b003      	add	sp, #12
 8019a7c:	bd30      	pop	{r4, r5, pc}
 8019a7e:	4618      	mov	r0, r3
 8019a80:	b003      	add	sp, #12
 8019a82:	bd30      	pop	{r4, r5, pc}
 8019a84:	9b01      	ldr	r3, [sp, #4]
 8019a86:	781b      	ldrb	r3, [r3, #0]
 8019a88:	2b00      	cmp	r3, #0
 8019a8a:	d0f2      	beq.n	8019a72 <rcl_get_default_domain_id+0x3a>
 8019a8c:	e7e0      	b.n	8019a50 <rcl_get_default_domain_id+0x18>
 8019a8e:	f001 fcd5 	bl	801b43c <__errno>
 8019a92:	6803      	ldr	r3, [r0, #0]
 8019a94:	2b22      	cmp	r3, #34	@ 0x22
 8019a96:	d1ec      	bne.n	8019a72 <rcl_get_default_domain_id+0x3a>
 8019a98:	e7da      	b.n	8019a50 <rcl_get_default_domain_id+0x18>
 8019a9a:	bf00      	nop
 8019a9c:	0801d524 	.word	0x0801d524

08019aa0 <rcl_expand_topic_name>:
 8019aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019aa4:	b08b      	sub	sp, #44	@ 0x2c
 8019aa6:	9306      	str	r3, [sp, #24]
 8019aa8:	2800      	cmp	r0, #0
 8019aaa:	f000 80ad 	beq.w	8019c08 <rcl_expand_topic_name+0x168>
 8019aae:	460e      	mov	r6, r1
 8019ab0:	2900      	cmp	r1, #0
 8019ab2:	f000 80a9 	beq.w	8019c08 <rcl_expand_topic_name+0x168>
 8019ab6:	4617      	mov	r7, r2
 8019ab8:	2a00      	cmp	r2, #0
 8019aba:	f000 80a5 	beq.w	8019c08 <rcl_expand_topic_name+0x168>
 8019abe:	2b00      	cmp	r3, #0
 8019ac0:	f000 80a2 	beq.w	8019c08 <rcl_expand_topic_name+0x168>
 8019ac4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8019ac6:	2b00      	cmp	r3, #0
 8019ac8:	f000 809e 	beq.w	8019c08 <rcl_expand_topic_name+0x168>
 8019acc:	2200      	movs	r2, #0
 8019ace:	a909      	add	r1, sp, #36	@ 0x24
 8019ad0:	4680      	mov	r8, r0
 8019ad2:	f000 f9fb 	bl	8019ecc <rcl_validate_topic_name>
 8019ad6:	4604      	mov	r4, r0
 8019ad8:	2800      	cmp	r0, #0
 8019ada:	f040 8096 	bne.w	8019c0a <rcl_expand_topic_name+0x16a>
 8019ade:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019ae0:	2b00      	cmp	r3, #0
 8019ae2:	f040 809a 	bne.w	8019c1a <rcl_expand_topic_name+0x17a>
 8019ae6:	4602      	mov	r2, r0
 8019ae8:	a909      	add	r1, sp, #36	@ 0x24
 8019aea:	4630      	mov	r0, r6
 8019aec:	f7fd f82a 	bl	8016b44 <rmw_validate_node_name>
 8019af0:	2800      	cmp	r0, #0
 8019af2:	f040 808e 	bne.w	8019c12 <rcl_expand_topic_name+0x172>
 8019af6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019af8:	2a00      	cmp	r2, #0
 8019afa:	f040 8093 	bne.w	8019c24 <rcl_expand_topic_name+0x184>
 8019afe:	a909      	add	r1, sp, #36	@ 0x24
 8019b00:	4638      	mov	r0, r7
 8019b02:	f7fd f801 	bl	8016b08 <rmw_validate_namespace>
 8019b06:	2800      	cmp	r0, #0
 8019b08:	f040 8083 	bne.w	8019c12 <rcl_expand_topic_name+0x172>
 8019b0c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8019b0e:	2c00      	cmp	r4, #0
 8019b10:	f040 80ed 	bne.w	8019cee <rcl_expand_topic_name+0x24e>
 8019b14:	217b      	movs	r1, #123	@ 0x7b
 8019b16:	4640      	mov	r0, r8
 8019b18:	f001 fc4a 	bl	801b3b0 <strchr>
 8019b1c:	f898 3000 	ldrb.w	r3, [r8]
 8019b20:	2b2f      	cmp	r3, #47	@ 0x2f
 8019b22:	4605      	mov	r5, r0
 8019b24:	f000 809e 	beq.w	8019c64 <rcl_expand_topic_name+0x1c4>
 8019b28:	2b7e      	cmp	r3, #126	@ 0x7e
 8019b2a:	f040 80a2 	bne.w	8019c72 <rcl_expand_topic_name+0x1d2>
 8019b2e:	4638      	mov	r0, r7
 8019b30:	f7e6 fb70 	bl	8000214 <strlen>
 8019b34:	4a82      	ldr	r2, [pc, #520]	@ (8019d40 <rcl_expand_topic_name+0x2a0>)
 8019b36:	4b83      	ldr	r3, [pc, #524]	@ (8019d44 <rcl_expand_topic_name+0x2a4>)
 8019b38:	2801      	cmp	r0, #1
 8019b3a:	bf18      	it	ne
 8019b3c:	4613      	movne	r3, r2
 8019b3e:	9302      	str	r3, [sp, #8]
 8019b40:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8019b42:	9300      	str	r3, [sp, #0]
 8019b44:	e9cd 7603 	strd	r7, r6, [sp, #12]
 8019b48:	f108 0301 	add.w	r3, r8, #1
 8019b4c:	9305      	str	r3, [sp, #20]
 8019b4e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8019b52:	9301      	str	r3, [sp, #4]
 8019b54:	ab14      	add	r3, sp, #80	@ 0x50
 8019b56:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8019b58:	f7fc fbbe 	bl	80162d8 <rcutils_format_string_limit>
 8019b5c:	4682      	mov	sl, r0
 8019b5e:	2800      	cmp	r0, #0
 8019b60:	f000 80c7 	beq.w	8019cf2 <rcl_expand_topic_name+0x252>
 8019b64:	2d00      	cmp	r5, #0
 8019b66:	f000 80a2 	beq.w	8019cae <rcl_expand_topic_name+0x20e>
 8019b6a:	217b      	movs	r1, #123	@ 0x7b
 8019b6c:	f001 fc20 	bl	801b3b0 <strchr>
 8019b70:	46d1      	mov	r9, sl
 8019b72:	4605      	mov	r5, r0
 8019b74:	9407      	str	r4, [sp, #28]
 8019b76:	46d3      	mov	fp, sl
 8019b78:	464c      	mov	r4, r9
 8019b7a:	2d00      	cmp	r5, #0
 8019b7c:	f000 80be 	beq.w	8019cfc <rcl_expand_topic_name+0x25c>
 8019b80:	217d      	movs	r1, #125	@ 0x7d
 8019b82:	4620      	mov	r0, r4
 8019b84:	f001 fc14 	bl	801b3b0 <strchr>
 8019b88:	eba0 0905 	sub.w	r9, r0, r5
 8019b8c:	f109 0a01 	add.w	sl, r9, #1
 8019b90:	486d      	ldr	r0, [pc, #436]	@ (8019d48 <rcl_expand_topic_name+0x2a8>)
 8019b92:	4652      	mov	r2, sl
 8019b94:	4629      	mov	r1, r5
 8019b96:	f001 fc18 	bl	801b3ca <strncmp>
 8019b9a:	2800      	cmp	r0, #0
 8019b9c:	d067      	beq.n	8019c6e <rcl_expand_topic_name+0x1ce>
 8019b9e:	486b      	ldr	r0, [pc, #428]	@ (8019d4c <rcl_expand_topic_name+0x2ac>)
 8019ba0:	4652      	mov	r2, sl
 8019ba2:	4629      	mov	r1, r5
 8019ba4:	f001 fc11 	bl	801b3ca <strncmp>
 8019ba8:	b130      	cbz	r0, 8019bb8 <rcl_expand_topic_name+0x118>
 8019baa:	4869      	ldr	r0, [pc, #420]	@ (8019d50 <rcl_expand_topic_name+0x2b0>)
 8019bac:	4652      	mov	r2, sl
 8019bae:	4629      	mov	r1, r5
 8019bb0:	f001 fc0b 	bl	801b3ca <strncmp>
 8019bb4:	2800      	cmp	r0, #0
 8019bb6:	d137      	bne.n	8019c28 <rcl_expand_topic_name+0x188>
 8019bb8:	46b9      	mov	r9, r7
 8019bba:	ab16      	add	r3, sp, #88	@ 0x58
 8019bbc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8019bc0:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8019bc4:	ab14      	add	r3, sp, #80	@ 0x50
 8019bc6:	4628      	mov	r0, r5
 8019bc8:	cb0c      	ldmia	r3, {r2, r3}
 8019bca:	4651      	mov	r1, sl
 8019bcc:	f7fc fcc0 	bl	8016550 <rcutils_strndup>
 8019bd0:	4605      	mov	r5, r0
 8019bd2:	2800      	cmp	r0, #0
 8019bd4:	f000 809c 	beq.w	8019d10 <rcl_expand_topic_name+0x270>
 8019bd8:	464a      	mov	r2, r9
 8019bda:	4620      	mov	r0, r4
 8019bdc:	ab14      	add	r3, sp, #80	@ 0x50
 8019bde:	4629      	mov	r1, r5
 8019be0:	f7fc fbb4 	bl	801634c <rcutils_repl_str>
 8019be4:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8019be6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8019be8:	4604      	mov	r4, r0
 8019bea:	4628      	mov	r0, r5
 8019bec:	4798      	blx	r3
 8019bee:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8019bf0:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8019bf2:	4658      	mov	r0, fp
 8019bf4:	4798      	blx	r3
 8019bf6:	2c00      	cmp	r4, #0
 8019bf8:	d07b      	beq.n	8019cf2 <rcl_expand_topic_name+0x252>
 8019bfa:	217b      	movs	r1, #123	@ 0x7b
 8019bfc:	4620      	mov	r0, r4
 8019bfe:	f001 fbd7 	bl	801b3b0 <strchr>
 8019c02:	46a3      	mov	fp, r4
 8019c04:	4605      	mov	r5, r0
 8019c06:	e7b8      	b.n	8019b7a <rcl_expand_topic_name+0xda>
 8019c08:	240b      	movs	r4, #11
 8019c0a:	4620      	mov	r0, r4
 8019c0c:	b00b      	add	sp, #44	@ 0x2c
 8019c0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019c12:	f7f9 fce7 	bl	80135e4 <rcl_convert_rmw_ret_to_rcl_ret>
 8019c16:	4604      	mov	r4, r0
 8019c18:	e7f7      	b.n	8019c0a <rcl_expand_topic_name+0x16a>
 8019c1a:	2467      	movs	r4, #103	@ 0x67
 8019c1c:	4620      	mov	r0, r4
 8019c1e:	b00b      	add	sp, #44	@ 0x2c
 8019c20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019c24:	24c9      	movs	r4, #201	@ 0xc9
 8019c26:	e7f0      	b.n	8019c0a <rcl_expand_topic_name+0x16a>
 8019c28:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 8019c2c:	9806      	ldr	r0, [sp, #24]
 8019c2e:	1c69      	adds	r1, r5, #1
 8019c30:	f7fc fda8 	bl	8016784 <rcutils_string_map_getn>
 8019c34:	4681      	mov	r9, r0
 8019c36:	2800      	cmp	r0, #0
 8019c38:	d1bf      	bne.n	8019bba <rcl_expand_topic_name+0x11a>
 8019c3a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8019c3c:	aa16      	add	r2, sp, #88	@ 0x58
 8019c3e:	6018      	str	r0, [r3, #0]
 8019c40:	ca07      	ldmia	r2, {r0, r1, r2}
 8019c42:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8019c46:	ab14      	add	r3, sp, #80	@ 0x50
 8019c48:	cb0c      	ldmia	r3, {r2, r3}
 8019c4a:	4651      	mov	r1, sl
 8019c4c:	4628      	mov	r0, r5
 8019c4e:	f7fc fc7f 	bl	8016550 <rcutils_strndup>
 8019c52:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8019c54:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8019c56:	4798      	blx	r3
 8019c58:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8019c5a:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8019c5c:	4658      	mov	r0, fp
 8019c5e:	2469      	movs	r4, #105	@ 0x69
 8019c60:	4798      	blx	r3
 8019c62:	e7d2      	b.n	8019c0a <rcl_expand_topic_name+0x16a>
 8019c64:	2800      	cmp	r0, #0
 8019c66:	d05b      	beq.n	8019d20 <rcl_expand_topic_name+0x280>
 8019c68:	46c1      	mov	r9, r8
 8019c6a:	46a2      	mov	sl, r4
 8019c6c:	e782      	b.n	8019b74 <rcl_expand_topic_name+0xd4>
 8019c6e:	46b1      	mov	r9, r6
 8019c70:	e7a3      	b.n	8019bba <rcl_expand_topic_name+0x11a>
 8019c72:	2800      	cmp	r0, #0
 8019c74:	d1f8      	bne.n	8019c68 <rcl_expand_topic_name+0x1c8>
 8019c76:	4638      	mov	r0, r7
 8019c78:	f7e6 facc 	bl	8000214 <strlen>
 8019c7c:	4a35      	ldr	r2, [pc, #212]	@ (8019d54 <rcl_expand_topic_name+0x2b4>)
 8019c7e:	4b36      	ldr	r3, [pc, #216]	@ (8019d58 <rcl_expand_topic_name+0x2b8>)
 8019c80:	f8cd 8010 	str.w	r8, [sp, #16]
 8019c84:	2801      	cmp	r0, #1
 8019c86:	bf18      	it	ne
 8019c88:	4613      	movne	r3, r2
 8019c8a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8019c8e:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8019c92:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8019c94:	9703      	str	r7, [sp, #12]
 8019c96:	9200      	str	r2, [sp, #0]
 8019c98:	ab14      	add	r3, sp, #80	@ 0x50
 8019c9a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8019c9c:	f7fc fb1c 	bl	80162d8 <rcutils_format_string_limit>
 8019ca0:	4682      	mov	sl, r0
 8019ca2:	4653      	mov	r3, sl
 8019ca4:	b32b      	cbz	r3, 8019cf2 <rcl_expand_topic_name+0x252>
 8019ca6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8019ca8:	f8c3 a000 	str.w	sl, [r3]
 8019cac:	e7ad      	b.n	8019c0a <rcl_expand_topic_name+0x16a>
 8019cae:	f89a 3000 	ldrb.w	r3, [sl]
 8019cb2:	2b2f      	cmp	r3, #47	@ 0x2f
 8019cb4:	d0f7      	beq.n	8019ca6 <rcl_expand_topic_name+0x206>
 8019cb6:	4638      	mov	r0, r7
 8019cb8:	f7e6 faac 	bl	8000214 <strlen>
 8019cbc:	4a25      	ldr	r2, [pc, #148]	@ (8019d54 <rcl_expand_topic_name+0x2b4>)
 8019cbe:	4b26      	ldr	r3, [pc, #152]	@ (8019d58 <rcl_expand_topic_name+0x2b8>)
 8019cc0:	f8cd a010 	str.w	sl, [sp, #16]
 8019cc4:	2801      	cmp	r0, #1
 8019cc6:	bf18      	it	ne
 8019cc8:	4613      	movne	r3, r2
 8019cca:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8019cce:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8019cd2:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8019cd4:	9703      	str	r7, [sp, #12]
 8019cd6:	9200      	str	r2, [sp, #0]
 8019cd8:	ab14      	add	r3, sp, #80	@ 0x50
 8019cda:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8019cdc:	f7fc fafc 	bl	80162d8 <rcutils_format_string_limit>
 8019ce0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8019ce2:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8019ce4:	4605      	mov	r5, r0
 8019ce6:	4650      	mov	r0, sl
 8019ce8:	4798      	blx	r3
 8019cea:	46aa      	mov	sl, r5
 8019cec:	e7d9      	b.n	8019ca2 <rcl_expand_topic_name+0x202>
 8019cee:	24ca      	movs	r4, #202	@ 0xca
 8019cf0:	e78b      	b.n	8019c0a <rcl_expand_topic_name+0x16a>
 8019cf2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8019cf4:	2300      	movs	r3, #0
 8019cf6:	6013      	str	r3, [r2, #0]
 8019cf8:	240a      	movs	r4, #10
 8019cfa:	e786      	b.n	8019c0a <rcl_expand_topic_name+0x16a>
 8019cfc:	465b      	mov	r3, fp
 8019cfe:	9c07      	ldr	r4, [sp, #28]
 8019d00:	46da      	mov	sl, fp
 8019d02:	2b00      	cmp	r3, #0
 8019d04:	d1d3      	bne.n	8019cae <rcl_expand_topic_name+0x20e>
 8019d06:	f898 3000 	ldrb.w	r3, [r8]
 8019d0a:	2b2f      	cmp	r3, #47	@ 0x2f
 8019d0c:	d0cb      	beq.n	8019ca6 <rcl_expand_topic_name+0x206>
 8019d0e:	e7b2      	b.n	8019c76 <rcl_expand_topic_name+0x1d6>
 8019d10:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	@ 0x60
 8019d14:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8019d16:	6015      	str	r5, [r2, #0]
 8019d18:	4658      	mov	r0, fp
 8019d1a:	4798      	blx	r3
 8019d1c:	240a      	movs	r4, #10
 8019d1e:	e774      	b.n	8019c0a <rcl_expand_topic_name+0x16a>
 8019d20:	ab17      	add	r3, sp, #92	@ 0x5c
 8019d22:	e893 0003 	ldmia.w	r3, {r0, r1}
 8019d26:	e88d 0003 	stmia.w	sp, {r0, r1}
 8019d2a:	ab14      	add	r3, sp, #80	@ 0x50
 8019d2c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8019d2e:	4640      	mov	r0, r8
 8019d30:	f7fc fbec 	bl	801650c <rcutils_strdup>
 8019d34:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8019d36:	2800      	cmp	r0, #0
 8019d38:	6018      	str	r0, [r3, #0]
 8019d3a:	bf08      	it	eq
 8019d3c:	240a      	moveq	r4, #10
 8019d3e:	e764      	b.n	8019c0a <rcl_expand_topic_name+0x16a>
 8019d40:	0801d534 	.word	0x0801d534
 8019d44:	0801cbec 	.word	0x0801cbec
 8019d48:	0801d53c 	.word	0x0801d53c
 8019d4c:	0801d544 	.word	0x0801d544
 8019d50:	0801d54c 	.word	0x0801d54c
 8019d54:	0801d108 	.word	0x0801d108
 8019d58:	0801cbfc 	.word	0x0801cbfc

08019d5c <rcl_get_default_topic_name_substitutions>:
 8019d5c:	2800      	cmp	r0, #0
 8019d5e:	bf0c      	ite	eq
 8019d60:	200b      	moveq	r0, #11
 8019d62:	2000      	movne	r0, #0
 8019d64:	4770      	bx	lr
 8019d66:	bf00      	nop

08019d68 <rcl_get_zero_initialized_guard_condition>:
 8019d68:	4a03      	ldr	r2, [pc, #12]	@ (8019d78 <rcl_get_zero_initialized_guard_condition+0x10>)
 8019d6a:	4603      	mov	r3, r0
 8019d6c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019d70:	e883 0003 	stmia.w	r3, {r0, r1}
 8019d74:	4618      	mov	r0, r3
 8019d76:	4770      	bx	lr
 8019d78:	0801dee4 	.word	0x0801dee4

08019d7c <rcl_guard_condition_init_from_rmw>:
 8019d7c:	b082      	sub	sp, #8
 8019d7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019d82:	b086      	sub	sp, #24
 8019d84:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8019d88:	4604      	mov	r4, r0
 8019d8a:	f84c 3f04 	str.w	r3, [ip, #4]!
 8019d8e:	460e      	mov	r6, r1
 8019d90:	4617      	mov	r7, r2
 8019d92:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8019d96:	f10d 0e04 	add.w	lr, sp, #4
 8019d9a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8019d9e:	f8dc 3000 	ldr.w	r3, [ip]
 8019da2:	f8ce 3000 	str.w	r3, [lr]
 8019da6:	a801      	add	r0, sp, #4
 8019da8:	f7f2 ffea 	bl	800cd80 <rcutils_allocator_is_valid>
 8019dac:	b350      	cbz	r0, 8019e04 <rcl_guard_condition_init_from_rmw+0x88>
 8019dae:	b34c      	cbz	r4, 8019e04 <rcl_guard_condition_init_from_rmw+0x88>
 8019db0:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8019db4:	f1b8 0f00 	cmp.w	r8, #0
 8019db8:	d11e      	bne.n	8019df8 <rcl_guard_condition_init_from_rmw+0x7c>
 8019dba:	b31f      	cbz	r7, 8019e04 <rcl_guard_condition_init_from_rmw+0x88>
 8019dbc:	4638      	mov	r0, r7
 8019dbe:	f7f9 fc2f 	bl	8013620 <rcl_context_is_valid>
 8019dc2:	b328      	cbz	r0, 8019e10 <rcl_guard_condition_init_from_rmw+0x94>
 8019dc4:	9b01      	ldr	r3, [sp, #4]
 8019dc6:	9905      	ldr	r1, [sp, #20]
 8019dc8:	201c      	movs	r0, #28
 8019dca:	4798      	blx	r3
 8019dcc:	4605      	mov	r5, r0
 8019dce:	6060      	str	r0, [r4, #4]
 8019dd0:	b358      	cbz	r0, 8019e2a <rcl_guard_condition_init_from_rmw+0xae>
 8019dd2:	b1fe      	cbz	r6, 8019e14 <rcl_guard_condition_init_from_rmw+0x98>
 8019dd4:	6006      	str	r6, [r0, #0]
 8019dd6:	f880 8004 	strb.w	r8, [r0, #4]
 8019dda:	ac01      	add	r4, sp, #4
 8019ddc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019dde:	f105 0c08 	add.w	ip, r5, #8
 8019de2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019de6:	6823      	ldr	r3, [r4, #0]
 8019de8:	f8cc 3000 	str.w	r3, [ip]
 8019dec:	2000      	movs	r0, #0
 8019dee:	b006      	add	sp, #24
 8019df0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019df4:	b002      	add	sp, #8
 8019df6:	4770      	bx	lr
 8019df8:	2064      	movs	r0, #100	@ 0x64
 8019dfa:	b006      	add	sp, #24
 8019dfc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019e00:	b002      	add	sp, #8
 8019e02:	4770      	bx	lr
 8019e04:	200b      	movs	r0, #11
 8019e06:	b006      	add	sp, #24
 8019e08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019e0c:	b002      	add	sp, #8
 8019e0e:	4770      	bx	lr
 8019e10:	2065      	movs	r0, #101	@ 0x65
 8019e12:	e7f2      	b.n	8019dfa <rcl_guard_condition_init_from_rmw+0x7e>
 8019e14:	6838      	ldr	r0, [r7, #0]
 8019e16:	3028      	adds	r0, #40	@ 0x28
 8019e18:	f000 fa3a 	bl	801a290 <rmw_create_guard_condition>
 8019e1c:	6028      	str	r0, [r5, #0]
 8019e1e:	6865      	ldr	r5, [r4, #4]
 8019e20:	682e      	ldr	r6, [r5, #0]
 8019e22:	b126      	cbz	r6, 8019e2e <rcl_guard_condition_init_from_rmw+0xb2>
 8019e24:	2301      	movs	r3, #1
 8019e26:	712b      	strb	r3, [r5, #4]
 8019e28:	e7d7      	b.n	8019dda <rcl_guard_condition_init_from_rmw+0x5e>
 8019e2a:	200a      	movs	r0, #10
 8019e2c:	e7e5      	b.n	8019dfa <rcl_guard_condition_init_from_rmw+0x7e>
 8019e2e:	4628      	mov	r0, r5
 8019e30:	9b02      	ldr	r3, [sp, #8]
 8019e32:	9905      	ldr	r1, [sp, #20]
 8019e34:	4798      	blx	r3
 8019e36:	6066      	str	r6, [r4, #4]
 8019e38:	2001      	movs	r0, #1
 8019e3a:	e7de      	b.n	8019dfa <rcl_guard_condition_init_from_rmw+0x7e>

08019e3c <rcl_guard_condition_fini>:
 8019e3c:	b570      	push	{r4, r5, r6, lr}
 8019e3e:	b082      	sub	sp, #8
 8019e40:	b1f0      	cbz	r0, 8019e80 <rcl_guard_condition_fini+0x44>
 8019e42:	6843      	ldr	r3, [r0, #4]
 8019e44:	4604      	mov	r4, r0
 8019e46:	b163      	cbz	r3, 8019e62 <rcl_guard_condition_fini+0x26>
 8019e48:	6818      	ldr	r0, [r3, #0]
 8019e4a:	68de      	ldr	r6, [r3, #12]
 8019e4c:	6999      	ldr	r1, [r3, #24]
 8019e4e:	b160      	cbz	r0, 8019e6a <rcl_guard_condition_fini+0x2e>
 8019e50:	791d      	ldrb	r5, [r3, #4]
 8019e52:	b965      	cbnz	r5, 8019e6e <rcl_guard_condition_fini+0x32>
 8019e54:	4618      	mov	r0, r3
 8019e56:	47b0      	blx	r6
 8019e58:	2300      	movs	r3, #0
 8019e5a:	4628      	mov	r0, r5
 8019e5c:	6063      	str	r3, [r4, #4]
 8019e5e:	b002      	add	sp, #8
 8019e60:	bd70      	pop	{r4, r5, r6, pc}
 8019e62:	461d      	mov	r5, r3
 8019e64:	4628      	mov	r0, r5
 8019e66:	b002      	add	sp, #8
 8019e68:	bd70      	pop	{r4, r5, r6, pc}
 8019e6a:	4605      	mov	r5, r0
 8019e6c:	e7f2      	b.n	8019e54 <rcl_guard_condition_fini+0x18>
 8019e6e:	9101      	str	r1, [sp, #4]
 8019e70:	f000 fa22 	bl	801a2b8 <rmw_destroy_guard_condition>
 8019e74:	1e05      	subs	r5, r0, #0
 8019e76:	6863      	ldr	r3, [r4, #4]
 8019e78:	9901      	ldr	r1, [sp, #4]
 8019e7a:	bf18      	it	ne
 8019e7c:	2501      	movne	r5, #1
 8019e7e:	e7e9      	b.n	8019e54 <rcl_guard_condition_fini+0x18>
 8019e80:	250b      	movs	r5, #11
 8019e82:	4628      	mov	r0, r5
 8019e84:	b002      	add	sp, #8
 8019e86:	bd70      	pop	{r4, r5, r6, pc}

08019e88 <rcl_guard_condition_get_default_options>:
 8019e88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019e8a:	b087      	sub	sp, #28
 8019e8c:	4606      	mov	r6, r0
 8019e8e:	4668      	mov	r0, sp
 8019e90:	f7f2 ff68 	bl	800cd64 <rcutils_get_default_allocator>
 8019e94:	4b09      	ldr	r3, [pc, #36]	@ (8019ebc <rcl_guard_condition_get_default_options+0x34>)
 8019e96:	46ee      	mov	lr, sp
 8019e98:	469c      	mov	ip, r3
 8019e9a:	461d      	mov	r5, r3
 8019e9c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8019ea0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019ea4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019ea6:	4634      	mov	r4, r6
 8019ea8:	f8de 7000 	ldr.w	r7, [lr]
 8019eac:	f8cc 7000 	str.w	r7, [ip]
 8019eb0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019eb2:	4630      	mov	r0, r6
 8019eb4:	6027      	str	r7, [r4, #0]
 8019eb6:	b007      	add	sp, #28
 8019eb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019eba:	bf00      	nop
 8019ebc:	20015f4c 	.word	0x20015f4c

08019ec0 <rcl_guard_condition_get_rmw_handle>:
 8019ec0:	b110      	cbz	r0, 8019ec8 <rcl_guard_condition_get_rmw_handle+0x8>
 8019ec2:	6840      	ldr	r0, [r0, #4]
 8019ec4:	b100      	cbz	r0, 8019ec8 <rcl_guard_condition_get_rmw_handle+0x8>
 8019ec6:	6800      	ldr	r0, [r0, #0]
 8019ec8:	4770      	bx	lr
 8019eca:	bf00      	nop

08019ecc <rcl_validate_topic_name>:
 8019ecc:	2800      	cmp	r0, #0
 8019ece:	d07a      	beq.n	8019fc6 <rcl_validate_topic_name+0xfa>
 8019ed0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019ed4:	460e      	mov	r6, r1
 8019ed6:	2900      	cmp	r1, #0
 8019ed8:	d07c      	beq.n	8019fd4 <rcl_validate_topic_name+0x108>
 8019eda:	4617      	mov	r7, r2
 8019edc:	4605      	mov	r5, r0
 8019ede:	f7e6 f999 	bl	8000214 <strlen>
 8019ee2:	b1b0      	cbz	r0, 8019f12 <rcl_validate_topic_name+0x46>
 8019ee4:	f895 9000 	ldrb.w	r9, [r5]
 8019ee8:	f8df c180 	ldr.w	ip, [pc, #384]	@ 801a06c <rcl_validate_topic_name+0x1a0>
 8019eec:	f81c 3009 	ldrb.w	r3, [ip, r9]
 8019ef0:	f013 0304 	ands.w	r3, r3, #4
 8019ef4:	d169      	bne.n	8019fca <rcl_validate_topic_name+0xfe>
 8019ef6:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 8019efa:	f815 2008 	ldrb.w	r2, [r5, r8]
 8019efe:	2a2f      	cmp	r2, #47	@ 0x2f
 8019f00:	d10e      	bne.n	8019f20 <rcl_validate_topic_name+0x54>
 8019f02:	2202      	movs	r2, #2
 8019f04:	6032      	str	r2, [r6, #0]
 8019f06:	b36f      	cbz	r7, 8019f64 <rcl_validate_topic_name+0x98>
 8019f08:	f8c7 8000 	str.w	r8, [r7]
 8019f0c:	4618      	mov	r0, r3
 8019f0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019f12:	2301      	movs	r3, #1
 8019f14:	6033      	str	r3, [r6, #0]
 8019f16:	b32f      	cbz	r7, 8019f64 <rcl_validate_topic_name+0x98>
 8019f18:	2000      	movs	r0, #0
 8019f1a:	6038      	str	r0, [r7, #0]
 8019f1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019f20:	f105 3aff 	add.w	sl, r5, #4294967295	@ 0xffffffff
 8019f24:	461c      	mov	r4, r3
 8019f26:	4619      	mov	r1, r3
 8019f28:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8019f2c:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8019f30:	f1be 0f09 	cmp.w	lr, #9
 8019f34:	d919      	bls.n	8019f6a <rcl_validate_topic_name+0x9e>
 8019f36:	f022 0e20 	bic.w	lr, r2, #32
 8019f3a:	f1ae 0e41 	sub.w	lr, lr, #65	@ 0x41
 8019f3e:	f1be 0f19 	cmp.w	lr, #25
 8019f42:	d912      	bls.n	8019f6a <rcl_validate_topic_name+0x9e>
 8019f44:	2a5f      	cmp	r2, #95	@ 0x5f
 8019f46:	d019      	beq.n	8019f7c <rcl_validate_topic_name+0xb0>
 8019f48:	2a2f      	cmp	r2, #47	@ 0x2f
 8019f4a:	d051      	beq.n	8019ff0 <rcl_validate_topic_name+0x124>
 8019f4c:	2a7e      	cmp	r2, #126	@ 0x7e
 8019f4e:	d048      	beq.n	8019fe2 <rcl_validate_topic_name+0x116>
 8019f50:	2a7b      	cmp	r2, #123	@ 0x7b
 8019f52:	d054      	beq.n	8019ffe <rcl_validate_topic_name+0x132>
 8019f54:	2a7d      	cmp	r2, #125	@ 0x7d
 8019f56:	d161      	bne.n	801a01c <rcl_validate_topic_name+0x150>
 8019f58:	2c00      	cmp	r4, #0
 8019f5a:	d155      	bne.n	801a008 <rcl_validate_topic_name+0x13c>
 8019f5c:	2305      	movs	r3, #5
 8019f5e:	6033      	str	r3, [r6, #0]
 8019f60:	b107      	cbz	r7, 8019f64 <rcl_validate_topic_name+0x98>
 8019f62:	6039      	str	r1, [r7, #0]
 8019f64:	2000      	movs	r0, #0
 8019f66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019f6a:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8019f6e:	0752      	lsls	r2, r2, #29
 8019f70:	d504      	bpl.n	8019f7c <rcl_validate_topic_name+0xb0>
 8019f72:	b11c      	cbz	r4, 8019f7c <rcl_validate_topic_name+0xb0>
 8019f74:	b111      	cbz	r1, 8019f7c <rcl_validate_topic_name+0xb0>
 8019f76:	1e4a      	subs	r2, r1, #1
 8019f78:	429a      	cmp	r2, r3
 8019f7a:	d02d      	beq.n	8019fd8 <rcl_validate_topic_name+0x10c>
 8019f7c:	3101      	adds	r1, #1
 8019f7e:	4288      	cmp	r0, r1
 8019f80:	d1d2      	bne.n	8019f28 <rcl_validate_topic_name+0x5c>
 8019f82:	2c00      	cmp	r4, #0
 8019f84:	d145      	bne.n	801a012 <rcl_validate_topic_name+0x146>
 8019f86:	f1b9 0f7e 	cmp.w	r9, #126	@ 0x7e
 8019f8a:	d04f      	beq.n	801a02c <rcl_validate_topic_name+0x160>
 8019f8c:	4620      	mov	r0, r4
 8019f8e:	2301      	movs	r3, #1
 8019f90:	e006      	b.n	8019fa0 <rcl_validate_topic_name+0xd4>
 8019f92:	428b      	cmp	r3, r1
 8019f94:	f105 0501 	add.w	r5, r5, #1
 8019f98:	f103 0201 	add.w	r2, r3, #1
 8019f9c:	d236      	bcs.n	801a00c <rcl_validate_topic_name+0x140>
 8019f9e:	4613      	mov	r3, r2
 8019fa0:	4580      	cmp	r8, r0
 8019fa2:	f100 0001 	add.w	r0, r0, #1
 8019fa6:	d0f4      	beq.n	8019f92 <rcl_validate_topic_name+0xc6>
 8019fa8:	782a      	ldrb	r2, [r5, #0]
 8019faa:	2a2f      	cmp	r2, #47	@ 0x2f
 8019fac:	d1f1      	bne.n	8019f92 <rcl_validate_topic_name+0xc6>
 8019fae:	786a      	ldrb	r2, [r5, #1]
 8019fb0:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8019fb4:	0754      	lsls	r4, r2, #29
 8019fb6:	d5ec      	bpl.n	8019f92 <rcl_validate_topic_name+0xc6>
 8019fb8:	2204      	movs	r2, #4
 8019fba:	6032      	str	r2, [r6, #0]
 8019fbc:	2f00      	cmp	r7, #0
 8019fbe:	d0d1      	beq.n	8019f64 <rcl_validate_topic_name+0x98>
 8019fc0:	603b      	str	r3, [r7, #0]
 8019fc2:	2000      	movs	r0, #0
 8019fc4:	e7aa      	b.n	8019f1c <rcl_validate_topic_name+0x50>
 8019fc6:	200b      	movs	r0, #11
 8019fc8:	4770      	bx	lr
 8019fca:	2304      	movs	r3, #4
 8019fcc:	6033      	str	r3, [r6, #0]
 8019fce:	2f00      	cmp	r7, #0
 8019fd0:	d1a2      	bne.n	8019f18 <rcl_validate_topic_name+0x4c>
 8019fd2:	e7c7      	b.n	8019f64 <rcl_validate_topic_name+0x98>
 8019fd4:	200b      	movs	r0, #11
 8019fd6:	e7a1      	b.n	8019f1c <rcl_validate_topic_name+0x50>
 8019fd8:	2309      	movs	r3, #9
 8019fda:	6033      	str	r3, [r6, #0]
 8019fdc:	2f00      	cmp	r7, #0
 8019fde:	d1c0      	bne.n	8019f62 <rcl_validate_topic_name+0x96>
 8019fe0:	e7c0      	b.n	8019f64 <rcl_validate_topic_name+0x98>
 8019fe2:	2900      	cmp	r1, #0
 8019fe4:	d0ca      	beq.n	8019f7c <rcl_validate_topic_name+0xb0>
 8019fe6:	2306      	movs	r3, #6
 8019fe8:	6033      	str	r3, [r6, #0]
 8019fea:	2f00      	cmp	r7, #0
 8019fec:	d1b9      	bne.n	8019f62 <rcl_validate_topic_name+0x96>
 8019fee:	e7b9      	b.n	8019f64 <rcl_validate_topic_name+0x98>
 8019ff0:	2c00      	cmp	r4, #0
 8019ff2:	d0c3      	beq.n	8019f7c <rcl_validate_topic_name+0xb0>
 8019ff4:	2308      	movs	r3, #8
 8019ff6:	6033      	str	r3, [r6, #0]
 8019ff8:	2f00      	cmp	r7, #0
 8019ffa:	d1b2      	bne.n	8019f62 <rcl_validate_topic_name+0x96>
 8019ffc:	e7b2      	b.n	8019f64 <rcl_validate_topic_name+0x98>
 8019ffe:	2c00      	cmp	r4, #0
 801a000:	d1f8      	bne.n	8019ff4 <rcl_validate_topic_name+0x128>
 801a002:	460b      	mov	r3, r1
 801a004:	2401      	movs	r4, #1
 801a006:	e7b9      	b.n	8019f7c <rcl_validate_topic_name+0xb0>
 801a008:	2400      	movs	r4, #0
 801a00a:	e7b7      	b.n	8019f7c <rcl_validate_topic_name+0xb0>
 801a00c:	2000      	movs	r0, #0
 801a00e:	6030      	str	r0, [r6, #0]
 801a010:	e784      	b.n	8019f1c <rcl_validate_topic_name+0x50>
 801a012:	2205      	movs	r2, #5
 801a014:	6032      	str	r2, [r6, #0]
 801a016:	2f00      	cmp	r7, #0
 801a018:	d1d2      	bne.n	8019fc0 <rcl_validate_topic_name+0xf4>
 801a01a:	e7a3      	b.n	8019f64 <rcl_validate_topic_name+0x98>
 801a01c:	2c00      	cmp	r4, #0
 801a01e:	bf14      	ite	ne
 801a020:	2308      	movne	r3, #8
 801a022:	2303      	moveq	r3, #3
 801a024:	6033      	str	r3, [r6, #0]
 801a026:	2f00      	cmp	r7, #0
 801a028:	d19b      	bne.n	8019f62 <rcl_validate_topic_name+0x96>
 801a02a:	e79b      	b.n	8019f64 <rcl_validate_topic_name+0x98>
 801a02c:	2301      	movs	r3, #1
 801a02e:	e00a      	b.n	801a046 <rcl_validate_topic_name+0x17a>
 801a030:	2c01      	cmp	r4, #1
 801a032:	d013      	beq.n	801a05c <rcl_validate_topic_name+0x190>
 801a034:	4299      	cmp	r1, r3
 801a036:	f104 0401 	add.w	r4, r4, #1
 801a03a:	f105 0501 	add.w	r5, r5, #1
 801a03e:	f103 0201 	add.w	r2, r3, #1
 801a042:	d9e3      	bls.n	801a00c <rcl_validate_topic_name+0x140>
 801a044:	4613      	mov	r3, r2
 801a046:	45a0      	cmp	r8, r4
 801a048:	d0f4      	beq.n	801a034 <rcl_validate_topic_name+0x168>
 801a04a:	782a      	ldrb	r2, [r5, #0]
 801a04c:	2a2f      	cmp	r2, #47	@ 0x2f
 801a04e:	d1ef      	bne.n	801a030 <rcl_validate_topic_name+0x164>
 801a050:	786a      	ldrb	r2, [r5, #1]
 801a052:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801a056:	0752      	lsls	r2, r2, #29
 801a058:	d5ec      	bpl.n	801a034 <rcl_validate_topic_name+0x168>
 801a05a:	e7ad      	b.n	8019fb8 <rcl_validate_topic_name+0xec>
 801a05c:	2307      	movs	r3, #7
 801a05e:	6033      	str	r3, [r6, #0]
 801a060:	2f00      	cmp	r7, #0
 801a062:	f43f af7f 	beq.w	8019f64 <rcl_validate_topic_name+0x98>
 801a066:	603c      	str	r4, [r7, #0]
 801a068:	2000      	movs	r0, #0
 801a06a:	e757      	b.n	8019f1c <rcl_validate_topic_name+0x50>
 801a06c:	0801e041 	.word	0x0801e041

0801a070 <rcutils_string_array_fini>:
 801a070:	b320      	cbz	r0, 801a0bc <rcutils_string_array_fini+0x4c>
 801a072:	b570      	push	{r4, r5, r6, lr}
 801a074:	4604      	mov	r4, r0
 801a076:	6840      	ldr	r0, [r0, #4]
 801a078:	b1d8      	cbz	r0, 801a0b2 <rcutils_string_array_fini+0x42>
 801a07a:	f104 0008 	add.w	r0, r4, #8
 801a07e:	f7f2 fe7f 	bl	800cd80 <rcutils_allocator_is_valid>
 801a082:	b1b8      	cbz	r0, 801a0b4 <rcutils_string_array_fini+0x44>
 801a084:	6823      	ldr	r3, [r4, #0]
 801a086:	b1bb      	cbz	r3, 801a0b8 <rcutils_string_array_fini+0x48>
 801a088:	2500      	movs	r5, #0
 801a08a:	6860      	ldr	r0, [r4, #4]
 801a08c:	462e      	mov	r6, r5
 801a08e:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 801a092:	68e3      	ldr	r3, [r4, #12]
 801a094:	69a1      	ldr	r1, [r4, #24]
 801a096:	4798      	blx	r3
 801a098:	e9d4 3000 	ldrd	r3, r0, [r4]
 801a09c:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 801a0a0:	3501      	adds	r5, #1
 801a0a2:	429d      	cmp	r5, r3
 801a0a4:	d3f3      	bcc.n	801a08e <rcutils_string_array_fini+0x1e>
 801a0a6:	68e3      	ldr	r3, [r4, #12]
 801a0a8:	69a1      	ldr	r1, [r4, #24]
 801a0aa:	4798      	blx	r3
 801a0ac:	2000      	movs	r0, #0
 801a0ae:	e9c4 0000 	strd	r0, r0, [r4]
 801a0b2:	bd70      	pop	{r4, r5, r6, pc}
 801a0b4:	200b      	movs	r0, #11
 801a0b6:	bd70      	pop	{r4, r5, r6, pc}
 801a0b8:	6860      	ldr	r0, [r4, #4]
 801a0ba:	e7f4      	b.n	801a0a6 <rcutils_string_array_fini+0x36>
 801a0bc:	200b      	movs	r0, #11
 801a0be:	4770      	bx	lr

0801a0c0 <on_status>:
 801a0c0:	b082      	sub	sp, #8
 801a0c2:	b002      	add	sp, #8
 801a0c4:	4770      	bx	lr
 801a0c6:	bf00      	nop

0801a0c8 <on_topic>:
 801a0c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a0cc:	4a22      	ldr	r2, [pc, #136]	@ (801a158 <on_topic+0x90>)
 801a0ce:	b094      	sub	sp, #80	@ 0x50
 801a0d0:	6812      	ldr	r2, [r2, #0]
 801a0d2:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 801a0d4:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 801a0d8:	e9cd 3112 	strd	r3, r1, [sp, #72]	@ 0x48
 801a0dc:	b3c2      	cbz	r2, 801a150 <on_topic+0x88>
 801a0de:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 801a0e2:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 801a0e6:	e001      	b.n	801a0ec <on_topic+0x24>
 801a0e8:	6852      	ldr	r2, [r2, #4]
 801a0ea:	b38a      	cbz	r2, 801a150 <on_topic+0x88>
 801a0ec:	6894      	ldr	r4, [r2, #8]
 801a0ee:	8aa3      	ldrh	r3, [r4, #20]
 801a0f0:	428b      	cmp	r3, r1
 801a0f2:	d1f9      	bne.n	801a0e8 <on_topic+0x20>
 801a0f4:	7da3      	ldrb	r3, [r4, #22]
 801a0f6:	4283      	cmp	r3, r0
 801a0f8:	d1f6      	bne.n	801a0e8 <on_topic+0x20>
 801a0fa:	2248      	movs	r2, #72	@ 0x48
 801a0fc:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 801a100:	4668      	mov	r0, sp
 801a102:	f001 f9d0 	bl	801b4a6 <memcpy>
 801a106:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 801a10a:	cb0c      	ldmia	r3, {r2, r3}
 801a10c:	4620      	mov	r0, r4
 801a10e:	f7f3 fa67 	bl	800d5e0 <rmw_uxrce_get_static_input_buffer_for_entity>
 801a112:	4607      	mov	r7, r0
 801a114:	b1e0      	cbz	r0, 801a150 <on_topic+0x88>
 801a116:	f8d0 8008 	ldr.w	r8, [r0, #8]
 801a11a:	4632      	mov	r2, r6
 801a11c:	4628      	mov	r0, r5
 801a11e:	f108 0110 	add.w	r1, r8, #16
 801a122:	f7f4 fb59 	bl	800e7d8 <ucdr_deserialize_array_uint8_t>
 801a126:	b930      	cbnz	r0, 801a136 <on_topic+0x6e>
 801a128:	480c      	ldr	r0, [pc, #48]	@ (801a15c <on_topic+0x94>)
 801a12a:	4639      	mov	r1, r7
 801a12c:	b014      	add	sp, #80	@ 0x50
 801a12e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a132:	f7fc bd75 	b.w	8016c20 <put_memory>
 801a136:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 801a13a:	f8c8 6810 	str.w	r6, [r8, #2064]	@ 0x810
 801a13e:	f7fd ff8f 	bl	8018060 <rmw_uros_epoch_nanos>
 801a142:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 801a146:	2305      	movs	r3, #5
 801a148:	e942 0102 	strd	r0, r1, [r2, #-8]
 801a14c:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 801a150:	b014      	add	sp, #80	@ 0x50
 801a152:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a156:	bf00      	nop
 801a158:	20015c04 	.word	0x20015c04
 801a15c:	20015bf4 	.word	0x20015bf4

0801a160 <on_request>:
 801a160:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a164:	4823      	ldr	r0, [pc, #140]	@ (801a1f4 <on_request+0x94>)
 801a166:	b094      	sub	sp, #80	@ 0x50
 801a168:	6800      	ldr	r0, [r0, #0]
 801a16a:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 801a16c:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 801a170:	9113      	str	r1, [sp, #76]	@ 0x4c
 801a172:	2800      	cmp	r0, #0
 801a174:	d03b      	beq.n	801a1ee <on_request+0x8e>
 801a176:	461d      	mov	r5, r3
 801a178:	e001      	b.n	801a17e <on_request+0x1e>
 801a17a:	6840      	ldr	r0, [r0, #4]
 801a17c:	b3b8      	cbz	r0, 801a1ee <on_request+0x8e>
 801a17e:	6884      	ldr	r4, [r0, #8]
 801a180:	8b21      	ldrh	r1, [r4, #24]
 801a182:	4291      	cmp	r1, r2
 801a184:	d1f9      	bne.n	801a17a <on_request+0x1a>
 801a186:	2248      	movs	r2, #72	@ 0x48
 801a188:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 801a18c:	4668      	mov	r0, sp
 801a18e:	f001 f98a 	bl	801b4a6 <memcpy>
 801a192:	f104 0320 	add.w	r3, r4, #32
 801a196:	cb0c      	ldmia	r3, {r2, r3}
 801a198:	4620      	mov	r0, r4
 801a19a:	f7f3 fa21 	bl	800d5e0 <rmw_uxrce_get_static_input_buffer_for_entity>
 801a19e:	4680      	mov	r8, r0
 801a1a0:	b328      	cbz	r0, 801a1ee <on_request+0x8e>
 801a1a2:	4638      	mov	r0, r7
 801a1a4:	f8d8 7008 	ldr.w	r7, [r8, #8]
 801a1a8:	4632      	mov	r2, r6
 801a1aa:	f107 0110 	add.w	r1, r7, #16
 801a1ae:	f7f4 fb13 	bl	800e7d8 <ucdr_deserialize_array_uint8_t>
 801a1b2:	b930      	cbnz	r0, 801a1c2 <on_request+0x62>
 801a1b4:	4810      	ldr	r0, [pc, #64]	@ (801a1f8 <on_request+0x98>)
 801a1b6:	4641      	mov	r1, r8
 801a1b8:	b014      	add	sp, #80	@ 0x50
 801a1ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a1be:	f7fc bd2f 	b.w	8016c20 <put_memory>
 801a1c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a1c4:	f607 0c28 	addw	ip, r7, #2088	@ 0x828
 801a1c8:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 801a1cc:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 801a1d0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a1d4:	e895 0003 	ldmia.w	r5, {r0, r1}
 801a1d8:	e88c 0003 	stmia.w	ip, {r0, r1}
 801a1dc:	f7fd ff40 	bl	8018060 <rmw_uros_epoch_nanos>
 801a1e0:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 801a1e4:	2303      	movs	r3, #3
 801a1e6:	e942 0102 	strd	r0, r1, [r2, #-8]
 801a1ea:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 801a1ee:	b014      	add	sp, #80	@ 0x50
 801a1f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a1f4:	20015bd4 	.word	0x20015bd4
 801a1f8:	20015bf4 	.word	0x20015bf4

0801a1fc <on_reply>:
 801a1fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a200:	4821      	ldr	r0, [pc, #132]	@ (801a288 <on_reply+0x8c>)
 801a202:	b094      	sub	sp, #80	@ 0x50
 801a204:	6800      	ldr	r0, [r0, #0]
 801a206:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 801a208:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 801a20c:	9113      	str	r1, [sp, #76]	@ 0x4c
 801a20e:	b3b8      	cbz	r0, 801a280 <on_reply+0x84>
 801a210:	461d      	mov	r5, r3
 801a212:	e001      	b.n	801a218 <on_reply+0x1c>
 801a214:	6840      	ldr	r0, [r0, #4]
 801a216:	b398      	cbz	r0, 801a280 <on_reply+0x84>
 801a218:	6884      	ldr	r4, [r0, #8]
 801a21a:	8b21      	ldrh	r1, [r4, #24]
 801a21c:	4291      	cmp	r1, r2
 801a21e:	d1f9      	bne.n	801a214 <on_reply+0x18>
 801a220:	2248      	movs	r2, #72	@ 0x48
 801a222:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 801a226:	4668      	mov	r0, sp
 801a228:	f001 f93d 	bl	801b4a6 <memcpy>
 801a22c:	f104 0320 	add.w	r3, r4, #32
 801a230:	cb0c      	ldmia	r3, {r2, r3}
 801a232:	4620      	mov	r0, r4
 801a234:	f7f3 f9d4 	bl	800d5e0 <rmw_uxrce_get_static_input_buffer_for_entity>
 801a238:	4680      	mov	r8, r0
 801a23a:	b308      	cbz	r0, 801a280 <on_reply+0x84>
 801a23c:	4638      	mov	r0, r7
 801a23e:	f8d8 7008 	ldr.w	r7, [r8, #8]
 801a242:	4632      	mov	r2, r6
 801a244:	f107 0110 	add.w	r1, r7, #16
 801a248:	f7f4 fac6 	bl	800e7d8 <ucdr_deserialize_array_uint8_t>
 801a24c:	b930      	cbnz	r0, 801a25c <on_reply+0x60>
 801a24e:	480f      	ldr	r0, [pc, #60]	@ (801a28c <on_reply+0x90>)
 801a250:	4641      	mov	r1, r8
 801a252:	b014      	add	sp, #80	@ 0x50
 801a254:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a258:	f7fc bce2 	b.w	8016c20 <put_memory>
 801a25c:	2200      	movs	r2, #0
 801a25e:	f8c7 282c 	str.w	r2, [r7, #2092]	@ 0x82c
 801a262:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 801a266:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 801a26a:	f8c7 5828 	str.w	r5, [r7, #2088]	@ 0x828
 801a26e:	f7fd fef7 	bl	8018060 <rmw_uros_epoch_nanos>
 801a272:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 801a276:	2304      	movs	r3, #4
 801a278:	e942 0102 	strd	r0, r1, [r2, #-8]
 801a27c:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 801a280:	b014      	add	sp, #80	@ 0x50
 801a282:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a286:	bf00      	nop
 801a288:	20010e38 	.word	0x20010e38
 801a28c:	20015bf4 	.word	0x20015bf4

0801a290 <rmw_create_guard_condition>:
 801a290:	b538      	push	{r3, r4, r5, lr}
 801a292:	4605      	mov	r5, r0
 801a294:	4807      	ldr	r0, [pc, #28]	@ (801a2b4 <rmw_create_guard_condition+0x24>)
 801a296:	f7fc fcb3 	bl	8016c00 <get_memory>
 801a29a:	b148      	cbz	r0, 801a2b0 <rmw_create_guard_condition+0x20>
 801a29c:	6884      	ldr	r4, [r0, #8]
 801a29e:	2300      	movs	r3, #0
 801a2a0:	7423      	strb	r3, [r4, #16]
 801a2a2:	61e5      	str	r5, [r4, #28]
 801a2a4:	f7fc fd14 	bl	8016cd0 <rmw_get_implementation_identifier>
 801a2a8:	e9c4 0405 	strd	r0, r4, [r4, #20]
 801a2ac:	f104 0014 	add.w	r0, r4, #20
 801a2b0:	bd38      	pop	{r3, r4, r5, pc}
 801a2b2:	bf00      	nop
 801a2b4:	20015b94 	.word	0x20015b94

0801a2b8 <rmw_destroy_guard_condition>:
 801a2b8:	b508      	push	{r3, lr}
 801a2ba:	4b08      	ldr	r3, [pc, #32]	@ (801a2dc <rmw_destroy_guard_condition+0x24>)
 801a2bc:	6819      	ldr	r1, [r3, #0]
 801a2be:	b911      	cbnz	r1, 801a2c6 <rmw_destroy_guard_condition+0xe>
 801a2c0:	e00a      	b.n	801a2d8 <rmw_destroy_guard_condition+0x20>
 801a2c2:	6849      	ldr	r1, [r1, #4]
 801a2c4:	b141      	cbz	r1, 801a2d8 <rmw_destroy_guard_condition+0x20>
 801a2c6:	688b      	ldr	r3, [r1, #8]
 801a2c8:	3314      	adds	r3, #20
 801a2ca:	4298      	cmp	r0, r3
 801a2cc:	d1f9      	bne.n	801a2c2 <rmw_destroy_guard_condition+0xa>
 801a2ce:	4803      	ldr	r0, [pc, #12]	@ (801a2dc <rmw_destroy_guard_condition+0x24>)
 801a2d0:	f7fc fca6 	bl	8016c20 <put_memory>
 801a2d4:	2000      	movs	r0, #0
 801a2d6:	bd08      	pop	{r3, pc}
 801a2d8:	2001      	movs	r0, #1
 801a2da:	bd08      	pop	{r3, pc}
 801a2dc:	20015b94 	.word	0x20015b94

0801a2e0 <rosidl_runtime_c__String__init>:
 801a2e0:	b510      	push	{r4, lr}
 801a2e2:	4604      	mov	r4, r0
 801a2e4:	b086      	sub	sp, #24
 801a2e6:	b170      	cbz	r0, 801a306 <rosidl_runtime_c__String__init+0x26>
 801a2e8:	a801      	add	r0, sp, #4
 801a2ea:	f7f2 fd3b 	bl	800cd64 <rcutils_get_default_allocator>
 801a2ee:	9b01      	ldr	r3, [sp, #4]
 801a2f0:	9905      	ldr	r1, [sp, #20]
 801a2f2:	2001      	movs	r0, #1
 801a2f4:	4798      	blx	r3
 801a2f6:	6020      	str	r0, [r4, #0]
 801a2f8:	b128      	cbz	r0, 801a306 <rosidl_runtime_c__String__init+0x26>
 801a2fa:	2100      	movs	r1, #0
 801a2fc:	2201      	movs	r2, #1
 801a2fe:	7001      	strb	r1, [r0, #0]
 801a300:	e9c4 1201 	strd	r1, r2, [r4, #4]
 801a304:	4610      	mov	r0, r2
 801a306:	b006      	add	sp, #24
 801a308:	bd10      	pop	{r4, pc}
 801a30a:	bf00      	nop

0801a30c <rosidl_runtime_c__String__fini>:
 801a30c:	b320      	cbz	r0, 801a358 <rosidl_runtime_c__String__fini+0x4c>
 801a30e:	b510      	push	{r4, lr}
 801a310:	6803      	ldr	r3, [r0, #0]
 801a312:	b086      	sub	sp, #24
 801a314:	4604      	mov	r4, r0
 801a316:	b173      	cbz	r3, 801a336 <rosidl_runtime_c__String__fini+0x2a>
 801a318:	6883      	ldr	r3, [r0, #8]
 801a31a:	b1f3      	cbz	r3, 801a35a <rosidl_runtime_c__String__fini+0x4e>
 801a31c:	a801      	add	r0, sp, #4
 801a31e:	f7f2 fd21 	bl	800cd64 <rcutils_get_default_allocator>
 801a322:	9b02      	ldr	r3, [sp, #8]
 801a324:	9905      	ldr	r1, [sp, #20]
 801a326:	6820      	ldr	r0, [r4, #0]
 801a328:	4798      	blx	r3
 801a32a:	2300      	movs	r3, #0
 801a32c:	e9c4 3300 	strd	r3, r3, [r4]
 801a330:	60a3      	str	r3, [r4, #8]
 801a332:	b006      	add	sp, #24
 801a334:	bd10      	pop	{r4, pc}
 801a336:	6843      	ldr	r3, [r0, #4]
 801a338:	b9db      	cbnz	r3, 801a372 <rosidl_runtime_c__String__fini+0x66>
 801a33a:	6883      	ldr	r3, [r0, #8]
 801a33c:	2b00      	cmp	r3, #0
 801a33e:	d0f8      	beq.n	801a332 <rosidl_runtime_c__String__fini+0x26>
 801a340:	4b12      	ldr	r3, [pc, #72]	@ (801a38c <rosidl_runtime_c__String__fini+0x80>)
 801a342:	4813      	ldr	r0, [pc, #76]	@ (801a390 <rosidl_runtime_c__String__fini+0x84>)
 801a344:	681b      	ldr	r3, [r3, #0]
 801a346:	2251      	movs	r2, #81	@ 0x51
 801a348:	68db      	ldr	r3, [r3, #12]
 801a34a:	2101      	movs	r1, #1
 801a34c:	f000 ff80 	bl	801b250 <fwrite>
 801a350:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a354:	f000 fbca 	bl	801aaec <exit>
 801a358:	4770      	bx	lr
 801a35a:	4b0c      	ldr	r3, [pc, #48]	@ (801a38c <rosidl_runtime_c__String__fini+0x80>)
 801a35c:	480d      	ldr	r0, [pc, #52]	@ (801a394 <rosidl_runtime_c__String__fini+0x88>)
 801a35e:	681b      	ldr	r3, [r3, #0]
 801a360:	224c      	movs	r2, #76	@ 0x4c
 801a362:	68db      	ldr	r3, [r3, #12]
 801a364:	2101      	movs	r1, #1
 801a366:	f000 ff73 	bl	801b250 <fwrite>
 801a36a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a36e:	f000 fbbd 	bl	801aaec <exit>
 801a372:	4b06      	ldr	r3, [pc, #24]	@ (801a38c <rosidl_runtime_c__String__fini+0x80>)
 801a374:	4808      	ldr	r0, [pc, #32]	@ (801a398 <rosidl_runtime_c__String__fini+0x8c>)
 801a376:	681b      	ldr	r3, [r3, #0]
 801a378:	224e      	movs	r2, #78	@ 0x4e
 801a37a:	68db      	ldr	r3, [r3, #12]
 801a37c:	2101      	movs	r1, #1
 801a37e:	f000 ff67 	bl	801b250 <fwrite>
 801a382:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a386:	f000 fbb1 	bl	801aaec <exit>
 801a38a:	bf00      	nop
 801a38c:	20000a7c 	.word	0x20000a7c
 801a390:	0801d5f8 	.word	0x0801d5f8
 801a394:	0801d558 	.word	0x0801d558
 801a398:	0801d5a8 	.word	0x0801d5a8

0801a39c <asinf>:
 801a39c:	b508      	push	{r3, lr}
 801a39e:	ed2d 8b02 	vpush	{d8}
 801a3a2:	eeb0 8a40 	vmov.f32	s16, s0
 801a3a6:	f000 fa9d 	bl	801a8e4 <__ieee754_asinf>
 801a3aa:	eeb4 8a48 	vcmp.f32	s16, s16
 801a3ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a3b2:	eef0 8a40 	vmov.f32	s17, s0
 801a3b6:	d615      	bvs.n	801a3e4 <asinf+0x48>
 801a3b8:	eeb0 0a48 	vmov.f32	s0, s16
 801a3bc:	f000 f8e2 	bl	801a584 <fabsf>
 801a3c0:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801a3c4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801a3c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a3cc:	dd0a      	ble.n	801a3e4 <asinf+0x48>
 801a3ce:	f001 f835 	bl	801b43c <__errno>
 801a3d2:	ecbd 8b02 	vpop	{d8}
 801a3d6:	2321      	movs	r3, #33	@ 0x21
 801a3d8:	6003      	str	r3, [r0, #0]
 801a3da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801a3de:	4804      	ldr	r0, [pc, #16]	@ (801a3f0 <asinf+0x54>)
 801a3e0:	f000 ba7a 	b.w	801a8d8 <nanf>
 801a3e4:	eeb0 0a68 	vmov.f32	s0, s17
 801a3e8:	ecbd 8b02 	vpop	{d8}
 801a3ec:	bd08      	pop	{r3, pc}
 801a3ee:	bf00      	nop
 801a3f0:	0801df96 	.word	0x0801df96

0801a3f4 <atan2>:
 801a3f4:	f000 b800 	b.w	801a3f8 <__ieee754_atan2>

0801a3f8 <__ieee754_atan2>:
 801a3f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a3fc:	ec57 6b11 	vmov	r6, r7, d1
 801a400:	4273      	negs	r3, r6
 801a402:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 801a580 <__ieee754_atan2+0x188>
 801a406:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 801a40a:	4333      	orrs	r3, r6
 801a40c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 801a410:	4543      	cmp	r3, r8
 801a412:	ec51 0b10 	vmov	r0, r1, d0
 801a416:	4635      	mov	r5, r6
 801a418:	d809      	bhi.n	801a42e <__ieee754_atan2+0x36>
 801a41a:	4244      	negs	r4, r0
 801a41c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801a420:	4304      	orrs	r4, r0
 801a422:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 801a426:	4544      	cmp	r4, r8
 801a428:	468e      	mov	lr, r1
 801a42a:	4681      	mov	r9, r0
 801a42c:	d907      	bls.n	801a43e <__ieee754_atan2+0x46>
 801a42e:	4632      	mov	r2, r6
 801a430:	463b      	mov	r3, r7
 801a432:	f7e5 ff53 	bl	80002dc <__adddf3>
 801a436:	ec41 0b10 	vmov	d0, r0, r1
 801a43a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a43e:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 801a442:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 801a446:	4334      	orrs	r4, r6
 801a448:	d103      	bne.n	801a452 <__ieee754_atan2+0x5a>
 801a44a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a44e:	f000 b8a3 	b.w	801a598 <atan>
 801a452:	17bc      	asrs	r4, r7, #30
 801a454:	f004 0402 	and.w	r4, r4, #2
 801a458:	ea53 0909 	orrs.w	r9, r3, r9
 801a45c:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 801a460:	d107      	bne.n	801a472 <__ieee754_atan2+0x7a>
 801a462:	2c02      	cmp	r4, #2
 801a464:	d05f      	beq.n	801a526 <__ieee754_atan2+0x12e>
 801a466:	2c03      	cmp	r4, #3
 801a468:	d1e5      	bne.n	801a436 <__ieee754_atan2+0x3e>
 801a46a:	a143      	add	r1, pc, #268	@ (adr r1, 801a578 <__ieee754_atan2+0x180>)
 801a46c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a470:	e7e1      	b.n	801a436 <__ieee754_atan2+0x3e>
 801a472:	4315      	orrs	r5, r2
 801a474:	d106      	bne.n	801a484 <__ieee754_atan2+0x8c>
 801a476:	f1be 0f00 	cmp.w	lr, #0
 801a47a:	db5f      	blt.n	801a53c <__ieee754_atan2+0x144>
 801a47c:	a136      	add	r1, pc, #216	@ (adr r1, 801a558 <__ieee754_atan2+0x160>)
 801a47e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a482:	e7d8      	b.n	801a436 <__ieee754_atan2+0x3e>
 801a484:	4542      	cmp	r2, r8
 801a486:	d10f      	bne.n	801a4a8 <__ieee754_atan2+0xb0>
 801a488:	4293      	cmp	r3, r2
 801a48a:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 801a48e:	d107      	bne.n	801a4a0 <__ieee754_atan2+0xa8>
 801a490:	2c02      	cmp	r4, #2
 801a492:	d84c      	bhi.n	801a52e <__ieee754_atan2+0x136>
 801a494:	4b36      	ldr	r3, [pc, #216]	@ (801a570 <__ieee754_atan2+0x178>)
 801a496:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801a49a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801a49e:	e7ca      	b.n	801a436 <__ieee754_atan2+0x3e>
 801a4a0:	2c02      	cmp	r4, #2
 801a4a2:	d848      	bhi.n	801a536 <__ieee754_atan2+0x13e>
 801a4a4:	4b33      	ldr	r3, [pc, #204]	@ (801a574 <__ieee754_atan2+0x17c>)
 801a4a6:	e7f6      	b.n	801a496 <__ieee754_atan2+0x9e>
 801a4a8:	4543      	cmp	r3, r8
 801a4aa:	d0e4      	beq.n	801a476 <__ieee754_atan2+0x7e>
 801a4ac:	1a9b      	subs	r3, r3, r2
 801a4ae:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 801a4b2:	ea4f 5223 	mov.w	r2, r3, asr #20
 801a4b6:	da1e      	bge.n	801a4f6 <__ieee754_atan2+0xfe>
 801a4b8:	2f00      	cmp	r7, #0
 801a4ba:	da01      	bge.n	801a4c0 <__ieee754_atan2+0xc8>
 801a4bc:	323c      	adds	r2, #60	@ 0x3c
 801a4be:	db1e      	blt.n	801a4fe <__ieee754_atan2+0x106>
 801a4c0:	4632      	mov	r2, r6
 801a4c2:	463b      	mov	r3, r7
 801a4c4:	f7e6 f9ea 	bl	800089c <__aeabi_ddiv>
 801a4c8:	ec41 0b10 	vmov	d0, r0, r1
 801a4cc:	f000 f9fc 	bl	801a8c8 <fabs>
 801a4d0:	f000 f862 	bl	801a598 <atan>
 801a4d4:	ec51 0b10 	vmov	r0, r1, d0
 801a4d8:	2c01      	cmp	r4, #1
 801a4da:	d013      	beq.n	801a504 <__ieee754_atan2+0x10c>
 801a4dc:	2c02      	cmp	r4, #2
 801a4de:	d015      	beq.n	801a50c <__ieee754_atan2+0x114>
 801a4e0:	2c00      	cmp	r4, #0
 801a4e2:	d0a8      	beq.n	801a436 <__ieee754_atan2+0x3e>
 801a4e4:	a318      	add	r3, pc, #96	@ (adr r3, 801a548 <__ieee754_atan2+0x150>)
 801a4e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a4ea:	f7e5 fef5 	bl	80002d8 <__aeabi_dsub>
 801a4ee:	a318      	add	r3, pc, #96	@ (adr r3, 801a550 <__ieee754_atan2+0x158>)
 801a4f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a4f4:	e014      	b.n	801a520 <__ieee754_atan2+0x128>
 801a4f6:	a118      	add	r1, pc, #96	@ (adr r1, 801a558 <__ieee754_atan2+0x160>)
 801a4f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a4fc:	e7ec      	b.n	801a4d8 <__ieee754_atan2+0xe0>
 801a4fe:	2000      	movs	r0, #0
 801a500:	2100      	movs	r1, #0
 801a502:	e7e9      	b.n	801a4d8 <__ieee754_atan2+0xe0>
 801a504:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801a508:	4619      	mov	r1, r3
 801a50a:	e794      	b.n	801a436 <__ieee754_atan2+0x3e>
 801a50c:	a30e      	add	r3, pc, #56	@ (adr r3, 801a548 <__ieee754_atan2+0x150>)
 801a50e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a512:	f7e5 fee1 	bl	80002d8 <__aeabi_dsub>
 801a516:	4602      	mov	r2, r0
 801a518:	460b      	mov	r3, r1
 801a51a:	a10d      	add	r1, pc, #52	@ (adr r1, 801a550 <__ieee754_atan2+0x158>)
 801a51c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a520:	f7e5 feda 	bl	80002d8 <__aeabi_dsub>
 801a524:	e787      	b.n	801a436 <__ieee754_atan2+0x3e>
 801a526:	a10a      	add	r1, pc, #40	@ (adr r1, 801a550 <__ieee754_atan2+0x158>)
 801a528:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a52c:	e783      	b.n	801a436 <__ieee754_atan2+0x3e>
 801a52e:	a10c      	add	r1, pc, #48	@ (adr r1, 801a560 <__ieee754_atan2+0x168>)
 801a530:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a534:	e77f      	b.n	801a436 <__ieee754_atan2+0x3e>
 801a536:	2000      	movs	r0, #0
 801a538:	2100      	movs	r1, #0
 801a53a:	e77c      	b.n	801a436 <__ieee754_atan2+0x3e>
 801a53c:	a10a      	add	r1, pc, #40	@ (adr r1, 801a568 <__ieee754_atan2+0x170>)
 801a53e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a542:	e778      	b.n	801a436 <__ieee754_atan2+0x3e>
 801a544:	f3af 8000 	nop.w
 801a548:	33145c07 	.word	0x33145c07
 801a54c:	3ca1a626 	.word	0x3ca1a626
 801a550:	54442d18 	.word	0x54442d18
 801a554:	400921fb 	.word	0x400921fb
 801a558:	54442d18 	.word	0x54442d18
 801a55c:	3ff921fb 	.word	0x3ff921fb
 801a560:	54442d18 	.word	0x54442d18
 801a564:	3fe921fb 	.word	0x3fe921fb
 801a568:	54442d18 	.word	0x54442d18
 801a56c:	bff921fb 	.word	0xbff921fb
 801a570:	0801dfe8 	.word	0x0801dfe8
 801a574:	0801dfd0 	.word	0x0801dfd0
 801a578:	54442d18 	.word	0x54442d18
 801a57c:	c00921fb 	.word	0xc00921fb
 801a580:	7ff00000 	.word	0x7ff00000

0801a584 <fabsf>:
 801a584:	ee10 3a10 	vmov	r3, s0
 801a588:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801a58c:	ee00 3a10 	vmov	s0, r3
 801a590:	4770      	bx	lr
 801a592:	0000      	movs	r0, r0
 801a594:	0000      	movs	r0, r0
	...

0801a598 <atan>:
 801a598:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a59c:	ec55 4b10 	vmov	r4, r5, d0
 801a5a0:	4bbf      	ldr	r3, [pc, #764]	@ (801a8a0 <atan+0x308>)
 801a5a2:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 801a5a6:	429e      	cmp	r6, r3
 801a5a8:	46ab      	mov	fp, r5
 801a5aa:	d918      	bls.n	801a5de <atan+0x46>
 801a5ac:	4bbd      	ldr	r3, [pc, #756]	@ (801a8a4 <atan+0x30c>)
 801a5ae:	429e      	cmp	r6, r3
 801a5b0:	d801      	bhi.n	801a5b6 <atan+0x1e>
 801a5b2:	d109      	bne.n	801a5c8 <atan+0x30>
 801a5b4:	b144      	cbz	r4, 801a5c8 <atan+0x30>
 801a5b6:	4622      	mov	r2, r4
 801a5b8:	462b      	mov	r3, r5
 801a5ba:	4620      	mov	r0, r4
 801a5bc:	4629      	mov	r1, r5
 801a5be:	f7e5 fe8d 	bl	80002dc <__adddf3>
 801a5c2:	4604      	mov	r4, r0
 801a5c4:	460d      	mov	r5, r1
 801a5c6:	e006      	b.n	801a5d6 <atan+0x3e>
 801a5c8:	f1bb 0f00 	cmp.w	fp, #0
 801a5cc:	f340 812b 	ble.w	801a826 <atan+0x28e>
 801a5d0:	a597      	add	r5, pc, #604	@ (adr r5, 801a830 <atan+0x298>)
 801a5d2:	e9d5 4500 	ldrd	r4, r5, [r5]
 801a5d6:	ec45 4b10 	vmov	d0, r4, r5
 801a5da:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a5de:	4bb2      	ldr	r3, [pc, #712]	@ (801a8a8 <atan+0x310>)
 801a5e0:	429e      	cmp	r6, r3
 801a5e2:	d813      	bhi.n	801a60c <atan+0x74>
 801a5e4:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 801a5e8:	429e      	cmp	r6, r3
 801a5ea:	d80c      	bhi.n	801a606 <atan+0x6e>
 801a5ec:	a392      	add	r3, pc, #584	@ (adr r3, 801a838 <atan+0x2a0>)
 801a5ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a5f2:	4620      	mov	r0, r4
 801a5f4:	4629      	mov	r1, r5
 801a5f6:	f7e5 fe71 	bl	80002dc <__adddf3>
 801a5fa:	4bac      	ldr	r3, [pc, #688]	@ (801a8ac <atan+0x314>)
 801a5fc:	2200      	movs	r2, #0
 801a5fe:	f7e6 fab3 	bl	8000b68 <__aeabi_dcmpgt>
 801a602:	2800      	cmp	r0, #0
 801a604:	d1e7      	bne.n	801a5d6 <atan+0x3e>
 801a606:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 801a60a:	e029      	b.n	801a660 <atan+0xc8>
 801a60c:	f000 f95c 	bl	801a8c8 <fabs>
 801a610:	4ba7      	ldr	r3, [pc, #668]	@ (801a8b0 <atan+0x318>)
 801a612:	429e      	cmp	r6, r3
 801a614:	ec55 4b10 	vmov	r4, r5, d0
 801a618:	f200 80bc 	bhi.w	801a794 <atan+0x1fc>
 801a61c:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 801a620:	429e      	cmp	r6, r3
 801a622:	f200 809e 	bhi.w	801a762 <atan+0x1ca>
 801a626:	4622      	mov	r2, r4
 801a628:	462b      	mov	r3, r5
 801a62a:	4620      	mov	r0, r4
 801a62c:	4629      	mov	r1, r5
 801a62e:	f7e5 fe55 	bl	80002dc <__adddf3>
 801a632:	4b9e      	ldr	r3, [pc, #632]	@ (801a8ac <atan+0x314>)
 801a634:	2200      	movs	r2, #0
 801a636:	f7e5 fe4f 	bl	80002d8 <__aeabi_dsub>
 801a63a:	2200      	movs	r2, #0
 801a63c:	4606      	mov	r6, r0
 801a63e:	460f      	mov	r7, r1
 801a640:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801a644:	4620      	mov	r0, r4
 801a646:	4629      	mov	r1, r5
 801a648:	f7e5 fe48 	bl	80002dc <__adddf3>
 801a64c:	4602      	mov	r2, r0
 801a64e:	460b      	mov	r3, r1
 801a650:	4630      	mov	r0, r6
 801a652:	4639      	mov	r1, r7
 801a654:	f7e6 f922 	bl	800089c <__aeabi_ddiv>
 801a658:	f04f 0a00 	mov.w	sl, #0
 801a65c:	4604      	mov	r4, r0
 801a65e:	460d      	mov	r5, r1
 801a660:	4622      	mov	r2, r4
 801a662:	462b      	mov	r3, r5
 801a664:	4620      	mov	r0, r4
 801a666:	4629      	mov	r1, r5
 801a668:	f7e5 ffee 	bl	8000648 <__aeabi_dmul>
 801a66c:	4602      	mov	r2, r0
 801a66e:	460b      	mov	r3, r1
 801a670:	4680      	mov	r8, r0
 801a672:	4689      	mov	r9, r1
 801a674:	f7e5 ffe8 	bl	8000648 <__aeabi_dmul>
 801a678:	a371      	add	r3, pc, #452	@ (adr r3, 801a840 <atan+0x2a8>)
 801a67a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a67e:	4606      	mov	r6, r0
 801a680:	460f      	mov	r7, r1
 801a682:	f7e5 ffe1 	bl	8000648 <__aeabi_dmul>
 801a686:	a370      	add	r3, pc, #448	@ (adr r3, 801a848 <atan+0x2b0>)
 801a688:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a68c:	f7e5 fe26 	bl	80002dc <__adddf3>
 801a690:	4632      	mov	r2, r6
 801a692:	463b      	mov	r3, r7
 801a694:	f7e5 ffd8 	bl	8000648 <__aeabi_dmul>
 801a698:	a36d      	add	r3, pc, #436	@ (adr r3, 801a850 <atan+0x2b8>)
 801a69a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a69e:	f7e5 fe1d 	bl	80002dc <__adddf3>
 801a6a2:	4632      	mov	r2, r6
 801a6a4:	463b      	mov	r3, r7
 801a6a6:	f7e5 ffcf 	bl	8000648 <__aeabi_dmul>
 801a6aa:	a36b      	add	r3, pc, #428	@ (adr r3, 801a858 <atan+0x2c0>)
 801a6ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a6b0:	f7e5 fe14 	bl	80002dc <__adddf3>
 801a6b4:	4632      	mov	r2, r6
 801a6b6:	463b      	mov	r3, r7
 801a6b8:	f7e5 ffc6 	bl	8000648 <__aeabi_dmul>
 801a6bc:	a368      	add	r3, pc, #416	@ (adr r3, 801a860 <atan+0x2c8>)
 801a6be:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a6c2:	f7e5 fe0b 	bl	80002dc <__adddf3>
 801a6c6:	4632      	mov	r2, r6
 801a6c8:	463b      	mov	r3, r7
 801a6ca:	f7e5 ffbd 	bl	8000648 <__aeabi_dmul>
 801a6ce:	a366      	add	r3, pc, #408	@ (adr r3, 801a868 <atan+0x2d0>)
 801a6d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a6d4:	f7e5 fe02 	bl	80002dc <__adddf3>
 801a6d8:	4642      	mov	r2, r8
 801a6da:	464b      	mov	r3, r9
 801a6dc:	f7e5 ffb4 	bl	8000648 <__aeabi_dmul>
 801a6e0:	a363      	add	r3, pc, #396	@ (adr r3, 801a870 <atan+0x2d8>)
 801a6e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a6e6:	4680      	mov	r8, r0
 801a6e8:	4689      	mov	r9, r1
 801a6ea:	4630      	mov	r0, r6
 801a6ec:	4639      	mov	r1, r7
 801a6ee:	f7e5 ffab 	bl	8000648 <__aeabi_dmul>
 801a6f2:	a361      	add	r3, pc, #388	@ (adr r3, 801a878 <atan+0x2e0>)
 801a6f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a6f8:	f7e5 fdee 	bl	80002d8 <__aeabi_dsub>
 801a6fc:	4632      	mov	r2, r6
 801a6fe:	463b      	mov	r3, r7
 801a700:	f7e5 ffa2 	bl	8000648 <__aeabi_dmul>
 801a704:	a35e      	add	r3, pc, #376	@ (adr r3, 801a880 <atan+0x2e8>)
 801a706:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a70a:	f7e5 fde5 	bl	80002d8 <__aeabi_dsub>
 801a70e:	4632      	mov	r2, r6
 801a710:	463b      	mov	r3, r7
 801a712:	f7e5 ff99 	bl	8000648 <__aeabi_dmul>
 801a716:	a35c      	add	r3, pc, #368	@ (adr r3, 801a888 <atan+0x2f0>)
 801a718:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a71c:	f7e5 fddc 	bl	80002d8 <__aeabi_dsub>
 801a720:	4632      	mov	r2, r6
 801a722:	463b      	mov	r3, r7
 801a724:	f7e5 ff90 	bl	8000648 <__aeabi_dmul>
 801a728:	a359      	add	r3, pc, #356	@ (adr r3, 801a890 <atan+0x2f8>)
 801a72a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a72e:	f7e5 fdd3 	bl	80002d8 <__aeabi_dsub>
 801a732:	4632      	mov	r2, r6
 801a734:	463b      	mov	r3, r7
 801a736:	f7e5 ff87 	bl	8000648 <__aeabi_dmul>
 801a73a:	4602      	mov	r2, r0
 801a73c:	460b      	mov	r3, r1
 801a73e:	4640      	mov	r0, r8
 801a740:	4649      	mov	r1, r9
 801a742:	f7e5 fdcb 	bl	80002dc <__adddf3>
 801a746:	4622      	mov	r2, r4
 801a748:	462b      	mov	r3, r5
 801a74a:	f7e5 ff7d 	bl	8000648 <__aeabi_dmul>
 801a74e:	f1ba 3fff 	cmp.w	sl, #4294967295	@ 0xffffffff
 801a752:	4602      	mov	r2, r0
 801a754:	460b      	mov	r3, r1
 801a756:	d148      	bne.n	801a7ea <atan+0x252>
 801a758:	4620      	mov	r0, r4
 801a75a:	4629      	mov	r1, r5
 801a75c:	f7e5 fdbc 	bl	80002d8 <__aeabi_dsub>
 801a760:	e72f      	b.n	801a5c2 <atan+0x2a>
 801a762:	4b52      	ldr	r3, [pc, #328]	@ (801a8ac <atan+0x314>)
 801a764:	2200      	movs	r2, #0
 801a766:	4620      	mov	r0, r4
 801a768:	4629      	mov	r1, r5
 801a76a:	f7e5 fdb5 	bl	80002d8 <__aeabi_dsub>
 801a76e:	4b4f      	ldr	r3, [pc, #316]	@ (801a8ac <atan+0x314>)
 801a770:	4606      	mov	r6, r0
 801a772:	460f      	mov	r7, r1
 801a774:	2200      	movs	r2, #0
 801a776:	4620      	mov	r0, r4
 801a778:	4629      	mov	r1, r5
 801a77a:	f7e5 fdaf 	bl	80002dc <__adddf3>
 801a77e:	4602      	mov	r2, r0
 801a780:	460b      	mov	r3, r1
 801a782:	4630      	mov	r0, r6
 801a784:	4639      	mov	r1, r7
 801a786:	f7e6 f889 	bl	800089c <__aeabi_ddiv>
 801a78a:	f04f 0a01 	mov.w	sl, #1
 801a78e:	4604      	mov	r4, r0
 801a790:	460d      	mov	r5, r1
 801a792:	e765      	b.n	801a660 <atan+0xc8>
 801a794:	4b47      	ldr	r3, [pc, #284]	@ (801a8b4 <atan+0x31c>)
 801a796:	429e      	cmp	r6, r3
 801a798:	d21c      	bcs.n	801a7d4 <atan+0x23c>
 801a79a:	4b47      	ldr	r3, [pc, #284]	@ (801a8b8 <atan+0x320>)
 801a79c:	2200      	movs	r2, #0
 801a79e:	4620      	mov	r0, r4
 801a7a0:	4629      	mov	r1, r5
 801a7a2:	f7e5 fd99 	bl	80002d8 <__aeabi_dsub>
 801a7a6:	4b44      	ldr	r3, [pc, #272]	@ (801a8b8 <atan+0x320>)
 801a7a8:	4606      	mov	r6, r0
 801a7aa:	460f      	mov	r7, r1
 801a7ac:	2200      	movs	r2, #0
 801a7ae:	4620      	mov	r0, r4
 801a7b0:	4629      	mov	r1, r5
 801a7b2:	f7e5 ff49 	bl	8000648 <__aeabi_dmul>
 801a7b6:	4b3d      	ldr	r3, [pc, #244]	@ (801a8ac <atan+0x314>)
 801a7b8:	2200      	movs	r2, #0
 801a7ba:	f7e5 fd8f 	bl	80002dc <__adddf3>
 801a7be:	4602      	mov	r2, r0
 801a7c0:	460b      	mov	r3, r1
 801a7c2:	4630      	mov	r0, r6
 801a7c4:	4639      	mov	r1, r7
 801a7c6:	f7e6 f869 	bl	800089c <__aeabi_ddiv>
 801a7ca:	f04f 0a02 	mov.w	sl, #2
 801a7ce:	4604      	mov	r4, r0
 801a7d0:	460d      	mov	r5, r1
 801a7d2:	e745      	b.n	801a660 <atan+0xc8>
 801a7d4:	4622      	mov	r2, r4
 801a7d6:	462b      	mov	r3, r5
 801a7d8:	4938      	ldr	r1, [pc, #224]	@ (801a8bc <atan+0x324>)
 801a7da:	2000      	movs	r0, #0
 801a7dc:	f7e6 f85e 	bl	800089c <__aeabi_ddiv>
 801a7e0:	f04f 0a03 	mov.w	sl, #3
 801a7e4:	4604      	mov	r4, r0
 801a7e6:	460d      	mov	r5, r1
 801a7e8:	e73a      	b.n	801a660 <atan+0xc8>
 801a7ea:	4b35      	ldr	r3, [pc, #212]	@ (801a8c0 <atan+0x328>)
 801a7ec:	4e35      	ldr	r6, [pc, #212]	@ (801a8c4 <atan+0x32c>)
 801a7ee:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801a7f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a7f6:	f7e5 fd6f 	bl	80002d8 <__aeabi_dsub>
 801a7fa:	4622      	mov	r2, r4
 801a7fc:	462b      	mov	r3, r5
 801a7fe:	f7e5 fd6b 	bl	80002d8 <__aeabi_dsub>
 801a802:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 801a806:	4602      	mov	r2, r0
 801a808:	460b      	mov	r3, r1
 801a80a:	e9d6 0100 	ldrd	r0, r1, [r6]
 801a80e:	f7e5 fd63 	bl	80002d8 <__aeabi_dsub>
 801a812:	f1bb 0f00 	cmp.w	fp, #0
 801a816:	4604      	mov	r4, r0
 801a818:	460d      	mov	r5, r1
 801a81a:	f6bf aedc 	bge.w	801a5d6 <atan+0x3e>
 801a81e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801a822:	461d      	mov	r5, r3
 801a824:	e6d7      	b.n	801a5d6 <atan+0x3e>
 801a826:	a51c      	add	r5, pc, #112	@ (adr r5, 801a898 <atan+0x300>)
 801a828:	e9d5 4500 	ldrd	r4, r5, [r5]
 801a82c:	e6d3      	b.n	801a5d6 <atan+0x3e>
 801a82e:	bf00      	nop
 801a830:	54442d18 	.word	0x54442d18
 801a834:	3ff921fb 	.word	0x3ff921fb
 801a838:	8800759c 	.word	0x8800759c
 801a83c:	7e37e43c 	.word	0x7e37e43c
 801a840:	e322da11 	.word	0xe322da11
 801a844:	3f90ad3a 	.word	0x3f90ad3a
 801a848:	24760deb 	.word	0x24760deb
 801a84c:	3fa97b4b 	.word	0x3fa97b4b
 801a850:	a0d03d51 	.word	0xa0d03d51
 801a854:	3fb10d66 	.word	0x3fb10d66
 801a858:	c54c206e 	.word	0xc54c206e
 801a85c:	3fb745cd 	.word	0x3fb745cd
 801a860:	920083ff 	.word	0x920083ff
 801a864:	3fc24924 	.word	0x3fc24924
 801a868:	5555550d 	.word	0x5555550d
 801a86c:	3fd55555 	.word	0x3fd55555
 801a870:	2c6a6c2f 	.word	0x2c6a6c2f
 801a874:	bfa2b444 	.word	0xbfa2b444
 801a878:	52defd9a 	.word	0x52defd9a
 801a87c:	3fadde2d 	.word	0x3fadde2d
 801a880:	af749a6d 	.word	0xaf749a6d
 801a884:	3fb3b0f2 	.word	0x3fb3b0f2
 801a888:	fe231671 	.word	0xfe231671
 801a88c:	3fbc71c6 	.word	0x3fbc71c6
 801a890:	9998ebc4 	.word	0x9998ebc4
 801a894:	3fc99999 	.word	0x3fc99999
 801a898:	54442d18 	.word	0x54442d18
 801a89c:	bff921fb 	.word	0xbff921fb
 801a8a0:	440fffff 	.word	0x440fffff
 801a8a4:	7ff00000 	.word	0x7ff00000
 801a8a8:	3fdbffff 	.word	0x3fdbffff
 801a8ac:	3ff00000 	.word	0x3ff00000
 801a8b0:	3ff2ffff 	.word	0x3ff2ffff
 801a8b4:	40038000 	.word	0x40038000
 801a8b8:	3ff80000 	.word	0x3ff80000
 801a8bc:	bff00000 	.word	0xbff00000
 801a8c0:	0801e000 	.word	0x0801e000
 801a8c4:	0801e020 	.word	0x0801e020

0801a8c8 <fabs>:
 801a8c8:	ec51 0b10 	vmov	r0, r1, d0
 801a8cc:	4602      	mov	r2, r0
 801a8ce:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801a8d2:	ec43 2b10 	vmov	d0, r2, r3
 801a8d6:	4770      	bx	lr

0801a8d8 <nanf>:
 801a8d8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801a8e0 <nanf+0x8>
 801a8dc:	4770      	bx	lr
 801a8de:	bf00      	nop
 801a8e0:	7fc00000 	.word	0x7fc00000

0801a8e4 <__ieee754_asinf>:
 801a8e4:	b538      	push	{r3, r4, r5, lr}
 801a8e6:	ee10 5a10 	vmov	r5, s0
 801a8ea:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 801a8ee:	f1b4 5f7e 	cmp.w	r4, #1065353216	@ 0x3f800000
 801a8f2:	ed2d 8b04 	vpush	{d8-d9}
 801a8f6:	d10c      	bne.n	801a912 <__ieee754_asinf+0x2e>
 801a8f8:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 801aa6c <__ieee754_asinf+0x188>
 801a8fc:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 801aa70 <__ieee754_asinf+0x18c>
 801a900:	ee60 7a27 	vmul.f32	s15, s0, s15
 801a904:	eee0 7a07 	vfma.f32	s15, s0, s14
 801a908:	eeb0 0a67 	vmov.f32	s0, s15
 801a90c:	ecbd 8b04 	vpop	{d8-d9}
 801a910:	bd38      	pop	{r3, r4, r5, pc}
 801a912:	d904      	bls.n	801a91e <__ieee754_asinf+0x3a>
 801a914:	ee70 7a40 	vsub.f32	s15, s0, s0
 801a918:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 801a91c:	e7f6      	b.n	801a90c <__ieee754_asinf+0x28>
 801a91e:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 801a922:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 801a926:	d20b      	bcs.n	801a940 <__ieee754_asinf+0x5c>
 801a928:	f1b4 5f48 	cmp.w	r4, #838860800	@ 0x32000000
 801a92c:	d252      	bcs.n	801a9d4 <__ieee754_asinf+0xf0>
 801a92e:	eddf 7a51 	vldr	s15, [pc, #324]	@ 801aa74 <__ieee754_asinf+0x190>
 801a932:	ee70 7a27 	vadd.f32	s15, s0, s15
 801a936:	eef4 7ae8 	vcmpe.f32	s15, s17
 801a93a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a93e:	dce5      	bgt.n	801a90c <__ieee754_asinf+0x28>
 801a940:	f7ff fe20 	bl	801a584 <fabsf>
 801a944:	ee38 8ac0 	vsub.f32	s16, s17, s0
 801a948:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801a94c:	ee28 8a27 	vmul.f32	s16, s16, s15
 801a950:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 801aa78 <__ieee754_asinf+0x194>
 801a954:	eddf 7a49 	vldr	s15, [pc, #292]	@ 801aa7c <__ieee754_asinf+0x198>
 801a958:	ed9f 9a49 	vldr	s18, [pc, #292]	@ 801aa80 <__ieee754_asinf+0x19c>
 801a95c:	eea8 7a27 	vfma.f32	s14, s16, s15
 801a960:	eddf 7a48 	vldr	s15, [pc, #288]	@ 801aa84 <__ieee754_asinf+0x1a0>
 801a964:	eee7 7a08 	vfma.f32	s15, s14, s16
 801a968:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 801aa88 <__ieee754_asinf+0x1a4>
 801a96c:	eea7 7a88 	vfma.f32	s14, s15, s16
 801a970:	eddf 7a46 	vldr	s15, [pc, #280]	@ 801aa8c <__ieee754_asinf+0x1a8>
 801a974:	eee7 7a08 	vfma.f32	s15, s14, s16
 801a978:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 801aa90 <__ieee754_asinf+0x1ac>
 801a97c:	eea7 9a88 	vfma.f32	s18, s15, s16
 801a980:	eddf 7a44 	vldr	s15, [pc, #272]	@ 801aa94 <__ieee754_asinf+0x1b0>
 801a984:	eee8 7a07 	vfma.f32	s15, s16, s14
 801a988:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 801aa98 <__ieee754_asinf+0x1b4>
 801a98c:	eea7 7a88 	vfma.f32	s14, s15, s16
 801a990:	eddf 7a42 	vldr	s15, [pc, #264]	@ 801aa9c <__ieee754_asinf+0x1b8>
 801a994:	eee7 7a08 	vfma.f32	s15, s14, s16
 801a998:	eeb0 0a48 	vmov.f32	s0, s16
 801a99c:	eee7 8a88 	vfma.f32	s17, s15, s16
 801a9a0:	f000 f884 	bl	801aaac <__ieee754_sqrtf>
 801a9a4:	4b3e      	ldr	r3, [pc, #248]	@ (801aaa0 <__ieee754_asinf+0x1bc>)
 801a9a6:	ee29 9a08 	vmul.f32	s18, s18, s16
 801a9aa:	429c      	cmp	r4, r3
 801a9ac:	ee89 6a28 	vdiv.f32	s12, s18, s17
 801a9b0:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 801a9b4:	d93d      	bls.n	801aa32 <__ieee754_asinf+0x14e>
 801a9b6:	eea0 0a06 	vfma.f32	s0, s0, s12
 801a9ba:	eddf 7a3a 	vldr	s15, [pc, #232]	@ 801aaa4 <__ieee754_asinf+0x1c0>
 801a9be:	eee0 7a26 	vfma.f32	s15, s0, s13
 801a9c2:	ed9f 0a2b 	vldr	s0, [pc, #172]	@ 801aa70 <__ieee754_asinf+0x18c>
 801a9c6:	ee30 0a67 	vsub.f32	s0, s0, s15
 801a9ca:	2d00      	cmp	r5, #0
 801a9cc:	bfd8      	it	le
 801a9ce:	eeb1 0a40 	vnegle.f32	s0, s0
 801a9d2:	e79b      	b.n	801a90c <__ieee754_asinf+0x28>
 801a9d4:	ee60 7a00 	vmul.f32	s15, s0, s0
 801a9d8:	eddf 6a28 	vldr	s13, [pc, #160]	@ 801aa7c <__ieee754_asinf+0x198>
 801a9dc:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 801aa78 <__ieee754_asinf+0x194>
 801a9e0:	ed9f 6a2b 	vldr	s12, [pc, #172]	@ 801aa90 <__ieee754_asinf+0x1ac>
 801a9e4:	eea7 7aa6 	vfma.f32	s14, s15, s13
 801a9e8:	eddf 6a26 	vldr	s13, [pc, #152]	@ 801aa84 <__ieee754_asinf+0x1a0>
 801a9ec:	eee7 6a27 	vfma.f32	s13, s14, s15
 801a9f0:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 801aa88 <__ieee754_asinf+0x1a4>
 801a9f4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801a9f8:	eddf 6a24 	vldr	s13, [pc, #144]	@ 801aa8c <__ieee754_asinf+0x1a8>
 801a9fc:	eee7 6a27 	vfma.f32	s13, s14, s15
 801aa00:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 801aa80 <__ieee754_asinf+0x19c>
 801aa04:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801aa08:	eddf 6a22 	vldr	s13, [pc, #136]	@ 801aa94 <__ieee754_asinf+0x1b0>
 801aa0c:	eee7 6a86 	vfma.f32	s13, s15, s12
 801aa10:	ed9f 6a21 	vldr	s12, [pc, #132]	@ 801aa98 <__ieee754_asinf+0x1b4>
 801aa14:	eea6 6aa7 	vfma.f32	s12, s13, s15
 801aa18:	eddf 6a20 	vldr	s13, [pc, #128]	@ 801aa9c <__ieee754_asinf+0x1b8>
 801aa1c:	eee6 6a27 	vfma.f32	s13, s12, s15
 801aa20:	ee27 7a27 	vmul.f32	s14, s14, s15
 801aa24:	eee6 8aa7 	vfma.f32	s17, s13, s15
 801aa28:	eec7 7a28 	vdiv.f32	s15, s14, s17
 801aa2c:	eea0 0a27 	vfma.f32	s0, s0, s15
 801aa30:	e76c      	b.n	801a90c <__ieee754_asinf+0x28>
 801aa32:	ee10 3a10 	vmov	r3, s0
 801aa36:	f36f 030b 	bfc	r3, #0, #12
 801aa3a:	ee07 3a10 	vmov	s14, r3
 801aa3e:	eea7 8a47 	vfms.f32	s16, s14, s14
 801aa42:	ee70 5a00 	vadd.f32	s11, s0, s0
 801aa46:	ee30 0a07 	vadd.f32	s0, s0, s14
 801aa4a:	eddf 7a08 	vldr	s15, [pc, #32]	@ 801aa6c <__ieee754_asinf+0x188>
 801aa4e:	ee88 5a00 	vdiv.f32	s10, s16, s0
 801aa52:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 801aaa8 <__ieee754_asinf+0x1c4>
 801aa56:	eee5 7a66 	vfms.f32	s15, s10, s13
 801aa5a:	eed5 7a86 	vfnms.f32	s15, s11, s12
 801aa5e:	eeb0 6a40 	vmov.f32	s12, s0
 801aa62:	eea7 6a66 	vfms.f32	s12, s14, s13
 801aa66:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801aa6a:	e7ac      	b.n	801a9c6 <__ieee754_asinf+0xe2>
 801aa6c:	b33bbd2e 	.word	0xb33bbd2e
 801aa70:	3fc90fdb 	.word	0x3fc90fdb
 801aa74:	7149f2ca 	.word	0x7149f2ca
 801aa78:	3a4f7f04 	.word	0x3a4f7f04
 801aa7c:	3811ef08 	.word	0x3811ef08
 801aa80:	3e2aaaab 	.word	0x3e2aaaab
 801aa84:	bd241146 	.word	0xbd241146
 801aa88:	3e4e0aa8 	.word	0x3e4e0aa8
 801aa8c:	bea6b090 	.word	0xbea6b090
 801aa90:	3d9dc62e 	.word	0x3d9dc62e
 801aa94:	bf303361 	.word	0xbf303361
 801aa98:	4001572d 	.word	0x4001572d
 801aa9c:	c019d139 	.word	0xc019d139
 801aaa0:	3f799999 	.word	0x3f799999
 801aaa4:	333bbd2e 	.word	0x333bbd2e
 801aaa8:	3f490fdb 	.word	0x3f490fdb

0801aaac <__ieee754_sqrtf>:
 801aaac:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801aab0:	4770      	bx	lr
	...

0801aab4 <calloc>:
 801aab4:	4b02      	ldr	r3, [pc, #8]	@ (801aac0 <calloc+0xc>)
 801aab6:	460a      	mov	r2, r1
 801aab8:	4601      	mov	r1, r0
 801aaba:	6818      	ldr	r0, [r3, #0]
 801aabc:	f000 b802 	b.w	801aac4 <_calloc_r>
 801aac0:	20000a7c 	.word	0x20000a7c

0801aac4 <_calloc_r>:
 801aac4:	b570      	push	{r4, r5, r6, lr}
 801aac6:	fba1 5402 	umull	r5, r4, r1, r2
 801aaca:	b934      	cbnz	r4, 801aada <_calloc_r+0x16>
 801aacc:	4629      	mov	r1, r5
 801aace:	f000 f899 	bl	801ac04 <_malloc_r>
 801aad2:	4606      	mov	r6, r0
 801aad4:	b928      	cbnz	r0, 801aae2 <_calloc_r+0x1e>
 801aad6:	4630      	mov	r0, r6
 801aad8:	bd70      	pop	{r4, r5, r6, pc}
 801aada:	220c      	movs	r2, #12
 801aadc:	6002      	str	r2, [r0, #0]
 801aade:	2600      	movs	r6, #0
 801aae0:	e7f9      	b.n	801aad6 <_calloc_r+0x12>
 801aae2:	462a      	mov	r2, r5
 801aae4:	4621      	mov	r1, r4
 801aae6:	f000 fc5b 	bl	801b3a0 <memset>
 801aaea:	e7f4      	b.n	801aad6 <_calloc_r+0x12>

0801aaec <exit>:
 801aaec:	b508      	push	{r3, lr}
 801aaee:	4b06      	ldr	r3, [pc, #24]	@ (801ab08 <exit+0x1c>)
 801aaf0:	4604      	mov	r4, r0
 801aaf2:	b113      	cbz	r3, 801aafa <exit+0xe>
 801aaf4:	2100      	movs	r1, #0
 801aaf6:	f3af 8000 	nop.w
 801aafa:	4b04      	ldr	r3, [pc, #16]	@ (801ab0c <exit+0x20>)
 801aafc:	681b      	ldr	r3, [r3, #0]
 801aafe:	b103      	cbz	r3, 801ab02 <exit+0x16>
 801ab00:	4798      	blx	r3
 801ab02:	4620      	mov	r0, r4
 801ab04:	f7e7 fe04 	bl	8002710 <_exit>
 801ab08:	00000000 	.word	0x00000000
 801ab0c:	200160a0 	.word	0x200160a0

0801ab10 <getenv>:
 801ab10:	b507      	push	{r0, r1, r2, lr}
 801ab12:	4b04      	ldr	r3, [pc, #16]	@ (801ab24 <getenv+0x14>)
 801ab14:	4601      	mov	r1, r0
 801ab16:	aa01      	add	r2, sp, #4
 801ab18:	6818      	ldr	r0, [r3, #0]
 801ab1a:	f000 f805 	bl	801ab28 <_findenv_r>
 801ab1e:	b003      	add	sp, #12
 801ab20:	f85d fb04 	ldr.w	pc, [sp], #4
 801ab24:	20000a7c 	.word	0x20000a7c

0801ab28 <_findenv_r>:
 801ab28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ab2c:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 801ab9c <_findenv_r+0x74>
 801ab30:	4606      	mov	r6, r0
 801ab32:	4689      	mov	r9, r1
 801ab34:	4617      	mov	r7, r2
 801ab36:	f000 fce3 	bl	801b500 <__env_lock>
 801ab3a:	f8da 4000 	ldr.w	r4, [sl]
 801ab3e:	b134      	cbz	r4, 801ab4e <_findenv_r+0x26>
 801ab40:	464b      	mov	r3, r9
 801ab42:	4698      	mov	r8, r3
 801ab44:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ab48:	b13a      	cbz	r2, 801ab5a <_findenv_r+0x32>
 801ab4a:	2a3d      	cmp	r2, #61	@ 0x3d
 801ab4c:	d1f9      	bne.n	801ab42 <_findenv_r+0x1a>
 801ab4e:	4630      	mov	r0, r6
 801ab50:	f000 fcdc 	bl	801b50c <__env_unlock>
 801ab54:	2000      	movs	r0, #0
 801ab56:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ab5a:	eba8 0809 	sub.w	r8, r8, r9
 801ab5e:	46a3      	mov	fp, r4
 801ab60:	f854 0b04 	ldr.w	r0, [r4], #4
 801ab64:	2800      	cmp	r0, #0
 801ab66:	d0f2      	beq.n	801ab4e <_findenv_r+0x26>
 801ab68:	4642      	mov	r2, r8
 801ab6a:	4649      	mov	r1, r9
 801ab6c:	f000 fc2d 	bl	801b3ca <strncmp>
 801ab70:	2800      	cmp	r0, #0
 801ab72:	d1f4      	bne.n	801ab5e <_findenv_r+0x36>
 801ab74:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801ab78:	eb03 0508 	add.w	r5, r3, r8
 801ab7c:	f813 3008 	ldrb.w	r3, [r3, r8]
 801ab80:	2b3d      	cmp	r3, #61	@ 0x3d
 801ab82:	d1ec      	bne.n	801ab5e <_findenv_r+0x36>
 801ab84:	f8da 3000 	ldr.w	r3, [sl]
 801ab88:	ebab 0303 	sub.w	r3, fp, r3
 801ab8c:	109b      	asrs	r3, r3, #2
 801ab8e:	4630      	mov	r0, r6
 801ab90:	603b      	str	r3, [r7, #0]
 801ab92:	f000 fcbb 	bl	801b50c <__env_unlock>
 801ab96:	1c68      	adds	r0, r5, #1
 801ab98:	e7dd      	b.n	801ab56 <_findenv_r+0x2e>
 801ab9a:	bf00      	nop
 801ab9c:	20000000 	.word	0x20000000

0801aba0 <malloc>:
 801aba0:	4b02      	ldr	r3, [pc, #8]	@ (801abac <malloc+0xc>)
 801aba2:	4601      	mov	r1, r0
 801aba4:	6818      	ldr	r0, [r3, #0]
 801aba6:	f000 b82d 	b.w	801ac04 <_malloc_r>
 801abaa:	bf00      	nop
 801abac:	20000a7c 	.word	0x20000a7c

0801abb0 <free>:
 801abb0:	4b02      	ldr	r3, [pc, #8]	@ (801abbc <free+0xc>)
 801abb2:	4601      	mov	r1, r0
 801abb4:	6818      	ldr	r0, [r3, #0]
 801abb6:	f000 bcaf 	b.w	801b518 <_free_r>
 801abba:	bf00      	nop
 801abbc:	20000a7c 	.word	0x20000a7c

0801abc0 <sbrk_aligned>:
 801abc0:	b570      	push	{r4, r5, r6, lr}
 801abc2:	4e0f      	ldr	r6, [pc, #60]	@ (801ac00 <sbrk_aligned+0x40>)
 801abc4:	460c      	mov	r4, r1
 801abc6:	6831      	ldr	r1, [r6, #0]
 801abc8:	4605      	mov	r5, r0
 801abca:	b911      	cbnz	r1, 801abd2 <sbrk_aligned+0x12>
 801abcc:	f000 fc26 	bl	801b41c <_sbrk_r>
 801abd0:	6030      	str	r0, [r6, #0]
 801abd2:	4621      	mov	r1, r4
 801abd4:	4628      	mov	r0, r5
 801abd6:	f000 fc21 	bl	801b41c <_sbrk_r>
 801abda:	1c43      	adds	r3, r0, #1
 801abdc:	d103      	bne.n	801abe6 <sbrk_aligned+0x26>
 801abde:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801abe2:	4620      	mov	r0, r4
 801abe4:	bd70      	pop	{r4, r5, r6, pc}
 801abe6:	1cc4      	adds	r4, r0, #3
 801abe8:	f024 0403 	bic.w	r4, r4, #3
 801abec:	42a0      	cmp	r0, r4
 801abee:	d0f8      	beq.n	801abe2 <sbrk_aligned+0x22>
 801abf0:	1a21      	subs	r1, r4, r0
 801abf2:	4628      	mov	r0, r5
 801abf4:	f000 fc12 	bl	801b41c <_sbrk_r>
 801abf8:	3001      	adds	r0, #1
 801abfa:	d1f2      	bne.n	801abe2 <sbrk_aligned+0x22>
 801abfc:	e7ef      	b.n	801abde <sbrk_aligned+0x1e>
 801abfe:	bf00      	nop
 801ac00:	20015f60 	.word	0x20015f60

0801ac04 <_malloc_r>:
 801ac04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ac08:	1ccd      	adds	r5, r1, #3
 801ac0a:	f025 0503 	bic.w	r5, r5, #3
 801ac0e:	3508      	adds	r5, #8
 801ac10:	2d0c      	cmp	r5, #12
 801ac12:	bf38      	it	cc
 801ac14:	250c      	movcc	r5, #12
 801ac16:	2d00      	cmp	r5, #0
 801ac18:	4606      	mov	r6, r0
 801ac1a:	db01      	blt.n	801ac20 <_malloc_r+0x1c>
 801ac1c:	42a9      	cmp	r1, r5
 801ac1e:	d904      	bls.n	801ac2a <_malloc_r+0x26>
 801ac20:	230c      	movs	r3, #12
 801ac22:	6033      	str	r3, [r6, #0]
 801ac24:	2000      	movs	r0, #0
 801ac26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ac2a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801ad00 <_malloc_r+0xfc>
 801ac2e:	f000 f89f 	bl	801ad70 <__malloc_lock>
 801ac32:	f8d8 3000 	ldr.w	r3, [r8]
 801ac36:	461c      	mov	r4, r3
 801ac38:	bb44      	cbnz	r4, 801ac8c <_malloc_r+0x88>
 801ac3a:	4629      	mov	r1, r5
 801ac3c:	4630      	mov	r0, r6
 801ac3e:	f7ff ffbf 	bl	801abc0 <sbrk_aligned>
 801ac42:	1c43      	adds	r3, r0, #1
 801ac44:	4604      	mov	r4, r0
 801ac46:	d158      	bne.n	801acfa <_malloc_r+0xf6>
 801ac48:	f8d8 4000 	ldr.w	r4, [r8]
 801ac4c:	4627      	mov	r7, r4
 801ac4e:	2f00      	cmp	r7, #0
 801ac50:	d143      	bne.n	801acda <_malloc_r+0xd6>
 801ac52:	2c00      	cmp	r4, #0
 801ac54:	d04b      	beq.n	801acee <_malloc_r+0xea>
 801ac56:	6823      	ldr	r3, [r4, #0]
 801ac58:	4639      	mov	r1, r7
 801ac5a:	4630      	mov	r0, r6
 801ac5c:	eb04 0903 	add.w	r9, r4, r3
 801ac60:	f000 fbdc 	bl	801b41c <_sbrk_r>
 801ac64:	4581      	cmp	r9, r0
 801ac66:	d142      	bne.n	801acee <_malloc_r+0xea>
 801ac68:	6821      	ldr	r1, [r4, #0]
 801ac6a:	1a6d      	subs	r5, r5, r1
 801ac6c:	4629      	mov	r1, r5
 801ac6e:	4630      	mov	r0, r6
 801ac70:	f7ff ffa6 	bl	801abc0 <sbrk_aligned>
 801ac74:	3001      	adds	r0, #1
 801ac76:	d03a      	beq.n	801acee <_malloc_r+0xea>
 801ac78:	6823      	ldr	r3, [r4, #0]
 801ac7a:	442b      	add	r3, r5
 801ac7c:	6023      	str	r3, [r4, #0]
 801ac7e:	f8d8 3000 	ldr.w	r3, [r8]
 801ac82:	685a      	ldr	r2, [r3, #4]
 801ac84:	bb62      	cbnz	r2, 801ace0 <_malloc_r+0xdc>
 801ac86:	f8c8 7000 	str.w	r7, [r8]
 801ac8a:	e00f      	b.n	801acac <_malloc_r+0xa8>
 801ac8c:	6822      	ldr	r2, [r4, #0]
 801ac8e:	1b52      	subs	r2, r2, r5
 801ac90:	d420      	bmi.n	801acd4 <_malloc_r+0xd0>
 801ac92:	2a0b      	cmp	r2, #11
 801ac94:	d917      	bls.n	801acc6 <_malloc_r+0xc2>
 801ac96:	1961      	adds	r1, r4, r5
 801ac98:	42a3      	cmp	r3, r4
 801ac9a:	6025      	str	r5, [r4, #0]
 801ac9c:	bf18      	it	ne
 801ac9e:	6059      	strne	r1, [r3, #4]
 801aca0:	6863      	ldr	r3, [r4, #4]
 801aca2:	bf08      	it	eq
 801aca4:	f8c8 1000 	streq.w	r1, [r8]
 801aca8:	5162      	str	r2, [r4, r5]
 801acaa:	604b      	str	r3, [r1, #4]
 801acac:	4630      	mov	r0, r6
 801acae:	f000 f865 	bl	801ad7c <__malloc_unlock>
 801acb2:	f104 000b 	add.w	r0, r4, #11
 801acb6:	1d23      	adds	r3, r4, #4
 801acb8:	f020 0007 	bic.w	r0, r0, #7
 801acbc:	1ac2      	subs	r2, r0, r3
 801acbe:	bf1c      	itt	ne
 801acc0:	1a1b      	subne	r3, r3, r0
 801acc2:	50a3      	strne	r3, [r4, r2]
 801acc4:	e7af      	b.n	801ac26 <_malloc_r+0x22>
 801acc6:	6862      	ldr	r2, [r4, #4]
 801acc8:	42a3      	cmp	r3, r4
 801acca:	bf0c      	ite	eq
 801accc:	f8c8 2000 	streq.w	r2, [r8]
 801acd0:	605a      	strne	r2, [r3, #4]
 801acd2:	e7eb      	b.n	801acac <_malloc_r+0xa8>
 801acd4:	4623      	mov	r3, r4
 801acd6:	6864      	ldr	r4, [r4, #4]
 801acd8:	e7ae      	b.n	801ac38 <_malloc_r+0x34>
 801acda:	463c      	mov	r4, r7
 801acdc:	687f      	ldr	r7, [r7, #4]
 801acde:	e7b6      	b.n	801ac4e <_malloc_r+0x4a>
 801ace0:	461a      	mov	r2, r3
 801ace2:	685b      	ldr	r3, [r3, #4]
 801ace4:	42a3      	cmp	r3, r4
 801ace6:	d1fb      	bne.n	801ace0 <_malloc_r+0xdc>
 801ace8:	2300      	movs	r3, #0
 801acea:	6053      	str	r3, [r2, #4]
 801acec:	e7de      	b.n	801acac <_malloc_r+0xa8>
 801acee:	230c      	movs	r3, #12
 801acf0:	6033      	str	r3, [r6, #0]
 801acf2:	4630      	mov	r0, r6
 801acf4:	f000 f842 	bl	801ad7c <__malloc_unlock>
 801acf8:	e794      	b.n	801ac24 <_malloc_r+0x20>
 801acfa:	6005      	str	r5, [r0, #0]
 801acfc:	e7d6      	b.n	801acac <_malloc_r+0xa8>
 801acfe:	bf00      	nop
 801ad00:	20015f64 	.word	0x20015f64

0801ad04 <sniprintf>:
 801ad04:	b40c      	push	{r2, r3}
 801ad06:	b530      	push	{r4, r5, lr}
 801ad08:	4b18      	ldr	r3, [pc, #96]	@ (801ad6c <sniprintf+0x68>)
 801ad0a:	1e0c      	subs	r4, r1, #0
 801ad0c:	681d      	ldr	r5, [r3, #0]
 801ad0e:	b09d      	sub	sp, #116	@ 0x74
 801ad10:	da08      	bge.n	801ad24 <sniprintf+0x20>
 801ad12:	238b      	movs	r3, #139	@ 0x8b
 801ad14:	602b      	str	r3, [r5, #0]
 801ad16:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801ad1a:	b01d      	add	sp, #116	@ 0x74
 801ad1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801ad20:	b002      	add	sp, #8
 801ad22:	4770      	bx	lr
 801ad24:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801ad28:	f8ad 3014 	strh.w	r3, [sp, #20]
 801ad2c:	f04f 0300 	mov.w	r3, #0
 801ad30:	931b      	str	r3, [sp, #108]	@ 0x6c
 801ad32:	bf14      	ite	ne
 801ad34:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801ad38:	4623      	moveq	r3, r4
 801ad3a:	9304      	str	r3, [sp, #16]
 801ad3c:	9307      	str	r3, [sp, #28]
 801ad3e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801ad42:	9002      	str	r0, [sp, #8]
 801ad44:	9006      	str	r0, [sp, #24]
 801ad46:	f8ad 3016 	strh.w	r3, [sp, #22]
 801ad4a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801ad4c:	ab21      	add	r3, sp, #132	@ 0x84
 801ad4e:	a902      	add	r1, sp, #8
 801ad50:	4628      	mov	r0, r5
 801ad52:	9301      	str	r3, [sp, #4]
 801ad54:	f000 fc86 	bl	801b664 <_svfiprintf_r>
 801ad58:	1c43      	adds	r3, r0, #1
 801ad5a:	bfbc      	itt	lt
 801ad5c:	238b      	movlt	r3, #139	@ 0x8b
 801ad5e:	602b      	strlt	r3, [r5, #0]
 801ad60:	2c00      	cmp	r4, #0
 801ad62:	d0da      	beq.n	801ad1a <sniprintf+0x16>
 801ad64:	9b02      	ldr	r3, [sp, #8]
 801ad66:	2200      	movs	r2, #0
 801ad68:	701a      	strb	r2, [r3, #0]
 801ad6a:	e7d6      	b.n	801ad1a <sniprintf+0x16>
 801ad6c:	20000a7c 	.word	0x20000a7c

0801ad70 <__malloc_lock>:
 801ad70:	4801      	ldr	r0, [pc, #4]	@ (801ad78 <__malloc_lock+0x8>)
 801ad72:	f000 bb8e 	b.w	801b492 <__retarget_lock_acquire_recursive>
 801ad76:	bf00      	nop
 801ad78:	200160a5 	.word	0x200160a5

0801ad7c <__malloc_unlock>:
 801ad7c:	4801      	ldr	r0, [pc, #4]	@ (801ad84 <__malloc_unlock+0x8>)
 801ad7e:	f000 bb89 	b.w	801b494 <__retarget_lock_release_recursive>
 801ad82:	bf00      	nop
 801ad84:	200160a5 	.word	0x200160a5

0801ad88 <srand>:
 801ad88:	b538      	push	{r3, r4, r5, lr}
 801ad8a:	4b10      	ldr	r3, [pc, #64]	@ (801adcc <srand+0x44>)
 801ad8c:	681d      	ldr	r5, [r3, #0]
 801ad8e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801ad90:	4604      	mov	r4, r0
 801ad92:	b9b3      	cbnz	r3, 801adc2 <srand+0x3a>
 801ad94:	2018      	movs	r0, #24
 801ad96:	f7ff ff03 	bl	801aba0 <malloc>
 801ad9a:	4602      	mov	r2, r0
 801ad9c:	6328      	str	r0, [r5, #48]	@ 0x30
 801ad9e:	b920      	cbnz	r0, 801adaa <srand+0x22>
 801ada0:	4b0b      	ldr	r3, [pc, #44]	@ (801add0 <srand+0x48>)
 801ada2:	480c      	ldr	r0, [pc, #48]	@ (801add4 <srand+0x4c>)
 801ada4:	2146      	movs	r1, #70	@ 0x46
 801ada6:	f000 fb8d 	bl	801b4c4 <__assert_func>
 801adaa:	490b      	ldr	r1, [pc, #44]	@ (801add8 <srand+0x50>)
 801adac:	4b0b      	ldr	r3, [pc, #44]	@ (801addc <srand+0x54>)
 801adae:	e9c0 1300 	strd	r1, r3, [r0]
 801adb2:	4b0b      	ldr	r3, [pc, #44]	@ (801ade0 <srand+0x58>)
 801adb4:	6083      	str	r3, [r0, #8]
 801adb6:	230b      	movs	r3, #11
 801adb8:	8183      	strh	r3, [r0, #12]
 801adba:	2100      	movs	r1, #0
 801adbc:	2001      	movs	r0, #1
 801adbe:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801adc2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801adc4:	2200      	movs	r2, #0
 801adc6:	611c      	str	r4, [r3, #16]
 801adc8:	615a      	str	r2, [r3, #20]
 801adca:	bd38      	pop	{r3, r4, r5, pc}
 801adcc:	20000a7c 	.word	0x20000a7c
 801add0:	0801deec 	.word	0x0801deec
 801add4:	0801df03 	.word	0x0801df03
 801add8:	abcd330e 	.word	0xabcd330e
 801addc:	e66d1234 	.word	0xe66d1234
 801ade0:	0005deec 	.word	0x0005deec

0801ade4 <rand>:
 801ade4:	4b16      	ldr	r3, [pc, #88]	@ (801ae40 <rand+0x5c>)
 801ade6:	b510      	push	{r4, lr}
 801ade8:	681c      	ldr	r4, [r3, #0]
 801adea:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801adec:	b9b3      	cbnz	r3, 801ae1c <rand+0x38>
 801adee:	2018      	movs	r0, #24
 801adf0:	f7ff fed6 	bl	801aba0 <malloc>
 801adf4:	4602      	mov	r2, r0
 801adf6:	6320      	str	r0, [r4, #48]	@ 0x30
 801adf8:	b920      	cbnz	r0, 801ae04 <rand+0x20>
 801adfa:	4b12      	ldr	r3, [pc, #72]	@ (801ae44 <rand+0x60>)
 801adfc:	4812      	ldr	r0, [pc, #72]	@ (801ae48 <rand+0x64>)
 801adfe:	2152      	movs	r1, #82	@ 0x52
 801ae00:	f000 fb60 	bl	801b4c4 <__assert_func>
 801ae04:	4911      	ldr	r1, [pc, #68]	@ (801ae4c <rand+0x68>)
 801ae06:	4b12      	ldr	r3, [pc, #72]	@ (801ae50 <rand+0x6c>)
 801ae08:	e9c0 1300 	strd	r1, r3, [r0]
 801ae0c:	4b11      	ldr	r3, [pc, #68]	@ (801ae54 <rand+0x70>)
 801ae0e:	6083      	str	r3, [r0, #8]
 801ae10:	230b      	movs	r3, #11
 801ae12:	8183      	strh	r3, [r0, #12]
 801ae14:	2100      	movs	r1, #0
 801ae16:	2001      	movs	r0, #1
 801ae18:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801ae1c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801ae1e:	480e      	ldr	r0, [pc, #56]	@ (801ae58 <rand+0x74>)
 801ae20:	690b      	ldr	r3, [r1, #16]
 801ae22:	694c      	ldr	r4, [r1, #20]
 801ae24:	4a0d      	ldr	r2, [pc, #52]	@ (801ae5c <rand+0x78>)
 801ae26:	4358      	muls	r0, r3
 801ae28:	fb02 0004 	mla	r0, r2, r4, r0
 801ae2c:	fba3 3202 	umull	r3, r2, r3, r2
 801ae30:	3301      	adds	r3, #1
 801ae32:	eb40 0002 	adc.w	r0, r0, r2
 801ae36:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801ae3a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801ae3e:	bd10      	pop	{r4, pc}
 801ae40:	20000a7c 	.word	0x20000a7c
 801ae44:	0801deec 	.word	0x0801deec
 801ae48:	0801df03 	.word	0x0801df03
 801ae4c:	abcd330e 	.word	0xabcd330e
 801ae50:	e66d1234 	.word	0xe66d1234
 801ae54:	0005deec 	.word	0x0005deec
 801ae58:	5851f42d 	.word	0x5851f42d
 801ae5c:	4c957f2d 	.word	0x4c957f2d

0801ae60 <realloc>:
 801ae60:	4b02      	ldr	r3, [pc, #8]	@ (801ae6c <realloc+0xc>)
 801ae62:	460a      	mov	r2, r1
 801ae64:	4601      	mov	r1, r0
 801ae66:	6818      	ldr	r0, [r3, #0]
 801ae68:	f000 b8e2 	b.w	801b030 <_realloc_r>
 801ae6c:	20000a7c 	.word	0x20000a7c

0801ae70 <std>:
 801ae70:	2300      	movs	r3, #0
 801ae72:	b510      	push	{r4, lr}
 801ae74:	4604      	mov	r4, r0
 801ae76:	e9c0 3300 	strd	r3, r3, [r0]
 801ae7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801ae7e:	6083      	str	r3, [r0, #8]
 801ae80:	8181      	strh	r1, [r0, #12]
 801ae82:	6643      	str	r3, [r0, #100]	@ 0x64
 801ae84:	81c2      	strh	r2, [r0, #14]
 801ae86:	6183      	str	r3, [r0, #24]
 801ae88:	4619      	mov	r1, r3
 801ae8a:	2208      	movs	r2, #8
 801ae8c:	305c      	adds	r0, #92	@ 0x5c
 801ae8e:	f000 fa87 	bl	801b3a0 <memset>
 801ae92:	4b0d      	ldr	r3, [pc, #52]	@ (801aec8 <std+0x58>)
 801ae94:	6263      	str	r3, [r4, #36]	@ 0x24
 801ae96:	4b0d      	ldr	r3, [pc, #52]	@ (801aecc <std+0x5c>)
 801ae98:	62a3      	str	r3, [r4, #40]	@ 0x28
 801ae9a:	4b0d      	ldr	r3, [pc, #52]	@ (801aed0 <std+0x60>)
 801ae9c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801ae9e:	4b0d      	ldr	r3, [pc, #52]	@ (801aed4 <std+0x64>)
 801aea0:	6323      	str	r3, [r4, #48]	@ 0x30
 801aea2:	4b0d      	ldr	r3, [pc, #52]	@ (801aed8 <std+0x68>)
 801aea4:	6224      	str	r4, [r4, #32]
 801aea6:	429c      	cmp	r4, r3
 801aea8:	d006      	beq.n	801aeb8 <std+0x48>
 801aeaa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801aeae:	4294      	cmp	r4, r2
 801aeb0:	d002      	beq.n	801aeb8 <std+0x48>
 801aeb2:	33d0      	adds	r3, #208	@ 0xd0
 801aeb4:	429c      	cmp	r4, r3
 801aeb6:	d105      	bne.n	801aec4 <std+0x54>
 801aeb8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801aebc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801aec0:	f000 bae6 	b.w	801b490 <__retarget_lock_init_recursive>
 801aec4:	bd10      	pop	{r4, pc}
 801aec6:	bf00      	nop
 801aec8:	0801bf61 	.word	0x0801bf61
 801aecc:	0801bf83 	.word	0x0801bf83
 801aed0:	0801bfbb 	.word	0x0801bfbb
 801aed4:	0801bfdf 	.word	0x0801bfdf
 801aed8:	20015f68 	.word	0x20015f68

0801aedc <stdio_exit_handler>:
 801aedc:	4a02      	ldr	r2, [pc, #8]	@ (801aee8 <stdio_exit_handler+0xc>)
 801aede:	4903      	ldr	r1, [pc, #12]	@ (801aeec <stdio_exit_handler+0x10>)
 801aee0:	4803      	ldr	r0, [pc, #12]	@ (801aef0 <stdio_exit_handler+0x14>)
 801aee2:	f000 b94b 	b.w	801b17c <_fwalk_sglue>
 801aee6:	bf00      	nop
 801aee8:	20000a70 	.word	0x20000a70
 801aeec:	0801bf01 	.word	0x0801bf01
 801aef0:	20000a80 	.word	0x20000a80

0801aef4 <cleanup_stdio>:
 801aef4:	6841      	ldr	r1, [r0, #4]
 801aef6:	4b0c      	ldr	r3, [pc, #48]	@ (801af28 <cleanup_stdio+0x34>)
 801aef8:	4299      	cmp	r1, r3
 801aefa:	b510      	push	{r4, lr}
 801aefc:	4604      	mov	r4, r0
 801aefe:	d001      	beq.n	801af04 <cleanup_stdio+0x10>
 801af00:	f000 fffe 	bl	801bf00 <_fflush_r>
 801af04:	68a1      	ldr	r1, [r4, #8]
 801af06:	4b09      	ldr	r3, [pc, #36]	@ (801af2c <cleanup_stdio+0x38>)
 801af08:	4299      	cmp	r1, r3
 801af0a:	d002      	beq.n	801af12 <cleanup_stdio+0x1e>
 801af0c:	4620      	mov	r0, r4
 801af0e:	f000 fff7 	bl	801bf00 <_fflush_r>
 801af12:	68e1      	ldr	r1, [r4, #12]
 801af14:	4b06      	ldr	r3, [pc, #24]	@ (801af30 <cleanup_stdio+0x3c>)
 801af16:	4299      	cmp	r1, r3
 801af18:	d004      	beq.n	801af24 <cleanup_stdio+0x30>
 801af1a:	4620      	mov	r0, r4
 801af1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801af20:	f000 bfee 	b.w	801bf00 <_fflush_r>
 801af24:	bd10      	pop	{r4, pc}
 801af26:	bf00      	nop
 801af28:	20015f68 	.word	0x20015f68
 801af2c:	20015fd0 	.word	0x20015fd0
 801af30:	20016038 	.word	0x20016038

0801af34 <global_stdio_init.part.0>:
 801af34:	b510      	push	{r4, lr}
 801af36:	4b0b      	ldr	r3, [pc, #44]	@ (801af64 <global_stdio_init.part.0+0x30>)
 801af38:	4c0b      	ldr	r4, [pc, #44]	@ (801af68 <global_stdio_init.part.0+0x34>)
 801af3a:	4a0c      	ldr	r2, [pc, #48]	@ (801af6c <global_stdio_init.part.0+0x38>)
 801af3c:	601a      	str	r2, [r3, #0]
 801af3e:	4620      	mov	r0, r4
 801af40:	2200      	movs	r2, #0
 801af42:	2104      	movs	r1, #4
 801af44:	f7ff ff94 	bl	801ae70 <std>
 801af48:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801af4c:	2201      	movs	r2, #1
 801af4e:	2109      	movs	r1, #9
 801af50:	f7ff ff8e 	bl	801ae70 <std>
 801af54:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801af58:	2202      	movs	r2, #2
 801af5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801af5e:	2112      	movs	r1, #18
 801af60:	f7ff bf86 	b.w	801ae70 <std>
 801af64:	200160a0 	.word	0x200160a0
 801af68:	20015f68 	.word	0x20015f68
 801af6c:	0801aedd 	.word	0x0801aedd

0801af70 <__sfp_lock_acquire>:
 801af70:	4801      	ldr	r0, [pc, #4]	@ (801af78 <__sfp_lock_acquire+0x8>)
 801af72:	f000 ba8e 	b.w	801b492 <__retarget_lock_acquire_recursive>
 801af76:	bf00      	nop
 801af78:	200160a6 	.word	0x200160a6

0801af7c <__sfp_lock_release>:
 801af7c:	4801      	ldr	r0, [pc, #4]	@ (801af84 <__sfp_lock_release+0x8>)
 801af7e:	f000 ba89 	b.w	801b494 <__retarget_lock_release_recursive>
 801af82:	bf00      	nop
 801af84:	200160a6 	.word	0x200160a6

0801af88 <__sinit>:
 801af88:	b510      	push	{r4, lr}
 801af8a:	4604      	mov	r4, r0
 801af8c:	f7ff fff0 	bl	801af70 <__sfp_lock_acquire>
 801af90:	6a23      	ldr	r3, [r4, #32]
 801af92:	b11b      	cbz	r3, 801af9c <__sinit+0x14>
 801af94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801af98:	f7ff bff0 	b.w	801af7c <__sfp_lock_release>
 801af9c:	4b04      	ldr	r3, [pc, #16]	@ (801afb0 <__sinit+0x28>)
 801af9e:	6223      	str	r3, [r4, #32]
 801afa0:	4b04      	ldr	r3, [pc, #16]	@ (801afb4 <__sinit+0x2c>)
 801afa2:	681b      	ldr	r3, [r3, #0]
 801afa4:	2b00      	cmp	r3, #0
 801afa6:	d1f5      	bne.n	801af94 <__sinit+0xc>
 801afa8:	f7ff ffc4 	bl	801af34 <global_stdio_init.part.0>
 801afac:	e7f2      	b.n	801af94 <__sinit+0xc>
 801afae:	bf00      	nop
 801afb0:	0801aef5 	.word	0x0801aef5
 801afb4:	200160a0 	.word	0x200160a0

0801afb8 <_vsniprintf_r>:
 801afb8:	b530      	push	{r4, r5, lr}
 801afba:	4614      	mov	r4, r2
 801afbc:	2c00      	cmp	r4, #0
 801afbe:	b09b      	sub	sp, #108	@ 0x6c
 801afc0:	4605      	mov	r5, r0
 801afc2:	461a      	mov	r2, r3
 801afc4:	da05      	bge.n	801afd2 <_vsniprintf_r+0x1a>
 801afc6:	238b      	movs	r3, #139	@ 0x8b
 801afc8:	6003      	str	r3, [r0, #0]
 801afca:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801afce:	b01b      	add	sp, #108	@ 0x6c
 801afd0:	bd30      	pop	{r4, r5, pc}
 801afd2:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801afd6:	f8ad 300c 	strh.w	r3, [sp, #12]
 801afda:	f04f 0300 	mov.w	r3, #0
 801afde:	9319      	str	r3, [sp, #100]	@ 0x64
 801afe0:	bf14      	ite	ne
 801afe2:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801afe6:	4623      	moveq	r3, r4
 801afe8:	9302      	str	r3, [sp, #8]
 801afea:	9305      	str	r3, [sp, #20]
 801afec:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801aff0:	9100      	str	r1, [sp, #0]
 801aff2:	9104      	str	r1, [sp, #16]
 801aff4:	f8ad 300e 	strh.w	r3, [sp, #14]
 801aff8:	4669      	mov	r1, sp
 801affa:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801affc:	f000 fb32 	bl	801b664 <_svfiprintf_r>
 801b000:	1c43      	adds	r3, r0, #1
 801b002:	bfbc      	itt	lt
 801b004:	238b      	movlt	r3, #139	@ 0x8b
 801b006:	602b      	strlt	r3, [r5, #0]
 801b008:	2c00      	cmp	r4, #0
 801b00a:	d0e0      	beq.n	801afce <_vsniprintf_r+0x16>
 801b00c:	9b00      	ldr	r3, [sp, #0]
 801b00e:	2200      	movs	r2, #0
 801b010:	701a      	strb	r2, [r3, #0]
 801b012:	e7dc      	b.n	801afce <_vsniprintf_r+0x16>

0801b014 <vsniprintf>:
 801b014:	b507      	push	{r0, r1, r2, lr}
 801b016:	9300      	str	r3, [sp, #0]
 801b018:	4613      	mov	r3, r2
 801b01a:	460a      	mov	r2, r1
 801b01c:	4601      	mov	r1, r0
 801b01e:	4803      	ldr	r0, [pc, #12]	@ (801b02c <vsniprintf+0x18>)
 801b020:	6800      	ldr	r0, [r0, #0]
 801b022:	f7ff ffc9 	bl	801afb8 <_vsniprintf_r>
 801b026:	b003      	add	sp, #12
 801b028:	f85d fb04 	ldr.w	pc, [sp], #4
 801b02c:	20000a7c 	.word	0x20000a7c

0801b030 <_realloc_r>:
 801b030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b034:	4607      	mov	r7, r0
 801b036:	4614      	mov	r4, r2
 801b038:	460d      	mov	r5, r1
 801b03a:	b921      	cbnz	r1, 801b046 <_realloc_r+0x16>
 801b03c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b040:	4611      	mov	r1, r2
 801b042:	f7ff bddf 	b.w	801ac04 <_malloc_r>
 801b046:	b92a      	cbnz	r2, 801b054 <_realloc_r+0x24>
 801b048:	f000 fa66 	bl	801b518 <_free_r>
 801b04c:	4625      	mov	r5, r4
 801b04e:	4628      	mov	r0, r5
 801b050:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b054:	f000 ff7c 	bl	801bf50 <_malloc_usable_size_r>
 801b058:	4284      	cmp	r4, r0
 801b05a:	4606      	mov	r6, r0
 801b05c:	d802      	bhi.n	801b064 <_realloc_r+0x34>
 801b05e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801b062:	d8f4      	bhi.n	801b04e <_realloc_r+0x1e>
 801b064:	4621      	mov	r1, r4
 801b066:	4638      	mov	r0, r7
 801b068:	f7ff fdcc 	bl	801ac04 <_malloc_r>
 801b06c:	4680      	mov	r8, r0
 801b06e:	b908      	cbnz	r0, 801b074 <_realloc_r+0x44>
 801b070:	4645      	mov	r5, r8
 801b072:	e7ec      	b.n	801b04e <_realloc_r+0x1e>
 801b074:	42b4      	cmp	r4, r6
 801b076:	4622      	mov	r2, r4
 801b078:	4629      	mov	r1, r5
 801b07a:	bf28      	it	cs
 801b07c:	4632      	movcs	r2, r6
 801b07e:	f000 fa12 	bl	801b4a6 <memcpy>
 801b082:	4629      	mov	r1, r5
 801b084:	4638      	mov	r0, r7
 801b086:	f000 fa47 	bl	801b518 <_free_r>
 801b08a:	e7f1      	b.n	801b070 <_realloc_r+0x40>

0801b08c <_strtoul_l.isra.0>:
 801b08c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b090:	4e34      	ldr	r6, [pc, #208]	@ (801b164 <_strtoul_l.isra.0+0xd8>)
 801b092:	4686      	mov	lr, r0
 801b094:	460d      	mov	r5, r1
 801b096:	4628      	mov	r0, r5
 801b098:	f815 4b01 	ldrb.w	r4, [r5], #1
 801b09c:	5d37      	ldrb	r7, [r6, r4]
 801b09e:	f017 0708 	ands.w	r7, r7, #8
 801b0a2:	d1f8      	bne.n	801b096 <_strtoul_l.isra.0+0xa>
 801b0a4:	2c2d      	cmp	r4, #45	@ 0x2d
 801b0a6:	d110      	bne.n	801b0ca <_strtoul_l.isra.0+0x3e>
 801b0a8:	782c      	ldrb	r4, [r5, #0]
 801b0aa:	2701      	movs	r7, #1
 801b0ac:	1c85      	adds	r5, r0, #2
 801b0ae:	f033 0010 	bics.w	r0, r3, #16
 801b0b2:	d115      	bne.n	801b0e0 <_strtoul_l.isra.0+0x54>
 801b0b4:	2c30      	cmp	r4, #48	@ 0x30
 801b0b6:	d10d      	bne.n	801b0d4 <_strtoul_l.isra.0+0x48>
 801b0b8:	7828      	ldrb	r0, [r5, #0]
 801b0ba:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 801b0be:	2858      	cmp	r0, #88	@ 0x58
 801b0c0:	d108      	bne.n	801b0d4 <_strtoul_l.isra.0+0x48>
 801b0c2:	786c      	ldrb	r4, [r5, #1]
 801b0c4:	3502      	adds	r5, #2
 801b0c6:	2310      	movs	r3, #16
 801b0c8:	e00a      	b.n	801b0e0 <_strtoul_l.isra.0+0x54>
 801b0ca:	2c2b      	cmp	r4, #43	@ 0x2b
 801b0cc:	bf04      	itt	eq
 801b0ce:	782c      	ldrbeq	r4, [r5, #0]
 801b0d0:	1c85      	addeq	r5, r0, #2
 801b0d2:	e7ec      	b.n	801b0ae <_strtoul_l.isra.0+0x22>
 801b0d4:	2b00      	cmp	r3, #0
 801b0d6:	d1f6      	bne.n	801b0c6 <_strtoul_l.isra.0+0x3a>
 801b0d8:	2c30      	cmp	r4, #48	@ 0x30
 801b0da:	bf14      	ite	ne
 801b0dc:	230a      	movne	r3, #10
 801b0de:	2308      	moveq	r3, #8
 801b0e0:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 801b0e4:	2600      	movs	r6, #0
 801b0e6:	fbb8 f8f3 	udiv	r8, r8, r3
 801b0ea:	fb03 f908 	mul.w	r9, r3, r8
 801b0ee:	ea6f 0909 	mvn.w	r9, r9
 801b0f2:	4630      	mov	r0, r6
 801b0f4:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 801b0f8:	f1bc 0f09 	cmp.w	ip, #9
 801b0fc:	d810      	bhi.n	801b120 <_strtoul_l.isra.0+0x94>
 801b0fe:	4664      	mov	r4, ip
 801b100:	42a3      	cmp	r3, r4
 801b102:	dd1e      	ble.n	801b142 <_strtoul_l.isra.0+0xb6>
 801b104:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 801b108:	d007      	beq.n	801b11a <_strtoul_l.isra.0+0x8e>
 801b10a:	4580      	cmp	r8, r0
 801b10c:	d316      	bcc.n	801b13c <_strtoul_l.isra.0+0xb0>
 801b10e:	d101      	bne.n	801b114 <_strtoul_l.isra.0+0x88>
 801b110:	45a1      	cmp	r9, r4
 801b112:	db13      	blt.n	801b13c <_strtoul_l.isra.0+0xb0>
 801b114:	fb00 4003 	mla	r0, r0, r3, r4
 801b118:	2601      	movs	r6, #1
 801b11a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801b11e:	e7e9      	b.n	801b0f4 <_strtoul_l.isra.0+0x68>
 801b120:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 801b124:	f1bc 0f19 	cmp.w	ip, #25
 801b128:	d801      	bhi.n	801b12e <_strtoul_l.isra.0+0xa2>
 801b12a:	3c37      	subs	r4, #55	@ 0x37
 801b12c:	e7e8      	b.n	801b100 <_strtoul_l.isra.0+0x74>
 801b12e:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 801b132:	f1bc 0f19 	cmp.w	ip, #25
 801b136:	d804      	bhi.n	801b142 <_strtoul_l.isra.0+0xb6>
 801b138:	3c57      	subs	r4, #87	@ 0x57
 801b13a:	e7e1      	b.n	801b100 <_strtoul_l.isra.0+0x74>
 801b13c:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 801b140:	e7eb      	b.n	801b11a <_strtoul_l.isra.0+0x8e>
 801b142:	1c73      	adds	r3, r6, #1
 801b144:	d106      	bne.n	801b154 <_strtoul_l.isra.0+0xc8>
 801b146:	2322      	movs	r3, #34	@ 0x22
 801b148:	f8ce 3000 	str.w	r3, [lr]
 801b14c:	4630      	mov	r0, r6
 801b14e:	b932      	cbnz	r2, 801b15e <_strtoul_l.isra.0+0xd2>
 801b150:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b154:	b107      	cbz	r7, 801b158 <_strtoul_l.isra.0+0xcc>
 801b156:	4240      	negs	r0, r0
 801b158:	2a00      	cmp	r2, #0
 801b15a:	d0f9      	beq.n	801b150 <_strtoul_l.isra.0+0xc4>
 801b15c:	b106      	cbz	r6, 801b160 <_strtoul_l.isra.0+0xd4>
 801b15e:	1e69      	subs	r1, r5, #1
 801b160:	6011      	str	r1, [r2, #0]
 801b162:	e7f5      	b.n	801b150 <_strtoul_l.isra.0+0xc4>
 801b164:	0801e041 	.word	0x0801e041

0801b168 <strtoul>:
 801b168:	4613      	mov	r3, r2
 801b16a:	460a      	mov	r2, r1
 801b16c:	4601      	mov	r1, r0
 801b16e:	4802      	ldr	r0, [pc, #8]	@ (801b178 <strtoul+0x10>)
 801b170:	6800      	ldr	r0, [r0, #0]
 801b172:	f7ff bf8b 	b.w	801b08c <_strtoul_l.isra.0>
 801b176:	bf00      	nop
 801b178:	20000a7c 	.word	0x20000a7c

0801b17c <_fwalk_sglue>:
 801b17c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b180:	4607      	mov	r7, r0
 801b182:	4688      	mov	r8, r1
 801b184:	4614      	mov	r4, r2
 801b186:	2600      	movs	r6, #0
 801b188:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801b18c:	f1b9 0901 	subs.w	r9, r9, #1
 801b190:	d505      	bpl.n	801b19e <_fwalk_sglue+0x22>
 801b192:	6824      	ldr	r4, [r4, #0]
 801b194:	2c00      	cmp	r4, #0
 801b196:	d1f7      	bne.n	801b188 <_fwalk_sglue+0xc>
 801b198:	4630      	mov	r0, r6
 801b19a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b19e:	89ab      	ldrh	r3, [r5, #12]
 801b1a0:	2b01      	cmp	r3, #1
 801b1a2:	d907      	bls.n	801b1b4 <_fwalk_sglue+0x38>
 801b1a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801b1a8:	3301      	adds	r3, #1
 801b1aa:	d003      	beq.n	801b1b4 <_fwalk_sglue+0x38>
 801b1ac:	4629      	mov	r1, r5
 801b1ae:	4638      	mov	r0, r7
 801b1b0:	47c0      	blx	r8
 801b1b2:	4306      	orrs	r6, r0
 801b1b4:	3568      	adds	r5, #104	@ 0x68
 801b1b6:	e7e9      	b.n	801b18c <_fwalk_sglue+0x10>

0801b1b8 <_fwrite_r>:
 801b1b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b1bc:	9c08      	ldr	r4, [sp, #32]
 801b1be:	468a      	mov	sl, r1
 801b1c0:	4690      	mov	r8, r2
 801b1c2:	fb02 f903 	mul.w	r9, r2, r3
 801b1c6:	4606      	mov	r6, r0
 801b1c8:	b118      	cbz	r0, 801b1d2 <_fwrite_r+0x1a>
 801b1ca:	6a03      	ldr	r3, [r0, #32]
 801b1cc:	b90b      	cbnz	r3, 801b1d2 <_fwrite_r+0x1a>
 801b1ce:	f7ff fedb 	bl	801af88 <__sinit>
 801b1d2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801b1d4:	07dd      	lsls	r5, r3, #31
 801b1d6:	d405      	bmi.n	801b1e4 <_fwrite_r+0x2c>
 801b1d8:	89a3      	ldrh	r3, [r4, #12]
 801b1da:	0598      	lsls	r0, r3, #22
 801b1dc:	d402      	bmi.n	801b1e4 <_fwrite_r+0x2c>
 801b1de:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801b1e0:	f000 f957 	bl	801b492 <__retarget_lock_acquire_recursive>
 801b1e4:	89a3      	ldrh	r3, [r4, #12]
 801b1e6:	0719      	lsls	r1, r3, #28
 801b1e8:	d516      	bpl.n	801b218 <_fwrite_r+0x60>
 801b1ea:	6923      	ldr	r3, [r4, #16]
 801b1ec:	b1a3      	cbz	r3, 801b218 <_fwrite_r+0x60>
 801b1ee:	2500      	movs	r5, #0
 801b1f0:	454d      	cmp	r5, r9
 801b1f2:	d01f      	beq.n	801b234 <_fwrite_r+0x7c>
 801b1f4:	68a7      	ldr	r7, [r4, #8]
 801b1f6:	f81a 1005 	ldrb.w	r1, [sl, r5]
 801b1fa:	3f01      	subs	r7, #1
 801b1fc:	2f00      	cmp	r7, #0
 801b1fe:	60a7      	str	r7, [r4, #8]
 801b200:	da04      	bge.n	801b20c <_fwrite_r+0x54>
 801b202:	69a3      	ldr	r3, [r4, #24]
 801b204:	429f      	cmp	r7, r3
 801b206:	db0f      	blt.n	801b228 <_fwrite_r+0x70>
 801b208:	290a      	cmp	r1, #10
 801b20a:	d00d      	beq.n	801b228 <_fwrite_r+0x70>
 801b20c:	6823      	ldr	r3, [r4, #0]
 801b20e:	1c5a      	adds	r2, r3, #1
 801b210:	6022      	str	r2, [r4, #0]
 801b212:	7019      	strb	r1, [r3, #0]
 801b214:	3501      	adds	r5, #1
 801b216:	e7eb      	b.n	801b1f0 <_fwrite_r+0x38>
 801b218:	4621      	mov	r1, r4
 801b21a:	4630      	mov	r0, r6
 801b21c:	f000 ff34 	bl	801c088 <__swsetup_r>
 801b220:	2800      	cmp	r0, #0
 801b222:	d0e4      	beq.n	801b1ee <_fwrite_r+0x36>
 801b224:	2500      	movs	r5, #0
 801b226:	e005      	b.n	801b234 <_fwrite_r+0x7c>
 801b228:	4622      	mov	r2, r4
 801b22a:	4630      	mov	r0, r6
 801b22c:	f000 feee 	bl	801c00c <__swbuf_r>
 801b230:	3001      	adds	r0, #1
 801b232:	d1ef      	bne.n	801b214 <_fwrite_r+0x5c>
 801b234:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801b236:	07da      	lsls	r2, r3, #31
 801b238:	d405      	bmi.n	801b246 <_fwrite_r+0x8e>
 801b23a:	89a3      	ldrh	r3, [r4, #12]
 801b23c:	059b      	lsls	r3, r3, #22
 801b23e:	d402      	bmi.n	801b246 <_fwrite_r+0x8e>
 801b240:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801b242:	f000 f927 	bl	801b494 <__retarget_lock_release_recursive>
 801b246:	fbb5 f0f8 	udiv	r0, r5, r8
 801b24a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0801b250 <fwrite>:
 801b250:	b507      	push	{r0, r1, r2, lr}
 801b252:	9300      	str	r3, [sp, #0]
 801b254:	4613      	mov	r3, r2
 801b256:	460a      	mov	r2, r1
 801b258:	4601      	mov	r1, r0
 801b25a:	4803      	ldr	r0, [pc, #12]	@ (801b268 <fwrite+0x18>)
 801b25c:	6800      	ldr	r0, [r0, #0]
 801b25e:	f7ff ffab 	bl	801b1b8 <_fwrite_r>
 801b262:	b003      	add	sp, #12
 801b264:	f85d fb04 	ldr.w	pc, [sp], #4
 801b268:	20000a7c 	.word	0x20000a7c

0801b26c <iprintf>:
 801b26c:	b40f      	push	{r0, r1, r2, r3}
 801b26e:	b507      	push	{r0, r1, r2, lr}
 801b270:	4906      	ldr	r1, [pc, #24]	@ (801b28c <iprintf+0x20>)
 801b272:	ab04      	add	r3, sp, #16
 801b274:	6808      	ldr	r0, [r1, #0]
 801b276:	f853 2b04 	ldr.w	r2, [r3], #4
 801b27a:	6881      	ldr	r1, [r0, #8]
 801b27c:	9301      	str	r3, [sp, #4]
 801b27e:	f000 fb17 	bl	801b8b0 <_vfiprintf_r>
 801b282:	b003      	add	sp, #12
 801b284:	f85d eb04 	ldr.w	lr, [sp], #4
 801b288:	b004      	add	sp, #16
 801b28a:	4770      	bx	lr
 801b28c:	20000a7c 	.word	0x20000a7c

0801b290 <_puts_r>:
 801b290:	6a03      	ldr	r3, [r0, #32]
 801b292:	b570      	push	{r4, r5, r6, lr}
 801b294:	6884      	ldr	r4, [r0, #8]
 801b296:	4605      	mov	r5, r0
 801b298:	460e      	mov	r6, r1
 801b29a:	b90b      	cbnz	r3, 801b2a0 <_puts_r+0x10>
 801b29c:	f7ff fe74 	bl	801af88 <__sinit>
 801b2a0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801b2a2:	07db      	lsls	r3, r3, #31
 801b2a4:	d405      	bmi.n	801b2b2 <_puts_r+0x22>
 801b2a6:	89a3      	ldrh	r3, [r4, #12]
 801b2a8:	0598      	lsls	r0, r3, #22
 801b2aa:	d402      	bmi.n	801b2b2 <_puts_r+0x22>
 801b2ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801b2ae:	f000 f8f0 	bl	801b492 <__retarget_lock_acquire_recursive>
 801b2b2:	89a3      	ldrh	r3, [r4, #12]
 801b2b4:	0719      	lsls	r1, r3, #28
 801b2b6:	d502      	bpl.n	801b2be <_puts_r+0x2e>
 801b2b8:	6923      	ldr	r3, [r4, #16]
 801b2ba:	2b00      	cmp	r3, #0
 801b2bc:	d135      	bne.n	801b32a <_puts_r+0x9a>
 801b2be:	4621      	mov	r1, r4
 801b2c0:	4628      	mov	r0, r5
 801b2c2:	f000 fee1 	bl	801c088 <__swsetup_r>
 801b2c6:	b380      	cbz	r0, 801b32a <_puts_r+0x9a>
 801b2c8:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 801b2cc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801b2ce:	07da      	lsls	r2, r3, #31
 801b2d0:	d405      	bmi.n	801b2de <_puts_r+0x4e>
 801b2d2:	89a3      	ldrh	r3, [r4, #12]
 801b2d4:	059b      	lsls	r3, r3, #22
 801b2d6:	d402      	bmi.n	801b2de <_puts_r+0x4e>
 801b2d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801b2da:	f000 f8db 	bl	801b494 <__retarget_lock_release_recursive>
 801b2de:	4628      	mov	r0, r5
 801b2e0:	bd70      	pop	{r4, r5, r6, pc}
 801b2e2:	2b00      	cmp	r3, #0
 801b2e4:	da04      	bge.n	801b2f0 <_puts_r+0x60>
 801b2e6:	69a2      	ldr	r2, [r4, #24]
 801b2e8:	429a      	cmp	r2, r3
 801b2ea:	dc17      	bgt.n	801b31c <_puts_r+0x8c>
 801b2ec:	290a      	cmp	r1, #10
 801b2ee:	d015      	beq.n	801b31c <_puts_r+0x8c>
 801b2f0:	6823      	ldr	r3, [r4, #0]
 801b2f2:	1c5a      	adds	r2, r3, #1
 801b2f4:	6022      	str	r2, [r4, #0]
 801b2f6:	7019      	strb	r1, [r3, #0]
 801b2f8:	68a3      	ldr	r3, [r4, #8]
 801b2fa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801b2fe:	3b01      	subs	r3, #1
 801b300:	60a3      	str	r3, [r4, #8]
 801b302:	2900      	cmp	r1, #0
 801b304:	d1ed      	bne.n	801b2e2 <_puts_r+0x52>
 801b306:	2b00      	cmp	r3, #0
 801b308:	da11      	bge.n	801b32e <_puts_r+0x9e>
 801b30a:	4622      	mov	r2, r4
 801b30c:	210a      	movs	r1, #10
 801b30e:	4628      	mov	r0, r5
 801b310:	f000 fe7c 	bl	801c00c <__swbuf_r>
 801b314:	3001      	adds	r0, #1
 801b316:	d0d7      	beq.n	801b2c8 <_puts_r+0x38>
 801b318:	250a      	movs	r5, #10
 801b31a:	e7d7      	b.n	801b2cc <_puts_r+0x3c>
 801b31c:	4622      	mov	r2, r4
 801b31e:	4628      	mov	r0, r5
 801b320:	f000 fe74 	bl	801c00c <__swbuf_r>
 801b324:	3001      	adds	r0, #1
 801b326:	d1e7      	bne.n	801b2f8 <_puts_r+0x68>
 801b328:	e7ce      	b.n	801b2c8 <_puts_r+0x38>
 801b32a:	3e01      	subs	r6, #1
 801b32c:	e7e4      	b.n	801b2f8 <_puts_r+0x68>
 801b32e:	6823      	ldr	r3, [r4, #0]
 801b330:	1c5a      	adds	r2, r3, #1
 801b332:	6022      	str	r2, [r4, #0]
 801b334:	220a      	movs	r2, #10
 801b336:	701a      	strb	r2, [r3, #0]
 801b338:	e7ee      	b.n	801b318 <_puts_r+0x88>
	...

0801b33c <puts>:
 801b33c:	4b02      	ldr	r3, [pc, #8]	@ (801b348 <puts+0xc>)
 801b33e:	4601      	mov	r1, r0
 801b340:	6818      	ldr	r0, [r3, #0]
 801b342:	f7ff bfa5 	b.w	801b290 <_puts_r>
 801b346:	bf00      	nop
 801b348:	20000a7c 	.word	0x20000a7c

0801b34c <memcmp>:
 801b34c:	b510      	push	{r4, lr}
 801b34e:	3901      	subs	r1, #1
 801b350:	4402      	add	r2, r0
 801b352:	4290      	cmp	r0, r2
 801b354:	d101      	bne.n	801b35a <memcmp+0xe>
 801b356:	2000      	movs	r0, #0
 801b358:	e005      	b.n	801b366 <memcmp+0x1a>
 801b35a:	7803      	ldrb	r3, [r0, #0]
 801b35c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801b360:	42a3      	cmp	r3, r4
 801b362:	d001      	beq.n	801b368 <memcmp+0x1c>
 801b364:	1b18      	subs	r0, r3, r4
 801b366:	bd10      	pop	{r4, pc}
 801b368:	3001      	adds	r0, #1
 801b36a:	e7f2      	b.n	801b352 <memcmp+0x6>

0801b36c <memmove>:
 801b36c:	4288      	cmp	r0, r1
 801b36e:	b510      	push	{r4, lr}
 801b370:	eb01 0402 	add.w	r4, r1, r2
 801b374:	d902      	bls.n	801b37c <memmove+0x10>
 801b376:	4284      	cmp	r4, r0
 801b378:	4623      	mov	r3, r4
 801b37a:	d807      	bhi.n	801b38c <memmove+0x20>
 801b37c:	1e43      	subs	r3, r0, #1
 801b37e:	42a1      	cmp	r1, r4
 801b380:	d008      	beq.n	801b394 <memmove+0x28>
 801b382:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b386:	f803 2f01 	strb.w	r2, [r3, #1]!
 801b38a:	e7f8      	b.n	801b37e <memmove+0x12>
 801b38c:	4402      	add	r2, r0
 801b38e:	4601      	mov	r1, r0
 801b390:	428a      	cmp	r2, r1
 801b392:	d100      	bne.n	801b396 <memmove+0x2a>
 801b394:	bd10      	pop	{r4, pc}
 801b396:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801b39a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801b39e:	e7f7      	b.n	801b390 <memmove+0x24>

0801b3a0 <memset>:
 801b3a0:	4402      	add	r2, r0
 801b3a2:	4603      	mov	r3, r0
 801b3a4:	4293      	cmp	r3, r2
 801b3a6:	d100      	bne.n	801b3aa <memset+0xa>
 801b3a8:	4770      	bx	lr
 801b3aa:	f803 1b01 	strb.w	r1, [r3], #1
 801b3ae:	e7f9      	b.n	801b3a4 <memset+0x4>

0801b3b0 <strchr>:
 801b3b0:	b2c9      	uxtb	r1, r1
 801b3b2:	4603      	mov	r3, r0
 801b3b4:	4618      	mov	r0, r3
 801b3b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b3ba:	b112      	cbz	r2, 801b3c2 <strchr+0x12>
 801b3bc:	428a      	cmp	r2, r1
 801b3be:	d1f9      	bne.n	801b3b4 <strchr+0x4>
 801b3c0:	4770      	bx	lr
 801b3c2:	2900      	cmp	r1, #0
 801b3c4:	bf18      	it	ne
 801b3c6:	2000      	movne	r0, #0
 801b3c8:	4770      	bx	lr

0801b3ca <strncmp>:
 801b3ca:	b510      	push	{r4, lr}
 801b3cc:	b16a      	cbz	r2, 801b3ea <strncmp+0x20>
 801b3ce:	3901      	subs	r1, #1
 801b3d0:	1884      	adds	r4, r0, r2
 801b3d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b3d6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801b3da:	429a      	cmp	r2, r3
 801b3dc:	d103      	bne.n	801b3e6 <strncmp+0x1c>
 801b3de:	42a0      	cmp	r0, r4
 801b3e0:	d001      	beq.n	801b3e6 <strncmp+0x1c>
 801b3e2:	2a00      	cmp	r2, #0
 801b3e4:	d1f5      	bne.n	801b3d2 <strncmp+0x8>
 801b3e6:	1ad0      	subs	r0, r2, r3
 801b3e8:	bd10      	pop	{r4, pc}
 801b3ea:	4610      	mov	r0, r2
 801b3ec:	e7fc      	b.n	801b3e8 <strncmp+0x1e>

0801b3ee <strstr>:
 801b3ee:	780a      	ldrb	r2, [r1, #0]
 801b3f0:	b570      	push	{r4, r5, r6, lr}
 801b3f2:	b96a      	cbnz	r2, 801b410 <strstr+0x22>
 801b3f4:	bd70      	pop	{r4, r5, r6, pc}
 801b3f6:	429a      	cmp	r2, r3
 801b3f8:	d109      	bne.n	801b40e <strstr+0x20>
 801b3fa:	460c      	mov	r4, r1
 801b3fc:	4605      	mov	r5, r0
 801b3fe:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801b402:	2b00      	cmp	r3, #0
 801b404:	d0f6      	beq.n	801b3f4 <strstr+0x6>
 801b406:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801b40a:	429e      	cmp	r6, r3
 801b40c:	d0f7      	beq.n	801b3fe <strstr+0x10>
 801b40e:	3001      	adds	r0, #1
 801b410:	7803      	ldrb	r3, [r0, #0]
 801b412:	2b00      	cmp	r3, #0
 801b414:	d1ef      	bne.n	801b3f6 <strstr+0x8>
 801b416:	4618      	mov	r0, r3
 801b418:	e7ec      	b.n	801b3f4 <strstr+0x6>
	...

0801b41c <_sbrk_r>:
 801b41c:	b538      	push	{r3, r4, r5, lr}
 801b41e:	4d06      	ldr	r5, [pc, #24]	@ (801b438 <_sbrk_r+0x1c>)
 801b420:	2300      	movs	r3, #0
 801b422:	4604      	mov	r4, r0
 801b424:	4608      	mov	r0, r1
 801b426:	602b      	str	r3, [r5, #0]
 801b428:	f7e7 f9ce 	bl	80027c8 <_sbrk>
 801b42c:	1c43      	adds	r3, r0, #1
 801b42e:	d102      	bne.n	801b436 <_sbrk_r+0x1a>
 801b430:	682b      	ldr	r3, [r5, #0]
 801b432:	b103      	cbz	r3, 801b436 <_sbrk_r+0x1a>
 801b434:	6023      	str	r3, [r4, #0]
 801b436:	bd38      	pop	{r3, r4, r5, pc}
 801b438:	200160a8 	.word	0x200160a8

0801b43c <__errno>:
 801b43c:	4b01      	ldr	r3, [pc, #4]	@ (801b444 <__errno+0x8>)
 801b43e:	6818      	ldr	r0, [r3, #0]
 801b440:	4770      	bx	lr
 801b442:	bf00      	nop
 801b444:	20000a7c 	.word	0x20000a7c

0801b448 <__libc_init_array>:
 801b448:	b570      	push	{r4, r5, r6, lr}
 801b44a:	4d0d      	ldr	r5, [pc, #52]	@ (801b480 <__libc_init_array+0x38>)
 801b44c:	4c0d      	ldr	r4, [pc, #52]	@ (801b484 <__libc_init_array+0x3c>)
 801b44e:	1b64      	subs	r4, r4, r5
 801b450:	10a4      	asrs	r4, r4, #2
 801b452:	2600      	movs	r6, #0
 801b454:	42a6      	cmp	r6, r4
 801b456:	d109      	bne.n	801b46c <__libc_init_array+0x24>
 801b458:	4d0b      	ldr	r5, [pc, #44]	@ (801b488 <__libc_init_array+0x40>)
 801b45a:	4c0c      	ldr	r4, [pc, #48]	@ (801b48c <__libc_init_array+0x44>)
 801b45c:	f000 ff80 	bl	801c360 <_init>
 801b460:	1b64      	subs	r4, r4, r5
 801b462:	10a4      	asrs	r4, r4, #2
 801b464:	2600      	movs	r6, #0
 801b466:	42a6      	cmp	r6, r4
 801b468:	d105      	bne.n	801b476 <__libc_init_array+0x2e>
 801b46a:	bd70      	pop	{r4, r5, r6, pc}
 801b46c:	f855 3b04 	ldr.w	r3, [r5], #4
 801b470:	4798      	blx	r3
 801b472:	3601      	adds	r6, #1
 801b474:	e7ee      	b.n	801b454 <__libc_init_array+0xc>
 801b476:	f855 3b04 	ldr.w	r3, [r5], #4
 801b47a:	4798      	blx	r3
 801b47c:	3601      	adds	r6, #1
 801b47e:	e7f2      	b.n	801b466 <__libc_init_array+0x1e>
 801b480:	0801e14c 	.word	0x0801e14c
 801b484:	0801e14c 	.word	0x0801e14c
 801b488:	0801e14c 	.word	0x0801e14c
 801b48c:	0801e164 	.word	0x0801e164

0801b490 <__retarget_lock_init_recursive>:
 801b490:	4770      	bx	lr

0801b492 <__retarget_lock_acquire_recursive>:
 801b492:	4770      	bx	lr

0801b494 <__retarget_lock_release_recursive>:
 801b494:	4770      	bx	lr

0801b496 <strcpy>:
 801b496:	4603      	mov	r3, r0
 801b498:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b49c:	f803 2b01 	strb.w	r2, [r3], #1
 801b4a0:	2a00      	cmp	r2, #0
 801b4a2:	d1f9      	bne.n	801b498 <strcpy+0x2>
 801b4a4:	4770      	bx	lr

0801b4a6 <memcpy>:
 801b4a6:	440a      	add	r2, r1
 801b4a8:	4291      	cmp	r1, r2
 801b4aa:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 801b4ae:	d100      	bne.n	801b4b2 <memcpy+0xc>
 801b4b0:	4770      	bx	lr
 801b4b2:	b510      	push	{r4, lr}
 801b4b4:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b4b8:	f803 4f01 	strb.w	r4, [r3, #1]!
 801b4bc:	4291      	cmp	r1, r2
 801b4be:	d1f9      	bne.n	801b4b4 <memcpy+0xe>
 801b4c0:	bd10      	pop	{r4, pc}
	...

0801b4c4 <__assert_func>:
 801b4c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801b4c6:	4614      	mov	r4, r2
 801b4c8:	461a      	mov	r2, r3
 801b4ca:	4b09      	ldr	r3, [pc, #36]	@ (801b4f0 <__assert_func+0x2c>)
 801b4cc:	681b      	ldr	r3, [r3, #0]
 801b4ce:	4605      	mov	r5, r0
 801b4d0:	68d8      	ldr	r0, [r3, #12]
 801b4d2:	b14c      	cbz	r4, 801b4e8 <__assert_func+0x24>
 801b4d4:	4b07      	ldr	r3, [pc, #28]	@ (801b4f4 <__assert_func+0x30>)
 801b4d6:	9100      	str	r1, [sp, #0]
 801b4d8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801b4dc:	4906      	ldr	r1, [pc, #24]	@ (801b4f8 <__assert_func+0x34>)
 801b4de:	462b      	mov	r3, r5
 801b4e0:	f000 fd82 	bl	801bfe8 <fiprintf>
 801b4e4:	f000 fef0 	bl	801c2c8 <abort>
 801b4e8:	4b04      	ldr	r3, [pc, #16]	@ (801b4fc <__assert_func+0x38>)
 801b4ea:	461c      	mov	r4, r3
 801b4ec:	e7f3      	b.n	801b4d6 <__assert_func+0x12>
 801b4ee:	bf00      	nop
 801b4f0:	20000a7c 	.word	0x20000a7c
 801b4f4:	0801df5b 	.word	0x0801df5b
 801b4f8:	0801df68 	.word	0x0801df68
 801b4fc:	0801df96 	.word	0x0801df96

0801b500 <__env_lock>:
 801b500:	4801      	ldr	r0, [pc, #4]	@ (801b508 <__env_lock+0x8>)
 801b502:	f7ff bfc6 	b.w	801b492 <__retarget_lock_acquire_recursive>
 801b506:	bf00      	nop
 801b508:	200160a4 	.word	0x200160a4

0801b50c <__env_unlock>:
 801b50c:	4801      	ldr	r0, [pc, #4]	@ (801b514 <__env_unlock+0x8>)
 801b50e:	f7ff bfc1 	b.w	801b494 <__retarget_lock_release_recursive>
 801b512:	bf00      	nop
 801b514:	200160a4 	.word	0x200160a4

0801b518 <_free_r>:
 801b518:	b538      	push	{r3, r4, r5, lr}
 801b51a:	4605      	mov	r5, r0
 801b51c:	2900      	cmp	r1, #0
 801b51e:	d041      	beq.n	801b5a4 <_free_r+0x8c>
 801b520:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b524:	1f0c      	subs	r4, r1, #4
 801b526:	2b00      	cmp	r3, #0
 801b528:	bfb8      	it	lt
 801b52a:	18e4      	addlt	r4, r4, r3
 801b52c:	f7ff fc20 	bl	801ad70 <__malloc_lock>
 801b530:	4a1d      	ldr	r2, [pc, #116]	@ (801b5a8 <_free_r+0x90>)
 801b532:	6813      	ldr	r3, [r2, #0]
 801b534:	b933      	cbnz	r3, 801b544 <_free_r+0x2c>
 801b536:	6063      	str	r3, [r4, #4]
 801b538:	6014      	str	r4, [r2, #0]
 801b53a:	4628      	mov	r0, r5
 801b53c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b540:	f7ff bc1c 	b.w	801ad7c <__malloc_unlock>
 801b544:	42a3      	cmp	r3, r4
 801b546:	d908      	bls.n	801b55a <_free_r+0x42>
 801b548:	6820      	ldr	r0, [r4, #0]
 801b54a:	1821      	adds	r1, r4, r0
 801b54c:	428b      	cmp	r3, r1
 801b54e:	bf01      	itttt	eq
 801b550:	6819      	ldreq	r1, [r3, #0]
 801b552:	685b      	ldreq	r3, [r3, #4]
 801b554:	1809      	addeq	r1, r1, r0
 801b556:	6021      	streq	r1, [r4, #0]
 801b558:	e7ed      	b.n	801b536 <_free_r+0x1e>
 801b55a:	461a      	mov	r2, r3
 801b55c:	685b      	ldr	r3, [r3, #4]
 801b55e:	b10b      	cbz	r3, 801b564 <_free_r+0x4c>
 801b560:	42a3      	cmp	r3, r4
 801b562:	d9fa      	bls.n	801b55a <_free_r+0x42>
 801b564:	6811      	ldr	r1, [r2, #0]
 801b566:	1850      	adds	r0, r2, r1
 801b568:	42a0      	cmp	r0, r4
 801b56a:	d10b      	bne.n	801b584 <_free_r+0x6c>
 801b56c:	6820      	ldr	r0, [r4, #0]
 801b56e:	4401      	add	r1, r0
 801b570:	1850      	adds	r0, r2, r1
 801b572:	4283      	cmp	r3, r0
 801b574:	6011      	str	r1, [r2, #0]
 801b576:	d1e0      	bne.n	801b53a <_free_r+0x22>
 801b578:	6818      	ldr	r0, [r3, #0]
 801b57a:	685b      	ldr	r3, [r3, #4]
 801b57c:	6053      	str	r3, [r2, #4]
 801b57e:	4408      	add	r0, r1
 801b580:	6010      	str	r0, [r2, #0]
 801b582:	e7da      	b.n	801b53a <_free_r+0x22>
 801b584:	d902      	bls.n	801b58c <_free_r+0x74>
 801b586:	230c      	movs	r3, #12
 801b588:	602b      	str	r3, [r5, #0]
 801b58a:	e7d6      	b.n	801b53a <_free_r+0x22>
 801b58c:	6820      	ldr	r0, [r4, #0]
 801b58e:	1821      	adds	r1, r4, r0
 801b590:	428b      	cmp	r3, r1
 801b592:	bf04      	itt	eq
 801b594:	6819      	ldreq	r1, [r3, #0]
 801b596:	685b      	ldreq	r3, [r3, #4]
 801b598:	6063      	str	r3, [r4, #4]
 801b59a:	bf04      	itt	eq
 801b59c:	1809      	addeq	r1, r1, r0
 801b59e:	6021      	streq	r1, [r4, #0]
 801b5a0:	6054      	str	r4, [r2, #4]
 801b5a2:	e7ca      	b.n	801b53a <_free_r+0x22>
 801b5a4:	bd38      	pop	{r3, r4, r5, pc}
 801b5a6:	bf00      	nop
 801b5a8:	20015f64 	.word	0x20015f64

0801b5ac <__ssputs_r>:
 801b5ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b5b0:	688e      	ldr	r6, [r1, #8]
 801b5b2:	461f      	mov	r7, r3
 801b5b4:	42be      	cmp	r6, r7
 801b5b6:	680b      	ldr	r3, [r1, #0]
 801b5b8:	4682      	mov	sl, r0
 801b5ba:	460c      	mov	r4, r1
 801b5bc:	4690      	mov	r8, r2
 801b5be:	d82d      	bhi.n	801b61c <__ssputs_r+0x70>
 801b5c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801b5c4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801b5c8:	d026      	beq.n	801b618 <__ssputs_r+0x6c>
 801b5ca:	6965      	ldr	r5, [r4, #20]
 801b5cc:	6909      	ldr	r1, [r1, #16]
 801b5ce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b5d2:	eba3 0901 	sub.w	r9, r3, r1
 801b5d6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801b5da:	1c7b      	adds	r3, r7, #1
 801b5dc:	444b      	add	r3, r9
 801b5de:	106d      	asrs	r5, r5, #1
 801b5e0:	429d      	cmp	r5, r3
 801b5e2:	bf38      	it	cc
 801b5e4:	461d      	movcc	r5, r3
 801b5e6:	0553      	lsls	r3, r2, #21
 801b5e8:	d527      	bpl.n	801b63a <__ssputs_r+0x8e>
 801b5ea:	4629      	mov	r1, r5
 801b5ec:	f7ff fb0a 	bl	801ac04 <_malloc_r>
 801b5f0:	4606      	mov	r6, r0
 801b5f2:	b360      	cbz	r0, 801b64e <__ssputs_r+0xa2>
 801b5f4:	6921      	ldr	r1, [r4, #16]
 801b5f6:	464a      	mov	r2, r9
 801b5f8:	f7ff ff55 	bl	801b4a6 <memcpy>
 801b5fc:	89a3      	ldrh	r3, [r4, #12]
 801b5fe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801b602:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801b606:	81a3      	strh	r3, [r4, #12]
 801b608:	6126      	str	r6, [r4, #16]
 801b60a:	6165      	str	r5, [r4, #20]
 801b60c:	444e      	add	r6, r9
 801b60e:	eba5 0509 	sub.w	r5, r5, r9
 801b612:	6026      	str	r6, [r4, #0]
 801b614:	60a5      	str	r5, [r4, #8]
 801b616:	463e      	mov	r6, r7
 801b618:	42be      	cmp	r6, r7
 801b61a:	d900      	bls.n	801b61e <__ssputs_r+0x72>
 801b61c:	463e      	mov	r6, r7
 801b61e:	6820      	ldr	r0, [r4, #0]
 801b620:	4632      	mov	r2, r6
 801b622:	4641      	mov	r1, r8
 801b624:	f7ff fea2 	bl	801b36c <memmove>
 801b628:	68a3      	ldr	r3, [r4, #8]
 801b62a:	1b9b      	subs	r3, r3, r6
 801b62c:	60a3      	str	r3, [r4, #8]
 801b62e:	6823      	ldr	r3, [r4, #0]
 801b630:	4433      	add	r3, r6
 801b632:	6023      	str	r3, [r4, #0]
 801b634:	2000      	movs	r0, #0
 801b636:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b63a:	462a      	mov	r2, r5
 801b63c:	f7ff fcf8 	bl	801b030 <_realloc_r>
 801b640:	4606      	mov	r6, r0
 801b642:	2800      	cmp	r0, #0
 801b644:	d1e0      	bne.n	801b608 <__ssputs_r+0x5c>
 801b646:	6921      	ldr	r1, [r4, #16]
 801b648:	4650      	mov	r0, sl
 801b64a:	f7ff ff65 	bl	801b518 <_free_r>
 801b64e:	230c      	movs	r3, #12
 801b650:	f8ca 3000 	str.w	r3, [sl]
 801b654:	89a3      	ldrh	r3, [r4, #12]
 801b656:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b65a:	81a3      	strh	r3, [r4, #12]
 801b65c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801b660:	e7e9      	b.n	801b636 <__ssputs_r+0x8a>
	...

0801b664 <_svfiprintf_r>:
 801b664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b668:	4698      	mov	r8, r3
 801b66a:	898b      	ldrh	r3, [r1, #12]
 801b66c:	061b      	lsls	r3, r3, #24
 801b66e:	b09d      	sub	sp, #116	@ 0x74
 801b670:	4607      	mov	r7, r0
 801b672:	460d      	mov	r5, r1
 801b674:	4614      	mov	r4, r2
 801b676:	d510      	bpl.n	801b69a <_svfiprintf_r+0x36>
 801b678:	690b      	ldr	r3, [r1, #16]
 801b67a:	b973      	cbnz	r3, 801b69a <_svfiprintf_r+0x36>
 801b67c:	2140      	movs	r1, #64	@ 0x40
 801b67e:	f7ff fac1 	bl	801ac04 <_malloc_r>
 801b682:	6028      	str	r0, [r5, #0]
 801b684:	6128      	str	r0, [r5, #16]
 801b686:	b930      	cbnz	r0, 801b696 <_svfiprintf_r+0x32>
 801b688:	230c      	movs	r3, #12
 801b68a:	603b      	str	r3, [r7, #0]
 801b68c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801b690:	b01d      	add	sp, #116	@ 0x74
 801b692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b696:	2340      	movs	r3, #64	@ 0x40
 801b698:	616b      	str	r3, [r5, #20]
 801b69a:	2300      	movs	r3, #0
 801b69c:	9309      	str	r3, [sp, #36]	@ 0x24
 801b69e:	2320      	movs	r3, #32
 801b6a0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801b6a4:	f8cd 800c 	str.w	r8, [sp, #12]
 801b6a8:	2330      	movs	r3, #48	@ 0x30
 801b6aa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801b848 <_svfiprintf_r+0x1e4>
 801b6ae:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801b6b2:	f04f 0901 	mov.w	r9, #1
 801b6b6:	4623      	mov	r3, r4
 801b6b8:	469a      	mov	sl, r3
 801b6ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b6be:	b10a      	cbz	r2, 801b6c4 <_svfiprintf_r+0x60>
 801b6c0:	2a25      	cmp	r2, #37	@ 0x25
 801b6c2:	d1f9      	bne.n	801b6b8 <_svfiprintf_r+0x54>
 801b6c4:	ebba 0b04 	subs.w	fp, sl, r4
 801b6c8:	d00b      	beq.n	801b6e2 <_svfiprintf_r+0x7e>
 801b6ca:	465b      	mov	r3, fp
 801b6cc:	4622      	mov	r2, r4
 801b6ce:	4629      	mov	r1, r5
 801b6d0:	4638      	mov	r0, r7
 801b6d2:	f7ff ff6b 	bl	801b5ac <__ssputs_r>
 801b6d6:	3001      	adds	r0, #1
 801b6d8:	f000 80a7 	beq.w	801b82a <_svfiprintf_r+0x1c6>
 801b6dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801b6de:	445a      	add	r2, fp
 801b6e0:	9209      	str	r2, [sp, #36]	@ 0x24
 801b6e2:	f89a 3000 	ldrb.w	r3, [sl]
 801b6e6:	2b00      	cmp	r3, #0
 801b6e8:	f000 809f 	beq.w	801b82a <_svfiprintf_r+0x1c6>
 801b6ec:	2300      	movs	r3, #0
 801b6ee:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801b6f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b6f6:	f10a 0a01 	add.w	sl, sl, #1
 801b6fa:	9304      	str	r3, [sp, #16]
 801b6fc:	9307      	str	r3, [sp, #28]
 801b6fe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801b702:	931a      	str	r3, [sp, #104]	@ 0x68
 801b704:	4654      	mov	r4, sl
 801b706:	2205      	movs	r2, #5
 801b708:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b70c:	484e      	ldr	r0, [pc, #312]	@ (801b848 <_svfiprintf_r+0x1e4>)
 801b70e:	f7e4 fd8f 	bl	8000230 <memchr>
 801b712:	9a04      	ldr	r2, [sp, #16]
 801b714:	b9d8      	cbnz	r0, 801b74e <_svfiprintf_r+0xea>
 801b716:	06d0      	lsls	r0, r2, #27
 801b718:	bf44      	itt	mi
 801b71a:	2320      	movmi	r3, #32
 801b71c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801b720:	0711      	lsls	r1, r2, #28
 801b722:	bf44      	itt	mi
 801b724:	232b      	movmi	r3, #43	@ 0x2b
 801b726:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801b72a:	f89a 3000 	ldrb.w	r3, [sl]
 801b72e:	2b2a      	cmp	r3, #42	@ 0x2a
 801b730:	d015      	beq.n	801b75e <_svfiprintf_r+0xfa>
 801b732:	9a07      	ldr	r2, [sp, #28]
 801b734:	4654      	mov	r4, sl
 801b736:	2000      	movs	r0, #0
 801b738:	f04f 0c0a 	mov.w	ip, #10
 801b73c:	4621      	mov	r1, r4
 801b73e:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b742:	3b30      	subs	r3, #48	@ 0x30
 801b744:	2b09      	cmp	r3, #9
 801b746:	d94b      	bls.n	801b7e0 <_svfiprintf_r+0x17c>
 801b748:	b1b0      	cbz	r0, 801b778 <_svfiprintf_r+0x114>
 801b74a:	9207      	str	r2, [sp, #28]
 801b74c:	e014      	b.n	801b778 <_svfiprintf_r+0x114>
 801b74e:	eba0 0308 	sub.w	r3, r0, r8
 801b752:	fa09 f303 	lsl.w	r3, r9, r3
 801b756:	4313      	orrs	r3, r2
 801b758:	9304      	str	r3, [sp, #16]
 801b75a:	46a2      	mov	sl, r4
 801b75c:	e7d2      	b.n	801b704 <_svfiprintf_r+0xa0>
 801b75e:	9b03      	ldr	r3, [sp, #12]
 801b760:	1d19      	adds	r1, r3, #4
 801b762:	681b      	ldr	r3, [r3, #0]
 801b764:	9103      	str	r1, [sp, #12]
 801b766:	2b00      	cmp	r3, #0
 801b768:	bfbb      	ittet	lt
 801b76a:	425b      	neglt	r3, r3
 801b76c:	f042 0202 	orrlt.w	r2, r2, #2
 801b770:	9307      	strge	r3, [sp, #28]
 801b772:	9307      	strlt	r3, [sp, #28]
 801b774:	bfb8      	it	lt
 801b776:	9204      	strlt	r2, [sp, #16]
 801b778:	7823      	ldrb	r3, [r4, #0]
 801b77a:	2b2e      	cmp	r3, #46	@ 0x2e
 801b77c:	d10a      	bne.n	801b794 <_svfiprintf_r+0x130>
 801b77e:	7863      	ldrb	r3, [r4, #1]
 801b780:	2b2a      	cmp	r3, #42	@ 0x2a
 801b782:	d132      	bne.n	801b7ea <_svfiprintf_r+0x186>
 801b784:	9b03      	ldr	r3, [sp, #12]
 801b786:	1d1a      	adds	r2, r3, #4
 801b788:	681b      	ldr	r3, [r3, #0]
 801b78a:	9203      	str	r2, [sp, #12]
 801b78c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801b790:	3402      	adds	r4, #2
 801b792:	9305      	str	r3, [sp, #20]
 801b794:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801b858 <_svfiprintf_r+0x1f4>
 801b798:	7821      	ldrb	r1, [r4, #0]
 801b79a:	2203      	movs	r2, #3
 801b79c:	4650      	mov	r0, sl
 801b79e:	f7e4 fd47 	bl	8000230 <memchr>
 801b7a2:	b138      	cbz	r0, 801b7b4 <_svfiprintf_r+0x150>
 801b7a4:	9b04      	ldr	r3, [sp, #16]
 801b7a6:	eba0 000a 	sub.w	r0, r0, sl
 801b7aa:	2240      	movs	r2, #64	@ 0x40
 801b7ac:	4082      	lsls	r2, r0
 801b7ae:	4313      	orrs	r3, r2
 801b7b0:	3401      	adds	r4, #1
 801b7b2:	9304      	str	r3, [sp, #16]
 801b7b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b7b8:	4824      	ldr	r0, [pc, #144]	@ (801b84c <_svfiprintf_r+0x1e8>)
 801b7ba:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801b7be:	2206      	movs	r2, #6
 801b7c0:	f7e4 fd36 	bl	8000230 <memchr>
 801b7c4:	2800      	cmp	r0, #0
 801b7c6:	d036      	beq.n	801b836 <_svfiprintf_r+0x1d2>
 801b7c8:	4b21      	ldr	r3, [pc, #132]	@ (801b850 <_svfiprintf_r+0x1ec>)
 801b7ca:	bb1b      	cbnz	r3, 801b814 <_svfiprintf_r+0x1b0>
 801b7cc:	9b03      	ldr	r3, [sp, #12]
 801b7ce:	3307      	adds	r3, #7
 801b7d0:	f023 0307 	bic.w	r3, r3, #7
 801b7d4:	3308      	adds	r3, #8
 801b7d6:	9303      	str	r3, [sp, #12]
 801b7d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b7da:	4433      	add	r3, r6
 801b7dc:	9309      	str	r3, [sp, #36]	@ 0x24
 801b7de:	e76a      	b.n	801b6b6 <_svfiprintf_r+0x52>
 801b7e0:	fb0c 3202 	mla	r2, ip, r2, r3
 801b7e4:	460c      	mov	r4, r1
 801b7e6:	2001      	movs	r0, #1
 801b7e8:	e7a8      	b.n	801b73c <_svfiprintf_r+0xd8>
 801b7ea:	2300      	movs	r3, #0
 801b7ec:	3401      	adds	r4, #1
 801b7ee:	9305      	str	r3, [sp, #20]
 801b7f0:	4619      	mov	r1, r3
 801b7f2:	f04f 0c0a 	mov.w	ip, #10
 801b7f6:	4620      	mov	r0, r4
 801b7f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b7fc:	3a30      	subs	r2, #48	@ 0x30
 801b7fe:	2a09      	cmp	r2, #9
 801b800:	d903      	bls.n	801b80a <_svfiprintf_r+0x1a6>
 801b802:	2b00      	cmp	r3, #0
 801b804:	d0c6      	beq.n	801b794 <_svfiprintf_r+0x130>
 801b806:	9105      	str	r1, [sp, #20]
 801b808:	e7c4      	b.n	801b794 <_svfiprintf_r+0x130>
 801b80a:	fb0c 2101 	mla	r1, ip, r1, r2
 801b80e:	4604      	mov	r4, r0
 801b810:	2301      	movs	r3, #1
 801b812:	e7f0      	b.n	801b7f6 <_svfiprintf_r+0x192>
 801b814:	ab03      	add	r3, sp, #12
 801b816:	9300      	str	r3, [sp, #0]
 801b818:	462a      	mov	r2, r5
 801b81a:	4b0e      	ldr	r3, [pc, #56]	@ (801b854 <_svfiprintf_r+0x1f0>)
 801b81c:	a904      	add	r1, sp, #16
 801b81e:	4638      	mov	r0, r7
 801b820:	f3af 8000 	nop.w
 801b824:	1c42      	adds	r2, r0, #1
 801b826:	4606      	mov	r6, r0
 801b828:	d1d6      	bne.n	801b7d8 <_svfiprintf_r+0x174>
 801b82a:	89ab      	ldrh	r3, [r5, #12]
 801b82c:	065b      	lsls	r3, r3, #25
 801b82e:	f53f af2d 	bmi.w	801b68c <_svfiprintf_r+0x28>
 801b832:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801b834:	e72c      	b.n	801b690 <_svfiprintf_r+0x2c>
 801b836:	ab03      	add	r3, sp, #12
 801b838:	9300      	str	r3, [sp, #0]
 801b83a:	462a      	mov	r2, r5
 801b83c:	4b05      	ldr	r3, [pc, #20]	@ (801b854 <_svfiprintf_r+0x1f0>)
 801b83e:	a904      	add	r1, sp, #16
 801b840:	4638      	mov	r0, r7
 801b842:	f000 f9bb 	bl	801bbbc <_printf_i>
 801b846:	e7ed      	b.n	801b824 <_svfiprintf_r+0x1c0>
 801b848:	0801df97 	.word	0x0801df97
 801b84c:	0801dfa1 	.word	0x0801dfa1
 801b850:	00000000 	.word	0x00000000
 801b854:	0801b5ad 	.word	0x0801b5ad
 801b858:	0801df9d 	.word	0x0801df9d

0801b85c <__sfputc_r>:
 801b85c:	6893      	ldr	r3, [r2, #8]
 801b85e:	3b01      	subs	r3, #1
 801b860:	2b00      	cmp	r3, #0
 801b862:	b410      	push	{r4}
 801b864:	6093      	str	r3, [r2, #8]
 801b866:	da08      	bge.n	801b87a <__sfputc_r+0x1e>
 801b868:	6994      	ldr	r4, [r2, #24]
 801b86a:	42a3      	cmp	r3, r4
 801b86c:	db01      	blt.n	801b872 <__sfputc_r+0x16>
 801b86e:	290a      	cmp	r1, #10
 801b870:	d103      	bne.n	801b87a <__sfputc_r+0x1e>
 801b872:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b876:	f000 bbc9 	b.w	801c00c <__swbuf_r>
 801b87a:	6813      	ldr	r3, [r2, #0]
 801b87c:	1c58      	adds	r0, r3, #1
 801b87e:	6010      	str	r0, [r2, #0]
 801b880:	7019      	strb	r1, [r3, #0]
 801b882:	4608      	mov	r0, r1
 801b884:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b888:	4770      	bx	lr

0801b88a <__sfputs_r>:
 801b88a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b88c:	4606      	mov	r6, r0
 801b88e:	460f      	mov	r7, r1
 801b890:	4614      	mov	r4, r2
 801b892:	18d5      	adds	r5, r2, r3
 801b894:	42ac      	cmp	r4, r5
 801b896:	d101      	bne.n	801b89c <__sfputs_r+0x12>
 801b898:	2000      	movs	r0, #0
 801b89a:	e007      	b.n	801b8ac <__sfputs_r+0x22>
 801b89c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b8a0:	463a      	mov	r2, r7
 801b8a2:	4630      	mov	r0, r6
 801b8a4:	f7ff ffda 	bl	801b85c <__sfputc_r>
 801b8a8:	1c43      	adds	r3, r0, #1
 801b8aa:	d1f3      	bne.n	801b894 <__sfputs_r+0xa>
 801b8ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801b8b0 <_vfiprintf_r>:
 801b8b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b8b4:	460d      	mov	r5, r1
 801b8b6:	b09d      	sub	sp, #116	@ 0x74
 801b8b8:	4614      	mov	r4, r2
 801b8ba:	4698      	mov	r8, r3
 801b8bc:	4606      	mov	r6, r0
 801b8be:	b118      	cbz	r0, 801b8c8 <_vfiprintf_r+0x18>
 801b8c0:	6a03      	ldr	r3, [r0, #32]
 801b8c2:	b90b      	cbnz	r3, 801b8c8 <_vfiprintf_r+0x18>
 801b8c4:	f7ff fb60 	bl	801af88 <__sinit>
 801b8c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801b8ca:	07d9      	lsls	r1, r3, #31
 801b8cc:	d405      	bmi.n	801b8da <_vfiprintf_r+0x2a>
 801b8ce:	89ab      	ldrh	r3, [r5, #12]
 801b8d0:	059a      	lsls	r2, r3, #22
 801b8d2:	d402      	bmi.n	801b8da <_vfiprintf_r+0x2a>
 801b8d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801b8d6:	f7ff fddc 	bl	801b492 <__retarget_lock_acquire_recursive>
 801b8da:	89ab      	ldrh	r3, [r5, #12]
 801b8dc:	071b      	lsls	r3, r3, #28
 801b8de:	d501      	bpl.n	801b8e4 <_vfiprintf_r+0x34>
 801b8e0:	692b      	ldr	r3, [r5, #16]
 801b8e2:	b99b      	cbnz	r3, 801b90c <_vfiprintf_r+0x5c>
 801b8e4:	4629      	mov	r1, r5
 801b8e6:	4630      	mov	r0, r6
 801b8e8:	f000 fbce 	bl	801c088 <__swsetup_r>
 801b8ec:	b170      	cbz	r0, 801b90c <_vfiprintf_r+0x5c>
 801b8ee:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801b8f0:	07dc      	lsls	r4, r3, #31
 801b8f2:	d504      	bpl.n	801b8fe <_vfiprintf_r+0x4e>
 801b8f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801b8f8:	b01d      	add	sp, #116	@ 0x74
 801b8fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b8fe:	89ab      	ldrh	r3, [r5, #12]
 801b900:	0598      	lsls	r0, r3, #22
 801b902:	d4f7      	bmi.n	801b8f4 <_vfiprintf_r+0x44>
 801b904:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801b906:	f7ff fdc5 	bl	801b494 <__retarget_lock_release_recursive>
 801b90a:	e7f3      	b.n	801b8f4 <_vfiprintf_r+0x44>
 801b90c:	2300      	movs	r3, #0
 801b90e:	9309      	str	r3, [sp, #36]	@ 0x24
 801b910:	2320      	movs	r3, #32
 801b912:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801b916:	f8cd 800c 	str.w	r8, [sp, #12]
 801b91a:	2330      	movs	r3, #48	@ 0x30
 801b91c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801bacc <_vfiprintf_r+0x21c>
 801b920:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801b924:	f04f 0901 	mov.w	r9, #1
 801b928:	4623      	mov	r3, r4
 801b92a:	469a      	mov	sl, r3
 801b92c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b930:	b10a      	cbz	r2, 801b936 <_vfiprintf_r+0x86>
 801b932:	2a25      	cmp	r2, #37	@ 0x25
 801b934:	d1f9      	bne.n	801b92a <_vfiprintf_r+0x7a>
 801b936:	ebba 0b04 	subs.w	fp, sl, r4
 801b93a:	d00b      	beq.n	801b954 <_vfiprintf_r+0xa4>
 801b93c:	465b      	mov	r3, fp
 801b93e:	4622      	mov	r2, r4
 801b940:	4629      	mov	r1, r5
 801b942:	4630      	mov	r0, r6
 801b944:	f7ff ffa1 	bl	801b88a <__sfputs_r>
 801b948:	3001      	adds	r0, #1
 801b94a:	f000 80a7 	beq.w	801ba9c <_vfiprintf_r+0x1ec>
 801b94e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801b950:	445a      	add	r2, fp
 801b952:	9209      	str	r2, [sp, #36]	@ 0x24
 801b954:	f89a 3000 	ldrb.w	r3, [sl]
 801b958:	2b00      	cmp	r3, #0
 801b95a:	f000 809f 	beq.w	801ba9c <_vfiprintf_r+0x1ec>
 801b95e:	2300      	movs	r3, #0
 801b960:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801b964:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b968:	f10a 0a01 	add.w	sl, sl, #1
 801b96c:	9304      	str	r3, [sp, #16]
 801b96e:	9307      	str	r3, [sp, #28]
 801b970:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801b974:	931a      	str	r3, [sp, #104]	@ 0x68
 801b976:	4654      	mov	r4, sl
 801b978:	2205      	movs	r2, #5
 801b97a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b97e:	4853      	ldr	r0, [pc, #332]	@ (801bacc <_vfiprintf_r+0x21c>)
 801b980:	f7e4 fc56 	bl	8000230 <memchr>
 801b984:	9a04      	ldr	r2, [sp, #16]
 801b986:	b9d8      	cbnz	r0, 801b9c0 <_vfiprintf_r+0x110>
 801b988:	06d1      	lsls	r1, r2, #27
 801b98a:	bf44      	itt	mi
 801b98c:	2320      	movmi	r3, #32
 801b98e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801b992:	0713      	lsls	r3, r2, #28
 801b994:	bf44      	itt	mi
 801b996:	232b      	movmi	r3, #43	@ 0x2b
 801b998:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801b99c:	f89a 3000 	ldrb.w	r3, [sl]
 801b9a0:	2b2a      	cmp	r3, #42	@ 0x2a
 801b9a2:	d015      	beq.n	801b9d0 <_vfiprintf_r+0x120>
 801b9a4:	9a07      	ldr	r2, [sp, #28]
 801b9a6:	4654      	mov	r4, sl
 801b9a8:	2000      	movs	r0, #0
 801b9aa:	f04f 0c0a 	mov.w	ip, #10
 801b9ae:	4621      	mov	r1, r4
 801b9b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b9b4:	3b30      	subs	r3, #48	@ 0x30
 801b9b6:	2b09      	cmp	r3, #9
 801b9b8:	d94b      	bls.n	801ba52 <_vfiprintf_r+0x1a2>
 801b9ba:	b1b0      	cbz	r0, 801b9ea <_vfiprintf_r+0x13a>
 801b9bc:	9207      	str	r2, [sp, #28]
 801b9be:	e014      	b.n	801b9ea <_vfiprintf_r+0x13a>
 801b9c0:	eba0 0308 	sub.w	r3, r0, r8
 801b9c4:	fa09 f303 	lsl.w	r3, r9, r3
 801b9c8:	4313      	orrs	r3, r2
 801b9ca:	9304      	str	r3, [sp, #16]
 801b9cc:	46a2      	mov	sl, r4
 801b9ce:	e7d2      	b.n	801b976 <_vfiprintf_r+0xc6>
 801b9d0:	9b03      	ldr	r3, [sp, #12]
 801b9d2:	1d19      	adds	r1, r3, #4
 801b9d4:	681b      	ldr	r3, [r3, #0]
 801b9d6:	9103      	str	r1, [sp, #12]
 801b9d8:	2b00      	cmp	r3, #0
 801b9da:	bfbb      	ittet	lt
 801b9dc:	425b      	neglt	r3, r3
 801b9de:	f042 0202 	orrlt.w	r2, r2, #2
 801b9e2:	9307      	strge	r3, [sp, #28]
 801b9e4:	9307      	strlt	r3, [sp, #28]
 801b9e6:	bfb8      	it	lt
 801b9e8:	9204      	strlt	r2, [sp, #16]
 801b9ea:	7823      	ldrb	r3, [r4, #0]
 801b9ec:	2b2e      	cmp	r3, #46	@ 0x2e
 801b9ee:	d10a      	bne.n	801ba06 <_vfiprintf_r+0x156>
 801b9f0:	7863      	ldrb	r3, [r4, #1]
 801b9f2:	2b2a      	cmp	r3, #42	@ 0x2a
 801b9f4:	d132      	bne.n	801ba5c <_vfiprintf_r+0x1ac>
 801b9f6:	9b03      	ldr	r3, [sp, #12]
 801b9f8:	1d1a      	adds	r2, r3, #4
 801b9fa:	681b      	ldr	r3, [r3, #0]
 801b9fc:	9203      	str	r2, [sp, #12]
 801b9fe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801ba02:	3402      	adds	r4, #2
 801ba04:	9305      	str	r3, [sp, #20]
 801ba06:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801badc <_vfiprintf_r+0x22c>
 801ba0a:	7821      	ldrb	r1, [r4, #0]
 801ba0c:	2203      	movs	r2, #3
 801ba0e:	4650      	mov	r0, sl
 801ba10:	f7e4 fc0e 	bl	8000230 <memchr>
 801ba14:	b138      	cbz	r0, 801ba26 <_vfiprintf_r+0x176>
 801ba16:	9b04      	ldr	r3, [sp, #16]
 801ba18:	eba0 000a 	sub.w	r0, r0, sl
 801ba1c:	2240      	movs	r2, #64	@ 0x40
 801ba1e:	4082      	lsls	r2, r0
 801ba20:	4313      	orrs	r3, r2
 801ba22:	3401      	adds	r4, #1
 801ba24:	9304      	str	r3, [sp, #16]
 801ba26:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ba2a:	4829      	ldr	r0, [pc, #164]	@ (801bad0 <_vfiprintf_r+0x220>)
 801ba2c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801ba30:	2206      	movs	r2, #6
 801ba32:	f7e4 fbfd 	bl	8000230 <memchr>
 801ba36:	2800      	cmp	r0, #0
 801ba38:	d03f      	beq.n	801baba <_vfiprintf_r+0x20a>
 801ba3a:	4b26      	ldr	r3, [pc, #152]	@ (801bad4 <_vfiprintf_r+0x224>)
 801ba3c:	bb1b      	cbnz	r3, 801ba86 <_vfiprintf_r+0x1d6>
 801ba3e:	9b03      	ldr	r3, [sp, #12]
 801ba40:	3307      	adds	r3, #7
 801ba42:	f023 0307 	bic.w	r3, r3, #7
 801ba46:	3308      	adds	r3, #8
 801ba48:	9303      	str	r3, [sp, #12]
 801ba4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ba4c:	443b      	add	r3, r7
 801ba4e:	9309      	str	r3, [sp, #36]	@ 0x24
 801ba50:	e76a      	b.n	801b928 <_vfiprintf_r+0x78>
 801ba52:	fb0c 3202 	mla	r2, ip, r2, r3
 801ba56:	460c      	mov	r4, r1
 801ba58:	2001      	movs	r0, #1
 801ba5a:	e7a8      	b.n	801b9ae <_vfiprintf_r+0xfe>
 801ba5c:	2300      	movs	r3, #0
 801ba5e:	3401      	adds	r4, #1
 801ba60:	9305      	str	r3, [sp, #20]
 801ba62:	4619      	mov	r1, r3
 801ba64:	f04f 0c0a 	mov.w	ip, #10
 801ba68:	4620      	mov	r0, r4
 801ba6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ba6e:	3a30      	subs	r2, #48	@ 0x30
 801ba70:	2a09      	cmp	r2, #9
 801ba72:	d903      	bls.n	801ba7c <_vfiprintf_r+0x1cc>
 801ba74:	2b00      	cmp	r3, #0
 801ba76:	d0c6      	beq.n	801ba06 <_vfiprintf_r+0x156>
 801ba78:	9105      	str	r1, [sp, #20]
 801ba7a:	e7c4      	b.n	801ba06 <_vfiprintf_r+0x156>
 801ba7c:	fb0c 2101 	mla	r1, ip, r1, r2
 801ba80:	4604      	mov	r4, r0
 801ba82:	2301      	movs	r3, #1
 801ba84:	e7f0      	b.n	801ba68 <_vfiprintf_r+0x1b8>
 801ba86:	ab03      	add	r3, sp, #12
 801ba88:	9300      	str	r3, [sp, #0]
 801ba8a:	462a      	mov	r2, r5
 801ba8c:	4b12      	ldr	r3, [pc, #72]	@ (801bad8 <_vfiprintf_r+0x228>)
 801ba8e:	a904      	add	r1, sp, #16
 801ba90:	4630      	mov	r0, r6
 801ba92:	f3af 8000 	nop.w
 801ba96:	4607      	mov	r7, r0
 801ba98:	1c78      	adds	r0, r7, #1
 801ba9a:	d1d6      	bne.n	801ba4a <_vfiprintf_r+0x19a>
 801ba9c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801ba9e:	07d9      	lsls	r1, r3, #31
 801baa0:	d405      	bmi.n	801baae <_vfiprintf_r+0x1fe>
 801baa2:	89ab      	ldrh	r3, [r5, #12]
 801baa4:	059a      	lsls	r2, r3, #22
 801baa6:	d402      	bmi.n	801baae <_vfiprintf_r+0x1fe>
 801baa8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801baaa:	f7ff fcf3 	bl	801b494 <__retarget_lock_release_recursive>
 801baae:	89ab      	ldrh	r3, [r5, #12]
 801bab0:	065b      	lsls	r3, r3, #25
 801bab2:	f53f af1f 	bmi.w	801b8f4 <_vfiprintf_r+0x44>
 801bab6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801bab8:	e71e      	b.n	801b8f8 <_vfiprintf_r+0x48>
 801baba:	ab03      	add	r3, sp, #12
 801babc:	9300      	str	r3, [sp, #0]
 801babe:	462a      	mov	r2, r5
 801bac0:	4b05      	ldr	r3, [pc, #20]	@ (801bad8 <_vfiprintf_r+0x228>)
 801bac2:	a904      	add	r1, sp, #16
 801bac4:	4630      	mov	r0, r6
 801bac6:	f000 f879 	bl	801bbbc <_printf_i>
 801baca:	e7e4      	b.n	801ba96 <_vfiprintf_r+0x1e6>
 801bacc:	0801df97 	.word	0x0801df97
 801bad0:	0801dfa1 	.word	0x0801dfa1
 801bad4:	00000000 	.word	0x00000000
 801bad8:	0801b88b 	.word	0x0801b88b
 801badc:	0801df9d 	.word	0x0801df9d

0801bae0 <_printf_common>:
 801bae0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bae4:	4616      	mov	r6, r2
 801bae6:	4698      	mov	r8, r3
 801bae8:	688a      	ldr	r2, [r1, #8]
 801baea:	690b      	ldr	r3, [r1, #16]
 801baec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801baf0:	4293      	cmp	r3, r2
 801baf2:	bfb8      	it	lt
 801baf4:	4613      	movlt	r3, r2
 801baf6:	6033      	str	r3, [r6, #0]
 801baf8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801bafc:	4607      	mov	r7, r0
 801bafe:	460c      	mov	r4, r1
 801bb00:	b10a      	cbz	r2, 801bb06 <_printf_common+0x26>
 801bb02:	3301      	adds	r3, #1
 801bb04:	6033      	str	r3, [r6, #0]
 801bb06:	6823      	ldr	r3, [r4, #0]
 801bb08:	0699      	lsls	r1, r3, #26
 801bb0a:	bf42      	ittt	mi
 801bb0c:	6833      	ldrmi	r3, [r6, #0]
 801bb0e:	3302      	addmi	r3, #2
 801bb10:	6033      	strmi	r3, [r6, #0]
 801bb12:	6825      	ldr	r5, [r4, #0]
 801bb14:	f015 0506 	ands.w	r5, r5, #6
 801bb18:	d106      	bne.n	801bb28 <_printf_common+0x48>
 801bb1a:	f104 0a19 	add.w	sl, r4, #25
 801bb1e:	68e3      	ldr	r3, [r4, #12]
 801bb20:	6832      	ldr	r2, [r6, #0]
 801bb22:	1a9b      	subs	r3, r3, r2
 801bb24:	42ab      	cmp	r3, r5
 801bb26:	dc26      	bgt.n	801bb76 <_printf_common+0x96>
 801bb28:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801bb2c:	6822      	ldr	r2, [r4, #0]
 801bb2e:	3b00      	subs	r3, #0
 801bb30:	bf18      	it	ne
 801bb32:	2301      	movne	r3, #1
 801bb34:	0692      	lsls	r2, r2, #26
 801bb36:	d42b      	bmi.n	801bb90 <_printf_common+0xb0>
 801bb38:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801bb3c:	4641      	mov	r1, r8
 801bb3e:	4638      	mov	r0, r7
 801bb40:	47c8      	blx	r9
 801bb42:	3001      	adds	r0, #1
 801bb44:	d01e      	beq.n	801bb84 <_printf_common+0xa4>
 801bb46:	6823      	ldr	r3, [r4, #0]
 801bb48:	6922      	ldr	r2, [r4, #16]
 801bb4a:	f003 0306 	and.w	r3, r3, #6
 801bb4e:	2b04      	cmp	r3, #4
 801bb50:	bf02      	ittt	eq
 801bb52:	68e5      	ldreq	r5, [r4, #12]
 801bb54:	6833      	ldreq	r3, [r6, #0]
 801bb56:	1aed      	subeq	r5, r5, r3
 801bb58:	68a3      	ldr	r3, [r4, #8]
 801bb5a:	bf0c      	ite	eq
 801bb5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801bb60:	2500      	movne	r5, #0
 801bb62:	4293      	cmp	r3, r2
 801bb64:	bfc4      	itt	gt
 801bb66:	1a9b      	subgt	r3, r3, r2
 801bb68:	18ed      	addgt	r5, r5, r3
 801bb6a:	2600      	movs	r6, #0
 801bb6c:	341a      	adds	r4, #26
 801bb6e:	42b5      	cmp	r5, r6
 801bb70:	d11a      	bne.n	801bba8 <_printf_common+0xc8>
 801bb72:	2000      	movs	r0, #0
 801bb74:	e008      	b.n	801bb88 <_printf_common+0xa8>
 801bb76:	2301      	movs	r3, #1
 801bb78:	4652      	mov	r2, sl
 801bb7a:	4641      	mov	r1, r8
 801bb7c:	4638      	mov	r0, r7
 801bb7e:	47c8      	blx	r9
 801bb80:	3001      	adds	r0, #1
 801bb82:	d103      	bne.n	801bb8c <_printf_common+0xac>
 801bb84:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801bb88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bb8c:	3501      	adds	r5, #1
 801bb8e:	e7c6      	b.n	801bb1e <_printf_common+0x3e>
 801bb90:	18e1      	adds	r1, r4, r3
 801bb92:	1c5a      	adds	r2, r3, #1
 801bb94:	2030      	movs	r0, #48	@ 0x30
 801bb96:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801bb9a:	4422      	add	r2, r4
 801bb9c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801bba0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801bba4:	3302      	adds	r3, #2
 801bba6:	e7c7      	b.n	801bb38 <_printf_common+0x58>
 801bba8:	2301      	movs	r3, #1
 801bbaa:	4622      	mov	r2, r4
 801bbac:	4641      	mov	r1, r8
 801bbae:	4638      	mov	r0, r7
 801bbb0:	47c8      	blx	r9
 801bbb2:	3001      	adds	r0, #1
 801bbb4:	d0e6      	beq.n	801bb84 <_printf_common+0xa4>
 801bbb6:	3601      	adds	r6, #1
 801bbb8:	e7d9      	b.n	801bb6e <_printf_common+0x8e>
	...

0801bbbc <_printf_i>:
 801bbbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801bbc0:	7e0f      	ldrb	r7, [r1, #24]
 801bbc2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801bbc4:	2f78      	cmp	r7, #120	@ 0x78
 801bbc6:	4691      	mov	r9, r2
 801bbc8:	4680      	mov	r8, r0
 801bbca:	460c      	mov	r4, r1
 801bbcc:	469a      	mov	sl, r3
 801bbce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801bbd2:	d807      	bhi.n	801bbe4 <_printf_i+0x28>
 801bbd4:	2f62      	cmp	r7, #98	@ 0x62
 801bbd6:	d80a      	bhi.n	801bbee <_printf_i+0x32>
 801bbd8:	2f00      	cmp	r7, #0
 801bbda:	f000 80d1 	beq.w	801bd80 <_printf_i+0x1c4>
 801bbde:	2f58      	cmp	r7, #88	@ 0x58
 801bbe0:	f000 80b8 	beq.w	801bd54 <_printf_i+0x198>
 801bbe4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801bbe8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801bbec:	e03a      	b.n	801bc64 <_printf_i+0xa8>
 801bbee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801bbf2:	2b15      	cmp	r3, #21
 801bbf4:	d8f6      	bhi.n	801bbe4 <_printf_i+0x28>
 801bbf6:	a101      	add	r1, pc, #4	@ (adr r1, 801bbfc <_printf_i+0x40>)
 801bbf8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801bbfc:	0801bc55 	.word	0x0801bc55
 801bc00:	0801bc69 	.word	0x0801bc69
 801bc04:	0801bbe5 	.word	0x0801bbe5
 801bc08:	0801bbe5 	.word	0x0801bbe5
 801bc0c:	0801bbe5 	.word	0x0801bbe5
 801bc10:	0801bbe5 	.word	0x0801bbe5
 801bc14:	0801bc69 	.word	0x0801bc69
 801bc18:	0801bbe5 	.word	0x0801bbe5
 801bc1c:	0801bbe5 	.word	0x0801bbe5
 801bc20:	0801bbe5 	.word	0x0801bbe5
 801bc24:	0801bbe5 	.word	0x0801bbe5
 801bc28:	0801bd67 	.word	0x0801bd67
 801bc2c:	0801bc93 	.word	0x0801bc93
 801bc30:	0801bd21 	.word	0x0801bd21
 801bc34:	0801bbe5 	.word	0x0801bbe5
 801bc38:	0801bbe5 	.word	0x0801bbe5
 801bc3c:	0801bd89 	.word	0x0801bd89
 801bc40:	0801bbe5 	.word	0x0801bbe5
 801bc44:	0801bc93 	.word	0x0801bc93
 801bc48:	0801bbe5 	.word	0x0801bbe5
 801bc4c:	0801bbe5 	.word	0x0801bbe5
 801bc50:	0801bd29 	.word	0x0801bd29
 801bc54:	6833      	ldr	r3, [r6, #0]
 801bc56:	1d1a      	adds	r2, r3, #4
 801bc58:	681b      	ldr	r3, [r3, #0]
 801bc5a:	6032      	str	r2, [r6, #0]
 801bc5c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801bc60:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801bc64:	2301      	movs	r3, #1
 801bc66:	e09c      	b.n	801bda2 <_printf_i+0x1e6>
 801bc68:	6833      	ldr	r3, [r6, #0]
 801bc6a:	6820      	ldr	r0, [r4, #0]
 801bc6c:	1d19      	adds	r1, r3, #4
 801bc6e:	6031      	str	r1, [r6, #0]
 801bc70:	0606      	lsls	r6, r0, #24
 801bc72:	d501      	bpl.n	801bc78 <_printf_i+0xbc>
 801bc74:	681d      	ldr	r5, [r3, #0]
 801bc76:	e003      	b.n	801bc80 <_printf_i+0xc4>
 801bc78:	0645      	lsls	r5, r0, #25
 801bc7a:	d5fb      	bpl.n	801bc74 <_printf_i+0xb8>
 801bc7c:	f9b3 5000 	ldrsh.w	r5, [r3]
 801bc80:	2d00      	cmp	r5, #0
 801bc82:	da03      	bge.n	801bc8c <_printf_i+0xd0>
 801bc84:	232d      	movs	r3, #45	@ 0x2d
 801bc86:	426d      	negs	r5, r5
 801bc88:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801bc8c:	4858      	ldr	r0, [pc, #352]	@ (801bdf0 <_printf_i+0x234>)
 801bc8e:	230a      	movs	r3, #10
 801bc90:	e011      	b.n	801bcb6 <_printf_i+0xfa>
 801bc92:	6821      	ldr	r1, [r4, #0]
 801bc94:	6833      	ldr	r3, [r6, #0]
 801bc96:	0608      	lsls	r0, r1, #24
 801bc98:	f853 5b04 	ldr.w	r5, [r3], #4
 801bc9c:	d402      	bmi.n	801bca4 <_printf_i+0xe8>
 801bc9e:	0649      	lsls	r1, r1, #25
 801bca0:	bf48      	it	mi
 801bca2:	b2ad      	uxthmi	r5, r5
 801bca4:	2f6f      	cmp	r7, #111	@ 0x6f
 801bca6:	4852      	ldr	r0, [pc, #328]	@ (801bdf0 <_printf_i+0x234>)
 801bca8:	6033      	str	r3, [r6, #0]
 801bcaa:	bf14      	ite	ne
 801bcac:	230a      	movne	r3, #10
 801bcae:	2308      	moveq	r3, #8
 801bcb0:	2100      	movs	r1, #0
 801bcb2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801bcb6:	6866      	ldr	r6, [r4, #4]
 801bcb8:	60a6      	str	r6, [r4, #8]
 801bcba:	2e00      	cmp	r6, #0
 801bcbc:	db05      	blt.n	801bcca <_printf_i+0x10e>
 801bcbe:	6821      	ldr	r1, [r4, #0]
 801bcc0:	432e      	orrs	r6, r5
 801bcc2:	f021 0104 	bic.w	r1, r1, #4
 801bcc6:	6021      	str	r1, [r4, #0]
 801bcc8:	d04b      	beq.n	801bd62 <_printf_i+0x1a6>
 801bcca:	4616      	mov	r6, r2
 801bccc:	fbb5 f1f3 	udiv	r1, r5, r3
 801bcd0:	fb03 5711 	mls	r7, r3, r1, r5
 801bcd4:	5dc7      	ldrb	r7, [r0, r7]
 801bcd6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801bcda:	462f      	mov	r7, r5
 801bcdc:	42bb      	cmp	r3, r7
 801bcde:	460d      	mov	r5, r1
 801bce0:	d9f4      	bls.n	801bccc <_printf_i+0x110>
 801bce2:	2b08      	cmp	r3, #8
 801bce4:	d10b      	bne.n	801bcfe <_printf_i+0x142>
 801bce6:	6823      	ldr	r3, [r4, #0]
 801bce8:	07df      	lsls	r7, r3, #31
 801bcea:	d508      	bpl.n	801bcfe <_printf_i+0x142>
 801bcec:	6923      	ldr	r3, [r4, #16]
 801bcee:	6861      	ldr	r1, [r4, #4]
 801bcf0:	4299      	cmp	r1, r3
 801bcf2:	bfde      	ittt	le
 801bcf4:	2330      	movle	r3, #48	@ 0x30
 801bcf6:	f806 3c01 	strble.w	r3, [r6, #-1]
 801bcfa:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 801bcfe:	1b92      	subs	r2, r2, r6
 801bd00:	6122      	str	r2, [r4, #16]
 801bd02:	f8cd a000 	str.w	sl, [sp]
 801bd06:	464b      	mov	r3, r9
 801bd08:	aa03      	add	r2, sp, #12
 801bd0a:	4621      	mov	r1, r4
 801bd0c:	4640      	mov	r0, r8
 801bd0e:	f7ff fee7 	bl	801bae0 <_printf_common>
 801bd12:	3001      	adds	r0, #1
 801bd14:	d14a      	bne.n	801bdac <_printf_i+0x1f0>
 801bd16:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801bd1a:	b004      	add	sp, #16
 801bd1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bd20:	6823      	ldr	r3, [r4, #0]
 801bd22:	f043 0320 	orr.w	r3, r3, #32
 801bd26:	6023      	str	r3, [r4, #0]
 801bd28:	4832      	ldr	r0, [pc, #200]	@ (801bdf4 <_printf_i+0x238>)
 801bd2a:	2778      	movs	r7, #120	@ 0x78
 801bd2c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801bd30:	6823      	ldr	r3, [r4, #0]
 801bd32:	6831      	ldr	r1, [r6, #0]
 801bd34:	061f      	lsls	r7, r3, #24
 801bd36:	f851 5b04 	ldr.w	r5, [r1], #4
 801bd3a:	d402      	bmi.n	801bd42 <_printf_i+0x186>
 801bd3c:	065f      	lsls	r7, r3, #25
 801bd3e:	bf48      	it	mi
 801bd40:	b2ad      	uxthmi	r5, r5
 801bd42:	6031      	str	r1, [r6, #0]
 801bd44:	07d9      	lsls	r1, r3, #31
 801bd46:	bf44      	itt	mi
 801bd48:	f043 0320 	orrmi.w	r3, r3, #32
 801bd4c:	6023      	strmi	r3, [r4, #0]
 801bd4e:	b11d      	cbz	r5, 801bd58 <_printf_i+0x19c>
 801bd50:	2310      	movs	r3, #16
 801bd52:	e7ad      	b.n	801bcb0 <_printf_i+0xf4>
 801bd54:	4826      	ldr	r0, [pc, #152]	@ (801bdf0 <_printf_i+0x234>)
 801bd56:	e7e9      	b.n	801bd2c <_printf_i+0x170>
 801bd58:	6823      	ldr	r3, [r4, #0]
 801bd5a:	f023 0320 	bic.w	r3, r3, #32
 801bd5e:	6023      	str	r3, [r4, #0]
 801bd60:	e7f6      	b.n	801bd50 <_printf_i+0x194>
 801bd62:	4616      	mov	r6, r2
 801bd64:	e7bd      	b.n	801bce2 <_printf_i+0x126>
 801bd66:	6833      	ldr	r3, [r6, #0]
 801bd68:	6825      	ldr	r5, [r4, #0]
 801bd6a:	6961      	ldr	r1, [r4, #20]
 801bd6c:	1d18      	adds	r0, r3, #4
 801bd6e:	6030      	str	r0, [r6, #0]
 801bd70:	062e      	lsls	r6, r5, #24
 801bd72:	681b      	ldr	r3, [r3, #0]
 801bd74:	d501      	bpl.n	801bd7a <_printf_i+0x1be>
 801bd76:	6019      	str	r1, [r3, #0]
 801bd78:	e002      	b.n	801bd80 <_printf_i+0x1c4>
 801bd7a:	0668      	lsls	r0, r5, #25
 801bd7c:	d5fb      	bpl.n	801bd76 <_printf_i+0x1ba>
 801bd7e:	8019      	strh	r1, [r3, #0]
 801bd80:	2300      	movs	r3, #0
 801bd82:	6123      	str	r3, [r4, #16]
 801bd84:	4616      	mov	r6, r2
 801bd86:	e7bc      	b.n	801bd02 <_printf_i+0x146>
 801bd88:	6833      	ldr	r3, [r6, #0]
 801bd8a:	1d1a      	adds	r2, r3, #4
 801bd8c:	6032      	str	r2, [r6, #0]
 801bd8e:	681e      	ldr	r6, [r3, #0]
 801bd90:	6862      	ldr	r2, [r4, #4]
 801bd92:	2100      	movs	r1, #0
 801bd94:	4630      	mov	r0, r6
 801bd96:	f7e4 fa4b 	bl	8000230 <memchr>
 801bd9a:	b108      	cbz	r0, 801bda0 <_printf_i+0x1e4>
 801bd9c:	1b80      	subs	r0, r0, r6
 801bd9e:	6060      	str	r0, [r4, #4]
 801bda0:	6863      	ldr	r3, [r4, #4]
 801bda2:	6123      	str	r3, [r4, #16]
 801bda4:	2300      	movs	r3, #0
 801bda6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801bdaa:	e7aa      	b.n	801bd02 <_printf_i+0x146>
 801bdac:	6923      	ldr	r3, [r4, #16]
 801bdae:	4632      	mov	r2, r6
 801bdb0:	4649      	mov	r1, r9
 801bdb2:	4640      	mov	r0, r8
 801bdb4:	47d0      	blx	sl
 801bdb6:	3001      	adds	r0, #1
 801bdb8:	d0ad      	beq.n	801bd16 <_printf_i+0x15a>
 801bdba:	6823      	ldr	r3, [r4, #0]
 801bdbc:	079b      	lsls	r3, r3, #30
 801bdbe:	d413      	bmi.n	801bde8 <_printf_i+0x22c>
 801bdc0:	68e0      	ldr	r0, [r4, #12]
 801bdc2:	9b03      	ldr	r3, [sp, #12]
 801bdc4:	4298      	cmp	r0, r3
 801bdc6:	bfb8      	it	lt
 801bdc8:	4618      	movlt	r0, r3
 801bdca:	e7a6      	b.n	801bd1a <_printf_i+0x15e>
 801bdcc:	2301      	movs	r3, #1
 801bdce:	4632      	mov	r2, r6
 801bdd0:	4649      	mov	r1, r9
 801bdd2:	4640      	mov	r0, r8
 801bdd4:	47d0      	blx	sl
 801bdd6:	3001      	adds	r0, #1
 801bdd8:	d09d      	beq.n	801bd16 <_printf_i+0x15a>
 801bdda:	3501      	adds	r5, #1
 801bddc:	68e3      	ldr	r3, [r4, #12]
 801bdde:	9903      	ldr	r1, [sp, #12]
 801bde0:	1a5b      	subs	r3, r3, r1
 801bde2:	42ab      	cmp	r3, r5
 801bde4:	dcf2      	bgt.n	801bdcc <_printf_i+0x210>
 801bde6:	e7eb      	b.n	801bdc0 <_printf_i+0x204>
 801bde8:	2500      	movs	r5, #0
 801bdea:	f104 0619 	add.w	r6, r4, #25
 801bdee:	e7f5      	b.n	801bddc <_printf_i+0x220>
 801bdf0:	0801dfa8 	.word	0x0801dfa8
 801bdf4:	0801dfb9 	.word	0x0801dfb9

0801bdf8 <__sflush_r>:
 801bdf8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801bdfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801be00:	0716      	lsls	r6, r2, #28
 801be02:	4605      	mov	r5, r0
 801be04:	460c      	mov	r4, r1
 801be06:	d454      	bmi.n	801beb2 <__sflush_r+0xba>
 801be08:	684b      	ldr	r3, [r1, #4]
 801be0a:	2b00      	cmp	r3, #0
 801be0c:	dc02      	bgt.n	801be14 <__sflush_r+0x1c>
 801be0e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801be10:	2b00      	cmp	r3, #0
 801be12:	dd48      	ble.n	801bea6 <__sflush_r+0xae>
 801be14:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801be16:	2e00      	cmp	r6, #0
 801be18:	d045      	beq.n	801bea6 <__sflush_r+0xae>
 801be1a:	2300      	movs	r3, #0
 801be1c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801be20:	682f      	ldr	r7, [r5, #0]
 801be22:	6a21      	ldr	r1, [r4, #32]
 801be24:	602b      	str	r3, [r5, #0]
 801be26:	d030      	beq.n	801be8a <__sflush_r+0x92>
 801be28:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801be2a:	89a3      	ldrh	r3, [r4, #12]
 801be2c:	0759      	lsls	r1, r3, #29
 801be2e:	d505      	bpl.n	801be3c <__sflush_r+0x44>
 801be30:	6863      	ldr	r3, [r4, #4]
 801be32:	1ad2      	subs	r2, r2, r3
 801be34:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801be36:	b10b      	cbz	r3, 801be3c <__sflush_r+0x44>
 801be38:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801be3a:	1ad2      	subs	r2, r2, r3
 801be3c:	2300      	movs	r3, #0
 801be3e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801be40:	6a21      	ldr	r1, [r4, #32]
 801be42:	4628      	mov	r0, r5
 801be44:	47b0      	blx	r6
 801be46:	1c43      	adds	r3, r0, #1
 801be48:	89a3      	ldrh	r3, [r4, #12]
 801be4a:	d106      	bne.n	801be5a <__sflush_r+0x62>
 801be4c:	6829      	ldr	r1, [r5, #0]
 801be4e:	291d      	cmp	r1, #29
 801be50:	d82b      	bhi.n	801beaa <__sflush_r+0xb2>
 801be52:	4a2a      	ldr	r2, [pc, #168]	@ (801befc <__sflush_r+0x104>)
 801be54:	40ca      	lsrs	r2, r1
 801be56:	07d6      	lsls	r6, r2, #31
 801be58:	d527      	bpl.n	801beaa <__sflush_r+0xb2>
 801be5a:	2200      	movs	r2, #0
 801be5c:	6062      	str	r2, [r4, #4]
 801be5e:	04d9      	lsls	r1, r3, #19
 801be60:	6922      	ldr	r2, [r4, #16]
 801be62:	6022      	str	r2, [r4, #0]
 801be64:	d504      	bpl.n	801be70 <__sflush_r+0x78>
 801be66:	1c42      	adds	r2, r0, #1
 801be68:	d101      	bne.n	801be6e <__sflush_r+0x76>
 801be6a:	682b      	ldr	r3, [r5, #0]
 801be6c:	b903      	cbnz	r3, 801be70 <__sflush_r+0x78>
 801be6e:	6560      	str	r0, [r4, #84]	@ 0x54
 801be70:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801be72:	602f      	str	r7, [r5, #0]
 801be74:	b1b9      	cbz	r1, 801bea6 <__sflush_r+0xae>
 801be76:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801be7a:	4299      	cmp	r1, r3
 801be7c:	d002      	beq.n	801be84 <__sflush_r+0x8c>
 801be7e:	4628      	mov	r0, r5
 801be80:	f7ff fb4a 	bl	801b518 <_free_r>
 801be84:	2300      	movs	r3, #0
 801be86:	6363      	str	r3, [r4, #52]	@ 0x34
 801be88:	e00d      	b.n	801bea6 <__sflush_r+0xae>
 801be8a:	2301      	movs	r3, #1
 801be8c:	4628      	mov	r0, r5
 801be8e:	47b0      	blx	r6
 801be90:	4602      	mov	r2, r0
 801be92:	1c50      	adds	r0, r2, #1
 801be94:	d1c9      	bne.n	801be2a <__sflush_r+0x32>
 801be96:	682b      	ldr	r3, [r5, #0]
 801be98:	2b00      	cmp	r3, #0
 801be9a:	d0c6      	beq.n	801be2a <__sflush_r+0x32>
 801be9c:	2b1d      	cmp	r3, #29
 801be9e:	d001      	beq.n	801bea4 <__sflush_r+0xac>
 801bea0:	2b16      	cmp	r3, #22
 801bea2:	d11e      	bne.n	801bee2 <__sflush_r+0xea>
 801bea4:	602f      	str	r7, [r5, #0]
 801bea6:	2000      	movs	r0, #0
 801bea8:	e022      	b.n	801bef0 <__sflush_r+0xf8>
 801beaa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801beae:	b21b      	sxth	r3, r3
 801beb0:	e01b      	b.n	801beea <__sflush_r+0xf2>
 801beb2:	690f      	ldr	r7, [r1, #16]
 801beb4:	2f00      	cmp	r7, #0
 801beb6:	d0f6      	beq.n	801bea6 <__sflush_r+0xae>
 801beb8:	0793      	lsls	r3, r2, #30
 801beba:	680e      	ldr	r6, [r1, #0]
 801bebc:	bf08      	it	eq
 801bebe:	694b      	ldreq	r3, [r1, #20]
 801bec0:	600f      	str	r7, [r1, #0]
 801bec2:	bf18      	it	ne
 801bec4:	2300      	movne	r3, #0
 801bec6:	eba6 0807 	sub.w	r8, r6, r7
 801beca:	608b      	str	r3, [r1, #8]
 801becc:	f1b8 0f00 	cmp.w	r8, #0
 801bed0:	dde9      	ble.n	801bea6 <__sflush_r+0xae>
 801bed2:	6a21      	ldr	r1, [r4, #32]
 801bed4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801bed6:	4643      	mov	r3, r8
 801bed8:	463a      	mov	r2, r7
 801beda:	4628      	mov	r0, r5
 801bedc:	47b0      	blx	r6
 801bede:	2800      	cmp	r0, #0
 801bee0:	dc08      	bgt.n	801bef4 <__sflush_r+0xfc>
 801bee2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bee6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801beea:	81a3      	strh	r3, [r4, #12]
 801beec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801bef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bef4:	4407      	add	r7, r0
 801bef6:	eba8 0800 	sub.w	r8, r8, r0
 801befa:	e7e7      	b.n	801becc <__sflush_r+0xd4>
 801befc:	20400001 	.word	0x20400001

0801bf00 <_fflush_r>:
 801bf00:	b538      	push	{r3, r4, r5, lr}
 801bf02:	690b      	ldr	r3, [r1, #16]
 801bf04:	4605      	mov	r5, r0
 801bf06:	460c      	mov	r4, r1
 801bf08:	b913      	cbnz	r3, 801bf10 <_fflush_r+0x10>
 801bf0a:	2500      	movs	r5, #0
 801bf0c:	4628      	mov	r0, r5
 801bf0e:	bd38      	pop	{r3, r4, r5, pc}
 801bf10:	b118      	cbz	r0, 801bf1a <_fflush_r+0x1a>
 801bf12:	6a03      	ldr	r3, [r0, #32]
 801bf14:	b90b      	cbnz	r3, 801bf1a <_fflush_r+0x1a>
 801bf16:	f7ff f837 	bl	801af88 <__sinit>
 801bf1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bf1e:	2b00      	cmp	r3, #0
 801bf20:	d0f3      	beq.n	801bf0a <_fflush_r+0xa>
 801bf22:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801bf24:	07d0      	lsls	r0, r2, #31
 801bf26:	d404      	bmi.n	801bf32 <_fflush_r+0x32>
 801bf28:	0599      	lsls	r1, r3, #22
 801bf2a:	d402      	bmi.n	801bf32 <_fflush_r+0x32>
 801bf2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801bf2e:	f7ff fab0 	bl	801b492 <__retarget_lock_acquire_recursive>
 801bf32:	4628      	mov	r0, r5
 801bf34:	4621      	mov	r1, r4
 801bf36:	f7ff ff5f 	bl	801bdf8 <__sflush_r>
 801bf3a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801bf3c:	07da      	lsls	r2, r3, #31
 801bf3e:	4605      	mov	r5, r0
 801bf40:	d4e4      	bmi.n	801bf0c <_fflush_r+0xc>
 801bf42:	89a3      	ldrh	r3, [r4, #12]
 801bf44:	059b      	lsls	r3, r3, #22
 801bf46:	d4e1      	bmi.n	801bf0c <_fflush_r+0xc>
 801bf48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801bf4a:	f7ff faa3 	bl	801b494 <__retarget_lock_release_recursive>
 801bf4e:	e7dd      	b.n	801bf0c <_fflush_r+0xc>

0801bf50 <_malloc_usable_size_r>:
 801bf50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801bf54:	1f18      	subs	r0, r3, #4
 801bf56:	2b00      	cmp	r3, #0
 801bf58:	bfbc      	itt	lt
 801bf5a:	580b      	ldrlt	r3, [r1, r0]
 801bf5c:	18c0      	addlt	r0, r0, r3
 801bf5e:	4770      	bx	lr

0801bf60 <__sread>:
 801bf60:	b510      	push	{r4, lr}
 801bf62:	460c      	mov	r4, r1
 801bf64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bf68:	f000 f968 	bl	801c23c <_read_r>
 801bf6c:	2800      	cmp	r0, #0
 801bf6e:	bfab      	itete	ge
 801bf70:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801bf72:	89a3      	ldrhlt	r3, [r4, #12]
 801bf74:	181b      	addge	r3, r3, r0
 801bf76:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801bf7a:	bfac      	ite	ge
 801bf7c:	6563      	strge	r3, [r4, #84]	@ 0x54
 801bf7e:	81a3      	strhlt	r3, [r4, #12]
 801bf80:	bd10      	pop	{r4, pc}

0801bf82 <__swrite>:
 801bf82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bf86:	461f      	mov	r7, r3
 801bf88:	898b      	ldrh	r3, [r1, #12]
 801bf8a:	05db      	lsls	r3, r3, #23
 801bf8c:	4605      	mov	r5, r0
 801bf8e:	460c      	mov	r4, r1
 801bf90:	4616      	mov	r6, r2
 801bf92:	d505      	bpl.n	801bfa0 <__swrite+0x1e>
 801bf94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bf98:	2302      	movs	r3, #2
 801bf9a:	2200      	movs	r2, #0
 801bf9c:	f000 f93c 	bl	801c218 <_lseek_r>
 801bfa0:	89a3      	ldrh	r3, [r4, #12]
 801bfa2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801bfa6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801bfaa:	81a3      	strh	r3, [r4, #12]
 801bfac:	4632      	mov	r2, r6
 801bfae:	463b      	mov	r3, r7
 801bfb0:	4628      	mov	r0, r5
 801bfb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801bfb6:	f000 b953 	b.w	801c260 <_write_r>

0801bfba <__sseek>:
 801bfba:	b510      	push	{r4, lr}
 801bfbc:	460c      	mov	r4, r1
 801bfbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bfc2:	f000 f929 	bl	801c218 <_lseek_r>
 801bfc6:	1c43      	adds	r3, r0, #1
 801bfc8:	89a3      	ldrh	r3, [r4, #12]
 801bfca:	bf15      	itete	ne
 801bfcc:	6560      	strne	r0, [r4, #84]	@ 0x54
 801bfce:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801bfd2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801bfd6:	81a3      	strheq	r3, [r4, #12]
 801bfd8:	bf18      	it	ne
 801bfda:	81a3      	strhne	r3, [r4, #12]
 801bfdc:	bd10      	pop	{r4, pc}

0801bfde <__sclose>:
 801bfde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bfe2:	f000 b94f 	b.w	801c284 <_close_r>
	...

0801bfe8 <fiprintf>:
 801bfe8:	b40e      	push	{r1, r2, r3}
 801bfea:	b503      	push	{r0, r1, lr}
 801bfec:	4601      	mov	r1, r0
 801bfee:	ab03      	add	r3, sp, #12
 801bff0:	4805      	ldr	r0, [pc, #20]	@ (801c008 <fiprintf+0x20>)
 801bff2:	f853 2b04 	ldr.w	r2, [r3], #4
 801bff6:	6800      	ldr	r0, [r0, #0]
 801bff8:	9301      	str	r3, [sp, #4]
 801bffa:	f7ff fc59 	bl	801b8b0 <_vfiprintf_r>
 801bffe:	b002      	add	sp, #8
 801c000:	f85d eb04 	ldr.w	lr, [sp], #4
 801c004:	b003      	add	sp, #12
 801c006:	4770      	bx	lr
 801c008:	20000a7c 	.word	0x20000a7c

0801c00c <__swbuf_r>:
 801c00c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c00e:	460e      	mov	r6, r1
 801c010:	4614      	mov	r4, r2
 801c012:	4605      	mov	r5, r0
 801c014:	b118      	cbz	r0, 801c01e <__swbuf_r+0x12>
 801c016:	6a03      	ldr	r3, [r0, #32]
 801c018:	b90b      	cbnz	r3, 801c01e <__swbuf_r+0x12>
 801c01a:	f7fe ffb5 	bl	801af88 <__sinit>
 801c01e:	69a3      	ldr	r3, [r4, #24]
 801c020:	60a3      	str	r3, [r4, #8]
 801c022:	89a3      	ldrh	r3, [r4, #12]
 801c024:	071a      	lsls	r2, r3, #28
 801c026:	d501      	bpl.n	801c02c <__swbuf_r+0x20>
 801c028:	6923      	ldr	r3, [r4, #16]
 801c02a:	b943      	cbnz	r3, 801c03e <__swbuf_r+0x32>
 801c02c:	4621      	mov	r1, r4
 801c02e:	4628      	mov	r0, r5
 801c030:	f000 f82a 	bl	801c088 <__swsetup_r>
 801c034:	b118      	cbz	r0, 801c03e <__swbuf_r+0x32>
 801c036:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801c03a:	4638      	mov	r0, r7
 801c03c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c03e:	6823      	ldr	r3, [r4, #0]
 801c040:	6922      	ldr	r2, [r4, #16]
 801c042:	1a98      	subs	r0, r3, r2
 801c044:	6963      	ldr	r3, [r4, #20]
 801c046:	b2f6      	uxtb	r6, r6
 801c048:	4283      	cmp	r3, r0
 801c04a:	4637      	mov	r7, r6
 801c04c:	dc05      	bgt.n	801c05a <__swbuf_r+0x4e>
 801c04e:	4621      	mov	r1, r4
 801c050:	4628      	mov	r0, r5
 801c052:	f7ff ff55 	bl	801bf00 <_fflush_r>
 801c056:	2800      	cmp	r0, #0
 801c058:	d1ed      	bne.n	801c036 <__swbuf_r+0x2a>
 801c05a:	68a3      	ldr	r3, [r4, #8]
 801c05c:	3b01      	subs	r3, #1
 801c05e:	60a3      	str	r3, [r4, #8]
 801c060:	6823      	ldr	r3, [r4, #0]
 801c062:	1c5a      	adds	r2, r3, #1
 801c064:	6022      	str	r2, [r4, #0]
 801c066:	701e      	strb	r6, [r3, #0]
 801c068:	6962      	ldr	r2, [r4, #20]
 801c06a:	1c43      	adds	r3, r0, #1
 801c06c:	429a      	cmp	r2, r3
 801c06e:	d004      	beq.n	801c07a <__swbuf_r+0x6e>
 801c070:	89a3      	ldrh	r3, [r4, #12]
 801c072:	07db      	lsls	r3, r3, #31
 801c074:	d5e1      	bpl.n	801c03a <__swbuf_r+0x2e>
 801c076:	2e0a      	cmp	r6, #10
 801c078:	d1df      	bne.n	801c03a <__swbuf_r+0x2e>
 801c07a:	4621      	mov	r1, r4
 801c07c:	4628      	mov	r0, r5
 801c07e:	f7ff ff3f 	bl	801bf00 <_fflush_r>
 801c082:	2800      	cmp	r0, #0
 801c084:	d0d9      	beq.n	801c03a <__swbuf_r+0x2e>
 801c086:	e7d6      	b.n	801c036 <__swbuf_r+0x2a>

0801c088 <__swsetup_r>:
 801c088:	b538      	push	{r3, r4, r5, lr}
 801c08a:	4b29      	ldr	r3, [pc, #164]	@ (801c130 <__swsetup_r+0xa8>)
 801c08c:	4605      	mov	r5, r0
 801c08e:	6818      	ldr	r0, [r3, #0]
 801c090:	460c      	mov	r4, r1
 801c092:	b118      	cbz	r0, 801c09c <__swsetup_r+0x14>
 801c094:	6a03      	ldr	r3, [r0, #32]
 801c096:	b90b      	cbnz	r3, 801c09c <__swsetup_r+0x14>
 801c098:	f7fe ff76 	bl	801af88 <__sinit>
 801c09c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c0a0:	0719      	lsls	r1, r3, #28
 801c0a2:	d422      	bmi.n	801c0ea <__swsetup_r+0x62>
 801c0a4:	06da      	lsls	r2, r3, #27
 801c0a6:	d407      	bmi.n	801c0b8 <__swsetup_r+0x30>
 801c0a8:	2209      	movs	r2, #9
 801c0aa:	602a      	str	r2, [r5, #0]
 801c0ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c0b0:	81a3      	strh	r3, [r4, #12]
 801c0b2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801c0b6:	e033      	b.n	801c120 <__swsetup_r+0x98>
 801c0b8:	0758      	lsls	r0, r3, #29
 801c0ba:	d512      	bpl.n	801c0e2 <__swsetup_r+0x5a>
 801c0bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801c0be:	b141      	cbz	r1, 801c0d2 <__swsetup_r+0x4a>
 801c0c0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801c0c4:	4299      	cmp	r1, r3
 801c0c6:	d002      	beq.n	801c0ce <__swsetup_r+0x46>
 801c0c8:	4628      	mov	r0, r5
 801c0ca:	f7ff fa25 	bl	801b518 <_free_r>
 801c0ce:	2300      	movs	r3, #0
 801c0d0:	6363      	str	r3, [r4, #52]	@ 0x34
 801c0d2:	89a3      	ldrh	r3, [r4, #12]
 801c0d4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801c0d8:	81a3      	strh	r3, [r4, #12]
 801c0da:	2300      	movs	r3, #0
 801c0dc:	6063      	str	r3, [r4, #4]
 801c0de:	6923      	ldr	r3, [r4, #16]
 801c0e0:	6023      	str	r3, [r4, #0]
 801c0e2:	89a3      	ldrh	r3, [r4, #12]
 801c0e4:	f043 0308 	orr.w	r3, r3, #8
 801c0e8:	81a3      	strh	r3, [r4, #12]
 801c0ea:	6923      	ldr	r3, [r4, #16]
 801c0ec:	b94b      	cbnz	r3, 801c102 <__swsetup_r+0x7a>
 801c0ee:	89a3      	ldrh	r3, [r4, #12]
 801c0f0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801c0f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801c0f8:	d003      	beq.n	801c102 <__swsetup_r+0x7a>
 801c0fa:	4621      	mov	r1, r4
 801c0fc:	4628      	mov	r0, r5
 801c0fe:	f000 f83f 	bl	801c180 <__smakebuf_r>
 801c102:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c106:	f013 0201 	ands.w	r2, r3, #1
 801c10a:	d00a      	beq.n	801c122 <__swsetup_r+0x9a>
 801c10c:	2200      	movs	r2, #0
 801c10e:	60a2      	str	r2, [r4, #8]
 801c110:	6962      	ldr	r2, [r4, #20]
 801c112:	4252      	negs	r2, r2
 801c114:	61a2      	str	r2, [r4, #24]
 801c116:	6922      	ldr	r2, [r4, #16]
 801c118:	b942      	cbnz	r2, 801c12c <__swsetup_r+0xa4>
 801c11a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801c11e:	d1c5      	bne.n	801c0ac <__swsetup_r+0x24>
 801c120:	bd38      	pop	{r3, r4, r5, pc}
 801c122:	0799      	lsls	r1, r3, #30
 801c124:	bf58      	it	pl
 801c126:	6962      	ldrpl	r2, [r4, #20]
 801c128:	60a2      	str	r2, [r4, #8]
 801c12a:	e7f4      	b.n	801c116 <__swsetup_r+0x8e>
 801c12c:	2000      	movs	r0, #0
 801c12e:	e7f7      	b.n	801c120 <__swsetup_r+0x98>
 801c130:	20000a7c 	.word	0x20000a7c

0801c134 <__swhatbuf_r>:
 801c134:	b570      	push	{r4, r5, r6, lr}
 801c136:	460c      	mov	r4, r1
 801c138:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c13c:	2900      	cmp	r1, #0
 801c13e:	b096      	sub	sp, #88	@ 0x58
 801c140:	4615      	mov	r5, r2
 801c142:	461e      	mov	r6, r3
 801c144:	da0d      	bge.n	801c162 <__swhatbuf_r+0x2e>
 801c146:	89a3      	ldrh	r3, [r4, #12]
 801c148:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801c14c:	f04f 0100 	mov.w	r1, #0
 801c150:	bf14      	ite	ne
 801c152:	2340      	movne	r3, #64	@ 0x40
 801c154:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801c158:	2000      	movs	r0, #0
 801c15a:	6031      	str	r1, [r6, #0]
 801c15c:	602b      	str	r3, [r5, #0]
 801c15e:	b016      	add	sp, #88	@ 0x58
 801c160:	bd70      	pop	{r4, r5, r6, pc}
 801c162:	466a      	mov	r2, sp
 801c164:	f000 f89e 	bl	801c2a4 <_fstat_r>
 801c168:	2800      	cmp	r0, #0
 801c16a:	dbec      	blt.n	801c146 <__swhatbuf_r+0x12>
 801c16c:	9901      	ldr	r1, [sp, #4]
 801c16e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801c172:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801c176:	4259      	negs	r1, r3
 801c178:	4159      	adcs	r1, r3
 801c17a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801c17e:	e7eb      	b.n	801c158 <__swhatbuf_r+0x24>

0801c180 <__smakebuf_r>:
 801c180:	898b      	ldrh	r3, [r1, #12]
 801c182:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801c184:	079d      	lsls	r5, r3, #30
 801c186:	4606      	mov	r6, r0
 801c188:	460c      	mov	r4, r1
 801c18a:	d507      	bpl.n	801c19c <__smakebuf_r+0x1c>
 801c18c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801c190:	6023      	str	r3, [r4, #0]
 801c192:	6123      	str	r3, [r4, #16]
 801c194:	2301      	movs	r3, #1
 801c196:	6163      	str	r3, [r4, #20]
 801c198:	b003      	add	sp, #12
 801c19a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c19c:	ab01      	add	r3, sp, #4
 801c19e:	466a      	mov	r2, sp
 801c1a0:	f7ff ffc8 	bl	801c134 <__swhatbuf_r>
 801c1a4:	9f00      	ldr	r7, [sp, #0]
 801c1a6:	4605      	mov	r5, r0
 801c1a8:	4639      	mov	r1, r7
 801c1aa:	4630      	mov	r0, r6
 801c1ac:	f7fe fd2a 	bl	801ac04 <_malloc_r>
 801c1b0:	b948      	cbnz	r0, 801c1c6 <__smakebuf_r+0x46>
 801c1b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c1b6:	059a      	lsls	r2, r3, #22
 801c1b8:	d4ee      	bmi.n	801c198 <__smakebuf_r+0x18>
 801c1ba:	f023 0303 	bic.w	r3, r3, #3
 801c1be:	f043 0302 	orr.w	r3, r3, #2
 801c1c2:	81a3      	strh	r3, [r4, #12]
 801c1c4:	e7e2      	b.n	801c18c <__smakebuf_r+0xc>
 801c1c6:	89a3      	ldrh	r3, [r4, #12]
 801c1c8:	6020      	str	r0, [r4, #0]
 801c1ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801c1ce:	81a3      	strh	r3, [r4, #12]
 801c1d0:	9b01      	ldr	r3, [sp, #4]
 801c1d2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801c1d6:	b15b      	cbz	r3, 801c1f0 <__smakebuf_r+0x70>
 801c1d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c1dc:	4630      	mov	r0, r6
 801c1de:	f000 f80b 	bl	801c1f8 <_isatty_r>
 801c1e2:	b128      	cbz	r0, 801c1f0 <__smakebuf_r+0x70>
 801c1e4:	89a3      	ldrh	r3, [r4, #12]
 801c1e6:	f023 0303 	bic.w	r3, r3, #3
 801c1ea:	f043 0301 	orr.w	r3, r3, #1
 801c1ee:	81a3      	strh	r3, [r4, #12]
 801c1f0:	89a3      	ldrh	r3, [r4, #12]
 801c1f2:	431d      	orrs	r5, r3
 801c1f4:	81a5      	strh	r5, [r4, #12]
 801c1f6:	e7cf      	b.n	801c198 <__smakebuf_r+0x18>

0801c1f8 <_isatty_r>:
 801c1f8:	b538      	push	{r3, r4, r5, lr}
 801c1fa:	4d06      	ldr	r5, [pc, #24]	@ (801c214 <_isatty_r+0x1c>)
 801c1fc:	2300      	movs	r3, #0
 801c1fe:	4604      	mov	r4, r0
 801c200:	4608      	mov	r0, r1
 801c202:	602b      	str	r3, [r5, #0]
 801c204:	f7e6 fac8 	bl	8002798 <_isatty>
 801c208:	1c43      	adds	r3, r0, #1
 801c20a:	d102      	bne.n	801c212 <_isatty_r+0x1a>
 801c20c:	682b      	ldr	r3, [r5, #0]
 801c20e:	b103      	cbz	r3, 801c212 <_isatty_r+0x1a>
 801c210:	6023      	str	r3, [r4, #0]
 801c212:	bd38      	pop	{r3, r4, r5, pc}
 801c214:	200160a8 	.word	0x200160a8

0801c218 <_lseek_r>:
 801c218:	b538      	push	{r3, r4, r5, lr}
 801c21a:	4d07      	ldr	r5, [pc, #28]	@ (801c238 <_lseek_r+0x20>)
 801c21c:	4604      	mov	r4, r0
 801c21e:	4608      	mov	r0, r1
 801c220:	4611      	mov	r1, r2
 801c222:	2200      	movs	r2, #0
 801c224:	602a      	str	r2, [r5, #0]
 801c226:	461a      	mov	r2, r3
 801c228:	f7e6 fac1 	bl	80027ae <_lseek>
 801c22c:	1c43      	adds	r3, r0, #1
 801c22e:	d102      	bne.n	801c236 <_lseek_r+0x1e>
 801c230:	682b      	ldr	r3, [r5, #0]
 801c232:	b103      	cbz	r3, 801c236 <_lseek_r+0x1e>
 801c234:	6023      	str	r3, [r4, #0]
 801c236:	bd38      	pop	{r3, r4, r5, pc}
 801c238:	200160a8 	.word	0x200160a8

0801c23c <_read_r>:
 801c23c:	b538      	push	{r3, r4, r5, lr}
 801c23e:	4d07      	ldr	r5, [pc, #28]	@ (801c25c <_read_r+0x20>)
 801c240:	4604      	mov	r4, r0
 801c242:	4608      	mov	r0, r1
 801c244:	4611      	mov	r1, r2
 801c246:	2200      	movs	r2, #0
 801c248:	602a      	str	r2, [r5, #0]
 801c24a:	461a      	mov	r2, r3
 801c24c:	f7e6 fa6b 	bl	8002726 <_read>
 801c250:	1c43      	adds	r3, r0, #1
 801c252:	d102      	bne.n	801c25a <_read_r+0x1e>
 801c254:	682b      	ldr	r3, [r5, #0]
 801c256:	b103      	cbz	r3, 801c25a <_read_r+0x1e>
 801c258:	6023      	str	r3, [r4, #0]
 801c25a:	bd38      	pop	{r3, r4, r5, pc}
 801c25c:	200160a8 	.word	0x200160a8

0801c260 <_write_r>:
 801c260:	b538      	push	{r3, r4, r5, lr}
 801c262:	4d07      	ldr	r5, [pc, #28]	@ (801c280 <_write_r+0x20>)
 801c264:	4604      	mov	r4, r0
 801c266:	4608      	mov	r0, r1
 801c268:	4611      	mov	r1, r2
 801c26a:	2200      	movs	r2, #0
 801c26c:	602a      	str	r2, [r5, #0]
 801c26e:	461a      	mov	r2, r3
 801c270:	f7e5 ffba 	bl	80021e8 <_write>
 801c274:	1c43      	adds	r3, r0, #1
 801c276:	d102      	bne.n	801c27e <_write_r+0x1e>
 801c278:	682b      	ldr	r3, [r5, #0]
 801c27a:	b103      	cbz	r3, 801c27e <_write_r+0x1e>
 801c27c:	6023      	str	r3, [r4, #0]
 801c27e:	bd38      	pop	{r3, r4, r5, pc}
 801c280:	200160a8 	.word	0x200160a8

0801c284 <_close_r>:
 801c284:	b538      	push	{r3, r4, r5, lr}
 801c286:	4d06      	ldr	r5, [pc, #24]	@ (801c2a0 <_close_r+0x1c>)
 801c288:	2300      	movs	r3, #0
 801c28a:	4604      	mov	r4, r0
 801c28c:	4608      	mov	r0, r1
 801c28e:	602b      	str	r3, [r5, #0]
 801c290:	f7e6 fa66 	bl	8002760 <_close>
 801c294:	1c43      	adds	r3, r0, #1
 801c296:	d102      	bne.n	801c29e <_close_r+0x1a>
 801c298:	682b      	ldr	r3, [r5, #0]
 801c29a:	b103      	cbz	r3, 801c29e <_close_r+0x1a>
 801c29c:	6023      	str	r3, [r4, #0]
 801c29e:	bd38      	pop	{r3, r4, r5, pc}
 801c2a0:	200160a8 	.word	0x200160a8

0801c2a4 <_fstat_r>:
 801c2a4:	b538      	push	{r3, r4, r5, lr}
 801c2a6:	4d07      	ldr	r5, [pc, #28]	@ (801c2c4 <_fstat_r+0x20>)
 801c2a8:	2300      	movs	r3, #0
 801c2aa:	4604      	mov	r4, r0
 801c2ac:	4608      	mov	r0, r1
 801c2ae:	4611      	mov	r1, r2
 801c2b0:	602b      	str	r3, [r5, #0]
 801c2b2:	f7e6 fa61 	bl	8002778 <_fstat>
 801c2b6:	1c43      	adds	r3, r0, #1
 801c2b8:	d102      	bne.n	801c2c0 <_fstat_r+0x1c>
 801c2ba:	682b      	ldr	r3, [r5, #0]
 801c2bc:	b103      	cbz	r3, 801c2c0 <_fstat_r+0x1c>
 801c2be:	6023      	str	r3, [r4, #0]
 801c2c0:	bd38      	pop	{r3, r4, r5, pc}
 801c2c2:	bf00      	nop
 801c2c4:	200160a8 	.word	0x200160a8

0801c2c8 <abort>:
 801c2c8:	b508      	push	{r3, lr}
 801c2ca:	2006      	movs	r0, #6
 801c2cc:	f000 f82c 	bl	801c328 <raise>
 801c2d0:	2001      	movs	r0, #1
 801c2d2:	f7e6 fa1d 	bl	8002710 <_exit>

0801c2d6 <_raise_r>:
 801c2d6:	291f      	cmp	r1, #31
 801c2d8:	b538      	push	{r3, r4, r5, lr}
 801c2da:	4605      	mov	r5, r0
 801c2dc:	460c      	mov	r4, r1
 801c2de:	d904      	bls.n	801c2ea <_raise_r+0x14>
 801c2e0:	2316      	movs	r3, #22
 801c2e2:	6003      	str	r3, [r0, #0]
 801c2e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801c2e8:	bd38      	pop	{r3, r4, r5, pc}
 801c2ea:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801c2ec:	b112      	cbz	r2, 801c2f4 <_raise_r+0x1e>
 801c2ee:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801c2f2:	b94b      	cbnz	r3, 801c308 <_raise_r+0x32>
 801c2f4:	4628      	mov	r0, r5
 801c2f6:	f000 f831 	bl	801c35c <_getpid_r>
 801c2fa:	4622      	mov	r2, r4
 801c2fc:	4601      	mov	r1, r0
 801c2fe:	4628      	mov	r0, r5
 801c300:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c304:	f000 b818 	b.w	801c338 <_kill_r>
 801c308:	2b01      	cmp	r3, #1
 801c30a:	d00a      	beq.n	801c322 <_raise_r+0x4c>
 801c30c:	1c59      	adds	r1, r3, #1
 801c30e:	d103      	bne.n	801c318 <_raise_r+0x42>
 801c310:	2316      	movs	r3, #22
 801c312:	6003      	str	r3, [r0, #0]
 801c314:	2001      	movs	r0, #1
 801c316:	e7e7      	b.n	801c2e8 <_raise_r+0x12>
 801c318:	2100      	movs	r1, #0
 801c31a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801c31e:	4620      	mov	r0, r4
 801c320:	4798      	blx	r3
 801c322:	2000      	movs	r0, #0
 801c324:	e7e0      	b.n	801c2e8 <_raise_r+0x12>
	...

0801c328 <raise>:
 801c328:	4b02      	ldr	r3, [pc, #8]	@ (801c334 <raise+0xc>)
 801c32a:	4601      	mov	r1, r0
 801c32c:	6818      	ldr	r0, [r3, #0]
 801c32e:	f7ff bfd2 	b.w	801c2d6 <_raise_r>
 801c332:	bf00      	nop
 801c334:	20000a7c 	.word	0x20000a7c

0801c338 <_kill_r>:
 801c338:	b538      	push	{r3, r4, r5, lr}
 801c33a:	4d07      	ldr	r5, [pc, #28]	@ (801c358 <_kill_r+0x20>)
 801c33c:	2300      	movs	r3, #0
 801c33e:	4604      	mov	r4, r0
 801c340:	4608      	mov	r0, r1
 801c342:	4611      	mov	r1, r2
 801c344:	602b      	str	r3, [r5, #0]
 801c346:	f7e6 f9d3 	bl	80026f0 <_kill>
 801c34a:	1c43      	adds	r3, r0, #1
 801c34c:	d102      	bne.n	801c354 <_kill_r+0x1c>
 801c34e:	682b      	ldr	r3, [r5, #0]
 801c350:	b103      	cbz	r3, 801c354 <_kill_r+0x1c>
 801c352:	6023      	str	r3, [r4, #0]
 801c354:	bd38      	pop	{r3, r4, r5, pc}
 801c356:	bf00      	nop
 801c358:	200160a8 	.word	0x200160a8

0801c35c <_getpid_r>:
 801c35c:	f7e6 b9c0 	b.w	80026e0 <_getpid>

0801c360 <_init>:
 801c360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c362:	bf00      	nop
 801c364:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c366:	bc08      	pop	{r3}
 801c368:	469e      	mov	lr, r3
 801c36a:	4770      	bx	lr

0801c36c <_fini>:
 801c36c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c36e:	bf00      	nop
 801c370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c372:	bc08      	pop	{r3}
 801c374:	469e      	mov	lr, r3
 801c376:	4770      	bx	lr
