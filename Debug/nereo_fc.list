
nereo_fc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a618  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000014b8  0801a7d8  0801a7d8  0001b7d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801bc90  0801bc90  0001d81c  2**0
                  CONTENTS
  4 .ARM          00000008  0801bc90  0801bc90  0001cc90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801bc98  0801bc98  0001d81c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000010  0801bc98  0801bc98  0001cc98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801bca8  0801bca8  0001cca8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000081c  20000000  0801bcac  0001d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0001d81c  2**0
                  CONTENTS
 10 .bss          00014e94  20000820  20000820  0001d820  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  200156b4  200156b4  0001d820  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0001d81c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001fed5  00000000  00000000  0001d84c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000052c9  00000000  00000000  0003d721  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000018e0  00000000  00000000  000429f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000012d6  00000000  00000000  000442d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000306b5  00000000  00000000  000455a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000219a0  00000000  00000000  00075c5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001105d7  00000000  00000000  000975fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000ef  00000000  00000000  001a7bd2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007618  00000000  00000000  001a7cc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000071  00000000  00000000  001af2dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    00000959  00000000  00000000  001af34d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_ranges 00000020  00000000  00000000  001afca6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000820 	.word	0x20000820
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0801a7c0 	.word	0x0801a7c0

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000824 	.word	0x20000824
 80001fc:	0801a7c0 	.word	0x0801a7c0

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2f>:
 8000b7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b80:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b84:	bf24      	itt	cs
 8000b86:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b8a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b8e:	d90d      	bls.n	8000bac <__aeabi_d2f+0x30>
 8000b90:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b94:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b98:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b9c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ba0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ba4:	bf08      	it	eq
 8000ba6:	f020 0001 	biceq.w	r0, r0, #1
 8000baa:	4770      	bx	lr
 8000bac:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bb0:	d121      	bne.n	8000bf6 <__aeabi_d2f+0x7a>
 8000bb2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bb6:	bfbc      	itt	lt
 8000bb8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bbc:	4770      	bxlt	lr
 8000bbe:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bc2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bc6:	f1c2 0218 	rsb	r2, r2, #24
 8000bca:	f1c2 0c20 	rsb	ip, r2, #32
 8000bce:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bd2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bd6:	bf18      	it	ne
 8000bd8:	f040 0001 	orrne.w	r0, r0, #1
 8000bdc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000be4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000be8:	ea40 000c 	orr.w	r0, r0, ip
 8000bec:	fa23 f302 	lsr.w	r3, r3, r2
 8000bf0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bf4:	e7cc      	b.n	8000b90 <__aeabi_d2f+0x14>
 8000bf6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bfa:	d107      	bne.n	8000c0c <__aeabi_d2f+0x90>
 8000bfc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c00:	bf1e      	ittt	ne
 8000c02:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c06:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c0a:	4770      	bxne	lr
 8000c0c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c10:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c14:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop

08000c1c <__aeabi_ldivmod>:
 8000c1c:	b97b      	cbnz	r3, 8000c3e <__aeabi_ldivmod+0x22>
 8000c1e:	b972      	cbnz	r2, 8000c3e <__aeabi_ldivmod+0x22>
 8000c20:	2900      	cmp	r1, #0
 8000c22:	bfbe      	ittt	lt
 8000c24:	2000      	movlt	r0, #0
 8000c26:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000c2a:	e006      	blt.n	8000c3a <__aeabi_ldivmod+0x1e>
 8000c2c:	bf08      	it	eq
 8000c2e:	2800      	cmpeq	r0, #0
 8000c30:	bf1c      	itt	ne
 8000c32:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000c36:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c3a:	f000 b9b5 	b.w	8000fa8 <__aeabi_idiv0>
 8000c3e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c42:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c46:	2900      	cmp	r1, #0
 8000c48:	db09      	blt.n	8000c5e <__aeabi_ldivmod+0x42>
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	db1a      	blt.n	8000c84 <__aeabi_ldivmod+0x68>
 8000c4e:	f000 f84d 	bl	8000cec <__udivmoddi4>
 8000c52:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c5a:	b004      	add	sp, #16
 8000c5c:	4770      	bx	lr
 8000c5e:	4240      	negs	r0, r0
 8000c60:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	db1b      	blt.n	8000ca0 <__aeabi_ldivmod+0x84>
 8000c68:	f000 f840 	bl	8000cec <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4240      	negs	r0, r0
 8000c78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c7c:	4252      	negs	r2, r2
 8000c7e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c82:	4770      	bx	lr
 8000c84:	4252      	negs	r2, r2
 8000c86:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c8a:	f000 f82f 	bl	8000cec <__udivmoddi4>
 8000c8e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c96:	b004      	add	sp, #16
 8000c98:	4240      	negs	r0, r0
 8000c9a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c9e:	4770      	bx	lr
 8000ca0:	4252      	negs	r2, r2
 8000ca2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ca6:	f000 f821 	bl	8000cec <__udivmoddi4>
 8000caa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb2:	b004      	add	sp, #16
 8000cb4:	4252      	negs	r2, r2
 8000cb6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cba:	4770      	bx	lr

08000cbc <__aeabi_uldivmod>:
 8000cbc:	b953      	cbnz	r3, 8000cd4 <__aeabi_uldivmod+0x18>
 8000cbe:	b94a      	cbnz	r2, 8000cd4 <__aeabi_uldivmod+0x18>
 8000cc0:	2900      	cmp	r1, #0
 8000cc2:	bf08      	it	eq
 8000cc4:	2800      	cmpeq	r0, #0
 8000cc6:	bf1c      	itt	ne
 8000cc8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000ccc:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cd0:	f000 b96a 	b.w	8000fa8 <__aeabi_idiv0>
 8000cd4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cdc:	f000 f806 	bl	8000cec <__udivmoddi4>
 8000ce0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce8:	b004      	add	sp, #16
 8000cea:	4770      	bx	lr

08000cec <__udivmoddi4>:
 8000cec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cf0:	9d08      	ldr	r5, [sp, #32]
 8000cf2:	460c      	mov	r4, r1
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d14e      	bne.n	8000d96 <__udivmoddi4+0xaa>
 8000cf8:	4694      	mov	ip, r2
 8000cfa:	458c      	cmp	ip, r1
 8000cfc:	4686      	mov	lr, r0
 8000cfe:	fab2 f282 	clz	r2, r2
 8000d02:	d962      	bls.n	8000dca <__udivmoddi4+0xde>
 8000d04:	b14a      	cbz	r2, 8000d1a <__udivmoddi4+0x2e>
 8000d06:	f1c2 0320 	rsb	r3, r2, #32
 8000d0a:	4091      	lsls	r1, r2
 8000d0c:	fa20 f303 	lsr.w	r3, r0, r3
 8000d10:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d14:	4319      	orrs	r1, r3
 8000d16:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d1e:	fa1f f68c 	uxth.w	r6, ip
 8000d22:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d26:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d2a:	fb07 1114 	mls	r1, r7, r4, r1
 8000d2e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d32:	fb04 f106 	mul.w	r1, r4, r6
 8000d36:	4299      	cmp	r1, r3
 8000d38:	d90a      	bls.n	8000d50 <__udivmoddi4+0x64>
 8000d3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d42:	f080 8112 	bcs.w	8000f6a <__udivmoddi4+0x27e>
 8000d46:	4299      	cmp	r1, r3
 8000d48:	f240 810f 	bls.w	8000f6a <__udivmoddi4+0x27e>
 8000d4c:	3c02      	subs	r4, #2
 8000d4e:	4463      	add	r3, ip
 8000d50:	1a59      	subs	r1, r3, r1
 8000d52:	fa1f f38e 	uxth.w	r3, lr
 8000d56:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d5a:	fb07 1110 	mls	r1, r7, r0, r1
 8000d5e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d62:	fb00 f606 	mul.w	r6, r0, r6
 8000d66:	429e      	cmp	r6, r3
 8000d68:	d90a      	bls.n	8000d80 <__udivmoddi4+0x94>
 8000d6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d6e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000d72:	f080 80fc 	bcs.w	8000f6e <__udivmoddi4+0x282>
 8000d76:	429e      	cmp	r6, r3
 8000d78:	f240 80f9 	bls.w	8000f6e <__udivmoddi4+0x282>
 8000d7c:	4463      	add	r3, ip
 8000d7e:	3802      	subs	r0, #2
 8000d80:	1b9b      	subs	r3, r3, r6
 8000d82:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d86:	2100      	movs	r1, #0
 8000d88:	b11d      	cbz	r5, 8000d92 <__udivmoddi4+0xa6>
 8000d8a:	40d3      	lsrs	r3, r2
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	e9c5 3200 	strd	r3, r2, [r5]
 8000d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d96:	428b      	cmp	r3, r1
 8000d98:	d905      	bls.n	8000da6 <__udivmoddi4+0xba>
 8000d9a:	b10d      	cbz	r5, 8000da0 <__udivmoddi4+0xb4>
 8000d9c:	e9c5 0100 	strd	r0, r1, [r5]
 8000da0:	2100      	movs	r1, #0
 8000da2:	4608      	mov	r0, r1
 8000da4:	e7f5      	b.n	8000d92 <__udivmoddi4+0xa6>
 8000da6:	fab3 f183 	clz	r1, r3
 8000daa:	2900      	cmp	r1, #0
 8000dac:	d146      	bne.n	8000e3c <__udivmoddi4+0x150>
 8000dae:	42a3      	cmp	r3, r4
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0xcc>
 8000db2:	4290      	cmp	r0, r2
 8000db4:	f0c0 80f0 	bcc.w	8000f98 <__udivmoddi4+0x2ac>
 8000db8:	1a86      	subs	r6, r0, r2
 8000dba:	eb64 0303 	sbc.w	r3, r4, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	2d00      	cmp	r5, #0
 8000dc2:	d0e6      	beq.n	8000d92 <__udivmoddi4+0xa6>
 8000dc4:	e9c5 6300 	strd	r6, r3, [r5]
 8000dc8:	e7e3      	b.n	8000d92 <__udivmoddi4+0xa6>
 8000dca:	2a00      	cmp	r2, #0
 8000dcc:	f040 8090 	bne.w	8000ef0 <__udivmoddi4+0x204>
 8000dd0:	eba1 040c 	sub.w	r4, r1, ip
 8000dd4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dd8:	fa1f f78c 	uxth.w	r7, ip
 8000ddc:	2101      	movs	r1, #1
 8000dde:	fbb4 f6f8 	udiv	r6, r4, r8
 8000de2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000de6:	fb08 4416 	mls	r4, r8, r6, r4
 8000dea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dee:	fb07 f006 	mul.w	r0, r7, r6
 8000df2:	4298      	cmp	r0, r3
 8000df4:	d908      	bls.n	8000e08 <__udivmoddi4+0x11c>
 8000df6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dfa:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0x11a>
 8000e00:	4298      	cmp	r0, r3
 8000e02:	f200 80cd 	bhi.w	8000fa0 <__udivmoddi4+0x2b4>
 8000e06:	4626      	mov	r6, r4
 8000e08:	1a1c      	subs	r4, r3, r0
 8000e0a:	fa1f f38e 	uxth.w	r3, lr
 8000e0e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e12:	fb08 4410 	mls	r4, r8, r0, r4
 8000e16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e1a:	fb00 f707 	mul.w	r7, r0, r7
 8000e1e:	429f      	cmp	r7, r3
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0x148>
 8000e22:	eb1c 0303 	adds.w	r3, ip, r3
 8000e26:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x146>
 8000e2c:	429f      	cmp	r7, r3
 8000e2e:	f200 80b0 	bhi.w	8000f92 <__udivmoddi4+0x2a6>
 8000e32:	4620      	mov	r0, r4
 8000e34:	1bdb      	subs	r3, r3, r7
 8000e36:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e3a:	e7a5      	b.n	8000d88 <__udivmoddi4+0x9c>
 8000e3c:	f1c1 0620 	rsb	r6, r1, #32
 8000e40:	408b      	lsls	r3, r1
 8000e42:	fa22 f706 	lsr.w	r7, r2, r6
 8000e46:	431f      	orrs	r7, r3
 8000e48:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e4c:	fa04 f301 	lsl.w	r3, r4, r1
 8000e50:	ea43 030c 	orr.w	r3, r3, ip
 8000e54:	40f4      	lsrs	r4, r6
 8000e56:	fa00 f801 	lsl.w	r8, r0, r1
 8000e5a:	0c38      	lsrs	r0, r7, #16
 8000e5c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e60:	fbb4 fef0 	udiv	lr, r4, r0
 8000e64:	fa1f fc87 	uxth.w	ip, r7
 8000e68:	fb00 441e 	mls	r4, r0, lr, r4
 8000e6c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e70:	fb0e f90c 	mul.w	r9, lr, ip
 8000e74:	45a1      	cmp	r9, r4
 8000e76:	fa02 f201 	lsl.w	r2, r2, r1
 8000e7a:	d90a      	bls.n	8000e92 <__udivmoddi4+0x1a6>
 8000e7c:	193c      	adds	r4, r7, r4
 8000e7e:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000e82:	f080 8084 	bcs.w	8000f8e <__udivmoddi4+0x2a2>
 8000e86:	45a1      	cmp	r9, r4
 8000e88:	f240 8081 	bls.w	8000f8e <__udivmoddi4+0x2a2>
 8000e8c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e90:	443c      	add	r4, r7
 8000e92:	eba4 0409 	sub.w	r4, r4, r9
 8000e96:	fa1f f983 	uxth.w	r9, r3
 8000e9a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e9e:	fb00 4413 	mls	r4, r0, r3, r4
 8000ea2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000eaa:	45a4      	cmp	ip, r4
 8000eac:	d907      	bls.n	8000ebe <__udivmoddi4+0x1d2>
 8000eae:	193c      	adds	r4, r7, r4
 8000eb0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000eb4:	d267      	bcs.n	8000f86 <__udivmoddi4+0x29a>
 8000eb6:	45a4      	cmp	ip, r4
 8000eb8:	d965      	bls.n	8000f86 <__udivmoddi4+0x29a>
 8000eba:	3b02      	subs	r3, #2
 8000ebc:	443c      	add	r4, r7
 8000ebe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ec2:	fba0 9302 	umull	r9, r3, r0, r2
 8000ec6:	eba4 040c 	sub.w	r4, r4, ip
 8000eca:	429c      	cmp	r4, r3
 8000ecc:	46ce      	mov	lr, r9
 8000ece:	469c      	mov	ip, r3
 8000ed0:	d351      	bcc.n	8000f76 <__udivmoddi4+0x28a>
 8000ed2:	d04e      	beq.n	8000f72 <__udivmoddi4+0x286>
 8000ed4:	b155      	cbz	r5, 8000eec <__udivmoddi4+0x200>
 8000ed6:	ebb8 030e 	subs.w	r3, r8, lr
 8000eda:	eb64 040c 	sbc.w	r4, r4, ip
 8000ede:	fa04 f606 	lsl.w	r6, r4, r6
 8000ee2:	40cb      	lsrs	r3, r1
 8000ee4:	431e      	orrs	r6, r3
 8000ee6:	40cc      	lsrs	r4, r1
 8000ee8:	e9c5 6400 	strd	r6, r4, [r5]
 8000eec:	2100      	movs	r1, #0
 8000eee:	e750      	b.n	8000d92 <__udivmoddi4+0xa6>
 8000ef0:	f1c2 0320 	rsb	r3, r2, #32
 8000ef4:	fa20 f103 	lsr.w	r1, r0, r3
 8000ef8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000efc:	fa24 f303 	lsr.w	r3, r4, r3
 8000f00:	4094      	lsls	r4, r2
 8000f02:	430c      	orrs	r4, r1
 8000f04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f08:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f0c:	fa1f f78c 	uxth.w	r7, ip
 8000f10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f14:	fb08 3110 	mls	r1, r8, r0, r3
 8000f18:	0c23      	lsrs	r3, r4, #16
 8000f1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f1e:	fb00 f107 	mul.w	r1, r0, r7
 8000f22:	4299      	cmp	r1, r3
 8000f24:	d908      	bls.n	8000f38 <__udivmoddi4+0x24c>
 8000f26:	eb1c 0303 	adds.w	r3, ip, r3
 8000f2a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f2e:	d22c      	bcs.n	8000f8a <__udivmoddi4+0x29e>
 8000f30:	4299      	cmp	r1, r3
 8000f32:	d92a      	bls.n	8000f8a <__udivmoddi4+0x29e>
 8000f34:	3802      	subs	r0, #2
 8000f36:	4463      	add	r3, ip
 8000f38:	1a5b      	subs	r3, r3, r1
 8000f3a:	b2a4      	uxth	r4, r4
 8000f3c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f40:	fb08 3311 	mls	r3, r8, r1, r3
 8000f44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f48:	fb01 f307 	mul.w	r3, r1, r7
 8000f4c:	42a3      	cmp	r3, r4
 8000f4e:	d908      	bls.n	8000f62 <__udivmoddi4+0x276>
 8000f50:	eb1c 0404 	adds.w	r4, ip, r4
 8000f54:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000f58:	d213      	bcs.n	8000f82 <__udivmoddi4+0x296>
 8000f5a:	42a3      	cmp	r3, r4
 8000f5c:	d911      	bls.n	8000f82 <__udivmoddi4+0x296>
 8000f5e:	3902      	subs	r1, #2
 8000f60:	4464      	add	r4, ip
 8000f62:	1ae4      	subs	r4, r4, r3
 8000f64:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f68:	e739      	b.n	8000dde <__udivmoddi4+0xf2>
 8000f6a:	4604      	mov	r4, r0
 8000f6c:	e6f0      	b.n	8000d50 <__udivmoddi4+0x64>
 8000f6e:	4608      	mov	r0, r1
 8000f70:	e706      	b.n	8000d80 <__udivmoddi4+0x94>
 8000f72:	45c8      	cmp	r8, r9
 8000f74:	d2ae      	bcs.n	8000ed4 <__udivmoddi4+0x1e8>
 8000f76:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f7a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f7e:	3801      	subs	r0, #1
 8000f80:	e7a8      	b.n	8000ed4 <__udivmoddi4+0x1e8>
 8000f82:	4631      	mov	r1, r6
 8000f84:	e7ed      	b.n	8000f62 <__udivmoddi4+0x276>
 8000f86:	4603      	mov	r3, r0
 8000f88:	e799      	b.n	8000ebe <__udivmoddi4+0x1d2>
 8000f8a:	4630      	mov	r0, r6
 8000f8c:	e7d4      	b.n	8000f38 <__udivmoddi4+0x24c>
 8000f8e:	46d6      	mov	lr, sl
 8000f90:	e77f      	b.n	8000e92 <__udivmoddi4+0x1a6>
 8000f92:	4463      	add	r3, ip
 8000f94:	3802      	subs	r0, #2
 8000f96:	e74d      	b.n	8000e34 <__udivmoddi4+0x148>
 8000f98:	4606      	mov	r6, r0
 8000f9a:	4623      	mov	r3, r4
 8000f9c:	4608      	mov	r0, r1
 8000f9e:	e70f      	b.n	8000dc0 <__udivmoddi4+0xd4>
 8000fa0:	3e02      	subs	r6, #2
 8000fa2:	4463      	add	r3, ip
 8000fa4:	e730      	b.n	8000e08 <__udivmoddi4+0x11c>
 8000fa6:	bf00      	nop

08000fa8 <__aeabi_idiv0>:
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop

08000fac <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b08a      	sub	sp, #40	@ 0x28
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8000fb8:	f006 fbce 	bl	8007758 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8000fbc:	4b5a      	ldr	r3, [pc, #360]	@ (8001128 <pvPortMallocMicroROS+0x17c>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d101      	bne.n	8000fc8 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8000fc4:	f000 f986 	bl	80012d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000fc8:	4b58      	ldr	r3, [pc, #352]	@ (800112c <pvPortMallocMicroROS+0x180>)
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	4013      	ands	r3, r2
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	f040 8090 	bne.w	80010f6 <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d01e      	beq.n	800101a <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8000fdc:	2208      	movs	r2, #8
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4413      	add	r3, r2
 8000fe2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	f003 0307 	and.w	r3, r3, #7
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d015      	beq.n	800101a <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	f023 0307 	bic.w	r3, r3, #7
 8000ff4:	3308      	adds	r3, #8
 8000ff6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	f003 0307 	and.w	r3, r3, #7
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d00b      	beq.n	800101a <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001002:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001006:	f383 8811 	msr	BASEPRI, r3
 800100a:	f3bf 8f6f 	isb	sy
 800100e:	f3bf 8f4f 	dsb	sy
 8001012:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001014:	bf00      	nop
 8001016:	bf00      	nop
 8001018:	e7fd      	b.n	8001016 <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d06a      	beq.n	80010f6 <pvPortMallocMicroROS+0x14a>
 8001020:	4b43      	ldr	r3, [pc, #268]	@ (8001130 <pvPortMallocMicroROS+0x184>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	687a      	ldr	r2, [r7, #4]
 8001026:	429a      	cmp	r2, r3
 8001028:	d865      	bhi.n	80010f6 <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800102a:	4b42      	ldr	r3, [pc, #264]	@ (8001134 <pvPortMallocMicroROS+0x188>)
 800102c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800102e:	4b41      	ldr	r3, [pc, #260]	@ (8001134 <pvPortMallocMicroROS+0x188>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001034:	e004      	b.n	8001040 <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 8001036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001038:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800103a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	687a      	ldr	r2, [r7, #4]
 8001046:	429a      	cmp	r2, r3
 8001048:	d903      	bls.n	8001052 <pvPortMallocMicroROS+0xa6>
 800104a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d1f1      	bne.n	8001036 <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8001052:	4b35      	ldr	r3, [pc, #212]	@ (8001128 <pvPortMallocMicroROS+0x17c>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001058:	429a      	cmp	r2, r3
 800105a:	d04c      	beq.n	80010f6 <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800105c:	6a3b      	ldr	r3, [r7, #32]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	2208      	movs	r2, #8
 8001062:	4413      	add	r3, r2
 8001064:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	6a3b      	ldr	r3, [r7, #32]
 800106c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800106e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001070:	685a      	ldr	r2, [r3, #4]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	1ad2      	subs	r2, r2, r3
 8001076:	2308      	movs	r3, #8
 8001078:	005b      	lsls	r3, r3, #1
 800107a:	429a      	cmp	r2, r3
 800107c:	d920      	bls.n	80010c0 <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800107e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	4413      	add	r3, r2
 8001084:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001086:	69bb      	ldr	r3, [r7, #24]
 8001088:	f003 0307 	and.w	r3, r3, #7
 800108c:	2b00      	cmp	r3, #0
 800108e:	d00b      	beq.n	80010a8 <pvPortMallocMicroROS+0xfc>
	__asm volatile
 8001090:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001094:	f383 8811 	msr	BASEPRI, r3
 8001098:	f3bf 8f6f 	isb	sy
 800109c:	f3bf 8f4f 	dsb	sy
 80010a0:	613b      	str	r3, [r7, #16]
}
 80010a2:	bf00      	nop
 80010a4:	bf00      	nop
 80010a6:	e7fd      	b.n	80010a4 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80010a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010aa:	685a      	ldr	r2, [r3, #4]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	1ad2      	subs	r2, r2, r3
 80010b0:	69bb      	ldr	r3, [r7, #24]
 80010b2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80010b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010b6:	687a      	ldr	r2, [r7, #4]
 80010b8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80010ba:	69b8      	ldr	r0, [r7, #24]
 80010bc:	f000 f96c 	bl	8001398 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80010c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001130 <pvPortMallocMicroROS+0x184>)
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	4a19      	ldr	r2, [pc, #100]	@ (8001130 <pvPortMallocMicroROS+0x184>)
 80010cc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80010ce:	4b18      	ldr	r3, [pc, #96]	@ (8001130 <pvPortMallocMicroROS+0x184>)
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	4b19      	ldr	r3, [pc, #100]	@ (8001138 <pvPortMallocMicroROS+0x18c>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	429a      	cmp	r2, r3
 80010d8:	d203      	bcs.n	80010e2 <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80010da:	4b15      	ldr	r3, [pc, #84]	@ (8001130 <pvPortMallocMicroROS+0x184>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4a16      	ldr	r2, [pc, #88]	@ (8001138 <pvPortMallocMicroROS+0x18c>)
 80010e0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80010e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010e4:	685a      	ldr	r2, [r3, #4]
 80010e6:	4b11      	ldr	r3, [pc, #68]	@ (800112c <pvPortMallocMicroROS+0x180>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	431a      	orrs	r2, r3
 80010ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010ee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80010f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80010f6:	f006 fb3d 	bl	8007774 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	f003 0307 	and.w	r3, r3, #7
 8001100:	2b00      	cmp	r3, #0
 8001102:	d00b      	beq.n	800111c <pvPortMallocMicroROS+0x170>
	__asm volatile
 8001104:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001108:	f383 8811 	msr	BASEPRI, r3
 800110c:	f3bf 8f6f 	isb	sy
 8001110:	f3bf 8f4f 	dsb	sy
 8001114:	60fb      	str	r3, [r7, #12]
}
 8001116:	bf00      	nop
 8001118:	bf00      	nop
 800111a:	e7fd      	b.n	8001118 <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 800111c:	69fb      	ldr	r3, [r7, #28]
}
 800111e:	4618      	mov	r0, r3
 8001120:	3728      	adds	r7, #40	@ 0x28
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	20007d74 	.word	0x20007d74
 800112c:	20007d80 	.word	0x20007d80
 8001130:	20007d78 	.word	0x20007d78
 8001134:	20007d6c 	.word	0x20007d6c
 8001138:	20007d7c 	.word	0x20007d7c

0800113c <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b086      	sub	sp, #24
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d04a      	beq.n	80011e4 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800114e:	2308      	movs	r3, #8
 8001150:	425b      	negs	r3, r3
 8001152:	697a      	ldr	r2, [r7, #20]
 8001154:	4413      	add	r3, r2
 8001156:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800115c:	693b      	ldr	r3, [r7, #16]
 800115e:	685a      	ldr	r2, [r3, #4]
 8001160:	4b22      	ldr	r3, [pc, #136]	@ (80011ec <vPortFreeMicroROS+0xb0>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4013      	ands	r3, r2
 8001166:	2b00      	cmp	r3, #0
 8001168:	d10b      	bne.n	8001182 <vPortFreeMicroROS+0x46>
	__asm volatile
 800116a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800116e:	f383 8811 	msr	BASEPRI, r3
 8001172:	f3bf 8f6f 	isb	sy
 8001176:	f3bf 8f4f 	dsb	sy
 800117a:	60fb      	str	r3, [r7, #12]
}
 800117c:	bf00      	nop
 800117e:	bf00      	nop
 8001180:	e7fd      	b.n	800117e <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d00b      	beq.n	80011a2 <vPortFreeMicroROS+0x66>
	__asm volatile
 800118a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800118e:	f383 8811 	msr	BASEPRI, r3
 8001192:	f3bf 8f6f 	isb	sy
 8001196:	f3bf 8f4f 	dsb	sy
 800119a:	60bb      	str	r3, [r7, #8]
}
 800119c:	bf00      	nop
 800119e:	bf00      	nop
 80011a0:	e7fd      	b.n	800119e <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	685a      	ldr	r2, [r3, #4]
 80011a6:	4b11      	ldr	r3, [pc, #68]	@ (80011ec <vPortFreeMicroROS+0xb0>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4013      	ands	r3, r2
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d019      	beq.n	80011e4 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d115      	bne.n	80011e4 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	685a      	ldr	r2, [r3, #4]
 80011bc:	4b0b      	ldr	r3, [pc, #44]	@ (80011ec <vPortFreeMicroROS+0xb0>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	43db      	mvns	r3, r3
 80011c2:	401a      	ands	r2, r3
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80011c8:	f006 fac6 	bl	8007758 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	685a      	ldr	r2, [r3, #4]
 80011d0:	4b07      	ldr	r3, [pc, #28]	@ (80011f0 <vPortFreeMicroROS+0xb4>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4413      	add	r3, r2
 80011d6:	4a06      	ldr	r2, [pc, #24]	@ (80011f0 <vPortFreeMicroROS+0xb4>)
 80011d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80011da:	6938      	ldr	r0, [r7, #16]
 80011dc:	f000 f8dc 	bl	8001398 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80011e0:	f006 fac8 	bl	8007774 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80011e4:	bf00      	nop
 80011e6:	3718      	adds	r7, #24
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	20007d80 	.word	0x20007d80
 80011f0:	20007d78 	.word	0x20007d78

080011f4 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 80011f4:	b480      	push	{r7}
 80011f6:	b087      	sub	sp, #28
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8001200:	2308      	movs	r3, #8
 8001202:	425b      	negs	r3, r3
 8001204:	697a      	ldr	r2, [r7, #20]
 8001206:	4413      	add	r3, r2
 8001208:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	685a      	ldr	r2, [r3, #4]
 8001212:	4b06      	ldr	r3, [pc, #24]	@ (800122c <getBlockSize+0x38>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	43db      	mvns	r3, r3
 8001218:	4013      	ands	r3, r2
 800121a:	60fb      	str	r3, [r7, #12]

	return count;
 800121c:	68fb      	ldr	r3, [r7, #12]
}
 800121e:	4618      	mov	r0, r3
 8001220:	371c      	adds	r7, #28
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	20007d80 	.word	0x20007d80

08001230 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
 8001238:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 800123a:	f006 fa8d 	bl	8007758 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 800123e:	6838      	ldr	r0, [r7, #0]
 8001240:	f7ff feb4 	bl	8000fac <pvPortMallocMicroROS>
 8001244:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8001246:	68bb      	ldr	r3, [r7, #8]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d017      	beq.n	800127c <pvPortReallocMicroROS+0x4c>
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d014      	beq.n	800127c <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	f7ff ffce 	bl	80011f4 <getBlockSize>
 8001258:	4603      	mov	r3, r0
 800125a:	2208      	movs	r2, #8
 800125c:	1a9b      	subs	r3, r3, r2
 800125e:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8001260:	683a      	ldr	r2, [r7, #0]
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	429a      	cmp	r2, r3
 8001266:	d201      	bcs.n	800126c <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 800126c:	68fa      	ldr	r2, [r7, #12]
 800126e:	6879      	ldr	r1, [r7, #4]
 8001270:	68b8      	ldr	r0, [r7, #8]
 8001272:	f018 f9cc 	bl	801960e <memcpy>

		vPortFreeMicroROS(pv);
 8001276:	6878      	ldr	r0, [r7, #4]
 8001278:	f7ff ff60 	bl	800113c <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 800127c:	f006 fa7a 	bl	8007774 <xTaskResumeAll>

	return newmem;
 8001280:	68bb      	ldr	r3, [r7, #8]
}
 8001282:	4618      	mov	r0, r3
 8001284:	3710      	adds	r7, #16
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}

0800128a <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 800128a:	b580      	push	{r7, lr}
 800128c:	b086      	sub	sp, #24
 800128e:	af00      	add	r7, sp, #0
 8001290:	6078      	str	r0, [r7, #4]
 8001292:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001294:	f006 fa60 	bl	8007758 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	687a      	ldr	r2, [r7, #4]
 800129c:	fb02 f303 	mul.w	r3, r2, r3
 80012a0:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 80012a2:	6978      	ldr	r0, [r7, #20]
 80012a4:	f7ff fe82 	bl	8000fac <pvPortMallocMicroROS>
 80012a8:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	613b      	str	r3, [r7, #16]

  	while(count--)
 80012ae:	e004      	b.n	80012ba <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	1c5a      	adds	r2, r3, #1
 80012b4:	613a      	str	r2, [r7, #16]
 80012b6:	2200      	movs	r2, #0
 80012b8:	701a      	strb	r2, [r3, #0]
  	while(count--)
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	1e5a      	subs	r2, r3, #1
 80012be:	617a      	str	r2, [r7, #20]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d1f5      	bne.n	80012b0 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 80012c4:	f006 fa56 	bl	8007774 <xTaskResumeAll>
  	return mem;
 80012c8:	68fb      	ldr	r3, [r7, #12]
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3718      	adds	r7, #24
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
	...

080012d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80012d4:	b480      	push	{r7}
 80012d6:	b085      	sub	sp, #20
 80012d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80012da:	f247 5330 	movw	r3, #30000	@ 0x7530
 80012de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80012e0:	4b27      	ldr	r3, [pc, #156]	@ (8001380 <prvHeapInit+0xac>)
 80012e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	f003 0307 	and.w	r3, r3, #7
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d00c      	beq.n	8001308 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	3307      	adds	r3, #7
 80012f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	f023 0307 	bic.w	r3, r3, #7
 80012fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80012fc:	68ba      	ldr	r2, [r7, #8]
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	4a1f      	ldr	r2, [pc, #124]	@ (8001380 <prvHeapInit+0xac>)
 8001304:	4413      	add	r3, r2
 8001306:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800130c:	4a1d      	ldr	r2, [pc, #116]	@ (8001384 <prvHeapInit+0xb0>)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8001312:	4b1c      	ldr	r3, [pc, #112]	@ (8001384 <prvHeapInit+0xb0>)
 8001314:	2200      	movs	r2, #0
 8001316:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	68ba      	ldr	r2, [r7, #8]
 800131c:	4413      	add	r3, r2
 800131e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8001320:	2208      	movs	r2, #8
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	1a9b      	subs	r3, r3, r2
 8001326:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	f023 0307 	bic.w	r3, r3, #7
 800132e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	4a15      	ldr	r2, [pc, #84]	@ (8001388 <prvHeapInit+0xb4>)
 8001334:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8001336:	4b14      	ldr	r3, [pc, #80]	@ (8001388 <prvHeapInit+0xb4>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	2200      	movs	r2, #0
 800133c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800133e:	4b12      	ldr	r3, [pc, #72]	@ (8001388 <prvHeapInit+0xb4>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	2200      	movs	r2, #0
 8001344:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	68fa      	ldr	r2, [r7, #12]
 800134e:	1ad2      	subs	r2, r2, r3
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001354:	4b0c      	ldr	r3, [pc, #48]	@ (8001388 <prvHeapInit+0xb4>)
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	4a0a      	ldr	r2, [pc, #40]	@ (800138c <prvHeapInit+0xb8>)
 8001362:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	4a09      	ldr	r2, [pc, #36]	@ (8001390 <prvHeapInit+0xbc>)
 800136a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800136c:	4b09      	ldr	r3, [pc, #36]	@ (8001394 <prvHeapInit+0xc0>)
 800136e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001372:	601a      	str	r2, [r3, #0]
}
 8001374:	bf00      	nop
 8001376:	3714      	adds	r7, #20
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr
 8001380:	2000083c 	.word	0x2000083c
 8001384:	20007d6c 	.word	0x20007d6c
 8001388:	20007d74 	.word	0x20007d74
 800138c:	20007d7c 	.word	0x20007d7c
 8001390:	20007d78 	.word	0x20007d78
 8001394:	20007d80 	.word	0x20007d80

08001398 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001398:	b480      	push	{r7}
 800139a:	b085      	sub	sp, #20
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80013a0:	4b28      	ldr	r3, [pc, #160]	@ (8001444 <prvInsertBlockIntoFreeList+0xac>)
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	e002      	b.n	80013ac <prvInsertBlockIntoFreeList+0x14>
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	60fb      	str	r3, [r7, #12]
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	687a      	ldr	r2, [r7, #4]
 80013b2:	429a      	cmp	r2, r3
 80013b4:	d8f7      	bhi.n	80013a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	68ba      	ldr	r2, [r7, #8]
 80013c0:	4413      	add	r3, r2
 80013c2:	687a      	ldr	r2, [r7, #4]
 80013c4:	429a      	cmp	r2, r3
 80013c6:	d108      	bne.n	80013da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	685a      	ldr	r2, [r3, #4]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	441a      	add	r2, r3
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	68ba      	ldr	r2, [r7, #8]
 80013e4:	441a      	add	r2, r3
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	429a      	cmp	r2, r3
 80013ec:	d118      	bne.n	8001420 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	4b15      	ldr	r3, [pc, #84]	@ (8001448 <prvInsertBlockIntoFreeList+0xb0>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	429a      	cmp	r2, r3
 80013f8:	d00d      	beq.n	8001416 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	685a      	ldr	r2, [r3, #4]
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	441a      	add	r2, r3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	601a      	str	r2, [r3, #0]
 8001414:	e008      	b.n	8001428 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001416:	4b0c      	ldr	r3, [pc, #48]	@ (8001448 <prvInsertBlockIntoFreeList+0xb0>)
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	601a      	str	r2, [r3, #0]
 800141e:	e003      	b.n	8001428 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001428:	68fa      	ldr	r2, [r7, #12]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	429a      	cmp	r2, r3
 800142e:	d002      	beq.n	8001436 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	687a      	ldr	r2, [r7, #4]
 8001434:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001436:	bf00      	nop
 8001438:	3714      	adds	r7, #20
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	20007d6c 	.word	0x20007d6c
 8001448:	20007d74 	.word	0x20007d74

0800144c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001452:	2300      	movs	r3, #0
 8001454:	607b      	str	r3, [r7, #4]
 8001456:	4b10      	ldr	r3, [pc, #64]	@ (8001498 <MX_DMA_Init+0x4c>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800145a:	4a0f      	ldr	r2, [pc, #60]	@ (8001498 <MX_DMA_Init+0x4c>)
 800145c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001460:	6313      	str	r3, [r2, #48]	@ 0x30
 8001462:	4b0d      	ldr	r3, [pc, #52]	@ (8001498 <MX_DMA_Init+0x4c>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001466:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800146a:	607b      	str	r3, [r7, #4]
 800146c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 800146e:	2200      	movs	r2, #0
 8001470:	2105      	movs	r1, #5
 8001472:	203a      	movs	r0, #58	@ 0x3a
 8001474:	f002 f808 	bl	8003488 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001478:	203a      	movs	r0, #58	@ 0x3a
 800147a:	f002 f821 	bl	80034c0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 800147e:	2200      	movs	r2, #0
 8001480:	2105      	movs	r1, #5
 8001482:	2046      	movs	r0, #70	@ 0x46
 8001484:	f002 f800 	bl	8003488 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001488:	2046      	movs	r0, #70	@ 0x46
 800148a:	f002 f819 	bl	80034c0 <HAL_NVIC_EnableIRQ>

}
 800148e:	bf00      	nop
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	40023800 	.word	0x40023800

0800149c <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80014aa:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 80014ac:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80014b0:	4904      	ldr	r1, [pc, #16]	@ (80014c4 <cubemx_transport_open+0x28>)
 80014b2:	68f8      	ldr	r0, [r7, #12]
 80014b4:	f003 fe4c 	bl	8005150 <HAL_UART_Receive_DMA>
    return true;
 80014b8:	2301      	movs	r3, #1
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3710      	adds	r7, #16
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	20007d84 	.word	0x20007d84

080014c8 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80014d6:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 80014d8:	68f8      	ldr	r0, [r7, #12]
 80014da:	f003 fe5e 	bl	800519a <HAL_UART_DMAStop>
    return true;
 80014de:	2301      	movs	r3, #1
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	3710      	adds	r7, #16
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}

080014e8 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b086      	sub	sp, #24
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	60f8      	str	r0, [r7, #12]
 80014f0:	60b9      	str	r1, [r7, #8]
 80014f2:	607a      	str	r2, [r7, #4]
 80014f4:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80014fc:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001504:	b2db      	uxtb	r3, r3
 8001506:	2b20      	cmp	r3, #32
 8001508:	d11c      	bne.n	8001544 <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	b29b      	uxth	r3, r3
 800150e:	461a      	mov	r2, r3
 8001510:	68b9      	ldr	r1, [r7, #8]
 8001512:	6978      	ldr	r0, [r7, #20]
 8001514:	f003 fdac 	bl	8005070 <HAL_UART_Transmit_DMA>
 8001518:	4603      	mov	r3, r0
 800151a:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 800151c:	e002      	b.n	8001524 <cubemx_transport_write+0x3c>
            osDelay(1);
 800151e:	2001      	movs	r0, #1
 8001520:	f005 f8d8 	bl	80066d4 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001524:	7cfb      	ldrb	r3, [r7, #19]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d105      	bne.n	8001536 <cubemx_transport_write+0x4e>
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001530:	b2db      	uxtb	r3, r3
 8001532:	2b20      	cmp	r3, #32
 8001534:	d1f3      	bne.n	800151e <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 8001536:	7cfb      	ldrb	r3, [r7, #19]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d101      	bne.n	8001540 <cubemx_transport_write+0x58>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	e002      	b.n	8001546 <cubemx_transport_write+0x5e>
 8001540:	2300      	movs	r3, #0
 8001542:	e000      	b.n	8001546 <cubemx_transport_write+0x5e>
    }else{
        return 0;
 8001544:	2300      	movs	r3, #0
    }
}
 8001546:	4618      	mov	r0, r3
 8001548:	3718      	adds	r7, #24
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
	...

08001550 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8001550:	b580      	push	{r7, lr}
 8001552:	b088      	sub	sp, #32
 8001554:	af00      	add	r7, sp, #0
 8001556:	60f8      	str	r0, [r7, #12]
 8001558:	60b9      	str	r1, [r7, #8]
 800155a:	607a      	str	r2, [r7, #4]
 800155c:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8001564:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8001566:	2300      	movs	r3, #0
 8001568:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800156a:	b672      	cpsid	i
}
 800156c:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 800157a:	4a1c      	ldr	r2, [pc, #112]	@ (80015ec <cubemx_transport_read+0x9c>)
 800157c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800157e:	b662      	cpsie	i
}
 8001580:	bf00      	nop
        __enable_irq();
        ms_used++;
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	3301      	adds	r3, #1
 8001586:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8001588:	2001      	movs	r0, #1
 800158a:	f005 f8a3 	bl	80066d4 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 800158e:	4b18      	ldr	r3, [pc, #96]	@ (80015f0 <cubemx_transport_read+0xa0>)
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	4b16      	ldr	r3, [pc, #88]	@ (80015ec <cubemx_transport_read+0x9c>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	429a      	cmp	r2, r3
 8001598:	d103      	bne.n	80015a2 <cubemx_transport_read+0x52>
 800159a:	69fa      	ldr	r2, [r7, #28]
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	429a      	cmp	r2, r3
 80015a0:	dbe3      	blt.n	800156a <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 80015a2:	2300      	movs	r3, #0
 80015a4:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80015a6:	e011      	b.n	80015cc <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 80015a8:	4b11      	ldr	r3, [pc, #68]	@ (80015f0 <cubemx_transport_read+0xa0>)
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	68b9      	ldr	r1, [r7, #8]
 80015ae:	69bb      	ldr	r3, [r7, #24]
 80015b0:	440b      	add	r3, r1
 80015b2:	4910      	ldr	r1, [pc, #64]	@ (80015f4 <cubemx_transport_read+0xa4>)
 80015b4:	5c8a      	ldrb	r2, [r1, r2]
 80015b6:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 80015b8:	4b0d      	ldr	r3, [pc, #52]	@ (80015f0 <cubemx_transport_read+0xa0>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	3301      	adds	r3, #1
 80015be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80015c2:	4a0b      	ldr	r2, [pc, #44]	@ (80015f0 <cubemx_transport_read+0xa0>)
 80015c4:	6013      	str	r3, [r2, #0]
        wrote++;
 80015c6:	69bb      	ldr	r3, [r7, #24]
 80015c8:	3301      	adds	r3, #1
 80015ca:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80015cc:	4b08      	ldr	r3, [pc, #32]	@ (80015f0 <cubemx_transport_read+0xa0>)
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	4b06      	ldr	r3, [pc, #24]	@ (80015ec <cubemx_transport_read+0x9c>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d003      	beq.n	80015e0 <cubemx_transport_read+0x90>
 80015d8:	69ba      	ldr	r2, [r7, #24]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	429a      	cmp	r2, r3
 80015de:	d3e3      	bcc.n	80015a8 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 80015e0:	69bb      	ldr	r3, [r7, #24]
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3720      	adds	r7, #32
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	20008588 	.word	0x20008588
 80015f0:	20008584 	.word	0x20008584
 80015f4:	20007d84 	.word	0x20007d84

080015f8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80015fc:	4a04      	ldr	r2, [pc, #16]	@ (8001610 <MX_FREERTOS_Init+0x18>)
 80015fe:	2100      	movs	r1, #0
 8001600:	4804      	ldr	r0, [pc, #16]	@ (8001614 <MX_FREERTOS_Init+0x1c>)
 8001602:	f004 ffd5 	bl	80065b0 <osThreadNew>
 8001606:	4603      	mov	r3, r0
 8001608:	4a03      	ldr	r2, [pc, #12]	@ (8001618 <MX_FREERTOS_Init+0x20>)
 800160a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800160c:	bf00      	nop
 800160e:	bd80      	pop	{r7, pc}
 8001610:	0801a930 	.word	0x0801a930
 8001614:	0800161d 	.word	0x0800161d
 8001618:	20008590 	.word	0x20008590

0800161c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800161c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800161e:	f5ad 7d79 	sub.w	sp, sp, #996	@ 0x3e4
 8001622:	af04      	add	r7, sp, #16
 8001624:	f507 7374 	add.w	r3, r7, #976	@ 0x3d0
 8001628:	f5a3 734b 	sub.w	r3, r3, #812	@ 0x32c
 800162c:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
	// micro-ROS configuration

	  rmw_uros_set_custom_transport(
 800162e:	4bcc      	ldr	r3, [pc, #816]	@ (8001960 <StartDefaultTask+0x344>)
 8001630:	9301      	str	r3, [sp, #4]
 8001632:	4bcc      	ldr	r3, [pc, #816]	@ (8001964 <StartDefaultTask+0x348>)
 8001634:	9300      	str	r3, [sp, #0]
 8001636:	4bcc      	ldr	r3, [pc, #816]	@ (8001968 <StartDefaultTask+0x34c>)
 8001638:	4acc      	ldr	r2, [pc, #816]	@ (800196c <StartDefaultTask+0x350>)
 800163a:	49cd      	ldr	r1, [pc, #820]	@ (8001970 <StartDefaultTask+0x354>)
 800163c:	2001      	movs	r0, #1
 800163e:	f009 ff7f 	bl	800b540 <rmw_uros_set_custom_transport>
	    cubemx_transport_open,
	    cubemx_transport_close,
	    cubemx_transport_write,
	    cubemx_transport_read);

	  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8001642:	f507 736a 	add.w	r3, r7, #936	@ 0x3a8
 8001646:	4618      	mov	r0, r3
 8001648:	f009 feac 	bl	800b3a4 <rcutils_get_zero_initialized_allocator>
	  freeRTOS_allocator.allocate = microros_allocate;
 800164c:	4bc9      	ldr	r3, [pc, #804]	@ (8001974 <StartDefaultTask+0x358>)
 800164e:	f8c7 33a8 	str.w	r3, [r7, #936]	@ 0x3a8
	  freeRTOS_allocator.deallocate = microros_deallocate;
 8001652:	4bc9      	ldr	r3, [pc, #804]	@ (8001978 <StartDefaultTask+0x35c>)
 8001654:	f8c7 33ac 	str.w	r3, [r7, #940]	@ 0x3ac
	  freeRTOS_allocator.reallocate = microros_reallocate;
 8001658:	4bc8      	ldr	r3, [pc, #800]	@ (800197c <StartDefaultTask+0x360>)
 800165a:	f8c7 33b0 	str.w	r3, [r7, #944]	@ 0x3b0
	  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 800165e:	4bc8      	ldr	r3, [pc, #800]	@ (8001980 <StartDefaultTask+0x364>)
 8001660:	f8c7 33b4 	str.w	r3, [r7, #948]	@ 0x3b4

	  if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8001664:	f507 736a 	add.w	r3, r7, #936	@ 0x3a8
 8001668:	4618      	mov	r0, r3
 800166a:	f009 fea9 	bl	800b3c0 <rcutils_set_default_allocator>
 800166e:	4603      	mov	r3, r0
 8001670:	f083 0301 	eor.w	r3, r3, #1
 8001674:	b2db      	uxtb	r3, r3
 8001676:	2b00      	cmp	r3, #0
 8001678:	d003      	beq.n	8001682 <StartDefaultTask+0x66>
	      printf("Error on default allocators (line %d)\n", __LINE__);
 800167a:	21ca      	movs	r1, #202	@ 0xca
 800167c:	48c1      	ldr	r0, [pc, #772]	@ (8001984 <StartDefaultTask+0x368>)
 800167e:	f017 fe8f 	bl	80193a0 <iprintf>

	  // PARAM SERVER

	  rcl_ret_t rc;

	  allocator = rcl_get_default_allocator();
 8001682:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8001686:	4618      	mov	r0, r3
 8001688:	f009 feb8 	bl	800b3fc <rcutils_get_default_allocator>
 800168c:	f507 7374 	add.w	r3, r7, #976	@ 0x3d0
 8001690:	f5a3 7352 	sub.w	r3, r3, #840	@ 0x348
 8001694:	f507 7458 	add.w	r4, r7, #864	@ 0x360
 8001698:	461d      	mov	r5, r3
 800169a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800169c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800169e:	682b      	ldr	r3, [r5, #0]
 80016a0:	6023      	str	r3, [r4, #0]

	  //create init_options
	  rc = rclc_support_init(&support, 0, NULL, &allocator);
 80016a2:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 80016a6:	f507 705d 	add.w	r0, r7, #884	@ 0x374
 80016aa:	2200      	movs	r2, #0
 80016ac:	2100      	movs	r1, #0
 80016ae:	f009 fd83 	bl	800b1b8 <rclc_support_init>
 80016b2:	f8c7 03c8 	str.w	r0, [r7, #968]	@ 0x3c8
	  if (rc != RCL_RET_OK) printf("Error (line %d)\n", __LINE__);
 80016b6:	f8d7 33c8 	ldr.w	r3, [r7, #968]	@ 0x3c8
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d003      	beq.n	80016c6 <StartDefaultTask+0xaa>
 80016be:	21f0      	movs	r1, #240	@ 0xf0
 80016c0:	48b1      	ldr	r0, [pc, #708]	@ (8001988 <StartDefaultTask+0x36c>)
 80016c2:	f017 fe6d 	bl	80193a0 <iprintf>

	  // create node
	  rc = rclc_node_init_default(&node, "cubemx_node", "", &support);
 80016c6:	f507 735d 	add.w	r3, r7, #884	@ 0x374
 80016ca:	f507 7056 	add.w	r0, r7, #856	@ 0x358
 80016ce:	4aaf      	ldr	r2, [pc, #700]	@ (800198c <StartDefaultTask+0x370>)
 80016d0:	49af      	ldr	r1, [pc, #700]	@ (8001990 <StartDefaultTask+0x374>)
 80016d2:	f009 fdbb 	bl	800b24c <rclc_node_init_default>
 80016d6:	f8c7 03c8 	str.w	r0, [r7, #968]	@ 0x3c8
	  if (rc != RCL_RET_OK) printf("Error (line %d)\n", __LINE__);
 80016da:	f8d7 33c8 	ldr.w	r3, [r7, #968]	@ 0x3c8
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d003      	beq.n	80016ea <StartDefaultTask+0xce>
 80016e2:	21f4      	movs	r1, #244	@ 0xf4
 80016e4:	48a8      	ldr	r0, [pc, #672]	@ (8001988 <StartDefaultTask+0x36c>)
 80016e6:	f017 fe5b 	bl	80193a0 <iprintf>

	  executor = rclc_executor_get_zero_initialized_executor();
 80016ea:	f507 7374 	add.w	r3, r7, #976	@ 0x3d0
 80016ee:	f5a3 7480 	sub.w	r4, r3, #256	@ 0x100
 80016f2:	463b      	mov	r3, r7
 80016f4:	4618      	mov	r0, r3
 80016f6:	f009 fa8b 	bl	800ac10 <rclc_executor_get_zero_initialized_executor>
 80016fa:	f507 7374 	add.w	r3, r7, #976	@ 0x3d0
 80016fe:	f5a3 7374 	sub.w	r3, r3, #976	@ 0x3d0
 8001702:	4620      	mov	r0, r4
 8001704:	4619      	mov	r1, r3
 8001706:	2388      	movs	r3, #136	@ 0x88
 8001708:	461a      	mov	r2, r3
 800170a:	f017 ff80 	bl	801960e <memcpy>
	  rc = rclc_executor_init(&executor, &support.context, NUMBER_SUBS_TIMS, &allocator);
 800170e:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8001712:	f507 715d 	add.w	r1, r7, #884	@ 0x374
 8001716:	f507 7034 	add.w	r0, r7, #720	@ 0x2d0
 800171a:	2204      	movs	r2, #4
 800171c:	f009 fa84 	bl	800ac28 <rclc_executor_init>
 8001720:	f8c7 03c8 	str.w	r0, [r7, #968]	@ 0x3c8
	  if (rc != RCL_RET_OK) printf("Error (line %d)\n", __LINE__);
 8001724:	f8d7 33c8 	ldr.w	r3, [r7, #968]	@ 0x3c8
 8001728:	2b00      	cmp	r3, #0
 800172a:	d003      	beq.n	8001734 <StartDefaultTask+0x118>
 800172c:	21f8      	movs	r1, #248	@ 0xf8
 800172e:	4896      	ldr	r0, [pc, #600]	@ (8001988 <StartDefaultTask+0x36c>)
 8001730:	f017 fe36 	bl	80193a0 <iprintf>

	  // PUBLISHERS
	  rclc_publisher_init_default(
 8001734:	f008 fdaa 	bl	800a28c <rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses>
 8001738:	4602      	mov	r2, r0
 800173a:	f507 7156 	add.w	r1, r7, #856	@ 0x358
 800173e:	f507 7033 	add.w	r0, r7, #716	@ 0x2cc
 8001742:	4b94      	ldr	r3, [pc, #592]	@ (8001994 <StartDefaultTask+0x378>)
 8001744:	f009 fdbe 	bl	800b2c4 <rclc_publisher_init_default>
	    &thruster_status_publisher,
	    &node,
	    ROSIDL_GET_MSG_TYPE_SUPPORT(nereo_interfaces, msg, ThrusterStatuses),
	    "/thruster_status");
	  thruster_status_msg.thrusters_pwms[0] = 0;
 8001748:	f507 7374 	add.w	r3, r7, #976	@ 0x3d0
 800174c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001750:	2200      	movs	r2, #0
 8001752:	801a      	strh	r2, [r3, #0]

	  // SUBSCRIBERS
	  static micro_ros_utilities_memory_conf_t default_conf = {0};

	  // IMU sub
	  rc = rclc_subscription_init_default(
 8001754:	f00a fc4e 	bl	800bff4 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>
 8001758:	4602      	mov	r2, r0
 800175a:	f507 7156 	add.w	r1, r7, #856	@ 0x358
 800175e:	f507 702d 	add.w	r0, r7, #692	@ 0x2b4
 8001762:	4b8d      	ldr	r3, [pc, #564]	@ (8001998 <StartDefaultTask+0x37c>)
 8001764:	f009 fde2 	bl	800b32c <rclc_subscription_init_default>
 8001768:	f8c7 03c8 	str.w	r0, [r7, #968]	@ 0x3c8
			  &imu_subscriber,
			  &node,
			  ROSIDL_GET_MSG_TYPE_SUPPORT(sensor_msgs, msg, Imu),
			  "/imu_data");
	  if (rc != RCL_RET_OK) printf("Error (line %d)\n", __LINE__);
 800176c:	f8d7 33c8 	ldr.w	r3, [r7, #968]	@ 0x3c8
 8001770:	2b00      	cmp	r3, #0
 8001772:	d004      	beq.n	800177e <StartDefaultTask+0x162>
 8001774:	f240 110b 	movw	r1, #267	@ 0x10b
 8001778:	4883      	ldr	r0, [pc, #524]	@ (8001988 <StartDefaultTask+0x36c>)
 800177a:	f017 fe11 	bl	80193a0 <iprintf>
	  // initialize message memory
	  rc = !micro_ros_utilities_create_message_memory(ROSIDL_GET_MSG_TYPE_SUPPORT(sensor_msgs, msg, Imu), &imu_data_msg, default_conf);
 800177e:	f00a fc39 	bl	800bff4 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>
 8001782:	4684      	mov	ip, r0
 8001784:	4c85      	ldr	r4, [pc, #532]	@ (800199c <StartDefaultTask+0x380>)
 8001786:	f507 76a0 	add.w	r6, r7, #320	@ 0x140
 800178a:	466d      	mov	r5, sp
 800178c:	f104 0308 	add.w	r3, r4, #8
 8001790:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001792:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001796:	e894 000c 	ldmia.w	r4, {r2, r3}
 800179a:	4631      	mov	r1, r6
 800179c:	4660      	mov	r0, ip
 800179e:	f008 fc43 	bl	800a028 <micro_ros_utilities_create_message_memory>
 80017a2:	4603      	mov	r3, r0
 80017a4:	f083 0301 	eor.w	r3, r3, #1
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	f8c7 33c8 	str.w	r3, [r7, #968]	@ 0x3c8

	  rc = rclc_executor_add_subscription(
 80017ae:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80017b2:	f507 712d 	add.w	r1, r7, #692	@ 0x2b4
 80017b6:	f507 7034 	add.w	r0, r7, #720	@ 0x2d0
 80017ba:	2300      	movs	r3, #0
 80017bc:	9300      	str	r3, [sp, #0]
 80017be:	4b78      	ldr	r3, [pc, #480]	@ (80019a0 <StartDefaultTask+0x384>)
 80017c0:	f009 faa2 	bl	800ad08 <rclc_executor_add_subscription>
 80017c4:	f8c7 03c8 	str.w	r0, [r7, #968]	@ 0x3c8
			  &executor, &imu_subscriber,
			  &imu_data_msg, &imu_subscription_callback, ON_NEW_DATA);
	  if (rc != RCL_RET_OK) printf("Error (line %d)\n", __LINE__);
 80017c8:	f8d7 33c8 	ldr.w	r3, [r7, #968]	@ 0x3c8
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d004      	beq.n	80017da <StartDefaultTask+0x1be>
 80017d0:	f44f 7189 	mov.w	r1, #274	@ 0x112
 80017d4:	486c      	ldr	r0, [pc, #432]	@ (8001988 <StartDefaultTask+0x36c>)
 80017d6:	f017 fde3 	bl	80193a0 <iprintf>

	  // JOY sub
	  rc = rclc_subscription_init_default(
 80017da:	f00a fc23 	bl	800c024 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Joy>
 80017de:	4602      	mov	r2, r0
 80017e0:	f507 7156 	add.w	r1, r7, #856	@ 0x358
 80017e4:	f507 702e 	add.w	r0, r7, #696	@ 0x2b8
 80017e8:	4b6e      	ldr	r3, [pc, #440]	@ (80019a4 <StartDefaultTask+0x388>)
 80017ea:	f009 fd9f 	bl	800b32c <rclc_subscription_init_default>
 80017ee:	f8c7 03c8 	str.w	r0, [r7, #968]	@ 0x3c8
			  &joystick_subscriber,
			  &node,
			  ROSIDL_GET_MSG_TYPE_SUPPORT(sensor_msgs, msg, Joy),
			  "/joy");
	  if (rc != RCL_RET_OK) printf("Error (line %d)\n", __LINE__);
 80017f2:	f8d7 33c8 	ldr.w	r3, [r7, #968]	@ 0x3c8
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d004      	beq.n	8001804 <StartDefaultTask+0x1e8>
 80017fa:	f44f 718d 	mov.w	r1, #282	@ 0x11a
 80017fe:	4862      	ldr	r0, [pc, #392]	@ (8001988 <StartDefaultTask+0x36c>)
 8001800:	f017 fdce 	bl	80193a0 <iprintf>
	  // initialize message memory
	  rc = !micro_ros_utilities_create_message_memory(ROSIDL_GET_MSG_TYPE_SUPPORT(sensor_msgs, msg, Joy), &joystick_input_msg, default_conf);
 8001804:	f00a fc0e 	bl	800c024 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Joy>
 8001808:	4684      	mov	ip, r0
 800180a:	4c64      	ldr	r4, [pc, #400]	@ (800199c <StartDefaultTask+0x380>)
 800180c:	f507 7620 	add.w	r6, r7, #640	@ 0x280
 8001810:	466d      	mov	r5, sp
 8001812:	f104 0308 	add.w	r3, r4, #8
 8001816:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001818:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800181c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001820:	4631      	mov	r1, r6
 8001822:	4660      	mov	r0, ip
 8001824:	f008 fc00 	bl	800a028 <micro_ros_utilities_create_message_memory>
 8001828:	4603      	mov	r3, r0
 800182a:	f083 0301 	eor.w	r3, r3, #1
 800182e:	b2db      	uxtb	r3, r3
 8001830:	f8c7 33c8 	str.w	r3, [r7, #968]	@ 0x3c8

	  rc = rclc_executor_add_subscription(
 8001834:	f507 7220 	add.w	r2, r7, #640	@ 0x280
 8001838:	f507 712e 	add.w	r1, r7, #696	@ 0x2b8
 800183c:	f507 7034 	add.w	r0, r7, #720	@ 0x2d0
 8001840:	2300      	movs	r3, #0
 8001842:	9300      	str	r3, [sp, #0]
 8001844:	4b58      	ldr	r3, [pc, #352]	@ (80019a8 <StartDefaultTask+0x38c>)
 8001846:	f009 fa5f 	bl	800ad08 <rclc_executor_add_subscription>
 800184a:	f8c7 03c8 	str.w	r0, [r7, #968]	@ 0x3c8
			  &executor, &joystick_subscriber,
			  &joystick_input_msg, &joystick_subscription_callback, ON_NEW_DATA);
	  if (rc != RCL_RET_OK) printf("Error (line %d)\n", __LINE__);
 800184e:	f8d7 33c8 	ldr.w	r3, [r7, #968]	@ 0x3c8
 8001852:	2b00      	cmp	r3, #0
 8001854:	d004      	beq.n	8001860 <StartDefaultTask+0x244>
 8001856:	f240 1121 	movw	r1, #289	@ 0x121
 800185a:	484b      	ldr	r0, [pc, #300]	@ (8001988 <StartDefaultTask+0x36c>)
 800185c:	f017 fda0 	bl	80193a0 <iprintf>

	  uint32_t pwm_output[8] = {1500};
 8001860:	f507 7374 	add.w	r3, r7, #976	@ 0x3d0
 8001864:	f5a3 7340 	sub.w	r3, r3, #768	@ 0x300
 8001868:	4618      	mov	r0, r3
 800186a:	2320      	movs	r3, #32
 800186c:	461a      	mov	r2, r3
 800186e:	2100      	movs	r1, #0
 8001870:	f017 fe65 	bl	801953e <memset>
 8001874:	f507 7374 	add.w	r3, r7, #976	@ 0x3d0
 8001878:	f5a3 7340 	sub.w	r3, r3, #768	@ 0x300
 800187c:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8001880:	601a      	str	r2, [r3, #0]
	  arm_status pwm_computation_error = ARM_MATH_SUCCESS;
 8001882:	2300      	movs	r3, #0
 8001884:	f887 33c7 	strb.w	r3, [r7, #967]	@ 0x3c7
	  float joy_input[6] = {0};
 8001888:	f507 7374 	add.w	r3, r7, #976	@ 0x3d0
 800188c:	f5a3 7346 	sub.w	r3, r3, #792	@ 0x318
 8001890:	461a      	mov	r2, r3
 8001892:	2300      	movs	r3, #0
 8001894:	6013      	str	r3, [r2, #0]
 8001896:	6053      	str	r3, [r2, #4]
 8001898:	6093      	str	r3, [r2, #8]
 800189a:	60d3      	str	r3, [r2, #12]
 800189c:	6113      	str	r3, [r2, #16]
 800189e:	6153      	str	r3, [r2, #20]

	  // need either to calculate this in the subscription callbacks, or to set it to a fixed value. In this case, 20Hz
	  float integration_intervals[4] = {0.05};
 80018a0:	f507 7374 	add.w	r3, r7, #976	@ 0x3d0
 80018a4:	f5a3 734a 	sub.w	r3, r3, #808	@ 0x328
 80018a8:	461a      	mov	r2, r3
 80018aa:	2300      	movs	r3, #0
 80018ac:	6013      	str	r3, [r2, #0]
 80018ae:	6053      	str	r3, [r2, #4]
 80018b0:	6093      	str	r3, [r2, #8]
 80018b2:	60d3      	str	r3, [r2, #12]
 80018b4:	f507 7374 	add.w	r3, r7, #976	@ 0x3d0
 80018b8:	f5a3 734a 	sub.w	r3, r3, #808	@ 0x328
 80018bc:	4a3b      	ldr	r2, [pc, #236]	@ (80019ac <StartDefaultTask+0x390>)
 80018be:	601a      	str	r2, [r3, #0]

	  while(1)
	  {
		uint32_t time_ms = HAL_GetTick();
 80018c0:	f001 fd1e 	bl	8003300 <HAL_GetTick>
 80018c4:	f8c7 03c0 	str.w	r0, [r7, #960]	@ 0x3c0
		printf("Free heap: %d.\n", xPortGetFreeHeapSize());
 80018c8:	f007 fb12 	bl	8008ef0 <xPortGetFreeHeapSize>
 80018cc:	4603      	mov	r3, r0
 80018ce:	4619      	mov	r1, r3
 80018d0:	4837      	ldr	r0, [pc, #220]	@ (80019b0 <StartDefaultTask+0x394>)
 80018d2:	f017 fd65 	bl	80193a0 <iprintf>
		// Spin executor once to receive requests and update messages
		rclc_executor_spin_some(&executor, 1000000);
 80018d6:	f507 7134 	add.w	r1, r7, #720	@ 0x2d0
 80018da:	4a36      	ldr	r2, [pc, #216]	@ (80019b4 <StartDefaultTask+0x398>)
 80018dc:	f04f 0300 	mov.w	r3, #0
 80018e0:	4608      	mov	r0, r1
 80018e2:	f009 fc31 	bl	800b148 <rclc_executor_spin_some>

	    if (rov_arm_mode == ROV_ARMED)
 80018e6:	4b34      	ldr	r3, [pc, #208]	@ (80019b8 <StartDefaultTask+0x39c>)
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	f040 8087 	bne.w	8001a00 <StartDefaultTask+0x3e4>
	    {
	    	joystick_msg_to_cmd_vel_array(&joystick_input_msg, joy_input);
 80018f2:	f107 02b8 	add.w	r2, r7, #184	@ 0xb8
 80018f6:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 80018fa:	4611      	mov	r1, r2
 80018fc:	4618      	mov	r0, r3
 80018fe:	f000 f95e 	bl	8001bbe <joystick_msg_to_cmd_vel_array>
	    	switch (navigation_mode) {
 8001902:	4b2e      	ldr	r3, [pc, #184]	@ (80019bc <StartDefaultTask+0x3a0>)
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	b2db      	uxtb	r3, r3
 8001908:	2b00      	cmp	r3, #0
 800190a:	d002      	beq.n	8001912 <StartDefaultTask+0x2f6>
 800190c:	2b01      	cmp	r3, #1
 800190e:	d00c      	beq.n	800192a <StartDefaultTask+0x30e>
 8001910:	e021      	b.n	8001956 <StartDefaultTask+0x33a>
	    		case NAVIGATION_MODE_MANUAL:
	    			pwm_computation_error = calculate_pwm(joy_input, pwm_output);
 8001912:	f107 02d0 	add.w	r2, r7, #208	@ 0xd0
 8001916:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800191a:	4611      	mov	r1, r2
 800191c:	4618      	mov	r0, r3
 800191e:	f000 ff51 	bl	80027c4 <calculate_pwm>
 8001922:	4603      	mov	r3, r0
 8001924:	f887 33c7 	strb.w	r3, [r7, #967]	@ 0x3c7
	    			break;
 8001928:	e05e      	b.n	80019e8 <StartDefaultTask+0x3cc>
	    		case NAVIGATION_MODE_STABILIZE_FULL:
	    			pwm_computation_error = calculate_pwm_with_pid(joy_input, pwm_output, (Quaternion *)&imu_data_msg.orientation, (float *)&fluid_pressure.fluid_pressure, integration_intervals);
 800192a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800192e:	f103 0418 	add.w	r4, r3, #24
 8001932:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001936:	f103 0218 	add.w	r2, r3, #24
 800193a:	f107 01d0 	add.w	r1, r7, #208	@ 0xd0
 800193e:	f107 00b8 	add.w	r0, r7, #184	@ 0xb8
 8001942:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8001946:	9300      	str	r3, [sp, #0]
 8001948:	4623      	mov	r3, r4
 800194a:	f001 fae1 	bl	8002f10 <calculate_pwm_with_pid>
 800194e:	4603      	mov	r3, r0
 8001950:	f887 33c7 	strb.w	r3, [r7, #967]	@ 0x3c7
	    			break;
 8001954:	e048      	b.n	80019e8 <StartDefaultTask+0x3cc>
	    		default:
	    			for(uint8_t i = 0; i < 8; i++) pwm_output[i] = 1500;
 8001956:	2300      	movs	r3, #0
 8001958:	f887 33cf 	strb.w	r3, [r7, #975]	@ 0x3cf
 800195c:	e03f      	b.n	80019de <StartDefaultTask+0x3c2>
 800195e:	bf00      	nop
 8001960:	08001551 	.word	0x08001551
 8001964:	080014e9 	.word	0x080014e9
 8001968:	080014c9 	.word	0x080014c9
 800196c:	0800149d 	.word	0x0800149d
 8001970:	20008604 	.word	0x20008604
 8001974:	08001fb5 	.word	0x08001fb5
 8001978:	08001ff9 	.word	0x08001ff9
 800197c:	08002031 	.word	0x08002031
 8001980:	0800209d 	.word	0x0800209d
 8001984:	0801a7e4 	.word	0x0801a7e4
 8001988:	0801a80c 	.word	0x0801a80c
 800198c:	0801a820 	.word	0x0801a820
 8001990:	0801a824 	.word	0x0801a824
 8001994:	0801a830 	.word	0x0801a830
 8001998:	0801a844 	.word	0x0801a844
 800199c:	20008594 	.word	0x20008594
 80019a0:	08001c03 	.word	0x08001c03
 80019a4:	0801a850 	.word	0x0801a850
 80019a8:	08001c1b 	.word	0x08001c1b
 80019ac:	3d4ccccd 	.word	0x3d4ccccd
 80019b0:	0801a858 	.word	0x0801a858
 80019b4:	000f4240 	.word	0x000f4240
 80019b8:	2000858c 	.word	0x2000858c
 80019bc:	2000858d 	.word	0x2000858d
 80019c0:	f897 23cf 	ldrb.w	r2, [r7, #975]	@ 0x3cf
 80019c4:	f507 7374 	add.w	r3, r7, #976	@ 0x3d0
 80019c8:	f5a3 7340 	sub.w	r3, r3, #768	@ 0x300
 80019cc:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 80019d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80019d4:	f897 33cf 	ldrb.w	r3, [r7, #975]	@ 0x3cf
 80019d8:	3301      	adds	r3, #1
 80019da:	f887 33cf 	strb.w	r3, [r7, #975]	@ 0x3cf
 80019de:	f897 33cf 	ldrb.w	r3, [r7, #975]	@ 0x3cf
 80019e2:	2b07      	cmp	r3, #7
 80019e4:	d9ec      	bls.n	80019c0 <StartDefaultTask+0x3a4>
	    			break;
 80019e6:	bf00      	nop
	    	}
	    	constrain_pwm_output(pwm_output, 8);
 80019e8:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 80019ec:	2108      	movs	r1, #8
 80019ee:	4618      	mov	r0, r3
 80019f0:	f000 f8ae 	bl	8001b50 <constrain_pwm_output>
	    	set_pwms(pwm_output);
 80019f4:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 80019f8:	4618      	mov	r0, r3
 80019fa:	f000 f84b 	bl	8001a94 <set_pwms>
 80019fe:	e001      	b.n	8001a04 <StartDefaultTask+0x3e8>
	    } else set_pwm_idle();
 8001a00:	f000 f878 	bl	8001af4 <set_pwm_idle>

	    for(uint8_t i = 0; i < 8; i++) thruster_status_msg.thrusters_pwms[i] = pwm_output[i];
 8001a04:	2300      	movs	r3, #0
 8001a06:	f887 33ce 	strb.w	r3, [r7, #974]	@ 0x3ce
 8001a0a:	e015      	b.n	8001a38 <StartDefaultTask+0x41c>
 8001a0c:	f897 23ce 	ldrb.w	r2, [r7, #974]	@ 0x3ce
 8001a10:	f507 7374 	add.w	r3, r7, #976	@ 0x3d0
 8001a14:	f5a3 7340 	sub.w	r3, r3, #768	@ 0x300
 8001a18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a1c:	f897 23ce 	ldrb.w	r2, [r7, #974]	@ 0x3ce
 8001a20:	b299      	uxth	r1, r3
 8001a22:	f507 7374 	add.w	r3, r7, #976	@ 0x3d0
 8001a26:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001a2a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8001a2e:	f897 33ce 	ldrb.w	r3, [r7, #974]	@ 0x3ce
 8001a32:	3301      	adds	r3, #1
 8001a34:	f887 33ce 	strb.w	r3, [r7, #974]	@ 0x3ce
 8001a38:	f897 33ce 	ldrb.w	r3, [r7, #974]	@ 0x3ce
 8001a3c:	2b07      	cmp	r3, #7
 8001a3e:	d9e5      	bls.n	8001a0c <StartDefaultTask+0x3f0>
	    rc = rcl_publish(&thruster_status_publisher, &thruster_status_msg, NULL);
 8001a40:	f507 712f 	add.w	r1, r7, #700	@ 0x2bc
 8001a44:	f507 7333 	add.w	r3, r7, #716	@ 0x2cc
 8001a48:	2200      	movs	r2, #0
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f008 fd52 	bl	800a4f4 <rcl_publish>
 8001a50:	f8c7 03c8 	str.w	r0, [r7, #968]	@ 0x3c8
	    if(rc!=RCL_RET_OK) printf("Error publishing (line %d)\n", __LINE__);
 8001a54:	f8d7 33c8 	ldr.w	r3, [r7, #968]	@ 0x3c8
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d004      	beq.n	8001a66 <StartDefaultTask+0x44a>
 8001a5c:	f240 1145 	movw	r1, #325	@ 0x145
 8001a60:	480b      	ldr	r0, [pc, #44]	@ (8001a90 <StartDefaultTask+0x474>)
 8001a62:	f017 fc9d 	bl	80193a0 <iprintf>

	    uint32_t elapsed_time = HAL_GetTick() - time_ms;
 8001a66:	f001 fc4b 	bl	8003300 <HAL_GetTick>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	f8d7 33c0 	ldr.w	r3, [r7, #960]	@ 0x3c0
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	f8c7 33bc 	str.w	r3, [r7, #956]	@ 0x3bc
	    if (elapsed_time < TS_DEFAULT_TASK_MS) osDelay(TS_DEFAULT_TASK_MS - elapsed_time);
 8001a76:	f8d7 33bc 	ldr.w	r3, [r7, #956]	@ 0x3bc
 8001a7a:	2b09      	cmp	r3, #9
 8001a7c:	f63f af20 	bhi.w	80018c0 <StartDefaultTask+0x2a4>
 8001a80:	f8d7 33bc 	ldr.w	r3, [r7, #956]	@ 0x3bc
 8001a84:	f1c3 030a 	rsb	r3, r3, #10
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f004 fe23 	bl	80066d4 <osDelay>
	  {
 8001a8e:	e717      	b.n	80018c0 <StartDefaultTask+0x2a4>
 8001a90:	0801a868 	.word	0x0801a868

08001a94 <set_pwms>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void inline set_pwms(uint32_t pwms[8])
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
	TIM2 -> CCR1 = pwms[0];
 8001a9c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	6353      	str	r3, [r2, #52]	@ 0x34
	TIM2 -> CCR2 = pwms[1];
 8001aa6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	6393      	str	r3, [r2, #56]	@ 0x38
	TIM2 -> CCR3 = pwms[2];
 8001ab0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	63d3      	str	r3, [r2, #60]	@ 0x3c
	TIM2 -> CCR4 = pwms[3];
 8001aba:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	68db      	ldr	r3, [r3, #12]
 8001ac2:	6413      	str	r3, [r2, #64]	@ 0x40

	// vertical thrusters
	TIM3 -> CCR1 = pwms[4];
 8001ac4:	4a0a      	ldr	r2, [pc, #40]	@ (8001af0 <set_pwms+0x5c>)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	691b      	ldr	r3, [r3, #16]
 8001aca:	6353      	str	r3, [r2, #52]	@ 0x34
	TIM3 -> CCR2 = pwms[5];
 8001acc:	4a08      	ldr	r2, [pc, #32]	@ (8001af0 <set_pwms+0x5c>)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	695b      	ldr	r3, [r3, #20]
 8001ad2:	6393      	str	r3, [r2, #56]	@ 0x38
	TIM3 -> CCR3 = pwms[6];
 8001ad4:	4a06      	ldr	r2, [pc, #24]	@ (8001af0 <set_pwms+0x5c>)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	699b      	ldr	r3, [r3, #24]
 8001ada:	63d3      	str	r3, [r2, #60]	@ 0x3c
	TIM3 -> CCR4 = pwms[7];
 8001adc:	4a04      	ldr	r2, [pc, #16]	@ (8001af0 <set_pwms+0x5c>)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	69db      	ldr	r3, [r3, #28]
 8001ae2:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001ae4:	bf00      	nop
 8001ae6:	370c      	adds	r7, #12
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr
 8001af0:	40000400 	.word	0x40000400

08001af4 <set_pwm_idle>:
void inline set_pwm_idle()
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
	TIM2 -> CCR1 = PWM_IDLE;
 8001af8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001afc:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8001b00:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM2 -> CCR2 = PWM_IDLE;
 8001b02:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001b06:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8001b0a:	639a      	str	r2, [r3, #56]	@ 0x38
	TIM2 -> CCR3 = PWM_IDLE;
 8001b0c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001b10:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8001b14:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM2 -> CCR4 = PWM_IDLE;
 8001b16:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001b1a:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8001b1e:	641a      	str	r2, [r3, #64]	@ 0x40

	// vertical thrusters
	TIM3 -> CCR1 = PWM_IDLE;
 8001b20:	4b0a      	ldr	r3, [pc, #40]	@ (8001b4c <set_pwm_idle+0x58>)
 8001b22:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8001b26:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM3 -> CCR2 = PWM_IDLE;
 8001b28:	4b08      	ldr	r3, [pc, #32]	@ (8001b4c <set_pwm_idle+0x58>)
 8001b2a:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8001b2e:	639a      	str	r2, [r3, #56]	@ 0x38
	TIM3 -> CCR3 = PWM_IDLE;
 8001b30:	4b06      	ldr	r3, [pc, #24]	@ (8001b4c <set_pwm_idle+0x58>)
 8001b32:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8001b36:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM3 -> CCR4 = PWM_IDLE;
 8001b38:	4b04      	ldr	r3, [pc, #16]	@ (8001b4c <set_pwm_idle+0x58>)
 8001b3a:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8001b3e:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001b40:	bf00      	nop
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	40000400 	.word	0x40000400

08001b50 <constrain_pwm_output>:
void constrain_pwm_output(uint32_t pwms[], int N) {
 8001b50:	b480      	push	{r7}
 8001b52:	b085      	sub	sp, #20
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	6039      	str	r1, [r7, #0]
	for(uint16_t i = 0; i < N; i++) {
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	81fb      	strh	r3, [r7, #14]
 8001b5e:	e023      	b.n	8001ba8 <constrain_pwm_output+0x58>
		if (pwms[i] < PWM_MIN)
 8001b60:	89fb      	ldrh	r3, [r7, #14]
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	687a      	ldr	r2, [r7, #4]
 8001b66:	4413      	add	r3, r2
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f240 424b 	movw	r2, #1099	@ 0x44b
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d807      	bhi.n	8001b82 <constrain_pwm_output+0x32>
			pwms[i] = PWM_MIN;
 8001b72:	89fb      	ldrh	r3, [r7, #14]
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	687a      	ldr	r2, [r7, #4]
 8001b78:	4413      	add	r3, r2
 8001b7a:	f240 424c 	movw	r2, #1100	@ 0x44c
 8001b7e:	601a      	str	r2, [r3, #0]
 8001b80:	e00f      	b.n	8001ba2 <constrain_pwm_output+0x52>
		else if (pwms[i] > PWM_MAX)
 8001b82:	89fb      	ldrh	r3, [r7, #14]
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	4413      	add	r3, r2
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f240 726c 	movw	r2, #1900	@ 0x76c
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d906      	bls.n	8001ba2 <constrain_pwm_output+0x52>
			pwms[i] = PWM_MAX;
 8001b94:	89fb      	ldrh	r3, [r7, #14]
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	687a      	ldr	r2, [r7, #4]
 8001b9a:	4413      	add	r3, r2
 8001b9c:	f240 726c 	movw	r2, #1900	@ 0x76c
 8001ba0:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < N; i++) {
 8001ba2:	89fb      	ldrh	r3, [r7, #14]
 8001ba4:	3301      	adds	r3, #1
 8001ba6:	81fb      	strh	r3, [r7, #14]
 8001ba8:	89fb      	ldrh	r3, [r7, #14]
 8001baa:	683a      	ldr	r2, [r7, #0]
 8001bac:	429a      	cmp	r2, r3
 8001bae:	dcd7      	bgt.n	8001b60 <constrain_pwm_output+0x10>
	}
}
 8001bb0:	bf00      	nop
 8001bb2:	bf00      	nop
 8001bb4:	3714      	adds	r7, #20
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr

08001bbe <joystick_msg_to_cmd_vel_array>:
void joystick_msg_to_cmd_vel_array(const sensor_msgs__msg__Joy * joystick_input_msg, float joy_input_array[6]) {
 8001bbe:	b480      	push	{r7}
 8001bc0:	b083      	sub	sp, #12
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
 8001bc6:	6039      	str	r1, [r7, #0]
	joy_input_array[0] = joystick_input_msg->axes.data[0]; // sway
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	695b      	ldr	r3, [r3, #20]
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	601a      	str	r2, [r3, #0]
	joy_input_array[1] =joystick_input_msg->axes.data[1]; // forward
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	695a      	ldr	r2, [r3, #20]
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	3304      	adds	r3, #4
 8001bda:	6852      	ldr	r2, [r2, #4]
 8001bdc:	601a      	str	r2, [r3, #0]
	joy_input_array[2] =joystick_input_msg->axes.data[3]; // heave
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	695a      	ldr	r2, [r3, #20]
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	3308      	adds	r3, #8
 8001be6:	68d2      	ldr	r2, [r2, #12]
 8001be8:	601a      	str	r2, [r3, #0]
	joy_input_array[6] =joystick_input_msg->axes.data[2]; // yaw
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	695a      	ldr	r2, [r3, #20]
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	3318      	adds	r3, #24
 8001bf2:	6892      	ldr	r2, [r2, #8]
 8001bf4:	601a      	str	r2, [r3, #0]
}
 8001bf6:	bf00      	nop
 8001bf8:	370c      	adds	r7, #12
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr

08001c02 <imu_subscription_callback>:
void imu_subscription_callback(const void * msgin) {
 8001c02:	b480      	push	{r7}
 8001c04:	b085      	sub	sp, #20
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
  const sensor_msgs__msg__Imu * msg = (const sensor_msgs__msg__Imu *)msgin;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	60fb      	str	r3, [r7, #12]
}
 8001c0e:	bf00      	nop
 8001c10:	3714      	adds	r7, #20
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr

08001c1a <joystick_subscription_callback>:
void joystick_subscription_callback (const void * msgin) {
 8001c1a:	b480      	push	{r7}
 8001c1c:	b085      	sub	sp, #20
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	6078      	str	r0, [r7, #4]
	const sensor_msgs__msg__Joy * msg = (const sensor_msgs__msg__Joy *)msgin;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	60fb      	str	r3, [r7, #12]
}
 8001c26:	bf00      	nop
 8001c28:	3714      	adds	r7, #20
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
	...

08001c34 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b08a      	sub	sp, #40	@ 0x28
 8001c38:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c3a:	f107 0314 	add.w	r3, r7, #20
 8001c3e:	2200      	movs	r2, #0
 8001c40:	601a      	str	r2, [r3, #0]
 8001c42:	605a      	str	r2, [r3, #4]
 8001c44:	609a      	str	r2, [r3, #8]
 8001c46:	60da      	str	r2, [r3, #12]
 8001c48:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	613b      	str	r3, [r7, #16]
 8001c4e:	4b26      	ldr	r3, [pc, #152]	@ (8001ce8 <MX_GPIO_Init+0xb4>)
 8001c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c52:	4a25      	ldr	r2, [pc, #148]	@ (8001ce8 <MX_GPIO_Init+0xb4>)
 8001c54:	f043 0310 	orr.w	r3, r3, #16
 8001c58:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c5a:	4b23      	ldr	r3, [pc, #140]	@ (8001ce8 <MX_GPIO_Init+0xb4>)
 8001c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c5e:	f003 0310 	and.w	r3, r3, #16
 8001c62:	613b      	str	r3, [r7, #16]
 8001c64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c66:	2300      	movs	r3, #0
 8001c68:	60fb      	str	r3, [r7, #12]
 8001c6a:	4b1f      	ldr	r3, [pc, #124]	@ (8001ce8 <MX_GPIO_Init+0xb4>)
 8001c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c6e:	4a1e      	ldr	r2, [pc, #120]	@ (8001ce8 <MX_GPIO_Init+0xb4>)
 8001c70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c74:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c76:	4b1c      	ldr	r3, [pc, #112]	@ (8001ce8 <MX_GPIO_Init+0xb4>)
 8001c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c7e:	60fb      	str	r3, [r7, #12]
 8001c80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c82:	2300      	movs	r3, #0
 8001c84:	60bb      	str	r3, [r7, #8]
 8001c86:	4b18      	ldr	r3, [pc, #96]	@ (8001ce8 <MX_GPIO_Init+0xb4>)
 8001c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c8a:	4a17      	ldr	r2, [pc, #92]	@ (8001ce8 <MX_GPIO_Init+0xb4>)
 8001c8c:	f043 0301 	orr.w	r3, r3, #1
 8001c90:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c92:	4b15      	ldr	r3, [pc, #84]	@ (8001ce8 <MX_GPIO_Init+0xb4>)
 8001c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c96:	f003 0301 	and.w	r3, r3, #1
 8001c9a:	60bb      	str	r3, [r7, #8]
 8001c9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	607b      	str	r3, [r7, #4]
 8001ca2:	4b11      	ldr	r3, [pc, #68]	@ (8001ce8 <MX_GPIO_Init+0xb4>)
 8001ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ca6:	4a10      	ldr	r2, [pc, #64]	@ (8001ce8 <MX_GPIO_Init+0xb4>)
 8001ca8:	f043 0302 	orr.w	r3, r3, #2
 8001cac:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cae:	4b0e      	ldr	r3, [pc, #56]	@ (8001ce8 <MX_GPIO_Init+0xb4>)
 8001cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cb2:	f003 0302 	and.w	r3, r3, #2
 8001cb6:	607b      	str	r3, [r7, #4]
 8001cb8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_RESET);
 8001cba:	2200      	movs	r2, #0
 8001cbc:	2104      	movs	r1, #4
 8001cbe:	480b      	ldr	r0, [pc, #44]	@ (8001cec <MX_GPIO_Init+0xb8>)
 8001cc0:	f002 f9ba 	bl	8004038 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001cc4:	2304      	movs	r3, #4
 8001cc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001cd4:	f107 0314 	add.w	r3, r7, #20
 8001cd8:	4619      	mov	r1, r3
 8001cda:	4804      	ldr	r0, [pc, #16]	@ (8001cec <MX_GPIO_Init+0xb8>)
 8001cdc:	f002 f800 	bl	8003ce0 <HAL_GPIO_Init>

}
 8001ce0:	bf00      	nop
 8001ce2:	3728      	adds	r7, #40	@ 0x28
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	40023800 	.word	0x40023800
 8001cec:	40021000 	.word	0x40021000

08001cf0 <linear_interpolation>:
 * @param output_min The minimum value of the output range.
 * @param output_max The maximum value of the output range.
 * @return The interpolated output value.
 */
float linear_interpolation(float input_value, float input_min, float input_max, float output_min, float output_max)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b087      	sub	sp, #28
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	ed87 0a05 	vstr	s0, [r7, #20]
 8001cfa:	edc7 0a04 	vstr	s1, [r7, #16]
 8001cfe:	ed87 1a03 	vstr	s2, [r7, #12]
 8001d02:	edc7 1a02 	vstr	s3, [r7, #8]
 8001d06:	ed87 2a01 	vstr	s4, [r7, #4]
    return ((output_max - output_min) / (input_max - input_min)) * (input_value - input_min) + output_min;
 8001d0a:	ed97 7a01 	vldr	s14, [r7, #4]
 8001d0e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d12:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001d16:	ed97 7a03 	vldr	s14, [r7, #12]
 8001d1a:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001d26:	edd7 6a05 	vldr	s13, [r7, #20]
 8001d2a:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d2e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001d32:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d36:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d3a:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8001d3e:	eeb0 0a67 	vmov.f32	s0, s15
 8001d42:	371c      	adds	r7, #28
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <normalize_vector>:
 * @param input_array The input array of floating-point values to be normalized.
 * @param output_array The output array where the normalized values will be stored.
 * @param size The number of elements in the input and output arrays.
 */
void normalize_vector(const float *input_array, float *output_array, uint8_t size)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b089      	sub	sp, #36	@ 0x24
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	60f8      	str	r0, [r7, #12]
 8001d54:	60b9      	str	r1, [r7, #8]
 8001d56:	4613      	mov	r3, r2
 8001d58:	71fb      	strb	r3, [r7, #7]
    float max_abs_value = 0.0f;
 8001d5a:	f04f 0300 	mov.w	r3, #0
 8001d5e:	61fb      	str	r3, [r7, #28]
    for (uint8_t i = 0; i < size; i++)
 8001d60:	2300      	movs	r3, #0
 8001d62:	76fb      	strb	r3, [r7, #27]
 8001d64:	e017      	b.n	8001d96 <normalize_vector+0x4a>
    {
        float abs_value = fabsf(input_array[i]);
 8001d66:	7efb      	ldrb	r3, [r7, #27]
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	68fa      	ldr	r2, [r7, #12]
 8001d6c:	4413      	add	r3, r2
 8001d6e:	edd3 7a00 	vldr	s15, [r3]
 8001d72:	eef0 7ae7 	vabs.f32	s15, s15
 8001d76:	edc7 7a05 	vstr	s15, [r7, #20]
        if (abs_value > max_abs_value)
 8001d7a:	ed97 7a05 	vldr	s14, [r7, #20]
 8001d7e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001d82:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d8a:	dd01      	ble.n	8001d90 <normalize_vector+0x44>
        {
            max_abs_value = abs_value;
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	61fb      	str	r3, [r7, #28]
    for (uint8_t i = 0; i < size; i++)
 8001d90:	7efb      	ldrb	r3, [r7, #27]
 8001d92:	3301      	adds	r3, #1
 8001d94:	76fb      	strb	r3, [r7, #27]
 8001d96:	7efa      	ldrb	r2, [r7, #27]
 8001d98:	79fb      	ldrb	r3, [r7, #7]
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d3e3      	bcc.n	8001d66 <normalize_vector+0x1a>
        }
    }

	if (max_abs_value > 1)
 8001d9e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001da2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001da6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001daa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dae:	dc00      	bgt.n	8001db2 <normalize_vector+0x66>
		for (uint8_t i = 0; i < size; i++)
		{
			output_array[i] = input_array[i] / max_abs_value;
		}
	}
}
 8001db0:	e019      	b.n	8001de6 <normalize_vector+0x9a>
		for (uint8_t i = 0; i < size; i++)
 8001db2:	2300      	movs	r3, #0
 8001db4:	76bb      	strb	r3, [r7, #26]
 8001db6:	e012      	b.n	8001dde <normalize_vector+0x92>
			output_array[i] = input_array[i] / max_abs_value;
 8001db8:	7ebb      	ldrb	r3, [r7, #26]
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	68fa      	ldr	r2, [r7, #12]
 8001dbe:	4413      	add	r3, r2
 8001dc0:	edd3 6a00 	vldr	s13, [r3]
 8001dc4:	7ebb      	ldrb	r3, [r7, #26]
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	68ba      	ldr	r2, [r7, #8]
 8001dca:	4413      	add	r3, r2
 8001dcc:	ed97 7a07 	vldr	s14, [r7, #28]
 8001dd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001dd4:	edc3 7a00 	vstr	s15, [r3]
		for (uint8_t i = 0; i < size; i++)
 8001dd8:	7ebb      	ldrb	r3, [r7, #26]
 8001dda:	3301      	adds	r3, #1
 8001ddc:	76bb      	strb	r3, [r7, #26]
 8001dde:	7eba      	ldrb	r2, [r7, #26]
 8001de0:	79fb      	ldrb	r3, [r7, #7]
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d3e8      	bcc.n	8001db8 <normalize_vector+0x6c>
}
 8001de6:	bf00      	nop
 8001de8:	3724      	adds	r7, #36	@ 0x24
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr

08001df2 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001df2:	b480      	push	{r7}
 8001df4:	b083      	sub	sp, #12
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001dfa:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001dfe:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8001e02:	f003 0301 	and.w	r3, r3, #1
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d013      	beq.n	8001e32 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001e0a:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001e0e:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8001e12:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d00b      	beq.n	8001e32 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001e1a:	e000      	b.n	8001e1e <ITM_SendChar+0x2c>
    {
      __NOP();
 8001e1c:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001e1e:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d0f9      	beq.n	8001e1c <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001e28:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	b2d2      	uxtb	r2, r2
 8001e30:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001e32:	687b      	ldr	r3, [r7, #4]
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	370c      	adds	r7, #12
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr

08001e40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e44:	f001 fa26 	bl	8003294 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e48:	f000 f80e 	bl	8001e68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e4c:	f7ff fef2 	bl	8001c34 <MX_GPIO_Init>
  MX_DMA_Init();
 8001e50:	f7ff fafc 	bl	800144c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001e54:	f000 fbd4 	bl	8002600 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001e58:	f004 fb60 	bl	800651c <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8001e5c:	f7ff fbcc 	bl	80015f8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001e60:	f004 fb80 	bl	8006564 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001e64:	bf00      	nop
 8001e66:	e7fd      	b.n	8001e64 <main+0x24>

08001e68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b094      	sub	sp, #80	@ 0x50
 8001e6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e6e:	f107 031c 	add.w	r3, r7, #28
 8001e72:	2234      	movs	r2, #52	@ 0x34
 8001e74:	2100      	movs	r1, #0
 8001e76:	4618      	mov	r0, r3
 8001e78:	f017 fb61 	bl	801953e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e7c:	f107 0308 	add.w	r3, r7, #8
 8001e80:	2200      	movs	r2, #0
 8001e82:	601a      	str	r2, [r3, #0]
 8001e84:	605a      	str	r2, [r3, #4]
 8001e86:	609a      	str	r2, [r3, #8]
 8001e88:	60da      	str	r2, [r3, #12]
 8001e8a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	607b      	str	r3, [r7, #4]
 8001e90:	4b2c      	ldr	r3, [pc, #176]	@ (8001f44 <SystemClock_Config+0xdc>)
 8001e92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e94:	4a2b      	ldr	r2, [pc, #172]	@ (8001f44 <SystemClock_Config+0xdc>)
 8001e96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e9a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e9c:	4b29      	ldr	r3, [pc, #164]	@ (8001f44 <SystemClock_Config+0xdc>)
 8001e9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ea0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ea4:	607b      	str	r3, [r7, #4]
 8001ea6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	603b      	str	r3, [r7, #0]
 8001eac:	4b26      	ldr	r3, [pc, #152]	@ (8001f48 <SystemClock_Config+0xe0>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a25      	ldr	r2, [pc, #148]	@ (8001f48 <SystemClock_Config+0xe0>)
 8001eb2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001eb6:	6013      	str	r3, [r2, #0]
 8001eb8:	4b23      	ldr	r3, [pc, #140]	@ (8001f48 <SystemClock_Config+0xe0>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001ec0:	603b      	str	r3, [r7, #0]
 8001ec2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ec8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001ecc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ece:	2302      	movs	r3, #2
 8001ed0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ed2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001ed6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001ed8:	2308      	movs	r3, #8
 8001eda:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 195;
 8001edc:	23c3      	movs	r3, #195	@ 0xc3
 8001ede:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ee0:	2302      	movs	r3, #2
 8001ee2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001ee4:	2304      	movs	r3, #4
 8001ee6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001ee8:	2302      	movs	r3, #2
 8001eea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001eec:	f107 031c 	add.w	r3, r7, #28
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f002 fb47 	bl	8004584 <HAL_RCC_OscConfig>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d001      	beq.n	8001f00 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001efc:	f000 f854 	bl	8001fa8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001f00:	f002 f8b4 	bl	800406c <HAL_PWREx_EnableOverDrive>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d001      	beq.n	8001f0e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001f0a:	f000 f84d 	bl	8001fa8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f0e:	230f      	movs	r3, #15
 8001f10:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f12:	2302      	movs	r3, #2
 8001f14:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f16:	2300      	movs	r3, #0
 8001f18:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001f1a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001f1e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001f20:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f24:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001f26:	f107 0308 	add.w	r3, r7, #8
 8001f2a:	2105      	movs	r1, #5
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f002 f8ed 	bl	800410c <HAL_RCC_ClockConfig>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d001      	beq.n	8001f3c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001f38:	f000 f836 	bl	8001fa8 <Error_Handler>
  }
}
 8001f3c:	bf00      	nop
 8001f3e:	3750      	adds	r7, #80	@ 0x50
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	40023800 	.word	0x40023800
 8001f48:	40007000 	.word	0x40007000

08001f4c <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b086      	sub	sp, #24
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	60f8      	str	r0, [r7, #12]
 8001f54:	60b9      	str	r1, [r7, #8]
 8001f56:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f58:	2300      	movs	r3, #0
 8001f5a:	617b      	str	r3, [r7, #20]
 8001f5c:	e009      	b.n	8001f72 <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	1c5a      	adds	r2, r3, #1
 8001f62:	60ba      	str	r2, [r7, #8]
 8001f64:	781b      	ldrb	r3, [r3, #0]
 8001f66:	4618      	mov	r0, r3
 8001f68:	f7ff ff43 	bl	8001df2 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	3301      	adds	r3, #1
 8001f70:	617b      	str	r3, [r7, #20]
 8001f72:	697a      	ldr	r2, [r7, #20]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	429a      	cmp	r2, r3
 8001f78:	dbf1      	blt.n	8001f5e <_write+0x12>
  }
  return len;
 8001f7a:	687b      	ldr	r3, [r7, #4]
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3718      	adds	r7, #24
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}

08001f84 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a04      	ldr	r2, [pc, #16]	@ (8001fa4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d101      	bne.n	8001f9a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001f96:	f001 f99f 	bl	80032d8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001f9a:	bf00      	nop
 8001f9c:	3708      	adds	r7, #8
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	40010000 	.word	0x40010000

08001fa8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001fac:	b672      	cpsid	i
}
 8001fae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fb0:	bf00      	nop
 8001fb2:	e7fd      	b.n	8001fb0 <Error_Handler+0x8>

08001fb4 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
 8001fbc:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001fbe:	4b0c      	ldr	r3, [pc, #48]	@ (8001ff0 <microros_allocate+0x3c>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	4413      	add	r3, r2
 8001fc8:	461a      	mov	r2, r3
 8001fca:	4b09      	ldr	r3, [pc, #36]	@ (8001ff0 <microros_allocate+0x3c>)
 8001fcc:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001fce:	4b09      	ldr	r3, [pc, #36]	@ (8001ff4 <microros_allocate+0x40>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	4413      	add	r3, r2
 8001fd8:	461a      	mov	r2, r3
 8001fda:	4b06      	ldr	r3, [pc, #24]	@ (8001ff4 <microros_allocate+0x40>)
 8001fdc:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f7fe ffe4 	bl	8000fac <pvPortMallocMicroROS>
 8001fe4:	4603      	mov	r3, r0
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3708      	adds	r7, #8
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	200085ac 	.word	0x200085ac
 8001ff4:	200085b0 	.word	0x200085b0

08001ff8 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d00c      	beq.n	8002022 <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f7ff f8f3 	bl	80011f4 <getBlockSize>
 800200e:	4603      	mov	r3, r0
 8002010:	4a06      	ldr	r2, [pc, #24]	@ (800202c <microros_deallocate+0x34>)
 8002012:	6812      	ldr	r2, [r2, #0]
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	461a      	mov	r2, r3
 8002018:	4b04      	ldr	r3, [pc, #16]	@ (800202c <microros_deallocate+0x34>)
 800201a:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	f7ff f88d 	bl	800113c <vPortFreeMicroROS>
  }
}
 8002022:	bf00      	nop
 8002024:	3708      	adds	r7, #8
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	200085b0 	.word	0x200085b0

08002030 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	60f8      	str	r0, [r7, #12]
 8002038:	60b9      	str	r1, [r7, #8]
 800203a:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 800203c:	4b15      	ldr	r3, [pc, #84]	@ (8002094 <microros_reallocate+0x64>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	461a      	mov	r2, r3
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	4413      	add	r3, r2
 8002046:	461a      	mov	r2, r3
 8002048:	4b12      	ldr	r3, [pc, #72]	@ (8002094 <microros_reallocate+0x64>)
 800204a:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 800204c:	4b12      	ldr	r3, [pc, #72]	@ (8002098 <microros_reallocate+0x68>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	461a      	mov	r2, r3
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	4413      	add	r3, r2
 8002056:	461a      	mov	r2, r3
 8002058:	4b0f      	ldr	r3, [pc, #60]	@ (8002098 <microros_reallocate+0x68>)
 800205a:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d104      	bne.n	800206c <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 8002062:	68b8      	ldr	r0, [r7, #8]
 8002064:	f7fe ffa2 	bl	8000fac <pvPortMallocMicroROS>
 8002068:	4603      	mov	r3, r0
 800206a:	e00e      	b.n	800208a <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 800206c:	68f8      	ldr	r0, [r7, #12]
 800206e:	f7ff f8c1 	bl	80011f4 <getBlockSize>
 8002072:	4603      	mov	r3, r0
 8002074:	4a08      	ldr	r2, [pc, #32]	@ (8002098 <microros_reallocate+0x68>)
 8002076:	6812      	ldr	r2, [r2, #0]
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	461a      	mov	r2, r3
 800207c:	4b06      	ldr	r3, [pc, #24]	@ (8002098 <microros_reallocate+0x68>)
 800207e:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8002080:	68b9      	ldr	r1, [r7, #8]
 8002082:	68f8      	ldr	r0, [r7, #12]
 8002084:	f7ff f8d4 	bl	8001230 <pvPortReallocMicroROS>
 8002088:	4603      	mov	r3, r0
  }
}
 800208a:	4618      	mov	r0, r3
 800208c:	3710      	adds	r7, #16
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	200085ac 	.word	0x200085ac
 8002098:	200085b0 	.word	0x200085b0

0800209c <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 800209c:	b580      	push	{r7, lr}
 800209e:	b084      	sub	sp, #16
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	60f8      	str	r0, [r7, #12]
 80020a4:	60b9      	str	r1, [r7, #8]
 80020a6:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	68ba      	ldr	r2, [r7, #8]
 80020ac:	fb02 f303 	mul.w	r3, r2, r3
 80020b0:	4a0c      	ldr	r2, [pc, #48]	@ (80020e4 <microros_zero_allocate+0x48>)
 80020b2:	6812      	ldr	r2, [r2, #0]
 80020b4:	4413      	add	r3, r2
 80020b6:	461a      	mov	r2, r3
 80020b8:	4b0a      	ldr	r3, [pc, #40]	@ (80020e4 <microros_zero_allocate+0x48>)
 80020ba:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	68ba      	ldr	r2, [r7, #8]
 80020c0:	fb02 f303 	mul.w	r3, r2, r3
 80020c4:	4a08      	ldr	r2, [pc, #32]	@ (80020e8 <microros_zero_allocate+0x4c>)
 80020c6:	6812      	ldr	r2, [r2, #0]
 80020c8:	4413      	add	r3, r2
 80020ca:	461a      	mov	r2, r3
 80020cc:	4b06      	ldr	r3, [pc, #24]	@ (80020e8 <microros_zero_allocate+0x4c>)
 80020ce:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 80020d0:	68b9      	ldr	r1, [r7, #8]
 80020d2:	68f8      	ldr	r0, [r7, #12]
 80020d4:	f7ff f8d9 	bl	800128a <pvPortCallocMicroROS>
 80020d8:	4603      	mov	r3, r0
 80020da:	4618      	mov	r0, r3
 80020dc:	3710      	adds	r7, #16
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	200085ac 	.word	0x200085ac
 80020e8:	200085b0 	.word	0x200085b0
 80020ec:	00000000 	.word	0x00000000

080020f0 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 80020f0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80020f4:	b086      	sub	sp, #24
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80020fc:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 80020fe:	2300      	movs	r3, #0
 8002100:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8002102:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002106:	a320      	add	r3, pc, #128	@ (adr r3, 8002188 <UTILS_NanosecondsToTimespec+0x98>)
 8002108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800210c:	f7fe fd86 	bl	8000c1c <__aeabi_ldivmod>
 8002110:	4602      	mov	r2, r0
 8002112:	460b      	mov	r3, r1
 8002114:	6879      	ldr	r1, [r7, #4]
 8002116:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 800211a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800211e:	a31a      	add	r3, pc, #104	@ (adr r3, 8002188 <UTILS_NanosecondsToTimespec+0x98>)
 8002120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002124:	f7fe fd7a 	bl	8000c1c <__aeabi_ldivmod>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	2b00      	cmp	r3, #0
 8002132:	da20      	bge.n	8002176 <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	4a11      	ldr	r2, [pc, #68]	@ (8002180 <UTILS_NanosecondsToTimespec+0x90>)
 800213a:	fb82 1203 	smull	r1, r2, r2, r3
 800213e:	1712      	asrs	r2, r2, #28
 8002140:	17db      	asrs	r3, r3, #31
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	3301      	adds	r3, #1
 8002146:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800214e:	6979      	ldr	r1, [r7, #20]
 8002150:	17c8      	asrs	r0, r1, #31
 8002152:	460c      	mov	r4, r1
 8002154:	4605      	mov	r5, r0
 8002156:	ebb2 0804 	subs.w	r8, r2, r4
 800215a:	eb63 0905 	sbc.w	r9, r3, r5
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	689a      	ldr	r2, [r3, #8]
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	4906      	ldr	r1, [pc, #24]	@ (8002184 <UTILS_NanosecondsToTimespec+0x94>)
 800216c:	fb01 f303 	mul.w	r3, r1, r3
 8002170:	441a      	add	r2, r3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	609a      	str	r2, [r3, #8]
    }
}
 8002176:	bf00      	nop
 8002178:	3718      	adds	r7, #24
 800217a:	46bd      	mov	sp, r7
 800217c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002180:	44b82fa1 	.word	0x44b82fa1
 8002184:	3b9aca00 	.word	0x3b9aca00
 8002188:	3b9aca00 	.word	0x3b9aca00
 800218c:	00000000 	.word	0x00000000

08002190 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8002190:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002194:	b08e      	sub	sp, #56	@ 0x38
 8002196:	af00      	add	r7, sp, #0
 8002198:	6278      	str	r0, [r7, #36]	@ 0x24
 800219a:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 800219c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80021a0:	2300      	movs	r3, #0
 80021a2:	6013      	str	r3, [r2, #0]
 80021a4:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 80021a6:	f04f 0200 	mov.w	r2, #0
 80021aa:	f04f 0300 	mov.w	r3, #0
 80021ae:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 80021b2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80021b6:	4618      	mov	r0, r3
 80021b8:	f005 fd58 	bl	8007c6c <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 80021bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021be:	17da      	asrs	r2, r3, #31
 80021c0:	61bb      	str	r3, [r7, #24]
 80021c2:	61fa      	str	r2, [r7, #28]
 80021c4:	f04f 0200 	mov.w	r2, #0
 80021c8:	f04f 0300 	mov.w	r3, #0
 80021cc:	69b9      	ldr	r1, [r7, #24]
 80021ce:	000b      	movs	r3, r1
 80021d0:	2200      	movs	r2, #0
 80021d2:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 80021d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021d8:	2200      	movs	r2, #0
 80021da:	461c      	mov	r4, r3
 80021dc:	4615      	mov	r5, r2
 80021de:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80021e2:	1911      	adds	r1, r2, r4
 80021e4:	60b9      	str	r1, [r7, #8]
 80021e6:	416b      	adcs	r3, r5
 80021e8:	60fb      	str	r3, [r7, #12]
 80021ea:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80021ee:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 80021f2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80021f6:	4602      	mov	r2, r0
 80021f8:	460b      	mov	r3, r1
 80021fa:	f04f 0400 	mov.w	r4, #0
 80021fe:	f04f 0500 	mov.w	r5, #0
 8002202:	015d      	lsls	r5, r3, #5
 8002204:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8002208:	0154      	lsls	r4, r2, #5
 800220a:	4622      	mov	r2, r4
 800220c:	462b      	mov	r3, r5
 800220e:	ebb2 0800 	subs.w	r8, r2, r0
 8002212:	eb63 0901 	sbc.w	r9, r3, r1
 8002216:	f04f 0200 	mov.w	r2, #0
 800221a:	f04f 0300 	mov.w	r3, #0
 800221e:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8002222:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8002226:	ea4f 2248 	mov.w	r2, r8, lsl #9
 800222a:	4690      	mov	r8, r2
 800222c:	4699      	mov	r9, r3
 800222e:	eb18 0a00 	adds.w	sl, r8, r0
 8002232:	eb49 0b01 	adc.w	fp, r9, r1
 8002236:	f04f 0200 	mov.w	r2, #0
 800223a:	f04f 0300 	mov.w	r3, #0
 800223e:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002242:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002246:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800224a:	ebb2 040a 	subs.w	r4, r2, sl
 800224e:	603c      	str	r4, [r7, #0]
 8002250:	eb63 030b 	sbc.w	r3, r3, fp
 8002254:	607b      	str	r3, [r7, #4]
 8002256:	e9d7 4500 	ldrd	r4, r5, [r7]
 800225a:	4623      	mov	r3, r4
 800225c:	181b      	adds	r3, r3, r0
 800225e:	613b      	str	r3, [r7, #16]
 8002260:	462b      	mov	r3, r5
 8002262:	eb41 0303 	adc.w	r3, r1, r3
 8002266:	617b      	str	r3, [r7, #20]
 8002268:	6a3a      	ldr	r2, [r7, #32]
 800226a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800226e:	f7ff ff3f 	bl	80020f0 <UTILS_NanosecondsToTimespec>

    return 0;
 8002272:	2300      	movs	r3, #0
 8002274:	4618      	mov	r0, r3
 8002276:	3738      	adds	r7, #56	@ 0x38
 8002278:	46bd      	mov	sp, r7
 800227a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08002280 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002286:	2300      	movs	r3, #0
 8002288:	607b      	str	r3, [r7, #4]
 800228a:	4b12      	ldr	r3, [pc, #72]	@ (80022d4 <HAL_MspInit+0x54>)
 800228c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800228e:	4a11      	ldr	r2, [pc, #68]	@ (80022d4 <HAL_MspInit+0x54>)
 8002290:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002294:	6453      	str	r3, [r2, #68]	@ 0x44
 8002296:	4b0f      	ldr	r3, [pc, #60]	@ (80022d4 <HAL_MspInit+0x54>)
 8002298:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800229a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800229e:	607b      	str	r3, [r7, #4]
 80022a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022a2:	2300      	movs	r3, #0
 80022a4:	603b      	str	r3, [r7, #0]
 80022a6:	4b0b      	ldr	r3, [pc, #44]	@ (80022d4 <HAL_MspInit+0x54>)
 80022a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022aa:	4a0a      	ldr	r2, [pc, #40]	@ (80022d4 <HAL_MspInit+0x54>)
 80022ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80022b2:	4b08      	ldr	r3, [pc, #32]	@ (80022d4 <HAL_MspInit+0x54>)
 80022b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022ba:	603b      	str	r3, [r7, #0]
 80022bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80022be:	2200      	movs	r2, #0
 80022c0:	210f      	movs	r1, #15
 80022c2:	f06f 0001 	mvn.w	r0, #1
 80022c6:	f001 f8df 	bl	8003488 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022ca:	bf00      	nop
 80022cc:	3708      	adds	r7, #8
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	40023800 	.word	0x40023800

080022d8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b08c      	sub	sp, #48	@ 0x30
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80022e0:	2300      	movs	r3, #0
 80022e2:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80022e4:	2300      	movs	r3, #0
 80022e6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80022e8:	2300      	movs	r3, #0
 80022ea:	60bb      	str	r3, [r7, #8]
 80022ec:	4b2f      	ldr	r3, [pc, #188]	@ (80023ac <HAL_InitTick+0xd4>)
 80022ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022f0:	4a2e      	ldr	r2, [pc, #184]	@ (80023ac <HAL_InitTick+0xd4>)
 80022f2:	f043 0301 	orr.w	r3, r3, #1
 80022f6:	6453      	str	r3, [r2, #68]	@ 0x44
 80022f8:	4b2c      	ldr	r3, [pc, #176]	@ (80023ac <HAL_InitTick+0xd4>)
 80022fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022fc:	f003 0301 	and.w	r3, r3, #1
 8002300:	60bb      	str	r3, [r7, #8]
 8002302:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002304:	f107 020c 	add.w	r2, r7, #12
 8002308:	f107 0310 	add.w	r3, r7, #16
 800230c:	4611      	mov	r1, r2
 800230e:	4618      	mov	r0, r3
 8002310:	f002 f906 	bl	8004520 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8002314:	f002 f8f0 	bl	80044f8 <HAL_RCC_GetPCLK2Freq>
 8002318:	4603      	mov	r3, r0
 800231a:	005b      	lsls	r3, r3, #1
 800231c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800231e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002320:	4a23      	ldr	r2, [pc, #140]	@ (80023b0 <HAL_InitTick+0xd8>)
 8002322:	fba2 2303 	umull	r2, r3, r2, r3
 8002326:	0c9b      	lsrs	r3, r3, #18
 8002328:	3b01      	subs	r3, #1
 800232a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800232c:	4b21      	ldr	r3, [pc, #132]	@ (80023b4 <HAL_InitTick+0xdc>)
 800232e:	4a22      	ldr	r2, [pc, #136]	@ (80023b8 <HAL_InitTick+0xe0>)
 8002330:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002332:	4b20      	ldr	r3, [pc, #128]	@ (80023b4 <HAL_InitTick+0xdc>)
 8002334:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002338:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800233a:	4a1e      	ldr	r2, [pc, #120]	@ (80023b4 <HAL_InitTick+0xdc>)
 800233c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800233e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002340:	4b1c      	ldr	r3, [pc, #112]	@ (80023b4 <HAL_InitTick+0xdc>)
 8002342:	2200      	movs	r2, #0
 8002344:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002346:	4b1b      	ldr	r3, [pc, #108]	@ (80023b4 <HAL_InitTick+0xdc>)
 8002348:	2200      	movs	r2, #0
 800234a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800234c:	4b19      	ldr	r3, [pc, #100]	@ (80023b4 <HAL_InitTick+0xdc>)
 800234e:	2200      	movs	r2, #0
 8002350:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8002352:	4818      	ldr	r0, [pc, #96]	@ (80023b4 <HAL_InitTick+0xdc>)
 8002354:	f002 fb9a 	bl	8004a8c <HAL_TIM_Base_Init>
 8002358:	4603      	mov	r3, r0
 800235a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800235e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002362:	2b00      	cmp	r3, #0
 8002364:	d11b      	bne.n	800239e <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8002366:	4813      	ldr	r0, [pc, #76]	@ (80023b4 <HAL_InitTick+0xdc>)
 8002368:	f002 fbea 	bl	8004b40 <HAL_TIM_Base_Start_IT>
 800236c:	4603      	mov	r3, r0
 800236e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8002372:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002376:	2b00      	cmp	r3, #0
 8002378:	d111      	bne.n	800239e <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800237a:	2019      	movs	r0, #25
 800237c:	f001 f8a0 	bl	80034c0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2b0f      	cmp	r3, #15
 8002384:	d808      	bhi.n	8002398 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8002386:	2200      	movs	r2, #0
 8002388:	6879      	ldr	r1, [r7, #4]
 800238a:	2019      	movs	r0, #25
 800238c:	f001 f87c 	bl	8003488 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002390:	4a0a      	ldr	r2, [pc, #40]	@ (80023bc <HAL_InitTick+0xe4>)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6013      	str	r3, [r2, #0]
 8002396:	e002      	b.n	800239e <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800239e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3730      	adds	r7, #48	@ 0x30
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	40023800 	.word	0x40023800
 80023b0:	431bde83 	.word	0x431bde83
 80023b4:	200085b4 	.word	0x200085b4
 80023b8:	40010000 	.word	0x40010000
 80023bc:	200000c8 	.word	0x200000c8

080023c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80023c4:	bf00      	nop
 80023c6:	e7fd      	b.n	80023c4 <NMI_Handler+0x4>

080023c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  printf("HardFault detected\n");
 80023ce:	480c      	ldr	r0, [pc, #48]	@ (8002400 <HardFault_Handler+0x38>)
 80023d0:	f017 f84e 	bl	8019470 <puts>
  uint32_t bus_fault_address = SCB->BFAR;    // Bus fault address register
 80023d4:	4b0b      	ldr	r3, [pc, #44]	@ (8002404 <HardFault_Handler+0x3c>)
 80023d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023d8:	607b      	str	r3, [r7, #4]
  uint32_t cfsr = SCB->CFSR;                // Configurable Fault Status Register
 80023da:	4b0a      	ldr	r3, [pc, #40]	@ (8002404 <HardFault_Handler+0x3c>)
 80023dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023de:	603b      	str	r3, [r7, #0]

  if (cfsr & (1 << 1)) {                    // If BFARVALID is set
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	f003 0302 	and.w	r3, r3, #2
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d004      	beq.n	80023f4 <HardFault_Handler+0x2c>
	printf("Imprecise bus fault at address: 0x%08lx\n", bus_fault_address);
 80023ea:	6879      	ldr	r1, [r7, #4]
 80023ec:	4806      	ldr	r0, [pc, #24]	@ (8002408 <HardFault_Handler+0x40>)
 80023ee:	f016 ffd7 	bl	80193a0 <iprintf>
 80023f2:	e003      	b.n	80023fc <HardFault_Handler+0x34>
  } else {
	printf("Imprecise bus fault occurred, but address is not valid\n");
 80023f4:	4805      	ldr	r0, [pc, #20]	@ (800240c <HardFault_Handler+0x44>)
 80023f6:	f017 f83b 	bl	8019470 <puts>
  }
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023fa:	bf00      	nop
 80023fc:	bf00      	nop
 80023fe:	e7fd      	b.n	80023fc <HardFault_Handler+0x34>
 8002400:	0801a884 	.word	0x0801a884
 8002404:	e000ed00 	.word	0xe000ed00
 8002408:	0801a898 	.word	0x0801a898
 800240c:	0801a8c4 	.word	0x0801a8c4

08002410 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002410:	b480      	push	{r7}
 8002412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002414:	bf00      	nop
 8002416:	e7fd      	b.n	8002414 <MemManage_Handler+0x4>

08002418 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800241c:	bf00      	nop
 800241e:	e7fd      	b.n	800241c <BusFault_Handler+0x4>

08002420 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002424:	bf00      	nop
 8002426:	e7fd      	b.n	8002424 <UsageFault_Handler+0x4>

08002428 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800242c:	bf00      	nop
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr
	...

08002438 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800243c:	4802      	ldr	r0, [pc, #8]	@ (8002448 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800243e:	f002 fbef 	bl	8004c20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002442:	bf00      	nop
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	200085b4 	.word	0x200085b4

0800244c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002450:	4802      	ldr	r0, [pc, #8]	@ (800245c <USART1_IRQHandler+0x10>)
 8002452:	f002 ff21 	bl	8005298 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002456:	bf00      	nop
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	20008604 	.word	0x20008604

08002460 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002464:	4802      	ldr	r0, [pc, #8]	@ (8002470 <DMA2_Stream2_IRQHandler+0x10>)
 8002466:	f001 f9d1 	bl	800380c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800246a:	bf00      	nop
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	2000864c 	.word	0x2000864c

08002474 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002478:	4802      	ldr	r0, [pc, #8]	@ (8002484 <DMA2_Stream7_IRQHandler+0x10>)
 800247a:	f001 f9c7 	bl	800380c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800247e:	bf00      	nop
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	200086ac 	.word	0x200086ac

08002488 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002488:	b480      	push	{r7}
 800248a:	af00      	add	r7, sp, #0
  return 1;
 800248c:	2301      	movs	r3, #1
}
 800248e:	4618      	mov	r0, r3
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr

08002498 <_kill>:

int _kill(int pid, int sig)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80024a2:	f017 f887 	bl	80195b4 <__errno>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2216      	movs	r2, #22
 80024aa:	601a      	str	r2, [r3, #0]
  return -1;
 80024ac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3708      	adds	r7, #8
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}

080024b8 <_exit>:

void _exit (int status)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80024c0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	f7ff ffe7 	bl	8002498 <_kill>
  while (1) {}    /* Make sure we hang here */
 80024ca:	bf00      	nop
 80024cc:	e7fd      	b.n	80024ca <_exit+0x12>

080024ce <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80024ce:	b580      	push	{r7, lr}
 80024d0:	b086      	sub	sp, #24
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	60f8      	str	r0, [r7, #12]
 80024d6:	60b9      	str	r1, [r7, #8]
 80024d8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024da:	2300      	movs	r3, #0
 80024dc:	617b      	str	r3, [r7, #20]
 80024de:	e00a      	b.n	80024f6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80024e0:	f3af 8000 	nop.w
 80024e4:	4601      	mov	r1, r0
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	1c5a      	adds	r2, r3, #1
 80024ea:	60ba      	str	r2, [r7, #8]
 80024ec:	b2ca      	uxtb	r2, r1
 80024ee:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	3301      	adds	r3, #1
 80024f4:	617b      	str	r3, [r7, #20]
 80024f6:	697a      	ldr	r2, [r7, #20]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	429a      	cmp	r2, r3
 80024fc:	dbf0      	blt.n	80024e0 <_read+0x12>
  }

  return len;
 80024fe:	687b      	ldr	r3, [r7, #4]
}
 8002500:	4618      	mov	r0, r3
 8002502:	3718      	adds	r7, #24
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}

08002508 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002508:	b480      	push	{r7}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002510:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002514:	4618      	mov	r0, r3
 8002516:	370c      	adds	r7, #12
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr

08002520 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
 8002528:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002530:	605a      	str	r2, [r3, #4]
  return 0;
 8002532:	2300      	movs	r3, #0
}
 8002534:	4618      	mov	r0, r3
 8002536:	370c      	adds	r7, #12
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr

08002540 <_isatty>:

int _isatty(int file)
{
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002548:	2301      	movs	r3, #1
}
 800254a:	4618      	mov	r0, r3
 800254c:	370c      	adds	r7, #12
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr

08002556 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002556:	b480      	push	{r7}
 8002558:	b085      	sub	sp, #20
 800255a:	af00      	add	r7, sp, #0
 800255c:	60f8      	str	r0, [r7, #12]
 800255e:	60b9      	str	r1, [r7, #8]
 8002560:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002562:	2300      	movs	r3, #0
}
 8002564:	4618      	mov	r0, r3
 8002566:	3714      	adds	r7, #20
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr

08002570 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b086      	sub	sp, #24
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002578:	4a14      	ldr	r2, [pc, #80]	@ (80025cc <_sbrk+0x5c>)
 800257a:	4b15      	ldr	r3, [pc, #84]	@ (80025d0 <_sbrk+0x60>)
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002584:	4b13      	ldr	r3, [pc, #76]	@ (80025d4 <_sbrk+0x64>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d102      	bne.n	8002592 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800258c:	4b11      	ldr	r3, [pc, #68]	@ (80025d4 <_sbrk+0x64>)
 800258e:	4a12      	ldr	r2, [pc, #72]	@ (80025d8 <_sbrk+0x68>)
 8002590:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002592:	4b10      	ldr	r3, [pc, #64]	@ (80025d4 <_sbrk+0x64>)
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4413      	add	r3, r2
 800259a:	693a      	ldr	r2, [r7, #16]
 800259c:	429a      	cmp	r2, r3
 800259e:	d207      	bcs.n	80025b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025a0:	f017 f808 	bl	80195b4 <__errno>
 80025a4:	4603      	mov	r3, r0
 80025a6:	220c      	movs	r2, #12
 80025a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80025ae:	e009      	b.n	80025c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025b0:	4b08      	ldr	r3, [pc, #32]	@ (80025d4 <_sbrk+0x64>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025b6:	4b07      	ldr	r3, [pc, #28]	@ (80025d4 <_sbrk+0x64>)
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4413      	add	r3, r2
 80025be:	4a05      	ldr	r2, [pc, #20]	@ (80025d4 <_sbrk+0x64>)
 80025c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025c2:	68fb      	ldr	r3, [r7, #12]
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3718      	adds	r7, #24
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	20050000 	.word	0x20050000
 80025d0:	00000400 	.word	0x00000400
 80025d4:	20008600 	.word	0x20008600
 80025d8:	200156b8 	.word	0x200156b8

080025dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025e0:	4b06      	ldr	r3, [pc, #24]	@ (80025fc <SystemInit+0x20>)
 80025e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025e6:	4a05      	ldr	r2, [pc, #20]	@ (80025fc <SystemInit+0x20>)
 80025e8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80025ec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025f0:	bf00      	nop
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr
 80025fa:	bf00      	nop
 80025fc:	e000ed00 	.word	0xe000ed00

08002600 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002604:	4b11      	ldr	r3, [pc, #68]	@ (800264c <MX_USART1_UART_Init+0x4c>)
 8002606:	4a12      	ldr	r2, [pc, #72]	@ (8002650 <MX_USART1_UART_Init+0x50>)
 8002608:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800260a:	4b10      	ldr	r3, [pc, #64]	@ (800264c <MX_USART1_UART_Init+0x4c>)
 800260c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002610:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002612:	4b0e      	ldr	r3, [pc, #56]	@ (800264c <MX_USART1_UART_Init+0x4c>)
 8002614:	2200      	movs	r2, #0
 8002616:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002618:	4b0c      	ldr	r3, [pc, #48]	@ (800264c <MX_USART1_UART_Init+0x4c>)
 800261a:	2200      	movs	r2, #0
 800261c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800261e:	4b0b      	ldr	r3, [pc, #44]	@ (800264c <MX_USART1_UART_Init+0x4c>)
 8002620:	2200      	movs	r2, #0
 8002622:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002624:	4b09      	ldr	r3, [pc, #36]	@ (800264c <MX_USART1_UART_Init+0x4c>)
 8002626:	220c      	movs	r2, #12
 8002628:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800262a:	4b08      	ldr	r3, [pc, #32]	@ (800264c <MX_USART1_UART_Init+0x4c>)
 800262c:	2200      	movs	r2, #0
 800262e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002630:	4b06      	ldr	r3, [pc, #24]	@ (800264c <MX_USART1_UART_Init+0x4c>)
 8002632:	2200      	movs	r2, #0
 8002634:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002636:	4805      	ldr	r0, [pc, #20]	@ (800264c <MX_USART1_UART_Init+0x4c>)
 8002638:	f002 fcca 	bl	8004fd0 <HAL_UART_Init>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d001      	beq.n	8002646 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002642:	f7ff fcb1 	bl	8001fa8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002646:	bf00      	nop
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	20008604 	.word	0x20008604
 8002650:	40011000 	.word	0x40011000

08002654 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b08a      	sub	sp, #40	@ 0x28
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800265c:	f107 0314 	add.w	r3, r7, #20
 8002660:	2200      	movs	r2, #0
 8002662:	601a      	str	r2, [r3, #0]
 8002664:	605a      	str	r2, [r3, #4]
 8002666:	609a      	str	r2, [r3, #8]
 8002668:	60da      	str	r2, [r3, #12]
 800266a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a4d      	ldr	r2, [pc, #308]	@ (80027a8 <HAL_UART_MspInit+0x154>)
 8002672:	4293      	cmp	r3, r2
 8002674:	f040 8094 	bne.w	80027a0 <HAL_UART_MspInit+0x14c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002678:	2300      	movs	r3, #0
 800267a:	613b      	str	r3, [r7, #16]
 800267c:	4b4b      	ldr	r3, [pc, #300]	@ (80027ac <HAL_UART_MspInit+0x158>)
 800267e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002680:	4a4a      	ldr	r2, [pc, #296]	@ (80027ac <HAL_UART_MspInit+0x158>)
 8002682:	f043 0310 	orr.w	r3, r3, #16
 8002686:	6453      	str	r3, [r2, #68]	@ 0x44
 8002688:	4b48      	ldr	r3, [pc, #288]	@ (80027ac <HAL_UART_MspInit+0x158>)
 800268a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800268c:	f003 0310 	and.w	r3, r3, #16
 8002690:	613b      	str	r3, [r7, #16]
 8002692:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002694:	2300      	movs	r3, #0
 8002696:	60fb      	str	r3, [r7, #12]
 8002698:	4b44      	ldr	r3, [pc, #272]	@ (80027ac <HAL_UART_MspInit+0x158>)
 800269a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800269c:	4a43      	ldr	r2, [pc, #268]	@ (80027ac <HAL_UART_MspInit+0x158>)
 800269e:	f043 0301 	orr.w	r3, r3, #1
 80026a2:	6313      	str	r3, [r2, #48]	@ 0x30
 80026a4:	4b41      	ldr	r3, [pc, #260]	@ (80027ac <HAL_UART_MspInit+0x158>)
 80026a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026a8:	f003 0301 	and.w	r3, r3, #1
 80026ac:	60fb      	str	r3, [r7, #12]
 80026ae:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80026b0:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80026b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026b6:	2302      	movs	r3, #2
 80026b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ba:	2300      	movs	r3, #0
 80026bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026be:	2303      	movs	r3, #3
 80026c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80026c2:	2307      	movs	r3, #7
 80026c4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026c6:	f107 0314 	add.w	r3, r7, #20
 80026ca:	4619      	mov	r1, r3
 80026cc:	4838      	ldr	r0, [pc, #224]	@ (80027b0 <HAL_UART_MspInit+0x15c>)
 80026ce:	f001 fb07 	bl	8003ce0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80026d2:	4b38      	ldr	r3, [pc, #224]	@ (80027b4 <HAL_UART_MspInit+0x160>)
 80026d4:	4a38      	ldr	r2, [pc, #224]	@ (80027b8 <HAL_UART_MspInit+0x164>)
 80026d6:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80026d8:	4b36      	ldr	r3, [pc, #216]	@ (80027b4 <HAL_UART_MspInit+0x160>)
 80026da:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80026de:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80026e0:	4b34      	ldr	r3, [pc, #208]	@ (80027b4 <HAL_UART_MspInit+0x160>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026e6:	4b33      	ldr	r3, [pc, #204]	@ (80027b4 <HAL_UART_MspInit+0x160>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80026ec:	4b31      	ldr	r3, [pc, #196]	@ (80027b4 <HAL_UART_MspInit+0x160>)
 80026ee:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80026f2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80026f4:	4b2f      	ldr	r3, [pc, #188]	@ (80027b4 <HAL_UART_MspInit+0x160>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80026fa:	4b2e      	ldr	r3, [pc, #184]	@ (80027b4 <HAL_UART_MspInit+0x160>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002700:	4b2c      	ldr	r3, [pc, #176]	@ (80027b4 <HAL_UART_MspInit+0x160>)
 8002702:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002706:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002708:	4b2a      	ldr	r3, [pc, #168]	@ (80027b4 <HAL_UART_MspInit+0x160>)
 800270a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800270e:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002710:	4b28      	ldr	r3, [pc, #160]	@ (80027b4 <HAL_UART_MspInit+0x160>)
 8002712:	2200      	movs	r2, #0
 8002714:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002716:	4827      	ldr	r0, [pc, #156]	@ (80027b4 <HAL_UART_MspInit+0x160>)
 8002718:	f000 fee0 	bl	80034dc <HAL_DMA_Init>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d001      	beq.n	8002726 <HAL_UART_MspInit+0xd2>
    {
      Error_Handler();
 8002722:	f7ff fc41 	bl	8001fa8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a22      	ldr	r2, [pc, #136]	@ (80027b4 <HAL_UART_MspInit+0x160>)
 800272a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800272c:	4a21      	ldr	r2, [pc, #132]	@ (80027b4 <HAL_UART_MspInit+0x160>)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8002732:	4b22      	ldr	r3, [pc, #136]	@ (80027bc <HAL_UART_MspInit+0x168>)
 8002734:	4a22      	ldr	r2, [pc, #136]	@ (80027c0 <HAL_UART_MspInit+0x16c>)
 8002736:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8002738:	4b20      	ldr	r3, [pc, #128]	@ (80027bc <HAL_UART_MspInit+0x168>)
 800273a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800273e:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002740:	4b1e      	ldr	r3, [pc, #120]	@ (80027bc <HAL_UART_MspInit+0x168>)
 8002742:	2240      	movs	r2, #64	@ 0x40
 8002744:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002746:	4b1d      	ldr	r3, [pc, #116]	@ (80027bc <HAL_UART_MspInit+0x168>)
 8002748:	2200      	movs	r2, #0
 800274a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800274c:	4b1b      	ldr	r3, [pc, #108]	@ (80027bc <HAL_UART_MspInit+0x168>)
 800274e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002752:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002754:	4b19      	ldr	r3, [pc, #100]	@ (80027bc <HAL_UART_MspInit+0x168>)
 8002756:	2200      	movs	r2, #0
 8002758:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800275a:	4b18      	ldr	r3, [pc, #96]	@ (80027bc <HAL_UART_MspInit+0x168>)
 800275c:	2200      	movs	r2, #0
 800275e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002760:	4b16      	ldr	r3, [pc, #88]	@ (80027bc <HAL_UART_MspInit+0x168>)
 8002762:	2200      	movs	r2, #0
 8002764:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002766:	4b15      	ldr	r3, [pc, #84]	@ (80027bc <HAL_UART_MspInit+0x168>)
 8002768:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800276c:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800276e:	4b13      	ldr	r3, [pc, #76]	@ (80027bc <HAL_UART_MspInit+0x168>)
 8002770:	2200      	movs	r2, #0
 8002772:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002774:	4811      	ldr	r0, [pc, #68]	@ (80027bc <HAL_UART_MspInit+0x168>)
 8002776:	f000 feb1 	bl	80034dc <HAL_DMA_Init>
 800277a:	4603      	mov	r3, r0
 800277c:	2b00      	cmp	r3, #0
 800277e:	d001      	beq.n	8002784 <HAL_UART_MspInit+0x130>
    {
      Error_Handler();
 8002780:	f7ff fc12 	bl	8001fa8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	4a0d      	ldr	r2, [pc, #52]	@ (80027bc <HAL_UART_MspInit+0x168>)
 8002788:	639a      	str	r2, [r3, #56]	@ 0x38
 800278a:	4a0c      	ldr	r2, [pc, #48]	@ (80027bc <HAL_UART_MspInit+0x168>)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002790:	2200      	movs	r2, #0
 8002792:	2105      	movs	r1, #5
 8002794:	2025      	movs	r0, #37	@ 0x25
 8002796:	f000 fe77 	bl	8003488 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800279a:	2025      	movs	r0, #37	@ 0x25
 800279c:	f000 fe90 	bl	80034c0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80027a0:	bf00      	nop
 80027a2:	3728      	adds	r7, #40	@ 0x28
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	40011000 	.word	0x40011000
 80027ac:	40023800 	.word	0x40023800
 80027b0:	40020000 	.word	0x40020000
 80027b4:	2000864c 	.word	0x2000864c
 80027b8:	40026440 	.word	0x40026440
 80027bc:	200086ac 	.word	0x200086ac
 80027c0:	400264b8 	.word	0x400264b8

080027c4 <calculate_pwm>:
 * @param pwm_output An array of 8 uint16_t values to store the calculated PWM output.
 * @return OK if the calculation was successful, MAT_MULT_ERROR if the matrix
 * multiplication failed.
 */
int8_t calculate_pwm(const float in_joystick_input[6], uint32_t pwm_output[8])
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b0a0      	sub	sp, #128	@ 0x80
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	6039      	str	r1, [r7, #0]
	float joystick_input[6];
	for(uint8_t i = 0; i < 6; i++)
 80027ce:	2300      	movs	r3, #0
 80027d0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80027d4:	e011      	b.n	80027fa <calculate_pwm+0x36>
	{
		joystick_input[i] = in_joystick_input[i];
 80027d6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	687a      	ldr	r2, [r7, #4]
 80027de:	441a      	add	r2, r3
 80027e0:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80027e4:	6812      	ldr	r2, [r2, #0]
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	3380      	adds	r3, #128	@ 0x80
 80027ea:	443b      	add	r3, r7
 80027ec:	3b1c      	subs	r3, #28
 80027ee:	601a      	str	r2, [r3, #0]
	for(uint8_t i = 0; i < 6; i++)
 80027f0:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80027f4:	3301      	adds	r3, #1
 80027f6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80027fa:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80027fe:	2b05      	cmp	r3, #5
 8002800:	d9e9      	bls.n	80027d6 <calculate_pwm+0x12>
	}

    normalize_vector(in_joystick_input, joystick_input, 6);
 8002802:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002806:	2206      	movs	r2, #6
 8002808:	4619      	mov	r1, r3
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f7ff fa9e 	bl	8001d4c <normalize_vector>

    float f_pwm_output[8];

    __attribute__((aligned(4))) float pwm_output_8_1[8][1] = {0};
 8002810:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002814:	2220      	movs	r2, #32
 8002816:	2100      	movs	r1, #0
 8002818:	4618      	mov	r0, r3
 800281a:	f016 fe90 	bl	801953e <memset>

    arm_matrix_instance_f32 fixed_mixing_matrix_instance;
    arm_matrix_instance_f32 joystick_input_instance;
    arm_matrix_instance_f32 pwm_output_instance;

    arm_mat_init_f32(&fixed_mixing_matrix_instance, 8, 6, (float *)FIXED_MIXING_MATRIX);
 800281e:	f107 001c 	add.w	r0, r7, #28
 8002822:	4b3b      	ldr	r3, [pc, #236]	@ (8002910 <calculate_pwm+0x14c>)
 8002824:	2206      	movs	r2, #6
 8002826:	2108      	movs	r1, #8
 8002828:	f006 fd3a 	bl	80092a0 <arm_mat_init_f32>
    arm_mat_init_f32(&joystick_input_instance, 6, 1, (float *)joystick_input);
 800282c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002830:	f107 0014 	add.w	r0, r7, #20
 8002834:	2201      	movs	r2, #1
 8002836:	2106      	movs	r1, #6
 8002838:	f006 fd32 	bl	80092a0 <arm_mat_init_f32>
    arm_mat_init_f32(&pwm_output_instance, 8, 1, (float *)pwm_output_8_1);
 800283c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002840:	f107 000c 	add.w	r0, r7, #12
 8002844:	2201      	movs	r2, #1
 8002846:	2108      	movs	r1, #8
 8002848:	f006 fd2a 	bl	80092a0 <arm_mat_init_f32>

    if (arm_mat_mult_f32(&fixed_mixing_matrix_instance, &joystick_input_instance, &pwm_output_instance) != ARM_MATH_SUCCESS)
 800284c:	f107 020c 	add.w	r2, r7, #12
 8002850:	f107 0114 	add.w	r1, r7, #20
 8002854:	f107 031c 	add.w	r3, r7, #28
 8002858:	4618      	mov	r0, r3
 800285a:	f006 fc11 	bl	8009080 <arm_mat_mult_f32>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d001      	beq.n	8002868 <calculate_pwm+0xa4>
    {
        return MAT_MULT_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e04f      	b.n	8002908 <calculate_pwm+0x144>
    }

    for (uint8_t i = 0; i < 8; i++)
 8002868:	2300      	movs	r3, #0
 800286a:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 800286e:	e011      	b.n	8002894 <calculate_pwm+0xd0>
    {
        f_pwm_output[i] = pwm_output_instance.pData[i];
 8002870:	693a      	ldr	r2, [r7, #16]
 8002872:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	441a      	add	r2, r3
 800287a:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 800287e:	6812      	ldr	r2, [r2, #0]
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	3380      	adds	r3, #128	@ 0x80
 8002884:	443b      	add	r3, r7
 8002886:	3b3c      	subs	r3, #60	@ 0x3c
 8002888:	601a      	str	r2, [r3, #0]
    for (uint8_t i = 0; i < 8; i++)
 800288a:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 800288e:	3301      	adds	r3, #1
 8002890:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 8002894:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8002898:	2b07      	cmp	r3, #7
 800289a:	d9e9      	bls.n	8002870 <calculate_pwm+0xac>
    }

    // normalize pwm_output and map to 1100 ~ 1900
    normalize_vector(f_pwm_output, f_pwm_output, 8);
 800289c:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 80028a0:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80028a4:	2208      	movs	r2, #8
 80028a6:	4618      	mov	r0, r3
 80028a8:	f7ff fa50 	bl	8001d4c <normalize_vector>
    for (uint8_t i = 0; i < 8; i++)
 80028ac:	2300      	movs	r3, #0
 80028ae:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d
 80028b2:	e024      	b.n	80028fe <calculate_pwm+0x13a>
    {
        // pwm_output[i][0] = symmetric_quadratic_interpolation(pwm_output[i][0], 1, PWM_MAX);
        pwm_output[i] = (int)linear_interpolation(f_pwm_output[i], -1, 1, PWM_MIN, PWM_MAX);
 80028b4:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	3380      	adds	r3, #128	@ 0x80
 80028bc:	443b      	add	r3, r7
 80028be:	3b3c      	subs	r3, #60	@ 0x3c
 80028c0:	edd3 7a00 	vldr	s15, [r3]
 80028c4:	ed9f 2a13 	vldr	s4, [pc, #76]	@ 8002914 <calculate_pwm+0x150>
 80028c8:	eddf 1a13 	vldr	s3, [pc, #76]	@ 8002918 <calculate_pwm+0x154>
 80028cc:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 80028d0:	eeff 0a00 	vmov.f32	s1, #240	@ 0xbf800000 -1.0
 80028d4:	eeb0 0a67 	vmov.f32	s0, s15
 80028d8:	f7ff fa0a 	bl	8001cf0 <linear_interpolation>
 80028dc:	eef0 7a40 	vmov.f32	s15, s0
 80028e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028e4:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	683a      	ldr	r2, [r7, #0]
 80028ec:	4413      	add	r3, r2
 80028ee:	ee17 2a90 	vmov	r2, s15
 80028f2:	601a      	str	r2, [r3, #0]
    for (uint8_t i = 0; i < 8; i++)
 80028f4:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 80028f8:	3301      	adds	r3, #1
 80028fa:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d
 80028fe:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 8002902:	2b07      	cmp	r3, #7
 8002904:	d9d6      	bls.n	80028b4 <calculate_pwm+0xf0>
    }
    return OK;
 8002906:	2300      	movs	r3, #0
}
 8002908:	4618      	mov	r0, r3
 800290a:	3780      	adds	r7, #128	@ 0x80
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}
 8002910:	20000008 	.word	0x20000008
 8002914:	44ed8000 	.word	0x44ed8000
 8002918:	44898000 	.word	0x44898000

0800291c <invert_quaternion>:

void invert_quaternion(const Quaternion * q, Quaternion * q_inv) {
 800291c:	b480      	push	{r7}
 800291e:	b085      	sub	sp, #20
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	6039      	str	r1, [r7, #0]
	float norm_squared = q->w * q->w + q->x * q->x + q->y * q->y + q->z * q->z;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	ed93 7a00 	vldr	s14, [r3]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	edd3 7a00 	vldr	s15, [r3]
 8002932:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	edd3 6a01 	vldr	s13, [r3, #4]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002942:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002946:	ee37 7a27 	vadd.f32	s14, s14, s15
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	edd3 6a02 	vldr	s13, [r3, #8]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	edd3 7a02 	vldr	s15, [r3, #8]
 8002956:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800295a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	edd3 6a03 	vldr	s13, [r3, #12]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	edd3 7a03 	vldr	s15, [r3, #12]
 800296a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800296e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002972:	edc7 7a03 	vstr	s15, [r7, #12]

	if (norm_squared == 0.0f) {
 8002976:	edd7 7a03 	vldr	s15, [r7, #12]
 800297a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800297e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002982:	d110      	bne.n	80029a6 <invert_quaternion+0x8a>
		// Handle the case of zero norm if needed (for example, return a specific error)
		q_inv->w = q_inv->x = q_inv->y = q_inv->z = 0.0f;
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	f04f 0200 	mov.w	r2, #0
 800298a:	60da      	str	r2, [r3, #12]
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	68da      	ldr	r2, [r3, #12]
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	609a      	str	r2, [r3, #8]
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	689a      	ldr	r2, [r3, #8]
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	605a      	str	r2, [r3, #4]
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	685a      	ldr	r2, [r3, #4]
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	601a      	str	r2, [r3, #0]
		return;
 80029a4:	e02d      	b.n	8002a02 <invert_quaternion+0xe6>
	}
	// Compute the inverse as the conjugate divided by the norm squared
	q_inv->w = q->w / norm_squared;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	edd3 6a00 	vldr	s13, [r3]
 80029ac:	ed97 7a03 	vldr	s14, [r7, #12]
 80029b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	edc3 7a00 	vstr	s15, [r3]
	q_inv->x = -q->x / norm_squared;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	edd3 7a01 	vldr	s15, [r3, #4]
 80029c0:	eef1 6a67 	vneg.f32	s13, s15
 80029c4:	ed97 7a03 	vldr	s14, [r7, #12]
 80029c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	edc3 7a01 	vstr	s15, [r3, #4]
	q_inv->y = -q->y / norm_squared;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	edd3 7a02 	vldr	s15, [r3, #8]
 80029d8:	eef1 6a67 	vneg.f32	s13, s15
 80029dc:	ed97 7a03 	vldr	s14, [r7, #12]
 80029e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	edc3 7a02 	vstr	s15, [r3, #8]
	q_inv->z = -q->z / norm_squared;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	edd3 7a03 	vldr	s15, [r3, #12]
 80029f0:	eef1 6a67 	vneg.f32	s13, s15
 80029f4:	ed97 7a03 	vldr	s14, [r7, #12]
 80029f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8002a02:	3714      	adds	r7, #20
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr

08002a0c <multiply_quaternions>:

void multiply_quaternions(const Quaternion* q1, const Quaternion* q2, Quaternion* qResult) {
 8002a0c:	b480      	push	{r7}
 8002a0e:	b085      	sub	sp, #20
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	60f8      	str	r0, [r7, #12]
 8002a14:	60b9      	str	r1, [r7, #8]
 8002a16:	607a      	str	r2, [r7, #4]
	qResult->w = q1->w * q2->w - q1->x * q2->x - q1->y * q2->y - q1->z * q2->z;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	ed93 7a00 	vldr	s14, [r3]
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	edd3 7a00 	vldr	s15, [r3]
 8002a24:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	edd3 6a01 	vldr	s13, [r3, #4]
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	edd3 7a01 	vldr	s15, [r3, #4]
 8002a34:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a38:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	edd3 6a02 	vldr	s13, [r3, #8]
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	edd3 7a02 	vldr	s15, [r3, #8]
 8002a48:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a4c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	edd3 6a03 	vldr	s13, [r3, #12]
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	edd3 7a03 	vldr	s15, [r3, #12]
 8002a5c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	edc3 7a00 	vstr	s15, [r3]
	qResult->x = q1->w * q2->x + q1->x * q2->w + q1->y * q2->z - q1->z * q2->y;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	ed93 7a00 	vldr	s14, [r3]
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	edd3 7a01 	vldr	s15, [r3, #4]
 8002a76:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	edd3 6a01 	vldr	s13, [r3, #4]
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	edd3 7a00 	vldr	s15, [r3]
 8002a86:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a8a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	edd3 6a02 	vldr	s13, [r3, #8]
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	edd3 7a03 	vldr	s15, [r3, #12]
 8002a9a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a9e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	edd3 6a03 	vldr	s13, [r3, #12]
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	edd3 7a02 	vldr	s15, [r3, #8]
 8002aae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ab2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	edc3 7a01 	vstr	s15, [r3, #4]
	qResult->y = q1->w * q2->y - q1->x * q2->z + q1->y * q2->w + q1->z * q2->x;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	ed93 7a00 	vldr	s14, [r3]
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	edd3 7a02 	vldr	s15, [r3, #8]
 8002ac8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	edd3 6a01 	vldr	s13, [r3, #4]
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	edd3 7a03 	vldr	s15, [r3, #12]
 8002ad8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002adc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	edd3 6a02 	vldr	s13, [r3, #8]
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	edd3 7a00 	vldr	s15, [r3]
 8002aec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002af0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	edd3 6a03 	vldr	s13, [r3, #12]
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	edd3 7a01 	vldr	s15, [r3, #4]
 8002b00:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	edc3 7a02 	vstr	s15, [r3, #8]
	qResult->z = q1->w * q2->z + q1->x * q2->y - q1->y * q2->x + q1->z * q2->w;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	ed93 7a00 	vldr	s14, [r3]
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	edd3 7a03 	vldr	s15, [r3, #12]
 8002b1a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	edd3 6a01 	vldr	s13, [r3, #4]
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	edd3 7a02 	vldr	s15, [r3, #8]
 8002b2a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b2e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	edd3 6a02 	vldr	s13, [r3, #8]
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	edd3 7a01 	vldr	s15, [r3, #4]
 8002b3e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b42:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	edd3 6a03 	vldr	s13, [r3, #12]
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	edd3 7a00 	vldr	s15, [r3]
 8002b52:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8002b60:	bf00      	nop
 8002b62:	3714      	adds	r7, #20
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr

08002b6c <PID_Update>:
 * @param setpoint The desired setpoint or target value.
 * @param dt The time step or sample period.
 * @return The new output value from the PID controller.
 */
float PID_Update(PID *pid, float current_value, float setpoint, float dt)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b08b      	sub	sp, #44	@ 0x2c
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	60f8      	str	r0, [r7, #12]
 8002b74:	ed87 0a02 	vstr	s0, [r7, #8]
 8002b78:	edc7 0a01 	vstr	s1, [r7, #4]
 8002b7c:	ed87 1a00 	vstr	s2, [r7]
    float error = setpoint - current_value;
 8002b80:	ed97 7a01 	vldr	s14, [r7, #4]
 8002b84:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b88:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b8c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    float proportional_term_out = pid->kp * error;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	edd3 7a00 	vldr	s15, [r3]
 8002b96:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8002b9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b9e:	edc7 7a08 	vstr	s15, [r7, #32]

    pid->integral += error * dt;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	ed93 7a03 	vldr	s14, [r3, #12]
 8002ba8:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8002bac:	edd7 7a00 	vldr	s15, [r7]
 8002bb0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bb4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	edc3 7a03 	vstr	s15, [r3, #12]
    float integral_term_out = pid->ki * pid->integral;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	ed93 7a01 	vldr	s14, [r3, #4]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	edd3 7a03 	vldr	s15, [r3, #12]
 8002bca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bce:	edc7 7a07 	vstr	s15, [r7, #28]

    float derivative = (error - pid->prev_error) / dt;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	edd3 7a04 	vldr	s15, [r3, #16]
 8002bd8:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8002bdc:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002be0:	ed97 7a00 	vldr	s14, [r7]
 8002be4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002be8:	edc7 7a06 	vstr	s15, [r7, #24]
    float derivative_term_out = pid->kd * derivative;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	edd3 7a02 	vldr	s15, [r3, #8]
 8002bf2:	ed97 7a06 	vldr	s14, [r7, #24]
 8002bf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bfa:	edc7 7a05 	vstr	s15, [r7, #20]

    float output = proportional_term_out + integral_term_out + derivative_term_out;
 8002bfe:	ed97 7a08 	vldr	s14, [r7, #32]
 8002c02:	edd7 7a07 	vldr	s15, [r7, #28]
 8002c06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c0a:	ed97 7a05 	vldr	s14, [r7, #20]
 8002c0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c12:	edc7 7a04 	vstr	s15, [r7, #16]

    pid->prev_error = error;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c1a:	611a      	str	r2, [r3, #16]

    return output;
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	ee07 3a90 	vmov	s15, r3
}
 8002c22:	eeb0 0a67 	vmov.f32	s0, s15
 8002c26:	372c      	adds	r7, #44	@ 0x2c
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr

08002c30 <calculate_rpy_from_quaternion>:

// PIDs controllers, respectively for z, pitch, roll, yaw
PID pids[4] = {0};

void calculate_rpy_from_quaternion(const Quaternion *quaternion, float roll_pitch_yaw_radians[3])
{
 8002c30:	b5b0      	push	{r4, r5, r7, lr}
 8002c32:	b08c      	sub	sp, #48	@ 0x30
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
 8002c38:	6039      	str	r1, [r7, #0]
	// roll (x-axis rotation)
	float sinr_cosp = 2 * (quaternion->w * quaternion->x + quaternion->y * quaternion->z);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	ed93 7a00 	vldr	s14, [r3]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	edd3 7a01 	vldr	s15, [r3, #4]
 8002c46:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	edd3 6a02 	vldr	s13, [r3, #8]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	edd3 7a03 	vldr	s15, [r3, #12]
 8002c56:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c5e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002c62:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
	float cosr_cosp = 1 - 2 * (quaternion->x * quaternion->x + quaternion->y * quaternion->y);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	ed93 7a01 	vldr	s14, [r3, #4]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002c72:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	edd3 6a02 	vldr	s13, [r3, #8]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002c82:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c8a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002c8e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002c92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c96:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
	roll_pitch_yaw_radians[0] = atan2(sinr_cosp, cosr_cosp);
 8002c9a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002c9c:	f7fd fc7c 	bl	8000598 <__aeabi_f2d>
 8002ca0:	4604      	mov	r4, r0
 8002ca2:	460d      	mov	r5, r1
 8002ca4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002ca6:	f7fd fc77 	bl	8000598 <__aeabi_f2d>
 8002caa:	4602      	mov	r2, r0
 8002cac:	460b      	mov	r3, r1
 8002cae:	ec43 2b11 	vmov	d1, r2, r3
 8002cb2:	ec45 4b10 	vmov	d0, r4, r5
 8002cb6:	f017 faf9 	bl	801a2ac <atan2>
 8002cba:	ec53 2b10 	vmov	r2, r3, d0
 8002cbe:	4610      	mov	r0, r2
 8002cc0:	4619      	mov	r1, r3
 8002cc2:	f7fd ff5b 	bl	8000b7c <__aeabi_d2f>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	601a      	str	r2, [r3, #0]

	// pitch (y-axis rotation)
	float sinp, cosp;
	arm_sqrt_f32(1 + 2 * (quaternion->w * quaternion->y - quaternion->x * quaternion->z), &sinp);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	ed93 7a00 	vldr	s14, [r3]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	edd3 7a02 	vldr	s15, [r3, #8]
 8002cd8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	edd3 6a01 	vldr	s13, [r3, #4]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	edd3 7a03 	vldr	s15, [r3, #12]
 8002ce8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002cec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cf0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002cf4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002cf8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002cfc:	edc7 7a05 	vstr	s15, [r7, #20]
 8002d00:	f107 030c 	add.w	r3, r7, #12
 8002d04:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 8002d06:	edd7 7a05 	vldr	s15, [r7, #20]
 8002d0a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002d0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d12:	db09      	blt.n	8002d28 <calculate_rpy_from_quaternion+0xf8>
  #else
      *pOut = sqrtf(in);
  #endif

#else
      *pOut = sqrtf(in);
 8002d14:	ed97 0a05 	vldr	s0, [r7, #20]
 8002d18:	f017 fb90 	bl	801a43c <sqrtf>
 8002d1c:	eef0 7a40 	vmov.f32	s15, s0
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	edc3 7a00 	vstr	s15, [r3]
#endif

      return (ARM_MATH_SUCCESS);
 8002d26:	e004      	b.n	8002d32 <calculate_rpy_from_quaternion+0x102>
    }
    else
    {
      *pOut = 0.0f;
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	f04f 0200 	mov.w	r2, #0
 8002d2e:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8002d30:	bf00      	nop
	arm_sqrt_f32(1 - 2 * (quaternion->w * quaternion->y - quaternion->x * quaternion->z), &cosp);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	ed93 7a00 	vldr	s14, [r3]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	edd3 7a02 	vldr	s15, [r3, #8]
 8002d3e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	edd3 6a01 	vldr	s13, [r3, #4]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	edd3 7a03 	vldr	s15, [r3, #12]
 8002d4e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d56:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002d5a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002d5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d62:	edc7 7a07 	vstr	s15, [r7, #28]
 8002d66:	f107 0308 	add.w	r3, r7, #8
 8002d6a:	61bb      	str	r3, [r7, #24]
    if (in >= 0.0f)
 8002d6c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002d70:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002d74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d78:	db09      	blt.n	8002d8e <calculate_rpy_from_quaternion+0x15e>
      *pOut = sqrtf(in);
 8002d7a:	ed97 0a07 	vldr	s0, [r7, #28]
 8002d7e:	f017 fb5d 	bl	801a43c <sqrtf>
 8002d82:	eef0 7a40 	vmov.f32	s15, s0
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	edc3 7a00 	vstr	s15, [r3]
      return (ARM_MATH_SUCCESS);
 8002d8c:	e004      	b.n	8002d98 <calculate_rpy_from_quaternion+0x168>
      *pOut = 0.0f;
 8002d8e:	69bb      	ldr	r3, [r7, #24]
 8002d90:	f04f 0200 	mov.w	r2, #0
 8002d94:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8002d96:	bf00      	nop
	roll_pitch_yaw_radians[1] = 2 * atan2(sinp, cosp) - M_PI / 2;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f7fd fbfc 	bl	8000598 <__aeabi_f2d>
 8002da0:	4604      	mov	r4, r0
 8002da2:	460d      	mov	r5, r1
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	4618      	mov	r0, r3
 8002da8:	f7fd fbf6 	bl	8000598 <__aeabi_f2d>
 8002dac:	4602      	mov	r2, r0
 8002dae:	460b      	mov	r3, r1
 8002db0:	ec43 2b11 	vmov	d1, r2, r3
 8002db4:	ec45 4b10 	vmov	d0, r4, r5
 8002db8:	f017 fa78 	bl	801a2ac <atan2>
 8002dbc:	ec51 0b10 	vmov	r0, r1, d0
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	460b      	mov	r3, r1
 8002dc4:	f7fd fa8a 	bl	80002dc <__adddf3>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	460b      	mov	r3, r1
 8002dcc:	4610      	mov	r0, r2
 8002dce:	4619      	mov	r1, r3
 8002dd0:	a32d      	add	r3, pc, #180	@ (adr r3, 8002e88 <calculate_rpy_from_quaternion+0x258>)
 8002dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dd6:	f7fd fa7f 	bl	80002d8 <__aeabi_dsub>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	460b      	mov	r3, r1
 8002dde:	4610      	mov	r0, r2
 8002de0:	4619      	mov	r1, r3
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	1d1c      	adds	r4, r3, #4
 8002de6:	f7fd fec9 	bl	8000b7c <__aeabi_d2f>
 8002dea:	4603      	mov	r3, r0
 8002dec:	6023      	str	r3, [r4, #0]

	// yaw (z-axis rotation)
	float siny_cosp = 2 * (quaternion->w * quaternion->z + quaternion->x * quaternion->y);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	ed93 7a00 	vldr	s14, [r3]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	edd3 7a03 	vldr	s15, [r3, #12]
 8002dfa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	edd3 6a01 	vldr	s13, [r3, #4]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	edd3 7a02 	vldr	s15, [r3, #8]
 8002e0a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e12:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002e16:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	float cosy_cosp = 1 - 2 * (quaternion->y * quaternion->y + quaternion->z * quaternion->z);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	ed93 7a02 	vldr	s14, [r3, #8]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	edd3 7a02 	vldr	s15, [r3, #8]
 8002e26:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	edd3 6a03 	vldr	s13, [r3, #12]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	edd3 7a03 	vldr	s15, [r3, #12]
 8002e36:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e3e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002e42:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002e46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e4a:	edc7 7a08 	vstr	s15, [r7, #32]
	roll_pitch_yaw_radians[2] = atan2(siny_cosp, cosy_cosp);
 8002e4e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002e50:	f7fd fba2 	bl	8000598 <__aeabi_f2d>
 8002e54:	4604      	mov	r4, r0
 8002e56:	460d      	mov	r5, r1
 8002e58:	6a38      	ldr	r0, [r7, #32]
 8002e5a:	f7fd fb9d 	bl	8000598 <__aeabi_f2d>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	460b      	mov	r3, r1
 8002e62:	ec43 2b11 	vmov	d1, r2, r3
 8002e66:	ec45 4b10 	vmov	d0, r4, r5
 8002e6a:	f017 fa1f 	bl	801a2ac <atan2>
 8002e6e:	ec51 0b10 	vmov	r0, r1, d0
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	f103 0408 	add.w	r4, r3, #8
 8002e78:	f7fd fe80 	bl	8000b7c <__aeabi_d2f>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	6023      	str	r3, [r4, #0]
}
 8002e80:	bf00      	nop
 8002e82:	3730      	adds	r7, #48	@ 0x30
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bdb0      	pop	{r4, r5, r7, pc}
 8002e88:	54442d18 	.word	0x54442d18
 8002e8c:	3ff921fb 	.word	0x3ff921fb

08002e90 <update_setpoints>:

uint8_t update_setpoints(const float input_values[6], const Quaternion *quat, const float *water_temperature)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b088      	sub	sp, #32
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	60f8      	str	r0, [r7, #12]
 8002e98:	60b9      	str	r1, [r7, #8]
 8002e9a:	607a      	str	r2, [r7, #4]
	uint8_t count = 0;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	77fb      	strb	r3, [r7, #31]
	float rpy_rads[3];
	calculate_rpy_from_quaternion(quat, rpy_rads);
 8002ea0:	f107 0310 	add.w	r3, r7, #16
 8002ea4:	4619      	mov	r1, r3
 8002ea6:	68b8      	ldr	r0, [r7, #8]
 8002ea8:	f7ff fec2 	bl	8002c30 <calculate_rpy_from_quaternion>
	// updates setpoints for angles
	for(uint8_t i = 0; i < 3; i++)
 8002eac:	2300      	movs	r3, #0
 8002eae:	77bb      	strb	r3, [r7, #30]
 8002eb0:	e022      	b.n	8002ef8 <update_setpoints+0x68>
	{
		if(fabsf(input_values[i+3]) < TOLERANCE)
 8002eb2:	7fbb      	ldrb	r3, [r7, #30]
 8002eb4:	3303      	adds	r3, #3
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	68fa      	ldr	r2, [r7, #12]
 8002eba:	4413      	add	r3, r2
 8002ebc:	edd3 7a00 	vldr	s15, [r3]
 8002ec0:	eef0 7ae7 	vabs.f32	s15, s15
 8002ec4:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8002f08 <update_setpoints+0x78>
 8002ec8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ecc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ed0:	d50f      	bpl.n	8002ef2 <update_setpoints+0x62>
		{
			setpoints[i+1] = rpy_rads[i+1];
 8002ed2:	7fbb      	ldrb	r3, [r7, #30]
 8002ed4:	1c5a      	adds	r2, r3, #1
 8002ed6:	7fbb      	ldrb	r3, [r7, #30]
 8002ed8:	3301      	adds	r3, #1
 8002eda:	0092      	lsls	r2, r2, #2
 8002edc:	3220      	adds	r2, #32
 8002ede:	443a      	add	r2, r7
 8002ee0:	3a10      	subs	r2, #16
 8002ee2:	6812      	ldr	r2, [r2, #0]
 8002ee4:	4909      	ldr	r1, [pc, #36]	@ (8002f0c <update_setpoints+0x7c>)
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	440b      	add	r3, r1
 8002eea:	601a      	str	r2, [r3, #0]
			count++;
 8002eec:	7ffb      	ldrb	r3, [r7, #31]
 8002eee:	3301      	adds	r3, #1
 8002ef0:	77fb      	strb	r3, [r7, #31]
	for(uint8_t i = 0; i < 3; i++)
 8002ef2:	7fbb      	ldrb	r3, [r7, #30]
 8002ef4:	3301      	adds	r3, #1
 8002ef6:	77bb      	strb	r3, [r7, #30]
 8002ef8:	7fbb      	ldrb	r3, [r7, #30]
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	d9d9      	bls.n	8002eb2 <update_setpoints+0x22>
	 * In order for the setpoint to be update, I have to check the role each axis plays in changing the depth,
	 * and updating the setpoint only if all of the corresponding input values are 0
	 */


	return count;
 8002efe:	7ffb      	ldrb	r3, [r7, #31]
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3720      	adds	r7, #32
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	3d4ccccd 	.word	0x3d4ccccd
 8002f0c:	2000870c 	.word	0x2000870c

08002f10 <calculate_pwm_with_pid>:
    }
}

// The order for 4-elements arrays is: z, pitch, roll, yaw
uint8_t calculate_pwm_with_pid(const float joystick_input[6], uint32_t pwm_output[8], const Quaternion *orientation_quaternion,
		const float *water_pressure, const float integration_intervals[PID_NUMBER]) {
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b0a4      	sub	sp, #144	@ 0x90
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	60f8      	str	r0, [r7, #12]
 8002f18:	60b9      	str	r1, [r7, #8]
 8002f1a:	607a      	str	r2, [r7, #4]
 8002f1c:	603b      	str	r3, [r7, #0]
	// calculate current values
	float current_values[4];
	calculate_rpy_from_quaternion(orientation_quaternion, &current_values[1]);
 8002f1e:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002f22:	3304      	adds	r3, #4
 8002f24:	4619      	mov	r1, r3
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f7ff fe82 	bl	8002c30 <calculate_rpy_from_quaternion>
	current_values[0] = *water_pressure;
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	66bb      	str	r3, [r7, #104]	@ 0x68

	update_setpoints(joystick_input, orientation_quaternion, water_pressure);
 8002f32:	683a      	ldr	r2, [r7, #0]
 8002f34:	6879      	ldr	r1, [r7, #4]
 8002f36:	68f8      	ldr	r0, [r7, #12]
 8002f38:	f7ff ffaa 	bl	8002e90 <update_setpoints>
	// PID in action!
	float input_values[6];
	for(uint8_t i = 0; i < 6; i++) input_values[i] = joystick_input[i];
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 8002f42:	e011      	b.n	8002f68 <calculate_pwm_with_pid+0x58>
 8002f44:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	68fa      	ldr	r2, [r7, #12]
 8002f4c:	441a      	add	r2, r3
 8002f4e:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8002f52:	6812      	ldr	r2, [r2, #0]
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	3390      	adds	r3, #144	@ 0x90
 8002f58:	443b      	add	r3, r7
 8002f5a:	3b40      	subs	r3, #64	@ 0x40
 8002f5c:	601a      	str	r2, [r3, #0]
 8002f5e:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8002f62:	3301      	adds	r3, #1
 8002f64:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 8002f68:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8002f6c:	2b05      	cmp	r3, #5
 8002f6e:	d9e9      	bls.n	8002f44 <calculate_pwm_with_pid+0x34>

	float pitch_pid_feedback = PID_Update(&pids[1], current_values[1], setpoints[1], integration_intervals[1]);
 8002f70:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8002f74:	4bac      	ldr	r3, [pc, #688]	@ (8003228 <calculate_pwm_with_pid+0x318>)
 8002f76:	ed93 7a01 	vldr	s14, [r3, #4]
 8002f7a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002f7e:	3304      	adds	r3, #4
 8002f80:	edd3 6a00 	vldr	s13, [r3]
 8002f84:	eeb0 1a66 	vmov.f32	s2, s13
 8002f88:	eef0 0a47 	vmov.f32	s1, s14
 8002f8c:	eeb0 0a67 	vmov.f32	s0, s15
 8002f90:	48a6      	ldr	r0, [pc, #664]	@ (800322c <calculate_pwm_with_pid+0x31c>)
 8002f92:	f7ff fdeb 	bl	8002b6c <PID_Update>
 8002f96:	ed87 0a22 	vstr	s0, [r7, #136]	@ 0x88
	float roll_pid_feedback = PID_Update(&pids[2], current_values[2], setpoints[2], integration_intervals[2]);
 8002f9a:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8002f9e:	4ba2      	ldr	r3, [pc, #648]	@ (8003228 <calculate_pwm_with_pid+0x318>)
 8002fa0:	ed93 7a02 	vldr	s14, [r3, #8]
 8002fa4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002fa8:	3308      	adds	r3, #8
 8002faa:	edd3 6a00 	vldr	s13, [r3]
 8002fae:	eeb0 1a66 	vmov.f32	s2, s13
 8002fb2:	eef0 0a47 	vmov.f32	s1, s14
 8002fb6:	eeb0 0a67 	vmov.f32	s0, s15
 8002fba:	489d      	ldr	r0, [pc, #628]	@ (8003230 <calculate_pwm_with_pid+0x320>)
 8002fbc:	f7ff fdd6 	bl	8002b6c <PID_Update>
 8002fc0:	ed87 0a21 	vstr	s0, [r7, #132]	@ 0x84
	float yaw_pid_feedback = PID_Update(&pids[3], current_values[3], setpoints[3], integration_intervals[3]);
 8002fc4:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8002fc8:	4b97      	ldr	r3, [pc, #604]	@ (8003228 <calculate_pwm_with_pid+0x318>)
 8002fca:	ed93 7a03 	vldr	s14, [r3, #12]
 8002fce:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002fd2:	330c      	adds	r3, #12
 8002fd4:	edd3 6a00 	vldr	s13, [r3]
 8002fd8:	eeb0 1a66 	vmov.f32	s2, s13
 8002fdc:	eef0 0a47 	vmov.f32	s1, s14
 8002fe0:	eeb0 0a67 	vmov.f32	s0, s15
 8002fe4:	4893      	ldr	r0, [pc, #588]	@ (8003234 <calculate_pwm_with_pid+0x324>)
 8002fe6:	f7ff fdc1 	bl	8002b6c <PID_Update>
 8002fea:	ed87 0a20 	vstr	s0, [r7, #128]	@ 0x80
	/* **************
	 * Depth
	 * The z axis we can get measures of is in the fixed-body-frame:
	 * we need to convert the output of the PID to the body frame in order to modify the input, in order to achieve the desired depth hold.
	*/
	float z_out = PID_Update(&pids[0], current_values[0], setpoints[0], integration_intervals[0]);
 8002fee:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8002ff2:	4b8d      	ldr	r3, [pc, #564]	@ (8003228 <calculate_pwm_with_pid+0x318>)
 8002ff4:	ed93 7a00 	vldr	s14, [r3]
 8002ff8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002ffc:	edd3 6a00 	vldr	s13, [r3]
 8003000:	eeb0 1a66 	vmov.f32	s2, s13
 8003004:	eef0 0a47 	vmov.f32	s1, s14
 8003008:	eeb0 0a67 	vmov.f32	s0, s15
 800300c:	488a      	ldr	r0, [pc, #552]	@ (8003238 <calculate_pwm_with_pid+0x328>)
 800300e:	f7ff fdad 	bl	8002b6c <PID_Update>
 8003012:	ed87 0a1f 	vstr	s0, [r7, #124]	@ 0x7c

	// Applies the inverse rotation of the body-frame from the fixed-body-frame ( described by the orientation quaternion ),
	// in order to compute the coordinates of the z_out vector with respect to the body-frame
	Quaternion z_out_q;
	z_out_q.w = 0;
 8003016:	f04f 0300 	mov.w	r3, #0
 800301a:	643b      	str	r3, [r7, #64]	@ 0x40
	z_out_q.x = 0;
 800301c:	f04f 0300 	mov.w	r3, #0
 8003020:	647b      	str	r3, [r7, #68]	@ 0x44
	z_out_q.y = 0;
 8003022:	f04f 0300 	mov.w	r3, #0
 8003026:	64bb      	str	r3, [r7, #72]	@ 0x48
	z_out_q.z = z_out;
 8003028:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800302a:	64fb      	str	r3, [r7, #76]	@ 0x4c
	Quaternion q_inv = {0};
 800302c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003030:	2200      	movs	r2, #0
 8003032:	601a      	str	r2, [r3, #0]
 8003034:	605a      	str	r2, [r3, #4]
 8003036:	609a      	str	r2, [r3, #8]
 8003038:	60da      	str	r2, [r3, #12]
	invert_quaternion(orientation_quaternion, &q_inv);
 800303a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800303e:	4619      	mov	r1, r3
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	f7ff fc6b 	bl	800291c <invert_quaternion>
	
	// applies the inverse rotation to the z_out_q vector
	Quaternion intermediate_result = {0};
 8003046:	f107 0320 	add.w	r3, r7, #32
 800304a:	2200      	movs	r2, #0
 800304c:	601a      	str	r2, [r3, #0]
 800304e:	605a      	str	r2, [r3, #4]
 8003050:	609a      	str	r2, [r3, #8]
 8003052:	60da      	str	r2, [r3, #12]
	Quaternion z_out_body_frame = {0};
 8003054:	f107 0310 	add.w	r3, r7, #16
 8003058:	2200      	movs	r2, #0
 800305a:	601a      	str	r2, [r3, #0]
 800305c:	605a      	str	r2, [r3, #4]
 800305e:	609a      	str	r2, [r3, #8]
 8003060:	60da      	str	r2, [r3, #12]
	multiply_quaternions(&q_inv, &z_out_q, &intermediate_result);
 8003062:	f107 0220 	add.w	r2, r7, #32
 8003066:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 800306a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800306e:	4618      	mov	r0, r3
 8003070:	f7ff fccc 	bl	8002a0c <multiply_quaternions>
	multiply_quaternions(&intermediate_result, orientation_quaternion, &z_out_body_frame);
 8003074:	f107 0210 	add.w	r2, r7, #16
 8003078:	f107 0320 	add.w	r3, r7, #32
 800307c:	6879      	ldr	r1, [r7, #4]
 800307e:	4618      	mov	r0, r3
 8003080:	f7ff fcc4 	bl	8002a0c <multiply_quaternions>

	// apply the feedback on x y z axis if and only if either the feedback is approx 0, or the input value by the user is approx 0.
	// This condition must be met for every axis value
	uint8_t y_condition = fabsf(z_out_body_frame.y) < TOLERANCE || fabsf(input_values[0] < TOLERANCE);
 8003084:	edd7 7a06 	vldr	s15, [r7, #24]
 8003088:	eef0 7ae7 	vabs.f32	s15, s15
 800308c:	ed9f 7a6b 	vldr	s14, [pc, #428]	@ 800323c <calculate_pwm_with_pid+0x32c>
 8003090:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003098:	d408      	bmi.n	80030ac <calculate_pwm_with_pid+0x19c>
 800309a:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 800309e:	ed9f 7a67 	vldr	s14, [pc, #412]	@ 800323c <calculate_pwm_with_pid+0x32c>
 80030a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030aa:	d501      	bpl.n	80030b0 <calculate_pwm_with_pid+0x1a0>
 80030ac:	2301      	movs	r3, #1
 80030ae:	e000      	b.n	80030b2 <calculate_pwm_with_pid+0x1a2>
 80030b0:	2300      	movs	r3, #0
 80030b2:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
	uint8_t x_condition = fabsf(z_out_body_frame.x) < TOLERANCE || fabsf(input_values[1] < TOLERANCE);
 80030b6:	edd7 7a05 	vldr	s15, [r7, #20]
 80030ba:	eef0 7ae7 	vabs.f32	s15, s15
 80030be:	ed9f 7a5f 	vldr	s14, [pc, #380]	@ 800323c <calculate_pwm_with_pid+0x32c>
 80030c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030ca:	d408      	bmi.n	80030de <calculate_pwm_with_pid+0x1ce>
 80030cc:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 80030d0:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 800323c <calculate_pwm_with_pid+0x32c>
 80030d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030dc:	d501      	bpl.n	80030e2 <calculate_pwm_with_pid+0x1d2>
 80030de:	2301      	movs	r3, #1
 80030e0:	e000      	b.n	80030e4 <calculate_pwm_with_pid+0x1d4>
 80030e2:	2300      	movs	r3, #0
 80030e4:	f887 307a 	strb.w	r3, [r7, #122]	@ 0x7a
	uint8_t z_condition = fabsf(z_out_body_frame.z) < TOLERANCE || fabsf(input_values[2] < TOLERANCE);
 80030e8:	edd7 7a07 	vldr	s15, [r7, #28]
 80030ec:	eef0 7ae7 	vabs.f32	s15, s15
 80030f0:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 800323c <calculate_pwm_with_pid+0x32c>
 80030f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030fc:	d408      	bmi.n	8003110 <calculate_pwm_with_pid+0x200>
 80030fe:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8003102:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 800323c <calculate_pwm_with_pid+0x32c>
 8003106:	eef4 7ac7 	vcmpe.f32	s15, s14
 800310a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800310e:	d501      	bpl.n	8003114 <calculate_pwm_with_pid+0x204>
 8003110:	2301      	movs	r3, #1
 8003112:	e000      	b.n	8003116 <calculate_pwm_with_pid+0x206>
 8003114:	2300      	movs	r3, #0
 8003116:	f887 3079 	strb.w	r3, [r7, #121]	@ 0x79

	if (x_condition && y_condition && z_condition)
 800311a:	f897 307a 	ldrb.w	r3, [r7, #122]	@ 0x7a
 800311e:	2b00      	cmp	r3, #0
 8003120:	d01f      	beq.n	8003162 <calculate_pwm_with_pid+0x252>
 8003122:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8003126:	2b00      	cmp	r3, #0
 8003128:	d01b      	beq.n	8003162 <calculate_pwm_with_pid+0x252>
 800312a:	f897 3079 	ldrb.w	r3, [r7, #121]	@ 0x79
 800312e:	2b00      	cmp	r3, #0
 8003130:	d017      	beq.n	8003162 <calculate_pwm_with_pid+0x252>
	{
		input_values[0] += z_out_body_frame.y;
 8003132:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8003136:	edd7 7a06 	vldr	s15, [r7, #24]
 800313a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800313e:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
		input_values[1] += z_out_body_frame.x;
 8003142:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8003146:	edd7 7a05 	vldr	s15, [r7, #20]
 800314a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800314e:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
		input_values[2] += z_out_body_frame.z;
 8003152:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8003156:	edd7 7a07 	vldr	s15, [r7, #28]
 800315a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800315e:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
	}

	// pitch
	if (fabsf(pitch_pid_feedback) < TOLERANCE || fabsf(input_values[3] < TOLERANCE))
 8003162:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8003166:	eef0 7ae7 	vabs.f32	s15, s15
 800316a:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800323c <calculate_pwm_with_pid+0x32c>
 800316e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003172:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003176:	d408      	bmi.n	800318a <calculate_pwm_with_pid+0x27a>
 8003178:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 800317c:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800323c <calculate_pwm_with_pid+0x32c>
 8003180:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003184:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003188:	d507      	bpl.n	800319a <calculate_pwm_with_pid+0x28a>
	{
		input_values[3] += pitch_pid_feedback;
 800318a:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 800318e:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8003192:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003196:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
	}
	// roll
	if (fabsf(roll_pid_feedback) < TOLERANCE || fabsf(input_values[4] < TOLERANCE))
 800319a:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 800319e:	eef0 7ae7 	vabs.f32	s15, s15
 80031a2:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 800323c <calculate_pwm_with_pid+0x32c>
 80031a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031ae:	d408      	bmi.n	80031c2 <calculate_pwm_with_pid+0x2b2>
 80031b0:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 80031b4:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 800323c <calculate_pwm_with_pid+0x32c>
 80031b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031c0:	d507      	bpl.n	80031d2 <calculate_pwm_with_pid+0x2c2>
	{
		input_values[4] += roll_pid_feedback;
 80031c2:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 80031c6:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 80031ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031ce:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
	}
	// yaw
	if (fabsf(yaw_pid_feedback) < TOLERANCE || fabsf(input_values[5] < TOLERANCE))
 80031d2:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 80031d6:	eef0 7ae7 	vabs.f32	s15, s15
 80031da:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800323c <calculate_pwm_with_pid+0x32c>
 80031de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031e6:	d408      	bmi.n	80031fa <calculate_pwm_with_pid+0x2ea>
 80031e8:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 80031ec:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 800323c <calculate_pwm_with_pid+0x32c>
 80031f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031f8:	d507      	bpl.n	800320a <calculate_pwm_with_pid+0x2fa>
	{
		input_values[5] += yaw_pid_feedback;
 80031fa:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 80031fe:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8003202:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003206:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
	}

	uint8_t code = calculate_pwm(&input_values, pwm_output);
 800320a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800320e:	68b9      	ldr	r1, [r7, #8]
 8003210:	4618      	mov	r0, r3
 8003212:	f7ff fad7 	bl	80027c4 <calculate_pwm>
 8003216:	4603      	mov	r3, r0
 8003218:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78
	return code;
 800321c:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
}
 8003220:	4618      	mov	r0, r3
 8003222:	3790      	adds	r7, #144	@ 0x90
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}
 8003228:	2000870c 	.word	0x2000870c
 800322c:	20008730 	.word	0x20008730
 8003230:	20008744 	.word	0x20008744
 8003234:	20008758 	.word	0x20008758
 8003238:	2000871c 	.word	0x2000871c
 800323c:	3d4ccccd 	.word	0x3d4ccccd

08003240 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003240:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003278 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003244:	f7ff f9ca 	bl	80025dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003248:	480c      	ldr	r0, [pc, #48]	@ (800327c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800324a:	490d      	ldr	r1, [pc, #52]	@ (8003280 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800324c:	4a0d      	ldr	r2, [pc, #52]	@ (8003284 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800324e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003250:	e002      	b.n	8003258 <LoopCopyDataInit>

08003252 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003252:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003254:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003256:	3304      	adds	r3, #4

08003258 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003258:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800325a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800325c:	d3f9      	bcc.n	8003252 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800325e:	4a0a      	ldr	r2, [pc, #40]	@ (8003288 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003260:	4c0a      	ldr	r4, [pc, #40]	@ (800328c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003262:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003264:	e001      	b.n	800326a <LoopFillZerobss>

08003266 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003266:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003268:	3204      	adds	r2, #4

0800326a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800326a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800326c:	d3fb      	bcc.n	8003266 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800326e:	f016 f9a7 	bl	80195c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003272:	f7fe fde5 	bl	8001e40 <main>
  bx  lr    
 8003276:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003278:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800327c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003280:	2000081c 	.word	0x2000081c
  ldr r2, =_sidata
 8003284:	0801bcac 	.word	0x0801bcac
  ldr r2, =_sbss
 8003288:	20000820 	.word	0x20000820
  ldr r4, =_ebss
 800328c:	200156b4 	.word	0x200156b4

08003290 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003290:	e7fe      	b.n	8003290 <ADC_IRQHandler>
	...

08003294 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003298:	4b0e      	ldr	r3, [pc, #56]	@ (80032d4 <HAL_Init+0x40>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a0d      	ldr	r2, [pc, #52]	@ (80032d4 <HAL_Init+0x40>)
 800329e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80032a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80032a4:	4b0b      	ldr	r3, [pc, #44]	@ (80032d4 <HAL_Init+0x40>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a0a      	ldr	r2, [pc, #40]	@ (80032d4 <HAL_Init+0x40>)
 80032aa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80032ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80032b0:	4b08      	ldr	r3, [pc, #32]	@ (80032d4 <HAL_Init+0x40>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a07      	ldr	r2, [pc, #28]	@ (80032d4 <HAL_Init+0x40>)
 80032b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032bc:	2003      	movs	r0, #3
 80032be:	f000 f8d8 	bl	8003472 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80032c2:	200f      	movs	r0, #15
 80032c4:	f7ff f808 	bl	80022d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80032c8:	f7fe ffda 	bl	8002280 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80032cc:	2300      	movs	r3, #0
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop
 80032d4:	40023c00 	.word	0x40023c00

080032d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80032d8:	b480      	push	{r7}
 80032da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80032dc:	4b06      	ldr	r3, [pc, #24]	@ (80032f8 <HAL_IncTick+0x20>)
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	461a      	mov	r2, r3
 80032e2:	4b06      	ldr	r3, [pc, #24]	@ (80032fc <HAL_IncTick+0x24>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4413      	add	r3, r2
 80032e8:	4a04      	ldr	r2, [pc, #16]	@ (80032fc <HAL_IncTick+0x24>)
 80032ea:	6013      	str	r3, [r2, #0]
}
 80032ec:	bf00      	nop
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr
 80032f6:	bf00      	nop
 80032f8:	200000cc 	.word	0x200000cc
 80032fc:	2000876c 	.word	0x2000876c

08003300 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003300:	b480      	push	{r7}
 8003302:	af00      	add	r7, sp, #0
  return uwTick;
 8003304:	4b03      	ldr	r3, [pc, #12]	@ (8003314 <HAL_GetTick+0x14>)
 8003306:	681b      	ldr	r3, [r3, #0]
}
 8003308:	4618      	mov	r0, r3
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr
 8003312:	bf00      	nop
 8003314:	2000876c 	.word	0x2000876c

08003318 <__NVIC_SetPriorityGrouping>:
{
 8003318:	b480      	push	{r7}
 800331a:	b085      	sub	sp, #20
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	f003 0307 	and.w	r3, r3, #7
 8003326:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003328:	4b0c      	ldr	r3, [pc, #48]	@ (800335c <__NVIC_SetPriorityGrouping+0x44>)
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800332e:	68ba      	ldr	r2, [r7, #8]
 8003330:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003334:	4013      	ands	r3, r2
 8003336:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003340:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003344:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003348:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800334a:	4a04      	ldr	r2, [pc, #16]	@ (800335c <__NVIC_SetPriorityGrouping+0x44>)
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	60d3      	str	r3, [r2, #12]
}
 8003350:	bf00      	nop
 8003352:	3714      	adds	r7, #20
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr
 800335c:	e000ed00 	.word	0xe000ed00

08003360 <__NVIC_GetPriorityGrouping>:
{
 8003360:	b480      	push	{r7}
 8003362:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003364:	4b04      	ldr	r3, [pc, #16]	@ (8003378 <__NVIC_GetPriorityGrouping+0x18>)
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	0a1b      	lsrs	r3, r3, #8
 800336a:	f003 0307 	and.w	r3, r3, #7
}
 800336e:	4618      	mov	r0, r3
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr
 8003378:	e000ed00 	.word	0xe000ed00

0800337c <__NVIC_EnableIRQ>:
{
 800337c:	b480      	push	{r7}
 800337e:	b083      	sub	sp, #12
 8003380:	af00      	add	r7, sp, #0
 8003382:	4603      	mov	r3, r0
 8003384:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800338a:	2b00      	cmp	r3, #0
 800338c:	db0b      	blt.n	80033a6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800338e:	79fb      	ldrb	r3, [r7, #7]
 8003390:	f003 021f 	and.w	r2, r3, #31
 8003394:	4907      	ldr	r1, [pc, #28]	@ (80033b4 <__NVIC_EnableIRQ+0x38>)
 8003396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800339a:	095b      	lsrs	r3, r3, #5
 800339c:	2001      	movs	r0, #1
 800339e:	fa00 f202 	lsl.w	r2, r0, r2
 80033a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80033a6:	bf00      	nop
 80033a8:	370c      	adds	r7, #12
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr
 80033b2:	bf00      	nop
 80033b4:	e000e100 	.word	0xe000e100

080033b8 <__NVIC_SetPriority>:
{
 80033b8:	b480      	push	{r7}
 80033ba:	b083      	sub	sp, #12
 80033bc:	af00      	add	r7, sp, #0
 80033be:	4603      	mov	r3, r0
 80033c0:	6039      	str	r1, [r7, #0]
 80033c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	db0a      	blt.n	80033e2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	b2da      	uxtb	r2, r3
 80033d0:	490c      	ldr	r1, [pc, #48]	@ (8003404 <__NVIC_SetPriority+0x4c>)
 80033d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033d6:	0112      	lsls	r2, r2, #4
 80033d8:	b2d2      	uxtb	r2, r2
 80033da:	440b      	add	r3, r1
 80033dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80033e0:	e00a      	b.n	80033f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	b2da      	uxtb	r2, r3
 80033e6:	4908      	ldr	r1, [pc, #32]	@ (8003408 <__NVIC_SetPriority+0x50>)
 80033e8:	79fb      	ldrb	r3, [r7, #7]
 80033ea:	f003 030f 	and.w	r3, r3, #15
 80033ee:	3b04      	subs	r3, #4
 80033f0:	0112      	lsls	r2, r2, #4
 80033f2:	b2d2      	uxtb	r2, r2
 80033f4:	440b      	add	r3, r1
 80033f6:	761a      	strb	r2, [r3, #24]
}
 80033f8:	bf00      	nop
 80033fa:	370c      	adds	r7, #12
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr
 8003404:	e000e100 	.word	0xe000e100
 8003408:	e000ed00 	.word	0xe000ed00

0800340c <NVIC_EncodePriority>:
{
 800340c:	b480      	push	{r7}
 800340e:	b089      	sub	sp, #36	@ 0x24
 8003410:	af00      	add	r7, sp, #0
 8003412:	60f8      	str	r0, [r7, #12]
 8003414:	60b9      	str	r1, [r7, #8]
 8003416:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	f003 0307 	and.w	r3, r3, #7
 800341e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003420:	69fb      	ldr	r3, [r7, #28]
 8003422:	f1c3 0307 	rsb	r3, r3, #7
 8003426:	2b04      	cmp	r3, #4
 8003428:	bf28      	it	cs
 800342a:	2304      	movcs	r3, #4
 800342c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	3304      	adds	r3, #4
 8003432:	2b06      	cmp	r3, #6
 8003434:	d902      	bls.n	800343c <NVIC_EncodePriority+0x30>
 8003436:	69fb      	ldr	r3, [r7, #28]
 8003438:	3b03      	subs	r3, #3
 800343a:	e000      	b.n	800343e <NVIC_EncodePriority+0x32>
 800343c:	2300      	movs	r3, #0
 800343e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003440:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003444:	69bb      	ldr	r3, [r7, #24]
 8003446:	fa02 f303 	lsl.w	r3, r2, r3
 800344a:	43da      	mvns	r2, r3
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	401a      	ands	r2, r3
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003454:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	fa01 f303 	lsl.w	r3, r1, r3
 800345e:	43d9      	mvns	r1, r3
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003464:	4313      	orrs	r3, r2
}
 8003466:	4618      	mov	r0, r3
 8003468:	3724      	adds	r7, #36	@ 0x24
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr

08003472 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003472:	b580      	push	{r7, lr}
 8003474:	b082      	sub	sp, #8
 8003476:	af00      	add	r7, sp, #0
 8003478:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f7ff ff4c 	bl	8003318 <__NVIC_SetPriorityGrouping>
}
 8003480:	bf00      	nop
 8003482:	3708      	adds	r7, #8
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}

08003488 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003488:	b580      	push	{r7, lr}
 800348a:	b086      	sub	sp, #24
 800348c:	af00      	add	r7, sp, #0
 800348e:	4603      	mov	r3, r0
 8003490:	60b9      	str	r1, [r7, #8]
 8003492:	607a      	str	r2, [r7, #4]
 8003494:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003496:	2300      	movs	r3, #0
 8003498:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800349a:	f7ff ff61 	bl	8003360 <__NVIC_GetPriorityGrouping>
 800349e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	68b9      	ldr	r1, [r7, #8]
 80034a4:	6978      	ldr	r0, [r7, #20]
 80034a6:	f7ff ffb1 	bl	800340c <NVIC_EncodePriority>
 80034aa:	4602      	mov	r2, r0
 80034ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034b0:	4611      	mov	r1, r2
 80034b2:	4618      	mov	r0, r3
 80034b4:	f7ff ff80 	bl	80033b8 <__NVIC_SetPriority>
}
 80034b8:	bf00      	nop
 80034ba:	3718      	adds	r7, #24
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}

080034c0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b082      	sub	sp, #8
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	4603      	mov	r3, r0
 80034c8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034ce:	4618      	mov	r0, r3
 80034d0:	f7ff ff54 	bl	800337c <__NVIC_EnableIRQ>
}
 80034d4:	bf00      	nop
 80034d6:	3708      	adds	r7, #8
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}

080034dc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b086      	sub	sp, #24
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80034e4:	2300      	movs	r3, #0
 80034e6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80034e8:	f7ff ff0a 	bl	8003300 <HAL_GetTick>
 80034ec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d101      	bne.n	80034f8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e099      	b.n	800362c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2202      	movs	r2, #2
 80034fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f022 0201 	bic.w	r2, r2, #1
 8003516:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003518:	e00f      	b.n	800353a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800351a:	f7ff fef1 	bl	8003300 <HAL_GetTick>
 800351e:	4602      	mov	r2, r0
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	2b05      	cmp	r3, #5
 8003526:	d908      	bls.n	800353a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2220      	movs	r2, #32
 800352c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2203      	movs	r2, #3
 8003532:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003536:	2303      	movs	r3, #3
 8003538:	e078      	b.n	800362c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 0301 	and.w	r3, r3, #1
 8003544:	2b00      	cmp	r3, #0
 8003546:	d1e8      	bne.n	800351a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003550:	697a      	ldr	r2, [r7, #20]
 8003552:	4b38      	ldr	r3, [pc, #224]	@ (8003634 <HAL_DMA_Init+0x158>)
 8003554:	4013      	ands	r3, r2
 8003556:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	685a      	ldr	r2, [r3, #4]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003566:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	691b      	ldr	r3, [r3, #16]
 800356c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003572:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	699b      	ldr	r3, [r3, #24]
 8003578:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800357e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6a1b      	ldr	r3, [r3, #32]
 8003584:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003586:	697a      	ldr	r2, [r7, #20]
 8003588:	4313      	orrs	r3, r2
 800358a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003590:	2b04      	cmp	r3, #4
 8003592:	d107      	bne.n	80035a4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800359c:	4313      	orrs	r3, r2
 800359e:	697a      	ldr	r2, [r7, #20]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	697a      	ldr	r2, [r7, #20]
 80035aa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	695b      	ldr	r3, [r3, #20]
 80035b2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	f023 0307 	bic.w	r3, r3, #7
 80035ba:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035c0:	697a      	ldr	r2, [r7, #20]
 80035c2:	4313      	orrs	r3, r2
 80035c4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ca:	2b04      	cmp	r3, #4
 80035cc:	d117      	bne.n	80035fe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035d2:	697a      	ldr	r2, [r7, #20]
 80035d4:	4313      	orrs	r3, r2
 80035d6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d00e      	beq.n	80035fe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f000 fb01 	bl	8003be8 <DMA_CheckFifoParam>
 80035e6:	4603      	mov	r3, r0
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d008      	beq.n	80035fe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2240      	movs	r2, #64	@ 0x40
 80035f0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2201      	movs	r2, #1
 80035f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80035fa:	2301      	movs	r3, #1
 80035fc:	e016      	b.n	800362c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	697a      	ldr	r2, [r7, #20]
 8003604:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f000 fab8 	bl	8003b7c <DMA_CalcBaseAndBitshift>
 800360c:	4603      	mov	r3, r0
 800360e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003614:	223f      	movs	r2, #63	@ 0x3f
 8003616:	409a      	lsls	r2, r3
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2200      	movs	r2, #0
 8003620:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2201      	movs	r2, #1
 8003626:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800362a:	2300      	movs	r3, #0
}
 800362c:	4618      	mov	r0, r3
 800362e:	3718      	adds	r7, #24
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}
 8003634:	f010803f 	.word	0xf010803f

08003638 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b086      	sub	sp, #24
 800363c:	af00      	add	r7, sp, #0
 800363e:	60f8      	str	r0, [r7, #12]
 8003640:	60b9      	str	r1, [r7, #8]
 8003642:	607a      	str	r2, [r7, #4]
 8003644:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003646:	2300      	movs	r3, #0
 8003648:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800364e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003656:	2b01      	cmp	r3, #1
 8003658:	d101      	bne.n	800365e <HAL_DMA_Start_IT+0x26>
 800365a:	2302      	movs	r3, #2
 800365c:	e040      	b.n	80036e0 <HAL_DMA_Start_IT+0xa8>
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2201      	movs	r2, #1
 8003662:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800366c:	b2db      	uxtb	r3, r3
 800366e:	2b01      	cmp	r3, #1
 8003670:	d12f      	bne.n	80036d2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2202      	movs	r2, #2
 8003676:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2200      	movs	r2, #0
 800367e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	687a      	ldr	r2, [r7, #4]
 8003684:	68b9      	ldr	r1, [r7, #8]
 8003686:	68f8      	ldr	r0, [r7, #12]
 8003688:	f000 fa4a 	bl	8003b20 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003690:	223f      	movs	r2, #63	@ 0x3f
 8003692:	409a      	lsls	r2, r3
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f042 0216 	orr.w	r2, r2, #22
 80036a6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d007      	beq.n	80036c0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f042 0208 	orr.w	r2, r2, #8
 80036be:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f042 0201 	orr.w	r2, r2, #1
 80036ce:	601a      	str	r2, [r3, #0]
 80036d0:	e005      	b.n	80036de <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2200      	movs	r2, #0
 80036d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80036da:	2302      	movs	r3, #2
 80036dc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80036de:	7dfb      	ldrb	r3, [r7, #23]
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3718      	adds	r7, #24
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}

080036e8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b084      	sub	sp, #16
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036f4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80036f6:	f7ff fe03 	bl	8003300 <HAL_GetTick>
 80036fa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003702:	b2db      	uxtb	r3, r3
 8003704:	2b02      	cmp	r3, #2
 8003706:	d008      	beq.n	800371a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2280      	movs	r2, #128	@ 0x80
 800370c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e052      	b.n	80037c0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f022 0216 	bic.w	r2, r2, #22
 8003728:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	695a      	ldr	r2, [r3, #20]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003738:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800373e:	2b00      	cmp	r3, #0
 8003740:	d103      	bne.n	800374a <HAL_DMA_Abort+0x62>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003746:	2b00      	cmp	r3, #0
 8003748:	d007      	beq.n	800375a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f022 0208 	bic.w	r2, r2, #8
 8003758:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f022 0201 	bic.w	r2, r2, #1
 8003768:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800376a:	e013      	b.n	8003794 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800376c:	f7ff fdc8 	bl	8003300 <HAL_GetTick>
 8003770:	4602      	mov	r2, r0
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	2b05      	cmp	r3, #5
 8003778:	d90c      	bls.n	8003794 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2220      	movs	r2, #32
 800377e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2203      	movs	r2, #3
 8003784:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003790:	2303      	movs	r3, #3
 8003792:	e015      	b.n	80037c0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 0301 	and.w	r3, r3, #1
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d1e4      	bne.n	800376c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037a6:	223f      	movs	r2, #63	@ 0x3f
 80037a8:	409a      	lsls	r2, r3
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2201      	movs	r2, #1
 80037b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80037be:	2300      	movs	r3, #0
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3710      	adds	r7, #16
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}

080037c8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b083      	sub	sp, #12
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	2b02      	cmp	r3, #2
 80037da:	d004      	beq.n	80037e6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2280      	movs	r2, #128	@ 0x80
 80037e0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e00c      	b.n	8003800 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2205      	movs	r2, #5
 80037ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f022 0201 	bic.w	r2, r2, #1
 80037fc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80037fe:	2300      	movs	r3, #0
}
 8003800:	4618      	mov	r0, r3
 8003802:	370c      	adds	r7, #12
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr

0800380c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b086      	sub	sp, #24
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003814:	2300      	movs	r3, #0
 8003816:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003818:	4b8e      	ldr	r3, [pc, #568]	@ (8003a54 <HAL_DMA_IRQHandler+0x248>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a8e      	ldr	r2, [pc, #568]	@ (8003a58 <HAL_DMA_IRQHandler+0x24c>)
 800381e:	fba2 2303 	umull	r2, r3, r2, r3
 8003822:	0a9b      	lsrs	r3, r3, #10
 8003824:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800382a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003836:	2208      	movs	r2, #8
 8003838:	409a      	lsls	r2, r3
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	4013      	ands	r3, r2
 800383e:	2b00      	cmp	r3, #0
 8003840:	d01a      	beq.n	8003878 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 0304 	and.w	r3, r3, #4
 800384c:	2b00      	cmp	r3, #0
 800384e:	d013      	beq.n	8003878 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f022 0204 	bic.w	r2, r2, #4
 800385e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003864:	2208      	movs	r2, #8
 8003866:	409a      	lsls	r2, r3
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003870:	f043 0201 	orr.w	r2, r3, #1
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800387c:	2201      	movs	r2, #1
 800387e:	409a      	lsls	r2, r3
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	4013      	ands	r3, r2
 8003884:	2b00      	cmp	r3, #0
 8003886:	d012      	beq.n	80038ae <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	695b      	ldr	r3, [r3, #20]
 800388e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003892:	2b00      	cmp	r3, #0
 8003894:	d00b      	beq.n	80038ae <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800389a:	2201      	movs	r2, #1
 800389c:	409a      	lsls	r2, r3
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038a6:	f043 0202 	orr.w	r2, r3, #2
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038b2:	2204      	movs	r2, #4
 80038b4:	409a      	lsls	r2, r3
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	4013      	ands	r3, r2
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d012      	beq.n	80038e4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 0302 	and.w	r3, r3, #2
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d00b      	beq.n	80038e4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038d0:	2204      	movs	r2, #4
 80038d2:	409a      	lsls	r2, r3
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038dc:	f043 0204 	orr.w	r2, r3, #4
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038e8:	2210      	movs	r2, #16
 80038ea:	409a      	lsls	r2, r3
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	4013      	ands	r3, r2
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d043      	beq.n	800397c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 0308 	and.w	r3, r3, #8
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d03c      	beq.n	800397c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003906:	2210      	movs	r2, #16
 8003908:	409a      	lsls	r2, r3
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003918:	2b00      	cmp	r3, #0
 800391a:	d018      	beq.n	800394e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003926:	2b00      	cmp	r3, #0
 8003928:	d108      	bne.n	800393c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800392e:	2b00      	cmp	r3, #0
 8003930:	d024      	beq.n	800397c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	4798      	blx	r3
 800393a:	e01f      	b.n	800397c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003940:	2b00      	cmp	r3, #0
 8003942:	d01b      	beq.n	800397c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	4798      	blx	r3
 800394c:	e016      	b.n	800397c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003958:	2b00      	cmp	r3, #0
 800395a:	d107      	bne.n	800396c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f022 0208 	bic.w	r2, r2, #8
 800396a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003970:	2b00      	cmp	r3, #0
 8003972:	d003      	beq.n	800397c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003980:	2220      	movs	r2, #32
 8003982:	409a      	lsls	r2, r3
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	4013      	ands	r3, r2
 8003988:	2b00      	cmp	r3, #0
 800398a:	f000 808f 	beq.w	8003aac <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 0310 	and.w	r3, r3, #16
 8003998:	2b00      	cmp	r3, #0
 800399a:	f000 8087 	beq.w	8003aac <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039a2:	2220      	movs	r2, #32
 80039a4:	409a      	lsls	r2, r3
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	2b05      	cmp	r3, #5
 80039b4:	d136      	bne.n	8003a24 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f022 0216 	bic.w	r2, r2, #22
 80039c4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	695a      	ldr	r2, [r3, #20]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80039d4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d103      	bne.n	80039e6 <HAL_DMA_IRQHandler+0x1da>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d007      	beq.n	80039f6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f022 0208 	bic.w	r2, r2, #8
 80039f4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039fa:	223f      	movs	r2, #63	@ 0x3f
 80039fc:	409a      	lsls	r2, r3
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2201      	movs	r2, #1
 8003a06:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d07e      	beq.n	8003b18 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	4798      	blx	r3
        }
        return;
 8003a22:	e079      	b.n	8003b18 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d01d      	beq.n	8003a6e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d10d      	bne.n	8003a5c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d031      	beq.n	8003aac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	4798      	blx	r3
 8003a50:	e02c      	b.n	8003aac <HAL_DMA_IRQHandler+0x2a0>
 8003a52:	bf00      	nop
 8003a54:	20000004 	.word	0x20000004
 8003a58:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d023      	beq.n	8003aac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	4798      	blx	r3
 8003a6c:	e01e      	b.n	8003aac <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d10f      	bne.n	8003a9c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f022 0210 	bic.w	r2, r2, #16
 8003a8a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2200      	movs	r2, #0
 8003a98:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d003      	beq.n	8003aac <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d032      	beq.n	8003b1a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ab8:	f003 0301 	and.w	r3, r3, #1
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d022      	beq.n	8003b06 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2205      	movs	r2, #5
 8003ac4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f022 0201 	bic.w	r2, r2, #1
 8003ad6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	3301      	adds	r3, #1
 8003adc:	60bb      	str	r3, [r7, #8]
 8003ade:	697a      	ldr	r2, [r7, #20]
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d307      	bcc.n	8003af4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0301 	and.w	r3, r3, #1
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d1f2      	bne.n	8003ad8 <HAL_DMA_IRQHandler+0x2cc>
 8003af2:	e000      	b.n	8003af6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003af4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2201      	movs	r2, #1
 8003afa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2200      	movs	r2, #0
 8003b02:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d005      	beq.n	8003b1a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	4798      	blx	r3
 8003b16:	e000      	b.n	8003b1a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003b18:	bf00      	nop
    }
  }
}
 8003b1a:	3718      	adds	r7, #24
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}

08003b20 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b085      	sub	sp, #20
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	60f8      	str	r0, [r7, #12]
 8003b28:	60b9      	str	r1, [r7, #8]
 8003b2a:	607a      	str	r2, [r7, #4]
 8003b2c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003b3c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	683a      	ldr	r2, [r7, #0]
 8003b44:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	2b40      	cmp	r3, #64	@ 0x40
 8003b4c:	d108      	bne.n	8003b60 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	687a      	ldr	r2, [r7, #4]
 8003b54:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	68ba      	ldr	r2, [r7, #8]
 8003b5c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003b5e:	e007      	b.n	8003b70 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	68ba      	ldr	r2, [r7, #8]
 8003b66:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	687a      	ldr	r2, [r7, #4]
 8003b6e:	60da      	str	r2, [r3, #12]
}
 8003b70:	bf00      	nop
 8003b72:	3714      	adds	r7, #20
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr

08003b7c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b085      	sub	sp, #20
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	3b10      	subs	r3, #16
 8003b8c:	4a14      	ldr	r2, [pc, #80]	@ (8003be0 <DMA_CalcBaseAndBitshift+0x64>)
 8003b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b92:	091b      	lsrs	r3, r3, #4
 8003b94:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003b96:	4a13      	ldr	r2, [pc, #76]	@ (8003be4 <DMA_CalcBaseAndBitshift+0x68>)
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	4413      	add	r3, r2
 8003b9c:	781b      	ldrb	r3, [r3, #0]
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2b03      	cmp	r3, #3
 8003ba8:	d909      	bls.n	8003bbe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003bb2:	f023 0303 	bic.w	r3, r3, #3
 8003bb6:	1d1a      	adds	r2, r3, #4
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	659a      	str	r2, [r3, #88]	@ 0x58
 8003bbc:	e007      	b.n	8003bce <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003bc6:	f023 0303 	bic.w	r3, r3, #3
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3714      	adds	r7, #20
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bdc:	4770      	bx	lr
 8003bde:	bf00      	nop
 8003be0:	aaaaaaab 	.word	0xaaaaaaab
 8003be4:	0801a96c 	.word	0x0801a96c

08003be8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b085      	sub	sp, #20
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bf8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	699b      	ldr	r3, [r3, #24]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d11f      	bne.n	8003c42 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	2b03      	cmp	r3, #3
 8003c06:	d856      	bhi.n	8003cb6 <DMA_CheckFifoParam+0xce>
 8003c08:	a201      	add	r2, pc, #4	@ (adr r2, 8003c10 <DMA_CheckFifoParam+0x28>)
 8003c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c0e:	bf00      	nop
 8003c10:	08003c21 	.word	0x08003c21
 8003c14:	08003c33 	.word	0x08003c33
 8003c18:	08003c21 	.word	0x08003c21
 8003c1c:	08003cb7 	.word	0x08003cb7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c24:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d046      	beq.n	8003cba <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c30:	e043      	b.n	8003cba <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c36:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003c3a:	d140      	bne.n	8003cbe <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c40:	e03d      	b.n	8003cbe <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	699b      	ldr	r3, [r3, #24]
 8003c46:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c4a:	d121      	bne.n	8003c90 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	2b03      	cmp	r3, #3
 8003c50:	d837      	bhi.n	8003cc2 <DMA_CheckFifoParam+0xda>
 8003c52:	a201      	add	r2, pc, #4	@ (adr r2, 8003c58 <DMA_CheckFifoParam+0x70>)
 8003c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c58:	08003c69 	.word	0x08003c69
 8003c5c:	08003c6f 	.word	0x08003c6f
 8003c60:	08003c69 	.word	0x08003c69
 8003c64:	08003c81 	.word	0x08003c81
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	73fb      	strb	r3, [r7, #15]
      break;
 8003c6c:	e030      	b.n	8003cd0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c72:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d025      	beq.n	8003cc6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c7e:	e022      	b.n	8003cc6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c84:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003c88:	d11f      	bne.n	8003cca <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003c8e:	e01c      	b.n	8003cca <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	2b02      	cmp	r3, #2
 8003c94:	d903      	bls.n	8003c9e <DMA_CheckFifoParam+0xb6>
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	2b03      	cmp	r3, #3
 8003c9a:	d003      	beq.n	8003ca4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003c9c:	e018      	b.n	8003cd0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	73fb      	strb	r3, [r7, #15]
      break;
 8003ca2:	e015      	b.n	8003cd0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ca8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d00e      	beq.n	8003cce <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	73fb      	strb	r3, [r7, #15]
      break;
 8003cb4:	e00b      	b.n	8003cce <DMA_CheckFifoParam+0xe6>
      break;
 8003cb6:	bf00      	nop
 8003cb8:	e00a      	b.n	8003cd0 <DMA_CheckFifoParam+0xe8>
      break;
 8003cba:	bf00      	nop
 8003cbc:	e008      	b.n	8003cd0 <DMA_CheckFifoParam+0xe8>
      break;
 8003cbe:	bf00      	nop
 8003cc0:	e006      	b.n	8003cd0 <DMA_CheckFifoParam+0xe8>
      break;
 8003cc2:	bf00      	nop
 8003cc4:	e004      	b.n	8003cd0 <DMA_CheckFifoParam+0xe8>
      break;
 8003cc6:	bf00      	nop
 8003cc8:	e002      	b.n	8003cd0 <DMA_CheckFifoParam+0xe8>
      break;   
 8003cca:	bf00      	nop
 8003ccc:	e000      	b.n	8003cd0 <DMA_CheckFifoParam+0xe8>
      break;
 8003cce:	bf00      	nop
    }
  } 
  
  return status; 
 8003cd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3714      	adds	r7, #20
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr
 8003cde:	bf00      	nop

08003ce0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b089      	sub	sp, #36	@ 0x24
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
 8003ce8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003cea:	2300      	movs	r3, #0
 8003cec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	61fb      	str	r3, [r7, #28]
 8003cfa:	e177      	b.n	8003fec <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	69fb      	ldr	r3, [r7, #28]
 8003d00:	fa02 f303 	lsl.w	r3, r2, r3
 8003d04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	697a      	ldr	r2, [r7, #20]
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003d10:	693a      	ldr	r2, [r7, #16]
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	429a      	cmp	r2, r3
 8003d16:	f040 8166 	bne.w	8003fe6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	f003 0303 	and.w	r3, r3, #3
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d005      	beq.n	8003d32 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d2e:	2b02      	cmp	r3, #2
 8003d30:	d130      	bne.n	8003d94 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003d38:	69fb      	ldr	r3, [r7, #28]
 8003d3a:	005b      	lsls	r3, r3, #1
 8003d3c:	2203      	movs	r2, #3
 8003d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d42:	43db      	mvns	r3, r3
 8003d44:	69ba      	ldr	r2, [r7, #24]
 8003d46:	4013      	ands	r3, r2
 8003d48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	68da      	ldr	r2, [r3, #12]
 8003d4e:	69fb      	ldr	r3, [r7, #28]
 8003d50:	005b      	lsls	r3, r3, #1
 8003d52:	fa02 f303 	lsl.w	r3, r2, r3
 8003d56:	69ba      	ldr	r2, [r7, #24]
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	69ba      	ldr	r2, [r7, #24]
 8003d60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d68:	2201      	movs	r2, #1
 8003d6a:	69fb      	ldr	r3, [r7, #28]
 8003d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d70:	43db      	mvns	r3, r3
 8003d72:	69ba      	ldr	r2, [r7, #24]
 8003d74:	4013      	ands	r3, r2
 8003d76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	091b      	lsrs	r3, r3, #4
 8003d7e:	f003 0201 	and.w	r2, r3, #1
 8003d82:	69fb      	ldr	r3, [r7, #28]
 8003d84:	fa02 f303 	lsl.w	r3, r2, r3
 8003d88:	69ba      	ldr	r2, [r7, #24]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	69ba      	ldr	r2, [r7, #24]
 8003d92:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	f003 0303 	and.w	r3, r3, #3
 8003d9c:	2b03      	cmp	r3, #3
 8003d9e:	d017      	beq.n	8003dd0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003da6:	69fb      	ldr	r3, [r7, #28]
 8003da8:	005b      	lsls	r3, r3, #1
 8003daa:	2203      	movs	r2, #3
 8003dac:	fa02 f303 	lsl.w	r3, r2, r3
 8003db0:	43db      	mvns	r3, r3
 8003db2:	69ba      	ldr	r2, [r7, #24]
 8003db4:	4013      	ands	r3, r2
 8003db6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	689a      	ldr	r2, [r3, #8]
 8003dbc:	69fb      	ldr	r3, [r7, #28]
 8003dbe:	005b      	lsls	r3, r3, #1
 8003dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc4:	69ba      	ldr	r2, [r7, #24]
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	69ba      	ldr	r2, [r7, #24]
 8003dce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	f003 0303 	and.w	r3, r3, #3
 8003dd8:	2b02      	cmp	r3, #2
 8003dda:	d123      	bne.n	8003e24 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003ddc:	69fb      	ldr	r3, [r7, #28]
 8003dde:	08da      	lsrs	r2, r3, #3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	3208      	adds	r2, #8
 8003de4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003de8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003dea:	69fb      	ldr	r3, [r7, #28]
 8003dec:	f003 0307 	and.w	r3, r3, #7
 8003df0:	009b      	lsls	r3, r3, #2
 8003df2:	220f      	movs	r2, #15
 8003df4:	fa02 f303 	lsl.w	r3, r2, r3
 8003df8:	43db      	mvns	r3, r3
 8003dfa:	69ba      	ldr	r2, [r7, #24]
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	691a      	ldr	r2, [r3, #16]
 8003e04:	69fb      	ldr	r3, [r7, #28]
 8003e06:	f003 0307 	and.w	r3, r3, #7
 8003e0a:	009b      	lsls	r3, r3, #2
 8003e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e10:	69ba      	ldr	r2, [r7, #24]
 8003e12:	4313      	orrs	r3, r2
 8003e14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003e16:	69fb      	ldr	r3, [r7, #28]
 8003e18:	08da      	lsrs	r2, r3, #3
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	3208      	adds	r2, #8
 8003e1e:	69b9      	ldr	r1, [r7, #24]
 8003e20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003e2a:	69fb      	ldr	r3, [r7, #28]
 8003e2c:	005b      	lsls	r3, r3, #1
 8003e2e:	2203      	movs	r2, #3
 8003e30:	fa02 f303 	lsl.w	r3, r2, r3
 8003e34:	43db      	mvns	r3, r3
 8003e36:	69ba      	ldr	r2, [r7, #24]
 8003e38:	4013      	ands	r3, r2
 8003e3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	f003 0203 	and.w	r2, r3, #3
 8003e44:	69fb      	ldr	r3, [r7, #28]
 8003e46:	005b      	lsls	r3, r3, #1
 8003e48:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4c:	69ba      	ldr	r2, [r7, #24]
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	69ba      	ldr	r2, [r7, #24]
 8003e56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	f000 80c0 	beq.w	8003fe6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e66:	2300      	movs	r3, #0
 8003e68:	60fb      	str	r3, [r7, #12]
 8003e6a:	4b66      	ldr	r3, [pc, #408]	@ (8004004 <HAL_GPIO_Init+0x324>)
 8003e6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e6e:	4a65      	ldr	r2, [pc, #404]	@ (8004004 <HAL_GPIO_Init+0x324>)
 8003e70:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003e74:	6453      	str	r3, [r2, #68]	@ 0x44
 8003e76:	4b63      	ldr	r3, [pc, #396]	@ (8004004 <HAL_GPIO_Init+0x324>)
 8003e78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e7e:	60fb      	str	r3, [r7, #12]
 8003e80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003e82:	4a61      	ldr	r2, [pc, #388]	@ (8004008 <HAL_GPIO_Init+0x328>)
 8003e84:	69fb      	ldr	r3, [r7, #28]
 8003e86:	089b      	lsrs	r3, r3, #2
 8003e88:	3302      	adds	r3, #2
 8003e8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003e90:	69fb      	ldr	r3, [r7, #28]
 8003e92:	f003 0303 	and.w	r3, r3, #3
 8003e96:	009b      	lsls	r3, r3, #2
 8003e98:	220f      	movs	r2, #15
 8003e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e9e:	43db      	mvns	r3, r3
 8003ea0:	69ba      	ldr	r2, [r7, #24]
 8003ea2:	4013      	ands	r3, r2
 8003ea4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4a58      	ldr	r2, [pc, #352]	@ (800400c <HAL_GPIO_Init+0x32c>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d037      	beq.n	8003f1e <HAL_GPIO_Init+0x23e>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4a57      	ldr	r2, [pc, #348]	@ (8004010 <HAL_GPIO_Init+0x330>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d031      	beq.n	8003f1a <HAL_GPIO_Init+0x23a>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	4a56      	ldr	r2, [pc, #344]	@ (8004014 <HAL_GPIO_Init+0x334>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d02b      	beq.n	8003f16 <HAL_GPIO_Init+0x236>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	4a55      	ldr	r2, [pc, #340]	@ (8004018 <HAL_GPIO_Init+0x338>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d025      	beq.n	8003f12 <HAL_GPIO_Init+0x232>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	4a54      	ldr	r2, [pc, #336]	@ (800401c <HAL_GPIO_Init+0x33c>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d01f      	beq.n	8003f0e <HAL_GPIO_Init+0x22e>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	4a53      	ldr	r2, [pc, #332]	@ (8004020 <HAL_GPIO_Init+0x340>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d019      	beq.n	8003f0a <HAL_GPIO_Init+0x22a>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	4a52      	ldr	r2, [pc, #328]	@ (8004024 <HAL_GPIO_Init+0x344>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d013      	beq.n	8003f06 <HAL_GPIO_Init+0x226>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4a51      	ldr	r2, [pc, #324]	@ (8004028 <HAL_GPIO_Init+0x348>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d00d      	beq.n	8003f02 <HAL_GPIO_Init+0x222>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a50      	ldr	r2, [pc, #320]	@ (800402c <HAL_GPIO_Init+0x34c>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d007      	beq.n	8003efe <HAL_GPIO_Init+0x21e>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a4f      	ldr	r2, [pc, #316]	@ (8004030 <HAL_GPIO_Init+0x350>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d101      	bne.n	8003efa <HAL_GPIO_Init+0x21a>
 8003ef6:	2309      	movs	r3, #9
 8003ef8:	e012      	b.n	8003f20 <HAL_GPIO_Init+0x240>
 8003efa:	230a      	movs	r3, #10
 8003efc:	e010      	b.n	8003f20 <HAL_GPIO_Init+0x240>
 8003efe:	2308      	movs	r3, #8
 8003f00:	e00e      	b.n	8003f20 <HAL_GPIO_Init+0x240>
 8003f02:	2307      	movs	r3, #7
 8003f04:	e00c      	b.n	8003f20 <HAL_GPIO_Init+0x240>
 8003f06:	2306      	movs	r3, #6
 8003f08:	e00a      	b.n	8003f20 <HAL_GPIO_Init+0x240>
 8003f0a:	2305      	movs	r3, #5
 8003f0c:	e008      	b.n	8003f20 <HAL_GPIO_Init+0x240>
 8003f0e:	2304      	movs	r3, #4
 8003f10:	e006      	b.n	8003f20 <HAL_GPIO_Init+0x240>
 8003f12:	2303      	movs	r3, #3
 8003f14:	e004      	b.n	8003f20 <HAL_GPIO_Init+0x240>
 8003f16:	2302      	movs	r3, #2
 8003f18:	e002      	b.n	8003f20 <HAL_GPIO_Init+0x240>
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e000      	b.n	8003f20 <HAL_GPIO_Init+0x240>
 8003f1e:	2300      	movs	r3, #0
 8003f20:	69fa      	ldr	r2, [r7, #28]
 8003f22:	f002 0203 	and.w	r2, r2, #3
 8003f26:	0092      	lsls	r2, r2, #2
 8003f28:	4093      	lsls	r3, r2
 8003f2a:	69ba      	ldr	r2, [r7, #24]
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003f30:	4935      	ldr	r1, [pc, #212]	@ (8004008 <HAL_GPIO_Init+0x328>)
 8003f32:	69fb      	ldr	r3, [r7, #28]
 8003f34:	089b      	lsrs	r3, r3, #2
 8003f36:	3302      	adds	r3, #2
 8003f38:	69ba      	ldr	r2, [r7, #24]
 8003f3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f3e:	4b3d      	ldr	r3, [pc, #244]	@ (8004034 <HAL_GPIO_Init+0x354>)
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	43db      	mvns	r3, r3
 8003f48:	69ba      	ldr	r2, [r7, #24]
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d003      	beq.n	8003f62 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003f5a:	69ba      	ldr	r2, [r7, #24]
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003f62:	4a34      	ldr	r2, [pc, #208]	@ (8004034 <HAL_GPIO_Init+0x354>)
 8003f64:	69bb      	ldr	r3, [r7, #24]
 8003f66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003f68:	4b32      	ldr	r3, [pc, #200]	@ (8004034 <HAL_GPIO_Init+0x354>)
 8003f6a:	68db      	ldr	r3, [r3, #12]
 8003f6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	43db      	mvns	r3, r3
 8003f72:	69ba      	ldr	r2, [r7, #24]
 8003f74:	4013      	ands	r3, r2
 8003f76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d003      	beq.n	8003f8c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003f84:	69ba      	ldr	r2, [r7, #24]
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003f8c:	4a29      	ldr	r2, [pc, #164]	@ (8004034 <HAL_GPIO_Init+0x354>)
 8003f8e:	69bb      	ldr	r3, [r7, #24]
 8003f90:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003f92:	4b28      	ldr	r3, [pc, #160]	@ (8004034 <HAL_GPIO_Init+0x354>)
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	43db      	mvns	r3, r3
 8003f9c:	69ba      	ldr	r2, [r7, #24]
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d003      	beq.n	8003fb6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003fae:	69ba      	ldr	r2, [r7, #24]
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003fb6:	4a1f      	ldr	r2, [pc, #124]	@ (8004034 <HAL_GPIO_Init+0x354>)
 8003fb8:	69bb      	ldr	r3, [r7, #24]
 8003fba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003fbc:	4b1d      	ldr	r3, [pc, #116]	@ (8004034 <HAL_GPIO_Init+0x354>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	43db      	mvns	r3, r3
 8003fc6:	69ba      	ldr	r2, [r7, #24]
 8003fc8:	4013      	ands	r3, r2
 8003fca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d003      	beq.n	8003fe0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003fd8:	69ba      	ldr	r2, [r7, #24]
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003fe0:	4a14      	ldr	r2, [pc, #80]	@ (8004034 <HAL_GPIO_Init+0x354>)
 8003fe2:	69bb      	ldr	r3, [r7, #24]
 8003fe4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003fe6:	69fb      	ldr	r3, [r7, #28]
 8003fe8:	3301      	adds	r3, #1
 8003fea:	61fb      	str	r3, [r7, #28]
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	2b0f      	cmp	r3, #15
 8003ff0:	f67f ae84 	bls.w	8003cfc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003ff4:	bf00      	nop
 8003ff6:	bf00      	nop
 8003ff8:	3724      	adds	r7, #36	@ 0x24
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr
 8004002:	bf00      	nop
 8004004:	40023800 	.word	0x40023800
 8004008:	40013800 	.word	0x40013800
 800400c:	40020000 	.word	0x40020000
 8004010:	40020400 	.word	0x40020400
 8004014:	40020800 	.word	0x40020800
 8004018:	40020c00 	.word	0x40020c00
 800401c:	40021000 	.word	0x40021000
 8004020:	40021400 	.word	0x40021400
 8004024:	40021800 	.word	0x40021800
 8004028:	40021c00 	.word	0x40021c00
 800402c:	40022000 	.word	0x40022000
 8004030:	40022400 	.word	0x40022400
 8004034:	40013c00 	.word	0x40013c00

08004038 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004038:	b480      	push	{r7}
 800403a:	b083      	sub	sp, #12
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
 8004040:	460b      	mov	r3, r1
 8004042:	807b      	strh	r3, [r7, #2]
 8004044:	4613      	mov	r3, r2
 8004046:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004048:	787b      	ldrb	r3, [r7, #1]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d003      	beq.n	8004056 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800404e:	887a      	ldrh	r2, [r7, #2]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004054:	e003      	b.n	800405e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004056:	887b      	ldrh	r3, [r7, #2]
 8004058:	041a      	lsls	r2, r3, #16
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	619a      	str	r2, [r3, #24]
}
 800405e:	bf00      	nop
 8004060:	370c      	adds	r7, #12
 8004062:	46bd      	mov	sp, r7
 8004064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004068:	4770      	bx	lr
	...

0800406c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b082      	sub	sp, #8
 8004070:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8004072:	2300      	movs	r3, #0
 8004074:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004076:	2300      	movs	r3, #0
 8004078:	603b      	str	r3, [r7, #0]
 800407a:	4b20      	ldr	r3, [pc, #128]	@ (80040fc <HAL_PWREx_EnableOverDrive+0x90>)
 800407c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800407e:	4a1f      	ldr	r2, [pc, #124]	@ (80040fc <HAL_PWREx_EnableOverDrive+0x90>)
 8004080:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004084:	6413      	str	r3, [r2, #64]	@ 0x40
 8004086:	4b1d      	ldr	r3, [pc, #116]	@ (80040fc <HAL_PWREx_EnableOverDrive+0x90>)
 8004088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800408a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800408e:	603b      	str	r3, [r7, #0]
 8004090:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004092:	4b1b      	ldr	r3, [pc, #108]	@ (8004100 <HAL_PWREx_EnableOverDrive+0x94>)
 8004094:	2201      	movs	r2, #1
 8004096:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004098:	f7ff f932 	bl	8003300 <HAL_GetTick>
 800409c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800409e:	e009      	b.n	80040b4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80040a0:	f7ff f92e 	bl	8003300 <HAL_GetTick>
 80040a4:	4602      	mov	r2, r0
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	1ad3      	subs	r3, r2, r3
 80040aa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80040ae:	d901      	bls.n	80040b4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80040b0:	2303      	movs	r3, #3
 80040b2:	e01f      	b.n	80040f4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80040b4:	4b13      	ldr	r3, [pc, #76]	@ (8004104 <HAL_PWREx_EnableOverDrive+0x98>)
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80040bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040c0:	d1ee      	bne.n	80040a0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80040c2:	4b11      	ldr	r3, [pc, #68]	@ (8004108 <HAL_PWREx_EnableOverDrive+0x9c>)
 80040c4:	2201      	movs	r2, #1
 80040c6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80040c8:	f7ff f91a 	bl	8003300 <HAL_GetTick>
 80040cc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80040ce:	e009      	b.n	80040e4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80040d0:	f7ff f916 	bl	8003300 <HAL_GetTick>
 80040d4:	4602      	mov	r2, r0
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	1ad3      	subs	r3, r2, r3
 80040da:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80040de:	d901      	bls.n	80040e4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80040e0:	2303      	movs	r3, #3
 80040e2:	e007      	b.n	80040f4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80040e4:	4b07      	ldr	r3, [pc, #28]	@ (8004104 <HAL_PWREx_EnableOverDrive+0x98>)
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040ec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80040f0:	d1ee      	bne.n	80040d0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80040f2:	2300      	movs	r3, #0
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	3708      	adds	r7, #8
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}
 80040fc:	40023800 	.word	0x40023800
 8004100:	420e0040 	.word	0x420e0040
 8004104:	40007000 	.word	0x40007000
 8004108:	420e0044 	.word	0x420e0044

0800410c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b084      	sub	sp, #16
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d101      	bne.n	8004120 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	e0cc      	b.n	80042ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004120:	4b68      	ldr	r3, [pc, #416]	@ (80042c4 <HAL_RCC_ClockConfig+0x1b8>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 030f 	and.w	r3, r3, #15
 8004128:	683a      	ldr	r2, [r7, #0]
 800412a:	429a      	cmp	r2, r3
 800412c:	d90c      	bls.n	8004148 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800412e:	4b65      	ldr	r3, [pc, #404]	@ (80042c4 <HAL_RCC_ClockConfig+0x1b8>)
 8004130:	683a      	ldr	r2, [r7, #0]
 8004132:	b2d2      	uxtb	r2, r2
 8004134:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004136:	4b63      	ldr	r3, [pc, #396]	@ (80042c4 <HAL_RCC_ClockConfig+0x1b8>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 030f 	and.w	r3, r3, #15
 800413e:	683a      	ldr	r2, [r7, #0]
 8004140:	429a      	cmp	r2, r3
 8004142:	d001      	beq.n	8004148 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	e0b8      	b.n	80042ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 0302 	and.w	r3, r3, #2
 8004150:	2b00      	cmp	r3, #0
 8004152:	d020      	beq.n	8004196 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 0304 	and.w	r3, r3, #4
 800415c:	2b00      	cmp	r3, #0
 800415e:	d005      	beq.n	800416c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004160:	4b59      	ldr	r3, [pc, #356]	@ (80042c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	4a58      	ldr	r2, [pc, #352]	@ (80042c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004166:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800416a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 0308 	and.w	r3, r3, #8
 8004174:	2b00      	cmp	r3, #0
 8004176:	d005      	beq.n	8004184 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004178:	4b53      	ldr	r3, [pc, #332]	@ (80042c8 <HAL_RCC_ClockConfig+0x1bc>)
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	4a52      	ldr	r2, [pc, #328]	@ (80042c8 <HAL_RCC_ClockConfig+0x1bc>)
 800417e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004182:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004184:	4b50      	ldr	r3, [pc, #320]	@ (80042c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	494d      	ldr	r1, [pc, #308]	@ (80042c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004192:	4313      	orrs	r3, r2
 8004194:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 0301 	and.w	r3, r3, #1
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d044      	beq.n	800422c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d107      	bne.n	80041ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041aa:	4b47      	ldr	r3, [pc, #284]	@ (80042c8 <HAL_RCC_ClockConfig+0x1bc>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d119      	bne.n	80041ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	e07f      	b.n	80042ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	2b02      	cmp	r3, #2
 80041c0:	d003      	beq.n	80041ca <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041c6:	2b03      	cmp	r3, #3
 80041c8:	d107      	bne.n	80041da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041ca:	4b3f      	ldr	r3, [pc, #252]	@ (80042c8 <HAL_RCC_ClockConfig+0x1bc>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d109      	bne.n	80041ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	e06f      	b.n	80042ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041da:	4b3b      	ldr	r3, [pc, #236]	@ (80042c8 <HAL_RCC_ClockConfig+0x1bc>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 0302 	and.w	r3, r3, #2
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d101      	bne.n	80041ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e067      	b.n	80042ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041ea:	4b37      	ldr	r3, [pc, #220]	@ (80042c8 <HAL_RCC_ClockConfig+0x1bc>)
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	f023 0203 	bic.w	r2, r3, #3
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	4934      	ldr	r1, [pc, #208]	@ (80042c8 <HAL_RCC_ClockConfig+0x1bc>)
 80041f8:	4313      	orrs	r3, r2
 80041fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80041fc:	f7ff f880 	bl	8003300 <HAL_GetTick>
 8004200:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004202:	e00a      	b.n	800421a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004204:	f7ff f87c 	bl	8003300 <HAL_GetTick>
 8004208:	4602      	mov	r2, r0
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	1ad3      	subs	r3, r2, r3
 800420e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004212:	4293      	cmp	r3, r2
 8004214:	d901      	bls.n	800421a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004216:	2303      	movs	r3, #3
 8004218:	e04f      	b.n	80042ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800421a:	4b2b      	ldr	r3, [pc, #172]	@ (80042c8 <HAL_RCC_ClockConfig+0x1bc>)
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	f003 020c 	and.w	r2, r3, #12
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	009b      	lsls	r3, r3, #2
 8004228:	429a      	cmp	r2, r3
 800422a:	d1eb      	bne.n	8004204 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800422c:	4b25      	ldr	r3, [pc, #148]	@ (80042c4 <HAL_RCC_ClockConfig+0x1b8>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 030f 	and.w	r3, r3, #15
 8004234:	683a      	ldr	r2, [r7, #0]
 8004236:	429a      	cmp	r2, r3
 8004238:	d20c      	bcs.n	8004254 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800423a:	4b22      	ldr	r3, [pc, #136]	@ (80042c4 <HAL_RCC_ClockConfig+0x1b8>)
 800423c:	683a      	ldr	r2, [r7, #0]
 800423e:	b2d2      	uxtb	r2, r2
 8004240:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004242:	4b20      	ldr	r3, [pc, #128]	@ (80042c4 <HAL_RCC_ClockConfig+0x1b8>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 030f 	and.w	r3, r3, #15
 800424a:	683a      	ldr	r2, [r7, #0]
 800424c:	429a      	cmp	r2, r3
 800424e:	d001      	beq.n	8004254 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	e032      	b.n	80042ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 0304 	and.w	r3, r3, #4
 800425c:	2b00      	cmp	r3, #0
 800425e:	d008      	beq.n	8004272 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004260:	4b19      	ldr	r3, [pc, #100]	@ (80042c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	68db      	ldr	r3, [r3, #12]
 800426c:	4916      	ldr	r1, [pc, #88]	@ (80042c8 <HAL_RCC_ClockConfig+0x1bc>)
 800426e:	4313      	orrs	r3, r2
 8004270:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 0308 	and.w	r3, r3, #8
 800427a:	2b00      	cmp	r3, #0
 800427c:	d009      	beq.n	8004292 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800427e:	4b12      	ldr	r3, [pc, #72]	@ (80042c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	691b      	ldr	r3, [r3, #16]
 800428a:	00db      	lsls	r3, r3, #3
 800428c:	490e      	ldr	r1, [pc, #56]	@ (80042c8 <HAL_RCC_ClockConfig+0x1bc>)
 800428e:	4313      	orrs	r3, r2
 8004290:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004292:	f000 f821 	bl	80042d8 <HAL_RCC_GetSysClockFreq>
 8004296:	4602      	mov	r2, r0
 8004298:	4b0b      	ldr	r3, [pc, #44]	@ (80042c8 <HAL_RCC_ClockConfig+0x1bc>)
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	091b      	lsrs	r3, r3, #4
 800429e:	f003 030f 	and.w	r3, r3, #15
 80042a2:	490a      	ldr	r1, [pc, #40]	@ (80042cc <HAL_RCC_ClockConfig+0x1c0>)
 80042a4:	5ccb      	ldrb	r3, [r1, r3]
 80042a6:	fa22 f303 	lsr.w	r3, r2, r3
 80042aa:	4a09      	ldr	r2, [pc, #36]	@ (80042d0 <HAL_RCC_ClockConfig+0x1c4>)
 80042ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80042ae:	4b09      	ldr	r3, [pc, #36]	@ (80042d4 <HAL_RCC_ClockConfig+0x1c8>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4618      	mov	r0, r3
 80042b4:	f7fe f810 	bl	80022d8 <HAL_InitTick>

  return HAL_OK;
 80042b8:	2300      	movs	r3, #0
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3710      	adds	r7, #16
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}
 80042c2:	bf00      	nop
 80042c4:	40023c00 	.word	0x40023c00
 80042c8:	40023800 	.word	0x40023800
 80042cc:	0801a954 	.word	0x0801a954
 80042d0:	20000004 	.word	0x20000004
 80042d4:	200000c8 	.word	0x200000c8

080042d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042dc:	b092      	sub	sp, #72	@ 0x48
 80042de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80042e0:	2300      	movs	r3, #0
 80042e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllvco = 0U;
 80042e4:	2300      	movs	r3, #0
 80042e6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllp = 0U;
 80042e8:	2300      	movs	r3, #0
 80042ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t sysclockfreq = 0U;
 80042ec:	2300      	movs	r3, #0
 80042ee:	643b      	str	r3, [r7, #64]	@ 0x40

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80042f0:	4b6f      	ldr	r3, [pc, #444]	@ (80044b0 <HAL_RCC_GetSysClockFreq+0x1d8>)
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	f003 030c 	and.w	r3, r3, #12
 80042f8:	2b08      	cmp	r3, #8
 80042fa:	d00e      	beq.n	800431a <HAL_RCC_GetSysClockFreq+0x42>
 80042fc:	2b08      	cmp	r3, #8
 80042fe:	f200 80cd 	bhi.w	800449c <HAL_RCC_GetSysClockFreq+0x1c4>
 8004302:	2b00      	cmp	r3, #0
 8004304:	d002      	beq.n	800430c <HAL_RCC_GetSysClockFreq+0x34>
 8004306:	2b04      	cmp	r3, #4
 8004308:	d003      	beq.n	8004312 <HAL_RCC_GetSysClockFreq+0x3a>
 800430a:	e0c7      	b.n	800449c <HAL_RCC_GetSysClockFreq+0x1c4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800430c:	4b69      	ldr	r3, [pc, #420]	@ (80044b4 <HAL_RCC_GetSysClockFreq+0x1dc>)
 800430e:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8004310:	e0c7      	b.n	80044a2 <HAL_RCC_GetSysClockFreq+0x1ca>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004312:	f44f 0361 	mov.w	r3, #14745600	@ 0xe10000
 8004316:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8004318:	e0c3      	b.n	80044a2 <HAL_RCC_GetSysClockFreq+0x1ca>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800431a:	4b65      	ldr	r3, [pc, #404]	@ (80044b0 <HAL_RCC_GetSysClockFreq+0x1d8>)
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004322:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004324:	4b62      	ldr	r3, [pc, #392]	@ (80044b0 <HAL_RCC_GetSysClockFreq+0x1d8>)
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800432c:	2b00      	cmp	r3, #0
 800432e:	d04a      	beq.n	80043c6 <HAL_RCC_GetSysClockFreq+0xee>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004330:	4b5f      	ldr	r3, [pc, #380]	@ (80044b0 <HAL_RCC_GetSysClockFreq+0x1d8>)
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	099b      	lsrs	r3, r3, #6
 8004336:	2200      	movs	r2, #0
 8004338:	4618      	mov	r0, r3
 800433a:	4611      	mov	r1, r2
 800433c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004340:	633b      	str	r3, [r7, #48]	@ 0x30
 8004342:	2300      	movs	r3, #0
 8004344:	637b      	str	r3, [r7, #52]	@ 0x34
 8004346:	e9d7 890c 	ldrd	r8, r9, [r7, #48]	@ 0x30
 800434a:	4642      	mov	r2, r8
 800434c:	464b      	mov	r3, r9
 800434e:	f04f 0000 	mov.w	r0, #0
 8004352:	f04f 0100 	mov.w	r1, #0
 8004356:	00d9      	lsls	r1, r3, #3
 8004358:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800435c:	00d0      	lsls	r0, r2, #3
 800435e:	4602      	mov	r2, r0
 8004360:	460b      	mov	r3, r1
 8004362:	4641      	mov	r1, r8
 8004364:	1a54      	subs	r4, r2, r1
 8004366:	4649      	mov	r1, r9
 8004368:	eb63 0501 	sbc.w	r5, r3, r1
 800436c:	f04f 0200 	mov.w	r2, #0
 8004370:	f04f 0300 	mov.w	r3, #0
 8004374:	016b      	lsls	r3, r5, #5
 8004376:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 800437a:	0162      	lsls	r2, r4, #5
 800437c:	4614      	mov	r4, r2
 800437e:	461d      	mov	r5, r3
 8004380:	4643      	mov	r3, r8
 8004382:	18e3      	adds	r3, r4, r3
 8004384:	60bb      	str	r3, [r7, #8]
 8004386:	464b      	mov	r3, r9
 8004388:	eb45 0303 	adc.w	r3, r5, r3
 800438c:	60fb      	str	r3, [r7, #12]
 800438e:	f04f 0200 	mov.w	r2, #0
 8004392:	f04f 0300 	mov.w	r3, #0
 8004396:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800439a:	4629      	mov	r1, r5
 800439c:	040b      	lsls	r3, r1, #16
 800439e:	4621      	mov	r1, r4
 80043a0:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 80043a4:	4621      	mov	r1, r4
 80043a6:	040a      	lsls	r2, r1, #16
 80043a8:	4610      	mov	r0, r2
 80043aa:	4619      	mov	r1, r3
 80043ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043ae:	2200      	movs	r2, #0
 80043b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80043b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80043b4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80043b8:	f7fc fc80 	bl	8000cbc <__aeabi_uldivmod>
 80043bc:	4602      	mov	r2, r0
 80043be:	460b      	mov	r3, r1
 80043c0:	4613      	mov	r3, r2
 80043c2:	647b      	str	r3, [r7, #68]	@ 0x44
 80043c4:	e05c      	b.n	8004480 <HAL_RCC_GetSysClockFreq+0x1a8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043c6:	4b3a      	ldr	r3, [pc, #232]	@ (80044b0 <HAL_RCC_GetSysClockFreq+0x1d8>)
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	099b      	lsrs	r3, r3, #6
 80043cc:	2200      	movs	r2, #0
 80043ce:	623b      	str	r3, [r7, #32]
 80043d0:	627a      	str	r2, [r7, #36]	@ 0x24
 80043d2:	6a3b      	ldr	r3, [r7, #32]
 80043d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043d8:	61bb      	str	r3, [r7, #24]
 80043da:	2300      	movs	r3, #0
 80043dc:	61fb      	str	r3, [r7, #28]
 80043de:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 80043e2:	4622      	mov	r2, r4
 80043e4:	462b      	mov	r3, r5
 80043e6:	f04f 0000 	mov.w	r0, #0
 80043ea:	f04f 0100 	mov.w	r1, #0
 80043ee:	0159      	lsls	r1, r3, #5
 80043f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043f4:	0150      	lsls	r0, r2, #5
 80043f6:	4602      	mov	r2, r0
 80043f8:	460b      	mov	r3, r1
 80043fa:	4621      	mov	r1, r4
 80043fc:	ebb2 0a01 	subs.w	sl, r2, r1
 8004400:	4629      	mov	r1, r5
 8004402:	eb63 0b01 	sbc.w	fp, r3, r1
 8004406:	f04f 0200 	mov.w	r2, #0
 800440a:	f04f 0300 	mov.w	r3, #0
 800440e:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004412:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004416:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800441a:	ebb2 080a 	subs.w	r8, r2, sl
 800441e:	eb63 090b 	sbc.w	r9, r3, fp
 8004422:	f04f 0200 	mov.w	r2, #0
 8004426:	f04f 0300 	mov.w	r3, #0
 800442a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800442e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004432:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004436:	4690      	mov	r8, r2
 8004438:	4699      	mov	r9, r3
 800443a:	4623      	mov	r3, r4
 800443c:	eb18 0303 	adds.w	r3, r8, r3
 8004440:	603b      	str	r3, [r7, #0]
 8004442:	462b      	mov	r3, r5
 8004444:	eb49 0303 	adc.w	r3, r9, r3
 8004448:	607b      	str	r3, [r7, #4]
 800444a:	f04f 0200 	mov.w	r2, #0
 800444e:	f04f 0300 	mov.w	r3, #0
 8004452:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004456:	4629      	mov	r1, r5
 8004458:	028b      	lsls	r3, r1, #10
 800445a:	4621      	mov	r1, r4
 800445c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004460:	4621      	mov	r1, r4
 8004462:	028a      	lsls	r2, r1, #10
 8004464:	4610      	mov	r0, r2
 8004466:	4619      	mov	r1, r3
 8004468:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800446a:	2200      	movs	r2, #0
 800446c:	613b      	str	r3, [r7, #16]
 800446e:	617a      	str	r2, [r7, #20]
 8004470:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004474:	f7fc fc22 	bl	8000cbc <__aeabi_uldivmod>
 8004478:	4602      	mov	r2, r0
 800447a:	460b      	mov	r3, r1
 800447c:	4613      	mov	r3, r2
 800447e:	647b      	str	r3, [r7, #68]	@ 0x44
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004480:	4b0b      	ldr	r3, [pc, #44]	@ (80044b0 <HAL_RCC_GetSysClockFreq+0x1d8>)
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	0c1b      	lsrs	r3, r3, #16
 8004486:	f003 0303 	and.w	r3, r3, #3
 800448a:	3301      	adds	r3, #1
 800448c:	005b      	lsls	r3, r3, #1
 800448e:	63bb      	str	r3, [r7, #56]	@ 0x38

      sysclockfreq = pllvco / pllp;
 8004490:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004492:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004494:	fbb2 f3f3 	udiv	r3, r2, r3
 8004498:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 800449a:	e002      	b.n	80044a2 <HAL_RCC_GetSysClockFreq+0x1ca>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800449c:	4b05      	ldr	r3, [pc, #20]	@ (80044b4 <HAL_RCC_GetSysClockFreq+0x1dc>)
 800449e:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 80044a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	3748      	adds	r7, #72	@ 0x48
 80044a8:	46bd      	mov	sp, r7
 80044aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044ae:	bf00      	nop
 80044b0:	40023800 	.word	0x40023800
 80044b4:	00f42400 	.word	0x00f42400

080044b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044b8:	b480      	push	{r7}
 80044ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044bc:	4b03      	ldr	r3, [pc, #12]	@ (80044cc <HAL_RCC_GetHCLKFreq+0x14>)
 80044be:	681b      	ldr	r3, [r3, #0]
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr
 80044ca:	bf00      	nop
 80044cc:	20000004 	.word	0x20000004

080044d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80044d4:	f7ff fff0 	bl	80044b8 <HAL_RCC_GetHCLKFreq>
 80044d8:	4602      	mov	r2, r0
 80044da:	4b05      	ldr	r3, [pc, #20]	@ (80044f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	0a9b      	lsrs	r3, r3, #10
 80044e0:	f003 0307 	and.w	r3, r3, #7
 80044e4:	4903      	ldr	r1, [pc, #12]	@ (80044f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044e6:	5ccb      	ldrb	r3, [r1, r3]
 80044e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	bd80      	pop	{r7, pc}
 80044f0:	40023800 	.word	0x40023800
 80044f4:	0801a964 	.word	0x0801a964

080044f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80044fc:	f7ff ffdc 	bl	80044b8 <HAL_RCC_GetHCLKFreq>
 8004500:	4602      	mov	r2, r0
 8004502:	4b05      	ldr	r3, [pc, #20]	@ (8004518 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	0b5b      	lsrs	r3, r3, #13
 8004508:	f003 0307 	and.w	r3, r3, #7
 800450c:	4903      	ldr	r1, [pc, #12]	@ (800451c <HAL_RCC_GetPCLK2Freq+0x24>)
 800450e:	5ccb      	ldrb	r3, [r1, r3]
 8004510:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004514:	4618      	mov	r0, r3
 8004516:	bd80      	pop	{r7, pc}
 8004518:	40023800 	.word	0x40023800
 800451c:	0801a964 	.word	0x0801a964

08004520 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004520:	b480      	push	{r7}
 8004522:	b083      	sub	sp, #12
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	220f      	movs	r2, #15
 800452e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004530:	4b12      	ldr	r3, [pc, #72]	@ (800457c <HAL_RCC_GetClockConfig+0x5c>)
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	f003 0203 	and.w	r2, r3, #3
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800453c:	4b0f      	ldr	r3, [pc, #60]	@ (800457c <HAL_RCC_GetClockConfig+0x5c>)
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004548:	4b0c      	ldr	r3, [pc, #48]	@ (800457c <HAL_RCC_GetClockConfig+0x5c>)
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004554:	4b09      	ldr	r3, [pc, #36]	@ (800457c <HAL_RCC_GetClockConfig+0x5c>)
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	08db      	lsrs	r3, r3, #3
 800455a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004562:	4b07      	ldr	r3, [pc, #28]	@ (8004580 <HAL_RCC_GetClockConfig+0x60>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f003 020f 	and.w	r2, r3, #15
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	601a      	str	r2, [r3, #0]
}
 800456e:	bf00      	nop
 8004570:	370c      	adds	r7, #12
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr
 800457a:	bf00      	nop
 800457c:	40023800 	.word	0x40023800
 8004580:	40023c00 	.word	0x40023c00

08004584 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b086      	sub	sp, #24
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d101      	bne.n	8004596 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	e273      	b.n	8004a7e <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 0301 	and.w	r3, r3, #1
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d075      	beq.n	800468e <HAL_RCC_OscConfig+0x10a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80045a2:	4b88      	ldr	r3, [pc, #544]	@ (80047c4 <HAL_RCC_OscConfig+0x240>)
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	f003 030c 	and.w	r3, r3, #12
 80045aa:	2b04      	cmp	r3, #4
 80045ac:	d00c      	beq.n	80045c8 <HAL_RCC_OscConfig+0x44>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80045ae:	4b85      	ldr	r3, [pc, #532]	@ (80047c4 <HAL_RCC_OscConfig+0x240>)
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	f003 030c 	and.w	r3, r3, #12
        || \
 80045b6:	2b08      	cmp	r3, #8
 80045b8:	d112      	bne.n	80045e0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80045ba:	4b82      	ldr	r3, [pc, #520]	@ (80047c4 <HAL_RCC_OscConfig+0x240>)
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80045c6:	d10b      	bne.n	80045e0 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045c8:	4b7e      	ldr	r3, [pc, #504]	@ (80047c4 <HAL_RCC_OscConfig+0x240>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d05b      	beq.n	800468c <HAL_RCC_OscConfig+0x108>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d157      	bne.n	800468c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	e24e      	b.n	8004a7e <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045e8:	d106      	bne.n	80045f8 <HAL_RCC_OscConfig+0x74>
 80045ea:	4b76      	ldr	r3, [pc, #472]	@ (80047c4 <HAL_RCC_OscConfig+0x240>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a75      	ldr	r2, [pc, #468]	@ (80047c4 <HAL_RCC_OscConfig+0x240>)
 80045f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045f4:	6013      	str	r3, [r2, #0]
 80045f6:	e01d      	b.n	8004634 <HAL_RCC_OscConfig+0xb0>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004600:	d10c      	bne.n	800461c <HAL_RCC_OscConfig+0x98>
 8004602:	4b70      	ldr	r3, [pc, #448]	@ (80047c4 <HAL_RCC_OscConfig+0x240>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a6f      	ldr	r2, [pc, #444]	@ (80047c4 <HAL_RCC_OscConfig+0x240>)
 8004608:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800460c:	6013      	str	r3, [r2, #0]
 800460e:	4b6d      	ldr	r3, [pc, #436]	@ (80047c4 <HAL_RCC_OscConfig+0x240>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a6c      	ldr	r2, [pc, #432]	@ (80047c4 <HAL_RCC_OscConfig+0x240>)
 8004614:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004618:	6013      	str	r3, [r2, #0]
 800461a:	e00b      	b.n	8004634 <HAL_RCC_OscConfig+0xb0>
 800461c:	4b69      	ldr	r3, [pc, #420]	@ (80047c4 <HAL_RCC_OscConfig+0x240>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a68      	ldr	r2, [pc, #416]	@ (80047c4 <HAL_RCC_OscConfig+0x240>)
 8004622:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004626:	6013      	str	r3, [r2, #0]
 8004628:	4b66      	ldr	r3, [pc, #408]	@ (80047c4 <HAL_RCC_OscConfig+0x240>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a65      	ldr	r2, [pc, #404]	@ (80047c4 <HAL_RCC_OscConfig+0x240>)
 800462e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004632:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d013      	beq.n	8004664 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800463c:	f7fe fe60 	bl	8003300 <HAL_GetTick>
 8004640:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004642:	e008      	b.n	8004656 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004644:	f7fe fe5c 	bl	8003300 <HAL_GetTick>
 8004648:	4602      	mov	r2, r0
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	1ad3      	subs	r3, r2, r3
 800464e:	2b64      	cmp	r3, #100	@ 0x64
 8004650:	d901      	bls.n	8004656 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004652:	2303      	movs	r3, #3
 8004654:	e213      	b.n	8004a7e <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004656:	4b5b      	ldr	r3, [pc, #364]	@ (80047c4 <HAL_RCC_OscConfig+0x240>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800465e:	2b00      	cmp	r3, #0
 8004660:	d0f0      	beq.n	8004644 <HAL_RCC_OscConfig+0xc0>
 8004662:	e014      	b.n	800468e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004664:	f7fe fe4c 	bl	8003300 <HAL_GetTick>
 8004668:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800466a:	e008      	b.n	800467e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800466c:	f7fe fe48 	bl	8003300 <HAL_GetTick>
 8004670:	4602      	mov	r2, r0
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	1ad3      	subs	r3, r2, r3
 8004676:	2b64      	cmp	r3, #100	@ 0x64
 8004678:	d901      	bls.n	800467e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800467a:	2303      	movs	r3, #3
 800467c:	e1ff      	b.n	8004a7e <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800467e:	4b51      	ldr	r3, [pc, #324]	@ (80047c4 <HAL_RCC_OscConfig+0x240>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004686:	2b00      	cmp	r3, #0
 8004688:	d1f0      	bne.n	800466c <HAL_RCC_OscConfig+0xe8>
 800468a:	e000      	b.n	800468e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800468c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 0302 	and.w	r3, r3, #2
 8004696:	2b00      	cmp	r3, #0
 8004698:	d063      	beq.n	8004762 <HAL_RCC_OscConfig+0x1de>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800469a:	4b4a      	ldr	r3, [pc, #296]	@ (80047c4 <HAL_RCC_OscConfig+0x240>)
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	f003 030c 	and.w	r3, r3, #12
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d00b      	beq.n	80046be <HAL_RCC_OscConfig+0x13a>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80046a6:	4b47      	ldr	r3, [pc, #284]	@ (80047c4 <HAL_RCC_OscConfig+0x240>)
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	f003 030c 	and.w	r3, r3, #12
        || \
 80046ae:	2b08      	cmp	r3, #8
 80046b0:	d11c      	bne.n	80046ec <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80046b2:	4b44      	ldr	r3, [pc, #272]	@ (80047c4 <HAL_RCC_OscConfig+0x240>)
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d116      	bne.n	80046ec <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046be:	4b41      	ldr	r3, [pc, #260]	@ (80047c4 <HAL_RCC_OscConfig+0x240>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f003 0302 	and.w	r3, r3, #2
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d005      	beq.n	80046d6 <HAL_RCC_OscConfig+0x152>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	68db      	ldr	r3, [r3, #12]
 80046ce:	2b01      	cmp	r3, #1
 80046d0:	d001      	beq.n	80046d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	e1d3      	b.n	8004a7e <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046d6:	4b3b      	ldr	r3, [pc, #236]	@ (80047c4 <HAL_RCC_OscConfig+0x240>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	691b      	ldr	r3, [r3, #16]
 80046e2:	00db      	lsls	r3, r3, #3
 80046e4:	4937      	ldr	r1, [pc, #220]	@ (80047c4 <HAL_RCC_OscConfig+0x240>)
 80046e6:	4313      	orrs	r3, r2
 80046e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046ea:	e03a      	b.n	8004762 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	68db      	ldr	r3, [r3, #12]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d020      	beq.n	8004736 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046f4:	4b34      	ldr	r3, [pc, #208]	@ (80047c8 <HAL_RCC_OscConfig+0x244>)
 80046f6:	2201      	movs	r2, #1
 80046f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046fa:	f7fe fe01 	bl	8003300 <HAL_GetTick>
 80046fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004700:	e008      	b.n	8004714 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004702:	f7fe fdfd 	bl	8003300 <HAL_GetTick>
 8004706:	4602      	mov	r2, r0
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	1ad3      	subs	r3, r2, r3
 800470c:	2b02      	cmp	r3, #2
 800470e:	d901      	bls.n	8004714 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004710:	2303      	movs	r3, #3
 8004712:	e1b4      	b.n	8004a7e <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004714:	4b2b      	ldr	r3, [pc, #172]	@ (80047c4 <HAL_RCC_OscConfig+0x240>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f003 0302 	and.w	r3, r3, #2
 800471c:	2b00      	cmp	r3, #0
 800471e:	d0f0      	beq.n	8004702 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004720:	4b28      	ldr	r3, [pc, #160]	@ (80047c4 <HAL_RCC_OscConfig+0x240>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	691b      	ldr	r3, [r3, #16]
 800472c:	00db      	lsls	r3, r3, #3
 800472e:	4925      	ldr	r1, [pc, #148]	@ (80047c4 <HAL_RCC_OscConfig+0x240>)
 8004730:	4313      	orrs	r3, r2
 8004732:	600b      	str	r3, [r1, #0]
 8004734:	e015      	b.n	8004762 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004736:	4b24      	ldr	r3, [pc, #144]	@ (80047c8 <HAL_RCC_OscConfig+0x244>)
 8004738:	2200      	movs	r2, #0
 800473a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800473c:	f7fe fde0 	bl	8003300 <HAL_GetTick>
 8004740:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004742:	e008      	b.n	8004756 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004744:	f7fe fddc 	bl	8003300 <HAL_GetTick>
 8004748:	4602      	mov	r2, r0
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	1ad3      	subs	r3, r2, r3
 800474e:	2b02      	cmp	r3, #2
 8004750:	d901      	bls.n	8004756 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004752:	2303      	movs	r3, #3
 8004754:	e193      	b.n	8004a7e <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004756:	4b1b      	ldr	r3, [pc, #108]	@ (80047c4 <HAL_RCC_OscConfig+0x240>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 0302 	and.w	r3, r3, #2
 800475e:	2b00      	cmp	r3, #0
 8004760:	d1f0      	bne.n	8004744 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 0308 	and.w	r3, r3, #8
 800476a:	2b00      	cmp	r3, #0
 800476c:	d036      	beq.n	80047dc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	695b      	ldr	r3, [r3, #20]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d016      	beq.n	80047a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004776:	4b15      	ldr	r3, [pc, #84]	@ (80047cc <HAL_RCC_OscConfig+0x248>)
 8004778:	2201      	movs	r2, #1
 800477a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800477c:	f7fe fdc0 	bl	8003300 <HAL_GetTick>
 8004780:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004782:	e008      	b.n	8004796 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004784:	f7fe fdbc 	bl	8003300 <HAL_GetTick>
 8004788:	4602      	mov	r2, r0
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	2b02      	cmp	r3, #2
 8004790:	d901      	bls.n	8004796 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004792:	2303      	movs	r3, #3
 8004794:	e173      	b.n	8004a7e <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004796:	4b0b      	ldr	r3, [pc, #44]	@ (80047c4 <HAL_RCC_OscConfig+0x240>)
 8004798:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800479a:	f003 0302 	and.w	r3, r3, #2
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d0f0      	beq.n	8004784 <HAL_RCC_OscConfig+0x200>
 80047a2:	e01b      	b.n	80047dc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047a4:	4b09      	ldr	r3, [pc, #36]	@ (80047cc <HAL_RCC_OscConfig+0x248>)
 80047a6:	2200      	movs	r2, #0
 80047a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047aa:	f7fe fda9 	bl	8003300 <HAL_GetTick>
 80047ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047b0:	e00e      	b.n	80047d0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047b2:	f7fe fda5 	bl	8003300 <HAL_GetTick>
 80047b6:	4602      	mov	r2, r0
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	1ad3      	subs	r3, r2, r3
 80047bc:	2b02      	cmp	r3, #2
 80047be:	d907      	bls.n	80047d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80047c0:	2303      	movs	r3, #3
 80047c2:	e15c      	b.n	8004a7e <HAL_RCC_OscConfig+0x4fa>
 80047c4:	40023800 	.word	0x40023800
 80047c8:	42470000 	.word	0x42470000
 80047cc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047d0:	4b8a      	ldr	r3, [pc, #552]	@ (80049fc <HAL_RCC_OscConfig+0x478>)
 80047d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047d4:	f003 0302 	and.w	r3, r3, #2
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d1ea      	bne.n	80047b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f003 0304 	and.w	r3, r3, #4
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	f000 8097 	beq.w	8004918 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047ea:	2300      	movs	r3, #0
 80047ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047ee:	4b83      	ldr	r3, [pc, #524]	@ (80049fc <HAL_RCC_OscConfig+0x478>)
 80047f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d10f      	bne.n	800481a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047fa:	2300      	movs	r3, #0
 80047fc:	60bb      	str	r3, [r7, #8]
 80047fe:	4b7f      	ldr	r3, [pc, #508]	@ (80049fc <HAL_RCC_OscConfig+0x478>)
 8004800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004802:	4a7e      	ldr	r2, [pc, #504]	@ (80049fc <HAL_RCC_OscConfig+0x478>)
 8004804:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004808:	6413      	str	r3, [r2, #64]	@ 0x40
 800480a:	4b7c      	ldr	r3, [pc, #496]	@ (80049fc <HAL_RCC_OscConfig+0x478>)
 800480c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800480e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004812:	60bb      	str	r3, [r7, #8]
 8004814:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004816:	2301      	movs	r3, #1
 8004818:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800481a:	4b79      	ldr	r3, [pc, #484]	@ (8004a00 <HAL_RCC_OscConfig+0x47c>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004822:	2b00      	cmp	r3, #0
 8004824:	d118      	bne.n	8004858 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004826:	4b76      	ldr	r3, [pc, #472]	@ (8004a00 <HAL_RCC_OscConfig+0x47c>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a75      	ldr	r2, [pc, #468]	@ (8004a00 <HAL_RCC_OscConfig+0x47c>)
 800482c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004830:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004832:	f7fe fd65 	bl	8003300 <HAL_GetTick>
 8004836:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004838:	e008      	b.n	800484c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800483a:	f7fe fd61 	bl	8003300 <HAL_GetTick>
 800483e:	4602      	mov	r2, r0
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	1ad3      	subs	r3, r2, r3
 8004844:	2b02      	cmp	r3, #2
 8004846:	d901      	bls.n	800484c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004848:	2303      	movs	r3, #3
 800484a:	e118      	b.n	8004a7e <HAL_RCC_OscConfig+0x4fa>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800484c:	4b6c      	ldr	r3, [pc, #432]	@ (8004a00 <HAL_RCC_OscConfig+0x47c>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004854:	2b00      	cmp	r3, #0
 8004856:	d0f0      	beq.n	800483a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	2b01      	cmp	r3, #1
 800485e:	d106      	bne.n	800486e <HAL_RCC_OscConfig+0x2ea>
 8004860:	4b66      	ldr	r3, [pc, #408]	@ (80049fc <HAL_RCC_OscConfig+0x478>)
 8004862:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004864:	4a65      	ldr	r2, [pc, #404]	@ (80049fc <HAL_RCC_OscConfig+0x478>)
 8004866:	f043 0301 	orr.w	r3, r3, #1
 800486a:	6713      	str	r3, [r2, #112]	@ 0x70
 800486c:	e01c      	b.n	80048a8 <HAL_RCC_OscConfig+0x324>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	2b05      	cmp	r3, #5
 8004874:	d10c      	bne.n	8004890 <HAL_RCC_OscConfig+0x30c>
 8004876:	4b61      	ldr	r3, [pc, #388]	@ (80049fc <HAL_RCC_OscConfig+0x478>)
 8004878:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800487a:	4a60      	ldr	r2, [pc, #384]	@ (80049fc <HAL_RCC_OscConfig+0x478>)
 800487c:	f043 0304 	orr.w	r3, r3, #4
 8004880:	6713      	str	r3, [r2, #112]	@ 0x70
 8004882:	4b5e      	ldr	r3, [pc, #376]	@ (80049fc <HAL_RCC_OscConfig+0x478>)
 8004884:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004886:	4a5d      	ldr	r2, [pc, #372]	@ (80049fc <HAL_RCC_OscConfig+0x478>)
 8004888:	f043 0301 	orr.w	r3, r3, #1
 800488c:	6713      	str	r3, [r2, #112]	@ 0x70
 800488e:	e00b      	b.n	80048a8 <HAL_RCC_OscConfig+0x324>
 8004890:	4b5a      	ldr	r3, [pc, #360]	@ (80049fc <HAL_RCC_OscConfig+0x478>)
 8004892:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004894:	4a59      	ldr	r2, [pc, #356]	@ (80049fc <HAL_RCC_OscConfig+0x478>)
 8004896:	f023 0301 	bic.w	r3, r3, #1
 800489a:	6713      	str	r3, [r2, #112]	@ 0x70
 800489c:	4b57      	ldr	r3, [pc, #348]	@ (80049fc <HAL_RCC_OscConfig+0x478>)
 800489e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048a0:	4a56      	ldr	r2, [pc, #344]	@ (80049fc <HAL_RCC_OscConfig+0x478>)
 80048a2:	f023 0304 	bic.w	r3, r3, #4
 80048a6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d015      	beq.n	80048dc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048b0:	f7fe fd26 	bl	8003300 <HAL_GetTick>
 80048b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048b6:	e00a      	b.n	80048ce <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048b8:	f7fe fd22 	bl	8003300 <HAL_GetTick>
 80048bc:	4602      	mov	r2, r0
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	1ad3      	subs	r3, r2, r3
 80048c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d901      	bls.n	80048ce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80048ca:	2303      	movs	r3, #3
 80048cc:	e0d7      	b.n	8004a7e <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048ce:	4b4b      	ldr	r3, [pc, #300]	@ (80049fc <HAL_RCC_OscConfig+0x478>)
 80048d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048d2:	f003 0302 	and.w	r3, r3, #2
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d0ee      	beq.n	80048b8 <HAL_RCC_OscConfig+0x334>
 80048da:	e014      	b.n	8004906 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048dc:	f7fe fd10 	bl	8003300 <HAL_GetTick>
 80048e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048e2:	e00a      	b.n	80048fa <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048e4:	f7fe fd0c 	bl	8003300 <HAL_GetTick>
 80048e8:	4602      	mov	r2, r0
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	1ad3      	subs	r3, r2, r3
 80048ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d901      	bls.n	80048fa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80048f6:	2303      	movs	r3, #3
 80048f8:	e0c1      	b.n	8004a7e <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048fa:	4b40      	ldr	r3, [pc, #256]	@ (80049fc <HAL_RCC_OscConfig+0x478>)
 80048fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048fe:	f003 0302 	and.w	r3, r3, #2
 8004902:	2b00      	cmp	r3, #0
 8004904:	d1ee      	bne.n	80048e4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004906:	7dfb      	ldrb	r3, [r7, #23]
 8004908:	2b01      	cmp	r3, #1
 800490a:	d105      	bne.n	8004918 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800490c:	4b3b      	ldr	r3, [pc, #236]	@ (80049fc <HAL_RCC_OscConfig+0x478>)
 800490e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004910:	4a3a      	ldr	r2, [pc, #232]	@ (80049fc <HAL_RCC_OscConfig+0x478>)
 8004912:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004916:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	699b      	ldr	r3, [r3, #24]
 800491c:	2b00      	cmp	r3, #0
 800491e:	f000 80ad 	beq.w	8004a7c <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004922:	4b36      	ldr	r3, [pc, #216]	@ (80049fc <HAL_RCC_OscConfig+0x478>)
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	f003 030c 	and.w	r3, r3, #12
 800492a:	2b08      	cmp	r3, #8
 800492c:	d060      	beq.n	80049f0 <HAL_RCC_OscConfig+0x46c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	699b      	ldr	r3, [r3, #24]
 8004932:	2b02      	cmp	r3, #2
 8004934:	d145      	bne.n	80049c2 <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004936:	4b33      	ldr	r3, [pc, #204]	@ (8004a04 <HAL_RCC_OscConfig+0x480>)
 8004938:	2200      	movs	r2, #0
 800493a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800493c:	f7fe fce0 	bl	8003300 <HAL_GetTick>
 8004940:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004942:	e008      	b.n	8004956 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004944:	f7fe fcdc 	bl	8003300 <HAL_GetTick>
 8004948:	4602      	mov	r2, r0
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	1ad3      	subs	r3, r2, r3
 800494e:	2b02      	cmp	r3, #2
 8004950:	d901      	bls.n	8004956 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004952:	2303      	movs	r3, #3
 8004954:	e093      	b.n	8004a7e <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004956:	4b29      	ldr	r3, [pc, #164]	@ (80049fc <HAL_RCC_OscConfig+0x478>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800495e:	2b00      	cmp	r3, #0
 8004960:	d1f0      	bne.n	8004944 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	69da      	ldr	r2, [r3, #28]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6a1b      	ldr	r3, [r3, #32]
 800496a:	431a      	orrs	r2, r3
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004970:	019b      	lsls	r3, r3, #6
 8004972:	431a      	orrs	r2, r3
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004978:	085b      	lsrs	r3, r3, #1
 800497a:	3b01      	subs	r3, #1
 800497c:	041b      	lsls	r3, r3, #16
 800497e:	431a      	orrs	r2, r3
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004984:	061b      	lsls	r3, r3, #24
 8004986:	431a      	orrs	r2, r3
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800498c:	071b      	lsls	r3, r3, #28
 800498e:	491b      	ldr	r1, [pc, #108]	@ (80049fc <HAL_RCC_OscConfig+0x478>)
 8004990:	4313      	orrs	r3, r2
 8004992:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004994:	4b1b      	ldr	r3, [pc, #108]	@ (8004a04 <HAL_RCC_OscConfig+0x480>)
 8004996:	2201      	movs	r2, #1
 8004998:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800499a:	f7fe fcb1 	bl	8003300 <HAL_GetTick>
 800499e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049a0:	e008      	b.n	80049b4 <HAL_RCC_OscConfig+0x430>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049a2:	f7fe fcad 	bl	8003300 <HAL_GetTick>
 80049a6:	4602      	mov	r2, r0
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	1ad3      	subs	r3, r2, r3
 80049ac:	2b02      	cmp	r3, #2
 80049ae:	d901      	bls.n	80049b4 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 80049b0:	2303      	movs	r3, #3
 80049b2:	e064      	b.n	8004a7e <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049b4:	4b11      	ldr	r3, [pc, #68]	@ (80049fc <HAL_RCC_OscConfig+0x478>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d0f0      	beq.n	80049a2 <HAL_RCC_OscConfig+0x41e>
 80049c0:	e05c      	b.n	8004a7c <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049c2:	4b10      	ldr	r3, [pc, #64]	@ (8004a04 <HAL_RCC_OscConfig+0x480>)
 80049c4:	2200      	movs	r2, #0
 80049c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049c8:	f7fe fc9a 	bl	8003300 <HAL_GetTick>
 80049cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049ce:	e008      	b.n	80049e2 <HAL_RCC_OscConfig+0x45e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049d0:	f7fe fc96 	bl	8003300 <HAL_GetTick>
 80049d4:	4602      	mov	r2, r0
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	1ad3      	subs	r3, r2, r3
 80049da:	2b02      	cmp	r3, #2
 80049dc:	d901      	bls.n	80049e2 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80049de:	2303      	movs	r3, #3
 80049e0:	e04d      	b.n	8004a7e <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049e2:	4b06      	ldr	r3, [pc, #24]	@ (80049fc <HAL_RCC_OscConfig+0x478>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d1f0      	bne.n	80049d0 <HAL_RCC_OscConfig+0x44c>
 80049ee:	e045      	b.n	8004a7c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	699b      	ldr	r3, [r3, #24]
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d107      	bne.n	8004a08 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 80049f8:	2301      	movs	r3, #1
 80049fa:	e040      	b.n	8004a7e <HAL_RCC_OscConfig+0x4fa>
 80049fc:	40023800 	.word	0x40023800
 8004a00:	40007000 	.word	0x40007000
 8004a04:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004a08:	4b1f      	ldr	r3, [pc, #124]	@ (8004a88 <HAL_RCC_OscConfig+0x504>)
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	699b      	ldr	r3, [r3, #24]
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d030      	beq.n	8004a78 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d129      	bne.n	8004a78 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	d122      	bne.n	8004a78 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a32:	68fa      	ldr	r2, [r7, #12]
 8004a34:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004a38:	4013      	ands	r3, r2
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004a3e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d119      	bne.n	8004a78 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a4e:	085b      	lsrs	r3, r3, #1
 8004a50:	3b01      	subs	r3, #1
 8004a52:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d10f      	bne.n	8004a78 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a62:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a64:	429a      	cmp	r2, r3
 8004a66:	d107      	bne.n	8004a78 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a72:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a74:	429a      	cmp	r2, r3
 8004a76:	d001      	beq.n	8004a7c <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	e000      	b.n	8004a7e <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8004a7c:	2300      	movs	r3, #0
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3718      	adds	r7, #24
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}
 8004a86:	bf00      	nop
 8004a88:	40023800 	.word	0x40023800

08004a8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b082      	sub	sp, #8
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d101      	bne.n	8004a9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e041      	b.n	8004b22 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d106      	bne.n	8004ab8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2200      	movs	r2, #0
 8004aae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f000 f839 	bl	8004b2a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2202      	movs	r2, #2
 8004abc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	3304      	adds	r3, #4
 8004ac8:	4619      	mov	r1, r3
 8004aca:	4610      	mov	r0, r2
 8004acc:	f000 f9c0 	bl	8004e50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2201      	movs	r2, #1
 8004adc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2201      	movs	r2, #1
 8004aec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2201      	movs	r2, #1
 8004af4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2201      	movs	r2, #1
 8004afc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2201      	movs	r2, #1
 8004b04:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2201      	movs	r2, #1
 8004b14:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004b20:	2300      	movs	r3, #0
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3708      	adds	r7, #8
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}

08004b2a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004b2a:	b480      	push	{r7}
 8004b2c:	b083      	sub	sp, #12
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004b32:	bf00      	nop
 8004b34:	370c      	adds	r7, #12
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr
	...

08004b40 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b085      	sub	sp, #20
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d001      	beq.n	8004b58 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004b54:	2301      	movs	r3, #1
 8004b56:	e04e      	b.n	8004bf6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2202      	movs	r2, #2
 8004b5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	68da      	ldr	r2, [r3, #12]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f042 0201 	orr.w	r2, r2, #1
 8004b6e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a23      	ldr	r2, [pc, #140]	@ (8004c04 <HAL_TIM_Base_Start_IT+0xc4>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d022      	beq.n	8004bc0 <HAL_TIM_Base_Start_IT+0x80>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b82:	d01d      	beq.n	8004bc0 <HAL_TIM_Base_Start_IT+0x80>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a1f      	ldr	r2, [pc, #124]	@ (8004c08 <HAL_TIM_Base_Start_IT+0xc8>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d018      	beq.n	8004bc0 <HAL_TIM_Base_Start_IT+0x80>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a1e      	ldr	r2, [pc, #120]	@ (8004c0c <HAL_TIM_Base_Start_IT+0xcc>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d013      	beq.n	8004bc0 <HAL_TIM_Base_Start_IT+0x80>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a1c      	ldr	r2, [pc, #112]	@ (8004c10 <HAL_TIM_Base_Start_IT+0xd0>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d00e      	beq.n	8004bc0 <HAL_TIM_Base_Start_IT+0x80>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a1b      	ldr	r2, [pc, #108]	@ (8004c14 <HAL_TIM_Base_Start_IT+0xd4>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d009      	beq.n	8004bc0 <HAL_TIM_Base_Start_IT+0x80>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a19      	ldr	r2, [pc, #100]	@ (8004c18 <HAL_TIM_Base_Start_IT+0xd8>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d004      	beq.n	8004bc0 <HAL_TIM_Base_Start_IT+0x80>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a18      	ldr	r2, [pc, #96]	@ (8004c1c <HAL_TIM_Base_Start_IT+0xdc>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d111      	bne.n	8004be4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	f003 0307 	and.w	r3, r3, #7
 8004bca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2b06      	cmp	r3, #6
 8004bd0:	d010      	beq.n	8004bf4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	681a      	ldr	r2, [r3, #0]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f042 0201 	orr.w	r2, r2, #1
 8004be0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004be2:	e007      	b.n	8004bf4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f042 0201 	orr.w	r2, r2, #1
 8004bf2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004bf4:	2300      	movs	r3, #0
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	3714      	adds	r7, #20
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c00:	4770      	bx	lr
 8004c02:	bf00      	nop
 8004c04:	40010000 	.word	0x40010000
 8004c08:	40000400 	.word	0x40000400
 8004c0c:	40000800 	.word	0x40000800
 8004c10:	40000c00 	.word	0x40000c00
 8004c14:	40010400 	.word	0x40010400
 8004c18:	40014000 	.word	0x40014000
 8004c1c:	40001800 	.word	0x40001800

08004c20 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b084      	sub	sp, #16
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	68db      	ldr	r3, [r3, #12]
 8004c2e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	691b      	ldr	r3, [r3, #16]
 8004c36:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	f003 0302 	and.w	r3, r3, #2
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d020      	beq.n	8004c84 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	f003 0302 	and.w	r3, r3, #2
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d01b      	beq.n	8004c84 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f06f 0202 	mvn.w	r2, #2
 8004c54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2201      	movs	r2, #1
 8004c5a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	699b      	ldr	r3, [r3, #24]
 8004c62:	f003 0303 	and.w	r3, r3, #3
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d003      	beq.n	8004c72 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f000 f8d2 	bl	8004e14 <HAL_TIM_IC_CaptureCallback>
 8004c70:	e005      	b.n	8004c7e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f000 f8c4 	bl	8004e00 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	f000 f8d5 	bl	8004e28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2200      	movs	r2, #0
 8004c82:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	f003 0304 	and.w	r3, r3, #4
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d020      	beq.n	8004cd0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	f003 0304 	and.w	r3, r3, #4
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d01b      	beq.n	8004cd0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f06f 0204 	mvn.w	r2, #4
 8004ca0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2202      	movs	r2, #2
 8004ca6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	699b      	ldr	r3, [r3, #24]
 8004cae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d003      	beq.n	8004cbe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f000 f8ac 	bl	8004e14 <HAL_TIM_IC_CaptureCallback>
 8004cbc:	e005      	b.n	8004cca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f000 f89e 	bl	8004e00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f000 f8af 	bl	8004e28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	f003 0308 	and.w	r3, r3, #8
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d020      	beq.n	8004d1c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	f003 0308 	and.w	r3, r3, #8
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d01b      	beq.n	8004d1c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f06f 0208 	mvn.w	r2, #8
 8004cec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2204      	movs	r2, #4
 8004cf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	69db      	ldr	r3, [r3, #28]
 8004cfa:	f003 0303 	and.w	r3, r3, #3
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d003      	beq.n	8004d0a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f000 f886 	bl	8004e14 <HAL_TIM_IC_CaptureCallback>
 8004d08:	e005      	b.n	8004d16 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f000 f878 	bl	8004e00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d10:	6878      	ldr	r0, [r7, #4]
 8004d12:	f000 f889 	bl	8004e28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	f003 0310 	and.w	r3, r3, #16
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d020      	beq.n	8004d68 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	f003 0310 	and.w	r3, r3, #16
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d01b      	beq.n	8004d68 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f06f 0210 	mvn.w	r2, #16
 8004d38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2208      	movs	r2, #8
 8004d3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	69db      	ldr	r3, [r3, #28]
 8004d46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d003      	beq.n	8004d56 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f000 f860 	bl	8004e14 <HAL_TIM_IC_CaptureCallback>
 8004d54:	e005      	b.n	8004d62 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f000 f852 	bl	8004e00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	f000 f863 	bl	8004e28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2200      	movs	r2, #0
 8004d66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	f003 0301 	and.w	r3, r3, #1
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d00c      	beq.n	8004d8c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	f003 0301 	and.w	r3, r3, #1
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d007      	beq.n	8004d8c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f06f 0201 	mvn.w	r2, #1
 8004d84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f7fd f8fc 	bl	8001f84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d00c      	beq.n	8004db0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d007      	beq.n	8004db0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004da8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f000 f906 	bl	8004fbc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d00c      	beq.n	8004dd4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d007      	beq.n	8004dd4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004dcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f000 f834 	bl	8004e3c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	f003 0320 	and.w	r3, r3, #32
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d00c      	beq.n	8004df8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	f003 0320 	and.w	r3, r3, #32
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d007      	beq.n	8004df8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f06f 0220 	mvn.w	r2, #32
 8004df0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f000 f8d8 	bl	8004fa8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004df8:	bf00      	nop
 8004dfa:	3710      	adds	r7, #16
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}

08004e00 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e00:	b480      	push	{r7}
 8004e02:	b083      	sub	sp, #12
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e08:	bf00      	nop
 8004e0a:	370c      	adds	r7, #12
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e12:	4770      	bx	lr

08004e14 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b083      	sub	sp, #12
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e1c:	bf00      	nop
 8004e1e:	370c      	adds	r7, #12
 8004e20:	46bd      	mov	sp, r7
 8004e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e26:	4770      	bx	lr

08004e28 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b083      	sub	sp, #12
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e30:	bf00      	nop
 8004e32:	370c      	adds	r7, #12
 8004e34:	46bd      	mov	sp, r7
 8004e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3a:	4770      	bx	lr

08004e3c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b083      	sub	sp, #12
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e44:	bf00      	nop
 8004e46:	370c      	adds	r7, #12
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4e:	4770      	bx	lr

08004e50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b085      	sub	sp, #20
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
 8004e58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	4a46      	ldr	r2, [pc, #280]	@ (8004f7c <TIM_Base_SetConfig+0x12c>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d013      	beq.n	8004e90 <TIM_Base_SetConfig+0x40>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e6e:	d00f      	beq.n	8004e90 <TIM_Base_SetConfig+0x40>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	4a43      	ldr	r2, [pc, #268]	@ (8004f80 <TIM_Base_SetConfig+0x130>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d00b      	beq.n	8004e90 <TIM_Base_SetConfig+0x40>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	4a42      	ldr	r2, [pc, #264]	@ (8004f84 <TIM_Base_SetConfig+0x134>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d007      	beq.n	8004e90 <TIM_Base_SetConfig+0x40>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	4a41      	ldr	r2, [pc, #260]	@ (8004f88 <TIM_Base_SetConfig+0x138>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d003      	beq.n	8004e90 <TIM_Base_SetConfig+0x40>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	4a40      	ldr	r2, [pc, #256]	@ (8004f8c <TIM_Base_SetConfig+0x13c>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d108      	bne.n	8004ea2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	68fa      	ldr	r2, [r7, #12]
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	4a35      	ldr	r2, [pc, #212]	@ (8004f7c <TIM_Base_SetConfig+0x12c>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d02b      	beq.n	8004f02 <TIM_Base_SetConfig+0xb2>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004eb0:	d027      	beq.n	8004f02 <TIM_Base_SetConfig+0xb2>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	4a32      	ldr	r2, [pc, #200]	@ (8004f80 <TIM_Base_SetConfig+0x130>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d023      	beq.n	8004f02 <TIM_Base_SetConfig+0xb2>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	4a31      	ldr	r2, [pc, #196]	@ (8004f84 <TIM_Base_SetConfig+0x134>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d01f      	beq.n	8004f02 <TIM_Base_SetConfig+0xb2>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	4a30      	ldr	r2, [pc, #192]	@ (8004f88 <TIM_Base_SetConfig+0x138>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d01b      	beq.n	8004f02 <TIM_Base_SetConfig+0xb2>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	4a2f      	ldr	r2, [pc, #188]	@ (8004f8c <TIM_Base_SetConfig+0x13c>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d017      	beq.n	8004f02 <TIM_Base_SetConfig+0xb2>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	4a2e      	ldr	r2, [pc, #184]	@ (8004f90 <TIM_Base_SetConfig+0x140>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d013      	beq.n	8004f02 <TIM_Base_SetConfig+0xb2>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	4a2d      	ldr	r2, [pc, #180]	@ (8004f94 <TIM_Base_SetConfig+0x144>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d00f      	beq.n	8004f02 <TIM_Base_SetConfig+0xb2>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	4a2c      	ldr	r2, [pc, #176]	@ (8004f98 <TIM_Base_SetConfig+0x148>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d00b      	beq.n	8004f02 <TIM_Base_SetConfig+0xb2>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	4a2b      	ldr	r2, [pc, #172]	@ (8004f9c <TIM_Base_SetConfig+0x14c>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d007      	beq.n	8004f02 <TIM_Base_SetConfig+0xb2>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	4a2a      	ldr	r2, [pc, #168]	@ (8004fa0 <TIM_Base_SetConfig+0x150>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d003      	beq.n	8004f02 <TIM_Base_SetConfig+0xb2>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	4a29      	ldr	r2, [pc, #164]	@ (8004fa4 <TIM_Base_SetConfig+0x154>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d108      	bne.n	8004f14 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	68db      	ldr	r3, [r3, #12]
 8004f0e:	68fa      	ldr	r2, [r7, #12]
 8004f10:	4313      	orrs	r3, r2
 8004f12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	695b      	ldr	r3, [r3, #20]
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	68fa      	ldr	r2, [r7, #12]
 8004f26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	689a      	ldr	r2, [r3, #8]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	681a      	ldr	r2, [r3, #0]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	4a10      	ldr	r2, [pc, #64]	@ (8004f7c <TIM_Base_SetConfig+0x12c>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d003      	beq.n	8004f48 <TIM_Base_SetConfig+0xf8>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	4a12      	ldr	r2, [pc, #72]	@ (8004f8c <TIM_Base_SetConfig+0x13c>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d103      	bne.n	8004f50 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	691a      	ldr	r2, [r3, #16]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2201      	movs	r2, #1
 8004f54:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	691b      	ldr	r3, [r3, #16]
 8004f5a:	f003 0301 	and.w	r3, r3, #1
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d105      	bne.n	8004f6e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	691b      	ldr	r3, [r3, #16]
 8004f66:	f023 0201 	bic.w	r2, r3, #1
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	611a      	str	r2, [r3, #16]
  }
}
 8004f6e:	bf00      	nop
 8004f70:	3714      	adds	r7, #20
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr
 8004f7a:	bf00      	nop
 8004f7c:	40010000 	.word	0x40010000
 8004f80:	40000400 	.word	0x40000400
 8004f84:	40000800 	.word	0x40000800
 8004f88:	40000c00 	.word	0x40000c00
 8004f8c:	40010400 	.word	0x40010400
 8004f90:	40014000 	.word	0x40014000
 8004f94:	40014400 	.word	0x40014400
 8004f98:	40014800 	.word	0x40014800
 8004f9c:	40001800 	.word	0x40001800
 8004fa0:	40001c00 	.word	0x40001c00
 8004fa4:	40002000 	.word	0x40002000

08004fa8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b083      	sub	sp, #12
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004fb0:	bf00      	nop
 8004fb2:	370c      	adds	r7, #12
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fba:	4770      	bx	lr

08004fbc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b083      	sub	sp, #12
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004fc4:	bf00      	nop
 8004fc6:	370c      	adds	r7, #12
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fce:	4770      	bx	lr

08004fd0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b082      	sub	sp, #8
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d101      	bne.n	8004fe2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e042      	b.n	8005068 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d106      	bne.n	8004ffc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f7fd fb2c 	bl	8002654 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2224      	movs	r2, #36	@ 0x24
 8005000:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	68da      	ldr	r2, [r3, #12]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005012:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f000 ffc9 	bl	8005fac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	691a      	ldr	r2, [r3, #16]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005028:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	695a      	ldr	r2, [r3, #20]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005038:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	68da      	ldr	r2, [r3, #12]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005048:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2200      	movs	r2, #0
 800504e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2220      	movs	r2, #32
 8005054:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2220      	movs	r2, #32
 800505c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2200      	movs	r2, #0
 8005064:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005066:	2300      	movs	r3, #0
}
 8005068:	4618      	mov	r0, r3
 800506a:	3708      	adds	r7, #8
 800506c:	46bd      	mov	sp, r7
 800506e:	bd80      	pop	{r7, pc}

08005070 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b08c      	sub	sp, #48	@ 0x30
 8005074:	af00      	add	r7, sp, #0
 8005076:	60f8      	str	r0, [r7, #12]
 8005078:	60b9      	str	r1, [r7, #8]
 800507a:	4613      	mov	r3, r2
 800507c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005084:	b2db      	uxtb	r3, r3
 8005086:	2b20      	cmp	r3, #32
 8005088:	d156      	bne.n	8005138 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d002      	beq.n	8005096 <HAL_UART_Transmit_DMA+0x26>
 8005090:	88fb      	ldrh	r3, [r7, #6]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d101      	bne.n	800509a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8005096:	2301      	movs	r3, #1
 8005098:	e04f      	b.n	800513a <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800509a:	68ba      	ldr	r2, [r7, #8]
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	88fa      	ldrh	r2, [r7, #6]
 80050a4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	88fa      	ldrh	r2, [r7, #6]
 80050aa:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2200      	movs	r2, #0
 80050b0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2221      	movs	r2, #33	@ 0x21
 80050b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050be:	4a21      	ldr	r2, [pc, #132]	@ (8005144 <HAL_UART_Transmit_DMA+0xd4>)
 80050c0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050c6:	4a20      	ldr	r2, [pc, #128]	@ (8005148 <HAL_UART_Transmit_DMA+0xd8>)
 80050c8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050ce:	4a1f      	ldr	r2, [pc, #124]	@ (800514c <HAL_UART_Transmit_DMA+0xdc>)
 80050d0:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050d6:	2200      	movs	r2, #0
 80050d8:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80050da:	f107 0308 	add.w	r3, r7, #8
 80050de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80050e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050e6:	6819      	ldr	r1, [r3, #0]
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	3304      	adds	r3, #4
 80050ee:	461a      	mov	r2, r3
 80050f0:	88fb      	ldrh	r3, [r7, #6]
 80050f2:	f7fe faa1 	bl	8003638 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80050fe:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	3314      	adds	r3, #20
 8005106:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005108:	69bb      	ldr	r3, [r7, #24]
 800510a:	e853 3f00 	ldrex	r3, [r3]
 800510e:	617b      	str	r3, [r7, #20]
   return(result);
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005116:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	3314      	adds	r3, #20
 800511e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005120:	627a      	str	r2, [r7, #36]	@ 0x24
 8005122:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005124:	6a39      	ldr	r1, [r7, #32]
 8005126:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005128:	e841 2300 	strex	r3, r2, [r1]
 800512c:	61fb      	str	r3, [r7, #28]
   return(result);
 800512e:	69fb      	ldr	r3, [r7, #28]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d1e5      	bne.n	8005100 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8005134:	2300      	movs	r3, #0
 8005136:	e000      	b.n	800513a <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8005138:	2302      	movs	r3, #2
  }
}
 800513a:	4618      	mov	r0, r3
 800513c:	3730      	adds	r7, #48	@ 0x30
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}
 8005142:	bf00      	nop
 8005144:	08005839 	.word	0x08005839
 8005148:	080058d3 	.word	0x080058d3
 800514c:	08005a57 	.word	0x08005a57

08005150 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b084      	sub	sp, #16
 8005154:	af00      	add	r7, sp, #0
 8005156:	60f8      	str	r0, [r7, #12]
 8005158:	60b9      	str	r1, [r7, #8]
 800515a:	4613      	mov	r3, r2
 800515c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005164:	b2db      	uxtb	r3, r3
 8005166:	2b20      	cmp	r3, #32
 8005168:	d112      	bne.n	8005190 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d002      	beq.n	8005176 <HAL_UART_Receive_DMA+0x26>
 8005170:	88fb      	ldrh	r3, [r7, #6]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d101      	bne.n	800517a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	e00b      	b.n	8005192 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2200      	movs	r2, #0
 800517e:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005180:	88fb      	ldrh	r3, [r7, #6]
 8005182:	461a      	mov	r2, r3
 8005184:	68b9      	ldr	r1, [r7, #8]
 8005186:	68f8      	ldr	r0, [r7, #12]
 8005188:	f000 fcb0 	bl	8005aec <UART_Start_Receive_DMA>
 800518c:	4603      	mov	r3, r0
 800518e:	e000      	b.n	8005192 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005190:	2302      	movs	r3, #2
  }
}
 8005192:	4618      	mov	r0, r3
 8005194:	3710      	adds	r7, #16
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}

0800519a <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800519a:	b580      	push	{r7, lr}
 800519c:	b090      	sub	sp, #64	@ 0x40
 800519e:	af00      	add	r7, sp, #0
 80051a0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80051a2:	2300      	movs	r3, #0
 80051a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	695b      	ldr	r3, [r3, #20]
 80051ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051b0:	2b80      	cmp	r3, #128	@ 0x80
 80051b2:	bf0c      	ite	eq
 80051b4:	2301      	moveq	r3, #1
 80051b6:	2300      	movne	r3, #0
 80051b8:	b2db      	uxtb	r3, r3
 80051ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051c2:	b2db      	uxtb	r3, r3
 80051c4:	2b21      	cmp	r3, #33	@ 0x21
 80051c6:	d128      	bne.n	800521a <HAL_UART_DMAStop+0x80>
 80051c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d025      	beq.n	800521a <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	3314      	adds	r3, #20
 80051d4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051d8:	e853 3f00 	ldrex	r3, [r3]
 80051dc:	623b      	str	r3, [r7, #32]
   return(result);
 80051de:	6a3b      	ldr	r3, [r7, #32]
 80051e0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80051e4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	3314      	adds	r3, #20
 80051ec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80051ee:	633a      	str	r2, [r7, #48]	@ 0x30
 80051f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80051f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80051f6:	e841 2300 	strex	r3, r2, [r1]
 80051fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80051fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d1e5      	bne.n	80051ce <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005206:	2b00      	cmp	r3, #0
 8005208:	d004      	beq.n	8005214 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800520e:	4618      	mov	r0, r3
 8005210:	f7fe fa6a 	bl	80036e8 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8005214:	6878      	ldr	r0, [r7, #4]
 8005216:	f000 fd03 	bl	8005c20 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	695b      	ldr	r3, [r3, #20]
 8005220:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005224:	2b40      	cmp	r3, #64	@ 0x40
 8005226:	bf0c      	ite	eq
 8005228:	2301      	moveq	r3, #1
 800522a:	2300      	movne	r3, #0
 800522c:	b2db      	uxtb	r3, r3
 800522e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005236:	b2db      	uxtb	r3, r3
 8005238:	2b22      	cmp	r3, #34	@ 0x22
 800523a:	d128      	bne.n	800528e <HAL_UART_DMAStop+0xf4>
 800523c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800523e:	2b00      	cmp	r3, #0
 8005240:	d025      	beq.n	800528e <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	3314      	adds	r3, #20
 8005248:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	e853 3f00 	ldrex	r3, [r3]
 8005250:	60fb      	str	r3, [r7, #12]
   return(result);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005258:	637b      	str	r3, [r7, #52]	@ 0x34
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	3314      	adds	r3, #20
 8005260:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005262:	61fa      	str	r2, [r7, #28]
 8005264:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005266:	69b9      	ldr	r1, [r7, #24]
 8005268:	69fa      	ldr	r2, [r7, #28]
 800526a:	e841 2300 	strex	r3, r2, [r1]
 800526e:	617b      	str	r3, [r7, #20]
   return(result);
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d1e5      	bne.n	8005242 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800527a:	2b00      	cmp	r3, #0
 800527c:	d004      	beq.n	8005288 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005282:	4618      	mov	r0, r3
 8005284:	f7fe fa30 	bl	80036e8 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8005288:	6878      	ldr	r0, [r7, #4]
 800528a:	f000 fcf1 	bl	8005c70 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800528e:	2300      	movs	r3, #0
}
 8005290:	4618      	mov	r0, r3
 8005292:	3740      	adds	r7, #64	@ 0x40
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}

08005298 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b0ba      	sub	sp, #232	@ 0xe8
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	68db      	ldr	r3, [r3, #12]
 80052b0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	695b      	ldr	r3, [r3, #20]
 80052ba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80052be:	2300      	movs	r3, #0
 80052c0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80052c4:	2300      	movs	r3, #0
 80052c6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80052ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052ce:	f003 030f 	and.w	r3, r3, #15
 80052d2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80052d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d10f      	bne.n	80052fe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80052de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052e2:	f003 0320 	and.w	r3, r3, #32
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d009      	beq.n	80052fe <HAL_UART_IRQHandler+0x66>
 80052ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052ee:	f003 0320 	and.w	r3, r3, #32
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d003      	beq.n	80052fe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f000 fd99 	bl	8005e2e <UART_Receive_IT>
      return;
 80052fc:	e25b      	b.n	80057b6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80052fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005302:	2b00      	cmp	r3, #0
 8005304:	f000 80de 	beq.w	80054c4 <HAL_UART_IRQHandler+0x22c>
 8005308:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800530c:	f003 0301 	and.w	r3, r3, #1
 8005310:	2b00      	cmp	r3, #0
 8005312:	d106      	bne.n	8005322 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005314:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005318:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800531c:	2b00      	cmp	r3, #0
 800531e:	f000 80d1 	beq.w	80054c4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005322:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005326:	f003 0301 	and.w	r3, r3, #1
 800532a:	2b00      	cmp	r3, #0
 800532c:	d00b      	beq.n	8005346 <HAL_UART_IRQHandler+0xae>
 800532e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005332:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005336:	2b00      	cmp	r3, #0
 8005338:	d005      	beq.n	8005346 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800533e:	f043 0201 	orr.w	r2, r3, #1
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005346:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800534a:	f003 0304 	and.w	r3, r3, #4
 800534e:	2b00      	cmp	r3, #0
 8005350:	d00b      	beq.n	800536a <HAL_UART_IRQHandler+0xd2>
 8005352:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005356:	f003 0301 	and.w	r3, r3, #1
 800535a:	2b00      	cmp	r3, #0
 800535c:	d005      	beq.n	800536a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005362:	f043 0202 	orr.w	r2, r3, #2
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800536a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800536e:	f003 0302 	and.w	r3, r3, #2
 8005372:	2b00      	cmp	r3, #0
 8005374:	d00b      	beq.n	800538e <HAL_UART_IRQHandler+0xf6>
 8005376:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800537a:	f003 0301 	and.w	r3, r3, #1
 800537e:	2b00      	cmp	r3, #0
 8005380:	d005      	beq.n	800538e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005386:	f043 0204 	orr.w	r2, r3, #4
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800538e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005392:	f003 0308 	and.w	r3, r3, #8
 8005396:	2b00      	cmp	r3, #0
 8005398:	d011      	beq.n	80053be <HAL_UART_IRQHandler+0x126>
 800539a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800539e:	f003 0320 	and.w	r3, r3, #32
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d105      	bne.n	80053b2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80053a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80053aa:	f003 0301 	and.w	r3, r3, #1
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d005      	beq.n	80053be <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053b6:	f043 0208 	orr.w	r2, r3, #8
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	f000 81f2 	beq.w	80057ac <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80053c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053cc:	f003 0320 	and.w	r3, r3, #32
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d008      	beq.n	80053e6 <HAL_UART_IRQHandler+0x14e>
 80053d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053d8:	f003 0320 	and.w	r3, r3, #32
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d002      	beq.n	80053e6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f000 fd24 	bl	8005e2e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	695b      	ldr	r3, [r3, #20]
 80053ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053f0:	2b40      	cmp	r3, #64	@ 0x40
 80053f2:	bf0c      	ite	eq
 80053f4:	2301      	moveq	r3, #1
 80053f6:	2300      	movne	r3, #0
 80053f8:	b2db      	uxtb	r3, r3
 80053fa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005402:	f003 0308 	and.w	r3, r3, #8
 8005406:	2b00      	cmp	r3, #0
 8005408:	d103      	bne.n	8005412 <HAL_UART_IRQHandler+0x17a>
 800540a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800540e:	2b00      	cmp	r3, #0
 8005410:	d04f      	beq.n	80054b2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f000 fc2c 	bl	8005c70 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	695b      	ldr	r3, [r3, #20]
 800541e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005422:	2b40      	cmp	r3, #64	@ 0x40
 8005424:	d141      	bne.n	80054aa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	3314      	adds	r3, #20
 800542c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005430:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005434:	e853 3f00 	ldrex	r3, [r3]
 8005438:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800543c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005440:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005444:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	3314      	adds	r3, #20
 800544e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005452:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005456:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800545a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800545e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005462:	e841 2300 	strex	r3, r2, [r1]
 8005466:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800546a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800546e:	2b00      	cmp	r3, #0
 8005470:	d1d9      	bne.n	8005426 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005476:	2b00      	cmp	r3, #0
 8005478:	d013      	beq.n	80054a2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800547e:	4a7e      	ldr	r2, [pc, #504]	@ (8005678 <HAL_UART_IRQHandler+0x3e0>)
 8005480:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005486:	4618      	mov	r0, r3
 8005488:	f7fe f99e 	bl	80037c8 <HAL_DMA_Abort_IT>
 800548c:	4603      	mov	r3, r0
 800548e:	2b00      	cmp	r3, #0
 8005490:	d016      	beq.n	80054c0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005496:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005498:	687a      	ldr	r2, [r7, #4]
 800549a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800549c:	4610      	mov	r0, r2
 800549e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054a0:	e00e      	b.n	80054c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f000 f9b2 	bl	800580c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054a8:	e00a      	b.n	80054c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f000 f9ae 	bl	800580c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054b0:	e006      	b.n	80054c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f000 f9aa 	bl	800580c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2200      	movs	r2, #0
 80054bc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80054be:	e175      	b.n	80057ac <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054c0:	bf00      	nop
    return;
 80054c2:	e173      	b.n	80057ac <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	f040 814f 	bne.w	800576c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80054ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054d2:	f003 0310 	and.w	r3, r3, #16
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	f000 8148 	beq.w	800576c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80054dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054e0:	f003 0310 	and.w	r3, r3, #16
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	f000 8141 	beq.w	800576c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80054ea:	2300      	movs	r3, #0
 80054ec:	60bb      	str	r3, [r7, #8]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	60bb      	str	r3, [r7, #8]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	60bb      	str	r3, [r7, #8]
 80054fe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	695b      	ldr	r3, [r3, #20]
 8005506:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800550a:	2b40      	cmp	r3, #64	@ 0x40
 800550c:	f040 80b6 	bne.w	800567c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800551c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005520:	2b00      	cmp	r3, #0
 8005522:	f000 8145 	beq.w	80057b0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800552a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800552e:	429a      	cmp	r2, r3
 8005530:	f080 813e 	bcs.w	80057b0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800553a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005540:	69db      	ldr	r3, [r3, #28]
 8005542:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005546:	f000 8088 	beq.w	800565a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	330c      	adds	r3, #12
 8005550:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005554:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005558:	e853 3f00 	ldrex	r3, [r3]
 800555c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005560:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005564:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005568:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	330c      	adds	r3, #12
 8005572:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005576:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800557a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800557e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005582:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005586:	e841 2300 	strex	r3, r2, [r1]
 800558a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800558e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005592:	2b00      	cmp	r3, #0
 8005594:	d1d9      	bne.n	800554a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	3314      	adds	r3, #20
 800559c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800559e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80055a0:	e853 3f00 	ldrex	r3, [r3]
 80055a4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80055a6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80055a8:	f023 0301 	bic.w	r3, r3, #1
 80055ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	3314      	adds	r3, #20
 80055b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80055ba:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80055be:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055c0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80055c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80055c6:	e841 2300 	strex	r3, r2, [r1]
 80055ca:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80055cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d1e1      	bne.n	8005596 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	3314      	adds	r3, #20
 80055d8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055da:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80055dc:	e853 3f00 	ldrex	r3, [r3]
 80055e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80055e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80055e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80055e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	3314      	adds	r3, #20
 80055f2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80055f6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80055f8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055fa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80055fc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80055fe:	e841 2300 	strex	r3, r2, [r1]
 8005602:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005604:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005606:	2b00      	cmp	r3, #0
 8005608:	d1e3      	bne.n	80055d2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2220      	movs	r2, #32
 800560e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2200      	movs	r2, #0
 8005616:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	330c      	adds	r3, #12
 800561e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005620:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005622:	e853 3f00 	ldrex	r3, [r3]
 8005626:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005628:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800562a:	f023 0310 	bic.w	r3, r3, #16
 800562e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	330c      	adds	r3, #12
 8005638:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800563c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800563e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005640:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005642:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005644:	e841 2300 	strex	r3, r2, [r1]
 8005648:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800564a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800564c:	2b00      	cmp	r3, #0
 800564e:	d1e3      	bne.n	8005618 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005654:	4618      	mov	r0, r3
 8005656:	f7fe f847 	bl	80036e8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2202      	movs	r2, #2
 800565e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005668:	b29b      	uxth	r3, r3
 800566a:	1ad3      	subs	r3, r2, r3
 800566c:	b29b      	uxth	r3, r3
 800566e:	4619      	mov	r1, r3
 8005670:	6878      	ldr	r0, [r7, #4]
 8005672:	f000 f8d5 	bl	8005820 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005676:	e09b      	b.n	80057b0 <HAL_UART_IRQHandler+0x518>
 8005678:	08005d37 	.word	0x08005d37
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005684:	b29b      	uxth	r3, r3
 8005686:	1ad3      	subs	r3, r2, r3
 8005688:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005690:	b29b      	uxth	r3, r3
 8005692:	2b00      	cmp	r3, #0
 8005694:	f000 808e 	beq.w	80057b4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005698:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800569c:	2b00      	cmp	r3, #0
 800569e:	f000 8089 	beq.w	80057b4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	330c      	adds	r3, #12
 80056a8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056ac:	e853 3f00 	ldrex	r3, [r3]
 80056b0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80056b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80056b8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	330c      	adds	r3, #12
 80056c2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80056c6:	647a      	str	r2, [r7, #68]	@ 0x44
 80056c8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ca:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80056cc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80056ce:	e841 2300 	strex	r3, r2, [r1]
 80056d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80056d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d1e3      	bne.n	80056a2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	3314      	adds	r3, #20
 80056e0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056e4:	e853 3f00 	ldrex	r3, [r3]
 80056e8:	623b      	str	r3, [r7, #32]
   return(result);
 80056ea:	6a3b      	ldr	r3, [r7, #32]
 80056ec:	f023 0301 	bic.w	r3, r3, #1
 80056f0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	3314      	adds	r3, #20
 80056fa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80056fe:	633a      	str	r2, [r7, #48]	@ 0x30
 8005700:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005702:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005704:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005706:	e841 2300 	strex	r3, r2, [r1]
 800570a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800570c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800570e:	2b00      	cmp	r3, #0
 8005710:	d1e3      	bne.n	80056da <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2220      	movs	r2, #32
 8005716:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2200      	movs	r2, #0
 800571e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	330c      	adds	r3, #12
 8005726:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	e853 3f00 	ldrex	r3, [r3]
 800572e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f023 0310 	bic.w	r3, r3, #16
 8005736:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	330c      	adds	r3, #12
 8005740:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005744:	61fa      	str	r2, [r7, #28]
 8005746:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005748:	69b9      	ldr	r1, [r7, #24]
 800574a:	69fa      	ldr	r2, [r7, #28]
 800574c:	e841 2300 	strex	r3, r2, [r1]
 8005750:	617b      	str	r3, [r7, #20]
   return(result);
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d1e3      	bne.n	8005720 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2202      	movs	r2, #2
 800575c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800575e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005762:	4619      	mov	r1, r3
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f000 f85b 	bl	8005820 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800576a:	e023      	b.n	80057b4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800576c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005770:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005774:	2b00      	cmp	r3, #0
 8005776:	d009      	beq.n	800578c <HAL_UART_IRQHandler+0x4f4>
 8005778:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800577c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005780:	2b00      	cmp	r3, #0
 8005782:	d003      	beq.n	800578c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	f000 faea 	bl	8005d5e <UART_Transmit_IT>
    return;
 800578a:	e014      	b.n	80057b6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800578c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005790:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005794:	2b00      	cmp	r3, #0
 8005796:	d00e      	beq.n	80057b6 <HAL_UART_IRQHandler+0x51e>
 8005798:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800579c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d008      	beq.n	80057b6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	f000 fb2a 	bl	8005dfe <UART_EndTransmit_IT>
    return;
 80057aa:	e004      	b.n	80057b6 <HAL_UART_IRQHandler+0x51e>
    return;
 80057ac:	bf00      	nop
 80057ae:	e002      	b.n	80057b6 <HAL_UART_IRQHandler+0x51e>
      return;
 80057b0:	bf00      	nop
 80057b2:	e000      	b.n	80057b6 <HAL_UART_IRQHandler+0x51e>
      return;
 80057b4:	bf00      	nop
  }
}
 80057b6:	37e8      	adds	r7, #232	@ 0xe8
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}

080057bc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80057bc:	b480      	push	{r7}
 80057be:	b083      	sub	sp, #12
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80057c4:	bf00      	nop
 80057c6:	370c      	adds	r7, #12
 80057c8:	46bd      	mov	sp, r7
 80057ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ce:	4770      	bx	lr

080057d0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b083      	sub	sp, #12
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80057d8:	bf00      	nop
 80057da:	370c      	adds	r7, #12
 80057dc:	46bd      	mov	sp, r7
 80057de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e2:	4770      	bx	lr

080057e4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b083      	sub	sp, #12
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80057ec:	bf00      	nop
 80057ee:	370c      	adds	r7, #12
 80057f0:	46bd      	mov	sp, r7
 80057f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f6:	4770      	bx	lr

080057f8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b083      	sub	sp, #12
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005800:	bf00      	nop
 8005802:	370c      	adds	r7, #12
 8005804:	46bd      	mov	sp, r7
 8005806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580a:	4770      	bx	lr

0800580c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800580c:	b480      	push	{r7}
 800580e:	b083      	sub	sp, #12
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005814:	bf00      	nop
 8005816:	370c      	adds	r7, #12
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr

08005820 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005820:	b480      	push	{r7}
 8005822:	b083      	sub	sp, #12
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
 8005828:	460b      	mov	r3, r1
 800582a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800582c:	bf00      	nop
 800582e:	370c      	adds	r7, #12
 8005830:	46bd      	mov	sp, r7
 8005832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005836:	4770      	bx	lr

08005838 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b090      	sub	sp, #64	@ 0x40
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005844:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005850:	2b00      	cmp	r3, #0
 8005852:	d137      	bne.n	80058c4 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8005854:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005856:	2200      	movs	r2, #0
 8005858:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800585a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	3314      	adds	r3, #20
 8005860:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005864:	e853 3f00 	ldrex	r3, [r3]
 8005868:	623b      	str	r3, [r7, #32]
   return(result);
 800586a:	6a3b      	ldr	r3, [r7, #32]
 800586c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005870:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005872:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	3314      	adds	r3, #20
 8005878:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800587a:	633a      	str	r2, [r7, #48]	@ 0x30
 800587c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800587e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005880:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005882:	e841 2300 	strex	r3, r2, [r1]
 8005886:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005888:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800588a:	2b00      	cmp	r3, #0
 800588c:	d1e5      	bne.n	800585a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800588e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	330c      	adds	r3, #12
 8005894:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	e853 3f00 	ldrex	r3, [r3]
 800589c:	60fb      	str	r3, [r7, #12]
   return(result);
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80058a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80058a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	330c      	adds	r3, #12
 80058ac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80058ae:	61fa      	str	r2, [r7, #28]
 80058b0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058b2:	69b9      	ldr	r1, [r7, #24]
 80058b4:	69fa      	ldr	r2, [r7, #28]
 80058b6:	e841 2300 	strex	r3, r2, [r1]
 80058ba:	617b      	str	r3, [r7, #20]
   return(result);
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d1e5      	bne.n	800588e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80058c2:	e002      	b.n	80058ca <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80058c4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80058c6:	f7ff ff79 	bl	80057bc <HAL_UART_TxCpltCallback>
}
 80058ca:	bf00      	nop
 80058cc:	3740      	adds	r7, #64	@ 0x40
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd80      	pop	{r7, pc}

080058d2 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80058d2:	b580      	push	{r7, lr}
 80058d4:	b084      	sub	sp, #16
 80058d6:	af00      	add	r7, sp, #0
 80058d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058de:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80058e0:	68f8      	ldr	r0, [r7, #12]
 80058e2:	f7ff ff75 	bl	80057d0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80058e6:	bf00      	nop
 80058e8:	3710      	adds	r7, #16
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}

080058ee <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80058ee:	b580      	push	{r7, lr}
 80058f0:	b09c      	sub	sp, #112	@ 0x70
 80058f2:	af00      	add	r7, sp, #0
 80058f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058fa:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005906:	2b00      	cmp	r3, #0
 8005908:	d172      	bne.n	80059f0 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800590a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800590c:	2200      	movs	r2, #0
 800590e:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005910:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	330c      	adds	r3, #12
 8005916:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005918:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800591a:	e853 3f00 	ldrex	r3, [r3]
 800591e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005920:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005922:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005926:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005928:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	330c      	adds	r3, #12
 800592e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8005930:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005932:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005934:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005936:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005938:	e841 2300 	strex	r3, r2, [r1]
 800593c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800593e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005940:	2b00      	cmp	r3, #0
 8005942:	d1e5      	bne.n	8005910 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005944:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	3314      	adds	r3, #20
 800594a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800594c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800594e:	e853 3f00 	ldrex	r3, [r3]
 8005952:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005954:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005956:	f023 0301 	bic.w	r3, r3, #1
 800595a:	667b      	str	r3, [r7, #100]	@ 0x64
 800595c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	3314      	adds	r3, #20
 8005962:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005964:	647a      	str	r2, [r7, #68]	@ 0x44
 8005966:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005968:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800596a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800596c:	e841 2300 	strex	r3, r2, [r1]
 8005970:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005972:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005974:	2b00      	cmp	r3, #0
 8005976:	d1e5      	bne.n	8005944 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005978:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	3314      	adds	r3, #20
 800597e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005982:	e853 3f00 	ldrex	r3, [r3]
 8005986:	623b      	str	r3, [r7, #32]
   return(result);
 8005988:	6a3b      	ldr	r3, [r7, #32]
 800598a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800598e:	663b      	str	r3, [r7, #96]	@ 0x60
 8005990:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	3314      	adds	r3, #20
 8005996:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005998:	633a      	str	r2, [r7, #48]	@ 0x30
 800599a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800599c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800599e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059a0:	e841 2300 	strex	r3, r2, [r1]
 80059a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80059a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d1e5      	bne.n	8005978 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80059ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80059ae:	2220      	movs	r2, #32
 80059b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80059b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059b8:	2b01      	cmp	r3, #1
 80059ba:	d119      	bne.n	80059f0 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	330c      	adds	r3, #12
 80059c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	e853 3f00 	ldrex	r3, [r3]
 80059ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	f023 0310 	bic.w	r3, r3, #16
 80059d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80059d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	330c      	adds	r3, #12
 80059da:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80059dc:	61fa      	str	r2, [r7, #28]
 80059de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059e0:	69b9      	ldr	r1, [r7, #24]
 80059e2:	69fa      	ldr	r2, [r7, #28]
 80059e4:	e841 2300 	strex	r3, r2, [r1]
 80059e8:	617b      	str	r3, [r7, #20]
   return(result);
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d1e5      	bne.n	80059bc <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80059f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80059f2:	2200      	movs	r2, #0
 80059f4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80059f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059fa:	2b01      	cmp	r3, #1
 80059fc:	d106      	bne.n	8005a0c <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80059fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005a00:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005a02:	4619      	mov	r1, r3
 8005a04:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005a06:	f7ff ff0b 	bl	8005820 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005a0a:	e002      	b.n	8005a12 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8005a0c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005a0e:	f7ff fee9 	bl	80057e4 <HAL_UART_RxCpltCallback>
}
 8005a12:	bf00      	nop
 8005a14:	3770      	adds	r7, #112	@ 0x70
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bd80      	pop	{r7, pc}

08005a1a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005a1a:	b580      	push	{r7, lr}
 8005a1c:	b084      	sub	sp, #16
 8005a1e:	af00      	add	r7, sp, #0
 8005a20:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a26:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a32:	2b01      	cmp	r3, #1
 8005a34:	d108      	bne.n	8005a48 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005a3a:	085b      	lsrs	r3, r3, #1
 8005a3c:	b29b      	uxth	r3, r3
 8005a3e:	4619      	mov	r1, r3
 8005a40:	68f8      	ldr	r0, [r7, #12]
 8005a42:	f7ff feed 	bl	8005820 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005a46:	e002      	b.n	8005a4e <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8005a48:	68f8      	ldr	r0, [r7, #12]
 8005a4a:	f7ff fed5 	bl	80057f8 <HAL_UART_RxHalfCpltCallback>
}
 8005a4e:	bf00      	nop
 8005a50:	3710      	adds	r7, #16
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}

08005a56 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005a56:	b580      	push	{r7, lr}
 8005a58:	b084      	sub	sp, #16
 8005a5a:	af00      	add	r7, sp, #0
 8005a5c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a66:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	695b      	ldr	r3, [r3, #20]
 8005a6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a72:	2b80      	cmp	r3, #128	@ 0x80
 8005a74:	bf0c      	ite	eq
 8005a76:	2301      	moveq	r3, #1
 8005a78:	2300      	movne	r3, #0
 8005a7a:	b2db      	uxtb	r3, r3
 8005a7c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a84:	b2db      	uxtb	r3, r3
 8005a86:	2b21      	cmp	r3, #33	@ 0x21
 8005a88:	d108      	bne.n	8005a9c <UART_DMAError+0x46>
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d005      	beq.n	8005a9c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	2200      	movs	r2, #0
 8005a94:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8005a96:	68b8      	ldr	r0, [r7, #8]
 8005a98:	f000 f8c2 	bl	8005c20 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	695b      	ldr	r3, [r3, #20]
 8005aa2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005aa6:	2b40      	cmp	r3, #64	@ 0x40
 8005aa8:	bf0c      	ite	eq
 8005aaa:	2301      	moveq	r3, #1
 8005aac:	2300      	movne	r3, #0
 8005aae:	b2db      	uxtb	r3, r3
 8005ab0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005ab8:	b2db      	uxtb	r3, r3
 8005aba:	2b22      	cmp	r3, #34	@ 0x22
 8005abc:	d108      	bne.n	8005ad0 <UART_DMAError+0x7a>
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d005      	beq.n	8005ad0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8005aca:	68b8      	ldr	r0, [r7, #8]
 8005acc:	f000 f8d0 	bl	8005c70 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ad4:	f043 0210 	orr.w	r2, r3, #16
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005adc:	68b8      	ldr	r0, [r7, #8]
 8005ade:	f7ff fe95 	bl	800580c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ae2:	bf00      	nop
 8005ae4:	3710      	adds	r7, #16
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}
	...

08005aec <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b098      	sub	sp, #96	@ 0x60
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	60f8      	str	r0, [r7, #12]
 8005af4:	60b9      	str	r1, [r7, #8]
 8005af6:	4613      	mov	r3, r2
 8005af8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005afa:	68ba      	ldr	r2, [r7, #8]
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	88fa      	ldrh	r2, [r7, #6]
 8005b04:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	2222      	movs	r2, #34	@ 0x22
 8005b10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b18:	4a3e      	ldr	r2, [pc, #248]	@ (8005c14 <UART_Start_Receive_DMA+0x128>)
 8005b1a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b20:	4a3d      	ldr	r2, [pc, #244]	@ (8005c18 <UART_Start_Receive_DMA+0x12c>)
 8005b22:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b28:	4a3c      	ldr	r2, [pc, #240]	@ (8005c1c <UART_Start_Receive_DMA+0x130>)
 8005b2a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b30:	2200      	movs	r2, #0
 8005b32:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005b34:	f107 0308 	add.w	r3, r7, #8
 8005b38:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	3304      	adds	r3, #4
 8005b44:	4619      	mov	r1, r3
 8005b46:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005b48:	681a      	ldr	r2, [r3, #0]
 8005b4a:	88fb      	ldrh	r3, [r7, #6]
 8005b4c:	f7fd fd74 	bl	8003638 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005b50:	2300      	movs	r3, #0
 8005b52:	613b      	str	r3, [r7, #16]
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	613b      	str	r3, [r7, #16]
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	613b      	str	r3, [r7, #16]
 8005b64:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	691b      	ldr	r3, [r3, #16]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d019      	beq.n	8005ba2 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	330c      	adds	r3, #12
 8005b74:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b78:	e853 3f00 	ldrex	r3, [r3]
 8005b7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005b7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b84:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	330c      	adds	r3, #12
 8005b8c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005b8e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8005b90:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b92:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005b94:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005b96:	e841 2300 	strex	r3, r2, [r1]
 8005b9a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005b9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d1e5      	bne.n	8005b6e <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	3314      	adds	r3, #20
 8005ba8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005baa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bac:	e853 3f00 	ldrex	r3, [r3]
 8005bb0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005bb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bb4:	f043 0301 	orr.w	r3, r3, #1
 8005bb8:	657b      	str	r3, [r7, #84]	@ 0x54
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	3314      	adds	r3, #20
 8005bc0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005bc2:	63ba      	str	r2, [r7, #56]	@ 0x38
 8005bc4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bc6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005bc8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005bca:	e841 2300 	strex	r3, r2, [r1]
 8005bce:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005bd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d1e5      	bne.n	8005ba2 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	3314      	adds	r3, #20
 8005bdc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bde:	69bb      	ldr	r3, [r7, #24]
 8005be0:	e853 3f00 	ldrex	r3, [r3]
 8005be4:	617b      	str	r3, [r7, #20]
   return(result);
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005bec:	653b      	str	r3, [r7, #80]	@ 0x50
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	3314      	adds	r3, #20
 8005bf4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005bf6:	627a      	str	r2, [r7, #36]	@ 0x24
 8005bf8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bfa:	6a39      	ldr	r1, [r7, #32]
 8005bfc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005bfe:	e841 2300 	strex	r3, r2, [r1]
 8005c02:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c04:	69fb      	ldr	r3, [r7, #28]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d1e5      	bne.n	8005bd6 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8005c0a:	2300      	movs	r3, #0
}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	3760      	adds	r7, #96	@ 0x60
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}
 8005c14:	080058ef 	.word	0x080058ef
 8005c18:	08005a1b 	.word	0x08005a1b
 8005c1c:	08005a57 	.word	0x08005a57

08005c20 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b089      	sub	sp, #36	@ 0x24
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	330c      	adds	r3, #12
 8005c2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	e853 3f00 	ldrex	r3, [r3]
 8005c36:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005c3e:	61fb      	str	r3, [r7, #28]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	330c      	adds	r3, #12
 8005c46:	69fa      	ldr	r2, [r7, #28]
 8005c48:	61ba      	str	r2, [r7, #24]
 8005c4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c4c:	6979      	ldr	r1, [r7, #20]
 8005c4e:	69ba      	ldr	r2, [r7, #24]
 8005c50:	e841 2300 	strex	r3, r2, [r1]
 8005c54:	613b      	str	r3, [r7, #16]
   return(result);
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d1e5      	bne.n	8005c28 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2220      	movs	r2, #32
 8005c60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8005c64:	bf00      	nop
 8005c66:	3724      	adds	r7, #36	@ 0x24
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6e:	4770      	bx	lr

08005c70 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c70:	b480      	push	{r7}
 8005c72:	b095      	sub	sp, #84	@ 0x54
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	330c      	adds	r3, #12
 8005c7e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c82:	e853 3f00 	ldrex	r3, [r3]
 8005c86:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005c88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c8a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005c8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	330c      	adds	r3, #12
 8005c96:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005c98:	643a      	str	r2, [r7, #64]	@ 0x40
 8005c9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c9c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005c9e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005ca0:	e841 2300 	strex	r3, r2, [r1]
 8005ca4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005ca6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d1e5      	bne.n	8005c78 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	3314      	adds	r3, #20
 8005cb2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cb4:	6a3b      	ldr	r3, [r7, #32]
 8005cb6:	e853 3f00 	ldrex	r3, [r3]
 8005cba:	61fb      	str	r3, [r7, #28]
   return(result);
 8005cbc:	69fb      	ldr	r3, [r7, #28]
 8005cbe:	f023 0301 	bic.w	r3, r3, #1
 8005cc2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	3314      	adds	r3, #20
 8005cca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005ccc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005cce:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cd0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005cd2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005cd4:	e841 2300 	strex	r3, r2, [r1]
 8005cd8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d1e5      	bne.n	8005cac <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	d119      	bne.n	8005d1c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	330c      	adds	r3, #12
 8005cee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	e853 3f00 	ldrex	r3, [r3]
 8005cf6:	60bb      	str	r3, [r7, #8]
   return(result);
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	f023 0310 	bic.w	r3, r3, #16
 8005cfe:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	330c      	adds	r3, #12
 8005d06:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005d08:	61ba      	str	r2, [r7, #24]
 8005d0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d0c:	6979      	ldr	r1, [r7, #20]
 8005d0e:	69ba      	ldr	r2, [r7, #24]
 8005d10:	e841 2300 	strex	r3, r2, [r1]
 8005d14:	613b      	str	r3, [r7, #16]
   return(result);
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d1e5      	bne.n	8005ce8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2220      	movs	r2, #32
 8005d20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2200      	movs	r2, #0
 8005d28:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005d2a:	bf00      	nop
 8005d2c:	3754      	adds	r7, #84	@ 0x54
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d34:	4770      	bx	lr

08005d36 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005d36:	b580      	push	{r7, lr}
 8005d38:	b084      	sub	sp, #16
 8005d3a:	af00      	add	r7, sp, #0
 8005d3c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d42:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	2200      	movs	r2, #0
 8005d48:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005d50:	68f8      	ldr	r0, [r7, #12]
 8005d52:	f7ff fd5b 	bl	800580c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d56:	bf00      	nop
 8005d58:	3710      	adds	r7, #16
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd80      	pop	{r7, pc}

08005d5e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005d5e:	b480      	push	{r7}
 8005d60:	b085      	sub	sp, #20
 8005d62:	af00      	add	r7, sp, #0
 8005d64:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d6c:	b2db      	uxtb	r3, r3
 8005d6e:	2b21      	cmp	r3, #33	@ 0x21
 8005d70:	d13e      	bne.n	8005df0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	689b      	ldr	r3, [r3, #8]
 8005d76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d7a:	d114      	bne.n	8005da6 <UART_Transmit_IT+0x48>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	691b      	ldr	r3, [r3, #16]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d110      	bne.n	8005da6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6a1b      	ldr	r3, [r3, #32]
 8005d88:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	881b      	ldrh	r3, [r3, #0]
 8005d8e:	461a      	mov	r2, r3
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d98:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6a1b      	ldr	r3, [r3, #32]
 8005d9e:	1c9a      	adds	r2, r3, #2
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	621a      	str	r2, [r3, #32]
 8005da4:	e008      	b.n	8005db8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6a1b      	ldr	r3, [r3, #32]
 8005daa:	1c59      	adds	r1, r3, #1
 8005dac:	687a      	ldr	r2, [r7, #4]
 8005dae:	6211      	str	r1, [r2, #32]
 8005db0:	781a      	ldrb	r2, [r3, #0]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005dbc:	b29b      	uxth	r3, r3
 8005dbe:	3b01      	subs	r3, #1
 8005dc0:	b29b      	uxth	r3, r3
 8005dc2:	687a      	ldr	r2, [r7, #4]
 8005dc4:	4619      	mov	r1, r3
 8005dc6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d10f      	bne.n	8005dec <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	68da      	ldr	r2, [r3, #12]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005dda:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	68da      	ldr	r2, [r3, #12]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005dea:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005dec:	2300      	movs	r3, #0
 8005dee:	e000      	b.n	8005df2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005df0:	2302      	movs	r3, #2
  }
}
 8005df2:	4618      	mov	r0, r3
 8005df4:	3714      	adds	r7, #20
 8005df6:	46bd      	mov	sp, r7
 8005df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfc:	4770      	bx	lr

08005dfe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005dfe:	b580      	push	{r7, lr}
 8005e00:	b082      	sub	sp, #8
 8005e02:	af00      	add	r7, sp, #0
 8005e04:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	68da      	ldr	r2, [r3, #12]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005e14:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2220      	movs	r2, #32
 8005e1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f7ff fccc 	bl	80057bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005e24:	2300      	movs	r3, #0
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	3708      	adds	r7, #8
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}

08005e2e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005e2e:	b580      	push	{r7, lr}
 8005e30:	b08c      	sub	sp, #48	@ 0x30
 8005e32:	af00      	add	r7, sp, #0
 8005e34:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005e3c:	b2db      	uxtb	r3, r3
 8005e3e:	2b22      	cmp	r3, #34	@ 0x22
 8005e40:	f040 80ae 	bne.w	8005fa0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	689b      	ldr	r3, [r3, #8]
 8005e48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e4c:	d117      	bne.n	8005e7e <UART_Receive_IT+0x50>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	691b      	ldr	r3, [r3, #16]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d113      	bne.n	8005e7e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005e56:	2300      	movs	r3, #0
 8005e58:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e5e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	b29b      	uxth	r3, r3
 8005e68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e6c:	b29a      	uxth	r2, r3
 8005e6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e70:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e76:	1c9a      	adds	r2, r3, #2
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	629a      	str	r2, [r3, #40]	@ 0x28
 8005e7c:	e026      	b.n	8005ecc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e82:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005e84:	2300      	movs	r3, #0
 8005e86:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	689b      	ldr	r3, [r3, #8]
 8005e8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e90:	d007      	beq.n	8005ea2 <UART_Receive_IT+0x74>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	689b      	ldr	r3, [r3, #8]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d10a      	bne.n	8005eb0 <UART_Receive_IT+0x82>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	691b      	ldr	r3, [r3, #16]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d106      	bne.n	8005eb0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	b2da      	uxtb	r2, r3
 8005eaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005eac:	701a      	strb	r2, [r3, #0]
 8005eae:	e008      	b.n	8005ec2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	b2db      	uxtb	r3, r3
 8005eb8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ebc:	b2da      	uxtb	r2, r3
 8005ebe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ec0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ec6:	1c5a      	adds	r2, r3, #1
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005ed0:	b29b      	uxth	r3, r3
 8005ed2:	3b01      	subs	r3, #1
 8005ed4:	b29b      	uxth	r3, r3
 8005ed6:	687a      	ldr	r2, [r7, #4]
 8005ed8:	4619      	mov	r1, r3
 8005eda:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d15d      	bne.n	8005f9c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	68da      	ldr	r2, [r3, #12]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f022 0220 	bic.w	r2, r2, #32
 8005eee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	68da      	ldr	r2, [r3, #12]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005efe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	695a      	ldr	r2, [r3, #20]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f022 0201 	bic.w	r2, r2, #1
 8005f0e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2220      	movs	r2, #32
 8005f14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f22:	2b01      	cmp	r3, #1
 8005f24:	d135      	bne.n	8005f92 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	330c      	adds	r3, #12
 8005f32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	e853 3f00 	ldrex	r3, [r3]
 8005f3a:	613b      	str	r3, [r7, #16]
   return(result);
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	f023 0310 	bic.w	r3, r3, #16
 8005f42:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	330c      	adds	r3, #12
 8005f4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f4c:	623a      	str	r2, [r7, #32]
 8005f4e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f50:	69f9      	ldr	r1, [r7, #28]
 8005f52:	6a3a      	ldr	r2, [r7, #32]
 8005f54:	e841 2300 	strex	r3, r2, [r1]
 8005f58:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f5a:	69bb      	ldr	r3, [r7, #24]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d1e5      	bne.n	8005f2c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f003 0310 	and.w	r3, r3, #16
 8005f6a:	2b10      	cmp	r3, #16
 8005f6c:	d10a      	bne.n	8005f84 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005f6e:	2300      	movs	r3, #0
 8005f70:	60fb      	str	r3, [r7, #12]
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	60fb      	str	r3, [r7, #12]
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	60fb      	str	r3, [r7, #12]
 8005f82:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005f88:	4619      	mov	r1, r3
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f7ff fc48 	bl	8005820 <HAL_UARTEx_RxEventCallback>
 8005f90:	e002      	b.n	8005f98 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f7ff fc26 	bl	80057e4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005f98:	2300      	movs	r3, #0
 8005f9a:	e002      	b.n	8005fa2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	e000      	b.n	8005fa2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005fa0:	2302      	movs	r3, #2
  }
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	3730      	adds	r7, #48	@ 0x30
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}
	...

08005fac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005fac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005fb0:	b0c0      	sub	sp, #256	@ 0x100
 8005fb2:	af00      	add	r7, sp, #0
 8005fb4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005fb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	691b      	ldr	r3, [r3, #16]
 8005fc0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005fc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fc8:	68d9      	ldr	r1, [r3, #12]
 8005fca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fce:	681a      	ldr	r2, [r3, #0]
 8005fd0:	ea40 0301 	orr.w	r3, r0, r1
 8005fd4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005fd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fda:	689a      	ldr	r2, [r3, #8]
 8005fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fe0:	691b      	ldr	r3, [r3, #16]
 8005fe2:	431a      	orrs	r2, r3
 8005fe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fe8:	695b      	ldr	r3, [r3, #20]
 8005fea:	431a      	orrs	r2, r3
 8005fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ff0:	69db      	ldr	r3, [r3, #28]
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	68db      	ldr	r3, [r3, #12]
 8006000:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006004:	f021 010c 	bic.w	r1, r1, #12
 8006008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800600c:	681a      	ldr	r2, [r3, #0]
 800600e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006012:	430b      	orrs	r3, r1
 8006014:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006016:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	695b      	ldr	r3, [r3, #20]
 800601e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006022:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006026:	6999      	ldr	r1, [r3, #24]
 8006028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800602c:	681a      	ldr	r2, [r3, #0]
 800602e:	ea40 0301 	orr.w	r3, r0, r1
 8006032:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006038:	681a      	ldr	r2, [r3, #0]
 800603a:	4b8f      	ldr	r3, [pc, #572]	@ (8006278 <UART_SetConfig+0x2cc>)
 800603c:	429a      	cmp	r2, r3
 800603e:	d005      	beq.n	800604c <UART_SetConfig+0xa0>
 8006040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006044:	681a      	ldr	r2, [r3, #0]
 8006046:	4b8d      	ldr	r3, [pc, #564]	@ (800627c <UART_SetConfig+0x2d0>)
 8006048:	429a      	cmp	r2, r3
 800604a:	d104      	bne.n	8006056 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800604c:	f7fe fa54 	bl	80044f8 <HAL_RCC_GetPCLK2Freq>
 8006050:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006054:	e003      	b.n	800605e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006056:	f7fe fa3b 	bl	80044d0 <HAL_RCC_GetPCLK1Freq>
 800605a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800605e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006062:	69db      	ldr	r3, [r3, #28]
 8006064:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006068:	f040 810c 	bne.w	8006284 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800606c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006070:	2200      	movs	r2, #0
 8006072:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006076:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800607a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800607e:	4622      	mov	r2, r4
 8006080:	462b      	mov	r3, r5
 8006082:	1891      	adds	r1, r2, r2
 8006084:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006086:	415b      	adcs	r3, r3
 8006088:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800608a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800608e:	4621      	mov	r1, r4
 8006090:	eb12 0801 	adds.w	r8, r2, r1
 8006094:	4629      	mov	r1, r5
 8006096:	eb43 0901 	adc.w	r9, r3, r1
 800609a:	f04f 0200 	mov.w	r2, #0
 800609e:	f04f 0300 	mov.w	r3, #0
 80060a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80060a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80060aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80060ae:	4690      	mov	r8, r2
 80060b0:	4699      	mov	r9, r3
 80060b2:	4623      	mov	r3, r4
 80060b4:	eb18 0303 	adds.w	r3, r8, r3
 80060b8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80060bc:	462b      	mov	r3, r5
 80060be:	eb49 0303 	adc.w	r3, r9, r3
 80060c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80060c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	2200      	movs	r2, #0
 80060ce:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80060d2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80060d6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80060da:	460b      	mov	r3, r1
 80060dc:	18db      	adds	r3, r3, r3
 80060de:	653b      	str	r3, [r7, #80]	@ 0x50
 80060e0:	4613      	mov	r3, r2
 80060e2:	eb42 0303 	adc.w	r3, r2, r3
 80060e6:	657b      	str	r3, [r7, #84]	@ 0x54
 80060e8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80060ec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80060f0:	f7fa fde4 	bl	8000cbc <__aeabi_uldivmod>
 80060f4:	4602      	mov	r2, r0
 80060f6:	460b      	mov	r3, r1
 80060f8:	4b61      	ldr	r3, [pc, #388]	@ (8006280 <UART_SetConfig+0x2d4>)
 80060fa:	fba3 2302 	umull	r2, r3, r3, r2
 80060fe:	095b      	lsrs	r3, r3, #5
 8006100:	011c      	lsls	r4, r3, #4
 8006102:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006106:	2200      	movs	r2, #0
 8006108:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800610c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006110:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006114:	4642      	mov	r2, r8
 8006116:	464b      	mov	r3, r9
 8006118:	1891      	adds	r1, r2, r2
 800611a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800611c:	415b      	adcs	r3, r3
 800611e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006120:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006124:	4641      	mov	r1, r8
 8006126:	eb12 0a01 	adds.w	sl, r2, r1
 800612a:	4649      	mov	r1, r9
 800612c:	eb43 0b01 	adc.w	fp, r3, r1
 8006130:	f04f 0200 	mov.w	r2, #0
 8006134:	f04f 0300 	mov.w	r3, #0
 8006138:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800613c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006140:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006144:	4692      	mov	sl, r2
 8006146:	469b      	mov	fp, r3
 8006148:	4643      	mov	r3, r8
 800614a:	eb1a 0303 	adds.w	r3, sl, r3
 800614e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006152:	464b      	mov	r3, r9
 8006154:	eb4b 0303 	adc.w	r3, fp, r3
 8006158:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800615c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006160:	685b      	ldr	r3, [r3, #4]
 8006162:	2200      	movs	r2, #0
 8006164:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006168:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800616c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006170:	460b      	mov	r3, r1
 8006172:	18db      	adds	r3, r3, r3
 8006174:	643b      	str	r3, [r7, #64]	@ 0x40
 8006176:	4613      	mov	r3, r2
 8006178:	eb42 0303 	adc.w	r3, r2, r3
 800617c:	647b      	str	r3, [r7, #68]	@ 0x44
 800617e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006182:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006186:	f7fa fd99 	bl	8000cbc <__aeabi_uldivmod>
 800618a:	4602      	mov	r2, r0
 800618c:	460b      	mov	r3, r1
 800618e:	4611      	mov	r1, r2
 8006190:	4b3b      	ldr	r3, [pc, #236]	@ (8006280 <UART_SetConfig+0x2d4>)
 8006192:	fba3 2301 	umull	r2, r3, r3, r1
 8006196:	095b      	lsrs	r3, r3, #5
 8006198:	2264      	movs	r2, #100	@ 0x64
 800619a:	fb02 f303 	mul.w	r3, r2, r3
 800619e:	1acb      	subs	r3, r1, r3
 80061a0:	00db      	lsls	r3, r3, #3
 80061a2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80061a6:	4b36      	ldr	r3, [pc, #216]	@ (8006280 <UART_SetConfig+0x2d4>)
 80061a8:	fba3 2302 	umull	r2, r3, r3, r2
 80061ac:	095b      	lsrs	r3, r3, #5
 80061ae:	005b      	lsls	r3, r3, #1
 80061b0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80061b4:	441c      	add	r4, r3
 80061b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80061ba:	2200      	movs	r2, #0
 80061bc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80061c0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80061c4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80061c8:	4642      	mov	r2, r8
 80061ca:	464b      	mov	r3, r9
 80061cc:	1891      	adds	r1, r2, r2
 80061ce:	63b9      	str	r1, [r7, #56]	@ 0x38
 80061d0:	415b      	adcs	r3, r3
 80061d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80061d4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80061d8:	4641      	mov	r1, r8
 80061da:	1851      	adds	r1, r2, r1
 80061dc:	6339      	str	r1, [r7, #48]	@ 0x30
 80061de:	4649      	mov	r1, r9
 80061e0:	414b      	adcs	r3, r1
 80061e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80061e4:	f04f 0200 	mov.w	r2, #0
 80061e8:	f04f 0300 	mov.w	r3, #0
 80061ec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80061f0:	4659      	mov	r1, fp
 80061f2:	00cb      	lsls	r3, r1, #3
 80061f4:	4651      	mov	r1, sl
 80061f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80061fa:	4651      	mov	r1, sl
 80061fc:	00ca      	lsls	r2, r1, #3
 80061fe:	4610      	mov	r0, r2
 8006200:	4619      	mov	r1, r3
 8006202:	4603      	mov	r3, r0
 8006204:	4642      	mov	r2, r8
 8006206:	189b      	adds	r3, r3, r2
 8006208:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800620c:	464b      	mov	r3, r9
 800620e:	460a      	mov	r2, r1
 8006210:	eb42 0303 	adc.w	r3, r2, r3
 8006214:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800621c:	685b      	ldr	r3, [r3, #4]
 800621e:	2200      	movs	r2, #0
 8006220:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006224:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006228:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800622c:	460b      	mov	r3, r1
 800622e:	18db      	adds	r3, r3, r3
 8006230:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006232:	4613      	mov	r3, r2
 8006234:	eb42 0303 	adc.w	r3, r2, r3
 8006238:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800623a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800623e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006242:	f7fa fd3b 	bl	8000cbc <__aeabi_uldivmod>
 8006246:	4602      	mov	r2, r0
 8006248:	460b      	mov	r3, r1
 800624a:	4b0d      	ldr	r3, [pc, #52]	@ (8006280 <UART_SetConfig+0x2d4>)
 800624c:	fba3 1302 	umull	r1, r3, r3, r2
 8006250:	095b      	lsrs	r3, r3, #5
 8006252:	2164      	movs	r1, #100	@ 0x64
 8006254:	fb01 f303 	mul.w	r3, r1, r3
 8006258:	1ad3      	subs	r3, r2, r3
 800625a:	00db      	lsls	r3, r3, #3
 800625c:	3332      	adds	r3, #50	@ 0x32
 800625e:	4a08      	ldr	r2, [pc, #32]	@ (8006280 <UART_SetConfig+0x2d4>)
 8006260:	fba2 2303 	umull	r2, r3, r2, r3
 8006264:	095b      	lsrs	r3, r3, #5
 8006266:	f003 0207 	and.w	r2, r3, #7
 800626a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4422      	add	r2, r4
 8006272:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006274:	e106      	b.n	8006484 <UART_SetConfig+0x4d8>
 8006276:	bf00      	nop
 8006278:	40011000 	.word	0x40011000
 800627c:	40011400 	.word	0x40011400
 8006280:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006284:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006288:	2200      	movs	r2, #0
 800628a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800628e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006292:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006296:	4642      	mov	r2, r8
 8006298:	464b      	mov	r3, r9
 800629a:	1891      	adds	r1, r2, r2
 800629c:	6239      	str	r1, [r7, #32]
 800629e:	415b      	adcs	r3, r3
 80062a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80062a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80062a6:	4641      	mov	r1, r8
 80062a8:	1854      	adds	r4, r2, r1
 80062aa:	4649      	mov	r1, r9
 80062ac:	eb43 0501 	adc.w	r5, r3, r1
 80062b0:	f04f 0200 	mov.w	r2, #0
 80062b4:	f04f 0300 	mov.w	r3, #0
 80062b8:	00eb      	lsls	r3, r5, #3
 80062ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80062be:	00e2      	lsls	r2, r4, #3
 80062c0:	4614      	mov	r4, r2
 80062c2:	461d      	mov	r5, r3
 80062c4:	4643      	mov	r3, r8
 80062c6:	18e3      	adds	r3, r4, r3
 80062c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80062cc:	464b      	mov	r3, r9
 80062ce:	eb45 0303 	adc.w	r3, r5, r3
 80062d2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80062d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	2200      	movs	r2, #0
 80062de:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80062e2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80062e6:	f04f 0200 	mov.w	r2, #0
 80062ea:	f04f 0300 	mov.w	r3, #0
 80062ee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80062f2:	4629      	mov	r1, r5
 80062f4:	008b      	lsls	r3, r1, #2
 80062f6:	4621      	mov	r1, r4
 80062f8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80062fc:	4621      	mov	r1, r4
 80062fe:	008a      	lsls	r2, r1, #2
 8006300:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006304:	f7fa fcda 	bl	8000cbc <__aeabi_uldivmod>
 8006308:	4602      	mov	r2, r0
 800630a:	460b      	mov	r3, r1
 800630c:	4b60      	ldr	r3, [pc, #384]	@ (8006490 <UART_SetConfig+0x4e4>)
 800630e:	fba3 2302 	umull	r2, r3, r3, r2
 8006312:	095b      	lsrs	r3, r3, #5
 8006314:	011c      	lsls	r4, r3, #4
 8006316:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800631a:	2200      	movs	r2, #0
 800631c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006320:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006324:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006328:	4642      	mov	r2, r8
 800632a:	464b      	mov	r3, r9
 800632c:	1891      	adds	r1, r2, r2
 800632e:	61b9      	str	r1, [r7, #24]
 8006330:	415b      	adcs	r3, r3
 8006332:	61fb      	str	r3, [r7, #28]
 8006334:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006338:	4641      	mov	r1, r8
 800633a:	1851      	adds	r1, r2, r1
 800633c:	6139      	str	r1, [r7, #16]
 800633e:	4649      	mov	r1, r9
 8006340:	414b      	adcs	r3, r1
 8006342:	617b      	str	r3, [r7, #20]
 8006344:	f04f 0200 	mov.w	r2, #0
 8006348:	f04f 0300 	mov.w	r3, #0
 800634c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006350:	4659      	mov	r1, fp
 8006352:	00cb      	lsls	r3, r1, #3
 8006354:	4651      	mov	r1, sl
 8006356:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800635a:	4651      	mov	r1, sl
 800635c:	00ca      	lsls	r2, r1, #3
 800635e:	4610      	mov	r0, r2
 8006360:	4619      	mov	r1, r3
 8006362:	4603      	mov	r3, r0
 8006364:	4642      	mov	r2, r8
 8006366:	189b      	adds	r3, r3, r2
 8006368:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800636c:	464b      	mov	r3, r9
 800636e:	460a      	mov	r2, r1
 8006370:	eb42 0303 	adc.w	r3, r2, r3
 8006374:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006378:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	2200      	movs	r2, #0
 8006380:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006382:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006384:	f04f 0200 	mov.w	r2, #0
 8006388:	f04f 0300 	mov.w	r3, #0
 800638c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006390:	4649      	mov	r1, r9
 8006392:	008b      	lsls	r3, r1, #2
 8006394:	4641      	mov	r1, r8
 8006396:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800639a:	4641      	mov	r1, r8
 800639c:	008a      	lsls	r2, r1, #2
 800639e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80063a2:	f7fa fc8b 	bl	8000cbc <__aeabi_uldivmod>
 80063a6:	4602      	mov	r2, r0
 80063a8:	460b      	mov	r3, r1
 80063aa:	4611      	mov	r1, r2
 80063ac:	4b38      	ldr	r3, [pc, #224]	@ (8006490 <UART_SetConfig+0x4e4>)
 80063ae:	fba3 2301 	umull	r2, r3, r3, r1
 80063b2:	095b      	lsrs	r3, r3, #5
 80063b4:	2264      	movs	r2, #100	@ 0x64
 80063b6:	fb02 f303 	mul.w	r3, r2, r3
 80063ba:	1acb      	subs	r3, r1, r3
 80063bc:	011b      	lsls	r3, r3, #4
 80063be:	3332      	adds	r3, #50	@ 0x32
 80063c0:	4a33      	ldr	r2, [pc, #204]	@ (8006490 <UART_SetConfig+0x4e4>)
 80063c2:	fba2 2303 	umull	r2, r3, r2, r3
 80063c6:	095b      	lsrs	r3, r3, #5
 80063c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80063cc:	441c      	add	r4, r3
 80063ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80063d2:	2200      	movs	r2, #0
 80063d4:	673b      	str	r3, [r7, #112]	@ 0x70
 80063d6:	677a      	str	r2, [r7, #116]	@ 0x74
 80063d8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80063dc:	4642      	mov	r2, r8
 80063de:	464b      	mov	r3, r9
 80063e0:	1891      	adds	r1, r2, r2
 80063e2:	60b9      	str	r1, [r7, #8]
 80063e4:	415b      	adcs	r3, r3
 80063e6:	60fb      	str	r3, [r7, #12]
 80063e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80063ec:	4641      	mov	r1, r8
 80063ee:	1851      	adds	r1, r2, r1
 80063f0:	6039      	str	r1, [r7, #0]
 80063f2:	4649      	mov	r1, r9
 80063f4:	414b      	adcs	r3, r1
 80063f6:	607b      	str	r3, [r7, #4]
 80063f8:	f04f 0200 	mov.w	r2, #0
 80063fc:	f04f 0300 	mov.w	r3, #0
 8006400:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006404:	4659      	mov	r1, fp
 8006406:	00cb      	lsls	r3, r1, #3
 8006408:	4651      	mov	r1, sl
 800640a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800640e:	4651      	mov	r1, sl
 8006410:	00ca      	lsls	r2, r1, #3
 8006412:	4610      	mov	r0, r2
 8006414:	4619      	mov	r1, r3
 8006416:	4603      	mov	r3, r0
 8006418:	4642      	mov	r2, r8
 800641a:	189b      	adds	r3, r3, r2
 800641c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800641e:	464b      	mov	r3, r9
 8006420:	460a      	mov	r2, r1
 8006422:	eb42 0303 	adc.w	r3, r2, r3
 8006426:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800642c:	685b      	ldr	r3, [r3, #4]
 800642e:	2200      	movs	r2, #0
 8006430:	663b      	str	r3, [r7, #96]	@ 0x60
 8006432:	667a      	str	r2, [r7, #100]	@ 0x64
 8006434:	f04f 0200 	mov.w	r2, #0
 8006438:	f04f 0300 	mov.w	r3, #0
 800643c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006440:	4649      	mov	r1, r9
 8006442:	008b      	lsls	r3, r1, #2
 8006444:	4641      	mov	r1, r8
 8006446:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800644a:	4641      	mov	r1, r8
 800644c:	008a      	lsls	r2, r1, #2
 800644e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006452:	f7fa fc33 	bl	8000cbc <__aeabi_uldivmod>
 8006456:	4602      	mov	r2, r0
 8006458:	460b      	mov	r3, r1
 800645a:	4b0d      	ldr	r3, [pc, #52]	@ (8006490 <UART_SetConfig+0x4e4>)
 800645c:	fba3 1302 	umull	r1, r3, r3, r2
 8006460:	095b      	lsrs	r3, r3, #5
 8006462:	2164      	movs	r1, #100	@ 0x64
 8006464:	fb01 f303 	mul.w	r3, r1, r3
 8006468:	1ad3      	subs	r3, r2, r3
 800646a:	011b      	lsls	r3, r3, #4
 800646c:	3332      	adds	r3, #50	@ 0x32
 800646e:	4a08      	ldr	r2, [pc, #32]	@ (8006490 <UART_SetConfig+0x4e4>)
 8006470:	fba2 2303 	umull	r2, r3, r2, r3
 8006474:	095b      	lsrs	r3, r3, #5
 8006476:	f003 020f 	and.w	r2, r3, #15
 800647a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4422      	add	r2, r4
 8006482:	609a      	str	r2, [r3, #8]
}
 8006484:	bf00      	nop
 8006486:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800648a:	46bd      	mov	sp, r7
 800648c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006490:	51eb851f 	.word	0x51eb851f

08006494 <__NVIC_SetPriority>:
{
 8006494:	b480      	push	{r7}
 8006496:	b083      	sub	sp, #12
 8006498:	af00      	add	r7, sp, #0
 800649a:	4603      	mov	r3, r0
 800649c:	6039      	str	r1, [r7, #0]
 800649e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80064a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	db0a      	blt.n	80064be <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	b2da      	uxtb	r2, r3
 80064ac:	490c      	ldr	r1, [pc, #48]	@ (80064e0 <__NVIC_SetPriority+0x4c>)
 80064ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064b2:	0112      	lsls	r2, r2, #4
 80064b4:	b2d2      	uxtb	r2, r2
 80064b6:	440b      	add	r3, r1
 80064b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80064bc:	e00a      	b.n	80064d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	b2da      	uxtb	r2, r3
 80064c2:	4908      	ldr	r1, [pc, #32]	@ (80064e4 <__NVIC_SetPriority+0x50>)
 80064c4:	79fb      	ldrb	r3, [r7, #7]
 80064c6:	f003 030f 	and.w	r3, r3, #15
 80064ca:	3b04      	subs	r3, #4
 80064cc:	0112      	lsls	r2, r2, #4
 80064ce:	b2d2      	uxtb	r2, r2
 80064d0:	440b      	add	r3, r1
 80064d2:	761a      	strb	r2, [r3, #24]
}
 80064d4:	bf00      	nop
 80064d6:	370c      	adds	r7, #12
 80064d8:	46bd      	mov	sp, r7
 80064da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064de:	4770      	bx	lr
 80064e0:	e000e100 	.word	0xe000e100
 80064e4:	e000ed00 	.word	0xe000ed00

080064e8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80064e8:	b580      	push	{r7, lr}
 80064ea:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80064ec:	4b05      	ldr	r3, [pc, #20]	@ (8006504 <SysTick_Handler+0x1c>)
 80064ee:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80064f0:	f001 fd40 	bl	8007f74 <xTaskGetSchedulerState>
 80064f4:	4603      	mov	r3, r0
 80064f6:	2b01      	cmp	r3, #1
 80064f8:	d001      	beq.n	80064fe <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80064fa:	f002 fb35 	bl	8008b68 <xPortSysTickHandler>
  }
}
 80064fe:	bf00      	nop
 8006500:	bd80      	pop	{r7, pc}
 8006502:	bf00      	nop
 8006504:	e000e010 	.word	0xe000e010

08006508 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006508:	b580      	push	{r7, lr}
 800650a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800650c:	2100      	movs	r1, #0
 800650e:	f06f 0004 	mvn.w	r0, #4
 8006512:	f7ff ffbf 	bl	8006494 <__NVIC_SetPriority>
#endif
}
 8006516:	bf00      	nop
 8006518:	bd80      	pop	{r7, pc}
	...

0800651c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800651c:	b480      	push	{r7}
 800651e:	b083      	sub	sp, #12
 8006520:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006522:	f3ef 8305 	mrs	r3, IPSR
 8006526:	603b      	str	r3, [r7, #0]
  return(result);
 8006528:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800652a:	2b00      	cmp	r3, #0
 800652c:	d003      	beq.n	8006536 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800652e:	f06f 0305 	mvn.w	r3, #5
 8006532:	607b      	str	r3, [r7, #4]
 8006534:	e00c      	b.n	8006550 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006536:	4b0a      	ldr	r3, [pc, #40]	@ (8006560 <osKernelInitialize+0x44>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d105      	bne.n	800654a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800653e:	4b08      	ldr	r3, [pc, #32]	@ (8006560 <osKernelInitialize+0x44>)
 8006540:	2201      	movs	r2, #1
 8006542:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006544:	2300      	movs	r3, #0
 8006546:	607b      	str	r3, [r7, #4]
 8006548:	e002      	b.n	8006550 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800654a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800654e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006550:	687b      	ldr	r3, [r7, #4]
}
 8006552:	4618      	mov	r0, r3
 8006554:	370c      	adds	r7, #12
 8006556:	46bd      	mov	sp, r7
 8006558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655c:	4770      	bx	lr
 800655e:	bf00      	nop
 8006560:	20008770 	.word	0x20008770

08006564 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006564:	b580      	push	{r7, lr}
 8006566:	b082      	sub	sp, #8
 8006568:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800656a:	f3ef 8305 	mrs	r3, IPSR
 800656e:	603b      	str	r3, [r7, #0]
  return(result);
 8006570:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006572:	2b00      	cmp	r3, #0
 8006574:	d003      	beq.n	800657e <osKernelStart+0x1a>
    stat = osErrorISR;
 8006576:	f06f 0305 	mvn.w	r3, #5
 800657a:	607b      	str	r3, [r7, #4]
 800657c:	e010      	b.n	80065a0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800657e:	4b0b      	ldr	r3, [pc, #44]	@ (80065ac <osKernelStart+0x48>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	2b01      	cmp	r3, #1
 8006584:	d109      	bne.n	800659a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006586:	f7ff ffbf 	bl	8006508 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800658a:	4b08      	ldr	r3, [pc, #32]	@ (80065ac <osKernelStart+0x48>)
 800658c:	2202      	movs	r2, #2
 800658e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006590:	f001 f87a 	bl	8007688 <vTaskStartScheduler>
      stat = osOK;
 8006594:	2300      	movs	r3, #0
 8006596:	607b      	str	r3, [r7, #4]
 8006598:	e002      	b.n	80065a0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800659a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800659e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80065a0:	687b      	ldr	r3, [r7, #4]
}
 80065a2:	4618      	mov	r0, r3
 80065a4:	3708      	adds	r7, #8
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bd80      	pop	{r7, pc}
 80065aa:	bf00      	nop
 80065ac:	20008770 	.word	0x20008770

080065b0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b08e      	sub	sp, #56	@ 0x38
 80065b4:	af04      	add	r7, sp, #16
 80065b6:	60f8      	str	r0, [r7, #12]
 80065b8:	60b9      	str	r1, [r7, #8]
 80065ba:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80065bc:	2300      	movs	r3, #0
 80065be:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80065c0:	f3ef 8305 	mrs	r3, IPSR
 80065c4:	617b      	str	r3, [r7, #20]
  return(result);
 80065c6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d17e      	bne.n	80066ca <osThreadNew+0x11a>
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d07b      	beq.n	80066ca <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80065d2:	2380      	movs	r3, #128	@ 0x80
 80065d4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80065d6:	2318      	movs	r3, #24
 80065d8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80065da:	2300      	movs	r3, #0
 80065dc:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80065de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80065e2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d045      	beq.n	8006676 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d002      	beq.n	80065f8 <osThreadNew+0x48>
        name = attr->name;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	699b      	ldr	r3, [r3, #24]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d002      	beq.n	8006606 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	699b      	ldr	r3, [r3, #24]
 8006604:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006606:	69fb      	ldr	r3, [r7, #28]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d008      	beq.n	800661e <osThreadNew+0x6e>
 800660c:	69fb      	ldr	r3, [r7, #28]
 800660e:	2b38      	cmp	r3, #56	@ 0x38
 8006610:	d805      	bhi.n	800661e <osThreadNew+0x6e>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	685b      	ldr	r3, [r3, #4]
 8006616:	f003 0301 	and.w	r3, r3, #1
 800661a:	2b00      	cmp	r3, #0
 800661c:	d001      	beq.n	8006622 <osThreadNew+0x72>
        return (NULL);
 800661e:	2300      	movs	r3, #0
 8006620:	e054      	b.n	80066cc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	695b      	ldr	r3, [r3, #20]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d003      	beq.n	8006632 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	695b      	ldr	r3, [r3, #20]
 800662e:	089b      	lsrs	r3, r3, #2
 8006630:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	689b      	ldr	r3, [r3, #8]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d00e      	beq.n	8006658 <osThreadNew+0xa8>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	68db      	ldr	r3, [r3, #12]
 800663e:	2b5b      	cmp	r3, #91	@ 0x5b
 8006640:	d90a      	bls.n	8006658 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006646:	2b00      	cmp	r3, #0
 8006648:	d006      	beq.n	8006658 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	695b      	ldr	r3, [r3, #20]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d002      	beq.n	8006658 <osThreadNew+0xa8>
        mem = 1;
 8006652:	2301      	movs	r3, #1
 8006654:	61bb      	str	r3, [r7, #24]
 8006656:	e010      	b.n	800667a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	689b      	ldr	r3, [r3, #8]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d10c      	bne.n	800667a <osThreadNew+0xca>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	68db      	ldr	r3, [r3, #12]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d108      	bne.n	800667a <osThreadNew+0xca>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	691b      	ldr	r3, [r3, #16]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d104      	bne.n	800667a <osThreadNew+0xca>
          mem = 0;
 8006670:	2300      	movs	r3, #0
 8006672:	61bb      	str	r3, [r7, #24]
 8006674:	e001      	b.n	800667a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006676:	2300      	movs	r3, #0
 8006678:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800667a:	69bb      	ldr	r3, [r7, #24]
 800667c:	2b01      	cmp	r3, #1
 800667e:	d110      	bne.n	80066a2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006684:	687a      	ldr	r2, [r7, #4]
 8006686:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006688:	9202      	str	r2, [sp, #8]
 800668a:	9301      	str	r3, [sp, #4]
 800668c:	69fb      	ldr	r3, [r7, #28]
 800668e:	9300      	str	r3, [sp, #0]
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	6a3a      	ldr	r2, [r7, #32]
 8006694:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006696:	68f8      	ldr	r0, [r7, #12]
 8006698:	f000 fe1a 	bl	80072d0 <xTaskCreateStatic>
 800669c:	4603      	mov	r3, r0
 800669e:	613b      	str	r3, [r7, #16]
 80066a0:	e013      	b.n	80066ca <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80066a2:	69bb      	ldr	r3, [r7, #24]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d110      	bne.n	80066ca <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80066a8:	6a3b      	ldr	r3, [r7, #32]
 80066aa:	b29a      	uxth	r2, r3
 80066ac:	f107 0310 	add.w	r3, r7, #16
 80066b0:	9301      	str	r3, [sp, #4]
 80066b2:	69fb      	ldr	r3, [r7, #28]
 80066b4:	9300      	str	r3, [sp, #0]
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80066ba:	68f8      	ldr	r0, [r7, #12]
 80066bc:	f000 fe68 	bl	8007390 <xTaskCreate>
 80066c0:	4603      	mov	r3, r0
 80066c2:	2b01      	cmp	r3, #1
 80066c4:	d001      	beq.n	80066ca <osThreadNew+0x11a>
            hTask = NULL;
 80066c6:	2300      	movs	r3, #0
 80066c8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80066ca:	693b      	ldr	r3, [r7, #16]
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	3728      	adds	r7, #40	@ 0x28
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bd80      	pop	{r7, pc}

080066d4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b084      	sub	sp, #16
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80066dc:	f3ef 8305 	mrs	r3, IPSR
 80066e0:	60bb      	str	r3, [r7, #8]
  return(result);
 80066e2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d003      	beq.n	80066f0 <osDelay+0x1c>
    stat = osErrorISR;
 80066e8:	f06f 0305 	mvn.w	r3, #5
 80066ec:	60fb      	str	r3, [r7, #12]
 80066ee:	e007      	b.n	8006700 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80066f0:	2300      	movs	r3, #0
 80066f2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d002      	beq.n	8006700 <osDelay+0x2c>
      vTaskDelay(ticks);
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f000 ff8e 	bl	800761c <vTaskDelay>
    }
  }

  return (stat);
 8006700:	68fb      	ldr	r3, [r7, #12]
}
 8006702:	4618      	mov	r0, r3
 8006704:	3710      	adds	r7, #16
 8006706:	46bd      	mov	sp, r7
 8006708:	bd80      	pop	{r7, pc}
	...

0800670c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800670c:	b480      	push	{r7}
 800670e:	b085      	sub	sp, #20
 8006710:	af00      	add	r7, sp, #0
 8006712:	60f8      	str	r0, [r7, #12]
 8006714:	60b9      	str	r1, [r7, #8]
 8006716:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	4a07      	ldr	r2, [pc, #28]	@ (8006738 <vApplicationGetIdleTaskMemory+0x2c>)
 800671c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	4a06      	ldr	r2, [pc, #24]	@ (800673c <vApplicationGetIdleTaskMemory+0x30>)
 8006722:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2280      	movs	r2, #128	@ 0x80
 8006728:	601a      	str	r2, [r3, #0]
}
 800672a:	bf00      	nop
 800672c:	3714      	adds	r7, #20
 800672e:	46bd      	mov	sp, r7
 8006730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006734:	4770      	bx	lr
 8006736:	bf00      	nop
 8006738:	20008774 	.word	0x20008774
 800673c:	200087d0 	.word	0x200087d0

08006740 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006740:	b480      	push	{r7}
 8006742:	b085      	sub	sp, #20
 8006744:	af00      	add	r7, sp, #0
 8006746:	60f8      	str	r0, [r7, #12]
 8006748:	60b9      	str	r1, [r7, #8]
 800674a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	4a07      	ldr	r2, [pc, #28]	@ (800676c <vApplicationGetTimerTaskMemory+0x2c>)
 8006750:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	4a06      	ldr	r2, [pc, #24]	@ (8006770 <vApplicationGetTimerTaskMemory+0x30>)
 8006756:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800675e:	601a      	str	r2, [r3, #0]
}
 8006760:	bf00      	nop
 8006762:	3714      	adds	r7, #20
 8006764:	46bd      	mov	sp, r7
 8006766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676a:	4770      	bx	lr
 800676c:	200089d0 	.word	0x200089d0
 8006770:	20008a2c 	.word	0x20008a2c

08006774 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006774:	b480      	push	{r7}
 8006776:	b083      	sub	sp, #12
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	f103 0208 	add.w	r2, r3, #8
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800678c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	f103 0208 	add.w	r2, r3, #8
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	f103 0208 	add.w	r2, r3, #8
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2200      	movs	r2, #0
 80067a6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80067a8:	bf00      	nop
 80067aa:	370c      	adds	r7, #12
 80067ac:	46bd      	mov	sp, r7
 80067ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b2:	4770      	bx	lr

080067b4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80067b4:	b480      	push	{r7}
 80067b6:	b083      	sub	sp, #12
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2200      	movs	r2, #0
 80067c0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80067c2:	bf00      	nop
 80067c4:	370c      	adds	r7, #12
 80067c6:	46bd      	mov	sp, r7
 80067c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067cc:	4770      	bx	lr

080067ce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80067ce:	b480      	push	{r7}
 80067d0:	b085      	sub	sp, #20
 80067d2:	af00      	add	r7, sp, #0
 80067d4:	6078      	str	r0, [r7, #4]
 80067d6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	685b      	ldr	r3, [r3, #4]
 80067dc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	68fa      	ldr	r2, [r7, #12]
 80067e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	689a      	ldr	r2, [r3, #8]
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	689b      	ldr	r3, [r3, #8]
 80067f0:	683a      	ldr	r2, [r7, #0]
 80067f2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	683a      	ldr	r2, [r7, #0]
 80067f8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	687a      	ldr	r2, [r7, #4]
 80067fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	1c5a      	adds	r2, r3, #1
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	601a      	str	r2, [r3, #0]
}
 800680a:	bf00      	nop
 800680c:	3714      	adds	r7, #20
 800680e:	46bd      	mov	sp, r7
 8006810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006814:	4770      	bx	lr

08006816 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006816:	b480      	push	{r7}
 8006818:	b085      	sub	sp, #20
 800681a:	af00      	add	r7, sp, #0
 800681c:	6078      	str	r0, [r7, #4]
 800681e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800682c:	d103      	bne.n	8006836 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	691b      	ldr	r3, [r3, #16]
 8006832:	60fb      	str	r3, [r7, #12]
 8006834:	e00c      	b.n	8006850 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	3308      	adds	r3, #8
 800683a:	60fb      	str	r3, [r7, #12]
 800683c:	e002      	b.n	8006844 <vListInsert+0x2e>
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	685b      	ldr	r3, [r3, #4]
 8006842:	60fb      	str	r3, [r7, #12]
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	68ba      	ldr	r2, [r7, #8]
 800684c:	429a      	cmp	r2, r3
 800684e:	d2f6      	bcs.n	800683e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	685a      	ldr	r2, [r3, #4]
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	683a      	ldr	r2, [r7, #0]
 800685e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	68fa      	ldr	r2, [r7, #12]
 8006864:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	683a      	ldr	r2, [r7, #0]
 800686a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	687a      	ldr	r2, [r7, #4]
 8006870:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	1c5a      	adds	r2, r3, #1
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	601a      	str	r2, [r3, #0]
}
 800687c:	bf00      	nop
 800687e:	3714      	adds	r7, #20
 8006880:	46bd      	mov	sp, r7
 8006882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006886:	4770      	bx	lr

08006888 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006888:	b480      	push	{r7}
 800688a:	b085      	sub	sp, #20
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	691b      	ldr	r3, [r3, #16]
 8006894:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	685b      	ldr	r3, [r3, #4]
 800689a:	687a      	ldr	r2, [r7, #4]
 800689c:	6892      	ldr	r2, [r2, #8]
 800689e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	689b      	ldr	r3, [r3, #8]
 80068a4:	687a      	ldr	r2, [r7, #4]
 80068a6:	6852      	ldr	r2, [r2, #4]
 80068a8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	685b      	ldr	r3, [r3, #4]
 80068ae:	687a      	ldr	r2, [r7, #4]
 80068b0:	429a      	cmp	r2, r3
 80068b2:	d103      	bne.n	80068bc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	689a      	ldr	r2, [r3, #8]
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2200      	movs	r2, #0
 80068c0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	1e5a      	subs	r2, r3, #1
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	3714      	adds	r7, #20
 80068d4:	46bd      	mov	sp, r7
 80068d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068da:	4770      	bx	lr

080068dc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b084      	sub	sp, #16
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
 80068e4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d10b      	bne.n	8006908 <xQueueGenericReset+0x2c>
	__asm volatile
 80068f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068f4:	f383 8811 	msr	BASEPRI, r3
 80068f8:	f3bf 8f6f 	isb	sy
 80068fc:	f3bf 8f4f 	dsb	sy
 8006900:	60bb      	str	r3, [r7, #8]
}
 8006902:	bf00      	nop
 8006904:	bf00      	nop
 8006906:	e7fd      	b.n	8006904 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006908:	f002 f89e 	bl	8008a48 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681a      	ldr	r2, [r3, #0]
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006914:	68f9      	ldr	r1, [r7, #12]
 8006916:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006918:	fb01 f303 	mul.w	r3, r1, r3
 800691c:	441a      	add	r2, r3
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	2200      	movs	r2, #0
 8006926:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681a      	ldr	r2, [r3, #0]
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681a      	ldr	r2, [r3, #0]
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006938:	3b01      	subs	r3, #1
 800693a:	68f9      	ldr	r1, [r7, #12]
 800693c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800693e:	fb01 f303 	mul.w	r3, r1, r3
 8006942:	441a      	add	r2, r3
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	22ff      	movs	r2, #255	@ 0xff
 800694c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	22ff      	movs	r2, #255	@ 0xff
 8006954:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d114      	bne.n	8006988 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	691b      	ldr	r3, [r3, #16]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d01a      	beq.n	800699c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	3310      	adds	r3, #16
 800696a:	4618      	mov	r0, r3
 800696c:	f001 f91a 	bl	8007ba4 <xTaskRemoveFromEventList>
 8006970:	4603      	mov	r3, r0
 8006972:	2b00      	cmp	r3, #0
 8006974:	d012      	beq.n	800699c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006976:	4b0d      	ldr	r3, [pc, #52]	@ (80069ac <xQueueGenericReset+0xd0>)
 8006978:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800697c:	601a      	str	r2, [r3, #0]
 800697e:	f3bf 8f4f 	dsb	sy
 8006982:	f3bf 8f6f 	isb	sy
 8006986:	e009      	b.n	800699c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	3310      	adds	r3, #16
 800698c:	4618      	mov	r0, r3
 800698e:	f7ff fef1 	bl	8006774 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	3324      	adds	r3, #36	@ 0x24
 8006996:	4618      	mov	r0, r3
 8006998:	f7ff feec 	bl	8006774 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800699c:	f002 f886 	bl	8008aac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80069a0:	2301      	movs	r3, #1
}
 80069a2:	4618      	mov	r0, r3
 80069a4:	3710      	adds	r7, #16
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bd80      	pop	{r7, pc}
 80069aa:	bf00      	nop
 80069ac:	e000ed04 	.word	0xe000ed04

080069b0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b08e      	sub	sp, #56	@ 0x38
 80069b4:	af02      	add	r7, sp, #8
 80069b6:	60f8      	str	r0, [r7, #12]
 80069b8:	60b9      	str	r1, [r7, #8]
 80069ba:	607a      	str	r2, [r7, #4]
 80069bc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d10b      	bne.n	80069dc <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80069c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069c8:	f383 8811 	msr	BASEPRI, r3
 80069cc:	f3bf 8f6f 	isb	sy
 80069d0:	f3bf 8f4f 	dsb	sy
 80069d4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80069d6:	bf00      	nop
 80069d8:	bf00      	nop
 80069da:	e7fd      	b.n	80069d8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d10b      	bne.n	80069fa <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80069e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069e6:	f383 8811 	msr	BASEPRI, r3
 80069ea:	f3bf 8f6f 	isb	sy
 80069ee:	f3bf 8f4f 	dsb	sy
 80069f2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80069f4:	bf00      	nop
 80069f6:	bf00      	nop
 80069f8:	e7fd      	b.n	80069f6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d002      	beq.n	8006a06 <xQueueGenericCreateStatic+0x56>
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d001      	beq.n	8006a0a <xQueueGenericCreateStatic+0x5a>
 8006a06:	2301      	movs	r3, #1
 8006a08:	e000      	b.n	8006a0c <xQueueGenericCreateStatic+0x5c>
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d10b      	bne.n	8006a28 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8006a10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a14:	f383 8811 	msr	BASEPRI, r3
 8006a18:	f3bf 8f6f 	isb	sy
 8006a1c:	f3bf 8f4f 	dsb	sy
 8006a20:	623b      	str	r3, [r7, #32]
}
 8006a22:	bf00      	nop
 8006a24:	bf00      	nop
 8006a26:	e7fd      	b.n	8006a24 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d102      	bne.n	8006a34 <xQueueGenericCreateStatic+0x84>
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d101      	bne.n	8006a38 <xQueueGenericCreateStatic+0x88>
 8006a34:	2301      	movs	r3, #1
 8006a36:	e000      	b.n	8006a3a <xQueueGenericCreateStatic+0x8a>
 8006a38:	2300      	movs	r3, #0
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d10b      	bne.n	8006a56 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8006a3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a42:	f383 8811 	msr	BASEPRI, r3
 8006a46:	f3bf 8f6f 	isb	sy
 8006a4a:	f3bf 8f4f 	dsb	sy
 8006a4e:	61fb      	str	r3, [r7, #28]
}
 8006a50:	bf00      	nop
 8006a52:	bf00      	nop
 8006a54:	e7fd      	b.n	8006a52 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006a56:	2350      	movs	r3, #80	@ 0x50
 8006a58:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006a5a:	697b      	ldr	r3, [r7, #20]
 8006a5c:	2b50      	cmp	r3, #80	@ 0x50
 8006a5e:	d00b      	beq.n	8006a78 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8006a60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a64:	f383 8811 	msr	BASEPRI, r3
 8006a68:	f3bf 8f6f 	isb	sy
 8006a6c:	f3bf 8f4f 	dsb	sy
 8006a70:	61bb      	str	r3, [r7, #24]
}
 8006a72:	bf00      	nop
 8006a74:	bf00      	nop
 8006a76:	e7fd      	b.n	8006a74 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006a78:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8006a7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d00d      	beq.n	8006aa0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006a84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a86:	2201      	movs	r2, #1
 8006a88:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006a8c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006a90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a92:	9300      	str	r3, [sp, #0]
 8006a94:	4613      	mov	r3, r2
 8006a96:	687a      	ldr	r2, [r7, #4]
 8006a98:	68b9      	ldr	r1, [r7, #8]
 8006a9a:	68f8      	ldr	r0, [r7, #12]
 8006a9c:	f000 f805 	bl	8006aaa <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006aa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	3730      	adds	r7, #48	@ 0x30
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}

08006aaa <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006aaa:	b580      	push	{r7, lr}
 8006aac:	b084      	sub	sp, #16
 8006aae:	af00      	add	r7, sp, #0
 8006ab0:	60f8      	str	r0, [r7, #12]
 8006ab2:	60b9      	str	r1, [r7, #8]
 8006ab4:	607a      	str	r2, [r7, #4]
 8006ab6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d103      	bne.n	8006ac6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006abe:	69bb      	ldr	r3, [r7, #24]
 8006ac0:	69ba      	ldr	r2, [r7, #24]
 8006ac2:	601a      	str	r2, [r3, #0]
 8006ac4:	e002      	b.n	8006acc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006ac6:	69bb      	ldr	r3, [r7, #24]
 8006ac8:	687a      	ldr	r2, [r7, #4]
 8006aca:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006acc:	69bb      	ldr	r3, [r7, #24]
 8006ace:	68fa      	ldr	r2, [r7, #12]
 8006ad0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006ad2:	69bb      	ldr	r3, [r7, #24]
 8006ad4:	68ba      	ldr	r2, [r7, #8]
 8006ad6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006ad8:	2101      	movs	r1, #1
 8006ada:	69b8      	ldr	r0, [r7, #24]
 8006adc:	f7ff fefe 	bl	80068dc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006ae0:	69bb      	ldr	r3, [r7, #24]
 8006ae2:	78fa      	ldrb	r2, [r7, #3]
 8006ae4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006ae8:	bf00      	nop
 8006aea:	3710      	adds	r7, #16
 8006aec:	46bd      	mov	sp, r7
 8006aee:	bd80      	pop	{r7, pc}

08006af0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b08e      	sub	sp, #56	@ 0x38
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	60f8      	str	r0, [r7, #12]
 8006af8:	60b9      	str	r1, [r7, #8]
 8006afa:	607a      	str	r2, [r7, #4]
 8006afc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006afe:	2300      	movs	r3, #0
 8006b00:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006b06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d10b      	bne.n	8006b24 <xQueueGenericSend+0x34>
	__asm volatile
 8006b0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b10:	f383 8811 	msr	BASEPRI, r3
 8006b14:	f3bf 8f6f 	isb	sy
 8006b18:	f3bf 8f4f 	dsb	sy
 8006b1c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006b1e:	bf00      	nop
 8006b20:	bf00      	nop
 8006b22:	e7fd      	b.n	8006b20 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d103      	bne.n	8006b32 <xQueueGenericSend+0x42>
 8006b2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d101      	bne.n	8006b36 <xQueueGenericSend+0x46>
 8006b32:	2301      	movs	r3, #1
 8006b34:	e000      	b.n	8006b38 <xQueueGenericSend+0x48>
 8006b36:	2300      	movs	r3, #0
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d10b      	bne.n	8006b54 <xQueueGenericSend+0x64>
	__asm volatile
 8006b3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b40:	f383 8811 	msr	BASEPRI, r3
 8006b44:	f3bf 8f6f 	isb	sy
 8006b48:	f3bf 8f4f 	dsb	sy
 8006b4c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006b4e:	bf00      	nop
 8006b50:	bf00      	nop
 8006b52:	e7fd      	b.n	8006b50 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	2b02      	cmp	r3, #2
 8006b58:	d103      	bne.n	8006b62 <xQueueGenericSend+0x72>
 8006b5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b5e:	2b01      	cmp	r3, #1
 8006b60:	d101      	bne.n	8006b66 <xQueueGenericSend+0x76>
 8006b62:	2301      	movs	r3, #1
 8006b64:	e000      	b.n	8006b68 <xQueueGenericSend+0x78>
 8006b66:	2300      	movs	r3, #0
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d10b      	bne.n	8006b84 <xQueueGenericSend+0x94>
	__asm volatile
 8006b6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b70:	f383 8811 	msr	BASEPRI, r3
 8006b74:	f3bf 8f6f 	isb	sy
 8006b78:	f3bf 8f4f 	dsb	sy
 8006b7c:	623b      	str	r3, [r7, #32]
}
 8006b7e:	bf00      	nop
 8006b80:	bf00      	nop
 8006b82:	e7fd      	b.n	8006b80 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006b84:	f001 f9f6 	bl	8007f74 <xTaskGetSchedulerState>
 8006b88:	4603      	mov	r3, r0
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d102      	bne.n	8006b94 <xQueueGenericSend+0xa4>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d101      	bne.n	8006b98 <xQueueGenericSend+0xa8>
 8006b94:	2301      	movs	r3, #1
 8006b96:	e000      	b.n	8006b9a <xQueueGenericSend+0xaa>
 8006b98:	2300      	movs	r3, #0
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d10b      	bne.n	8006bb6 <xQueueGenericSend+0xc6>
	__asm volatile
 8006b9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ba2:	f383 8811 	msr	BASEPRI, r3
 8006ba6:	f3bf 8f6f 	isb	sy
 8006baa:	f3bf 8f4f 	dsb	sy
 8006bae:	61fb      	str	r3, [r7, #28]
}
 8006bb0:	bf00      	nop
 8006bb2:	bf00      	nop
 8006bb4:	e7fd      	b.n	8006bb2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006bb6:	f001 ff47 	bl	8008a48 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006bba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bbc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006bbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bc2:	429a      	cmp	r2, r3
 8006bc4:	d302      	bcc.n	8006bcc <xQueueGenericSend+0xdc>
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	2b02      	cmp	r3, #2
 8006bca:	d129      	bne.n	8006c20 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006bcc:	683a      	ldr	r2, [r7, #0]
 8006bce:	68b9      	ldr	r1, [r7, #8]
 8006bd0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006bd2:	f000 fa0f 	bl	8006ff4 <prvCopyDataToQueue>
 8006bd6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006bd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d010      	beq.n	8006c02 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006be0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006be2:	3324      	adds	r3, #36	@ 0x24
 8006be4:	4618      	mov	r0, r3
 8006be6:	f000 ffdd 	bl	8007ba4 <xTaskRemoveFromEventList>
 8006bea:	4603      	mov	r3, r0
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d013      	beq.n	8006c18 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006bf0:	4b3f      	ldr	r3, [pc, #252]	@ (8006cf0 <xQueueGenericSend+0x200>)
 8006bf2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006bf6:	601a      	str	r2, [r3, #0]
 8006bf8:	f3bf 8f4f 	dsb	sy
 8006bfc:	f3bf 8f6f 	isb	sy
 8006c00:	e00a      	b.n	8006c18 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006c02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d007      	beq.n	8006c18 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006c08:	4b39      	ldr	r3, [pc, #228]	@ (8006cf0 <xQueueGenericSend+0x200>)
 8006c0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c0e:	601a      	str	r2, [r3, #0]
 8006c10:	f3bf 8f4f 	dsb	sy
 8006c14:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006c18:	f001 ff48 	bl	8008aac <vPortExitCritical>
				return pdPASS;
 8006c1c:	2301      	movs	r3, #1
 8006c1e:	e063      	b.n	8006ce8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d103      	bne.n	8006c2e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006c26:	f001 ff41 	bl	8008aac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	e05c      	b.n	8006ce8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006c2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d106      	bne.n	8006c42 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006c34:	f107 0314 	add.w	r3, r7, #20
 8006c38:	4618      	mov	r0, r3
 8006c3a:	f001 f83f 	bl	8007cbc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006c3e:	2301      	movs	r3, #1
 8006c40:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006c42:	f001 ff33 	bl	8008aac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006c46:	f000 fd87 	bl	8007758 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006c4a:	f001 fefd 	bl	8008a48 <vPortEnterCritical>
 8006c4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c50:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006c54:	b25b      	sxtb	r3, r3
 8006c56:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006c5a:	d103      	bne.n	8006c64 <xQueueGenericSend+0x174>
 8006c5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c5e:	2200      	movs	r2, #0
 8006c60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006c64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c66:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006c6a:	b25b      	sxtb	r3, r3
 8006c6c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006c70:	d103      	bne.n	8006c7a <xQueueGenericSend+0x18a>
 8006c72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c74:	2200      	movs	r2, #0
 8006c76:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006c7a:	f001 ff17 	bl	8008aac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006c7e:	1d3a      	adds	r2, r7, #4
 8006c80:	f107 0314 	add.w	r3, r7, #20
 8006c84:	4611      	mov	r1, r2
 8006c86:	4618      	mov	r0, r3
 8006c88:	f001 f82e 	bl	8007ce8 <xTaskCheckForTimeOut>
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d124      	bne.n	8006cdc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006c92:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006c94:	f000 faa6 	bl	80071e4 <prvIsQueueFull>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d018      	beq.n	8006cd0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006c9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ca0:	3310      	adds	r3, #16
 8006ca2:	687a      	ldr	r2, [r7, #4]
 8006ca4:	4611      	mov	r1, r2
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	f000 ff2a 	bl	8007b00 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006cac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006cae:	f000 fa31 	bl	8007114 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006cb2:	f000 fd5f 	bl	8007774 <xTaskResumeAll>
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	f47f af7c 	bne.w	8006bb6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8006cbe:	4b0c      	ldr	r3, [pc, #48]	@ (8006cf0 <xQueueGenericSend+0x200>)
 8006cc0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006cc4:	601a      	str	r2, [r3, #0]
 8006cc6:	f3bf 8f4f 	dsb	sy
 8006cca:	f3bf 8f6f 	isb	sy
 8006cce:	e772      	b.n	8006bb6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006cd0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006cd2:	f000 fa1f 	bl	8007114 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006cd6:	f000 fd4d 	bl	8007774 <xTaskResumeAll>
 8006cda:	e76c      	b.n	8006bb6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006cdc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006cde:	f000 fa19 	bl	8007114 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006ce2:	f000 fd47 	bl	8007774 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006ce6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	3738      	adds	r7, #56	@ 0x38
 8006cec:	46bd      	mov	sp, r7
 8006cee:	bd80      	pop	{r7, pc}
 8006cf0:	e000ed04 	.word	0xe000ed04

08006cf4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b090      	sub	sp, #64	@ 0x40
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	60f8      	str	r0, [r7, #12]
 8006cfc:	60b9      	str	r1, [r7, #8]
 8006cfe:	607a      	str	r2, [r7, #4]
 8006d00:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8006d06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d10b      	bne.n	8006d24 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8006d0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d10:	f383 8811 	msr	BASEPRI, r3
 8006d14:	f3bf 8f6f 	isb	sy
 8006d18:	f3bf 8f4f 	dsb	sy
 8006d1c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006d1e:	bf00      	nop
 8006d20:	bf00      	nop
 8006d22:	e7fd      	b.n	8006d20 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d103      	bne.n	8006d32 <xQueueGenericSendFromISR+0x3e>
 8006d2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d101      	bne.n	8006d36 <xQueueGenericSendFromISR+0x42>
 8006d32:	2301      	movs	r3, #1
 8006d34:	e000      	b.n	8006d38 <xQueueGenericSendFromISR+0x44>
 8006d36:	2300      	movs	r3, #0
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d10b      	bne.n	8006d54 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8006d3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d40:	f383 8811 	msr	BASEPRI, r3
 8006d44:	f3bf 8f6f 	isb	sy
 8006d48:	f3bf 8f4f 	dsb	sy
 8006d4c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006d4e:	bf00      	nop
 8006d50:	bf00      	nop
 8006d52:	e7fd      	b.n	8006d50 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	2b02      	cmp	r3, #2
 8006d58:	d103      	bne.n	8006d62 <xQueueGenericSendFromISR+0x6e>
 8006d5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d5e:	2b01      	cmp	r3, #1
 8006d60:	d101      	bne.n	8006d66 <xQueueGenericSendFromISR+0x72>
 8006d62:	2301      	movs	r3, #1
 8006d64:	e000      	b.n	8006d68 <xQueueGenericSendFromISR+0x74>
 8006d66:	2300      	movs	r3, #0
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d10b      	bne.n	8006d84 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8006d6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d70:	f383 8811 	msr	BASEPRI, r3
 8006d74:	f3bf 8f6f 	isb	sy
 8006d78:	f3bf 8f4f 	dsb	sy
 8006d7c:	623b      	str	r3, [r7, #32]
}
 8006d7e:	bf00      	nop
 8006d80:	bf00      	nop
 8006d82:	e7fd      	b.n	8006d80 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006d84:	f001 ff40 	bl	8008c08 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006d88:	f3ef 8211 	mrs	r2, BASEPRI
 8006d8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d90:	f383 8811 	msr	BASEPRI, r3
 8006d94:	f3bf 8f6f 	isb	sy
 8006d98:	f3bf 8f4f 	dsb	sy
 8006d9c:	61fa      	str	r2, [r7, #28]
 8006d9e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006da0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006da2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006da4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006da6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006da8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006daa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dac:	429a      	cmp	r2, r3
 8006dae:	d302      	bcc.n	8006db6 <xQueueGenericSendFromISR+0xc2>
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	2b02      	cmp	r3, #2
 8006db4:	d12f      	bne.n	8006e16 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006db6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006db8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006dbc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006dc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006dc6:	683a      	ldr	r2, [r7, #0]
 8006dc8:	68b9      	ldr	r1, [r7, #8]
 8006dca:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006dcc:	f000 f912 	bl	8006ff4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006dd0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8006dd4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006dd8:	d112      	bne.n	8006e00 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006dda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ddc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d016      	beq.n	8006e10 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006de2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006de4:	3324      	adds	r3, #36	@ 0x24
 8006de6:	4618      	mov	r0, r3
 8006de8:	f000 fedc 	bl	8007ba4 <xTaskRemoveFromEventList>
 8006dec:	4603      	mov	r3, r0
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d00e      	beq.n	8006e10 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d00b      	beq.n	8006e10 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2201      	movs	r2, #1
 8006dfc:	601a      	str	r2, [r3, #0]
 8006dfe:	e007      	b.n	8006e10 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006e00:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006e04:	3301      	adds	r3, #1
 8006e06:	b2db      	uxtb	r3, r3
 8006e08:	b25a      	sxtb	r2, r3
 8006e0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e0c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006e10:	2301      	movs	r3, #1
 8006e12:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8006e14:	e001      	b.n	8006e1a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006e16:	2300      	movs	r3, #0
 8006e18:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006e1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e1c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006e1e:	697b      	ldr	r3, [r7, #20]
 8006e20:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006e24:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006e26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	3740      	adds	r7, #64	@ 0x40
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bd80      	pop	{r7, pc}

08006e30 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b08c      	sub	sp, #48	@ 0x30
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	60f8      	str	r0, [r7, #12]
 8006e38:	60b9      	str	r1, [r7, #8]
 8006e3a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006e44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d10b      	bne.n	8006e62 <xQueueReceive+0x32>
	__asm volatile
 8006e4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e4e:	f383 8811 	msr	BASEPRI, r3
 8006e52:	f3bf 8f6f 	isb	sy
 8006e56:	f3bf 8f4f 	dsb	sy
 8006e5a:	623b      	str	r3, [r7, #32]
}
 8006e5c:	bf00      	nop
 8006e5e:	bf00      	nop
 8006e60:	e7fd      	b.n	8006e5e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d103      	bne.n	8006e70 <xQueueReceive+0x40>
 8006e68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d101      	bne.n	8006e74 <xQueueReceive+0x44>
 8006e70:	2301      	movs	r3, #1
 8006e72:	e000      	b.n	8006e76 <xQueueReceive+0x46>
 8006e74:	2300      	movs	r3, #0
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d10b      	bne.n	8006e92 <xQueueReceive+0x62>
	__asm volatile
 8006e7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e7e:	f383 8811 	msr	BASEPRI, r3
 8006e82:	f3bf 8f6f 	isb	sy
 8006e86:	f3bf 8f4f 	dsb	sy
 8006e8a:	61fb      	str	r3, [r7, #28]
}
 8006e8c:	bf00      	nop
 8006e8e:	bf00      	nop
 8006e90:	e7fd      	b.n	8006e8e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006e92:	f001 f86f 	bl	8007f74 <xTaskGetSchedulerState>
 8006e96:	4603      	mov	r3, r0
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d102      	bne.n	8006ea2 <xQueueReceive+0x72>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d101      	bne.n	8006ea6 <xQueueReceive+0x76>
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	e000      	b.n	8006ea8 <xQueueReceive+0x78>
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d10b      	bne.n	8006ec4 <xQueueReceive+0x94>
	__asm volatile
 8006eac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006eb0:	f383 8811 	msr	BASEPRI, r3
 8006eb4:	f3bf 8f6f 	isb	sy
 8006eb8:	f3bf 8f4f 	dsb	sy
 8006ebc:	61bb      	str	r3, [r7, #24]
}
 8006ebe:	bf00      	nop
 8006ec0:	bf00      	nop
 8006ec2:	e7fd      	b.n	8006ec0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006ec4:	f001 fdc0 	bl	8008a48 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006ec8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ecc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d01f      	beq.n	8006f14 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006ed4:	68b9      	ldr	r1, [r7, #8]
 8006ed6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006ed8:	f000 f8f6 	bl	80070c8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ede:	1e5a      	subs	r2, r3, #1
 8006ee0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ee2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006ee4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ee6:	691b      	ldr	r3, [r3, #16]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d00f      	beq.n	8006f0c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006eec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eee:	3310      	adds	r3, #16
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	f000 fe57 	bl	8007ba4 <xTaskRemoveFromEventList>
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d007      	beq.n	8006f0c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006efc:	4b3c      	ldr	r3, [pc, #240]	@ (8006ff0 <xQueueReceive+0x1c0>)
 8006efe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f02:	601a      	str	r2, [r3, #0]
 8006f04:	f3bf 8f4f 	dsb	sy
 8006f08:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006f0c:	f001 fdce 	bl	8008aac <vPortExitCritical>
				return pdPASS;
 8006f10:	2301      	movs	r3, #1
 8006f12:	e069      	b.n	8006fe8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d103      	bne.n	8006f22 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006f1a:	f001 fdc7 	bl	8008aac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006f1e:	2300      	movs	r3, #0
 8006f20:	e062      	b.n	8006fe8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006f22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d106      	bne.n	8006f36 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006f28:	f107 0310 	add.w	r3, r7, #16
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	f000 fec5 	bl	8007cbc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006f32:	2301      	movs	r3, #1
 8006f34:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006f36:	f001 fdb9 	bl	8008aac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006f3a:	f000 fc0d 	bl	8007758 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006f3e:	f001 fd83 	bl	8008a48 <vPortEnterCritical>
 8006f42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f44:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006f48:	b25b      	sxtb	r3, r3
 8006f4a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006f4e:	d103      	bne.n	8006f58 <xQueueReceive+0x128>
 8006f50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f52:	2200      	movs	r2, #0
 8006f54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006f58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f5a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006f5e:	b25b      	sxtb	r3, r3
 8006f60:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006f64:	d103      	bne.n	8006f6e <xQueueReceive+0x13e>
 8006f66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f68:	2200      	movs	r2, #0
 8006f6a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006f6e:	f001 fd9d 	bl	8008aac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006f72:	1d3a      	adds	r2, r7, #4
 8006f74:	f107 0310 	add.w	r3, r7, #16
 8006f78:	4611      	mov	r1, r2
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	f000 feb4 	bl	8007ce8 <xTaskCheckForTimeOut>
 8006f80:	4603      	mov	r3, r0
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d123      	bne.n	8006fce <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006f86:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006f88:	f000 f916 	bl	80071b8 <prvIsQueueEmpty>
 8006f8c:	4603      	mov	r3, r0
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d017      	beq.n	8006fc2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006f92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f94:	3324      	adds	r3, #36	@ 0x24
 8006f96:	687a      	ldr	r2, [r7, #4]
 8006f98:	4611      	mov	r1, r2
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	f000 fdb0 	bl	8007b00 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006fa0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006fa2:	f000 f8b7 	bl	8007114 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006fa6:	f000 fbe5 	bl	8007774 <xTaskResumeAll>
 8006faa:	4603      	mov	r3, r0
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d189      	bne.n	8006ec4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8006fb0:	4b0f      	ldr	r3, [pc, #60]	@ (8006ff0 <xQueueReceive+0x1c0>)
 8006fb2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006fb6:	601a      	str	r2, [r3, #0]
 8006fb8:	f3bf 8f4f 	dsb	sy
 8006fbc:	f3bf 8f6f 	isb	sy
 8006fc0:	e780      	b.n	8006ec4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006fc2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006fc4:	f000 f8a6 	bl	8007114 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006fc8:	f000 fbd4 	bl	8007774 <xTaskResumeAll>
 8006fcc:	e77a      	b.n	8006ec4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006fce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006fd0:	f000 f8a0 	bl	8007114 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006fd4:	f000 fbce 	bl	8007774 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006fd8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006fda:	f000 f8ed 	bl	80071b8 <prvIsQueueEmpty>
 8006fde:	4603      	mov	r3, r0
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	f43f af6f 	beq.w	8006ec4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006fe6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006fe8:	4618      	mov	r0, r3
 8006fea:	3730      	adds	r7, #48	@ 0x30
 8006fec:	46bd      	mov	sp, r7
 8006fee:	bd80      	pop	{r7, pc}
 8006ff0:	e000ed04 	.word	0xe000ed04

08006ff4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b086      	sub	sp, #24
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	60f8      	str	r0, [r7, #12]
 8006ffc:	60b9      	str	r1, [r7, #8]
 8006ffe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007000:	2300      	movs	r3, #0
 8007002:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007008:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800700e:	2b00      	cmp	r3, #0
 8007010:	d10d      	bne.n	800702e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d14d      	bne.n	80070b6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	689b      	ldr	r3, [r3, #8]
 800701e:	4618      	mov	r0, r3
 8007020:	f000 ffc6 	bl	8007fb0 <xTaskPriorityDisinherit>
 8007024:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	2200      	movs	r2, #0
 800702a:	609a      	str	r2, [r3, #8]
 800702c:	e043      	b.n	80070b6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d119      	bne.n	8007068 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	6858      	ldr	r0, [r3, #4]
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800703c:	461a      	mov	r2, r3
 800703e:	68b9      	ldr	r1, [r7, #8]
 8007040:	f012 fae5 	bl	801960e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	685a      	ldr	r2, [r3, #4]
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800704c:	441a      	add	r2, r3
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	685a      	ldr	r2, [r3, #4]
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	689b      	ldr	r3, [r3, #8]
 800705a:	429a      	cmp	r2, r3
 800705c:	d32b      	bcc.n	80070b6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681a      	ldr	r2, [r3, #0]
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	605a      	str	r2, [r3, #4]
 8007066:	e026      	b.n	80070b6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	68d8      	ldr	r0, [r3, #12]
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007070:	461a      	mov	r2, r3
 8007072:	68b9      	ldr	r1, [r7, #8]
 8007074:	f012 facb 	bl	801960e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	68da      	ldr	r2, [r3, #12]
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007080:	425b      	negs	r3, r3
 8007082:	441a      	add	r2, r3
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	68da      	ldr	r2, [r3, #12]
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	429a      	cmp	r2, r3
 8007092:	d207      	bcs.n	80070a4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	689a      	ldr	r2, [r3, #8]
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800709c:	425b      	negs	r3, r3
 800709e:	441a      	add	r2, r3
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2b02      	cmp	r3, #2
 80070a8:	d105      	bne.n	80070b6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80070aa:	693b      	ldr	r3, [r7, #16]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d002      	beq.n	80070b6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	3b01      	subs	r3, #1
 80070b4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80070b6:	693b      	ldr	r3, [r7, #16]
 80070b8:	1c5a      	adds	r2, r3, #1
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80070be:	697b      	ldr	r3, [r7, #20]
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	3718      	adds	r7, #24
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}

080070c8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b082      	sub	sp, #8
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
 80070d0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d018      	beq.n	800710c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	68da      	ldr	r2, [r3, #12]
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070e2:	441a      	add	r2, r3
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	68da      	ldr	r2, [r3, #12]
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	689b      	ldr	r3, [r3, #8]
 80070f0:	429a      	cmp	r2, r3
 80070f2:	d303      	bcc.n	80070fc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681a      	ldr	r2, [r3, #0]
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	68d9      	ldr	r1, [r3, #12]
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007104:	461a      	mov	r2, r3
 8007106:	6838      	ldr	r0, [r7, #0]
 8007108:	f012 fa81 	bl	801960e <memcpy>
	}
}
 800710c:	bf00      	nop
 800710e:	3708      	adds	r7, #8
 8007110:	46bd      	mov	sp, r7
 8007112:	bd80      	pop	{r7, pc}

08007114 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b084      	sub	sp, #16
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800711c:	f001 fc94 	bl	8008a48 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007126:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007128:	e011      	b.n	800714e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800712e:	2b00      	cmp	r3, #0
 8007130:	d012      	beq.n	8007158 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	3324      	adds	r3, #36	@ 0x24
 8007136:	4618      	mov	r0, r3
 8007138:	f000 fd34 	bl	8007ba4 <xTaskRemoveFromEventList>
 800713c:	4603      	mov	r3, r0
 800713e:	2b00      	cmp	r3, #0
 8007140:	d001      	beq.n	8007146 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007142:	f000 fe35 	bl	8007db0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007146:	7bfb      	ldrb	r3, [r7, #15]
 8007148:	3b01      	subs	r3, #1
 800714a:	b2db      	uxtb	r3, r3
 800714c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800714e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007152:	2b00      	cmp	r3, #0
 8007154:	dce9      	bgt.n	800712a <prvUnlockQueue+0x16>
 8007156:	e000      	b.n	800715a <prvUnlockQueue+0x46>
					break;
 8007158:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	22ff      	movs	r2, #255	@ 0xff
 800715e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8007162:	f001 fca3 	bl	8008aac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007166:	f001 fc6f 	bl	8008a48 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007170:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007172:	e011      	b.n	8007198 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	691b      	ldr	r3, [r3, #16]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d012      	beq.n	80071a2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	3310      	adds	r3, #16
 8007180:	4618      	mov	r0, r3
 8007182:	f000 fd0f 	bl	8007ba4 <xTaskRemoveFromEventList>
 8007186:	4603      	mov	r3, r0
 8007188:	2b00      	cmp	r3, #0
 800718a:	d001      	beq.n	8007190 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800718c:	f000 fe10 	bl	8007db0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007190:	7bbb      	ldrb	r3, [r7, #14]
 8007192:	3b01      	subs	r3, #1
 8007194:	b2db      	uxtb	r3, r3
 8007196:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007198:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800719c:	2b00      	cmp	r3, #0
 800719e:	dce9      	bgt.n	8007174 <prvUnlockQueue+0x60>
 80071a0:	e000      	b.n	80071a4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80071a2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	22ff      	movs	r2, #255	@ 0xff
 80071a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80071ac:	f001 fc7e 	bl	8008aac <vPortExitCritical>
}
 80071b0:	bf00      	nop
 80071b2:	3710      	adds	r7, #16
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bd80      	pop	{r7, pc}

080071b8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b084      	sub	sp, #16
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80071c0:	f001 fc42 	bl	8008a48 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d102      	bne.n	80071d2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80071cc:	2301      	movs	r3, #1
 80071ce:	60fb      	str	r3, [r7, #12]
 80071d0:	e001      	b.n	80071d6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80071d2:	2300      	movs	r3, #0
 80071d4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80071d6:	f001 fc69 	bl	8008aac <vPortExitCritical>

	return xReturn;
 80071da:	68fb      	ldr	r3, [r7, #12]
}
 80071dc:	4618      	mov	r0, r3
 80071de:	3710      	adds	r7, #16
 80071e0:	46bd      	mov	sp, r7
 80071e2:	bd80      	pop	{r7, pc}

080071e4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b084      	sub	sp, #16
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80071ec:	f001 fc2c 	bl	8008a48 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071f8:	429a      	cmp	r2, r3
 80071fa:	d102      	bne.n	8007202 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80071fc:	2301      	movs	r3, #1
 80071fe:	60fb      	str	r3, [r7, #12]
 8007200:	e001      	b.n	8007206 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007202:	2300      	movs	r3, #0
 8007204:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007206:	f001 fc51 	bl	8008aac <vPortExitCritical>

	return xReturn;
 800720a:	68fb      	ldr	r3, [r7, #12]
}
 800720c:	4618      	mov	r0, r3
 800720e:	3710      	adds	r7, #16
 8007210:	46bd      	mov	sp, r7
 8007212:	bd80      	pop	{r7, pc}

08007214 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007214:	b480      	push	{r7}
 8007216:	b085      	sub	sp, #20
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
 800721c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800721e:	2300      	movs	r3, #0
 8007220:	60fb      	str	r3, [r7, #12]
 8007222:	e014      	b.n	800724e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007224:	4a0f      	ldr	r2, [pc, #60]	@ (8007264 <vQueueAddToRegistry+0x50>)
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d10b      	bne.n	8007248 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007230:	490c      	ldr	r1, [pc, #48]	@ (8007264 <vQueueAddToRegistry+0x50>)
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	683a      	ldr	r2, [r7, #0]
 8007236:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800723a:	4a0a      	ldr	r2, [pc, #40]	@ (8007264 <vQueueAddToRegistry+0x50>)
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	00db      	lsls	r3, r3, #3
 8007240:	4413      	add	r3, r2
 8007242:	687a      	ldr	r2, [r7, #4]
 8007244:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007246:	e006      	b.n	8007256 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	3301      	adds	r3, #1
 800724c:	60fb      	str	r3, [r7, #12]
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	2b07      	cmp	r3, #7
 8007252:	d9e7      	bls.n	8007224 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007254:	bf00      	nop
 8007256:	bf00      	nop
 8007258:	3714      	adds	r7, #20
 800725a:	46bd      	mov	sp, r7
 800725c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007260:	4770      	bx	lr
 8007262:	bf00      	nop
 8007264:	20008e2c 	.word	0x20008e2c

08007268 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007268:	b580      	push	{r7, lr}
 800726a:	b086      	sub	sp, #24
 800726c:	af00      	add	r7, sp, #0
 800726e:	60f8      	str	r0, [r7, #12]
 8007270:	60b9      	str	r1, [r7, #8]
 8007272:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007278:	f001 fbe6 	bl	8008a48 <vPortEnterCritical>
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007282:	b25b      	sxtb	r3, r3
 8007284:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007288:	d103      	bne.n	8007292 <vQueueWaitForMessageRestricted+0x2a>
 800728a:	697b      	ldr	r3, [r7, #20]
 800728c:	2200      	movs	r2, #0
 800728e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007292:	697b      	ldr	r3, [r7, #20]
 8007294:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007298:	b25b      	sxtb	r3, r3
 800729a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800729e:	d103      	bne.n	80072a8 <vQueueWaitForMessageRestricted+0x40>
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	2200      	movs	r2, #0
 80072a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80072a8:	f001 fc00 	bl	8008aac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80072ac:	697b      	ldr	r3, [r7, #20]
 80072ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d106      	bne.n	80072c2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80072b4:	697b      	ldr	r3, [r7, #20]
 80072b6:	3324      	adds	r3, #36	@ 0x24
 80072b8:	687a      	ldr	r2, [r7, #4]
 80072ba:	68b9      	ldr	r1, [r7, #8]
 80072bc:	4618      	mov	r0, r3
 80072be:	f000 fc45 	bl	8007b4c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80072c2:	6978      	ldr	r0, [r7, #20]
 80072c4:	f7ff ff26 	bl	8007114 <prvUnlockQueue>
	}
 80072c8:	bf00      	nop
 80072ca:	3718      	adds	r7, #24
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bd80      	pop	{r7, pc}

080072d0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b08e      	sub	sp, #56	@ 0x38
 80072d4:	af04      	add	r7, sp, #16
 80072d6:	60f8      	str	r0, [r7, #12]
 80072d8:	60b9      	str	r1, [r7, #8]
 80072da:	607a      	str	r2, [r7, #4]
 80072dc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80072de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d10b      	bne.n	80072fc <xTaskCreateStatic+0x2c>
	__asm volatile
 80072e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072e8:	f383 8811 	msr	BASEPRI, r3
 80072ec:	f3bf 8f6f 	isb	sy
 80072f0:	f3bf 8f4f 	dsb	sy
 80072f4:	623b      	str	r3, [r7, #32]
}
 80072f6:	bf00      	nop
 80072f8:	bf00      	nop
 80072fa:	e7fd      	b.n	80072f8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80072fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d10b      	bne.n	800731a <xTaskCreateStatic+0x4a>
	__asm volatile
 8007302:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007306:	f383 8811 	msr	BASEPRI, r3
 800730a:	f3bf 8f6f 	isb	sy
 800730e:	f3bf 8f4f 	dsb	sy
 8007312:	61fb      	str	r3, [r7, #28]
}
 8007314:	bf00      	nop
 8007316:	bf00      	nop
 8007318:	e7fd      	b.n	8007316 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800731a:	235c      	movs	r3, #92	@ 0x5c
 800731c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800731e:	693b      	ldr	r3, [r7, #16]
 8007320:	2b5c      	cmp	r3, #92	@ 0x5c
 8007322:	d00b      	beq.n	800733c <xTaskCreateStatic+0x6c>
	__asm volatile
 8007324:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007328:	f383 8811 	msr	BASEPRI, r3
 800732c:	f3bf 8f6f 	isb	sy
 8007330:	f3bf 8f4f 	dsb	sy
 8007334:	61bb      	str	r3, [r7, #24]
}
 8007336:	bf00      	nop
 8007338:	bf00      	nop
 800733a:	e7fd      	b.n	8007338 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800733c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800733e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007340:	2b00      	cmp	r3, #0
 8007342:	d01e      	beq.n	8007382 <xTaskCreateStatic+0xb2>
 8007344:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007346:	2b00      	cmp	r3, #0
 8007348:	d01b      	beq.n	8007382 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800734a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800734c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800734e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007350:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007352:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007356:	2202      	movs	r2, #2
 8007358:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800735c:	2300      	movs	r3, #0
 800735e:	9303      	str	r3, [sp, #12]
 8007360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007362:	9302      	str	r3, [sp, #8]
 8007364:	f107 0314 	add.w	r3, r7, #20
 8007368:	9301      	str	r3, [sp, #4]
 800736a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800736c:	9300      	str	r3, [sp, #0]
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	687a      	ldr	r2, [r7, #4]
 8007372:	68b9      	ldr	r1, [r7, #8]
 8007374:	68f8      	ldr	r0, [r7, #12]
 8007376:	f000 f850 	bl	800741a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800737a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800737c:	f000 f8de 	bl	800753c <prvAddNewTaskToReadyList>
 8007380:	e001      	b.n	8007386 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8007382:	2300      	movs	r3, #0
 8007384:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007386:	697b      	ldr	r3, [r7, #20]
	}
 8007388:	4618      	mov	r0, r3
 800738a:	3728      	adds	r7, #40	@ 0x28
 800738c:	46bd      	mov	sp, r7
 800738e:	bd80      	pop	{r7, pc}

08007390 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007390:	b580      	push	{r7, lr}
 8007392:	b08c      	sub	sp, #48	@ 0x30
 8007394:	af04      	add	r7, sp, #16
 8007396:	60f8      	str	r0, [r7, #12]
 8007398:	60b9      	str	r1, [r7, #8]
 800739a:	603b      	str	r3, [r7, #0]
 800739c:	4613      	mov	r3, r2
 800739e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80073a0:	88fb      	ldrh	r3, [r7, #6]
 80073a2:	009b      	lsls	r3, r3, #2
 80073a4:	4618      	mov	r0, r3
 80073a6:	f001 fc71 	bl	8008c8c <pvPortMalloc>
 80073aa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80073ac:	697b      	ldr	r3, [r7, #20]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d00e      	beq.n	80073d0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80073b2:	205c      	movs	r0, #92	@ 0x5c
 80073b4:	f001 fc6a 	bl	8008c8c <pvPortMalloc>
 80073b8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80073ba:	69fb      	ldr	r3, [r7, #28]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d003      	beq.n	80073c8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80073c0:	69fb      	ldr	r3, [r7, #28]
 80073c2:	697a      	ldr	r2, [r7, #20]
 80073c4:	631a      	str	r2, [r3, #48]	@ 0x30
 80073c6:	e005      	b.n	80073d4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80073c8:	6978      	ldr	r0, [r7, #20]
 80073ca:	f001 fd2d 	bl	8008e28 <vPortFree>
 80073ce:	e001      	b.n	80073d4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80073d0:	2300      	movs	r3, #0
 80073d2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80073d4:	69fb      	ldr	r3, [r7, #28]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d017      	beq.n	800740a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80073da:	69fb      	ldr	r3, [r7, #28]
 80073dc:	2200      	movs	r2, #0
 80073de:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80073e2:	88fa      	ldrh	r2, [r7, #6]
 80073e4:	2300      	movs	r3, #0
 80073e6:	9303      	str	r3, [sp, #12]
 80073e8:	69fb      	ldr	r3, [r7, #28]
 80073ea:	9302      	str	r3, [sp, #8]
 80073ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073ee:	9301      	str	r3, [sp, #4]
 80073f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073f2:	9300      	str	r3, [sp, #0]
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	68b9      	ldr	r1, [r7, #8]
 80073f8:	68f8      	ldr	r0, [r7, #12]
 80073fa:	f000 f80e 	bl	800741a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80073fe:	69f8      	ldr	r0, [r7, #28]
 8007400:	f000 f89c 	bl	800753c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007404:	2301      	movs	r3, #1
 8007406:	61bb      	str	r3, [r7, #24]
 8007408:	e002      	b.n	8007410 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800740a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800740e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007410:	69bb      	ldr	r3, [r7, #24]
	}
 8007412:	4618      	mov	r0, r3
 8007414:	3720      	adds	r7, #32
 8007416:	46bd      	mov	sp, r7
 8007418:	bd80      	pop	{r7, pc}

0800741a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800741a:	b580      	push	{r7, lr}
 800741c:	b088      	sub	sp, #32
 800741e:	af00      	add	r7, sp, #0
 8007420:	60f8      	str	r0, [r7, #12]
 8007422:	60b9      	str	r1, [r7, #8]
 8007424:	607a      	str	r2, [r7, #4]
 8007426:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007428:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800742a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	009b      	lsls	r3, r3, #2
 8007430:	461a      	mov	r2, r3
 8007432:	21a5      	movs	r1, #165	@ 0xa5
 8007434:	f012 f883 	bl	801953e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800743a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007442:	3b01      	subs	r3, #1
 8007444:	009b      	lsls	r3, r3, #2
 8007446:	4413      	add	r3, r2
 8007448:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800744a:	69bb      	ldr	r3, [r7, #24]
 800744c:	f023 0307 	bic.w	r3, r3, #7
 8007450:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007452:	69bb      	ldr	r3, [r7, #24]
 8007454:	f003 0307 	and.w	r3, r3, #7
 8007458:	2b00      	cmp	r3, #0
 800745a:	d00b      	beq.n	8007474 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800745c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007460:	f383 8811 	msr	BASEPRI, r3
 8007464:	f3bf 8f6f 	isb	sy
 8007468:	f3bf 8f4f 	dsb	sy
 800746c:	617b      	str	r3, [r7, #20]
}
 800746e:	bf00      	nop
 8007470:	bf00      	nop
 8007472:	e7fd      	b.n	8007470 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d01f      	beq.n	80074ba <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800747a:	2300      	movs	r3, #0
 800747c:	61fb      	str	r3, [r7, #28]
 800747e:	e012      	b.n	80074a6 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007480:	68ba      	ldr	r2, [r7, #8]
 8007482:	69fb      	ldr	r3, [r7, #28]
 8007484:	4413      	add	r3, r2
 8007486:	7819      	ldrb	r1, [r3, #0]
 8007488:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800748a:	69fb      	ldr	r3, [r7, #28]
 800748c:	4413      	add	r3, r2
 800748e:	3334      	adds	r3, #52	@ 0x34
 8007490:	460a      	mov	r2, r1
 8007492:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007494:	68ba      	ldr	r2, [r7, #8]
 8007496:	69fb      	ldr	r3, [r7, #28]
 8007498:	4413      	add	r3, r2
 800749a:	781b      	ldrb	r3, [r3, #0]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d006      	beq.n	80074ae <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80074a0:	69fb      	ldr	r3, [r7, #28]
 80074a2:	3301      	adds	r3, #1
 80074a4:	61fb      	str	r3, [r7, #28]
 80074a6:	69fb      	ldr	r3, [r7, #28]
 80074a8:	2b0f      	cmp	r3, #15
 80074aa:	d9e9      	bls.n	8007480 <prvInitialiseNewTask+0x66>
 80074ac:	e000      	b.n	80074b0 <prvInitialiseNewTask+0x96>
			{
				break;
 80074ae:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80074b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074b2:	2200      	movs	r2, #0
 80074b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80074b8:	e003      	b.n	80074c2 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80074ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074bc:	2200      	movs	r2, #0
 80074be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80074c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074c4:	2b37      	cmp	r3, #55	@ 0x37
 80074c6:	d901      	bls.n	80074cc <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80074c8:	2337      	movs	r3, #55	@ 0x37
 80074ca:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80074cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80074d0:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80074d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80074d6:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80074d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074da:	2200      	movs	r2, #0
 80074dc:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80074de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074e0:	3304      	adds	r3, #4
 80074e2:	4618      	mov	r0, r3
 80074e4:	f7ff f966 	bl	80067b4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80074e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074ea:	3318      	adds	r3, #24
 80074ec:	4618      	mov	r0, r3
 80074ee:	f7ff f961 	bl	80067b4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80074f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80074f6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80074f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074fa:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80074fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007500:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007502:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007504:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007506:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007508:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800750a:	2200      	movs	r2, #0
 800750c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800750e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007510:	2200      	movs	r2, #0
 8007512:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007516:	683a      	ldr	r2, [r7, #0]
 8007518:	68f9      	ldr	r1, [r7, #12]
 800751a:	69b8      	ldr	r0, [r7, #24]
 800751c:	f001 f966 	bl	80087ec <pxPortInitialiseStack>
 8007520:	4602      	mov	r2, r0
 8007522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007524:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007526:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007528:	2b00      	cmp	r3, #0
 800752a:	d002      	beq.n	8007532 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800752c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800752e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007530:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007532:	bf00      	nop
 8007534:	3720      	adds	r7, #32
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}
	...

0800753c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b082      	sub	sp, #8
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007544:	f001 fa80 	bl	8008a48 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007548:	4b2d      	ldr	r3, [pc, #180]	@ (8007600 <prvAddNewTaskToReadyList+0xc4>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	3301      	adds	r3, #1
 800754e:	4a2c      	ldr	r2, [pc, #176]	@ (8007600 <prvAddNewTaskToReadyList+0xc4>)
 8007550:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007552:	4b2c      	ldr	r3, [pc, #176]	@ (8007604 <prvAddNewTaskToReadyList+0xc8>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d109      	bne.n	800756e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800755a:	4a2a      	ldr	r2, [pc, #168]	@ (8007604 <prvAddNewTaskToReadyList+0xc8>)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007560:	4b27      	ldr	r3, [pc, #156]	@ (8007600 <prvAddNewTaskToReadyList+0xc4>)
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	2b01      	cmp	r3, #1
 8007566:	d110      	bne.n	800758a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007568:	f000 fc46 	bl	8007df8 <prvInitialiseTaskLists>
 800756c:	e00d      	b.n	800758a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800756e:	4b26      	ldr	r3, [pc, #152]	@ (8007608 <prvAddNewTaskToReadyList+0xcc>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d109      	bne.n	800758a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007576:	4b23      	ldr	r3, [pc, #140]	@ (8007604 <prvAddNewTaskToReadyList+0xc8>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007580:	429a      	cmp	r2, r3
 8007582:	d802      	bhi.n	800758a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007584:	4a1f      	ldr	r2, [pc, #124]	@ (8007604 <prvAddNewTaskToReadyList+0xc8>)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800758a:	4b20      	ldr	r3, [pc, #128]	@ (800760c <prvAddNewTaskToReadyList+0xd0>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	3301      	adds	r3, #1
 8007590:	4a1e      	ldr	r2, [pc, #120]	@ (800760c <prvAddNewTaskToReadyList+0xd0>)
 8007592:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007594:	4b1d      	ldr	r3, [pc, #116]	@ (800760c <prvAddNewTaskToReadyList+0xd0>)
 8007596:	681a      	ldr	r2, [r3, #0]
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075a0:	4b1b      	ldr	r3, [pc, #108]	@ (8007610 <prvAddNewTaskToReadyList+0xd4>)
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	429a      	cmp	r2, r3
 80075a6:	d903      	bls.n	80075b0 <prvAddNewTaskToReadyList+0x74>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075ac:	4a18      	ldr	r2, [pc, #96]	@ (8007610 <prvAddNewTaskToReadyList+0xd4>)
 80075ae:	6013      	str	r3, [r2, #0]
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075b4:	4613      	mov	r3, r2
 80075b6:	009b      	lsls	r3, r3, #2
 80075b8:	4413      	add	r3, r2
 80075ba:	009b      	lsls	r3, r3, #2
 80075bc:	4a15      	ldr	r2, [pc, #84]	@ (8007614 <prvAddNewTaskToReadyList+0xd8>)
 80075be:	441a      	add	r2, r3
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	3304      	adds	r3, #4
 80075c4:	4619      	mov	r1, r3
 80075c6:	4610      	mov	r0, r2
 80075c8:	f7ff f901 	bl	80067ce <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80075cc:	f001 fa6e 	bl	8008aac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80075d0:	4b0d      	ldr	r3, [pc, #52]	@ (8007608 <prvAddNewTaskToReadyList+0xcc>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d00e      	beq.n	80075f6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80075d8:	4b0a      	ldr	r3, [pc, #40]	@ (8007604 <prvAddNewTaskToReadyList+0xc8>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075e2:	429a      	cmp	r2, r3
 80075e4:	d207      	bcs.n	80075f6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80075e6:	4b0c      	ldr	r3, [pc, #48]	@ (8007618 <prvAddNewTaskToReadyList+0xdc>)
 80075e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80075ec:	601a      	str	r2, [r3, #0]
 80075ee:	f3bf 8f4f 	dsb	sy
 80075f2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80075f6:	bf00      	nop
 80075f8:	3708      	adds	r7, #8
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bd80      	pop	{r7, pc}
 80075fe:	bf00      	nop
 8007600:	20009340 	.word	0x20009340
 8007604:	20008e6c 	.word	0x20008e6c
 8007608:	2000934c 	.word	0x2000934c
 800760c:	2000935c 	.word	0x2000935c
 8007610:	20009348 	.word	0x20009348
 8007614:	20008e70 	.word	0x20008e70
 8007618:	e000ed04 	.word	0xe000ed04

0800761c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800761c:	b580      	push	{r7, lr}
 800761e:	b084      	sub	sp, #16
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007624:	2300      	movs	r3, #0
 8007626:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d018      	beq.n	8007660 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800762e:	4b14      	ldr	r3, [pc, #80]	@ (8007680 <vTaskDelay+0x64>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d00b      	beq.n	800764e <vTaskDelay+0x32>
	__asm volatile
 8007636:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800763a:	f383 8811 	msr	BASEPRI, r3
 800763e:	f3bf 8f6f 	isb	sy
 8007642:	f3bf 8f4f 	dsb	sy
 8007646:	60bb      	str	r3, [r7, #8]
}
 8007648:	bf00      	nop
 800764a:	bf00      	nop
 800764c:	e7fd      	b.n	800764a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800764e:	f000 f883 	bl	8007758 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007652:	2100      	movs	r1, #0
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	f000 fd1b 	bl	8008090 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800765a:	f000 f88b 	bl	8007774 <xTaskResumeAll>
 800765e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d107      	bne.n	8007676 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8007666:	4b07      	ldr	r3, [pc, #28]	@ (8007684 <vTaskDelay+0x68>)
 8007668:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800766c:	601a      	str	r2, [r3, #0]
 800766e:	f3bf 8f4f 	dsb	sy
 8007672:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007676:	bf00      	nop
 8007678:	3710      	adds	r7, #16
 800767a:	46bd      	mov	sp, r7
 800767c:	bd80      	pop	{r7, pc}
 800767e:	bf00      	nop
 8007680:	20009368 	.word	0x20009368
 8007684:	e000ed04 	.word	0xe000ed04

08007688 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b08a      	sub	sp, #40	@ 0x28
 800768c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800768e:	2300      	movs	r3, #0
 8007690:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007692:	2300      	movs	r3, #0
 8007694:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007696:	463a      	mov	r2, r7
 8007698:	1d39      	adds	r1, r7, #4
 800769a:	f107 0308 	add.w	r3, r7, #8
 800769e:	4618      	mov	r0, r3
 80076a0:	f7ff f834 	bl	800670c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80076a4:	6839      	ldr	r1, [r7, #0]
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	68ba      	ldr	r2, [r7, #8]
 80076aa:	9202      	str	r2, [sp, #8]
 80076ac:	9301      	str	r3, [sp, #4]
 80076ae:	2300      	movs	r3, #0
 80076b0:	9300      	str	r3, [sp, #0]
 80076b2:	2300      	movs	r3, #0
 80076b4:	460a      	mov	r2, r1
 80076b6:	4922      	ldr	r1, [pc, #136]	@ (8007740 <vTaskStartScheduler+0xb8>)
 80076b8:	4822      	ldr	r0, [pc, #136]	@ (8007744 <vTaskStartScheduler+0xbc>)
 80076ba:	f7ff fe09 	bl	80072d0 <xTaskCreateStatic>
 80076be:	4603      	mov	r3, r0
 80076c0:	4a21      	ldr	r2, [pc, #132]	@ (8007748 <vTaskStartScheduler+0xc0>)
 80076c2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80076c4:	4b20      	ldr	r3, [pc, #128]	@ (8007748 <vTaskStartScheduler+0xc0>)
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d002      	beq.n	80076d2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80076cc:	2301      	movs	r3, #1
 80076ce:	617b      	str	r3, [r7, #20]
 80076d0:	e001      	b.n	80076d6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80076d2:	2300      	movs	r3, #0
 80076d4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80076d6:	697b      	ldr	r3, [r7, #20]
 80076d8:	2b01      	cmp	r3, #1
 80076da:	d102      	bne.n	80076e2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80076dc:	f000 fd2c 	bl	8008138 <xTimerCreateTimerTask>
 80076e0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80076e2:	697b      	ldr	r3, [r7, #20]
 80076e4:	2b01      	cmp	r3, #1
 80076e6:	d116      	bne.n	8007716 <vTaskStartScheduler+0x8e>
	__asm volatile
 80076e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076ec:	f383 8811 	msr	BASEPRI, r3
 80076f0:	f3bf 8f6f 	isb	sy
 80076f4:	f3bf 8f4f 	dsb	sy
 80076f8:	613b      	str	r3, [r7, #16]
}
 80076fa:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80076fc:	4b13      	ldr	r3, [pc, #76]	@ (800774c <vTaskStartScheduler+0xc4>)
 80076fe:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007702:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007704:	4b12      	ldr	r3, [pc, #72]	@ (8007750 <vTaskStartScheduler+0xc8>)
 8007706:	2201      	movs	r2, #1
 8007708:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800770a:	4b12      	ldr	r3, [pc, #72]	@ (8007754 <vTaskStartScheduler+0xcc>)
 800770c:	2200      	movs	r2, #0
 800770e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007710:	f001 f8f6 	bl	8008900 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007714:	e00f      	b.n	8007736 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007716:	697b      	ldr	r3, [r7, #20]
 8007718:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800771c:	d10b      	bne.n	8007736 <vTaskStartScheduler+0xae>
	__asm volatile
 800771e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007722:	f383 8811 	msr	BASEPRI, r3
 8007726:	f3bf 8f6f 	isb	sy
 800772a:	f3bf 8f4f 	dsb	sy
 800772e:	60fb      	str	r3, [r7, #12]
}
 8007730:	bf00      	nop
 8007732:	bf00      	nop
 8007734:	e7fd      	b.n	8007732 <vTaskStartScheduler+0xaa>
}
 8007736:	bf00      	nop
 8007738:	3718      	adds	r7, #24
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}
 800773e:	bf00      	nop
 8007740:	0801a8fc 	.word	0x0801a8fc
 8007744:	08007dc9 	.word	0x08007dc9
 8007748:	20009364 	.word	0x20009364
 800774c:	20009360 	.word	0x20009360
 8007750:	2000934c 	.word	0x2000934c
 8007754:	20009344 	.word	0x20009344

08007758 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007758:	b480      	push	{r7}
 800775a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800775c:	4b04      	ldr	r3, [pc, #16]	@ (8007770 <vTaskSuspendAll+0x18>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	3301      	adds	r3, #1
 8007762:	4a03      	ldr	r2, [pc, #12]	@ (8007770 <vTaskSuspendAll+0x18>)
 8007764:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007766:	bf00      	nop
 8007768:	46bd      	mov	sp, r7
 800776a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776e:	4770      	bx	lr
 8007770:	20009368 	.word	0x20009368

08007774 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b084      	sub	sp, #16
 8007778:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800777a:	2300      	movs	r3, #0
 800777c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800777e:	2300      	movs	r3, #0
 8007780:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007782:	4b42      	ldr	r3, [pc, #264]	@ (800788c <xTaskResumeAll+0x118>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d10b      	bne.n	80077a2 <xTaskResumeAll+0x2e>
	__asm volatile
 800778a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800778e:	f383 8811 	msr	BASEPRI, r3
 8007792:	f3bf 8f6f 	isb	sy
 8007796:	f3bf 8f4f 	dsb	sy
 800779a:	603b      	str	r3, [r7, #0]
}
 800779c:	bf00      	nop
 800779e:	bf00      	nop
 80077a0:	e7fd      	b.n	800779e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80077a2:	f001 f951 	bl	8008a48 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80077a6:	4b39      	ldr	r3, [pc, #228]	@ (800788c <xTaskResumeAll+0x118>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	3b01      	subs	r3, #1
 80077ac:	4a37      	ldr	r2, [pc, #220]	@ (800788c <xTaskResumeAll+0x118>)
 80077ae:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80077b0:	4b36      	ldr	r3, [pc, #216]	@ (800788c <xTaskResumeAll+0x118>)
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d162      	bne.n	800787e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80077b8:	4b35      	ldr	r3, [pc, #212]	@ (8007890 <xTaskResumeAll+0x11c>)
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d05e      	beq.n	800787e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80077c0:	e02f      	b.n	8007822 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80077c2:	4b34      	ldr	r3, [pc, #208]	@ (8007894 <xTaskResumeAll+0x120>)
 80077c4:	68db      	ldr	r3, [r3, #12]
 80077c6:	68db      	ldr	r3, [r3, #12]
 80077c8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	3318      	adds	r3, #24
 80077ce:	4618      	mov	r0, r3
 80077d0:	f7ff f85a 	bl	8006888 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	3304      	adds	r3, #4
 80077d8:	4618      	mov	r0, r3
 80077da:	f7ff f855 	bl	8006888 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077e2:	4b2d      	ldr	r3, [pc, #180]	@ (8007898 <xTaskResumeAll+0x124>)
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	429a      	cmp	r2, r3
 80077e8:	d903      	bls.n	80077f2 <xTaskResumeAll+0x7e>
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077ee:	4a2a      	ldr	r2, [pc, #168]	@ (8007898 <xTaskResumeAll+0x124>)
 80077f0:	6013      	str	r3, [r2, #0]
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077f6:	4613      	mov	r3, r2
 80077f8:	009b      	lsls	r3, r3, #2
 80077fa:	4413      	add	r3, r2
 80077fc:	009b      	lsls	r3, r3, #2
 80077fe:	4a27      	ldr	r2, [pc, #156]	@ (800789c <xTaskResumeAll+0x128>)
 8007800:	441a      	add	r2, r3
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	3304      	adds	r3, #4
 8007806:	4619      	mov	r1, r3
 8007808:	4610      	mov	r0, r2
 800780a:	f7fe ffe0 	bl	80067ce <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007812:	4b23      	ldr	r3, [pc, #140]	@ (80078a0 <xTaskResumeAll+0x12c>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007818:	429a      	cmp	r2, r3
 800781a:	d302      	bcc.n	8007822 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800781c:	4b21      	ldr	r3, [pc, #132]	@ (80078a4 <xTaskResumeAll+0x130>)
 800781e:	2201      	movs	r2, #1
 8007820:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007822:	4b1c      	ldr	r3, [pc, #112]	@ (8007894 <xTaskResumeAll+0x120>)
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d1cb      	bne.n	80077c2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d001      	beq.n	8007834 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007830:	f000 fb80 	bl	8007f34 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007834:	4b1c      	ldr	r3, [pc, #112]	@ (80078a8 <xTaskResumeAll+0x134>)
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d010      	beq.n	8007862 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007840:	f000 f846 	bl	80078d0 <xTaskIncrementTick>
 8007844:	4603      	mov	r3, r0
 8007846:	2b00      	cmp	r3, #0
 8007848:	d002      	beq.n	8007850 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800784a:	4b16      	ldr	r3, [pc, #88]	@ (80078a4 <xTaskResumeAll+0x130>)
 800784c:	2201      	movs	r2, #1
 800784e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	3b01      	subs	r3, #1
 8007854:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d1f1      	bne.n	8007840 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800785c:	4b12      	ldr	r3, [pc, #72]	@ (80078a8 <xTaskResumeAll+0x134>)
 800785e:	2200      	movs	r2, #0
 8007860:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007862:	4b10      	ldr	r3, [pc, #64]	@ (80078a4 <xTaskResumeAll+0x130>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d009      	beq.n	800787e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800786a:	2301      	movs	r3, #1
 800786c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800786e:	4b0f      	ldr	r3, [pc, #60]	@ (80078ac <xTaskResumeAll+0x138>)
 8007870:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007874:	601a      	str	r2, [r3, #0]
 8007876:	f3bf 8f4f 	dsb	sy
 800787a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800787e:	f001 f915 	bl	8008aac <vPortExitCritical>

	return xAlreadyYielded;
 8007882:	68bb      	ldr	r3, [r7, #8]
}
 8007884:	4618      	mov	r0, r3
 8007886:	3710      	adds	r7, #16
 8007888:	46bd      	mov	sp, r7
 800788a:	bd80      	pop	{r7, pc}
 800788c:	20009368 	.word	0x20009368
 8007890:	20009340 	.word	0x20009340
 8007894:	20009300 	.word	0x20009300
 8007898:	20009348 	.word	0x20009348
 800789c:	20008e70 	.word	0x20008e70
 80078a0:	20008e6c 	.word	0x20008e6c
 80078a4:	20009354 	.word	0x20009354
 80078a8:	20009350 	.word	0x20009350
 80078ac:	e000ed04 	.word	0xe000ed04

080078b0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80078b0:	b480      	push	{r7}
 80078b2:	b083      	sub	sp, #12
 80078b4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80078b6:	4b05      	ldr	r3, [pc, #20]	@ (80078cc <xTaskGetTickCount+0x1c>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80078bc:	687b      	ldr	r3, [r7, #4]
}
 80078be:	4618      	mov	r0, r3
 80078c0:	370c      	adds	r7, #12
 80078c2:	46bd      	mov	sp, r7
 80078c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c8:	4770      	bx	lr
 80078ca:	bf00      	nop
 80078cc:	20009344 	.word	0x20009344

080078d0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b086      	sub	sp, #24
 80078d4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80078d6:	2300      	movs	r3, #0
 80078d8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80078da:	4b4f      	ldr	r3, [pc, #316]	@ (8007a18 <xTaskIncrementTick+0x148>)
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	f040 8090 	bne.w	8007a04 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80078e4:	4b4d      	ldr	r3, [pc, #308]	@ (8007a1c <xTaskIncrementTick+0x14c>)
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	3301      	adds	r3, #1
 80078ea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80078ec:	4a4b      	ldr	r2, [pc, #300]	@ (8007a1c <xTaskIncrementTick+0x14c>)
 80078ee:	693b      	ldr	r3, [r7, #16]
 80078f0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80078f2:	693b      	ldr	r3, [r7, #16]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d121      	bne.n	800793c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80078f8:	4b49      	ldr	r3, [pc, #292]	@ (8007a20 <xTaskIncrementTick+0x150>)
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d00b      	beq.n	800791a <xTaskIncrementTick+0x4a>
	__asm volatile
 8007902:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007906:	f383 8811 	msr	BASEPRI, r3
 800790a:	f3bf 8f6f 	isb	sy
 800790e:	f3bf 8f4f 	dsb	sy
 8007912:	603b      	str	r3, [r7, #0]
}
 8007914:	bf00      	nop
 8007916:	bf00      	nop
 8007918:	e7fd      	b.n	8007916 <xTaskIncrementTick+0x46>
 800791a:	4b41      	ldr	r3, [pc, #260]	@ (8007a20 <xTaskIncrementTick+0x150>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	60fb      	str	r3, [r7, #12]
 8007920:	4b40      	ldr	r3, [pc, #256]	@ (8007a24 <xTaskIncrementTick+0x154>)
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	4a3e      	ldr	r2, [pc, #248]	@ (8007a20 <xTaskIncrementTick+0x150>)
 8007926:	6013      	str	r3, [r2, #0]
 8007928:	4a3e      	ldr	r2, [pc, #248]	@ (8007a24 <xTaskIncrementTick+0x154>)
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	6013      	str	r3, [r2, #0]
 800792e:	4b3e      	ldr	r3, [pc, #248]	@ (8007a28 <xTaskIncrementTick+0x158>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	3301      	adds	r3, #1
 8007934:	4a3c      	ldr	r2, [pc, #240]	@ (8007a28 <xTaskIncrementTick+0x158>)
 8007936:	6013      	str	r3, [r2, #0]
 8007938:	f000 fafc 	bl	8007f34 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800793c:	4b3b      	ldr	r3, [pc, #236]	@ (8007a2c <xTaskIncrementTick+0x15c>)
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	693a      	ldr	r2, [r7, #16]
 8007942:	429a      	cmp	r2, r3
 8007944:	d349      	bcc.n	80079da <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007946:	4b36      	ldr	r3, [pc, #216]	@ (8007a20 <xTaskIncrementTick+0x150>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d104      	bne.n	800795a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007950:	4b36      	ldr	r3, [pc, #216]	@ (8007a2c <xTaskIncrementTick+0x15c>)
 8007952:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007956:	601a      	str	r2, [r3, #0]
					break;
 8007958:	e03f      	b.n	80079da <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800795a:	4b31      	ldr	r3, [pc, #196]	@ (8007a20 <xTaskIncrementTick+0x150>)
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	68db      	ldr	r3, [r3, #12]
 8007960:	68db      	ldr	r3, [r3, #12]
 8007962:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	685b      	ldr	r3, [r3, #4]
 8007968:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800796a:	693a      	ldr	r2, [r7, #16]
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	429a      	cmp	r2, r3
 8007970:	d203      	bcs.n	800797a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007972:	4a2e      	ldr	r2, [pc, #184]	@ (8007a2c <xTaskIncrementTick+0x15c>)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007978:	e02f      	b.n	80079da <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	3304      	adds	r3, #4
 800797e:	4618      	mov	r0, r3
 8007980:	f7fe ff82 	bl	8006888 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007988:	2b00      	cmp	r3, #0
 800798a:	d004      	beq.n	8007996 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	3318      	adds	r3, #24
 8007990:	4618      	mov	r0, r3
 8007992:	f7fe ff79 	bl	8006888 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007996:	68bb      	ldr	r3, [r7, #8]
 8007998:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800799a:	4b25      	ldr	r3, [pc, #148]	@ (8007a30 <xTaskIncrementTick+0x160>)
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	429a      	cmp	r2, r3
 80079a0:	d903      	bls.n	80079aa <xTaskIncrementTick+0xda>
 80079a2:	68bb      	ldr	r3, [r7, #8]
 80079a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079a6:	4a22      	ldr	r2, [pc, #136]	@ (8007a30 <xTaskIncrementTick+0x160>)
 80079a8:	6013      	str	r3, [r2, #0]
 80079aa:	68bb      	ldr	r3, [r7, #8]
 80079ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079ae:	4613      	mov	r3, r2
 80079b0:	009b      	lsls	r3, r3, #2
 80079b2:	4413      	add	r3, r2
 80079b4:	009b      	lsls	r3, r3, #2
 80079b6:	4a1f      	ldr	r2, [pc, #124]	@ (8007a34 <xTaskIncrementTick+0x164>)
 80079b8:	441a      	add	r2, r3
 80079ba:	68bb      	ldr	r3, [r7, #8]
 80079bc:	3304      	adds	r3, #4
 80079be:	4619      	mov	r1, r3
 80079c0:	4610      	mov	r0, r2
 80079c2:	f7fe ff04 	bl	80067ce <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80079c6:	68bb      	ldr	r3, [r7, #8]
 80079c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079ca:	4b1b      	ldr	r3, [pc, #108]	@ (8007a38 <xTaskIncrementTick+0x168>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079d0:	429a      	cmp	r2, r3
 80079d2:	d3b8      	bcc.n	8007946 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80079d4:	2301      	movs	r3, #1
 80079d6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80079d8:	e7b5      	b.n	8007946 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80079da:	4b17      	ldr	r3, [pc, #92]	@ (8007a38 <xTaskIncrementTick+0x168>)
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079e0:	4914      	ldr	r1, [pc, #80]	@ (8007a34 <xTaskIncrementTick+0x164>)
 80079e2:	4613      	mov	r3, r2
 80079e4:	009b      	lsls	r3, r3, #2
 80079e6:	4413      	add	r3, r2
 80079e8:	009b      	lsls	r3, r3, #2
 80079ea:	440b      	add	r3, r1
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	2b01      	cmp	r3, #1
 80079f0:	d901      	bls.n	80079f6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80079f2:	2301      	movs	r3, #1
 80079f4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80079f6:	4b11      	ldr	r3, [pc, #68]	@ (8007a3c <xTaskIncrementTick+0x16c>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d007      	beq.n	8007a0e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80079fe:	2301      	movs	r3, #1
 8007a00:	617b      	str	r3, [r7, #20]
 8007a02:	e004      	b.n	8007a0e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007a04:	4b0e      	ldr	r3, [pc, #56]	@ (8007a40 <xTaskIncrementTick+0x170>)
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	3301      	adds	r3, #1
 8007a0a:	4a0d      	ldr	r2, [pc, #52]	@ (8007a40 <xTaskIncrementTick+0x170>)
 8007a0c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007a0e:	697b      	ldr	r3, [r7, #20]
}
 8007a10:	4618      	mov	r0, r3
 8007a12:	3718      	adds	r7, #24
 8007a14:	46bd      	mov	sp, r7
 8007a16:	bd80      	pop	{r7, pc}
 8007a18:	20009368 	.word	0x20009368
 8007a1c:	20009344 	.word	0x20009344
 8007a20:	200092f8 	.word	0x200092f8
 8007a24:	200092fc 	.word	0x200092fc
 8007a28:	20009358 	.word	0x20009358
 8007a2c:	20009360 	.word	0x20009360
 8007a30:	20009348 	.word	0x20009348
 8007a34:	20008e70 	.word	0x20008e70
 8007a38:	20008e6c 	.word	0x20008e6c
 8007a3c:	20009354 	.word	0x20009354
 8007a40:	20009350 	.word	0x20009350

08007a44 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007a44:	b480      	push	{r7}
 8007a46:	b085      	sub	sp, #20
 8007a48:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007a4a:	4b28      	ldr	r3, [pc, #160]	@ (8007aec <vTaskSwitchContext+0xa8>)
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d003      	beq.n	8007a5a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007a52:	4b27      	ldr	r3, [pc, #156]	@ (8007af0 <vTaskSwitchContext+0xac>)
 8007a54:	2201      	movs	r2, #1
 8007a56:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007a58:	e042      	b.n	8007ae0 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8007a5a:	4b25      	ldr	r3, [pc, #148]	@ (8007af0 <vTaskSwitchContext+0xac>)
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a60:	4b24      	ldr	r3, [pc, #144]	@ (8007af4 <vTaskSwitchContext+0xb0>)
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	60fb      	str	r3, [r7, #12]
 8007a66:	e011      	b.n	8007a8c <vTaskSwitchContext+0x48>
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d10b      	bne.n	8007a86 <vTaskSwitchContext+0x42>
	__asm volatile
 8007a6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a72:	f383 8811 	msr	BASEPRI, r3
 8007a76:	f3bf 8f6f 	isb	sy
 8007a7a:	f3bf 8f4f 	dsb	sy
 8007a7e:	607b      	str	r3, [r7, #4]
}
 8007a80:	bf00      	nop
 8007a82:	bf00      	nop
 8007a84:	e7fd      	b.n	8007a82 <vTaskSwitchContext+0x3e>
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	3b01      	subs	r3, #1
 8007a8a:	60fb      	str	r3, [r7, #12]
 8007a8c:	491a      	ldr	r1, [pc, #104]	@ (8007af8 <vTaskSwitchContext+0xb4>)
 8007a8e:	68fa      	ldr	r2, [r7, #12]
 8007a90:	4613      	mov	r3, r2
 8007a92:	009b      	lsls	r3, r3, #2
 8007a94:	4413      	add	r3, r2
 8007a96:	009b      	lsls	r3, r3, #2
 8007a98:	440b      	add	r3, r1
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d0e3      	beq.n	8007a68 <vTaskSwitchContext+0x24>
 8007aa0:	68fa      	ldr	r2, [r7, #12]
 8007aa2:	4613      	mov	r3, r2
 8007aa4:	009b      	lsls	r3, r3, #2
 8007aa6:	4413      	add	r3, r2
 8007aa8:	009b      	lsls	r3, r3, #2
 8007aaa:	4a13      	ldr	r2, [pc, #76]	@ (8007af8 <vTaskSwitchContext+0xb4>)
 8007aac:	4413      	add	r3, r2
 8007aae:	60bb      	str	r3, [r7, #8]
 8007ab0:	68bb      	ldr	r3, [r7, #8]
 8007ab2:	685b      	ldr	r3, [r3, #4]
 8007ab4:	685a      	ldr	r2, [r3, #4]
 8007ab6:	68bb      	ldr	r3, [r7, #8]
 8007ab8:	605a      	str	r2, [r3, #4]
 8007aba:	68bb      	ldr	r3, [r7, #8]
 8007abc:	685a      	ldr	r2, [r3, #4]
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	3308      	adds	r3, #8
 8007ac2:	429a      	cmp	r2, r3
 8007ac4:	d104      	bne.n	8007ad0 <vTaskSwitchContext+0x8c>
 8007ac6:	68bb      	ldr	r3, [r7, #8]
 8007ac8:	685b      	ldr	r3, [r3, #4]
 8007aca:	685a      	ldr	r2, [r3, #4]
 8007acc:	68bb      	ldr	r3, [r7, #8]
 8007ace:	605a      	str	r2, [r3, #4]
 8007ad0:	68bb      	ldr	r3, [r7, #8]
 8007ad2:	685b      	ldr	r3, [r3, #4]
 8007ad4:	68db      	ldr	r3, [r3, #12]
 8007ad6:	4a09      	ldr	r2, [pc, #36]	@ (8007afc <vTaskSwitchContext+0xb8>)
 8007ad8:	6013      	str	r3, [r2, #0]
 8007ada:	4a06      	ldr	r2, [pc, #24]	@ (8007af4 <vTaskSwitchContext+0xb0>)
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	6013      	str	r3, [r2, #0]
}
 8007ae0:	bf00      	nop
 8007ae2:	3714      	adds	r7, #20
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aea:	4770      	bx	lr
 8007aec:	20009368 	.word	0x20009368
 8007af0:	20009354 	.word	0x20009354
 8007af4:	20009348 	.word	0x20009348
 8007af8:	20008e70 	.word	0x20008e70
 8007afc:	20008e6c 	.word	0x20008e6c

08007b00 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b084      	sub	sp, #16
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
 8007b08:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d10b      	bne.n	8007b28 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007b10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b14:	f383 8811 	msr	BASEPRI, r3
 8007b18:	f3bf 8f6f 	isb	sy
 8007b1c:	f3bf 8f4f 	dsb	sy
 8007b20:	60fb      	str	r3, [r7, #12]
}
 8007b22:	bf00      	nop
 8007b24:	bf00      	nop
 8007b26:	e7fd      	b.n	8007b24 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007b28:	4b07      	ldr	r3, [pc, #28]	@ (8007b48 <vTaskPlaceOnEventList+0x48>)
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	3318      	adds	r3, #24
 8007b2e:	4619      	mov	r1, r3
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f7fe fe70 	bl	8006816 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007b36:	2101      	movs	r1, #1
 8007b38:	6838      	ldr	r0, [r7, #0]
 8007b3a:	f000 faa9 	bl	8008090 <prvAddCurrentTaskToDelayedList>
}
 8007b3e:	bf00      	nop
 8007b40:	3710      	adds	r7, #16
 8007b42:	46bd      	mov	sp, r7
 8007b44:	bd80      	pop	{r7, pc}
 8007b46:	bf00      	nop
 8007b48:	20008e6c 	.word	0x20008e6c

08007b4c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b086      	sub	sp, #24
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	60f8      	str	r0, [r7, #12]
 8007b54:	60b9      	str	r1, [r7, #8]
 8007b56:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d10b      	bne.n	8007b76 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8007b5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b62:	f383 8811 	msr	BASEPRI, r3
 8007b66:	f3bf 8f6f 	isb	sy
 8007b6a:	f3bf 8f4f 	dsb	sy
 8007b6e:	617b      	str	r3, [r7, #20]
}
 8007b70:	bf00      	nop
 8007b72:	bf00      	nop
 8007b74:	e7fd      	b.n	8007b72 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007b76:	4b0a      	ldr	r3, [pc, #40]	@ (8007ba0 <vTaskPlaceOnEventListRestricted+0x54>)
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	3318      	adds	r3, #24
 8007b7c:	4619      	mov	r1, r3
 8007b7e:	68f8      	ldr	r0, [r7, #12]
 8007b80:	f7fe fe25 	bl	80067ce <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d002      	beq.n	8007b90 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8007b8a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007b8e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007b90:	6879      	ldr	r1, [r7, #4]
 8007b92:	68b8      	ldr	r0, [r7, #8]
 8007b94:	f000 fa7c 	bl	8008090 <prvAddCurrentTaskToDelayedList>
	}
 8007b98:	bf00      	nop
 8007b9a:	3718      	adds	r7, #24
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	bd80      	pop	{r7, pc}
 8007ba0:	20008e6c 	.word	0x20008e6c

08007ba4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b086      	sub	sp, #24
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	68db      	ldr	r3, [r3, #12]
 8007bb0:	68db      	ldr	r3, [r3, #12]
 8007bb2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007bb4:	693b      	ldr	r3, [r7, #16]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d10b      	bne.n	8007bd2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8007bba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bbe:	f383 8811 	msr	BASEPRI, r3
 8007bc2:	f3bf 8f6f 	isb	sy
 8007bc6:	f3bf 8f4f 	dsb	sy
 8007bca:	60fb      	str	r3, [r7, #12]
}
 8007bcc:	bf00      	nop
 8007bce:	bf00      	nop
 8007bd0:	e7fd      	b.n	8007bce <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007bd2:	693b      	ldr	r3, [r7, #16]
 8007bd4:	3318      	adds	r3, #24
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	f7fe fe56 	bl	8006888 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007bdc:	4b1d      	ldr	r3, [pc, #116]	@ (8007c54 <xTaskRemoveFromEventList+0xb0>)
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d11d      	bne.n	8007c20 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007be4:	693b      	ldr	r3, [r7, #16]
 8007be6:	3304      	adds	r3, #4
 8007be8:	4618      	mov	r0, r3
 8007bea:	f7fe fe4d 	bl	8006888 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007bee:	693b      	ldr	r3, [r7, #16]
 8007bf0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007bf2:	4b19      	ldr	r3, [pc, #100]	@ (8007c58 <xTaskRemoveFromEventList+0xb4>)
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	429a      	cmp	r2, r3
 8007bf8:	d903      	bls.n	8007c02 <xTaskRemoveFromEventList+0x5e>
 8007bfa:	693b      	ldr	r3, [r7, #16]
 8007bfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bfe:	4a16      	ldr	r2, [pc, #88]	@ (8007c58 <xTaskRemoveFromEventList+0xb4>)
 8007c00:	6013      	str	r3, [r2, #0]
 8007c02:	693b      	ldr	r3, [r7, #16]
 8007c04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c06:	4613      	mov	r3, r2
 8007c08:	009b      	lsls	r3, r3, #2
 8007c0a:	4413      	add	r3, r2
 8007c0c:	009b      	lsls	r3, r3, #2
 8007c0e:	4a13      	ldr	r2, [pc, #76]	@ (8007c5c <xTaskRemoveFromEventList+0xb8>)
 8007c10:	441a      	add	r2, r3
 8007c12:	693b      	ldr	r3, [r7, #16]
 8007c14:	3304      	adds	r3, #4
 8007c16:	4619      	mov	r1, r3
 8007c18:	4610      	mov	r0, r2
 8007c1a:	f7fe fdd8 	bl	80067ce <vListInsertEnd>
 8007c1e:	e005      	b.n	8007c2c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007c20:	693b      	ldr	r3, [r7, #16]
 8007c22:	3318      	adds	r3, #24
 8007c24:	4619      	mov	r1, r3
 8007c26:	480e      	ldr	r0, [pc, #56]	@ (8007c60 <xTaskRemoveFromEventList+0xbc>)
 8007c28:	f7fe fdd1 	bl	80067ce <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007c2c:	693b      	ldr	r3, [r7, #16]
 8007c2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c30:	4b0c      	ldr	r3, [pc, #48]	@ (8007c64 <xTaskRemoveFromEventList+0xc0>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c36:	429a      	cmp	r2, r3
 8007c38:	d905      	bls.n	8007c46 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007c3a:	2301      	movs	r3, #1
 8007c3c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007c3e:	4b0a      	ldr	r3, [pc, #40]	@ (8007c68 <xTaskRemoveFromEventList+0xc4>)
 8007c40:	2201      	movs	r2, #1
 8007c42:	601a      	str	r2, [r3, #0]
 8007c44:	e001      	b.n	8007c4a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8007c46:	2300      	movs	r3, #0
 8007c48:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007c4a:	697b      	ldr	r3, [r7, #20]
}
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	3718      	adds	r7, #24
 8007c50:	46bd      	mov	sp, r7
 8007c52:	bd80      	pop	{r7, pc}
 8007c54:	20009368 	.word	0x20009368
 8007c58:	20009348 	.word	0x20009348
 8007c5c:	20008e70 	.word	0x20008e70
 8007c60:	20009300 	.word	0x20009300
 8007c64:	20008e6c 	.word	0x20008e6c
 8007c68:	20009354 	.word	0x20009354

08007c6c <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b084      	sub	sp, #16
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d10b      	bne.n	8007c92 <vTaskSetTimeOutState+0x26>
	__asm volatile
 8007c7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c7e:	f383 8811 	msr	BASEPRI, r3
 8007c82:	f3bf 8f6f 	isb	sy
 8007c86:	f3bf 8f4f 	dsb	sy
 8007c8a:	60fb      	str	r3, [r7, #12]
}
 8007c8c:	bf00      	nop
 8007c8e:	bf00      	nop
 8007c90:	e7fd      	b.n	8007c8e <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 8007c92:	f000 fed9 	bl	8008a48 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007c96:	4b07      	ldr	r3, [pc, #28]	@ (8007cb4 <vTaskSetTimeOutState+0x48>)
 8007c98:	681a      	ldr	r2, [r3, #0]
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8007c9e:	4b06      	ldr	r3, [pc, #24]	@ (8007cb8 <vTaskSetTimeOutState+0x4c>)
 8007ca0:	681a      	ldr	r2, [r3, #0]
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8007ca6:	f000 ff01 	bl	8008aac <vPortExitCritical>
}
 8007caa:	bf00      	nop
 8007cac:	3710      	adds	r7, #16
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd80      	pop	{r7, pc}
 8007cb2:	bf00      	nop
 8007cb4:	20009358 	.word	0x20009358
 8007cb8:	20009344 	.word	0x20009344

08007cbc <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007cbc:	b480      	push	{r7}
 8007cbe:	b083      	sub	sp, #12
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007cc4:	4b06      	ldr	r3, [pc, #24]	@ (8007ce0 <vTaskInternalSetTimeOutState+0x24>)
 8007cc6:	681a      	ldr	r2, [r3, #0]
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007ccc:	4b05      	ldr	r3, [pc, #20]	@ (8007ce4 <vTaskInternalSetTimeOutState+0x28>)
 8007cce:	681a      	ldr	r2, [r3, #0]
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	605a      	str	r2, [r3, #4]
}
 8007cd4:	bf00      	nop
 8007cd6:	370c      	adds	r7, #12
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cde:	4770      	bx	lr
 8007ce0:	20009358 	.word	0x20009358
 8007ce4:	20009344 	.word	0x20009344

08007ce8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b088      	sub	sp, #32
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
 8007cf0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d10b      	bne.n	8007d10 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007cf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cfc:	f383 8811 	msr	BASEPRI, r3
 8007d00:	f3bf 8f6f 	isb	sy
 8007d04:	f3bf 8f4f 	dsb	sy
 8007d08:	613b      	str	r3, [r7, #16]
}
 8007d0a:	bf00      	nop
 8007d0c:	bf00      	nop
 8007d0e:	e7fd      	b.n	8007d0c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d10b      	bne.n	8007d2e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8007d16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d1a:	f383 8811 	msr	BASEPRI, r3
 8007d1e:	f3bf 8f6f 	isb	sy
 8007d22:	f3bf 8f4f 	dsb	sy
 8007d26:	60fb      	str	r3, [r7, #12]
}
 8007d28:	bf00      	nop
 8007d2a:	bf00      	nop
 8007d2c:	e7fd      	b.n	8007d2a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007d2e:	f000 fe8b 	bl	8008a48 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007d32:	4b1d      	ldr	r3, [pc, #116]	@ (8007da8 <xTaskCheckForTimeOut+0xc0>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	685b      	ldr	r3, [r3, #4]
 8007d3c:	69ba      	ldr	r2, [r7, #24]
 8007d3e:	1ad3      	subs	r3, r2, r3
 8007d40:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007d4a:	d102      	bne.n	8007d52 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	61fb      	str	r3, [r7, #28]
 8007d50:	e023      	b.n	8007d9a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681a      	ldr	r2, [r3, #0]
 8007d56:	4b15      	ldr	r3, [pc, #84]	@ (8007dac <xTaskCheckForTimeOut+0xc4>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	429a      	cmp	r2, r3
 8007d5c:	d007      	beq.n	8007d6e <xTaskCheckForTimeOut+0x86>
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	685b      	ldr	r3, [r3, #4]
 8007d62:	69ba      	ldr	r2, [r7, #24]
 8007d64:	429a      	cmp	r2, r3
 8007d66:	d302      	bcc.n	8007d6e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007d68:	2301      	movs	r3, #1
 8007d6a:	61fb      	str	r3, [r7, #28]
 8007d6c:	e015      	b.n	8007d9a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	697a      	ldr	r2, [r7, #20]
 8007d74:	429a      	cmp	r2, r3
 8007d76:	d20b      	bcs.n	8007d90 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	681a      	ldr	r2, [r3, #0]
 8007d7c:	697b      	ldr	r3, [r7, #20]
 8007d7e:	1ad2      	subs	r2, r2, r3
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007d84:	6878      	ldr	r0, [r7, #4]
 8007d86:	f7ff ff99 	bl	8007cbc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	61fb      	str	r3, [r7, #28]
 8007d8e:	e004      	b.n	8007d9a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	2200      	movs	r2, #0
 8007d94:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007d96:	2301      	movs	r3, #1
 8007d98:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007d9a:	f000 fe87 	bl	8008aac <vPortExitCritical>

	return xReturn;
 8007d9e:	69fb      	ldr	r3, [r7, #28]
}
 8007da0:	4618      	mov	r0, r3
 8007da2:	3720      	adds	r7, #32
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bd80      	pop	{r7, pc}
 8007da8:	20009344 	.word	0x20009344
 8007dac:	20009358 	.word	0x20009358

08007db0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007db0:	b480      	push	{r7}
 8007db2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007db4:	4b03      	ldr	r3, [pc, #12]	@ (8007dc4 <vTaskMissedYield+0x14>)
 8007db6:	2201      	movs	r2, #1
 8007db8:	601a      	str	r2, [r3, #0]
}
 8007dba:	bf00      	nop
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc2:	4770      	bx	lr
 8007dc4:	20009354 	.word	0x20009354

08007dc8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b082      	sub	sp, #8
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007dd0:	f000 f852 	bl	8007e78 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007dd4:	4b06      	ldr	r3, [pc, #24]	@ (8007df0 <prvIdleTask+0x28>)
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	2b01      	cmp	r3, #1
 8007dda:	d9f9      	bls.n	8007dd0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007ddc:	4b05      	ldr	r3, [pc, #20]	@ (8007df4 <prvIdleTask+0x2c>)
 8007dde:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007de2:	601a      	str	r2, [r3, #0]
 8007de4:	f3bf 8f4f 	dsb	sy
 8007de8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007dec:	e7f0      	b.n	8007dd0 <prvIdleTask+0x8>
 8007dee:	bf00      	nop
 8007df0:	20008e70 	.word	0x20008e70
 8007df4:	e000ed04 	.word	0xe000ed04

08007df8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b082      	sub	sp, #8
 8007dfc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007dfe:	2300      	movs	r3, #0
 8007e00:	607b      	str	r3, [r7, #4]
 8007e02:	e00c      	b.n	8007e1e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007e04:	687a      	ldr	r2, [r7, #4]
 8007e06:	4613      	mov	r3, r2
 8007e08:	009b      	lsls	r3, r3, #2
 8007e0a:	4413      	add	r3, r2
 8007e0c:	009b      	lsls	r3, r3, #2
 8007e0e:	4a12      	ldr	r2, [pc, #72]	@ (8007e58 <prvInitialiseTaskLists+0x60>)
 8007e10:	4413      	add	r3, r2
 8007e12:	4618      	mov	r0, r3
 8007e14:	f7fe fcae 	bl	8006774 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	3301      	adds	r3, #1
 8007e1c:	607b      	str	r3, [r7, #4]
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2b37      	cmp	r3, #55	@ 0x37
 8007e22:	d9ef      	bls.n	8007e04 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007e24:	480d      	ldr	r0, [pc, #52]	@ (8007e5c <prvInitialiseTaskLists+0x64>)
 8007e26:	f7fe fca5 	bl	8006774 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007e2a:	480d      	ldr	r0, [pc, #52]	@ (8007e60 <prvInitialiseTaskLists+0x68>)
 8007e2c:	f7fe fca2 	bl	8006774 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007e30:	480c      	ldr	r0, [pc, #48]	@ (8007e64 <prvInitialiseTaskLists+0x6c>)
 8007e32:	f7fe fc9f 	bl	8006774 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007e36:	480c      	ldr	r0, [pc, #48]	@ (8007e68 <prvInitialiseTaskLists+0x70>)
 8007e38:	f7fe fc9c 	bl	8006774 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007e3c:	480b      	ldr	r0, [pc, #44]	@ (8007e6c <prvInitialiseTaskLists+0x74>)
 8007e3e:	f7fe fc99 	bl	8006774 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007e42:	4b0b      	ldr	r3, [pc, #44]	@ (8007e70 <prvInitialiseTaskLists+0x78>)
 8007e44:	4a05      	ldr	r2, [pc, #20]	@ (8007e5c <prvInitialiseTaskLists+0x64>)
 8007e46:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007e48:	4b0a      	ldr	r3, [pc, #40]	@ (8007e74 <prvInitialiseTaskLists+0x7c>)
 8007e4a:	4a05      	ldr	r2, [pc, #20]	@ (8007e60 <prvInitialiseTaskLists+0x68>)
 8007e4c:	601a      	str	r2, [r3, #0]
}
 8007e4e:	bf00      	nop
 8007e50:	3708      	adds	r7, #8
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bd80      	pop	{r7, pc}
 8007e56:	bf00      	nop
 8007e58:	20008e70 	.word	0x20008e70
 8007e5c:	200092d0 	.word	0x200092d0
 8007e60:	200092e4 	.word	0x200092e4
 8007e64:	20009300 	.word	0x20009300
 8007e68:	20009314 	.word	0x20009314
 8007e6c:	2000932c 	.word	0x2000932c
 8007e70:	200092f8 	.word	0x200092f8
 8007e74:	200092fc 	.word	0x200092fc

08007e78 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b082      	sub	sp, #8
 8007e7c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007e7e:	e019      	b.n	8007eb4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007e80:	f000 fde2 	bl	8008a48 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e84:	4b10      	ldr	r3, [pc, #64]	@ (8007ec8 <prvCheckTasksWaitingTermination+0x50>)
 8007e86:	68db      	ldr	r3, [r3, #12]
 8007e88:	68db      	ldr	r3, [r3, #12]
 8007e8a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	3304      	adds	r3, #4
 8007e90:	4618      	mov	r0, r3
 8007e92:	f7fe fcf9 	bl	8006888 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007e96:	4b0d      	ldr	r3, [pc, #52]	@ (8007ecc <prvCheckTasksWaitingTermination+0x54>)
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	3b01      	subs	r3, #1
 8007e9c:	4a0b      	ldr	r2, [pc, #44]	@ (8007ecc <prvCheckTasksWaitingTermination+0x54>)
 8007e9e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007ea0:	4b0b      	ldr	r3, [pc, #44]	@ (8007ed0 <prvCheckTasksWaitingTermination+0x58>)
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	3b01      	subs	r3, #1
 8007ea6:	4a0a      	ldr	r2, [pc, #40]	@ (8007ed0 <prvCheckTasksWaitingTermination+0x58>)
 8007ea8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007eaa:	f000 fdff 	bl	8008aac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f000 f810 	bl	8007ed4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007eb4:	4b06      	ldr	r3, [pc, #24]	@ (8007ed0 <prvCheckTasksWaitingTermination+0x58>)
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d1e1      	bne.n	8007e80 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007ebc:	bf00      	nop
 8007ebe:	bf00      	nop
 8007ec0:	3708      	adds	r7, #8
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bd80      	pop	{r7, pc}
 8007ec6:	bf00      	nop
 8007ec8:	20009314 	.word	0x20009314
 8007ecc:	20009340 	.word	0x20009340
 8007ed0:	20009328 	.word	0x20009328

08007ed4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b084      	sub	sp, #16
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d108      	bne.n	8007ef8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007eea:	4618      	mov	r0, r3
 8007eec:	f000 ff9c 	bl	8008e28 <vPortFree>
				vPortFree( pxTCB );
 8007ef0:	6878      	ldr	r0, [r7, #4]
 8007ef2:	f000 ff99 	bl	8008e28 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007ef6:	e019      	b.n	8007f2c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007efe:	2b01      	cmp	r3, #1
 8007f00:	d103      	bne.n	8007f0a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f000 ff90 	bl	8008e28 <vPortFree>
	}
 8007f08:	e010      	b.n	8007f2c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007f10:	2b02      	cmp	r3, #2
 8007f12:	d00b      	beq.n	8007f2c <prvDeleteTCB+0x58>
	__asm volatile
 8007f14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f18:	f383 8811 	msr	BASEPRI, r3
 8007f1c:	f3bf 8f6f 	isb	sy
 8007f20:	f3bf 8f4f 	dsb	sy
 8007f24:	60fb      	str	r3, [r7, #12]
}
 8007f26:	bf00      	nop
 8007f28:	bf00      	nop
 8007f2a:	e7fd      	b.n	8007f28 <prvDeleteTCB+0x54>
	}
 8007f2c:	bf00      	nop
 8007f2e:	3710      	adds	r7, #16
 8007f30:	46bd      	mov	sp, r7
 8007f32:	bd80      	pop	{r7, pc}

08007f34 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007f34:	b480      	push	{r7}
 8007f36:	b083      	sub	sp, #12
 8007f38:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007f3a:	4b0c      	ldr	r3, [pc, #48]	@ (8007f6c <prvResetNextTaskUnblockTime+0x38>)
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d104      	bne.n	8007f4e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007f44:	4b0a      	ldr	r3, [pc, #40]	@ (8007f70 <prvResetNextTaskUnblockTime+0x3c>)
 8007f46:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007f4a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007f4c:	e008      	b.n	8007f60 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f4e:	4b07      	ldr	r3, [pc, #28]	@ (8007f6c <prvResetNextTaskUnblockTime+0x38>)
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	68db      	ldr	r3, [r3, #12]
 8007f54:	68db      	ldr	r3, [r3, #12]
 8007f56:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	685b      	ldr	r3, [r3, #4]
 8007f5c:	4a04      	ldr	r2, [pc, #16]	@ (8007f70 <prvResetNextTaskUnblockTime+0x3c>)
 8007f5e:	6013      	str	r3, [r2, #0]
}
 8007f60:	bf00      	nop
 8007f62:	370c      	adds	r7, #12
 8007f64:	46bd      	mov	sp, r7
 8007f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6a:	4770      	bx	lr
 8007f6c:	200092f8 	.word	0x200092f8
 8007f70:	20009360 	.word	0x20009360

08007f74 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007f74:	b480      	push	{r7}
 8007f76:	b083      	sub	sp, #12
 8007f78:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007f7a:	4b0b      	ldr	r3, [pc, #44]	@ (8007fa8 <xTaskGetSchedulerState+0x34>)
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d102      	bne.n	8007f88 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007f82:	2301      	movs	r3, #1
 8007f84:	607b      	str	r3, [r7, #4]
 8007f86:	e008      	b.n	8007f9a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f88:	4b08      	ldr	r3, [pc, #32]	@ (8007fac <xTaskGetSchedulerState+0x38>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d102      	bne.n	8007f96 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007f90:	2302      	movs	r3, #2
 8007f92:	607b      	str	r3, [r7, #4]
 8007f94:	e001      	b.n	8007f9a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007f96:	2300      	movs	r3, #0
 8007f98:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007f9a:	687b      	ldr	r3, [r7, #4]
	}
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	370c      	adds	r7, #12
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa6:	4770      	bx	lr
 8007fa8:	2000934c 	.word	0x2000934c
 8007fac:	20009368 	.word	0x20009368

08007fb0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b086      	sub	sp, #24
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d058      	beq.n	8008078 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007fc6:	4b2f      	ldr	r3, [pc, #188]	@ (8008084 <xTaskPriorityDisinherit+0xd4>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	693a      	ldr	r2, [r7, #16]
 8007fcc:	429a      	cmp	r2, r3
 8007fce:	d00b      	beq.n	8007fe8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8007fd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fd4:	f383 8811 	msr	BASEPRI, r3
 8007fd8:	f3bf 8f6f 	isb	sy
 8007fdc:	f3bf 8f4f 	dsb	sy
 8007fe0:	60fb      	str	r3, [r7, #12]
}
 8007fe2:	bf00      	nop
 8007fe4:	bf00      	nop
 8007fe6:	e7fd      	b.n	8007fe4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007fe8:	693b      	ldr	r3, [r7, #16]
 8007fea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d10b      	bne.n	8008008 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8007ff0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ff4:	f383 8811 	msr	BASEPRI, r3
 8007ff8:	f3bf 8f6f 	isb	sy
 8007ffc:	f3bf 8f4f 	dsb	sy
 8008000:	60bb      	str	r3, [r7, #8]
}
 8008002:	bf00      	nop
 8008004:	bf00      	nop
 8008006:	e7fd      	b.n	8008004 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008008:	693b      	ldr	r3, [r7, #16]
 800800a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800800c:	1e5a      	subs	r2, r3, #1
 800800e:	693b      	ldr	r3, [r7, #16]
 8008010:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008012:	693b      	ldr	r3, [r7, #16]
 8008014:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008016:	693b      	ldr	r3, [r7, #16]
 8008018:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800801a:	429a      	cmp	r2, r3
 800801c:	d02c      	beq.n	8008078 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800801e:	693b      	ldr	r3, [r7, #16]
 8008020:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008022:	2b00      	cmp	r3, #0
 8008024:	d128      	bne.n	8008078 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008026:	693b      	ldr	r3, [r7, #16]
 8008028:	3304      	adds	r3, #4
 800802a:	4618      	mov	r0, r3
 800802c:	f7fe fc2c 	bl	8006888 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008030:	693b      	ldr	r3, [r7, #16]
 8008032:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008034:	693b      	ldr	r3, [r7, #16]
 8008036:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008038:	693b      	ldr	r3, [r7, #16]
 800803a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800803c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008040:	693b      	ldr	r3, [r7, #16]
 8008042:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008044:	693b      	ldr	r3, [r7, #16]
 8008046:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008048:	4b0f      	ldr	r3, [pc, #60]	@ (8008088 <xTaskPriorityDisinherit+0xd8>)
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	429a      	cmp	r2, r3
 800804e:	d903      	bls.n	8008058 <xTaskPriorityDisinherit+0xa8>
 8008050:	693b      	ldr	r3, [r7, #16]
 8008052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008054:	4a0c      	ldr	r2, [pc, #48]	@ (8008088 <xTaskPriorityDisinherit+0xd8>)
 8008056:	6013      	str	r3, [r2, #0]
 8008058:	693b      	ldr	r3, [r7, #16]
 800805a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800805c:	4613      	mov	r3, r2
 800805e:	009b      	lsls	r3, r3, #2
 8008060:	4413      	add	r3, r2
 8008062:	009b      	lsls	r3, r3, #2
 8008064:	4a09      	ldr	r2, [pc, #36]	@ (800808c <xTaskPriorityDisinherit+0xdc>)
 8008066:	441a      	add	r2, r3
 8008068:	693b      	ldr	r3, [r7, #16]
 800806a:	3304      	adds	r3, #4
 800806c:	4619      	mov	r1, r3
 800806e:	4610      	mov	r0, r2
 8008070:	f7fe fbad 	bl	80067ce <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008074:	2301      	movs	r3, #1
 8008076:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008078:	697b      	ldr	r3, [r7, #20]
	}
 800807a:	4618      	mov	r0, r3
 800807c:	3718      	adds	r7, #24
 800807e:	46bd      	mov	sp, r7
 8008080:	bd80      	pop	{r7, pc}
 8008082:	bf00      	nop
 8008084:	20008e6c 	.word	0x20008e6c
 8008088:	20009348 	.word	0x20009348
 800808c:	20008e70 	.word	0x20008e70

08008090 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b084      	sub	sp, #16
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
 8008098:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800809a:	4b21      	ldr	r3, [pc, #132]	@ (8008120 <prvAddCurrentTaskToDelayedList+0x90>)
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80080a0:	4b20      	ldr	r3, [pc, #128]	@ (8008124 <prvAddCurrentTaskToDelayedList+0x94>)
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	3304      	adds	r3, #4
 80080a6:	4618      	mov	r0, r3
 80080a8:	f7fe fbee 	bl	8006888 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80080b2:	d10a      	bne.n	80080ca <prvAddCurrentTaskToDelayedList+0x3a>
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d007      	beq.n	80080ca <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80080ba:	4b1a      	ldr	r3, [pc, #104]	@ (8008124 <prvAddCurrentTaskToDelayedList+0x94>)
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	3304      	adds	r3, #4
 80080c0:	4619      	mov	r1, r3
 80080c2:	4819      	ldr	r0, [pc, #100]	@ (8008128 <prvAddCurrentTaskToDelayedList+0x98>)
 80080c4:	f7fe fb83 	bl	80067ce <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80080c8:	e026      	b.n	8008118 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80080ca:	68fa      	ldr	r2, [r7, #12]
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	4413      	add	r3, r2
 80080d0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80080d2:	4b14      	ldr	r3, [pc, #80]	@ (8008124 <prvAddCurrentTaskToDelayedList+0x94>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	68ba      	ldr	r2, [r7, #8]
 80080d8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80080da:	68ba      	ldr	r2, [r7, #8]
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	429a      	cmp	r2, r3
 80080e0:	d209      	bcs.n	80080f6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80080e2:	4b12      	ldr	r3, [pc, #72]	@ (800812c <prvAddCurrentTaskToDelayedList+0x9c>)
 80080e4:	681a      	ldr	r2, [r3, #0]
 80080e6:	4b0f      	ldr	r3, [pc, #60]	@ (8008124 <prvAddCurrentTaskToDelayedList+0x94>)
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	3304      	adds	r3, #4
 80080ec:	4619      	mov	r1, r3
 80080ee:	4610      	mov	r0, r2
 80080f0:	f7fe fb91 	bl	8006816 <vListInsert>
}
 80080f4:	e010      	b.n	8008118 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80080f6:	4b0e      	ldr	r3, [pc, #56]	@ (8008130 <prvAddCurrentTaskToDelayedList+0xa0>)
 80080f8:	681a      	ldr	r2, [r3, #0]
 80080fa:	4b0a      	ldr	r3, [pc, #40]	@ (8008124 <prvAddCurrentTaskToDelayedList+0x94>)
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	3304      	adds	r3, #4
 8008100:	4619      	mov	r1, r3
 8008102:	4610      	mov	r0, r2
 8008104:	f7fe fb87 	bl	8006816 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008108:	4b0a      	ldr	r3, [pc, #40]	@ (8008134 <prvAddCurrentTaskToDelayedList+0xa4>)
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	68ba      	ldr	r2, [r7, #8]
 800810e:	429a      	cmp	r2, r3
 8008110:	d202      	bcs.n	8008118 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008112:	4a08      	ldr	r2, [pc, #32]	@ (8008134 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	6013      	str	r3, [r2, #0]
}
 8008118:	bf00      	nop
 800811a:	3710      	adds	r7, #16
 800811c:	46bd      	mov	sp, r7
 800811e:	bd80      	pop	{r7, pc}
 8008120:	20009344 	.word	0x20009344
 8008124:	20008e6c 	.word	0x20008e6c
 8008128:	2000932c 	.word	0x2000932c
 800812c:	200092fc 	.word	0x200092fc
 8008130:	200092f8 	.word	0x200092f8
 8008134:	20009360 	.word	0x20009360

08008138 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b08a      	sub	sp, #40	@ 0x28
 800813c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800813e:	2300      	movs	r3, #0
 8008140:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008142:	f000 fb13 	bl	800876c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008146:	4b1d      	ldr	r3, [pc, #116]	@ (80081bc <xTimerCreateTimerTask+0x84>)
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d021      	beq.n	8008192 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800814e:	2300      	movs	r3, #0
 8008150:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008152:	2300      	movs	r3, #0
 8008154:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008156:	1d3a      	adds	r2, r7, #4
 8008158:	f107 0108 	add.w	r1, r7, #8
 800815c:	f107 030c 	add.w	r3, r7, #12
 8008160:	4618      	mov	r0, r3
 8008162:	f7fe faed 	bl	8006740 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008166:	6879      	ldr	r1, [r7, #4]
 8008168:	68bb      	ldr	r3, [r7, #8]
 800816a:	68fa      	ldr	r2, [r7, #12]
 800816c:	9202      	str	r2, [sp, #8]
 800816e:	9301      	str	r3, [sp, #4]
 8008170:	2302      	movs	r3, #2
 8008172:	9300      	str	r3, [sp, #0]
 8008174:	2300      	movs	r3, #0
 8008176:	460a      	mov	r2, r1
 8008178:	4911      	ldr	r1, [pc, #68]	@ (80081c0 <xTimerCreateTimerTask+0x88>)
 800817a:	4812      	ldr	r0, [pc, #72]	@ (80081c4 <xTimerCreateTimerTask+0x8c>)
 800817c:	f7ff f8a8 	bl	80072d0 <xTaskCreateStatic>
 8008180:	4603      	mov	r3, r0
 8008182:	4a11      	ldr	r2, [pc, #68]	@ (80081c8 <xTimerCreateTimerTask+0x90>)
 8008184:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008186:	4b10      	ldr	r3, [pc, #64]	@ (80081c8 <xTimerCreateTimerTask+0x90>)
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d001      	beq.n	8008192 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800818e:	2301      	movs	r3, #1
 8008190:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008192:	697b      	ldr	r3, [r7, #20]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d10b      	bne.n	80081b0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8008198:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800819c:	f383 8811 	msr	BASEPRI, r3
 80081a0:	f3bf 8f6f 	isb	sy
 80081a4:	f3bf 8f4f 	dsb	sy
 80081a8:	613b      	str	r3, [r7, #16]
}
 80081aa:	bf00      	nop
 80081ac:	bf00      	nop
 80081ae:	e7fd      	b.n	80081ac <xTimerCreateTimerTask+0x74>
	return xReturn;
 80081b0:	697b      	ldr	r3, [r7, #20]
}
 80081b2:	4618      	mov	r0, r3
 80081b4:	3718      	adds	r7, #24
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd80      	pop	{r7, pc}
 80081ba:	bf00      	nop
 80081bc:	2000939c 	.word	0x2000939c
 80081c0:	0801a904 	.word	0x0801a904
 80081c4:	08008305 	.word	0x08008305
 80081c8:	200093a0 	.word	0x200093a0

080081cc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b08a      	sub	sp, #40	@ 0x28
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	60f8      	str	r0, [r7, #12]
 80081d4:	60b9      	str	r1, [r7, #8]
 80081d6:	607a      	str	r2, [r7, #4]
 80081d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80081da:	2300      	movs	r3, #0
 80081dc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d10b      	bne.n	80081fc <xTimerGenericCommand+0x30>
	__asm volatile
 80081e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081e8:	f383 8811 	msr	BASEPRI, r3
 80081ec:	f3bf 8f6f 	isb	sy
 80081f0:	f3bf 8f4f 	dsb	sy
 80081f4:	623b      	str	r3, [r7, #32]
}
 80081f6:	bf00      	nop
 80081f8:	bf00      	nop
 80081fa:	e7fd      	b.n	80081f8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80081fc:	4b19      	ldr	r3, [pc, #100]	@ (8008264 <xTimerGenericCommand+0x98>)
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d02a      	beq.n	800825a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008204:	68bb      	ldr	r3, [r7, #8]
 8008206:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008210:	68bb      	ldr	r3, [r7, #8]
 8008212:	2b05      	cmp	r3, #5
 8008214:	dc18      	bgt.n	8008248 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008216:	f7ff fead 	bl	8007f74 <xTaskGetSchedulerState>
 800821a:	4603      	mov	r3, r0
 800821c:	2b02      	cmp	r3, #2
 800821e:	d109      	bne.n	8008234 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008220:	4b10      	ldr	r3, [pc, #64]	@ (8008264 <xTimerGenericCommand+0x98>)
 8008222:	6818      	ldr	r0, [r3, #0]
 8008224:	f107 0110 	add.w	r1, r7, #16
 8008228:	2300      	movs	r3, #0
 800822a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800822c:	f7fe fc60 	bl	8006af0 <xQueueGenericSend>
 8008230:	6278      	str	r0, [r7, #36]	@ 0x24
 8008232:	e012      	b.n	800825a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008234:	4b0b      	ldr	r3, [pc, #44]	@ (8008264 <xTimerGenericCommand+0x98>)
 8008236:	6818      	ldr	r0, [r3, #0]
 8008238:	f107 0110 	add.w	r1, r7, #16
 800823c:	2300      	movs	r3, #0
 800823e:	2200      	movs	r2, #0
 8008240:	f7fe fc56 	bl	8006af0 <xQueueGenericSend>
 8008244:	6278      	str	r0, [r7, #36]	@ 0x24
 8008246:	e008      	b.n	800825a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008248:	4b06      	ldr	r3, [pc, #24]	@ (8008264 <xTimerGenericCommand+0x98>)
 800824a:	6818      	ldr	r0, [r3, #0]
 800824c:	f107 0110 	add.w	r1, r7, #16
 8008250:	2300      	movs	r3, #0
 8008252:	683a      	ldr	r2, [r7, #0]
 8008254:	f7fe fd4e 	bl	8006cf4 <xQueueGenericSendFromISR>
 8008258:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800825a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800825c:	4618      	mov	r0, r3
 800825e:	3728      	adds	r7, #40	@ 0x28
 8008260:	46bd      	mov	sp, r7
 8008262:	bd80      	pop	{r7, pc}
 8008264:	2000939c 	.word	0x2000939c

08008268 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b088      	sub	sp, #32
 800826c:	af02      	add	r7, sp, #8
 800826e:	6078      	str	r0, [r7, #4]
 8008270:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008272:	4b23      	ldr	r3, [pc, #140]	@ (8008300 <prvProcessExpiredTimer+0x98>)
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	68db      	ldr	r3, [r3, #12]
 8008278:	68db      	ldr	r3, [r3, #12]
 800827a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800827c:	697b      	ldr	r3, [r7, #20]
 800827e:	3304      	adds	r3, #4
 8008280:	4618      	mov	r0, r3
 8008282:	f7fe fb01 	bl	8006888 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008286:	697b      	ldr	r3, [r7, #20]
 8008288:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800828c:	f003 0304 	and.w	r3, r3, #4
 8008290:	2b00      	cmp	r3, #0
 8008292:	d023      	beq.n	80082dc <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008294:	697b      	ldr	r3, [r7, #20]
 8008296:	699a      	ldr	r2, [r3, #24]
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	18d1      	adds	r1, r2, r3
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	683a      	ldr	r2, [r7, #0]
 80082a0:	6978      	ldr	r0, [r7, #20]
 80082a2:	f000 f8d5 	bl	8008450 <prvInsertTimerInActiveList>
 80082a6:	4603      	mov	r3, r0
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d020      	beq.n	80082ee <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80082ac:	2300      	movs	r3, #0
 80082ae:	9300      	str	r3, [sp, #0]
 80082b0:	2300      	movs	r3, #0
 80082b2:	687a      	ldr	r2, [r7, #4]
 80082b4:	2100      	movs	r1, #0
 80082b6:	6978      	ldr	r0, [r7, #20]
 80082b8:	f7ff ff88 	bl	80081cc <xTimerGenericCommand>
 80082bc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80082be:	693b      	ldr	r3, [r7, #16]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d114      	bne.n	80082ee <prvProcessExpiredTimer+0x86>
	__asm volatile
 80082c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082c8:	f383 8811 	msr	BASEPRI, r3
 80082cc:	f3bf 8f6f 	isb	sy
 80082d0:	f3bf 8f4f 	dsb	sy
 80082d4:	60fb      	str	r3, [r7, #12]
}
 80082d6:	bf00      	nop
 80082d8:	bf00      	nop
 80082da:	e7fd      	b.n	80082d8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80082dc:	697b      	ldr	r3, [r7, #20]
 80082de:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80082e2:	f023 0301 	bic.w	r3, r3, #1
 80082e6:	b2da      	uxtb	r2, r3
 80082e8:	697b      	ldr	r3, [r7, #20]
 80082ea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80082ee:	697b      	ldr	r3, [r7, #20]
 80082f0:	6a1b      	ldr	r3, [r3, #32]
 80082f2:	6978      	ldr	r0, [r7, #20]
 80082f4:	4798      	blx	r3
}
 80082f6:	bf00      	nop
 80082f8:	3718      	adds	r7, #24
 80082fa:	46bd      	mov	sp, r7
 80082fc:	bd80      	pop	{r7, pc}
 80082fe:	bf00      	nop
 8008300:	20009394 	.word	0x20009394

08008304 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b084      	sub	sp, #16
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800830c:	f107 0308 	add.w	r3, r7, #8
 8008310:	4618      	mov	r0, r3
 8008312:	f000 f859 	bl	80083c8 <prvGetNextExpireTime>
 8008316:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008318:	68bb      	ldr	r3, [r7, #8]
 800831a:	4619      	mov	r1, r3
 800831c:	68f8      	ldr	r0, [r7, #12]
 800831e:	f000 f805 	bl	800832c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008322:	f000 f8d7 	bl	80084d4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008326:	bf00      	nop
 8008328:	e7f0      	b.n	800830c <prvTimerTask+0x8>
	...

0800832c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b084      	sub	sp, #16
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
 8008334:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008336:	f7ff fa0f 	bl	8007758 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800833a:	f107 0308 	add.w	r3, r7, #8
 800833e:	4618      	mov	r0, r3
 8008340:	f000 f866 	bl	8008410 <prvSampleTimeNow>
 8008344:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008346:	68bb      	ldr	r3, [r7, #8]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d130      	bne.n	80083ae <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d10a      	bne.n	8008368 <prvProcessTimerOrBlockTask+0x3c>
 8008352:	687a      	ldr	r2, [r7, #4]
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	429a      	cmp	r2, r3
 8008358:	d806      	bhi.n	8008368 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800835a:	f7ff fa0b 	bl	8007774 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800835e:	68f9      	ldr	r1, [r7, #12]
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f7ff ff81 	bl	8008268 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008366:	e024      	b.n	80083b2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d008      	beq.n	8008380 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800836e:	4b13      	ldr	r3, [pc, #76]	@ (80083bc <prvProcessTimerOrBlockTask+0x90>)
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d101      	bne.n	800837c <prvProcessTimerOrBlockTask+0x50>
 8008378:	2301      	movs	r3, #1
 800837a:	e000      	b.n	800837e <prvProcessTimerOrBlockTask+0x52>
 800837c:	2300      	movs	r3, #0
 800837e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008380:	4b0f      	ldr	r3, [pc, #60]	@ (80083c0 <prvProcessTimerOrBlockTask+0x94>)
 8008382:	6818      	ldr	r0, [r3, #0]
 8008384:	687a      	ldr	r2, [r7, #4]
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	1ad3      	subs	r3, r2, r3
 800838a:	683a      	ldr	r2, [r7, #0]
 800838c:	4619      	mov	r1, r3
 800838e:	f7fe ff6b 	bl	8007268 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008392:	f7ff f9ef 	bl	8007774 <xTaskResumeAll>
 8008396:	4603      	mov	r3, r0
 8008398:	2b00      	cmp	r3, #0
 800839a:	d10a      	bne.n	80083b2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800839c:	4b09      	ldr	r3, [pc, #36]	@ (80083c4 <prvProcessTimerOrBlockTask+0x98>)
 800839e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80083a2:	601a      	str	r2, [r3, #0]
 80083a4:	f3bf 8f4f 	dsb	sy
 80083a8:	f3bf 8f6f 	isb	sy
}
 80083ac:	e001      	b.n	80083b2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80083ae:	f7ff f9e1 	bl	8007774 <xTaskResumeAll>
}
 80083b2:	bf00      	nop
 80083b4:	3710      	adds	r7, #16
 80083b6:	46bd      	mov	sp, r7
 80083b8:	bd80      	pop	{r7, pc}
 80083ba:	bf00      	nop
 80083bc:	20009398 	.word	0x20009398
 80083c0:	2000939c 	.word	0x2000939c
 80083c4:	e000ed04 	.word	0xe000ed04

080083c8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80083c8:	b480      	push	{r7}
 80083ca:	b085      	sub	sp, #20
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80083d0:	4b0e      	ldr	r3, [pc, #56]	@ (800840c <prvGetNextExpireTime+0x44>)
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d101      	bne.n	80083de <prvGetNextExpireTime+0x16>
 80083da:	2201      	movs	r2, #1
 80083dc:	e000      	b.n	80083e0 <prvGetNextExpireTime+0x18>
 80083de:	2200      	movs	r2, #0
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d105      	bne.n	80083f8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80083ec:	4b07      	ldr	r3, [pc, #28]	@ (800840c <prvGetNextExpireTime+0x44>)
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	68db      	ldr	r3, [r3, #12]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	60fb      	str	r3, [r7, #12]
 80083f6:	e001      	b.n	80083fc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80083f8:	2300      	movs	r3, #0
 80083fa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80083fc:	68fb      	ldr	r3, [r7, #12]
}
 80083fe:	4618      	mov	r0, r3
 8008400:	3714      	adds	r7, #20
 8008402:	46bd      	mov	sp, r7
 8008404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008408:	4770      	bx	lr
 800840a:	bf00      	nop
 800840c:	20009394 	.word	0x20009394

08008410 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b084      	sub	sp, #16
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008418:	f7ff fa4a 	bl	80078b0 <xTaskGetTickCount>
 800841c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800841e:	4b0b      	ldr	r3, [pc, #44]	@ (800844c <prvSampleTimeNow+0x3c>)
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	68fa      	ldr	r2, [r7, #12]
 8008424:	429a      	cmp	r2, r3
 8008426:	d205      	bcs.n	8008434 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008428:	f000 f93a 	bl	80086a0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2201      	movs	r2, #1
 8008430:	601a      	str	r2, [r3, #0]
 8008432:	e002      	b.n	800843a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2200      	movs	r2, #0
 8008438:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800843a:	4a04      	ldr	r2, [pc, #16]	@ (800844c <prvSampleTimeNow+0x3c>)
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008440:	68fb      	ldr	r3, [r7, #12]
}
 8008442:	4618      	mov	r0, r3
 8008444:	3710      	adds	r7, #16
 8008446:	46bd      	mov	sp, r7
 8008448:	bd80      	pop	{r7, pc}
 800844a:	bf00      	nop
 800844c:	200093a4 	.word	0x200093a4

08008450 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b086      	sub	sp, #24
 8008454:	af00      	add	r7, sp, #0
 8008456:	60f8      	str	r0, [r7, #12]
 8008458:	60b9      	str	r1, [r7, #8]
 800845a:	607a      	str	r2, [r7, #4]
 800845c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800845e:	2300      	movs	r3, #0
 8008460:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	68ba      	ldr	r2, [r7, #8]
 8008466:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	68fa      	ldr	r2, [r7, #12]
 800846c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800846e:	68ba      	ldr	r2, [r7, #8]
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	429a      	cmp	r2, r3
 8008474:	d812      	bhi.n	800849c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008476:	687a      	ldr	r2, [r7, #4]
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	1ad2      	subs	r2, r2, r3
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	699b      	ldr	r3, [r3, #24]
 8008480:	429a      	cmp	r2, r3
 8008482:	d302      	bcc.n	800848a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008484:	2301      	movs	r3, #1
 8008486:	617b      	str	r3, [r7, #20]
 8008488:	e01b      	b.n	80084c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800848a:	4b10      	ldr	r3, [pc, #64]	@ (80084cc <prvInsertTimerInActiveList+0x7c>)
 800848c:	681a      	ldr	r2, [r3, #0]
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	3304      	adds	r3, #4
 8008492:	4619      	mov	r1, r3
 8008494:	4610      	mov	r0, r2
 8008496:	f7fe f9be 	bl	8006816 <vListInsert>
 800849a:	e012      	b.n	80084c2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800849c:	687a      	ldr	r2, [r7, #4]
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	429a      	cmp	r2, r3
 80084a2:	d206      	bcs.n	80084b2 <prvInsertTimerInActiveList+0x62>
 80084a4:	68ba      	ldr	r2, [r7, #8]
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	429a      	cmp	r2, r3
 80084aa:	d302      	bcc.n	80084b2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80084ac:	2301      	movs	r3, #1
 80084ae:	617b      	str	r3, [r7, #20]
 80084b0:	e007      	b.n	80084c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80084b2:	4b07      	ldr	r3, [pc, #28]	@ (80084d0 <prvInsertTimerInActiveList+0x80>)
 80084b4:	681a      	ldr	r2, [r3, #0]
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	3304      	adds	r3, #4
 80084ba:	4619      	mov	r1, r3
 80084bc:	4610      	mov	r0, r2
 80084be:	f7fe f9aa 	bl	8006816 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80084c2:	697b      	ldr	r3, [r7, #20]
}
 80084c4:	4618      	mov	r0, r3
 80084c6:	3718      	adds	r7, #24
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bd80      	pop	{r7, pc}
 80084cc:	20009398 	.word	0x20009398
 80084d0:	20009394 	.word	0x20009394

080084d4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b08e      	sub	sp, #56	@ 0x38
 80084d8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80084da:	e0ce      	b.n	800867a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	da19      	bge.n	8008516 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80084e2:	1d3b      	adds	r3, r7, #4
 80084e4:	3304      	adds	r3, #4
 80084e6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80084e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d10b      	bne.n	8008506 <prvProcessReceivedCommands+0x32>
	__asm volatile
 80084ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084f2:	f383 8811 	msr	BASEPRI, r3
 80084f6:	f3bf 8f6f 	isb	sy
 80084fa:	f3bf 8f4f 	dsb	sy
 80084fe:	61fb      	str	r3, [r7, #28]
}
 8008500:	bf00      	nop
 8008502:	bf00      	nop
 8008504:	e7fd      	b.n	8008502 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008506:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800850c:	6850      	ldr	r0, [r2, #4]
 800850e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008510:	6892      	ldr	r2, [r2, #8]
 8008512:	4611      	mov	r1, r2
 8008514:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	2b00      	cmp	r3, #0
 800851a:	f2c0 80ae 	blt.w	800867a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008522:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008524:	695b      	ldr	r3, [r3, #20]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d004      	beq.n	8008534 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800852a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800852c:	3304      	adds	r3, #4
 800852e:	4618      	mov	r0, r3
 8008530:	f7fe f9aa 	bl	8006888 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008534:	463b      	mov	r3, r7
 8008536:	4618      	mov	r0, r3
 8008538:	f7ff ff6a 	bl	8008410 <prvSampleTimeNow>
 800853c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2b09      	cmp	r3, #9
 8008542:	f200 8097 	bhi.w	8008674 <prvProcessReceivedCommands+0x1a0>
 8008546:	a201      	add	r2, pc, #4	@ (adr r2, 800854c <prvProcessReceivedCommands+0x78>)
 8008548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800854c:	08008575 	.word	0x08008575
 8008550:	08008575 	.word	0x08008575
 8008554:	08008575 	.word	0x08008575
 8008558:	080085eb 	.word	0x080085eb
 800855c:	080085ff 	.word	0x080085ff
 8008560:	0800864b 	.word	0x0800864b
 8008564:	08008575 	.word	0x08008575
 8008568:	08008575 	.word	0x08008575
 800856c:	080085eb 	.word	0x080085eb
 8008570:	080085ff 	.word	0x080085ff
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008574:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008576:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800857a:	f043 0301 	orr.w	r3, r3, #1
 800857e:	b2da      	uxtb	r2, r3
 8008580:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008582:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008586:	68ba      	ldr	r2, [r7, #8]
 8008588:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800858a:	699b      	ldr	r3, [r3, #24]
 800858c:	18d1      	adds	r1, r2, r3
 800858e:	68bb      	ldr	r3, [r7, #8]
 8008590:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008592:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008594:	f7ff ff5c 	bl	8008450 <prvInsertTimerInActiveList>
 8008598:	4603      	mov	r3, r0
 800859a:	2b00      	cmp	r3, #0
 800859c:	d06c      	beq.n	8008678 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800859e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085a0:	6a1b      	ldr	r3, [r3, #32]
 80085a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80085a4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80085a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085a8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80085ac:	f003 0304 	and.w	r3, r3, #4
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d061      	beq.n	8008678 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80085b4:	68ba      	ldr	r2, [r7, #8]
 80085b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085b8:	699b      	ldr	r3, [r3, #24]
 80085ba:	441a      	add	r2, r3
 80085bc:	2300      	movs	r3, #0
 80085be:	9300      	str	r3, [sp, #0]
 80085c0:	2300      	movs	r3, #0
 80085c2:	2100      	movs	r1, #0
 80085c4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80085c6:	f7ff fe01 	bl	80081cc <xTimerGenericCommand>
 80085ca:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80085cc:	6a3b      	ldr	r3, [r7, #32]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d152      	bne.n	8008678 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80085d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085d6:	f383 8811 	msr	BASEPRI, r3
 80085da:	f3bf 8f6f 	isb	sy
 80085de:	f3bf 8f4f 	dsb	sy
 80085e2:	61bb      	str	r3, [r7, #24]
}
 80085e4:	bf00      	nop
 80085e6:	bf00      	nop
 80085e8:	e7fd      	b.n	80085e6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80085ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80085f0:	f023 0301 	bic.w	r3, r3, #1
 80085f4:	b2da      	uxtb	r2, r3
 80085f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085f8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80085fc:	e03d      	b.n	800867a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80085fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008600:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008604:	f043 0301 	orr.w	r3, r3, #1
 8008608:	b2da      	uxtb	r2, r3
 800860a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800860c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008610:	68ba      	ldr	r2, [r7, #8]
 8008612:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008614:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008616:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008618:	699b      	ldr	r3, [r3, #24]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d10b      	bne.n	8008636 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800861e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008622:	f383 8811 	msr	BASEPRI, r3
 8008626:	f3bf 8f6f 	isb	sy
 800862a:	f3bf 8f4f 	dsb	sy
 800862e:	617b      	str	r3, [r7, #20]
}
 8008630:	bf00      	nop
 8008632:	bf00      	nop
 8008634:	e7fd      	b.n	8008632 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008636:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008638:	699a      	ldr	r2, [r3, #24]
 800863a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800863c:	18d1      	adds	r1, r2, r3
 800863e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008640:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008642:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008644:	f7ff ff04 	bl	8008450 <prvInsertTimerInActiveList>
					break;
 8008648:	e017      	b.n	800867a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800864a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800864c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008650:	f003 0302 	and.w	r3, r3, #2
 8008654:	2b00      	cmp	r3, #0
 8008656:	d103      	bne.n	8008660 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8008658:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800865a:	f000 fbe5 	bl	8008e28 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800865e:	e00c      	b.n	800867a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008660:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008662:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008666:	f023 0301 	bic.w	r3, r3, #1
 800866a:	b2da      	uxtb	r2, r3
 800866c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800866e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008672:	e002      	b.n	800867a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8008674:	bf00      	nop
 8008676:	e000      	b.n	800867a <prvProcessReceivedCommands+0x1a6>
					break;
 8008678:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800867a:	4b08      	ldr	r3, [pc, #32]	@ (800869c <prvProcessReceivedCommands+0x1c8>)
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	1d39      	adds	r1, r7, #4
 8008680:	2200      	movs	r2, #0
 8008682:	4618      	mov	r0, r3
 8008684:	f7fe fbd4 	bl	8006e30 <xQueueReceive>
 8008688:	4603      	mov	r3, r0
 800868a:	2b00      	cmp	r3, #0
 800868c:	f47f af26 	bne.w	80084dc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008690:	bf00      	nop
 8008692:	bf00      	nop
 8008694:	3730      	adds	r7, #48	@ 0x30
 8008696:	46bd      	mov	sp, r7
 8008698:	bd80      	pop	{r7, pc}
 800869a:	bf00      	nop
 800869c:	2000939c 	.word	0x2000939c

080086a0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b088      	sub	sp, #32
 80086a4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80086a6:	e049      	b.n	800873c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80086a8:	4b2e      	ldr	r3, [pc, #184]	@ (8008764 <prvSwitchTimerLists+0xc4>)
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	68db      	ldr	r3, [r3, #12]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80086b2:	4b2c      	ldr	r3, [pc, #176]	@ (8008764 <prvSwitchTimerLists+0xc4>)
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	68db      	ldr	r3, [r3, #12]
 80086b8:	68db      	ldr	r3, [r3, #12]
 80086ba:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	3304      	adds	r3, #4
 80086c0:	4618      	mov	r0, r3
 80086c2:	f7fe f8e1 	bl	8006888 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	6a1b      	ldr	r3, [r3, #32]
 80086ca:	68f8      	ldr	r0, [r7, #12]
 80086cc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80086d4:	f003 0304 	and.w	r3, r3, #4
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d02f      	beq.n	800873c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	699b      	ldr	r3, [r3, #24]
 80086e0:	693a      	ldr	r2, [r7, #16]
 80086e2:	4413      	add	r3, r2
 80086e4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80086e6:	68ba      	ldr	r2, [r7, #8]
 80086e8:	693b      	ldr	r3, [r7, #16]
 80086ea:	429a      	cmp	r2, r3
 80086ec:	d90e      	bls.n	800870c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	68ba      	ldr	r2, [r7, #8]
 80086f2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	68fa      	ldr	r2, [r7, #12]
 80086f8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80086fa:	4b1a      	ldr	r3, [pc, #104]	@ (8008764 <prvSwitchTimerLists+0xc4>)
 80086fc:	681a      	ldr	r2, [r3, #0]
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	3304      	adds	r3, #4
 8008702:	4619      	mov	r1, r3
 8008704:	4610      	mov	r0, r2
 8008706:	f7fe f886 	bl	8006816 <vListInsert>
 800870a:	e017      	b.n	800873c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800870c:	2300      	movs	r3, #0
 800870e:	9300      	str	r3, [sp, #0]
 8008710:	2300      	movs	r3, #0
 8008712:	693a      	ldr	r2, [r7, #16]
 8008714:	2100      	movs	r1, #0
 8008716:	68f8      	ldr	r0, [r7, #12]
 8008718:	f7ff fd58 	bl	80081cc <xTimerGenericCommand>
 800871c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d10b      	bne.n	800873c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8008724:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008728:	f383 8811 	msr	BASEPRI, r3
 800872c:	f3bf 8f6f 	isb	sy
 8008730:	f3bf 8f4f 	dsb	sy
 8008734:	603b      	str	r3, [r7, #0]
}
 8008736:	bf00      	nop
 8008738:	bf00      	nop
 800873a:	e7fd      	b.n	8008738 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800873c:	4b09      	ldr	r3, [pc, #36]	@ (8008764 <prvSwitchTimerLists+0xc4>)
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d1b0      	bne.n	80086a8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008746:	4b07      	ldr	r3, [pc, #28]	@ (8008764 <prvSwitchTimerLists+0xc4>)
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800874c:	4b06      	ldr	r3, [pc, #24]	@ (8008768 <prvSwitchTimerLists+0xc8>)
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	4a04      	ldr	r2, [pc, #16]	@ (8008764 <prvSwitchTimerLists+0xc4>)
 8008752:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008754:	4a04      	ldr	r2, [pc, #16]	@ (8008768 <prvSwitchTimerLists+0xc8>)
 8008756:	697b      	ldr	r3, [r7, #20]
 8008758:	6013      	str	r3, [r2, #0]
}
 800875a:	bf00      	nop
 800875c:	3718      	adds	r7, #24
 800875e:	46bd      	mov	sp, r7
 8008760:	bd80      	pop	{r7, pc}
 8008762:	bf00      	nop
 8008764:	20009394 	.word	0x20009394
 8008768:	20009398 	.word	0x20009398

0800876c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b082      	sub	sp, #8
 8008770:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008772:	f000 f969 	bl	8008a48 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008776:	4b15      	ldr	r3, [pc, #84]	@ (80087cc <prvCheckForValidListAndQueue+0x60>)
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d120      	bne.n	80087c0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800877e:	4814      	ldr	r0, [pc, #80]	@ (80087d0 <prvCheckForValidListAndQueue+0x64>)
 8008780:	f7fd fff8 	bl	8006774 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008784:	4813      	ldr	r0, [pc, #76]	@ (80087d4 <prvCheckForValidListAndQueue+0x68>)
 8008786:	f7fd fff5 	bl	8006774 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800878a:	4b13      	ldr	r3, [pc, #76]	@ (80087d8 <prvCheckForValidListAndQueue+0x6c>)
 800878c:	4a10      	ldr	r2, [pc, #64]	@ (80087d0 <prvCheckForValidListAndQueue+0x64>)
 800878e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008790:	4b12      	ldr	r3, [pc, #72]	@ (80087dc <prvCheckForValidListAndQueue+0x70>)
 8008792:	4a10      	ldr	r2, [pc, #64]	@ (80087d4 <prvCheckForValidListAndQueue+0x68>)
 8008794:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008796:	2300      	movs	r3, #0
 8008798:	9300      	str	r3, [sp, #0]
 800879a:	4b11      	ldr	r3, [pc, #68]	@ (80087e0 <prvCheckForValidListAndQueue+0x74>)
 800879c:	4a11      	ldr	r2, [pc, #68]	@ (80087e4 <prvCheckForValidListAndQueue+0x78>)
 800879e:	2110      	movs	r1, #16
 80087a0:	200a      	movs	r0, #10
 80087a2:	f7fe f905 	bl	80069b0 <xQueueGenericCreateStatic>
 80087a6:	4603      	mov	r3, r0
 80087a8:	4a08      	ldr	r2, [pc, #32]	@ (80087cc <prvCheckForValidListAndQueue+0x60>)
 80087aa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80087ac:	4b07      	ldr	r3, [pc, #28]	@ (80087cc <prvCheckForValidListAndQueue+0x60>)
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d005      	beq.n	80087c0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80087b4:	4b05      	ldr	r3, [pc, #20]	@ (80087cc <prvCheckForValidListAndQueue+0x60>)
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	490b      	ldr	r1, [pc, #44]	@ (80087e8 <prvCheckForValidListAndQueue+0x7c>)
 80087ba:	4618      	mov	r0, r3
 80087bc:	f7fe fd2a 	bl	8007214 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80087c0:	f000 f974 	bl	8008aac <vPortExitCritical>
}
 80087c4:	bf00      	nop
 80087c6:	46bd      	mov	sp, r7
 80087c8:	bd80      	pop	{r7, pc}
 80087ca:	bf00      	nop
 80087cc:	2000939c 	.word	0x2000939c
 80087d0:	2000936c 	.word	0x2000936c
 80087d4:	20009380 	.word	0x20009380
 80087d8:	20009394 	.word	0x20009394
 80087dc:	20009398 	.word	0x20009398
 80087e0:	20009448 	.word	0x20009448
 80087e4:	200093a8 	.word	0x200093a8
 80087e8:	0801a90c 	.word	0x0801a90c

080087ec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80087ec:	b480      	push	{r7}
 80087ee:	b085      	sub	sp, #20
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	60f8      	str	r0, [r7, #12]
 80087f4:	60b9      	str	r1, [r7, #8]
 80087f6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	3b04      	subs	r3, #4
 80087fc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008804:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	3b04      	subs	r3, #4
 800880a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800880c:	68bb      	ldr	r3, [r7, #8]
 800880e:	f023 0201 	bic.w	r2, r3, #1
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	3b04      	subs	r3, #4
 800881a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800881c:	4a0c      	ldr	r2, [pc, #48]	@ (8008850 <pxPortInitialiseStack+0x64>)
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	3b14      	subs	r3, #20
 8008826:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008828:	687a      	ldr	r2, [r7, #4]
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	3b04      	subs	r3, #4
 8008832:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	f06f 0202 	mvn.w	r2, #2
 800883a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	3b20      	subs	r3, #32
 8008840:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008842:	68fb      	ldr	r3, [r7, #12]
}
 8008844:	4618      	mov	r0, r3
 8008846:	3714      	adds	r7, #20
 8008848:	46bd      	mov	sp, r7
 800884a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884e:	4770      	bx	lr
 8008850:	08008855 	.word	0x08008855

08008854 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008854:	b480      	push	{r7}
 8008856:	b085      	sub	sp, #20
 8008858:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800885a:	2300      	movs	r3, #0
 800885c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800885e:	4b13      	ldr	r3, [pc, #76]	@ (80088ac <prvTaskExitError+0x58>)
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008866:	d00b      	beq.n	8008880 <prvTaskExitError+0x2c>
	__asm volatile
 8008868:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800886c:	f383 8811 	msr	BASEPRI, r3
 8008870:	f3bf 8f6f 	isb	sy
 8008874:	f3bf 8f4f 	dsb	sy
 8008878:	60fb      	str	r3, [r7, #12]
}
 800887a:	bf00      	nop
 800887c:	bf00      	nop
 800887e:	e7fd      	b.n	800887c <prvTaskExitError+0x28>
	__asm volatile
 8008880:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008884:	f383 8811 	msr	BASEPRI, r3
 8008888:	f3bf 8f6f 	isb	sy
 800888c:	f3bf 8f4f 	dsb	sy
 8008890:	60bb      	str	r3, [r7, #8]
}
 8008892:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008894:	bf00      	nop
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d0fc      	beq.n	8008896 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800889c:	bf00      	nop
 800889e:	bf00      	nop
 80088a0:	3714      	adds	r7, #20
 80088a2:	46bd      	mov	sp, r7
 80088a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a8:	4770      	bx	lr
 80088aa:	bf00      	nop
 80088ac:	200000d0 	.word	0x200000d0

080088b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80088b0:	4b07      	ldr	r3, [pc, #28]	@ (80088d0 <pxCurrentTCBConst2>)
 80088b2:	6819      	ldr	r1, [r3, #0]
 80088b4:	6808      	ldr	r0, [r1, #0]
 80088b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088ba:	f380 8809 	msr	PSP, r0
 80088be:	f3bf 8f6f 	isb	sy
 80088c2:	f04f 0000 	mov.w	r0, #0
 80088c6:	f380 8811 	msr	BASEPRI, r0
 80088ca:	4770      	bx	lr
 80088cc:	f3af 8000 	nop.w

080088d0 <pxCurrentTCBConst2>:
 80088d0:	20008e6c 	.word	0x20008e6c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80088d4:	bf00      	nop
 80088d6:	bf00      	nop

080088d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80088d8:	4808      	ldr	r0, [pc, #32]	@ (80088fc <prvPortStartFirstTask+0x24>)
 80088da:	6800      	ldr	r0, [r0, #0]
 80088dc:	6800      	ldr	r0, [r0, #0]
 80088de:	f380 8808 	msr	MSP, r0
 80088e2:	f04f 0000 	mov.w	r0, #0
 80088e6:	f380 8814 	msr	CONTROL, r0
 80088ea:	b662      	cpsie	i
 80088ec:	b661      	cpsie	f
 80088ee:	f3bf 8f4f 	dsb	sy
 80088f2:	f3bf 8f6f 	isb	sy
 80088f6:	df00      	svc	0
 80088f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80088fa:	bf00      	nop
 80088fc:	e000ed08 	.word	0xe000ed08

08008900 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b086      	sub	sp, #24
 8008904:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008906:	4b47      	ldr	r3, [pc, #284]	@ (8008a24 <xPortStartScheduler+0x124>)
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	4a47      	ldr	r2, [pc, #284]	@ (8008a28 <xPortStartScheduler+0x128>)
 800890c:	4293      	cmp	r3, r2
 800890e:	d10b      	bne.n	8008928 <xPortStartScheduler+0x28>
	__asm volatile
 8008910:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008914:	f383 8811 	msr	BASEPRI, r3
 8008918:	f3bf 8f6f 	isb	sy
 800891c:	f3bf 8f4f 	dsb	sy
 8008920:	613b      	str	r3, [r7, #16]
}
 8008922:	bf00      	nop
 8008924:	bf00      	nop
 8008926:	e7fd      	b.n	8008924 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008928:	4b3e      	ldr	r3, [pc, #248]	@ (8008a24 <xPortStartScheduler+0x124>)
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	4a3f      	ldr	r2, [pc, #252]	@ (8008a2c <xPortStartScheduler+0x12c>)
 800892e:	4293      	cmp	r3, r2
 8008930:	d10b      	bne.n	800894a <xPortStartScheduler+0x4a>
	__asm volatile
 8008932:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008936:	f383 8811 	msr	BASEPRI, r3
 800893a:	f3bf 8f6f 	isb	sy
 800893e:	f3bf 8f4f 	dsb	sy
 8008942:	60fb      	str	r3, [r7, #12]
}
 8008944:	bf00      	nop
 8008946:	bf00      	nop
 8008948:	e7fd      	b.n	8008946 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800894a:	4b39      	ldr	r3, [pc, #228]	@ (8008a30 <xPortStartScheduler+0x130>)
 800894c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800894e:	697b      	ldr	r3, [r7, #20]
 8008950:	781b      	ldrb	r3, [r3, #0]
 8008952:	b2db      	uxtb	r3, r3
 8008954:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008956:	697b      	ldr	r3, [r7, #20]
 8008958:	22ff      	movs	r2, #255	@ 0xff
 800895a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800895c:	697b      	ldr	r3, [r7, #20]
 800895e:	781b      	ldrb	r3, [r3, #0]
 8008960:	b2db      	uxtb	r3, r3
 8008962:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008964:	78fb      	ldrb	r3, [r7, #3]
 8008966:	b2db      	uxtb	r3, r3
 8008968:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800896c:	b2da      	uxtb	r2, r3
 800896e:	4b31      	ldr	r3, [pc, #196]	@ (8008a34 <xPortStartScheduler+0x134>)
 8008970:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008972:	4b31      	ldr	r3, [pc, #196]	@ (8008a38 <xPortStartScheduler+0x138>)
 8008974:	2207      	movs	r2, #7
 8008976:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008978:	e009      	b.n	800898e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800897a:	4b2f      	ldr	r3, [pc, #188]	@ (8008a38 <xPortStartScheduler+0x138>)
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	3b01      	subs	r3, #1
 8008980:	4a2d      	ldr	r2, [pc, #180]	@ (8008a38 <xPortStartScheduler+0x138>)
 8008982:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008984:	78fb      	ldrb	r3, [r7, #3]
 8008986:	b2db      	uxtb	r3, r3
 8008988:	005b      	lsls	r3, r3, #1
 800898a:	b2db      	uxtb	r3, r3
 800898c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800898e:	78fb      	ldrb	r3, [r7, #3]
 8008990:	b2db      	uxtb	r3, r3
 8008992:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008996:	2b80      	cmp	r3, #128	@ 0x80
 8008998:	d0ef      	beq.n	800897a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800899a:	4b27      	ldr	r3, [pc, #156]	@ (8008a38 <xPortStartScheduler+0x138>)
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f1c3 0307 	rsb	r3, r3, #7
 80089a2:	2b04      	cmp	r3, #4
 80089a4:	d00b      	beq.n	80089be <xPortStartScheduler+0xbe>
	__asm volatile
 80089a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089aa:	f383 8811 	msr	BASEPRI, r3
 80089ae:	f3bf 8f6f 	isb	sy
 80089b2:	f3bf 8f4f 	dsb	sy
 80089b6:	60bb      	str	r3, [r7, #8]
}
 80089b8:	bf00      	nop
 80089ba:	bf00      	nop
 80089bc:	e7fd      	b.n	80089ba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80089be:	4b1e      	ldr	r3, [pc, #120]	@ (8008a38 <xPortStartScheduler+0x138>)
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	021b      	lsls	r3, r3, #8
 80089c4:	4a1c      	ldr	r2, [pc, #112]	@ (8008a38 <xPortStartScheduler+0x138>)
 80089c6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80089c8:	4b1b      	ldr	r3, [pc, #108]	@ (8008a38 <xPortStartScheduler+0x138>)
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80089d0:	4a19      	ldr	r2, [pc, #100]	@ (8008a38 <xPortStartScheduler+0x138>)
 80089d2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	b2da      	uxtb	r2, r3
 80089d8:	697b      	ldr	r3, [r7, #20]
 80089da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80089dc:	4b17      	ldr	r3, [pc, #92]	@ (8008a3c <xPortStartScheduler+0x13c>)
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	4a16      	ldr	r2, [pc, #88]	@ (8008a3c <xPortStartScheduler+0x13c>)
 80089e2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80089e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80089e8:	4b14      	ldr	r3, [pc, #80]	@ (8008a3c <xPortStartScheduler+0x13c>)
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	4a13      	ldr	r2, [pc, #76]	@ (8008a3c <xPortStartScheduler+0x13c>)
 80089ee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80089f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80089f4:	f000 f8da 	bl	8008bac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80089f8:	4b11      	ldr	r3, [pc, #68]	@ (8008a40 <xPortStartScheduler+0x140>)
 80089fa:	2200      	movs	r2, #0
 80089fc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80089fe:	f000 f8f9 	bl	8008bf4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008a02:	4b10      	ldr	r3, [pc, #64]	@ (8008a44 <xPortStartScheduler+0x144>)
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	4a0f      	ldr	r2, [pc, #60]	@ (8008a44 <xPortStartScheduler+0x144>)
 8008a08:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8008a0c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008a0e:	f7ff ff63 	bl	80088d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008a12:	f7ff f817 	bl	8007a44 <vTaskSwitchContext>
	prvTaskExitError();
 8008a16:	f7ff ff1d 	bl	8008854 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008a1a:	2300      	movs	r3, #0
}
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	3718      	adds	r7, #24
 8008a20:	46bd      	mov	sp, r7
 8008a22:	bd80      	pop	{r7, pc}
 8008a24:	e000ed00 	.word	0xe000ed00
 8008a28:	410fc271 	.word	0x410fc271
 8008a2c:	410fc270 	.word	0x410fc270
 8008a30:	e000e400 	.word	0xe000e400
 8008a34:	20009498 	.word	0x20009498
 8008a38:	2000949c 	.word	0x2000949c
 8008a3c:	e000ed20 	.word	0xe000ed20
 8008a40:	200000d0 	.word	0x200000d0
 8008a44:	e000ef34 	.word	0xe000ef34

08008a48 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008a48:	b480      	push	{r7}
 8008a4a:	b083      	sub	sp, #12
 8008a4c:	af00      	add	r7, sp, #0
	__asm volatile
 8008a4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a52:	f383 8811 	msr	BASEPRI, r3
 8008a56:	f3bf 8f6f 	isb	sy
 8008a5a:	f3bf 8f4f 	dsb	sy
 8008a5e:	607b      	str	r3, [r7, #4]
}
 8008a60:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008a62:	4b10      	ldr	r3, [pc, #64]	@ (8008aa4 <vPortEnterCritical+0x5c>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	3301      	adds	r3, #1
 8008a68:	4a0e      	ldr	r2, [pc, #56]	@ (8008aa4 <vPortEnterCritical+0x5c>)
 8008a6a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008a6c:	4b0d      	ldr	r3, [pc, #52]	@ (8008aa4 <vPortEnterCritical+0x5c>)
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	2b01      	cmp	r3, #1
 8008a72:	d110      	bne.n	8008a96 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008a74:	4b0c      	ldr	r3, [pc, #48]	@ (8008aa8 <vPortEnterCritical+0x60>)
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	b2db      	uxtb	r3, r3
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d00b      	beq.n	8008a96 <vPortEnterCritical+0x4e>
	__asm volatile
 8008a7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a82:	f383 8811 	msr	BASEPRI, r3
 8008a86:	f3bf 8f6f 	isb	sy
 8008a8a:	f3bf 8f4f 	dsb	sy
 8008a8e:	603b      	str	r3, [r7, #0]
}
 8008a90:	bf00      	nop
 8008a92:	bf00      	nop
 8008a94:	e7fd      	b.n	8008a92 <vPortEnterCritical+0x4a>
	}
}
 8008a96:	bf00      	nop
 8008a98:	370c      	adds	r7, #12
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa0:	4770      	bx	lr
 8008aa2:	bf00      	nop
 8008aa4:	200000d0 	.word	0x200000d0
 8008aa8:	e000ed04 	.word	0xe000ed04

08008aac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008aac:	b480      	push	{r7}
 8008aae:	b083      	sub	sp, #12
 8008ab0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008ab2:	4b12      	ldr	r3, [pc, #72]	@ (8008afc <vPortExitCritical+0x50>)
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d10b      	bne.n	8008ad2 <vPortExitCritical+0x26>
	__asm volatile
 8008aba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008abe:	f383 8811 	msr	BASEPRI, r3
 8008ac2:	f3bf 8f6f 	isb	sy
 8008ac6:	f3bf 8f4f 	dsb	sy
 8008aca:	607b      	str	r3, [r7, #4]
}
 8008acc:	bf00      	nop
 8008ace:	bf00      	nop
 8008ad0:	e7fd      	b.n	8008ace <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008ad2:	4b0a      	ldr	r3, [pc, #40]	@ (8008afc <vPortExitCritical+0x50>)
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	3b01      	subs	r3, #1
 8008ad8:	4a08      	ldr	r2, [pc, #32]	@ (8008afc <vPortExitCritical+0x50>)
 8008ada:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008adc:	4b07      	ldr	r3, [pc, #28]	@ (8008afc <vPortExitCritical+0x50>)
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d105      	bne.n	8008af0 <vPortExitCritical+0x44>
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	f383 8811 	msr	BASEPRI, r3
}
 8008aee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008af0:	bf00      	nop
 8008af2:	370c      	adds	r7, #12
 8008af4:	46bd      	mov	sp, r7
 8008af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afa:	4770      	bx	lr
 8008afc:	200000d0 	.word	0x200000d0

08008b00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008b00:	f3ef 8009 	mrs	r0, PSP
 8008b04:	f3bf 8f6f 	isb	sy
 8008b08:	4b15      	ldr	r3, [pc, #84]	@ (8008b60 <pxCurrentTCBConst>)
 8008b0a:	681a      	ldr	r2, [r3, #0]
 8008b0c:	f01e 0f10 	tst.w	lr, #16
 8008b10:	bf08      	it	eq
 8008b12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008b16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b1a:	6010      	str	r0, [r2, #0]
 8008b1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008b20:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008b24:	f380 8811 	msr	BASEPRI, r0
 8008b28:	f3bf 8f4f 	dsb	sy
 8008b2c:	f3bf 8f6f 	isb	sy
 8008b30:	f7fe ff88 	bl	8007a44 <vTaskSwitchContext>
 8008b34:	f04f 0000 	mov.w	r0, #0
 8008b38:	f380 8811 	msr	BASEPRI, r0
 8008b3c:	bc09      	pop	{r0, r3}
 8008b3e:	6819      	ldr	r1, [r3, #0]
 8008b40:	6808      	ldr	r0, [r1, #0]
 8008b42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b46:	f01e 0f10 	tst.w	lr, #16
 8008b4a:	bf08      	it	eq
 8008b4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008b50:	f380 8809 	msr	PSP, r0
 8008b54:	f3bf 8f6f 	isb	sy
 8008b58:	4770      	bx	lr
 8008b5a:	bf00      	nop
 8008b5c:	f3af 8000 	nop.w

08008b60 <pxCurrentTCBConst>:
 8008b60:	20008e6c 	.word	0x20008e6c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008b64:	bf00      	nop
 8008b66:	bf00      	nop

08008b68 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b082      	sub	sp, #8
 8008b6c:	af00      	add	r7, sp, #0
	__asm volatile
 8008b6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b72:	f383 8811 	msr	BASEPRI, r3
 8008b76:	f3bf 8f6f 	isb	sy
 8008b7a:	f3bf 8f4f 	dsb	sy
 8008b7e:	607b      	str	r3, [r7, #4]
}
 8008b80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008b82:	f7fe fea5 	bl	80078d0 <xTaskIncrementTick>
 8008b86:	4603      	mov	r3, r0
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d003      	beq.n	8008b94 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008b8c:	4b06      	ldr	r3, [pc, #24]	@ (8008ba8 <xPortSysTickHandler+0x40>)
 8008b8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b92:	601a      	str	r2, [r3, #0]
 8008b94:	2300      	movs	r3, #0
 8008b96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	f383 8811 	msr	BASEPRI, r3
}
 8008b9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008ba0:	bf00      	nop
 8008ba2:	3708      	adds	r7, #8
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	bd80      	pop	{r7, pc}
 8008ba8:	e000ed04 	.word	0xe000ed04

08008bac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008bac:	b480      	push	{r7}
 8008bae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008bb0:	4b0b      	ldr	r3, [pc, #44]	@ (8008be0 <vPortSetupTimerInterrupt+0x34>)
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008bb6:	4b0b      	ldr	r3, [pc, #44]	@ (8008be4 <vPortSetupTimerInterrupt+0x38>)
 8008bb8:	2200      	movs	r2, #0
 8008bba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008bbc:	4b0a      	ldr	r3, [pc, #40]	@ (8008be8 <vPortSetupTimerInterrupt+0x3c>)
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	4a0a      	ldr	r2, [pc, #40]	@ (8008bec <vPortSetupTimerInterrupt+0x40>)
 8008bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8008bc6:	099b      	lsrs	r3, r3, #6
 8008bc8:	4a09      	ldr	r2, [pc, #36]	@ (8008bf0 <vPortSetupTimerInterrupt+0x44>)
 8008bca:	3b01      	subs	r3, #1
 8008bcc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008bce:	4b04      	ldr	r3, [pc, #16]	@ (8008be0 <vPortSetupTimerInterrupt+0x34>)
 8008bd0:	2207      	movs	r2, #7
 8008bd2:	601a      	str	r2, [r3, #0]
}
 8008bd4:	bf00      	nop
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bdc:	4770      	bx	lr
 8008bde:	bf00      	nop
 8008be0:	e000e010 	.word	0xe000e010
 8008be4:	e000e018 	.word	0xe000e018
 8008be8:	20000004 	.word	0x20000004
 8008bec:	10624dd3 	.word	0x10624dd3
 8008bf0:	e000e014 	.word	0xe000e014

08008bf4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008bf4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008c04 <vPortEnableVFP+0x10>
 8008bf8:	6801      	ldr	r1, [r0, #0]
 8008bfa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008bfe:	6001      	str	r1, [r0, #0]
 8008c00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008c02:	bf00      	nop
 8008c04:	e000ed88 	.word	0xe000ed88

08008c08 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008c08:	b480      	push	{r7}
 8008c0a:	b085      	sub	sp, #20
 8008c0c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008c0e:	f3ef 8305 	mrs	r3, IPSR
 8008c12:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	2b0f      	cmp	r3, #15
 8008c18:	d915      	bls.n	8008c46 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008c1a:	4a18      	ldr	r2, [pc, #96]	@ (8008c7c <vPortValidateInterruptPriority+0x74>)
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	4413      	add	r3, r2
 8008c20:	781b      	ldrb	r3, [r3, #0]
 8008c22:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008c24:	4b16      	ldr	r3, [pc, #88]	@ (8008c80 <vPortValidateInterruptPriority+0x78>)
 8008c26:	781b      	ldrb	r3, [r3, #0]
 8008c28:	7afa      	ldrb	r2, [r7, #11]
 8008c2a:	429a      	cmp	r2, r3
 8008c2c:	d20b      	bcs.n	8008c46 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8008c2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c32:	f383 8811 	msr	BASEPRI, r3
 8008c36:	f3bf 8f6f 	isb	sy
 8008c3a:	f3bf 8f4f 	dsb	sy
 8008c3e:	607b      	str	r3, [r7, #4]
}
 8008c40:	bf00      	nop
 8008c42:	bf00      	nop
 8008c44:	e7fd      	b.n	8008c42 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008c46:	4b0f      	ldr	r3, [pc, #60]	@ (8008c84 <vPortValidateInterruptPriority+0x7c>)
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008c4e:	4b0e      	ldr	r3, [pc, #56]	@ (8008c88 <vPortValidateInterruptPriority+0x80>)
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	429a      	cmp	r2, r3
 8008c54:	d90b      	bls.n	8008c6e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008c56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c5a:	f383 8811 	msr	BASEPRI, r3
 8008c5e:	f3bf 8f6f 	isb	sy
 8008c62:	f3bf 8f4f 	dsb	sy
 8008c66:	603b      	str	r3, [r7, #0]
}
 8008c68:	bf00      	nop
 8008c6a:	bf00      	nop
 8008c6c:	e7fd      	b.n	8008c6a <vPortValidateInterruptPriority+0x62>
	}
 8008c6e:	bf00      	nop
 8008c70:	3714      	adds	r7, #20
 8008c72:	46bd      	mov	sp, r7
 8008c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c78:	4770      	bx	lr
 8008c7a:	bf00      	nop
 8008c7c:	e000e3f0 	.word	0xe000e3f0
 8008c80:	20009498 	.word	0x20009498
 8008c84:	e000ed0c 	.word	0xe000ed0c
 8008c88:	2000949c 	.word	0x2000949c

08008c8c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b08a      	sub	sp, #40	@ 0x28
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008c94:	2300      	movs	r3, #0
 8008c96:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008c98:	f7fe fd5e 	bl	8007758 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008c9c:	4b5c      	ldr	r3, [pc, #368]	@ (8008e10 <pvPortMalloc+0x184>)
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d101      	bne.n	8008ca8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008ca4:	f000 f930 	bl	8008f08 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008ca8:	4b5a      	ldr	r3, [pc, #360]	@ (8008e14 <pvPortMalloc+0x188>)
 8008caa:	681a      	ldr	r2, [r3, #0]
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	4013      	ands	r3, r2
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	f040 8095 	bne.w	8008de0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d01e      	beq.n	8008cfa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008cbc:	2208      	movs	r2, #8
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	4413      	add	r3, r2
 8008cc2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	f003 0307 	and.w	r3, r3, #7
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d015      	beq.n	8008cfa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	f023 0307 	bic.w	r3, r3, #7
 8008cd4:	3308      	adds	r3, #8
 8008cd6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	f003 0307 	and.w	r3, r3, #7
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d00b      	beq.n	8008cfa <pvPortMalloc+0x6e>
	__asm volatile
 8008ce2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ce6:	f383 8811 	msr	BASEPRI, r3
 8008cea:	f3bf 8f6f 	isb	sy
 8008cee:	f3bf 8f4f 	dsb	sy
 8008cf2:	617b      	str	r3, [r7, #20]
}
 8008cf4:	bf00      	nop
 8008cf6:	bf00      	nop
 8008cf8:	e7fd      	b.n	8008cf6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d06f      	beq.n	8008de0 <pvPortMalloc+0x154>
 8008d00:	4b45      	ldr	r3, [pc, #276]	@ (8008e18 <pvPortMalloc+0x18c>)
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	687a      	ldr	r2, [r7, #4]
 8008d06:	429a      	cmp	r2, r3
 8008d08:	d86a      	bhi.n	8008de0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008d0a:	4b44      	ldr	r3, [pc, #272]	@ (8008e1c <pvPortMalloc+0x190>)
 8008d0c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008d0e:	4b43      	ldr	r3, [pc, #268]	@ (8008e1c <pvPortMalloc+0x190>)
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008d14:	e004      	b.n	8008d20 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d18:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d22:	685b      	ldr	r3, [r3, #4]
 8008d24:	687a      	ldr	r2, [r7, #4]
 8008d26:	429a      	cmp	r2, r3
 8008d28:	d903      	bls.n	8008d32 <pvPortMalloc+0xa6>
 8008d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d1f1      	bne.n	8008d16 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008d32:	4b37      	ldr	r3, [pc, #220]	@ (8008e10 <pvPortMalloc+0x184>)
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008d38:	429a      	cmp	r2, r3
 8008d3a:	d051      	beq.n	8008de0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008d3c:	6a3b      	ldr	r3, [r7, #32]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	2208      	movs	r2, #8
 8008d42:	4413      	add	r3, r2
 8008d44:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d48:	681a      	ldr	r2, [r3, #0]
 8008d4a:	6a3b      	ldr	r3, [r7, #32]
 8008d4c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d50:	685a      	ldr	r2, [r3, #4]
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	1ad2      	subs	r2, r2, r3
 8008d56:	2308      	movs	r3, #8
 8008d58:	005b      	lsls	r3, r3, #1
 8008d5a:	429a      	cmp	r2, r3
 8008d5c:	d920      	bls.n	8008da0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008d5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	4413      	add	r3, r2
 8008d64:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008d66:	69bb      	ldr	r3, [r7, #24]
 8008d68:	f003 0307 	and.w	r3, r3, #7
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d00b      	beq.n	8008d88 <pvPortMalloc+0xfc>
	__asm volatile
 8008d70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d74:	f383 8811 	msr	BASEPRI, r3
 8008d78:	f3bf 8f6f 	isb	sy
 8008d7c:	f3bf 8f4f 	dsb	sy
 8008d80:	613b      	str	r3, [r7, #16]
}
 8008d82:	bf00      	nop
 8008d84:	bf00      	nop
 8008d86:	e7fd      	b.n	8008d84 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d8a:	685a      	ldr	r2, [r3, #4]
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	1ad2      	subs	r2, r2, r3
 8008d90:	69bb      	ldr	r3, [r7, #24]
 8008d92:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d96:	687a      	ldr	r2, [r7, #4]
 8008d98:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008d9a:	69b8      	ldr	r0, [r7, #24]
 8008d9c:	f000 f916 	bl	8008fcc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008da0:	4b1d      	ldr	r3, [pc, #116]	@ (8008e18 <pvPortMalloc+0x18c>)
 8008da2:	681a      	ldr	r2, [r3, #0]
 8008da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008da6:	685b      	ldr	r3, [r3, #4]
 8008da8:	1ad3      	subs	r3, r2, r3
 8008daa:	4a1b      	ldr	r2, [pc, #108]	@ (8008e18 <pvPortMalloc+0x18c>)
 8008dac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008dae:	4b1a      	ldr	r3, [pc, #104]	@ (8008e18 <pvPortMalloc+0x18c>)
 8008db0:	681a      	ldr	r2, [r3, #0]
 8008db2:	4b1b      	ldr	r3, [pc, #108]	@ (8008e20 <pvPortMalloc+0x194>)
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	429a      	cmp	r2, r3
 8008db8:	d203      	bcs.n	8008dc2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008dba:	4b17      	ldr	r3, [pc, #92]	@ (8008e18 <pvPortMalloc+0x18c>)
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	4a18      	ldr	r2, [pc, #96]	@ (8008e20 <pvPortMalloc+0x194>)
 8008dc0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dc4:	685a      	ldr	r2, [r3, #4]
 8008dc6:	4b13      	ldr	r3, [pc, #76]	@ (8008e14 <pvPortMalloc+0x188>)
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	431a      	orrs	r2, r3
 8008dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008dd6:	4b13      	ldr	r3, [pc, #76]	@ (8008e24 <pvPortMalloc+0x198>)
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	3301      	adds	r3, #1
 8008ddc:	4a11      	ldr	r2, [pc, #68]	@ (8008e24 <pvPortMalloc+0x198>)
 8008dde:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008de0:	f7fe fcc8 	bl	8007774 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008de4:	69fb      	ldr	r3, [r7, #28]
 8008de6:	f003 0307 	and.w	r3, r3, #7
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d00b      	beq.n	8008e06 <pvPortMalloc+0x17a>
	__asm volatile
 8008dee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008df2:	f383 8811 	msr	BASEPRI, r3
 8008df6:	f3bf 8f6f 	isb	sy
 8008dfa:	f3bf 8f4f 	dsb	sy
 8008dfe:	60fb      	str	r3, [r7, #12]
}
 8008e00:	bf00      	nop
 8008e02:	bf00      	nop
 8008e04:	e7fd      	b.n	8008e02 <pvPortMalloc+0x176>
	return pvReturn;
 8008e06:	69fb      	ldr	r3, [r7, #28]
}
 8008e08:	4618      	mov	r0, r3
 8008e0a:	3728      	adds	r7, #40	@ 0x28
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	bd80      	pop	{r7, pc}
 8008e10:	200109d8 	.word	0x200109d8
 8008e14:	200109ec 	.word	0x200109ec
 8008e18:	200109dc 	.word	0x200109dc
 8008e1c:	200109d0 	.word	0x200109d0
 8008e20:	200109e0 	.word	0x200109e0
 8008e24:	200109e4 	.word	0x200109e4

08008e28 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b086      	sub	sp, #24
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d04f      	beq.n	8008eda <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008e3a:	2308      	movs	r3, #8
 8008e3c:	425b      	negs	r3, r3
 8008e3e:	697a      	ldr	r2, [r7, #20]
 8008e40:	4413      	add	r3, r2
 8008e42:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008e44:	697b      	ldr	r3, [r7, #20]
 8008e46:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008e48:	693b      	ldr	r3, [r7, #16]
 8008e4a:	685a      	ldr	r2, [r3, #4]
 8008e4c:	4b25      	ldr	r3, [pc, #148]	@ (8008ee4 <vPortFree+0xbc>)
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	4013      	ands	r3, r2
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d10b      	bne.n	8008e6e <vPortFree+0x46>
	__asm volatile
 8008e56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e5a:	f383 8811 	msr	BASEPRI, r3
 8008e5e:	f3bf 8f6f 	isb	sy
 8008e62:	f3bf 8f4f 	dsb	sy
 8008e66:	60fb      	str	r3, [r7, #12]
}
 8008e68:	bf00      	nop
 8008e6a:	bf00      	nop
 8008e6c:	e7fd      	b.n	8008e6a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008e6e:	693b      	ldr	r3, [r7, #16]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d00b      	beq.n	8008e8e <vPortFree+0x66>
	__asm volatile
 8008e76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e7a:	f383 8811 	msr	BASEPRI, r3
 8008e7e:	f3bf 8f6f 	isb	sy
 8008e82:	f3bf 8f4f 	dsb	sy
 8008e86:	60bb      	str	r3, [r7, #8]
}
 8008e88:	bf00      	nop
 8008e8a:	bf00      	nop
 8008e8c:	e7fd      	b.n	8008e8a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008e8e:	693b      	ldr	r3, [r7, #16]
 8008e90:	685a      	ldr	r2, [r3, #4]
 8008e92:	4b14      	ldr	r3, [pc, #80]	@ (8008ee4 <vPortFree+0xbc>)
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	4013      	ands	r3, r2
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d01e      	beq.n	8008eda <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008e9c:	693b      	ldr	r3, [r7, #16]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d11a      	bne.n	8008eda <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008ea4:	693b      	ldr	r3, [r7, #16]
 8008ea6:	685a      	ldr	r2, [r3, #4]
 8008ea8:	4b0e      	ldr	r3, [pc, #56]	@ (8008ee4 <vPortFree+0xbc>)
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	43db      	mvns	r3, r3
 8008eae:	401a      	ands	r2, r3
 8008eb0:	693b      	ldr	r3, [r7, #16]
 8008eb2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008eb4:	f7fe fc50 	bl	8007758 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008eb8:	693b      	ldr	r3, [r7, #16]
 8008eba:	685a      	ldr	r2, [r3, #4]
 8008ebc:	4b0a      	ldr	r3, [pc, #40]	@ (8008ee8 <vPortFree+0xc0>)
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	4413      	add	r3, r2
 8008ec2:	4a09      	ldr	r2, [pc, #36]	@ (8008ee8 <vPortFree+0xc0>)
 8008ec4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008ec6:	6938      	ldr	r0, [r7, #16]
 8008ec8:	f000 f880 	bl	8008fcc <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008ecc:	4b07      	ldr	r3, [pc, #28]	@ (8008eec <vPortFree+0xc4>)
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	3301      	adds	r3, #1
 8008ed2:	4a06      	ldr	r2, [pc, #24]	@ (8008eec <vPortFree+0xc4>)
 8008ed4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008ed6:	f7fe fc4d 	bl	8007774 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008eda:	bf00      	nop
 8008edc:	3718      	adds	r7, #24
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	bd80      	pop	{r7, pc}
 8008ee2:	bf00      	nop
 8008ee4:	200109ec 	.word	0x200109ec
 8008ee8:	200109dc 	.word	0x200109dc
 8008eec:	200109e8 	.word	0x200109e8

08008ef0 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 8008ef0:	b480      	push	{r7}
 8008ef2:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 8008ef4:	4b03      	ldr	r3, [pc, #12]	@ (8008f04 <xPortGetFreeHeapSize+0x14>)
 8008ef6:	681b      	ldr	r3, [r3, #0]
}
 8008ef8:	4618      	mov	r0, r3
 8008efa:	46bd      	mov	sp, r7
 8008efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f00:	4770      	bx	lr
 8008f02:	bf00      	nop
 8008f04:	200109dc 	.word	0x200109dc

08008f08 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008f08:	b480      	push	{r7}
 8008f0a:	b085      	sub	sp, #20
 8008f0c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008f0e:	f247 5330 	movw	r3, #30000	@ 0x7530
 8008f12:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008f14:	4b27      	ldr	r3, [pc, #156]	@ (8008fb4 <prvHeapInit+0xac>)
 8008f16:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	f003 0307 	and.w	r3, r3, #7
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d00c      	beq.n	8008f3c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	3307      	adds	r3, #7
 8008f26:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	f023 0307 	bic.w	r3, r3, #7
 8008f2e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008f30:	68ba      	ldr	r2, [r7, #8]
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	1ad3      	subs	r3, r2, r3
 8008f36:	4a1f      	ldr	r2, [pc, #124]	@ (8008fb4 <prvHeapInit+0xac>)
 8008f38:	4413      	add	r3, r2
 8008f3a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008f40:	4a1d      	ldr	r2, [pc, #116]	@ (8008fb8 <prvHeapInit+0xb0>)
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008f46:	4b1c      	ldr	r3, [pc, #112]	@ (8008fb8 <prvHeapInit+0xb0>)
 8008f48:	2200      	movs	r2, #0
 8008f4a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	68ba      	ldr	r2, [r7, #8]
 8008f50:	4413      	add	r3, r2
 8008f52:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008f54:	2208      	movs	r2, #8
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	1a9b      	subs	r3, r3, r2
 8008f5a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	f023 0307 	bic.w	r3, r3, #7
 8008f62:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	4a15      	ldr	r2, [pc, #84]	@ (8008fbc <prvHeapInit+0xb4>)
 8008f68:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008f6a:	4b14      	ldr	r3, [pc, #80]	@ (8008fbc <prvHeapInit+0xb4>)
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	2200      	movs	r2, #0
 8008f70:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008f72:	4b12      	ldr	r3, [pc, #72]	@ (8008fbc <prvHeapInit+0xb4>)
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	2200      	movs	r2, #0
 8008f78:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008f7e:	683b      	ldr	r3, [r7, #0]
 8008f80:	68fa      	ldr	r2, [r7, #12]
 8008f82:	1ad2      	subs	r2, r2, r3
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008f88:	4b0c      	ldr	r3, [pc, #48]	@ (8008fbc <prvHeapInit+0xb4>)
 8008f8a:	681a      	ldr	r2, [r3, #0]
 8008f8c:	683b      	ldr	r3, [r7, #0]
 8008f8e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008f90:	683b      	ldr	r3, [r7, #0]
 8008f92:	685b      	ldr	r3, [r3, #4]
 8008f94:	4a0a      	ldr	r2, [pc, #40]	@ (8008fc0 <prvHeapInit+0xb8>)
 8008f96:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	685b      	ldr	r3, [r3, #4]
 8008f9c:	4a09      	ldr	r2, [pc, #36]	@ (8008fc4 <prvHeapInit+0xbc>)
 8008f9e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008fa0:	4b09      	ldr	r3, [pc, #36]	@ (8008fc8 <prvHeapInit+0xc0>)
 8008fa2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008fa6:	601a      	str	r2, [r3, #0]
}
 8008fa8:	bf00      	nop
 8008faa:	3714      	adds	r7, #20
 8008fac:	46bd      	mov	sp, r7
 8008fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb2:	4770      	bx	lr
 8008fb4:	200094a0 	.word	0x200094a0
 8008fb8:	200109d0 	.word	0x200109d0
 8008fbc:	200109d8 	.word	0x200109d8
 8008fc0:	200109e0 	.word	0x200109e0
 8008fc4:	200109dc 	.word	0x200109dc
 8008fc8:	200109ec 	.word	0x200109ec

08008fcc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008fcc:	b480      	push	{r7}
 8008fce:	b085      	sub	sp, #20
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008fd4:	4b28      	ldr	r3, [pc, #160]	@ (8009078 <prvInsertBlockIntoFreeList+0xac>)
 8008fd6:	60fb      	str	r3, [r7, #12]
 8008fd8:	e002      	b.n	8008fe0 <prvInsertBlockIntoFreeList+0x14>
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	60fb      	str	r3, [r7, #12]
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	687a      	ldr	r2, [r7, #4]
 8008fe6:	429a      	cmp	r2, r3
 8008fe8:	d8f7      	bhi.n	8008fda <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	685b      	ldr	r3, [r3, #4]
 8008ff2:	68ba      	ldr	r2, [r7, #8]
 8008ff4:	4413      	add	r3, r2
 8008ff6:	687a      	ldr	r2, [r7, #4]
 8008ff8:	429a      	cmp	r2, r3
 8008ffa:	d108      	bne.n	800900e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	685a      	ldr	r2, [r3, #4]
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	685b      	ldr	r3, [r3, #4]
 8009004:	441a      	add	r2, r3
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	685b      	ldr	r3, [r3, #4]
 8009016:	68ba      	ldr	r2, [r7, #8]
 8009018:	441a      	add	r2, r3
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	429a      	cmp	r2, r3
 8009020:	d118      	bne.n	8009054 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	681a      	ldr	r2, [r3, #0]
 8009026:	4b15      	ldr	r3, [pc, #84]	@ (800907c <prvInsertBlockIntoFreeList+0xb0>)
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	429a      	cmp	r2, r3
 800902c:	d00d      	beq.n	800904a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	685a      	ldr	r2, [r3, #4]
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	685b      	ldr	r3, [r3, #4]
 8009038:	441a      	add	r2, r3
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	681a      	ldr	r2, [r3, #0]
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	601a      	str	r2, [r3, #0]
 8009048:	e008      	b.n	800905c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800904a:	4b0c      	ldr	r3, [pc, #48]	@ (800907c <prvInsertBlockIntoFreeList+0xb0>)
 800904c:	681a      	ldr	r2, [r3, #0]
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	601a      	str	r2, [r3, #0]
 8009052:	e003      	b.n	800905c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	681a      	ldr	r2, [r3, #0]
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800905c:	68fa      	ldr	r2, [r7, #12]
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	429a      	cmp	r2, r3
 8009062:	d002      	beq.n	800906a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	687a      	ldr	r2, [r7, #4]
 8009068:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800906a:	bf00      	nop
 800906c:	3714      	adds	r7, #20
 800906e:	46bd      	mov	sp, r7
 8009070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009074:	4770      	bx	lr
 8009076:	bf00      	nop
 8009078:	200109d0 	.word	0x200109d0
 800907c:	200109d8 	.word	0x200109d8

08009080 <arm_mat_mult_f32>:
 8009080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009084:	460c      	mov	r4, r1
 8009086:	b08b      	sub	sp, #44	@ 0x2c
 8009088:	8825      	ldrh	r5, [r4, #0]
 800908a:	9107      	str	r1, [sp, #28]
 800908c:	8841      	ldrh	r1, [r0, #2]
 800908e:	8806      	ldrh	r6, [r0, #0]
 8009090:	6843      	ldr	r3, [r0, #4]
 8009092:	6857      	ldr	r7, [r2, #4]
 8009094:	6860      	ldr	r0, [r4, #4]
 8009096:	9602      	str	r6, [sp, #8]
 8009098:	428d      	cmp	r5, r1
 800909a:	8864      	ldrh	r4, [r4, #2]
 800909c:	f040 80f9 	bne.w	8009292 <arm_mat_mult_f32+0x212>
 80090a0:	8811      	ldrh	r1, [r2, #0]
 80090a2:	42b1      	cmp	r1, r6
 80090a4:	f040 80f5 	bne.w	8009292 <arm_mat_mult_f32+0x212>
 80090a8:	8851      	ldrh	r1, [r2, #2]
 80090aa:	42a1      	cmp	r1, r4
 80090ac:	f040 80f1 	bne.w	8009292 <arm_mat_mult_f32+0x212>
 80090b0:	00aa      	lsls	r2, r5, #2
 80090b2:	2901      	cmp	r1, #1
 80090b4:	ea4f 0c95 	mov.w	ip, r5, lsr #2
 80090b8:	ea4f 0481 	mov.w	r4, r1, lsl #2
 80090bc:	f005 0e03 	and.w	lr, r5, #3
 80090c0:	9206      	str	r2, [sp, #24]
 80090c2:	d170      	bne.n	80091a6 <arm_mat_mult_f32+0x126>
 80090c4:	1d01      	adds	r1, r0, #4
 80090c6:	9105      	str	r1, [sp, #20]
 80090c8:	ea4f 110c 	mov.w	r1, ip, lsl #4
 80090cc:	4602      	mov	r2, r0
 80090ce:	f107 0904 	add.w	r9, r7, #4
 80090d2:	9101      	str	r1, [sp, #4]
 80090d4:	eb03 1b0c 	add.w	fp, r3, ip, lsl #4
 80090d8:	f103 0a10 	add.w	sl, r3, #16
 80090dc:	f1aa 0310 	sub.w	r3, sl, #16
 80090e0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80090e4:	9303      	str	r3, [sp, #12]
 80090e6:	f1a9 0704 	sub.w	r7, r9, #4
 80090ea:	eddf 7a6c 	vldr	s15, [pc, #432]	@ 800929c <arm_mat_mult_f32+0x21c>
 80090ee:	f1bc 0f00 	cmp.w	ip, #0
 80090f2:	d052      	beq.n	800919a <arm_mat_mult_f32+0x11a>
 80090f4:	f102 0008 	add.w	r0, r2, #8
 80090f8:	4653      	mov	r3, sl
 80090fa:	4665      	mov	r5, ip
 80090fc:	4611      	mov	r1, r2
 80090fe:	ed13 6a04 	vldr	s12, [r3, #-16]
 8009102:	ed91 7a00 	vldr	s14, [r1]
 8009106:	ed53 4a03 	vldr	s9, [r3, #-12]
 800910a:	edd0 6a00 	vldr	s13, [r0]
 800910e:	ed13 5a02 	vldr	s10, [r3, #-8]
 8009112:	ed53 5a01 	vldr	s11, [r3, #-4]
 8009116:	190e      	adds	r6, r1, r4
 8009118:	ee27 7a06 	vmul.f32	s14, s14, s12
 800911c:	ed96 6a00 	vldr	s12, [r6]
 8009120:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009124:	ee26 6a24 	vmul.f32	s12, s12, s9
 8009128:	1906      	adds	r6, r0, r4
 800912a:	ee36 6a27 	vadd.f32	s12, s12, s15
 800912e:	ee26 7a85 	vmul.f32	s14, s13, s10
 8009132:	edd6 7a00 	vldr	s15, [r6]
 8009136:	ee37 7a06 	vadd.f32	s14, s14, s12
 800913a:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800913e:	3d01      	subs	r5, #1
 8009140:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009144:	f101 0110 	add.w	r1, r1, #16
 8009148:	f100 0010 	add.w	r0, r0, #16
 800914c:	f103 0310 	add.w	r3, r3, #16
 8009150:	d1d5      	bne.n	80090fe <arm_mat_mult_f32+0x7e>
 8009152:	9b01      	ldr	r3, [sp, #4]
 8009154:	4659      	mov	r1, fp
 8009156:	441a      	add	r2, r3
 8009158:	f1be 0f00 	cmp.w	lr, #0
 800915c:	d00b      	beq.n	8009176 <arm_mat_mult_f32+0xf6>
 800915e:	4673      	mov	r3, lr
 8009160:	ed92 7a00 	vldr	s14, [r2]
 8009164:	ecf1 6a01 	vldmia	r1!, {s13}
 8009168:	ee27 7a26 	vmul.f32	s14, s14, s13
 800916c:	3b01      	subs	r3, #1
 800916e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009172:	4422      	add	r2, r4
 8009174:	d1f4      	bne.n	8009160 <arm_mat_mult_f32+0xe0>
 8009176:	ece7 7a01 	vstmia	r7!, {s15}
 800917a:	454f      	cmp	r7, r9
 800917c:	4642      	mov	r2, r8
 800917e:	f108 0804 	add.w	r8, r8, #4
 8009182:	d1b2      	bne.n	80090ea <arm_mat_mult_f32+0x6a>
 8009184:	9b06      	ldr	r3, [sp, #24]
 8009186:	449b      	add	fp, r3
 8009188:	449a      	add	sl, r3
 800918a:	9b02      	ldr	r3, [sp, #8]
 800918c:	3b01      	subs	r3, #1
 800918e:	44a1      	add	r9, r4
 8009190:	9302      	str	r3, [sp, #8]
 8009192:	d004      	beq.n	800919e <arm_mat_mult_f32+0x11e>
 8009194:	9b07      	ldr	r3, [sp, #28]
 8009196:	685a      	ldr	r2, [r3, #4]
 8009198:	e7a0      	b.n	80090dc <arm_mat_mult_f32+0x5c>
 800919a:	9903      	ldr	r1, [sp, #12]
 800919c:	e7dc      	b.n	8009158 <arm_mat_mult_f32+0xd8>
 800919e:	4618      	mov	r0, r3
 80091a0:	b00b      	add	sp, #44	@ 0x2c
 80091a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091a6:	ebc1 7281 	rsb	r2, r1, r1, lsl #30
 80091aa:	0092      	lsls	r2, r2, #2
 80091ac:	010e      	lsls	r6, r1, #4
 80091ae:	9209      	str	r2, [sp, #36]	@ 0x24
 80091b0:	00ca      	lsls	r2, r1, #3
 80091b2:	9204      	str	r2, [sp, #16]
 80091b4:	fb06 f20c 	mul.w	r2, r6, ip
 80091b8:	1d05      	adds	r5, r0, #4
 80091ba:	9203      	str	r2, [sp, #12]
 80091bc:	eb03 120c 	add.w	r2, r3, ip, lsl #4
 80091c0:	eb07 0b04 	add.w	fp, r7, r4
 80091c4:	9505      	str	r5, [sp, #20]
 80091c6:	9201      	str	r2, [sp, #4]
 80091c8:	f103 0a10 	add.w	sl, r3, #16
 80091cc:	f1aa 0310 	sub.w	r3, sl, #16
 80091d0:	9308      	str	r3, [sp, #32]
 80091d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091d4:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80091d8:	eb0b 0803 	add.w	r8, fp, r3
 80091dc:	eddf 7a2f 	vldr	s15, [pc, #188]	@ 800929c <arm_mat_mult_f32+0x21c>
 80091e0:	f1bc 0f00 	cmp.w	ip, #0
 80091e4:	d053      	beq.n	800928e <arm_mat_mult_f32+0x20e>
 80091e6:	9b04      	ldr	r3, [sp, #16]
 80091e8:	4665      	mov	r5, ip
 80091ea:	18c1      	adds	r1, r0, r3
 80091ec:	4602      	mov	r2, r0
 80091ee:	4653      	mov	r3, sl
 80091f0:	ed92 6a00 	vldr	s12, [r2]
 80091f4:	ed13 7a04 	vldr	s14, [r3, #-16]
 80091f8:	ed53 4a03 	vldr	s9, [r3, #-12]
 80091fc:	ed53 6a02 	vldr	s13, [r3, #-8]
 8009200:	ed91 5a00 	vldr	s10, [r1]
 8009204:	ed53 5a01 	vldr	s11, [r3, #-4]
 8009208:	1917      	adds	r7, r2, r4
 800920a:	ee27 7a06 	vmul.f32	s14, s14, s12
 800920e:	ed97 6a00 	vldr	s12, [r7]
 8009212:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009216:	ee26 6a24 	vmul.f32	s12, s12, s9
 800921a:	190f      	adds	r7, r1, r4
 800921c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8009220:	ee26 7a85 	vmul.f32	s14, s13, s10
 8009224:	edd7 7a00 	vldr	s15, [r7]
 8009228:	ee37 7a06 	vadd.f32	s14, s14, s12
 800922c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8009230:	3d01      	subs	r5, #1
 8009232:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009236:	4432      	add	r2, r6
 8009238:	4431      	add	r1, r6
 800923a:	f103 0310 	add.w	r3, r3, #16
 800923e:	d1d7      	bne.n	80091f0 <arm_mat_mult_f32+0x170>
 8009240:	9b03      	ldr	r3, [sp, #12]
 8009242:	9a01      	ldr	r2, [sp, #4]
 8009244:	4418      	add	r0, r3
 8009246:	f1be 0f00 	cmp.w	lr, #0
 800924a:	d00b      	beq.n	8009264 <arm_mat_mult_f32+0x1e4>
 800924c:	4673      	mov	r3, lr
 800924e:	edd0 6a00 	vldr	s13, [r0]
 8009252:	ecb2 7a01 	vldmia	r2!, {s14}
 8009256:	ee27 7a26 	vmul.f32	s14, s14, s13
 800925a:	3b01      	subs	r3, #1
 800925c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009260:	4420      	add	r0, r4
 8009262:	d1f4      	bne.n	800924e <arm_mat_mult_f32+0x1ce>
 8009264:	ece8 7a01 	vstmia	r8!, {s15}
 8009268:	45d8      	cmp	r8, fp
 800926a:	4648      	mov	r0, r9
 800926c:	f109 0904 	add.w	r9, r9, #4
 8009270:	d1b4      	bne.n	80091dc <arm_mat_mult_f32+0x15c>
 8009272:	9a01      	ldr	r2, [sp, #4]
 8009274:	9b06      	ldr	r3, [sp, #24]
 8009276:	4611      	mov	r1, r2
 8009278:	4419      	add	r1, r3
 800927a:	449a      	add	sl, r3
 800927c:	9b02      	ldr	r3, [sp, #8]
 800927e:	9101      	str	r1, [sp, #4]
 8009280:	3b01      	subs	r3, #1
 8009282:	44a3      	add	fp, r4
 8009284:	9302      	str	r3, [sp, #8]
 8009286:	d08a      	beq.n	800919e <arm_mat_mult_f32+0x11e>
 8009288:	9b07      	ldr	r3, [sp, #28]
 800928a:	6858      	ldr	r0, [r3, #4]
 800928c:	e79e      	b.n	80091cc <arm_mat_mult_f32+0x14c>
 800928e:	9a08      	ldr	r2, [sp, #32]
 8009290:	e7d9      	b.n	8009246 <arm_mat_mult_f32+0x1c6>
 8009292:	f06f 0002 	mvn.w	r0, #2
 8009296:	b00b      	add	sp, #44	@ 0x2c
 8009298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800929c:	00000000 	.word	0x00000000

080092a0 <arm_mat_init_f32>:
 80092a0:	8001      	strh	r1, [r0, #0]
 80092a2:	8042      	strh	r2, [r0, #2]
 80092a4:	6043      	str	r3, [r0, #4]
 80092a6:	4770      	bx	lr

080092a8 <handle_message_memory.constprop.4>:
 80092a8:	b082      	sub	sp, #8
 80092aa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092ae:	b0a7      	sub	sp, #156	@ 0x9c
 80092b0:	ac30      	add	r4, sp, #192	@ 0xc0
 80092b2:	e884 000c 	stmia.w	r4, {r2, r3}
 80092b6:	9213      	str	r2, [sp, #76]	@ 0x4c
 80092b8:	e9dd 9236 	ldrd	r9, r2, [sp, #216]	@ 0xd8
 80092bc:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 80092be:	900b      	str	r0, [sp, #44]	@ 0x2c
 80092c0:	e9dd a733 	ldrd	sl, r7, [sp, #204]	@ 0xcc
 80092c4:	9117      	str	r1, [sp, #92]	@ 0x5c
 80092c6:	9314      	str	r3, [sp, #80]	@ 0x50
 80092c8:	920d      	str	r2, [sp, #52]	@ 0x34
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	f000 81a5 	beq.w	800961a <handle_message_memory.constprop.4+0x372>
 80092d0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80092d2:	689b      	ldr	r3, [r3, #8]
 80092d4:	930a      	str	r3, [sp, #40]	@ 0x28
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d036      	beq.n	8009348 <handle_message_memory.constprop.4+0xa0>
 80092da:	2300      	movs	r3, #0
 80092dc:	930a      	str	r3, [sp, #40]	@ 0x28
 80092de:	469b      	mov	fp, r3
 80092e0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80092e2:	691a      	ldr	r2, [r3, #16]
 80092e4:	ebcb 110b 	rsb	r1, fp, fp, lsl #4
 80092e8:	eb02 0381 	add.w	r3, r2, r1, lsl #2
 80092ec:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80092f0:	6899      	ldr	r1, [r3, #8]
 80092f2:	920e      	str	r2, [sp, #56]	@ 0x38
 80092f4:	910f      	str	r1, [sp, #60]	@ 0x3c
 80092f6:	7c1a      	ldrb	r2, [r3, #16]
 80092f8:	68d9      	ldr	r1, [r3, #12]
 80092fa:	791d      	ldrb	r5, [r3, #4]
 80092fc:	7e1c      	ldrb	r4, [r3, #24]
 80092fe:	9110      	str	r1, [sp, #64]	@ 0x40
 8009300:	6959      	ldr	r1, [r3, #20]
 8009302:	69db      	ldr	r3, [r3, #28]
 8009304:	9109      	str	r1, [sp, #36]	@ 0x24
 8009306:	9312      	str	r3, [sp, #72]	@ 0x48
 8009308:	2a00      	cmp	r2, #0
 800930a:	d06e      	beq.n	80093ea <handle_message_memory.constprop.4+0x142>
 800930c:	2900      	cmp	r1, #0
 800930e:	f000 80c8 	beq.w	80094a2 <handle_message_memory.constprop.4+0x1fa>
 8009312:	2c00      	cmp	r4, #0
 8009314:	f040 80c5 	bne.w	80094a2 <handle_message_memory.constprop.4+0x1fa>
 8009318:	940c      	str	r4, [sp, #48]	@ 0x30
 800931a:	2f00      	cmp	r7, #0
 800931c:	d168      	bne.n	80093f0 <handle_message_memory.constprop.4+0x148>
 800931e:	2d10      	cmp	r5, #16
 8009320:	f000 8084 	beq.w	800942c <handle_message_memory.constprop.4+0x184>
 8009324:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009326:	2b00      	cmp	r3, #0
 8009328:	f040 80c0 	bne.w	80094ac <handle_message_memory.constprop.4+0x204>
 800932c:	2d12      	cmp	r5, #18
 800932e:	f000 8157 	beq.w	80095e0 <handle_message_memory.constprop.4+0x338>
 8009332:	9309      	str	r3, [sp, #36]	@ 0x24
 8009334:	2d64      	cmp	r5, #100	@ 0x64
 8009336:	d00d      	beq.n	8009354 <handle_message_memory.constprop.4+0xac>
 8009338:	2f00      	cmp	r7, #0
 800933a:	d138      	bne.n	80093ae <handle_message_memory.constprop.4+0x106>
 800933c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800933e:	689b      	ldr	r3, [r3, #8]
 8009340:	f10b 0b01 	add.w	fp, fp, #1
 8009344:	459b      	cmp	fp, r3
 8009346:	d3cb      	bcc.n	80092e0 <handle_message_memory.constprop.4+0x38>
 8009348:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800934a:	b027      	add	sp, #156	@ 0x9c
 800934c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009350:	b002      	add	sp, #8
 8009352:	4770      	bx	lr
 8009354:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009356:	2b00      	cmp	r3, #0
 8009358:	f000 814f 	beq.w	80095fa <handle_message_memory.constprop.4+0x352>
 800935c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800935e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8009360:	4613      	mov	r3, r2
 8009362:	2a00      	cmp	r2, #0
 8009364:	bf08      	it	eq
 8009366:	460b      	moveq	r3, r1
 8009368:	930f      	str	r3, [sp, #60]	@ 0x3c
 800936a:	b1c7      	cbz	r7, 800939e <handle_message_memory.constprop.4+0xf6>
 800936c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800936e:	2400      	movs	r4, #0
 8009370:	1e5d      	subs	r5, r3, #1
 8009372:	f85a 6034 	ldr.w	r6, [sl, r4, lsl #3]
 8009376:	462a      	mov	r2, r5
 8009378:	4649      	mov	r1, r9
 800937a:	4630      	mov	r0, r6
 800937c:	f010 f8b5 	bl	80194ea <memcmp>
 8009380:	4603      	mov	r3, r0
 8009382:	49a8      	ldr	r1, [pc, #672]	@ (8009624 <handle_message_memory.constprop.4+0x37c>)
 8009384:	1970      	adds	r0, r6, r5
 8009386:	2205      	movs	r2, #5
 8009388:	eb0a 06c4 	add.w	r6, sl, r4, lsl #3
 800938c:	3401      	adds	r4, #1
 800938e:	b923      	cbnz	r3, 800939a <handle_message_memory.constprop.4+0xf2>
 8009390:	f010 f8ab 	bl	80194ea <memcmp>
 8009394:	2800      	cmp	r0, #0
 8009396:	f000 8134 	beq.w	8009602 <handle_message_memory.constprop.4+0x35a>
 800939a:	42a7      	cmp	r7, r4
 800939c:	d1e9      	bne.n	8009372 <handle_message_memory.constprop.4+0xca>
 800939e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	@ 0x24
 80093a2:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80093a4:	fb01 3302 	mla	r3, r1, r2, r3
 80093a8:	930a      	str	r3, [sp, #40]	@ 0x28
 80093aa:	2f00      	cmp	r7, #0
 80093ac:	d0c6      	beq.n	800933c <handle_message_memory.constprop.4+0x94>
 80093ae:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80093b0:	f7f6 ff26 	bl	8000200 <strlen>
 80093b4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80093b6:	f8cd 90d8 	str.w	r9, [sp, #216]	@ 0xd8
 80093ba:	3001      	adds	r0, #1
 80093bc:	9000      	str	r0, [sp, #0]
 80093be:	9337      	str	r3, [sp, #220]	@ 0xdc
 80093c0:	ae36      	add	r6, sp, #216	@ 0xd8
 80093c2:	ac18      	add	r4, sp, #96	@ 0x60
 80093c4:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80093c8:	4620      	mov	r0, r4
 80093ca:	f003 fbaf 	bl	800cb2c <micro_ros_string_utilities_remove_tail_chars>
 80093ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80093d0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80093d4:	689b      	ldr	r3, [r3, #8]
 80093d6:	910d      	str	r1, [sp, #52]	@ 0x34
 80093d8:	f10b 0b01 	add.w	fp, fp, #1
 80093dc:	455b      	cmp	r3, fp
 80093de:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 80093e2:	4681      	mov	r9, r0
 80093e4:	f63f af7c 	bhi.w	80092e0 <handle_message_memory.constprop.4+0x38>
 80093e8:	e7ae      	b.n	8009348 <handle_message_memory.constprop.4+0xa0>
 80093ea:	920c      	str	r2, [sp, #48]	@ 0x30
 80093ec:	2f00      	cmp	r7, #0
 80093ee:	d096      	beq.n	800931e <handle_message_memory.constprop.4+0x76>
 80093f0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80093f2:	9337      	str	r3, [sp, #220]	@ 0xdc
 80093f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80093f6:	f8cd 90d8 	str.w	r9, [sp, #216]	@ 0xd8
 80093fa:	ae36      	add	r6, sp, #216	@ 0xd8
 80093fc:	9300      	str	r3, [sp, #0]
 80093fe:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8009402:	4630      	mov	r0, r6
 8009404:	f003 fb64 	bl	800cad0 <micro_ros_string_utilities_append>
 8009408:	4b87      	ldr	r3, [pc, #540]	@ (8009628 <handle_message_memory.constprop.4+0x380>)
 800940a:	9300      	str	r3, [sp, #0]
 800940c:	f10d 0860 	add.w	r8, sp, #96	@ 0x60
 8009410:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8009414:	4640      	mov	r0, r8
 8009416:	f003 fb5b 	bl	800cad0 <micro_ros_string_utilities_append>
 800941a:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 800941e:	2d10      	cmp	r5, #16
 8009420:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8009424:	4681      	mov	r9, r0
 8009426:	910d      	str	r1, [sp, #52]	@ 0x34
 8009428:	f47f af7c 	bne.w	8009324 <handle_message_memory.constprop.4+0x7c>
 800942c:	2c00      	cmp	r4, #0
 800942e:	f000 80c7 	beq.w	80095c0 <handle_message_memory.constprop.4+0x318>
 8009432:	2301      	movs	r3, #1
 8009434:	9311      	str	r3, [sp, #68]	@ 0x44
 8009436:	2f00      	cmp	r7, #0
 8009438:	d144      	bne.n	80094c4 <handle_message_memory.constprop.4+0x21c>
 800943a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	@ 0x24
 800943e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8009440:	2d12      	cmp	r5, #18
 8009442:	fb01 3302 	mla	r3, r1, r2, r3
 8009446:	930a      	str	r3, [sp, #40]	@ 0x28
 8009448:	f47f af74 	bne.w	8009334 <handle_message_memory.constprop.4+0x8c>
 800944c:	4b77      	ldr	r3, [pc, #476]	@ (800962c <handle_message_memory.constprop.4+0x384>)
 800944e:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8009450:	6819      	ldr	r1, [r3, #0]
 8009452:	f002 fd95 	bl	800bf80 <get_message_typesupport_handle>
 8009456:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009458:	6845      	ldr	r5, [r0, #4]
 800945a:	2b00      	cmp	r3, #0
 800945c:	f040 80ea 	bne.w	8009634 <handle_message_memory.constprop.4+0x38c>
 8009460:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009462:	9337      	str	r3, [sp, #220]	@ 0xdc
 8009464:	f8cd 90d8 	str.w	r9, [sp, #216]	@ 0xd8
 8009468:	ae36      	add	r6, sp, #216	@ 0xd8
 800946a:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800946e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009470:	9335      	str	r3, [sp, #212]	@ 0xd4
 8009472:	f10d 0810 	add.w	r8, sp, #16
 8009476:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009478:	9330      	str	r3, [sp, #192]	@ 0xc0
 800947a:	e9cd a733 	strd	sl, r7, [sp, #204]	@ 0xcc
 800947e:	e888 0007 	stmia.w	r8, {r0, r1, r2}
 8009482:	ab32      	add	r3, sp, #200	@ 0xc8
 8009484:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009486:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800948a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800948c:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800948e:	4419      	add	r1, r3
 8009490:	ab30      	add	r3, sp, #192	@ 0xc0
 8009492:	cb0c      	ldmia	r3, {r2, r3}
 8009494:	4628      	mov	r0, r5
 8009496:	f7ff ff07 	bl	80092a8 <handle_message_memory.constprop.4>
 800949a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800949c:	4403      	add	r3, r0
 800949e:	930a      	str	r3, [sp, #40]	@ 0x28
 80094a0:	e74a      	b.n	8009338 <handle_message_memory.constprop.4+0x90>
 80094a2:	2d10      	cmp	r5, #16
 80094a4:	d07a      	beq.n	800959c <handle_message_memory.constprop.4+0x2f4>
 80094a6:	2f00      	cmp	r7, #0
 80094a8:	f040 8097 	bne.w	80095da <handle_message_memory.constprop.4+0x332>
 80094ac:	2d12      	cmp	r5, #18
 80094ae:	d029      	beq.n	8009504 <handle_message_memory.constprop.4+0x25c>
 80094b0:	2d64      	cmp	r5, #100	@ 0x64
 80094b2:	d177      	bne.n	80095a4 <handle_message_memory.constprop.4+0x2fc>
 80094b4:	230c      	movs	r3, #12
 80094b6:	9311      	str	r3, [sp, #68]	@ 0x44
 80094b8:	2c00      	cmp	r4, #0
 80094ba:	d079      	beq.n	80095b0 <handle_message_memory.constprop.4+0x308>
 80094bc:	2301      	movs	r3, #1
 80094be:	930c      	str	r3, [sp, #48]	@ 0x30
 80094c0:	2f00      	cmp	r7, #0
 80094c2:	d0ba      	beq.n	800943a <handle_message_memory.constprop.4+0x192>
 80094c4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80094c6:	e9cd b515 	strd	fp, r5, [sp, #84]	@ 0x54
 80094ca:	2400      	movs	r4, #0
 80094cc:	1e5e      	subs	r6, r3, #1
 80094ce:	f85a b034 	ldr.w	fp, [sl, r4, lsl #3]
 80094d2:	4658      	mov	r0, fp
 80094d4:	f7f6 fe94 	bl	8000200 <strlen>
 80094d8:	4649      	mov	r1, r9
 80094da:	4602      	mov	r2, r0
 80094dc:	4658      	mov	r0, fp
 80094de:	f010 f804 	bl	80194ea <memcmp>
 80094e2:	4605      	mov	r5, r0
 80094e4:	eb0a 08c4 	add.w	r8, sl, r4, lsl #3
 80094e8:	4632      	mov	r2, r6
 80094ea:	3401      	adds	r4, #1
 80094ec:	4649      	mov	r1, r9
 80094ee:	4658      	mov	r0, fp
 80094f0:	b91d      	cbnz	r5, 80094fa <handle_message_memory.constprop.4+0x252>
 80094f2:	f00f fffa 	bl	80194ea <memcmp>
 80094f6:	2800      	cmp	r0, #0
 80094f8:	d079      	beq.n	80095ee <handle_message_memory.constprop.4+0x346>
 80094fa:	42a7      	cmp	r7, r4
 80094fc:	d8e7      	bhi.n	80094ce <handle_message_memory.constprop.4+0x226>
 80094fe:	e9dd b515 	ldrd	fp, r5, [sp, #84]	@ 0x54
 8009502:	e79a      	b.n	800943a <handle_message_memory.constprop.4+0x192>
 8009504:	4b49      	ldr	r3, [pc, #292]	@ (800962c <handle_message_memory.constprop.4+0x384>)
 8009506:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8009508:	6819      	ldr	r1, [r3, #0]
 800950a:	f002 fd39 	bl	800bf80 <get_message_typesupport_handle>
 800950e:	6843      	ldr	r3, [r0, #4]
 8009510:	68db      	ldr	r3, [r3, #12]
 8009512:	9311      	str	r3, [sp, #68]	@ 0x44
 8009514:	b90c      	cbnz	r4, 800951a <handle_message_memory.constprop.4+0x272>
 8009516:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 8009518:	9309      	str	r3, [sp, #36]	@ 0x24
 800951a:	2f00      	cmp	r7, #0
 800951c:	d14d      	bne.n	80095ba <handle_message_memory.constprop.4+0x312>
 800951e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009520:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009522:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8009524:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8009526:	fb04 3302 	mla	r3, r4, r2, r3
 800952a:	930a      	str	r3, [sp, #40]	@ 0x28
 800952c:	4b3f      	ldr	r3, [pc, #252]	@ (800962c <handle_message_memory.constprop.4+0x384>)
 800952e:	6819      	ldr	r1, [r3, #0]
 8009530:	f002 fd26 	bl	800bf80 <get_message_typesupport_handle>
 8009534:	6845      	ldr	r5, [r0, #4]
 8009536:	2c00      	cmp	r4, #0
 8009538:	f43f af00 	beq.w	800933c <handle_message_memory.constprop.4+0x94>
 800953c:	ab32      	add	r3, sp, #200	@ 0xc8
 800953e:	f8cd b03c 	str.w	fp, [sp, #60]	@ 0x3c
 8009542:	46cb      	mov	fp, r9
 8009544:	46d1      	mov	r9, sl
 8009546:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800954a:	930c      	str	r3, [sp, #48]	@ 0x30
 800954c:	2400      	movs	r4, #0
 800954e:	ae36      	add	r6, sp, #216	@ 0xd8
 8009550:	f10d 0810 	add.w	r8, sp, #16
 8009554:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009556:	9337      	str	r3, [sp, #220]	@ 0xdc
 8009558:	f8cd b0d8 	str.w	fp, [sp, #216]	@ 0xd8
 800955c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8009560:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009562:	9335      	str	r3, [sp, #212]	@ 0xd4
 8009564:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009566:	9330      	str	r3, [sp, #192]	@ 0xc0
 8009568:	e9cd 9733 	strd	r9, r7, [sp, #204]	@ 0xcc
 800956c:	e888 0007 	stmia.w	r8, {r0, r1, r2}
 8009570:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009572:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009574:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8009578:	ab30      	add	r3, sp, #192	@ 0xc0
 800957a:	cb0c      	ldmia	r3, {r2, r3}
 800957c:	2100      	movs	r1, #0
 800957e:	4628      	mov	r0, r5
 8009580:	f7ff fe92 	bl	80092a8 <handle_message_memory.constprop.4>
 8009584:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009586:	3401      	adds	r4, #1
 8009588:	429c      	cmp	r4, r3
 800958a:	4482      	add	sl, r0
 800958c:	d1e2      	bne.n	8009554 <handle_message_memory.constprop.4+0x2ac>
 800958e:	f8cd a028 	str.w	sl, [sp, #40]	@ 0x28
 8009592:	46ca      	mov	sl, r9
 8009594:	46d9      	mov	r9, fp
 8009596:	f8dd b03c 	ldr.w	fp, [sp, #60]	@ 0x3c
 800959a:	e6cd      	b.n	8009338 <handle_message_memory.constprop.4+0x90>
 800959c:	2301      	movs	r3, #1
 800959e:	930c      	str	r3, [sp, #48]	@ 0x30
 80095a0:	2564      	movs	r5, #100	@ 0x64
 80095a2:	e6ba      	b.n	800931a <handle_message_memory.constprop.4+0x72>
 80095a4:	4b22      	ldr	r3, [pc, #136]	@ (8009630 <handle_message_memory.constprop.4+0x388>)
 80095a6:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80095aa:	9311      	str	r3, [sp, #68]	@ 0x44
 80095ac:	2c00      	cmp	r4, #0
 80095ae:	d185      	bne.n	80094bc <handle_message_memory.constprop.4+0x214>
 80095b0:	9b32      	ldr	r3, [sp, #200]	@ 0xc8
 80095b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80095b4:	2301      	movs	r3, #1
 80095b6:	930c      	str	r3, [sp, #48]	@ 0x30
 80095b8:	e73d      	b.n	8009436 <handle_message_memory.constprop.4+0x18e>
 80095ba:	2301      	movs	r3, #1
 80095bc:	930c      	str	r3, [sp, #48]	@ 0x30
 80095be:	e781      	b.n	80094c4 <handle_message_memory.constprop.4+0x21c>
 80095c0:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80095c2:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80095c4:	4613      	mov	r3, r2
 80095c6:	2a00      	cmp	r2, #0
 80095c8:	bf08      	it	eq
 80095ca:	460b      	moveq	r3, r1
 80095cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80095ce:	bb0f      	cbnz	r7, 8009614 <handle_message_memory.constprop.4+0x36c>
 80095d0:	461a      	mov	r2, r3
 80095d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80095d4:	4413      	add	r3, r2
 80095d6:	930a      	str	r3, [sp, #40]	@ 0x28
 80095d8:	e6b0      	b.n	800933c <handle_message_memory.constprop.4+0x94>
 80095da:	2301      	movs	r3, #1
 80095dc:	930c      	str	r3, [sp, #48]	@ 0x30
 80095de:	e707      	b.n	80093f0 <handle_message_memory.constprop.4+0x148>
 80095e0:	4b12      	ldr	r3, [pc, #72]	@ (800962c <handle_message_memory.constprop.4+0x384>)
 80095e2:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80095e4:	6819      	ldr	r1, [r3, #0]
 80095e6:	f002 fccb 	bl	800bf80 <get_message_typesupport_handle>
 80095ea:	6845      	ldr	r5, [r0, #4]
 80095ec:	e738      	b.n	8009460 <handle_message_memory.constprop.4+0x1b8>
 80095ee:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80095f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80095f4:	e9dd b515 	ldrd	fp, r5, [sp, #84]	@ 0x54
 80095f8:	e71f      	b.n	800943a <handle_message_memory.constprop.4+0x192>
 80095fa:	a821      	add	r0, sp, #132	@ 0x84
 80095fc:	f001 fefe 	bl	800b3fc <rcutils_get_default_allocator>
 8009600:	e6ac      	b.n	800935c <handle_message_memory.constprop.4+0xb4>
 8009602:	6873      	ldr	r3, [r6, #4]
 8009604:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009606:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	@ 0x24
 800960a:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800960c:	fb01 3302 	mla	r3, r1, r2, r3
 8009610:	930a      	str	r3, [sp, #40]	@ 0x28
 8009612:	e6ca      	b.n	80093aa <handle_message_memory.constprop.4+0x102>
 8009614:	2301      	movs	r3, #1
 8009616:	9311      	str	r3, [sp, #68]	@ 0x44
 8009618:	e754      	b.n	80094c4 <handle_message_memory.constprop.4+0x21c>
 800961a:	a81c      	add	r0, sp, #112	@ 0x70
 800961c:	f001 feee 	bl	800b3fc <rcutils_get_default_allocator>
 8009620:	e656      	b.n	80092d0 <handle_message_memory.constprop.4+0x28>
 8009622:	bf00      	nop
 8009624:	0801a978 	.word	0x0801a978
 8009628:	0801a974 	.word	0x0801a974
 800962c:	20000170 	.word	0x20000170
 8009630:	0801a980 	.word	0x0801a980
 8009634:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009636:	2b00      	cmp	r3, #0
 8009638:	d180      	bne.n	800953c <handle_message_memory.constprop.4+0x294>
 800963a:	e67d      	b.n	8009338 <handle_message_memory.constprop.4+0x90>

0800963c <handle_message_memory.constprop.2>:
 800963c:	b082      	sub	sp, #8
 800963e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009642:	ed2d 8b02 	vpush	{d8}
 8009646:	b0a9      	sub	sp, #164	@ 0xa4
 8009648:	ac34      	add	r4, sp, #208	@ 0xd0
 800964a:	e884 000c 	stmia.w	r4, {r2, r3}
 800964e:	e9dd b337 	ldrd	fp, r3, [sp, #220]	@ 0xdc
 8009652:	9216      	str	r2, [sp, #88]	@ 0x58
 8009654:	e9dd 723a 	ldrd	r7, r2, [sp, #232]	@ 0xe8
 8009658:	9308      	str	r3, [sp, #32]
 800965a:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 800965c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800965e:	9112      	str	r1, [sp, #72]	@ 0x48
 8009660:	9314      	str	r3, [sp, #80]	@ 0x50
 8009662:	920c      	str	r2, [sp, #48]	@ 0x30
 8009664:	2b00      	cmp	r3, #0
 8009666:	f000 8210 	beq.w	8009a8a <handle_message_memory.constprop.2+0x44e>
 800966a:	681a      	ldr	r2, [r3, #0]
 800966c:	691b      	ldr	r3, [r3, #16]
 800966e:	9215      	str	r2, [sp, #84]	@ 0x54
 8009670:	ee08 3a10 	vmov	s16, r3
 8009674:	4603      	mov	r3, r0
 8009676:	689b      	ldr	r3, [r3, #8]
 8009678:	2b00      	cmp	r3, #0
 800967a:	f000 81c0 	beq.w	80099fe <handle_message_memory.constprop.2+0x3c2>
 800967e:	2300      	movs	r3, #0
 8009680:	e9cd 3309 	strd	r3, r3, [sp, #36]	@ 0x24
 8009684:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009686:	691a      	ldr	r2, [r3, #16]
 8009688:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800968a:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
 800968e:	eb02 0381 	add.w	r3, r2, r1, lsl #2
 8009692:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8009696:	920f      	str	r2, [sp, #60]	@ 0x3c
 8009698:	e9d3 5102 	ldrd	r5, r1, [r3, #8]
 800969c:	7c1a      	ldrb	r2, [r3, #16]
 800969e:	791e      	ldrb	r6, [r3, #4]
 80096a0:	f8d3 8014 	ldr.w	r8, [r3, #20]
 80096a4:	f893 9018 	ldrb.w	r9, [r3, #24]
 80096a8:	69db      	ldr	r3, [r3, #28]
 80096aa:	9110      	str	r1, [sp, #64]	@ 0x40
 80096ac:	930d      	str	r3, [sp, #52]	@ 0x34
 80096ae:	2a00      	cmp	r2, #0
 80096b0:	d056      	beq.n	8009760 <handle_message_memory.constprop.2+0x124>
 80096b2:	f1b8 0f00 	cmp.w	r8, #0
 80096b6:	d002      	beq.n	80096be <handle_message_memory.constprop.2+0x82>
 80096b8:	f1b9 0f00 	cmp.w	r9, #0
 80096bc:	d050      	beq.n	8009760 <handle_message_memory.constprop.2+0x124>
 80096be:	9b08      	ldr	r3, [sp, #32]
 80096c0:	2e10      	cmp	r6, #16
 80096c2:	bf08      	it	eq
 80096c4:	2664      	moveq	r6, #100	@ 0x64
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	f040 8154 	bne.w	8009974 <handle_message_memory.constprop.2+0x338>
 80096cc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80096ce:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80096d0:	2e12      	cmp	r6, #18
 80096d2:	4413      	add	r3, r2
 80096d4:	930e      	str	r3, [sp, #56]	@ 0x38
 80096d6:	f000 80f8 	beq.w	80098ca <handle_message_memory.constprop.2+0x28e>
 80096da:	2e64      	cmp	r6, #100	@ 0x64
 80096dc:	f040 8164 	bne.w	80099a8 <handle_message_memory.constprop.2+0x36c>
 80096e0:	f1b9 0f00 	cmp.w	r9, #0
 80096e4:	f040 816b 	bne.w	80099be <handle_message_memory.constprop.2+0x382>
 80096e8:	230c      	movs	r3, #12
 80096ea:	9311      	str	r3, [sp, #68]	@ 0x44
 80096ec:	2301      	movs	r3, #1
 80096ee:	f8dd 80d8 	ldr.w	r8, [sp, #216]	@ 0xd8
 80096f2:	9313      	str	r3, [sp, #76]	@ 0x4c
 80096f4:	9b08      	ldr	r3, [sp, #32]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d148      	bne.n	800978c <handle_message_memory.constprop.2+0x150>
 80096fa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80096fc:	fb03 f208 	mul.w	r2, r3, r8
 8009700:	ee18 1a10 	vmov	r1, s16
 8009704:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8009706:	9211      	str	r2, [sp, #68]	@ 0x44
 8009708:	4610      	mov	r0, r2
 800970a:	4798      	blx	r3
 800970c:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 800970e:	6020      	str	r0, [r4, #0]
 8009710:	2800      	cmp	r0, #0
 8009712:	f000 8174 	beq.w	80099fe <handle_message_memory.constprop.2+0x3c2>
 8009716:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009718:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800971a:	2100      	movs	r1, #0
 800971c:	4413      	add	r3, r2
 800971e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009720:	f00f ff0d 	bl	801953e <memset>
 8009724:	4623      	mov	r3, r4
 8009726:	f8c4 8008 	str.w	r8, [r4, #8]
 800972a:	2e12      	cmp	r6, #18
 800972c:	f04f 0400 	mov.w	r4, #0
 8009730:	605c      	str	r4, [r3, #4]
 8009732:	f000 80f4 	beq.w	800991e <handle_message_memory.constprop.2+0x2e2>
 8009736:	2e64      	cmp	r6, #100	@ 0x64
 8009738:	d054      	beq.n	80097e4 <handle_message_memory.constprop.2+0x1a8>
 800973a:	9b08      	ldr	r3, [sp, #32]
 800973c:	2b00      	cmp	r3, #0
 800973e:	f040 80a6 	bne.w	800988e <handle_message_memory.constprop.2+0x252>
 8009742:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009744:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009746:	689b      	ldr	r3, [r3, #8]
 8009748:	3201      	adds	r2, #1
 800974a:	429a      	cmp	r2, r3
 800974c:	9209      	str	r2, [sp, #36]	@ 0x24
 800974e:	d399      	bcc.n	8009684 <handle_message_memory.constprop.2+0x48>
 8009750:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009752:	b029      	add	sp, #164	@ 0xa4
 8009754:	ecbd 8b02 	vpop	{d8}
 8009758:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800975c:	b002      	add	sp, #8
 800975e:	4770      	bx	lr
 8009760:	9b08      	ldr	r3, [sp, #32]
 8009762:	2b00      	cmp	r3, #0
 8009764:	f040 80c1 	bne.w	80098ea <handle_message_memory.constprop.2+0x2ae>
 8009768:	2e10      	cmp	r6, #16
 800976a:	d134      	bne.n	80097d6 <handle_message_memory.constprop.2+0x19a>
 800976c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800976e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009770:	4413      	add	r3, r2
 8009772:	930e      	str	r3, [sp, #56]	@ 0x38
 8009774:	f1b9 0f00 	cmp.w	r9, #0
 8009778:	f000 8126 	beq.w	80099c8 <handle_message_memory.constprop.2+0x38c>
 800977c:	2300      	movs	r3, #0
 800977e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009780:	2301      	movs	r3, #1
 8009782:	9311      	str	r3, [sp, #68]	@ 0x44
 8009784:	9b08      	ldr	r3, [sp, #32]
 8009786:	2610      	movs	r6, #16
 8009788:	2b00      	cmp	r3, #0
 800978a:	d0b6      	beq.n	80096fa <handle_message_memory.constprop.2+0xbe>
 800978c:	469a      	mov	sl, r3
 800978e:	e9cd 5818 	strd	r5, r8, [sp, #96]	@ 0x60
 8009792:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009794:	9617      	str	r6, [sp, #92]	@ 0x5c
 8009796:	2400      	movs	r4, #0
 8009798:	f103 39ff 	add.w	r9, r3, #4294967295	@ 0xffffffff
 800979c:	f85b 6034 	ldr.w	r6, [fp, r4, lsl #3]
 80097a0:	4630      	mov	r0, r6
 80097a2:	f7f6 fd2d 	bl	8000200 <strlen>
 80097a6:	4639      	mov	r1, r7
 80097a8:	4602      	mov	r2, r0
 80097aa:	4630      	mov	r0, r6
 80097ac:	f00f fe9d 	bl	80194ea <memcmp>
 80097b0:	4605      	mov	r5, r0
 80097b2:	eb0b 08c4 	add.w	r8, fp, r4, lsl #3
 80097b6:	464a      	mov	r2, r9
 80097b8:	3401      	adds	r4, #1
 80097ba:	4639      	mov	r1, r7
 80097bc:	4630      	mov	r0, r6
 80097be:	b925      	cbnz	r5, 80097ca <handle_message_memory.constprop.2+0x18e>
 80097c0:	f00f fe93 	bl	80194ea <memcmp>
 80097c4:	2800      	cmp	r0, #0
 80097c6:	f000 811d 	beq.w	8009a04 <handle_message_memory.constprop.2+0x3c8>
 80097ca:	4554      	cmp	r4, sl
 80097cc:	d1e6      	bne.n	800979c <handle_message_memory.constprop.2+0x160>
 80097ce:	e9dd 5818 	ldrd	r5, r8, [sp, #96]	@ 0x60
 80097d2:	9e17      	ldr	r6, [sp, #92]	@ 0x5c
 80097d4:	e791      	b.n	80096fa <handle_message_memory.constprop.2+0xbe>
 80097d6:	2e12      	cmp	r6, #18
 80097d8:	f000 80fe 	beq.w	80099d8 <handle_message_memory.constprop.2+0x39c>
 80097dc:	2e64      	cmp	r6, #100	@ 0x64
 80097de:	f04f 0800 	mov.w	r8, #0
 80097e2:	d1aa      	bne.n	800973a <handle_message_memory.constprop.2+0xfe>
 80097e4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	f000 8146 	beq.w	8009a78 <handle_message_memory.constprop.2+0x43c>
 80097ec:	681a      	ldr	r2, [r3, #0]
 80097ee:	691e      	ldr	r6, [r3, #16]
 80097f0:	920e      	str	r2, [sp, #56]	@ 0x38
 80097f2:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80097f4:	2d00      	cmp	r5, #0
 80097f6:	bf08      	it	eq
 80097f8:	461d      	moveq	r5, r3
 80097fa:	9b08      	ldr	r3, [sp, #32]
 80097fc:	b1eb      	cbz	r3, 800983a <handle_message_memory.constprop.2+0x1fe>
 80097fe:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009800:	9510      	str	r5, [sp, #64]	@ 0x40
 8009802:	f102 39ff 	add.w	r9, r2, #4294967295	@ 0xffffffff
 8009806:	2400      	movs	r4, #0
 8009808:	469a      	mov	sl, r3
 800980a:	f85b 5034 	ldr.w	r5, [fp, r4, lsl #3]
 800980e:	464a      	mov	r2, r9
 8009810:	4639      	mov	r1, r7
 8009812:	4628      	mov	r0, r5
 8009814:	f00f fe69 	bl	80194ea <memcmp>
 8009818:	4603      	mov	r3, r0
 800981a:	49a1      	ldr	r1, [pc, #644]	@ (8009aa0 <handle_message_memory.constprop.2+0x464>)
 800981c:	eb05 0009 	add.w	r0, r5, r9
 8009820:	2205      	movs	r2, #5
 8009822:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 8009826:	3401      	adds	r4, #1
 8009828:	b923      	cbnz	r3, 8009834 <handle_message_memory.constprop.2+0x1f8>
 800982a:	f00f fe5e 	bl	80194ea <memcmp>
 800982e:	2800      	cmp	r0, #0
 8009830:	f000 8129 	beq.w	8009a86 <handle_message_memory.constprop.2+0x44a>
 8009834:	4554      	cmp	r4, sl
 8009836:	d1e8      	bne.n	800980a <handle_message_memory.constprop.2+0x1ce>
 8009838:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800983a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800983c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800983e:	589c      	ldr	r4, [r3, r2]
 8009840:	fb08 f305 	mul.w	r3, r8, r5
 8009844:	930d      	str	r3, [sp, #52]	@ 0x34
 8009846:	f1b8 0f00 	cmp.w	r8, #0
 800984a:	d018      	beq.n	800987e <handle_message_memory.constprop.2+0x242>
 800984c:	f04f 0a00 	mov.w	sl, #0
 8009850:	f8cd b040 	str.w	fp, [sp, #64]	@ 0x40
 8009854:	46b3      	mov	fp, r6
 8009856:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8009858:	46d1      	mov	r9, sl
 800985a:	4659      	mov	r1, fp
 800985c:	4628      	mov	r0, r5
 800985e:	47b0      	blx	r6
 8009860:	f10a 0a01 	add.w	sl, sl, #1
 8009864:	e9c4 9501 	strd	r9, r5, [r4, #4]
 8009868:	6020      	str	r0, [r4, #0]
 800986a:	462a      	mov	r2, r5
 800986c:	2100      	movs	r1, #0
 800986e:	f00f fe66 	bl	801953e <memset>
 8009872:	45c2      	cmp	sl, r8
 8009874:	f104 040c 	add.w	r4, r4, #12
 8009878:	d1ef      	bne.n	800985a <handle_message_memory.constprop.2+0x21e>
 800987a:	f8dd b040 	ldr.w	fp, [sp, #64]	@ 0x40
 800987e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009880:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009882:	4413      	add	r3, r2
 8009884:	930a      	str	r3, [sp, #40]	@ 0x28
 8009886:	9b08      	ldr	r3, [sp, #32]
 8009888:	2b00      	cmp	r3, #0
 800988a:	f43f af5a 	beq.w	8009742 <handle_message_memory.constprop.2+0x106>
 800988e:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8009890:	f7f6 fcb6 	bl	8000200 <strlen>
 8009894:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009896:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8009898:	973a      	str	r7, [sp, #232]	@ 0xe8
 800989a:	3001      	adds	r0, #1
 800989c:	9000      	str	r0, [sp, #0]
 800989e:	933b      	str	r3, [sp, #236]	@ 0xec
 80098a0:	ad1a      	add	r5, sp, #104	@ 0x68
 80098a2:	ac3a      	add	r4, sp, #232	@ 0xe8
 80098a4:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80098a8:	3601      	adds	r6, #1
 80098aa:	4628      	mov	r0, r5
 80098ac:	9609      	str	r6, [sp, #36]	@ 0x24
 80098ae:	f003 f93d 	bl	800cb2c <micro_ros_string_utilities_remove_tail_chars>
 80098b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80098b4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80098b8:	689b      	ldr	r3, [r3, #8]
 80098ba:	910c      	str	r1, [sp, #48]	@ 0x30
 80098bc:	429e      	cmp	r6, r3
 80098be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80098c2:	4607      	mov	r7, r0
 80098c4:	f4ff aede 	bcc.w	8009684 <handle_message_memory.constprop.2+0x48>
 80098c8:	e742      	b.n	8009750 <handle_message_memory.constprop.2+0x114>
 80098ca:	4b76      	ldr	r3, [pc, #472]	@ (8009aa4 <handle_message_memory.constprop.2+0x468>)
 80098cc:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80098ce:	6819      	ldr	r1, [r3, #0]
 80098d0:	f002 fb56 	bl	800bf80 <get_message_typesupport_handle>
 80098d4:	6843      	ldr	r3, [r0, #4]
 80098d6:	68db      	ldr	r3, [r3, #12]
 80098d8:	9311      	str	r3, [sp, #68]	@ 0x44
 80098da:	f1b9 0f00 	cmp.w	r9, #0
 80098de:	d16b      	bne.n	80099b8 <handle_message_memory.constprop.2+0x37c>
 80098e0:	2301      	movs	r3, #1
 80098e2:	f8dd 80d4 	ldr.w	r8, [sp, #212]	@ 0xd4
 80098e6:	9313      	str	r3, [sp, #76]	@ 0x4c
 80098e8:	e704      	b.n	80096f4 <handle_message_memory.constprop.2+0xb8>
 80098ea:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80098ec:	933b      	str	r3, [sp, #236]	@ 0xec
 80098ee:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80098f0:	973a      	str	r7, [sp, #232]	@ 0xe8
 80098f2:	ac3a      	add	r4, sp, #232	@ 0xe8
 80098f4:	9300      	str	r3, [sp, #0]
 80098f6:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80098fa:	4620      	mov	r0, r4
 80098fc:	f003 f8e8 	bl	800cad0 <micro_ros_string_utilities_append>
 8009900:	4b69      	ldr	r3, [pc, #420]	@ (8009aa8 <handle_message_memory.constprop.2+0x46c>)
 8009902:	9300      	str	r3, [sp, #0]
 8009904:	af1a      	add	r7, sp, #104	@ 0x68
 8009906:	4638      	mov	r0, r7
 8009908:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800990c:	f003 f8e0 	bl	800cad0 <micro_ros_string_utilities_append>
 8009910:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8009914:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009918:	4607      	mov	r7, r0
 800991a:	910c      	str	r1, [sp, #48]	@ 0x30
 800991c:	e724      	b.n	8009768 <handle_message_memory.constprop.2+0x12c>
 800991e:	4b61      	ldr	r3, [pc, #388]	@ (8009aa4 <handle_message_memory.constprop.2+0x468>)
 8009920:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8009922:	6819      	ldr	r1, [r3, #0]
 8009924:	f002 fb2c 	bl	800bf80 <get_message_typesupport_handle>
 8009928:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800992a:	f8d0 9004 	ldr.w	r9, [r0, #4]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d16d      	bne.n	8009a0e <handle_message_memory.constprop.2+0x3d2>
 8009932:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009934:	933b      	str	r3, [sp, #236]	@ 0xec
 8009936:	973a      	str	r7, [sp, #232]	@ 0xe8
 8009938:	ac3a      	add	r4, sp, #232	@ 0xe8
 800993a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800993e:	9b08      	ldr	r3, [sp, #32]
 8009940:	9338      	str	r3, [sp, #224]	@ 0xe0
 8009942:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009944:	9339      	str	r3, [sp, #228]	@ 0xe4
 8009946:	f10d 0a10 	add.w	sl, sp, #16
 800994a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800994c:	9334      	str	r3, [sp, #208]	@ 0xd0
 800994e:	f8cd b0dc 	str.w	fp, [sp, #220]	@ 0xdc
 8009952:	e88a 0007 	stmia.w	sl, {r0, r1, r2}
 8009956:	ae36      	add	r6, sp, #216	@ 0xd8
 8009958:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800995c:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8009960:	ab34      	add	r3, sp, #208	@ 0xd0
 8009962:	cb0c      	ldmia	r3, {r2, r3}
 8009964:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009966:	4648      	mov	r0, r9
 8009968:	f7ff fe68 	bl	800963c <handle_message_memory.constprop.2>
 800996c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800996e:	4403      	add	r3, r0
 8009970:	930a      	str	r3, [sp, #40]	@ 0x28
 8009972:	e6e2      	b.n	800973a <handle_message_memory.constprop.2+0xfe>
 8009974:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009976:	933b      	str	r3, [sp, #236]	@ 0xec
 8009978:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800997a:	973a      	str	r7, [sp, #232]	@ 0xe8
 800997c:	ac3a      	add	r4, sp, #232	@ 0xe8
 800997e:	9300      	str	r3, [sp, #0]
 8009980:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8009984:	4620      	mov	r0, r4
 8009986:	f003 f8a3 	bl	800cad0 <micro_ros_string_utilities_append>
 800998a:	4b47      	ldr	r3, [pc, #284]	@ (8009aa8 <handle_message_memory.constprop.2+0x46c>)
 800998c:	9300      	str	r3, [sp, #0]
 800998e:	af1a      	add	r7, sp, #104	@ 0x68
 8009990:	4638      	mov	r0, r7
 8009992:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8009996:	f003 f89b 	bl	800cad0 <micro_ros_string_utilities_append>
 800999a:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800999e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80099a2:	4607      	mov	r7, r0
 80099a4:	910c      	str	r1, [sp, #48]	@ 0x30
 80099a6:	e691      	b.n	80096cc <handle_message_memory.constprop.2+0x90>
 80099a8:	4b40      	ldr	r3, [pc, #256]	@ (8009aac <handle_message_memory.constprop.2+0x470>)
 80099aa:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 80099ae:	9311      	str	r3, [sp, #68]	@ 0x44
 80099b0:	f1b9 0f00 	cmp.w	r9, #0
 80099b4:	f43f ae9a 	beq.w	80096ec <handle_message_memory.constprop.2+0xb0>
 80099b8:	2301      	movs	r3, #1
 80099ba:	9313      	str	r3, [sp, #76]	@ 0x4c
 80099bc:	e69a      	b.n	80096f4 <handle_message_memory.constprop.2+0xb8>
 80099be:	2301      	movs	r3, #1
 80099c0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80099c2:	230c      	movs	r3, #12
 80099c4:	9311      	str	r3, [sp, #68]	@ 0x44
 80099c6:	e695      	b.n	80096f4 <handle_message_memory.constprop.2+0xb8>
 80099c8:	b195      	cbz	r5, 80099f0 <handle_message_memory.constprop.2+0x3b4>
 80099ca:	2301      	movs	r3, #1
 80099cc:	f8cd 904c 	str.w	r9, [sp, #76]	@ 0x4c
 80099d0:	46a8      	mov	r8, r5
 80099d2:	2610      	movs	r6, #16
 80099d4:	9311      	str	r3, [sp, #68]	@ 0x44
 80099d6:	e68d      	b.n	80096f4 <handle_message_memory.constprop.2+0xb8>
 80099d8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80099da:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80099dc:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80099de:	4413      	add	r3, r2
 80099e0:	930e      	str	r3, [sp, #56]	@ 0x38
 80099e2:	4b30      	ldr	r3, [pc, #192]	@ (8009aa4 <handle_message_memory.constprop.2+0x468>)
 80099e4:	6819      	ldr	r1, [r3, #0]
 80099e6:	f002 facb 	bl	800bf80 <get_message_typesupport_handle>
 80099ea:	f8d0 9004 	ldr.w	r9, [r0, #4]
 80099ee:	e7a0      	b.n	8009932 <handle_message_memory.constprop.2+0x2f6>
 80099f0:	2301      	movs	r3, #1
 80099f2:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80099f6:	9513      	str	r5, [sp, #76]	@ 0x4c
 80099f8:	2610      	movs	r6, #16
 80099fa:	9311      	str	r3, [sp, #68]	@ 0x44
 80099fc:	e67a      	b.n	80096f4 <handle_message_memory.constprop.2+0xb8>
 80099fe:	2300      	movs	r3, #0
 8009a00:	930a      	str	r3, [sp, #40]	@ 0x28
 8009a02:	e6a5      	b.n	8009750 <handle_message_memory.constprop.2+0x114>
 8009a04:	e9dd 6517 	ldrd	r6, r5, [sp, #92]	@ 0x5c
 8009a08:	f8d8 8004 	ldr.w	r8, [r8, #4]
 8009a0c:	e675      	b.n	80096fa <handle_message_memory.constprop.2+0xbe>
 8009a0e:	f1b8 0f00 	cmp.w	r8, #0
 8009a12:	f43f ae92 	beq.w	800973a <handle_message_memory.constprop.2+0xfe>
 8009a16:	4625      	mov	r5, r4
 8009a18:	ac3a      	add	r4, sp, #232	@ 0xe8
 8009a1a:	940d      	str	r4, [sp, #52]	@ 0x34
 8009a1c:	465c      	mov	r4, fp
 8009a1e:	46bb      	mov	fp, r7
 8009a20:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8009a22:	f10d 0a10 	add.w	sl, sp, #16
 8009a26:	ae36      	add	r6, sp, #216	@ 0xd8
 8009a28:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009a2a:	933b      	str	r3, [sp, #236]	@ 0xec
 8009a2c:	9b08      	ldr	r3, [sp, #32]
 8009a2e:	9338      	str	r3, [sp, #224]	@ 0xe0
 8009a30:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009a32:	9339      	str	r3, [sp, #228]	@ 0xe4
 8009a34:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009a36:	9334      	str	r3, [sp, #208]	@ 0xd0
 8009a38:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009a3a:	f8cd b0e8 	str.w	fp, [sp, #232]	@ 0xe8
 8009a3e:	f8d3 c000 	ldr.w	ip, [r3]
 8009a42:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009a44:	f8d9 e00c 	ldr.w	lr, [r9, #12]
 8009a48:	9437      	str	r4, [sp, #220]	@ 0xdc
 8009a4a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009a4e:	e88a 0007 	stmia.w	sl, {r0, r1, r2}
 8009a52:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8009a56:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8009a5a:	ab34      	add	r3, sp, #208	@ 0xd0
 8009a5c:	fb0e c105 	mla	r1, lr, r5, ip
 8009a60:	cb0c      	ldmia	r3, {r2, r3}
 8009a62:	4648      	mov	r0, r9
 8009a64:	f7ff fdea 	bl	800963c <handle_message_memory.constprop.2>
 8009a68:	3501      	adds	r5, #1
 8009a6a:	45a8      	cmp	r8, r5
 8009a6c:	4407      	add	r7, r0
 8009a6e:	d1db      	bne.n	8009a28 <handle_message_memory.constprop.2+0x3ec>
 8009a70:	970a      	str	r7, [sp, #40]	@ 0x28
 8009a72:	465f      	mov	r7, fp
 8009a74:	46a3      	mov	fp, r4
 8009a76:	e660      	b.n	800973a <handle_message_memory.constprop.2+0xfe>
 8009a78:	a823      	add	r0, sp, #140	@ 0x8c
 8009a7a:	f001 fcbf 	bl	800b3fc <rcutils_get_default_allocator>
 8009a7e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009a80:	9e27      	ldr	r6, [sp, #156]	@ 0x9c
 8009a82:	930e      	str	r3, [sp, #56]	@ 0x38
 8009a84:	e6b5      	b.n	80097f2 <handle_message_memory.constprop.2+0x1b6>
 8009a86:	686d      	ldr	r5, [r5, #4]
 8009a88:	e6d7      	b.n	800983a <handle_message_memory.constprop.2+0x1fe>
 8009a8a:	a81e      	add	r0, sp, #120	@ 0x78
 8009a8c:	f001 fcb6 	bl	800b3fc <rcutils_get_default_allocator>
 8009a90:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8009a92:	9315      	str	r3, [sp, #84]	@ 0x54
 8009a94:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8009a96:	ee08 3a10 	vmov	s16, r3
 8009a9a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009a9c:	e5eb      	b.n	8009676 <handle_message_memory.constprop.2+0x3a>
 8009a9e:	bf00      	nop
 8009aa0:	0801a978 	.word	0x0801a978
 8009aa4:	20000170 	.word	0x20000170
 8009aa8:	0801a974 	.word	0x0801a974
 8009aac:	0801a980 	.word	0x0801a980

08009ab0 <get_longest_member_name>:
 8009ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ab4:	ed2d 8b06 	vpush	{d8-d10}
 8009ab8:	6885      	ldr	r5, [r0, #8]
 8009aba:	b099      	sub	sp, #100	@ 0x64
 8009abc:	2d00      	cmp	r5, #0
 8009abe:	f000 810f 	beq.w	8009ce0 <get_longest_member_name+0x230>
 8009ac2:	f04f 0a00 	mov.w	sl, #0
 8009ac6:	46d3      	mov	fp, sl
 8009ac8:	f8cd a004 	str.w	sl, [sp, #4]
 8009acc:	9003      	str	r0, [sp, #12]
 8009ace:	9b03      	ldr	r3, [sp, #12]
 8009ad0:	691b      	ldr	r3, [r3, #16]
 8009ad2:	eb03 020a 	add.w	r2, r3, sl
 8009ad6:	f853 700a 	ldr.w	r7, [r3, sl]
 8009ada:	7913      	ldrb	r3, [r2, #4]
 8009adc:	2b12      	cmp	r3, #18
 8009ade:	d018      	beq.n	8009b12 <get_longest_member_name+0x62>
 8009ae0:	f04f 0900 	mov.w	r9, #0
 8009ae4:	4638      	mov	r0, r7
 8009ae6:	f7f6 fb8b 	bl	8000200 <strlen>
 8009aea:	9b01      	ldr	r3, [sp, #4]
 8009aec:	4448      	add	r0, r9
 8009aee:	3001      	adds	r0, #1
 8009af0:	4283      	cmp	r3, r0
 8009af2:	f10b 0b01 	add.w	fp, fp, #1
 8009af6:	bf38      	it	cc
 8009af8:	4603      	movcc	r3, r0
 8009afa:	455d      	cmp	r5, fp
 8009afc:	9301      	str	r3, [sp, #4]
 8009afe:	f10a 0a3c 	add.w	sl, sl, #60	@ 0x3c
 8009b02:	d8e4      	bhi.n	8009ace <get_longest_member_name+0x1e>
 8009b04:	469b      	mov	fp, r3
 8009b06:	4658      	mov	r0, fp
 8009b08:	b019      	add	sp, #100	@ 0x64
 8009b0a:	ecbd 8b06 	vpop	{d8-d10}
 8009b0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b12:	4bbc      	ldr	r3, [pc, #752]	@ (8009e04 <get_longest_member_name+0x354>)
 8009b14:	68d0      	ldr	r0, [r2, #12]
 8009b16:	6819      	ldr	r1, [r3, #0]
 8009b18:	f002 fa32 	bl	800bf80 <get_message_typesupport_handle>
 8009b1c:	6843      	ldr	r3, [r0, #4]
 8009b1e:	9305      	str	r3, [sp, #20]
 8009b20:	689d      	ldr	r5, [r3, #8]
 8009b22:	2d00      	cmp	r5, #0
 8009b24:	f000 811a 	beq.w	8009d5c <get_longest_member_name+0x2ac>
 8009b28:	f04f 0800 	mov.w	r8, #0
 8009b2c:	ee08 7a10 	vmov	s16, r7
 8009b30:	f8cd a02c 	str.w	sl, [sp, #44]	@ 0x2c
 8009b34:	46c1      	mov	r9, r8
 8009b36:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8009b3a:	f8cd 8008 	str.w	r8, [sp, #8]
 8009b3e:	46c2      	mov	sl, r8
 8009b40:	9b05      	ldr	r3, [sp, #20]
 8009b42:	691b      	ldr	r3, [r3, #16]
 8009b44:	eb03 020a 	add.w	r2, r3, sl
 8009b48:	f853 300a 	ldr.w	r3, [r3, sl]
 8009b4c:	ee0a 3a10 	vmov	s20, r3
 8009b50:	7913      	ldrb	r3, [r2, #4]
 8009b52:	2b12      	cmp	r3, #18
 8009b54:	d01b      	beq.n	8009b8e <get_longest_member_name+0xde>
 8009b56:	2700      	movs	r7, #0
 8009b58:	ee1a 0a10 	vmov	r0, s20
 8009b5c:	f7f6 fb50 	bl	8000200 <strlen>
 8009b60:	9b02      	ldr	r3, [sp, #8]
 8009b62:	4438      	add	r0, r7
 8009b64:	3001      	adds	r0, #1
 8009b66:	4283      	cmp	r3, r0
 8009b68:	f109 0901 	add.w	r9, r9, #1
 8009b6c:	bf38      	it	cc
 8009b6e:	4603      	movcc	r3, r0
 8009b70:	45a9      	cmp	r9, r5
 8009b72:	9302      	str	r3, [sp, #8]
 8009b74:	f10a 0a3c 	add.w	sl, sl, #60	@ 0x3c
 8009b78:	d3e2      	bcc.n	8009b40 <get_longest_member_name+0x90>
 8009b7a:	4699      	mov	r9, r3
 8009b7c:	9b03      	ldr	r3, [sp, #12]
 8009b7e:	f8dd b028 	ldr.w	fp, [sp, #40]	@ 0x28
 8009b82:	f8dd a02c 	ldr.w	sl, [sp, #44]	@ 0x2c
 8009b86:	689d      	ldr	r5, [r3, #8]
 8009b88:	ee18 7a10 	vmov	r7, s16
 8009b8c:	e7aa      	b.n	8009ae4 <get_longest_member_name+0x34>
 8009b8e:	4b9d      	ldr	r3, [pc, #628]	@ (8009e04 <get_longest_member_name+0x354>)
 8009b90:	68d0      	ldr	r0, [r2, #12]
 8009b92:	6819      	ldr	r1, [r3, #0]
 8009b94:	f002 f9f4 	bl	800bf80 <get_message_typesupport_handle>
 8009b98:	6843      	ldr	r3, [r0, #4]
 8009b9a:	9307      	str	r3, [sp, #28]
 8009b9c:	689d      	ldr	r5, [r3, #8]
 8009b9e:	2d00      	cmp	r5, #0
 8009ba0:	f000 80a5 	beq.w	8009cee <get_longest_member_name+0x23e>
 8009ba4:	f04f 0b00 	mov.w	fp, #0
 8009ba8:	f8cd 9030 	str.w	r9, [sp, #48]	@ 0x30
 8009bac:	46d8      	mov	r8, fp
 8009bae:	f8cd b010 	str.w	fp, [sp, #16]
 8009bb2:	f8cd a034 	str.w	sl, [sp, #52]	@ 0x34
 8009bb6:	46d9      	mov	r9, fp
 8009bb8:	9b07      	ldr	r3, [sp, #28]
 8009bba:	691b      	ldr	r3, [r3, #16]
 8009bbc:	eb03 0209 	add.w	r2, r3, r9
 8009bc0:	f853 7009 	ldr.w	r7, [r3, r9]
 8009bc4:	7913      	ldrb	r3, [r2, #4]
 8009bc6:	2b12      	cmp	r3, #18
 8009bc8:	d019      	beq.n	8009bfe <get_longest_member_name+0x14e>
 8009bca:	f04f 0a00 	mov.w	sl, #0
 8009bce:	4638      	mov	r0, r7
 8009bd0:	f7f6 fb16 	bl	8000200 <strlen>
 8009bd4:	9b04      	ldr	r3, [sp, #16]
 8009bd6:	4450      	add	r0, sl
 8009bd8:	3001      	adds	r0, #1
 8009bda:	4283      	cmp	r3, r0
 8009bdc:	f108 0801 	add.w	r8, r8, #1
 8009be0:	bf38      	it	cc
 8009be2:	4603      	movcc	r3, r0
 8009be4:	45a8      	cmp	r8, r5
 8009be6:	9304      	str	r3, [sp, #16]
 8009be8:	f109 093c 	add.w	r9, r9, #60	@ 0x3c
 8009bec:	d3e4      	bcc.n	8009bb8 <get_longest_member_name+0x108>
 8009bee:	461f      	mov	r7, r3
 8009bf0:	9b05      	ldr	r3, [sp, #20]
 8009bf2:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
 8009bf6:	f8dd a034 	ldr.w	sl, [sp, #52]	@ 0x34
 8009bfa:	689d      	ldr	r5, [r3, #8]
 8009bfc:	e7ac      	b.n	8009b58 <get_longest_member_name+0xa8>
 8009bfe:	4b81      	ldr	r3, [pc, #516]	@ (8009e04 <get_longest_member_name+0x354>)
 8009c00:	68d0      	ldr	r0, [r2, #12]
 8009c02:	6819      	ldr	r1, [r3, #0]
 8009c04:	f002 f9bc 	bl	800bf80 <get_message_typesupport_handle>
 8009c08:	6843      	ldr	r3, [r0, #4]
 8009c0a:	9308      	str	r3, [sp, #32]
 8009c0c:	689d      	ldr	r5, [r3, #8]
 8009c0e:	2d00      	cmp	r5, #0
 8009c10:	f000 80f2 	beq.w	8009df8 <get_longest_member_name+0x348>
 8009c14:	f04f 0b00 	mov.w	fp, #0
 8009c18:	ee08 7a90 	vmov	s17, r7
 8009c1c:	f8cd 903c 	str.w	r9, [sp, #60]	@ 0x3c
 8009c20:	46da      	mov	sl, fp
 8009c22:	f8cd 8038 	str.w	r8, [sp, #56]	@ 0x38
 8009c26:	f8cd b018 	str.w	fp, [sp, #24]
 8009c2a:	46d9      	mov	r9, fp
 8009c2c:	9b08      	ldr	r3, [sp, #32]
 8009c2e:	691b      	ldr	r3, [r3, #16]
 8009c30:	eb03 020a 	add.w	r2, r3, sl
 8009c34:	f853 700a 	ldr.w	r7, [r3, sl]
 8009c38:	7913      	ldrb	r3, [r2, #4]
 8009c3a:	2b12      	cmp	r3, #18
 8009c3c:	d01b      	beq.n	8009c76 <get_longest_member_name+0x1c6>
 8009c3e:	f04f 0b00 	mov.w	fp, #0
 8009c42:	4638      	mov	r0, r7
 8009c44:	f7f6 fadc 	bl	8000200 <strlen>
 8009c48:	9b06      	ldr	r3, [sp, #24]
 8009c4a:	4458      	add	r0, fp
 8009c4c:	3001      	adds	r0, #1
 8009c4e:	4283      	cmp	r3, r0
 8009c50:	f109 0901 	add.w	r9, r9, #1
 8009c54:	bf38      	it	cc
 8009c56:	4603      	movcc	r3, r0
 8009c58:	45a9      	cmp	r9, r5
 8009c5a:	9306      	str	r3, [sp, #24]
 8009c5c:	f10a 0a3c 	add.w	sl, sl, #60	@ 0x3c
 8009c60:	d3e4      	bcc.n	8009c2c <get_longest_member_name+0x17c>
 8009c62:	469a      	mov	sl, r3
 8009c64:	9b07      	ldr	r3, [sp, #28]
 8009c66:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
 8009c6a:	f8dd 903c 	ldr.w	r9, [sp, #60]	@ 0x3c
 8009c6e:	689d      	ldr	r5, [r3, #8]
 8009c70:	ee18 7a90 	vmov	r7, s17
 8009c74:	e7ab      	b.n	8009bce <get_longest_member_name+0x11e>
 8009c76:	4b63      	ldr	r3, [pc, #396]	@ (8009e04 <get_longest_member_name+0x354>)
 8009c78:	68d0      	ldr	r0, [r2, #12]
 8009c7a:	6819      	ldr	r1, [r3, #0]
 8009c7c:	f002 f980 	bl	800bf80 <get_message_typesupport_handle>
 8009c80:	6843      	ldr	r3, [r0, #4]
 8009c82:	9309      	str	r3, [sp, #36]	@ 0x24
 8009c84:	689d      	ldr	r5, [r3, #8]
 8009c86:	2d00      	cmp	r5, #0
 8009c88:	f000 80b9 	beq.w	8009dfe <get_longest_member_name+0x34e>
 8009c8c:	f04f 0800 	mov.w	r8, #0
 8009c90:	ee09 7a10 	vmov	s18, r7
 8009c94:	e9cd 9a11 	strd	r9, sl, [sp, #68]	@ 0x44
 8009c98:	46c3      	mov	fp, r8
 8009c9a:	46c2      	mov	sl, r8
 8009c9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c9e:	691b      	ldr	r3, [r3, #16]
 8009ca0:	eb03 0208 	add.w	r2, r3, r8
 8009ca4:	f853 9008 	ldr.w	r9, [r3, r8]
 8009ca8:	7913      	ldrb	r3, [r2, #4]
 8009caa:	2b12      	cmp	r3, #18
 8009cac:	d022      	beq.n	8009cf4 <get_longest_member_name+0x244>
 8009cae:	2700      	movs	r7, #0
 8009cb0:	4648      	mov	r0, r9
 8009cb2:	f7f6 faa5 	bl	8000200 <strlen>
 8009cb6:	4438      	add	r0, r7
 8009cb8:	3001      	adds	r0, #1
 8009cba:	4582      	cmp	sl, r0
 8009cbc:	f10b 0b01 	add.w	fp, fp, #1
 8009cc0:	bf38      	it	cc
 8009cc2:	4682      	movcc	sl, r0
 8009cc4:	45ab      	cmp	fp, r5
 8009cc6:	f108 083c 	add.w	r8, r8, #60	@ 0x3c
 8009cca:	d3e7      	bcc.n	8009c9c <get_longest_member_name+0x1ec>
 8009ccc:	9b08      	ldr	r3, [sp, #32]
 8009cce:	f8dd 9044 	ldr.w	r9, [sp, #68]	@ 0x44
 8009cd2:	689d      	ldr	r5, [r3, #8]
 8009cd4:	46d3      	mov	fp, sl
 8009cd6:	ee19 7a10 	vmov	r7, s18
 8009cda:	f8dd a048 	ldr.w	sl, [sp, #72]	@ 0x48
 8009cde:	e7b0      	b.n	8009c42 <get_longest_member_name+0x192>
 8009ce0:	46ab      	mov	fp, r5
 8009ce2:	4658      	mov	r0, fp
 8009ce4:	b019      	add	sp, #100	@ 0x64
 8009ce6:	ecbd 8b06 	vpop	{d8-d10}
 8009cea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cee:	9b05      	ldr	r3, [sp, #20]
 8009cf0:	689d      	ldr	r5, [r3, #8]
 8009cf2:	e730      	b.n	8009b56 <get_longest_member_name+0xa6>
 8009cf4:	4b43      	ldr	r3, [pc, #268]	@ (8009e04 <get_longest_member_name+0x354>)
 8009cf6:	68d0      	ldr	r0, [r2, #12]
 8009cf8:	6819      	ldr	r1, [r3, #0]
 8009cfa:	f002 f941 	bl	800bf80 <get_message_typesupport_handle>
 8009cfe:	6843      	ldr	r3, [r0, #4]
 8009d00:	689e      	ldr	r6, [r3, #8]
 8009d02:	461a      	mov	r2, r3
 8009d04:	2e00      	cmp	r6, #0
 8009d06:	d07f      	beq.n	8009e08 <get_longest_member_name+0x358>
 8009d08:	e9cd ab13 	strd	sl, fp, [sp, #76]	@ 0x4c
 8009d0c:	2400      	movs	r4, #0
 8009d0e:	ee09 9a90 	vmov	s19, r9
 8009d12:	f8cd 8054 	str.w	r8, [sp, #84]	@ 0x54
 8009d16:	4627      	mov	r7, r4
 8009d18:	4691      	mov	r9, r2
 8009d1a:	46a0      	mov	r8, r4
 8009d1c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009d20:	191a      	adds	r2, r3, r4
 8009d22:	f853 b004 	ldr.w	fp, [r3, r4]
 8009d26:	7913      	ldrb	r3, [r2, #4]
 8009d28:	2b12      	cmp	r3, #18
 8009d2a:	d01a      	beq.n	8009d62 <get_longest_member_name+0x2b2>
 8009d2c:	2500      	movs	r5, #0
 8009d2e:	4658      	mov	r0, fp
 8009d30:	f7f6 fa66 	bl	8000200 <strlen>
 8009d34:	4405      	add	r5, r0
 8009d36:	3501      	adds	r5, #1
 8009d38:	42af      	cmp	r7, r5
 8009d3a:	f108 0801 	add.w	r8, r8, #1
 8009d3e:	bf38      	it	cc
 8009d40:	462f      	movcc	r7, r5
 8009d42:	45b0      	cmp	r8, r6
 8009d44:	f104 043c 	add.w	r4, r4, #60	@ 0x3c
 8009d48:	d3e8      	bcc.n	8009d1c <get_longest_member_name+0x26c>
 8009d4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d4c:	f8dd 8054 	ldr.w	r8, [sp, #84]	@ 0x54
 8009d50:	689d      	ldr	r5, [r3, #8]
 8009d52:	e9dd ab13 	ldrd	sl, fp, [sp, #76]	@ 0x4c
 8009d56:	ee19 9a90 	vmov	r9, s19
 8009d5a:	e7a9      	b.n	8009cb0 <get_longest_member_name+0x200>
 8009d5c:	9b03      	ldr	r3, [sp, #12]
 8009d5e:	689d      	ldr	r5, [r3, #8]
 8009d60:	e6be      	b.n	8009ae0 <get_longest_member_name+0x30>
 8009d62:	4b28      	ldr	r3, [pc, #160]	@ (8009e04 <get_longest_member_name+0x354>)
 8009d64:	68d0      	ldr	r0, [r2, #12]
 8009d66:	6819      	ldr	r1, [r3, #0]
 8009d68:	f002 f90a 	bl	800bf80 <get_message_typesupport_handle>
 8009d6c:	6843      	ldr	r3, [r0, #4]
 8009d6e:	9310      	str	r3, [sp, #64]	@ 0x40
 8009d70:	6899      	ldr	r1, [r3, #8]
 8009d72:	2900      	cmp	r1, #0
 8009d74:	d04b      	beq.n	8009e0e <get_longest_member_name+0x35e>
 8009d76:	691b      	ldr	r3, [r3, #16]
 8009d78:	9416      	str	r4, [sp, #88]	@ 0x58
 8009d7a:	2600      	movs	r6, #0
 8009d7c:	ee0a ba90 	vmov	s21, fp
 8009d80:	46b2      	mov	sl, r6
 8009d82:	46b3      	mov	fp, r6
 8009d84:	460c      	mov	r4, r1
 8009d86:	461d      	mov	r5, r3
 8009d88:	19aa      	adds	r2, r5, r6
 8009d8a:	59ab      	ldr	r3, [r5, r6]
 8009d8c:	f892 c004 	ldrb.w	ip, [r2, #4]
 8009d90:	f1bc 0f12 	cmp.w	ip, #18
 8009d94:	4618      	mov	r0, r3
 8009d96:	d012      	beq.n	8009dbe <get_longest_member_name+0x30e>
 8009d98:	f7f6 fa32 	bl	8000200 <strlen>
 8009d9c:	3001      	adds	r0, #1
 8009d9e:	4583      	cmp	fp, r0
 8009da0:	f10a 0a01 	add.w	sl, sl, #1
 8009da4:	bf38      	it	cc
 8009da6:	4683      	movcc	fp, r0
 8009da8:	45a2      	cmp	sl, r4
 8009daa:	f106 063c 	add.w	r6, r6, #60	@ 0x3c
 8009dae:	d3eb      	bcc.n	8009d88 <get_longest_member_name+0x2d8>
 8009db0:	465d      	mov	r5, fp
 8009db2:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8009db4:	f8d9 6008 	ldr.w	r6, [r9, #8]
 8009db8:	ee1a ba90 	vmov	fp, s21
 8009dbc:	e7b7      	b.n	8009d2e <get_longest_member_name+0x27e>
 8009dbe:	9317      	str	r3, [sp, #92]	@ 0x5c
 8009dc0:	4b10      	ldr	r3, [pc, #64]	@ (8009e04 <get_longest_member_name+0x354>)
 8009dc2:	68d0      	ldr	r0, [r2, #12]
 8009dc4:	6819      	ldr	r1, [r3, #0]
 8009dc6:	f002 f8db 	bl	800bf80 <get_message_typesupport_handle>
 8009dca:	6840      	ldr	r0, [r0, #4]
 8009dcc:	f7ff fe70 	bl	8009ab0 <get_longest_member_name>
 8009dd0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009dd2:	4605      	mov	r5, r0
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	f7f6 fa13 	bl	8000200 <strlen>
 8009dda:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009ddc:	4405      	add	r5, r0
 8009dde:	3501      	adds	r5, #1
 8009de0:	689c      	ldr	r4, [r3, #8]
 8009de2:	45ab      	cmp	fp, r5
 8009de4:	f10a 0a01 	add.w	sl, sl, #1
 8009de8:	bf38      	it	cc
 8009dea:	46ab      	movcc	fp, r5
 8009dec:	4554      	cmp	r4, sl
 8009dee:	f106 063c 	add.w	r6, r6, #60	@ 0x3c
 8009df2:	d9dd      	bls.n	8009db0 <get_longest_member_name+0x300>
 8009df4:	691d      	ldr	r5, [r3, #16]
 8009df6:	e7c7      	b.n	8009d88 <get_longest_member_name+0x2d8>
 8009df8:	9b07      	ldr	r3, [sp, #28]
 8009dfa:	689d      	ldr	r5, [r3, #8]
 8009dfc:	e6e5      	b.n	8009bca <get_longest_member_name+0x11a>
 8009dfe:	9b08      	ldr	r3, [sp, #32]
 8009e00:	689d      	ldr	r5, [r3, #8]
 8009e02:	e71c      	b.n	8009c3e <get_longest_member_name+0x18e>
 8009e04:	20000170 	.word	0x20000170
 8009e08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e0a:	689d      	ldr	r5, [r3, #8]
 8009e0c:	e74f      	b.n	8009cae <get_longest_member_name+0x1fe>
 8009e0e:	f8d9 6008 	ldr.w	r6, [r9, #8]
 8009e12:	e78b      	b.n	8009d2c <get_longest_member_name+0x27c>

08009e14 <micro_ros_utilities_get_dynamic_size>:
 8009e14:	b084      	sub	sp, #16
 8009e16:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e1a:	ed2d 8b02 	vpush	{d8}
 8009e1e:	b09f      	sub	sp, #124	@ 0x7c
 8009e20:	ac2b      	add	r4, sp, #172	@ 0xac
 8009e22:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8009e26:	4619      	mov	r1, r3
 8009e28:	2900      	cmp	r1, #0
 8009e2a:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8009e2c:	9c2f      	ldr	r4, [sp, #188]	@ 0xbc
 8009e2e:	941c      	str	r4, [sp, #112]	@ 0x70
 8009e30:	bf08      	it	eq
 8009e32:	2105      	moveq	r1, #5
 8009e34:	2a00      	cmp	r2, #0
 8009e36:	bf08      	it	eq
 8009e38:	2205      	moveq	r2, #5
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	bf08      	it	eq
 8009e3e:	2314      	moveq	r3, #20
 8009e40:	9318      	str	r3, [sp, #96]	@ 0x60
 8009e42:	4b78      	ldr	r3, [pc, #480]	@ (800a024 <micro_ros_utilities_get_dynamic_size+0x210>)
 8009e44:	911a      	str	r1, [sp, #104]	@ 0x68
 8009e46:	6819      	ldr	r1, [r3, #0]
 8009e48:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8009e4a:	931b      	str	r3, [sp, #108]	@ 0x6c
 8009e4c:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8009e4e:	931d      	str	r3, [sp, #116]	@ 0x74
 8009e50:	9219      	str	r2, [sp, #100]	@ 0x64
 8009e52:	f002 f895 	bl	800bf80 <get_message_typesupport_handle>
 8009e56:	f10d 0b54 	add.w	fp, sp, #84	@ 0x54
 8009e5a:	2300      	movs	r3, #0
 8009e5c:	f8d0 a004 	ldr.w	sl, [r0, #4]
 8009e60:	9315      	str	r3, [sp, #84]	@ 0x54
 8009e62:	e9cb 3301 	strd	r3, r3, [fp, #4]
 8009e66:	b9c4      	cbnz	r4, 8009e9a <micro_ros_utilities_get_dynamic_size+0x86>
 8009e68:	e89b 0007 	ldmia.w	fp, {r0, r1, r2}
 8009e6c:	ab04      	add	r3, sp, #16
 8009e6e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8009e72:	ab1e      	add	r3, sp, #120	@ 0x78
 8009e74:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 8009e78:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8009e7c:	ab18      	add	r3, sp, #96	@ 0x60
 8009e7e:	4621      	mov	r1, r4
 8009e80:	cb0c      	ldmia	r3, {r2, r3}
 8009e82:	4650      	mov	r0, sl
 8009e84:	f7ff fa10 	bl	80092a8 <handle_message_memory.constprop.4>
 8009e88:	4604      	mov	r4, r0
 8009e8a:	4620      	mov	r0, r4
 8009e8c:	b01f      	add	sp, #124	@ 0x7c
 8009e8e:	ecbd 8b02 	vpop	{d8}
 8009e92:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e96:	b004      	add	sp, #16
 8009e98:	4770      	bx	lr
 8009e9a:	f8da 5008 	ldr.w	r5, [sl, #8]
 8009e9e:	9508      	str	r5, [sp, #32]
 8009ea0:	b30d      	cbz	r5, 8009ee6 <micro_ros_utilities_get_dynamic_size+0xd2>
 8009ea2:	4698      	mov	r8, r3
 8009ea4:	9308      	str	r3, [sp, #32]
 8009ea6:	f8cd a024 	str.w	sl, [sp, #36]	@ 0x24
 8009eaa:	461f      	mov	r7, r3
 8009eac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009eae:	691b      	ldr	r3, [r3, #16]
 8009eb0:	eb03 0208 	add.w	r2, r3, r8
 8009eb4:	f853 6008 	ldr.w	r6, [r3, r8]
 8009eb8:	7913      	ldrb	r3, [r2, #4]
 8009eba:	2b12      	cmp	r3, #18
 8009ebc:	d030      	beq.n	8009f20 <micro_ros_utilities_get_dynamic_size+0x10c>
 8009ebe:	f04f 0900 	mov.w	r9, #0
 8009ec2:	4630      	mov	r0, r6
 8009ec4:	f7f6 f99c 	bl	8000200 <strlen>
 8009ec8:	9b08      	ldr	r3, [sp, #32]
 8009eca:	4448      	add	r0, r9
 8009ecc:	3001      	adds	r0, #1
 8009ece:	4283      	cmp	r3, r0
 8009ed0:	f107 0701 	add.w	r7, r7, #1
 8009ed4:	bf38      	it	cc
 8009ed6:	4603      	movcc	r3, r0
 8009ed8:	42af      	cmp	r7, r5
 8009eda:	9308      	str	r3, [sp, #32]
 8009edc:	f108 083c 	add.w	r8, r8, #60	@ 0x3c
 8009ee0:	d3e4      	bcc.n	8009eac <micro_ros_utilities_get_dynamic_size+0x98>
 8009ee2:	f8dd a024 	ldr.w	sl, [sp, #36]	@ 0x24
 8009ee6:	9908      	ldr	r1, [sp, #32]
 8009ee8:	ac10      	add	r4, sp, #64	@ 0x40
 8009eea:	4620      	mov	r0, r4
 8009eec:	f002 fdd8 	bl	800caa0 <micro_ros_string_utilities_init_with_size>
 8009ef0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8009ef4:	ab04      	add	r3, sp, #16
 8009ef6:	e88b 0007 	stmia.w	fp, {r0, r1, r2}
 8009efa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8009efe:	ab1e      	add	r3, sp, #120	@ 0x78
 8009f00:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 8009f04:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8009f08:	ac18      	add	r4, sp, #96	@ 0x60
 8009f0a:	e894 000c 	ldmia.w	r4, {r2, r3}
 8009f0e:	2100      	movs	r1, #0
 8009f10:	4650      	mov	r0, sl
 8009f12:	f7ff f9c9 	bl	80092a8 <handle_message_memory.constprop.4>
 8009f16:	4604      	mov	r4, r0
 8009f18:	4658      	mov	r0, fp
 8009f1a:	f002 fe1f 	bl	800cb5c <micro_ros_string_utilities_destroy>
 8009f1e:	e7b4      	b.n	8009e8a <micro_ros_utilities_get_dynamic_size+0x76>
 8009f20:	4b40      	ldr	r3, [pc, #256]	@ (800a024 <micro_ros_utilities_get_dynamic_size+0x210>)
 8009f22:	68d0      	ldr	r0, [r2, #12]
 8009f24:	6819      	ldr	r1, [r3, #0]
 8009f26:	f002 f82b 	bl	800bf80 <get_message_typesupport_handle>
 8009f2a:	6843      	ldr	r3, [r0, #4]
 8009f2c:	930a      	str	r3, [sp, #40]	@ 0x28
 8009f2e:	689d      	ldr	r5, [r3, #8]
 8009f30:	b33d      	cbz	r5, 8009f82 <micro_ros_utilities_get_dynamic_size+0x16e>
 8009f32:	f04f 0a00 	mov.w	sl, #0
 8009f36:	ee08 6a10 	vmov	s16, r6
 8009f3a:	970c      	str	r7, [sp, #48]	@ 0x30
 8009f3c:	46d1      	mov	r9, sl
 8009f3e:	4657      	mov	r7, sl
 8009f40:	f8cd 8034 	str.w	r8, [sp, #52]	@ 0x34
 8009f44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009f46:	691b      	ldr	r3, [r3, #16]
 8009f48:	eb03 020a 	add.w	r2, r3, sl
 8009f4c:	f853 800a 	ldr.w	r8, [r3, sl]
 8009f50:	7913      	ldrb	r3, [r2, #4]
 8009f52:	2b12      	cmp	r3, #18
 8009f54:	d018      	beq.n	8009f88 <micro_ros_utilities_get_dynamic_size+0x174>
 8009f56:	2400      	movs	r4, #0
 8009f58:	4640      	mov	r0, r8
 8009f5a:	f7f6 f951 	bl	8000200 <strlen>
 8009f5e:	4404      	add	r4, r0
 8009f60:	3401      	adds	r4, #1
 8009f62:	45a1      	cmp	r9, r4
 8009f64:	f107 0701 	add.w	r7, r7, #1
 8009f68:	bf38      	it	cc
 8009f6a:	46a1      	movcc	r9, r4
 8009f6c:	42af      	cmp	r7, r5
 8009f6e:	f10a 0a3c 	add.w	sl, sl, #60	@ 0x3c
 8009f72:	d3e7      	bcc.n	8009f44 <micro_ros_utilities_get_dynamic_size+0x130>
 8009f74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f76:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	@ 0x30
 8009f7a:	ee18 6a10 	vmov	r6, s16
 8009f7e:	689d      	ldr	r5, [r3, #8]
 8009f80:	e79f      	b.n	8009ec2 <micro_ros_utilities_get_dynamic_size+0xae>
 8009f82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f84:	689d      	ldr	r5, [r3, #8]
 8009f86:	e79a      	b.n	8009ebe <micro_ros_utilities_get_dynamic_size+0xaa>
 8009f88:	4b26      	ldr	r3, [pc, #152]	@ (800a024 <micro_ros_utilities_get_dynamic_size+0x210>)
 8009f8a:	68d0      	ldr	r0, [r2, #12]
 8009f8c:	6819      	ldr	r1, [r3, #0]
 8009f8e:	f001 fff7 	bl	800bf80 <get_message_typesupport_handle>
 8009f92:	6843      	ldr	r3, [r0, #4]
 8009f94:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009f96:	6899      	ldr	r1, [r3, #8]
 8009f98:	2900      	cmp	r1, #0
 8009f9a:	d040      	beq.n	800a01e <micro_ros_utilities_get_dynamic_size+0x20a>
 8009f9c:	691b      	ldr	r3, [r3, #16]
 8009f9e:	970e      	str	r7, [sp, #56]	@ 0x38
 8009fa0:	2500      	movs	r5, #0
 8009fa2:	ee08 8a90 	vmov	s17, r8
 8009fa6:	462e      	mov	r6, r5
 8009fa8:	46a8      	mov	r8, r5
 8009faa:	460f      	mov	r7, r1
 8009fac:	461c      	mov	r4, r3
 8009fae:	1962      	adds	r2, r4, r5
 8009fb0:	5963      	ldr	r3, [r4, r5]
 8009fb2:	f892 c004 	ldrb.w	ip, [r2, #4]
 8009fb6:	f1bc 0f12 	cmp.w	ip, #18
 8009fba:	4618      	mov	r0, r3
 8009fbc:	d012      	beq.n	8009fe4 <micro_ros_utilities_get_dynamic_size+0x1d0>
 8009fbe:	f7f6 f91f 	bl	8000200 <strlen>
 8009fc2:	3001      	adds	r0, #1
 8009fc4:	4580      	cmp	r8, r0
 8009fc6:	f106 0601 	add.w	r6, r6, #1
 8009fca:	bf38      	it	cc
 8009fcc:	4680      	movcc	r8, r0
 8009fce:	42be      	cmp	r6, r7
 8009fd0:	f105 053c 	add.w	r5, r5, #60	@ 0x3c
 8009fd4:	d3eb      	bcc.n	8009fae <micro_ros_utilities_get_dynamic_size+0x19a>
 8009fd6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009fd8:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 8009fda:	689d      	ldr	r5, [r3, #8]
 8009fdc:	4644      	mov	r4, r8
 8009fde:	ee18 8a90 	vmov	r8, s17
 8009fe2:	e7b9      	b.n	8009f58 <micro_ros_utilities_get_dynamic_size+0x144>
 8009fe4:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009fe6:	4b0f      	ldr	r3, [pc, #60]	@ (800a024 <micro_ros_utilities_get_dynamic_size+0x210>)
 8009fe8:	68d0      	ldr	r0, [r2, #12]
 8009fea:	6819      	ldr	r1, [r3, #0]
 8009fec:	f001 ffc8 	bl	800bf80 <get_message_typesupport_handle>
 8009ff0:	6840      	ldr	r0, [r0, #4]
 8009ff2:	f7ff fd5d 	bl	8009ab0 <get_longest_member_name>
 8009ff6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009ff8:	4604      	mov	r4, r0
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	f7f6 f900 	bl	8000200 <strlen>
 800a000:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a002:	4404      	add	r4, r0
 800a004:	3401      	adds	r4, #1
 800a006:	689f      	ldr	r7, [r3, #8]
 800a008:	45a0      	cmp	r8, r4
 800a00a:	f106 0601 	add.w	r6, r6, #1
 800a00e:	bf38      	it	cc
 800a010:	46a0      	movcc	r8, r4
 800a012:	42b7      	cmp	r7, r6
 800a014:	f105 053c 	add.w	r5, r5, #60	@ 0x3c
 800a018:	d9dd      	bls.n	8009fd6 <micro_ros_utilities_get_dynamic_size+0x1c2>
 800a01a:	691c      	ldr	r4, [r3, #16]
 800a01c:	e7c7      	b.n	8009fae <micro_ros_utilities_get_dynamic_size+0x19a>
 800a01e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a020:	689d      	ldr	r5, [r3, #8]
 800a022:	e798      	b.n	8009f56 <micro_ros_utilities_get_dynamic_size+0x142>
 800a024:	20000170 	.word	0x20000170

0800a028 <micro_ros_utilities_create_message_memory>:
 800a028:	b082      	sub	sp, #8
 800a02a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a02e:	ed2d 8b04 	vpush	{d8-d9}
 800a032:	b0a1      	sub	sp, #132	@ 0x84
 800a034:	ac2e      	add	r4, sp, #184	@ 0xb8
 800a036:	ae31      	add	r6, sp, #196	@ 0xc4
 800a038:	e884 000c 	stmia.w	r4, {r2, r3}
 800a03c:	4605      	mov	r5, r0
 800a03e:	468b      	mov	fp, r1
 800a040:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800a044:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800a048:	ab2e      	add	r3, sp, #184	@ 0xb8
 800a04a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a04c:	4628      	mov	r0, r5
 800a04e:	9c32      	ldr	r4, [sp, #200]	@ 0xc8
 800a050:	f7ff fee0 	bl	8009e14 <micro_ros_utilities_get_dynamic_size>
 800a054:	4603      	mov	r3, r0
 800a056:	930a      	str	r3, [sp, #40]	@ 0x28
 800a058:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 800a05a:	941e      	str	r4, [sp, #120]	@ 0x78
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	bf08      	it	eq
 800a060:	2305      	moveq	r3, #5
 800a062:	931c      	str	r3, [sp, #112]	@ 0x70
 800a064:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
 800a066:	2b00      	cmp	r3, #0
 800a068:	bf08      	it	eq
 800a06a:	2305      	moveq	r3, #5
 800a06c:	931b      	str	r3, [sp, #108]	@ 0x6c
 800a06e:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 800a070:	2b00      	cmp	r3, #0
 800a072:	bf08      	it	eq
 800a074:	2314      	moveq	r3, #20
 800a076:	931a      	str	r3, [sp, #104]	@ 0x68
 800a078:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 800a07a:	931d      	str	r3, [sp, #116]	@ 0x74
 800a07c:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
 800a07e:	931f      	str	r3, [sp, #124]	@ 0x7c
 800a080:	4b81      	ldr	r3, [pc, #516]	@ (800a288 <micro_ros_utilities_create_message_memory+0x260>)
 800a082:	4628      	mov	r0, r5
 800a084:	6819      	ldr	r1, [r3, #0]
 800a086:	f001 ff7b 	bl	800bf80 <get_message_typesupport_handle>
 800a08a:	f10d 085c 	add.w	r8, sp, #92	@ 0x5c
 800a08e:	2300      	movs	r3, #0
 800a090:	f8d0 a004 	ldr.w	sl, [r0, #4]
 800a094:	9317      	str	r3, [sp, #92]	@ 0x5c
 800a096:	e9c8 3301 	strd	r3, r3, [r8, #4]
 800a09a:	bb1c      	cbnz	r4, 800a0e4 <micro_ros_utilities_create_message_memory+0xbc>
 800a09c:	4621      	mov	r1, r4
 800a09e:	f8da 200c 	ldr.w	r2, [sl, #12]
 800a0a2:	4658      	mov	r0, fp
 800a0a4:	f00f fa4b 	bl	801953e <memset>
 800a0a8:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 800a0ac:	ab04      	add	r3, sp, #16
 800a0ae:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800a0b2:	ab20      	add	r3, sp, #128	@ 0x80
 800a0b4:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 800a0b8:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800a0bc:	ac1a      	add	r4, sp, #104	@ 0x68
 800a0be:	e894 000c 	ldmia.w	r4, {r2, r3}
 800a0c2:	4659      	mov	r1, fp
 800a0c4:	4650      	mov	r0, sl
 800a0c6:	f7ff fab9 	bl	800963c <handle_message_memory.constprop.2>
 800a0ca:	4604      	mov	r4, r0
 800a0cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a0ce:	1b18      	subs	r0, r3, r4
 800a0d0:	fab0 f080 	clz	r0, r0
 800a0d4:	0940      	lsrs	r0, r0, #5
 800a0d6:	b021      	add	sp, #132	@ 0x84
 800a0d8:	ecbd 8b04 	vpop	{d8-d9}
 800a0dc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0e0:	b002      	add	sp, #8
 800a0e2:	4770      	bx	lr
 800a0e4:	f8da 5008 	ldr.w	r5, [sl, #8]
 800a0e8:	9509      	str	r5, [sp, #36]	@ 0x24
 800a0ea:	b32d      	cbz	r5, 800a138 <micro_ros_utilities_create_message_memory+0x110>
 800a0ec:	ee08 ba10 	vmov	s16, fp
 800a0f0:	4699      	mov	r9, r3
 800a0f2:	9309      	str	r3, [sp, #36]	@ 0x24
 800a0f4:	461f      	mov	r7, r3
 800a0f6:	f8cd a02c 	str.w	sl, [sp, #44]	@ 0x2c
 800a0fa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a0fc:	691b      	ldr	r3, [r3, #16]
 800a0fe:	eb03 0209 	add.w	r2, r3, r9
 800a102:	f853 6009 	ldr.w	r6, [r3, r9]
 800a106:	7913      	ldrb	r3, [r2, #4]
 800a108:	2b12      	cmp	r3, #18
 800a10a:	d03a      	beq.n	800a182 <micro_ros_utilities_create_message_memory+0x15a>
 800a10c:	f04f 0a00 	mov.w	sl, #0
 800a110:	4630      	mov	r0, r6
 800a112:	f7f6 f875 	bl	8000200 <strlen>
 800a116:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a118:	4450      	add	r0, sl
 800a11a:	3001      	adds	r0, #1
 800a11c:	4283      	cmp	r3, r0
 800a11e:	f107 0701 	add.w	r7, r7, #1
 800a122:	bf38      	it	cc
 800a124:	4603      	movcc	r3, r0
 800a126:	42af      	cmp	r7, r5
 800a128:	9309      	str	r3, [sp, #36]	@ 0x24
 800a12a:	f109 093c 	add.w	r9, r9, #60	@ 0x3c
 800a12e:	d3e4      	bcc.n	800a0fa <micro_ros_utilities_create_message_memory+0xd2>
 800a130:	f8dd a02c 	ldr.w	sl, [sp, #44]	@ 0x2c
 800a134:	ee18 ba10 	vmov	fp, s16
 800a138:	ac12      	add	r4, sp, #72	@ 0x48
 800a13a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a13c:	4620      	mov	r0, r4
 800a13e:	f002 fcaf 	bl	800caa0 <micro_ros_string_utilities_init_with_size>
 800a142:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800a146:	e888 0007 	stmia.w	r8, {r0, r1, r2}
 800a14a:	f8da 200c 	ldr.w	r2, [sl, #12]
 800a14e:	2100      	movs	r1, #0
 800a150:	4658      	mov	r0, fp
 800a152:	f00f f9f4 	bl	801953e <memset>
 800a156:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 800a15a:	ab04      	add	r3, sp, #16
 800a15c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800a160:	ab20      	add	r3, sp, #128	@ 0x80
 800a162:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 800a166:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800a16a:	ac1a      	add	r4, sp, #104	@ 0x68
 800a16c:	e894 000c 	ldmia.w	r4, {r2, r3}
 800a170:	4659      	mov	r1, fp
 800a172:	4650      	mov	r0, sl
 800a174:	f7ff fa62 	bl	800963c <handle_message_memory.constprop.2>
 800a178:	4604      	mov	r4, r0
 800a17a:	4640      	mov	r0, r8
 800a17c:	f002 fcee 	bl	800cb5c <micro_ros_string_utilities_destroy>
 800a180:	e7a4      	b.n	800a0cc <micro_ros_utilities_create_message_memory+0xa4>
 800a182:	4b41      	ldr	r3, [pc, #260]	@ (800a288 <micro_ros_utilities_create_message_memory+0x260>)
 800a184:	68d0      	ldr	r0, [r2, #12]
 800a186:	6819      	ldr	r1, [r3, #0]
 800a188:	f001 fefa 	bl	800bf80 <get_message_typesupport_handle>
 800a18c:	6843      	ldr	r3, [r0, #4]
 800a18e:	930c      	str	r3, [sp, #48]	@ 0x30
 800a190:	689d      	ldr	r5, [r3, #8]
 800a192:	b33d      	cbz	r5, 800a1e4 <micro_ros_utilities_create_message_memory+0x1bc>
 800a194:	f04f 0b00 	mov.w	fp, #0
 800a198:	ee08 6a90 	vmov	s17, r6
 800a19c:	970e      	str	r7, [sp, #56]	@ 0x38
 800a19e:	46da      	mov	sl, fp
 800a1a0:	465f      	mov	r7, fp
 800a1a2:	f8cd 903c 	str.w	r9, [sp, #60]	@ 0x3c
 800a1a6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a1a8:	691b      	ldr	r3, [r3, #16]
 800a1aa:	eb03 020b 	add.w	r2, r3, fp
 800a1ae:	f853 600b 	ldr.w	r6, [r3, fp]
 800a1b2:	7913      	ldrb	r3, [r2, #4]
 800a1b4:	2b12      	cmp	r3, #18
 800a1b6:	d018      	beq.n	800a1ea <micro_ros_utilities_create_message_memory+0x1c2>
 800a1b8:	2400      	movs	r4, #0
 800a1ba:	4630      	mov	r0, r6
 800a1bc:	f7f6 f820 	bl	8000200 <strlen>
 800a1c0:	4404      	add	r4, r0
 800a1c2:	3401      	adds	r4, #1
 800a1c4:	45a2      	cmp	sl, r4
 800a1c6:	f107 0701 	add.w	r7, r7, #1
 800a1ca:	bf38      	it	cc
 800a1cc:	46a2      	movcc	sl, r4
 800a1ce:	42af      	cmp	r7, r5
 800a1d0:	f10b 0b3c 	add.w	fp, fp, #60	@ 0x3c
 800a1d4:	d3e7      	bcc.n	800a1a6 <micro_ros_utilities_create_message_memory+0x17e>
 800a1d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a1d8:	e9dd 790e 	ldrd	r7, r9, [sp, #56]	@ 0x38
 800a1dc:	ee18 6a90 	vmov	r6, s17
 800a1e0:	689d      	ldr	r5, [r3, #8]
 800a1e2:	e795      	b.n	800a110 <micro_ros_utilities_create_message_memory+0xe8>
 800a1e4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a1e6:	689d      	ldr	r5, [r3, #8]
 800a1e8:	e790      	b.n	800a10c <micro_ros_utilities_create_message_memory+0xe4>
 800a1ea:	4b27      	ldr	r3, [pc, #156]	@ (800a288 <micro_ros_utilities_create_message_memory+0x260>)
 800a1ec:	68d0      	ldr	r0, [r2, #12]
 800a1ee:	6819      	ldr	r1, [r3, #0]
 800a1f0:	f001 fec6 	bl	800bf80 <get_message_typesupport_handle>
 800a1f4:	6843      	ldr	r3, [r0, #4]
 800a1f6:	930d      	str	r3, [sp, #52]	@ 0x34
 800a1f8:	6899      	ldr	r1, [r3, #8]
 800a1fa:	2900      	cmp	r1, #0
 800a1fc:	d040      	beq.n	800a280 <micro_ros_utilities_create_message_memory+0x258>
 800a1fe:	691b      	ldr	r3, [r3, #16]
 800a200:	9710      	str	r7, [sp, #64]	@ 0x40
 800a202:	2500      	movs	r5, #0
 800a204:	ee09 6a10 	vmov	s18, r6
 800a208:	46a9      	mov	r9, r5
 800a20a:	462e      	mov	r6, r5
 800a20c:	460f      	mov	r7, r1
 800a20e:	461c      	mov	r4, r3
 800a210:	1962      	adds	r2, r4, r5
 800a212:	5963      	ldr	r3, [r4, r5]
 800a214:	f892 c004 	ldrb.w	ip, [r2, #4]
 800a218:	f1bc 0f12 	cmp.w	ip, #18
 800a21c:	4618      	mov	r0, r3
 800a21e:	d012      	beq.n	800a246 <micro_ros_utilities_create_message_memory+0x21e>
 800a220:	f7f5 ffee 	bl	8000200 <strlen>
 800a224:	3001      	adds	r0, #1
 800a226:	4286      	cmp	r6, r0
 800a228:	f109 0901 	add.w	r9, r9, #1
 800a22c:	bf38      	it	cc
 800a22e:	4606      	movcc	r6, r0
 800a230:	45b9      	cmp	r9, r7
 800a232:	f105 053c 	add.w	r5, r5, #60	@ 0x3c
 800a236:	d3eb      	bcc.n	800a210 <micro_ros_utilities_create_message_memory+0x1e8>
 800a238:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a23a:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 800a23c:	689d      	ldr	r5, [r3, #8]
 800a23e:	4634      	mov	r4, r6
 800a240:	ee19 6a10 	vmov	r6, s18
 800a244:	e7b9      	b.n	800a1ba <micro_ros_utilities_create_message_memory+0x192>
 800a246:	9311      	str	r3, [sp, #68]	@ 0x44
 800a248:	4b0f      	ldr	r3, [pc, #60]	@ (800a288 <micro_ros_utilities_create_message_memory+0x260>)
 800a24a:	68d0      	ldr	r0, [r2, #12]
 800a24c:	6819      	ldr	r1, [r3, #0]
 800a24e:	f001 fe97 	bl	800bf80 <get_message_typesupport_handle>
 800a252:	6840      	ldr	r0, [r0, #4]
 800a254:	f7ff fc2c 	bl	8009ab0 <get_longest_member_name>
 800a258:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a25a:	4604      	mov	r4, r0
 800a25c:	4618      	mov	r0, r3
 800a25e:	f7f5 ffcf 	bl	8000200 <strlen>
 800a262:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a264:	4404      	add	r4, r0
 800a266:	3401      	adds	r4, #1
 800a268:	689f      	ldr	r7, [r3, #8]
 800a26a:	42a6      	cmp	r6, r4
 800a26c:	f109 0901 	add.w	r9, r9, #1
 800a270:	bf38      	it	cc
 800a272:	4626      	movcc	r6, r4
 800a274:	454f      	cmp	r7, r9
 800a276:	f105 053c 	add.w	r5, r5, #60	@ 0x3c
 800a27a:	d9dd      	bls.n	800a238 <micro_ros_utilities_create_message_memory+0x210>
 800a27c:	691c      	ldr	r4, [r3, #16]
 800a27e:	e7c7      	b.n	800a210 <micro_ros_utilities_create_message_memory+0x1e8>
 800a280:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a282:	689d      	ldr	r5, [r3, #8]
 800a284:	e798      	b.n	800a1b8 <micro_ros_utilities_create_message_memory+0x190>
 800a286:	bf00      	nop
 800a288:	20000170 	.word	0x20000170

0800a28c <rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses>:
 800a28c:	4b04      	ldr	r3, [pc, #16]	@ (800a2a0 <rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses+0x14>)
 800a28e:	681a      	ldr	r2, [r3, #0]
 800a290:	b10a      	cbz	r2, 800a296 <rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses+0xa>
 800a292:	4803      	ldr	r0, [pc, #12]	@ (800a2a0 <rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses+0x14>)
 800a294:	4770      	bx	lr
 800a296:	4a03      	ldr	r2, [pc, #12]	@ (800a2a4 <rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses+0x18>)
 800a298:	4801      	ldr	r0, [pc, #4]	@ (800a2a0 <rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses+0x14>)
 800a29a:	6812      	ldr	r2, [r2, #0]
 800a29c:	601a      	str	r2, [r3, #0]
 800a29e:	4770      	bx	lr
 800a2a0:	200000dc 	.word	0x200000dc
 800a2a4:	2000016c 	.word	0x2000016c

0800a2a8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses>:
 800a2a8:	4a02      	ldr	r2, [pc, #8]	@ (800a2b4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses+0xc>)
 800a2aa:	4b03      	ldr	r3, [pc, #12]	@ (800a2b8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses+0x10>)
 800a2ac:	6812      	ldr	r2, [r2, #0]
 800a2ae:	601a      	str	r2, [r3, #0]
 800a2b0:	4770      	bx	lr
 800a2b2:	bf00      	nop
 800a2b4:	2000016c 	.word	0x2000016c
 800a2b8:	200000dc 	.word	0x200000dc

0800a2bc <nereo_interfaces__msg__ThrusterStatuses__rosidl_typesupport_introspection_c__size_function__ThrusterStatuses__thrusters_pwms>:
 800a2bc:	2008      	movs	r0, #8
 800a2be:	4770      	bx	lr

0800a2c0 <nereo_interfaces__msg__ThrusterStatuses__rosidl_typesupport_introspection_c__get_const_function__ThrusterStatuses__thrusters_pwms>:
 800a2c0:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 800a2c4:	4770      	bx	lr
 800a2c6:	bf00      	nop

0800a2c8 <nereo_interfaces__msg__ThrusterStatuses__rosidl_typesupport_introspection_c__fetch_function__ThrusterStatuses__thrusters_pwms>:
 800a2c8:	f830 3011 	ldrh.w	r3, [r0, r1, lsl #1]
 800a2cc:	8013      	strh	r3, [r2, #0]
 800a2ce:	4770      	bx	lr

0800a2d0 <nereo_interfaces__msg__ThrusterStatuses__rosidl_typesupport_introspection_c__assign_function__ThrusterStatuses__thrusters_pwms>:
 800a2d0:	8813      	ldrh	r3, [r2, #0]
 800a2d2:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 800a2d6:	4770      	bx	lr

0800a2d8 <nereo_interfaces__msg__ThrusterStatuses__rosidl_typesupport_introspection_c__ThrusterStatuses_init_function>:
 800a2d8:	f007 bd3a 	b.w	8011d50 <nereo_interfaces__msg__ThrusterStatuses__init>

0800a2dc <nereo_interfaces__msg__ThrusterStatuses__rosidl_typesupport_introspection_c__ThrusterStatuses_fini_function>:
 800a2dc:	f007 bd3c 	b.w	8011d58 <nereo_interfaces__msg__ThrusterStatuses__fini>

0800a2e0 <nereo_interfaces__msg__ThrusterStatuses__rosidl_typesupport_introspection_c__get_function__ThrusterStatuses__thrusters_pwms>:
 800a2e0:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 800a2e4:	4770      	bx	lr
 800a2e6:	bf00      	nop

0800a2e8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses>:
 800a2e8:	4b04      	ldr	r3, [pc, #16]	@ (800a2fc <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses+0x14>)
 800a2ea:	681a      	ldr	r2, [r3, #0]
 800a2ec:	b10a      	cbz	r2, 800a2f2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses+0xa>
 800a2ee:	4803      	ldr	r0, [pc, #12]	@ (800a2fc <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses+0x14>)
 800a2f0:	4770      	bx	lr
 800a2f2:	4a03      	ldr	r2, [pc, #12]	@ (800a300 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses+0x18>)
 800a2f4:	4801      	ldr	r0, [pc, #4]	@ (800a2fc <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses+0x14>)
 800a2f6:	6812      	ldr	r2, [r2, #0]
 800a2f8:	601a      	str	r2, [r3, #0]
 800a2fa:	4770      	bx	lr
 800a2fc:	20000124 	.word	0x20000124
 800a300:	20000170 	.word	0x20000170

0800a304 <_ThrusterStatuses__max_serialized_size>:
 800a304:	b508      	push	{r3, lr}
 800a306:	2102      	movs	r1, #2
 800a308:	2000      	movs	r0, #0
 800a30a:	f004 fd81 	bl	800ee10 <ucdr_alignment>
 800a30e:	3010      	adds	r0, #16
 800a310:	bd08      	pop	{r3, pc}
 800a312:	bf00      	nop

0800a314 <get_serialized_size_nereo_interfaces__msg__ThrusterStatuses>:
 800a314:	b138      	cbz	r0, 800a326 <get_serialized_size_nereo_interfaces__msg__ThrusterStatuses+0x12>
 800a316:	b508      	push	{r3, lr}
 800a318:	460b      	mov	r3, r1
 800a31a:	4618      	mov	r0, r3
 800a31c:	2102      	movs	r1, #2
 800a31e:	f004 fd77 	bl	800ee10 <ucdr_alignment>
 800a322:	3010      	adds	r0, #16
 800a324:	bd08      	pop	{r3, pc}
 800a326:	4770      	bx	lr

0800a328 <_ThrusterStatuses__cdr_deserialize>:
 800a328:	b111      	cbz	r1, 800a330 <_ThrusterStatuses__cdr_deserialize+0x8>
 800a32a:	2208      	movs	r2, #8
 800a32c:	f002 bda8 	b.w	800ce80 <ucdr_deserialize_array_uint16_t>
 800a330:	4608      	mov	r0, r1
 800a332:	4770      	bx	lr

0800a334 <_ThrusterStatuses__cdr_serialize>:
 800a334:	468c      	mov	ip, r1
 800a336:	4601      	mov	r1, r0
 800a338:	b118      	cbz	r0, 800a342 <_ThrusterStatuses__cdr_serialize+0xe>
 800a33a:	2208      	movs	r2, #8
 800a33c:	4660      	mov	r0, ip
 800a33e:	f002 bd49 	b.w	800cdd4 <ucdr_serialize_array_uint16_t>
 800a342:	4770      	bx	lr

0800a344 <_ThrusterStatuses__get_serialized_size>:
 800a344:	b130      	cbz	r0, 800a354 <_ThrusterStatuses__get_serialized_size+0x10>
 800a346:	b508      	push	{r3, lr}
 800a348:	2102      	movs	r1, #2
 800a34a:	2000      	movs	r0, #0
 800a34c:	f004 fd60 	bl	800ee10 <ucdr_alignment>
 800a350:	3010      	adds	r0, #16
 800a352:	bd08      	pop	{r3, pc}
 800a354:	4770      	bx	lr
 800a356:	bf00      	nop

0800a358 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses>:
 800a358:	4800      	ldr	r0, [pc, #0]	@ (800a35c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses+0x4>)
 800a35a:	4770      	bx	lr
 800a35c:	20000130 	.word	0x20000130

0800a360 <rcl_get_zero_initialized_publisher>:
 800a360:	4b01      	ldr	r3, [pc, #4]	@ (800a368 <rcl_get_zero_initialized_publisher+0x8>)
 800a362:	6818      	ldr	r0, [r3, #0]
 800a364:	4770      	bx	lr
 800a366:	bf00      	nop
 800a368:	0801ab84 	.word	0x0801ab84

0800a36c <rcl_publisher_init>:
 800a36c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a370:	b088      	sub	sp, #32
 800a372:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800a374:	2d00      	cmp	r5, #0
 800a376:	d069      	beq.n	800a44c <rcl_publisher_init+0xe0>
 800a378:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 800a37c:	4604      	mov	r4, r0
 800a37e:	4648      	mov	r0, r9
 800a380:	460e      	mov	r6, r1
 800a382:	4690      	mov	r8, r2
 800a384:	461f      	mov	r7, r3
 800a386:	f001 f847 	bl	800b418 <rcutils_allocator_is_valid>
 800a38a:	2800      	cmp	r0, #0
 800a38c:	d05e      	beq.n	800a44c <rcl_publisher_init+0xe0>
 800a38e:	2c00      	cmp	r4, #0
 800a390:	d05c      	beq.n	800a44c <rcl_publisher_init+0xe0>
 800a392:	f8d4 a000 	ldr.w	sl, [r4]
 800a396:	f1ba 0f00 	cmp.w	sl, #0
 800a39a:	d004      	beq.n	800a3a6 <rcl_publisher_init+0x3a>
 800a39c:	2764      	movs	r7, #100	@ 0x64
 800a39e:	4638      	mov	r0, r7
 800a3a0:	b008      	add	sp, #32
 800a3a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3a6:	4630      	mov	r0, r6
 800a3a8:	f008 f960 	bl	801266c <rcl_node_is_valid>
 800a3ac:	2800      	cmp	r0, #0
 800a3ae:	d052      	beq.n	800a456 <rcl_publisher_init+0xea>
 800a3b0:	f1b8 0f00 	cmp.w	r8, #0
 800a3b4:	d04a      	beq.n	800a44c <rcl_publisher_init+0xe0>
 800a3b6:	2f00      	cmp	r7, #0
 800a3b8:	d048      	beq.n	800a44c <rcl_publisher_init+0xe0>
 800a3ba:	e9cd aa03 	strd	sl, sl, [sp, #12]
 800a3be:	aa07      	add	r2, sp, #28
 800a3c0:	9205      	str	r2, [sp, #20]
 800a3c2:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 800a3c6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a3ca:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800a3ce:	f8cd a01c 	str.w	sl, [sp, #28]
 800a3d2:	4639      	mov	r1, r7
 800a3d4:	e899 000c 	ldmia.w	r9, {r2, r3}
 800a3d8:	4630      	mov	r0, r6
 800a3da:	f008 f99b 	bl	8012714 <rcl_node_resolve_name>
 800a3de:	4607      	mov	r7, r0
 800a3e0:	2800      	cmp	r0, #0
 800a3e2:	d14f      	bne.n	800a484 <rcl_publisher_init+0x118>
 800a3e4:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 800a3e6:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800a3e8:	20c8      	movs	r0, #200	@ 0xc8
 800a3ea:	4798      	blx	r3
 800a3ec:	6020      	str	r0, [r4, #0]
 800a3ee:	2800      	cmp	r0, #0
 800a3f0:	d04e      	beq.n	800a490 <rcl_publisher_init+0x124>
 800a3f2:	4630      	mov	r0, r6
 800a3f4:	f008 f95c 	bl	80126b0 <rcl_node_get_rmw_handle>
 800a3f8:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800a3fc:	9300      	str	r3, [sp, #0]
 800a3fe:	9a07      	ldr	r2, [sp, #28]
 800a400:	6827      	ldr	r7, [r4, #0]
 800a402:	462b      	mov	r3, r5
 800a404:	4641      	mov	r1, r8
 800a406:	f001 f915 	bl	800b634 <rmw_create_publisher>
 800a40a:	6823      	ldr	r3, [r4, #0]
 800a40c:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
 800a410:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800a414:	b370      	cbz	r0, 800a474 <rcl_publisher_init+0x108>
 800a416:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 800a41a:	f001 f9e9 	bl	800b7f0 <rmw_publisher_get_actual_qos>
 800a41e:	6823      	ldr	r3, [r4, #0]
 800a420:	4607      	mov	r7, r0
 800a422:	b9d0      	cbnz	r0, 800a45a <rcl_publisher_init+0xee>
 800a424:	f895 2048 	ldrb.w	r2, [r5, #72]	@ 0x48
 800a428:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800a42c:	4629      	mov	r1, r5
 800a42e:	2270      	movs	r2, #112	@ 0x70
 800a430:	4618      	mov	r0, r3
 800a432:	f00f f8ec 	bl	801960e <memcpy>
 800a436:	6832      	ldr	r2, [r6, #0]
 800a438:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 800a43c:	9807      	ldr	r0, [sp, #28]
 800a43e:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 800a440:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800a442:	4798      	blx	r3
 800a444:	4638      	mov	r0, r7
 800a446:	b008      	add	sp, #32
 800a448:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a44c:	270b      	movs	r7, #11
 800a44e:	4638      	mov	r0, r7
 800a450:	b008      	add	sp, #32
 800a452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a456:	27c8      	movs	r7, #200	@ 0xc8
 800a458:	e7a1      	b.n	800a39e <rcl_publisher_init+0x32>
 800a45a:	b18b      	cbz	r3, 800a480 <rcl_publisher_init+0x114>
 800a45c:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800a460:	b142      	cbz	r2, 800a474 <rcl_publisher_init+0x108>
 800a462:	4630      	mov	r0, r6
 800a464:	f008 f924 	bl	80126b0 <rcl_node_get_rmw_handle>
 800a468:	6823      	ldr	r3, [r4, #0]
 800a46a:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 800a46e:	f001 f9cf 	bl	800b810 <rmw_destroy_publisher>
 800a472:	6823      	ldr	r3, [r4, #0]
 800a474:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 800a476:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800a478:	4618      	mov	r0, r3
 800a47a:	4790      	blx	r2
 800a47c:	2300      	movs	r3, #0
 800a47e:	6023      	str	r3, [r4, #0]
 800a480:	2701      	movs	r7, #1
 800a482:	e7db      	b.n	800a43c <rcl_publisher_init+0xd0>
 800a484:	2867      	cmp	r0, #103	@ 0x67
 800a486:	d0d9      	beq.n	800a43c <rcl_publisher_init+0xd0>
 800a488:	2869      	cmp	r0, #105	@ 0x69
 800a48a:	d003      	beq.n	800a494 <rcl_publisher_init+0x128>
 800a48c:	280a      	cmp	r0, #10
 800a48e:	d1f7      	bne.n	800a480 <rcl_publisher_init+0x114>
 800a490:	270a      	movs	r7, #10
 800a492:	e7d3      	b.n	800a43c <rcl_publisher_init+0xd0>
 800a494:	2767      	movs	r7, #103	@ 0x67
 800a496:	e7d1      	b.n	800a43c <rcl_publisher_init+0xd0>

0800a498 <rcl_publisher_get_default_options>:
 800a498:	b570      	push	{r4, r5, r6, lr}
 800a49a:	4d14      	ldr	r5, [pc, #80]	@ (800a4ec <rcl_publisher_get_default_options+0x54>)
 800a49c:	4914      	ldr	r1, [pc, #80]	@ (800a4f0 <rcl_publisher_get_default_options+0x58>)
 800a49e:	b088      	sub	sp, #32
 800a4a0:	4604      	mov	r4, r0
 800a4a2:	2250      	movs	r2, #80	@ 0x50
 800a4a4:	4628      	mov	r0, r5
 800a4a6:	f00f f8b2 	bl	801960e <memcpy>
 800a4aa:	a802      	add	r0, sp, #8
 800a4ac:	f000 ffa6 	bl	800b3fc <rcutils_get_default_allocator>
 800a4b0:	f10d 0c08 	add.w	ip, sp, #8
 800a4b4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a4b8:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 800a4bc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800a4c0:	466e      	mov	r6, sp
 800a4c2:	f8dc 3000 	ldr.w	r3, [ip]
 800a4c6:	f8ce 3000 	str.w	r3, [lr]
 800a4ca:	4630      	mov	r0, r6
 800a4cc:	f001 f834 	bl	800b538 <rmw_get_default_publisher_options>
 800a4d0:	e896 0003 	ldmia.w	r6, {r0, r1}
 800a4d4:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800a4d8:	e883 0003 	stmia.w	r3, {r0, r1}
 800a4dc:	2270      	movs	r2, #112	@ 0x70
 800a4de:	4629      	mov	r1, r5
 800a4e0:	4620      	mov	r0, r4
 800a4e2:	f00f f894 	bl	801960e <memcpy>
 800a4e6:	4620      	mov	r0, r4
 800a4e8:	b008      	add	sp, #32
 800a4ea:	bd70      	pop	{r4, r5, r6, pc}
 800a4ec:	200109f0 	.word	0x200109f0
 800a4f0:	0801ab88 	.word	0x0801ab88

0800a4f4 <rcl_publish>:
 800a4f4:	b1f8      	cbz	r0, 800a536 <rcl_publish+0x42>
 800a4f6:	6803      	ldr	r3, [r0, #0]
 800a4f8:	b570      	push	{r4, r5, r6, lr}
 800a4fa:	4604      	mov	r4, r0
 800a4fc:	b1b3      	cbz	r3, 800a52c <rcl_publish+0x38>
 800a4fe:	4616      	mov	r6, r2
 800a500:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800a504:	b192      	cbz	r2, 800a52c <rcl_publish+0x38>
 800a506:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800a50a:	460d      	mov	r5, r1
 800a50c:	f007 fcd4 	bl	8011eb8 <rcl_context_is_valid>
 800a510:	b160      	cbz	r0, 800a52c <rcl_publish+0x38>
 800a512:	6823      	ldr	r3, [r4, #0]
 800a514:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800a518:	b140      	cbz	r0, 800a52c <rcl_publish+0x38>
 800a51a:	b155      	cbz	r5, 800a532 <rcl_publish+0x3e>
 800a51c:	4632      	mov	r2, r6
 800a51e:	4629      	mov	r1, r5
 800a520:	f001 f828 	bl	800b574 <rmw_publish>
 800a524:	3800      	subs	r0, #0
 800a526:	bf18      	it	ne
 800a528:	2001      	movne	r0, #1
 800a52a:	bd70      	pop	{r4, r5, r6, pc}
 800a52c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800a530:	bd70      	pop	{r4, r5, r6, pc}
 800a532:	200b      	movs	r0, #11
 800a534:	bd70      	pop	{r4, r5, r6, pc}
 800a536:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800a53a:	4770      	bx	lr

0800a53c <rcl_publisher_is_valid>:
 800a53c:	b1a0      	cbz	r0, 800a568 <rcl_publisher_is_valid+0x2c>
 800a53e:	6803      	ldr	r3, [r0, #0]
 800a540:	b510      	push	{r4, lr}
 800a542:	4604      	mov	r4, r0
 800a544:	b173      	cbz	r3, 800a564 <rcl_publisher_is_valid+0x28>
 800a546:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800a54a:	b15a      	cbz	r2, 800a564 <rcl_publisher_is_valid+0x28>
 800a54c:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800a550:	f007 fcb2 	bl	8011eb8 <rcl_context_is_valid>
 800a554:	b130      	cbz	r0, 800a564 <rcl_publisher_is_valid+0x28>
 800a556:	6823      	ldr	r3, [r4, #0]
 800a558:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800a55c:	3800      	subs	r0, #0
 800a55e:	bf18      	it	ne
 800a560:	2001      	movne	r0, #1
 800a562:	bd10      	pop	{r4, pc}
 800a564:	2000      	movs	r0, #0
 800a566:	bd10      	pop	{r4, pc}
 800a568:	2000      	movs	r0, #0
 800a56a:	4770      	bx	lr

0800a56c <rcl_publisher_is_valid_except_context>:
 800a56c:	b130      	cbz	r0, 800a57c <rcl_publisher_is_valid_except_context+0x10>
 800a56e:	6800      	ldr	r0, [r0, #0]
 800a570:	b120      	cbz	r0, 800a57c <rcl_publisher_is_valid_except_context+0x10>
 800a572:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 800a576:	3800      	subs	r0, #0
 800a578:	bf18      	it	ne
 800a57a:	2001      	movne	r0, #1
 800a57c:	4770      	bx	lr
 800a57e:	bf00      	nop

0800a580 <_rclc_check_for_new_data>:
 800a580:	2800      	cmp	r0, #0
 800a582:	d046      	beq.n	800a612 <_rclc_check_for_new_data+0x92>
 800a584:	b510      	push	{r4, lr}
 800a586:	7802      	ldrb	r2, [r0, #0]
 800a588:	b084      	sub	sp, #16
 800a58a:	4603      	mov	r3, r0
 800a58c:	2a0a      	cmp	r2, #10
 800a58e:	d842      	bhi.n	800a616 <_rclc_check_for_new_data+0x96>
 800a590:	e8df f002 	tbb	[pc, r2]
 800a594:	14181212 	.word	0x14181212
 800a598:	06060614 	.word	0x06060614
 800a59c:	2e1a      	.short	0x2e1a
 800a59e:	16          	.byte	0x16
 800a59f:	00          	.byte	0x00
 800a5a0:	6a0a      	ldr	r2, [r1, #32]
 800a5a2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800a5a4:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800a5a8:	2000      	movs	r0, #0
 800a5aa:	1a12      	subs	r2, r2, r0
 800a5ac:	bf18      	it	ne
 800a5ae:	2201      	movne	r2, #1
 800a5b0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800a5b4:	b004      	add	sp, #16
 800a5b6:	bd10      	pop	{r4, pc}
 800a5b8:	680a      	ldr	r2, [r1, #0]
 800a5ba:	e7f2      	b.n	800a5a2 <_rclc_check_for_new_data+0x22>
 800a5bc:	698a      	ldr	r2, [r1, #24]
 800a5be:	e7f0      	b.n	800a5a2 <_rclc_check_for_new_data+0x22>
 800a5c0:	688a      	ldr	r2, [r1, #8]
 800a5c2:	e7ee      	b.n	800a5a2 <_rclc_check_for_new_data+0x22>
 800a5c4:	690a      	ldr	r2, [r1, #16]
 800a5c6:	e7ec      	b.n	800a5a2 <_rclc_check_for_new_data+0x22>
 800a5c8:	685c      	ldr	r4, [r3, #4]
 800a5ca:	4608      	mov	r0, r1
 800a5cc:	f104 0244 	add.w	r2, r4, #68	@ 0x44
 800a5d0:	f104 0143 	add.w	r1, r4, #67	@ 0x43
 800a5d4:	f104 0342 	add.w	r3, r4, #66	@ 0x42
 800a5d8:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800a5dc:	9300      	str	r3, [sp, #0]
 800a5de:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 800a5e2:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 800a5e6:	f104 0110 	add.w	r1, r4, #16
 800a5ea:	f009 fd61 	bl	80140b0 <rcl_action_client_wait_set_get_entities_ready>
 800a5ee:	e7e1      	b.n	800a5b4 <_rclc_check_for_new_data+0x34>
 800a5f0:	685c      	ldr	r4, [r3, #4]
 800a5f2:	f104 0223 	add.w	r2, r4, #35	@ 0x23
 800a5f6:	f104 0322 	add.w	r3, r4, #34	@ 0x22
 800a5fa:	e9cd 3200 	strd	r3, r2, [sp]
 800a5fe:	4608      	mov	r0, r1
 800a600:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 800a604:	f104 0220 	add.w	r2, r4, #32
 800a608:	f104 0110 	add.w	r1, r4, #16
 800a60c:	f009 ff68 	bl	80144e0 <rcl_action_server_wait_set_get_entities_ready>
 800a610:	e7d0      	b.n	800a5b4 <_rclc_check_for_new_data+0x34>
 800a612:	200b      	movs	r0, #11
 800a614:	4770      	bx	lr
 800a616:	2001      	movs	r0, #1
 800a618:	e7cc      	b.n	800a5b4 <_rclc_check_for_new_data+0x34>
 800a61a:	bf00      	nop

0800a61c <_rclc_take_new_data>:
 800a61c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a61e:	b09b      	sub	sp, #108	@ 0x6c
 800a620:	2800      	cmp	r0, #0
 800a622:	f000 8088 	beq.w	800a736 <_rclc_take_new_data+0x11a>
 800a626:	7803      	ldrb	r3, [r0, #0]
 800a628:	4604      	mov	r4, r0
 800a62a:	2b0a      	cmp	r3, #10
 800a62c:	f200 8167 	bhi.w	800a8fe <_rclc_take_new_data+0x2e2>
 800a630:	e8df f003 	tbb	[pc, r3]
 800a634:	44152d2d 	.word	0x44152d2d
 800a638:	19191944 	.word	0x19191944
 800a63c:	065a      	.short	0x065a
 800a63e:	15          	.byte	0x15
 800a63f:	00          	.byte	0x00
 800a640:	6840      	ldr	r0, [r0, #4]
 800a642:	f890 3020 	ldrb.w	r3, [r0, #32]
 800a646:	2b00      	cmp	r3, #0
 800a648:	f040 80b2 	bne.w	800a7b0 <_rclc_take_new_data+0x194>
 800a64c:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 800a650:	2b00      	cmp	r3, #0
 800a652:	f040 80e4 	bne.w	800a81e <_rclc_take_new_data+0x202>
 800a656:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d16f      	bne.n	800a73e <_rclc_take_new_data+0x122>
 800a65e:	2500      	movs	r5, #0
 800a660:	4628      	mov	r0, r5
 800a662:	b01b      	add	sp, #108	@ 0x6c
 800a664:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a666:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800a668:	6a0b      	ldr	r3, [r1, #32]
 800a66a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d0f5      	beq.n	800a65e <_rclc_take_new_data+0x42>
 800a672:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800a676:	f104 0110 	add.w	r1, r4, #16
 800a67a:	f008 f9f5 	bl	8012a68 <rcl_take_request>
 800a67e:	4605      	mov	r5, r0
 800a680:	2800      	cmp	r0, #0
 800a682:	d0ec      	beq.n	800a65e <_rclc_take_new_data+0x42>
 800a684:	f240 2359 	movw	r3, #601	@ 0x259
 800a688:	4298      	cmp	r0, r3
 800a68a:	d013      	beq.n	800a6b4 <_rclc_take_new_data+0x98>
 800a68c:	e029      	b.n	800a6e2 <_rclc_take_new_data+0xc6>
 800a68e:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800a690:	680b      	ldr	r3, [r1, #0]
 800a692:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a696:	2b00      	cmp	r3, #0
 800a698:	d0e1      	beq.n	800a65e <_rclc_take_new_data+0x42>
 800a69a:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800a69e:	2300      	movs	r3, #0
 800a6a0:	aa0a      	add	r2, sp, #40	@ 0x28
 800a6a2:	f008 fb1f 	bl	8012ce4 <rcl_take>
 800a6a6:	4605      	mov	r5, r0
 800a6a8:	2800      	cmp	r0, #0
 800a6aa:	d0d9      	beq.n	800a660 <_rclc_take_new_data+0x44>
 800a6ac:	f240 1391 	movw	r3, #401	@ 0x191
 800a6b0:	4298      	cmp	r0, r3
 800a6b2:	d116      	bne.n	800a6e2 <_rclc_take_new_data+0xc6>
 800a6b4:	2300      	movs	r3, #0
 800a6b6:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 800a6ba:	e7d1      	b.n	800a660 <_rclc_take_new_data+0x44>
 800a6bc:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800a6be:	698b      	ldr	r3, [r1, #24]
 800a6c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d0ca      	beq.n	800a65e <_rclc_take_new_data+0x42>
 800a6c8:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800a6cc:	f104 0110 	add.w	r1, r4, #16
 800a6d0:	f007 fb82 	bl	8011dd8 <rcl_take_response>
 800a6d4:	4605      	mov	r5, r0
 800a6d6:	2800      	cmp	r0, #0
 800a6d8:	d0c1      	beq.n	800a65e <_rclc_take_new_data+0x42>
 800a6da:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800a6de:	4298      	cmp	r0, r3
 800a6e0:	d0be      	beq.n	800a660 <_rclc_take_new_data+0x44>
 800a6e2:	f000 febd 	bl	800b460 <rcutils_reset_error>
 800a6e6:	e7bb      	b.n	800a660 <_rclc_take_new_data+0x44>
 800a6e8:	6840      	ldr	r0, [r0, #4]
 800a6ea:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d17d      	bne.n	800a7ee <_rclc_take_new_data+0x1d2>
 800a6f2:	69c3      	ldr	r3, [r0, #28]
 800a6f4:	b11b      	cbz	r3, 800a6fe <_rclc_take_new_data+0xe2>
 800a6f6:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d144      	bne.n	800a788 <_rclc_take_new_data+0x16c>
 800a6fe:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800a702:	2b00      	cmp	r3, #0
 800a704:	f040 80ac 	bne.w	800a860 <_rclc_take_new_data+0x244>
 800a708:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d0a6      	beq.n	800a65e <_rclc_take_new_data+0x42>
 800a710:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800a712:	a90a      	add	r1, sp, #40	@ 0x28
 800a714:	3010      	adds	r0, #16
 800a716:	f009 fba3 	bl	8013e60 <rcl_action_take_result_response>
 800a71a:	4605      	mov	r5, r0
 800a71c:	2800      	cmp	r0, #0
 800a71e:	d1e0      	bne.n	800a6e2 <_rclc_take_new_data+0xc6>
 800a720:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a724:	6860      	ldr	r0, [r4, #4]
 800a726:	f009 ffff 	bl	8014728 <rclc_action_find_handle_by_result_request_sequence_number>
 800a72a:	2800      	cmp	r0, #0
 800a72c:	d098      	beq.n	800a660 <_rclc_take_new_data+0x44>
 800a72e:	2301      	movs	r3, #1
 800a730:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 800a734:	e794      	b.n	800a660 <_rclc_take_new_data+0x44>
 800a736:	250b      	movs	r5, #11
 800a738:	4628      	mov	r0, r5
 800a73a:	b01b      	add	sp, #108	@ 0x6c
 800a73c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a73e:	ae04      	add	r6, sp, #16
 800a740:	aa0a      	add	r2, sp, #40	@ 0x28
 800a742:	3010      	adds	r0, #16
 800a744:	4631      	mov	r1, r6
 800a746:	f009 fdff 	bl	8014348 <rcl_action_take_cancel_request>
 800a74a:	4605      	mov	r5, r0
 800a74c:	2800      	cmp	r0, #0
 800a74e:	d1c8      	bne.n	800a6e2 <_rclc_take_new_data+0xc6>
 800a750:	6860      	ldr	r0, [r4, #4]
 800a752:	a90a      	add	r1, sp, #40	@ 0x28
 800a754:	f009 ffa6 	bl	80146a4 <rclc_action_find_goal_handle_by_uuid>
 800a758:	4607      	mov	r7, r0
 800a75a:	2800      	cmp	r0, #0
 800a75c:	f000 80bb 	beq.w	800a8d6 <_rclc_take_new_data+0x2ba>
 800a760:	f990 0008 	ldrsb.w	r0, [r0, #8]
 800a764:	2101      	movs	r1, #1
 800a766:	f009 ff27 	bl	80145b8 <rcl_action_transition_goal_state>
 800a76a:	2803      	cmp	r0, #3
 800a76c:	4684      	mov	ip, r0
 800a76e:	f040 80a7 	bne.w	800a8c0 <_rclc_take_new_data+0x2a4>
 800a772:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800a774:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 800a778:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a77a:	e896 0003 	ldmia.w	r6, {r0, r1}
 800a77e:	e884 0003 	stmia.w	r4, {r0, r1}
 800a782:	f887 c008 	strb.w	ip, [r7, #8]
 800a786:	e76b      	b.n	800a660 <_rclc_take_new_data+0x44>
 800a788:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800a78a:	3010      	adds	r0, #16
 800a78c:	f009 fbe8 	bl	8013f60 <rcl_action_take_feedback>
 800a790:	4605      	mov	r5, r0
 800a792:	2800      	cmp	r0, #0
 800a794:	d1a5      	bne.n	800a6e2 <_rclc_take_new_data+0xc6>
 800a796:	6860      	ldr	r0, [r4, #4]
 800a798:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800a79a:	f009 ff83 	bl	80146a4 <rclc_action_find_goal_handle_by_uuid>
 800a79e:	4603      	mov	r3, r0
 800a7a0:	2800      	cmp	r0, #0
 800a7a2:	f000 80a3 	beq.w	800a8ec <_rclc_take_new_data+0x2d0>
 800a7a6:	2201      	movs	r2, #1
 800a7a8:	6860      	ldr	r0, [r4, #4]
 800a7aa:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 800a7ae:	e7a6      	b.n	800a6fe <_rclc_take_new_data+0xe2>
 800a7b0:	f009 ff52 	bl	8014658 <rclc_action_take_goal_handle>
 800a7b4:	4606      	mov	r6, r0
 800a7b6:	6860      	ldr	r0, [r4, #4]
 800a7b8:	2e00      	cmp	r6, #0
 800a7ba:	f43f af47 	beq.w	800a64c <_rclc_take_new_data+0x30>
 800a7be:	6070      	str	r0, [r6, #4]
 800a7c0:	69f2      	ldr	r2, [r6, #28]
 800a7c2:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 800a7c6:	3010      	adds	r0, #16
 800a7c8:	f009 fd06 	bl	80141d8 <rcl_action_take_goal_request>
 800a7cc:	4605      	mov	r5, r0
 800a7ce:	2800      	cmp	r0, #0
 800a7d0:	f040 808e 	bne.w	800a8f0 <_rclc_take_new_data+0x2d4>
 800a7d4:	69f7      	ldr	r7, [r6, #28]
 800a7d6:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800a7d8:	7235      	strb	r5, [r6, #8]
 800a7da:	f8c6 0009 	str.w	r0, [r6, #9]
 800a7de:	f8c6 100d 	str.w	r1, [r6, #13]
 800a7e2:	6860      	ldr	r0, [r4, #4]
 800a7e4:	f8c6 2011 	str.w	r2, [r6, #17]
 800a7e8:	f8c6 3015 	str.w	r3, [r6, #21]
 800a7ec:	e72e      	b.n	800a64c <_rclc_take_new_data+0x30>
 800a7ee:	aa04      	add	r2, sp, #16
 800a7f0:	a90a      	add	r1, sp, #40	@ 0x28
 800a7f2:	3010      	adds	r0, #16
 800a7f4:	f009 fabc 	bl	8013d70 <rcl_action_take_goal_response>
 800a7f8:	4605      	mov	r5, r0
 800a7fa:	2800      	cmp	r0, #0
 800a7fc:	f47f af71 	bne.w	800a6e2 <_rclc_take_new_data+0xc6>
 800a800:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a804:	6860      	ldr	r0, [r4, #4]
 800a806:	f009 ff7d 	bl	8014704 <rclc_action_find_handle_by_goal_request_sequence_number>
 800a80a:	b130      	cbz	r0, 800a81a <_rclc_take_new_data+0x1fe>
 800a80c:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800a810:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800a814:	2201      	movs	r2, #1
 800a816:	f880 2020 	strb.w	r2, [r0, #32]
 800a81a:	6860      	ldr	r0, [r4, #4]
 800a81c:	e769      	b.n	800a6f2 <_rclc_take_new_data+0xd6>
 800a81e:	aa04      	add	r2, sp, #16
 800a820:	3010      	adds	r0, #16
 800a822:	a90a      	add	r1, sp, #40	@ 0x28
 800a824:	f009 fd50 	bl	80142c8 <rcl_action_take_result_request>
 800a828:	4605      	mov	r5, r0
 800a82a:	2800      	cmp	r0, #0
 800a82c:	f47f af59 	bne.w	800a6e2 <_rclc_take_new_data+0xc6>
 800a830:	6860      	ldr	r0, [r4, #4]
 800a832:	a904      	add	r1, sp, #16
 800a834:	f009 ff36 	bl	80146a4 <rclc_action_find_goal_handle_by_uuid>
 800a838:	4607      	mov	r7, r0
 800a83a:	b160      	cbz	r0, 800a856 <_rclc_take_new_data+0x23a>
 800a83c:	ad0a      	add	r5, sp, #40	@ 0x28
 800a83e:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 800a842:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a844:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800a846:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a84a:	f04f 0c02 	mov.w	ip, #2
 800a84e:	e886 0003 	stmia.w	r6, {r0, r1}
 800a852:	f887 c008 	strb.w	ip, [r7, #8]
 800a856:	6860      	ldr	r0, [r4, #4]
 800a858:	2300      	movs	r3, #0
 800a85a:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 800a85e:	e6fa      	b.n	800a656 <_rclc_take_new_data+0x3a>
 800a860:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 800a864:	a90a      	add	r1, sp, #40	@ 0x28
 800a866:	3010      	adds	r0, #16
 800a868:	f009 fb3a 	bl	8013ee0 <rcl_action_take_cancel_response>
 800a86c:	4605      	mov	r5, r0
 800a86e:	2800      	cmp	r0, #0
 800a870:	f47f af37 	bne.w	800a6e2 <_rclc_take_new_data+0xc6>
 800a874:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a878:	6860      	ldr	r0, [r4, #4]
 800a87a:	f009 ff67 	bl	801474c <rclc_action_find_handle_by_cancel_request_sequence_number>
 800a87e:	4606      	mov	r6, r0
 800a880:	6860      	ldr	r0, [r4, #4]
 800a882:	2e00      	cmp	r6, #0
 800a884:	f43f af40 	beq.w	800a708 <_rclc_take_new_data+0xec>
 800a888:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800a88a:	2701      	movs	r7, #1
 800a88c:	84b7      	strh	r7, [r6, #36]	@ 0x24
 800a88e:	2b00      	cmp	r3, #0
 800a890:	f43f af3a 	beq.w	800a708 <_rclc_take_new_data+0xec>
 800a894:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800a896:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800a89a:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800a89e:	f009 ff01 	bl	80146a4 <rclc_action_find_goal_handle_by_uuid>
 800a8a2:	b138      	cbz	r0, 800a8b4 <_rclc_take_new_data+0x298>
 800a8a4:	6860      	ldr	r0, [r4, #4]
 800a8a6:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800a8a8:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 800a8ac:	3501      	adds	r5, #1
 800a8ae:	42ab      	cmp	r3, r5
 800a8b0:	d8f0      	bhi.n	800a894 <_rclc_take_new_data+0x278>
 800a8b2:	e729      	b.n	800a708 <_rclc_take_new_data+0xec>
 800a8b4:	6860      	ldr	r0, [r4, #4]
 800a8b6:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800a8b8:	3501      	adds	r5, #1
 800a8ba:	42ab      	cmp	r3, r5
 800a8bc:	d8ea      	bhi.n	800a894 <_rclc_take_new_data+0x278>
 800a8be:	e723      	b.n	800a708 <_rclc_take_new_data+0xec>
 800a8c0:	ab06      	add	r3, sp, #24
 800a8c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a8c4:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800a8c8:	2103      	movs	r1, #3
 800a8ca:	e896 000c 	ldmia.w	r6, {r2, r3}
 800a8ce:	6860      	ldr	r0, [r4, #4]
 800a8d0:	f009 ffb2 	bl	8014838 <rclc_action_server_goal_cancel_reject>
 800a8d4:	e6c4      	b.n	800a660 <_rclc_take_new_data+0x44>
 800a8d6:	ab06      	add	r3, sp, #24
 800a8d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a8da:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800a8de:	2102      	movs	r1, #2
 800a8e0:	e896 000c 	ldmia.w	r6, {r2, r3}
 800a8e4:	6860      	ldr	r0, [r4, #4]
 800a8e6:	f009 ffa7 	bl	8014838 <rclc_action_server_goal_cancel_reject>
 800a8ea:	e6b9      	b.n	800a660 <_rclc_take_new_data+0x44>
 800a8ec:	6860      	ldr	r0, [r4, #4]
 800a8ee:	e706      	b.n	800a6fe <_rclc_take_new_data+0xe2>
 800a8f0:	6860      	ldr	r0, [r4, #4]
 800a8f2:	4631      	mov	r1, r6
 800a8f4:	f009 fec0 	bl	8014678 <rclc_action_remove_used_goal_handle>
 800a8f8:	f000 fdb2 	bl	800b460 <rcutils_reset_error>
 800a8fc:	e6b0      	b.n	800a660 <_rclc_take_new_data+0x44>
 800a8fe:	2501      	movs	r5, #1
 800a900:	e6ae      	b.n	800a660 <_rclc_take_new_data+0x44>
 800a902:	bf00      	nop

0800a904 <_rclc_execute.part.0>:
 800a904:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a906:	7803      	ldrb	r3, [r0, #0]
 800a908:	b087      	sub	sp, #28
 800a90a:	4604      	mov	r4, r0
 800a90c:	2b0a      	cmp	r3, #10
 800a90e:	f200 8136 	bhi.w	800ab7e <_rclc_execute.part.0+0x27a>
 800a912:	e8df f003 	tbb	[pc, r3]
 800a916:	435e      	.short	0x435e
 800a918:	06a1664f 	.word	0x06a1664f
 800a91c:	6c1e0606 	.word	0x6c1e0606
 800a920:	59          	.byte	0x59
 800a921:	00          	.byte	0x00
 800a922:	2b06      	cmp	r3, #6
 800a924:	f000 8122 	beq.w	800ab6c <_rclc_execute.part.0+0x268>
 800a928:	2b07      	cmp	r3, #7
 800a92a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800a92c:	f040 8118 	bne.w	800ab60 <_rclc_execute.part.0+0x25c>
 800a930:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	@ 0x28
 800a934:	6880      	ldr	r0, [r0, #8]
 800a936:	4798      	blx	r3
 800a938:	f104 0110 	add.w	r1, r4, #16
 800a93c:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800a93e:	6860      	ldr	r0, [r4, #4]
 800a940:	f008 f8d2 	bl	8012ae8 <rcl_send_response>
 800a944:	2800      	cmp	r0, #0
 800a946:	d033      	beq.n	800a9b0 <_rclc_execute.part.0+0xac>
 800a948:	9005      	str	r0, [sp, #20]
 800a94a:	f000 fd89 	bl	800b460 <rcutils_reset_error>
 800a94e:	9805      	ldr	r0, [sp, #20]
 800a950:	e02e      	b.n	800a9b0 <_rclc_execute.part.0+0xac>
 800a952:	6840      	ldr	r0, [r0, #4]
 800a954:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800a958:	2b00      	cmp	r3, #0
 800a95a:	f000 8086 	beq.w	800aa6a <_rclc_execute.part.0+0x166>
 800a95e:	2600      	movs	r6, #0
 800a960:	2701      	movs	r7, #1
 800a962:	e004      	b.n	800a96e <_rclc_execute.part.0+0x6a>
 800a964:	f009 fe52 	bl	801460c <rclc_action_send_result_request>
 800a968:	b998      	cbnz	r0, 800a992 <_rclc_execute.part.0+0x8e>
 800a96a:	722f      	strb	r7, [r5, #8]
 800a96c:	6860      	ldr	r0, [r4, #4]
 800a96e:	f009 feff 	bl	8014770 <rclc_action_find_first_handle_with_goal_response>
 800a972:	4605      	mov	r5, r0
 800a974:	2800      	cmp	r0, #0
 800a976:	d077      	beq.n	800aa68 <_rclc_execute.part.0+0x164>
 800a978:	6863      	ldr	r3, [r4, #4]
 800a97a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800a97c:	699b      	ldr	r3, [r3, #24]
 800a97e:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 800a982:	f885 6020 	strb.w	r6, [r5, #32]
 800a986:	4798      	blx	r3
 800a988:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 800a98c:	4628      	mov	r0, r5
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d1e8      	bne.n	800a964 <_rclc_execute.part.0+0x60>
 800a992:	6860      	ldr	r0, [r4, #4]
 800a994:	4629      	mov	r1, r5
 800a996:	f009 fe6f 	bl	8014678 <rclc_action_remove_used_goal_handle>
 800a99a:	e7e7      	b.n	800a96c <_rclc_execute.part.0+0x68>
 800a99c:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800a9a0:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	@ 0x2c
 800a9a4:	2d00      	cmp	r5, #0
 800a9a6:	f000 80c9 	beq.w	800ab3c <_rclc_execute.part.0+0x238>
 800a9aa:	6880      	ldr	r0, [r0, #8]
 800a9ac:	4798      	blx	r3
 800a9ae:	2000      	movs	r0, #0
 800a9b0:	b007      	add	sp, #28
 800a9b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a9b4:	6840      	ldr	r0, [r0, #4]
 800a9b6:	f008 fa99 	bl	8012eec <rcl_timer_call>
 800a9ba:	f240 3321 	movw	r3, #801	@ 0x321
 800a9be:	4298      	cmp	r0, r3
 800a9c0:	d004      	beq.n	800a9cc <_rclc_execute.part.0+0xc8>
 800a9c2:	2800      	cmp	r0, #0
 800a9c4:	d0f4      	beq.n	800a9b0 <_rclc_execute.part.0+0xac>
 800a9c6:	e7bf      	b.n	800a948 <_rclc_execute.part.0+0x44>
 800a9c8:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800a9ca:	4798      	blx	r3
 800a9cc:	2000      	movs	r0, #0
 800a9ce:	b007      	add	sp, #28
 800a9d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a9d2:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800a9d6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800a9d8:	b925      	cbnz	r5, 800a9e4 <_rclc_execute.part.0+0xe0>
 800a9da:	4628      	mov	r0, r5
 800a9dc:	4798      	blx	r3
 800a9de:	4628      	mov	r0, r5
 800a9e0:	e7e6      	b.n	800a9b0 <_rclc_execute.part.0+0xac>
 800a9e2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800a9e4:	68a0      	ldr	r0, [r4, #8]
 800a9e6:	4798      	blx	r3
 800a9e8:	2000      	movs	r0, #0
 800a9ea:	b007      	add	sp, #28
 800a9ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a9ee:	6840      	ldr	r0, [r0, #4]
 800a9f0:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800a9f4:	bb3b      	cbnz	r3, 800aa46 <_rclc_execute.part.0+0x142>
 800a9f6:	f890 3020 	ldrb.w	r3, [r0, #32]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d07b      	beq.n	800aaf6 <_rclc_execute.part.0+0x1f2>
 800a9fe:	f640 0634 	movw	r6, #2100	@ 0x834
 800aa02:	2701      	movs	r7, #1
 800aa04:	e007      	b.n	800aa16 <_rclc_execute.part.0+0x112>
 800aa06:	4628      	mov	r0, r5
 800aa08:	f009 feca 	bl	80147a0 <rclc_action_server_response_goal_request>
 800aa0c:	6860      	ldr	r0, [r4, #4]
 800aa0e:	4629      	mov	r1, r5
 800aa10:	f009 fe32 	bl	8014678 <rclc_action_remove_used_goal_handle>
 800aa14:	6860      	ldr	r0, [r4, #4]
 800aa16:	2100      	movs	r1, #0
 800aa18:	f009 fe5c 	bl	80146d4 <rclc_action_find_first_handle_by_status>
 800aa1c:	4605      	mov	r5, r0
 800aa1e:	2800      	cmp	r0, #0
 800aa20:	d066      	beq.n	800aaf0 <_rclc_execute.part.0+0x1ec>
 800aa22:	6863      	ldr	r3, [r4, #4]
 800aa24:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800aa26:	699b      	ldr	r3, [r3, #24]
 800aa28:	4798      	blx	r3
 800aa2a:	42b0      	cmp	r0, r6
 800aa2c:	f04f 0100 	mov.w	r1, #0
 800aa30:	d1e9      	bne.n	800aa06 <_rclc_execute.part.0+0x102>
 800aa32:	2101      	movs	r1, #1
 800aa34:	4628      	mov	r0, r5
 800aa36:	f009 feb3 	bl	80147a0 <rclc_action_server_response_goal_request>
 800aa3a:	722f      	strb	r7, [r5, #8]
 800aa3c:	e7ea      	b.n	800aa14 <_rclc_execute.part.0+0x110>
 800aa3e:	6848      	ldr	r0, [r1, #4]
 800aa40:	f009 fe1a 	bl	8014678 <rclc_action_remove_used_goal_handle>
 800aa44:	6860      	ldr	r0, [r4, #4]
 800aa46:	f009 fe51 	bl	80146ec <rclc_action_find_first_terminated_handle>
 800aa4a:	4601      	mov	r1, r0
 800aa4c:	2800      	cmp	r0, #0
 800aa4e:	d1f6      	bne.n	800aa3e <_rclc_execute.part.0+0x13a>
 800aa50:	6860      	ldr	r0, [r4, #4]
 800aa52:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 800aa56:	e7ce      	b.n	800a9f6 <_rclc_execute.part.0+0xf2>
 800aa58:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800aa5a:	6880      	ldr	r0, [r0, #8]
 800aa5c:	f104 0110 	add.w	r1, r4, #16
 800aa60:	4798      	blx	r3
 800aa62:	2000      	movs	r0, #0
 800aa64:	b007      	add	sp, #28
 800aa66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa68:	6860      	ldr	r0, [r4, #4]
 800aa6a:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800aa6e:	b18b      	cbz	r3, 800aa94 <_rclc_execute.part.0+0x190>
 800aa70:	68c5      	ldr	r5, [r0, #12]
 800aa72:	b32d      	cbz	r5, 800aac0 <_rclc_execute.part.0+0x1bc>
 800aa74:	2600      	movs	r6, #0
 800aa76:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 800aa7a:	b143      	cbz	r3, 800aa8e <_rclc_execute.part.0+0x18a>
 800aa7c:	69c3      	ldr	r3, [r0, #28]
 800aa7e:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 800aa82:	b123      	cbz	r3, 800aa8e <_rclc_execute.part.0+0x18a>
 800aa84:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800aa86:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800aa88:	4628      	mov	r0, r5
 800aa8a:	4798      	blx	r3
 800aa8c:	6860      	ldr	r0, [r4, #4]
 800aa8e:	682d      	ldr	r5, [r5, #0]
 800aa90:	2d00      	cmp	r5, #0
 800aa92:	d1f0      	bne.n	800aa76 <_rclc_execute.part.0+0x172>
 800aa94:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800aa98:	b193      	cbz	r3, 800aac0 <_rclc_execute.part.0+0x1bc>
 800aa9a:	68c5      	ldr	r5, [r0, #12]
 800aa9c:	b185      	cbz	r5, 800aac0 <_rclc_execute.part.0+0x1bc>
 800aa9e:	2600      	movs	r6, #0
 800aaa0:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 800aaa4:	b14b      	cbz	r3, 800aaba <_rclc_execute.part.0+0x1b6>
 800aaa6:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800aaa8:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 800aaac:	b12b      	cbz	r3, 800aaba <_rclc_execute.part.0+0x1b6>
 800aaae:	4628      	mov	r0, r5
 800aab0:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 800aab4:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800aab6:	4798      	blx	r3
 800aab8:	6860      	ldr	r0, [r4, #4]
 800aaba:	682d      	ldr	r5, [r5, #0]
 800aabc:	2d00      	cmp	r5, #0
 800aabe:	d1ef      	bne.n	800aaa0 <_rclc_execute.part.0+0x19c>
 800aac0:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d081      	beq.n	800a9cc <_rclc_execute.part.0+0xc8>
 800aac8:	2700      	movs	r7, #0
 800aaca:	e00b      	b.n	800aae4 <_rclc_execute.part.0+0x1e0>
 800aacc:	6863      	ldr	r3, [r4, #4]
 800aace:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800aad0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800aad2:	6a1e      	ldr	r6, [r3, #32]
 800aad4:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 800aad8:	47b0      	blx	r6
 800aada:	6860      	ldr	r0, [r4, #4]
 800aadc:	4629      	mov	r1, r5
 800aade:	f009 fdcb 	bl	8014678 <rclc_action_remove_used_goal_handle>
 800aae2:	6860      	ldr	r0, [r4, #4]
 800aae4:	f009 fe50 	bl	8014788 <rclc_action_find_first_handle_with_result_response>
 800aae8:	4605      	mov	r5, r0
 800aaea:	2800      	cmp	r0, #0
 800aaec:	d1ee      	bne.n	800aacc <_rclc_execute.part.0+0x1c8>
 800aaee:	e76d      	b.n	800a9cc <_rclc_execute.part.0+0xc8>
 800aaf0:	6860      	ldr	r0, [r4, #4]
 800aaf2:	f880 5020 	strb.w	r5, [r0, #32]
 800aaf6:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	f43f af66 	beq.w	800a9cc <_rclc_execute.part.0+0xc8>
 800ab00:	68c5      	ldr	r5, [r0, #12]
 800ab02:	b1b5      	cbz	r5, 800ab32 <_rclc_execute.part.0+0x22e>
 800ab04:	2602      	movs	r6, #2
 800ab06:	e001      	b.n	800ab0c <_rclc_execute.part.0+0x208>
 800ab08:	682d      	ldr	r5, [r5, #0]
 800ab0a:	b195      	cbz	r5, 800ab32 <_rclc_execute.part.0+0x22e>
 800ab0c:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800ab10:	2b03      	cmp	r3, #3
 800ab12:	d1f9      	bne.n	800ab08 <_rclc_execute.part.0+0x204>
 800ab14:	69c3      	ldr	r3, [r0, #28]
 800ab16:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800ab18:	4628      	mov	r0, r5
 800ab1a:	4798      	blx	r3
 800ab1c:	4603      	mov	r3, r0
 800ab1e:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 800ab22:	4628      	mov	r0, r5
 800ab24:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 800ab28:	b163      	cbz	r3, 800ab44 <_rclc_execute.part.0+0x240>
 800ab2a:	f009 fe59 	bl	80147e0 <rclc_action_server_goal_cancel_accept>
 800ab2e:	6860      	ldr	r0, [r4, #4]
 800ab30:	e7ea      	b.n	800ab08 <_rclc_execute.part.0+0x204>
 800ab32:	2300      	movs	r3, #0
 800ab34:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800ab38:	4618      	mov	r0, r3
 800ab3a:	e739      	b.n	800a9b0 <_rclc_execute.part.0+0xac>
 800ab3c:	4628      	mov	r0, r5
 800ab3e:	4798      	blx	r3
 800ab40:	4628      	mov	r0, r5
 800ab42:	e735      	b.n	800a9b0 <_rclc_execute.part.0+0xac>
 800ab44:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800ab46:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800ab4a:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 800ab4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ab52:	6860      	ldr	r0, [r4, #4]
 800ab54:	2101      	movs	r1, #1
 800ab56:	f009 fe6f 	bl	8014838 <rclc_action_server_goal_cancel_reject>
 800ab5a:	722e      	strb	r6, [r5, #8]
 800ab5c:	6860      	ldr	r0, [r4, #4]
 800ab5e:	e7d3      	b.n	800ab08 <_rclc_execute.part.0+0x204>
 800ab60:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800ab62:	6880      	ldr	r0, [r0, #8]
 800ab64:	4798      	blx	r3
 800ab66:	f104 0110 	add.w	r1, r4, #16
 800ab6a:	e6e7      	b.n	800a93c <_rclc_execute.part.0+0x38>
 800ab6c:	f100 0110 	add.w	r1, r0, #16
 800ab70:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800ab72:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 800ab74:	6880      	ldr	r0, [r0, #8]
 800ab76:	9105      	str	r1, [sp, #20]
 800ab78:	4798      	blx	r3
 800ab7a:	9905      	ldr	r1, [sp, #20]
 800ab7c:	e6de      	b.n	800a93c <_rclc_execute.part.0+0x38>
 800ab7e:	2001      	movs	r0, #1
 800ab80:	e716      	b.n	800a9b0 <_rclc_execute.part.0+0xac>
 800ab82:	bf00      	nop

0800ab84 <rclc_executor_trigger_any>:
 800ab84:	2800      	cmp	r0, #0
 800ab86:	d03f      	beq.n	800ac08 <rclc_executor_trigger_any+0x84>
 800ab88:	2900      	cmp	r1, #0
 800ab8a:	d03e      	beq.n	800ac0a <rclc_executor_trigger_any+0x86>
 800ab8c:	4603      	mov	r3, r0
 800ab8e:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 800ab92:	2200      	movs	r2, #0
 800ab94:	2800      	cmp	r0, #0
 800ab96:	d037      	beq.n	800ac08 <rclc_executor_trigger_any+0x84>
 800ab98:	b430      	push	{r4, r5}
 800ab9a:	f893 c000 	ldrb.w	ip, [r3]
 800ab9e:	f1bc 0f08 	cmp.w	ip, #8
 800aba2:	d11e      	bne.n	800abe2 <rclc_executor_trigger_any+0x5e>
 800aba4:	685c      	ldr	r4, [r3, #4]
 800aba6:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 800aba8:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 800abac:	d105      	bne.n	800abba <rclc_executor_trigger_any+0x36>
 800abae:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 800abb2:	b910      	cbnz	r0, 800abba <rclc_executor_trigger_any+0x36>
 800abb4:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 800abb8:	b128      	cbz	r0, 800abc6 <rclc_executor_trigger_any+0x42>
 800abba:	bc30      	pop	{r4, r5}
 800abbc:	4770      	bx	lr
 800abbe:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 800abc2:	2800      	cmp	r0, #0
 800abc4:	d1f9      	bne.n	800abba <rclc_executor_trigger_any+0x36>
 800abc6:	3201      	adds	r2, #1
 800abc8:	4291      	cmp	r1, r2
 800abca:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800abce:	d018      	beq.n	800ac02 <rclc_executor_trigger_any+0x7e>
 800abd0:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 800abd4:	2800      	cmp	r0, #0
 800abd6:	d0f0      	beq.n	800abba <rclc_executor_trigger_any+0x36>
 800abd8:	f893 c000 	ldrb.w	ip, [r3]
 800abdc:	f1bc 0f08 	cmp.w	ip, #8
 800abe0:	d0e0      	beq.n	800aba4 <rclc_executor_trigger_any+0x20>
 800abe2:	f1bc 0f09 	cmp.w	ip, #9
 800abe6:	d1ea      	bne.n	800abbe <rclc_executor_trigger_any+0x3a>
 800abe8:	685c      	ldr	r4, [r3, #4]
 800abea:	6a25      	ldr	r5, [r4, #32]
 800abec:	2d00      	cmp	r5, #0
 800abee:	d1e4      	bne.n	800abba <rclc_executor_trigger_any+0x36>
 800abf0:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 800abf4:	2800      	cmp	r0, #0
 800abf6:	d1e0      	bne.n	800abba <rclc_executor_trigger_any+0x36>
 800abf8:	3201      	adds	r2, #1
 800abfa:	4291      	cmp	r1, r2
 800abfc:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800ac00:	d1e6      	bne.n	800abd0 <rclc_executor_trigger_any+0x4c>
 800ac02:	2000      	movs	r0, #0
 800ac04:	bc30      	pop	{r4, r5}
 800ac06:	4770      	bx	lr
 800ac08:	4770      	bx	lr
 800ac0a:	4608      	mov	r0, r1
 800ac0c:	4770      	bx	lr
 800ac0e:	bf00      	nop

0800ac10 <rclc_executor_get_zero_initialized_executor>:
 800ac10:	b510      	push	{r4, lr}
 800ac12:	4903      	ldr	r1, [pc, #12]	@ (800ac20 <rclc_executor_get_zero_initialized_executor+0x10>)
 800ac14:	4604      	mov	r4, r0
 800ac16:	2288      	movs	r2, #136	@ 0x88
 800ac18:	f00e fcf9 	bl	801960e <memcpy>
 800ac1c:	4620      	mov	r0, r4
 800ac1e:	bd10      	pop	{r4, pc}
 800ac20:	0801abd8 	.word	0x0801abd8
 800ac24:	00000000 	.word	0x00000000

0800ac28 <rclc_executor_init>:
 800ac28:	2800      	cmp	r0, #0
 800ac2a:	d05f      	beq.n	800acec <rclc_executor_init+0xc4>
 800ac2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac30:	460c      	mov	r4, r1
 800ac32:	b0b0      	sub	sp, #192	@ 0xc0
 800ac34:	2900      	cmp	r1, #0
 800ac36:	d051      	beq.n	800acdc <rclc_executor_init+0xb4>
 800ac38:	4605      	mov	r5, r0
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	4616      	mov	r6, r2
 800ac3e:	461f      	mov	r7, r3
 800ac40:	f000 fbea 	bl	800b418 <rcutils_allocator_is_valid>
 800ac44:	2800      	cmp	r0, #0
 800ac46:	d049      	beq.n	800acdc <rclc_executor_init+0xb4>
 800ac48:	2e00      	cmp	r6, #0
 800ac4a:	d047      	beq.n	800acdc <rclc_executor_init+0xb4>
 800ac4c:	492c      	ldr	r1, [pc, #176]	@ (800ad00 <rclc_executor_init+0xd8>)
 800ac4e:	2288      	movs	r2, #136	@ 0x88
 800ac50:	a80e      	add	r0, sp, #56	@ 0x38
 800ac52:	f00e fcdc 	bl	801960e <memcpy>
 800ac56:	a90e      	add	r1, sp, #56	@ 0x38
 800ac58:	2288      	movs	r2, #136	@ 0x88
 800ac5a:	4628      	mov	r0, r5
 800ac5c:	f00e fcd7 	bl	801960e <memcpy>
 800ac60:	602c      	str	r4, [r5, #0]
 800ac62:	4668      	mov	r0, sp
 800ac64:	60ae      	str	r6, [r5, #8]
 800ac66:	466c      	mov	r4, sp
 800ac68:	f008 fab2 	bl	80131d0 <rcl_get_zero_initialized_wait_set>
 800ac6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ac6e:	f105 0c14 	add.w	ip, r5, #20
 800ac72:	f8d7 8000 	ldr.w	r8, [r7]
 800ac76:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ac7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ac7c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ac80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ac82:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ac86:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800acf8 <rclc_executor_init+0xd0>
 800ac8a:	6823      	ldr	r3, [r4, #0]
 800ac8c:	f8cc 3000 	str.w	r3, [ip]
 800ac90:	6939      	ldr	r1, [r7, #16]
 800ac92:	612f      	str	r7, [r5, #16]
 800ac94:	ed85 7b1a 	vstr	d7, [r5, #104]	@ 0x68
 800ac98:	01b0      	lsls	r0, r6, #6
 800ac9a:	47c0      	blx	r8
 800ac9c:	6068      	str	r0, [r5, #4]
 800ac9e:	b338      	cbz	r0, 800acf0 <rclc_executor_init+0xc8>
 800aca0:	2400      	movs	r4, #0
 800aca2:	e000      	b.n	800aca6 <rclc_executor_init+0x7e>
 800aca4:	6868      	ldr	r0, [r5, #4]
 800aca6:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800acaa:	4631      	mov	r1, r6
 800acac:	3401      	adds	r4, #1
 800acae:	f000 fa6b 	bl	800b188 <rclc_executor_handle_init>
 800acb2:	42a6      	cmp	r6, r4
 800acb4:	d1f6      	bne.n	800aca4 <rclc_executor_init+0x7c>
 800acb6:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 800acba:	f000 fa5b 	bl	800b174 <rclc_executor_handle_counters_zero_init>
 800acbe:	4a11      	ldr	r2, [pc, #68]	@ (800ad04 <rclc_executor_init+0xdc>)
 800acc0:	686b      	ldr	r3, [r5, #4]
 800acc2:	2000      	movs	r0, #0
 800acc4:	e9c5 201e 	strd	r2, r0, [r5, #120]	@ 0x78
 800acc8:	b163      	cbz	r3, 800ace4 <rclc_executor_init+0xbc>
 800acca:	692b      	ldr	r3, [r5, #16]
 800accc:	b153      	cbz	r3, 800ace4 <rclc_executor_init+0xbc>
 800acce:	68ab      	ldr	r3, [r5, #8]
 800acd0:	b143      	cbz	r3, 800ace4 <rclc_executor_init+0xbc>
 800acd2:	f885 0080 	strb.w	r0, [r5, #128]	@ 0x80
 800acd6:	b030      	add	sp, #192	@ 0xc0
 800acd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800acdc:	200b      	movs	r0, #11
 800acde:	b030      	add	sp, #192	@ 0xc0
 800ace0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ace4:	4618      	mov	r0, r3
 800ace6:	b030      	add	sp, #192	@ 0xc0
 800ace8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800acec:	200b      	movs	r0, #11
 800acee:	4770      	bx	lr
 800acf0:	200a      	movs	r0, #10
 800acf2:	e7f4      	b.n	800acde <rclc_executor_init+0xb6>
 800acf4:	f3af 8000 	nop.w
 800acf8:	3b9aca00 	.word	0x3b9aca00
 800acfc:	00000000 	.word	0x00000000
 800ad00:	0801abd8 	.word	0x0801abd8
 800ad04:	0800ab85 	.word	0x0800ab85

0800ad08 <rclc_executor_add_subscription>:
 800ad08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad0a:	f89d e018 	ldrb.w	lr, [sp, #24]
 800ad0e:	b338      	cbz	r0, 800ad60 <rclc_executor_add_subscription+0x58>
 800ad10:	b331      	cbz	r1, 800ad60 <rclc_executor_add_subscription+0x58>
 800ad12:	b32a      	cbz	r2, 800ad60 <rclc_executor_add_subscription+0x58>
 800ad14:	b323      	cbz	r3, 800ad60 <rclc_executor_add_subscription+0x58>
 800ad16:	4604      	mov	r4, r0
 800ad18:	e9d0 5002 	ldrd	r5, r0, [r0, #8]
 800ad1c:	42a8      	cmp	r0, r5
 800ad1e:	d301      	bcc.n	800ad24 <rclc_executor_add_subscription+0x1c>
 800ad20:	2001      	movs	r0, #1
 800ad22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad24:	6866      	ldr	r6, [r4, #4]
 800ad26:	0187      	lsls	r7, r0, #6
 800ad28:	eb06 1c80 	add.w	ip, r6, r0, lsl #6
 800ad2c:	2500      	movs	r5, #0
 800ad2e:	55f5      	strb	r5, [r6, r7]
 800ad30:	3001      	adds	r0, #1
 800ad32:	f8cc 3030 	str.w	r3, [ip, #48]	@ 0x30
 800ad36:	f8cc 502c 	str.w	r5, [ip, #44]	@ 0x2c
 800ad3a:	2301      	movs	r3, #1
 800ad3c:	f104 0514 	add.w	r5, r4, #20
 800ad40:	e9cc 1201 	strd	r1, r2, [ip, #4]
 800ad44:	f88c e001 	strb.w	lr, [ip, #1]
 800ad48:	f8ac 3038 	strh.w	r3, [ip, #56]	@ 0x38
 800ad4c:	60e0      	str	r0, [r4, #12]
 800ad4e:	4628      	mov	r0, r5
 800ad50:	f008 fa52 	bl	80131f8 <rcl_wait_set_is_valid>
 800ad54:	b930      	cbnz	r0, 800ad64 <rclc_executor_add_subscription+0x5c>
 800ad56:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800ad58:	3301      	adds	r3, #1
 800ad5a:	2000      	movs	r0, #0
 800ad5c:	64a3      	str	r3, [r4, #72]	@ 0x48
 800ad5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad60:	200b      	movs	r0, #11
 800ad62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad64:	4628      	mov	r0, r5
 800ad66:	f008 fa4d 	bl	8013204 <rcl_wait_set_fini>
 800ad6a:	2800      	cmp	r0, #0
 800ad6c:	d0f3      	beq.n	800ad56 <rclc_executor_add_subscription+0x4e>
 800ad6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ad70 <rclc_executor_prepare>:
 800ad70:	2800      	cmp	r0, #0
 800ad72:	d044      	beq.n	800adfe <rclc_executor_prepare+0x8e>
 800ad74:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad76:	f100 0514 	add.w	r5, r0, #20
 800ad7a:	b09b      	sub	sp, #108	@ 0x6c
 800ad7c:	4604      	mov	r4, r0
 800ad7e:	4628      	mov	r0, r5
 800ad80:	f008 fa3a 	bl	80131f8 <rcl_wait_set_is_valid>
 800ad84:	b110      	cbz	r0, 800ad8c <rclc_executor_prepare+0x1c>
 800ad86:	2000      	movs	r0, #0
 800ad88:	b01b      	add	sp, #108	@ 0x6c
 800ad8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad8c:	4628      	mov	r0, r5
 800ad8e:	f008 fa39 	bl	8013204 <rcl_wait_set_fini>
 800ad92:	2800      	cmp	r0, #0
 800ad94:	d130      	bne.n	800adf8 <rclc_executor_prepare+0x88>
 800ad96:	a80c      	add	r0, sp, #48	@ 0x30
 800ad98:	f008 fa1a 	bl	80131d0 <rcl_get_zero_initialized_wait_set>
 800ad9c:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800ada0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ada4:	46ae      	mov	lr, r5
 800ada6:	6927      	ldr	r7, [r4, #16]
 800ada8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800adac:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800adb0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800adb4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800adb8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800adbc:	f8dc 3000 	ldr.w	r3, [ip]
 800adc0:	f8ce 3000 	str.w	r3, [lr]
 800adc4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800adc6:	ae04      	add	r6, sp, #16
 800adc8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800adca:	683b      	ldr	r3, [r7, #0]
 800adcc:	6822      	ldr	r2, [r4, #0]
 800adce:	6033      	str	r3, [r6, #0]
 800add0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800add2:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 800add4:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800add8:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	@ 0x4c
 800addc:	e9cd 2100 	strd	r2, r1, [sp]
 800ade0:	4628      	mov	r0, r5
 800ade2:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 800ade4:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800ade6:	f008 fd0b 	bl	8013800 <rcl_wait_set_init>
 800adea:	2800      	cmp	r0, #0
 800adec:	d0cc      	beq.n	800ad88 <rclc_executor_prepare+0x18>
 800adee:	900b      	str	r0, [sp, #44]	@ 0x2c
 800adf0:	f000 fb36 	bl	800b460 <rcutils_reset_error>
 800adf4:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800adf6:	e7c7      	b.n	800ad88 <rclc_executor_prepare+0x18>
 800adf8:	f000 fb32 	bl	800b460 <rcutils_reset_error>
 800adfc:	e7cb      	b.n	800ad96 <rclc_executor_prepare+0x26>
 800adfe:	200b      	movs	r0, #11
 800ae00:	4770      	bx	lr
 800ae02:	bf00      	nop

0800ae04 <rclc_executor_spin_some.part.0>:
 800ae04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae08:	f100 0614 	add.w	r6, r0, #20
 800ae0c:	b083      	sub	sp, #12
 800ae0e:	4691      	mov	r9, r2
 800ae10:	4698      	mov	r8, r3
 800ae12:	4605      	mov	r5, r0
 800ae14:	f7ff ffac 	bl	800ad70 <rclc_executor_prepare>
 800ae18:	4630      	mov	r0, r6
 800ae1a:	f008 fabf 	bl	801339c <rcl_wait_set_clear>
 800ae1e:	4607      	mov	r7, r0
 800ae20:	2800      	cmp	r0, #0
 800ae22:	f040 80ed 	bne.w	800b000 <rclc_executor_spin_some.part.0+0x1fc>
 800ae26:	68ab      	ldr	r3, [r5, #8]
 800ae28:	4604      	mov	r4, r0
 800ae2a:	b303      	cbz	r3, 800ae6e <rclc_executor_spin_some.part.0+0x6a>
 800ae2c:	6869      	ldr	r1, [r5, #4]
 800ae2e:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 800ae32:	01a2      	lsls	r2, r4, #6
 800ae34:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 800ae38:	b1cb      	cbz	r3, 800ae6e <rclc_executor_spin_some.part.0+0x6a>
 800ae3a:	5c8b      	ldrb	r3, [r1, r2]
 800ae3c:	2b0a      	cmp	r3, #10
 800ae3e:	f200 80d8 	bhi.w	800aff2 <rclc_executor_spin_some.part.0+0x1ee>
 800ae42:	e8df f003 	tbb	[pc, r3]
 800ae46:	9c9c      	.short	0x9c9c
 800ae48:	068c8ca7 	.word	0x068c8ca7
 800ae4c:	bdc90606 	.word	0xbdc90606
 800ae50:	b2          	.byte	0xb2
 800ae51:	00          	.byte	0x00
 800ae52:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800ae56:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800ae5a:	4630      	mov	r0, r6
 800ae5c:	f008 fde6 	bl	8013a2c <rcl_wait_set_add_service>
 800ae60:	2800      	cmp	r0, #0
 800ae62:	f040 8086 	bne.w	800af72 <rclc_executor_spin_some.part.0+0x16e>
 800ae66:	68ab      	ldr	r3, [r5, #8]
 800ae68:	3401      	adds	r4, #1
 800ae6a:	429c      	cmp	r4, r3
 800ae6c:	d3de      	bcc.n	800ae2c <rclc_executor_spin_some.part.0+0x28>
 800ae6e:	4643      	mov	r3, r8
 800ae70:	464a      	mov	r2, r9
 800ae72:	4630      	mov	r0, r6
 800ae74:	f008 fe08 	bl	8013a88 <rcl_wait>
 800ae78:	f895 3080 	ldrb.w	r3, [r5, #128]	@ 0x80
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	f000 80c7 	beq.w	800b010 <rclc_executor_spin_some.part.0+0x20c>
 800ae82:	2b01      	cmp	r3, #1
 800ae84:	f040 80b5 	bne.w	800aff2 <rclc_executor_spin_some.part.0+0x1ee>
 800ae88:	68ab      	ldr	r3, [r5, #8]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	f000 8159 	beq.w	800b142 <rclc_executor_spin_some.part.0+0x33e>
 800ae90:	2400      	movs	r4, #0
 800ae92:	46a0      	mov	r8, r4
 800ae94:	f240 1991 	movw	r9, #401	@ 0x191
 800ae98:	e00a      	b.n	800aeb0 <rclc_executor_spin_some.part.0+0xac>
 800ae9a:	f7ff fb71 	bl	800a580 <_rclc_check_for_new_data>
 800ae9e:	4604      	mov	r4, r0
 800aea0:	b110      	cbz	r0, 800aea8 <rclc_executor_spin_some.part.0+0xa4>
 800aea2:	4548      	cmp	r0, r9
 800aea4:	f040 80b2 	bne.w	800b00c <rclc_executor_spin_some.part.0+0x208>
 800aea8:	68ab      	ldr	r3, [r5, #8]
 800aeaa:	4598      	cmp	r8, r3
 800aeac:	f080 8126 	bcs.w	800b0fc <rclc_executor_spin_some.part.0+0x2f8>
 800aeb0:	686a      	ldr	r2, [r5, #4]
 800aeb2:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800aeb6:	4631      	mov	r1, r6
 800aeb8:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800aebc:	f108 0801 	add.w	r8, r8, #1
 800aec0:	f1bc 0f00 	cmp.w	ip, #0
 800aec4:	d1e9      	bne.n	800ae9a <rclc_executor_spin_some.part.0+0x96>
 800aec6:	4619      	mov	r1, r3
 800aec8:	4610      	mov	r0, r2
 800aeca:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800aece:	4798      	blx	r3
 800aed0:	2800      	cmp	r0, #0
 800aed2:	f000 809b 	beq.w	800b00c <rclc_executor_spin_some.part.0+0x208>
 800aed6:	68ab      	ldr	r3, [r5, #8]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	f000 8097 	beq.w	800b00c <rclc_executor_spin_some.part.0+0x208>
 800aede:	f04f 0800 	mov.w	r8, #0
 800aee2:	f240 1991 	movw	r9, #401	@ 0x191
 800aee6:	e009      	b.n	800aefc <rclc_executor_spin_some.part.0+0xf8>
 800aee8:	f7ff fb98 	bl	800a61c <_rclc_take_new_data>
 800aeec:	4604      	mov	r4, r0
 800aeee:	b110      	cbz	r0, 800aef6 <rclc_executor_spin_some.part.0+0xf2>
 800aef0:	4548      	cmp	r0, r9
 800aef2:	f040 808b 	bne.w	800b00c <rclc_executor_spin_some.part.0+0x208>
 800aef6:	68ab      	ldr	r3, [r5, #8]
 800aef8:	4598      	cmp	r8, r3
 800aefa:	d209      	bcs.n	800af10 <rclc_executor_spin_some.part.0+0x10c>
 800aefc:	6868      	ldr	r0, [r5, #4]
 800aefe:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800af02:	4631      	mov	r1, r6
 800af04:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 800af08:	f108 0801 	add.w	r8, r8, #1
 800af0c:	2a00      	cmp	r2, #0
 800af0e:	d1eb      	bne.n	800aee8 <rclc_executor_spin_some.part.0+0xe4>
 800af10:	2600      	movs	r6, #0
 800af12:	b97b      	cbnz	r3, 800af34 <rclc_executor_spin_some.part.0+0x130>
 800af14:	e07a      	b.n	800b00c <rclc_executor_spin_some.part.0+0x208>
 800af16:	f812 200c 	ldrb.w	r2, [r2, ip]
 800af1a:	2a08      	cmp	r2, #8
 800af1c:	f000 80fd 	beq.w	800b11a <rclc_executor_spin_some.part.0+0x316>
 800af20:	2a09      	cmp	r2, #9
 800af22:	f000 80ef 	beq.w	800b104 <rclc_executor_spin_some.part.0+0x300>
 800af26:	f890 2039 	ldrb.w	r2, [r0, #57]	@ 0x39
 800af2a:	b98a      	cbnz	r2, 800af50 <rclc_executor_spin_some.part.0+0x14c>
 800af2c:	3601      	adds	r6, #1
 800af2e:	429e      	cmp	r6, r3
 800af30:	d262      	bcs.n	800aff8 <rclc_executor_spin_some.part.0+0x1f4>
 800af32:	2400      	movs	r4, #0
 800af34:	686a      	ldr	r2, [r5, #4]
 800af36:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800af3a:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 800af3e:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
 800af42:	2900      	cmp	r1, #0
 800af44:	d062      	beq.n	800b00c <rclc_executor_spin_some.part.0+0x208>
 800af46:	7841      	ldrb	r1, [r0, #1]
 800af48:	2900      	cmp	r1, #0
 800af4a:	d0e4      	beq.n	800af16 <rclc_executor_spin_some.part.0+0x112>
 800af4c:	2901      	cmp	r1, #1
 800af4e:	d1ed      	bne.n	800af2c <rclc_executor_spin_some.part.0+0x128>
 800af50:	f7ff fcd8 	bl	800a904 <_rclc_execute.part.0>
 800af54:	2800      	cmp	r0, #0
 800af56:	f040 80b6 	bne.w	800b0c6 <rclc_executor_spin_some.part.0+0x2c2>
 800af5a:	68ab      	ldr	r3, [r5, #8]
 800af5c:	e7e6      	b.n	800af2c <rclc_executor_spin_some.part.0+0x128>
 800af5e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800af62:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800af66:	4630      	mov	r0, r6
 800af68:	f008 fd34 	bl	80139d4 <rcl_wait_set_add_client>
 800af6c:	2800      	cmp	r0, #0
 800af6e:	f43f af7a 	beq.w	800ae66 <rclc_executor_spin_some.part.0+0x62>
 800af72:	9001      	str	r0, [sp, #4]
 800af74:	f000 fa74 	bl	800b460 <rcutils_reset_error>
 800af78:	9801      	ldr	r0, [sp, #4]
 800af7a:	4607      	mov	r7, r0
 800af7c:	e03c      	b.n	800aff8 <rclc_executor_spin_some.part.0+0x1f4>
 800af7e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800af82:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800af86:	4630      	mov	r0, r6
 800af88:	f008 f9dc 	bl	8013344 <rcl_wait_set_add_subscription>
 800af8c:	2800      	cmp	r0, #0
 800af8e:	f43f af6a 	beq.w	800ae66 <rclc_executor_spin_some.part.0+0x62>
 800af92:	e7ee      	b.n	800af72 <rclc_executor_spin_some.part.0+0x16e>
 800af94:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800af98:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800af9c:	4630      	mov	r0, r6
 800af9e:	f008 fce9 	bl	8013974 <rcl_wait_set_add_timer>
 800afa2:	2800      	cmp	r0, #0
 800afa4:	f43f af5f 	beq.w	800ae66 <rclc_executor_spin_some.part.0+0x62>
 800afa8:	e7e3      	b.n	800af72 <rclc_executor_spin_some.part.0+0x16e>
 800afaa:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800afae:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800afb2:	4630      	mov	r0, r6
 800afb4:	f008 fcb2 	bl	801391c <rcl_wait_set_add_guard_condition>
 800afb8:	2800      	cmp	r0, #0
 800afba:	f43f af54 	beq.w	800ae66 <rclc_executor_spin_some.part.0+0x62>
 800afbe:	e7d8      	b.n	800af72 <rclc_executor_spin_some.part.0+0x16e>
 800afc0:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800afc4:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800afc8:	3110      	adds	r1, #16
 800afca:	4630      	mov	r0, r6
 800afcc:	f009 fa34 	bl	8014438 <rcl_action_wait_set_add_action_server>
 800afd0:	2800      	cmp	r0, #0
 800afd2:	f43f af48 	beq.w	800ae66 <rclc_executor_spin_some.part.0+0x62>
 800afd6:	e7cc      	b.n	800af72 <rclc_executor_spin_some.part.0+0x16e>
 800afd8:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800afdc:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800afe0:	3110      	adds	r1, #16
 800afe2:	2300      	movs	r3, #0
 800afe4:	4630      	mov	r0, r6
 800afe6:	f008 ffff 	bl	8013fe8 <rcl_action_wait_set_add_action_client>
 800afea:	2800      	cmp	r0, #0
 800afec:	f43f af3b 	beq.w	800ae66 <rclc_executor_spin_some.part.0+0x62>
 800aff0:	e7bf      	b.n	800af72 <rclc_executor_spin_some.part.0+0x16e>
 800aff2:	f000 fa35 	bl	800b460 <rcutils_reset_error>
 800aff6:	2701      	movs	r7, #1
 800aff8:	4638      	mov	r0, r7
 800affa:	b003      	add	sp, #12
 800affc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b000:	f000 fa2e 	bl	800b460 <rcutils_reset_error>
 800b004:	4638      	mov	r0, r7
 800b006:	b003      	add	sp, #12
 800b008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b00c:	4627      	mov	r7, r4
 800b00e:	e7f3      	b.n	800aff8 <rclc_executor_spin_some.part.0+0x1f4>
 800b010:	68ab      	ldr	r3, [r5, #8]
 800b012:	2b00      	cmp	r3, #0
 800b014:	f000 8092 	beq.w	800b13c <rclc_executor_spin_some.part.0+0x338>
 800b018:	2400      	movs	r4, #0
 800b01a:	46a0      	mov	r8, r4
 800b01c:	f240 1991 	movw	r9, #401	@ 0x191
 800b020:	e008      	b.n	800b034 <rclc_executor_spin_some.part.0+0x230>
 800b022:	f7ff faad 	bl	800a580 <_rclc_check_for_new_data>
 800b026:	4604      	mov	r4, r0
 800b028:	b108      	cbz	r0, 800b02e <rclc_executor_spin_some.part.0+0x22a>
 800b02a:	4548      	cmp	r0, r9
 800b02c:	d1ee      	bne.n	800b00c <rclc_executor_spin_some.part.0+0x208>
 800b02e:	68ab      	ldr	r3, [r5, #8]
 800b030:	4598      	cmp	r8, r3
 800b032:	d265      	bcs.n	800b100 <rclc_executor_spin_some.part.0+0x2fc>
 800b034:	686a      	ldr	r2, [r5, #4]
 800b036:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800b03a:	4631      	mov	r1, r6
 800b03c:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800b040:	f108 0801 	add.w	r8, r8, #1
 800b044:	f1bc 0f00 	cmp.w	ip, #0
 800b048:	d1eb      	bne.n	800b022 <rclc_executor_spin_some.part.0+0x21e>
 800b04a:	4619      	mov	r1, r3
 800b04c:	4610      	mov	r0, r2
 800b04e:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800b052:	4798      	blx	r3
 800b054:	2800      	cmp	r0, #0
 800b056:	d0d9      	beq.n	800b00c <rclc_executor_spin_some.part.0+0x208>
 800b058:	68ab      	ldr	r3, [r5, #8]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d0d6      	beq.n	800b00c <rclc_executor_spin_some.part.0+0x208>
 800b05e:	f04f 0800 	mov.w	r8, #0
 800b062:	f240 1991 	movw	r9, #401	@ 0x191
 800b066:	f240 2a59 	movw	sl, #601	@ 0x259
 800b06a:	e00e      	b.n	800b08a <rclc_executor_spin_some.part.0+0x286>
 800b06c:	f813 300b 	ldrb.w	r3, [r3, fp]
 800b070:	2b08      	cmp	r3, #8
 800b072:	d033      	beq.n	800b0dc <rclc_executor_spin_some.part.0+0x2d8>
 800b074:	2b09      	cmp	r3, #9
 800b076:	d028      	beq.n	800b0ca <rclc_executor_spin_some.part.0+0x2c6>
 800b078:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 800b07c:	b9fb      	cbnz	r3, 800b0be <rclc_executor_spin_some.part.0+0x2ba>
 800b07e:	68ab      	ldr	r3, [r5, #8]
 800b080:	f108 0801 	add.w	r8, r8, #1
 800b084:	4598      	cmp	r8, r3
 800b086:	d2b7      	bcs.n	800aff8 <rclc_executor_spin_some.part.0+0x1f4>
 800b088:	2400      	movs	r4, #0
 800b08a:	6868      	ldr	r0, [r5, #4]
 800b08c:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800b090:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 800b094:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d0b7      	beq.n	800b00c <rclc_executor_spin_some.part.0+0x208>
 800b09c:	4631      	mov	r1, r6
 800b09e:	f7ff fabd 	bl	800a61c <_rclc_take_new_data>
 800b0a2:	b118      	cbz	r0, 800b0ac <rclc_executor_spin_some.part.0+0x2a8>
 800b0a4:	4548      	cmp	r0, r9
 800b0a6:	d001      	beq.n	800b0ac <rclc_executor_spin_some.part.0+0x2a8>
 800b0a8:	4550      	cmp	r0, sl
 800b0aa:	d10c      	bne.n	800b0c6 <rclc_executor_spin_some.part.0+0x2c2>
 800b0ac:	686b      	ldr	r3, [r5, #4]
 800b0ae:	eb13 000b 	adds.w	r0, r3, fp
 800b0b2:	d021      	beq.n	800b0f8 <rclc_executor_spin_some.part.0+0x2f4>
 800b0b4:	7842      	ldrb	r2, [r0, #1]
 800b0b6:	2a00      	cmp	r2, #0
 800b0b8:	d0d8      	beq.n	800b06c <rclc_executor_spin_some.part.0+0x268>
 800b0ba:	2a01      	cmp	r2, #1
 800b0bc:	d1df      	bne.n	800b07e <rclc_executor_spin_some.part.0+0x27a>
 800b0be:	f7ff fc21 	bl	800a904 <_rclc_execute.part.0>
 800b0c2:	2800      	cmp	r0, #0
 800b0c4:	d0db      	beq.n	800b07e <rclc_executor_spin_some.part.0+0x27a>
 800b0c6:	4607      	mov	r7, r0
 800b0c8:	e796      	b.n	800aff8 <rclc_executor_spin_some.part.0+0x1f4>
 800b0ca:	6843      	ldr	r3, [r0, #4]
 800b0cc:	6a1a      	ldr	r2, [r3, #32]
 800b0ce:	2a00      	cmp	r2, #0
 800b0d0:	d1f5      	bne.n	800b0be <rclc_executor_spin_some.part.0+0x2ba>
 800b0d2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d0d1      	beq.n	800b07e <rclc_executor_spin_some.part.0+0x27a>
 800b0da:	e7f0      	b.n	800b0be <rclc_executor_spin_some.part.0+0x2ba>
 800b0dc:	6843      	ldr	r3, [r0, #4]
 800b0de:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b0e0:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800b0e4:	d1eb      	bne.n	800b0be <rclc_executor_spin_some.part.0+0x2ba>
 800b0e6:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800b0ea:	2a00      	cmp	r2, #0
 800b0ec:	d1e7      	bne.n	800b0be <rclc_executor_spin_some.part.0+0x2ba>
 800b0ee:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d0c3      	beq.n	800b07e <rclc_executor_spin_some.part.0+0x27a>
 800b0f6:	e7e2      	b.n	800b0be <rclc_executor_spin_some.part.0+0x2ba>
 800b0f8:	270b      	movs	r7, #11
 800b0fa:	e77d      	b.n	800aff8 <rclc_executor_spin_some.part.0+0x1f4>
 800b0fc:	686a      	ldr	r2, [r5, #4]
 800b0fe:	e6e2      	b.n	800aec6 <rclc_executor_spin_some.part.0+0xc2>
 800b100:	686a      	ldr	r2, [r5, #4]
 800b102:	e7a2      	b.n	800b04a <rclc_executor_spin_some.part.0+0x246>
 800b104:	6842      	ldr	r2, [r0, #4]
 800b106:	6a11      	ldr	r1, [r2, #32]
 800b108:	2900      	cmp	r1, #0
 800b10a:	f47f af21 	bne.w	800af50 <rclc_executor_spin_some.part.0+0x14c>
 800b10e:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 800b112:	2a00      	cmp	r2, #0
 800b114:	f43f af0a 	beq.w	800af2c <rclc_executor_spin_some.part.0+0x128>
 800b118:	e71a      	b.n	800af50 <rclc_executor_spin_some.part.0+0x14c>
 800b11a:	6842      	ldr	r2, [r0, #4]
 800b11c:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 800b11e:	f031 417f 	bics.w	r1, r1, #4278190080	@ 0xff000000
 800b122:	f47f af15 	bne.w	800af50 <rclc_executor_spin_some.part.0+0x14c>
 800b126:	f892 1044 	ldrb.w	r1, [r2, #68]	@ 0x44
 800b12a:	2900      	cmp	r1, #0
 800b12c:	f47f af10 	bne.w	800af50 <rclc_executor_spin_some.part.0+0x14c>
 800b130:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 800b134:	2a00      	cmp	r2, #0
 800b136:	f43f aef9 	beq.w	800af2c <rclc_executor_spin_some.part.0+0x128>
 800b13a:	e709      	b.n	800af50 <rclc_executor_spin_some.part.0+0x14c>
 800b13c:	686a      	ldr	r2, [r5, #4]
 800b13e:	461c      	mov	r4, r3
 800b140:	e783      	b.n	800b04a <rclc_executor_spin_some.part.0+0x246>
 800b142:	686a      	ldr	r2, [r5, #4]
 800b144:	461c      	mov	r4, r3
 800b146:	e6be      	b.n	800aec6 <rclc_executor_spin_some.part.0+0xc2>

0800b148 <rclc_executor_spin_some>:
 800b148:	b190      	cbz	r0, 800b170 <rclc_executor_spin_some+0x28>
 800b14a:	b570      	push	{r4, r5, r6, lr}
 800b14c:	4604      	mov	r4, r0
 800b14e:	6800      	ldr	r0, [r0, #0]
 800b150:	4616      	mov	r6, r2
 800b152:	461d      	mov	r5, r3
 800b154:	f006 feb0 	bl	8011eb8 <rcl_context_is_valid>
 800b158:	b130      	cbz	r0, 800b168 <rclc_executor_spin_some+0x20>
 800b15a:	4632      	mov	r2, r6
 800b15c:	462b      	mov	r3, r5
 800b15e:	4620      	mov	r0, r4
 800b160:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b164:	f7ff be4e 	b.w	800ae04 <rclc_executor_spin_some.part.0>
 800b168:	f000 f97a 	bl	800b460 <rcutils_reset_error>
 800b16c:	2001      	movs	r0, #1
 800b16e:	bd70      	pop	{r4, r5, r6, pc}
 800b170:	200b      	movs	r0, #11
 800b172:	4770      	bx	lr

0800b174 <rclc_executor_handle_counters_zero_init>:
 800b174:	b130      	cbz	r0, 800b184 <rclc_executor_handle_counters_zero_init+0x10>
 800b176:	b508      	push	{r3, lr}
 800b178:	2220      	movs	r2, #32
 800b17a:	2100      	movs	r1, #0
 800b17c:	f00e f9df 	bl	801953e <memset>
 800b180:	2000      	movs	r0, #0
 800b182:	bd08      	pop	{r3, pc}
 800b184:	200b      	movs	r0, #11
 800b186:	4770      	bx	lr

0800b188 <rclc_executor_handle_init>:
 800b188:	b168      	cbz	r0, 800b1a6 <rclc_executor_handle_init+0x1e>
 800b18a:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 800b1b0 <rclc_executor_handle_init+0x28>
 800b18e:	2300      	movs	r3, #0
 800b190:	220b      	movs	r2, #11
 800b192:	ed80 7b0a 	vstr	d7, [r0, #40]	@ 0x28
 800b196:	e9c0 3301 	strd	r3, r3, [r0, #4]
 800b19a:	e9c0 310c 	strd	r3, r1, [r0, #48]	@ 0x30
 800b19e:	8002      	strh	r2, [r0, #0]
 800b1a0:	8703      	strh	r3, [r0, #56]	@ 0x38
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	4770      	bx	lr
 800b1a6:	200b      	movs	r0, #11
 800b1a8:	4770      	bx	lr
 800b1aa:	bf00      	nop
 800b1ac:	f3af 8000 	nop.w
	...

0800b1b8 <rclc_support_init>:
 800b1b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1bc:	b086      	sub	sp, #24
 800b1be:	b3b8      	cbz	r0, 800b230 <rclc_support_init+0x78>
 800b1c0:	461c      	mov	r4, r3
 800b1c2:	b3ab      	cbz	r3, 800b230 <rclc_support_init+0x78>
 800b1c4:	460f      	mov	r7, r1
 800b1c6:	4690      	mov	r8, r2
 800b1c8:	4606      	mov	r6, r0
 800b1ca:	f006 ffdf 	bl	801218c <rcl_get_zero_initialized_init_options>
 800b1ce:	f104 030c 	add.w	r3, r4, #12
 800b1d2:	9005      	str	r0, [sp, #20]
 800b1d4:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b1d8:	e88d 0003 	stmia.w	sp, {r0, r1}
 800b1dc:	a805      	add	r0, sp, #20
 800b1de:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800b1e2:	f006 ffd5 	bl	8012190 <rcl_init_options_init>
 800b1e6:	4605      	mov	r5, r0
 800b1e8:	b9e0      	cbnz	r0, 800b224 <rclc_support_init+0x6c>
 800b1ea:	ad02      	add	r5, sp, #8
 800b1ec:	4628      	mov	r0, r5
 800b1ee:	f006 fe59 	bl	8011ea4 <rcl_get_zero_initialized_context>
 800b1f2:	e895 0003 	ldmia.w	r5, {r0, r1}
 800b1f6:	4633      	mov	r3, r6
 800b1f8:	e886 0003 	stmia.w	r6, {r0, r1}
 800b1fc:	aa05      	add	r2, sp, #20
 800b1fe:	4641      	mov	r1, r8
 800b200:	4638      	mov	r0, r7
 800b202:	f006 febf 	bl	8011f84 <rcl_init>
 800b206:	4605      	mov	r5, r0
 800b208:	b9b8      	cbnz	r0, 800b23a <rclc_support_init+0x82>
 800b20a:	60b4      	str	r4, [r6, #8]
 800b20c:	4622      	mov	r2, r4
 800b20e:	f106 010c 	add.w	r1, r6, #12
 800b212:	2003      	movs	r0, #3
 800b214:	f007 fde6 	bl	8012de4 <rcl_clock_init>
 800b218:	4605      	mov	r5, r0
 800b21a:	b970      	cbnz	r0, 800b23a <rclc_support_init+0x82>
 800b21c:	a805      	add	r0, sp, #20
 800b21e:	f007 f81d 	bl	801225c <rcl_init_options_fini>
 800b222:	b108      	cbz	r0, 800b228 <rclc_support_init+0x70>
 800b224:	f000 f91c 	bl	800b460 <rcutils_reset_error>
 800b228:	4628      	mov	r0, r5
 800b22a:	b006      	add	sp, #24
 800b22c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b230:	250b      	movs	r5, #11
 800b232:	4628      	mov	r0, r5
 800b234:	b006      	add	sp, #24
 800b236:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b23a:	f000 f911 	bl	800b460 <rcutils_reset_error>
 800b23e:	a805      	add	r0, sp, #20
 800b240:	f007 f80c 	bl	801225c <rcl_init_options_fini>
 800b244:	2800      	cmp	r0, #0
 800b246:	d0ef      	beq.n	800b228 <rclc_support_init+0x70>
 800b248:	e7ec      	b.n	800b224 <rclc_support_init+0x6c>
 800b24a:	bf00      	nop

0800b24c <rclc_node_init_default>:
 800b24c:	b3b8      	cbz	r0, 800b2be <rclc_node_init_default+0x72>
 800b24e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b252:	460d      	mov	r5, r1
 800b254:	b0a1      	sub	sp, #132	@ 0x84
 800b256:	b329      	cbz	r1, 800b2a4 <rclc_node_init_default+0x58>
 800b258:	4616      	mov	r6, r2
 800b25a:	b31a      	cbz	r2, 800b2a4 <rclc_node_init_default+0x58>
 800b25c:	461f      	mov	r7, r3
 800b25e:	b30b      	cbz	r3, 800b2a4 <rclc_node_init_default+0x58>
 800b260:	f10d 0810 	add.w	r8, sp, #16
 800b264:	4604      	mov	r4, r0
 800b266:	4640      	mov	r0, r8
 800b268:	f007 f8b0 	bl	80123cc <rcl_get_zero_initialized_node>
 800b26c:	e898 0003 	ldmia.w	r8, {r0, r1}
 800b270:	f10d 0918 	add.w	r9, sp, #24
 800b274:	e884 0003 	stmia.w	r4, {r0, r1}
 800b278:	4648      	mov	r0, r9
 800b27a:	f007 fa1f 	bl	80126bc <rcl_node_get_default_options>
 800b27e:	4640      	mov	r0, r8
 800b280:	f007 f8a4 	bl	80123cc <rcl_get_zero_initialized_node>
 800b284:	f8cd 9000 	str.w	r9, [sp]
 800b288:	e898 0003 	ldmia.w	r8, {r0, r1}
 800b28c:	463b      	mov	r3, r7
 800b28e:	e884 0003 	stmia.w	r4, {r0, r1}
 800b292:	4632      	mov	r2, r6
 800b294:	4629      	mov	r1, r5
 800b296:	4620      	mov	r0, r4
 800b298:	f007 f8a2 	bl	80123e0 <rcl_node_init>
 800b29c:	b930      	cbnz	r0, 800b2ac <rclc_node_init_default+0x60>
 800b29e:	b021      	add	sp, #132	@ 0x84
 800b2a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b2a4:	200b      	movs	r0, #11
 800b2a6:	b021      	add	sp, #132	@ 0x84
 800b2a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b2ac:	9003      	str	r0, [sp, #12]
 800b2ae:	f000 f8d7 	bl	800b460 <rcutils_reset_error>
 800b2b2:	f000 f8d5 	bl	800b460 <rcutils_reset_error>
 800b2b6:	9803      	ldr	r0, [sp, #12]
 800b2b8:	b021      	add	sp, #132	@ 0x84
 800b2ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b2be:	200b      	movs	r0, #11
 800b2c0:	4770      	bx	lr
 800b2c2:	bf00      	nop

0800b2c4 <rclc_publisher_init_default>:
 800b2c4:	b368      	cbz	r0, 800b322 <rclc_publisher_init_default+0x5e>
 800b2c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2ca:	460d      	mov	r5, r1
 800b2cc:	b0a0      	sub	sp, #128	@ 0x80
 800b2ce:	b321      	cbz	r1, 800b31a <rclc_publisher_init_default+0x56>
 800b2d0:	4616      	mov	r6, r2
 800b2d2:	b312      	cbz	r2, 800b31a <rclc_publisher_init_default+0x56>
 800b2d4:	461f      	mov	r7, r3
 800b2d6:	b303      	cbz	r3, 800b31a <rclc_publisher_init_default+0x56>
 800b2d8:	4604      	mov	r4, r0
 800b2da:	f7ff f841 	bl	800a360 <rcl_get_zero_initialized_publisher>
 800b2de:	f10d 0810 	add.w	r8, sp, #16
 800b2e2:	6020      	str	r0, [r4, #0]
 800b2e4:	4640      	mov	r0, r8
 800b2e6:	f7ff f8d7 	bl	800a498 <rcl_publisher_get_default_options>
 800b2ea:	490f      	ldr	r1, [pc, #60]	@ (800b328 <rclc_publisher_init_default+0x64>)
 800b2ec:	2250      	movs	r2, #80	@ 0x50
 800b2ee:	4640      	mov	r0, r8
 800b2f0:	f00e f98d 	bl	801960e <memcpy>
 800b2f4:	f8cd 8000 	str.w	r8, [sp]
 800b2f8:	463b      	mov	r3, r7
 800b2fa:	4632      	mov	r2, r6
 800b2fc:	4629      	mov	r1, r5
 800b2fe:	4620      	mov	r0, r4
 800b300:	f7ff f834 	bl	800a36c <rcl_publisher_init>
 800b304:	b910      	cbnz	r0, 800b30c <rclc_publisher_init_default+0x48>
 800b306:	b020      	add	sp, #128	@ 0x80
 800b308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b30c:	9003      	str	r0, [sp, #12]
 800b30e:	f000 f8a7 	bl	800b460 <rcutils_reset_error>
 800b312:	9803      	ldr	r0, [sp, #12]
 800b314:	b020      	add	sp, #128	@ 0x80
 800b316:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b31a:	200b      	movs	r0, #11
 800b31c:	b020      	add	sp, #128	@ 0x80
 800b31e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b322:	200b      	movs	r0, #11
 800b324:	4770      	bx	lr
 800b326:	bf00      	nop
 800b328:	0801ac60 	.word	0x0801ac60

0800b32c <rclc_subscription_init_default>:
 800b32c:	b368      	cbz	r0, 800b38a <rclc_subscription_init_default+0x5e>
 800b32e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b332:	460d      	mov	r5, r1
 800b334:	b0a0      	sub	sp, #128	@ 0x80
 800b336:	b321      	cbz	r1, 800b382 <rclc_subscription_init_default+0x56>
 800b338:	4616      	mov	r6, r2
 800b33a:	b312      	cbz	r2, 800b382 <rclc_subscription_init_default+0x56>
 800b33c:	461f      	mov	r7, r3
 800b33e:	b303      	cbz	r3, 800b382 <rclc_subscription_init_default+0x56>
 800b340:	4604      	mov	r4, r0
 800b342:	f007 fbf3 	bl	8012b2c <rcl_get_zero_initialized_subscription>
 800b346:	f10d 0810 	add.w	r8, sp, #16
 800b34a:	6020      	str	r0, [r4, #0]
 800b34c:	4640      	mov	r0, r8
 800b34e:	f007 fc9b 	bl	8012c88 <rcl_subscription_get_default_options>
 800b352:	490f      	ldr	r1, [pc, #60]	@ (800b390 <rclc_subscription_init_default+0x64>)
 800b354:	2250      	movs	r2, #80	@ 0x50
 800b356:	4640      	mov	r0, r8
 800b358:	f00e f959 	bl	801960e <memcpy>
 800b35c:	f8cd 8000 	str.w	r8, [sp]
 800b360:	463b      	mov	r3, r7
 800b362:	4632      	mov	r2, r6
 800b364:	4629      	mov	r1, r5
 800b366:	4620      	mov	r0, r4
 800b368:	f007 fbe6 	bl	8012b38 <rcl_subscription_init>
 800b36c:	b910      	cbnz	r0, 800b374 <rclc_subscription_init_default+0x48>
 800b36e:	b020      	add	sp, #128	@ 0x80
 800b370:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b374:	9003      	str	r0, [sp, #12]
 800b376:	f000 f873 	bl	800b460 <rcutils_reset_error>
 800b37a:	9803      	ldr	r0, [sp, #12]
 800b37c:	b020      	add	sp, #128	@ 0x80
 800b37e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b382:	200b      	movs	r0, #11
 800b384:	b020      	add	sp, #128	@ 0x80
 800b386:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b38a:	200b      	movs	r0, #11
 800b38c:	4770      	bx	lr
 800b38e:	bf00      	nop
 800b390:	0801acb0 	.word	0x0801acb0

0800b394 <__default_zero_allocate>:
 800b394:	f00d bb36 	b.w	8018a04 <calloc>

0800b398 <__default_reallocate>:
 800b398:	f00d bd08 	b.w	8018dac <realloc>

0800b39c <__default_deallocate>:
 800b39c:	f00d bbb0 	b.w	8018b00 <free>

0800b3a0 <__default_allocate>:
 800b3a0:	f00d bba6 	b.w	8018af0 <malloc>

0800b3a4 <rcutils_get_zero_initialized_allocator>:
 800b3a4:	b510      	push	{r4, lr}
 800b3a6:	4c05      	ldr	r4, [pc, #20]	@ (800b3bc <rcutils_get_zero_initialized_allocator+0x18>)
 800b3a8:	4686      	mov	lr, r0
 800b3aa:	4684      	mov	ip, r0
 800b3ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b3ae:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b3b2:	6823      	ldr	r3, [r4, #0]
 800b3b4:	f8cc 3000 	str.w	r3, [ip]
 800b3b8:	4670      	mov	r0, lr
 800b3ba:	bd10      	pop	{r4, pc}
 800b3bc:	0801ad00 	.word	0x0801ad00

0800b3c0 <rcutils_set_default_allocator>:
 800b3c0:	b1a8      	cbz	r0, 800b3ee <rcutils_set_default_allocator+0x2e>
 800b3c2:	6802      	ldr	r2, [r0, #0]
 800b3c4:	b1a2      	cbz	r2, 800b3f0 <rcutils_set_default_allocator+0x30>
 800b3c6:	6841      	ldr	r1, [r0, #4]
 800b3c8:	b1a1      	cbz	r1, 800b3f4 <rcutils_set_default_allocator+0x34>
 800b3ca:	b410      	push	{r4}
 800b3cc:	68c4      	ldr	r4, [r0, #12]
 800b3ce:	b164      	cbz	r4, 800b3ea <rcutils_set_default_allocator+0x2a>
 800b3d0:	6880      	ldr	r0, [r0, #8]
 800b3d2:	b138      	cbz	r0, 800b3e4 <rcutils_set_default_allocator+0x24>
 800b3d4:	4b08      	ldr	r3, [pc, #32]	@ (800b3f8 <rcutils_set_default_allocator+0x38>)
 800b3d6:	601a      	str	r2, [r3, #0]
 800b3d8:	2200      	movs	r2, #0
 800b3da:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800b3de:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800b3e2:	2001      	movs	r0, #1
 800b3e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b3e8:	4770      	bx	lr
 800b3ea:	4620      	mov	r0, r4
 800b3ec:	e7fa      	b.n	800b3e4 <rcutils_set_default_allocator+0x24>
 800b3ee:	4770      	bx	lr
 800b3f0:	4610      	mov	r0, r2
 800b3f2:	4770      	bx	lr
 800b3f4:	4608      	mov	r0, r1
 800b3f6:	4770      	bx	lr
 800b3f8:	20000158 	.word	0x20000158

0800b3fc <rcutils_get_default_allocator>:
 800b3fc:	b510      	push	{r4, lr}
 800b3fe:	4c05      	ldr	r4, [pc, #20]	@ (800b414 <rcutils_get_default_allocator+0x18>)
 800b400:	4686      	mov	lr, r0
 800b402:	4684      	mov	ip, r0
 800b404:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b406:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b40a:	6823      	ldr	r3, [r4, #0]
 800b40c:	f8cc 3000 	str.w	r3, [ip]
 800b410:	4670      	mov	r0, lr
 800b412:	bd10      	pop	{r4, pc}
 800b414:	20000158 	.word	0x20000158

0800b418 <rcutils_allocator_is_valid>:
 800b418:	b158      	cbz	r0, 800b432 <rcutils_allocator_is_valid+0x1a>
 800b41a:	6803      	ldr	r3, [r0, #0]
 800b41c:	b143      	cbz	r3, 800b430 <rcutils_allocator_is_valid+0x18>
 800b41e:	6843      	ldr	r3, [r0, #4]
 800b420:	b133      	cbz	r3, 800b430 <rcutils_allocator_is_valid+0x18>
 800b422:	68c3      	ldr	r3, [r0, #12]
 800b424:	b123      	cbz	r3, 800b430 <rcutils_allocator_is_valid+0x18>
 800b426:	6880      	ldr	r0, [r0, #8]
 800b428:	3800      	subs	r0, #0
 800b42a:	bf18      	it	ne
 800b42c:	2001      	movne	r0, #1
 800b42e:	4770      	bx	lr
 800b430:	4618      	mov	r0, r3
 800b432:	4770      	bx	lr

0800b434 <rcutils_get_error_string>:
 800b434:	4b06      	ldr	r3, [pc, #24]	@ (800b450 <rcutils_get_error_string+0x1c>)
 800b436:	781b      	ldrb	r3, [r3, #0]
 800b438:	b13b      	cbz	r3, 800b44a <rcutils_get_error_string+0x16>
 800b43a:	4b06      	ldr	r3, [pc, #24]	@ (800b454 <rcutils_get_error_string+0x20>)
 800b43c:	781a      	ldrb	r2, [r3, #0]
 800b43e:	b90a      	cbnz	r2, 800b444 <rcutils_get_error_string+0x10>
 800b440:	2201      	movs	r2, #1
 800b442:	701a      	strb	r2, [r3, #0]
 800b444:	4b04      	ldr	r3, [pc, #16]	@ (800b458 <rcutils_get_error_string+0x24>)
 800b446:	7818      	ldrb	r0, [r3, #0]
 800b448:	4770      	bx	lr
 800b44a:	4b04      	ldr	r3, [pc, #16]	@ (800b45c <rcutils_get_error_string+0x28>)
 800b44c:	7818      	ldrb	r0, [r3, #0]
 800b44e:	4770      	bx	lr
 800b450:	20010a60 	.word	0x20010a60
 800b454:	20010a79 	.word	0x20010a79
 800b458:	20010a78 	.word	0x20010a78
 800b45c:	0801ad14 	.word	0x0801ad14

0800b460 <rcutils_reset_error>:
 800b460:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 800b480 <rcutils_reset_error+0x20>
 800b464:	4a08      	ldr	r2, [pc, #32]	@ (800b488 <rcutils_reset_error+0x28>)
 800b466:	4809      	ldr	r0, [pc, #36]	@ (800b48c <rcutils_reset_error+0x2c>)
 800b468:	4909      	ldr	r1, [pc, #36]	@ (800b490 <rcutils_reset_error+0x30>)
 800b46a:	2300      	movs	r3, #0
 800b46c:	8013      	strh	r3, [r2, #0]
 800b46e:	ed82 7b02 	vstr	d7, [r2, #8]
 800b472:	4a08      	ldr	r2, [pc, #32]	@ (800b494 <rcutils_reset_error+0x34>)
 800b474:	7003      	strb	r3, [r0, #0]
 800b476:	700b      	strb	r3, [r1, #0]
 800b478:	7013      	strb	r3, [r2, #0]
 800b47a:	4770      	bx	lr
 800b47c:	f3af 8000 	nop.w
	...
 800b488:	20010a68 	.word	0x20010a68
 800b48c:	20010a79 	.word	0x20010a79
 800b490:	20010a78 	.word	0x20010a78
 800b494:	20010a60 	.word	0x20010a60

0800b498 <rcutils_system_time_now>:
 800b498:	b308      	cbz	r0, 800b4de <rcutils_system_time_now+0x46>
 800b49a:	b570      	push	{r4, r5, r6, lr}
 800b49c:	b084      	sub	sp, #16
 800b49e:	4604      	mov	r4, r0
 800b4a0:	4669      	mov	r1, sp
 800b4a2:	2001      	movs	r0, #1
 800b4a4:	f7f6 fe74 	bl	8002190 <clock_gettime>
 800b4a8:	e9dd 3500 	ldrd	r3, r5, [sp]
 800b4ac:	2d00      	cmp	r5, #0
 800b4ae:	db13      	blt.n	800b4d8 <rcutils_system_time_now+0x40>
 800b4b0:	9902      	ldr	r1, [sp, #8]
 800b4b2:	2900      	cmp	r1, #0
 800b4b4:	db0d      	blt.n	800b4d2 <rcutils_system_time_now+0x3a>
 800b4b6:	4e0b      	ldr	r6, [pc, #44]	@ (800b4e4 <rcutils_system_time_now+0x4c>)
 800b4b8:	fba3 3206 	umull	r3, r2, r3, r6
 800b4bc:	185b      	adds	r3, r3, r1
 800b4be:	fb06 2205 	mla	r2, r6, r5, r2
 800b4c2:	f04f 0000 	mov.w	r0, #0
 800b4c6:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800b4ca:	e9c4 3200 	strd	r3, r2, [r4]
 800b4ce:	b004      	add	sp, #16
 800b4d0:	bd70      	pop	{r4, r5, r6, pc}
 800b4d2:	ea53 0205 	orrs.w	r2, r3, r5
 800b4d6:	d1ee      	bne.n	800b4b6 <rcutils_system_time_now+0x1e>
 800b4d8:	2002      	movs	r0, #2
 800b4da:	b004      	add	sp, #16
 800b4dc:	bd70      	pop	{r4, r5, r6, pc}
 800b4de:	200b      	movs	r0, #11
 800b4e0:	4770      	bx	lr
 800b4e2:	bf00      	nop
 800b4e4:	3b9aca00 	.word	0x3b9aca00

0800b4e8 <rcutils_steady_time_now>:
 800b4e8:	b308      	cbz	r0, 800b52e <rcutils_steady_time_now+0x46>
 800b4ea:	b570      	push	{r4, r5, r6, lr}
 800b4ec:	b084      	sub	sp, #16
 800b4ee:	4604      	mov	r4, r0
 800b4f0:	4669      	mov	r1, sp
 800b4f2:	2000      	movs	r0, #0
 800b4f4:	f7f6 fe4c 	bl	8002190 <clock_gettime>
 800b4f8:	e9dd 3500 	ldrd	r3, r5, [sp]
 800b4fc:	2d00      	cmp	r5, #0
 800b4fe:	db13      	blt.n	800b528 <rcutils_steady_time_now+0x40>
 800b500:	9902      	ldr	r1, [sp, #8]
 800b502:	2900      	cmp	r1, #0
 800b504:	db0d      	blt.n	800b522 <rcutils_steady_time_now+0x3a>
 800b506:	4e0b      	ldr	r6, [pc, #44]	@ (800b534 <rcutils_steady_time_now+0x4c>)
 800b508:	fba3 3206 	umull	r3, r2, r3, r6
 800b50c:	185b      	adds	r3, r3, r1
 800b50e:	fb06 2205 	mla	r2, r6, r5, r2
 800b512:	f04f 0000 	mov.w	r0, #0
 800b516:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800b51a:	e9c4 3200 	strd	r3, r2, [r4]
 800b51e:	b004      	add	sp, #16
 800b520:	bd70      	pop	{r4, r5, r6, pc}
 800b522:	ea53 0205 	orrs.w	r2, r3, r5
 800b526:	d1ee      	bne.n	800b506 <rcutils_steady_time_now+0x1e>
 800b528:	2002      	movs	r0, #2
 800b52a:	b004      	add	sp, #16
 800b52c:	bd70      	pop	{r4, r5, r6, pc}
 800b52e:	200b      	movs	r0, #11
 800b530:	4770      	bx	lr
 800b532:	bf00      	nop
 800b534:	3b9aca00 	.word	0x3b9aca00

0800b538 <rmw_get_default_publisher_options>:
 800b538:	2200      	movs	r2, #0
 800b53a:	6002      	str	r2, [r0, #0]
 800b53c:	7102      	strb	r2, [r0, #4]
 800b53e:	4770      	bx	lr

0800b540 <rmw_uros_set_custom_transport>:
 800b540:	b470      	push	{r4, r5, r6}
 800b542:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800b546:	b162      	cbz	r2, 800b562 <rmw_uros_set_custom_transport+0x22>
 800b548:	b15b      	cbz	r3, 800b562 <rmw_uros_set_custom_transport+0x22>
 800b54a:	b155      	cbz	r5, 800b562 <rmw_uros_set_custom_transport+0x22>
 800b54c:	b14e      	cbz	r6, 800b562 <rmw_uros_set_custom_transport+0x22>
 800b54e:	4c06      	ldr	r4, [pc, #24]	@ (800b568 <rmw_uros_set_custom_transport+0x28>)
 800b550:	7020      	strb	r0, [r4, #0]
 800b552:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800b556:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800b55a:	6166      	str	r6, [r4, #20]
 800b55c:	2000      	movs	r0, #0
 800b55e:	bc70      	pop	{r4, r5, r6}
 800b560:	4770      	bx	lr
 800b562:	200b      	movs	r0, #11
 800b564:	bc70      	pop	{r4, r5, r6}
 800b566:	4770      	bx	lr
 800b568:	20010a7c 	.word	0x20010a7c

0800b56c <flush_session>:
 800b56c:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 800b56e:	f004 bc7b 	b.w	800fe68 <uxr_run_session_until_confirm_delivery>
 800b572:	bf00      	nop

0800b574 <rmw_publish>:
 800b574:	2800      	cmp	r0, #0
 800b576:	d053      	beq.n	800b620 <rmw_publish+0xac>
 800b578:	b570      	push	{r4, r5, r6, lr}
 800b57a:	460d      	mov	r5, r1
 800b57c:	b08e      	sub	sp, #56	@ 0x38
 800b57e:	2900      	cmp	r1, #0
 800b580:	d04b      	beq.n	800b61a <rmw_publish+0xa6>
 800b582:	4604      	mov	r4, r0
 800b584:	6800      	ldr	r0, [r0, #0]
 800b586:	f000 fced 	bl	800bf64 <is_uxrce_rmw_identifier_valid>
 800b58a:	2800      	cmp	r0, #0
 800b58c:	d045      	beq.n	800b61a <rmw_publish+0xa6>
 800b58e:	6866      	ldr	r6, [r4, #4]
 800b590:	2e00      	cmp	r6, #0
 800b592:	d042      	beq.n	800b61a <rmw_publish+0xa6>
 800b594:	69b4      	ldr	r4, [r6, #24]
 800b596:	4628      	mov	r0, r5
 800b598:	6923      	ldr	r3, [r4, #16]
 800b59a:	4798      	blx	r3
 800b59c:	69f3      	ldr	r3, [r6, #28]
 800b59e:	9005      	str	r0, [sp, #20]
 800b5a0:	b113      	cbz	r3, 800b5a8 <rmw_publish+0x34>
 800b5a2:	a805      	add	r0, sp, #20
 800b5a4:	4798      	blx	r3
 800b5a6:	9805      	ldr	r0, [sp, #20]
 800b5a8:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800b5ac:	691b      	ldr	r3, [r3, #16]
 800b5ae:	9000      	str	r0, [sp, #0]
 800b5b0:	6972      	ldr	r2, [r6, #20]
 800b5b2:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800b5b4:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800b5b8:	ab06      	add	r3, sp, #24
 800b5ba:	f005 fa41 	bl	8010a40 <uxr_prepare_output_stream>
 800b5be:	b1d8      	cbz	r0, 800b5f8 <rmw_publish+0x84>
 800b5c0:	68a3      	ldr	r3, [r4, #8]
 800b5c2:	a906      	add	r1, sp, #24
 800b5c4:	4628      	mov	r0, r5
 800b5c6:	4798      	blx	r3
 800b5c8:	6a33      	ldr	r3, [r6, #32]
 800b5ca:	4604      	mov	r4, r0
 800b5cc:	b10b      	cbz	r3, 800b5d2 <rmw_publish+0x5e>
 800b5ce:	a806      	add	r0, sp, #24
 800b5d0:	4798      	blx	r3
 800b5d2:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 800b5d6:	2b01      	cmp	r3, #1
 800b5d8:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800b5dc:	d022      	beq.n	800b624 <rmw_publish+0xb0>
 800b5de:	6918      	ldr	r0, [r3, #16]
 800b5e0:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 800b5e2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800b5e6:	f004 fc3f 	bl	800fe68 <uxr_run_session_until_confirm_delivery>
 800b5ea:	4020      	ands	r0, r4
 800b5ec:	b2c4      	uxtb	r4, r0
 800b5ee:	f084 0001 	eor.w	r0, r4, #1
 800b5f2:	b2c0      	uxtb	r0, r0
 800b5f4:	b00e      	add	sp, #56	@ 0x38
 800b5f6:	bd70      	pop	{r4, r5, r6, pc}
 800b5f8:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800b5fc:	6918      	ldr	r0, [r3, #16]
 800b5fe:	9b05      	ldr	r3, [sp, #20]
 800b600:	9300      	str	r3, [sp, #0]
 800b602:	4b0b      	ldr	r3, [pc, #44]	@ (800b630 <rmw_publish+0xbc>)
 800b604:	9301      	str	r3, [sp, #4]
 800b606:	9602      	str	r6, [sp, #8]
 800b608:	6972      	ldr	r2, [r6, #20]
 800b60a:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800b60c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800b610:	ab06      	add	r3, sp, #24
 800b612:	f005 fa45 	bl	8010aa0 <uxr_prepare_output_stream_fragmented>
 800b616:	2800      	cmp	r0, #0
 800b618:	d1d2      	bne.n	800b5c0 <rmw_publish+0x4c>
 800b61a:	2001      	movs	r0, #1
 800b61c:	b00e      	add	sp, #56	@ 0x38
 800b61e:	bd70      	pop	{r4, r5, r6, pc}
 800b620:	2001      	movs	r0, #1
 800b622:	4770      	bx	lr
 800b624:	6918      	ldr	r0, [r3, #16]
 800b626:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800b62a:	f004 f85d 	bl	800f6e8 <uxr_flash_output_streams>
 800b62e:	e7de      	b.n	800b5ee <rmw_publish+0x7a>
 800b630:	0800b56d 	.word	0x0800b56d

0800b634 <rmw_create_publisher>:
 800b634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b638:	b087      	sub	sp, #28
 800b63a:	2800      	cmp	r0, #0
 800b63c:	f000 80cc 	beq.w	800b7d8 <rmw_create_publisher+0x1a4>
 800b640:	460e      	mov	r6, r1
 800b642:	2900      	cmp	r1, #0
 800b644:	f000 80c8 	beq.w	800b7d8 <rmw_create_publisher+0x1a4>
 800b648:	4604      	mov	r4, r0
 800b64a:	6800      	ldr	r0, [r0, #0]
 800b64c:	4615      	mov	r5, r2
 800b64e:	4698      	mov	r8, r3
 800b650:	f000 fc88 	bl	800bf64 <is_uxrce_rmw_identifier_valid>
 800b654:	2800      	cmp	r0, #0
 800b656:	f000 80bf 	beq.w	800b7d8 <rmw_create_publisher+0x1a4>
 800b65a:	2d00      	cmp	r5, #0
 800b65c:	f000 80bc 	beq.w	800b7d8 <rmw_create_publisher+0x1a4>
 800b660:	782b      	ldrb	r3, [r5, #0]
 800b662:	2b00      	cmp	r3, #0
 800b664:	f000 80b8 	beq.w	800b7d8 <rmw_create_publisher+0x1a4>
 800b668:	f1b8 0f00 	cmp.w	r8, #0
 800b66c:	f000 80b4 	beq.w	800b7d8 <rmw_create_publisher+0x1a4>
 800b670:	485c      	ldr	r0, [pc, #368]	@ (800b7e4 <rmw_create_publisher+0x1b0>)
 800b672:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800b676:	f009 fe5f 	bl	8015338 <get_memory>
 800b67a:	2800      	cmp	r0, #0
 800b67c:	f000 80ac 	beq.w	800b7d8 <rmw_create_publisher+0x1a4>
 800b680:	6884      	ldr	r4, [r0, #8]
 800b682:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 800b686:	f009 febf 	bl	8015408 <rmw_get_implementation_identifier>
 800b68a:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 800b68e:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 800b692:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 800b696:	4628      	mov	r0, r5
 800b698:	f7f4 fdb2 	bl	8000200 <strlen>
 800b69c:	3001      	adds	r0, #1
 800b69e:	283c      	cmp	r0, #60	@ 0x3c
 800b6a0:	f104 0784 	add.w	r7, r4, #132	@ 0x84
 800b6a4:	f200 8091 	bhi.w	800b7ca <rmw_create_publisher+0x196>
 800b6a8:	4a4f      	ldr	r2, [pc, #316]	@ (800b7e8 <rmw_create_publisher+0x1b4>)
 800b6aa:	462b      	mov	r3, r5
 800b6ac:	213c      	movs	r1, #60	@ 0x3c
 800b6ae:	4650      	mov	r0, sl
 800b6b0:	f00d fad0 	bl	8018c54 <sniprintf>
 800b6b4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800b6b8:	67e3      	str	r3, [r4, #124]	@ 0x7c
 800b6ba:	4641      	mov	r1, r8
 800b6bc:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 800b6c0:	2250      	movs	r2, #80	@ 0x50
 800b6c2:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800b6c6:	f00d ffa2 	bl	801960e <memcpy>
 800b6ca:	f898 3008 	ldrb.w	r3, [r8, #8]
 800b6ce:	4947      	ldr	r1, [pc, #284]	@ (800b7ec <rmw_create_publisher+0x1b8>)
 800b6d0:	2b02      	cmp	r3, #2
 800b6d2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b6d6:	bf0c      	ite	eq
 800b6d8:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 800b6dc:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 800b6e0:	67a3      	str	r3, [r4, #120]	@ 0x78
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800b6e8:	4630      	mov	r0, r6
 800b6ea:	f000 fc49 	bl	800bf80 <get_message_typesupport_handle>
 800b6ee:	2800      	cmp	r0, #0
 800b6f0:	d06b      	beq.n	800b7ca <rmw_create_publisher+0x196>
 800b6f2:	6842      	ldr	r2, [r0, #4]
 800b6f4:	61a2      	str	r2, [r4, #24]
 800b6f6:	2a00      	cmp	r2, #0
 800b6f8:	d067      	beq.n	800b7ca <rmw_create_publisher+0x196>
 800b6fa:	4629      	mov	r1, r5
 800b6fc:	4643      	mov	r3, r8
 800b6fe:	4648      	mov	r0, r9
 800b700:	f00a f8e8 	bl	80158d4 <create_topic>
 800b704:	6260      	str	r0, [r4, #36]	@ 0x24
 800b706:	2800      	cmp	r0, #0
 800b708:	d063      	beq.n	800b7d2 <rmw_create_publisher+0x19e>
 800b70a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b70e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b712:	2103      	movs	r1, #3
 800b714:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 800b718:	1c42      	adds	r2, r0, #1
 800b71a:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 800b71e:	f003 fe95 	bl	800f44c <uxr_object_id>
 800b722:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 800b726:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b72a:	6120      	str	r0, [r4, #16]
 800b72c:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 800b730:	6910      	ldr	r0, [r2, #16]
 800b732:	2506      	movs	r5, #6
 800b734:	9500      	str	r5, [sp, #0]
 800b736:	6819      	ldr	r1, [r3, #0]
 800b738:	6922      	ldr	r2, [r4, #16]
 800b73a:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800b73e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800b742:	f003 fd35 	bl	800f1b0 <uxr_buffer_create_publisher_bin>
 800b746:	4602      	mov	r2, r0
 800b748:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800b74c:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800b750:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800b754:	f000 fb86 	bl	800be64 <run_xrce_session>
 800b758:	b3b8      	cbz	r0, 800b7ca <rmw_create_publisher+0x196>
 800b75a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b75e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b762:	2105      	movs	r1, #5
 800b764:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 800b768:	1c42      	adds	r2, r0, #1
 800b76a:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 800b76e:	f003 fe6d 	bl	800f44c <uxr_object_id>
 800b772:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800b776:	6160      	str	r0, [r4, #20]
 800b778:	691e      	ldr	r6, [r3, #16]
 800b77a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b77e:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 800b782:	f10d 0a10 	add.w	sl, sp, #16
 800b786:	4641      	mov	r1, r8
 800b788:	4650      	mov	r0, sl
 800b78a:	f8d3 8384 	ldr.w	r8, [r3, #900]	@ 0x384
 800b78e:	f000 fb85 	bl	800be9c <convert_qos_profile>
 800b792:	9503      	str	r5, [sp, #12]
 800b794:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800b798:	9001      	str	r0, [sp, #4]
 800b79a:	f8ad 1008 	strh.w	r1, [sp, #8]
 800b79e:	f8db 3010 	ldr.w	r3, [fp, #16]
 800b7a2:	9300      	str	r3, [sp, #0]
 800b7a4:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 800b7a8:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800b7ac:	f8d8 1000 	ldr.w	r1, [r8]
 800b7b0:	4630      	mov	r0, r6
 800b7b2:	f003 fd5d 	bl	800f270 <uxr_buffer_create_datawriter_bin>
 800b7b6:	4602      	mov	r2, r0
 800b7b8:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800b7bc:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800b7c0:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800b7c4:	f000 fb4e 	bl	800be64 <run_xrce_session>
 800b7c8:	b938      	cbnz	r0, 800b7da <rmw_create_publisher+0x1a6>
 800b7ca:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800b7cc:	b108      	cbz	r0, 800b7d2 <rmw_create_publisher+0x19e>
 800b7ce:	f000 fa47 	bl	800bc60 <rmw_uxrce_fini_topic_memory>
 800b7d2:	4638      	mov	r0, r7
 800b7d4:	f000 f9ec 	bl	800bbb0 <rmw_uxrce_fini_publisher_memory>
 800b7d8:	2700      	movs	r7, #0
 800b7da:	4638      	mov	r0, r7
 800b7dc:	b007      	add	sp, #28
 800b7de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7e2:	bf00      	nop
 800b7e4:	20015374 	.word	0x20015374
 800b7e8:	0801ad28 	.word	0x0801ad28
 800b7ec:	0801aae0 	.word	0x0801aae0

0800b7f0 <rmw_publisher_get_actual_qos>:
 800b7f0:	b150      	cbz	r0, 800b808 <rmw_publisher_get_actual_qos+0x18>
 800b7f2:	b508      	push	{r3, lr}
 800b7f4:	460b      	mov	r3, r1
 800b7f6:	b149      	cbz	r1, 800b80c <rmw_publisher_get_actual_qos+0x1c>
 800b7f8:	6841      	ldr	r1, [r0, #4]
 800b7fa:	2250      	movs	r2, #80	@ 0x50
 800b7fc:	3128      	adds	r1, #40	@ 0x28
 800b7fe:	4618      	mov	r0, r3
 800b800:	f00d ff05 	bl	801960e <memcpy>
 800b804:	2000      	movs	r0, #0
 800b806:	bd08      	pop	{r3, pc}
 800b808:	200b      	movs	r0, #11
 800b80a:	4770      	bx	lr
 800b80c:	200b      	movs	r0, #11
 800b80e:	bd08      	pop	{r3, pc}

0800b810 <rmw_destroy_publisher>:
 800b810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b812:	b128      	cbz	r0, 800b820 <rmw_destroy_publisher+0x10>
 800b814:	4604      	mov	r4, r0
 800b816:	6800      	ldr	r0, [r0, #0]
 800b818:	460d      	mov	r5, r1
 800b81a:	f000 fba3 	bl	800bf64 <is_uxrce_rmw_identifier_valid>
 800b81e:	b910      	cbnz	r0, 800b826 <rmw_destroy_publisher+0x16>
 800b820:	2401      	movs	r4, #1
 800b822:	4620      	mov	r0, r4
 800b824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b826:	6863      	ldr	r3, [r4, #4]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d0f9      	beq.n	800b820 <rmw_destroy_publisher+0x10>
 800b82c:	2d00      	cmp	r5, #0
 800b82e:	d0f7      	beq.n	800b820 <rmw_destroy_publisher+0x10>
 800b830:	6828      	ldr	r0, [r5, #0]
 800b832:	f000 fb97 	bl	800bf64 <is_uxrce_rmw_identifier_valid>
 800b836:	2800      	cmp	r0, #0
 800b838:	d0f2      	beq.n	800b820 <rmw_destroy_publisher+0x10>
 800b83a:	686c      	ldr	r4, [r5, #4]
 800b83c:	2c00      	cmp	r4, #0
 800b83e:	d0ef      	beq.n	800b820 <rmw_destroy_publisher+0x10>
 800b840:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800b842:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 800b846:	f00a f895 	bl	8015974 <destroy_topic>
 800b84a:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800b84e:	6962      	ldr	r2, [r4, #20]
 800b850:	6918      	ldr	r0, [r3, #16]
 800b852:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800b856:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800b85a:	6819      	ldr	r1, [r3, #0]
 800b85c:	f003 fbf4 	bl	800f048 <uxr_buffer_delete_entity>
 800b860:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800b864:	6922      	ldr	r2, [r4, #16]
 800b866:	691b      	ldr	r3, [r3, #16]
 800b868:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800b86c:	4604      	mov	r4, r0
 800b86e:	6809      	ldr	r1, [r1, #0]
 800b870:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800b874:	f003 fbe8 	bl	800f048 <uxr_buffer_delete_entity>
 800b878:	693e      	ldr	r6, [r7, #16]
 800b87a:	4622      	mov	r2, r4
 800b87c:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800b880:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800b884:	4604      	mov	r4, r0
 800b886:	4630      	mov	r0, r6
 800b888:	f000 faec 	bl	800be64 <run_xrce_session>
 800b88c:	693e      	ldr	r6, [r7, #16]
 800b88e:	4622      	mov	r2, r4
 800b890:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800b894:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800b898:	4604      	mov	r4, r0
 800b89a:	4630      	mov	r0, r6
 800b89c:	f000 fae2 	bl	800be64 <run_xrce_session>
 800b8a0:	b12c      	cbz	r4, 800b8ae <rmw_destroy_publisher+0x9e>
 800b8a2:	b120      	cbz	r0, 800b8ae <rmw_destroy_publisher+0x9e>
 800b8a4:	2400      	movs	r4, #0
 800b8a6:	4628      	mov	r0, r5
 800b8a8:	f000 f982 	bl	800bbb0 <rmw_uxrce_fini_publisher_memory>
 800b8ac:	e7b9      	b.n	800b822 <rmw_destroy_publisher+0x12>
 800b8ae:	2402      	movs	r4, #2
 800b8b0:	e7f9      	b.n	800b8a6 <rmw_destroy_publisher+0x96>
 800b8b2:	bf00      	nop

0800b8b4 <rmw_uxrce_init_service_memory>:
 800b8b4:	b1e2      	cbz	r2, 800b8f0 <rmw_uxrce_init_service_memory+0x3c>
 800b8b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8ba:	7b05      	ldrb	r5, [r0, #12]
 800b8bc:	4606      	mov	r6, r0
 800b8be:	b9ad      	cbnz	r5, 800b8ec <rmw_uxrce_init_service_memory+0x38>
 800b8c0:	23c8      	movs	r3, #200	@ 0xc8
 800b8c2:	e9c0 5500 	strd	r5, r5, [r0]
 800b8c6:	6083      	str	r3, [r0, #8]
 800b8c8:	f240 1301 	movw	r3, #257	@ 0x101
 800b8cc:	4617      	mov	r7, r2
 800b8ce:	8183      	strh	r3, [r0, #12]
 800b8d0:	460c      	mov	r4, r1
 800b8d2:	46a8      	mov	r8, r5
 800b8d4:	4621      	mov	r1, r4
 800b8d6:	4630      	mov	r0, r6
 800b8d8:	3501      	adds	r5, #1
 800b8da:	f009 fd3d 	bl	8015358 <put_memory>
 800b8de:	42af      	cmp	r7, r5
 800b8e0:	60a4      	str	r4, [r4, #8]
 800b8e2:	f884 800c 	strb.w	r8, [r4, #12]
 800b8e6:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800b8ea:	d1f3      	bne.n	800b8d4 <rmw_uxrce_init_service_memory+0x20>
 800b8ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8f0:	4770      	bx	lr
 800b8f2:	bf00      	nop

0800b8f4 <rmw_uxrce_init_client_memory>:
 800b8f4:	b1e2      	cbz	r2, 800b930 <rmw_uxrce_init_client_memory+0x3c>
 800b8f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8fa:	7b05      	ldrb	r5, [r0, #12]
 800b8fc:	4606      	mov	r6, r0
 800b8fe:	b9ad      	cbnz	r5, 800b92c <rmw_uxrce_init_client_memory+0x38>
 800b900:	23c8      	movs	r3, #200	@ 0xc8
 800b902:	e9c0 5500 	strd	r5, r5, [r0]
 800b906:	6083      	str	r3, [r0, #8]
 800b908:	f240 1301 	movw	r3, #257	@ 0x101
 800b90c:	4617      	mov	r7, r2
 800b90e:	8183      	strh	r3, [r0, #12]
 800b910:	460c      	mov	r4, r1
 800b912:	46a8      	mov	r8, r5
 800b914:	4621      	mov	r1, r4
 800b916:	4630      	mov	r0, r6
 800b918:	3501      	adds	r5, #1
 800b91a:	f009 fd1d 	bl	8015358 <put_memory>
 800b91e:	42af      	cmp	r7, r5
 800b920:	60a4      	str	r4, [r4, #8]
 800b922:	f884 800c 	strb.w	r8, [r4, #12]
 800b926:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800b92a:	d1f3      	bne.n	800b914 <rmw_uxrce_init_client_memory+0x20>
 800b92c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b930:	4770      	bx	lr
 800b932:	bf00      	nop

0800b934 <rmw_uxrce_init_publisher_memory>:
 800b934:	b1e2      	cbz	r2, 800b970 <rmw_uxrce_init_publisher_memory+0x3c>
 800b936:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b93a:	7b05      	ldrb	r5, [r0, #12]
 800b93c:	4606      	mov	r6, r0
 800b93e:	b9ad      	cbnz	r5, 800b96c <rmw_uxrce_init_publisher_memory+0x38>
 800b940:	23d8      	movs	r3, #216	@ 0xd8
 800b942:	e9c0 5500 	strd	r5, r5, [r0]
 800b946:	6083      	str	r3, [r0, #8]
 800b948:	f240 1301 	movw	r3, #257	@ 0x101
 800b94c:	4617      	mov	r7, r2
 800b94e:	8183      	strh	r3, [r0, #12]
 800b950:	460c      	mov	r4, r1
 800b952:	46a8      	mov	r8, r5
 800b954:	4621      	mov	r1, r4
 800b956:	4630      	mov	r0, r6
 800b958:	3501      	adds	r5, #1
 800b95a:	f009 fcfd 	bl	8015358 <put_memory>
 800b95e:	42af      	cmp	r7, r5
 800b960:	60a4      	str	r4, [r4, #8]
 800b962:	f884 800c 	strb.w	r8, [r4, #12]
 800b966:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800b96a:	d1f3      	bne.n	800b954 <rmw_uxrce_init_publisher_memory+0x20>
 800b96c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b970:	4770      	bx	lr
 800b972:	bf00      	nop

0800b974 <rmw_uxrce_init_subscription_memory>:
 800b974:	b1e2      	cbz	r2, 800b9b0 <rmw_uxrce_init_subscription_memory+0x3c>
 800b976:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b97a:	7b05      	ldrb	r5, [r0, #12]
 800b97c:	4606      	mov	r6, r0
 800b97e:	b9ad      	cbnz	r5, 800b9ac <rmw_uxrce_init_subscription_memory+0x38>
 800b980:	23d8      	movs	r3, #216	@ 0xd8
 800b982:	e9c0 5500 	strd	r5, r5, [r0]
 800b986:	6083      	str	r3, [r0, #8]
 800b988:	f240 1301 	movw	r3, #257	@ 0x101
 800b98c:	4617      	mov	r7, r2
 800b98e:	8183      	strh	r3, [r0, #12]
 800b990:	460c      	mov	r4, r1
 800b992:	46a8      	mov	r8, r5
 800b994:	4621      	mov	r1, r4
 800b996:	4630      	mov	r0, r6
 800b998:	3501      	adds	r5, #1
 800b99a:	f009 fcdd 	bl	8015358 <put_memory>
 800b99e:	42af      	cmp	r7, r5
 800b9a0:	60a4      	str	r4, [r4, #8]
 800b9a2:	f884 800c 	strb.w	r8, [r4, #12]
 800b9a6:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800b9aa:	d1f3      	bne.n	800b994 <rmw_uxrce_init_subscription_memory+0x20>
 800b9ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9b0:	4770      	bx	lr
 800b9b2:	bf00      	nop

0800b9b4 <rmw_uxrce_init_node_memory>:
 800b9b4:	b1e2      	cbz	r2, 800b9f0 <rmw_uxrce_init_node_memory+0x3c>
 800b9b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9ba:	7b05      	ldrb	r5, [r0, #12]
 800b9bc:	4606      	mov	r6, r0
 800b9be:	b9ad      	cbnz	r5, 800b9ec <rmw_uxrce_init_node_memory+0x38>
 800b9c0:	23a4      	movs	r3, #164	@ 0xa4
 800b9c2:	e9c0 5500 	strd	r5, r5, [r0]
 800b9c6:	6083      	str	r3, [r0, #8]
 800b9c8:	f240 1301 	movw	r3, #257	@ 0x101
 800b9cc:	4617      	mov	r7, r2
 800b9ce:	8183      	strh	r3, [r0, #12]
 800b9d0:	460c      	mov	r4, r1
 800b9d2:	46a8      	mov	r8, r5
 800b9d4:	4621      	mov	r1, r4
 800b9d6:	4630      	mov	r0, r6
 800b9d8:	3501      	adds	r5, #1
 800b9da:	f009 fcbd 	bl	8015358 <put_memory>
 800b9de:	42af      	cmp	r7, r5
 800b9e0:	60a4      	str	r4, [r4, #8]
 800b9e2:	f884 800c 	strb.w	r8, [r4, #12]
 800b9e6:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 800b9ea:	d1f3      	bne.n	800b9d4 <rmw_uxrce_init_node_memory+0x20>
 800b9ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9f0:	4770      	bx	lr
 800b9f2:	bf00      	nop

0800b9f4 <rmw_uxrce_init_session_memory>:
 800b9f4:	b1ea      	cbz	r2, 800ba32 <rmw_uxrce_init_session_memory+0x3e>
 800b9f6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b9fa:	7b05      	ldrb	r5, [r0, #12]
 800b9fc:	4606      	mov	r6, r0
 800b9fe:	b9b5      	cbnz	r5, 800ba2e <rmw_uxrce_init_session_memory+0x3a>
 800ba00:	e9c0 5500 	strd	r5, r5, [r0]
 800ba04:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 800ba08:	f240 1301 	movw	r3, #257	@ 0x101
 800ba0c:	4617      	mov	r7, r2
 800ba0e:	f8c0 8008 	str.w	r8, [r0, #8]
 800ba12:	460c      	mov	r4, r1
 800ba14:	8183      	strh	r3, [r0, #12]
 800ba16:	46a9      	mov	r9, r5
 800ba18:	4621      	mov	r1, r4
 800ba1a:	4630      	mov	r0, r6
 800ba1c:	3501      	adds	r5, #1
 800ba1e:	f009 fc9b 	bl	8015358 <put_memory>
 800ba22:	42af      	cmp	r7, r5
 800ba24:	60a4      	str	r4, [r4, #8]
 800ba26:	f884 900c 	strb.w	r9, [r4, #12]
 800ba2a:	4444      	add	r4, r8
 800ba2c:	d1f4      	bne.n	800ba18 <rmw_uxrce_init_session_memory+0x24>
 800ba2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba32:	4770      	bx	lr

0800ba34 <rmw_uxrce_init_topic_memory>:
 800ba34:	b1e2      	cbz	r2, 800ba70 <rmw_uxrce_init_topic_memory+0x3c>
 800ba36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba3a:	7b05      	ldrb	r5, [r0, #12]
 800ba3c:	4606      	mov	r6, r0
 800ba3e:	b9ad      	cbnz	r5, 800ba6c <rmw_uxrce_init_topic_memory+0x38>
 800ba40:	231c      	movs	r3, #28
 800ba42:	e9c0 5500 	strd	r5, r5, [r0]
 800ba46:	6083      	str	r3, [r0, #8]
 800ba48:	f240 1301 	movw	r3, #257	@ 0x101
 800ba4c:	4617      	mov	r7, r2
 800ba4e:	8183      	strh	r3, [r0, #12]
 800ba50:	460c      	mov	r4, r1
 800ba52:	46a8      	mov	r8, r5
 800ba54:	4621      	mov	r1, r4
 800ba56:	4630      	mov	r0, r6
 800ba58:	3501      	adds	r5, #1
 800ba5a:	f009 fc7d 	bl	8015358 <put_memory>
 800ba5e:	42af      	cmp	r7, r5
 800ba60:	60a4      	str	r4, [r4, #8]
 800ba62:	f884 800c 	strb.w	r8, [r4, #12]
 800ba66:	f104 041c 	add.w	r4, r4, #28
 800ba6a:	d1f3      	bne.n	800ba54 <rmw_uxrce_init_topic_memory+0x20>
 800ba6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba70:	4770      	bx	lr
 800ba72:	bf00      	nop

0800ba74 <rmw_uxrce_init_static_input_buffer_memory>:
 800ba74:	b1ea      	cbz	r2, 800bab2 <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800ba76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba7a:	7b05      	ldrb	r5, [r0, #12]
 800ba7c:	4606      	mov	r6, r0
 800ba7e:	b9b5      	cbnz	r5, 800baae <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800ba80:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 800ba84:	e9c0 5500 	strd	r5, r5, [r0]
 800ba88:	6083      	str	r3, [r0, #8]
 800ba8a:	f240 1301 	movw	r3, #257	@ 0x101
 800ba8e:	4617      	mov	r7, r2
 800ba90:	8183      	strh	r3, [r0, #12]
 800ba92:	460c      	mov	r4, r1
 800ba94:	46a8      	mov	r8, r5
 800ba96:	4621      	mov	r1, r4
 800ba98:	4630      	mov	r0, r6
 800ba9a:	3501      	adds	r5, #1
 800ba9c:	f009 fc5c 	bl	8015358 <put_memory>
 800baa0:	42af      	cmp	r7, r5
 800baa2:	60a4      	str	r4, [r4, #8]
 800baa4:	f884 800c 	strb.w	r8, [r4, #12]
 800baa8:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 800baac:	d1f3      	bne.n	800ba96 <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800baae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bab2:	4770      	bx	lr

0800bab4 <rmw_uxrce_init_init_options_impl_memory>:
 800bab4:	b1e2      	cbz	r2, 800baf0 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800bab6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800baba:	7b05      	ldrb	r5, [r0, #12]
 800babc:	4606      	mov	r6, r0
 800babe:	b9ad      	cbnz	r5, 800baec <rmw_uxrce_init_init_options_impl_memory+0x38>
 800bac0:	232c      	movs	r3, #44	@ 0x2c
 800bac2:	e9c0 5500 	strd	r5, r5, [r0]
 800bac6:	6083      	str	r3, [r0, #8]
 800bac8:	f240 1301 	movw	r3, #257	@ 0x101
 800bacc:	4617      	mov	r7, r2
 800bace:	8183      	strh	r3, [r0, #12]
 800bad0:	460c      	mov	r4, r1
 800bad2:	46a8      	mov	r8, r5
 800bad4:	4621      	mov	r1, r4
 800bad6:	4630      	mov	r0, r6
 800bad8:	3501      	adds	r5, #1
 800bada:	f009 fc3d 	bl	8015358 <put_memory>
 800bade:	42af      	cmp	r7, r5
 800bae0:	60a4      	str	r4, [r4, #8]
 800bae2:	f884 800c 	strb.w	r8, [r4, #12]
 800bae6:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 800baea:	d1f3      	bne.n	800bad4 <rmw_uxrce_init_init_options_impl_memory+0x20>
 800baec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800baf0:	4770      	bx	lr
 800baf2:	bf00      	nop

0800baf4 <rmw_uxrce_init_wait_set_memory>:
 800baf4:	b1e2      	cbz	r2, 800bb30 <rmw_uxrce_init_wait_set_memory+0x3c>
 800baf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bafa:	7b05      	ldrb	r5, [r0, #12]
 800bafc:	4606      	mov	r6, r0
 800bafe:	b9ad      	cbnz	r5, 800bb2c <rmw_uxrce_init_wait_set_memory+0x38>
 800bb00:	231c      	movs	r3, #28
 800bb02:	e9c0 5500 	strd	r5, r5, [r0]
 800bb06:	6083      	str	r3, [r0, #8]
 800bb08:	f240 1301 	movw	r3, #257	@ 0x101
 800bb0c:	4617      	mov	r7, r2
 800bb0e:	8183      	strh	r3, [r0, #12]
 800bb10:	460c      	mov	r4, r1
 800bb12:	46a8      	mov	r8, r5
 800bb14:	4621      	mov	r1, r4
 800bb16:	4630      	mov	r0, r6
 800bb18:	3501      	adds	r5, #1
 800bb1a:	f009 fc1d 	bl	8015358 <put_memory>
 800bb1e:	42af      	cmp	r7, r5
 800bb20:	60a4      	str	r4, [r4, #8]
 800bb22:	f884 800c 	strb.w	r8, [r4, #12]
 800bb26:	f104 041c 	add.w	r4, r4, #28
 800bb2a:	d1f3      	bne.n	800bb14 <rmw_uxrce_init_wait_set_memory+0x20>
 800bb2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb30:	4770      	bx	lr
 800bb32:	bf00      	nop

0800bb34 <rmw_uxrce_init_guard_condition_memory>:
 800bb34:	b1e2      	cbz	r2, 800bb70 <rmw_uxrce_init_guard_condition_memory+0x3c>
 800bb36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb3a:	7b05      	ldrb	r5, [r0, #12]
 800bb3c:	4606      	mov	r6, r0
 800bb3e:	b9ad      	cbnz	r5, 800bb6c <rmw_uxrce_init_guard_condition_memory+0x38>
 800bb40:	2320      	movs	r3, #32
 800bb42:	e9c0 5500 	strd	r5, r5, [r0]
 800bb46:	6083      	str	r3, [r0, #8]
 800bb48:	f240 1301 	movw	r3, #257	@ 0x101
 800bb4c:	4617      	mov	r7, r2
 800bb4e:	8183      	strh	r3, [r0, #12]
 800bb50:	460c      	mov	r4, r1
 800bb52:	46a8      	mov	r8, r5
 800bb54:	4621      	mov	r1, r4
 800bb56:	4630      	mov	r0, r6
 800bb58:	3501      	adds	r5, #1
 800bb5a:	f009 fbfd 	bl	8015358 <put_memory>
 800bb5e:	42af      	cmp	r7, r5
 800bb60:	60a4      	str	r4, [r4, #8]
 800bb62:	f884 800c 	strb.w	r8, [r4, #12]
 800bb66:	f104 0420 	add.w	r4, r4, #32
 800bb6a:	d1f3      	bne.n	800bb54 <rmw_uxrce_init_guard_condition_memory+0x20>
 800bb6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb70:	4770      	bx	lr
 800bb72:	bf00      	nop

0800bb74 <rmw_uxrce_fini_session_memory>:
 800bb74:	4601      	mov	r1, r0
 800bb76:	4801      	ldr	r0, [pc, #4]	@ (800bb7c <rmw_uxrce_fini_session_memory+0x8>)
 800bb78:	f009 bbee 	b.w	8015358 <put_memory>
 800bb7c:	20015394 	.word	0x20015394

0800bb80 <rmw_uxrce_fini_node_memory>:
 800bb80:	b538      	push	{r3, r4, r5, lr}
 800bb82:	4604      	mov	r4, r0
 800bb84:	6800      	ldr	r0, [r0, #0]
 800bb86:	b128      	cbz	r0, 800bb94 <rmw_uxrce_fini_node_memory+0x14>
 800bb88:	4b07      	ldr	r3, [pc, #28]	@ (800bba8 <rmw_uxrce_fini_node_memory+0x28>)
 800bb8a:	6819      	ldr	r1, [r3, #0]
 800bb8c:	f7f4 fb40 	bl	8000210 <strcmp>
 800bb90:	b940      	cbnz	r0, 800bba4 <rmw_uxrce_fini_node_memory+0x24>
 800bb92:	6020      	str	r0, [r4, #0]
 800bb94:	6861      	ldr	r1, [r4, #4]
 800bb96:	b129      	cbz	r1, 800bba4 <rmw_uxrce_fini_node_memory+0x24>
 800bb98:	2500      	movs	r5, #0
 800bb9a:	4804      	ldr	r0, [pc, #16]	@ (800bbac <rmw_uxrce_fini_node_memory+0x2c>)
 800bb9c:	610d      	str	r5, [r1, #16]
 800bb9e:	f009 fbdb 	bl	8015358 <put_memory>
 800bba2:	6065      	str	r5, [r4, #4]
 800bba4:	bd38      	pop	{r3, r4, r5, pc}
 800bba6:	bf00      	nop
 800bba8:	0801b70c 	.word	0x0801b70c
 800bbac:	20015364 	.word	0x20015364

0800bbb0 <rmw_uxrce_fini_publisher_memory>:
 800bbb0:	b510      	push	{r4, lr}
 800bbb2:	4604      	mov	r4, r0
 800bbb4:	6800      	ldr	r0, [r0, #0]
 800bbb6:	b128      	cbz	r0, 800bbc4 <rmw_uxrce_fini_publisher_memory+0x14>
 800bbb8:	4b06      	ldr	r3, [pc, #24]	@ (800bbd4 <rmw_uxrce_fini_publisher_memory+0x24>)
 800bbba:	6819      	ldr	r1, [r3, #0]
 800bbbc:	f7f4 fb28 	bl	8000210 <strcmp>
 800bbc0:	b938      	cbnz	r0, 800bbd2 <rmw_uxrce_fini_publisher_memory+0x22>
 800bbc2:	6020      	str	r0, [r4, #0]
 800bbc4:	6861      	ldr	r1, [r4, #4]
 800bbc6:	b121      	cbz	r1, 800bbd2 <rmw_uxrce_fini_publisher_memory+0x22>
 800bbc8:	4803      	ldr	r0, [pc, #12]	@ (800bbd8 <rmw_uxrce_fini_publisher_memory+0x28>)
 800bbca:	f009 fbc5 	bl	8015358 <put_memory>
 800bbce:	2300      	movs	r3, #0
 800bbd0:	6063      	str	r3, [r4, #4]
 800bbd2:	bd10      	pop	{r4, pc}
 800bbd4:	0801b70c 	.word	0x0801b70c
 800bbd8:	20015374 	.word	0x20015374

0800bbdc <rmw_uxrce_fini_subscription_memory>:
 800bbdc:	b510      	push	{r4, lr}
 800bbde:	4604      	mov	r4, r0
 800bbe0:	6800      	ldr	r0, [r0, #0]
 800bbe2:	b128      	cbz	r0, 800bbf0 <rmw_uxrce_fini_subscription_memory+0x14>
 800bbe4:	4b06      	ldr	r3, [pc, #24]	@ (800bc00 <rmw_uxrce_fini_subscription_memory+0x24>)
 800bbe6:	6819      	ldr	r1, [r3, #0]
 800bbe8:	f7f4 fb12 	bl	8000210 <strcmp>
 800bbec:	b938      	cbnz	r0, 800bbfe <rmw_uxrce_fini_subscription_memory+0x22>
 800bbee:	6020      	str	r0, [r4, #0]
 800bbf0:	6861      	ldr	r1, [r4, #4]
 800bbf2:	b121      	cbz	r1, 800bbfe <rmw_uxrce_fini_subscription_memory+0x22>
 800bbf4:	4803      	ldr	r0, [pc, #12]	@ (800bc04 <rmw_uxrce_fini_subscription_memory+0x28>)
 800bbf6:	f009 fbaf 	bl	8015358 <put_memory>
 800bbfa:	2300      	movs	r3, #0
 800bbfc:	6063      	str	r3, [r4, #4]
 800bbfe:	bd10      	pop	{r4, pc}
 800bc00:	0801b70c 	.word	0x0801b70c
 800bc04:	200153b4 	.word	0x200153b4

0800bc08 <rmw_uxrce_fini_service_memory>:
 800bc08:	b510      	push	{r4, lr}
 800bc0a:	4604      	mov	r4, r0
 800bc0c:	6800      	ldr	r0, [r0, #0]
 800bc0e:	b128      	cbz	r0, 800bc1c <rmw_uxrce_fini_service_memory+0x14>
 800bc10:	4b06      	ldr	r3, [pc, #24]	@ (800bc2c <rmw_uxrce_fini_service_memory+0x24>)
 800bc12:	6819      	ldr	r1, [r3, #0]
 800bc14:	f7f4 fafc 	bl	8000210 <strcmp>
 800bc18:	b938      	cbnz	r0, 800bc2a <rmw_uxrce_fini_service_memory+0x22>
 800bc1a:	6020      	str	r0, [r4, #0]
 800bc1c:	6861      	ldr	r1, [r4, #4]
 800bc1e:	b121      	cbz	r1, 800bc2a <rmw_uxrce_fini_service_memory+0x22>
 800bc20:	4803      	ldr	r0, [pc, #12]	@ (800bc30 <rmw_uxrce_fini_service_memory+0x28>)
 800bc22:	f009 fb99 	bl	8015358 <put_memory>
 800bc26:	2300      	movs	r3, #0
 800bc28:	6063      	str	r3, [r4, #4]
 800bc2a:	bd10      	pop	{r4, pc}
 800bc2c:	0801b70c 	.word	0x0801b70c
 800bc30:	20015384 	.word	0x20015384

0800bc34 <rmw_uxrce_fini_client_memory>:
 800bc34:	b510      	push	{r4, lr}
 800bc36:	4604      	mov	r4, r0
 800bc38:	6800      	ldr	r0, [r0, #0]
 800bc3a:	b128      	cbz	r0, 800bc48 <rmw_uxrce_fini_client_memory+0x14>
 800bc3c:	4b06      	ldr	r3, [pc, #24]	@ (800bc58 <rmw_uxrce_fini_client_memory+0x24>)
 800bc3e:	6819      	ldr	r1, [r3, #0]
 800bc40:	f7f4 fae6 	bl	8000210 <strcmp>
 800bc44:	b938      	cbnz	r0, 800bc56 <rmw_uxrce_fini_client_memory+0x22>
 800bc46:	6020      	str	r0, [r4, #0]
 800bc48:	6861      	ldr	r1, [r4, #4]
 800bc4a:	b121      	cbz	r1, 800bc56 <rmw_uxrce_fini_client_memory+0x22>
 800bc4c:	4803      	ldr	r0, [pc, #12]	@ (800bc5c <rmw_uxrce_fini_client_memory+0x28>)
 800bc4e:	f009 fb83 	bl	8015358 <put_memory>
 800bc52:	2300      	movs	r3, #0
 800bc54:	6063      	str	r3, [r4, #4]
 800bc56:	bd10      	pop	{r4, pc}
 800bc58:	0801b70c 	.word	0x0801b70c
 800bc5c:	20010a98 	.word	0x20010a98

0800bc60 <rmw_uxrce_fini_topic_memory>:
 800bc60:	b510      	push	{r4, lr}
 800bc62:	4604      	mov	r4, r0
 800bc64:	4621      	mov	r1, r4
 800bc66:	4803      	ldr	r0, [pc, #12]	@ (800bc74 <rmw_uxrce_fini_topic_memory+0x14>)
 800bc68:	f009 fb76 	bl	8015358 <put_memory>
 800bc6c:	2300      	movs	r3, #0
 800bc6e:	61a3      	str	r3, [r4, #24]
 800bc70:	bd10      	pop	{r4, pc}
 800bc72:	bf00      	nop
 800bc74:	200153c4 	.word	0x200153c4

0800bc78 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800bc78:	b082      	sub	sp, #8
 800bc7a:	b530      	push	{r4, r5, lr}
 800bc7c:	4925      	ldr	r1, [pc, #148]	@ (800bd14 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800bc7e:	680d      	ldr	r5, [r1, #0]
 800bc80:	ac03      	add	r4, sp, #12
 800bc82:	e884 000c 	stmia.w	r4, {r2, r3}
 800bc86:	461c      	mov	r4, r3
 800bc88:	2d00      	cmp	r5, #0
 800bc8a:	d041      	beq.n	800bd10 <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 800bc8c:	462b      	mov	r3, r5
 800bc8e:	2100      	movs	r1, #0
 800bc90:	689a      	ldr	r2, [r3, #8]
 800bc92:	685b      	ldr	r3, [r3, #4]
 800bc94:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 800bc98:	4290      	cmp	r0, r2
 800bc9a:	bf08      	it	eq
 800bc9c:	3101      	addeq	r1, #1
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d1f6      	bne.n	800bc90 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800bca2:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800bca6:	2b02      	cmp	r3, #2
 800bca8:	d029      	beq.n	800bcfe <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800bcaa:	d907      	bls.n	800bcbc <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800bcac:	2b03      	cmp	r3, #3
 800bcae:	d005      	beq.n	800bcbc <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800bcb0:	2100      	movs	r1, #0
 800bcb2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bcb6:	4608      	mov	r0, r1
 800bcb8:	b002      	add	sp, #8
 800bcba:	4770      	bx	lr
 800bcbc:	b314      	cbz	r4, 800bd04 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800bcbe:	428c      	cmp	r4, r1
 800bcc0:	d820      	bhi.n	800bd04 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800bcc2:	2d00      	cmp	r5, #0
 800bcc4:	d0f4      	beq.n	800bcb0 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800bcc6:	2100      	movs	r1, #0
 800bcc8:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 800bccc:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 800bcd0:	e002      	b.n	800bcd8 <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 800bcd2:	686d      	ldr	r5, [r5, #4]
 800bcd4:	2d00      	cmp	r5, #0
 800bcd6:	d0ec      	beq.n	800bcb2 <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800bcd8:	68ab      	ldr	r3, [r5, #8]
 800bcda:	f8d3 2814 	ldr.w	r2, [r3, #2068]	@ 0x814
 800bcde:	4290      	cmp	r0, r2
 800bce0:	d1f7      	bne.n	800bcd2 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800bce2:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 800bce6:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 800bcea:	4562      	cmp	r2, ip
 800bcec:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800bcf0:	eb73 0e04 	sbcs.w	lr, r3, r4
 800bcf4:	daed      	bge.n	800bcd2 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800bcf6:	4694      	mov	ip, r2
 800bcf8:	461c      	mov	r4, r3
 800bcfa:	4629      	mov	r1, r5
 800bcfc:	e7e9      	b.n	800bcd2 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800bcfe:	b10c      	cbz	r4, 800bd04 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800bd00:	428c      	cmp	r4, r1
 800bd02:	d9d5      	bls.n	800bcb0 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800bd04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bd08:	4802      	ldr	r0, [pc, #8]	@ (800bd14 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800bd0a:	b002      	add	sp, #8
 800bd0c:	f009 bb14 	b.w	8015338 <get_memory>
 800bd10:	4629      	mov	r1, r5
 800bd12:	e7c6      	b.n	800bca2 <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800bd14:	200153a4 	.word	0x200153a4

0800bd18 <rmw_uxrce_find_static_input_buffer_by_owner>:
 800bd18:	4b11      	ldr	r3, [pc, #68]	@ (800bd60 <rmw_uxrce_find_static_input_buffer_by_owner+0x48>)
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	b530      	push	{r4, r5, lr}
 800bd1e:	b1e3      	cbz	r3, 800bd5a <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 800bd20:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 800bd24:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 800bd28:	2400      	movs	r4, #0
 800bd2a:	e001      	b.n	800bd30 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800bd2c:	685b      	ldr	r3, [r3, #4]
 800bd2e:	b193      	cbz	r3, 800bd56 <rmw_uxrce_find_static_input_buffer_by_owner+0x3e>
 800bd30:	689a      	ldr	r2, [r3, #8]
 800bd32:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 800bd36:	4288      	cmp	r0, r1
 800bd38:	d1f8      	bne.n	800bd2c <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800bd3a:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 800bd3e:	f8d2 281c 	ldr.w	r2, [r2, #2076]	@ 0x81c
 800bd42:	4571      	cmp	r1, lr
 800bd44:	eb72 050c 	sbcs.w	r5, r2, ip
 800bd48:	daf0      	bge.n	800bd2c <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800bd4a:	461c      	mov	r4, r3
 800bd4c:	685b      	ldr	r3, [r3, #4]
 800bd4e:	468e      	mov	lr, r1
 800bd50:	4694      	mov	ip, r2
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d1ec      	bne.n	800bd30 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800bd56:	4620      	mov	r0, r4
 800bd58:	bd30      	pop	{r4, r5, pc}
 800bd5a:	461c      	mov	r4, r3
 800bd5c:	4620      	mov	r0, r4
 800bd5e:	bd30      	pop	{r4, r5, pc}
 800bd60:	200153a4 	.word	0x200153a4
 800bd64:	00000000 	.word	0x00000000

0800bd68 <rmw_uxrce_clean_expired_static_input_buffer>:
 800bd68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd6c:	4b3c      	ldr	r3, [pc, #240]	@ (800be60 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800bd6e:	ed2d 8b06 	vpush	{d8-d10}
 800bd72:	681f      	ldr	r7, [r3, #0]
 800bd74:	b08d      	sub	sp, #52	@ 0x34
 800bd76:	f00a fc1d 	bl	80165b4 <rmw_uros_epoch_nanos>
 800bd7a:	2f00      	cmp	r7, #0
 800bd7c:	d05d      	beq.n	800be3a <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800bd7e:	46b8      	mov	r8, r7
 800bd80:	ed9f 8b31 	vldr	d8, [pc, #196]	@ 800be48 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 800bd84:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800bd88:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800bd8c:	2b04      	cmp	r3, #4
 800bd8e:	ed9f ab30 	vldr	d10, [pc, #192]	@ 800be50 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 800bd92:	ed9f 9b31 	vldr	d9, [pc, #196]	@ 800be58 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 800bd96:	4681      	mov	r9, r0
 800bd98:	468a      	mov	sl, r1
 800bd9a:	ac04      	add	r4, sp, #16
 800bd9c:	d03f      	beq.n	800be1e <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800bd9e:	2b05      	cmp	r3, #5
 800bda0:	d044      	beq.n	800be2c <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 800bda2:	2b03      	cmp	r3, #3
 800bda4:	d03b      	beq.n	800be1e <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800bda6:	ed8d 8b04 	vstr	d8, [sp, #16]
 800bdaa:	ed8d ab06 	vstr	d10, [sp, #24]
 800bdae:	ed8d 8b08 	vstr	d8, [sp, #32]
 800bdb2:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 800bdb6:	ab08      	add	r3, sp, #32
 800bdb8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800bdba:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800bdbe:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800bdc2:	f009 f8ed 	bl	8014fa0 <rmw_time_equal>
 800bdc6:	b118      	cbz	r0, 800bdd0 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 800bdc8:	ed8d 9b04 	vstr	d9, [sp, #16]
 800bdcc:	ed8d 8b06 	vstr	d8, [sp, #24]
 800bdd0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800bdd4:	f8d5 6818 	ldr.w	r6, [r5, #2072]	@ 0x818
 800bdd8:	f8d5 781c 	ldr.w	r7, [r5, #2076]	@ 0x81c
 800bddc:	f8d8 b004 	ldr.w	fp, [r8, #4]
 800bde0:	f009 f932 	bl	8015048 <rmw_time_total_nsec>
 800bde4:	1830      	adds	r0, r6, r0
 800bde6:	eb47 0101 	adc.w	r1, r7, r1
 800bdea:	4548      	cmp	r0, r9
 800bdec:	eb71 030a 	sbcs.w	r3, r1, sl
 800bdf0:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 800bdf4:	db05      	blt.n	800be02 <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 800bdf6:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 800bdfa:	4591      	cmp	r9, r2
 800bdfc:	eb7a 0303 	sbcs.w	r3, sl, r3
 800be00:	da03      	bge.n	800be0a <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 800be02:	4817      	ldr	r0, [pc, #92]	@ (800be60 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800be04:	4641      	mov	r1, r8
 800be06:	f009 faa7 	bl	8015358 <put_memory>
 800be0a:	f1bb 0f00 	cmp.w	fp, #0
 800be0e:	d014      	beq.n	800be3a <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800be10:	46d8      	mov	r8, fp
 800be12:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800be16:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800be1a:	2b04      	cmp	r3, #4
 800be1c:	d1bf      	bne.n	800bd9e <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 800be1e:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800be22:	3340      	adds	r3, #64	@ 0x40
 800be24:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800be26:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800be2a:	e7c0      	b.n	800bdae <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800be2c:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800be30:	3348      	adds	r3, #72	@ 0x48
 800be32:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800be34:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800be38:	e7b9      	b.n	800bdae <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800be3a:	b00d      	add	sp, #52	@ 0x34
 800be3c:	ecbd 8b06 	vpop	{d8-d10}
 800be40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be44:	f3af 8000 	nop.w
	...
 800be50:	00000001 	.word	0x00000001
 800be54:	00000000 	.word	0x00000000
 800be58:	0000001e 	.word	0x0000001e
 800be5c:	00000000 	.word	0x00000000
 800be60:	200153a4 	.word	0x200153a4

0800be64 <run_xrce_session>:
 800be64:	b510      	push	{r4, lr}
 800be66:	788c      	ldrb	r4, [r1, #2]
 800be68:	b086      	sub	sp, #24
 800be6a:	2c01      	cmp	r4, #1
 800be6c:	f8ad 200e 	strh.w	r2, [sp, #14]
 800be70:	d00c      	beq.n	800be8c <run_xrce_session+0x28>
 800be72:	4619      	mov	r1, r3
 800be74:	2301      	movs	r3, #1
 800be76:	9300      	str	r3, [sp, #0]
 800be78:	f10d 020e 	add.w	r2, sp, #14
 800be7c:	f10d 0317 	add.w	r3, sp, #23
 800be80:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800be84:	f004 f816 	bl	800feb4 <uxr_run_session_until_all_status>
 800be88:	b006      	add	sp, #24
 800be8a:	bd10      	pop	{r4, pc}
 800be8c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800be90:	f003 fc2a 	bl	800f6e8 <uxr_flash_output_streams>
 800be94:	4620      	mov	r0, r4
 800be96:	b006      	add	sp, #24
 800be98:	bd10      	pop	{r4, pc}
 800be9a:	bf00      	nop

0800be9c <convert_qos_profile>:
 800be9c:	7a4a      	ldrb	r2, [r1, #9]
 800be9e:	f891 c008 	ldrb.w	ip, [r1, #8]
 800bea2:	2a02      	cmp	r2, #2
 800bea4:	bf18      	it	ne
 800bea6:	2200      	movne	r2, #0
 800bea8:	7002      	strb	r2, [r0, #0]
 800beaa:	780a      	ldrb	r2, [r1, #0]
 800beac:	8889      	ldrh	r1, [r1, #4]
 800beae:	8081      	strh	r1, [r0, #4]
 800beb0:	f1ac 0c02 	sub.w	ip, ip, #2
 800beb4:	f1a2 0202 	sub.w	r2, r2, #2
 800beb8:	fabc fc8c 	clz	ip, ip
 800bebc:	fab2 f282 	clz	r2, r2
 800bec0:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800bec4:	0952      	lsrs	r2, r2, #5
 800bec6:	f880 c001 	strb.w	ip, [r0, #1]
 800beca:	7082      	strb	r2, [r0, #2]
 800becc:	4770      	bx	lr
 800bece:	bf00      	nop

0800bed0 <generate_type_name>:
 800bed0:	b530      	push	{r4, r5, lr}
 800bed2:	2300      	movs	r3, #0
 800bed4:	700b      	strb	r3, [r1, #0]
 800bed6:	6803      	ldr	r3, [r0, #0]
 800bed8:	b087      	sub	sp, #28
 800beda:	4614      	mov	r4, r2
 800bedc:	b1d3      	cbz	r3, 800bf14 <generate_type_name+0x44>
 800bede:	4a0f      	ldr	r2, [pc, #60]	@ (800bf1c <generate_type_name+0x4c>)
 800bee0:	4615      	mov	r5, r2
 800bee2:	9203      	str	r2, [sp, #12]
 800bee4:	9500      	str	r5, [sp, #0]
 800bee6:	6842      	ldr	r2, [r0, #4]
 800bee8:	480d      	ldr	r0, [pc, #52]	@ (800bf20 <generate_type_name+0x50>)
 800beea:	9001      	str	r0, [sp, #4]
 800beec:	4608      	mov	r0, r1
 800beee:	490d      	ldr	r1, [pc, #52]	@ (800bf24 <generate_type_name+0x54>)
 800bef0:	9204      	str	r2, [sp, #16]
 800bef2:	9105      	str	r1, [sp, #20]
 800bef4:	9102      	str	r1, [sp, #8]
 800bef6:	4a0c      	ldr	r2, [pc, #48]	@ (800bf28 <generate_type_name+0x58>)
 800bef8:	4621      	mov	r1, r4
 800befa:	f00c feab 	bl	8018c54 <sniprintf>
 800befe:	2800      	cmp	r0, #0
 800bf00:	db05      	blt.n	800bf0e <generate_type_name+0x3e>
 800bf02:	4284      	cmp	r4, r0
 800bf04:	bfd4      	ite	le
 800bf06:	2000      	movle	r0, #0
 800bf08:	2001      	movgt	r0, #1
 800bf0a:	b007      	add	sp, #28
 800bf0c:	bd30      	pop	{r4, r5, pc}
 800bf0e:	2000      	movs	r0, #0
 800bf10:	b007      	add	sp, #28
 800bf12:	bd30      	pop	{r4, r5, pc}
 800bf14:	4b05      	ldr	r3, [pc, #20]	@ (800bf2c <generate_type_name+0x5c>)
 800bf16:	4a01      	ldr	r2, [pc, #4]	@ (800bf1c <generate_type_name+0x4c>)
 800bf18:	461d      	mov	r5, r3
 800bf1a:	e7e2      	b.n	800bee2 <generate_type_name+0x12>
 800bf1c:	0801ad18 	.word	0x0801ad18
 800bf20:	0801ad30 	.word	0x0801ad30
 800bf24:	0801ad2c 	.word	0x0801ad2c
 800bf28:	0801ad1c 	.word	0x0801ad1c
 800bf2c:	0801b998 	.word	0x0801b998

0800bf30 <generate_topic_name>:
 800bf30:	b510      	push	{r4, lr}
 800bf32:	b082      	sub	sp, #8
 800bf34:	4614      	mov	r4, r2
 800bf36:	9000      	str	r0, [sp, #0]
 800bf38:	4b08      	ldr	r3, [pc, #32]	@ (800bf5c <generate_topic_name+0x2c>)
 800bf3a:	4a09      	ldr	r2, [pc, #36]	@ (800bf60 <generate_topic_name+0x30>)
 800bf3c:	4608      	mov	r0, r1
 800bf3e:	4621      	mov	r1, r4
 800bf40:	f00c fe88 	bl	8018c54 <sniprintf>
 800bf44:	2800      	cmp	r0, #0
 800bf46:	db05      	blt.n	800bf54 <generate_topic_name+0x24>
 800bf48:	4284      	cmp	r4, r0
 800bf4a:	bfd4      	ite	le
 800bf4c:	2000      	movle	r0, #0
 800bf4e:	2001      	movgt	r0, #1
 800bf50:	b002      	add	sp, #8
 800bf52:	bd10      	pop	{r4, pc}
 800bf54:	2000      	movs	r0, #0
 800bf56:	b002      	add	sp, #8
 800bf58:	bd10      	pop	{r4, pc}
 800bf5a:	bf00      	nop
 800bf5c:	0801ad3c 	.word	0x0801ad3c
 800bf60:	0801ad34 	.word	0x0801ad34

0800bf64 <is_uxrce_rmw_identifier_valid>:
 800bf64:	b510      	push	{r4, lr}
 800bf66:	4604      	mov	r4, r0
 800bf68:	b140      	cbz	r0, 800bf7c <is_uxrce_rmw_identifier_valid+0x18>
 800bf6a:	f009 fa4d 	bl	8015408 <rmw_get_implementation_identifier>
 800bf6e:	4601      	mov	r1, r0
 800bf70:	4620      	mov	r0, r4
 800bf72:	f7f4 f94d 	bl	8000210 <strcmp>
 800bf76:	fab0 f080 	clz	r0, r0
 800bf7a:	0940      	lsrs	r0, r0, #5
 800bf7c:	bd10      	pop	{r4, pc}
 800bf7e:	bf00      	nop

0800bf80 <get_message_typesupport_handle>:
 800bf80:	6883      	ldr	r3, [r0, #8]
 800bf82:	4718      	bx	r3

0800bf84 <get_message_typesupport_handle_function>:
 800bf84:	b510      	push	{r4, lr}
 800bf86:	4604      	mov	r4, r0
 800bf88:	6800      	ldr	r0, [r0, #0]
 800bf8a:	f7f4 f941 	bl	8000210 <strcmp>
 800bf8e:	2800      	cmp	r0, #0
 800bf90:	bf0c      	ite	eq
 800bf92:	4620      	moveq	r0, r4
 800bf94:	2000      	movne	r0, #0
 800bf96:	bd10      	pop	{r4, pc}

0800bf98 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 800bf98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf9c:	6805      	ldr	r5, [r0, #0]
 800bf9e:	4604      	mov	r4, r0
 800bfa0:	4628      	mov	r0, r5
 800bfa2:	460e      	mov	r6, r1
 800bfa4:	f7f4 f934 	bl	8000210 <strcmp>
 800bfa8:	b1c8      	cbz	r0, 800bfde <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 800bfaa:	4b11      	ldr	r3, [pc, #68]	@ (800bff0 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	429d      	cmp	r5, r3
 800bfb0:	d112      	bne.n	800bfd8 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800bfb2:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800bfb6:	f8d8 4000 	ldr.w	r4, [r8]
 800bfba:	b16c      	cbz	r4, 800bfd8 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800bfbc:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800bfc0:	2700      	movs	r7, #0
 800bfc2:	3d04      	subs	r5, #4
 800bfc4:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800bfc8:	4631      	mov	r1, r6
 800bfca:	f7f4 f921 	bl	8000210 <strcmp>
 800bfce:	00bb      	lsls	r3, r7, #2
 800bfd0:	b140      	cbz	r0, 800bfe4 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 800bfd2:	3701      	adds	r7, #1
 800bfd4:	42bc      	cmp	r4, r7
 800bfd6:	d1f5      	bne.n	800bfc4 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 800bfd8:	2000      	movs	r0, #0
 800bfda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bfde:	4620      	mov	r0, r4
 800bfe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bfe4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800bfe8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bfec:	58d3      	ldr	r3, [r2, r3]
 800bfee:	4718      	bx	r3
 800bff0:	2000016c 	.word	0x2000016c

0800bff4 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 800bff4:	4b04      	ldr	r3, [pc, #16]	@ (800c008 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x14>)
 800bff6:	681a      	ldr	r2, [r3, #0]
 800bff8:	b10a      	cbz	r2, 800bffe <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0xa>
 800bffa:	4803      	ldr	r0, [pc, #12]	@ (800c008 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x14>)
 800bffc:	4770      	bx	lr
 800bffe:	4a03      	ldr	r2, [pc, #12]	@ (800c00c <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x18>)
 800c000:	4801      	ldr	r0, [pc, #4]	@ (800c008 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x14>)
 800c002:	6812      	ldr	r2, [r2, #0]
 800c004:	601a      	str	r2, [r3, #0]
 800c006:	4770      	bx	lr
 800c008:	2000017c 	.word	0x2000017c
 800c00c:	2000016c 	.word	0x2000016c

0800c010 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 800c010:	4a02      	ldr	r2, [pc, #8]	@ (800c01c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0xc>)
 800c012:	4b03      	ldr	r3, [pc, #12]	@ (800c020 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x10>)
 800c014:	6812      	ldr	r2, [r2, #0]
 800c016:	601a      	str	r2, [r3, #0]
 800c018:	4770      	bx	lr
 800c01a:	bf00      	nop
 800c01c:	2000016c 	.word	0x2000016c
 800c020:	2000017c 	.word	0x2000017c

0800c024 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Joy>:
 800c024:	4b04      	ldr	r3, [pc, #16]	@ (800c038 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Joy+0x14>)
 800c026:	681a      	ldr	r2, [r3, #0]
 800c028:	b10a      	cbz	r2, 800c02e <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Joy+0xa>
 800c02a:	4803      	ldr	r0, [pc, #12]	@ (800c038 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Joy+0x14>)
 800c02c:	4770      	bx	lr
 800c02e:	4a03      	ldr	r2, [pc, #12]	@ (800c03c <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Joy+0x18>)
 800c030:	4801      	ldr	r0, [pc, #4]	@ (800c038 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Joy+0x14>)
 800c032:	6812      	ldr	r2, [r2, #0]
 800c034:	601a      	str	r2, [r3, #0]
 800c036:	4770      	bx	lr
 800c038:	20000190 	.word	0x20000190
 800c03c:	2000016c 	.word	0x2000016c

0800c040 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Joy>:
 800c040:	4a02      	ldr	r2, [pc, #8]	@ (800c04c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Joy+0xc>)
 800c042:	4b03      	ldr	r3, [pc, #12]	@ (800c050 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Joy+0x10>)
 800c044:	6812      	ldr	r2, [r2, #0]
 800c046:	601a      	str	r2, [r3, #0]
 800c048:	4770      	bx	lr
 800c04a:	bf00      	nop
 800c04c:	2000016c 	.word	0x2000016c
 800c050:	20000190 	.word	0x20000190

0800c054 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__size_function__Imu__orientation_covariance>:
 800c054:	2009      	movs	r0, #9
 800c056:	4770      	bx	lr

0800c058 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_const_function__Imu__orientation_covariance>:
 800c058:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800c05c:	4770      	bx	lr
 800c05e:	bf00      	nop

0800c060 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__fetch_function__Imu__orientation_covariance>:
 800c060:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800c064:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c068:	e9c2 0100 	strd	r0, r1, [r2]
 800c06c:	4770      	bx	lr
 800c06e:	bf00      	nop

0800c070 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__assign_function__Imu__orientation_covariance>:
 800c070:	e9d2 2300 	ldrd	r2, r3, [r2]
 800c074:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800c078:	e9c1 2300 	strd	r2, r3, [r1]
 800c07c:	4770      	bx	lr
 800c07e:	bf00      	nop

0800c080 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__Imu_init_function>:
 800c080:	f00a bafe 	b.w	8016680 <sensor_msgs__msg__Imu__init>

0800c084 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__Imu_fini_function>:
 800c084:	f00a bb52 	b.w	801672c <sensor_msgs__msg__Imu__fini>

0800c088 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__size_function__Imu__angular_velocity_covariance>:
 800c088:	2009      	movs	r0, #9
 800c08a:	4770      	bx	lr

0800c08c <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__size_function__Imu__linear_acceleration_covariance>:
 800c08c:	2009      	movs	r0, #9
 800c08e:	4770      	bx	lr

0800c090 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_function__Imu__orientation_covariance>:
 800c090:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800c094:	4770      	bx	lr
 800c096:	bf00      	nop

0800c098 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_const_function__Imu__linear_acceleration_covariance>:
 800c098:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800c09c:	4770      	bx	lr
 800c09e:	bf00      	nop

0800c0a0 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_function__Imu__linear_acceleration_covariance>:
 800c0a0:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800c0a4:	4770      	bx	lr
 800c0a6:	bf00      	nop

0800c0a8 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_const_function__Imu__angular_velocity_covariance>:
 800c0a8:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800c0ac:	4770      	bx	lr
 800c0ae:	bf00      	nop

0800c0b0 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_function__Imu__angular_velocity_covariance>:
 800c0b0:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800c0b4:	4770      	bx	lr
 800c0b6:	bf00      	nop

0800c0b8 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__fetch_function__Imu__linear_acceleration_covariance>:
 800c0b8:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800c0bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c0c0:	e9c2 0100 	strd	r0, r1, [r2]
 800c0c4:	4770      	bx	lr
 800c0c6:	bf00      	nop

0800c0c8 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__assign_function__Imu__linear_acceleration_covariance>:
 800c0c8:	e9d2 2300 	ldrd	r2, r3, [r2]
 800c0cc:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800c0d0:	e9c1 2300 	strd	r2, r3, [r1]
 800c0d4:	4770      	bx	lr
 800c0d6:	bf00      	nop

0800c0d8 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__fetch_function__Imu__angular_velocity_covariance>:
 800c0d8:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800c0dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c0e0:	e9c2 0100 	strd	r0, r1, [r2]
 800c0e4:	4770      	bx	lr
 800c0e6:	bf00      	nop

0800c0e8 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__assign_function__Imu__angular_velocity_covariance>:
 800c0e8:	e9d2 2300 	ldrd	r2, r3, [r2]
 800c0ec:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800c0f0:	e9c1 2300 	strd	r2, r3, [r1]
 800c0f4:	4770      	bx	lr
 800c0f6:	bf00      	nop

0800c0f8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 800c0f8:	b510      	push	{r4, lr}
 800c0fa:	f000 fa41 	bl	800c580 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 800c0fe:	4c0b      	ldr	r4, [pc, #44]	@ (800c12c <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x34>)
 800c100:	60e0      	str	r0, [r4, #12]
 800c102:	f000 fb65 	bl	800c7d0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 800c106:	64a0      	str	r0, [r4, #72]	@ 0x48
 800c108:	f000 fb74 	bl	800c7f4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800c10c:	f8c4 00c0 	str.w	r0, [r4, #192]	@ 0xc0
 800c110:	f000 fb70 	bl	800c7f4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800c114:	4b06      	ldr	r3, [pc, #24]	@ (800c130 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x38>)
 800c116:	f8c4 0138 	str.w	r0, [r4, #312]	@ 0x138
 800c11a:	681a      	ldr	r2, [r3, #0]
 800c11c:	b10a      	cbz	r2, 800c122 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x2a>
 800c11e:	4804      	ldr	r0, [pc, #16]	@ (800c130 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x38>)
 800c120:	bd10      	pop	{r4, pc}
 800c122:	4a04      	ldr	r2, [pc, #16]	@ (800c134 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x3c>)
 800c124:	4802      	ldr	r0, [pc, #8]	@ (800c130 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x38>)
 800c126:	6812      	ldr	r2, [r2, #0]
 800c128:	601a      	str	r2, [r3, #0]
 800c12a:	bd10      	pop	{r4, pc}
 800c12c:	2000019c 	.word	0x2000019c
 800c130:	20000340 	.word	0x20000340
 800c134:	20000170 	.word	0x20000170

0800c138 <sensor_msgs__msg__Joy__rosidl_typesupport_introspection_c__size_function__Joy__axes>:
 800c138:	6840      	ldr	r0, [r0, #4]
 800c13a:	4770      	bx	lr

0800c13c <sensor_msgs__msg__Joy__rosidl_typesupport_introspection_c__get_const_function__Joy__axes>:
 800c13c:	6800      	ldr	r0, [r0, #0]
 800c13e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800c142:	4770      	bx	lr

0800c144 <sensor_msgs__msg__Joy__rosidl_typesupport_introspection_c__fetch_function__Joy__axes>:
 800c144:	6803      	ldr	r3, [r0, #0]
 800c146:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800c14a:	680b      	ldr	r3, [r1, #0]
 800c14c:	6013      	str	r3, [r2, #0]
 800c14e:	4770      	bx	lr

0800c150 <sensor_msgs__msg__Joy__rosidl_typesupport_introspection_c__assign_function__Joy__axes>:
 800c150:	6803      	ldr	r3, [r0, #0]
 800c152:	6812      	ldr	r2, [r2, #0]
 800c154:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800c158:	600a      	str	r2, [r1, #0]
 800c15a:	4770      	bx	lr

0800c15c <sensor_msgs__msg__Joy__rosidl_typesupport_introspection_c__size_function__Joy__buttons>:
 800c15c:	6840      	ldr	r0, [r0, #4]
 800c15e:	4770      	bx	lr

0800c160 <sensor_msgs__msg__Joy__rosidl_typesupport_introspection_c__get_const_function__Joy__buttons>:
 800c160:	6800      	ldr	r0, [r0, #0]
 800c162:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800c166:	4770      	bx	lr

0800c168 <sensor_msgs__msg__Joy__rosidl_typesupport_introspection_c__fetch_function__Joy__buttons>:
 800c168:	6803      	ldr	r3, [r0, #0]
 800c16a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c16e:	6013      	str	r3, [r2, #0]
 800c170:	4770      	bx	lr
 800c172:	bf00      	nop

0800c174 <sensor_msgs__msg__Joy__rosidl_typesupport_introspection_c__assign_function__Joy__buttons>:
 800c174:	6803      	ldr	r3, [r0, #0]
 800c176:	6812      	ldr	r2, [r2, #0]
 800c178:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800c17c:	4770      	bx	lr
 800c17e:	bf00      	nop

0800c180 <sensor_msgs__msg__Joy__rosidl_typesupport_introspection_c__Joy_init_function>:
 800c180:	f00a bae8 	b.w	8016754 <sensor_msgs__msg__Joy__init>

0800c184 <sensor_msgs__msg__Joy__rosidl_typesupport_introspection_c__Joy_fini_function>:
 800c184:	f00a bb26 	b.w	80167d4 <sensor_msgs__msg__Joy__fini>

0800c188 <sensor_msgs__msg__Joy__rosidl_typesupport_introspection_c__resize_function__Joy__axes>:
 800c188:	b510      	push	{r4, lr}
 800c18a:	b082      	sub	sp, #8
 800c18c:	4604      	mov	r4, r0
 800c18e:	9101      	str	r1, [sp, #4]
 800c190:	f00a fa36 	bl	8016600 <rosidl_runtime_c__float__Sequence__fini>
 800c194:	9901      	ldr	r1, [sp, #4]
 800c196:	4620      	mov	r0, r4
 800c198:	b002      	add	sp, #8
 800c19a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c19e:	f00a ba17 	b.w	80165d0 <rosidl_runtime_c__float__Sequence__init>
 800c1a2:	bf00      	nop

0800c1a4 <sensor_msgs__msg__Joy__rosidl_typesupport_introspection_c__resize_function__Joy__buttons>:
 800c1a4:	b510      	push	{r4, lr}
 800c1a6:	b082      	sub	sp, #8
 800c1a8:	4604      	mov	r4, r0
 800c1aa:	9101      	str	r1, [sp, #4]
 800c1ac:	f00a fa54 	bl	8016658 <rosidl_runtime_c__int32__Sequence__fini>
 800c1b0:	9901      	ldr	r1, [sp, #4]
 800c1b2:	4620      	mov	r0, r4
 800c1b4:	b002      	add	sp, #8
 800c1b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c1ba:	f00a ba35 	b.w	8016628 <rosidl_runtime_c__int32__Sequence__init>
 800c1be:	bf00      	nop

0800c1c0 <sensor_msgs__msg__Joy__rosidl_typesupport_introspection_c__get_function__Joy__buttons>:
 800c1c0:	6800      	ldr	r0, [r0, #0]
 800c1c2:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800c1c6:	4770      	bx	lr

0800c1c8 <sensor_msgs__msg__Joy__rosidl_typesupport_introspection_c__get_function__Joy__axes>:
 800c1c8:	6800      	ldr	r0, [r0, #0]
 800c1ca:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800c1ce:	4770      	bx	lr

0800c1d0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Joy>:
 800c1d0:	b508      	push	{r3, lr}
 800c1d2:	f000 f9d5 	bl	800c580 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 800c1d6:	4b06      	ldr	r3, [pc, #24]	@ (800c1f0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Joy+0x20>)
 800c1d8:	4906      	ldr	r1, [pc, #24]	@ (800c1f4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Joy+0x24>)
 800c1da:	681a      	ldr	r2, [r3, #0]
 800c1dc:	60c8      	str	r0, [r1, #12]
 800c1de:	b10a      	cbz	r2, 800c1e4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Joy+0x14>
 800c1e0:	4803      	ldr	r0, [pc, #12]	@ (800c1f0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Joy+0x20>)
 800c1e2:	bd08      	pop	{r3, pc}
 800c1e4:	4a04      	ldr	r2, [pc, #16]	@ (800c1f8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Joy+0x28>)
 800c1e6:	4802      	ldr	r0, [pc, #8]	@ (800c1f0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Joy+0x20>)
 800c1e8:	6812      	ldr	r2, [r2, #0]
 800c1ea:	601a      	str	r2, [r3, #0]
 800c1ec:	bd08      	pop	{r3, pc}
 800c1ee:	bf00      	nop
 800c1f0:	20000400 	.word	0x20000400
 800c1f4:	2000034c 	.word	0x2000034c
 800c1f8:	20000170 	.word	0x20000170

0800c1fc <get_serialized_size_sensor_msgs__msg__Imu.part.0>:
 800c1fc:	e92d 41b8 	stmdb	sp!, {r3, r4, r5, r7, r8, lr}
 800c200:	4680      	mov	r8, r0
 800c202:	460f      	mov	r7, r1
 800c204:	f000 f9e0 	bl	800c5c8 <get_serialized_size_std_msgs__msg__Header>
 800c208:	183c      	adds	r4, r7, r0
 800c20a:	4621      	mov	r1, r4
 800c20c:	f108 0018 	add.w	r0, r8, #24
 800c210:	f000 fafe 	bl	800c810 <get_serialized_size_geometry_msgs__msg__Quaternion>
 800c214:	4404      	add	r4, r0
 800c216:	2108      	movs	r1, #8
 800c218:	4620      	mov	r0, r4
 800c21a:	f002 fdf9 	bl	800ee10 <ucdr_alignment>
 800c21e:	f100 0548 	add.w	r5, r0, #72	@ 0x48
 800c222:	4425      	add	r5, r4
 800c224:	4629      	mov	r1, r5
 800c226:	f108 0080 	add.w	r0, r8, #128	@ 0x80
 800c22a:	f000 fba9 	bl	800c980 <get_serialized_size_geometry_msgs__msg__Vector3>
 800c22e:	4405      	add	r5, r0
 800c230:	2108      	movs	r1, #8
 800c232:	4628      	mov	r0, r5
 800c234:	f002 fdec 	bl	800ee10 <ucdr_alignment>
 800c238:	f100 0448 	add.w	r4, r0, #72	@ 0x48
 800c23c:	4425      	add	r5, r4
 800c23e:	4629      	mov	r1, r5
 800c240:	f108 00e0 	add.w	r0, r8, #224	@ 0xe0
 800c244:	f000 fb9c 	bl	800c980 <get_serialized_size_geometry_msgs__msg__Vector3>
 800c248:	4405      	add	r5, r0
 800c24a:	2108      	movs	r1, #8
 800c24c:	4628      	mov	r0, r5
 800c24e:	f002 fddf 	bl	800ee10 <ucdr_alignment>
 800c252:	f1c7 0748 	rsb	r7, r7, #72	@ 0x48
 800c256:	4438      	add	r0, r7
 800c258:	4428      	add	r0, r5
 800c25a:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 800c25e:	bf00      	nop

0800c260 <get_serialized_size_sensor_msgs__msg__Imu>:
 800c260:	b108      	cbz	r0, 800c266 <get_serialized_size_sensor_msgs__msg__Imu+0x6>
 800c262:	f7ff bfcb 	b.w	800c1fc <get_serialized_size_sensor_msgs__msg__Imu.part.0>
 800c266:	4770      	bx	lr

0800c268 <_Imu__get_serialized_size>:
 800c268:	b110      	cbz	r0, 800c270 <_Imu__get_serialized_size+0x8>
 800c26a:	2100      	movs	r1, #0
 800c26c:	f7ff bfc6 	b.w	800c1fc <get_serialized_size_sensor_msgs__msg__Imu.part.0>
 800c270:	4770      	bx	lr
 800c272:	bf00      	nop

0800c274 <_Imu__cdr_deserialize>:
 800c274:	b538      	push	{r3, r4, r5, lr}
 800c276:	460c      	mov	r4, r1
 800c278:	b399      	cbz	r1, 800c2e2 <_Imu__cdr_deserialize+0x6e>
 800c27a:	4605      	mov	r5, r0
 800c27c:	f000 fa26 	bl	800c6cc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800c280:	6843      	ldr	r3, [r0, #4]
 800c282:	4621      	mov	r1, r4
 800c284:	68db      	ldr	r3, [r3, #12]
 800c286:	4628      	mov	r0, r5
 800c288:	4798      	blx	r3
 800c28a:	f000 fb75 	bl	800c978 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 800c28e:	6843      	ldr	r3, [r0, #4]
 800c290:	f104 0118 	add.w	r1, r4, #24
 800c294:	68db      	ldr	r3, [r3, #12]
 800c296:	4628      	mov	r0, r5
 800c298:	4798      	blx	r3
 800c29a:	2209      	movs	r2, #9
 800c29c:	f104 0138 	add.w	r1, r4, #56	@ 0x38
 800c2a0:	4628      	mov	r0, r5
 800c2a2:	f000 ffed 	bl	800d280 <ucdr_deserialize_array_double>
 800c2a6:	f000 fbf7 	bl	800ca98 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800c2aa:	6843      	ldr	r3, [r0, #4]
 800c2ac:	f104 0180 	add.w	r1, r4, #128	@ 0x80
 800c2b0:	68db      	ldr	r3, [r3, #12]
 800c2b2:	4628      	mov	r0, r5
 800c2b4:	4798      	blx	r3
 800c2b6:	2209      	movs	r2, #9
 800c2b8:	f104 0198 	add.w	r1, r4, #152	@ 0x98
 800c2bc:	4628      	mov	r0, r5
 800c2be:	f000 ffdf 	bl	800d280 <ucdr_deserialize_array_double>
 800c2c2:	f000 fbe9 	bl	800ca98 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800c2c6:	6843      	ldr	r3, [r0, #4]
 800c2c8:	f104 01e0 	add.w	r1, r4, #224	@ 0xe0
 800c2cc:	68db      	ldr	r3, [r3, #12]
 800c2ce:	4628      	mov	r0, r5
 800c2d0:	4798      	blx	r3
 800c2d2:	f104 01f8 	add.w	r1, r4, #248	@ 0xf8
 800c2d6:	4628      	mov	r0, r5
 800c2d8:	2209      	movs	r2, #9
 800c2da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c2de:	f000 bfcf 	b.w	800d280 <ucdr_deserialize_array_double>
 800c2e2:	4608      	mov	r0, r1
 800c2e4:	bd38      	pop	{r3, r4, r5, pc}
 800c2e6:	bf00      	nop

0800c2e8 <_Imu__cdr_serialize>:
 800c2e8:	2800      	cmp	r0, #0
 800c2ea:	d035      	beq.n	800c358 <_Imu__cdr_serialize+0x70>
 800c2ec:	b538      	push	{r3, r4, r5, lr}
 800c2ee:	460d      	mov	r5, r1
 800c2f0:	4604      	mov	r4, r0
 800c2f2:	f000 f9eb 	bl	800c6cc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800c2f6:	6843      	ldr	r3, [r0, #4]
 800c2f8:	4629      	mov	r1, r5
 800c2fa:	689b      	ldr	r3, [r3, #8]
 800c2fc:	4620      	mov	r0, r4
 800c2fe:	4798      	blx	r3
 800c300:	f000 fb3a 	bl	800c978 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 800c304:	6843      	ldr	r3, [r0, #4]
 800c306:	4629      	mov	r1, r5
 800c308:	689b      	ldr	r3, [r3, #8]
 800c30a:	f104 0018 	add.w	r0, r4, #24
 800c30e:	4798      	blx	r3
 800c310:	2209      	movs	r2, #9
 800c312:	f104 0138 	add.w	r1, r4, #56	@ 0x38
 800c316:	4628      	mov	r0, r5
 800c318:	f000 ff5e 	bl	800d1d8 <ucdr_serialize_array_double>
 800c31c:	f000 fbbc 	bl	800ca98 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800c320:	6843      	ldr	r3, [r0, #4]
 800c322:	4629      	mov	r1, r5
 800c324:	689b      	ldr	r3, [r3, #8]
 800c326:	f104 0080 	add.w	r0, r4, #128	@ 0x80
 800c32a:	4798      	blx	r3
 800c32c:	2209      	movs	r2, #9
 800c32e:	f104 0198 	add.w	r1, r4, #152	@ 0x98
 800c332:	4628      	mov	r0, r5
 800c334:	f000 ff50 	bl	800d1d8 <ucdr_serialize_array_double>
 800c338:	f000 fbae 	bl	800ca98 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800c33c:	6843      	ldr	r3, [r0, #4]
 800c33e:	4629      	mov	r1, r5
 800c340:	689b      	ldr	r3, [r3, #8]
 800c342:	f104 00e0 	add.w	r0, r4, #224	@ 0xe0
 800c346:	4798      	blx	r3
 800c348:	f104 01f8 	add.w	r1, r4, #248	@ 0xf8
 800c34c:	4628      	mov	r0, r5
 800c34e:	2209      	movs	r2, #9
 800c350:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c354:	f000 bf40 	b.w	800d1d8 <ucdr_serialize_array_double>
 800c358:	4770      	bx	lr
 800c35a:	bf00      	nop

0800c35c <max_serialized_size_sensor_msgs__msg__Imu>:
 800c35c:	e92d 41b8 	stmdb	sp!, {r3, r4, r5, r7, r8, lr}
 800c360:	2301      	movs	r3, #1
 800c362:	7003      	strb	r3, [r0, #0]
 800c364:	4680      	mov	r8, r0
 800c366:	460f      	mov	r7, r1
 800c368:	f000 f9a6 	bl	800c6b8 <max_serialized_size_std_msgs__msg__Header>
 800c36c:	183c      	adds	r4, r7, r0
 800c36e:	4621      	mov	r1, r4
 800c370:	4640      	mov	r0, r8
 800c372:	f000 fadf 	bl	800c934 <max_serialized_size_geometry_msgs__msg__Quaternion>
 800c376:	4404      	add	r4, r0
 800c378:	2108      	movs	r1, #8
 800c37a:	4620      	mov	r0, r4
 800c37c:	f002 fd48 	bl	800ee10 <ucdr_alignment>
 800c380:	f100 0548 	add.w	r5, r0, #72	@ 0x48
 800c384:	4425      	add	r5, r4
 800c386:	4629      	mov	r1, r5
 800c388:	4640      	mov	r0, r8
 800c38a:	f000 fb69 	bl	800ca60 <max_serialized_size_geometry_msgs__msg__Vector3>
 800c38e:	4405      	add	r5, r0
 800c390:	2108      	movs	r1, #8
 800c392:	4628      	mov	r0, r5
 800c394:	f002 fd3c 	bl	800ee10 <ucdr_alignment>
 800c398:	f100 0448 	add.w	r4, r0, #72	@ 0x48
 800c39c:	4425      	add	r5, r4
 800c39e:	4629      	mov	r1, r5
 800c3a0:	4640      	mov	r0, r8
 800c3a2:	f000 fb5d 	bl	800ca60 <max_serialized_size_geometry_msgs__msg__Vector3>
 800c3a6:	4405      	add	r5, r0
 800c3a8:	2108      	movs	r1, #8
 800c3aa:	4628      	mov	r0, r5
 800c3ac:	f002 fd30 	bl	800ee10 <ucdr_alignment>
 800c3b0:	f1c7 0748 	rsb	r7, r7, #72	@ 0x48
 800c3b4:	4438      	add	r0, r7
 800c3b6:	4428      	add	r0, r5
 800c3b8:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}

0800c3bc <_Imu__max_serialized_size>:
 800c3bc:	b500      	push	{lr}
 800c3be:	b083      	sub	sp, #12
 800c3c0:	2100      	movs	r1, #0
 800c3c2:	f10d 0007 	add.w	r0, sp, #7
 800c3c6:	f7ff ffc9 	bl	800c35c <max_serialized_size_sensor_msgs__msg__Imu>
 800c3ca:	b003      	add	sp, #12
 800c3cc:	f85d fb04 	ldr.w	pc, [sp], #4

0800c3d0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 800c3d0:	4800      	ldr	r0, [pc, #0]	@ (800c3d4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x4>)
 800c3d2:	4770      	bx	lr
 800c3d4:	2000040c 	.word	0x2000040c

0800c3d8 <_Joy__max_serialized_size>:
 800c3d8:	b500      	push	{lr}
 800c3da:	b083      	sub	sp, #12
 800c3dc:	2301      	movs	r3, #1
 800c3de:	2100      	movs	r1, #0
 800c3e0:	f10d 0007 	add.w	r0, sp, #7
 800c3e4:	f88d 3007 	strb.w	r3, [sp, #7]
 800c3e8:	f000 f966 	bl	800c6b8 <max_serialized_size_std_msgs__msg__Header>
 800c3ec:	b003      	add	sp, #12
 800c3ee:	f85d fb04 	ldr.w	pc, [sp], #4
 800c3f2:	bf00      	nop

0800c3f4 <get_serialized_size_sensor_msgs__msg__Joy>:
 800c3f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3f8:	4604      	mov	r4, r0
 800c3fa:	b1b8      	cbz	r0, 800c42c <get_serialized_size_sensor_msgs__msg__Joy+0x38>
 800c3fc:	460e      	mov	r6, r1
 800c3fe:	f000 f8e3 	bl	800c5c8 <get_serialized_size_std_msgs__msg__Header>
 800c402:	1837      	adds	r7, r6, r0
 800c404:	2104      	movs	r1, #4
 800c406:	4638      	mov	r0, r7
 800c408:	f8d4 8018 	ldr.w	r8, [r4, #24]
 800c40c:	f002 fd00 	bl	800ee10 <ucdr_alignment>
 800c410:	1d05      	adds	r5, r0, #4
 800c412:	443d      	add	r5, r7
 800c414:	f1b8 0f00 	cmp.w	r8, #0
 800c418:	d112      	bne.n	800c440 <get_serialized_size_sensor_msgs__msg__Joy+0x4c>
 800c41a:	4628      	mov	r0, r5
 800c41c:	2104      	movs	r1, #4
 800c41e:	6a67      	ldr	r7, [r4, #36]	@ 0x24
 800c420:	f002 fcf6 	bl	800ee10 <ucdr_alignment>
 800c424:	4405      	add	r5, r0
 800c426:	3504      	adds	r5, #4
 800c428:	b917      	cbnz	r7, 800c430 <get_serialized_size_sensor_msgs__msg__Joy+0x3c>
 800c42a:	1ba8      	subs	r0, r5, r6
 800c42c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c430:	4628      	mov	r0, r5
 800c432:	2104      	movs	r1, #4
 800c434:	f002 fcec 	bl	800ee10 <ucdr_alignment>
 800c438:	eb05 0387 	add.w	r3, r5, r7, lsl #2
 800c43c:	18c5      	adds	r5, r0, r3
 800c43e:	e7f4      	b.n	800c42a <get_serialized_size_sensor_msgs__msg__Joy+0x36>
 800c440:	4628      	mov	r0, r5
 800c442:	2104      	movs	r1, #4
 800c444:	f002 fce4 	bl	800ee10 <ucdr_alignment>
 800c448:	eb05 0588 	add.w	r5, r5, r8, lsl #2
 800c44c:	4405      	add	r5, r0
 800c44e:	e7e4      	b.n	800c41a <get_serialized_size_sensor_msgs__msg__Joy+0x26>

0800c450 <_Joy__cdr_deserialize>:
 800c450:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c452:	460c      	mov	r4, r1
 800c454:	b083      	sub	sp, #12
 800c456:	2900      	cmp	r1, #0
 800c458:	d035      	beq.n	800c4c6 <_Joy__cdr_deserialize+0x76>
 800c45a:	4606      	mov	r6, r0
 800c45c:	f000 f936 	bl	800c6cc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800c460:	6843      	ldr	r3, [r0, #4]
 800c462:	4621      	mov	r1, r4
 800c464:	68db      	ldr	r3, [r3, #12]
 800c466:	4630      	mov	r0, r6
 800c468:	4798      	blx	r3
 800c46a:	69e5      	ldr	r5, [r4, #28]
 800c46c:	6961      	ldr	r1, [r4, #20]
 800c46e:	ab01      	add	r3, sp, #4
 800c470:	462a      	mov	r2, r5
 800c472:	4630      	mov	r0, r6
 800c474:	f002 fdce 	bl	800f014 <ucdr_deserialize_sequence_float>
 800c478:	b980      	cbnz	r0, 800c49c <_Joy__cdr_deserialize+0x4c>
 800c47a:	9a01      	ldr	r2, [sp, #4]
 800c47c:	4295      	cmp	r5, r2
 800c47e:	d326      	bcc.n	800c4ce <_Joy__cdr_deserialize+0x7e>
 800c480:	6aa7      	ldr	r7, [r4, #40]	@ 0x28
 800c482:	6a21      	ldr	r1, [r4, #32]
 800c484:	ab01      	add	r3, sp, #4
 800c486:	463a      	mov	r2, r7
 800c488:	4630      	mov	r0, r6
 800c48a:	f002 fd97 	bl	800efbc <ucdr_deserialize_sequence_int32_t>
 800c48e:	9b01      	ldr	r3, [sp, #4]
 800c490:	4605      	mov	r5, r0
 800c492:	b130      	cbz	r0, 800c4a2 <_Joy__cdr_deserialize+0x52>
 800c494:	6263      	str	r3, [r4, #36]	@ 0x24
 800c496:	4628      	mov	r0, r5
 800c498:	b003      	add	sp, #12
 800c49a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c49c:	9b01      	ldr	r3, [sp, #4]
 800c49e:	61a3      	str	r3, [r4, #24]
 800c4a0:	e7ee      	b.n	800c480 <_Joy__cdr_deserialize+0x30>
 800c4a2:	429f      	cmp	r7, r3
 800c4a4:	d2f7      	bcs.n	800c496 <_Joy__cdr_deserialize+0x46>
 800c4a6:	2301      	movs	r3, #1
 800c4a8:	75b0      	strb	r0, [r6, #22]
 800c4aa:	7573      	strb	r3, [r6, #21]
 800c4ac:	4630      	mov	r0, r6
 800c4ae:	6265      	str	r5, [r4, #36]	@ 0x24
 800c4b0:	2104      	movs	r1, #4
 800c4b2:	f002 fcc3 	bl	800ee3c <ucdr_align_to>
 800c4b6:	9901      	ldr	r1, [sp, #4]
 800c4b8:	4630      	mov	r0, r6
 800c4ba:	0089      	lsls	r1, r1, #2
 800c4bc:	f002 fcf4 	bl	800eea8 <ucdr_advance_buffer>
 800c4c0:	4628      	mov	r0, r5
 800c4c2:	b003      	add	sp, #12
 800c4c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c4c6:	460d      	mov	r5, r1
 800c4c8:	4628      	mov	r0, r5
 800c4ca:	b003      	add	sp, #12
 800c4cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c4ce:	2201      	movs	r2, #1
 800c4d0:	75b0      	strb	r0, [r6, #22]
 800c4d2:	7572      	strb	r2, [r6, #21]
 800c4d4:	2104      	movs	r1, #4
 800c4d6:	61a0      	str	r0, [r4, #24]
 800c4d8:	4630      	mov	r0, r6
 800c4da:	f002 fcaf 	bl	800ee3c <ucdr_align_to>
 800c4de:	9901      	ldr	r1, [sp, #4]
 800c4e0:	4630      	mov	r0, r6
 800c4e2:	0089      	lsls	r1, r1, #2
 800c4e4:	f002 fce0 	bl	800eea8 <ucdr_advance_buffer>
 800c4e8:	e7ca      	b.n	800c480 <_Joy__cdr_deserialize+0x30>
 800c4ea:	bf00      	nop

0800c4ec <_Joy__cdr_serialize>:
 800c4ec:	b1a8      	cbz	r0, 800c51a <_Joy__cdr_serialize+0x2e>
 800c4ee:	b538      	push	{r3, r4, r5, lr}
 800c4f0:	460d      	mov	r5, r1
 800c4f2:	4604      	mov	r4, r0
 800c4f4:	f000 f8ea 	bl	800c6cc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800c4f8:	6843      	ldr	r3, [r0, #4]
 800c4fa:	4629      	mov	r1, r5
 800c4fc:	689b      	ldr	r3, [r3, #8]
 800c4fe:	4620      	mov	r0, r4
 800c500:	4798      	blx	r3
 800c502:	e9d4 1205 	ldrd	r1, r2, [r4, #20]
 800c506:	4628      	mov	r0, r5
 800c508:	f002 fd72 	bl	800eff0 <ucdr_serialize_sequence_float>
 800c50c:	e9d4 1208 	ldrd	r1, r2, [r4, #32]
 800c510:	4628      	mov	r0, r5
 800c512:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c516:	f002 bd3f 	b.w	800ef98 <ucdr_serialize_sequence_int32_t>
 800c51a:	4770      	bx	lr

0800c51c <_Joy__get_serialized_size>:
 800c51c:	b570      	push	{r4, r5, r6, lr}
 800c51e:	4604      	mov	r4, r0
 800c520:	b190      	cbz	r0, 800c548 <_Joy__get_serialized_size+0x2c>
 800c522:	2100      	movs	r1, #0
 800c524:	f000 f850 	bl	800c5c8 <get_serialized_size_std_msgs__msg__Header>
 800c528:	2104      	movs	r1, #4
 800c52a:	4605      	mov	r5, r0
 800c52c:	69a6      	ldr	r6, [r4, #24]
 800c52e:	f002 fc6f 	bl	800ee10 <ucdr_alignment>
 800c532:	4428      	add	r0, r5
 800c534:	1d05      	adds	r5, r0, #4
 800c536:	b996      	cbnz	r6, 800c55e <_Joy__get_serialized_size+0x42>
 800c538:	2104      	movs	r1, #4
 800c53a:	4628      	mov	r0, r5
 800c53c:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 800c53e:	f002 fc67 	bl	800ee10 <ucdr_alignment>
 800c542:	4428      	add	r0, r5
 800c544:	1d04      	adds	r4, r0, #4
 800c546:	b90e      	cbnz	r6, 800c54c <_Joy__get_serialized_size+0x30>
 800c548:	4620      	mov	r0, r4
 800c54a:	bd70      	pop	{r4, r5, r6, pc}
 800c54c:	4620      	mov	r0, r4
 800c54e:	2104      	movs	r1, #4
 800c550:	f002 fc5e 	bl	800ee10 <ucdr_alignment>
 800c554:	eb04 0486 	add.w	r4, r4, r6, lsl #2
 800c558:	4404      	add	r4, r0
 800c55a:	4620      	mov	r0, r4
 800c55c:	bd70      	pop	{r4, r5, r6, pc}
 800c55e:	4628      	mov	r0, r5
 800c560:	2104      	movs	r1, #4
 800c562:	f002 fc55 	bl	800ee10 <ucdr_alignment>
 800c566:	eb05 0586 	add.w	r5, r5, r6, lsl #2
 800c56a:	4405      	add	r5, r0
 800c56c:	e7e4      	b.n	800c538 <_Joy__get_serialized_size+0x1c>
 800c56e:	bf00      	nop

0800c570 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Joy>:
 800c570:	4800      	ldr	r0, [pc, #0]	@ (800c574 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Joy+0x4>)
 800c572:	4770      	bx	lr
 800c574:	20000434 	.word	0x20000434

0800c578 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_init_function>:
 800c578:	f00a b93c 	b.w	80167f4 <std_msgs__msg__Header__init>

0800c57c <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_fini_function>:
 800c57c:	f00a b95e 	b.w	801683c <std_msgs__msg__Header__fini>

0800c580 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>:
 800c580:	b508      	push	{r3, lr}
 800c582:	f000 f8ab 	bl	800c6dc <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800c586:	4b06      	ldr	r3, [pc, #24]	@ (800c5a0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 800c588:	4906      	ldr	r1, [pc, #24]	@ (800c5a4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x24>)
 800c58a:	681a      	ldr	r2, [r3, #0]
 800c58c:	60c8      	str	r0, [r1, #12]
 800c58e:	b10a      	cbz	r2, 800c594 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x14>
 800c590:	4803      	ldr	r0, [pc, #12]	@ (800c5a0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 800c592:	bd08      	pop	{r3, pc}
 800c594:	4a04      	ldr	r2, [pc, #16]	@ (800c5a8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x28>)
 800c596:	4802      	ldr	r0, [pc, #8]	@ (800c5a0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 800c598:	6812      	ldr	r2, [r2, #0]
 800c59a:	601a      	str	r2, [r3, #0]
 800c59c:	bd08      	pop	{r3, pc}
 800c59e:	bf00      	nop
 800c5a0:	200004d4 	.word	0x200004d4
 800c5a4:	2000045c 	.word	0x2000045c
 800c5a8:	20000170 	.word	0x20000170

0800c5ac <_Header__max_serialized_size>:
 800c5ac:	b500      	push	{lr}
 800c5ae:	b083      	sub	sp, #12
 800c5b0:	2301      	movs	r3, #1
 800c5b2:	2100      	movs	r1, #0
 800c5b4:	f10d 0007 	add.w	r0, sp, #7
 800c5b8:	f88d 3007 	strb.w	r3, [sp, #7]
 800c5bc:	f000 f8ec 	bl	800c798 <max_serialized_size_builtin_interfaces__msg__Time>
 800c5c0:	b003      	add	sp, #12
 800c5c2:	f85d fb04 	ldr.w	pc, [sp], #4
 800c5c6:	bf00      	nop

0800c5c8 <get_serialized_size_std_msgs__msg__Header>:
 800c5c8:	b570      	push	{r4, r5, r6, lr}
 800c5ca:	4605      	mov	r5, r0
 800c5cc:	b168      	cbz	r0, 800c5ea <get_serialized_size_std_msgs__msg__Header+0x22>
 800c5ce:	460c      	mov	r4, r1
 800c5d0:	f000 f892 	bl	800c6f8 <get_serialized_size_builtin_interfaces__msg__Time>
 800c5d4:	1826      	adds	r6, r4, r0
 800c5d6:	2104      	movs	r1, #4
 800c5d8:	4630      	mov	r0, r6
 800c5da:	f002 fc19 	bl	800ee10 <ucdr_alignment>
 800c5de:	68e9      	ldr	r1, [r5, #12]
 800c5e0:	f1c4 0405 	rsb	r4, r4, #5
 800c5e4:	440c      	add	r4, r1
 800c5e6:	4404      	add	r4, r0
 800c5e8:	19a0      	adds	r0, r4, r6
 800c5ea:	bd70      	pop	{r4, r5, r6, pc}

0800c5ec <_Header__cdr_deserialize>:
 800c5ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c5ee:	460c      	mov	r4, r1
 800c5f0:	b083      	sub	sp, #12
 800c5f2:	b1e1      	cbz	r1, 800c62e <_Header__cdr_deserialize+0x42>
 800c5f4:	4606      	mov	r6, r0
 800c5f6:	f000 f8e3 	bl	800c7c0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800c5fa:	6843      	ldr	r3, [r0, #4]
 800c5fc:	4621      	mov	r1, r4
 800c5fe:	68db      	ldr	r3, [r3, #12]
 800c600:	4630      	mov	r0, r6
 800c602:	4798      	blx	r3
 800c604:	6927      	ldr	r7, [r4, #16]
 800c606:	68a1      	ldr	r1, [r4, #8]
 800c608:	ab01      	add	r3, sp, #4
 800c60a:	463a      	mov	r2, r7
 800c60c:	4630      	mov	r0, r6
 800c60e:	f002 fc7d 	bl	800ef0c <ucdr_deserialize_sequence_char>
 800c612:	9b01      	ldr	r3, [sp, #4]
 800c614:	4605      	mov	r5, r0
 800c616:	b920      	cbnz	r0, 800c622 <_Header__cdr_deserialize+0x36>
 800c618:	429f      	cmp	r7, r3
 800c61a:	d30c      	bcc.n	800c636 <_Header__cdr_deserialize+0x4a>
 800c61c:	4628      	mov	r0, r5
 800c61e:	b003      	add	sp, #12
 800c620:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c622:	b103      	cbz	r3, 800c626 <_Header__cdr_deserialize+0x3a>
 800c624:	3b01      	subs	r3, #1
 800c626:	4628      	mov	r0, r5
 800c628:	60e3      	str	r3, [r4, #12]
 800c62a:	b003      	add	sp, #12
 800c62c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c62e:	460d      	mov	r5, r1
 800c630:	4628      	mov	r0, r5
 800c632:	b003      	add	sp, #12
 800c634:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c636:	2101      	movs	r1, #1
 800c638:	75b0      	strb	r0, [r6, #22]
 800c63a:	7571      	strb	r1, [r6, #21]
 800c63c:	4630      	mov	r0, r6
 800c63e:	60e5      	str	r5, [r4, #12]
 800c640:	f002 fbfc 	bl	800ee3c <ucdr_align_to>
 800c644:	4630      	mov	r0, r6
 800c646:	9901      	ldr	r1, [sp, #4]
 800c648:	f002 fc2e 	bl	800eea8 <ucdr_advance_buffer>
 800c64c:	4628      	mov	r0, r5
 800c64e:	b003      	add	sp, #12
 800c650:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c652:	bf00      	nop

0800c654 <_Header__cdr_serialize>:
 800c654:	b1f8      	cbz	r0, 800c696 <_Header__cdr_serialize+0x42>
 800c656:	b570      	push	{r4, r5, r6, lr}
 800c658:	4604      	mov	r4, r0
 800c65a:	460d      	mov	r5, r1
 800c65c:	f000 f8b0 	bl	800c7c0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800c660:	6843      	ldr	r3, [r0, #4]
 800c662:	4629      	mov	r1, r5
 800c664:	689b      	ldr	r3, [r3, #8]
 800c666:	4620      	mov	r0, r4
 800c668:	4798      	blx	r3
 800c66a:	68a6      	ldr	r6, [r4, #8]
 800c66c:	b156      	cbz	r6, 800c684 <_Header__cdr_serialize+0x30>
 800c66e:	4630      	mov	r0, r6
 800c670:	f7f3 fdc6 	bl	8000200 <strlen>
 800c674:	4631      	mov	r1, r6
 800c676:	60e0      	str	r0, [r4, #12]
 800c678:	1c42      	adds	r2, r0, #1
 800c67a:	4628      	mov	r0, r5
 800c67c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c680:	f002 bc32 	b.w	800eee8 <ucdr_serialize_sequence_char>
 800c684:	4630      	mov	r0, r6
 800c686:	60e0      	str	r0, [r4, #12]
 800c688:	4632      	mov	r2, r6
 800c68a:	4631      	mov	r1, r6
 800c68c:	4628      	mov	r0, r5
 800c68e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c692:	f002 bc29 	b.w	800eee8 <ucdr_serialize_sequence_char>
 800c696:	4770      	bx	lr

0800c698 <_Header__get_serialized_size>:
 800c698:	b538      	push	{r3, r4, r5, lr}
 800c69a:	4604      	mov	r4, r0
 800c69c:	b150      	cbz	r0, 800c6b4 <_Header__get_serialized_size+0x1c>
 800c69e:	2100      	movs	r1, #0
 800c6a0:	f000 f82a 	bl	800c6f8 <get_serialized_size_builtin_interfaces__msg__Time>
 800c6a4:	2104      	movs	r1, #4
 800c6a6:	4605      	mov	r5, r0
 800c6a8:	f002 fbb2 	bl	800ee10 <ucdr_alignment>
 800c6ac:	68e2      	ldr	r2, [r4, #12]
 800c6ae:	3205      	adds	r2, #5
 800c6b0:	1953      	adds	r3, r2, r5
 800c6b2:	4418      	add	r0, r3
 800c6b4:	bd38      	pop	{r3, r4, r5, pc}
 800c6b6:	bf00      	nop

0800c6b8 <max_serialized_size_std_msgs__msg__Header>:
 800c6b8:	b510      	push	{r4, lr}
 800c6ba:	2301      	movs	r3, #1
 800c6bc:	4604      	mov	r4, r0
 800c6be:	7003      	strb	r3, [r0, #0]
 800c6c0:	f000 f86a 	bl	800c798 <max_serialized_size_builtin_interfaces__msg__Time>
 800c6c4:	2300      	movs	r3, #0
 800c6c6:	7023      	strb	r3, [r4, #0]
 800c6c8:	bd10      	pop	{r4, pc}
 800c6ca:	bf00      	nop

0800c6cc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>:
 800c6cc:	4800      	ldr	r0, [pc, #0]	@ (800c6d0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header+0x4>)
 800c6ce:	4770      	bx	lr
 800c6d0:	200004e0 	.word	0x200004e0

0800c6d4 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_init_function>:
 800c6d4:	f00a b8be 	b.w	8016854 <builtin_interfaces__msg__Time__init>

0800c6d8 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_fini_function>:
 800c6d8:	f00a b8c0 	b.w	801685c <builtin_interfaces__msg__Time__fini>

0800c6dc <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 800c6dc:	4b04      	ldr	r3, [pc, #16]	@ (800c6f0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800c6de:	681a      	ldr	r2, [r3, #0]
 800c6e0:	b10a      	cbz	r2, 800c6e6 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0xa>
 800c6e2:	4803      	ldr	r0, [pc, #12]	@ (800c6f0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800c6e4:	4770      	bx	lr
 800c6e6:	4a03      	ldr	r2, [pc, #12]	@ (800c6f4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x18>)
 800c6e8:	4801      	ldr	r0, [pc, #4]	@ (800c6f0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800c6ea:	6812      	ldr	r2, [r2, #0]
 800c6ec:	601a      	str	r2, [r3, #0]
 800c6ee:	4770      	bx	lr
 800c6f0:	20000580 	.word	0x20000580
 800c6f4:	20000170 	.word	0x20000170

0800c6f8 <get_serialized_size_builtin_interfaces__msg__Time>:
 800c6f8:	b180      	cbz	r0, 800c71c <get_serialized_size_builtin_interfaces__msg__Time+0x24>
 800c6fa:	b538      	push	{r3, r4, r5, lr}
 800c6fc:	460d      	mov	r5, r1
 800c6fe:	4628      	mov	r0, r5
 800c700:	2104      	movs	r1, #4
 800c702:	f002 fb85 	bl	800ee10 <ucdr_alignment>
 800c706:	1d2b      	adds	r3, r5, #4
 800c708:	181c      	adds	r4, r3, r0
 800c70a:	2104      	movs	r1, #4
 800c70c:	4620      	mov	r0, r4
 800c70e:	f002 fb7f 	bl	800ee10 <ucdr_alignment>
 800c712:	f1c5 0504 	rsb	r5, r5, #4
 800c716:	4428      	add	r0, r5
 800c718:	4420      	add	r0, r4
 800c71a:	bd38      	pop	{r3, r4, r5, pc}
 800c71c:	4770      	bx	lr
 800c71e:	bf00      	nop

0800c720 <_Time__cdr_deserialize>:
 800c720:	b538      	push	{r3, r4, r5, lr}
 800c722:	460c      	mov	r4, r1
 800c724:	b141      	cbz	r1, 800c738 <_Time__cdr_deserialize+0x18>
 800c726:	4605      	mov	r5, r0
 800c728:	f001 fd8e 	bl	800e248 <ucdr_deserialize_int32_t>
 800c72c:	1d21      	adds	r1, r4, #4
 800c72e:	4628      	mov	r0, r5
 800c730:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c734:	f001 b96e 	b.w	800da14 <ucdr_deserialize_uint32_t>
 800c738:	4608      	mov	r0, r1
 800c73a:	bd38      	pop	{r3, r4, r5, pc}

0800c73c <_Time__cdr_serialize>:
 800c73c:	b160      	cbz	r0, 800c758 <_Time__cdr_serialize+0x1c>
 800c73e:	b538      	push	{r3, r4, r5, lr}
 800c740:	460d      	mov	r5, r1
 800c742:	4604      	mov	r4, r0
 800c744:	6801      	ldr	r1, [r0, #0]
 800c746:	4628      	mov	r0, r5
 800c748:	f001 fc4e 	bl	800dfe8 <ucdr_serialize_int32_t>
 800c74c:	6861      	ldr	r1, [r4, #4]
 800c74e:	4628      	mov	r0, r5
 800c750:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c754:	f001 b82e 	b.w	800d7b4 <ucdr_serialize_uint32_t>
 800c758:	4770      	bx	lr
 800c75a:	bf00      	nop

0800c75c <_Time__get_serialized_size>:
 800c75c:	b160      	cbz	r0, 800c778 <_Time__get_serialized_size+0x1c>
 800c75e:	b510      	push	{r4, lr}
 800c760:	2104      	movs	r1, #4
 800c762:	2000      	movs	r0, #0
 800c764:	f002 fb54 	bl	800ee10 <ucdr_alignment>
 800c768:	1d04      	adds	r4, r0, #4
 800c76a:	2104      	movs	r1, #4
 800c76c:	4620      	mov	r0, r4
 800c76e:	f002 fb4f 	bl	800ee10 <ucdr_alignment>
 800c772:	3004      	adds	r0, #4
 800c774:	4420      	add	r0, r4
 800c776:	bd10      	pop	{r4, pc}
 800c778:	4770      	bx	lr
 800c77a:	bf00      	nop

0800c77c <_Time__max_serialized_size>:
 800c77c:	b510      	push	{r4, lr}
 800c77e:	2104      	movs	r1, #4
 800c780:	2000      	movs	r0, #0
 800c782:	f002 fb45 	bl	800ee10 <ucdr_alignment>
 800c786:	1d04      	adds	r4, r0, #4
 800c788:	2104      	movs	r1, #4
 800c78a:	4620      	mov	r0, r4
 800c78c:	f002 fb40 	bl	800ee10 <ucdr_alignment>
 800c790:	3004      	adds	r0, #4
 800c792:	4420      	add	r0, r4
 800c794:	bd10      	pop	{r4, pc}
 800c796:	bf00      	nop

0800c798 <max_serialized_size_builtin_interfaces__msg__Time>:
 800c798:	b538      	push	{r3, r4, r5, lr}
 800c79a:	460c      	mov	r4, r1
 800c79c:	2301      	movs	r3, #1
 800c79e:	7003      	strb	r3, [r0, #0]
 800c7a0:	2104      	movs	r1, #4
 800c7a2:	4620      	mov	r0, r4
 800c7a4:	f002 fb34 	bl	800ee10 <ucdr_alignment>
 800c7a8:	1d25      	adds	r5, r4, #4
 800c7aa:	4405      	add	r5, r0
 800c7ac:	2104      	movs	r1, #4
 800c7ae:	4628      	mov	r0, r5
 800c7b0:	f002 fb2e 	bl	800ee10 <ucdr_alignment>
 800c7b4:	f1c4 0404 	rsb	r4, r4, #4
 800c7b8:	4420      	add	r0, r4
 800c7ba:	4428      	add	r0, r5
 800c7bc:	bd38      	pop	{r3, r4, r5, pc}
 800c7be:	bf00      	nop

0800c7c0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 800c7c0:	4800      	ldr	r0, [pc, #0]	@ (800c7c4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x4>)
 800c7c2:	4770      	bx	lr
 800c7c4:	2000058c 	.word	0x2000058c

0800c7c8 <geometry_msgs__msg__Quaternion__rosidl_typesupport_introspection_c__Quaternion_init_function>:
 800c7c8:	f00a b84a 	b.w	8016860 <geometry_msgs__msg__Quaternion__init>

0800c7cc <geometry_msgs__msg__Quaternion__rosidl_typesupport_introspection_c__Quaternion_fini_function>:
 800c7cc:	f00a b85c 	b.w	8016888 <geometry_msgs__msg__Quaternion__fini>

0800c7d0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>:
 800c7d0:	4b04      	ldr	r3, [pc, #16]	@ (800c7e4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 800c7d2:	681a      	ldr	r2, [r3, #0]
 800c7d4:	b10a      	cbz	r2, 800c7da <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0xa>
 800c7d6:	4803      	ldr	r0, [pc, #12]	@ (800c7e4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 800c7d8:	4770      	bx	lr
 800c7da:	4a03      	ldr	r2, [pc, #12]	@ (800c7e8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x18>)
 800c7dc:	4801      	ldr	r0, [pc, #4]	@ (800c7e4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 800c7de:	6812      	ldr	r2, [r2, #0]
 800c7e0:	601a      	str	r2, [r3, #0]
 800c7e2:	4770      	bx	lr
 800c7e4:	200006a4 	.word	0x200006a4
 800c7e8:	20000170 	.word	0x20000170

0800c7ec <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_init_function>:
 800c7ec:	f00a b84e 	b.w	801688c <geometry_msgs__msg__Vector3__init>

0800c7f0 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_fini_function>:
 800c7f0:	f00a b850 	b.w	8016894 <geometry_msgs__msg__Vector3__fini>

0800c7f4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800c7f4:	4b04      	ldr	r3, [pc, #16]	@ (800c808 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800c7f6:	681a      	ldr	r2, [r3, #0]
 800c7f8:	b10a      	cbz	r2, 800c7fe <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0xa>
 800c7fa:	4803      	ldr	r0, [pc, #12]	@ (800c808 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800c7fc:	4770      	bx	lr
 800c7fe:	4a03      	ldr	r2, [pc, #12]	@ (800c80c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x18>)
 800c800:	4801      	ldr	r0, [pc, #4]	@ (800c808 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800c802:	6812      	ldr	r2, [r2, #0]
 800c804:	601a      	str	r2, [r3, #0]
 800c806:	4770      	bx	lr
 800c808:	20000764 	.word	0x20000764
 800c80c:	20000170 	.word	0x20000170

0800c810 <get_serialized_size_geometry_msgs__msg__Quaternion>:
 800c810:	b1f0      	cbz	r0, 800c850 <get_serialized_size_geometry_msgs__msg__Quaternion+0x40>
 800c812:	b570      	push	{r4, r5, r6, lr}
 800c814:	460d      	mov	r5, r1
 800c816:	4628      	mov	r0, r5
 800c818:	2108      	movs	r1, #8
 800c81a:	f002 faf9 	bl	800ee10 <ucdr_alignment>
 800c81e:	f105 0308 	add.w	r3, r5, #8
 800c822:	181e      	adds	r6, r3, r0
 800c824:	2108      	movs	r1, #8
 800c826:	4630      	mov	r0, r6
 800c828:	f002 faf2 	bl	800ee10 <ucdr_alignment>
 800c82c:	f100 0408 	add.w	r4, r0, #8
 800c830:	4434      	add	r4, r6
 800c832:	2108      	movs	r1, #8
 800c834:	4620      	mov	r0, r4
 800c836:	f002 faeb 	bl	800ee10 <ucdr_alignment>
 800c83a:	3008      	adds	r0, #8
 800c83c:	4404      	add	r4, r0
 800c83e:	2108      	movs	r1, #8
 800c840:	4620      	mov	r0, r4
 800c842:	f002 fae5 	bl	800ee10 <ucdr_alignment>
 800c846:	f1c5 0508 	rsb	r5, r5, #8
 800c84a:	4428      	add	r0, r5
 800c84c:	4420      	add	r0, r4
 800c84e:	bd70      	pop	{r4, r5, r6, pc}
 800c850:	4770      	bx	lr
 800c852:	bf00      	nop

0800c854 <_Quaternion__cdr_deserialize>:
 800c854:	b538      	push	{r3, r4, r5, lr}
 800c856:	460c      	mov	r4, r1
 800c858:	b199      	cbz	r1, 800c882 <_Quaternion__cdr_deserialize+0x2e>
 800c85a:	4605      	mov	r5, r0
 800c85c:	f002 f8ec 	bl	800ea38 <ucdr_deserialize_double>
 800c860:	f104 0108 	add.w	r1, r4, #8
 800c864:	4628      	mov	r0, r5
 800c866:	f002 f8e7 	bl	800ea38 <ucdr_deserialize_double>
 800c86a:	f104 0110 	add.w	r1, r4, #16
 800c86e:	4628      	mov	r0, r5
 800c870:	f002 f8e2 	bl	800ea38 <ucdr_deserialize_double>
 800c874:	f104 0118 	add.w	r1, r4, #24
 800c878:	4628      	mov	r0, r5
 800c87a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c87e:	f002 b8db 	b.w	800ea38 <ucdr_deserialize_double>
 800c882:	4608      	mov	r0, r1
 800c884:	bd38      	pop	{r3, r4, r5, pc}
 800c886:	bf00      	nop

0800c888 <_Quaternion__cdr_serialize>:
 800c888:	b1c0      	cbz	r0, 800c8bc <_Quaternion__cdr_serialize+0x34>
 800c88a:	b538      	push	{r3, r4, r5, lr}
 800c88c:	ed90 0b00 	vldr	d0, [r0]
 800c890:	460d      	mov	r5, r1
 800c892:	4604      	mov	r4, r0
 800c894:	4608      	mov	r0, r1
 800c896:	f001 ff2d 	bl	800e6f4 <ucdr_serialize_double>
 800c89a:	ed94 0b02 	vldr	d0, [r4, #8]
 800c89e:	4628      	mov	r0, r5
 800c8a0:	f001 ff28 	bl	800e6f4 <ucdr_serialize_double>
 800c8a4:	ed94 0b04 	vldr	d0, [r4, #16]
 800c8a8:	4628      	mov	r0, r5
 800c8aa:	f001 ff23 	bl	800e6f4 <ucdr_serialize_double>
 800c8ae:	ed94 0b06 	vldr	d0, [r4, #24]
 800c8b2:	4628      	mov	r0, r5
 800c8b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c8b8:	f001 bf1c 	b.w	800e6f4 <ucdr_serialize_double>
 800c8bc:	4770      	bx	lr
 800c8be:	bf00      	nop

0800c8c0 <_Quaternion__get_serialized_size>:
 800c8c0:	b1d0      	cbz	r0, 800c8f8 <_Quaternion__get_serialized_size+0x38>
 800c8c2:	b538      	push	{r3, r4, r5, lr}
 800c8c4:	2108      	movs	r1, #8
 800c8c6:	2000      	movs	r0, #0
 800c8c8:	f002 faa2 	bl	800ee10 <ucdr_alignment>
 800c8cc:	f100 0508 	add.w	r5, r0, #8
 800c8d0:	2108      	movs	r1, #8
 800c8d2:	4628      	mov	r0, r5
 800c8d4:	f002 fa9c 	bl	800ee10 <ucdr_alignment>
 800c8d8:	f100 0408 	add.w	r4, r0, #8
 800c8dc:	442c      	add	r4, r5
 800c8de:	2108      	movs	r1, #8
 800c8e0:	4620      	mov	r0, r4
 800c8e2:	f002 fa95 	bl	800ee10 <ucdr_alignment>
 800c8e6:	3008      	adds	r0, #8
 800c8e8:	4404      	add	r4, r0
 800c8ea:	2108      	movs	r1, #8
 800c8ec:	4620      	mov	r0, r4
 800c8ee:	f002 fa8f 	bl	800ee10 <ucdr_alignment>
 800c8f2:	3008      	adds	r0, #8
 800c8f4:	4420      	add	r0, r4
 800c8f6:	bd38      	pop	{r3, r4, r5, pc}
 800c8f8:	4770      	bx	lr
 800c8fa:	bf00      	nop

0800c8fc <_Quaternion__max_serialized_size>:
 800c8fc:	b538      	push	{r3, r4, r5, lr}
 800c8fe:	2108      	movs	r1, #8
 800c900:	2000      	movs	r0, #0
 800c902:	f002 fa85 	bl	800ee10 <ucdr_alignment>
 800c906:	f100 0508 	add.w	r5, r0, #8
 800c90a:	2108      	movs	r1, #8
 800c90c:	4628      	mov	r0, r5
 800c90e:	f002 fa7f 	bl	800ee10 <ucdr_alignment>
 800c912:	f100 0408 	add.w	r4, r0, #8
 800c916:	442c      	add	r4, r5
 800c918:	2108      	movs	r1, #8
 800c91a:	4620      	mov	r0, r4
 800c91c:	f002 fa78 	bl	800ee10 <ucdr_alignment>
 800c920:	3008      	adds	r0, #8
 800c922:	4404      	add	r4, r0
 800c924:	2108      	movs	r1, #8
 800c926:	4620      	mov	r0, r4
 800c928:	f002 fa72 	bl	800ee10 <ucdr_alignment>
 800c92c:	3008      	adds	r0, #8
 800c92e:	4420      	add	r0, r4
 800c930:	bd38      	pop	{r3, r4, r5, pc}
 800c932:	bf00      	nop

0800c934 <max_serialized_size_geometry_msgs__msg__Quaternion>:
 800c934:	b570      	push	{r4, r5, r6, lr}
 800c936:	2301      	movs	r3, #1
 800c938:	460c      	mov	r4, r1
 800c93a:	7003      	strb	r3, [r0, #0]
 800c93c:	2108      	movs	r1, #8
 800c93e:	4620      	mov	r0, r4
 800c940:	f002 fa66 	bl	800ee10 <ucdr_alignment>
 800c944:	f104 0508 	add.w	r5, r4, #8
 800c948:	1946      	adds	r6, r0, r5
 800c94a:	2108      	movs	r1, #8
 800c94c:	4630      	mov	r0, r6
 800c94e:	f002 fa5f 	bl	800ee10 <ucdr_alignment>
 800c952:	f100 0508 	add.w	r5, r0, #8
 800c956:	4435      	add	r5, r6
 800c958:	2108      	movs	r1, #8
 800c95a:	4628      	mov	r0, r5
 800c95c:	f002 fa58 	bl	800ee10 <ucdr_alignment>
 800c960:	3008      	adds	r0, #8
 800c962:	4405      	add	r5, r0
 800c964:	2108      	movs	r1, #8
 800c966:	4628      	mov	r0, r5
 800c968:	f002 fa52 	bl	800ee10 <ucdr_alignment>
 800c96c:	f1c4 0408 	rsb	r4, r4, #8
 800c970:	4420      	add	r0, r4
 800c972:	4428      	add	r0, r5
 800c974:	bd70      	pop	{r4, r5, r6, pc}
 800c976:	bf00      	nop

0800c978 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>:
 800c978:	4800      	ldr	r0, [pc, #0]	@ (800c97c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x4>)
 800c97a:	4770      	bx	lr
 800c97c:	20000770 	.word	0x20000770

0800c980 <get_serialized_size_geometry_msgs__msg__Vector3>:
 800c980:	b1b8      	cbz	r0, 800c9b2 <get_serialized_size_geometry_msgs__msg__Vector3+0x32>
 800c982:	b538      	push	{r3, r4, r5, lr}
 800c984:	460d      	mov	r5, r1
 800c986:	4628      	mov	r0, r5
 800c988:	2108      	movs	r1, #8
 800c98a:	f002 fa41 	bl	800ee10 <ucdr_alignment>
 800c98e:	f105 0308 	add.w	r3, r5, #8
 800c992:	181c      	adds	r4, r3, r0
 800c994:	2108      	movs	r1, #8
 800c996:	4620      	mov	r0, r4
 800c998:	f002 fa3a 	bl	800ee10 <ucdr_alignment>
 800c99c:	3008      	adds	r0, #8
 800c99e:	4404      	add	r4, r0
 800c9a0:	2108      	movs	r1, #8
 800c9a2:	4620      	mov	r0, r4
 800c9a4:	f002 fa34 	bl	800ee10 <ucdr_alignment>
 800c9a8:	f1c5 0508 	rsb	r5, r5, #8
 800c9ac:	4428      	add	r0, r5
 800c9ae:	4420      	add	r0, r4
 800c9b0:	bd38      	pop	{r3, r4, r5, pc}
 800c9b2:	4770      	bx	lr

0800c9b4 <_Vector3__cdr_deserialize>:
 800c9b4:	b538      	push	{r3, r4, r5, lr}
 800c9b6:	460c      	mov	r4, r1
 800c9b8:	b171      	cbz	r1, 800c9d8 <_Vector3__cdr_deserialize+0x24>
 800c9ba:	4605      	mov	r5, r0
 800c9bc:	f002 f83c 	bl	800ea38 <ucdr_deserialize_double>
 800c9c0:	f104 0108 	add.w	r1, r4, #8
 800c9c4:	4628      	mov	r0, r5
 800c9c6:	f002 f837 	bl	800ea38 <ucdr_deserialize_double>
 800c9ca:	f104 0110 	add.w	r1, r4, #16
 800c9ce:	4628      	mov	r0, r5
 800c9d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c9d4:	f002 b830 	b.w	800ea38 <ucdr_deserialize_double>
 800c9d8:	4608      	mov	r0, r1
 800c9da:	bd38      	pop	{r3, r4, r5, pc}

0800c9dc <_Vector3__cdr_serialize>:
 800c9dc:	b198      	cbz	r0, 800ca06 <_Vector3__cdr_serialize+0x2a>
 800c9de:	b538      	push	{r3, r4, r5, lr}
 800c9e0:	ed90 0b00 	vldr	d0, [r0]
 800c9e4:	460d      	mov	r5, r1
 800c9e6:	4604      	mov	r4, r0
 800c9e8:	4608      	mov	r0, r1
 800c9ea:	f001 fe83 	bl	800e6f4 <ucdr_serialize_double>
 800c9ee:	ed94 0b02 	vldr	d0, [r4, #8]
 800c9f2:	4628      	mov	r0, r5
 800c9f4:	f001 fe7e 	bl	800e6f4 <ucdr_serialize_double>
 800c9f8:	ed94 0b04 	vldr	d0, [r4, #16]
 800c9fc:	4628      	mov	r0, r5
 800c9fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ca02:	f001 be77 	b.w	800e6f4 <ucdr_serialize_double>
 800ca06:	4770      	bx	lr

0800ca08 <_Vector3__get_serialized_size>:
 800ca08:	b198      	cbz	r0, 800ca32 <_Vector3__get_serialized_size+0x2a>
 800ca0a:	b510      	push	{r4, lr}
 800ca0c:	2108      	movs	r1, #8
 800ca0e:	2000      	movs	r0, #0
 800ca10:	f002 f9fe 	bl	800ee10 <ucdr_alignment>
 800ca14:	f100 0408 	add.w	r4, r0, #8
 800ca18:	2108      	movs	r1, #8
 800ca1a:	4620      	mov	r0, r4
 800ca1c:	f002 f9f8 	bl	800ee10 <ucdr_alignment>
 800ca20:	3008      	adds	r0, #8
 800ca22:	4404      	add	r4, r0
 800ca24:	2108      	movs	r1, #8
 800ca26:	4620      	mov	r0, r4
 800ca28:	f002 f9f2 	bl	800ee10 <ucdr_alignment>
 800ca2c:	3008      	adds	r0, #8
 800ca2e:	4420      	add	r0, r4
 800ca30:	bd10      	pop	{r4, pc}
 800ca32:	4770      	bx	lr

0800ca34 <_Vector3__max_serialized_size>:
 800ca34:	b538      	push	{r3, r4, r5, lr}
 800ca36:	2108      	movs	r1, #8
 800ca38:	2000      	movs	r0, #0
 800ca3a:	f002 f9e9 	bl	800ee10 <ucdr_alignment>
 800ca3e:	f100 0508 	add.w	r5, r0, #8
 800ca42:	2108      	movs	r1, #8
 800ca44:	4628      	mov	r0, r5
 800ca46:	f002 f9e3 	bl	800ee10 <ucdr_alignment>
 800ca4a:	f100 0408 	add.w	r4, r0, #8
 800ca4e:	442c      	add	r4, r5
 800ca50:	2108      	movs	r1, #8
 800ca52:	4620      	mov	r0, r4
 800ca54:	f002 f9dc 	bl	800ee10 <ucdr_alignment>
 800ca58:	3008      	adds	r0, #8
 800ca5a:	4420      	add	r0, r4
 800ca5c:	bd38      	pop	{r3, r4, r5, pc}
 800ca5e:	bf00      	nop

0800ca60 <max_serialized_size_geometry_msgs__msg__Vector3>:
 800ca60:	b570      	push	{r4, r5, r6, lr}
 800ca62:	2301      	movs	r3, #1
 800ca64:	460c      	mov	r4, r1
 800ca66:	7003      	strb	r3, [r0, #0]
 800ca68:	2108      	movs	r1, #8
 800ca6a:	4620      	mov	r0, r4
 800ca6c:	f002 f9d0 	bl	800ee10 <ucdr_alignment>
 800ca70:	f104 0508 	add.w	r5, r4, #8
 800ca74:	1946      	adds	r6, r0, r5
 800ca76:	2108      	movs	r1, #8
 800ca78:	4630      	mov	r0, r6
 800ca7a:	f002 f9c9 	bl	800ee10 <ucdr_alignment>
 800ca7e:	f100 0508 	add.w	r5, r0, #8
 800ca82:	4435      	add	r5, r6
 800ca84:	2108      	movs	r1, #8
 800ca86:	4628      	mov	r0, r5
 800ca88:	f002 f9c2 	bl	800ee10 <ucdr_alignment>
 800ca8c:	f1c4 0408 	rsb	r4, r4, #8
 800ca90:	4420      	add	r0, r4
 800ca92:	4428      	add	r0, r5
 800ca94:	bd70      	pop	{r4, r5, r6, pc}
 800ca96:	bf00      	nop

0800ca98 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800ca98:	4800      	ldr	r0, [pc, #0]	@ (800ca9c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x4>)
 800ca9a:	4770      	bx	lr
 800ca9c:	20000798 	.word	0x20000798

0800caa0 <micro_ros_string_utilities_init_with_size>:
 800caa0:	b570      	push	{r4, r5, r6, lr}
 800caa2:	b086      	sub	sp, #24
 800caa4:	1c4c      	adds	r4, r1, #1
 800caa6:	4605      	mov	r5, r0
 800caa8:	a801      	add	r0, sp, #4
 800caaa:	f7fe fca7 	bl	800b3fc <rcutils_get_default_allocator>
 800caae:	9b01      	ldr	r3, [sp, #4]
 800cab0:	9905      	ldr	r1, [sp, #20]
 800cab2:	4620      	mov	r0, r4
 800cab4:	4798      	blx	r3
 800cab6:	4622      	mov	r2, r4
 800cab8:	2100      	movs	r1, #0
 800caba:	4606      	mov	r6, r0
 800cabc:	f00c fd3f 	bl	801953e <memset>
 800cac0:	2300      	movs	r3, #0
 800cac2:	4628      	mov	r0, r5
 800cac4:	e9c5 6300 	strd	r6, r3, [r5]
 800cac8:	60ac      	str	r4, [r5, #8]
 800caca:	b006      	add	sp, #24
 800cacc:	bd70      	pop	{r4, r5, r6, pc}
 800cace:	bf00      	nop

0800cad0 <micro_ros_string_utilities_append>:
 800cad0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cad4:	b08a      	sub	sp, #40	@ 0x28
 800cad6:	4604      	mov	r4, r0
 800cad8:	f8dd 8048 	ldr.w	r8, [sp, #72]	@ 0x48
 800cadc:	a801      	add	r0, sp, #4
 800cade:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800cae2:	a805      	add	r0, sp, #20
 800cae4:	f7fe fc8a 	bl	800b3fc <rcutils_get_default_allocator>
 800cae8:	4640      	mov	r0, r8
 800caea:	f7f3 fb89 	bl	8000200 <strlen>
 800caee:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800caf2:	9f03      	ldr	r7, [sp, #12]
 800caf4:	9d01      	ldr	r5, [sp, #4]
 800caf6:	eb00 0a09 	add.w	sl, r0, r9
 800cafa:	45ba      	cmp	sl, r7
 800cafc:	4606      	mov	r6, r0
 800cafe:	d307      	bcc.n	800cb10 <micro_ros_string_utilities_append+0x40>
 800cb00:	f10a 0701 	add.w	r7, sl, #1
 800cb04:	4628      	mov	r0, r5
 800cb06:	9b07      	ldr	r3, [sp, #28]
 800cb08:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cb0a:	4639      	mov	r1, r7
 800cb0c:	4798      	blx	r3
 800cb0e:	4605      	mov	r5, r0
 800cb10:	1c72      	adds	r2, r6, #1
 800cb12:	4641      	mov	r1, r8
 800cb14:	eb05 0009 	add.w	r0, r5, r9
 800cb18:	f00c fd79 	bl	801960e <memcpy>
 800cb1c:	4620      	mov	r0, r4
 800cb1e:	e9c4 5a00 	strd	r5, sl, [r4]
 800cb22:	60a7      	str	r7, [r4, #8]
 800cb24:	b00a      	add	sp, #40	@ 0x28
 800cb26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb2a:	bf00      	nop

0800cb2c <micro_ros_string_utilities_remove_tail_chars>:
 800cb2c:	b500      	push	{lr}
 800cb2e:	b085      	sub	sp, #20
 800cb30:	f10d 0e04 	add.w	lr, sp, #4
 800cb34:	e88e 000e 	stmia.w	lr, {r1, r2, r3}
 800cb38:	4684      	mov	ip, r0
 800cb3a:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 800cb3e:	e88c 000b 	stmia.w	ip, {r0, r1, r3}
 800cb42:	460b      	mov	r3, r1
 800cb44:	9906      	ldr	r1, [sp, #24]
 800cb46:	1a5b      	subs	r3, r3, r1
 800cb48:	9901      	ldr	r1, [sp, #4]
 800cb4a:	f8cc 3004 	str.w	r3, [ip, #4]
 800cb4e:	2200      	movs	r2, #0
 800cb50:	4660      	mov	r0, ip
 800cb52:	54ca      	strb	r2, [r1, r3]
 800cb54:	b005      	add	sp, #20
 800cb56:	f85d fb04 	ldr.w	pc, [sp], #4
 800cb5a:	bf00      	nop

0800cb5c <micro_ros_string_utilities_destroy>:
 800cb5c:	b510      	push	{r4, lr}
 800cb5e:	4604      	mov	r4, r0
 800cb60:	b086      	sub	sp, #24
 800cb62:	a801      	add	r0, sp, #4
 800cb64:	f7fe fc4a 	bl	800b3fc <rcutils_get_default_allocator>
 800cb68:	9b02      	ldr	r3, [sp, #8]
 800cb6a:	9905      	ldr	r1, [sp, #20]
 800cb6c:	6820      	ldr	r0, [r4, #0]
 800cb6e:	4798      	blx	r3
 800cb70:	2300      	movs	r3, #0
 800cb72:	e9c4 3300 	strd	r3, r3, [r4]
 800cb76:	60a3      	str	r3, [r4, #8]
 800cb78:	b006      	add	sp, #24
 800cb7a:	bd10      	pop	{r4, pc}

0800cb7c <ucdr_serialize_endian_array_char>:
 800cb7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb80:	4619      	mov	r1, r3
 800cb82:	461f      	mov	r7, r3
 800cb84:	4605      	mov	r5, r0
 800cb86:	4690      	mov	r8, r2
 800cb88:	f002 f8ea 	bl	800ed60 <ucdr_check_buffer_available_for>
 800cb8c:	b9e0      	cbnz	r0, 800cbc8 <ucdr_serialize_endian_array_char+0x4c>
 800cb8e:	463e      	mov	r6, r7
 800cb90:	e009      	b.n	800cba6 <ucdr_serialize_endian_array_char+0x2a>
 800cb92:	68a8      	ldr	r0, [r5, #8]
 800cb94:	f00c fd3b 	bl	801960e <memcpy>
 800cb98:	68ab      	ldr	r3, [r5, #8]
 800cb9a:	6928      	ldr	r0, [r5, #16]
 800cb9c:	4423      	add	r3, r4
 800cb9e:	4420      	add	r0, r4
 800cba0:	1b36      	subs	r6, r6, r4
 800cba2:	60ab      	str	r3, [r5, #8]
 800cba4:	6128      	str	r0, [r5, #16]
 800cba6:	4631      	mov	r1, r6
 800cba8:	2201      	movs	r2, #1
 800cbaa:	4628      	mov	r0, r5
 800cbac:	f002 f960 	bl	800ee70 <ucdr_check_final_buffer_behavior_array>
 800cbb0:	1bb9      	subs	r1, r7, r6
 800cbb2:	4441      	add	r1, r8
 800cbb4:	4604      	mov	r4, r0
 800cbb6:	4602      	mov	r2, r0
 800cbb8:	2800      	cmp	r0, #0
 800cbba:	d1ea      	bne.n	800cb92 <ucdr_serialize_endian_array_char+0x16>
 800cbbc:	2301      	movs	r3, #1
 800cbbe:	7da8      	ldrb	r0, [r5, #22]
 800cbc0:	756b      	strb	r3, [r5, #21]
 800cbc2:	4058      	eors	r0, r3
 800cbc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cbc8:	463a      	mov	r2, r7
 800cbca:	68a8      	ldr	r0, [r5, #8]
 800cbcc:	4641      	mov	r1, r8
 800cbce:	f00c fd1e 	bl	801960e <memcpy>
 800cbd2:	68aa      	ldr	r2, [r5, #8]
 800cbd4:	692b      	ldr	r3, [r5, #16]
 800cbd6:	443a      	add	r2, r7
 800cbd8:	443b      	add	r3, r7
 800cbda:	60aa      	str	r2, [r5, #8]
 800cbdc:	612b      	str	r3, [r5, #16]
 800cbde:	e7ed      	b.n	800cbbc <ucdr_serialize_endian_array_char+0x40>

0800cbe0 <ucdr_deserialize_endian_array_char>:
 800cbe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbe4:	4619      	mov	r1, r3
 800cbe6:	461f      	mov	r7, r3
 800cbe8:	4605      	mov	r5, r0
 800cbea:	4690      	mov	r8, r2
 800cbec:	f002 f8b8 	bl	800ed60 <ucdr_check_buffer_available_for>
 800cbf0:	b9e0      	cbnz	r0, 800cc2c <ucdr_deserialize_endian_array_char+0x4c>
 800cbf2:	463e      	mov	r6, r7
 800cbf4:	e009      	b.n	800cc0a <ucdr_deserialize_endian_array_char+0x2a>
 800cbf6:	68a9      	ldr	r1, [r5, #8]
 800cbf8:	f00c fd09 	bl	801960e <memcpy>
 800cbfc:	68ab      	ldr	r3, [r5, #8]
 800cbfe:	6928      	ldr	r0, [r5, #16]
 800cc00:	4423      	add	r3, r4
 800cc02:	4420      	add	r0, r4
 800cc04:	1b36      	subs	r6, r6, r4
 800cc06:	60ab      	str	r3, [r5, #8]
 800cc08:	6128      	str	r0, [r5, #16]
 800cc0a:	2201      	movs	r2, #1
 800cc0c:	4631      	mov	r1, r6
 800cc0e:	4628      	mov	r0, r5
 800cc10:	f002 f92e 	bl	800ee70 <ucdr_check_final_buffer_behavior_array>
 800cc14:	4604      	mov	r4, r0
 800cc16:	1bb8      	subs	r0, r7, r6
 800cc18:	4440      	add	r0, r8
 800cc1a:	4622      	mov	r2, r4
 800cc1c:	2c00      	cmp	r4, #0
 800cc1e:	d1ea      	bne.n	800cbf6 <ucdr_deserialize_endian_array_char+0x16>
 800cc20:	2301      	movs	r3, #1
 800cc22:	7da8      	ldrb	r0, [r5, #22]
 800cc24:	756b      	strb	r3, [r5, #21]
 800cc26:	4058      	eors	r0, r3
 800cc28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc2c:	463a      	mov	r2, r7
 800cc2e:	68a9      	ldr	r1, [r5, #8]
 800cc30:	4640      	mov	r0, r8
 800cc32:	f00c fcec 	bl	801960e <memcpy>
 800cc36:	68aa      	ldr	r2, [r5, #8]
 800cc38:	692b      	ldr	r3, [r5, #16]
 800cc3a:	443a      	add	r2, r7
 800cc3c:	443b      	add	r3, r7
 800cc3e:	60aa      	str	r2, [r5, #8]
 800cc40:	612b      	str	r3, [r5, #16]
 800cc42:	e7ed      	b.n	800cc20 <ucdr_deserialize_endian_array_char+0x40>

0800cc44 <ucdr_serialize_array_uint8_t>:
 800cc44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc48:	4688      	mov	r8, r1
 800cc4a:	4611      	mov	r1, r2
 800cc4c:	4617      	mov	r7, r2
 800cc4e:	4605      	mov	r5, r0
 800cc50:	f002 f886 	bl	800ed60 <ucdr_check_buffer_available_for>
 800cc54:	b9e0      	cbnz	r0, 800cc90 <ucdr_serialize_array_uint8_t+0x4c>
 800cc56:	463e      	mov	r6, r7
 800cc58:	e009      	b.n	800cc6e <ucdr_serialize_array_uint8_t+0x2a>
 800cc5a:	68a8      	ldr	r0, [r5, #8]
 800cc5c:	f00c fcd7 	bl	801960e <memcpy>
 800cc60:	68aa      	ldr	r2, [r5, #8]
 800cc62:	692b      	ldr	r3, [r5, #16]
 800cc64:	4422      	add	r2, r4
 800cc66:	4423      	add	r3, r4
 800cc68:	1b36      	subs	r6, r6, r4
 800cc6a:	60aa      	str	r2, [r5, #8]
 800cc6c:	612b      	str	r3, [r5, #16]
 800cc6e:	4631      	mov	r1, r6
 800cc70:	2201      	movs	r2, #1
 800cc72:	4628      	mov	r0, r5
 800cc74:	f002 f8fc 	bl	800ee70 <ucdr_check_final_buffer_behavior_array>
 800cc78:	1bb9      	subs	r1, r7, r6
 800cc7a:	4441      	add	r1, r8
 800cc7c:	4604      	mov	r4, r0
 800cc7e:	4602      	mov	r2, r0
 800cc80:	2800      	cmp	r0, #0
 800cc82:	d1ea      	bne.n	800cc5a <ucdr_serialize_array_uint8_t+0x16>
 800cc84:	2301      	movs	r3, #1
 800cc86:	7da8      	ldrb	r0, [r5, #22]
 800cc88:	756b      	strb	r3, [r5, #21]
 800cc8a:	4058      	eors	r0, r3
 800cc8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc90:	463a      	mov	r2, r7
 800cc92:	68a8      	ldr	r0, [r5, #8]
 800cc94:	4641      	mov	r1, r8
 800cc96:	f00c fcba 	bl	801960e <memcpy>
 800cc9a:	68aa      	ldr	r2, [r5, #8]
 800cc9c:	692b      	ldr	r3, [r5, #16]
 800cc9e:	443a      	add	r2, r7
 800cca0:	443b      	add	r3, r7
 800cca2:	60aa      	str	r2, [r5, #8]
 800cca4:	612b      	str	r3, [r5, #16]
 800cca6:	e7ed      	b.n	800cc84 <ucdr_serialize_array_uint8_t+0x40>

0800cca8 <ucdr_serialize_endian_array_uint8_t>:
 800cca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ccac:	4619      	mov	r1, r3
 800ccae:	461f      	mov	r7, r3
 800ccb0:	4605      	mov	r5, r0
 800ccb2:	4690      	mov	r8, r2
 800ccb4:	f002 f854 	bl	800ed60 <ucdr_check_buffer_available_for>
 800ccb8:	b9e0      	cbnz	r0, 800ccf4 <ucdr_serialize_endian_array_uint8_t+0x4c>
 800ccba:	463e      	mov	r6, r7
 800ccbc:	e009      	b.n	800ccd2 <ucdr_serialize_endian_array_uint8_t+0x2a>
 800ccbe:	68a8      	ldr	r0, [r5, #8]
 800ccc0:	f00c fca5 	bl	801960e <memcpy>
 800ccc4:	68ab      	ldr	r3, [r5, #8]
 800ccc6:	6928      	ldr	r0, [r5, #16]
 800ccc8:	4423      	add	r3, r4
 800ccca:	4420      	add	r0, r4
 800cccc:	1b36      	subs	r6, r6, r4
 800ccce:	60ab      	str	r3, [r5, #8]
 800ccd0:	6128      	str	r0, [r5, #16]
 800ccd2:	4631      	mov	r1, r6
 800ccd4:	2201      	movs	r2, #1
 800ccd6:	4628      	mov	r0, r5
 800ccd8:	f002 f8ca 	bl	800ee70 <ucdr_check_final_buffer_behavior_array>
 800ccdc:	1bb9      	subs	r1, r7, r6
 800ccde:	4441      	add	r1, r8
 800cce0:	4604      	mov	r4, r0
 800cce2:	4602      	mov	r2, r0
 800cce4:	2800      	cmp	r0, #0
 800cce6:	d1ea      	bne.n	800ccbe <ucdr_serialize_endian_array_uint8_t+0x16>
 800cce8:	2301      	movs	r3, #1
 800ccea:	7da8      	ldrb	r0, [r5, #22]
 800ccec:	756b      	strb	r3, [r5, #21]
 800ccee:	4058      	eors	r0, r3
 800ccf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ccf4:	463a      	mov	r2, r7
 800ccf6:	68a8      	ldr	r0, [r5, #8]
 800ccf8:	4641      	mov	r1, r8
 800ccfa:	f00c fc88 	bl	801960e <memcpy>
 800ccfe:	68aa      	ldr	r2, [r5, #8]
 800cd00:	692b      	ldr	r3, [r5, #16]
 800cd02:	443a      	add	r2, r7
 800cd04:	443b      	add	r3, r7
 800cd06:	60aa      	str	r2, [r5, #8]
 800cd08:	612b      	str	r3, [r5, #16]
 800cd0a:	e7ed      	b.n	800cce8 <ucdr_serialize_endian_array_uint8_t+0x40>

0800cd0c <ucdr_deserialize_array_uint8_t>:
 800cd0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd10:	4688      	mov	r8, r1
 800cd12:	4611      	mov	r1, r2
 800cd14:	4617      	mov	r7, r2
 800cd16:	4605      	mov	r5, r0
 800cd18:	f002 f822 	bl	800ed60 <ucdr_check_buffer_available_for>
 800cd1c:	b9e0      	cbnz	r0, 800cd58 <ucdr_deserialize_array_uint8_t+0x4c>
 800cd1e:	463e      	mov	r6, r7
 800cd20:	e009      	b.n	800cd36 <ucdr_deserialize_array_uint8_t+0x2a>
 800cd22:	68a9      	ldr	r1, [r5, #8]
 800cd24:	f00c fc73 	bl	801960e <memcpy>
 800cd28:	68aa      	ldr	r2, [r5, #8]
 800cd2a:	692b      	ldr	r3, [r5, #16]
 800cd2c:	4422      	add	r2, r4
 800cd2e:	4423      	add	r3, r4
 800cd30:	1b36      	subs	r6, r6, r4
 800cd32:	60aa      	str	r2, [r5, #8]
 800cd34:	612b      	str	r3, [r5, #16]
 800cd36:	2201      	movs	r2, #1
 800cd38:	4631      	mov	r1, r6
 800cd3a:	4628      	mov	r0, r5
 800cd3c:	f002 f898 	bl	800ee70 <ucdr_check_final_buffer_behavior_array>
 800cd40:	4604      	mov	r4, r0
 800cd42:	1bb8      	subs	r0, r7, r6
 800cd44:	4440      	add	r0, r8
 800cd46:	4622      	mov	r2, r4
 800cd48:	2c00      	cmp	r4, #0
 800cd4a:	d1ea      	bne.n	800cd22 <ucdr_deserialize_array_uint8_t+0x16>
 800cd4c:	2301      	movs	r3, #1
 800cd4e:	7da8      	ldrb	r0, [r5, #22]
 800cd50:	756b      	strb	r3, [r5, #21]
 800cd52:	4058      	eors	r0, r3
 800cd54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd58:	463a      	mov	r2, r7
 800cd5a:	68a9      	ldr	r1, [r5, #8]
 800cd5c:	4640      	mov	r0, r8
 800cd5e:	f00c fc56 	bl	801960e <memcpy>
 800cd62:	68aa      	ldr	r2, [r5, #8]
 800cd64:	692b      	ldr	r3, [r5, #16]
 800cd66:	443a      	add	r2, r7
 800cd68:	443b      	add	r3, r7
 800cd6a:	60aa      	str	r2, [r5, #8]
 800cd6c:	612b      	str	r3, [r5, #16]
 800cd6e:	e7ed      	b.n	800cd4c <ucdr_deserialize_array_uint8_t+0x40>

0800cd70 <ucdr_deserialize_endian_array_uint8_t>:
 800cd70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd74:	4619      	mov	r1, r3
 800cd76:	461f      	mov	r7, r3
 800cd78:	4605      	mov	r5, r0
 800cd7a:	4690      	mov	r8, r2
 800cd7c:	f001 fff0 	bl	800ed60 <ucdr_check_buffer_available_for>
 800cd80:	b9e0      	cbnz	r0, 800cdbc <ucdr_deserialize_endian_array_uint8_t+0x4c>
 800cd82:	463e      	mov	r6, r7
 800cd84:	e009      	b.n	800cd9a <ucdr_deserialize_endian_array_uint8_t+0x2a>
 800cd86:	68a9      	ldr	r1, [r5, #8]
 800cd88:	f00c fc41 	bl	801960e <memcpy>
 800cd8c:	68ab      	ldr	r3, [r5, #8]
 800cd8e:	6928      	ldr	r0, [r5, #16]
 800cd90:	4423      	add	r3, r4
 800cd92:	4420      	add	r0, r4
 800cd94:	1b36      	subs	r6, r6, r4
 800cd96:	60ab      	str	r3, [r5, #8]
 800cd98:	6128      	str	r0, [r5, #16]
 800cd9a:	2201      	movs	r2, #1
 800cd9c:	4631      	mov	r1, r6
 800cd9e:	4628      	mov	r0, r5
 800cda0:	f002 f866 	bl	800ee70 <ucdr_check_final_buffer_behavior_array>
 800cda4:	4604      	mov	r4, r0
 800cda6:	1bb8      	subs	r0, r7, r6
 800cda8:	4440      	add	r0, r8
 800cdaa:	4622      	mov	r2, r4
 800cdac:	2c00      	cmp	r4, #0
 800cdae:	d1ea      	bne.n	800cd86 <ucdr_deserialize_endian_array_uint8_t+0x16>
 800cdb0:	2301      	movs	r3, #1
 800cdb2:	7da8      	ldrb	r0, [r5, #22]
 800cdb4:	756b      	strb	r3, [r5, #21]
 800cdb6:	4058      	eors	r0, r3
 800cdb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cdbc:	463a      	mov	r2, r7
 800cdbe:	68a9      	ldr	r1, [r5, #8]
 800cdc0:	4640      	mov	r0, r8
 800cdc2:	f00c fc24 	bl	801960e <memcpy>
 800cdc6:	68aa      	ldr	r2, [r5, #8]
 800cdc8:	692b      	ldr	r3, [r5, #16]
 800cdca:	443a      	add	r2, r7
 800cdcc:	443b      	add	r3, r7
 800cdce:	60aa      	str	r2, [r5, #8]
 800cdd0:	612b      	str	r3, [r5, #16]
 800cdd2:	e7ed      	b.n	800cdb0 <ucdr_deserialize_endian_array_uint8_t+0x40>

0800cdd4 <ucdr_serialize_array_uint16_t>:
 800cdd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cdd8:	460e      	mov	r6, r1
 800cdda:	2102      	movs	r1, #2
 800cddc:	4604      	mov	r4, r0
 800cdde:	4617      	mov	r7, r2
 800cde0:	f002 f81e 	bl	800ee20 <ucdr_buffer_alignment>
 800cde4:	4601      	mov	r1, r0
 800cde6:	4620      	mov	r0, r4
 800cde8:	7d65      	ldrb	r5, [r4, #21]
 800cdea:	f002 f85d 	bl	800eea8 <ucdr_advance_buffer>
 800cdee:	7d21      	ldrb	r1, [r4, #20]
 800cdf0:	7565      	strb	r5, [r4, #21]
 800cdf2:	2901      	cmp	r1, #1
 800cdf4:	d011      	beq.n	800ce1a <ucdr_serialize_array_uint16_t+0x46>
 800cdf6:	b15f      	cbz	r7, 800ce10 <ucdr_serialize_array_uint16_t+0x3c>
 800cdf8:	3e02      	subs	r6, #2
 800cdfa:	2500      	movs	r5, #0
 800cdfc:	e000      	b.n	800ce00 <ucdr_serialize_array_uint16_t+0x2c>
 800cdfe:	7d21      	ldrb	r1, [r4, #20]
 800ce00:	f836 2f02 	ldrh.w	r2, [r6, #2]!
 800ce04:	4620      	mov	r0, r4
 800ce06:	3501      	adds	r5, #1
 800ce08:	f000 fb6a 	bl	800d4e0 <ucdr_serialize_endian_uint16_t>
 800ce0c:	42af      	cmp	r7, r5
 800ce0e:	d1f6      	bne.n	800cdfe <ucdr_serialize_array_uint16_t+0x2a>
 800ce10:	7da0      	ldrb	r0, [r4, #22]
 800ce12:	f080 0001 	eor.w	r0, r0, #1
 800ce16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce1a:	007f      	lsls	r7, r7, #1
 800ce1c:	4639      	mov	r1, r7
 800ce1e:	4620      	mov	r0, r4
 800ce20:	f001 ff9e 	bl	800ed60 <ucdr_check_buffer_available_for>
 800ce24:	b9f8      	cbnz	r0, 800ce66 <ucdr_serialize_array_uint16_t+0x92>
 800ce26:	46b8      	mov	r8, r7
 800ce28:	e00a      	b.n	800ce40 <ucdr_serialize_array_uint16_t+0x6c>
 800ce2a:	68a0      	ldr	r0, [r4, #8]
 800ce2c:	f00c fbef 	bl	801960e <memcpy>
 800ce30:	68a2      	ldr	r2, [r4, #8]
 800ce32:	6923      	ldr	r3, [r4, #16]
 800ce34:	442a      	add	r2, r5
 800ce36:	442b      	add	r3, r5
 800ce38:	eba8 0805 	sub.w	r8, r8, r5
 800ce3c:	60a2      	str	r2, [r4, #8]
 800ce3e:	6123      	str	r3, [r4, #16]
 800ce40:	4641      	mov	r1, r8
 800ce42:	2202      	movs	r2, #2
 800ce44:	4620      	mov	r0, r4
 800ce46:	f002 f813 	bl	800ee70 <ucdr_check_final_buffer_behavior_array>
 800ce4a:	eba7 0108 	sub.w	r1, r7, r8
 800ce4e:	4431      	add	r1, r6
 800ce50:	4605      	mov	r5, r0
 800ce52:	4602      	mov	r2, r0
 800ce54:	2800      	cmp	r0, #0
 800ce56:	d1e8      	bne.n	800ce2a <ucdr_serialize_array_uint16_t+0x56>
 800ce58:	7da0      	ldrb	r0, [r4, #22]
 800ce5a:	2302      	movs	r3, #2
 800ce5c:	7563      	strb	r3, [r4, #21]
 800ce5e:	f080 0001 	eor.w	r0, r0, #1
 800ce62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce66:	463a      	mov	r2, r7
 800ce68:	68a0      	ldr	r0, [r4, #8]
 800ce6a:	4631      	mov	r1, r6
 800ce6c:	f00c fbcf 	bl	801960e <memcpy>
 800ce70:	68a2      	ldr	r2, [r4, #8]
 800ce72:	6923      	ldr	r3, [r4, #16]
 800ce74:	443a      	add	r2, r7
 800ce76:	441f      	add	r7, r3
 800ce78:	60a2      	str	r2, [r4, #8]
 800ce7a:	6127      	str	r7, [r4, #16]
 800ce7c:	e7ec      	b.n	800ce58 <ucdr_serialize_array_uint16_t+0x84>
 800ce7e:	bf00      	nop

0800ce80 <ucdr_deserialize_array_uint16_t>:
 800ce80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce84:	460e      	mov	r6, r1
 800ce86:	2102      	movs	r1, #2
 800ce88:	4604      	mov	r4, r0
 800ce8a:	4617      	mov	r7, r2
 800ce8c:	f001 ffc8 	bl	800ee20 <ucdr_buffer_alignment>
 800ce90:	4601      	mov	r1, r0
 800ce92:	4620      	mov	r0, r4
 800ce94:	7d65      	ldrb	r5, [r4, #21]
 800ce96:	f002 f807 	bl	800eea8 <ucdr_advance_buffer>
 800ce9a:	7d21      	ldrb	r1, [r4, #20]
 800ce9c:	7565      	strb	r5, [r4, #21]
 800ce9e:	2901      	cmp	r1, #1
 800cea0:	d011      	beq.n	800cec6 <ucdr_deserialize_array_uint16_t+0x46>
 800cea2:	b15f      	cbz	r7, 800cebc <ucdr_deserialize_array_uint16_t+0x3c>
 800cea4:	2500      	movs	r5, #0
 800cea6:	e000      	b.n	800ceaa <ucdr_deserialize_array_uint16_t+0x2a>
 800cea8:	7d21      	ldrb	r1, [r4, #20]
 800ceaa:	4632      	mov	r2, r6
 800ceac:	4620      	mov	r0, r4
 800ceae:	3501      	adds	r5, #1
 800ceb0:	f000 fc0a 	bl	800d6c8 <ucdr_deserialize_endian_uint16_t>
 800ceb4:	42af      	cmp	r7, r5
 800ceb6:	f106 0602 	add.w	r6, r6, #2
 800ceba:	d1f5      	bne.n	800cea8 <ucdr_deserialize_array_uint16_t+0x28>
 800cebc:	7da0      	ldrb	r0, [r4, #22]
 800cebe:	f080 0001 	eor.w	r0, r0, #1
 800cec2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cec6:	007f      	lsls	r7, r7, #1
 800cec8:	4639      	mov	r1, r7
 800ceca:	4620      	mov	r0, r4
 800cecc:	f001 ff48 	bl	800ed60 <ucdr_check_buffer_available_for>
 800ced0:	b9f8      	cbnz	r0, 800cf12 <ucdr_deserialize_array_uint16_t+0x92>
 800ced2:	46b8      	mov	r8, r7
 800ced4:	e00a      	b.n	800ceec <ucdr_deserialize_array_uint16_t+0x6c>
 800ced6:	68a1      	ldr	r1, [r4, #8]
 800ced8:	f00c fb99 	bl	801960e <memcpy>
 800cedc:	68a2      	ldr	r2, [r4, #8]
 800cede:	6923      	ldr	r3, [r4, #16]
 800cee0:	442a      	add	r2, r5
 800cee2:	442b      	add	r3, r5
 800cee4:	eba8 0805 	sub.w	r8, r8, r5
 800cee8:	60a2      	str	r2, [r4, #8]
 800ceea:	6123      	str	r3, [r4, #16]
 800ceec:	2202      	movs	r2, #2
 800ceee:	4641      	mov	r1, r8
 800cef0:	4620      	mov	r0, r4
 800cef2:	f001 ffbd 	bl	800ee70 <ucdr_check_final_buffer_behavior_array>
 800cef6:	4605      	mov	r5, r0
 800cef8:	eba7 0008 	sub.w	r0, r7, r8
 800cefc:	4430      	add	r0, r6
 800cefe:	462a      	mov	r2, r5
 800cf00:	2d00      	cmp	r5, #0
 800cf02:	d1e8      	bne.n	800ced6 <ucdr_deserialize_array_uint16_t+0x56>
 800cf04:	7da0      	ldrb	r0, [r4, #22]
 800cf06:	2302      	movs	r3, #2
 800cf08:	7563      	strb	r3, [r4, #21]
 800cf0a:	f080 0001 	eor.w	r0, r0, #1
 800cf0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf12:	463a      	mov	r2, r7
 800cf14:	68a1      	ldr	r1, [r4, #8]
 800cf16:	4630      	mov	r0, r6
 800cf18:	f00c fb79 	bl	801960e <memcpy>
 800cf1c:	68a2      	ldr	r2, [r4, #8]
 800cf1e:	6923      	ldr	r3, [r4, #16]
 800cf20:	443a      	add	r2, r7
 800cf22:	441f      	add	r7, r3
 800cf24:	60a2      	str	r2, [r4, #8]
 800cf26:	6127      	str	r7, [r4, #16]
 800cf28:	e7ec      	b.n	800cf04 <ucdr_deserialize_array_uint16_t+0x84>
 800cf2a:	bf00      	nop

0800cf2c <ucdr_serialize_endian_array_int32_t>:
 800cf2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf30:	4688      	mov	r8, r1
 800cf32:	2104      	movs	r1, #4
 800cf34:	4604      	mov	r4, r0
 800cf36:	4616      	mov	r6, r2
 800cf38:	461f      	mov	r7, r3
 800cf3a:	f001 ff71 	bl	800ee20 <ucdr_buffer_alignment>
 800cf3e:	4601      	mov	r1, r0
 800cf40:	4620      	mov	r0, r4
 800cf42:	7d65      	ldrb	r5, [r4, #21]
 800cf44:	f001 ffb0 	bl	800eea8 <ucdr_advance_buffer>
 800cf48:	f1b8 0f01 	cmp.w	r8, #1
 800cf4c:	7565      	strb	r5, [r4, #21]
 800cf4e:	d010      	beq.n	800cf72 <ucdr_serialize_endian_array_int32_t+0x46>
 800cf50:	b157      	cbz	r7, 800cf68 <ucdr_serialize_endian_array_int32_t+0x3c>
 800cf52:	3e04      	subs	r6, #4
 800cf54:	2500      	movs	r5, #0
 800cf56:	f856 2f04 	ldr.w	r2, [r6, #4]!
 800cf5a:	4641      	mov	r1, r8
 800cf5c:	4620      	mov	r0, r4
 800cf5e:	3501      	adds	r5, #1
 800cf60:	f001 f8da 	bl	800e118 <ucdr_serialize_endian_int32_t>
 800cf64:	42af      	cmp	r7, r5
 800cf66:	d1f6      	bne.n	800cf56 <ucdr_serialize_endian_array_int32_t+0x2a>
 800cf68:	7da0      	ldrb	r0, [r4, #22]
 800cf6a:	f080 0001 	eor.w	r0, r0, #1
 800cf6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf72:	00bf      	lsls	r7, r7, #2
 800cf74:	4639      	mov	r1, r7
 800cf76:	4620      	mov	r0, r4
 800cf78:	f001 fef2 	bl	800ed60 <ucdr_check_buffer_available_for>
 800cf7c:	b9f8      	cbnz	r0, 800cfbe <ucdr_serialize_endian_array_int32_t+0x92>
 800cf7e:	46b8      	mov	r8, r7
 800cf80:	e00a      	b.n	800cf98 <ucdr_serialize_endian_array_int32_t+0x6c>
 800cf82:	68a0      	ldr	r0, [r4, #8]
 800cf84:	f00c fb43 	bl	801960e <memcpy>
 800cf88:	68a2      	ldr	r2, [r4, #8]
 800cf8a:	6923      	ldr	r3, [r4, #16]
 800cf8c:	442a      	add	r2, r5
 800cf8e:	442b      	add	r3, r5
 800cf90:	eba8 0805 	sub.w	r8, r8, r5
 800cf94:	60a2      	str	r2, [r4, #8]
 800cf96:	6123      	str	r3, [r4, #16]
 800cf98:	4641      	mov	r1, r8
 800cf9a:	2204      	movs	r2, #4
 800cf9c:	4620      	mov	r0, r4
 800cf9e:	f001 ff67 	bl	800ee70 <ucdr_check_final_buffer_behavior_array>
 800cfa2:	eba7 0108 	sub.w	r1, r7, r8
 800cfa6:	4431      	add	r1, r6
 800cfa8:	4605      	mov	r5, r0
 800cfaa:	4602      	mov	r2, r0
 800cfac:	2800      	cmp	r0, #0
 800cfae:	d1e8      	bne.n	800cf82 <ucdr_serialize_endian_array_int32_t+0x56>
 800cfb0:	7da0      	ldrb	r0, [r4, #22]
 800cfb2:	2304      	movs	r3, #4
 800cfb4:	7563      	strb	r3, [r4, #21]
 800cfb6:	f080 0001 	eor.w	r0, r0, #1
 800cfba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cfbe:	463a      	mov	r2, r7
 800cfc0:	68a0      	ldr	r0, [r4, #8]
 800cfc2:	4631      	mov	r1, r6
 800cfc4:	f00c fb23 	bl	801960e <memcpy>
 800cfc8:	68a2      	ldr	r2, [r4, #8]
 800cfca:	6923      	ldr	r3, [r4, #16]
 800cfcc:	443a      	add	r2, r7
 800cfce:	441f      	add	r7, r3
 800cfd0:	60a2      	str	r2, [r4, #8]
 800cfd2:	6127      	str	r7, [r4, #16]
 800cfd4:	e7ec      	b.n	800cfb0 <ucdr_serialize_endian_array_int32_t+0x84>
 800cfd6:	bf00      	nop

0800cfd8 <ucdr_deserialize_endian_array_int32_t>:
 800cfd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cfdc:	4688      	mov	r8, r1
 800cfde:	2104      	movs	r1, #4
 800cfe0:	4605      	mov	r5, r0
 800cfe2:	4614      	mov	r4, r2
 800cfe4:	461f      	mov	r7, r3
 800cfe6:	f001 ff1b 	bl	800ee20 <ucdr_buffer_alignment>
 800cfea:	4601      	mov	r1, r0
 800cfec:	4628      	mov	r0, r5
 800cfee:	7d6e      	ldrb	r6, [r5, #21]
 800cff0:	f001 ff5a 	bl	800eea8 <ucdr_advance_buffer>
 800cff4:	f1b8 0f01 	cmp.w	r8, #1
 800cff8:	756e      	strb	r6, [r5, #21]
 800cffa:	d010      	beq.n	800d01e <ucdr_deserialize_endian_array_int32_t+0x46>
 800cffc:	2600      	movs	r6, #0
 800cffe:	b14f      	cbz	r7, 800d014 <ucdr_deserialize_endian_array_int32_t+0x3c>
 800d000:	4622      	mov	r2, r4
 800d002:	4641      	mov	r1, r8
 800d004:	4628      	mov	r0, r5
 800d006:	3601      	adds	r6, #1
 800d008:	f001 f9ae 	bl	800e368 <ucdr_deserialize_endian_int32_t>
 800d00c:	42b7      	cmp	r7, r6
 800d00e:	f104 0404 	add.w	r4, r4, #4
 800d012:	d1f5      	bne.n	800d000 <ucdr_deserialize_endian_array_int32_t+0x28>
 800d014:	7da8      	ldrb	r0, [r5, #22]
 800d016:	f080 0001 	eor.w	r0, r0, #1
 800d01a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d01e:	00bf      	lsls	r7, r7, #2
 800d020:	4639      	mov	r1, r7
 800d022:	4628      	mov	r0, r5
 800d024:	f001 fe9c 	bl	800ed60 <ucdr_check_buffer_available_for>
 800d028:	b9f8      	cbnz	r0, 800d06a <ucdr_deserialize_endian_array_int32_t+0x92>
 800d02a:	46b8      	mov	r8, r7
 800d02c:	e00a      	b.n	800d044 <ucdr_deserialize_endian_array_int32_t+0x6c>
 800d02e:	68a9      	ldr	r1, [r5, #8]
 800d030:	f00c faed 	bl	801960e <memcpy>
 800d034:	68aa      	ldr	r2, [r5, #8]
 800d036:	692b      	ldr	r3, [r5, #16]
 800d038:	4432      	add	r2, r6
 800d03a:	4433      	add	r3, r6
 800d03c:	eba8 0806 	sub.w	r8, r8, r6
 800d040:	60aa      	str	r2, [r5, #8]
 800d042:	612b      	str	r3, [r5, #16]
 800d044:	2204      	movs	r2, #4
 800d046:	4641      	mov	r1, r8
 800d048:	4628      	mov	r0, r5
 800d04a:	f001 ff11 	bl	800ee70 <ucdr_check_final_buffer_behavior_array>
 800d04e:	4606      	mov	r6, r0
 800d050:	eba7 0008 	sub.w	r0, r7, r8
 800d054:	4420      	add	r0, r4
 800d056:	4632      	mov	r2, r6
 800d058:	2e00      	cmp	r6, #0
 800d05a:	d1e8      	bne.n	800d02e <ucdr_deserialize_endian_array_int32_t+0x56>
 800d05c:	7da8      	ldrb	r0, [r5, #22]
 800d05e:	2304      	movs	r3, #4
 800d060:	756b      	strb	r3, [r5, #21]
 800d062:	f080 0001 	eor.w	r0, r0, #1
 800d066:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d06a:	463a      	mov	r2, r7
 800d06c:	68a9      	ldr	r1, [r5, #8]
 800d06e:	4620      	mov	r0, r4
 800d070:	f00c facd 	bl	801960e <memcpy>
 800d074:	68aa      	ldr	r2, [r5, #8]
 800d076:	692b      	ldr	r3, [r5, #16]
 800d078:	443a      	add	r2, r7
 800d07a:	441f      	add	r7, r3
 800d07c:	60aa      	str	r2, [r5, #8]
 800d07e:	612f      	str	r7, [r5, #16]
 800d080:	e7ec      	b.n	800d05c <ucdr_deserialize_endian_array_int32_t+0x84>
 800d082:	bf00      	nop

0800d084 <ucdr_serialize_endian_array_float>:
 800d084:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d088:	4688      	mov	r8, r1
 800d08a:	2104      	movs	r1, #4
 800d08c:	4604      	mov	r4, r0
 800d08e:	4616      	mov	r6, r2
 800d090:	461f      	mov	r7, r3
 800d092:	f001 fec5 	bl	800ee20 <ucdr_buffer_alignment>
 800d096:	4601      	mov	r1, r0
 800d098:	4620      	mov	r0, r4
 800d09a:	7d65      	ldrb	r5, [r4, #21]
 800d09c:	f001 ff04 	bl	800eea8 <ucdr_advance_buffer>
 800d0a0:	f1b8 0f01 	cmp.w	r8, #1
 800d0a4:	7565      	strb	r5, [r4, #21]
 800d0a6:	d00f      	beq.n	800d0c8 <ucdr_serialize_endian_array_float+0x44>
 800d0a8:	2500      	movs	r5, #0
 800d0aa:	b147      	cbz	r7, 800d0be <ucdr_serialize_endian_array_float+0x3a>
 800d0ac:	ecb6 0a01 	vldmia	r6!, {s0}
 800d0b0:	4641      	mov	r1, r8
 800d0b2:	4620      	mov	r0, r4
 800d0b4:	3501      	adds	r5, #1
 800d0b6:	f001 f9ed 	bl	800e494 <ucdr_serialize_endian_float>
 800d0ba:	42af      	cmp	r7, r5
 800d0bc:	d1f6      	bne.n	800d0ac <ucdr_serialize_endian_array_float+0x28>
 800d0be:	7da0      	ldrb	r0, [r4, #22]
 800d0c0:	f080 0001 	eor.w	r0, r0, #1
 800d0c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0c8:	00bf      	lsls	r7, r7, #2
 800d0ca:	4639      	mov	r1, r7
 800d0cc:	4620      	mov	r0, r4
 800d0ce:	f001 fe47 	bl	800ed60 <ucdr_check_buffer_available_for>
 800d0d2:	b9f8      	cbnz	r0, 800d114 <ucdr_serialize_endian_array_float+0x90>
 800d0d4:	46b8      	mov	r8, r7
 800d0d6:	e00a      	b.n	800d0ee <ucdr_serialize_endian_array_float+0x6a>
 800d0d8:	68a0      	ldr	r0, [r4, #8]
 800d0da:	f00c fa98 	bl	801960e <memcpy>
 800d0de:	68a2      	ldr	r2, [r4, #8]
 800d0e0:	6923      	ldr	r3, [r4, #16]
 800d0e2:	442a      	add	r2, r5
 800d0e4:	442b      	add	r3, r5
 800d0e6:	eba8 0805 	sub.w	r8, r8, r5
 800d0ea:	60a2      	str	r2, [r4, #8]
 800d0ec:	6123      	str	r3, [r4, #16]
 800d0ee:	4641      	mov	r1, r8
 800d0f0:	2204      	movs	r2, #4
 800d0f2:	4620      	mov	r0, r4
 800d0f4:	f001 febc 	bl	800ee70 <ucdr_check_final_buffer_behavior_array>
 800d0f8:	eba7 0108 	sub.w	r1, r7, r8
 800d0fc:	4431      	add	r1, r6
 800d0fe:	4605      	mov	r5, r0
 800d100:	4602      	mov	r2, r0
 800d102:	2800      	cmp	r0, #0
 800d104:	d1e8      	bne.n	800d0d8 <ucdr_serialize_endian_array_float+0x54>
 800d106:	7da0      	ldrb	r0, [r4, #22]
 800d108:	2304      	movs	r3, #4
 800d10a:	7563      	strb	r3, [r4, #21]
 800d10c:	f080 0001 	eor.w	r0, r0, #1
 800d110:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d114:	463a      	mov	r2, r7
 800d116:	68a0      	ldr	r0, [r4, #8]
 800d118:	4631      	mov	r1, r6
 800d11a:	f00c fa78 	bl	801960e <memcpy>
 800d11e:	68a2      	ldr	r2, [r4, #8]
 800d120:	6923      	ldr	r3, [r4, #16]
 800d122:	443a      	add	r2, r7
 800d124:	441f      	add	r7, r3
 800d126:	60a2      	str	r2, [r4, #8]
 800d128:	6127      	str	r7, [r4, #16]
 800d12a:	e7ec      	b.n	800d106 <ucdr_serialize_endian_array_float+0x82>

0800d12c <ucdr_deserialize_endian_array_float>:
 800d12c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d130:	4688      	mov	r8, r1
 800d132:	2104      	movs	r1, #4
 800d134:	4605      	mov	r5, r0
 800d136:	4614      	mov	r4, r2
 800d138:	461f      	mov	r7, r3
 800d13a:	f001 fe71 	bl	800ee20 <ucdr_buffer_alignment>
 800d13e:	4601      	mov	r1, r0
 800d140:	4628      	mov	r0, r5
 800d142:	7d6e      	ldrb	r6, [r5, #21]
 800d144:	f001 feb0 	bl	800eea8 <ucdr_advance_buffer>
 800d148:	f1b8 0f01 	cmp.w	r8, #1
 800d14c:	756e      	strb	r6, [r5, #21]
 800d14e:	d010      	beq.n	800d172 <ucdr_deserialize_endian_array_float+0x46>
 800d150:	2600      	movs	r6, #0
 800d152:	b14f      	cbz	r7, 800d168 <ucdr_deserialize_endian_array_float+0x3c>
 800d154:	4622      	mov	r2, r4
 800d156:	4641      	mov	r1, r8
 800d158:	4628      	mov	r0, r5
 800d15a:	3601      	adds	r6, #1
 800d15c:	f001 fa34 	bl	800e5c8 <ucdr_deserialize_endian_float>
 800d160:	42b7      	cmp	r7, r6
 800d162:	f104 0404 	add.w	r4, r4, #4
 800d166:	d1f5      	bne.n	800d154 <ucdr_deserialize_endian_array_float+0x28>
 800d168:	7da8      	ldrb	r0, [r5, #22]
 800d16a:	f080 0001 	eor.w	r0, r0, #1
 800d16e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d172:	00bf      	lsls	r7, r7, #2
 800d174:	4639      	mov	r1, r7
 800d176:	4628      	mov	r0, r5
 800d178:	f001 fdf2 	bl	800ed60 <ucdr_check_buffer_available_for>
 800d17c:	b9f8      	cbnz	r0, 800d1be <ucdr_deserialize_endian_array_float+0x92>
 800d17e:	46b8      	mov	r8, r7
 800d180:	e00a      	b.n	800d198 <ucdr_deserialize_endian_array_float+0x6c>
 800d182:	68a9      	ldr	r1, [r5, #8]
 800d184:	f00c fa43 	bl	801960e <memcpy>
 800d188:	68aa      	ldr	r2, [r5, #8]
 800d18a:	692b      	ldr	r3, [r5, #16]
 800d18c:	4432      	add	r2, r6
 800d18e:	4433      	add	r3, r6
 800d190:	eba8 0806 	sub.w	r8, r8, r6
 800d194:	60aa      	str	r2, [r5, #8]
 800d196:	612b      	str	r3, [r5, #16]
 800d198:	2204      	movs	r2, #4
 800d19a:	4641      	mov	r1, r8
 800d19c:	4628      	mov	r0, r5
 800d19e:	f001 fe67 	bl	800ee70 <ucdr_check_final_buffer_behavior_array>
 800d1a2:	4606      	mov	r6, r0
 800d1a4:	eba7 0008 	sub.w	r0, r7, r8
 800d1a8:	4420      	add	r0, r4
 800d1aa:	4632      	mov	r2, r6
 800d1ac:	2e00      	cmp	r6, #0
 800d1ae:	d1e8      	bne.n	800d182 <ucdr_deserialize_endian_array_float+0x56>
 800d1b0:	7da8      	ldrb	r0, [r5, #22]
 800d1b2:	2304      	movs	r3, #4
 800d1b4:	756b      	strb	r3, [r5, #21]
 800d1b6:	f080 0001 	eor.w	r0, r0, #1
 800d1ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d1be:	463a      	mov	r2, r7
 800d1c0:	68a9      	ldr	r1, [r5, #8]
 800d1c2:	4620      	mov	r0, r4
 800d1c4:	f00c fa23 	bl	801960e <memcpy>
 800d1c8:	68aa      	ldr	r2, [r5, #8]
 800d1ca:	692b      	ldr	r3, [r5, #16]
 800d1cc:	443a      	add	r2, r7
 800d1ce:	441f      	add	r7, r3
 800d1d0:	60aa      	str	r2, [r5, #8]
 800d1d2:	612f      	str	r7, [r5, #16]
 800d1d4:	e7ec      	b.n	800d1b0 <ucdr_deserialize_endian_array_float+0x84>
 800d1d6:	bf00      	nop

0800d1d8 <ucdr_serialize_array_double>:
 800d1d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1dc:	460e      	mov	r6, r1
 800d1de:	2108      	movs	r1, #8
 800d1e0:	4604      	mov	r4, r0
 800d1e2:	4617      	mov	r7, r2
 800d1e4:	f001 fe1c 	bl	800ee20 <ucdr_buffer_alignment>
 800d1e8:	4601      	mov	r1, r0
 800d1ea:	4620      	mov	r0, r4
 800d1ec:	7d65      	ldrb	r5, [r4, #21]
 800d1ee:	f001 fe5b 	bl	800eea8 <ucdr_advance_buffer>
 800d1f2:	7d21      	ldrb	r1, [r4, #20]
 800d1f4:	7565      	strb	r5, [r4, #21]
 800d1f6:	2901      	cmp	r1, #1
 800d1f8:	d010      	beq.n	800d21c <ucdr_serialize_array_double+0x44>
 800d1fa:	b157      	cbz	r7, 800d212 <ucdr_serialize_array_double+0x3a>
 800d1fc:	2500      	movs	r5, #0
 800d1fe:	e000      	b.n	800d202 <ucdr_serialize_array_double+0x2a>
 800d200:	7d21      	ldrb	r1, [r4, #20]
 800d202:	ecb6 0b02 	vldmia	r6!, {d0}
 800d206:	4620      	mov	r0, r4
 800d208:	3501      	adds	r5, #1
 800d20a:	f001 fb43 	bl	800e894 <ucdr_serialize_endian_double>
 800d20e:	42af      	cmp	r7, r5
 800d210:	d1f6      	bne.n	800d200 <ucdr_serialize_array_double+0x28>
 800d212:	7da0      	ldrb	r0, [r4, #22]
 800d214:	f080 0001 	eor.w	r0, r0, #1
 800d218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d21c:	00ff      	lsls	r7, r7, #3
 800d21e:	4639      	mov	r1, r7
 800d220:	4620      	mov	r0, r4
 800d222:	f001 fd9d 	bl	800ed60 <ucdr_check_buffer_available_for>
 800d226:	b9f8      	cbnz	r0, 800d268 <ucdr_serialize_array_double+0x90>
 800d228:	46b8      	mov	r8, r7
 800d22a:	e00a      	b.n	800d242 <ucdr_serialize_array_double+0x6a>
 800d22c:	68a0      	ldr	r0, [r4, #8]
 800d22e:	f00c f9ee 	bl	801960e <memcpy>
 800d232:	68a2      	ldr	r2, [r4, #8]
 800d234:	6923      	ldr	r3, [r4, #16]
 800d236:	442a      	add	r2, r5
 800d238:	442b      	add	r3, r5
 800d23a:	eba8 0805 	sub.w	r8, r8, r5
 800d23e:	60a2      	str	r2, [r4, #8]
 800d240:	6123      	str	r3, [r4, #16]
 800d242:	4641      	mov	r1, r8
 800d244:	2208      	movs	r2, #8
 800d246:	4620      	mov	r0, r4
 800d248:	f001 fe12 	bl	800ee70 <ucdr_check_final_buffer_behavior_array>
 800d24c:	eba7 0108 	sub.w	r1, r7, r8
 800d250:	4431      	add	r1, r6
 800d252:	4605      	mov	r5, r0
 800d254:	4602      	mov	r2, r0
 800d256:	2800      	cmp	r0, #0
 800d258:	d1e8      	bne.n	800d22c <ucdr_serialize_array_double+0x54>
 800d25a:	7da0      	ldrb	r0, [r4, #22]
 800d25c:	2308      	movs	r3, #8
 800d25e:	7563      	strb	r3, [r4, #21]
 800d260:	f080 0001 	eor.w	r0, r0, #1
 800d264:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d268:	463a      	mov	r2, r7
 800d26a:	68a0      	ldr	r0, [r4, #8]
 800d26c:	4631      	mov	r1, r6
 800d26e:	f00c f9ce 	bl	801960e <memcpy>
 800d272:	68a2      	ldr	r2, [r4, #8]
 800d274:	6923      	ldr	r3, [r4, #16]
 800d276:	443a      	add	r2, r7
 800d278:	441f      	add	r7, r3
 800d27a:	60a2      	str	r2, [r4, #8]
 800d27c:	6127      	str	r7, [r4, #16]
 800d27e:	e7ec      	b.n	800d25a <ucdr_serialize_array_double+0x82>

0800d280 <ucdr_deserialize_array_double>:
 800d280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d284:	460e      	mov	r6, r1
 800d286:	2108      	movs	r1, #8
 800d288:	4604      	mov	r4, r0
 800d28a:	4617      	mov	r7, r2
 800d28c:	f001 fdc8 	bl	800ee20 <ucdr_buffer_alignment>
 800d290:	4601      	mov	r1, r0
 800d292:	4620      	mov	r0, r4
 800d294:	7d65      	ldrb	r5, [r4, #21]
 800d296:	f001 fe07 	bl	800eea8 <ucdr_advance_buffer>
 800d29a:	7d21      	ldrb	r1, [r4, #20]
 800d29c:	7565      	strb	r5, [r4, #21]
 800d29e:	2901      	cmp	r1, #1
 800d2a0:	d011      	beq.n	800d2c6 <ucdr_deserialize_array_double+0x46>
 800d2a2:	b15f      	cbz	r7, 800d2bc <ucdr_deserialize_array_double+0x3c>
 800d2a4:	2500      	movs	r5, #0
 800d2a6:	e000      	b.n	800d2aa <ucdr_deserialize_array_double+0x2a>
 800d2a8:	7d21      	ldrb	r1, [r4, #20]
 800d2aa:	4632      	mov	r2, r6
 800d2ac:	4620      	mov	r0, r4
 800d2ae:	3501      	adds	r5, #1
 800d2b0:	f001 fc88 	bl	800ebc4 <ucdr_deserialize_endian_double>
 800d2b4:	42af      	cmp	r7, r5
 800d2b6:	f106 0608 	add.w	r6, r6, #8
 800d2ba:	d1f5      	bne.n	800d2a8 <ucdr_deserialize_array_double+0x28>
 800d2bc:	7da0      	ldrb	r0, [r4, #22]
 800d2be:	f080 0001 	eor.w	r0, r0, #1
 800d2c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2c6:	00ff      	lsls	r7, r7, #3
 800d2c8:	4639      	mov	r1, r7
 800d2ca:	4620      	mov	r0, r4
 800d2cc:	f001 fd48 	bl	800ed60 <ucdr_check_buffer_available_for>
 800d2d0:	b9f8      	cbnz	r0, 800d312 <ucdr_deserialize_array_double+0x92>
 800d2d2:	46b8      	mov	r8, r7
 800d2d4:	e00a      	b.n	800d2ec <ucdr_deserialize_array_double+0x6c>
 800d2d6:	68a1      	ldr	r1, [r4, #8]
 800d2d8:	f00c f999 	bl	801960e <memcpy>
 800d2dc:	68a2      	ldr	r2, [r4, #8]
 800d2de:	6923      	ldr	r3, [r4, #16]
 800d2e0:	442a      	add	r2, r5
 800d2e2:	442b      	add	r3, r5
 800d2e4:	eba8 0805 	sub.w	r8, r8, r5
 800d2e8:	60a2      	str	r2, [r4, #8]
 800d2ea:	6123      	str	r3, [r4, #16]
 800d2ec:	2208      	movs	r2, #8
 800d2ee:	4641      	mov	r1, r8
 800d2f0:	4620      	mov	r0, r4
 800d2f2:	f001 fdbd 	bl	800ee70 <ucdr_check_final_buffer_behavior_array>
 800d2f6:	4605      	mov	r5, r0
 800d2f8:	eba7 0008 	sub.w	r0, r7, r8
 800d2fc:	4430      	add	r0, r6
 800d2fe:	462a      	mov	r2, r5
 800d300:	2d00      	cmp	r5, #0
 800d302:	d1e8      	bne.n	800d2d6 <ucdr_deserialize_array_double+0x56>
 800d304:	7da0      	ldrb	r0, [r4, #22]
 800d306:	2308      	movs	r3, #8
 800d308:	7563      	strb	r3, [r4, #21]
 800d30a:	f080 0001 	eor.w	r0, r0, #1
 800d30e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d312:	463a      	mov	r2, r7
 800d314:	68a1      	ldr	r1, [r4, #8]
 800d316:	4630      	mov	r0, r6
 800d318:	f00c f979 	bl	801960e <memcpy>
 800d31c:	68a2      	ldr	r2, [r4, #8]
 800d31e:	6923      	ldr	r3, [r4, #16]
 800d320:	443a      	add	r2, r7
 800d322:	441f      	add	r7, r3
 800d324:	60a2      	str	r2, [r4, #8]
 800d326:	6127      	str	r7, [r4, #16]
 800d328:	e7ec      	b.n	800d304 <ucdr_deserialize_array_double+0x84>
 800d32a:	bf00      	nop

0800d32c <ucdr_serialize_bool>:
 800d32c:	b538      	push	{r3, r4, r5, lr}
 800d32e:	460d      	mov	r5, r1
 800d330:	2101      	movs	r1, #1
 800d332:	4604      	mov	r4, r0
 800d334:	f001 fd20 	bl	800ed78 <ucdr_check_final_buffer_behavior>
 800d338:	b148      	cbz	r0, 800d34e <ucdr_serialize_bool+0x22>
 800d33a:	68a3      	ldr	r3, [r4, #8]
 800d33c:	701d      	strb	r5, [r3, #0]
 800d33e:	68a2      	ldr	r2, [r4, #8]
 800d340:	6923      	ldr	r3, [r4, #16]
 800d342:	2101      	movs	r1, #1
 800d344:	440a      	add	r2, r1
 800d346:	440b      	add	r3, r1
 800d348:	60a2      	str	r2, [r4, #8]
 800d34a:	6123      	str	r3, [r4, #16]
 800d34c:	7561      	strb	r1, [r4, #21]
 800d34e:	7da0      	ldrb	r0, [r4, #22]
 800d350:	f080 0001 	eor.w	r0, r0, #1
 800d354:	bd38      	pop	{r3, r4, r5, pc}
 800d356:	bf00      	nop

0800d358 <ucdr_deserialize_bool>:
 800d358:	b538      	push	{r3, r4, r5, lr}
 800d35a:	460d      	mov	r5, r1
 800d35c:	2101      	movs	r1, #1
 800d35e:	4604      	mov	r4, r0
 800d360:	f001 fd0a 	bl	800ed78 <ucdr_check_final_buffer_behavior>
 800d364:	b160      	cbz	r0, 800d380 <ucdr_deserialize_bool+0x28>
 800d366:	68a2      	ldr	r2, [r4, #8]
 800d368:	6923      	ldr	r3, [r4, #16]
 800d36a:	f812 1b01 	ldrb.w	r1, [r2], #1
 800d36e:	3900      	subs	r1, #0
 800d370:	bf18      	it	ne
 800d372:	2101      	movne	r1, #1
 800d374:	7029      	strb	r1, [r5, #0]
 800d376:	3301      	adds	r3, #1
 800d378:	2101      	movs	r1, #1
 800d37a:	60a2      	str	r2, [r4, #8]
 800d37c:	6123      	str	r3, [r4, #16]
 800d37e:	7561      	strb	r1, [r4, #21]
 800d380:	7da0      	ldrb	r0, [r4, #22]
 800d382:	f080 0001 	eor.w	r0, r0, #1
 800d386:	bd38      	pop	{r3, r4, r5, pc}

0800d388 <ucdr_serialize_uint8_t>:
 800d388:	b538      	push	{r3, r4, r5, lr}
 800d38a:	460d      	mov	r5, r1
 800d38c:	2101      	movs	r1, #1
 800d38e:	4604      	mov	r4, r0
 800d390:	f001 fcf2 	bl	800ed78 <ucdr_check_final_buffer_behavior>
 800d394:	b148      	cbz	r0, 800d3aa <ucdr_serialize_uint8_t+0x22>
 800d396:	68a3      	ldr	r3, [r4, #8]
 800d398:	701d      	strb	r5, [r3, #0]
 800d39a:	68a2      	ldr	r2, [r4, #8]
 800d39c:	6923      	ldr	r3, [r4, #16]
 800d39e:	2101      	movs	r1, #1
 800d3a0:	440a      	add	r2, r1
 800d3a2:	440b      	add	r3, r1
 800d3a4:	60a2      	str	r2, [r4, #8]
 800d3a6:	6123      	str	r3, [r4, #16]
 800d3a8:	7561      	strb	r1, [r4, #21]
 800d3aa:	7da0      	ldrb	r0, [r4, #22]
 800d3ac:	f080 0001 	eor.w	r0, r0, #1
 800d3b0:	bd38      	pop	{r3, r4, r5, pc}
 800d3b2:	bf00      	nop

0800d3b4 <ucdr_deserialize_uint8_t>:
 800d3b4:	b538      	push	{r3, r4, r5, lr}
 800d3b6:	460d      	mov	r5, r1
 800d3b8:	2101      	movs	r1, #1
 800d3ba:	4604      	mov	r4, r0
 800d3bc:	f001 fcdc 	bl	800ed78 <ucdr_check_final_buffer_behavior>
 800d3c0:	b150      	cbz	r0, 800d3d8 <ucdr_deserialize_uint8_t+0x24>
 800d3c2:	68a3      	ldr	r3, [r4, #8]
 800d3c4:	781b      	ldrb	r3, [r3, #0]
 800d3c6:	702b      	strb	r3, [r5, #0]
 800d3c8:	68a2      	ldr	r2, [r4, #8]
 800d3ca:	6923      	ldr	r3, [r4, #16]
 800d3cc:	2101      	movs	r1, #1
 800d3ce:	440a      	add	r2, r1
 800d3d0:	440b      	add	r3, r1
 800d3d2:	60a2      	str	r2, [r4, #8]
 800d3d4:	6123      	str	r3, [r4, #16]
 800d3d6:	7561      	strb	r1, [r4, #21]
 800d3d8:	7da0      	ldrb	r0, [r4, #22]
 800d3da:	f080 0001 	eor.w	r0, r0, #1
 800d3de:	bd38      	pop	{r3, r4, r5, pc}

0800d3e0 <ucdr_serialize_uint16_t>:
 800d3e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d3e4:	b082      	sub	sp, #8
 800d3e6:	460b      	mov	r3, r1
 800d3e8:	2102      	movs	r1, #2
 800d3ea:	4604      	mov	r4, r0
 800d3ec:	f8ad 3006 	strh.w	r3, [sp, #6]
 800d3f0:	f001 fd16 	bl	800ee20 <ucdr_buffer_alignment>
 800d3f4:	4601      	mov	r1, r0
 800d3f6:	4620      	mov	r0, r4
 800d3f8:	7d67      	ldrb	r7, [r4, #21]
 800d3fa:	f001 fd55 	bl	800eea8 <ucdr_advance_buffer>
 800d3fe:	2102      	movs	r1, #2
 800d400:	4620      	mov	r0, r4
 800d402:	f001 fcad 	bl	800ed60 <ucdr_check_buffer_available_for>
 800d406:	bb78      	cbnz	r0, 800d468 <ucdr_serialize_uint16_t+0x88>
 800d408:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800d40c:	42ab      	cmp	r3, r5
 800d40e:	d926      	bls.n	800d45e <ucdr_serialize_uint16_t+0x7e>
 800d410:	1b5e      	subs	r6, r3, r5
 800d412:	60a3      	str	r3, [r4, #8]
 800d414:	6923      	ldr	r3, [r4, #16]
 800d416:	f1c6 0802 	rsb	r8, r6, #2
 800d41a:	4433      	add	r3, r6
 800d41c:	6123      	str	r3, [r4, #16]
 800d41e:	4641      	mov	r1, r8
 800d420:	4620      	mov	r0, r4
 800d422:	f001 fca9 	bl	800ed78 <ucdr_check_final_buffer_behavior>
 800d426:	2800      	cmp	r0, #0
 800d428:	d03b      	beq.n	800d4a2 <ucdr_serialize_uint16_t+0xc2>
 800d42a:	7d23      	ldrb	r3, [r4, #20]
 800d42c:	2b01      	cmp	r3, #1
 800d42e:	d04a      	beq.n	800d4c6 <ucdr_serialize_uint16_t+0xe6>
 800d430:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d434:	702b      	strb	r3, [r5, #0]
 800d436:	2e00      	cmp	r6, #0
 800d438:	d040      	beq.n	800d4bc <ucdr_serialize_uint16_t+0xdc>
 800d43a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d43e:	706b      	strb	r3, [r5, #1]
 800d440:	6923      	ldr	r3, [r4, #16]
 800d442:	68a2      	ldr	r2, [r4, #8]
 800d444:	7da0      	ldrb	r0, [r4, #22]
 800d446:	3302      	adds	r3, #2
 800d448:	1b9e      	subs	r6, r3, r6
 800d44a:	4442      	add	r2, r8
 800d44c:	2302      	movs	r3, #2
 800d44e:	f080 0001 	eor.w	r0, r0, #1
 800d452:	60a2      	str	r2, [r4, #8]
 800d454:	6126      	str	r6, [r4, #16]
 800d456:	7563      	strb	r3, [r4, #21]
 800d458:	b002      	add	sp, #8
 800d45a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d45e:	2102      	movs	r1, #2
 800d460:	4620      	mov	r0, r4
 800d462:	f001 fc89 	bl	800ed78 <ucdr_check_final_buffer_behavior>
 800d466:	b190      	cbz	r0, 800d48e <ucdr_serialize_uint16_t+0xae>
 800d468:	7d23      	ldrb	r3, [r4, #20]
 800d46a:	2b01      	cmp	r3, #1
 800d46c:	68a3      	ldr	r3, [r4, #8]
 800d46e:	d014      	beq.n	800d49a <ucdr_serialize_uint16_t+0xba>
 800d470:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800d474:	701a      	strb	r2, [r3, #0]
 800d476:	68a3      	ldr	r3, [r4, #8]
 800d478:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d47c:	705a      	strb	r2, [r3, #1]
 800d47e:	68a2      	ldr	r2, [r4, #8]
 800d480:	6923      	ldr	r3, [r4, #16]
 800d482:	3202      	adds	r2, #2
 800d484:	3302      	adds	r3, #2
 800d486:	2102      	movs	r1, #2
 800d488:	60a2      	str	r2, [r4, #8]
 800d48a:	6123      	str	r3, [r4, #16]
 800d48c:	7561      	strb	r1, [r4, #21]
 800d48e:	7da0      	ldrb	r0, [r4, #22]
 800d490:	f080 0001 	eor.w	r0, r0, #1
 800d494:	b002      	add	sp, #8
 800d496:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d49a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800d49e:	801a      	strh	r2, [r3, #0]
 800d4a0:	e7ed      	b.n	800d47e <ucdr_serialize_uint16_t+0x9e>
 800d4a2:	68a2      	ldr	r2, [r4, #8]
 800d4a4:	6923      	ldr	r3, [r4, #16]
 800d4a6:	7da0      	ldrb	r0, [r4, #22]
 800d4a8:	7567      	strb	r7, [r4, #21]
 800d4aa:	1b92      	subs	r2, r2, r6
 800d4ac:	1b9b      	subs	r3, r3, r6
 800d4ae:	f080 0001 	eor.w	r0, r0, #1
 800d4b2:	60a2      	str	r2, [r4, #8]
 800d4b4:	6123      	str	r3, [r4, #16]
 800d4b6:	b002      	add	sp, #8
 800d4b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4bc:	68a3      	ldr	r3, [r4, #8]
 800d4be:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d4c2:	701a      	strb	r2, [r3, #0]
 800d4c4:	e7bc      	b.n	800d440 <ucdr_serialize_uint16_t+0x60>
 800d4c6:	4628      	mov	r0, r5
 800d4c8:	f10d 0506 	add.w	r5, sp, #6
 800d4cc:	4629      	mov	r1, r5
 800d4ce:	4632      	mov	r2, r6
 800d4d0:	f00c f89d 	bl	801960e <memcpy>
 800d4d4:	68a0      	ldr	r0, [r4, #8]
 800d4d6:	4642      	mov	r2, r8
 800d4d8:	19a9      	adds	r1, r5, r6
 800d4da:	f00c f898 	bl	801960e <memcpy>
 800d4de:	e7af      	b.n	800d440 <ucdr_serialize_uint16_t+0x60>

0800d4e0 <ucdr_serialize_endian_uint16_t>:
 800d4e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d4e4:	b083      	sub	sp, #12
 800d4e6:	460d      	mov	r5, r1
 800d4e8:	2102      	movs	r1, #2
 800d4ea:	4604      	mov	r4, r0
 800d4ec:	f8ad 2006 	strh.w	r2, [sp, #6]
 800d4f0:	f001 fc96 	bl	800ee20 <ucdr_buffer_alignment>
 800d4f4:	4601      	mov	r1, r0
 800d4f6:	4620      	mov	r0, r4
 800d4f8:	f894 8015 	ldrb.w	r8, [r4, #21]
 800d4fc:	f001 fcd4 	bl	800eea8 <ucdr_advance_buffer>
 800d500:	2102      	movs	r1, #2
 800d502:	4620      	mov	r0, r4
 800d504:	f001 fc2c 	bl	800ed60 <ucdr_check_buffer_available_for>
 800d508:	bb70      	cbnz	r0, 800d568 <ucdr_serialize_endian_uint16_t+0x88>
 800d50a:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800d50e:	42be      	cmp	r6, r7
 800d510:	d925      	bls.n	800d55e <ucdr_serialize_endian_uint16_t+0x7e>
 800d512:	6923      	ldr	r3, [r4, #16]
 800d514:	60a6      	str	r6, [r4, #8]
 800d516:	1bf6      	subs	r6, r6, r7
 800d518:	4433      	add	r3, r6
 800d51a:	f1c6 0902 	rsb	r9, r6, #2
 800d51e:	6123      	str	r3, [r4, #16]
 800d520:	4649      	mov	r1, r9
 800d522:	4620      	mov	r0, r4
 800d524:	f001 fc28 	bl	800ed78 <ucdr_check_final_buffer_behavior>
 800d528:	2800      	cmp	r0, #0
 800d52a:	d039      	beq.n	800d5a0 <ucdr_serialize_endian_uint16_t+0xc0>
 800d52c:	2d01      	cmp	r5, #1
 800d52e:	d04a      	beq.n	800d5c6 <ucdr_serialize_endian_uint16_t+0xe6>
 800d530:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d534:	703b      	strb	r3, [r7, #0]
 800d536:	2e00      	cmp	r6, #0
 800d538:	d040      	beq.n	800d5bc <ucdr_serialize_endian_uint16_t+0xdc>
 800d53a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d53e:	707b      	strb	r3, [r7, #1]
 800d540:	6923      	ldr	r3, [r4, #16]
 800d542:	68a2      	ldr	r2, [r4, #8]
 800d544:	7da0      	ldrb	r0, [r4, #22]
 800d546:	3302      	adds	r3, #2
 800d548:	444a      	add	r2, r9
 800d54a:	1b9b      	subs	r3, r3, r6
 800d54c:	2102      	movs	r1, #2
 800d54e:	f080 0001 	eor.w	r0, r0, #1
 800d552:	60a2      	str	r2, [r4, #8]
 800d554:	6123      	str	r3, [r4, #16]
 800d556:	7561      	strb	r1, [r4, #21]
 800d558:	b003      	add	sp, #12
 800d55a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d55e:	2102      	movs	r1, #2
 800d560:	4620      	mov	r0, r4
 800d562:	f001 fc09 	bl	800ed78 <ucdr_check_final_buffer_behavior>
 800d566:	b188      	cbz	r0, 800d58c <ucdr_serialize_endian_uint16_t+0xac>
 800d568:	2d01      	cmp	r5, #1
 800d56a:	68a3      	ldr	r3, [r4, #8]
 800d56c:	d014      	beq.n	800d598 <ucdr_serialize_endian_uint16_t+0xb8>
 800d56e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800d572:	701a      	strb	r2, [r3, #0]
 800d574:	68a3      	ldr	r3, [r4, #8]
 800d576:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d57a:	705a      	strb	r2, [r3, #1]
 800d57c:	68a2      	ldr	r2, [r4, #8]
 800d57e:	6923      	ldr	r3, [r4, #16]
 800d580:	3202      	adds	r2, #2
 800d582:	3302      	adds	r3, #2
 800d584:	2102      	movs	r1, #2
 800d586:	60a2      	str	r2, [r4, #8]
 800d588:	6123      	str	r3, [r4, #16]
 800d58a:	7561      	strb	r1, [r4, #21]
 800d58c:	7da0      	ldrb	r0, [r4, #22]
 800d58e:	f080 0001 	eor.w	r0, r0, #1
 800d592:	b003      	add	sp, #12
 800d594:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d598:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800d59c:	801a      	strh	r2, [r3, #0]
 800d59e:	e7ed      	b.n	800d57c <ucdr_serialize_endian_uint16_t+0x9c>
 800d5a0:	68a2      	ldr	r2, [r4, #8]
 800d5a2:	6923      	ldr	r3, [r4, #16]
 800d5a4:	7da0      	ldrb	r0, [r4, #22]
 800d5a6:	f884 8015 	strb.w	r8, [r4, #21]
 800d5aa:	1b92      	subs	r2, r2, r6
 800d5ac:	1b9b      	subs	r3, r3, r6
 800d5ae:	f080 0001 	eor.w	r0, r0, #1
 800d5b2:	60a2      	str	r2, [r4, #8]
 800d5b4:	6123      	str	r3, [r4, #16]
 800d5b6:	b003      	add	sp, #12
 800d5b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d5bc:	68a3      	ldr	r3, [r4, #8]
 800d5be:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d5c2:	701a      	strb	r2, [r3, #0]
 800d5c4:	e7bc      	b.n	800d540 <ucdr_serialize_endian_uint16_t+0x60>
 800d5c6:	f10d 0506 	add.w	r5, sp, #6
 800d5ca:	4629      	mov	r1, r5
 800d5cc:	4632      	mov	r2, r6
 800d5ce:	4638      	mov	r0, r7
 800d5d0:	f00c f81d 	bl	801960e <memcpy>
 800d5d4:	68a0      	ldr	r0, [r4, #8]
 800d5d6:	464a      	mov	r2, r9
 800d5d8:	19a9      	adds	r1, r5, r6
 800d5da:	f00c f818 	bl	801960e <memcpy>
 800d5de:	e7af      	b.n	800d540 <ucdr_serialize_endian_uint16_t+0x60>

0800d5e0 <ucdr_deserialize_uint16_t>:
 800d5e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d5e4:	460d      	mov	r5, r1
 800d5e6:	2102      	movs	r1, #2
 800d5e8:	4604      	mov	r4, r0
 800d5ea:	f001 fc19 	bl	800ee20 <ucdr_buffer_alignment>
 800d5ee:	4601      	mov	r1, r0
 800d5f0:	4620      	mov	r0, r4
 800d5f2:	f894 8015 	ldrb.w	r8, [r4, #21]
 800d5f6:	f001 fc57 	bl	800eea8 <ucdr_advance_buffer>
 800d5fa:	2102      	movs	r1, #2
 800d5fc:	4620      	mov	r0, r4
 800d5fe:	f001 fbaf 	bl	800ed60 <ucdr_check_buffer_available_for>
 800d602:	bb60      	cbnz	r0, 800d65e <ucdr_deserialize_uint16_t+0x7e>
 800d604:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800d608:	42be      	cmp	r6, r7
 800d60a:	d923      	bls.n	800d654 <ucdr_deserialize_uint16_t+0x74>
 800d60c:	6923      	ldr	r3, [r4, #16]
 800d60e:	60a6      	str	r6, [r4, #8]
 800d610:	1bf6      	subs	r6, r6, r7
 800d612:	4433      	add	r3, r6
 800d614:	f1c6 0902 	rsb	r9, r6, #2
 800d618:	6123      	str	r3, [r4, #16]
 800d61a:	4649      	mov	r1, r9
 800d61c:	4620      	mov	r0, r4
 800d61e:	f001 fbab 	bl	800ed78 <ucdr_check_final_buffer_behavior>
 800d622:	2800      	cmp	r0, #0
 800d624:	d034      	beq.n	800d690 <ucdr_deserialize_uint16_t+0xb0>
 800d626:	7d23      	ldrb	r3, [r4, #20]
 800d628:	2b01      	cmp	r3, #1
 800d62a:	d042      	beq.n	800d6b2 <ucdr_deserialize_uint16_t+0xd2>
 800d62c:	787b      	ldrb	r3, [r7, #1]
 800d62e:	702b      	strb	r3, [r5, #0]
 800d630:	2e00      	cmp	r6, #0
 800d632:	d03a      	beq.n	800d6aa <ucdr_deserialize_uint16_t+0xca>
 800d634:	783b      	ldrb	r3, [r7, #0]
 800d636:	706b      	strb	r3, [r5, #1]
 800d638:	6923      	ldr	r3, [r4, #16]
 800d63a:	68a2      	ldr	r2, [r4, #8]
 800d63c:	7da0      	ldrb	r0, [r4, #22]
 800d63e:	2102      	movs	r1, #2
 800d640:	3302      	adds	r3, #2
 800d642:	444a      	add	r2, r9
 800d644:	1b9b      	subs	r3, r3, r6
 800d646:	7561      	strb	r1, [r4, #21]
 800d648:	60a2      	str	r2, [r4, #8]
 800d64a:	6123      	str	r3, [r4, #16]
 800d64c:	f080 0001 	eor.w	r0, r0, #1
 800d650:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d654:	2102      	movs	r1, #2
 800d656:	4620      	mov	r0, r4
 800d658:	f001 fb8e 	bl	800ed78 <ucdr_check_final_buffer_behavior>
 800d65c:	b180      	cbz	r0, 800d680 <ucdr_deserialize_uint16_t+0xa0>
 800d65e:	7d23      	ldrb	r3, [r4, #20]
 800d660:	2b01      	cmp	r3, #1
 800d662:	68a3      	ldr	r3, [r4, #8]
 800d664:	d011      	beq.n	800d68a <ucdr_deserialize_uint16_t+0xaa>
 800d666:	785b      	ldrb	r3, [r3, #1]
 800d668:	702b      	strb	r3, [r5, #0]
 800d66a:	68a3      	ldr	r3, [r4, #8]
 800d66c:	781b      	ldrb	r3, [r3, #0]
 800d66e:	706b      	strb	r3, [r5, #1]
 800d670:	68a2      	ldr	r2, [r4, #8]
 800d672:	6923      	ldr	r3, [r4, #16]
 800d674:	3202      	adds	r2, #2
 800d676:	3302      	adds	r3, #2
 800d678:	2102      	movs	r1, #2
 800d67a:	60a2      	str	r2, [r4, #8]
 800d67c:	6123      	str	r3, [r4, #16]
 800d67e:	7561      	strb	r1, [r4, #21]
 800d680:	7da0      	ldrb	r0, [r4, #22]
 800d682:	f080 0001 	eor.w	r0, r0, #1
 800d686:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d68a:	881b      	ldrh	r3, [r3, #0]
 800d68c:	802b      	strh	r3, [r5, #0]
 800d68e:	e7ef      	b.n	800d670 <ucdr_deserialize_uint16_t+0x90>
 800d690:	68a2      	ldr	r2, [r4, #8]
 800d692:	6923      	ldr	r3, [r4, #16]
 800d694:	7da0      	ldrb	r0, [r4, #22]
 800d696:	f884 8015 	strb.w	r8, [r4, #21]
 800d69a:	1b92      	subs	r2, r2, r6
 800d69c:	1b9b      	subs	r3, r3, r6
 800d69e:	60a2      	str	r2, [r4, #8]
 800d6a0:	6123      	str	r3, [r4, #16]
 800d6a2:	f080 0001 	eor.w	r0, r0, #1
 800d6a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d6aa:	68a3      	ldr	r3, [r4, #8]
 800d6ac:	781b      	ldrb	r3, [r3, #0]
 800d6ae:	706b      	strb	r3, [r5, #1]
 800d6b0:	e7c2      	b.n	800d638 <ucdr_deserialize_uint16_t+0x58>
 800d6b2:	4639      	mov	r1, r7
 800d6b4:	4632      	mov	r2, r6
 800d6b6:	4628      	mov	r0, r5
 800d6b8:	f00b ffa9 	bl	801960e <memcpy>
 800d6bc:	68a1      	ldr	r1, [r4, #8]
 800d6be:	464a      	mov	r2, r9
 800d6c0:	19a8      	adds	r0, r5, r6
 800d6c2:	f00b ffa4 	bl	801960e <memcpy>
 800d6c6:	e7b7      	b.n	800d638 <ucdr_deserialize_uint16_t+0x58>

0800d6c8 <ucdr_deserialize_endian_uint16_t>:
 800d6c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d6cc:	460e      	mov	r6, r1
 800d6ce:	2102      	movs	r1, #2
 800d6d0:	4604      	mov	r4, r0
 800d6d2:	4615      	mov	r5, r2
 800d6d4:	f001 fba4 	bl	800ee20 <ucdr_buffer_alignment>
 800d6d8:	4601      	mov	r1, r0
 800d6da:	4620      	mov	r0, r4
 800d6dc:	f894 9015 	ldrb.w	r9, [r4, #21]
 800d6e0:	f001 fbe2 	bl	800eea8 <ucdr_advance_buffer>
 800d6e4:	2102      	movs	r1, #2
 800d6e6:	4620      	mov	r0, r4
 800d6e8:	f001 fb3a 	bl	800ed60 <ucdr_check_buffer_available_for>
 800d6ec:	bb70      	cbnz	r0, 800d74c <ucdr_deserialize_endian_uint16_t+0x84>
 800d6ee:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 800d6f2:	4547      	cmp	r7, r8
 800d6f4:	d925      	bls.n	800d742 <ucdr_deserialize_endian_uint16_t+0x7a>
 800d6f6:	6923      	ldr	r3, [r4, #16]
 800d6f8:	60a7      	str	r7, [r4, #8]
 800d6fa:	eba7 0708 	sub.w	r7, r7, r8
 800d6fe:	443b      	add	r3, r7
 800d700:	f1c7 0a02 	rsb	sl, r7, #2
 800d704:	6123      	str	r3, [r4, #16]
 800d706:	4651      	mov	r1, sl
 800d708:	4620      	mov	r0, r4
 800d70a:	f001 fb35 	bl	800ed78 <ucdr_check_final_buffer_behavior>
 800d70e:	2800      	cmp	r0, #0
 800d710:	d034      	beq.n	800d77c <ucdr_deserialize_endian_uint16_t+0xb4>
 800d712:	2e01      	cmp	r6, #1
 800d714:	d043      	beq.n	800d79e <ucdr_deserialize_endian_uint16_t+0xd6>
 800d716:	f898 3001 	ldrb.w	r3, [r8, #1]
 800d71a:	702b      	strb	r3, [r5, #0]
 800d71c:	2f00      	cmp	r7, #0
 800d71e:	d03a      	beq.n	800d796 <ucdr_deserialize_endian_uint16_t+0xce>
 800d720:	f898 3000 	ldrb.w	r3, [r8]
 800d724:	706b      	strb	r3, [r5, #1]
 800d726:	6923      	ldr	r3, [r4, #16]
 800d728:	68a2      	ldr	r2, [r4, #8]
 800d72a:	7da0      	ldrb	r0, [r4, #22]
 800d72c:	2102      	movs	r1, #2
 800d72e:	3302      	adds	r3, #2
 800d730:	4452      	add	r2, sl
 800d732:	1bdb      	subs	r3, r3, r7
 800d734:	7561      	strb	r1, [r4, #21]
 800d736:	60a2      	str	r2, [r4, #8]
 800d738:	6123      	str	r3, [r4, #16]
 800d73a:	f080 0001 	eor.w	r0, r0, #1
 800d73e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d742:	2102      	movs	r1, #2
 800d744:	4620      	mov	r0, r4
 800d746:	f001 fb17 	bl	800ed78 <ucdr_check_final_buffer_behavior>
 800d74a:	b178      	cbz	r0, 800d76c <ucdr_deserialize_endian_uint16_t+0xa4>
 800d74c:	2e01      	cmp	r6, #1
 800d74e:	68a3      	ldr	r3, [r4, #8]
 800d750:	d011      	beq.n	800d776 <ucdr_deserialize_endian_uint16_t+0xae>
 800d752:	785b      	ldrb	r3, [r3, #1]
 800d754:	702b      	strb	r3, [r5, #0]
 800d756:	68a3      	ldr	r3, [r4, #8]
 800d758:	781b      	ldrb	r3, [r3, #0]
 800d75a:	706b      	strb	r3, [r5, #1]
 800d75c:	68a2      	ldr	r2, [r4, #8]
 800d75e:	6923      	ldr	r3, [r4, #16]
 800d760:	3202      	adds	r2, #2
 800d762:	3302      	adds	r3, #2
 800d764:	2102      	movs	r1, #2
 800d766:	60a2      	str	r2, [r4, #8]
 800d768:	6123      	str	r3, [r4, #16]
 800d76a:	7561      	strb	r1, [r4, #21]
 800d76c:	7da0      	ldrb	r0, [r4, #22]
 800d76e:	f080 0001 	eor.w	r0, r0, #1
 800d772:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d776:	881b      	ldrh	r3, [r3, #0]
 800d778:	802b      	strh	r3, [r5, #0]
 800d77a:	e7ef      	b.n	800d75c <ucdr_deserialize_endian_uint16_t+0x94>
 800d77c:	68a2      	ldr	r2, [r4, #8]
 800d77e:	6923      	ldr	r3, [r4, #16]
 800d780:	7da0      	ldrb	r0, [r4, #22]
 800d782:	f884 9015 	strb.w	r9, [r4, #21]
 800d786:	1bd2      	subs	r2, r2, r7
 800d788:	1bdb      	subs	r3, r3, r7
 800d78a:	60a2      	str	r2, [r4, #8]
 800d78c:	6123      	str	r3, [r4, #16]
 800d78e:	f080 0001 	eor.w	r0, r0, #1
 800d792:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d796:	68a3      	ldr	r3, [r4, #8]
 800d798:	781b      	ldrb	r3, [r3, #0]
 800d79a:	706b      	strb	r3, [r5, #1]
 800d79c:	e7c3      	b.n	800d726 <ucdr_deserialize_endian_uint16_t+0x5e>
 800d79e:	4641      	mov	r1, r8
 800d7a0:	463a      	mov	r2, r7
 800d7a2:	4628      	mov	r0, r5
 800d7a4:	f00b ff33 	bl	801960e <memcpy>
 800d7a8:	68a1      	ldr	r1, [r4, #8]
 800d7aa:	4652      	mov	r2, sl
 800d7ac:	19e8      	adds	r0, r5, r7
 800d7ae:	f00b ff2e 	bl	801960e <memcpy>
 800d7b2:	e7b8      	b.n	800d726 <ucdr_deserialize_endian_uint16_t+0x5e>

0800d7b4 <ucdr_serialize_uint32_t>:
 800d7b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7b8:	b082      	sub	sp, #8
 800d7ba:	4604      	mov	r4, r0
 800d7bc:	9101      	str	r1, [sp, #4]
 800d7be:	2104      	movs	r1, #4
 800d7c0:	f001 fb2e 	bl	800ee20 <ucdr_buffer_alignment>
 800d7c4:	4601      	mov	r1, r0
 800d7c6:	4620      	mov	r0, r4
 800d7c8:	7d67      	ldrb	r7, [r4, #21]
 800d7ca:	f001 fb6d 	bl	800eea8 <ucdr_advance_buffer>
 800d7ce:	2104      	movs	r1, #4
 800d7d0:	4620      	mov	r0, r4
 800d7d2:	f001 fac5 	bl	800ed60 <ucdr_check_buffer_available_for>
 800d7d6:	2800      	cmp	r0, #0
 800d7d8:	d139      	bne.n	800d84e <ucdr_serialize_uint32_t+0x9a>
 800d7da:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800d7de:	42ab      	cmp	r3, r5
 800d7e0:	d930      	bls.n	800d844 <ucdr_serialize_uint32_t+0x90>
 800d7e2:	1b5e      	subs	r6, r3, r5
 800d7e4:	60a3      	str	r3, [r4, #8]
 800d7e6:	6923      	ldr	r3, [r4, #16]
 800d7e8:	f1c6 0804 	rsb	r8, r6, #4
 800d7ec:	4433      	add	r3, r6
 800d7ee:	6123      	str	r3, [r4, #16]
 800d7f0:	4641      	mov	r1, r8
 800d7f2:	4620      	mov	r0, r4
 800d7f4:	f001 fac0 	bl	800ed78 <ucdr_check_final_buffer_behavior>
 800d7f8:	2800      	cmp	r0, #0
 800d7fa:	d04c      	beq.n	800d896 <ucdr_serialize_uint32_t+0xe2>
 800d7fc:	7d23      	ldrb	r3, [r4, #20]
 800d7fe:	2b01      	cmp	r3, #1
 800d800:	d063      	beq.n	800d8ca <ucdr_serialize_uint32_t+0x116>
 800d802:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d806:	702b      	strb	r3, [r5, #0]
 800d808:	2e00      	cmp	r6, #0
 800d80a:	d051      	beq.n	800d8b0 <ucdr_serialize_uint32_t+0xfc>
 800d80c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d810:	706b      	strb	r3, [r5, #1]
 800d812:	2e01      	cmp	r6, #1
 800d814:	d050      	beq.n	800d8b8 <ucdr_serialize_uint32_t+0x104>
 800d816:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800d81a:	70ab      	strb	r3, [r5, #2]
 800d81c:	2e02      	cmp	r6, #2
 800d81e:	d04f      	beq.n	800d8c0 <ucdr_serialize_uint32_t+0x10c>
 800d820:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800d824:	70eb      	strb	r3, [r5, #3]
 800d826:	6923      	ldr	r3, [r4, #16]
 800d828:	68a2      	ldr	r2, [r4, #8]
 800d82a:	7da0      	ldrb	r0, [r4, #22]
 800d82c:	3304      	adds	r3, #4
 800d82e:	1b9e      	subs	r6, r3, r6
 800d830:	4442      	add	r2, r8
 800d832:	2304      	movs	r3, #4
 800d834:	f080 0001 	eor.w	r0, r0, #1
 800d838:	60a2      	str	r2, [r4, #8]
 800d83a:	6126      	str	r6, [r4, #16]
 800d83c:	7563      	strb	r3, [r4, #21]
 800d83e:	b002      	add	sp, #8
 800d840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d844:	2104      	movs	r1, #4
 800d846:	4620      	mov	r0, r4
 800d848:	f001 fa96 	bl	800ed78 <ucdr_check_final_buffer_behavior>
 800d84c:	b1d0      	cbz	r0, 800d884 <ucdr_serialize_uint32_t+0xd0>
 800d84e:	7d23      	ldrb	r3, [r4, #20]
 800d850:	2b01      	cmp	r3, #1
 800d852:	68a3      	ldr	r3, [r4, #8]
 800d854:	d01c      	beq.n	800d890 <ucdr_serialize_uint32_t+0xdc>
 800d856:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800d85a:	701a      	strb	r2, [r3, #0]
 800d85c:	68a3      	ldr	r3, [r4, #8]
 800d85e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d862:	705a      	strb	r2, [r3, #1]
 800d864:	68a3      	ldr	r3, [r4, #8]
 800d866:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d86a:	709a      	strb	r2, [r3, #2]
 800d86c:	68a3      	ldr	r3, [r4, #8]
 800d86e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d872:	70da      	strb	r2, [r3, #3]
 800d874:	68a2      	ldr	r2, [r4, #8]
 800d876:	6923      	ldr	r3, [r4, #16]
 800d878:	3204      	adds	r2, #4
 800d87a:	3304      	adds	r3, #4
 800d87c:	2104      	movs	r1, #4
 800d87e:	60a2      	str	r2, [r4, #8]
 800d880:	6123      	str	r3, [r4, #16]
 800d882:	7561      	strb	r1, [r4, #21]
 800d884:	7da0      	ldrb	r0, [r4, #22]
 800d886:	f080 0001 	eor.w	r0, r0, #1
 800d88a:	b002      	add	sp, #8
 800d88c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d890:	9a01      	ldr	r2, [sp, #4]
 800d892:	601a      	str	r2, [r3, #0]
 800d894:	e7ee      	b.n	800d874 <ucdr_serialize_uint32_t+0xc0>
 800d896:	68a2      	ldr	r2, [r4, #8]
 800d898:	6923      	ldr	r3, [r4, #16]
 800d89a:	7da0      	ldrb	r0, [r4, #22]
 800d89c:	7567      	strb	r7, [r4, #21]
 800d89e:	1b92      	subs	r2, r2, r6
 800d8a0:	1b9b      	subs	r3, r3, r6
 800d8a2:	f080 0001 	eor.w	r0, r0, #1
 800d8a6:	60a2      	str	r2, [r4, #8]
 800d8a8:	6123      	str	r3, [r4, #16]
 800d8aa:	b002      	add	sp, #8
 800d8ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d8b0:	68a3      	ldr	r3, [r4, #8]
 800d8b2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d8b6:	701a      	strb	r2, [r3, #0]
 800d8b8:	68a3      	ldr	r3, [r4, #8]
 800d8ba:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d8be:	701a      	strb	r2, [r3, #0]
 800d8c0:	68a3      	ldr	r3, [r4, #8]
 800d8c2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d8c6:	701a      	strb	r2, [r3, #0]
 800d8c8:	e7ad      	b.n	800d826 <ucdr_serialize_uint32_t+0x72>
 800d8ca:	4628      	mov	r0, r5
 800d8cc:	ad01      	add	r5, sp, #4
 800d8ce:	4629      	mov	r1, r5
 800d8d0:	4632      	mov	r2, r6
 800d8d2:	f00b fe9c 	bl	801960e <memcpy>
 800d8d6:	68a0      	ldr	r0, [r4, #8]
 800d8d8:	4642      	mov	r2, r8
 800d8da:	19a9      	adds	r1, r5, r6
 800d8dc:	f00b fe97 	bl	801960e <memcpy>
 800d8e0:	e7a1      	b.n	800d826 <ucdr_serialize_uint32_t+0x72>
 800d8e2:	bf00      	nop

0800d8e4 <ucdr_serialize_endian_uint32_t>:
 800d8e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d8e8:	b083      	sub	sp, #12
 800d8ea:	460d      	mov	r5, r1
 800d8ec:	2104      	movs	r1, #4
 800d8ee:	4604      	mov	r4, r0
 800d8f0:	9201      	str	r2, [sp, #4]
 800d8f2:	f001 fa95 	bl	800ee20 <ucdr_buffer_alignment>
 800d8f6:	4601      	mov	r1, r0
 800d8f8:	4620      	mov	r0, r4
 800d8fa:	f894 8015 	ldrb.w	r8, [r4, #21]
 800d8fe:	f001 fad3 	bl	800eea8 <ucdr_advance_buffer>
 800d902:	2104      	movs	r1, #4
 800d904:	4620      	mov	r0, r4
 800d906:	f001 fa2b 	bl	800ed60 <ucdr_check_buffer_available_for>
 800d90a:	2800      	cmp	r0, #0
 800d90c:	d138      	bne.n	800d980 <ucdr_serialize_endian_uint32_t+0x9c>
 800d90e:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800d912:	42b7      	cmp	r7, r6
 800d914:	d92f      	bls.n	800d976 <ucdr_serialize_endian_uint32_t+0x92>
 800d916:	6923      	ldr	r3, [r4, #16]
 800d918:	60a7      	str	r7, [r4, #8]
 800d91a:	1bbf      	subs	r7, r7, r6
 800d91c:	443b      	add	r3, r7
 800d91e:	f1c7 0904 	rsb	r9, r7, #4
 800d922:	6123      	str	r3, [r4, #16]
 800d924:	4649      	mov	r1, r9
 800d926:	4620      	mov	r0, r4
 800d928:	f001 fa26 	bl	800ed78 <ucdr_check_final_buffer_behavior>
 800d92c:	2800      	cmp	r0, #0
 800d92e:	d04a      	beq.n	800d9c6 <ucdr_serialize_endian_uint32_t+0xe2>
 800d930:	2d01      	cmp	r5, #1
 800d932:	d063      	beq.n	800d9fc <ucdr_serialize_endian_uint32_t+0x118>
 800d934:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d938:	7033      	strb	r3, [r6, #0]
 800d93a:	2f00      	cmp	r7, #0
 800d93c:	d051      	beq.n	800d9e2 <ucdr_serialize_endian_uint32_t+0xfe>
 800d93e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d942:	7073      	strb	r3, [r6, #1]
 800d944:	2f01      	cmp	r7, #1
 800d946:	d050      	beq.n	800d9ea <ucdr_serialize_endian_uint32_t+0x106>
 800d948:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800d94c:	70b3      	strb	r3, [r6, #2]
 800d94e:	2f02      	cmp	r7, #2
 800d950:	d04f      	beq.n	800d9f2 <ucdr_serialize_endian_uint32_t+0x10e>
 800d952:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800d956:	70f3      	strb	r3, [r6, #3]
 800d958:	6923      	ldr	r3, [r4, #16]
 800d95a:	68a2      	ldr	r2, [r4, #8]
 800d95c:	7da0      	ldrb	r0, [r4, #22]
 800d95e:	3304      	adds	r3, #4
 800d960:	444a      	add	r2, r9
 800d962:	1bdb      	subs	r3, r3, r7
 800d964:	2104      	movs	r1, #4
 800d966:	f080 0001 	eor.w	r0, r0, #1
 800d96a:	60a2      	str	r2, [r4, #8]
 800d96c:	6123      	str	r3, [r4, #16]
 800d96e:	7561      	strb	r1, [r4, #21]
 800d970:	b003      	add	sp, #12
 800d972:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d976:	2104      	movs	r1, #4
 800d978:	4620      	mov	r0, r4
 800d97a:	f001 f9fd 	bl	800ed78 <ucdr_check_final_buffer_behavior>
 800d97e:	b1c8      	cbz	r0, 800d9b4 <ucdr_serialize_endian_uint32_t+0xd0>
 800d980:	2d01      	cmp	r5, #1
 800d982:	68a3      	ldr	r3, [r4, #8]
 800d984:	d01c      	beq.n	800d9c0 <ucdr_serialize_endian_uint32_t+0xdc>
 800d986:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800d98a:	701a      	strb	r2, [r3, #0]
 800d98c:	68a3      	ldr	r3, [r4, #8]
 800d98e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d992:	705a      	strb	r2, [r3, #1]
 800d994:	68a3      	ldr	r3, [r4, #8]
 800d996:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d99a:	709a      	strb	r2, [r3, #2]
 800d99c:	68a3      	ldr	r3, [r4, #8]
 800d99e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d9a2:	70da      	strb	r2, [r3, #3]
 800d9a4:	68a2      	ldr	r2, [r4, #8]
 800d9a6:	6923      	ldr	r3, [r4, #16]
 800d9a8:	3204      	adds	r2, #4
 800d9aa:	3304      	adds	r3, #4
 800d9ac:	2104      	movs	r1, #4
 800d9ae:	60a2      	str	r2, [r4, #8]
 800d9b0:	6123      	str	r3, [r4, #16]
 800d9b2:	7561      	strb	r1, [r4, #21]
 800d9b4:	7da0      	ldrb	r0, [r4, #22]
 800d9b6:	f080 0001 	eor.w	r0, r0, #1
 800d9ba:	b003      	add	sp, #12
 800d9bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d9c0:	9a01      	ldr	r2, [sp, #4]
 800d9c2:	601a      	str	r2, [r3, #0]
 800d9c4:	e7ee      	b.n	800d9a4 <ucdr_serialize_endian_uint32_t+0xc0>
 800d9c6:	68a2      	ldr	r2, [r4, #8]
 800d9c8:	6923      	ldr	r3, [r4, #16]
 800d9ca:	7da0      	ldrb	r0, [r4, #22]
 800d9cc:	f884 8015 	strb.w	r8, [r4, #21]
 800d9d0:	1bd2      	subs	r2, r2, r7
 800d9d2:	1bdb      	subs	r3, r3, r7
 800d9d4:	f080 0001 	eor.w	r0, r0, #1
 800d9d8:	60a2      	str	r2, [r4, #8]
 800d9da:	6123      	str	r3, [r4, #16]
 800d9dc:	b003      	add	sp, #12
 800d9de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d9e2:	68a3      	ldr	r3, [r4, #8]
 800d9e4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d9e8:	701a      	strb	r2, [r3, #0]
 800d9ea:	68a3      	ldr	r3, [r4, #8]
 800d9ec:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d9f0:	701a      	strb	r2, [r3, #0]
 800d9f2:	68a3      	ldr	r3, [r4, #8]
 800d9f4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d9f8:	701a      	strb	r2, [r3, #0]
 800d9fa:	e7ad      	b.n	800d958 <ucdr_serialize_endian_uint32_t+0x74>
 800d9fc:	ad01      	add	r5, sp, #4
 800d9fe:	4629      	mov	r1, r5
 800da00:	463a      	mov	r2, r7
 800da02:	4630      	mov	r0, r6
 800da04:	f00b fe03 	bl	801960e <memcpy>
 800da08:	68a0      	ldr	r0, [r4, #8]
 800da0a:	464a      	mov	r2, r9
 800da0c:	19e9      	adds	r1, r5, r7
 800da0e:	f00b fdfe 	bl	801960e <memcpy>
 800da12:	e7a1      	b.n	800d958 <ucdr_serialize_endian_uint32_t+0x74>

0800da14 <ucdr_deserialize_uint32_t>:
 800da14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800da18:	460d      	mov	r5, r1
 800da1a:	2104      	movs	r1, #4
 800da1c:	4604      	mov	r4, r0
 800da1e:	f001 f9ff 	bl	800ee20 <ucdr_buffer_alignment>
 800da22:	4601      	mov	r1, r0
 800da24:	4620      	mov	r0, r4
 800da26:	f894 8015 	ldrb.w	r8, [r4, #21]
 800da2a:	f001 fa3d 	bl	800eea8 <ucdr_advance_buffer>
 800da2e:	2104      	movs	r1, #4
 800da30:	4620      	mov	r0, r4
 800da32:	f001 f995 	bl	800ed60 <ucdr_check_buffer_available_for>
 800da36:	2800      	cmp	r0, #0
 800da38:	d138      	bne.n	800daac <ucdr_deserialize_uint32_t+0x98>
 800da3a:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800da3e:	42b7      	cmp	r7, r6
 800da40:	d92f      	bls.n	800daa2 <ucdr_deserialize_uint32_t+0x8e>
 800da42:	6923      	ldr	r3, [r4, #16]
 800da44:	60a7      	str	r7, [r4, #8]
 800da46:	1bbf      	subs	r7, r7, r6
 800da48:	443b      	add	r3, r7
 800da4a:	f1c7 0904 	rsb	r9, r7, #4
 800da4e:	6123      	str	r3, [r4, #16]
 800da50:	4649      	mov	r1, r9
 800da52:	4620      	mov	r0, r4
 800da54:	f001 f990 	bl	800ed78 <ucdr_check_final_buffer_behavior>
 800da58:	2800      	cmp	r0, #0
 800da5a:	d046      	beq.n	800daea <ucdr_deserialize_uint32_t+0xd6>
 800da5c:	7d23      	ldrb	r3, [r4, #20]
 800da5e:	2b01      	cmp	r3, #1
 800da60:	d05c      	beq.n	800db1c <ucdr_deserialize_uint32_t+0x108>
 800da62:	78f3      	ldrb	r3, [r6, #3]
 800da64:	702b      	strb	r3, [r5, #0]
 800da66:	2f00      	cmp	r7, #0
 800da68:	d04c      	beq.n	800db04 <ucdr_deserialize_uint32_t+0xf0>
 800da6a:	78b3      	ldrb	r3, [r6, #2]
 800da6c:	706b      	strb	r3, [r5, #1]
 800da6e:	2f01      	cmp	r7, #1
 800da70:	f105 0302 	add.w	r3, r5, #2
 800da74:	d04a      	beq.n	800db0c <ucdr_deserialize_uint32_t+0xf8>
 800da76:	7873      	ldrb	r3, [r6, #1]
 800da78:	70ab      	strb	r3, [r5, #2]
 800da7a:	2f02      	cmp	r7, #2
 800da7c:	f105 0303 	add.w	r3, r5, #3
 800da80:	d048      	beq.n	800db14 <ucdr_deserialize_uint32_t+0x100>
 800da82:	7833      	ldrb	r3, [r6, #0]
 800da84:	70eb      	strb	r3, [r5, #3]
 800da86:	6923      	ldr	r3, [r4, #16]
 800da88:	68a2      	ldr	r2, [r4, #8]
 800da8a:	7da0      	ldrb	r0, [r4, #22]
 800da8c:	2104      	movs	r1, #4
 800da8e:	3304      	adds	r3, #4
 800da90:	444a      	add	r2, r9
 800da92:	1bdb      	subs	r3, r3, r7
 800da94:	7561      	strb	r1, [r4, #21]
 800da96:	60a2      	str	r2, [r4, #8]
 800da98:	6123      	str	r3, [r4, #16]
 800da9a:	f080 0001 	eor.w	r0, r0, #1
 800da9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800daa2:	2104      	movs	r1, #4
 800daa4:	4620      	mov	r0, r4
 800daa6:	f001 f967 	bl	800ed78 <ucdr_check_final_buffer_behavior>
 800daaa:	b1b0      	cbz	r0, 800dada <ucdr_deserialize_uint32_t+0xc6>
 800daac:	7d23      	ldrb	r3, [r4, #20]
 800daae:	2b01      	cmp	r3, #1
 800dab0:	68a3      	ldr	r3, [r4, #8]
 800dab2:	d017      	beq.n	800dae4 <ucdr_deserialize_uint32_t+0xd0>
 800dab4:	78db      	ldrb	r3, [r3, #3]
 800dab6:	702b      	strb	r3, [r5, #0]
 800dab8:	68a3      	ldr	r3, [r4, #8]
 800daba:	789b      	ldrb	r3, [r3, #2]
 800dabc:	706b      	strb	r3, [r5, #1]
 800dabe:	68a3      	ldr	r3, [r4, #8]
 800dac0:	785b      	ldrb	r3, [r3, #1]
 800dac2:	70ab      	strb	r3, [r5, #2]
 800dac4:	68a3      	ldr	r3, [r4, #8]
 800dac6:	781b      	ldrb	r3, [r3, #0]
 800dac8:	70eb      	strb	r3, [r5, #3]
 800daca:	68a2      	ldr	r2, [r4, #8]
 800dacc:	6923      	ldr	r3, [r4, #16]
 800dace:	3204      	adds	r2, #4
 800dad0:	3304      	adds	r3, #4
 800dad2:	2104      	movs	r1, #4
 800dad4:	60a2      	str	r2, [r4, #8]
 800dad6:	6123      	str	r3, [r4, #16]
 800dad8:	7561      	strb	r1, [r4, #21]
 800dada:	7da0      	ldrb	r0, [r4, #22]
 800dadc:	f080 0001 	eor.w	r0, r0, #1
 800dae0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	602b      	str	r3, [r5, #0]
 800dae8:	e7ef      	b.n	800daca <ucdr_deserialize_uint32_t+0xb6>
 800daea:	68a2      	ldr	r2, [r4, #8]
 800daec:	6923      	ldr	r3, [r4, #16]
 800daee:	7da0      	ldrb	r0, [r4, #22]
 800daf0:	f884 8015 	strb.w	r8, [r4, #21]
 800daf4:	1bd2      	subs	r2, r2, r7
 800daf6:	1bdb      	subs	r3, r3, r7
 800daf8:	60a2      	str	r2, [r4, #8]
 800dafa:	6123      	str	r3, [r4, #16]
 800dafc:	f080 0001 	eor.w	r0, r0, #1
 800db00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db04:	68a3      	ldr	r3, [r4, #8]
 800db06:	789b      	ldrb	r3, [r3, #2]
 800db08:	706b      	strb	r3, [r5, #1]
 800db0a:	1cab      	adds	r3, r5, #2
 800db0c:	68a2      	ldr	r2, [r4, #8]
 800db0e:	7852      	ldrb	r2, [r2, #1]
 800db10:	f803 2b01 	strb.w	r2, [r3], #1
 800db14:	68a2      	ldr	r2, [r4, #8]
 800db16:	7812      	ldrb	r2, [r2, #0]
 800db18:	701a      	strb	r2, [r3, #0]
 800db1a:	e7b4      	b.n	800da86 <ucdr_deserialize_uint32_t+0x72>
 800db1c:	4631      	mov	r1, r6
 800db1e:	463a      	mov	r2, r7
 800db20:	4628      	mov	r0, r5
 800db22:	f00b fd74 	bl	801960e <memcpy>
 800db26:	68a1      	ldr	r1, [r4, #8]
 800db28:	464a      	mov	r2, r9
 800db2a:	19e8      	adds	r0, r5, r7
 800db2c:	f00b fd6f 	bl	801960e <memcpy>
 800db30:	e7a9      	b.n	800da86 <ucdr_deserialize_uint32_t+0x72>
 800db32:	bf00      	nop

0800db34 <ucdr_deserialize_endian_uint32_t>:
 800db34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db38:	460e      	mov	r6, r1
 800db3a:	2104      	movs	r1, #4
 800db3c:	4604      	mov	r4, r0
 800db3e:	4615      	mov	r5, r2
 800db40:	f001 f96e 	bl	800ee20 <ucdr_buffer_alignment>
 800db44:	4601      	mov	r1, r0
 800db46:	4620      	mov	r0, r4
 800db48:	f894 9015 	ldrb.w	r9, [r4, #21]
 800db4c:	f001 f9ac 	bl	800eea8 <ucdr_advance_buffer>
 800db50:	2104      	movs	r1, #4
 800db52:	4620      	mov	r0, r4
 800db54:	f001 f904 	bl	800ed60 <ucdr_check_buffer_available_for>
 800db58:	2800      	cmp	r0, #0
 800db5a:	d13c      	bne.n	800dbd6 <ucdr_deserialize_endian_uint32_t+0xa2>
 800db5c:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800db60:	42bb      	cmp	r3, r7
 800db62:	d933      	bls.n	800dbcc <ucdr_deserialize_endian_uint32_t+0x98>
 800db64:	eba3 0807 	sub.w	r8, r3, r7
 800db68:	60a3      	str	r3, [r4, #8]
 800db6a:	6923      	ldr	r3, [r4, #16]
 800db6c:	f1c8 0a04 	rsb	sl, r8, #4
 800db70:	4443      	add	r3, r8
 800db72:	6123      	str	r3, [r4, #16]
 800db74:	4651      	mov	r1, sl
 800db76:	4620      	mov	r0, r4
 800db78:	f001 f8fe 	bl	800ed78 <ucdr_check_final_buffer_behavior>
 800db7c:	2800      	cmp	r0, #0
 800db7e:	d048      	beq.n	800dc12 <ucdr_deserialize_endian_uint32_t+0xde>
 800db80:	2e01      	cmp	r6, #1
 800db82:	d061      	beq.n	800dc48 <ucdr_deserialize_endian_uint32_t+0x114>
 800db84:	78fb      	ldrb	r3, [r7, #3]
 800db86:	702b      	strb	r3, [r5, #0]
 800db88:	f1b8 0f00 	cmp.w	r8, #0
 800db8c:	d050      	beq.n	800dc30 <ucdr_deserialize_endian_uint32_t+0xfc>
 800db8e:	78bb      	ldrb	r3, [r7, #2]
 800db90:	706b      	strb	r3, [r5, #1]
 800db92:	f1b8 0f01 	cmp.w	r8, #1
 800db96:	f105 0302 	add.w	r3, r5, #2
 800db9a:	d04d      	beq.n	800dc38 <ucdr_deserialize_endian_uint32_t+0x104>
 800db9c:	787b      	ldrb	r3, [r7, #1]
 800db9e:	70ab      	strb	r3, [r5, #2]
 800dba0:	f1b8 0f02 	cmp.w	r8, #2
 800dba4:	f105 0303 	add.w	r3, r5, #3
 800dba8:	d04a      	beq.n	800dc40 <ucdr_deserialize_endian_uint32_t+0x10c>
 800dbaa:	783b      	ldrb	r3, [r7, #0]
 800dbac:	70eb      	strb	r3, [r5, #3]
 800dbae:	6923      	ldr	r3, [r4, #16]
 800dbb0:	68a2      	ldr	r2, [r4, #8]
 800dbb2:	7da0      	ldrb	r0, [r4, #22]
 800dbb4:	2104      	movs	r1, #4
 800dbb6:	3304      	adds	r3, #4
 800dbb8:	4452      	add	r2, sl
 800dbba:	eba3 0308 	sub.w	r3, r3, r8
 800dbbe:	7561      	strb	r1, [r4, #21]
 800dbc0:	60a2      	str	r2, [r4, #8]
 800dbc2:	6123      	str	r3, [r4, #16]
 800dbc4:	f080 0001 	eor.w	r0, r0, #1
 800dbc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dbcc:	2104      	movs	r1, #4
 800dbce:	4620      	mov	r0, r4
 800dbd0:	f001 f8d2 	bl	800ed78 <ucdr_check_final_buffer_behavior>
 800dbd4:	b1a8      	cbz	r0, 800dc02 <ucdr_deserialize_endian_uint32_t+0xce>
 800dbd6:	2e01      	cmp	r6, #1
 800dbd8:	68a3      	ldr	r3, [r4, #8]
 800dbda:	d017      	beq.n	800dc0c <ucdr_deserialize_endian_uint32_t+0xd8>
 800dbdc:	78db      	ldrb	r3, [r3, #3]
 800dbde:	702b      	strb	r3, [r5, #0]
 800dbe0:	68a3      	ldr	r3, [r4, #8]
 800dbe2:	789b      	ldrb	r3, [r3, #2]
 800dbe4:	706b      	strb	r3, [r5, #1]
 800dbe6:	68a3      	ldr	r3, [r4, #8]
 800dbe8:	785b      	ldrb	r3, [r3, #1]
 800dbea:	70ab      	strb	r3, [r5, #2]
 800dbec:	68a3      	ldr	r3, [r4, #8]
 800dbee:	781b      	ldrb	r3, [r3, #0]
 800dbf0:	70eb      	strb	r3, [r5, #3]
 800dbf2:	68a2      	ldr	r2, [r4, #8]
 800dbf4:	6923      	ldr	r3, [r4, #16]
 800dbf6:	3204      	adds	r2, #4
 800dbf8:	3304      	adds	r3, #4
 800dbfa:	2104      	movs	r1, #4
 800dbfc:	60a2      	str	r2, [r4, #8]
 800dbfe:	6123      	str	r3, [r4, #16]
 800dc00:	7561      	strb	r1, [r4, #21]
 800dc02:	7da0      	ldrb	r0, [r4, #22]
 800dc04:	f080 0001 	eor.w	r0, r0, #1
 800dc08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	602b      	str	r3, [r5, #0]
 800dc10:	e7ef      	b.n	800dbf2 <ucdr_deserialize_endian_uint32_t+0xbe>
 800dc12:	68a2      	ldr	r2, [r4, #8]
 800dc14:	6923      	ldr	r3, [r4, #16]
 800dc16:	7da0      	ldrb	r0, [r4, #22]
 800dc18:	f884 9015 	strb.w	r9, [r4, #21]
 800dc1c:	eba2 0208 	sub.w	r2, r2, r8
 800dc20:	eba3 0308 	sub.w	r3, r3, r8
 800dc24:	60a2      	str	r2, [r4, #8]
 800dc26:	6123      	str	r3, [r4, #16]
 800dc28:	f080 0001 	eor.w	r0, r0, #1
 800dc2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc30:	68a3      	ldr	r3, [r4, #8]
 800dc32:	789b      	ldrb	r3, [r3, #2]
 800dc34:	706b      	strb	r3, [r5, #1]
 800dc36:	1cab      	adds	r3, r5, #2
 800dc38:	68a2      	ldr	r2, [r4, #8]
 800dc3a:	7852      	ldrb	r2, [r2, #1]
 800dc3c:	f803 2b01 	strb.w	r2, [r3], #1
 800dc40:	68a2      	ldr	r2, [r4, #8]
 800dc42:	7812      	ldrb	r2, [r2, #0]
 800dc44:	701a      	strb	r2, [r3, #0]
 800dc46:	e7b2      	b.n	800dbae <ucdr_deserialize_endian_uint32_t+0x7a>
 800dc48:	4639      	mov	r1, r7
 800dc4a:	4642      	mov	r2, r8
 800dc4c:	4628      	mov	r0, r5
 800dc4e:	f00b fcde 	bl	801960e <memcpy>
 800dc52:	68a1      	ldr	r1, [r4, #8]
 800dc54:	4652      	mov	r2, sl
 800dc56:	eb05 0008 	add.w	r0, r5, r8
 800dc5a:	f00b fcd8 	bl	801960e <memcpy>
 800dc5e:	e7a6      	b.n	800dbae <ucdr_deserialize_endian_uint32_t+0x7a>

0800dc60 <ucdr_serialize_uint64_t>:
 800dc60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc64:	2108      	movs	r1, #8
 800dc66:	b082      	sub	sp, #8
 800dc68:	4604      	mov	r4, r0
 800dc6a:	e9cd 2300 	strd	r2, r3, [sp]
 800dc6e:	f001 f8d7 	bl	800ee20 <ucdr_buffer_alignment>
 800dc72:	4601      	mov	r1, r0
 800dc74:	4620      	mov	r0, r4
 800dc76:	7d67      	ldrb	r7, [r4, #21]
 800dc78:	f001 f916 	bl	800eea8 <ucdr_advance_buffer>
 800dc7c:	2108      	movs	r1, #8
 800dc7e:	4620      	mov	r0, r4
 800dc80:	f001 f86e 	bl	800ed60 <ucdr_check_buffer_available_for>
 800dc84:	2800      	cmp	r0, #0
 800dc86:	d14e      	bne.n	800dd26 <ucdr_serialize_uint64_t+0xc6>
 800dc88:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800dc8c:	42ab      	cmp	r3, r5
 800dc8e:	d945      	bls.n	800dd1c <ucdr_serialize_uint64_t+0xbc>
 800dc90:	1b5e      	subs	r6, r3, r5
 800dc92:	60a3      	str	r3, [r4, #8]
 800dc94:	6923      	ldr	r3, [r4, #16]
 800dc96:	f1c6 0808 	rsb	r8, r6, #8
 800dc9a:	4433      	add	r3, r6
 800dc9c:	6123      	str	r3, [r4, #16]
 800dc9e:	4641      	mov	r1, r8
 800dca0:	4620      	mov	r0, r4
 800dca2:	f001 f869 	bl	800ed78 <ucdr_check_final_buffer_behavior>
 800dca6:	2800      	cmp	r0, #0
 800dca8:	d074      	beq.n	800dd94 <ucdr_serialize_uint64_t+0x134>
 800dcaa:	7d23      	ldrb	r3, [r4, #20]
 800dcac:	2b01      	cmp	r3, #1
 800dcae:	f000 809b 	beq.w	800dde8 <ucdr_serialize_uint64_t+0x188>
 800dcb2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800dcb6:	702b      	strb	r3, [r5, #0]
 800dcb8:	2e00      	cmp	r6, #0
 800dcba:	d078      	beq.n	800ddae <ucdr_serialize_uint64_t+0x14e>
 800dcbc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800dcc0:	706b      	strb	r3, [r5, #1]
 800dcc2:	2e01      	cmp	r6, #1
 800dcc4:	d077      	beq.n	800ddb6 <ucdr_serialize_uint64_t+0x156>
 800dcc6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800dcca:	70ab      	strb	r3, [r5, #2]
 800dccc:	2e02      	cmp	r6, #2
 800dcce:	d076      	beq.n	800ddbe <ucdr_serialize_uint64_t+0x15e>
 800dcd0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800dcd4:	70eb      	strb	r3, [r5, #3]
 800dcd6:	2e03      	cmp	r6, #3
 800dcd8:	d075      	beq.n	800ddc6 <ucdr_serialize_uint64_t+0x166>
 800dcda:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800dcde:	712b      	strb	r3, [r5, #4]
 800dce0:	2e04      	cmp	r6, #4
 800dce2:	d074      	beq.n	800ddce <ucdr_serialize_uint64_t+0x16e>
 800dce4:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800dce8:	716b      	strb	r3, [r5, #5]
 800dcea:	2e05      	cmp	r6, #5
 800dcec:	d073      	beq.n	800ddd6 <ucdr_serialize_uint64_t+0x176>
 800dcee:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800dcf2:	71ab      	strb	r3, [r5, #6]
 800dcf4:	2e06      	cmp	r6, #6
 800dcf6:	d072      	beq.n	800ddde <ucdr_serialize_uint64_t+0x17e>
 800dcf8:	f89d 3000 	ldrb.w	r3, [sp]
 800dcfc:	71eb      	strb	r3, [r5, #7]
 800dcfe:	6923      	ldr	r3, [r4, #16]
 800dd00:	68a2      	ldr	r2, [r4, #8]
 800dd02:	7da0      	ldrb	r0, [r4, #22]
 800dd04:	3308      	adds	r3, #8
 800dd06:	1b9e      	subs	r6, r3, r6
 800dd08:	4442      	add	r2, r8
 800dd0a:	2308      	movs	r3, #8
 800dd0c:	f080 0001 	eor.w	r0, r0, #1
 800dd10:	60a2      	str	r2, [r4, #8]
 800dd12:	6126      	str	r6, [r4, #16]
 800dd14:	7563      	strb	r3, [r4, #21]
 800dd16:	b002      	add	sp, #8
 800dd18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd1c:	2108      	movs	r1, #8
 800dd1e:	4620      	mov	r0, r4
 800dd20:	f001 f82a 	bl	800ed78 <ucdr_check_final_buffer_behavior>
 800dd24:	b350      	cbz	r0, 800dd7c <ucdr_serialize_uint64_t+0x11c>
 800dd26:	7d23      	ldrb	r3, [r4, #20]
 800dd28:	2b01      	cmp	r3, #1
 800dd2a:	d02d      	beq.n	800dd88 <ucdr_serialize_uint64_t+0x128>
 800dd2c:	68a3      	ldr	r3, [r4, #8]
 800dd2e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800dd32:	701a      	strb	r2, [r3, #0]
 800dd34:	68a3      	ldr	r3, [r4, #8]
 800dd36:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800dd3a:	705a      	strb	r2, [r3, #1]
 800dd3c:	68a3      	ldr	r3, [r4, #8]
 800dd3e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800dd42:	709a      	strb	r2, [r3, #2]
 800dd44:	68a3      	ldr	r3, [r4, #8]
 800dd46:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800dd4a:	70da      	strb	r2, [r3, #3]
 800dd4c:	68a3      	ldr	r3, [r4, #8]
 800dd4e:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800dd52:	711a      	strb	r2, [r3, #4]
 800dd54:	68a3      	ldr	r3, [r4, #8]
 800dd56:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800dd5a:	715a      	strb	r2, [r3, #5]
 800dd5c:	68a3      	ldr	r3, [r4, #8]
 800dd5e:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800dd62:	719a      	strb	r2, [r3, #6]
 800dd64:	68a3      	ldr	r3, [r4, #8]
 800dd66:	f89d 2000 	ldrb.w	r2, [sp]
 800dd6a:	71da      	strb	r2, [r3, #7]
 800dd6c:	68a2      	ldr	r2, [r4, #8]
 800dd6e:	6923      	ldr	r3, [r4, #16]
 800dd70:	3208      	adds	r2, #8
 800dd72:	3308      	adds	r3, #8
 800dd74:	2108      	movs	r1, #8
 800dd76:	60a2      	str	r2, [r4, #8]
 800dd78:	6123      	str	r3, [r4, #16]
 800dd7a:	7561      	strb	r1, [r4, #21]
 800dd7c:	7da0      	ldrb	r0, [r4, #22]
 800dd7e:	f080 0001 	eor.w	r0, r0, #1
 800dd82:	b002      	add	sp, #8
 800dd84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd88:	466b      	mov	r3, sp
 800dd8a:	cb03      	ldmia	r3!, {r0, r1}
 800dd8c:	68a3      	ldr	r3, [r4, #8]
 800dd8e:	6018      	str	r0, [r3, #0]
 800dd90:	6059      	str	r1, [r3, #4]
 800dd92:	e7eb      	b.n	800dd6c <ucdr_serialize_uint64_t+0x10c>
 800dd94:	68a2      	ldr	r2, [r4, #8]
 800dd96:	6923      	ldr	r3, [r4, #16]
 800dd98:	7da0      	ldrb	r0, [r4, #22]
 800dd9a:	7567      	strb	r7, [r4, #21]
 800dd9c:	1b92      	subs	r2, r2, r6
 800dd9e:	1b9b      	subs	r3, r3, r6
 800dda0:	f080 0001 	eor.w	r0, r0, #1
 800dda4:	60a2      	str	r2, [r4, #8]
 800dda6:	6123      	str	r3, [r4, #16]
 800dda8:	b002      	add	sp, #8
 800ddaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ddae:	68a3      	ldr	r3, [r4, #8]
 800ddb0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ddb4:	701a      	strb	r2, [r3, #0]
 800ddb6:	68a3      	ldr	r3, [r4, #8]
 800ddb8:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ddbc:	701a      	strb	r2, [r3, #0]
 800ddbe:	68a3      	ldr	r3, [r4, #8]
 800ddc0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ddc4:	701a      	strb	r2, [r3, #0]
 800ddc6:	68a3      	ldr	r3, [r4, #8]
 800ddc8:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800ddcc:	701a      	strb	r2, [r3, #0]
 800ddce:	68a3      	ldr	r3, [r4, #8]
 800ddd0:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800ddd4:	701a      	strb	r2, [r3, #0]
 800ddd6:	68a3      	ldr	r3, [r4, #8]
 800ddd8:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800dddc:	701a      	strb	r2, [r3, #0]
 800ddde:	68a3      	ldr	r3, [r4, #8]
 800dde0:	f89d 2000 	ldrb.w	r2, [sp]
 800dde4:	701a      	strb	r2, [r3, #0]
 800dde6:	e78a      	b.n	800dcfe <ucdr_serialize_uint64_t+0x9e>
 800dde8:	4628      	mov	r0, r5
 800ddea:	466d      	mov	r5, sp
 800ddec:	4629      	mov	r1, r5
 800ddee:	4632      	mov	r2, r6
 800ddf0:	f00b fc0d 	bl	801960e <memcpy>
 800ddf4:	68a0      	ldr	r0, [r4, #8]
 800ddf6:	4642      	mov	r2, r8
 800ddf8:	19a9      	adds	r1, r5, r6
 800ddfa:	f00b fc08 	bl	801960e <memcpy>
 800ddfe:	e77e      	b.n	800dcfe <ucdr_serialize_uint64_t+0x9e>

0800de00 <ucdr_serialize_int16_t>:
 800de00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de04:	b082      	sub	sp, #8
 800de06:	460b      	mov	r3, r1
 800de08:	2102      	movs	r1, #2
 800de0a:	4604      	mov	r4, r0
 800de0c:	f8ad 3006 	strh.w	r3, [sp, #6]
 800de10:	f001 f806 	bl	800ee20 <ucdr_buffer_alignment>
 800de14:	4601      	mov	r1, r0
 800de16:	4620      	mov	r0, r4
 800de18:	7d67      	ldrb	r7, [r4, #21]
 800de1a:	f001 f845 	bl	800eea8 <ucdr_advance_buffer>
 800de1e:	2102      	movs	r1, #2
 800de20:	4620      	mov	r0, r4
 800de22:	f000 ff9d 	bl	800ed60 <ucdr_check_buffer_available_for>
 800de26:	bb78      	cbnz	r0, 800de88 <ucdr_serialize_int16_t+0x88>
 800de28:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800de2c:	42ab      	cmp	r3, r5
 800de2e:	d926      	bls.n	800de7e <ucdr_serialize_int16_t+0x7e>
 800de30:	1b5e      	subs	r6, r3, r5
 800de32:	60a3      	str	r3, [r4, #8]
 800de34:	6923      	ldr	r3, [r4, #16]
 800de36:	f1c6 0802 	rsb	r8, r6, #2
 800de3a:	4433      	add	r3, r6
 800de3c:	6123      	str	r3, [r4, #16]
 800de3e:	4641      	mov	r1, r8
 800de40:	4620      	mov	r0, r4
 800de42:	f000 ff99 	bl	800ed78 <ucdr_check_final_buffer_behavior>
 800de46:	2800      	cmp	r0, #0
 800de48:	d03b      	beq.n	800dec2 <ucdr_serialize_int16_t+0xc2>
 800de4a:	7d23      	ldrb	r3, [r4, #20]
 800de4c:	2b01      	cmp	r3, #1
 800de4e:	d04a      	beq.n	800dee6 <ucdr_serialize_int16_t+0xe6>
 800de50:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800de54:	702b      	strb	r3, [r5, #0]
 800de56:	2e00      	cmp	r6, #0
 800de58:	d040      	beq.n	800dedc <ucdr_serialize_int16_t+0xdc>
 800de5a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800de5e:	706b      	strb	r3, [r5, #1]
 800de60:	6923      	ldr	r3, [r4, #16]
 800de62:	68a2      	ldr	r2, [r4, #8]
 800de64:	7da0      	ldrb	r0, [r4, #22]
 800de66:	3302      	adds	r3, #2
 800de68:	1b9e      	subs	r6, r3, r6
 800de6a:	4442      	add	r2, r8
 800de6c:	2302      	movs	r3, #2
 800de6e:	f080 0001 	eor.w	r0, r0, #1
 800de72:	60a2      	str	r2, [r4, #8]
 800de74:	6126      	str	r6, [r4, #16]
 800de76:	7563      	strb	r3, [r4, #21]
 800de78:	b002      	add	sp, #8
 800de7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de7e:	2102      	movs	r1, #2
 800de80:	4620      	mov	r0, r4
 800de82:	f000 ff79 	bl	800ed78 <ucdr_check_final_buffer_behavior>
 800de86:	b190      	cbz	r0, 800deae <ucdr_serialize_int16_t+0xae>
 800de88:	7d23      	ldrb	r3, [r4, #20]
 800de8a:	2b01      	cmp	r3, #1
 800de8c:	68a3      	ldr	r3, [r4, #8]
 800de8e:	d014      	beq.n	800deba <ucdr_serialize_int16_t+0xba>
 800de90:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800de94:	701a      	strb	r2, [r3, #0]
 800de96:	68a3      	ldr	r3, [r4, #8]
 800de98:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800de9c:	705a      	strb	r2, [r3, #1]
 800de9e:	68a2      	ldr	r2, [r4, #8]
 800dea0:	6923      	ldr	r3, [r4, #16]
 800dea2:	3202      	adds	r2, #2
 800dea4:	3302      	adds	r3, #2
 800dea6:	2102      	movs	r1, #2
 800dea8:	60a2      	str	r2, [r4, #8]
 800deaa:	6123      	str	r3, [r4, #16]
 800deac:	7561      	strb	r1, [r4, #21]
 800deae:	7da0      	ldrb	r0, [r4, #22]
 800deb0:	f080 0001 	eor.w	r0, r0, #1
 800deb4:	b002      	add	sp, #8
 800deb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800deba:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800debe:	801a      	strh	r2, [r3, #0]
 800dec0:	e7ed      	b.n	800de9e <ucdr_serialize_int16_t+0x9e>
 800dec2:	68a2      	ldr	r2, [r4, #8]
 800dec4:	6923      	ldr	r3, [r4, #16]
 800dec6:	7da0      	ldrb	r0, [r4, #22]
 800dec8:	7567      	strb	r7, [r4, #21]
 800deca:	1b92      	subs	r2, r2, r6
 800decc:	1b9b      	subs	r3, r3, r6
 800dece:	f080 0001 	eor.w	r0, r0, #1
 800ded2:	60a2      	str	r2, [r4, #8]
 800ded4:	6123      	str	r3, [r4, #16]
 800ded6:	b002      	add	sp, #8
 800ded8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dedc:	68a3      	ldr	r3, [r4, #8]
 800dede:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800dee2:	701a      	strb	r2, [r3, #0]
 800dee4:	e7bc      	b.n	800de60 <ucdr_serialize_int16_t+0x60>
 800dee6:	4628      	mov	r0, r5
 800dee8:	f10d 0506 	add.w	r5, sp, #6
 800deec:	4629      	mov	r1, r5
 800deee:	4632      	mov	r2, r6
 800def0:	f00b fb8d 	bl	801960e <memcpy>
 800def4:	68a0      	ldr	r0, [r4, #8]
 800def6:	4642      	mov	r2, r8
 800def8:	19a9      	adds	r1, r5, r6
 800defa:	f00b fb88 	bl	801960e <memcpy>
 800defe:	e7af      	b.n	800de60 <ucdr_serialize_int16_t+0x60>

0800df00 <ucdr_deserialize_int16_t>:
 800df00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800df04:	460d      	mov	r5, r1
 800df06:	2102      	movs	r1, #2
 800df08:	4604      	mov	r4, r0
 800df0a:	f000 ff89 	bl	800ee20 <ucdr_buffer_alignment>
 800df0e:	4601      	mov	r1, r0
 800df10:	4620      	mov	r0, r4
 800df12:	f894 8015 	ldrb.w	r8, [r4, #21]
 800df16:	f000 ffc7 	bl	800eea8 <ucdr_advance_buffer>
 800df1a:	2102      	movs	r1, #2
 800df1c:	4620      	mov	r0, r4
 800df1e:	f000 ff1f 	bl	800ed60 <ucdr_check_buffer_available_for>
 800df22:	bb60      	cbnz	r0, 800df7e <ucdr_deserialize_int16_t+0x7e>
 800df24:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800df28:	42be      	cmp	r6, r7
 800df2a:	d923      	bls.n	800df74 <ucdr_deserialize_int16_t+0x74>
 800df2c:	6923      	ldr	r3, [r4, #16]
 800df2e:	60a6      	str	r6, [r4, #8]
 800df30:	1bf6      	subs	r6, r6, r7
 800df32:	4433      	add	r3, r6
 800df34:	f1c6 0902 	rsb	r9, r6, #2
 800df38:	6123      	str	r3, [r4, #16]
 800df3a:	4649      	mov	r1, r9
 800df3c:	4620      	mov	r0, r4
 800df3e:	f000 ff1b 	bl	800ed78 <ucdr_check_final_buffer_behavior>
 800df42:	2800      	cmp	r0, #0
 800df44:	d034      	beq.n	800dfb0 <ucdr_deserialize_int16_t+0xb0>
 800df46:	7d23      	ldrb	r3, [r4, #20]
 800df48:	2b01      	cmp	r3, #1
 800df4a:	d042      	beq.n	800dfd2 <ucdr_deserialize_int16_t+0xd2>
 800df4c:	787b      	ldrb	r3, [r7, #1]
 800df4e:	702b      	strb	r3, [r5, #0]
 800df50:	2e00      	cmp	r6, #0
 800df52:	d03a      	beq.n	800dfca <ucdr_deserialize_int16_t+0xca>
 800df54:	783b      	ldrb	r3, [r7, #0]
 800df56:	706b      	strb	r3, [r5, #1]
 800df58:	6923      	ldr	r3, [r4, #16]
 800df5a:	68a2      	ldr	r2, [r4, #8]
 800df5c:	7da0      	ldrb	r0, [r4, #22]
 800df5e:	2102      	movs	r1, #2
 800df60:	3302      	adds	r3, #2
 800df62:	444a      	add	r2, r9
 800df64:	1b9b      	subs	r3, r3, r6
 800df66:	7561      	strb	r1, [r4, #21]
 800df68:	60a2      	str	r2, [r4, #8]
 800df6a:	6123      	str	r3, [r4, #16]
 800df6c:	f080 0001 	eor.w	r0, r0, #1
 800df70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800df74:	2102      	movs	r1, #2
 800df76:	4620      	mov	r0, r4
 800df78:	f000 fefe 	bl	800ed78 <ucdr_check_final_buffer_behavior>
 800df7c:	b180      	cbz	r0, 800dfa0 <ucdr_deserialize_int16_t+0xa0>
 800df7e:	7d23      	ldrb	r3, [r4, #20]
 800df80:	2b01      	cmp	r3, #1
 800df82:	68a3      	ldr	r3, [r4, #8]
 800df84:	d011      	beq.n	800dfaa <ucdr_deserialize_int16_t+0xaa>
 800df86:	785b      	ldrb	r3, [r3, #1]
 800df88:	702b      	strb	r3, [r5, #0]
 800df8a:	68a3      	ldr	r3, [r4, #8]
 800df8c:	781b      	ldrb	r3, [r3, #0]
 800df8e:	706b      	strb	r3, [r5, #1]
 800df90:	68a2      	ldr	r2, [r4, #8]
 800df92:	6923      	ldr	r3, [r4, #16]
 800df94:	3202      	adds	r2, #2
 800df96:	3302      	adds	r3, #2
 800df98:	2102      	movs	r1, #2
 800df9a:	60a2      	str	r2, [r4, #8]
 800df9c:	6123      	str	r3, [r4, #16]
 800df9e:	7561      	strb	r1, [r4, #21]
 800dfa0:	7da0      	ldrb	r0, [r4, #22]
 800dfa2:	f080 0001 	eor.w	r0, r0, #1
 800dfa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dfaa:	881b      	ldrh	r3, [r3, #0]
 800dfac:	802b      	strh	r3, [r5, #0]
 800dfae:	e7ef      	b.n	800df90 <ucdr_deserialize_int16_t+0x90>
 800dfb0:	68a2      	ldr	r2, [r4, #8]
 800dfb2:	6923      	ldr	r3, [r4, #16]
 800dfb4:	7da0      	ldrb	r0, [r4, #22]
 800dfb6:	f884 8015 	strb.w	r8, [r4, #21]
 800dfba:	1b92      	subs	r2, r2, r6
 800dfbc:	1b9b      	subs	r3, r3, r6
 800dfbe:	60a2      	str	r2, [r4, #8]
 800dfc0:	6123      	str	r3, [r4, #16]
 800dfc2:	f080 0001 	eor.w	r0, r0, #1
 800dfc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dfca:	68a3      	ldr	r3, [r4, #8]
 800dfcc:	781b      	ldrb	r3, [r3, #0]
 800dfce:	706b      	strb	r3, [r5, #1]
 800dfd0:	e7c2      	b.n	800df58 <ucdr_deserialize_int16_t+0x58>
 800dfd2:	4639      	mov	r1, r7
 800dfd4:	4632      	mov	r2, r6
 800dfd6:	4628      	mov	r0, r5
 800dfd8:	f00b fb19 	bl	801960e <memcpy>
 800dfdc:	68a1      	ldr	r1, [r4, #8]
 800dfde:	464a      	mov	r2, r9
 800dfe0:	19a8      	adds	r0, r5, r6
 800dfe2:	f00b fb14 	bl	801960e <memcpy>
 800dfe6:	e7b7      	b.n	800df58 <ucdr_deserialize_int16_t+0x58>

0800dfe8 <ucdr_serialize_int32_t>:
 800dfe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dfec:	b082      	sub	sp, #8
 800dfee:	4604      	mov	r4, r0
 800dff0:	9101      	str	r1, [sp, #4]
 800dff2:	2104      	movs	r1, #4
 800dff4:	f000 ff14 	bl	800ee20 <ucdr_buffer_alignment>
 800dff8:	4601      	mov	r1, r0
 800dffa:	4620      	mov	r0, r4
 800dffc:	7d67      	ldrb	r7, [r4, #21]
 800dffe:	f000 ff53 	bl	800eea8 <ucdr_advance_buffer>
 800e002:	2104      	movs	r1, #4
 800e004:	4620      	mov	r0, r4
 800e006:	f000 feab 	bl	800ed60 <ucdr_check_buffer_available_for>
 800e00a:	2800      	cmp	r0, #0
 800e00c:	d139      	bne.n	800e082 <ucdr_serialize_int32_t+0x9a>
 800e00e:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800e012:	42ab      	cmp	r3, r5
 800e014:	d930      	bls.n	800e078 <ucdr_serialize_int32_t+0x90>
 800e016:	1b5e      	subs	r6, r3, r5
 800e018:	60a3      	str	r3, [r4, #8]
 800e01a:	6923      	ldr	r3, [r4, #16]
 800e01c:	f1c6 0804 	rsb	r8, r6, #4
 800e020:	4433      	add	r3, r6
 800e022:	6123      	str	r3, [r4, #16]
 800e024:	4641      	mov	r1, r8
 800e026:	4620      	mov	r0, r4
 800e028:	f000 fea6 	bl	800ed78 <ucdr_check_final_buffer_behavior>
 800e02c:	2800      	cmp	r0, #0
 800e02e:	d04c      	beq.n	800e0ca <ucdr_serialize_int32_t+0xe2>
 800e030:	7d23      	ldrb	r3, [r4, #20]
 800e032:	2b01      	cmp	r3, #1
 800e034:	d063      	beq.n	800e0fe <ucdr_serialize_int32_t+0x116>
 800e036:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e03a:	702b      	strb	r3, [r5, #0]
 800e03c:	2e00      	cmp	r6, #0
 800e03e:	d051      	beq.n	800e0e4 <ucdr_serialize_int32_t+0xfc>
 800e040:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e044:	706b      	strb	r3, [r5, #1]
 800e046:	2e01      	cmp	r6, #1
 800e048:	d050      	beq.n	800e0ec <ucdr_serialize_int32_t+0x104>
 800e04a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800e04e:	70ab      	strb	r3, [r5, #2]
 800e050:	2e02      	cmp	r6, #2
 800e052:	d04f      	beq.n	800e0f4 <ucdr_serialize_int32_t+0x10c>
 800e054:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800e058:	70eb      	strb	r3, [r5, #3]
 800e05a:	6923      	ldr	r3, [r4, #16]
 800e05c:	68a2      	ldr	r2, [r4, #8]
 800e05e:	7da0      	ldrb	r0, [r4, #22]
 800e060:	3304      	adds	r3, #4
 800e062:	1b9e      	subs	r6, r3, r6
 800e064:	4442      	add	r2, r8
 800e066:	2304      	movs	r3, #4
 800e068:	f080 0001 	eor.w	r0, r0, #1
 800e06c:	60a2      	str	r2, [r4, #8]
 800e06e:	6126      	str	r6, [r4, #16]
 800e070:	7563      	strb	r3, [r4, #21]
 800e072:	b002      	add	sp, #8
 800e074:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e078:	2104      	movs	r1, #4
 800e07a:	4620      	mov	r0, r4
 800e07c:	f000 fe7c 	bl	800ed78 <ucdr_check_final_buffer_behavior>
 800e080:	b1d0      	cbz	r0, 800e0b8 <ucdr_serialize_int32_t+0xd0>
 800e082:	7d23      	ldrb	r3, [r4, #20]
 800e084:	2b01      	cmp	r3, #1
 800e086:	68a3      	ldr	r3, [r4, #8]
 800e088:	d01c      	beq.n	800e0c4 <ucdr_serialize_int32_t+0xdc>
 800e08a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800e08e:	701a      	strb	r2, [r3, #0]
 800e090:	68a3      	ldr	r3, [r4, #8]
 800e092:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e096:	705a      	strb	r2, [r3, #1]
 800e098:	68a3      	ldr	r3, [r4, #8]
 800e09a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800e09e:	709a      	strb	r2, [r3, #2]
 800e0a0:	68a3      	ldr	r3, [r4, #8]
 800e0a2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e0a6:	70da      	strb	r2, [r3, #3]
 800e0a8:	68a2      	ldr	r2, [r4, #8]
 800e0aa:	6923      	ldr	r3, [r4, #16]
 800e0ac:	3204      	adds	r2, #4
 800e0ae:	3304      	adds	r3, #4
 800e0b0:	2104      	movs	r1, #4
 800e0b2:	60a2      	str	r2, [r4, #8]
 800e0b4:	6123      	str	r3, [r4, #16]
 800e0b6:	7561      	strb	r1, [r4, #21]
 800e0b8:	7da0      	ldrb	r0, [r4, #22]
 800e0ba:	f080 0001 	eor.w	r0, r0, #1
 800e0be:	b002      	add	sp, #8
 800e0c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0c4:	9a01      	ldr	r2, [sp, #4]
 800e0c6:	601a      	str	r2, [r3, #0]
 800e0c8:	e7ee      	b.n	800e0a8 <ucdr_serialize_int32_t+0xc0>
 800e0ca:	68a2      	ldr	r2, [r4, #8]
 800e0cc:	6923      	ldr	r3, [r4, #16]
 800e0ce:	7da0      	ldrb	r0, [r4, #22]
 800e0d0:	7567      	strb	r7, [r4, #21]
 800e0d2:	1b92      	subs	r2, r2, r6
 800e0d4:	1b9b      	subs	r3, r3, r6
 800e0d6:	f080 0001 	eor.w	r0, r0, #1
 800e0da:	60a2      	str	r2, [r4, #8]
 800e0dc:	6123      	str	r3, [r4, #16]
 800e0de:	b002      	add	sp, #8
 800e0e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0e4:	68a3      	ldr	r3, [r4, #8]
 800e0e6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e0ea:	701a      	strb	r2, [r3, #0]
 800e0ec:	68a3      	ldr	r3, [r4, #8]
 800e0ee:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800e0f2:	701a      	strb	r2, [r3, #0]
 800e0f4:	68a3      	ldr	r3, [r4, #8]
 800e0f6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e0fa:	701a      	strb	r2, [r3, #0]
 800e0fc:	e7ad      	b.n	800e05a <ucdr_serialize_int32_t+0x72>
 800e0fe:	4628      	mov	r0, r5
 800e100:	ad01      	add	r5, sp, #4
 800e102:	4629      	mov	r1, r5
 800e104:	4632      	mov	r2, r6
 800e106:	f00b fa82 	bl	801960e <memcpy>
 800e10a:	68a0      	ldr	r0, [r4, #8]
 800e10c:	4642      	mov	r2, r8
 800e10e:	19a9      	adds	r1, r5, r6
 800e110:	f00b fa7d 	bl	801960e <memcpy>
 800e114:	e7a1      	b.n	800e05a <ucdr_serialize_int32_t+0x72>
 800e116:	bf00      	nop

0800e118 <ucdr_serialize_endian_int32_t>:
 800e118:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e11c:	b083      	sub	sp, #12
 800e11e:	460d      	mov	r5, r1
 800e120:	2104      	movs	r1, #4
 800e122:	4604      	mov	r4, r0
 800e124:	9201      	str	r2, [sp, #4]
 800e126:	f000 fe7b 	bl	800ee20 <ucdr_buffer_alignment>
 800e12a:	4601      	mov	r1, r0
 800e12c:	4620      	mov	r0, r4
 800e12e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800e132:	f000 feb9 	bl	800eea8 <ucdr_advance_buffer>
 800e136:	2104      	movs	r1, #4
 800e138:	4620      	mov	r0, r4
 800e13a:	f000 fe11 	bl	800ed60 <ucdr_check_buffer_available_for>
 800e13e:	2800      	cmp	r0, #0
 800e140:	d138      	bne.n	800e1b4 <ucdr_serialize_endian_int32_t+0x9c>
 800e142:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800e146:	42b7      	cmp	r7, r6
 800e148:	d92f      	bls.n	800e1aa <ucdr_serialize_endian_int32_t+0x92>
 800e14a:	6923      	ldr	r3, [r4, #16]
 800e14c:	60a7      	str	r7, [r4, #8]
 800e14e:	1bbf      	subs	r7, r7, r6
 800e150:	443b      	add	r3, r7
 800e152:	f1c7 0904 	rsb	r9, r7, #4
 800e156:	6123      	str	r3, [r4, #16]
 800e158:	4649      	mov	r1, r9
 800e15a:	4620      	mov	r0, r4
 800e15c:	f000 fe0c 	bl	800ed78 <ucdr_check_final_buffer_behavior>
 800e160:	2800      	cmp	r0, #0
 800e162:	d04a      	beq.n	800e1fa <ucdr_serialize_endian_int32_t+0xe2>
 800e164:	2d01      	cmp	r5, #1
 800e166:	d063      	beq.n	800e230 <ucdr_serialize_endian_int32_t+0x118>
 800e168:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e16c:	7033      	strb	r3, [r6, #0]
 800e16e:	2f00      	cmp	r7, #0
 800e170:	d051      	beq.n	800e216 <ucdr_serialize_endian_int32_t+0xfe>
 800e172:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e176:	7073      	strb	r3, [r6, #1]
 800e178:	2f01      	cmp	r7, #1
 800e17a:	d050      	beq.n	800e21e <ucdr_serialize_endian_int32_t+0x106>
 800e17c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800e180:	70b3      	strb	r3, [r6, #2]
 800e182:	2f02      	cmp	r7, #2
 800e184:	d04f      	beq.n	800e226 <ucdr_serialize_endian_int32_t+0x10e>
 800e186:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800e18a:	70f3      	strb	r3, [r6, #3]
 800e18c:	6923      	ldr	r3, [r4, #16]
 800e18e:	68a2      	ldr	r2, [r4, #8]
 800e190:	7da0      	ldrb	r0, [r4, #22]
 800e192:	3304      	adds	r3, #4
 800e194:	444a      	add	r2, r9
 800e196:	1bdb      	subs	r3, r3, r7
 800e198:	2104      	movs	r1, #4
 800e19a:	f080 0001 	eor.w	r0, r0, #1
 800e19e:	60a2      	str	r2, [r4, #8]
 800e1a0:	6123      	str	r3, [r4, #16]
 800e1a2:	7561      	strb	r1, [r4, #21]
 800e1a4:	b003      	add	sp, #12
 800e1a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e1aa:	2104      	movs	r1, #4
 800e1ac:	4620      	mov	r0, r4
 800e1ae:	f000 fde3 	bl	800ed78 <ucdr_check_final_buffer_behavior>
 800e1b2:	b1c8      	cbz	r0, 800e1e8 <ucdr_serialize_endian_int32_t+0xd0>
 800e1b4:	2d01      	cmp	r5, #1
 800e1b6:	68a3      	ldr	r3, [r4, #8]
 800e1b8:	d01c      	beq.n	800e1f4 <ucdr_serialize_endian_int32_t+0xdc>
 800e1ba:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800e1be:	701a      	strb	r2, [r3, #0]
 800e1c0:	68a3      	ldr	r3, [r4, #8]
 800e1c2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e1c6:	705a      	strb	r2, [r3, #1]
 800e1c8:	68a3      	ldr	r3, [r4, #8]
 800e1ca:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800e1ce:	709a      	strb	r2, [r3, #2]
 800e1d0:	68a3      	ldr	r3, [r4, #8]
 800e1d2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e1d6:	70da      	strb	r2, [r3, #3]
 800e1d8:	68a2      	ldr	r2, [r4, #8]
 800e1da:	6923      	ldr	r3, [r4, #16]
 800e1dc:	3204      	adds	r2, #4
 800e1de:	3304      	adds	r3, #4
 800e1e0:	2104      	movs	r1, #4
 800e1e2:	60a2      	str	r2, [r4, #8]
 800e1e4:	6123      	str	r3, [r4, #16]
 800e1e6:	7561      	strb	r1, [r4, #21]
 800e1e8:	7da0      	ldrb	r0, [r4, #22]
 800e1ea:	f080 0001 	eor.w	r0, r0, #1
 800e1ee:	b003      	add	sp, #12
 800e1f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e1f4:	9a01      	ldr	r2, [sp, #4]
 800e1f6:	601a      	str	r2, [r3, #0]
 800e1f8:	e7ee      	b.n	800e1d8 <ucdr_serialize_endian_int32_t+0xc0>
 800e1fa:	68a2      	ldr	r2, [r4, #8]
 800e1fc:	6923      	ldr	r3, [r4, #16]
 800e1fe:	7da0      	ldrb	r0, [r4, #22]
 800e200:	f884 8015 	strb.w	r8, [r4, #21]
 800e204:	1bd2      	subs	r2, r2, r7
 800e206:	1bdb      	subs	r3, r3, r7
 800e208:	f080 0001 	eor.w	r0, r0, #1
 800e20c:	60a2      	str	r2, [r4, #8]
 800e20e:	6123      	str	r3, [r4, #16]
 800e210:	b003      	add	sp, #12
 800e212:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e216:	68a3      	ldr	r3, [r4, #8]
 800e218:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e21c:	701a      	strb	r2, [r3, #0]
 800e21e:	68a3      	ldr	r3, [r4, #8]
 800e220:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800e224:	701a      	strb	r2, [r3, #0]
 800e226:	68a3      	ldr	r3, [r4, #8]
 800e228:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e22c:	701a      	strb	r2, [r3, #0]
 800e22e:	e7ad      	b.n	800e18c <ucdr_serialize_endian_int32_t+0x74>
 800e230:	ad01      	add	r5, sp, #4
 800e232:	4629      	mov	r1, r5
 800e234:	463a      	mov	r2, r7
 800e236:	4630      	mov	r0, r6
 800e238:	f00b f9e9 	bl	801960e <memcpy>
 800e23c:	68a0      	ldr	r0, [r4, #8]
 800e23e:	464a      	mov	r2, r9
 800e240:	19e9      	adds	r1, r5, r7
 800e242:	f00b f9e4 	bl	801960e <memcpy>
 800e246:	e7a1      	b.n	800e18c <ucdr_serialize_endian_int32_t+0x74>

0800e248 <ucdr_deserialize_int32_t>:
 800e248:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e24c:	460d      	mov	r5, r1
 800e24e:	2104      	movs	r1, #4
 800e250:	4604      	mov	r4, r0
 800e252:	f000 fde5 	bl	800ee20 <ucdr_buffer_alignment>
 800e256:	4601      	mov	r1, r0
 800e258:	4620      	mov	r0, r4
 800e25a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800e25e:	f000 fe23 	bl	800eea8 <ucdr_advance_buffer>
 800e262:	2104      	movs	r1, #4
 800e264:	4620      	mov	r0, r4
 800e266:	f000 fd7b 	bl	800ed60 <ucdr_check_buffer_available_for>
 800e26a:	2800      	cmp	r0, #0
 800e26c:	d138      	bne.n	800e2e0 <ucdr_deserialize_int32_t+0x98>
 800e26e:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800e272:	42b7      	cmp	r7, r6
 800e274:	d92f      	bls.n	800e2d6 <ucdr_deserialize_int32_t+0x8e>
 800e276:	6923      	ldr	r3, [r4, #16]
 800e278:	60a7      	str	r7, [r4, #8]
 800e27a:	1bbf      	subs	r7, r7, r6
 800e27c:	443b      	add	r3, r7
 800e27e:	f1c7 0904 	rsb	r9, r7, #4
 800e282:	6123      	str	r3, [r4, #16]
 800e284:	4649      	mov	r1, r9
 800e286:	4620      	mov	r0, r4
 800e288:	f000 fd76 	bl	800ed78 <ucdr_check_final_buffer_behavior>
 800e28c:	2800      	cmp	r0, #0
 800e28e:	d046      	beq.n	800e31e <ucdr_deserialize_int32_t+0xd6>
 800e290:	7d23      	ldrb	r3, [r4, #20]
 800e292:	2b01      	cmp	r3, #1
 800e294:	d05c      	beq.n	800e350 <ucdr_deserialize_int32_t+0x108>
 800e296:	78f3      	ldrb	r3, [r6, #3]
 800e298:	702b      	strb	r3, [r5, #0]
 800e29a:	2f00      	cmp	r7, #0
 800e29c:	d04c      	beq.n	800e338 <ucdr_deserialize_int32_t+0xf0>
 800e29e:	78b3      	ldrb	r3, [r6, #2]
 800e2a0:	706b      	strb	r3, [r5, #1]
 800e2a2:	2f01      	cmp	r7, #1
 800e2a4:	f105 0302 	add.w	r3, r5, #2
 800e2a8:	d04a      	beq.n	800e340 <ucdr_deserialize_int32_t+0xf8>
 800e2aa:	7873      	ldrb	r3, [r6, #1]
 800e2ac:	70ab      	strb	r3, [r5, #2]
 800e2ae:	2f02      	cmp	r7, #2
 800e2b0:	f105 0303 	add.w	r3, r5, #3
 800e2b4:	d048      	beq.n	800e348 <ucdr_deserialize_int32_t+0x100>
 800e2b6:	7833      	ldrb	r3, [r6, #0]
 800e2b8:	70eb      	strb	r3, [r5, #3]
 800e2ba:	6923      	ldr	r3, [r4, #16]
 800e2bc:	68a2      	ldr	r2, [r4, #8]
 800e2be:	7da0      	ldrb	r0, [r4, #22]
 800e2c0:	2104      	movs	r1, #4
 800e2c2:	3304      	adds	r3, #4
 800e2c4:	444a      	add	r2, r9
 800e2c6:	1bdb      	subs	r3, r3, r7
 800e2c8:	7561      	strb	r1, [r4, #21]
 800e2ca:	60a2      	str	r2, [r4, #8]
 800e2cc:	6123      	str	r3, [r4, #16]
 800e2ce:	f080 0001 	eor.w	r0, r0, #1
 800e2d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e2d6:	2104      	movs	r1, #4
 800e2d8:	4620      	mov	r0, r4
 800e2da:	f000 fd4d 	bl	800ed78 <ucdr_check_final_buffer_behavior>
 800e2de:	b1b0      	cbz	r0, 800e30e <ucdr_deserialize_int32_t+0xc6>
 800e2e0:	7d23      	ldrb	r3, [r4, #20]
 800e2e2:	2b01      	cmp	r3, #1
 800e2e4:	68a3      	ldr	r3, [r4, #8]
 800e2e6:	d017      	beq.n	800e318 <ucdr_deserialize_int32_t+0xd0>
 800e2e8:	78db      	ldrb	r3, [r3, #3]
 800e2ea:	702b      	strb	r3, [r5, #0]
 800e2ec:	68a3      	ldr	r3, [r4, #8]
 800e2ee:	789b      	ldrb	r3, [r3, #2]
 800e2f0:	706b      	strb	r3, [r5, #1]
 800e2f2:	68a3      	ldr	r3, [r4, #8]
 800e2f4:	785b      	ldrb	r3, [r3, #1]
 800e2f6:	70ab      	strb	r3, [r5, #2]
 800e2f8:	68a3      	ldr	r3, [r4, #8]
 800e2fa:	781b      	ldrb	r3, [r3, #0]
 800e2fc:	70eb      	strb	r3, [r5, #3]
 800e2fe:	68a2      	ldr	r2, [r4, #8]
 800e300:	6923      	ldr	r3, [r4, #16]
 800e302:	3204      	adds	r2, #4
 800e304:	3304      	adds	r3, #4
 800e306:	2104      	movs	r1, #4
 800e308:	60a2      	str	r2, [r4, #8]
 800e30a:	6123      	str	r3, [r4, #16]
 800e30c:	7561      	strb	r1, [r4, #21]
 800e30e:	7da0      	ldrb	r0, [r4, #22]
 800e310:	f080 0001 	eor.w	r0, r0, #1
 800e314:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	602b      	str	r3, [r5, #0]
 800e31c:	e7ef      	b.n	800e2fe <ucdr_deserialize_int32_t+0xb6>
 800e31e:	68a2      	ldr	r2, [r4, #8]
 800e320:	6923      	ldr	r3, [r4, #16]
 800e322:	7da0      	ldrb	r0, [r4, #22]
 800e324:	f884 8015 	strb.w	r8, [r4, #21]
 800e328:	1bd2      	subs	r2, r2, r7
 800e32a:	1bdb      	subs	r3, r3, r7
 800e32c:	60a2      	str	r2, [r4, #8]
 800e32e:	6123      	str	r3, [r4, #16]
 800e330:	f080 0001 	eor.w	r0, r0, #1
 800e334:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e338:	68a3      	ldr	r3, [r4, #8]
 800e33a:	789b      	ldrb	r3, [r3, #2]
 800e33c:	706b      	strb	r3, [r5, #1]
 800e33e:	1cab      	adds	r3, r5, #2
 800e340:	68a2      	ldr	r2, [r4, #8]
 800e342:	7852      	ldrb	r2, [r2, #1]
 800e344:	f803 2b01 	strb.w	r2, [r3], #1
 800e348:	68a2      	ldr	r2, [r4, #8]
 800e34a:	7812      	ldrb	r2, [r2, #0]
 800e34c:	701a      	strb	r2, [r3, #0]
 800e34e:	e7b4      	b.n	800e2ba <ucdr_deserialize_int32_t+0x72>
 800e350:	4631      	mov	r1, r6
 800e352:	463a      	mov	r2, r7
 800e354:	4628      	mov	r0, r5
 800e356:	f00b f95a 	bl	801960e <memcpy>
 800e35a:	68a1      	ldr	r1, [r4, #8]
 800e35c:	464a      	mov	r2, r9
 800e35e:	19e8      	adds	r0, r5, r7
 800e360:	f00b f955 	bl	801960e <memcpy>
 800e364:	e7a9      	b.n	800e2ba <ucdr_deserialize_int32_t+0x72>
 800e366:	bf00      	nop

0800e368 <ucdr_deserialize_endian_int32_t>:
 800e368:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e36c:	460e      	mov	r6, r1
 800e36e:	2104      	movs	r1, #4
 800e370:	4604      	mov	r4, r0
 800e372:	4615      	mov	r5, r2
 800e374:	f000 fd54 	bl	800ee20 <ucdr_buffer_alignment>
 800e378:	4601      	mov	r1, r0
 800e37a:	4620      	mov	r0, r4
 800e37c:	f894 9015 	ldrb.w	r9, [r4, #21]
 800e380:	f000 fd92 	bl	800eea8 <ucdr_advance_buffer>
 800e384:	2104      	movs	r1, #4
 800e386:	4620      	mov	r0, r4
 800e388:	f000 fcea 	bl	800ed60 <ucdr_check_buffer_available_for>
 800e38c:	2800      	cmp	r0, #0
 800e38e:	d13c      	bne.n	800e40a <ucdr_deserialize_endian_int32_t+0xa2>
 800e390:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800e394:	42bb      	cmp	r3, r7
 800e396:	d933      	bls.n	800e400 <ucdr_deserialize_endian_int32_t+0x98>
 800e398:	eba3 0807 	sub.w	r8, r3, r7
 800e39c:	60a3      	str	r3, [r4, #8]
 800e39e:	6923      	ldr	r3, [r4, #16]
 800e3a0:	f1c8 0a04 	rsb	sl, r8, #4
 800e3a4:	4443      	add	r3, r8
 800e3a6:	6123      	str	r3, [r4, #16]
 800e3a8:	4651      	mov	r1, sl
 800e3aa:	4620      	mov	r0, r4
 800e3ac:	f000 fce4 	bl	800ed78 <ucdr_check_final_buffer_behavior>
 800e3b0:	2800      	cmp	r0, #0
 800e3b2:	d048      	beq.n	800e446 <ucdr_deserialize_endian_int32_t+0xde>
 800e3b4:	2e01      	cmp	r6, #1
 800e3b6:	d061      	beq.n	800e47c <ucdr_deserialize_endian_int32_t+0x114>
 800e3b8:	78fb      	ldrb	r3, [r7, #3]
 800e3ba:	702b      	strb	r3, [r5, #0]
 800e3bc:	f1b8 0f00 	cmp.w	r8, #0
 800e3c0:	d050      	beq.n	800e464 <ucdr_deserialize_endian_int32_t+0xfc>
 800e3c2:	78bb      	ldrb	r3, [r7, #2]
 800e3c4:	706b      	strb	r3, [r5, #1]
 800e3c6:	f1b8 0f01 	cmp.w	r8, #1
 800e3ca:	f105 0302 	add.w	r3, r5, #2
 800e3ce:	d04d      	beq.n	800e46c <ucdr_deserialize_endian_int32_t+0x104>
 800e3d0:	787b      	ldrb	r3, [r7, #1]
 800e3d2:	70ab      	strb	r3, [r5, #2]
 800e3d4:	f1b8 0f02 	cmp.w	r8, #2
 800e3d8:	f105 0303 	add.w	r3, r5, #3
 800e3dc:	d04a      	beq.n	800e474 <ucdr_deserialize_endian_int32_t+0x10c>
 800e3de:	783b      	ldrb	r3, [r7, #0]
 800e3e0:	70eb      	strb	r3, [r5, #3]
 800e3e2:	6923      	ldr	r3, [r4, #16]
 800e3e4:	68a2      	ldr	r2, [r4, #8]
 800e3e6:	7da0      	ldrb	r0, [r4, #22]
 800e3e8:	2104      	movs	r1, #4
 800e3ea:	3304      	adds	r3, #4
 800e3ec:	4452      	add	r2, sl
 800e3ee:	eba3 0308 	sub.w	r3, r3, r8
 800e3f2:	7561      	strb	r1, [r4, #21]
 800e3f4:	60a2      	str	r2, [r4, #8]
 800e3f6:	6123      	str	r3, [r4, #16]
 800e3f8:	f080 0001 	eor.w	r0, r0, #1
 800e3fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e400:	2104      	movs	r1, #4
 800e402:	4620      	mov	r0, r4
 800e404:	f000 fcb8 	bl	800ed78 <ucdr_check_final_buffer_behavior>
 800e408:	b1a8      	cbz	r0, 800e436 <ucdr_deserialize_endian_int32_t+0xce>
 800e40a:	2e01      	cmp	r6, #1
 800e40c:	68a3      	ldr	r3, [r4, #8]
 800e40e:	d017      	beq.n	800e440 <ucdr_deserialize_endian_int32_t+0xd8>
 800e410:	78db      	ldrb	r3, [r3, #3]
 800e412:	702b      	strb	r3, [r5, #0]
 800e414:	68a3      	ldr	r3, [r4, #8]
 800e416:	789b      	ldrb	r3, [r3, #2]
 800e418:	706b      	strb	r3, [r5, #1]
 800e41a:	68a3      	ldr	r3, [r4, #8]
 800e41c:	785b      	ldrb	r3, [r3, #1]
 800e41e:	70ab      	strb	r3, [r5, #2]
 800e420:	68a3      	ldr	r3, [r4, #8]
 800e422:	781b      	ldrb	r3, [r3, #0]
 800e424:	70eb      	strb	r3, [r5, #3]
 800e426:	68a2      	ldr	r2, [r4, #8]
 800e428:	6923      	ldr	r3, [r4, #16]
 800e42a:	3204      	adds	r2, #4
 800e42c:	3304      	adds	r3, #4
 800e42e:	2104      	movs	r1, #4
 800e430:	60a2      	str	r2, [r4, #8]
 800e432:	6123      	str	r3, [r4, #16]
 800e434:	7561      	strb	r1, [r4, #21]
 800e436:	7da0      	ldrb	r0, [r4, #22]
 800e438:	f080 0001 	eor.w	r0, r0, #1
 800e43c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	602b      	str	r3, [r5, #0]
 800e444:	e7ef      	b.n	800e426 <ucdr_deserialize_endian_int32_t+0xbe>
 800e446:	68a2      	ldr	r2, [r4, #8]
 800e448:	6923      	ldr	r3, [r4, #16]
 800e44a:	7da0      	ldrb	r0, [r4, #22]
 800e44c:	f884 9015 	strb.w	r9, [r4, #21]
 800e450:	eba2 0208 	sub.w	r2, r2, r8
 800e454:	eba3 0308 	sub.w	r3, r3, r8
 800e458:	60a2      	str	r2, [r4, #8]
 800e45a:	6123      	str	r3, [r4, #16]
 800e45c:	f080 0001 	eor.w	r0, r0, #1
 800e460:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e464:	68a3      	ldr	r3, [r4, #8]
 800e466:	789b      	ldrb	r3, [r3, #2]
 800e468:	706b      	strb	r3, [r5, #1]
 800e46a:	1cab      	adds	r3, r5, #2
 800e46c:	68a2      	ldr	r2, [r4, #8]
 800e46e:	7852      	ldrb	r2, [r2, #1]
 800e470:	f803 2b01 	strb.w	r2, [r3], #1
 800e474:	68a2      	ldr	r2, [r4, #8]
 800e476:	7812      	ldrb	r2, [r2, #0]
 800e478:	701a      	strb	r2, [r3, #0]
 800e47a:	e7b2      	b.n	800e3e2 <ucdr_deserialize_endian_int32_t+0x7a>
 800e47c:	4639      	mov	r1, r7
 800e47e:	4642      	mov	r2, r8
 800e480:	4628      	mov	r0, r5
 800e482:	f00b f8c4 	bl	801960e <memcpy>
 800e486:	68a1      	ldr	r1, [r4, #8]
 800e488:	4652      	mov	r2, sl
 800e48a:	eb05 0008 	add.w	r0, r5, r8
 800e48e:	f00b f8be 	bl	801960e <memcpy>
 800e492:	e7a6      	b.n	800e3e2 <ucdr_deserialize_endian_int32_t+0x7a>

0800e494 <ucdr_serialize_endian_float>:
 800e494:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e498:	460d      	mov	r5, r1
 800e49a:	b083      	sub	sp, #12
 800e49c:	2104      	movs	r1, #4
 800e49e:	4604      	mov	r4, r0
 800e4a0:	ed8d 0a01 	vstr	s0, [sp, #4]
 800e4a4:	f000 fcbc 	bl	800ee20 <ucdr_buffer_alignment>
 800e4a8:	4601      	mov	r1, r0
 800e4aa:	4620      	mov	r0, r4
 800e4ac:	f894 8015 	ldrb.w	r8, [r4, #21]
 800e4b0:	f000 fcfa 	bl	800eea8 <ucdr_advance_buffer>
 800e4b4:	2104      	movs	r1, #4
 800e4b6:	4620      	mov	r0, r4
 800e4b8:	f000 fc52 	bl	800ed60 <ucdr_check_buffer_available_for>
 800e4bc:	2800      	cmp	r0, #0
 800e4be:	d138      	bne.n	800e532 <ucdr_serialize_endian_float+0x9e>
 800e4c0:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800e4c4:	42b7      	cmp	r7, r6
 800e4c6:	d92f      	bls.n	800e528 <ucdr_serialize_endian_float+0x94>
 800e4c8:	6923      	ldr	r3, [r4, #16]
 800e4ca:	60a7      	str	r7, [r4, #8]
 800e4cc:	1bbf      	subs	r7, r7, r6
 800e4ce:	443b      	add	r3, r7
 800e4d0:	f1c7 0904 	rsb	r9, r7, #4
 800e4d4:	6123      	str	r3, [r4, #16]
 800e4d6:	4649      	mov	r1, r9
 800e4d8:	4620      	mov	r0, r4
 800e4da:	f000 fc4d 	bl	800ed78 <ucdr_check_final_buffer_behavior>
 800e4de:	2800      	cmp	r0, #0
 800e4e0:	d04a      	beq.n	800e578 <ucdr_serialize_endian_float+0xe4>
 800e4e2:	2d01      	cmp	r5, #1
 800e4e4:	d063      	beq.n	800e5ae <ucdr_serialize_endian_float+0x11a>
 800e4e6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e4ea:	7033      	strb	r3, [r6, #0]
 800e4ec:	2f00      	cmp	r7, #0
 800e4ee:	d051      	beq.n	800e594 <ucdr_serialize_endian_float+0x100>
 800e4f0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e4f4:	7073      	strb	r3, [r6, #1]
 800e4f6:	2f01      	cmp	r7, #1
 800e4f8:	d050      	beq.n	800e59c <ucdr_serialize_endian_float+0x108>
 800e4fa:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800e4fe:	70b3      	strb	r3, [r6, #2]
 800e500:	2f02      	cmp	r7, #2
 800e502:	d04f      	beq.n	800e5a4 <ucdr_serialize_endian_float+0x110>
 800e504:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800e508:	70f3      	strb	r3, [r6, #3]
 800e50a:	6923      	ldr	r3, [r4, #16]
 800e50c:	68a2      	ldr	r2, [r4, #8]
 800e50e:	7da0      	ldrb	r0, [r4, #22]
 800e510:	3304      	adds	r3, #4
 800e512:	444a      	add	r2, r9
 800e514:	1bdb      	subs	r3, r3, r7
 800e516:	2104      	movs	r1, #4
 800e518:	f080 0001 	eor.w	r0, r0, #1
 800e51c:	60a2      	str	r2, [r4, #8]
 800e51e:	6123      	str	r3, [r4, #16]
 800e520:	7561      	strb	r1, [r4, #21]
 800e522:	b003      	add	sp, #12
 800e524:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e528:	2104      	movs	r1, #4
 800e52a:	4620      	mov	r0, r4
 800e52c:	f000 fc24 	bl	800ed78 <ucdr_check_final_buffer_behavior>
 800e530:	b1c8      	cbz	r0, 800e566 <ucdr_serialize_endian_float+0xd2>
 800e532:	2d01      	cmp	r5, #1
 800e534:	68a3      	ldr	r3, [r4, #8]
 800e536:	d01c      	beq.n	800e572 <ucdr_serialize_endian_float+0xde>
 800e538:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800e53c:	701a      	strb	r2, [r3, #0]
 800e53e:	68a3      	ldr	r3, [r4, #8]
 800e540:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e544:	705a      	strb	r2, [r3, #1]
 800e546:	68a3      	ldr	r3, [r4, #8]
 800e548:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800e54c:	709a      	strb	r2, [r3, #2]
 800e54e:	68a3      	ldr	r3, [r4, #8]
 800e550:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e554:	70da      	strb	r2, [r3, #3]
 800e556:	68a2      	ldr	r2, [r4, #8]
 800e558:	6923      	ldr	r3, [r4, #16]
 800e55a:	3204      	adds	r2, #4
 800e55c:	3304      	adds	r3, #4
 800e55e:	2104      	movs	r1, #4
 800e560:	60a2      	str	r2, [r4, #8]
 800e562:	6123      	str	r3, [r4, #16]
 800e564:	7561      	strb	r1, [r4, #21]
 800e566:	7da0      	ldrb	r0, [r4, #22]
 800e568:	f080 0001 	eor.w	r0, r0, #1
 800e56c:	b003      	add	sp, #12
 800e56e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e572:	9a01      	ldr	r2, [sp, #4]
 800e574:	601a      	str	r2, [r3, #0]
 800e576:	e7ee      	b.n	800e556 <ucdr_serialize_endian_float+0xc2>
 800e578:	68a2      	ldr	r2, [r4, #8]
 800e57a:	6923      	ldr	r3, [r4, #16]
 800e57c:	7da0      	ldrb	r0, [r4, #22]
 800e57e:	f884 8015 	strb.w	r8, [r4, #21]
 800e582:	1bd2      	subs	r2, r2, r7
 800e584:	1bdb      	subs	r3, r3, r7
 800e586:	f080 0001 	eor.w	r0, r0, #1
 800e58a:	60a2      	str	r2, [r4, #8]
 800e58c:	6123      	str	r3, [r4, #16]
 800e58e:	b003      	add	sp, #12
 800e590:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e594:	68a3      	ldr	r3, [r4, #8]
 800e596:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e59a:	701a      	strb	r2, [r3, #0]
 800e59c:	68a3      	ldr	r3, [r4, #8]
 800e59e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800e5a2:	701a      	strb	r2, [r3, #0]
 800e5a4:	68a3      	ldr	r3, [r4, #8]
 800e5a6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e5aa:	701a      	strb	r2, [r3, #0]
 800e5ac:	e7ad      	b.n	800e50a <ucdr_serialize_endian_float+0x76>
 800e5ae:	ad01      	add	r5, sp, #4
 800e5b0:	4629      	mov	r1, r5
 800e5b2:	463a      	mov	r2, r7
 800e5b4:	4630      	mov	r0, r6
 800e5b6:	f00b f82a 	bl	801960e <memcpy>
 800e5ba:	68a0      	ldr	r0, [r4, #8]
 800e5bc:	464a      	mov	r2, r9
 800e5be:	19e9      	adds	r1, r5, r7
 800e5c0:	f00b f825 	bl	801960e <memcpy>
 800e5c4:	e7a1      	b.n	800e50a <ucdr_serialize_endian_float+0x76>
 800e5c6:	bf00      	nop

0800e5c8 <ucdr_deserialize_endian_float>:
 800e5c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e5cc:	460e      	mov	r6, r1
 800e5ce:	2104      	movs	r1, #4
 800e5d0:	4604      	mov	r4, r0
 800e5d2:	4615      	mov	r5, r2
 800e5d4:	f000 fc24 	bl	800ee20 <ucdr_buffer_alignment>
 800e5d8:	4601      	mov	r1, r0
 800e5da:	4620      	mov	r0, r4
 800e5dc:	f894 9015 	ldrb.w	r9, [r4, #21]
 800e5e0:	f000 fc62 	bl	800eea8 <ucdr_advance_buffer>
 800e5e4:	2104      	movs	r1, #4
 800e5e6:	4620      	mov	r0, r4
 800e5e8:	f000 fbba 	bl	800ed60 <ucdr_check_buffer_available_for>
 800e5ec:	2800      	cmp	r0, #0
 800e5ee:	d13c      	bne.n	800e66a <ucdr_deserialize_endian_float+0xa2>
 800e5f0:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800e5f4:	42bb      	cmp	r3, r7
 800e5f6:	d933      	bls.n	800e660 <ucdr_deserialize_endian_float+0x98>
 800e5f8:	eba3 0807 	sub.w	r8, r3, r7
 800e5fc:	60a3      	str	r3, [r4, #8]
 800e5fe:	6923      	ldr	r3, [r4, #16]
 800e600:	f1c8 0a04 	rsb	sl, r8, #4
 800e604:	4443      	add	r3, r8
 800e606:	6123      	str	r3, [r4, #16]
 800e608:	4651      	mov	r1, sl
 800e60a:	4620      	mov	r0, r4
 800e60c:	f000 fbb4 	bl	800ed78 <ucdr_check_final_buffer_behavior>
 800e610:	2800      	cmp	r0, #0
 800e612:	d048      	beq.n	800e6a6 <ucdr_deserialize_endian_float+0xde>
 800e614:	2e01      	cmp	r6, #1
 800e616:	d061      	beq.n	800e6dc <ucdr_deserialize_endian_float+0x114>
 800e618:	78fb      	ldrb	r3, [r7, #3]
 800e61a:	702b      	strb	r3, [r5, #0]
 800e61c:	f1b8 0f00 	cmp.w	r8, #0
 800e620:	d050      	beq.n	800e6c4 <ucdr_deserialize_endian_float+0xfc>
 800e622:	78bb      	ldrb	r3, [r7, #2]
 800e624:	706b      	strb	r3, [r5, #1]
 800e626:	f1b8 0f01 	cmp.w	r8, #1
 800e62a:	f105 0302 	add.w	r3, r5, #2
 800e62e:	d04d      	beq.n	800e6cc <ucdr_deserialize_endian_float+0x104>
 800e630:	787b      	ldrb	r3, [r7, #1]
 800e632:	70ab      	strb	r3, [r5, #2]
 800e634:	f1b8 0f02 	cmp.w	r8, #2
 800e638:	f105 0303 	add.w	r3, r5, #3
 800e63c:	d04a      	beq.n	800e6d4 <ucdr_deserialize_endian_float+0x10c>
 800e63e:	783b      	ldrb	r3, [r7, #0]
 800e640:	70eb      	strb	r3, [r5, #3]
 800e642:	6923      	ldr	r3, [r4, #16]
 800e644:	68a2      	ldr	r2, [r4, #8]
 800e646:	7da0      	ldrb	r0, [r4, #22]
 800e648:	2104      	movs	r1, #4
 800e64a:	3304      	adds	r3, #4
 800e64c:	4452      	add	r2, sl
 800e64e:	eba3 0308 	sub.w	r3, r3, r8
 800e652:	7561      	strb	r1, [r4, #21]
 800e654:	60a2      	str	r2, [r4, #8]
 800e656:	6123      	str	r3, [r4, #16]
 800e658:	f080 0001 	eor.w	r0, r0, #1
 800e65c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e660:	2104      	movs	r1, #4
 800e662:	4620      	mov	r0, r4
 800e664:	f000 fb88 	bl	800ed78 <ucdr_check_final_buffer_behavior>
 800e668:	b1a8      	cbz	r0, 800e696 <ucdr_deserialize_endian_float+0xce>
 800e66a:	2e01      	cmp	r6, #1
 800e66c:	68a3      	ldr	r3, [r4, #8]
 800e66e:	d017      	beq.n	800e6a0 <ucdr_deserialize_endian_float+0xd8>
 800e670:	78db      	ldrb	r3, [r3, #3]
 800e672:	702b      	strb	r3, [r5, #0]
 800e674:	68a3      	ldr	r3, [r4, #8]
 800e676:	789b      	ldrb	r3, [r3, #2]
 800e678:	706b      	strb	r3, [r5, #1]
 800e67a:	68a3      	ldr	r3, [r4, #8]
 800e67c:	785b      	ldrb	r3, [r3, #1]
 800e67e:	70ab      	strb	r3, [r5, #2]
 800e680:	68a3      	ldr	r3, [r4, #8]
 800e682:	781b      	ldrb	r3, [r3, #0]
 800e684:	70eb      	strb	r3, [r5, #3]
 800e686:	68a2      	ldr	r2, [r4, #8]
 800e688:	6923      	ldr	r3, [r4, #16]
 800e68a:	3204      	adds	r2, #4
 800e68c:	3304      	adds	r3, #4
 800e68e:	2104      	movs	r1, #4
 800e690:	60a2      	str	r2, [r4, #8]
 800e692:	6123      	str	r3, [r4, #16]
 800e694:	7561      	strb	r1, [r4, #21]
 800e696:	7da0      	ldrb	r0, [r4, #22]
 800e698:	f080 0001 	eor.w	r0, r0, #1
 800e69c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e6a0:	681b      	ldr	r3, [r3, #0]
 800e6a2:	602b      	str	r3, [r5, #0]
 800e6a4:	e7ef      	b.n	800e686 <ucdr_deserialize_endian_float+0xbe>
 800e6a6:	68a2      	ldr	r2, [r4, #8]
 800e6a8:	6923      	ldr	r3, [r4, #16]
 800e6aa:	7da0      	ldrb	r0, [r4, #22]
 800e6ac:	f884 9015 	strb.w	r9, [r4, #21]
 800e6b0:	eba2 0208 	sub.w	r2, r2, r8
 800e6b4:	eba3 0308 	sub.w	r3, r3, r8
 800e6b8:	60a2      	str	r2, [r4, #8]
 800e6ba:	6123      	str	r3, [r4, #16]
 800e6bc:	f080 0001 	eor.w	r0, r0, #1
 800e6c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e6c4:	68a3      	ldr	r3, [r4, #8]
 800e6c6:	789b      	ldrb	r3, [r3, #2]
 800e6c8:	706b      	strb	r3, [r5, #1]
 800e6ca:	1cab      	adds	r3, r5, #2
 800e6cc:	68a2      	ldr	r2, [r4, #8]
 800e6ce:	7852      	ldrb	r2, [r2, #1]
 800e6d0:	f803 2b01 	strb.w	r2, [r3], #1
 800e6d4:	68a2      	ldr	r2, [r4, #8]
 800e6d6:	7812      	ldrb	r2, [r2, #0]
 800e6d8:	701a      	strb	r2, [r3, #0]
 800e6da:	e7b2      	b.n	800e642 <ucdr_deserialize_endian_float+0x7a>
 800e6dc:	4639      	mov	r1, r7
 800e6de:	4642      	mov	r2, r8
 800e6e0:	4628      	mov	r0, r5
 800e6e2:	f00a ff94 	bl	801960e <memcpy>
 800e6e6:	68a1      	ldr	r1, [r4, #8]
 800e6e8:	4652      	mov	r2, sl
 800e6ea:	eb05 0008 	add.w	r0, r5, r8
 800e6ee:	f00a ff8e 	bl	801960e <memcpy>
 800e6f2:	e7a6      	b.n	800e642 <ucdr_deserialize_endian_float+0x7a>

0800e6f4 <ucdr_serialize_double>:
 800e6f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e6f8:	2108      	movs	r1, #8
 800e6fa:	b082      	sub	sp, #8
 800e6fc:	4604      	mov	r4, r0
 800e6fe:	ed8d 0b00 	vstr	d0, [sp]
 800e702:	f000 fb8d 	bl	800ee20 <ucdr_buffer_alignment>
 800e706:	4601      	mov	r1, r0
 800e708:	4620      	mov	r0, r4
 800e70a:	7d67      	ldrb	r7, [r4, #21]
 800e70c:	f000 fbcc 	bl	800eea8 <ucdr_advance_buffer>
 800e710:	2108      	movs	r1, #8
 800e712:	4620      	mov	r0, r4
 800e714:	f000 fb24 	bl	800ed60 <ucdr_check_buffer_available_for>
 800e718:	2800      	cmp	r0, #0
 800e71a:	d14e      	bne.n	800e7ba <ucdr_serialize_double+0xc6>
 800e71c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800e720:	42ab      	cmp	r3, r5
 800e722:	d945      	bls.n	800e7b0 <ucdr_serialize_double+0xbc>
 800e724:	1b5e      	subs	r6, r3, r5
 800e726:	60a3      	str	r3, [r4, #8]
 800e728:	6923      	ldr	r3, [r4, #16]
 800e72a:	f1c6 0808 	rsb	r8, r6, #8
 800e72e:	4433      	add	r3, r6
 800e730:	6123      	str	r3, [r4, #16]
 800e732:	4641      	mov	r1, r8
 800e734:	4620      	mov	r0, r4
 800e736:	f000 fb1f 	bl	800ed78 <ucdr_check_final_buffer_behavior>
 800e73a:	2800      	cmp	r0, #0
 800e73c:	d074      	beq.n	800e828 <ucdr_serialize_double+0x134>
 800e73e:	7d23      	ldrb	r3, [r4, #20]
 800e740:	2b01      	cmp	r3, #1
 800e742:	f000 809b 	beq.w	800e87c <ucdr_serialize_double+0x188>
 800e746:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e74a:	702b      	strb	r3, [r5, #0]
 800e74c:	2e00      	cmp	r6, #0
 800e74e:	d078      	beq.n	800e842 <ucdr_serialize_double+0x14e>
 800e750:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e754:	706b      	strb	r3, [r5, #1]
 800e756:	2e01      	cmp	r6, #1
 800e758:	d077      	beq.n	800e84a <ucdr_serialize_double+0x156>
 800e75a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800e75e:	70ab      	strb	r3, [r5, #2]
 800e760:	2e02      	cmp	r6, #2
 800e762:	d076      	beq.n	800e852 <ucdr_serialize_double+0x15e>
 800e764:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800e768:	70eb      	strb	r3, [r5, #3]
 800e76a:	2e03      	cmp	r6, #3
 800e76c:	d075      	beq.n	800e85a <ucdr_serialize_double+0x166>
 800e76e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800e772:	712b      	strb	r3, [r5, #4]
 800e774:	2e04      	cmp	r6, #4
 800e776:	d074      	beq.n	800e862 <ucdr_serialize_double+0x16e>
 800e778:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800e77c:	716b      	strb	r3, [r5, #5]
 800e77e:	2e05      	cmp	r6, #5
 800e780:	d073      	beq.n	800e86a <ucdr_serialize_double+0x176>
 800e782:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800e786:	71ab      	strb	r3, [r5, #6]
 800e788:	2e06      	cmp	r6, #6
 800e78a:	d072      	beq.n	800e872 <ucdr_serialize_double+0x17e>
 800e78c:	f89d 3000 	ldrb.w	r3, [sp]
 800e790:	71eb      	strb	r3, [r5, #7]
 800e792:	6923      	ldr	r3, [r4, #16]
 800e794:	68a2      	ldr	r2, [r4, #8]
 800e796:	7da0      	ldrb	r0, [r4, #22]
 800e798:	3308      	adds	r3, #8
 800e79a:	1b9e      	subs	r6, r3, r6
 800e79c:	4442      	add	r2, r8
 800e79e:	2308      	movs	r3, #8
 800e7a0:	f080 0001 	eor.w	r0, r0, #1
 800e7a4:	60a2      	str	r2, [r4, #8]
 800e7a6:	6126      	str	r6, [r4, #16]
 800e7a8:	7563      	strb	r3, [r4, #21]
 800e7aa:	b002      	add	sp, #8
 800e7ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e7b0:	2108      	movs	r1, #8
 800e7b2:	4620      	mov	r0, r4
 800e7b4:	f000 fae0 	bl	800ed78 <ucdr_check_final_buffer_behavior>
 800e7b8:	b350      	cbz	r0, 800e810 <ucdr_serialize_double+0x11c>
 800e7ba:	7d23      	ldrb	r3, [r4, #20]
 800e7bc:	2b01      	cmp	r3, #1
 800e7be:	d02d      	beq.n	800e81c <ucdr_serialize_double+0x128>
 800e7c0:	68a3      	ldr	r3, [r4, #8]
 800e7c2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800e7c6:	701a      	strb	r2, [r3, #0]
 800e7c8:	68a3      	ldr	r3, [r4, #8]
 800e7ca:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e7ce:	705a      	strb	r2, [r3, #1]
 800e7d0:	68a3      	ldr	r3, [r4, #8]
 800e7d2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800e7d6:	709a      	strb	r2, [r3, #2]
 800e7d8:	68a3      	ldr	r3, [r4, #8]
 800e7da:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e7de:	70da      	strb	r2, [r3, #3]
 800e7e0:	68a3      	ldr	r3, [r4, #8]
 800e7e2:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800e7e6:	711a      	strb	r2, [r3, #4]
 800e7e8:	68a3      	ldr	r3, [r4, #8]
 800e7ea:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800e7ee:	715a      	strb	r2, [r3, #5]
 800e7f0:	68a3      	ldr	r3, [r4, #8]
 800e7f2:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800e7f6:	719a      	strb	r2, [r3, #6]
 800e7f8:	68a3      	ldr	r3, [r4, #8]
 800e7fa:	f89d 2000 	ldrb.w	r2, [sp]
 800e7fe:	71da      	strb	r2, [r3, #7]
 800e800:	68a2      	ldr	r2, [r4, #8]
 800e802:	6923      	ldr	r3, [r4, #16]
 800e804:	3208      	adds	r2, #8
 800e806:	3308      	adds	r3, #8
 800e808:	2108      	movs	r1, #8
 800e80a:	60a2      	str	r2, [r4, #8]
 800e80c:	6123      	str	r3, [r4, #16]
 800e80e:	7561      	strb	r1, [r4, #21]
 800e810:	7da0      	ldrb	r0, [r4, #22]
 800e812:	f080 0001 	eor.w	r0, r0, #1
 800e816:	b002      	add	sp, #8
 800e818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e81c:	466b      	mov	r3, sp
 800e81e:	cb03      	ldmia	r3!, {r0, r1}
 800e820:	68a3      	ldr	r3, [r4, #8]
 800e822:	6018      	str	r0, [r3, #0]
 800e824:	6059      	str	r1, [r3, #4]
 800e826:	e7eb      	b.n	800e800 <ucdr_serialize_double+0x10c>
 800e828:	68a2      	ldr	r2, [r4, #8]
 800e82a:	6923      	ldr	r3, [r4, #16]
 800e82c:	7da0      	ldrb	r0, [r4, #22]
 800e82e:	7567      	strb	r7, [r4, #21]
 800e830:	1b92      	subs	r2, r2, r6
 800e832:	1b9b      	subs	r3, r3, r6
 800e834:	f080 0001 	eor.w	r0, r0, #1
 800e838:	60a2      	str	r2, [r4, #8]
 800e83a:	6123      	str	r3, [r4, #16]
 800e83c:	b002      	add	sp, #8
 800e83e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e842:	68a3      	ldr	r3, [r4, #8]
 800e844:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e848:	701a      	strb	r2, [r3, #0]
 800e84a:	68a3      	ldr	r3, [r4, #8]
 800e84c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800e850:	701a      	strb	r2, [r3, #0]
 800e852:	68a3      	ldr	r3, [r4, #8]
 800e854:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e858:	701a      	strb	r2, [r3, #0]
 800e85a:	68a3      	ldr	r3, [r4, #8]
 800e85c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800e860:	701a      	strb	r2, [r3, #0]
 800e862:	68a3      	ldr	r3, [r4, #8]
 800e864:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800e868:	701a      	strb	r2, [r3, #0]
 800e86a:	68a3      	ldr	r3, [r4, #8]
 800e86c:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800e870:	701a      	strb	r2, [r3, #0]
 800e872:	68a3      	ldr	r3, [r4, #8]
 800e874:	f89d 2000 	ldrb.w	r2, [sp]
 800e878:	701a      	strb	r2, [r3, #0]
 800e87a:	e78a      	b.n	800e792 <ucdr_serialize_double+0x9e>
 800e87c:	4628      	mov	r0, r5
 800e87e:	466d      	mov	r5, sp
 800e880:	4629      	mov	r1, r5
 800e882:	4632      	mov	r2, r6
 800e884:	f00a fec3 	bl	801960e <memcpy>
 800e888:	68a0      	ldr	r0, [r4, #8]
 800e88a:	4642      	mov	r2, r8
 800e88c:	19a9      	adds	r1, r5, r6
 800e88e:	f00a febe 	bl	801960e <memcpy>
 800e892:	e77e      	b.n	800e792 <ucdr_serialize_double+0x9e>

0800e894 <ucdr_serialize_endian_double>:
 800e894:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e898:	460e      	mov	r6, r1
 800e89a:	b083      	sub	sp, #12
 800e89c:	2108      	movs	r1, #8
 800e89e:	4604      	mov	r4, r0
 800e8a0:	ed8d 0b00 	vstr	d0, [sp]
 800e8a4:	f000 fabc 	bl	800ee20 <ucdr_buffer_alignment>
 800e8a8:	4601      	mov	r1, r0
 800e8aa:	4620      	mov	r0, r4
 800e8ac:	f894 8015 	ldrb.w	r8, [r4, #21]
 800e8b0:	f000 fafa 	bl	800eea8 <ucdr_advance_buffer>
 800e8b4:	2108      	movs	r1, #8
 800e8b6:	4620      	mov	r0, r4
 800e8b8:	f000 fa52 	bl	800ed60 <ucdr_check_buffer_available_for>
 800e8bc:	2800      	cmp	r0, #0
 800e8be:	d14d      	bne.n	800e95c <ucdr_serialize_endian_double+0xc8>
 800e8c0:	e9d4 5701 	ldrd	r5, r7, [r4, #4]
 800e8c4:	42bd      	cmp	r5, r7
 800e8c6:	d944      	bls.n	800e952 <ucdr_serialize_endian_double+0xbe>
 800e8c8:	6923      	ldr	r3, [r4, #16]
 800e8ca:	60a5      	str	r5, [r4, #8]
 800e8cc:	1bed      	subs	r5, r5, r7
 800e8ce:	442b      	add	r3, r5
 800e8d0:	f1c5 0908 	rsb	r9, r5, #8
 800e8d4:	6123      	str	r3, [r4, #16]
 800e8d6:	4649      	mov	r1, r9
 800e8d8:	4620      	mov	r0, r4
 800e8da:	f000 fa4d 	bl	800ed78 <ucdr_check_final_buffer_behavior>
 800e8de:	2800      	cmp	r0, #0
 800e8e0:	d072      	beq.n	800e9c8 <ucdr_serialize_endian_double+0x134>
 800e8e2:	2e01      	cmp	r6, #1
 800e8e4:	f000 809b 	beq.w	800ea1e <ucdr_serialize_endian_double+0x18a>
 800e8e8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e8ec:	703b      	strb	r3, [r7, #0]
 800e8ee:	2d00      	cmp	r5, #0
 800e8f0:	d078      	beq.n	800e9e4 <ucdr_serialize_endian_double+0x150>
 800e8f2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e8f6:	707b      	strb	r3, [r7, #1]
 800e8f8:	2d01      	cmp	r5, #1
 800e8fa:	d077      	beq.n	800e9ec <ucdr_serialize_endian_double+0x158>
 800e8fc:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800e900:	70bb      	strb	r3, [r7, #2]
 800e902:	2d02      	cmp	r5, #2
 800e904:	d076      	beq.n	800e9f4 <ucdr_serialize_endian_double+0x160>
 800e906:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800e90a:	70fb      	strb	r3, [r7, #3]
 800e90c:	2d03      	cmp	r5, #3
 800e90e:	d075      	beq.n	800e9fc <ucdr_serialize_endian_double+0x168>
 800e910:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800e914:	713b      	strb	r3, [r7, #4]
 800e916:	2d04      	cmp	r5, #4
 800e918:	d074      	beq.n	800ea04 <ucdr_serialize_endian_double+0x170>
 800e91a:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800e91e:	717b      	strb	r3, [r7, #5]
 800e920:	2d05      	cmp	r5, #5
 800e922:	d073      	beq.n	800ea0c <ucdr_serialize_endian_double+0x178>
 800e924:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800e928:	71bb      	strb	r3, [r7, #6]
 800e92a:	2d06      	cmp	r5, #6
 800e92c:	d072      	beq.n	800ea14 <ucdr_serialize_endian_double+0x180>
 800e92e:	f89d 3000 	ldrb.w	r3, [sp]
 800e932:	71fb      	strb	r3, [r7, #7]
 800e934:	6923      	ldr	r3, [r4, #16]
 800e936:	68a2      	ldr	r2, [r4, #8]
 800e938:	7da0      	ldrb	r0, [r4, #22]
 800e93a:	3308      	adds	r3, #8
 800e93c:	1b5d      	subs	r5, r3, r5
 800e93e:	444a      	add	r2, r9
 800e940:	2308      	movs	r3, #8
 800e942:	f080 0001 	eor.w	r0, r0, #1
 800e946:	60a2      	str	r2, [r4, #8]
 800e948:	6125      	str	r5, [r4, #16]
 800e94a:	7563      	strb	r3, [r4, #21]
 800e94c:	b003      	add	sp, #12
 800e94e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e952:	2108      	movs	r1, #8
 800e954:	4620      	mov	r0, r4
 800e956:	f000 fa0f 	bl	800ed78 <ucdr_check_final_buffer_behavior>
 800e95a:	b348      	cbz	r0, 800e9b0 <ucdr_serialize_endian_double+0x11c>
 800e95c:	2e01      	cmp	r6, #1
 800e95e:	d02d      	beq.n	800e9bc <ucdr_serialize_endian_double+0x128>
 800e960:	68a3      	ldr	r3, [r4, #8]
 800e962:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800e966:	701a      	strb	r2, [r3, #0]
 800e968:	68a3      	ldr	r3, [r4, #8]
 800e96a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e96e:	705a      	strb	r2, [r3, #1]
 800e970:	68a3      	ldr	r3, [r4, #8]
 800e972:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800e976:	709a      	strb	r2, [r3, #2]
 800e978:	68a3      	ldr	r3, [r4, #8]
 800e97a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e97e:	70da      	strb	r2, [r3, #3]
 800e980:	68a3      	ldr	r3, [r4, #8]
 800e982:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800e986:	711a      	strb	r2, [r3, #4]
 800e988:	68a3      	ldr	r3, [r4, #8]
 800e98a:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800e98e:	715a      	strb	r2, [r3, #5]
 800e990:	68a3      	ldr	r3, [r4, #8]
 800e992:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800e996:	719a      	strb	r2, [r3, #6]
 800e998:	68a3      	ldr	r3, [r4, #8]
 800e99a:	f89d 2000 	ldrb.w	r2, [sp]
 800e99e:	71da      	strb	r2, [r3, #7]
 800e9a0:	68a2      	ldr	r2, [r4, #8]
 800e9a2:	6923      	ldr	r3, [r4, #16]
 800e9a4:	3208      	adds	r2, #8
 800e9a6:	3308      	adds	r3, #8
 800e9a8:	2108      	movs	r1, #8
 800e9aa:	60a2      	str	r2, [r4, #8]
 800e9ac:	6123      	str	r3, [r4, #16]
 800e9ae:	7561      	strb	r1, [r4, #21]
 800e9b0:	7da0      	ldrb	r0, [r4, #22]
 800e9b2:	f080 0001 	eor.w	r0, r0, #1
 800e9b6:	b003      	add	sp, #12
 800e9b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e9bc:	466b      	mov	r3, sp
 800e9be:	cb03      	ldmia	r3!, {r0, r1}
 800e9c0:	68a3      	ldr	r3, [r4, #8]
 800e9c2:	6018      	str	r0, [r3, #0]
 800e9c4:	6059      	str	r1, [r3, #4]
 800e9c6:	e7eb      	b.n	800e9a0 <ucdr_serialize_endian_double+0x10c>
 800e9c8:	68a2      	ldr	r2, [r4, #8]
 800e9ca:	6923      	ldr	r3, [r4, #16]
 800e9cc:	7da0      	ldrb	r0, [r4, #22]
 800e9ce:	f884 8015 	strb.w	r8, [r4, #21]
 800e9d2:	1b52      	subs	r2, r2, r5
 800e9d4:	1b5b      	subs	r3, r3, r5
 800e9d6:	f080 0001 	eor.w	r0, r0, #1
 800e9da:	60a2      	str	r2, [r4, #8]
 800e9dc:	6123      	str	r3, [r4, #16]
 800e9de:	b003      	add	sp, #12
 800e9e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e9e4:	68a3      	ldr	r3, [r4, #8]
 800e9e6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e9ea:	701a      	strb	r2, [r3, #0]
 800e9ec:	68a3      	ldr	r3, [r4, #8]
 800e9ee:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800e9f2:	701a      	strb	r2, [r3, #0]
 800e9f4:	68a3      	ldr	r3, [r4, #8]
 800e9f6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e9fa:	701a      	strb	r2, [r3, #0]
 800e9fc:	68a3      	ldr	r3, [r4, #8]
 800e9fe:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800ea02:	701a      	strb	r2, [r3, #0]
 800ea04:	68a3      	ldr	r3, [r4, #8]
 800ea06:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800ea0a:	701a      	strb	r2, [r3, #0]
 800ea0c:	68a3      	ldr	r3, [r4, #8]
 800ea0e:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800ea12:	701a      	strb	r2, [r3, #0]
 800ea14:	68a3      	ldr	r3, [r4, #8]
 800ea16:	f89d 2000 	ldrb.w	r2, [sp]
 800ea1a:	701a      	strb	r2, [r3, #0]
 800ea1c:	e78a      	b.n	800e934 <ucdr_serialize_endian_double+0xa0>
 800ea1e:	466e      	mov	r6, sp
 800ea20:	4631      	mov	r1, r6
 800ea22:	462a      	mov	r2, r5
 800ea24:	4638      	mov	r0, r7
 800ea26:	f00a fdf2 	bl	801960e <memcpy>
 800ea2a:	68a0      	ldr	r0, [r4, #8]
 800ea2c:	464a      	mov	r2, r9
 800ea2e:	1971      	adds	r1, r6, r5
 800ea30:	f00a fded 	bl	801960e <memcpy>
 800ea34:	e77e      	b.n	800e934 <ucdr_serialize_endian_double+0xa0>
 800ea36:	bf00      	nop

0800ea38 <ucdr_deserialize_double>:
 800ea38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ea3c:	460d      	mov	r5, r1
 800ea3e:	2108      	movs	r1, #8
 800ea40:	4604      	mov	r4, r0
 800ea42:	f000 f9ed 	bl	800ee20 <ucdr_buffer_alignment>
 800ea46:	4601      	mov	r1, r0
 800ea48:	4620      	mov	r0, r4
 800ea4a:	f894 9015 	ldrb.w	r9, [r4, #21]
 800ea4e:	f000 fa2b 	bl	800eea8 <ucdr_advance_buffer>
 800ea52:	2108      	movs	r1, #8
 800ea54:	4620      	mov	r0, r4
 800ea56:	f000 f983 	bl	800ed60 <ucdr_check_buffer_available_for>
 800ea5a:	2800      	cmp	r0, #0
 800ea5c:	d151      	bne.n	800eb02 <ucdr_deserialize_double+0xca>
 800ea5e:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800ea62:	42be      	cmp	r6, r7
 800ea64:	d948      	bls.n	800eaf8 <ucdr_deserialize_double+0xc0>
 800ea66:	6923      	ldr	r3, [r4, #16]
 800ea68:	60a6      	str	r6, [r4, #8]
 800ea6a:	1bf6      	subs	r6, r6, r7
 800ea6c:	4433      	add	r3, r6
 800ea6e:	f1c6 0808 	rsb	r8, r6, #8
 800ea72:	6123      	str	r3, [r4, #16]
 800ea74:	4641      	mov	r1, r8
 800ea76:	4620      	mov	r0, r4
 800ea78:	f000 f97e 	bl	800ed78 <ucdr_check_final_buffer_behavior>
 800ea7c:	2800      	cmp	r0, #0
 800ea7e:	d06d      	beq.n	800eb5c <ucdr_deserialize_double+0x124>
 800ea80:	7d23      	ldrb	r3, [r4, #20]
 800ea82:	2b01      	cmp	r3, #1
 800ea84:	f000 8093 	beq.w	800ebae <ucdr_deserialize_double+0x176>
 800ea88:	79fb      	ldrb	r3, [r7, #7]
 800ea8a:	702b      	strb	r3, [r5, #0]
 800ea8c:	2e00      	cmp	r6, #0
 800ea8e:	d072      	beq.n	800eb76 <ucdr_deserialize_double+0x13e>
 800ea90:	79bb      	ldrb	r3, [r7, #6]
 800ea92:	706b      	strb	r3, [r5, #1]
 800ea94:	2e01      	cmp	r6, #1
 800ea96:	f105 0302 	add.w	r3, r5, #2
 800ea9a:	d070      	beq.n	800eb7e <ucdr_deserialize_double+0x146>
 800ea9c:	797b      	ldrb	r3, [r7, #5]
 800ea9e:	70ab      	strb	r3, [r5, #2]
 800eaa0:	2e02      	cmp	r6, #2
 800eaa2:	f105 0303 	add.w	r3, r5, #3
 800eaa6:	d06e      	beq.n	800eb86 <ucdr_deserialize_double+0x14e>
 800eaa8:	793b      	ldrb	r3, [r7, #4]
 800eaaa:	70eb      	strb	r3, [r5, #3]
 800eaac:	2e03      	cmp	r6, #3
 800eaae:	f105 0304 	add.w	r3, r5, #4
 800eab2:	d06c      	beq.n	800eb8e <ucdr_deserialize_double+0x156>
 800eab4:	78fb      	ldrb	r3, [r7, #3]
 800eab6:	712b      	strb	r3, [r5, #4]
 800eab8:	2e04      	cmp	r6, #4
 800eaba:	f105 0305 	add.w	r3, r5, #5
 800eabe:	d06a      	beq.n	800eb96 <ucdr_deserialize_double+0x15e>
 800eac0:	78bb      	ldrb	r3, [r7, #2]
 800eac2:	716b      	strb	r3, [r5, #5]
 800eac4:	2e05      	cmp	r6, #5
 800eac6:	f105 0306 	add.w	r3, r5, #6
 800eaca:	d068      	beq.n	800eb9e <ucdr_deserialize_double+0x166>
 800eacc:	787b      	ldrb	r3, [r7, #1]
 800eace:	71ab      	strb	r3, [r5, #6]
 800ead0:	2e06      	cmp	r6, #6
 800ead2:	f105 0307 	add.w	r3, r5, #7
 800ead6:	d066      	beq.n	800eba6 <ucdr_deserialize_double+0x16e>
 800ead8:	783b      	ldrb	r3, [r7, #0]
 800eada:	71eb      	strb	r3, [r5, #7]
 800eadc:	6923      	ldr	r3, [r4, #16]
 800eade:	68a2      	ldr	r2, [r4, #8]
 800eae0:	7da0      	ldrb	r0, [r4, #22]
 800eae2:	3308      	adds	r3, #8
 800eae4:	1b9e      	subs	r6, r3, r6
 800eae6:	2308      	movs	r3, #8
 800eae8:	4442      	add	r2, r8
 800eaea:	7563      	strb	r3, [r4, #21]
 800eaec:	60a2      	str	r2, [r4, #8]
 800eaee:	6126      	str	r6, [r4, #16]
 800eaf0:	f080 0001 	eor.w	r0, r0, #1
 800eaf4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eaf8:	2108      	movs	r1, #8
 800eafa:	4620      	mov	r0, r4
 800eafc:	f000 f93c 	bl	800ed78 <ucdr_check_final_buffer_behavior>
 800eb00:	b310      	cbz	r0, 800eb48 <ucdr_deserialize_double+0x110>
 800eb02:	7d23      	ldrb	r3, [r4, #20]
 800eb04:	2b01      	cmp	r3, #1
 800eb06:	68a3      	ldr	r3, [r4, #8]
 800eb08:	d023      	beq.n	800eb52 <ucdr_deserialize_double+0x11a>
 800eb0a:	79db      	ldrb	r3, [r3, #7]
 800eb0c:	702b      	strb	r3, [r5, #0]
 800eb0e:	68a3      	ldr	r3, [r4, #8]
 800eb10:	799b      	ldrb	r3, [r3, #6]
 800eb12:	706b      	strb	r3, [r5, #1]
 800eb14:	68a3      	ldr	r3, [r4, #8]
 800eb16:	795b      	ldrb	r3, [r3, #5]
 800eb18:	70ab      	strb	r3, [r5, #2]
 800eb1a:	68a3      	ldr	r3, [r4, #8]
 800eb1c:	791b      	ldrb	r3, [r3, #4]
 800eb1e:	70eb      	strb	r3, [r5, #3]
 800eb20:	68a3      	ldr	r3, [r4, #8]
 800eb22:	78db      	ldrb	r3, [r3, #3]
 800eb24:	712b      	strb	r3, [r5, #4]
 800eb26:	68a3      	ldr	r3, [r4, #8]
 800eb28:	789b      	ldrb	r3, [r3, #2]
 800eb2a:	716b      	strb	r3, [r5, #5]
 800eb2c:	68a3      	ldr	r3, [r4, #8]
 800eb2e:	785b      	ldrb	r3, [r3, #1]
 800eb30:	71ab      	strb	r3, [r5, #6]
 800eb32:	68a3      	ldr	r3, [r4, #8]
 800eb34:	781b      	ldrb	r3, [r3, #0]
 800eb36:	71eb      	strb	r3, [r5, #7]
 800eb38:	68a2      	ldr	r2, [r4, #8]
 800eb3a:	6923      	ldr	r3, [r4, #16]
 800eb3c:	3208      	adds	r2, #8
 800eb3e:	3308      	adds	r3, #8
 800eb40:	2108      	movs	r1, #8
 800eb42:	60a2      	str	r2, [r4, #8]
 800eb44:	6123      	str	r3, [r4, #16]
 800eb46:	7561      	strb	r1, [r4, #21]
 800eb48:	7da0      	ldrb	r0, [r4, #22]
 800eb4a:	f080 0001 	eor.w	r0, r0, #1
 800eb4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eb52:	681a      	ldr	r2, [r3, #0]
 800eb54:	685b      	ldr	r3, [r3, #4]
 800eb56:	606b      	str	r3, [r5, #4]
 800eb58:	602a      	str	r2, [r5, #0]
 800eb5a:	e7ed      	b.n	800eb38 <ucdr_deserialize_double+0x100>
 800eb5c:	68a2      	ldr	r2, [r4, #8]
 800eb5e:	6923      	ldr	r3, [r4, #16]
 800eb60:	7da0      	ldrb	r0, [r4, #22]
 800eb62:	f884 9015 	strb.w	r9, [r4, #21]
 800eb66:	1b92      	subs	r2, r2, r6
 800eb68:	1b9b      	subs	r3, r3, r6
 800eb6a:	60a2      	str	r2, [r4, #8]
 800eb6c:	6123      	str	r3, [r4, #16]
 800eb6e:	f080 0001 	eor.w	r0, r0, #1
 800eb72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eb76:	68a3      	ldr	r3, [r4, #8]
 800eb78:	799b      	ldrb	r3, [r3, #6]
 800eb7a:	706b      	strb	r3, [r5, #1]
 800eb7c:	1cab      	adds	r3, r5, #2
 800eb7e:	68a2      	ldr	r2, [r4, #8]
 800eb80:	7952      	ldrb	r2, [r2, #5]
 800eb82:	f803 2b01 	strb.w	r2, [r3], #1
 800eb86:	68a2      	ldr	r2, [r4, #8]
 800eb88:	7912      	ldrb	r2, [r2, #4]
 800eb8a:	f803 2b01 	strb.w	r2, [r3], #1
 800eb8e:	68a2      	ldr	r2, [r4, #8]
 800eb90:	78d2      	ldrb	r2, [r2, #3]
 800eb92:	f803 2b01 	strb.w	r2, [r3], #1
 800eb96:	68a2      	ldr	r2, [r4, #8]
 800eb98:	7892      	ldrb	r2, [r2, #2]
 800eb9a:	f803 2b01 	strb.w	r2, [r3], #1
 800eb9e:	68a2      	ldr	r2, [r4, #8]
 800eba0:	7852      	ldrb	r2, [r2, #1]
 800eba2:	f803 2b01 	strb.w	r2, [r3], #1
 800eba6:	68a2      	ldr	r2, [r4, #8]
 800eba8:	7812      	ldrb	r2, [r2, #0]
 800ebaa:	701a      	strb	r2, [r3, #0]
 800ebac:	e796      	b.n	800eadc <ucdr_deserialize_double+0xa4>
 800ebae:	4639      	mov	r1, r7
 800ebb0:	4632      	mov	r2, r6
 800ebb2:	4628      	mov	r0, r5
 800ebb4:	f00a fd2b 	bl	801960e <memcpy>
 800ebb8:	68a1      	ldr	r1, [r4, #8]
 800ebba:	4642      	mov	r2, r8
 800ebbc:	19a8      	adds	r0, r5, r6
 800ebbe:	f00a fd26 	bl	801960e <memcpy>
 800ebc2:	e78b      	b.n	800eadc <ucdr_deserialize_double+0xa4>

0800ebc4 <ucdr_deserialize_endian_double>:
 800ebc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ebc8:	460f      	mov	r7, r1
 800ebca:	2108      	movs	r1, #8
 800ebcc:	4604      	mov	r4, r0
 800ebce:	4615      	mov	r5, r2
 800ebd0:	f000 f926 	bl	800ee20 <ucdr_buffer_alignment>
 800ebd4:	4601      	mov	r1, r0
 800ebd6:	4620      	mov	r0, r4
 800ebd8:	f894 9015 	ldrb.w	r9, [r4, #21]
 800ebdc:	f000 f964 	bl	800eea8 <ucdr_advance_buffer>
 800ebe0:	2108      	movs	r1, #8
 800ebe2:	4620      	mov	r0, r4
 800ebe4:	f000 f8bc 	bl	800ed60 <ucdr_check_buffer_available_for>
 800ebe8:	2800      	cmp	r0, #0
 800ebea:	d159      	bne.n	800eca0 <ucdr_deserialize_endian_double+0xdc>
 800ebec:	e9d4 6801 	ldrd	r6, r8, [r4, #4]
 800ebf0:	4546      	cmp	r6, r8
 800ebf2:	d950      	bls.n	800ec96 <ucdr_deserialize_endian_double+0xd2>
 800ebf4:	6923      	ldr	r3, [r4, #16]
 800ebf6:	60a6      	str	r6, [r4, #8]
 800ebf8:	eba6 0608 	sub.w	r6, r6, r8
 800ebfc:	4433      	add	r3, r6
 800ebfe:	f1c6 0a08 	rsb	sl, r6, #8
 800ec02:	6123      	str	r3, [r4, #16]
 800ec04:	4651      	mov	r1, sl
 800ec06:	4620      	mov	r0, r4
 800ec08:	f000 f8b6 	bl	800ed78 <ucdr_check_final_buffer_behavior>
 800ec0c:	2800      	cmp	r0, #0
 800ec0e:	d073      	beq.n	800ecf8 <ucdr_deserialize_endian_double+0x134>
 800ec10:	2f01      	cmp	r7, #1
 800ec12:	f000 809a 	beq.w	800ed4a <ucdr_deserialize_endian_double+0x186>
 800ec16:	f898 3007 	ldrb.w	r3, [r8, #7]
 800ec1a:	702b      	strb	r3, [r5, #0]
 800ec1c:	2e00      	cmp	r6, #0
 800ec1e:	d078      	beq.n	800ed12 <ucdr_deserialize_endian_double+0x14e>
 800ec20:	f898 3006 	ldrb.w	r3, [r8, #6]
 800ec24:	706b      	strb	r3, [r5, #1]
 800ec26:	2e01      	cmp	r6, #1
 800ec28:	f105 0302 	add.w	r3, r5, #2
 800ec2c:	d075      	beq.n	800ed1a <ucdr_deserialize_endian_double+0x156>
 800ec2e:	f898 3005 	ldrb.w	r3, [r8, #5]
 800ec32:	70ab      	strb	r3, [r5, #2]
 800ec34:	2e02      	cmp	r6, #2
 800ec36:	f105 0303 	add.w	r3, r5, #3
 800ec3a:	d072      	beq.n	800ed22 <ucdr_deserialize_endian_double+0x15e>
 800ec3c:	f898 3004 	ldrb.w	r3, [r8, #4]
 800ec40:	70eb      	strb	r3, [r5, #3]
 800ec42:	2e03      	cmp	r6, #3
 800ec44:	f105 0304 	add.w	r3, r5, #4
 800ec48:	d06f      	beq.n	800ed2a <ucdr_deserialize_endian_double+0x166>
 800ec4a:	f898 3003 	ldrb.w	r3, [r8, #3]
 800ec4e:	712b      	strb	r3, [r5, #4]
 800ec50:	2e04      	cmp	r6, #4
 800ec52:	f105 0305 	add.w	r3, r5, #5
 800ec56:	d06c      	beq.n	800ed32 <ucdr_deserialize_endian_double+0x16e>
 800ec58:	f898 3002 	ldrb.w	r3, [r8, #2]
 800ec5c:	716b      	strb	r3, [r5, #5]
 800ec5e:	2e05      	cmp	r6, #5
 800ec60:	f105 0306 	add.w	r3, r5, #6
 800ec64:	d069      	beq.n	800ed3a <ucdr_deserialize_endian_double+0x176>
 800ec66:	f898 3001 	ldrb.w	r3, [r8, #1]
 800ec6a:	71ab      	strb	r3, [r5, #6]
 800ec6c:	2e06      	cmp	r6, #6
 800ec6e:	f105 0307 	add.w	r3, r5, #7
 800ec72:	d066      	beq.n	800ed42 <ucdr_deserialize_endian_double+0x17e>
 800ec74:	f898 3000 	ldrb.w	r3, [r8]
 800ec78:	71eb      	strb	r3, [r5, #7]
 800ec7a:	6923      	ldr	r3, [r4, #16]
 800ec7c:	68a2      	ldr	r2, [r4, #8]
 800ec7e:	7da0      	ldrb	r0, [r4, #22]
 800ec80:	3308      	adds	r3, #8
 800ec82:	1b9e      	subs	r6, r3, r6
 800ec84:	2308      	movs	r3, #8
 800ec86:	4452      	add	r2, sl
 800ec88:	7563      	strb	r3, [r4, #21]
 800ec8a:	60a2      	str	r2, [r4, #8]
 800ec8c:	6126      	str	r6, [r4, #16]
 800ec8e:	f080 0001 	eor.w	r0, r0, #1
 800ec92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec96:	2108      	movs	r1, #8
 800ec98:	4620      	mov	r0, r4
 800ec9a:	f000 f86d 	bl	800ed78 <ucdr_check_final_buffer_behavior>
 800ec9e:	b308      	cbz	r0, 800ece4 <ucdr_deserialize_endian_double+0x120>
 800eca0:	2f01      	cmp	r7, #1
 800eca2:	68a3      	ldr	r3, [r4, #8]
 800eca4:	d023      	beq.n	800ecee <ucdr_deserialize_endian_double+0x12a>
 800eca6:	79db      	ldrb	r3, [r3, #7]
 800eca8:	702b      	strb	r3, [r5, #0]
 800ecaa:	68a3      	ldr	r3, [r4, #8]
 800ecac:	799b      	ldrb	r3, [r3, #6]
 800ecae:	706b      	strb	r3, [r5, #1]
 800ecb0:	68a3      	ldr	r3, [r4, #8]
 800ecb2:	795b      	ldrb	r3, [r3, #5]
 800ecb4:	70ab      	strb	r3, [r5, #2]
 800ecb6:	68a3      	ldr	r3, [r4, #8]
 800ecb8:	791b      	ldrb	r3, [r3, #4]
 800ecba:	70eb      	strb	r3, [r5, #3]
 800ecbc:	68a3      	ldr	r3, [r4, #8]
 800ecbe:	78db      	ldrb	r3, [r3, #3]
 800ecc0:	712b      	strb	r3, [r5, #4]
 800ecc2:	68a3      	ldr	r3, [r4, #8]
 800ecc4:	789b      	ldrb	r3, [r3, #2]
 800ecc6:	716b      	strb	r3, [r5, #5]
 800ecc8:	68a3      	ldr	r3, [r4, #8]
 800ecca:	785b      	ldrb	r3, [r3, #1]
 800eccc:	71ab      	strb	r3, [r5, #6]
 800ecce:	68a3      	ldr	r3, [r4, #8]
 800ecd0:	781b      	ldrb	r3, [r3, #0]
 800ecd2:	71eb      	strb	r3, [r5, #7]
 800ecd4:	68a2      	ldr	r2, [r4, #8]
 800ecd6:	6923      	ldr	r3, [r4, #16]
 800ecd8:	3208      	adds	r2, #8
 800ecda:	3308      	adds	r3, #8
 800ecdc:	2108      	movs	r1, #8
 800ecde:	60a2      	str	r2, [r4, #8]
 800ece0:	6123      	str	r3, [r4, #16]
 800ece2:	7561      	strb	r1, [r4, #21]
 800ece4:	7da0      	ldrb	r0, [r4, #22]
 800ece6:	f080 0001 	eor.w	r0, r0, #1
 800ecea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ecee:	681a      	ldr	r2, [r3, #0]
 800ecf0:	685b      	ldr	r3, [r3, #4]
 800ecf2:	606b      	str	r3, [r5, #4]
 800ecf4:	602a      	str	r2, [r5, #0]
 800ecf6:	e7ed      	b.n	800ecd4 <ucdr_deserialize_endian_double+0x110>
 800ecf8:	68a2      	ldr	r2, [r4, #8]
 800ecfa:	6923      	ldr	r3, [r4, #16]
 800ecfc:	7da0      	ldrb	r0, [r4, #22]
 800ecfe:	f884 9015 	strb.w	r9, [r4, #21]
 800ed02:	1b92      	subs	r2, r2, r6
 800ed04:	1b9b      	subs	r3, r3, r6
 800ed06:	60a2      	str	r2, [r4, #8]
 800ed08:	6123      	str	r3, [r4, #16]
 800ed0a:	f080 0001 	eor.w	r0, r0, #1
 800ed0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed12:	68a3      	ldr	r3, [r4, #8]
 800ed14:	799b      	ldrb	r3, [r3, #6]
 800ed16:	706b      	strb	r3, [r5, #1]
 800ed18:	1cab      	adds	r3, r5, #2
 800ed1a:	68a2      	ldr	r2, [r4, #8]
 800ed1c:	7952      	ldrb	r2, [r2, #5]
 800ed1e:	f803 2b01 	strb.w	r2, [r3], #1
 800ed22:	68a2      	ldr	r2, [r4, #8]
 800ed24:	7912      	ldrb	r2, [r2, #4]
 800ed26:	f803 2b01 	strb.w	r2, [r3], #1
 800ed2a:	68a2      	ldr	r2, [r4, #8]
 800ed2c:	78d2      	ldrb	r2, [r2, #3]
 800ed2e:	f803 2b01 	strb.w	r2, [r3], #1
 800ed32:	68a2      	ldr	r2, [r4, #8]
 800ed34:	7892      	ldrb	r2, [r2, #2]
 800ed36:	f803 2b01 	strb.w	r2, [r3], #1
 800ed3a:	68a2      	ldr	r2, [r4, #8]
 800ed3c:	7852      	ldrb	r2, [r2, #1]
 800ed3e:	f803 2b01 	strb.w	r2, [r3], #1
 800ed42:	68a2      	ldr	r2, [r4, #8]
 800ed44:	7812      	ldrb	r2, [r2, #0]
 800ed46:	701a      	strb	r2, [r3, #0]
 800ed48:	e797      	b.n	800ec7a <ucdr_deserialize_endian_double+0xb6>
 800ed4a:	4641      	mov	r1, r8
 800ed4c:	4632      	mov	r2, r6
 800ed4e:	4628      	mov	r0, r5
 800ed50:	f00a fc5d 	bl	801960e <memcpy>
 800ed54:	68a1      	ldr	r1, [r4, #8]
 800ed56:	4652      	mov	r2, sl
 800ed58:	19a8      	adds	r0, r5, r6
 800ed5a:	f00a fc58 	bl	801960e <memcpy>
 800ed5e:	e78c      	b.n	800ec7a <ucdr_deserialize_endian_double+0xb6>

0800ed60 <ucdr_check_buffer_available_for>:
 800ed60:	7d83      	ldrb	r3, [r0, #22]
 800ed62:	b93b      	cbnz	r3, 800ed74 <ucdr_check_buffer_available_for+0x14>
 800ed64:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800ed68:	4419      	add	r1, r3
 800ed6a:	4288      	cmp	r0, r1
 800ed6c:	bf34      	ite	cc
 800ed6e:	2000      	movcc	r0, #0
 800ed70:	2001      	movcs	r0, #1
 800ed72:	4770      	bx	lr
 800ed74:	2000      	movs	r0, #0
 800ed76:	4770      	bx	lr

0800ed78 <ucdr_check_final_buffer_behavior>:
 800ed78:	7d83      	ldrb	r3, [r0, #22]
 800ed7a:	b943      	cbnz	r3, 800ed8e <ucdr_check_final_buffer_behavior+0x16>
 800ed7c:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800ed80:	4291      	cmp	r1, r2
 800ed82:	b510      	push	{r4, lr}
 800ed84:	4604      	mov	r4, r0
 800ed86:	d205      	bcs.n	800ed94 <ucdr_check_final_buffer_behavior+0x1c>
 800ed88:	2301      	movs	r3, #1
 800ed8a:	4618      	mov	r0, r3
 800ed8c:	bd10      	pop	{r4, pc}
 800ed8e:	2300      	movs	r3, #0
 800ed90:	4618      	mov	r0, r3
 800ed92:	4770      	bx	lr
 800ed94:	6982      	ldr	r2, [r0, #24]
 800ed96:	b13a      	cbz	r2, 800eda8 <ucdr_check_final_buffer_behavior+0x30>
 800ed98:	69c1      	ldr	r1, [r0, #28]
 800ed9a:	4790      	blx	r2
 800ed9c:	f080 0301 	eor.w	r3, r0, #1
 800eda0:	b2db      	uxtb	r3, r3
 800eda2:	75a0      	strb	r0, [r4, #22]
 800eda4:	4618      	mov	r0, r3
 800eda6:	bd10      	pop	{r4, pc}
 800eda8:	2001      	movs	r0, #1
 800edaa:	75a0      	strb	r0, [r4, #22]
 800edac:	e7fa      	b.n	800eda4 <ucdr_check_final_buffer_behavior+0x2c>
 800edae:	bf00      	nop

0800edb0 <ucdr_set_on_full_buffer_callback>:
 800edb0:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800edb4:	4770      	bx	lr
 800edb6:	bf00      	nop

0800edb8 <ucdr_init_buffer_origin_offset_endian>:
 800edb8:	b410      	push	{r4}
 800edba:	9c01      	ldr	r4, [sp, #4]
 800edbc:	6001      	str	r1, [r0, #0]
 800edbe:	440a      	add	r2, r1
 800edc0:	6042      	str	r2, [r0, #4]
 800edc2:	190a      	adds	r2, r1, r4
 800edc4:	441c      	add	r4, r3
 800edc6:	e9c0 3403 	strd	r3, r4, [r0, #12]
 800edca:	6082      	str	r2, [r0, #8]
 800edcc:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800edd0:	7503      	strb	r3, [r0, #20]
 800edd2:	2200      	movs	r2, #0
 800edd4:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800edd8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eddc:	7542      	strb	r2, [r0, #21]
 800edde:	7582      	strb	r2, [r0, #22]
 800ede0:	4770      	bx	lr
 800ede2:	bf00      	nop

0800ede4 <ucdr_init_buffer_origin_offset>:
 800ede4:	b510      	push	{r4, lr}
 800ede6:	b082      	sub	sp, #8
 800ede8:	9c04      	ldr	r4, [sp, #16]
 800edea:	9400      	str	r4, [sp, #0]
 800edec:	2401      	movs	r4, #1
 800edee:	9401      	str	r4, [sp, #4]
 800edf0:	f7ff ffe2 	bl	800edb8 <ucdr_init_buffer_origin_offset_endian>
 800edf4:	b002      	add	sp, #8
 800edf6:	bd10      	pop	{r4, pc}

0800edf8 <ucdr_init_buffer_origin>:
 800edf8:	b510      	push	{r4, lr}
 800edfa:	b082      	sub	sp, #8
 800edfc:	2400      	movs	r4, #0
 800edfe:	9400      	str	r4, [sp, #0]
 800ee00:	f7ff fff0 	bl	800ede4 <ucdr_init_buffer_origin_offset>
 800ee04:	b002      	add	sp, #8
 800ee06:	bd10      	pop	{r4, pc}

0800ee08 <ucdr_init_buffer>:
 800ee08:	2300      	movs	r3, #0
 800ee0a:	f7ff bff5 	b.w	800edf8 <ucdr_init_buffer_origin>
 800ee0e:	bf00      	nop

0800ee10 <ucdr_alignment>:
 800ee10:	fbb0 f3f1 	udiv	r3, r0, r1
 800ee14:	fb03 0011 	mls	r0, r3, r1, r0
 800ee18:	1a08      	subs	r0, r1, r0
 800ee1a:	3901      	subs	r1, #1
 800ee1c:	4008      	ands	r0, r1
 800ee1e:	4770      	bx	lr

0800ee20 <ucdr_buffer_alignment>:
 800ee20:	7d43      	ldrb	r3, [r0, #21]
 800ee22:	428b      	cmp	r3, r1
 800ee24:	d208      	bcs.n	800ee38 <ucdr_buffer_alignment+0x18>
 800ee26:	6900      	ldr	r0, [r0, #16]
 800ee28:	fbb0 f3f1 	udiv	r3, r0, r1
 800ee2c:	fb01 0013 	mls	r0, r1, r3, r0
 800ee30:	1a08      	subs	r0, r1, r0
 800ee32:	3901      	subs	r1, #1
 800ee34:	4008      	ands	r0, r1
 800ee36:	4770      	bx	lr
 800ee38:	2000      	movs	r0, #0
 800ee3a:	4770      	bx	lr

0800ee3c <ucdr_align_to>:
 800ee3c:	b538      	push	{r3, r4, r5, lr}
 800ee3e:	4604      	mov	r4, r0
 800ee40:	460d      	mov	r5, r1
 800ee42:	f7ff ffed 	bl	800ee20 <ucdr_buffer_alignment>
 800ee46:	68a3      	ldr	r3, [r4, #8]
 800ee48:	6921      	ldr	r1, [r4, #16]
 800ee4a:	7565      	strb	r5, [r4, #21]
 800ee4c:	181a      	adds	r2, r3, r0
 800ee4e:	6863      	ldr	r3, [r4, #4]
 800ee50:	4293      	cmp	r3, r2
 800ee52:	4408      	add	r0, r1
 800ee54:	bf28      	it	cs
 800ee56:	4613      	movcs	r3, r2
 800ee58:	6120      	str	r0, [r4, #16]
 800ee5a:	60a3      	str	r3, [r4, #8]
 800ee5c:	bd38      	pop	{r3, r4, r5, pc}
 800ee5e:	bf00      	nop

0800ee60 <ucdr_buffer_length>:
 800ee60:	6882      	ldr	r2, [r0, #8]
 800ee62:	6800      	ldr	r0, [r0, #0]
 800ee64:	1a10      	subs	r0, r2, r0
 800ee66:	4770      	bx	lr

0800ee68 <ucdr_buffer_remaining>:
 800ee68:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800ee6c:	1a10      	subs	r0, r2, r0
 800ee6e:	4770      	bx	lr

0800ee70 <ucdr_check_final_buffer_behavior_array>:
 800ee70:	b538      	push	{r3, r4, r5, lr}
 800ee72:	7d83      	ldrb	r3, [r0, #22]
 800ee74:	b963      	cbnz	r3, 800ee90 <ucdr_check_final_buffer_behavior_array+0x20>
 800ee76:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800ee7a:	429a      	cmp	r2, r3
 800ee7c:	4604      	mov	r4, r0
 800ee7e:	460d      	mov	r5, r1
 800ee80:	d308      	bcc.n	800ee94 <ucdr_check_final_buffer_behavior_array+0x24>
 800ee82:	b139      	cbz	r1, 800ee94 <ucdr_check_final_buffer_behavior_array+0x24>
 800ee84:	6983      	ldr	r3, [r0, #24]
 800ee86:	b163      	cbz	r3, 800eea2 <ucdr_check_final_buffer_behavior_array+0x32>
 800ee88:	69c1      	ldr	r1, [r0, #28]
 800ee8a:	4798      	blx	r3
 800ee8c:	75a0      	strb	r0, [r4, #22]
 800ee8e:	b108      	cbz	r0, 800ee94 <ucdr_check_final_buffer_behavior_array+0x24>
 800ee90:	2000      	movs	r0, #0
 800ee92:	bd38      	pop	{r3, r4, r5, pc}
 800ee94:	4620      	mov	r0, r4
 800ee96:	f7ff ffe7 	bl	800ee68 <ucdr_buffer_remaining>
 800ee9a:	42a8      	cmp	r0, r5
 800ee9c:	bf28      	it	cs
 800ee9e:	4628      	movcs	r0, r5
 800eea0:	bd38      	pop	{r3, r4, r5, pc}
 800eea2:	2301      	movs	r3, #1
 800eea4:	7583      	strb	r3, [r0, #22]
 800eea6:	e7f3      	b.n	800ee90 <ucdr_check_final_buffer_behavior_array+0x20>

0800eea8 <ucdr_advance_buffer>:
 800eea8:	b538      	push	{r3, r4, r5, lr}
 800eeaa:	4604      	mov	r4, r0
 800eeac:	460d      	mov	r5, r1
 800eeae:	f7ff ff57 	bl	800ed60 <ucdr_check_buffer_available_for>
 800eeb2:	b178      	cbz	r0, 800eed4 <ucdr_advance_buffer+0x2c>
 800eeb4:	6923      	ldr	r3, [r4, #16]
 800eeb6:	68a2      	ldr	r2, [r4, #8]
 800eeb8:	442b      	add	r3, r5
 800eeba:	6123      	str	r3, [r4, #16]
 800eebc:	2301      	movs	r3, #1
 800eebe:	442a      	add	r2, r5
 800eec0:	7563      	strb	r3, [r4, #21]
 800eec2:	60a2      	str	r2, [r4, #8]
 800eec4:	bd38      	pop	{r3, r4, r5, pc}
 800eec6:	68a2      	ldr	r2, [r4, #8]
 800eec8:	6923      	ldr	r3, [r4, #16]
 800eeca:	4402      	add	r2, r0
 800eecc:	4403      	add	r3, r0
 800eece:	1a2d      	subs	r5, r5, r0
 800eed0:	60a2      	str	r2, [r4, #8]
 800eed2:	6123      	str	r3, [r4, #16]
 800eed4:	4629      	mov	r1, r5
 800eed6:	2201      	movs	r2, #1
 800eed8:	4620      	mov	r0, r4
 800eeda:	f7ff ffc9 	bl	800ee70 <ucdr_check_final_buffer_behavior_array>
 800eede:	2800      	cmp	r0, #0
 800eee0:	d1f1      	bne.n	800eec6 <ucdr_advance_buffer+0x1e>
 800eee2:	2301      	movs	r3, #1
 800eee4:	7563      	strb	r3, [r4, #21]
 800eee6:	bd38      	pop	{r3, r4, r5, pc}

0800eee8 <ucdr_serialize_sequence_char>:
 800eee8:	b570      	push	{r4, r5, r6, lr}
 800eeea:	4615      	mov	r5, r2
 800eeec:	460e      	mov	r6, r1
 800eeee:	7d01      	ldrb	r1, [r0, #20]
 800eef0:	4604      	mov	r4, r0
 800eef2:	f7fe fcf7 	bl	800d8e4 <ucdr_serialize_endian_uint32_t>
 800eef6:	b90d      	cbnz	r5, 800eefc <ucdr_serialize_sequence_char+0x14>
 800eef8:	2001      	movs	r0, #1
 800eefa:	bd70      	pop	{r4, r5, r6, pc}
 800eefc:	7d21      	ldrb	r1, [r4, #20]
 800eefe:	462b      	mov	r3, r5
 800ef00:	4632      	mov	r2, r6
 800ef02:	4620      	mov	r0, r4
 800ef04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ef08:	f7fd be38 	b.w	800cb7c <ucdr_serialize_endian_array_char>

0800ef0c <ucdr_deserialize_sequence_char>:
 800ef0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef10:	461d      	mov	r5, r3
 800ef12:	4616      	mov	r6, r2
 800ef14:	460f      	mov	r7, r1
 800ef16:	461a      	mov	r2, r3
 800ef18:	7d01      	ldrb	r1, [r0, #20]
 800ef1a:	4604      	mov	r4, r0
 800ef1c:	f7fe fe0a 	bl	800db34 <ucdr_deserialize_endian_uint32_t>
 800ef20:	682b      	ldr	r3, [r5, #0]
 800ef22:	429e      	cmp	r6, r3
 800ef24:	bf3c      	itt	cc
 800ef26:	2201      	movcc	r2, #1
 800ef28:	75a2      	strbcc	r2, [r4, #22]
 800ef2a:	b913      	cbnz	r3, 800ef32 <ucdr_deserialize_sequence_char+0x26>
 800ef2c:	2001      	movs	r0, #1
 800ef2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef32:	7d21      	ldrb	r1, [r4, #20]
 800ef34:	463a      	mov	r2, r7
 800ef36:	4620      	mov	r0, r4
 800ef38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ef3c:	f7fd be50 	b.w	800cbe0 <ucdr_deserialize_endian_array_char>

0800ef40 <ucdr_serialize_sequence_uint8_t>:
 800ef40:	b570      	push	{r4, r5, r6, lr}
 800ef42:	4615      	mov	r5, r2
 800ef44:	460e      	mov	r6, r1
 800ef46:	7d01      	ldrb	r1, [r0, #20]
 800ef48:	4604      	mov	r4, r0
 800ef4a:	f7fe fccb 	bl	800d8e4 <ucdr_serialize_endian_uint32_t>
 800ef4e:	b90d      	cbnz	r5, 800ef54 <ucdr_serialize_sequence_uint8_t+0x14>
 800ef50:	2001      	movs	r0, #1
 800ef52:	bd70      	pop	{r4, r5, r6, pc}
 800ef54:	7d21      	ldrb	r1, [r4, #20]
 800ef56:	462b      	mov	r3, r5
 800ef58:	4632      	mov	r2, r6
 800ef5a:	4620      	mov	r0, r4
 800ef5c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ef60:	f7fd bea2 	b.w	800cca8 <ucdr_serialize_endian_array_uint8_t>

0800ef64 <ucdr_deserialize_sequence_uint8_t>:
 800ef64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef68:	461d      	mov	r5, r3
 800ef6a:	4616      	mov	r6, r2
 800ef6c:	460f      	mov	r7, r1
 800ef6e:	461a      	mov	r2, r3
 800ef70:	7d01      	ldrb	r1, [r0, #20]
 800ef72:	4604      	mov	r4, r0
 800ef74:	f7fe fdde 	bl	800db34 <ucdr_deserialize_endian_uint32_t>
 800ef78:	682b      	ldr	r3, [r5, #0]
 800ef7a:	429e      	cmp	r6, r3
 800ef7c:	bf3c      	itt	cc
 800ef7e:	2201      	movcc	r2, #1
 800ef80:	75a2      	strbcc	r2, [r4, #22]
 800ef82:	b913      	cbnz	r3, 800ef8a <ucdr_deserialize_sequence_uint8_t+0x26>
 800ef84:	2001      	movs	r0, #1
 800ef86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef8a:	7d21      	ldrb	r1, [r4, #20]
 800ef8c:	463a      	mov	r2, r7
 800ef8e:	4620      	mov	r0, r4
 800ef90:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ef94:	f7fd beec 	b.w	800cd70 <ucdr_deserialize_endian_array_uint8_t>

0800ef98 <ucdr_serialize_sequence_int32_t>:
 800ef98:	b570      	push	{r4, r5, r6, lr}
 800ef9a:	4615      	mov	r5, r2
 800ef9c:	460e      	mov	r6, r1
 800ef9e:	7d01      	ldrb	r1, [r0, #20]
 800efa0:	4604      	mov	r4, r0
 800efa2:	f7fe fc9f 	bl	800d8e4 <ucdr_serialize_endian_uint32_t>
 800efa6:	b90d      	cbnz	r5, 800efac <ucdr_serialize_sequence_int32_t+0x14>
 800efa8:	2001      	movs	r0, #1
 800efaa:	bd70      	pop	{r4, r5, r6, pc}
 800efac:	7d21      	ldrb	r1, [r4, #20]
 800efae:	462b      	mov	r3, r5
 800efb0:	4632      	mov	r2, r6
 800efb2:	4620      	mov	r0, r4
 800efb4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800efb8:	f7fd bfb8 	b.w	800cf2c <ucdr_serialize_endian_array_int32_t>

0800efbc <ucdr_deserialize_sequence_int32_t>:
 800efbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800efc0:	461d      	mov	r5, r3
 800efc2:	4616      	mov	r6, r2
 800efc4:	460f      	mov	r7, r1
 800efc6:	461a      	mov	r2, r3
 800efc8:	7d01      	ldrb	r1, [r0, #20]
 800efca:	4604      	mov	r4, r0
 800efcc:	f7fe fdb2 	bl	800db34 <ucdr_deserialize_endian_uint32_t>
 800efd0:	682b      	ldr	r3, [r5, #0]
 800efd2:	429e      	cmp	r6, r3
 800efd4:	bf3c      	itt	cc
 800efd6:	2201      	movcc	r2, #1
 800efd8:	75a2      	strbcc	r2, [r4, #22]
 800efda:	b913      	cbnz	r3, 800efe2 <ucdr_deserialize_sequence_int32_t+0x26>
 800efdc:	2001      	movs	r0, #1
 800efde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efe2:	7d21      	ldrb	r1, [r4, #20]
 800efe4:	463a      	mov	r2, r7
 800efe6:	4620      	mov	r0, r4
 800efe8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800efec:	f7fd bff4 	b.w	800cfd8 <ucdr_deserialize_endian_array_int32_t>

0800eff0 <ucdr_serialize_sequence_float>:
 800eff0:	b570      	push	{r4, r5, r6, lr}
 800eff2:	4615      	mov	r5, r2
 800eff4:	460e      	mov	r6, r1
 800eff6:	7d01      	ldrb	r1, [r0, #20]
 800eff8:	4604      	mov	r4, r0
 800effa:	f7fe fc73 	bl	800d8e4 <ucdr_serialize_endian_uint32_t>
 800effe:	b90d      	cbnz	r5, 800f004 <ucdr_serialize_sequence_float+0x14>
 800f000:	2001      	movs	r0, #1
 800f002:	bd70      	pop	{r4, r5, r6, pc}
 800f004:	7d21      	ldrb	r1, [r4, #20]
 800f006:	462b      	mov	r3, r5
 800f008:	4632      	mov	r2, r6
 800f00a:	4620      	mov	r0, r4
 800f00c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f010:	f7fe b838 	b.w	800d084 <ucdr_serialize_endian_array_float>

0800f014 <ucdr_deserialize_sequence_float>:
 800f014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f018:	461d      	mov	r5, r3
 800f01a:	4616      	mov	r6, r2
 800f01c:	460f      	mov	r7, r1
 800f01e:	461a      	mov	r2, r3
 800f020:	7d01      	ldrb	r1, [r0, #20]
 800f022:	4604      	mov	r4, r0
 800f024:	f7fe fd86 	bl	800db34 <ucdr_deserialize_endian_uint32_t>
 800f028:	682b      	ldr	r3, [r5, #0]
 800f02a:	429e      	cmp	r6, r3
 800f02c:	bf3c      	itt	cc
 800f02e:	2201      	movcc	r2, #1
 800f030:	75a2      	strbcc	r2, [r4, #22]
 800f032:	b913      	cbnz	r3, 800f03a <ucdr_deserialize_sequence_float+0x26>
 800f034:	2001      	movs	r0, #1
 800f036:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f03a:	7d21      	ldrb	r1, [r4, #20]
 800f03c:	463a      	mov	r2, r7
 800f03e:	4620      	mov	r0, r4
 800f040:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f044:	f7fe b872 	b.w	800d12c <ucdr_deserialize_endian_array_float>

0800f048 <uxr_buffer_delete_entity>:
 800f048:	b510      	push	{r4, lr}
 800f04a:	2300      	movs	r3, #0
 800f04c:	b08e      	sub	sp, #56	@ 0x38
 800f04e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800f052:	2303      	movs	r3, #3
 800f054:	9300      	str	r3, [sp, #0]
 800f056:	2204      	movs	r2, #4
 800f058:	ab06      	add	r3, sp, #24
 800f05a:	4604      	mov	r4, r0
 800f05c:	9103      	str	r1, [sp, #12]
 800f05e:	f001 f951 	bl	8010304 <uxr_prepare_stream_to_write_submessage>
 800f062:	b918      	cbnz	r0, 800f06c <uxr_buffer_delete_entity+0x24>
 800f064:	4604      	mov	r4, r0
 800f066:	4620      	mov	r0, r4
 800f068:	b00e      	add	sp, #56	@ 0x38
 800f06a:	bd10      	pop	{r4, pc}
 800f06c:	9902      	ldr	r1, [sp, #8]
 800f06e:	aa05      	add	r2, sp, #20
 800f070:	4620      	mov	r0, r4
 800f072:	f001 fa7d 	bl	8010570 <uxr_init_base_object_request>
 800f076:	a905      	add	r1, sp, #20
 800f078:	4604      	mov	r4, r0
 800f07a:	a806      	add	r0, sp, #24
 800f07c:	f002 fcce 	bl	8011a1c <uxr_serialize_DELETE_Payload>
 800f080:	4620      	mov	r0, r4
 800f082:	b00e      	add	sp, #56	@ 0x38
 800f084:	bd10      	pop	{r4, pc}
 800f086:	bf00      	nop

0800f088 <uxr_common_create_entity>:
 800f088:	b510      	push	{r4, lr}
 800f08a:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800f08e:	b08c      	sub	sp, #48	@ 0x30
 800f090:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800f094:	f1bc 0f01 	cmp.w	ip, #1
 800f098:	bf0c      	ite	eq
 800f09a:	f003 0201 	andeq.w	r2, r3, #1
 800f09e:	2200      	movne	r2, #0
 800f0a0:	330e      	adds	r3, #14
 800f0a2:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 800f0a6:	9101      	str	r1, [sp, #4]
 800f0a8:	441a      	add	r2, r3
 800f0aa:	2301      	movs	r3, #1
 800f0ac:	9300      	str	r3, [sp, #0]
 800f0ae:	9903      	ldr	r1, [sp, #12]
 800f0b0:	ab04      	add	r3, sp, #16
 800f0b2:	b292      	uxth	r2, r2
 800f0b4:	4604      	mov	r4, r0
 800f0b6:	f001 f925 	bl	8010304 <uxr_prepare_stream_to_write_submessage>
 800f0ba:	b918      	cbnz	r0, 800f0c4 <uxr_common_create_entity+0x3c>
 800f0bc:	4604      	mov	r4, r0
 800f0be:	4620      	mov	r0, r4
 800f0c0:	b00c      	add	sp, #48	@ 0x30
 800f0c2:	bd10      	pop	{r4, pc}
 800f0c4:	9902      	ldr	r1, [sp, #8]
 800f0c6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800f0c8:	4620      	mov	r0, r4
 800f0ca:	f001 fa51 	bl	8010570 <uxr_init_base_object_request>
 800f0ce:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800f0d0:	4604      	mov	r4, r0
 800f0d2:	a804      	add	r0, sp, #16
 800f0d4:	f002 fbfe 	bl	80118d4 <uxr_serialize_CREATE_Payload>
 800f0d8:	4620      	mov	r0, r4
 800f0da:	b00c      	add	sp, #48	@ 0x30
 800f0dc:	bd10      	pop	{r4, pc}
 800f0de:	bf00      	nop

0800f0e0 <uxr_buffer_create_participant_bin>:
 800f0e0:	b570      	push	{r4, r5, r6, lr}
 800f0e2:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 800f0e6:	ac11      	add	r4, sp, #68	@ 0x44
 800f0e8:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 800f0ec:	2303      	movs	r3, #3
 800f0ee:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800f0f2:	7223      	strb	r3, [r4, #8]
 800f0f4:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 800f0f6:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 800f0fa:	2201      	movs	r2, #1
 800f0fc:	2100      	movs	r1, #0
 800f0fe:	4605      	mov	r5, r0
 800f100:	7122      	strb	r2, [r4, #4]
 800f102:	f88d 1014 	strb.w	r1, [sp, #20]
 800f106:	b1cb      	cbz	r3, 800f13c <uxr_buffer_create_participant_bin+0x5c>
 800f108:	f88d 201c 	strb.w	r2, [sp, #28]
 800f10c:	9308      	str	r3, [sp, #32]
 800f10e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f112:	a915      	add	r1, sp, #84	@ 0x54
 800f114:	a809      	add	r0, sp, #36	@ 0x24
 800f116:	f7ff fe77 	bl	800ee08 <ucdr_init_buffer>
 800f11a:	a905      	add	r1, sp, #20
 800f11c:	a809      	add	r0, sp, #36	@ 0x24
 800f11e:	f001 ffbb 	bl	8011098 <uxr_serialize_OBJK_DomainParticipant_Binary>
 800f122:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f124:	9600      	str	r6, [sp, #0]
 800f126:	9401      	str	r4, [sp, #4]
 800f128:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800f12c:	60e3      	str	r3, [r4, #12]
 800f12e:	4628      	mov	r0, r5
 800f130:	b29b      	uxth	r3, r3
 800f132:	f7ff ffa9 	bl	800f088 <uxr_common_create_entity>
 800f136:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 800f13a:	bd70      	pop	{r4, r5, r6, pc}
 800f13c:	f88d 301c 	strb.w	r3, [sp, #28]
 800f140:	e7e5      	b.n	800f10e <uxr_buffer_create_participant_bin+0x2e>
 800f142:	bf00      	nop

0800f144 <uxr_buffer_create_topic_bin>:
 800f144:	b570      	push	{r4, r5, r6, lr}
 800f146:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 800f14a:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800f14e:	9105      	str	r1, [sp, #20]
 800f150:	4605      	mov	r5, r0
 800f152:	a997      	add	r1, sp, #604	@ 0x25c
 800f154:	4618      	mov	r0, r3
 800f156:	2302      	movs	r3, #2
 800f158:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 800f15c:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 800f160:	f000 f996 	bl	800f490 <uxr_object_id_to_raw>
 800f164:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 800f166:	9306      	str	r3, [sp, #24]
 800f168:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 800f16a:	930a      	str	r3, [sp, #40]	@ 0x28
 800f16c:	2303      	movs	r3, #3
 800f16e:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800f172:	2301      	movs	r3, #1
 800f174:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f178:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800f17c:	a917      	add	r1, sp, #92	@ 0x5c
 800f17e:	2300      	movs	r3, #0
 800f180:	a80b      	add	r0, sp, #44	@ 0x2c
 800f182:	f88d 301c 	strb.w	r3, [sp, #28]
 800f186:	f7ff fe3f 	bl	800ee08 <ucdr_init_buffer>
 800f18a:	a906      	add	r1, sp, #24
 800f18c:	a80b      	add	r0, sp, #44	@ 0x2c
 800f18e:	f001 ffa5 	bl	80110dc <uxr_serialize_OBJK_Topic_Binary>
 800f192:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f194:	9316      	str	r3, [sp, #88]	@ 0x58
 800f196:	ac13      	add	r4, sp, #76	@ 0x4c
 800f198:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800f19c:	9600      	str	r6, [sp, #0]
 800f19e:	9401      	str	r4, [sp, #4]
 800f1a0:	b29b      	uxth	r3, r3
 800f1a2:	4628      	mov	r0, r5
 800f1a4:	f7ff ff70 	bl	800f088 <uxr_common_create_entity>
 800f1a8:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 800f1ac:	bd70      	pop	{r4, r5, r6, pc}
 800f1ae:	bf00      	nop

0800f1b0 <uxr_buffer_create_publisher_bin>:
 800f1b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f1b2:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 800f1b6:	4605      	mov	r5, r0
 800f1b8:	9105      	str	r1, [sp, #20]
 800f1ba:	4618      	mov	r0, r3
 800f1bc:	2603      	movs	r6, #3
 800f1be:	a992      	add	r1, sp, #584	@ 0x248
 800f1c0:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800f1c4:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 800f1c8:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 800f1cc:	f000 f960 	bl	800f490 <uxr_object_id_to_raw>
 800f1d0:	2300      	movs	r3, #0
 800f1d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f1d6:	a912      	add	r1, sp, #72	@ 0x48
 800f1d8:	a806      	add	r0, sp, #24
 800f1da:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 800f1de:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 800f1e2:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 800f1e6:	f7ff fe0f 	bl	800ee08 <ucdr_init_buffer>
 800f1ea:	a993      	add	r1, sp, #588	@ 0x24c
 800f1ec:	a806      	add	r0, sp, #24
 800f1ee:	f002 f829 	bl	8011244 <uxr_serialize_OBJK_Publisher_Binary>
 800f1f2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f1f4:	9311      	str	r3, [sp, #68]	@ 0x44
 800f1f6:	ac0e      	add	r4, sp, #56	@ 0x38
 800f1f8:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800f1fc:	9700      	str	r7, [sp, #0]
 800f1fe:	9401      	str	r4, [sp, #4]
 800f200:	b29b      	uxth	r3, r3
 800f202:	4628      	mov	r0, r5
 800f204:	f7ff ff40 	bl	800f088 <uxr_common_create_entity>
 800f208:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 800f20c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f20e:	bf00      	nop

0800f210 <uxr_buffer_create_subscriber_bin>:
 800f210:	b570      	push	{r4, r5, r6, lr}
 800f212:	f5ad 6d91 	sub.w	sp, sp, #1160	@ 0x488
 800f216:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800f21a:	9105      	str	r1, [sp, #20]
 800f21c:	4605      	mov	r5, r0
 800f21e:	a992      	add	r1, sp, #584	@ 0x248
 800f220:	4618      	mov	r0, r3
 800f222:	2304      	movs	r3, #4
 800f224:	f89d 6498 	ldrb.w	r6, [sp, #1176]	@ 0x498
 800f228:	f88d 303c 	strb.w	r3, [sp, #60]	@ 0x3c
 800f22c:	f000 f930 	bl	800f490 <uxr_object_id_to_raw>
 800f230:	2300      	movs	r3, #0
 800f232:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f236:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 800f23a:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 800f23e:	a912      	add	r1, sp, #72	@ 0x48
 800f240:	2303      	movs	r3, #3
 800f242:	a806      	add	r0, sp, #24
 800f244:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 800f248:	f7ff fdde 	bl	800ee08 <ucdr_init_buffer>
 800f24c:	a993      	add	r1, sp, #588	@ 0x24c
 800f24e:	a806      	add	r0, sp, #24
 800f250:	f002 f8a8 	bl	80113a4 <uxr_serialize_OBJK_Subscriber_Binary>
 800f254:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f256:	9311      	str	r3, [sp, #68]	@ 0x44
 800f258:	ac0e      	add	r4, sp, #56	@ 0x38
 800f25a:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800f25e:	9600      	str	r6, [sp, #0]
 800f260:	9401      	str	r4, [sp, #4]
 800f262:	b29b      	uxth	r3, r3
 800f264:	4628      	mov	r0, r5
 800f266:	f7ff ff0f 	bl	800f088 <uxr_common_create_entity>
 800f26a:	f50d 6d91 	add.w	sp, sp, #1160	@ 0x488
 800f26e:	bd70      	pop	{r4, r5, r6, pc}

0800f270 <uxr_buffer_create_datawriter_bin>:
 800f270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f274:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800f278:	ac1d      	add	r4, sp, #116	@ 0x74
 800f27a:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800f27e:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 800f282:	9105      	str	r1, [sp, #20]
 800f284:	4606      	mov	r6, r0
 800f286:	a9a1      	add	r1, sp, #644	@ 0x284
 800f288:	4618      	mov	r0, r3
 800f28a:	2305      	movs	r3, #5
 800f28c:	7123      	strb	r3, [r4, #4]
 800f28e:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 800f292:	2703      	movs	r7, #3
 800f294:	f000 f8fc 	bl	800f490 <uxr_object_id_to_raw>
 800f298:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 800f29a:	7227      	strb	r7, [r4, #8]
 800f29c:	a90e      	add	r1, sp, #56	@ 0x38
 800f29e:	f000 f8f7 	bl	800f490 <uxr_object_id_to_raw>
 800f2a2:	2300      	movs	r3, #0
 800f2a4:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 800f2a8:	f89d 22a5 	ldrb.w	r2, [sp, #677]	@ 0x2a5
 800f2ac:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 800f2b0:	3d00      	subs	r5, #0
 800f2b2:	bf18      	it	ne
 800f2b4:	2501      	movne	r5, #1
 800f2b6:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 800f2ba:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 800f2be:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800f2c2:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800f2c6:	2301      	movs	r3, #1
 800f2c8:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 800f2cc:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 800f2d0:	bb8a      	cbnz	r2, 800f336 <uxr_buffer_create_datawriter_bin+0xc6>
 800f2d2:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800f2d6:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 800f2da:	f04f 0c13 	mov.w	ip, #19
 800f2de:	250b      	movs	r5, #11
 800f2e0:	2221      	movs	r2, #33	@ 0x21
 800f2e2:	2111      	movs	r1, #17
 800f2e4:	2009      	movs	r0, #9
 800f2e6:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 800f2ea:	b923      	cbnz	r3, 800f2f6 <uxr_buffer_create_datawriter_bin+0x86>
 800f2ec:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 800f2f0:	4672      	mov	r2, lr
 800f2f2:	4661      	mov	r1, ip
 800f2f4:	4628      	mov	r0, r5
 800f2f6:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 800f2fa:	2b01      	cmp	r3, #1
 800f2fc:	d025      	beq.n	800f34a <uxr_buffer_create_datawriter_bin+0xda>
 800f2fe:	2b03      	cmp	r3, #3
 800f300:	d029      	beq.n	800f356 <uxr_buffer_create_datawriter_bin+0xe6>
 800f302:	b32b      	cbz	r3, 800f350 <uxr_buffer_create_datawriter_bin+0xe0>
 800f304:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f308:	a921      	add	r1, sp, #132	@ 0x84
 800f30a:	a806      	add	r0, sp, #24
 800f30c:	f7ff fd7c 	bl	800ee08 <ucdr_init_buffer>
 800f310:	a90e      	add	r1, sp, #56	@ 0x38
 800f312:	a806      	add	r0, sp, #24
 800f314:	f002 f8f8 	bl	8011508 <uxr_serialize_OBJK_DataWriter_Binary>
 800f318:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f31a:	f8cd 8000 	str.w	r8, [sp]
 800f31e:	9401      	str	r4, [sp, #4]
 800f320:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800f324:	60e3      	str	r3, [r4, #12]
 800f326:	4630      	mov	r0, r6
 800f328:	b29b      	uxth	r3, r3
 800f32a:	f7ff fead 	bl	800f088 <uxr_common_create_entity>
 800f32e:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800f332:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f336:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 800f33a:	f04f 0c12 	mov.w	ip, #18
 800f33e:	250a      	movs	r5, #10
 800f340:	2220      	movs	r2, #32
 800f342:	2110      	movs	r1, #16
 800f344:	2008      	movs	r0, #8
 800f346:	2702      	movs	r7, #2
 800f348:	e7cd      	b.n	800f2e6 <uxr_buffer_create_datawriter_bin+0x76>
 800f34a:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 800f34e:	e7d9      	b.n	800f304 <uxr_buffer_create_datawriter_bin+0x94>
 800f350:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 800f354:	e7d6      	b.n	800f304 <uxr_buffer_create_datawriter_bin+0x94>
 800f356:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 800f35a:	e7d3      	b.n	800f304 <uxr_buffer_create_datawriter_bin+0x94>

0800f35c <uxr_buffer_create_datareader_bin>:
 800f35c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f360:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800f364:	ac1f      	add	r4, sp, #124	@ 0x7c
 800f366:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800f36a:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	@ 0x2b0
 800f36e:	9105      	str	r1, [sp, #20]
 800f370:	4606      	mov	r6, r0
 800f372:	a9a3      	add	r1, sp, #652	@ 0x28c
 800f374:	4618      	mov	r0, r3
 800f376:	2306      	movs	r3, #6
 800f378:	7123      	strb	r3, [r4, #4]
 800f37a:	f89d 82b4 	ldrb.w	r8, [sp, #692]	@ 0x2b4
 800f37e:	2703      	movs	r7, #3
 800f380:	f000 f886 	bl	800f490 <uxr_object_id_to_raw>
 800f384:	98aa      	ldr	r0, [sp, #680]	@ 0x2a8
 800f386:	7227      	strb	r7, [r4, #8]
 800f388:	a90e      	add	r1, sp, #56	@ 0x38
 800f38a:	f000 f881 	bl	800f490 <uxr_object_id_to_raw>
 800f38e:	2300      	movs	r3, #0
 800f390:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 800f394:	f89d 22ad 	ldrb.w	r2, [sp, #685]	@ 0x2ad
 800f398:	f88d 3070 	strb.w	r3, [sp, #112]	@ 0x70
 800f39c:	3d00      	subs	r5, #0
 800f39e:	bf18      	it	ne
 800f3a0:	2501      	movne	r5, #1
 800f3a2:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 800f3a6:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 800f3aa:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 800f3ae:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800f3b2:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800f3b6:	2301      	movs	r3, #1
 800f3b8:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 800f3bc:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 800f3c0:	bb8a      	cbnz	r2, 800f426 <uxr_buffer_create_datareader_bin+0xca>
 800f3c2:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800f3c6:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 800f3ca:	f04f 0c13 	mov.w	ip, #19
 800f3ce:	250b      	movs	r5, #11
 800f3d0:	2221      	movs	r2, #33	@ 0x21
 800f3d2:	2111      	movs	r1, #17
 800f3d4:	2009      	movs	r0, #9
 800f3d6:	f89d 32ae 	ldrb.w	r3, [sp, #686]	@ 0x2ae
 800f3da:	b923      	cbnz	r3, 800f3e6 <uxr_buffer_create_datareader_bin+0x8a>
 800f3dc:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 800f3e0:	4672      	mov	r2, lr
 800f3e2:	4661      	mov	r1, ip
 800f3e4:	4628      	mov	r0, r5
 800f3e6:	f89d 32ac 	ldrb.w	r3, [sp, #684]	@ 0x2ac
 800f3ea:	2b01      	cmp	r3, #1
 800f3ec:	d025      	beq.n	800f43a <uxr_buffer_create_datareader_bin+0xde>
 800f3ee:	2b03      	cmp	r3, #3
 800f3f0:	d029      	beq.n	800f446 <uxr_buffer_create_datareader_bin+0xea>
 800f3f2:	b32b      	cbz	r3, 800f440 <uxr_buffer_create_datareader_bin+0xe4>
 800f3f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f3f8:	a923      	add	r1, sp, #140	@ 0x8c
 800f3fa:	a806      	add	r0, sp, #24
 800f3fc:	f7ff fd04 	bl	800ee08 <ucdr_init_buffer>
 800f400:	a90e      	add	r1, sp, #56	@ 0x38
 800f402:	a806      	add	r0, sp, #24
 800f404:	f002 f844 	bl	8011490 <uxr_serialize_OBJK_DataReader_Binary>
 800f408:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f40a:	f8cd 8000 	str.w	r8, [sp]
 800f40e:	9401      	str	r4, [sp, #4]
 800f410:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800f414:	60e3      	str	r3, [r4, #12]
 800f416:	4630      	mov	r0, r6
 800f418:	b29b      	uxth	r3, r3
 800f41a:	f7ff fe35 	bl	800f088 <uxr_common_create_entity>
 800f41e:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800f422:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f426:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 800f42a:	f04f 0c12 	mov.w	ip, #18
 800f42e:	250a      	movs	r5, #10
 800f430:	2220      	movs	r2, #32
 800f432:	2110      	movs	r1, #16
 800f434:	2008      	movs	r0, #8
 800f436:	2702      	movs	r7, #2
 800f438:	e7cd      	b.n	800f3d6 <uxr_buffer_create_datareader_bin+0x7a>
 800f43a:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 800f43e:	e7d9      	b.n	800f3f4 <uxr_buffer_create_datareader_bin+0x98>
 800f440:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 800f444:	e7d6      	b.n	800f3f4 <uxr_buffer_create_datareader_bin+0x98>
 800f446:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 800f44a:	e7d3      	b.n	800f3f4 <uxr_buffer_create_datareader_bin+0x98>

0800f44c <uxr_object_id>:
 800f44c:	b082      	sub	sp, #8
 800f44e:	2300      	movs	r3, #0
 800f450:	f88d 1006 	strb.w	r1, [sp, #6]
 800f454:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800f458:	f360 030f 	bfi	r3, r0, #0, #16
 800f45c:	f362 431f 	bfi	r3, r2, #16, #16
 800f460:	4618      	mov	r0, r3
 800f462:	b002      	add	sp, #8
 800f464:	4770      	bx	lr
 800f466:	bf00      	nop

0800f468 <uxr_object_id_from_raw>:
 800f468:	7843      	ldrb	r3, [r0, #1]
 800f46a:	7801      	ldrb	r1, [r0, #0]
 800f46c:	b082      	sub	sp, #8
 800f46e:	f003 020f 	and.w	r2, r3, #15
 800f472:	f88d 2006 	strb.w	r2, [sp, #6]
 800f476:	091b      	lsrs	r3, r3, #4
 800f478:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800f47c:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800f480:	2000      	movs	r0, #0
 800f482:	f363 000f 	bfi	r0, r3, #0, #16
 800f486:	f362 401f 	bfi	r0, r2, #16, #16
 800f48a:	b002      	add	sp, #8
 800f48c:	4770      	bx	lr
 800f48e:	bf00      	nop

0800f490 <uxr_object_id_to_raw>:
 800f490:	4602      	mov	r2, r0
 800f492:	f3c0 4303 	ubfx	r3, r0, #16, #4
 800f496:	b082      	sub	sp, #8
 800f498:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 800f49c:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 800f4a0:	f881 c000 	strb.w	ip, [r1]
 800f4a4:	7048      	strb	r0, [r1, #1]
 800f4a6:	b002      	add	sp, #8
 800f4a8:	4770      	bx	lr
 800f4aa:	bf00      	nop

0800f4ac <on_get_fragmentation_info>:
 800f4ac:	b500      	push	{lr}
 800f4ae:	b08b      	sub	sp, #44	@ 0x2c
 800f4b0:	4601      	mov	r1, r0
 800f4b2:	2204      	movs	r2, #4
 800f4b4:	a802      	add	r0, sp, #8
 800f4b6:	f7ff fca7 	bl	800ee08 <ucdr_init_buffer>
 800f4ba:	f10d 0305 	add.w	r3, sp, #5
 800f4be:	f10d 0206 	add.w	r2, sp, #6
 800f4c2:	a901      	add	r1, sp, #4
 800f4c4:	a802      	add	r0, sp, #8
 800f4c6:	f001 f9d5 	bl	8010874 <uxr_read_submessage_header>
 800f4ca:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f4ce:	2b0d      	cmp	r3, #13
 800f4d0:	d003      	beq.n	800f4da <on_get_fragmentation_info+0x2e>
 800f4d2:	2000      	movs	r0, #0
 800f4d4:	b00b      	add	sp, #44	@ 0x2c
 800f4d6:	f85d fb04 	ldr.w	pc, [sp], #4
 800f4da:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800f4de:	f013 0f02 	tst.w	r3, #2
 800f4e2:	bf14      	ite	ne
 800f4e4:	2002      	movne	r0, #2
 800f4e6:	2001      	moveq	r0, #1
 800f4e8:	b00b      	add	sp, #44	@ 0x2c
 800f4ea:	f85d fb04 	ldr.w	pc, [sp], #4
 800f4ee:	bf00      	nop

0800f4f0 <read_submessage_get_info>:
 800f4f0:	b570      	push	{r4, r5, r6, lr}
 800f4f2:	2500      	movs	r5, #0
 800f4f4:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 800f4f8:	4604      	mov	r4, r0
 800f4fa:	f44f 7224 	mov.w	r2, #656	@ 0x290
 800f4fe:	460e      	mov	r6, r1
 800f500:	a810      	add	r0, sp, #64	@ 0x40
 800f502:	4629      	mov	r1, r5
 800f504:	e9cd 5503 	strd	r5, r5, [sp, #12]
 800f508:	f00a f819 	bl	801953e <memset>
 800f50c:	a903      	add	r1, sp, #12
 800f50e:	4630      	mov	r0, r6
 800f510:	f002 fa70 	bl	80119f4 <uxr_deserialize_GET_INFO_Payload>
 800f514:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800f518:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800f51c:	4620      	mov	r0, r4
 800f51e:	f001 f81f 	bl	8010560 <uxr_session_header_offset>
 800f522:	462b      	mov	r3, r5
 800f524:	9000      	str	r0, [sp, #0]
 800f526:	220c      	movs	r2, #12
 800f528:	a905      	add	r1, sp, #20
 800f52a:	a808      	add	r0, sp, #32
 800f52c:	f7ff fc5a 	bl	800ede4 <ucdr_init_buffer_origin_offset>
 800f530:	a910      	add	r1, sp, #64	@ 0x40
 800f532:	a808      	add	r0, sp, #32
 800f534:	f002 fad0 	bl	8011ad8 <uxr_serialize_INFO_Payload>
 800f538:	9b08      	ldr	r3, [sp, #32]
 800f53a:	462a      	mov	r2, r5
 800f53c:	4629      	mov	r1, r5
 800f53e:	4620      	mov	r0, r4
 800f540:	f000 ffb8 	bl	80104b4 <uxr_stamp_session_header>
 800f544:	a808      	add	r0, sp, #32
 800f546:	f7ff fc8b 	bl	800ee60 <ucdr_buffer_length>
 800f54a:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800f54c:	4602      	mov	r2, r0
 800f54e:	a905      	add	r1, sp, #20
 800f550:	e9d3 0400 	ldrd	r0, r4, [r3]
 800f554:	47a0      	blx	r4
 800f556:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 800f55a:	bd70      	pop	{r4, r5, r6, pc}

0800f55c <write_submessage_acknack.isra.0>:
 800f55c:	b570      	push	{r4, r5, r6, lr}
 800f55e:	b092      	sub	sp, #72	@ 0x48
 800f560:	4605      	mov	r5, r0
 800f562:	460e      	mov	r6, r1
 800f564:	4614      	mov	r4, r2
 800f566:	f000 fffb 	bl	8010560 <uxr_session_header_offset>
 800f56a:	a905      	add	r1, sp, #20
 800f56c:	9000      	str	r0, [sp, #0]
 800f56e:	2300      	movs	r3, #0
 800f570:	a80a      	add	r0, sp, #40	@ 0x28
 800f572:	2211      	movs	r2, #17
 800f574:	f7ff fc36 	bl	800ede4 <ucdr_init_buffer_origin_offset>
 800f578:	2218      	movs	r2, #24
 800f57a:	fb02 5404 	mla	r4, r2, r4, r5
 800f57e:	2300      	movs	r3, #0
 800f580:	2205      	movs	r2, #5
 800f582:	3450      	adds	r4, #80	@ 0x50
 800f584:	210a      	movs	r1, #10
 800f586:	a80a      	add	r0, sp, #40	@ 0x28
 800f588:	f001 f95a 	bl	8010840 <uxr_buffer_submessage_header>
 800f58c:	a903      	add	r1, sp, #12
 800f58e:	4620      	mov	r0, r4
 800f590:	f007 fbfe 	bl	8016d90 <uxr_compute_acknack>
 800f594:	ba40      	rev16	r0, r0
 800f596:	f8ad 000e 	strh.w	r0, [sp, #14]
 800f59a:	a903      	add	r1, sp, #12
 800f59c:	a80a      	add	r0, sp, #40	@ 0x28
 800f59e:	f88d 6010 	strb.w	r6, [sp, #16]
 800f5a2:	f002 fb09 	bl	8011bb8 <uxr_serialize_ACKNACK_Payload>
 800f5a6:	2200      	movs	r2, #0
 800f5a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f5aa:	4611      	mov	r1, r2
 800f5ac:	4628      	mov	r0, r5
 800f5ae:	f000 ff81 	bl	80104b4 <uxr_stamp_session_header>
 800f5b2:	a80a      	add	r0, sp, #40	@ 0x28
 800f5b4:	f7ff fc54 	bl	800ee60 <ucdr_buffer_length>
 800f5b8:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800f5ba:	4602      	mov	r2, r0
 800f5bc:	a905      	add	r1, sp, #20
 800f5be:	e9d3 0400 	ldrd	r0, r4, [r3]
 800f5c2:	47a0      	blx	r4
 800f5c4:	b012      	add	sp, #72	@ 0x48
 800f5c6:	bd70      	pop	{r4, r5, r6, pc}

0800f5c8 <uxr_init_session>:
 800f5c8:	b510      	push	{r4, lr}
 800f5ca:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 800f600 <uxr_init_session+0x38>
 800f5ce:	2300      	movs	r3, #0
 800f5d0:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 800f5d4:	4604      	mov	r4, r0
 800f5d6:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 800f5da:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 800f5de:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 800f5e2:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 800f5e6:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 800f5ea:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 800f5ee:	2181      	movs	r1, #129	@ 0x81
 800f5f0:	f000 fecc 	bl	801038c <uxr_init_session_info>
 800f5f4:	f104 0008 	add.w	r0, r4, #8
 800f5f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f5fc:	f001 b83c 	b.w	8010678 <uxr_init_stream_storage>
	...

0800f608 <uxr_set_status_callback>:
 800f608:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 800f60c:	4770      	bx	lr
 800f60e:	bf00      	nop

0800f610 <uxr_set_topic_callback>:
 800f610:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 800f614:	4770      	bx	lr
 800f616:	bf00      	nop

0800f618 <uxr_set_request_callback>:
 800f618:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 800f61c:	4770      	bx	lr
 800f61e:	bf00      	nop

0800f620 <uxr_set_reply_callback>:
 800f620:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 800f624:	4770      	bx	lr
 800f626:	bf00      	nop

0800f628 <uxr_create_output_best_effort_stream>:
 800f628:	b510      	push	{r4, lr}
 800f62a:	b084      	sub	sp, #16
 800f62c:	e9cd 2100 	strd	r2, r1, [sp]
 800f630:	4604      	mov	r4, r0
 800f632:	f000 ff95 	bl	8010560 <uxr_session_header_offset>
 800f636:	e9dd 2100 	ldrd	r2, r1, [sp]
 800f63a:	4603      	mov	r3, r0
 800f63c:	f104 0008 	add.w	r0, r4, #8
 800f640:	b004      	add	sp, #16
 800f642:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f646:	f001 b861 	b.w	801070c <uxr_add_output_best_effort_buffer>
 800f64a:	bf00      	nop

0800f64c <uxr_create_output_reliable_stream>:
 800f64c:	b510      	push	{r4, lr}
 800f64e:	b088      	sub	sp, #32
 800f650:	e9cd 2104 	strd	r2, r1, [sp, #16]
 800f654:	4604      	mov	r4, r0
 800f656:	9303      	str	r3, [sp, #12]
 800f658:	f000 ff82 	bl	8010560 <uxr_session_header_offset>
 800f65c:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800f660:	9000      	str	r0, [sp, #0]
 800f662:	9905      	ldr	r1, [sp, #20]
 800f664:	f104 0008 	add.w	r0, r4, #8
 800f668:	f001 f864 	bl	8010734 <uxr_add_output_reliable_buffer>
 800f66c:	2200      	movs	r2, #0
 800f66e:	b2c3      	uxtb	r3, r0
 800f670:	f363 0207 	bfi	r2, r3, #0, #8
 800f674:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800f678:	f363 220f 	bfi	r2, r3, #8, #8
 800f67c:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800f680:	f363 4217 	bfi	r2, r3, #16, #8
 800f684:	0e03      	lsrs	r3, r0, #24
 800f686:	f363 621f 	bfi	r2, r3, #24, #8
 800f68a:	4610      	mov	r0, r2
 800f68c:	b008      	add	sp, #32
 800f68e:	bd10      	pop	{r4, pc}

0800f690 <uxr_create_input_best_effort_stream>:
 800f690:	b082      	sub	sp, #8
 800f692:	3008      	adds	r0, #8
 800f694:	b002      	add	sp, #8
 800f696:	f001 b867 	b.w	8010768 <uxr_add_input_best_effort_buffer>
 800f69a:	bf00      	nop

0800f69c <uxr_create_input_reliable_stream>:
 800f69c:	b510      	push	{r4, lr}
 800f69e:	b084      	sub	sp, #16
 800f6a0:	4c0b      	ldr	r4, [pc, #44]	@ (800f6d0 <uxr_create_input_reliable_stream+0x34>)
 800f6a2:	9400      	str	r4, [sp, #0]
 800f6a4:	3008      	adds	r0, #8
 800f6a6:	f001 f875 	bl	8010794 <uxr_add_input_reliable_buffer>
 800f6aa:	2200      	movs	r2, #0
 800f6ac:	b2c3      	uxtb	r3, r0
 800f6ae:	f363 0207 	bfi	r2, r3, #0, #8
 800f6b2:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800f6b6:	f363 220f 	bfi	r2, r3, #8, #8
 800f6ba:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800f6be:	f363 4217 	bfi	r2, r3, #16, #8
 800f6c2:	0e03      	lsrs	r3, r0, #24
 800f6c4:	f363 621f 	bfi	r2, r3, #24, #8
 800f6c8:	4610      	mov	r0, r2
 800f6ca:	b004      	add	sp, #16
 800f6cc:	bd10      	pop	{r4, pc}
 800f6ce:	bf00      	nop
 800f6d0:	0800f4ad 	.word	0x0800f4ad

0800f6d4 <uxr_epoch_nanos>:
 800f6d4:	b510      	push	{r4, lr}
 800f6d6:	4604      	mov	r4, r0
 800f6d8:	f001 f912 	bl	8010900 <uxr_nanos>
 800f6dc:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 800f6e0:	1ac0      	subs	r0, r0, r3
 800f6e2:	eb61 0102 	sbc.w	r1, r1, r2
 800f6e6:	bd10      	pop	{r4, pc}

0800f6e8 <uxr_flash_output_streams>:
 800f6e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f6ec:	7e03      	ldrb	r3, [r0, #24]
 800f6ee:	b084      	sub	sp, #16
 800f6f0:	4604      	mov	r4, r0
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d035      	beq.n	800f762 <uxr_flash_output_streams+0x7a>
 800f6f6:	f04f 0900 	mov.w	r9, #0
 800f6fa:	4648      	mov	r0, r9
 800f6fc:	f10d 0802 	add.w	r8, sp, #2
 800f700:	af03      	add	r7, sp, #12
 800f702:	ae02      	add	r6, sp, #8
 800f704:	e006      	b.n	800f714 <uxr_flash_output_streams+0x2c>
 800f706:	7e23      	ldrb	r3, [r4, #24]
 800f708:	f109 0901 	add.w	r9, r9, #1
 800f70c:	fa5f f089 	uxtb.w	r0, r9
 800f710:	4283      	cmp	r3, r0
 800f712:	d926      	bls.n	800f762 <uxr_flash_output_streams+0x7a>
 800f714:	2201      	movs	r2, #1
 800f716:	4611      	mov	r1, r2
 800f718:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 800f71c:	f000 ff58 	bl	80105d0 <uxr_stream_id>
 800f720:	3508      	adds	r5, #8
 800f722:	4684      	mov	ip, r0
 800f724:	4643      	mov	r3, r8
 800f726:	463a      	mov	r2, r7
 800f728:	4631      	mov	r1, r6
 800f72a:	4628      	mov	r0, r5
 800f72c:	f8cd c004 	str.w	ip, [sp, #4]
 800f730:	f007 fbb4 	bl	8016e9c <uxr_prepare_best_effort_buffer_to_send>
 800f734:	2800      	cmp	r0, #0
 800f736:	d0e6      	beq.n	800f706 <uxr_flash_output_streams+0x1e>
 800f738:	9b02      	ldr	r3, [sp, #8]
 800f73a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800f73e:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800f742:	4620      	mov	r0, r4
 800f744:	f000 feb6 	bl	80104b4 <uxr_stamp_session_header>
 800f748:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800f74a:	9a03      	ldr	r2, [sp, #12]
 800f74c:	685d      	ldr	r5, [r3, #4]
 800f74e:	6818      	ldr	r0, [r3, #0]
 800f750:	9902      	ldr	r1, [sp, #8]
 800f752:	47a8      	blx	r5
 800f754:	f109 0901 	add.w	r9, r9, #1
 800f758:	7e23      	ldrb	r3, [r4, #24]
 800f75a:	fa5f f089 	uxtb.w	r0, r9
 800f75e:	4283      	cmp	r3, r0
 800f760:	d8d8      	bhi.n	800f714 <uxr_flash_output_streams+0x2c>
 800f762:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800f766:	b38b      	cbz	r3, 800f7cc <uxr_flash_output_streams+0xe4>
 800f768:	f04f 0900 	mov.w	r9, #0
 800f76c:	f10d 0802 	add.w	r8, sp, #2
 800f770:	af03      	add	r7, sp, #12
 800f772:	ae02      	add	r6, sp, #8
 800f774:	4648      	mov	r0, r9
 800f776:	2201      	movs	r2, #1
 800f778:	2102      	movs	r1, #2
 800f77a:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 800f77e:	f000 ff27 	bl	80105d0 <uxr_stream_id>
 800f782:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 800f786:	3520      	adds	r5, #32
 800f788:	9001      	str	r0, [sp, #4]
 800f78a:	e00d      	b.n	800f7a8 <uxr_flash_output_streams+0xc0>
 800f78c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800f790:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800f794:	9b02      	ldr	r3, [sp, #8]
 800f796:	f000 fe8d 	bl	80104b4 <uxr_stamp_session_header>
 800f79a:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800f79c:	9a03      	ldr	r2, [sp, #12]
 800f79e:	f8d3 a004 	ldr.w	sl, [r3, #4]
 800f7a2:	9902      	ldr	r1, [sp, #8]
 800f7a4:	6818      	ldr	r0, [r3, #0]
 800f7a6:	47d0      	blx	sl
 800f7a8:	4643      	mov	r3, r8
 800f7aa:	463a      	mov	r2, r7
 800f7ac:	4631      	mov	r1, r6
 800f7ae:	4628      	mov	r0, r5
 800f7b0:	f007 fd92 	bl	80172d8 <uxr_prepare_next_reliable_buffer_to_send>
 800f7b4:	4603      	mov	r3, r0
 800f7b6:	4620      	mov	r0, r4
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	d1e7      	bne.n	800f78c <uxr_flash_output_streams+0xa4>
 800f7bc:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800f7c0:	f109 0901 	add.w	r9, r9, #1
 800f7c4:	fa5f f089 	uxtb.w	r0, r9
 800f7c8:	4283      	cmp	r3, r0
 800f7ca:	d8d4      	bhi.n	800f776 <uxr_flash_output_streams+0x8e>
 800f7cc:	b004      	add	sp, #16
 800f7ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f7d2:	bf00      	nop

0800f7d4 <read_submessage_info>:
 800f7d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f7d8:	460d      	mov	r5, r1
 800f7da:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800f7de:	4669      	mov	r1, sp
 800f7e0:	4607      	mov	r7, r0
 800f7e2:	4628      	mov	r0, r5
 800f7e4:	f002 f814 	bl	8011810 <uxr_deserialize_BaseObjectReply>
 800f7e8:	a902      	add	r1, sp, #8
 800f7ea:	4604      	mov	r4, r0
 800f7ec:	4628      	mov	r0, r5
 800f7ee:	f89d 8005 	ldrb.w	r8, [sp, #5]
 800f7f2:	f7fd fdb1 	bl	800d358 <ucdr_deserialize_bool>
 800f7f6:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800f7fa:	4004      	ands	r4, r0
 800f7fc:	b2e4      	uxtb	r4, r4
 800f7fe:	b95b      	cbnz	r3, 800f818 <read_submessage_info+0x44>
 800f800:	a987      	add	r1, sp, #540	@ 0x21c
 800f802:	4628      	mov	r0, r5
 800f804:	f7fd fda8 	bl	800d358 <ucdr_deserialize_bool>
 800f808:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 800f80c:	4606      	mov	r6, r0
 800f80e:	b94b      	cbnz	r3, 800f824 <read_submessage_info+0x50>
 800f810:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800f814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f818:	a903      	add	r1, sp, #12
 800f81a:	4628      	mov	r0, r5
 800f81c:	f001 fea0 	bl	8011560 <uxr_deserialize_ObjectVariant>
 800f820:	4004      	ands	r4, r0
 800f822:	e7ed      	b.n	800f800 <read_submessage_info+0x2c>
 800f824:	a988      	add	r1, sp, #544	@ 0x220
 800f826:	4628      	mov	r0, r5
 800f828:	f7fd fdc4 	bl	800d3b4 <ucdr_deserialize_uint8_t>
 800f82c:	4234      	tst	r4, r6
 800f82e:	d0ef      	beq.n	800f810 <read_submessage_info+0x3c>
 800f830:	2800      	cmp	r0, #0
 800f832:	d0ed      	beq.n	800f810 <read_submessage_info+0x3c>
 800f834:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 800f838:	2b0d      	cmp	r3, #13
 800f83a:	d1e9      	bne.n	800f810 <read_submessage_info+0x3c>
 800f83c:	a98a      	add	r1, sp, #552	@ 0x228
 800f83e:	4628      	mov	r0, r5
 800f840:	f7fe fb5e 	bl	800df00 <ucdr_deserialize_int16_t>
 800f844:	b140      	cbz	r0, 800f858 <read_submessage_info+0x84>
 800f846:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 800f84a:	2b00      	cmp	r3, #0
 800f84c:	dd07      	ble.n	800f85e <read_submessage_info+0x8a>
 800f84e:	f1b8 0f00 	cmp.w	r8, #0
 800f852:	bf14      	ite	ne
 800f854:	2001      	movne	r0, #1
 800f856:	2002      	moveq	r0, #2
 800f858:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 800f85c:	e7d8      	b.n	800f810 <read_submessage_info+0x3c>
 800f85e:	2000      	movs	r0, #0
 800f860:	e7fa      	b.n	800f858 <read_submessage_info+0x84>
 800f862:	bf00      	nop

0800f864 <read_submessage_list>:
 800f864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f868:	b097      	sub	sp, #92	@ 0x5c
 800f86a:	4ec1      	ldr	r6, [pc, #772]	@ (800fb70 <read_submessage_list+0x30c>)
 800f86c:	9209      	str	r2, [sp, #36]	@ 0x24
 800f86e:	4604      	mov	r4, r0
 800f870:	460d      	mov	r5, r1
 800f872:	f04f 0801 	mov.w	r8, #1
 800f876:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 800f87a:	aa0c      	add	r2, sp, #48	@ 0x30
 800f87c:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 800f880:	4628      	mov	r0, r5
 800f882:	f000 fff7 	bl	8010874 <uxr_read_submessage_header>
 800f886:	2800      	cmp	r0, #0
 800f888:	f000 813e 	beq.w	800fb08 <read_submessage_list+0x2a4>
 800f88c:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 800f890:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 800f894:	3b02      	subs	r3, #2
 800f896:	2b0d      	cmp	r3, #13
 800f898:	d8ed      	bhi.n	800f876 <read_submessage_list+0x12>
 800f89a:	a101      	add	r1, pc, #4	@ (adr r1, 800f8a0 <read_submessage_list+0x3c>)
 800f89c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f8a0:	0800faff 	.word	0x0800faff
 800f8a4:	0800f877 	.word	0x0800f877
 800f8a8:	0800faef 	.word	0x0800faef
 800f8ac:	0800fa8d 	.word	0x0800fa8d
 800f8b0:	0800fa83 	.word	0x0800fa83
 800f8b4:	0800f877 	.word	0x0800f877
 800f8b8:	0800f877 	.word	0x0800f877
 800f8bc:	0800f9e3 	.word	0x0800f9e3
 800f8c0:	0800f973 	.word	0x0800f973
 800f8c4:	0800f933 	.word	0x0800f933
 800f8c8:	0800f877 	.word	0x0800f877
 800f8cc:	0800f877 	.word	0x0800f877
 800f8d0:	0800f877 	.word	0x0800f877
 800f8d4:	0800f8d9 	.word	0x0800f8d9
 800f8d8:	a910      	add	r1, sp, #64	@ 0x40
 800f8da:	4628      	mov	r0, r5
 800f8dc:	f002 f9bc 	bl	8011c58 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 800f8e0:	f8d4 9090 	ldr.w	r9, [r4, #144]	@ 0x90
 800f8e4:	f1b9 0f00 	cmp.w	r9, #0
 800f8e8:	f000 8116 	beq.w	800fb18 <read_submessage_list+0x2b4>
 800f8ec:	f001 f808 	bl	8010900 <uxr_nanos>
 800f8f0:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 800f8f2:	4602      	mov	r2, r0
 800f8f4:	460b      	mov	r3, r1
 800f8f6:	9814      	ldr	r0, [sp, #80]	@ 0x50
 800f8f8:	2100      	movs	r1, #0
 800f8fa:	468c      	mov	ip, r1
 800f8fc:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800f900:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 800f904:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800f906:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 800f908:	468c      	mov	ip, r1
 800f90a:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800f90e:	46e2      	mov	sl, ip
 800f910:	46bc      	mov	ip, r7
 800f912:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	@ 0x48
 800f916:	fbc0 7106 	smlal	r7, r1, r0, r6
 800f91a:	e9cd ca02 	strd	ip, sl, [sp, #8]
 800f91e:	e9cd 7100 	strd	r7, r1, [sp]
 800f922:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 800f926:	9106      	str	r1, [sp, #24]
 800f928:	4620      	mov	r0, r4
 800f92a:	47c8      	blx	r9
 800f92c:	f884 80a0 	strb.w	r8, [r4, #160]	@ 0xa0
 800f930:	e7a1      	b.n	800f876 <read_submessage_list+0x12>
 800f932:	a910      	add	r1, sp, #64	@ 0x40
 800f934:	4628      	mov	r0, r5
 800f936:	f002 f97d 	bl	8011c34 <uxr_deserialize_HEARTBEAT_Payload>
 800f93a:	2100      	movs	r1, #0
 800f93c:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800f940:	f000 fe70 	bl	8010624 <uxr_stream_id_from_raw>
 800f944:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800f948:	900f      	str	r0, [sp, #60]	@ 0x3c
 800f94a:	4639      	mov	r1, r7
 800f94c:	f104 0008 	add.w	r0, r4, #8
 800f950:	f000 ff56 	bl	8010800 <uxr_get_input_reliable_stream>
 800f954:	2800      	cmp	r0, #0
 800f956:	d08e      	beq.n	800f876 <read_submessage_list+0x12>
 800f958:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 800f95c:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 800f960:	f007 fa0a 	bl	8016d78 <uxr_process_heartbeat>
 800f964:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 800f968:	463a      	mov	r2, r7
 800f96a:	4620      	mov	r0, r4
 800f96c:	f7ff fdf6 	bl	800f55c <write_submessage_acknack.isra.0>
 800f970:	e781      	b.n	800f876 <read_submessage_list+0x12>
 800f972:	a910      	add	r1, sp, #64	@ 0x40
 800f974:	4628      	mov	r0, r5
 800f976:	f002 f935 	bl	8011be4 <uxr_deserialize_ACKNACK_Payload>
 800f97a:	2100      	movs	r1, #0
 800f97c:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800f980:	f000 fe50 	bl	8010624 <uxr_stream_id_from_raw>
 800f984:	900d      	str	r0, [sp, #52]	@ 0x34
 800f986:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800f98a:	f104 0008 	add.w	r0, r4, #8
 800f98e:	f000 ff23 	bl	80107d8 <uxr_get_output_reliable_stream>
 800f992:	4607      	mov	r7, r0
 800f994:	2800      	cmp	r0, #0
 800f996:	f43f af6e 	beq.w	800f876 <read_submessage_list+0x12>
 800f99a:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 800f99e:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 800f9a2:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 800f9a6:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800f9aa:	b289      	uxth	r1, r1
 800f9ac:	f007 fd3e 	bl	801742c <uxr_process_acknack>
 800f9b0:	4638      	mov	r0, r7
 800f9b2:	f007 fcfb 	bl	80173ac <uxr_begin_output_nack_buffer_it>
 800f9b6:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 800f9ba:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 800f9be:	e006      	b.n	800f9ce <read_submessage_list+0x16a>
 800f9c0:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800f9c2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800f9c4:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800f9c8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800f9ca:	6818      	ldr	r0, [r3, #0]
 800f9cc:	47c8      	blx	r9
 800f9ce:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 800f9d2:	aa0f      	add	r2, sp, #60	@ 0x3c
 800f9d4:	4651      	mov	r1, sl
 800f9d6:	4638      	mov	r0, r7
 800f9d8:	f007 fcea 	bl	80173b0 <uxr_next_reliable_nack_buffer_to_send>
 800f9dc:	2800      	cmp	r0, #0
 800f9de:	d1ef      	bne.n	800f9c0 <read_submessage_list+0x15c>
 800f9e0:	e749      	b.n	800f876 <read_submessage_list+0x12>
 800f9e2:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 800f9e6:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 800f9ea:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 800f9ee:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 800f9f2:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 800f9f6:	4651      	mov	r1, sl
 800f9f8:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800f9fc:	f8bd 7030 	ldrh.w	r7, [sp, #48]	@ 0x30
 800fa00:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 800fa04:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 800fa08:	4628      	mov	r0, r5
 800fa0a:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 800fa0e:	f001 fe49 	bl	80116a4 <uxr_deserialize_BaseObjectRequest>
 800fa12:	4650      	mov	r0, sl
 800fa14:	a90f      	add	r1, sp, #60	@ 0x3c
 800fa16:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 800fa1a:	f000 fdc7 	bl	80105ac <uxr_parse_base_object_request>
 800fa1e:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 800fa22:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800fa24:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 800fa28:	9110      	str	r1, [sp, #64]	@ 0x40
 800fa2a:	3f04      	subs	r7, #4
 800fa2c:	f009 090e 	and.w	r9, r9, #14
 800fa30:	b2bf      	uxth	r7, r7
 800fa32:	f1bb 0f00 	cmp.w	fp, #0
 800fa36:	d006      	beq.n	800fa46 <read_submessage_list+0x1e2>
 800fa38:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800fa3c:	9300      	str	r3, [sp, #0]
 800fa3e:	4652      	mov	r2, sl
 800fa40:	2300      	movs	r3, #0
 800fa42:	4620      	mov	r0, r4
 800fa44:	47d8      	blx	fp
 800fa46:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800fa48:	b16a      	cbz	r2, 800fa66 <read_submessage_list+0x202>
 800fa4a:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800fa4c:	2100      	movs	r1, #0
 800fa4e:	3802      	subs	r0, #2
 800fa50:	e002      	b.n	800fa58 <read_submessage_list+0x1f4>
 800fa52:	3101      	adds	r1, #1
 800fa54:	4291      	cmp	r1, r2
 800fa56:	d006      	beq.n	800fa66 <read_submessage_list+0x202>
 800fa58:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800fa5c:	4553      	cmp	r3, sl
 800fa5e:	d1f8      	bne.n	800fa52 <read_submessage_list+0x1ee>
 800fa60:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800fa62:	2200      	movs	r2, #0
 800fa64:	545a      	strb	r2, [r3, r1]
 800fa66:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 800fa6a:	9102      	str	r1, [sp, #8]
 800fa6c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800fa6e:	9101      	str	r1, [sp, #4]
 800fa70:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800fa72:	9100      	str	r1, [sp, #0]
 800fa74:	464b      	mov	r3, r9
 800fa76:	463a      	mov	r2, r7
 800fa78:	4629      	mov	r1, r5
 800fa7a:	4620      	mov	r0, r4
 800fa7c:	f007 fd94 	bl	80175a8 <read_submessage_format>
 800fa80:	e6f9      	b.n	800f876 <read_submessage_list+0x12>
 800fa82:	4629      	mov	r1, r5
 800fa84:	4620      	mov	r0, r4
 800fa86:	f7ff fea5 	bl	800f7d4 <read_submessage_info>
 800fa8a:	e6f4      	b.n	800f876 <read_submessage_list+0x12>
 800fa8c:	2a00      	cmp	r2, #0
 800fa8e:	d03e      	beq.n	800fb0e <read_submessage_list+0x2aa>
 800fa90:	a910      	add	r1, sp, #64	@ 0x40
 800fa92:	4628      	mov	r0, r5
 800fa94:	f002 f802 	bl	8011a9c <uxr_deserialize_STATUS_Payload>
 800fa98:	a90e      	add	r1, sp, #56	@ 0x38
 800fa9a:	aa0d      	add	r2, sp, #52	@ 0x34
 800fa9c:	a810      	add	r0, sp, #64	@ 0x40
 800fa9e:	f000 fd85 	bl	80105ac <uxr_parse_base_object_request>
 800faa2:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 800faa6:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800faa8:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 800faac:	f8bd 7034 	ldrh.w	r7, [sp, #52]	@ 0x34
 800fab0:	910f      	str	r1, [sp, #60]	@ 0x3c
 800fab2:	f1ba 0f00 	cmp.w	sl, #0
 800fab6:	d006      	beq.n	800fac6 <read_submessage_list+0x262>
 800fab8:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800fabc:	9300      	str	r3, [sp, #0]
 800fabe:	463a      	mov	r2, r7
 800fac0:	464b      	mov	r3, r9
 800fac2:	4620      	mov	r0, r4
 800fac4:	47d0      	blx	sl
 800fac6:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800fac8:	2a00      	cmp	r2, #0
 800faca:	f43f aed4 	beq.w	800f876 <read_submessage_list+0x12>
 800face:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800fad0:	2100      	movs	r1, #0
 800fad2:	3802      	subs	r0, #2
 800fad4:	e003      	b.n	800fade <read_submessage_list+0x27a>
 800fad6:	3101      	adds	r1, #1
 800fad8:	4291      	cmp	r1, r2
 800fada:	f43f aecc 	beq.w	800f876 <read_submessage_list+0x12>
 800fade:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800fae2:	42bb      	cmp	r3, r7
 800fae4:	d1f7      	bne.n	800fad6 <read_submessage_list+0x272>
 800fae6:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800fae8:	f803 9001 	strb.w	r9, [r3, r1]
 800faec:	e6c3      	b.n	800f876 <read_submessage_list+0x12>
 800faee:	2a00      	cmp	r2, #0
 800faf0:	f47f aec1 	bne.w	800f876 <read_submessage_list+0x12>
 800faf4:	4629      	mov	r1, r5
 800faf6:	4620      	mov	r0, r4
 800faf8:	f000 fc9e 	bl	8010438 <uxr_read_create_session_status>
 800fafc:	e6bb      	b.n	800f876 <read_submessage_list+0x12>
 800fafe:	4629      	mov	r1, r5
 800fb00:	4620      	mov	r0, r4
 800fb02:	f7ff fcf5 	bl	800f4f0 <read_submessage_get_info>
 800fb06:	e6b6      	b.n	800f876 <read_submessage_list+0x12>
 800fb08:	b017      	add	sp, #92	@ 0x5c
 800fb0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb0e:	4629      	mov	r1, r5
 800fb10:	4620      	mov	r0, r4
 800fb12:	f000 fc9d 	bl	8010450 <uxr_read_delete_session_status>
 800fb16:	e6ae      	b.n	800f876 <read_submessage_list+0x12>
 800fb18:	f000 fef2 	bl	8010900 <uxr_nanos>
 800fb1c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800fb1e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800fb20:	464f      	mov	r7, r9
 800fb22:	fbc3 2706 	smlal	r2, r7, r3, r6
 800fb26:	1812      	adds	r2, r2, r0
 800fb28:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800fb2a:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800fb2c:	eb47 0101 	adc.w	r1, r7, r1
 800fb30:	464f      	mov	r7, r9
 800fb32:	fbc3 0706 	smlal	r0, r7, r3, r6
 800fb36:	463b      	mov	r3, r7
 800fb38:	4684      	mov	ip, r0
 800fb3a:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 800fb3e:	fbc7 0906 	smlal	r0, r9, r7, r6
 800fb42:	eb1c 0c00 	adds.w	ip, ip, r0
 800fb46:	464f      	mov	r7, r9
 800fb48:	eb43 0307 	adc.w	r3, r3, r7
 800fb4c:	ebb2 0c0c 	subs.w	ip, r2, ip
 800fb50:	eb61 0303 	sbc.w	r3, r1, r3
 800fb54:	0fda      	lsrs	r2, r3, #31
 800fb56:	eb12 020c 	adds.w	r2, r2, ip
 800fb5a:	f143 0300 	adc.w	r3, r3, #0
 800fb5e:	0852      	lsrs	r2, r2, #1
 800fb60:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 800fb64:	105b      	asrs	r3, r3, #1
 800fb66:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 800fb6a:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 800fb6e:	e6dd      	b.n	800f92c <read_submessage_list+0xc8>
 800fb70:	3b9aca00 	.word	0x3b9aca00

0800fb74 <listen_message_reliably>:
 800fb74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb78:	1e0b      	subs	r3, r1, #0
 800fb7a:	b09d      	sub	sp, #116	@ 0x74
 800fb7c:	bfb8      	it	lt
 800fb7e:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 800fb82:	4680      	mov	r8, r0
 800fb84:	9305      	str	r3, [sp, #20]
 800fb86:	f000 fea1 	bl	80108cc <uxr_millis>
 800fb8a:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 800fb8e:	4681      	mov	r9, r0
 800fb90:	2a00      	cmp	r2, #0
 800fb92:	f000 80a1 	beq.w	800fcd8 <listen_message_reliably+0x164>
 800fb96:	2600      	movs	r6, #0
 800fb98:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800fb9c:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800fba0:	9303      	str	r3, [sp, #12]
 800fba2:	4630      	mov	r0, r6
 800fba4:	460f      	mov	r7, r1
 800fba6:	e00f      	b.n	800fbc8 <listen_message_reliably+0x54>
 800fba8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800fbac:	9903      	ldr	r1, [sp, #12]
 800fbae:	455a      	cmp	r2, fp
 800fbb0:	f106 0601 	add.w	r6, r6, #1
 800fbb4:	eb73 0101 	sbcs.w	r1, r3, r1
 800fbb8:	b2f0      	uxtb	r0, r6
 800fbba:	da01      	bge.n	800fbc0 <listen_message_reliably+0x4c>
 800fbbc:	4693      	mov	fp, r2
 800fbbe:	9303      	str	r3, [sp, #12]
 800fbc0:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 800fbc4:	4283      	cmp	r3, r0
 800fbc6:	d960      	bls.n	800fc8a <listen_message_reliably+0x116>
 800fbc8:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 800fbcc:	2102      	movs	r1, #2
 800fbce:	2201      	movs	r2, #1
 800fbd0:	f000 fcfe 	bl	80105d0 <uxr_stream_id>
 800fbd4:	00e4      	lsls	r4, r4, #3
 800fbd6:	f104 0520 	add.w	r5, r4, #32
 800fbda:	4445      	add	r5, r8
 800fbdc:	4601      	mov	r1, r0
 800fbde:	463b      	mov	r3, r7
 800fbe0:	464a      	mov	r2, r9
 800fbe2:	4628      	mov	r0, r5
 800fbe4:	9109      	str	r1, [sp, #36]	@ 0x24
 800fbe6:	f007 fbb7 	bl	8017358 <uxr_update_output_stream_heartbeat_timestamp>
 800fbea:	eb08 0304 	add.w	r3, r8, r4
 800fbee:	2800      	cmp	r0, #0
 800fbf0:	d0da      	beq.n	800fba8 <listen_message_reliably+0x34>
 800fbf2:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800fbf6:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 800fbfa:	9304      	str	r3, [sp, #16]
 800fbfc:	4640      	mov	r0, r8
 800fbfe:	f000 fcaf 	bl	8010560 <uxr_session_header_offset>
 800fc02:	3501      	adds	r5, #1
 800fc04:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 800fc08:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800fc0c:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 800fc10:	2300      	movs	r3, #0
 800fc12:	2211      	movs	r2, #17
 800fc14:	9000      	str	r0, [sp, #0]
 800fc16:	a90c      	add	r1, sp, #48	@ 0x30
 800fc18:	4650      	mov	r0, sl
 800fc1a:	f7ff f8e3 	bl	800ede4 <ucdr_init_buffer_origin_offset>
 800fc1e:	2300      	movs	r3, #0
 800fc20:	2205      	movs	r2, #5
 800fc22:	210b      	movs	r1, #11
 800fc24:	4650      	mov	r0, sl
 800fc26:	f000 fe0b 	bl	8010840 <uxr_buffer_submessage_header>
 800fc2a:	8968      	ldrh	r0, [r5, #10]
 800fc2c:	2101      	movs	r1, #1
 800fc2e:	f007 fd85 	bl	801773c <uxr_seq_num_add>
 800fc32:	892b      	ldrh	r3, [r5, #8]
 800fc34:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 800fc38:	4602      	mov	r2, r0
 800fc3a:	9b04      	ldr	r3, [sp, #16]
 800fc3c:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 800fc40:	a90a      	add	r1, sp, #40	@ 0x28
 800fc42:	4650      	mov	r0, sl
 800fc44:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 800fc48:	f001 ffe0 	bl	8011c0c <uxr_serialize_HEARTBEAT_Payload>
 800fc4c:	2200      	movs	r2, #0
 800fc4e:	4611      	mov	r1, r2
 800fc50:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800fc52:	4640      	mov	r0, r8
 800fc54:	f000 fc2e 	bl	80104b4 <uxr_stamp_session_header>
 800fc58:	4650      	mov	r0, sl
 800fc5a:	f7ff f901 	bl	800ee60 <ucdr_buffer_length>
 800fc5e:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 800fc62:	4602      	mov	r2, r0
 800fc64:	a90c      	add	r1, sp, #48	@ 0x30
 800fc66:	e9d3 0500 	ldrd	r0, r5, [r3]
 800fc6a:	4444      	add	r4, r8
 800fc6c:	47a8      	blx	r5
 800fc6e:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 800fc72:	9903      	ldr	r1, [sp, #12]
 800fc74:	455a      	cmp	r2, fp
 800fc76:	f106 0601 	add.w	r6, r6, #1
 800fc7a:	eb73 0101 	sbcs.w	r1, r3, r1
 800fc7e:	b2f0      	uxtb	r0, r6
 800fc80:	db9c      	blt.n	800fbbc <listen_message_reliably+0x48>
 800fc82:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 800fc86:	4283      	cmp	r3, r0
 800fc88:	d89e      	bhi.n	800fbc8 <listen_message_reliably+0x54>
 800fc8a:	9a03      	ldr	r2, [sp, #12]
 800fc8c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800fc90:	429a      	cmp	r2, r3
 800fc92:	bf08      	it	eq
 800fc94:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 800fc98:	d01e      	beq.n	800fcd8 <listen_message_reliably+0x164>
 800fc9a:	ebab 0309 	sub.w	r3, fp, r9
 800fc9e:	9905      	ldr	r1, [sp, #20]
 800fca0:	f8d8 2070 	ldr.w	r2, [r8, #112]	@ 0x70
 800fca4:	2b00      	cmp	r3, #0
 800fca6:	bf08      	it	eq
 800fca8:	2301      	moveq	r3, #1
 800fcaa:	4299      	cmp	r1, r3
 800fcac:	bfa8      	it	ge
 800fcae:	4619      	movge	r1, r3
 800fcb0:	6894      	ldr	r4, [r2, #8]
 800fcb2:	6810      	ldr	r0, [r2, #0]
 800fcb4:	4689      	mov	r9, r1
 800fcb6:	460b      	mov	r3, r1
 800fcb8:	aa08      	add	r2, sp, #32
 800fcba:	a907      	add	r1, sp, #28
 800fcbc:	47a0      	blx	r4
 800fcbe:	b968      	cbnz	r0, 800fcdc <listen_message_reliably+0x168>
 800fcc0:	9b05      	ldr	r3, [sp, #20]
 800fcc2:	eba3 0309 	sub.w	r3, r3, r9
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	9305      	str	r3, [sp, #20]
 800fcca:	f73f af5c 	bgt.w	800fb86 <listen_message_reliably+0x12>
 800fcce:	4604      	mov	r4, r0
 800fcd0:	4620      	mov	r0, r4
 800fcd2:	b01d      	add	sp, #116	@ 0x74
 800fcd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fcd8:	9b05      	ldr	r3, [sp, #20]
 800fcda:	e7e0      	b.n	800fc9e <listen_message_reliably+0x12a>
 800fcdc:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800fce0:	4604      	mov	r4, r0
 800fce2:	a80c      	add	r0, sp, #48	@ 0x30
 800fce4:	f7ff f890 	bl	800ee08 <ucdr_init_buffer>
 800fce8:	2500      	movs	r5, #0
 800fcea:	f10d 031a 	add.w	r3, sp, #26
 800fcee:	aa06      	add	r2, sp, #24
 800fcf0:	a90c      	add	r1, sp, #48	@ 0x30
 800fcf2:	4640      	mov	r0, r8
 800fcf4:	f88d 5018 	strb.w	r5, [sp, #24]
 800fcf8:	f000 fbf0 	bl	80104dc <uxr_read_session_header>
 800fcfc:	b918      	cbnz	r0, 800fd06 <listen_message_reliably+0x192>
 800fcfe:	4620      	mov	r0, r4
 800fd00:	b01d      	add	sp, #116	@ 0x74
 800fd02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd06:	4629      	mov	r1, r5
 800fd08:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800fd0c:	f000 fc8a 	bl	8010624 <uxr_stream_id_from_raw>
 800fd10:	f3c0 4507 	ubfx	r5, r0, #16, #8
 800fd14:	2d01      	cmp	r5, #1
 800fd16:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 800fd1a:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 800fd1e:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800fd22:	d04b      	beq.n	800fdbc <listen_message_reliably+0x248>
 800fd24:	2d02      	cmp	r5, #2
 800fd26:	d00f      	beq.n	800fd48 <listen_message_reliably+0x1d4>
 800fd28:	2d00      	cmp	r5, #0
 800fd2a:	d1e8      	bne.n	800fcfe <listen_message_reliably+0x18a>
 800fd2c:	4629      	mov	r1, r5
 800fd2e:	4628      	mov	r0, r5
 800fd30:	f000 fc78 	bl	8010624 <uxr_stream_id_from_raw>
 800fd34:	a90c      	add	r1, sp, #48	@ 0x30
 800fd36:	4602      	mov	r2, r0
 800fd38:	4640      	mov	r0, r8
 800fd3a:	920a      	str	r2, [sp, #40]	@ 0x28
 800fd3c:	f7ff fd92 	bl	800f864 <read_submessage_list>
 800fd40:	4620      	mov	r0, r4
 800fd42:	b01d      	add	sp, #116	@ 0x74
 800fd44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd48:	4631      	mov	r1, r6
 800fd4a:	f108 0008 	add.w	r0, r8, #8
 800fd4e:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 800fd52:	f000 fd55 	bl	8010800 <uxr_get_input_reliable_stream>
 800fd56:	4607      	mov	r7, r0
 800fd58:	b338      	cbz	r0, 800fdaa <listen_message_reliably+0x236>
 800fd5a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fd5c:	9203      	str	r2, [sp, #12]
 800fd5e:	a80c      	add	r0, sp, #48	@ 0x30
 800fd60:	f7ff f882 	bl	800ee68 <ucdr_buffer_remaining>
 800fd64:	4603      	mov	r3, r0
 800fd66:	f10d 0019 	add.w	r0, sp, #25
 800fd6a:	9000      	str	r0, [sp, #0]
 800fd6c:	9a03      	ldr	r2, [sp, #12]
 800fd6e:	4651      	mov	r1, sl
 800fd70:	4638      	mov	r0, r7
 800fd72:	f006 ff07 	bl	8016b84 <uxr_receive_reliable_message>
 800fd76:	b1c0      	cbz	r0, 800fdaa <listen_message_reliably+0x236>
 800fd78:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800fd7c:	b393      	cbz	r3, 800fde4 <listen_message_reliably+0x270>
 800fd7e:	ad14      	add	r5, sp, #80	@ 0x50
 800fd80:	f04f 0a02 	mov.w	sl, #2
 800fd84:	e00a      	b.n	800fd9c <listen_message_reliably+0x228>
 800fd86:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 800fd8a:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 800fd8e:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 800fd92:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800fd94:	4629      	mov	r1, r5
 800fd96:	4640      	mov	r0, r8
 800fd98:	f7ff fd64 	bl	800f864 <read_submessage_list>
 800fd9c:	2204      	movs	r2, #4
 800fd9e:	4629      	mov	r1, r5
 800fda0:	4638      	mov	r0, r7
 800fda2:	f006 ff6f 	bl	8016c84 <uxr_next_input_reliable_buffer_available>
 800fda6:	2800      	cmp	r0, #0
 800fda8:	d1ed      	bne.n	800fd86 <listen_message_reliably+0x212>
 800fdaa:	4640      	mov	r0, r8
 800fdac:	4632      	mov	r2, r6
 800fdae:	4649      	mov	r1, r9
 800fdb0:	f7ff fbd4 	bl	800f55c <write_submessage_acknack.isra.0>
 800fdb4:	4620      	mov	r0, r4
 800fdb6:	b01d      	add	sp, #116	@ 0x74
 800fdb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fdbc:	4631      	mov	r1, r6
 800fdbe:	f108 0008 	add.w	r0, r8, #8
 800fdc2:	f000 fd13 	bl	80107ec <uxr_get_input_best_effort_stream>
 800fdc6:	2800      	cmp	r0, #0
 800fdc8:	d099      	beq.n	800fcfe <listen_message_reliably+0x18a>
 800fdca:	4651      	mov	r1, sl
 800fdcc:	f006 fe46 	bl	8016a5c <uxr_receive_best_effort_message>
 800fdd0:	2800      	cmp	r0, #0
 800fdd2:	d094      	beq.n	800fcfe <listen_message_reliably+0x18a>
 800fdd4:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 800fdd8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800fdda:	a90c      	add	r1, sp, #48	@ 0x30
 800fddc:	4640      	mov	r0, r8
 800fdde:	f7ff fd41 	bl	800f864 <read_submessage_list>
 800fde2:	e78c      	b.n	800fcfe <listen_message_reliably+0x18a>
 800fde4:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 800fde8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800fdea:	a90c      	add	r1, sp, #48	@ 0x30
 800fdec:	4640      	mov	r0, r8
 800fdee:	f7ff fd39 	bl	800f864 <read_submessage_list>
 800fdf2:	e7c4      	b.n	800fd7e <listen_message_reliably+0x20a>

0800fdf4 <uxr_run_session_timeout>:
 800fdf4:	b570      	push	{r4, r5, r6, lr}
 800fdf6:	4604      	mov	r4, r0
 800fdf8:	460d      	mov	r5, r1
 800fdfa:	f000 fd67 	bl	80108cc <uxr_millis>
 800fdfe:	4606      	mov	r6, r0
 800fe00:	4620      	mov	r0, r4
 800fe02:	f7ff fc71 	bl	800f6e8 <uxr_flash_output_streams>
 800fe06:	4629      	mov	r1, r5
 800fe08:	4620      	mov	r0, r4
 800fe0a:	f7ff feb3 	bl	800fb74 <listen_message_reliably>
 800fe0e:	f000 fd5d 	bl	80108cc <uxr_millis>
 800fe12:	1b83      	subs	r3, r0, r6
 800fe14:	1ae9      	subs	r1, r5, r3
 800fe16:	2900      	cmp	r1, #0
 800fe18:	dcf6      	bgt.n	800fe08 <uxr_run_session_timeout+0x14>
 800fe1a:	f104 0008 	add.w	r0, r4, #8
 800fe1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fe22:	f000 bcf7 	b.w	8010814 <uxr_output_streams_confirmed>
 800fe26:	bf00      	nop

0800fe28 <uxr_run_session_until_data>:
 800fe28:	b570      	push	{r4, r5, r6, lr}
 800fe2a:	4604      	mov	r4, r0
 800fe2c:	460d      	mov	r5, r1
 800fe2e:	f000 fd4d 	bl	80108cc <uxr_millis>
 800fe32:	4606      	mov	r6, r0
 800fe34:	4620      	mov	r0, r4
 800fe36:	f7ff fc57 	bl	800f6e8 <uxr_flash_output_streams>
 800fe3a:	2300      	movs	r3, #0
 800fe3c:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 800fe40:	4629      	mov	r1, r5
 800fe42:	e005      	b.n	800fe50 <uxr_run_session_until_data+0x28>
 800fe44:	f000 fd42 	bl	80108cc <uxr_millis>
 800fe48:	1b83      	subs	r3, r0, r6
 800fe4a:	1ae9      	subs	r1, r5, r3
 800fe4c:	2900      	cmp	r1, #0
 800fe4e:	dd07      	ble.n	800fe60 <uxr_run_session_until_data+0x38>
 800fe50:	4620      	mov	r0, r4
 800fe52:	f7ff fe8f 	bl	800fb74 <listen_message_reliably>
 800fe56:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 800fe5a:	2800      	cmp	r0, #0
 800fe5c:	d0f2      	beq.n	800fe44 <uxr_run_session_until_data+0x1c>
 800fe5e:	bd70      	pop	{r4, r5, r6, pc}
 800fe60:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 800fe64:	bd70      	pop	{r4, r5, r6, pc}
 800fe66:	bf00      	nop

0800fe68 <uxr_run_session_until_confirm_delivery>:
 800fe68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe6c:	4606      	mov	r6, r0
 800fe6e:	460d      	mov	r5, r1
 800fe70:	f000 fd2c 	bl	80108cc <uxr_millis>
 800fe74:	4607      	mov	r7, r0
 800fe76:	4630      	mov	r0, r6
 800fe78:	f7ff fc36 	bl	800f6e8 <uxr_flash_output_streams>
 800fe7c:	2d00      	cmp	r5, #0
 800fe7e:	f106 0808 	add.w	r8, r6, #8
 800fe82:	bfa8      	it	ge
 800fe84:	462c      	movge	r4, r5
 800fe86:	da07      	bge.n	800fe98 <uxr_run_session_until_confirm_delivery+0x30>
 800fe88:	e00e      	b.n	800fea8 <uxr_run_session_until_confirm_delivery+0x40>
 800fe8a:	f7ff fe73 	bl	800fb74 <listen_message_reliably>
 800fe8e:	f000 fd1d 	bl	80108cc <uxr_millis>
 800fe92:	1bc3      	subs	r3, r0, r7
 800fe94:	1aec      	subs	r4, r5, r3
 800fe96:	d407      	bmi.n	800fea8 <uxr_run_session_until_confirm_delivery+0x40>
 800fe98:	4640      	mov	r0, r8
 800fe9a:	f000 fcbb 	bl	8010814 <uxr_output_streams_confirmed>
 800fe9e:	4603      	mov	r3, r0
 800fea0:	4621      	mov	r1, r4
 800fea2:	4630      	mov	r0, r6
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	d0f0      	beq.n	800fe8a <uxr_run_session_until_confirm_delivery+0x22>
 800fea8:	4640      	mov	r0, r8
 800feaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800feae:	f000 bcb1 	b.w	8010814 <uxr_output_streams_confirmed>
 800feb2:	bf00      	nop

0800feb4 <uxr_run_session_until_all_status>:
 800feb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800feb8:	9c08      	ldr	r4, [sp, #32]
 800feba:	4606      	mov	r6, r0
 800febc:	460f      	mov	r7, r1
 800febe:	4691      	mov	r9, r2
 800fec0:	461d      	mov	r5, r3
 800fec2:	f7ff fc11 	bl	800f6e8 <uxr_flash_output_streams>
 800fec6:	b124      	cbz	r4, 800fed2 <uxr_run_session_until_all_status+0x1e>
 800fec8:	4622      	mov	r2, r4
 800feca:	21ff      	movs	r1, #255	@ 0xff
 800fecc:	4628      	mov	r0, r5
 800fece:	f009 fb36 	bl	801953e <memset>
 800fed2:	e9c6 951d 	strd	r9, r5, [r6, #116]	@ 0x74
 800fed6:	67f4      	str	r4, [r6, #124]	@ 0x7c
 800fed8:	f000 fcf8 	bl	80108cc <uxr_millis>
 800fedc:	3d01      	subs	r5, #1
 800fede:	f1a9 0902 	sub.w	r9, r9, #2
 800fee2:	4680      	mov	r8, r0
 800fee4:	4639      	mov	r1, r7
 800fee6:	4630      	mov	r0, r6
 800fee8:	f7ff fe44 	bl	800fb74 <listen_message_reliably>
 800feec:	f000 fcee 	bl	80108cc <uxr_millis>
 800fef0:	eba0 0008 	sub.w	r0, r0, r8
 800fef4:	1a39      	subs	r1, r7, r0
 800fef6:	b344      	cbz	r4, 800ff4a <uxr_run_session_until_all_status+0x96>
 800fef8:	4628      	mov	r0, r5
 800fefa:	46ac      	mov	ip, r5
 800fefc:	2301      	movs	r3, #1
 800fefe:	e002      	b.n	800ff06 <uxr_run_session_until_all_status+0x52>
 800ff00:	42a3      	cmp	r3, r4
 800ff02:	d20d      	bcs.n	800ff20 <uxr_run_session_until_all_status+0x6c>
 800ff04:	3301      	adds	r3, #1
 800ff06:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 800ff0a:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 800ff0e:	d1f7      	bne.n	800ff00 <uxr_run_session_until_all_status+0x4c>
 800ff10:	42a3      	cmp	r3, r4
 800ff12:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 800ff16:	d213      	bcs.n	800ff40 <uxr_run_session_until_all_status+0x8c>
 800ff18:	2a00      	cmp	r2, #0
 800ff1a:	d0f3      	beq.n	800ff04 <uxr_run_session_until_all_status+0x50>
 800ff1c:	2900      	cmp	r1, #0
 800ff1e:	dce2      	bgt.n	800fee6 <uxr_run_session_until_all_status+0x32>
 800ff20:	2300      	movs	r3, #0
 800ff22:	67f3      	str	r3, [r6, #124]	@ 0x7c
 800ff24:	442c      	add	r4, r5
 800ff26:	e001      	b.n	800ff2c <uxr_run_session_until_all_status+0x78>
 800ff28:	2b01      	cmp	r3, #1
 800ff2a:	d812      	bhi.n	800ff52 <uxr_run_session_until_all_status+0x9e>
 800ff2c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800ff30:	4284      	cmp	r4, r0
 800ff32:	d1f9      	bne.n	800ff28 <uxr_run_session_until_all_status+0x74>
 800ff34:	2b01      	cmp	r3, #1
 800ff36:	bf8c      	ite	hi
 800ff38:	2000      	movhi	r0, #0
 800ff3a:	2001      	movls	r0, #1
 800ff3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ff40:	2900      	cmp	r1, #0
 800ff42:	dded      	ble.n	800ff20 <uxr_run_session_until_all_status+0x6c>
 800ff44:	2a00      	cmp	r2, #0
 800ff46:	d1ce      	bne.n	800fee6 <uxr_run_session_until_all_status+0x32>
 800ff48:	e7ea      	b.n	800ff20 <uxr_run_session_until_all_status+0x6c>
 800ff4a:	67f4      	str	r4, [r6, #124]	@ 0x7c
 800ff4c:	2001      	movs	r0, #1
 800ff4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ff52:	2000      	movs	r0, #0
 800ff54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800ff58 <wait_session_status>:
 800ff58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff5c:	4604      	mov	r4, r0
 800ff5e:	b09d      	sub	sp, #116	@ 0x74
 800ff60:	20ff      	movs	r0, #255	@ 0xff
 800ff62:	7160      	strb	r0, [r4, #5]
 800ff64:	9303      	str	r3, [sp, #12]
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	f000 80b6 	beq.w	80100d8 <wait_session_status+0x180>
 800ff6c:	468a      	mov	sl, r1
 800ff6e:	4691      	mov	r9, r2
 800ff70:	f04f 0b00 	mov.w	fp, #0
 800ff74:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800ff76:	464a      	mov	r2, r9
 800ff78:	e9d3 0500 	ldrd	r0, r5, [r3]
 800ff7c:	4651      	mov	r1, sl
 800ff7e:	47a8      	blx	r5
 800ff80:	f000 fca4 	bl	80108cc <uxr_millis>
 800ff84:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800ff88:	4605      	mov	r5, r0
 800ff8a:	e009      	b.n	800ffa0 <wait_session_status+0x48>
 800ff8c:	f000 fc9e 	bl	80108cc <uxr_millis>
 800ff90:	1b40      	subs	r0, r0, r5
 800ff92:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	dd40      	ble.n	801001c <wait_session_status+0xc4>
 800ff9a:	7960      	ldrb	r0, [r4, #5]
 800ff9c:	28ff      	cmp	r0, #255	@ 0xff
 800ff9e:	d145      	bne.n	801002c <wait_session_status+0xd4>
 800ffa0:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800ffa2:	a908      	add	r1, sp, #32
 800ffa4:	6896      	ldr	r6, [r2, #8]
 800ffa6:	6810      	ldr	r0, [r2, #0]
 800ffa8:	aa09      	add	r2, sp, #36	@ 0x24
 800ffaa:	47b0      	blx	r6
 800ffac:	2800      	cmp	r0, #0
 800ffae:	d0ed      	beq.n	800ff8c <wait_session_status+0x34>
 800ffb0:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800ffb4:	a80c      	add	r0, sp, #48	@ 0x30
 800ffb6:	f7fe ff27 	bl	800ee08 <ucdr_init_buffer>
 800ffba:	2600      	movs	r6, #0
 800ffbc:	f10d 031e 	add.w	r3, sp, #30
 800ffc0:	aa07      	add	r2, sp, #28
 800ffc2:	a90c      	add	r1, sp, #48	@ 0x30
 800ffc4:	4620      	mov	r0, r4
 800ffc6:	f88d 601c 	strb.w	r6, [sp, #28]
 800ffca:	f000 fa87 	bl	80104dc <uxr_read_session_header>
 800ffce:	2800      	cmp	r0, #0
 800ffd0:	d0dc      	beq.n	800ff8c <wait_session_status+0x34>
 800ffd2:	4631      	mov	r1, r6
 800ffd4:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800ffd8:	f000 fb24 	bl	8010624 <uxr_stream_id_from_raw>
 800ffdc:	f3c0 4707 	ubfx	r7, r0, #16, #8
 800ffe0:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800ffe4:	9302      	str	r3, [sp, #8]
 800ffe6:	2f01      	cmp	r7, #1
 800ffe8:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 800ffec:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800fff0:	d05c      	beq.n	80100ac <wait_session_status+0x154>
 800fff2:	2f02      	cmp	r7, #2
 800fff4:	d020      	beq.n	8010038 <wait_session_status+0xe0>
 800fff6:	2f00      	cmp	r7, #0
 800fff8:	d1c8      	bne.n	800ff8c <wait_session_status+0x34>
 800fffa:	4639      	mov	r1, r7
 800fffc:	4638      	mov	r0, r7
 800fffe:	f000 fb11 	bl	8010624 <uxr_stream_id_from_raw>
 8010002:	a90c      	add	r1, sp, #48	@ 0x30
 8010004:	4602      	mov	r2, r0
 8010006:	900b      	str	r0, [sp, #44]	@ 0x2c
 8010008:	4620      	mov	r0, r4
 801000a:	f7ff fc2b 	bl	800f864 <read_submessage_list>
 801000e:	f000 fc5d 	bl	80108cc <uxr_millis>
 8010012:	1b40      	subs	r0, r0, r5
 8010014:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8010018:	2b00      	cmp	r3, #0
 801001a:	dcbe      	bgt.n	800ff9a <wait_session_status+0x42>
 801001c:	9b03      	ldr	r3, [sp, #12]
 801001e:	7960      	ldrb	r0, [r4, #5]
 8010020:	f10b 0b01 	add.w	fp, fp, #1
 8010024:	455b      	cmp	r3, fp
 8010026:	d001      	beq.n	801002c <wait_session_status+0xd4>
 8010028:	28ff      	cmp	r0, #255	@ 0xff
 801002a:	d0a3      	beq.n	800ff74 <wait_session_status+0x1c>
 801002c:	38ff      	subs	r0, #255	@ 0xff
 801002e:	bf18      	it	ne
 8010030:	2001      	movne	r0, #1
 8010032:	b01d      	add	sp, #116	@ 0x74
 8010034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010038:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 801003c:	9304      	str	r3, [sp, #16]
 801003e:	4631      	mov	r1, r6
 8010040:	f104 0008 	add.w	r0, r4, #8
 8010044:	f000 fbdc 	bl	8010800 <uxr_get_input_reliable_stream>
 8010048:	4680      	mov	r8, r0
 801004a:	b348      	cbz	r0, 80100a0 <wait_session_status+0x148>
 801004c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801004e:	9205      	str	r2, [sp, #20]
 8010050:	a80c      	add	r0, sp, #48	@ 0x30
 8010052:	f7fe ff09 	bl	800ee68 <ucdr_buffer_remaining>
 8010056:	4603      	mov	r3, r0
 8010058:	f10d 001d 	add.w	r0, sp, #29
 801005c:	9000      	str	r0, [sp, #0]
 801005e:	9a05      	ldr	r2, [sp, #20]
 8010060:	9902      	ldr	r1, [sp, #8]
 8010062:	4640      	mov	r0, r8
 8010064:	f006 fd8e 	bl	8016b84 <uxr_receive_reliable_message>
 8010068:	b1d0      	cbz	r0, 80100a0 <wait_session_status+0x148>
 801006a:	f89d 301d 	ldrb.w	r3, [sp, #29]
 801006e:	2b00      	cmp	r3, #0
 8010070:	d03a      	beq.n	80100e8 <wait_session_status+0x190>
 8010072:	9f04      	ldr	r7, [sp, #16]
 8010074:	e00a      	b.n	801008c <wait_session_status+0x134>
 8010076:	f04f 0302 	mov.w	r3, #2
 801007a:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 801007e:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 8010082:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 8010086:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8010088:	f7ff fbec 	bl	800f864 <read_submessage_list>
 801008c:	a914      	add	r1, sp, #80	@ 0x50
 801008e:	2204      	movs	r2, #4
 8010090:	4640      	mov	r0, r8
 8010092:	f006 fdf7 	bl	8016c84 <uxr_next_input_reliable_buffer_available>
 8010096:	4603      	mov	r3, r0
 8010098:	a914      	add	r1, sp, #80	@ 0x50
 801009a:	4620      	mov	r0, r4
 801009c:	2b00      	cmp	r3, #0
 801009e:	d1ea      	bne.n	8010076 <wait_session_status+0x11e>
 80100a0:	9904      	ldr	r1, [sp, #16]
 80100a2:	4632      	mov	r2, r6
 80100a4:	4620      	mov	r0, r4
 80100a6:	f7ff fa59 	bl	800f55c <write_submessage_acknack.isra.0>
 80100aa:	e76f      	b.n	800ff8c <wait_session_status+0x34>
 80100ac:	4631      	mov	r1, r6
 80100ae:	f104 0008 	add.w	r0, r4, #8
 80100b2:	f000 fb9b 	bl	80107ec <uxr_get_input_best_effort_stream>
 80100b6:	2800      	cmp	r0, #0
 80100b8:	f43f af68 	beq.w	800ff8c <wait_session_status+0x34>
 80100bc:	9902      	ldr	r1, [sp, #8]
 80100be:	f006 fccd 	bl	8016a5c <uxr_receive_best_effort_message>
 80100c2:	2800      	cmp	r0, #0
 80100c4:	f43f af62 	beq.w	800ff8c <wait_session_status+0x34>
 80100c8:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 80100cc:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80100ce:	a90c      	add	r1, sp, #48	@ 0x30
 80100d0:	4620      	mov	r0, r4
 80100d2:	f7ff fbc7 	bl	800f864 <read_submessage_list>
 80100d6:	e759      	b.n	800ff8c <wait_session_status+0x34>
 80100d8:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80100da:	e9d3 0400 	ldrd	r0, r4, [r3]
 80100de:	47a0      	blx	r4
 80100e0:	2001      	movs	r0, #1
 80100e2:	b01d      	add	sp, #116	@ 0x74
 80100e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100e8:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 80100ec:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80100ee:	a90c      	add	r1, sp, #48	@ 0x30
 80100f0:	4620      	mov	r0, r4
 80100f2:	f7ff fbb7 	bl	800f864 <read_submessage_list>
 80100f6:	e7bc      	b.n	8010072 <wait_session_status+0x11a>

080100f8 <uxr_delete_session_retries>:
 80100f8:	b530      	push	{r4, r5, lr}
 80100fa:	b08f      	sub	sp, #60	@ 0x3c
 80100fc:	4604      	mov	r4, r0
 80100fe:	460d      	mov	r5, r1
 8010100:	f000 fa2e 	bl	8010560 <uxr_session_header_offset>
 8010104:	2300      	movs	r3, #0
 8010106:	2210      	movs	r2, #16
 8010108:	9000      	str	r0, [sp, #0]
 801010a:	a902      	add	r1, sp, #8
 801010c:	a806      	add	r0, sp, #24
 801010e:	f7fe fe69 	bl	800ede4 <ucdr_init_buffer_origin_offset>
 8010112:	a906      	add	r1, sp, #24
 8010114:	4620      	mov	r0, r4
 8010116:	f000 f973 	bl	8010400 <uxr_buffer_delete_session>
 801011a:	2200      	movs	r2, #0
 801011c:	4611      	mov	r1, r2
 801011e:	9b06      	ldr	r3, [sp, #24]
 8010120:	4620      	mov	r0, r4
 8010122:	f000 f9c7 	bl	80104b4 <uxr_stamp_session_header>
 8010126:	a806      	add	r0, sp, #24
 8010128:	f7fe fe9a 	bl	800ee60 <ucdr_buffer_length>
 801012c:	462b      	mov	r3, r5
 801012e:	4602      	mov	r2, r0
 8010130:	a902      	add	r1, sp, #8
 8010132:	4620      	mov	r0, r4
 8010134:	f7ff ff10 	bl	800ff58 <wait_session_status>
 8010138:	b118      	cbz	r0, 8010142 <uxr_delete_session_retries+0x4a>
 801013a:	7960      	ldrb	r0, [r4, #5]
 801013c:	fab0 f080 	clz	r0, r0
 8010140:	0940      	lsrs	r0, r0, #5
 8010142:	b00f      	add	sp, #60	@ 0x3c
 8010144:	bd30      	pop	{r4, r5, pc}
 8010146:	bf00      	nop

08010148 <uxr_create_session>:
 8010148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801014c:	f100 0b08 	add.w	fp, r0, #8
 8010150:	b0ab      	sub	sp, #172	@ 0xac
 8010152:	4604      	mov	r4, r0
 8010154:	4658      	mov	r0, fp
 8010156:	f000 fa99 	bl	801068c <uxr_reset_stream_storage>
 801015a:	4620      	mov	r0, r4
 801015c:	f000 fa00 	bl	8010560 <uxr_session_header_offset>
 8010160:	2300      	movs	r3, #0
 8010162:	9000      	str	r0, [sp, #0]
 8010164:	221c      	movs	r2, #28
 8010166:	a90b      	add	r1, sp, #44	@ 0x2c
 8010168:	a812      	add	r0, sp, #72	@ 0x48
 801016a:	f7fe fe3b 	bl	800ede4 <ucdr_init_buffer_origin_offset>
 801016e:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010170:	8a1a      	ldrh	r2, [r3, #16]
 8010172:	3a04      	subs	r2, #4
 8010174:	b292      	uxth	r2, r2
 8010176:	a912      	add	r1, sp, #72	@ 0x48
 8010178:	4620      	mov	r0, r4
 801017a:	f000 f917 	bl	80103ac <uxr_buffer_create_session>
 801017e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8010180:	4620      	mov	r0, r4
 8010182:	f000 f983 	bl	801048c <uxr_stamp_create_session_header>
 8010186:	a812      	add	r0, sp, #72	@ 0x48
 8010188:	f7fe fe6a 	bl	800ee60 <ucdr_buffer_length>
 801018c:	23ff      	movs	r3, #255	@ 0xff
 801018e:	7163      	strb	r3, [r4, #5]
 8010190:	230a      	movs	r3, #10
 8010192:	46da      	mov	sl, fp
 8010194:	9303      	str	r3, [sp, #12]
 8010196:	4683      	mov	fp, r0
 8010198:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801019a:	465a      	mov	r2, fp
 801019c:	e9d3 0500 	ldrd	r0, r5, [r3]
 80101a0:	a90b      	add	r1, sp, #44	@ 0x2c
 80101a2:	47a8      	blx	r5
 80101a4:	f000 fb92 	bl	80108cc <uxr_millis>
 80101a8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80101ac:	4605      	mov	r5, r0
 80101ae:	e009      	b.n	80101c4 <uxr_create_session+0x7c>
 80101b0:	f000 fb8c 	bl	80108cc <uxr_millis>
 80101b4:	1b40      	subs	r0, r0, r5
 80101b6:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 80101ba:	2b00      	cmp	r3, #0
 80101bc:	7962      	ldrb	r2, [r4, #5]
 80101be:	dd38      	ble.n	8010232 <uxr_create_session+0xea>
 80101c0:	2aff      	cmp	r2, #255	@ 0xff
 80101c2:	d13c      	bne.n	801023e <uxr_create_session+0xf6>
 80101c4:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 80101c6:	a907      	add	r1, sp, #28
 80101c8:	6896      	ldr	r6, [r2, #8]
 80101ca:	6810      	ldr	r0, [r2, #0]
 80101cc:	aa08      	add	r2, sp, #32
 80101ce:	47b0      	blx	r6
 80101d0:	2800      	cmp	r0, #0
 80101d2:	d0ed      	beq.n	80101b0 <uxr_create_session+0x68>
 80101d4:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 80101d8:	a81a      	add	r0, sp, #104	@ 0x68
 80101da:	f7fe fe15 	bl	800ee08 <ucdr_init_buffer>
 80101de:	2600      	movs	r6, #0
 80101e0:	f10d 031a 	add.w	r3, sp, #26
 80101e4:	aa06      	add	r2, sp, #24
 80101e6:	a91a      	add	r1, sp, #104	@ 0x68
 80101e8:	4620      	mov	r0, r4
 80101ea:	f88d 6018 	strb.w	r6, [sp, #24]
 80101ee:	f000 f975 	bl	80104dc <uxr_read_session_header>
 80101f2:	2800      	cmp	r0, #0
 80101f4:	d0dc      	beq.n	80101b0 <uxr_create_session+0x68>
 80101f6:	4631      	mov	r1, r6
 80101f8:	f89d 0018 	ldrb.w	r0, [sp, #24]
 80101fc:	f000 fa12 	bl	8010624 <uxr_stream_id_from_raw>
 8010200:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8010204:	2e01      	cmp	r6, #1
 8010206:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 801020a:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 801020e:	f3c0 2707 	ubfx	r7, r0, #8, #8
 8010212:	d053      	beq.n	80102bc <uxr_create_session+0x174>
 8010214:	2e02      	cmp	r6, #2
 8010216:	d018      	beq.n	801024a <uxr_create_session+0x102>
 8010218:	2e00      	cmp	r6, #0
 801021a:	d1c9      	bne.n	80101b0 <uxr_create_session+0x68>
 801021c:	4631      	mov	r1, r6
 801021e:	4630      	mov	r0, r6
 8010220:	f000 fa00 	bl	8010624 <uxr_stream_id_from_raw>
 8010224:	a91a      	add	r1, sp, #104	@ 0x68
 8010226:	4602      	mov	r2, r0
 8010228:	900a      	str	r0, [sp, #40]	@ 0x28
 801022a:	4620      	mov	r0, r4
 801022c:	f7ff fb1a 	bl	800f864 <read_submessage_list>
 8010230:	e7be      	b.n	80101b0 <uxr_create_session+0x68>
 8010232:	9b03      	ldr	r3, [sp, #12]
 8010234:	3b01      	subs	r3, #1
 8010236:	9303      	str	r3, [sp, #12]
 8010238:	d001      	beq.n	801023e <uxr_create_session+0xf6>
 801023a:	2aff      	cmp	r2, #255	@ 0xff
 801023c:	d0ac      	beq.n	8010198 <uxr_create_session+0x50>
 801023e:	2a00      	cmp	r2, #0
 8010240:	d051      	beq.n	80102e6 <uxr_create_session+0x19e>
 8010242:	2000      	movs	r0, #0
 8010244:	b02b      	add	sp, #172	@ 0xac
 8010246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801024a:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 801024e:	9304      	str	r3, [sp, #16]
 8010250:	4639      	mov	r1, r7
 8010252:	4650      	mov	r0, sl
 8010254:	f000 fad4 	bl	8010800 <uxr_get_input_reliable_stream>
 8010258:	4680      	mov	r8, r0
 801025a:	b348      	cbz	r0, 80102b0 <uxr_create_session+0x168>
 801025c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801025e:	9205      	str	r2, [sp, #20]
 8010260:	a81a      	add	r0, sp, #104	@ 0x68
 8010262:	f7fe fe01 	bl	800ee68 <ucdr_buffer_remaining>
 8010266:	4603      	mov	r3, r0
 8010268:	f10d 0019 	add.w	r0, sp, #25
 801026c:	9000      	str	r0, [sp, #0]
 801026e:	9a05      	ldr	r2, [sp, #20]
 8010270:	4649      	mov	r1, r9
 8010272:	4640      	mov	r0, r8
 8010274:	f006 fc86 	bl	8016b84 <uxr_receive_reliable_message>
 8010278:	b1d0      	cbz	r0, 80102b0 <uxr_create_session+0x168>
 801027a:	f89d 3019 	ldrb.w	r3, [sp, #25]
 801027e:	2b00      	cmp	r3, #0
 8010280:	d038      	beq.n	80102f4 <uxr_create_session+0x1ac>
 8010282:	9e04      	ldr	r6, [sp, #16]
 8010284:	e00a      	b.n	801029c <uxr_create_session+0x154>
 8010286:	f04f 0302 	mov.w	r3, #2
 801028a:	f88d 6028 	strb.w	r6, [sp, #40]	@ 0x28
 801028e:	f88d 7029 	strb.w	r7, [sp, #41]	@ 0x29
 8010292:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010296:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010298:	f7ff fae4 	bl	800f864 <read_submessage_list>
 801029c:	a922      	add	r1, sp, #136	@ 0x88
 801029e:	2204      	movs	r2, #4
 80102a0:	4640      	mov	r0, r8
 80102a2:	f006 fcef 	bl	8016c84 <uxr_next_input_reliable_buffer_available>
 80102a6:	4603      	mov	r3, r0
 80102a8:	a922      	add	r1, sp, #136	@ 0x88
 80102aa:	4620      	mov	r0, r4
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	d1ea      	bne.n	8010286 <uxr_create_session+0x13e>
 80102b0:	9904      	ldr	r1, [sp, #16]
 80102b2:	463a      	mov	r2, r7
 80102b4:	4620      	mov	r0, r4
 80102b6:	f7ff f951 	bl	800f55c <write_submessage_acknack.isra.0>
 80102ba:	e779      	b.n	80101b0 <uxr_create_session+0x68>
 80102bc:	4639      	mov	r1, r7
 80102be:	4650      	mov	r0, sl
 80102c0:	f000 fa94 	bl	80107ec <uxr_get_input_best_effort_stream>
 80102c4:	2800      	cmp	r0, #0
 80102c6:	f43f af73 	beq.w	80101b0 <uxr_create_session+0x68>
 80102ca:	4649      	mov	r1, r9
 80102cc:	f006 fbc6 	bl	8016a5c <uxr_receive_best_effort_message>
 80102d0:	2800      	cmp	r0, #0
 80102d2:	f43f af6d 	beq.w	80101b0 <uxr_create_session+0x68>
 80102d6:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 80102da:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80102dc:	a91a      	add	r1, sp, #104	@ 0x68
 80102de:	4620      	mov	r0, r4
 80102e0:	f7ff fac0 	bl	800f864 <read_submessage_list>
 80102e4:	e764      	b.n	80101b0 <uxr_create_session+0x68>
 80102e6:	4650      	mov	r0, sl
 80102e8:	f000 f9d0 	bl	801068c <uxr_reset_stream_storage>
 80102ec:	2001      	movs	r0, #1
 80102ee:	b02b      	add	sp, #172	@ 0xac
 80102f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80102f4:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 80102f8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80102fa:	a91a      	add	r1, sp, #104	@ 0x68
 80102fc:	4620      	mov	r0, r4
 80102fe:	f7ff fab1 	bl	800f864 <read_submessage_list>
 8010302:	e7be      	b.n	8010282 <uxr_create_session+0x13a>

08010304 <uxr_prepare_stream_to_write_submessage>:
 8010304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010308:	b082      	sub	sp, #8
 801030a:	4682      	mov	sl, r0
 801030c:	4610      	mov	r0, r2
 801030e:	4615      	mov	r5, r2
 8010310:	461e      	mov	r6, r3
 8010312:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 8010316:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 801031a:	9101      	str	r1, [sp, #4]
 801031c:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8010320:	f000 face 	bl	80108c0 <uxr_submessage_padding>
 8010324:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8010328:	f105 0904 	add.w	r9, r5, #4
 801032c:	2b01      	cmp	r3, #1
 801032e:	4481      	add	r9, r0
 8010330:	d01d      	beq.n	801036e <uxr_prepare_stream_to_write_submessage+0x6a>
 8010332:	2b02      	cmp	r3, #2
 8010334:	d116      	bne.n	8010364 <uxr_prepare_stream_to_write_submessage+0x60>
 8010336:	4621      	mov	r1, r4
 8010338:	f10a 0008 	add.w	r0, sl, #8
 801033c:	f000 fa4c 	bl	80107d8 <uxr_get_output_reliable_stream>
 8010340:	4604      	mov	r4, r0
 8010342:	b158      	cbz	r0, 801035c <uxr_prepare_stream_to_write_submessage+0x58>
 8010344:	4649      	mov	r1, r9
 8010346:	4632      	mov	r2, r6
 8010348:	f006 fe58 	bl	8016ffc <uxr_prepare_reliable_buffer_to_write>
 801034c:	4604      	mov	r4, r0
 801034e:	b12c      	cbz	r4, 801035c <uxr_prepare_stream_to_write_submessage+0x58>
 8010350:	4643      	mov	r3, r8
 8010352:	b2aa      	uxth	r2, r5
 8010354:	4639      	mov	r1, r7
 8010356:	4630      	mov	r0, r6
 8010358:	f000 fa72 	bl	8010840 <uxr_buffer_submessage_header>
 801035c:	4620      	mov	r0, r4
 801035e:	b002      	add	sp, #8
 8010360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010364:	2400      	movs	r4, #0
 8010366:	4620      	mov	r0, r4
 8010368:	b002      	add	sp, #8
 801036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801036e:	4621      	mov	r1, r4
 8010370:	f10a 0008 	add.w	r0, sl, #8
 8010374:	f000 fa28 	bl	80107c8 <uxr_get_output_best_effort_stream>
 8010378:	4604      	mov	r4, r0
 801037a:	2800      	cmp	r0, #0
 801037c:	d0ee      	beq.n	801035c <uxr_prepare_stream_to_write_submessage+0x58>
 801037e:	4649      	mov	r1, r9
 8010380:	4632      	mov	r2, r6
 8010382:	f006 fd6b 	bl	8016e5c <uxr_prepare_best_effort_buffer_to_write>
 8010386:	4604      	mov	r4, r0
 8010388:	e7e1      	b.n	801034e <uxr_prepare_stream_to_write_submessage+0x4a>
 801038a:	bf00      	nop

0801038c <uxr_init_session_info>:
 801038c:	0e13      	lsrs	r3, r2, #24
 801038e:	7043      	strb	r3, [r0, #1]
 8010390:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8010394:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8010398:	7001      	strb	r1, [r0, #0]
 801039a:	70c3      	strb	r3, [r0, #3]
 801039c:	2109      	movs	r1, #9
 801039e:	23ff      	movs	r3, #255	@ 0xff
 80103a0:	f880 c002 	strb.w	ip, [r0, #2]
 80103a4:	7102      	strb	r2, [r0, #4]
 80103a6:	80c1      	strh	r1, [r0, #6]
 80103a8:	7143      	strb	r3, [r0, #5]
 80103aa:	4770      	bx	lr

080103ac <uxr_buffer_create_session>:
 80103ac:	b530      	push	{r4, r5, lr}
 80103ae:	b089      	sub	sp, #36	@ 0x24
 80103b0:	2300      	movs	r3, #0
 80103b2:	4d12      	ldr	r5, [pc, #72]	@ (80103fc <uxr_buffer_create_session+0x50>)
 80103b4:	9307      	str	r3, [sp, #28]
 80103b6:	f8ad 201c 	strh.w	r2, [sp, #28]
 80103ba:	2201      	movs	r2, #1
 80103bc:	9301      	str	r3, [sp, #4]
 80103be:	80c2      	strh	r2, [r0, #6]
 80103c0:	f88d 2004 	strb.w	r2, [sp, #4]
 80103c4:	682a      	ldr	r2, [r5, #0]
 80103c6:	9200      	str	r2, [sp, #0]
 80103c8:	88aa      	ldrh	r2, [r5, #4]
 80103ca:	f8ad 2006 	strh.w	r2, [sp, #6]
 80103ce:	f8d0 2001 	ldr.w	r2, [r0, #1]
 80103d2:	9202      	str	r2, [sp, #8]
 80103d4:	460c      	mov	r4, r1
 80103d6:	7802      	ldrb	r2, [r0, #0]
 80103d8:	9303      	str	r3, [sp, #12]
 80103da:	4619      	mov	r1, r3
 80103dc:	f88d 200c 	strb.w	r2, [sp, #12]
 80103e0:	4620      	mov	r0, r4
 80103e2:	2210      	movs	r2, #16
 80103e4:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80103e8:	9306      	str	r3, [sp, #24]
 80103ea:	f000 fa29 	bl	8010840 <uxr_buffer_submessage_header>
 80103ee:	4669      	mov	r1, sp
 80103f0:	4620      	mov	r0, r4
 80103f2:	f001 fa6d 	bl	80118d0 <uxr_serialize_CREATE_CLIENT_Payload>
 80103f6:	b009      	add	sp, #36	@ 0x24
 80103f8:	bd30      	pop	{r4, r5, pc}
 80103fa:	bf00      	nop
 80103fc:	0801a914 	.word	0x0801a914

08010400 <uxr_buffer_delete_session>:
 8010400:	b510      	push	{r4, lr}
 8010402:	4b0c      	ldr	r3, [pc, #48]	@ (8010434 <uxr_buffer_delete_session+0x34>)
 8010404:	b082      	sub	sp, #8
 8010406:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 801040a:	f8ad c006 	strh.w	ip, [sp, #6]
 801040e:	460c      	mov	r4, r1
 8010410:	2202      	movs	r2, #2
 8010412:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8010416:	80c2      	strh	r2, [r0, #6]
 8010418:	f8ad 3004 	strh.w	r3, [sp, #4]
 801041c:	2204      	movs	r2, #4
 801041e:	2300      	movs	r3, #0
 8010420:	2103      	movs	r1, #3
 8010422:	4620      	mov	r0, r4
 8010424:	f000 fa0c 	bl	8010840 <uxr_buffer_submessage_header>
 8010428:	a901      	add	r1, sp, #4
 801042a:	4620      	mov	r0, r4
 801042c:	f001 faf6 	bl	8011a1c <uxr_serialize_DELETE_Payload>
 8010430:	b002      	add	sp, #8
 8010432:	bd10      	pop	{r4, pc}
 8010434:	0801a914 	.word	0x0801a914

08010438 <uxr_read_create_session_status>:
 8010438:	b510      	push	{r4, lr}
 801043a:	b088      	sub	sp, #32
 801043c:	4604      	mov	r4, r0
 801043e:	4608      	mov	r0, r1
 8010440:	a901      	add	r1, sp, #4
 8010442:	f001 fafb 	bl	8011a3c <uxr_deserialize_STATUS_AGENT_Payload>
 8010446:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801044a:	7163      	strb	r3, [r4, #5]
 801044c:	b008      	add	sp, #32
 801044e:	bd10      	pop	{r4, pc}

08010450 <uxr_read_delete_session_status>:
 8010450:	b510      	push	{r4, lr}
 8010452:	4604      	mov	r4, r0
 8010454:	b084      	sub	sp, #16
 8010456:	4608      	mov	r0, r1
 8010458:	a902      	add	r1, sp, #8
 801045a:	f001 fb1f 	bl	8011a9c <uxr_deserialize_STATUS_Payload>
 801045e:	88e3      	ldrh	r3, [r4, #6]
 8010460:	2b02      	cmp	r3, #2
 8010462:	d001      	beq.n	8010468 <uxr_read_delete_session_status+0x18>
 8010464:	b004      	add	sp, #16
 8010466:	bd10      	pop	{r4, pc}
 8010468:	f10d 000a 	add.w	r0, sp, #10
 801046c:	f7fe fffc 	bl	800f468 <uxr_object_id_from_raw>
 8010470:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8010474:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8010478:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 801047c:	b29b      	uxth	r3, r3
 801047e:	2b02      	cmp	r3, #2
 8010480:	bf04      	itt	eq
 8010482:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 8010486:	7163      	strbeq	r3, [r4, #5]
 8010488:	b004      	add	sp, #16
 801048a:	bd10      	pop	{r4, pc}

0801048c <uxr_stamp_create_session_header>:
 801048c:	b510      	push	{r4, lr}
 801048e:	2208      	movs	r2, #8
 8010490:	b08a      	sub	sp, #40	@ 0x28
 8010492:	4604      	mov	r4, r0
 8010494:	eb0d 0002 	add.w	r0, sp, r2
 8010498:	f7fe fcb6 	bl	800ee08 <ucdr_init_buffer>
 801049c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80104a0:	9400      	str	r4, [sp, #0]
 80104a2:	2300      	movs	r3, #0
 80104a4:	461a      	mov	r2, r3
 80104a6:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 80104aa:	a802      	add	r0, sp, #8
 80104ac:	f000 fbc2 	bl	8010c34 <uxr_serialize_message_header>
 80104b0:	b00a      	add	sp, #40	@ 0x28
 80104b2:	bd10      	pop	{r4, pc}

080104b4 <uxr_stamp_session_header>:
 80104b4:	b530      	push	{r4, r5, lr}
 80104b6:	b08d      	sub	sp, #52	@ 0x34
 80104b8:	4604      	mov	r4, r0
 80104ba:	460d      	mov	r5, r1
 80104bc:	9203      	str	r2, [sp, #12]
 80104be:	4619      	mov	r1, r3
 80104c0:	a804      	add	r0, sp, #16
 80104c2:	2208      	movs	r2, #8
 80104c4:	f7fe fca0 	bl	800ee08 <ucdr_init_buffer>
 80104c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80104cc:	9b03      	ldr	r3, [sp, #12]
 80104ce:	9400      	str	r4, [sp, #0]
 80104d0:	462a      	mov	r2, r5
 80104d2:	a804      	add	r0, sp, #16
 80104d4:	f000 fbae 	bl	8010c34 <uxr_serialize_message_header>
 80104d8:	b00d      	add	sp, #52	@ 0x34
 80104da:	bd30      	pop	{r4, r5, pc}

080104dc <uxr_read_session_header>:
 80104dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80104e0:	4607      	mov	r7, r0
 80104e2:	b084      	sub	sp, #16
 80104e4:	4608      	mov	r0, r1
 80104e6:	460c      	mov	r4, r1
 80104e8:	4615      	mov	r5, r2
 80104ea:	461e      	mov	r6, r3
 80104ec:	f7fe fcbc 	bl	800ee68 <ucdr_buffer_remaining>
 80104f0:	2808      	cmp	r0, #8
 80104f2:	d803      	bhi.n	80104fc <uxr_read_session_header+0x20>
 80104f4:	2000      	movs	r0, #0
 80104f6:	b004      	add	sp, #16
 80104f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80104fc:	f10d 080c 	add.w	r8, sp, #12
 8010500:	4633      	mov	r3, r6
 8010502:	462a      	mov	r2, r5
 8010504:	f8cd 8000 	str.w	r8, [sp]
 8010508:	4620      	mov	r0, r4
 801050a:	f10d 010b 	add.w	r1, sp, #11
 801050e:	f000 fbaf 	bl	8010c70 <uxr_deserialize_message_header>
 8010512:	783a      	ldrb	r2, [r7, #0]
 8010514:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8010518:	4293      	cmp	r3, r2
 801051a:	d1eb      	bne.n	80104f4 <uxr_read_session_header+0x18>
 801051c:	061b      	lsls	r3, r3, #24
 801051e:	d41c      	bmi.n	801055a <uxr_read_session_header+0x7e>
 8010520:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8010524:	787b      	ldrb	r3, [r7, #1]
 8010526:	429a      	cmp	r2, r3
 8010528:	d003      	beq.n	8010532 <uxr_read_session_header+0x56>
 801052a:	2001      	movs	r0, #1
 801052c:	f080 0001 	eor.w	r0, r0, #1
 8010530:	e7e1      	b.n	80104f6 <uxr_read_session_header+0x1a>
 8010532:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8010536:	78bb      	ldrb	r3, [r7, #2]
 8010538:	429a      	cmp	r2, r3
 801053a:	f107 0102 	add.w	r1, r7, #2
 801053e:	d1f4      	bne.n	801052a <uxr_read_session_header+0x4e>
 8010540:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8010544:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8010548:	429a      	cmp	r2, r3
 801054a:	d1ee      	bne.n	801052a <uxr_read_session_header+0x4e>
 801054c:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8010550:	784b      	ldrb	r3, [r1, #1]
 8010552:	429a      	cmp	r2, r3
 8010554:	d1e9      	bne.n	801052a <uxr_read_session_header+0x4e>
 8010556:	2000      	movs	r0, #0
 8010558:	e7e8      	b.n	801052c <uxr_read_session_header+0x50>
 801055a:	2001      	movs	r0, #1
 801055c:	e7cb      	b.n	80104f6 <uxr_read_session_header+0x1a>
 801055e:	bf00      	nop

08010560 <uxr_session_header_offset>:
 8010560:	f990 3000 	ldrsb.w	r3, [r0]
 8010564:	2b00      	cmp	r3, #0
 8010566:	bfac      	ite	ge
 8010568:	2008      	movge	r0, #8
 801056a:	2004      	movlt	r0, #4
 801056c:	4770      	bx	lr
 801056e:	bf00      	nop

08010570 <uxr_init_base_object_request>:
 8010570:	b510      	push	{r4, lr}
 8010572:	88c3      	ldrh	r3, [r0, #6]
 8010574:	b082      	sub	sp, #8
 8010576:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 801057a:	9101      	str	r1, [sp, #4]
 801057c:	f1a3 010a 	sub.w	r1, r3, #10
 8010580:	b289      	uxth	r1, r1
 8010582:	42a1      	cmp	r1, r4
 8010584:	d80e      	bhi.n	80105a4 <uxr_init_base_object_request+0x34>
 8010586:	3301      	adds	r3, #1
 8010588:	b29c      	uxth	r4, r3
 801058a:	f3c3 2107 	ubfx	r1, r3, #8, #8
 801058e:	b2db      	uxtb	r3, r3
 8010590:	80c4      	strh	r4, [r0, #6]
 8010592:	9801      	ldr	r0, [sp, #4]
 8010594:	7011      	strb	r1, [r2, #0]
 8010596:	7053      	strb	r3, [r2, #1]
 8010598:	1c91      	adds	r1, r2, #2
 801059a:	f7fe ff79 	bl	800f490 <uxr_object_id_to_raw>
 801059e:	4620      	mov	r0, r4
 80105a0:	b002      	add	sp, #8
 80105a2:	bd10      	pop	{r4, pc}
 80105a4:	230a      	movs	r3, #10
 80105a6:	2100      	movs	r1, #0
 80105a8:	461c      	mov	r4, r3
 80105aa:	e7f1      	b.n	8010590 <uxr_init_base_object_request+0x20>

080105ac <uxr_parse_base_object_request>:
 80105ac:	b570      	push	{r4, r5, r6, lr}
 80105ae:	4604      	mov	r4, r0
 80105b0:	3002      	adds	r0, #2
 80105b2:	460d      	mov	r5, r1
 80105b4:	4616      	mov	r6, r2
 80105b6:	f7fe ff57 	bl	800f468 <uxr_object_id_from_raw>
 80105ba:	f3c0 430f 	ubfx	r3, r0, #16, #16
 80105be:	8028      	strh	r0, [r5, #0]
 80105c0:	806b      	strh	r3, [r5, #2]
 80105c2:	7822      	ldrb	r2, [r4, #0]
 80105c4:	7863      	ldrb	r3, [r4, #1]
 80105c6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80105ca:	8033      	strh	r3, [r6, #0]
 80105cc:	bd70      	pop	{r4, r5, r6, pc}
 80105ce:	bf00      	nop

080105d0 <uxr_stream_id>:
 80105d0:	2901      	cmp	r1, #1
 80105d2:	b082      	sub	sp, #8
 80105d4:	d01d      	beq.n	8010612 <uxr_stream_id+0x42>
 80105d6:	2902      	cmp	r1, #2
 80105d8:	f04f 0c00 	mov.w	ip, #0
 80105dc:	d01e      	beq.n	801061c <uxr_stream_id+0x4c>
 80105de:	2300      	movs	r3, #0
 80105e0:	f36c 0307 	bfi	r3, ip, #0, #8
 80105e4:	f360 230f 	bfi	r3, r0, #8, #8
 80105e8:	f361 4317 	bfi	r3, r1, #16, #8
 80105ec:	f362 631f 	bfi	r3, r2, #24, #8
 80105f0:	b2da      	uxtb	r2, r3
 80105f2:	2000      	movs	r0, #0
 80105f4:	f362 0007 	bfi	r0, r2, #0, #8
 80105f8:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80105fc:	f362 200f 	bfi	r0, r2, #8, #8
 8010600:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8010604:	f362 4017 	bfi	r0, r2, #16, #8
 8010608:	0e1b      	lsrs	r3, r3, #24
 801060a:	f363 601f 	bfi	r0, r3, #24, #8
 801060e:	b002      	add	sp, #8
 8010610:	4770      	bx	lr
 8010612:	f100 0c01 	add.w	ip, r0, #1
 8010616:	fa5f fc8c 	uxtb.w	ip, ip
 801061a:	e7e0      	b.n	80105de <uxr_stream_id+0xe>
 801061c:	f080 0c80 	eor.w	ip, r0, #128	@ 0x80
 8010620:	e7dd      	b.n	80105de <uxr_stream_id+0xe>
 8010622:	bf00      	nop

08010624 <uxr_stream_id_from_raw>:
 8010624:	b082      	sub	sp, #8
 8010626:	b130      	cbz	r0, 8010636 <uxr_stream_id_from_raw+0x12>
 8010628:	0603      	lsls	r3, r0, #24
 801062a:	d420      	bmi.n	801066e <uxr_stream_id_from_raw+0x4a>
 801062c:	1e42      	subs	r2, r0, #1
 801062e:	b2d2      	uxtb	r2, r2
 8010630:	f04f 0c01 	mov.w	ip, #1
 8010634:	e001      	b.n	801063a <uxr_stream_id_from_raw+0x16>
 8010636:	4684      	mov	ip, r0
 8010638:	4602      	mov	r2, r0
 801063a:	2300      	movs	r3, #0
 801063c:	f360 0307 	bfi	r3, r0, #0, #8
 8010640:	f362 230f 	bfi	r3, r2, #8, #8
 8010644:	f36c 4317 	bfi	r3, ip, #16, #8
 8010648:	f361 631f 	bfi	r3, r1, #24, #8
 801064c:	b2da      	uxtb	r2, r3
 801064e:	2000      	movs	r0, #0
 8010650:	f362 0007 	bfi	r0, r2, #0, #8
 8010654:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8010658:	f362 200f 	bfi	r0, r2, #8, #8
 801065c:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8010660:	f362 4017 	bfi	r0, r2, #16, #8
 8010664:	0e1b      	lsrs	r3, r3, #24
 8010666:	f363 601f 	bfi	r0, r3, #24, #8
 801066a:	b002      	add	sp, #8
 801066c:	4770      	bx	lr
 801066e:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 8010672:	f04f 0c02 	mov.w	ip, #2
 8010676:	e7e0      	b.n	801063a <uxr_stream_id_from_raw+0x16>

08010678 <uxr_init_stream_storage>:
 8010678:	2300      	movs	r3, #0
 801067a:	7403      	strb	r3, [r0, #16]
 801067c:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 8010680:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 8010684:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 8010688:	4770      	bx	lr
 801068a:	bf00      	nop

0801068c <uxr_reset_stream_storage>:
 801068c:	b570      	push	{r4, r5, r6, lr}
 801068e:	7c03      	ldrb	r3, [r0, #16]
 8010690:	4604      	mov	r4, r0
 8010692:	b153      	cbz	r3, 80106aa <uxr_reset_stream_storage+0x1e>
 8010694:	4606      	mov	r6, r0
 8010696:	2500      	movs	r5, #0
 8010698:	4630      	mov	r0, r6
 801069a:	f006 fbd9 	bl	8016e50 <uxr_reset_output_best_effort_stream>
 801069e:	7c23      	ldrb	r3, [r4, #16]
 80106a0:	3501      	adds	r5, #1
 80106a2:	42ab      	cmp	r3, r5
 80106a4:	f106 0610 	add.w	r6, r6, #16
 80106a8:	d8f6      	bhi.n	8010698 <uxr_reset_stream_storage+0xc>
 80106aa:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80106ae:	b163      	cbz	r3, 80106ca <uxr_reset_stream_storage+0x3e>
 80106b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80106b4:	2500      	movs	r5, #0
 80106b6:	4630      	mov	r0, r6
 80106b8:	f006 f9cc 	bl	8016a54 <uxr_reset_input_best_effort_stream>
 80106bc:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80106c0:	3501      	adds	r5, #1
 80106c2:	42ab      	cmp	r3, r5
 80106c4:	f106 0602 	add.w	r6, r6, #2
 80106c8:	d8f5      	bhi.n	80106b6 <uxr_reset_stream_storage+0x2a>
 80106ca:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80106ce:	b163      	cbz	r3, 80106ea <uxr_reset_stream_storage+0x5e>
 80106d0:	f104 0618 	add.w	r6, r4, #24
 80106d4:	2500      	movs	r5, #0
 80106d6:	4630      	mov	r0, r6
 80106d8:	f006 fc66 	bl	8016fa8 <uxr_reset_output_reliable_stream>
 80106dc:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80106e0:	3501      	adds	r5, #1
 80106e2:	42ab      	cmp	r3, r5
 80106e4:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 80106e8:	d8f5      	bhi.n	80106d6 <uxr_reset_stream_storage+0x4a>
 80106ea:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 80106ee:	b163      	cbz	r3, 801070a <uxr_reset_stream_storage+0x7e>
 80106f0:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 80106f4:	2500      	movs	r5, #0
 80106f6:	4630      	mov	r0, r6
 80106f8:	f006 fa20 	bl	8016b3c <uxr_reset_input_reliable_stream>
 80106fc:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8010700:	3501      	adds	r5, #1
 8010702:	42ab      	cmp	r3, r5
 8010704:	f106 0618 	add.w	r6, r6, #24
 8010708:	d8f5      	bhi.n	80106f6 <uxr_reset_stream_storage+0x6a>
 801070a:	bd70      	pop	{r4, r5, r6, pc}

0801070c <uxr_add_output_best_effort_buffer>:
 801070c:	b510      	push	{r4, lr}
 801070e:	7c04      	ldrb	r4, [r0, #16]
 8010710:	f104 0c01 	add.w	ip, r4, #1
 8010714:	b082      	sub	sp, #8
 8010716:	f880 c010 	strb.w	ip, [r0, #16]
 801071a:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 801071e:	f006 fb8d 	bl	8016e3c <uxr_init_output_best_effort_stream>
 8010722:	2201      	movs	r2, #1
 8010724:	4611      	mov	r1, r2
 8010726:	4620      	mov	r0, r4
 8010728:	b002      	add	sp, #8
 801072a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801072e:	f7ff bf4f 	b.w	80105d0 <uxr_stream_id>
 8010732:	bf00      	nop

08010734 <uxr_add_output_reliable_buffer>:
 8010734:	b510      	push	{r4, lr}
 8010736:	b084      	sub	sp, #16
 8010738:	4684      	mov	ip, r0
 801073a:	f89d 0018 	ldrb.w	r0, [sp, #24]
 801073e:	9000      	str	r0, [sp, #0]
 8010740:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 8010744:	2028      	movs	r0, #40	@ 0x28
 8010746:	fb00 c004 	mla	r0, r0, r4, ip
 801074a:	f104 0e01 	add.w	lr, r4, #1
 801074e:	3018      	adds	r0, #24
 8010750:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 8010754:	f006 fbf0 	bl	8016f38 <uxr_init_output_reliable_stream>
 8010758:	2201      	movs	r2, #1
 801075a:	2102      	movs	r1, #2
 801075c:	4620      	mov	r0, r4
 801075e:	b004      	add	sp, #16
 8010760:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010764:	f7ff bf34 	b.w	80105d0 <uxr_stream_id>

08010768 <uxr_add_input_best_effort_buffer>:
 8010768:	b510      	push	{r4, lr}
 801076a:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 801076e:	4603      	mov	r3, r0
 8010770:	1c62      	adds	r2, r4, #1
 8010772:	f104 0021 	add.w	r0, r4, #33	@ 0x21
 8010776:	b082      	sub	sp, #8
 8010778:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 801077c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8010780:	f006 f964 	bl	8016a4c <uxr_init_input_best_effort_stream>
 8010784:	2200      	movs	r2, #0
 8010786:	2101      	movs	r1, #1
 8010788:	4620      	mov	r0, r4
 801078a:	b002      	add	sp, #8
 801078c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010790:	f7ff bf1e 	b.w	80105d0 <uxr_stream_id>

08010794 <uxr_add_input_reliable_buffer>:
 8010794:	b510      	push	{r4, lr}
 8010796:	b084      	sub	sp, #16
 8010798:	4684      	mov	ip, r0
 801079a:	9806      	ldr	r0, [sp, #24]
 801079c:	9000      	str	r0, [sp, #0]
 801079e:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 80107a2:	2018      	movs	r0, #24
 80107a4:	fb00 c004 	mla	r0, r0, r4, ip
 80107a8:	f104 0e01 	add.w	lr, r4, #1
 80107ac:	3048      	adds	r0, #72	@ 0x48
 80107ae:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 80107b2:	f006 f997 	bl	8016ae4 <uxr_init_input_reliable_stream>
 80107b6:	2200      	movs	r2, #0
 80107b8:	2102      	movs	r1, #2
 80107ba:	4620      	mov	r0, r4
 80107bc:	b004      	add	sp, #16
 80107be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80107c2:	f7ff bf05 	b.w	80105d0 <uxr_stream_id>
 80107c6:	bf00      	nop

080107c8 <uxr_get_output_best_effort_stream>:
 80107c8:	7c03      	ldrb	r3, [r0, #16]
 80107ca:	428b      	cmp	r3, r1
 80107cc:	bf8c      	ite	hi
 80107ce:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 80107d2:	2000      	movls	r0, #0
 80107d4:	4770      	bx	lr
 80107d6:	bf00      	nop

080107d8 <uxr_get_output_reliable_stream>:
 80107d8:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80107dc:	428b      	cmp	r3, r1
 80107de:	bf83      	ittte	hi
 80107e0:	2328      	movhi	r3, #40	@ 0x28
 80107e2:	fb03 0001 	mlahi	r0, r3, r1, r0
 80107e6:	3018      	addhi	r0, #24
 80107e8:	2000      	movls	r0, #0
 80107ea:	4770      	bx	lr

080107ec <uxr_get_input_best_effort_stream>:
 80107ec:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 80107f0:	428b      	cmp	r3, r1
 80107f2:	bf86      	itte	hi
 80107f4:	3121      	addhi	r1, #33	@ 0x21
 80107f6:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 80107fa:	2000      	movls	r0, #0
 80107fc:	4770      	bx	lr
 80107fe:	bf00      	nop

08010800 <uxr_get_input_reliable_stream>:
 8010800:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 8010804:	428b      	cmp	r3, r1
 8010806:	bf83      	ittte	hi
 8010808:	2318      	movhi	r3, #24
 801080a:	fb03 0001 	mlahi	r0, r3, r1, r0
 801080e:	3048      	addhi	r0, #72	@ 0x48
 8010810:	2000      	movls	r0, #0
 8010812:	4770      	bx	lr

08010814 <uxr_output_streams_confirmed>:
 8010814:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8010818:	b183      	cbz	r3, 801083c <uxr_output_streams_confirmed+0x28>
 801081a:	b570      	push	{r4, r5, r6, lr}
 801081c:	4606      	mov	r6, r0
 801081e:	f100 0518 	add.w	r5, r0, #24
 8010822:	2400      	movs	r4, #0
 8010824:	e001      	b.n	801082a <uxr_output_streams_confirmed+0x16>
 8010826:	3528      	adds	r5, #40	@ 0x28
 8010828:	b138      	cbz	r0, 801083a <uxr_output_streams_confirmed+0x26>
 801082a:	4628      	mov	r0, r5
 801082c:	f006 fe2c 	bl	8017488 <uxr_is_output_up_to_date>
 8010830:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 8010834:	3401      	adds	r4, #1
 8010836:	42a3      	cmp	r3, r4
 8010838:	d8f5      	bhi.n	8010826 <uxr_output_streams_confirmed+0x12>
 801083a:	bd70      	pop	{r4, r5, r6, pc}
 801083c:	2001      	movs	r0, #1
 801083e:	4770      	bx	lr

08010840 <uxr_buffer_submessage_header>:
 8010840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010842:	4604      	mov	r4, r0
 8010844:	460e      	mov	r6, r1
 8010846:	2104      	movs	r1, #4
 8010848:	4615      	mov	r5, r2
 801084a:	461f      	mov	r7, r3
 801084c:	f7fe faf6 	bl	800ee3c <ucdr_align_to>
 8010850:	2301      	movs	r3, #1
 8010852:	ea47 0203 	orr.w	r2, r7, r3
 8010856:	4631      	mov	r1, r6
 8010858:	7523      	strb	r3, [r4, #20]
 801085a:	4620      	mov	r0, r4
 801085c:	462b      	mov	r3, r5
 801085e:	f000 fa27 	bl	8010cb0 <uxr_serialize_submessage_header>
 8010862:	4620      	mov	r0, r4
 8010864:	f7fe fb00 	bl	800ee68 <ucdr_buffer_remaining>
 8010868:	42a8      	cmp	r0, r5
 801086a:	bf34      	ite	cc
 801086c:	2000      	movcc	r0, #0
 801086e:	2001      	movcs	r0, #1
 8010870:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010872:	bf00      	nop

08010874 <uxr_read_submessage_header>:
 8010874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010878:	4604      	mov	r4, r0
 801087a:	460d      	mov	r5, r1
 801087c:	2104      	movs	r1, #4
 801087e:	4616      	mov	r6, r2
 8010880:	4698      	mov	r8, r3
 8010882:	f7fe fadb 	bl	800ee3c <ucdr_align_to>
 8010886:	4620      	mov	r0, r4
 8010888:	f7fe faee 	bl	800ee68 <ucdr_buffer_remaining>
 801088c:	2803      	cmp	r0, #3
 801088e:	bf8c      	ite	hi
 8010890:	2701      	movhi	r7, #1
 8010892:	2700      	movls	r7, #0
 8010894:	d802      	bhi.n	801089c <uxr_read_submessage_header+0x28>
 8010896:	4638      	mov	r0, r7
 8010898:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801089c:	4633      	mov	r3, r6
 801089e:	4642      	mov	r2, r8
 80108a0:	4620      	mov	r0, r4
 80108a2:	4629      	mov	r1, r5
 80108a4:	f000 fa18 	bl	8010cd8 <uxr_deserialize_submessage_header>
 80108a8:	f898 3000 	ldrb.w	r3, [r8]
 80108ac:	f003 0201 	and.w	r2, r3, #1
 80108b0:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80108b4:	f888 3000 	strb.w	r3, [r8]
 80108b8:	7522      	strb	r2, [r4, #20]
 80108ba:	4638      	mov	r0, r7
 80108bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080108c0 <uxr_submessage_padding>:
 80108c0:	f010 0003 	ands.w	r0, r0, #3
 80108c4:	bf18      	it	ne
 80108c6:	f1c0 0004 	rsbne	r0, r0, #4
 80108ca:	4770      	bx	lr

080108cc <uxr_millis>:
 80108cc:	b510      	push	{r4, lr}
 80108ce:	b084      	sub	sp, #16
 80108d0:	4669      	mov	r1, sp
 80108d2:	2001      	movs	r0, #1
 80108d4:	f7f1 fc5c 	bl	8002190 <clock_gettime>
 80108d8:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 80108dc:	4906      	ldr	r1, [pc, #24]	@ (80108f8 <uxr_millis+0x2c>)
 80108de:	fba0 0301 	umull	r0, r3, r0, r1
 80108e2:	1900      	adds	r0, r0, r4
 80108e4:	fb01 3102 	mla	r1, r1, r2, r3
 80108e8:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 80108ec:	4a03      	ldr	r2, [pc, #12]	@ (80108fc <uxr_millis+0x30>)
 80108ee:	2300      	movs	r3, #0
 80108f0:	f7f0 f994 	bl	8000c1c <__aeabi_ldivmod>
 80108f4:	b004      	add	sp, #16
 80108f6:	bd10      	pop	{r4, pc}
 80108f8:	3b9aca00 	.word	0x3b9aca00
 80108fc:	000f4240 	.word	0x000f4240

08010900 <uxr_nanos>:
 8010900:	b510      	push	{r4, lr}
 8010902:	b084      	sub	sp, #16
 8010904:	4669      	mov	r1, sp
 8010906:	2001      	movs	r0, #1
 8010908:	f7f1 fc42 	bl	8002190 <clock_gettime>
 801090c:	4a06      	ldr	r2, [pc, #24]	@ (8010928 <uxr_nanos+0x28>)
 801090e:	9800      	ldr	r0, [sp, #0]
 8010910:	9902      	ldr	r1, [sp, #8]
 8010912:	9c01      	ldr	r4, [sp, #4]
 8010914:	fba0 0302 	umull	r0, r3, r0, r2
 8010918:	1840      	adds	r0, r0, r1
 801091a:	fb02 3304 	mla	r3, r2, r4, r3
 801091e:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 8010922:	b004      	add	sp, #16
 8010924:	bd10      	pop	{r4, pc}
 8010926:	bf00      	nop
 8010928:	3b9aca00 	.word	0x3b9aca00

0801092c <on_full_output_buffer_fragmented>:
 801092c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010930:	460c      	mov	r4, r1
 8010932:	b08a      	sub	sp, #40	@ 0x28
 8010934:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 8010938:	4606      	mov	r6, r0
 801093a:	f104 0008 	add.w	r0, r4, #8
 801093e:	f7ff ff4b 	bl	80107d8 <uxr_get_output_reliable_stream>
 8010942:	4605      	mov	r5, r0
 8010944:	f006 fdaa 	bl	801749c <get_available_free_slots>
 8010948:	b968      	cbnz	r0, 8010966 <on_full_output_buffer_fragmented+0x3a>
 801094a:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 801094e:	4620      	mov	r0, r4
 8010950:	4798      	blx	r3
 8010952:	b918      	cbnz	r0, 801095c <on_full_output_buffer_fragmented+0x30>
 8010954:	2001      	movs	r0, #1
 8010956:	b00a      	add	sp, #40	@ 0x28
 8010958:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801095c:	4628      	mov	r0, r5
 801095e:	f006 fd9d 	bl	801749c <get_available_free_slots>
 8010962:	2800      	cmp	r0, #0
 8010964:	d0f6      	beq.n	8010954 <on_full_output_buffer_fragmented+0x28>
 8010966:	8929      	ldrh	r1, [r5, #8]
 8010968:	89eb      	ldrh	r3, [r5, #14]
 801096a:	7b28      	ldrb	r0, [r5, #12]
 801096c:	686a      	ldr	r2, [r5, #4]
 801096e:	fbb2 f8f1 	udiv	r8, r2, r1
 8010972:	fbb3 f2f1 	udiv	r2, r3, r1
 8010976:	fb01 3112 	mls	r1, r1, r2, r3
 801097a:	f5c0 407f 	rsb	r0, r0, #65280	@ 0xff00
 801097e:	b289      	uxth	r1, r1
 8010980:	fb08 f101 	mul.w	r1, r8, r1
 8010984:	30fc      	adds	r0, #252	@ 0xfc
 8010986:	f1a8 0804 	sub.w	r8, r8, #4
 801098a:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 801098e:	4440      	add	r0, r8
 8010990:	b287      	uxth	r7, r0
 8010992:	1bdb      	subs	r3, r3, r7
 8010994:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 8010998:	682b      	ldr	r3, [r5, #0]
 801099a:	3104      	adds	r1, #4
 801099c:	4419      	add	r1, r3
 801099e:	4642      	mov	r2, r8
 80109a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80109a4:	9300      	str	r3, [sp, #0]
 80109a6:	a802      	add	r0, sp, #8
 80109a8:	2300      	movs	r3, #0
 80109aa:	f7fe fa1b 	bl	800ede4 <ucdr_init_buffer_origin_offset>
 80109ae:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 80109b2:	f102 0308 	add.w	r3, r2, #8
 80109b6:	4543      	cmp	r3, r8
 80109b8:	d928      	bls.n	8010a0c <on_full_output_buffer_fragmented+0xe0>
 80109ba:	463a      	mov	r2, r7
 80109bc:	2300      	movs	r3, #0
 80109be:	210d      	movs	r1, #13
 80109c0:	a802      	add	r0, sp, #8
 80109c2:	f7ff ff3d 	bl	8010840 <uxr_buffer_submessage_header>
 80109c6:	8929      	ldrh	r1, [r5, #8]
 80109c8:	89eb      	ldrh	r3, [r5, #14]
 80109ca:	fbb3 f2f1 	udiv	r2, r3, r1
 80109ce:	fb01 3312 	mls	r3, r1, r2, r3
 80109d2:	b29b      	uxth	r3, r3
 80109d4:	686a      	ldr	r2, [r5, #4]
 80109d6:	fbb2 f2f1 	udiv	r2, r2, r1
 80109da:	fb02 f303 	mul.w	r3, r2, r3
 80109de:	682a      	ldr	r2, [r5, #0]
 80109e0:	f842 8003 	str.w	r8, [r2, r3]
 80109e4:	89e8      	ldrh	r0, [r5, #14]
 80109e6:	2101      	movs	r1, #1
 80109e8:	f006 fea8 	bl	801773c <uxr_seq_num_add>
 80109ec:	9904      	ldr	r1, [sp, #16]
 80109ee:	9a03      	ldr	r2, [sp, #12]
 80109f0:	81e8      	strh	r0, [r5, #14]
 80109f2:	1a52      	subs	r2, r2, r1
 80109f4:	4630      	mov	r0, r6
 80109f6:	f7fe fa07 	bl	800ee08 <ucdr_init_buffer>
 80109fa:	4630      	mov	r0, r6
 80109fc:	490f      	ldr	r1, [pc, #60]	@ (8010a3c <on_full_output_buffer_fragmented+0x110>)
 80109fe:	4622      	mov	r2, r4
 8010a00:	f7fe f9d6 	bl	800edb0 <ucdr_set_on_full_buffer_callback>
 8010a04:	2000      	movs	r0, #0
 8010a06:	b00a      	add	sp, #40	@ 0x28
 8010a08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a0c:	b292      	uxth	r2, r2
 8010a0e:	2302      	movs	r3, #2
 8010a10:	210d      	movs	r1, #13
 8010a12:	a802      	add	r0, sp, #8
 8010a14:	f7ff ff14 	bl	8010840 <uxr_buffer_submessage_header>
 8010a18:	8928      	ldrh	r0, [r5, #8]
 8010a1a:	89eb      	ldrh	r3, [r5, #14]
 8010a1c:	fbb3 f1f0 	udiv	r1, r3, r0
 8010a20:	fb00 3311 	mls	r3, r0, r1, r3
 8010a24:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8010a28:	6869      	ldr	r1, [r5, #4]
 8010a2a:	fbb1 f1f0 	udiv	r1, r1, r0
 8010a2e:	b29b      	uxth	r3, r3
 8010a30:	fb01 f303 	mul.w	r3, r1, r3
 8010a34:	6829      	ldr	r1, [r5, #0]
 8010a36:	3208      	adds	r2, #8
 8010a38:	50ca      	str	r2, [r1, r3]
 8010a3a:	e7d3      	b.n	80109e4 <on_full_output_buffer_fragmented+0xb8>
 8010a3c:	0801092d 	.word	0x0801092d

08010a40 <uxr_prepare_output_stream>:
 8010a40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010a42:	b087      	sub	sp, #28
 8010a44:	2707      	movs	r7, #7
 8010a46:	9202      	str	r2, [sp, #8]
 8010a48:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8010a4a:	9103      	str	r1, [sp, #12]
 8010a4c:	2500      	movs	r5, #0
 8010a4e:	3204      	adds	r2, #4
 8010a50:	e9cd 7500 	strd	r7, r5, [sp]
 8010a54:	461c      	mov	r4, r3
 8010a56:	4606      	mov	r6, r0
 8010a58:	f7ff fc54 	bl	8010304 <uxr_prepare_stream_to_write_submessage>
 8010a5c:	f080 0201 	eor.w	r2, r0, #1
 8010a60:	b2d2      	uxtb	r2, r2
 8010a62:	75a2      	strb	r2, [r4, #22]
 8010a64:	b112      	cbz	r2, 8010a6c <uxr_prepare_output_stream+0x2c>
 8010a66:	4628      	mov	r0, r5
 8010a68:	b007      	add	sp, #28
 8010a6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010a6c:	aa05      	add	r2, sp, #20
 8010a6e:	9902      	ldr	r1, [sp, #8]
 8010a70:	4630      	mov	r0, r6
 8010a72:	f7ff fd7d 	bl	8010570 <uxr_init_base_object_request>
 8010a76:	a905      	add	r1, sp, #20
 8010a78:	4605      	mov	r5, r0
 8010a7a:	4620      	mov	r0, r4
 8010a7c:	f001 f88c 	bl	8011b98 <uxr_serialize_WRITE_DATA_Payload_Data>
 8010a80:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8010a84:	69a6      	ldr	r6, [r4, #24]
 8010a86:	69e7      	ldr	r7, [r4, #28]
 8010a88:	1a52      	subs	r2, r2, r1
 8010a8a:	4620      	mov	r0, r4
 8010a8c:	f7fe f9bc 	bl	800ee08 <ucdr_init_buffer>
 8010a90:	4620      	mov	r0, r4
 8010a92:	463a      	mov	r2, r7
 8010a94:	4631      	mov	r1, r6
 8010a96:	f7fe f98b 	bl	800edb0 <ucdr_set_on_full_buffer_callback>
 8010a9a:	4628      	mov	r0, r5
 8010a9c:	b007      	add	sp, #28
 8010a9e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010aa0 <uxr_prepare_output_stream_fragmented>:
 8010aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010aa4:	b091      	sub	sp, #68	@ 0x44
 8010aa6:	4605      	mov	r5, r0
 8010aa8:	9105      	str	r1, [sp, #20]
 8010aaa:	3008      	adds	r0, #8
 8010aac:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8010ab0:	461e      	mov	r6, r3
 8010ab2:	9204      	str	r2, [sp, #16]
 8010ab4:	f7ff fe90 	bl	80107d8 <uxr_get_output_reliable_stream>
 8010ab8:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8010abc:	2b01      	cmp	r3, #1
 8010abe:	f000 8091 	beq.w	8010be4 <uxr_prepare_output_stream_fragmented+0x144>
 8010ac2:	4604      	mov	r4, r0
 8010ac4:	2800      	cmp	r0, #0
 8010ac6:	f000 808d 	beq.w	8010be4 <uxr_prepare_output_stream_fragmented+0x144>
 8010aca:	f006 fce7 	bl	801749c <get_available_free_slots>
 8010ace:	2800      	cmp	r0, #0
 8010ad0:	f000 8083 	beq.w	8010bda <uxr_prepare_output_stream_fragmented+0x13a>
 8010ad4:	8922      	ldrh	r2, [r4, #8]
 8010ad6:	89e7      	ldrh	r7, [r4, #14]
 8010ad8:	fbb7 f9f2 	udiv	r9, r7, r2
 8010adc:	fb02 7919 	mls	r9, r2, r9, r7
 8010ae0:	fa1f f989 	uxth.w	r9, r9
 8010ae4:	6863      	ldr	r3, [r4, #4]
 8010ae6:	fbb3 f2f2 	udiv	r2, r3, r2
 8010aea:	6823      	ldr	r3, [r4, #0]
 8010aec:	9203      	str	r2, [sp, #12]
 8010aee:	fb02 f909 	mul.w	r9, r2, r9
 8010af2:	f109 0904 	add.w	r9, r9, #4
 8010af6:	4499      	add	r9, r3
 8010af8:	7b23      	ldrb	r3, [r4, #12]
 8010afa:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8010afe:	4543      	cmp	r3, r8
 8010b00:	f1a2 0b04 	sub.w	fp, r2, #4
 8010b04:	d37a      	bcc.n	8010bfc <uxr_prepare_output_stream_fragmented+0x15c>
 8010b06:	f1ab 0a04 	sub.w	sl, fp, #4
 8010b0a:	ebaa 0a03 	sub.w	sl, sl, r3
 8010b0e:	465a      	mov	r2, fp
 8010b10:	2300      	movs	r3, #0
 8010b12:	4649      	mov	r1, r9
 8010b14:	a808      	add	r0, sp, #32
 8010b16:	f8cd 8000 	str.w	r8, [sp]
 8010b1a:	f7fe f963 	bl	800ede4 <ucdr_init_buffer_origin_offset>
 8010b1e:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8010b20:	fa1f fa8a 	uxth.w	sl, sl
 8010b24:	4652      	mov	r2, sl
 8010b26:	f103 0a08 	add.w	sl, r3, #8
 8010b2a:	45da      	cmp	sl, fp
 8010b2c:	bf34      	ite	cc
 8010b2e:	2302      	movcc	r3, #2
 8010b30:	2300      	movcs	r3, #0
 8010b32:	210d      	movs	r1, #13
 8010b34:	a808      	add	r0, sp, #32
 8010b36:	f7ff fe83 	bl	8010840 <uxr_buffer_submessage_header>
 8010b3a:	8921      	ldrh	r1, [r4, #8]
 8010b3c:	fbb7 f2f1 	udiv	r2, r7, r1
 8010b40:	fb01 7212 	mls	r2, r1, r2, r7
 8010b44:	b292      	uxth	r2, r2
 8010b46:	6863      	ldr	r3, [r4, #4]
 8010b48:	fbb3 f3f1 	udiv	r3, r3, r1
 8010b4c:	fb02 f303 	mul.w	r3, r2, r3
 8010b50:	6822      	ldr	r2, [r4, #0]
 8010b52:	4638      	mov	r0, r7
 8010b54:	f842 b003 	str.w	fp, [r2, r3]
 8010b58:	2101      	movs	r1, #1
 8010b5a:	f006 fdef 	bl	801773c <uxr_seq_num_add>
 8010b5e:	9b03      	ldr	r3, [sp, #12]
 8010b60:	f108 0104 	add.w	r1, r8, #4
 8010b64:	f1a3 0208 	sub.w	r2, r3, #8
 8010b68:	eba2 0208 	sub.w	r2, r2, r8
 8010b6c:	4449      	add	r1, r9
 8010b6e:	4607      	mov	r7, r0
 8010b70:	4630      	mov	r0, r6
 8010b72:	f7fe f949 	bl	800ee08 <ucdr_init_buffer>
 8010b76:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8010b78:	81e7      	strh	r7, [r4, #14]
 8010b7a:	1d1a      	adds	r2, r3, #4
 8010b7c:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8010b80:	bf28      	it	cs
 8010b82:	2200      	movcs	r2, #0
 8010b84:	2300      	movs	r3, #0
 8010b86:	b292      	uxth	r2, r2
 8010b88:	2107      	movs	r1, #7
 8010b8a:	4630      	mov	r0, r6
 8010b8c:	f7ff fe58 	bl	8010840 <uxr_buffer_submessage_header>
 8010b90:	9904      	ldr	r1, [sp, #16]
 8010b92:	aa07      	add	r2, sp, #28
 8010b94:	4628      	mov	r0, r5
 8010b96:	f7ff fceb 	bl	8010570 <uxr_init_base_object_request>
 8010b9a:	4604      	mov	r4, r0
 8010b9c:	b318      	cbz	r0, 8010be6 <uxr_prepare_output_stream_fragmented+0x146>
 8010b9e:	a907      	add	r1, sp, #28
 8010ba0:	4630      	mov	r0, r6
 8010ba2:	f000 fff9 	bl	8011b98 <uxr_serialize_WRITE_DATA_Payload_Data>
 8010ba6:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8010baa:	4630      	mov	r0, r6
 8010bac:	1a52      	subs	r2, r2, r1
 8010bae:	f7fe f92b 	bl	800ee08 <ucdr_init_buffer>
 8010bb2:	9b05      	ldr	r3, [sp, #20]
 8010bb4:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 8010bb8:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8010bba:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 8010bbe:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8010bc0:	491b      	ldr	r1, [pc, #108]	@ (8010c30 <uxr_prepare_output_stream_fragmented+0x190>)
 8010bc2:	f8c5 a0c4 	str.w	sl, [r5, #196]	@ 0xc4
 8010bc6:	4630      	mov	r0, r6
 8010bc8:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 8010bcc:	462a      	mov	r2, r5
 8010bce:	f7fe f8ef 	bl	800edb0 <ucdr_set_on_full_buffer_callback>
 8010bd2:	4620      	mov	r0, r4
 8010bd4:	b011      	add	sp, #68	@ 0x44
 8010bd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010bda:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8010bdc:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8010bde:	4628      	mov	r0, r5
 8010be0:	4798      	blx	r3
 8010be2:	b920      	cbnz	r0, 8010bee <uxr_prepare_output_stream_fragmented+0x14e>
 8010be4:	2400      	movs	r4, #0
 8010be6:	4620      	mov	r0, r4
 8010be8:	b011      	add	sp, #68	@ 0x44
 8010bea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010bee:	4620      	mov	r0, r4
 8010bf0:	f006 fc54 	bl	801749c <get_available_free_slots>
 8010bf4:	2800      	cmp	r0, #0
 8010bf6:	f47f af6d 	bne.w	8010ad4 <uxr_prepare_output_stream_fragmented+0x34>
 8010bfa:	e7f3      	b.n	8010be4 <uxr_prepare_output_stream_fragmented+0x144>
 8010bfc:	4638      	mov	r0, r7
 8010bfe:	2101      	movs	r1, #1
 8010c00:	f006 fd9c 	bl	801773c <uxr_seq_num_add>
 8010c04:	8921      	ldrh	r1, [r4, #8]
 8010c06:	fbb0 f2f1 	udiv	r2, r0, r1
 8010c0a:	fb01 0912 	mls	r9, r1, r2, r0
 8010c0e:	fa1f f289 	uxth.w	r2, r9
 8010c12:	6863      	ldr	r3, [r4, #4]
 8010c14:	fbb3 f9f1 	udiv	r9, r3, r1
 8010c18:	6823      	ldr	r3, [r4, #0]
 8010c1a:	fb02 f909 	mul.w	r9, r2, r9
 8010c1e:	f109 0904 	add.w	r9, r9, #4
 8010c22:	4499      	add	r9, r3
 8010c24:	4607      	mov	r7, r0
 8010c26:	7b23      	ldrb	r3, [r4, #12]
 8010c28:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8010c2c:	e76b      	b.n	8010b06 <uxr_prepare_output_stream_fragmented+0x66>
 8010c2e:	bf00      	nop
 8010c30:	0801092d 	.word	0x0801092d

08010c34 <uxr_serialize_message_header>:
 8010c34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010c36:	b083      	sub	sp, #12
 8010c38:	4616      	mov	r6, r2
 8010c3a:	4604      	mov	r4, r0
 8010c3c:	9301      	str	r3, [sp, #4]
 8010c3e:	460d      	mov	r5, r1
 8010c40:	9f08      	ldr	r7, [sp, #32]
 8010c42:	f7fc fba1 	bl	800d388 <ucdr_serialize_uint8_t>
 8010c46:	4631      	mov	r1, r6
 8010c48:	4620      	mov	r0, r4
 8010c4a:	f7fc fb9d 	bl	800d388 <ucdr_serialize_uint8_t>
 8010c4e:	9a01      	ldr	r2, [sp, #4]
 8010c50:	2101      	movs	r1, #1
 8010c52:	4620      	mov	r0, r4
 8010c54:	f7fc fc44 	bl	800d4e0 <ucdr_serialize_endian_uint16_t>
 8010c58:	062b      	lsls	r3, r5, #24
 8010c5a:	d501      	bpl.n	8010c60 <uxr_serialize_message_header+0x2c>
 8010c5c:	b003      	add	sp, #12
 8010c5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010c60:	2204      	movs	r2, #4
 8010c62:	4639      	mov	r1, r7
 8010c64:	4620      	mov	r0, r4
 8010c66:	b003      	add	sp, #12
 8010c68:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010c6c:	f7fb bfea 	b.w	800cc44 <ucdr_serialize_array_uint8_t>

08010c70 <uxr_deserialize_message_header>:
 8010c70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010c72:	b083      	sub	sp, #12
 8010c74:	4616      	mov	r6, r2
 8010c76:	4604      	mov	r4, r0
 8010c78:	9301      	str	r3, [sp, #4]
 8010c7a:	460d      	mov	r5, r1
 8010c7c:	9f08      	ldr	r7, [sp, #32]
 8010c7e:	f7fc fb99 	bl	800d3b4 <ucdr_deserialize_uint8_t>
 8010c82:	4631      	mov	r1, r6
 8010c84:	4620      	mov	r0, r4
 8010c86:	f7fc fb95 	bl	800d3b4 <ucdr_deserialize_uint8_t>
 8010c8a:	9a01      	ldr	r2, [sp, #4]
 8010c8c:	2101      	movs	r1, #1
 8010c8e:	4620      	mov	r0, r4
 8010c90:	f7fc fd1a 	bl	800d6c8 <ucdr_deserialize_endian_uint16_t>
 8010c94:	f995 3000 	ldrsb.w	r3, [r5]
 8010c98:	2b00      	cmp	r3, #0
 8010c9a:	da01      	bge.n	8010ca0 <uxr_deserialize_message_header+0x30>
 8010c9c:	b003      	add	sp, #12
 8010c9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010ca0:	2204      	movs	r2, #4
 8010ca2:	4639      	mov	r1, r7
 8010ca4:	4620      	mov	r0, r4
 8010ca6:	b003      	add	sp, #12
 8010ca8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010cac:	f7fc b82e 	b.w	800cd0c <ucdr_deserialize_array_uint8_t>

08010cb0 <uxr_serialize_submessage_header>:
 8010cb0:	b530      	push	{r4, r5, lr}
 8010cb2:	b083      	sub	sp, #12
 8010cb4:	4615      	mov	r5, r2
 8010cb6:	4604      	mov	r4, r0
 8010cb8:	9301      	str	r3, [sp, #4]
 8010cba:	f7fc fb65 	bl	800d388 <ucdr_serialize_uint8_t>
 8010cbe:	4629      	mov	r1, r5
 8010cc0:	4620      	mov	r0, r4
 8010cc2:	f7fc fb61 	bl	800d388 <ucdr_serialize_uint8_t>
 8010cc6:	9a01      	ldr	r2, [sp, #4]
 8010cc8:	2101      	movs	r1, #1
 8010cca:	4620      	mov	r0, r4
 8010ccc:	b003      	add	sp, #12
 8010cce:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010cd2:	f7fc bc05 	b.w	800d4e0 <ucdr_serialize_endian_uint16_t>
 8010cd6:	bf00      	nop

08010cd8 <uxr_deserialize_submessage_header>:
 8010cd8:	b530      	push	{r4, r5, lr}
 8010cda:	b083      	sub	sp, #12
 8010cdc:	4615      	mov	r5, r2
 8010cde:	4604      	mov	r4, r0
 8010ce0:	9301      	str	r3, [sp, #4]
 8010ce2:	f7fc fb67 	bl	800d3b4 <ucdr_deserialize_uint8_t>
 8010ce6:	4629      	mov	r1, r5
 8010ce8:	4620      	mov	r0, r4
 8010cea:	f7fc fb63 	bl	800d3b4 <ucdr_deserialize_uint8_t>
 8010cee:	9a01      	ldr	r2, [sp, #4]
 8010cf0:	2101      	movs	r1, #1
 8010cf2:	4620      	mov	r0, r4
 8010cf4:	b003      	add	sp, #12
 8010cf6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010cfa:	f7fc bce5 	b.w	800d6c8 <ucdr_deserialize_endian_uint16_t>
 8010cfe:	bf00      	nop

08010d00 <uxr_serialize_CLIENT_Representation>:
 8010d00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010d04:	2204      	movs	r2, #4
 8010d06:	460e      	mov	r6, r1
 8010d08:	4605      	mov	r5, r0
 8010d0a:	f7fb ff9b 	bl	800cc44 <ucdr_serialize_array_uint8_t>
 8010d0e:	2202      	movs	r2, #2
 8010d10:	4607      	mov	r7, r0
 8010d12:	1d31      	adds	r1, r6, #4
 8010d14:	4628      	mov	r0, r5
 8010d16:	f7fb ff95 	bl	800cc44 <ucdr_serialize_array_uint8_t>
 8010d1a:	4038      	ands	r0, r7
 8010d1c:	2202      	movs	r2, #2
 8010d1e:	1db1      	adds	r1, r6, #6
 8010d20:	b2c7      	uxtb	r7, r0
 8010d22:	4628      	mov	r0, r5
 8010d24:	f7fb ff8e 	bl	800cc44 <ucdr_serialize_array_uint8_t>
 8010d28:	2204      	movs	r2, #4
 8010d2a:	4007      	ands	r7, r0
 8010d2c:	f106 0108 	add.w	r1, r6, #8
 8010d30:	4628      	mov	r0, r5
 8010d32:	f7fb ff87 	bl	800cc44 <ucdr_serialize_array_uint8_t>
 8010d36:	7b31      	ldrb	r1, [r6, #12]
 8010d38:	4007      	ands	r7, r0
 8010d3a:	4628      	mov	r0, r5
 8010d3c:	f7fc fb24 	bl	800d388 <ucdr_serialize_uint8_t>
 8010d40:	7b71      	ldrb	r1, [r6, #13]
 8010d42:	4007      	ands	r7, r0
 8010d44:	4628      	mov	r0, r5
 8010d46:	f7fc faf1 	bl	800d32c <ucdr_serialize_bool>
 8010d4a:	7b73      	ldrb	r3, [r6, #13]
 8010d4c:	ea07 0800 	and.w	r8, r7, r0
 8010d50:	b93b      	cbnz	r3, 8010d62 <uxr_serialize_CLIENT_Representation+0x62>
 8010d52:	8bb1      	ldrh	r1, [r6, #28]
 8010d54:	4628      	mov	r0, r5
 8010d56:	f7fc fb43 	bl	800d3e0 <ucdr_serialize_uint16_t>
 8010d5a:	ea08 0000 	and.w	r0, r8, r0
 8010d5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010d62:	6931      	ldr	r1, [r6, #16]
 8010d64:	4628      	mov	r0, r5
 8010d66:	f7fc fd25 	bl	800d7b4 <ucdr_serialize_uint32_t>
 8010d6a:	6933      	ldr	r3, [r6, #16]
 8010d6c:	b1e3      	cbz	r3, 8010da8 <uxr_serialize_CLIENT_Representation+0xa8>
 8010d6e:	b1c0      	cbz	r0, 8010da2 <uxr_serialize_CLIENT_Representation+0xa2>
 8010d70:	4637      	mov	r7, r6
 8010d72:	f04f 0900 	mov.w	r9, #0
 8010d76:	e001      	b.n	8010d7c <uxr_serialize_CLIENT_Representation+0x7c>
 8010d78:	3708      	adds	r7, #8
 8010d7a:	b194      	cbz	r4, 8010da2 <uxr_serialize_CLIENT_Representation+0xa2>
 8010d7c:	6979      	ldr	r1, [r7, #20]
 8010d7e:	4628      	mov	r0, r5
 8010d80:	f005 fd8a 	bl	8016898 <ucdr_serialize_string>
 8010d84:	69b9      	ldr	r1, [r7, #24]
 8010d86:	4604      	mov	r4, r0
 8010d88:	4628      	mov	r0, r5
 8010d8a:	f005 fd85 	bl	8016898 <ucdr_serialize_string>
 8010d8e:	6933      	ldr	r3, [r6, #16]
 8010d90:	f109 0901 	add.w	r9, r9, #1
 8010d94:	4004      	ands	r4, r0
 8010d96:	4599      	cmp	r9, r3
 8010d98:	b2e4      	uxtb	r4, r4
 8010d9a:	d3ed      	bcc.n	8010d78 <uxr_serialize_CLIENT_Representation+0x78>
 8010d9c:	ea08 0804 	and.w	r8, r8, r4
 8010da0:	e7d7      	b.n	8010d52 <uxr_serialize_CLIENT_Representation+0x52>
 8010da2:	f04f 0800 	mov.w	r8, #0
 8010da6:	e7d4      	b.n	8010d52 <uxr_serialize_CLIENT_Representation+0x52>
 8010da8:	ea08 0800 	and.w	r8, r8, r0
 8010dac:	e7d1      	b.n	8010d52 <uxr_serialize_CLIENT_Representation+0x52>
 8010dae:	bf00      	nop

08010db0 <uxr_deserialize_CLIENT_Representation>:
 8010db0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010db4:	2204      	movs	r2, #4
 8010db6:	460c      	mov	r4, r1
 8010db8:	4605      	mov	r5, r0
 8010dba:	f7fb ffa7 	bl	800cd0c <ucdr_deserialize_array_uint8_t>
 8010dbe:	2202      	movs	r2, #2
 8010dc0:	4607      	mov	r7, r0
 8010dc2:	1d21      	adds	r1, r4, #4
 8010dc4:	4628      	mov	r0, r5
 8010dc6:	f7fb ffa1 	bl	800cd0c <ucdr_deserialize_array_uint8_t>
 8010dca:	4038      	ands	r0, r7
 8010dcc:	2202      	movs	r2, #2
 8010dce:	1da1      	adds	r1, r4, #6
 8010dd0:	b2c6      	uxtb	r6, r0
 8010dd2:	4628      	mov	r0, r5
 8010dd4:	f7fb ff9a 	bl	800cd0c <ucdr_deserialize_array_uint8_t>
 8010dd8:	2204      	movs	r2, #4
 8010dda:	4006      	ands	r6, r0
 8010ddc:	f104 0108 	add.w	r1, r4, #8
 8010de0:	4628      	mov	r0, r5
 8010de2:	f7fb ff93 	bl	800cd0c <ucdr_deserialize_array_uint8_t>
 8010de6:	f104 010c 	add.w	r1, r4, #12
 8010dea:	4006      	ands	r6, r0
 8010dec:	4628      	mov	r0, r5
 8010dee:	f7fc fae1 	bl	800d3b4 <ucdr_deserialize_uint8_t>
 8010df2:	f104 010d 	add.w	r1, r4, #13
 8010df6:	ea06 0700 	and.w	r7, r6, r0
 8010dfa:	4628      	mov	r0, r5
 8010dfc:	f7fc faac 	bl	800d358 <ucdr_deserialize_bool>
 8010e00:	7b63      	ldrb	r3, [r4, #13]
 8010e02:	4007      	ands	r7, r0
 8010e04:	b93b      	cbnz	r3, 8010e16 <uxr_deserialize_CLIENT_Representation+0x66>
 8010e06:	f104 011c 	add.w	r1, r4, #28
 8010e0a:	4628      	mov	r0, r5
 8010e0c:	f7fc fbe8 	bl	800d5e0 <ucdr_deserialize_uint16_t>
 8010e10:	4038      	ands	r0, r7
 8010e12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010e16:	f104 0110 	add.w	r1, r4, #16
 8010e1a:	4628      	mov	r0, r5
 8010e1c:	f7fc fdfa 	bl	800da14 <ucdr_deserialize_uint32_t>
 8010e20:	6923      	ldr	r3, [r4, #16]
 8010e22:	2b01      	cmp	r3, #1
 8010e24:	d903      	bls.n	8010e2e <uxr_deserialize_CLIENT_Representation+0x7e>
 8010e26:	2301      	movs	r3, #1
 8010e28:	75ab      	strb	r3, [r5, #22]
 8010e2a:	2700      	movs	r7, #0
 8010e2c:	e7eb      	b.n	8010e06 <uxr_deserialize_CLIENT_Representation+0x56>
 8010e2e:	b30b      	cbz	r3, 8010e74 <uxr_deserialize_CLIENT_Representation+0xc4>
 8010e30:	2800      	cmp	r0, #0
 8010e32:	d0fa      	beq.n	8010e2a <uxr_deserialize_CLIENT_Representation+0x7a>
 8010e34:	46a0      	mov	r8, r4
 8010e36:	f04f 0900 	mov.w	r9, #0
 8010e3a:	e001      	b.n	8010e40 <uxr_deserialize_CLIENT_Representation+0x90>
 8010e3c:	2e00      	cmp	r6, #0
 8010e3e:	d0f4      	beq.n	8010e2a <uxr_deserialize_CLIENT_Representation+0x7a>
 8010e40:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8010e44:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010e48:	4628      	mov	r0, r5
 8010e4a:	f005 fd35 	bl	80168b8 <ucdr_deserialize_string>
 8010e4e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010e52:	4606      	mov	r6, r0
 8010e54:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8010e58:	4628      	mov	r0, r5
 8010e5a:	f005 fd2d 	bl	80168b8 <ucdr_deserialize_string>
 8010e5e:	6923      	ldr	r3, [r4, #16]
 8010e60:	f109 0901 	add.w	r9, r9, #1
 8010e64:	4006      	ands	r6, r0
 8010e66:	4599      	cmp	r9, r3
 8010e68:	f108 0808 	add.w	r8, r8, #8
 8010e6c:	b2f6      	uxtb	r6, r6
 8010e6e:	d3e5      	bcc.n	8010e3c <uxr_deserialize_CLIENT_Representation+0x8c>
 8010e70:	4037      	ands	r7, r6
 8010e72:	e7c8      	b.n	8010e06 <uxr_deserialize_CLIENT_Representation+0x56>
 8010e74:	4007      	ands	r7, r0
 8010e76:	e7c6      	b.n	8010e06 <uxr_deserialize_CLIENT_Representation+0x56>

08010e78 <uxr_serialize_AGENT_Representation>:
 8010e78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010e7c:	2204      	movs	r2, #4
 8010e7e:	460f      	mov	r7, r1
 8010e80:	4605      	mov	r5, r0
 8010e82:	f7fb fedf 	bl	800cc44 <ucdr_serialize_array_uint8_t>
 8010e86:	2202      	movs	r2, #2
 8010e88:	4604      	mov	r4, r0
 8010e8a:	1d39      	adds	r1, r7, #4
 8010e8c:	4628      	mov	r0, r5
 8010e8e:	f7fb fed9 	bl	800cc44 <ucdr_serialize_array_uint8_t>
 8010e92:	4020      	ands	r0, r4
 8010e94:	2202      	movs	r2, #2
 8010e96:	1db9      	adds	r1, r7, #6
 8010e98:	b2c4      	uxtb	r4, r0
 8010e9a:	4628      	mov	r0, r5
 8010e9c:	f7fb fed2 	bl	800cc44 <ucdr_serialize_array_uint8_t>
 8010ea0:	7a39      	ldrb	r1, [r7, #8]
 8010ea2:	4004      	ands	r4, r0
 8010ea4:	4628      	mov	r0, r5
 8010ea6:	f7fc fa41 	bl	800d32c <ucdr_serialize_bool>
 8010eaa:	7a3b      	ldrb	r3, [r7, #8]
 8010eac:	ea00 0804 	and.w	r8, r0, r4
 8010eb0:	b913      	cbnz	r3, 8010eb8 <uxr_serialize_AGENT_Representation+0x40>
 8010eb2:	4640      	mov	r0, r8
 8010eb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010eb8:	68f9      	ldr	r1, [r7, #12]
 8010eba:	4628      	mov	r0, r5
 8010ebc:	f7fc fc7a 	bl	800d7b4 <ucdr_serialize_uint32_t>
 8010ec0:	68fb      	ldr	r3, [r7, #12]
 8010ec2:	b303      	cbz	r3, 8010f06 <uxr_serialize_AGENT_Representation+0x8e>
 8010ec4:	b1d0      	cbz	r0, 8010efc <uxr_serialize_AGENT_Representation+0x84>
 8010ec6:	463e      	mov	r6, r7
 8010ec8:	f04f 0900 	mov.w	r9, #0
 8010ecc:	e001      	b.n	8010ed2 <uxr_serialize_AGENT_Representation+0x5a>
 8010ece:	3608      	adds	r6, #8
 8010ed0:	b1a4      	cbz	r4, 8010efc <uxr_serialize_AGENT_Representation+0x84>
 8010ed2:	6931      	ldr	r1, [r6, #16]
 8010ed4:	4628      	mov	r0, r5
 8010ed6:	f005 fcdf 	bl	8016898 <ucdr_serialize_string>
 8010eda:	6971      	ldr	r1, [r6, #20]
 8010edc:	4604      	mov	r4, r0
 8010ede:	4628      	mov	r0, r5
 8010ee0:	f005 fcda 	bl	8016898 <ucdr_serialize_string>
 8010ee4:	68fb      	ldr	r3, [r7, #12]
 8010ee6:	f109 0901 	add.w	r9, r9, #1
 8010eea:	4004      	ands	r4, r0
 8010eec:	4599      	cmp	r9, r3
 8010eee:	b2e4      	uxtb	r4, r4
 8010ef0:	d3ed      	bcc.n	8010ece <uxr_serialize_AGENT_Representation+0x56>
 8010ef2:	ea08 0804 	and.w	r8, r8, r4
 8010ef6:	4640      	mov	r0, r8
 8010ef8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010efc:	f04f 0800 	mov.w	r8, #0
 8010f00:	4640      	mov	r0, r8
 8010f02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010f06:	ea08 0800 	and.w	r8, r8, r0
 8010f0a:	e7d2      	b.n	8010eb2 <uxr_serialize_AGENT_Representation+0x3a>

08010f0c <uxr_serialize_DATAWRITER_Representation>:
 8010f0c:	b570      	push	{r4, r5, r6, lr}
 8010f0e:	460d      	mov	r5, r1
 8010f10:	7809      	ldrb	r1, [r1, #0]
 8010f12:	4606      	mov	r6, r0
 8010f14:	f7fc fa38 	bl	800d388 <ucdr_serialize_uint8_t>
 8010f18:	4604      	mov	r4, r0
 8010f1a:	b130      	cbz	r0, 8010f2a <uxr_serialize_DATAWRITER_Representation+0x1e>
 8010f1c:	782b      	ldrb	r3, [r5, #0]
 8010f1e:	2b02      	cmp	r3, #2
 8010f20:	d00c      	beq.n	8010f3c <uxr_serialize_DATAWRITER_Representation+0x30>
 8010f22:	2b03      	cmp	r3, #3
 8010f24:	d010      	beq.n	8010f48 <uxr_serialize_DATAWRITER_Representation+0x3c>
 8010f26:	2b01      	cmp	r3, #1
 8010f28:	d008      	beq.n	8010f3c <uxr_serialize_DATAWRITER_Representation+0x30>
 8010f2a:	2202      	movs	r2, #2
 8010f2c:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 8010f30:	4630      	mov	r0, r6
 8010f32:	f7fb fe87 	bl	800cc44 <ucdr_serialize_array_uint8_t>
 8010f36:	4020      	ands	r0, r4
 8010f38:	b2c0      	uxtb	r0, r0
 8010f3a:	bd70      	pop	{r4, r5, r6, pc}
 8010f3c:	6869      	ldr	r1, [r5, #4]
 8010f3e:	4630      	mov	r0, r6
 8010f40:	f005 fcaa 	bl	8016898 <ucdr_serialize_string>
 8010f44:	4604      	mov	r4, r0
 8010f46:	e7f0      	b.n	8010f2a <uxr_serialize_DATAWRITER_Representation+0x1e>
 8010f48:	4629      	mov	r1, r5
 8010f4a:	4630      	mov	r0, r6
 8010f4c:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8010f50:	3104      	adds	r1, #4
 8010f52:	f7fd fff5 	bl	800ef40 <ucdr_serialize_sequence_uint8_t>
 8010f56:	4604      	mov	r4, r0
 8010f58:	e7e7      	b.n	8010f2a <uxr_serialize_DATAWRITER_Representation+0x1e>
 8010f5a:	bf00      	nop

08010f5c <uxr_serialize_ObjectVariant.part.0>:
 8010f5c:	b570      	push	{r4, r5, r6, lr}
 8010f5e:	780b      	ldrb	r3, [r1, #0]
 8010f60:	3b01      	subs	r3, #1
 8010f62:	460c      	mov	r4, r1
 8010f64:	4605      	mov	r5, r0
 8010f66:	2b0d      	cmp	r3, #13
 8010f68:	d854      	bhi.n	8011014 <uxr_serialize_ObjectVariant.part.0+0xb8>
 8010f6a:	e8df f003 	tbb	[pc, r3]
 8010f6e:	0730      	.short	0x0730
 8010f70:	07071b1b 	.word	0x07071b1b
 8010f74:	0c530707 	.word	0x0c530707
 8010f78:	494e0c0c 	.word	0x494e0c0c
 8010f7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010f80:	3104      	adds	r1, #4
 8010f82:	f7ff bfc3 	b.w	8010f0c <uxr_serialize_DATAWRITER_Representation>
 8010f86:	7909      	ldrb	r1, [r1, #4]
 8010f88:	f7fc f9fe 	bl	800d388 <ucdr_serialize_uint8_t>
 8010f8c:	b1e8      	cbz	r0, 8010fca <uxr_serialize_ObjectVariant.part.0+0x6e>
 8010f8e:	7923      	ldrb	r3, [r4, #4]
 8010f90:	2b01      	cmp	r3, #1
 8010f92:	d001      	beq.n	8010f98 <uxr_serialize_ObjectVariant.part.0+0x3c>
 8010f94:	2b02      	cmp	r3, #2
 8010f96:	d13d      	bne.n	8011014 <uxr_serialize_ObjectVariant.part.0+0xb8>
 8010f98:	68a1      	ldr	r1, [r4, #8]
 8010f9a:	4628      	mov	r0, r5
 8010f9c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010fa0:	f005 bc7a 	b.w	8016898 <ucdr_serialize_string>
 8010fa4:	7909      	ldrb	r1, [r1, #4]
 8010fa6:	f7fc f9ef 	bl	800d388 <ucdr_serialize_uint8_t>
 8010faa:	4606      	mov	r6, r0
 8010fac:	b120      	cbz	r0, 8010fb8 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8010fae:	7923      	ldrb	r3, [r4, #4]
 8010fb0:	2b02      	cmp	r3, #2
 8010fb2:	d039      	beq.n	8011028 <uxr_serialize_ObjectVariant.part.0+0xcc>
 8010fb4:	2b03      	cmp	r3, #3
 8010fb6:	d02f      	beq.n	8011018 <uxr_serialize_ObjectVariant.part.0+0xbc>
 8010fb8:	2202      	movs	r2, #2
 8010fba:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 8010fbe:	4628      	mov	r0, r5
 8010fc0:	f7fb fe40 	bl	800cc44 <ucdr_serialize_array_uint8_t>
 8010fc4:	4030      	ands	r0, r6
 8010fc6:	b2c0      	uxtb	r0, r0
 8010fc8:	bd70      	pop	{r4, r5, r6, pc}
 8010fca:	2000      	movs	r0, #0
 8010fcc:	bd70      	pop	{r4, r5, r6, pc}
 8010fce:	7909      	ldrb	r1, [r1, #4]
 8010fd0:	f7fc f9da 	bl	800d388 <ucdr_serialize_uint8_t>
 8010fd4:	4606      	mov	r6, r0
 8010fd6:	b158      	cbz	r0, 8010ff0 <uxr_serialize_ObjectVariant.part.0+0x94>
 8010fd8:	7923      	ldrb	r3, [r4, #4]
 8010fda:	2b02      	cmp	r3, #2
 8010fdc:	d003      	beq.n	8010fe6 <uxr_serialize_ObjectVariant.part.0+0x8a>
 8010fde:	2b03      	cmp	r3, #3
 8010fe0:	d028      	beq.n	8011034 <uxr_serialize_ObjectVariant.part.0+0xd8>
 8010fe2:	2b01      	cmp	r3, #1
 8010fe4:	d104      	bne.n	8010ff0 <uxr_serialize_ObjectVariant.part.0+0x94>
 8010fe6:	68a1      	ldr	r1, [r4, #8]
 8010fe8:	4628      	mov	r0, r5
 8010fea:	f005 fc55 	bl	8016898 <ucdr_serialize_string>
 8010fee:	4606      	mov	r6, r0
 8010ff0:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 8010ff4:	4628      	mov	r0, r5
 8010ff6:	f7fc ff03 	bl	800de00 <ucdr_serialize_int16_t>
 8010ffa:	4030      	ands	r0, r6
 8010ffc:	b2c0      	uxtb	r0, r0
 8010ffe:	bd70      	pop	{r4, r5, r6, pc}
 8011000:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011004:	3104      	adds	r1, #4
 8011006:	f7ff be7b 	b.w	8010d00 <uxr_serialize_CLIENT_Representation>
 801100a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801100e:	3104      	adds	r1, #4
 8011010:	f7ff bf32 	b.w	8010e78 <uxr_serialize_AGENT_Representation>
 8011014:	2001      	movs	r0, #1
 8011016:	bd70      	pop	{r4, r5, r6, pc}
 8011018:	68a2      	ldr	r2, [r4, #8]
 801101a:	f104 010c 	add.w	r1, r4, #12
 801101e:	4628      	mov	r0, r5
 8011020:	f7fd ff8e 	bl	800ef40 <ucdr_serialize_sequence_uint8_t>
 8011024:	4606      	mov	r6, r0
 8011026:	e7c7      	b.n	8010fb8 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8011028:	68a1      	ldr	r1, [r4, #8]
 801102a:	4628      	mov	r0, r5
 801102c:	f005 fc34 	bl	8016898 <ucdr_serialize_string>
 8011030:	4606      	mov	r6, r0
 8011032:	e7c1      	b.n	8010fb8 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8011034:	68a2      	ldr	r2, [r4, #8]
 8011036:	f104 010c 	add.w	r1, r4, #12
 801103a:	4628      	mov	r0, r5
 801103c:	f7fd ff80 	bl	800ef40 <ucdr_serialize_sequence_uint8_t>
 8011040:	4606      	mov	r6, r0
 8011042:	e7d5      	b.n	8010ff0 <uxr_serialize_ObjectVariant.part.0+0x94>

08011044 <uxr_deserialize_DATAWRITER_Representation>:
 8011044:	b570      	push	{r4, r5, r6, lr}
 8011046:	4606      	mov	r6, r0
 8011048:	460d      	mov	r5, r1
 801104a:	f7fc f9b3 	bl	800d3b4 <ucdr_deserialize_uint8_t>
 801104e:	4604      	mov	r4, r0
 8011050:	b130      	cbz	r0, 8011060 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8011052:	782b      	ldrb	r3, [r5, #0]
 8011054:	2b02      	cmp	r3, #2
 8011056:	d00c      	beq.n	8011072 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8011058:	2b03      	cmp	r3, #3
 801105a:	d012      	beq.n	8011082 <uxr_deserialize_DATAWRITER_Representation+0x3e>
 801105c:	2b01      	cmp	r3, #1
 801105e:	d008      	beq.n	8011072 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8011060:	2202      	movs	r2, #2
 8011062:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 8011066:	4630      	mov	r0, r6
 8011068:	f7fb fe50 	bl	800cd0c <ucdr_deserialize_array_uint8_t>
 801106c:	4020      	ands	r0, r4
 801106e:	b2c0      	uxtb	r0, r0
 8011070:	bd70      	pop	{r4, r5, r6, pc}
 8011072:	6869      	ldr	r1, [r5, #4]
 8011074:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011078:	4630      	mov	r0, r6
 801107a:	f005 fc1d 	bl	80168b8 <ucdr_deserialize_string>
 801107e:	4604      	mov	r4, r0
 8011080:	e7ee      	b.n	8011060 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8011082:	1d2b      	adds	r3, r5, #4
 8011084:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011088:	f105 0108 	add.w	r1, r5, #8
 801108c:	4630      	mov	r0, r6
 801108e:	f7fd ff69 	bl	800ef64 <ucdr_deserialize_sequence_uint8_t>
 8011092:	4604      	mov	r4, r0
 8011094:	e7e4      	b.n	8011060 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8011096:	bf00      	nop

08011098 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 8011098:	b570      	push	{r4, r5, r6, lr}
 801109a:	460d      	mov	r5, r1
 801109c:	7809      	ldrb	r1, [r1, #0]
 801109e:	4606      	mov	r6, r0
 80110a0:	f7fc f944 	bl	800d32c <ucdr_serialize_bool>
 80110a4:	782b      	ldrb	r3, [r5, #0]
 80110a6:	4604      	mov	r4, r0
 80110a8:	b94b      	cbnz	r3, 80110be <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 80110aa:	7a29      	ldrb	r1, [r5, #8]
 80110ac:	4630      	mov	r0, r6
 80110ae:	f7fc f93d 	bl	800d32c <ucdr_serialize_bool>
 80110b2:	7a2b      	ldrb	r3, [r5, #8]
 80110b4:	4004      	ands	r4, r0
 80110b6:	b2e4      	uxtb	r4, r4
 80110b8:	b943      	cbnz	r3, 80110cc <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 80110ba:	4620      	mov	r0, r4
 80110bc:	bd70      	pop	{r4, r5, r6, pc}
 80110be:	6869      	ldr	r1, [r5, #4]
 80110c0:	4630      	mov	r0, r6
 80110c2:	f005 fbe9 	bl	8016898 <ucdr_serialize_string>
 80110c6:	4004      	ands	r4, r0
 80110c8:	b2e4      	uxtb	r4, r4
 80110ca:	e7ee      	b.n	80110aa <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 80110cc:	68e9      	ldr	r1, [r5, #12]
 80110ce:	4630      	mov	r0, r6
 80110d0:	f005 fbe2 	bl	8016898 <ucdr_serialize_string>
 80110d4:	4004      	ands	r4, r0
 80110d6:	4620      	mov	r0, r4
 80110d8:	bd70      	pop	{r4, r5, r6, pc}
 80110da:	bf00      	nop

080110dc <uxr_serialize_OBJK_Topic_Binary>:
 80110dc:	b570      	push	{r4, r5, r6, lr}
 80110de:	460d      	mov	r5, r1
 80110e0:	6809      	ldr	r1, [r1, #0]
 80110e2:	4606      	mov	r6, r0
 80110e4:	f005 fbd8 	bl	8016898 <ucdr_serialize_string>
 80110e8:	7929      	ldrb	r1, [r5, #4]
 80110ea:	4604      	mov	r4, r0
 80110ec:	4630      	mov	r0, r6
 80110ee:	f7fc f91d 	bl	800d32c <ucdr_serialize_bool>
 80110f2:	792b      	ldrb	r3, [r5, #4]
 80110f4:	4004      	ands	r4, r0
 80110f6:	b2e4      	uxtb	r4, r4
 80110f8:	b943      	cbnz	r3, 801110c <uxr_serialize_OBJK_Topic_Binary+0x30>
 80110fa:	7b29      	ldrb	r1, [r5, #12]
 80110fc:	4630      	mov	r0, r6
 80110fe:	f7fc f915 	bl	800d32c <ucdr_serialize_bool>
 8011102:	7b2b      	ldrb	r3, [r5, #12]
 8011104:	4004      	ands	r4, r0
 8011106:	b93b      	cbnz	r3, 8011118 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 8011108:	4620      	mov	r0, r4
 801110a:	bd70      	pop	{r4, r5, r6, pc}
 801110c:	68a9      	ldr	r1, [r5, #8]
 801110e:	4630      	mov	r0, r6
 8011110:	f005 fbc2 	bl	8016898 <ucdr_serialize_string>
 8011114:	4004      	ands	r4, r0
 8011116:	e7f0      	b.n	80110fa <uxr_serialize_OBJK_Topic_Binary+0x1e>
 8011118:	6929      	ldr	r1, [r5, #16]
 801111a:	4630      	mov	r0, r6
 801111c:	f005 fbbc 	bl	8016898 <ucdr_serialize_string>
 8011120:	4004      	ands	r4, r0
 8011122:	b2e4      	uxtb	r4, r4
 8011124:	4620      	mov	r0, r4
 8011126:	bd70      	pop	{r4, r5, r6, pc}

08011128 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 8011128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801112c:	460c      	mov	r4, r1
 801112e:	7809      	ldrb	r1, [r1, #0]
 8011130:	4606      	mov	r6, r0
 8011132:	f7fc f8fb 	bl	800d32c <ucdr_serialize_bool>
 8011136:	7823      	ldrb	r3, [r4, #0]
 8011138:	4605      	mov	r5, r0
 801113a:	b96b      	cbnz	r3, 8011158 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 801113c:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 8011140:	4630      	mov	r0, r6
 8011142:	f7fc f8f3 	bl	800d32c <ucdr_serialize_bool>
 8011146:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 801114a:	4005      	ands	r5, r0
 801114c:	b2ed      	uxtb	r5, r5
 801114e:	2b00      	cmp	r3, #0
 8011150:	d169      	bne.n	8011226 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 8011152:	4628      	mov	r0, r5
 8011154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011158:	6861      	ldr	r1, [r4, #4]
 801115a:	4630      	mov	r0, r6
 801115c:	f7fc fb2a 	bl	800d7b4 <ucdr_serialize_uint32_t>
 8011160:	6863      	ldr	r3, [r4, #4]
 8011162:	2b00      	cmp	r3, #0
 8011164:	d06b      	beq.n	801123e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 8011166:	2800      	cmp	r0, #0
 8011168:	d067      	beq.n	801123a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801116a:	68a1      	ldr	r1, [r4, #8]
 801116c:	4630      	mov	r0, r6
 801116e:	f005 fb93 	bl	8016898 <ucdr_serialize_string>
 8011172:	6863      	ldr	r3, [r4, #4]
 8011174:	2b01      	cmp	r3, #1
 8011176:	d953      	bls.n	8011220 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8011178:	2800      	cmp	r0, #0
 801117a:	d05e      	beq.n	801123a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801117c:	68e1      	ldr	r1, [r4, #12]
 801117e:	4630      	mov	r0, r6
 8011180:	f005 fb8a 	bl	8016898 <ucdr_serialize_string>
 8011184:	6863      	ldr	r3, [r4, #4]
 8011186:	2b02      	cmp	r3, #2
 8011188:	d94a      	bls.n	8011220 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801118a:	2800      	cmp	r0, #0
 801118c:	d055      	beq.n	801123a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801118e:	6921      	ldr	r1, [r4, #16]
 8011190:	4630      	mov	r0, r6
 8011192:	f005 fb81 	bl	8016898 <ucdr_serialize_string>
 8011196:	6863      	ldr	r3, [r4, #4]
 8011198:	2b03      	cmp	r3, #3
 801119a:	d941      	bls.n	8011220 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801119c:	2800      	cmp	r0, #0
 801119e:	d04c      	beq.n	801123a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80111a0:	6961      	ldr	r1, [r4, #20]
 80111a2:	4630      	mov	r0, r6
 80111a4:	f005 fb78 	bl	8016898 <ucdr_serialize_string>
 80111a8:	6863      	ldr	r3, [r4, #4]
 80111aa:	2b04      	cmp	r3, #4
 80111ac:	d938      	bls.n	8011220 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80111ae:	2800      	cmp	r0, #0
 80111b0:	d043      	beq.n	801123a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80111b2:	69a1      	ldr	r1, [r4, #24]
 80111b4:	4630      	mov	r0, r6
 80111b6:	f005 fb6f 	bl	8016898 <ucdr_serialize_string>
 80111ba:	6863      	ldr	r3, [r4, #4]
 80111bc:	2b05      	cmp	r3, #5
 80111be:	d92f      	bls.n	8011220 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80111c0:	2800      	cmp	r0, #0
 80111c2:	d03a      	beq.n	801123a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80111c4:	69e1      	ldr	r1, [r4, #28]
 80111c6:	4630      	mov	r0, r6
 80111c8:	f005 fb66 	bl	8016898 <ucdr_serialize_string>
 80111cc:	6863      	ldr	r3, [r4, #4]
 80111ce:	2b06      	cmp	r3, #6
 80111d0:	d926      	bls.n	8011220 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80111d2:	b390      	cbz	r0, 801123a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80111d4:	6a21      	ldr	r1, [r4, #32]
 80111d6:	4630      	mov	r0, r6
 80111d8:	f005 fb5e 	bl	8016898 <ucdr_serialize_string>
 80111dc:	6863      	ldr	r3, [r4, #4]
 80111de:	2b07      	cmp	r3, #7
 80111e0:	d91e      	bls.n	8011220 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80111e2:	b350      	cbz	r0, 801123a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80111e4:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80111e6:	4630      	mov	r0, r6
 80111e8:	f005 fb56 	bl	8016898 <ucdr_serialize_string>
 80111ec:	6863      	ldr	r3, [r4, #4]
 80111ee:	2b08      	cmp	r3, #8
 80111f0:	d916      	bls.n	8011220 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80111f2:	b310      	cbz	r0, 801123a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80111f4:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80111f6:	4630      	mov	r0, r6
 80111f8:	f005 fb4e 	bl	8016898 <ucdr_serialize_string>
 80111fc:	6863      	ldr	r3, [r4, #4]
 80111fe:	2b09      	cmp	r3, #9
 8011200:	d90e      	bls.n	8011220 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8011202:	b1d0      	cbz	r0, 801123a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011204:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 8011208:	2709      	movs	r7, #9
 801120a:	e000      	b.n	801120e <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 801120c:	b1a8      	cbz	r0, 801123a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801120e:	f858 1b04 	ldr.w	r1, [r8], #4
 8011212:	4630      	mov	r0, r6
 8011214:	f005 fb40 	bl	8016898 <ucdr_serialize_string>
 8011218:	6862      	ldr	r2, [r4, #4]
 801121a:	3701      	adds	r7, #1
 801121c:	4297      	cmp	r7, r2
 801121e:	d3f5      	bcc.n	801120c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 8011220:	4005      	ands	r5, r0
 8011222:	b2ed      	uxtb	r5, r5
 8011224:	e78a      	b.n	801113c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8011226:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8011228:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 801122c:	4630      	mov	r0, r6
 801122e:	f7fd fe87 	bl	800ef40 <ucdr_serialize_sequence_uint8_t>
 8011232:	4005      	ands	r5, r0
 8011234:	4628      	mov	r0, r5
 8011236:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801123a:	2500      	movs	r5, #0
 801123c:	e77e      	b.n	801113c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 801123e:	4028      	ands	r0, r5
 8011240:	b2c5      	uxtb	r5, r0
 8011242:	e77b      	b.n	801113c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

08011244 <uxr_serialize_OBJK_Publisher_Binary>:
 8011244:	b570      	push	{r4, r5, r6, lr}
 8011246:	460d      	mov	r5, r1
 8011248:	7809      	ldrb	r1, [r1, #0]
 801124a:	4606      	mov	r6, r0
 801124c:	f7fc f86e 	bl	800d32c <ucdr_serialize_bool>
 8011250:	782b      	ldrb	r3, [r5, #0]
 8011252:	4604      	mov	r4, r0
 8011254:	b94b      	cbnz	r3, 801126a <uxr_serialize_OBJK_Publisher_Binary+0x26>
 8011256:	7a29      	ldrb	r1, [r5, #8]
 8011258:	4630      	mov	r0, r6
 801125a:	f7fc f867 	bl	800d32c <ucdr_serialize_bool>
 801125e:	7a2b      	ldrb	r3, [r5, #8]
 8011260:	4004      	ands	r4, r0
 8011262:	b2e4      	uxtb	r4, r4
 8011264:	b943      	cbnz	r3, 8011278 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 8011266:	4620      	mov	r0, r4
 8011268:	bd70      	pop	{r4, r5, r6, pc}
 801126a:	6869      	ldr	r1, [r5, #4]
 801126c:	4630      	mov	r0, r6
 801126e:	f005 fb13 	bl	8016898 <ucdr_serialize_string>
 8011272:	4004      	ands	r4, r0
 8011274:	b2e4      	uxtb	r4, r4
 8011276:	e7ee      	b.n	8011256 <uxr_serialize_OBJK_Publisher_Binary+0x12>
 8011278:	f105 010c 	add.w	r1, r5, #12
 801127c:	4630      	mov	r0, r6
 801127e:	f7ff ff53 	bl	8011128 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 8011282:	4004      	ands	r4, r0
 8011284:	4620      	mov	r0, r4
 8011286:	bd70      	pop	{r4, r5, r6, pc}

08011288 <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 8011288:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801128c:	460c      	mov	r4, r1
 801128e:	7809      	ldrb	r1, [r1, #0]
 8011290:	4606      	mov	r6, r0
 8011292:	f7fc f84b 	bl	800d32c <ucdr_serialize_bool>
 8011296:	7823      	ldrb	r3, [r4, #0]
 8011298:	4605      	mov	r5, r0
 801129a:	b96b      	cbnz	r3, 80112b8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 801129c:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 80112a0:	4630      	mov	r0, r6
 80112a2:	f7fc f843 	bl	800d32c <ucdr_serialize_bool>
 80112a6:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80112aa:	4005      	ands	r5, r0
 80112ac:	b2ed      	uxtb	r5, r5
 80112ae:	2b00      	cmp	r3, #0
 80112b0:	d169      	bne.n	8011386 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 80112b2:	4628      	mov	r0, r5
 80112b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80112b8:	6861      	ldr	r1, [r4, #4]
 80112ba:	4630      	mov	r0, r6
 80112bc:	f7fc fa7a 	bl	800d7b4 <ucdr_serialize_uint32_t>
 80112c0:	6863      	ldr	r3, [r4, #4]
 80112c2:	2b00      	cmp	r3, #0
 80112c4:	d06b      	beq.n	801139e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 80112c6:	2800      	cmp	r0, #0
 80112c8:	d067      	beq.n	801139a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80112ca:	68a1      	ldr	r1, [r4, #8]
 80112cc:	4630      	mov	r0, r6
 80112ce:	f005 fae3 	bl	8016898 <ucdr_serialize_string>
 80112d2:	6863      	ldr	r3, [r4, #4]
 80112d4:	2b01      	cmp	r3, #1
 80112d6:	d953      	bls.n	8011380 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80112d8:	2800      	cmp	r0, #0
 80112da:	d05e      	beq.n	801139a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80112dc:	68e1      	ldr	r1, [r4, #12]
 80112de:	4630      	mov	r0, r6
 80112e0:	f005 fada 	bl	8016898 <ucdr_serialize_string>
 80112e4:	6863      	ldr	r3, [r4, #4]
 80112e6:	2b02      	cmp	r3, #2
 80112e8:	d94a      	bls.n	8011380 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80112ea:	2800      	cmp	r0, #0
 80112ec:	d055      	beq.n	801139a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80112ee:	6921      	ldr	r1, [r4, #16]
 80112f0:	4630      	mov	r0, r6
 80112f2:	f005 fad1 	bl	8016898 <ucdr_serialize_string>
 80112f6:	6863      	ldr	r3, [r4, #4]
 80112f8:	2b03      	cmp	r3, #3
 80112fa:	d941      	bls.n	8011380 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80112fc:	2800      	cmp	r0, #0
 80112fe:	d04c      	beq.n	801139a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8011300:	6961      	ldr	r1, [r4, #20]
 8011302:	4630      	mov	r0, r6
 8011304:	f005 fac8 	bl	8016898 <ucdr_serialize_string>
 8011308:	6863      	ldr	r3, [r4, #4]
 801130a:	2b04      	cmp	r3, #4
 801130c:	d938      	bls.n	8011380 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801130e:	2800      	cmp	r0, #0
 8011310:	d043      	beq.n	801139a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8011312:	69a1      	ldr	r1, [r4, #24]
 8011314:	4630      	mov	r0, r6
 8011316:	f005 fabf 	bl	8016898 <ucdr_serialize_string>
 801131a:	6863      	ldr	r3, [r4, #4]
 801131c:	2b05      	cmp	r3, #5
 801131e:	d92f      	bls.n	8011380 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8011320:	2800      	cmp	r0, #0
 8011322:	d03a      	beq.n	801139a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8011324:	69e1      	ldr	r1, [r4, #28]
 8011326:	4630      	mov	r0, r6
 8011328:	f005 fab6 	bl	8016898 <ucdr_serialize_string>
 801132c:	6863      	ldr	r3, [r4, #4]
 801132e:	2b06      	cmp	r3, #6
 8011330:	d926      	bls.n	8011380 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8011332:	b390      	cbz	r0, 801139a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8011334:	6a21      	ldr	r1, [r4, #32]
 8011336:	4630      	mov	r0, r6
 8011338:	f005 faae 	bl	8016898 <ucdr_serialize_string>
 801133c:	6863      	ldr	r3, [r4, #4]
 801133e:	2b07      	cmp	r3, #7
 8011340:	d91e      	bls.n	8011380 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8011342:	b350      	cbz	r0, 801139a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8011344:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8011346:	4630      	mov	r0, r6
 8011348:	f005 faa6 	bl	8016898 <ucdr_serialize_string>
 801134c:	6863      	ldr	r3, [r4, #4]
 801134e:	2b08      	cmp	r3, #8
 8011350:	d916      	bls.n	8011380 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8011352:	b310      	cbz	r0, 801139a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8011354:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8011356:	4630      	mov	r0, r6
 8011358:	f005 fa9e 	bl	8016898 <ucdr_serialize_string>
 801135c:	6863      	ldr	r3, [r4, #4]
 801135e:	2b09      	cmp	r3, #9
 8011360:	d90e      	bls.n	8011380 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8011362:	b1d0      	cbz	r0, 801139a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8011364:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 8011368:	2709      	movs	r7, #9
 801136a:	e000      	b.n	801136e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 801136c:	b1a8      	cbz	r0, 801139a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801136e:	f858 1b04 	ldr.w	r1, [r8], #4
 8011372:	4630      	mov	r0, r6
 8011374:	f005 fa90 	bl	8016898 <ucdr_serialize_string>
 8011378:	6862      	ldr	r2, [r4, #4]
 801137a:	3701      	adds	r7, #1
 801137c:	4297      	cmp	r7, r2
 801137e:	d3f5      	bcc.n	801136c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 8011380:	4005      	ands	r5, r0
 8011382:	b2ed      	uxtb	r5, r5
 8011384:	e78a      	b.n	801129c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8011386:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8011388:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 801138c:	4630      	mov	r0, r6
 801138e:	f7fd fdd7 	bl	800ef40 <ucdr_serialize_sequence_uint8_t>
 8011392:	4005      	ands	r5, r0
 8011394:	4628      	mov	r0, r5
 8011396:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801139a:	2500      	movs	r5, #0
 801139c:	e77e      	b.n	801129c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 801139e:	4028      	ands	r0, r5
 80113a0:	b2c5      	uxtb	r5, r0
 80113a2:	e77b      	b.n	801129c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

080113a4 <uxr_serialize_OBJK_Subscriber_Binary>:
 80113a4:	b570      	push	{r4, r5, r6, lr}
 80113a6:	460d      	mov	r5, r1
 80113a8:	7809      	ldrb	r1, [r1, #0]
 80113aa:	4606      	mov	r6, r0
 80113ac:	f7fb ffbe 	bl	800d32c <ucdr_serialize_bool>
 80113b0:	782b      	ldrb	r3, [r5, #0]
 80113b2:	4604      	mov	r4, r0
 80113b4:	b94b      	cbnz	r3, 80113ca <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 80113b6:	7a29      	ldrb	r1, [r5, #8]
 80113b8:	4630      	mov	r0, r6
 80113ba:	f7fb ffb7 	bl	800d32c <ucdr_serialize_bool>
 80113be:	7a2b      	ldrb	r3, [r5, #8]
 80113c0:	4004      	ands	r4, r0
 80113c2:	b2e4      	uxtb	r4, r4
 80113c4:	b943      	cbnz	r3, 80113d8 <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 80113c6:	4620      	mov	r0, r4
 80113c8:	bd70      	pop	{r4, r5, r6, pc}
 80113ca:	6869      	ldr	r1, [r5, #4]
 80113cc:	4630      	mov	r0, r6
 80113ce:	f005 fa63 	bl	8016898 <ucdr_serialize_string>
 80113d2:	4004      	ands	r4, r0
 80113d4:	b2e4      	uxtb	r4, r4
 80113d6:	e7ee      	b.n	80113b6 <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 80113d8:	f105 010c 	add.w	r1, r5, #12
 80113dc:	4630      	mov	r0, r6
 80113de:	f7ff ff53 	bl	8011288 <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 80113e2:	4004      	ands	r4, r0
 80113e4:	4620      	mov	r0, r4
 80113e6:	bd70      	pop	{r4, r5, r6, pc}

080113e8 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 80113e8:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 80113ec:	4688      	mov	r8, r1
 80113ee:	8809      	ldrh	r1, [r1, #0]
 80113f0:	4681      	mov	r9, r0
 80113f2:	f7fb fff5 	bl	800d3e0 <ucdr_serialize_uint16_t>
 80113f6:	f898 1002 	ldrb.w	r1, [r8, #2]
 80113fa:	4606      	mov	r6, r0
 80113fc:	4648      	mov	r0, r9
 80113fe:	f7fb ff95 	bl	800d32c <ucdr_serialize_bool>
 8011402:	f898 3002 	ldrb.w	r3, [r8, #2]
 8011406:	4006      	ands	r6, r0
 8011408:	b2f5      	uxtb	r5, r6
 801140a:	b9eb      	cbnz	r3, 8011448 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 801140c:	f898 1006 	ldrb.w	r1, [r8, #6]
 8011410:	4648      	mov	r0, r9
 8011412:	f7fb ff8b 	bl	800d32c <ucdr_serialize_bool>
 8011416:	f898 3006 	ldrb.w	r3, [r8, #6]
 801141a:	4005      	ands	r5, r0
 801141c:	bb7b      	cbnz	r3, 801147e <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 801141e:	f898 100c 	ldrb.w	r1, [r8, #12]
 8011422:	4648      	mov	r0, r9
 8011424:	f7fb ff82 	bl	800d32c <ucdr_serialize_bool>
 8011428:	f898 300c 	ldrb.w	r3, [r8, #12]
 801142c:	4005      	ands	r5, r0
 801142e:	b9f3      	cbnz	r3, 801146e <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 8011430:	f898 1014 	ldrb.w	r1, [r8, #20]
 8011434:	4648      	mov	r0, r9
 8011436:	f7fb ff79 	bl	800d32c <ucdr_serialize_bool>
 801143a:	f898 3014 	ldrb.w	r3, [r8, #20]
 801143e:	4005      	ands	r5, r0
 8011440:	b94b      	cbnz	r3, 8011456 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 8011442:	4628      	mov	r0, r5
 8011444:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8011448:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 801144c:	4648      	mov	r0, r9
 801144e:	f7fb ffc7 	bl	800d3e0 <ucdr_serialize_uint16_t>
 8011452:	4005      	ands	r5, r0
 8011454:	e7da      	b.n	801140c <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 8011456:	f8d8 2018 	ldr.w	r2, [r8, #24]
 801145a:	f108 011c 	add.w	r1, r8, #28
 801145e:	4648      	mov	r0, r9
 8011460:	f7fd fd6e 	bl	800ef40 <ucdr_serialize_sequence_uint8_t>
 8011464:	4028      	ands	r0, r5
 8011466:	b2c5      	uxtb	r5, r0
 8011468:	4628      	mov	r0, r5
 801146a:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 801146e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8011472:	4648      	mov	r0, r9
 8011474:	f7fc f99e 	bl	800d7b4 <ucdr_serialize_uint32_t>
 8011478:	4028      	ands	r0, r5
 801147a:	b2c5      	uxtb	r5, r0
 801147c:	e7d8      	b.n	8011430 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 801147e:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8011482:	4648      	mov	r0, r9
 8011484:	f7fc f996 	bl	800d7b4 <ucdr_serialize_uint32_t>
 8011488:	4028      	ands	r0, r5
 801148a:	b2c5      	uxtb	r5, r0
 801148c:	e7c7      	b.n	801141e <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 801148e:	bf00      	nop

08011490 <uxr_serialize_OBJK_DataReader_Binary>:
 8011490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011492:	2202      	movs	r2, #2
 8011494:	460c      	mov	r4, r1
 8011496:	4606      	mov	r6, r0
 8011498:	f7fb fbd4 	bl	800cc44 <ucdr_serialize_array_uint8_t>
 801149c:	78a1      	ldrb	r1, [r4, #2]
 801149e:	4605      	mov	r5, r0
 80114a0:	4630      	mov	r0, r6
 80114a2:	f7fb ff43 	bl	800d32c <ucdr_serialize_bool>
 80114a6:	78a3      	ldrb	r3, [r4, #2]
 80114a8:	4005      	ands	r5, r0
 80114aa:	b2ed      	uxtb	r5, r5
 80114ac:	b90b      	cbnz	r3, 80114b2 <uxr_serialize_OBJK_DataReader_Binary+0x22>
 80114ae:	4628      	mov	r0, r5
 80114b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80114b2:	f104 0108 	add.w	r1, r4, #8
 80114b6:	4630      	mov	r0, r6
 80114b8:	f7ff ff96 	bl	80113e8 <uxr_serialize_OBJK_Endpoint_QosBinary>
 80114bc:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80114c0:	4607      	mov	r7, r0
 80114c2:	4630      	mov	r0, r6
 80114c4:	f7fb ff32 	bl	800d32c <ucdr_serialize_bool>
 80114c8:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80114cc:	4038      	ands	r0, r7
 80114ce:	b2c7      	uxtb	r7, r0
 80114d0:	b95b      	cbnz	r3, 80114ea <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 80114d2:	f894 1038 	ldrb.w	r1, [r4, #56]	@ 0x38
 80114d6:	4630      	mov	r0, r6
 80114d8:	f7fb ff28 	bl	800d32c <ucdr_serialize_bool>
 80114dc:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 80114e0:	4007      	ands	r7, r0
 80114e2:	b94b      	cbnz	r3, 80114f8 <uxr_serialize_OBJK_DataReader_Binary+0x68>
 80114e4:	403d      	ands	r5, r7
 80114e6:	4628      	mov	r0, r5
 80114e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80114ea:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	@ 0x30
 80114ee:	4630      	mov	r0, r6
 80114f0:	f7fc fbb6 	bl	800dc60 <ucdr_serialize_uint64_t>
 80114f4:	4007      	ands	r7, r0
 80114f6:	e7ec      	b.n	80114d2 <uxr_serialize_OBJK_DataReader_Binary+0x42>
 80114f8:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 80114fa:	4630      	mov	r0, r6
 80114fc:	f005 f9cc 	bl	8016898 <ucdr_serialize_string>
 8011500:	4007      	ands	r7, r0
 8011502:	b2ff      	uxtb	r7, r7
 8011504:	e7ee      	b.n	80114e4 <uxr_serialize_OBJK_DataReader_Binary+0x54>
 8011506:	bf00      	nop

08011508 <uxr_serialize_OBJK_DataWriter_Binary>:
 8011508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801150a:	2202      	movs	r2, #2
 801150c:	460d      	mov	r5, r1
 801150e:	4606      	mov	r6, r0
 8011510:	f7fb fb98 	bl	800cc44 <ucdr_serialize_array_uint8_t>
 8011514:	78a9      	ldrb	r1, [r5, #2]
 8011516:	4604      	mov	r4, r0
 8011518:	4630      	mov	r0, r6
 801151a:	f7fb ff07 	bl	800d32c <ucdr_serialize_bool>
 801151e:	78ab      	ldrb	r3, [r5, #2]
 8011520:	4004      	ands	r4, r0
 8011522:	b2e4      	uxtb	r4, r4
 8011524:	b90b      	cbnz	r3, 801152a <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 8011526:	4620      	mov	r0, r4
 8011528:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801152a:	f105 0108 	add.w	r1, r5, #8
 801152e:	4630      	mov	r0, r6
 8011530:	f7ff ff5a 	bl	80113e8 <uxr_serialize_OBJK_Endpoint_QosBinary>
 8011534:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 8011538:	4607      	mov	r7, r0
 801153a:	4630      	mov	r0, r6
 801153c:	f7fb fef6 	bl	800d32c <ucdr_serialize_bool>
 8011540:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 8011544:	4038      	ands	r0, r7
 8011546:	b2c7      	uxtb	r7, r0
 8011548:	b913      	cbnz	r3, 8011550 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 801154a:	403c      	ands	r4, r7
 801154c:	4620      	mov	r0, r4
 801154e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011550:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 8011554:	4630      	mov	r0, r6
 8011556:	f7fc fb83 	bl	800dc60 <ucdr_serialize_uint64_t>
 801155a:	4007      	ands	r7, r0
 801155c:	e7f5      	b.n	801154a <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 801155e:	bf00      	nop

08011560 <uxr_deserialize_ObjectVariant>:
 8011560:	b570      	push	{r4, r5, r6, lr}
 8011562:	4605      	mov	r5, r0
 8011564:	460e      	mov	r6, r1
 8011566:	f7fb ff25 	bl	800d3b4 <ucdr_deserialize_uint8_t>
 801156a:	b168      	cbz	r0, 8011588 <uxr_deserialize_ObjectVariant+0x28>
 801156c:	7833      	ldrb	r3, [r6, #0]
 801156e:	3b01      	subs	r3, #1
 8011570:	4604      	mov	r4, r0
 8011572:	2b0d      	cmp	r3, #13
 8011574:	d809      	bhi.n	801158a <uxr_deserialize_ObjectVariant+0x2a>
 8011576:	e8df f003 	tbb	[pc, r3]
 801157a:	0a41      	.short	0x0a41
 801157c:	0a0a2323 	.word	0x0a0a2323
 8011580:	10080a0a 	.word	0x10080a0a
 8011584:	565c1010 	.word	0x565c1010
 8011588:	2400      	movs	r4, #0
 801158a:	4620      	mov	r0, r4
 801158c:	bd70      	pop	{r4, r5, r6, pc}
 801158e:	1d31      	adds	r1, r6, #4
 8011590:	4628      	mov	r0, r5
 8011592:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011596:	f7ff bd55 	b.w	8011044 <uxr_deserialize_DATAWRITER_Representation>
 801159a:	1d31      	adds	r1, r6, #4
 801159c:	4628      	mov	r0, r5
 801159e:	f7fb ff09 	bl	800d3b4 <ucdr_deserialize_uint8_t>
 80115a2:	2800      	cmp	r0, #0
 80115a4:	d0f0      	beq.n	8011588 <uxr_deserialize_ObjectVariant+0x28>
 80115a6:	7933      	ldrb	r3, [r6, #4]
 80115a8:	2b01      	cmp	r3, #1
 80115aa:	d001      	beq.n	80115b0 <uxr_deserialize_ObjectVariant+0x50>
 80115ac:	2b02      	cmp	r3, #2
 80115ae:	d1ec      	bne.n	801158a <uxr_deserialize_ObjectVariant+0x2a>
 80115b0:	68b1      	ldr	r1, [r6, #8]
 80115b2:	4628      	mov	r0, r5
 80115b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80115b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80115bc:	f005 b97c 	b.w	80168b8 <ucdr_deserialize_string>
 80115c0:	1d31      	adds	r1, r6, #4
 80115c2:	4628      	mov	r0, r5
 80115c4:	f7fb fef6 	bl	800d3b4 <ucdr_deserialize_uint8_t>
 80115c8:	4604      	mov	r4, r0
 80115ca:	b170      	cbz	r0, 80115ea <uxr_deserialize_ObjectVariant+0x8a>
 80115cc:	7933      	ldrb	r3, [r6, #4]
 80115ce:	2b02      	cmp	r3, #2
 80115d0:	d04c      	beq.n	801166c <uxr_deserialize_ObjectVariant+0x10c>
 80115d2:	2b03      	cmp	r3, #3
 80115d4:	d109      	bne.n	80115ea <uxr_deserialize_ObjectVariant+0x8a>
 80115d6:	f106 0308 	add.w	r3, r6, #8
 80115da:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80115de:	f106 010c 	add.w	r1, r6, #12
 80115e2:	4628      	mov	r0, r5
 80115e4:	f7fd fcbe 	bl	800ef64 <ucdr_deserialize_sequence_uint8_t>
 80115e8:	4604      	mov	r4, r0
 80115ea:	2202      	movs	r2, #2
 80115ec:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 80115f0:	4628      	mov	r0, r5
 80115f2:	f7fb fb8b 	bl	800cd0c <ucdr_deserialize_array_uint8_t>
 80115f6:	4020      	ands	r0, r4
 80115f8:	b2c4      	uxtb	r4, r0
 80115fa:	e7c6      	b.n	801158a <uxr_deserialize_ObjectVariant+0x2a>
 80115fc:	1d31      	adds	r1, r6, #4
 80115fe:	4628      	mov	r0, r5
 8011600:	f7fb fed8 	bl	800d3b4 <ucdr_deserialize_uint8_t>
 8011604:	4604      	mov	r4, r0
 8011606:	b130      	cbz	r0, 8011616 <uxr_deserialize_ObjectVariant+0xb6>
 8011608:	7933      	ldrb	r3, [r6, #4]
 801160a:	2b02      	cmp	r3, #2
 801160c:	d036      	beq.n	801167c <uxr_deserialize_ObjectVariant+0x11c>
 801160e:	2b03      	cmp	r3, #3
 8011610:	d03c      	beq.n	801168c <uxr_deserialize_ObjectVariant+0x12c>
 8011612:	2b01      	cmp	r3, #1
 8011614:	d032      	beq.n	801167c <uxr_deserialize_ObjectVariant+0x11c>
 8011616:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 801161a:	4628      	mov	r0, r5
 801161c:	f7fc fc70 	bl	800df00 <ucdr_deserialize_int16_t>
 8011620:	4020      	ands	r0, r4
 8011622:	b2c4      	uxtb	r4, r0
 8011624:	e7b1      	b.n	801158a <uxr_deserialize_ObjectVariant+0x2a>
 8011626:	1d31      	adds	r1, r6, #4
 8011628:	4628      	mov	r0, r5
 801162a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801162e:	f7ff bbbf 	b.w	8010db0 <uxr_deserialize_CLIENT_Representation>
 8011632:	2204      	movs	r2, #4
 8011634:	18b1      	adds	r1, r6, r2
 8011636:	4628      	mov	r0, r5
 8011638:	f7fb fb68 	bl	800cd0c <ucdr_deserialize_array_uint8_t>
 801163c:	2202      	movs	r2, #2
 801163e:	f106 0108 	add.w	r1, r6, #8
 8011642:	4604      	mov	r4, r0
 8011644:	4628      	mov	r0, r5
 8011646:	f7fb fb61 	bl	800cd0c <ucdr_deserialize_array_uint8_t>
 801164a:	2202      	movs	r2, #2
 801164c:	4004      	ands	r4, r0
 801164e:	f106 010a 	add.w	r1, r6, #10
 8011652:	4628      	mov	r0, r5
 8011654:	f7fb fb5a 	bl	800cd0c <ucdr_deserialize_array_uint8_t>
 8011658:	b2e4      	uxtb	r4, r4
 801165a:	4603      	mov	r3, r0
 801165c:	f106 010c 	add.w	r1, r6, #12
 8011660:	4628      	mov	r0, r5
 8011662:	401c      	ands	r4, r3
 8011664:	f7fb fe78 	bl	800d358 <ucdr_deserialize_bool>
 8011668:	4004      	ands	r4, r0
 801166a:	e78e      	b.n	801158a <uxr_deserialize_ObjectVariant+0x2a>
 801166c:	68b1      	ldr	r1, [r6, #8]
 801166e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011672:	4628      	mov	r0, r5
 8011674:	f005 f920 	bl	80168b8 <ucdr_deserialize_string>
 8011678:	4604      	mov	r4, r0
 801167a:	e7b6      	b.n	80115ea <uxr_deserialize_ObjectVariant+0x8a>
 801167c:	68b1      	ldr	r1, [r6, #8]
 801167e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011682:	4628      	mov	r0, r5
 8011684:	f005 f918 	bl	80168b8 <ucdr_deserialize_string>
 8011688:	4604      	mov	r4, r0
 801168a:	e7c4      	b.n	8011616 <uxr_deserialize_ObjectVariant+0xb6>
 801168c:	f106 0308 	add.w	r3, r6, #8
 8011690:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011694:	f106 010c 	add.w	r1, r6, #12
 8011698:	4628      	mov	r0, r5
 801169a:	f7fd fc63 	bl	800ef64 <ucdr_deserialize_sequence_uint8_t>
 801169e:	4604      	mov	r4, r0
 80116a0:	e7b9      	b.n	8011616 <uxr_deserialize_ObjectVariant+0xb6>
 80116a2:	bf00      	nop

080116a4 <uxr_deserialize_BaseObjectRequest>:
 80116a4:	b570      	push	{r4, r5, r6, lr}
 80116a6:	2202      	movs	r2, #2
 80116a8:	4605      	mov	r5, r0
 80116aa:	460e      	mov	r6, r1
 80116ac:	f7fb fb2e 	bl	800cd0c <ucdr_deserialize_array_uint8_t>
 80116b0:	2202      	movs	r2, #2
 80116b2:	4604      	mov	r4, r0
 80116b4:	18b1      	adds	r1, r6, r2
 80116b6:	4628      	mov	r0, r5
 80116b8:	f7fb fb28 	bl	800cd0c <ucdr_deserialize_array_uint8_t>
 80116bc:	4020      	ands	r0, r4
 80116be:	b2c0      	uxtb	r0, r0
 80116c0:	bd70      	pop	{r4, r5, r6, pc}
 80116c2:	bf00      	nop

080116c4 <uxr_serialize_ActivityInfoVariant>:
 80116c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80116c8:	460d      	mov	r5, r1
 80116ca:	7809      	ldrb	r1, [r1, #0]
 80116cc:	4607      	mov	r7, r0
 80116ce:	f7fb fe5b 	bl	800d388 <ucdr_serialize_uint8_t>
 80116d2:	4681      	mov	r9, r0
 80116d4:	b138      	cbz	r0, 80116e6 <uxr_serialize_ActivityInfoVariant+0x22>
 80116d6:	782b      	ldrb	r3, [r5, #0]
 80116d8:	2b06      	cmp	r3, #6
 80116da:	f000 8082 	beq.w	80117e2 <uxr_serialize_ActivityInfoVariant+0x11e>
 80116de:	2b0d      	cmp	r3, #13
 80116e0:	d016      	beq.n	8011710 <uxr_serialize_ActivityInfoVariant+0x4c>
 80116e2:	2b05      	cmp	r3, #5
 80116e4:	d002      	beq.n	80116ec <uxr_serialize_ActivityInfoVariant+0x28>
 80116e6:	4648      	mov	r0, r9
 80116e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80116ec:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 80116f0:	4638      	mov	r0, r7
 80116f2:	f7fc fb85 	bl	800de00 <ucdr_serialize_int16_t>
 80116f6:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 80116fa:	4681      	mov	r9, r0
 80116fc:	4638      	mov	r0, r7
 80116fe:	f7fc faaf 	bl	800dc60 <ucdr_serialize_uint64_t>
 8011702:	ea09 0000 	and.w	r0, r9, r0
 8011706:	fa5f f980 	uxtb.w	r9, r0
 801170a:	4648      	mov	r0, r9
 801170c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011710:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8011714:	4638      	mov	r0, r7
 8011716:	f7fc fb73 	bl	800de00 <ucdr_serialize_int16_t>
 801171a:	68e9      	ldr	r1, [r5, #12]
 801171c:	4681      	mov	r9, r0
 801171e:	4638      	mov	r0, r7
 8011720:	f7fc f848 	bl	800d7b4 <ucdr_serialize_uint32_t>
 8011724:	68eb      	ldr	r3, [r5, #12]
 8011726:	2b00      	cmp	r3, #0
 8011728:	d0eb      	beq.n	8011702 <uxr_serialize_ActivityInfoVariant+0x3e>
 801172a:	b320      	cbz	r0, 8011776 <uxr_serialize_ActivityInfoVariant+0xb2>
 801172c:	f105 080c 	add.w	r8, r5, #12
 8011730:	2600      	movs	r6, #0
 8011732:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 8011736:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 801173a:	f89a 1010 	ldrb.w	r1, [sl, #16]
 801173e:	4638      	mov	r0, r7
 8011740:	f7fb fe22 	bl	800d388 <ucdr_serialize_uint8_t>
 8011744:	2800      	cmp	r0, #0
 8011746:	d053      	beq.n	80117f0 <uxr_serialize_ActivityInfoVariant+0x12c>
 8011748:	f89a 3010 	ldrb.w	r3, [sl, #16]
 801174c:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 8011750:	0074      	lsls	r4, r6, #1
 8011752:	00c9      	lsls	r1, r1, #3
 8011754:	2b03      	cmp	r3, #3
 8011756:	d854      	bhi.n	8011802 <uxr_serialize_ActivityInfoVariant+0x13e>
 8011758:	e8df f003 	tbb	[pc, r3]
 801175c:	02102132 	.word	0x02102132
 8011760:	4441      	add	r1, r8
 8011762:	4638      	mov	r0, r7
 8011764:	6889      	ldr	r1, [r1, #8]
 8011766:	f005 f897 	bl	8016898 <ucdr_serialize_string>
 801176a:	68ea      	ldr	r2, [r5, #12]
 801176c:	3601      	adds	r6, #1
 801176e:	4296      	cmp	r6, r2
 8011770:	d242      	bcs.n	80117f8 <uxr_serialize_ActivityInfoVariant+0x134>
 8011772:	2800      	cmp	r0, #0
 8011774:	d1dd      	bne.n	8011732 <uxr_serialize_ActivityInfoVariant+0x6e>
 8011776:	f04f 0900 	mov.w	r9, #0
 801177a:	e7b4      	b.n	80116e6 <uxr_serialize_ActivityInfoVariant+0x22>
 801177c:	3108      	adds	r1, #8
 801177e:	4441      	add	r1, r8
 8011780:	2210      	movs	r2, #16
 8011782:	4638      	mov	r0, r7
 8011784:	f7fb fa5e 	bl	800cc44 <ucdr_serialize_array_uint8_t>
 8011788:	4434      	add	r4, r6
 801178a:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 801178e:	4604      	mov	r4, r0
 8011790:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8011792:	4638      	mov	r0, r7
 8011794:	f7fc f80e 	bl	800d7b4 <ucdr_serialize_uint32_t>
 8011798:	4020      	ands	r0, r4
 801179a:	b2c0      	uxtb	r0, r0
 801179c:	e7e5      	b.n	801176a <uxr_serialize_ActivityInfoVariant+0xa6>
 801179e:	3108      	adds	r1, #8
 80117a0:	4441      	add	r1, r8
 80117a2:	2204      	movs	r2, #4
 80117a4:	4638      	mov	r0, r7
 80117a6:	f7fb fa4d 	bl	800cc44 <ucdr_serialize_array_uint8_t>
 80117aa:	4434      	add	r4, r6
 80117ac:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 80117b0:	4604      	mov	r4, r0
 80117b2:	8b19      	ldrh	r1, [r3, #24]
 80117b4:	4638      	mov	r0, r7
 80117b6:	f7fb fe13 	bl	800d3e0 <ucdr_serialize_uint16_t>
 80117ba:	4020      	ands	r0, r4
 80117bc:	b2c0      	uxtb	r0, r0
 80117be:	e7d4      	b.n	801176a <uxr_serialize_ActivityInfoVariant+0xa6>
 80117c0:	3108      	adds	r1, #8
 80117c2:	4441      	add	r1, r8
 80117c4:	2202      	movs	r2, #2
 80117c6:	4638      	mov	r0, r7
 80117c8:	f7fb fa3c 	bl	800cc44 <ucdr_serialize_array_uint8_t>
 80117cc:	4434      	add	r4, r6
 80117ce:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 80117d2:	4604      	mov	r4, r0
 80117d4:	7d99      	ldrb	r1, [r3, #22]
 80117d6:	4638      	mov	r0, r7
 80117d8:	f7fb fdd6 	bl	800d388 <ucdr_serialize_uint8_t>
 80117dc:	4020      	ands	r0, r4
 80117de:	b2c0      	uxtb	r0, r0
 80117e0:	e7c3      	b.n	801176a <uxr_serialize_ActivityInfoVariant+0xa6>
 80117e2:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 80117e6:	4638      	mov	r0, r7
 80117e8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80117ec:	f7fc bb08 	b.w	800de00 <ucdr_serialize_int16_t>
 80117f0:	68ea      	ldr	r2, [r5, #12]
 80117f2:	3601      	adds	r6, #1
 80117f4:	42b2      	cmp	r2, r6
 80117f6:	d8be      	bhi.n	8011776 <uxr_serialize_ActivityInfoVariant+0xb2>
 80117f8:	ea09 0900 	and.w	r9, r9, r0
 80117fc:	fa5f f989 	uxtb.w	r9, r9
 8011800:	e771      	b.n	80116e6 <uxr_serialize_ActivityInfoVariant+0x22>
 8011802:	68eb      	ldr	r3, [r5, #12]
 8011804:	3601      	adds	r6, #1
 8011806:	429e      	cmp	r6, r3
 8011808:	f10a 0a18 	add.w	sl, sl, #24
 801180c:	d395      	bcc.n	801173a <uxr_serialize_ActivityInfoVariant+0x76>
 801180e:	e76a      	b.n	80116e6 <uxr_serialize_ActivityInfoVariant+0x22>

08011810 <uxr_deserialize_BaseObjectReply>:
 8011810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011814:	2202      	movs	r2, #2
 8011816:	4606      	mov	r6, r0
 8011818:	460f      	mov	r7, r1
 801181a:	f7fb fa77 	bl	800cd0c <ucdr_deserialize_array_uint8_t>
 801181e:	2202      	movs	r2, #2
 8011820:	18b9      	adds	r1, r7, r2
 8011822:	4605      	mov	r5, r0
 8011824:	4630      	mov	r0, r6
 8011826:	f7fb fa71 	bl	800cd0c <ucdr_deserialize_array_uint8_t>
 801182a:	1d39      	adds	r1, r7, #4
 801182c:	4680      	mov	r8, r0
 801182e:	4630      	mov	r0, r6
 8011830:	f7fb fdc0 	bl	800d3b4 <ucdr_deserialize_uint8_t>
 8011834:	1d79      	adds	r1, r7, #5
 8011836:	4604      	mov	r4, r0
 8011838:	4630      	mov	r0, r6
 801183a:	f7fb fdbb 	bl	800d3b4 <ucdr_deserialize_uint8_t>
 801183e:	ea05 0508 	and.w	r5, r5, r8
 8011842:	402c      	ands	r4, r5
 8011844:	4020      	ands	r0, r4
 8011846:	b2c0      	uxtb	r0, r0
 8011848:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801184c <uxr_serialize_ReadSpecification>:
 801184c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011850:	460e      	mov	r6, r1
 8011852:	7809      	ldrb	r1, [r1, #0]
 8011854:	4607      	mov	r7, r0
 8011856:	f7fb fd97 	bl	800d388 <ucdr_serialize_uint8_t>
 801185a:	7871      	ldrb	r1, [r6, #1]
 801185c:	4604      	mov	r4, r0
 801185e:	4638      	mov	r0, r7
 8011860:	f7fb fd92 	bl	800d388 <ucdr_serialize_uint8_t>
 8011864:	78b1      	ldrb	r1, [r6, #2]
 8011866:	4004      	ands	r4, r0
 8011868:	4638      	mov	r0, r7
 801186a:	f7fb fd5f 	bl	800d32c <ucdr_serialize_bool>
 801186e:	78b3      	ldrb	r3, [r6, #2]
 8011870:	b2e4      	uxtb	r4, r4
 8011872:	4004      	ands	r4, r0
 8011874:	b94b      	cbnz	r3, 801188a <uxr_serialize_ReadSpecification+0x3e>
 8011876:	7a31      	ldrb	r1, [r6, #8]
 8011878:	4638      	mov	r0, r7
 801187a:	f7fb fd57 	bl	800d32c <ucdr_serialize_bool>
 801187e:	7a33      	ldrb	r3, [r6, #8]
 8011880:	4004      	ands	r4, r0
 8011882:	b943      	cbnz	r3, 8011896 <uxr_serialize_ReadSpecification+0x4a>
 8011884:	4620      	mov	r0, r4
 8011886:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801188a:	6871      	ldr	r1, [r6, #4]
 801188c:	4638      	mov	r0, r7
 801188e:	f005 f803 	bl	8016898 <ucdr_serialize_string>
 8011892:	4004      	ands	r4, r0
 8011894:	e7ef      	b.n	8011876 <uxr_serialize_ReadSpecification+0x2a>
 8011896:	8971      	ldrh	r1, [r6, #10]
 8011898:	4638      	mov	r0, r7
 801189a:	f7fb fda1 	bl	800d3e0 <ucdr_serialize_uint16_t>
 801189e:	89b1      	ldrh	r1, [r6, #12]
 80118a0:	4605      	mov	r5, r0
 80118a2:	4638      	mov	r0, r7
 80118a4:	f7fb fd9c 	bl	800d3e0 <ucdr_serialize_uint16_t>
 80118a8:	89f1      	ldrh	r1, [r6, #14]
 80118aa:	4005      	ands	r5, r0
 80118ac:	4638      	mov	r0, r7
 80118ae:	f7fb fd97 	bl	800d3e0 <ucdr_serialize_uint16_t>
 80118b2:	8a31      	ldrh	r1, [r6, #16]
 80118b4:	4680      	mov	r8, r0
 80118b6:	4638      	mov	r0, r7
 80118b8:	f7fb fd92 	bl	800d3e0 <ucdr_serialize_uint16_t>
 80118bc:	b2ed      	uxtb	r5, r5
 80118be:	4025      	ands	r5, r4
 80118c0:	ea08 0505 	and.w	r5, r8, r5
 80118c4:	ea00 0405 	and.w	r4, r0, r5
 80118c8:	4620      	mov	r0, r4
 80118ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80118ce:	bf00      	nop

080118d0 <uxr_serialize_CREATE_CLIENT_Payload>:
 80118d0:	f7ff ba16 	b.w	8010d00 <uxr_serialize_CLIENT_Representation>

080118d4 <uxr_serialize_CREATE_Payload>:
 80118d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80118d6:	2202      	movs	r2, #2
 80118d8:	4607      	mov	r7, r0
 80118da:	460e      	mov	r6, r1
 80118dc:	f7fb f9b2 	bl	800cc44 <ucdr_serialize_array_uint8_t>
 80118e0:	2202      	movs	r2, #2
 80118e2:	18b1      	adds	r1, r6, r2
 80118e4:	4605      	mov	r5, r0
 80118e6:	4638      	mov	r0, r7
 80118e8:	f7fb f9ac 	bl	800cc44 <ucdr_serialize_array_uint8_t>
 80118ec:	7931      	ldrb	r1, [r6, #4]
 80118ee:	4604      	mov	r4, r0
 80118f0:	4638      	mov	r0, r7
 80118f2:	f7fb fd49 	bl	800d388 <ucdr_serialize_uint8_t>
 80118f6:	b170      	cbz	r0, 8011916 <uxr_serialize_CREATE_Payload+0x42>
 80118f8:	7933      	ldrb	r3, [r6, #4]
 80118fa:	402c      	ands	r4, r5
 80118fc:	3b01      	subs	r3, #1
 80118fe:	b2e4      	uxtb	r4, r4
 8011900:	2b0d      	cmp	r3, #13
 8011902:	d809      	bhi.n	8011918 <uxr_serialize_CREATE_Payload+0x44>
 8011904:	e8df f003 	tbb	[pc, r3]
 8011908:	23230a4c 	.word	0x23230a4c
 801190c:	0a0a0a0a 	.word	0x0a0a0a0a
 8011910:	12121208 	.word	0x12121208
 8011914:	3e45      	.short	0x3e45
 8011916:	2400      	movs	r4, #0
 8011918:	4620      	mov	r0, r4
 801191a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801191c:	f106 0108 	add.w	r1, r6, #8
 8011920:	4638      	mov	r0, r7
 8011922:	f7ff faf3 	bl	8010f0c <uxr_serialize_DATAWRITER_Representation>
 8011926:	4004      	ands	r4, r0
 8011928:	4620      	mov	r0, r4
 801192a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801192c:	7a31      	ldrb	r1, [r6, #8]
 801192e:	4638      	mov	r0, r7
 8011930:	f7fb fd2a 	bl	800d388 <ucdr_serialize_uint8_t>
 8011934:	2800      	cmp	r0, #0
 8011936:	d0ee      	beq.n	8011916 <uxr_serialize_CREATE_Payload+0x42>
 8011938:	7a33      	ldrb	r3, [r6, #8]
 801193a:	2b01      	cmp	r3, #1
 801193c:	d001      	beq.n	8011942 <uxr_serialize_CREATE_Payload+0x6e>
 801193e:	2b02      	cmp	r3, #2
 8011940:	d1ea      	bne.n	8011918 <uxr_serialize_CREATE_Payload+0x44>
 8011942:	68f1      	ldr	r1, [r6, #12]
 8011944:	4638      	mov	r0, r7
 8011946:	f004 ffa7 	bl	8016898 <ucdr_serialize_string>
 801194a:	4004      	ands	r4, r0
 801194c:	e7e4      	b.n	8011918 <uxr_serialize_CREATE_Payload+0x44>
 801194e:	7a31      	ldrb	r1, [r6, #8]
 8011950:	4638      	mov	r0, r7
 8011952:	f7fb fd19 	bl	800d388 <ucdr_serialize_uint8_t>
 8011956:	4605      	mov	r5, r0
 8011958:	b158      	cbz	r0, 8011972 <uxr_serialize_CREATE_Payload+0x9e>
 801195a:	7a33      	ldrb	r3, [r6, #8]
 801195c:	2b02      	cmp	r3, #2
 801195e:	d034      	beq.n	80119ca <uxr_serialize_CREATE_Payload+0xf6>
 8011960:	2b03      	cmp	r3, #3
 8011962:	d106      	bne.n	8011972 <uxr_serialize_CREATE_Payload+0x9e>
 8011964:	68f2      	ldr	r2, [r6, #12]
 8011966:	f106 0110 	add.w	r1, r6, #16
 801196a:	4638      	mov	r0, r7
 801196c:	f7fd fae8 	bl	800ef40 <ucdr_serialize_sequence_uint8_t>
 8011970:	4605      	mov	r5, r0
 8011972:	2202      	movs	r2, #2
 8011974:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 8011978:	4638      	mov	r0, r7
 801197a:	f7fb f963 	bl	800cc44 <ucdr_serialize_array_uint8_t>
 801197e:	4028      	ands	r0, r5
 8011980:	4004      	ands	r4, r0
 8011982:	e7c9      	b.n	8011918 <uxr_serialize_CREATE_Payload+0x44>
 8011984:	f106 0108 	add.w	r1, r6, #8
 8011988:	4638      	mov	r0, r7
 801198a:	f7ff f9b9 	bl	8010d00 <uxr_serialize_CLIENT_Representation>
 801198e:	4004      	ands	r4, r0
 8011990:	e7c2      	b.n	8011918 <uxr_serialize_CREATE_Payload+0x44>
 8011992:	f106 0108 	add.w	r1, r6, #8
 8011996:	4638      	mov	r0, r7
 8011998:	f7ff fa6e 	bl	8010e78 <uxr_serialize_AGENT_Representation>
 801199c:	4004      	ands	r4, r0
 801199e:	e7bb      	b.n	8011918 <uxr_serialize_CREATE_Payload+0x44>
 80119a0:	7a31      	ldrb	r1, [r6, #8]
 80119a2:	4638      	mov	r0, r7
 80119a4:	f7fb fcf0 	bl	800d388 <ucdr_serialize_uint8_t>
 80119a8:	4605      	mov	r5, r0
 80119aa:	b130      	cbz	r0, 80119ba <uxr_serialize_CREATE_Payload+0xe6>
 80119ac:	7a33      	ldrb	r3, [r6, #8]
 80119ae:	2b02      	cmp	r3, #2
 80119b0:	d011      	beq.n	80119d6 <uxr_serialize_CREATE_Payload+0x102>
 80119b2:	2b03      	cmp	r3, #3
 80119b4:	d015      	beq.n	80119e2 <uxr_serialize_CREATE_Payload+0x10e>
 80119b6:	2b01      	cmp	r3, #1
 80119b8:	d00d      	beq.n	80119d6 <uxr_serialize_CREATE_Payload+0x102>
 80119ba:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 80119be:	4638      	mov	r0, r7
 80119c0:	f7fc fa1e 	bl	800de00 <ucdr_serialize_int16_t>
 80119c4:	4028      	ands	r0, r5
 80119c6:	4004      	ands	r4, r0
 80119c8:	e7a6      	b.n	8011918 <uxr_serialize_CREATE_Payload+0x44>
 80119ca:	68f1      	ldr	r1, [r6, #12]
 80119cc:	4638      	mov	r0, r7
 80119ce:	f004 ff63 	bl	8016898 <ucdr_serialize_string>
 80119d2:	4605      	mov	r5, r0
 80119d4:	e7cd      	b.n	8011972 <uxr_serialize_CREATE_Payload+0x9e>
 80119d6:	68f1      	ldr	r1, [r6, #12]
 80119d8:	4638      	mov	r0, r7
 80119da:	f004 ff5d 	bl	8016898 <ucdr_serialize_string>
 80119de:	4605      	mov	r5, r0
 80119e0:	e7eb      	b.n	80119ba <uxr_serialize_CREATE_Payload+0xe6>
 80119e2:	68f2      	ldr	r2, [r6, #12]
 80119e4:	f106 0110 	add.w	r1, r6, #16
 80119e8:	4638      	mov	r0, r7
 80119ea:	f7fd faa9 	bl	800ef40 <ucdr_serialize_sequence_uint8_t>
 80119ee:	4605      	mov	r5, r0
 80119f0:	e7e3      	b.n	80119ba <uxr_serialize_CREATE_Payload+0xe6>
 80119f2:	bf00      	nop

080119f4 <uxr_deserialize_GET_INFO_Payload>:
 80119f4:	b570      	push	{r4, r5, r6, lr}
 80119f6:	2202      	movs	r2, #2
 80119f8:	4605      	mov	r5, r0
 80119fa:	460e      	mov	r6, r1
 80119fc:	f7fb f986 	bl	800cd0c <ucdr_deserialize_array_uint8_t>
 8011a00:	2202      	movs	r2, #2
 8011a02:	18b1      	adds	r1, r6, r2
 8011a04:	4604      	mov	r4, r0
 8011a06:	4628      	mov	r0, r5
 8011a08:	f7fb f980 	bl	800cd0c <ucdr_deserialize_array_uint8_t>
 8011a0c:	1d31      	adds	r1, r6, #4
 8011a0e:	4004      	ands	r4, r0
 8011a10:	4628      	mov	r0, r5
 8011a12:	f7fb ffff 	bl	800da14 <ucdr_deserialize_uint32_t>
 8011a16:	b2e4      	uxtb	r4, r4
 8011a18:	4020      	ands	r0, r4
 8011a1a:	bd70      	pop	{r4, r5, r6, pc}

08011a1c <uxr_serialize_DELETE_Payload>:
 8011a1c:	b570      	push	{r4, r5, r6, lr}
 8011a1e:	2202      	movs	r2, #2
 8011a20:	4605      	mov	r5, r0
 8011a22:	460e      	mov	r6, r1
 8011a24:	f7fb f90e 	bl	800cc44 <ucdr_serialize_array_uint8_t>
 8011a28:	2202      	movs	r2, #2
 8011a2a:	4604      	mov	r4, r0
 8011a2c:	18b1      	adds	r1, r6, r2
 8011a2e:	4628      	mov	r0, r5
 8011a30:	f7fb f908 	bl	800cc44 <ucdr_serialize_array_uint8_t>
 8011a34:	4020      	ands	r0, r4
 8011a36:	b2c0      	uxtb	r0, r0
 8011a38:	bd70      	pop	{r4, r5, r6, pc}
 8011a3a:	bf00      	nop

08011a3c <uxr_deserialize_STATUS_AGENT_Payload>:
 8011a3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a40:	4605      	mov	r5, r0
 8011a42:	460e      	mov	r6, r1
 8011a44:	f7fb fcb6 	bl	800d3b4 <ucdr_deserialize_uint8_t>
 8011a48:	1c71      	adds	r1, r6, #1
 8011a4a:	4604      	mov	r4, r0
 8011a4c:	4628      	mov	r0, r5
 8011a4e:	f7fb fcb1 	bl	800d3b4 <ucdr_deserialize_uint8_t>
 8011a52:	2204      	movs	r2, #4
 8011a54:	18b1      	adds	r1, r6, r2
 8011a56:	4680      	mov	r8, r0
 8011a58:	4628      	mov	r0, r5
 8011a5a:	f7fb f957 	bl	800cd0c <ucdr_deserialize_array_uint8_t>
 8011a5e:	f106 0108 	add.w	r1, r6, #8
 8011a62:	4607      	mov	r7, r0
 8011a64:	2202      	movs	r2, #2
 8011a66:	4628      	mov	r0, r5
 8011a68:	f7fb f950 	bl	800cd0c <ucdr_deserialize_array_uint8_t>
 8011a6c:	ea04 0308 	and.w	r3, r4, r8
 8011a70:	b2db      	uxtb	r3, r3
 8011a72:	ea03 0407 	and.w	r4, r3, r7
 8011a76:	2202      	movs	r2, #2
 8011a78:	4607      	mov	r7, r0
 8011a7a:	f106 010a 	add.w	r1, r6, #10
 8011a7e:	4628      	mov	r0, r5
 8011a80:	f7fb f944 	bl	800cd0c <ucdr_deserialize_array_uint8_t>
 8011a84:	f106 010c 	add.w	r1, r6, #12
 8011a88:	4603      	mov	r3, r0
 8011a8a:	4628      	mov	r0, r5
 8011a8c:	461d      	mov	r5, r3
 8011a8e:	f7fb fc63 	bl	800d358 <ucdr_deserialize_bool>
 8011a92:	403c      	ands	r4, r7
 8011a94:	4025      	ands	r5, r4
 8011a96:	4028      	ands	r0, r5
 8011a98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011a9c <uxr_deserialize_STATUS_Payload>:
 8011a9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011aa0:	2202      	movs	r2, #2
 8011aa2:	4606      	mov	r6, r0
 8011aa4:	460f      	mov	r7, r1
 8011aa6:	f7fb f931 	bl	800cd0c <ucdr_deserialize_array_uint8_t>
 8011aaa:	2202      	movs	r2, #2
 8011aac:	18b9      	adds	r1, r7, r2
 8011aae:	4605      	mov	r5, r0
 8011ab0:	4630      	mov	r0, r6
 8011ab2:	f7fb f92b 	bl	800cd0c <ucdr_deserialize_array_uint8_t>
 8011ab6:	1d39      	adds	r1, r7, #4
 8011ab8:	4680      	mov	r8, r0
 8011aba:	4630      	mov	r0, r6
 8011abc:	f7fb fc7a 	bl	800d3b4 <ucdr_deserialize_uint8_t>
 8011ac0:	1d79      	adds	r1, r7, #5
 8011ac2:	4604      	mov	r4, r0
 8011ac4:	4630      	mov	r0, r6
 8011ac6:	f7fb fc75 	bl	800d3b4 <ucdr_deserialize_uint8_t>
 8011aca:	ea05 0508 	and.w	r5, r5, r8
 8011ace:	402c      	ands	r4, r5
 8011ad0:	4020      	ands	r0, r4
 8011ad2:	b2c0      	uxtb	r0, r0
 8011ad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011ad8 <uxr_serialize_INFO_Payload>:
 8011ad8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011adc:	2202      	movs	r2, #2
 8011ade:	460c      	mov	r4, r1
 8011ae0:	4605      	mov	r5, r0
 8011ae2:	f7fb f8af 	bl	800cc44 <ucdr_serialize_array_uint8_t>
 8011ae6:	2202      	movs	r2, #2
 8011ae8:	18a1      	adds	r1, r4, r2
 8011aea:	4680      	mov	r8, r0
 8011aec:	4628      	mov	r0, r5
 8011aee:	f7fb f8a9 	bl	800cc44 <ucdr_serialize_array_uint8_t>
 8011af2:	7921      	ldrb	r1, [r4, #4]
 8011af4:	4607      	mov	r7, r0
 8011af6:	4628      	mov	r0, r5
 8011af8:	f7fb fc46 	bl	800d388 <ucdr_serialize_uint8_t>
 8011afc:	7961      	ldrb	r1, [r4, #5]
 8011afe:	4606      	mov	r6, r0
 8011b00:	4628      	mov	r0, r5
 8011b02:	f7fb fc41 	bl	800d388 <ucdr_serialize_uint8_t>
 8011b06:	ea08 0807 	and.w	r8, r8, r7
 8011b0a:	ea06 0608 	and.w	r6, r6, r8
 8011b0e:	4006      	ands	r6, r0
 8011b10:	7a21      	ldrb	r1, [r4, #8]
 8011b12:	4628      	mov	r0, r5
 8011b14:	f7fb fc0a 	bl	800d32c <ucdr_serialize_bool>
 8011b18:	7a23      	ldrb	r3, [r4, #8]
 8011b1a:	b2f7      	uxtb	r7, r6
 8011b1c:	4606      	mov	r6, r0
 8011b1e:	b96b      	cbnz	r3, 8011b3c <uxr_serialize_INFO_Payload+0x64>
 8011b20:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 8011b24:	4628      	mov	r0, r5
 8011b26:	f7fb fc01 	bl	800d32c <ucdr_serialize_bool>
 8011b2a:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 8011b2e:	4030      	ands	r0, r6
 8011b30:	b2c6      	uxtb	r6, r0
 8011b32:	b983      	cbnz	r3, 8011b56 <uxr_serialize_INFO_Payload+0x7e>
 8011b34:	ea06 0007 	and.w	r0, r6, r7
 8011b38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b3c:	7b21      	ldrb	r1, [r4, #12]
 8011b3e:	4628      	mov	r0, r5
 8011b40:	f7fb fc22 	bl	800d388 <ucdr_serialize_uint8_t>
 8011b44:	b188      	cbz	r0, 8011b6a <uxr_serialize_INFO_Payload+0x92>
 8011b46:	f104 010c 	add.w	r1, r4, #12
 8011b4a:	4628      	mov	r0, r5
 8011b4c:	f7ff fa06 	bl	8010f5c <uxr_serialize_ObjectVariant.part.0>
 8011b50:	4030      	ands	r0, r6
 8011b52:	b2c6      	uxtb	r6, r0
 8011b54:	e7e4      	b.n	8011b20 <uxr_serialize_INFO_Payload+0x48>
 8011b56:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 8011b5a:	4628      	mov	r0, r5
 8011b5c:	f7ff fdb2 	bl	80116c4 <uxr_serialize_ActivityInfoVariant>
 8011b60:	4006      	ands	r6, r0
 8011b62:	ea06 0007 	and.w	r0, r6, r7
 8011b66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b6a:	4606      	mov	r6, r0
 8011b6c:	e7d8      	b.n	8011b20 <uxr_serialize_INFO_Payload+0x48>
 8011b6e:	bf00      	nop

08011b70 <uxr_serialize_READ_DATA_Payload>:
 8011b70:	b570      	push	{r4, r5, r6, lr}
 8011b72:	2202      	movs	r2, #2
 8011b74:	4605      	mov	r5, r0
 8011b76:	460e      	mov	r6, r1
 8011b78:	f7fb f864 	bl	800cc44 <ucdr_serialize_array_uint8_t>
 8011b7c:	2202      	movs	r2, #2
 8011b7e:	18b1      	adds	r1, r6, r2
 8011b80:	4604      	mov	r4, r0
 8011b82:	4628      	mov	r0, r5
 8011b84:	f7fb f85e 	bl	800cc44 <ucdr_serialize_array_uint8_t>
 8011b88:	1d31      	adds	r1, r6, #4
 8011b8a:	4004      	ands	r4, r0
 8011b8c:	4628      	mov	r0, r5
 8011b8e:	f7ff fe5d 	bl	801184c <uxr_serialize_ReadSpecification>
 8011b92:	b2e4      	uxtb	r4, r4
 8011b94:	4020      	ands	r0, r4
 8011b96:	bd70      	pop	{r4, r5, r6, pc}

08011b98 <uxr_serialize_WRITE_DATA_Payload_Data>:
 8011b98:	b570      	push	{r4, r5, r6, lr}
 8011b9a:	2202      	movs	r2, #2
 8011b9c:	4605      	mov	r5, r0
 8011b9e:	460e      	mov	r6, r1
 8011ba0:	f7fb f850 	bl	800cc44 <ucdr_serialize_array_uint8_t>
 8011ba4:	2202      	movs	r2, #2
 8011ba6:	4604      	mov	r4, r0
 8011ba8:	18b1      	adds	r1, r6, r2
 8011baa:	4628      	mov	r0, r5
 8011bac:	f7fb f84a 	bl	800cc44 <ucdr_serialize_array_uint8_t>
 8011bb0:	4020      	ands	r0, r4
 8011bb2:	b2c0      	uxtb	r0, r0
 8011bb4:	bd70      	pop	{r4, r5, r6, pc}
 8011bb6:	bf00      	nop

08011bb8 <uxr_serialize_ACKNACK_Payload>:
 8011bb8:	b570      	push	{r4, r5, r6, lr}
 8011bba:	460c      	mov	r4, r1
 8011bbc:	460e      	mov	r6, r1
 8011bbe:	f834 1b02 	ldrh.w	r1, [r4], #2
 8011bc2:	4605      	mov	r5, r0
 8011bc4:	f7fb fc0c 	bl	800d3e0 <ucdr_serialize_uint16_t>
 8011bc8:	2202      	movs	r2, #2
 8011bca:	4621      	mov	r1, r4
 8011bcc:	4604      	mov	r4, r0
 8011bce:	4628      	mov	r0, r5
 8011bd0:	f7fb f838 	bl	800cc44 <ucdr_serialize_array_uint8_t>
 8011bd4:	7931      	ldrb	r1, [r6, #4]
 8011bd6:	4004      	ands	r4, r0
 8011bd8:	4628      	mov	r0, r5
 8011bda:	f7fb fbd5 	bl	800d388 <ucdr_serialize_uint8_t>
 8011bde:	b2e4      	uxtb	r4, r4
 8011be0:	4020      	ands	r0, r4
 8011be2:	bd70      	pop	{r4, r5, r6, pc}

08011be4 <uxr_deserialize_ACKNACK_Payload>:
 8011be4:	b570      	push	{r4, r5, r6, lr}
 8011be6:	4605      	mov	r5, r0
 8011be8:	460e      	mov	r6, r1
 8011bea:	f7fb fcf9 	bl	800d5e0 <ucdr_deserialize_uint16_t>
 8011bee:	2202      	movs	r2, #2
 8011bf0:	18b1      	adds	r1, r6, r2
 8011bf2:	4604      	mov	r4, r0
 8011bf4:	4628      	mov	r0, r5
 8011bf6:	f7fb f889 	bl	800cd0c <ucdr_deserialize_array_uint8_t>
 8011bfa:	1d31      	adds	r1, r6, #4
 8011bfc:	4004      	ands	r4, r0
 8011bfe:	4628      	mov	r0, r5
 8011c00:	f7fb fbd8 	bl	800d3b4 <ucdr_deserialize_uint8_t>
 8011c04:	b2e4      	uxtb	r4, r4
 8011c06:	4020      	ands	r0, r4
 8011c08:	bd70      	pop	{r4, r5, r6, pc}
 8011c0a:	bf00      	nop

08011c0c <uxr_serialize_HEARTBEAT_Payload>:
 8011c0c:	b570      	push	{r4, r5, r6, lr}
 8011c0e:	460d      	mov	r5, r1
 8011c10:	8809      	ldrh	r1, [r1, #0]
 8011c12:	4606      	mov	r6, r0
 8011c14:	f7fb fbe4 	bl	800d3e0 <ucdr_serialize_uint16_t>
 8011c18:	8869      	ldrh	r1, [r5, #2]
 8011c1a:	4604      	mov	r4, r0
 8011c1c:	4630      	mov	r0, r6
 8011c1e:	f7fb fbdf 	bl	800d3e0 <ucdr_serialize_uint16_t>
 8011c22:	7929      	ldrb	r1, [r5, #4]
 8011c24:	4004      	ands	r4, r0
 8011c26:	4630      	mov	r0, r6
 8011c28:	f7fb fbae 	bl	800d388 <ucdr_serialize_uint8_t>
 8011c2c:	b2e4      	uxtb	r4, r4
 8011c2e:	4020      	ands	r0, r4
 8011c30:	bd70      	pop	{r4, r5, r6, pc}
 8011c32:	bf00      	nop

08011c34 <uxr_deserialize_HEARTBEAT_Payload>:
 8011c34:	b570      	push	{r4, r5, r6, lr}
 8011c36:	4605      	mov	r5, r0
 8011c38:	460e      	mov	r6, r1
 8011c3a:	f7fb fcd1 	bl	800d5e0 <ucdr_deserialize_uint16_t>
 8011c3e:	1cb1      	adds	r1, r6, #2
 8011c40:	4604      	mov	r4, r0
 8011c42:	4628      	mov	r0, r5
 8011c44:	f7fb fccc 	bl	800d5e0 <ucdr_deserialize_uint16_t>
 8011c48:	1d31      	adds	r1, r6, #4
 8011c4a:	4004      	ands	r4, r0
 8011c4c:	4628      	mov	r0, r5
 8011c4e:	f7fb fbb1 	bl	800d3b4 <ucdr_deserialize_uint8_t>
 8011c52:	b2e4      	uxtb	r4, r4
 8011c54:	4020      	ands	r0, r4
 8011c56:	bd70      	pop	{r4, r5, r6, pc}

08011c58 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 8011c58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c5c:	4605      	mov	r5, r0
 8011c5e:	460e      	mov	r6, r1
 8011c60:	f7fc faf2 	bl	800e248 <ucdr_deserialize_int32_t>
 8011c64:	1d31      	adds	r1, r6, #4
 8011c66:	4607      	mov	r7, r0
 8011c68:	4628      	mov	r0, r5
 8011c6a:	f7fb fed3 	bl	800da14 <ucdr_deserialize_uint32_t>
 8011c6e:	f106 0108 	add.w	r1, r6, #8
 8011c72:	4680      	mov	r8, r0
 8011c74:	4628      	mov	r0, r5
 8011c76:	f7fc fae7 	bl	800e248 <ucdr_deserialize_int32_t>
 8011c7a:	f106 010c 	add.w	r1, r6, #12
 8011c7e:	4604      	mov	r4, r0
 8011c80:	4628      	mov	r0, r5
 8011c82:	f7fb fec7 	bl	800da14 <ucdr_deserialize_uint32_t>
 8011c86:	ea07 0708 	and.w	r7, r7, r8
 8011c8a:	403c      	ands	r4, r7
 8011c8c:	f106 0110 	add.w	r1, r6, #16
 8011c90:	4004      	ands	r4, r0
 8011c92:	4628      	mov	r0, r5
 8011c94:	f7fc fad8 	bl	800e248 <ucdr_deserialize_int32_t>
 8011c98:	f106 0114 	add.w	r1, r6, #20
 8011c9c:	4607      	mov	r7, r0
 8011c9e:	4628      	mov	r0, r5
 8011ca0:	f7fb feb8 	bl	800da14 <ucdr_deserialize_uint32_t>
 8011ca4:	b2e4      	uxtb	r4, r4
 8011ca6:	403c      	ands	r4, r7
 8011ca8:	4020      	ands	r0, r4
 8011caa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011cae:	bf00      	nop

08011cb0 <uxr_serialize_SampleIdentity>:
 8011cb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011cb4:	220c      	movs	r2, #12
 8011cb6:	4604      	mov	r4, r0
 8011cb8:	460d      	mov	r5, r1
 8011cba:	f7fa ffc3 	bl	800cc44 <ucdr_serialize_array_uint8_t>
 8011cbe:	2203      	movs	r2, #3
 8011cc0:	f105 010c 	add.w	r1, r5, #12
 8011cc4:	4607      	mov	r7, r0
 8011cc6:	4620      	mov	r0, r4
 8011cc8:	f7fa ffbc 	bl	800cc44 <ucdr_serialize_array_uint8_t>
 8011ccc:	7be9      	ldrb	r1, [r5, #15]
 8011cce:	4680      	mov	r8, r0
 8011cd0:	4620      	mov	r0, r4
 8011cd2:	f7fb fb59 	bl	800d388 <ucdr_serialize_uint8_t>
 8011cd6:	6929      	ldr	r1, [r5, #16]
 8011cd8:	4606      	mov	r6, r0
 8011cda:	4620      	mov	r0, r4
 8011cdc:	f7fc f984 	bl	800dfe8 <ucdr_serialize_int32_t>
 8011ce0:	6969      	ldr	r1, [r5, #20]
 8011ce2:	4603      	mov	r3, r0
 8011ce4:	4620      	mov	r0, r4
 8011ce6:	ea07 0708 	and.w	r7, r7, r8
 8011cea:	461c      	mov	r4, r3
 8011cec:	f7fb fd62 	bl	800d7b4 <ucdr_serialize_uint32_t>
 8011cf0:	403e      	ands	r6, r7
 8011cf2:	4034      	ands	r4, r6
 8011cf4:	4020      	ands	r0, r4
 8011cf6:	b2c0      	uxtb	r0, r0
 8011cf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011cfc <uxr_deserialize_SampleIdentity>:
 8011cfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d00:	220c      	movs	r2, #12
 8011d02:	4604      	mov	r4, r0
 8011d04:	460d      	mov	r5, r1
 8011d06:	f7fb f801 	bl	800cd0c <ucdr_deserialize_array_uint8_t>
 8011d0a:	2203      	movs	r2, #3
 8011d0c:	f105 010c 	add.w	r1, r5, #12
 8011d10:	4607      	mov	r7, r0
 8011d12:	4620      	mov	r0, r4
 8011d14:	f7fa fffa 	bl	800cd0c <ucdr_deserialize_array_uint8_t>
 8011d18:	f105 010f 	add.w	r1, r5, #15
 8011d1c:	4680      	mov	r8, r0
 8011d1e:	4620      	mov	r0, r4
 8011d20:	f7fb fb48 	bl	800d3b4 <ucdr_deserialize_uint8_t>
 8011d24:	f105 0110 	add.w	r1, r5, #16
 8011d28:	4606      	mov	r6, r0
 8011d2a:	4620      	mov	r0, r4
 8011d2c:	f7fc fa8c 	bl	800e248 <ucdr_deserialize_int32_t>
 8011d30:	f105 0114 	add.w	r1, r5, #20
 8011d34:	4603      	mov	r3, r0
 8011d36:	4620      	mov	r0, r4
 8011d38:	ea07 0708 	and.w	r7, r7, r8
 8011d3c:	461c      	mov	r4, r3
 8011d3e:	f7fb fe69 	bl	800da14 <ucdr_deserialize_uint32_t>
 8011d42:	403e      	ands	r6, r7
 8011d44:	4034      	ands	r4, r6
 8011d46:	4020      	ands	r0, r4
 8011d48:	b2c0      	uxtb	r0, r0
 8011d4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d4e:	bf00      	nop

08011d50 <nereo_interfaces__msg__ThrusterStatuses__init>:
 8011d50:	3800      	subs	r0, #0
 8011d52:	bf18      	it	ne
 8011d54:	2001      	movne	r0, #1
 8011d56:	4770      	bx	lr

08011d58 <nereo_interfaces__msg__ThrusterStatuses__fini>:
 8011d58:	4770      	bx	lr
 8011d5a:	bf00      	nop

08011d5c <rcl_client_get_rmw_handle>:
 8011d5c:	b118      	cbz	r0, 8011d66 <rcl_client_get_rmw_handle+0xa>
 8011d5e:	6800      	ldr	r0, [r0, #0]
 8011d60:	b108      	cbz	r0, 8011d66 <rcl_client_get_rmw_handle+0xa>
 8011d62:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8011d66:	4770      	bx	lr

08011d68 <rcl_send_request>:
 8011d68:	b570      	push	{r4, r5, r6, lr}
 8011d6a:	b082      	sub	sp, #8
 8011d6c:	b1e8      	cbz	r0, 8011daa <rcl_send_request+0x42>
 8011d6e:	4604      	mov	r4, r0
 8011d70:	6800      	ldr	r0, [r0, #0]
 8011d72:	b1d0      	cbz	r0, 8011daa <rcl_send_request+0x42>
 8011d74:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 8011d78:	b1bb      	cbz	r3, 8011daa <rcl_send_request+0x42>
 8011d7a:	460e      	mov	r6, r1
 8011d7c:	b1d1      	cbz	r1, 8011db4 <rcl_send_request+0x4c>
 8011d7e:	4615      	mov	r5, r2
 8011d80:	b1c2      	cbz	r2, 8011db4 <rcl_send_request+0x4c>
 8011d82:	2105      	movs	r1, #5
 8011d84:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8011d88:	f002 fd76 	bl	8014878 <__atomic_load_8>
 8011d8c:	6823      	ldr	r3, [r4, #0]
 8011d8e:	e9c5 0100 	strd	r0, r1, [r5]
 8011d92:	462a      	mov	r2, r5
 8011d94:	4631      	mov	r1, r6
 8011d96:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8011d9a:	f003 ff21 	bl	8015be0 <rmw_send_request>
 8011d9e:	4606      	mov	r6, r0
 8011da0:	b160      	cbz	r0, 8011dbc <rcl_send_request+0x54>
 8011da2:	2601      	movs	r6, #1
 8011da4:	4630      	mov	r0, r6
 8011da6:	b002      	add	sp, #8
 8011da8:	bd70      	pop	{r4, r5, r6, pc}
 8011daa:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 8011dae:	4630      	mov	r0, r6
 8011db0:	b002      	add	sp, #8
 8011db2:	bd70      	pop	{r4, r5, r6, pc}
 8011db4:	260b      	movs	r6, #11
 8011db6:	4630      	mov	r0, r6
 8011db8:	b002      	add	sp, #8
 8011dba:	bd70      	pop	{r4, r5, r6, pc}
 8011dbc:	6820      	ldr	r0, [r4, #0]
 8011dbe:	2105      	movs	r1, #5
 8011dc0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011dc4:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8011dc8:	9100      	str	r1, [sp, #0]
 8011dca:	f002 fdc1 	bl	8014950 <__atomic_exchange_8>
 8011dce:	4630      	mov	r0, r6
 8011dd0:	b002      	add	sp, #8
 8011dd2:	bd70      	pop	{r4, r5, r6, pc}
 8011dd4:	0000      	movs	r0, r0
	...

08011dd8 <rcl_take_response>:
 8011dd8:	b570      	push	{r4, r5, r6, lr}
 8011dda:	468e      	mov	lr, r1
 8011ddc:	460c      	mov	r4, r1
 8011dde:	4616      	mov	r6, r2
 8011de0:	4605      	mov	r5, r0
 8011de2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011de6:	b08c      	sub	sp, #48	@ 0x30
 8011de8:	f10d 0c18 	add.w	ip, sp, #24
 8011dec:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011df0:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8011df4:	e88c 0003 	stmia.w	ip, {r0, r1}
 8011df8:	b35d      	cbz	r5, 8011e52 <rcl_take_response+0x7a>
 8011dfa:	682b      	ldr	r3, [r5, #0]
 8011dfc:	b34b      	cbz	r3, 8011e52 <rcl_take_response+0x7a>
 8011dfe:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8011e02:	b330      	cbz	r0, 8011e52 <rcl_take_response+0x7a>
 8011e04:	b346      	cbz	r6, 8011e58 <rcl_take_response+0x80>
 8011e06:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8011e60 <rcl_take_response+0x88>
 8011e0a:	2300      	movs	r3, #0
 8011e0c:	f88d 3007 	strb.w	r3, [sp, #7]
 8011e10:	4632      	mov	r2, r6
 8011e12:	f10d 0307 	add.w	r3, sp, #7
 8011e16:	a902      	add	r1, sp, #8
 8011e18:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011e1c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8011e20:	f003 ffe6 	bl	8015df0 <rmw_take_response>
 8011e24:	4605      	mov	r5, r0
 8011e26:	b9c8      	cbnz	r0, 8011e5c <rcl_take_response+0x84>
 8011e28:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8011e2c:	f240 13f5 	movw	r3, #501	@ 0x1f5
 8011e30:	2a00      	cmp	r2, #0
 8011e32:	bf08      	it	eq
 8011e34:	461d      	moveq	r5, r3
 8011e36:	f10d 0e18 	add.w	lr, sp, #24
 8011e3a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011e3e:	46a4      	mov	ip, r4
 8011e40:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011e44:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8011e48:	e88c 0003 	stmia.w	ip, {r0, r1}
 8011e4c:	4628      	mov	r0, r5
 8011e4e:	b00c      	add	sp, #48	@ 0x30
 8011e50:	bd70      	pop	{r4, r5, r6, pc}
 8011e52:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 8011e56:	e7ee      	b.n	8011e36 <rcl_take_response+0x5e>
 8011e58:	250b      	movs	r5, #11
 8011e5a:	e7ec      	b.n	8011e36 <rcl_take_response+0x5e>
 8011e5c:	2501      	movs	r5, #1
 8011e5e:	e7ea      	b.n	8011e36 <rcl_take_response+0x5e>
	...

08011e68 <rcl_client_is_valid>:
 8011e68:	b130      	cbz	r0, 8011e78 <rcl_client_is_valid+0x10>
 8011e6a:	6800      	ldr	r0, [r0, #0]
 8011e6c:	b120      	cbz	r0, 8011e78 <rcl_client_is_valid+0x10>
 8011e6e:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8011e72:	3800      	subs	r0, #0
 8011e74:	bf18      	it	ne
 8011e76:	2001      	movne	r0, #1
 8011e78:	4770      	bx	lr
 8011e7a:	bf00      	nop

08011e7c <rcl_convert_rmw_ret_to_rcl_ret>:
 8011e7c:	280b      	cmp	r0, #11
 8011e7e:	dc0d      	bgt.n	8011e9c <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 8011e80:	2800      	cmp	r0, #0
 8011e82:	db09      	blt.n	8011e98 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8011e84:	280b      	cmp	r0, #11
 8011e86:	d807      	bhi.n	8011e98 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8011e88:	e8df f000 	tbb	[pc, r0]
 8011e8c:	07060607 	.word	0x07060607
 8011e90:	06060606 	.word	0x06060606
 8011e94:	07070606 	.word	0x07070606
 8011e98:	2001      	movs	r0, #1
 8011e9a:	4770      	bx	lr
 8011e9c:	28cb      	cmp	r0, #203	@ 0xcb
 8011e9e:	bf18      	it	ne
 8011ea0:	2001      	movne	r0, #1
 8011ea2:	4770      	bx	lr

08011ea4 <rcl_get_zero_initialized_context>:
 8011ea4:	4a03      	ldr	r2, [pc, #12]	@ (8011eb4 <rcl_get_zero_initialized_context+0x10>)
 8011ea6:	4603      	mov	r3, r0
 8011ea8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011eac:	e883 0003 	stmia.w	r3, {r0, r1}
 8011eb0:	4618      	mov	r0, r3
 8011eb2:	4770      	bx	lr
 8011eb4:	0801b158 	.word	0x0801b158

08011eb8 <rcl_context_is_valid>:
 8011eb8:	b118      	cbz	r0, 8011ec2 <rcl_context_is_valid+0xa>
 8011eba:	6840      	ldr	r0, [r0, #4]
 8011ebc:	3800      	subs	r0, #0
 8011ebe:	bf18      	it	ne
 8011ec0:	2001      	movne	r0, #1
 8011ec2:	4770      	bx	lr

08011ec4 <__cleanup_context>:
 8011ec4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011ec8:	4606      	mov	r6, r0
 8011eca:	6800      	ldr	r0, [r0, #0]
 8011ecc:	2300      	movs	r3, #0
 8011ece:	6073      	str	r3, [r6, #4]
 8011ed0:	2800      	cmp	r0, #0
 8011ed2:	d049      	beq.n	8011f68 <__cleanup_context+0xa4>
 8011ed4:	6947      	ldr	r7, [r0, #20]
 8011ed6:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8011eda:	f8d0 9010 	ldr.w	r9, [r0, #16]
 8011ede:	b137      	cbz	r7, 8011eee <__cleanup_context+0x2a>
 8011ee0:	3014      	adds	r0, #20
 8011ee2:	f000 f9bb 	bl	801225c <rcl_init_options_fini>
 8011ee6:	4607      	mov	r7, r0
 8011ee8:	2800      	cmp	r0, #0
 8011eea:	d144      	bne.n	8011f76 <__cleanup_context+0xb2>
 8011eec:	6830      	ldr	r0, [r6, #0]
 8011eee:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8011ef0:	b143      	cbz	r3, 8011f04 <__cleanup_context+0x40>
 8011ef2:	3028      	adds	r0, #40	@ 0x28
 8011ef4:	f003 fcbc 	bl	8015870 <rmw_context_fini>
 8011ef8:	b118      	cbz	r0, 8011f02 <__cleanup_context+0x3e>
 8011efa:	2f00      	cmp	r7, #0
 8011efc:	d03e      	beq.n	8011f7c <__cleanup_context+0xb8>
 8011efe:	f7f9 faaf 	bl	800b460 <rcutils_reset_error>
 8011f02:	6830      	ldr	r0, [r6, #0]
 8011f04:	6a03      	ldr	r3, [r0, #32]
 8011f06:	b1db      	cbz	r3, 8011f40 <__cleanup_context+0x7c>
 8011f08:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 8011f0c:	2a01      	cmp	r2, #1
 8011f0e:	f17c 0100 	sbcs.w	r1, ip, #0
 8011f12:	db11      	blt.n	8011f38 <__cleanup_context+0x74>
 8011f14:	2400      	movs	r4, #0
 8011f16:	4625      	mov	r5, r4
 8011f18:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8011f1c:	4649      	mov	r1, r9
 8011f1e:	b1b8      	cbz	r0, 8011f50 <__cleanup_context+0x8c>
 8011f20:	47c0      	blx	r8
 8011f22:	6833      	ldr	r3, [r6, #0]
 8011f24:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 8011f28:	3401      	adds	r4, #1
 8011f2a:	f145 0500 	adc.w	r5, r5, #0
 8011f2e:	4294      	cmp	r4, r2
 8011f30:	eb75 010c 	sbcs.w	r1, r5, ip
 8011f34:	6a1b      	ldr	r3, [r3, #32]
 8011f36:	dbef      	blt.n	8011f18 <__cleanup_context+0x54>
 8011f38:	4618      	mov	r0, r3
 8011f3a:	4649      	mov	r1, r9
 8011f3c:	47c0      	blx	r8
 8011f3e:	6830      	ldr	r0, [r6, #0]
 8011f40:	4649      	mov	r1, r9
 8011f42:	47c0      	blx	r8
 8011f44:	2300      	movs	r3, #0
 8011f46:	e9c6 3300 	strd	r3, r3, [r6]
 8011f4a:	4638      	mov	r0, r7
 8011f4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011f50:	3401      	adds	r4, #1
 8011f52:	f145 0500 	adc.w	r5, r5, #0
 8011f56:	4294      	cmp	r4, r2
 8011f58:	eb75 010c 	sbcs.w	r1, r5, ip
 8011f5c:	dbdc      	blt.n	8011f18 <__cleanup_context+0x54>
 8011f5e:	4618      	mov	r0, r3
 8011f60:	4649      	mov	r1, r9
 8011f62:	47c0      	blx	r8
 8011f64:	6830      	ldr	r0, [r6, #0]
 8011f66:	e7eb      	b.n	8011f40 <__cleanup_context+0x7c>
 8011f68:	4607      	mov	r7, r0
 8011f6a:	2300      	movs	r3, #0
 8011f6c:	e9c6 3300 	strd	r3, r3, [r6]
 8011f70:	4638      	mov	r0, r7
 8011f72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011f76:	f7f9 fa73 	bl	800b460 <rcutils_reset_error>
 8011f7a:	e7b7      	b.n	8011eec <__cleanup_context+0x28>
 8011f7c:	f7ff ff7e 	bl	8011e7c <rcl_convert_rmw_ret_to_rcl_ret>
 8011f80:	4607      	mov	r7, r0
 8011f82:	e7bc      	b.n	8011efe <__cleanup_context+0x3a>

08011f84 <rcl_init>:
 8011f84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011f88:	1e05      	subs	r5, r0, #0
 8011f8a:	b09e      	sub	sp, #120	@ 0x78
 8011f8c:	460e      	mov	r6, r1
 8011f8e:	4690      	mov	r8, r2
 8011f90:	461f      	mov	r7, r3
 8011f92:	f340 809c 	ble.w	80120ce <rcl_init+0x14a>
 8011f96:	2900      	cmp	r1, #0
 8011f98:	f000 809c 	beq.w	80120d4 <rcl_init+0x150>
 8011f9c:	f1a1 0e04 	sub.w	lr, r1, #4
 8011fa0:	f04f 0c00 	mov.w	ip, #0
 8011fa4:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 8011fa8:	f10c 0c01 	add.w	ip, ip, #1
 8011fac:	2c00      	cmp	r4, #0
 8011fae:	f000 8091 	beq.w	80120d4 <rcl_init+0x150>
 8011fb2:	4565      	cmp	r5, ip
 8011fb4:	d1f6      	bne.n	8011fa4 <rcl_init+0x20>
 8011fb6:	f1b8 0f00 	cmp.w	r8, #0
 8011fba:	f000 808b 	beq.w	80120d4 <rcl_init+0x150>
 8011fbe:	f8d8 4000 	ldr.w	r4, [r8]
 8011fc2:	2c00      	cmp	r4, #0
 8011fc4:	f000 8086 	beq.w	80120d4 <rcl_init+0x150>
 8011fc8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011fca:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 8011fce:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011fd2:	6823      	ldr	r3, [r4, #0]
 8011fd4:	f8cc 3000 	str.w	r3, [ip]
 8011fd8:	a819      	add	r0, sp, #100	@ 0x64
 8011fda:	f7f9 fa1d 	bl	800b418 <rcutils_allocator_is_valid>
 8011fde:	2800      	cmp	r0, #0
 8011fe0:	d078      	beq.n	80120d4 <rcl_init+0x150>
 8011fe2:	2f00      	cmp	r7, #0
 8011fe4:	d076      	beq.n	80120d4 <rcl_init+0x150>
 8011fe6:	683b      	ldr	r3, [r7, #0]
 8011fe8:	2b00      	cmp	r3, #0
 8011fea:	d178      	bne.n	80120de <rcl_init+0x15a>
 8011fec:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 8011ff0:	2178      	movs	r1, #120	@ 0x78
 8011ff2:	2001      	movs	r0, #1
 8011ff4:	4798      	blx	r3
 8011ff6:	4604      	mov	r4, r0
 8011ff8:	6038      	str	r0, [r7, #0]
 8011ffa:	2800      	cmp	r0, #0
 8011ffc:	f000 80b6 	beq.w	801216c <rcl_init+0x1e8>
 8012000:	a802      	add	r0, sp, #8
 8012002:	f002 ff89 	bl	8014f18 <rmw_get_zero_initialized_context>
 8012006:	a902      	add	r1, sp, #8
 8012008:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 801200c:	2250      	movs	r2, #80	@ 0x50
 801200e:	ac19      	add	r4, sp, #100	@ 0x64
 8012010:	f007 fafd 	bl	801960e <memcpy>
 8012014:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012016:	f8d7 e000 	ldr.w	lr, [r7]
 801201a:	46f4      	mov	ip, lr
 801201c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012020:	6823      	ldr	r3, [r4, #0]
 8012022:	f8cc 3000 	str.w	r3, [ip]
 8012026:	f10e 0114 	add.w	r1, lr, #20
 801202a:	4640      	mov	r0, r8
 801202c:	f000 f940 	bl	80122b0 <rcl_init_options_copy>
 8012030:	4604      	mov	r4, r0
 8012032:	2800      	cmp	r0, #0
 8012034:	d144      	bne.n	80120c0 <rcl_init+0x13c>
 8012036:	f8d7 9000 	ldr.w	r9, [r7]
 801203a:	ea4f 78e5 	mov.w	r8, r5, asr #31
 801203e:	f8c9 0020 	str.w	r0, [r9, #32]
 8012042:	f8c9 5018 	str.w	r5, [r9, #24]
 8012046:	f8c9 801c 	str.w	r8, [r9, #28]
 801204a:	2d00      	cmp	r5, #0
 801204c:	d04e      	beq.n	80120ec <rcl_init+0x168>
 801204e:	2e00      	cmp	r6, #0
 8012050:	d04c      	beq.n	80120ec <rcl_init+0x168>
 8012052:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 8012056:	2104      	movs	r1, #4
 8012058:	4628      	mov	r0, r5
 801205a:	4798      	blx	r3
 801205c:	f8c9 0020 	str.w	r0, [r9, #32]
 8012060:	f8d7 9000 	ldr.w	r9, [r7]
 8012064:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8012068:	46ca      	mov	sl, r9
 801206a:	b343      	cbz	r3, 80120be <rcl_init+0x13a>
 801206c:	2d01      	cmp	r5, #1
 801206e:	f178 0300 	sbcs.w	r3, r8, #0
 8012072:	db3b      	blt.n	80120ec <rcl_init+0x168>
 8012074:	2400      	movs	r4, #0
 8012076:	3e04      	subs	r6, #4
 8012078:	46a1      	mov	r9, r4
 801207a:	e00b      	b.n	8012094 <rcl_init+0x110>
 801207c:	6831      	ldr	r1, [r6, #0]
 801207e:	f007 fac6 	bl	801960e <memcpy>
 8012082:	3401      	adds	r4, #1
 8012084:	f149 0900 	adc.w	r9, r9, #0
 8012088:	45c8      	cmp	r8, r9
 801208a:	bf08      	it	eq
 801208c:	42a5      	cmpeq	r5, r4
 801208e:	d02b      	beq.n	80120e8 <rcl_init+0x164>
 8012090:	f8d7 a000 	ldr.w	sl, [r7]
 8012094:	f856 0f04 	ldr.w	r0, [r6, #4]!
 8012098:	f7ee f8b2 	bl	8000200 <strlen>
 801209c:	1c42      	adds	r2, r0, #1
 801209e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80120a0:	991d      	ldr	r1, [sp, #116]	@ 0x74
 80120a2:	f8da a020 	ldr.w	sl, [sl, #32]
 80120a6:	9201      	str	r2, [sp, #4]
 80120a8:	4610      	mov	r0, r2
 80120aa:	4798      	blx	r3
 80120ac:	683b      	ldr	r3, [r7, #0]
 80120ae:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 80120b2:	6a1b      	ldr	r3, [r3, #32]
 80120b4:	9a01      	ldr	r2, [sp, #4]
 80120b6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80120ba:	2800      	cmp	r0, #0
 80120bc:	d1de      	bne.n	801207c <rcl_init+0xf8>
 80120be:	240a      	movs	r4, #10
 80120c0:	4638      	mov	r0, r7
 80120c2:	f7ff feff 	bl	8011ec4 <__cleanup_context>
 80120c6:	4620      	mov	r0, r4
 80120c8:	b01e      	add	sp, #120	@ 0x78
 80120ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80120ce:	2900      	cmp	r1, #0
 80120d0:	f43f af71 	beq.w	8011fb6 <rcl_init+0x32>
 80120d4:	240b      	movs	r4, #11
 80120d6:	4620      	mov	r0, r4
 80120d8:	b01e      	add	sp, #120	@ 0x78
 80120da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80120de:	2464      	movs	r4, #100	@ 0x64
 80120e0:	4620      	mov	r0, r4
 80120e2:	b01e      	add	sp, #120	@ 0x78
 80120e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80120e8:	f8d7 9000 	ldr.w	r9, [r7]
 80120ec:	4926      	ldr	r1, [pc, #152]	@ (8012188 <rcl_init+0x204>)
 80120ee:	680b      	ldr	r3, [r1, #0]
 80120f0:	3301      	adds	r3, #1
 80120f2:	d036      	beq.n	8012162 <rcl_init+0x1de>
 80120f4:	600b      	str	r3, [r1, #0]
 80120f6:	461a      	mov	r2, r3
 80120f8:	2400      	movs	r4, #0
 80120fa:	f8d9 0014 	ldr.w	r0, [r9, #20]
 80120fe:	607b      	str	r3, [r7, #4]
 8012100:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8012102:	3301      	adds	r3, #1
 8012104:	e9c0 2406 	strd	r2, r4, [r0, #24]
 8012108:	d034      	beq.n	8012174 <rcl_init+0x1f0>
 801210a:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 801210e:	b93b      	cbnz	r3, 8012120 <rcl_init+0x19c>
 8012110:	3030      	adds	r0, #48	@ 0x30
 8012112:	f000 f939 	bl	8012388 <rcl_get_localhost_only>
 8012116:	4604      	mov	r4, r0
 8012118:	2800      	cmp	r0, #0
 801211a:	d1d1      	bne.n	80120c0 <rcl_init+0x13c>
 801211c:	683b      	ldr	r3, [r7, #0]
 801211e:	6958      	ldr	r0, [r3, #20]
 8012120:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 8012122:	aa18      	add	r2, sp, #96	@ 0x60
 8012124:	a917      	add	r1, sp, #92	@ 0x5c
 8012126:	f001 f841 	bl	80131ac <rcl_validate_enclave_name>
 801212a:	4604      	mov	r4, r0
 801212c:	2800      	cmp	r0, #0
 801212e:	d1c7      	bne.n	80120c0 <rcl_init+0x13c>
 8012130:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8012132:	b9eb      	cbnz	r3, 8012170 <rcl_init+0x1ec>
 8012134:	6839      	ldr	r1, [r7, #0]
 8012136:	694b      	ldr	r3, [r1, #20]
 8012138:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 801213a:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 801213e:	f000 fc3d 	bl	80129bc <rcl_get_security_options_from_environment>
 8012142:	4604      	mov	r4, r0
 8012144:	2800      	cmp	r0, #0
 8012146:	d1bb      	bne.n	80120c0 <rcl_init+0x13c>
 8012148:	6839      	ldr	r1, [r7, #0]
 801214a:	6948      	ldr	r0, [r1, #20]
 801214c:	3128      	adds	r1, #40	@ 0x28
 801214e:	3018      	adds	r0, #24
 8012150:	f003 fa58 	bl	8015604 <rmw_init>
 8012154:	4604      	mov	r4, r0
 8012156:	2800      	cmp	r0, #0
 8012158:	d0bd      	beq.n	80120d6 <rcl_init+0x152>
 801215a:	f7ff fe8f 	bl	8011e7c <rcl_convert_rmw_ret_to_rcl_ret>
 801215e:	4604      	mov	r4, r0
 8012160:	e7ae      	b.n	80120c0 <rcl_init+0x13c>
 8012162:	2201      	movs	r2, #1
 8012164:	461c      	mov	r4, r3
 8012166:	600a      	str	r2, [r1, #0]
 8012168:	4613      	mov	r3, r2
 801216a:	e7c6      	b.n	80120fa <rcl_init+0x176>
 801216c:	240a      	movs	r4, #10
 801216e:	e7b2      	b.n	80120d6 <rcl_init+0x152>
 8012170:	2401      	movs	r4, #1
 8012172:	e7a5      	b.n	80120c0 <rcl_init+0x13c>
 8012174:	3024      	adds	r0, #36	@ 0x24
 8012176:	f005 ff93 	bl	80180a0 <rcl_get_default_domain_id>
 801217a:	4604      	mov	r4, r0
 801217c:	2800      	cmp	r0, #0
 801217e:	d19f      	bne.n	80120c0 <rcl_init+0x13c>
 8012180:	683b      	ldr	r3, [r7, #0]
 8012182:	6958      	ldr	r0, [r3, #20]
 8012184:	e7c1      	b.n	801210a <rcl_init+0x186>
 8012186:	bf00      	nop
 8012188:	200153e4 	.word	0x200153e4

0801218c <rcl_get_zero_initialized_init_options>:
 801218c:	2000      	movs	r0, #0
 801218e:	4770      	bx	lr

08012190 <rcl_init_options_init>:
 8012190:	b084      	sub	sp, #16
 8012192:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012194:	b097      	sub	sp, #92	@ 0x5c
 8012196:	ae1d      	add	r6, sp, #116	@ 0x74
 8012198:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 801219c:	2800      	cmp	r0, #0
 801219e:	d058      	beq.n	8012252 <rcl_init_options_init+0xc2>
 80121a0:	6803      	ldr	r3, [r0, #0]
 80121a2:	4605      	mov	r5, r0
 80121a4:	b133      	cbz	r3, 80121b4 <rcl_init_options_init+0x24>
 80121a6:	2464      	movs	r4, #100	@ 0x64
 80121a8:	4620      	mov	r0, r4
 80121aa:	b017      	add	sp, #92	@ 0x5c
 80121ac:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80121b0:	b004      	add	sp, #16
 80121b2:	4770      	bx	lr
 80121b4:	4630      	mov	r0, r6
 80121b6:	f7f9 f92f 	bl	800b418 <rcutils_allocator_is_valid>
 80121ba:	2800      	cmp	r0, #0
 80121bc:	d049      	beq.n	8012252 <rcl_init_options_init+0xc2>
 80121be:	46b4      	mov	ip, r6
 80121c0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80121c4:	ac11      	add	r4, sp, #68	@ 0x44
 80121c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80121c8:	f8dc 3000 	ldr.w	r3, [ip]
 80121cc:	6023      	str	r3, [r4, #0]
 80121ce:	9921      	ldr	r1, [sp, #132]	@ 0x84
 80121d0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80121d2:	2050      	movs	r0, #80	@ 0x50
 80121d4:	4798      	blx	r3
 80121d6:	4604      	mov	r4, r0
 80121d8:	6028      	str	r0, [r5, #0]
 80121da:	2800      	cmp	r0, #0
 80121dc:	d03b      	beq.n	8012256 <rcl_init_options_init+0xc6>
 80121de:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 80121e2:	4686      	mov	lr, r0
 80121e4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80121e8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80121ec:	f8dc 3000 	ldr.w	r3, [ip]
 80121f0:	f8ce 3000 	str.w	r3, [lr]
 80121f4:	a802      	add	r0, sp, #8
 80121f6:	f002 fe9f 	bl	8014f38 <rmw_get_zero_initialized_init_options>
 80121fa:	f10d 0e08 	add.w	lr, sp, #8
 80121fe:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012202:	f104 0c18 	add.w	ip, r4, #24
 8012206:	682f      	ldr	r7, [r5, #0]
 8012208:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801220c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012210:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012214:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012218:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801221c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8012220:	ac20      	add	r4, sp, #128	@ 0x80
 8012222:	e88c 0003 	stmia.w	ip, {r0, r1}
 8012226:	e894 0003 	ldmia.w	r4, {r0, r1}
 801222a:	e88d 0003 	stmia.w	sp, {r0, r1}
 801222e:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8012232:	f107 0018 	add.w	r0, r7, #24
 8012236:	f003 f8ed 	bl	8015414 <rmw_init_options_init>
 801223a:	4604      	mov	r4, r0
 801223c:	2800      	cmp	r0, #0
 801223e:	d0b3      	beq.n	80121a8 <rcl_init_options_init+0x18>
 8012240:	9921      	ldr	r1, [sp, #132]	@ 0x84
 8012242:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8012244:	6828      	ldr	r0, [r5, #0]
 8012246:	4798      	blx	r3
 8012248:	4620      	mov	r0, r4
 801224a:	f7ff fe17 	bl	8011e7c <rcl_convert_rmw_ret_to_rcl_ret>
 801224e:	4604      	mov	r4, r0
 8012250:	e7aa      	b.n	80121a8 <rcl_init_options_init+0x18>
 8012252:	240b      	movs	r4, #11
 8012254:	e7a8      	b.n	80121a8 <rcl_init_options_init+0x18>
 8012256:	240a      	movs	r4, #10
 8012258:	e7a6      	b.n	80121a8 <rcl_init_options_init+0x18>
 801225a:	bf00      	nop

0801225c <rcl_init_options_fini>:
 801225c:	b530      	push	{r4, r5, lr}
 801225e:	b087      	sub	sp, #28
 8012260:	b1f0      	cbz	r0, 80122a0 <rcl_init_options_fini+0x44>
 8012262:	6803      	ldr	r3, [r0, #0]
 8012264:	4604      	mov	r4, r0
 8012266:	b1db      	cbz	r3, 80122a0 <rcl_init_options_fini+0x44>
 8012268:	469c      	mov	ip, r3
 801226a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801226e:	f10d 0e04 	add.w	lr, sp, #4
 8012272:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8012276:	f8dc 3000 	ldr.w	r3, [ip]
 801227a:	f8ce 3000 	str.w	r3, [lr]
 801227e:	a801      	add	r0, sp, #4
 8012280:	f7f9 f8ca 	bl	800b418 <rcutils_allocator_is_valid>
 8012284:	b160      	cbz	r0, 80122a0 <rcl_init_options_fini+0x44>
 8012286:	6820      	ldr	r0, [r4, #0]
 8012288:	3018      	adds	r0, #24
 801228a:	f003 f973 	bl	8015574 <rmw_init_options_fini>
 801228e:	4605      	mov	r5, r0
 8012290:	b950      	cbnz	r0, 80122a8 <rcl_init_options_fini+0x4c>
 8012292:	6820      	ldr	r0, [r4, #0]
 8012294:	9b02      	ldr	r3, [sp, #8]
 8012296:	9905      	ldr	r1, [sp, #20]
 8012298:	4798      	blx	r3
 801229a:	4628      	mov	r0, r5
 801229c:	b007      	add	sp, #28
 801229e:	bd30      	pop	{r4, r5, pc}
 80122a0:	250b      	movs	r5, #11
 80122a2:	4628      	mov	r0, r5
 80122a4:	b007      	add	sp, #28
 80122a6:	bd30      	pop	{r4, r5, pc}
 80122a8:	f7ff fde8 	bl	8011e7c <rcl_convert_rmw_ret_to_rcl_ret>
 80122ac:	4605      	mov	r5, r0
 80122ae:	e7f8      	b.n	80122a2 <rcl_init_options_fini+0x46>

080122b0 <rcl_init_options_copy>:
 80122b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80122b4:	b094      	sub	sp, #80	@ 0x50
 80122b6:	2800      	cmp	r0, #0
 80122b8:	d058      	beq.n	801236c <rcl_init_options_copy+0xbc>
 80122ba:	4604      	mov	r4, r0
 80122bc:	6800      	ldr	r0, [r0, #0]
 80122be:	2800      	cmp	r0, #0
 80122c0:	d054      	beq.n	801236c <rcl_init_options_copy+0xbc>
 80122c2:	460e      	mov	r6, r1
 80122c4:	f7f9 f8a8 	bl	800b418 <rcutils_allocator_is_valid>
 80122c8:	2800      	cmp	r0, #0
 80122ca:	d04f      	beq.n	801236c <rcl_init_options_copy+0xbc>
 80122cc:	2e00      	cmp	r6, #0
 80122ce:	d04d      	beq.n	801236c <rcl_init_options_copy+0xbc>
 80122d0:	6833      	ldr	r3, [r6, #0]
 80122d2:	b123      	cbz	r3, 80122de <rcl_init_options_copy+0x2e>
 80122d4:	2464      	movs	r4, #100	@ 0x64
 80122d6:	4620      	mov	r0, r4
 80122d8:	b014      	add	sp, #80	@ 0x50
 80122da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80122de:	6827      	ldr	r7, [r4, #0]
 80122e0:	46bc      	mov	ip, r7
 80122e2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80122e6:	ad0f      	add	r5, sp, #60	@ 0x3c
 80122e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80122ea:	f8dc 3000 	ldr.w	r3, [ip]
 80122ee:	f8d7 8000 	ldr.w	r8, [r7]
 80122f2:	602b      	str	r3, [r5, #0]
 80122f4:	4619      	mov	r1, r3
 80122f6:	2050      	movs	r0, #80	@ 0x50
 80122f8:	47c0      	blx	r8
 80122fa:	4605      	mov	r5, r0
 80122fc:	6030      	str	r0, [r6, #0]
 80122fe:	b3d0      	cbz	r0, 8012376 <rcl_init_options_copy+0xc6>
 8012300:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 8012304:	4686      	mov	lr, r0
 8012306:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801230a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801230e:	f8dc 3000 	ldr.w	r3, [ip]
 8012312:	f8ce 3000 	str.w	r3, [lr]
 8012316:	4668      	mov	r0, sp
 8012318:	f002 fe0e 	bl	8014f38 <rmw_get_zero_initialized_init_options>
 801231c:	46ee      	mov	lr, sp
 801231e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012322:	f105 0c18 	add.w	ip, r5, #24
 8012326:	6824      	ldr	r4, [r4, #0]
 8012328:	6835      	ldr	r5, [r6, #0]
 801232a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801232e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012332:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012336:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801233a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801233e:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8012342:	e88c 0003 	stmia.w	ip, {r0, r1}
 8012346:	f104 0018 	add.w	r0, r4, #24
 801234a:	f105 0118 	add.w	r1, r5, #24
 801234e:	f003 f8c9 	bl	80154e4 <rmw_init_options_copy>
 8012352:	4604      	mov	r4, r0
 8012354:	2800      	cmp	r0, #0
 8012356:	d0be      	beq.n	80122d6 <rcl_init_options_copy+0x26>
 8012358:	f7f9 f86c 	bl	800b434 <rcutils_get_error_string>
 801235c:	f7f9 f880 	bl	800b460 <rcutils_reset_error>
 8012360:	4630      	mov	r0, r6
 8012362:	f7ff ff7b 	bl	801225c <rcl_init_options_fini>
 8012366:	b140      	cbz	r0, 801237a <rcl_init_options_copy+0xca>
 8012368:	4604      	mov	r4, r0
 801236a:	e7b4      	b.n	80122d6 <rcl_init_options_copy+0x26>
 801236c:	240b      	movs	r4, #11
 801236e:	4620      	mov	r0, r4
 8012370:	b014      	add	sp, #80	@ 0x50
 8012372:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012376:	240a      	movs	r4, #10
 8012378:	e7ad      	b.n	80122d6 <rcl_init_options_copy+0x26>
 801237a:	4620      	mov	r0, r4
 801237c:	b014      	add	sp, #80	@ 0x50
 801237e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012382:	f7ff bd7b 	b.w	8011e7c <rcl_convert_rmw_ret_to_rcl_ret>
 8012386:	bf00      	nop

08012388 <rcl_get_localhost_only>:
 8012388:	b510      	push	{r4, lr}
 801238a:	b082      	sub	sp, #8
 801238c:	2300      	movs	r3, #0
 801238e:	9301      	str	r3, [sp, #4]
 8012390:	b1b8      	cbz	r0, 80123c2 <rcl_get_localhost_only+0x3a>
 8012392:	4604      	mov	r4, r0
 8012394:	a901      	add	r1, sp, #4
 8012396:	480c      	ldr	r0, [pc, #48]	@ (80123c8 <rcl_get_localhost_only+0x40>)
 8012398:	f002 fb12 	bl	80149c0 <rcutils_get_env>
 801239c:	b110      	cbz	r0, 80123a4 <rcl_get_localhost_only+0x1c>
 801239e:	2001      	movs	r0, #1
 80123a0:	b002      	add	sp, #8
 80123a2:	bd10      	pop	{r4, pc}
 80123a4:	9b01      	ldr	r3, [sp, #4]
 80123a6:	b113      	cbz	r3, 80123ae <rcl_get_localhost_only+0x26>
 80123a8:	781a      	ldrb	r2, [r3, #0]
 80123aa:	2a31      	cmp	r2, #49	@ 0x31
 80123ac:	d004      	beq.n	80123b8 <rcl_get_localhost_only+0x30>
 80123ae:	2302      	movs	r3, #2
 80123b0:	2000      	movs	r0, #0
 80123b2:	7023      	strb	r3, [r4, #0]
 80123b4:	b002      	add	sp, #8
 80123b6:	bd10      	pop	{r4, pc}
 80123b8:	785b      	ldrb	r3, [r3, #1]
 80123ba:	2b00      	cmp	r3, #0
 80123bc:	d1f7      	bne.n	80123ae <rcl_get_localhost_only+0x26>
 80123be:	2301      	movs	r3, #1
 80123c0:	e7f6      	b.n	80123b0 <rcl_get_localhost_only+0x28>
 80123c2:	200b      	movs	r0, #11
 80123c4:	b002      	add	sp, #8
 80123c6:	bd10      	pop	{r4, pc}
 80123c8:	0801b160 	.word	0x0801b160

080123cc <rcl_get_zero_initialized_node>:
 80123cc:	4a03      	ldr	r2, [pc, #12]	@ (80123dc <rcl_get_zero_initialized_node+0x10>)
 80123ce:	4603      	mov	r3, r0
 80123d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80123d4:	e883 0003 	stmia.w	r3, {r0, r1}
 80123d8:	4618      	mov	r0, r3
 80123da:	4770      	bx	lr
 80123dc:	0801b184 	.word	0x0801b184

080123e0 <rcl_node_init>:
 80123e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80123e4:	b0a9      	sub	sp, #164	@ 0xa4
 80123e6:	4604      	mov	r4, r0
 80123e8:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 80123ec:	a823      	add	r0, sp, #140	@ 0x8c
 80123ee:	460e      	mov	r6, r1
 80123f0:	4615      	mov	r5, r2
 80123f2:	461f      	mov	r7, r3
 80123f4:	f006 f87c 	bl	80184f0 <rcl_guard_condition_get_default_options>
 80123f8:	f1b8 0f00 	cmp.w	r8, #0
 80123fc:	f000 80e6 	beq.w	80125cc <rcl_node_init+0x1ec>
 8012400:	4640      	mov	r0, r8
 8012402:	f7f9 f809 	bl	800b418 <rcutils_allocator_is_valid>
 8012406:	2800      	cmp	r0, #0
 8012408:	f000 80e0 	beq.w	80125cc <rcl_node_init+0x1ec>
 801240c:	2e00      	cmp	r6, #0
 801240e:	f000 80dd 	beq.w	80125cc <rcl_node_init+0x1ec>
 8012412:	2d00      	cmp	r5, #0
 8012414:	f000 80da 	beq.w	80125cc <rcl_node_init+0x1ec>
 8012418:	2c00      	cmp	r4, #0
 801241a:	f000 80d7 	beq.w	80125cc <rcl_node_init+0x1ec>
 801241e:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8012422:	f1b9 0f00 	cmp.w	r9, #0
 8012426:	f040 80fd 	bne.w	8012624 <rcl_node_init+0x244>
 801242a:	2f00      	cmp	r7, #0
 801242c:	f000 80ce 	beq.w	80125cc <rcl_node_init+0x1ec>
 8012430:	4638      	mov	r0, r7
 8012432:	f7ff fd41 	bl	8011eb8 <rcl_context_is_valid>
 8012436:	4682      	mov	sl, r0
 8012438:	2800      	cmp	r0, #0
 801243a:	f000 80cd 	beq.w	80125d8 <rcl_node_init+0x1f8>
 801243e:	464a      	mov	r2, r9
 8012440:	a922      	add	r1, sp, #136	@ 0x88
 8012442:	4630      	mov	r0, r6
 8012444:	f8cd 9088 	str.w	r9, [sp, #136]	@ 0x88
 8012448:	f002 ff18 	bl	801527c <rmw_validate_node_name>
 801244c:	4681      	mov	r9, r0
 801244e:	2800      	cmp	r0, #0
 8012450:	f040 80be 	bne.w	80125d0 <rcl_node_init+0x1f0>
 8012454:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8012456:	2800      	cmp	r0, #0
 8012458:	f040 80f0 	bne.w	801263c <rcl_node_init+0x25c>
 801245c:	4628      	mov	r0, r5
 801245e:	f7ed fecf 	bl	8000200 <strlen>
 8012462:	2800      	cmp	r0, #0
 8012464:	f040 80bb 	bne.w	80125de <rcl_node_init+0x1fe>
 8012468:	4d7c      	ldr	r5, [pc, #496]	@ (801265c <rcl_node_init+0x27c>)
 801246a:	a922      	add	r1, sp, #136	@ 0x88
 801246c:	2200      	movs	r2, #0
 801246e:	4628      	mov	r0, r5
 8012470:	f002 fee6 	bl	8015240 <rmw_validate_namespace>
 8012474:	4681      	mov	r9, r0
 8012476:	2800      	cmp	r0, #0
 8012478:	f040 80aa 	bne.w	80125d0 <rcl_node_init+0x1f0>
 801247c:	4682      	mov	sl, r0
 801247e:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8012480:	2800      	cmp	r0, #0
 8012482:	f040 80e0 	bne.w	8012646 <rcl_node_init+0x266>
 8012486:	f8d8 3000 	ldr.w	r3, [r8]
 801248a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801248e:	2078      	movs	r0, #120	@ 0x78
 8012490:	4798      	blx	r3
 8012492:	4681      	mov	r9, r0
 8012494:	6060      	str	r0, [r4, #4]
 8012496:	2800      	cmp	r0, #0
 8012498:	f000 80ca 	beq.w	8012630 <rcl_node_init+0x250>
 801249c:	2200      	movs	r2, #0
 801249e:	2300      	movs	r3, #0
 80124a0:	e9c9 231a 	strd	r2, r3, [r9, #104]	@ 0x68
 80124a4:	e9c9 231c 	strd	r2, r3, [r9, #112]	@ 0x70
 80124a8:	a808      	add	r0, sp, #32
 80124aa:	f000 f907 	bl	80126bc <rcl_node_get_default_options>
 80124ae:	a908      	add	r1, sp, #32
 80124b0:	4648      	mov	r0, r9
 80124b2:	2268      	movs	r2, #104	@ 0x68
 80124b4:	f007 f8ab 	bl	801960e <memcpy>
 80124b8:	6861      	ldr	r1, [r4, #4]
 80124ba:	6027      	str	r7, [r4, #0]
 80124bc:	4640      	mov	r0, r8
 80124be:	f000 f90b 	bl	80126d8 <rcl_node_options_copy>
 80124c2:	2800      	cmp	r0, #0
 80124c4:	d158      	bne.n	8012578 <rcl_node_init+0x198>
 80124c6:	4628      	mov	r0, r5
 80124c8:	f7ed fe9a 	bl	8000200 <strlen>
 80124cc:	4428      	add	r0, r5
 80124ce:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 80124d2:	e9cd 5603 	strd	r5, r6, [sp, #12]
 80124d6:	2b2f      	cmp	r3, #47	@ 0x2f
 80124d8:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80124dc:	9300      	str	r3, [sp, #0]
 80124de:	bf0c      	ite	eq
 80124e0:	4b5f      	ldreq	r3, [pc, #380]	@ (8012660 <rcl_node_init+0x280>)
 80124e2:	4b60      	ldrne	r3, [pc, #384]	@ (8012664 <rcl_node_init+0x284>)
 80124e4:	9302      	str	r3, [sp, #8]
 80124e6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80124ea:	9301      	str	r3, [sp, #4]
 80124ec:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 80124f0:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80124f4:	f002 fa8c 	bl	8014a10 <rcutils_format_string_limit>
 80124f8:	6823      	ldr	r3, [r4, #0]
 80124fa:	f8c9 0074 	str.w	r0, [r9, #116]	@ 0x74
 80124fe:	6818      	ldr	r0, [r3, #0]
 8012500:	4631      	mov	r1, r6
 8012502:	3028      	adds	r0, #40	@ 0x28
 8012504:	462a      	mov	r2, r5
 8012506:	6866      	ldr	r6, [r4, #4]
 8012508:	f003 fad0 	bl	8015aac <rmw_create_node>
 801250c:	6863      	ldr	r3, [r4, #4]
 801250e:	66b0      	str	r0, [r6, #104]	@ 0x68
 8012510:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8012512:	2800      	cmp	r0, #0
 8012514:	d032      	beq.n	801257c <rcl_node_init+0x19c>
 8012516:	f003 fb5d 	bl	8015bd4 <rmw_node_get_graph_guard_condition>
 801251a:	4681      	mov	r9, r0
 801251c:	b360      	cbz	r0, 8012578 <rcl_node_init+0x198>
 801251e:	f8d8 3000 	ldr.w	r3, [r8]
 8012522:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8012526:	6866      	ldr	r6, [r4, #4]
 8012528:	2008      	movs	r0, #8
 801252a:	4798      	blx	r3
 801252c:	6863      	ldr	r3, [r4, #4]
 801252e:	66f0      	str	r0, [r6, #108]	@ 0x6c
 8012530:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 8012534:	f1bb 0f00 	cmp.w	fp, #0
 8012538:	d020      	beq.n	801257c <rcl_node_init+0x19c>
 801253a:	a806      	add	r0, sp, #24
 801253c:	f005 ff48 	bl	80183d0 <rcl_get_zero_initialized_guard_condition>
 8012540:	a806      	add	r0, sp, #24
 8012542:	c803      	ldmia	r0, {r0, r1}
 8012544:	6863      	ldr	r3, [r4, #4]
 8012546:	46c4      	mov	ip, r8
 8012548:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 801254c:	e88b 0003 	stmia.w	fp, {r0, r1}
 8012550:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012554:	ae23      	add	r6, sp, #140	@ 0x8c
 8012556:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8012558:	f8dc 3000 	ldr.w	r3, [ip]
 801255c:	6033      	str	r3, [r6, #0]
 801255e:	ab28      	add	r3, sp, #160	@ 0xa0
 8012560:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 8012564:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8012568:	4649      	mov	r1, r9
 801256a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801256c:	463a      	mov	r2, r7
 801256e:	4670      	mov	r0, lr
 8012570:	f005 ff38 	bl	80183e4 <rcl_guard_condition_init_from_rmw>
 8012574:	4681      	mov	r9, r0
 8012576:	b328      	cbz	r0, 80125c4 <rcl_node_init+0x1e4>
 8012578:	6863      	ldr	r3, [r4, #4]
 801257a:	b1f3      	cbz	r3, 80125ba <rcl_node_init+0x1da>
 801257c:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 801257e:	b128      	cbz	r0, 801258c <rcl_node_init+0x1ac>
 8012580:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8012584:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8012588:	4798      	blx	r3
 801258a:	6863      	ldr	r3, [r4, #4]
 801258c:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 801258e:	b110      	cbz	r0, 8012596 <rcl_node_init+0x1b6>
 8012590:	f003 faa4 	bl	8015adc <rmw_destroy_node>
 8012594:	6863      	ldr	r3, [r4, #4]
 8012596:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8012598:	b148      	cbz	r0, 80125ae <rcl_node_init+0x1ce>
 801259a:	f005 ff83 	bl	80184a4 <rcl_guard_condition_fini>
 801259e:	6863      	ldr	r3, [r4, #4]
 80125a0:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80125a4:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 80125a6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80125aa:	4798      	blx	r3
 80125ac:	6863      	ldr	r3, [r4, #4]
 80125ae:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80125b2:	4618      	mov	r0, r3
 80125b4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80125b8:	4798      	blx	r3
 80125ba:	2300      	movs	r3, #0
 80125bc:	e9c4 3300 	strd	r3, r3, [r4]
 80125c0:	f04f 0901 	mov.w	r9, #1
 80125c4:	f1ba 0f00 	cmp.w	sl, #0
 80125c8:	d125      	bne.n	8012616 <rcl_node_init+0x236>
 80125ca:	e001      	b.n	80125d0 <rcl_node_init+0x1f0>
 80125cc:	f04f 090b 	mov.w	r9, #11
 80125d0:	4648      	mov	r0, r9
 80125d2:	b029      	add	sp, #164	@ 0xa4
 80125d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80125d8:	f04f 0965 	mov.w	r9, #101	@ 0x65
 80125dc:	e7f8      	b.n	80125d0 <rcl_node_init+0x1f0>
 80125de:	782b      	ldrb	r3, [r5, #0]
 80125e0:	2b2f      	cmp	r3, #47	@ 0x2f
 80125e2:	f43f af42 	beq.w	801246a <rcl_node_init+0x8a>
 80125e6:	9503      	str	r5, [sp, #12]
 80125e8:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80125ec:	9300      	str	r3, [sp, #0]
 80125ee:	4b1e      	ldr	r3, [pc, #120]	@ (8012668 <rcl_node_init+0x288>)
 80125f0:	9302      	str	r3, [sp, #8]
 80125f2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80125f6:	9301      	str	r3, [sp, #4]
 80125f8:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 80125fc:	f002 fa08 	bl	8014a10 <rcutils_format_string_limit>
 8012600:	4605      	mov	r5, r0
 8012602:	b340      	cbz	r0, 8012656 <rcl_node_init+0x276>
 8012604:	2200      	movs	r2, #0
 8012606:	a922      	add	r1, sp, #136	@ 0x88
 8012608:	9222      	str	r2, [sp, #136]	@ 0x88
 801260a:	f002 fe19 	bl	8015240 <rmw_validate_namespace>
 801260e:	4681      	mov	r9, r0
 8012610:	2800      	cmp	r0, #0
 8012612:	f43f af34 	beq.w	801247e <rcl_node_init+0x9e>
 8012616:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801261a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801261e:	4628      	mov	r0, r5
 8012620:	4798      	blx	r3
 8012622:	e7d5      	b.n	80125d0 <rcl_node_init+0x1f0>
 8012624:	f04f 0964 	mov.w	r9, #100	@ 0x64
 8012628:	4648      	mov	r0, r9
 801262a:	b029      	add	sp, #164	@ 0xa4
 801262c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012630:	f04f 090a 	mov.w	r9, #10
 8012634:	f1ba 0f00 	cmp.w	sl, #0
 8012638:	d1ed      	bne.n	8012616 <rcl_node_init+0x236>
 801263a:	e7c9      	b.n	80125d0 <rcl_node_init+0x1f0>
 801263c:	f002 fe70 	bl	8015320 <rmw_node_name_validation_result_string>
 8012640:	f04f 09c9 	mov.w	r9, #201	@ 0xc9
 8012644:	e7c4      	b.n	80125d0 <rcl_node_init+0x1f0>
 8012646:	f002 fe0d 	bl	8015264 <rmw_namespace_validation_result_string>
 801264a:	f04f 09ca 	mov.w	r9, #202	@ 0xca
 801264e:	f1ba 0f00 	cmp.w	sl, #0
 8012652:	d1e0      	bne.n	8012616 <rcl_node_init+0x236>
 8012654:	e7bc      	b.n	80125d0 <rcl_node_init+0x1f0>
 8012656:	f04f 090a 	mov.w	r9, #10
 801265a:	e7b9      	b.n	80125d0 <rcl_node_init+0x1f0>
 801265c:	0801b174 	.word	0x0801b174
 8012660:	0801ad34 	.word	0x0801ad34
 8012664:	0801b17c 	.word	0x0801b17c
 8012668:	0801b178 	.word	0x0801b178

0801266c <rcl_node_is_valid>:
 801266c:	b130      	cbz	r0, 801267c <rcl_node_is_valid+0x10>
 801266e:	6843      	ldr	r3, [r0, #4]
 8012670:	b123      	cbz	r3, 801267c <rcl_node_is_valid+0x10>
 8012672:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012674:	b113      	cbz	r3, 801267c <rcl_node_is_valid+0x10>
 8012676:	6800      	ldr	r0, [r0, #0]
 8012678:	f7ff bc1e 	b.w	8011eb8 <rcl_context_is_valid>
 801267c:	2000      	movs	r0, #0
 801267e:	4770      	bx	lr

08012680 <rcl_node_get_name>:
 8012680:	b120      	cbz	r0, 801268c <rcl_node_get_name+0xc>
 8012682:	6840      	ldr	r0, [r0, #4]
 8012684:	b110      	cbz	r0, 801268c <rcl_node_get_name+0xc>
 8012686:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8012688:	b100      	cbz	r0, 801268c <rcl_node_get_name+0xc>
 801268a:	6880      	ldr	r0, [r0, #8]
 801268c:	4770      	bx	lr
 801268e:	bf00      	nop

08012690 <rcl_node_get_namespace>:
 8012690:	b120      	cbz	r0, 801269c <rcl_node_get_namespace+0xc>
 8012692:	6840      	ldr	r0, [r0, #4]
 8012694:	b110      	cbz	r0, 801269c <rcl_node_get_namespace+0xc>
 8012696:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8012698:	b100      	cbz	r0, 801269c <rcl_node_get_namespace+0xc>
 801269a:	68c0      	ldr	r0, [r0, #12]
 801269c:	4770      	bx	lr
 801269e:	bf00      	nop

080126a0 <rcl_node_get_options>:
 80126a0:	b128      	cbz	r0, 80126ae <rcl_node_get_options+0xe>
 80126a2:	6840      	ldr	r0, [r0, #4]
 80126a4:	b118      	cbz	r0, 80126ae <rcl_node_get_options+0xe>
 80126a6:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 80126a8:	2b00      	cmp	r3, #0
 80126aa:	bf08      	it	eq
 80126ac:	2000      	moveq	r0, #0
 80126ae:	4770      	bx	lr

080126b0 <rcl_node_get_rmw_handle>:
 80126b0:	b110      	cbz	r0, 80126b8 <rcl_node_get_rmw_handle+0x8>
 80126b2:	6840      	ldr	r0, [r0, #4]
 80126b4:	b100      	cbz	r0, 80126b8 <rcl_node_get_rmw_handle+0x8>
 80126b6:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 80126b8:	4770      	bx	lr
 80126ba:	bf00      	nop

080126bc <rcl_node_get_default_options>:
 80126bc:	b510      	push	{r4, lr}
 80126be:	2268      	movs	r2, #104	@ 0x68
 80126c0:	4604      	mov	r4, r0
 80126c2:	2100      	movs	r1, #0
 80126c4:	f006 ff3b 	bl	801953e <memset>
 80126c8:	4620      	mov	r0, r4
 80126ca:	f7f8 fe97 	bl	800b3fc <rcutils_get_default_allocator>
 80126ce:	2301      	movs	r3, #1
 80126d0:	7523      	strb	r3, [r4, #20]
 80126d2:	4620      	mov	r0, r4
 80126d4:	bd10      	pop	{r4, pc}
 80126d6:	bf00      	nop

080126d8 <rcl_node_options_copy>:
 80126d8:	b1d0      	cbz	r0, 8012710 <rcl_node_options_copy+0x38>
 80126da:	b570      	push	{r4, r5, r6, lr}
 80126dc:	460c      	mov	r4, r1
 80126de:	b1a9      	cbz	r1, 801270c <rcl_node_options_copy+0x34>
 80126e0:	4288      	cmp	r0, r1
 80126e2:	4684      	mov	ip, r0
 80126e4:	d012      	beq.n	801270c <rcl_node_options_copy+0x34>
 80126e6:	4605      	mov	r5, r0
 80126e8:	8a86      	ldrh	r6, [r0, #20]
 80126ea:	468e      	mov	lr, r1
 80126ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80126ee:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80126f2:	682b      	ldr	r3, [r5, #0]
 80126f4:	f8ce 3000 	str.w	r3, [lr]
 80126f8:	f10c 0118 	add.w	r1, ip, #24
 80126fc:	2250      	movs	r2, #80	@ 0x50
 80126fe:	82a6      	strh	r6, [r4, #20]
 8012700:	f104 0018 	add.w	r0, r4, #24
 8012704:	f006 ff83 	bl	801960e <memcpy>
 8012708:	2000      	movs	r0, #0
 801270a:	bd70      	pop	{r4, r5, r6, pc}
 801270c:	200b      	movs	r0, #11
 801270e:	bd70      	pop	{r4, r5, r6, pc}
 8012710:	200b      	movs	r0, #11
 8012712:	4770      	bx	lr

08012714 <rcl_node_resolve_name>:
 8012714:	b082      	sub	sp, #8
 8012716:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801271a:	b091      	sub	sp, #68	@ 0x44
 801271c:	ac1a      	add	r4, sp, #104	@ 0x68
 801271e:	e884 000c 	stmia.w	r4, {r2, r3}
 8012722:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 8012726:	2800      	cmp	r0, #0
 8012728:	d03b      	beq.n	80127a2 <rcl_node_resolve_name+0x8e>
 801272a:	460c      	mov	r4, r1
 801272c:	4605      	mov	r5, r0
 801272e:	f7ff ffb7 	bl	80126a0 <rcl_node_get_options>
 8012732:	2800      	cmp	r0, #0
 8012734:	d037      	beq.n	80127a6 <rcl_node_resolve_name+0x92>
 8012736:	4628      	mov	r0, r5
 8012738:	f7ff ffa2 	bl	8012680 <rcl_node_get_name>
 801273c:	4606      	mov	r6, r0
 801273e:	4628      	mov	r0, r5
 8012740:	f7ff ffa6 	bl	8012690 <rcl_node_get_namespace>
 8012744:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 8012748:	4681      	mov	r9, r0
 801274a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801274e:	ad0b      	add	r5, sp, #44	@ 0x2c
 8012750:	46ac      	mov	ip, r5
 8012752:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012756:	f8de 3000 	ldr.w	r3, [lr]
 801275a:	f8cc 3000 	str.w	r3, [ip]
 801275e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8012760:	b1fb      	cbz	r3, 80127a2 <rcl_node_resolve_name+0x8e>
 8012762:	468a      	mov	sl, r1
 8012764:	f8dd b078 	ldr.w	fp, [sp, #120]	@ 0x78
 8012768:	f002 faaa 	bl	8014cc0 <rcutils_get_zero_initialized_string_map>
 801276c:	ab10      	add	r3, sp, #64	@ 0x40
 801276e:	9008      	str	r0, [sp, #32]
 8012770:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8012774:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8012778:	2100      	movs	r1, #0
 801277a:	e895 000c 	ldmia.w	r5, {r2, r3}
 801277e:	a808      	add	r0, sp, #32
 8012780:	f002 fb16 	bl	8014db0 <rcutils_string_map_init>
 8012784:	4607      	mov	r7, r0
 8012786:	b180      	cbz	r0, 80127aa <rcl_node_resolve_name+0x96>
 8012788:	f7f8 fe54 	bl	800b434 <rcutils_get_error_string>
 801278c:	f7f8 fe68 	bl	800b460 <rcutils_reset_error>
 8012790:	2f0a      	cmp	r7, #10
 8012792:	bf18      	it	ne
 8012794:	2701      	movne	r7, #1
 8012796:	4638      	mov	r0, r7
 8012798:	b011      	add	sp, #68	@ 0x44
 801279a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801279e:	b002      	add	sp, #8
 80127a0:	4770      	bx	lr
 80127a2:	270b      	movs	r7, #11
 80127a4:	e7f7      	b.n	8012796 <rcl_node_resolve_name+0x82>
 80127a6:	2701      	movs	r7, #1
 80127a8:	e7f5      	b.n	8012796 <rcl_node_resolve_name+0x82>
 80127aa:	9009      	str	r0, [sp, #36]	@ 0x24
 80127ac:	9007      	str	r0, [sp, #28]
 80127ae:	a808      	add	r0, sp, #32
 80127b0:	f005 fe08 	bl	80183c4 <rcl_get_default_topic_name_substitutions>
 80127b4:	4607      	mov	r7, r0
 80127b6:	b1a8      	cbz	r0, 80127e4 <rcl_node_resolve_name+0xd0>
 80127b8:	280a      	cmp	r0, #10
 80127ba:	9c07      	ldr	r4, [sp, #28]
 80127bc:	d000      	beq.n	80127c0 <rcl_node_resolve_name+0xac>
 80127be:	2701      	movs	r7, #1
 80127c0:	a808      	add	r0, sp, #32
 80127c2:	f002 fb35 	bl	8014e30 <rcutils_string_map_fini>
 80127c6:	2800      	cmp	r0, #0
 80127c8:	d13d      	bne.n	8012846 <rcl_node_resolve_name+0x132>
 80127ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80127cc:	4659      	mov	r1, fp
 80127ce:	47d0      	blx	sl
 80127d0:	4659      	mov	r1, fp
 80127d2:	4620      	mov	r0, r4
 80127d4:	47d0      	blx	sl
 80127d6:	f1b8 0f00 	cmp.w	r8, #0
 80127da:	d0dc      	beq.n	8012796 <rcl_node_resolve_name+0x82>
 80127dc:	2f67      	cmp	r7, #103	@ 0x67
 80127de:	bf08      	it	eq
 80127e0:	2768      	moveq	r7, #104	@ 0x68
 80127e2:	e7d8      	b.n	8012796 <rcl_node_resolve_name+0x82>
 80127e4:	ab09      	add	r3, sp, #36	@ 0x24
 80127e6:	9305      	str	r3, [sp, #20]
 80127e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80127ea:	46ec      	mov	ip, sp
 80127ec:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80127f0:	682b      	ldr	r3, [r5, #0]
 80127f2:	f8cc 3000 	str.w	r3, [ip]
 80127f6:	464a      	mov	r2, r9
 80127f8:	4631      	mov	r1, r6
 80127fa:	4620      	mov	r0, r4
 80127fc:	ab08      	add	r3, sp, #32
 80127fe:	f005 fc83 	bl	8018108 <rcl_expand_topic_name>
 8012802:	4607      	mov	r7, r0
 8012804:	b9b8      	cbnz	r0, 8012836 <rcl_node_resolve_name+0x122>
 8012806:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8012808:	9009      	str	r0, [sp, #36]	@ 0x24
 801280a:	4602      	mov	r2, r0
 801280c:	a90a      	add	r1, sp, #40	@ 0x28
 801280e:	4620      	mov	r0, r4
 8012810:	f002 fc52 	bl	80150b8 <rmw_validate_full_topic_name>
 8012814:	b988      	cbnz	r0, 801283a <rcl_node_resolve_name+0x126>
 8012816:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8012818:	b9d5      	cbnz	r5, 8012850 <rcl_node_resolve_name+0x13c>
 801281a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801281c:	a808      	add	r0, sp, #32
 801281e:	601c      	str	r4, [r3, #0]
 8012820:	f002 fb06 	bl	8014e30 <rcutils_string_map_fini>
 8012824:	4607      	mov	r7, r0
 8012826:	b1a8      	cbz	r0, 8012854 <rcl_node_resolve_name+0x140>
 8012828:	f7f8 fe04 	bl	800b434 <rcutils_get_error_string>
 801282c:	462c      	mov	r4, r5
 801282e:	f7f8 fe17 	bl	800b460 <rcutils_reset_error>
 8012832:	2701      	movs	r7, #1
 8012834:	e7c9      	b.n	80127ca <rcl_node_resolve_name+0xb6>
 8012836:	9c07      	ldr	r4, [sp, #28]
 8012838:	e7c2      	b.n	80127c0 <rcl_node_resolve_name+0xac>
 801283a:	f7f8 fdfb 	bl	800b434 <rcutils_get_error_string>
 801283e:	2701      	movs	r7, #1
 8012840:	f7f8 fe0e 	bl	800b460 <rcutils_reset_error>
 8012844:	e7bc      	b.n	80127c0 <rcl_node_resolve_name+0xac>
 8012846:	f7f8 fdf5 	bl	800b434 <rcutils_get_error_string>
 801284a:	f7f8 fe09 	bl	800b460 <rcutils_reset_error>
 801284e:	e7bc      	b.n	80127ca <rcl_node_resolve_name+0xb6>
 8012850:	2767      	movs	r7, #103	@ 0x67
 8012852:	e7b5      	b.n	80127c0 <rcl_node_resolve_name+0xac>
 8012854:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012856:	4659      	mov	r1, fp
 8012858:	47d0      	blx	sl
 801285a:	4659      	mov	r1, fp
 801285c:	4638      	mov	r0, r7
 801285e:	47d0      	blx	sl
 8012860:	e799      	b.n	8012796 <rcl_node_resolve_name+0x82>
 8012862:	bf00      	nop

08012864 <exact_match_lookup>:
 8012864:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012866:	f102 0708 	add.w	r7, r2, #8
 801286a:	460b      	mov	r3, r1
 801286c:	4614      	mov	r4, r2
 801286e:	4606      	mov	r6, r0
 8012870:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8012874:	b085      	sub	sp, #20
 8012876:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801287a:	4618      	mov	r0, r3
 801287c:	4919      	ldr	r1, [pc, #100]	@ (80128e4 <exact_match_lookup+0x80>)
 801287e:	e894 000c 	ldmia.w	r4, {r2, r3}
 8012882:	f002 f8b7 	bl	80149f4 <rcutils_join_path>
 8012886:	7833      	ldrb	r3, [r6, #0]
 8012888:	2b2f      	cmp	r3, #47	@ 0x2f
 801288a:	4605      	mov	r5, r0
 801288c:	d023      	beq.n	80128d6 <exact_match_lookup+0x72>
 801288e:	f104 030c 	add.w	r3, r4, #12
 8012892:	e893 0003 	ldmia.w	r3, {r0, r1}
 8012896:	e88d 0003 	stmia.w	sp, {r0, r1}
 801289a:	1c70      	adds	r0, r6, #1
 801289c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80128a0:	f002 f8ae 	bl	8014a00 <rcutils_to_native_path>
 80128a4:	4606      	mov	r6, r0
 80128a6:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80128aa:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80128ae:	4631      	mov	r1, r6
 80128b0:	e894 000c 	ldmia.w	r4, {r2, r3}
 80128b4:	4628      	mov	r0, r5
 80128b6:	f002 f89d 	bl	80149f4 <rcutils_join_path>
 80128ba:	6862      	ldr	r2, [r4, #4]
 80128bc:	6921      	ldr	r1, [r4, #16]
 80128be:	4603      	mov	r3, r0
 80128c0:	4630      	mov	r0, r6
 80128c2:	461e      	mov	r6, r3
 80128c4:	4790      	blx	r2
 80128c6:	4628      	mov	r0, r5
 80128c8:	6863      	ldr	r3, [r4, #4]
 80128ca:	6921      	ldr	r1, [r4, #16]
 80128cc:	4798      	blx	r3
 80128ce:	4635      	mov	r5, r6
 80128d0:	4628      	mov	r0, r5
 80128d2:	b005      	add	sp, #20
 80128d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80128d6:	7873      	ldrb	r3, [r6, #1]
 80128d8:	2b00      	cmp	r3, #0
 80128da:	d1d8      	bne.n	801288e <exact_match_lookup+0x2a>
 80128dc:	4628      	mov	r0, r5
 80128de:	b005      	add	sp, #20
 80128e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80128e2:	bf00      	nop
 80128e4:	0801b1c8 	.word	0x0801b1c8

080128e8 <rcl_get_secure_root>:
 80128e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80128ec:	b085      	sub	sp, #20
 80128ee:	b168      	cbz	r0, 801290c <rcl_get_secure_root+0x24>
 80128f0:	4607      	mov	r7, r0
 80128f2:	4608      	mov	r0, r1
 80128f4:	460c      	mov	r4, r1
 80128f6:	f7f8 fd8f 	bl	800b418 <rcutils_allocator_is_valid>
 80128fa:	b138      	cbz	r0, 801290c <rcl_get_secure_root+0x24>
 80128fc:	2300      	movs	r3, #0
 80128fe:	482d      	ldr	r0, [pc, #180]	@ (80129b4 <rcl_get_secure_root+0xcc>)
 8012900:	9303      	str	r3, [sp, #12]
 8012902:	a903      	add	r1, sp, #12
 8012904:	f002 f85c 	bl	80149c0 <rcutils_get_env>
 8012908:	4605      	mov	r5, r0
 801290a:	b120      	cbz	r0, 8012916 <rcl_get_secure_root+0x2e>
 801290c:	2500      	movs	r5, #0
 801290e:	4628      	mov	r0, r5
 8012910:	b005      	add	sp, #20
 8012912:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012916:	9b03      	ldr	r3, [sp, #12]
 8012918:	781a      	ldrb	r2, [r3, #0]
 801291a:	2a00      	cmp	r2, #0
 801291c:	d0f6      	beq.n	801290c <rcl_get_secure_root+0x24>
 801291e:	f104 090c 	add.w	r9, r4, #12
 8012922:	e899 0003 	ldmia.w	r9, {r0, r1}
 8012926:	e88d 0003 	stmia.w	sp, {r0, r1}
 801292a:	4618      	mov	r0, r3
 801292c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8012930:	f002 f988 	bl	8014c44 <rcutils_strdup>
 8012934:	4680      	mov	r8, r0
 8012936:	2800      	cmp	r0, #0
 8012938:	d0e8      	beq.n	801290c <rcl_get_secure_root+0x24>
 801293a:	481f      	ldr	r0, [pc, #124]	@ (80129b8 <rcl_get_secure_root+0xd0>)
 801293c:	9503      	str	r5, [sp, #12]
 801293e:	a903      	add	r1, sp, #12
 8012940:	f002 f83e 	bl	80149c0 <rcutils_get_env>
 8012944:	b160      	cbz	r0, 8012960 <rcl_get_secure_root+0x78>
 8012946:	2600      	movs	r6, #0
 8012948:	6863      	ldr	r3, [r4, #4]
 801294a:	6921      	ldr	r1, [r4, #16]
 801294c:	4630      	mov	r0, r6
 801294e:	4798      	blx	r3
 8012950:	4640      	mov	r0, r8
 8012952:	6863      	ldr	r3, [r4, #4]
 8012954:	6921      	ldr	r1, [r4, #16]
 8012956:	4798      	blx	r3
 8012958:	4628      	mov	r0, r5
 801295a:	b005      	add	sp, #20
 801295c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012960:	9b03      	ldr	r3, [sp, #12]
 8012962:	781e      	ldrb	r6, [r3, #0]
 8012964:	b1f6      	cbz	r6, 80129a4 <rcl_get_secure_root+0xbc>
 8012966:	e899 0003 	ldmia.w	r9, {r0, r1}
 801296a:	e88d 0003 	stmia.w	sp, {r0, r1}
 801296e:	4618      	mov	r0, r3
 8012970:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8012974:	f002 f966 	bl	8014c44 <rcutils_strdup>
 8012978:	4606      	mov	r6, r0
 801297a:	2800      	cmp	r0, #0
 801297c:	d0e3      	beq.n	8012946 <rcl_get_secure_root+0x5e>
 801297e:	4622      	mov	r2, r4
 8012980:	4641      	mov	r1, r8
 8012982:	f7ff ff6f 	bl	8012864 <exact_match_lookup>
 8012986:	4605      	mov	r5, r0
 8012988:	2d00      	cmp	r5, #0
 801298a:	d0dd      	beq.n	8012948 <rcl_get_secure_root+0x60>
 801298c:	4628      	mov	r0, r5
 801298e:	f002 f82f 	bl	80149f0 <rcutils_is_directory>
 8012992:	4603      	mov	r3, r0
 8012994:	2800      	cmp	r0, #0
 8012996:	d1d7      	bne.n	8012948 <rcl_get_secure_root+0x60>
 8012998:	4628      	mov	r0, r5
 801299a:	6921      	ldr	r1, [r4, #16]
 801299c:	461d      	mov	r5, r3
 801299e:	6863      	ldr	r3, [r4, #4]
 80129a0:	4798      	blx	r3
 80129a2:	e7d1      	b.n	8012948 <rcl_get_secure_root+0x60>
 80129a4:	4622      	mov	r2, r4
 80129a6:	4638      	mov	r0, r7
 80129a8:	4641      	mov	r1, r8
 80129aa:	f7ff ff5b 	bl	8012864 <exact_match_lookup>
 80129ae:	4605      	mov	r5, r0
 80129b0:	e7ea      	b.n	8012988 <rcl_get_secure_root+0xa0>
 80129b2:	bf00      	nop
 80129b4:	0801b1d4 	.word	0x0801b1d4
 80129b8:	0801b1ec 	.word	0x0801b1ec

080129bc <rcl_get_security_options_from_environment>:
 80129bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80129c0:	b082      	sub	sp, #8
 80129c2:	2300      	movs	r3, #0
 80129c4:	4606      	mov	r6, r0
 80129c6:	460f      	mov	r7, r1
 80129c8:	4820      	ldr	r0, [pc, #128]	@ (8012a4c <rcl_get_security_options_from_environment+0x90>)
 80129ca:	9301      	str	r3, [sp, #4]
 80129cc:	a901      	add	r1, sp, #4
 80129ce:	4690      	mov	r8, r2
 80129d0:	f001 fff6 	bl	80149c0 <rcutils_get_env>
 80129d4:	b120      	cbz	r0, 80129e0 <rcl_get_security_options_from_environment+0x24>
 80129d6:	2501      	movs	r5, #1
 80129d8:	4628      	mov	r0, r5
 80129da:	b002      	add	sp, #8
 80129dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80129e0:	491b      	ldr	r1, [pc, #108]	@ (8012a50 <rcl_get_security_options_from_environment+0x94>)
 80129e2:	4604      	mov	r4, r0
 80129e4:	9801      	ldr	r0, [sp, #4]
 80129e6:	f7ed fc13 	bl	8000210 <strcmp>
 80129ea:	4605      	mov	r5, r0
 80129ec:	b9e8      	cbnz	r0, 8012a2a <rcl_get_security_options_from_environment+0x6e>
 80129ee:	9001      	str	r0, [sp, #4]
 80129f0:	f1b8 0f00 	cmp.w	r8, #0
 80129f4:	d020      	beq.n	8012a38 <rcl_get_security_options_from_environment+0x7c>
 80129f6:	4817      	ldr	r0, [pc, #92]	@ (8012a54 <rcl_get_security_options_from_environment+0x98>)
 80129f8:	a901      	add	r1, sp, #4
 80129fa:	f001 ffe1 	bl	80149c0 <rcutils_get_env>
 80129fe:	2800      	cmp	r0, #0
 8012a00:	d1e9      	bne.n	80129d6 <rcl_get_security_options_from_environment+0x1a>
 8012a02:	4915      	ldr	r1, [pc, #84]	@ (8012a58 <rcl_get_security_options_from_environment+0x9c>)
 8012a04:	9801      	ldr	r0, [sp, #4]
 8012a06:	f7ed fc03 	bl	8000210 <strcmp>
 8012a0a:	fab0 f080 	clz	r0, r0
 8012a0e:	0940      	lsrs	r0, r0, #5
 8012a10:	f888 0000 	strb.w	r0, [r8]
 8012a14:	4639      	mov	r1, r7
 8012a16:	4630      	mov	r0, r6
 8012a18:	f7ff ff66 	bl	80128e8 <rcl_get_secure_root>
 8012a1c:	b170      	cbz	r0, 8012a3c <rcl_get_security_options_from_environment+0x80>
 8012a1e:	f8c8 0004 	str.w	r0, [r8, #4]
 8012a22:	4628      	mov	r0, r5
 8012a24:	b002      	add	sp, #8
 8012a26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a2a:	4625      	mov	r5, r4
 8012a2c:	4628      	mov	r0, r5
 8012a2e:	f888 4000 	strb.w	r4, [r8]
 8012a32:	b002      	add	sp, #8
 8012a34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a38:	250b      	movs	r5, #11
 8012a3a:	e7cd      	b.n	80129d8 <rcl_get_security_options_from_environment+0x1c>
 8012a3c:	f898 5000 	ldrb.w	r5, [r8]
 8012a40:	f1a5 0501 	sub.w	r5, r5, #1
 8012a44:	fab5 f585 	clz	r5, r5
 8012a48:	096d      	lsrs	r5, r5, #5
 8012a4a:	e7c5      	b.n	80129d8 <rcl_get_security_options_from_environment+0x1c>
 8012a4c:	0801b18c 	.word	0x0801b18c
 8012a50:	0801b1a0 	.word	0x0801b1a0
 8012a54:	0801b1a8 	.word	0x0801b1a8
 8012a58:	0801b1c0 	.word	0x0801b1c0

08012a5c <rcl_service_get_rmw_handle>:
 8012a5c:	b118      	cbz	r0, 8012a66 <rcl_service_get_rmw_handle+0xa>
 8012a5e:	6800      	ldr	r0, [r0, #0]
 8012a60:	b108      	cbz	r0, 8012a66 <rcl_service_get_rmw_handle+0xa>
 8012a62:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8012a66:	4770      	bx	lr

08012a68 <rcl_take_request>:
 8012a68:	b570      	push	{r4, r5, r6, lr}
 8012a6a:	468e      	mov	lr, r1
 8012a6c:	460c      	mov	r4, r1
 8012a6e:	4616      	mov	r6, r2
 8012a70:	4605      	mov	r5, r0
 8012a72:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012a76:	b08c      	sub	sp, #48	@ 0x30
 8012a78:	f10d 0c18 	add.w	ip, sp, #24
 8012a7c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012a80:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8012a84:	e88c 0003 	stmia.w	ip, {r0, r1}
 8012a88:	b30d      	cbz	r5, 8012ace <rcl_take_request+0x66>
 8012a8a:	682b      	ldr	r3, [r5, #0]
 8012a8c:	b1fb      	cbz	r3, 8012ace <rcl_take_request+0x66>
 8012a8e:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8012a92:	b1e0      	cbz	r0, 8012ace <rcl_take_request+0x66>
 8012a94:	b336      	cbz	r6, 8012ae4 <rcl_take_request+0x7c>
 8012a96:	2300      	movs	r3, #0
 8012a98:	f88d 3007 	strb.w	r3, [sp, #7]
 8012a9c:	4632      	mov	r2, r6
 8012a9e:	f10d 0307 	add.w	r3, sp, #7
 8012aa2:	a902      	add	r1, sp, #8
 8012aa4:	f003 f8ea 	bl	8015c7c <rmw_take_request>
 8012aa8:	4605      	mov	r5, r0
 8012aaa:	b198      	cbz	r0, 8012ad4 <rcl_take_request+0x6c>
 8012aac:	280a      	cmp	r0, #10
 8012aae:	bf18      	it	ne
 8012ab0:	2501      	movne	r5, #1
 8012ab2:	f10d 0e18 	add.w	lr, sp, #24
 8012ab6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012aba:	46a4      	mov	ip, r4
 8012abc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012ac0:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8012ac4:	e88c 0003 	stmia.w	ip, {r0, r1}
 8012ac8:	4628      	mov	r0, r5
 8012aca:	b00c      	add	sp, #48	@ 0x30
 8012acc:	bd70      	pop	{r4, r5, r6, pc}
 8012ace:	f44f 7516 	mov.w	r5, #600	@ 0x258
 8012ad2:	e7ee      	b.n	8012ab2 <rcl_take_request+0x4a>
 8012ad4:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8012ad8:	f240 2359 	movw	r3, #601	@ 0x259
 8012adc:	2a00      	cmp	r2, #0
 8012ade:	bf08      	it	eq
 8012ae0:	461d      	moveq	r5, r3
 8012ae2:	e7e6      	b.n	8012ab2 <rcl_take_request+0x4a>
 8012ae4:	250b      	movs	r5, #11
 8012ae6:	e7e4      	b.n	8012ab2 <rcl_take_request+0x4a>

08012ae8 <rcl_send_response>:
 8012ae8:	b170      	cbz	r0, 8012b08 <rcl_send_response+0x20>
 8012aea:	6800      	ldr	r0, [r0, #0]
 8012aec:	b160      	cbz	r0, 8012b08 <rcl_send_response+0x20>
 8012aee:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8012af2:	b148      	cbz	r0, 8012b08 <rcl_send_response+0x20>
 8012af4:	b159      	cbz	r1, 8012b0e <rcl_send_response+0x26>
 8012af6:	b510      	push	{r4, lr}
 8012af8:	b15a      	cbz	r2, 8012b12 <rcl_send_response+0x2a>
 8012afa:	f003 f91d 	bl	8015d38 <rmw_send_response>
 8012afe:	b110      	cbz	r0, 8012b06 <rcl_send_response+0x1e>
 8012b00:	2802      	cmp	r0, #2
 8012b02:	bf18      	it	ne
 8012b04:	2001      	movne	r0, #1
 8012b06:	bd10      	pop	{r4, pc}
 8012b08:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8012b0c:	4770      	bx	lr
 8012b0e:	200b      	movs	r0, #11
 8012b10:	4770      	bx	lr
 8012b12:	200b      	movs	r0, #11
 8012b14:	bd10      	pop	{r4, pc}
 8012b16:	bf00      	nop

08012b18 <rcl_service_is_valid>:
 8012b18:	b130      	cbz	r0, 8012b28 <rcl_service_is_valid+0x10>
 8012b1a:	6800      	ldr	r0, [r0, #0]
 8012b1c:	b120      	cbz	r0, 8012b28 <rcl_service_is_valid+0x10>
 8012b1e:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8012b22:	3800      	subs	r0, #0
 8012b24:	bf18      	it	ne
 8012b26:	2001      	movne	r0, #1
 8012b28:	4770      	bx	lr
 8012b2a:	bf00      	nop

08012b2c <rcl_get_zero_initialized_subscription>:
 8012b2c:	4b01      	ldr	r3, [pc, #4]	@ (8012b34 <rcl_get_zero_initialized_subscription+0x8>)
 8012b2e:	6818      	ldr	r0, [r3, #0]
 8012b30:	4770      	bx	lr
 8012b32:	bf00      	nop
 8012b34:	0801b20c 	.word	0x0801b20c

08012b38 <rcl_subscription_init>:
 8012b38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012b3c:	b089      	sub	sp, #36	@ 0x24
 8012b3e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8012b40:	b1d6      	cbz	r6, 8012b78 <rcl_subscription_init+0x40>
 8012b42:	f106 0950 	add.w	r9, r6, #80	@ 0x50
 8012b46:	4604      	mov	r4, r0
 8012b48:	4648      	mov	r0, r9
 8012b4a:	460d      	mov	r5, r1
 8012b4c:	4690      	mov	r8, r2
 8012b4e:	461f      	mov	r7, r3
 8012b50:	f7f8 fc62 	bl	800b418 <rcutils_allocator_is_valid>
 8012b54:	b180      	cbz	r0, 8012b78 <rcl_subscription_init+0x40>
 8012b56:	b17c      	cbz	r4, 8012b78 <rcl_subscription_init+0x40>
 8012b58:	4628      	mov	r0, r5
 8012b5a:	f7ff fd87 	bl	801266c <rcl_node_is_valid>
 8012b5e:	2800      	cmp	r0, #0
 8012b60:	d054      	beq.n	8012c0c <rcl_subscription_init+0xd4>
 8012b62:	f1b8 0f00 	cmp.w	r8, #0
 8012b66:	d007      	beq.n	8012b78 <rcl_subscription_init+0x40>
 8012b68:	b137      	cbz	r7, 8012b78 <rcl_subscription_init+0x40>
 8012b6a:	6823      	ldr	r3, [r4, #0]
 8012b6c:	b14b      	cbz	r3, 8012b82 <rcl_subscription_init+0x4a>
 8012b6e:	2764      	movs	r7, #100	@ 0x64
 8012b70:	4638      	mov	r0, r7
 8012b72:	b009      	add	sp, #36	@ 0x24
 8012b74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012b78:	270b      	movs	r7, #11
 8012b7a:	4638      	mov	r0, r7
 8012b7c:	b009      	add	sp, #36	@ 0x24
 8012b7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012b82:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8012b86:	aa07      	add	r2, sp, #28
 8012b88:	9205      	str	r2, [sp, #20]
 8012b8a:	9307      	str	r3, [sp, #28]
 8012b8c:	f106 0358 	add.w	r3, r6, #88	@ 0x58
 8012b90:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012b94:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8012b98:	4639      	mov	r1, r7
 8012b9a:	e899 000c 	ldmia.w	r9, {r2, r3}
 8012b9e:	4628      	mov	r0, r5
 8012ba0:	f7ff fdb8 	bl	8012714 <rcl_node_resolve_name>
 8012ba4:	4607      	mov	r7, r0
 8012ba6:	2800      	cmp	r0, #0
 8012ba8:	d15f      	bne.n	8012c6a <rcl_subscription_init+0x132>
 8012baa:	e9d6 3217 	ldrd	r3, r2, [r6, #92]	@ 0x5c
 8012bae:	21c8      	movs	r1, #200	@ 0xc8
 8012bb0:	2001      	movs	r0, #1
 8012bb2:	4798      	blx	r3
 8012bb4:	6020      	str	r0, [r4, #0]
 8012bb6:	2800      	cmp	r0, #0
 8012bb8:	d05d      	beq.n	8012c76 <rcl_subscription_init+0x13e>
 8012bba:	4628      	mov	r0, r5
 8012bbc:	f7ff fd78 	bl	80126b0 <rcl_node_get_rmw_handle>
 8012bc0:	f106 0364 	add.w	r3, r6, #100	@ 0x64
 8012bc4:	9300      	str	r3, [sp, #0]
 8012bc6:	9a07      	ldr	r2, [sp, #28]
 8012bc8:	6827      	ldr	r7, [r4, #0]
 8012bca:	4641      	mov	r1, r8
 8012bcc:	4633      	mov	r3, r6
 8012bce:	f003 f99d 	bl	8015f0c <rmw_create_subscription>
 8012bd2:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0
 8012bd6:	6827      	ldr	r7, [r4, #0]
 8012bd8:	f8d7 00c0 	ldr.w	r0, [r7, #192]	@ 0xc0
 8012bdc:	b348      	cbz	r0, 8012c32 <rcl_subscription_init+0xfa>
 8012bde:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 8012be2:	f003 fa75 	bl	80160d0 <rmw_subscription_get_actual_qos>
 8012be6:	4607      	mov	r7, r0
 8012be8:	b9a8      	cbnz	r0, 8012c16 <rcl_subscription_init+0xde>
 8012bea:	6820      	ldr	r0, [r4, #0]
 8012bec:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 8012bf0:	f880 30b8 	strb.w	r3, [r0, #184]	@ 0xb8
 8012bf4:	2270      	movs	r2, #112	@ 0x70
 8012bf6:	4631      	mov	r1, r6
 8012bf8:	f006 fd09 	bl	801960e <memcpy>
 8012bfc:	9807      	ldr	r0, [sp, #28]
 8012bfe:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 8012c00:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 8012c02:	4798      	blx	r3
 8012c04:	4638      	mov	r0, r7
 8012c06:	b009      	add	sp, #36	@ 0x24
 8012c08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012c0c:	27c8      	movs	r7, #200	@ 0xc8
 8012c0e:	4638      	mov	r0, r7
 8012c10:	b009      	add	sp, #36	@ 0x24
 8012c12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012c16:	6827      	ldr	r7, [r4, #0]
 8012c18:	b32f      	cbz	r7, 8012c66 <rcl_subscription_init+0x12e>
 8012c1a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8012c1e:	b14b      	cbz	r3, 8012c34 <rcl_subscription_init+0xfc>
 8012c20:	4628      	mov	r0, r5
 8012c22:	f7ff fd45 	bl	80126b0 <rcl_node_get_rmw_handle>
 8012c26:	6823      	ldr	r3, [r4, #0]
 8012c28:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8012c2c:	f003 fa60 	bl	80160f0 <rmw_destroy_subscription>
 8012c30:	6827      	ldr	r7, [r4, #0]
 8012c32:	b197      	cbz	r7, 8012c5a <rcl_subscription_init+0x122>
 8012c34:	f107 0550 	add.w	r5, r7, #80	@ 0x50
 8012c38:	4628      	mov	r0, r5
 8012c3a:	f7f8 fbed 	bl	800b418 <rcutils_allocator_is_valid>
 8012c3e:	b158      	cbz	r0, 8012c58 <rcl_subscription_init+0x120>
 8012c40:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8012c42:	b148      	cbz	r0, 8012c58 <rcl_subscription_init+0x120>
 8012c44:	4629      	mov	r1, r5
 8012c46:	f002 f98b 	bl	8014f60 <rmw_subscription_content_filter_options_fini>
 8012c4a:	4605      	mov	r5, r0
 8012c4c:	b9b8      	cbnz	r0, 8012c7e <rcl_subscription_init+0x146>
 8012c4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012c50:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8012c52:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8012c54:	4798      	blx	r3
 8012c56:	66fd      	str	r5, [r7, #108]	@ 0x6c
 8012c58:	6827      	ldr	r7, [r4, #0]
 8012c5a:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 8012c5c:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 8012c5e:	4638      	mov	r0, r7
 8012c60:	4798      	blx	r3
 8012c62:	2300      	movs	r3, #0
 8012c64:	6023      	str	r3, [r4, #0]
 8012c66:	2701      	movs	r7, #1
 8012c68:	e7c8      	b.n	8012bfc <rcl_subscription_init+0xc4>
 8012c6a:	2867      	cmp	r0, #103	@ 0x67
 8012c6c:	d0c6      	beq.n	8012bfc <rcl_subscription_init+0xc4>
 8012c6e:	2869      	cmp	r0, #105	@ 0x69
 8012c70:	d003      	beq.n	8012c7a <rcl_subscription_init+0x142>
 8012c72:	280a      	cmp	r0, #10
 8012c74:	d1f7      	bne.n	8012c66 <rcl_subscription_init+0x12e>
 8012c76:	270a      	movs	r7, #10
 8012c78:	e7c0      	b.n	8012bfc <rcl_subscription_init+0xc4>
 8012c7a:	2767      	movs	r7, #103	@ 0x67
 8012c7c:	e7be      	b.n	8012bfc <rcl_subscription_init+0xc4>
 8012c7e:	f7ff f8fd 	bl	8011e7c <rcl_convert_rmw_ret_to_rcl_ret>
 8012c82:	6827      	ldr	r7, [r4, #0]
 8012c84:	e7e9      	b.n	8012c5a <rcl_subscription_init+0x122>
 8012c86:	bf00      	nop

08012c88 <rcl_subscription_get_default_options>:
 8012c88:	b570      	push	{r4, r5, r6, lr}
 8012c8a:	4d14      	ldr	r5, [pc, #80]	@ (8012cdc <rcl_subscription_get_default_options+0x54>)
 8012c8c:	4914      	ldr	r1, [pc, #80]	@ (8012ce0 <rcl_subscription_get_default_options+0x58>)
 8012c8e:	b08a      	sub	sp, #40	@ 0x28
 8012c90:	4604      	mov	r4, r0
 8012c92:	2250      	movs	r2, #80	@ 0x50
 8012c94:	4628      	mov	r0, r5
 8012c96:	f006 fcba 	bl	801960e <memcpy>
 8012c9a:	a804      	add	r0, sp, #16
 8012c9c:	f7f8 fbae 	bl	800b3fc <rcutils_get_default_allocator>
 8012ca0:	f10d 0c10 	add.w	ip, sp, #16
 8012ca4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012ca8:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 8012cac:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8012cb0:	466e      	mov	r6, sp
 8012cb2:	f8dc 3000 	ldr.w	r3, [ip]
 8012cb6:	f8ce 3000 	str.w	r3, [lr]
 8012cba:	4630      	mov	r0, r6
 8012cbc:	f002 f96a 	bl	8014f94 <rmw_get_default_subscription_options>
 8012cc0:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8012cc4:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 8012cc8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8012ccc:	2270      	movs	r2, #112	@ 0x70
 8012cce:	4629      	mov	r1, r5
 8012cd0:	4620      	mov	r0, r4
 8012cd2:	f006 fc9c 	bl	801960e <memcpy>
 8012cd6:	4620      	mov	r0, r4
 8012cd8:	b00a      	add	sp, #40	@ 0x28
 8012cda:	bd70      	pop	{r4, r5, r6, pc}
 8012cdc:	200153e8 	.word	0x200153e8
 8012ce0:	0801b210 	.word	0x0801b210

08012ce4 <rcl_take>:
 8012ce4:	2800      	cmp	r0, #0
 8012ce6:	d04a      	beq.n	8012d7e <rcl_take+0x9a>
 8012ce8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012cec:	4604      	mov	r4, r0
 8012cee:	6800      	ldr	r0, [r0, #0]
 8012cf0:	b0a4      	sub	sp, #144	@ 0x90
 8012cf2:	2800      	cmp	r0, #0
 8012cf4:	d03b      	beq.n	8012d6e <rcl_take+0x8a>
 8012cf6:	461f      	mov	r7, r3
 8012cf8:	f8d0 30c0 	ldr.w	r3, [r0, #192]	@ 0xc0
 8012cfc:	2b00      	cmp	r3, #0
 8012cfe:	d036      	beq.n	8012d6e <rcl_take+0x8a>
 8012d00:	460e      	mov	r6, r1
 8012d02:	2900      	cmp	r1, #0
 8012d04:	d039      	beq.n	8012d7a <rcl_take+0x96>
 8012d06:	4615      	mov	r5, r2
 8012d08:	2a00      	cmp	r2, #0
 8012d0a:	d03c      	beq.n	8012d86 <rcl_take+0xa2>
 8012d0c:	a802      	add	r0, sp, #8
 8012d0e:	f002 f9cb 	bl	80150a8 <rmw_get_zero_initialized_message_info>
 8012d12:	f10d 0c08 	add.w	ip, sp, #8
 8012d16:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012d1a:	46ae      	mov	lr, r5
 8012d1c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8012d20:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012d24:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8012d28:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012d2c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8012d30:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8012d34:	f04f 0800 	mov.w	r8, #0
 8012d38:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8012d3c:	f88d 804f 	strb.w	r8, [sp, #79]	@ 0x4f
 8012d40:	6822      	ldr	r2, [r4, #0]
 8012d42:	462b      	mov	r3, r5
 8012d44:	f8d2 00c0 	ldr.w	r0, [r2, #192]	@ 0xc0
 8012d48:	9700      	str	r7, [sp, #0]
 8012d4a:	f10d 024f 	add.w	r2, sp, #79	@ 0x4f
 8012d4e:	4631      	mov	r1, r6
 8012d50:	f003 fa2e 	bl	80161b0 <rmw_take_with_info>
 8012d54:	4603      	mov	r3, r0
 8012d56:	b9c0      	cbnz	r0, 8012d8a <rcl_take+0xa6>
 8012d58:	f89d 104f 	ldrb.w	r1, [sp, #79]	@ 0x4f
 8012d5c:	f240 1291 	movw	r2, #401	@ 0x191
 8012d60:	2900      	cmp	r1, #0
 8012d62:	bf08      	it	eq
 8012d64:	4613      	moveq	r3, r2
 8012d66:	4618      	mov	r0, r3
 8012d68:	b024      	add	sp, #144	@ 0x90
 8012d6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012d6e:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8012d72:	4618      	mov	r0, r3
 8012d74:	b024      	add	sp, #144	@ 0x90
 8012d76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012d7a:	230b      	movs	r3, #11
 8012d7c:	e7f3      	b.n	8012d66 <rcl_take+0x82>
 8012d7e:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8012d82:	4618      	mov	r0, r3
 8012d84:	4770      	bx	lr
 8012d86:	ad14      	add	r5, sp, #80	@ 0x50
 8012d88:	e7c0      	b.n	8012d0c <rcl_take+0x28>
 8012d8a:	f7ff f877 	bl	8011e7c <rcl_convert_rmw_ret_to_rcl_ret>
 8012d8e:	4603      	mov	r3, r0
 8012d90:	e7e9      	b.n	8012d66 <rcl_take+0x82>
 8012d92:	bf00      	nop

08012d94 <rcl_subscription_get_rmw_handle>:
 8012d94:	b118      	cbz	r0, 8012d9e <rcl_subscription_get_rmw_handle+0xa>
 8012d96:	6800      	ldr	r0, [r0, #0]
 8012d98:	b108      	cbz	r0, 8012d9e <rcl_subscription_get_rmw_handle+0xa>
 8012d9a:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 8012d9e:	4770      	bx	lr

08012da0 <rcl_subscription_is_valid>:
 8012da0:	b130      	cbz	r0, 8012db0 <rcl_subscription_is_valid+0x10>
 8012da2:	6800      	ldr	r0, [r0, #0]
 8012da4:	b120      	cbz	r0, 8012db0 <rcl_subscription_is_valid+0x10>
 8012da6:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 8012daa:	3800      	subs	r0, #0
 8012dac:	bf18      	it	ne
 8012dae:	2001      	movne	r0, #1
 8012db0:	4770      	bx	lr
 8012db2:	bf00      	nop

08012db4 <rcl_get_system_time>:
 8012db4:	4608      	mov	r0, r1
 8012db6:	f7f8 bb6f 	b.w	800b498 <rcutils_system_time_now>
 8012dba:	bf00      	nop

08012dbc <rcl_get_steady_time>:
 8012dbc:	4608      	mov	r0, r1
 8012dbe:	f7f8 bb93 	b.w	800b4e8 <rcutils_steady_time_now>
 8012dc2:	bf00      	nop

08012dc4 <rcl_get_ros_time>:
 8012dc4:	7a03      	ldrb	r3, [r0, #8]
 8012dc6:	b510      	push	{r4, lr}
 8012dc8:	460c      	mov	r4, r1
 8012dca:	b133      	cbz	r3, 8012dda <rcl_get_ros_time+0x16>
 8012dcc:	2105      	movs	r1, #5
 8012dce:	f001 fd53 	bl	8014878 <__atomic_load_8>
 8012dd2:	e9c4 0100 	strd	r0, r1, [r4]
 8012dd6:	2000      	movs	r0, #0
 8012dd8:	bd10      	pop	{r4, pc}
 8012dda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012dde:	4608      	mov	r0, r1
 8012de0:	f7f8 bb5a 	b.w	800b498 <rcutils_system_time_now>

08012de4 <rcl_clock_init>:
 8012de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012de6:	4605      	mov	r5, r0
 8012de8:	4610      	mov	r0, r2
 8012dea:	4614      	mov	r4, r2
 8012dec:	460e      	mov	r6, r1
 8012dee:	f7f8 fb13 	bl	800b418 <rcutils_allocator_is_valid>
 8012df2:	b128      	cbz	r0, 8012e00 <rcl_clock_init+0x1c>
 8012df4:	2d03      	cmp	r5, #3
 8012df6:	d803      	bhi.n	8012e00 <rcl_clock_init+0x1c>
 8012df8:	e8df f005 	tbb	[pc, r5]
 8012dfc:	06532e1d 	.word	0x06532e1d
 8012e00:	f04f 0c0b 	mov.w	ip, #11
 8012e04:	4660      	mov	r0, ip
 8012e06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012e08:	2e00      	cmp	r6, #0
 8012e0a:	d0f9      	beq.n	8012e00 <rcl_clock_init+0x1c>
 8012e0c:	2c00      	cmp	r4, #0
 8012e0e:	d0f7      	beq.n	8012e00 <rcl_clock_init+0x1c>
 8012e10:	2300      	movs	r3, #0
 8012e12:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8012e16:	f8df e0b4 	ldr.w	lr, [pc, #180]	@ 8012ecc <rcl_clock_init+0xe8>
 8012e1a:	6133      	str	r3, [r6, #16]
 8012e1c:	f106 0514 	add.w	r5, r6, #20
 8012e20:	469c      	mov	ip, r3
 8012e22:	2703      	movs	r7, #3
 8012e24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012e26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012e28:	6823      	ldr	r3, [r4, #0]
 8012e2a:	602b      	str	r3, [r5, #0]
 8012e2c:	7037      	strb	r7, [r6, #0]
 8012e2e:	f8c6 e00c 	str.w	lr, [r6, #12]
 8012e32:	4660      	mov	r0, ip
 8012e34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012e36:	2e00      	cmp	r6, #0
 8012e38:	d0e2      	beq.n	8012e00 <rcl_clock_init+0x1c>
 8012e3a:	2300      	movs	r3, #0
 8012e3c:	7033      	strb	r3, [r6, #0]
 8012e3e:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8012e42:	e9c6 3303 	strd	r3, r3, [r6, #12]
 8012e46:	469c      	mov	ip, r3
 8012e48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012e4a:	f106 0514 	add.w	r5, r6, #20
 8012e4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012e50:	6823      	ldr	r3, [r4, #0]
 8012e52:	602b      	str	r3, [r5, #0]
 8012e54:	4660      	mov	r0, ip
 8012e56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012e58:	2e00      	cmp	r6, #0
 8012e5a:	d0d1      	beq.n	8012e00 <rcl_clock_init+0x1c>
 8012e5c:	2c00      	cmp	r4, #0
 8012e5e:	d0cf      	beq.n	8012e00 <rcl_clock_init+0x1c>
 8012e60:	2700      	movs	r7, #0
 8012e62:	7037      	strb	r7, [r6, #0]
 8012e64:	46a4      	mov	ip, r4
 8012e66:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012e6a:	f106 0514 	add.w	r5, r6, #20
 8012e6e:	e9c6 7701 	strd	r7, r7, [r6, #4]
 8012e72:	e9c6 7703 	strd	r7, r7, [r6, #12]
 8012e76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012e78:	f8dc 3000 	ldr.w	r3, [ip]
 8012e7c:	602b      	str	r3, [r5, #0]
 8012e7e:	6921      	ldr	r1, [r4, #16]
 8012e80:	6823      	ldr	r3, [r4, #0]
 8012e82:	2010      	movs	r0, #16
 8012e84:	4798      	blx	r3
 8012e86:	6130      	str	r0, [r6, #16]
 8012e88:	b1d0      	cbz	r0, 8012ec0 <rcl_clock_init+0xdc>
 8012e8a:	2200      	movs	r2, #0
 8012e8c:	2300      	movs	r3, #0
 8012e8e:	e9c0 2300 	strd	r2, r3, [r0]
 8012e92:	2301      	movs	r3, #1
 8012e94:	7207      	strb	r7, [r0, #8]
 8012e96:	4a0c      	ldr	r2, [pc, #48]	@ (8012ec8 <rcl_clock_init+0xe4>)
 8012e98:	7033      	strb	r3, [r6, #0]
 8012e9a:	46bc      	mov	ip, r7
 8012e9c:	60f2      	str	r2, [r6, #12]
 8012e9e:	4660      	mov	r0, ip
 8012ea0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012ea2:	2e00      	cmp	r6, #0
 8012ea4:	d0ac      	beq.n	8012e00 <rcl_clock_init+0x1c>
 8012ea6:	2c00      	cmp	r4, #0
 8012ea8:	d0aa      	beq.n	8012e00 <rcl_clock_init+0x1c>
 8012eaa:	2300      	movs	r3, #0
 8012eac:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8012eb0:	f8df e01c 	ldr.w	lr, [pc, #28]	@ 8012ed0 <rcl_clock_init+0xec>
 8012eb4:	6133      	str	r3, [r6, #16]
 8012eb6:	f106 0514 	add.w	r5, r6, #20
 8012eba:	469c      	mov	ip, r3
 8012ebc:	2702      	movs	r7, #2
 8012ebe:	e7b1      	b.n	8012e24 <rcl_clock_init+0x40>
 8012ec0:	f04f 0c0a 	mov.w	ip, #10
 8012ec4:	e79e      	b.n	8012e04 <rcl_clock_init+0x20>
 8012ec6:	bf00      	nop
 8012ec8:	08012dc5 	.word	0x08012dc5
 8012ecc:	08012dbd 	.word	0x08012dbd
 8012ed0:	08012db5 	.word	0x08012db5

08012ed4 <rcl_clock_get_now>:
 8012ed4:	b140      	cbz	r0, 8012ee8 <rcl_clock_get_now+0x14>
 8012ed6:	b139      	cbz	r1, 8012ee8 <rcl_clock_get_now+0x14>
 8012ed8:	7803      	ldrb	r3, [r0, #0]
 8012eda:	b11b      	cbz	r3, 8012ee4 <rcl_clock_get_now+0x10>
 8012edc:	68c3      	ldr	r3, [r0, #12]
 8012ede:	b10b      	cbz	r3, 8012ee4 <rcl_clock_get_now+0x10>
 8012ee0:	6900      	ldr	r0, [r0, #16]
 8012ee2:	4718      	bx	r3
 8012ee4:	2001      	movs	r0, #1
 8012ee6:	4770      	bx	lr
 8012ee8:	200b      	movs	r0, #11
 8012eea:	4770      	bx	lr

08012eec <rcl_timer_call>:
 8012eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ef0:	b087      	sub	sp, #28
 8012ef2:	2800      	cmp	r0, #0
 8012ef4:	d06d      	beq.n	8012fd2 <rcl_timer_call+0xe6>
 8012ef6:	6803      	ldr	r3, [r0, #0]
 8012ef8:	4604      	mov	r4, r0
 8012efa:	2b00      	cmp	r3, #0
 8012efc:	d063      	beq.n	8012fc6 <rcl_timer_call+0xda>
 8012efe:	f3bf 8f5b 	dmb	ish
 8012f02:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8012f06:	f3bf 8f5b 	dmb	ish
 8012f0a:	2b00      	cmp	r3, #0
 8012f0c:	d150      	bne.n	8012fb0 <rcl_timer_call+0xc4>
 8012f0e:	6803      	ldr	r3, [r0, #0]
 8012f10:	a904      	add	r1, sp, #16
 8012f12:	6818      	ldr	r0, [r3, #0]
 8012f14:	f7ff ffde 	bl	8012ed4 <rcl_clock_get_now>
 8012f18:	4605      	mov	r5, r0
 8012f1a:	2800      	cmp	r0, #0
 8012f1c:	d14a      	bne.n	8012fb4 <rcl_timer_call+0xc8>
 8012f1e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012f22:	2b00      	cmp	r3, #0
 8012f24:	db4a      	blt.n	8012fbc <rcl_timer_call+0xd0>
 8012f26:	6820      	ldr	r0, [r4, #0]
 8012f28:	f04f 0a05 	mov.w	sl, #5
 8012f2c:	f8cd a000 	str.w	sl, [sp]
 8012f30:	3020      	adds	r0, #32
 8012f32:	f001 fd0d 	bl	8014950 <__atomic_exchange_8>
 8012f36:	6823      	ldr	r3, [r4, #0]
 8012f38:	f3bf 8f5b 	dmb	ish
 8012f3c:	4680      	mov	r8, r0
 8012f3e:	f8d3 b010 	ldr.w	fp, [r3, #16]
 8012f42:	f3bf 8f5b 	dmb	ish
 8012f46:	6820      	ldr	r0, [r4, #0]
 8012f48:	4689      	mov	r9, r1
 8012f4a:	3028      	adds	r0, #40	@ 0x28
 8012f4c:	4651      	mov	r1, sl
 8012f4e:	f001 fc93 	bl	8014878 <__atomic_load_8>
 8012f52:	4606      	mov	r6, r0
 8012f54:	6820      	ldr	r0, [r4, #0]
 8012f56:	460f      	mov	r7, r1
 8012f58:	3018      	adds	r0, #24
 8012f5a:	4651      	mov	r1, sl
 8012f5c:	f001 fc8c 	bl	8014878 <__atomic_load_8>
 8012f60:	1836      	adds	r6, r6, r0
 8012f62:	4602      	mov	r2, r0
 8012f64:	4682      	mov	sl, r0
 8012f66:	e9dd 0c04 	ldrd	r0, ip, [sp, #16]
 8012f6a:	eb47 0701 	adc.w	r7, r7, r1
 8012f6e:	4286      	cmp	r6, r0
 8012f70:	460b      	mov	r3, r1
 8012f72:	eb77 010c 	sbcs.w	r1, r7, ip
 8012f76:	da04      	bge.n	8012f82 <rcl_timer_call+0x96>
 8012f78:	ea53 0102 	orrs.w	r1, r3, r2
 8012f7c:	d12e      	bne.n	8012fdc <rcl_timer_call+0xf0>
 8012f7e:	4606      	mov	r6, r0
 8012f80:	4667      	mov	r7, ip
 8012f82:	6820      	ldr	r0, [r4, #0]
 8012f84:	2105      	movs	r1, #5
 8012f86:	4632      	mov	r2, r6
 8012f88:	463b      	mov	r3, r7
 8012f8a:	3028      	adds	r0, #40	@ 0x28
 8012f8c:	9100      	str	r1, [sp, #0]
 8012f8e:	f001 fca9 	bl	80148e4 <__atomic_store_8>
 8012f92:	f1bb 0f00 	cmp.w	fp, #0
 8012f96:	d00d      	beq.n	8012fb4 <rcl_timer_call+0xc8>
 8012f98:	9a04      	ldr	r2, [sp, #16]
 8012f9a:	9b05      	ldr	r3, [sp, #20]
 8012f9c:	ebb2 0208 	subs.w	r2, r2, r8
 8012fa0:	4620      	mov	r0, r4
 8012fa2:	eb63 0309 	sbc.w	r3, r3, r9
 8012fa6:	47d8      	blx	fp
 8012fa8:	4628      	mov	r0, r5
 8012faa:	b007      	add	sp, #28
 8012fac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012fb0:	f240 3521 	movw	r5, #801	@ 0x321
 8012fb4:	4628      	mov	r0, r5
 8012fb6:	b007      	add	sp, #28
 8012fb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012fbc:	2501      	movs	r5, #1
 8012fbe:	4628      	mov	r0, r5
 8012fc0:	b007      	add	sp, #28
 8012fc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012fc6:	f44f 7548 	mov.w	r5, #800	@ 0x320
 8012fca:	4628      	mov	r0, r5
 8012fcc:	b007      	add	sp, #28
 8012fce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012fd2:	250b      	movs	r5, #11
 8012fd4:	4628      	mov	r0, r5
 8012fd6:	b007      	add	sp, #28
 8012fd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012fdc:	1b80      	subs	r0, r0, r6
 8012fde:	eb6c 0107 	sbc.w	r1, ip, r7
 8012fe2:	3801      	subs	r0, #1
 8012fe4:	f161 0100 	sbc.w	r1, r1, #0
 8012fe8:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8012fec:	f7ed fe16 	bl	8000c1c <__aeabi_ldivmod>
 8012ff0:	9b02      	ldr	r3, [sp, #8]
 8012ff2:	3001      	adds	r0, #1
 8012ff4:	f141 0100 	adc.w	r1, r1, #0
 8012ff8:	fb00 f303 	mul.w	r3, r0, r3
 8012ffc:	fb01 330a 	mla	r3, r1, sl, r3
 8013000:	fba0 0a0a 	umull	r0, sl, r0, sl
 8013004:	1986      	adds	r6, r0, r6
 8013006:	4453      	add	r3, sl
 8013008:	eb43 0707 	adc.w	r7, r3, r7
 801300c:	e7b9      	b.n	8012f82 <rcl_timer_call+0x96>
 801300e:	bf00      	nop

08013010 <rcl_timer_is_ready>:
 8013010:	b570      	push	{r4, r5, r6, lr}
 8013012:	b082      	sub	sp, #8
 8013014:	b378      	cbz	r0, 8013076 <rcl_timer_is_ready+0x66>
 8013016:	6803      	ldr	r3, [r0, #0]
 8013018:	4604      	mov	r4, r0
 801301a:	b383      	cbz	r3, 801307e <rcl_timer_is_ready+0x6e>
 801301c:	460d      	mov	r5, r1
 801301e:	b351      	cbz	r1, 8013076 <rcl_timer_is_ready+0x66>
 8013020:	f3bf 8f5b 	dmb	ish
 8013024:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8013028:	f3bf 8f5b 	dmb	ish
 801302c:	b953      	cbnz	r3, 8013044 <rcl_timer_is_ready+0x34>
 801302e:	6803      	ldr	r3, [r0, #0]
 8013030:	4669      	mov	r1, sp
 8013032:	6818      	ldr	r0, [r3, #0]
 8013034:	f7ff ff4e 	bl	8012ed4 <rcl_clock_get_now>
 8013038:	4606      	mov	r6, r0
 801303a:	b140      	cbz	r0, 801304e <rcl_timer_is_ready+0x3e>
 801303c:	f240 3321 	movw	r3, #801	@ 0x321
 8013040:	4298      	cmp	r0, r3
 8013042:	d101      	bne.n	8013048 <rcl_timer_is_ready+0x38>
 8013044:	2600      	movs	r6, #0
 8013046:	702e      	strb	r6, [r5, #0]
 8013048:	4630      	mov	r0, r6
 801304a:	b002      	add	sp, #8
 801304c:	bd70      	pop	{r4, r5, r6, pc}
 801304e:	6820      	ldr	r0, [r4, #0]
 8013050:	2105      	movs	r1, #5
 8013052:	3028      	adds	r0, #40	@ 0x28
 8013054:	f001 fc10 	bl	8014878 <__atomic_load_8>
 8013058:	9b00      	ldr	r3, [sp, #0]
 801305a:	1ac0      	subs	r0, r0, r3
 801305c:	9b01      	ldr	r3, [sp, #4]
 801305e:	eb61 0103 	sbc.w	r1, r1, r3
 8013062:	2801      	cmp	r0, #1
 8013064:	f171 0300 	sbcs.w	r3, r1, #0
 8013068:	bfb4      	ite	lt
 801306a:	2301      	movlt	r3, #1
 801306c:	2300      	movge	r3, #0
 801306e:	4630      	mov	r0, r6
 8013070:	702b      	strb	r3, [r5, #0]
 8013072:	b002      	add	sp, #8
 8013074:	bd70      	pop	{r4, r5, r6, pc}
 8013076:	260b      	movs	r6, #11
 8013078:	4630      	mov	r0, r6
 801307a:	b002      	add	sp, #8
 801307c:	bd70      	pop	{r4, r5, r6, pc}
 801307e:	f44f 7648 	mov.w	r6, #800	@ 0x320
 8013082:	e7e1      	b.n	8013048 <rcl_timer_is_ready+0x38>

08013084 <rcl_timer_get_time_until_next_call>:
 8013084:	b570      	push	{r4, r5, r6, lr}
 8013086:	b082      	sub	sp, #8
 8013088:	b330      	cbz	r0, 80130d8 <rcl_timer_get_time_until_next_call+0x54>
 801308a:	6803      	ldr	r3, [r0, #0]
 801308c:	4604      	mov	r4, r0
 801308e:	b33b      	cbz	r3, 80130e0 <rcl_timer_get_time_until_next_call+0x5c>
 8013090:	460d      	mov	r5, r1
 8013092:	b309      	cbz	r1, 80130d8 <rcl_timer_get_time_until_next_call+0x54>
 8013094:	f3bf 8f5b 	dmb	ish
 8013098:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801309c:	f3bf 8f5b 	dmb	ish
 80130a0:	b9ab      	cbnz	r3, 80130ce <rcl_timer_get_time_until_next_call+0x4a>
 80130a2:	6803      	ldr	r3, [r0, #0]
 80130a4:	4669      	mov	r1, sp
 80130a6:	6818      	ldr	r0, [r3, #0]
 80130a8:	f7ff ff14 	bl	8012ed4 <rcl_clock_get_now>
 80130ac:	4606      	mov	r6, r0
 80130ae:	b958      	cbnz	r0, 80130c8 <rcl_timer_get_time_until_next_call+0x44>
 80130b0:	6820      	ldr	r0, [r4, #0]
 80130b2:	2105      	movs	r1, #5
 80130b4:	3028      	adds	r0, #40	@ 0x28
 80130b6:	f001 fbdf 	bl	8014878 <__atomic_load_8>
 80130ba:	9b00      	ldr	r3, [sp, #0]
 80130bc:	1ac0      	subs	r0, r0, r3
 80130be:	9b01      	ldr	r3, [sp, #4]
 80130c0:	6028      	str	r0, [r5, #0]
 80130c2:	eb61 0103 	sbc.w	r1, r1, r3
 80130c6:	6069      	str	r1, [r5, #4]
 80130c8:	4630      	mov	r0, r6
 80130ca:	b002      	add	sp, #8
 80130cc:	bd70      	pop	{r4, r5, r6, pc}
 80130ce:	f240 3621 	movw	r6, #801	@ 0x321
 80130d2:	4630      	mov	r0, r6
 80130d4:	b002      	add	sp, #8
 80130d6:	bd70      	pop	{r4, r5, r6, pc}
 80130d8:	260b      	movs	r6, #11
 80130da:	4630      	mov	r0, r6
 80130dc:	b002      	add	sp, #8
 80130de:	bd70      	pop	{r4, r5, r6, pc}
 80130e0:	f44f 7648 	mov.w	r6, #800	@ 0x320
 80130e4:	e7f0      	b.n	80130c8 <rcl_timer_get_time_until_next_call+0x44>
 80130e6:	bf00      	nop

080130e8 <rcl_timer_get_guard_condition>:
 80130e8:	b130      	cbz	r0, 80130f8 <rcl_timer_get_guard_condition+0x10>
 80130ea:	6800      	ldr	r0, [r0, #0]
 80130ec:	b120      	cbz	r0, 80130f8 <rcl_timer_get_guard_condition+0x10>
 80130ee:	68c3      	ldr	r3, [r0, #12]
 80130f0:	b10b      	cbz	r3, 80130f6 <rcl_timer_get_guard_condition+0xe>
 80130f2:	3008      	adds	r0, #8
 80130f4:	4770      	bx	lr
 80130f6:	4618      	mov	r0, r3
 80130f8:	4770      	bx	lr
 80130fa:	bf00      	nop

080130fc <rcl_validate_enclave_name_with_size>:
 80130fc:	b378      	cbz	r0, 801315e <rcl_validate_enclave_name_with_size+0x62>
 80130fe:	b570      	push	{r4, r5, r6, lr}
 8013100:	4615      	mov	r5, r2
 8013102:	b0c2      	sub	sp, #264	@ 0x108
 8013104:	b302      	cbz	r2, 8013148 <rcl_validate_enclave_name_with_size+0x4c>
 8013106:	461e      	mov	r6, r3
 8013108:	466a      	mov	r2, sp
 801310a:	ab01      	add	r3, sp, #4
 801310c:	460c      	mov	r4, r1
 801310e:	f002 f849 	bl	80151a4 <rmw_validate_namespace_with_size>
 8013112:	4684      	mov	ip, r0
 8013114:	b9e8      	cbnz	r0, 8013152 <rcl_validate_enclave_name_with_size+0x56>
 8013116:	9b00      	ldr	r3, [sp, #0]
 8013118:	b923      	cbnz	r3, 8013124 <rcl_validate_enclave_name_with_size+0x28>
 801311a:	2300      	movs	r3, #0
 801311c:	602b      	str	r3, [r5, #0]
 801311e:	4660      	mov	r0, ip
 8013120:	b042      	add	sp, #264	@ 0x108
 8013122:	bd70      	pop	{r4, r5, r6, pc}
 8013124:	2b07      	cmp	r3, #7
 8013126:	d007      	beq.n	8013138 <rcl_validate_enclave_name_with_size+0x3c>
 8013128:	1e5a      	subs	r2, r3, #1
 801312a:	2a05      	cmp	r2, #5
 801312c:	d833      	bhi.n	8013196 <rcl_validate_enclave_name_with_size+0x9a>
 801312e:	e8df f002 	tbb	[pc, r2]
 8013132:	2c2f      	.short	0x2c2f
 8013134:	1a232629 	.word	0x1a232629
 8013138:	2cff      	cmp	r4, #255	@ 0xff
 801313a:	d9ee      	bls.n	801311a <rcl_validate_enclave_name_with_size+0x1e>
 801313c:	602b      	str	r3, [r5, #0]
 801313e:	2e00      	cmp	r6, #0
 8013140:	d0ed      	beq.n	801311e <rcl_validate_enclave_name_with_size+0x22>
 8013142:	23fe      	movs	r3, #254	@ 0xfe
 8013144:	6033      	str	r3, [r6, #0]
 8013146:	e7ea      	b.n	801311e <rcl_validate_enclave_name_with_size+0x22>
 8013148:	f04f 0c0b 	mov.w	ip, #11
 801314c:	4660      	mov	r0, ip
 801314e:	b042      	add	sp, #264	@ 0x108
 8013150:	bd70      	pop	{r4, r5, r6, pc}
 8013152:	f7fe fe93 	bl	8011e7c <rcl_convert_rmw_ret_to_rcl_ret>
 8013156:	4684      	mov	ip, r0
 8013158:	4660      	mov	r0, ip
 801315a:	b042      	add	sp, #264	@ 0x108
 801315c:	bd70      	pop	{r4, r5, r6, pc}
 801315e:	f04f 0c0b 	mov.w	ip, #11
 8013162:	4660      	mov	r0, ip
 8013164:	4770      	bx	lr
 8013166:	2306      	movs	r3, #6
 8013168:	602b      	str	r3, [r5, #0]
 801316a:	2e00      	cmp	r6, #0
 801316c:	d0d7      	beq.n	801311e <rcl_validate_enclave_name_with_size+0x22>
 801316e:	9b01      	ldr	r3, [sp, #4]
 8013170:	6033      	str	r3, [r6, #0]
 8013172:	4660      	mov	r0, ip
 8013174:	b042      	add	sp, #264	@ 0x108
 8013176:	bd70      	pop	{r4, r5, r6, pc}
 8013178:	2305      	movs	r3, #5
 801317a:	602b      	str	r3, [r5, #0]
 801317c:	e7f5      	b.n	801316a <rcl_validate_enclave_name_with_size+0x6e>
 801317e:	2304      	movs	r3, #4
 8013180:	602b      	str	r3, [r5, #0]
 8013182:	e7f2      	b.n	801316a <rcl_validate_enclave_name_with_size+0x6e>
 8013184:	2303      	movs	r3, #3
 8013186:	602b      	str	r3, [r5, #0]
 8013188:	e7ef      	b.n	801316a <rcl_validate_enclave_name_with_size+0x6e>
 801318a:	2302      	movs	r3, #2
 801318c:	602b      	str	r3, [r5, #0]
 801318e:	e7ec      	b.n	801316a <rcl_validate_enclave_name_with_size+0x6e>
 8013190:	2301      	movs	r3, #1
 8013192:	602b      	str	r3, [r5, #0]
 8013194:	e7e9      	b.n	801316a <rcl_validate_enclave_name_with_size+0x6e>
 8013196:	4a04      	ldr	r2, [pc, #16]	@ (80131a8 <rcl_validate_enclave_name_with_size+0xac>)
 8013198:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801319c:	a802      	add	r0, sp, #8
 801319e:	f001 fd25 	bl	8014bec <rcutils_snprintf>
 80131a2:	f04f 0c01 	mov.w	ip, #1
 80131a6:	e7ba      	b.n	801311e <rcl_validate_enclave_name_with_size+0x22>
 80131a8:	0801b260 	.word	0x0801b260

080131ac <rcl_validate_enclave_name>:
 80131ac:	b168      	cbz	r0, 80131ca <rcl_validate_enclave_name+0x1e>
 80131ae:	b570      	push	{r4, r5, r6, lr}
 80131b0:	460d      	mov	r5, r1
 80131b2:	4616      	mov	r6, r2
 80131b4:	4604      	mov	r4, r0
 80131b6:	f7ed f823 	bl	8000200 <strlen>
 80131ba:	4633      	mov	r3, r6
 80131bc:	4601      	mov	r1, r0
 80131be:	462a      	mov	r2, r5
 80131c0:	4620      	mov	r0, r4
 80131c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80131c6:	f7ff bf99 	b.w	80130fc <rcl_validate_enclave_name_with_size>
 80131ca:	200b      	movs	r0, #11
 80131cc:	4770      	bx	lr
 80131ce:	bf00      	nop

080131d0 <rcl_get_zero_initialized_wait_set>:
 80131d0:	b510      	push	{r4, lr}
 80131d2:	4c08      	ldr	r4, [pc, #32]	@ (80131f4 <rcl_get_zero_initialized_wait_set+0x24>)
 80131d4:	4686      	mov	lr, r0
 80131d6:	4684      	mov	ip, r0
 80131d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80131da:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80131de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80131e0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80131e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80131e6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80131ea:	6823      	ldr	r3, [r4, #0]
 80131ec:	f8cc 3000 	str.w	r3, [ip]
 80131f0:	4670      	mov	r0, lr
 80131f2:	bd10      	pop	{r4, pc}
 80131f4:	0801b2c0 	.word	0x0801b2c0

080131f8 <rcl_wait_set_is_valid>:
 80131f8:	b118      	cbz	r0, 8013202 <rcl_wait_set_is_valid+0xa>
 80131fa:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 80131fc:	3800      	subs	r0, #0
 80131fe:	bf18      	it	ne
 8013200:	2001      	movne	r0, #1
 8013202:	4770      	bx	lr

08013204 <rcl_wait_set_fini>:
 8013204:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013208:	b082      	sub	sp, #8
 801320a:	2800      	cmp	r0, #0
 801320c:	f000 8095 	beq.w	801333a <rcl_wait_set_fini+0x136>
 8013210:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8013212:	4604      	mov	r4, r0
 8013214:	2e00      	cmp	r6, #0
 8013216:	f000 808c 	beq.w	8013332 <rcl_wait_set_fini+0x12e>
 801321a:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 801321c:	f003 f9b6 	bl	801658c <rmw_destroy_wait_set>
 8013220:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8013222:	1e06      	subs	r6, r0, #0
 8013224:	bf18      	it	ne
 8013226:	f44f 7661 	movne.w	r6, #900	@ 0x384
 801322a:	2d00      	cmp	r5, #0
 801322c:	f000 8081 	beq.w	8013332 <rcl_wait_set_fini+0x12e>
 8013230:	6820      	ldr	r0, [r4, #0]
 8013232:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8013236:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8013238:	2700      	movs	r7, #0
 801323a:	6067      	str	r7, [r4, #4]
 801323c:	602f      	str	r7, [r5, #0]
 801323e:	b120      	cbz	r0, 801324a <rcl_wait_set_fini+0x46>
 8013240:	9101      	str	r1, [sp, #4]
 8013242:	47c0      	blx	r8
 8013244:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8013246:	9901      	ldr	r1, [sp, #4]
 8013248:	6027      	str	r7, [r4, #0]
 801324a:	68a8      	ldr	r0, [r5, #8]
 801324c:	b120      	cbz	r0, 8013258 <rcl_wait_set_fini+0x54>
 801324e:	47c0      	blx	r8
 8013250:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8013252:	2300      	movs	r3, #0
 8013254:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8013258:	68a0      	ldr	r0, [r4, #8]
 801325a:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 801325c:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801325e:	f04f 0800 	mov.w	r8, #0
 8013262:	f8c4 800c 	str.w	r8, [r4, #12]
 8013266:	f8c5 800c 	str.w	r8, [r5, #12]
 801326a:	b128      	cbz	r0, 8013278 <rcl_wait_set_fini+0x74>
 801326c:	47b8      	blx	r7
 801326e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8013270:	f8c4 8008 	str.w	r8, [r4, #8]
 8013274:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8013276:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8013278:	6968      	ldr	r0, [r5, #20]
 801327a:	f04f 0800 	mov.w	r8, #0
 801327e:	f8c5 8010 	str.w	r8, [r5, #16]
 8013282:	b128      	cbz	r0, 8013290 <rcl_wait_set_fini+0x8c>
 8013284:	47b8      	blx	r7
 8013286:	f8c5 8014 	str.w	r8, [r5, #20]
 801328a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801328c:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 801328e:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8013290:	6920      	ldr	r0, [r4, #16]
 8013292:	f04f 0800 	mov.w	r8, #0
 8013296:	f8c4 8014 	str.w	r8, [r4, #20]
 801329a:	f8c5 8040 	str.w	r8, [r5, #64]	@ 0x40
 801329e:	b128      	cbz	r0, 80132ac <rcl_wait_set_fini+0xa8>
 80132a0:	47b8      	blx	r7
 80132a2:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80132a4:	f8c4 8010 	str.w	r8, [r4, #16]
 80132a8:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 80132aa:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80132ac:	69a0      	ldr	r0, [r4, #24]
 80132ae:	f04f 0800 	mov.w	r8, #0
 80132b2:	f8c4 801c 	str.w	r8, [r4, #28]
 80132b6:	f8c5 8018 	str.w	r8, [r5, #24]
 80132ba:	b128      	cbz	r0, 80132c8 <rcl_wait_set_fini+0xc4>
 80132bc:	9101      	str	r1, [sp, #4]
 80132be:	47b8      	blx	r7
 80132c0:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80132c2:	9901      	ldr	r1, [sp, #4]
 80132c4:	f8c4 8018 	str.w	r8, [r4, #24]
 80132c8:	6a28      	ldr	r0, [r5, #32]
 80132ca:	b120      	cbz	r0, 80132d6 <rcl_wait_set_fini+0xd2>
 80132cc:	47b8      	blx	r7
 80132ce:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80132d0:	2300      	movs	r3, #0
 80132d2:	e9c5 3307 	strd	r3, r3, [r5, #28]
 80132d6:	6a20      	ldr	r0, [r4, #32]
 80132d8:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 80132dc:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80132de:	2700      	movs	r7, #0
 80132e0:	6267      	str	r7, [r4, #36]	@ 0x24
 80132e2:	626f      	str	r7, [r5, #36]	@ 0x24
 80132e4:	b120      	cbz	r0, 80132f0 <rcl_wait_set_fini+0xec>
 80132e6:	9101      	str	r1, [sp, #4]
 80132e8:	47c0      	blx	r8
 80132ea:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80132ec:	9901      	ldr	r1, [sp, #4]
 80132ee:	6227      	str	r7, [r4, #32]
 80132f0:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 80132f2:	b120      	cbz	r0, 80132fe <rcl_wait_set_fini+0xfa>
 80132f4:	47c0      	blx	r8
 80132f6:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80132f8:	2300      	movs	r3, #0
 80132fa:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 80132fe:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8013300:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8013304:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8013306:	2700      	movs	r7, #0
 8013308:	62e7      	str	r7, [r4, #44]	@ 0x2c
 801330a:	632f      	str	r7, [r5, #48]	@ 0x30
 801330c:	b120      	cbz	r0, 8013318 <rcl_wait_set_fini+0x114>
 801330e:	9101      	str	r1, [sp, #4]
 8013310:	47c0      	blx	r8
 8013312:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8013314:	9901      	ldr	r1, [sp, #4]
 8013316:	62a7      	str	r7, [r4, #40]	@ 0x28
 8013318:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 801331a:	b120      	cbz	r0, 8013326 <rcl_wait_set_fini+0x122>
 801331c:	47c0      	blx	r8
 801331e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8013320:	2300      	movs	r3, #0
 8013322:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 8013326:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8013328:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801332a:	4628      	mov	r0, r5
 801332c:	4798      	blx	r3
 801332e:	2300      	movs	r3, #0
 8013330:	6323      	str	r3, [r4, #48]	@ 0x30
 8013332:	4630      	mov	r0, r6
 8013334:	b002      	add	sp, #8
 8013336:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801333a:	260b      	movs	r6, #11
 801333c:	4630      	mov	r0, r6
 801333e:	b002      	add	sp, #8
 8013340:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013344 <rcl_wait_set_add_subscription>:
 8013344:	b318      	cbz	r0, 801338e <rcl_wait_set_add_subscription+0x4a>
 8013346:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8013348:	b570      	push	{r4, r5, r6, lr}
 801334a:	4604      	mov	r4, r0
 801334c:	b30b      	cbz	r3, 8013392 <rcl_wait_set_add_subscription+0x4e>
 801334e:	b319      	cbz	r1, 8013398 <rcl_wait_set_add_subscription+0x54>
 8013350:	681d      	ldr	r5, [r3, #0]
 8013352:	6840      	ldr	r0, [r0, #4]
 8013354:	4285      	cmp	r5, r0
 8013356:	d217      	bcs.n	8013388 <rcl_wait_set_add_subscription+0x44>
 8013358:	6820      	ldr	r0, [r4, #0]
 801335a:	1c6e      	adds	r6, r5, #1
 801335c:	601e      	str	r6, [r3, #0]
 801335e:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8013362:	b102      	cbz	r2, 8013366 <rcl_wait_set_add_subscription+0x22>
 8013364:	6015      	str	r5, [r2, #0]
 8013366:	4608      	mov	r0, r1
 8013368:	f7ff fd14 	bl	8012d94 <rcl_subscription_get_rmw_handle>
 801336c:	b150      	cbz	r0, 8013384 <rcl_wait_set_add_subscription+0x40>
 801336e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013370:	6842      	ldr	r2, [r0, #4]
 8013372:	689b      	ldr	r3, [r3, #8]
 8013374:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013378:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801337a:	6853      	ldr	r3, [r2, #4]
 801337c:	3301      	adds	r3, #1
 801337e:	2000      	movs	r0, #0
 8013380:	6053      	str	r3, [r2, #4]
 8013382:	bd70      	pop	{r4, r5, r6, pc}
 8013384:	2001      	movs	r0, #1
 8013386:	bd70      	pop	{r4, r5, r6, pc}
 8013388:	f240 3086 	movw	r0, #902	@ 0x386
 801338c:	bd70      	pop	{r4, r5, r6, pc}
 801338e:	200b      	movs	r0, #11
 8013390:	4770      	bx	lr
 8013392:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8013396:	bd70      	pop	{r4, r5, r6, pc}
 8013398:	200b      	movs	r0, #11
 801339a:	bd70      	pop	{r4, r5, r6, pc}

0801339c <rcl_wait_set_clear>:
 801339c:	2800      	cmp	r0, #0
 801339e:	d073      	beq.n	8013488 <rcl_wait_set_clear+0xec>
 80133a0:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80133a2:	b510      	push	{r4, lr}
 80133a4:	4604      	mov	r4, r0
 80133a6:	2b00      	cmp	r3, #0
 80133a8:	d070      	beq.n	801348c <rcl_wait_set_clear+0xf0>
 80133aa:	6800      	ldr	r0, [r0, #0]
 80133ac:	b138      	cbz	r0, 80133be <rcl_wait_set_clear+0x22>
 80133ae:	6862      	ldr	r2, [r4, #4]
 80133b0:	2100      	movs	r1, #0
 80133b2:	0092      	lsls	r2, r2, #2
 80133b4:	f006 f8c3 	bl	801953e <memset>
 80133b8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80133ba:	2200      	movs	r2, #0
 80133bc:	601a      	str	r2, [r3, #0]
 80133be:	68a0      	ldr	r0, [r4, #8]
 80133c0:	b138      	cbz	r0, 80133d2 <rcl_wait_set_clear+0x36>
 80133c2:	68e2      	ldr	r2, [r4, #12]
 80133c4:	2100      	movs	r1, #0
 80133c6:	0092      	lsls	r2, r2, #2
 80133c8:	f006 f8b9 	bl	801953e <memset>
 80133cc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80133ce:	2200      	movs	r2, #0
 80133d0:	60da      	str	r2, [r3, #12]
 80133d2:	69a0      	ldr	r0, [r4, #24]
 80133d4:	b138      	cbz	r0, 80133e6 <rcl_wait_set_clear+0x4a>
 80133d6:	69e2      	ldr	r2, [r4, #28]
 80133d8:	2100      	movs	r1, #0
 80133da:	0092      	lsls	r2, r2, #2
 80133dc:	f006 f8af 	bl	801953e <memset>
 80133e0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80133e2:	2200      	movs	r2, #0
 80133e4:	619a      	str	r2, [r3, #24]
 80133e6:	6a20      	ldr	r0, [r4, #32]
 80133e8:	b138      	cbz	r0, 80133fa <rcl_wait_set_clear+0x5e>
 80133ea:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80133ec:	2100      	movs	r1, #0
 80133ee:	0092      	lsls	r2, r2, #2
 80133f0:	f006 f8a5 	bl	801953e <memset>
 80133f4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80133f6:	2200      	movs	r2, #0
 80133f8:	625a      	str	r2, [r3, #36]	@ 0x24
 80133fa:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80133fc:	b138      	cbz	r0, 801340e <rcl_wait_set_clear+0x72>
 80133fe:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8013400:	2100      	movs	r1, #0
 8013402:	0092      	lsls	r2, r2, #2
 8013404:	f006 f89b 	bl	801953e <memset>
 8013408:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801340a:	2200      	movs	r2, #0
 801340c:	631a      	str	r2, [r3, #48]	@ 0x30
 801340e:	6920      	ldr	r0, [r4, #16]
 8013410:	b138      	cbz	r0, 8013422 <rcl_wait_set_clear+0x86>
 8013412:	6962      	ldr	r2, [r4, #20]
 8013414:	2100      	movs	r1, #0
 8013416:	0092      	lsls	r2, r2, #2
 8013418:	f006 f891 	bl	801953e <memset>
 801341c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801341e:	2200      	movs	r2, #0
 8013420:	641a      	str	r2, [r3, #64]	@ 0x40
 8013422:	6898      	ldr	r0, [r3, #8]
 8013424:	b138      	cbz	r0, 8013436 <rcl_wait_set_clear+0x9a>
 8013426:	685a      	ldr	r2, [r3, #4]
 8013428:	2100      	movs	r1, #0
 801342a:	0092      	lsls	r2, r2, #2
 801342c:	f006 f887 	bl	801953e <memset>
 8013430:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013432:	2200      	movs	r2, #0
 8013434:	605a      	str	r2, [r3, #4]
 8013436:	6958      	ldr	r0, [r3, #20]
 8013438:	b138      	cbz	r0, 801344a <rcl_wait_set_clear+0xae>
 801343a:	691a      	ldr	r2, [r3, #16]
 801343c:	2100      	movs	r1, #0
 801343e:	0092      	lsls	r2, r2, #2
 8013440:	f006 f87d 	bl	801953e <memset>
 8013444:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013446:	2200      	movs	r2, #0
 8013448:	611a      	str	r2, [r3, #16]
 801344a:	6a18      	ldr	r0, [r3, #32]
 801344c:	b138      	cbz	r0, 801345e <rcl_wait_set_clear+0xc2>
 801344e:	69da      	ldr	r2, [r3, #28]
 8013450:	2100      	movs	r1, #0
 8013452:	0092      	lsls	r2, r2, #2
 8013454:	f006 f873 	bl	801953e <memset>
 8013458:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801345a:	2200      	movs	r2, #0
 801345c:	61da      	str	r2, [r3, #28]
 801345e:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8013460:	b138      	cbz	r0, 8013472 <rcl_wait_set_clear+0xd6>
 8013462:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8013464:	2100      	movs	r1, #0
 8013466:	0092      	lsls	r2, r2, #2
 8013468:	f006 f869 	bl	801953e <memset>
 801346c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801346e:	2200      	movs	r2, #0
 8013470:	629a      	str	r2, [r3, #40]	@ 0x28
 8013472:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8013474:	b138      	cbz	r0, 8013486 <rcl_wait_set_clear+0xea>
 8013476:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8013478:	2100      	movs	r1, #0
 801347a:	0092      	lsls	r2, r2, #2
 801347c:	f006 f85f 	bl	801953e <memset>
 8013480:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013482:	2000      	movs	r0, #0
 8013484:	6358      	str	r0, [r3, #52]	@ 0x34
 8013486:	bd10      	pop	{r4, pc}
 8013488:	200b      	movs	r0, #11
 801348a:	4770      	bx	lr
 801348c:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8013490:	bd10      	pop	{r4, pc}
 8013492:	bf00      	nop

08013494 <rcl_wait_set_resize>:
 8013494:	2800      	cmp	r0, #0
 8013496:	f000 8185 	beq.w	80137a4 <rcl_wait_set_resize+0x310>
 801349a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801349e:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 80134a0:	b083      	sub	sp, #12
 80134a2:	4605      	mov	r5, r0
 80134a4:	2c00      	cmp	r4, #0
 80134a6:	f000 817f 	beq.w	80137a8 <rcl_wait_set_resize+0x314>
 80134aa:	f04f 0900 	mov.w	r9, #0
 80134ae:	f8d4 a058 	ldr.w	sl, [r4, #88]	@ 0x58
 80134b2:	461f      	mov	r7, r3
 80134b4:	4688      	mov	r8, r1
 80134b6:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	@ 0x4c
 80134ba:	4616      	mov	r6, r2
 80134bc:	f8c0 9004 	str.w	r9, [r0, #4]
 80134c0:	f8c4 9000 	str.w	r9, [r4]
 80134c4:	2900      	cmp	r1, #0
 80134c6:	f000 80bd 	beq.w	8013644 <rcl_wait_set_resize+0x1b0>
 80134ca:	008c      	lsls	r4, r1, #2
 80134cc:	6800      	ldr	r0, [r0, #0]
 80134ce:	9301      	str	r3, [sp, #4]
 80134d0:	4652      	mov	r2, sl
 80134d2:	4621      	mov	r1, r4
 80134d4:	4798      	blx	r3
 80134d6:	9b01      	ldr	r3, [sp, #4]
 80134d8:	6028      	str	r0, [r5, #0]
 80134da:	2800      	cmp	r0, #0
 80134dc:	f000 80cb 	beq.w	8013676 <rcl_wait_set_resize+0x1e2>
 80134e0:	4622      	mov	r2, r4
 80134e2:	4649      	mov	r1, r9
 80134e4:	9301      	str	r3, [sp, #4]
 80134e6:	f006 f82a 	bl	801953e <memset>
 80134ea:	f8c5 8004 	str.w	r8, [r5, #4]
 80134ee:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 80134f2:	9b01      	ldr	r3, [sp, #4]
 80134f4:	f8d8 0008 	ldr.w	r0, [r8, #8]
 80134f8:	f8c8 9004 	str.w	r9, [r8, #4]
 80134fc:	4652      	mov	r2, sl
 80134fe:	4621      	mov	r1, r4
 8013500:	4798      	blx	r3
 8013502:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8013504:	f8c8 0008 	str.w	r0, [r8, #8]
 8013508:	689b      	ldr	r3, [r3, #8]
 801350a:	2b00      	cmp	r3, #0
 801350c:	f000 80ac 	beq.w	8013668 <rcl_wait_set_resize+0x1d4>
 8013510:	4622      	mov	r2, r4
 8013512:	4649      	mov	r1, r9
 8013514:	4618      	mov	r0, r3
 8013516:	f006 f812 	bl	801953e <memset>
 801351a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801351c:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8013520:	f04f 0800 	mov.w	r8, #0
 8013524:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	@ 0x4c
 8013528:	f8c5 800c 	str.w	r8, [r5, #12]
 801352c:	f8c4 800c 	str.w	r8, [r4, #12]
 8013530:	2e00      	cmp	r6, #0
 8013532:	f040 80a4 	bne.w	801367e <rcl_wait_set_resize+0x1ea>
 8013536:	68a8      	ldr	r0, [r5, #8]
 8013538:	b128      	cbz	r0, 8013546 <rcl_wait_set_resize+0xb2>
 801353a:	4649      	mov	r1, r9
 801353c:	4790      	blx	r2
 801353e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013540:	60ae      	str	r6, [r5, #8]
 8013542:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8013546:	f04f 0800 	mov.w	r8, #0
 801354a:	19f6      	adds	r6, r6, r7
 801354c:	f8c4 8010 	str.w	r8, [r4, #16]
 8013550:	f040 80ac 	bne.w	80136ac <rcl_wait_set_resize+0x218>
 8013554:	6960      	ldr	r0, [r4, #20]
 8013556:	b130      	cbz	r0, 8013566 <rcl_wait_set_resize+0xd2>
 8013558:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 801355a:	4649      	mov	r1, r9
 801355c:	4798      	blx	r3
 801355e:	6166      	str	r6, [r4, #20]
 8013560:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013562:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8013566:	2600      	movs	r6, #0
 8013568:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 801356c:	616e      	str	r6, [r5, #20]
 801356e:	6426      	str	r6, [r4, #64]	@ 0x40
 8013570:	2f00      	cmp	r7, #0
 8013572:	f040 80ad 	bne.w	80136d0 <rcl_wait_set_resize+0x23c>
 8013576:	6928      	ldr	r0, [r5, #16]
 8013578:	b138      	cbz	r0, 801358a <rcl_wait_set_resize+0xf6>
 801357a:	4649      	mov	r1, r9
 801357c:	47d0      	blx	sl
 801357e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013580:	612f      	str	r7, [r5, #16]
 8013582:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8013586:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801358a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801358c:	2600      	movs	r6, #0
 801358e:	61ee      	str	r6, [r5, #28]
 8013590:	61a6      	str	r6, [r4, #24]
 8013592:	2b00      	cmp	r3, #0
 8013594:	f040 80af 	bne.w	80136f6 <rcl_wait_set_resize+0x262>
 8013598:	69a8      	ldr	r0, [r5, #24]
 801359a:	b120      	cbz	r0, 80135a6 <rcl_wait_set_resize+0x112>
 801359c:	4649      	mov	r1, r9
 801359e:	47d0      	blx	sl
 80135a0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80135a2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80135a4:	61ab      	str	r3, [r5, #24]
 80135a6:	6a20      	ldr	r0, [r4, #32]
 80135a8:	b128      	cbz	r0, 80135b6 <rcl_wait_set_resize+0x122>
 80135aa:	4649      	mov	r1, r9
 80135ac:	47d0      	blx	sl
 80135ae:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80135b0:	2300      	movs	r3, #0
 80135b2:	e9c4 3307 	strd	r3, r3, [r4, #28]
 80135b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80135b8:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 80135ba:	2600      	movs	r6, #0
 80135bc:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 80135c0:	626e      	str	r6, [r5, #36]	@ 0x24
 80135c2:	6266      	str	r6, [r4, #36]	@ 0x24
 80135c4:	2b00      	cmp	r3, #0
 80135c6:	f000 80b6 	beq.w	8013736 <rcl_wait_set_resize+0x2a2>
 80135ca:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 80135ce:	6a28      	ldr	r0, [r5, #32]
 80135d0:	463a      	mov	r2, r7
 80135d2:	4651      	mov	r1, sl
 80135d4:	47c8      	blx	r9
 80135d6:	6228      	str	r0, [r5, #32]
 80135d8:	2800      	cmp	r0, #0
 80135da:	d04c      	beq.n	8013676 <rcl_wait_set_resize+0x1e2>
 80135dc:	4652      	mov	r2, sl
 80135de:	4631      	mov	r1, r6
 80135e0:	f005 ffad 	bl	801953e <memset>
 80135e4:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80135e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80135e8:	626b      	str	r3, [r5, #36]	@ 0x24
 80135ea:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80135ec:	62a6      	str	r6, [r4, #40]	@ 0x28
 80135ee:	463a      	mov	r2, r7
 80135f0:	4651      	mov	r1, sl
 80135f2:	47c8      	blx	r9
 80135f4:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80135f6:	62e0      	str	r0, [r4, #44]	@ 0x2c
 80135f8:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 80135fa:	2c00      	cmp	r4, #0
 80135fc:	f000 80f0 	beq.w	80137e0 <rcl_wait_set_resize+0x34c>
 8013600:	4620      	mov	r0, r4
 8013602:	4652      	mov	r2, sl
 8013604:	4631      	mov	r1, r6
 8013606:	f005 ff9a 	bl	801953e <memset>
 801360a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801360c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801360e:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8013610:	2600      	movs	r6, #0
 8013612:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 8013616:	62ee      	str	r6, [r5, #44]	@ 0x2c
 8013618:	6326      	str	r6, [r4, #48]	@ 0x30
 801361a:	2b00      	cmp	r3, #0
 801361c:	f040 809d 	bne.w	801375a <rcl_wait_set_resize+0x2c6>
 8013620:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8013622:	b120      	cbz	r0, 801362e <rcl_wait_set_resize+0x19a>
 8013624:	4639      	mov	r1, r7
 8013626:	47c0      	blx	r8
 8013628:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801362a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801362c:	62ab      	str	r3, [r5, #40]	@ 0x28
 801362e:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8013630:	b310      	cbz	r0, 8013678 <rcl_wait_set_resize+0x1e4>
 8013632:	4639      	mov	r1, r7
 8013634:	47c0      	blx	r8
 8013636:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8013638:	2000      	movs	r0, #0
 801363a:	e9c3 000d 	strd	r0, r0, [r3, #52]	@ 0x34
 801363e:	b003      	add	sp, #12
 8013640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013644:	6800      	ldr	r0, [r0, #0]
 8013646:	b120      	cbz	r0, 8013652 <rcl_wait_set_resize+0x1be>
 8013648:	4651      	mov	r1, sl
 801364a:	47d8      	blx	fp
 801364c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801364e:	f8c5 8000 	str.w	r8, [r5]
 8013652:	68a0      	ldr	r0, [r4, #8]
 8013654:	2800      	cmp	r0, #0
 8013656:	f43f af61 	beq.w	801351c <rcl_wait_set_resize+0x88>
 801365a:	4651      	mov	r1, sl
 801365c:	47d8      	blx	fp
 801365e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013660:	2300      	movs	r3, #0
 8013662:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8013666:	e759      	b.n	801351c <rcl_wait_set_resize+0x88>
 8013668:	6828      	ldr	r0, [r5, #0]
 801366a:	9301      	str	r3, [sp, #4]
 801366c:	4651      	mov	r1, sl
 801366e:	47d8      	blx	fp
 8013670:	9b01      	ldr	r3, [sp, #4]
 8013672:	e9c5 3300 	strd	r3, r3, [r5]
 8013676:	200a      	movs	r0, #10
 8013678:	b003      	add	sp, #12
 801367a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801367e:	00b4      	lsls	r4, r6, #2
 8013680:	68a8      	ldr	r0, [r5, #8]
 8013682:	464a      	mov	r2, r9
 8013684:	4621      	mov	r1, r4
 8013686:	4798      	blx	r3
 8013688:	60a8      	str	r0, [r5, #8]
 801368a:	2800      	cmp	r0, #0
 801368c:	d0f3      	beq.n	8013676 <rcl_wait_set_resize+0x1e2>
 801368e:	4622      	mov	r2, r4
 8013690:	4641      	mov	r1, r8
 8013692:	f005 ff54 	bl	801953e <memset>
 8013696:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013698:	60ee      	str	r6, [r5, #12]
 801369a:	f04f 0800 	mov.w	r8, #0
 801369e:	19f6      	adds	r6, r6, r7
 80136a0:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80136a4:	f8c4 8010 	str.w	r8, [r4, #16]
 80136a8:	f43f af54 	beq.w	8013554 <rcl_wait_set_resize+0xc0>
 80136ac:	00b6      	lsls	r6, r6, #2
 80136ae:	464a      	mov	r2, r9
 80136b0:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80136b2:	6960      	ldr	r0, [r4, #20]
 80136b4:	4631      	mov	r1, r6
 80136b6:	4798      	blx	r3
 80136b8:	4681      	mov	r9, r0
 80136ba:	6160      	str	r0, [r4, #20]
 80136bc:	2800      	cmp	r0, #0
 80136be:	d076      	beq.n	80137ae <rcl_wait_set_resize+0x31a>
 80136c0:	4632      	mov	r2, r6
 80136c2:	4641      	mov	r1, r8
 80136c4:	f005 ff3b 	bl	801953e <memset>
 80136c8:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80136ca:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80136ce:	e74a      	b.n	8013566 <rcl_wait_set_resize+0xd2>
 80136d0:	00bc      	lsls	r4, r7, #2
 80136d2:	6928      	ldr	r0, [r5, #16]
 80136d4:	464a      	mov	r2, r9
 80136d6:	4621      	mov	r1, r4
 80136d8:	47c0      	blx	r8
 80136da:	6128      	str	r0, [r5, #16]
 80136dc:	2800      	cmp	r0, #0
 80136de:	d0ca      	beq.n	8013676 <rcl_wait_set_resize+0x1e2>
 80136e0:	4622      	mov	r2, r4
 80136e2:	4631      	mov	r1, r6
 80136e4:	f005 ff2b 	bl	801953e <memset>
 80136e8:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80136ea:	616f      	str	r7, [r5, #20]
 80136ec:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 80136f0:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80136f4:	e749      	b.n	801358a <rcl_wait_set_resize+0xf6>
 80136f6:	009c      	lsls	r4, r3, #2
 80136f8:	69a8      	ldr	r0, [r5, #24]
 80136fa:	464a      	mov	r2, r9
 80136fc:	4621      	mov	r1, r4
 80136fe:	47c0      	blx	r8
 8013700:	61a8      	str	r0, [r5, #24]
 8013702:	2800      	cmp	r0, #0
 8013704:	d0b7      	beq.n	8013676 <rcl_wait_set_resize+0x1e2>
 8013706:	4622      	mov	r2, r4
 8013708:	4631      	mov	r1, r6
 801370a:	f005 ff18 	bl	801953e <memset>
 801370e:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
 8013710:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013712:	61eb      	str	r3, [r5, #28]
 8013714:	6a38      	ldr	r0, [r7, #32]
 8013716:	61fe      	str	r6, [r7, #28]
 8013718:	464a      	mov	r2, r9
 801371a:	4621      	mov	r1, r4
 801371c:	47c0      	blx	r8
 801371e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8013720:	6238      	str	r0, [r7, #32]
 8013722:	6a1f      	ldr	r7, [r3, #32]
 8013724:	2f00      	cmp	r7, #0
 8013726:	d054      	beq.n	80137d2 <rcl_wait_set_resize+0x33e>
 8013728:	4622      	mov	r2, r4
 801372a:	4631      	mov	r1, r6
 801372c:	4638      	mov	r0, r7
 801372e:	f005 ff06 	bl	801953e <memset>
 8013732:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013734:	e73f      	b.n	80135b6 <rcl_wait_set_resize+0x122>
 8013736:	6a28      	ldr	r0, [r5, #32]
 8013738:	b120      	cbz	r0, 8013744 <rcl_wait_set_resize+0x2b0>
 801373a:	4639      	mov	r1, r7
 801373c:	47c0      	blx	r8
 801373e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013740:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013742:	622b      	str	r3, [r5, #32]
 8013744:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8013746:	2800      	cmp	r0, #0
 8013748:	f43f af60 	beq.w	801360c <rcl_wait_set_resize+0x178>
 801374c:	4639      	mov	r1, r7
 801374e:	47c0      	blx	r8
 8013750:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013752:	2300      	movs	r3, #0
 8013754:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 8013758:	e758      	b.n	801360c <rcl_wait_set_resize+0x178>
 801375a:	009c      	lsls	r4, r3, #2
 801375c:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 801375e:	463a      	mov	r2, r7
 8013760:	4621      	mov	r1, r4
 8013762:	47c8      	blx	r9
 8013764:	62a8      	str	r0, [r5, #40]	@ 0x28
 8013766:	2800      	cmp	r0, #0
 8013768:	d085      	beq.n	8013676 <rcl_wait_set_resize+0x1e2>
 801376a:	4622      	mov	r2, r4
 801376c:	4631      	mov	r1, r6
 801376e:	f005 fee6 	bl	801953e <memset>
 8013772:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 8013776:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013778:	62eb      	str	r3, [r5, #44]	@ 0x2c
 801377a:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 801377e:	f8ca 6034 	str.w	r6, [sl, #52]	@ 0x34
 8013782:	463a      	mov	r2, r7
 8013784:	4621      	mov	r1, r4
 8013786:	47c8      	blx	r9
 8013788:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801378a:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 801378e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013790:	b36b      	cbz	r3, 80137ee <rcl_wait_set_resize+0x35a>
 8013792:	4622      	mov	r2, r4
 8013794:	4631      	mov	r1, r6
 8013796:	4618      	mov	r0, r3
 8013798:	f005 fed1 	bl	801953e <memset>
 801379c:	4630      	mov	r0, r6
 801379e:	b003      	add	sp, #12
 80137a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80137a4:	200b      	movs	r0, #11
 80137a6:	4770      	bx	lr
 80137a8:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80137ac:	e764      	b.n	8013678 <rcl_wait_set_resize+0x1e4>
 80137ae:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80137b0:	68a8      	ldr	r0, [r5, #8]
 80137b2:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 80137b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80137b6:	4798      	blx	r3
 80137b8:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80137ba:	6928      	ldr	r0, [r5, #16]
 80137bc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80137be:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 80137c0:	f8c5 900c 	str.w	r9, [r5, #12]
 80137c4:	f8c5 9008 	str.w	r9, [r5, #8]
 80137c8:	4790      	blx	r2
 80137ca:	e9c5 9904 	strd	r9, r9, [r5, #16]
 80137ce:	200a      	movs	r0, #10
 80137d0:	e752      	b.n	8013678 <rcl_wait_set_resize+0x1e4>
 80137d2:	69a8      	ldr	r0, [r5, #24]
 80137d4:	4649      	mov	r1, r9
 80137d6:	47d0      	blx	sl
 80137d8:	e9c5 7706 	strd	r7, r7, [r5, #24]
 80137dc:	200a      	movs	r0, #10
 80137de:	e74b      	b.n	8013678 <rcl_wait_set_resize+0x1e4>
 80137e0:	6a28      	ldr	r0, [r5, #32]
 80137e2:	4639      	mov	r1, r7
 80137e4:	47c0      	blx	r8
 80137e6:	e9c5 4408 	strd	r4, r4, [r5, #32]
 80137ea:	200a      	movs	r0, #10
 80137ec:	e744      	b.n	8013678 <rcl_wait_set_resize+0x1e4>
 80137ee:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 80137f0:	9301      	str	r3, [sp, #4]
 80137f2:	4639      	mov	r1, r7
 80137f4:	47c0      	blx	r8
 80137f6:	9b01      	ldr	r3, [sp, #4]
 80137f8:	200a      	movs	r0, #10
 80137fa:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 80137fe:	e73b      	b.n	8013678 <rcl_wait_set_resize+0x1e4>

08013800 <rcl_wait_set_init>:
 8013800:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013804:	b084      	sub	sp, #16
 8013806:	4604      	mov	r4, r0
 8013808:	a810      	add	r0, sp, #64	@ 0x40
 801380a:	f8dd a03c 	ldr.w	sl, [sp, #60]	@ 0x3c
 801380e:	460f      	mov	r7, r1
 8013810:	4690      	mov	r8, r2
 8013812:	4699      	mov	r9, r3
 8013814:	f7f7 fe00 	bl	800b418 <rcutils_allocator_is_valid>
 8013818:	2800      	cmp	r0, #0
 801381a:	d06b      	beq.n	80138f4 <rcl_wait_set_init+0xf4>
 801381c:	2c00      	cmp	r4, #0
 801381e:	d069      	beq.n	80138f4 <rcl_wait_set_init+0xf4>
 8013820:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8013822:	b125      	cbz	r5, 801382e <rcl_wait_set_init+0x2e>
 8013824:	2564      	movs	r5, #100	@ 0x64
 8013826:	4628      	mov	r0, r5
 8013828:	b004      	add	sp, #16
 801382a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801382e:	f1ba 0f00 	cmp.w	sl, #0
 8013832:	d05f      	beq.n	80138f4 <rcl_wait_set_init+0xf4>
 8013834:	4650      	mov	r0, sl
 8013836:	f7fe fb3f 	bl	8011eb8 <rcl_context_is_valid>
 801383a:	2800      	cmp	r0, #0
 801383c:	d067      	beq.n	801390e <rcl_wait_set_init+0x10e>
 801383e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8013840:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8013842:	205c      	movs	r0, #92	@ 0x5c
 8013844:	4798      	blx	r3
 8013846:	6320      	str	r0, [r4, #48]	@ 0x30
 8013848:	2800      	cmp	r0, #0
 801384a:	d062      	beq.n	8013912 <rcl_wait_set_init+0x112>
 801384c:	4629      	mov	r1, r5
 801384e:	225c      	movs	r2, #92	@ 0x5c
 8013850:	f005 fe75 	bl	801953e <memset>
 8013854:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
 8013858:	eb03 0e02 	add.w	lr, r3, r2
 801385c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801385e:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8013860:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 8013864:	449e      	add	lr, r3
 8013866:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801386a:	e9c6 5501 	strd	r5, r5, [r6, #4]
 801386e:	e9c6 5504 	strd	r5, r5, [r6, #16]
 8013872:	e9c6 5507 	strd	r5, r5, [r6, #28]
 8013876:	e9c6 550a 	strd	r5, r5, [r6, #40]	@ 0x28
 801387a:	e9c6 550d 	strd	r5, r5, [r6, #52]	@ 0x34
 801387e:	f106 0548 	add.w	r5, r6, #72	@ 0x48
 8013882:	f8c6 a044 	str.w	sl, [r6, #68]	@ 0x44
 8013886:	f8da a000 	ldr.w	sl, [sl]
 801388a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801388c:	44c6      	add	lr, r8
 801388e:	f8dc 3000 	ldr.w	r3, [ip]
 8013892:	602b      	str	r3, [r5, #0]
 8013894:	eb0e 0147 	add.w	r1, lr, r7, lsl #1
 8013898:	f10a 0028 	add.w	r0, sl, #40	@ 0x28
 801389c:	f002 fe6c 	bl	8016578 <rmw_create_wait_set>
 80138a0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80138a2:	63f0      	str	r0, [r6, #60]	@ 0x3c
 80138a4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80138a6:	b350      	cbz	r0, 80138fe <rcl_wait_set_init+0xfe>
 80138a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80138aa:	9302      	str	r3, [sp, #8]
 80138ac:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80138ae:	9301      	str	r3, [sp, #4]
 80138b0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80138b2:	9300      	str	r3, [sp, #0]
 80138b4:	4642      	mov	r2, r8
 80138b6:	464b      	mov	r3, r9
 80138b8:	4639      	mov	r1, r7
 80138ba:	4620      	mov	r0, r4
 80138bc:	f7ff fdea 	bl	8013494 <rcl_wait_set_resize>
 80138c0:	4605      	mov	r5, r0
 80138c2:	2800      	cmp	r0, #0
 80138c4:	d0af      	beq.n	8013826 <rcl_wait_set_init+0x26>
 80138c6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80138c8:	bb2b      	cbnz	r3, 8013916 <rcl_wait_set_init+0x116>
 80138ca:	2600      	movs	r6, #0
 80138cc:	e9cd 6601 	strd	r6, r6, [sp, #4]
 80138d0:	9600      	str	r6, [sp, #0]
 80138d2:	4633      	mov	r3, r6
 80138d4:	4632      	mov	r2, r6
 80138d6:	4631      	mov	r1, r6
 80138d8:	4620      	mov	r0, r4
 80138da:	f7ff fddb 	bl	8013494 <rcl_wait_set_resize>
 80138de:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80138e0:	2800      	cmp	r0, #0
 80138e2:	d0a0      	beq.n	8013826 <rcl_wait_set_init+0x26>
 80138e4:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 80138e6:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 80138e8:	4798      	blx	r3
 80138ea:	4628      	mov	r0, r5
 80138ec:	6326      	str	r6, [r4, #48]	@ 0x30
 80138ee:	b004      	add	sp, #16
 80138f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80138f4:	250b      	movs	r5, #11
 80138f6:	4628      	mov	r0, r5
 80138f8:	b004      	add	sp, #16
 80138fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80138fe:	2501      	movs	r5, #1
 8013900:	f002 fe44 	bl	801658c <rmw_destroy_wait_set>
 8013904:	2800      	cmp	r0, #0
 8013906:	bf18      	it	ne
 8013908:	f44f 7561 	movne.w	r5, #900	@ 0x384
 801390c:	e7dd      	b.n	80138ca <rcl_wait_set_init+0xca>
 801390e:	2565      	movs	r5, #101	@ 0x65
 8013910:	e789      	b.n	8013826 <rcl_wait_set_init+0x26>
 8013912:	250a      	movs	r5, #10
 8013914:	e787      	b.n	8013826 <rcl_wait_set_init+0x26>
 8013916:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8013918:	e7f2      	b.n	8013900 <rcl_wait_set_init+0x100>
 801391a:	bf00      	nop

0801391c <rcl_wait_set_add_guard_condition>:
 801391c:	b318      	cbz	r0, 8013966 <rcl_wait_set_add_guard_condition+0x4a>
 801391e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8013920:	b570      	push	{r4, r5, r6, lr}
 8013922:	4604      	mov	r4, r0
 8013924:	b30b      	cbz	r3, 801396a <rcl_wait_set_add_guard_condition+0x4e>
 8013926:	b319      	cbz	r1, 8013970 <rcl_wait_set_add_guard_condition+0x54>
 8013928:	68dd      	ldr	r5, [r3, #12]
 801392a:	68c0      	ldr	r0, [r0, #12]
 801392c:	4285      	cmp	r5, r0
 801392e:	d217      	bcs.n	8013960 <rcl_wait_set_add_guard_condition+0x44>
 8013930:	68a0      	ldr	r0, [r4, #8]
 8013932:	1c6e      	adds	r6, r5, #1
 8013934:	60de      	str	r6, [r3, #12]
 8013936:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 801393a:	b102      	cbz	r2, 801393e <rcl_wait_set_add_guard_condition+0x22>
 801393c:	6015      	str	r5, [r2, #0]
 801393e:	4608      	mov	r0, r1
 8013940:	f004 fdf2 	bl	8018528 <rcl_guard_condition_get_rmw_handle>
 8013944:	b150      	cbz	r0, 801395c <rcl_wait_set_add_guard_condition+0x40>
 8013946:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013948:	6842      	ldr	r2, [r0, #4]
 801394a:	695b      	ldr	r3, [r3, #20]
 801394c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013950:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8013952:	6913      	ldr	r3, [r2, #16]
 8013954:	3301      	adds	r3, #1
 8013956:	2000      	movs	r0, #0
 8013958:	6113      	str	r3, [r2, #16]
 801395a:	bd70      	pop	{r4, r5, r6, pc}
 801395c:	2001      	movs	r0, #1
 801395e:	bd70      	pop	{r4, r5, r6, pc}
 8013960:	f240 3086 	movw	r0, #902	@ 0x386
 8013964:	bd70      	pop	{r4, r5, r6, pc}
 8013966:	200b      	movs	r0, #11
 8013968:	4770      	bx	lr
 801396a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801396e:	bd70      	pop	{r4, r5, r6, pc}
 8013970:	200b      	movs	r0, #11
 8013972:	bd70      	pop	{r4, r5, r6, pc}

08013974 <rcl_wait_set_add_timer>:
 8013974:	b328      	cbz	r0, 80139c2 <rcl_wait_set_add_timer+0x4e>
 8013976:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8013978:	b570      	push	{r4, r5, r6, lr}
 801397a:	4604      	mov	r4, r0
 801397c:	b31b      	cbz	r3, 80139c6 <rcl_wait_set_add_timer+0x52>
 801397e:	b329      	cbz	r1, 80139cc <rcl_wait_set_add_timer+0x58>
 8013980:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8013982:	6965      	ldr	r5, [r4, #20]
 8013984:	42a8      	cmp	r0, r5
 8013986:	d219      	bcs.n	80139bc <rcl_wait_set_add_timer+0x48>
 8013988:	6925      	ldr	r5, [r4, #16]
 801398a:	1c46      	adds	r6, r0, #1
 801398c:	641e      	str	r6, [r3, #64]	@ 0x40
 801398e:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 8013992:	b102      	cbz	r2, 8013996 <rcl_wait_set_add_timer+0x22>
 8013994:	6010      	str	r0, [r2, #0]
 8013996:	4608      	mov	r0, r1
 8013998:	f7ff fba6 	bl	80130e8 <rcl_timer_get_guard_condition>
 801399c:	b168      	cbz	r0, 80139ba <rcl_wait_set_add_timer+0x46>
 801399e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80139a0:	68e3      	ldr	r3, [r4, #12]
 80139a2:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 80139a4:	3b01      	subs	r3, #1
 80139a6:	441d      	add	r5, r3
 80139a8:	f004 fdbe 	bl	8018528 <rcl_guard_condition_get_rmw_handle>
 80139ac:	b180      	cbz	r0, 80139d0 <rcl_wait_set_add_timer+0x5c>
 80139ae:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80139b0:	6842      	ldr	r2, [r0, #4]
 80139b2:	695b      	ldr	r3, [r3, #20]
 80139b4:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80139b8:	2000      	movs	r0, #0
 80139ba:	bd70      	pop	{r4, r5, r6, pc}
 80139bc:	f240 3086 	movw	r0, #902	@ 0x386
 80139c0:	bd70      	pop	{r4, r5, r6, pc}
 80139c2:	200b      	movs	r0, #11
 80139c4:	4770      	bx	lr
 80139c6:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80139ca:	bd70      	pop	{r4, r5, r6, pc}
 80139cc:	200b      	movs	r0, #11
 80139ce:	bd70      	pop	{r4, r5, r6, pc}
 80139d0:	2001      	movs	r0, #1
 80139d2:	bd70      	pop	{r4, r5, r6, pc}

080139d4 <rcl_wait_set_add_client>:
 80139d4:	b318      	cbz	r0, 8013a1e <rcl_wait_set_add_client+0x4a>
 80139d6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80139d8:	b570      	push	{r4, r5, r6, lr}
 80139da:	4604      	mov	r4, r0
 80139dc:	b30b      	cbz	r3, 8013a22 <rcl_wait_set_add_client+0x4e>
 80139de:	b319      	cbz	r1, 8013a28 <rcl_wait_set_add_client+0x54>
 80139e0:	699d      	ldr	r5, [r3, #24]
 80139e2:	69c0      	ldr	r0, [r0, #28]
 80139e4:	4285      	cmp	r5, r0
 80139e6:	d217      	bcs.n	8013a18 <rcl_wait_set_add_client+0x44>
 80139e8:	69a0      	ldr	r0, [r4, #24]
 80139ea:	1c6e      	adds	r6, r5, #1
 80139ec:	619e      	str	r6, [r3, #24]
 80139ee:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80139f2:	b102      	cbz	r2, 80139f6 <rcl_wait_set_add_client+0x22>
 80139f4:	6015      	str	r5, [r2, #0]
 80139f6:	4608      	mov	r0, r1
 80139f8:	f7fe f9b0 	bl	8011d5c <rcl_client_get_rmw_handle>
 80139fc:	b150      	cbz	r0, 8013a14 <rcl_wait_set_add_client+0x40>
 80139fe:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013a00:	6842      	ldr	r2, [r0, #4]
 8013a02:	6a1b      	ldr	r3, [r3, #32]
 8013a04:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013a08:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8013a0a:	69d3      	ldr	r3, [r2, #28]
 8013a0c:	3301      	adds	r3, #1
 8013a0e:	2000      	movs	r0, #0
 8013a10:	61d3      	str	r3, [r2, #28]
 8013a12:	bd70      	pop	{r4, r5, r6, pc}
 8013a14:	2001      	movs	r0, #1
 8013a16:	bd70      	pop	{r4, r5, r6, pc}
 8013a18:	f240 3086 	movw	r0, #902	@ 0x386
 8013a1c:	bd70      	pop	{r4, r5, r6, pc}
 8013a1e:	200b      	movs	r0, #11
 8013a20:	4770      	bx	lr
 8013a22:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8013a26:	bd70      	pop	{r4, r5, r6, pc}
 8013a28:	200b      	movs	r0, #11
 8013a2a:	bd70      	pop	{r4, r5, r6, pc}

08013a2c <rcl_wait_set_add_service>:
 8013a2c:	b318      	cbz	r0, 8013a76 <rcl_wait_set_add_service+0x4a>
 8013a2e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8013a30:	b570      	push	{r4, r5, r6, lr}
 8013a32:	4604      	mov	r4, r0
 8013a34:	b30b      	cbz	r3, 8013a7a <rcl_wait_set_add_service+0x4e>
 8013a36:	b319      	cbz	r1, 8013a80 <rcl_wait_set_add_service+0x54>
 8013a38:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8013a3a:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8013a3c:	4285      	cmp	r5, r0
 8013a3e:	d217      	bcs.n	8013a70 <rcl_wait_set_add_service+0x44>
 8013a40:	6a20      	ldr	r0, [r4, #32]
 8013a42:	1c6e      	adds	r6, r5, #1
 8013a44:	625e      	str	r6, [r3, #36]	@ 0x24
 8013a46:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8013a4a:	b102      	cbz	r2, 8013a4e <rcl_wait_set_add_service+0x22>
 8013a4c:	6015      	str	r5, [r2, #0]
 8013a4e:	4608      	mov	r0, r1
 8013a50:	f7ff f804 	bl	8012a5c <rcl_service_get_rmw_handle>
 8013a54:	b150      	cbz	r0, 8013a6c <rcl_wait_set_add_service+0x40>
 8013a56:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013a58:	6842      	ldr	r2, [r0, #4]
 8013a5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013a5c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013a60:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8013a62:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8013a64:	3301      	adds	r3, #1
 8013a66:	2000      	movs	r0, #0
 8013a68:	6293      	str	r3, [r2, #40]	@ 0x28
 8013a6a:	bd70      	pop	{r4, r5, r6, pc}
 8013a6c:	2001      	movs	r0, #1
 8013a6e:	bd70      	pop	{r4, r5, r6, pc}
 8013a70:	f240 3086 	movw	r0, #902	@ 0x386
 8013a74:	bd70      	pop	{r4, r5, r6, pc}
 8013a76:	200b      	movs	r0, #11
 8013a78:	4770      	bx	lr
 8013a7a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8013a7e:	bd70      	pop	{r4, r5, r6, pc}
 8013a80:	200b      	movs	r0, #11
 8013a82:	bd70      	pop	{r4, r5, r6, pc}
 8013a84:	0000      	movs	r0, r0
	...

08013a88 <rcl_wait>:
 8013a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a8c:	ed2d 8b02 	vpush	{d8}
 8013a90:	b08d      	sub	sp, #52	@ 0x34
 8013a92:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8013a96:	2800      	cmp	r0, #0
 8013a98:	f000 8143 	beq.w	8013d22 <rcl_wait+0x29a>
 8013a9c:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8013a9e:	4605      	mov	r5, r0
 8013aa0:	2e00      	cmp	r6, #0
 8013aa2:	f000 8112 	beq.w	8013cca <rcl_wait+0x242>
 8013aa6:	6843      	ldr	r3, [r0, #4]
 8013aa8:	b983      	cbnz	r3, 8013acc <rcl_wait+0x44>
 8013aaa:	68eb      	ldr	r3, [r5, #12]
 8013aac:	b973      	cbnz	r3, 8013acc <rcl_wait+0x44>
 8013aae:	696b      	ldr	r3, [r5, #20]
 8013ab0:	b963      	cbnz	r3, 8013acc <rcl_wait+0x44>
 8013ab2:	69eb      	ldr	r3, [r5, #28]
 8013ab4:	b953      	cbnz	r3, 8013acc <rcl_wait+0x44>
 8013ab6:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8013ab8:	b943      	cbnz	r3, 8013acc <rcl_wait+0x44>
 8013aba:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8013abc:	b933      	cbnz	r3, 8013acc <rcl_wait+0x44>
 8013abe:	f240 3085 	movw	r0, #901	@ 0x385
 8013ac2:	b00d      	add	sp, #52	@ 0x34
 8013ac4:	ecbd 8b02 	vpop	{d8}
 8013ac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013acc:	9b04      	ldr	r3, [sp, #16]
 8013ace:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8013ad0:	2b01      	cmp	r3, #1
 8013ad2:	9b05      	ldr	r3, [sp, #20]
 8013ad4:	f173 0300 	sbcs.w	r3, r3, #0
 8013ad8:	f2c0 80f0 	blt.w	8013cbc <rcl_wait+0x234>
 8013adc:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 8013ae0:	4643      	mov	r3, r8
 8013ae2:	2a00      	cmp	r2, #0
 8013ae4:	f000 8133 	beq.w	8013d4e <rcl_wait+0x2c6>
 8013ae8:	2400      	movs	r4, #0
 8013aea:	4613      	mov	r3, r2
 8013aec:	ed9f 8b9c 	vldr	d8, [pc, #624]	@ 8013d60 <rcl_wait+0x2d8>
 8013af0:	46a2      	mov	sl, r4
 8013af2:	46a3      	mov	fp, r4
 8013af4:	f240 3921 	movw	r9, #801	@ 0x321
 8013af8:	4632      	mov	r2, r6
 8013afa:	e014      	b.n	8013b26 <rcl_wait+0x9e>
 8013afc:	2800      	cmp	r0, #0
 8013afe:	d1e0      	bne.n	8013ac2 <rcl_wait+0x3a>
 8013b00:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8013b04:	4542      	cmp	r2, r8
 8013b06:	eb73 0107 	sbcs.w	r1, r3, r7
 8013b0a:	da03      	bge.n	8013b14 <rcl_wait+0x8c>
 8013b0c:	4690      	mov	r8, r2
 8013b0e:	461f      	mov	r7, r3
 8013b10:	f04f 0b01 	mov.w	fp, #1
 8013b14:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8013b16:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8013b18:	3401      	adds	r4, #1
 8013b1a:	f14a 0a00 	adc.w	sl, sl, #0
 8013b1e:	429c      	cmp	r4, r3
 8013b20:	f17a 0100 	sbcs.w	r1, sl, #0
 8013b24:	d228      	bcs.n	8013b78 <rcl_wait+0xf0>
 8013b26:	6928      	ldr	r0, [r5, #16]
 8013b28:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8013b2c:	a908      	add	r1, sp, #32
 8013b2e:	00a6      	lsls	r6, r4, #2
 8013b30:	2800      	cmp	r0, #0
 8013b32:	d0f1      	beq.n	8013b18 <rcl_wait+0x90>
 8013b34:	68eb      	ldr	r3, [r5, #12]
 8013b36:	f8d2 c014 	ldr.w	ip, [r2, #20]
 8013b3a:	4423      	add	r3, r4
 8013b3c:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 8013b40:	f1be 0f00 	cmp.w	lr, #0
 8013b44:	d006      	beq.n	8013b54 <rcl_wait+0xcc>
 8013b46:	6913      	ldr	r3, [r2, #16]
 8013b48:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 8013b4c:	3301      	adds	r3, #1
 8013b4e:	6113      	str	r3, [r2, #16]
 8013b50:	692b      	ldr	r3, [r5, #16]
 8013b52:	5998      	ldr	r0, [r3, r6]
 8013b54:	ed8d 8b08 	vstr	d8, [sp, #32]
 8013b58:	f7ff fa94 	bl	8013084 <rcl_timer_get_time_until_next_call>
 8013b5c:	4548      	cmp	r0, r9
 8013b5e:	d1cd      	bne.n	8013afc <rcl_wait+0x74>
 8013b60:	692b      	ldr	r3, [r5, #16]
 8013b62:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8013b64:	2100      	movs	r1, #0
 8013b66:	5199      	str	r1, [r3, r6]
 8013b68:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8013b6a:	3401      	adds	r4, #1
 8013b6c:	f14a 0a00 	adc.w	sl, sl, #0
 8013b70:	429c      	cmp	r4, r3
 8013b72:	f17a 0100 	sbcs.w	r1, sl, #0
 8013b76:	d3d6      	bcc.n	8013b26 <rcl_wait+0x9e>
 8013b78:	4616      	mov	r6, r2
 8013b7a:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8013b7e:	4313      	orrs	r3, r2
 8013b80:	46d9      	mov	r9, fp
 8013b82:	f040 80a9 	bne.w	8013cd8 <rcl_wait+0x250>
 8013b86:	2300      	movs	r3, #0
 8013b88:	2200      	movs	r2, #0
 8013b8a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8013b8e:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8013b92:	ab08      	add	r3, sp, #32
 8013b94:	9302      	str	r3, [sp, #8]
 8013b96:	6bf2      	ldr	r2, [r6, #60]	@ 0x3c
 8013b98:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 8013b9c:	e9cd 3200 	strd	r3, r2, [sp]
 8013ba0:	f106 0110 	add.w	r1, r6, #16
 8013ba4:	f106 031c 	add.w	r3, r6, #28
 8013ba8:	f106 0228 	add.w	r2, r6, #40	@ 0x28
 8013bac:	1d30      	adds	r0, r6, #4
 8013bae:	f002 fb6b 	bl	8016288 <rmw_wait>
 8013bb2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8013bb4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8013bb6:	4680      	mov	r8, r0
 8013bb8:	b1ca      	cbz	r2, 8013bee <rcl_wait+0x166>
 8013bba:	2400      	movs	r4, #0
 8013bbc:	4627      	mov	r7, r4
 8013bbe:	692a      	ldr	r2, [r5, #16]
 8013bc0:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 8013bc4:	f10d 011f 	add.w	r1, sp, #31
 8013bc8:	00a6      	lsls	r6, r4, #2
 8013bca:	b160      	cbz	r0, 8013be6 <rcl_wait+0x15e>
 8013bcc:	f88d 701f 	strb.w	r7, [sp, #31]
 8013bd0:	f7ff fa1e 	bl	8013010 <rcl_timer_is_ready>
 8013bd4:	2800      	cmp	r0, #0
 8013bd6:	f47f af74 	bne.w	8013ac2 <rcl_wait+0x3a>
 8013bda:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8013bde:	b90b      	cbnz	r3, 8013be4 <rcl_wait+0x15c>
 8013be0:	692a      	ldr	r2, [r5, #16]
 8013be2:	5193      	str	r3, [r2, r6]
 8013be4:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8013be6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8013be8:	3401      	adds	r4, #1
 8013bea:	42a2      	cmp	r2, r4
 8013bec:	d8e7      	bhi.n	8013bbe <rcl_wait+0x136>
 8013bee:	f038 0002 	bics.w	r0, r8, #2
 8013bf2:	f040 8090 	bne.w	8013d16 <rcl_wait+0x28e>
 8013bf6:	686e      	ldr	r6, [r5, #4]
 8013bf8:	4602      	mov	r2, r0
 8013bfa:	b91e      	cbnz	r6, 8013c04 <rcl_wait+0x17c>
 8013bfc:	e00d      	b.n	8013c1a <rcl_wait+0x192>
 8013bfe:	3201      	adds	r2, #1
 8013c00:	42b2      	cmp	r2, r6
 8013c02:	d00a      	beq.n	8013c1a <rcl_wait+0x192>
 8013c04:	6899      	ldr	r1, [r3, #8]
 8013c06:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8013c0a:	2900      	cmp	r1, #0
 8013c0c:	d1f7      	bne.n	8013bfe <rcl_wait+0x176>
 8013c0e:	682c      	ldr	r4, [r5, #0]
 8013c10:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8013c14:	3201      	adds	r2, #1
 8013c16:	42b2      	cmp	r2, r6
 8013c18:	d1f4      	bne.n	8013c04 <rcl_wait+0x17c>
 8013c1a:	68ee      	ldr	r6, [r5, #12]
 8013c1c:	2200      	movs	r2, #0
 8013c1e:	b91e      	cbnz	r6, 8013c28 <rcl_wait+0x1a0>
 8013c20:	e00d      	b.n	8013c3e <rcl_wait+0x1b6>
 8013c22:	3201      	adds	r2, #1
 8013c24:	42b2      	cmp	r2, r6
 8013c26:	d00a      	beq.n	8013c3e <rcl_wait+0x1b6>
 8013c28:	6959      	ldr	r1, [r3, #20]
 8013c2a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8013c2e:	2900      	cmp	r1, #0
 8013c30:	d1f7      	bne.n	8013c22 <rcl_wait+0x19a>
 8013c32:	68ac      	ldr	r4, [r5, #8]
 8013c34:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8013c38:	3201      	adds	r2, #1
 8013c3a:	42b2      	cmp	r2, r6
 8013c3c:	d1f4      	bne.n	8013c28 <rcl_wait+0x1a0>
 8013c3e:	69ee      	ldr	r6, [r5, #28]
 8013c40:	2200      	movs	r2, #0
 8013c42:	b91e      	cbnz	r6, 8013c4c <rcl_wait+0x1c4>
 8013c44:	e00d      	b.n	8013c62 <rcl_wait+0x1da>
 8013c46:	3201      	adds	r2, #1
 8013c48:	42b2      	cmp	r2, r6
 8013c4a:	d00a      	beq.n	8013c62 <rcl_wait+0x1da>
 8013c4c:	6a19      	ldr	r1, [r3, #32]
 8013c4e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8013c52:	2900      	cmp	r1, #0
 8013c54:	d1f7      	bne.n	8013c46 <rcl_wait+0x1be>
 8013c56:	69ac      	ldr	r4, [r5, #24]
 8013c58:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8013c5c:	3201      	adds	r2, #1
 8013c5e:	42b2      	cmp	r2, r6
 8013c60:	d1f4      	bne.n	8013c4c <rcl_wait+0x1c4>
 8013c62:	6a6e      	ldr	r6, [r5, #36]	@ 0x24
 8013c64:	2200      	movs	r2, #0
 8013c66:	b91e      	cbnz	r6, 8013c70 <rcl_wait+0x1e8>
 8013c68:	e00d      	b.n	8013c86 <rcl_wait+0x1fe>
 8013c6a:	3201      	adds	r2, #1
 8013c6c:	4296      	cmp	r6, r2
 8013c6e:	d00a      	beq.n	8013c86 <rcl_wait+0x1fe>
 8013c70:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8013c72:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8013c76:	2900      	cmp	r1, #0
 8013c78:	d1f7      	bne.n	8013c6a <rcl_wait+0x1e2>
 8013c7a:	6a2c      	ldr	r4, [r5, #32]
 8013c7c:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8013c80:	3201      	adds	r2, #1
 8013c82:	4296      	cmp	r6, r2
 8013c84:	d1f4      	bne.n	8013c70 <rcl_wait+0x1e8>
 8013c86:	6aee      	ldr	r6, [r5, #44]	@ 0x2c
 8013c88:	2200      	movs	r2, #0
 8013c8a:	b91e      	cbnz	r6, 8013c94 <rcl_wait+0x20c>
 8013c8c:	e00d      	b.n	8013caa <rcl_wait+0x222>
 8013c8e:	3201      	adds	r2, #1
 8013c90:	42b2      	cmp	r2, r6
 8013c92:	d00a      	beq.n	8013caa <rcl_wait+0x222>
 8013c94:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8013c96:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8013c9a:	2900      	cmp	r1, #0
 8013c9c:	d1f7      	bne.n	8013c8e <rcl_wait+0x206>
 8013c9e:	6aac      	ldr	r4, [r5, #40]	@ 0x28
 8013ca0:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8013ca4:	3201      	adds	r2, #1
 8013ca6:	42b2      	cmp	r2, r6
 8013ca8:	d1f4      	bne.n	8013c94 <rcl_wait+0x20c>
 8013caa:	f1b8 0f02 	cmp.w	r8, #2
 8013cae:	f47f af08 	bne.w	8013ac2 <rcl_wait+0x3a>
 8013cb2:	464b      	mov	r3, r9
 8013cb4:	2b00      	cmp	r3, #0
 8013cb6:	bf08      	it	eq
 8013cb8:	2002      	moveq	r0, #2
 8013cba:	e702      	b.n	8013ac2 <rcl_wait+0x3a>
 8013cbc:	2a00      	cmp	r2, #0
 8013cbe:	d03a      	beq.n	8013d36 <rcl_wait+0x2ae>
 8013cc0:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8013cc4:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8013cc8:	e70e      	b.n	8013ae8 <rcl_wait+0x60>
 8013cca:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8013cce:	b00d      	add	sp, #52	@ 0x34
 8013cd0:	ecbd 8b02 	vpop	{d8}
 8013cd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013cd8:	9b04      	ldr	r3, [sp, #16]
 8013cda:	2b01      	cmp	r3, #1
 8013cdc:	9b05      	ldr	r3, [sp, #20]
 8013cde:	f173 0300 	sbcs.w	r3, r3, #0
 8013ce2:	db24      	blt.n	8013d2e <rcl_wait+0x2a6>
 8013ce4:	2f00      	cmp	r7, #0
 8013ce6:	bfbc      	itt	lt
 8013ce8:	f04f 0800 	movlt.w	r8, #0
 8013cec:	4647      	movlt	r7, r8
 8013cee:	a31e      	add	r3, pc, #120	@ (adr r3, 8013d68 <rcl_wait+0x2e0>)
 8013cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013cf4:	4640      	mov	r0, r8
 8013cf6:	4639      	mov	r1, r7
 8013cf8:	f7ec ff90 	bl	8000c1c <__aeabi_ldivmod>
 8013cfc:	a31a      	add	r3, pc, #104	@ (adr r3, 8013d68 <rcl_wait+0x2e0>)
 8013cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d02:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8013d06:	4640      	mov	r0, r8
 8013d08:	4639      	mov	r1, r7
 8013d0a:	f7ec ff87 	bl	8000c1c <__aeabi_ldivmod>
 8013d0e:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8013d12:	ab08      	add	r3, sp, #32
 8013d14:	e73e      	b.n	8013b94 <rcl_wait+0x10c>
 8013d16:	2001      	movs	r0, #1
 8013d18:	b00d      	add	sp, #52	@ 0x34
 8013d1a:	ecbd 8b02 	vpop	{d8}
 8013d1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d22:	200b      	movs	r0, #11
 8013d24:	b00d      	add	sp, #52	@ 0x34
 8013d26:	ecbd 8b02 	vpop	{d8}
 8013d2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d2e:	465b      	mov	r3, fp
 8013d30:	2b00      	cmp	r3, #0
 8013d32:	d1d7      	bne.n	8013ce4 <rcl_wait+0x25c>
 8013d34:	e72e      	b.n	8013b94 <rcl_wait+0x10c>
 8013d36:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8013d3a:	430b      	orrs	r3, r1
 8013d3c:	bf08      	it	eq
 8013d3e:	4691      	moveq	r9, r2
 8013d40:	f43f af21 	beq.w	8013b86 <rcl_wait+0xfe>
 8013d44:	9b04      	ldr	r3, [sp, #16]
 8013d46:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8013d4a:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8013d4e:	2b01      	cmp	r3, #1
 8013d50:	9b05      	ldr	r3, [sp, #20]
 8013d52:	f173 0300 	sbcs.w	r3, r3, #0
 8013d56:	f04f 0300 	mov.w	r3, #0
 8013d5a:	4699      	mov	r9, r3
 8013d5c:	dac2      	bge.n	8013ce4 <rcl_wait+0x25c>
 8013d5e:	e719      	b.n	8013b94 <rcl_wait+0x10c>
 8013d60:	ffffffff 	.word	0xffffffff
 8013d64:	7fffffff 	.word	0x7fffffff
 8013d68:	3b9aca00 	.word	0x3b9aca00
 8013d6c:	00000000 	.word	0x00000000

08013d70 <rcl_action_take_goal_response>:
 8013d70:	2800      	cmp	r0, #0
 8013d72:	d039      	beq.n	8013de8 <rcl_action_take_goal_response+0x78>
 8013d74:	b570      	push	{r4, r5, r6, lr}
 8013d76:	4604      	mov	r4, r0
 8013d78:	6800      	ldr	r0, [r0, #0]
 8013d7a:	b380      	cbz	r0, 8013dde <rcl_action_take_goal_response+0x6e>
 8013d7c:	460d      	mov	r5, r1
 8013d7e:	4616      	mov	r6, r2
 8013d80:	f7fe f872 	bl	8011e68 <rcl_client_is_valid>
 8013d84:	b330      	cbz	r0, 8013dd4 <rcl_action_take_goal_response+0x64>
 8013d86:	6820      	ldr	r0, [r4, #0]
 8013d88:	3004      	adds	r0, #4
 8013d8a:	f7fe f86d 	bl	8011e68 <rcl_client_is_valid>
 8013d8e:	b308      	cbz	r0, 8013dd4 <rcl_action_take_goal_response+0x64>
 8013d90:	6820      	ldr	r0, [r4, #0]
 8013d92:	3008      	adds	r0, #8
 8013d94:	f7fe f868 	bl	8011e68 <rcl_client_is_valid>
 8013d98:	b1e0      	cbz	r0, 8013dd4 <rcl_action_take_goal_response+0x64>
 8013d9a:	6820      	ldr	r0, [r4, #0]
 8013d9c:	300c      	adds	r0, #12
 8013d9e:	f7fe ffff 	bl	8012da0 <rcl_subscription_is_valid>
 8013da2:	b1b8      	cbz	r0, 8013dd4 <rcl_action_take_goal_response+0x64>
 8013da4:	6820      	ldr	r0, [r4, #0]
 8013da6:	3010      	adds	r0, #16
 8013da8:	f7fe fffa 	bl	8012da0 <rcl_subscription_is_valid>
 8013dac:	b190      	cbz	r0, 8013dd4 <rcl_action_take_goal_response+0x64>
 8013dae:	b1cd      	cbz	r5, 8013de4 <rcl_action_take_goal_response+0x74>
 8013db0:	b1c6      	cbz	r6, 8013de4 <rcl_action_take_goal_response+0x74>
 8013db2:	6820      	ldr	r0, [r4, #0]
 8013db4:	4632      	mov	r2, r6
 8013db6:	4629      	mov	r1, r5
 8013db8:	f7fe f80e 	bl	8011dd8 <rcl_take_response>
 8013dbc:	b148      	cbz	r0, 8013dd2 <rcl_action_take_goal_response+0x62>
 8013dbe:	280a      	cmp	r0, #10
 8013dc0:	d007      	beq.n	8013dd2 <rcl_action_take_goal_response+0x62>
 8013dc2:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8013dc6:	f640 0337 	movw	r3, #2103	@ 0x837
 8013dca:	4290      	cmp	r0, r2
 8013dcc:	bf0c      	ite	eq
 8013dce:	4618      	moveq	r0, r3
 8013dd0:	2001      	movne	r0, #1
 8013dd2:	bd70      	pop	{r4, r5, r6, pc}
 8013dd4:	f7f7 fb44 	bl	800b460 <rcutils_reset_error>
 8013dd8:	f640 0036 	movw	r0, #2102	@ 0x836
 8013ddc:	bd70      	pop	{r4, r5, r6, pc}
 8013dde:	f640 0036 	movw	r0, #2102	@ 0x836
 8013de2:	bd70      	pop	{r4, r5, r6, pc}
 8013de4:	200b      	movs	r0, #11
 8013de6:	bd70      	pop	{r4, r5, r6, pc}
 8013de8:	f640 0036 	movw	r0, #2102	@ 0x836
 8013dec:	4770      	bx	lr
 8013dee:	bf00      	nop

08013df0 <rcl_action_send_result_request>:
 8013df0:	b390      	cbz	r0, 8013e58 <rcl_action_send_result_request+0x68>
 8013df2:	b570      	push	{r4, r5, r6, lr}
 8013df4:	4604      	mov	r4, r0
 8013df6:	6800      	ldr	r0, [r0, #0]
 8013df8:	b348      	cbz	r0, 8013e4e <rcl_action_send_result_request+0x5e>
 8013dfa:	460d      	mov	r5, r1
 8013dfc:	4616      	mov	r6, r2
 8013dfe:	f7fe f833 	bl	8011e68 <rcl_client_is_valid>
 8013e02:	b1f8      	cbz	r0, 8013e44 <rcl_action_send_result_request+0x54>
 8013e04:	6820      	ldr	r0, [r4, #0]
 8013e06:	3004      	adds	r0, #4
 8013e08:	f7fe f82e 	bl	8011e68 <rcl_client_is_valid>
 8013e0c:	b1d0      	cbz	r0, 8013e44 <rcl_action_send_result_request+0x54>
 8013e0e:	6820      	ldr	r0, [r4, #0]
 8013e10:	3008      	adds	r0, #8
 8013e12:	f7fe f829 	bl	8011e68 <rcl_client_is_valid>
 8013e16:	b1a8      	cbz	r0, 8013e44 <rcl_action_send_result_request+0x54>
 8013e18:	6820      	ldr	r0, [r4, #0]
 8013e1a:	300c      	adds	r0, #12
 8013e1c:	f7fe ffc0 	bl	8012da0 <rcl_subscription_is_valid>
 8013e20:	b180      	cbz	r0, 8013e44 <rcl_action_send_result_request+0x54>
 8013e22:	6820      	ldr	r0, [r4, #0]
 8013e24:	3010      	adds	r0, #16
 8013e26:	f7fe ffbb 	bl	8012da0 <rcl_subscription_is_valid>
 8013e2a:	b158      	cbz	r0, 8013e44 <rcl_action_send_result_request+0x54>
 8013e2c:	b195      	cbz	r5, 8013e54 <rcl_action_send_result_request+0x64>
 8013e2e:	b18e      	cbz	r6, 8013e54 <rcl_action_send_result_request+0x64>
 8013e30:	6820      	ldr	r0, [r4, #0]
 8013e32:	4632      	mov	r2, r6
 8013e34:	4629      	mov	r1, r5
 8013e36:	3008      	adds	r0, #8
 8013e38:	f7fd ff96 	bl	8011d68 <rcl_send_request>
 8013e3c:	3800      	subs	r0, #0
 8013e3e:	bf18      	it	ne
 8013e40:	2001      	movne	r0, #1
 8013e42:	bd70      	pop	{r4, r5, r6, pc}
 8013e44:	f7f7 fb0c 	bl	800b460 <rcutils_reset_error>
 8013e48:	f640 0036 	movw	r0, #2102	@ 0x836
 8013e4c:	bd70      	pop	{r4, r5, r6, pc}
 8013e4e:	f640 0036 	movw	r0, #2102	@ 0x836
 8013e52:	bd70      	pop	{r4, r5, r6, pc}
 8013e54:	200b      	movs	r0, #11
 8013e56:	bd70      	pop	{r4, r5, r6, pc}
 8013e58:	f640 0036 	movw	r0, #2102	@ 0x836
 8013e5c:	4770      	bx	lr
 8013e5e:	bf00      	nop

08013e60 <rcl_action_take_result_response>:
 8013e60:	2800      	cmp	r0, #0
 8013e62:	d03a      	beq.n	8013eda <rcl_action_take_result_response+0x7a>
 8013e64:	b570      	push	{r4, r5, r6, lr}
 8013e66:	4604      	mov	r4, r0
 8013e68:	6800      	ldr	r0, [r0, #0]
 8013e6a:	b388      	cbz	r0, 8013ed0 <rcl_action_take_result_response+0x70>
 8013e6c:	460d      	mov	r5, r1
 8013e6e:	4616      	mov	r6, r2
 8013e70:	f7fd fffa 	bl	8011e68 <rcl_client_is_valid>
 8013e74:	b338      	cbz	r0, 8013ec6 <rcl_action_take_result_response+0x66>
 8013e76:	6820      	ldr	r0, [r4, #0]
 8013e78:	3004      	adds	r0, #4
 8013e7a:	f7fd fff5 	bl	8011e68 <rcl_client_is_valid>
 8013e7e:	b310      	cbz	r0, 8013ec6 <rcl_action_take_result_response+0x66>
 8013e80:	6820      	ldr	r0, [r4, #0]
 8013e82:	3008      	adds	r0, #8
 8013e84:	f7fd fff0 	bl	8011e68 <rcl_client_is_valid>
 8013e88:	b1e8      	cbz	r0, 8013ec6 <rcl_action_take_result_response+0x66>
 8013e8a:	6820      	ldr	r0, [r4, #0]
 8013e8c:	300c      	adds	r0, #12
 8013e8e:	f7fe ff87 	bl	8012da0 <rcl_subscription_is_valid>
 8013e92:	b1c0      	cbz	r0, 8013ec6 <rcl_action_take_result_response+0x66>
 8013e94:	6820      	ldr	r0, [r4, #0]
 8013e96:	3010      	adds	r0, #16
 8013e98:	f7fe ff82 	bl	8012da0 <rcl_subscription_is_valid>
 8013e9c:	b198      	cbz	r0, 8013ec6 <rcl_action_take_result_response+0x66>
 8013e9e:	b1d5      	cbz	r5, 8013ed6 <rcl_action_take_result_response+0x76>
 8013ea0:	b1ce      	cbz	r6, 8013ed6 <rcl_action_take_result_response+0x76>
 8013ea2:	6820      	ldr	r0, [r4, #0]
 8013ea4:	4632      	mov	r2, r6
 8013ea6:	4629      	mov	r1, r5
 8013ea8:	3008      	adds	r0, #8
 8013eaa:	f7fd ff95 	bl	8011dd8 <rcl_take_response>
 8013eae:	b148      	cbz	r0, 8013ec4 <rcl_action_take_result_response+0x64>
 8013eb0:	280a      	cmp	r0, #10
 8013eb2:	d007      	beq.n	8013ec4 <rcl_action_take_result_response+0x64>
 8013eb4:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8013eb8:	f640 0337 	movw	r3, #2103	@ 0x837
 8013ebc:	4290      	cmp	r0, r2
 8013ebe:	bf0c      	ite	eq
 8013ec0:	4618      	moveq	r0, r3
 8013ec2:	2001      	movne	r0, #1
 8013ec4:	bd70      	pop	{r4, r5, r6, pc}
 8013ec6:	f7f7 facb 	bl	800b460 <rcutils_reset_error>
 8013eca:	f640 0036 	movw	r0, #2102	@ 0x836
 8013ece:	bd70      	pop	{r4, r5, r6, pc}
 8013ed0:	f640 0036 	movw	r0, #2102	@ 0x836
 8013ed4:	bd70      	pop	{r4, r5, r6, pc}
 8013ed6:	200b      	movs	r0, #11
 8013ed8:	bd70      	pop	{r4, r5, r6, pc}
 8013eda:	f640 0036 	movw	r0, #2102	@ 0x836
 8013ede:	4770      	bx	lr

08013ee0 <rcl_action_take_cancel_response>:
 8013ee0:	2800      	cmp	r0, #0
 8013ee2:	d03a      	beq.n	8013f5a <rcl_action_take_cancel_response+0x7a>
 8013ee4:	b570      	push	{r4, r5, r6, lr}
 8013ee6:	4604      	mov	r4, r0
 8013ee8:	6800      	ldr	r0, [r0, #0]
 8013eea:	b388      	cbz	r0, 8013f50 <rcl_action_take_cancel_response+0x70>
 8013eec:	460d      	mov	r5, r1
 8013eee:	4616      	mov	r6, r2
 8013ef0:	f7fd ffba 	bl	8011e68 <rcl_client_is_valid>
 8013ef4:	b338      	cbz	r0, 8013f46 <rcl_action_take_cancel_response+0x66>
 8013ef6:	6820      	ldr	r0, [r4, #0]
 8013ef8:	3004      	adds	r0, #4
 8013efa:	f7fd ffb5 	bl	8011e68 <rcl_client_is_valid>
 8013efe:	b310      	cbz	r0, 8013f46 <rcl_action_take_cancel_response+0x66>
 8013f00:	6820      	ldr	r0, [r4, #0]
 8013f02:	3008      	adds	r0, #8
 8013f04:	f7fd ffb0 	bl	8011e68 <rcl_client_is_valid>
 8013f08:	b1e8      	cbz	r0, 8013f46 <rcl_action_take_cancel_response+0x66>
 8013f0a:	6820      	ldr	r0, [r4, #0]
 8013f0c:	300c      	adds	r0, #12
 8013f0e:	f7fe ff47 	bl	8012da0 <rcl_subscription_is_valid>
 8013f12:	b1c0      	cbz	r0, 8013f46 <rcl_action_take_cancel_response+0x66>
 8013f14:	6820      	ldr	r0, [r4, #0]
 8013f16:	3010      	adds	r0, #16
 8013f18:	f7fe ff42 	bl	8012da0 <rcl_subscription_is_valid>
 8013f1c:	b198      	cbz	r0, 8013f46 <rcl_action_take_cancel_response+0x66>
 8013f1e:	b1d5      	cbz	r5, 8013f56 <rcl_action_take_cancel_response+0x76>
 8013f20:	b1ce      	cbz	r6, 8013f56 <rcl_action_take_cancel_response+0x76>
 8013f22:	6820      	ldr	r0, [r4, #0]
 8013f24:	4632      	mov	r2, r6
 8013f26:	4629      	mov	r1, r5
 8013f28:	3004      	adds	r0, #4
 8013f2a:	f7fd ff55 	bl	8011dd8 <rcl_take_response>
 8013f2e:	b148      	cbz	r0, 8013f44 <rcl_action_take_cancel_response+0x64>
 8013f30:	280a      	cmp	r0, #10
 8013f32:	d007      	beq.n	8013f44 <rcl_action_take_cancel_response+0x64>
 8013f34:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8013f38:	f640 0337 	movw	r3, #2103	@ 0x837
 8013f3c:	4290      	cmp	r0, r2
 8013f3e:	bf0c      	ite	eq
 8013f40:	4618      	moveq	r0, r3
 8013f42:	2001      	movne	r0, #1
 8013f44:	bd70      	pop	{r4, r5, r6, pc}
 8013f46:	f7f7 fa8b 	bl	800b460 <rcutils_reset_error>
 8013f4a:	f640 0036 	movw	r0, #2102	@ 0x836
 8013f4e:	bd70      	pop	{r4, r5, r6, pc}
 8013f50:	f640 0036 	movw	r0, #2102	@ 0x836
 8013f54:	bd70      	pop	{r4, r5, r6, pc}
 8013f56:	200b      	movs	r0, #11
 8013f58:	bd70      	pop	{r4, r5, r6, pc}
 8013f5a:	f640 0036 	movw	r0, #2102	@ 0x836
 8013f5e:	4770      	bx	lr

08013f60 <rcl_action_take_feedback>:
 8013f60:	2800      	cmp	r0, #0
 8013f62:	d038      	beq.n	8013fd6 <rcl_action_take_feedback+0x76>
 8013f64:	b530      	push	{r4, r5, lr}
 8013f66:	4604      	mov	r4, r0
 8013f68:	6800      	ldr	r0, [r0, #0]
 8013f6a:	b091      	sub	sp, #68	@ 0x44
 8013f6c:	b378      	cbz	r0, 8013fce <rcl_action_take_feedback+0x6e>
 8013f6e:	460d      	mov	r5, r1
 8013f70:	f7fd ff7a 	bl	8011e68 <rcl_client_is_valid>
 8013f74:	b328      	cbz	r0, 8013fc2 <rcl_action_take_feedback+0x62>
 8013f76:	6820      	ldr	r0, [r4, #0]
 8013f78:	3004      	adds	r0, #4
 8013f7a:	f7fd ff75 	bl	8011e68 <rcl_client_is_valid>
 8013f7e:	b300      	cbz	r0, 8013fc2 <rcl_action_take_feedback+0x62>
 8013f80:	6820      	ldr	r0, [r4, #0]
 8013f82:	3008      	adds	r0, #8
 8013f84:	f7fd ff70 	bl	8011e68 <rcl_client_is_valid>
 8013f88:	b1d8      	cbz	r0, 8013fc2 <rcl_action_take_feedback+0x62>
 8013f8a:	6820      	ldr	r0, [r4, #0]
 8013f8c:	300c      	adds	r0, #12
 8013f8e:	f7fe ff07 	bl	8012da0 <rcl_subscription_is_valid>
 8013f92:	b1b0      	cbz	r0, 8013fc2 <rcl_action_take_feedback+0x62>
 8013f94:	6820      	ldr	r0, [r4, #0]
 8013f96:	3010      	adds	r0, #16
 8013f98:	f7fe ff02 	bl	8012da0 <rcl_subscription_is_valid>
 8013f9c:	b188      	cbz	r0, 8013fc2 <rcl_action_take_feedback+0x62>
 8013f9e:	b1ed      	cbz	r5, 8013fdc <rcl_action_take_feedback+0x7c>
 8013fa0:	6820      	ldr	r0, [r4, #0]
 8013fa2:	2300      	movs	r3, #0
 8013fa4:	466a      	mov	r2, sp
 8013fa6:	4629      	mov	r1, r5
 8013fa8:	300c      	adds	r0, #12
 8013faa:	f7fe fe9b 	bl	8012ce4 <rcl_take>
 8013fae:	b160      	cbz	r0, 8013fca <rcl_action_take_feedback+0x6a>
 8013fb0:	f240 1391 	movw	r3, #401	@ 0x191
 8013fb4:	4298      	cmp	r0, r3
 8013fb6:	d014      	beq.n	8013fe2 <rcl_action_take_feedback+0x82>
 8013fb8:	280a      	cmp	r0, #10
 8013fba:	bf18      	it	ne
 8013fbc:	2001      	movne	r0, #1
 8013fbe:	b011      	add	sp, #68	@ 0x44
 8013fc0:	bd30      	pop	{r4, r5, pc}
 8013fc2:	f7f7 fa4d 	bl	800b460 <rcutils_reset_error>
 8013fc6:	f640 0036 	movw	r0, #2102	@ 0x836
 8013fca:	b011      	add	sp, #68	@ 0x44
 8013fcc:	bd30      	pop	{r4, r5, pc}
 8013fce:	f640 0036 	movw	r0, #2102	@ 0x836
 8013fd2:	b011      	add	sp, #68	@ 0x44
 8013fd4:	bd30      	pop	{r4, r5, pc}
 8013fd6:	f640 0036 	movw	r0, #2102	@ 0x836
 8013fda:	4770      	bx	lr
 8013fdc:	200b      	movs	r0, #11
 8013fde:	b011      	add	sp, #68	@ 0x44
 8013fe0:	bd30      	pop	{r4, r5, pc}
 8013fe2:	f640 0037 	movw	r0, #2103	@ 0x837
 8013fe6:	e7f0      	b.n	8013fca <rcl_action_take_feedback+0x6a>

08013fe8 <rcl_action_wait_set_add_action_client>:
 8013fe8:	2800      	cmp	r0, #0
 8013fea:	d048      	beq.n	801407e <rcl_action_wait_set_add_action_client+0x96>
 8013fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013fee:	460c      	mov	r4, r1
 8013ff0:	2900      	cmp	r1, #0
 8013ff2:	d03c      	beq.n	801406e <rcl_action_wait_set_add_action_client+0x86>
 8013ff4:	4605      	mov	r5, r0
 8013ff6:	6808      	ldr	r0, [r1, #0]
 8013ff8:	2800      	cmp	r0, #0
 8013ffa:	d038      	beq.n	801406e <rcl_action_wait_set_add_action_client+0x86>
 8013ffc:	4617      	mov	r7, r2
 8013ffe:	461e      	mov	r6, r3
 8014000:	f7fd ff32 	bl	8011e68 <rcl_client_is_valid>
 8014004:	b3b0      	cbz	r0, 8014074 <rcl_action_wait_set_add_action_client+0x8c>
 8014006:	6820      	ldr	r0, [r4, #0]
 8014008:	3004      	adds	r0, #4
 801400a:	f7fd ff2d 	bl	8011e68 <rcl_client_is_valid>
 801400e:	b388      	cbz	r0, 8014074 <rcl_action_wait_set_add_action_client+0x8c>
 8014010:	6820      	ldr	r0, [r4, #0]
 8014012:	3008      	adds	r0, #8
 8014014:	f7fd ff28 	bl	8011e68 <rcl_client_is_valid>
 8014018:	b360      	cbz	r0, 8014074 <rcl_action_wait_set_add_action_client+0x8c>
 801401a:	6820      	ldr	r0, [r4, #0]
 801401c:	300c      	adds	r0, #12
 801401e:	f7fe febf 	bl	8012da0 <rcl_subscription_is_valid>
 8014022:	b338      	cbz	r0, 8014074 <rcl_action_wait_set_add_action_client+0x8c>
 8014024:	6820      	ldr	r0, [r4, #0]
 8014026:	3010      	adds	r0, #16
 8014028:	f7fe feba 	bl	8012da0 <rcl_subscription_is_valid>
 801402c:	b310      	cbz	r0, 8014074 <rcl_action_wait_set_add_action_client+0x8c>
 801402e:	6821      	ldr	r1, [r4, #0]
 8014030:	4628      	mov	r0, r5
 8014032:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 8014036:	f7ff fccd 	bl	80139d4 <rcl_wait_set_add_client>
 801403a:	b9b8      	cbnz	r0, 801406c <rcl_action_wait_set_add_action_client+0x84>
 801403c:	6821      	ldr	r1, [r4, #0]
 801403e:	4628      	mov	r0, r5
 8014040:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 8014044:	3104      	adds	r1, #4
 8014046:	f7ff fcc5 	bl	80139d4 <rcl_wait_set_add_client>
 801404a:	b978      	cbnz	r0, 801406c <rcl_action_wait_set_add_action_client+0x84>
 801404c:	6821      	ldr	r1, [r4, #0]
 801404e:	4628      	mov	r0, r5
 8014050:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 8014054:	3108      	adds	r1, #8
 8014056:	f7ff fcbd 	bl	80139d4 <rcl_wait_set_add_client>
 801405a:	b938      	cbnz	r0, 801406c <rcl_action_wait_set_add_action_client+0x84>
 801405c:	6821      	ldr	r1, [r4, #0]
 801405e:	4628      	mov	r0, r5
 8014060:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 8014064:	310c      	adds	r1, #12
 8014066:	f7ff f96d 	bl	8013344 <rcl_wait_set_add_subscription>
 801406a:	b158      	cbz	r0, 8014084 <rcl_action_wait_set_add_action_client+0x9c>
 801406c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801406e:	f640 0036 	movw	r0, #2102	@ 0x836
 8014072:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014074:	f7f7 f9f4 	bl	800b460 <rcutils_reset_error>
 8014078:	f640 0036 	movw	r0, #2102	@ 0x836
 801407c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801407e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8014082:	4770      	bx	lr
 8014084:	6821      	ldr	r1, [r4, #0]
 8014086:	4628      	mov	r0, r5
 8014088:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 801408c:	3110      	adds	r1, #16
 801408e:	f7ff f959 	bl	8013344 <rcl_wait_set_add_subscription>
 8014092:	2800      	cmp	r0, #0
 8014094:	d1ea      	bne.n	801406c <rcl_action_wait_set_add_action_client+0x84>
 8014096:	b11f      	cbz	r7, 80140a0 <rcl_action_wait_set_add_action_client+0xb8>
 8014098:	6823      	ldr	r3, [r4, #0]
 801409a:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 801409e:	603b      	str	r3, [r7, #0]
 80140a0:	2e00      	cmp	r6, #0
 80140a2:	d0e3      	beq.n	801406c <rcl_action_wait_set_add_action_client+0x84>
 80140a4:	6823      	ldr	r3, [r4, #0]
 80140a6:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 80140aa:	6033      	str	r3, [r6, #0]
 80140ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80140ae:	bf00      	nop

080140b0 <rcl_action_client_wait_set_get_entities_ready>:
 80140b0:	2800      	cmp	r0, #0
 80140b2:	f000 808d 	beq.w	80141d0 <rcl_action_client_wait_set_get_entities_ready+0x120>
 80140b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80140ba:	460c      	mov	r4, r1
 80140bc:	2900      	cmp	r1, #0
 80140be:	d077      	beq.n	80141b0 <rcl_action_client_wait_set_get_entities_ready+0x100>
 80140c0:	4605      	mov	r5, r0
 80140c2:	6808      	ldr	r0, [r1, #0]
 80140c4:	2800      	cmp	r0, #0
 80140c6:	d073      	beq.n	80141b0 <rcl_action_client_wait_set_get_entities_ready+0x100>
 80140c8:	4616      	mov	r6, r2
 80140ca:	461f      	mov	r7, r3
 80140cc:	f7fd fecc 	bl	8011e68 <rcl_client_is_valid>
 80140d0:	2800      	cmp	r0, #0
 80140d2:	d071      	beq.n	80141b8 <rcl_action_client_wait_set_get_entities_ready+0x108>
 80140d4:	6820      	ldr	r0, [r4, #0]
 80140d6:	3004      	adds	r0, #4
 80140d8:	f7fd fec6 	bl	8011e68 <rcl_client_is_valid>
 80140dc:	2800      	cmp	r0, #0
 80140de:	d06b      	beq.n	80141b8 <rcl_action_client_wait_set_get_entities_ready+0x108>
 80140e0:	6820      	ldr	r0, [r4, #0]
 80140e2:	3008      	adds	r0, #8
 80140e4:	f7fd fec0 	bl	8011e68 <rcl_client_is_valid>
 80140e8:	2800      	cmp	r0, #0
 80140ea:	d065      	beq.n	80141b8 <rcl_action_client_wait_set_get_entities_ready+0x108>
 80140ec:	6820      	ldr	r0, [r4, #0]
 80140ee:	300c      	adds	r0, #12
 80140f0:	f7fe fe56 	bl	8012da0 <rcl_subscription_is_valid>
 80140f4:	2800      	cmp	r0, #0
 80140f6:	d05f      	beq.n	80141b8 <rcl_action_client_wait_set_get_entities_ready+0x108>
 80140f8:	6820      	ldr	r0, [r4, #0]
 80140fa:	3010      	adds	r0, #16
 80140fc:	f7fe fe50 	bl	8012da0 <rcl_subscription_is_valid>
 8014100:	2800      	cmp	r0, #0
 8014102:	d059      	beq.n	80141b8 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8014104:	2e00      	cmp	r6, #0
 8014106:	d060      	beq.n	80141ca <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8014108:	2f00      	cmp	r7, #0
 801410a:	d05e      	beq.n	80141ca <rcl_action_client_wait_set_get_entities_ready+0x11a>
 801410c:	9b06      	ldr	r3, [sp, #24]
 801410e:	2b00      	cmp	r3, #0
 8014110:	d05b      	beq.n	80141ca <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8014112:	9b07      	ldr	r3, [sp, #28]
 8014114:	2b00      	cmp	r3, #0
 8014116:	d058      	beq.n	80141ca <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8014118:	9b08      	ldr	r3, [sp, #32]
 801411a:	2b00      	cmp	r3, #0
 801411c:	d055      	beq.n	80141ca <rcl_action_client_wait_set_get_entities_ready+0x11a>
 801411e:	6823      	ldr	r3, [r4, #0]
 8014120:	686a      	ldr	r2, [r5, #4]
 8014122:	f8d3 11d0 	ldr.w	r1, [r3, #464]	@ 0x1d0
 8014126:	428a      	cmp	r2, r1
 8014128:	d94c      	bls.n	80141c4 <rcl_action_client_wait_set_get_entities_ready+0x114>
 801412a:	f8d3 01d4 	ldr.w	r0, [r3, #468]	@ 0x1d4
 801412e:	4282      	cmp	r2, r0
 8014130:	d948      	bls.n	80141c4 <rcl_action_client_wait_set_get_entities_ready+0x114>
 8014132:	f8d3 41c4 	ldr.w	r4, [r3, #452]	@ 0x1c4
 8014136:	69ea      	ldr	r2, [r5, #28]
 8014138:	42a2      	cmp	r2, r4
 801413a:	d943      	bls.n	80141c4 <rcl_action_client_wait_set_get_entities_ready+0x114>
 801413c:	f8d3 c1c8 	ldr.w	ip, [r3, #456]	@ 0x1c8
 8014140:	4562      	cmp	r2, ip
 8014142:	d93f      	bls.n	80141c4 <rcl_action_client_wait_set_get_entities_ready+0x114>
 8014144:	f8d3 e1cc 	ldr.w	lr, [r3, #460]	@ 0x1cc
 8014148:	4572      	cmp	r2, lr
 801414a:	d93b      	bls.n	80141c4 <rcl_action_client_wait_set_get_entities_ready+0x114>
 801414c:	69aa      	ldr	r2, [r5, #24]
 801414e:	682d      	ldr	r5, [r5, #0]
 8014150:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]
 8014154:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 8014158:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 801415c:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 8014160:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 8014164:	f103 0c0c 	add.w	ip, r3, #12
 8014168:	eba5 050c 	sub.w	r5, r5, ip
 801416c:	fab5 f585 	clz	r5, r5
 8014170:	096d      	lsrs	r5, r5, #5
 8014172:	7035      	strb	r5, [r6, #0]
 8014174:	f103 0510 	add.w	r5, r3, #16
 8014178:	1b64      	subs	r4, r4, r5
 801417a:	fab4 f484 	clz	r4, r4
 801417e:	0964      	lsrs	r4, r4, #5
 8014180:	703c      	strb	r4, [r7, #0]
 8014182:	eba3 0008 	sub.w	r0, r3, r8
 8014186:	1d1c      	adds	r4, r3, #4
 8014188:	3308      	adds	r3, #8
 801418a:	1ad3      	subs	r3, r2, r3
 801418c:	fab0 f080 	clz	r0, r0
 8014190:	9a06      	ldr	r2, [sp, #24]
 8014192:	0940      	lsrs	r0, r0, #5
 8014194:	1b09      	subs	r1, r1, r4
 8014196:	7010      	strb	r0, [r2, #0]
 8014198:	fab1 f181 	clz	r1, r1
 801419c:	9a07      	ldr	r2, [sp, #28]
 801419e:	0949      	lsrs	r1, r1, #5
 80141a0:	7011      	strb	r1, [r2, #0]
 80141a2:	fab3 f383 	clz	r3, r3
 80141a6:	9a08      	ldr	r2, [sp, #32]
 80141a8:	095b      	lsrs	r3, r3, #5
 80141aa:	2000      	movs	r0, #0
 80141ac:	7013      	strb	r3, [r2, #0]
 80141ae:	e001      	b.n	80141b4 <rcl_action_client_wait_set_get_entities_ready+0x104>
 80141b0:	f640 0036 	movw	r0, #2102	@ 0x836
 80141b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80141b8:	f7f7 f952 	bl	800b460 <rcutils_reset_error>
 80141bc:	f640 0036 	movw	r0, #2102	@ 0x836
 80141c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80141c4:	2001      	movs	r0, #1
 80141c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80141ca:	200b      	movs	r0, #11
 80141cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80141d0:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80141d4:	4770      	bx	lr
 80141d6:	bf00      	nop

080141d8 <rcl_action_take_goal_request>:
 80141d8:	2800      	cmp	r0, #0
 80141da:	d039      	beq.n	8014250 <rcl_action_take_goal_request+0x78>
 80141dc:	b570      	push	{r4, r5, r6, lr}
 80141de:	4604      	mov	r4, r0
 80141e0:	6800      	ldr	r0, [r0, #0]
 80141e2:	b380      	cbz	r0, 8014246 <rcl_action_take_goal_request+0x6e>
 80141e4:	460d      	mov	r5, r1
 80141e6:	4616      	mov	r6, r2
 80141e8:	f7fe fc96 	bl	8012b18 <rcl_service_is_valid>
 80141ec:	b330      	cbz	r0, 801423c <rcl_action_take_goal_request+0x64>
 80141ee:	6820      	ldr	r0, [r4, #0]
 80141f0:	3004      	adds	r0, #4
 80141f2:	f7fe fc91 	bl	8012b18 <rcl_service_is_valid>
 80141f6:	b308      	cbz	r0, 801423c <rcl_action_take_goal_request+0x64>
 80141f8:	6820      	ldr	r0, [r4, #0]
 80141fa:	3008      	adds	r0, #8
 80141fc:	f7fe fc8c 	bl	8012b18 <rcl_service_is_valid>
 8014200:	b1e0      	cbz	r0, 801423c <rcl_action_take_goal_request+0x64>
 8014202:	6820      	ldr	r0, [r4, #0]
 8014204:	300c      	adds	r0, #12
 8014206:	f7f6 f999 	bl	800a53c <rcl_publisher_is_valid>
 801420a:	b1b8      	cbz	r0, 801423c <rcl_action_take_goal_request+0x64>
 801420c:	6820      	ldr	r0, [r4, #0]
 801420e:	3010      	adds	r0, #16
 8014210:	f7f6 f994 	bl	800a53c <rcl_publisher_is_valid>
 8014214:	b190      	cbz	r0, 801423c <rcl_action_take_goal_request+0x64>
 8014216:	b1cd      	cbz	r5, 801424c <rcl_action_take_goal_request+0x74>
 8014218:	b1c6      	cbz	r6, 801424c <rcl_action_take_goal_request+0x74>
 801421a:	6820      	ldr	r0, [r4, #0]
 801421c:	4632      	mov	r2, r6
 801421e:	4629      	mov	r1, r5
 8014220:	f7fe fc22 	bl	8012a68 <rcl_take_request>
 8014224:	b148      	cbz	r0, 801423a <rcl_action_take_goal_request+0x62>
 8014226:	280a      	cmp	r0, #10
 8014228:	d007      	beq.n	801423a <rcl_action_take_goal_request+0x62>
 801422a:	f240 2259 	movw	r2, #601	@ 0x259
 801422e:	f640 0399 	movw	r3, #2201	@ 0x899
 8014232:	4290      	cmp	r0, r2
 8014234:	bf0c      	ite	eq
 8014236:	4618      	moveq	r0, r3
 8014238:	2001      	movne	r0, #1
 801423a:	bd70      	pop	{r4, r5, r6, pc}
 801423c:	f7f7 f910 	bl	800b460 <rcutils_reset_error>
 8014240:	f640 0098 	movw	r0, #2200	@ 0x898
 8014244:	bd70      	pop	{r4, r5, r6, pc}
 8014246:	f640 0098 	movw	r0, #2200	@ 0x898
 801424a:	bd70      	pop	{r4, r5, r6, pc}
 801424c:	200b      	movs	r0, #11
 801424e:	bd70      	pop	{r4, r5, r6, pc}
 8014250:	f640 0098 	movw	r0, #2200	@ 0x898
 8014254:	4770      	bx	lr
 8014256:	bf00      	nop

08014258 <rcl_action_send_goal_response>:
 8014258:	b390      	cbz	r0, 80142c0 <rcl_action_send_goal_response+0x68>
 801425a:	b570      	push	{r4, r5, r6, lr}
 801425c:	4604      	mov	r4, r0
 801425e:	6800      	ldr	r0, [r0, #0]
 8014260:	b348      	cbz	r0, 80142b6 <rcl_action_send_goal_response+0x5e>
 8014262:	460d      	mov	r5, r1
 8014264:	4616      	mov	r6, r2
 8014266:	f7fe fc57 	bl	8012b18 <rcl_service_is_valid>
 801426a:	b1f8      	cbz	r0, 80142ac <rcl_action_send_goal_response+0x54>
 801426c:	6820      	ldr	r0, [r4, #0]
 801426e:	3004      	adds	r0, #4
 8014270:	f7fe fc52 	bl	8012b18 <rcl_service_is_valid>
 8014274:	b1d0      	cbz	r0, 80142ac <rcl_action_send_goal_response+0x54>
 8014276:	6820      	ldr	r0, [r4, #0]
 8014278:	3008      	adds	r0, #8
 801427a:	f7fe fc4d 	bl	8012b18 <rcl_service_is_valid>
 801427e:	b1a8      	cbz	r0, 80142ac <rcl_action_send_goal_response+0x54>
 8014280:	6820      	ldr	r0, [r4, #0]
 8014282:	300c      	adds	r0, #12
 8014284:	f7f6 f95a 	bl	800a53c <rcl_publisher_is_valid>
 8014288:	b180      	cbz	r0, 80142ac <rcl_action_send_goal_response+0x54>
 801428a:	6820      	ldr	r0, [r4, #0]
 801428c:	3010      	adds	r0, #16
 801428e:	f7f6 f955 	bl	800a53c <rcl_publisher_is_valid>
 8014292:	b158      	cbz	r0, 80142ac <rcl_action_send_goal_response+0x54>
 8014294:	b195      	cbz	r5, 80142bc <rcl_action_send_goal_response+0x64>
 8014296:	b18e      	cbz	r6, 80142bc <rcl_action_send_goal_response+0x64>
 8014298:	6820      	ldr	r0, [r4, #0]
 801429a:	4632      	mov	r2, r6
 801429c:	4629      	mov	r1, r5
 801429e:	f7fe fc23 	bl	8012ae8 <rcl_send_response>
 80142a2:	b110      	cbz	r0, 80142aa <rcl_action_send_goal_response+0x52>
 80142a4:	2802      	cmp	r0, #2
 80142a6:	bf18      	it	ne
 80142a8:	2001      	movne	r0, #1
 80142aa:	bd70      	pop	{r4, r5, r6, pc}
 80142ac:	f7f7 f8d8 	bl	800b460 <rcutils_reset_error>
 80142b0:	f640 0098 	movw	r0, #2200	@ 0x898
 80142b4:	bd70      	pop	{r4, r5, r6, pc}
 80142b6:	f640 0098 	movw	r0, #2200	@ 0x898
 80142ba:	bd70      	pop	{r4, r5, r6, pc}
 80142bc:	200b      	movs	r0, #11
 80142be:	bd70      	pop	{r4, r5, r6, pc}
 80142c0:	f640 0098 	movw	r0, #2200	@ 0x898
 80142c4:	4770      	bx	lr
 80142c6:	bf00      	nop

080142c8 <rcl_action_take_result_request>:
 80142c8:	2800      	cmp	r0, #0
 80142ca:	d03a      	beq.n	8014342 <rcl_action_take_result_request+0x7a>
 80142cc:	b570      	push	{r4, r5, r6, lr}
 80142ce:	4604      	mov	r4, r0
 80142d0:	6800      	ldr	r0, [r0, #0]
 80142d2:	b388      	cbz	r0, 8014338 <rcl_action_take_result_request+0x70>
 80142d4:	460d      	mov	r5, r1
 80142d6:	4616      	mov	r6, r2
 80142d8:	f7fe fc1e 	bl	8012b18 <rcl_service_is_valid>
 80142dc:	b338      	cbz	r0, 801432e <rcl_action_take_result_request+0x66>
 80142de:	6820      	ldr	r0, [r4, #0]
 80142e0:	3004      	adds	r0, #4
 80142e2:	f7fe fc19 	bl	8012b18 <rcl_service_is_valid>
 80142e6:	b310      	cbz	r0, 801432e <rcl_action_take_result_request+0x66>
 80142e8:	6820      	ldr	r0, [r4, #0]
 80142ea:	3008      	adds	r0, #8
 80142ec:	f7fe fc14 	bl	8012b18 <rcl_service_is_valid>
 80142f0:	b1e8      	cbz	r0, 801432e <rcl_action_take_result_request+0x66>
 80142f2:	6820      	ldr	r0, [r4, #0]
 80142f4:	300c      	adds	r0, #12
 80142f6:	f7f6 f921 	bl	800a53c <rcl_publisher_is_valid>
 80142fa:	b1c0      	cbz	r0, 801432e <rcl_action_take_result_request+0x66>
 80142fc:	6820      	ldr	r0, [r4, #0]
 80142fe:	3010      	adds	r0, #16
 8014300:	f7f6 f91c 	bl	800a53c <rcl_publisher_is_valid>
 8014304:	b198      	cbz	r0, 801432e <rcl_action_take_result_request+0x66>
 8014306:	b1d5      	cbz	r5, 801433e <rcl_action_take_result_request+0x76>
 8014308:	b1ce      	cbz	r6, 801433e <rcl_action_take_result_request+0x76>
 801430a:	6820      	ldr	r0, [r4, #0]
 801430c:	4632      	mov	r2, r6
 801430e:	4629      	mov	r1, r5
 8014310:	3008      	adds	r0, #8
 8014312:	f7fe fba9 	bl	8012a68 <rcl_take_request>
 8014316:	b148      	cbz	r0, 801432c <rcl_action_take_result_request+0x64>
 8014318:	280a      	cmp	r0, #10
 801431a:	d007      	beq.n	801432c <rcl_action_take_result_request+0x64>
 801431c:	f240 2259 	movw	r2, #601	@ 0x259
 8014320:	f640 0399 	movw	r3, #2201	@ 0x899
 8014324:	4290      	cmp	r0, r2
 8014326:	bf0c      	ite	eq
 8014328:	4618      	moveq	r0, r3
 801432a:	2001      	movne	r0, #1
 801432c:	bd70      	pop	{r4, r5, r6, pc}
 801432e:	f7f7 f897 	bl	800b460 <rcutils_reset_error>
 8014332:	f640 0098 	movw	r0, #2200	@ 0x898
 8014336:	bd70      	pop	{r4, r5, r6, pc}
 8014338:	f640 0098 	movw	r0, #2200	@ 0x898
 801433c:	bd70      	pop	{r4, r5, r6, pc}
 801433e:	200b      	movs	r0, #11
 8014340:	bd70      	pop	{r4, r5, r6, pc}
 8014342:	f640 0098 	movw	r0, #2200	@ 0x898
 8014346:	4770      	bx	lr

08014348 <rcl_action_take_cancel_request>:
 8014348:	2800      	cmp	r0, #0
 801434a:	d03a      	beq.n	80143c2 <rcl_action_take_cancel_request+0x7a>
 801434c:	b570      	push	{r4, r5, r6, lr}
 801434e:	4604      	mov	r4, r0
 8014350:	6800      	ldr	r0, [r0, #0]
 8014352:	b388      	cbz	r0, 80143b8 <rcl_action_take_cancel_request+0x70>
 8014354:	460d      	mov	r5, r1
 8014356:	4616      	mov	r6, r2
 8014358:	f7fe fbde 	bl	8012b18 <rcl_service_is_valid>
 801435c:	b338      	cbz	r0, 80143ae <rcl_action_take_cancel_request+0x66>
 801435e:	6820      	ldr	r0, [r4, #0]
 8014360:	3004      	adds	r0, #4
 8014362:	f7fe fbd9 	bl	8012b18 <rcl_service_is_valid>
 8014366:	b310      	cbz	r0, 80143ae <rcl_action_take_cancel_request+0x66>
 8014368:	6820      	ldr	r0, [r4, #0]
 801436a:	3008      	adds	r0, #8
 801436c:	f7fe fbd4 	bl	8012b18 <rcl_service_is_valid>
 8014370:	b1e8      	cbz	r0, 80143ae <rcl_action_take_cancel_request+0x66>
 8014372:	6820      	ldr	r0, [r4, #0]
 8014374:	300c      	adds	r0, #12
 8014376:	f7f6 f8e1 	bl	800a53c <rcl_publisher_is_valid>
 801437a:	b1c0      	cbz	r0, 80143ae <rcl_action_take_cancel_request+0x66>
 801437c:	6820      	ldr	r0, [r4, #0]
 801437e:	3010      	adds	r0, #16
 8014380:	f7f6 f8dc 	bl	800a53c <rcl_publisher_is_valid>
 8014384:	b198      	cbz	r0, 80143ae <rcl_action_take_cancel_request+0x66>
 8014386:	b1d5      	cbz	r5, 80143be <rcl_action_take_cancel_request+0x76>
 8014388:	b1ce      	cbz	r6, 80143be <rcl_action_take_cancel_request+0x76>
 801438a:	6820      	ldr	r0, [r4, #0]
 801438c:	4632      	mov	r2, r6
 801438e:	4629      	mov	r1, r5
 8014390:	3004      	adds	r0, #4
 8014392:	f7fe fb69 	bl	8012a68 <rcl_take_request>
 8014396:	b148      	cbz	r0, 80143ac <rcl_action_take_cancel_request+0x64>
 8014398:	280a      	cmp	r0, #10
 801439a:	d007      	beq.n	80143ac <rcl_action_take_cancel_request+0x64>
 801439c:	f240 2259 	movw	r2, #601	@ 0x259
 80143a0:	f640 0399 	movw	r3, #2201	@ 0x899
 80143a4:	4290      	cmp	r0, r2
 80143a6:	bf0c      	ite	eq
 80143a8:	4618      	moveq	r0, r3
 80143aa:	2001      	movne	r0, #1
 80143ac:	bd70      	pop	{r4, r5, r6, pc}
 80143ae:	f7f7 f857 	bl	800b460 <rcutils_reset_error>
 80143b2:	f640 0098 	movw	r0, #2200	@ 0x898
 80143b6:	bd70      	pop	{r4, r5, r6, pc}
 80143b8:	f640 0098 	movw	r0, #2200	@ 0x898
 80143bc:	bd70      	pop	{r4, r5, r6, pc}
 80143be:	200b      	movs	r0, #11
 80143c0:	bd70      	pop	{r4, r5, r6, pc}
 80143c2:	f640 0098 	movw	r0, #2200	@ 0x898
 80143c6:	4770      	bx	lr

080143c8 <rcl_action_send_cancel_response>:
 80143c8:	b398      	cbz	r0, 8014432 <rcl_action_send_cancel_response+0x6a>
 80143ca:	b570      	push	{r4, r5, r6, lr}
 80143cc:	4604      	mov	r4, r0
 80143ce:	6800      	ldr	r0, [r0, #0]
 80143d0:	b350      	cbz	r0, 8014428 <rcl_action_send_cancel_response+0x60>
 80143d2:	460d      	mov	r5, r1
 80143d4:	4616      	mov	r6, r2
 80143d6:	f7fe fb9f 	bl	8012b18 <rcl_service_is_valid>
 80143da:	b300      	cbz	r0, 801441e <rcl_action_send_cancel_response+0x56>
 80143dc:	6820      	ldr	r0, [r4, #0]
 80143de:	3004      	adds	r0, #4
 80143e0:	f7fe fb9a 	bl	8012b18 <rcl_service_is_valid>
 80143e4:	b1d8      	cbz	r0, 801441e <rcl_action_send_cancel_response+0x56>
 80143e6:	6820      	ldr	r0, [r4, #0]
 80143e8:	3008      	adds	r0, #8
 80143ea:	f7fe fb95 	bl	8012b18 <rcl_service_is_valid>
 80143ee:	b1b0      	cbz	r0, 801441e <rcl_action_send_cancel_response+0x56>
 80143f0:	6820      	ldr	r0, [r4, #0]
 80143f2:	300c      	adds	r0, #12
 80143f4:	f7f6 f8a2 	bl	800a53c <rcl_publisher_is_valid>
 80143f8:	b188      	cbz	r0, 801441e <rcl_action_send_cancel_response+0x56>
 80143fa:	6820      	ldr	r0, [r4, #0]
 80143fc:	3010      	adds	r0, #16
 80143fe:	f7f6 f89d 	bl	800a53c <rcl_publisher_is_valid>
 8014402:	b160      	cbz	r0, 801441e <rcl_action_send_cancel_response+0x56>
 8014404:	b19d      	cbz	r5, 801442e <rcl_action_send_cancel_response+0x66>
 8014406:	b196      	cbz	r6, 801442e <rcl_action_send_cancel_response+0x66>
 8014408:	6820      	ldr	r0, [r4, #0]
 801440a:	4632      	mov	r2, r6
 801440c:	4629      	mov	r1, r5
 801440e:	3004      	adds	r0, #4
 8014410:	f7fe fb6a 	bl	8012ae8 <rcl_send_response>
 8014414:	b110      	cbz	r0, 801441c <rcl_action_send_cancel_response+0x54>
 8014416:	2802      	cmp	r0, #2
 8014418:	bf18      	it	ne
 801441a:	2001      	movne	r0, #1
 801441c:	bd70      	pop	{r4, r5, r6, pc}
 801441e:	f7f7 f81f 	bl	800b460 <rcutils_reset_error>
 8014422:	f640 0098 	movw	r0, #2200	@ 0x898
 8014426:	bd70      	pop	{r4, r5, r6, pc}
 8014428:	f640 0098 	movw	r0, #2200	@ 0x898
 801442c:	bd70      	pop	{r4, r5, r6, pc}
 801442e:	200b      	movs	r0, #11
 8014430:	bd70      	pop	{r4, r5, r6, pc}
 8014432:	f640 0098 	movw	r0, #2200	@ 0x898
 8014436:	4770      	bx	lr

08014438 <rcl_action_wait_set_add_action_server>:
 8014438:	2800      	cmp	r0, #0
 801443a:	d04d      	beq.n	80144d8 <rcl_action_wait_set_add_action_server+0xa0>
 801443c:	b570      	push	{r4, r5, r6, lr}
 801443e:	460c      	mov	r4, r1
 8014440:	b159      	cbz	r1, 801445a <rcl_action_wait_set_add_action_server+0x22>
 8014442:	4605      	mov	r5, r0
 8014444:	6808      	ldr	r0, [r1, #0]
 8014446:	b140      	cbz	r0, 801445a <rcl_action_wait_set_add_action_server+0x22>
 8014448:	4616      	mov	r6, r2
 801444a:	f7fe fb65 	bl	8012b18 <rcl_service_is_valid>
 801444e:	b120      	cbz	r0, 801445a <rcl_action_wait_set_add_action_server+0x22>
 8014450:	6820      	ldr	r0, [r4, #0]
 8014452:	3004      	adds	r0, #4
 8014454:	f7fe fb60 	bl	8012b18 <rcl_service_is_valid>
 8014458:	b910      	cbnz	r0, 8014460 <rcl_action_wait_set_add_action_server+0x28>
 801445a:	f640 0098 	movw	r0, #2200	@ 0x898
 801445e:	bd70      	pop	{r4, r5, r6, pc}
 8014460:	6820      	ldr	r0, [r4, #0]
 8014462:	3008      	adds	r0, #8
 8014464:	f7fe fb58 	bl	8012b18 <rcl_service_is_valid>
 8014468:	2800      	cmp	r0, #0
 801446a:	d0f6      	beq.n	801445a <rcl_action_wait_set_add_action_server+0x22>
 801446c:	6820      	ldr	r0, [r4, #0]
 801446e:	300c      	adds	r0, #12
 8014470:	f7f6 f87c 	bl	800a56c <rcl_publisher_is_valid_except_context>
 8014474:	2800      	cmp	r0, #0
 8014476:	d0f0      	beq.n	801445a <rcl_action_wait_set_add_action_server+0x22>
 8014478:	6820      	ldr	r0, [r4, #0]
 801447a:	3010      	adds	r0, #16
 801447c:	f7f6 f876 	bl	800a56c <rcl_publisher_is_valid_except_context>
 8014480:	2800      	cmp	r0, #0
 8014482:	d0ea      	beq.n	801445a <rcl_action_wait_set_add_action_server+0x22>
 8014484:	6821      	ldr	r1, [r4, #0]
 8014486:	4628      	mov	r0, r5
 8014488:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 801448c:	f7ff face 	bl	8013a2c <rcl_wait_set_add_service>
 8014490:	2800      	cmp	r0, #0
 8014492:	d1e4      	bne.n	801445e <rcl_action_wait_set_add_action_server+0x26>
 8014494:	6821      	ldr	r1, [r4, #0]
 8014496:	4628      	mov	r0, r5
 8014498:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 801449c:	3104      	adds	r1, #4
 801449e:	f7ff fac5 	bl	8013a2c <rcl_wait_set_add_service>
 80144a2:	2800      	cmp	r0, #0
 80144a4:	d1db      	bne.n	801445e <rcl_action_wait_set_add_action_server+0x26>
 80144a6:	6821      	ldr	r1, [r4, #0]
 80144a8:	4628      	mov	r0, r5
 80144aa:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 80144ae:	3108      	adds	r1, #8
 80144b0:	f7ff fabc 	bl	8013a2c <rcl_wait_set_add_service>
 80144b4:	2800      	cmp	r0, #0
 80144b6:	d1d2      	bne.n	801445e <rcl_action_wait_set_add_action_server+0x26>
 80144b8:	6821      	ldr	r1, [r4, #0]
 80144ba:	4628      	mov	r0, r5
 80144bc:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 80144c0:	3114      	adds	r1, #20
 80144c2:	f7ff fa57 	bl	8013974 <rcl_wait_set_add_timer>
 80144c6:	2800      	cmp	r0, #0
 80144c8:	d1c9      	bne.n	801445e <rcl_action_wait_set_add_action_server+0x26>
 80144ca:	2e00      	cmp	r6, #0
 80144cc:	d0c7      	beq.n	801445e <rcl_action_wait_set_add_action_server+0x26>
 80144ce:	6823      	ldr	r3, [r4, #0]
 80144d0:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 80144d4:	6033      	str	r3, [r6, #0]
 80144d6:	bd70      	pop	{r4, r5, r6, pc}
 80144d8:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80144dc:	4770      	bx	lr
 80144de:	bf00      	nop

080144e0 <rcl_action_server_wait_set_get_entities_ready>:
 80144e0:	2800      	cmp	r0, #0
 80144e2:	d05a      	beq.n	801459a <rcl_action_server_wait_set_get_entities_ready+0xba>
 80144e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80144e6:	460c      	mov	r4, r1
 80144e8:	b161      	cbz	r1, 8014504 <rcl_action_server_wait_set_get_entities_ready+0x24>
 80144ea:	4605      	mov	r5, r0
 80144ec:	6808      	ldr	r0, [r1, #0]
 80144ee:	b148      	cbz	r0, 8014504 <rcl_action_server_wait_set_get_entities_ready+0x24>
 80144f0:	4616      	mov	r6, r2
 80144f2:	461f      	mov	r7, r3
 80144f4:	f7fe fb10 	bl	8012b18 <rcl_service_is_valid>
 80144f8:	b120      	cbz	r0, 8014504 <rcl_action_server_wait_set_get_entities_ready+0x24>
 80144fa:	6820      	ldr	r0, [r4, #0]
 80144fc:	3004      	adds	r0, #4
 80144fe:	f7fe fb0b 	bl	8012b18 <rcl_service_is_valid>
 8014502:	b910      	cbnz	r0, 801450a <rcl_action_server_wait_set_get_entities_ready+0x2a>
 8014504:	f640 0098 	movw	r0, #2200	@ 0x898
 8014508:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801450a:	6820      	ldr	r0, [r4, #0]
 801450c:	3008      	adds	r0, #8
 801450e:	f7fe fb03 	bl	8012b18 <rcl_service_is_valid>
 8014512:	2800      	cmp	r0, #0
 8014514:	d0f6      	beq.n	8014504 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8014516:	6820      	ldr	r0, [r4, #0]
 8014518:	300c      	adds	r0, #12
 801451a:	f7f6 f827 	bl	800a56c <rcl_publisher_is_valid_except_context>
 801451e:	2800      	cmp	r0, #0
 8014520:	d0f0      	beq.n	8014504 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8014522:	6820      	ldr	r0, [r4, #0]
 8014524:	3010      	adds	r0, #16
 8014526:	f7f6 f821 	bl	800a56c <rcl_publisher_is_valid_except_context>
 801452a:	2800      	cmp	r0, #0
 801452c:	d0ea      	beq.n	8014504 <rcl_action_server_wait_set_get_entities_ready+0x24>
 801452e:	b3be      	cbz	r6, 80145a0 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8014530:	b3b7      	cbz	r7, 80145a0 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8014532:	9b06      	ldr	r3, [sp, #24]
 8014534:	b3a3      	cbz	r3, 80145a0 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8014536:	9b07      	ldr	r3, [sp, #28]
 8014538:	b393      	cbz	r3, 80145a0 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 801453a:	6821      	ldr	r1, [r4, #0]
 801453c:	692a      	ldr	r2, [r5, #16]
 801453e:	6a2c      	ldr	r4, [r5, #32]
 8014540:	f8d1 51e8 	ldr.w	r5, [r1, #488]	@ 0x1e8
 8014544:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 8014548:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 801454c:	f8d1 01e4 	ldr.w	r0, [r1, #484]	@ 0x1e4
 8014550:	f8d1 51dc 	ldr.w	r5, [r1, #476]	@ 0x1dc
 8014554:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8014558:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801455c:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 8014560:	1a64      	subs	r4, r4, r1
 8014562:	fab4 f484 	clz	r4, r4
 8014566:	0964      	lsrs	r4, r4, #5
 8014568:	7034      	strb	r4, [r6, #0]
 801456a:	1d0c      	adds	r4, r1, #4
 801456c:	1b1b      	subs	r3, r3, r4
 801456e:	fab3 f383 	clz	r3, r3
 8014572:	095b      	lsrs	r3, r3, #5
 8014574:	f101 0408 	add.w	r4, r1, #8
 8014578:	703b      	strb	r3, [r7, #0]
 801457a:	f101 0314 	add.w	r3, r1, #20
 801457e:	1b01      	subs	r1, r0, r4
 8014580:	1ad3      	subs	r3, r2, r3
 8014582:	fab1 f181 	clz	r1, r1
 8014586:	9a06      	ldr	r2, [sp, #24]
 8014588:	0949      	lsrs	r1, r1, #5
 801458a:	7011      	strb	r1, [r2, #0]
 801458c:	fab3 f383 	clz	r3, r3
 8014590:	9a07      	ldr	r2, [sp, #28]
 8014592:	095b      	lsrs	r3, r3, #5
 8014594:	2000      	movs	r0, #0
 8014596:	7013      	strb	r3, [r2, #0]
 8014598:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801459a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801459e:	4770      	bx	lr
 80145a0:	200b      	movs	r0, #11
 80145a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080145a4 <_execute_event_handler>:
 80145a4:	2002      	movs	r0, #2
 80145a6:	4770      	bx	lr

080145a8 <_cancel_goal_event_handler>:
 80145a8:	2003      	movs	r0, #3
 80145aa:	4770      	bx	lr

080145ac <_succeed_event_handler>:
 80145ac:	2004      	movs	r0, #4
 80145ae:	4770      	bx	lr

080145b0 <_abort_event_handler>:
 80145b0:	2006      	movs	r0, #6
 80145b2:	4770      	bx	lr

080145b4 <_canceled_event_handler>:
 80145b4:	2005      	movs	r0, #5
 80145b6:	4770      	bx	lr

080145b8 <rcl_action_transition_goal_state>:
 80145b8:	b2c2      	uxtb	r2, r0
 80145ba:	2a06      	cmp	r2, #6
 80145bc:	d80c      	bhi.n	80145d8 <rcl_action_transition_goal_state+0x20>
 80145be:	2904      	cmp	r1, #4
 80145c0:	d80a      	bhi.n	80145d8 <rcl_action_transition_goal_state+0x20>
 80145c2:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 80145c6:	b410      	push	{r4}
 80145c8:	1853      	adds	r3, r2, r1
 80145ca:	4c06      	ldr	r4, [pc, #24]	@ (80145e4 <rcl_action_transition_goal_state+0x2c>)
 80145cc:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80145d0:	b123      	cbz	r3, 80145dc <rcl_action_transition_goal_state+0x24>
 80145d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80145d6:	4718      	bx	r3
 80145d8:	2000      	movs	r0, #0
 80145da:	4770      	bx	lr
 80145dc:	2000      	movs	r0, #0
 80145de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80145e2:	4770      	bx	lr
 80145e4:	0801b2f4 	.word	0x0801b2f4

080145e8 <rcl_action_get_zero_initialized_cancel_response>:
 80145e8:	b510      	push	{r4, lr}
 80145ea:	4c07      	ldr	r4, [pc, #28]	@ (8014608 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 80145ec:	4686      	mov	lr, r0
 80145ee:	4684      	mov	ip, r0
 80145f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80145f2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80145f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80145f8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80145fc:	6823      	ldr	r3, [r4, #0]
 80145fe:	f8cc 3000 	str.w	r3, [ip]
 8014602:	4670      	mov	r0, lr
 8014604:	bd10      	pop	{r4, pc}
 8014606:	bf00      	nop
 8014608:	0801b380 	.word	0x0801b380

0801460c <rclc_action_send_result_request>:
 801460c:	b1d0      	cbz	r0, 8014644 <rclc_action_send_result_request+0x38>
 801460e:	b500      	push	{lr}
 8014610:	4684      	mov	ip, r0
 8014612:	b087      	sub	sp, #28
 8014614:	f8d0 0009 	ldr.w	r0, [r0, #9]
 8014618:	f8dc 100d 	ldr.w	r1, [ip, #13]
 801461c:	f8dc 2011 	ldr.w	r2, [ip, #17]
 8014620:	f8dc 3015 	ldr.w	r3, [ip, #21]
 8014624:	f10d 0e08 	add.w	lr, sp, #8
 8014628:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801462c:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8014630:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 8014634:	a902      	add	r1, sp, #8
 8014636:	3010      	adds	r0, #16
 8014638:	f7ff fbda 	bl	8013df0 <rcl_action_send_result_request>
 801463c:	b920      	cbnz	r0, 8014648 <rclc_action_send_result_request+0x3c>
 801463e:	b007      	add	sp, #28
 8014640:	f85d fb04 	ldr.w	pc, [sp], #4
 8014644:	200b      	movs	r0, #11
 8014646:	4770      	bx	lr
 8014648:	9001      	str	r0, [sp, #4]
 801464a:	f7f6 ff09 	bl	800b460 <rcutils_reset_error>
 801464e:	9801      	ldr	r0, [sp, #4]
 8014650:	b007      	add	sp, #28
 8014652:	f85d fb04 	ldr.w	pc, [sp], #4
 8014656:	bf00      	nop

08014658 <rclc_action_take_goal_handle>:
 8014658:	b160      	cbz	r0, 8014674 <rclc_action_take_goal_handle+0x1c>
 801465a:	6883      	ldr	r3, [r0, #8]
 801465c:	b143      	cbz	r3, 8014670 <rclc_action_take_goal_handle+0x18>
 801465e:	6819      	ldr	r1, [r3, #0]
 8014660:	6081      	str	r1, [r0, #8]
 8014662:	2200      	movs	r2, #0
 8014664:	721a      	strb	r2, [r3, #8]
 8014666:	68c1      	ldr	r1, [r0, #12]
 8014668:	6019      	str	r1, [r3, #0]
 801466a:	621a      	str	r2, [r3, #32]
 801466c:	849a      	strh	r2, [r3, #36]	@ 0x24
 801466e:	60c3      	str	r3, [r0, #12]
 8014670:	4618      	mov	r0, r3
 8014672:	4770      	bx	lr
 8014674:	4603      	mov	r3, r0
 8014676:	e7fb      	b.n	8014670 <rclc_action_take_goal_handle+0x18>

08014678 <rclc_action_remove_used_goal_handle>:
 8014678:	b180      	cbz	r0, 801469c <rclc_action_remove_used_goal_handle+0x24>
 801467a:	b179      	cbz	r1, 801469c <rclc_action_remove_used_goal_handle+0x24>
 801467c:	68c3      	ldr	r3, [r0, #12]
 801467e:	4299      	cmp	r1, r3
 8014680:	d00d      	beq.n	801469e <rclc_action_remove_used_goal_handle+0x26>
 8014682:	b12b      	cbz	r3, 8014690 <rclc_action_remove_used_goal_handle+0x18>
 8014684:	681a      	ldr	r2, [r3, #0]
 8014686:	4291      	cmp	r1, r2
 8014688:	d003      	beq.n	8014692 <rclc_action_remove_used_goal_handle+0x1a>
 801468a:	4613      	mov	r3, r2
 801468c:	2b00      	cmp	r3, #0
 801468e:	d1f9      	bne.n	8014684 <rclc_action_remove_used_goal_handle+0xc>
 8014690:	4770      	bx	lr
 8014692:	680a      	ldr	r2, [r1, #0]
 8014694:	601a      	str	r2, [r3, #0]
 8014696:	6883      	ldr	r3, [r0, #8]
 8014698:	600b      	str	r3, [r1, #0]
 801469a:	6081      	str	r1, [r0, #8]
 801469c:	4770      	bx	lr
 801469e:	680b      	ldr	r3, [r1, #0]
 80146a0:	60c3      	str	r3, [r0, #12]
 80146a2:	e7f8      	b.n	8014696 <rclc_action_remove_used_goal_handle+0x1e>

080146a4 <rclc_action_find_goal_handle_by_uuid>:
 80146a4:	b538      	push	{r3, r4, r5, lr}
 80146a6:	b180      	cbz	r0, 80146ca <rclc_action_find_goal_handle_by_uuid+0x26>
 80146a8:	460d      	mov	r5, r1
 80146aa:	b181      	cbz	r1, 80146ce <rclc_action_find_goal_handle_by_uuid+0x2a>
 80146ac:	68c4      	ldr	r4, [r0, #12]
 80146ae:	b914      	cbnz	r4, 80146b6 <rclc_action_find_goal_handle_by_uuid+0x12>
 80146b0:	e009      	b.n	80146c6 <rclc_action_find_goal_handle_by_uuid+0x22>
 80146b2:	6824      	ldr	r4, [r4, #0]
 80146b4:	b13c      	cbz	r4, 80146c6 <rclc_action_find_goal_handle_by_uuid+0x22>
 80146b6:	f104 0009 	add.w	r0, r4, #9
 80146ba:	2210      	movs	r2, #16
 80146bc:	4629      	mov	r1, r5
 80146be:	f004 ff14 	bl	80194ea <memcmp>
 80146c2:	2800      	cmp	r0, #0
 80146c4:	d1f5      	bne.n	80146b2 <rclc_action_find_goal_handle_by_uuid+0xe>
 80146c6:	4620      	mov	r0, r4
 80146c8:	bd38      	pop	{r3, r4, r5, pc}
 80146ca:	4604      	mov	r4, r0
 80146cc:	e7fb      	b.n	80146c6 <rclc_action_find_goal_handle_by_uuid+0x22>
 80146ce:	460c      	mov	r4, r1
 80146d0:	e7f9      	b.n	80146c6 <rclc_action_find_goal_handle_by_uuid+0x22>
 80146d2:	bf00      	nop

080146d4 <rclc_action_find_first_handle_by_status>:
 80146d4:	b140      	cbz	r0, 80146e8 <rclc_action_find_first_handle_by_status+0x14>
 80146d6:	68c0      	ldr	r0, [r0, #12]
 80146d8:	b910      	cbnz	r0, 80146e0 <rclc_action_find_first_handle_by_status+0xc>
 80146da:	e005      	b.n	80146e8 <rclc_action_find_first_handle_by_status+0x14>
 80146dc:	6800      	ldr	r0, [r0, #0]
 80146de:	b118      	cbz	r0, 80146e8 <rclc_action_find_first_handle_by_status+0x14>
 80146e0:	f990 3008 	ldrsb.w	r3, [r0, #8]
 80146e4:	428b      	cmp	r3, r1
 80146e6:	d1f9      	bne.n	80146dc <rclc_action_find_first_handle_by_status+0x8>
 80146e8:	4770      	bx	lr
 80146ea:	bf00      	nop

080146ec <rclc_action_find_first_terminated_handle>:
 80146ec:	b140      	cbz	r0, 8014700 <rclc_action_find_first_terminated_handle+0x14>
 80146ee:	68c0      	ldr	r0, [r0, #12]
 80146f0:	b910      	cbnz	r0, 80146f8 <rclc_action_find_first_terminated_handle+0xc>
 80146f2:	e005      	b.n	8014700 <rclc_action_find_first_terminated_handle+0x14>
 80146f4:	6800      	ldr	r0, [r0, #0]
 80146f6:	b118      	cbz	r0, 8014700 <rclc_action_find_first_terminated_handle+0x14>
 80146f8:	f990 3008 	ldrsb.w	r3, [r0, #8]
 80146fc:	2b03      	cmp	r3, #3
 80146fe:	ddf9      	ble.n	80146f4 <rclc_action_find_first_terminated_handle+0x8>
 8014700:	4770      	bx	lr
 8014702:	bf00      	nop

08014704 <rclc_action_find_handle_by_goal_request_sequence_number>:
 8014704:	b170      	cbz	r0, 8014724 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8014706:	68c0      	ldr	r0, [r0, #12]
 8014708:	b160      	cbz	r0, 8014724 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 801470a:	b410      	push	{r4}
 801470c:	e001      	b.n	8014712 <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 801470e:	6800      	ldr	r0, [r0, #0]
 8014710:	b128      	cbz	r0, 801471e <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 8014712:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 8014716:	4299      	cmp	r1, r3
 8014718:	bf08      	it	eq
 801471a:	4294      	cmpeq	r4, r2
 801471c:	d1f7      	bne.n	801470e <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 801471e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014722:	4770      	bx	lr
 8014724:	4770      	bx	lr
 8014726:	bf00      	nop

08014728 <rclc_action_find_handle_by_result_request_sequence_number>:
 8014728:	b170      	cbz	r0, 8014748 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 801472a:	68c0      	ldr	r0, [r0, #12]
 801472c:	b160      	cbz	r0, 8014748 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 801472e:	b410      	push	{r4}
 8014730:	e001      	b.n	8014736 <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 8014732:	6800      	ldr	r0, [r0, #0]
 8014734:	b128      	cbz	r0, 8014742 <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 8014736:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 801473a:	4299      	cmp	r1, r3
 801473c:	bf08      	it	eq
 801473e:	4294      	cmpeq	r4, r2
 8014740:	d1f7      	bne.n	8014732 <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 8014742:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014746:	4770      	bx	lr
 8014748:	4770      	bx	lr
 801474a:	bf00      	nop

0801474c <rclc_action_find_handle_by_cancel_request_sequence_number>:
 801474c:	b170      	cbz	r0, 801476c <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 801474e:	68c0      	ldr	r0, [r0, #12]
 8014750:	b160      	cbz	r0, 801476c <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8014752:	b410      	push	{r4}
 8014754:	e001      	b.n	801475a <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 8014756:	6800      	ldr	r0, [r0, #0]
 8014758:	b128      	cbz	r0, 8014766 <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 801475a:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 801475e:	4299      	cmp	r1, r3
 8014760:	bf08      	it	eq
 8014762:	4294      	cmpeq	r4, r2
 8014764:	d1f7      	bne.n	8014756 <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 8014766:	f85d 4b04 	ldr.w	r4, [sp], #4
 801476a:	4770      	bx	lr
 801476c:	4770      	bx	lr
 801476e:	bf00      	nop

08014770 <rclc_action_find_first_handle_with_goal_response>:
 8014770:	b140      	cbz	r0, 8014784 <rclc_action_find_first_handle_with_goal_response+0x14>
 8014772:	68c0      	ldr	r0, [r0, #12]
 8014774:	b910      	cbnz	r0, 801477c <rclc_action_find_first_handle_with_goal_response+0xc>
 8014776:	e005      	b.n	8014784 <rclc_action_find_first_handle_with_goal_response+0x14>
 8014778:	6800      	ldr	r0, [r0, #0]
 801477a:	b118      	cbz	r0, 8014784 <rclc_action_find_first_handle_with_goal_response+0x14>
 801477c:	f890 3020 	ldrb.w	r3, [r0, #32]
 8014780:	2b00      	cmp	r3, #0
 8014782:	d0f9      	beq.n	8014778 <rclc_action_find_first_handle_with_goal_response+0x8>
 8014784:	4770      	bx	lr
 8014786:	bf00      	nop

08014788 <rclc_action_find_first_handle_with_result_response>:
 8014788:	b140      	cbz	r0, 801479c <rclc_action_find_first_handle_with_result_response+0x14>
 801478a:	68c0      	ldr	r0, [r0, #12]
 801478c:	b910      	cbnz	r0, 8014794 <rclc_action_find_first_handle_with_result_response+0xc>
 801478e:	e005      	b.n	801479c <rclc_action_find_first_handle_with_result_response+0x14>
 8014790:	6800      	ldr	r0, [r0, #0]
 8014792:	b118      	cbz	r0, 801479c <rclc_action_find_first_handle_with_result_response+0x14>
 8014794:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 8014798:	2b00      	cmp	r3, #0
 801479a:	d0f9      	beq.n	8014790 <rclc_action_find_first_handle_with_result_response+0x8>
 801479c:	4770      	bx	lr
 801479e:	bf00      	nop

080147a0 <rclc_action_server_response_goal_request>:
 80147a0:	b198      	cbz	r0, 80147ca <rclc_action_server_response_goal_request+0x2a>
 80147a2:	b510      	push	{r4, lr}
 80147a4:	6844      	ldr	r4, [r0, #4]
 80147a6:	b086      	sub	sp, #24
 80147a8:	2200      	movs	r2, #0
 80147aa:	e9cd 2203 	strd	r2, r2, [sp, #12]
 80147ae:	460b      	mov	r3, r1
 80147b0:	9205      	str	r2, [sp, #20]
 80147b2:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 80147b6:	aa03      	add	r2, sp, #12
 80147b8:	f104 0010 	add.w	r0, r4, #16
 80147bc:	f88d 300c 	strb.w	r3, [sp, #12]
 80147c0:	f7ff fd4a 	bl	8014258 <rcl_action_send_goal_response>
 80147c4:	b918      	cbnz	r0, 80147ce <rclc_action_server_response_goal_request+0x2e>
 80147c6:	b006      	add	sp, #24
 80147c8:	bd10      	pop	{r4, pc}
 80147ca:	200b      	movs	r0, #11
 80147cc:	4770      	bx	lr
 80147ce:	9001      	str	r0, [sp, #4]
 80147d0:	f7f6 fe46 	bl	800b460 <rcutils_reset_error>
 80147d4:	9801      	ldr	r0, [sp, #4]
 80147d6:	b006      	add	sp, #24
 80147d8:	bd10      	pop	{r4, pc}
 80147da:	bf00      	nop
 80147dc:	0000      	movs	r0, r0
	...

080147e0 <rclc_action_server_goal_cancel_accept>:
 80147e0:	b310      	cbz	r0, 8014828 <rclc_action_server_goal_cancel_accept+0x48>
 80147e2:	b510      	push	{r4, lr}
 80147e4:	b090      	sub	sp, #64	@ 0x40
 80147e6:	4604      	mov	r4, r0
 80147e8:	a806      	add	r0, sp, #24
 80147ea:	f7ff fefd 	bl	80145e8 <rcl_action_get_zero_initialized_cancel_response>
 80147ee:	2300      	movs	r3, #0
 80147f0:	f8d4 0009 	ldr.w	r0, [r4, #9]
 80147f4:	f8d4 100d 	ldr.w	r1, [r4, #13]
 80147f8:	f8d4 2011 	ldr.w	r2, [r4, #17]
 80147fc:	f88d 3018 	strb.w	r3, [sp, #24]
 8014800:	f8d4 3015 	ldr.w	r3, [r4, #21]
 8014804:	f8cd d01c 	str.w	sp, [sp, #28]
 8014808:	46ec      	mov	ip, sp
 801480a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801480e:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8014830 <rclc_action_server_goal_cancel_accept+0x50>
 8014812:	6860      	ldr	r0, [r4, #4]
 8014814:	aa06      	add	r2, sp, #24
 8014816:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 801481a:	3010      	adds	r0, #16
 801481c:	ed8d 7b08 	vstr	d7, [sp, #32]
 8014820:	f7ff fdd2 	bl	80143c8 <rcl_action_send_cancel_response>
 8014824:	b010      	add	sp, #64	@ 0x40
 8014826:	bd10      	pop	{r4, pc}
 8014828:	200b      	movs	r0, #11
 801482a:	4770      	bx	lr
 801482c:	f3af 8000 	nop.w
 8014830:	00000001 	.word	0x00000001
 8014834:	00000001 	.word	0x00000001

08014838 <rclc_action_server_goal_cancel_reject>:
 8014838:	b082      	sub	sp, #8
 801483a:	b530      	push	{r4, r5, lr}
 801483c:	b08b      	sub	sp, #44	@ 0x2c
 801483e:	ac0e      	add	r4, sp, #56	@ 0x38
 8014840:	e884 000c 	stmia.w	r4, {r2, r3}
 8014844:	b188      	cbz	r0, 801486a <rclc_action_server_goal_cancel_reject+0x32>
 8014846:	4604      	mov	r4, r0
 8014848:	a801      	add	r0, sp, #4
 801484a:	460d      	mov	r5, r1
 801484c:	f7ff fecc 	bl	80145e8 <rcl_action_get_zero_initialized_cancel_response>
 8014850:	aa01      	add	r2, sp, #4
 8014852:	a90e      	add	r1, sp, #56	@ 0x38
 8014854:	f104 0010 	add.w	r0, r4, #16
 8014858:	f88d 5004 	strb.w	r5, [sp, #4]
 801485c:	f7ff fdb4 	bl	80143c8 <rcl_action_send_cancel_response>
 8014860:	b00b      	add	sp, #44	@ 0x2c
 8014862:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014866:	b002      	add	sp, #8
 8014868:	4770      	bx	lr
 801486a:	200b      	movs	r0, #11
 801486c:	b00b      	add	sp, #44	@ 0x2c
 801486e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014872:	b002      	add	sp, #8
 8014874:	4770      	bx	lr
 8014876:	bf00      	nop

08014878 <__atomic_load_8>:
 8014878:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 801487c:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8014880:	4a15      	ldr	r2, [pc, #84]	@ (80148d8 <__atomic_load_8+0x60>)
 8014882:	4b16      	ldr	r3, [pc, #88]	@ (80148dc <__atomic_load_8+0x64>)
 8014884:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8014888:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 801488c:	fb02 f101 	mul.w	r1, r2, r1
 8014890:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8014894:	fba3 2301 	umull	r2, r3, r3, r1
 8014898:	091b      	lsrs	r3, r3, #4
 801489a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801489e:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 80148a2:	b4d0      	push	{r4, r6, r7}
 80148a4:	4c0e      	ldr	r4, [pc, #56]	@ (80148e0 <__atomic_load_8+0x68>)
 80148a6:	1ac9      	subs	r1, r1, r3
 80148a8:	1862      	adds	r2, r4, r1
 80148aa:	f04f 0c01 	mov.w	ip, #1
 80148ae:	e8d2 3f4f 	ldrexb	r3, [r2]
 80148b2:	e8c2 cf46 	strexb	r6, ip, [r2]
 80148b6:	2e00      	cmp	r6, #0
 80148b8:	d1f9      	bne.n	80148ae <__atomic_load_8+0x36>
 80148ba:	f3bf 8f5b 	dmb	ish
 80148be:	b2db      	uxtb	r3, r3
 80148c0:	2b00      	cmp	r3, #0
 80148c2:	d1f4      	bne.n	80148ae <__atomic_load_8+0x36>
 80148c4:	e9d0 6700 	ldrd	r6, r7, [r0]
 80148c8:	f3bf 8f5b 	dmb	ish
 80148cc:	5463      	strb	r3, [r4, r1]
 80148ce:	4630      	mov	r0, r6
 80148d0:	4639      	mov	r1, r7
 80148d2:	bcd0      	pop	{r4, r6, r7}
 80148d4:	4770      	bx	lr
 80148d6:	bf00      	nop
 80148d8:	27d4eb2d 	.word	0x27d4eb2d
 80148dc:	b21642c9 	.word	0xb21642c9
 80148e0:	20015458 	.word	0x20015458

080148e4 <__atomic_store_8>:
 80148e4:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 80148e8:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 80148ec:	b570      	push	{r4, r5, r6, lr}
 80148ee:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80148f2:	4c14      	ldr	r4, [pc, #80]	@ (8014944 <__atomic_store_8+0x60>)
 80148f4:	4d14      	ldr	r5, [pc, #80]	@ (8014948 <__atomic_store_8+0x64>)
 80148f6:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 80148fa:	fb04 f101 	mul.w	r1, r4, r1
 80148fe:	4c13      	ldr	r4, [pc, #76]	@ (801494c <__atomic_store_8+0x68>)
 8014900:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8014904:	fba4 4e01 	umull	r4, lr, r4, r1
 8014908:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 801490c:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 8014910:	ebce 0ec4 	rsb	lr, lr, r4, lsl #3
 8014914:	eba1 0e0e 	sub.w	lr, r1, lr
 8014918:	eb05 0c0e 	add.w	ip, r5, lr
 801491c:	f04f 0401 	mov.w	r4, #1
 8014920:	e8dc 1f4f 	ldrexb	r1, [ip]
 8014924:	e8cc 4f46 	strexb	r6, r4, [ip]
 8014928:	2e00      	cmp	r6, #0
 801492a:	d1f9      	bne.n	8014920 <__atomic_store_8+0x3c>
 801492c:	f3bf 8f5b 	dmb	ish
 8014930:	b2c9      	uxtb	r1, r1
 8014932:	2900      	cmp	r1, #0
 8014934:	d1f4      	bne.n	8014920 <__atomic_store_8+0x3c>
 8014936:	e9c0 2300 	strd	r2, r3, [r0]
 801493a:	f3bf 8f5b 	dmb	ish
 801493e:	f805 100e 	strb.w	r1, [r5, lr]
 8014942:	bd70      	pop	{r4, r5, r6, pc}
 8014944:	27d4eb2d 	.word	0x27d4eb2d
 8014948:	20015458 	.word	0x20015458
 801494c:	b21642c9 	.word	0xb21642c9

08014950 <__atomic_exchange_8>:
 8014950:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 8014954:	f08c 0c3d 	eor.w	ip, ip, #61	@ 0x3d
 8014958:	4916      	ldr	r1, [pc, #88]	@ (80149b4 <__atomic_exchange_8+0x64>)
 801495a:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 801495e:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 8014962:	fb01 fc0c 	mul.w	ip, r1, ip
 8014966:	4914      	ldr	r1, [pc, #80]	@ (80149b8 <__atomic_exchange_8+0x68>)
 8014968:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 801496c:	b570      	push	{r4, r5, r6, lr}
 801496e:	4605      	mov	r5, r0
 8014970:	fba1 010c 	umull	r0, r1, r1, ip
 8014974:	0909      	lsrs	r1, r1, #4
 8014976:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 801497a:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
 801497e:	4e0f      	ldr	r6, [pc, #60]	@ (80149bc <__atomic_exchange_8+0x6c>)
 8014980:	ebac 0c01 	sub.w	ip, ip, r1
 8014984:	eb06 010c 	add.w	r1, r6, ip
 8014988:	f04f 0e01 	mov.w	lr, #1
 801498c:	e8d1 4f4f 	ldrexb	r4, [r1]
 8014990:	e8c1 ef40 	strexb	r0, lr, [r1]
 8014994:	2800      	cmp	r0, #0
 8014996:	d1f9      	bne.n	801498c <__atomic_exchange_8+0x3c>
 8014998:	f3bf 8f5b 	dmb	ish
 801499c:	b2e4      	uxtb	r4, r4
 801499e:	2c00      	cmp	r4, #0
 80149a0:	d1f4      	bne.n	801498c <__atomic_exchange_8+0x3c>
 80149a2:	e9d5 0100 	ldrd	r0, r1, [r5]
 80149a6:	e9c5 2300 	strd	r2, r3, [r5]
 80149aa:	f3bf 8f5b 	dmb	ish
 80149ae:	f806 400c 	strb.w	r4, [r6, ip]
 80149b2:	bd70      	pop	{r4, r5, r6, pc}
 80149b4:	27d4eb2d 	.word	0x27d4eb2d
 80149b8:	b21642c9 	.word	0xb21642c9
 80149bc:	20015458 	.word	0x20015458

080149c0 <rcutils_get_env>:
 80149c0:	b168      	cbz	r0, 80149de <rcutils_get_env+0x1e>
 80149c2:	b510      	push	{r4, lr}
 80149c4:	460c      	mov	r4, r1
 80149c6:	b129      	cbz	r1, 80149d4 <rcutils_get_env+0x14>
 80149c8:	f004 f84a 	bl	8018a60 <getenv>
 80149cc:	b120      	cbz	r0, 80149d8 <rcutils_get_env+0x18>
 80149ce:	6020      	str	r0, [r4, #0]
 80149d0:	2000      	movs	r0, #0
 80149d2:	bd10      	pop	{r4, pc}
 80149d4:	4803      	ldr	r0, [pc, #12]	@ (80149e4 <rcutils_get_env+0x24>)
 80149d6:	bd10      	pop	{r4, pc}
 80149d8:	4b03      	ldr	r3, [pc, #12]	@ (80149e8 <rcutils_get_env+0x28>)
 80149da:	6023      	str	r3, [r4, #0]
 80149dc:	bd10      	pop	{r4, pc}
 80149de:	4803      	ldr	r0, [pc, #12]	@ (80149ec <rcutils_get_env+0x2c>)
 80149e0:	4770      	bx	lr
 80149e2:	bf00      	nop
 80149e4:	0801b3c0 	.word	0x0801b3c0
 80149e8:	0801b998 	.word	0x0801b998
 80149ec:	0801b3a4 	.word	0x0801b3a4

080149f0 <rcutils_is_directory>:
 80149f0:	2000      	movs	r0, #0
 80149f2:	4770      	bx	lr

080149f4 <rcutils_join_path>:
 80149f4:	b082      	sub	sp, #8
 80149f6:	e88d 000c 	stmia.w	sp, {r2, r3}
 80149fa:	2000      	movs	r0, #0
 80149fc:	b002      	add	sp, #8
 80149fe:	4770      	bx	lr

08014a00 <rcutils_to_native_path>:
 8014a00:	b084      	sub	sp, #16
 8014a02:	a801      	add	r0, sp, #4
 8014a04:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8014a08:	b004      	add	sp, #16
 8014a0a:	2000      	movs	r0, #0
 8014a0c:	4770      	bx	lr
 8014a0e:	bf00      	nop

08014a10 <rcutils_format_string_limit>:
 8014a10:	b40f      	push	{r0, r1, r2, r3}
 8014a12:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014a14:	b083      	sub	sp, #12
 8014a16:	ac08      	add	r4, sp, #32
 8014a18:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8014a1a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8014a1e:	b34e      	cbz	r6, 8014a74 <rcutils_format_string_limit+0x64>
 8014a20:	a808      	add	r0, sp, #32
 8014a22:	f7f6 fcf9 	bl	800b418 <rcutils_allocator_is_valid>
 8014a26:	b328      	cbz	r0, 8014a74 <rcutils_format_string_limit+0x64>
 8014a28:	2100      	movs	r1, #0
 8014a2a:	ab0f      	add	r3, sp, #60	@ 0x3c
 8014a2c:	4632      	mov	r2, r6
 8014a2e:	4608      	mov	r0, r1
 8014a30:	e9cd 3300 	strd	r3, r3, [sp]
 8014a34:	f000 f8f4 	bl	8014c20 <rcutils_vsnprintf>
 8014a38:	1c43      	adds	r3, r0, #1
 8014a3a:	4605      	mov	r5, r0
 8014a3c:	d01a      	beq.n	8014a74 <rcutils_format_string_limit+0x64>
 8014a3e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014a40:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8014a42:	1c47      	adds	r7, r0, #1
 8014a44:	429f      	cmp	r7, r3
 8014a46:	bf84      	itt	hi
 8014a48:	461f      	movhi	r7, r3
 8014a4a:	f103 35ff 	addhi.w	r5, r3, #4294967295	@ 0xffffffff
 8014a4e:	4638      	mov	r0, r7
 8014a50:	9b08      	ldr	r3, [sp, #32]
 8014a52:	4798      	blx	r3
 8014a54:	4604      	mov	r4, r0
 8014a56:	b168      	cbz	r0, 8014a74 <rcutils_format_string_limit+0x64>
 8014a58:	9b01      	ldr	r3, [sp, #4]
 8014a5a:	4632      	mov	r2, r6
 8014a5c:	4639      	mov	r1, r7
 8014a5e:	f000 f8df 	bl	8014c20 <rcutils_vsnprintf>
 8014a62:	2800      	cmp	r0, #0
 8014a64:	db02      	blt.n	8014a6c <rcutils_format_string_limit+0x5c>
 8014a66:	2300      	movs	r3, #0
 8014a68:	5563      	strb	r3, [r4, r5]
 8014a6a:	e004      	b.n	8014a76 <rcutils_format_string_limit+0x66>
 8014a6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014a6e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8014a70:	4620      	mov	r0, r4
 8014a72:	4798      	blx	r3
 8014a74:	2400      	movs	r4, #0
 8014a76:	4620      	mov	r0, r4
 8014a78:	b003      	add	sp, #12
 8014a7a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8014a7e:	b004      	add	sp, #16
 8014a80:	4770      	bx	lr
 8014a82:	bf00      	nop

08014a84 <rcutils_repl_str>:
 8014a84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a88:	ed2d 8b02 	vpush	{d8}
 8014a8c:	b087      	sub	sp, #28
 8014a8e:	4680      	mov	r8, r0
 8014a90:	4608      	mov	r0, r1
 8014a92:	f8cd 8004 	str.w	r8, [sp, #4]
 8014a96:	ee08 2a10 	vmov	s16, r2
 8014a9a:	468a      	mov	sl, r1
 8014a9c:	4699      	mov	r9, r3
 8014a9e:	f7eb fbaf 	bl	8000200 <strlen>
 8014aa2:	2600      	movs	r6, #0
 8014aa4:	4647      	mov	r7, r8
 8014aa6:	9002      	str	r0, [sp, #8]
 8014aa8:	46b3      	mov	fp, r6
 8014aaa:	2510      	movs	r5, #16
 8014aac:	46b0      	mov	r8, r6
 8014aae:	e01d      	b.n	8014aec <rcutils_repl_str+0x68>
 8014ab0:	f10b 0b01 	add.w	fp, fp, #1
 8014ab4:	455e      	cmp	r6, fp
 8014ab6:	d211      	bcs.n	8014adc <rcutils_repl_str+0x58>
 8014ab8:	442e      	add	r6, r5
 8014aba:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8014abe:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8014ac2:	00b1      	lsls	r1, r6, #2
 8014ac4:	4798      	blx	r3
 8014ac6:	2800      	cmp	r0, #0
 8014ac8:	f000 8088 	beq.w	8014bdc <rcutils_repl_str+0x158>
 8014acc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014ad0:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 8014ad4:	4680      	mov	r8, r0
 8014ad6:	bf28      	it	cs
 8014ad8:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 8014adc:	9a01      	ldr	r2, [sp, #4]
 8014ade:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 8014ae2:	1aa2      	subs	r2, r4, r2
 8014ae4:	f843 2c04 	str.w	r2, [r3, #-4]
 8014ae8:	9b02      	ldr	r3, [sp, #8]
 8014aea:	18e7      	adds	r7, r4, r3
 8014aec:	4651      	mov	r1, sl
 8014aee:	4638      	mov	r0, r7
 8014af0:	f004 fce5 	bl	80194be <strstr>
 8014af4:	4604      	mov	r4, r0
 8014af6:	4640      	mov	r0, r8
 8014af8:	2c00      	cmp	r4, #0
 8014afa:	d1d9      	bne.n	8014ab0 <rcutils_repl_str+0x2c>
 8014afc:	46b8      	mov	r8, r7
 8014afe:	4607      	mov	r7, r0
 8014b00:	4640      	mov	r0, r8
 8014b02:	f7eb fb7d 	bl	8000200 <strlen>
 8014b06:	9b01      	ldr	r3, [sp, #4]
 8014b08:	eba8 0303 	sub.w	r3, r8, r3
 8014b0c:	181c      	adds	r4, r3, r0
 8014b0e:	9404      	str	r4, [sp, #16]
 8014b10:	f1bb 0f00 	cmp.w	fp, #0
 8014b14:	d04a      	beq.n	8014bac <rcutils_repl_str+0x128>
 8014b16:	ee18 0a10 	vmov	r0, s16
 8014b1a:	f7eb fb71 	bl	8000200 <strlen>
 8014b1e:	9b02      	ldr	r3, [sp, #8]
 8014b20:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8014b24:	1ac3      	subs	r3, r0, r3
 8014b26:	fb0b 4303 	mla	r3, fp, r3, r4
 8014b2a:	461a      	mov	r2, r3
 8014b2c:	9305      	str	r3, [sp, #20]
 8014b2e:	4606      	mov	r6, r0
 8014b30:	f8d9 3000 	ldr.w	r3, [r9]
 8014b34:	1c50      	adds	r0, r2, #1
 8014b36:	4798      	blx	r3
 8014b38:	9003      	str	r0, [sp, #12]
 8014b3a:	2800      	cmp	r0, #0
 8014b3c:	d04f      	beq.n	8014bde <rcutils_repl_str+0x15a>
 8014b3e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8014b42:	683a      	ldr	r2, [r7, #0]
 8014b44:	4641      	mov	r1, r8
 8014b46:	f004 fd62 	bl	801960e <memcpy>
 8014b4a:	683d      	ldr	r5, [r7, #0]
 8014b4c:	9b03      	ldr	r3, [sp, #12]
 8014b4e:	9701      	str	r7, [sp, #4]
 8014b50:	46ba      	mov	sl, r7
 8014b52:	441d      	add	r5, r3
 8014b54:	9f02      	ldr	r7, [sp, #8]
 8014b56:	f8cd 9008 	str.w	r9, [sp, #8]
 8014b5a:	2401      	movs	r4, #1
 8014b5c:	46d1      	mov	r9, sl
 8014b5e:	ee18 aa10 	vmov	sl, s16
 8014b62:	e00a      	b.n	8014b7a <rcutils_repl_str+0xf6>
 8014b64:	f8d9 5000 	ldr.w	r5, [r9]
 8014b68:	1aaa      	subs	r2, r5, r2
 8014b6a:	1885      	adds	r5, r0, r2
 8014b6c:	f004 fd4f 	bl	801960e <memcpy>
 8014b70:	45a3      	cmp	fp, r4
 8014b72:	f104 0201 	add.w	r2, r4, #1
 8014b76:	d935      	bls.n	8014be4 <rcutils_repl_str+0x160>
 8014b78:	4614      	mov	r4, r2
 8014b7a:	4632      	mov	r2, r6
 8014b7c:	4651      	mov	r1, sl
 8014b7e:	4628      	mov	r0, r5
 8014b80:	f004 fd45 	bl	801960e <memcpy>
 8014b84:	f859 2b04 	ldr.w	r2, [r9], #4
 8014b88:	45a3      	cmp	fp, r4
 8014b8a:	443a      	add	r2, r7
 8014b8c:	eb05 0006 	add.w	r0, r5, r6
 8014b90:	eb08 0102 	add.w	r1, r8, r2
 8014b94:	d1e6      	bne.n	8014b64 <rcutils_repl_str+0xe0>
 8014b96:	9b04      	ldr	r3, [sp, #16]
 8014b98:	1a9a      	subs	r2, r3, r2
 8014b9a:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 8014b9e:	f004 fd36 	bl	801960e <memcpy>
 8014ba2:	9a03      	ldr	r2, [sp, #12]
 8014ba4:	9905      	ldr	r1, [sp, #20]
 8014ba6:	2300      	movs	r3, #0
 8014ba8:	5453      	strb	r3, [r2, r1]
 8014baa:	e00b      	b.n	8014bc4 <rcutils_repl_str+0x140>
 8014bac:	4620      	mov	r0, r4
 8014bae:	f8d9 3000 	ldr.w	r3, [r9]
 8014bb2:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8014bb6:	3001      	adds	r0, #1
 8014bb8:	4798      	blx	r3
 8014bba:	9003      	str	r0, [sp, #12]
 8014bbc:	b110      	cbz	r0, 8014bc4 <rcutils_repl_str+0x140>
 8014bbe:	9901      	ldr	r1, [sp, #4]
 8014bc0:	f004 fd33 	bl	801962a <strcpy>
 8014bc4:	4638      	mov	r0, r7
 8014bc6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8014bca:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8014bce:	4798      	blx	r3
 8014bd0:	9803      	ldr	r0, [sp, #12]
 8014bd2:	b007      	add	sp, #28
 8014bd4:	ecbd 8b02 	vpop	{d8}
 8014bd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014bdc:	4647      	mov	r7, r8
 8014bde:	2300      	movs	r3, #0
 8014be0:	9303      	str	r3, [sp, #12]
 8014be2:	e7ef      	b.n	8014bc4 <rcutils_repl_str+0x140>
 8014be4:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 8014be8:	e7db      	b.n	8014ba2 <rcutils_repl_str+0x11e>
 8014bea:	bf00      	nop

08014bec <rcutils_snprintf>:
 8014bec:	b40c      	push	{r2, r3}
 8014bee:	b530      	push	{r4, r5, lr}
 8014bf0:	b083      	sub	sp, #12
 8014bf2:	ab06      	add	r3, sp, #24
 8014bf4:	f853 2b04 	ldr.w	r2, [r3], #4
 8014bf8:	9301      	str	r3, [sp, #4]
 8014bfa:	b152      	cbz	r2, 8014c12 <rcutils_snprintf+0x26>
 8014bfc:	b138      	cbz	r0, 8014c0e <rcutils_snprintf+0x22>
 8014bfe:	b141      	cbz	r1, 8014c12 <rcutils_snprintf+0x26>
 8014c00:	f004 fa70 	bl	80190e4 <vsniprintf>
 8014c04:	b003      	add	sp, #12
 8014c06:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014c0a:	b002      	add	sp, #8
 8014c0c:	4770      	bx	lr
 8014c0e:	2900      	cmp	r1, #0
 8014c10:	d0f6      	beq.n	8014c00 <rcutils_snprintf+0x14>
 8014c12:	f004 fccf 	bl	80195b4 <__errno>
 8014c16:	2316      	movs	r3, #22
 8014c18:	6003      	str	r3, [r0, #0]
 8014c1a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014c1e:	e7f1      	b.n	8014c04 <rcutils_snprintf+0x18>

08014c20 <rcutils_vsnprintf>:
 8014c20:	b570      	push	{r4, r5, r6, lr}
 8014c22:	b13a      	cbz	r2, 8014c34 <rcutils_vsnprintf+0x14>
 8014c24:	b120      	cbz	r0, 8014c30 <rcutils_vsnprintf+0x10>
 8014c26:	b129      	cbz	r1, 8014c34 <rcutils_vsnprintf+0x14>
 8014c28:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014c2c:	f004 ba5a 	b.w	80190e4 <vsniprintf>
 8014c30:	2900      	cmp	r1, #0
 8014c32:	d0f9      	beq.n	8014c28 <rcutils_vsnprintf+0x8>
 8014c34:	f004 fcbe 	bl	80195b4 <__errno>
 8014c38:	2316      	movs	r3, #22
 8014c3a:	6003      	str	r3, [r0, #0]
 8014c3c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014c40:	bd70      	pop	{r4, r5, r6, pc}
 8014c42:	bf00      	nop

08014c44 <rcutils_strdup>:
 8014c44:	b084      	sub	sp, #16
 8014c46:	b570      	push	{r4, r5, r6, lr}
 8014c48:	b082      	sub	sp, #8
 8014c4a:	ac07      	add	r4, sp, #28
 8014c4c:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8014c50:	4605      	mov	r5, r0
 8014c52:	b1b0      	cbz	r0, 8014c82 <rcutils_strdup+0x3e>
 8014c54:	f7eb fad4 	bl	8000200 <strlen>
 8014c58:	1c42      	adds	r2, r0, #1
 8014c5a:	9b07      	ldr	r3, [sp, #28]
 8014c5c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8014c5e:	9201      	str	r2, [sp, #4]
 8014c60:	4606      	mov	r6, r0
 8014c62:	4610      	mov	r0, r2
 8014c64:	4798      	blx	r3
 8014c66:	4604      	mov	r4, r0
 8014c68:	b128      	cbz	r0, 8014c76 <rcutils_strdup+0x32>
 8014c6a:	9a01      	ldr	r2, [sp, #4]
 8014c6c:	4629      	mov	r1, r5
 8014c6e:	f004 fcce 	bl	801960e <memcpy>
 8014c72:	2300      	movs	r3, #0
 8014c74:	55a3      	strb	r3, [r4, r6]
 8014c76:	4620      	mov	r0, r4
 8014c78:	b002      	add	sp, #8
 8014c7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014c7e:	b004      	add	sp, #16
 8014c80:	4770      	bx	lr
 8014c82:	4604      	mov	r4, r0
 8014c84:	e7f7      	b.n	8014c76 <rcutils_strdup+0x32>
 8014c86:	bf00      	nop

08014c88 <rcutils_strndup>:
 8014c88:	b082      	sub	sp, #8
 8014c8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c8c:	ac06      	add	r4, sp, #24
 8014c8e:	e884 000c 	stmia.w	r4, {r2, r3}
 8014c92:	4605      	mov	r5, r0
 8014c94:	b188      	cbz	r0, 8014cba <rcutils_strndup+0x32>
 8014c96:	1c4f      	adds	r7, r1, #1
 8014c98:	460e      	mov	r6, r1
 8014c9a:	4638      	mov	r0, r7
 8014c9c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8014c9e:	4790      	blx	r2
 8014ca0:	4604      	mov	r4, r0
 8014ca2:	b128      	cbz	r0, 8014cb0 <rcutils_strndup+0x28>
 8014ca4:	463a      	mov	r2, r7
 8014ca6:	4629      	mov	r1, r5
 8014ca8:	f004 fcb1 	bl	801960e <memcpy>
 8014cac:	2300      	movs	r3, #0
 8014cae:	55a3      	strb	r3, [r4, r6]
 8014cb0:	4620      	mov	r0, r4
 8014cb2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8014cb6:	b002      	add	sp, #8
 8014cb8:	4770      	bx	lr
 8014cba:	4604      	mov	r4, r0
 8014cbc:	e7f8      	b.n	8014cb0 <rcutils_strndup+0x28>
 8014cbe:	bf00      	nop

08014cc0 <rcutils_get_zero_initialized_string_map>:
 8014cc0:	4b01      	ldr	r3, [pc, #4]	@ (8014cc8 <rcutils_get_zero_initialized_string_map+0x8>)
 8014cc2:	2000      	movs	r0, #0
 8014cc4:	6018      	str	r0, [r3, #0]
 8014cc6:	4770      	bx	lr
 8014cc8:	20015470 	.word	0x20015470

08014ccc <rcutils_string_map_reserve>:
 8014ccc:	2800      	cmp	r0, #0
 8014cce:	d05f      	beq.n	8014d90 <rcutils_string_map_reserve+0xc4>
 8014cd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014cd4:	460c      	mov	r4, r1
 8014cd6:	6801      	ldr	r1, [r0, #0]
 8014cd8:	b082      	sub	sp, #8
 8014cda:	4605      	mov	r5, r0
 8014cdc:	b129      	cbz	r1, 8014cea <rcutils_string_map_reserve+0x1e>
 8014cde:	68cb      	ldr	r3, [r1, #12]
 8014ce0:	42a3      	cmp	r3, r4
 8014ce2:	d906      	bls.n	8014cf2 <rcutils_string_map_reserve+0x26>
 8014ce4:	461c      	mov	r4, r3
 8014ce6:	2900      	cmp	r1, #0
 8014ce8:	d1f9      	bne.n	8014cde <rcutils_string_map_reserve+0x12>
 8014cea:	201f      	movs	r0, #31
 8014cec:	b002      	add	sp, #8
 8014cee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014cf2:	688b      	ldr	r3, [r1, #8]
 8014cf4:	42a3      	cmp	r3, r4
 8014cf6:	d047      	beq.n	8014d88 <rcutils_string_map_reserve+0xbc>
 8014cf8:	6a0e      	ldr	r6, [r1, #32]
 8014cfa:	2c00      	cmp	r4, #0
 8014cfc:	d034      	beq.n	8014d68 <rcutils_string_map_reserve+0x9c>
 8014cfe:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8014d02:	d243      	bcs.n	8014d8c <rcutils_string_map_reserve+0xc0>
 8014d04:	00a7      	lsls	r7, r4, #2
 8014d06:	f8d1 8018 	ldr.w	r8, [r1, #24]
 8014d0a:	6808      	ldr	r0, [r1, #0]
 8014d0c:	4632      	mov	r2, r6
 8014d0e:	4639      	mov	r1, r7
 8014d10:	47c0      	blx	r8
 8014d12:	2800      	cmp	r0, #0
 8014d14:	d03a      	beq.n	8014d8c <rcutils_string_map_reserve+0xc0>
 8014d16:	682b      	ldr	r3, [r5, #0]
 8014d18:	4632      	mov	r2, r6
 8014d1a:	6018      	str	r0, [r3, #0]
 8014d1c:	4639      	mov	r1, r7
 8014d1e:	6858      	ldr	r0, [r3, #4]
 8014d20:	47c0      	blx	r8
 8014d22:	2800      	cmp	r0, #0
 8014d24:	d032      	beq.n	8014d8c <rcutils_string_map_reserve+0xc0>
 8014d26:	682d      	ldr	r5, [r5, #0]
 8014d28:	68ab      	ldr	r3, [r5, #8]
 8014d2a:	6068      	str	r0, [r5, #4]
 8014d2c:	42a3      	cmp	r3, r4
 8014d2e:	d226      	bcs.n	8014d7e <rcutils_string_map_reserve+0xb2>
 8014d30:	682a      	ldr	r2, [r5, #0]
 8014d32:	eb00 0c07 	add.w	ip, r0, r7
 8014d36:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 8014d3a:	45e6      	cmp	lr, ip
 8014d3c:	ea4f 0183 	mov.w	r1, r3, lsl #2
 8014d40:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 8014d44:	d203      	bcs.n	8014d4e <rcutils_string_map_reserve+0x82>
 8014d46:	eb02 0c07 	add.w	ip, r2, r7
 8014d4a:	4566      	cmp	r6, ip
 8014d4c:	d322      	bcc.n	8014d94 <rcutils_string_map_reserve+0xc8>
 8014d4e:	1ae3      	subs	r3, r4, r3
 8014d50:	009a      	lsls	r2, r3, #2
 8014d52:	4670      	mov	r0, lr
 8014d54:	2100      	movs	r1, #0
 8014d56:	9201      	str	r2, [sp, #4]
 8014d58:	f004 fbf1 	bl	801953e <memset>
 8014d5c:	9a01      	ldr	r2, [sp, #4]
 8014d5e:	2100      	movs	r1, #0
 8014d60:	4630      	mov	r0, r6
 8014d62:	f004 fbec 	bl	801953e <memset>
 8014d66:	e00a      	b.n	8014d7e <rcutils_string_map_reserve+0xb2>
 8014d68:	694f      	ldr	r7, [r1, #20]
 8014d6a:	6808      	ldr	r0, [r1, #0]
 8014d6c:	4631      	mov	r1, r6
 8014d6e:	47b8      	blx	r7
 8014d70:	682b      	ldr	r3, [r5, #0]
 8014d72:	4631      	mov	r1, r6
 8014d74:	6858      	ldr	r0, [r3, #4]
 8014d76:	601c      	str	r4, [r3, #0]
 8014d78:	47b8      	blx	r7
 8014d7a:	682d      	ldr	r5, [r5, #0]
 8014d7c:	606c      	str	r4, [r5, #4]
 8014d7e:	2000      	movs	r0, #0
 8014d80:	60ac      	str	r4, [r5, #8]
 8014d82:	b002      	add	sp, #8
 8014d84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014d88:	2000      	movs	r0, #0
 8014d8a:	e7af      	b.n	8014cec <rcutils_string_map_reserve+0x20>
 8014d8c:	200a      	movs	r0, #10
 8014d8e:	e7ad      	b.n	8014cec <rcutils_string_map_reserve+0x20>
 8014d90:	200b      	movs	r0, #11
 8014d92:	4770      	bx	lr
 8014d94:	1f0b      	subs	r3, r1, #4
 8014d96:	4418      	add	r0, r3
 8014d98:	4413      	add	r3, r2
 8014d9a:	3a04      	subs	r2, #4
 8014d9c:	4417      	add	r7, r2
 8014d9e:	2200      	movs	r2, #0
 8014da0:	f843 2f04 	str.w	r2, [r3, #4]!
 8014da4:	42bb      	cmp	r3, r7
 8014da6:	f840 2f04 	str.w	r2, [r0, #4]!
 8014daa:	d1f9      	bne.n	8014da0 <rcutils_string_map_reserve+0xd4>
 8014dac:	e7e7      	b.n	8014d7e <rcutils_string_map_reserve+0xb2>
 8014dae:	bf00      	nop

08014db0 <rcutils_string_map_init>:
 8014db0:	b082      	sub	sp, #8
 8014db2:	b570      	push	{r4, r5, r6, lr}
 8014db4:	ac04      	add	r4, sp, #16
 8014db6:	e884 000c 	stmia.w	r4, {r2, r3}
 8014dba:	b380      	cbz	r0, 8014e1e <rcutils_string_map_init+0x6e>
 8014dbc:	6806      	ldr	r6, [r0, #0]
 8014dbe:	4604      	mov	r4, r0
 8014dc0:	b12e      	cbz	r6, 8014dce <rcutils_string_map_init+0x1e>
 8014dc2:	251e      	movs	r5, #30
 8014dc4:	4628      	mov	r0, r5
 8014dc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014dca:	b002      	add	sp, #8
 8014dcc:	4770      	bx	lr
 8014dce:	a804      	add	r0, sp, #16
 8014dd0:	460d      	mov	r5, r1
 8014dd2:	f7f6 fb21 	bl	800b418 <rcutils_allocator_is_valid>
 8014dd6:	b310      	cbz	r0, 8014e1e <rcutils_string_map_init+0x6e>
 8014dd8:	9b04      	ldr	r3, [sp, #16]
 8014dda:	9908      	ldr	r1, [sp, #32]
 8014ddc:	2024      	movs	r0, #36	@ 0x24
 8014dde:	4798      	blx	r3
 8014de0:	6020      	str	r0, [r4, #0]
 8014de2:	b310      	cbz	r0, 8014e2a <rcutils_string_map_init+0x7a>
 8014de4:	f10d 0e10 	add.w	lr, sp, #16
 8014de8:	e9c0 6600 	strd	r6, r6, [r0]
 8014dec:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8014df0:	f100 0c10 	add.w	ip, r0, #16
 8014df4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014df8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014dfc:	f8de 3000 	ldr.w	r3, [lr]
 8014e00:	f8cc 3000 	str.w	r3, [ip]
 8014e04:	4629      	mov	r1, r5
 8014e06:	4620      	mov	r0, r4
 8014e08:	f7ff ff60 	bl	8014ccc <rcutils_string_map_reserve>
 8014e0c:	4605      	mov	r5, r0
 8014e0e:	2800      	cmp	r0, #0
 8014e10:	d0d8      	beq.n	8014dc4 <rcutils_string_map_init+0x14>
 8014e12:	9b05      	ldr	r3, [sp, #20]
 8014e14:	9908      	ldr	r1, [sp, #32]
 8014e16:	6820      	ldr	r0, [r4, #0]
 8014e18:	4798      	blx	r3
 8014e1a:	6026      	str	r6, [r4, #0]
 8014e1c:	e7d2      	b.n	8014dc4 <rcutils_string_map_init+0x14>
 8014e1e:	250b      	movs	r5, #11
 8014e20:	4628      	mov	r0, r5
 8014e22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014e26:	b002      	add	sp, #8
 8014e28:	4770      	bx	lr
 8014e2a:	250a      	movs	r5, #10
 8014e2c:	e7ca      	b.n	8014dc4 <rcutils_string_map_init+0x14>
 8014e2e:	bf00      	nop

08014e30 <rcutils_string_map_fini>:
 8014e30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014e34:	b082      	sub	sp, #8
 8014e36:	2800      	cmp	r0, #0
 8014e38:	d03a      	beq.n	8014eb0 <rcutils_string_map_fini+0x80>
 8014e3a:	6804      	ldr	r4, [r0, #0]
 8014e3c:	4606      	mov	r6, r0
 8014e3e:	2c00      	cmp	r4, #0
 8014e40:	d032      	beq.n	8014ea8 <rcutils_string_map_fini+0x78>
 8014e42:	68a3      	ldr	r3, [r4, #8]
 8014e44:	b32b      	cbz	r3, 8014e92 <rcutils_string_map_fini+0x62>
 8014e46:	2500      	movs	r5, #0
 8014e48:	6822      	ldr	r2, [r4, #0]
 8014e4a:	462f      	mov	r7, r5
 8014e4c:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8014e50:	b1e0      	cbz	r0, 8014e8c <rcutils_string_map_fini+0x5c>
 8014e52:	6a21      	ldr	r1, [r4, #32]
 8014e54:	f8d4 8014 	ldr.w	r8, [r4, #20]
 8014e58:	9101      	str	r1, [sp, #4]
 8014e5a:	47c0      	blx	r8
 8014e5c:	e9d4 2300 	ldrd	r2, r3, [r4]
 8014e60:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8014e64:	9901      	ldr	r1, [sp, #4]
 8014e66:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8014e6a:	47c0      	blx	r8
 8014e6c:	68e3      	ldr	r3, [r4, #12]
 8014e6e:	6862      	ldr	r2, [r4, #4]
 8014e70:	3b01      	subs	r3, #1
 8014e72:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8014e76:	60e3      	str	r3, [r4, #12]
 8014e78:	6834      	ldr	r4, [r6, #0]
 8014e7a:	68a3      	ldr	r3, [r4, #8]
 8014e7c:	3501      	adds	r5, #1
 8014e7e:	429d      	cmp	r5, r3
 8014e80:	d207      	bcs.n	8014e92 <rcutils_string_map_fini+0x62>
 8014e82:	6822      	ldr	r2, [r4, #0]
 8014e84:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8014e88:	2800      	cmp	r0, #0
 8014e8a:	d1e2      	bne.n	8014e52 <rcutils_string_map_fini+0x22>
 8014e8c:	3501      	adds	r5, #1
 8014e8e:	429d      	cmp	r5, r3
 8014e90:	d3dc      	bcc.n	8014e4c <rcutils_string_map_fini+0x1c>
 8014e92:	2100      	movs	r1, #0
 8014e94:	4630      	mov	r0, r6
 8014e96:	f7ff ff19 	bl	8014ccc <rcutils_string_map_reserve>
 8014e9a:	4604      	mov	r4, r0
 8014e9c:	b920      	cbnz	r0, 8014ea8 <rcutils_string_map_fini+0x78>
 8014e9e:	6830      	ldr	r0, [r6, #0]
 8014ea0:	6943      	ldr	r3, [r0, #20]
 8014ea2:	6a01      	ldr	r1, [r0, #32]
 8014ea4:	4798      	blx	r3
 8014ea6:	6034      	str	r4, [r6, #0]
 8014ea8:	4620      	mov	r0, r4
 8014eaa:	b002      	add	sp, #8
 8014eac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014eb0:	240b      	movs	r4, #11
 8014eb2:	4620      	mov	r0, r4
 8014eb4:	b002      	add	sp, #8
 8014eb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014eba:	bf00      	nop

08014ebc <rcutils_string_map_getn>:
 8014ebc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ec0:	b300      	cbz	r0, 8014f04 <rcutils_string_map_getn+0x48>
 8014ec2:	6807      	ldr	r7, [r0, #0]
 8014ec4:	b1ff      	cbz	r7, 8014f06 <rcutils_string_map_getn+0x4a>
 8014ec6:	4688      	mov	r8, r1
 8014ec8:	b1e1      	cbz	r1, 8014f04 <rcutils_string_map_getn+0x48>
 8014eca:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8014ece:	683e      	ldr	r6, [r7, #0]
 8014ed0:	f1ba 0f00 	cmp.w	sl, #0
 8014ed4:	d016      	beq.n	8014f04 <rcutils_string_map_getn+0x48>
 8014ed6:	4691      	mov	r9, r2
 8014ed8:	3e04      	subs	r6, #4
 8014eda:	2400      	movs	r4, #0
 8014edc:	f856 5f04 	ldr.w	r5, [r6, #4]!
 8014ee0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8014ee4:	4628      	mov	r0, r5
 8014ee6:	3401      	adds	r4, #1
 8014ee8:	b155      	cbz	r5, 8014f00 <rcutils_string_map_getn+0x44>
 8014eea:	f7eb f989 	bl	8000200 <strlen>
 8014eee:	4548      	cmp	r0, r9
 8014ef0:	4602      	mov	r2, r0
 8014ef2:	4629      	mov	r1, r5
 8014ef4:	bf38      	it	cc
 8014ef6:	464a      	movcc	r2, r9
 8014ef8:	4640      	mov	r0, r8
 8014efa:	f004 face 	bl	801949a <strncmp>
 8014efe:	b128      	cbz	r0, 8014f0c <rcutils_string_map_getn+0x50>
 8014f00:	45a2      	cmp	sl, r4
 8014f02:	d1eb      	bne.n	8014edc <rcutils_string_map_getn+0x20>
 8014f04:	2700      	movs	r7, #0
 8014f06:	4638      	mov	r0, r7
 8014f08:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f0c:	687b      	ldr	r3, [r7, #4]
 8014f0e:	f853 700b 	ldr.w	r7, [r3, fp]
 8014f12:	4638      	mov	r0, r7
 8014f14:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014f18 <rmw_get_zero_initialized_context>:
 8014f18:	b510      	push	{r4, lr}
 8014f1a:	4604      	mov	r4, r0
 8014f1c:	3010      	adds	r0, #16
 8014f1e:	f000 f80b 	bl	8014f38 <rmw_get_zero_initialized_init_options>
 8014f22:	2300      	movs	r3, #0
 8014f24:	2000      	movs	r0, #0
 8014f26:	2100      	movs	r1, #0
 8014f28:	e9c4 0100 	strd	r0, r1, [r4]
 8014f2c:	e9c4 3312 	strd	r3, r3, [r4, #72]	@ 0x48
 8014f30:	60a3      	str	r3, [r4, #8]
 8014f32:	4620      	mov	r0, r4
 8014f34:	bd10      	pop	{r4, pc}
 8014f36:	bf00      	nop

08014f38 <rmw_get_zero_initialized_init_options>:
 8014f38:	b510      	push	{r4, lr}
 8014f3a:	2238      	movs	r2, #56	@ 0x38
 8014f3c:	4604      	mov	r4, r0
 8014f3e:	2100      	movs	r1, #0
 8014f40:	f004 fafd 	bl	801953e <memset>
 8014f44:	f104 0010 	add.w	r0, r4, #16
 8014f48:	f000 f806 	bl	8014f58 <rmw_get_default_security_options>
 8014f4c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8014f50:	60e3      	str	r3, [r4, #12]
 8014f52:	4620      	mov	r0, r4
 8014f54:	bd10      	pop	{r4, pc}
 8014f56:	bf00      	nop

08014f58 <rmw_get_default_security_options>:
 8014f58:	2200      	movs	r2, #0
 8014f5a:	7002      	strb	r2, [r0, #0]
 8014f5c:	6042      	str	r2, [r0, #4]
 8014f5e:	4770      	bx	lr

08014f60 <rmw_subscription_content_filter_options_fini>:
 8014f60:	b1b0      	cbz	r0, 8014f90 <rmw_subscription_content_filter_options_fini+0x30>
 8014f62:	b538      	push	{r3, r4, r5, lr}
 8014f64:	4604      	mov	r4, r0
 8014f66:	4608      	mov	r0, r1
 8014f68:	460d      	mov	r5, r1
 8014f6a:	f7f6 fa55 	bl	800b418 <rcutils_allocator_is_valid>
 8014f6e:	b168      	cbz	r0, 8014f8c <rmw_subscription_content_filter_options_fini+0x2c>
 8014f70:	6820      	ldr	r0, [r4, #0]
 8014f72:	b120      	cbz	r0, 8014f7e <rmw_subscription_content_filter_options_fini+0x1e>
 8014f74:	686b      	ldr	r3, [r5, #4]
 8014f76:	6929      	ldr	r1, [r5, #16]
 8014f78:	4798      	blx	r3
 8014f7a:	2300      	movs	r3, #0
 8014f7c:	6023      	str	r3, [r4, #0]
 8014f7e:	1d20      	adds	r0, r4, #4
 8014f80:	f003 fbaa 	bl	80186d8 <rcutils_string_array_fini>
 8014f84:	3800      	subs	r0, #0
 8014f86:	bf18      	it	ne
 8014f88:	2001      	movne	r0, #1
 8014f8a:	bd38      	pop	{r3, r4, r5, pc}
 8014f8c:	200b      	movs	r0, #11
 8014f8e:	bd38      	pop	{r3, r4, r5, pc}
 8014f90:	200b      	movs	r0, #11
 8014f92:	4770      	bx	lr

08014f94 <rmw_get_default_subscription_options>:
 8014f94:	2200      	movs	r2, #0
 8014f96:	e9c0 2200 	strd	r2, r2, [r0]
 8014f9a:	6082      	str	r2, [r0, #8]
 8014f9c:	4770      	bx	lr
 8014f9e:	bf00      	nop

08014fa0 <rmw_time_equal>:
 8014fa0:	b4f0      	push	{r4, r5, r6, r7}
 8014fa2:	b084      	sub	sp, #16
 8014fa4:	ac04      	add	r4, sp, #16
 8014fa6:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8014faa:	4603      	mov	r3, r0
 8014fac:	4924      	ldr	r1, [pc, #144]	@ (8015040 <rmw_time_equal+0xa0>)
 8014fae:	9e03      	ldr	r6, [sp, #12]
 8014fb0:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 8014fb4:	2202      	movs	r2, #2
 8014fb6:	4299      	cmp	r1, r3
 8014fb8:	41aa      	sbcs	r2, r5
 8014fba:	d330      	bcc.n	801501e <rmw_time_equal+0x7e>
 8014fbc:	4c21      	ldr	r4, [pc, #132]	@ (8015044 <rmw_time_equal+0xa4>)
 8014fbe:	fba3 3204 	umull	r3, r2, r3, r4
 8014fc2:	fb04 2205 	mla	r2, r4, r5, r2
 8014fc6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8014fca:	43dd      	mvns	r5, r3
 8014fcc:	1a8c      	subs	r4, r1, r2
 8014fce:	4285      	cmp	r5, r0
 8014fd0:	41b4      	sbcs	r4, r6
 8014fd2:	d332      	bcc.n	801503a <rmw_time_equal+0x9a>
 8014fd4:	eb10 0c03 	adds.w	ip, r0, r3
 8014fd8:	eb42 0106 	adc.w	r1, r2, r6
 8014fdc:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 8014fe0:	4817      	ldr	r0, [pc, #92]	@ (8015040 <rmw_time_equal+0xa0>)
 8014fe2:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8014fe4:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8014fe6:	2202      	movs	r2, #2
 8014fe8:	4298      	cmp	r0, r3
 8014fea:	41b2      	sbcs	r2, r6
 8014fec:	d31c      	bcc.n	8015028 <rmw_time_equal+0x88>
 8014fee:	4c15      	ldr	r4, [pc, #84]	@ (8015044 <rmw_time_equal+0xa4>)
 8014ff0:	fba3 3204 	umull	r3, r2, r3, r4
 8014ff4:	fb04 2206 	mla	r2, r4, r6, r2
 8014ff8:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8014ffc:	43de      	mvns	r6, r3
 8014ffe:	1a84      	subs	r4, r0, r2
 8015000:	42ae      	cmp	r6, r5
 8015002:	41bc      	sbcs	r4, r7
 8015004:	d315      	bcc.n	8015032 <rmw_time_equal+0x92>
 8015006:	195b      	adds	r3, r3, r5
 8015008:	eb42 0207 	adc.w	r2, r2, r7
 801500c:	428a      	cmp	r2, r1
 801500e:	bf08      	it	eq
 8015010:	4563      	cmpeq	r3, ip
 8015012:	bf0c      	ite	eq
 8015014:	2001      	moveq	r0, #1
 8015016:	2000      	movne	r0, #0
 8015018:	b004      	add	sp, #16
 801501a:	bcf0      	pop	{r4, r5, r6, r7}
 801501c:	4770      	bx	lr
 801501e:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8015022:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8015026:	e7d9      	b.n	8014fdc <rmw_time_equal+0x3c>
 8015028:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801502c:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8015030:	e7ec      	b.n	801500c <rmw_time_equal+0x6c>
 8015032:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8015036:	4602      	mov	r2, r0
 8015038:	e7e8      	b.n	801500c <rmw_time_equal+0x6c>
 801503a:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 801503e:	e7cd      	b.n	8014fdc <rmw_time_equal+0x3c>
 8015040:	25c17d04 	.word	0x25c17d04
 8015044:	3b9aca00 	.word	0x3b9aca00

08015048 <rmw_time_total_nsec>:
 8015048:	b470      	push	{r4, r5, r6}
 801504a:	b085      	sub	sp, #20
 801504c:	ac04      	add	r4, sp, #16
 801504e:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8015052:	4603      	mov	r3, r0
 8015054:	4912      	ldr	r1, [pc, #72]	@ (80150a0 <rmw_time_total_nsec+0x58>)
 8015056:	9e03      	ldr	r6, [sp, #12]
 8015058:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 801505c:	2202      	movs	r2, #2
 801505e:	4299      	cmp	r1, r3
 8015060:	41aa      	sbcs	r2, r5
 8015062:	d311      	bcc.n	8015088 <rmw_time_total_nsec+0x40>
 8015064:	4c0f      	ldr	r4, [pc, #60]	@ (80150a4 <rmw_time_total_nsec+0x5c>)
 8015066:	fba3 3204 	umull	r3, r2, r3, r4
 801506a:	fb04 2205 	mla	r2, r4, r5, r2
 801506e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8015072:	43dd      	mvns	r5, r3
 8015074:	1a8c      	subs	r4, r1, r2
 8015076:	4285      	cmp	r5, r0
 8015078:	41b4      	sbcs	r4, r6
 801507a:	d30c      	bcc.n	8015096 <rmw_time_total_nsec+0x4e>
 801507c:	1818      	adds	r0, r3, r0
 801507e:	eb42 0106 	adc.w	r1, r2, r6
 8015082:	b005      	add	sp, #20
 8015084:	bc70      	pop	{r4, r5, r6}
 8015086:	4770      	bx	lr
 8015088:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801508c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8015090:	b005      	add	sp, #20
 8015092:	bc70      	pop	{r4, r5, r6}
 8015094:	4770      	bx	lr
 8015096:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801509a:	b005      	add	sp, #20
 801509c:	bc70      	pop	{r4, r5, r6}
 801509e:	4770      	bx	lr
 80150a0:	25c17d04 	.word	0x25c17d04
 80150a4:	3b9aca00 	.word	0x3b9aca00

080150a8 <rmw_get_zero_initialized_message_info>:
 80150a8:	b510      	push	{r4, lr}
 80150aa:	2240      	movs	r2, #64	@ 0x40
 80150ac:	4604      	mov	r4, r0
 80150ae:	2100      	movs	r1, #0
 80150b0:	f004 fa45 	bl	801953e <memset>
 80150b4:	4620      	mov	r0, r4
 80150b6:	bd10      	pop	{r4, pc}

080150b8 <rmw_validate_full_topic_name>:
 80150b8:	2800      	cmp	r0, #0
 80150ba:	d057      	beq.n	801516c <rmw_validate_full_topic_name+0xb4>
 80150bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80150c0:	460d      	mov	r5, r1
 80150c2:	2900      	cmp	r1, #0
 80150c4:	d054      	beq.n	8015170 <rmw_validate_full_topic_name+0xb8>
 80150c6:	4616      	mov	r6, r2
 80150c8:	4604      	mov	r4, r0
 80150ca:	f7eb f899 	bl	8000200 <strlen>
 80150ce:	b148      	cbz	r0, 80150e4 <rmw_validate_full_topic_name+0x2c>
 80150d0:	7823      	ldrb	r3, [r4, #0]
 80150d2:	2b2f      	cmp	r3, #47	@ 0x2f
 80150d4:	d00d      	beq.n	80150f2 <rmw_validate_full_topic_name+0x3a>
 80150d6:	2302      	movs	r3, #2
 80150d8:	602b      	str	r3, [r5, #0]
 80150da:	b13e      	cbz	r6, 80150ec <rmw_validate_full_topic_name+0x34>
 80150dc:	2000      	movs	r0, #0
 80150de:	6030      	str	r0, [r6, #0]
 80150e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80150e4:	2301      	movs	r3, #1
 80150e6:	602b      	str	r3, [r5, #0]
 80150e8:	2e00      	cmp	r6, #0
 80150ea:	d1f7      	bne.n	80150dc <rmw_validate_full_topic_name+0x24>
 80150ec:	2000      	movs	r0, #0
 80150ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80150f2:	1e43      	subs	r3, r0, #1
 80150f4:	5ce2      	ldrb	r2, [r4, r3]
 80150f6:	2a2f      	cmp	r2, #47	@ 0x2f
 80150f8:	d03c      	beq.n	8015174 <rmw_validate_full_topic_name+0xbc>
 80150fa:	1e63      	subs	r3, r4, #1
 80150fc:	eb03 0800 	add.w	r8, r3, r0
 8015100:	f1c4 0e01 	rsb	lr, r4, #1
 8015104:	eb0e 0703 	add.w	r7, lr, r3
 8015108:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 801510c:	f021 0220 	bic.w	r2, r1, #32
 8015110:	3a41      	subs	r2, #65	@ 0x41
 8015112:	2a19      	cmp	r2, #25
 8015114:	f1a1 0c2f 	sub.w	ip, r1, #47	@ 0x2f
 8015118:	d90b      	bls.n	8015132 <rmw_validate_full_topic_name+0x7a>
 801511a:	295f      	cmp	r1, #95	@ 0x5f
 801511c:	d009      	beq.n	8015132 <rmw_validate_full_topic_name+0x7a>
 801511e:	f1bc 0f0a 	cmp.w	ip, #10
 8015122:	d906      	bls.n	8015132 <rmw_validate_full_topic_name+0x7a>
 8015124:	2304      	movs	r3, #4
 8015126:	602b      	str	r3, [r5, #0]
 8015128:	2e00      	cmp	r6, #0
 801512a:	d0df      	beq.n	80150ec <rmw_validate_full_topic_name+0x34>
 801512c:	6037      	str	r7, [r6, #0]
 801512e:	2000      	movs	r0, #0
 8015130:	e7d6      	b.n	80150e0 <rmw_validate_full_topic_name+0x28>
 8015132:	4543      	cmp	r3, r8
 8015134:	d1e6      	bne.n	8015104 <rmw_validate_full_topic_name+0x4c>
 8015136:	4f1a      	ldr	r7, [pc, #104]	@ (80151a0 <rmw_validate_full_topic_name+0xe8>)
 8015138:	2301      	movs	r3, #1
 801513a:	e004      	b.n	8015146 <rmw_validate_full_topic_name+0x8e>
 801513c:	4298      	cmp	r0, r3
 801513e:	f104 0401 	add.w	r4, r4, #1
 8015142:	d91c      	bls.n	801517e <rmw_validate_full_topic_name+0xc6>
 8015144:	4613      	mov	r3, r2
 8015146:	4298      	cmp	r0, r3
 8015148:	f103 0201 	add.w	r2, r3, #1
 801514c:	d0f6      	beq.n	801513c <rmw_validate_full_topic_name+0x84>
 801514e:	7821      	ldrb	r1, [r4, #0]
 8015150:	292f      	cmp	r1, #47	@ 0x2f
 8015152:	d1f3      	bne.n	801513c <rmw_validate_full_topic_name+0x84>
 8015154:	7861      	ldrb	r1, [r4, #1]
 8015156:	292f      	cmp	r1, #47	@ 0x2f
 8015158:	d01c      	beq.n	8015194 <rmw_validate_full_topic_name+0xdc>
 801515a:	5dc9      	ldrb	r1, [r1, r7]
 801515c:	0749      	lsls	r1, r1, #29
 801515e:	d5ed      	bpl.n	801513c <rmw_validate_full_topic_name+0x84>
 8015160:	2206      	movs	r2, #6
 8015162:	602a      	str	r2, [r5, #0]
 8015164:	2e00      	cmp	r6, #0
 8015166:	d0c1      	beq.n	80150ec <rmw_validate_full_topic_name+0x34>
 8015168:	6033      	str	r3, [r6, #0]
 801516a:	e7bf      	b.n	80150ec <rmw_validate_full_topic_name+0x34>
 801516c:	200b      	movs	r0, #11
 801516e:	4770      	bx	lr
 8015170:	200b      	movs	r0, #11
 8015172:	e7b5      	b.n	80150e0 <rmw_validate_full_topic_name+0x28>
 8015174:	2203      	movs	r2, #3
 8015176:	602a      	str	r2, [r5, #0]
 8015178:	2e00      	cmp	r6, #0
 801517a:	d1f5      	bne.n	8015168 <rmw_validate_full_topic_name+0xb0>
 801517c:	e7b6      	b.n	80150ec <rmw_validate_full_topic_name+0x34>
 801517e:	28f7      	cmp	r0, #247	@ 0xf7
 8015180:	d802      	bhi.n	8015188 <rmw_validate_full_topic_name+0xd0>
 8015182:	2000      	movs	r0, #0
 8015184:	6028      	str	r0, [r5, #0]
 8015186:	e7ab      	b.n	80150e0 <rmw_validate_full_topic_name+0x28>
 8015188:	2307      	movs	r3, #7
 801518a:	602b      	str	r3, [r5, #0]
 801518c:	2e00      	cmp	r6, #0
 801518e:	d0ad      	beq.n	80150ec <rmw_validate_full_topic_name+0x34>
 8015190:	23f6      	movs	r3, #246	@ 0xf6
 8015192:	e7e9      	b.n	8015168 <rmw_validate_full_topic_name+0xb0>
 8015194:	2205      	movs	r2, #5
 8015196:	602a      	str	r2, [r5, #0]
 8015198:	2e00      	cmp	r6, #0
 801519a:	d1e5      	bne.n	8015168 <rmw_validate_full_topic_name+0xb0>
 801519c:	e7a6      	b.n	80150ec <rmw_validate_full_topic_name+0x34>
 801519e:	bf00      	nop
 80151a0:	0801baae 	.word	0x0801baae

080151a4 <rmw_validate_namespace_with_size>:
 80151a4:	b340      	cbz	r0, 80151f8 <rmw_validate_namespace_with_size+0x54>
 80151a6:	b570      	push	{r4, r5, r6, lr}
 80151a8:	4614      	mov	r4, r2
 80151aa:	b0c2      	sub	sp, #264	@ 0x108
 80151ac:	b332      	cbz	r2, 80151fc <rmw_validate_namespace_with_size+0x58>
 80151ae:	2901      	cmp	r1, #1
 80151b0:	460d      	mov	r5, r1
 80151b2:	461e      	mov	r6, r3
 80151b4:	d102      	bne.n	80151bc <rmw_validate_namespace_with_size+0x18>
 80151b6:	7803      	ldrb	r3, [r0, #0]
 80151b8:	2b2f      	cmp	r3, #47	@ 0x2f
 80151ba:	d012      	beq.n	80151e2 <rmw_validate_namespace_with_size+0x3e>
 80151bc:	aa01      	add	r2, sp, #4
 80151be:	4669      	mov	r1, sp
 80151c0:	f7ff ff7a 	bl	80150b8 <rmw_validate_full_topic_name>
 80151c4:	b978      	cbnz	r0, 80151e6 <rmw_validate_namespace_with_size+0x42>
 80151c6:	9b00      	ldr	r3, [sp, #0]
 80151c8:	b14b      	cbz	r3, 80151de <rmw_validate_namespace_with_size+0x3a>
 80151ca:	2b07      	cmp	r3, #7
 80151cc:	d007      	beq.n	80151de <rmw_validate_namespace_with_size+0x3a>
 80151ce:	1e5a      	subs	r2, r3, #1
 80151d0:	2a05      	cmp	r2, #5
 80151d2:	d82b      	bhi.n	801522c <rmw_validate_namespace_with_size+0x88>
 80151d4:	e8df f002 	tbb	[pc, r2]
 80151d8:	1e212427 	.word	0x1e212427
 80151dc:	141b      	.short	0x141b
 80151de:	2df5      	cmp	r5, #245	@ 0xf5
 80151e0:	d803      	bhi.n	80151ea <rmw_validate_namespace_with_size+0x46>
 80151e2:	2000      	movs	r0, #0
 80151e4:	6020      	str	r0, [r4, #0]
 80151e6:	b042      	add	sp, #264	@ 0x108
 80151e8:	bd70      	pop	{r4, r5, r6, pc}
 80151ea:	2307      	movs	r3, #7
 80151ec:	6023      	str	r3, [r4, #0]
 80151ee:	2e00      	cmp	r6, #0
 80151f0:	d0f9      	beq.n	80151e6 <rmw_validate_namespace_with_size+0x42>
 80151f2:	23f4      	movs	r3, #244	@ 0xf4
 80151f4:	6033      	str	r3, [r6, #0]
 80151f6:	e7f6      	b.n	80151e6 <rmw_validate_namespace_with_size+0x42>
 80151f8:	200b      	movs	r0, #11
 80151fa:	4770      	bx	lr
 80151fc:	200b      	movs	r0, #11
 80151fe:	e7f2      	b.n	80151e6 <rmw_validate_namespace_with_size+0x42>
 8015200:	2306      	movs	r3, #6
 8015202:	6023      	str	r3, [r4, #0]
 8015204:	2e00      	cmp	r6, #0
 8015206:	d0ee      	beq.n	80151e6 <rmw_validate_namespace_with_size+0x42>
 8015208:	9b01      	ldr	r3, [sp, #4]
 801520a:	6033      	str	r3, [r6, #0]
 801520c:	e7eb      	b.n	80151e6 <rmw_validate_namespace_with_size+0x42>
 801520e:	2305      	movs	r3, #5
 8015210:	6023      	str	r3, [r4, #0]
 8015212:	e7f7      	b.n	8015204 <rmw_validate_namespace_with_size+0x60>
 8015214:	2304      	movs	r3, #4
 8015216:	6023      	str	r3, [r4, #0]
 8015218:	e7f4      	b.n	8015204 <rmw_validate_namespace_with_size+0x60>
 801521a:	2303      	movs	r3, #3
 801521c:	6023      	str	r3, [r4, #0]
 801521e:	e7f1      	b.n	8015204 <rmw_validate_namespace_with_size+0x60>
 8015220:	2302      	movs	r3, #2
 8015222:	6023      	str	r3, [r4, #0]
 8015224:	e7ee      	b.n	8015204 <rmw_validate_namespace_with_size+0x60>
 8015226:	2301      	movs	r3, #1
 8015228:	6023      	str	r3, [r4, #0]
 801522a:	e7eb      	b.n	8015204 <rmw_validate_namespace_with_size+0x60>
 801522c:	4a03      	ldr	r2, [pc, #12]	@ (801523c <rmw_validate_namespace_with_size+0x98>)
 801522e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8015232:	a802      	add	r0, sp, #8
 8015234:	f7ff fcda 	bl	8014bec <rcutils_snprintf>
 8015238:	2001      	movs	r0, #1
 801523a:	e7d4      	b.n	80151e6 <rmw_validate_namespace_with_size+0x42>
 801523c:	0801b3dc 	.word	0x0801b3dc

08015240 <rmw_validate_namespace>:
 8015240:	b168      	cbz	r0, 801525e <rmw_validate_namespace+0x1e>
 8015242:	b570      	push	{r4, r5, r6, lr}
 8015244:	460d      	mov	r5, r1
 8015246:	4616      	mov	r6, r2
 8015248:	4604      	mov	r4, r0
 801524a:	f7ea ffd9 	bl	8000200 <strlen>
 801524e:	4633      	mov	r3, r6
 8015250:	4601      	mov	r1, r0
 8015252:	462a      	mov	r2, r5
 8015254:	4620      	mov	r0, r4
 8015256:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801525a:	f7ff bfa3 	b.w	80151a4 <rmw_validate_namespace_with_size>
 801525e:	200b      	movs	r0, #11
 8015260:	4770      	bx	lr
 8015262:	bf00      	nop

08015264 <rmw_namespace_validation_result_string>:
 8015264:	2807      	cmp	r0, #7
 8015266:	bf9a      	itte	ls
 8015268:	4b02      	ldrls	r3, [pc, #8]	@ (8015274 <rmw_namespace_validation_result_string+0x10>)
 801526a:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 801526e:	4802      	ldrhi	r0, [pc, #8]	@ (8015278 <rmw_namespace_validation_result_string+0x14>)
 8015270:	4770      	bx	lr
 8015272:	bf00      	nop
 8015274:	0801b5d4 	.word	0x0801b5d4
 8015278:	0801b42c 	.word	0x0801b42c

0801527c <rmw_validate_node_name>:
 801527c:	2800      	cmp	r0, #0
 801527e:	d03b      	beq.n	80152f8 <rmw_validate_node_name+0x7c>
 8015280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015284:	460d      	mov	r5, r1
 8015286:	2900      	cmp	r1, #0
 8015288:	d038      	beq.n	80152fc <rmw_validate_node_name+0x80>
 801528a:	4616      	mov	r6, r2
 801528c:	4604      	mov	r4, r0
 801528e:	f7ea ffb7 	bl	8000200 <strlen>
 8015292:	b1e0      	cbz	r0, 80152ce <rmw_validate_node_name+0x52>
 8015294:	1e63      	subs	r3, r4, #1
 8015296:	eb03 0800 	add.w	r8, r3, r0
 801529a:	f1c4 0101 	rsb	r1, r4, #1
 801529e:	18cf      	adds	r7, r1, r3
 80152a0:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 80152a4:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 80152a8:	f02e 0c20 	bic.w	ip, lr, #32
 80152ac:	2a09      	cmp	r2, #9
 80152ae:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 80152b2:	d914      	bls.n	80152de <rmw_validate_node_name+0x62>
 80152b4:	f1bc 0f19 	cmp.w	ip, #25
 80152b8:	d911      	bls.n	80152de <rmw_validate_node_name+0x62>
 80152ba:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 80152be:	d00e      	beq.n	80152de <rmw_validate_node_name+0x62>
 80152c0:	2302      	movs	r3, #2
 80152c2:	602b      	str	r3, [r5, #0]
 80152c4:	b106      	cbz	r6, 80152c8 <rmw_validate_node_name+0x4c>
 80152c6:	6037      	str	r7, [r6, #0]
 80152c8:	2000      	movs	r0, #0
 80152ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80152ce:	2301      	movs	r3, #1
 80152d0:	602b      	str	r3, [r5, #0]
 80152d2:	2e00      	cmp	r6, #0
 80152d4:	d0f8      	beq.n	80152c8 <rmw_validate_node_name+0x4c>
 80152d6:	2000      	movs	r0, #0
 80152d8:	6030      	str	r0, [r6, #0]
 80152da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80152de:	4543      	cmp	r3, r8
 80152e0:	d1dd      	bne.n	801529e <rmw_validate_node_name+0x22>
 80152e2:	7822      	ldrb	r2, [r4, #0]
 80152e4:	4b0d      	ldr	r3, [pc, #52]	@ (801531c <rmw_validate_node_name+0xa0>)
 80152e6:	5cd3      	ldrb	r3, [r2, r3]
 80152e8:	f013 0304 	ands.w	r3, r3, #4
 80152ec:	d110      	bne.n	8015310 <rmw_validate_node_name+0x94>
 80152ee:	28ff      	cmp	r0, #255	@ 0xff
 80152f0:	d806      	bhi.n	8015300 <rmw_validate_node_name+0x84>
 80152f2:	602b      	str	r3, [r5, #0]
 80152f4:	4618      	mov	r0, r3
 80152f6:	e7e8      	b.n	80152ca <rmw_validate_node_name+0x4e>
 80152f8:	200b      	movs	r0, #11
 80152fa:	4770      	bx	lr
 80152fc:	200b      	movs	r0, #11
 80152fe:	e7e4      	b.n	80152ca <rmw_validate_node_name+0x4e>
 8015300:	2204      	movs	r2, #4
 8015302:	602a      	str	r2, [r5, #0]
 8015304:	2e00      	cmp	r6, #0
 8015306:	d0df      	beq.n	80152c8 <rmw_validate_node_name+0x4c>
 8015308:	22fe      	movs	r2, #254	@ 0xfe
 801530a:	6032      	str	r2, [r6, #0]
 801530c:	4618      	mov	r0, r3
 801530e:	e7dc      	b.n	80152ca <rmw_validate_node_name+0x4e>
 8015310:	2303      	movs	r3, #3
 8015312:	602b      	str	r3, [r5, #0]
 8015314:	2e00      	cmp	r6, #0
 8015316:	d1de      	bne.n	80152d6 <rmw_validate_node_name+0x5a>
 8015318:	e7d6      	b.n	80152c8 <rmw_validate_node_name+0x4c>
 801531a:	bf00      	nop
 801531c:	0801baae 	.word	0x0801baae

08015320 <rmw_node_name_validation_result_string>:
 8015320:	2804      	cmp	r0, #4
 8015322:	bf9a      	itte	ls
 8015324:	4b02      	ldrls	r3, [pc, #8]	@ (8015330 <rmw_node_name_validation_result_string+0x10>)
 8015326:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 801532a:	4802      	ldrhi	r0, [pc, #8]	@ (8015334 <rmw_node_name_validation_result_string+0x14>)
 801532c:	4770      	bx	lr
 801532e:	bf00      	nop
 8015330:	0801b6e0 	.word	0x0801b6e0
 8015334:	0801b5f4 	.word	0x0801b5f4

08015338 <get_memory>:
 8015338:	4603      	mov	r3, r0
 801533a:	6840      	ldr	r0, [r0, #4]
 801533c:	b158      	cbz	r0, 8015356 <get_memory+0x1e>
 801533e:	6842      	ldr	r2, [r0, #4]
 8015340:	605a      	str	r2, [r3, #4]
 8015342:	b10a      	cbz	r2, 8015348 <get_memory+0x10>
 8015344:	2100      	movs	r1, #0
 8015346:	6011      	str	r1, [r2, #0]
 8015348:	681a      	ldr	r2, [r3, #0]
 801534a:	6042      	str	r2, [r0, #4]
 801534c:	b102      	cbz	r2, 8015350 <get_memory+0x18>
 801534e:	6010      	str	r0, [r2, #0]
 8015350:	2200      	movs	r2, #0
 8015352:	6002      	str	r2, [r0, #0]
 8015354:	6018      	str	r0, [r3, #0]
 8015356:	4770      	bx	lr

08015358 <put_memory>:
 8015358:	680b      	ldr	r3, [r1, #0]
 801535a:	b10b      	cbz	r3, 8015360 <put_memory+0x8>
 801535c:	684a      	ldr	r2, [r1, #4]
 801535e:	605a      	str	r2, [r3, #4]
 8015360:	684a      	ldr	r2, [r1, #4]
 8015362:	b102      	cbz	r2, 8015366 <put_memory+0xe>
 8015364:	6013      	str	r3, [r2, #0]
 8015366:	6803      	ldr	r3, [r0, #0]
 8015368:	428b      	cmp	r3, r1
 801536a:	6843      	ldr	r3, [r0, #4]
 801536c:	bf08      	it	eq
 801536e:	6002      	streq	r2, [r0, #0]
 8015370:	604b      	str	r3, [r1, #4]
 8015372:	b103      	cbz	r3, 8015376 <put_memory+0x1e>
 8015374:	6019      	str	r1, [r3, #0]
 8015376:	2300      	movs	r3, #0
 8015378:	600b      	str	r3, [r1, #0]
 801537a:	6041      	str	r1, [r0, #4]
 801537c:	4770      	bx	lr
 801537e:	bf00      	nop

08015380 <rmw_destroy_client>:
 8015380:	b570      	push	{r4, r5, r6, lr}
 8015382:	b128      	cbz	r0, 8015390 <rmw_destroy_client+0x10>
 8015384:	4604      	mov	r4, r0
 8015386:	6800      	ldr	r0, [r0, #0]
 8015388:	460d      	mov	r5, r1
 801538a:	f7f6 fdeb 	bl	800bf64 <is_uxrce_rmw_identifier_valid>
 801538e:	b910      	cbnz	r0, 8015396 <rmw_destroy_client+0x16>
 8015390:	2401      	movs	r4, #1
 8015392:	4620      	mov	r0, r4
 8015394:	bd70      	pop	{r4, r5, r6, pc}
 8015396:	6863      	ldr	r3, [r4, #4]
 8015398:	2b00      	cmp	r3, #0
 801539a:	d0f9      	beq.n	8015390 <rmw_destroy_client+0x10>
 801539c:	2d00      	cmp	r5, #0
 801539e:	d0f7      	beq.n	8015390 <rmw_destroy_client+0x10>
 80153a0:	6828      	ldr	r0, [r5, #0]
 80153a2:	f7f6 fddf 	bl	800bf64 <is_uxrce_rmw_identifier_valid>
 80153a6:	2800      	cmp	r0, #0
 80153a8:	d0f2      	beq.n	8015390 <rmw_destroy_client+0x10>
 80153aa:	686e      	ldr	r6, [r5, #4]
 80153ac:	2e00      	cmp	r6, #0
 80153ae:	d0ef      	beq.n	8015390 <rmw_destroy_client+0x10>
 80153b0:	6864      	ldr	r4, [r4, #4]
 80153b2:	6932      	ldr	r2, [r6, #16]
 80153b4:	6920      	ldr	r0, [r4, #16]
 80153b6:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80153ba:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80153be:	6819      	ldr	r1, [r3, #0]
 80153c0:	f002 f8c6 	bl	8017550 <uxr_buffer_cancel_data>
 80153c4:	4602      	mov	r2, r0
 80153c6:	6920      	ldr	r0, [r4, #16]
 80153c8:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80153cc:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80153d0:	f7f6 fd48 	bl	800be64 <run_xrce_session>
 80153d4:	6920      	ldr	r0, [r4, #16]
 80153d6:	6932      	ldr	r2, [r6, #16]
 80153d8:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80153dc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80153e0:	6819      	ldr	r1, [r3, #0]
 80153e2:	f7f9 fe31 	bl	800f048 <uxr_buffer_delete_entity>
 80153e6:	4602      	mov	r2, r0
 80153e8:	6920      	ldr	r0, [r4, #16]
 80153ea:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80153ee:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80153f2:	f7f6 fd37 	bl	800be64 <run_xrce_session>
 80153f6:	2800      	cmp	r0, #0
 80153f8:	4628      	mov	r0, r5
 80153fa:	bf14      	ite	ne
 80153fc:	2400      	movne	r4, #0
 80153fe:	2402      	moveq	r4, #2
 8015400:	f7f6 fc18 	bl	800bc34 <rmw_uxrce_fini_client_memory>
 8015404:	e7c5      	b.n	8015392 <rmw_destroy_client+0x12>
 8015406:	bf00      	nop

08015408 <rmw_get_implementation_identifier>:
 8015408:	4b01      	ldr	r3, [pc, #4]	@ (8015410 <rmw_get_implementation_identifier+0x8>)
 801540a:	6818      	ldr	r0, [r3, #0]
 801540c:	4770      	bx	lr
 801540e:	bf00      	nop
 8015410:	0801b70c 	.word	0x0801b70c

08015414 <rmw_init_options_init>:
 8015414:	b084      	sub	sp, #16
 8015416:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015418:	b083      	sub	sp, #12
 801541a:	ad09      	add	r5, sp, #36	@ 0x24
 801541c:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 8015420:	b130      	cbz	r0, 8015430 <rmw_init_options_init+0x1c>
 8015422:	4604      	mov	r4, r0
 8015424:	4628      	mov	r0, r5
 8015426:	f7f5 fff7 	bl	800b418 <rcutils_allocator_is_valid>
 801542a:	b108      	cbz	r0, 8015430 <rmw_init_options_init+0x1c>
 801542c:	68a6      	ldr	r6, [r4, #8]
 801542e:	b12e      	cbz	r6, 801543c <rmw_init_options_init+0x28>
 8015430:	200b      	movs	r0, #11
 8015432:	b003      	add	sp, #12
 8015434:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8015438:	b004      	add	sp, #16
 801543a:	4770      	bx	lr
 801543c:	2200      	movs	r2, #0
 801543e:	2300      	movs	r3, #0
 8015440:	e9c4 2300 	strd	r2, r3, [r4]
 8015444:	4b22      	ldr	r3, [pc, #136]	@ (80154d0 <rmw_init_options_init+0xbc>)
 8015446:	f8df e098 	ldr.w	lr, [pc, #152]	@ 80154e0 <rmw_init_options_init+0xcc>
 801544a:	681b      	ldr	r3, [r3, #0]
 801544c:	60a3      	str	r3, [r4, #8]
 801544e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015450:	f104 0c20 	add.w	ip, r4, #32
 8015454:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015458:	466f      	mov	r7, sp
 801545a:	682b      	ldr	r3, [r5, #0]
 801545c:	f8cc 3000 	str.w	r3, [ip]
 8015460:	4638      	mov	r0, r7
 8015462:	f8c4 e01c 	str.w	lr, [r4, #28]
 8015466:	60e6      	str	r6, [r4, #12]
 8015468:	f7ff fd76 	bl	8014f58 <rmw_get_default_security_options>
 801546c:	e897 0003 	ldmia.w	r7, {r0, r1}
 8015470:	f104 0310 	add.w	r3, r4, #16
 8015474:	e883 0003 	stmia.w	r3, {r0, r1}
 8015478:	2203      	movs	r2, #3
 801547a:	4816      	ldr	r0, [pc, #88]	@ (80154d4 <rmw_init_options_init+0xc0>)
 801547c:	4916      	ldr	r1, [pc, #88]	@ (80154d8 <rmw_init_options_init+0xc4>)
 801547e:	7626      	strb	r6, [r4, #24]
 8015480:	f7f6 fb18 	bl	800bab4 <rmw_uxrce_init_init_options_impl_memory>
 8015484:	4813      	ldr	r0, [pc, #76]	@ (80154d4 <rmw_init_options_init+0xc0>)
 8015486:	f7ff ff57 	bl	8015338 <get_memory>
 801548a:	b1f0      	cbz	r0, 80154ca <rmw_init_options_init+0xb6>
 801548c:	4a13      	ldr	r2, [pc, #76]	@ (80154dc <rmw_init_options_init+0xc8>)
 801548e:	6883      	ldr	r3, [r0, #8]
 8015490:	6851      	ldr	r1, [r2, #4]
 8015492:	7810      	ldrb	r0, [r2, #0]
 8015494:	6363      	str	r3, [r4, #52]	@ 0x34
 8015496:	7418      	strb	r0, [r3, #16]
 8015498:	6159      	str	r1, [r3, #20]
 801549a:	68d1      	ldr	r1, [r2, #12]
 801549c:	61d9      	str	r1, [r3, #28]
 801549e:	6911      	ldr	r1, [r2, #16]
 80154a0:	6219      	str	r1, [r3, #32]
 80154a2:	6951      	ldr	r1, [r2, #20]
 80154a4:	6892      	ldr	r2, [r2, #8]
 80154a6:	619a      	str	r2, [r3, #24]
 80154a8:	6259      	str	r1, [r3, #36]	@ 0x24
 80154aa:	f7fb fa29 	bl	8010900 <uxr_nanos>
 80154ae:	f003 fc11 	bl	8018cd4 <srand>
 80154b2:	f003 fc3d 	bl	8018d30 <rand>
 80154b6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80154b8:	6298      	str	r0, [r3, #40]	@ 0x28
 80154ba:	2800      	cmp	r0, #0
 80154bc:	d0f9      	beq.n	80154b2 <rmw_init_options_init+0x9e>
 80154be:	2000      	movs	r0, #0
 80154c0:	b003      	add	sp, #12
 80154c2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80154c6:	b004      	add	sp, #16
 80154c8:	4770      	bx	lr
 80154ca:	2001      	movs	r0, #1
 80154cc:	e7b1      	b.n	8015432 <rmw_init_options_init+0x1e>
 80154ce:	bf00      	nop
 80154d0:	0801b70c 	.word	0x0801b70c
 80154d4:	20015354 	.word	0x20015354
 80154d8:	20010bf0 	.word	0x20010bf0
 80154dc:	20010a7c 	.word	0x20010a7c
 80154e0:	0801b174 	.word	0x0801b174

080154e4 <rmw_init_options_copy>:
 80154e4:	b570      	push	{r4, r5, r6, lr}
 80154e6:	b158      	cbz	r0, 8015500 <rmw_init_options_copy+0x1c>
 80154e8:	460d      	mov	r5, r1
 80154ea:	b149      	cbz	r1, 8015500 <rmw_init_options_copy+0x1c>
 80154ec:	4604      	mov	r4, r0
 80154ee:	6880      	ldr	r0, [r0, #8]
 80154f0:	b120      	cbz	r0, 80154fc <rmw_init_options_copy+0x18>
 80154f2:	4b1e      	ldr	r3, [pc, #120]	@ (801556c <rmw_init_options_copy+0x88>)
 80154f4:	6819      	ldr	r1, [r3, #0]
 80154f6:	f7ea fe8b 	bl	8000210 <strcmp>
 80154fa:	bb90      	cbnz	r0, 8015562 <rmw_init_options_copy+0x7e>
 80154fc:	68ab      	ldr	r3, [r5, #8]
 80154fe:	b113      	cbz	r3, 8015506 <rmw_init_options_copy+0x22>
 8015500:	250b      	movs	r5, #11
 8015502:	4628      	mov	r0, r5
 8015504:	bd70      	pop	{r4, r5, r6, pc}
 8015506:	4623      	mov	r3, r4
 8015508:	462a      	mov	r2, r5
 801550a:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 801550e:	f8d3 c000 	ldr.w	ip, [r3]
 8015512:	6858      	ldr	r0, [r3, #4]
 8015514:	6899      	ldr	r1, [r3, #8]
 8015516:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 801551a:	f8c2 e00c 	str.w	lr, [r2, #12]
 801551e:	3310      	adds	r3, #16
 8015520:	42b3      	cmp	r3, r6
 8015522:	f8c2 c000 	str.w	ip, [r2]
 8015526:	6050      	str	r0, [r2, #4]
 8015528:	6091      	str	r1, [r2, #8]
 801552a:	f102 0210 	add.w	r2, r2, #16
 801552e:	d1ee      	bne.n	801550e <rmw_init_options_copy+0x2a>
 8015530:	6819      	ldr	r1, [r3, #0]
 8015532:	685b      	ldr	r3, [r3, #4]
 8015534:	480e      	ldr	r0, [pc, #56]	@ (8015570 <rmw_init_options_copy+0x8c>)
 8015536:	6053      	str	r3, [r2, #4]
 8015538:	6011      	str	r1, [r2, #0]
 801553a:	f7ff fefd 	bl	8015338 <get_memory>
 801553e:	b198      	cbz	r0, 8015568 <rmw_init_options_copy+0x84>
 8015540:	6883      	ldr	r3, [r0, #8]
 8015542:	636b      	str	r3, [r5, #52]	@ 0x34
 8015544:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8015546:	f102 0c10 	add.w	ip, r2, #16
 801554a:	f103 0410 	add.w	r4, r3, #16
 801554e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015552:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015554:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8015558:	2500      	movs	r5, #0
 801555a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801555e:	4628      	mov	r0, r5
 8015560:	bd70      	pop	{r4, r5, r6, pc}
 8015562:	250c      	movs	r5, #12
 8015564:	4628      	mov	r0, r5
 8015566:	bd70      	pop	{r4, r5, r6, pc}
 8015568:	2501      	movs	r5, #1
 801556a:	e7ca      	b.n	8015502 <rmw_init_options_copy+0x1e>
 801556c:	0801b70c 	.word	0x0801b70c
 8015570:	20015354 	.word	0x20015354

08015574 <rmw_init_options_fini>:
 8015574:	2800      	cmp	r0, #0
 8015576:	d03d      	beq.n	80155f4 <rmw_init_options_fini+0x80>
 8015578:	b510      	push	{r4, lr}
 801557a:	4604      	mov	r4, r0
 801557c:	b08e      	sub	sp, #56	@ 0x38
 801557e:	3020      	adds	r0, #32
 8015580:	f7f5 ff4a 	bl	800b418 <rcutils_allocator_is_valid>
 8015584:	b360      	cbz	r0, 80155e0 <rmw_init_options_fini+0x6c>
 8015586:	68a0      	ldr	r0, [r4, #8]
 8015588:	b120      	cbz	r0, 8015594 <rmw_init_options_fini+0x20>
 801558a:	4b1c      	ldr	r3, [pc, #112]	@ (80155fc <rmw_init_options_fini+0x88>)
 801558c:	6819      	ldr	r1, [r3, #0]
 801558e:	f7ea fe3f 	bl	8000210 <strcmp>
 8015592:	bb68      	cbnz	r0, 80155f0 <rmw_init_options_fini+0x7c>
 8015594:	4b1a      	ldr	r3, [pc, #104]	@ (8015600 <rmw_init_options_fini+0x8c>)
 8015596:	6819      	ldr	r1, [r3, #0]
 8015598:	b331      	cbz	r1, 80155e8 <rmw_init_options_fini+0x74>
 801559a:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 801559c:	e001      	b.n	80155a2 <rmw_init_options_fini+0x2e>
 801559e:	6849      	ldr	r1, [r1, #4]
 80155a0:	b311      	cbz	r1, 80155e8 <rmw_init_options_fini+0x74>
 80155a2:	688b      	ldr	r3, [r1, #8]
 80155a4:	429a      	cmp	r2, r3
 80155a6:	d1fa      	bne.n	801559e <rmw_init_options_fini+0x2a>
 80155a8:	4815      	ldr	r0, [pc, #84]	@ (8015600 <rmw_init_options_fini+0x8c>)
 80155aa:	f7ff fed5 	bl	8015358 <put_memory>
 80155ae:	4668      	mov	r0, sp
 80155b0:	f7ff fcc2 	bl	8014f38 <rmw_get_zero_initialized_init_options>
 80155b4:	46ee      	mov	lr, sp
 80155b6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80155ba:	46a4      	mov	ip, r4
 80155bc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80155c0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80155c4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80155c8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80155cc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80155d0:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80155d4:	e88c 0003 	stmia.w	ip, {r0, r1}
 80155d8:	2300      	movs	r3, #0
 80155da:	4618      	mov	r0, r3
 80155dc:	b00e      	add	sp, #56	@ 0x38
 80155de:	bd10      	pop	{r4, pc}
 80155e0:	230b      	movs	r3, #11
 80155e2:	4618      	mov	r0, r3
 80155e4:	b00e      	add	sp, #56	@ 0x38
 80155e6:	bd10      	pop	{r4, pc}
 80155e8:	2301      	movs	r3, #1
 80155ea:	4618      	mov	r0, r3
 80155ec:	b00e      	add	sp, #56	@ 0x38
 80155ee:	bd10      	pop	{r4, pc}
 80155f0:	230c      	movs	r3, #12
 80155f2:	e7f2      	b.n	80155da <rmw_init_options_fini+0x66>
 80155f4:	230b      	movs	r3, #11
 80155f6:	4618      	mov	r0, r3
 80155f8:	4770      	bx	lr
 80155fa:	bf00      	nop
 80155fc:	0801b70c 	.word	0x0801b70c
 8015600:	20015354 	.word	0x20015354

08015604 <rmw_init>:
 8015604:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015608:	b083      	sub	sp, #12
 801560a:	2800      	cmp	r0, #0
 801560c:	f000 80d3 	beq.w	80157b6 <rmw_init+0x1b2>
 8015610:	460e      	mov	r6, r1
 8015612:	2900      	cmp	r1, #0
 8015614:	f000 80cf 	beq.w	80157b6 <rmw_init+0x1b2>
 8015618:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 801561a:	4605      	mov	r5, r0
 801561c:	2b00      	cmp	r3, #0
 801561e:	f000 80ca 	beq.w	80157b6 <rmw_init+0x1b2>
 8015622:	4b78      	ldr	r3, [pc, #480]	@ (8015804 <rmw_init+0x200>)
 8015624:	6880      	ldr	r0, [r0, #8]
 8015626:	681f      	ldr	r7, [r3, #0]
 8015628:	b128      	cbz	r0, 8015636 <rmw_init+0x32>
 801562a:	4639      	mov	r1, r7
 801562c:	f7ea fdf0 	bl	8000210 <strcmp>
 8015630:	2800      	cmp	r0, #0
 8015632:	f040 80ca 	bne.w	80157ca <rmw_init+0x1c6>
 8015636:	e9d5 2300 	ldrd	r2, r3, [r5]
 801563a:	4c73      	ldr	r4, [pc, #460]	@ (8015808 <rmw_init+0x204>)
 801563c:	4973      	ldr	r1, [pc, #460]	@ (801580c <rmw_init+0x208>)
 801563e:	4874      	ldr	r0, [pc, #464]	@ (8015810 <rmw_init+0x20c>)
 8015640:	60b7      	str	r7, [r6, #8]
 8015642:	e9c6 2300 	strd	r2, r3, [r6]
 8015646:	68eb      	ldr	r3, [r5, #12]
 8015648:	64b3      	str	r3, [r6, #72]	@ 0x48
 801564a:	2201      	movs	r2, #1
 801564c:	f7f6 f9d2 	bl	800b9f4 <rmw_uxrce_init_session_memory>
 8015650:	4620      	mov	r0, r4
 8015652:	4970      	ldr	r1, [pc, #448]	@ (8015814 <rmw_init+0x210>)
 8015654:	2204      	movs	r2, #4
 8015656:	f7f6 fa0d 	bl	800ba74 <rmw_uxrce_init_static_input_buffer_memory>
 801565a:	f04f 0800 	mov.w	r8, #0
 801565e:	486c      	ldr	r0, [pc, #432]	@ (8015810 <rmw_init+0x20c>)
 8015660:	f884 800d 	strb.w	r8, [r4, #13]
 8015664:	f7ff fe68 	bl	8015338 <get_memory>
 8015668:	2800      	cmp	r0, #0
 801566a:	f000 80a9 	beq.w	80157c0 <rmw_init+0x1bc>
 801566e:	6884      	ldr	r4, [r0, #8]
 8015670:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 8015672:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 8015674:	f890 c010 	ldrb.w	ip, [r0, #16]
 8015678:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 801567c:	9101      	str	r1, [sp, #4]
 801567e:	6a00      	ldr	r0, [r0, #32]
 8015680:	9000      	str	r0, [sp, #0]
 8015682:	f104 0910 	add.w	r9, r4, #16
 8015686:	4661      	mov	r1, ip
 8015688:	4648      	mov	r0, r9
 801568a:	f001 f999 	bl	80169c0 <uxr_set_custom_transport_callbacks>
 801568e:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 8015692:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8015696:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 801569a:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 801569e:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 80156a2:	495d      	ldr	r1, [pc, #372]	@ (8015818 <rmw_init+0x214>)
 80156a4:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 80156a8:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 80156ac:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 80156b0:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 80156b4:	4859      	ldr	r0, [pc, #356]	@ (801581c <rmw_init+0x218>)
 80156b6:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 80156ba:	2201      	movs	r2, #1
 80156bc:	64f4      	str	r4, [r6, #76]	@ 0x4c
 80156be:	f7f6 f979 	bl	800b9b4 <rmw_uxrce_init_node_memory>
 80156c2:	4957      	ldr	r1, [pc, #348]	@ (8015820 <rmw_init+0x21c>)
 80156c4:	4857      	ldr	r0, [pc, #348]	@ (8015824 <rmw_init+0x220>)
 80156c6:	2205      	movs	r2, #5
 80156c8:	f7f6 f954 	bl	800b974 <rmw_uxrce_init_subscription_memory>
 80156cc:	4956      	ldr	r1, [pc, #344]	@ (8015828 <rmw_init+0x224>)
 80156ce:	4857      	ldr	r0, [pc, #348]	@ (801582c <rmw_init+0x228>)
 80156d0:	220a      	movs	r2, #10
 80156d2:	f7f6 f92f 	bl	800b934 <rmw_uxrce_init_publisher_memory>
 80156d6:	4956      	ldr	r1, [pc, #344]	@ (8015830 <rmw_init+0x22c>)
 80156d8:	4856      	ldr	r0, [pc, #344]	@ (8015834 <rmw_init+0x230>)
 80156da:	2201      	movs	r2, #1
 80156dc:	f7f6 f8ea 	bl	800b8b4 <rmw_uxrce_init_service_memory>
 80156e0:	4955      	ldr	r1, [pc, #340]	@ (8015838 <rmw_init+0x234>)
 80156e2:	4856      	ldr	r0, [pc, #344]	@ (801583c <rmw_init+0x238>)
 80156e4:	2201      	movs	r2, #1
 80156e6:	f7f6 f905 	bl	800b8f4 <rmw_uxrce_init_client_memory>
 80156ea:	4955      	ldr	r1, [pc, #340]	@ (8015840 <rmw_init+0x23c>)
 80156ec:	4855      	ldr	r0, [pc, #340]	@ (8015844 <rmw_init+0x240>)
 80156ee:	220f      	movs	r2, #15
 80156f0:	f7f6 f9a0 	bl	800ba34 <rmw_uxrce_init_topic_memory>
 80156f4:	4954      	ldr	r1, [pc, #336]	@ (8015848 <rmw_init+0x244>)
 80156f6:	4855      	ldr	r0, [pc, #340]	@ (801584c <rmw_init+0x248>)
 80156f8:	2203      	movs	r2, #3
 80156fa:	f7f6 f9db 	bl	800bab4 <rmw_uxrce_init_init_options_impl_memory>
 80156fe:	4954      	ldr	r1, [pc, #336]	@ (8015850 <rmw_init+0x24c>)
 8015700:	4854      	ldr	r0, [pc, #336]	@ (8015854 <rmw_init+0x250>)
 8015702:	2204      	movs	r2, #4
 8015704:	f7f6 f9f6 	bl	800baf4 <rmw_uxrce_init_wait_set_memory>
 8015708:	4953      	ldr	r1, [pc, #332]	@ (8015858 <rmw_init+0x254>)
 801570a:	4854      	ldr	r0, [pc, #336]	@ (801585c <rmw_init+0x258>)
 801570c:	2204      	movs	r2, #4
 801570e:	f7f6 fa11 	bl	800bb34 <rmw_uxrce_init_guard_condition_memory>
 8015712:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 8015714:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 8015716:	4642      	mov	r2, r8
 8015718:	f000 fd9e 	bl	8016258 <rmw_uxrce_transport_init>
 801571c:	4607      	mov	r7, r0
 801571e:	2800      	cmp	r0, #0
 8015720:	d158      	bne.n	80157d4 <rmw_init+0x1d0>
 8015722:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8015724:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 8015728:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801572a:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 801572e:	4628      	mov	r0, r5
 8015730:	f7f9 ff4a 	bl	800f5c8 <uxr_init_session>
 8015734:	494a      	ldr	r1, [pc, #296]	@ (8015860 <rmw_init+0x25c>)
 8015736:	4622      	mov	r2, r4
 8015738:	4628      	mov	r0, r5
 801573a:	f7f9 ff69 	bl	800f610 <uxr_set_topic_callback>
 801573e:	4949      	ldr	r1, [pc, #292]	@ (8015864 <rmw_init+0x260>)
 8015740:	463a      	mov	r2, r7
 8015742:	4628      	mov	r0, r5
 8015744:	f7f9 ff60 	bl	800f608 <uxr_set_status_callback>
 8015748:	4947      	ldr	r1, [pc, #284]	@ (8015868 <rmw_init+0x264>)
 801574a:	463a      	mov	r2, r7
 801574c:	4628      	mov	r0, r5
 801574e:	f7f9 ff63 	bl	800f618 <uxr_set_request_callback>
 8015752:	4946      	ldr	r1, [pc, #280]	@ (801586c <rmw_init+0x268>)
 8015754:	463a      	mov	r2, r7
 8015756:	4628      	mov	r0, r5
 8015758:	f7f9 ff62 	bl	800f620 <uxr_set_reply_callback>
 801575c:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8015760:	2304      	movs	r3, #4
 8015762:	0092      	lsls	r2, r2, #2
 8015764:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 8015768:	4628      	mov	r0, r5
 801576a:	f7f9 ff97 	bl	800f69c <uxr_create_input_reliable_stream>
 801576e:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8015772:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 8015776:	0092      	lsls	r2, r2, #2
 8015778:	2304      	movs	r3, #4
 801577a:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 801577e:	4628      	mov	r0, r5
 8015780:	f7f9 ff64 	bl	800f64c <uxr_create_output_reliable_stream>
 8015784:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 8015788:	4628      	mov	r0, r5
 801578a:	f7f9 ff81 	bl	800f690 <uxr_create_input_best_effort_stream>
 801578e:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 8015792:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 8015796:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 801579a:	3114      	adds	r1, #20
 801579c:	4628      	mov	r0, r5
 801579e:	f7f9 ff43 	bl	800f628 <uxr_create_output_best_effort_stream>
 80157a2:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 80157a6:	4628      	mov	r0, r5
 80157a8:	f7fa fcce 	bl	8010148 <uxr_create_session>
 80157ac:	b1f8      	cbz	r0, 80157ee <rmw_init+0x1ea>
 80157ae:	4638      	mov	r0, r7
 80157b0:	b003      	add	sp, #12
 80157b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80157b6:	270b      	movs	r7, #11
 80157b8:	4638      	mov	r0, r7
 80157ba:	b003      	add	sp, #12
 80157bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80157c0:	2701      	movs	r7, #1
 80157c2:	4638      	mov	r0, r7
 80157c4:	b003      	add	sp, #12
 80157c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80157ca:	270c      	movs	r7, #12
 80157cc:	4638      	mov	r0, r7
 80157ce:	b003      	add	sp, #12
 80157d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80157d4:	4648      	mov	r0, r9
 80157d6:	f001 f935 	bl	8016a44 <uxr_close_custom_transport>
 80157da:	480d      	ldr	r0, [pc, #52]	@ (8015810 <rmw_init+0x20c>)
 80157dc:	4621      	mov	r1, r4
 80157de:	f7ff fdbb 	bl	8015358 <put_memory>
 80157e2:	4638      	mov	r0, r7
 80157e4:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 80157e8:	b003      	add	sp, #12
 80157ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80157ee:	4648      	mov	r0, r9
 80157f0:	f001 f928 	bl	8016a44 <uxr_close_custom_transport>
 80157f4:	4806      	ldr	r0, [pc, #24]	@ (8015810 <rmw_init+0x20c>)
 80157f6:	4621      	mov	r1, r4
 80157f8:	f7ff fdae 	bl	8015358 <put_memory>
 80157fc:	64f7      	str	r7, [r6, #76]	@ 0x4c
 80157fe:	2701      	movs	r7, #1
 8015800:	e7d5      	b.n	80157ae <rmw_init+0x1aa>
 8015802:	bf00      	nop
 8015804:	0801b70c 	.word	0x0801b70c
 8015808:	200153a4 	.word	0x200153a4
 801580c:	20011650 	.word	0x20011650
 8015810:	20015394 	.word	0x20015394
 8015814:	20012bf8 	.word	0x20012bf8
 8015818:	20010c74 	.word	0x20010c74
 801581c:	20015364 	.word	0x20015364
 8015820:	20014cf8 	.word	0x20014cf8
 8015824:	200153b4 	.word	0x200153b4
 8015828:	20010d18 	.word	0x20010d18
 801582c:	20015374 	.word	0x20015374
 8015830:	20011588 	.word	0x20011588
 8015834:	20015384 	.word	0x20015384
 8015838:	20010aa8 	.word	0x20010aa8
 801583c:	20010a98 	.word	0x20010a98
 8015840:	20015130 	.word	0x20015130
 8015844:	200153c4 	.word	0x200153c4
 8015848:	20010bf0 	.word	0x20010bf0
 801584c:	20015354 	.word	0x20015354
 8015850:	200152d4 	.word	0x200152d4
 8015854:	200153d4 	.word	0x200153d4
 8015858:	20010b70 	.word	0x20010b70
 801585c:	20015344 	.word	0x20015344
 8015860:	08018731 	.word	0x08018731
 8015864:	08018729 	.word	0x08018729
 8015868:	080187c9 	.word	0x080187c9
 801586c:	08018865 	.word	0x08018865

08015870 <rmw_context_fini>:
 8015870:	4b17      	ldr	r3, [pc, #92]	@ (80158d0 <rmw_context_fini+0x60>)
 8015872:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8015874:	b570      	push	{r4, r5, r6, lr}
 8015876:	681c      	ldr	r4, [r3, #0]
 8015878:	4605      	mov	r5, r0
 801587a:	b334      	cbz	r4, 80158ca <rmw_context_fini+0x5a>
 801587c:	2600      	movs	r6, #0
 801587e:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 8015882:	6902      	ldr	r2, [r0, #16]
 8015884:	428a      	cmp	r2, r1
 8015886:	d018      	beq.n	80158ba <rmw_context_fini+0x4a>
 8015888:	2c00      	cmp	r4, #0
 801588a:	d1f8      	bne.n	801587e <rmw_context_fini+0xe>
 801588c:	b189      	cbz	r1, 80158b2 <rmw_context_fini+0x42>
 801588e:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 8015892:	789b      	ldrb	r3, [r3, #2]
 8015894:	2b01      	cmp	r3, #1
 8015896:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 801589a:	bf14      	ite	ne
 801589c:	210a      	movne	r1, #10
 801589e:	2100      	moveq	r1, #0
 80158a0:	f7fa fc2a 	bl	80100f8 <uxr_delete_session_retries>
 80158a4:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 80158a6:	f7f6 f965 	bl	800bb74 <rmw_uxrce_fini_session_memory>
 80158aa:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 80158ac:	3010      	adds	r0, #16
 80158ae:	f001 f8c9 	bl	8016a44 <uxr_close_custom_transport>
 80158b2:	2300      	movs	r3, #0
 80158b4:	64eb      	str	r3, [r5, #76]	@ 0x4c
 80158b6:	4630      	mov	r0, r6
 80158b8:	bd70      	pop	{r4, r5, r6, pc}
 80158ba:	3018      	adds	r0, #24
 80158bc:	f000 f90e 	bl	8015adc <rmw_destroy_node>
 80158c0:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 80158c2:	4606      	mov	r6, r0
 80158c4:	2c00      	cmp	r4, #0
 80158c6:	d1da      	bne.n	801587e <rmw_context_fini+0xe>
 80158c8:	e7e0      	b.n	801588c <rmw_context_fini+0x1c>
 80158ca:	4626      	mov	r6, r4
 80158cc:	e7de      	b.n	801588c <rmw_context_fini+0x1c>
 80158ce:	bf00      	nop
 80158d0:	20015364 	.word	0x20015364

080158d4 <create_topic>:
 80158d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80158d8:	4605      	mov	r5, r0
 80158da:	b084      	sub	sp, #16
 80158dc:	4822      	ldr	r0, [pc, #136]	@ (8015968 <create_topic+0x94>)
 80158de:	460f      	mov	r7, r1
 80158e0:	4616      	mov	r6, r2
 80158e2:	f7ff fd29 	bl	8015338 <get_memory>
 80158e6:	4604      	mov	r4, r0
 80158e8:	2800      	cmp	r0, #0
 80158ea:	d039      	beq.n	8015960 <create_topic+0x8c>
 80158ec:	692b      	ldr	r3, [r5, #16]
 80158ee:	6884      	ldr	r4, [r0, #8]
 80158f0:	f8df 807c 	ldr.w	r8, [pc, #124]	@ 8015970 <create_topic+0x9c>
 80158f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80158f8:	e9c4 6505 	strd	r6, r5, [r4, #20]
 80158fc:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 8015900:	1c42      	adds	r2, r0, #1
 8015902:	2102      	movs	r1, #2
 8015904:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 8015908:	f7f9 fda0 	bl	800f44c <uxr_object_id>
 801590c:	223c      	movs	r2, #60	@ 0x3c
 801590e:	6120      	str	r0, [r4, #16]
 8015910:	4641      	mov	r1, r8
 8015912:	4638      	mov	r0, r7
 8015914:	f7f6 fb0c 	bl	800bf30 <generate_topic_name>
 8015918:	b1f0      	cbz	r0, 8015958 <create_topic+0x84>
 801591a:	4f14      	ldr	r7, [pc, #80]	@ (801596c <create_topic+0x98>)
 801591c:	4630      	mov	r0, r6
 801591e:	2264      	movs	r2, #100	@ 0x64
 8015920:	4639      	mov	r1, r7
 8015922:	f7f6 fad5 	bl	800bed0 <generate_type_name>
 8015926:	b1b8      	cbz	r0, 8015958 <create_topic+0x84>
 8015928:	6928      	ldr	r0, [r5, #16]
 801592a:	2306      	movs	r3, #6
 801592c:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8015930:	f8cd 8000 	str.w	r8, [sp]
 8015934:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8015938:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801593c:	6811      	ldr	r1, [r2, #0]
 801593e:	696b      	ldr	r3, [r5, #20]
 8015940:	6922      	ldr	r2, [r4, #16]
 8015942:	f7f9 fbff 	bl	800f144 <uxr_buffer_create_topic_bin>
 8015946:	4602      	mov	r2, r0
 8015948:	6928      	ldr	r0, [r5, #16]
 801594a:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801594e:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8015952:	f7f6 fa87 	bl	800be64 <run_xrce_session>
 8015956:	b918      	cbnz	r0, 8015960 <create_topic+0x8c>
 8015958:	4620      	mov	r0, r4
 801595a:	f7f6 f981 	bl	800bc60 <rmw_uxrce_fini_topic_memory>
 801595e:	2400      	movs	r4, #0
 8015960:	4620      	mov	r0, r4
 8015962:	b004      	add	sp, #16
 8015964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015968:	200153c4 	.word	0x200153c4
 801596c:	200154b0 	.word	0x200154b0
 8015970:	20015474 	.word	0x20015474

08015974 <destroy_topic>:
 8015974:	b538      	push	{r3, r4, r5, lr}
 8015976:	6985      	ldr	r5, [r0, #24]
 8015978:	b1d5      	cbz	r5, 80159b0 <destroy_topic+0x3c>
 801597a:	4604      	mov	r4, r0
 801597c:	6928      	ldr	r0, [r5, #16]
 801597e:	6922      	ldr	r2, [r4, #16]
 8015980:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8015984:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015988:	6819      	ldr	r1, [r3, #0]
 801598a:	f7f9 fb5d 	bl	800f048 <uxr_buffer_delete_entity>
 801598e:	4602      	mov	r2, r0
 8015990:	6928      	ldr	r0, [r5, #16]
 8015992:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8015996:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801599a:	f7f6 fa63 	bl	800be64 <run_xrce_session>
 801599e:	2800      	cmp	r0, #0
 80159a0:	4620      	mov	r0, r4
 80159a2:	bf14      	ite	ne
 80159a4:	2400      	movne	r4, #0
 80159a6:	2402      	moveq	r4, #2
 80159a8:	f7f6 f95a 	bl	800bc60 <rmw_uxrce_fini_topic_memory>
 80159ac:	4620      	mov	r0, r4
 80159ae:	bd38      	pop	{r3, r4, r5, pc}
 80159b0:	2401      	movs	r4, #1
 80159b2:	4620      	mov	r0, r4
 80159b4:	bd38      	pop	{r3, r4, r5, pc}
 80159b6:	bf00      	nop

080159b8 <create_node>:
 80159b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80159bc:	b083      	sub	sp, #12
 80159be:	2b00      	cmp	r3, #0
 80159c0:	d05f      	beq.n	8015a82 <create_node+0xca>
 80159c2:	4606      	mov	r6, r0
 80159c4:	4835      	ldr	r0, [pc, #212]	@ (8015a9c <create_node+0xe4>)
 80159c6:	460f      	mov	r7, r1
 80159c8:	4690      	mov	r8, r2
 80159ca:	461d      	mov	r5, r3
 80159cc:	f7ff fcb4 	bl	8015338 <get_memory>
 80159d0:	2800      	cmp	r0, #0
 80159d2:	d056      	beq.n	8015a82 <create_node+0xca>
 80159d4:	6884      	ldr	r4, [r0, #8]
 80159d6:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 80159d8:	6123      	str	r3, [r4, #16]
 80159da:	f7ff fd15 	bl	8015408 <rmw_get_implementation_identifier>
 80159de:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 80159e2:	e9c4 0406 	strd	r0, r4, [r4, #24]
 80159e6:	f8c4 9020 	str.w	r9, [r4, #32]
 80159ea:	4630      	mov	r0, r6
 80159ec:	f7ea fc08 	bl	8000200 <strlen>
 80159f0:	1c42      	adds	r2, r0, #1
 80159f2:	2a3c      	cmp	r2, #60	@ 0x3c
 80159f4:	f104 0518 	add.w	r5, r4, #24
 80159f8:	d840      	bhi.n	8015a7c <create_node+0xc4>
 80159fa:	4648      	mov	r0, r9
 80159fc:	4631      	mov	r1, r6
 80159fe:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 8015a02:	f003 fe04 	bl	801960e <memcpy>
 8015a06:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 8015a0a:	4638      	mov	r0, r7
 8015a0c:	f7ea fbf8 	bl	8000200 <strlen>
 8015a10:	1c42      	adds	r2, r0, #1
 8015a12:	2a3c      	cmp	r2, #60	@ 0x3c
 8015a14:	d832      	bhi.n	8015a7c <create_node+0xc4>
 8015a16:	4639      	mov	r1, r7
 8015a18:	4648      	mov	r0, r9
 8015a1a:	f003 fdf8 	bl	801960e <memcpy>
 8015a1e:	6923      	ldr	r3, [r4, #16]
 8015a20:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8015a24:	2101      	movs	r1, #1
 8015a26:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 8015a2a:	1842      	adds	r2, r0, r1
 8015a2c:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 8015a30:	f7f9 fd0c 	bl	800f44c <uxr_object_id>
 8015a34:	6160      	str	r0, [r4, #20]
 8015a36:	783b      	ldrb	r3, [r7, #0]
 8015a38:	2b2f      	cmp	r3, #47	@ 0x2f
 8015a3a:	d127      	bne.n	8015a8c <create_node+0xd4>
 8015a3c:	787b      	ldrb	r3, [r7, #1]
 8015a3e:	bb2b      	cbnz	r3, 8015a8c <create_node+0xd4>
 8015a40:	4a17      	ldr	r2, [pc, #92]	@ (8015aa0 <create_node+0xe8>)
 8015a42:	4818      	ldr	r0, [pc, #96]	@ (8015aa4 <create_node+0xec>)
 8015a44:	4633      	mov	r3, r6
 8015a46:	213c      	movs	r1, #60	@ 0x3c
 8015a48:	f003 f904 	bl	8018c54 <sniprintf>
 8015a4c:	6920      	ldr	r0, [r4, #16]
 8015a4e:	4915      	ldr	r1, [pc, #84]	@ (8015aa4 <create_node+0xec>)
 8015a50:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8015a54:	9100      	str	r1, [sp, #0]
 8015a56:	2106      	movs	r1, #6
 8015a58:	9101      	str	r1, [sp, #4]
 8015a5a:	6811      	ldr	r1, [r2, #0]
 8015a5c:	6962      	ldr	r2, [r4, #20]
 8015a5e:	fa1f f388 	uxth.w	r3, r8
 8015a62:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015a66:	f7f9 fb3b 	bl	800f0e0 <uxr_buffer_create_participant_bin>
 8015a6a:	4602      	mov	r2, r0
 8015a6c:	6920      	ldr	r0, [r4, #16]
 8015a6e:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8015a72:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8015a76:	f7f6 f9f5 	bl	800be64 <run_xrce_session>
 8015a7a:	b918      	cbnz	r0, 8015a84 <create_node+0xcc>
 8015a7c:	4628      	mov	r0, r5
 8015a7e:	f7f6 f87f 	bl	800bb80 <rmw_uxrce_fini_node_memory>
 8015a82:	2500      	movs	r5, #0
 8015a84:	4628      	mov	r0, r5
 8015a86:	b003      	add	sp, #12
 8015a88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015a8c:	4a06      	ldr	r2, [pc, #24]	@ (8015aa8 <create_node+0xf0>)
 8015a8e:	9600      	str	r6, [sp, #0]
 8015a90:	463b      	mov	r3, r7
 8015a92:	213c      	movs	r1, #60	@ 0x3c
 8015a94:	4803      	ldr	r0, [pc, #12]	@ (8015aa4 <create_node+0xec>)
 8015a96:	f003 f8dd 	bl	8018c54 <sniprintf>
 8015a9a:	e7d7      	b.n	8015a4c <create_node+0x94>
 8015a9c:	20015364 	.word	0x20015364
 8015aa0:	0801ad28 	.word	0x0801ad28
 8015aa4:	20015514 	.word	0x20015514
 8015aa8:	0801b17c 	.word	0x0801b17c

08015aac <rmw_create_node>:
 8015aac:	b199      	cbz	r1, 8015ad6 <rmw_create_node+0x2a>
 8015aae:	780b      	ldrb	r3, [r1, #0]
 8015ab0:	468c      	mov	ip, r1
 8015ab2:	b183      	cbz	r3, 8015ad6 <rmw_create_node+0x2a>
 8015ab4:	b410      	push	{r4}
 8015ab6:	4614      	mov	r4, r2
 8015ab8:	b14a      	cbz	r2, 8015ace <rmw_create_node+0x22>
 8015aba:	7813      	ldrb	r3, [r2, #0]
 8015abc:	b13b      	cbz	r3, 8015ace <rmw_create_node+0x22>
 8015abe:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 8015ac0:	4603      	mov	r3, r0
 8015ac2:	4621      	mov	r1, r4
 8015ac4:	4660      	mov	r0, ip
 8015ac6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015aca:	f7ff bf75 	b.w	80159b8 <create_node>
 8015ace:	2000      	movs	r0, #0
 8015ad0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015ad4:	4770      	bx	lr
 8015ad6:	2000      	movs	r0, #0
 8015ad8:	4770      	bx	lr
 8015ada:	bf00      	nop

08015adc <rmw_destroy_node>:
 8015adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015ade:	b328      	cbz	r0, 8015b2c <rmw_destroy_node+0x50>
 8015ae0:	4607      	mov	r7, r0
 8015ae2:	6800      	ldr	r0, [r0, #0]
 8015ae4:	b120      	cbz	r0, 8015af0 <rmw_destroy_node+0x14>
 8015ae6:	4b36      	ldr	r3, [pc, #216]	@ (8015bc0 <rmw_destroy_node+0xe4>)
 8015ae8:	6819      	ldr	r1, [r3, #0]
 8015aea:	f7ea fb91 	bl	8000210 <strcmp>
 8015aee:	b9e8      	cbnz	r0, 8015b2c <rmw_destroy_node+0x50>
 8015af0:	687d      	ldr	r5, [r7, #4]
 8015af2:	b1dd      	cbz	r5, 8015b2c <rmw_destroy_node+0x50>
 8015af4:	4b33      	ldr	r3, [pc, #204]	@ (8015bc4 <rmw_destroy_node+0xe8>)
 8015af6:	681c      	ldr	r4, [r3, #0]
 8015af8:	2c00      	cmp	r4, #0
 8015afa:	d05f      	beq.n	8015bbc <rmw_destroy_node+0xe0>
 8015afc:	2600      	movs	r6, #0
 8015afe:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8015b02:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 8015b06:	429d      	cmp	r5, r3
 8015b08:	d013      	beq.n	8015b32 <rmw_destroy_node+0x56>
 8015b0a:	2c00      	cmp	r4, #0
 8015b0c:	d1f7      	bne.n	8015afe <rmw_destroy_node+0x22>
 8015b0e:	4b2e      	ldr	r3, [pc, #184]	@ (8015bc8 <rmw_destroy_node+0xec>)
 8015b10:	681c      	ldr	r4, [r3, #0]
 8015b12:	b1c4      	cbz	r4, 8015b46 <rmw_destroy_node+0x6a>
 8015b14:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8015b18:	6a0b      	ldr	r3, [r1, #32]
 8015b1a:	429d      	cmp	r5, r3
 8015b1c:	d1f9      	bne.n	8015b12 <rmw_destroy_node+0x36>
 8015b1e:	317c      	adds	r1, #124	@ 0x7c
 8015b20:	4638      	mov	r0, r7
 8015b22:	f000 fae5 	bl	80160f0 <rmw_destroy_subscription>
 8015b26:	2801      	cmp	r0, #1
 8015b28:	4606      	mov	r6, r0
 8015b2a:	d1f2      	bne.n	8015b12 <rmw_destroy_node+0x36>
 8015b2c:	2601      	movs	r6, #1
 8015b2e:	4630      	mov	r0, r6
 8015b30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015b32:	3184      	adds	r1, #132	@ 0x84
 8015b34:	4638      	mov	r0, r7
 8015b36:	f7f5 fe6b 	bl	800b810 <rmw_destroy_publisher>
 8015b3a:	2801      	cmp	r0, #1
 8015b3c:	4606      	mov	r6, r0
 8015b3e:	d0f5      	beq.n	8015b2c <rmw_destroy_node+0x50>
 8015b40:	2c00      	cmp	r4, #0
 8015b42:	d1dc      	bne.n	8015afe <rmw_destroy_node+0x22>
 8015b44:	e7e3      	b.n	8015b0e <rmw_destroy_node+0x32>
 8015b46:	4b21      	ldr	r3, [pc, #132]	@ (8015bcc <rmw_destroy_node+0xf0>)
 8015b48:	681c      	ldr	r4, [r3, #0]
 8015b4a:	b16c      	cbz	r4, 8015b68 <rmw_destroy_node+0x8c>
 8015b4c:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8015b50:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 8015b52:	429d      	cmp	r5, r3
 8015b54:	d1f9      	bne.n	8015b4a <rmw_destroy_node+0x6e>
 8015b56:	317c      	adds	r1, #124	@ 0x7c
 8015b58:	4638      	mov	r0, r7
 8015b5a:	f000 f993 	bl	8015e84 <rmw_destroy_service>
 8015b5e:	2801      	cmp	r0, #1
 8015b60:	4606      	mov	r6, r0
 8015b62:	d0e3      	beq.n	8015b2c <rmw_destroy_node+0x50>
 8015b64:	2c00      	cmp	r4, #0
 8015b66:	d1f1      	bne.n	8015b4c <rmw_destroy_node+0x70>
 8015b68:	4b19      	ldr	r3, [pc, #100]	@ (8015bd0 <rmw_destroy_node+0xf4>)
 8015b6a:	681c      	ldr	r4, [r3, #0]
 8015b6c:	b16c      	cbz	r4, 8015b8a <rmw_destroy_node+0xae>
 8015b6e:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8015b72:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 8015b74:	429d      	cmp	r5, r3
 8015b76:	d1f9      	bne.n	8015b6c <rmw_destroy_node+0x90>
 8015b78:	317c      	adds	r1, #124	@ 0x7c
 8015b7a:	4638      	mov	r0, r7
 8015b7c:	f7ff fc00 	bl	8015380 <rmw_destroy_client>
 8015b80:	2801      	cmp	r0, #1
 8015b82:	4606      	mov	r6, r0
 8015b84:	d0d2      	beq.n	8015b2c <rmw_destroy_node+0x50>
 8015b86:	2c00      	cmp	r4, #0
 8015b88:	d1f1      	bne.n	8015b6e <rmw_destroy_node+0x92>
 8015b8a:	6928      	ldr	r0, [r5, #16]
 8015b8c:	696a      	ldr	r2, [r5, #20]
 8015b8e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8015b92:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015b96:	6819      	ldr	r1, [r3, #0]
 8015b98:	f7f9 fa56 	bl	800f048 <uxr_buffer_delete_entity>
 8015b9c:	4602      	mov	r2, r0
 8015b9e:	6928      	ldr	r0, [r5, #16]
 8015ba0:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8015ba4:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8015ba8:	f7f6 f95c 	bl	800be64 <run_xrce_session>
 8015bac:	2800      	cmp	r0, #0
 8015bae:	bf08      	it	eq
 8015bb0:	2602      	moveq	r6, #2
 8015bb2:	4638      	mov	r0, r7
 8015bb4:	f7f5 ffe4 	bl	800bb80 <rmw_uxrce_fini_node_memory>
 8015bb8:	4630      	mov	r0, r6
 8015bba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015bbc:	4626      	mov	r6, r4
 8015bbe:	e7a6      	b.n	8015b0e <rmw_destroy_node+0x32>
 8015bc0:	0801b70c 	.word	0x0801b70c
 8015bc4:	20015374 	.word	0x20015374
 8015bc8:	200153b4 	.word	0x200153b4
 8015bcc:	20015384 	.word	0x20015384
 8015bd0:	20010a98 	.word	0x20010a98

08015bd4 <rmw_node_get_graph_guard_condition>:
 8015bd4:	6843      	ldr	r3, [r0, #4]
 8015bd6:	6918      	ldr	r0, [r3, #16]
 8015bd8:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 8015bdc:	4770      	bx	lr
 8015bde:	bf00      	nop

08015be0 <rmw_send_request>:
 8015be0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015be4:	4604      	mov	r4, r0
 8015be6:	6800      	ldr	r0, [r0, #0]
 8015be8:	b08b      	sub	sp, #44	@ 0x2c
 8015bea:	460e      	mov	r6, r1
 8015bec:	4615      	mov	r5, r2
 8015bee:	b128      	cbz	r0, 8015bfc <rmw_send_request+0x1c>
 8015bf0:	4b21      	ldr	r3, [pc, #132]	@ (8015c78 <rmw_send_request+0x98>)
 8015bf2:	6819      	ldr	r1, [r3, #0]
 8015bf4:	f7ea fb0c 	bl	8000210 <strcmp>
 8015bf8:	2800      	cmp	r0, #0
 8015bfa:	d139      	bne.n	8015c70 <rmw_send_request+0x90>
 8015bfc:	6864      	ldr	r4, [r4, #4]
 8015bfe:	6963      	ldr	r3, [r4, #20]
 8015c00:	f8d4 8078 	ldr.w	r8, [r4, #120]	@ 0x78
 8015c04:	689b      	ldr	r3, [r3, #8]
 8015c06:	4798      	blx	r3
 8015c08:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8015c0c:	4630      	mov	r0, r6
 8015c0e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015c12:	4798      	blx	r3
 8015c14:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8015c18:	9000      	str	r0, [sp, #0]
 8015c1a:	6922      	ldr	r2, [r4, #16]
 8015c1c:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 8015c1e:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8015c22:	ab02      	add	r3, sp, #8
 8015c24:	f7fa ff0c 	bl	8010a40 <uxr_prepare_output_stream>
 8015c28:	2700      	movs	r7, #0
 8015c2a:	6028      	str	r0, [r5, #0]
 8015c2c:	606f      	str	r7, [r5, #4]
 8015c2e:	b198      	cbz	r0, 8015c58 <rmw_send_request+0x78>
 8015c30:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8015c34:	a902      	add	r1, sp, #8
 8015c36:	4630      	mov	r0, r6
 8015c38:	4798      	blx	r3
 8015c3a:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 8015c3e:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8015c42:	2b01      	cmp	r3, #1
 8015c44:	d00c      	beq.n	8015c60 <rmw_send_request+0x80>
 8015c46:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 8015c48:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015c4c:	f7fa f90c 	bl	800fe68 <uxr_run_session_until_confirm_delivery>
 8015c50:	4638      	mov	r0, r7
 8015c52:	b00b      	add	sp, #44	@ 0x2c
 8015c54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015c58:	2001      	movs	r0, #1
 8015c5a:	b00b      	add	sp, #44	@ 0x2c
 8015c5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015c60:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015c64:	f7f9 fd40 	bl	800f6e8 <uxr_flash_output_streams>
 8015c68:	4638      	mov	r0, r7
 8015c6a:	b00b      	add	sp, #44	@ 0x2c
 8015c6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015c70:	200c      	movs	r0, #12
 8015c72:	b00b      	add	sp, #44	@ 0x2c
 8015c74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015c78:	0801b70c 	.word	0x0801b70c

08015c7c <rmw_take_request>:
 8015c7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015c80:	4605      	mov	r5, r0
 8015c82:	6800      	ldr	r0, [r0, #0]
 8015c84:	b089      	sub	sp, #36	@ 0x24
 8015c86:	460c      	mov	r4, r1
 8015c88:	4690      	mov	r8, r2
 8015c8a:	461e      	mov	r6, r3
 8015c8c:	b128      	cbz	r0, 8015c9a <rmw_take_request+0x1e>
 8015c8e:	4b28      	ldr	r3, [pc, #160]	@ (8015d30 <rmw_take_request+0xb4>)
 8015c90:	6819      	ldr	r1, [r3, #0]
 8015c92:	f7ea fabd 	bl	8000210 <strcmp>
 8015c96:	2800      	cmp	r0, #0
 8015c98:	d146      	bne.n	8015d28 <rmw_take_request+0xac>
 8015c9a:	b10e      	cbz	r6, 8015ca0 <rmw_take_request+0x24>
 8015c9c:	2300      	movs	r3, #0
 8015c9e:	7033      	strb	r3, [r6, #0]
 8015ca0:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8015ca4:	f7f6 f860 	bl	800bd68 <rmw_uxrce_clean_expired_static_input_buffer>
 8015ca8:	4648      	mov	r0, r9
 8015caa:	f7f6 f835 	bl	800bd18 <rmw_uxrce_find_static_input_buffer_by_owner>
 8015cae:	4607      	mov	r7, r0
 8015cb0:	b3b0      	cbz	r0, 8015d20 <rmw_take_request+0xa4>
 8015cb2:	6885      	ldr	r5, [r0, #8]
 8015cb4:	f8d5 3838 	ldr.w	r3, [r5, #2104]	@ 0x838
 8015cb8:	f8d5 283c 	ldr.w	r2, [r5, #2108]	@ 0x83c
 8015cbc:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8015cc0:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 8015cc4:	7423      	strb	r3, [r4, #16]
 8015cc6:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	@ 0x834
 8015cca:	f895 2836 	ldrb.w	r2, [r5, #2102]	@ 0x836
 8015cce:	74e2      	strb	r2, [r4, #19]
 8015cd0:	f8a4 3011 	strh.w	r3, [r4, #17]
 8015cd4:	f8d5 2828 	ldr.w	r2, [r5, #2088]	@ 0x828
 8015cd8:	f8d5 382c 	ldr.w	r3, [r5, #2092]	@ 0x82c
 8015cdc:	f8d5 1830 	ldr.w	r1, [r5, #2096]	@ 0x830
 8015ce0:	61e1      	str	r1, [r4, #28]
 8015ce2:	6162      	str	r2, [r4, #20]
 8015ce4:	61a3      	str	r3, [r4, #24]
 8015ce6:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8015cea:	689b      	ldr	r3, [r3, #8]
 8015cec:	4798      	blx	r3
 8015cee:	6844      	ldr	r4, [r0, #4]
 8015cf0:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 8015cf4:	f105 0110 	add.w	r1, r5, #16
 8015cf8:	4668      	mov	r0, sp
 8015cfa:	f7f9 f885 	bl	800ee08 <ucdr_init_buffer>
 8015cfe:	68e3      	ldr	r3, [r4, #12]
 8015d00:	4641      	mov	r1, r8
 8015d02:	4668      	mov	r0, sp
 8015d04:	4798      	blx	r3
 8015d06:	4639      	mov	r1, r7
 8015d08:	4604      	mov	r4, r0
 8015d0a:	480a      	ldr	r0, [pc, #40]	@ (8015d34 <rmw_take_request+0xb8>)
 8015d0c:	f7ff fb24 	bl	8015358 <put_memory>
 8015d10:	b106      	cbz	r6, 8015d14 <rmw_take_request+0x98>
 8015d12:	7034      	strb	r4, [r6, #0]
 8015d14:	f084 0001 	eor.w	r0, r4, #1
 8015d18:	b2c0      	uxtb	r0, r0
 8015d1a:	b009      	add	sp, #36	@ 0x24
 8015d1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015d20:	2001      	movs	r0, #1
 8015d22:	b009      	add	sp, #36	@ 0x24
 8015d24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015d28:	200c      	movs	r0, #12
 8015d2a:	b009      	add	sp, #36	@ 0x24
 8015d2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015d30:	0801b70c 	.word	0x0801b70c
 8015d34:	200153a4 	.word	0x200153a4

08015d38 <rmw_send_response>:
 8015d38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015d3a:	4605      	mov	r5, r0
 8015d3c:	6800      	ldr	r0, [r0, #0]
 8015d3e:	b091      	sub	sp, #68	@ 0x44
 8015d40:	460c      	mov	r4, r1
 8015d42:	4616      	mov	r6, r2
 8015d44:	b128      	cbz	r0, 8015d52 <rmw_send_response+0x1a>
 8015d46:	4b29      	ldr	r3, [pc, #164]	@ (8015dec <rmw_send_response+0xb4>)
 8015d48:	6819      	ldr	r1, [r3, #0]
 8015d4a:	f7ea fa61 	bl	8000210 <strcmp>
 8015d4e:	2800      	cmp	r0, #0
 8015d50:	d141      	bne.n	8015dd6 <rmw_send_response+0x9e>
 8015d52:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 8015d56:	9306      	str	r3, [sp, #24]
 8015d58:	4623      	mov	r3, r4
 8015d5a:	9207      	str	r2, [sp, #28]
 8015d5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015d60:	686d      	ldr	r5, [r5, #4]
 8015d62:	789b      	ldrb	r3, [r3, #2]
 8015d64:	68a1      	ldr	r1, [r4, #8]
 8015d66:	f88d 2017 	strb.w	r2, [sp, #23]
 8015d6a:	f88d 3016 	strb.w	r3, [sp, #22]
 8015d6e:	68e2      	ldr	r2, [r4, #12]
 8015d70:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 8015d74:	6860      	ldr	r0, [r4, #4]
 8015d76:	f8ad 3014 	strh.w	r3, [sp, #20]
 8015d7a:	ab02      	add	r3, sp, #8
 8015d7c:	c307      	stmia	r3!, {r0, r1, r2}
 8015d7e:	696b      	ldr	r3, [r5, #20]
 8015d80:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 8015d82:	68db      	ldr	r3, [r3, #12]
 8015d84:	4798      	blx	r3
 8015d86:	6844      	ldr	r4, [r0, #4]
 8015d88:	4630      	mov	r0, r6
 8015d8a:	6923      	ldr	r3, [r4, #16]
 8015d8c:	4798      	blx	r3
 8015d8e:	f100 0318 	add.w	r3, r0, #24
 8015d92:	6938      	ldr	r0, [r7, #16]
 8015d94:	9300      	str	r3, [sp, #0]
 8015d96:	692a      	ldr	r2, [r5, #16]
 8015d98:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 8015d9a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015d9e:	ab08      	add	r3, sp, #32
 8015da0:	f7fa fe4e 	bl	8010a40 <uxr_prepare_output_stream>
 8015da4:	b910      	cbnz	r0, 8015dac <rmw_send_response+0x74>
 8015da6:	2001      	movs	r0, #1
 8015da8:	b011      	add	sp, #68	@ 0x44
 8015daa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015dac:	a902      	add	r1, sp, #8
 8015dae:	a808      	add	r0, sp, #32
 8015db0:	f7fb ff7e 	bl	8011cb0 <uxr_serialize_SampleIdentity>
 8015db4:	68a3      	ldr	r3, [r4, #8]
 8015db6:	a908      	add	r1, sp, #32
 8015db8:	4630      	mov	r0, r6
 8015dba:	4798      	blx	r3
 8015dbc:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 8015dc0:	6938      	ldr	r0, [r7, #16]
 8015dc2:	2b01      	cmp	r3, #1
 8015dc4:	d00a      	beq.n	8015ddc <rmw_send_response+0xa4>
 8015dc6:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 8015dc8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015dcc:	f7fa f84c 	bl	800fe68 <uxr_run_session_until_confirm_delivery>
 8015dd0:	2000      	movs	r0, #0
 8015dd2:	b011      	add	sp, #68	@ 0x44
 8015dd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015dd6:	200c      	movs	r0, #12
 8015dd8:	b011      	add	sp, #68	@ 0x44
 8015dda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015ddc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015de0:	f7f9 fc82 	bl	800f6e8 <uxr_flash_output_streams>
 8015de4:	2000      	movs	r0, #0
 8015de6:	b011      	add	sp, #68	@ 0x44
 8015de8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015dea:	bf00      	nop
 8015dec:	0801b70c 	.word	0x0801b70c

08015df0 <rmw_take_response>:
 8015df0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015df4:	4604      	mov	r4, r0
 8015df6:	6800      	ldr	r0, [r0, #0]
 8015df8:	b088      	sub	sp, #32
 8015dfa:	4688      	mov	r8, r1
 8015dfc:	4617      	mov	r7, r2
 8015dfe:	461d      	mov	r5, r3
 8015e00:	b120      	cbz	r0, 8015e0c <rmw_take_response+0x1c>
 8015e02:	4b1e      	ldr	r3, [pc, #120]	@ (8015e7c <rmw_take_response+0x8c>)
 8015e04:	6819      	ldr	r1, [r3, #0]
 8015e06:	f7ea fa03 	bl	8000210 <strcmp>
 8015e0a:	bb78      	cbnz	r0, 8015e6c <rmw_take_response+0x7c>
 8015e0c:	b10d      	cbz	r5, 8015e12 <rmw_take_response+0x22>
 8015e0e:	2300      	movs	r3, #0
 8015e10:	702b      	strb	r3, [r5, #0]
 8015e12:	6864      	ldr	r4, [r4, #4]
 8015e14:	f7f5 ffa8 	bl	800bd68 <rmw_uxrce_clean_expired_static_input_buffer>
 8015e18:	4620      	mov	r0, r4
 8015e1a:	f7f5 ff7d 	bl	800bd18 <rmw_uxrce_find_static_input_buffer_by_owner>
 8015e1e:	4606      	mov	r6, r0
 8015e20:	b340      	cbz	r0, 8015e74 <rmw_take_response+0x84>
 8015e22:	6963      	ldr	r3, [r4, #20]
 8015e24:	6884      	ldr	r4, [r0, #8]
 8015e26:	68db      	ldr	r3, [r3, #12]
 8015e28:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 8015e2c:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 8015e30:	e9c8 0108 	strd	r0, r1, [r8, #32]
 8015e34:	4798      	blx	r3
 8015e36:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8015e3a:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 8015e3e:	f104 0110 	add.w	r1, r4, #16
 8015e42:	4668      	mov	r0, sp
 8015e44:	f7f8 ffe0 	bl	800ee08 <ucdr_init_buffer>
 8015e48:	4639      	mov	r1, r7
 8015e4a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015e4e:	4668      	mov	r0, sp
 8015e50:	4798      	blx	r3
 8015e52:	4631      	mov	r1, r6
 8015e54:	4604      	mov	r4, r0
 8015e56:	480a      	ldr	r0, [pc, #40]	@ (8015e80 <rmw_take_response+0x90>)
 8015e58:	f7ff fa7e 	bl	8015358 <put_memory>
 8015e5c:	b105      	cbz	r5, 8015e60 <rmw_take_response+0x70>
 8015e5e:	702c      	strb	r4, [r5, #0]
 8015e60:	f084 0001 	eor.w	r0, r4, #1
 8015e64:	b2c0      	uxtb	r0, r0
 8015e66:	b008      	add	sp, #32
 8015e68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015e6c:	200c      	movs	r0, #12
 8015e6e:	b008      	add	sp, #32
 8015e70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015e74:	2001      	movs	r0, #1
 8015e76:	b008      	add	sp, #32
 8015e78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015e7c:	0801b70c 	.word	0x0801b70c
 8015e80:	200153a4 	.word	0x200153a4

08015e84 <rmw_destroy_service>:
 8015e84:	b570      	push	{r4, r5, r6, lr}
 8015e86:	b128      	cbz	r0, 8015e94 <rmw_destroy_service+0x10>
 8015e88:	4604      	mov	r4, r0
 8015e8a:	6800      	ldr	r0, [r0, #0]
 8015e8c:	460d      	mov	r5, r1
 8015e8e:	f7f6 f869 	bl	800bf64 <is_uxrce_rmw_identifier_valid>
 8015e92:	b910      	cbnz	r0, 8015e9a <rmw_destroy_service+0x16>
 8015e94:	2401      	movs	r4, #1
 8015e96:	4620      	mov	r0, r4
 8015e98:	bd70      	pop	{r4, r5, r6, pc}
 8015e9a:	6863      	ldr	r3, [r4, #4]
 8015e9c:	2b00      	cmp	r3, #0
 8015e9e:	d0f9      	beq.n	8015e94 <rmw_destroy_service+0x10>
 8015ea0:	2d00      	cmp	r5, #0
 8015ea2:	d0f7      	beq.n	8015e94 <rmw_destroy_service+0x10>
 8015ea4:	6828      	ldr	r0, [r5, #0]
 8015ea6:	f7f6 f85d 	bl	800bf64 <is_uxrce_rmw_identifier_valid>
 8015eaa:	2800      	cmp	r0, #0
 8015eac:	d0f2      	beq.n	8015e94 <rmw_destroy_service+0x10>
 8015eae:	686e      	ldr	r6, [r5, #4]
 8015eb0:	2e00      	cmp	r6, #0
 8015eb2:	d0ef      	beq.n	8015e94 <rmw_destroy_service+0x10>
 8015eb4:	6864      	ldr	r4, [r4, #4]
 8015eb6:	6932      	ldr	r2, [r6, #16]
 8015eb8:	6920      	ldr	r0, [r4, #16]
 8015eba:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8015ebe:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015ec2:	6819      	ldr	r1, [r3, #0]
 8015ec4:	f001 fb44 	bl	8017550 <uxr_buffer_cancel_data>
 8015ec8:	4602      	mov	r2, r0
 8015eca:	6920      	ldr	r0, [r4, #16]
 8015ecc:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8015ed0:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8015ed4:	f7f5 ffc6 	bl	800be64 <run_xrce_session>
 8015ed8:	6920      	ldr	r0, [r4, #16]
 8015eda:	6932      	ldr	r2, [r6, #16]
 8015edc:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8015ee0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015ee4:	6819      	ldr	r1, [r3, #0]
 8015ee6:	f7f9 f8af 	bl	800f048 <uxr_buffer_delete_entity>
 8015eea:	4602      	mov	r2, r0
 8015eec:	6920      	ldr	r0, [r4, #16]
 8015eee:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8015ef2:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8015ef6:	f7f5 ffb5 	bl	800be64 <run_xrce_session>
 8015efa:	2800      	cmp	r0, #0
 8015efc:	4628      	mov	r0, r5
 8015efe:	bf14      	ite	ne
 8015f00:	2400      	movne	r4, #0
 8015f02:	2402      	moveq	r4, #2
 8015f04:	f7f5 fe80 	bl	800bc08 <rmw_uxrce_fini_service_memory>
 8015f08:	e7c5      	b.n	8015e96 <rmw_destroy_service+0x12>
 8015f0a:	bf00      	nop

08015f0c <rmw_create_subscription>:
 8015f0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f10:	b08d      	sub	sp, #52	@ 0x34
 8015f12:	2800      	cmp	r0, #0
 8015f14:	f000 80d1 	beq.w	80160ba <rmw_create_subscription+0x1ae>
 8015f18:	460e      	mov	r6, r1
 8015f1a:	2900      	cmp	r1, #0
 8015f1c:	f000 80cd 	beq.w	80160ba <rmw_create_subscription+0x1ae>
 8015f20:	4604      	mov	r4, r0
 8015f22:	6800      	ldr	r0, [r0, #0]
 8015f24:	4615      	mov	r5, r2
 8015f26:	4698      	mov	r8, r3
 8015f28:	f7f6 f81c 	bl	800bf64 <is_uxrce_rmw_identifier_valid>
 8015f2c:	2800      	cmp	r0, #0
 8015f2e:	f000 80c4 	beq.w	80160ba <rmw_create_subscription+0x1ae>
 8015f32:	2d00      	cmp	r5, #0
 8015f34:	f000 80c1 	beq.w	80160ba <rmw_create_subscription+0x1ae>
 8015f38:	782b      	ldrb	r3, [r5, #0]
 8015f3a:	2b00      	cmp	r3, #0
 8015f3c:	f000 80bd 	beq.w	80160ba <rmw_create_subscription+0x1ae>
 8015f40:	f1b8 0f00 	cmp.w	r8, #0
 8015f44:	f000 80b9 	beq.w	80160ba <rmw_create_subscription+0x1ae>
 8015f48:	485e      	ldr	r0, [pc, #376]	@ (80160c4 <rmw_create_subscription+0x1b8>)
 8015f4a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8015f4e:	f7ff f9f3 	bl	8015338 <get_memory>
 8015f52:	4604      	mov	r4, r0
 8015f54:	2800      	cmp	r0, #0
 8015f56:	f000 80b1 	beq.w	80160bc <rmw_create_subscription+0x1b0>
 8015f5a:	6887      	ldr	r7, [r0, #8]
 8015f5c:	f8c7 7080 	str.w	r7, [r7, #128]	@ 0x80
 8015f60:	f7ff fa52 	bl	8015408 <rmw_get_implementation_identifier>
 8015f64:	f107 0a98 	add.w	sl, r7, #152	@ 0x98
 8015f68:	67f8      	str	r0, [r7, #124]	@ 0x7c
 8015f6a:	f8c7 a084 	str.w	sl, [r7, #132]	@ 0x84
 8015f6e:	4628      	mov	r0, r5
 8015f70:	f7ea f946 	bl	8000200 <strlen>
 8015f74:	3001      	adds	r0, #1
 8015f76:	283c      	cmp	r0, #60	@ 0x3c
 8015f78:	f107 047c 	add.w	r4, r7, #124	@ 0x7c
 8015f7c:	f200 8096 	bhi.w	80160ac <rmw_create_subscription+0x1a0>
 8015f80:	4a51      	ldr	r2, [pc, #324]	@ (80160c8 <rmw_create_subscription+0x1bc>)
 8015f82:	462b      	mov	r3, r5
 8015f84:	213c      	movs	r1, #60	@ 0x3c
 8015f86:	4650      	mov	r0, sl
 8015f88:	f002 fe64 	bl	8018c54 <sniprintf>
 8015f8c:	4641      	mov	r1, r8
 8015f8e:	f8c7 9020 	str.w	r9, [r7, #32]
 8015f92:	2250      	movs	r2, #80	@ 0x50
 8015f94:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8015f98:	f003 fb39 	bl	801960e <memcpy>
 8015f9c:	494b      	ldr	r1, [pc, #300]	@ (80160cc <rmw_create_subscription+0x1c0>)
 8015f9e:	4630      	mov	r0, r6
 8015fa0:	f7f5 ffee 	bl	800bf80 <get_message_typesupport_handle>
 8015fa4:	2800      	cmp	r0, #0
 8015fa6:	f000 8081 	beq.w	80160ac <rmw_create_subscription+0x1a0>
 8015faa:	6842      	ldr	r2, [r0, #4]
 8015fac:	61ba      	str	r2, [r7, #24]
 8015fae:	2a00      	cmp	r2, #0
 8015fb0:	d07c      	beq.n	80160ac <rmw_create_subscription+0x1a0>
 8015fb2:	4629      	mov	r1, r5
 8015fb4:	4643      	mov	r3, r8
 8015fb6:	4648      	mov	r0, r9
 8015fb8:	f7ff fc8c 	bl	80158d4 <create_topic>
 8015fbc:	61f8      	str	r0, [r7, #28]
 8015fbe:	2800      	cmp	r0, #0
 8015fc0:	d078      	beq.n	80160b4 <rmw_create_subscription+0x1a8>
 8015fc2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015fc6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8015fca:	2104      	movs	r1, #4
 8015fcc:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	@ 0x59c
 8015fd0:	1c42      	adds	r2, r0, #1
 8015fd2:	f8a3 259c 	strh.w	r2, [r3, #1436]	@ 0x59c
 8015fd6:	f7f9 fa39 	bl	800f44c <uxr_object_id>
 8015fda:	6138      	str	r0, [r7, #16]
 8015fdc:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8015fe0:	2506      	movs	r5, #6
 8015fe2:	f8d0 3384 	ldr.w	r3, [r0, #900]	@ 0x384
 8015fe6:	9500      	str	r5, [sp, #0]
 8015fe8:	6819      	ldr	r1, [r3, #0]
 8015fea:	693a      	ldr	r2, [r7, #16]
 8015fec:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8015ff0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015ff4:	f7f9 f90c 	bl	800f210 <uxr_buffer_create_subscriber_bin>
 8015ff8:	4602      	mov	r2, r0
 8015ffa:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8015ffe:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8016002:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8016006:	f7f5 ff2d 	bl	800be64 <run_xrce_session>
 801600a:	2800      	cmp	r0, #0
 801600c:	d04e      	beq.n	80160ac <rmw_create_subscription+0x1a0>
 801600e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8016012:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8016016:	4629      	mov	r1, r5
 8016018:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	@ 0x59e
 801601c:	1c42      	adds	r2, r0, #1
 801601e:	f8a3 259e 	strh.w	r2, [r3, #1438]	@ 0x59e
 8016022:	f7f9 fa13 	bl	800f44c <uxr_object_id>
 8016026:	ae08      	add	r6, sp, #32
 8016028:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801602c:	69fb      	ldr	r3, [r7, #28]
 801602e:	6178      	str	r0, [r7, #20]
 8016030:	4641      	mov	r1, r8
 8016032:	4630      	mov	r0, r6
 8016034:	f8da b384 	ldr.w	fp, [sl, #900]	@ 0x384
 8016038:	9305      	str	r3, [sp, #20]
 801603a:	f7f5 ff2f 	bl	800be9c <convert_qos_profile>
 801603e:	9503      	str	r5, [sp, #12]
 8016040:	e896 0003 	ldmia.w	r6, {r0, r1}
 8016044:	9b05      	ldr	r3, [sp, #20]
 8016046:	9001      	str	r0, [sp, #4]
 8016048:	f8ad 1008 	strh.w	r1, [sp, #8]
 801604c:	691b      	ldr	r3, [r3, #16]
 801604e:	9300      	str	r3, [sp, #0]
 8016050:	e9d7 3204 	ldrd	r3, r2, [r7, #16]
 8016054:	f8db 1000 	ldr.w	r1, [fp]
 8016058:	f50a 7028 	add.w	r0, sl, #672	@ 0x2a0
 801605c:	f7f9 f97e 	bl	800f35c <uxr_buffer_create_datareader_bin>
 8016060:	4602      	mov	r2, r0
 8016062:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8016066:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801606a:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801606e:	f7f5 fef9 	bl	800be64 <run_xrce_session>
 8016072:	b1d8      	cbz	r0, 80160ac <rmw_create_subscription+0x1a0>
 8016074:	f898 3008 	ldrb.w	r3, [r8, #8]
 8016078:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801607c:	2b02      	cmp	r3, #2
 801607e:	bf0c      	ite	eq
 8016080:	f8d0 3380 	ldreq.w	r3, [r0, #896]	@ 0x380
 8016084:	f8d0 3374 	ldrne.w	r3, [r0, #884]	@ 0x374
 8016088:	9307      	str	r3, [sp, #28]
 801608a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 801608e:	2200      	movs	r2, #0
 8016090:	e9cd 120a 	strd	r1, r2, [sp, #40]	@ 0x28
 8016094:	ab0a      	add	r3, sp, #40	@ 0x28
 8016096:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801609a:	9300      	str	r3, [sp, #0]
 801609c:	697a      	ldr	r2, [r7, #20]
 801609e:	9b07      	ldr	r3, [sp, #28]
 80160a0:	6809      	ldr	r1, [r1, #0]
 80160a2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80160a6:	f001 fa19 	bl	80174dc <uxr_buffer_request_data>
 80160aa:	e007      	b.n	80160bc <rmw_create_subscription+0x1b0>
 80160ac:	69f8      	ldr	r0, [r7, #28]
 80160ae:	b108      	cbz	r0, 80160b4 <rmw_create_subscription+0x1a8>
 80160b0:	f7f5 fdd6 	bl	800bc60 <rmw_uxrce_fini_topic_memory>
 80160b4:	4620      	mov	r0, r4
 80160b6:	f7f5 fd91 	bl	800bbdc <rmw_uxrce_fini_subscription_memory>
 80160ba:	2400      	movs	r4, #0
 80160bc:	4620      	mov	r0, r4
 80160be:	b00d      	add	sp, #52	@ 0x34
 80160c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80160c4:	200153b4 	.word	0x200153b4
 80160c8:	0801ad28 	.word	0x0801ad28
 80160cc:	0801aae0 	.word	0x0801aae0

080160d0 <rmw_subscription_get_actual_qos>:
 80160d0:	b150      	cbz	r0, 80160e8 <rmw_subscription_get_actual_qos+0x18>
 80160d2:	b508      	push	{r3, lr}
 80160d4:	460b      	mov	r3, r1
 80160d6:	b149      	cbz	r1, 80160ec <rmw_subscription_get_actual_qos+0x1c>
 80160d8:	6841      	ldr	r1, [r0, #4]
 80160da:	2250      	movs	r2, #80	@ 0x50
 80160dc:	3128      	adds	r1, #40	@ 0x28
 80160de:	4618      	mov	r0, r3
 80160e0:	f003 fa95 	bl	801960e <memcpy>
 80160e4:	2000      	movs	r0, #0
 80160e6:	bd08      	pop	{r3, pc}
 80160e8:	200b      	movs	r0, #11
 80160ea:	4770      	bx	lr
 80160ec:	200b      	movs	r0, #11
 80160ee:	bd08      	pop	{r3, pc}

080160f0 <rmw_destroy_subscription>:
 80160f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80160f2:	b128      	cbz	r0, 8016100 <rmw_destroy_subscription+0x10>
 80160f4:	4604      	mov	r4, r0
 80160f6:	6800      	ldr	r0, [r0, #0]
 80160f8:	460d      	mov	r5, r1
 80160fa:	f7f5 ff33 	bl	800bf64 <is_uxrce_rmw_identifier_valid>
 80160fe:	b910      	cbnz	r0, 8016106 <rmw_destroy_subscription+0x16>
 8016100:	2401      	movs	r4, #1
 8016102:	4620      	mov	r0, r4
 8016104:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016106:	6863      	ldr	r3, [r4, #4]
 8016108:	2b00      	cmp	r3, #0
 801610a:	d0f9      	beq.n	8016100 <rmw_destroy_subscription+0x10>
 801610c:	2d00      	cmp	r5, #0
 801610e:	d0f7      	beq.n	8016100 <rmw_destroy_subscription+0x10>
 8016110:	6828      	ldr	r0, [r5, #0]
 8016112:	f7f5 ff27 	bl	800bf64 <is_uxrce_rmw_identifier_valid>
 8016116:	2800      	cmp	r0, #0
 8016118:	d0f2      	beq.n	8016100 <rmw_destroy_subscription+0x10>
 801611a:	686c      	ldr	r4, [r5, #4]
 801611c:	2c00      	cmp	r4, #0
 801611e:	d0ef      	beq.n	8016100 <rmw_destroy_subscription+0x10>
 8016120:	6a26      	ldr	r6, [r4, #32]
 8016122:	6962      	ldr	r2, [r4, #20]
 8016124:	6930      	ldr	r0, [r6, #16]
 8016126:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801612a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801612e:	6819      	ldr	r1, [r3, #0]
 8016130:	f001 fa0e 	bl	8017550 <uxr_buffer_cancel_data>
 8016134:	4602      	mov	r2, r0
 8016136:	6930      	ldr	r0, [r6, #16]
 8016138:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801613c:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8016140:	f7f5 fe90 	bl	800be64 <run_xrce_session>
 8016144:	69e0      	ldr	r0, [r4, #28]
 8016146:	f7ff fc15 	bl	8015974 <destroy_topic>
 801614a:	6a23      	ldr	r3, [r4, #32]
 801614c:	6962      	ldr	r2, [r4, #20]
 801614e:	6918      	ldr	r0, [r3, #16]
 8016150:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8016154:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016158:	6819      	ldr	r1, [r3, #0]
 801615a:	f7f8 ff75 	bl	800f048 <uxr_buffer_delete_entity>
 801615e:	6a23      	ldr	r3, [r4, #32]
 8016160:	6922      	ldr	r2, [r4, #16]
 8016162:	691b      	ldr	r3, [r3, #16]
 8016164:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 8016168:	4604      	mov	r4, r0
 801616a:	6809      	ldr	r1, [r1, #0]
 801616c:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8016170:	f7f8 ff6a 	bl	800f048 <uxr_buffer_delete_entity>
 8016174:	6937      	ldr	r7, [r6, #16]
 8016176:	4622      	mov	r2, r4
 8016178:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 801617c:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 8016180:	4604      	mov	r4, r0
 8016182:	4638      	mov	r0, r7
 8016184:	f7f5 fe6e 	bl	800be64 <run_xrce_session>
 8016188:	6936      	ldr	r6, [r6, #16]
 801618a:	4622      	mov	r2, r4
 801618c:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 8016190:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 8016194:	4604      	mov	r4, r0
 8016196:	4630      	mov	r0, r6
 8016198:	f7f5 fe64 	bl	800be64 <run_xrce_session>
 801619c:	b12c      	cbz	r4, 80161aa <rmw_destroy_subscription+0xba>
 801619e:	b120      	cbz	r0, 80161aa <rmw_destroy_subscription+0xba>
 80161a0:	2400      	movs	r4, #0
 80161a2:	4628      	mov	r0, r5
 80161a4:	f7f5 fd1a 	bl	800bbdc <rmw_uxrce_fini_subscription_memory>
 80161a8:	e7ab      	b.n	8016102 <rmw_destroy_subscription+0x12>
 80161aa:	2402      	movs	r4, #2
 80161ac:	e7f9      	b.n	80161a2 <rmw_destroy_subscription+0xb2>
 80161ae:	bf00      	nop

080161b0 <rmw_take_with_info>:
 80161b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80161b2:	4604      	mov	r4, r0
 80161b4:	6800      	ldr	r0, [r0, #0]
 80161b6:	b089      	sub	sp, #36	@ 0x24
 80161b8:	460f      	mov	r7, r1
 80161ba:	4615      	mov	r5, r2
 80161bc:	b128      	cbz	r0, 80161ca <rmw_take_with_info+0x1a>
 80161be:	4b24      	ldr	r3, [pc, #144]	@ (8016250 <rmw_take_with_info+0xa0>)
 80161c0:	6819      	ldr	r1, [r3, #0]
 80161c2:	f7ea f825 	bl	8000210 <strcmp>
 80161c6:	2800      	cmp	r0, #0
 80161c8:	d13e      	bne.n	8016248 <rmw_take_with_info+0x98>
 80161ca:	b305      	cbz	r5, 801620e <rmw_take_with_info+0x5e>
 80161cc:	6864      	ldr	r4, [r4, #4]
 80161ce:	2300      	movs	r3, #0
 80161d0:	702b      	strb	r3, [r5, #0]
 80161d2:	f7f5 fdc9 	bl	800bd68 <rmw_uxrce_clean_expired_static_input_buffer>
 80161d6:	4620      	mov	r0, r4
 80161d8:	f7f5 fd9e 	bl	800bd18 <rmw_uxrce_find_static_input_buffer_by_owner>
 80161dc:	4606      	mov	r6, r0
 80161de:	b1f0      	cbz	r0, 801621e <rmw_take_with_info+0x6e>
 80161e0:	6881      	ldr	r1, [r0, #8]
 80161e2:	4668      	mov	r0, sp
 80161e4:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 80161e8:	3110      	adds	r1, #16
 80161ea:	f7f8 fe0d 	bl	800ee08 <ucdr_init_buffer>
 80161ee:	69a3      	ldr	r3, [r4, #24]
 80161f0:	4639      	mov	r1, r7
 80161f2:	68db      	ldr	r3, [r3, #12]
 80161f4:	4668      	mov	r0, sp
 80161f6:	4798      	blx	r3
 80161f8:	4631      	mov	r1, r6
 80161fa:	4604      	mov	r4, r0
 80161fc:	4815      	ldr	r0, [pc, #84]	@ (8016254 <rmw_take_with_info+0xa4>)
 80161fe:	f7ff f8ab 	bl	8015358 <put_memory>
 8016202:	702c      	strb	r4, [r5, #0]
 8016204:	f084 0001 	eor.w	r0, r4, #1
 8016208:	b2c0      	uxtb	r0, r0
 801620a:	b009      	add	sp, #36	@ 0x24
 801620c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801620e:	6864      	ldr	r4, [r4, #4]
 8016210:	f7f5 fdaa 	bl	800bd68 <rmw_uxrce_clean_expired_static_input_buffer>
 8016214:	4620      	mov	r0, r4
 8016216:	f7f5 fd7f 	bl	800bd18 <rmw_uxrce_find_static_input_buffer_by_owner>
 801621a:	4605      	mov	r5, r0
 801621c:	b910      	cbnz	r0, 8016224 <rmw_take_with_info+0x74>
 801621e:	2001      	movs	r0, #1
 8016220:	b009      	add	sp, #36	@ 0x24
 8016222:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016224:	68a9      	ldr	r1, [r5, #8]
 8016226:	4668      	mov	r0, sp
 8016228:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 801622c:	3110      	adds	r1, #16
 801622e:	f7f8 fdeb 	bl	800ee08 <ucdr_init_buffer>
 8016232:	69a3      	ldr	r3, [r4, #24]
 8016234:	4639      	mov	r1, r7
 8016236:	68db      	ldr	r3, [r3, #12]
 8016238:	4668      	mov	r0, sp
 801623a:	4798      	blx	r3
 801623c:	4629      	mov	r1, r5
 801623e:	4604      	mov	r4, r0
 8016240:	4804      	ldr	r0, [pc, #16]	@ (8016254 <rmw_take_with_info+0xa4>)
 8016242:	f7ff f889 	bl	8015358 <put_memory>
 8016246:	e7dd      	b.n	8016204 <rmw_take_with_info+0x54>
 8016248:	200c      	movs	r0, #12
 801624a:	b009      	add	sp, #36	@ 0x24
 801624c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801624e:	bf00      	nop
 8016250:	0801b70c 	.word	0x0801b70c
 8016254:	200153a4 	.word	0x200153a4

08016258 <rmw_uxrce_transport_init>:
 8016258:	b508      	push	{r3, lr}
 801625a:	b108      	cbz	r0, 8016260 <rmw_uxrce_transport_init+0x8>
 801625c:	f100 0210 	add.w	r2, r0, #16
 8016260:	b139      	cbz	r1, 8016272 <rmw_uxrce_transport_init+0x1a>
 8016262:	6949      	ldr	r1, [r1, #20]
 8016264:	4610      	mov	r0, r2
 8016266:	f000 fbb9 	bl	80169dc <uxr_init_custom_transport>
 801626a:	f080 0001 	eor.w	r0, r0, #1
 801626e:	b2c0      	uxtb	r0, r0
 8016270:	bd08      	pop	{r3, pc}
 8016272:	4b04      	ldr	r3, [pc, #16]	@ (8016284 <rmw_uxrce_transport_init+0x2c>)
 8016274:	4610      	mov	r0, r2
 8016276:	6859      	ldr	r1, [r3, #4]
 8016278:	f000 fbb0 	bl	80169dc <uxr_init_custom_transport>
 801627c:	f080 0001 	eor.w	r0, r0, #1
 8016280:	b2c0      	uxtb	r0, r0
 8016282:	bd08      	pop	{r3, pc}
 8016284:	20010a7c 	.word	0x20010a7c

08016288 <rmw_wait>:
 8016288:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801628c:	b089      	sub	sp, #36	@ 0x24
 801628e:	4605      	mov	r5, r0
 8016290:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8016292:	460e      	mov	r6, r1
 8016294:	4698      	mov	r8, r3
 8016296:	4691      	mov	r9, r2
 8016298:	2a00      	cmp	r2, #0
 801629a:	f000 810a 	beq.w	80164b2 <rmw_wait+0x22a>
 801629e:	b16c      	cbz	r4, 80162bc <rmw_wait+0x34>
 80162a0:	4bae      	ldr	r3, [pc, #696]	@ (801655c <rmw_wait+0x2d4>)
 80162a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80162a4:	af04      	add	r7, sp, #16
 80162a6:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 80162aa:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80162ae:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80162b2:	f7fe fe75 	bl	8014fa0 <rmw_time_equal>
 80162b6:	2800      	cmp	r0, #0
 80162b8:	f000 8127 	beq.w	801650a <rmw_wait+0x282>
 80162bc:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80162c0:	f7f5 fd52 	bl	800bd68 <rmw_uxrce_clean_expired_static_input_buffer>
 80162c4:	4ba6      	ldr	r3, [pc, #664]	@ (8016560 <rmw_wait+0x2d8>)
 80162c6:	681c      	ldr	r4, [r3, #0]
 80162c8:	b14c      	cbz	r4, 80162de <rmw_wait+0x56>
 80162ca:	4623      	mov	r3, r4
 80162cc:	2100      	movs	r1, #0
 80162ce:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 80162d2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80162d6:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 80162da:	2b00      	cmp	r3, #0
 80162dc:	d1f7      	bne.n	80162ce <rmw_wait+0x46>
 80162de:	f1b9 0f00 	cmp.w	r9, #0
 80162e2:	d011      	beq.n	8016308 <rmw_wait+0x80>
 80162e4:	f8d9 1000 	ldr.w	r1, [r9]
 80162e8:	b171      	cbz	r1, 8016308 <rmw_wait+0x80>
 80162ea:	f8d9 c004 	ldr.w	ip, [r9, #4]
 80162ee:	2300      	movs	r3, #0
 80162f0:	2001      	movs	r0, #1
 80162f2:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80162f6:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 80162f8:	6912      	ldr	r2, [r2, #16]
 80162fa:	3301      	adds	r3, #1
 80162fc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8016300:	4299      	cmp	r1, r3
 8016302:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8016306:	d1f4      	bne.n	80162f2 <rmw_wait+0x6a>
 8016308:	f1b8 0f00 	cmp.w	r8, #0
 801630c:	d011      	beq.n	8016332 <rmw_wait+0xaa>
 801630e:	f8d8 1000 	ldr.w	r1, [r8]
 8016312:	b171      	cbz	r1, 8016332 <rmw_wait+0xaa>
 8016314:	f8d8 c004 	ldr.w	ip, [r8, #4]
 8016318:	2300      	movs	r3, #0
 801631a:	2001      	movs	r0, #1
 801631c:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8016320:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8016322:	6912      	ldr	r2, [r2, #16]
 8016324:	3301      	adds	r3, #1
 8016326:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801632a:	4299      	cmp	r1, r3
 801632c:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8016330:	d1f4      	bne.n	801631c <rmw_wait+0x94>
 8016332:	b185      	cbz	r5, 8016356 <rmw_wait+0xce>
 8016334:	6829      	ldr	r1, [r5, #0]
 8016336:	b171      	cbz	r1, 8016356 <rmw_wait+0xce>
 8016338:	f8d5 c004 	ldr.w	ip, [r5, #4]
 801633c:	2300      	movs	r3, #0
 801633e:	2001      	movs	r0, #1
 8016340:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8016344:	6a12      	ldr	r2, [r2, #32]
 8016346:	6912      	ldr	r2, [r2, #16]
 8016348:	3301      	adds	r3, #1
 801634a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801634e:	4299      	cmp	r1, r3
 8016350:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8016354:	d1f4      	bne.n	8016340 <rmw_wait+0xb8>
 8016356:	b34c      	cbz	r4, 80163ac <rmw_wait+0x124>
 8016358:	4622      	mov	r2, r4
 801635a:	2300      	movs	r3, #0
 801635c:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 8016360:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 8016364:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 8016368:	440b      	add	r3, r1
 801636a:	b2db      	uxtb	r3, r3
 801636c:	2a00      	cmp	r2, #0
 801636e:	d1f5      	bne.n	801635c <rmw_wait+0xd4>
 8016370:	2b00      	cmp	r3, #0
 8016372:	f000 8084 	beq.w	801647e <rmw_wait+0x1f6>
 8016376:	1c7a      	adds	r2, r7, #1
 8016378:	d00d      	beq.n	8016396 <rmw_wait+0x10e>
 801637a:	ee07 7a90 	vmov	s15, r7
 801637e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8016382:	ee07 3a90 	vmov	s15, r3
 8016386:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801638a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801638e:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8016392:	ee17 7a90 	vmov	r7, s15
 8016396:	68a0      	ldr	r0, [r4, #8]
 8016398:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 801639c:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 80163a0:	2b00      	cmp	r3, #0
 80163a2:	f040 8090 	bne.w	80164c6 <rmw_wait+0x23e>
 80163a6:	6864      	ldr	r4, [r4, #4]
 80163a8:	2c00      	cmp	r4, #0
 80163aa:	d1f4      	bne.n	8016396 <rmw_wait+0x10e>
 80163ac:	f1b9 0f00 	cmp.w	r9, #0
 80163b0:	f000 80bc 	beq.w	801652c <rmw_wait+0x2a4>
 80163b4:	f8d9 7000 	ldr.w	r7, [r9]
 80163b8:	2f00      	cmp	r7, #0
 80163ba:	f000 808e 	beq.w	80164da <rmw_wait+0x252>
 80163be:	2400      	movs	r4, #0
 80163c0:	4627      	mov	r7, r4
 80163c2:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80163c6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80163ca:	f7f5 fca5 	bl	800bd18 <rmw_uxrce_find_static_input_buffer_by_owner>
 80163ce:	2800      	cmp	r0, #0
 80163d0:	d05f      	beq.n	8016492 <rmw_wait+0x20a>
 80163d2:	f8d9 3000 	ldr.w	r3, [r9]
 80163d6:	3401      	adds	r4, #1
 80163d8:	42a3      	cmp	r3, r4
 80163da:	f04f 0701 	mov.w	r7, #1
 80163de:	d8f0      	bhi.n	80163c2 <rmw_wait+0x13a>
 80163e0:	f1b8 0f00 	cmp.w	r8, #0
 80163e4:	d012      	beq.n	801640c <rmw_wait+0x184>
 80163e6:	f8d8 3000 	ldr.w	r3, [r8]
 80163ea:	b17b      	cbz	r3, 801640c <rmw_wait+0x184>
 80163ec:	2400      	movs	r4, #0
 80163ee:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80163f2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80163f6:	f7f5 fc8f 	bl	800bd18 <rmw_uxrce_find_static_input_buffer_by_owner>
 80163fa:	2800      	cmp	r0, #0
 80163fc:	d051      	beq.n	80164a2 <rmw_wait+0x21a>
 80163fe:	f8d8 3000 	ldr.w	r3, [r8]
 8016402:	3401      	adds	r4, #1
 8016404:	42a3      	cmp	r3, r4
 8016406:	f04f 0701 	mov.w	r7, #1
 801640a:	d8f0      	bhi.n	80163ee <rmw_wait+0x166>
 801640c:	b1dd      	cbz	r5, 8016446 <rmw_wait+0x1be>
 801640e:	682b      	ldr	r3, [r5, #0]
 8016410:	b1cb      	cbz	r3, 8016446 <rmw_wait+0x1be>
 8016412:	2400      	movs	r4, #0
 8016414:	686b      	ldr	r3, [r5, #4]
 8016416:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801641a:	f7f5 fc7d 	bl	800bd18 <rmw_uxrce_find_static_input_buffer_by_owner>
 801641e:	b158      	cbz	r0, 8016438 <rmw_wait+0x1b0>
 8016420:	682b      	ldr	r3, [r5, #0]
 8016422:	3401      	adds	r4, #1
 8016424:	42a3      	cmp	r3, r4
 8016426:	d969      	bls.n	80164fc <rmw_wait+0x274>
 8016428:	686b      	ldr	r3, [r5, #4]
 801642a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801642e:	2701      	movs	r7, #1
 8016430:	f7f5 fc72 	bl	800bd18 <rmw_uxrce_find_static_input_buffer_by_owner>
 8016434:	2800      	cmp	r0, #0
 8016436:	d1f3      	bne.n	8016420 <rmw_wait+0x198>
 8016438:	e9d5 3200 	ldrd	r3, r2, [r5]
 801643c:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8016440:	3401      	adds	r4, #1
 8016442:	42a3      	cmp	r3, r4
 8016444:	d8e6      	bhi.n	8016414 <rmw_wait+0x18c>
 8016446:	b1a6      	cbz	r6, 8016472 <rmw_wait+0x1ea>
 8016448:	6834      	ldr	r4, [r6, #0]
 801644a:	b194      	cbz	r4, 8016472 <rmw_wait+0x1ea>
 801644c:	2300      	movs	r3, #0
 801644e:	461d      	mov	r5, r3
 8016450:	e004      	b.n	801645c <rmw_wait+0x1d4>
 8016452:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8016456:	3301      	adds	r3, #1
 8016458:	42a3      	cmp	r3, r4
 801645a:	d00a      	beq.n	8016472 <rmw_wait+0x1ea>
 801645c:	6870      	ldr	r0, [r6, #4]
 801645e:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8016462:	7c0a      	ldrb	r2, [r1, #16]
 8016464:	2a00      	cmp	r2, #0
 8016466:	d0f4      	beq.n	8016452 <rmw_wait+0x1ca>
 8016468:	3301      	adds	r3, #1
 801646a:	42a3      	cmp	r3, r4
 801646c:	740d      	strb	r5, [r1, #16]
 801646e:	4617      	mov	r7, r2
 8016470:	d1f4      	bne.n	801645c <rmw_wait+0x1d4>
 8016472:	2f00      	cmp	r7, #0
 8016474:	d03e      	beq.n	80164f4 <rmw_wait+0x26c>
 8016476:	2000      	movs	r0, #0
 8016478:	b009      	add	sp, #36	@ 0x24
 801647a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801647e:	68a0      	ldr	r0, [r4, #8]
 8016480:	2100      	movs	r1, #0
 8016482:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016486:	f7f9 fcb5 	bl	800fdf4 <uxr_run_session_timeout>
 801648a:	6864      	ldr	r4, [r4, #4]
 801648c:	2c00      	cmp	r4, #0
 801648e:	d1f6      	bne.n	801647e <rmw_wait+0x1f6>
 8016490:	e78c      	b.n	80163ac <rmw_wait+0x124>
 8016492:	e9d9 3200 	ldrd	r3, r2, [r9]
 8016496:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801649a:	3401      	adds	r4, #1
 801649c:	42a3      	cmp	r3, r4
 801649e:	d890      	bhi.n	80163c2 <rmw_wait+0x13a>
 80164a0:	e79e      	b.n	80163e0 <rmw_wait+0x158>
 80164a2:	e9d8 3200 	ldrd	r3, r2, [r8]
 80164a6:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80164aa:	3401      	adds	r4, #1
 80164ac:	429c      	cmp	r4, r3
 80164ae:	d39e      	bcc.n	80163ee <rmw_wait+0x166>
 80164b0:	e7ac      	b.n	801640c <rmw_wait+0x184>
 80164b2:	2b00      	cmp	r3, #0
 80164b4:	f47f aef3 	bne.w	801629e <rmw_wait+0x16>
 80164b8:	2800      	cmp	r0, #0
 80164ba:	f47f aef0 	bne.w	801629e <rmw_wait+0x16>
 80164be:	2900      	cmp	r1, #0
 80164c0:	f47f aeed 	bne.w	801629e <rmw_wait+0x16>
 80164c4:	e7d7      	b.n	8016476 <rmw_wait+0x1ee>
 80164c6:	4639      	mov	r1, r7
 80164c8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80164cc:	f7f9 fcac 	bl	800fe28 <uxr_run_session_until_data>
 80164d0:	6864      	ldr	r4, [r4, #4]
 80164d2:	2c00      	cmp	r4, #0
 80164d4:	f47f af5f 	bne.w	8016396 <rmw_wait+0x10e>
 80164d8:	e768      	b.n	80163ac <rmw_wait+0x124>
 80164da:	f1b8 0f00 	cmp.w	r8, #0
 80164de:	d032      	beq.n	8016546 <rmw_wait+0x2be>
 80164e0:	f8d8 3000 	ldr.w	r3, [r8]
 80164e4:	2b00      	cmp	r3, #0
 80164e6:	d181      	bne.n	80163ec <rmw_wait+0x164>
 80164e8:	461f      	mov	r7, r3
 80164ea:	2d00      	cmp	r5, #0
 80164ec:	d18f      	bne.n	801640e <rmw_wait+0x186>
 80164ee:	462f      	mov	r7, r5
 80164f0:	2e00      	cmp	r6, #0
 80164f2:	d1a9      	bne.n	8016448 <rmw_wait+0x1c0>
 80164f4:	2002      	movs	r0, #2
 80164f6:	b009      	add	sp, #36	@ 0x24
 80164f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80164fc:	2e00      	cmp	r6, #0
 80164fe:	d0ba      	beq.n	8016476 <rmw_wait+0x1ee>
 8016500:	6834      	ldr	r4, [r6, #0]
 8016502:	2701      	movs	r7, #1
 8016504:	2c00      	cmp	r4, #0
 8016506:	d1a1      	bne.n	801644c <rmw_wait+0x1c4>
 8016508:	e7b5      	b.n	8016476 <rmw_wait+0x1ee>
 801650a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801650e:	f7fe fd9b 	bl	8015048 <rmw_time_total_nsec>
 8016512:	2300      	movs	r3, #0
 8016514:	4a13      	ldr	r2, [pc, #76]	@ (8016564 <rmw_wait+0x2dc>)
 8016516:	f7ea fbd1 	bl	8000cbc <__aeabi_uldivmod>
 801651a:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 801651e:	f171 0300 	sbcs.w	r3, r1, #0
 8016522:	4607      	mov	r7, r0
 8016524:	bfa8      	it	ge
 8016526:	f06f 4700 	mvnge.w	r7, #2147483648	@ 0x80000000
 801652a:	e6c9      	b.n	80162c0 <rmw_wait+0x38>
 801652c:	f1b8 0f00 	cmp.w	r8, #0
 8016530:	d009      	beq.n	8016546 <rmw_wait+0x2be>
 8016532:	f8d8 3000 	ldr.w	r3, [r8]
 8016536:	464f      	mov	r7, r9
 8016538:	2b00      	cmp	r3, #0
 801653a:	f47f af57 	bne.w	80163ec <rmw_wait+0x164>
 801653e:	2d00      	cmp	r5, #0
 8016540:	f47f af65 	bne.w	801640e <rmw_wait+0x186>
 8016544:	e7d3      	b.n	80164ee <rmw_wait+0x266>
 8016546:	b17d      	cbz	r5, 8016568 <rmw_wait+0x2e0>
 8016548:	682b      	ldr	r3, [r5, #0]
 801654a:	4647      	mov	r7, r8
 801654c:	2b00      	cmp	r3, #0
 801654e:	f47f af60 	bne.w	8016412 <rmw_wait+0x18a>
 8016552:	2e00      	cmp	r6, #0
 8016554:	f47f af78 	bne.w	8016448 <rmw_wait+0x1c0>
 8016558:	e7cc      	b.n	80164f4 <rmw_wait+0x26c>
 801655a:	bf00      	nop
 801655c:	0801a920 	.word	0x0801a920
 8016560:	20015394 	.word	0x20015394
 8016564:	000f4240 	.word	0x000f4240
 8016568:	2e00      	cmp	r6, #0
 801656a:	d0c3      	beq.n	80164f4 <rmw_wait+0x26c>
 801656c:	6834      	ldr	r4, [r6, #0]
 801656e:	462f      	mov	r7, r5
 8016570:	2c00      	cmp	r4, #0
 8016572:	f47f af6b 	bne.w	801644c <rmw_wait+0x1c4>
 8016576:	e7bd      	b.n	80164f4 <rmw_wait+0x26c>

08016578 <rmw_create_wait_set>:
 8016578:	b508      	push	{r3, lr}
 801657a:	4803      	ldr	r0, [pc, #12]	@ (8016588 <rmw_create_wait_set+0x10>)
 801657c:	f7fe fedc 	bl	8015338 <get_memory>
 8016580:	b108      	cbz	r0, 8016586 <rmw_create_wait_set+0xe>
 8016582:	6880      	ldr	r0, [r0, #8]
 8016584:	3010      	adds	r0, #16
 8016586:	bd08      	pop	{r3, pc}
 8016588:	200153d4 	.word	0x200153d4

0801658c <rmw_destroy_wait_set>:
 801658c:	b508      	push	{r3, lr}
 801658e:	4b08      	ldr	r3, [pc, #32]	@ (80165b0 <rmw_destroy_wait_set+0x24>)
 8016590:	6819      	ldr	r1, [r3, #0]
 8016592:	b911      	cbnz	r1, 801659a <rmw_destroy_wait_set+0xe>
 8016594:	e00a      	b.n	80165ac <rmw_destroy_wait_set+0x20>
 8016596:	6849      	ldr	r1, [r1, #4]
 8016598:	b141      	cbz	r1, 80165ac <rmw_destroy_wait_set+0x20>
 801659a:	688b      	ldr	r3, [r1, #8]
 801659c:	3310      	adds	r3, #16
 801659e:	4298      	cmp	r0, r3
 80165a0:	d1f9      	bne.n	8016596 <rmw_destroy_wait_set+0xa>
 80165a2:	4803      	ldr	r0, [pc, #12]	@ (80165b0 <rmw_destroy_wait_set+0x24>)
 80165a4:	f7fe fed8 	bl	8015358 <put_memory>
 80165a8:	2000      	movs	r0, #0
 80165aa:	bd08      	pop	{r3, pc}
 80165ac:	2001      	movs	r0, #1
 80165ae:	bd08      	pop	{r3, pc}
 80165b0:	200153d4 	.word	0x200153d4

080165b4 <rmw_uros_epoch_nanos>:
 80165b4:	4b05      	ldr	r3, [pc, #20]	@ (80165cc <rmw_uros_epoch_nanos+0x18>)
 80165b6:	681b      	ldr	r3, [r3, #0]
 80165b8:	b123      	cbz	r3, 80165c4 <rmw_uros_epoch_nanos+0x10>
 80165ba:	6898      	ldr	r0, [r3, #8]
 80165bc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80165c0:	f7f9 b888 	b.w	800f6d4 <uxr_epoch_nanos>
 80165c4:	2000      	movs	r0, #0
 80165c6:	2100      	movs	r1, #0
 80165c8:	4770      	bx	lr
 80165ca:	bf00      	nop
 80165cc:	20015394 	.word	0x20015394

080165d0 <rosidl_runtime_c__float__Sequence__init>:
 80165d0:	b530      	push	{r4, r5, lr}
 80165d2:	4604      	mov	r4, r0
 80165d4:	b087      	sub	sp, #28
 80165d6:	b130      	cbz	r0, 80165e6 <rosidl_runtime_c__float__Sequence__init+0x16>
 80165d8:	460d      	mov	r5, r1
 80165da:	b931      	cbnz	r1, 80165ea <rosidl_runtime_c__float__Sequence__init+0x1a>
 80165dc:	4608      	mov	r0, r1
 80165de:	e9c4 0500 	strd	r0, r5, [r4]
 80165e2:	60a5      	str	r5, [r4, #8]
 80165e4:	2001      	movs	r0, #1
 80165e6:	b007      	add	sp, #28
 80165e8:	bd30      	pop	{r4, r5, pc}
 80165ea:	a801      	add	r0, sp, #4
 80165ec:	f7f4 ff06 	bl	800b3fc <rcutils_get_default_allocator>
 80165f0:	9b01      	ldr	r3, [sp, #4]
 80165f2:	9905      	ldr	r1, [sp, #20]
 80165f4:	00a8      	lsls	r0, r5, #2
 80165f6:	4798      	blx	r3
 80165f8:	2800      	cmp	r0, #0
 80165fa:	d1f0      	bne.n	80165de <rosidl_runtime_c__float__Sequence__init+0xe>
 80165fc:	e7f3      	b.n	80165e6 <rosidl_runtime_c__float__Sequence__init+0x16>
 80165fe:	bf00      	nop

08016600 <rosidl_runtime_c__float__Sequence__fini>:
 8016600:	b188      	cbz	r0, 8016626 <rosidl_runtime_c__float__Sequence__fini+0x26>
 8016602:	b510      	push	{r4, lr}
 8016604:	6803      	ldr	r3, [r0, #0]
 8016606:	b086      	sub	sp, #24
 8016608:	4604      	mov	r4, r0
 801660a:	b153      	cbz	r3, 8016622 <rosidl_runtime_c__float__Sequence__fini+0x22>
 801660c:	a801      	add	r0, sp, #4
 801660e:	f7f4 fef5 	bl	800b3fc <rcutils_get_default_allocator>
 8016612:	9b02      	ldr	r3, [sp, #8]
 8016614:	9905      	ldr	r1, [sp, #20]
 8016616:	6820      	ldr	r0, [r4, #0]
 8016618:	4798      	blx	r3
 801661a:	2300      	movs	r3, #0
 801661c:	e9c4 3300 	strd	r3, r3, [r4]
 8016620:	60a3      	str	r3, [r4, #8]
 8016622:	b006      	add	sp, #24
 8016624:	bd10      	pop	{r4, pc}
 8016626:	4770      	bx	lr

08016628 <rosidl_runtime_c__int32__Sequence__init>:
 8016628:	b530      	push	{r4, r5, lr}
 801662a:	4604      	mov	r4, r0
 801662c:	b087      	sub	sp, #28
 801662e:	b130      	cbz	r0, 801663e <rosidl_runtime_c__int32__Sequence__init+0x16>
 8016630:	460d      	mov	r5, r1
 8016632:	b931      	cbnz	r1, 8016642 <rosidl_runtime_c__int32__Sequence__init+0x1a>
 8016634:	4608      	mov	r0, r1
 8016636:	e9c4 0500 	strd	r0, r5, [r4]
 801663a:	60a5      	str	r5, [r4, #8]
 801663c:	2001      	movs	r0, #1
 801663e:	b007      	add	sp, #28
 8016640:	bd30      	pop	{r4, r5, pc}
 8016642:	a801      	add	r0, sp, #4
 8016644:	f7f4 feda 	bl	800b3fc <rcutils_get_default_allocator>
 8016648:	9b01      	ldr	r3, [sp, #4]
 801664a:	9905      	ldr	r1, [sp, #20]
 801664c:	00a8      	lsls	r0, r5, #2
 801664e:	4798      	blx	r3
 8016650:	2800      	cmp	r0, #0
 8016652:	d1f0      	bne.n	8016636 <rosidl_runtime_c__int32__Sequence__init+0xe>
 8016654:	e7f3      	b.n	801663e <rosidl_runtime_c__int32__Sequence__init+0x16>
 8016656:	bf00      	nop

08016658 <rosidl_runtime_c__int32__Sequence__fini>:
 8016658:	b188      	cbz	r0, 801667e <rosidl_runtime_c__int32__Sequence__fini+0x26>
 801665a:	b510      	push	{r4, lr}
 801665c:	6803      	ldr	r3, [r0, #0]
 801665e:	b086      	sub	sp, #24
 8016660:	4604      	mov	r4, r0
 8016662:	b153      	cbz	r3, 801667a <rosidl_runtime_c__int32__Sequence__fini+0x22>
 8016664:	a801      	add	r0, sp, #4
 8016666:	f7f4 fec9 	bl	800b3fc <rcutils_get_default_allocator>
 801666a:	9b02      	ldr	r3, [sp, #8]
 801666c:	9905      	ldr	r1, [sp, #20]
 801666e:	6820      	ldr	r0, [r4, #0]
 8016670:	4798      	blx	r3
 8016672:	2300      	movs	r3, #0
 8016674:	e9c4 3300 	strd	r3, r3, [r4]
 8016678:	60a3      	str	r3, [r4, #8]
 801667a:	b006      	add	sp, #24
 801667c:	bd10      	pop	{r4, pc}
 801667e:	4770      	bx	lr

08016680 <sensor_msgs__msg__Imu__init>:
 8016680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016684:	4605      	mov	r5, r0
 8016686:	b3c0      	cbz	r0, 80166fa <sensor_msgs__msg__Imu__init+0x7a>
 8016688:	f000 f8b4 	bl	80167f4 <std_msgs__msg__Header__init>
 801668c:	4604      	mov	r4, r0
 801668e:	b310      	cbz	r0, 80166d6 <sensor_msgs__msg__Imu__init+0x56>
 8016690:	f105 0618 	add.w	r6, r5, #24
 8016694:	4630      	mov	r0, r6
 8016696:	f000 f8e3 	bl	8016860 <geometry_msgs__msg__Quaternion__init>
 801669a:	4604      	mov	r4, r0
 801669c:	2800      	cmp	r0, #0
 801669e:	d040      	beq.n	8016722 <sensor_msgs__msg__Imu__init+0xa2>
 80166a0:	f105 0780 	add.w	r7, r5, #128	@ 0x80
 80166a4:	4638      	mov	r0, r7
 80166a6:	f000 f8f1 	bl	801688c <geometry_msgs__msg__Vector3__init>
 80166aa:	4604      	mov	r4, r0
 80166ac:	b348      	cbz	r0, 8016702 <sensor_msgs__msg__Imu__init+0x82>
 80166ae:	f105 08e0 	add.w	r8, r5, #224	@ 0xe0
 80166b2:	4640      	mov	r0, r8
 80166b4:	f000 f8ea 	bl	801688c <geometry_msgs__msg__Vector3__init>
 80166b8:	4604      	mov	r4, r0
 80166ba:	b9d8      	cbnz	r0, 80166f4 <sensor_msgs__msg__Imu__init+0x74>
 80166bc:	4628      	mov	r0, r5
 80166be:	f000 f8bd 	bl	801683c <std_msgs__msg__Header__fini>
 80166c2:	4630      	mov	r0, r6
 80166c4:	f000 f8e0 	bl	8016888 <geometry_msgs__msg__Quaternion__fini>
 80166c8:	4638      	mov	r0, r7
 80166ca:	f000 f8e3 	bl	8016894 <geometry_msgs__msg__Vector3__fini>
 80166ce:	4640      	mov	r0, r8
 80166d0:	f000 f8e0 	bl	8016894 <geometry_msgs__msg__Vector3__fini>
 80166d4:	e00e      	b.n	80166f4 <sensor_msgs__msg__Imu__init+0x74>
 80166d6:	4628      	mov	r0, r5
 80166d8:	f000 f8b0 	bl	801683c <std_msgs__msg__Header__fini>
 80166dc:	f105 0018 	add.w	r0, r5, #24
 80166e0:	f000 f8d2 	bl	8016888 <geometry_msgs__msg__Quaternion__fini>
 80166e4:	f105 0080 	add.w	r0, r5, #128	@ 0x80
 80166e8:	f000 f8d4 	bl	8016894 <geometry_msgs__msg__Vector3__fini>
 80166ec:	f105 00e0 	add.w	r0, r5, #224	@ 0xe0
 80166f0:	f000 f8d0 	bl	8016894 <geometry_msgs__msg__Vector3__fini>
 80166f4:	4620      	mov	r0, r4
 80166f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80166fa:	4604      	mov	r4, r0
 80166fc:	4620      	mov	r0, r4
 80166fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016702:	4628      	mov	r0, r5
 8016704:	f000 f89a 	bl	801683c <std_msgs__msg__Header__fini>
 8016708:	4630      	mov	r0, r6
 801670a:	f000 f8bd 	bl	8016888 <geometry_msgs__msg__Quaternion__fini>
 801670e:	4638      	mov	r0, r7
 8016710:	f000 f8c0 	bl	8016894 <geometry_msgs__msg__Vector3__fini>
 8016714:	f105 00e0 	add.w	r0, r5, #224	@ 0xe0
 8016718:	f000 f8bc 	bl	8016894 <geometry_msgs__msg__Vector3__fini>
 801671c:	4620      	mov	r0, r4
 801671e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016722:	4628      	mov	r0, r5
 8016724:	f000 f88a 	bl	801683c <std_msgs__msg__Header__fini>
 8016728:	4630      	mov	r0, r6
 801672a:	e7d9      	b.n	80166e0 <sensor_msgs__msg__Imu__init+0x60>

0801672c <sensor_msgs__msg__Imu__fini>:
 801672c:	b188      	cbz	r0, 8016752 <sensor_msgs__msg__Imu__fini+0x26>
 801672e:	b510      	push	{r4, lr}
 8016730:	4604      	mov	r4, r0
 8016732:	f000 f883 	bl	801683c <std_msgs__msg__Header__fini>
 8016736:	f104 0018 	add.w	r0, r4, #24
 801673a:	f000 f8a5 	bl	8016888 <geometry_msgs__msg__Quaternion__fini>
 801673e:	f104 0080 	add.w	r0, r4, #128	@ 0x80
 8016742:	f000 f8a7 	bl	8016894 <geometry_msgs__msg__Vector3__fini>
 8016746:	f104 00e0 	add.w	r0, r4, #224	@ 0xe0
 801674a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801674e:	f000 b8a1 	b.w	8016894 <geometry_msgs__msg__Vector3__fini>
 8016752:	4770      	bx	lr

08016754 <sensor_msgs__msg__Joy__init>:
 8016754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016756:	4605      	mov	r5, r0
 8016758:	b310      	cbz	r0, 80167a0 <sensor_msgs__msg__Joy__init+0x4c>
 801675a:	f000 f84b 	bl	80167f4 <std_msgs__msg__Header__init>
 801675e:	4604      	mov	r4, r0
 8016760:	b188      	cbz	r0, 8016786 <sensor_msgs__msg__Joy__init+0x32>
 8016762:	f105 0614 	add.w	r6, r5, #20
 8016766:	2100      	movs	r1, #0
 8016768:	4630      	mov	r0, r6
 801676a:	f7ff ff31 	bl	80165d0 <rosidl_runtime_c__float__Sequence__init>
 801676e:	4604      	mov	r4, r0
 8016770:	b1c8      	cbz	r0, 80167a6 <sensor_msgs__msg__Joy__init+0x52>
 8016772:	f105 0720 	add.w	r7, r5, #32
 8016776:	2100      	movs	r1, #0
 8016778:	4638      	mov	r0, r7
 801677a:	f7ff ff55 	bl	8016628 <rosidl_runtime_c__int32__Sequence__init>
 801677e:	4604      	mov	r4, r0
 8016780:	b1e8      	cbz	r0, 80167be <sensor_msgs__msg__Joy__init+0x6a>
 8016782:	4620      	mov	r0, r4
 8016784:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016786:	4628      	mov	r0, r5
 8016788:	f000 f858 	bl	801683c <std_msgs__msg__Header__fini>
 801678c:	f105 0014 	add.w	r0, r5, #20
 8016790:	f7ff ff36 	bl	8016600 <rosidl_runtime_c__float__Sequence__fini>
 8016794:	f105 0020 	add.w	r0, r5, #32
 8016798:	f7ff ff5e 	bl	8016658 <rosidl_runtime_c__int32__Sequence__fini>
 801679c:	4620      	mov	r0, r4
 801679e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80167a0:	4604      	mov	r4, r0
 80167a2:	4620      	mov	r0, r4
 80167a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80167a6:	4628      	mov	r0, r5
 80167a8:	f000 f848 	bl	801683c <std_msgs__msg__Header__fini>
 80167ac:	4630      	mov	r0, r6
 80167ae:	f7ff ff27 	bl	8016600 <rosidl_runtime_c__float__Sequence__fini>
 80167b2:	f105 0020 	add.w	r0, r5, #32
 80167b6:	f7ff ff4f 	bl	8016658 <rosidl_runtime_c__int32__Sequence__fini>
 80167ba:	4620      	mov	r0, r4
 80167bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80167be:	4628      	mov	r0, r5
 80167c0:	f000 f83c 	bl	801683c <std_msgs__msg__Header__fini>
 80167c4:	4630      	mov	r0, r6
 80167c6:	f7ff ff1b 	bl	8016600 <rosidl_runtime_c__float__Sequence__fini>
 80167ca:	4638      	mov	r0, r7
 80167cc:	f7ff ff44 	bl	8016658 <rosidl_runtime_c__int32__Sequence__fini>
 80167d0:	e7d7      	b.n	8016782 <sensor_msgs__msg__Joy__init+0x2e>
 80167d2:	bf00      	nop

080167d4 <sensor_msgs__msg__Joy__fini>:
 80167d4:	b168      	cbz	r0, 80167f2 <sensor_msgs__msg__Joy__fini+0x1e>
 80167d6:	b510      	push	{r4, lr}
 80167d8:	4604      	mov	r4, r0
 80167da:	f000 f82f 	bl	801683c <std_msgs__msg__Header__fini>
 80167de:	f104 0014 	add.w	r0, r4, #20
 80167e2:	f7ff ff0d 	bl	8016600 <rosidl_runtime_c__float__Sequence__fini>
 80167e6:	f104 0020 	add.w	r0, r4, #32
 80167ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80167ee:	f7ff bf33 	b.w	8016658 <rosidl_runtime_c__int32__Sequence__fini>
 80167f2:	4770      	bx	lr

080167f4 <std_msgs__msg__Header__init>:
 80167f4:	b570      	push	{r4, r5, r6, lr}
 80167f6:	4605      	mov	r5, r0
 80167f8:	b1a8      	cbz	r0, 8016826 <std_msgs__msg__Header__init+0x32>
 80167fa:	f000 f82b 	bl	8016854 <builtin_interfaces__msg__Time__init>
 80167fe:	4604      	mov	r4, r0
 8016800:	b140      	cbz	r0, 8016814 <std_msgs__msg__Header__init+0x20>
 8016802:	f105 0608 	add.w	r6, r5, #8
 8016806:	4630      	mov	r0, r6
 8016808:	f002 f89e 	bl	8018948 <rosidl_runtime_c__String__init>
 801680c:	4604      	mov	r4, r0
 801680e:	b168      	cbz	r0, 801682c <std_msgs__msg__Header__init+0x38>
 8016810:	4620      	mov	r0, r4
 8016812:	bd70      	pop	{r4, r5, r6, pc}
 8016814:	4628      	mov	r0, r5
 8016816:	f000 f821 	bl	801685c <builtin_interfaces__msg__Time__fini>
 801681a:	f105 0008 	add.w	r0, r5, #8
 801681e:	f002 f8a9 	bl	8018974 <rosidl_runtime_c__String__fini>
 8016822:	4620      	mov	r0, r4
 8016824:	bd70      	pop	{r4, r5, r6, pc}
 8016826:	4604      	mov	r4, r0
 8016828:	4620      	mov	r0, r4
 801682a:	bd70      	pop	{r4, r5, r6, pc}
 801682c:	4628      	mov	r0, r5
 801682e:	f000 f815 	bl	801685c <builtin_interfaces__msg__Time__fini>
 8016832:	4630      	mov	r0, r6
 8016834:	f002 f89e 	bl	8018974 <rosidl_runtime_c__String__fini>
 8016838:	e7ea      	b.n	8016810 <std_msgs__msg__Header__init+0x1c>
 801683a:	bf00      	nop

0801683c <std_msgs__msg__Header__fini>:
 801683c:	b148      	cbz	r0, 8016852 <std_msgs__msg__Header__fini+0x16>
 801683e:	b510      	push	{r4, lr}
 8016840:	4604      	mov	r4, r0
 8016842:	f000 f80b 	bl	801685c <builtin_interfaces__msg__Time__fini>
 8016846:	f104 0008 	add.w	r0, r4, #8
 801684a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801684e:	f002 b891 	b.w	8018974 <rosidl_runtime_c__String__fini>
 8016852:	4770      	bx	lr

08016854 <builtin_interfaces__msg__Time__init>:
 8016854:	3800      	subs	r0, #0
 8016856:	bf18      	it	ne
 8016858:	2001      	movne	r0, #1
 801685a:	4770      	bx	lr

0801685c <builtin_interfaces__msg__Time__fini>:
 801685c:	4770      	bx	lr
 801685e:	bf00      	nop

08016860 <geometry_msgs__msg__Quaternion__init>:
 8016860:	b160      	cbz	r0, 801687c <geometry_msgs__msg__Quaternion__init+0x1c>
 8016862:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 8016880 <geometry_msgs__msg__Quaternion__init+0x20>
 8016866:	2200      	movs	r2, #0
 8016868:	2300      	movs	r3, #0
 801686a:	e9c0 2300 	strd	r2, r3, [r0]
 801686e:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8016872:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8016876:	ed80 7b06 	vstr	d7, [r0, #24]
 801687a:	2001      	movs	r0, #1
 801687c:	4770      	bx	lr
 801687e:	bf00      	nop
 8016880:	00000000 	.word	0x00000000
 8016884:	3ff00000 	.word	0x3ff00000

08016888 <geometry_msgs__msg__Quaternion__fini>:
 8016888:	4770      	bx	lr
 801688a:	bf00      	nop

0801688c <geometry_msgs__msg__Vector3__init>:
 801688c:	3800      	subs	r0, #0
 801688e:	bf18      	it	ne
 8016890:	2001      	movne	r0, #1
 8016892:	4770      	bx	lr

08016894 <geometry_msgs__msg__Vector3__fini>:
 8016894:	4770      	bx	lr
 8016896:	bf00      	nop

08016898 <ucdr_serialize_string>:
 8016898:	b510      	push	{r4, lr}
 801689a:	b082      	sub	sp, #8
 801689c:	4604      	mov	r4, r0
 801689e:	4608      	mov	r0, r1
 80168a0:	9101      	str	r1, [sp, #4]
 80168a2:	f7e9 fcad 	bl	8000200 <strlen>
 80168a6:	9901      	ldr	r1, [sp, #4]
 80168a8:	1c42      	adds	r2, r0, #1
 80168aa:	4620      	mov	r0, r4
 80168ac:	b002      	add	sp, #8
 80168ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80168b2:	f7f8 bb19 	b.w	800eee8 <ucdr_serialize_sequence_char>
 80168b6:	bf00      	nop

080168b8 <ucdr_deserialize_string>:
 80168b8:	b500      	push	{lr}
 80168ba:	b083      	sub	sp, #12
 80168bc:	ab01      	add	r3, sp, #4
 80168be:	f7f8 fb25 	bl	800ef0c <ucdr_deserialize_sequence_char>
 80168c2:	b003      	add	sp, #12
 80168c4:	f85d fb04 	ldr.w	pc, [sp], #4

080168c8 <get_custom_error>:
 80168c8:	4b01      	ldr	r3, [pc, #4]	@ (80168d0 <get_custom_error+0x8>)
 80168ca:	7818      	ldrb	r0, [r3, #0]
 80168cc:	4770      	bx	lr
 80168ce:	bf00      	nop
 80168d0:	20015550 	.word	0x20015550

080168d4 <recv_custom_msg>:
 80168d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80168d8:	4693      	mov	fp, r2
 80168da:	b089      	sub	sp, #36	@ 0x24
 80168dc:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 80168e0:	9305      	str	r3, [sp, #20]
 80168e2:	468a      	mov	sl, r1
 80168e4:	2100      	movs	r1, #0
 80168e6:	4604      	mov	r4, r0
 80168e8:	f88d 101e 	strb.w	r1, [sp, #30]
 80168ec:	b322      	cbz	r2, 8016938 <recv_custom_msg+0x64>
 80168ee:	f200 2902 	addw	r9, r0, #514	@ 0x202
 80168f2:	f10d 081f 	add.w	r8, sp, #31
 80168f6:	af05      	add	r7, sp, #20
 80168f8:	f10d 061e 	add.w	r6, sp, #30
 80168fc:	f44f 7500 	mov.w	r5, #512	@ 0x200
 8016900:	e002      	b.n	8016908 <recv_custom_msg+0x34>
 8016902:	9b05      	ldr	r3, [sp, #20]
 8016904:	2b00      	cmp	r3, #0
 8016906:	dd0f      	ble.n	8016928 <recv_custom_msg+0x54>
 8016908:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 801690c:	4623      	mov	r3, r4
 801690e:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8016912:	e9cd 5600 	strd	r5, r6, [sp]
 8016916:	4622      	mov	r2, r4
 8016918:	4648      	mov	r0, r9
 801691a:	f001 f92d 	bl	8017b78 <uxr_read_framed_msg>
 801691e:	2800      	cmp	r0, #0
 8016920:	d0ef      	beq.n	8016902 <recv_custom_msg+0x2e>
 8016922:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8016926:	b1b3      	cbz	r3, 8016956 <recv_custom_msg+0x82>
 8016928:	4b0f      	ldr	r3, [pc, #60]	@ (8016968 <recv_custom_msg+0x94>)
 801692a:	f89d 201f 	ldrb.w	r2, [sp, #31]
 801692e:	701a      	strb	r2, [r3, #0]
 8016930:	2000      	movs	r0, #0
 8016932:	b009      	add	sp, #36	@ 0x24
 8016934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016938:	f10d 021f 	add.w	r2, sp, #31
 801693c:	9200      	str	r2, [sp, #0]
 801693e:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 8016942:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8016946:	4601      	mov	r1, r0
 8016948:	47a8      	blx	r5
 801694a:	2800      	cmp	r0, #0
 801694c:	d0ec      	beq.n	8016928 <recv_custom_msg+0x54>
 801694e:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8016952:	2b00      	cmp	r3, #0
 8016954:	d1e8      	bne.n	8016928 <recv_custom_msg+0x54>
 8016956:	f8cb 0000 	str.w	r0, [fp]
 801695a:	2001      	movs	r0, #1
 801695c:	f8ca 4000 	str.w	r4, [sl]
 8016960:	b009      	add	sp, #36	@ 0x24
 8016962:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016966:	bf00      	nop
 8016968:	20015550 	.word	0x20015550

0801696c <send_custom_msg>:
 801696c:	b530      	push	{r4, r5, lr}
 801696e:	f890 4200 	ldrb.w	r4, [r0, #512]	@ 0x200
 8016972:	b087      	sub	sp, #28
 8016974:	4615      	mov	r5, r2
 8016976:	b974      	cbnz	r4, 8016996 <send_custom_msg+0x2a>
 8016978:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 801697c:	f10d 0317 	add.w	r3, sp, #23
 8016980:	47a0      	blx	r4
 8016982:	b108      	cbz	r0, 8016988 <send_custom_msg+0x1c>
 8016984:	42a8      	cmp	r0, r5
 8016986:	d015      	beq.n	80169b4 <send_custom_msg+0x48>
 8016988:	4b0c      	ldr	r3, [pc, #48]	@ (80169bc <send_custom_msg+0x50>)
 801698a:	f89d 2017 	ldrb.w	r2, [sp, #23]
 801698e:	701a      	strb	r2, [r3, #0]
 8016990:	2000      	movs	r0, #0
 8016992:	b007      	add	sp, #28
 8016994:	bd30      	pop	{r4, r5, pc}
 8016996:	460b      	mov	r3, r1
 8016998:	2200      	movs	r2, #0
 801699a:	f10d 0117 	add.w	r1, sp, #23
 801699e:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80169a2:	4602      	mov	r2, r0
 80169a4:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 80169a8:	9500      	str	r5, [sp, #0]
 80169aa:	f200 2002 	addw	r0, r0, #514	@ 0x202
 80169ae:	f000 feeb 	bl	8017788 <uxr_write_framed_msg>
 80169b2:	e7e6      	b.n	8016982 <send_custom_msg+0x16>
 80169b4:	2001      	movs	r0, #1
 80169b6:	b007      	add	sp, #28
 80169b8:	bd30      	pop	{r4, r5, pc}
 80169ba:	bf00      	nop
 80169bc:	20015550 	.word	0x20015550

080169c0 <uxr_set_custom_transport_callbacks>:
 80169c0:	b410      	push	{r4}
 80169c2:	9c01      	ldr	r4, [sp, #4]
 80169c4:	f8c0 4270 	str.w	r4, [r0, #624]	@ 0x270
 80169c8:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 80169cc:	9b02      	ldr	r3, [sp, #8]
 80169ce:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 80169d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80169d6:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
 80169da:	4770      	bx	lr

080169dc <uxr_init_custom_transport>:
 80169dc:	b538      	push	{r3, r4, r5, lr}
 80169de:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 80169e2:	b303      	cbz	r3, 8016a26 <uxr_init_custom_transport+0x4a>
 80169e4:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 80169e8:	4604      	mov	r4, r0
 80169ea:	b1e2      	cbz	r2, 8016a26 <uxr_init_custom_transport+0x4a>
 80169ec:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 80169f0:	b1ca      	cbz	r2, 8016a26 <uxr_init_custom_transport+0x4a>
 80169f2:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 80169f6:	b1b2      	cbz	r2, 8016a26 <uxr_init_custom_transport+0x4a>
 80169f8:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 80169fc:	4798      	blx	r3
 80169fe:	4605      	mov	r5, r0
 8016a00:	b188      	cbz	r0, 8016a26 <uxr_init_custom_transport+0x4a>
 8016a02:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 8016a06:	b98b      	cbnz	r3, 8016a2c <uxr_init_custom_transport+0x50>
 8016a08:	490b      	ldr	r1, [pc, #44]	@ (8016a38 <uxr_init_custom_transport+0x5c>)
 8016a0a:	4b0c      	ldr	r3, [pc, #48]	@ (8016a3c <uxr_init_custom_transport+0x60>)
 8016a0c:	4a0c      	ldr	r2, [pc, #48]	@ (8016a40 <uxr_init_custom_transport+0x64>)
 8016a0e:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 8016a12:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8016a16:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 8016a1a:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 8016a1e:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 8016a22:	4628      	mov	r0, r5
 8016a24:	bd38      	pop	{r3, r4, r5, pc}
 8016a26:	2500      	movs	r5, #0
 8016a28:	4628      	mov	r0, r5
 8016a2a:	bd38      	pop	{r3, r4, r5, pc}
 8016a2c:	2100      	movs	r1, #0
 8016a2e:	f204 2002 	addw	r0, r4, #514	@ 0x202
 8016a32:	f000 fea3 	bl	801777c <uxr_init_framing_io>
 8016a36:	e7e7      	b.n	8016a08 <uxr_init_custom_transport+0x2c>
 8016a38:	0801696d 	.word	0x0801696d
 8016a3c:	080168d5 	.word	0x080168d5
 8016a40:	080168c9 	.word	0x080168c9

08016a44 <uxr_close_custom_transport>:
 8016a44:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 8016a48:	4718      	bx	r3
 8016a4a:	bf00      	nop

08016a4c <uxr_init_input_best_effort_stream>:
 8016a4c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016a50:	8003      	strh	r3, [r0, #0]
 8016a52:	4770      	bx	lr

08016a54 <uxr_reset_input_best_effort_stream>:
 8016a54:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016a58:	8003      	strh	r3, [r0, #0]
 8016a5a:	4770      	bx	lr

08016a5c <uxr_receive_best_effort_message>:
 8016a5c:	b538      	push	{r3, r4, r5, lr}
 8016a5e:	4604      	mov	r4, r0
 8016a60:	8800      	ldrh	r0, [r0, #0]
 8016a62:	460d      	mov	r5, r1
 8016a64:	f000 fe72 	bl	801774c <uxr_seq_num_cmp>
 8016a68:	4603      	mov	r3, r0
 8016a6a:	2b00      	cmp	r3, #0
 8016a6c:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 8016a70:	bfb8      	it	lt
 8016a72:	8025      	strhlt	r5, [r4, #0]
 8016a74:	bd38      	pop	{r3, r4, r5, pc}
 8016a76:	bf00      	nop

08016a78 <on_full_input_buffer>:
 8016a78:	b570      	push	{r4, r5, r6, lr}
 8016a7a:	4605      	mov	r5, r0
 8016a7c:	460c      	mov	r4, r1
 8016a7e:	682b      	ldr	r3, [r5, #0]
 8016a80:	6809      	ldr	r1, [r1, #0]
 8016a82:	8920      	ldrh	r0, [r4, #8]
 8016a84:	6862      	ldr	r2, [r4, #4]
 8016a86:	fbb2 f2f0 	udiv	r2, r2, r0
 8016a8a:	eba3 0c01 	sub.w	ip, r3, r1
 8016a8e:	fbbc fcf2 	udiv	ip, ip, r2
 8016a92:	f10c 0c01 	add.w	ip, ip, #1
 8016a96:	fa1f f38c 	uxth.w	r3, ip
 8016a9a:	fbb3 f6f0 	udiv	r6, r3, r0
 8016a9e:	fb00 3316 	mls	r3, r0, r6, r3
 8016aa2:	b29b      	uxth	r3, r3
 8016aa4:	fb02 f303 	mul.w	r3, r2, r3
 8016aa8:	1d18      	adds	r0, r3, #4
 8016aaa:	4408      	add	r0, r1
 8016aac:	7d26      	ldrb	r6, [r4, #20]
 8016aae:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8016ab2:	b116      	cbz	r6, 8016aba <on_full_input_buffer+0x42>
 8016ab4:	2600      	movs	r6, #0
 8016ab6:	f840 6c04 	str.w	r6, [r0, #-4]
 8016aba:	2a03      	cmp	r2, #3
 8016abc:	d801      	bhi.n	8016ac2 <on_full_input_buffer+0x4a>
 8016abe:	2001      	movs	r0, #1
 8016ac0:	bd70      	pop	{r4, r5, r6, pc}
 8016ac2:	3308      	adds	r3, #8
 8016ac4:	4419      	add	r1, r3
 8016ac6:	4628      	mov	r0, r5
 8016ac8:	692b      	ldr	r3, [r5, #16]
 8016aca:	3a04      	subs	r2, #4
 8016acc:	f7f8 f994 	bl	800edf8 <ucdr_init_buffer_origin>
 8016ad0:	4628      	mov	r0, r5
 8016ad2:	4903      	ldr	r1, [pc, #12]	@ (8016ae0 <on_full_input_buffer+0x68>)
 8016ad4:	4622      	mov	r2, r4
 8016ad6:	f7f8 f96b 	bl	800edb0 <ucdr_set_on_full_buffer_callback>
 8016ada:	2000      	movs	r0, #0
 8016adc:	bd70      	pop	{r4, r5, r6, pc}
 8016ade:	bf00      	nop
 8016ae0:	08016a79 	.word	0x08016a79

08016ae4 <uxr_init_input_reliable_stream>:
 8016ae4:	b500      	push	{lr}
 8016ae6:	e9c0 1200 	strd	r1, r2, [r0]
 8016aea:	f04f 0e00 	mov.w	lr, #0
 8016aee:	9a01      	ldr	r2, [sp, #4]
 8016af0:	8103      	strh	r3, [r0, #8]
 8016af2:	6102      	str	r2, [r0, #16]
 8016af4:	f880 e014 	strb.w	lr, [r0, #20]
 8016af8:	b1d3      	cbz	r3, 8016b30 <uxr_init_input_reliable_stream+0x4c>
 8016afa:	f8c1 e000 	str.w	lr, [r1]
 8016afe:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8016b02:	f1bc 0f01 	cmp.w	ip, #1
 8016b06:	d913      	bls.n	8016b30 <uxr_init_input_reliable_stream+0x4c>
 8016b08:	2301      	movs	r3, #1
 8016b0a:	fbb3 f1fc 	udiv	r1, r3, ip
 8016b0e:	fb0c 3111 	mls	r1, ip, r1, r3
 8016b12:	b289      	uxth	r1, r1
 8016b14:	6842      	ldr	r2, [r0, #4]
 8016b16:	fbb2 f2fc 	udiv	r2, r2, ip
 8016b1a:	fb01 f202 	mul.w	r2, r1, r2
 8016b1e:	6801      	ldr	r1, [r0, #0]
 8016b20:	f841 e002 	str.w	lr, [r1, r2]
 8016b24:	3301      	adds	r3, #1
 8016b26:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8016b2a:	b29b      	uxth	r3, r3
 8016b2c:	459c      	cmp	ip, r3
 8016b2e:	d8ec      	bhi.n	8016b0a <uxr_init_input_reliable_stream+0x26>
 8016b30:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8016b34:	60c3      	str	r3, [r0, #12]
 8016b36:	f85d fb04 	ldr.w	pc, [sp], #4
 8016b3a:	bf00      	nop

08016b3c <uxr_reset_input_reliable_stream>:
 8016b3c:	8901      	ldrh	r1, [r0, #8]
 8016b3e:	b1e9      	cbz	r1, 8016b7c <uxr_reset_input_reliable_stream+0x40>
 8016b40:	f04f 0c00 	mov.w	ip, #0
 8016b44:	b500      	push	{lr}
 8016b46:	4663      	mov	r3, ip
 8016b48:	46e6      	mov	lr, ip
 8016b4a:	fbb3 f2f1 	udiv	r2, r3, r1
 8016b4e:	fb01 3312 	mls	r3, r1, r2, r3
 8016b52:	b29b      	uxth	r3, r3
 8016b54:	6842      	ldr	r2, [r0, #4]
 8016b56:	fbb2 f2f1 	udiv	r2, r2, r1
 8016b5a:	fb02 f303 	mul.w	r3, r2, r3
 8016b5e:	6802      	ldr	r2, [r0, #0]
 8016b60:	f842 e003 	str.w	lr, [r2, r3]
 8016b64:	f10c 0c01 	add.w	ip, ip, #1
 8016b68:	8901      	ldrh	r1, [r0, #8]
 8016b6a:	fa1f f38c 	uxth.w	r3, ip
 8016b6e:	4299      	cmp	r1, r3
 8016b70:	d8eb      	bhi.n	8016b4a <uxr_reset_input_reliable_stream+0xe>
 8016b72:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8016b76:	60c3      	str	r3, [r0, #12]
 8016b78:	f85d fb04 	ldr.w	pc, [sp], #4
 8016b7c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8016b80:	60c3      	str	r3, [r0, #12]
 8016b82:	4770      	bx	lr

08016b84 <uxr_receive_reliable_message>:
 8016b84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016b88:	4604      	mov	r4, r0
 8016b8a:	460d      	mov	r5, r1
 8016b8c:	8901      	ldrh	r1, [r0, #8]
 8016b8e:	8980      	ldrh	r0, [r0, #12]
 8016b90:	4690      	mov	r8, r2
 8016b92:	461f      	mov	r7, r3
 8016b94:	f000 fdd2 	bl	801773c <uxr_seq_num_add>
 8016b98:	4629      	mov	r1, r5
 8016b9a:	4606      	mov	r6, r0
 8016b9c:	89a0      	ldrh	r0, [r4, #12]
 8016b9e:	f000 fdd5 	bl	801774c <uxr_seq_num_cmp>
 8016ba2:	2800      	cmp	r0, #0
 8016ba4:	db0a      	blt.n	8016bbc <uxr_receive_reliable_message+0x38>
 8016ba6:	2600      	movs	r6, #0
 8016ba8:	89e0      	ldrh	r0, [r4, #14]
 8016baa:	4629      	mov	r1, r5
 8016bac:	f000 fdce 	bl	801774c <uxr_seq_num_cmp>
 8016bb0:	2800      	cmp	r0, #0
 8016bb2:	da00      	bge.n	8016bb6 <uxr_receive_reliable_message+0x32>
 8016bb4:	81e5      	strh	r5, [r4, #14]
 8016bb6:	4630      	mov	r0, r6
 8016bb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016bbc:	4630      	mov	r0, r6
 8016bbe:	4629      	mov	r1, r5
 8016bc0:	f000 fdc4 	bl	801774c <uxr_seq_num_cmp>
 8016bc4:	2800      	cmp	r0, #0
 8016bc6:	dbee      	blt.n	8016ba6 <uxr_receive_reliable_message+0x22>
 8016bc8:	6923      	ldr	r3, [r4, #16]
 8016bca:	4640      	mov	r0, r8
 8016bcc:	4798      	blx	r3
 8016bce:	2101      	movs	r1, #1
 8016bd0:	4681      	mov	r9, r0
 8016bd2:	89a0      	ldrh	r0, [r4, #12]
 8016bd4:	f000 fdb2 	bl	801773c <uxr_seq_num_add>
 8016bd8:	f1b9 0f00 	cmp.w	r9, #0
 8016bdc:	d101      	bne.n	8016be2 <uxr_receive_reliable_message+0x5e>
 8016bde:	4285      	cmp	r5, r0
 8016be0:	d047      	beq.n	8016c72 <uxr_receive_reliable_message+0xee>
 8016be2:	8922      	ldrh	r2, [r4, #8]
 8016be4:	fbb5 f0f2 	udiv	r0, r5, r2
 8016be8:	fb02 5010 	mls	r0, r2, r0, r5
 8016bec:	b280      	uxth	r0, r0
 8016bee:	6863      	ldr	r3, [r4, #4]
 8016bf0:	fbb3 f3f2 	udiv	r3, r3, r2
 8016bf4:	fb00 f303 	mul.w	r3, r0, r3
 8016bf8:	6820      	ldr	r0, [r4, #0]
 8016bfa:	3304      	adds	r3, #4
 8016bfc:	4418      	add	r0, r3
 8016bfe:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8016c02:	2b00      	cmp	r3, #0
 8016c04:	d1cf      	bne.n	8016ba6 <uxr_receive_reliable_message+0x22>
 8016c06:	4641      	mov	r1, r8
 8016c08:	463a      	mov	r2, r7
 8016c0a:	f002 fd00 	bl	801960e <memcpy>
 8016c0e:	8921      	ldrh	r1, [r4, #8]
 8016c10:	fbb5 f2f1 	udiv	r2, r5, r1
 8016c14:	fb01 5212 	mls	r2, r1, r2, r5
 8016c18:	b292      	uxth	r2, r2
 8016c1a:	6863      	ldr	r3, [r4, #4]
 8016c1c:	fbb3 f3f1 	udiv	r3, r3, r1
 8016c20:	fb02 f303 	mul.w	r3, r2, r3
 8016c24:	6822      	ldr	r2, [r4, #0]
 8016c26:	50d7      	str	r7, [r2, r3]
 8016c28:	9a08      	ldr	r2, [sp, #32]
 8016c2a:	2301      	movs	r3, #1
 8016c2c:	7013      	strb	r3, [r2, #0]
 8016c2e:	f1b9 0f00 	cmp.w	r9, #0
 8016c32:	d0b8      	beq.n	8016ba6 <uxr_receive_reliable_message+0x22>
 8016c34:	89a6      	ldrh	r6, [r4, #12]
 8016c36:	4630      	mov	r0, r6
 8016c38:	2101      	movs	r1, #1
 8016c3a:	f000 fd7f 	bl	801773c <uxr_seq_num_add>
 8016c3e:	8922      	ldrh	r2, [r4, #8]
 8016c40:	6863      	ldr	r3, [r4, #4]
 8016c42:	fbb3 f3f2 	udiv	r3, r3, r2
 8016c46:	4606      	mov	r6, r0
 8016c48:	fbb0 f0f2 	udiv	r0, r0, r2
 8016c4c:	fb02 6010 	mls	r0, r2, r0, r6
 8016c50:	b280      	uxth	r0, r0
 8016c52:	fb00 f303 	mul.w	r3, r0, r3
 8016c56:	6820      	ldr	r0, [r4, #0]
 8016c58:	3304      	adds	r3, #4
 8016c5a:	4418      	add	r0, r3
 8016c5c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8016c60:	2b00      	cmp	r3, #0
 8016c62:	d0a0      	beq.n	8016ba6 <uxr_receive_reliable_message+0x22>
 8016c64:	6923      	ldr	r3, [r4, #16]
 8016c66:	4798      	blx	r3
 8016c68:	2802      	cmp	r0, #2
 8016c6a:	d008      	beq.n	8016c7e <uxr_receive_reliable_message+0xfa>
 8016c6c:	2801      	cmp	r0, #1
 8016c6e:	d0e2      	beq.n	8016c36 <uxr_receive_reliable_message+0xb2>
 8016c70:	e799      	b.n	8016ba6 <uxr_receive_reliable_message+0x22>
 8016c72:	9b08      	ldr	r3, [sp, #32]
 8016c74:	81a5      	strh	r5, [r4, #12]
 8016c76:	2601      	movs	r6, #1
 8016c78:	f883 9000 	strb.w	r9, [r3]
 8016c7c:	e794      	b.n	8016ba8 <uxr_receive_reliable_message+0x24>
 8016c7e:	2601      	movs	r6, #1
 8016c80:	e792      	b.n	8016ba8 <uxr_receive_reliable_message+0x24>
 8016c82:	bf00      	nop

08016c84 <uxr_next_input_reliable_buffer_available>:
 8016c84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016c88:	4604      	mov	r4, r0
 8016c8a:	460f      	mov	r7, r1
 8016c8c:	8980      	ldrh	r0, [r0, #12]
 8016c8e:	2101      	movs	r1, #1
 8016c90:	4690      	mov	r8, r2
 8016c92:	f000 fd53 	bl	801773c <uxr_seq_num_add>
 8016c96:	8922      	ldrh	r2, [r4, #8]
 8016c98:	fbb0 f6f2 	udiv	r6, r0, r2
 8016c9c:	fb02 0616 	mls	r6, r2, r6, r0
 8016ca0:	b2b6      	uxth	r6, r6
 8016ca2:	6863      	ldr	r3, [r4, #4]
 8016ca4:	fbb3 f3f2 	udiv	r3, r3, r2
 8016ca8:	fb06 f303 	mul.w	r3, r6, r3
 8016cac:	6826      	ldr	r6, [r4, #0]
 8016cae:	3304      	adds	r3, #4
 8016cb0:	441e      	add	r6, r3
 8016cb2:	f856 9c04 	ldr.w	r9, [r6, #-4]
 8016cb6:	f1b9 0f00 	cmp.w	r9, #0
 8016cba:	d023      	beq.n	8016d04 <uxr_next_input_reliable_buffer_available+0x80>
 8016cbc:	6923      	ldr	r3, [r4, #16]
 8016cbe:	4605      	mov	r5, r0
 8016cc0:	4630      	mov	r0, r6
 8016cc2:	4798      	blx	r3
 8016cc4:	4682      	mov	sl, r0
 8016cc6:	b300      	cbz	r0, 8016d0a <uxr_next_input_reliable_buffer_available+0x86>
 8016cc8:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 8016ccc:	2101      	movs	r1, #1
 8016cce:	4650      	mov	r0, sl
 8016cd0:	f000 fd34 	bl	801773c <uxr_seq_num_add>
 8016cd4:	8921      	ldrh	r1, [r4, #8]
 8016cd6:	fbb0 f2f1 	udiv	r2, r0, r1
 8016cda:	4682      	mov	sl, r0
 8016cdc:	fb01 0212 	mls	r2, r1, r2, r0
 8016ce0:	e9d4 0300 	ldrd	r0, r3, [r4]
 8016ce4:	b292      	uxth	r2, r2
 8016ce6:	fbb3 f3f1 	udiv	r3, r3, r1
 8016cea:	fb02 f303 	mul.w	r3, r2, r3
 8016cee:	3304      	adds	r3, #4
 8016cf0:	4418      	add	r0, r3
 8016cf2:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8016cf6:	b12b      	cbz	r3, 8016d04 <uxr_next_input_reliable_buffer_available+0x80>
 8016cf8:	6923      	ldr	r3, [r4, #16]
 8016cfa:	4798      	blx	r3
 8016cfc:	2802      	cmp	r0, #2
 8016cfe:	d01b      	beq.n	8016d38 <uxr_next_input_reliable_buffer_available+0xb4>
 8016d00:	2801      	cmp	r0, #1
 8016d02:	d0e3      	beq.n	8016ccc <uxr_next_input_reliable_buffer_available+0x48>
 8016d04:	2000      	movs	r0, #0
 8016d06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016d0a:	464a      	mov	r2, r9
 8016d0c:	4631      	mov	r1, r6
 8016d0e:	4638      	mov	r0, r7
 8016d10:	f7f8 f87a 	bl	800ee08 <ucdr_init_buffer>
 8016d14:	8921      	ldrh	r1, [r4, #8]
 8016d16:	fbb5 f2f1 	udiv	r2, r5, r1
 8016d1a:	fb01 5212 	mls	r2, r1, r2, r5
 8016d1e:	b292      	uxth	r2, r2
 8016d20:	6863      	ldr	r3, [r4, #4]
 8016d22:	fbb3 f3f1 	udiv	r3, r3, r1
 8016d26:	fb02 f303 	mul.w	r3, r2, r3
 8016d2a:	6822      	ldr	r2, [r4, #0]
 8016d2c:	f842 a003 	str.w	sl, [r2, r3]
 8016d30:	2001      	movs	r0, #1
 8016d32:	81a5      	strh	r5, [r4, #12]
 8016d34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016d38:	8920      	ldrh	r0, [r4, #8]
 8016d3a:	fbb5 f3f0 	udiv	r3, r5, r0
 8016d3e:	fb00 5513 	mls	r5, r0, r3, r5
 8016d42:	b2ad      	uxth	r5, r5
 8016d44:	6863      	ldr	r3, [r4, #4]
 8016d46:	fbb3 f3f0 	udiv	r3, r3, r0
 8016d4a:	fb03 f505 	mul.w	r5, r3, r5
 8016d4e:	6823      	ldr	r3, [r4, #0]
 8016d50:	2000      	movs	r0, #0
 8016d52:	5158      	str	r0, [r3, r5]
 8016d54:	eb06 0108 	add.w	r1, r6, r8
 8016d58:	eba9 0208 	sub.w	r2, r9, r8
 8016d5c:	4638      	mov	r0, r7
 8016d5e:	f7f8 f853 	bl	800ee08 <ucdr_init_buffer>
 8016d62:	4638      	mov	r0, r7
 8016d64:	4903      	ldr	r1, [pc, #12]	@ (8016d74 <uxr_next_input_reliable_buffer_available+0xf0>)
 8016d66:	4622      	mov	r2, r4
 8016d68:	f7f8 f822 	bl	800edb0 <ucdr_set_on_full_buffer_callback>
 8016d6c:	f8a4 a00c 	strh.w	sl, [r4, #12]
 8016d70:	2001      	movs	r0, #1
 8016d72:	e7c8      	b.n	8016d06 <uxr_next_input_reliable_buffer_available+0x82>
 8016d74:	08016a79 	.word	0x08016a79

08016d78 <uxr_process_heartbeat>:
 8016d78:	b538      	push	{r3, r4, r5, lr}
 8016d7a:	4611      	mov	r1, r2
 8016d7c:	4604      	mov	r4, r0
 8016d7e:	89c0      	ldrh	r0, [r0, #14]
 8016d80:	4615      	mov	r5, r2
 8016d82:	f000 fce3 	bl	801774c <uxr_seq_num_cmp>
 8016d86:	2800      	cmp	r0, #0
 8016d88:	bfb8      	it	lt
 8016d8a:	81e5      	strhlt	r5, [r4, #14]
 8016d8c:	bd38      	pop	{r3, r4, r5, pc}
 8016d8e:	bf00      	nop

08016d90 <uxr_compute_acknack>:
 8016d90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016d94:	8903      	ldrh	r3, [r0, #8]
 8016d96:	8985      	ldrh	r5, [r0, #12]
 8016d98:	4604      	mov	r4, r0
 8016d9a:	460e      	mov	r6, r1
 8016d9c:	b1d3      	cbz	r3, 8016dd4 <uxr_compute_acknack+0x44>
 8016d9e:	4628      	mov	r0, r5
 8016da0:	2701      	movs	r7, #1
 8016da2:	e003      	b.n	8016dac <uxr_compute_acknack+0x1c>
 8016da4:	4567      	cmp	r7, ip
 8016da6:	d215      	bcs.n	8016dd4 <uxr_compute_acknack+0x44>
 8016da8:	89a0      	ldrh	r0, [r4, #12]
 8016daa:	3701      	adds	r7, #1
 8016dac:	b2b9      	uxth	r1, r7
 8016dae:	f000 fcc5 	bl	801773c <uxr_seq_num_add>
 8016db2:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8016db6:	fbb0 f3fc 	udiv	r3, r0, ip
 8016dba:	fb0c 0313 	mls	r3, ip, r3, r0
 8016dbe:	b29a      	uxth	r2, r3
 8016dc0:	e9d4 1300 	ldrd	r1, r3, [r4]
 8016dc4:	fbb3 f3fc 	udiv	r3, r3, ip
 8016dc8:	fb02 f303 	mul.w	r3, r2, r3
 8016dcc:	58cb      	ldr	r3, [r1, r3]
 8016dce:	2b00      	cmp	r3, #0
 8016dd0:	d1e8      	bne.n	8016da4 <uxr_compute_acknack+0x14>
 8016dd2:	4605      	mov	r5, r0
 8016dd4:	8035      	strh	r5, [r6, #0]
 8016dd6:	2101      	movs	r1, #1
 8016dd8:	4628      	mov	r0, r5
 8016dda:	89e7      	ldrh	r7, [r4, #14]
 8016ddc:	f000 fcb2 	bl	8017744 <uxr_seq_num_sub>
 8016de0:	4601      	mov	r1, r0
 8016de2:	4638      	mov	r0, r7
 8016de4:	f000 fcae 	bl	8017744 <uxr_seq_num_sub>
 8016de8:	4605      	mov	r5, r0
 8016dea:	b318      	cbz	r0, 8016e34 <uxr_compute_acknack+0xa4>
 8016dec:	f04f 0900 	mov.w	r9, #0
 8016df0:	464f      	mov	r7, r9
 8016df2:	f04f 0801 	mov.w	r8, #1
 8016df6:	fa1f f189 	uxth.w	r1, r9
 8016dfa:	8830      	ldrh	r0, [r6, #0]
 8016dfc:	f000 fc9e 	bl	801773c <uxr_seq_num_add>
 8016e00:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8016e04:	fbb0 f3fc 	udiv	r3, r0, ip
 8016e08:	e9d4 1200 	ldrd	r1, r2, [r4]
 8016e0c:	fb03 001c 	mls	r0, r3, ip, r0
 8016e10:	b283      	uxth	r3, r0
 8016e12:	fbb2 f2fc 	udiv	r2, r2, ip
 8016e16:	fb02 f303 	mul.w	r3, r2, r3
 8016e1a:	fa08 f209 	lsl.w	r2, r8, r9
 8016e1e:	58cb      	ldr	r3, [r1, r3]
 8016e20:	f109 0901 	add.w	r9, r9, #1
 8016e24:	b90b      	cbnz	r3, 8016e2a <uxr_compute_acknack+0x9a>
 8016e26:	4317      	orrs	r7, r2
 8016e28:	b2bf      	uxth	r7, r7
 8016e2a:	454d      	cmp	r5, r9
 8016e2c:	d1e3      	bne.n	8016df6 <uxr_compute_acknack+0x66>
 8016e2e:	4638      	mov	r0, r7
 8016e30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016e34:	4607      	mov	r7, r0
 8016e36:	4638      	mov	r0, r7
 8016e38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08016e3c <uxr_init_output_best_effort_stream>:
 8016e3c:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 8016e40:	e9c0 3201 	strd	r3, r2, [r0, #4]
 8016e44:	6001      	str	r1, [r0, #0]
 8016e46:	7303      	strb	r3, [r0, #12]
 8016e48:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8016e4c:	4770      	bx	lr
 8016e4e:	bf00      	nop

08016e50 <uxr_reset_output_best_effort_stream>:
 8016e50:	7b02      	ldrb	r2, [r0, #12]
 8016e52:	6042      	str	r2, [r0, #4]
 8016e54:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016e58:	81c3      	strh	r3, [r0, #14]
 8016e5a:	4770      	bx	lr

08016e5c <uxr_prepare_best_effort_buffer_to_write>:
 8016e5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016e5e:	4604      	mov	r4, r0
 8016e60:	b083      	sub	sp, #12
 8016e62:	6840      	ldr	r0, [r0, #4]
 8016e64:	460d      	mov	r5, r1
 8016e66:	4616      	mov	r6, r2
 8016e68:	f7f9 fd2a 	bl	80108c0 <uxr_submessage_padding>
 8016e6c:	6863      	ldr	r3, [r4, #4]
 8016e6e:	4418      	add	r0, r3
 8016e70:	68a3      	ldr	r3, [r4, #8]
 8016e72:	1942      	adds	r2, r0, r5
 8016e74:	4293      	cmp	r3, r2
 8016e76:	bf2c      	ite	cs
 8016e78:	2701      	movcs	r7, #1
 8016e7a:	2700      	movcc	r7, #0
 8016e7c:	d202      	bcs.n	8016e84 <uxr_prepare_best_effort_buffer_to_write+0x28>
 8016e7e:	4638      	mov	r0, r7
 8016e80:	b003      	add	sp, #12
 8016e82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016e84:	9000      	str	r0, [sp, #0]
 8016e86:	6821      	ldr	r1, [r4, #0]
 8016e88:	4630      	mov	r0, r6
 8016e8a:	2300      	movs	r3, #0
 8016e8c:	f7f7 ffaa 	bl	800ede4 <ucdr_init_buffer_origin_offset>
 8016e90:	6861      	ldr	r1, [r4, #4]
 8016e92:	4638      	mov	r0, r7
 8016e94:	4429      	add	r1, r5
 8016e96:	6061      	str	r1, [r4, #4]
 8016e98:	b003      	add	sp, #12
 8016e9a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016e9c <uxr_prepare_best_effort_buffer_to_send>:
 8016e9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016ea0:	4604      	mov	r4, r0
 8016ea2:	461d      	mov	r5, r3
 8016ea4:	6840      	ldr	r0, [r0, #4]
 8016ea6:	7b23      	ldrb	r3, [r4, #12]
 8016ea8:	4298      	cmp	r0, r3
 8016eaa:	bf8c      	ite	hi
 8016eac:	2601      	movhi	r6, #1
 8016eae:	2600      	movls	r6, #0
 8016eb0:	d802      	bhi.n	8016eb8 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 8016eb2:	4630      	mov	r0, r6
 8016eb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016eb8:	4688      	mov	r8, r1
 8016eba:	89e0      	ldrh	r0, [r4, #14]
 8016ebc:	2101      	movs	r1, #1
 8016ebe:	4617      	mov	r7, r2
 8016ec0:	f000 fc3c 	bl	801773c <uxr_seq_num_add>
 8016ec4:	6823      	ldr	r3, [r4, #0]
 8016ec6:	81e0      	strh	r0, [r4, #14]
 8016ec8:	8028      	strh	r0, [r5, #0]
 8016eca:	f8c8 3000 	str.w	r3, [r8]
 8016ece:	6863      	ldr	r3, [r4, #4]
 8016ed0:	603b      	str	r3, [r7, #0]
 8016ed2:	7b23      	ldrb	r3, [r4, #12]
 8016ed4:	6063      	str	r3, [r4, #4]
 8016ed6:	4630      	mov	r0, r6
 8016ed8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016edc <on_full_output_buffer>:
 8016edc:	b538      	push	{r3, r4, r5, lr}
 8016ede:	6802      	ldr	r2, [r0, #0]
 8016ee0:	460c      	mov	r4, r1
 8016ee2:	6809      	ldr	r1, [r1, #0]
 8016ee4:	8923      	ldrh	r3, [r4, #8]
 8016ee6:	eba2 0c01 	sub.w	ip, r2, r1
 8016eea:	6862      	ldr	r2, [r4, #4]
 8016eec:	fbb2 f2f3 	udiv	r2, r2, r3
 8016ef0:	fbbc fcf2 	udiv	ip, ip, r2
 8016ef4:	f10c 0c01 	add.w	ip, ip, #1
 8016ef8:	fa1f fc8c 	uxth.w	ip, ip
 8016efc:	fbbc fef3 	udiv	lr, ip, r3
 8016f00:	fb03 c31e 	mls	r3, r3, lr, ip
 8016f04:	b29b      	uxth	r3, r3
 8016f06:	fb02 f303 	mul.w	r3, r2, r3
 8016f0a:	f894 c00c 	ldrb.w	ip, [r4, #12]
 8016f0e:	58ca      	ldr	r2, [r1, r3]
 8016f10:	4463      	add	r3, ip
 8016f12:	eba2 020c 	sub.w	r2, r2, ip
 8016f16:	3308      	adds	r3, #8
 8016f18:	4605      	mov	r5, r0
 8016f1a:	4419      	add	r1, r3
 8016f1c:	3a04      	subs	r2, #4
 8016f1e:	6903      	ldr	r3, [r0, #16]
 8016f20:	f7f7 ff6a 	bl	800edf8 <ucdr_init_buffer_origin>
 8016f24:	4628      	mov	r0, r5
 8016f26:	4903      	ldr	r1, [pc, #12]	@ (8016f34 <on_full_output_buffer+0x58>)
 8016f28:	4622      	mov	r2, r4
 8016f2a:	f7f7 ff41 	bl	800edb0 <ucdr_set_on_full_buffer_callback>
 8016f2e:	2000      	movs	r0, #0
 8016f30:	bd38      	pop	{r3, r4, r5, pc}
 8016f32:	bf00      	nop
 8016f34:	08016edd 	.word	0x08016edd

08016f38 <uxr_init_output_reliable_stream>:
 8016f38:	b410      	push	{r4}
 8016f3a:	f89d c004 	ldrb.w	ip, [sp, #4]
 8016f3e:	8103      	strh	r3, [r0, #8]
 8016f40:	e9c0 1200 	strd	r1, r2, [r0]
 8016f44:	f880 c00c 	strb.w	ip, [r0, #12]
 8016f48:	b1d3      	cbz	r3, 8016f80 <uxr_init_output_reliable_stream+0x48>
 8016f4a:	f8c1 c000 	str.w	ip, [r1]
 8016f4e:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8016f52:	f1bc 0f01 	cmp.w	ip, #1
 8016f56:	d913      	bls.n	8016f80 <uxr_init_output_reliable_stream+0x48>
 8016f58:	2301      	movs	r3, #1
 8016f5a:	fbb3 f1fc 	udiv	r1, r3, ip
 8016f5e:	fb0c 3111 	mls	r1, ip, r1, r3
 8016f62:	b289      	uxth	r1, r1
 8016f64:	6842      	ldr	r2, [r0, #4]
 8016f66:	6804      	ldr	r4, [r0, #0]
 8016f68:	fbb2 f2fc 	udiv	r2, r2, ip
 8016f6c:	fb01 f202 	mul.w	r2, r1, r2
 8016f70:	7b01      	ldrb	r1, [r0, #12]
 8016f72:	50a1      	str	r1, [r4, r2]
 8016f74:	3301      	adds	r3, #1
 8016f76:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8016f7a:	b29b      	uxth	r3, r3
 8016f7c:	459c      	cmp	ip, r3
 8016f7e:	d8ec      	bhi.n	8016f5a <uxr_init_output_reliable_stream+0x22>
 8016f80:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8016f84:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8016f88:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8016f8c:	4905      	ldr	r1, [pc, #20]	@ (8016fa4 <uxr_init_output_reliable_stream+0x6c>)
 8016f8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016f92:	f8c0 100e 	str.w	r1, [r0, #14]
 8016f96:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016f9a:	2300      	movs	r3, #0
 8016f9c:	8242      	strh	r2, [r0, #18]
 8016f9e:	8403      	strh	r3, [r0, #32]
 8016fa0:	4770      	bx	lr
 8016fa2:	bf00      	nop
 8016fa4:	ffff0000 	.word	0xffff0000

08016fa8 <uxr_reset_output_reliable_stream>:
 8016fa8:	8901      	ldrh	r1, [r0, #8]
 8016faa:	b1b1      	cbz	r1, 8016fda <uxr_reset_output_reliable_stream+0x32>
 8016fac:	f04f 0c00 	mov.w	ip, #0
 8016fb0:	4663      	mov	r3, ip
 8016fb2:	fbb3 f2f1 	udiv	r2, r3, r1
 8016fb6:	fb01 3312 	mls	r3, r1, r2, r3
 8016fba:	b29b      	uxth	r3, r3
 8016fbc:	6842      	ldr	r2, [r0, #4]
 8016fbe:	fbb2 f2f1 	udiv	r2, r2, r1
 8016fc2:	6801      	ldr	r1, [r0, #0]
 8016fc4:	fb02 f303 	mul.w	r3, r2, r3
 8016fc8:	7b02      	ldrb	r2, [r0, #12]
 8016fca:	50ca      	str	r2, [r1, r3]
 8016fcc:	f10c 0c01 	add.w	ip, ip, #1
 8016fd0:	8901      	ldrh	r1, [r0, #8]
 8016fd2:	fa1f f38c 	uxth.w	r3, ip
 8016fd6:	4299      	cmp	r1, r3
 8016fd8:	d8eb      	bhi.n	8016fb2 <uxr_reset_output_reliable_stream+0xa>
 8016fda:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8016fde:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8016fe2:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8016fe6:	4904      	ldr	r1, [pc, #16]	@ (8016ff8 <uxr_reset_output_reliable_stream+0x50>)
 8016fe8:	f8c0 100e 	str.w	r1, [r0, #14]
 8016fec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016ff0:	2300      	movs	r3, #0
 8016ff2:	8242      	strh	r2, [r0, #18]
 8016ff4:	8403      	strh	r3, [r0, #32]
 8016ff6:	4770      	bx	lr
 8016ff8:	ffff0000 	.word	0xffff0000

08016ffc <uxr_prepare_reliable_buffer_to_write>:
 8016ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017000:	4604      	mov	r4, r0
 8017002:	b091      	sub	sp, #68	@ 0x44
 8017004:	8900      	ldrh	r0, [r0, #8]
 8017006:	89e6      	ldrh	r6, [r4, #14]
 8017008:	6823      	ldr	r3, [r4, #0]
 801700a:	9204      	str	r2, [sp, #16]
 801700c:	fbb6 f2f0 	udiv	r2, r6, r0
 8017010:	fb00 6212 	mls	r2, r0, r2, r6
 8017014:	b292      	uxth	r2, r2
 8017016:	6865      	ldr	r5, [r4, #4]
 8017018:	fbb5 f5f0 	udiv	r5, r5, r0
 801701c:	fb05 3202 	mla	r2, r5, r2, r3
 8017020:	3204      	adds	r2, #4
 8017022:	f852 8c04 	ldr.w	r8, [r2, #-4]
 8017026:	f894 900c 	ldrb.w	r9, [r4, #12]
 801702a:	9203      	str	r2, [sp, #12]
 801702c:	468b      	mov	fp, r1
 801702e:	1f2f      	subs	r7, r5, #4
 8017030:	2800      	cmp	r0, #0
 8017032:	f000 814c 	beq.w	80172ce <uxr_prepare_reliable_buffer_to_write+0x2d2>
 8017036:	f04f 0c00 	mov.w	ip, #0
 801703a:	46e2      	mov	sl, ip
 801703c:	4661      	mov	r1, ip
 801703e:	fbb1 f2f0 	udiv	r2, r1, r0
 8017042:	fb00 1212 	mls	r2, r0, r2, r1
 8017046:	b292      	uxth	r2, r2
 8017048:	fb05 f202 	mul.w	r2, r5, r2
 801704c:	f10c 0c01 	add.w	ip, ip, #1
 8017050:	589a      	ldr	r2, [r3, r2]
 8017052:	454a      	cmp	r2, r9
 8017054:	bf08      	it	eq
 8017056:	f10a 0a01 	addeq.w	sl, sl, #1
 801705a:	fa1f f18c 	uxth.w	r1, ip
 801705e:	bf08      	it	eq
 8017060:	fa1f fa8a 	uxtheq.w	sl, sl
 8017064:	4281      	cmp	r1, r0
 8017066:	d3ea      	bcc.n	801703e <uxr_prepare_reliable_buffer_to_write+0x42>
 8017068:	4640      	mov	r0, r8
 801706a:	2104      	movs	r1, #4
 801706c:	f8cd a014 	str.w	sl, [sp, #20]
 8017070:	f7f7 fece 	bl	800ee10 <ucdr_alignment>
 8017074:	4480      	add	r8, r0
 8017076:	eb08 020b 	add.w	r2, r8, fp
 801707a:	42ba      	cmp	r2, r7
 801707c:	f240 80cd 	bls.w	801721a <uxr_prepare_reliable_buffer_to_write+0x21e>
 8017080:	7b22      	ldrb	r2, [r4, #12]
 8017082:	445a      	add	r2, fp
 8017084:	42ba      	cmp	r2, r7
 8017086:	f240 80b5 	bls.w	80171f4 <uxr_prepare_reliable_buffer_to_write+0x1f8>
 801708a:	f5c9 437f 	rsb	r3, r9, #65280	@ 0xff00
 801708e:	33fc      	adds	r3, #252	@ 0xfc
 8017090:	b2ba      	uxth	r2, r7
 8017092:	4413      	add	r3, r2
 8017094:	b29b      	uxth	r3, r3
 8017096:	fb0a f903 	mul.w	r9, sl, r3
 801709a:	45d9      	cmp	r9, fp
 801709c:	9305      	str	r3, [sp, #20]
 801709e:	9306      	str	r3, [sp, #24]
 80170a0:	f0c0 80b7 	bcc.w	8017212 <uxr_prepare_reliable_buffer_to_write+0x216>
 80170a4:	f108 0304 	add.w	r3, r8, #4
 80170a8:	42bb      	cmp	r3, r7
 80170aa:	f080 80db 	bcs.w	8017264 <uxr_prepare_reliable_buffer_to_write+0x268>
 80170ae:	f1a2 0904 	sub.w	r9, r2, #4
 80170b2:	eba9 0908 	sub.w	r9, r9, r8
 80170b6:	9b05      	ldr	r3, [sp, #20]
 80170b8:	fa1f f989 	uxth.w	r9, r9
 80170bc:	ebab 0b09 	sub.w	fp, fp, r9
 80170c0:	fbbb f2f3 	udiv	r2, fp, r3
 80170c4:	fb03 b312 	mls	r3, r3, r2, fp
 80170c8:	2b00      	cmp	r3, #0
 80170ca:	f000 80c8 	beq.w	801725e <uxr_prepare_reliable_buffer_to_write+0x262>
 80170ce:	3201      	adds	r2, #1
 80170d0:	b292      	uxth	r2, r2
 80170d2:	9306      	str	r3, [sp, #24]
 80170d4:	4552      	cmp	r2, sl
 80170d6:	f200 809c 	bhi.w	8017212 <uxr_prepare_reliable_buffer_to_write+0x216>
 80170da:	f10d 0b20 	add.w	fp, sp, #32
 80170de:	2a00      	cmp	r2, #0
 80170e0:	d042      	beq.n	8017168 <uxr_prepare_reliable_buffer_to_write+0x16c>
 80170e2:	f8cd 801c 	str.w	r8, [sp, #28]
 80170e6:	f04f 0a00 	mov.w	sl, #0
 80170ea:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80170ee:	9505      	str	r5, [sp, #20]
 80170f0:	f10d 0b20 	add.w	fp, sp, #32
 80170f4:	4615      	mov	r5, r2
 80170f6:	e000      	b.n	80170fa <uxr_prepare_reliable_buffer_to_write+0xfe>
 80170f8:	46c1      	mov	r9, r8
 80170fa:	8920      	ldrh	r0, [r4, #8]
 80170fc:	fbb6 f2f0 	udiv	r2, r6, r0
 8017100:	fb00 6112 	mls	r1, r0, r2, r6
 8017104:	b28a      	uxth	r2, r1
 8017106:	6863      	ldr	r3, [r4, #4]
 8017108:	fbb3 f1f0 	udiv	r1, r3, r0
 801710c:	6823      	ldr	r3, [r4, #0]
 801710e:	fb02 f101 	mul.w	r1, r2, r1
 8017112:	3104      	adds	r1, #4
 8017114:	4419      	add	r1, r3
 8017116:	4658      	mov	r0, fp
 8017118:	f851 2c04 	ldr.w	r2, [r1, #-4]
 801711c:	9200      	str	r2, [sp, #0]
 801711e:	2300      	movs	r3, #0
 8017120:	463a      	mov	r2, r7
 8017122:	f7f7 fe5f 	bl	800ede4 <ucdr_init_buffer_origin_offset>
 8017126:	464a      	mov	r2, r9
 8017128:	2300      	movs	r3, #0
 801712a:	210d      	movs	r1, #13
 801712c:	4658      	mov	r0, fp
 801712e:	f7f9 fb87 	bl	8010840 <uxr_buffer_submessage_header>
 8017132:	8921      	ldrh	r1, [r4, #8]
 8017134:	fbb6 f2f1 	udiv	r2, r6, r1
 8017138:	fb01 6212 	mls	r2, r1, r2, r6
 801713c:	b292      	uxth	r2, r2
 801713e:	6863      	ldr	r3, [r4, #4]
 8017140:	fbb3 f3f1 	udiv	r3, r3, r1
 8017144:	fb02 f303 	mul.w	r3, r2, r3
 8017148:	6822      	ldr	r2, [r4, #0]
 801714a:	4630      	mov	r0, r6
 801714c:	50d7      	str	r7, [r2, r3]
 801714e:	2101      	movs	r1, #1
 8017150:	f000 faf4 	bl	801773c <uxr_seq_num_add>
 8017154:	f10a 0a01 	add.w	sl, sl, #1
 8017158:	fa1f f38a 	uxth.w	r3, sl
 801715c:	429d      	cmp	r5, r3
 801715e:	4606      	mov	r6, r0
 8017160:	d8ca      	bhi.n	80170f8 <uxr_prepare_reliable_buffer_to_write+0xfc>
 8017162:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8017166:	9d05      	ldr	r5, [sp, #20]
 8017168:	8920      	ldrh	r0, [r4, #8]
 801716a:	fbb6 f3f0 	udiv	r3, r6, r0
 801716e:	fb00 6313 	mls	r3, r0, r3, r6
 8017172:	b299      	uxth	r1, r3
 8017174:	6863      	ldr	r3, [r4, #4]
 8017176:	fbb3 f3f0 	udiv	r3, r3, r0
 801717a:	fb01 f303 	mul.w	r3, r1, r3
 801717e:	6821      	ldr	r1, [r4, #0]
 8017180:	3304      	adds	r3, #4
 8017182:	4419      	add	r1, r3
 8017184:	463a      	mov	r2, r7
 8017186:	f851 0c04 	ldr.w	r0, [r1, #-4]
 801718a:	9000      	str	r0, [sp, #0]
 801718c:	2300      	movs	r3, #0
 801718e:	4658      	mov	r0, fp
 8017190:	f7f7 fe28 	bl	800ede4 <ucdr_init_buffer_origin_offset>
 8017194:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8017198:	4658      	mov	r0, fp
 801719a:	fa1f f289 	uxth.w	r2, r9
 801719e:	2302      	movs	r3, #2
 80171a0:	210d      	movs	r1, #13
 80171a2:	f7f9 fb4d 	bl	8010840 <uxr_buffer_submessage_header>
 80171a6:	9b03      	ldr	r3, [sp, #12]
 80171a8:	8927      	ldrh	r7, [r4, #8]
 80171aa:	7b20      	ldrb	r0, [r4, #12]
 80171ac:	f108 0104 	add.w	r1, r8, #4
 80171b0:	440b      	add	r3, r1
 80171b2:	4619      	mov	r1, r3
 80171b4:	fbb6 f3f7 	udiv	r3, r6, r7
 80171b8:	fb07 6313 	mls	r3, r7, r3, r6
 80171bc:	f1a5 0208 	sub.w	r2, r5, #8
 80171c0:	b29d      	uxth	r5, r3
 80171c2:	3004      	adds	r0, #4
 80171c4:	6863      	ldr	r3, [r4, #4]
 80171c6:	fbb3 f3f7 	udiv	r3, r3, r7
 80171ca:	fb05 f303 	mul.w	r3, r5, r3
 80171ce:	6825      	ldr	r5, [r4, #0]
 80171d0:	4448      	add	r0, r9
 80171d2:	50e8      	str	r0, [r5, r3]
 80171d4:	9d04      	ldr	r5, [sp, #16]
 80171d6:	eba2 0208 	sub.w	r2, r2, r8
 80171da:	4628      	mov	r0, r5
 80171dc:	f7f7 fe14 	bl	800ee08 <ucdr_init_buffer>
 80171e0:	4628      	mov	r0, r5
 80171e2:	493c      	ldr	r1, [pc, #240]	@ (80172d4 <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 80171e4:	4622      	mov	r2, r4
 80171e6:	f7f7 fde3 	bl	800edb0 <ucdr_set_on_full_buffer_callback>
 80171ea:	2001      	movs	r0, #1
 80171ec:	81e6      	strh	r6, [r4, #14]
 80171ee:	b011      	add	sp, #68	@ 0x44
 80171f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80171f4:	2101      	movs	r1, #1
 80171f6:	89e0      	ldrh	r0, [r4, #14]
 80171f8:	f000 faa0 	bl	801773c <uxr_seq_num_add>
 80171fc:	8921      	ldrh	r1, [r4, #8]
 80171fe:	4605      	mov	r5, r0
 8017200:	8a60      	ldrh	r0, [r4, #18]
 8017202:	f000 fa9b 	bl	801773c <uxr_seq_num_add>
 8017206:	4601      	mov	r1, r0
 8017208:	4628      	mov	r0, r5
 801720a:	f000 fa9f 	bl	801774c <uxr_seq_num_cmp>
 801720e:	2800      	cmp	r0, #0
 8017210:	dd42      	ble.n	8017298 <uxr_prepare_reliable_buffer_to_write+0x29c>
 8017212:	2000      	movs	r0, #0
 8017214:	b011      	add	sp, #68	@ 0x44
 8017216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801721a:	8921      	ldrh	r1, [r4, #8]
 801721c:	8a60      	ldrh	r0, [r4, #18]
 801721e:	9205      	str	r2, [sp, #20]
 8017220:	f000 fa8c 	bl	801773c <uxr_seq_num_add>
 8017224:	4601      	mov	r1, r0
 8017226:	4630      	mov	r0, r6
 8017228:	f000 fa90 	bl	801774c <uxr_seq_num_cmp>
 801722c:	2800      	cmp	r0, #0
 801722e:	9a05      	ldr	r2, [sp, #20]
 8017230:	dcef      	bgt.n	8017212 <uxr_prepare_reliable_buffer_to_write+0x216>
 8017232:	8927      	ldrh	r7, [r4, #8]
 8017234:	fbb6 f3f7 	udiv	r3, r6, r7
 8017238:	fb07 6313 	mls	r3, r7, r3, r6
 801723c:	b29d      	uxth	r5, r3
 801723e:	6863      	ldr	r3, [r4, #4]
 8017240:	6824      	ldr	r4, [r4, #0]
 8017242:	fbb3 f3f7 	udiv	r3, r3, r7
 8017246:	fb05 f303 	mul.w	r3, r5, r3
 801724a:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 801724e:	50e2      	str	r2, [r4, r3]
 8017250:	2300      	movs	r3, #0
 8017252:	f8cd 8000 	str.w	r8, [sp]
 8017256:	f7f7 fdc5 	bl	800ede4 <ucdr_init_buffer_origin_offset>
 801725a:	2001      	movs	r0, #1
 801725c:	e7da      	b.n	8017214 <uxr_prepare_reliable_buffer_to_write+0x218>
 801725e:	b293      	uxth	r3, r2
 8017260:	461a      	mov	r2, r3
 8017262:	e737      	b.n	80170d4 <uxr_prepare_reliable_buffer_to_write+0xd8>
 8017264:	4630      	mov	r0, r6
 8017266:	2101      	movs	r1, #1
 8017268:	9207      	str	r2, [sp, #28]
 801726a:	f000 fa67 	bl	801773c <uxr_seq_num_add>
 801726e:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8017272:	fbb0 f1fc 	udiv	r1, r0, ip
 8017276:	fb0c 0111 	mls	r1, ip, r1, r0
 801727a:	4606      	mov	r6, r0
 801727c:	b288      	uxth	r0, r1
 801727e:	6863      	ldr	r3, [r4, #4]
 8017280:	fbb3 f1fc 	udiv	r1, r3, ip
 8017284:	6823      	ldr	r3, [r4, #0]
 8017286:	9a07      	ldr	r2, [sp, #28]
 8017288:	fb00 f101 	mul.w	r1, r0, r1
 801728c:	3104      	adds	r1, #4
 801728e:	440b      	add	r3, r1
 8017290:	9303      	str	r3, [sp, #12]
 8017292:	f853 8c04 	ldr.w	r8, [r3, #-4]
 8017296:	e70a      	b.n	80170ae <uxr_prepare_reliable_buffer_to_write+0xb2>
 8017298:	8921      	ldrh	r1, [r4, #8]
 801729a:	fbb5 f3f1 	udiv	r3, r5, r1
 801729e:	fb01 5313 	mls	r3, r1, r3, r5
 80172a2:	b29a      	uxth	r2, r3
 80172a4:	6863      	ldr	r3, [r4, #4]
 80172a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80172aa:	6821      	ldr	r1, [r4, #0]
 80172ac:	9804      	ldr	r0, [sp, #16]
 80172ae:	fb02 f303 	mul.w	r3, r2, r3
 80172b2:	3304      	adds	r3, #4
 80172b4:	7b22      	ldrb	r2, [r4, #12]
 80172b6:	4419      	add	r1, r3
 80172b8:	445a      	add	r2, fp
 80172ba:	f841 2c04 	str.w	r2, [r1, #-4]
 80172be:	7b23      	ldrb	r3, [r4, #12]
 80172c0:	9300      	str	r3, [sp, #0]
 80172c2:	2300      	movs	r3, #0
 80172c4:	f7f7 fd8e 	bl	800ede4 <ucdr_init_buffer_origin_offset>
 80172c8:	81e5      	strh	r5, [r4, #14]
 80172ca:	2001      	movs	r0, #1
 80172cc:	e7a2      	b.n	8017214 <uxr_prepare_reliable_buffer_to_write+0x218>
 80172ce:	4682      	mov	sl, r0
 80172d0:	e6ca      	b.n	8017068 <uxr_prepare_reliable_buffer_to_write+0x6c>
 80172d2:	bf00      	nop
 80172d4:	08016edd 	.word	0x08016edd

080172d8 <uxr_prepare_next_reliable_buffer_to_send>:
 80172d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80172da:	4604      	mov	r4, r0
 80172dc:	460f      	mov	r7, r1
 80172de:	8a00      	ldrh	r0, [r0, #16]
 80172e0:	2101      	movs	r1, #1
 80172e2:	4616      	mov	r6, r2
 80172e4:	461d      	mov	r5, r3
 80172e6:	f000 fa29 	bl	801773c <uxr_seq_num_add>
 80172ea:	8028      	strh	r0, [r5, #0]
 80172ec:	8922      	ldrh	r2, [r4, #8]
 80172ee:	fbb0 f3f2 	udiv	r3, r0, r2
 80172f2:	fb02 0c13 	mls	ip, r2, r3, r0
 80172f6:	fa1f fc8c 	uxth.w	ip, ip
 80172fa:	6863      	ldr	r3, [r4, #4]
 80172fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8017300:	fb0c fc03 	mul.w	ip, ip, r3
 8017304:	6823      	ldr	r3, [r4, #0]
 8017306:	89e1      	ldrh	r1, [r4, #14]
 8017308:	f10c 0c04 	add.w	ip, ip, #4
 801730c:	4463      	add	r3, ip
 801730e:	603b      	str	r3, [r7, #0]
 8017310:	6823      	ldr	r3, [r4, #0]
 8017312:	449c      	add	ip, r3
 8017314:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 8017318:	6033      	str	r3, [r6, #0]
 801731a:	f000 fa17 	bl	801774c <uxr_seq_num_cmp>
 801731e:	2800      	cmp	r0, #0
 8017320:	dd01      	ble.n	8017326 <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 8017322:	2000      	movs	r0, #0
 8017324:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017326:	7b23      	ldrb	r3, [r4, #12]
 8017328:	6832      	ldr	r2, [r6, #0]
 801732a:	429a      	cmp	r2, r3
 801732c:	d9f9      	bls.n	8017322 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801732e:	8a61      	ldrh	r1, [r4, #18]
 8017330:	8a20      	ldrh	r0, [r4, #16]
 8017332:	f000 fa07 	bl	8017744 <uxr_seq_num_sub>
 8017336:	8923      	ldrh	r3, [r4, #8]
 8017338:	4283      	cmp	r3, r0
 801733a:	d0f2      	beq.n	8017322 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801733c:	8828      	ldrh	r0, [r5, #0]
 801733e:	89e3      	ldrh	r3, [r4, #14]
 8017340:	8220      	strh	r0, [r4, #16]
 8017342:	4298      	cmp	r0, r3
 8017344:	d001      	beq.n	801734a <uxr_prepare_next_reliable_buffer_to_send+0x72>
 8017346:	2001      	movs	r0, #1
 8017348:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801734a:	2101      	movs	r1, #1
 801734c:	f000 f9f6 	bl	801773c <uxr_seq_num_add>
 8017350:	81e0      	strh	r0, [r4, #14]
 8017352:	2001      	movs	r0, #1
 8017354:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017356:	bf00      	nop

08017358 <uxr_update_output_stream_heartbeat_timestamp>:
 8017358:	b570      	push	{r4, r5, r6, lr}
 801735a:	8a01      	ldrh	r1, [r0, #16]
 801735c:	4604      	mov	r4, r0
 801735e:	8a40      	ldrh	r0, [r0, #18]
 8017360:	4615      	mov	r5, r2
 8017362:	461e      	mov	r6, r3
 8017364:	f000 f9f2 	bl	801774c <uxr_seq_num_cmp>
 8017368:	2800      	cmp	r0, #0
 801736a:	db07      	blt.n	801737c <uxr_update_output_stream_heartbeat_timestamp+0x24>
 801736c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8017370:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8017374:	e9c4 2306 	strd	r2, r3, [r4, #24]
 8017378:	2000      	movs	r0, #0
 801737a:	bd70      	pop	{r4, r5, r6, pc}
 801737c:	f894 0020 	ldrb.w	r0, [r4, #32]
 8017380:	b940      	cbnz	r0, 8017394 <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 8017382:	2301      	movs	r3, #1
 8017384:	f884 3020 	strb.w	r3, [r4, #32]
 8017388:	3564      	adds	r5, #100	@ 0x64
 801738a:	f146 0600 	adc.w	r6, r6, #0
 801738e:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8017392:	bd70      	pop	{r4, r5, r6, pc}
 8017394:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8017398:	4295      	cmp	r5, r2
 801739a:	eb76 0303 	sbcs.w	r3, r6, r3
 801739e:	bfa5      	ittet	ge
 80173a0:	3001      	addge	r0, #1
 80173a2:	f884 0020 	strbge.w	r0, [r4, #32]
 80173a6:	2000      	movlt	r0, #0
 80173a8:	2001      	movge	r0, #1
 80173aa:	e7ed      	b.n	8017388 <uxr_update_output_stream_heartbeat_timestamp+0x30>

080173ac <uxr_begin_output_nack_buffer_it>:
 80173ac:	8a40      	ldrh	r0, [r0, #18]
 80173ae:	4770      	bx	lr

080173b0 <uxr_next_reliable_nack_buffer_to_send>:
 80173b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80173b4:	f890 8021 	ldrb.w	r8, [r0, #33]	@ 0x21
 80173b8:	b082      	sub	sp, #8
 80173ba:	f1b8 0f00 	cmp.w	r8, #0
 80173be:	d011      	beq.n	80173e4 <uxr_next_reliable_nack_buffer_to_send+0x34>
 80173c0:	4604      	mov	r4, r0
 80173c2:	8818      	ldrh	r0, [r3, #0]
 80173c4:	460e      	mov	r6, r1
 80173c6:	4617      	mov	r7, r2
 80173c8:	461d      	mov	r5, r3
 80173ca:	2101      	movs	r1, #1
 80173cc:	f000 f9b6 	bl	801773c <uxr_seq_num_add>
 80173d0:	8028      	strh	r0, [r5, #0]
 80173d2:	8a21      	ldrh	r1, [r4, #16]
 80173d4:	f000 f9ba 	bl	801774c <uxr_seq_num_cmp>
 80173d8:	2800      	cmp	r0, #0
 80173da:	dd07      	ble.n	80173ec <uxr_next_reliable_nack_buffer_to_send+0x3c>
 80173dc:	f04f 0800 	mov.w	r8, #0
 80173e0:	f884 8021 	strb.w	r8, [r4, #33]	@ 0x21
 80173e4:	4640      	mov	r0, r8
 80173e6:	b002      	add	sp, #8
 80173e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80173ec:	8921      	ldrh	r1, [r4, #8]
 80173ee:	8828      	ldrh	r0, [r5, #0]
 80173f0:	6823      	ldr	r3, [r4, #0]
 80173f2:	fbb0 f2f1 	udiv	r2, r0, r1
 80173f6:	fb01 0c12 	mls	ip, r1, r2, r0
 80173fa:	fa1f f28c 	uxth.w	r2, ip
 80173fe:	9301      	str	r3, [sp, #4]
 8017400:	6863      	ldr	r3, [r4, #4]
 8017402:	fbb3 fcf1 	udiv	ip, r3, r1
 8017406:	9b01      	ldr	r3, [sp, #4]
 8017408:	fb02 fc0c 	mul.w	ip, r2, ip
 801740c:	f10c 0c04 	add.w	ip, ip, #4
 8017410:	4463      	add	r3, ip
 8017412:	6033      	str	r3, [r6, #0]
 8017414:	6823      	ldr	r3, [r4, #0]
 8017416:	4463      	add	r3, ip
 8017418:	f853 3c04 	ldr.w	r3, [r3, #-4]
 801741c:	603b      	str	r3, [r7, #0]
 801741e:	7b22      	ldrb	r2, [r4, #12]
 8017420:	429a      	cmp	r2, r3
 8017422:	d0d2      	beq.n	80173ca <uxr_next_reliable_nack_buffer_to_send+0x1a>
 8017424:	4640      	mov	r0, r8
 8017426:	b002      	add	sp, #8
 8017428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801742c <uxr_process_acknack>:
 801742c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801742e:	4604      	mov	r4, r0
 8017430:	460e      	mov	r6, r1
 8017432:	4610      	mov	r0, r2
 8017434:	2101      	movs	r1, #1
 8017436:	f000 f985 	bl	8017744 <uxr_seq_num_sub>
 801743a:	8a61      	ldrh	r1, [r4, #18]
 801743c:	f000 f982 	bl	8017744 <uxr_seq_num_sub>
 8017440:	b1c0      	cbz	r0, 8017474 <uxr_process_acknack+0x48>
 8017442:	4605      	mov	r5, r0
 8017444:	2700      	movs	r7, #0
 8017446:	2101      	movs	r1, #1
 8017448:	8a60      	ldrh	r0, [r4, #18]
 801744a:	f000 f977 	bl	801773c <uxr_seq_num_add>
 801744e:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8017452:	fbb0 f1fc 	udiv	r1, r0, ip
 8017456:	e9d4 2300 	ldrd	r2, r3, [r4]
 801745a:	fb0c 0111 	mls	r1, ip, r1, r0
 801745e:	b289      	uxth	r1, r1
 8017460:	3701      	adds	r7, #1
 8017462:	fbb3 f3fc 	udiv	r3, r3, ip
 8017466:	fb01 f303 	mul.w	r3, r1, r3
 801746a:	42bd      	cmp	r5, r7
 801746c:	7b21      	ldrb	r1, [r4, #12]
 801746e:	8260      	strh	r0, [r4, #18]
 8017470:	50d1      	str	r1, [r2, r3]
 8017472:	d1e8      	bne.n	8017446 <uxr_process_acknack+0x1a>
 8017474:	3e00      	subs	r6, #0
 8017476:	f04f 0300 	mov.w	r3, #0
 801747a:	bf18      	it	ne
 801747c:	2601      	movne	r6, #1
 801747e:	f884 3020 	strb.w	r3, [r4, #32]
 8017482:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 8017486:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08017488 <uxr_is_output_up_to_date>:
 8017488:	8a01      	ldrh	r1, [r0, #16]
 801748a:	8a40      	ldrh	r0, [r0, #18]
 801748c:	b508      	push	{r3, lr}
 801748e:	f000 f95d 	bl	801774c <uxr_seq_num_cmp>
 8017492:	fab0 f080 	clz	r0, r0
 8017496:	0940      	lsrs	r0, r0, #5
 8017498:	bd08      	pop	{r3, pc}
 801749a:	bf00      	nop

0801749c <get_available_free_slots>:
 801749c:	8902      	ldrh	r2, [r0, #8]
 801749e:	b1da      	cbz	r2, 80174d8 <get_available_free_slots+0x3c>
 80174a0:	b530      	push	{r4, r5, lr}
 80174a2:	2100      	movs	r1, #0
 80174a4:	6843      	ldr	r3, [r0, #4]
 80174a6:	6805      	ldr	r5, [r0, #0]
 80174a8:	7b04      	ldrb	r4, [r0, #12]
 80174aa:	fbb3 fef2 	udiv	lr, r3, r2
 80174ae:	4608      	mov	r0, r1
 80174b0:	460b      	mov	r3, r1
 80174b2:	fbb3 fcf2 	udiv	ip, r3, r2
 80174b6:	fb02 331c 	mls	r3, r2, ip, r3
 80174ba:	b29b      	uxth	r3, r3
 80174bc:	fb0e f303 	mul.w	r3, lr, r3
 80174c0:	3101      	adds	r1, #1
 80174c2:	f855 c003 	ldr.w	ip, [r5, r3]
 80174c6:	4564      	cmp	r4, ip
 80174c8:	bf08      	it	eq
 80174ca:	3001      	addeq	r0, #1
 80174cc:	b28b      	uxth	r3, r1
 80174ce:	bf08      	it	eq
 80174d0:	b280      	uxtheq	r0, r0
 80174d2:	4293      	cmp	r3, r2
 80174d4:	d3ed      	bcc.n	80174b2 <get_available_free_slots+0x16>
 80174d6:	bd30      	pop	{r4, r5, pc}
 80174d8:	4610      	mov	r0, r2
 80174da:	4770      	bx	lr

080174dc <uxr_buffer_request_data>:
 80174dc:	b530      	push	{r4, r5, lr}
 80174de:	b095      	sub	sp, #84	@ 0x54
 80174e0:	e9cd 2104 	strd	r2, r1, [sp, #16]
 80174e4:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 80174e6:	9303      	str	r3, [sp, #12]
 80174e8:	2200      	movs	r2, #0
 80174ea:	2d00      	cmp	r5, #0
 80174ec:	bf14      	ite	ne
 80174ee:	2101      	movne	r1, #1
 80174f0:	4611      	moveq	r1, r2
 80174f2:	4604      	mov	r4, r0
 80174f4:	f88d 301c 	strb.w	r3, [sp, #28]
 80174f8:	f88d 201d 	strb.w	r2, [sp, #29]
 80174fc:	f88d 201e 	strb.w	r2, [sp, #30]
 8017500:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 8017504:	d021      	beq.n	801754a <uxr_buffer_request_data+0x6e>
 8017506:	682a      	ldr	r2, [r5, #0]
 8017508:	686b      	ldr	r3, [r5, #4]
 801750a:	f8cd 2026 	str.w	r2, [sp, #38]	@ 0x26
 801750e:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 8017512:	2210      	movs	r2, #16
 8017514:	2308      	movs	r3, #8
 8017516:	2100      	movs	r1, #0
 8017518:	e9cd 3100 	strd	r3, r1, [sp]
 801751c:	4620      	mov	r0, r4
 801751e:	9905      	ldr	r1, [sp, #20]
 8017520:	ab0c      	add	r3, sp, #48	@ 0x30
 8017522:	f7f8 feef 	bl	8010304 <uxr_prepare_stream_to_write_submessage>
 8017526:	b918      	cbnz	r0, 8017530 <uxr_buffer_request_data+0x54>
 8017528:	4604      	mov	r4, r0
 801752a:	4620      	mov	r0, r4
 801752c:	b015      	add	sp, #84	@ 0x54
 801752e:	bd30      	pop	{r4, r5, pc}
 8017530:	9904      	ldr	r1, [sp, #16]
 8017532:	aa06      	add	r2, sp, #24
 8017534:	4620      	mov	r0, r4
 8017536:	f7f9 f81b 	bl	8010570 <uxr_init_base_object_request>
 801753a:	a906      	add	r1, sp, #24
 801753c:	4604      	mov	r4, r0
 801753e:	a80c      	add	r0, sp, #48	@ 0x30
 8017540:	f7fa fb16 	bl	8011b70 <uxr_serialize_READ_DATA_Payload>
 8017544:	4620      	mov	r0, r4
 8017546:	b015      	add	sp, #84	@ 0x54
 8017548:	bd30      	pop	{r4, r5, pc}
 801754a:	2208      	movs	r2, #8
 801754c:	e7e2      	b.n	8017514 <uxr_buffer_request_data+0x38>
 801754e:	bf00      	nop

08017550 <uxr_buffer_cancel_data>:
 8017550:	b510      	push	{r4, lr}
 8017552:	b094      	sub	sp, #80	@ 0x50
 8017554:	2300      	movs	r3, #0
 8017556:	9202      	str	r2, [sp, #8]
 8017558:	9205      	str	r2, [sp, #20]
 801755a:	9301      	str	r3, [sp, #4]
 801755c:	2201      	movs	r2, #1
 801755e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8017562:	f88d 301e 	strb.w	r3, [sp, #30]
 8017566:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 801756a:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 801756e:	2308      	movs	r3, #8
 8017570:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 8017574:	9300      	str	r3, [sp, #0]
 8017576:	2210      	movs	r2, #16
 8017578:	ab0c      	add	r3, sp, #48	@ 0x30
 801757a:	4604      	mov	r4, r0
 801757c:	9103      	str	r1, [sp, #12]
 801757e:	f7f8 fec1 	bl	8010304 <uxr_prepare_stream_to_write_submessage>
 8017582:	b918      	cbnz	r0, 801758c <uxr_buffer_cancel_data+0x3c>
 8017584:	4604      	mov	r4, r0
 8017586:	4620      	mov	r0, r4
 8017588:	b014      	add	sp, #80	@ 0x50
 801758a:	bd10      	pop	{r4, pc}
 801758c:	9905      	ldr	r1, [sp, #20]
 801758e:	aa06      	add	r2, sp, #24
 8017590:	4620      	mov	r0, r4
 8017592:	f7f8 ffed 	bl	8010570 <uxr_init_base_object_request>
 8017596:	a906      	add	r1, sp, #24
 8017598:	4604      	mov	r4, r0
 801759a:	a80c      	add	r0, sp, #48	@ 0x30
 801759c:	f7fa fae8 	bl	8011b70 <uxr_serialize_READ_DATA_Payload>
 80175a0:	4620      	mov	r0, r4
 80175a2:	b014      	add	sp, #80	@ 0x50
 80175a4:	bd10      	pop	{r4, pc}
 80175a6:	bf00      	nop

080175a8 <read_submessage_format>:
 80175a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80175ac:	b095      	sub	sp, #84	@ 0x54
 80175ae:	f8bd 6078 	ldrh.w	r6, [sp, #120]	@ 0x78
 80175b2:	b113      	cbz	r3, 80175ba <read_submessage_format+0x12>
 80175b4:	b015      	add	sp, #84	@ 0x54
 80175b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80175ba:	460c      	mov	r4, r1
 80175bc:	4615      	mov	r5, r2
 80175be:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 80175c2:	4607      	mov	r7, r0
 80175c4:	981c      	ldr	r0, [sp, #112]	@ 0x70
 80175c6:	9004      	str	r0, [sp, #16]
 80175c8:	981d      	ldr	r0, [sp, #116]	@ 0x74
 80175ca:	9005      	str	r0, [sp, #20]
 80175cc:	1a52      	subs	r2, r2, r1
 80175ce:	a80c      	add	r0, sp, #48	@ 0x30
 80175d0:	4699      	mov	r9, r3
 80175d2:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 80175d6:	f7f7 fc17 	bl	800ee08 <ucdr_init_buffer>
 80175da:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80175de:	a80c      	add	r0, sp, #48	@ 0x30
 80175e0:	f7f7 fbe6 	bl	800edb0 <ucdr_set_on_full_buffer_callback>
 80175e4:	69e2      	ldr	r2, [r4, #28]
 80175e6:	b19a      	cbz	r2, 8017610 <read_submessage_format+0x68>
 80175e8:	f1b8 0f07 	cmp.w	r8, #7
 80175ec:	f882 9014 	strb.w	r9, [r2, #20]
 80175f0:	d040      	beq.n	8017674 <read_submessage_format+0xcc>
 80175f2:	f1b8 0f08 	cmp.w	r8, #8
 80175f6:	d02e      	beq.n	8017656 <read_submessage_format+0xae>
 80175f8:	f1b8 0f06 	cmp.w	r8, #6
 80175fc:	d011      	beq.n	8017622 <read_submessage_format+0x7a>
 80175fe:	2301      	movs	r3, #1
 8017600:	7513      	strb	r3, [r2, #20]
 8017602:	4629      	mov	r1, r5
 8017604:	4620      	mov	r0, r4
 8017606:	f7f7 fc4f 	bl	800eea8 <ucdr_advance_buffer>
 801760a:	b015      	add	sp, #84	@ 0x54
 801760c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017610:	f1b8 0f07 	cmp.w	r8, #7
 8017614:	d02e      	beq.n	8017674 <read_submessage_format+0xcc>
 8017616:	f1b8 0f08 	cmp.w	r8, #8
 801761a:	d01c      	beq.n	8017656 <read_submessage_format+0xae>
 801761c:	f1b8 0f06 	cmp.w	r8, #6
 8017620:	d1ef      	bne.n	8017602 <read_submessage_format+0x5a>
 8017622:	f8d7 8088 	ldr.w	r8, [r7, #136]	@ 0x88
 8017626:	f1b8 0f00 	cmp.w	r8, #0
 801762a:	d011      	beq.n	8017650 <read_submessage_format+0xa8>
 801762c:	ab0c      	add	r3, sp, #48	@ 0x30
 801762e:	e9cd 3500 	strd	r3, r5, [sp]
 8017632:	2306      	movs	r3, #6
 8017634:	f88d 3016 	strb.w	r3, [sp, #22]
 8017638:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801763c:	9302      	str	r3, [sp, #8]
 801763e:	4632      	mov	r2, r6
 8017640:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8017644:	4638      	mov	r0, r7
 8017646:	47c0      	blx	r8
 8017648:	2301      	movs	r3, #1
 801764a:	69e2      	ldr	r2, [r4, #28]
 801764c:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8017650:	2a00      	cmp	r2, #0
 8017652:	d1d4      	bne.n	80175fe <read_submessage_format+0x56>
 8017654:	e7d5      	b.n	8017602 <read_submessage_format+0x5a>
 8017656:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801765a:	2b00      	cmp	r3, #0
 801765c:	d0f8      	beq.n	8017650 <read_submessage_format+0xa8>
 801765e:	a906      	add	r1, sp, #24
 8017660:	a80c      	add	r0, sp, #48	@ 0x30
 8017662:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 8017666:	f7fa fb49 	bl	8011cfc <uxr_deserialize_SampleIdentity>
 801766a:	b9a0      	cbnz	r0, 8017696 <read_submessage_format+0xee>
 801766c:	69e2      	ldr	r2, [r4, #28]
 801766e:	2a00      	cmp	r2, #0
 8017670:	d1c5      	bne.n	80175fe <read_submessage_format+0x56>
 8017672:	e7c6      	b.n	8017602 <read_submessage_format+0x5a>
 8017674:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8017678:	b13b      	cbz	r3, 801768a <read_submessage_format+0xe2>
 801767a:	a906      	add	r1, sp, #24
 801767c:	a80c      	add	r0, sp, #48	@ 0x30
 801767e:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 8017682:	f7fa f80f 	bl	80116a4 <uxr_deserialize_BaseObjectRequest>
 8017686:	bb60      	cbnz	r0, 80176e2 <read_submessage_format+0x13a>
 8017688:	69e2      	ldr	r2, [r4, #28]
 801768a:	68a3      	ldr	r3, [r4, #8]
 801768c:	442b      	add	r3, r5
 801768e:	60a3      	str	r3, [r4, #8]
 8017690:	2a00      	cmp	r2, #0
 8017692:	d1b4      	bne.n	80175fe <read_submessage_format+0x56>
 8017694:	e7b5      	b.n	8017602 <read_submessage_format+0x5a>
 8017696:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 801769a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801769c:	1a52      	subs	r2, r2, r1
 801769e:	eba8 0803 	sub.w	r8, r8, r3
 80176a2:	a80c      	add	r0, sp, #48	@ 0x30
 80176a4:	f7f7 fbb0 	bl	800ee08 <ucdr_init_buffer>
 80176a8:	44a8      	add	r8, r5
 80176aa:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80176ae:	a80c      	add	r0, sp, #48	@ 0x30
 80176b0:	f7f7 fb7e 	bl	800edb0 <ucdr_set_on_full_buffer_callback>
 80176b4:	fa1f f888 	uxth.w	r8, r8
 80176b8:	ab0c      	add	r3, sp, #48	@ 0x30
 80176ba:	9300      	str	r3, [sp, #0]
 80176bc:	f8cd 8004 	str.w	r8, [sp, #4]
 80176c0:	2108      	movs	r1, #8
 80176c2:	f88d 1016 	strb.w	r1, [sp, #22]
 80176c6:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 80176ca:	9102      	str	r1, [sp, #8]
 80176cc:	ab06      	add	r3, sp, #24
 80176ce:	4632      	mov	r2, r6
 80176d0:	9905      	ldr	r1, [sp, #20]
 80176d2:	f8d7 60a4 	ldr.w	r6, [r7, #164]	@ 0xa4
 80176d6:	4638      	mov	r0, r7
 80176d8:	47b0      	blx	r6
 80176da:	2301      	movs	r3, #1
 80176dc:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 80176e0:	e7c4      	b.n	801766c <read_submessage_format+0xc4>
 80176e2:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 80176e6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80176e8:	1a52      	subs	r2, r2, r1
 80176ea:	a80c      	add	r0, sp, #48	@ 0x30
 80176ec:	eba8 0803 	sub.w	r8, r8, r3
 80176f0:	f7f7 fb8a 	bl	800ee08 <ucdr_init_buffer>
 80176f4:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80176f8:	a80c      	add	r0, sp, #48	@ 0x30
 80176fa:	f7f7 fb59 	bl	800edb0 <ucdr_set_on_full_buffer_callback>
 80176fe:	ab0c      	add	r3, sp, #48	@ 0x30
 8017700:	9300      	str	r3, [sp, #0]
 8017702:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8017706:	f89d 3019 	ldrb.w	r3, [sp, #25]
 801770a:	44a8      	add	r8, r5
 801770c:	fa1f f888 	uxth.w	r8, r8
 8017710:	f8cd 8004 	str.w	r8, [sp, #4]
 8017714:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8017718:	2107      	movs	r1, #7
 801771a:	f88d 1016 	strb.w	r1, [sp, #22]
 801771e:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 8017722:	9102      	str	r1, [sp, #8]
 8017724:	4632      	mov	r2, r6
 8017726:	b29b      	uxth	r3, r3
 8017728:	f8d7 60ac 	ldr.w	r6, [r7, #172]	@ 0xac
 801772c:	9905      	ldr	r1, [sp, #20]
 801772e:	4638      	mov	r0, r7
 8017730:	47b0      	blx	r6
 8017732:	2301      	movs	r3, #1
 8017734:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8017738:	e7a6      	b.n	8017688 <read_submessage_format+0xe0>
 801773a:	bf00      	nop

0801773c <uxr_seq_num_add>:
 801773c:	4408      	add	r0, r1
 801773e:	b280      	uxth	r0, r0
 8017740:	4770      	bx	lr
 8017742:	bf00      	nop

08017744 <uxr_seq_num_sub>:
 8017744:	1a40      	subs	r0, r0, r1
 8017746:	b280      	uxth	r0, r0
 8017748:	4770      	bx	lr
 801774a:	bf00      	nop

0801774c <uxr_seq_num_cmp>:
 801774c:	4288      	cmp	r0, r1
 801774e:	d011      	beq.n	8017774 <uxr_seq_num_cmp+0x28>
 8017750:	d309      	bcc.n	8017766 <uxr_seq_num_cmp+0x1a>
 8017752:	4288      	cmp	r0, r1
 8017754:	d910      	bls.n	8017778 <uxr_seq_num_cmp+0x2c>
 8017756:	1a40      	subs	r0, r0, r1
 8017758:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 801775c:	bfd4      	ite	le
 801775e:	2001      	movle	r0, #1
 8017760:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 8017764:	4770      	bx	lr
 8017766:	1a0b      	subs	r3, r1, r0
 8017768:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801776c:	daf1      	bge.n	8017752 <uxr_seq_num_cmp+0x6>
 801776e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017772:	4770      	bx	lr
 8017774:	2000      	movs	r0, #0
 8017776:	4770      	bx	lr
 8017778:	2001      	movs	r0, #1
 801777a:	4770      	bx	lr

0801777c <uxr_init_framing_io>:
 801777c:	2300      	movs	r3, #0
 801777e:	7041      	strb	r1, [r0, #1]
 8017780:	7003      	strb	r3, [r0, #0]
 8017782:	8583      	strh	r3, [r0, #44]	@ 0x2c
 8017784:	4770      	bx	lr
 8017786:	bf00      	nop

08017788 <uxr_write_framed_msg>:
 8017788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801778c:	4617      	mov	r7, r2
 801778e:	7842      	ldrb	r2, [r0, #1]
 8017790:	b083      	sub	sp, #12
 8017792:	460e      	mov	r6, r1
 8017794:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 8017798:	469a      	mov	sl, r3
 801779a:	2901      	cmp	r1, #1
 801779c:	f04f 037e 	mov.w	r3, #126	@ 0x7e
 80177a0:	4604      	mov	r4, r0
 80177a2:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 80177a6:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 80177aa:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 80177ae:	f240 8137 	bls.w	8017a20 <uxr_write_framed_msg+0x298>
 80177b2:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 80177b6:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 80177ba:	2901      	cmp	r1, #1
 80177bc:	f04f 0202 	mov.w	r2, #2
 80177c0:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80177c4:	f240 808f 	bls.w	80178e6 <uxr_write_framed_msg+0x15e>
 80177c8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80177ca:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 80177ce:	b2dd      	uxtb	r5, r3
 80177d0:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 80177d4:	2203      	movs	r2, #3
 80177d6:	2901      	cmp	r1, #1
 80177d8:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80177dc:	f240 809a 	bls.w	8017914 <uxr_write_framed_msg+0x18c>
 80177e0:	18a1      	adds	r1, r4, r2
 80177e2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80177e4:	f881 5038 	strb.w	r5, [r1, #56]	@ 0x38
 80177e8:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80177ec:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 80177f0:	3201      	adds	r2, #1
 80177f2:	2801      	cmp	r0, #1
 80177f4:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80177f8:	f240 80a0 	bls.w	801793c <uxr_write_framed_msg+0x1b4>
 80177fc:	18a0      	adds	r0, r4, r2
 80177fe:	3201      	adds	r2, #1
 8017800:	b2d2      	uxtb	r2, r2
 8017802:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8017806:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801780a:	2b00      	cmp	r3, #0
 801780c:	f000 80a9 	beq.w	8017962 <uxr_write_framed_msg+0x1da>
 8017810:	f04f 0900 	mov.w	r9, #0
 8017814:	46c8      	mov	r8, r9
 8017816:	f81a 3008 	ldrb.w	r3, [sl, r8]
 801781a:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 801781e:	2901      	cmp	r1, #1
 8017820:	f240 80c3 	bls.w	80179aa <uxr_write_framed_msg+0x222>
 8017824:	2a29      	cmp	r2, #41	@ 0x29
 8017826:	f200 809f 	bhi.w	8017968 <uxr_write_framed_msg+0x1e0>
 801782a:	18a1      	adds	r1, r4, r2
 801782c:	3201      	adds	r2, #1
 801782e:	b2d2      	uxtb	r2, r2
 8017830:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 8017834:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8017838:	ea89 0303 	eor.w	r3, r9, r3
 801783c:	498c      	ldr	r1, [pc, #560]	@ (8017a70 <uxr_write_framed_msg+0x2e8>)
 801783e:	b2db      	uxtb	r3, r3
 8017840:	f108 0801 	add.w	r8, r8, #1
 8017844:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8017848:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 801784c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801784e:	4543      	cmp	r3, r8
 8017850:	d8e1      	bhi.n	8017816 <uxr_write_framed_msg+0x8e>
 8017852:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8017856:	fa5f f889 	uxtb.w	r8, r9
 801785a:	9301      	str	r3, [sp, #4]
 801785c:	f04f 0900 	mov.w	r9, #0
 8017860:	f1a8 0a7d 	sub.w	sl, r8, #125	@ 0x7d
 8017864:	fa5f f18a 	uxtb.w	r1, sl
 8017868:	2901      	cmp	r1, #1
 801786a:	d921      	bls.n	80178b0 <uxr_write_framed_msg+0x128>
 801786c:	2a29      	cmp	r2, #41	@ 0x29
 801786e:	f240 80af 	bls.w	80179d0 <uxr_write_framed_msg+0x248>
 8017872:	2500      	movs	r5, #0
 8017874:	e000      	b.n	8017878 <uxr_write_framed_msg+0xf0>
 8017876:	b160      	cbz	r0, 8017892 <uxr_write_framed_msg+0x10a>
 8017878:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 801787c:	1b52      	subs	r2, r2, r5
 801787e:	465b      	mov	r3, fp
 8017880:	4421      	add	r1, r4
 8017882:	4638      	mov	r0, r7
 8017884:	47b0      	blx	r6
 8017886:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801788a:	4405      	add	r5, r0
 801788c:	4295      	cmp	r5, r2
 801788e:	d3f2      	bcc.n	8017876 <uxr_write_framed_msg+0xee>
 8017890:	d003      	beq.n	801789a <uxr_write_framed_msg+0x112>
 8017892:	2000      	movs	r0, #0
 8017894:	b003      	add	sp, #12
 8017896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801789a:	fa5f f18a 	uxtb.w	r1, sl
 801789e:	f04f 0300 	mov.w	r3, #0
 80178a2:	2901      	cmp	r1, #1
 80178a4:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 80178a8:	f04f 0200 	mov.w	r2, #0
 80178ac:	f200 8090 	bhi.w	80179d0 <uxr_write_framed_msg+0x248>
 80178b0:	1c51      	adds	r1, r2, #1
 80178b2:	b2c9      	uxtb	r1, r1
 80178b4:	2929      	cmp	r1, #41	@ 0x29
 80178b6:	d8dc      	bhi.n	8017872 <uxr_write_framed_msg+0xea>
 80178b8:	18a5      	adds	r5, r4, r2
 80178ba:	4421      	add	r1, r4
 80178bc:	3202      	adds	r2, #2
 80178be:	f088 0820 	eor.w	r8, r8, #32
 80178c2:	4648      	mov	r0, r9
 80178c4:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 80178c8:	b2d2      	uxtb	r2, r2
 80178ca:	f885 3038 	strb.w	r3, [r5, #56]	@ 0x38
 80178ce:	f04f 0901 	mov.w	r9, #1
 80178d2:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 80178d6:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80178da:	2800      	cmp	r0, #0
 80178dc:	f040 8085 	bne.w	80179ea <uxr_write_framed_msg+0x262>
 80178e0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80178e4:	e7bc      	b.n	8017860 <uxr_write_framed_msg+0xd8>
 80178e6:	4611      	mov	r1, r2
 80178e8:	f04f 0c03 	mov.w	ip, #3
 80178ec:	2204      	movs	r2, #4
 80178ee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80178f0:	4421      	add	r1, r4
 80178f2:	b2dd      	uxtb	r5, r3
 80178f4:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 80178f8:	f881 e038 	strb.w	lr, [r1, #56]	@ 0x38
 80178fc:	44a4      	add	ip, r4
 80178fe:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8017902:	f080 0020 	eor.w	r0, r0, #32
 8017906:	2901      	cmp	r1, #1
 8017908:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 801790c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8017910:	f63f af66 	bhi.w	80177e0 <uxr_write_framed_msg+0x58>
 8017914:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017916:	18a0      	adds	r0, r4, r2
 8017918:	f085 0520 	eor.w	r5, r5, #32
 801791c:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8017920:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8017924:	f880 c038 	strb.w	ip, [r0, #56]	@ 0x38
 8017928:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 801792c:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 8017930:	3202      	adds	r2, #2
 8017932:	2801      	cmp	r0, #1
 8017934:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8017938:	f63f af60 	bhi.w	80177fc <uxr_write_framed_msg+0x74>
 801793c:	1c50      	adds	r0, r2, #1
 801793e:	18a5      	adds	r5, r4, r2
 8017940:	fa54 f080 	uxtab	r0, r4, r0
 8017944:	3202      	adds	r2, #2
 8017946:	f081 0120 	eor.w	r1, r1, #32
 801794a:	b2d2      	uxtb	r2, r2
 801794c:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8017950:	f885 c038 	strb.w	ip, [r5, #56]	@ 0x38
 8017954:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8017958:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801795c:	2b00      	cmp	r3, #0
 801795e:	f47f af57 	bne.w	8017810 <uxr_write_framed_msg+0x88>
 8017962:	9301      	str	r3, [sp, #4]
 8017964:	4698      	mov	r8, r3
 8017966:	e779      	b.n	801785c <uxr_write_framed_msg+0xd4>
 8017968:	2500      	movs	r5, #0
 801796a:	e001      	b.n	8017970 <uxr_write_framed_msg+0x1e8>
 801796c:	2800      	cmp	r0, #0
 801796e:	d090      	beq.n	8017892 <uxr_write_framed_msg+0x10a>
 8017970:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8017974:	1b52      	subs	r2, r2, r5
 8017976:	465b      	mov	r3, fp
 8017978:	4421      	add	r1, r4
 801797a:	4638      	mov	r0, r7
 801797c:	47b0      	blx	r6
 801797e:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8017982:	4405      	add	r5, r0
 8017984:	4295      	cmp	r5, r2
 8017986:	d3f1      	bcc.n	801796c <uxr_write_framed_msg+0x1e4>
 8017988:	d183      	bne.n	8017892 <uxr_write_framed_msg+0x10a>
 801798a:	f04f 0300 	mov.w	r3, #0
 801798e:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8017992:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017994:	4543      	cmp	r3, r8
 8017996:	d964      	bls.n	8017a62 <uxr_write_framed_msg+0x2da>
 8017998:	f81a 3008 	ldrb.w	r3, [sl, r8]
 801799c:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 80179a0:	2901      	cmp	r1, #1
 80179a2:	f04f 0200 	mov.w	r2, #0
 80179a6:	f63f af3d 	bhi.w	8017824 <uxr_write_framed_msg+0x9c>
 80179aa:	1c51      	adds	r1, r2, #1
 80179ac:	b2c9      	uxtb	r1, r1
 80179ae:	2929      	cmp	r1, #41	@ 0x29
 80179b0:	d8da      	bhi.n	8017968 <uxr_write_framed_msg+0x1e0>
 80179b2:	18a0      	adds	r0, r4, r2
 80179b4:	4421      	add	r1, r4
 80179b6:	f04f 057d 	mov.w	r5, #125	@ 0x7d
 80179ba:	3202      	adds	r2, #2
 80179bc:	f880 5038 	strb.w	r5, [r0, #56]	@ 0x38
 80179c0:	b2d2      	uxtb	r2, r2
 80179c2:	f083 0020 	eor.w	r0, r3, #32
 80179c6:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 80179ca:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80179ce:	e733      	b.n	8017838 <uxr_write_framed_msg+0xb0>
 80179d0:	18a1      	adds	r1, r4, r2
 80179d2:	3201      	adds	r2, #1
 80179d4:	4648      	mov	r0, r9
 80179d6:	b2d2      	uxtb	r2, r2
 80179d8:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 80179dc:	f04f 0901 	mov.w	r9, #1
 80179e0:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80179e4:	2800      	cmp	r0, #0
 80179e6:	f43f af7b 	beq.w	80178e0 <uxr_write_framed_msg+0x158>
 80179ea:	2500      	movs	r5, #0
 80179ec:	e002      	b.n	80179f4 <uxr_write_framed_msg+0x26c>
 80179ee:	2800      	cmp	r0, #0
 80179f0:	f43f af4f 	beq.w	8017892 <uxr_write_framed_msg+0x10a>
 80179f4:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 80179f8:	1b52      	subs	r2, r2, r5
 80179fa:	465b      	mov	r3, fp
 80179fc:	4421      	add	r1, r4
 80179fe:	4638      	mov	r0, r7
 8017a00:	47b0      	blx	r6
 8017a02:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8017a06:	4405      	add	r5, r0
 8017a08:	4295      	cmp	r5, r2
 8017a0a:	d3f0      	bcc.n	80179ee <uxr_write_framed_msg+0x266>
 8017a0c:	f47f af41 	bne.w	8017892 <uxr_write_framed_msg+0x10a>
 8017a10:	2300      	movs	r3, #0
 8017a12:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8017a16:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017a18:	b298      	uxth	r0, r3
 8017a1a:	b003      	add	sp, #12
 8017a1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017a20:	217d      	movs	r1, #125	@ 0x7d
 8017a22:	f082 0220 	eor.w	r2, r2, #32
 8017a26:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 8017a2a:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 8017a2e:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 8017a32:	2901      	cmp	r1, #1
 8017a34:	f04f 0203 	mov.w	r2, #3
 8017a38:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8017a3c:	d804      	bhi.n	8017a48 <uxr_write_framed_msg+0x2c0>
 8017a3e:	4611      	mov	r1, r2
 8017a40:	f04f 0c04 	mov.w	ip, #4
 8017a44:	2205      	movs	r2, #5
 8017a46:	e752      	b.n	80178ee <uxr_write_framed_msg+0x166>
 8017a48:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017a4a:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 8017a4e:	b2dd      	uxtb	r5, r3
 8017a50:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8017a54:	2204      	movs	r2, #4
 8017a56:	2901      	cmp	r1, #1
 8017a58:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8017a5c:	f63f aec0 	bhi.w	80177e0 <uxr_write_framed_msg+0x58>
 8017a60:	e758      	b.n	8017914 <uxr_write_framed_msg+0x18c>
 8017a62:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8017a66:	fa5f f889 	uxtb.w	r8, r9
 8017a6a:	9301      	str	r3, [sp, #4]
 8017a6c:	2200      	movs	r2, #0
 8017a6e:	e6f5      	b.n	801785c <uxr_write_framed_msg+0xd4>
 8017a70:	0801b710 	.word	0x0801b710

08017a74 <uxr_framing_read_transport>:
 8017a74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a78:	4604      	mov	r4, r0
 8017a7a:	b083      	sub	sp, #12
 8017a7c:	461f      	mov	r7, r3
 8017a7e:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 8017a82:	4689      	mov	r9, r1
 8017a84:	4692      	mov	sl, r2
 8017a86:	f7f8 ff21 	bl	80108cc <uxr_millis>
 8017a8a:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8017a8e:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 8017a92:	42b3      	cmp	r3, r6
 8017a94:	4680      	mov	r8, r0
 8017a96:	d061      	beq.n	8017b5c <uxr_framing_read_transport+0xe8>
 8017a98:	d81c      	bhi.n	8017ad4 <uxr_framing_read_transport+0x60>
 8017a9a:	1e75      	subs	r5, r6, #1
 8017a9c:	1aed      	subs	r5, r5, r3
 8017a9e:	b2ed      	uxtb	r5, r5
 8017aa0:	2600      	movs	r6, #0
 8017aa2:	455d      	cmp	r5, fp
 8017aa4:	d81f      	bhi.n	8017ae6 <uxr_framing_read_transport+0x72>
 8017aa6:	19ab      	adds	r3, r5, r6
 8017aa8:	455b      	cmp	r3, fp
 8017aaa:	bf84      	itt	hi
 8017aac:	ebab 0605 	subhi.w	r6, fp, r5
 8017ab0:	b2f6      	uxtbhi	r6, r6
 8017ab2:	b9ed      	cbnz	r5, 8017af0 <uxr_framing_read_transport+0x7c>
 8017ab4:	f04f 0b00 	mov.w	fp, #0
 8017ab8:	f7f8 ff08 	bl	80108cc <uxr_millis>
 8017abc:	683b      	ldr	r3, [r7, #0]
 8017abe:	eba0 0808 	sub.w	r8, r0, r8
 8017ac2:	eba3 0308 	sub.w	r3, r3, r8
 8017ac6:	4658      	mov	r0, fp
 8017ac8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017acc:	603b      	str	r3, [r7, #0]
 8017ace:	b003      	add	sp, #12
 8017ad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017ad4:	2e00      	cmp	r6, #0
 8017ad6:	d049      	beq.n	8017b6c <uxr_framing_read_transport+0xf8>
 8017ad8:	f1c3 052a 	rsb	r5, r3, #42	@ 0x2a
 8017adc:	b2ed      	uxtb	r5, r5
 8017ade:	3e01      	subs	r6, #1
 8017ae0:	455d      	cmp	r5, fp
 8017ae2:	b2f6      	uxtb	r6, r6
 8017ae4:	d9df      	bls.n	8017aa6 <uxr_framing_read_transport+0x32>
 8017ae6:	fa5f f58b 	uxtb.w	r5, fp
 8017aea:	2600      	movs	r6, #0
 8017aec:	2d00      	cmp	r5, #0
 8017aee:	d0e1      	beq.n	8017ab4 <uxr_framing_read_transport+0x40>
 8017af0:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8017af4:	3102      	adds	r1, #2
 8017af6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017af8:	9300      	str	r3, [sp, #0]
 8017afa:	683b      	ldr	r3, [r7, #0]
 8017afc:	4421      	add	r1, r4
 8017afe:	462a      	mov	r2, r5
 8017b00:	4650      	mov	r0, sl
 8017b02:	47c8      	blx	r9
 8017b04:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8017b08:	4a1a      	ldr	r2, [pc, #104]	@ (8017b74 <uxr_framing_read_transport+0x100>)
 8017b0a:	4403      	add	r3, r0
 8017b0c:	0859      	lsrs	r1, r3, #1
 8017b0e:	fba2 2101 	umull	r2, r1, r2, r1
 8017b12:	0889      	lsrs	r1, r1, #2
 8017b14:	222a      	movs	r2, #42	@ 0x2a
 8017b16:	fb02 3111 	mls	r1, r2, r1, r3
 8017b1a:	4683      	mov	fp, r0
 8017b1c:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 8017b20:	2800      	cmp	r0, #0
 8017b22:	d0c7      	beq.n	8017ab4 <uxr_framing_read_transport+0x40>
 8017b24:	42a8      	cmp	r0, r5
 8017b26:	d1c7      	bne.n	8017ab8 <uxr_framing_read_transport+0x44>
 8017b28:	2e00      	cmp	r6, #0
 8017b2a:	d0c5      	beq.n	8017ab8 <uxr_framing_read_transport+0x44>
 8017b2c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017b2e:	9300      	str	r3, [sp, #0]
 8017b30:	3102      	adds	r1, #2
 8017b32:	4632      	mov	r2, r6
 8017b34:	4421      	add	r1, r4
 8017b36:	2300      	movs	r3, #0
 8017b38:	4650      	mov	r0, sl
 8017b3a:	47c8      	blx	r9
 8017b3c:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8017b40:	4a0c      	ldr	r2, [pc, #48]	@ (8017b74 <uxr_framing_read_transport+0x100>)
 8017b42:	180b      	adds	r3, r1, r0
 8017b44:	0859      	lsrs	r1, r3, #1
 8017b46:	fba2 1201 	umull	r1, r2, r2, r1
 8017b4a:	0892      	lsrs	r2, r2, #2
 8017b4c:	212a      	movs	r1, #42	@ 0x2a
 8017b4e:	fb01 3312 	mls	r3, r1, r2, r3
 8017b52:	eb00 0b05 	add.w	fp, r0, r5
 8017b56:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8017b5a:	e7ad      	b.n	8017ab8 <uxr_framing_read_transport+0x44>
 8017b5c:	2600      	movs	r6, #0
 8017b5e:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 8017b62:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 8017b64:	d9bf      	bls.n	8017ae6 <uxr_framing_read_transport+0x72>
 8017b66:	2102      	movs	r1, #2
 8017b68:	2529      	movs	r5, #41	@ 0x29
 8017b6a:	e7c4      	b.n	8017af6 <uxr_framing_read_transport+0x82>
 8017b6c:	f1c3 0529 	rsb	r5, r3, #41	@ 0x29
 8017b70:	b2ed      	uxtb	r5, r5
 8017b72:	e796      	b.n	8017aa2 <uxr_framing_read_transport+0x2e>
 8017b74:	30c30c31 	.word	0x30c30c31

08017b78 <uxr_read_framed_msg>:
 8017b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017b7c:	461e      	mov	r6, r3
 8017b7e:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 8017b82:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 8017b86:	429d      	cmp	r5, r3
 8017b88:	b083      	sub	sp, #12
 8017b8a:	4604      	mov	r4, r0
 8017b8c:	4688      	mov	r8, r1
 8017b8e:	4691      	mov	r9, r2
 8017b90:	f000 8188 	beq.w	8017ea4 <uxr_read_framed_msg+0x32c>
 8017b94:	7823      	ldrb	r3, [r4, #0]
 8017b96:	4dc1      	ldr	r5, [pc, #772]	@ (8017e9c <uxr_read_framed_msg+0x324>)
 8017b98:	4fc1      	ldr	r7, [pc, #772]	@ (8017ea0 <uxr_read_framed_msg+0x328>)
 8017b9a:	2b07      	cmp	r3, #7
 8017b9c:	d8fd      	bhi.n	8017b9a <uxr_read_framed_msg+0x22>
 8017b9e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8017ba2:	0115      	.short	0x0115
 8017ba4:	00d600f6 	.word	0x00d600f6
 8017ba8:	009000b9 	.word	0x009000b9
 8017bac:	0030004d 	.word	0x0030004d
 8017bb0:	0008      	.short	0x0008
 8017bb2:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8017bb6:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8017bba:	4299      	cmp	r1, r3
 8017bbc:	f000 814a 	beq.w	8017e54 <uxr_read_framed_msg+0x2dc>
 8017bc0:	18e2      	adds	r2, r4, r3
 8017bc2:	7892      	ldrb	r2, [r2, #2]
 8017bc4:	2a7d      	cmp	r2, #125	@ 0x7d
 8017bc6:	f000 8199 	beq.w	8017efc <uxr_read_framed_msg+0x384>
 8017bca:	3301      	adds	r3, #1
 8017bcc:	0858      	lsrs	r0, r3, #1
 8017bce:	fba5 1000 	umull	r1, r0, r5, r0
 8017bd2:	0880      	lsrs	r0, r0, #2
 8017bd4:	212a      	movs	r1, #42	@ 0x2a
 8017bd6:	fb01 3310 	mls	r3, r1, r0, r3
 8017bda:	2a7e      	cmp	r2, #126	@ 0x7e
 8017bdc:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8017be0:	f000 8252 	beq.w	8018088 <uxr_read_framed_msg+0x510>
 8017be4:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8017be6:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 8017be8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8017bec:	b29b      	uxth	r3, r3
 8017bee:	2200      	movs	r2, #0
 8017bf0:	4299      	cmp	r1, r3
 8017bf2:	86a3      	strh	r3, [r4, #52]	@ 0x34
 8017bf4:	7022      	strb	r2, [r4, #0]
 8017bf6:	f000 8179 	beq.w	8017eec <uxr_read_framed_msg+0x374>
 8017bfa:	2000      	movs	r0, #0
 8017bfc:	b003      	add	sp, #12
 8017bfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017c02:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8017c06:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8017c0a:	4299      	cmp	r1, r3
 8017c0c:	f000 8131 	beq.w	8017e72 <uxr_read_framed_msg+0x2fa>
 8017c10:	18e2      	adds	r2, r4, r3
 8017c12:	7890      	ldrb	r0, [r2, #2]
 8017c14:	287d      	cmp	r0, #125	@ 0x7d
 8017c16:	f000 8190 	beq.w	8017f3a <uxr_read_framed_msg+0x3c2>
 8017c1a:	3301      	adds	r3, #1
 8017c1c:	085a      	lsrs	r2, r3, #1
 8017c1e:	fba5 1202 	umull	r1, r2, r5, r2
 8017c22:	0892      	lsrs	r2, r2, #2
 8017c24:	212a      	movs	r1, #42	@ 0x2a
 8017c26:	fb01 3312 	mls	r3, r1, r2, r3
 8017c2a:	287e      	cmp	r0, #126	@ 0x7e
 8017c2c:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8017c30:	f000 821a 	beq.w	8018068 <uxr_read_framed_msg+0x4f0>
 8017c34:	2307      	movs	r3, #7
 8017c36:	86a0      	strh	r0, [r4, #52]	@ 0x34
 8017c38:	7023      	strb	r3, [r4, #0]
 8017c3a:	e7ae      	b.n	8017b9a <uxr_read_framed_msg+0x22>
 8017c3c:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8017c3e:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8017c42:	459e      	cmp	lr, r3
 8017c44:	d938      	bls.n	8017cb8 <uxr_read_framed_msg+0x140>
 8017c46:	ee07 8a90 	vmov	s15, r8
 8017c4a:	212a      	movs	r1, #42	@ 0x2a
 8017c4c:	e020      	b.n	8017c90 <uxr_read_framed_msg+0x118>
 8017c4e:	f89b c002 	ldrb.w	ip, [fp, #2]
 8017c52:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 8017c56:	f000 80d4 	beq.w	8017e02 <uxr_read_framed_msg+0x28a>
 8017c5a:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8017c5e:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8017c62:	f000 8219 	beq.w	8018098 <uxr_read_framed_msg+0x520>
 8017c66:	f806 c003 	strb.w	ip, [r6, r3]
 8017c6a:	f8b4 a036 	ldrh.w	sl, [r4, #54]	@ 0x36
 8017c6e:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8017c70:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8017c74:	ea8a 000c 	eor.w	r0, sl, ip
 8017c78:	b2c0      	uxtb	r0, r0
 8017c7a:	3301      	adds	r3, #1
 8017c7c:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 8017c80:	b29b      	uxth	r3, r3
 8017c82:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 8017c86:	4573      	cmp	r3, lr
 8017c88:	8663      	strh	r3, [r4, #50]	@ 0x32
 8017c8a:	86e2      	strh	r2, [r4, #54]	@ 0x36
 8017c8c:	f080 8120 	bcs.w	8017ed0 <uxr_read_framed_msg+0x358>
 8017c90:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 8017c94:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 8017c98:	f100 0c01 	add.w	ip, r0, #1
 8017c9c:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8017ca0:	fba5 8202 	umull	r8, r2, r5, r2
 8017ca4:	0892      	lsrs	r2, r2, #2
 8017ca6:	4582      	cmp	sl, r0
 8017ca8:	eb04 0b00 	add.w	fp, r4, r0
 8017cac:	fb01 c212 	mls	r2, r1, r2, ip
 8017cb0:	d1cd      	bne.n	8017c4e <uxr_read_framed_msg+0xd6>
 8017cb2:	ee17 8a90 	vmov	r8, s15
 8017cb6:	459e      	cmp	lr, r3
 8017cb8:	f040 8111 	bne.w	8017ede <uxr_read_framed_msg+0x366>
 8017cbc:	2306      	movs	r3, #6
 8017cbe:	7023      	strb	r3, [r4, #0]
 8017cc0:	e76b      	b.n	8017b9a <uxr_read_framed_msg+0x22>
 8017cc2:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8017cc6:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8017cca:	4298      	cmp	r0, r3
 8017ccc:	f000 80c2 	beq.w	8017e54 <uxr_read_framed_msg+0x2dc>
 8017cd0:	18e2      	adds	r2, r4, r3
 8017cd2:	7891      	ldrb	r1, [r2, #2]
 8017cd4:	297d      	cmp	r1, #125	@ 0x7d
 8017cd6:	f000 814c 	beq.w	8017f72 <uxr_read_framed_msg+0x3fa>
 8017cda:	3301      	adds	r3, #1
 8017cdc:	085a      	lsrs	r2, r3, #1
 8017cde:	fba5 0202 	umull	r0, r2, r5, r2
 8017ce2:	0892      	lsrs	r2, r2, #2
 8017ce4:	202a      	movs	r0, #42	@ 0x2a
 8017ce6:	fb00 3312 	mls	r3, r0, r2, r3
 8017cea:	297e      	cmp	r1, #126	@ 0x7e
 8017cec:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8017cf0:	f000 81ca 	beq.w	8018088 <uxr_read_framed_msg+0x510>
 8017cf4:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 8017cf6:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8017cfa:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8017cfc:	b29b      	uxth	r3, r3
 8017cfe:	2000      	movs	r0, #0
 8017d00:	428b      	cmp	r3, r1
 8017d02:	8623      	strh	r3, [r4, #48]	@ 0x30
 8017d04:	8660      	strh	r0, [r4, #50]	@ 0x32
 8017d06:	86e0      	strh	r0, [r4, #54]	@ 0x36
 8017d08:	f240 80df 	bls.w	8017eca <uxr_read_framed_msg+0x352>
 8017d0c:	7020      	strb	r0, [r4, #0]
 8017d0e:	b003      	add	sp, #12
 8017d10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017d14:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8017d18:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8017d1c:	4299      	cmp	r1, r3
 8017d1e:	f000 80a8 	beq.w	8017e72 <uxr_read_framed_msg+0x2fa>
 8017d22:	18e2      	adds	r2, r4, r3
 8017d24:	7890      	ldrb	r0, [r2, #2]
 8017d26:	287d      	cmp	r0, #125	@ 0x7d
 8017d28:	f000 8164 	beq.w	8017ff4 <uxr_read_framed_msg+0x47c>
 8017d2c:	3301      	adds	r3, #1
 8017d2e:	085a      	lsrs	r2, r3, #1
 8017d30:	fba5 1202 	umull	r1, r2, r5, r2
 8017d34:	0892      	lsrs	r2, r2, #2
 8017d36:	212a      	movs	r1, #42	@ 0x2a
 8017d38:	fb01 3312 	mls	r3, r1, r2, r3
 8017d3c:	287e      	cmp	r0, #126	@ 0x7e
 8017d3e:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8017d42:	f000 8191 	beq.w	8018068 <uxr_read_framed_msg+0x4f0>
 8017d46:	2304      	movs	r3, #4
 8017d48:	8620      	strh	r0, [r4, #48]	@ 0x30
 8017d4a:	7023      	strb	r3, [r4, #0]
 8017d4c:	e725      	b.n	8017b9a <uxr_read_framed_msg+0x22>
 8017d4e:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8017d52:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8017d56:	4290      	cmp	r0, r2
 8017d58:	f000 80b3 	beq.w	8017ec2 <uxr_read_framed_msg+0x34a>
 8017d5c:	18a3      	adds	r3, r4, r2
 8017d5e:	7899      	ldrb	r1, [r3, #2]
 8017d60:	297d      	cmp	r1, #125	@ 0x7d
 8017d62:	f000 8164 	beq.w	801802e <uxr_read_framed_msg+0x4b6>
 8017d66:	3201      	adds	r2, #1
 8017d68:	0850      	lsrs	r0, r2, #1
 8017d6a:	fba5 3000 	umull	r3, r0, r5, r0
 8017d6e:	0880      	lsrs	r0, r0, #2
 8017d70:	232a      	movs	r3, #42	@ 0x2a
 8017d72:	fb03 2210 	mls	r2, r3, r0, r2
 8017d76:	297e      	cmp	r1, #126	@ 0x7e
 8017d78:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8017d7c:	f000 8188 	beq.w	8018090 <uxr_read_framed_msg+0x518>
 8017d80:	7863      	ldrb	r3, [r4, #1]
 8017d82:	428b      	cmp	r3, r1
 8017d84:	bf0c      	ite	eq
 8017d86:	2303      	moveq	r3, #3
 8017d88:	2300      	movne	r3, #0
 8017d8a:	7023      	strb	r3, [r4, #0]
 8017d8c:	e705      	b.n	8017b9a <uxr_read_framed_msg+0x22>
 8017d8e:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8017d92:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8017d96:	2200      	movs	r2, #0
 8017d98:	4299      	cmp	r1, r3
 8017d9a:	f884 202e 	strb.w	r2, [r4, #46]	@ 0x2e
 8017d9e:	d06c      	beq.n	8017e7a <uxr_read_framed_msg+0x302>
 8017da0:	18e2      	adds	r2, r4, r3
 8017da2:	7890      	ldrb	r0, [r2, #2]
 8017da4:	287d      	cmp	r0, #125	@ 0x7d
 8017da6:	f000 8101 	beq.w	8017fac <uxr_read_framed_msg+0x434>
 8017daa:	3301      	adds	r3, #1
 8017dac:	085a      	lsrs	r2, r3, #1
 8017dae:	fba5 1202 	umull	r1, r2, r5, r2
 8017db2:	0892      	lsrs	r2, r2, #2
 8017db4:	212a      	movs	r1, #42	@ 0x2a
 8017db6:	fb01 3312 	mls	r3, r1, r2, r3
 8017dba:	287e      	cmp	r0, #126	@ 0x7e
 8017dbc:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 8017dc0:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8017dc4:	d059      	beq.n	8017e7a <uxr_read_framed_msg+0x302>
 8017dc6:	2302      	movs	r3, #2
 8017dc8:	7023      	strb	r3, [r4, #0]
 8017dca:	e6e6      	b.n	8017b9a <uxr_read_framed_msg+0x22>
 8017dcc:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 8017dd0:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8017dd4:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 8017dd8:	1c51      	adds	r1, r2, #1
 8017dda:	084b      	lsrs	r3, r1, #1
 8017ddc:	fba5 c303 	umull	ip, r3, r5, r3
 8017de0:	089b      	lsrs	r3, r3, #2
 8017de2:	fb0e 1313 	mls	r3, lr, r3, r1
 8017de6:	4592      	cmp	sl, r2
 8017de8:	eb04 0002 	add.w	r0, r4, r2
 8017dec:	b2da      	uxtb	r2, r3
 8017dee:	f43f af04 	beq.w	8017bfa <uxr_read_framed_msg+0x82>
 8017df2:	7883      	ldrb	r3, [r0, #2]
 8017df4:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8017df8:	2b7e      	cmp	r3, #126	@ 0x7e
 8017dfa:	d1ed      	bne.n	8017dd8 <uxr_read_framed_msg+0x260>
 8017dfc:	2301      	movs	r3, #1
 8017dfe:	7023      	strb	r3, [r4, #0]
 8017e00:	e6cb      	b.n	8017b9a <uxr_read_framed_msg+0x22>
 8017e02:	f100 0c01 	add.w	ip, r0, #1
 8017e06:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8017e0a:	fba5 8202 	umull	r8, r2, r5, r2
 8017e0e:	0892      	lsrs	r2, r2, #2
 8017e10:	fb01 c212 	mls	r2, r1, r2, ip
 8017e14:	eb04 0c02 	add.w	ip, r4, r2
 8017e18:	b2d2      	uxtb	r2, r2
 8017e1a:	4592      	cmp	sl, r2
 8017e1c:	f100 0002 	add.w	r0, r0, #2
 8017e20:	f43f af47 	beq.w	8017cb2 <uxr_read_framed_msg+0x13a>
 8017e24:	0842      	lsrs	r2, r0, #1
 8017e26:	f89c a002 	ldrb.w	sl, [ip, #2]
 8017e2a:	fba5 8202 	umull	r8, r2, r5, r2
 8017e2e:	0892      	lsrs	r2, r2, #2
 8017e30:	fb01 0012 	mls	r0, r1, r2, r0
 8017e34:	f1ba 0f7e 	cmp.w	sl, #126	@ 0x7e
 8017e38:	f08a 0c20 	eor.w	ip, sl, #32
 8017e3c:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 8017e40:	f47f af11 	bne.w	8017c66 <uxr_read_framed_msg+0xee>
 8017e44:	459e      	cmp	lr, r3
 8017e46:	ee17 8a90 	vmov	r8, s15
 8017e4a:	f43f af37 	beq.w	8017cbc <uxr_read_framed_msg+0x144>
 8017e4e:	2301      	movs	r3, #1
 8017e50:	7023      	strb	r3, [r4, #0]
 8017e52:	e6a2      	b.n	8017b9a <uxr_read_framed_msg+0x22>
 8017e54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017e56:	9300      	str	r3, [sp, #0]
 8017e58:	2301      	movs	r3, #1
 8017e5a:	9301      	str	r3, [sp, #4]
 8017e5c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017e5e:	464a      	mov	r2, r9
 8017e60:	4641      	mov	r1, r8
 8017e62:	4620      	mov	r0, r4
 8017e64:	f7ff fe06 	bl	8017a74 <uxr_framing_read_transport>
 8017e68:	2800      	cmp	r0, #0
 8017e6a:	f43f aec6 	beq.w	8017bfa <uxr_read_framed_msg+0x82>
 8017e6e:	7823      	ldrb	r3, [r4, #0]
 8017e70:	e693      	b.n	8017b9a <uxr_read_framed_msg+0x22>
 8017e72:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017e74:	9300      	str	r3, [sp, #0]
 8017e76:	2302      	movs	r3, #2
 8017e78:	e7ef      	b.n	8017e5a <uxr_read_framed_msg+0x2e2>
 8017e7a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017e7c:	9300      	str	r3, [sp, #0]
 8017e7e:	2304      	movs	r3, #4
 8017e80:	9301      	str	r3, [sp, #4]
 8017e82:	464a      	mov	r2, r9
 8017e84:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017e86:	4641      	mov	r1, r8
 8017e88:	4620      	mov	r0, r4
 8017e8a:	f7ff fdf3 	bl	8017a74 <uxr_framing_read_transport>
 8017e8e:	2800      	cmp	r0, #0
 8017e90:	d1ed      	bne.n	8017e6e <uxr_read_framed_msg+0x2f6>
 8017e92:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8017e96:	2b7e      	cmp	r3, #126	@ 0x7e
 8017e98:	d0e9      	beq.n	8017e6e <uxr_read_framed_msg+0x2f6>
 8017e9a:	e6ae      	b.n	8017bfa <uxr_read_framed_msg+0x82>
 8017e9c:	30c30c31 	.word	0x30c30c31
 8017ea0:	0801b710 	.word	0x0801b710
 8017ea4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017ea6:	9300      	str	r3, [sp, #0]
 8017ea8:	2305      	movs	r3, #5
 8017eaa:	9301      	str	r3, [sp, #4]
 8017eac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017eae:	f7ff fde1 	bl	8017a74 <uxr_framing_read_transport>
 8017eb2:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8017eb6:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8017eba:	429a      	cmp	r2, r3
 8017ebc:	f43f ae9d 	beq.w	8017bfa <uxr_read_framed_msg+0x82>
 8017ec0:	e668      	b.n	8017b94 <uxr_read_framed_msg+0x1c>
 8017ec2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017ec4:	9300      	str	r3, [sp, #0]
 8017ec6:	2303      	movs	r3, #3
 8017ec8:	e7c7      	b.n	8017e5a <uxr_read_framed_msg+0x2e2>
 8017eca:	2305      	movs	r3, #5
 8017ecc:	7023      	strb	r3, [r4, #0]
 8017ece:	e664      	b.n	8017b9a <uxr_read_framed_msg+0x22>
 8017ed0:	ee17 8a90 	vmov	r8, s15
 8017ed4:	f43f aef2 	beq.w	8017cbc <uxr_read_framed_msg+0x144>
 8017ed8:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8017edc:	d08e      	beq.n	8017dfc <uxr_read_framed_msg+0x284>
 8017ede:	ebae 0303 	sub.w	r3, lr, r3
 8017ee2:	3302      	adds	r3, #2
 8017ee4:	9301      	str	r3, [sp, #4]
 8017ee6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017ee8:	9300      	str	r3, [sp, #0]
 8017eea:	e7b7      	b.n	8017e5c <uxr_read_framed_msg+0x2e4>
 8017eec:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8017eee:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8017ef2:	7013      	strb	r3, [r2, #0]
 8017ef4:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 8017ef6:	b003      	add	sp, #12
 8017ef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017efc:	f103 0c01 	add.w	ip, r3, #1
 8017f00:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8017f04:	fba5 0202 	umull	r0, r2, r5, r2
 8017f08:	0892      	lsrs	r2, r2, #2
 8017f0a:	202a      	movs	r0, #42	@ 0x2a
 8017f0c:	fb00 c212 	mls	r2, r0, r2, ip
 8017f10:	fa5f fc82 	uxtb.w	ip, r2
 8017f14:	4561      	cmp	r1, ip
 8017f16:	d09d      	beq.n	8017e54 <uxr_read_framed_msg+0x2dc>
 8017f18:	3302      	adds	r3, #2
 8017f1a:	4422      	add	r2, r4
 8017f1c:	0859      	lsrs	r1, r3, #1
 8017f1e:	7892      	ldrb	r2, [r2, #2]
 8017f20:	fba5 c101 	umull	ip, r1, r5, r1
 8017f24:	0889      	lsrs	r1, r1, #2
 8017f26:	fb00 3311 	mls	r3, r0, r1, r3
 8017f2a:	2a7e      	cmp	r2, #126	@ 0x7e
 8017f2c:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8017f30:	f000 80aa 	beq.w	8018088 <uxr_read_framed_msg+0x510>
 8017f34:	f082 0220 	eor.w	r2, r2, #32
 8017f38:	e654      	b.n	8017be4 <uxr_read_framed_msg+0x6c>
 8017f3a:	1c58      	adds	r0, r3, #1
 8017f3c:	0842      	lsrs	r2, r0, #1
 8017f3e:	fba5 c202 	umull	ip, r2, r5, r2
 8017f42:	0892      	lsrs	r2, r2, #2
 8017f44:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8017f48:	fb0c 0212 	mls	r2, ip, r2, r0
 8017f4c:	b2d0      	uxtb	r0, r2
 8017f4e:	4281      	cmp	r1, r0
 8017f50:	d08f      	beq.n	8017e72 <uxr_read_framed_msg+0x2fa>
 8017f52:	4422      	add	r2, r4
 8017f54:	3302      	adds	r3, #2
 8017f56:	7890      	ldrb	r0, [r2, #2]
 8017f58:	085a      	lsrs	r2, r3, #1
 8017f5a:	fba5 1202 	umull	r1, r2, r5, r2
 8017f5e:	0892      	lsrs	r2, r2, #2
 8017f60:	fb0c 3312 	mls	r3, ip, r2, r3
 8017f64:	287e      	cmp	r0, #126	@ 0x7e
 8017f66:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8017f6a:	d07d      	beq.n	8018068 <uxr_read_framed_msg+0x4f0>
 8017f6c:	f080 0020 	eor.w	r0, r0, #32
 8017f70:	e660      	b.n	8017c34 <uxr_read_framed_msg+0xbc>
 8017f72:	1c59      	adds	r1, r3, #1
 8017f74:	084a      	lsrs	r2, r1, #1
 8017f76:	fba5 c202 	umull	ip, r2, r5, r2
 8017f7a:	0892      	lsrs	r2, r2, #2
 8017f7c:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8017f80:	fb0c 1212 	mls	r2, ip, r2, r1
 8017f84:	b2d1      	uxtb	r1, r2
 8017f86:	4288      	cmp	r0, r1
 8017f88:	f43f af64 	beq.w	8017e54 <uxr_read_framed_msg+0x2dc>
 8017f8c:	4422      	add	r2, r4
 8017f8e:	3302      	adds	r3, #2
 8017f90:	7891      	ldrb	r1, [r2, #2]
 8017f92:	085a      	lsrs	r2, r3, #1
 8017f94:	fba5 0202 	umull	r0, r2, r5, r2
 8017f98:	0892      	lsrs	r2, r2, #2
 8017f9a:	fb0c 3312 	mls	r3, ip, r2, r3
 8017f9e:	297e      	cmp	r1, #126	@ 0x7e
 8017fa0:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8017fa4:	d070      	beq.n	8018088 <uxr_read_framed_msg+0x510>
 8017fa6:	f081 0120 	eor.w	r1, r1, #32
 8017faa:	e6a3      	b.n	8017cf4 <uxr_read_framed_msg+0x17c>
 8017fac:	f103 0c01 	add.w	ip, r3, #1
 8017fb0:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8017fb4:	fba5 0202 	umull	r0, r2, r5, r2
 8017fb8:	0892      	lsrs	r2, r2, #2
 8017fba:	202a      	movs	r0, #42	@ 0x2a
 8017fbc:	fb00 c212 	mls	r2, r0, r2, ip
 8017fc0:	fa5f fc82 	uxtb.w	ip, r2
 8017fc4:	4561      	cmp	r1, ip
 8017fc6:	f43f af58 	beq.w	8017e7a <uxr_read_framed_msg+0x302>
 8017fca:	4422      	add	r2, r4
 8017fcc:	3302      	adds	r3, #2
 8017fce:	7891      	ldrb	r1, [r2, #2]
 8017fd0:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 8017fd4:	085a      	lsrs	r2, r3, #1
 8017fd6:	fba5 c202 	umull	ip, r2, r5, r2
 8017fda:	0892      	lsrs	r2, r2, #2
 8017fdc:	fb00 3312 	mls	r3, r0, r2, r3
 8017fe0:	297e      	cmp	r1, #126	@ 0x7e
 8017fe2:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8017fe6:	f43f af48 	beq.w	8017e7a <uxr_read_framed_msg+0x302>
 8017fea:	f081 0120 	eor.w	r1, r1, #32
 8017fee:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 8017ff2:	e6e8      	b.n	8017dc6 <uxr_read_framed_msg+0x24e>
 8017ff4:	1c58      	adds	r0, r3, #1
 8017ff6:	0842      	lsrs	r2, r0, #1
 8017ff8:	fba5 c202 	umull	ip, r2, r5, r2
 8017ffc:	0892      	lsrs	r2, r2, #2
 8017ffe:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8018002:	fb0c 0212 	mls	r2, ip, r2, r0
 8018006:	b2d0      	uxtb	r0, r2
 8018008:	4281      	cmp	r1, r0
 801800a:	f43f af32 	beq.w	8017e72 <uxr_read_framed_msg+0x2fa>
 801800e:	4422      	add	r2, r4
 8018010:	3302      	adds	r3, #2
 8018012:	7890      	ldrb	r0, [r2, #2]
 8018014:	085a      	lsrs	r2, r3, #1
 8018016:	fba5 1202 	umull	r1, r2, r5, r2
 801801a:	0892      	lsrs	r2, r2, #2
 801801c:	fb0c 3312 	mls	r3, ip, r2, r3
 8018020:	287e      	cmp	r0, #126	@ 0x7e
 8018022:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8018026:	d01f      	beq.n	8018068 <uxr_read_framed_msg+0x4f0>
 8018028:	f080 0020 	eor.w	r0, r0, #32
 801802c:	e68b      	b.n	8017d46 <uxr_read_framed_msg+0x1ce>
 801802e:	1c51      	adds	r1, r2, #1
 8018030:	084b      	lsrs	r3, r1, #1
 8018032:	fba5 c303 	umull	ip, r3, r5, r3
 8018036:	089b      	lsrs	r3, r3, #2
 8018038:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 801803c:	fb0c 1313 	mls	r3, ip, r3, r1
 8018040:	b2d9      	uxtb	r1, r3
 8018042:	4288      	cmp	r0, r1
 8018044:	f43f af3d 	beq.w	8017ec2 <uxr_read_framed_msg+0x34a>
 8018048:	3202      	adds	r2, #2
 801804a:	4423      	add	r3, r4
 801804c:	0850      	lsrs	r0, r2, #1
 801804e:	789b      	ldrb	r3, [r3, #2]
 8018050:	fba5 1000 	umull	r1, r0, r5, r0
 8018054:	0880      	lsrs	r0, r0, #2
 8018056:	fb0c 2210 	mls	r2, ip, r0, r2
 801805a:	2b7e      	cmp	r3, #126	@ 0x7e
 801805c:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8018060:	d016      	beq.n	8018090 <uxr_read_framed_msg+0x518>
 8018062:	f083 0120 	eor.w	r1, r3, #32
 8018066:	e68b      	b.n	8017d80 <uxr_read_framed_msg+0x208>
 8018068:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801806a:	9300      	str	r3, [sp, #0]
 801806c:	2302      	movs	r3, #2
 801806e:	9301      	str	r3, [sp, #4]
 8018070:	464a      	mov	r2, r9
 8018072:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018074:	4641      	mov	r1, r8
 8018076:	4620      	mov	r0, r4
 8018078:	f7ff fcfc 	bl	8017a74 <uxr_framing_read_transport>
 801807c:	2800      	cmp	r0, #0
 801807e:	f47f aef6 	bne.w	8017e6e <uxr_read_framed_msg+0x2f6>
 8018082:	2301      	movs	r3, #1
 8018084:	7023      	strb	r3, [r4, #0]
 8018086:	e588      	b.n	8017b9a <uxr_read_framed_msg+0x22>
 8018088:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801808a:	9300      	str	r3, [sp, #0]
 801808c:	2301      	movs	r3, #1
 801808e:	e7ee      	b.n	801806e <uxr_read_framed_msg+0x4f6>
 8018090:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018092:	9300      	str	r3, [sp, #0]
 8018094:	2303      	movs	r3, #3
 8018096:	e7ea      	b.n	801806e <uxr_read_framed_msg+0x4f6>
 8018098:	ee17 8a90 	vmov	r8, s15
 801809c:	e6ae      	b.n	8017dfc <uxr_read_framed_msg+0x284>
 801809e:	bf00      	nop

080180a0 <rcl_get_default_domain_id>:
 80180a0:	b530      	push	{r4, r5, lr}
 80180a2:	b083      	sub	sp, #12
 80180a4:	2300      	movs	r3, #0
 80180a6:	9300      	str	r3, [sp, #0]
 80180a8:	b1d0      	cbz	r0, 80180e0 <rcl_get_default_domain_id+0x40>
 80180aa:	4604      	mov	r4, r0
 80180ac:	4669      	mov	r1, sp
 80180ae:	4815      	ldr	r0, [pc, #84]	@ (8018104 <rcl_get_default_domain_id+0x64>)
 80180b0:	f7fc fc86 	bl	80149c0 <rcutils_get_env>
 80180b4:	4602      	mov	r2, r0
 80180b6:	b110      	cbz	r0, 80180be <rcl_get_default_domain_id+0x1e>
 80180b8:	2001      	movs	r0, #1
 80180ba:	b003      	add	sp, #12
 80180bc:	bd30      	pop	{r4, r5, pc}
 80180be:	9b00      	ldr	r3, [sp, #0]
 80180c0:	b18b      	cbz	r3, 80180e6 <rcl_get_default_domain_id+0x46>
 80180c2:	7818      	ldrb	r0, [r3, #0]
 80180c4:	2800      	cmp	r0, #0
 80180c6:	d0f8      	beq.n	80180ba <rcl_get_default_domain_id+0x1a>
 80180c8:	a901      	add	r1, sp, #4
 80180ca:	4618      	mov	r0, r3
 80180cc:	9201      	str	r2, [sp, #4]
 80180ce:	f000 ffb5 	bl	801903c <strtoul>
 80180d2:	4605      	mov	r5, r0
 80180d4:	b150      	cbz	r0, 80180ec <rcl_get_default_domain_id+0x4c>
 80180d6:	1c43      	adds	r3, r0, #1
 80180d8:	d00d      	beq.n	80180f6 <rcl_get_default_domain_id+0x56>
 80180da:	6025      	str	r5, [r4, #0]
 80180dc:	2000      	movs	r0, #0
 80180de:	e7ec      	b.n	80180ba <rcl_get_default_domain_id+0x1a>
 80180e0:	200b      	movs	r0, #11
 80180e2:	b003      	add	sp, #12
 80180e4:	bd30      	pop	{r4, r5, pc}
 80180e6:	4618      	mov	r0, r3
 80180e8:	b003      	add	sp, #12
 80180ea:	bd30      	pop	{r4, r5, pc}
 80180ec:	9b01      	ldr	r3, [sp, #4]
 80180ee:	781b      	ldrb	r3, [r3, #0]
 80180f0:	2b00      	cmp	r3, #0
 80180f2:	d0f2      	beq.n	80180da <rcl_get_default_domain_id+0x3a>
 80180f4:	e7e0      	b.n	80180b8 <rcl_get_default_domain_id+0x18>
 80180f6:	f001 fa5d 	bl	80195b4 <__errno>
 80180fa:	6803      	ldr	r3, [r0, #0]
 80180fc:	2b22      	cmp	r3, #34	@ 0x22
 80180fe:	d1ec      	bne.n	80180da <rcl_get_default_domain_id+0x3a>
 8018100:	e7da      	b.n	80180b8 <rcl_get_default_domain_id+0x18>
 8018102:	bf00      	nop
 8018104:	0801b910 	.word	0x0801b910

08018108 <rcl_expand_topic_name>:
 8018108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801810c:	b08b      	sub	sp, #44	@ 0x2c
 801810e:	9306      	str	r3, [sp, #24]
 8018110:	2800      	cmp	r0, #0
 8018112:	f000 80ad 	beq.w	8018270 <rcl_expand_topic_name+0x168>
 8018116:	460e      	mov	r6, r1
 8018118:	2900      	cmp	r1, #0
 801811a:	f000 80a9 	beq.w	8018270 <rcl_expand_topic_name+0x168>
 801811e:	4617      	mov	r7, r2
 8018120:	2a00      	cmp	r2, #0
 8018122:	f000 80a5 	beq.w	8018270 <rcl_expand_topic_name+0x168>
 8018126:	2b00      	cmp	r3, #0
 8018128:	f000 80a2 	beq.w	8018270 <rcl_expand_topic_name+0x168>
 801812c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801812e:	2b00      	cmp	r3, #0
 8018130:	f000 809e 	beq.w	8018270 <rcl_expand_topic_name+0x168>
 8018134:	2200      	movs	r2, #0
 8018136:	a909      	add	r1, sp, #36	@ 0x24
 8018138:	4680      	mov	r8, r0
 801813a:	f000 f9fb 	bl	8018534 <rcl_validate_topic_name>
 801813e:	4604      	mov	r4, r0
 8018140:	2800      	cmp	r0, #0
 8018142:	f040 8096 	bne.w	8018272 <rcl_expand_topic_name+0x16a>
 8018146:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018148:	2b00      	cmp	r3, #0
 801814a:	f040 809a 	bne.w	8018282 <rcl_expand_topic_name+0x17a>
 801814e:	4602      	mov	r2, r0
 8018150:	a909      	add	r1, sp, #36	@ 0x24
 8018152:	4630      	mov	r0, r6
 8018154:	f7fd f892 	bl	801527c <rmw_validate_node_name>
 8018158:	2800      	cmp	r0, #0
 801815a:	f040 808e 	bne.w	801827a <rcl_expand_topic_name+0x172>
 801815e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018160:	2a00      	cmp	r2, #0
 8018162:	f040 8093 	bne.w	801828c <rcl_expand_topic_name+0x184>
 8018166:	a909      	add	r1, sp, #36	@ 0x24
 8018168:	4638      	mov	r0, r7
 801816a:	f7fd f869 	bl	8015240 <rmw_validate_namespace>
 801816e:	2800      	cmp	r0, #0
 8018170:	f040 8083 	bne.w	801827a <rcl_expand_topic_name+0x172>
 8018174:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8018176:	2c00      	cmp	r4, #0
 8018178:	f040 80ed 	bne.w	8018356 <rcl_expand_topic_name+0x24e>
 801817c:	217b      	movs	r1, #123	@ 0x7b
 801817e:	4640      	mov	r0, r8
 8018180:	f001 f97e 	bl	8019480 <strchr>
 8018184:	f898 3000 	ldrb.w	r3, [r8]
 8018188:	2b2f      	cmp	r3, #47	@ 0x2f
 801818a:	4605      	mov	r5, r0
 801818c:	f000 809e 	beq.w	80182cc <rcl_expand_topic_name+0x1c4>
 8018190:	2b7e      	cmp	r3, #126	@ 0x7e
 8018192:	f040 80a2 	bne.w	80182da <rcl_expand_topic_name+0x1d2>
 8018196:	4638      	mov	r0, r7
 8018198:	f7e8 f832 	bl	8000200 <strlen>
 801819c:	4a82      	ldr	r2, [pc, #520]	@ (80183a8 <rcl_expand_topic_name+0x2a0>)
 801819e:	4b83      	ldr	r3, [pc, #524]	@ (80183ac <rcl_expand_topic_name+0x2a4>)
 80181a0:	2801      	cmp	r0, #1
 80181a2:	bf18      	it	ne
 80181a4:	4613      	movne	r3, r2
 80181a6:	9302      	str	r3, [sp, #8]
 80181a8:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80181aa:	9300      	str	r3, [sp, #0]
 80181ac:	e9cd 7603 	strd	r7, r6, [sp, #12]
 80181b0:	f108 0301 	add.w	r3, r8, #1
 80181b4:	9305      	str	r3, [sp, #20]
 80181b6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80181ba:	9301      	str	r3, [sp, #4]
 80181bc:	ab14      	add	r3, sp, #80	@ 0x50
 80181be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80181c0:	f7fc fc26 	bl	8014a10 <rcutils_format_string_limit>
 80181c4:	4682      	mov	sl, r0
 80181c6:	2800      	cmp	r0, #0
 80181c8:	f000 80c7 	beq.w	801835a <rcl_expand_topic_name+0x252>
 80181cc:	2d00      	cmp	r5, #0
 80181ce:	f000 80a2 	beq.w	8018316 <rcl_expand_topic_name+0x20e>
 80181d2:	217b      	movs	r1, #123	@ 0x7b
 80181d4:	f001 f954 	bl	8019480 <strchr>
 80181d8:	46d1      	mov	r9, sl
 80181da:	4605      	mov	r5, r0
 80181dc:	9407      	str	r4, [sp, #28]
 80181de:	46d3      	mov	fp, sl
 80181e0:	464c      	mov	r4, r9
 80181e2:	2d00      	cmp	r5, #0
 80181e4:	f000 80be 	beq.w	8018364 <rcl_expand_topic_name+0x25c>
 80181e8:	217d      	movs	r1, #125	@ 0x7d
 80181ea:	4620      	mov	r0, r4
 80181ec:	f001 f948 	bl	8019480 <strchr>
 80181f0:	eba0 0905 	sub.w	r9, r0, r5
 80181f4:	f109 0a01 	add.w	sl, r9, #1
 80181f8:	486d      	ldr	r0, [pc, #436]	@ (80183b0 <rcl_expand_topic_name+0x2a8>)
 80181fa:	4652      	mov	r2, sl
 80181fc:	4629      	mov	r1, r5
 80181fe:	f001 f94c 	bl	801949a <strncmp>
 8018202:	2800      	cmp	r0, #0
 8018204:	d067      	beq.n	80182d6 <rcl_expand_topic_name+0x1ce>
 8018206:	486b      	ldr	r0, [pc, #428]	@ (80183b4 <rcl_expand_topic_name+0x2ac>)
 8018208:	4652      	mov	r2, sl
 801820a:	4629      	mov	r1, r5
 801820c:	f001 f945 	bl	801949a <strncmp>
 8018210:	b130      	cbz	r0, 8018220 <rcl_expand_topic_name+0x118>
 8018212:	4869      	ldr	r0, [pc, #420]	@ (80183b8 <rcl_expand_topic_name+0x2b0>)
 8018214:	4652      	mov	r2, sl
 8018216:	4629      	mov	r1, r5
 8018218:	f001 f93f 	bl	801949a <strncmp>
 801821c:	2800      	cmp	r0, #0
 801821e:	d137      	bne.n	8018290 <rcl_expand_topic_name+0x188>
 8018220:	46b9      	mov	r9, r7
 8018222:	ab16      	add	r3, sp, #88	@ 0x58
 8018224:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8018228:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801822c:	ab14      	add	r3, sp, #80	@ 0x50
 801822e:	4628      	mov	r0, r5
 8018230:	cb0c      	ldmia	r3, {r2, r3}
 8018232:	4651      	mov	r1, sl
 8018234:	f7fc fd28 	bl	8014c88 <rcutils_strndup>
 8018238:	4605      	mov	r5, r0
 801823a:	2800      	cmp	r0, #0
 801823c:	f000 809c 	beq.w	8018378 <rcl_expand_topic_name+0x270>
 8018240:	464a      	mov	r2, r9
 8018242:	4620      	mov	r0, r4
 8018244:	ab14      	add	r3, sp, #80	@ 0x50
 8018246:	4629      	mov	r1, r5
 8018248:	f7fc fc1c 	bl	8014a84 <rcutils_repl_str>
 801824c:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801824e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8018250:	4604      	mov	r4, r0
 8018252:	4628      	mov	r0, r5
 8018254:	4798      	blx	r3
 8018256:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8018258:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801825a:	4658      	mov	r0, fp
 801825c:	4798      	blx	r3
 801825e:	2c00      	cmp	r4, #0
 8018260:	d07b      	beq.n	801835a <rcl_expand_topic_name+0x252>
 8018262:	217b      	movs	r1, #123	@ 0x7b
 8018264:	4620      	mov	r0, r4
 8018266:	f001 f90b 	bl	8019480 <strchr>
 801826a:	46a3      	mov	fp, r4
 801826c:	4605      	mov	r5, r0
 801826e:	e7b8      	b.n	80181e2 <rcl_expand_topic_name+0xda>
 8018270:	240b      	movs	r4, #11
 8018272:	4620      	mov	r0, r4
 8018274:	b00b      	add	sp, #44	@ 0x2c
 8018276:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801827a:	f7f9 fdff 	bl	8011e7c <rcl_convert_rmw_ret_to_rcl_ret>
 801827e:	4604      	mov	r4, r0
 8018280:	e7f7      	b.n	8018272 <rcl_expand_topic_name+0x16a>
 8018282:	2467      	movs	r4, #103	@ 0x67
 8018284:	4620      	mov	r0, r4
 8018286:	b00b      	add	sp, #44	@ 0x2c
 8018288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801828c:	24c9      	movs	r4, #201	@ 0xc9
 801828e:	e7f0      	b.n	8018272 <rcl_expand_topic_name+0x16a>
 8018290:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 8018294:	9806      	ldr	r0, [sp, #24]
 8018296:	1c69      	adds	r1, r5, #1
 8018298:	f7fc fe10 	bl	8014ebc <rcutils_string_map_getn>
 801829c:	4681      	mov	r9, r0
 801829e:	2800      	cmp	r0, #0
 80182a0:	d1bf      	bne.n	8018222 <rcl_expand_topic_name+0x11a>
 80182a2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80182a4:	aa16      	add	r2, sp, #88	@ 0x58
 80182a6:	6018      	str	r0, [r3, #0]
 80182a8:	ca07      	ldmia	r2, {r0, r1, r2}
 80182aa:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80182ae:	ab14      	add	r3, sp, #80	@ 0x50
 80182b0:	cb0c      	ldmia	r3, {r2, r3}
 80182b2:	4651      	mov	r1, sl
 80182b4:	4628      	mov	r0, r5
 80182b6:	f7fc fce7 	bl	8014c88 <rcutils_strndup>
 80182ba:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80182bc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80182be:	4798      	blx	r3
 80182c0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80182c2:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80182c4:	4658      	mov	r0, fp
 80182c6:	2469      	movs	r4, #105	@ 0x69
 80182c8:	4798      	blx	r3
 80182ca:	e7d2      	b.n	8018272 <rcl_expand_topic_name+0x16a>
 80182cc:	2800      	cmp	r0, #0
 80182ce:	d05b      	beq.n	8018388 <rcl_expand_topic_name+0x280>
 80182d0:	46c1      	mov	r9, r8
 80182d2:	46a2      	mov	sl, r4
 80182d4:	e782      	b.n	80181dc <rcl_expand_topic_name+0xd4>
 80182d6:	46b1      	mov	r9, r6
 80182d8:	e7a3      	b.n	8018222 <rcl_expand_topic_name+0x11a>
 80182da:	2800      	cmp	r0, #0
 80182dc:	d1f8      	bne.n	80182d0 <rcl_expand_topic_name+0x1c8>
 80182de:	4638      	mov	r0, r7
 80182e0:	f7e7 ff8e 	bl	8000200 <strlen>
 80182e4:	4a35      	ldr	r2, [pc, #212]	@ (80183bc <rcl_expand_topic_name+0x2b4>)
 80182e6:	4b36      	ldr	r3, [pc, #216]	@ (80183c0 <rcl_expand_topic_name+0x2b8>)
 80182e8:	f8cd 8010 	str.w	r8, [sp, #16]
 80182ec:	2801      	cmp	r0, #1
 80182ee:	bf18      	it	ne
 80182f0:	4613      	movne	r3, r2
 80182f2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80182f6:	e9cd 1301 	strd	r1, r3, [sp, #4]
 80182fa:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80182fc:	9703      	str	r7, [sp, #12]
 80182fe:	9200      	str	r2, [sp, #0]
 8018300:	ab14      	add	r3, sp, #80	@ 0x50
 8018302:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8018304:	f7fc fb84 	bl	8014a10 <rcutils_format_string_limit>
 8018308:	4682      	mov	sl, r0
 801830a:	4653      	mov	r3, sl
 801830c:	b32b      	cbz	r3, 801835a <rcl_expand_topic_name+0x252>
 801830e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8018310:	f8c3 a000 	str.w	sl, [r3]
 8018314:	e7ad      	b.n	8018272 <rcl_expand_topic_name+0x16a>
 8018316:	f89a 3000 	ldrb.w	r3, [sl]
 801831a:	2b2f      	cmp	r3, #47	@ 0x2f
 801831c:	d0f7      	beq.n	801830e <rcl_expand_topic_name+0x206>
 801831e:	4638      	mov	r0, r7
 8018320:	f7e7 ff6e 	bl	8000200 <strlen>
 8018324:	4a25      	ldr	r2, [pc, #148]	@ (80183bc <rcl_expand_topic_name+0x2b4>)
 8018326:	4b26      	ldr	r3, [pc, #152]	@ (80183c0 <rcl_expand_topic_name+0x2b8>)
 8018328:	f8cd a010 	str.w	sl, [sp, #16]
 801832c:	2801      	cmp	r0, #1
 801832e:	bf18      	it	ne
 8018330:	4613      	movne	r3, r2
 8018332:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8018336:	e9cd 1301 	strd	r1, r3, [sp, #4]
 801833a:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801833c:	9703      	str	r7, [sp, #12]
 801833e:	9200      	str	r2, [sp, #0]
 8018340:	ab14      	add	r3, sp, #80	@ 0x50
 8018342:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8018344:	f7fc fb64 	bl	8014a10 <rcutils_format_string_limit>
 8018348:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801834a:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801834c:	4605      	mov	r5, r0
 801834e:	4650      	mov	r0, sl
 8018350:	4798      	blx	r3
 8018352:	46aa      	mov	sl, r5
 8018354:	e7d9      	b.n	801830a <rcl_expand_topic_name+0x202>
 8018356:	24ca      	movs	r4, #202	@ 0xca
 8018358:	e78b      	b.n	8018272 <rcl_expand_topic_name+0x16a>
 801835a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801835c:	2300      	movs	r3, #0
 801835e:	6013      	str	r3, [r2, #0]
 8018360:	240a      	movs	r4, #10
 8018362:	e786      	b.n	8018272 <rcl_expand_topic_name+0x16a>
 8018364:	465b      	mov	r3, fp
 8018366:	9c07      	ldr	r4, [sp, #28]
 8018368:	46da      	mov	sl, fp
 801836a:	2b00      	cmp	r3, #0
 801836c:	d1d3      	bne.n	8018316 <rcl_expand_topic_name+0x20e>
 801836e:	f898 3000 	ldrb.w	r3, [r8]
 8018372:	2b2f      	cmp	r3, #47	@ 0x2f
 8018374:	d0cb      	beq.n	801830e <rcl_expand_topic_name+0x206>
 8018376:	e7b2      	b.n	80182de <rcl_expand_topic_name+0x1d6>
 8018378:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	@ 0x60
 801837c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801837e:	6015      	str	r5, [r2, #0]
 8018380:	4658      	mov	r0, fp
 8018382:	4798      	blx	r3
 8018384:	240a      	movs	r4, #10
 8018386:	e774      	b.n	8018272 <rcl_expand_topic_name+0x16a>
 8018388:	ab17      	add	r3, sp, #92	@ 0x5c
 801838a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801838e:	e88d 0003 	stmia.w	sp, {r0, r1}
 8018392:	ab14      	add	r3, sp, #80	@ 0x50
 8018394:	cb0e      	ldmia	r3, {r1, r2, r3}
 8018396:	4640      	mov	r0, r8
 8018398:	f7fc fc54 	bl	8014c44 <rcutils_strdup>
 801839c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801839e:	2800      	cmp	r0, #0
 80183a0:	6018      	str	r0, [r3, #0]
 80183a2:	bf08      	it	eq
 80183a4:	240a      	moveq	r4, #10
 80183a6:	e764      	b.n	8018272 <rcl_expand_topic_name+0x16a>
 80183a8:	0801b920 	.word	0x0801b920
 80183ac:	0801ad24 	.word	0x0801ad24
 80183b0:	0801b928 	.word	0x0801b928
 80183b4:	0801b930 	.word	0x0801b930
 80183b8:	0801b938 	.word	0x0801b938
 80183bc:	0801b17c 	.word	0x0801b17c
 80183c0:	0801ad34 	.word	0x0801ad34

080183c4 <rcl_get_default_topic_name_substitutions>:
 80183c4:	2800      	cmp	r0, #0
 80183c6:	bf0c      	ite	eq
 80183c8:	200b      	moveq	r0, #11
 80183ca:	2000      	movne	r0, #0
 80183cc:	4770      	bx	lr
 80183ce:	bf00      	nop

080183d0 <rcl_get_zero_initialized_guard_condition>:
 80183d0:	4a03      	ldr	r2, [pc, #12]	@ (80183e0 <rcl_get_zero_initialized_guard_condition+0x10>)
 80183d2:	4603      	mov	r3, r0
 80183d4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80183d8:	e883 0003 	stmia.w	r3, {r0, r1}
 80183dc:	4618      	mov	r0, r3
 80183de:	4770      	bx	lr
 80183e0:	0801b944 	.word	0x0801b944

080183e4 <rcl_guard_condition_init_from_rmw>:
 80183e4:	b082      	sub	sp, #8
 80183e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80183ea:	b086      	sub	sp, #24
 80183ec:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 80183f0:	4604      	mov	r4, r0
 80183f2:	f84c 3f04 	str.w	r3, [ip, #4]!
 80183f6:	460e      	mov	r6, r1
 80183f8:	4617      	mov	r7, r2
 80183fa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80183fe:	f10d 0e04 	add.w	lr, sp, #4
 8018402:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8018406:	f8dc 3000 	ldr.w	r3, [ip]
 801840a:	f8ce 3000 	str.w	r3, [lr]
 801840e:	a801      	add	r0, sp, #4
 8018410:	f7f3 f802 	bl	800b418 <rcutils_allocator_is_valid>
 8018414:	b350      	cbz	r0, 801846c <rcl_guard_condition_init_from_rmw+0x88>
 8018416:	b34c      	cbz	r4, 801846c <rcl_guard_condition_init_from_rmw+0x88>
 8018418:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801841c:	f1b8 0f00 	cmp.w	r8, #0
 8018420:	d11e      	bne.n	8018460 <rcl_guard_condition_init_from_rmw+0x7c>
 8018422:	b31f      	cbz	r7, 801846c <rcl_guard_condition_init_from_rmw+0x88>
 8018424:	4638      	mov	r0, r7
 8018426:	f7f9 fd47 	bl	8011eb8 <rcl_context_is_valid>
 801842a:	b328      	cbz	r0, 8018478 <rcl_guard_condition_init_from_rmw+0x94>
 801842c:	9b01      	ldr	r3, [sp, #4]
 801842e:	9905      	ldr	r1, [sp, #20]
 8018430:	201c      	movs	r0, #28
 8018432:	4798      	blx	r3
 8018434:	4605      	mov	r5, r0
 8018436:	6060      	str	r0, [r4, #4]
 8018438:	b358      	cbz	r0, 8018492 <rcl_guard_condition_init_from_rmw+0xae>
 801843a:	b1fe      	cbz	r6, 801847c <rcl_guard_condition_init_from_rmw+0x98>
 801843c:	6006      	str	r6, [r0, #0]
 801843e:	f880 8004 	strb.w	r8, [r0, #4]
 8018442:	ac01      	add	r4, sp, #4
 8018444:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018446:	f105 0c08 	add.w	ip, r5, #8
 801844a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801844e:	6823      	ldr	r3, [r4, #0]
 8018450:	f8cc 3000 	str.w	r3, [ip]
 8018454:	2000      	movs	r0, #0
 8018456:	b006      	add	sp, #24
 8018458:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801845c:	b002      	add	sp, #8
 801845e:	4770      	bx	lr
 8018460:	2064      	movs	r0, #100	@ 0x64
 8018462:	b006      	add	sp, #24
 8018464:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018468:	b002      	add	sp, #8
 801846a:	4770      	bx	lr
 801846c:	200b      	movs	r0, #11
 801846e:	b006      	add	sp, #24
 8018470:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018474:	b002      	add	sp, #8
 8018476:	4770      	bx	lr
 8018478:	2065      	movs	r0, #101	@ 0x65
 801847a:	e7f2      	b.n	8018462 <rcl_guard_condition_init_from_rmw+0x7e>
 801847c:	6838      	ldr	r0, [r7, #0]
 801847e:	3028      	adds	r0, #40	@ 0x28
 8018480:	f000 fa3a 	bl	80188f8 <rmw_create_guard_condition>
 8018484:	6028      	str	r0, [r5, #0]
 8018486:	6865      	ldr	r5, [r4, #4]
 8018488:	682e      	ldr	r6, [r5, #0]
 801848a:	b126      	cbz	r6, 8018496 <rcl_guard_condition_init_from_rmw+0xb2>
 801848c:	2301      	movs	r3, #1
 801848e:	712b      	strb	r3, [r5, #4]
 8018490:	e7d7      	b.n	8018442 <rcl_guard_condition_init_from_rmw+0x5e>
 8018492:	200a      	movs	r0, #10
 8018494:	e7e5      	b.n	8018462 <rcl_guard_condition_init_from_rmw+0x7e>
 8018496:	4628      	mov	r0, r5
 8018498:	9b02      	ldr	r3, [sp, #8]
 801849a:	9905      	ldr	r1, [sp, #20]
 801849c:	4798      	blx	r3
 801849e:	6066      	str	r6, [r4, #4]
 80184a0:	2001      	movs	r0, #1
 80184a2:	e7de      	b.n	8018462 <rcl_guard_condition_init_from_rmw+0x7e>

080184a4 <rcl_guard_condition_fini>:
 80184a4:	b570      	push	{r4, r5, r6, lr}
 80184a6:	b082      	sub	sp, #8
 80184a8:	b1f0      	cbz	r0, 80184e8 <rcl_guard_condition_fini+0x44>
 80184aa:	6843      	ldr	r3, [r0, #4]
 80184ac:	4604      	mov	r4, r0
 80184ae:	b163      	cbz	r3, 80184ca <rcl_guard_condition_fini+0x26>
 80184b0:	6818      	ldr	r0, [r3, #0]
 80184b2:	68de      	ldr	r6, [r3, #12]
 80184b4:	6999      	ldr	r1, [r3, #24]
 80184b6:	b160      	cbz	r0, 80184d2 <rcl_guard_condition_fini+0x2e>
 80184b8:	791d      	ldrb	r5, [r3, #4]
 80184ba:	b965      	cbnz	r5, 80184d6 <rcl_guard_condition_fini+0x32>
 80184bc:	4618      	mov	r0, r3
 80184be:	47b0      	blx	r6
 80184c0:	2300      	movs	r3, #0
 80184c2:	4628      	mov	r0, r5
 80184c4:	6063      	str	r3, [r4, #4]
 80184c6:	b002      	add	sp, #8
 80184c8:	bd70      	pop	{r4, r5, r6, pc}
 80184ca:	461d      	mov	r5, r3
 80184cc:	4628      	mov	r0, r5
 80184ce:	b002      	add	sp, #8
 80184d0:	bd70      	pop	{r4, r5, r6, pc}
 80184d2:	4605      	mov	r5, r0
 80184d4:	e7f2      	b.n	80184bc <rcl_guard_condition_fini+0x18>
 80184d6:	9101      	str	r1, [sp, #4]
 80184d8:	f000 fa22 	bl	8018920 <rmw_destroy_guard_condition>
 80184dc:	1e05      	subs	r5, r0, #0
 80184de:	6863      	ldr	r3, [r4, #4]
 80184e0:	9901      	ldr	r1, [sp, #4]
 80184e2:	bf18      	it	ne
 80184e4:	2501      	movne	r5, #1
 80184e6:	e7e9      	b.n	80184bc <rcl_guard_condition_fini+0x18>
 80184e8:	250b      	movs	r5, #11
 80184ea:	4628      	mov	r0, r5
 80184ec:	b002      	add	sp, #8
 80184ee:	bd70      	pop	{r4, r5, r6, pc}

080184f0 <rcl_guard_condition_get_default_options>:
 80184f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80184f2:	b087      	sub	sp, #28
 80184f4:	4606      	mov	r6, r0
 80184f6:	4668      	mov	r0, sp
 80184f8:	f7f2 ff80 	bl	800b3fc <rcutils_get_default_allocator>
 80184fc:	4b09      	ldr	r3, [pc, #36]	@ (8018524 <rcl_guard_condition_get_default_options+0x34>)
 80184fe:	46ee      	mov	lr, sp
 8018500:	469c      	mov	ip, r3
 8018502:	461d      	mov	r5, r3
 8018504:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018508:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801850c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801850e:	4634      	mov	r4, r6
 8018510:	f8de 7000 	ldr.w	r7, [lr]
 8018514:	f8cc 7000 	str.w	r7, [ip]
 8018518:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801851a:	4630      	mov	r0, r6
 801851c:	6027      	str	r7, [r4, #0]
 801851e:	b007      	add	sp, #28
 8018520:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018522:	bf00      	nop
 8018524:	20015554 	.word	0x20015554

08018528 <rcl_guard_condition_get_rmw_handle>:
 8018528:	b110      	cbz	r0, 8018530 <rcl_guard_condition_get_rmw_handle+0x8>
 801852a:	6840      	ldr	r0, [r0, #4]
 801852c:	b100      	cbz	r0, 8018530 <rcl_guard_condition_get_rmw_handle+0x8>
 801852e:	6800      	ldr	r0, [r0, #0]
 8018530:	4770      	bx	lr
 8018532:	bf00      	nop

08018534 <rcl_validate_topic_name>:
 8018534:	2800      	cmp	r0, #0
 8018536:	d07a      	beq.n	801862e <rcl_validate_topic_name+0xfa>
 8018538:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801853c:	460e      	mov	r6, r1
 801853e:	2900      	cmp	r1, #0
 8018540:	d07c      	beq.n	801863c <rcl_validate_topic_name+0x108>
 8018542:	4617      	mov	r7, r2
 8018544:	4605      	mov	r5, r0
 8018546:	f7e7 fe5b 	bl	8000200 <strlen>
 801854a:	b1b0      	cbz	r0, 801857a <rcl_validate_topic_name+0x46>
 801854c:	f895 9000 	ldrb.w	r9, [r5]
 8018550:	f8df c180 	ldr.w	ip, [pc, #384]	@ 80186d4 <rcl_validate_topic_name+0x1a0>
 8018554:	f81c 3009 	ldrb.w	r3, [ip, r9]
 8018558:	f013 0304 	ands.w	r3, r3, #4
 801855c:	d169      	bne.n	8018632 <rcl_validate_topic_name+0xfe>
 801855e:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 8018562:	f815 2008 	ldrb.w	r2, [r5, r8]
 8018566:	2a2f      	cmp	r2, #47	@ 0x2f
 8018568:	d10e      	bne.n	8018588 <rcl_validate_topic_name+0x54>
 801856a:	2202      	movs	r2, #2
 801856c:	6032      	str	r2, [r6, #0]
 801856e:	b36f      	cbz	r7, 80185cc <rcl_validate_topic_name+0x98>
 8018570:	f8c7 8000 	str.w	r8, [r7]
 8018574:	4618      	mov	r0, r3
 8018576:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801857a:	2301      	movs	r3, #1
 801857c:	6033      	str	r3, [r6, #0]
 801857e:	b32f      	cbz	r7, 80185cc <rcl_validate_topic_name+0x98>
 8018580:	2000      	movs	r0, #0
 8018582:	6038      	str	r0, [r7, #0]
 8018584:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018588:	f105 3aff 	add.w	sl, r5, #4294967295	@ 0xffffffff
 801858c:	461c      	mov	r4, r3
 801858e:	4619      	mov	r1, r3
 8018590:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8018594:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8018598:	f1be 0f09 	cmp.w	lr, #9
 801859c:	d919      	bls.n	80185d2 <rcl_validate_topic_name+0x9e>
 801859e:	f022 0e20 	bic.w	lr, r2, #32
 80185a2:	f1ae 0e41 	sub.w	lr, lr, #65	@ 0x41
 80185a6:	f1be 0f19 	cmp.w	lr, #25
 80185aa:	d912      	bls.n	80185d2 <rcl_validate_topic_name+0x9e>
 80185ac:	2a5f      	cmp	r2, #95	@ 0x5f
 80185ae:	d019      	beq.n	80185e4 <rcl_validate_topic_name+0xb0>
 80185b0:	2a2f      	cmp	r2, #47	@ 0x2f
 80185b2:	d051      	beq.n	8018658 <rcl_validate_topic_name+0x124>
 80185b4:	2a7e      	cmp	r2, #126	@ 0x7e
 80185b6:	d048      	beq.n	801864a <rcl_validate_topic_name+0x116>
 80185b8:	2a7b      	cmp	r2, #123	@ 0x7b
 80185ba:	d054      	beq.n	8018666 <rcl_validate_topic_name+0x132>
 80185bc:	2a7d      	cmp	r2, #125	@ 0x7d
 80185be:	d161      	bne.n	8018684 <rcl_validate_topic_name+0x150>
 80185c0:	2c00      	cmp	r4, #0
 80185c2:	d155      	bne.n	8018670 <rcl_validate_topic_name+0x13c>
 80185c4:	2305      	movs	r3, #5
 80185c6:	6033      	str	r3, [r6, #0]
 80185c8:	b107      	cbz	r7, 80185cc <rcl_validate_topic_name+0x98>
 80185ca:	6039      	str	r1, [r7, #0]
 80185cc:	2000      	movs	r0, #0
 80185ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80185d2:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80185d6:	0752      	lsls	r2, r2, #29
 80185d8:	d504      	bpl.n	80185e4 <rcl_validate_topic_name+0xb0>
 80185da:	b11c      	cbz	r4, 80185e4 <rcl_validate_topic_name+0xb0>
 80185dc:	b111      	cbz	r1, 80185e4 <rcl_validate_topic_name+0xb0>
 80185de:	1e4a      	subs	r2, r1, #1
 80185e0:	429a      	cmp	r2, r3
 80185e2:	d02d      	beq.n	8018640 <rcl_validate_topic_name+0x10c>
 80185e4:	3101      	adds	r1, #1
 80185e6:	4288      	cmp	r0, r1
 80185e8:	d1d2      	bne.n	8018590 <rcl_validate_topic_name+0x5c>
 80185ea:	2c00      	cmp	r4, #0
 80185ec:	d145      	bne.n	801867a <rcl_validate_topic_name+0x146>
 80185ee:	f1b9 0f7e 	cmp.w	r9, #126	@ 0x7e
 80185f2:	d04f      	beq.n	8018694 <rcl_validate_topic_name+0x160>
 80185f4:	4620      	mov	r0, r4
 80185f6:	2301      	movs	r3, #1
 80185f8:	e006      	b.n	8018608 <rcl_validate_topic_name+0xd4>
 80185fa:	428b      	cmp	r3, r1
 80185fc:	f105 0501 	add.w	r5, r5, #1
 8018600:	f103 0201 	add.w	r2, r3, #1
 8018604:	d236      	bcs.n	8018674 <rcl_validate_topic_name+0x140>
 8018606:	4613      	mov	r3, r2
 8018608:	4580      	cmp	r8, r0
 801860a:	f100 0001 	add.w	r0, r0, #1
 801860e:	d0f4      	beq.n	80185fa <rcl_validate_topic_name+0xc6>
 8018610:	782a      	ldrb	r2, [r5, #0]
 8018612:	2a2f      	cmp	r2, #47	@ 0x2f
 8018614:	d1f1      	bne.n	80185fa <rcl_validate_topic_name+0xc6>
 8018616:	786a      	ldrb	r2, [r5, #1]
 8018618:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801861c:	0754      	lsls	r4, r2, #29
 801861e:	d5ec      	bpl.n	80185fa <rcl_validate_topic_name+0xc6>
 8018620:	2204      	movs	r2, #4
 8018622:	6032      	str	r2, [r6, #0]
 8018624:	2f00      	cmp	r7, #0
 8018626:	d0d1      	beq.n	80185cc <rcl_validate_topic_name+0x98>
 8018628:	603b      	str	r3, [r7, #0]
 801862a:	2000      	movs	r0, #0
 801862c:	e7aa      	b.n	8018584 <rcl_validate_topic_name+0x50>
 801862e:	200b      	movs	r0, #11
 8018630:	4770      	bx	lr
 8018632:	2304      	movs	r3, #4
 8018634:	6033      	str	r3, [r6, #0]
 8018636:	2f00      	cmp	r7, #0
 8018638:	d1a2      	bne.n	8018580 <rcl_validate_topic_name+0x4c>
 801863a:	e7c7      	b.n	80185cc <rcl_validate_topic_name+0x98>
 801863c:	200b      	movs	r0, #11
 801863e:	e7a1      	b.n	8018584 <rcl_validate_topic_name+0x50>
 8018640:	2309      	movs	r3, #9
 8018642:	6033      	str	r3, [r6, #0]
 8018644:	2f00      	cmp	r7, #0
 8018646:	d1c0      	bne.n	80185ca <rcl_validate_topic_name+0x96>
 8018648:	e7c0      	b.n	80185cc <rcl_validate_topic_name+0x98>
 801864a:	2900      	cmp	r1, #0
 801864c:	d0ca      	beq.n	80185e4 <rcl_validate_topic_name+0xb0>
 801864e:	2306      	movs	r3, #6
 8018650:	6033      	str	r3, [r6, #0]
 8018652:	2f00      	cmp	r7, #0
 8018654:	d1b9      	bne.n	80185ca <rcl_validate_topic_name+0x96>
 8018656:	e7b9      	b.n	80185cc <rcl_validate_topic_name+0x98>
 8018658:	2c00      	cmp	r4, #0
 801865a:	d0c3      	beq.n	80185e4 <rcl_validate_topic_name+0xb0>
 801865c:	2308      	movs	r3, #8
 801865e:	6033      	str	r3, [r6, #0]
 8018660:	2f00      	cmp	r7, #0
 8018662:	d1b2      	bne.n	80185ca <rcl_validate_topic_name+0x96>
 8018664:	e7b2      	b.n	80185cc <rcl_validate_topic_name+0x98>
 8018666:	2c00      	cmp	r4, #0
 8018668:	d1f8      	bne.n	801865c <rcl_validate_topic_name+0x128>
 801866a:	460b      	mov	r3, r1
 801866c:	2401      	movs	r4, #1
 801866e:	e7b9      	b.n	80185e4 <rcl_validate_topic_name+0xb0>
 8018670:	2400      	movs	r4, #0
 8018672:	e7b7      	b.n	80185e4 <rcl_validate_topic_name+0xb0>
 8018674:	2000      	movs	r0, #0
 8018676:	6030      	str	r0, [r6, #0]
 8018678:	e784      	b.n	8018584 <rcl_validate_topic_name+0x50>
 801867a:	2205      	movs	r2, #5
 801867c:	6032      	str	r2, [r6, #0]
 801867e:	2f00      	cmp	r7, #0
 8018680:	d1d2      	bne.n	8018628 <rcl_validate_topic_name+0xf4>
 8018682:	e7a3      	b.n	80185cc <rcl_validate_topic_name+0x98>
 8018684:	2c00      	cmp	r4, #0
 8018686:	bf14      	ite	ne
 8018688:	2308      	movne	r3, #8
 801868a:	2303      	moveq	r3, #3
 801868c:	6033      	str	r3, [r6, #0]
 801868e:	2f00      	cmp	r7, #0
 8018690:	d19b      	bne.n	80185ca <rcl_validate_topic_name+0x96>
 8018692:	e79b      	b.n	80185cc <rcl_validate_topic_name+0x98>
 8018694:	2301      	movs	r3, #1
 8018696:	e00a      	b.n	80186ae <rcl_validate_topic_name+0x17a>
 8018698:	2c01      	cmp	r4, #1
 801869a:	d013      	beq.n	80186c4 <rcl_validate_topic_name+0x190>
 801869c:	4299      	cmp	r1, r3
 801869e:	f104 0401 	add.w	r4, r4, #1
 80186a2:	f105 0501 	add.w	r5, r5, #1
 80186a6:	f103 0201 	add.w	r2, r3, #1
 80186aa:	d9e3      	bls.n	8018674 <rcl_validate_topic_name+0x140>
 80186ac:	4613      	mov	r3, r2
 80186ae:	45a0      	cmp	r8, r4
 80186b0:	d0f4      	beq.n	801869c <rcl_validate_topic_name+0x168>
 80186b2:	782a      	ldrb	r2, [r5, #0]
 80186b4:	2a2f      	cmp	r2, #47	@ 0x2f
 80186b6:	d1ef      	bne.n	8018698 <rcl_validate_topic_name+0x164>
 80186b8:	786a      	ldrb	r2, [r5, #1]
 80186ba:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80186be:	0752      	lsls	r2, r2, #29
 80186c0:	d5ec      	bpl.n	801869c <rcl_validate_topic_name+0x168>
 80186c2:	e7ad      	b.n	8018620 <rcl_validate_topic_name+0xec>
 80186c4:	2307      	movs	r3, #7
 80186c6:	6033      	str	r3, [r6, #0]
 80186c8:	2f00      	cmp	r7, #0
 80186ca:	f43f af7f 	beq.w	80185cc <rcl_validate_topic_name+0x98>
 80186ce:	603c      	str	r4, [r7, #0]
 80186d0:	2000      	movs	r0, #0
 80186d2:	e757      	b.n	8018584 <rcl_validate_topic_name+0x50>
 80186d4:	0801baae 	.word	0x0801baae

080186d8 <rcutils_string_array_fini>:
 80186d8:	b320      	cbz	r0, 8018724 <rcutils_string_array_fini+0x4c>
 80186da:	b570      	push	{r4, r5, r6, lr}
 80186dc:	4604      	mov	r4, r0
 80186de:	6840      	ldr	r0, [r0, #4]
 80186e0:	b1d8      	cbz	r0, 801871a <rcutils_string_array_fini+0x42>
 80186e2:	f104 0008 	add.w	r0, r4, #8
 80186e6:	f7f2 fe97 	bl	800b418 <rcutils_allocator_is_valid>
 80186ea:	b1b8      	cbz	r0, 801871c <rcutils_string_array_fini+0x44>
 80186ec:	6823      	ldr	r3, [r4, #0]
 80186ee:	b1bb      	cbz	r3, 8018720 <rcutils_string_array_fini+0x48>
 80186f0:	2500      	movs	r5, #0
 80186f2:	6860      	ldr	r0, [r4, #4]
 80186f4:	462e      	mov	r6, r5
 80186f6:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 80186fa:	68e3      	ldr	r3, [r4, #12]
 80186fc:	69a1      	ldr	r1, [r4, #24]
 80186fe:	4798      	blx	r3
 8018700:	e9d4 3000 	ldrd	r3, r0, [r4]
 8018704:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 8018708:	3501      	adds	r5, #1
 801870a:	429d      	cmp	r5, r3
 801870c:	d3f3      	bcc.n	80186f6 <rcutils_string_array_fini+0x1e>
 801870e:	68e3      	ldr	r3, [r4, #12]
 8018710:	69a1      	ldr	r1, [r4, #24]
 8018712:	4798      	blx	r3
 8018714:	2000      	movs	r0, #0
 8018716:	e9c4 0000 	strd	r0, r0, [r4]
 801871a:	bd70      	pop	{r4, r5, r6, pc}
 801871c:	200b      	movs	r0, #11
 801871e:	bd70      	pop	{r4, r5, r6, pc}
 8018720:	6860      	ldr	r0, [r4, #4]
 8018722:	e7f4      	b.n	801870e <rcutils_string_array_fini+0x36>
 8018724:	200b      	movs	r0, #11
 8018726:	4770      	bx	lr

08018728 <on_status>:
 8018728:	b082      	sub	sp, #8
 801872a:	b002      	add	sp, #8
 801872c:	4770      	bx	lr
 801872e:	bf00      	nop

08018730 <on_topic>:
 8018730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018734:	4a22      	ldr	r2, [pc, #136]	@ (80187c0 <on_topic+0x90>)
 8018736:	b094      	sub	sp, #80	@ 0x50
 8018738:	6812      	ldr	r2, [r2, #0]
 801873a:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 801873c:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8018740:	e9cd 3112 	strd	r3, r1, [sp, #72]	@ 0x48
 8018744:	b3c2      	cbz	r2, 80187b8 <on_topic+0x88>
 8018746:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 801874a:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 801874e:	e001      	b.n	8018754 <on_topic+0x24>
 8018750:	6852      	ldr	r2, [r2, #4]
 8018752:	b38a      	cbz	r2, 80187b8 <on_topic+0x88>
 8018754:	6894      	ldr	r4, [r2, #8]
 8018756:	8aa3      	ldrh	r3, [r4, #20]
 8018758:	428b      	cmp	r3, r1
 801875a:	d1f9      	bne.n	8018750 <on_topic+0x20>
 801875c:	7da3      	ldrb	r3, [r4, #22]
 801875e:	4283      	cmp	r3, r0
 8018760:	d1f6      	bne.n	8018750 <on_topic+0x20>
 8018762:	2248      	movs	r2, #72	@ 0x48
 8018764:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8018768:	4668      	mov	r0, sp
 801876a:	f000 ff50 	bl	801960e <memcpy>
 801876e:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 8018772:	cb0c      	ldmia	r3, {r2, r3}
 8018774:	4620      	mov	r0, r4
 8018776:	f7f3 fa7f 	bl	800bc78 <rmw_uxrce_get_static_input_buffer_for_entity>
 801877a:	4607      	mov	r7, r0
 801877c:	b1e0      	cbz	r0, 80187b8 <on_topic+0x88>
 801877e:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8018782:	4632      	mov	r2, r6
 8018784:	4628      	mov	r0, r5
 8018786:	f108 0110 	add.w	r1, r8, #16
 801878a:	f7f4 fabf 	bl	800cd0c <ucdr_deserialize_array_uint8_t>
 801878e:	b930      	cbnz	r0, 801879e <on_topic+0x6e>
 8018790:	480c      	ldr	r0, [pc, #48]	@ (80187c4 <on_topic+0x94>)
 8018792:	4639      	mov	r1, r7
 8018794:	b014      	add	sp, #80	@ 0x50
 8018796:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801879a:	f7fc bddd 	b.w	8015358 <put_memory>
 801879e:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 80187a2:	f8c8 6810 	str.w	r6, [r8, #2064]	@ 0x810
 80187a6:	f7fd ff05 	bl	80165b4 <rmw_uros_epoch_nanos>
 80187aa:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 80187ae:	2305      	movs	r3, #5
 80187b0:	e942 0102 	strd	r0, r1, [r2, #-8]
 80187b4:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 80187b8:	b014      	add	sp, #80	@ 0x50
 80187ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80187be:	bf00      	nop
 80187c0:	200153b4 	.word	0x200153b4
 80187c4:	200153a4 	.word	0x200153a4

080187c8 <on_request>:
 80187c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80187cc:	4823      	ldr	r0, [pc, #140]	@ (801885c <on_request+0x94>)
 80187ce:	b094      	sub	sp, #80	@ 0x50
 80187d0:	6800      	ldr	r0, [r0, #0]
 80187d2:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 80187d4:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 80187d8:	9113      	str	r1, [sp, #76]	@ 0x4c
 80187da:	2800      	cmp	r0, #0
 80187dc:	d03b      	beq.n	8018856 <on_request+0x8e>
 80187de:	461d      	mov	r5, r3
 80187e0:	e001      	b.n	80187e6 <on_request+0x1e>
 80187e2:	6840      	ldr	r0, [r0, #4]
 80187e4:	b3b8      	cbz	r0, 8018856 <on_request+0x8e>
 80187e6:	6884      	ldr	r4, [r0, #8]
 80187e8:	8b21      	ldrh	r1, [r4, #24]
 80187ea:	4291      	cmp	r1, r2
 80187ec:	d1f9      	bne.n	80187e2 <on_request+0x1a>
 80187ee:	2248      	movs	r2, #72	@ 0x48
 80187f0:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 80187f4:	4668      	mov	r0, sp
 80187f6:	f000 ff0a 	bl	801960e <memcpy>
 80187fa:	f104 0320 	add.w	r3, r4, #32
 80187fe:	cb0c      	ldmia	r3, {r2, r3}
 8018800:	4620      	mov	r0, r4
 8018802:	f7f3 fa39 	bl	800bc78 <rmw_uxrce_get_static_input_buffer_for_entity>
 8018806:	4680      	mov	r8, r0
 8018808:	b328      	cbz	r0, 8018856 <on_request+0x8e>
 801880a:	4638      	mov	r0, r7
 801880c:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8018810:	4632      	mov	r2, r6
 8018812:	f107 0110 	add.w	r1, r7, #16
 8018816:	f7f4 fa79 	bl	800cd0c <ucdr_deserialize_array_uint8_t>
 801881a:	b930      	cbnz	r0, 801882a <on_request+0x62>
 801881c:	4810      	ldr	r0, [pc, #64]	@ (8018860 <on_request+0x98>)
 801881e:	4641      	mov	r1, r8
 8018820:	b014      	add	sp, #80	@ 0x50
 8018822:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018826:	f7fc bd97 	b.w	8015358 <put_memory>
 801882a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801882c:	f607 0c28 	addw	ip, r7, #2088	@ 0x828
 8018830:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8018834:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8018838:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801883c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8018840:	e88c 0003 	stmia.w	ip, {r0, r1}
 8018844:	f7fd feb6 	bl	80165b4 <rmw_uros_epoch_nanos>
 8018848:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 801884c:	2303      	movs	r3, #3
 801884e:	e942 0102 	strd	r0, r1, [r2, #-8]
 8018852:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8018856:	b014      	add	sp, #80	@ 0x50
 8018858:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801885c:	20015384 	.word	0x20015384
 8018860:	200153a4 	.word	0x200153a4

08018864 <on_reply>:
 8018864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018868:	4821      	ldr	r0, [pc, #132]	@ (80188f0 <on_reply+0x8c>)
 801886a:	b094      	sub	sp, #80	@ 0x50
 801886c:	6800      	ldr	r0, [r0, #0]
 801886e:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8018870:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8018874:	9113      	str	r1, [sp, #76]	@ 0x4c
 8018876:	b3b8      	cbz	r0, 80188e8 <on_reply+0x84>
 8018878:	461d      	mov	r5, r3
 801887a:	e001      	b.n	8018880 <on_reply+0x1c>
 801887c:	6840      	ldr	r0, [r0, #4]
 801887e:	b398      	cbz	r0, 80188e8 <on_reply+0x84>
 8018880:	6884      	ldr	r4, [r0, #8]
 8018882:	8b21      	ldrh	r1, [r4, #24]
 8018884:	4291      	cmp	r1, r2
 8018886:	d1f9      	bne.n	801887c <on_reply+0x18>
 8018888:	2248      	movs	r2, #72	@ 0x48
 801888a:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 801888e:	4668      	mov	r0, sp
 8018890:	f000 febd 	bl	801960e <memcpy>
 8018894:	f104 0320 	add.w	r3, r4, #32
 8018898:	cb0c      	ldmia	r3, {r2, r3}
 801889a:	4620      	mov	r0, r4
 801889c:	f7f3 f9ec 	bl	800bc78 <rmw_uxrce_get_static_input_buffer_for_entity>
 80188a0:	4680      	mov	r8, r0
 80188a2:	b308      	cbz	r0, 80188e8 <on_reply+0x84>
 80188a4:	4638      	mov	r0, r7
 80188a6:	f8d8 7008 	ldr.w	r7, [r8, #8]
 80188aa:	4632      	mov	r2, r6
 80188ac:	f107 0110 	add.w	r1, r7, #16
 80188b0:	f7f4 fa2c 	bl	800cd0c <ucdr_deserialize_array_uint8_t>
 80188b4:	b930      	cbnz	r0, 80188c4 <on_reply+0x60>
 80188b6:	480f      	ldr	r0, [pc, #60]	@ (80188f4 <on_reply+0x90>)
 80188b8:	4641      	mov	r1, r8
 80188ba:	b014      	add	sp, #80	@ 0x50
 80188bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80188c0:	f7fc bd4a 	b.w	8015358 <put_memory>
 80188c4:	2200      	movs	r2, #0
 80188c6:	f8c7 282c 	str.w	r2, [r7, #2092]	@ 0x82c
 80188ca:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 80188ce:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 80188d2:	f8c7 5828 	str.w	r5, [r7, #2088]	@ 0x828
 80188d6:	f7fd fe6d 	bl	80165b4 <rmw_uros_epoch_nanos>
 80188da:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 80188de:	2304      	movs	r3, #4
 80188e0:	e942 0102 	strd	r0, r1, [r2, #-8]
 80188e4:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 80188e8:	b014      	add	sp, #80	@ 0x50
 80188ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80188ee:	bf00      	nop
 80188f0:	20010a98 	.word	0x20010a98
 80188f4:	200153a4 	.word	0x200153a4

080188f8 <rmw_create_guard_condition>:
 80188f8:	b538      	push	{r3, r4, r5, lr}
 80188fa:	4605      	mov	r5, r0
 80188fc:	4807      	ldr	r0, [pc, #28]	@ (801891c <rmw_create_guard_condition+0x24>)
 80188fe:	f7fc fd1b 	bl	8015338 <get_memory>
 8018902:	b148      	cbz	r0, 8018918 <rmw_create_guard_condition+0x20>
 8018904:	6884      	ldr	r4, [r0, #8]
 8018906:	2300      	movs	r3, #0
 8018908:	7423      	strb	r3, [r4, #16]
 801890a:	61e5      	str	r5, [r4, #28]
 801890c:	f7fc fd7c 	bl	8015408 <rmw_get_implementation_identifier>
 8018910:	e9c4 0405 	strd	r0, r4, [r4, #20]
 8018914:	f104 0014 	add.w	r0, r4, #20
 8018918:	bd38      	pop	{r3, r4, r5, pc}
 801891a:	bf00      	nop
 801891c:	20015344 	.word	0x20015344

08018920 <rmw_destroy_guard_condition>:
 8018920:	b508      	push	{r3, lr}
 8018922:	4b08      	ldr	r3, [pc, #32]	@ (8018944 <rmw_destroy_guard_condition+0x24>)
 8018924:	6819      	ldr	r1, [r3, #0]
 8018926:	b911      	cbnz	r1, 801892e <rmw_destroy_guard_condition+0xe>
 8018928:	e00a      	b.n	8018940 <rmw_destroy_guard_condition+0x20>
 801892a:	6849      	ldr	r1, [r1, #4]
 801892c:	b141      	cbz	r1, 8018940 <rmw_destroy_guard_condition+0x20>
 801892e:	688b      	ldr	r3, [r1, #8]
 8018930:	3314      	adds	r3, #20
 8018932:	4298      	cmp	r0, r3
 8018934:	d1f9      	bne.n	801892a <rmw_destroy_guard_condition+0xa>
 8018936:	4803      	ldr	r0, [pc, #12]	@ (8018944 <rmw_destroy_guard_condition+0x24>)
 8018938:	f7fc fd0e 	bl	8015358 <put_memory>
 801893c:	2000      	movs	r0, #0
 801893e:	bd08      	pop	{r3, pc}
 8018940:	2001      	movs	r0, #1
 8018942:	bd08      	pop	{r3, pc}
 8018944:	20015344 	.word	0x20015344

08018948 <rosidl_runtime_c__String__init>:
 8018948:	b510      	push	{r4, lr}
 801894a:	4604      	mov	r4, r0
 801894c:	b086      	sub	sp, #24
 801894e:	b170      	cbz	r0, 801896e <rosidl_runtime_c__String__init+0x26>
 8018950:	a801      	add	r0, sp, #4
 8018952:	f7f2 fd53 	bl	800b3fc <rcutils_get_default_allocator>
 8018956:	9b01      	ldr	r3, [sp, #4]
 8018958:	9905      	ldr	r1, [sp, #20]
 801895a:	2001      	movs	r0, #1
 801895c:	4798      	blx	r3
 801895e:	6020      	str	r0, [r4, #0]
 8018960:	b128      	cbz	r0, 801896e <rosidl_runtime_c__String__init+0x26>
 8018962:	2100      	movs	r1, #0
 8018964:	2201      	movs	r2, #1
 8018966:	7001      	strb	r1, [r0, #0]
 8018968:	e9c4 1201 	strd	r1, r2, [r4, #4]
 801896c:	4610      	mov	r0, r2
 801896e:	b006      	add	sp, #24
 8018970:	bd10      	pop	{r4, pc}
 8018972:	bf00      	nop

08018974 <rosidl_runtime_c__String__fini>:
 8018974:	b320      	cbz	r0, 80189c0 <rosidl_runtime_c__String__fini+0x4c>
 8018976:	b510      	push	{r4, lr}
 8018978:	6803      	ldr	r3, [r0, #0]
 801897a:	b086      	sub	sp, #24
 801897c:	4604      	mov	r4, r0
 801897e:	b173      	cbz	r3, 801899e <rosidl_runtime_c__String__fini+0x2a>
 8018980:	6883      	ldr	r3, [r0, #8]
 8018982:	b1f3      	cbz	r3, 80189c2 <rosidl_runtime_c__String__fini+0x4e>
 8018984:	a801      	add	r0, sp, #4
 8018986:	f7f2 fd39 	bl	800b3fc <rcutils_get_default_allocator>
 801898a:	9b02      	ldr	r3, [sp, #8]
 801898c:	9905      	ldr	r1, [sp, #20]
 801898e:	6820      	ldr	r0, [r4, #0]
 8018990:	4798      	blx	r3
 8018992:	2300      	movs	r3, #0
 8018994:	e9c4 3300 	strd	r3, r3, [r4]
 8018998:	60a3      	str	r3, [r4, #8]
 801899a:	b006      	add	sp, #24
 801899c:	bd10      	pop	{r4, pc}
 801899e:	6843      	ldr	r3, [r0, #4]
 80189a0:	b9db      	cbnz	r3, 80189da <rosidl_runtime_c__String__fini+0x66>
 80189a2:	6883      	ldr	r3, [r0, #8]
 80189a4:	2b00      	cmp	r3, #0
 80189a6:	d0f8      	beq.n	801899a <rosidl_runtime_c__String__fini+0x26>
 80189a8:	4b12      	ldr	r3, [pc, #72]	@ (80189f4 <rosidl_runtime_c__String__fini+0x80>)
 80189aa:	4813      	ldr	r0, [pc, #76]	@ (80189f8 <rosidl_runtime_c__String__fini+0x84>)
 80189ac:	681b      	ldr	r3, [r3, #0]
 80189ae:	2251      	movs	r2, #81	@ 0x51
 80189b0:	68db      	ldr	r3, [r3, #12]
 80189b2:	2101      	movs	r1, #1
 80189b4:	f000 fbf0 	bl	8019198 <fwrite>
 80189b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80189bc:	f000 f83e 	bl	8018a3c <exit>
 80189c0:	4770      	bx	lr
 80189c2:	4b0c      	ldr	r3, [pc, #48]	@ (80189f4 <rosidl_runtime_c__String__fini+0x80>)
 80189c4:	480d      	ldr	r0, [pc, #52]	@ (80189fc <rosidl_runtime_c__String__fini+0x88>)
 80189c6:	681b      	ldr	r3, [r3, #0]
 80189c8:	224c      	movs	r2, #76	@ 0x4c
 80189ca:	68db      	ldr	r3, [r3, #12]
 80189cc:	2101      	movs	r1, #1
 80189ce:	f000 fbe3 	bl	8019198 <fwrite>
 80189d2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80189d6:	f000 f831 	bl	8018a3c <exit>
 80189da:	4b06      	ldr	r3, [pc, #24]	@ (80189f4 <rosidl_runtime_c__String__fini+0x80>)
 80189dc:	4808      	ldr	r0, [pc, #32]	@ (8018a00 <rosidl_runtime_c__String__fini+0x8c>)
 80189de:	681b      	ldr	r3, [r3, #0]
 80189e0:	224e      	movs	r2, #78	@ 0x4e
 80189e2:	68db      	ldr	r3, [r3, #12]
 80189e4:	2101      	movs	r1, #1
 80189e6:	f000 fbd7 	bl	8019198 <fwrite>
 80189ea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80189ee:	f000 f825 	bl	8018a3c <exit>
 80189f2:	bf00      	nop
 80189f4:	200007cc 	.word	0x200007cc
 80189f8:	0801b9ec 	.word	0x0801b9ec
 80189fc:	0801b94c 	.word	0x0801b94c
 8018a00:	0801b99c 	.word	0x0801b99c

08018a04 <calloc>:
 8018a04:	4b02      	ldr	r3, [pc, #8]	@ (8018a10 <calloc+0xc>)
 8018a06:	460a      	mov	r2, r1
 8018a08:	4601      	mov	r1, r0
 8018a0a:	6818      	ldr	r0, [r3, #0]
 8018a0c:	f000 b802 	b.w	8018a14 <_calloc_r>
 8018a10:	200007cc 	.word	0x200007cc

08018a14 <_calloc_r>:
 8018a14:	b570      	push	{r4, r5, r6, lr}
 8018a16:	fba1 5402 	umull	r5, r4, r1, r2
 8018a1a:	b93c      	cbnz	r4, 8018a2c <_calloc_r+0x18>
 8018a1c:	4629      	mov	r1, r5
 8018a1e:	f000 f899 	bl	8018b54 <_malloc_r>
 8018a22:	4606      	mov	r6, r0
 8018a24:	b928      	cbnz	r0, 8018a32 <_calloc_r+0x1e>
 8018a26:	2600      	movs	r6, #0
 8018a28:	4630      	mov	r0, r6
 8018a2a:	bd70      	pop	{r4, r5, r6, pc}
 8018a2c:	220c      	movs	r2, #12
 8018a2e:	6002      	str	r2, [r0, #0]
 8018a30:	e7f9      	b.n	8018a26 <_calloc_r+0x12>
 8018a32:	462a      	mov	r2, r5
 8018a34:	4621      	mov	r1, r4
 8018a36:	f000 fd82 	bl	801953e <memset>
 8018a3a:	e7f5      	b.n	8018a28 <_calloc_r+0x14>

08018a3c <exit>:
 8018a3c:	b508      	push	{r3, lr}
 8018a3e:	4b06      	ldr	r3, [pc, #24]	@ (8018a58 <exit+0x1c>)
 8018a40:	4604      	mov	r4, r0
 8018a42:	b113      	cbz	r3, 8018a4a <exit+0xe>
 8018a44:	2100      	movs	r1, #0
 8018a46:	f3af 8000 	nop.w
 8018a4a:	4b04      	ldr	r3, [pc, #16]	@ (8018a5c <exit+0x20>)
 8018a4c:	681b      	ldr	r3, [r3, #0]
 8018a4e:	b103      	cbz	r3, 8018a52 <exit+0x16>
 8018a50:	4798      	blx	r3
 8018a52:	4620      	mov	r0, r4
 8018a54:	f7e9 fd30 	bl	80024b8 <_exit>
 8018a58:	00000000 	.word	0x00000000
 8018a5c:	200156a8 	.word	0x200156a8

08018a60 <getenv>:
 8018a60:	b507      	push	{r0, r1, r2, lr}
 8018a62:	4b04      	ldr	r3, [pc, #16]	@ (8018a74 <getenv+0x14>)
 8018a64:	4601      	mov	r1, r0
 8018a66:	aa01      	add	r2, sp, #4
 8018a68:	6818      	ldr	r0, [r3, #0]
 8018a6a:	f000 f805 	bl	8018a78 <_findenv_r>
 8018a6e:	b003      	add	sp, #12
 8018a70:	f85d fb04 	ldr.w	pc, [sp], #4
 8018a74:	200007cc 	.word	0x200007cc

08018a78 <_findenv_r>:
 8018a78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018a7c:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 8018aec <_findenv_r+0x74>
 8018a80:	4606      	mov	r6, r0
 8018a82:	4689      	mov	r9, r1
 8018a84:	4617      	mov	r7, r2
 8018a86:	f000 fdf7 	bl	8019678 <__env_lock>
 8018a8a:	f8da 4000 	ldr.w	r4, [sl]
 8018a8e:	b134      	cbz	r4, 8018a9e <_findenv_r+0x26>
 8018a90:	464b      	mov	r3, r9
 8018a92:	4698      	mov	r8, r3
 8018a94:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018a98:	b13a      	cbz	r2, 8018aaa <_findenv_r+0x32>
 8018a9a:	2a3d      	cmp	r2, #61	@ 0x3d
 8018a9c:	d1f9      	bne.n	8018a92 <_findenv_r+0x1a>
 8018a9e:	4630      	mov	r0, r6
 8018aa0:	f000 fdf0 	bl	8019684 <__env_unlock>
 8018aa4:	2000      	movs	r0, #0
 8018aa6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018aaa:	eba8 0809 	sub.w	r8, r8, r9
 8018aae:	46a3      	mov	fp, r4
 8018ab0:	f854 0b04 	ldr.w	r0, [r4], #4
 8018ab4:	2800      	cmp	r0, #0
 8018ab6:	d0f2      	beq.n	8018a9e <_findenv_r+0x26>
 8018ab8:	4642      	mov	r2, r8
 8018aba:	4649      	mov	r1, r9
 8018abc:	f000 fced 	bl	801949a <strncmp>
 8018ac0:	2800      	cmp	r0, #0
 8018ac2:	d1f4      	bne.n	8018aae <_findenv_r+0x36>
 8018ac4:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8018ac8:	eb03 0508 	add.w	r5, r3, r8
 8018acc:	f813 3008 	ldrb.w	r3, [r3, r8]
 8018ad0:	2b3d      	cmp	r3, #61	@ 0x3d
 8018ad2:	d1ec      	bne.n	8018aae <_findenv_r+0x36>
 8018ad4:	f8da 3000 	ldr.w	r3, [sl]
 8018ad8:	ebab 0303 	sub.w	r3, fp, r3
 8018adc:	109b      	asrs	r3, r3, #2
 8018ade:	4630      	mov	r0, r6
 8018ae0:	603b      	str	r3, [r7, #0]
 8018ae2:	f000 fdcf 	bl	8019684 <__env_unlock>
 8018ae6:	1c68      	adds	r0, r5, #1
 8018ae8:	e7dd      	b.n	8018aa6 <_findenv_r+0x2e>
 8018aea:	bf00      	nop
 8018aec:	20000000 	.word	0x20000000

08018af0 <malloc>:
 8018af0:	4b02      	ldr	r3, [pc, #8]	@ (8018afc <malloc+0xc>)
 8018af2:	4601      	mov	r1, r0
 8018af4:	6818      	ldr	r0, [r3, #0]
 8018af6:	f000 b82d 	b.w	8018b54 <_malloc_r>
 8018afa:	bf00      	nop
 8018afc:	200007cc 	.word	0x200007cc

08018b00 <free>:
 8018b00:	4b02      	ldr	r3, [pc, #8]	@ (8018b0c <free+0xc>)
 8018b02:	4601      	mov	r1, r0
 8018b04:	6818      	ldr	r0, [r3, #0]
 8018b06:	f000 bdc3 	b.w	8019690 <_free_r>
 8018b0a:	bf00      	nop
 8018b0c:	200007cc 	.word	0x200007cc

08018b10 <sbrk_aligned>:
 8018b10:	b570      	push	{r4, r5, r6, lr}
 8018b12:	4e0f      	ldr	r6, [pc, #60]	@ (8018b50 <sbrk_aligned+0x40>)
 8018b14:	460c      	mov	r4, r1
 8018b16:	6831      	ldr	r1, [r6, #0]
 8018b18:	4605      	mov	r5, r0
 8018b1a:	b911      	cbnz	r1, 8018b22 <sbrk_aligned+0x12>
 8018b1c:	f000 fd3a 	bl	8019594 <_sbrk_r>
 8018b20:	6030      	str	r0, [r6, #0]
 8018b22:	4621      	mov	r1, r4
 8018b24:	4628      	mov	r0, r5
 8018b26:	f000 fd35 	bl	8019594 <_sbrk_r>
 8018b2a:	1c43      	adds	r3, r0, #1
 8018b2c:	d103      	bne.n	8018b36 <sbrk_aligned+0x26>
 8018b2e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8018b32:	4620      	mov	r0, r4
 8018b34:	bd70      	pop	{r4, r5, r6, pc}
 8018b36:	1cc4      	adds	r4, r0, #3
 8018b38:	f024 0403 	bic.w	r4, r4, #3
 8018b3c:	42a0      	cmp	r0, r4
 8018b3e:	d0f8      	beq.n	8018b32 <sbrk_aligned+0x22>
 8018b40:	1a21      	subs	r1, r4, r0
 8018b42:	4628      	mov	r0, r5
 8018b44:	f000 fd26 	bl	8019594 <_sbrk_r>
 8018b48:	3001      	adds	r0, #1
 8018b4a:	d1f2      	bne.n	8018b32 <sbrk_aligned+0x22>
 8018b4c:	e7ef      	b.n	8018b2e <sbrk_aligned+0x1e>
 8018b4e:	bf00      	nop
 8018b50:	20015568 	.word	0x20015568

08018b54 <_malloc_r>:
 8018b54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018b58:	1ccd      	adds	r5, r1, #3
 8018b5a:	f025 0503 	bic.w	r5, r5, #3
 8018b5e:	3508      	adds	r5, #8
 8018b60:	2d0c      	cmp	r5, #12
 8018b62:	bf38      	it	cc
 8018b64:	250c      	movcc	r5, #12
 8018b66:	2d00      	cmp	r5, #0
 8018b68:	4606      	mov	r6, r0
 8018b6a:	db01      	blt.n	8018b70 <_malloc_r+0x1c>
 8018b6c:	42a9      	cmp	r1, r5
 8018b6e:	d904      	bls.n	8018b7a <_malloc_r+0x26>
 8018b70:	230c      	movs	r3, #12
 8018b72:	6033      	str	r3, [r6, #0]
 8018b74:	2000      	movs	r0, #0
 8018b76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018b7a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8018c50 <_malloc_r+0xfc>
 8018b7e:	f000 f89d 	bl	8018cbc <__malloc_lock>
 8018b82:	f8d8 3000 	ldr.w	r3, [r8]
 8018b86:	461c      	mov	r4, r3
 8018b88:	bb44      	cbnz	r4, 8018bdc <_malloc_r+0x88>
 8018b8a:	4629      	mov	r1, r5
 8018b8c:	4630      	mov	r0, r6
 8018b8e:	f7ff ffbf 	bl	8018b10 <sbrk_aligned>
 8018b92:	1c43      	adds	r3, r0, #1
 8018b94:	4604      	mov	r4, r0
 8018b96:	d158      	bne.n	8018c4a <_malloc_r+0xf6>
 8018b98:	f8d8 4000 	ldr.w	r4, [r8]
 8018b9c:	4627      	mov	r7, r4
 8018b9e:	2f00      	cmp	r7, #0
 8018ba0:	d143      	bne.n	8018c2a <_malloc_r+0xd6>
 8018ba2:	2c00      	cmp	r4, #0
 8018ba4:	d04b      	beq.n	8018c3e <_malloc_r+0xea>
 8018ba6:	6823      	ldr	r3, [r4, #0]
 8018ba8:	4639      	mov	r1, r7
 8018baa:	4630      	mov	r0, r6
 8018bac:	eb04 0903 	add.w	r9, r4, r3
 8018bb0:	f000 fcf0 	bl	8019594 <_sbrk_r>
 8018bb4:	4581      	cmp	r9, r0
 8018bb6:	d142      	bne.n	8018c3e <_malloc_r+0xea>
 8018bb8:	6821      	ldr	r1, [r4, #0]
 8018bba:	1a6d      	subs	r5, r5, r1
 8018bbc:	4629      	mov	r1, r5
 8018bbe:	4630      	mov	r0, r6
 8018bc0:	f7ff ffa6 	bl	8018b10 <sbrk_aligned>
 8018bc4:	3001      	adds	r0, #1
 8018bc6:	d03a      	beq.n	8018c3e <_malloc_r+0xea>
 8018bc8:	6823      	ldr	r3, [r4, #0]
 8018bca:	442b      	add	r3, r5
 8018bcc:	6023      	str	r3, [r4, #0]
 8018bce:	f8d8 3000 	ldr.w	r3, [r8]
 8018bd2:	685a      	ldr	r2, [r3, #4]
 8018bd4:	bb62      	cbnz	r2, 8018c30 <_malloc_r+0xdc>
 8018bd6:	f8c8 7000 	str.w	r7, [r8]
 8018bda:	e00f      	b.n	8018bfc <_malloc_r+0xa8>
 8018bdc:	6822      	ldr	r2, [r4, #0]
 8018bde:	1b52      	subs	r2, r2, r5
 8018be0:	d420      	bmi.n	8018c24 <_malloc_r+0xd0>
 8018be2:	2a0b      	cmp	r2, #11
 8018be4:	d917      	bls.n	8018c16 <_malloc_r+0xc2>
 8018be6:	1961      	adds	r1, r4, r5
 8018be8:	42a3      	cmp	r3, r4
 8018bea:	6025      	str	r5, [r4, #0]
 8018bec:	bf18      	it	ne
 8018bee:	6059      	strne	r1, [r3, #4]
 8018bf0:	6863      	ldr	r3, [r4, #4]
 8018bf2:	bf08      	it	eq
 8018bf4:	f8c8 1000 	streq.w	r1, [r8]
 8018bf8:	5162      	str	r2, [r4, r5]
 8018bfa:	604b      	str	r3, [r1, #4]
 8018bfc:	4630      	mov	r0, r6
 8018bfe:	f000 f863 	bl	8018cc8 <__malloc_unlock>
 8018c02:	f104 000b 	add.w	r0, r4, #11
 8018c06:	1d23      	adds	r3, r4, #4
 8018c08:	f020 0007 	bic.w	r0, r0, #7
 8018c0c:	1ac2      	subs	r2, r0, r3
 8018c0e:	bf1c      	itt	ne
 8018c10:	1a1b      	subne	r3, r3, r0
 8018c12:	50a3      	strne	r3, [r4, r2]
 8018c14:	e7af      	b.n	8018b76 <_malloc_r+0x22>
 8018c16:	6862      	ldr	r2, [r4, #4]
 8018c18:	42a3      	cmp	r3, r4
 8018c1a:	bf0c      	ite	eq
 8018c1c:	f8c8 2000 	streq.w	r2, [r8]
 8018c20:	605a      	strne	r2, [r3, #4]
 8018c22:	e7eb      	b.n	8018bfc <_malloc_r+0xa8>
 8018c24:	4623      	mov	r3, r4
 8018c26:	6864      	ldr	r4, [r4, #4]
 8018c28:	e7ae      	b.n	8018b88 <_malloc_r+0x34>
 8018c2a:	463c      	mov	r4, r7
 8018c2c:	687f      	ldr	r7, [r7, #4]
 8018c2e:	e7b6      	b.n	8018b9e <_malloc_r+0x4a>
 8018c30:	461a      	mov	r2, r3
 8018c32:	685b      	ldr	r3, [r3, #4]
 8018c34:	42a3      	cmp	r3, r4
 8018c36:	d1fb      	bne.n	8018c30 <_malloc_r+0xdc>
 8018c38:	2300      	movs	r3, #0
 8018c3a:	6053      	str	r3, [r2, #4]
 8018c3c:	e7de      	b.n	8018bfc <_malloc_r+0xa8>
 8018c3e:	230c      	movs	r3, #12
 8018c40:	6033      	str	r3, [r6, #0]
 8018c42:	4630      	mov	r0, r6
 8018c44:	f000 f840 	bl	8018cc8 <__malloc_unlock>
 8018c48:	e794      	b.n	8018b74 <_malloc_r+0x20>
 8018c4a:	6005      	str	r5, [r0, #0]
 8018c4c:	e7d6      	b.n	8018bfc <_malloc_r+0xa8>
 8018c4e:	bf00      	nop
 8018c50:	2001556c 	.word	0x2001556c

08018c54 <sniprintf>:
 8018c54:	b40c      	push	{r2, r3}
 8018c56:	b530      	push	{r4, r5, lr}
 8018c58:	4b17      	ldr	r3, [pc, #92]	@ (8018cb8 <sniprintf+0x64>)
 8018c5a:	1e0c      	subs	r4, r1, #0
 8018c5c:	681d      	ldr	r5, [r3, #0]
 8018c5e:	b09d      	sub	sp, #116	@ 0x74
 8018c60:	da08      	bge.n	8018c74 <sniprintf+0x20>
 8018c62:	238b      	movs	r3, #139	@ 0x8b
 8018c64:	602b      	str	r3, [r5, #0]
 8018c66:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018c6a:	b01d      	add	sp, #116	@ 0x74
 8018c6c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018c70:	b002      	add	sp, #8
 8018c72:	4770      	bx	lr
 8018c74:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8018c78:	f8ad 3014 	strh.w	r3, [sp, #20]
 8018c7c:	bf14      	ite	ne
 8018c7e:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8018c82:	4623      	moveq	r3, r4
 8018c84:	9304      	str	r3, [sp, #16]
 8018c86:	9307      	str	r3, [sp, #28]
 8018c88:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8018c8c:	9002      	str	r0, [sp, #8]
 8018c8e:	9006      	str	r0, [sp, #24]
 8018c90:	f8ad 3016 	strh.w	r3, [sp, #22]
 8018c94:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8018c96:	ab21      	add	r3, sp, #132	@ 0x84
 8018c98:	a902      	add	r1, sp, #8
 8018c9a:	4628      	mov	r0, r5
 8018c9c:	9301      	str	r3, [sp, #4]
 8018c9e:	f000 fd9d 	bl	80197dc <_svfiprintf_r>
 8018ca2:	1c43      	adds	r3, r0, #1
 8018ca4:	bfbc      	itt	lt
 8018ca6:	238b      	movlt	r3, #139	@ 0x8b
 8018ca8:	602b      	strlt	r3, [r5, #0]
 8018caa:	2c00      	cmp	r4, #0
 8018cac:	d0dd      	beq.n	8018c6a <sniprintf+0x16>
 8018cae:	9b02      	ldr	r3, [sp, #8]
 8018cb0:	2200      	movs	r2, #0
 8018cb2:	701a      	strb	r2, [r3, #0]
 8018cb4:	e7d9      	b.n	8018c6a <sniprintf+0x16>
 8018cb6:	bf00      	nop
 8018cb8:	200007cc 	.word	0x200007cc

08018cbc <__malloc_lock>:
 8018cbc:	4801      	ldr	r0, [pc, #4]	@ (8018cc4 <__malloc_lock+0x8>)
 8018cbe:	f000 bca4 	b.w	801960a <__retarget_lock_acquire_recursive>
 8018cc2:	bf00      	nop
 8018cc4:	200156ad 	.word	0x200156ad

08018cc8 <__malloc_unlock>:
 8018cc8:	4801      	ldr	r0, [pc, #4]	@ (8018cd0 <__malloc_unlock+0x8>)
 8018cca:	f000 bc9f 	b.w	801960c <__retarget_lock_release_recursive>
 8018cce:	bf00      	nop
 8018cd0:	200156ad 	.word	0x200156ad

08018cd4 <srand>:
 8018cd4:	b538      	push	{r3, r4, r5, lr}
 8018cd6:	4b10      	ldr	r3, [pc, #64]	@ (8018d18 <srand+0x44>)
 8018cd8:	681d      	ldr	r5, [r3, #0]
 8018cda:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8018cdc:	4604      	mov	r4, r0
 8018cde:	b9b3      	cbnz	r3, 8018d0e <srand+0x3a>
 8018ce0:	2018      	movs	r0, #24
 8018ce2:	f7ff ff05 	bl	8018af0 <malloc>
 8018ce6:	4602      	mov	r2, r0
 8018ce8:	6328      	str	r0, [r5, #48]	@ 0x30
 8018cea:	b920      	cbnz	r0, 8018cf6 <srand+0x22>
 8018cec:	4b0b      	ldr	r3, [pc, #44]	@ (8018d1c <srand+0x48>)
 8018cee:	480c      	ldr	r0, [pc, #48]	@ (8018d20 <srand+0x4c>)
 8018cf0:	2146      	movs	r1, #70	@ 0x46
 8018cf2:	f000 fca3 	bl	801963c <__assert_func>
 8018cf6:	490b      	ldr	r1, [pc, #44]	@ (8018d24 <srand+0x50>)
 8018cf8:	4b0b      	ldr	r3, [pc, #44]	@ (8018d28 <srand+0x54>)
 8018cfa:	e9c0 1300 	strd	r1, r3, [r0]
 8018cfe:	4b0b      	ldr	r3, [pc, #44]	@ (8018d2c <srand+0x58>)
 8018d00:	6083      	str	r3, [r0, #8]
 8018d02:	230b      	movs	r3, #11
 8018d04:	8183      	strh	r3, [r0, #12]
 8018d06:	2100      	movs	r1, #0
 8018d08:	2001      	movs	r0, #1
 8018d0a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8018d0e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8018d10:	2200      	movs	r2, #0
 8018d12:	611c      	str	r4, [r3, #16]
 8018d14:	615a      	str	r2, [r3, #20]
 8018d16:	bd38      	pop	{r3, r4, r5, pc}
 8018d18:	200007cc 	.word	0x200007cc
 8018d1c:	0801ba3e 	.word	0x0801ba3e
 8018d20:	0801ba55 	.word	0x0801ba55
 8018d24:	abcd330e 	.word	0xabcd330e
 8018d28:	e66d1234 	.word	0xe66d1234
 8018d2c:	0005deec 	.word	0x0005deec

08018d30 <rand>:
 8018d30:	4b16      	ldr	r3, [pc, #88]	@ (8018d8c <rand+0x5c>)
 8018d32:	b510      	push	{r4, lr}
 8018d34:	681c      	ldr	r4, [r3, #0]
 8018d36:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8018d38:	b9b3      	cbnz	r3, 8018d68 <rand+0x38>
 8018d3a:	2018      	movs	r0, #24
 8018d3c:	f7ff fed8 	bl	8018af0 <malloc>
 8018d40:	4602      	mov	r2, r0
 8018d42:	6320      	str	r0, [r4, #48]	@ 0x30
 8018d44:	b920      	cbnz	r0, 8018d50 <rand+0x20>
 8018d46:	4b12      	ldr	r3, [pc, #72]	@ (8018d90 <rand+0x60>)
 8018d48:	4812      	ldr	r0, [pc, #72]	@ (8018d94 <rand+0x64>)
 8018d4a:	2152      	movs	r1, #82	@ 0x52
 8018d4c:	f000 fc76 	bl	801963c <__assert_func>
 8018d50:	4911      	ldr	r1, [pc, #68]	@ (8018d98 <rand+0x68>)
 8018d52:	4b12      	ldr	r3, [pc, #72]	@ (8018d9c <rand+0x6c>)
 8018d54:	e9c0 1300 	strd	r1, r3, [r0]
 8018d58:	4b11      	ldr	r3, [pc, #68]	@ (8018da0 <rand+0x70>)
 8018d5a:	6083      	str	r3, [r0, #8]
 8018d5c:	230b      	movs	r3, #11
 8018d5e:	8183      	strh	r3, [r0, #12]
 8018d60:	2100      	movs	r1, #0
 8018d62:	2001      	movs	r0, #1
 8018d64:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8018d68:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8018d6a:	480e      	ldr	r0, [pc, #56]	@ (8018da4 <rand+0x74>)
 8018d6c:	690b      	ldr	r3, [r1, #16]
 8018d6e:	694c      	ldr	r4, [r1, #20]
 8018d70:	4a0d      	ldr	r2, [pc, #52]	@ (8018da8 <rand+0x78>)
 8018d72:	4358      	muls	r0, r3
 8018d74:	fb02 0004 	mla	r0, r2, r4, r0
 8018d78:	fba3 3202 	umull	r3, r2, r3, r2
 8018d7c:	3301      	adds	r3, #1
 8018d7e:	eb40 0002 	adc.w	r0, r0, r2
 8018d82:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8018d86:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8018d8a:	bd10      	pop	{r4, pc}
 8018d8c:	200007cc 	.word	0x200007cc
 8018d90:	0801ba3e 	.word	0x0801ba3e
 8018d94:	0801ba55 	.word	0x0801ba55
 8018d98:	abcd330e 	.word	0xabcd330e
 8018d9c:	e66d1234 	.word	0xe66d1234
 8018da0:	0005deec 	.word	0x0005deec
 8018da4:	5851f42d 	.word	0x5851f42d
 8018da8:	4c957f2d 	.word	0x4c957f2d

08018dac <realloc>:
 8018dac:	4b02      	ldr	r3, [pc, #8]	@ (8018db8 <realloc+0xc>)
 8018dae:	460a      	mov	r2, r1
 8018db0:	4601      	mov	r1, r0
 8018db2:	6818      	ldr	r0, [r3, #0]
 8018db4:	f000 b8a6 	b.w	8018f04 <_realloc_r>
 8018db8:	200007cc 	.word	0x200007cc

08018dbc <std>:
 8018dbc:	2300      	movs	r3, #0
 8018dbe:	b510      	push	{r4, lr}
 8018dc0:	4604      	mov	r4, r0
 8018dc2:	e9c0 3300 	strd	r3, r3, [r0]
 8018dc6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8018dca:	6083      	str	r3, [r0, #8]
 8018dcc:	8181      	strh	r1, [r0, #12]
 8018dce:	6643      	str	r3, [r0, #100]	@ 0x64
 8018dd0:	81c2      	strh	r2, [r0, #14]
 8018dd2:	6183      	str	r3, [r0, #24]
 8018dd4:	4619      	mov	r1, r3
 8018dd6:	2208      	movs	r2, #8
 8018dd8:	305c      	adds	r0, #92	@ 0x5c
 8018dda:	f000 fbb0 	bl	801953e <memset>
 8018dde:	4b0d      	ldr	r3, [pc, #52]	@ (8018e14 <std+0x58>)
 8018de0:	6263      	str	r3, [r4, #36]	@ 0x24
 8018de2:	4b0d      	ldr	r3, [pc, #52]	@ (8018e18 <std+0x5c>)
 8018de4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8018de6:	4b0d      	ldr	r3, [pc, #52]	@ (8018e1c <std+0x60>)
 8018de8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8018dea:	4b0d      	ldr	r3, [pc, #52]	@ (8018e20 <std+0x64>)
 8018dec:	6323      	str	r3, [r4, #48]	@ 0x30
 8018dee:	4b0d      	ldr	r3, [pc, #52]	@ (8018e24 <std+0x68>)
 8018df0:	6224      	str	r4, [r4, #32]
 8018df2:	429c      	cmp	r4, r3
 8018df4:	d006      	beq.n	8018e04 <std+0x48>
 8018df6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8018dfa:	4294      	cmp	r4, r2
 8018dfc:	d002      	beq.n	8018e04 <std+0x48>
 8018dfe:	33d0      	adds	r3, #208	@ 0xd0
 8018e00:	429c      	cmp	r4, r3
 8018e02:	d105      	bne.n	8018e10 <std+0x54>
 8018e04:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8018e08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018e0c:	f000 bbfc 	b.w	8019608 <__retarget_lock_init_recursive>
 8018e10:	bd10      	pop	{r4, pc}
 8018e12:	bf00      	nop
 8018e14:	0801a0dd 	.word	0x0801a0dd
 8018e18:	0801a0ff 	.word	0x0801a0ff
 8018e1c:	0801a137 	.word	0x0801a137
 8018e20:	0801a15b 	.word	0x0801a15b
 8018e24:	20015570 	.word	0x20015570

08018e28 <stdio_exit_handler>:
 8018e28:	4a02      	ldr	r2, [pc, #8]	@ (8018e34 <stdio_exit_handler+0xc>)
 8018e2a:	4903      	ldr	r1, [pc, #12]	@ (8018e38 <stdio_exit_handler+0x10>)
 8018e2c:	4803      	ldr	r0, [pc, #12]	@ (8018e3c <stdio_exit_handler+0x14>)
 8018e2e:	f000 b90f 	b.w	8019050 <_fwalk_sglue>
 8018e32:	bf00      	nop
 8018e34:	200007c0 	.word	0x200007c0
 8018e38:	0801a07d 	.word	0x0801a07d
 8018e3c:	200007d0 	.word	0x200007d0

08018e40 <cleanup_stdio>:
 8018e40:	6841      	ldr	r1, [r0, #4]
 8018e42:	4b0c      	ldr	r3, [pc, #48]	@ (8018e74 <cleanup_stdio+0x34>)
 8018e44:	4299      	cmp	r1, r3
 8018e46:	b510      	push	{r4, lr}
 8018e48:	4604      	mov	r4, r0
 8018e4a:	d001      	beq.n	8018e50 <cleanup_stdio+0x10>
 8018e4c:	f001 f916 	bl	801a07c <_fflush_r>
 8018e50:	68a1      	ldr	r1, [r4, #8]
 8018e52:	4b09      	ldr	r3, [pc, #36]	@ (8018e78 <cleanup_stdio+0x38>)
 8018e54:	4299      	cmp	r1, r3
 8018e56:	d002      	beq.n	8018e5e <cleanup_stdio+0x1e>
 8018e58:	4620      	mov	r0, r4
 8018e5a:	f001 f90f 	bl	801a07c <_fflush_r>
 8018e5e:	68e1      	ldr	r1, [r4, #12]
 8018e60:	4b06      	ldr	r3, [pc, #24]	@ (8018e7c <cleanup_stdio+0x3c>)
 8018e62:	4299      	cmp	r1, r3
 8018e64:	d004      	beq.n	8018e70 <cleanup_stdio+0x30>
 8018e66:	4620      	mov	r0, r4
 8018e68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018e6c:	f001 b906 	b.w	801a07c <_fflush_r>
 8018e70:	bd10      	pop	{r4, pc}
 8018e72:	bf00      	nop
 8018e74:	20015570 	.word	0x20015570
 8018e78:	200155d8 	.word	0x200155d8
 8018e7c:	20015640 	.word	0x20015640

08018e80 <global_stdio_init.part.0>:
 8018e80:	b510      	push	{r4, lr}
 8018e82:	4b0b      	ldr	r3, [pc, #44]	@ (8018eb0 <global_stdio_init.part.0+0x30>)
 8018e84:	4c0b      	ldr	r4, [pc, #44]	@ (8018eb4 <global_stdio_init.part.0+0x34>)
 8018e86:	4a0c      	ldr	r2, [pc, #48]	@ (8018eb8 <global_stdio_init.part.0+0x38>)
 8018e88:	601a      	str	r2, [r3, #0]
 8018e8a:	4620      	mov	r0, r4
 8018e8c:	2200      	movs	r2, #0
 8018e8e:	2104      	movs	r1, #4
 8018e90:	f7ff ff94 	bl	8018dbc <std>
 8018e94:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8018e98:	2201      	movs	r2, #1
 8018e9a:	2109      	movs	r1, #9
 8018e9c:	f7ff ff8e 	bl	8018dbc <std>
 8018ea0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8018ea4:	2202      	movs	r2, #2
 8018ea6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018eaa:	2112      	movs	r1, #18
 8018eac:	f7ff bf86 	b.w	8018dbc <std>
 8018eb0:	200156a8 	.word	0x200156a8
 8018eb4:	20015570 	.word	0x20015570
 8018eb8:	08018e29 	.word	0x08018e29

08018ebc <__sfp_lock_acquire>:
 8018ebc:	4801      	ldr	r0, [pc, #4]	@ (8018ec4 <__sfp_lock_acquire+0x8>)
 8018ebe:	f000 bba4 	b.w	801960a <__retarget_lock_acquire_recursive>
 8018ec2:	bf00      	nop
 8018ec4:	200156ae 	.word	0x200156ae

08018ec8 <__sfp_lock_release>:
 8018ec8:	4801      	ldr	r0, [pc, #4]	@ (8018ed0 <__sfp_lock_release+0x8>)
 8018eca:	f000 bb9f 	b.w	801960c <__retarget_lock_release_recursive>
 8018ece:	bf00      	nop
 8018ed0:	200156ae 	.word	0x200156ae

08018ed4 <__sinit>:
 8018ed4:	b510      	push	{r4, lr}
 8018ed6:	4604      	mov	r4, r0
 8018ed8:	f7ff fff0 	bl	8018ebc <__sfp_lock_acquire>
 8018edc:	6a23      	ldr	r3, [r4, #32]
 8018ede:	b11b      	cbz	r3, 8018ee8 <__sinit+0x14>
 8018ee0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018ee4:	f7ff bff0 	b.w	8018ec8 <__sfp_lock_release>
 8018ee8:	4b04      	ldr	r3, [pc, #16]	@ (8018efc <__sinit+0x28>)
 8018eea:	6223      	str	r3, [r4, #32]
 8018eec:	4b04      	ldr	r3, [pc, #16]	@ (8018f00 <__sinit+0x2c>)
 8018eee:	681b      	ldr	r3, [r3, #0]
 8018ef0:	2b00      	cmp	r3, #0
 8018ef2:	d1f5      	bne.n	8018ee0 <__sinit+0xc>
 8018ef4:	f7ff ffc4 	bl	8018e80 <global_stdio_init.part.0>
 8018ef8:	e7f2      	b.n	8018ee0 <__sinit+0xc>
 8018efa:	bf00      	nop
 8018efc:	08018e41 	.word	0x08018e41
 8018f00:	200156a8 	.word	0x200156a8

08018f04 <_realloc_r>:
 8018f04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018f08:	4680      	mov	r8, r0
 8018f0a:	4615      	mov	r5, r2
 8018f0c:	460c      	mov	r4, r1
 8018f0e:	b921      	cbnz	r1, 8018f1a <_realloc_r+0x16>
 8018f10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018f14:	4611      	mov	r1, r2
 8018f16:	f7ff be1d 	b.w	8018b54 <_malloc_r>
 8018f1a:	b92a      	cbnz	r2, 8018f28 <_realloc_r+0x24>
 8018f1c:	f000 fbb8 	bl	8019690 <_free_r>
 8018f20:	2400      	movs	r4, #0
 8018f22:	4620      	mov	r0, r4
 8018f24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018f28:	f001 f8d0 	bl	801a0cc <_malloc_usable_size_r>
 8018f2c:	4285      	cmp	r5, r0
 8018f2e:	4606      	mov	r6, r0
 8018f30:	d802      	bhi.n	8018f38 <_realloc_r+0x34>
 8018f32:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8018f36:	d8f4      	bhi.n	8018f22 <_realloc_r+0x1e>
 8018f38:	4629      	mov	r1, r5
 8018f3a:	4640      	mov	r0, r8
 8018f3c:	f7ff fe0a 	bl	8018b54 <_malloc_r>
 8018f40:	4607      	mov	r7, r0
 8018f42:	2800      	cmp	r0, #0
 8018f44:	d0ec      	beq.n	8018f20 <_realloc_r+0x1c>
 8018f46:	42b5      	cmp	r5, r6
 8018f48:	462a      	mov	r2, r5
 8018f4a:	4621      	mov	r1, r4
 8018f4c:	bf28      	it	cs
 8018f4e:	4632      	movcs	r2, r6
 8018f50:	f000 fb5d 	bl	801960e <memcpy>
 8018f54:	4621      	mov	r1, r4
 8018f56:	4640      	mov	r0, r8
 8018f58:	f000 fb9a 	bl	8019690 <_free_r>
 8018f5c:	463c      	mov	r4, r7
 8018f5e:	e7e0      	b.n	8018f22 <_realloc_r+0x1e>

08018f60 <_strtoul_l.constprop.0>:
 8018f60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018f64:	4e34      	ldr	r6, [pc, #208]	@ (8019038 <_strtoul_l.constprop.0+0xd8>)
 8018f66:	4686      	mov	lr, r0
 8018f68:	460d      	mov	r5, r1
 8018f6a:	4628      	mov	r0, r5
 8018f6c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018f70:	5d37      	ldrb	r7, [r6, r4]
 8018f72:	f017 0708 	ands.w	r7, r7, #8
 8018f76:	d1f8      	bne.n	8018f6a <_strtoul_l.constprop.0+0xa>
 8018f78:	2c2d      	cmp	r4, #45	@ 0x2d
 8018f7a:	d12f      	bne.n	8018fdc <_strtoul_l.constprop.0+0x7c>
 8018f7c:	782c      	ldrb	r4, [r5, #0]
 8018f7e:	2701      	movs	r7, #1
 8018f80:	1c85      	adds	r5, r0, #2
 8018f82:	f033 0010 	bics.w	r0, r3, #16
 8018f86:	d109      	bne.n	8018f9c <_strtoul_l.constprop.0+0x3c>
 8018f88:	2c30      	cmp	r4, #48	@ 0x30
 8018f8a:	d12c      	bne.n	8018fe6 <_strtoul_l.constprop.0+0x86>
 8018f8c:	7828      	ldrb	r0, [r5, #0]
 8018f8e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8018f92:	2858      	cmp	r0, #88	@ 0x58
 8018f94:	d127      	bne.n	8018fe6 <_strtoul_l.constprop.0+0x86>
 8018f96:	786c      	ldrb	r4, [r5, #1]
 8018f98:	2310      	movs	r3, #16
 8018f9a:	3502      	adds	r5, #2
 8018f9c:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8018fa0:	2600      	movs	r6, #0
 8018fa2:	fbb8 f8f3 	udiv	r8, r8, r3
 8018fa6:	fb03 f908 	mul.w	r9, r3, r8
 8018faa:	ea6f 0909 	mvn.w	r9, r9
 8018fae:	4630      	mov	r0, r6
 8018fb0:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8018fb4:	f1bc 0f09 	cmp.w	ip, #9
 8018fb8:	d81c      	bhi.n	8018ff4 <_strtoul_l.constprop.0+0x94>
 8018fba:	4664      	mov	r4, ip
 8018fbc:	42a3      	cmp	r3, r4
 8018fbe:	dd2a      	ble.n	8019016 <_strtoul_l.constprop.0+0xb6>
 8018fc0:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8018fc4:	d007      	beq.n	8018fd6 <_strtoul_l.constprop.0+0x76>
 8018fc6:	4580      	cmp	r8, r0
 8018fc8:	d322      	bcc.n	8019010 <_strtoul_l.constprop.0+0xb0>
 8018fca:	d101      	bne.n	8018fd0 <_strtoul_l.constprop.0+0x70>
 8018fcc:	45a1      	cmp	r9, r4
 8018fce:	db1f      	blt.n	8019010 <_strtoul_l.constprop.0+0xb0>
 8018fd0:	fb00 4003 	mla	r0, r0, r3, r4
 8018fd4:	2601      	movs	r6, #1
 8018fd6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018fda:	e7e9      	b.n	8018fb0 <_strtoul_l.constprop.0+0x50>
 8018fdc:	2c2b      	cmp	r4, #43	@ 0x2b
 8018fde:	bf04      	itt	eq
 8018fe0:	782c      	ldrbeq	r4, [r5, #0]
 8018fe2:	1c85      	addeq	r5, r0, #2
 8018fe4:	e7cd      	b.n	8018f82 <_strtoul_l.constprop.0+0x22>
 8018fe6:	2b00      	cmp	r3, #0
 8018fe8:	d1d8      	bne.n	8018f9c <_strtoul_l.constprop.0+0x3c>
 8018fea:	2c30      	cmp	r4, #48	@ 0x30
 8018fec:	bf0c      	ite	eq
 8018fee:	2308      	moveq	r3, #8
 8018ff0:	230a      	movne	r3, #10
 8018ff2:	e7d3      	b.n	8018f9c <_strtoul_l.constprop.0+0x3c>
 8018ff4:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8018ff8:	f1bc 0f19 	cmp.w	ip, #25
 8018ffc:	d801      	bhi.n	8019002 <_strtoul_l.constprop.0+0xa2>
 8018ffe:	3c37      	subs	r4, #55	@ 0x37
 8019000:	e7dc      	b.n	8018fbc <_strtoul_l.constprop.0+0x5c>
 8019002:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8019006:	f1bc 0f19 	cmp.w	ip, #25
 801900a:	d804      	bhi.n	8019016 <_strtoul_l.constprop.0+0xb6>
 801900c:	3c57      	subs	r4, #87	@ 0x57
 801900e:	e7d5      	b.n	8018fbc <_strtoul_l.constprop.0+0x5c>
 8019010:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8019014:	e7df      	b.n	8018fd6 <_strtoul_l.constprop.0+0x76>
 8019016:	1c73      	adds	r3, r6, #1
 8019018:	d106      	bne.n	8019028 <_strtoul_l.constprop.0+0xc8>
 801901a:	2322      	movs	r3, #34	@ 0x22
 801901c:	f8ce 3000 	str.w	r3, [lr]
 8019020:	4630      	mov	r0, r6
 8019022:	b932      	cbnz	r2, 8019032 <_strtoul_l.constprop.0+0xd2>
 8019024:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019028:	b107      	cbz	r7, 801902c <_strtoul_l.constprop.0+0xcc>
 801902a:	4240      	negs	r0, r0
 801902c:	2a00      	cmp	r2, #0
 801902e:	d0f9      	beq.n	8019024 <_strtoul_l.constprop.0+0xc4>
 8019030:	b106      	cbz	r6, 8019034 <_strtoul_l.constprop.0+0xd4>
 8019032:	1e69      	subs	r1, r5, #1
 8019034:	6011      	str	r1, [r2, #0]
 8019036:	e7f5      	b.n	8019024 <_strtoul_l.constprop.0+0xc4>
 8019038:	0801baae 	.word	0x0801baae

0801903c <strtoul>:
 801903c:	4613      	mov	r3, r2
 801903e:	460a      	mov	r2, r1
 8019040:	4601      	mov	r1, r0
 8019042:	4802      	ldr	r0, [pc, #8]	@ (801904c <strtoul+0x10>)
 8019044:	6800      	ldr	r0, [r0, #0]
 8019046:	f7ff bf8b 	b.w	8018f60 <_strtoul_l.constprop.0>
 801904a:	bf00      	nop
 801904c:	200007cc 	.word	0x200007cc

08019050 <_fwalk_sglue>:
 8019050:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019054:	4607      	mov	r7, r0
 8019056:	4688      	mov	r8, r1
 8019058:	4614      	mov	r4, r2
 801905a:	2600      	movs	r6, #0
 801905c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8019060:	f1b9 0901 	subs.w	r9, r9, #1
 8019064:	d505      	bpl.n	8019072 <_fwalk_sglue+0x22>
 8019066:	6824      	ldr	r4, [r4, #0]
 8019068:	2c00      	cmp	r4, #0
 801906a:	d1f7      	bne.n	801905c <_fwalk_sglue+0xc>
 801906c:	4630      	mov	r0, r6
 801906e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019072:	89ab      	ldrh	r3, [r5, #12]
 8019074:	2b01      	cmp	r3, #1
 8019076:	d907      	bls.n	8019088 <_fwalk_sglue+0x38>
 8019078:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801907c:	3301      	adds	r3, #1
 801907e:	d003      	beq.n	8019088 <_fwalk_sglue+0x38>
 8019080:	4629      	mov	r1, r5
 8019082:	4638      	mov	r0, r7
 8019084:	47c0      	blx	r8
 8019086:	4306      	orrs	r6, r0
 8019088:	3568      	adds	r5, #104	@ 0x68
 801908a:	e7e9      	b.n	8019060 <_fwalk_sglue+0x10>

0801908c <_vsniprintf_r>:
 801908c:	b530      	push	{r4, r5, lr}
 801908e:	4614      	mov	r4, r2
 8019090:	2c00      	cmp	r4, #0
 8019092:	b09b      	sub	sp, #108	@ 0x6c
 8019094:	4605      	mov	r5, r0
 8019096:	461a      	mov	r2, r3
 8019098:	da05      	bge.n	80190a6 <_vsniprintf_r+0x1a>
 801909a:	238b      	movs	r3, #139	@ 0x8b
 801909c:	6003      	str	r3, [r0, #0]
 801909e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80190a2:	b01b      	add	sp, #108	@ 0x6c
 80190a4:	bd30      	pop	{r4, r5, pc}
 80190a6:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80190aa:	f8ad 300c 	strh.w	r3, [sp, #12]
 80190ae:	bf14      	ite	ne
 80190b0:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 80190b4:	4623      	moveq	r3, r4
 80190b6:	9302      	str	r3, [sp, #8]
 80190b8:	9305      	str	r3, [sp, #20]
 80190ba:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80190be:	9100      	str	r1, [sp, #0]
 80190c0:	9104      	str	r1, [sp, #16]
 80190c2:	f8ad 300e 	strh.w	r3, [sp, #14]
 80190c6:	4669      	mov	r1, sp
 80190c8:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80190ca:	f000 fb87 	bl	80197dc <_svfiprintf_r>
 80190ce:	1c43      	adds	r3, r0, #1
 80190d0:	bfbc      	itt	lt
 80190d2:	238b      	movlt	r3, #139	@ 0x8b
 80190d4:	602b      	strlt	r3, [r5, #0]
 80190d6:	2c00      	cmp	r4, #0
 80190d8:	d0e3      	beq.n	80190a2 <_vsniprintf_r+0x16>
 80190da:	9b00      	ldr	r3, [sp, #0]
 80190dc:	2200      	movs	r2, #0
 80190de:	701a      	strb	r2, [r3, #0]
 80190e0:	e7df      	b.n	80190a2 <_vsniprintf_r+0x16>
	...

080190e4 <vsniprintf>:
 80190e4:	b507      	push	{r0, r1, r2, lr}
 80190e6:	9300      	str	r3, [sp, #0]
 80190e8:	4613      	mov	r3, r2
 80190ea:	460a      	mov	r2, r1
 80190ec:	4601      	mov	r1, r0
 80190ee:	4803      	ldr	r0, [pc, #12]	@ (80190fc <vsniprintf+0x18>)
 80190f0:	6800      	ldr	r0, [r0, #0]
 80190f2:	f7ff ffcb 	bl	801908c <_vsniprintf_r>
 80190f6:	b003      	add	sp, #12
 80190f8:	f85d fb04 	ldr.w	pc, [sp], #4
 80190fc:	200007cc 	.word	0x200007cc

08019100 <_fwrite_r>:
 8019100:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019104:	9c08      	ldr	r4, [sp, #32]
 8019106:	468a      	mov	sl, r1
 8019108:	4690      	mov	r8, r2
 801910a:	fb02 f903 	mul.w	r9, r2, r3
 801910e:	4606      	mov	r6, r0
 8019110:	b118      	cbz	r0, 801911a <_fwrite_r+0x1a>
 8019112:	6a03      	ldr	r3, [r0, #32]
 8019114:	b90b      	cbnz	r3, 801911a <_fwrite_r+0x1a>
 8019116:	f7ff fedd 	bl	8018ed4 <__sinit>
 801911a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801911c:	07dd      	lsls	r5, r3, #31
 801911e:	d405      	bmi.n	801912c <_fwrite_r+0x2c>
 8019120:	89a3      	ldrh	r3, [r4, #12]
 8019122:	0598      	lsls	r0, r3, #22
 8019124:	d402      	bmi.n	801912c <_fwrite_r+0x2c>
 8019126:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8019128:	f000 fa6f 	bl	801960a <__retarget_lock_acquire_recursive>
 801912c:	89a3      	ldrh	r3, [r4, #12]
 801912e:	0719      	lsls	r1, r3, #28
 8019130:	d516      	bpl.n	8019160 <_fwrite_r+0x60>
 8019132:	6923      	ldr	r3, [r4, #16]
 8019134:	b1a3      	cbz	r3, 8019160 <_fwrite_r+0x60>
 8019136:	2500      	movs	r5, #0
 8019138:	454d      	cmp	r5, r9
 801913a:	d01f      	beq.n	801917c <_fwrite_r+0x7c>
 801913c:	68a7      	ldr	r7, [r4, #8]
 801913e:	f81a 1005 	ldrb.w	r1, [sl, r5]
 8019142:	3f01      	subs	r7, #1
 8019144:	2f00      	cmp	r7, #0
 8019146:	60a7      	str	r7, [r4, #8]
 8019148:	da04      	bge.n	8019154 <_fwrite_r+0x54>
 801914a:	69a3      	ldr	r3, [r4, #24]
 801914c:	429f      	cmp	r7, r3
 801914e:	db0f      	blt.n	8019170 <_fwrite_r+0x70>
 8019150:	290a      	cmp	r1, #10
 8019152:	d00d      	beq.n	8019170 <_fwrite_r+0x70>
 8019154:	6823      	ldr	r3, [r4, #0]
 8019156:	1c5a      	adds	r2, r3, #1
 8019158:	6022      	str	r2, [r4, #0]
 801915a:	7019      	strb	r1, [r3, #0]
 801915c:	3501      	adds	r5, #1
 801915e:	e7eb      	b.n	8019138 <_fwrite_r+0x38>
 8019160:	4621      	mov	r1, r4
 8019162:	4630      	mov	r0, r6
 8019164:	f000 f864 	bl	8019230 <__swsetup_r>
 8019168:	2800      	cmp	r0, #0
 801916a:	d0e4      	beq.n	8019136 <_fwrite_r+0x36>
 801916c:	2500      	movs	r5, #0
 801916e:	e005      	b.n	801917c <_fwrite_r+0x7c>
 8019170:	4622      	mov	r2, r4
 8019172:	4630      	mov	r0, r6
 8019174:	f000 f81e 	bl	80191b4 <__swbuf_r>
 8019178:	3001      	adds	r0, #1
 801917a:	d1ef      	bne.n	801915c <_fwrite_r+0x5c>
 801917c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801917e:	07da      	lsls	r2, r3, #31
 8019180:	d405      	bmi.n	801918e <_fwrite_r+0x8e>
 8019182:	89a3      	ldrh	r3, [r4, #12]
 8019184:	059b      	lsls	r3, r3, #22
 8019186:	d402      	bmi.n	801918e <_fwrite_r+0x8e>
 8019188:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801918a:	f000 fa3f 	bl	801960c <__retarget_lock_release_recursive>
 801918e:	fbb5 f0f8 	udiv	r0, r5, r8
 8019192:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08019198 <fwrite>:
 8019198:	b507      	push	{r0, r1, r2, lr}
 801919a:	9300      	str	r3, [sp, #0]
 801919c:	4613      	mov	r3, r2
 801919e:	460a      	mov	r2, r1
 80191a0:	4601      	mov	r1, r0
 80191a2:	4803      	ldr	r0, [pc, #12]	@ (80191b0 <fwrite+0x18>)
 80191a4:	6800      	ldr	r0, [r0, #0]
 80191a6:	f7ff ffab 	bl	8019100 <_fwrite_r>
 80191aa:	b003      	add	sp, #12
 80191ac:	f85d fb04 	ldr.w	pc, [sp], #4
 80191b0:	200007cc 	.word	0x200007cc

080191b4 <__swbuf_r>:
 80191b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80191b6:	460e      	mov	r6, r1
 80191b8:	4614      	mov	r4, r2
 80191ba:	4605      	mov	r5, r0
 80191bc:	b118      	cbz	r0, 80191c6 <__swbuf_r+0x12>
 80191be:	6a03      	ldr	r3, [r0, #32]
 80191c0:	b90b      	cbnz	r3, 80191c6 <__swbuf_r+0x12>
 80191c2:	f7ff fe87 	bl	8018ed4 <__sinit>
 80191c6:	69a3      	ldr	r3, [r4, #24]
 80191c8:	60a3      	str	r3, [r4, #8]
 80191ca:	89a3      	ldrh	r3, [r4, #12]
 80191cc:	071a      	lsls	r2, r3, #28
 80191ce:	d501      	bpl.n	80191d4 <__swbuf_r+0x20>
 80191d0:	6923      	ldr	r3, [r4, #16]
 80191d2:	b943      	cbnz	r3, 80191e6 <__swbuf_r+0x32>
 80191d4:	4621      	mov	r1, r4
 80191d6:	4628      	mov	r0, r5
 80191d8:	f000 f82a 	bl	8019230 <__swsetup_r>
 80191dc:	b118      	cbz	r0, 80191e6 <__swbuf_r+0x32>
 80191de:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80191e2:	4638      	mov	r0, r7
 80191e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80191e6:	6823      	ldr	r3, [r4, #0]
 80191e8:	6922      	ldr	r2, [r4, #16]
 80191ea:	1a98      	subs	r0, r3, r2
 80191ec:	6963      	ldr	r3, [r4, #20]
 80191ee:	b2f6      	uxtb	r6, r6
 80191f0:	4283      	cmp	r3, r0
 80191f2:	4637      	mov	r7, r6
 80191f4:	dc05      	bgt.n	8019202 <__swbuf_r+0x4e>
 80191f6:	4621      	mov	r1, r4
 80191f8:	4628      	mov	r0, r5
 80191fa:	f000 ff3f 	bl	801a07c <_fflush_r>
 80191fe:	2800      	cmp	r0, #0
 8019200:	d1ed      	bne.n	80191de <__swbuf_r+0x2a>
 8019202:	68a3      	ldr	r3, [r4, #8]
 8019204:	3b01      	subs	r3, #1
 8019206:	60a3      	str	r3, [r4, #8]
 8019208:	6823      	ldr	r3, [r4, #0]
 801920a:	1c5a      	adds	r2, r3, #1
 801920c:	6022      	str	r2, [r4, #0]
 801920e:	701e      	strb	r6, [r3, #0]
 8019210:	6962      	ldr	r2, [r4, #20]
 8019212:	1c43      	adds	r3, r0, #1
 8019214:	429a      	cmp	r2, r3
 8019216:	d004      	beq.n	8019222 <__swbuf_r+0x6e>
 8019218:	89a3      	ldrh	r3, [r4, #12]
 801921a:	07db      	lsls	r3, r3, #31
 801921c:	d5e1      	bpl.n	80191e2 <__swbuf_r+0x2e>
 801921e:	2e0a      	cmp	r6, #10
 8019220:	d1df      	bne.n	80191e2 <__swbuf_r+0x2e>
 8019222:	4621      	mov	r1, r4
 8019224:	4628      	mov	r0, r5
 8019226:	f000 ff29 	bl	801a07c <_fflush_r>
 801922a:	2800      	cmp	r0, #0
 801922c:	d0d9      	beq.n	80191e2 <__swbuf_r+0x2e>
 801922e:	e7d6      	b.n	80191de <__swbuf_r+0x2a>

08019230 <__swsetup_r>:
 8019230:	b538      	push	{r3, r4, r5, lr}
 8019232:	4b29      	ldr	r3, [pc, #164]	@ (80192d8 <__swsetup_r+0xa8>)
 8019234:	4605      	mov	r5, r0
 8019236:	6818      	ldr	r0, [r3, #0]
 8019238:	460c      	mov	r4, r1
 801923a:	b118      	cbz	r0, 8019244 <__swsetup_r+0x14>
 801923c:	6a03      	ldr	r3, [r0, #32]
 801923e:	b90b      	cbnz	r3, 8019244 <__swsetup_r+0x14>
 8019240:	f7ff fe48 	bl	8018ed4 <__sinit>
 8019244:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019248:	0719      	lsls	r1, r3, #28
 801924a:	d422      	bmi.n	8019292 <__swsetup_r+0x62>
 801924c:	06da      	lsls	r2, r3, #27
 801924e:	d407      	bmi.n	8019260 <__swsetup_r+0x30>
 8019250:	2209      	movs	r2, #9
 8019252:	602a      	str	r2, [r5, #0]
 8019254:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019258:	81a3      	strh	r3, [r4, #12]
 801925a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801925e:	e033      	b.n	80192c8 <__swsetup_r+0x98>
 8019260:	0758      	lsls	r0, r3, #29
 8019262:	d512      	bpl.n	801928a <__swsetup_r+0x5a>
 8019264:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8019266:	b141      	cbz	r1, 801927a <__swsetup_r+0x4a>
 8019268:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801926c:	4299      	cmp	r1, r3
 801926e:	d002      	beq.n	8019276 <__swsetup_r+0x46>
 8019270:	4628      	mov	r0, r5
 8019272:	f000 fa0d 	bl	8019690 <_free_r>
 8019276:	2300      	movs	r3, #0
 8019278:	6363      	str	r3, [r4, #52]	@ 0x34
 801927a:	89a3      	ldrh	r3, [r4, #12]
 801927c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8019280:	81a3      	strh	r3, [r4, #12]
 8019282:	2300      	movs	r3, #0
 8019284:	6063      	str	r3, [r4, #4]
 8019286:	6923      	ldr	r3, [r4, #16]
 8019288:	6023      	str	r3, [r4, #0]
 801928a:	89a3      	ldrh	r3, [r4, #12]
 801928c:	f043 0308 	orr.w	r3, r3, #8
 8019290:	81a3      	strh	r3, [r4, #12]
 8019292:	6923      	ldr	r3, [r4, #16]
 8019294:	b94b      	cbnz	r3, 80192aa <__swsetup_r+0x7a>
 8019296:	89a3      	ldrh	r3, [r4, #12]
 8019298:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801929c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80192a0:	d003      	beq.n	80192aa <__swsetup_r+0x7a>
 80192a2:	4621      	mov	r1, r4
 80192a4:	4628      	mov	r0, r5
 80192a6:	f000 f83f 	bl	8019328 <__smakebuf_r>
 80192aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80192ae:	f013 0201 	ands.w	r2, r3, #1
 80192b2:	d00a      	beq.n	80192ca <__swsetup_r+0x9a>
 80192b4:	2200      	movs	r2, #0
 80192b6:	60a2      	str	r2, [r4, #8]
 80192b8:	6962      	ldr	r2, [r4, #20]
 80192ba:	4252      	negs	r2, r2
 80192bc:	61a2      	str	r2, [r4, #24]
 80192be:	6922      	ldr	r2, [r4, #16]
 80192c0:	b942      	cbnz	r2, 80192d4 <__swsetup_r+0xa4>
 80192c2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80192c6:	d1c5      	bne.n	8019254 <__swsetup_r+0x24>
 80192c8:	bd38      	pop	{r3, r4, r5, pc}
 80192ca:	0799      	lsls	r1, r3, #30
 80192cc:	bf58      	it	pl
 80192ce:	6962      	ldrpl	r2, [r4, #20]
 80192d0:	60a2      	str	r2, [r4, #8]
 80192d2:	e7f4      	b.n	80192be <__swsetup_r+0x8e>
 80192d4:	2000      	movs	r0, #0
 80192d6:	e7f7      	b.n	80192c8 <__swsetup_r+0x98>
 80192d8:	200007cc 	.word	0x200007cc

080192dc <__swhatbuf_r>:
 80192dc:	b570      	push	{r4, r5, r6, lr}
 80192de:	460c      	mov	r4, r1
 80192e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80192e4:	2900      	cmp	r1, #0
 80192e6:	b096      	sub	sp, #88	@ 0x58
 80192e8:	4615      	mov	r5, r2
 80192ea:	461e      	mov	r6, r3
 80192ec:	da0d      	bge.n	801930a <__swhatbuf_r+0x2e>
 80192ee:	89a3      	ldrh	r3, [r4, #12]
 80192f0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80192f4:	f04f 0100 	mov.w	r1, #0
 80192f8:	bf14      	ite	ne
 80192fa:	2340      	movne	r3, #64	@ 0x40
 80192fc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8019300:	2000      	movs	r0, #0
 8019302:	6031      	str	r1, [r6, #0]
 8019304:	602b      	str	r3, [r5, #0]
 8019306:	b016      	add	sp, #88	@ 0x58
 8019308:	bd70      	pop	{r4, r5, r6, pc}
 801930a:	466a      	mov	r2, sp
 801930c:	f000 f920 	bl	8019550 <_fstat_r>
 8019310:	2800      	cmp	r0, #0
 8019312:	dbec      	blt.n	80192ee <__swhatbuf_r+0x12>
 8019314:	9901      	ldr	r1, [sp, #4]
 8019316:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801931a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801931e:	4259      	negs	r1, r3
 8019320:	4159      	adcs	r1, r3
 8019322:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8019326:	e7eb      	b.n	8019300 <__swhatbuf_r+0x24>

08019328 <__smakebuf_r>:
 8019328:	898b      	ldrh	r3, [r1, #12]
 801932a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801932c:	079d      	lsls	r5, r3, #30
 801932e:	4606      	mov	r6, r0
 8019330:	460c      	mov	r4, r1
 8019332:	d507      	bpl.n	8019344 <__smakebuf_r+0x1c>
 8019334:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8019338:	6023      	str	r3, [r4, #0]
 801933a:	6123      	str	r3, [r4, #16]
 801933c:	2301      	movs	r3, #1
 801933e:	6163      	str	r3, [r4, #20]
 8019340:	b003      	add	sp, #12
 8019342:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019344:	ab01      	add	r3, sp, #4
 8019346:	466a      	mov	r2, sp
 8019348:	f7ff ffc8 	bl	80192dc <__swhatbuf_r>
 801934c:	9f00      	ldr	r7, [sp, #0]
 801934e:	4605      	mov	r5, r0
 8019350:	4639      	mov	r1, r7
 8019352:	4630      	mov	r0, r6
 8019354:	f7ff fbfe 	bl	8018b54 <_malloc_r>
 8019358:	b948      	cbnz	r0, 801936e <__smakebuf_r+0x46>
 801935a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801935e:	059a      	lsls	r2, r3, #22
 8019360:	d4ee      	bmi.n	8019340 <__smakebuf_r+0x18>
 8019362:	f023 0303 	bic.w	r3, r3, #3
 8019366:	f043 0302 	orr.w	r3, r3, #2
 801936a:	81a3      	strh	r3, [r4, #12]
 801936c:	e7e2      	b.n	8019334 <__smakebuf_r+0xc>
 801936e:	89a3      	ldrh	r3, [r4, #12]
 8019370:	6020      	str	r0, [r4, #0]
 8019372:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8019376:	81a3      	strh	r3, [r4, #12]
 8019378:	9b01      	ldr	r3, [sp, #4]
 801937a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801937e:	b15b      	cbz	r3, 8019398 <__smakebuf_r+0x70>
 8019380:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019384:	4630      	mov	r0, r6
 8019386:	f000 f8f5 	bl	8019574 <_isatty_r>
 801938a:	b128      	cbz	r0, 8019398 <__smakebuf_r+0x70>
 801938c:	89a3      	ldrh	r3, [r4, #12]
 801938e:	f023 0303 	bic.w	r3, r3, #3
 8019392:	f043 0301 	orr.w	r3, r3, #1
 8019396:	81a3      	strh	r3, [r4, #12]
 8019398:	89a3      	ldrh	r3, [r4, #12]
 801939a:	431d      	orrs	r5, r3
 801939c:	81a5      	strh	r5, [r4, #12]
 801939e:	e7cf      	b.n	8019340 <__smakebuf_r+0x18>

080193a0 <iprintf>:
 80193a0:	b40f      	push	{r0, r1, r2, r3}
 80193a2:	b507      	push	{r0, r1, r2, lr}
 80193a4:	4906      	ldr	r1, [pc, #24]	@ (80193c0 <iprintf+0x20>)
 80193a6:	ab04      	add	r3, sp, #16
 80193a8:	6808      	ldr	r0, [r1, #0]
 80193aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80193ae:	6881      	ldr	r1, [r0, #8]
 80193b0:	9301      	str	r3, [sp, #4]
 80193b2:	f000 fb39 	bl	8019a28 <_vfiprintf_r>
 80193b6:	b003      	add	sp, #12
 80193b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80193bc:	b004      	add	sp, #16
 80193be:	4770      	bx	lr
 80193c0:	200007cc 	.word	0x200007cc

080193c4 <_puts_r>:
 80193c4:	6a03      	ldr	r3, [r0, #32]
 80193c6:	b570      	push	{r4, r5, r6, lr}
 80193c8:	6884      	ldr	r4, [r0, #8]
 80193ca:	4605      	mov	r5, r0
 80193cc:	460e      	mov	r6, r1
 80193ce:	b90b      	cbnz	r3, 80193d4 <_puts_r+0x10>
 80193d0:	f7ff fd80 	bl	8018ed4 <__sinit>
 80193d4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80193d6:	07db      	lsls	r3, r3, #31
 80193d8:	d405      	bmi.n	80193e6 <_puts_r+0x22>
 80193da:	89a3      	ldrh	r3, [r4, #12]
 80193dc:	0598      	lsls	r0, r3, #22
 80193de:	d402      	bmi.n	80193e6 <_puts_r+0x22>
 80193e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80193e2:	f000 f912 	bl	801960a <__retarget_lock_acquire_recursive>
 80193e6:	89a3      	ldrh	r3, [r4, #12]
 80193e8:	0719      	lsls	r1, r3, #28
 80193ea:	d502      	bpl.n	80193f2 <_puts_r+0x2e>
 80193ec:	6923      	ldr	r3, [r4, #16]
 80193ee:	2b00      	cmp	r3, #0
 80193f0:	d135      	bne.n	801945e <_puts_r+0x9a>
 80193f2:	4621      	mov	r1, r4
 80193f4:	4628      	mov	r0, r5
 80193f6:	f7ff ff1b 	bl	8019230 <__swsetup_r>
 80193fa:	b380      	cbz	r0, 801945e <_puts_r+0x9a>
 80193fc:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8019400:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8019402:	07da      	lsls	r2, r3, #31
 8019404:	d405      	bmi.n	8019412 <_puts_r+0x4e>
 8019406:	89a3      	ldrh	r3, [r4, #12]
 8019408:	059b      	lsls	r3, r3, #22
 801940a:	d402      	bmi.n	8019412 <_puts_r+0x4e>
 801940c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801940e:	f000 f8fd 	bl	801960c <__retarget_lock_release_recursive>
 8019412:	4628      	mov	r0, r5
 8019414:	bd70      	pop	{r4, r5, r6, pc}
 8019416:	2b00      	cmp	r3, #0
 8019418:	da04      	bge.n	8019424 <_puts_r+0x60>
 801941a:	69a2      	ldr	r2, [r4, #24]
 801941c:	429a      	cmp	r2, r3
 801941e:	dc17      	bgt.n	8019450 <_puts_r+0x8c>
 8019420:	290a      	cmp	r1, #10
 8019422:	d015      	beq.n	8019450 <_puts_r+0x8c>
 8019424:	6823      	ldr	r3, [r4, #0]
 8019426:	1c5a      	adds	r2, r3, #1
 8019428:	6022      	str	r2, [r4, #0]
 801942a:	7019      	strb	r1, [r3, #0]
 801942c:	68a3      	ldr	r3, [r4, #8]
 801942e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8019432:	3b01      	subs	r3, #1
 8019434:	60a3      	str	r3, [r4, #8]
 8019436:	2900      	cmp	r1, #0
 8019438:	d1ed      	bne.n	8019416 <_puts_r+0x52>
 801943a:	2b00      	cmp	r3, #0
 801943c:	da11      	bge.n	8019462 <_puts_r+0x9e>
 801943e:	4622      	mov	r2, r4
 8019440:	210a      	movs	r1, #10
 8019442:	4628      	mov	r0, r5
 8019444:	f7ff feb6 	bl	80191b4 <__swbuf_r>
 8019448:	3001      	adds	r0, #1
 801944a:	d0d7      	beq.n	80193fc <_puts_r+0x38>
 801944c:	250a      	movs	r5, #10
 801944e:	e7d7      	b.n	8019400 <_puts_r+0x3c>
 8019450:	4622      	mov	r2, r4
 8019452:	4628      	mov	r0, r5
 8019454:	f7ff feae 	bl	80191b4 <__swbuf_r>
 8019458:	3001      	adds	r0, #1
 801945a:	d1e7      	bne.n	801942c <_puts_r+0x68>
 801945c:	e7ce      	b.n	80193fc <_puts_r+0x38>
 801945e:	3e01      	subs	r6, #1
 8019460:	e7e4      	b.n	801942c <_puts_r+0x68>
 8019462:	6823      	ldr	r3, [r4, #0]
 8019464:	1c5a      	adds	r2, r3, #1
 8019466:	6022      	str	r2, [r4, #0]
 8019468:	220a      	movs	r2, #10
 801946a:	701a      	strb	r2, [r3, #0]
 801946c:	e7ee      	b.n	801944c <_puts_r+0x88>
	...

08019470 <puts>:
 8019470:	4b02      	ldr	r3, [pc, #8]	@ (801947c <puts+0xc>)
 8019472:	4601      	mov	r1, r0
 8019474:	6818      	ldr	r0, [r3, #0]
 8019476:	f7ff bfa5 	b.w	80193c4 <_puts_r>
 801947a:	bf00      	nop
 801947c:	200007cc 	.word	0x200007cc

08019480 <strchr>:
 8019480:	b2c9      	uxtb	r1, r1
 8019482:	4603      	mov	r3, r0
 8019484:	4618      	mov	r0, r3
 8019486:	f813 2b01 	ldrb.w	r2, [r3], #1
 801948a:	b112      	cbz	r2, 8019492 <strchr+0x12>
 801948c:	428a      	cmp	r2, r1
 801948e:	d1f9      	bne.n	8019484 <strchr+0x4>
 8019490:	4770      	bx	lr
 8019492:	2900      	cmp	r1, #0
 8019494:	bf18      	it	ne
 8019496:	2000      	movne	r0, #0
 8019498:	4770      	bx	lr

0801949a <strncmp>:
 801949a:	b510      	push	{r4, lr}
 801949c:	b16a      	cbz	r2, 80194ba <strncmp+0x20>
 801949e:	3901      	subs	r1, #1
 80194a0:	1884      	adds	r4, r0, r2
 80194a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80194a6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80194aa:	429a      	cmp	r2, r3
 80194ac:	d103      	bne.n	80194b6 <strncmp+0x1c>
 80194ae:	42a0      	cmp	r0, r4
 80194b0:	d001      	beq.n	80194b6 <strncmp+0x1c>
 80194b2:	2a00      	cmp	r2, #0
 80194b4:	d1f5      	bne.n	80194a2 <strncmp+0x8>
 80194b6:	1ad0      	subs	r0, r2, r3
 80194b8:	bd10      	pop	{r4, pc}
 80194ba:	4610      	mov	r0, r2
 80194bc:	e7fc      	b.n	80194b8 <strncmp+0x1e>

080194be <strstr>:
 80194be:	780a      	ldrb	r2, [r1, #0]
 80194c0:	b570      	push	{r4, r5, r6, lr}
 80194c2:	b96a      	cbnz	r2, 80194e0 <strstr+0x22>
 80194c4:	bd70      	pop	{r4, r5, r6, pc}
 80194c6:	429a      	cmp	r2, r3
 80194c8:	d109      	bne.n	80194de <strstr+0x20>
 80194ca:	460c      	mov	r4, r1
 80194cc:	4605      	mov	r5, r0
 80194ce:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80194d2:	2b00      	cmp	r3, #0
 80194d4:	d0f6      	beq.n	80194c4 <strstr+0x6>
 80194d6:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80194da:	429e      	cmp	r6, r3
 80194dc:	d0f7      	beq.n	80194ce <strstr+0x10>
 80194de:	3001      	adds	r0, #1
 80194e0:	7803      	ldrb	r3, [r0, #0]
 80194e2:	2b00      	cmp	r3, #0
 80194e4:	d1ef      	bne.n	80194c6 <strstr+0x8>
 80194e6:	4618      	mov	r0, r3
 80194e8:	e7ec      	b.n	80194c4 <strstr+0x6>

080194ea <memcmp>:
 80194ea:	b510      	push	{r4, lr}
 80194ec:	3901      	subs	r1, #1
 80194ee:	4402      	add	r2, r0
 80194f0:	4290      	cmp	r0, r2
 80194f2:	d101      	bne.n	80194f8 <memcmp+0xe>
 80194f4:	2000      	movs	r0, #0
 80194f6:	e005      	b.n	8019504 <memcmp+0x1a>
 80194f8:	7803      	ldrb	r3, [r0, #0]
 80194fa:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80194fe:	42a3      	cmp	r3, r4
 8019500:	d001      	beq.n	8019506 <memcmp+0x1c>
 8019502:	1b18      	subs	r0, r3, r4
 8019504:	bd10      	pop	{r4, pc}
 8019506:	3001      	adds	r0, #1
 8019508:	e7f2      	b.n	80194f0 <memcmp+0x6>

0801950a <memmove>:
 801950a:	4288      	cmp	r0, r1
 801950c:	b510      	push	{r4, lr}
 801950e:	eb01 0402 	add.w	r4, r1, r2
 8019512:	d902      	bls.n	801951a <memmove+0x10>
 8019514:	4284      	cmp	r4, r0
 8019516:	4623      	mov	r3, r4
 8019518:	d807      	bhi.n	801952a <memmove+0x20>
 801951a:	1e43      	subs	r3, r0, #1
 801951c:	42a1      	cmp	r1, r4
 801951e:	d008      	beq.n	8019532 <memmove+0x28>
 8019520:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019524:	f803 2f01 	strb.w	r2, [r3, #1]!
 8019528:	e7f8      	b.n	801951c <memmove+0x12>
 801952a:	4402      	add	r2, r0
 801952c:	4601      	mov	r1, r0
 801952e:	428a      	cmp	r2, r1
 8019530:	d100      	bne.n	8019534 <memmove+0x2a>
 8019532:	bd10      	pop	{r4, pc}
 8019534:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8019538:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801953c:	e7f7      	b.n	801952e <memmove+0x24>

0801953e <memset>:
 801953e:	4402      	add	r2, r0
 8019540:	4603      	mov	r3, r0
 8019542:	4293      	cmp	r3, r2
 8019544:	d100      	bne.n	8019548 <memset+0xa>
 8019546:	4770      	bx	lr
 8019548:	f803 1b01 	strb.w	r1, [r3], #1
 801954c:	e7f9      	b.n	8019542 <memset+0x4>
	...

08019550 <_fstat_r>:
 8019550:	b538      	push	{r3, r4, r5, lr}
 8019552:	4d07      	ldr	r5, [pc, #28]	@ (8019570 <_fstat_r+0x20>)
 8019554:	2300      	movs	r3, #0
 8019556:	4604      	mov	r4, r0
 8019558:	4608      	mov	r0, r1
 801955a:	4611      	mov	r1, r2
 801955c:	602b      	str	r3, [r5, #0]
 801955e:	f7e8 ffdf 	bl	8002520 <_fstat>
 8019562:	1c43      	adds	r3, r0, #1
 8019564:	d102      	bne.n	801956c <_fstat_r+0x1c>
 8019566:	682b      	ldr	r3, [r5, #0]
 8019568:	b103      	cbz	r3, 801956c <_fstat_r+0x1c>
 801956a:	6023      	str	r3, [r4, #0]
 801956c:	bd38      	pop	{r3, r4, r5, pc}
 801956e:	bf00      	nop
 8019570:	200156b0 	.word	0x200156b0

08019574 <_isatty_r>:
 8019574:	b538      	push	{r3, r4, r5, lr}
 8019576:	4d06      	ldr	r5, [pc, #24]	@ (8019590 <_isatty_r+0x1c>)
 8019578:	2300      	movs	r3, #0
 801957a:	4604      	mov	r4, r0
 801957c:	4608      	mov	r0, r1
 801957e:	602b      	str	r3, [r5, #0]
 8019580:	f7e8 ffde 	bl	8002540 <_isatty>
 8019584:	1c43      	adds	r3, r0, #1
 8019586:	d102      	bne.n	801958e <_isatty_r+0x1a>
 8019588:	682b      	ldr	r3, [r5, #0]
 801958a:	b103      	cbz	r3, 801958e <_isatty_r+0x1a>
 801958c:	6023      	str	r3, [r4, #0]
 801958e:	bd38      	pop	{r3, r4, r5, pc}
 8019590:	200156b0 	.word	0x200156b0

08019594 <_sbrk_r>:
 8019594:	b538      	push	{r3, r4, r5, lr}
 8019596:	4d06      	ldr	r5, [pc, #24]	@ (80195b0 <_sbrk_r+0x1c>)
 8019598:	2300      	movs	r3, #0
 801959a:	4604      	mov	r4, r0
 801959c:	4608      	mov	r0, r1
 801959e:	602b      	str	r3, [r5, #0]
 80195a0:	f7e8 ffe6 	bl	8002570 <_sbrk>
 80195a4:	1c43      	adds	r3, r0, #1
 80195a6:	d102      	bne.n	80195ae <_sbrk_r+0x1a>
 80195a8:	682b      	ldr	r3, [r5, #0]
 80195aa:	b103      	cbz	r3, 80195ae <_sbrk_r+0x1a>
 80195ac:	6023      	str	r3, [r4, #0]
 80195ae:	bd38      	pop	{r3, r4, r5, pc}
 80195b0:	200156b0 	.word	0x200156b0

080195b4 <__errno>:
 80195b4:	4b01      	ldr	r3, [pc, #4]	@ (80195bc <__errno+0x8>)
 80195b6:	6818      	ldr	r0, [r3, #0]
 80195b8:	4770      	bx	lr
 80195ba:	bf00      	nop
 80195bc:	200007cc 	.word	0x200007cc

080195c0 <__libc_init_array>:
 80195c0:	b570      	push	{r4, r5, r6, lr}
 80195c2:	4d0d      	ldr	r5, [pc, #52]	@ (80195f8 <__libc_init_array+0x38>)
 80195c4:	4c0d      	ldr	r4, [pc, #52]	@ (80195fc <__libc_init_array+0x3c>)
 80195c6:	1b64      	subs	r4, r4, r5
 80195c8:	10a4      	asrs	r4, r4, #2
 80195ca:	2600      	movs	r6, #0
 80195cc:	42a6      	cmp	r6, r4
 80195ce:	d109      	bne.n	80195e4 <__libc_init_array+0x24>
 80195d0:	4d0b      	ldr	r5, [pc, #44]	@ (8019600 <__libc_init_array+0x40>)
 80195d2:	4c0c      	ldr	r4, [pc, #48]	@ (8019604 <__libc_init_array+0x44>)
 80195d4:	f001 f8f4 	bl	801a7c0 <_init>
 80195d8:	1b64      	subs	r4, r4, r5
 80195da:	10a4      	asrs	r4, r4, #2
 80195dc:	2600      	movs	r6, #0
 80195de:	42a6      	cmp	r6, r4
 80195e0:	d105      	bne.n	80195ee <__libc_init_array+0x2e>
 80195e2:	bd70      	pop	{r4, r5, r6, pc}
 80195e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80195e8:	4798      	blx	r3
 80195ea:	3601      	adds	r6, #1
 80195ec:	e7ee      	b.n	80195cc <__libc_init_array+0xc>
 80195ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80195f2:	4798      	blx	r3
 80195f4:	3601      	adds	r6, #1
 80195f6:	e7f2      	b.n	80195de <__libc_init_array+0x1e>
 80195f8:	0801bc98 	.word	0x0801bc98
 80195fc:	0801bc98 	.word	0x0801bc98
 8019600:	0801bc98 	.word	0x0801bc98
 8019604:	0801bca8 	.word	0x0801bca8

08019608 <__retarget_lock_init_recursive>:
 8019608:	4770      	bx	lr

0801960a <__retarget_lock_acquire_recursive>:
 801960a:	4770      	bx	lr

0801960c <__retarget_lock_release_recursive>:
 801960c:	4770      	bx	lr

0801960e <memcpy>:
 801960e:	440a      	add	r2, r1
 8019610:	4291      	cmp	r1, r2
 8019612:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8019616:	d100      	bne.n	801961a <memcpy+0xc>
 8019618:	4770      	bx	lr
 801961a:	b510      	push	{r4, lr}
 801961c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019620:	f803 4f01 	strb.w	r4, [r3, #1]!
 8019624:	4291      	cmp	r1, r2
 8019626:	d1f9      	bne.n	801961c <memcpy+0xe>
 8019628:	bd10      	pop	{r4, pc}

0801962a <strcpy>:
 801962a:	4603      	mov	r3, r0
 801962c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019630:	f803 2b01 	strb.w	r2, [r3], #1
 8019634:	2a00      	cmp	r2, #0
 8019636:	d1f9      	bne.n	801962c <strcpy+0x2>
 8019638:	4770      	bx	lr
	...

0801963c <__assert_func>:
 801963c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801963e:	4614      	mov	r4, r2
 8019640:	461a      	mov	r2, r3
 8019642:	4b09      	ldr	r3, [pc, #36]	@ (8019668 <__assert_func+0x2c>)
 8019644:	681b      	ldr	r3, [r3, #0]
 8019646:	4605      	mov	r5, r0
 8019648:	68d8      	ldr	r0, [r3, #12]
 801964a:	b954      	cbnz	r4, 8019662 <__assert_func+0x26>
 801964c:	4b07      	ldr	r3, [pc, #28]	@ (801966c <__assert_func+0x30>)
 801964e:	461c      	mov	r4, r3
 8019650:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8019654:	9100      	str	r1, [sp, #0]
 8019656:	462b      	mov	r3, r5
 8019658:	4905      	ldr	r1, [pc, #20]	@ (8019670 <__assert_func+0x34>)
 801965a:	f000 fd83 	bl	801a164 <fiprintf>
 801965e:	f000 fdd9 	bl	801a214 <abort>
 8019662:	4b04      	ldr	r3, [pc, #16]	@ (8019674 <__assert_func+0x38>)
 8019664:	e7f4      	b.n	8019650 <__assert_func+0x14>
 8019666:	bf00      	nop
 8019668:	200007cc 	.word	0x200007cc
 801966c:	0801bbe9 	.word	0x0801bbe9
 8019670:	0801bbbb 	.word	0x0801bbbb
 8019674:	0801bbae 	.word	0x0801bbae

08019678 <__env_lock>:
 8019678:	4801      	ldr	r0, [pc, #4]	@ (8019680 <__env_lock+0x8>)
 801967a:	f7ff bfc6 	b.w	801960a <__retarget_lock_acquire_recursive>
 801967e:	bf00      	nop
 8019680:	200156ac 	.word	0x200156ac

08019684 <__env_unlock>:
 8019684:	4801      	ldr	r0, [pc, #4]	@ (801968c <__env_unlock+0x8>)
 8019686:	f7ff bfc1 	b.w	801960c <__retarget_lock_release_recursive>
 801968a:	bf00      	nop
 801968c:	200156ac 	.word	0x200156ac

08019690 <_free_r>:
 8019690:	b538      	push	{r3, r4, r5, lr}
 8019692:	4605      	mov	r5, r0
 8019694:	2900      	cmp	r1, #0
 8019696:	d041      	beq.n	801971c <_free_r+0x8c>
 8019698:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801969c:	1f0c      	subs	r4, r1, #4
 801969e:	2b00      	cmp	r3, #0
 80196a0:	bfb8      	it	lt
 80196a2:	18e4      	addlt	r4, r4, r3
 80196a4:	f7ff fb0a 	bl	8018cbc <__malloc_lock>
 80196a8:	4a1d      	ldr	r2, [pc, #116]	@ (8019720 <_free_r+0x90>)
 80196aa:	6813      	ldr	r3, [r2, #0]
 80196ac:	b933      	cbnz	r3, 80196bc <_free_r+0x2c>
 80196ae:	6063      	str	r3, [r4, #4]
 80196b0:	6014      	str	r4, [r2, #0]
 80196b2:	4628      	mov	r0, r5
 80196b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80196b8:	f7ff bb06 	b.w	8018cc8 <__malloc_unlock>
 80196bc:	42a3      	cmp	r3, r4
 80196be:	d908      	bls.n	80196d2 <_free_r+0x42>
 80196c0:	6820      	ldr	r0, [r4, #0]
 80196c2:	1821      	adds	r1, r4, r0
 80196c4:	428b      	cmp	r3, r1
 80196c6:	bf01      	itttt	eq
 80196c8:	6819      	ldreq	r1, [r3, #0]
 80196ca:	685b      	ldreq	r3, [r3, #4]
 80196cc:	1809      	addeq	r1, r1, r0
 80196ce:	6021      	streq	r1, [r4, #0]
 80196d0:	e7ed      	b.n	80196ae <_free_r+0x1e>
 80196d2:	461a      	mov	r2, r3
 80196d4:	685b      	ldr	r3, [r3, #4]
 80196d6:	b10b      	cbz	r3, 80196dc <_free_r+0x4c>
 80196d8:	42a3      	cmp	r3, r4
 80196da:	d9fa      	bls.n	80196d2 <_free_r+0x42>
 80196dc:	6811      	ldr	r1, [r2, #0]
 80196de:	1850      	adds	r0, r2, r1
 80196e0:	42a0      	cmp	r0, r4
 80196e2:	d10b      	bne.n	80196fc <_free_r+0x6c>
 80196e4:	6820      	ldr	r0, [r4, #0]
 80196e6:	4401      	add	r1, r0
 80196e8:	1850      	adds	r0, r2, r1
 80196ea:	4283      	cmp	r3, r0
 80196ec:	6011      	str	r1, [r2, #0]
 80196ee:	d1e0      	bne.n	80196b2 <_free_r+0x22>
 80196f0:	6818      	ldr	r0, [r3, #0]
 80196f2:	685b      	ldr	r3, [r3, #4]
 80196f4:	6053      	str	r3, [r2, #4]
 80196f6:	4408      	add	r0, r1
 80196f8:	6010      	str	r0, [r2, #0]
 80196fa:	e7da      	b.n	80196b2 <_free_r+0x22>
 80196fc:	d902      	bls.n	8019704 <_free_r+0x74>
 80196fe:	230c      	movs	r3, #12
 8019700:	602b      	str	r3, [r5, #0]
 8019702:	e7d6      	b.n	80196b2 <_free_r+0x22>
 8019704:	6820      	ldr	r0, [r4, #0]
 8019706:	1821      	adds	r1, r4, r0
 8019708:	428b      	cmp	r3, r1
 801970a:	bf04      	itt	eq
 801970c:	6819      	ldreq	r1, [r3, #0]
 801970e:	685b      	ldreq	r3, [r3, #4]
 8019710:	6063      	str	r3, [r4, #4]
 8019712:	bf04      	itt	eq
 8019714:	1809      	addeq	r1, r1, r0
 8019716:	6021      	streq	r1, [r4, #0]
 8019718:	6054      	str	r4, [r2, #4]
 801971a:	e7ca      	b.n	80196b2 <_free_r+0x22>
 801971c:	bd38      	pop	{r3, r4, r5, pc}
 801971e:	bf00      	nop
 8019720:	2001556c 	.word	0x2001556c

08019724 <__ssputs_r>:
 8019724:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019728:	688e      	ldr	r6, [r1, #8]
 801972a:	461f      	mov	r7, r3
 801972c:	42be      	cmp	r6, r7
 801972e:	680b      	ldr	r3, [r1, #0]
 8019730:	4682      	mov	sl, r0
 8019732:	460c      	mov	r4, r1
 8019734:	4690      	mov	r8, r2
 8019736:	d82d      	bhi.n	8019794 <__ssputs_r+0x70>
 8019738:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801973c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8019740:	d026      	beq.n	8019790 <__ssputs_r+0x6c>
 8019742:	6965      	ldr	r5, [r4, #20]
 8019744:	6909      	ldr	r1, [r1, #16]
 8019746:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801974a:	eba3 0901 	sub.w	r9, r3, r1
 801974e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8019752:	1c7b      	adds	r3, r7, #1
 8019754:	444b      	add	r3, r9
 8019756:	106d      	asrs	r5, r5, #1
 8019758:	429d      	cmp	r5, r3
 801975a:	bf38      	it	cc
 801975c:	461d      	movcc	r5, r3
 801975e:	0553      	lsls	r3, r2, #21
 8019760:	d527      	bpl.n	80197b2 <__ssputs_r+0x8e>
 8019762:	4629      	mov	r1, r5
 8019764:	f7ff f9f6 	bl	8018b54 <_malloc_r>
 8019768:	4606      	mov	r6, r0
 801976a:	b360      	cbz	r0, 80197c6 <__ssputs_r+0xa2>
 801976c:	6921      	ldr	r1, [r4, #16]
 801976e:	464a      	mov	r2, r9
 8019770:	f7ff ff4d 	bl	801960e <memcpy>
 8019774:	89a3      	ldrh	r3, [r4, #12]
 8019776:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801977a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801977e:	81a3      	strh	r3, [r4, #12]
 8019780:	6126      	str	r6, [r4, #16]
 8019782:	6165      	str	r5, [r4, #20]
 8019784:	444e      	add	r6, r9
 8019786:	eba5 0509 	sub.w	r5, r5, r9
 801978a:	6026      	str	r6, [r4, #0]
 801978c:	60a5      	str	r5, [r4, #8]
 801978e:	463e      	mov	r6, r7
 8019790:	42be      	cmp	r6, r7
 8019792:	d900      	bls.n	8019796 <__ssputs_r+0x72>
 8019794:	463e      	mov	r6, r7
 8019796:	6820      	ldr	r0, [r4, #0]
 8019798:	4632      	mov	r2, r6
 801979a:	4641      	mov	r1, r8
 801979c:	f7ff feb5 	bl	801950a <memmove>
 80197a0:	68a3      	ldr	r3, [r4, #8]
 80197a2:	1b9b      	subs	r3, r3, r6
 80197a4:	60a3      	str	r3, [r4, #8]
 80197a6:	6823      	ldr	r3, [r4, #0]
 80197a8:	4433      	add	r3, r6
 80197aa:	6023      	str	r3, [r4, #0]
 80197ac:	2000      	movs	r0, #0
 80197ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80197b2:	462a      	mov	r2, r5
 80197b4:	f7ff fba6 	bl	8018f04 <_realloc_r>
 80197b8:	4606      	mov	r6, r0
 80197ba:	2800      	cmp	r0, #0
 80197bc:	d1e0      	bne.n	8019780 <__ssputs_r+0x5c>
 80197be:	6921      	ldr	r1, [r4, #16]
 80197c0:	4650      	mov	r0, sl
 80197c2:	f7ff ff65 	bl	8019690 <_free_r>
 80197c6:	230c      	movs	r3, #12
 80197c8:	f8ca 3000 	str.w	r3, [sl]
 80197cc:	89a3      	ldrh	r3, [r4, #12]
 80197ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80197d2:	81a3      	strh	r3, [r4, #12]
 80197d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80197d8:	e7e9      	b.n	80197ae <__ssputs_r+0x8a>
	...

080197dc <_svfiprintf_r>:
 80197dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80197e0:	4698      	mov	r8, r3
 80197e2:	898b      	ldrh	r3, [r1, #12]
 80197e4:	061b      	lsls	r3, r3, #24
 80197e6:	b09d      	sub	sp, #116	@ 0x74
 80197e8:	4607      	mov	r7, r0
 80197ea:	460d      	mov	r5, r1
 80197ec:	4614      	mov	r4, r2
 80197ee:	d510      	bpl.n	8019812 <_svfiprintf_r+0x36>
 80197f0:	690b      	ldr	r3, [r1, #16]
 80197f2:	b973      	cbnz	r3, 8019812 <_svfiprintf_r+0x36>
 80197f4:	2140      	movs	r1, #64	@ 0x40
 80197f6:	f7ff f9ad 	bl	8018b54 <_malloc_r>
 80197fa:	6028      	str	r0, [r5, #0]
 80197fc:	6128      	str	r0, [r5, #16]
 80197fe:	b930      	cbnz	r0, 801980e <_svfiprintf_r+0x32>
 8019800:	230c      	movs	r3, #12
 8019802:	603b      	str	r3, [r7, #0]
 8019804:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019808:	b01d      	add	sp, #116	@ 0x74
 801980a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801980e:	2340      	movs	r3, #64	@ 0x40
 8019810:	616b      	str	r3, [r5, #20]
 8019812:	2300      	movs	r3, #0
 8019814:	9309      	str	r3, [sp, #36]	@ 0x24
 8019816:	2320      	movs	r3, #32
 8019818:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801981c:	f8cd 800c 	str.w	r8, [sp, #12]
 8019820:	2330      	movs	r3, #48	@ 0x30
 8019822:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80199c0 <_svfiprintf_r+0x1e4>
 8019826:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801982a:	f04f 0901 	mov.w	r9, #1
 801982e:	4623      	mov	r3, r4
 8019830:	469a      	mov	sl, r3
 8019832:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019836:	b10a      	cbz	r2, 801983c <_svfiprintf_r+0x60>
 8019838:	2a25      	cmp	r2, #37	@ 0x25
 801983a:	d1f9      	bne.n	8019830 <_svfiprintf_r+0x54>
 801983c:	ebba 0b04 	subs.w	fp, sl, r4
 8019840:	d00b      	beq.n	801985a <_svfiprintf_r+0x7e>
 8019842:	465b      	mov	r3, fp
 8019844:	4622      	mov	r2, r4
 8019846:	4629      	mov	r1, r5
 8019848:	4638      	mov	r0, r7
 801984a:	f7ff ff6b 	bl	8019724 <__ssputs_r>
 801984e:	3001      	adds	r0, #1
 8019850:	f000 80a7 	beq.w	80199a2 <_svfiprintf_r+0x1c6>
 8019854:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019856:	445a      	add	r2, fp
 8019858:	9209      	str	r2, [sp, #36]	@ 0x24
 801985a:	f89a 3000 	ldrb.w	r3, [sl]
 801985e:	2b00      	cmp	r3, #0
 8019860:	f000 809f 	beq.w	80199a2 <_svfiprintf_r+0x1c6>
 8019864:	2300      	movs	r3, #0
 8019866:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801986a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801986e:	f10a 0a01 	add.w	sl, sl, #1
 8019872:	9304      	str	r3, [sp, #16]
 8019874:	9307      	str	r3, [sp, #28]
 8019876:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801987a:	931a      	str	r3, [sp, #104]	@ 0x68
 801987c:	4654      	mov	r4, sl
 801987e:	2205      	movs	r2, #5
 8019880:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019884:	484e      	ldr	r0, [pc, #312]	@ (80199c0 <_svfiprintf_r+0x1e4>)
 8019886:	f7e6 fcd3 	bl	8000230 <memchr>
 801988a:	9a04      	ldr	r2, [sp, #16]
 801988c:	b9d8      	cbnz	r0, 80198c6 <_svfiprintf_r+0xea>
 801988e:	06d0      	lsls	r0, r2, #27
 8019890:	bf44      	itt	mi
 8019892:	2320      	movmi	r3, #32
 8019894:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8019898:	0711      	lsls	r1, r2, #28
 801989a:	bf44      	itt	mi
 801989c:	232b      	movmi	r3, #43	@ 0x2b
 801989e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80198a2:	f89a 3000 	ldrb.w	r3, [sl]
 80198a6:	2b2a      	cmp	r3, #42	@ 0x2a
 80198a8:	d015      	beq.n	80198d6 <_svfiprintf_r+0xfa>
 80198aa:	9a07      	ldr	r2, [sp, #28]
 80198ac:	4654      	mov	r4, sl
 80198ae:	2000      	movs	r0, #0
 80198b0:	f04f 0c0a 	mov.w	ip, #10
 80198b4:	4621      	mov	r1, r4
 80198b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80198ba:	3b30      	subs	r3, #48	@ 0x30
 80198bc:	2b09      	cmp	r3, #9
 80198be:	d94b      	bls.n	8019958 <_svfiprintf_r+0x17c>
 80198c0:	b1b0      	cbz	r0, 80198f0 <_svfiprintf_r+0x114>
 80198c2:	9207      	str	r2, [sp, #28]
 80198c4:	e014      	b.n	80198f0 <_svfiprintf_r+0x114>
 80198c6:	eba0 0308 	sub.w	r3, r0, r8
 80198ca:	fa09 f303 	lsl.w	r3, r9, r3
 80198ce:	4313      	orrs	r3, r2
 80198d0:	9304      	str	r3, [sp, #16]
 80198d2:	46a2      	mov	sl, r4
 80198d4:	e7d2      	b.n	801987c <_svfiprintf_r+0xa0>
 80198d6:	9b03      	ldr	r3, [sp, #12]
 80198d8:	1d19      	adds	r1, r3, #4
 80198da:	681b      	ldr	r3, [r3, #0]
 80198dc:	9103      	str	r1, [sp, #12]
 80198de:	2b00      	cmp	r3, #0
 80198e0:	bfbb      	ittet	lt
 80198e2:	425b      	neglt	r3, r3
 80198e4:	f042 0202 	orrlt.w	r2, r2, #2
 80198e8:	9307      	strge	r3, [sp, #28]
 80198ea:	9307      	strlt	r3, [sp, #28]
 80198ec:	bfb8      	it	lt
 80198ee:	9204      	strlt	r2, [sp, #16]
 80198f0:	7823      	ldrb	r3, [r4, #0]
 80198f2:	2b2e      	cmp	r3, #46	@ 0x2e
 80198f4:	d10a      	bne.n	801990c <_svfiprintf_r+0x130>
 80198f6:	7863      	ldrb	r3, [r4, #1]
 80198f8:	2b2a      	cmp	r3, #42	@ 0x2a
 80198fa:	d132      	bne.n	8019962 <_svfiprintf_r+0x186>
 80198fc:	9b03      	ldr	r3, [sp, #12]
 80198fe:	1d1a      	adds	r2, r3, #4
 8019900:	681b      	ldr	r3, [r3, #0]
 8019902:	9203      	str	r2, [sp, #12]
 8019904:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8019908:	3402      	adds	r4, #2
 801990a:	9305      	str	r3, [sp, #20]
 801990c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80199d0 <_svfiprintf_r+0x1f4>
 8019910:	7821      	ldrb	r1, [r4, #0]
 8019912:	2203      	movs	r2, #3
 8019914:	4650      	mov	r0, sl
 8019916:	f7e6 fc8b 	bl	8000230 <memchr>
 801991a:	b138      	cbz	r0, 801992c <_svfiprintf_r+0x150>
 801991c:	9b04      	ldr	r3, [sp, #16]
 801991e:	eba0 000a 	sub.w	r0, r0, sl
 8019922:	2240      	movs	r2, #64	@ 0x40
 8019924:	4082      	lsls	r2, r0
 8019926:	4313      	orrs	r3, r2
 8019928:	3401      	adds	r4, #1
 801992a:	9304      	str	r3, [sp, #16]
 801992c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019930:	4824      	ldr	r0, [pc, #144]	@ (80199c4 <_svfiprintf_r+0x1e8>)
 8019932:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8019936:	2206      	movs	r2, #6
 8019938:	f7e6 fc7a 	bl	8000230 <memchr>
 801993c:	2800      	cmp	r0, #0
 801993e:	d036      	beq.n	80199ae <_svfiprintf_r+0x1d2>
 8019940:	4b21      	ldr	r3, [pc, #132]	@ (80199c8 <_svfiprintf_r+0x1ec>)
 8019942:	bb1b      	cbnz	r3, 801998c <_svfiprintf_r+0x1b0>
 8019944:	9b03      	ldr	r3, [sp, #12]
 8019946:	3307      	adds	r3, #7
 8019948:	f023 0307 	bic.w	r3, r3, #7
 801994c:	3308      	adds	r3, #8
 801994e:	9303      	str	r3, [sp, #12]
 8019950:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019952:	4433      	add	r3, r6
 8019954:	9309      	str	r3, [sp, #36]	@ 0x24
 8019956:	e76a      	b.n	801982e <_svfiprintf_r+0x52>
 8019958:	fb0c 3202 	mla	r2, ip, r2, r3
 801995c:	460c      	mov	r4, r1
 801995e:	2001      	movs	r0, #1
 8019960:	e7a8      	b.n	80198b4 <_svfiprintf_r+0xd8>
 8019962:	2300      	movs	r3, #0
 8019964:	3401      	adds	r4, #1
 8019966:	9305      	str	r3, [sp, #20]
 8019968:	4619      	mov	r1, r3
 801996a:	f04f 0c0a 	mov.w	ip, #10
 801996e:	4620      	mov	r0, r4
 8019970:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019974:	3a30      	subs	r2, #48	@ 0x30
 8019976:	2a09      	cmp	r2, #9
 8019978:	d903      	bls.n	8019982 <_svfiprintf_r+0x1a6>
 801997a:	2b00      	cmp	r3, #0
 801997c:	d0c6      	beq.n	801990c <_svfiprintf_r+0x130>
 801997e:	9105      	str	r1, [sp, #20]
 8019980:	e7c4      	b.n	801990c <_svfiprintf_r+0x130>
 8019982:	fb0c 2101 	mla	r1, ip, r1, r2
 8019986:	4604      	mov	r4, r0
 8019988:	2301      	movs	r3, #1
 801998a:	e7f0      	b.n	801996e <_svfiprintf_r+0x192>
 801998c:	ab03      	add	r3, sp, #12
 801998e:	9300      	str	r3, [sp, #0]
 8019990:	462a      	mov	r2, r5
 8019992:	4b0e      	ldr	r3, [pc, #56]	@ (80199cc <_svfiprintf_r+0x1f0>)
 8019994:	a904      	add	r1, sp, #16
 8019996:	4638      	mov	r0, r7
 8019998:	f3af 8000 	nop.w
 801999c:	1c42      	adds	r2, r0, #1
 801999e:	4606      	mov	r6, r0
 80199a0:	d1d6      	bne.n	8019950 <_svfiprintf_r+0x174>
 80199a2:	89ab      	ldrh	r3, [r5, #12]
 80199a4:	065b      	lsls	r3, r3, #25
 80199a6:	f53f af2d 	bmi.w	8019804 <_svfiprintf_r+0x28>
 80199aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80199ac:	e72c      	b.n	8019808 <_svfiprintf_r+0x2c>
 80199ae:	ab03      	add	r3, sp, #12
 80199b0:	9300      	str	r3, [sp, #0]
 80199b2:	462a      	mov	r2, r5
 80199b4:	4b05      	ldr	r3, [pc, #20]	@ (80199cc <_svfiprintf_r+0x1f0>)
 80199b6:	a904      	add	r1, sp, #16
 80199b8:	4638      	mov	r0, r7
 80199ba:	f000 f9bb 	bl	8019d34 <_printf_i>
 80199be:	e7ed      	b.n	801999c <_svfiprintf_r+0x1c0>
 80199c0:	0801bbea 	.word	0x0801bbea
 80199c4:	0801bbf4 	.word	0x0801bbf4
 80199c8:	00000000 	.word	0x00000000
 80199cc:	08019725 	.word	0x08019725
 80199d0:	0801bbf0 	.word	0x0801bbf0

080199d4 <__sfputc_r>:
 80199d4:	6893      	ldr	r3, [r2, #8]
 80199d6:	3b01      	subs	r3, #1
 80199d8:	2b00      	cmp	r3, #0
 80199da:	b410      	push	{r4}
 80199dc:	6093      	str	r3, [r2, #8]
 80199de:	da08      	bge.n	80199f2 <__sfputc_r+0x1e>
 80199e0:	6994      	ldr	r4, [r2, #24]
 80199e2:	42a3      	cmp	r3, r4
 80199e4:	db01      	blt.n	80199ea <__sfputc_r+0x16>
 80199e6:	290a      	cmp	r1, #10
 80199e8:	d103      	bne.n	80199f2 <__sfputc_r+0x1e>
 80199ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80199ee:	f7ff bbe1 	b.w	80191b4 <__swbuf_r>
 80199f2:	6813      	ldr	r3, [r2, #0]
 80199f4:	1c58      	adds	r0, r3, #1
 80199f6:	6010      	str	r0, [r2, #0]
 80199f8:	7019      	strb	r1, [r3, #0]
 80199fa:	4608      	mov	r0, r1
 80199fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019a00:	4770      	bx	lr

08019a02 <__sfputs_r>:
 8019a02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019a04:	4606      	mov	r6, r0
 8019a06:	460f      	mov	r7, r1
 8019a08:	4614      	mov	r4, r2
 8019a0a:	18d5      	adds	r5, r2, r3
 8019a0c:	42ac      	cmp	r4, r5
 8019a0e:	d101      	bne.n	8019a14 <__sfputs_r+0x12>
 8019a10:	2000      	movs	r0, #0
 8019a12:	e007      	b.n	8019a24 <__sfputs_r+0x22>
 8019a14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019a18:	463a      	mov	r2, r7
 8019a1a:	4630      	mov	r0, r6
 8019a1c:	f7ff ffda 	bl	80199d4 <__sfputc_r>
 8019a20:	1c43      	adds	r3, r0, #1
 8019a22:	d1f3      	bne.n	8019a0c <__sfputs_r+0xa>
 8019a24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08019a28 <_vfiprintf_r>:
 8019a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019a2c:	460d      	mov	r5, r1
 8019a2e:	b09d      	sub	sp, #116	@ 0x74
 8019a30:	4614      	mov	r4, r2
 8019a32:	4698      	mov	r8, r3
 8019a34:	4606      	mov	r6, r0
 8019a36:	b118      	cbz	r0, 8019a40 <_vfiprintf_r+0x18>
 8019a38:	6a03      	ldr	r3, [r0, #32]
 8019a3a:	b90b      	cbnz	r3, 8019a40 <_vfiprintf_r+0x18>
 8019a3c:	f7ff fa4a 	bl	8018ed4 <__sinit>
 8019a40:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8019a42:	07d9      	lsls	r1, r3, #31
 8019a44:	d405      	bmi.n	8019a52 <_vfiprintf_r+0x2a>
 8019a46:	89ab      	ldrh	r3, [r5, #12]
 8019a48:	059a      	lsls	r2, r3, #22
 8019a4a:	d402      	bmi.n	8019a52 <_vfiprintf_r+0x2a>
 8019a4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8019a4e:	f7ff fddc 	bl	801960a <__retarget_lock_acquire_recursive>
 8019a52:	89ab      	ldrh	r3, [r5, #12]
 8019a54:	071b      	lsls	r3, r3, #28
 8019a56:	d501      	bpl.n	8019a5c <_vfiprintf_r+0x34>
 8019a58:	692b      	ldr	r3, [r5, #16]
 8019a5a:	b99b      	cbnz	r3, 8019a84 <_vfiprintf_r+0x5c>
 8019a5c:	4629      	mov	r1, r5
 8019a5e:	4630      	mov	r0, r6
 8019a60:	f7ff fbe6 	bl	8019230 <__swsetup_r>
 8019a64:	b170      	cbz	r0, 8019a84 <_vfiprintf_r+0x5c>
 8019a66:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8019a68:	07dc      	lsls	r4, r3, #31
 8019a6a:	d504      	bpl.n	8019a76 <_vfiprintf_r+0x4e>
 8019a6c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019a70:	b01d      	add	sp, #116	@ 0x74
 8019a72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019a76:	89ab      	ldrh	r3, [r5, #12]
 8019a78:	0598      	lsls	r0, r3, #22
 8019a7a:	d4f7      	bmi.n	8019a6c <_vfiprintf_r+0x44>
 8019a7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8019a7e:	f7ff fdc5 	bl	801960c <__retarget_lock_release_recursive>
 8019a82:	e7f3      	b.n	8019a6c <_vfiprintf_r+0x44>
 8019a84:	2300      	movs	r3, #0
 8019a86:	9309      	str	r3, [sp, #36]	@ 0x24
 8019a88:	2320      	movs	r3, #32
 8019a8a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8019a8e:	f8cd 800c 	str.w	r8, [sp, #12]
 8019a92:	2330      	movs	r3, #48	@ 0x30
 8019a94:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8019c44 <_vfiprintf_r+0x21c>
 8019a98:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8019a9c:	f04f 0901 	mov.w	r9, #1
 8019aa0:	4623      	mov	r3, r4
 8019aa2:	469a      	mov	sl, r3
 8019aa4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019aa8:	b10a      	cbz	r2, 8019aae <_vfiprintf_r+0x86>
 8019aaa:	2a25      	cmp	r2, #37	@ 0x25
 8019aac:	d1f9      	bne.n	8019aa2 <_vfiprintf_r+0x7a>
 8019aae:	ebba 0b04 	subs.w	fp, sl, r4
 8019ab2:	d00b      	beq.n	8019acc <_vfiprintf_r+0xa4>
 8019ab4:	465b      	mov	r3, fp
 8019ab6:	4622      	mov	r2, r4
 8019ab8:	4629      	mov	r1, r5
 8019aba:	4630      	mov	r0, r6
 8019abc:	f7ff ffa1 	bl	8019a02 <__sfputs_r>
 8019ac0:	3001      	adds	r0, #1
 8019ac2:	f000 80a7 	beq.w	8019c14 <_vfiprintf_r+0x1ec>
 8019ac6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019ac8:	445a      	add	r2, fp
 8019aca:	9209      	str	r2, [sp, #36]	@ 0x24
 8019acc:	f89a 3000 	ldrb.w	r3, [sl]
 8019ad0:	2b00      	cmp	r3, #0
 8019ad2:	f000 809f 	beq.w	8019c14 <_vfiprintf_r+0x1ec>
 8019ad6:	2300      	movs	r3, #0
 8019ad8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8019adc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019ae0:	f10a 0a01 	add.w	sl, sl, #1
 8019ae4:	9304      	str	r3, [sp, #16]
 8019ae6:	9307      	str	r3, [sp, #28]
 8019ae8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8019aec:	931a      	str	r3, [sp, #104]	@ 0x68
 8019aee:	4654      	mov	r4, sl
 8019af0:	2205      	movs	r2, #5
 8019af2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019af6:	4853      	ldr	r0, [pc, #332]	@ (8019c44 <_vfiprintf_r+0x21c>)
 8019af8:	f7e6 fb9a 	bl	8000230 <memchr>
 8019afc:	9a04      	ldr	r2, [sp, #16]
 8019afe:	b9d8      	cbnz	r0, 8019b38 <_vfiprintf_r+0x110>
 8019b00:	06d1      	lsls	r1, r2, #27
 8019b02:	bf44      	itt	mi
 8019b04:	2320      	movmi	r3, #32
 8019b06:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8019b0a:	0713      	lsls	r3, r2, #28
 8019b0c:	bf44      	itt	mi
 8019b0e:	232b      	movmi	r3, #43	@ 0x2b
 8019b10:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8019b14:	f89a 3000 	ldrb.w	r3, [sl]
 8019b18:	2b2a      	cmp	r3, #42	@ 0x2a
 8019b1a:	d015      	beq.n	8019b48 <_vfiprintf_r+0x120>
 8019b1c:	9a07      	ldr	r2, [sp, #28]
 8019b1e:	4654      	mov	r4, sl
 8019b20:	2000      	movs	r0, #0
 8019b22:	f04f 0c0a 	mov.w	ip, #10
 8019b26:	4621      	mov	r1, r4
 8019b28:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019b2c:	3b30      	subs	r3, #48	@ 0x30
 8019b2e:	2b09      	cmp	r3, #9
 8019b30:	d94b      	bls.n	8019bca <_vfiprintf_r+0x1a2>
 8019b32:	b1b0      	cbz	r0, 8019b62 <_vfiprintf_r+0x13a>
 8019b34:	9207      	str	r2, [sp, #28]
 8019b36:	e014      	b.n	8019b62 <_vfiprintf_r+0x13a>
 8019b38:	eba0 0308 	sub.w	r3, r0, r8
 8019b3c:	fa09 f303 	lsl.w	r3, r9, r3
 8019b40:	4313      	orrs	r3, r2
 8019b42:	9304      	str	r3, [sp, #16]
 8019b44:	46a2      	mov	sl, r4
 8019b46:	e7d2      	b.n	8019aee <_vfiprintf_r+0xc6>
 8019b48:	9b03      	ldr	r3, [sp, #12]
 8019b4a:	1d19      	adds	r1, r3, #4
 8019b4c:	681b      	ldr	r3, [r3, #0]
 8019b4e:	9103      	str	r1, [sp, #12]
 8019b50:	2b00      	cmp	r3, #0
 8019b52:	bfbb      	ittet	lt
 8019b54:	425b      	neglt	r3, r3
 8019b56:	f042 0202 	orrlt.w	r2, r2, #2
 8019b5a:	9307      	strge	r3, [sp, #28]
 8019b5c:	9307      	strlt	r3, [sp, #28]
 8019b5e:	bfb8      	it	lt
 8019b60:	9204      	strlt	r2, [sp, #16]
 8019b62:	7823      	ldrb	r3, [r4, #0]
 8019b64:	2b2e      	cmp	r3, #46	@ 0x2e
 8019b66:	d10a      	bne.n	8019b7e <_vfiprintf_r+0x156>
 8019b68:	7863      	ldrb	r3, [r4, #1]
 8019b6a:	2b2a      	cmp	r3, #42	@ 0x2a
 8019b6c:	d132      	bne.n	8019bd4 <_vfiprintf_r+0x1ac>
 8019b6e:	9b03      	ldr	r3, [sp, #12]
 8019b70:	1d1a      	adds	r2, r3, #4
 8019b72:	681b      	ldr	r3, [r3, #0]
 8019b74:	9203      	str	r2, [sp, #12]
 8019b76:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8019b7a:	3402      	adds	r4, #2
 8019b7c:	9305      	str	r3, [sp, #20]
 8019b7e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8019c54 <_vfiprintf_r+0x22c>
 8019b82:	7821      	ldrb	r1, [r4, #0]
 8019b84:	2203      	movs	r2, #3
 8019b86:	4650      	mov	r0, sl
 8019b88:	f7e6 fb52 	bl	8000230 <memchr>
 8019b8c:	b138      	cbz	r0, 8019b9e <_vfiprintf_r+0x176>
 8019b8e:	9b04      	ldr	r3, [sp, #16]
 8019b90:	eba0 000a 	sub.w	r0, r0, sl
 8019b94:	2240      	movs	r2, #64	@ 0x40
 8019b96:	4082      	lsls	r2, r0
 8019b98:	4313      	orrs	r3, r2
 8019b9a:	3401      	adds	r4, #1
 8019b9c:	9304      	str	r3, [sp, #16]
 8019b9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019ba2:	4829      	ldr	r0, [pc, #164]	@ (8019c48 <_vfiprintf_r+0x220>)
 8019ba4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8019ba8:	2206      	movs	r2, #6
 8019baa:	f7e6 fb41 	bl	8000230 <memchr>
 8019bae:	2800      	cmp	r0, #0
 8019bb0:	d03f      	beq.n	8019c32 <_vfiprintf_r+0x20a>
 8019bb2:	4b26      	ldr	r3, [pc, #152]	@ (8019c4c <_vfiprintf_r+0x224>)
 8019bb4:	bb1b      	cbnz	r3, 8019bfe <_vfiprintf_r+0x1d6>
 8019bb6:	9b03      	ldr	r3, [sp, #12]
 8019bb8:	3307      	adds	r3, #7
 8019bba:	f023 0307 	bic.w	r3, r3, #7
 8019bbe:	3308      	adds	r3, #8
 8019bc0:	9303      	str	r3, [sp, #12]
 8019bc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019bc4:	443b      	add	r3, r7
 8019bc6:	9309      	str	r3, [sp, #36]	@ 0x24
 8019bc8:	e76a      	b.n	8019aa0 <_vfiprintf_r+0x78>
 8019bca:	fb0c 3202 	mla	r2, ip, r2, r3
 8019bce:	460c      	mov	r4, r1
 8019bd0:	2001      	movs	r0, #1
 8019bd2:	e7a8      	b.n	8019b26 <_vfiprintf_r+0xfe>
 8019bd4:	2300      	movs	r3, #0
 8019bd6:	3401      	adds	r4, #1
 8019bd8:	9305      	str	r3, [sp, #20]
 8019bda:	4619      	mov	r1, r3
 8019bdc:	f04f 0c0a 	mov.w	ip, #10
 8019be0:	4620      	mov	r0, r4
 8019be2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019be6:	3a30      	subs	r2, #48	@ 0x30
 8019be8:	2a09      	cmp	r2, #9
 8019bea:	d903      	bls.n	8019bf4 <_vfiprintf_r+0x1cc>
 8019bec:	2b00      	cmp	r3, #0
 8019bee:	d0c6      	beq.n	8019b7e <_vfiprintf_r+0x156>
 8019bf0:	9105      	str	r1, [sp, #20]
 8019bf2:	e7c4      	b.n	8019b7e <_vfiprintf_r+0x156>
 8019bf4:	fb0c 2101 	mla	r1, ip, r1, r2
 8019bf8:	4604      	mov	r4, r0
 8019bfa:	2301      	movs	r3, #1
 8019bfc:	e7f0      	b.n	8019be0 <_vfiprintf_r+0x1b8>
 8019bfe:	ab03      	add	r3, sp, #12
 8019c00:	9300      	str	r3, [sp, #0]
 8019c02:	462a      	mov	r2, r5
 8019c04:	4b12      	ldr	r3, [pc, #72]	@ (8019c50 <_vfiprintf_r+0x228>)
 8019c06:	a904      	add	r1, sp, #16
 8019c08:	4630      	mov	r0, r6
 8019c0a:	f3af 8000 	nop.w
 8019c0e:	4607      	mov	r7, r0
 8019c10:	1c78      	adds	r0, r7, #1
 8019c12:	d1d6      	bne.n	8019bc2 <_vfiprintf_r+0x19a>
 8019c14:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8019c16:	07d9      	lsls	r1, r3, #31
 8019c18:	d405      	bmi.n	8019c26 <_vfiprintf_r+0x1fe>
 8019c1a:	89ab      	ldrh	r3, [r5, #12]
 8019c1c:	059a      	lsls	r2, r3, #22
 8019c1e:	d402      	bmi.n	8019c26 <_vfiprintf_r+0x1fe>
 8019c20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8019c22:	f7ff fcf3 	bl	801960c <__retarget_lock_release_recursive>
 8019c26:	89ab      	ldrh	r3, [r5, #12]
 8019c28:	065b      	lsls	r3, r3, #25
 8019c2a:	f53f af1f 	bmi.w	8019a6c <_vfiprintf_r+0x44>
 8019c2e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019c30:	e71e      	b.n	8019a70 <_vfiprintf_r+0x48>
 8019c32:	ab03      	add	r3, sp, #12
 8019c34:	9300      	str	r3, [sp, #0]
 8019c36:	462a      	mov	r2, r5
 8019c38:	4b05      	ldr	r3, [pc, #20]	@ (8019c50 <_vfiprintf_r+0x228>)
 8019c3a:	a904      	add	r1, sp, #16
 8019c3c:	4630      	mov	r0, r6
 8019c3e:	f000 f879 	bl	8019d34 <_printf_i>
 8019c42:	e7e4      	b.n	8019c0e <_vfiprintf_r+0x1e6>
 8019c44:	0801bbea 	.word	0x0801bbea
 8019c48:	0801bbf4 	.word	0x0801bbf4
 8019c4c:	00000000 	.word	0x00000000
 8019c50:	08019a03 	.word	0x08019a03
 8019c54:	0801bbf0 	.word	0x0801bbf0

08019c58 <_printf_common>:
 8019c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019c5c:	4616      	mov	r6, r2
 8019c5e:	4698      	mov	r8, r3
 8019c60:	688a      	ldr	r2, [r1, #8]
 8019c62:	690b      	ldr	r3, [r1, #16]
 8019c64:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8019c68:	4293      	cmp	r3, r2
 8019c6a:	bfb8      	it	lt
 8019c6c:	4613      	movlt	r3, r2
 8019c6e:	6033      	str	r3, [r6, #0]
 8019c70:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8019c74:	4607      	mov	r7, r0
 8019c76:	460c      	mov	r4, r1
 8019c78:	b10a      	cbz	r2, 8019c7e <_printf_common+0x26>
 8019c7a:	3301      	adds	r3, #1
 8019c7c:	6033      	str	r3, [r6, #0]
 8019c7e:	6823      	ldr	r3, [r4, #0]
 8019c80:	0699      	lsls	r1, r3, #26
 8019c82:	bf42      	ittt	mi
 8019c84:	6833      	ldrmi	r3, [r6, #0]
 8019c86:	3302      	addmi	r3, #2
 8019c88:	6033      	strmi	r3, [r6, #0]
 8019c8a:	6825      	ldr	r5, [r4, #0]
 8019c8c:	f015 0506 	ands.w	r5, r5, #6
 8019c90:	d106      	bne.n	8019ca0 <_printf_common+0x48>
 8019c92:	f104 0a19 	add.w	sl, r4, #25
 8019c96:	68e3      	ldr	r3, [r4, #12]
 8019c98:	6832      	ldr	r2, [r6, #0]
 8019c9a:	1a9b      	subs	r3, r3, r2
 8019c9c:	42ab      	cmp	r3, r5
 8019c9e:	dc26      	bgt.n	8019cee <_printf_common+0x96>
 8019ca0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8019ca4:	6822      	ldr	r2, [r4, #0]
 8019ca6:	3b00      	subs	r3, #0
 8019ca8:	bf18      	it	ne
 8019caa:	2301      	movne	r3, #1
 8019cac:	0692      	lsls	r2, r2, #26
 8019cae:	d42b      	bmi.n	8019d08 <_printf_common+0xb0>
 8019cb0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8019cb4:	4641      	mov	r1, r8
 8019cb6:	4638      	mov	r0, r7
 8019cb8:	47c8      	blx	r9
 8019cba:	3001      	adds	r0, #1
 8019cbc:	d01e      	beq.n	8019cfc <_printf_common+0xa4>
 8019cbe:	6823      	ldr	r3, [r4, #0]
 8019cc0:	6922      	ldr	r2, [r4, #16]
 8019cc2:	f003 0306 	and.w	r3, r3, #6
 8019cc6:	2b04      	cmp	r3, #4
 8019cc8:	bf02      	ittt	eq
 8019cca:	68e5      	ldreq	r5, [r4, #12]
 8019ccc:	6833      	ldreq	r3, [r6, #0]
 8019cce:	1aed      	subeq	r5, r5, r3
 8019cd0:	68a3      	ldr	r3, [r4, #8]
 8019cd2:	bf0c      	ite	eq
 8019cd4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019cd8:	2500      	movne	r5, #0
 8019cda:	4293      	cmp	r3, r2
 8019cdc:	bfc4      	itt	gt
 8019cde:	1a9b      	subgt	r3, r3, r2
 8019ce0:	18ed      	addgt	r5, r5, r3
 8019ce2:	2600      	movs	r6, #0
 8019ce4:	341a      	adds	r4, #26
 8019ce6:	42b5      	cmp	r5, r6
 8019ce8:	d11a      	bne.n	8019d20 <_printf_common+0xc8>
 8019cea:	2000      	movs	r0, #0
 8019cec:	e008      	b.n	8019d00 <_printf_common+0xa8>
 8019cee:	2301      	movs	r3, #1
 8019cf0:	4652      	mov	r2, sl
 8019cf2:	4641      	mov	r1, r8
 8019cf4:	4638      	mov	r0, r7
 8019cf6:	47c8      	blx	r9
 8019cf8:	3001      	adds	r0, #1
 8019cfa:	d103      	bne.n	8019d04 <_printf_common+0xac>
 8019cfc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019d00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019d04:	3501      	adds	r5, #1
 8019d06:	e7c6      	b.n	8019c96 <_printf_common+0x3e>
 8019d08:	18e1      	adds	r1, r4, r3
 8019d0a:	1c5a      	adds	r2, r3, #1
 8019d0c:	2030      	movs	r0, #48	@ 0x30
 8019d0e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8019d12:	4422      	add	r2, r4
 8019d14:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8019d18:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8019d1c:	3302      	adds	r3, #2
 8019d1e:	e7c7      	b.n	8019cb0 <_printf_common+0x58>
 8019d20:	2301      	movs	r3, #1
 8019d22:	4622      	mov	r2, r4
 8019d24:	4641      	mov	r1, r8
 8019d26:	4638      	mov	r0, r7
 8019d28:	47c8      	blx	r9
 8019d2a:	3001      	adds	r0, #1
 8019d2c:	d0e6      	beq.n	8019cfc <_printf_common+0xa4>
 8019d2e:	3601      	adds	r6, #1
 8019d30:	e7d9      	b.n	8019ce6 <_printf_common+0x8e>
	...

08019d34 <_printf_i>:
 8019d34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019d38:	7e0f      	ldrb	r7, [r1, #24]
 8019d3a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8019d3c:	2f78      	cmp	r7, #120	@ 0x78
 8019d3e:	4691      	mov	r9, r2
 8019d40:	4680      	mov	r8, r0
 8019d42:	460c      	mov	r4, r1
 8019d44:	469a      	mov	sl, r3
 8019d46:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8019d4a:	d807      	bhi.n	8019d5c <_printf_i+0x28>
 8019d4c:	2f62      	cmp	r7, #98	@ 0x62
 8019d4e:	d80a      	bhi.n	8019d66 <_printf_i+0x32>
 8019d50:	2f00      	cmp	r7, #0
 8019d52:	f000 80d2 	beq.w	8019efa <_printf_i+0x1c6>
 8019d56:	2f58      	cmp	r7, #88	@ 0x58
 8019d58:	f000 80b9 	beq.w	8019ece <_printf_i+0x19a>
 8019d5c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8019d60:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8019d64:	e03a      	b.n	8019ddc <_printf_i+0xa8>
 8019d66:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8019d6a:	2b15      	cmp	r3, #21
 8019d6c:	d8f6      	bhi.n	8019d5c <_printf_i+0x28>
 8019d6e:	a101      	add	r1, pc, #4	@ (adr r1, 8019d74 <_printf_i+0x40>)
 8019d70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8019d74:	08019dcd 	.word	0x08019dcd
 8019d78:	08019de1 	.word	0x08019de1
 8019d7c:	08019d5d 	.word	0x08019d5d
 8019d80:	08019d5d 	.word	0x08019d5d
 8019d84:	08019d5d 	.word	0x08019d5d
 8019d88:	08019d5d 	.word	0x08019d5d
 8019d8c:	08019de1 	.word	0x08019de1
 8019d90:	08019d5d 	.word	0x08019d5d
 8019d94:	08019d5d 	.word	0x08019d5d
 8019d98:	08019d5d 	.word	0x08019d5d
 8019d9c:	08019d5d 	.word	0x08019d5d
 8019da0:	08019ee1 	.word	0x08019ee1
 8019da4:	08019e0b 	.word	0x08019e0b
 8019da8:	08019e9b 	.word	0x08019e9b
 8019dac:	08019d5d 	.word	0x08019d5d
 8019db0:	08019d5d 	.word	0x08019d5d
 8019db4:	08019f03 	.word	0x08019f03
 8019db8:	08019d5d 	.word	0x08019d5d
 8019dbc:	08019e0b 	.word	0x08019e0b
 8019dc0:	08019d5d 	.word	0x08019d5d
 8019dc4:	08019d5d 	.word	0x08019d5d
 8019dc8:	08019ea3 	.word	0x08019ea3
 8019dcc:	6833      	ldr	r3, [r6, #0]
 8019dce:	1d1a      	adds	r2, r3, #4
 8019dd0:	681b      	ldr	r3, [r3, #0]
 8019dd2:	6032      	str	r2, [r6, #0]
 8019dd4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8019dd8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8019ddc:	2301      	movs	r3, #1
 8019dde:	e09d      	b.n	8019f1c <_printf_i+0x1e8>
 8019de0:	6833      	ldr	r3, [r6, #0]
 8019de2:	6820      	ldr	r0, [r4, #0]
 8019de4:	1d19      	adds	r1, r3, #4
 8019de6:	6031      	str	r1, [r6, #0]
 8019de8:	0606      	lsls	r6, r0, #24
 8019dea:	d501      	bpl.n	8019df0 <_printf_i+0xbc>
 8019dec:	681d      	ldr	r5, [r3, #0]
 8019dee:	e003      	b.n	8019df8 <_printf_i+0xc4>
 8019df0:	0645      	lsls	r5, r0, #25
 8019df2:	d5fb      	bpl.n	8019dec <_printf_i+0xb8>
 8019df4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8019df8:	2d00      	cmp	r5, #0
 8019dfa:	da03      	bge.n	8019e04 <_printf_i+0xd0>
 8019dfc:	232d      	movs	r3, #45	@ 0x2d
 8019dfe:	426d      	negs	r5, r5
 8019e00:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8019e04:	4859      	ldr	r0, [pc, #356]	@ (8019f6c <_printf_i+0x238>)
 8019e06:	230a      	movs	r3, #10
 8019e08:	e011      	b.n	8019e2e <_printf_i+0xfa>
 8019e0a:	6821      	ldr	r1, [r4, #0]
 8019e0c:	6833      	ldr	r3, [r6, #0]
 8019e0e:	0608      	lsls	r0, r1, #24
 8019e10:	f853 5b04 	ldr.w	r5, [r3], #4
 8019e14:	d402      	bmi.n	8019e1c <_printf_i+0xe8>
 8019e16:	0649      	lsls	r1, r1, #25
 8019e18:	bf48      	it	mi
 8019e1a:	b2ad      	uxthmi	r5, r5
 8019e1c:	2f6f      	cmp	r7, #111	@ 0x6f
 8019e1e:	4853      	ldr	r0, [pc, #332]	@ (8019f6c <_printf_i+0x238>)
 8019e20:	6033      	str	r3, [r6, #0]
 8019e22:	bf14      	ite	ne
 8019e24:	230a      	movne	r3, #10
 8019e26:	2308      	moveq	r3, #8
 8019e28:	2100      	movs	r1, #0
 8019e2a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8019e2e:	6866      	ldr	r6, [r4, #4]
 8019e30:	60a6      	str	r6, [r4, #8]
 8019e32:	2e00      	cmp	r6, #0
 8019e34:	bfa2      	ittt	ge
 8019e36:	6821      	ldrge	r1, [r4, #0]
 8019e38:	f021 0104 	bicge.w	r1, r1, #4
 8019e3c:	6021      	strge	r1, [r4, #0]
 8019e3e:	b90d      	cbnz	r5, 8019e44 <_printf_i+0x110>
 8019e40:	2e00      	cmp	r6, #0
 8019e42:	d04b      	beq.n	8019edc <_printf_i+0x1a8>
 8019e44:	4616      	mov	r6, r2
 8019e46:	fbb5 f1f3 	udiv	r1, r5, r3
 8019e4a:	fb03 5711 	mls	r7, r3, r1, r5
 8019e4e:	5dc7      	ldrb	r7, [r0, r7]
 8019e50:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8019e54:	462f      	mov	r7, r5
 8019e56:	42bb      	cmp	r3, r7
 8019e58:	460d      	mov	r5, r1
 8019e5a:	d9f4      	bls.n	8019e46 <_printf_i+0x112>
 8019e5c:	2b08      	cmp	r3, #8
 8019e5e:	d10b      	bne.n	8019e78 <_printf_i+0x144>
 8019e60:	6823      	ldr	r3, [r4, #0]
 8019e62:	07df      	lsls	r7, r3, #31
 8019e64:	d508      	bpl.n	8019e78 <_printf_i+0x144>
 8019e66:	6923      	ldr	r3, [r4, #16]
 8019e68:	6861      	ldr	r1, [r4, #4]
 8019e6a:	4299      	cmp	r1, r3
 8019e6c:	bfde      	ittt	le
 8019e6e:	2330      	movle	r3, #48	@ 0x30
 8019e70:	f806 3c01 	strble.w	r3, [r6, #-1]
 8019e74:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8019e78:	1b92      	subs	r2, r2, r6
 8019e7a:	6122      	str	r2, [r4, #16]
 8019e7c:	f8cd a000 	str.w	sl, [sp]
 8019e80:	464b      	mov	r3, r9
 8019e82:	aa03      	add	r2, sp, #12
 8019e84:	4621      	mov	r1, r4
 8019e86:	4640      	mov	r0, r8
 8019e88:	f7ff fee6 	bl	8019c58 <_printf_common>
 8019e8c:	3001      	adds	r0, #1
 8019e8e:	d14a      	bne.n	8019f26 <_printf_i+0x1f2>
 8019e90:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019e94:	b004      	add	sp, #16
 8019e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019e9a:	6823      	ldr	r3, [r4, #0]
 8019e9c:	f043 0320 	orr.w	r3, r3, #32
 8019ea0:	6023      	str	r3, [r4, #0]
 8019ea2:	4833      	ldr	r0, [pc, #204]	@ (8019f70 <_printf_i+0x23c>)
 8019ea4:	2778      	movs	r7, #120	@ 0x78
 8019ea6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8019eaa:	6823      	ldr	r3, [r4, #0]
 8019eac:	6831      	ldr	r1, [r6, #0]
 8019eae:	061f      	lsls	r7, r3, #24
 8019eb0:	f851 5b04 	ldr.w	r5, [r1], #4
 8019eb4:	d402      	bmi.n	8019ebc <_printf_i+0x188>
 8019eb6:	065f      	lsls	r7, r3, #25
 8019eb8:	bf48      	it	mi
 8019eba:	b2ad      	uxthmi	r5, r5
 8019ebc:	6031      	str	r1, [r6, #0]
 8019ebe:	07d9      	lsls	r1, r3, #31
 8019ec0:	bf44      	itt	mi
 8019ec2:	f043 0320 	orrmi.w	r3, r3, #32
 8019ec6:	6023      	strmi	r3, [r4, #0]
 8019ec8:	b11d      	cbz	r5, 8019ed2 <_printf_i+0x19e>
 8019eca:	2310      	movs	r3, #16
 8019ecc:	e7ac      	b.n	8019e28 <_printf_i+0xf4>
 8019ece:	4827      	ldr	r0, [pc, #156]	@ (8019f6c <_printf_i+0x238>)
 8019ed0:	e7e9      	b.n	8019ea6 <_printf_i+0x172>
 8019ed2:	6823      	ldr	r3, [r4, #0]
 8019ed4:	f023 0320 	bic.w	r3, r3, #32
 8019ed8:	6023      	str	r3, [r4, #0]
 8019eda:	e7f6      	b.n	8019eca <_printf_i+0x196>
 8019edc:	4616      	mov	r6, r2
 8019ede:	e7bd      	b.n	8019e5c <_printf_i+0x128>
 8019ee0:	6833      	ldr	r3, [r6, #0]
 8019ee2:	6825      	ldr	r5, [r4, #0]
 8019ee4:	6961      	ldr	r1, [r4, #20]
 8019ee6:	1d18      	adds	r0, r3, #4
 8019ee8:	6030      	str	r0, [r6, #0]
 8019eea:	062e      	lsls	r6, r5, #24
 8019eec:	681b      	ldr	r3, [r3, #0]
 8019eee:	d501      	bpl.n	8019ef4 <_printf_i+0x1c0>
 8019ef0:	6019      	str	r1, [r3, #0]
 8019ef2:	e002      	b.n	8019efa <_printf_i+0x1c6>
 8019ef4:	0668      	lsls	r0, r5, #25
 8019ef6:	d5fb      	bpl.n	8019ef0 <_printf_i+0x1bc>
 8019ef8:	8019      	strh	r1, [r3, #0]
 8019efa:	2300      	movs	r3, #0
 8019efc:	6123      	str	r3, [r4, #16]
 8019efe:	4616      	mov	r6, r2
 8019f00:	e7bc      	b.n	8019e7c <_printf_i+0x148>
 8019f02:	6833      	ldr	r3, [r6, #0]
 8019f04:	1d1a      	adds	r2, r3, #4
 8019f06:	6032      	str	r2, [r6, #0]
 8019f08:	681e      	ldr	r6, [r3, #0]
 8019f0a:	6862      	ldr	r2, [r4, #4]
 8019f0c:	2100      	movs	r1, #0
 8019f0e:	4630      	mov	r0, r6
 8019f10:	f7e6 f98e 	bl	8000230 <memchr>
 8019f14:	b108      	cbz	r0, 8019f1a <_printf_i+0x1e6>
 8019f16:	1b80      	subs	r0, r0, r6
 8019f18:	6060      	str	r0, [r4, #4]
 8019f1a:	6863      	ldr	r3, [r4, #4]
 8019f1c:	6123      	str	r3, [r4, #16]
 8019f1e:	2300      	movs	r3, #0
 8019f20:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8019f24:	e7aa      	b.n	8019e7c <_printf_i+0x148>
 8019f26:	6923      	ldr	r3, [r4, #16]
 8019f28:	4632      	mov	r2, r6
 8019f2a:	4649      	mov	r1, r9
 8019f2c:	4640      	mov	r0, r8
 8019f2e:	47d0      	blx	sl
 8019f30:	3001      	adds	r0, #1
 8019f32:	d0ad      	beq.n	8019e90 <_printf_i+0x15c>
 8019f34:	6823      	ldr	r3, [r4, #0]
 8019f36:	079b      	lsls	r3, r3, #30
 8019f38:	d413      	bmi.n	8019f62 <_printf_i+0x22e>
 8019f3a:	68e0      	ldr	r0, [r4, #12]
 8019f3c:	9b03      	ldr	r3, [sp, #12]
 8019f3e:	4298      	cmp	r0, r3
 8019f40:	bfb8      	it	lt
 8019f42:	4618      	movlt	r0, r3
 8019f44:	e7a6      	b.n	8019e94 <_printf_i+0x160>
 8019f46:	2301      	movs	r3, #1
 8019f48:	4632      	mov	r2, r6
 8019f4a:	4649      	mov	r1, r9
 8019f4c:	4640      	mov	r0, r8
 8019f4e:	47d0      	blx	sl
 8019f50:	3001      	adds	r0, #1
 8019f52:	d09d      	beq.n	8019e90 <_printf_i+0x15c>
 8019f54:	3501      	adds	r5, #1
 8019f56:	68e3      	ldr	r3, [r4, #12]
 8019f58:	9903      	ldr	r1, [sp, #12]
 8019f5a:	1a5b      	subs	r3, r3, r1
 8019f5c:	42ab      	cmp	r3, r5
 8019f5e:	dcf2      	bgt.n	8019f46 <_printf_i+0x212>
 8019f60:	e7eb      	b.n	8019f3a <_printf_i+0x206>
 8019f62:	2500      	movs	r5, #0
 8019f64:	f104 0619 	add.w	r6, r4, #25
 8019f68:	e7f5      	b.n	8019f56 <_printf_i+0x222>
 8019f6a:	bf00      	nop
 8019f6c:	0801bbfb 	.word	0x0801bbfb
 8019f70:	0801bc0c 	.word	0x0801bc0c

08019f74 <__sflush_r>:
 8019f74:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8019f78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019f7c:	0716      	lsls	r6, r2, #28
 8019f7e:	4605      	mov	r5, r0
 8019f80:	460c      	mov	r4, r1
 8019f82:	d454      	bmi.n	801a02e <__sflush_r+0xba>
 8019f84:	684b      	ldr	r3, [r1, #4]
 8019f86:	2b00      	cmp	r3, #0
 8019f88:	dc02      	bgt.n	8019f90 <__sflush_r+0x1c>
 8019f8a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8019f8c:	2b00      	cmp	r3, #0
 8019f8e:	dd48      	ble.n	801a022 <__sflush_r+0xae>
 8019f90:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8019f92:	2e00      	cmp	r6, #0
 8019f94:	d045      	beq.n	801a022 <__sflush_r+0xae>
 8019f96:	2300      	movs	r3, #0
 8019f98:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8019f9c:	682f      	ldr	r7, [r5, #0]
 8019f9e:	6a21      	ldr	r1, [r4, #32]
 8019fa0:	602b      	str	r3, [r5, #0]
 8019fa2:	d030      	beq.n	801a006 <__sflush_r+0x92>
 8019fa4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8019fa6:	89a3      	ldrh	r3, [r4, #12]
 8019fa8:	0759      	lsls	r1, r3, #29
 8019faa:	d505      	bpl.n	8019fb8 <__sflush_r+0x44>
 8019fac:	6863      	ldr	r3, [r4, #4]
 8019fae:	1ad2      	subs	r2, r2, r3
 8019fb0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8019fb2:	b10b      	cbz	r3, 8019fb8 <__sflush_r+0x44>
 8019fb4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8019fb6:	1ad2      	subs	r2, r2, r3
 8019fb8:	2300      	movs	r3, #0
 8019fba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8019fbc:	6a21      	ldr	r1, [r4, #32]
 8019fbe:	4628      	mov	r0, r5
 8019fc0:	47b0      	blx	r6
 8019fc2:	1c43      	adds	r3, r0, #1
 8019fc4:	89a3      	ldrh	r3, [r4, #12]
 8019fc6:	d106      	bne.n	8019fd6 <__sflush_r+0x62>
 8019fc8:	6829      	ldr	r1, [r5, #0]
 8019fca:	291d      	cmp	r1, #29
 8019fcc:	d82b      	bhi.n	801a026 <__sflush_r+0xb2>
 8019fce:	4a2a      	ldr	r2, [pc, #168]	@ (801a078 <__sflush_r+0x104>)
 8019fd0:	410a      	asrs	r2, r1
 8019fd2:	07d6      	lsls	r6, r2, #31
 8019fd4:	d427      	bmi.n	801a026 <__sflush_r+0xb2>
 8019fd6:	2200      	movs	r2, #0
 8019fd8:	6062      	str	r2, [r4, #4]
 8019fda:	04d9      	lsls	r1, r3, #19
 8019fdc:	6922      	ldr	r2, [r4, #16]
 8019fde:	6022      	str	r2, [r4, #0]
 8019fe0:	d504      	bpl.n	8019fec <__sflush_r+0x78>
 8019fe2:	1c42      	adds	r2, r0, #1
 8019fe4:	d101      	bne.n	8019fea <__sflush_r+0x76>
 8019fe6:	682b      	ldr	r3, [r5, #0]
 8019fe8:	b903      	cbnz	r3, 8019fec <__sflush_r+0x78>
 8019fea:	6560      	str	r0, [r4, #84]	@ 0x54
 8019fec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8019fee:	602f      	str	r7, [r5, #0]
 8019ff0:	b1b9      	cbz	r1, 801a022 <__sflush_r+0xae>
 8019ff2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8019ff6:	4299      	cmp	r1, r3
 8019ff8:	d002      	beq.n	801a000 <__sflush_r+0x8c>
 8019ffa:	4628      	mov	r0, r5
 8019ffc:	f7ff fb48 	bl	8019690 <_free_r>
 801a000:	2300      	movs	r3, #0
 801a002:	6363      	str	r3, [r4, #52]	@ 0x34
 801a004:	e00d      	b.n	801a022 <__sflush_r+0xae>
 801a006:	2301      	movs	r3, #1
 801a008:	4628      	mov	r0, r5
 801a00a:	47b0      	blx	r6
 801a00c:	4602      	mov	r2, r0
 801a00e:	1c50      	adds	r0, r2, #1
 801a010:	d1c9      	bne.n	8019fa6 <__sflush_r+0x32>
 801a012:	682b      	ldr	r3, [r5, #0]
 801a014:	2b00      	cmp	r3, #0
 801a016:	d0c6      	beq.n	8019fa6 <__sflush_r+0x32>
 801a018:	2b1d      	cmp	r3, #29
 801a01a:	d001      	beq.n	801a020 <__sflush_r+0xac>
 801a01c:	2b16      	cmp	r3, #22
 801a01e:	d11e      	bne.n	801a05e <__sflush_r+0xea>
 801a020:	602f      	str	r7, [r5, #0]
 801a022:	2000      	movs	r0, #0
 801a024:	e022      	b.n	801a06c <__sflush_r+0xf8>
 801a026:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a02a:	b21b      	sxth	r3, r3
 801a02c:	e01b      	b.n	801a066 <__sflush_r+0xf2>
 801a02e:	690f      	ldr	r7, [r1, #16]
 801a030:	2f00      	cmp	r7, #0
 801a032:	d0f6      	beq.n	801a022 <__sflush_r+0xae>
 801a034:	0793      	lsls	r3, r2, #30
 801a036:	680e      	ldr	r6, [r1, #0]
 801a038:	bf08      	it	eq
 801a03a:	694b      	ldreq	r3, [r1, #20]
 801a03c:	600f      	str	r7, [r1, #0]
 801a03e:	bf18      	it	ne
 801a040:	2300      	movne	r3, #0
 801a042:	eba6 0807 	sub.w	r8, r6, r7
 801a046:	608b      	str	r3, [r1, #8]
 801a048:	f1b8 0f00 	cmp.w	r8, #0
 801a04c:	dde9      	ble.n	801a022 <__sflush_r+0xae>
 801a04e:	6a21      	ldr	r1, [r4, #32]
 801a050:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801a052:	4643      	mov	r3, r8
 801a054:	463a      	mov	r2, r7
 801a056:	4628      	mov	r0, r5
 801a058:	47b0      	blx	r6
 801a05a:	2800      	cmp	r0, #0
 801a05c:	dc08      	bgt.n	801a070 <__sflush_r+0xfc>
 801a05e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a062:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a066:	81a3      	strh	r3, [r4, #12]
 801a068:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a06c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a070:	4407      	add	r7, r0
 801a072:	eba8 0800 	sub.w	r8, r8, r0
 801a076:	e7e7      	b.n	801a048 <__sflush_r+0xd4>
 801a078:	dfbffffe 	.word	0xdfbffffe

0801a07c <_fflush_r>:
 801a07c:	b538      	push	{r3, r4, r5, lr}
 801a07e:	690b      	ldr	r3, [r1, #16]
 801a080:	4605      	mov	r5, r0
 801a082:	460c      	mov	r4, r1
 801a084:	b913      	cbnz	r3, 801a08c <_fflush_r+0x10>
 801a086:	2500      	movs	r5, #0
 801a088:	4628      	mov	r0, r5
 801a08a:	bd38      	pop	{r3, r4, r5, pc}
 801a08c:	b118      	cbz	r0, 801a096 <_fflush_r+0x1a>
 801a08e:	6a03      	ldr	r3, [r0, #32]
 801a090:	b90b      	cbnz	r3, 801a096 <_fflush_r+0x1a>
 801a092:	f7fe ff1f 	bl	8018ed4 <__sinit>
 801a096:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a09a:	2b00      	cmp	r3, #0
 801a09c:	d0f3      	beq.n	801a086 <_fflush_r+0xa>
 801a09e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801a0a0:	07d0      	lsls	r0, r2, #31
 801a0a2:	d404      	bmi.n	801a0ae <_fflush_r+0x32>
 801a0a4:	0599      	lsls	r1, r3, #22
 801a0a6:	d402      	bmi.n	801a0ae <_fflush_r+0x32>
 801a0a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a0aa:	f7ff faae 	bl	801960a <__retarget_lock_acquire_recursive>
 801a0ae:	4628      	mov	r0, r5
 801a0b0:	4621      	mov	r1, r4
 801a0b2:	f7ff ff5f 	bl	8019f74 <__sflush_r>
 801a0b6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801a0b8:	07da      	lsls	r2, r3, #31
 801a0ba:	4605      	mov	r5, r0
 801a0bc:	d4e4      	bmi.n	801a088 <_fflush_r+0xc>
 801a0be:	89a3      	ldrh	r3, [r4, #12]
 801a0c0:	059b      	lsls	r3, r3, #22
 801a0c2:	d4e1      	bmi.n	801a088 <_fflush_r+0xc>
 801a0c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a0c6:	f7ff faa1 	bl	801960c <__retarget_lock_release_recursive>
 801a0ca:	e7dd      	b.n	801a088 <_fflush_r+0xc>

0801a0cc <_malloc_usable_size_r>:
 801a0cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a0d0:	1f18      	subs	r0, r3, #4
 801a0d2:	2b00      	cmp	r3, #0
 801a0d4:	bfbc      	itt	lt
 801a0d6:	580b      	ldrlt	r3, [r1, r0]
 801a0d8:	18c0      	addlt	r0, r0, r3
 801a0da:	4770      	bx	lr

0801a0dc <__sread>:
 801a0dc:	b510      	push	{r4, lr}
 801a0de:	460c      	mov	r4, r1
 801a0e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a0e4:	f000 f872 	bl	801a1cc <_read_r>
 801a0e8:	2800      	cmp	r0, #0
 801a0ea:	bfab      	itete	ge
 801a0ec:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801a0ee:	89a3      	ldrhlt	r3, [r4, #12]
 801a0f0:	181b      	addge	r3, r3, r0
 801a0f2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801a0f6:	bfac      	ite	ge
 801a0f8:	6563      	strge	r3, [r4, #84]	@ 0x54
 801a0fa:	81a3      	strhlt	r3, [r4, #12]
 801a0fc:	bd10      	pop	{r4, pc}

0801a0fe <__swrite>:
 801a0fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a102:	461f      	mov	r7, r3
 801a104:	898b      	ldrh	r3, [r1, #12]
 801a106:	05db      	lsls	r3, r3, #23
 801a108:	4605      	mov	r5, r0
 801a10a:	460c      	mov	r4, r1
 801a10c:	4616      	mov	r6, r2
 801a10e:	d505      	bpl.n	801a11c <__swrite+0x1e>
 801a110:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a114:	2302      	movs	r3, #2
 801a116:	2200      	movs	r2, #0
 801a118:	f000 f846 	bl	801a1a8 <_lseek_r>
 801a11c:	89a3      	ldrh	r3, [r4, #12]
 801a11e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a122:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801a126:	81a3      	strh	r3, [r4, #12]
 801a128:	4632      	mov	r2, r6
 801a12a:	463b      	mov	r3, r7
 801a12c:	4628      	mov	r0, r5
 801a12e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a132:	f000 b85d 	b.w	801a1f0 <_write_r>

0801a136 <__sseek>:
 801a136:	b510      	push	{r4, lr}
 801a138:	460c      	mov	r4, r1
 801a13a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a13e:	f000 f833 	bl	801a1a8 <_lseek_r>
 801a142:	1c43      	adds	r3, r0, #1
 801a144:	89a3      	ldrh	r3, [r4, #12]
 801a146:	bf15      	itete	ne
 801a148:	6560      	strne	r0, [r4, #84]	@ 0x54
 801a14a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801a14e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801a152:	81a3      	strheq	r3, [r4, #12]
 801a154:	bf18      	it	ne
 801a156:	81a3      	strhne	r3, [r4, #12]
 801a158:	bd10      	pop	{r4, pc}

0801a15a <__sclose>:
 801a15a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a15e:	f000 b813 	b.w	801a188 <_close_r>
	...

0801a164 <fiprintf>:
 801a164:	b40e      	push	{r1, r2, r3}
 801a166:	b503      	push	{r0, r1, lr}
 801a168:	4601      	mov	r1, r0
 801a16a:	ab03      	add	r3, sp, #12
 801a16c:	4805      	ldr	r0, [pc, #20]	@ (801a184 <fiprintf+0x20>)
 801a16e:	f853 2b04 	ldr.w	r2, [r3], #4
 801a172:	6800      	ldr	r0, [r0, #0]
 801a174:	9301      	str	r3, [sp, #4]
 801a176:	f7ff fc57 	bl	8019a28 <_vfiprintf_r>
 801a17a:	b002      	add	sp, #8
 801a17c:	f85d eb04 	ldr.w	lr, [sp], #4
 801a180:	b003      	add	sp, #12
 801a182:	4770      	bx	lr
 801a184:	200007cc 	.word	0x200007cc

0801a188 <_close_r>:
 801a188:	b538      	push	{r3, r4, r5, lr}
 801a18a:	4d06      	ldr	r5, [pc, #24]	@ (801a1a4 <_close_r+0x1c>)
 801a18c:	2300      	movs	r3, #0
 801a18e:	4604      	mov	r4, r0
 801a190:	4608      	mov	r0, r1
 801a192:	602b      	str	r3, [r5, #0]
 801a194:	f7e8 f9b8 	bl	8002508 <_close>
 801a198:	1c43      	adds	r3, r0, #1
 801a19a:	d102      	bne.n	801a1a2 <_close_r+0x1a>
 801a19c:	682b      	ldr	r3, [r5, #0]
 801a19e:	b103      	cbz	r3, 801a1a2 <_close_r+0x1a>
 801a1a0:	6023      	str	r3, [r4, #0]
 801a1a2:	bd38      	pop	{r3, r4, r5, pc}
 801a1a4:	200156b0 	.word	0x200156b0

0801a1a8 <_lseek_r>:
 801a1a8:	b538      	push	{r3, r4, r5, lr}
 801a1aa:	4d07      	ldr	r5, [pc, #28]	@ (801a1c8 <_lseek_r+0x20>)
 801a1ac:	4604      	mov	r4, r0
 801a1ae:	4608      	mov	r0, r1
 801a1b0:	4611      	mov	r1, r2
 801a1b2:	2200      	movs	r2, #0
 801a1b4:	602a      	str	r2, [r5, #0]
 801a1b6:	461a      	mov	r2, r3
 801a1b8:	f7e8 f9cd 	bl	8002556 <_lseek>
 801a1bc:	1c43      	adds	r3, r0, #1
 801a1be:	d102      	bne.n	801a1c6 <_lseek_r+0x1e>
 801a1c0:	682b      	ldr	r3, [r5, #0]
 801a1c2:	b103      	cbz	r3, 801a1c6 <_lseek_r+0x1e>
 801a1c4:	6023      	str	r3, [r4, #0]
 801a1c6:	bd38      	pop	{r3, r4, r5, pc}
 801a1c8:	200156b0 	.word	0x200156b0

0801a1cc <_read_r>:
 801a1cc:	b538      	push	{r3, r4, r5, lr}
 801a1ce:	4d07      	ldr	r5, [pc, #28]	@ (801a1ec <_read_r+0x20>)
 801a1d0:	4604      	mov	r4, r0
 801a1d2:	4608      	mov	r0, r1
 801a1d4:	4611      	mov	r1, r2
 801a1d6:	2200      	movs	r2, #0
 801a1d8:	602a      	str	r2, [r5, #0]
 801a1da:	461a      	mov	r2, r3
 801a1dc:	f7e8 f977 	bl	80024ce <_read>
 801a1e0:	1c43      	adds	r3, r0, #1
 801a1e2:	d102      	bne.n	801a1ea <_read_r+0x1e>
 801a1e4:	682b      	ldr	r3, [r5, #0]
 801a1e6:	b103      	cbz	r3, 801a1ea <_read_r+0x1e>
 801a1e8:	6023      	str	r3, [r4, #0]
 801a1ea:	bd38      	pop	{r3, r4, r5, pc}
 801a1ec:	200156b0 	.word	0x200156b0

0801a1f0 <_write_r>:
 801a1f0:	b538      	push	{r3, r4, r5, lr}
 801a1f2:	4d07      	ldr	r5, [pc, #28]	@ (801a210 <_write_r+0x20>)
 801a1f4:	4604      	mov	r4, r0
 801a1f6:	4608      	mov	r0, r1
 801a1f8:	4611      	mov	r1, r2
 801a1fa:	2200      	movs	r2, #0
 801a1fc:	602a      	str	r2, [r5, #0]
 801a1fe:	461a      	mov	r2, r3
 801a200:	f7e7 fea4 	bl	8001f4c <_write>
 801a204:	1c43      	adds	r3, r0, #1
 801a206:	d102      	bne.n	801a20e <_write_r+0x1e>
 801a208:	682b      	ldr	r3, [r5, #0]
 801a20a:	b103      	cbz	r3, 801a20e <_write_r+0x1e>
 801a20c:	6023      	str	r3, [r4, #0]
 801a20e:	bd38      	pop	{r3, r4, r5, pc}
 801a210:	200156b0 	.word	0x200156b0

0801a214 <abort>:
 801a214:	b508      	push	{r3, lr}
 801a216:	2006      	movs	r0, #6
 801a218:	f000 f82c 	bl	801a274 <raise>
 801a21c:	2001      	movs	r0, #1
 801a21e:	f7e8 f94b 	bl	80024b8 <_exit>

0801a222 <_raise_r>:
 801a222:	291f      	cmp	r1, #31
 801a224:	b538      	push	{r3, r4, r5, lr}
 801a226:	4605      	mov	r5, r0
 801a228:	460c      	mov	r4, r1
 801a22a:	d904      	bls.n	801a236 <_raise_r+0x14>
 801a22c:	2316      	movs	r3, #22
 801a22e:	6003      	str	r3, [r0, #0]
 801a230:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a234:	bd38      	pop	{r3, r4, r5, pc}
 801a236:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801a238:	b112      	cbz	r2, 801a240 <_raise_r+0x1e>
 801a23a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801a23e:	b94b      	cbnz	r3, 801a254 <_raise_r+0x32>
 801a240:	4628      	mov	r0, r5
 801a242:	f000 f831 	bl	801a2a8 <_getpid_r>
 801a246:	4622      	mov	r2, r4
 801a248:	4601      	mov	r1, r0
 801a24a:	4628      	mov	r0, r5
 801a24c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a250:	f000 b818 	b.w	801a284 <_kill_r>
 801a254:	2b01      	cmp	r3, #1
 801a256:	d00a      	beq.n	801a26e <_raise_r+0x4c>
 801a258:	1c59      	adds	r1, r3, #1
 801a25a:	d103      	bne.n	801a264 <_raise_r+0x42>
 801a25c:	2316      	movs	r3, #22
 801a25e:	6003      	str	r3, [r0, #0]
 801a260:	2001      	movs	r0, #1
 801a262:	e7e7      	b.n	801a234 <_raise_r+0x12>
 801a264:	2100      	movs	r1, #0
 801a266:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801a26a:	4620      	mov	r0, r4
 801a26c:	4798      	blx	r3
 801a26e:	2000      	movs	r0, #0
 801a270:	e7e0      	b.n	801a234 <_raise_r+0x12>
	...

0801a274 <raise>:
 801a274:	4b02      	ldr	r3, [pc, #8]	@ (801a280 <raise+0xc>)
 801a276:	4601      	mov	r1, r0
 801a278:	6818      	ldr	r0, [r3, #0]
 801a27a:	f7ff bfd2 	b.w	801a222 <_raise_r>
 801a27e:	bf00      	nop
 801a280:	200007cc 	.word	0x200007cc

0801a284 <_kill_r>:
 801a284:	b538      	push	{r3, r4, r5, lr}
 801a286:	4d07      	ldr	r5, [pc, #28]	@ (801a2a4 <_kill_r+0x20>)
 801a288:	2300      	movs	r3, #0
 801a28a:	4604      	mov	r4, r0
 801a28c:	4608      	mov	r0, r1
 801a28e:	4611      	mov	r1, r2
 801a290:	602b      	str	r3, [r5, #0]
 801a292:	f7e8 f901 	bl	8002498 <_kill>
 801a296:	1c43      	adds	r3, r0, #1
 801a298:	d102      	bne.n	801a2a0 <_kill_r+0x1c>
 801a29a:	682b      	ldr	r3, [r5, #0]
 801a29c:	b103      	cbz	r3, 801a2a0 <_kill_r+0x1c>
 801a29e:	6023      	str	r3, [r4, #0]
 801a2a0:	bd38      	pop	{r3, r4, r5, pc}
 801a2a2:	bf00      	nop
 801a2a4:	200156b0 	.word	0x200156b0

0801a2a8 <_getpid_r>:
 801a2a8:	f7e8 b8ee 	b.w	8002488 <_getpid>

0801a2ac <atan2>:
 801a2ac:	f000 b800 	b.w	801a2b0 <__ieee754_atan2>

0801a2b0 <__ieee754_atan2>:
 801a2b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a2b4:	ec57 6b11 	vmov	r6, r7, d1
 801a2b8:	4273      	negs	r3, r6
 801a2ba:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 801a438 <__ieee754_atan2+0x188>
 801a2be:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 801a2c2:	4333      	orrs	r3, r6
 801a2c4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 801a2c8:	4543      	cmp	r3, r8
 801a2ca:	ec51 0b10 	vmov	r0, r1, d0
 801a2ce:	4635      	mov	r5, r6
 801a2d0:	d809      	bhi.n	801a2e6 <__ieee754_atan2+0x36>
 801a2d2:	4244      	negs	r4, r0
 801a2d4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801a2d8:	4304      	orrs	r4, r0
 801a2da:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 801a2de:	4544      	cmp	r4, r8
 801a2e0:	468e      	mov	lr, r1
 801a2e2:	4681      	mov	r9, r0
 801a2e4:	d907      	bls.n	801a2f6 <__ieee754_atan2+0x46>
 801a2e6:	4632      	mov	r2, r6
 801a2e8:	463b      	mov	r3, r7
 801a2ea:	f7e5 fff7 	bl	80002dc <__adddf3>
 801a2ee:	ec41 0b10 	vmov	d0, r0, r1
 801a2f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a2f6:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 801a2fa:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 801a2fe:	4334      	orrs	r4, r6
 801a300:	d103      	bne.n	801a30a <__ieee754_atan2+0x5a>
 801a302:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a306:	f000 b8b7 	b.w	801a478 <atan>
 801a30a:	17bc      	asrs	r4, r7, #30
 801a30c:	f004 0402 	and.w	r4, r4, #2
 801a310:	ea53 0909 	orrs.w	r9, r3, r9
 801a314:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 801a318:	d107      	bne.n	801a32a <__ieee754_atan2+0x7a>
 801a31a:	2c02      	cmp	r4, #2
 801a31c:	d05f      	beq.n	801a3de <__ieee754_atan2+0x12e>
 801a31e:	2c03      	cmp	r4, #3
 801a320:	d1e5      	bne.n	801a2ee <__ieee754_atan2+0x3e>
 801a322:	a141      	add	r1, pc, #260	@ (adr r1, 801a428 <__ieee754_atan2+0x178>)
 801a324:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a328:	e7e1      	b.n	801a2ee <__ieee754_atan2+0x3e>
 801a32a:	4315      	orrs	r5, r2
 801a32c:	d106      	bne.n	801a33c <__ieee754_atan2+0x8c>
 801a32e:	f1be 0f00 	cmp.w	lr, #0
 801a332:	da5f      	bge.n	801a3f4 <__ieee754_atan2+0x144>
 801a334:	a13e      	add	r1, pc, #248	@ (adr r1, 801a430 <__ieee754_atan2+0x180>)
 801a336:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a33a:	e7d8      	b.n	801a2ee <__ieee754_atan2+0x3e>
 801a33c:	4542      	cmp	r2, r8
 801a33e:	d10f      	bne.n	801a360 <__ieee754_atan2+0xb0>
 801a340:	4293      	cmp	r3, r2
 801a342:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 801a346:	d107      	bne.n	801a358 <__ieee754_atan2+0xa8>
 801a348:	2c02      	cmp	r4, #2
 801a34a:	d84c      	bhi.n	801a3e6 <__ieee754_atan2+0x136>
 801a34c:	4b34      	ldr	r3, [pc, #208]	@ (801a420 <__ieee754_atan2+0x170>)
 801a34e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801a352:	e9d3 0100 	ldrd	r0, r1, [r3]
 801a356:	e7ca      	b.n	801a2ee <__ieee754_atan2+0x3e>
 801a358:	2c02      	cmp	r4, #2
 801a35a:	d848      	bhi.n	801a3ee <__ieee754_atan2+0x13e>
 801a35c:	4b31      	ldr	r3, [pc, #196]	@ (801a424 <__ieee754_atan2+0x174>)
 801a35e:	e7f6      	b.n	801a34e <__ieee754_atan2+0x9e>
 801a360:	4543      	cmp	r3, r8
 801a362:	d0e4      	beq.n	801a32e <__ieee754_atan2+0x7e>
 801a364:	1a9b      	subs	r3, r3, r2
 801a366:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 801a36a:	ea4f 5223 	mov.w	r2, r3, asr #20
 801a36e:	da1e      	bge.n	801a3ae <__ieee754_atan2+0xfe>
 801a370:	2f00      	cmp	r7, #0
 801a372:	da01      	bge.n	801a378 <__ieee754_atan2+0xc8>
 801a374:	323c      	adds	r2, #60	@ 0x3c
 801a376:	db1e      	blt.n	801a3b6 <__ieee754_atan2+0x106>
 801a378:	4632      	mov	r2, r6
 801a37a:	463b      	mov	r3, r7
 801a37c:	f7e6 fa8e 	bl	800089c <__aeabi_ddiv>
 801a380:	ec41 0b10 	vmov	d0, r0, r1
 801a384:	f000 fa10 	bl	801a7a8 <fabs>
 801a388:	f000 f876 	bl	801a478 <atan>
 801a38c:	ec51 0b10 	vmov	r0, r1, d0
 801a390:	2c01      	cmp	r4, #1
 801a392:	d013      	beq.n	801a3bc <__ieee754_atan2+0x10c>
 801a394:	2c02      	cmp	r4, #2
 801a396:	d015      	beq.n	801a3c4 <__ieee754_atan2+0x114>
 801a398:	2c00      	cmp	r4, #0
 801a39a:	d0a8      	beq.n	801a2ee <__ieee754_atan2+0x3e>
 801a39c:	a318      	add	r3, pc, #96	@ (adr r3, 801a400 <__ieee754_atan2+0x150>)
 801a39e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a3a2:	f7e5 ff99 	bl	80002d8 <__aeabi_dsub>
 801a3a6:	a318      	add	r3, pc, #96	@ (adr r3, 801a408 <__ieee754_atan2+0x158>)
 801a3a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a3ac:	e014      	b.n	801a3d8 <__ieee754_atan2+0x128>
 801a3ae:	a118      	add	r1, pc, #96	@ (adr r1, 801a410 <__ieee754_atan2+0x160>)
 801a3b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a3b4:	e7ec      	b.n	801a390 <__ieee754_atan2+0xe0>
 801a3b6:	2000      	movs	r0, #0
 801a3b8:	2100      	movs	r1, #0
 801a3ba:	e7e9      	b.n	801a390 <__ieee754_atan2+0xe0>
 801a3bc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801a3c0:	4619      	mov	r1, r3
 801a3c2:	e794      	b.n	801a2ee <__ieee754_atan2+0x3e>
 801a3c4:	a30e      	add	r3, pc, #56	@ (adr r3, 801a400 <__ieee754_atan2+0x150>)
 801a3c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a3ca:	f7e5 ff85 	bl	80002d8 <__aeabi_dsub>
 801a3ce:	4602      	mov	r2, r0
 801a3d0:	460b      	mov	r3, r1
 801a3d2:	a10d      	add	r1, pc, #52	@ (adr r1, 801a408 <__ieee754_atan2+0x158>)
 801a3d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a3d8:	f7e5 ff7e 	bl	80002d8 <__aeabi_dsub>
 801a3dc:	e787      	b.n	801a2ee <__ieee754_atan2+0x3e>
 801a3de:	a10a      	add	r1, pc, #40	@ (adr r1, 801a408 <__ieee754_atan2+0x158>)
 801a3e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a3e4:	e783      	b.n	801a2ee <__ieee754_atan2+0x3e>
 801a3e6:	a10c      	add	r1, pc, #48	@ (adr r1, 801a418 <__ieee754_atan2+0x168>)
 801a3e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a3ec:	e77f      	b.n	801a2ee <__ieee754_atan2+0x3e>
 801a3ee:	2000      	movs	r0, #0
 801a3f0:	2100      	movs	r1, #0
 801a3f2:	e77c      	b.n	801a2ee <__ieee754_atan2+0x3e>
 801a3f4:	a106      	add	r1, pc, #24	@ (adr r1, 801a410 <__ieee754_atan2+0x160>)
 801a3f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a3fa:	e778      	b.n	801a2ee <__ieee754_atan2+0x3e>
 801a3fc:	f3af 8000 	nop.w
 801a400:	33145c07 	.word	0x33145c07
 801a404:	3ca1a626 	.word	0x3ca1a626
 801a408:	54442d18 	.word	0x54442d18
 801a40c:	400921fb 	.word	0x400921fb
 801a410:	54442d18 	.word	0x54442d18
 801a414:	3ff921fb 	.word	0x3ff921fb
 801a418:	54442d18 	.word	0x54442d18
 801a41c:	3fe921fb 	.word	0x3fe921fb
 801a420:	0801bc38 	.word	0x0801bc38
 801a424:	0801bc20 	.word	0x0801bc20
 801a428:	54442d18 	.word	0x54442d18
 801a42c:	c00921fb 	.word	0xc00921fb
 801a430:	54442d18 	.word	0x54442d18
 801a434:	bff921fb 	.word	0xbff921fb
 801a438:	7ff00000 	.word	0x7ff00000

0801a43c <sqrtf>:
 801a43c:	b508      	push	{r3, lr}
 801a43e:	ed2d 8b02 	vpush	{d8}
 801a442:	eeb0 8a40 	vmov.f32	s16, s0
 801a446:	f000 f9b7 	bl	801a7b8 <__ieee754_sqrtf>
 801a44a:	eeb4 8a48 	vcmp.f32	s16, s16
 801a44e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a452:	d60c      	bvs.n	801a46e <sqrtf+0x32>
 801a454:	eddf 8a07 	vldr	s17, [pc, #28]	@ 801a474 <sqrtf+0x38>
 801a458:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801a45c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a460:	d505      	bpl.n	801a46e <sqrtf+0x32>
 801a462:	f7ff f8a7 	bl	80195b4 <__errno>
 801a466:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 801a46a:	2321      	movs	r3, #33	@ 0x21
 801a46c:	6003      	str	r3, [r0, #0]
 801a46e:	ecbd 8b02 	vpop	{d8}
 801a472:	bd08      	pop	{r3, pc}
 801a474:	00000000 	.word	0x00000000

0801a478 <atan>:
 801a478:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a47c:	ec55 4b10 	vmov	r4, r5, d0
 801a480:	4bbf      	ldr	r3, [pc, #764]	@ (801a780 <atan+0x308>)
 801a482:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 801a486:	429e      	cmp	r6, r3
 801a488:	46ab      	mov	fp, r5
 801a48a:	d918      	bls.n	801a4be <atan+0x46>
 801a48c:	4bbd      	ldr	r3, [pc, #756]	@ (801a784 <atan+0x30c>)
 801a48e:	429e      	cmp	r6, r3
 801a490:	d801      	bhi.n	801a496 <atan+0x1e>
 801a492:	d109      	bne.n	801a4a8 <atan+0x30>
 801a494:	b144      	cbz	r4, 801a4a8 <atan+0x30>
 801a496:	4622      	mov	r2, r4
 801a498:	462b      	mov	r3, r5
 801a49a:	4620      	mov	r0, r4
 801a49c:	4629      	mov	r1, r5
 801a49e:	f7e5 ff1d 	bl	80002dc <__adddf3>
 801a4a2:	4604      	mov	r4, r0
 801a4a4:	460d      	mov	r5, r1
 801a4a6:	e006      	b.n	801a4b6 <atan+0x3e>
 801a4a8:	f1bb 0f00 	cmp.w	fp, #0
 801a4ac:	f340 812b 	ble.w	801a706 <atan+0x28e>
 801a4b0:	a597      	add	r5, pc, #604	@ (adr r5, 801a710 <atan+0x298>)
 801a4b2:	e9d5 4500 	ldrd	r4, r5, [r5]
 801a4b6:	ec45 4b10 	vmov	d0, r4, r5
 801a4ba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a4be:	4bb2      	ldr	r3, [pc, #712]	@ (801a788 <atan+0x310>)
 801a4c0:	429e      	cmp	r6, r3
 801a4c2:	d813      	bhi.n	801a4ec <atan+0x74>
 801a4c4:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 801a4c8:	429e      	cmp	r6, r3
 801a4ca:	d80c      	bhi.n	801a4e6 <atan+0x6e>
 801a4cc:	a392      	add	r3, pc, #584	@ (adr r3, 801a718 <atan+0x2a0>)
 801a4ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a4d2:	4620      	mov	r0, r4
 801a4d4:	4629      	mov	r1, r5
 801a4d6:	f7e5 ff01 	bl	80002dc <__adddf3>
 801a4da:	4bac      	ldr	r3, [pc, #688]	@ (801a78c <atan+0x314>)
 801a4dc:	2200      	movs	r2, #0
 801a4de:	f7e6 fb43 	bl	8000b68 <__aeabi_dcmpgt>
 801a4e2:	2800      	cmp	r0, #0
 801a4e4:	d1e7      	bne.n	801a4b6 <atan+0x3e>
 801a4e6:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 801a4ea:	e029      	b.n	801a540 <atan+0xc8>
 801a4ec:	f000 f95c 	bl	801a7a8 <fabs>
 801a4f0:	4ba7      	ldr	r3, [pc, #668]	@ (801a790 <atan+0x318>)
 801a4f2:	429e      	cmp	r6, r3
 801a4f4:	ec55 4b10 	vmov	r4, r5, d0
 801a4f8:	f200 80bc 	bhi.w	801a674 <atan+0x1fc>
 801a4fc:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 801a500:	429e      	cmp	r6, r3
 801a502:	f200 809e 	bhi.w	801a642 <atan+0x1ca>
 801a506:	4622      	mov	r2, r4
 801a508:	462b      	mov	r3, r5
 801a50a:	4620      	mov	r0, r4
 801a50c:	4629      	mov	r1, r5
 801a50e:	f7e5 fee5 	bl	80002dc <__adddf3>
 801a512:	4b9e      	ldr	r3, [pc, #632]	@ (801a78c <atan+0x314>)
 801a514:	2200      	movs	r2, #0
 801a516:	f7e5 fedf 	bl	80002d8 <__aeabi_dsub>
 801a51a:	2200      	movs	r2, #0
 801a51c:	4606      	mov	r6, r0
 801a51e:	460f      	mov	r7, r1
 801a520:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801a524:	4620      	mov	r0, r4
 801a526:	4629      	mov	r1, r5
 801a528:	f7e5 fed8 	bl	80002dc <__adddf3>
 801a52c:	4602      	mov	r2, r0
 801a52e:	460b      	mov	r3, r1
 801a530:	4630      	mov	r0, r6
 801a532:	4639      	mov	r1, r7
 801a534:	f7e6 f9b2 	bl	800089c <__aeabi_ddiv>
 801a538:	f04f 0a00 	mov.w	sl, #0
 801a53c:	4604      	mov	r4, r0
 801a53e:	460d      	mov	r5, r1
 801a540:	4622      	mov	r2, r4
 801a542:	462b      	mov	r3, r5
 801a544:	4620      	mov	r0, r4
 801a546:	4629      	mov	r1, r5
 801a548:	f7e6 f87e 	bl	8000648 <__aeabi_dmul>
 801a54c:	4602      	mov	r2, r0
 801a54e:	460b      	mov	r3, r1
 801a550:	4680      	mov	r8, r0
 801a552:	4689      	mov	r9, r1
 801a554:	f7e6 f878 	bl	8000648 <__aeabi_dmul>
 801a558:	a371      	add	r3, pc, #452	@ (adr r3, 801a720 <atan+0x2a8>)
 801a55a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a55e:	4606      	mov	r6, r0
 801a560:	460f      	mov	r7, r1
 801a562:	f7e6 f871 	bl	8000648 <__aeabi_dmul>
 801a566:	a370      	add	r3, pc, #448	@ (adr r3, 801a728 <atan+0x2b0>)
 801a568:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a56c:	f7e5 feb6 	bl	80002dc <__adddf3>
 801a570:	4632      	mov	r2, r6
 801a572:	463b      	mov	r3, r7
 801a574:	f7e6 f868 	bl	8000648 <__aeabi_dmul>
 801a578:	a36d      	add	r3, pc, #436	@ (adr r3, 801a730 <atan+0x2b8>)
 801a57a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a57e:	f7e5 fead 	bl	80002dc <__adddf3>
 801a582:	4632      	mov	r2, r6
 801a584:	463b      	mov	r3, r7
 801a586:	f7e6 f85f 	bl	8000648 <__aeabi_dmul>
 801a58a:	a36b      	add	r3, pc, #428	@ (adr r3, 801a738 <atan+0x2c0>)
 801a58c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a590:	f7e5 fea4 	bl	80002dc <__adddf3>
 801a594:	4632      	mov	r2, r6
 801a596:	463b      	mov	r3, r7
 801a598:	f7e6 f856 	bl	8000648 <__aeabi_dmul>
 801a59c:	a368      	add	r3, pc, #416	@ (adr r3, 801a740 <atan+0x2c8>)
 801a59e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a5a2:	f7e5 fe9b 	bl	80002dc <__adddf3>
 801a5a6:	4632      	mov	r2, r6
 801a5a8:	463b      	mov	r3, r7
 801a5aa:	f7e6 f84d 	bl	8000648 <__aeabi_dmul>
 801a5ae:	a366      	add	r3, pc, #408	@ (adr r3, 801a748 <atan+0x2d0>)
 801a5b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a5b4:	f7e5 fe92 	bl	80002dc <__adddf3>
 801a5b8:	4642      	mov	r2, r8
 801a5ba:	464b      	mov	r3, r9
 801a5bc:	f7e6 f844 	bl	8000648 <__aeabi_dmul>
 801a5c0:	a363      	add	r3, pc, #396	@ (adr r3, 801a750 <atan+0x2d8>)
 801a5c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a5c6:	4680      	mov	r8, r0
 801a5c8:	4689      	mov	r9, r1
 801a5ca:	4630      	mov	r0, r6
 801a5cc:	4639      	mov	r1, r7
 801a5ce:	f7e6 f83b 	bl	8000648 <__aeabi_dmul>
 801a5d2:	a361      	add	r3, pc, #388	@ (adr r3, 801a758 <atan+0x2e0>)
 801a5d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a5d8:	f7e5 fe7e 	bl	80002d8 <__aeabi_dsub>
 801a5dc:	4632      	mov	r2, r6
 801a5de:	463b      	mov	r3, r7
 801a5e0:	f7e6 f832 	bl	8000648 <__aeabi_dmul>
 801a5e4:	a35e      	add	r3, pc, #376	@ (adr r3, 801a760 <atan+0x2e8>)
 801a5e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a5ea:	f7e5 fe75 	bl	80002d8 <__aeabi_dsub>
 801a5ee:	4632      	mov	r2, r6
 801a5f0:	463b      	mov	r3, r7
 801a5f2:	f7e6 f829 	bl	8000648 <__aeabi_dmul>
 801a5f6:	a35c      	add	r3, pc, #368	@ (adr r3, 801a768 <atan+0x2f0>)
 801a5f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a5fc:	f7e5 fe6c 	bl	80002d8 <__aeabi_dsub>
 801a600:	4632      	mov	r2, r6
 801a602:	463b      	mov	r3, r7
 801a604:	f7e6 f820 	bl	8000648 <__aeabi_dmul>
 801a608:	a359      	add	r3, pc, #356	@ (adr r3, 801a770 <atan+0x2f8>)
 801a60a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a60e:	f7e5 fe63 	bl	80002d8 <__aeabi_dsub>
 801a612:	4632      	mov	r2, r6
 801a614:	463b      	mov	r3, r7
 801a616:	f7e6 f817 	bl	8000648 <__aeabi_dmul>
 801a61a:	4602      	mov	r2, r0
 801a61c:	460b      	mov	r3, r1
 801a61e:	4640      	mov	r0, r8
 801a620:	4649      	mov	r1, r9
 801a622:	f7e5 fe5b 	bl	80002dc <__adddf3>
 801a626:	4622      	mov	r2, r4
 801a628:	462b      	mov	r3, r5
 801a62a:	f7e6 f80d 	bl	8000648 <__aeabi_dmul>
 801a62e:	f1ba 3fff 	cmp.w	sl, #4294967295	@ 0xffffffff
 801a632:	4602      	mov	r2, r0
 801a634:	460b      	mov	r3, r1
 801a636:	d148      	bne.n	801a6ca <atan+0x252>
 801a638:	4620      	mov	r0, r4
 801a63a:	4629      	mov	r1, r5
 801a63c:	f7e5 fe4c 	bl	80002d8 <__aeabi_dsub>
 801a640:	e72f      	b.n	801a4a2 <atan+0x2a>
 801a642:	4b52      	ldr	r3, [pc, #328]	@ (801a78c <atan+0x314>)
 801a644:	2200      	movs	r2, #0
 801a646:	4620      	mov	r0, r4
 801a648:	4629      	mov	r1, r5
 801a64a:	f7e5 fe45 	bl	80002d8 <__aeabi_dsub>
 801a64e:	4b4f      	ldr	r3, [pc, #316]	@ (801a78c <atan+0x314>)
 801a650:	4606      	mov	r6, r0
 801a652:	460f      	mov	r7, r1
 801a654:	2200      	movs	r2, #0
 801a656:	4620      	mov	r0, r4
 801a658:	4629      	mov	r1, r5
 801a65a:	f7e5 fe3f 	bl	80002dc <__adddf3>
 801a65e:	4602      	mov	r2, r0
 801a660:	460b      	mov	r3, r1
 801a662:	4630      	mov	r0, r6
 801a664:	4639      	mov	r1, r7
 801a666:	f7e6 f919 	bl	800089c <__aeabi_ddiv>
 801a66a:	f04f 0a01 	mov.w	sl, #1
 801a66e:	4604      	mov	r4, r0
 801a670:	460d      	mov	r5, r1
 801a672:	e765      	b.n	801a540 <atan+0xc8>
 801a674:	4b47      	ldr	r3, [pc, #284]	@ (801a794 <atan+0x31c>)
 801a676:	429e      	cmp	r6, r3
 801a678:	d21c      	bcs.n	801a6b4 <atan+0x23c>
 801a67a:	4b47      	ldr	r3, [pc, #284]	@ (801a798 <atan+0x320>)
 801a67c:	2200      	movs	r2, #0
 801a67e:	4620      	mov	r0, r4
 801a680:	4629      	mov	r1, r5
 801a682:	f7e5 fe29 	bl	80002d8 <__aeabi_dsub>
 801a686:	4b44      	ldr	r3, [pc, #272]	@ (801a798 <atan+0x320>)
 801a688:	4606      	mov	r6, r0
 801a68a:	460f      	mov	r7, r1
 801a68c:	2200      	movs	r2, #0
 801a68e:	4620      	mov	r0, r4
 801a690:	4629      	mov	r1, r5
 801a692:	f7e5 ffd9 	bl	8000648 <__aeabi_dmul>
 801a696:	4b3d      	ldr	r3, [pc, #244]	@ (801a78c <atan+0x314>)
 801a698:	2200      	movs	r2, #0
 801a69a:	f7e5 fe1f 	bl	80002dc <__adddf3>
 801a69e:	4602      	mov	r2, r0
 801a6a0:	460b      	mov	r3, r1
 801a6a2:	4630      	mov	r0, r6
 801a6a4:	4639      	mov	r1, r7
 801a6a6:	f7e6 f8f9 	bl	800089c <__aeabi_ddiv>
 801a6aa:	f04f 0a02 	mov.w	sl, #2
 801a6ae:	4604      	mov	r4, r0
 801a6b0:	460d      	mov	r5, r1
 801a6b2:	e745      	b.n	801a540 <atan+0xc8>
 801a6b4:	4622      	mov	r2, r4
 801a6b6:	462b      	mov	r3, r5
 801a6b8:	4938      	ldr	r1, [pc, #224]	@ (801a79c <atan+0x324>)
 801a6ba:	2000      	movs	r0, #0
 801a6bc:	f7e6 f8ee 	bl	800089c <__aeabi_ddiv>
 801a6c0:	f04f 0a03 	mov.w	sl, #3
 801a6c4:	4604      	mov	r4, r0
 801a6c6:	460d      	mov	r5, r1
 801a6c8:	e73a      	b.n	801a540 <atan+0xc8>
 801a6ca:	4b35      	ldr	r3, [pc, #212]	@ (801a7a0 <atan+0x328>)
 801a6cc:	4e35      	ldr	r6, [pc, #212]	@ (801a7a4 <atan+0x32c>)
 801a6ce:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801a6d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a6d6:	f7e5 fdff 	bl	80002d8 <__aeabi_dsub>
 801a6da:	4622      	mov	r2, r4
 801a6dc:	462b      	mov	r3, r5
 801a6de:	f7e5 fdfb 	bl	80002d8 <__aeabi_dsub>
 801a6e2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 801a6e6:	4602      	mov	r2, r0
 801a6e8:	460b      	mov	r3, r1
 801a6ea:	e9d6 0100 	ldrd	r0, r1, [r6]
 801a6ee:	f7e5 fdf3 	bl	80002d8 <__aeabi_dsub>
 801a6f2:	f1bb 0f00 	cmp.w	fp, #0
 801a6f6:	4604      	mov	r4, r0
 801a6f8:	460d      	mov	r5, r1
 801a6fa:	f6bf aedc 	bge.w	801a4b6 <atan+0x3e>
 801a6fe:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801a702:	461d      	mov	r5, r3
 801a704:	e6d7      	b.n	801a4b6 <atan+0x3e>
 801a706:	a51c      	add	r5, pc, #112	@ (adr r5, 801a778 <atan+0x300>)
 801a708:	e9d5 4500 	ldrd	r4, r5, [r5]
 801a70c:	e6d3      	b.n	801a4b6 <atan+0x3e>
 801a70e:	bf00      	nop
 801a710:	54442d18 	.word	0x54442d18
 801a714:	3ff921fb 	.word	0x3ff921fb
 801a718:	8800759c 	.word	0x8800759c
 801a71c:	7e37e43c 	.word	0x7e37e43c
 801a720:	e322da11 	.word	0xe322da11
 801a724:	3f90ad3a 	.word	0x3f90ad3a
 801a728:	24760deb 	.word	0x24760deb
 801a72c:	3fa97b4b 	.word	0x3fa97b4b
 801a730:	a0d03d51 	.word	0xa0d03d51
 801a734:	3fb10d66 	.word	0x3fb10d66
 801a738:	c54c206e 	.word	0xc54c206e
 801a73c:	3fb745cd 	.word	0x3fb745cd
 801a740:	920083ff 	.word	0x920083ff
 801a744:	3fc24924 	.word	0x3fc24924
 801a748:	5555550d 	.word	0x5555550d
 801a74c:	3fd55555 	.word	0x3fd55555
 801a750:	2c6a6c2f 	.word	0x2c6a6c2f
 801a754:	bfa2b444 	.word	0xbfa2b444
 801a758:	52defd9a 	.word	0x52defd9a
 801a75c:	3fadde2d 	.word	0x3fadde2d
 801a760:	af749a6d 	.word	0xaf749a6d
 801a764:	3fb3b0f2 	.word	0x3fb3b0f2
 801a768:	fe231671 	.word	0xfe231671
 801a76c:	3fbc71c6 	.word	0x3fbc71c6
 801a770:	9998ebc4 	.word	0x9998ebc4
 801a774:	3fc99999 	.word	0x3fc99999
 801a778:	54442d18 	.word	0x54442d18
 801a77c:	bff921fb 	.word	0xbff921fb
 801a780:	440fffff 	.word	0x440fffff
 801a784:	7ff00000 	.word	0x7ff00000
 801a788:	3fdbffff 	.word	0x3fdbffff
 801a78c:	3ff00000 	.word	0x3ff00000
 801a790:	3ff2ffff 	.word	0x3ff2ffff
 801a794:	40038000 	.word	0x40038000
 801a798:	3ff80000 	.word	0x3ff80000
 801a79c:	bff00000 	.word	0xbff00000
 801a7a0:	0801bc50 	.word	0x0801bc50
 801a7a4:	0801bc70 	.word	0x0801bc70

0801a7a8 <fabs>:
 801a7a8:	ec51 0b10 	vmov	r0, r1, d0
 801a7ac:	4602      	mov	r2, r0
 801a7ae:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801a7b2:	ec43 2b10 	vmov	d0, r2, r3
 801a7b6:	4770      	bx	lr

0801a7b8 <__ieee754_sqrtf>:
 801a7b8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801a7bc:	4770      	bx	lr
	...

0801a7c0 <_init>:
 801a7c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a7c2:	bf00      	nop
 801a7c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a7c6:	bc08      	pop	{r3}
 801a7c8:	469e      	mov	lr, r3
 801a7ca:	4770      	bx	lr

0801a7cc <_fini>:
 801a7cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a7ce:	bf00      	nop
 801a7d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a7d2:	bc08      	pop	{r3}
 801a7d4:	469e      	mov	lr, r3
 801a7d6:	4770      	bx	lr
